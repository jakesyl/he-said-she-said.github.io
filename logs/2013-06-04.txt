--- Log opened Tue Jun 04 00:00:03 2013
--- Day changed Tue Jun 04 2013
00:00 < othiym23> plus it's got coffee... in the name!
00:00 <@Nexxy> I was just trying to call you a hypocrite without actually saying it
00:00 < jesusabdullah> ahhhhh
00:00 < jesusabdullah> you guys!
00:00 < ljharb_work> lol i know
00:00 <@Nexxy> shhh, the logging bot is back
00:01 <@Nexxy> everyone pretend to agree on things
00:01 < nlf> i do like the ? operator.. so instead of if (thing && thing.subthing && thing.subthing2) you can just do if thing.subthing.subthing2?
00:01 < ljharb_work> yeah, nothing like not having to know how your objects are composed :-p
00:02 <@Nexxy> I could replae a few words in that sentence
00:02 <@Nexxy> but I won't
00:02 < polyrhythm> annotated source is at http://coffeescript.org/
00:02 < nlf> i'm forgetful sometimes, not having to remember to see if an object exists before i check a property on it would be nice
00:03 <@Nexxy> !nothing(obj)
00:03 < newz2000> I've been playing with frameworks, written a few apps with express, wondering if there is something closer to Django or Rails
00:03 <@Nexxy> newz2000, meteor 
00:03 < othiym23> I do find it encouraging that most of the bits of CoffeeScript I actually like have made the jump to ES6
00:03 < jesusabdullah> meatier? :(
00:03 < polyrhythm> towerjs is rails-like
00:03 < othiym23> like irrefutable / refutable destructuring assignment
00:04 < jesusabdullah> Big is more full-stack
00:04 < othiym23> don't forget Geddy!
00:04 < newz2000> @Nexxy I tried meteor, it freaked me out writing mongo queries in the client side :-)
00:04 < jesusabdullah> I wouldn't say it's "like rails" but it gives you a lot more than express
00:04 < newz2000> It doesn't need to be like rails, just something that abstracts away the common patterns
00:04 < othiym23> jesusabdullah: yeah, but if you try to use big without the personal blessing of its creator, he calls you an idiot newb and spits on your family and disappears to sulk somewhere for another six months
00:04 <@Nexxy> newz2000, congratulations! you're a sensible developer
00:04 < ljharb_work> Nexxy++
00:05 < jesusabdullah> othiym23: Did something happen to you specifically?
00:05 < othiym23> haha no
00:05 < othiym23> just watching the drama elsewhere
00:05 < newz2000> jesusabdullah: do you know how hard it is to find a node.js library called big? :-)
00:05 < newz2000> (I probably should go right to npm instead of google)
00:05 < jesusabdullah> hah
00:06 < othiym23> newz2000: https://github.com/bigcompany/big
00:06 < jesusabdullah> othiym23: unfamiliar with the particular drama of which you speak
00:06 < polyrhythm> another option is SailsJS: http://balderdashy.github.io/sails/
00:06 < newz2000> othiym23: thanks, checking it and tower and geddy out
00:06 < othiym23> there's also *sigh* Derby
00:06 < newz2000> yes, that's what I've been playing with the last few days
00:07 < othiym23> but it's more like Meteor than those other things, and if Meteor doesn't float your boat, Derby probably won't either
00:07 < newz2000> I like the premise a lot, but the docs are leaving me scratching my head
00:07 < jesusabdullah> othiym23: or as I like to call it, "derpy"
00:07 < othiym23> yeah, it's a boatload of abstractions to take on all at once
00:07 <@Nexxy> if only there were some sort of registry
00:07 < jesusabdullah> anyhoo, if you want to get a birds-eye view of big, I wrote a blog post about it http://jesusabdullah.github.io/2013/05/28/the-case-for-a-nodejs-framework.html
00:07 <@Nexxy> with tens of thousands of ... modules
00:08 < othiym23> some sort of Node package manager
00:08 < othiym23> that you could search
00:08 < jesusabdullah> Nexxy: but what would we call it???
00:08 <@Nexxy> all offering their own set of functionality
00:08 < newz2000> that would be awesome
00:08 < newz2000> I think it should be called "bob"
00:08 < othiym23> newz2000: nah, takes two hands to type
00:08 < jesusabdullah> Nexxy: That's crazy talk, everyone knows what you want is a centralized curated listing of github projects inside a github project with .ini-formatted manifests
00:08 < toothrot> microsoft will sue you
00:09 < othiym23> there are people who actually *like* writing .ini files
00:09 < qard> nah man, xml.
00:09 < ljharb_work> http://stopsoap.com
00:09 < othiym23> I mean, it's better than having turing-complete config files
00:09 < jesusabdullah> pffsht
00:09 < newz2000> jesusabdullah: thanks for the blog post, will check it out too. More libs need blog posts like that.
00:09 < jesusabdullah> I have to admit, I have a soft spot for lua-based configs
00:10 < newz2000> Here's another q: should I aspire to have a test framework for both client and server side, or not sweat it and use different tools for each?
00:10 < jesusabdullah> newz2000: yw :)
00:10 < othiym23> write tests, choose test frameworks that work for the job at hand
00:10 < polyrhythm> i use mocha for everything and it works out
00:10 < jesusabdullah> newz2000 I'd do some research, there are ways to do it on both sides so I'd just look at your options and choose the one(s) that make you least angry
00:10 < jesusabdullah> yeah, afaik mocha works both sides
00:10 < othiym23> I so can not be motivated to argue about test frameworks, because it's so subjective
00:11 < newz2000> yeah, least angry is a good description
00:11 < jesusabdullah> and the sub stack's tape thing supports both ends I think
00:11 < othiym23> but don't feel compelled to use the same thing for both client and server if it doesn't feel natural
00:11 < newz2000> I really like junit style assertions, i.e. buster or jstestdriver, that seems to limit my options
00:11 < jesusabdullah> j-j-j-j u NIT
00:11 < jesusabdullah> I personally like node-tap
00:11 < othiym23> me too
00:11 < jesusabdullah> if I was doing client side testing I'd probably investamagate tape
00:11 < othiym23> although it's even too heavyweight for some of the stuff I've been doing lately
00:12 < jesusabdullah> that or just be like, "fuck this I'm using mocha"
00:12 < othiym23> require('assert') and functions are kinda my speed right now
00:12 < jesusabdullah> I feel that
00:12 < jesusabdullah> I started doing that in my python tests
00:12 < jesusabdullah> cause fuck nose
00:12 < othiym23> mocha isn't great for stuff where you're going to be testing lots of EventEmitters or domains-related stuff
00:12 < jesusabdullah> hey man, if you can write meaningful tests in vows you can write them in ANYTHING
00:12 < othiym23> you end up with weird observer / observed problems where mocha's monkeying with the continuation flow and error handling in a way that alters test behavior
00:13 < jesusabdullah> and I have so much vows experience I've gone through stockholm syndrome with it
00:13 < newz2000> it seems that few tools get the concept that everything can be async (to be fair, I'm still wrapping my head around it too)
00:13 < jesusabdullah> newz2000: yeeeah
00:13 < othiym23> jesusabdullah: funny you should say that, I was bitching about vows the very first time I met indexzero and it led to our first ever conversation IRL being a giant argument
00:13 < othiym23> good times
00:13 < jesusabdullah> othiym23: olololo
00:13 < jesusabdullah> othiym23: have we met irl? I don't go to all the meetups but I've been to one or two
00:14 < othiym23> that's OK, he thinks my employer's entire raison d'etre is bullshit, so we had plenty to talk about
00:14 <@xyxne> othiym23, well if you'd stop being so wrong about everything...
00:14 < jesusabdullah> othiym23: wait who employs you?
00:14 < othiym23> jesusabdullah: nah, I'm pretty SF-bound -- done NodeConf and NodePDX and NodeCamp 2012
00:14 < othiym23> jesusabdullah: New Relic
00:14 <@xyxne> omg NodePDX
00:14 < othiym23> I'm their node team
00:14 < jesusabdullah> investors, get that scrilla in my bank account already. Papa Jitsu needs some of those funky suede hi-tops with the shoelaces
00:14 < jesusabdullah> othiym23: oh word, I was in SF for a while
00:14 <@xyxne> was that amazing or was it amazing?
00:15 < othiym23> xyxne: it was good times 2 the maxx
00:15 < jesusabdullah> othiym23: oh shit I remember when they hired you lol
00:15 < jesusabdullah> othiym23: I was like, "hey noob relic guys when ur support node"
00:15 < jesusabdullah> "you keep trying to give me shit but I don't write in python anymore"
00:15 < jesusabdullah> and they were like, "BRO we JUST HIRED a GUY"
00:15 < othiym23> jesusabdullah: I basically came here saying, "you guys need a Node agent, I can make you one"
00:15 < jesusabdullah> nice
00:15 < othiym23> and here I am, a year later, diligently working my way towards 1.0
00:15 <@xyxne> and now look at you
00:16 < othiym23> yeah, the twitching will never stop
00:16 <@xyxne> knee deep in node internals
00:16 < jesusabdullah> working for noob relic
00:16 < othiym23> somebody's gotta think of the noobs
00:16 <@xyxne> it's like agent orange
00:16 < jesusabdullah> lol yup
00:16 < jesusabdullah> ugh my brain must be pretty fried I can't remember all the things NR does
00:16 < jesusabdullah> it's process stats right?
00:17 < othiym23> actually most of the people I talk to who are using Node with New Relic are more with-it than I expected, they're just not fascinated by lots of small moving parts like I am
00:17 < jesusabdullah> "instrumentation" was the word I was looking for
00:17 < othiym23> APM -- application performance monitoring
00:17 < othiym23> it's an increasingly nebulous concept
00:17 < s5fs> jesusabdullah: hey, i never found anyone for your storage unit, sorry dood. my friends are prepping for lifecycle or something.
00:17 < jesusabdullah> s5fs: hey, all good. I found someone
00:17 < othiym23> so I just describe it as "a tool to help you figure out how to make your code faster"
00:18 <@xyxne> turbo button?
00:18 < s5fs> jesusabdullah: good deal! i saw your tweet for hire, seems lots of opportunities exist. worst case, you're in alaska, trap bears.
00:18 < othiym23> s5fs: my CrazyFlie showed up on Friday, when I'm not up to my ass in getting ready for NodeConf I'll put it together
00:18 < othiym23> s5fs: I can't remember, will you be at NodeConf?
00:18 <@xyxne> s5fs, will you?!
00:18 <@xyxne> WILL YOU?!
00:18 < jesusabdullah> s5fs: Yeah, still lookin' around if you know anyone
00:18 <@xyxne> tell us.
00:18 < othiym23> xyxne: nah, you as a dev still have to figure out what's busted and fix it yourself
00:19 < othiym23> xyxne: I'll probably have it assembled and with me by then
00:19 < othiym23> xyxne: I sent you the link to the Crazyflie, right?
00:19 <@xyxne> no.
00:19 <@xyxne> maybe.
00:19 <@xyxne> I don't remember.
00:19 < othiym23> I totally did, but you weren't around
00:19 < othiym23> or you hate me
00:19 <@xyxne> well yeah but
00:19 <@xyxne> :P
00:19 < othiym23> http://www.seeedstudio.com/depot/crazyflie-nano-quadcopter-kit-6dof-with-crazyradio-bccfk02a-p-1365.html
00:19 < othiym23> I have the 6DOF version
00:20 <@xyxne> yes
00:20 < othiym23> I kinda wanted all the degrees of freedom, but it's $50 more and the current firmware doesn't actually support the altimeter and compass anyway
00:20 <@xyxne> you gave me this
00:20 < othiym23> it's so cute!
00:20 < othiym23> the box is teensy!
00:20 <@xyxne> needs moar intel
00:21 < othiym23> should I plan on packing my soldering iron and multimeter for NodeConf?
00:21 < s5fs> othiym23: wouldn't hurt. i'll have some gear, but more is better.
00:21 <@xyxne> I will brng mine
00:21 <@xyxne> but yeah
00:21 < jesusabdullah> othiym23: that seems oddly like an old nodejitsu skunkworks project...weird that papa jitsu would react that way
00:21 <@xyxne> I'll be bringing my entire toolbox 
00:21 <@xyxne> which ends up being a suitcase
00:21 < s5fs> xyxne: that was my intention too, mainly bc i wanna carry it thru the airport.
00:21 < othiym23> jesusabdullah: he was all "YOU SHOULD USE DTRACE IT IS THE ONE TRUE WAY TO GATHER METRICS" etc
00:22 <@xyxne> s5fs, it's fun
00:22 < othiym23> jesusabdullah: "INTERNAL INSTRUMENTATION IS BULLSHIT" blah blah blah
00:22 < jesusabdullah> othiym23: that seems like a technical detail to me
00:22 <@xyxne> the best part is how they fixate on the parts of your stuff that aren't actually dangerous at all
00:22 < jesusabdullah> like if you have instrumentation then you have instrumentation
00:22 < othiym23> it is and it isn't -- my work is definitely going to have higher overhead costs than DTrace
00:22 <@xyxne> whilst completely overlooking the components that could actually present a danger
00:22 < othiym23> but it also works on Windows and Linux, so...
00:23 < s5fs> othiym23: i think you have one of the most interesting and challenging jobs at NR, fwiw
00:23 < othiym23> s5fs: the team that nn (Nick Niemeir) just joined has an even harder job, but I don't know how ready we are to talk about that stuff
00:24 < othiym23> we can talk about it at NodeConf mebbe
00:24 < othiym23> but yeah, I asked for this job, and for my sins, they gave it to me
00:24 < othiym23> I have few regrets
00:24 < s5fs> othiym23: as they say, be careful what you wish for ;-)
00:25 <@xyxne> they are playing chiptunes @ backspace
00:25 <@xyxne> wrong window but still relevant
00:26 < newz2000> Thanks for the help all, my head is full of ideas. Will be back when I've exhausted the supply and need more. ;-)
00:26 < jesusabdullah> good deal newz2000 
00:34 < sawbon3s> hey guys
00:34 < sawbon3s> first time here
00:34 < ChrisPartridge> sawbon3s: welcome!
00:52 < phI||Ip> There any goto sites for hiring node.js developers for short contracts?
00:53 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:02 < verysoftoiletppr> hi
01:03 < jesusabdullah> hello
01:03 < verysoftoiletppr> I get this error while trying to install Yo http://hastebin.com/sisagurape
01:03 < verysoftoiletppr> Ideas?
01:04 < s5fs> verysoftoiletppr: try sudo
01:04 < AvidCoder> or chmod
01:04 < verysoftoiletppr> s5fs sudo.. should I need to use sudo with npm?
01:05 < s5fs> verysoftoiletppr: yep
01:05 < AvidCoder> you shouldn't have to use sudo, I would double check that you have the correct file permissions setup
01:05 < s5fs> AvidCoder: they're using 'npm install -g'
01:06 < AvidCoder> ahh
01:06 < s5fs> AvidCoder: line 9 shows the args :)
01:07 < AvidCoder> thanks, I've never seen that before
01:07 < verysoftoiletppr> s5fs thanks
01:07 < jasonkuhrt> Hi, I am getting a stream error "Error: write after end" and I am trying to figure out how to reproduce the error in a test suite
01:08 < jasonkuhrt> I am able to invoke the error by telnet'ing to the local node tcp server, and then reconnecting, etc.
01:08 < jasonkuhrt> but if I try to net.createConnection s in a test suite I cannot generate the error
01:09 < jasonkuhrt> seems like I am misunderstanding something that would be obvious to a Noder
01:09 < s5fs> jasonkuhrt: if you can post a code sample that's really helpful
01:10 < jasonkuhrt> s5fs: gist will do?
01:10 < s5fs> jasonkuhrt: i gtg shortly, but a gist is totally acceptable. everyone wants to read code, even those who are lurking ;-)
01:11 < sova> does anyone have any database recommendations ? will mostly be dealing with plaintext
01:12 < jasonkuhrt> s5fs: https://gist.github.com/jasonkuhrt/b08903ee52ae8df1b5dc
01:13 < jasonkuhrt> s5fs: Its a bit abbreviated but I think has enough to get the point
01:13 < jasonkuhrt> like I said, I understand the bug, but I want to fix with via a passing test, yet cannot reproduce the bug...
01:13 < jasonkuhrt> https://gist.github.com/jasonkuhrt/b08903ee52ae8df1b5dc#file-cloud-js-L19
01:14 < jasonkuhrt> the issue is that when a socket disconnects, the {end:true} option is not set, thus it tries to close the service stream
01:15 < jasonkuhrt> then, the next time a socket connects the service stream is written to again (but it was ended by the previous socket via pipe end-forwarding)
01:15 < jasonkuhrt> soooOOo
01:15 < jasonkuhrt> I can easily trigger the error via telnet connection (connect, discconect, reconnect + type something)
01:15 < jasonkuhrt> when I try recreating that here https://gist.github.com/jasonkuhrt/b08903ee52ae8df1b5dc#file-cloud-test-js-L16 its not causing the bug
01:16 < jasonkuhrt> that's my summary...
01:16 < s5fs> jasonkuhrt: good summary
01:20 < s5fs> jasonkuhrt: i'm sorry, i have nothing to add. your code passes the "gotta run to dinner" eyeball test on my side, sorry i couldn't be of more help.
01:21 < jasonkuhrt> s5fs: no problem, thanks for your check! I actually just realized a problem
01:21 < jasonkuhrt> which is my test isn't loading the service that the terminal test was
01:21 < jasonkuhrt> so that's for at least one problem
01:21 < jasonkuhrt> s5fs: have a good dinner : ) thanks again
01:34 < upstream> I'm trying to stress test couchbase using NodeJS by just creating like 100,000 new documents as fast as I can
01:35 < upstream> so recursive function but I get max call size error quickly, so I wrap the recursive call in process.nextTick, and now I get warnings and another max call size
01:35 < upstream> the warning suggests wrapping in setImmediate, this works, however it's now much slower
01:35 < upstream> is there any suggestions for doing something like this really fast, is node maybe just not the tool here?
01:36 < Zolmeister> why recursive?
01:37 < AvidCoder> upstream: is there a reason you are doing recursion? javascript will create a new stack for every entrance into a function and that will cause extra weight that you wouldn't want in a stress test
01:37 < upstream> I see, I wasn't really aware of the implications of using recursion in JS I guess
01:38 < jesusabdullah> yeah, no tail call optimization
01:38 < upstream> so suggest I just do a for loop?
01:38 < jesusabdullah> wah wah wahhhhh
01:38 < Zolmeister> yup
01:38 < Zolmeister> or trampolining
01:38 < upstream> trampolines? :)
01:38 < jesusabdullah> Zolmeister: how would for loop work? That would create 10000 connections at once (or at least try)
01:39 < Zolmeister> promises?
01:39 < Zolmeister> upstream: http://raganwald.com/2013/03/28/trampolines-in-javascript.html
01:39 < jesusabdullah> that sounds like a tough problem to me actually
01:40 < jesusabdullah> this trampoline technique sounds cool though
01:40 < upstream> indeed, thanks for the link
01:41 < darth_cheney> Hey everyone -- any tips on the best small-scale hosting for node?
01:42 < jesusabdullah> what are you looking for?
01:42 < jesusabdullah> exactly?
01:42 < darth_cheney> So this is going to sound a bit silly
01:42 < Zolmeister> darth_cheney: I suggest either EC2 or Heroku
01:43 < darth_cheney> but in order to get myself acquainted properly with both node and angular I'm going to build a simple blog site
01:43 < darth_cheney> that's it
01:43 < progrock`> with express, and app.get ... how does it work when there are 3 arguments (I know the first is the route) but what exactly are the next two?
01:43 < CarlFK>  http://www.timvideos.us/chipy  live meeting.. bone script js on beagle board that talks to hardware 
01:44 < progrock`> oh its multiple callbacks
01:44 < progrock`> is there a trick  to combinging them... like calling the first callback at the beginning of the second with the same arguments?
01:48 < progrock`> oh, or it appears I can make them an array for the same result?
01:50 < progrock`> ok, I guess the array works... trying to figure out the best way to get my code out of app.js
01:53 < darth_cheney> prog - are you using separate individual route js files for executing a route?
01:55 < ningu> is the node.js ustack helper supported on anything other than SmartOS?
01:55 < progrock`> darth_cheney: well I wasnt gonn throw them in a routes directory (seems weird to me).. but for example I'm making a users.js next to app.js
01:56 < progrock`> darth_cheney: all the routes will be defined in app.js, but their functions will all be in users.js
01:56 < progrock`> I think I'm gonna use this technique for passing the db, etc, along; http://stackoverflow.com/questions/10306185/nodejs-best-way-to-pass-common-variables-into-separate-modules (the top asnwer that is0
01:57 < progrock`> tho i wasnt originally plannign to do server.js running app.js... tho who knows, maybe I will
01:57 < ChrisPartridge> ningu: you need dtrace, so I'd assume SmartOS/something Illumos/solaris based would be your only options
01:58 < ningu> ChrisPartridge: well, there's FreeBSD
01:58 < ningu> I'm just getting annoyed with the package management/availability in SmartOS... don't really want to spend a lot of time dealing with that
01:59 < darth_cheney> definitely put them in a routes directory
01:59 < darth_cheney> require the files at the top of app.js
01:59 < darth_cheney> give them a var name that's the same, so like var user_routes = require('routes/users')
02:00 < darth_cheney> then in the get function do app.get('/users', user_routes) and that's that
02:00 < ChrisPartridge> ningu: not sure, I just got used to SmartOS tbh :p
02:00 < progrock`> I just find it werid claling them routes... and I'm looking at this example which doesnt use the routes folder: https://github.com/visionmedia/express/tree/master/examples/route-separation
02:00 < darth_cheney> then in user.js make sure to have the correct function you want export
02:00 < ningu> ChrisPartridge: I'm feeling like if I had more than one person to manage it I could do SmartOS but not sure if I have the time to handle it on my own
02:01 < darth_cheney> have you made a scaffold from express? The routing is nice
02:01 < progrock`> but wether or not they arein their own folder isnt a big issue either way
02:01 < ningu> progrock`: you can lay it out however you want
02:01 < ningu> route is a pretty normal name for it
02:01 < ningu> not just in express
02:01 < progrock`> I'm wonding the bext technique to do multiple callbacks
02:01 < progrock`> For now I was just gonna do exports.name = [callback1, callback2]
02:02 < ningu> progrock`: huh? for a route?
02:04 < progrock`> ningu: yeah... like I'm using passport... where theres: http://pastebin.com/X6D8XXXX
02:04 < progrock`> Am I just doing that wrong?
02:05 < ChrisPartridge> ningu: Only really took me a week or two to adjust, what do you need that isn't in pkgsrc?
02:05 < ningu> ChrisPartridge: puppet
02:05 < ningu> it's a very old version
02:08 < progrock`> another question on where to put things
02:08 < progrock`> I have a 'ensureAuthenticated' function... I would think I should keep it in app.js so I can easily see al the routes that require authentication
02:08 < progrock`> tho I culd have it as an export in users.js as well... not sure which makes more sens
02:09 < ssafejava> progrock`: I keep a /lib/middleware directory and put all of them in there.. makes it easy to reuse throughout the app
02:10 < progrock`> ssafejava: hmm, that sounds a little more accurat than routes
02:11 < progrock`> do the modules automatically have access to 'process' or do I have to pass it to them?
02:11 < ssafejava> progrock`: All modules have access to `process`
02:11 < ningu> progrock`: I have an auth.js file that implements the equivalent route
02:11 < ningu> progrock`: also, I define all of my app.get/post/etc. lines in the individual routes/foo.js file
02:12 < ssafejava> progrock`: Keeping separate directories for e.g. middleware keeps things clean and simple. I also create an index.js file in the directory so I don't have to update any require() statements when I add another module. Example: https://gist.github.com/ssafejava/b449756283457aa882e1
02:12 < ningu> so var auth = require('../lib/auth'); app.get('/foo', ensureAuthenticated, foo);
02:12 < ningu> and then from app.js, require('./routes
02:12 < ningu> oops
02:12 < ningu> require('./routes')(app);
02:13 < ningu> in routes/index.js, module.exports = function(app) { require('./foo)(app); require('./bar)(app); }
02:13 < ningu> and probably also app.get('/', ...)
02:13 < progrock`> ningu: for now I htink I'm gonna keep my routes in the app, just have their callbacks in separate.. tho i may change that as I go along
02:13 < ningu> progrock`: I find it to be cleaner separation to do it my way
02:13 < ningu> but either way works obviously
02:14 < progrock`> ningu: yeah i may agree with you especially as I develop mor than one node app.. but for now I like seing it all in one spot
02:14 < ningu> I try to keep my app.js fairly short, a couple hundred lines
02:15 < ningu> and split other pieces into lib/
02:15 < progrock`> with everything it in my app.js is only a couple hundred lines, lol
02:15 < progrock`> tho that probably wont last long
02:18 < ssafejava> Yeah, routes are really easy to split out by throwing them in another module wrapped inside a function that takes 'app' as an arg
02:22 < progrock`> wow, kinda surprised this worked the first time
02:23 < jesusabdullah> what's that exactly progrock` 
02:23 < jesusabdullah> ?
02:23 < progrock`> not sure if it makes sense to have 'users' wrapped in a function that I call 'new' on as in the example.. I mean I could just save all to an object that is returned, and not call new... not sure if there is any bnefit to having to call new
02:24 < progrock`> jesusabdullah: what ive been talking about, taking all my user management code out of app.js into user.js
02:24 < timoxley> progrock` why call new
02:24 < ssafejava> progrock`: Yeah it's not really necessary to use `new` unless you plan on instantiating several objects and taking advantage of the speed of prototype lookups
02:24 < progrock`> hmm, maybe I spoke too soon, lol
02:24 < progrock`> ssafejava: ok, good... I dint lik ethat part of the example
02:26 < progrock`> now, I gotta figure out why everything seems to be working perfect, except that after loging in I'm not showing up as logged in
02:27 < jesusabdullah> progrock`: aha
02:28 < rksm> Hi, new here as well :)
02:28 < rksm> I'm currently trying to figure out how to use npm programmatically. I have something like this: https://gist.github.com/rksm/5703150
02:28 < jesusabdullah> rksm: my favorite approach is honestly shelling out
02:29 < rksm> when I call it with npmDo('ls', function() { console.log(arguments); }) everything looks good
02:30 < rksm> however, when I do npmDo('ls', 'nodeunit', function() { console.log(arguments); }) and afterwards npmDo('ls', function() { console.log(arguments); }) the parameter "nodeunit" is used again, somwhoe it was rememebered. Any idea how to fix this?
02:30 < progrock`> hmmm.. def need to find out why req.user is showng up as undefined after a successful login
02:30 < rksm> ok, using shell is another option sure
02:30 < jesusabdullah> rksm: isaac might but I don't think he has much interest in supporting programmatic use of npm :/
02:31 < jesusabdullah> yeah
02:31 < rksm> ok thanks anyway :)
02:39 < progrock`> ok, guess I needed to do the app.use(passport...) after sessions... guess that should be outside of users.js
02:41 < progrock`> now I'm wondering if the passport setup shuld be part of users.js, lol
02:52 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:01 < jasonkuhrt> Is there a reason why piping to a stream instance from different sockets is a bad idea
03:01 < jasonkuhrt> for instance I have a bylineStream
03:01 < jasonkuhrt> its just a transform stream
03:01 < jasonkuhrt> that acts like a pure fuction, without internal state
03:02 < jasonkuhrt> so can I just reuse that stream instance for every tcp socket connection
03:02 < jasonkuhrt> not so much 'can' but are there pitfalls
03:02 < jasonkuhrt> ?
03:05 < ningu> jasonkuhrt: I don't think you can do that
03:05 < ningu> but I don't actually know
03:05 < jasonkuhrt> well i *am* doing it, but I'm noticing odd things
03:05 < jasonkuhrt> ningu: for instance after >1 sockets connected
03:06 < ningu> jasonkuhrt: every stream has internal state, including transform streams
03:06 < jasonkuhrt> it seems to fire the used stream xSocket connections, when ANY of the sockets do something
03:07 < jasonkuhrt> ningu: Hm, okay, so piping n connections through the same stream instance is going to get weird...
03:07 < ningu> yes
03:07 < jasonkuhrt> I thought that would be nicer for performance
03:07 < jasonkuhrt> if it was a stream wrapping a pure function
03:07 < jasonkuhrt> I thought that was clever
03:07 < jasonkuhrt> but "too" clever it seems
03:08 < jasonkuhrt> so 10000 connections are going to need 9999 extra instances
03:08 < jasonkuhrt> seems crappy
03:10 < ningu> jasonkuhrt: streams are not very heavy at all
03:10 < jasonkuhrt> ningu: good to know
03:10 < jasonkuhrt> ningu: predictable I suppose, its pretty low-level
03:10 < ningu> yeah, profile it if you are concerned
03:11 < jasonkuhrt> ningu: and they seem to be pushed hard by node as a key concept, so figure they've optimized that highly
03:11 < ningu> I don't know the numbers offhand
03:11 < jasonkuhrt> I already read in the mailing list they "optimized the hell out of" EventEmitter
03:11 < ningu> but every socket is a stream already
03:11 < jasonkuhrt> which is under a stream, so ...
03:11 < jasonkuhrt> ningu: yeah good point
03:20 < JosephFerano> hey guys, I have a require at the top; var button = require("../button/Button");
03:20 < JosephFerano> then in my constructor, I'm calling this;
03:20 < JosephFerano> var test = new button( $("#et-button1"), 44, 68, 100, 84);
03:20 < JosephFerano> it's giving me an error saying; Uncaught TypeError: object is not a function 
03:21 <@xyxne> you're not exporting a function?
03:21 < JosephFerano> let me check
03:21 < JosephFerano> bah!
03:21 < JosephFerano> forgot
03:21 < JosephFerano> thanks
03:21 <@xyxne> :)
03:30 < Eigen> ahh
03:30 < Eigen> I'm getting ECONNREFUSED
03:31 < Eigen> and I didn't even touch it 
03:31 < Eigen> and I don't have a node process running
03:31 < Eigen> and the port is open I'm using localhost:3001
03:31 < Eigen> anything else to check?
03:31 < ChrisPartridge> Eigen: what are you trying to do? code? 
03:34 < vks> Chris: can i configure statsd to take different  stats value from different application and flush different stats to different backend??
03:37 < ChrisPartridge> vks: you could use udp-proxy from gildean at the front, and push to different statsd instances, or write your own backend to flush to different places based on a prefix of the stat name or something similar
03:42 < vks> Chris: Any link for udp-proxy???
03:42 < ChrisPartridge> vks: https://github.com/gildean/node-udp-proxy
03:44 < vks> Chris: U said ,to run different statsd instance, which means I have to run seperate stasd process??
03:46 < ChrisPartridge> vks: correct
03:48 < vks> Chris: Ok same instance can't differentiate between the coming stat values from different application and can't flush these stats to different respective backends
03:49 < ChrisPartridge> vks: by default no, but you could write a backend that determines where to flush to based on the metric name
03:50 < vks> Chris: ok, thnx buddy
03:50 < hrmphh> whats the preferred way to use karma+jasine with node?
03:50 < ChrisPartridge> vks: np
03:50 < hrmphh> im using it for my front-end (angular)
03:51 < hrmphh> and would ideally like to leverage similar technologies for the backend testing
04:03 < progrock`> I'm working on a collaborite editor suing socket.io... does it make sense to send ever key press indeividually.. or should I throttle the socket to say every 1/10th of a second.. or somehting like that?
04:04 <@xyxne> please don't sue open source projects
04:05 < progrock`> yeah, I onlyplany to be using it...
04:05 < progrock`> and, yes, I know I cant type on this keyboard
04:06 <@xyxne> :)
04:11 < progrock`> so, does it make sense to throttle a socket thats accepting realtime typing?
04:12 <@xyxne> I think that would depend on the destination
04:12 <@xyxne> for typedowns it makes sense to collect new characters for a few MS before sending
04:12 < px> could set an interval and send typing on an interval
04:12 <@xyxne> for something like a term, it would be kinda annoying
04:14 < progrock`> its for a collaborative jsfiddle clone
04:15 < progrock`> yeah, I figure I should likely at least throttle it for a few ms
04:17 < progrock`> tho first I'm gonna work on a chat, to get a feel for socket.io.. seems pretty damn straight forward
04:17 < progrock`> tho I need to see how exactly I create different chat session
04:17 <@xyxne> sockjs + shoe is way more straightforward IMO
04:18 <@xyxne> no new stuff to learn, just regular streams
04:19 < progrock`> interesting
04:20 < Eigen> ChrisPartridge: I'm triyng to run my server
04:23 < Eigen> ...
04:30 < progrock`> xyxne: I hate to say it, but I don't really have any experience with streams, lol
04:31 < Kosch> moin
04:34 < Kosch> Do you know a solution as npm cache and registry for LAN? I noticed the option to create a mirror, but thats not the exact thing I need.
04:42 < vks> Chris: Is there any message format that we need to follow to send the stats from application to statsd??
04:57 < JosephFerano> hello people, I'm refactoring some stuff to use node-style requires, I have a function inside of a function, like this;
04:57 < JosephFerano> http://hastebin.com/wejixafoju.txt
04:58 < JosephFerano> but it's saying Uncaught TypeError: undefined is not a function 
05:03 < Havvy> JosephFerano: When you do var name = function () {}, the function is created when it hits that line. (It's a function expression, not a function declaration)
05:03 < Havvy> Only function declarations get hoisted.
05:03 < JosephFerano> Havvy: thanks! let me try it out
05:04 < Havvy> >> var f = function () { return true; }; f()
05:04 < purr> Havvy: (boolean) true
05:04 < progrock`> JosephFerano: so, to clarify, function name() ...  
05:04 < progrock`> or ove it up
05:04 < Havvy> >> f(); var f = function () { return true; };
05:04 < purr> Havvy: TypeError: Property 'f' of object #<Object> is not a function
05:04 < JosephFerano> perfect, it works now, thank you
05:05 < progrock`> man, my coworker tried to compare css languages like SASS, Stylus, and LESS o Coffee script.. with regards to learning curve
05:06 < progrock`> I'm sorry, but I can teahc you any of those CSS vairants in 30 minutes, and you'll be more productive than you will be with pure css.... I cant say that about coffee script
05:13 < vks> hi, how can i send some stats from my java application to statsd???
05:14 < vks> the idea is to send some value which can be used as statistics from java application???
05:14 < progrock`> umm, youre in a node, javascript channel ?????
05:16 < vks> any applicatiion??
05:18 < Havvy> vks: Neither statsd nor Java are in scope of Node.
05:19 < vks> oh so can't i pose the question on statsd??? i thought statsd is based on node
05:20 < vks> havvy: what do u say??
05:20 < Havvy> Oh, it is.
05:21 < vks> too many filters on open channel also................... surprised
05:21 < vks> ;)
05:22 < ChrisPartridge> vks: statsd is just udp dude
05:22 < ChrisPartridge> im pretty sure they even list a java client on the GH page
05:23 < vks> chris: i just wanted to know that does it expect any format??
05:24 < ChrisPartridge> vks: https://github.com/etsy/statsd/blob/master/docs/metric_types.md
05:50 < pomke_> Hello :) are there any nodeconf staff I could PM with a question?
05:55 < ningu> is the package.json object exposed in any way when you start an app?
05:55 < ningu> I assume not, but just thought I'd check
05:55 < ljharb> ningu: no, but you can use read-package-json to read it
05:55 < ningu> oh
05:55 < ningu> why not just require('./package.json')?
05:56 < px> no exports
05:56 < pomke_> ^
05:56 < ljharb> yup
05:56 < ningu> eh?
05:56 < ningu> how are there exports in a json file?
05:56 < ljharb> you can't require things that don't export
05:57 < ljharb> there aren't. thats the point.
05:57 < ningu> you can require a .json file
05:57 < pomke_> there are none, therefore require would return nothing
05:57 < ningu> you guys are confused I think :P
05:57 < ningu> .json != .js
05:57 < ljharb> lol perhaps
05:57 < px> oh that's true
05:57 < ljharb> but read-package-json also can validate it i believe
05:57 < ljharb> i also made https://npmjs.org/package/json-file-plus to read and write to/from json files while preserving indentation and trailing line ending
05:57 < px> require does return the json
05:58 < px> didn't know that
05:58 < SomeoneWeird> require returns a js object
05:58 < ningu> px: yeah, it's useful
05:58 < SomeoneWeird> which != json
05:58 < pomke_> wow cool
05:58 < ningu> sure, but it will read a json file and make that into a js object :)
05:58 < pomke_> ty :)
05:58 < ningu> pomke_: you didn't even have to go to nodeconf for that!
05:58 < ningu> I'm jealous that you are going
05:59 < s5fs> ningu: sorry you can't make it
05:59 < pomke_> ningu: I have to get there first x_x flying from AU
05:59 < ningu> s5fs: yeah, the timing is terrible for me unfortunately
05:59 < ningu> plus the cost, but mostly the timing
05:59 < pomke_> Kinda worried about driving from SF to Marshall.. on the wrong side of the road
05:59 < s5fs> seems like there are a ton of js confs going on though, hopefully you can land one closer
06:00 < ningu> yeah
06:00 < ljharb> i'm bummed i won't be able to make it to nodeconf
06:00 < ningu> pomke_: I think the cars going the other direction will tip you off pretty soon
06:00 < pomke_> The EU one looks -amazing-, secret island, with a castle and vikings
06:00 < pomke_> ningu: Oh I sure hope so :)
06:01 < s5fs> i know right?
06:21 < progrock`> can I throw a catch all redirect in node at the bottom, and it wont conflict with static content?
06:22 < progrock`> using express
06:24 <@konobi> progrock`: yes
06:26 < progrock`> '/*' i take it?
06:26 <@konobi> middleware
06:26 < progrock`> ?
06:26 < ningu> progrock`: yep, everything in the chain just keeps going if it doesn't respond to the request
06:27 < ningu> progrock`: after app.use(express.static) put app.use(function(req, res, next) { ... })
06:27 < ningu> or name the function
06:27 < ningu> you said you want it to be after static, and presumably static is after app.router which runs your routes
06:27 < progrock`> Hmmm, I suppose ideally I would like it so all endpoints would allow anythign after a valid enpoint and it would jsut go the the valid enpoint
06:27 < ningu> so it can't be app.get('/*') or whatever
06:28 < ningu> oh
06:28 < progrock`> basically so I can use history api on the front end
06:28 < ningu> hmm
06:28 < ningu> well it's easy to inspect the url (req.url, req.originalUrl) and decide what redirect to send
06:28 < ningu> you may be able to introspect app.router for what's a valid route
06:29 < progrock`> I would think it should be pretty easy.. even if I have to keep a VERY specific ordering on the redirects
06:29 < ningu> you could progresively chop off slashes I suppose
06:29 < ningu> ordering?
06:29 < ningu> isn't there just one redirect involved?
06:29 < ningu> I mean, in any given case
06:29 < progrock`> yes... but I mean... for example:
06:30 < progrock`> /doc/:id/preview
06:30 < progrock`> /doc/:id
06:30 < progrock`>  /doc
06:30 < ningu> that's what I meant by progressively cut off things between slashes
06:30 < ningu> do a while (txt) { if (txt.match) { /*redirect*/ } else { /*cut off a "directory" */ }
06:30 < ningu> }
06:31 < progrock`> are you saying... see if any routes work.. if not, cut off last slash and anythign after it.. repeat ?
06:31 < ningu> yep and if it gets to the end just redirect to '/'
06:31 < ningu> the question though is how to figure out of it matches
06:31 < progrock`> yea...
06:31 < ningu> I'm looking at the router code now
06:32 < progrock`> btw, whats the difference between:  '/user/:id?'  and '/user/id' ?
06:32 < ljharb_> :id is a parameter
06:32 < progrock`> does the questionmark mean that nothing or something is acceptable?
06:32 < ljharb_> id is a hardcoded string
06:32 < progrock`> ahh
06:32 < progrock`> I mean '/user/:id'
06:32 < progrock`> lol
06:32 < ljharb_> the question mark makes it optional
06:32 < progrock`> ok, thats what I htought
06:33 < ljharb_> my advice tho is to not push all your routes to the client.
06:33 < ljharb_> your server should know about all of them.
06:34 < progrock`> ljharb_: I suppose that could be dangerious.... maybe I can make a specific identifier, even as simple as '/a/' to split whats relevant to the backend and whats to the frontend
06:34 < ljharb_> it's all relevant to the backend.
06:34 < ljharb_> every single route.
06:34 < progrock`> well I'm saying I plan to use the history api on the front end.. so everything after a certain point only matter to the front end
06:35 < ljharb_> you still need to let the backend handle that
06:35 < ljharb_> the history API is not a replacement for backend routing
06:35 < ljharb_> it is meant to allow you to avoid a full page refresh. but if i refresh the page, it should still be handled by the backend.
06:35 < progrock`> well the backend will do nothing different whether the extra styuff for the front end is there or not
06:35 < progrock`> so, in fact, in use, it would not be relevant to the back end
06:36 < ljharb_> if i turn off JS, and your site is broken, it's broken. :-)
06:36 < progrock`> if you turn off js, my site has no use for you whatsoever
06:36 < ljharb_> then you're breaking the web
06:36 < progrock`> this isnt a marketing website that needs to work for everything
06:36 < ljharb_> has nothing to do with that. every app should work without js if it can.
06:37 < progrock`> this cant, so theres no point it programming as if it can
06:37 < ljharb_> what's the site?
06:37 < ningu> progrock`: so, it turns out you can do app._router.match(method, url)
06:37 < ningu> progrock`: I don't know if there is a documented way
06:37 < progrock`> ljharb_: its a jsfidle clone
06:37 < ljharb_> setting aside the fact that there's like 12 of those already, what about an API?
06:38 < progrock`> i couldnt care less if there was 50.. i dont give a shit about getting users
06:38 < ljharb_> editing, viewing, deleting, etc, none of that requires JS. only the "run" button
06:38 < progrock`> I am not in any waqy catering to people with no JS on, I simply dont care
06:39 < progrock`> again, if it wsa a marketing website, of course I would care... this is nothing of the sort
06:39 < ningu> progrock`: hmm I think there may be another way
06:39 < progrock`> hell, I'm purposely not catering to any legacy browser
06:39 < progrock`> ningu: ??
06:40 < progrock`> ningu: I was gonna see if I could just do a split on say '/a/' and only ave the router care about the first half
06:40 < ningu> progrock`: var routes = app.routes[method]; if (routes.some(function (route) { return route.match(path) })) { ... }
06:41 < ningu> where method is the http method
06:41 < ljharb_> progrock`: then why have any backend routes?
06:41 < ningu> in lowercase, I assume
06:41 < ningu> yes, in lowercase
06:41 < progrock`> ljharb_: 2 am, no need to troll, i really dont care
06:42 < ningu> progrock`: that just iterates through all of the get/post/whatever routes you've registered and returns true if one of them matches 'path'
06:42 < ljharb_> i'm not trolling. it's a real question.
06:42 < ningu> ljharb_: what's wrong if he wants to make a site with no users for his own education?
06:42 < ningu> or for whatever reason
06:42 < ljharb_> i didn't say there's something wrong with it (altho it is, cause it's educating the wrong thing). i just asked about what he's doing
06:43 < ljharb_> just cause someone wants to run headfirst into a wall doesn't mean it's good for them :-p
06:43 < progrock`> ningu: I dont think he understadn that some things cant be done on the front end... and some things I dont care about doing on the backend, whether or not they are possible.. would make the code absurdly ugly
06:43 < ljharb_> i think that's your own limits. it's easily done.
06:43 < ningu> ljharb_: why assume that serving as many users as possible is the point of any web development?
06:43 < ljharb_> i made no comment about number of users, only he did.
06:44 < progrock`> ningu: hes clearly trolling.. or a fucking idiot.. either way, not worth the time
06:44 < ljharb_> i don't care if it's 1 user or 1 billion. either he's doing it the best way or not
06:44 < ningu> actually I think it's a real misunderstanding, but whatever
06:44 < ningu> progrock`: did you understand my bit of code?
06:44 < progrock`> ningu: yup
06:44 < ningu> progrock`: given the small number of routes (presumably) it should run pretty fast
06:44 < ljharb_> it's not a misunderstanding. i believe that every site should work without js, as much as is possible.
06:45 < progrock`> and that belief is absurdly close minded
06:45 < ningu> ljharb_: right, but if for example, only i'm using the site and I know I'll have a browser that supports js, why should I waste my time?
06:46 < ljharb_> ningu: that's a good question, and that might be a reason to ignore the approach - however, i think it's not a waste, because it will lead to cleaner design, that's easier to test and maintain.
06:46 < ljharb_> and even if you're the only one using it and writing it, "you in 6 months" is probably going to think you're a dick :-p
06:46 < ningu> well, it will end up with a design that is more capable
06:46 <@xyxne> progrock`, referring to people as a 'fucking idiot' isn't an acceptable practice for #node.js 
06:46 < ningu> not sure why that would have to be cleaner, necessarily
06:47 < ningu> sometimes you can do more with a cleaner design, sometimes if you want to do more you have to sacrifice a clean design
06:47 < ningu> or make it more abstracted, which if it's only for the purpose of shoehorning a feature in, isn't exactly clean
06:48 < progrock`> xyxne: hes blatently trolling
06:48 < progrock`> xyxne: so I really wanst
06:48 < ljharb_> progrock`: i'm not trolling, as i've told you multiple times. i've espoused this belief in this and other rooms thousands of times.
06:48 <@xyxne> blatantly*
06:48 <@xyxne> if you're going to make weak attempts to justify your rudeness
06:48 <@xyxne> at least spell properly.
06:48 < ljharb_> wasn't*
06:49 < progrock`> xyxne: I never said I wasnt an idiot, nor I coudl type, but no matter how many times a troll claims not to be trolling, they are, and they know it
06:49 <@xyxne> that's great, but philosophical debates aside, it's still not OK for you to call him a 'fucking idiot'
06:49 <@xyxne> (or anyone else in the channel, just so we're clear)
06:50 < progrock`> xyxne: I again, I called him a troll the OR would imply I he was only one, and clearly I think he's a troll
06:50 <@xyxne> as a matter of fact, calling anyone an idiot (or other similar derogatory terms) is out of scope
06:50 < ljharb_> luckily thinking someone's a thing doesn't make them so.
06:50 < ningu> xyxne: wait, is #node.js a closure?
06:50 <@xyxne> progrock`, you seem to be having a hard time understanding what I'm saying to you
06:50 < ChrisPartridge> come on guys, lets all be friends
06:51 <@xyxne> progrock`, I have no concern for what you think of him
06:51 <@xyxne> I'm simply asking you to recognize (and adhere to) protocol
06:51 <@xyxne> which includes not being an asshole
06:52 <@xyxne> basically what ChrisPartridge just said
06:52 < progrock`> wow, really neevr saw a place defen an apaprent troll so much.  and I by no means called him an idiot, but read it how you like, I'll make sure not to say idiot in here, even when clearly stating it was the opposite
06:52 -!- progrock` was kicked from #Node.js by xyxne [progrock`]
06:53 <@xyxne> apparent troll is apparent
06:53 < ningu> nah he's just being stubborn
06:54 <@konobi> derp
06:54 < ljharb_> he must not have liked that i was questioning his method
06:54 < ljharb_> s
06:54 <@xyxne> it's all good, let's just try to get along
06:54 <@konobi> ljharb_: shush troll
06:54 <@xyxne> and move on :)
06:54 <@konobi> =0P
06:54 < ningu> will there be trolls as well as vikings at nodeconf eu?
06:54 <@xyxne> I hope so
06:54 < ChrisPartridge> trolkings
06:54 < ljharb_> fee fie foe fum
06:57 <@xyxne> so have you heard about the website; nodebotsday.com ?
06:58 < ningu> awesome
06:58 < ssafejava> xyxne: Looks cool, but that readme does very little to explain what it is (to those outside the bay), only what it is not
06:58 < progrock`> anyway, ningu, thats for the help.  xyxne, pure fuckign stupidity siding with a troll
06:58 < ningu> ssafejava: I don't think it's meant to be more than what it says
06:58 < ningu> but ask xyxne 
06:59 < ningu> it sounds to me like people will bring cool stuff and hopefully make something cool
06:59 < ssafejava> ningu: Ah you're right, sorry. it's a bit difficult to read (maybe I'm just getting tired) since the action description is in the last paragraph
06:59 < ssafejava> actual*
07:00 < ssafejava> ghost message?
07:00 <@konobi> someone didn't read http://blog.izs.me/page/30
07:00 < ningu> well that one I can actually make
07:03 < DevDoo> Herro fellow Nodeizens.
07:03 < ningu> residents of nodistan?
07:05 < DevDoo> Nodistanians.
07:05 < DevDoo> Nodistanis.
07:05 < DevDoo> Yeah.
07:05 < DevDoo> Got a nice Middle Eastern feel to it.
07:06 < emilsedgh> on node 10.0.9, trying to work with phantomjs using node-phantom, i get this: "node: ../deps/uv/src/unix/stream.c:494: uv__server_io: Assertion `events == 1' failed."
07:06 < SomeoneWeird> emilsedgh, update node
07:07 < ningu> isn't that the latest version?
07:07 < emilsedgh> SomeoneWeird: thats the latest version.
07:07 <@konobi> or just use chimera
07:07 < SomeoneWeird> there's a few assertion bugs that have been fixed since, i'm pretty sure
07:07 < emilsedgh> its node that crashes, not phantom.
07:08 < emilsedgh> SomeoneWeird: since when?
07:08 < SomeoneWeird> since 0.10.9 was released
07:08 < emilsedgh> ah, hm. any idea when a new version comes?
07:08 < emilsedgh> node seems to have really frequent releases (awesome)
07:08 <@konobi> emilsedgh: chimera is worth a look
07:08 < emilsedgh> does that happen on schedule?
07:09 < ChrisPartridge> I can confirm chimera == phatomjs without having to talk to phantom over some random protocol
07:10 < emilsedgh> konobi: will look now
07:18 < myndzi> wtfwtf >:(
07:18 < samholmes> What's the cheapest mass-email service around, besides send grid?
07:18 <@konobi> oh... i heard about one the other day
07:18 < myndzi> this object is somehow undefined but passes Q.isPromise
07:18 < myndzi> and it has no .then
07:18 < boffbowsh> samholmes: could give dynect a go
07:19 < boffbowsh> http://dyn.com/email/
07:19 <@konobi> samholmes: intercomm.io
07:20 < ChrisPartridge> -m
07:21 <@konobi> um... yes
07:22 < ningu> myndzi: sounds like... a broken promise... ba dum tsh
07:22 <@xyxne> NO AND .THEN()
07:22 < myndzi> haha
07:23 < myndzi> apparently toString stops it from returning undefined
07:23 < myndzi> but s till shit be crazy later
07:23 < SomeoneWeird> ningu, lul
07:23 < myndzi> i proxied the getter and setter, SOMETHING is setting it to undefined but i can't find what
07:23 < ChrisPartridge> xyxne: http://tinyurl.com/mogsnno
07:28 <@konobi> so, if I was to make a single page app, most of which was just a step-by-step wizard... what npm modules would people suggest?
07:28 < AAA_awright> (1) Does it have to be a single-page app? and (2) Does it have to be npm?
07:29 <@konobi> yes and yes
07:29 < ChrisPartridge> konobi: browserify + what ever you need to get the job done?
07:29 < ningu> konobi: you mean modules meant to be browserified and used client side?
07:29 < AAA_awright> I don't think I've seen any case where it actually needs to be "single page"
07:30 < AAA_awright> What are you trying to do?
07:30 <@konobi> tbh, i don't care too much on the front end side... i seem to have a jquery plugin that'll work for my purposes
07:30 <@konobi> AAA_awright: installer app
07:31 < ningu> konobi: how come you want everything from npm? just to reduce outside dependencies?
07:31 < ningu> there's also bower, component, etc.
07:31 <@xyxne> konobi, I think substack made something called yarnify that might help?
07:32 <@konobi> ningu: limited system
07:33 <@konobi> since it's an installer, the available environment has node/npm... so need to bundle it up that way
07:39 <@konobi> AAA_awright: there's a certain amount of real-time aspect to it so, single page is probably easier overall
07:40 < AAA_awright> Doo mind that not everyone has npm installed
07:40 <@konobi> this is an installer for a known system
07:42 <@konobi> though it'll all get shrinkwrapped anyway i suppose
07:42 < AAA_awright> What part of this needs an installer at all, then? You should be able to load settings from a configuration file, or similar, or maybe a single form element that writes it if you really want the HTML frontend, what are you anticipating is going to be complex?
07:42 <@konobi> AAA_awright: needs to be interactive based on what's on the system
07:43 < AAA_awright> It can't auto-detect that? Do you have examples?
07:43 <@konobi> AAA_awright: systems engineering sytle
07:43 <@konobi> =0P
07:45 <@konobi> AAA_awright: i know what's required... i'm just looking for suggestions
07:46 < AAA_awright> I'm still trying to figure out "for what?"
07:46 < AAA_awright> It seems like you have it all figured out
07:46 <@konobi> currently that's private... it will be open source at some point
07:46 <@konobi> AAA_awright: all i'll say is that it's smartos related
07:48 <@xyxne> OMG
07:48 <@konobi> ?
07:48 <@konobi> AAA_awright: i suppose the question is wether to go rest/ws/dnode/angular/etc
07:49 <@konobi> xyxne: why surprised?
07:50 <@xyxne> not
07:50 <@xyxne> just I know what you're doing 
07:50 < AAA_awright> konobi: The answer is really always the same, give each resource a URI and operate on it with HTTP, add stateful pushes back to the user agent with websockets or a similar technology you're comfortable with
07:50 < ningu> konobi: I like angular
07:50 <@konobi> i've heard mixed reviews
07:51 < ningu> well, you need to be careful with client-side rendering, it can be slow
07:51 < ningu> but you don't have to do that with angular
07:51 < ningu> or only in a limited way if you want
07:53 <@konobi> then other than angular there's a couple of similar tools
07:54 < ningu> knockout?
08:01 < ak5> hi, guys! quick question, so in express, my controller is calling my model, gets the return value of the method it calls and feeds it to the view? How do I write that in async?
08:01 < ningu> ak5: you continue whatever you want to do in a callback
08:01 < ningu> ak5: what async method are you using?
08:01 < ak5> ningu: see, I am not sure about this. Write now, I am using nothing.
08:02 < ak5> which is why its not working presumably
08:02 < ak5> so I have a method that returns an object. How do I tell the controller to call that method, wait for the object and then render the view once the object is there?
08:02 < ningu> ak5: if it returns an object, it's a sync method
08:03 < ningu> if it's actually an async method, you need to use a callback
08:03 < ak5> Ok, I am obviously confused
08:03 < ningu> so, asyncMethod(arg1, arg2, function (err, result) { ... })
08:03 < dolphin278> ak5, you get your response from model, then pass it to res.render('templateName', { your data goes here }).
08:03 < ningu> you "return" the value by calling the callback with the value
08:04 < ningu> the first callback param is always the error (if any)
08:04 < ningu> ak5: post your code at gist.github.com if you want us to take a look
08:04 < ak5> sure thanks guys
08:04 < ningu> ak5: is the model method retrieving something from a database?
08:04 < ak5> ningu: yes
08:05 < ningu> ok, so you need to make your model method take a cb (callback) argument as its final argument
08:05 < ak5> ok
08:06 < ningu> and then from your controller, you do modelMethod(foo, bar, function(err, result) { if (err) /* do something */; res.render('template', { stuff }) });
08:06 < ak5> I see
08:06 < ningu> i.e. you call res.render only when the callback is called
08:06 < dolphin278> yep
08:06 < ningu> one way to handle errors is something like, if (err) return next(err);
08:06 <@konobi> IOC
08:07 < ningu> that will trigger your express error handler
08:07 < ningu> but just get it working without the error handling first :)
08:08 < ak5> so how do I define the cb function?
08:08 < ningu> ak5: I just showed you how
08:08 < ningu> function(err, result) { ... }
08:08 < ningu> that's a function
08:08 < ak5> I see
08:08 < ak5> sorry, this is the missing link it seems. I have used callback functions all the time
08:09 < ak5> but never made one, I guess
08:09 < ningu> ak5: again, this will be much easier if you just post your code at gist.github.com
08:09 < ningu> your model function
08:10 < ak5> its really ridicoulously short, sec
08:10 < ningu> ak5: don't paste it here
08:11 < ak5> https://gist.github.com/alexanderververis/b2d84fda4b2231f09afd
08:11 < chrisbuchholz> Isnt it bad practice to distribute your node_modules folder around with you via your version control system and to deploy with it? Right now i don't, i simply rebuild it from my package.json when i deploy, but fluent-ffmpeg which is use says to put presets into node_modules/fluent-ffmpeg/lib/presets/, which would require me to distribute that around. Is there a way to get around this is a nice, clean way?
08:11 < ak5> so I just added the cb as a param
08:12 < ningu> ak5: yep so change it to, Tag.find(cb)
08:12 < chrisbuchholz> which i use*
08:13 < ningu> chrisbuchholz: people differ on that, see http://www.futurealoof.com/posts/nodemodules-in-git.html
08:13 < ak5> ningu: huh? sorry please hold my hand, I really don't get it
08:13 < chrisbuchholz> ningu: thanks
08:13 < deoxxa> chrisbuchholz: it's a bad idea if a) you have any binary modules and b) all of your systems don't have identical cpu architectures, library versions, etc
08:14 < ningu> ak5: Tag.find returns its results via a callback. you already have one in your code, but it isn't doing anything
08:14 < chrisbuchholz> deoxxa: right okay, so just those precautions would make me think its a bad idea in general
08:14 < ningu> ak5: what you want is for the callback the controller sends as a parameter to be called
08:14 < ChrisPartridge> chrisbuchholz: also take a look at npm shrinkwrap
08:14 < ningu> ak5: so, Tag.find(cb) means use the cb passed to the model function listAll
08:14 < deoxxa> chrisbuchholz: think of it like copying out /usr from one box to another. it'll work if the systems have the same versions and stuff, but yeah, it's a bit :x
08:15 < chrisbuchholz> ChrisPartridge: thanks
08:15 < chrisbuchholz> deoxxa: exactly
08:15 < ak5> so I do tag.find(cb){return results}
08:15 < ningu> ak5: no, you do Tag.find(cb);
08:15 < ljharb_> typically i think i'd expect node_modules to be checked in on an app, but not in a reusable module
08:15 < ningu> that's the whole function body
08:15 < ningu> ak5: you return for a sync method. you use callbacks for async.
08:16 < ningu> ak5: then in your controller, listAll(function(err, tags) { ... })
08:16 < ningu> ljharb_: deoxxa: mikeal recommends checking in all pure-js and *.c but not *.o into git
08:16 < ningu> not sure I agree. but it has a logic to it.
08:17 < ljharb_> yeah, i don't really agree, but i see the logic
08:17 < ningu> ak5: Tag.find(cb); just means basically, you're passing back up to the controller and doing nothing with the Tag.find results yourself
08:17 < ljharb_> i think that makes sense for an app. just not for a reusable npm module.
08:18 < ningu> ak5: you *could* do Tag.find(function(err, tags) { cb(err, tags) }); but that would do exactly the same thing
08:18 < ak5> ningu: I see
08:18 < ChrisPartridge> ningu: heh, i think we've all done that at some point
08:18 < ningu> ChrisPartridge: :)
08:18 < chrisbuchholz> ningu: he touches on some good points though
08:18 < ningu> ChrisPartridge: but of course, that pattern is necesary if you want to alter the results in any way
08:19 < ningu> chrisbuchholz: of course, that's why I linked to it :)
08:19 < chrisbuchholz> ningu: :P
08:19 < ningu> ljharb_: oh, right, I think he explicitly means it for apps
08:19 < ningu> deployable things
08:19 < ak5> ningu: I still don't understand this :(
08:20 < ljharb_> right
08:20 < ningu> even with semver you can get unexpectedly different combos of versions
08:20 < ningu> so if you want the most control you need to check it all in
08:21 < ningu> ak5: Tag.find() effectively returns immediately. at some point wayyyyyy in the future (in computing terms) the db results come in, and the callback is triggered.
08:21 < ningu> that's what async means in node: return right away; send results in via callback when they're ready.
08:22 < ningu> so if you're using async methods in node, whatever you want to happen next *must* happen in callbacks
08:23 < ningu> and return foo; from a callback doesn't return foo to anywhere, since there is nowhere to return to at that point -- the original function has long since returned
08:23 < ningu> ak5: did you try changing it to exports.listAll = function(cb) { Tag.find(cb) }; ?
08:24 < ak5> ningu: yes
08:24 < ningu> ak5: ok, and then from the controller try doing listAll(function(err, tags) { console.log(tags) });
08:24 < ningu> and do whatever triggers the route
08:25 < ningu> it should show your tag results
08:25 < ningu> on teh console I mean
08:25 < ak5> mhm
08:25 < ningu> so at the time the callback is called, the results are ready
08:26 < ningu> that's when you can res.render() -- inside the callback
08:27 < ningu> http://nodejsreactions.tumblr.com/post/51676989355/trying-async-programming-for-the-first-time
08:27 < ak5> ningu: thanks
08:27 < ak5> I got it to work
08:27 < ak5> well, you did
08:27 < ak5> now I'm going to play with it
08:27 < ningu> it will make sense eventually
08:28 < ningu> just remember callbacks = in the future
08:28 < ak5> cat gif = accurate
08:28 < ningu> hehe
08:31 < Hans__> How do I close a readstream if no EOF is provided? Neither readStream.close() nor readStream.push(null) terminates the program.
08:32 < deoxxa> Hans__: .destroy() might do it
08:32 < ningu> Hans__: sounds like something is broken with the stream
08:32 < ningu> deoxxa: is destroy() available on all streams? it isn't documented
08:33 < deoxxa> it used to be documented...
08:33 < deoxxa> i guess that's old stream stuff
08:33 < ningu> yeah
08:33 < ningu> maybe it's deprecated
08:33  * deoxxa out of ideas
08:34 < Hans__> thanks, but it didn't seam to work...
08:34 < Trangar> Thanks ningu, I just spend like 15 minutes on tumblr now while I had to do stuff!
08:34 < Hans__> I'm pretty much out of ideas as well
08:34 < ningu> Trangar: haha
08:35 < Trangar> hans__ http://nodejs.org/api/process.html#process_process_exit_code ?
08:35 < wathek> Hi everybody
08:35 < Trangar> ningu, async programming: http://www.youtube.com/watch?v=QXtOdSgf6Ic
08:35 < standoo> hello
08:36 < Hans__> Trangar: thanks, that was plan B ;)
08:36 < px> I'm writing a little script to check my dependency versions vs npmjs.org on server startup - will npmjs get annoyed I am pulling the version info?
08:37 < deoxxa> px: it'd almost definitely be fine
08:37 < deoxxa> px: unless you're expecting to do hundreds of requests per second or something
08:38 < wathek> I need some help I have a function that's using async lib and I'm calling that function in a loop. How can I do to know when all the calls finished ? here's my code : http://pastebin.com/fQkBs5Dq
08:38 <@konobi> px: why?
08:38 < wathek> check function contains the async lib use 
08:38 <@konobi> i mean, if your current dependencies work, why look for something new that may not?
08:38 < wathek> so how can I know when all the check calls finished ?
08:38 < px> just as a warning to myself
08:38 < px> so I know some dependency is out of date
08:39 <@konobi> px: seen npm shrinkwrap?
08:39 <@konobi> wathek: depends on the the function, but mainly you get a callback you can use at the end of the chain
08:39 < ningu> wathek: that function has way too many arguments... but anyway, use async.each on d.articles
08:40 < RLa> px, what about building a service out of it?
08:40 < px> yes but I want to be changing my dependencies in case they fix some bug
08:40 < dolphin278> @wathek try to use https://github.com/caolan/async
08:40 < px> I know there is a service for ruby like this
08:40 < px> but I don't know how to get version change info programatically
08:40 < px> like changelog type things
08:40 < wathek> ningu, gonna try that 
08:40 < wathek> thank you guys
08:40 < ningu> px: well, you can pull out the github repo
08:40 < RLa> watch for npm updates?
08:41 < ningu> and then use github's api
08:41 < px> hmm that's true I could look at commit messages, but is there a way to know which commits match to which version?
08:41 < ningu> px: tag branch?
08:41 < px> i guess before they bumped version
08:41 < px> i don't know if people do that in a standard way
08:41 < ningu> yeah, dunno
08:41 < RLa> or simply polling it: https://npmjs.org/browse/updated
08:41 < px> npm should include some version info imo
08:42 < px> i always have to dig around for the changelog
08:42 <@konobi> px: a "bug" is only relatable in context. if you don't use a function, should you care?
08:43 < RLa> i use apticron for debian packages and it works very well
08:43 <@konobi> px: actually, a tool that let you subscribe to updates/changelogs, would be nice
08:43 < RLa> sometimes you only need one critical bug to take down whole system
08:43 < px> maybe I want to use a function that's in the readme, but my dependency is old so the lib doesn't have that function yet and they didn't bother to make a note of it
08:43 < px> but yeah my script wont' auto-update it will just let me know
08:44 <@konobi> px: at that point you'd upgrade
08:44 < RLa> and do not forget that not all bugs are equal, typo in docs does not do much harm
08:44  * TypoAway eats the docs
08:44 < TypoAway> darn away nick!
08:45 < radiodario> hmm my node.js dev environment keeps on dying with Abort Trap: 9
08:45 < radiodario> but it is still running (wtf)
08:46 < jetienne> hi
08:46 < RLa> px, so will you make it into a service? :)
08:46  * radiodario kills it with -9
08:46 < px> sure please subscribe to my mailing lsit
08:47 <@konobi> RLa: out of memory?
08:52 < Kosch> hi. I've got various race conditions during npm install. e.g. ENOENT, chmod on non existend directory or ENOTEMPTY, rmdir on an non-empty directory which is empty, when I check it. The problems appears always on different modules during local install. Any ideas to that? 
08:53 <@konobi> ownerships?
08:54 < Kosch> konobi: its the current user. 
08:54 < Kosch> npm 1.2.10 is used btw...
08:55 < Kosch> I case if nfs directories I'd expect these errors when NFS creates some tmp .nfs files inside... but this is local filesystem.
08:56 < wathek> any one did use each from async lib ? I've just written this http://pastebin.com/zHRsXTea but it tells me that item is undefined
08:57 < wathek> how can I access the selected item by each ?
08:57 < nathan7> Kosch: we fixed a lot of those
08:57 < nathan7> Kosch: upgrade your npm
08:58 < dolphin278> @wather second argument to .each takes one object from d.articles array
08:58 < dolphin278> and callback
08:58 < wathek> dolphin278, so it's not the function I'd like to call ?
08:58 < wathek> dolphin278, because in the doc https://github.com/caolan/async#each
08:59 < Kosch> nathan7: hm. its possible to update npm independend from node?
08:59 < wathek> dolphin278, the second argument is a function to apply to each item
08:59 <@konobi> Kosch: npm is installable via npm
09:00 < dolphin278> wathek, your check function should be in a form: check(item, callback)
09:00 < wathek> ok 
09:00 < wathek> I see
09:00 < wathek> dolphin278, gonna try that thank you man
09:00 < dolphin278> wathek, and you get item fields inside of your check function
09:00 < wathek> dolphin278, I see
09:01 < Havvy> konobi: npm install npm works?
09:03 < px> ok I made my logging thing to log discrepancies in package.json vs latest npmjs version - http://pastebin.com/Ly4D6XNS
09:07 < Kosch> nathan7: konobi: npm update solved the problem. thx.
09:13 < jmav> join #css
09:14 <@konobi> Havvy: it's just another npm module
09:15 < Havvy> Dogfooding at its best I guess.
09:16 < ak5> is there a cool way to have express send json or html depending on the headers of the request or something?
09:18 <@konobi> ak5: yes
09:18 <@konobi> this is not node specific, but there's an http header for it
09:18 < ak5> konobi: oh, cool, I'll check that
09:19 < Havvy> http://www.gethifi.com/blog/browser-rest-http-accept-headers
09:24 < ak5> konobi: so I do a if(req.accepts('json'){}else{} kinda thing ?
09:25 <@konobi> ak5: tbh, i don't know the specifics... just the spec
09:29 < AAA_awright> ak5: It's necessarially complex, look up Content-Type negotiation
09:29 < dolphin278> ak5, see https://github.com/visionmedia/express/tree/master/examples/content-negotiation
09:29 <@konobi> ak5: especially since there's an ordering
09:30 < AAA_awright> And check out https://github.com/Acubed/contenttype
09:30 < dolphin278> ak5, and http://expressjs.com/api.html for res.format method
09:30 < ak5> ok, ty
09:30 < ak5> I think req.accepts() is what I wanted though
09:31 < AAA_awright> I don't think I'm familiar with that function
09:31 <@konobi> something can accept something, but sometimes you want something in preference to something else
09:31 < ak5> konobi: since I have full control of my mobile app, I'll just tell it only to accept json
09:31 < dolphin278> res.format() uses req.accepted
09:32 <@konobi> ak5: regardless, always best to use the correct thing.
09:32 < ak5> dolphin278: oh this is cool
09:32 < ak5> konobi: true, true
09:49 < hlysig> Morning
09:50 <@konobi> jesusabdullah: ruh-roh
09:51 < olalonde> weird
09:51 < olalonde> my closure loses a reference to a module
09:51 < olalonde> is that normal?
09:51 <@konobi> anyone else been playing with the harp platform stuff?
09:52 < ChrisPartridge> olalonde: doesn't sound normal, code?
09:52 <@konobi> also, anyone know if AlexSexton is on IRC?
09:53 < olalonde> there's something i must be missing
09:53 < k_89> olalonde, code
09:53 < k_89> show code, i mean
09:53 < olalonde> here's how it looks https://gist.github.com/olalonde/98094dd6e3fdcd357e83
09:53 < olalonde> i deleted most of the code, only kept the interesting bit
09:54 < olalonde> debug is undefined if i use the function it returns somewhere else
09:55 < k_89> olalonde, before getting into that dispatcher, try console.log(debug);
09:55 < olalonde> yes that works
09:55 <@konobi> olalonde: you need more context
09:56 <@konobi> as there could be inbetween stuff that happens
09:56 < k_89> olalonde, require('debug')('blablabla') is a function
09:56 < olalonde> well I just replaced debug by function () {console.log('test');} and that works
09:56 <@MI6> joyent/node: Nick Desaulniers master * 72b92e9 : src: wrap macros in `do {...} while (0)` - http://git.io/i9oCWQ
09:56 < olalonde> yes it's visionmedia/debug module
09:56 < k_89> olalonde, but you are calling debug over there
09:57 < k_89> so var debug is undefined
09:57 < olalonde> isnt it supposed to be part of the closure?
09:58 < k_89> olalonde, you said replaced debug by "function { console.log('test'); }"
09:58 < ChrisPartridge> k_89: i believe he replaced it inside the closure, and then called the closure and it work
09:58 < olalonde> yes, just for testing and that works
09:58 <@konobi> olalonde: depends... which "debug" is in scope at that time?
09:58 < olalonde> so I guess it's somewhat related to debug's implementation
09:59 <@konobi> which is why i mentioned context
09:59 < k_89> no
09:59 < k_89> olalonde, can you paste what you get when you do this: https://gist.github.com/kapv89/0a941fbbd4dabe8251dd
10:00 < k_89> (added a console.log) .. because if what code you have shown is all you have, then stuff should work
10:01 < k_89> and actually , do a console.log(debug) in that handler
10:01 < olalonde> { [Function: plain] enabled: true }
10:01 <@konobi> or hell, try calling the variable "logger" rather than debug
10:01 < olalonde> yep, both return that
10:01 < wathek> is all I can get in the callback of each function from async is err ? 
10:01 < olalonde> it just becomes undefined in my return function
10:01 <@konobi> wathek: depends on the function... read the docs
10:02 < wathek> konobi, what's said here https://github.com/caolan/async#each
10:02 < wathek> callback(err) - A callback which is called after all the iterator functions have finished, or an error has occurred.
10:03 < olalonde> ahhh nevermind
10:03 < olalonde> actually, debug is not undefined.. it just prints out undefined
10:03 < olalonde> haha
10:04 < wathek> konobi, I tried adding a second param to the callback like in here : http://pastebin.com/8tFH44r3
10:04 < wathek> konobi, but I'm not getting any thing in data
10:06 <@konobi> wathek: you're using the wrong function then
10:06 < ChrisPartridge> wathek: each doesn't return data
10:06 < wathek> hmm
10:06 < ChrisPartridge> wathek: perhaps look at map
10:06 < olalonde> ah i think i know my problem oh oh
10:07 < olalonde> there was an array in my options which was getting modified somewhere else later
10:07 < olalonde> classic
10:08 < ChrisPartridge> olalonde: nice one :P
10:08 < wathek> ChrisPartridge, let me look at it 
10:09 < ChrisPartridge> wathek: same as each, just you need to call a callback in the iterator function, then your results will be available as the second argument in the map callback
10:11 < ChrisPartridge> wathek: and as per the docs, the results may not be in order, if thats a requirement, use mapSeries
10:12 < dolphin278> wathek, what result you wanna get? you may be looking for something like async.map to get processed results from your cycle
10:13 < dolphin278> wathek, .each() is not meant to get any results of processing — just errors
10:16 < wathek> ChrisPartridge, dolphin278, let me just take a look at map and see
10:17 < wathek> ChrisPartridge, dolphin278 thank you guys you helped me a lot
10:22 <@MI6> joyent/libuv: Ben Noordhuis master * c766dfe : src: make queue.h c++ compatible - http://git.io/k5Wi0w
10:24 <@MI6> joyent/node: Ben Noordhuis master * a7820a1 : src: replace ngx-queue.h with queue.h - http://git.io/cp1WAw
10:26 <@MI6> joyent/libuv: Ben Noordhuis master * 5b1422b : unix: s/ngx-queue.h/queue.h/ in checksparse.sh - http://git.io/FMGWSw
10:28 < dolphin278_> Is there any good talks/papers on how to build application that heavily uses gossip protocols, like scuttlebutt?
10:29 < ChrisPartridge> dolphin278: have you seen https://github.com/dominictarr/scuttlebutt
10:30 < dolphin278_> Yes that was point where I started
10:32 < dolphin278_> The whole eventual consistency thing requires a bit o mind-bending, especially when you try to have some control on what's going on in your app besides uncontrolled change propagation :)
10:35 < banzounet> Hey, I'm using fetchURL to scrapt the content of a few pages but it looks like the task are in a queu and each fetch is waiting for another to finish to start is it possible to have something like a threadpool in node? to run multiple fetch at a time?
10:40 < ChrisPartridge> banzounet: thats kind of what node does.. perhaps show us your code
10:40 < ChrisPartridge> gist/pastebin
10:45 < chrisbuchholz> Somebody on here that has experience with fluent-ffmpeg? I have an ffmpeg command that transcodes to webm, but I cannot get it wringled down into the format that fluent-ffmpeg wants to use. Using the addOption() method doesnt work either
10:47 < banzounet> ChrisPartridge: I'm using this https://github.com/BaNzounet/node-readability I've a simple for(...) {readability.read(html [, options], callback)} } so all the function are called at the same time but the reponse seems to come one after one
10:47 < banzounet> like there were in queu
10:50 < Kosch> What is the best way to start mojito app with forever? ATM I use a .js script which exec("mojito start...") and this script I use with forever.
10:52 < ChrisPartridge> banzounet: might be the the http agent the library is using
11:21 < vks> hi, can we pass string variable in socket.on()????
11:31 < wathek> when using each function from async lib isn't it possible to send extra argument ?
11:32 < ChrisPartridge> wathek: you could curry the iterator function
11:33 < wathek> ChrisPartridge, what do you mean ?
11:34 < ChrisPartridge> wathek: something like this https://gist.github.com/cjpartridgeb/3688880
11:36 < vks> Chris: http://pastebin.com/ZuVJmq4r
11:36 < vks> socket.on() is giving problem???
11:36 < wathek> ChrisPartridge, I don't get it !
11:37 < ChrisPartridge> vks: first of all, why are you on /root? :p
11:37 < vks> chris: my req. is like that ;)
11:38 < vks> Chris: socket.on() is not getting executed
11:39 < vks> when i replace the value of res by its value as 'gauges.gauge.vikash' it works fine
11:39 < wathek> ChrisPartridge, look in my case http://pastebin.com/FgGF3NYQ my d object contains two attributes d.id and d.articles and in my case I need both of them to be passed to my check function
11:42 < ChrisPartridge> wathek: if d.articles is an array of objects, your iterator should be passed an object..
11:42 < wathek> ChrisPartridge, yes that's what I'm doing
11:42 < ChrisPartridge> oh wait
11:42 < ChrisPartridge> sorry
11:42 < ChrisPartridge> *face palm*
11:43 < wathek> ChrisPartridge, am I doing something wrong ?
11:43 < ChrisPartridge> no, i misinterpreted
11:46 < ChrisPartridge> wathek: https://gist.github.com/cjpartridgeb/5705336
11:47 < wathek> ChrisPartridge, oh ! let me try that
11:47 < wathek> ChrisPartridge, this is very interesting
11:47 < ChrisPartridge> vks: what do yuo mean? when you replace the value? I thought the on() wasn't getting called?
11:48 < wathek> ChrisPartridge, but what I don't understand is async.each will call check function by passing it item from d.articles
11:49 < wathek> ChrisPartridge, and in your code you're calling the function check(d.id) so I guess that you're passing id to check function 
11:49 < wathek> this is really weird !
11:49 < ChrisPartridge> wathek: essentially check(d.id) is returning a function, the iterator
11:49 < ChrisPartridge> with id in the scope
11:49 < ChrisPartridge> to it simply
11:50 < ChrisPartridge> to put it simply*
11:50 < wathek> lol gonna try it 
12:05 < nareknarek> Hi
12:18 < eere> hello
12:18 < eere> which mysql?
12:18 < Cronoh> mysql extreme master blaster premium 
12:18 < __carlos> like… the only one there is? :|
12:19 < accc> i have a app running on zwo ports. one for http, one for https and socket.io. but the server has running a apache on port 80. but local proxy doesnt work for https. and its ugly to redirect to xyz.com:port
12:20 < wathek> ChrisPartridge, thank you man it's working ;)
12:20 < accc> any ideas?
12:21 < tarruda> is there a way to save command history across node.js repl sessions?
12:21 < sgronblom> Is there some great way to debug what's wrong when I get these symbol lookup errors?
12:22 < tarruda> or is there a more feature-rich REPL program for node? something like ipython
12:22 < accc> dont know, i use a editor, a shell and selfmade logging/debugging
12:31 < garthk> FFS. Why is this npm install working from a tty but not from under Puppet? 
12:31 < jhsto> guys
12:32 < jhsto> how do i make sure that pipe is done?
12:32 < jhsto> im using request from mikale and im doing this: request(image).pipe(fs.createWriteStream(id))
12:32 < garthk> I think it's around where async tries to install dtrace-provider.
12:35 < garthk> Oh, hang on. That was in 0.9.11. We should be fine by now.
12:39 < garthk> jhsto: pipe() returns the final stream.
12:39 < garthk> You can then call .on('error', cb) to catch errors, and .on('finish', cb) to catch the end. Or maybe it's .on('end'), but you can look it up from there.
12:47 < jhsto> garthk, thanks
12:47 < garthk> np
12:47 < garthk> Aha! https://github.com/TooTallNate/node-gyp/issues/115
12:47 < eere> whats the easy way to get a last insert id from any querylike:  id =msql.query("insert into table....");
12:48 < macbn> what is Function.prototype.bind?
12:49 < jhsto> garthk, it is just that on neither options my cb fires
12:49 < Trangar> eere https://github.com/sidorares/nodejs-mysql-native/issues/8
12:50 < jhsto> oh nevermind
12:50 < garthk> jhsto: weird. Try tacking on other event listeners to see what happens, e.g. 'data'. Full list in the streams docs.
12:50 < jhsto> it was the classic one
12:50 < nathan7> What'd you do?
12:50 < jhsto> the end event has to be declared before the pipe
12:50 < jhsto> i have no idea why it is do
12:51 < jhsto> so*
12:51 < nathan7> 'end' happens on a readable stream
12:51 < nathan7> you're piping to a writable stream
12:51 < jhsto> Anyway, now that I chained the end event before the pipe it works out fine.
12:51 < nathan7> a writable stream does 'finish'
12:51 < jhsto> It was a write stream
12:51 < nathan7> that's when it has actually been written
12:58 < olalonde> mmm I'm wondering how to organize my custom error objects
12:58 < olalonde> maybe place all of them in a standalone module
12:59 < jas-> olande +1 then if you want later you can extend them with translations
13:00 < olalonde> haha good idea
13:14  * sinclair|net suffers another evening with nodejs
13:14 < Havvy> Are you forced to use NodeJS?
13:14 < gildean> sinclair|net: if you're having such a bad time, maybe try something else
13:15 < sinclair|net> gildean: i don't understand why everyone else isn't having a bad time
13:15 < gildean> sinclair|net: we write javascript
13:15 < sinclair|net> gildean: as do i
13:16 < gildean> iirc i've only seen you use typescript
13:16 < sinclair|net> gildean: still JS at the end of the day
13:16 < gildean> not the same thing tho'
13:16 < sinclair|net> gildean: no, its better 
13:16 < gildean> yet you're the one complaining
13:17 < sinclair|net> my troubles are not with the language
13:17 < dolphin278> with what, then?
13:18 < sinclair|net> dolphin278: what do you use node for?
13:21 < Kosch> sinclair|net: I avoid JS too ;-)
13:21 < dolphin278> sinclair|net Right now I code my own project for people looking for part-time job. Earlier I worked for company that made storage appliances and used node to make a contolling/API layer of the product, and earlier I helped one fashion-oriented startup to implement their style-matching engine in node.
13:21 < sinclair|net> Kosch: high five bro
13:22 < sinclair|net> Kosch: coffeescript?
13:28 < Kosch> sinclair|net: Neighter. I joined fresh startup and had to choose between maintain the sysadmin stuff or development. After 2 weeks of node my decision was to be sysadmin ;-) Maybe typescript has better IDE support. Past xx years I was spoiled by Java and IDEA ;-)
13:28 < sinclair|net> Kosch: hahaha
13:29 < sinclair|net> giving up on the code because of 2 weeks with node, classic 
13:29 < __carlos> IDEs are the devil
13:29 < __carlos> all that configuring
13:29 < __carlos> so horrible
13:30 < __carlos> Java and Eclipse are fine… for the rest there's always some learning curve preventing you from being productive
13:30 < sinclair|net> __carlos: not visual studio ?
13:30 < werle> Does anyone here have, or know of any good articles about the role of constructors in javascript? I'm trying to find a good post to send to some coworkers. 
13:30 < werle> juliangruber: what about you?
13:30 < __carlos> but even then Eclipse is a pathological liar… you have to set up all your dependencies manually when you upload your jars to a server
13:31 < Kosch> sinclair|net: I don't think its Node related, I think most more or less typeless languages lacks on good IDE support. 
13:31 < sinclair|net> werle: constructors in JS are wrappers over the Object.create method afaik
13:31 < swaagie> webguynow, something like http://howtonode.org/prototypical-inheritance?
13:31 < sinclair|net> well, the "new" keyword is
13:31 < swaagie> not much specific node.js stuff in it
13:31 < sinclair|net> Kosch: typeless languages are generally bad
13:32 < sinclair|net> __carlos: i take it you have never used visual studio?
13:32 < __carlos> sinclair|net: I haven't used Visual Studio, sorry..
13:32 < __carlos> is it totally wonderful?
13:32 < sinclair|net> __carlos: for the most part, yes
13:32 < swaagie> werle, ^ was actually ment for you
13:33 < sinclair|net> __carlos: id is orders of magnitude above and beyond eclipse 
13:33 < sinclair|net> *it
13:33 < sinclair|net> and the express editions are free
13:33 < __carlos> sinclair|net: I've been looking into .NET for a while… I guess I'll install it on a VM and give it a shot
13:34 < jas-> dim this = that... phoooey
13:34 < sinclair|net> __carlos: i wouldn't say its very geared towards node development, 
13:34 < werle> swaagie: thanks I'm looking for more of a best practice on the role of constructors. typically I use them for field assignment (member variables)
13:34 < sinclair|net> __carlos: tho, i am using it for node dev with ts
13:35 < __carlos> sinclair|net: I would suggest just picking up Sublime and coding there man (for Node)… just help yourself with the docs… I know type and code hinting will spoil a fellow but working without those things is also quite useful :D
13:35 < Kosch> I tried Visual .NET few years ago... IDE sucked until Resharper plugin was installed ;-)
13:35 < __carlos> good practice at least
13:35 < sinclair|net> Kosch: i was never really keen on resharper
13:35 < werle> swaagie: I'm constantly in an argument (light discussion) about setting instance functions and weird things in the constructor, which I'm against 
13:35 < dolphin278> werle simple field assignment is the best possible option, since it simplifies testing when your constructor doesn't do much stuff
13:36 < sinclair|net> Kosch: i don't really need tooling to tell me if my .net code is correct or not, and i didnt like it formatting my code
13:36 < swaagie> werle, whats their point on setting a function inside the constructor function?
13:36 < sinclair|net> Kosch: i do however make heavy use of the code analysis tools, and architectural tooling, dependency graphs and wot not.
13:36 < swaagie> seems to rape prototype inheritance tbh
13:37 < werle> dolphin278: I agree. I'm also trying to fight against argument ambiguity having more dependency injection  
13:37 < __carlos> sinclair|net: yeah you're on another level man haha… I use Sublime because I mostly get to hack at work :|
13:37 < werle> swaagie: exactly! their argument is the use of private variables, but when the discussion of why are these variables private there is no true reason
13:37 < sinclair|net> __carlos: well, its just good old .net code, nothing special
13:38 < sinclair|net> __carlos: what id really like to see if a scripting infrastructure on .net that wasn't so top heavy, most .net heads (including myself) often write to target .net platforms, i don't think it should be that way
13:39 < swaagie> doubt there are any best praticals about it
13:39 < swaagie> practicals*
13:39 < swaagie> atleast not that I know of or have read
13:39 < __carlos> I'm afraid I haven't read anything like that either :|
13:39 < sinclair|net> __carlos: a node.net, where you could write node code in JS, C#, F#, Visual Basic and C++ would be pretty nice
13:40 < sinclair|net> where instead of the node core, you had the entirety of the .net BCL at your disposal
13:40 < werle> swaagie: thanks anyways - I feel this is going to be an uphill battle 
13:40 < swaagie> werle, http://kangax.github.io/nfe/ might be a good read if you incorporate the constructor
13:40 < werle> sinclair|net: have you seen http://tjanczuk.github.io/edge/
13:41 < sinclair|net> werle: yeah, i had seen that
13:41 < __carlos> sinclair|net: well Node picked javascript because it blended nicely with the idea of asynchronous functions via function referencing 
13:41 < swaagie> basically using var bla = function foo would not make sense in the first place
13:41 < __carlos> sinclair|net: however other people are starting to pick up different languages and using libuv to achieve the same thing
13:42 < __carlos> sinclair|net: like Lua and Ruby (I'm actually experimenting on the ruby one)
13:42 < werle> swaagie: thanks I've read this before
13:42 < swaagie> thought you would have :)
13:42 < sinclair|net> __carlos: right, i think it enriches the ecosystem
13:42 < __carlos> however the requirement is having a parser and a VM separated from the actual I/O operations… which I don't think is available for F#, C#,
13:43 < __carlos> for C you could always use the libuv code… that's a straightforward thing
13:43 < sinclair|net> __carlos: C# and F# both have a default built in ThreadPool, async operations are queued as work items and processed on the threadpool
13:44 < sinclair|net> __carlos: furthermore, recent updates to the language (and library) let you have some control over async orchestration with async/ await syntax, or, you can just use Task<T> 
13:45 < sinclair|net> (which is the same as a JS promise, only more powerful)
13:45 < __carlos> sounds nice
13:45 < Kosch> however... here is a on topic question: I've a mojito application and want to start it not using the server.js. I'm not sure if this is enough, since it seems, that the application miss some stuff configured inside application.json. http://nopaste.info/index.html
13:45 < sinclair|net> __carlos: well, if microsoft does anything right, its development languages and dev tooling and such
13:46 < vks> Chris: ????
13:46 < sinclair|net> __carlos: i do love me some C#
13:46 < __carlos> hah… I guess I never took the time… I guess it deserves a shot ^^
13:47 < ChrisPartridge> vks: what's up?
13:47 < sinclair|net> __carlos: yeah, C# is stupid powerful nowadays :)
13:47 < Havvy> sinclair|net: Seeing that Microsoft started with languages, I would hope so.
13:48 < sinclair|net> Havvy: they kept the tradition going strong, but most people get hung up on things like IE, and their horrible application software, like MSCRM, SharePoint and Commerce, 
13:48 < Havvy> SharePoint. *shudders*
13:48 < Havvy> I've not even seen what SharePoint is, but all I see are horror stories about it.
13:48 < sinclair|net> Havvy: it aint as bad as MS CRM
13:49 < sinclair|net> Havvy: that system gave me nightmares
13:49 < vks> Chris: I am stucked on this http://pastebin.com/ZuVJmq4r
13:49 < jas-> I think I get hung up on the licensing overhead regarding per seat services. It reminds me of a nickel and dime for every feature
13:49 < vks> Chris: u were correct, on() is not getting called???
13:49 < sinclair|net> Havvy: just to give you some idea, MSCRM is built on workflows, that run on queues, and depending on where you work, are coded by novices 
13:50 < sinclair|net> Havvy: as a result, i had to build insane queuing solutions in front of the damn thing to make it work
13:50 < vks> actually the idea instead of String we should have a variable
13:50 < sinclair|net> Havvy: oddly tho, node might have been quite useful in layering MSCRM
14:00 < Kosch> Are there alternatives to "forever"?
14:00 < thanpolas> i am having a problem running "supervisor" using child_process.spawn ... here's the case: http://bpaste.net/show/bU3E7ZsU9hiZPiM2B7wX/
14:01 < thanpolas> it doesn't pass the arguments to supervisor
14:07 < accc> node <3
14:08 < tuhoojabotti> accc<3
14:25 < eere>  id = msql.query("insert into table....").on('end', function(stats) { require("sys").puts("insert id:" + stats.insert_id); }); ??
14:29 < Trangar> Not quite
14:29 < Trangar> the on(´end´, function(stats) {}); is your callback
14:29 < Trangar> You need to get the ID in there
14:32 < eere> im trying to change some things from php to node, can you show me an example for insert, then update using the the first queries insert_id?
14:33 < Trangar> PHP and NodeJS are so different, I´d suggest rewriting it from the ground up
14:33 < eere> can you put another mysql.query inside the first function?
14:34 < ckknight> eere: inside the first one's callback? Yeah, that's the typical usage.
14:34 < ckknight> eere: there are ways to get around such "callback hell" using various async libraries (or a compile-to-JS solution)
14:34 < eere> callback hell
14:35 < ckknight> eere: where you have callbacks inside callbacks inside callbacks, creating a big chain that looks gross.
14:35 < eere> all i want to do is an insert then update using the insert id :(
14:37 < jas-> INSERT INTO `table` (`col1`, `col2`) VALUES ("val1", "val2") ON DUPLICATE KEY UPDATE `col1` = "val1", `col2` = "val2" (assumes your table has a unique column defined)
14:43 < eere> callback hell
14:44 < sinclair|net> ckknight: hello thar
14:44 < ckknight> hey sinclair|net
14:47 < aandy> obligatory re-paste: http://callbackhell.com/
14:47 < juliangruber> werle: the only thing i know about constructors in javascript mainly is that you give them a CapitalName and for not having to do new Foo() but rather Foo() you have to do that if (!(this instanceof Foo)) return new Foo(); stuff
14:47 < werle> juliangruber: haha very nice
14:48 < werle> juliangruber: digging multilevel btw - keep on leveling!
14:49 < juliangruber> werle: \m/
14:49 < eere> how to set vars to work within "callback hell"?
14:49 < __carlos> "If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program." -- Linus Torvalds
14:50 < sinclair|net> aandy: why do most nodejs projects i see look exactly like that
14:50 < ckknight> sinclair|net: because it's the easiest way to do it, instead of refactoring, spaghetti!
14:50 < sinclair|net> ckknight: even after a refactor, it generally still looks like rubbish
14:51 < ckknight> sinclair|net: I find promises really help
14:51  * sinclair|net waits patiently for yield
14:51 < Kosch> sinclair|net: lack of discipline, lack of code conventions, lack of code inspections, lack of review ;)
14:51 < ckknight> sinclair|net: hey, I have support for that in GorillaScript
14:51 < sinclair|net> Kosch: so, that's 99% of the community right?
14:51 < ckknight> you're even in that channel with me
14:51 < Kosch> sinclair|net: that are mostly the causes :)
14:51 < sinclair|net> ckknight: that i am :)
14:52 < __carlos> sinclair|net: also happens in fronted code… some inexperienced devs can check in some horrible, horrible, oh-so-horrible stuff :|
14:52 < ckknight> I published this recently: http://ckknight.github.io/egs/ - full async support by yielding promises within the template, sinclair|net
14:53 < sinclair|net> i have grown to distaste community modules, there are a few exceptions where you find something really well written and highly maintainable given the circumstance, but most of it is crud, and what's scary is there are people using that crud in commercial projects. its like programmers have given up on responsibility 
14:53 < sinclair|net> ckknight: sourcemap support :D
14:53 < sinclair|net> nice
14:55 < Kosch> sinclair|net: like CPAN 15y ago? ;-)
14:55 < ckknight> sinclair|net: yeah, it just runs through the regular GorillaScript compiler, which has sourcemap support already. One thing I haven't published yet (about to) is a packager that turns a directory tree into a single .js file, that'll have sourcemap support pointing to all the source files. Quite nice
14:55 < dolphin278> sinclair|net: If its irritates you, why all repos are not flooded by your pull requests with wonderfully refactored code?
14:56 < sinclair|net> dolphin278: its not something i strive for
14:56 < ckknight> sinclair|net: I think part of the problem is that JavaScript is so pervasive and has been "view source" friendly.
14:56 < ckknight> so it's easy to nab little chunks
14:56 < sinclair|net> ckknight: i thought copy paste programming was a thing of the past
14:56 < ckknight> ha
14:56 < Havvy> sinclair|net: No. Afraid not.
14:56 < ckknight> what's old is new again
14:57 < Havvy> It's a constant of programming.
14:57 < sinclair|net> ckknight: its like a whole new generation of programmers reinventing the wheel
14:57 < __carlos> I think that it doesn't matter… everyone writes horrible code… I don't do too much open source but I've come to acknowledge that horrible horrible code is just a thing that you live with
14:57 < Havvy> sinclair|net: Except where projects are based on other projects, that's pretty much what's happening.
14:57 < __carlos> it's just there, unavoidable… especially in a company, where you just need to finish your work… people will just hack unfortunately :|
14:57 < Kosch> __carlos: strict reviews can limits that
14:58 < sinclair|net> __carlos: i work late nights ensuring my code is what i deem "maintainable"
14:58 < sinclair|net> __carlos: if i get the sense that something isn't right, i work late to ensure it is right (by my standards)
14:59 < wathek> I got a problem with my nodejs http server http://pastebin.com/25nCChcQ when I pass parameters let's say I call http://localhost/?listId=123 in the console I see 123 and then undefined 
14:59 < wathek> why does it shows twice ?
14:59 < __carlos> sinclair|net: yeah.. it's not a specific kind of thing, most of the guys I manage try their best but unfortunately it just happens.. like i'll be reviewing code at 3am and find something horrible that it's too late to fix… at least until the next shipment
14:59 < alexwhitman> wathek, your browser is probably also requesting favicon.ico
15:00 < __carlos> I guess I should be a bigger bastard when reviewing haha :P
15:00 < wathek> alexwhitman, I'm using google chrome
15:00 < Kosch> __carlos: if you need to fix something at night, your development processes are wrong :-D
15:00 < __carlos> Kosch: I guess I was just pushed into the whole management thing :(
15:00 < wathek> alexwhitman, what can I do for it ?
15:01 < __carlos> it was like "hey, here's more money!" and I said "great!" without reading the fine print :|
15:01 < alexwhitman> wathek, yea, it's probably doing it.  Open the dev tools and look at the network tab.
15:01 < Kosch> __carlos: what a look that there are so much other companies out there :-D
15:01 < sinclair|net> __carlos: ensuring that everyone in a dev team is on the same page is a tough call
15:01 < wathek> alexwhitman, I see only one query 
15:01 < sinclair|net> __carlos: trusting people to write correct stuff is also a tough call
15:01 < wathek> alexwhitman, one request I mean
15:01 < Kosch> __carlos: s/look/luck
15:02 < alexwhitman> wathek, console.log(req.url) to see what is being requested.
15:02 < __carlos> sinclair|net: and deciding wether they should keep their jobs is another REALLY tough call 
15:02 < wathek> alexwhitman, ok
15:02 < wathek> alexwhitman, what's req ?
15:02 < sinclair|net> __carlos: keeping someone on longer than they deserve make and break projects, they often leave behind a legacy of crap if they aint suited
15:03 < alexwhitman> wathek, the request object.
15:03 < wathek> alexwhitman, oh sorry I was confused
15:03 < __carlos> sinclair|net: oh brother… I've seen that happen before
15:04 < sinclair|net> __carlos: me too, and sadly, i have had to be in there to clean up the mess
15:04 < sinclair|net> (complete rewrites)
15:04 < wathek> alexwhitman, you're right first it's looking for the favicon
15:04 < sinclair|net> more late nights
15:04 < __carlos> sincliar|net: .. yeah the whole 3am thing :|
15:05 < alexwhitman> wathek, in that case check the `path` part of the url to only respond to the right path.
15:06 < sinclair|net> __carlos: anyway, as i find myself in the drudgery of nodejs dev, i also find myself writing everything from scratch :( 
15:06 < Siyfion> Can anyone recommend a channel to discuss best REST API design practice?
15:06 < dolphin278> wathek: or use some router module
15:06 < __carlos> sinclair|net: yeah, the whole code depth is a common thing.. especially because you type so many callbacks, it's a common criticism of javascript in general (and Node.js)
15:06 < sinclair|net> __carlos: and what is more painful is, i know one day, a large corporation might jump in and write all these things
15:07 < sinclair|net> __carlos: its not so much the callbacks, (although they are a problem)
15:08 < sinclair|net> __carlos: the biggest problem is that JavaScript lets programmers do stupid things, and that seems to be the accepted thing "write stupid things and expect people to use it"
15:08 < sinclair|net> i also get bothered by the general lack of acceptance that JavaScript is both powerful and flawed at the same time
15:10 < Havvy> Anybody who does serious JS work will say it's both powerful and flawed.
15:10 < __carlos> sinclair|net: then again most languages have their flaws
15:10 < Havvy> sinclair|net: Just be glad you didn't write this: http://prettydiff.com/styleguide.php#architecture
15:10 < __carlos> especially those who have some history on their backs
15:10 < __carlos> except for lisp :P
15:11 < Havvy> __carlos: Even lisps have their issues.
15:11 < __carlos> Havvy: I know (but I refuse to accept them!) :P
15:11 < Havvy> You know how fun it is to find that the standard library for Racket isn't fully translated into Typed Racket?
15:12 < sinclair|net> Havvy: see this... https://npmjs.org/package/knox
15:12 < paparent> Hi  ! I'm new to node, but i already like it! .. I'm now building my toolset for a project I've to get done.. I'm about to implement tests for the project.. I found Mocha pretty interresting. What would be the best tool for http mocking ? (some fuction to test make 3rd party call that i want to mock). There's a lot of resource on the net but dunno which one to choose.
15:12 < paparent> Thanks!
15:13 < nathan7> nock's okay
15:13 < sinclair|net> Havvy: i spent ages chasing down the options in this source file  https://github.com/LearnBoost/knox/blob/master/lib/client.js
15:13 < sinclair|net> Havvy: i still to this day have no idea about all the possible mutations of the options being passed 
15:14 < sinclair|net> Havvy: its a prime example of the rubbish i find :(
15:14 < __carlos> sinclair|net: is this not it? https://github.com/LearnBoost/knox/blob/master/lib/client.js#L194
15:15 < sinclair|net> __carlos: that's part of it
15:16 < sinclair|net> __carlos: here is a far better project https://npmjs.org/package/awssum-amazon-s3
15:17 < sinclair|net> __carlos: note the download numbers
15:17 < sinclair|net> 12,000 for knox, 300 for awssum
15:17 < __carlos> sinclair|net: yea.. but then again knox is learnboost and they are "famous" :|
15:18 < wathek> can you please help me I'm creating a HTTP server that receives a listId and check in Redis if that list exists if it does it returns its value here's my code http://pastebin.com/VEgDNpRx
15:18 < wathek> unfortunatly I'm having no value returned
15:18 < sinclair|net> __carlos: perhaps, the community has chosen crap over competence, that awssum library is amazingly well structured, but everyone uses knox, why is that?
15:18 < wathek> all I can get in console is the listId passed and the message "found list Id"
15:19 < ckknight> sinclair|net: it's "good enough"
15:19 < sinclair|net> ckknight: then the bar isn't high enough imo
15:20 < ckknight> perhaps, but you're fighting against human nature at that point
15:20 < __carlos> sinclair|net: most people don't really care about source.. they just download things and plug them in, same thing happened with ruby gems (from where I'm sitting)
15:20 < ckknight> sinclair|net: there's a lot of things where the status quo is "good enough" to not bother changing.
15:20 < sinclair|net> ckknight: unfortunate isn't it
15:20 < __carlos> sinclair|net: plus they will follow the tutorial and it'll be good enough for 90% of them
15:22 < sinclair|net> __carlos: i suppose the same can be said for express
15:24 < ckknight> sinclair|net: too true, express works pretty well, though, all things considered.
15:24 < sinclair|net> ckknight: well, yes and no, depending on what you need it for
15:25 < sinclair|net> as it stands, it falls well short of what i need, but then again, it doesn't really offer much anyway
15:29 < ckknight> sinclair|net: I'm curious about what your needs are now
15:29 < ckknight> that express is ill-suited
15:29 < pachet> does the context property of the return value from crypto.createCredentials() have props that are there, but just non-enumerable?
15:29 < pachet> magic c++ bindings or some such?
15:30 < ckknight> pachet: Object.getOwnPropertyNames
15:30 < sinclair|net> ckknight: more control over routing, more control over middleware, 
15:30 < ckknight> sinclair|net: I tend to swap out express' routing with my own, escort
15:30 < ckknight> haven't really had a problem with the middleware system
15:31 < sinclair|net> ckknight: express middleware is a all or nothing affair 
15:31 < Havvy> pachet: Any JS object can have non-enumerable properties.
15:31 < Havvy> MDN Object.defineProperty
15:31 < sinclair|net> ckknight: sometimes, you just want to be able to apply middleware to a given route, not have that middleware trigger for every route
15:32 < ckknight> makes sense
15:32 < pachet> Havvy, yeah, i'm aware ;[
15:32 < pachet> ckknight yeah that was my first thought, returns []
15:33 < pachet> but nothing seems to go wrong with tls.createSecurePair()
15:33 < sinclair|net> ckknight: also, the authors of express question being able to add dynamic routes at runtime
15:33 < ckknight> pachet: look up the inheritance chain?
15:33 < ckknight> sinclair|net: I question that as well.
15:34 < sinclair|net> ckknight: well, if you think of things in a purely CMS context, you would want to dynamically add new routes without needing to restart your application
15:34 < sinclair|net> which is one reason
15:34 < ckknight> but that's handled through code anyway
15:35 < sinclair|net> it can be, sure
15:35 < Havvy> I don't think express works well for CMSes.
15:35 < ckknight> so you could make a catch-all "/{genericName}/" route or whatever
15:35  * ckknight shrugs
15:35 < sinclair|net> ckknight: additionally, i like the idea of being able to "mount" routers, which each router having a specific role or scope
15:35 < gildean> you can make routes with dynamic properties
15:35 < sinclair|net> ckknight: replace router with a mvc controller, and its a bit more inline
15:35 < ckknight> sinclair|net: escort provides that
15:35 < ckknight> the mounting thing
15:36 < ckknight> as well as it technically being able to register routes dynamically. Nothing stops that, it just breaks the cache.
15:36 < gildean> like app.get('/something/:somethingdynamic', ... etc.
15:36 < sinclair|net> ckknight: yeah, ill check it out, i had written my own stuff to do it, but keen to see what others are doing
15:37 < gildean> and you can apply middlewares per route really easily, i don't see where the problem there is
15:37 < sinclair|net> ckknight: with dynamic routing, there is the issue of ordering of routes, express has nothing in the box (afaik) to ensure that routes are ordered appropriately 
15:37 < sinclair|net> tho, i am sure you could write something to do it
15:37 < ckknight> sinclair|net: escort works by a weight system based on the match type of the dynamic parts.
15:38 < gildean> sinclair|net: you order the routes yourself?
15:38 < ckknight> so ordering is irrelevant in the end-run
15:38 < sinclair|net> gildean: no, i have a algo to do it
15:38 < gildean> sounds to me like you're trying to make things more complicated than they really are
15:39 < Havvy> gildean: sinclair is always doing that. ;)
15:39 < sinclair|net> gildean: no, im trying to make things simpler in the long run
15:39 < gildean> sinclair|net: doesn't sound like it
15:40 < Havvy> In any case, g'night.
15:40 < sinclair|net> gildean: you see no value in a system capable of ordering routes on your behalf ?
15:41 < ckknight> imo, routes should be ordered for you
15:41 < sinclair|net> ckknight: right ^
15:41 < ckknight> and as efficient as possible
15:41 < ckknight> afaik, express' default router walks through each route and executes one regex per until it find a match
15:41 < ckknight> which is terribly inefficient when you get a large number
15:41 < ckknight> and especially with submounting
15:42 < ckknight> there's a few ways to get around it, too
15:42 < sinclair|net> ckknight: id be keen to hear
15:42 < ckknight> by splitting up routes automatically into sections based on the literal prefix of the route
15:43 < gildean> sinclair|net: not really, you just order the routes yourself, it's way more clearer and verbose when you do it yourself
15:43 < gildean> there shouldn't be that many routes after all
15:43 < ckknight> on a non-node.js website I worked on, there ended up being something like 500 unique routes
15:43 < ckknight> it was a very featured app, though
15:44 < ckknight> forums, cms, blogging, context-specific stuff
15:44 < sinclair|net> ckknight: yeah, i suppose my view is that a system should be capable of 1 or a million routes, B Trees for the win
15:45 < sinclair|net> gildean: ever built a large website?
15:45 < ckknight> sinclair|net: take a look at https://github.com/ckknight/escort/blob/master/lib/escort.js - it's pretty well-documented.
15:45 < gildean> sinclair|net: yes, tho' not with express
15:46 < gildean> but i also know how to make dynamic routes
15:46 < sinclair|net> ckknight: nice, did you write escort ?
15:46 < ckknight> yes, hence the /ckknight/ part of the url
15:46 < ckknight> :P
15:46 < sinclair|net> ckknight: you've been busy mate
15:46 < ckknight> I did that like a year and a half ago
15:47 < sinclair|net> ckknight: what have you seen in terms of CMS systems for nodejs?
15:48 < ckknight> sinclair|net: eh, I care about performance after dealing with that huge website of 500+ routes. I benchmarked it with 1000 different routes, some static (e.g. "/about"), some dynamic, e.g. "/pages/{pageName}/stuff", and it ran about 200x faster than express's built-in
15:48 < ckknight> sinclair|net: I haven't looked, honestly
15:48 < sinclair|net> ckknight: i've been looking, and i hadn't found much
15:49 < sinclair|net> there is http://calip.so/
15:49 < sinclair|net> it says it was flavored after drupal and wordpress, neither system i am particularly fond of
15:50 < sinclair|net> ckknight: i find this video somewhat humorous  https://www.youtube.com/watch?v=h2AGSMaZgNQ
15:50 < sinclair|net> particularly the bit at the end where he doesn't get it to work
15:52 < ckknight> sinclair|net: why wouldn't he do a run-through first?
15:52 < ckknight> jeez
15:52 < sinclair|net> haha
15:52 < sinclair|net> i watched the whole thing first time
15:53 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:00 < ThePrimeMedian> I think I am going nuts: i put in my jade file: input(type="hidden", name="transaction_id", value=transactionID) and it throws an error: undefined is not a function; so I console.log what transactionID is, and it's a string "CH3ayDQo" ... anyone got an idea?
16:01 < gildean> ThePrimeMedian: put #{} around the transactionID variable
16:02 < ThePrimeMedian> tried that gildean
16:02 < ThePrimeMedian> gildean: input(type="hidden", name="transaction_id", value="#{transactionID}") throws same error. but If I remove that line, the view works
16:03 < gildean> you're sure you don't have a - or something at the start of the line?
16:04 < ThePrimeMedian> gildean: http://pastebin.com/G4hdMzq4
16:06 < wathek> olalonde, hey man how are you ?
16:07 < ThePrimeMedian> gildean: see anything wrong?
16:07 < ThePrimeMedian> gildean: cause I dont.
16:07 < Zaxnyd> request.post(myurl).form({foo: 'bar'}); there's no 'body' on the receiving end.  what am I doing wrong?
16:07 < redondo> I would like to run these examples: http://socket.io/#how-to-use. I see there a "app.js" which has the code for the server program, but I dont know how to run that script "app.js". Until now I thought that javascript was intented only for client-side apps. Someone could tell how can i run these examples, please? Thanks.
16:08 < gildean> ThePrimeMedian: that works for me, what are you inputting as the transactionID
16:08 < gildean> redondo: node app.js
16:08 < ThePrimeMedian> gildean: res.locals.transactionID = "boo"
16:09 < Zaxnyd> when I do: console.log(req.body); // I get undefined
16:09 < Zaxnyd> and I don't see the 'form' data anywhere else in the request
16:09 < ThePrimeMedian> Zaxnyd: make sure you have bodyParser middleware
16:09 < ThePrimeMedian> app.use(express.bodyParser())
16:09 < Zaxnyd> I'll try that, thank you
16:10 < ThePrimeMedian> ;)
16:10 < Zaxnyd> holy crap that did it.  you're a genius, ThePrimeMedian.
16:10 < redondo> gildean, uf, thanks. So simple that it is nowhere.
16:11 < ThePrimeMedian> Zaxnyd: np
16:14 < ThePrimeMedian> gildean: here's the weird part.... if I do != transactionID - it works but not inside that input line
16:14 < ThePrimeMedian> WTH
16:15 < wathek> can you please help me I've just written this code http://pastebin.com/Ki28BNYb and as you can see I'm querying redis to return the list using the key sent in param however sometimes the list isn't yet available so how can I do to make it wait for it or send back to the user when it's available ?
16:15 < wathek> it's in line 16
16:16 < ThePrimeMedian> gildean: hold on - my entire site is having that error now.
16:16 < ThePrimeMedian> brb
16:34 < flying_turtle> Is it possible to sanitize user input to pass to childprocess exec?
16:34 < flying_turtle> Or should I just pass all my parameters to stdin and deal with it in the child?
16:35 < ckknight> flying_turtle: yeah, it should be possible, just seems like it could be unwise
16:36 < ckknight> flying_turtle: basically wrap it all in single quotes, escape any single quotes within, and it should be fine
16:37 < ckknight> note: you escape single quotes by ending the quote and without spaces, do "'", e.g. "you're" => 'you'"'"'re'
16:38 < flying_turtle> ckknight: ok thanks :)
16:39 < ThePrimeMedian> gildean: Holy Hell - Found the problem - for future reference - JADE has a reserved word called "client" do not use it as a local variable!!!!!
16:40 < gildean> ThePrimeMedian: ah, your code worked for me because i renamed the vars
16:40 < ThePrimeMedian> gildean: LMAO
16:41 < ThePrimeMedian> wow. I can stop pulling out my hair now
16:41 < ThePrimeMedian> time for a break. thanks gildean for you assistance
16:41 < gildean> ThePrimeMedian: wasn't much of a help, but np
16:53 < vks_> hi
16:58 < vks_> can anybody help me in fixing this????? http://pastebin.com/hf4fARyX
16:59 < vks_> i want a variable to get passed instead of a "String" in on()
17:00 < gildean> vks_: socket.on(res you probably meant socket.on('subscribe'
17:00 < gildean> as that's the event that's emitted
17:01 < gildean> vks_: sorry, i misread, that's a socket.io app
17:01 < vks_> gildean: ok
17:01 < vks_> gildean: the problem is on()
17:02 < vks_> with variable
17:03 < vks_> gildean: this socket object is of socket.io-client
17:05 < gildean> yeah, i quickly read it and thought it was a net socket
17:05 < gildean> used as a self-observing instance
17:06 < wathek> is whilst function from async a blocking function ? (https://github.com/caolan/async#whilst)
17:07 < ak5> hey guys, when I POST some json to a server, it is wrapped in an object, so I get {{id: 123, data: abc}} - how do I get the inner object?
17:07 < ak5> I am using express with bodyparser
17:07 < Kakera> that's not valid json
17:07 < vks_> gildean:  self-observing instance???
17:08 < gildean> vks_: yes, using something to emit events and then listen on those events on itself
17:09 < gildean> ak5: you're probably wrapping the json you send in an object
17:10 < vks_> gildean: from source code it look like likes standard socket()???
17:11 < gildean> vks_: well, no, as i said i quickly looked at it and it looked like a self-observing object, but that's just because i played around with the idea earlier
17:12 < eere> i need to get the valuye of last insert id in mysql callback into the current function which called mysql, how do i do that?
17:12 < vks_> gildean: ok so what is the alternative???
17:12 < ak5> gildean: no, I just do curl -d @jsonfile.json
17:15 < ak5> gildean: JSON needs to be wrapped in {}, or not?
17:16 < gildean> ak5: no, you just stringify the object you already have
17:17 < ak5> gildean: I mean if it is in a plain-text file
17:17 < ak5> I am sending it to the express server via curl
17:17 < gildean> ak5: this is json {"key": "value"}
17:17 < ak5> yeah, thats what I got
17:17 < ak5> so why is this not == req.body ?
17:17 < olalonde> wathek: im good and u :) ?
17:18 < gildean> vks_: what alternative?
17:19 < eere> i need to get the valuye of last insert id in mysql callback into the current function which called mysql, how do i do that?
17:20 < vks_> gildean: my idea to pass that object in on() is to loop on the object nd retrieve the dynamic stat object from it. So if i can't pass object then how can we do it??
17:21 < kumavis> what is the standard write-stream ?
17:21 < polyrhythn> express routing question: when doing a backbone app, how do you make a wildcard route that serves every URL to the index?
17:21 < polyrhythn> i've done this: https://gist.github.com/Polyrhythm/5707783, and it turns EVERY request into the index view, including CSS, etc
17:22 < gildean> vks_: as long as the string in the var matches the emitted event, it should just work
17:22 < kumavis> i guess its from fs.createWriteStream
17:23 < vks_> gildean: but it doesn't get executed in my case, though i didn't get any error
17:24 < hrmphh> when running jasmine-node, how does it know which server to fire up?
17:24 < hrmphh> and any idea why i might be getting a 404 when adding done() (to indicate the end of the asynchronous test)?
17:37 < hrmphh> anyone use jasmine-node?
17:37 < hrmphh> if so, does it fire up its own node server using your app.js? or should you already have node running?
17:51 < rhalff> is it correct that one almost always should use promesed io's instead of the normal version?
17:52  * rhalff just learned this week about promises
17:57 < Zaxnyd> how might I manage my dependency upon neo4j?  i.e. versioning, whether it's running, etc?  any suggestions for automated deployement, and the like?
17:58 < rhalff> then I'm curious why was it removed from node, it cluters op the code a lot having to do promises on by yourself.
17:58 < rhalff> -on
17:58 < Zaxnyd> I was considering keeping the binary bundled with my code, but then it'd also depend on the OS, windows vs linux
18:00 < Zaxnyd> I suppose I could bundle the binary for all supported OSes, then have grunt fire a shell/batch file to handle launching the database?
18:04 < Zaxnyd2> am I going about this the right way at all?
18:06 < dukex> connect
18:07 < Zaxnyd2> is that directed at me?
18:07 -!- mode/#Node.js [+o nrajlich] by ChanServ
18:07 < d2dchat> How can I use follow.js to subscribe to multiple change feeds?
18:08 -!- mode/#Node.js [+o tjfontai1e] by ChanServ
18:08 <@MI6> joyent/node: isaacs created tag v0.8.24 - http://git.io/JFn4ZA
18:09 < olalonde> I;ll go with delete then, who cares about performance :D
18:11 < eere> i need to get the valuye of last insert id in mysql callback into the current function which called mysql, how do i do that?
18:11 < olalonde> there's a mysql function for that,  google it
18:11 < olalonde> lastInsertID() or something
18:11 < jesusabdullah> ah, mysql
18:12 < jesusabdullah> I've been doing a wordpress site as side work
18:12 < kessler> Hi everyone, got a little question regarding streams: assuming I want to write many streams serially to a file (piping each one) which event of the read stream should I use to signal the next one to start piping, "end"? "unpipe" doesnt seem to fire all the time...
18:12 < jesusabdullah> thing I learned: when all your config is in the database, you end up taking a lot of (mysql) dumps
18:12 < jesusabdullah> *frrrt*
18:12 <@MI6> joyent/node: isaacs v0.8 * 6fad535 : Now working on v0.8.25 (+2 more commits) - http://git.io/aiNrkA
18:14 < olalonde> lol
18:18 < jesusabdullah> hueniverse: https://github.com/spumko/poop One of the better module names I've seen
18:19 < Zaxnyd> lol
18:20 <@MI6> joyent/node: isaacs v0.10 * e116ee7 : blog: 0.8 is maintenace, not stable (+2 more commits) - http://git.io/0g9mgQ
18:22 < chapel> jesusabdullah: :P
18:23 <@MI6> joyent/node: isaacs v0.10 * 51226b8 : doc: ChangeLog update for v0.8.24 - http://git.io/HQsDbg
18:24 < jesusabdullah> chapel: yeah, been digging through hapi a bit, trying to get a feel for it
18:24 < chapel> jesusabdullah: we don't use any of that jazz on my team :P
18:24  * jesusabdullah gives chapel jazz hands
18:24  * chapel sniffs
18:27 < AntelopeSalad> there's no way to "exports" an anonymous function right? you would have to use module.exports = ... correct?
18:28 < jesusabdullah> That sounds pretty anonymous to me AntelopeSalad 
18:29 < jesusabdullah> blerg
18:30 < over__> hi 
18:31 < jesusabdullah> holy shit
18:31 < jesusabdullah> that was intense
18:32 -!- mode/#Node.js [+o trevnorris] by ChanServ
18:34 < chapel> whats intense jesusabdullah?
18:34 < jesusabdullah> chapel: idk about you but I just saw a huuuuuuuuuuuge block of irc quits
18:35 < chapel> I have them ignored
18:35 < chapel> :P
18:35 < jesusabdullah> YOU WOULD
18:35 < pirho> NETSPLIT
18:35 < jesusabdullah> ugh head work fasters so I can say intelligent things to hueniverse >_<
18:36 < chapel> jesusabdullah: no contact yet?
18:39 -!- mode/#Node.js [+o ryah] by ChanServ
18:40 < polyrhythn> the proper way to handle IRC quits is to filter out quits unless somebody has typed a msg in the last 5 minutes, then their quit is visible
18:40 < jesusabdullah> hueniverse: is pack for clustering? I haven't seen anything quite like Hapi.Pack before
18:41 < jesusabdullah> polyrhythn: you find me a way to do that in irssi and I'll draw you a picture of a cookie
18:41 < jesusabdullah> polyrhythn: cause this is straight outrageous
18:41 < jesusabdullah> at least I'm getting reminders as to who all is even in here
18:43 <@MI6> joyent/node: isaacs v0.10 * f28f67c : npm: Upgrade to 1.2.25 - http://git.io/QZnaaw
18:44 <@MI6> joyent/node: Ben Noordhuis v0.10 * 414a909 : url: remove unused global variable - http://git.io/QHJlxQ
18:45 < polyrhythn> jesusabdullah: it's pretty straightforward in weechat at least
18:46 < polyrhythn> jesusabdullah: http://dev.weechat.org/post/2008/10/25/Smart-IRC-join-part-quit-message-filter
18:48 < eere> i need to get the valuye of last insert id in mysql callback into the current function which called mysql, how do i do that?
18:54 < hrmphh> im trying to use grunt-contrib-jasmine to test my node code but its complaining that it cant find the variables "exports" and "require" which are of course used for my services (and in one case, their test)
18:54 < hrmphh> how can i fix this? grunt is using phantomjs to actuall run the tests
19:00 < rborg> good stats library for node?
19:01 <@MI6> joyent/libuv: isaacs created tag v0.10.10 - http://git.io/8bzK0A
19:01 <@MI6> joyent/libuv: isaacs v0.10 * e9ae62d : Now working on v0.10.11 (+1 more commits) - http://git.io/3u9gpA
19:02 < Robbilie> hey guys anybody here who can answer me a question related to node-webkit? :)
19:03 < nightfly> nope, nobody ;)
19:03 < Robbilie> kidding?
19:04 < Zaxnyd> anyone have advice on how to manage non-package dependencies like a database?
19:04 < Robbilie> when i bundle a node-webkit app up into an executable, it doesnt require node-webkit to be installed anymore, but what about nodejs itself...?
19:05 < JosephFerano> hey guys, I am using broswerify (which uses node style requires), I have a menu component that creates a menu dynamically from a json, and the json has an object for the function it needs to call, however, when I try calling that function, it says it's undefined (used to work before I refactored to use browserify)
19:08 < shannonmoeller> Use a debugger (`debugger;`) statement just before your function call to inspect the state of your application.
19:11 <@MI6> joyent/node: isaacs v0.10 * 96c30df : uv: Upgrade to 0.10.10 - http://git.io/0vkXUg
19:11 < JosephFerano> well, it seems it's a problem of scope, ever since I started using the requires, I guess the scope changed, how could I access main.js? or is there another way to assign custom events to each item, without using onClick, again the item's function is set in the json, but I could put it in the js
19:13 < shannonmoeller> json doesn't allow functions
19:13 < CorbinDallas> What is the preferred IDE for node in OSX, I'm using eclipse right now and syntax highlighting is poor
19:13 < CoverSlide> vim
19:13 < JosephFerano> shannonmoeller: well, it's just a string, which is appended to the html with onClick
19:13 < CorbinDallas> is VIM really an IDE?
19:13 < CoverSlide> no
19:13 < JosephFerano> CorbinDallas: no it's not
19:14 < CorbinDallas> oh ok, well, what is the preferred IDE for node in OSX?
19:14 < CoverSlide> but there aren't really any IDE's that integrate with node
19:14 < jesusabdullah> nobody uses IDEs for node, much less in OSX
19:14 < CoverSlide> so might as well use vim
19:14 < s5fs> we hates IDEs
19:14 < jesusabdullah> or, like
19:14 < jesusabdullah> sublime text?
19:14 < nightfly> or emacs
19:14 < CoverSlide> sublime is popular
19:14 < CorbinDallas> actually nodeclips has debugging support for node
19:14 < JosephFerano> yeah forget IDEs, use emacs, vim, or Sublime Text
19:15 < CoverSlide> cloud9 is also decent
19:15 < nathan7> Hey jesusabdullah 
19:15 < JosephFerano> I use Sublime Text with Vintage, so it has vim keybindings
19:15 < jesusabdullah> sup nathan7 
19:15 < s5fs> JosephFerano: why not just use vim?
19:15 < nathan7> being dead
19:15 < CorbinDallas> step into, step over, breakpoints, watch etc.
19:15 < jesusabdullah> nathan7: that doesnt' sound good lol
19:15 < Sly> Oh noes! Net split!
19:15 < JosephFerano> s5fs: because I like some of the features of ST2, like multiple cursors and the package management is really good
19:16 < CorbinDallas> just wish eclipse had better syntax highlighting support for JS
19:16 < eere> all i want to do is insert a row and get the last insert id to update a row on a different table, how can i do it in nodejs?
19:16 < JosephFerano> plus there's less setup time compared to vim
19:16 < JosephFerano> that and Unity 3D has better support for ST2 than vim
19:16 < nathan7> jesusabdullah: mostly caffeine withdrawal
19:16 < JosephFerano> in terms of what the community has written up for it
19:16 < nathan7> jesusabdullah: it was nice weather here, had a lovely afternoon
19:17 < rconover> Is there a way to seek an already created fs.createReadStream?
19:17 < eere> is node-mysql the best one to use?
19:17 < CorbinDallas> eere: it is in my opinion, I've only used that and native tho
19:18 < eere> CorbinDallas, i just need too insert a row and get the insert id to use elsewhere, ive been trying for hours with different ways, can you show me how please? 
19:19 < CorbinDallas> eere: You're inserting a row, and you want the PK of the row you just inserted?  Why not make your PK a UUID and generate it in node?
19:19 < jesusabdullah> nathan7: nice re: weather
19:20 < jesusabdullah> shit, what's my freelance rate?
19:20 < jesusabdullah> I've never done freelance
19:20 < CorbinDallas> jesusabdullah: $90-$150 /hr
19:20 < nathan7> Daaamn.
19:20 < zomg__> jesusabdullah: are you working with wealthy americans? if so try 150 and see how that goes =)
19:20 < nathan7> I should've moved more 150-ways when I did freelance shit
19:20 < shannonmoeller> JosephFerano: Code inside an onclick attribute only has access to global values and the element.
19:20 < jesusabdullah> zomg__: I, uhh, I've never ever done freelance
19:21 < eere> how come when ever i ask a simple question about nodejs, it usually ends up in rewrite everything aka don t bother, is node justy not ready for it?
19:21 < JosephFerano> shannonmoeller: ah, I see, so what's a good way to bind functions to the dynamic menu items? and is doing it with json a good idea?
19:21 < jesusabdullah> zomg__: I mean I've never ever done freelance but I'm having to consider it now
19:21 < CoverSlide> rconover: if you want to seek it, you should have used fs.open, not fs.createReadStream
19:21 < jesusabdullah> eere: what kind of questions?
19:22 < nathan7> jesusabdullah: wasn't swaagie sending someone your way?
19:22 < CoverSlide> rconover: FACT: fs.createReadStream uses fs.open under the hood
19:22 < zomg__> jesusabdullah: well if you're competent in the field otherwise, I think CorbinDallas is in the right bracket
19:22 < CoverSlide> rconover: you can also pass it an fd with a start and end, too
19:22 < shannonmoeller> JosephFerano: It's a better idea to make use of event bubbling by assigning the events to the menu's container. See jquery.fn.on
19:22 < eere> how to get an insert id from within a nodejs mysql callback to use in the current fucntion
19:23 < jesusabdullah> zomg__: I'm used to manual labor wages XD
19:23 < jesusabdullah> zomg__: $25 an hour? NOW we're cookin'!
19:23 < zomg__> haha
19:23 < nathan7> heh
19:23 < nathan7> freelance is *nice*
19:24 < eere> you have to write out 2 other functions to get last insert id?
19:24 < zomg__> yeah I can't talk with anyone I know who's not in programming about how much I make
19:24 < hueniverse> jesusabdullah: hapi.pack is not clustering. It is about treating multiple http server instances as a single unit. For example offering the same API endpoints over http and https. it abstracts the server configuration which is than passed on to plugins.
19:24 < JosephFerano> shannonmoeller: right, I'm not sure though, how do you recommend I bind them? for instance, the linter gives me a warning when I try to bind events in a forloop, I guess I could do a jquery each() instead, if that gets around that
19:24 < nathan7> But I'm enjoying working with a fixed bunch of people a lot
19:24 < jesusabdullah> hueniverse: I see. Is there somewhere I can read about this more? I found the bit in the API docs but clearly I got a little lost XD
19:24 < shannonmoeller> JosephFerano: http://davidwalsh.name/event-delegate
19:25 < zomg__> as long as it doesn't require me to be working at specified hours, is not java, and pays decent
19:25 < zomg__> =)
19:25 < jesusabdullah> hueniverse: hapi looks a little different from other frameworks I've hacked on
19:25 < zomg__> then I'm good.
19:25 < JosephFerano> shannonmoeller: now I understand what you were talking about, I didn't understand the terms you were using
19:25 < pachet> as long as i dont have to use angular
19:25 < pachet> ...wait
19:25 < pachet> shit.
19:25 < jesusabdullah> ohhh
19:25 < zomg__> haha
19:25 < zomg__> angular's pretty good tho!
19:25 < zomg__> I can imagine some people might not like the attribute-based approach to databinding it uses
19:25 < nathan7> jesusabdullah: what kind of stuff?
19:26 < jesusabdullah> hueniverse: I think it clicked in my head. You want to share partial configurations with multiple servers?
19:26 < chapel> hueniverse: hey fellow walmartlabs employee
19:26 < swaagie> nathan7, jesusabdullah was contacted over linkedin today, will redirect her to you ;) dunno what she is after though and how 'big' it is
19:26 < swaagie> no pun intended btw :)
19:26 < pachet> zomg__ it has its own version of q baked in that you can inject as a dependency
19:26 < pachet> which is cool right?
19:26 < pachet> but
19:26 < nathan7> swaagie: lol
19:26 < jesusabdullah> swaagie: huh?
19:26 < pachet> it won't resolve ANY deferred
19:26 < pachet> until AFTER the next digest
19:26 < jesusabdullah> swaagie: so I should be checking my linkedin? Is that what you're telling me? XD
19:27 < pachet> and nowhere in the documentation is this mentioned :[
19:27 < zomg__> pachet: oh, haven't used q in it but good to know in case i do :P
19:27 < swaagie> jesusabdullah, hehe not yet haven't responded to her yet
19:27 < pachet> zomg__ in all seriousness, i'm just 
19:27 < zomg__> the only thing I get from linkedin is some french guy sending me add requests in french
19:27 < zomg__> repeatedly.
19:27 < jesusabdullah> oh I see
19:27 < zomg__> even after I told him to stop because I don't fucking speak french
19:27 < zomg__> lol
19:27 < pachet> </gripe>ing mostly, it's not that bad
19:28 < CoverSlide> i get tons of job spam on linkedin
19:28 < dukex> are there any good resources for finding freelance work bout
19:28 < JosephFerano> shannonmoeller: yeah, so essentially I need to do a bunch of if statements to check to see which menu item was clicked, and then from that function, I dispatch the appropriate events
19:29 < jesusabdullah> CoverSlide: mine says something like, "LinkedIn looks kinda lame. Here's a link to my .pdf resume on github."
19:29 < nathan7> I should put a resume together someday
19:29 < JosephFerano> I'm not trying to be a contrarian, but I'm curious, what is the benefit of doing it like that over appending each event to the respective menu item, I don't plan on adding/removing menu items once it's built
19:30 < swaagie> also it seems legit, she seems to be an intern at njf europe, but haven't gotten much context
19:30 < jesusabdullah> nathan7: mine dates from my college days
19:30 < jesusabdullah> nathan7: I mean I keep it up2date but like, that's when I set it up
19:30 < jesusabdullah> nathan7: it's in LaTeX so ^__^
19:30 < nathan7> jesusabdullah: Yeah, I've seen it
19:30 < hueniverse> jesusabdullah: yep. we use it to share cookie definitions and a big portion of our apis across http and https
19:31 < pachet> i cant even remember the last time i updated my resume
19:31 < pachet> its probably still .doc
19:31 < zomg__> dukex: when my previous employer ran out of money I just sent emails to a few people to see if they had anything to offer and they did
19:31 < hueniverse> jesusabdullah: it started as part of our internal web server impl, but as we try to open source everything, we were able to abstract it into a nice simple pattern and add to hapi
19:32 < jesusabdullah> hueniverse: cool. I've hacked on a few node.js frameworks in my time (lil' flatty and big particularly) but hapi seems to do things I haven't seen before
19:32 < shannonmoeller> JosephFerano: It's just one way to solve the problem you were having. The primary take away is to look for better ways of attaching the events than using onclick attributes.
19:32 < jesusabdullah> hueniverse: which is neat. I like getting a different perspective.
19:32 < eere>  insertid = msql.query("insert into table....").on('end', function() { return this.insertid; }); <---how come not working 
19:33 < jesusabdullah> hueniverse: I saw hapi has baked in validation which is cool. Big has that too though the mental model's pretty different, and it uses JSON-schema
19:33 < JosephFerano> shannonmoeller: yeah, I guess it's just going to have to be localized, that onclick stuff isn't working, thanks, i"ll get to work on it
19:33 < shannonmoeller> JosephFerano: And that the issue isn't with Browserify. :)
19:33 < zomg> eere: because that's not how callbacks work
19:33 < jesusabdullah> hueniverse: speaking of, any reason in particular hapi didn't go with json-schema?
19:33 < eere> how do they work zomg
19:33 < nathan7> jesusabdullah: what's a nice json-schema impl?
19:33 < nathan7> jesusabdullah: I've only found shitty ones
19:33 < CorbinDallas> zomg: you never know, maybe the "on" event handler is interested in his PK
19:33 < dukex> zomg__: thanks. 
19:33 < zomg> eere: you can't return a value from a callback like that.. if you want to perform an action with the resulting value, you would need to call a function
19:34 < nathan7> jesusabdullah: maybe I've just been looking in the wrong place
19:34 < JosephFerano> shannonmoeller: it's not browserify's fault per se, it's just the nature of the new scope that was created no?
19:34 < hueniverse> jesusabdullah: at the time (1.5 years ago) we felt it was both too complex and not expressive enough
19:34 < zomg> CorbinDallas: it looked like he was trying to return it and assign it to the insertid variable to me
19:34 < CorbinDallas> zomg: yeah, I was just trolling :)
19:34 < zomg> hehe
19:34 < shannonmoeller> JosephFerano: Right. It sounds like the way you had it setup originally was to use globals. Generally a bad idea.
19:34 < eere> zomg, i make global object?
19:34 < zomg> eere: sorry I'm not following
19:35 < jesusabdullah> nathan7: json-schema is pretty wordy, but it's a "standard" and I've written some reasonably nice validators in big
19:35 < shannonmoeller> JosephFerano: Browserify is forcing you into better constructs. :)
19:35 < JosephFerano> nice!
19:35 < eere> im not following any 
19:35 < hueniverse> jesusabdullah: back in my XML days, we used schematron to express contains xsd was not capable of doing
19:35 < CorbinDallas> eere: make a var in your closure to assign to
19:35 < nathan7> jesusabdullah: I know the standard
19:35 < JosephFerano> yeah, I'm coming from C# game development, I have little experience with js, so I'm definitely looking to use good patterns
19:35 < hueniverse> jesusabdullah: and json-schema is very much stuck in the same mindset of XSD
19:35 < nathan7> jesusabdullah: but a JS validator for it
19:35 < jesusabdullah> nathan7: revalidator no?
19:36 < pachet> JosephFerano just since i was talking about it earlier, you'd like angular coming from c#
19:36 < pachet> declarative bindings out the wazoo
19:36 < jesusabdullah> nathan7: well, revalidator is kinda annoying honestly, I think most validator APIs are
19:36 < nathan7> jesusabdullah: oh cool
19:36 < nathan7> jesusabdullah: Yeah
19:36 < jesusabdullah> nathan7: big basically uses json-schema as type signatures though
19:36 < eere> fuck this, i go back to php
19:36 < eere> thanks anyway
19:36 < nathan7> jesusabdullah: there's this compile-to-JSON-schema thing
19:36 < CorbinDallas> woah guy
19:36 < JosephFerano> i'll take a look at it pachet, thanks
19:36 < eere> i go bed now instead of doing my head in lol
19:36 < CorbinDallas> nobody should be subjected to PHP
19:37 < jesusabdullah> I was subjected to php once
19:37 < CorbinDallas> I'm so sorry
19:37 < jesusabdullah> I wrote a site built entirely on includes
19:37 < jesusabdullah> \m/
19:37 < zomg> require_once > include
19:37 < s5fs> nice!
19:37 < nathan7> jesusabdullah: http://orderly-json.org
19:37 < jesusabdullah> and the other day I worked on a wordpress child theme
19:37 < jesusabdullah> nathan7: oh I've seen this before
19:37 < jesusabdullah> nathan7: neat
19:37 < s5fs> i dunno, i don't get all the php hate. it seems more popular to hate on it than anything else.
19:37 < nathan7> jesusabdullah: also, any idea which of the two bitcoin RPC clients marak uses?
19:38 < nathan7> jesusabdullah: just npm.im/bitcoin or the other one?
19:38 < baranaby> hey all, I'm having trouble getting a stack trace that goes back further than EventEmitter.emit - any tips? I'm trying to debug an npm install failure. The infamous "cb() never called" :(
19:38 < nathan7> jesusabdullah: I'd ask him on twatter but he blocked me
19:38 < zomg> s5fs: yep
19:39 < zomg> s5fs: it's a tool, it does some things well, it doesn't do other things so great =)
19:39 < nathan7> baranaby: much love for trying to debug those
19:39 < jesusabdullah> hueniverse: I have to admit I'm too green behind the ears to have had xml days :( but I see where you're coming from
19:40 < xyxne_> jesusabdullah, you should get that checked out
19:40 < Raulmsm> Hey, I made a pull request to libuv and seems like my pull request fails some tests. When run locally this doesn't happen, and from what seems to be the build history those tests seem to fail quite often
19:40 < Raulmsm> anyone knows more about this?
19:40 < hueniverse> jesusabdullah: the idea is to express relationships and rules about your data beyond just types and structure
19:40 < jesusabdullah> nathan7: https://github.com/bigcompany/resources/blob/master/bitcoin/index.js#L116
19:40 < nathan7> jesusabdullah: thank you
19:41 < jesusabdullah> hueniverse: I see. I should dig into the validation docs for a more complex example I think
19:42 < jesusabdullah> I don't actually hate php is the thing
19:42 < hueniverse> jesusabdullah: validation is handled by joi which is a standalone module
19:42 < jesusabdullah> s5fs: ^^
19:43 < PaddoSwam> Any advice on a lightweight DB for a Node.js/Express mixture on a Raspberry Pi
19:44 < PaddoSwam> MongoDB doenst seem ideal
19:44 < chilts> PaddoSwam: what kind of DB do you need? NoSQL/SQL or otherwise?
19:45 < RLa> PaddoSwam, what about dirty?
19:45 < jesusabdullah> PaddoSwam: leveldb
19:45 < RLa> how much data you will have?
19:45 < s5fs> PaddoSwam: i'm just writing to text files
19:46 < jesusabdullah> hueniverse: Cool. Hope I'm not distracting you too hard from your work. XD
19:46 < PaddoSwam> Im familiar with MySQL/SQL Server/SQLite
19:46 < RLa> leveldb is not db, it's key-value store :)
19:46 < PaddoSwam> And the use will be a small time time and money registration tool
19:46 < jesusabdullah> Like that's a worthwhile distinction
19:46 < PaddoSwam> Yeah key-value stores wont offer enough power I think
19:46 < jesusabdullah> You'd be surprised, check out the ridiculous amount of modules written for it
19:47 <@mbalho> no point in arguing with people that are really smart
19:47 < nathan7> a key-value store and mapreduce - that's what CouchDB is
19:47 < s5fs> PaddoSwam: i'm using riak on beagleboards with no real issue, bit more horsepower than the rpi tho
19:47 < jesusabdullah> mbalho :(
19:47 < jesusabdullah> I wanna be smrt too!
19:47 < RLa> sqlite3 module does not work on node 0.10 yet (0.8 only), otherwise it could be perfect
19:47 < locy> is there a help forum for people who dont know it all?
19:47 < nathan7> http://npmjs.org/levelup + http://npmjs.org/map-reduce
19:48 < nathan7> I have a basic Couchy thing with LevelDB
19:48 < PaddoSwam> Ok ok easy easy, let me take a look at dirty RLa mentioned and CouchDB (does sound familiar)
19:48 < samholmes> Check it out now, funk soul brother: https://npmjs.org/package/finisher
19:49 < s5fs> Does anyone know of a riak module to handle joining/leaving clusters?
19:50 < xyxne_> wat
19:50 < s5fs> xyxne_: yeah where is your riak-bot source?
19:51 < xyxne_> dead to the world ._.
19:51 < s5fs> xyxne_: what I'm really after is an open source project i can contribute to, if i roll it myself than i cannot release it (probably)
19:51 < xyxne_> https://npmjs.org/package/riak-bot
19:51 < hueniverse> jesusabdullah: this is my work :-)
19:51 < s5fs> xyxne_: yeah i saw that earlier
19:52 < s5fs> xyxne_: how far did you get?
19:52 < xyxne_> IIRC joining/leaving just fine
19:52 < xyxne_> but only by destroying all of the ring data
19:52 < s5fs> xyxne_: on the node that leaves? i think that's okay.
19:52 < xyxne_> yep
19:53 < xyxne_> it does the cluster join/commit
19:53 < xyxne_> cluster leave/commit
19:53 < s5fs> okay but you use a riak-admin command, you didn't just dump the data dir or whatever, yes?
19:53 < s5fs> okay very cool. did you get the mdns shit working too?
19:53 < xyxne_> yep
19:53 < nathan7> baranaby: see my PM
19:53 < xyxne_> disco-maps + riak-bot
19:54 < xyxne_> the only thing I didn't do was the logic for deciding when/if to join
19:54 < s5fs> xyxne_: you gotta re-post that somewhere so i can keep wrenching on it. i don't wanna yoink your work and then hide it
19:54 < xyxne_> which belongs in the app
19:54 < s5fs> agreed, that's a UI problem (for me)
19:54 < xyxne_> I don't want to be sued
19:54 < s5fs> me either!
19:54 < xyxne_> lol
19:55 < s5fs> i hear wifi sucks in prison
19:55 < xyxne_> it's all the steel & concrete
19:55 < baranaby> nathan7: thanks!
19:55 < nathan7> baranaby: [=
19:57 < s5fs> xyxne_: i think bsd license is okay for this project, i may use your work or just roll my own, i'll keep you informed.
19:58 < xyxne_> if you use riak-bot it may make moar sense
19:58 < s5fs> xyxne_: yeah but you know how this customer is
19:58 < xyxne_> but they haven't paid for any of that work ;)
19:59 < s5fs> haha!
19:59 < s5fs> well beats me, i stay outta billing. if you are owed monies i can take it up with chris
19:59 < xyxne_> nope
20:00 < s5fs> okay, well, we still have your box lid if you decide to return ;-)
20:01 < locy> fuckit
20:02 < JamesMGreene> Is there any way to specify that a module should be installed globally (or, better yet, honor that module's preference for global vs. local) in `package.json`?
20:02 < locy> anybody know how to set the valve clearances ?
20:02 < JamesMGreene> methinks not
20:02 < locy> JamesMgreen, probably not
20:02 < locy> try c++
20:03 < JamesMGreene> ...wha...?
20:03 < kessler> hi folks, can anyone spot why the "unpipe" event doesn't fire here: https://gist.github.com/yanush/5709060 
20:03 < locy> rewite everything in c++
20:03 < locy> oh you dont understand, just do it
20:03 < JamesMGreene> Umm, no thanks locy
20:03 < kessler> here even: https://gist.github.com/yanush/5709060#file-gistfile1-js-L62
20:04 < s5fs> locy: tappet or shim-under-bucket?
20:04 < locy> tappets
20:05 < locy> my sink is clogged, how do i fix it?
20:05 < s5fs> locy: there's a module for that
20:05 < Robbilie> hey guys anybody here who can answer me a question related to node-webkit? :)
20:05 < Robbilie> when i bundle a node-webkit app up into an executable, it doesnt require node-webkit to be installed anymore, but what about nodejs itself...?
20:05 < locy> if its in node then fuckit
20:05 < s5fs> locy: there's a gem for that, too
20:05 < xyxne_> s5fs, no money owed; that was the whole deal, use an existig OSS module
20:05 < xyxne_> one that I wrote on my own time
20:06 < locy> Sorry robbilie, you need to find a help forum/channel
20:06 < xyxne_> we just had 'differences' on what that meant
20:06 < s5fs> xyxne_: i've written so much shit off the book that its kinda silly
20:06 < xyxne_> yeah
20:06 < xyxne_> I bet *you* were never chastised for it ;P
20:07 < s5fs> xyxne_: i'm above punishment, you can't correct what's wrong with me
20:08 < JamesMGreene> kessler: The `unpipe` will only ever fire if a Readable's `unpipe` method is invoked. AFAIK, that is NOT a natural event but rather a special use case where you might switch the pipes
20:08 < kessler> JamesMGreene: thanks
20:08 < JamesMGreene> np
20:09 < rhalff_> JamesMGreene, there is a "preferGlobal": true, options, dunno if you can force it.
20:09 < xyxne_> Robbilie, don't listen to locy 
20:09 < xyxne_> this is a perfectly acceptable channel for those questions
20:09  * rhalff_ -options
20:09 < xyxne_> I'm sure someone knows if you stick around
20:09 < JamesMGreene> rhalff_: AFAIK, that just shows a warning if you DON'T install it globally
20:10 < locy> robbilie, you might not get the answers you're looking for, but you will find plenty of people who are willing to take your money 
20:11 < xyxne_> locy, what?
20:12 < nathan7> Robbilie: node-webkit includes node
20:12 < Robbilie> locy, i guess you are in the wrong place...
20:12 < xyxne_> pretty sure that's the case
20:12 < s5fs> locy: you're welcome to hang if you don't troll. there's no need to drag the channel quality down.
20:12 < nathan7> Robbilie: (there's some crazy hackery to merge the two event loops - it merges chromium and node into one)
20:12 < Robbilie> xyxne_, had to do with plenty of people over at unity 3d ;)
20:12 < locy> i figured that out already thanks
20:12 < Robbilie> nathan7, thanks, thought so :)
20:19 < Robbilie> why so many disconnects? xD
20:19 < locy> node.js-ircd
20:19 < accc> netsplit <3
20:20 < harbhub> hey fellas
20:20 < Robbilie> let me google that :D
20:20 < harbhub> is there a way to, after a request is sent to the server and the server has responded, send more responses to the client?
20:20 < locy> google has found 3 records for nodejs
20:21 < harbhub> i.e. i want to send the first response to the client, but then after 10 seconds i want to send another response that says "hello again"
20:21 < harbhub> any advice?
20:21 < jesusabdullah> harbhub: 100 continue, streaming
20:21 < harbhub> how does that work?
20:21 <@mbalho> harbhub: look up eventsource + server sent events
20:21 < aandy> harbhub: you could not close the response for instance
20:21 < booyaa|foo> is there any reason why search.npmjs.org doesn't automatically focus on the search box?
20:21 < accc> setTimeout? ^^
20:22 < booyaa|foo> actualy smoking crack sorry
20:22 < locy> setTimeout(function() { alert('hello');}, 3000);
20:22 < accc> hf lol
20:22 < aandy> locy.apply(self)
20:22 < samholmes> where's hook.io repo?
20:23 < aandy> samholmes: considering it redirects to https://github.com/marak i'd guess bitbucket?
20:24 < samholmes> aandy: you're weir
20:24 < samholmes> d
20:24 < aandy> samholmes: it no longer exists: https://groups.google.com/forum/#!topic/nodejs/Rl3drk9YQ_Q
20:24 < aandy> you're the one who hasn't heard of google, and *i'm* weird? o_O
20:24 < samholmes> I thought hook.io was a big deal
20:25 -!- mode/#Node.js [+o konobi] by ChanServ
20:25 -!- mode/#Node.js [+o ryah] by ChanServ
20:26 < aandy> samholmes: big deals can disappear
20:26 < samholmes> What's the alternative to hook.io? I was going to look into using hook.io, but I'm not sure exactly what problems it solved.
20:27 < nathan7> aandy: For future reference: bitbucket is also a git hosting service
20:28 < aandy> nathan7: i know :p
20:28 < harbhub> i'm not sure how to use the 100 continue, streaming (i.e. not closing the connection
20:28 < harbhub> also, i don't know how to use the event source for server-sent events
20:28 < aandy> samholmes: http://ejeklint.github.io/2011/09/23/hook.io-for-dummies-part-1-overview/ might give some insights, but then again, dead project not coming back
20:29 < locy> how i get insertid from a mysql callback function into current function? i want example please
20:29 < aandy> harbhub: alternatively you can keep the response open (like twitter streaming, finance.google.com etc.). try it: res.write('hello'); setTimeout(function(){res.write('hello again, and bye'); res.end() }, 20 * 1000);
20:29 < accc> wb all :>
20:30 < harbhub> hmm
20:30 < aandy> harbhub: remember to send heartbeats. that technique is usefull for subscription (to "channels"), as read only. websockets might be better for bilateral communication
20:31 < accc> why u dont use socket.io?
20:31 < harbhub> i've used socketio
20:31 < harbhub> it is nice
20:31 < harbhub> but i'm trying to do what facebook does
20:31 < harbhub> the bigpipe thing
20:32 < accc> hm, ok
20:35 < pachet> you'll need a big pipe
20:35 < samholmes> aandy: what projects take it's place?
20:35 < accc> http://roor.com
20:35 < samholmes> its*
20:35 < AntelopeSalad> api question for you guys -- in a callback do you prefer (1) function(err, result) but result has things hanging off it or (2) function(err, thing1, thing2) where you expect you might only have 2-4 things?
20:36 < AntelopeSalad> i kind of like #1 but i think #2 might be easier to use since everything is exposed, what are your thoughts?
20:36 <@mbalho> what is result
20:36 < aandy> samholmes: i don't know. never used hook.io
20:37 < AntelopeSalad> mbalho: result would be an object that has 2 properties
20:37 < AntelopeSalad> or potentially 2-4 properties eventually
20:37 < harbhub> pachet:  what is a big pipe?
20:37 <@mbalho> AntelopeSalad: ah i usually dont try to have more then 3 arguments to function
20:38 < samholmes> So what's this issue with Squires and Nodejitsu?
20:38 < aandy> harbhub: you might be able to draw from https://github.com/jehrhardt/bigpipe-node or https://github.com/undozen/bigpipe-on-node (google translate much?)
20:38 < pachet> harbhub just a joke
20:39 < AntelopeSalad> mbalho: i expect it might have 4 with the err in front, but do you feel being able to do: result.foo and result.bar has any benefit over just having foo and bar params and having the callback return 2 things instead of 1?
20:39 < dolphin278> AntelopeSalad first one is better since some libraries who can act as intermediates may lost 3rd and 4th arguments
20:40 < AntelopeSalad> dolphin278: oh, i didn't even think about that
20:41 < accc> var funcx = function (cmd, args) { console.dir(args); }); funcx('a cmd', {cell1 : 'bla', cell2 : 'bla'});
20:46 <@MI6> joyent/node: isaacs created branch v0.10.10-release - http://git.io/eDBpsQ
20:47 < kumavis> woo
20:48 -!- mbalho changed the topic of #Node.js to: NODE DOT JS VERSION 01010 - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
20:49 -!- mode/#Node.js [+b *!*@172.245.9.198] by ChanServ
20:49 -!- blitz` was kicked from #Node.js by ChanServ [Banned: rude & obnoxious]
20:56 <@isaacs> whoa
20:56 < accc> hehe
20:57 <@isaacs> oh, was an akick from before.
20:57 <@isaacs> usually those don't log like that to the channel, though
20:58 < locy> how i get insertid from a mysql callback function into current function? i want example please
20:58 < accc> computer says nooo :>
20:58 < s5fs> haha
20:58 < krunc> I take it, tis safe to assume the bot in here is run on node?
20:58 <@mbalho> locy: https://github.com/maxogden/art-of-node#callbacks
20:59 < krunc> anyway, what i'm getting at, is there any example code for something along the lines of an irc bot?
20:59 < pachet> krunc its written in php
21:00 < krunc> pachet: that would be amising
21:00 < krunc> amusing*
21:00 < jason81> Question re udp socket send. If you don't specify a cb is the call still asynchronous? 
21:01 < krunc> man, my $2 vps has a much better connection than my $4 one, lol... I could at lest see myself type on that one
21:01 < accc> !google test
21:01 < ljharb_> sure. https://github.com/oftn/oftn-bot
21:01 < accc> botiboti, come to me, i have some sweet input :>
21:04 < krunc> Hmm, should I tell users to install better browser, or jsut recommend chromeframe if their browser doesnt suport my site
21:05 < accc> or implement a fallback for eet
21:06 < krunc> accc: not much point.. sites not making me money, or showing off abusiness.. and without JS is pretty useless
21:07 < ljharb_> that's not true
21:07 < ljharb_> unless you've needlessly built your site to be useless without js
21:07 < accc> then just use <noscript> and tell to activate js or use a better browser
21:08 < krunc> ljharb_: my concentration is elsewhere, and 75% of fuctionality would be lost in the best caseanyway
21:08 < accc> yeah, right ljharb 
21:08 < locy> .++++++++++++++++++++++++++++++++++++++++++++++++++++++++.-*
21:08 < locy> +-----------------------------------------------------------------------
21:08 < locy> +-----------------------------------------------------------------------.66-
21:08 -!- locy was kicked from #Node.js by mbalho [locy]
21:08 < accc> generating a ssl key? :D
21:08 < ljharb_> noscript, lol. you should use progressive enhancement.
21:09 < ljharb_> krunc: if your site is 75% front-end javascript, i'd love to hear about how it's useful even in the best case :-)
21:10 < krunc> ljharb_: it's centered around live communication... both chat and intereactive help (using sockets)
21:10 < ljharb_> ah, fair enough
21:10 < ljharb_> you could still use it with page refreshes and normal form submissions
21:10 < ljharb_> it just wouldn't be as pleasant to use
21:10 < ljharb_> but that'd be just about aligned with the experience of someone using an old browser anyways
21:10 < accc> sure, but i use websocket to load and init the clien-code. so by request its a simple placeholder for the client-code and a noscript-tag
21:10 < krunc> I could, but the site would be clsoe enough to useless at that point nayway
21:11 < accc> and on a node-page, is use fallback without socket and js
21:12 < accc> i develop my "system" in two ways
21:13 -!- mode/#Node.js [+o tjfontaine] by ChanServ
21:16 < xyxne_> mbalho, +1
21:16 < accc> for the webapp i create maybe later a non-js and non-socket client. but a webapp and a webpage are two diferent conceptions, on my mind
21:17 < krunc> accc: yeah, this is definitely just a webapp... in the long term maybe I'll handle nojs more pleasently... for now, I think it'll be a reocmmendation for chromframe if you refuse to change browsers, if not chrome of FF recomendation
21:18 < accc> its like a fontend for the api, like app.net
21:18 < accc> yes. and all browsers are ok for it (exept IE haha)
21:19 < accc> just need a update, if ur version is 2 years old
21:19 < accc> :D
21:20 < jason81>  Question re: udp socket send. If you don't specify a cb is the call still asynchronous?
21:21 < accc> well, its nice to work with node and it gives a lot of space to a lot of solutions for very individual ideas and conceptions :]
21:22 < accc> yes jason81 
21:22 < accc> its all asynchronous
21:22 < bnoordhuis> jason81: yes
21:22 < jason81> accc: thanks, thats what I thought.
21:23 < krunc> jason81: tho, in many cases prob a good idea to at leastcheck that whatever you did succeeded or failed.. tho I guess a cb is by  no means required
21:23 < accc> if u want to do some things seperatly, use the async modul
21:23 < accc> npm install async
21:24 < accc> or search on github
21:26 < accc> on functions i use ever: cmd, data_object, callback, error_callback
21:27 < accc> or if u want to handel just one callback: cmd, data, callback
21:31 <@MI6> joyent/node: isaacs created tag v0.10.10 - http://git.io/KoKOIg
21:31 < xyxne_> ermahgerd
21:32 < xyxne_> 01010
21:37 < motaka2> hello is node.js better than java?
21:38 < aandy> :D
21:38 < CorbinDallas> totally unrelated and yes
21:38 < accc> java is good as coffee :>
21:39 < motaka2> CorbinDallas: Is it the language to future, I am a PHP dev, I am thirty do you think I should learn node.js to earn money in future?
21:39 < xyxne_> THE FUUUUUTURE
21:39 < accc> yes!!!1eleven1!
21:39 <@MI6> joyent/node: isaacs v0.10 * 6ada733 : Now working on v0.10.11 (+3 more commits) - http://git.io/NZbYuA
21:39  * xyxne_ wide eyes
21:39 < CorbinDallas> that's a tough one to call - I can't say - it's the wave of my future!
21:39 < aandy> that is a difficult question, if you're genuine. and an obvious troll, if you're trolling
21:39 < aandy> either way, yes
21:40 < xyxne_> let's just all preemptively label everyone as a troll
21:40 < xyxne_> it will save us time
21:40 < aandy> hehe. i feel like it's from somewhere, xyxne_ ? dilbert maybe
21:40 < motaka2> xyxne_: aandy please answer me in simple english
21:40 < accc> humans trolling since the life in holes
21:40 < accc> they*
21:41 < hotnikks> how can i include request() into my jasmine-node unit test (so that i can call out to a URL and verify it is working properly)?
21:41 < xyxne_> motaka2, only you have the power to control your destiny
21:41 < xyxne_> motaka2, try it out and see if you like it
21:41 < aandy> motaka2: depends what your clients want, and which clients you want. i'd say php is a dying language yes. is node the future? difficult to say. already now, it's solid, and i've used it in production for big projects. then again, i've also used python and go in big projects. it's up to you
21:42 < xyxne_> no aandy 
21:42 < xyxne_> we've already established
21:42 < xyxne_> node is the fuuuuuture
21:42 < aandy> but which future?
21:42 < xyxne_> all of them
21:42 < hotnikks> var request = require('http'); // i throw that atop the test file but it complains that it cannot find require? what gives?
21:42 < accc> yes. the mind makes the reality!
21:42 < trave> id say its the present
21:42 < accc> node is the future, u all will believe!
21:43 < motaka2> aandy: Why PHP is dying ?
21:43 < aandy> tell me about it. i'm stuck in that intersection of present and future
21:44 < CorbinDallas> I'll take that one aandy.  It's because PHP sucks balls and should never have existed in the first place.
21:44 < aandy> motaka2: it's a set of rusty tools. sure you can make web apps in php, but i'd have to get a tetanus shot
21:44 < CorbinDallas> this is coming from someone who has several PHP apps in production
21:44 < hotnikks> the tests run fine
21:44 < accc> php needs a revolution or it dies
21:44 < xyxne_> it's like we can't go 20 minutes without someone mentioning genitals
21:44 < hotnikks> when just running jasmine-node from command line
21:44 < aandy> it started out as a language, then over (too many) years of use, it's an aggregated hack-patch
21:44 < hotnikks> $ jasmine-node --forceexit --test-dir test/
21:44 < aandy> no offense
21:44 < hotnikks> boom no prob
21:45 < CorbinDallas> xyxne_: you realize you reset the timer with your comment right?
21:45 < hotnikks> grunt jasmine
21:45 < hotnikks> no sir
21:45 < aandy> xyxne_: it's like you don't want to talk about genitals anymore
21:45 < xyxne_> CorbinDallas, it's just that I keep trying to hold out hope that we're adults here
21:45 < accc> lol
21:45 < CorbinDallas> xyxne_: we are all adults - penis vagina boody
21:46 < xyxne_> awkard
21:46 < xyxne_> +w
21:46 < CorbinDallas> everyone has one
21:46 < CorbinDallas> don't feel weird, embrace it
21:46 < xyxne_> 1) not true, 2) out of scope for the channel
21:46 < aandy> i'm glad you said _one_
21:46 < accc> omg i'm shocked :0
21:46 <@mbalho> kicking 12 year olds in 3....2.....1.....
21:46 < aandy> although some have all three
21:46 < aandy> :(
21:47 < accc> npm install penis
21:47 < accc> thats not offtopic :>
21:47 <@mbalho> ---- all genitalia related discussion below this line gets kicked -----
21:47 < chilts> thanks mbalho 
21:47 < accc> nipples too? :D
21:47 < xyxne_> <3 mbalho 
21:47 -!- accc was kicked from #Node.js by mbalho [accc]
21:48 < CorbinDallas> that's kinda harsh
21:48 < xyxne_> dude
21:48 < xyxne_> get a grip
21:48 < chilts> mbalho: btw, wish your Voxel thing was on Saturday since I'm in SF at the moment (fly out before Sunday) :/
21:48 <@mbalho> chilts: oh dang
21:48 < chilts> by Saturday though I think my brain will be mashed, so I'll probably bike around to get tired for the plane
21:49 < aandy> motaka2: furthermore you should go with a language that fits you. js is a very different style compared to php. if you're okay with that switch (and you can, but it's a choice), then js can be used in almost any project
21:49 -!- mode/#Node.js [+o xyxne] by ChanServ
21:49 < samholmes> Anyone know of a Jade plugin for jquery? I'm looking to be able to pass Jade templates to jquery instead of HTML
21:50 < gildean> samholmes: why does it need to be a plugin for jquery?
21:50 -!- mode/#Node.js [-o xyxne_] by ChanServ
21:50 < ljharb_> ick, jade
21:50 < dozn> ^
21:50 < samholmes> gildean: good point. I could just use jade then pass the rendered HTML to jquery
21:50 < aandy> shanlar: https://github.com/visionmedia/jade#a4
21:50 < aandy> sorry
21:50 < samholmes> ljharb_: ick, your face
21:50 < aandy> samholmes: 
21:51 < ljharb_> :-p
21:51 < samholmes> but does jade work on the client-side?
21:51 < CorbinDallas> I really like vash (razor)
21:51 < samholmes> hurp durp
21:51 < samholmes> nvm
21:51 < motaka2> aandy: I dont feel well with js, it is not that structed that java is , I think it just conver big projs to nightmares
21:52 < samholmes> motaka2: JS > Java
21:52 < CorbinDallas> motaka2: there are missing elements in JS, but it can do pretty much everything java can do on the web and faster
21:52 < aandy> which area are you in? web? api?
21:52 < dozn> java is overstructured.
21:53 < ljharb_> java can't do many things on the web :-p
21:53 < trave> i heard java cant do lamda style functions as arguments.
21:54 < aandy> if you're worried about future employment, judging by current trends, you should learn node, yes. a few years ago, you should be a ruby dev, and before that python, so... perhabs go with the flow, is the best advice we can give
21:54 < aandy> i personally skipped ruby and focused on a couple of other languages and specialized in those, but i still take in new languages if the need should arise
21:55 < dozn> python is always good to have under your belt, nice and quick tooling if nothing else
21:55 < aandy> same
21:56 < CorbinDallas> motaka2: node is nice for two really good reasons.  It uses JS, which you need to know if you're writing web apps, and it's asyc by nature, which is almost essential for scaleable web apps.
21:56 < CorbinDallas> *async
21:56 < krunc> aandy: I'm on the same boat.. went from old school js (y2k andbefore).. to php.. to python... a nunch of random ones in the meantime, nothing I did major work in..... back to js
21:57 < accc> me2, but spend not a lot of time with python
21:58 < dolphin278> samholmes yes, there were few modules which made jade templates available for client-side rendering
21:58 < samholmes> dolphin278: browserijade and jadeify
21:59 < dolphin278> samholmes and some other who was mentioned due to high performance, as far as I remember it was not browserjade nor jadeify… 
22:00 < samholmes> browserijade and jadeify suck on performance?
22:00 < krunc> accc: same, for the mostpart.. I loved python back when I learned it... i mean at that time php was truely horrific (like 10k public functions), JS back then was far from pretty (at elast the way people used it).... but I never went beyond simple games inpython
22:00 < dolphin278> samholmes may be I am wrong — can not find it right now
22:00 < samholmes> dolphin278: if you find it, please let me know. :)
22:00 < krunc> Why not jst turn the jade into html on thebackend?
22:00 < dolphin278> samholmes sure :)
22:01 < samholmes> krunc: huh?
22:01 < dozn> you know... the way it's supposed to be done?
22:01 < dozn> rendered server-side
22:01 < krunc> lol, thank you dozn
22:01 < accc> krunc: i begun with perl
22:02 < dozn> I figured you were too... krunc'd to answer =)
22:02 < dolphin278> krunc one-page apps, for example?
22:03 < krunc> accc: haha, I did make an email form backend with perl way back when
22:03 < aandy> motaka2: that is if you plan to be in web for the rest of your future. my own strategy is to have a variety of language that i know well, to cover the (significantly) different paradigms. e.g. i know js, python, and go well. one steers more on async than the other, they both have strengths, they both counter some of the other's weaknesses
22:03 < accc> :D
22:03 < krunc> dolphin278: not sure what the difference would be if its a one page app
22:04 < accc> loading content via socket/ajax?
22:04 < dozn> rendered on server -> sent
22:04 < accc> or hidden boxes and jquery
22:05 < harbhub> how is https actually secure?
22:05 < dolphin278> krunc the difference is that you update page structure when you get new data from server using templates. you send lesser amount of data, you effectively offload your rendering to client.
22:05 < dozn> it uses SSL
22:06 < harbhub> how is SSL actually secure?
22:06 <@mbalho> cryptography
22:06  * mbalho waves hands
22:06 < harbhub> client sends a request to the server, which anyone can access if they intercept it, right?
22:06 < xyxne_> which I like to think of as magic
22:06 < dolphin278> krunc to make thing faster, you precompile your templates to plain JS functions
22:06 < xyxne_> obviously if SSL was truly secure, it would be using bcrypt
22:06 < dolphin278> krunc instead of sending unparsed templates
22:06 < harbhub> why would bcrypt make is truly secure?
22:07 < harbhub> how do you establish a secure way to send a password and username
22:07 < xyxne_> by not sending it
22:07 <@mbalho> i use haskell for anything involving credit cards
22:07 < harbhub> but you need to send it
22:07 <@mbalho> its the only way to know for sure
22:07 < xyxne_> nope
22:07 < accc> socket via tsl
22:07 < harbhub> what is haskell?
22:07 < dozn> mbalho: hahaha
22:07 < xyxne_> you do maths instead
22:08 < dolphin278> samholmes you know, i did some search, it looks like I mess with my memory, and that was jadeify or browserijade :)
22:08 < harbhub> what is the best way to send that password?
22:08 < harbhub> i know you can encrypt it
22:08 < harbhub> but
22:08 < dozn> that's the best way.
22:08 < harbhub> you still send the encrypted password which can be intercepted
22:08 < samholmes> dolphin278: which of the two is faster, would you think?
22:08 < dozn> harbhub: and how will they decrypt it?
22:09 < harbhub> well, they don't have to
22:09 < harbhub> since they know the encrypted password, they can send that to my server
22:09 < harbhub> and fake being the user
22:09 < xyxne_> wat
22:09 < harbhub> sending the password which is ecrypted
22:09 < harbhub> o.0
22:09 < harbhub> dozn
22:09 < harbhub> i have to send that password (encrypted) to the server
22:10 < harbhub> that request will pass through multiple computers
22:10 < harbhub> before it reaches my server
22:10 < harbhub> you know, the traceroute
22:10 < xyxne_> just use tls
22:10 < harbhub> how is tls secure?
22:10 < xyxne_> very carefully
22:11 < xyxne_> don't make me google a reference for you
22:11 < aandy> harbhub: in terms of interception, it's safe due to public/private key pairs. a private key can encrypt something which the public key can decrypt, a public key can encrypt something the private key can decrypt, but a public key can not encrypt (sign) something AS the private key. async information. so unless you replace the ssl certs with a valid pair (which may or may not be a "bad" CA forcefully trusted) that you own, no interception
22:11 < harbhub> i'm looking at the tls on wikipedia lol
22:11 < xyxne_> http://lmgtfy.com/?q=how+does+tls+Work
22:11 < xyxne_> woops
22:12 < aandy> that's the transport part. the password (hashing) should be done with bcrypt, and is left as an exercise to the reader :)
22:12 < harbhub> so aandy i'm still missing something
22:12 < harbhub> the server has the private key
22:12 < aandy> right
22:12 < harbhub> the client has the public key
22:12 < harbhub> the client encrypts the password
22:12 < harbhub> sends that
22:12 < harbhub> the server decrypts it
22:12 < harbhub> right?
22:12 < xyxne_> no
22:12 < dozn> nope
22:12 < aandy> no, the client sends the password in plaintext (at least, usually)
22:13 < werle> xyxne_: lol
22:13 < harbhub> lol
22:13 < aandy> but it's *transported* encrypted with the public key
22:13 < dozn> =)
22:13 < harbhub> i'm confused
22:13 < xyxne_> TLS = transport layer security
22:13 < xyxne_> > transport
22:13 < xyxne_> the entire connection
22:13 < xyxne_> is already encrypted
22:13 < dozn> there can't be a man-in-the-middle attack
22:13 < xyxne_> you're done
22:13 < xyxne_> unless you think you're the NSA
22:13 < aandy> dozn: there can, but not without a trusted CA
22:13 < xyxne_> then by all means, hash/encrypt more
22:14 < dozn> aandy: That's assumed, but you're correct regardless =b
22:14 < harbhub> hmm
22:14 < harbhub> the transport
22:14 < harbhub> is somehow secured
22:14 < harbhub> but how?
22:14 < dozn> using ssl
22:14 < xyxne_> harbhub, how many times are you going to ask the channel before you just read the same references everyone else did?
22:14 < werle> @harbhub http://en.wikipedia.org/wiki/Secure_Socket_Layer
22:14 < aandy> three?
22:14 < aandy> :D
22:15 < werle> @xyxne_ +1
22:15 < dozn> love it
22:15 < aandy> harbhub: with handshakes. another interesting illustration might be to look at deffie helman
22:15 < aandy> http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
22:15 < aandy> i think that's the root of your question
22:15 < harbhub> The client sends the server the client's SSL version number, cipher settings, session-specific data, and other information that the server needs to communicate with the client using SSL.
22:16 < harbhub> that step confuses me because it is step 1, yet that message is not encrypted  o.0
22:16 < harbhub> so you publicly tell the settings
22:16 <@mbalho> harbhub: heres a cryptography curriculum designed for 12 year olds https://diy.org/skills/cryptographer
22:16 < harbhub> is that not going to make it easy to decrypt for a hacker?
22:16 < dozn> read the link that mbalho just sent.
22:16 < aandy> harbhub: the first thing you do is establish a tcp connection to the server - which greets you with a handshake, and gives you (client) its (server) (public) certificate 
22:16 < harbhub> my question is all about how the keys are exchanged, as aandy pointed out
22:17 < harbhub> ok
22:17 < aandy> you then use those cipher settings to communicate on said tcp connection
22:17 < harbhub> so the connection is established
22:17 < aandy> which is the transport part
22:17 < harbhub> and i give the client my public key
22:17 < harbhub> so that the client can encrypt
22:17 < harbhub> and only i (the server) can decrypt (since i have the private key)
22:17 < harbhub> i get that
22:17 < aandy> which is basically "encrypting the HTTP requests, GET /YOLO HTTP/1.1\r\n etc"
22:17 < aandy> i say basically because it's not, but you can kind of think of it that way'ish
22:18 < harbhub> but aandry, those cipher settings, can't someone see them?
22:18 < aandy> no, it's common and non-common secrets
22:18 < samholmes> substack: does jadeify do more than what browserijade does? I notice some jquery stuff from within the readme, why isn't jquery and jadeify separate?
22:18 < deoxxa> aandy: User-Agent: Party/errrrrrday (like: i give a fuck)
22:19  * samholmes likes the name jadeify better than browserijade, but doesn't know if jadeify is "heavier" than browserijade.
22:19 < aandy> that is, you have a secret number only you know, the server has a number only it knows, and you then compute a new complex (big) number from that, based on shared and non-shared secrets. i forget the exact relationship, been a while since i've been into it
22:19 < aandy> harbhub: it's covered here: http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
22:19 < aandy> same principle applies to ssl
22:19 < harbhub> aandy i am reading that
22:19 < harbhub> i like the illustration
22:19 < dozn> NEXT
22:19 < deoxxa> http://www.youtube.com/watch?v=3QnD2c4Xovk << this is a great video about diffie-hellman stuff
22:20 < harbhub> thanks deoxxa i will watch it now
22:20 < aandy> deoxxa: what? :>
22:20 < accc> can i write a time travel machine in node? :3
22:20 < deoxxa> aandy: GET /YOLO, lol
22:20 < aandy> :p
22:20 < jesusabdullah> ^5
22:21 < dozn> accc: require('someModuleFromGit');
22:21 < aandy> accc: yes, you just have to invent it first, that's the easy part. then comes implementing it in js
22:21 < werle> accc: make it async
22:22 < accc> sure, no problem :D
22:22 < dozn> wow http://explainxkcd.com
22:22 < dolphin278> samholmes jadeify looks pretty outdated — it fails on install if you don't have 'less' module preinstalled and it's own example fails when using browserify().use() method, so I can not slap some fast benchmark right now, sorry.
22:22 < samholmes> dolphin278: ah too bad. I figured jadeify was outdated judging by the fact that the last commit was a year ago.
22:23 < samholmes> I really liked the name though, browserijade is an awkward name
22:23 < samholmes> maybe a browserify middleware called bade or brade would be nice.
22:23 < samholmes> bade prefereable
22:23 < aandy> npm install that-thingy-magic-whatcha-ma-call-it-jade-as-client-render
22:23 < samholmes> ly*
22:24 < samholmes> aandy: or that lol
22:24 < rud> hmm any node-redis users ..? i'm having a weird issue where retrieving a string or hash (client.get and client.hget) returns a hex encoded string prefixed by "buffer" … i can't figure if it's server config related, or code related .. help would be really appreciated.
22:25 < aandy> rud: the variable? try console.log(<your var>.toString());
22:25 < aandy> sounds like you're looking at a printed buffer
22:25 < rud> aandy: i think you're right, testing right now
22:25 < harbhub> deoxxa, aandy, and everyone else
22:25 < harbhub> thanks!
22:25 < harbhub> i finally get it!
22:25 < deoxxa> yay
22:25 < dolphin278> samholmes, substack gave npm ownership on jadeify to OliverJAsh 2 months ago
22:25 < dozn> \o/
22:25 < aandy> the more you know
22:25 < harbhub> the illustration from aandy and the video from deoxxa helped
22:25 < werle> dozn: someone didn't get it one day
22:25 < dolphin278> samholmes https://github.com/substack/node-jadeify/issues/13
22:26 < dozn> and that person was me.
22:26 < aandy> and some get it all the time. bastards
22:27 < werle> dozn: I'm sure we've all been thre
22:27 < samholmes> dolphin278: jadeify2 is still broken.
22:27 < samholmes> from what the travis-ci says
22:27  * samholmes must make bade/brade sometime
22:30 < harbhub> hey fellas
22:30 < harbhub> since you are all so smart
22:30 < rud> aandy: you rock :)
22:30 < harbhub> i consider myself smart, too
22:30 < rud> .toString() did it :)
22:30 < harbhub> why don't we team up
22:30 < harbhub> and make some amazing website/application/whatever
22:30  * accc = require('bed').listen(pillow);
22:30 < harbhub> node.js webchat team:  ASSEMBLE
22:30 < dozn> +gline
22:32 < hotnikks> how can i get grunt-contrib-jasmine to import request() from node/connect so i can use it in my tests?
22:32 < aandy> rud: np, glad i could help
22:33 < harbhub> no seriously fellas, why don't we team up and make an open source project
22:33 < rud> :)
22:33 < rud> now to figure, since i want to store a set of serialized objects, what field type is the best, hash, or sets.
22:35 < krunc> Anyone got a favorite SSG? (not looking for arguements, just putting a list of rrecommended ones together)
22:35 < dozn> <args>
22:36 < harbhub> krunc, what is SSG?
22:37 < krunc> harbhub: static site generator
22:37 < harbhub> what does that mean?
22:37 < harbhub> like a file server for the static stylesheets and scripts and html and such?
22:37 < aandy> like blogs, markdown to html, that sort of thing
22:37 < aandy> no dynamic server end. all dynamic is client side (if any)
22:37 < aandy> right
22:38 < dozn> GitHub uses Jeykyll for their GitHub Pages
22:38 < dozn> I've never used one though
22:38 < aandy> but that's ruby iirc
22:38 < aandy> i've only ever used octopress 
22:38 < krunc> yea, Jekyll is ruby
22:38 < dozn> I have no idea, just did a quick google, so you're probably correct =b
22:38 < krunc> I'm not limited to what lkangauge its in, so jekyll is a fair recommendation (tho I'm more than aware of it ;) )
22:39 < krunc> I've been liking wintersmith
22:39 < krunc> but I need a better list for work
22:42 < Zaxnyd> if I wanted a turnkey installation of my codebase, how do I facilitate the installation of a database?  particularly neo4j.
22:42 < FrozenFire> Wonder if someone could help me using redback with redis. I'm fairly inexperienced with redis on the whole, but need to do some complex debugging.
22:43 < FrozenFire> I'm calling redback.createSimpleQueue to be able to push new keys onto the queue, but I'm unsure how that corresponds to the redis server itself.
22:44 < deoxxa> Zaxnyd: for something like that, you'd probably want to provide a full system image
22:44 < Zaxnyd> as in OS-level image?
22:44 < deoxxa> yeah
22:45 < Zaxnyd> hm.  interesting.  don't think that'll work in my case though.
22:45 < deoxxa> well, ok
22:45 < Zaxnyd> there will be other things installed on the same box.
22:45 < deoxxa> your other option is to say "install x first"
22:45 < Zaxnyd> heh.
22:45 < Zaxnyd> well, that installer would likely be me.  i'd like to automate that process.
22:45 < deoxxa> you're not going to manage to install/run something like that reliably on every single OS
22:45 < Zaxnyd> true
22:45 < Zaxnyd> but I can support a couple, right?
22:46 < deoxxa> maybe :P
22:46 < Zaxnyd> would it be silly to include the binary for supported OSes?
22:46 < Zaxnyd> in my code?
22:46 < deoxxa> it might violate some kind of license
22:46 < Zaxnyd> true
22:46 < deoxxa> but if it doesn't, it's not necessarily a bad idea
22:47 < Zaxnyd> would it be a better alternative to attempt to create a script that would download and install the binary?
22:47 < deoxxa> what OS families are you looking to support?
22:47 < deoxxa> just linux? or things like os x and windows as well?
22:48 < Zaxnyd> Red Hat, but Windows support would be nice
22:48 < deoxxa> well i'd suggest packaging your application up as an rpm or something
22:48 < deoxxa> just depend on neo4j
22:48 < Zaxnyd> yeah
22:48 < deoxxa> you can bundle your own node binary
22:49 < deoxxa> for windows, that's easy enough
22:49 < Zaxnyd> an interesting idea.
22:49 < deoxxa> you only have to cover 32/64 bit
22:49 < Zaxnyd> do you have any resources on how I'd accomplish that?
22:49 < deoxxa> virtual machines and a lot of crying :P
22:49 < Zaxnyd> lol
22:49 < deoxxa> check out the nullsoft installer system
22:50 < deoxxa> http://nsis.sourceforge.net/Main_Page
22:50 < dozn> oh man nullsoft, brings a tear to my eye =)
22:50 < Zaxnyd> so this would compile the source into a binary which it would then unpack
22:51 < Zaxnyd> or does it just keep it as a binary?
22:51 < deoxxa> all binary all the time
22:51 < Zaxnyd> interesting.
22:51 < deoxxa> NSIS has stuff for hitting the registry, calling other installers, etc
22:51 < Zaxnyd> would it include node.js as well?
22:51 < deoxxa> you could do that
22:51 < deoxxa> i'd just bundle a node binary
22:51 < Zaxnyd> basically, all the dependencies
22:52 < deoxxa> yeah i'd bundle that stuff
22:52 < Zaxnyd> interesting.
22:52 < deoxxa> you want the installation to be deterministic
22:52 < deoxxa> the last thing you want is for a module to update and break
22:52 < deoxxa> (which does happen, despite semver)
22:52 < Zaxnyd> yeah
22:53 < Zaxnyd> nsis is only for windows though, it seems
22:53 < deoxxa> correct
22:53 < Zaxnyd> so I'd need another solution for linux
22:53 < deoxxa> well for each distribution you'd want to package it using their tools
22:53 < Zaxnyd> makes sense
22:53 < deoxxa> .rpm, .deb, whatever
22:54 < deoxxa> then a "generic" one with some more hands-on instructions
22:54 < deoxxa> just cover the most common distros and you should be set
22:54 < deoxxa> so like
22:54 < deoxxa> ubuntu, debian, rh, centos
22:54 < deoxxa> should get you a long way
22:55 < wathek> can you please help me I've just written this code http://pastebin.com/Ki28BNYb and as you can see I'm querying redis to return the list using the key sent in param however sometimes the list isn't yet available so how can I do to make it wait for it or send back to the user when it's available ?
22:55 < Zaxnyd> that's cool, thanks deoxxa :)
22:56 < deoxxa> Zaxnyd: good luck - packaging is hard :P
22:57 < Zaxnyd> haha yeah luckily 99% will be Red Hat
22:57 < Zaxnyd> so I'll just focus on a good solution for that
22:57 < Zaxnyd> and probably just deal with the oddities elsewhere
23:07 < hotnikks> whats the best framework to write unit tests of node.js REST services?
23:07 < hotnikks> (testing framework)
23:07 < hotnikks> mocha? jasmine? something else?
23:07 < hotnikks> nodeunit?
23:08 < Zaxnyd> I've been messing with mocha+should, and I have been enjoying it
23:08 < Zaxnyd> but I'm no means an expert
23:09 < hotnikks> Zaxnyd: do you automatically fire it off somehow? like w/grunt?
23:09 < Zaxnyd> I do have grunt set up to do it
23:09 < Zaxnyd> but I've found it easier to run it directly
23:09 < Zaxnyd> it also has watch functionality built in
23:09 < hotnikks> why have you found it easier to run directly?
23:09 < hotnikks> grunt is a pain to set up?
23:10 < Zaxnyd> no, really the only qualm I've had is that since I have to reroute the output, it seems to lose color
23:10 < Zaxnyd> and I didn't really see any other benefit
23:10 < Zaxnyd> grunt test vs mocha
23:10 < Zaxnyd> doesn't make much of a difference to me
23:10 < hotnikks> got it
23:11 < Zaxnyd> it might just be the way I have it configured
23:11 < deoxxa> i just use npm for that
23:11 < deoxxa> add a "test" script entry in package.json
23:11 < deoxxa> then `npm test'
23:11 < Zaxnyd> oh really?
23:12 < Zaxnyd> does it just fire off what you specify?
23:12 < Zaxnyd> similar to grunt
23:12 < deoxxa> yep
23:12 < deoxxa> $ npm help json
23:12 < Zaxnyd> any benefit to npm vs grunt?
23:12 < hotnikks> my problem w/jasmine is that i couldnt figure out how to expose the http object (e.g., var req = require('http') so that i could test my backend services
23:12 < deoxxa> well npm presumably exists already if you're using it to install dependencies
23:12 < hotnikks> is that easy enough w/mocha?
23:13 < Zaxnyd> yeah I have a few tests that do just that
23:13 < hotnikks> well, let me rephrase, when running from jasmine-node it was fine
23:13 < hotnikks> but when i tried to have grunt fire it off
23:13 < hotnikks> it "lost" access to those dependencies
23:13 < hotnikks> i think i need some sort of helper i suppose
23:14 < hotnikks> but ive been struggling w/it all day and am stuck
23:14 < Zaxnyd> hm, not sure.  the dependencies should be available.
23:14 < Zaxnyd> I haven't had any issue with mocha doing that.
23:14 < hotnikks> yeah the docs for jasmine+node are downright horrible
23:14 < hotnikks> jasmine-node rather
23:15 < Zaxnyd> hotnikks: this is an example of what I did: https://gist.github.com/Zaxnyd/62bc9408da1e594fa138
23:15 < deoxxa> jasmine is really weird
23:15 < deoxxa> with its crazy polling thing
23:15 < Zaxnyd> I'm not sure if I'm going about testing it the right way
23:15 < Zaxnyd> probably a better approach out there, but it works.
23:15 < deoxxa> some tests > no tests
23:15 < deoxxa> heh
23:16 < hotnikks> yeah so very similar to what i was doing
23:16 < Zaxnyd> seems odd though to fire up a complete local webserver and require a database to do a test.  but I can't figure a simpler way to accomplish it.
23:16 < hotnikks> but when you fire that off from grunt
23:16 < hotnikks> it cant even find require()
23:16 < hotnikks> mutter
23:16 < Zaxnyd> odd
23:16 < Zaxnyd> probably something to do with how you're firing the command in grunt
23:16 < hotnikks> the one nice thing was that grunt had grunt-contrib-connect so it could fire up a web server in advance of all the test
23:16 < hotnikks> s
23:17 < hotnikks> maybe
23:17 < Zaxnyd>   grunt.registerTask('test', 'mocha', function () {
23:17 < Zaxnyd>     var done = this.async();
23:17 < Zaxnyd>     require('child_process').exec('mocha test').stdout.pipe(process.stdout);
23:17 < Zaxnyd>   });
23:17 < Zaxnyd> I just do that.
23:17 < Zaxnyd> crude but effective.
23:17 < Zaxnyd> again, there's probably a better way.  I'm still learning this myself.
23:17 < Zaxnyd> just set it up a couple days ago.
23:20 < Zaxnyd> if anyone else knows a better way to incorporate some tests with a rest server, I'd love to hear them as well.
23:20 < deoxxa> what does tj use for testing his stuff?
23:20 < deoxxa> he'd know the score
23:20 < deoxxa> superagent was it?
23:21 < Zaxnyd> that's interesting.
23:21 < Zaxnyd> https://github.com/visionmedia/superagent
23:21 < deoxxa> https://github.com/visionmedia/supertest this is what i was thinking of, i think
23:22 < wathek> what's the difference between until and whilst in the async module ?
23:22 < Zaxnyd> is it pretty common to fire up a webserver and hit it via requests?
23:22 < hotnikks> from what ive seen yeah
23:22 < Zaxnyd> on one hand it seems like a pretty indirect way to test your code.  on the other, it seems like the most true to life way.
23:23 < hotnikks> ive been reading about this stuff all day
23:23 < pquerna> wathek: its just an inversion 
23:23 < pquerna> wathek: whilst(true) vs until(false)
23:23 < Zaxnyd> how would one handle the database?  creat a mock db?
23:23 < Zaxnyd> and are there any patterns on how to inject that in place of your actual db in your code?
23:23 < harbhub> oh shit guys!
23:24 < harbhub> we could make something for animals
23:24 < wathek> pquerna, I dunno but I need to wait without blocking until my variable change state to true is it a good idea to use until ?
23:24 < hotnikks> speak of the devil
23:24 < hotnikks> !
23:24 < harbhub> so some program that takes the input (barks or whatever)
23:24 < hotnikks> or not
23:24 < harbhub> and triggers something
23:24 < harbhub> ultimately, a dog can control a machine
23:26 < hotnikks> http://stackoverflow.com/questions/11429332/unit-tests-of-node-js-rest-services-with-mocha-or-jasmine
23:26 < hotnikks> theres one way (e.g., api-easy)
23:26 < Zaxnyd> I just found that actually
23:26 < Zaxnyd> funnily enough
23:26 < Zaxnyd> https://github.com/flatiron/api-easy
23:26 < hotnikks> and heres another approach: restify+mocha http://flurrytechblog.wordpress.com/2012/10/03/regression-testing-api-services-with-restify/
23:27 < hotnikks> Zaxnyd: what testing framework do you use on your frontend?
23:27 < Zaxnyd> I don't have one yet
23:28 < Zaxnyd> you?
23:28 < hotnikks> angularjs is the framework, and have been using jasmine for testing
23:28 < hotnikks> hence why i was trying to use on backend
23:28 < Zaxnyd> I see
23:28 < Zaxnyd> I am using the ember.js framework
23:29 < hotnikks> it just seems like a huge hack
23:29 < Zaxnyd> I imagine the method for testing it would be similar
23:29 < hotnikks> jasmine-node, grunt-contrib-jasmine, etc.
23:29 < hotnikks> shoddily assembled
23:29 < Zaxnyd> perhaps so
23:29 < Zaxnyd> try mocha
23:29 < Zaxnyd> I've had good luck with it
23:30 < Zaxnyd> but you've had good luck with jasmine on the front-end, hotnikks?
23:30 < hotnikks> so that second one i sent seems to be pretty simple: https://gist.github.com/brianflurry/3821607
23:30 < hotnikks> they have a before() call too that fires up the server
23:30 < hotnikks> Zaxnyd: yes
23:30 < hotnikks> because it's fired off by karma
23:30 < hotnikks> (formerly testacular)
23:30 < hotnikks> not this grunt garbage :)
23:31 < Zaxnyd> lol
23:31 < Zaxnyd> I wonder if Karma would play well outside the angular world
23:32 < hotnikks> well, there is a jasmine-node-karma
23:32 < hotnikks> i just dont trust it
23:32 < Zaxnyd> lol
23:33 < hotnikks> these guys are basically doing what i am: http://stackoverflow.com/questions/15743732/including-jasmine-node-files-in-karmas-runner
23:37 < knockknock> Anyone install 'node-v0.10.10-x86.msi' and have 'node -v' respond with 'v0.8.18'?
23:37 < Zaxnyd> APIeasy is very verbose
23:37 < Zaxnyd> not a fan.
23:37 < Zaxnyd> mocha+should is more elegant, imo, hotnikks.
23:37 < hotnikks> yeah
23:37 < hotnikks> imm reading up on mocha now
23:37 < Zaxnyd> well, I suppose it's should vs apieasy
23:38 < Zaxnyd> mocha is just what runs the tests.
23:38 < Zaxnyd> one of the things I like about mocha is the 'reporters' feature.  http://visionmedia.github.io/mocha/#reporters
23:38 < Zaxnyd> format the output to suit your preference/needs
23:39 < hotnikks> Zaxnyd: check this: http://brianstoner.com/blog/testing-in-nodejs-with-mocha/
23:39 < hotnikks> nice example to test http service
23:40 < Zaxnyd> hah, and they're using the exact same setup I am.  mocha+should.
23:40 < hotnikks> yeah
23:41 < JosephFerano> hey gents, I'm using browserify and I'm messing something up with the scope;
23:41 < JosephFerano> http://hastebin.com/husajavoli.txt
23:41 < JosephFerano> : when I do the console log at line 7, it returns the object, when I do the console log at line 12, it says undefined
23:42 < Zaxnyd> wow, hotnikks, do they actually boot the whole app?  it looks like they do.
23:42 < Zaxnyd> var app = require('../app')
23:43 < deoxxa> JosephFerano: you're losing the context of sendEvent
23:43 < JosephFerano> deoxxa: ok, let me try that
23:44 < deoxxa> JosephFerano: var a = {x: 5}, y = a.y = function() { console.log(this.x); }; a.y(); y(); // will give you "5", then "undefined"
23:44 < deoxxa> JosephFerano: you want to .bind() that sendEvent reference
23:44 < deoxxa> JosephFerano: i.e. setInterval(this.sendEvent.bind(this), 1000);
23:45 < deoxxa> JosephFerano: take a look-see at the mozilla developer network documentation on call/apply/bind
23:45 < JosephFerano> ok
23:45 < deoxxa> JosephFerano: or just http://bonsaiden.github.io/JavaScript-Garden/#function.this
23:45 < Aartsie> Hi all, when i have an callback function like var foo = function(options, fn) { var bar = 'foo'; fn(bar) } and i call this function by foo(options) does it crash then ?
23:46 < shoky> >> var foo = function(options, fn) { var bar = 'foo'; fn(bar) }; var options = {}; foo(options);
23:46 < purr> shoky: TypeError: undefined is not a function
23:47 < hotnikks> Zaxnyd: did you look at chai?
23:47 < hotnikks> or just deside to go right for should?
23:47 < Zaxnyd> briefly
23:48 < Zaxnyd> looks very similar to should
23:48 < Aartsie> shoky: Yes i know i have to fill the options but the problem is in the callback fn() 
23:48 < JosephFerano> that worked, thanks deoxxa
23:49 < Aartsie> shoky: Because it works all when i do fn(options, function(blaat){ console.log(blaat) }); but not whitout the function(){}
23:49 < Zaxnyd> chai actually seems like a more fleshed-out should.js, hotnikks.
23:50 < Zaxnyd> perhaps I'll switch to it.
23:50 < knockknock> part #nodejs, #node.js Leaving
23:50 < Zaxnyd> probably doesn't matter much either way, they seem pretty similar.
23:50 < knockknock> heh.
23:50 < hotnikks> another good article on it: http://taylor.fausak.me/2013/02/17/testing-a-node-js-http-server-with-mocha/
23:50 < hotnikks> (it being testing http services w/mocha)
23:52 < Zaxnyd> it's interesting how they launch their complete app
23:52 < Zaxnyd> I think I'll start doing that.  easier than trying to chunk it up.
23:52 < Zaxnyd> plus it'll remove a lot of code from my test.
23:52 < Zaxnyd> I just have to separate the creation / initialization of the server
23:53 < Zaxnyd> the database dependency still bothers me though.
23:53 < Zaxnyd> if the database goes down my tests all start failing.
23:53 < Zaxnyd> plus it'll start polluting the db with test data
23:54 < wathek> can you please help me I'm stuck I've created a HTTP server that receives queries and return result however some times the result isn't yet ready so I need to wait for it here's my code http://pastebin.com/Ki28BNYb as you can see line 16 is retrieving the data to return from Redis 
23:54 < shoky> Aartsie:  you can do..   if (typeof fn === 'function') fn(bar);
23:54 < shoky> or even if (fn) fn(bar);   if you want
23:55 < Aartsie> shoky: Thank you !! :)
23:55 < hotnikks> with respect to grunt, this looks nice: https://npmjs.org/package/grunt-cafe-mocha
23:56 < Zaxnyd> interesting.
23:57 < wathek> any idea please ?
--- Log closed Wed Jun 05 00:00:13 2013
