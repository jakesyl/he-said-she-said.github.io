--- Log opened Thu Jan 31 00:00:14 2013
--- Day changed Thu Jan 31 2013
00:00 < isaacbw> yes
00:00 < isaacbw> it is not
00:00 < azylman> You think this is bad, an hour ago they were talking abou the holocaust
00:00 < livinded> just need to pipe the clown pr0n through aalib so I can stream it to irc
00:01 < isaacbw> oh man, that's brilliant
00:01 < livinded> I'm just full of ideas today
00:01 < isaacbw> Nexxy, the utility can be written in node if that makes you happy
00:02 <@Nexxy> lol
00:06 < durango> is there anyway to get expressjs to use SSL but only if its requested?
00:06 < durango> like, I don't want to enforcre SSL, and more importantly i dont wanrt to split my double my app's code just to support https (which is what im gathering from these examples)
00:07 < durango> is there a clean way of doing this?
00:07 <@Nexxy> yes
00:07 <@Nexxy> use something like bouncy or node-http-proxy
00:07 <@Nexxy> make your express app listen locally on w/e port
00:07 <@Nexxy> and proxy both HTTP and HTTPS through to it
00:07 < CoverSlide> or use haproxy or nginx
00:08 <@Nexxy> yeah if you're google
00:08 <@Nexxy> do that too
00:08 < CoverSlide> also, http://expressjs.com/api.html#app.listen
00:09 < CoverSlide> durango: ^ look at the second example. that's all you need to do to listen on both
00:09 < azylman> Yeah, I think that's the one you want to do
00:09 < durango> lmao @ Nexxy's comment
00:09 < durango> hmm
00:09 <@Nexxy> lol
00:09 < durango> oh this is interesting, ok thanks! :)
00:10 <@Nexxy> the nice thing about using a proxy is that you don't have to make your app run as a privileged user
00:10 < durango> I guess I was looking at old epxressjs 2.0 examples
00:10 < durango> thanks dude
00:10 < durango> dudes*
00:10 < isaacbw> Nexxy, do you write your server code for http and then let http-proxy do all the https work?
00:10 <@Nexxy> yep
00:10 < isaacbw> oh, super neat
00:10 <@Nexxy> I use bouncy
00:10 < CoverSlide> yeah that method requires express 3.x, but it's so much better that way
00:10 <@Nexxy> isaacbw, it also lets you mount multiple apps easily
00:11 <@Nexxy> w/o all the express route mounting stuff
00:11 < CoverSlide> I'm personally a fan of haproxy, plus it has ssl termination
00:11 < isaacbw> I'm doing really basic proxy stuff to route localhost and api.localhost to different prots
00:11 < isaacbw> *ports
00:11 < isaacbw> I had been using nginx, but I'm switching to http-proxy at this very moment
00:12 < durango> CoverSlide: haproxty is nice, unfortunately my co-worker is saying no to my request for it :(
00:12 < durango> andhes the web dev leader meh
00:12 < CoverSlide> ah
00:17 < MiracleBlue> Hey nexxy :)
00:18 <@Nexxy> hai MiracleBlue!
00:18 < MiracleBlue> Supsup
00:18 <@Nexxy> making really bad jokes on twitter
00:18 <@Nexxy> you?
00:18 < MiracleBlue> Making really bad jokes IRL
00:18 <@Nexxy> ^5!
00:18 < MiracleBlue> :D
00:19 < MiracleBlue> Also rendering some xml files using EJS, caching their outputs, and combining them into a zip package.
00:19 < MiracleBlue> Like a baws.
00:19 <@Nexxy> great now I have to listen to that song
00:20 < MiracleBlue> LIKE A BAWS
00:20 < MiracleBlue> Send some faxes
00:20 < MiracleBlue> Promote synergy
00:20 <@Nexxy> approve memos!
00:20 < isaacbw> have sex with a fish
00:20 < MiracleBlue> Giant fish
00:20 < MiracleBlue> Shit on deborahs desk
00:20 < MiracleBlue> etc etc
00:21 < azylman> Well that got dark fast
00:21  * Nexxy regrets mentioning it
00:21 <@Nexxy> lol
00:21 < MiracleBlue> aww
00:21 < MiracleBlue> Now *I'm* the awkward one.
00:21 <@Nexxy> hahaha
00:21 < isaacbw> lol
00:22 < isaacbw> wow, http-proxy is making me very happy
00:22 < isaacbw> this is slick and solves a lot of problems for me
00:22 <@Nexxy> FOREAL THO
00:22 <@Nexxy> shit's legit
00:22 < isaacbw> the main one being that I need some logic in deciding where to route stuff
00:24 < isaacbw> have you guys used rackspace? I have a tiny little server running irssi (or at least I used to), but I haven't used them for anything serious
00:24 < isaacbw> they do seem a bit on the pricey side
00:24 <@Nexxy> I use linode
00:24 < tjfontaine> isaacbw: for something that thin I would start with linode
00:24 < holzp> I had one of the top servers (for longevity) at rackspace from 2001-2010
00:24 < tjfontaine> which should be more than enough for your needs
00:24 < Lorentz> I'm on linode right now!
00:25 < harrisonm> I use linode as well
00:25 < holzp> then they went cloud
00:25 < harrisonm> pgrmr is another option if you want something minimalist
00:25 < holzp> and their service started to suck
00:25 < isaacbw> aw :(
00:25 < holzp> now they are nothing but an aws wannabe
00:25 < isaacbw> have you used their new cloud service?
00:25 < harrisonm> prgmr
00:25 < isaacbw> it was released last year I think
00:25 <@Nexxy> I seem to remember nodejitsu having a bit of trouble with RS as well
00:25 < holzp> no cloud is being done better elsewhere
00:25 < isaacbw> I see
00:25 < holzp> rackspace was great for HW
00:26 < isaacbw> hw?
00:26 < holzp> physical servers
00:26 < isaacbw> mm
00:26 < holzp> they prob peaked in 2007-8 now its all cloud and they are behind
00:27 < isaacbw> you should maybe take a look at the new stuff they haVE
00:27 < CoverSlide> they have cloud hosting, had it for a while
00:27 < holzp> if amazon gives me a reason to I will
00:27 < isaacbw> they just rebooted it with new technology, I mean
00:27 < holzp> RS drove me away as a longtime customer
00:27 < isaacbw> that's too bad
00:27 < holzp> I was there for 12 years, hell Im still there
00:27 < isaacbw> :(
00:28 <@Nexxy> linode has been great to me for like 9 years
00:28 < holzp> I had two of their top ten server for uptime in the 2000's
00:28 < durango> CoverSlide: how does express know where to get my cert and key?
00:28 < durango> nvm
00:28 < echo> durango: You have to pass it in: http://stackoverflow.com/questions/11804202/how-to-setup-a-ssl-cert-in-express-js-server-now
00:28 < CoverSlide> express doesn't need it, your https.createServer function needs it
00:28 < durango> yeah
00:28 < durango> the https needed it :)
00:29 < redshadowhero> Nexxy: linode has been around for 9 years? Wow, I didn't know it was that long.
00:29 < durango> sorry, drunk right now
00:29 < isaacbw> heh
00:30 <@Nexxy> redshadowhero, yeah my head kind of spins when I think about it
00:30 < harrisonm> Was using AWS micro, enjoying Linode way more
00:30 < redshadowhero> What's the price look like for linode?
00:30 <@Nexxy> they were started in 2003
00:30 < isaacbw> I hope no one ever sees the early commit messages for this project
00:30 <@Nexxy> and I think I started using them in 2004
00:30 < isaacbw> "I don't remember what I did but it looks pretty intense"
00:30 <@Nexxy> redshadowhero, I just have a few $20 nodes
00:30 < isaacbw> does linode have a good selection of OS images?
00:31 <@Nexxy> yeah I think so
00:31 < redshadowhero> Can I install debian?
00:31 < redshadowhero> like, regular debian?
00:31 < CoverSlide> I'm sure you can
00:31 < isaacbw> I also like the idea of mixing vps and dedicated servers on the same internal network
00:31 < isaacbw> I'm pretty sure you can do that with rs
00:31 < azylman> isaacbw: best commit message of my college days: 4 am: "HAH! You gusy told me I cuoldnt finish tihs drunk"
00:31 <@Nexxy> $20/mo is 512mb RAM, 24GB space, 200GB bandwidth, 4 CPU
00:31 < CoverSlide> dey got all dat shit
00:31 < samholmes> If you're code isn't DRY, does that mean it's WET?
00:31 < isaacbw> azylman, lol
00:31 < samholmes> What does WET mean?
00:31 <@Nexxy> plus if you have multiple linodes you get to pool your bandwidth 
00:31 < CoverSlide> redshadowhero: http://www.linode.com/faq.cfm#which-distributions-do-you-offer
00:32 < harrisonm> samholmes: What (software) Engineering Techniques?
00:32 < samholmes> haha
00:32 < isaacbw> We Eat Tomatoes
00:32 < redshadowhero> Ooh.
00:32 < redshadowhero> Debian 6.
00:32 < redshadowhero> <3 <3
00:32 < samholmes> isaacbw: :P
00:33 < isaacbw> I want to be a rebel and use arch on a production server
00:33 <@Nexxy> you can w/ linode
00:33 < isaacbw> and linode lets you save images and reuse them easily?
00:33 < echo> Oh god, I have a coworker just like you, isaacbw.
00:33 <@Nexxy> isaacbw, yeah
00:33 < redshadowhero> No isaacbw! Don't go down that path! You'll only end with sadness and pacman!
00:34 < CoverSlide> arch! \o/
00:34 < isaacbw> pacman -Syu bitches
00:34 < redshadowhero> Nooooooooooooo
00:34 < CoverSlide> pacman is awesome
00:34 < CoverSlide> wakka wakka wakka
00:34 < redshadowhero> pacman just isn't for me.
00:34 < isaacbw> AUR 
00:34 < isaacbw> I actually really like pacman
00:34 <@Nexxy> Deb 6, Arch 2012, CentOS, Fedora 17, Gentoo, OpenSUSE, Slackware
00:34 <@Nexxy> and a billion Ubuntu flavors
00:34 < isaacbw> I also like when -Syu occasionally fails and you have to delete system files as described on the archlinux blog
00:34 < redshadowhero> apt is just in my mind and my heart.
00:34 <@Nexxy> plus all the outdated images
00:34 < isaacbw> I feel like a linux pro
00:35 < isaacbw> sudo rm -r /usr/lib64
00:36 < isaacbw> there was a pretty big change in system file structure at the end of 2012 that took about half an hour of manual bullshit to get through
00:36 < CoverSlide> pacman is just something new to learn. after you learn it, it's tons better than apt
00:36 < CoverSlide> well yeah the whole /usr/lib -> /lib thing
00:36 < isaacbw> yea, that's the one
00:36 < isaacbw> I hadn't updated for over a month
00:36 < isaacbw> it was a nightmare
00:36 < redshadowhero> I still prefer apt. Probably because apt is bounds better than yum, which is what we use exclusively at work.
00:37 < isaacbw> the arch repos have everything, and AUR has everything else
00:38 < redshadowhero> I think it's the whole concept of 'debian stable' that I'm still enamored with.
00:38 < CoverSlide> yeah, they have everything updated to the latest stable, no waiting 6 months for another release
00:39 < isaacbw> that's what made me leave Ubuntu. Some packages I couldn't even install from source because the system libraries in the repos were so old
00:40 < redshadowhero> I can't work with a constantly rolling release in my system. I need some basepoint to work off of, and I have VMs for anything experimental.
00:40 <@Nexxy> busybox is the way to go guys
00:40 < inolen> nexxy: lol at that tn article
00:41 <@Nexxy> which?
00:41 < inolen> don't say gay bill
00:41 <@Nexxy> oh :(
00:41 < inolen> this is why my lady will never go and visit my family ever again haha
00:41 <@Nexxy> yeah we shouldn't talk about it here but yeah
00:41 <@Nexxy> sad
00:43 < MiracleBlue> Nexxy!  Question, I can just write a file using fs.writeFile right?
00:43 < MiracleBlue> Just making sure it's not a deprecated method or anything
00:43 < CoverSlide> talk about it in #tennesseesucks
00:43 <@Nexxy> yesh
00:43 < MiracleBlue> Sweeeeeeet
00:43 < MiracleBlue> Danke.
00:43 <@Nexxy> but you will need a callback if you want to know when it's done
00:43 < MiracleBlue> Alright cool.
00:43 < MiracleBlue> So it's async?
00:43 < MiracleBlue> Not sync?
00:44 < CoverSlide> yes
00:44 <@Nexxy> yeah
00:44 <@Nexxy> there's also fs.writeFileSync
00:44 < MiracleBlue> bugger.  Alright, that's cool.
00:44 <@Nexxy> but generally speaking, if it does IO and doesn't say Sync at the end
00:44 <@Nexxy> yep
00:44 < MiracleBlue> Alright well I'm writing several files one after another in sequence.
00:44 <@Nexxy> the easiest way to manage that is probably something like async.series
00:45 < MiracleBlue> Oh boy.
00:45 <@Nexxy> https://github.com/caolan/async#series
00:45 < MiracleBlue> So would you suggest I use the series over doing it with the sync method?
00:45 < MiracleBlue> Or can I do either way?
00:45 <@Nexxy> if you don't care about blocking
00:45 <@Nexxy> just use Sync
00:46 < isaacbw> what's your use case MiracleBlue 
00:46 < MiracleBlue> Not particularly concerned about blocking in this instance.
00:46 <@Nexxy> yeah it doesn't sound like it
00:47 < MiracleBlue> isaacbw: Just writing a tool that unzips a file, renders some templates, adds those new rendered files to the extracted file list, compresses it again and returns it to client.
00:47 < isaacbw> do you expect a new HTTP request to come in while the previous one is doing work?
00:48 < MiracleBlue> It's entirely possible that a new http request may come in from a new client but it's an internal tool, it's going to be rather sparsely used.
00:48 < isaacbw> ah
00:48 < isaacbw> well, it might be worth doing async just to get a feel for it
00:48 < MiracleBlue> Yeah true.
00:48 < MiracleBlue> That's a good oidea.
00:48 < MiracleBlue> idea*
00:48 < MiracleBlue> I'll have a go at the async series then :)
00:48 < spion> also, to be on the safe side :)
00:49 <@Nexxy> MiracleBlue, you can just build an array of file operations and then pass it to async.series(array, doneFunction);
00:49 < redshadowhero> Okay, I got a strange one. Is there anyway to persist an object's state to db just using builtin methods, or will I just have to write my own thing?
00:49 < s5fs> Nexxy: hi
00:50 <@Nexxy> s5fs, hey-o
00:50 < s5fs> I'm getting segfaults when running 'make install' for npm
00:50 < s5fs> Error is "WARN cannot run in wd" and then make segfaults
00:50 < isaacbw> what do you mean redshadowhero. You want to write to a database?
00:50 <@Nexxy> npm should make w/ node?
00:50 <@Nexxy> I mean, it's just some JS that runs in node
00:51 < isaacbw> s5fs, make *segfaults*?
00:51 < s5fs> Additionally, the install.sh segfaults right towards the end of the script, too, so I had to attempt the compile from within the /tmp dir
00:51 < CoverSlide> redshadowhero: most likely you will have to stringify the objects, write to DB, and when you need it again, read from DB, then JSON.parse
00:51 < isaacbw> or be cool and use mongo
00:51 < redshadowhero> CoverSlide: that's what I'm thinking. I just wanted to see if there was another way.
00:51 < CoverSlide> or couch
00:51 < s5fs> isaacbw: Yes, this is an Angstrom image in a Beagleboard XM. Node compiles were segfaulting too, Nexxy worked with you maybe to get it going?
00:51 < redshadowhero> Figured I'd also be adventerous and play around with redis again.
00:51 < isaacbw> if make is segfaulting, something is wrong
00:52 <@Nexxy> REALLY?!
00:52 < isaacbw> lol
00:52 < isaacbw> like, seriously wrong
00:52 < s5fs> Nexxy: right, I'll go hunt for the npm binary from the original compile. Node itself is segfaulting when I run that little express app so I was hoping to 'npm install' and see if that cleans something up.
00:52 < isaacbw> are you sure the angstrom image is for the right hardware?
00:52 < s5fs> isaacbw: I hear you, but we've compiled a bunch of other stuffs and only node seems to be upset.
00:52 < isaacbw> man
00:52 < s5fs> isaacbw: yeah, absolutely
00:52 <@Nexxy> I was kind of wondering that myself
00:52 < CoverSlide> make runs python
00:52 < CoverSlide> maybe python's fucked up
00:52 < isaacbw> when you figure it out I really want to know what was going wrong
00:52 <@Nexxy> s5fs, it could be maybe the neon instructions
00:52 < redshadowhero> What? Segfault totally means "Super exciting grand fun always under linux today"
00:53 < s5fs> Nexxy: maybe so, but this isn't my wheelhouse. I'm just trying to call some shell scripts from node, haha!
00:53 < isaacbw> I've got a beaglbone sitting around. Maybe I should try and get node on it
00:54 < s5fs> isaacbw: bone != XM. Nexxy has great luck with the bone but we've got nothing but trouble with the XM, I guess the differences in hardware are substantial enough.
00:54 < isaacbw> what are you going to do with the XM? Something media-related?
00:55 < s5fs> isaacbw: veterinary medical device
00:55 < isaacbw> ah, cool
00:55 < CoverSlide> strace make
00:56 < isaacbw> I would like someone to make a media server that I can control from my laptop so I don't have to get up and walk to the other side of the room to adjust my stereo
00:56 <@Nexxy> isaacbw, I did that with a beagleboard XM + pianobar
00:57 <@Nexxy> just ssh into it and screen for controls
00:57 <@Nexxy> lol
00:57 < isaacbw> heh
00:57 <@Nexxy> alsamixer + CLI pandora
00:57 < isaacbw> nice
00:57 <@Nexxy> and pianobar skips ads on free accounts
00:58 < s5fs> Also, the npm install.sh file doesn't like busybox tar b/c it doesn't have a --version arg, so I had to just go on faith.
01:00 < s5fs> Nexxy: tests are failing for sure
01:00 < isaacbw> if you could combine a really simple web-based interface and a dropbox-like way of adding music to the device, I would pay $100 for it
01:01 <@Nexxy> s5fs, gist?
01:01 < s5fs> isaacbw: how much storage do you want, or should it store the data in some sort of sky-pillow?
01:01 < isaacbw> and maybe an rf transmitter so I can control my cd player as well
01:01 < spion> wow $100 is a lot, it could get you something like http://www.hardkernel.com/renewal_2011/products/prdt_info.php?g_code=G135341370451
01:01 < s5fs> Nexxy: still running. make is really upset with the busybox utils.
01:01 <@Nexxy> isaacbw, have you seen ninjablocks?
01:01 < spion> ah right, storage
01:01 < s5fs> Nexxy: hard to know if that's the root cause yet
01:01 < isaacbw> Nexxy, I've heard of them, but I haven't looked very closely
01:01 < MiracleBlue> Oh near
01:01 < isaacbw> I mean $100 for a compelte solution
01:01 < MiracleBlue> neat*
01:02 < MiracleBlue> This async series stuff looks great
01:02 < isaacbw> if I wanted to make it myself I would spend a lot less money
01:02 <@Nexxy> ya
01:02 <@Nexxy> you can use the ninjablocks platform with your own hardware
01:02 < MiracleBlue> Ninjablocks!
01:02 < isaacbw> s5fs, I don't know. I was thinking on-system storage, but if the latency wasn't too bad I guess it could be streamed
01:03 < isaacbw> I don't think my laptop is up for the task though
01:03 < isaacbw> cd quality
01:04 < spion> or perhaps mk808b - don't know about the laptop remote control part. i bet there is an app for that
01:04 < isaacbw> maybe it could have a cd reader on it as well for ripping full-quality music
01:04 < s5fs> isaacbw: sounds like you want a laptop
01:05 < isaacbw> a laptop that sits on top of my stereo system and lets me control it remotely
01:05 < isaacbw> and has lots of storage
01:06 < s5fs> isaacbw: well it is an interesting idea. i have a rasppi and an old hard drive, seems like i'm 85% of the way there ;-)
01:06 < isaacbw> do eet
01:06 < s5fs> fwiw, node runs fine on the pi, haha!
01:07 < isaacbw> how hard would it be to hook the pi up to a pci sound card
01:07 < s5fs> prob pretty hard, but you could prob find a usb sound card
01:07 < isaacbw> yea, probably
01:07 < s5fs> if you want real peripherals you want a different platform
01:07 < spion> it also runs fine on much weaker hardware (ARM 450MHz, 64MB RAM)
01:07 < isaacbw> or something intended to be embedded
01:07 < Almad> I am trying to send a dgram, but I cannot see anything in tcpdump. I am using simple example from dgram Socket.send. Sanity check (udp with nc) shows up OK. v0.8.15. Any idea what could be wrong? 
01:08 < CoverSlide> pi has its own audio
01:08 < s5fs> CoverSlide: yeah but it's mono iirc
01:08 < s5fs> or something was wrong w/it
01:08 < CoverSlide> o rly?
01:08 < isaacbw> you would want something a bit beefier for a proper sound system
01:08 < CoverSlide> what about hdmi?
01:08 < draginx> is there a way to let nginx handle the SSL or does express have to handle it *as well* ?
01:08 < isaacbw> dedicated sound hardware
01:09 < isaacbw> draginx, we were just talking about this earlier. nginx can do all the ssl itself
01:09 < draginx> isaacbw: is there a tutorial for this or..?
01:09 < draginx> do i just do normal SSL for nginx and then upstream to node?
01:09 < isaacbw> you can probably just search nginx ssl nodejs
01:10 < asdf12> whats a good document generator using doc comments?
01:10 < draginx> ah ty
01:10 < asdf12> something that'll pick up factory functions via closure 
01:11 < spion> i used node to pipe arecord via http to multiple listeners from this little thing, https://www.olimex.com/Products/OLinuXino/iMX233/iMX233-OLinuXino-MINI-WiFi/ :) although I must admit, 64MB of RAM is a bit on the low side...
01:12 < spion> startup time is ~8 seconds
01:12 < CoverSlide> wow
01:13 < spion> i mean for the node process.
01:13 < etraveler> Hey everyone. Any mongoose experts?
01:14 < s5fs> Nexxy: here's the gist with the 'make test' results, had some errors: https://gist.github.com/4678984
01:15 < FrozenFire> Trying to run an existing codebase, having never forayed into node.js before. I'm getting a dependency (module) error of some sort that I'm not familiar enough with node to resolve.
01:15 < FrozenFire> "Error: Cannot find module './daemon.v0.6.19'"
01:15 < FrozenFire> I have the daemon module installed for sure
01:15 < CoverSlide> you have it installed locally in the node_modules folder?
01:15 < isaacbw> s5fs, maybe libc or other system files are mismatched?
01:15 < CoverSlide> then all you need it require("daemon"_
01:16 < asdf12> is there a way to do this var a = require('a') || custom_a; ?
01:16 < FrozenFire> CoverSlide, I do
01:16 < s5fs> isaacbw: I suppose it's possible, but I'd expect far more failures if it was libc. Nexxy is wondering if this image is mis-representing the cpu's features or something.
01:16 < FrozenFire> I'll check the code to see if it's targeting a specific version
01:16 < isaacbw> oh
01:16 < CoverSlide> asdf12: require will throw if the module can't be found
01:16 < s5fs> isaacbw: as usual, this is supposed to be delivered by friday for client approval, haha!
01:17 < asdf12> CoverSlide: yea, thats why i asked is there a way to do that 
01:17 < asdf12> without try catch
01:17 < s5fs> Nexxy: I'll prob slap an ubuntu image on a card and see how far I can get w/node and npm, that will help rule out the image.
01:17 < isaacbw> hah, shit
01:17 < isaacbw> gl
01:18 < asdf12> also any official unofficial arm node binary package?
01:18 < FrozenFire> CoverSlide, Oddly enough, none of the require calls are specifying a version
01:18 < isaacbw> you could also try archlinux arm
01:18 < MiracleBlue> So, with async.series, I pass an array of anonymous functions, and within those anonymous functions, I do my fs.writeFile calls, is that correct?
01:18 < s5fs> isaacbw: yeah, that would actually work better since i've got a bunch of systemd stuff too.
01:19 < MiracleBlue> Do I need to run any special method to indicate to the series that the next function in the series need be called?
01:19 < MiracleBlue> Oh never mind sorry
01:19 < MiracleBlue> I found the answer, a callback is passed as the first argument of each anonymous function that must be called on finish.
01:20 < asdf12> i thought arch linux doesn't have binary package system ??
01:20 < asdf12> thought it was like gentoo, you build everything
01:20 < CoverSlide> you thought wrong
01:20 < CoverSlide> nope
01:20 < isaacbw> AUR is like gentoo
01:20 < isaacbw> maybe
01:20 < isaacbw> I don't know anything about gentoo. I'm just saying stuff
01:21 < isaacbw> most of what I say is retarded, misleading, or just flat out wrong
01:21 < isaacbw> but occasionally I manage to piece something intelligent together
01:21 < s5fs> isaacbw: in that order?
01:22 < s5fs> CoverSlide: funny seeing you in arch, glad to hear there are still folks running linux in the node community ;-)
01:22 < asdf12> isaacs: what are your thoughts on the wording of node's api? that is, it takes a unix-like wording/style rather than a web / browser style? well what i mean is process vs worker api. shouldn't node try to follow the browser api ? that way less and less modification need to be made for js code to run via browser/node ?
01:23 < echo> s5fs: I don't allow myself to believe there's any other available platforms. Linux is superior :3
01:24 < Zak> Yeah, we all know that the hammer is the only tool you need in the toolbox.
01:24 < s5fs> echo: haha! I'm not that gung-ho, I just roll with the punches. sure, it's imperfect but it's still free and that means a lot to me. esp since industry appears to be cracking down on technical folks.
01:24 < s5fs> Zak: nah, but it doesn't need to be a gilded hammer
01:24 < asdf12> isaacs: personally i'd like to see that, that is using the worker api in node and browser without doing a bunch of runtime testing as an example, i know it's impossible to rewrite the current api, but aliases??
01:26 < CoverSlide> you can put aliases in userland
01:26 < CoverSlide> you don't require('child_process') either
01:26 < CoverSlide> in the browser
01:27 < MiracleBlue> OKay
01:27 < asdf12> yes but that requires a lot of runtime testing to figure out if its node or browser, and then having to remap things
01:27 < CoverSlide> there's also the webworker-threads package which does in-process threads instead of child processes, as well as uses the webworker api
01:27 < MiracleBlue> Now for the moment of truth
01:27 < MiracleBlue> Will my app break, or will it triumph
01:27 < s5fs> MiracleBlue: i believe in triumphant breakage
01:27 < s5fs> (there is another road!)
01:27 < MiracleBlue> Triumphant breakage!
01:27 < MiracleBlue> I've been there.
01:27 < MiracleBlue> Let's see how much breakage we can cause
01:28 < asdf12> im just wondering what is the node core teams thoughts on trying to converge with the browser api, that way even if you do set up aliases the result of calling that api won't be the same, or same arguments etc.
01:28 < s5fs> Ride for ruin and the world's ending!
01:29 < CoverSlide> it would be trivial to mimic the worker api in userland
01:29 < CoverSlide> but the fact that webworkers don't have stdin / stdio / stderr means that child_processes can't really share the same api
01:30 < CoverSlide> and once again, when do you do require() in the browser except with browserify, unless you propose to make everything global
01:31 < asdf12> yea, well it's more just about the core teams philosophy than anything, whether they are doing their own thing or trying to converge browser and node
01:31 < CoverSlide> where it makes sense, yes. for example, the ArrayBuffer / DataView apis being added
01:32 < CoverSlide> but child_processes are very different from web workers. in that case it doesn't make sense
01:32 < isaacbw> s5fs, sometimes all three at once
01:32 < spion> also setImmediate it seems..
01:33 < asdf12> CoverSlide: you're part of the core team?
01:33 < CoverSlide> no I'm not
01:34 < CoverSlide> just like it doesn't make sense to replace http.request with XmlHTTPRequest
01:34 < MiracleBlue> IT WORKS
01:34 < MiracleBlue> TRIUMPHANT I AM
01:34 < CoverSlide> that's something that can be done in userland
01:35 < CoverSlide> but shouldn't be in node core
01:35 < isaacbw> the king and queen of userland need your help, hero
01:35 < MiracleBlue> I WILL ANSWER THEIR CALL
01:35 < MiracleBlue> *ahem*
01:35 < MiracleBlue> I think maybe I'm a bit to excited over my triumph.
01:36 < isaacbw> http://consumerist.com/2013/01/30/time-warner-boosts-my-speed-cuts-my-bill-i-just-happen-to-live-near-google-fiber/
01:36 < isaacbw> "Google Fiber, the gigabit broadband project that’s threatening to make current broadband providers almost care about competing"
01:36 < MiracleBlue> Good.
01:36 < MiracleBlue> Here in Australia, our government is rolling out 100mbps fibre.  I'm excited.
01:36 < asdf12> yea but you're in australia 
01:36 < MiracleBlue> It's technically capable of gigabit speeds but we will see.
01:36 < asdf12> :P
01:36 < isaacbw> my internet slows to a crawl every afternoon
01:37 < MiracleBlue> Yeah, where we have freedom and healthcare and cool stuff :) except for internet.  But we're working on that.
01:37 < isaacbw> you also have big scary spiders
01:37 < isaacbw> and sun
01:37 < spion> here, our telco is rolling out 50mbps... slowly. very slowly.
01:37 < isaacbw> no thak you
01:37 < isaacbw> thank
01:37 < asdf12> it still requores what? like 400ms just to cross the ocean to connect to anything meaningful :P
01:37 < isaacbw> haha
01:37 < MiracleBlue> Don't worry, after your first few bites, you develop your own immunity to it.  Might still kill you those first few times though.
01:37 < MiracleBlue> Also, drop bears,
01:38 < MiracleBlue> Just make sure you don't carry a camera around underneath trees, the glint of the sun attracts them.
01:38 < isaacbw> drop bares? wtf
01:38 < MiracleBlue> also, sun is not so bad.  Bushfire is bad.
01:38 < isaacbw> *bears
01:38 < isaacbw> sun is bad if it melts your skin
01:38 < MiracleBlue> But that's ok, the bush fires are put out when we get flooded.
01:38 < isaacbw> oh, and winter in summer. You guys are crazy
01:39 < MiracleBlue> Christmas in summer bro :)
01:39 < s5fs> MiracleBlue: I always get the impression that australia is backwards w/respect to IP and isp stuffs, is that not the case?
01:39 < MiracleBlue> Don't know what you're missing
01:39 < MiracleBlue> s5fs: Pretty close.
01:39 < MiracleBlue> But we're working on it.
01:39 < isaacbw> somehow game publishers manage to sell video games at really inflated prices too, right? Even downloads
01:39 < s5fs> MiracleBlue: well, coming from the US i'd probably feel right at home them. how you doing for the morbidly obese, i'd miss 'em i think.
01:39 < CoverSlide> carnivorous koalas?
01:39 < MiracleBlue> I think we're the fattest country on earth here.
01:39 < MiracleBlue> I'm not sure.
01:40 < isaacbw> when I go to kentucky I feel like I've entered the world of wall-e
01:40 < MiracleBlue> But we also have the most beautiful people.
01:40 < MiracleBlue> It's kind of a mixture of everything.
01:40 < MiracleBlue> Hahaha
01:41 < MiracleBlue> Check this out, I've got this guy helping me code: https://fbcdn-sphotos-d-a.akamaihd.net/hphotos-ak-prn1/775669_10151323972894823_1776683846_o.jpg
01:41 < MiracleBlue> But he just keeps chewing on my fingers
01:41 < isaacbw> cats sort of weird me out
01:41 < MiracleBlue> :(
01:41 < isaacbw> we neuter them so they stay nice to us for the rest of their lives
01:41 < asdf12> yea its the cats the fault
01:42 < MiracleBlue> Heheh
01:42 < isaacbw> I like them, they just kind of weird me out
01:42 < MiracleBlue> this kitty is part bombay, they're known as "velcro cats"
01:42 < s5fs> isaacbw: they certainly have unique personalities
01:42 < MiracleBlue> They stick by you, quite like a dog does
01:42 < MiracleBlue> And he's very much dog like in the way he behaves, not independent at all.
01:42 < s5fs> i want a kitty but i don't want the committment
01:42 < isaacbw> also, the cat I had growing up was fat and lazy and while she liked petting, she would just stand still and make you do all the work
01:43 < MiracleBlue> isaacbw: This one will go towards your hand wherever it is
01:43 < s5fs> isaacbw: cats train people, rarely the other way 'round
01:43 < MiracleBlue> He'll actively seek out pats.
01:43 < isaacbw> heh
01:43 < asdf12> i bought a chromebook, its kind of turning out to be a decent developer machine for the price
01:43 < MiracleBlue> he's a pat seeking kitty missile.
01:43 < s5fs> I did attend a 'cat show and cat agility competition' though, it was fantastic.
01:43 < s5fs> asdf12: which one?
01:43 < asdf12> needs more cloud ide's though
01:43 < asdf12> the samsung arm one
01:43 < MiracleBlue> asdf12: Everything needs more cloud ides
01:44 < MiracleBlue> Just like all trance needs more sidechain.
01:44 < isaacbw> I want one of these super-cats: http://www.allerca.com/
01:44 < MiracleBlue> MORE SIDECHAIN COMPRESSION!
01:44 < isaacbw> http://www.youtube.com/watch?feature=player_embedded&v=GQI68kb9e7U
01:44 < asdf12> right now i'm just booting into ubuntu on it and working from there
01:44 < isaacbw> actually I don't. They *really* weird me out
01:44 < asdf12> but i actually do like chromeos... if only i could do work on it... heh
01:44 < isaacbw> cloud9 brah
01:45 < MiracleBlue> I've tried cloud9
01:45 < MiracleBlue> It's… it's alright, actually
01:45 < MiracleBlue> For what it is.
01:45 < asdf12> ^ needs more competition
01:45 < isaacbw> I'm happy with my emacs, but cloud9 is pretty slick
01:45 < MiracleBlue> It's a long way off replacing my IDE.
01:45 < MiracleBlue> But yeah, it's sick.
01:46 < MiracleBlue> Alright dudes
01:46 < MiracleBlue> It's lunch time.
01:46 < asdf12> no its not
01:47 < isaacbw> crazy aussies
01:47 < isaacbw> eating lunch at dinner time
01:47 < asdf12> so whats a good way to generate some buzz for my open source project
01:47 < spion> an editor framework. maybe something combining codemirror with keybinding and file api inside node-webkit and allowing you to add stuff to it... liberally.
01:47 < azylman> Make it a project worth using
01:47  * spion dreams
01:48 < asdf12> yea but theres no way people can discover it if you just put it on github
01:48 < asdf12> spion: whats node-webkit?
01:49 < asdf12> spion: but i was thinking of that, take codemirror, put some git functionality and bam 
01:49 < spion> asdf12, https://github.com/rogerwang/node-webkit
01:49 < spion> node and webkit combined.
01:49 < isaacbw> guys, my routing framework is literally the coolest thing in the universe
01:49 < spion> :)
01:49 < isaacbw> literally
01:49 < isaacbw> you have no idea how much of a nergasm I'm having right now
01:49 < spion> isaacbw, sub-zero cool?
01:49 < isaacbw> nerdsterbation
01:50 < isaacbw> cooler
01:50 < asdf12> what is it?
01:50 < isaacbw> you build routes with nested objects, and properties can either be subroutes or $get/$post/$put/$del, etc functions
01:51 < asdf12> link
01:51 < isaacbw> it's not on the interwebs
01:51 < asdf12> then its not so good
01:51 < isaacbw> heh
01:52 < s5fs> asdf12: no dude, you can only get there using gopher, it's that underground
01:52 < spion> sounds mongoish
01:52 < isaacbw> the actual code is 86 lines. I might release something after a bit of battle-hardening
01:53 < spion> JSON is pretty nice for DSLs
01:53 < asdf12> yea but does the nesting get bad?
01:53 < isaacbw> it's really barebones right now and since it effectively means you can't have routes that start with $, it might not be universally useful
01:53 < asdf12> like curly brace overload?
01:53 < isaacbw> I've been breaking it up into several files
01:53 < isaacbw> so like, var routes = { 'mail': require('./routes/mail.js') }
01:54 < isaacbw> ooh, and a $pre property so you can have checks before branches, like making sure a resource exists or the user has access to it
01:54 < asdf12> how do you do /mail/inbox/1 ?
01:54 < asdf12> but also make /mail and /mail/inbox work ?
01:54 < asdf12> oh wait i get it
01:55 < spion> probably $get leafs
01:55 < isaacbw> http://hastebin.com/ruwenuqipe.js
01:56 < isaacbw> I can't tell if my hands are shaking because of my excitement, caffeine overdose, or medication withdrawal
01:56 < asdf12> { mail: { $get.. $post... $put... $del... inbox: { $get, $post, $put, $del, '1': { .... }  }
01:56 < asdf12> right?
01:56 < asdf12> isaacbw: actually thats cool
01:56 < isaacbw> and you can do req.params.id to get to the number
01:57 < isaacbw> thanks!
01:57 < isaacbw> I will want to add better error handling and that kind of thing before sharing it
01:57 <@Nexxy> win 15
01:58 <@Nexxy> lol damnit
01:58 < isaacbw> what
01:58 <@Nexxy> typo'd /win 15
01:58 < isaacbw> does does /win do
01:58 <@Nexxy> change the current window
01:58 < isaacbw> I want to win something
01:58 <@Nexxy> download irssi
01:58 <@Nexxy> instant win
01:59 < spion> rofl
01:59 < zomg> Irssi has disco mode too
01:59 < zomg> /disco on
01:59 < spion> nnect
01:59 < niix_> what is the term called in JavaScript where the order in which things are in your file do not matter?
02:00 < zomg> niix_: hoisting?
02:00 < niix_> zomg: thanks
02:00 < isaacbw> maybe I could allow $get to be the actual route name with whitespace, like ' $get'
02:01 < isaacbw> does $ get url encoded?
02:01 < niix_> zomg: which basically means regardless that function declarations and and variable declar
02:01 < niix_> are always moved to the top of their containing scope?
02:02 < isaacbw> hastebin *is* nice
02:02 < niix_> isaacbw: it's a bit dark :P
02:02 < Aria> isaacbw: encoded by what?
02:02 < isaacbw> I use a dark color theme in emacs, so I'm used to it
02:02 < isaacbw> Aria, url encoding
02:02 < othiym23> is there any kind of directory of node *applications* (i.e. not modules, but actual apps)?
02:03 < isaacbw> percent-encodin
02:03 < isaacbw> whatever it's called
02:03 < Aria> isaacbw: All characters can be urlencoded.
02:03 < othiym23> I'm trying to help my QA team come up with ways to test my work, and I don't really have time to write them sample apps myself
02:03 < isaacbw> but is $ forced to be encoded
02:03 < isaacbw> i.e. it's invalid http
02:03 < othiym23> I'm especially interested in apps built using Restify and MySQL
02:03  * Aria goes to ask the HTTP RFC.
02:03 < isaacbw> I have no idea what I'm talking about, if that isn't apparent
02:04 < isaacbw> oh, it is
02:04 < isaacbw> http://en.wikipedia.org/wiki/Percent-encoding
02:04 < isaacbw> "Percent-encoding reserved characters"
02:04 < isaacbw> Aria, no RFC needed!
02:04 < Aria> Heh. According to whom ;-)
02:05 < isaacbw> oh, I forgot to mention that my router is connect middleware
02:05 < isaacbw> http://hastebin.com/wamexopeve.coffee
02:06 < isaacbw> http://hastebin.com/wamexopeve.js
02:08 < Aria> $ is allowed. It's reserved (Special in some parts of the URL)
02:08 < Aria> But in path components and in non-heirarchy URLs, able to be used.
02:08 < isaacbw> oh, okay
02:08 < isaacbw> thanks
02:08 < Aria> Hehe. Hence my reading the RFC ;-) http://tools.ietf.org/html/rfc2396#section-3 -- 3.3 specifically.
02:08 < isaacbw> yay!
02:08 < Aria> (that's the RFC mentioned by HTTP's, RFC 2616.)
02:10 < Aria> And the updating RFCs past that also allow it, though more verbosely.
02:12 < MiracleBlue> Holy crap
02:12 < MiracleBlue> I got home from lunch, and my cat managed to get his claw stuck at the top of the wardrobe somehow
02:12 < MiracleBlue> Made a hell of a noise
02:12 < isaacbw> heh
02:13 < isaacbw> claws that can dig into wood...
02:13 < MiracleBlue> Nah not even
02:13 < MiracleBlue> It was stuck in the thing that latches the door closed
02:13 < isaacbw> poor thing lol
02:13 < MiracleBlue> Yeah man
02:13 < MiracleBlue> thank goodness I decided to work from home today
02:18 < yarco> hi what is EXPRESS_COV ?
02:18 < yarco> what is that version used for?
02:19 < yarco> module.exports = process.env.EXPRESS_COV ? require('./lib-cov/express') : require('./lib/express');   ??
02:21 < asdf12> i disconnected
02:21 < asdf12> then i went to go eat dinner
02:21 < asdf12> but now im back
02:22 < isaacbw> I was going to say something to you
02:22 < isaacbw> but I've forgotten what it was
02:23 < asdf12> well i meant to say make a placeholder repo so i can just see when you put it up instead of asking you next time im here
02:23 < isaacbw> oh
02:23 < isaacbw> I don't have a name
02:24 < isaacbw> names are important
02:24 < asdf12> i'd like to contribute too to it if your code isn't fugly
02:25 < isaacbw> my code is cleaner than a
02:25 < isaacbw> clean 
02:26 < isaacbw> floor
02:26 < asdf12> name it... curly router
02:26 < isaacbw> ooh, that could work
02:26 < isaacbw> you can just have my github account for now: https://github.com/isaacbwagner
02:35 < rump> shouldn't node.js crypto stuff be async?
02:36 <@mbalho> rump: in 0.10 it is
02:37 < rump> oh
02:37 < isaacbw> 010
02:37 < isaacbw> 0.10
02:38 < isaacbw> jfadsjhfadsjfadskjfdskjlkjlldfslkjfzd
02:46 < asdf12> you know what would be cool
02:46 < asdf12> porting node to go
02:46 < asdf12> someone already wrote v8 bindings for go
02:47 < isaacbw> what would be the point
02:47 < asdf12> you can use go
02:47 < isaacbw> what do you mean. You can't use C++ in node
02:48 < asdf12> and be multithreaded
02:48 < Lorentz> so it'd be called
02:48 < Lorentz> nogo
02:49 < isaacbw> gode
02:50 < asdf12> yea but imagine implementing an api in javascript for go routines and channels
02:54 < isaacbw> how do you break out of an async.waterfall
02:54 < isaacbw> callback(new Error())?
02:54 < asdf12> why
02:54 < asdf12> is async
02:54 < isaacbw> or can the first parameter be anything
02:54 < isaacbw> asdf12, what
02:54 < asdf12> a dependency
02:54 < isaacbw> yea
02:54 < isaacbw> it's a module
02:55 < asdf12> why
02:55 < isaacbw> why what
02:55 < asdf12> why is it a dependency for your router
02:55 < isaacbw> it's not, it's for the application that my router is in
02:55 < asdf12> oh ok
02:55 < isaacbw> heh
03:03 < isaacbw> any idea why my child processes are staying open when the parent is killed? no disconnect()
03:05 < isaacbw> whatever, I'll just kill the manually
03:07 < isaacbw> oh, it might be a supervisor thing
03:08 < isaacbw> I'm starting a supervisor instance with child.spawn
03:08 < s3shs> Anybody know how to install the 0.9 branch of mysql?  The 2.x branch is crashing in unusual ways.
03:08 < s3shs> I trued 'npm install mysql 0.9.6', but that didn't work.
03:08 < s3shs> (tried)
03:09 < isaacbw> npm install mysql@0.9.6
03:10 < isaacbw> or make a package.json
03:10 < s3shs> Oh, is that what that was in the help?  :-)  Thank you.
03:10 < isaacbw> yup, np
03:10 < s3shs> (You've been very helpful today, btw.  Thank you.)
03:10 < isaacbw> it's a good way to avoid working
03:11 < cming_> hi, guys, nodes job wanted, part-time or fulltime
03:11 < isaacbw> most people here are developers themselves, so it's unlikely you'll find an employer
03:11 < isaacbw> there a lots of websites though
03:12 < s3shs> I executed a simple delete from with 2.0 and it crashed in weird ways.  Commits are very recent so I have a feeling it's in flux ATM.row
03:12 < cming_> :), just want be lucky
03:12 < cloudbender> ok who needs a slap
03:13 < redshadowhero> oh my lord.
03:13 < redshadowhero> Object.defineProperty is so COOL.
03:14 < cloudbender> does solve a few mysterys
03:14 < isaacbw> woah
03:15 < whit537> People of Node!
03:15 < whit537> I come in peace!
03:15 < isaacbw> grab the spears
03:16 < s3shs> npm update gets confused if there's a Mac ,DS_Store file in the node_modules directory.
03:16  * whit537 extends right hand of fellowship.
03:16 < cloudbender> charge the HeRF guns
03:16 < jtomasrl> is a result is not found, should i return an empty object or an error for the client to handle
03:16 < asdf12> depends on your api
03:17 < whit537> I like you.
03:17 < whit537> I went to a Node.js meetup tonight and it was really nice.
03:17 < asdf12> WHY WASNT I INVITED
03:17 < cloudbender> Did they have snacks ?
03:17 < whit537> You were? :)
03:17 < s3shs> whit537 what town?
03:17 < whit537> Beer, even!
03:17 < whit537> Pittsburgh.
03:18 < whit537> The snacks were minimal.
03:18 < isaacbw> I only go to meetups for the free beer
03:18 < redshadowhero> I wish there was one in Huntsville.
03:18 < whit537> I ported a Python web framework to Node on the spot, to great delight. :)
03:18 < cloudbender> I miss the 90's, they had good snacks in the 90's
03:18 < s3shs> Ahh, an update fixed the 2.0 problem I was having.  Commit was two hours ago.  I updated about 3 hours ago.  *sigh*
03:18 < isaacbw> 90s yoga pants
03:18 < isaacbw> those were the days
03:18 < cloudbender> whit537 that is impressive actually
03:18 < whit537> cloudbender: Before 9/11 changed everything.
03:18 < whit537> Yeah! Node made it easy. :)
03:19 < isaacbw> god, I feel the need to clarify that I'm not serious
03:19 < whit537> isaacs: No, man. 90s yoga pants ftw.
03:19 < isaacbw> which framework did you port?
03:19  * cloudbender thinks he's serious
03:19 < whit537> http://aspen.io/
03:19 < whit537> Here's the port: https://github.com/whit537/aspen-js/blob/master/aspen.js
03:19 < whit537> (Proof of concept, mind you. < 40 lines)
03:19 < isaacbw> there are too many words on that page
03:20 < isaacbw> I'm not smart enough to read all that
03:20 < whit537> isaacbw: Thank you for the feedback. :)
03:20 < asdf12> thats cool
03:20 < asdf12> your files are your routes
03:20 < asdf12> or something, thats the gist
03:20 < asdf12> i think
03:20 < isaacbw> was this your first time with node?
03:21 < whit537> Yes-ish.
03:21 < isaacbw> are you a python to js convert now?
03:21 < whit537> I actually had 0.4.9 installed.
03:21 < whit537> Naw, I'm poly. ;)
03:21 < asdf12> ew
03:21 < isaacbw> I'm looking through your github and it looks like porting aspen is sort of a 'first project' for you
03:21 < asdf12> why readfilesync
03:22 < whit537> isaacbw: https://github.com/zetaweb/aspen/issues/154
03:22 < whit537> isaacbw: Yup.
03:22 < isaacbw> haha, thanks
03:22 < whit537> ;)
03:22 < whit537> I think it's a good fit, actually.
03:22 < isaacbw> there's only room for one scripting language in my life
03:22 < whit537> I like the way the global context in js fits with aspen.
03:22 < isaacbw> and one systems language
03:23 < MiracleBlue> Hey quick question
03:23 < isaacbw> I'm trying to make room for a functional language, but it's difficult
03:23 < whit537> isaacbw: Are they the same or different? ;)
03:23 < asdf12> i dont understand that anonymous function
03:23 < MiracleBlue> How might one copy a set of files/directories using FS?
03:23 < isaacbw> whit537, C and Javascript
03:23 < whit537> Word.
03:23 < MiracleBlue> Had a bit of a skim, couldn't really see what I might use to do it.
03:23 < isaacbw> I always get grumpy with C++, and I can't get into tabs in python
03:23 < whit537> asdf12: It scopes the second eval.
03:23 < whit537> tabs?
03:23 < isaacbw> whitespace
03:23 < whit537> Indents?
03:23 < whit537> Right.
03:23 < isaacbw> yea
03:23  * whit537 shrugs
03:24 < isaacbw> curly braces are so pretty
03:24 < whit537> :P
03:24 <@Nexxy> MiracleBlue, you can just use child_process.exec and call system commands like "cp -r" or w/e
03:24 < asdf12> i dont understand why
03:24 < MiracleBlue> Ah right.
03:24 < MiracleBlue> Neat.
03:24 < whit537> I actually wrote a whole Socket.IO server implementation for the Python version of Aspen.
03:24 < whit537> It's not production-quality.
03:24 < asdf12> i dont understand why out is a global either
03:25 < whit537> I'm thinking it'd be much easier to finish Aspen.js than socket simplates in Aspen.py.
03:26 < MiracleBlue> Nexxy: For copying multiple different files and directories, I should make each of those happen in an async series?
03:26 < redshadowhero> isaacbw: for C and javascript, you deserve a high five.
03:26 < isaacbw> woo
03:26 < redshadowhero> at least 2.
03:26 < MiracleBlue> <3 curly braces
03:26 < redshadowhero> but no more than 8.
03:26 < MiracleBlue> {curly braces}
03:27 < isaacbw> 8 is plenty
03:27 < isaacbw> {{ curly braces }}
03:27 < whit537> asdf12: Better? https://github.com/whit537/aspen-js/blob/master/aspen.js
03:27 < isaacbw> double curly braces are even better than single curly braces
03:27 < redshadowhero> http://images2.wikia.nocookie.net/__cb20110320223110/ideas/images/6/6f/Cave-Story--Curly-Brace.png
03:27 < asdf12> whit537: no
03:28 < isaacbw> I played cave story before it was cool
03:28 < asdf12> that code confuses me
03:28 < whit537> asdf12: What's wrong?
03:28 < isaacbw> I'm a video game hipster yo
03:28 < whit537> Heh. :)
03:28 < whit537> Okay, what am I doing wrong?
03:28 < redshadowhero> isaacbw: Me too. I played it waaay before the ports from Nicalis.
03:28 < isaacbw> it's still one of my favorite games of all time
03:29 < redshadowhero> Same.
03:29 < isaacbw> the final boss was so hard
03:29 < redshadowhero> I need to play it again sometime.
03:29 < MiracleBlue> Oooh I found fs-extra
03:29 < MiracleBlue> This will help
03:29 < redshadowhero> Which final boss? Ballos or the Doctor/Core mix?
03:29 < asdf12> i still dont understand the point of that anonymous function
03:29 < isaacbw> doctor/core
03:29 < asdf12> what are you scoping
03:29 < isaacbw> I actually only played through once. I'm a bad fan
03:29 < whit537> asdf12: It might be an error.
03:30 < isaacbw> doctor
03:30 < redshadowhero> Get yourself to hell.
03:30 < redshadowhero> Ballos can be a lot worse depending on how you look at it.
03:30 < isaacbw> alright, I will next time
03:30 < isaacbw> I'm kind of worried that if I replay it I won't like it as much
03:30 < asdf12> whit537: oh well, also you should use the async file read
03:30 < whit537> asdf12: Here's an example page: https://github.com/whit537/aspen-js/blob/master/foo.html
03:30 < whit537> k
03:31 < isaacbw> spelunky is another game I played a whole lot
03:31 < whit537> asdf12: The idea is that the concept from the second page is used for the template page.
03:31 < asdf12> whit537: oh i see
03:31 < whit537> First page runs once.
03:31 < whit537> Second page runs every request.
03:31 < asdf12> i get it now
03:31 < whit537> Third page is template.
03:31 < whit537> So did I do it right? :)
03:32 < asdf12> thats a crazy framework
03:32 < whit537> Thanks. :D
03:34 < redshadowhero> Never played spelunky.
03:36 < redshadowhero> Hey, I have a question. When I use Object.defineProperty on some arbitrary object (let's call it someobj), does 'this' refer to someobj, or Object?
03:36 < redshadowhero> er.
03:36 < redshadowhero> in, say, the setter function.
03:37 < isaacbw> >> delete null
03:37 < purr> isaacbw: (boolean) true
03:37 < isaacbw> >> var a = {}; delete a.hi
03:37 < purr> isaacbw: (boolean) true
03:39 < asdf12> is that your bot?
03:40 < asdf12> what if you do a infinite loop that makes it spam this chat?
03:41 < isaacbw> it won't
03:41 < isaacbw> and it's not mine
03:41 < isaacbw> it doesn't return anything until it's done
03:41 < redshadowhero> >> for(;;);
03:41 < purr> redshadowhero: Timeout Error: Execution time exceeded 2 seconds
03:41 < isaacbw> heh
03:42 < whit537> Pssst ... asdf12: Don't tell isaacbw, but I added more words to http://aspen.io/. ;) 
03:42 < redshadowhero> >> setTimeout( function() { console.log('hello'); }, 200 );
03:42 < purr> redshadowhero: ReferenceError: setTimeout is not defined
03:42 < isaacbw> haha
03:42 < isaacbw> what
03:42 < isaacbw> I guess it would clog up the bot
03:42 < redshadowhero> Well, now I know what it's doing. It's using the same sandbox that I'm using in my bot.
03:42 < redshadowhero> for some reason, that doesn't have setTimeout.
03:43 < mdedetrich> bug, why the hell is this hapenning
03:43 < redshadowhero> >> var i = 100; var rstr = ''; while( i-->0 ) rstr += 'Hello! '; rstr;
03:43 < purr> redshadowhero: (string) 'Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello!…
03:44 < mdedetrich> im using the node time library, and when I change the timezone, its putting it back by a year
03:44 < isaacbw> i-->
03:44 < isaacbw> 0
03:44 < redshadowhero> what?
03:44 < redshadowhero> I love that convention.
03:44 < isaacbw> it's kind of neat looking
03:44 < redshadowhero> It's like artificial syntactic sugar
03:45 < isaacbw> yea
03:45 < asdf12> whit537: lol now i don't trust any of the other testimonials
03:45 < whit537> :)
03:45 < mdedetrich> hoenstly the date situation is completely screwed in javascript
03:45 < whit537> https://github.com/whit537/aspen-js/blob/master/aspen.js
03:46 < whit537> asdf12: readFile ^^^
03:46 < redshadowhero> mdedetrich: what do you mean?
03:46 < redshadowhero> Oh wait.
03:46 < mdedetrich> redshadowhero: timezone handling is completely retarded
03:46 < redshadowhero> Just got your other message.
03:46 < whit537> So what does NodeConf cost?
03:47 < whit537> Firstborn?
03:47 <@Nexxy> https://tito.io/nodeconf/nodeconf-2013
03:47 < asdf12> wait
03:48 < asdf12> you provide telephone support for aspen? lol
03:48 < whit537> Nexxy: Am I missing cost info there?
03:48 < whit537> I don't see it.
03:48 < whit537> asdf12: Hell yeah. Wanna try it? :)
03:48  * whit537 reaches for his cell
03:48 < mdedetrich> redshadowhero: when I try to create a date for right now (which is 31st of january, 2:45 pm) in australia timezone
03:48 < asdf12> no , you didn't even invite me to that node meetup
03:48 < mdedetrich> its putting it on thursday january 3rd
03:49 < mdedetrich> its not making any sense at all
03:49 < azylman> "Internet assholes are serious assholes" - isaacs
03:49 <@Nexxy> whit537, there were two types of tickets when they were available
03:49 < MiracleBlue> File handling is a bitch to code for :(
03:49 < MiracleBlue> Ow.
03:49 < azylman> I loled
03:49 < whit537> Nexxy: How much did they cost?
03:49 < whit537> And are you going? :)
03:49 <@Nexxy> I don't remember
03:49 <@Nexxy> yes
03:50 < whit537> Cool.
03:50 < whit537> So you bought a ticket but don't remember for how much?
03:50 < whit537> That's awesome. :)
03:50 < whit537> More or less than US$1000?
03:50 < isaacbw> oy
03:50 <@Nexxy> I think there might be another round of ticket sales?
03:50 <@Nexxy> I'm not sure
03:51 < whit537> lol
03:51  * redshadowhero shrugs
03:51 < redshadowhero> Sorry mdedetrich, not something I'm really familiar with.
03:51 < asdf12> it was over 1,000
03:51 < whit537> Nexxy: You must be very wealthy. :)
03:51 < asdf12> it was a few hundred
03:51 <@Nexxy> whit537, in spirit
03:51 < asdf12> wasn't*
03:51 < whit537> Roger.
03:51 < whit537> I might try to go.
03:52 < asdf12> i want to say 400-500~~ but i dont remember
03:52 < whit537> Any idea how many people will be there?
03:52 < asdf12> that includes the room
03:52 < whit537> Cool.
03:52 < whit537> asdf12: You're right to distrust those testimonials.
03:52 < whit537> They are all about equivalent to yours. ;)
03:52 < asdf12> yes considering how you like to paraphrase
03:53 < etraveler> is anyone here familiar with using refs in mongoose?
03:53 < olgatcpip> hi
03:53 < whit537> Wuh?
03:53 < whit537> How did I paraphrase?
03:53 < whit537> I can point to three or four of those people that have actively worked on an Aspen site.
03:54 < asdf12> i meant for my quote, i'm just messing anyway
03:55 < asdf12> "your framework can go is a great big ol monkeys butt" turns into "your framework... is... great"
03:55 < asdf12> :P
03:56 < asdf12> well no can go
03:56 < mdedetrich> can anyone explain why this is happening regarding timezones? https://gist.github.com/97a2074dfadaec9d64f2
03:56 < mdedetrich> the second output is putting the time back to Thursday january the 3rd
03:56 < whit537> Well, the two things you constructively criticized, I fixed. ;)
03:57 < redshadowhero> Is there any way to set a trigger on a property of an object either as it's being deleted or GC'd?
03:57 < Aria> No.
03:57 < Franz__> hi
03:58 < redshadowhero> Oh well.
03:58 < Aria> Why ?
03:59 < redshadowhero> Well, I've got the makings of a (I think) nifty persistant object that can watch properties and fire triggers on getters/setters to properties, and should be able to tie in with object creation to retrieve data from the db.
03:59 < redshadowhero> But I wanted to dump back to the db before the object is freed.
04:00 < whit537> asdf12: https://github.com/zetaweb/aspen/issues/155
04:01 < asdf12> whit537: make a new issue, 'overabuse of issues'
04:02 < whit537> :P
04:02 < whit537> Making issues for me is like buying books, which is way easier than reading books. ;)
04:04 < asdf12> haha
04:05 < whit537> Okay, I'm going to disappear until June.
04:05 < whit537> Then hopefully I will get to go to Walker Creek Ranch and hack on Aspen.js with nice People of Node.
04:06 < isaacbw> man, all the great shows of the 2000s are ending
04:06 < isaacbw> they better have good replacements :(
04:06 < whit537> Nothin' like 00s yoga pants.
04:06 < isaacbw> heh
04:06 < asdf12> what shows?
04:06 < whit537> Can I ask a question?
04:06 < echo> Nope.
04:06 < whit537> Erm. May I ask a question?
04:07  * whit537 proves echo wrong.
04:07 < isaacbw> asdf12, the office, 30 rock
04:07 < isaacbw> probably others
04:07 < asdf12> no way
04:07 < asdf12> their series finale is way over due
04:07 < isaacbw> what?
04:07 < mdedetrich> http://stackoverflow.com/questions/14618254/issue-in-node-js-timezone
04:08 < mdedetrich> anyone have any clue?
04:09 < zeen> where is the best place to find modules for nodejs? i'm looking to replace our RoR code and i need modules like activity, comments, permissions, etc..
04:09 < redshadowhero> zeen: Look at npm.
04:09 < asdf12> isaacbw and to everyone else who looked at whit537's github... really?
04:09 < redshadowhero> it has looooots of modules.
04:10 < asdf12> no one else noticed whit537 is half naked (or possibly naked) in his profile pic?
04:11 < isaacbw> we noticed
04:11 < whit537> :blush:
04:11 < whit537> I have a more tightly cropped version that I've been meaning to swap in. :)
04:11 < isaacbw> lol
04:11 < whit537> I admit I'm showing an awful lot of shoulder there.
04:11 < asdf12> yea thats the way to fix that
04:11 < asdf12> wearing a shirt while you are outside isn't the solution
04:11 < whit537> On the bright side, you can't see the yoga pants. ;)
04:12 < whit537> Hahah. :)
04:12 < whit537> It is even better that it's outside. I hadn't thought of that.
04:14 < asdf12> yea
04:14 < asdf12> either that's like the best or only picture you have of yourself and you just had to put that one up or... worse
04:14 < asdf12> you are half naked in every picture
04:23 < isaacbw> weird, node-imap is throwing this error: Error: UID not allowed now.
04:26 < isaacbw> oh
04:27 < isaacbw> weird, it stopped
04:28 < isaacbw> linode could use some more ram
04:28 < mscdex> isaacbw: some server error
04:29 < isaacbw> mscdex, mm, possibly
04:29 < isaacbw> probably
04:29 < mscdex> looks like it's mostly gmail-specific
04:29 < isaacbw> the error, or the module?
04:30 < mscdex> the error
04:30 < mscdex> it's not the module :-)
04:30 < isaacbw> oh hey, you wrote it
04:30 < isaacbw> I absolutely love it
04:31 < mscdex> :-)
04:31 < isaacbw> if I need to get an unread count of the open box, do you think it would be faster to close the box and use status, or to do a search for unseen messages?
04:33 < mscdex> isaacbw: search i'd say
04:34 < mscdex> although you should already have that information on the box object
04:34 < isaacbw> the one returned in the openBox callback?
04:35 < isaacbw> it only seems to have total and new
04:36 < TonkaTruck> What sucks about node.js?  The more I work with it the more I wonder if I'll ever use anything else.
04:36 < mscdex> oh ok, i misread what you were asking for
04:36 < Skaag> LOL
04:37 < Skaag> That's a powerful statement to see, as a person who just joined the channel after trying his luck with his first node.js app :-)
04:37 < mscdex> isaacbw: unseen != unread
04:38 < isaacbw>  yea, I'm only really interested in unread
04:38 < TonkaTruck> I used it on a project a year ago and was surprised how awesome it was.  But just now revisiting and cannot believe how much awesome node.js stuff is out there.  
04:39 < isaacbw> >> Object.getPrototypeOf({})
04:39 < purr> isaacbw: (object) {__defineGetter__: (function) __defineGetter__, __defineSetter__: (function) __defineSetter__, __lookupGetter__: (function) __lookupGetter__, __lookupSetter__: (function) __lookupSetter__, constructor: (function) Object, hasOwnProperty: (function) hasOwnProperty, isPrototypeOf: (function) isPrototypeOf, propertyIsEnumerable: (function) propertyIsEnumerable, toL…
04:39 < TonkaTruck>  "node.js is good but it sucks when you have to…" <-- can't find one
04:39 < isaacbw> is there any real issue with using __proto__ instead of getPrototypeOf?
04:39 < mp_l_a_y> Hey guys where can I get socket.io api documentation
04:39 < isaacbw> when you have to manipulate memory
04:40 < isaacbw> when you have to be really really fast
04:40 < zeen> i have a bit of a newbie question with nodejs. we currently have a RoR backend API and a BackboneJS front end. can nodeJS replace both of these? i'm looking to be able to pull the client away from the server so we can compile it onto phonegap for mobile phone usage. is there an MV* framework where I can develop in one code base but then break away client if required?
04:40 < isaacbw> mp_l_a_y, there's not much to it
04:40 < isaacbw> the 'how to use' is all you need
04:40 < zeen> i saw CompoundJS and it looked really nice
04:40 < isaacbw> >> {}.__proto__
04:40 < purr> isaacbw: SyntaxError: Unexpected token .
04:40 < isaacbw> >> ({}).__proto__
04:40 < purr> isaacbw: (object) {__defineGetter__: (function) __defineGetter__, __defineSetter__: (function) __defineSetter__, __lookupGetter__: (function) __lookupGetter__, __lookupSetter__: (function) __lookupSetter__, constructor: (function) Object, hasOwnProperty: (function) hasOwnProperty, isPrototypeOf: (function) isPrototypeOf, propertyIsEnumerable: (function) propertyIsEnumerable, toL…
04:42 < mp_l_a_y> Isaacbw how do I know what methods are available
04:43 < isaacbw> it tells you pretty much everything right there: http://socket.io/#how-to-use
04:43 < isaacbw> you can also look at the wiki
04:43 < mp_l_a_y> OK thx
04:46 < styol> zeen: Node.js can replace the backend, but I don't believe it is something that can replace the frontend. Can you elaborate on the one code base client breakaway aspect? Isn't phonegap and similar products supposed to solve that when it comes to making multiple mobile applications with one set of code?
04:47 < Skaag> anyone here done node to node communications via zmq?
04:47 < Skaag> there are several libraries, it seems, when I search in npm
04:49 < isaacbw> mscdex, oh! I see my mistake
04:49 < isaacbw> status wouldn't get me an unread count anyway
04:49 < isaacbw> wait
04:49 < isaacbw> no, it would. Ignore that :P
04:50 < styol> Is it common to create a package.json file for your application as a whole or is it commonly reserved for modules that may get distributed?
04:51 < isaacbw> it lets you easily install all dependencies so it's useful even for private code
04:52 < styol> isaacbw: I see, interesting. Once dependencies are defined within a package.json, how does one then utilize it? npm install package.json or something?
04:52 < isaacbw> just npm install in the directory with the package.json
04:53 < styol> ah, neat. that does sound useful. Thanks isaacbw. Out of curiosity, any other use cases come to mind?
04:53 < isaacbw> if you're on your own, not really
04:53 < isaacbw> you can add scripts to it
04:54 < Havvy> You can say you are the creator there, instead of in each little file. ;)
04:54 < styol> like `npm start` and such right
04:54 < isaacbw> package.json has a few other productivity utilities
04:54 < isaacbw> https://npmjs.org/doc/json.html
04:54 < isaacbw> you can just look through everything it can do
04:54 < styol> gracias
04:55 < MiracleBlue> Okay, so, I've finally got most of my application written.
04:55 < MiracleBlue> Just need to start writing the code that adds things to the new zip buffer and compresses it.
04:55 < Havvy> What a terrible URL for the package.json description.
04:56 < isaacbw> api design makes me so happy
04:56 < isaacbw> it's easily one of my favorite parts of web design
04:56 < isaacbw> development
04:57 < styol> isaacbw: do you use anything in particular? I went with simple http + query strings and it feels dirty but lightweight haha
04:57 < isaacbw> I used restify for a while but last night I wrote my own router
04:57 < isaacbw> so I use that
04:57 < styol> sweets
04:57 < isaacbw> query strings?
04:57 < styol> get variables
04:57 < isaacbw> REST is where it's at brah
04:57 < styol> ah yeah i know haha
04:58 < styol> just was avoiding big packages i guess.. easy enough to migrate to something else as everything underneath the end points is what took the real development time
04:58 < isaacbw> node is all about using big packages
04:58 < isaacbw> take advantage of what's available to you
04:58 < styol> when something installs 10 dependencies i cringe a lil
04:58 < isaacbw> that's the node way
04:58 < styol> to a certain extent doesn't that make the application inherently beefier?
04:59 < isaacbw> yea, but who cares about that
04:59 < isaacbw> you're not developing for a microcontroller
04:59 < styol> well, when you're trying to build something to scale it can be a consideration
04:59 < styol> the phrase "millions of users" is thrown at me a lot
05:00 < isaacbw> apache has 90k lines of code
05:00 < isaacbw> it can scale pretty well
05:00 < isaacbw> it's about design, not size
05:00 < isaacbw> wow, apache only has 90k lines of code
05:00 < isaacbw> that was a bad example
05:00 < isaacbw> mysql has 900k
05:00 < Lorentz> mysql doesn't scale
05:00 < Lorentz> kekekeke
05:00 < isaacbw> welp
05:00 < medice> fish scales
05:01 < styol> ^ lulz
05:01 < MiracleBlue> My brain has...
05:01 < MiracleBlue> One… BILLION… lines of code.
05:01 < isaacbw> apache is tiny
05:01 < isaacbw> shit
05:01 < Lorentz> postgres is apparently like 1m+?
05:01 < Lorentz> and that one scales fine
05:01 < isaacbw> databases are some of the most insane software to develop
05:02 < isaacbw> >> var a = {}. a.__proto__.butt = "cake"; a.cake
05:02 < purr> isaacbw: TypeError: Cannot read property '__proto__' of undefined
05:02 < isaacbw> :(
05:02 < isaacbw> >> var a = {}; a.__proto__.butt = "cake"; a.cake
05:02 < purr> isaacbw: undefined
05:02 < isaacbw> >> var a = {}; a.__proto__.butt = "cake"; a.butt
05:02 < purr> isaacbw: (string) 'cake'
05:02 < isaacbw> I'm bad at this
05:03 < Lorentz> terrible
05:03 < clondon> mmm cake
05:03 < medice> well, having tons of independent modules creates more possibilities for vulnerabilities
05:03 < isaacbw> my super duper tree router + async.waterfall = nergasm that won't end
05:03 < isaacbw> that's true
05:03 < Lorentz> medice: so is writing code
05:04 < Lorentz> might as well use tested code
05:04 < isaacbw> you do want to be picky about what you use, but the beauty of open source is you can check it and work on it yourself
05:04 < Lorentz> how do you know that node or v8 doesn't have a vulnerability
05:04 < isaacbw> and yea, bigger projects are often big because they are mature and fleshed out
05:06 < styol> go go gadget unit tests!
05:06 < styol> benchmark.js is pretty sweet actually, powers jsperf i think
05:14 < isaacbw> is there a significant overhead to having a lot of setTimeouts going
05:14 < Havvy> isaacs: It could become a bottleneck.
05:14 < isaacbw> alright, then I'll avoid it
05:15 < Havvy> In the same sense that having a lot of callbacks can become a bottleneck.
05:16 < isaacbw> hmm
05:18 < mscdex> success! a "changes feed" for mysql :-D
05:21 < chovy> anyone have any ideas for being able to jump from an admin account to another user?
05:22 < isaacbw> that's really entirely dependent on your applications
05:22 < isaacbw> *application
05:22 < styol> chovy: su user? In regards to what?
05:22 < chovy> inside my web app
05:22 < chovy> i want to make myself an admin of the web app, and be able to hop into other user accounts.
05:23 < chovy> i've seen it on a couple of large scale web apps for administration.
05:23 < isaacbw> have you made your application yet
05:23 < chovy> yeah
05:23 < isaacbw> then you should ask a specific question
05:23 < chovy> i'm just not sure how i would bypass login, because i don't have that.
05:23 < isaacbw> that's really general and depends on your application
05:23 < isaacbw> how are you doing sessions
05:23 < azylman> If your user is just encoded in the session, you can just change the session directly
05:23 < chovy> i mean i don't know their passwords, nor should i. i just want to allow an admin to jump to their account as if they were logged in as that user.
05:24 < azylman> e.g. have some sort of dropdown of all the users, only exposed when you're admin, that sets req.session.user
05:24 < chovy> i'm using redis for sessions, and basically i store the user id in the session.
05:24 < chovy> when they login
05:25 < azylman> So set the session directly
05:25 < isaacbw> chovy, how did you implement session management
05:25 < isaacbw> are you using a log of plug-n-play modules?
05:25 < chovy> so i would do something like goto a protected page ./admin/user and that would take the user id as an argument and just set my session as that user id?
05:25 < azylman> Something like that would work, yeah
05:26 < azylman> Basically, whatever your pages look at to determine weho the currently active user is
05:26 < chovy> isaacbw: i'm using connect-redis i think and express.
05:26 < azylman> You want to change that, right?
05:26 < azylman> So just change it
05:26 < azylman> And however you do that is up to you
05:26 < azylman> Could be an endpoint limited to admins, could be some DOM element on some page only available to admins, whatever
05:27 < chovy> if its a dom element, that would give me the list of users to choose only if i'm an admin. That makes sense, but I still need an endpoint/page to login me in as that user I would think.
05:27 < styol> Within this routine it is probably a good idea to verify whether or not the acting user is indeed an admin otherwise in theory anyone could hit the same URL and hop onto another user
05:28 < chovy> yeah
05:28 < nomulous> Hi. So I have this weird thing when using NPM. I installed a package, "http-console". It's in ~/node_modules/ and ~/node_modules/.bin is on my $PATH. I can run "~/node_modules/.bin/http-console" fine but just "http-console" doesn't work. Any ideas?
05:29 < chovy> i think i just visit /admin?jump_to_user_id=xxx and it checks if i'm an admin or not. And if so, then resets my session to that of the user id passed to it.
05:29 < chovy> nomulous: echo $PATH to be sure its there
05:30 < azylman> chovy: it could literally be as simple as http://hastebin.com/yelenoharu.vhdl
05:30 < chovy> might need to resource your .bashrc 
05:30 < nomulous> chovy: It's there. "...:/Users/fletcher/node-modules/.bin:..."
05:31 < nomulous> When I "echo $PATH".
05:31 < chovy> azylman: ok, that's more or less what i was thinking. I was going to look the user up in the db and use its id, but i guess that is pointless.
05:31 < min|dvir|us> Is there a way to require a module before running a script?
05:31 < chovy> nomulous: hmmm
05:31 < isaacbw> windows
05:31 < chovy> min|dvir|us: form the cli?
05:31 < min|dvir|us> chovy: yep.
05:31 < min|dvir|us> (Not the REPL.)
05:31 < chovy> you can't just put it in the script itself?
05:32 < azylman> chovy: you could do that too. Really up to you how you do it
05:32 < isaacbw> nomulous, is that windows?
05:32 < min|dvir|us> chovy: nope. :(
05:32 < nomulous> isaacbw: Mac OS X.
05:32 < chovy> azylman: yeah, that is easy i will give that a whirl. Its not like i need to validate user ids.
05:32 < isaacbw> and it's /Users, not /users?
05:32 < nomulous> isaacbw: Yep.
05:32 < isaacbw> okay
05:32 < chovy> except maybe another admin might try to revoke another admin's privs.
05:32 < styol> chovy: depends on if you have the UID accessible already from say the drop down list (which you probably do if you're retrieving a list). If you don't, the URL might indeed be the username that then looks up the user for the UID before doing that sort of session switch
05:33 < chovy> styol: ok.
05:33 < chovy> i like that even better than generating a list.
05:33 < chovy> I can just expose a link on their profile page "/admin/:user_id" that will jump them.
05:34 < min|dvir|us> Anyone?
05:34 < styol> nomulous: are you doing "http-console" from the CLI or were you referring to require('http-console')?
05:34 < chovy> min|dvir|us: i'm just curious, why would you have a script that doesn't require the modules it needs?
05:35 < nomulous> Got it. Sorry guys. It was the difference between my PATH being "...:/Users/fletcher/node-modules/.bin:..." with a hyphen when the actually path is with an underscore. Cheers.
05:35 < min|dvir|us> chovy: it's LiveScript, which I'm trying to run from Cloud9. It lets me pass CLI options.
05:35 < chovy> to node?
05:35 < chovy> how are you running the command
05:35 < min|dvir|us> I'm not running the command, Cloud9 is.
05:36 < min|dvir|us> My `npm start` command works just fine, which is `./main.ls` only.
05:36 < isaacbw> >> !!null
05:36 < purr> isaacbw: (boolean) false
05:37 < chovy> min|dvir|us: i remember perl had this -MFoo::Bar option to load a module
05:37 < chovy> i don't see anything obvious in 'man node'
05:39 < min|dvir|us> Not sure what to Google for this.
05:44 < chovy> how do i cause my middleware to fail if i'm not an admin?
05:45 < chovy> so it doesn't go onto the next one
05:45 < min|dvir|us> chovy: don't call next().
05:46 < chovy> k
05:46 < isaacbw> maybe read some more so you understand how middleware works as well
05:47 < min|dvir|us> Is there a way to require a module before running a script?
05:48 < bearice> did any body know where is the default SSL CAs to load when connecting to a server? I have tried /etc/ssl/certs but no luck
05:50 < addisonj> min|dvir|us: huh? what do you mean "before" just put it at the very top of your file before any code
05:50 < min|dvir|us> addisonj: I can't do that.
05:50 < min|dvir|us> I need to pass a CLI option.
05:50 < min|dvir|us> The alternative is to make a caller script.
05:50 < addisonj> you can access argv at anytime in a script
05:51 < min|dvir|us> To Node, not to my proram...
05:51 < styol> bearice: using the https module?
05:51 < bearice> styol: yes
05:52 < bearice> i can connect to a normal server w/o problem, but i cant connect to my server whos cert is signed by my ca
05:53 < styol> bearice: are you passing an object to https with key and cert keys?
05:53 < addisonj> min|dvir|us: Not sure of exactly what you are trying to do, but a calling script sounds right. I don't know of any way to load modules outside of the runtime
05:54 < bearice> no, the request is made by a npm module and i checked there is no additional arguments
05:54 < bearice> i dont want to touch the 3rd party code 
05:54 < styol> bearice: oh, you're trying to connect to a server with ssl not establish a server with ssl -- my bad
05:55 < min|dvir|us> See the request module.
05:59 <@Nexxy> min|dvir|us, cli arguments for the script?
05:59 < min|dvir|us> Nexxy: I need to require a module before the script is run.
05:59 <@Nexxy> oki
05:59 <@Nexxy> if you require first and then construct
05:59 <@Nexxy> you can do stuff like
05:59 <@Nexxy> var mod = require('mymodule');
05:59 < bearice> i tried to connect with "openssl s_client -connect my_server" and it says "Verify return code: 0 (ok) " , server's cert is signed by my own CA which had installed into system's keychain, but when connecting with https module, it fails with Error: SELF_SIGNED_CERT_IN_CHAIN
05:59 <@Nexxy> mod.prototype.extendedStuff here
05:59 <@Nexxy> var wee = new mod()
06:00 < min|dvir|us> Nexxy: I'm sorry, I don't see how that's relevant. :(
06:00 <@Nexxy> you can require anything you like
06:00 <@Nexxy> before you construct
06:00 < sorensen> howdy
06:00 < min|dvir|us> I want to require a module before Node even gets to my script.
06:01 <@Nexxy> (instantiate)
06:01 <@Nexxy> then do require()
06:01 < min|dvir|us> Which would then call constructors and stuff like that.
06:01 <@Nexxy> lol
06:01 < min|dvir|us> require() would be inside my script.
06:01 < chovy> anyone use mongohub?
06:02 < min|dvir|us> Nexxy: do you understand my problem?
06:02 < styol> bearice: try https.request({ rejectUnauthorized: false }, callback);
06:02 <@Nexxy> min|dvir|us, not at all
06:03 < min|dvir|us> I'm actually not running node. Cloud9, the online IDE, is.
06:03 < min|dvir|us> It lets me pass CLI options.
06:03 <@Nexxy> right
06:03 < min|dvir|us> When I run a LiveScript file, it gives me syntax errors.
06:03 < min|dvir|us> I need to require LiveScript before my module is run.
06:03 <@Nexxy> right
06:03 < min|dvir|us> Can I do this via CLI params?
06:04 <@Nexxy> yeah that's an interesting question
06:04 <@Nexxy> I'm not aware of any node flag to "pre-load" a particular module
06:05 <@Nexxy> but you could easily load it yourself
06:05 < min|dvir|us> Yeah, I could make a runner script.
06:05 < addisonj> min|dvir|us: you need to either compile your livescript or use whatever util they have
06:05 <@Nexxy> I think that's all you can really do
06:05 < addisonj> or go the way of a loeader
06:05 < min|dvir|us> OK, thanks Nexxy.
06:05 < addisonj> you face the same problem with coffee-script, iced coffee-script, etc
06:05 < min|dvir|us> Well, the problem is Cloud9, not my language of choice.
06:06 <@Nexxy> min|dvir|us, does c9 have a way to change the "binary" it uses to launch your app?
06:06 <@Nexxy> rather than just bare node
06:06 < min|dvir|us> Nexxy: I can choose a different file to execute.
06:06 <@Nexxy> ah
06:06 < min|dvir|us> And I can use CLI options.
06:06 < min|dvir|us> I'd just rather not make a stupid 2-line script.
06:07 < min|dvir|us> I already have a runner script in LiveScript. :)
06:07 <@Nexxy> yeah
06:07 < sorensen> what is this livescript voodoo
06:07 < addisonj> https://c9.io/site/blog/2012/10/typescript-support-in-cloud9/
06:07 <@Nexxy> I keep seing typescript
06:07 <@Nexxy> instead of livescript
06:07 <@Nexxy> is that what you're using?
06:07 <@Nexxy> or
06:07 < addisonj> oh livescript, nm, too many script* things :|
06:07 < min|dvir|us> I'm using LiveScript. :)
06:10 < squeakytoy> Hey all. I am storing more and more data into variables, which i assume gets stored into the RAM. Is it possible to see how much memory my node.js app is taking?
06:11 < addisonj> http://nodejs.org/api/process.html#process_process_memoryusage
06:11 < addisonj> squeakytoy: ^
06:12 < min|dvir|us> https://github.com/felixge/node-memory-leak-tutorial
06:12 < min|dvir|us> You can get the memory usage of the process but that won't give you information on how it's being used.
06:13 < sorensen> interesting
06:13 < sorensen> only knew about the process memoryusage
06:14 < squeakytoy> heapUsed: 10823480, 10mb not too shabby
06:14 < chovy> man, my mongoose schema isn't being added to the db, but it shows up in the user object from the app.
06:14 < chovy> i added an attribute isAdmin : { type: Boolean, default: false }
06:14 < chovy> but its not in the db when i connect to it.
06:15 < sorensen> it doesnt add it to the schema afaik
06:15 < sorensen> if its already created
06:15 < sorensen> it just adds it to the new documents created afterwards
06:15 < chovy> but if i dump the user object in the app, it shows it
06:15 < chovy> ok, so how do i get it in the db then?
06:16 < sorensen> the record in the db doesnt have it?
06:16 < chovy> no
06:16 < chovy> not when i connect directly to the db.
06:16 < chovy> but when i dump the user object in the app, it shows isAdmin is false.
06:16 < chovy> as expected
06:16 < sorensen> i'm suprized the record doesnt have it
06:17 < sorensen> hmm, not sure then
06:18 < chovy> once you save it, the record should be updated.
06:18 < chovy> which i did by updating my profile.
06:20 < chovy> maybe false booleans don't show up in the doc?
06:20 < chovy> would be news to me
06:23 < squeakytoy> thanks
06:23 < chovy> i guess if you don't actually set a value, it never makes it to the doc
06:23 < chovy> this is the confusing thing about nosql
06:25 < squeakytoy> does the term NDO exist? ;)
06:25 < squeakytoy> Node Data Objects
06:25 < crabtree>  huh
06:25 < chovy> sorensen: you were right. It won't update current docs w/ new attribute, it only has it for new docs
06:25 < chovy> how do i get around this?
06:42 < timoxley> squeakytoy wat
06:46 < sorensen> chovy: you want existing docs to have the new attributes?
06:46 < squeakytoy> ?
06:52 < Skaag> Does this look ok? https://dl.dropbox.com/u/40057/Architecture.pdf
06:54 <@Nexxy> Skaag, cool! making a kiosk?
06:56 < sorensen> are the mongodb instances meant to be the same cluster
06:56 < SomeoneWeird> Skaag, howd you make that? :)
06:59 < tttuuu> I'm new to node.js. What's the command to see which version of node.js that I have?
06:59 < tttuuu> and I failed at google
06:59 < min|dvir|us> tttuuu: node -v
06:59 < min|dvir|us> (Pretty much the standard option for version.)
07:00 < tttuuu> and also, what's the command to get out of "node"
07:00 < tttuuu> quit, exit, quit() don't work
07:00 < tttuuu> something other than ctl-c
07:00 < min|dvir|us> tttuuu: Ctrl+D (pretty much standard for a REPL.)
07:00 <@Nexxy> tttuuu, process.exit()
07:01 < tttuuu> thank you so much guys for these prompt and helpful replies!
07:01 <@Nexxy> :)
07:04 < sorensen> Nexxy: heard you made a machine that controlled sound and a fog machine with your hand
07:05 < sorensen> the &yet guys were telling me a bit about you at lunch
07:05 < Skaag> Nexxy: yes
07:05 < sorensen> cool stuff
07:05 < Skaag> SomeoneWeird: you mean the diagram?
07:06 < Skaag> sorensen: yes, in theory they would sync the data, eventually (not super important to have the data synchronized immediately)
07:06 <@Nexxy> sorensen, yeah lol
07:06 < sorensen> Skaag: didnt know if that meant they were local instances to each box or if you were using something like haproxy
07:06 < SomeoneWeird> Skaag, yeah
07:07 < sorensen> seems like they should be on seperate boxes and then have the node services talk to them through something like haproxy
07:08 < sorensen> just couldnt tell the intent with the diagram
07:08 < chovy>  /lw chovy
07:08 < chovy> sorensen: yeah
07:08 <@Nexxy> Skaag, I built a kiosk with node as well
07:08 < Skaag> Nexxy: awesome! I used hardware from olimex, with a full screen webkit
07:09 < Skaag> that part works wonderfully
07:09 <@Nexxy> very nice
07:09 <@Nexxy> I just used beagleboard XM and midori/chromium + nodm 
07:09 < iksik> 'kiosk'? :S
07:09 <@Nexxy> iksik, embedded webapp
07:09 < iksik> oh
07:09 < Skaag> chromium gave me trouble
07:09 < Skaag> so I decided to just stick with webkit QT
07:09 <@Nexxy> yeah it's tricky to get it to fullscreen
07:10 < Skaag> check out wcgbrowser
07:10 <@Nexxy> I just starred it on github!
07:10 < Skaag> I love it
07:10 < sorensen> you hardware folk are beyond me ;)
07:10 < Skaag> what does your kiosk do?
07:10 <@Nexxy> I wrote a blog post about my early kiosk stuff: http://nexxylove.tumblr.com/tagged/hardware
07:10 <@Nexxy> Skaag, it's a point of sale app
07:11 <@Nexxy> works with off the shelf hardware (barcode scanners & magstripe readers & ticket printers)
07:11 < sorensen> Nexxy: easy for a hardware nub to follow?
07:11 < Skaag> nice!
07:11 <@Nexxy> sorensen, for sure
07:11 < Skaag> what printer did you use?
07:12 <@Nexxy> Skaag, boca systems Lemur K
07:12 < sorensen> nice, i'll give it a read
07:12 <@Nexxy> http://www.bocasystems.com/lemur.html
07:12 < Skaag> mine is just a bill payment system
07:12 <@Nexxy> very nice
07:12 <@Nexxy> sorensen, :)
07:13 < sorensen> i want to do something with hardware but have no use case, maybe this will help me think of things
07:13 < Skaag> and yes, haproxy is going to handle high availability, as well as DNS
07:13 <@Nexxy> sorensen, I also posted about making an alarm/security system w/ arduinos and twilio
07:14 <@Nexxy> sorensen, that's pretty easy to do as well
07:14 <@Nexxy> it has a parts list
07:14 < sorensen> i'll look through your posts, they look pretty detailed
07:14 <@Nexxy> the arduino post needs expanded but if you have questions I'm happy to help :)
07:14 < sorensen> just need an ice breaker more than anything
07:14 <@Nexxy> sorensen, are you anywhere near NYC?
07:15 <@Nexxy> http://www.eventbrite.com/event/2568554616
07:15 < sorensen> heh, i'm in tri cities atm but will be in upper west side manhattan for the next 2-3 weeks
07:15 < Skaag> I'm in NYC myself
07:15 < sorensen> ah, few days after i leave
07:15 < sorensen> dam
07:15 <@Nexxy> hah ;<
07:15 <@Nexxy> sorensen, also there should be some hardware stuff @ nodepdx this year
07:15 <@Nexxy> if you can make it down
07:16 < sorensen> doing an integration hacking session for MLS
07:16 < sorensen> where is it?
07:16 < sorensen> i live in spokane WA for the most part
07:16 <@Nexxy> sorensen, I'm not sure which venue, but it will be in Portland somewhere
07:16 <@Nexxy> May 4-5
07:16 < sorensen> ah thats pretty close
07:16 < sorensen> nice
07:17 < sorensen> i'll be at node conf this year for sure
07:17 <@Nexxy> cool!
07:17 < sorensen> got the tickets
07:17 <@Nexxy> I'll definitely bring some hardware to play with
07:17 < sorensen> thats awesome, its definitely mysterious to me atm
07:17 < Skaag> Nexxy: I've been talking to jcmglobal about this printer http://www.jcmglobal.com/en/products/productlist.aspx?TagID=202176d0-94a0-464c-a251-8ede52824ba7
07:17 < sorensen> having never done it
07:17 < Skaag> where's nodeconf happening?
07:18 < sorensen> i think where node camp happened last year
07:18 <@Nexxy> walker creek ranch
07:18 < sorensen> a ranch outside of san fran
07:18 <@Nexxy> or w/e
07:18 < sorensen> yeah
07:18 < Gambit---> so does node.js actually have platform specific code, or does it leverage v8 for all of that :)
07:18 < sorensen> Nexxy: are you in NYC?
07:18 <@Nexxy> sorensen, no I'm in Portland
07:18 < Gambit---> s/ :)/?/
07:18 <@Nexxy> Gambit---, libuv 
07:18 < sorensen> ah your pretty close
07:18 < sorensen> never been to portland
07:19 < Gambit---> ah thx
07:19 < tttuuu> what is the latest version of npm? https://npmjs.org/
07:19 <@Nexxy> you're missing out
07:19 < sorensen> i hear theres wild hipsters there
07:19 <@Nexxy> they're pretty tame really
07:19 <@Nexxy> you just have to know how to approach them
07:19 < Skaag> LOL
07:19 < sorensen> i should go on a safari
07:19 < sorensen> haha
07:19 < Skaag> how good is it for raising children?
07:19 < sorensen> i laughed harder than i should have
07:19 <@Nexxy> I'm happy raising a child here
07:19 < Skaag> me and the wify are considering moving out of NYC before we pop a baby
07:20 < sorensen> where in NYC?
07:20 < Skaag> we're just not sure we want a kid to grow up in this environment
07:20 < sorensen> you could always go to the midwest ;)
07:20 < Skaag> we're in LIC at the moment, and really like it. It's quiet, neighborly, peaceful, safe...
07:20 < Skaag> LOL :) No way!
07:20  * sorensen grew up in nebraska
07:20 < SomeoneWeird> come to australia!
07:20 < SomeoneWeird> :p
07:20 < Skaag> I have a feeling I would love Australia actually
07:20 < sorensen> watch it mate
07:21 < tttuuu> sorry to interrupt your exciting conversation, is the latest version of npm 1.2.2?
07:21 < Skaag> I have this impression about Aussies that they are party animals
07:21 < tttuuu> Skaag, California is nice too
07:21 < SomeoneWeird> australia is awesome
07:21 < sorensen> tttuuu: what does npmjs.org say
07:21 < Skaag> tttuuu: That's where my wife's parents are, but southern cali, and we're not so excited about that. Plus I heard it's extremely expensive.
07:22 < Skaag> tttuuu: I just installed node, and npm is 1.2.2
07:22 < sorensen> though it does look like theres a 1.2.4 release on github
07:22 < Skaag> Nexxy: your kid is going to grow up a genious eh? :)
07:22 < tttuuu> sorensen https://npmjs.org/ doesn't seem to say it. Skaag, thanks for the confirmation
07:22 <@Nexxy> Skaag, yes!
07:22 < Skaag> I have no doubt
07:22 < sorensen> tttuuu: yeah i should have looked before i suggested
07:22 < Skaag> See, I wish I had a neighbor like you
07:23 < Skaag> and I'm sure our kids would hack some crazy stuff together, behind our backs
07:23 <@Nexxy> my surveillance is too strong for that
07:23 < tttuuu> Skaag, do you have to be tied to an office building?
07:23 < tttuuu> or your wife?
07:23 < sorensen> they might betray you and start using erlang
07:23 < Skaag> that's what I'm thinking about, lately. Being a part of a cool community.
07:23 <@Nexxy> erlang is legit
07:23 < sorensen> family fued of languages since the age of 8
07:23 < sorensen> :P
07:24 < SomeoneWeird> Skaag, did you answer what you made the pdf with? :3
07:24 < sorensen> just a joke ;)
07:24 <@Nexxy> :P
07:24 < Skaag> sorensen: erlang?! never! I'd +b them
07:24 < sorensen> haha
07:24 <@Nexxy> heller jer
07:24 < Skaag> tttuuu: no, am not tied at all
07:24 < tttuuu> lucky you
07:24 < tttuuu> what do you do?
07:24 < sorensen> speaking of erlang: http://www.youtube.com/watch?v=uKfKtXYLG78
07:24 < Skaag> SomeoneWeird: I used OmniGraffle
07:24 < sorensen> this video is priceless
07:24 < SomeoneWeird> cool
07:24 < Skaag> SomeoneWeird: I just love that app
07:25 <@Nexxy> sorensen, lol you get my reference then?
07:25 < sorensen> lol i do now
07:25  * sorensen 7 beers in
07:26 < Skaag> so json-rpc on top of zmq, ha-proxy, dynamic dns balancing, sounds good enough? or am I missing something?
07:26 < SomeoneWeird> aww only for mac
07:27 < Skaag> SomeoneWeird: Yah I wish there was an app like that for Linux, Dia is pretty close, and OpenOffice Draw is also not bad, but nothing beats OmniGraffle in my opinion (and taste)
07:27 < sorensen> Skaag: what kind of env is this? hardware, aws?
07:27 < Skaag> not going to use aws, too expensive
07:27 < Skaag> besides I already have servers spread around the planet
07:28 < Skaag> so this is kiosks sitting in random locations, connecting either via wifi or a GSM modem
07:28 <@Nexxy> Skaag, I just use riak and dnode
07:28 <@Nexxy> lol
07:28 < Skaag> reading
07:28 < sorensen> used to love the hell out of dnode
07:28 <@Nexxy> upnode is great too
07:29 < sorensen> since socket.io does the callbacks now i dont see a direct need for dnode anymore
07:29 < sorensen> but its all usecase of the app
07:29 <@Nexxy> I was doing a lot more RPC than I was pubsub
07:29 <@Nexxy> omg, *the* mikeal?!
07:30 < GreenDog> ?
07:30 < sorensen> yeah, they are almost too close to functionality in the end
07:30 < sorensen> i feel like the pubsub style gives you a bit more flexibility in the end if thats what you need
07:30 < sorensen> while the RPC is a bit more verbose
07:31 < sorensen> the difference almost seems to be 'clients:do this' and 'clients: do this if you want to'
07:31 < sorensen> but i do love dnode
07:32 < sorensen> :P
07:32 < sorensen> one of my lib's i probably shouldnt have made: https://github.com/sorensen/backbone-dnode
07:34 < GreenDog> woot, you use mongodb
07:34 < GreenDog> the db i have to figure out why people use
07:36 < Havvy> GreenDog: I'm a sql fan for small projects.
07:38 < sorensen> GreenDog: who are you talking bout
07:38 < sorensen> Havvy: i'm the opposite ;)
07:40 < Skaag> GreenDog: It's simple to use, It's solid, It's easy to get it to replicate/cluster, It's easy period... ;)
07:40 < Skaag> And it's fast & light
07:41 < Skaag> sorensen: So it looks like the difference between dnode and bare zmq is that the first just allows you to invoke functions, while the latter just lets you send messages in general...
07:41 < sorensen> which in a sense is how socket io works
07:42 < sorensen> dnode is a bit strict on methods existing
07:42 < Skaag> I'm trying to figure out which one I want to use...
07:42 < Skaag> I need the ability to failover
07:42 < sorensen> you can always check if the method exists
07:42 < sorensen> its just more about if the client is using a pub sub style
07:43 < sorensen> i tend to favor the pub sub style in general
07:43 < sorensen> server can say 'i have a new message' while the client can determine if it wants to bother with that or not
07:43 < sorensen> vs the rpc style of, 'client, do this'
07:44 < Skaag> yes that's more my style too
07:44 < sorensen> which is an extreme simplification
07:44 < Skaag> I would favor rpc a bit more for local scenarios (same LAN)
07:44 < sorensen> but most times i have a pub sub style set up on the server as well
07:44 < sorensen> yes
07:44 < Skaag> so zmq it is, then
07:44 < dch> is it possible to store nodejs objects on disk in a way that doesn't require serialisation to load them? i.e. some binary format that can be copied directly into memory for re-use? 
07:45 < sorensen> its all about use case, there are times when its not up for grabs and i would rather just force the client to do something
07:45 < dch> not JSON <-> JS for each round trip.
07:45 < sorensen> dch: not sure what context you are referring to
07:45 < sorensen> request response cycle?
07:46 < dch> nope, ignore the browser/webserver completely.
07:46 < dch> imagine I have a database of 20 million json docs.
07:46 < dch> and I want to run a map reduce job across those.
07:46 < dch> again, and again, and again.
07:46 < sorensen> so you want a caching layer for those map reduce results
07:47 < sorensen> why not set the final result back into the db and use that
07:47 < dch> nope. I don't know the n/r functions in advance. 
07:47 < dch> I simply want to avoid the serialisation cost .
07:47 < Skaag> ok I think I've done enough for today, almost 3am, time to get some sleep :)
07:47 < sorensen> i think the cost of writing/reading to disk is going to be heavier than the serialization
07:47 < sorensen> Skaag: g'night
07:48 < dch> sorensen: no its not. 
07:48 <@Nexxy> dch, have you looked at the vm module? 
07:48 < dch> some of these JSON docs are 600k+. parsing those is non-trivial in both time, and cost of CPU.
07:49 < sorensen> perhaps i just dont understand the use case fully, it sounds like you are trying to get a final result from m/r and then store it for quick reads
07:49 < mscdex> anyone here use node in front and proxying to php via fastcgi or some such?
07:49 < dch> Nexxy: yes, but I didn't see this sort of thing there. It will be ideal for processing the map/reduce side though, I am playing with it already.
07:49 <@Nexxy> dch, yeah I'm not aware of a way to save compiled scripts to disk
07:50 < dch> sorensen: the key thing is that I have a large # of documents where I will process arbitrary map/reduce functions across them.
07:50 < sorensen> and you want that to run in the background or in realtime for results
07:50 < dch> so I want to trim the fat across the whole pipeline. avoiding the parse effort is a big win, if its possible.
07:51 < dch> sorensen: both (it's complicated). think like a database.
07:51 < dch> actually a database.
07:52 < sorensen> i might be a bit off, but this seems to be dependent on how long that m/r result is good for
07:52 < sorensen> it sounds like you could cache that result (disk/database) and serve it up the next time saving you the parsing and making it a one time cost
07:53 < sorensen> if you have to do the m/r every time then i dont know how to avoid the serialization cost
08:02 < Skaag> updated the architecture document https://dl.dropbox.com/u/40057/Architecture.pdf
08:03 < gmg85> is it possible to check from nodejs if a certain user or group exists?
08:03 < echo|1> gmg85: On linux, yes. Both of those are stored in files that are parse-able.
08:03 < Skaag> gmg85: posix style?
08:05 < gmg85> echo|1, no easy way to do it
08:05 < gmg85> echo|1, dont wanna read the users or groups database directly
08:05 < vvwalle> hi all
08:05 < vvwalle> socket.io how to save session of client?
08:06 < vvwalle> i have not use it with express.
08:07 < onr> fyi, both express and socket.io have their own channels on freenode
08:07 < echo|1> gmg85: You could fork a process and use the id command on the username, and parse this output:
08:07 < echo|1> uid=99(nobody) gid=99(nobody) groups=99(nobody), much easier, I think, that's ofcourse only for users.
08:08 < echo|1> id also has flags so you can only return a specific format if you want.
08:09 < vvwalle> onr: ok, thanks
08:09 < gmg85> echo|1, hmmm...ok...let me look into that...thanks
08:10 < echo|1> gmg85: You're welcome! Let me know how it goes! You may be able to make an extremely lightweight module for it.
08:12 < gmg85> echo|1, cool...
08:12 < Skaag> ooh, hook.io
08:12 < sorensen> Skaag: looks good
08:12 < sorensen> the mongo db's are local to the instances?
08:13 < sorensen> the server cloud instances
08:15 < gf3> TIL struct passwd * getpwuid (uid_t uid) AND struct passwd * getpwnam (const char *name)
08:15 < gf3> And associated functions
08:22 < Skaag> sorensen: yes they are local to the instances and replicate with each other
08:23 < Skaag> probably in a circular pattern, but maybe I'll come up with something more advanced, like dual circular
08:25 < ashnur> Nexxy: is this still wrapping? http://localhost:9778/#Behold-the-Pyramids-of-Doom :D
08:29 < sorensen> Skaag: why not put those on seperate boxes and use haproxy to route them, in case one goes down the node servers could fail over
08:29 < sorensen> otherwise it seems if a db goes down so does a node server
08:30 < phun_ky> is it possible to use npm version to specify a semver version like this: "0.1.0-alpha" or do I have to do that manually?
08:30 < Skaag> true
08:30 < Skaag> phun_ky: if you use package.json the second field is the version number
08:30 < phun_ky> so: npm version minor alpha?
08:30 < Skaag> like so: "express": "3.1.0"
08:31 < sorensen> although you wouldnt necessarily need two new boxes for that, you could just have the local node instances still use haproxy to fail over to the other node's local db
08:31 < Skaag> sorensen: right, exactly
08:31 < ashnur> Nexxy: i guess you don't have it on your localhost:( correct link → http://ashnur.github.com/async-hell/#Behold-the-Pyramids-of-Doom 
08:32 < sorensen> i would definitely do that so that the node/db arent so coupled
08:33 < sorensen> since you are already replicating under the idea that one might go down
08:33  * sorensen is guessing
08:34 < sorensen> Skaag: are you going to node conf?
08:34 < Skaag> I might! where is it?
08:34 < sorensen> walker ranch outside of san fran i think
08:35 < Skaag> whoah
08:35 < Skaag> :)
08:36 < Skaag> looks awesome
08:36 < isaacbw> do any of you have experience with dotblock?
08:37 < isaacbw> their nodes have more memory than most other providers
08:40 < [AD]Turbo> hi there
08:41 < Skaag> isaacbw: looks good, impressive in fact
08:42 < isaacbw> unmetered bandwidth too
08:42 < Skaag> sorensen: looks like early bird tickets are gone, and more tickets will be available Feb 6.
08:42 < Skaag> well i'm sure that "unmetered" has a clause attached to it in small letters..
08:42 < isaacbw> it's so cheap that I'm worried about how sustainable it is
08:42 < isaacbw> they seem pretty big though, so
08:42 < Skaag> it's not that cheap once you start adding blocks
08:43 < isaacbw> you get a lot more memory for the price than other providers
08:43 < isaacbw> but less hard disk space
08:43 < Skaag> you have no way to tell how big they are, but yah, it looks like it would take considerable effort to produce that service
08:43 < Skaag> well they use SSD's...
08:44 < isaacbw> "Dotblock is a privately owned, multi-million dollar corporation located in Upstate New York. Our company has been providing web hosting services to approximately 50,000 websites since 1999"
08:44 < Skaag> you don't need too much memory when your storage is an SSD, because of how fast your queries finish
08:44 < sorensen> Skaag: bummer
08:44 < Skaag> nice
08:44 < isaacbw> it depends on what you're doing
08:44 < sorensen> well', i'm off, g'night
08:44 < Skaag> sorensen: I go with the flow, if it's supposed to happen, it will happen, and I'll get a ticket
08:44 < Skaag> if it's too expensive I won't make it anyway
08:45 < sorensen> :P
08:45 < isaacbw> I need a lot of space for caches
08:45 < Skaag> :)
08:45 < sorensen> good mentality
08:45 < sorensen> the dude abides
08:45 < Skaag> :)
08:45 < Skaag> going to bed myself, finally... g'night see you tomorrow :)
08:57 < min|dvir|us> Can someone help me with an error I'm getting?
08:58 < phun_ky> hm, when a recently published package on npm appears as "undefined" on npmjs.org, do I just wait, or is something wrong (git repo is private)?
08:58 < min|dvir|us> Can anyone install libxml@0.0.7?
08:59 < phun_ky> hm, worked from my ubuntu laptop, nevermind
09:07 < mpajor_op5> I am considering to build my webapp using node.js + express instead of a PHP framework. Any takes on this? Is it wise to build a "semi-big" site (5~ subpages) with a lot of traffic on top of node.js + expressjs?
09:08 < geNAZt> does it have database ios ?
09:08 < mpajor_op5> geNAZt: yes, it has databases. I will be either using mysql with mongodb or just one of them, most likely mongodb in that case
09:08 < mansoor-s> mpajor_op5, how complex an app is it?
09:08 < geNAZt> then nodejs should be the better way, since it uses per application connection pools and not per request connection
09:08 < SomeoneWeird> thats easy
09:09 < mxbtty> mpajor_op5: study and understand the tradeoffs based on your project needs
09:09 < mpajor_op5> mansoor-s: It's rather complex in terms of the JS. I will be doing a lot of updates to the client and a bunch of writes/reads to the database
09:09 < SomeoneWeird> thats easier
09:09 < SomeoneWeird> socketio ftw
09:09 < mpajor_op5> but JS is kinda the main focus here. I was thinking node.js+express+jade for simplicity :p
09:10 < min|dvir|us> Can someone help me set up Cloud9?
09:10 < min|dvir|us> https://github.com/ajaxorg/cloud9
09:10 < mpajor_op5> SomeoneWeird: but is node.js+express "stable enough" to be ran in production? I am just worried about the application slowly dying due to memory leaks or such
09:10 < min|dvir|us> Just follow the directions on https://github.com/ajaxorg/cloud9 and tell me what happens.
09:10 < SomeoneWeird> yep it's stable
09:11 < SomeoneWeird> lotsss of site use it
09:11 < min|dvir|us> mpajor_op5: the major issue you will find with a Node stack is that many libraries are immature/unstable.
09:11 < min|dvir|us> And there's not enough of them.
09:11 < mpajor_op5> alrighty, so I take it as a site that has 5000~ concurrent users online at the same time is "a no problemo" for node?
09:11 < mpajor_op5> min|dvir|us: yeah, I have read about that. That seems to be the biggest problem
09:12 < min|dvir|us> mpajor_op5: quickly changing though. :)
09:12 < min|dvir|us> Can someone help me do something very easy?
09:12 < mpajor_op5> yup, the immaturity of libraries is my main concern though. Perhaps I should just write the socket.io "api" in node and the rest in PHP after all
09:13 < min|dvir|us> PHP is a joke.
09:13 < mpajor_op5> I prefer perl with mojolicious but that's another topic :p
09:13 < min|dvir|us> PHP cannot support 5000 concurrent users on its best day.
09:13 < geNAZt> min|dvir|us: node doesnt either
09:14 < gildean> mpajor_op5: i tested express by running it for a couple of weeks with a module i wrote to check memory-usage, it didn't leak
09:14 < mpajor_op5> gildean: I understand but the leaking depends on how you write your code. If you forgot to empty global variables you will quickly notice that things get out of hand
09:15 < geNAZt> not if the gc fetches it :D
09:15 < mpajor_op5> :p
09:16 < gildean> mpajor_op5: i'm just saying that express and node themselves don't seem to leak, if there's a leak, then you've written it
09:16 < geNAZt> in v8 it is hard to write leaking code, till the gc is very good at its job
09:16 < mpajor_op5> gildean: of course, that's what I meant :)
09:16 < mpajor_op5> geNAZt: oh ok
09:17 < SomeoneWeird> <geNAZt> in v8 it is hard to write leaking code, till the gc is very good at its job < +1
09:17 < min|dvir|us> geNAZt: Node supports 20K+ reqs per second.
09:17 < geNAZt> yes on every machine with every code
09:17 < geNAZt> ofc
09:18 < geNAZt> then tell me why my node cluster on 4x3.4 ghz limits at 2.1k req/s
09:18 < min|dvir|us> According to some guy on the Internet.
09:19 < mpajor_op5> some guy? :p
09:19 < SomeoneWeird> it depends entirely on what you're doing
09:19 < min|dvir|us> If someone could follow the directions on https://github.com/ajaxorg/cloud9 to install I'd be quite grateful.
09:22 < elliottcable> So, I'm trying to learn to write a bit more idiomatic Node-application / Node-module code.
09:23 < elliottcable> What's the usage pattern for writing Node modules in CoffeeScript?
09:23 < min|dvir|us> elliottcable: require CS somewhere up the chain.
09:23 < elliottcable> I don't want to commit compiled JavaScript to the repo; how can I ensure the CoffeeScript is compiled as necessary for people npm-install'ing my code? or do I even need to?
09:24 < SomeoneWeird> you can't
09:24 < SomeoneWeird> and you shouldn't
09:24 <@Nexxy> not possible
09:24 < min|dvir|us> elliottcable: if you have to, make a launcher script.
09:24 <@Nexxy> (possible but fragile)
09:24 < min|dvir|us> Who wants compiled CoffeeScript anyway?
09:24 < min|dvir|us> The only reason you'd do that is for deployment.
09:24 < elliottcable> can't-and-shouldn't what, exactly?
09:25 < elliottcable> forgive me if I'm missing something obvious; I've been avoiding this entire stack for years. Very new to me.
09:25 < elliottcable> can't-and-shouldn't what? compile the JavaScript when somebody installs my module?
09:25 < min|dvir|us> Why do you want people to have the compiled JS?
09:25 <@Nexxy> just put an install script
09:25 <@Nexxy> in your package.json
09:25 <@Nexxy> to compile it
09:26 < elliottcable> let's say I have "main":"src/my_lib.coffee"; how do I ensure that a non-CoffeeScript-using-fella can `require('my_lib')` after `npm install my-lib`'ing, and Everything Work?
09:26 < elliottcable> Nexxy ⑊ mmmmmm. Just a script that programmatically calls the CoffeeScript library to compile it for me?
09:27 <@Nexxy> yeah
09:27 < min|dvir|us> elliottcable: you're probably doing it wrong.
09:27 < elliottcable> min|dvir|us ⑊ That's a fair assumption. Can you tell me how I'm doing so?
09:27 <@Nexxy> "scripts" : { "install" : "node compile.js" }
09:27 <@Nexxy> or w/e
09:28 < min|dvir|us> elliottcable: generally package maintainers do not compile their CS, and package installers don't want the compiled CS.
09:28 < min|dvir|us> Nexxy: wouldn't that break the functionality of NPM?
09:28 <@Nexxy> how?
09:28 < min|dvir|us> npm already has an install command.
09:28 < elliottcable> hmmmm. Again, think I'm missing something. If they're `npm install my-lib`'ing in their *own* library, to use the functions I expose, how do they then require my module if it's in CoffeeScript?
09:28 <@Nexxy> min|dvir|us, I'm aware
09:28 < elliottcable> I'm sure I'm missing something massive, but ...
09:29 <@Nexxy> elliottcable, you include coffeescript as a dependency
09:29 < min|dvir|us> elliottcable: they just require() your module, which already has CS as a dependency.
09:29 < elliottcable> so if coffee-script is included in the dependencies list, then require() operates on .coffee files? is that *hugely* special-cased, or something?
09:30 < min|dvir|us> No, there are hooks for it.
09:30 < min|dvir|us> LiveScript works the same way.
09:30 < min|dvir|us> TypeScript probably too.
09:30 < elliottcable> erg. So, . Erg.
09:30 < elliottcable> I'm so lost. How does the require() in the user's script get overloaded to look for, and compile, .coffee files?
09:31 < min|dvir|us> If you don't believe me, try it for yourself.
09:31 < elliottcable> oh, I assume you're right and know more for me.
09:31 < elliottcable> I'm just shocked that it does so, and am now curious as to *how*.
09:31 < min|dvir|us> What I mean to say is try it for yourself. :)
09:32 < elliottcable> well, you've all given me much to think about, and much *more* to google. Thanks!
09:32 < min|dvir|us> elliottcable: it goes by file extension.
09:33 < elliottcable> second question: Does the client-module not need to `require('coffee-script')` for .coffee to get registered, or am I missing something further?
09:35 < min|dvir|us> elliottcable: yes.
09:35 < min|dvir|us> Somewhere up the chain.
09:35 < elliottcable> mkay. Cool.
09:36 < elliottcable> Is it a bad idea to have my_lib.js that simply `require('coffee-script'); require('my_lib')` or similar?
09:36 < min|dvir|us> elliottcable: no, it's a great idea.
09:37 < min|dvir|us> Typically you'd make one .js file and have its module.exports refer to whatever you want.
09:37 < min|dvir|us> Like an object containing all the require()d modules.
09:42 < Kakera> how do I deal with people who ask dumb questions by submitting issues
09:42 < min|dvir|us> Kakera: close their issues.
09:43 < gildean> Kakera: answer the question with a link to the info they're after and close the issue
09:43 < Kakera> well this guy obviously doesn't know what a callback is
09:43 <@Nexxy> elliottcable, coffeescript uses node's require.extensions to register its own "loader" for .coffee files
09:44 <@Nexxy> elliottcable, https://github.com/jashkenas/coffee-script/blob/master/src/coffee-script.coffee#L19-L26
09:44 <@Nexxy> if that helps at all
09:45 <@Nexxy> elliottcable, also see https://github.com/joyent/node/blob/master/lib/module.js#L122-L130
09:58 < TonkaTruck> OK!  Focus!  I need a rest service, a test framework and a mysql orm.  Restify, Mocha, Sequelize.  Is there anything better?
09:58 < SomeoneWeird> dunno about the first two but sequelize is awesome
09:59 < TonkaTruck> SomeoneWeird: It's the only thing I haven't used of the three so thanks!
10:01 < TonkaTruck> Are there many converts in here from python/ruby?
10:02 < TonkaTruck> I only ask that because…when I make a node app it just explodes instantly into production mode and I always feel like it was too easy.  After so many years of web service dev it creeps me out that it can be so easy.
10:02 < gildean> wasn't ruby the thing that made ryanh to come up with node
10:04 < _ior> tonka hahahah i'm totally with you
10:06 < TonkaTruck> _ior: For real.  I don't know why or how…but node.js is how it should've been all along I guess.  I just feel bad that after over a decade of js and all other server side things…so many hours…late nights, etc…I'm basically throwing it away for something that makes sense.
10:06 < TonkaTruck> Also two years ago I randomly read The Good Parts.
10:08 < TonkaTruck> Whatev.  I'm a node person now.  Period.
10:10 < _ior> tonka, yeah, to think that i actually worked professionally as a web developer using java *shudder*
10:14 < polar_> Hello everybody :)
10:15 < SomeoneWeird> _ior, o god
10:15 < SomeoneWeird> lol
10:15 < _ior> i know :(  in my defense, it was late90s
10:15 < _ior> the options were java, php, or, uh, perl
10:16 < polar_> I have a problem with the installation of node.js on Centos.. When I run ./configure I have some errors.. Somebody can help me ? 
10:16 < _ior> (effectively)
10:17 < geNAZt> polar_: what are the errors ?
10:17 < SomeoneWeird> polar_, you probably need to update python
10:19 < TonkaTruck> polar_: No yum?
10:19 < polar_> @someoneweird Ok thanks I will try that. My current version is Python 2.4.3
10:20 < polar_> @TonkaTruck No :/ I have to install it with the sources
10:20 < SomeoneWeird> i think you need 2.7
10:38 < onr> polar_: you say python 2.4.3?
10:38 < polar_> @onr Yes but I upgraded it to python 2.7
10:39 < polar_> Now I seems to work  :)
10:39 < polar_> thanks @someoneweird :D
10:39 < onr> polar_: man why didn't you upgrade for 8 years :D
10:41 < polar_> onr: I use a old distribution based on CentOS : FAN Full Automated Nagios
10:49 < aandy> offtopic: hmm, anyone know which option i'm looking for? if you do # ls *, you get a formatted output with "subdir:" followed by listings. any way to not get the "subdir:" included in output?
10:52 < geNAZt> can i get the stdout of a worker to not be outputed at the master stdout ? instead os this i want it to write it in a file for each worker
10:52 <@Nexxy> geNAZt, put silent : true in the options hash of your call to fork
10:52 < geNAZt> worker.process.stdout is null, even when the online event emits
10:53 < geNAZt> am i able to get the stdout even with silent ?
10:53 <@Nexxy> I'm not sure
10:53 <@Nexxy> easy enough to find out :)
10:53 < geNAZt> yes moment :D
10:54 < fruitFly__>  I wanna code node.js, do some basic-intermediate video editing, read ebooks, maybe some google drive cloud integration MAYBE and other typical stuff... WHAT DISTRO should I try? I was thinking ubuntu, mint, fedora, arch... I'm ignorant though. What do you think?/msg ira ira 
10:54 < geNAZt> with silent: true i get stdout objects
10:54 < geNAZt> thanks
10:54 <@Nexxy> geNAZt, :)
10:55 < Shinister> what distro?
10:55 < Shinister> any
10:55 < Shinister> use windows if you want, doesn't matter
10:55 <@Nexxy> fruitFly__, ubuntu is easy, and with lots of support
10:56 < geNAZt> maybe debian 6 with xfce ?
10:56 < skope> debian is a good choice
10:56 < skope> i run arch+openbox
10:56 < skope> debian in my servers
10:57 < geNAZt> i run debian 6 minimal + xfce for my second workstation
10:57 < geNAZt> its a harm :D
10:57 < skope> but surely, ubuntu is the easiest if you haven't used linux ever
10:57 < skope> no not get frustrated to it immediately ;)
10:58 <@Nexxy> ubuntu is good for learning your way around a unixy system
10:58 <@Nexxy> then once you know enough for ubuntu to annoy you, move to something like mint?
10:58 < geNAZt> or centos
10:59 <@Nexxy> centos would feel like a step backwards to me
10:59 <@Nexxy> yum is atrocious
11:00 <@Nexxy> or at least it was the last time I subjected myself to it
11:00 < geNAZt> well if u work with openSuse / Suse its not that bad :D
11:02 < fruitFly__> geNAZt: Nexxy skope I was think mint, but wouldn't I experience some software compatibility issues with debian?
11:02 < skope> fruitFly__: like what?
11:03 < fruitFly__> video editing maybe? isn't it stable software, relatively older shit?
11:03 < fruitFly__> skope: 
11:04 < skope> fruitFly__: depends if you're using stable, unstable or testing
11:04 < skope> stable has older software, but they're.. well stable
11:04 < fruitFly__> I wanna do node, basic video editing, maybe some google cloud shit, read e books etc. Why debian over mint, just the stability?
11:05 < skope> well i prefer clean installs. but i guess mint or ubuntu is good for beginners
11:05 < fruitFly__> skope: Well I don't know what I'll be using. Eg I would like sublime text 2. Can I use on debian?
11:05 < skope> https://gist.github.com/2716568
11:06 < geNAZt> fruitFly__: you can use on debian whatever you want. if its not in the repos, maybe add some repos or compile it by yourself
11:06 < skope> there is always backports.org
11:08 < fruitFly__> geNAZt: What are repos? So I can use any package I want I just wont find it in the package manager? So potentially debian could have anything arch has?
11:12 < geNAZt> Repos are server that hold packages for debian
11:12 < geNAZt> You can add third party repos so the package manager will load them
11:12 < mboro> how do you get the absolute URL (including port) from express for a specific route?
11:13 < fruitFly__> geNAZt: if I add 3rd party packages to the repo are they available to ever other debian user in package manager? or are they only available in my package manager? I am noob :)
11:14 < geNAZt> no they are there for every user that has access to the package manager
11:14 < skope> you need to be root to use package manager
11:14 < geNAZt> skope: wrong :D
11:14 < skope> geNAZt: well sudo can do it too
11:15 < skope> but you have to have privileges to run it
11:15 < geNAZt> if u change the rights on the apt cache lock everyone can use it
11:15 < skope> is it very clever?
11:15 < geNAZt> no
11:15 < skope> pretty big security hole
11:15 < geNAZt> yes
11:15 < fruitFly__> i don't get it? Can I use ANY software in Debian if I compile it myself? Can I use everything arch can use?! Please elaborate a lil
11:16 < geNAZt> yes you can
11:16 < min|dvir|us> fruitFly__: you can't use software that was written for another OS.
11:16 < geNAZt> if you compile the source every software can run
11:17 < fruitFly__> geNAZt: min|dvir|us  FIIIGHT!
11:17 < skope> arch is nice because it has AUR
11:17 < fruitFly__> skope:  AUR?
11:17 < skope> https://aur.archlinux.org/
11:17 < skope> arch user repository
11:17 < fruitFly__> Should I install Mint 13 or 14?
11:18 < skope> never used mint, no idea
11:23 < jetienne> im back on the internet
11:23 < jetienne> fear me :)
11:24 < skope> never
11:24 < Pitel_IPEX> are there some ready to deploy apps in node.js? like, wikis, forums, cmss, irc clients, whatever...
11:29 < mmalecki> jetienne: OMG YO
11:30 < jetienne> mmalecki: yo man!
11:30 < jetienne> mmalecki: im back on the internet to defend my title on github :)
11:30 < skope> never leave internet again
11:32 < mmalecki> jetienne: hahaha, good!
11:33 < jetienne> mmalecki: how are things for you ? 
11:33 < mmalecki> jetienne: good, good :)
11:33 < mmalecki> been travelling a lot recently
11:38 <@Nexxy> and by travelling
11:38 <@Nexxy> he means drinking
11:39 < fruitFly__> does linux mint need to be on a primary partition? or at least it's /boot
11:46 < fruitFly__> does linux mint need to be on a primary partition? or at least it's /boot
11:47 < Shinister> I think as long as your bootloader is on a primary partition it should be fine
11:47 < Shinister> fruitFly__: if you're installing this on a boxen with windows as its make OS, take a look at wubi. Saves the hassle of repartitioning if you're not intending Linux to be the main OS of the system.
11:48 < fruitFly__> boxen? Shinister 
11:48 < SomeoneWeird> computer..
11:49 < fruitFly__> Shinister: I want linux to be my main os. Why would I use wubi instead of the linux partitioning tool?
11:50 < fruitFly__> Shinister: So I can only boot 4 different os's on my mbr harddrive?
11:50 < Shinister> if you want it to be the main os, then yeah repartition correctly
11:50 < Shinister> but resizing partitons isn't that fun
11:51 < fruitFly__> Shinister: so windows is on my machine now with 2 primary partitions.. those fucker. So I can only install 2 more os's?
11:52 < Shinister> prolly, most lunix distros will install grub on your windows partition and then use that to boot the extended partition oses IIRC
11:53 < Shinister> but your milage will vary with resizing partitions, keep in mind things like fragmentation
11:56 < fruitFly__> Shinister: I have 100 MB system reserved primary partition (NTFS) and C: (NTFS) primary partition... I'm installing Linux Mint 14 and don't want to fuck things up but possible also leave space for anpther os. How will mint put it's primary /boot partition in windows primary boot partition.. ARE YOU SURE? U sure it wont just make it's own primary boot partition? How large should I make it
11:56 < fruitFly__> ?
11:56 < Shinister>  and don't want to fuck things
11:56 < Shinister>                     up
11:56 < Shinister> erm, damn paste.
11:57 < Shinister> right, there is no guarentee this wont fuck things up and leave your computer in a non-booting state or not destroy data.
11:57 < Shinister> You'll probably be ok, but keep this in mind.
11:57 < Shinister> Wubi will totally negate any possibility of data being destroyed, which is why I recommended it for a new linux user.
11:57 < fruitFly__> Shinister: I'm just installing mint 14, can that really fuck my comp up.. really. I just wanna know if it will create another primary
11:58 < fruitFly__> Shinister: ok, thanks
11:58 < Shinister> yes it can really fuck your computer up :)
11:58 < skope> everything can happen
11:58 < Shinister> it probably wont.
11:58 < Shinister> but it could.
11:58 < Shinister> Well, let's step back a bit, why do you feel installing linux would help you with node?
12:11 < thealphanerd> Nexxy: http://blog.izs.me/page/3 you are famous
12:16 < SomeoneWeird> lol
12:24 < _geo> Hello, do i need to run an additional service on my vps server, so the domain (http://www.example.com) could point to my express app running at localhost:3000 ?
12:25 < geNAZt> with a proxy it could
12:25 < geNAZt> or with iptables
12:25 < geNAZt> depends if it is the only service you have
12:25 < geNAZt> and what webserver you have
12:27 < _geo> i don't have a web server apache2,etc installed, and probably will not be installed in the future, the server will always be used for expressjs applications
12:28 < geNAZt> well you need some kind of proxy for the nodejs instances
12:28 < geNAZt> if u dont want to run them on port 80
12:31 < _geo> well i could bind port 80,8080 without any problems, but how can the expressjs or nodejs manage multiple domains/subdomains ..
12:31 < _geo> like static.example.com,beta.example.com etc ? is there a nodejs module or does express manage all that?
12:31 < geNAZt> express has a vhost middleware for that
12:31 < geNAZt> http://stackoverflow.com/questions/5791260/how-can-i-configure-multiple-sub-domains-in-express-js-or-connect-js
12:32 < _geo> that looks the right tool to get the job done ;p
12:32 < _geo> thanks
12:32 < geNAZt> but if one application fails anything in this nodejs process breaks
12:33 < _geo> that sucks
12:34 < geNAZt> well its better to run the applications in a seperated process on a different port
12:34 < geNAZt> and have a proxy infront of that
12:34 < geNAZt> so if one application fails only this application is down
12:34 < geNAZt> not all
12:38 < _geo> i kind wanted to avoid using apache for this task, and try to stick with node.js from the beginning, but since using a proxy will provide stability to express application, then i'll use one..
12:38 < geNAZt> no not apache
12:38 < geNAZt> apache is the worst for this task
12:40 < geNAZt> http://haproxy.1wt.eu/ or https://www.varnish-cache.org/ or http://wiki.nginx.org/HttpProxyModule
12:44 < _geo> nginx looks promising
12:49 < geNAZt> here a little tut for setting up nginx as proxy: http://www.cyberciti.biz/tips/using-nginx-as-reverse-proxy.html
13:31 < prawnsalad> hey guys. trying to cut out memory leaks in a nodejs app, but the garbage collection isnt collecting a 'bound_this' object. webdev tools doesnt show where its held either: http://i.imgur.com/Mt3fxvl.png
13:31 < prawnsalad> any idea on how i can source this issue?
13:37 < jtomasrl> is it possible to have a variable only in the scope of a for
13:38 < prawnsalad> no
13:38 < prawnsalad> put the for inside a closure.. then it would have its own scope
14:13 < Industrial> Say I have a View and a Model, on `view.setModel(model);`, I would like to bind to events for changed attributes on the model. Should I just do one 'change' event on the model and then each time find out if there were properties changed that I should change in the view, or should I make the event name incorporate the changed attribute, and set up a listener in the view for each attribute?
14:15 < Industrial> like in the model: this.emit('change', 'attr1', 'val1'); or this.emit('change:attr1', 'val1');
14:31 < MI6> joyent/libuv: Ben Noordhuis master * 7f3c783 : unix: don't clobber errno in signal handler - http://git.io/rCROmA
14:37 < niix> any idea what this means? 'Invalid state; requests can only be made in the LoggedIn state, not the SentLogin7WithStandardLogin state'
14:37 < geNAZt> nixx: in which use case ? what are you trying to do ?
14:38 < drudge> niix: tedious?
14:38 < niix> drudge: yessir
14:42 < drudge> niix: i had this a while back, i think it had to do with a missing event handler
14:42 < drudge> like line 208 in lib/connection.js, i added message: function() {},
14:42 < drudge> inside the FINAL/events object
14:43 < niix> drudge: http://hastebin.com/vaguvifoka.js
14:44 < niix> let me try that too
14:48 < niix> drudge: what does the message function do?
14:48 < drudge> i left it blank, but without it it wouldn't transition to the final state
14:49 < niix> like so? http://hastebin.com/noqevimobo.js
14:49 < drudge> yeah
14:49 < niix> yeah same error :|
14:53 < jvanveen> hm, is the 80 char line thing really adopted in nodejs?
14:53 < jvanveen> it makes code so unreadable :S
14:55 < gildean> where does it say that?
14:55 < jrajav> That's completely a style issue
14:55 < strk> is there a signal I can send to node.js to force start of GC?
14:57 < jrajav> strk: http://simonmcmanus.wordpress.com/2013/01/03/forcing-garbage-collection-with-node-js-and-v8/
14:57 < jvanveen> gildean: https://github.com/felixge/node-style-guide
14:57 < jvanveen> im not a big fan of 80 char lines myself 
14:58 < jrajav> I made it up to "2 spaces for indentation"
14:58 < jvanveen> yea, i also just switched to 2 space indents
14:58 < jrajav> -_-
14:58 < purr> jrajav: ಠ_ಠ is an IRC client/IRC client framework.
14:58 < jrajav> Pshahaha
14:58 < jvanveen> and why 80?
14:59 < jrajav> Seriously though, use at least 4 for readability's sake.
14:59 < jvanveen> is that a terminal's max width?
14:59 < jrajav> Yes, it's legacy reasons, but many people now argue that it's the "proper" width
14:59 < jvanveen> yea, i think 2 space indents are no good for readability, but most of the nodejs code uses it
15:00 < jvanveen> dont want to differ from some habits
15:00 < gildean> i like 4 space indents more
15:00 < clondon> i like tab indents :P
15:01 < jvanveen> yea, its just a personal preference then
15:04 < niix> 10 spaces
15:06 < jrajav> Some people just want to watch the world burn
15:07 < jesusabdullah> four spaces good, two spaces bad!
15:07 < jesusabdullah> (I like two spaces, that's a literary joke)
15:12 < niix> this kind of spacing http://hastebin.com/vuduriyoro.coffee
15:14 < jrajav> I'm trying to figure out why that's even coffeescript
15:14 < fruitFly_> linux with or without codecs?!
15:14 < jrajav> For some reason that bothers me more than the indentatino
15:14 < Shinister> fruitFly_: are you going to use it for media?
15:15 < Shinister> and do you care about it being 100% free software?
15:15 < fruitFly_> Shinister: I will do some video editing (cutting clips), listening to some music watching some videos
15:15 < Shinister> Then you'll need the codecs.
15:15 < Shinister> Assuming this is media codecs you're asking about.
15:15 < fruitFly_> Shinister: I rather the free shit, I will be using it mostly
15:15 < jrajav> That's pretty much nothing but codecs.
15:16 < jrajav> "The free shit" will not cut it for video editing, trust me.
15:16 < Shinister> Yup
15:16 < Shinister> just install the codecs
15:16 < jrajav> You can get by with OGG for music
15:16 < jrajav> But music has it a lot better
15:16 < Shinister> but none of your stuff will be ogg, probably
15:16 < jrajav> MP3 < OGG < AAC
15:17 < geNAZt> < FLAC
15:17 < Shinister> well, they're not quite comparable
15:17 < jrajav> FLAC isn't the same type of codec
15:17 < jrajav> And "quality" doesn't make sense for lossless codecs
15:17 < Shinister> vorbis has like 3 different codecs, doesn't it?
15:17 < jrajav> Unless you mean in terms of compression, decoding speed, etc.
15:18 < jrajav> (In which case ALAC also beats that)
15:18 < Shinister> that's it. Ogg is a containe.
15:18 < Shinister> *container
15:18 < Shinister> so ogg can be flac
15:18 < Shinister> it can also be vorbis, which is comparable to mp3
15:18 < dob_> Is there any good article about nodejs exception handling? Currently writing my exceptions to my callback instead of throwing a exception from my module.
15:18 < Shinister> it can also be theora, which is video
15:19 < jrajav> In context I assumed that it was understood to be vorbis...
15:19 < jrajav> It wouldn't be the lossless or video formats..
15:19 < Shinister> until someone said flac, *shrugs*
15:20 < jrajav> Which was kind of silly
15:20 < fruitFly_> so what is the best audio format
15:20 < Shinister> Depends!
15:20 < jrajav> That depends highly on your criteria for "best"
15:20 < Shinister> Generally in everything there is no 'best'
15:20 < Shinister> there's different standards that are slightly optimised for their own use case
15:21 < fruitFly_> wuts aac good at... versus mp3
15:21 < jrajav> AAC is generally better at more representative audio quality at low bitrates and file size
15:21 < Shinister> WMA is good at low bit rates too
15:21 < Shinister> better than MP3s
15:22 < Shinister> but they're all lossy (except AAC-Lossless) so if you care about quality you wouldn't use any
15:22 < jrajav> Some people care about quality AND being able to fit more than 10 albums on their ipod
15:23 < jtomasrl> is it a good idea for logging users to receive their crenetial, generate a token and valiate requost based on that token?
15:23 < jtomasrl> credentials*
15:23 < Shinister> Then you've got the argument that the audio decoders in most personal music devices aren't great - so you'll not really notice much difference regardless of what you're throwing at it.
15:23 < Shinister> My old Nokia Lumia just sounded appauling regardless of the audio codec used
15:24 < fruitFly_> Shinister: what do you mean by bitrate
15:25 < jrajav> Also, both MP3 and AAC at about ~256kbps target VBR will be indistinguishable from lossless without extremely nice audio equipment and a very good ear
15:25 < rounce^work> http://en.wikipedia.org/wiki/Advanced_Audio_Coding#AAC.27s_improvements_over_MP3
15:25 < jrajav> If someone says that they can hear the difference on consumer equipment they're straight up lying
15:25 < Shinister> fruitFly_: http://en.wikipedia.org/wiki/Bit_rate
15:25 < jrajav> The main difference will be that AAC has slightly smaller filesizes
15:25 < Shinister> yeah
15:25 < rounce^work> well
15:25 < rounce^work> err
15:25 < rounce^work> not exactly
15:25 < rounce^work> well
15:26 < rounce^work> more like "apples and pears"
15:26 < jrajav> Those are things that exist.
15:26 < Shinister> it's to do with how many bytes of data are required per unit of time
15:26 < Shinister> well bits of data ;]
15:26 < Shinister> almost like a rate of them
15:27 < fruitFly_> are mp3s and aac processed at the same bitrate?
15:27 < jrajav> You can set it, for each
15:27 < jrajav> That's what "kbps" is
15:27 < jrajav> kilobits per seconds
15:27 < Shinister> using compression, like mp3 or aac it'll be more clever about how it stores the file, rather than an uncompressed audio steeam - which'll be perfect quality but huge file size
15:27 < jrajav> *second
15:27 < rounce^work> Also, both MP3 and AAC at about ~256kbps target VBR will be indistinguishable from lossless without extremely nice audio equipment and a very good ear
15:27 < rounce^work> ^ WTF?
15:28 < rounce^work> what speakers do you have? a pair of piezo elements?
15:28 < jrajav> ^ straight up lying.
15:28 < Shinister> I can tell 320k mp3s from flac easily
15:28 < Shinister> my audio equiptment is sort of medium range
15:29 < rounce^work> I've got a pair of (pretty decent, but nowhere near the best) studio monitors for music production etc, and the difference between 320k and wav is like night and day
15:29 < fruitFly_> what is the limiting factor when playing audio files? do audio files by default play at the same bit rate, or is there bitrate determined by the processors ability to process the bits against some algorithm?
15:29 < jrajav> Oh, yes, I clearly wasn't including studio monitors in "extremely nice audio equipment"
15:30 < jrajav> -_-
15:30 < purr> jrajav: ಠ_ಠ is an IRC client/IRC client framework.
15:30 < funkbox> what do y'all use for logging to syslog. looks like ain does it 
15:31 < fruitFly_> what is the limiting factor when playing audio files pertaining to bitrate? do audio files by default play at the same bit rate, or is there bitrate determined by the processors ability to process the bits against some algorithm?
15:31 < Shinister> the bit rate is dependent on the file
15:32 < Shinister> it's encoded at a bit rate when you rip a cd
15:32 < Shinister> say you rip it with iTunes, you can tell iTunes what bitrate and audio codec to use
15:32 < Shinister> the difference being sound 'quality' in relation to file size
15:33 < fruitFly_> so when playing a song it sounds better at certain (slower) bitrates?
15:34 < Shinister> you then get things like variable bit rates, where the encoder will use what's best for that part of an audio file, so a moment of silence will have a low bit rate (you don't need much to encode that well), but higher bitrate for other sections 
15:34 < dob_> Is there any good article about nodejs exception handling? Currently writing my exceptions to my callback instead of throwing a exception from my module.
15:34 < Shinister> higher bitrate is better
15:35 < fruitFly_> Shinister: AAAAAAh... I get it
15:35 < rounce^work> dob_:  try/catch?
15:35 < Shinister> there's more bits to encode each second of the song
15:35 < dob_> should i use this or use something like callbacks or event emitters? 
15:35 < Shinister> so more detail is held
15:35 < fruitFly_> Shinister: so a slowr bitrate would result in less quality AND LESS FILE SIZE?
15:35 < Shinister> yes
15:35 < Shinister> :)
15:35 < Shinister> lower, not slower
15:35 < fruitFly_> lol.. lower yes
15:35 < Shinister> so less bits are used to encode the file
15:36 < cloudbender> Good morning.  As you were.
15:36 < fruitFly_> so is the audio cd like super duuper quality and the audio file is a try hard?
15:36 < fruitFly_> Shinister: 
15:36 < Shinister> pretty much ;)
15:36 < fruitFly_> Shinister:  lol
15:36 < fruitFly_> Shinister:  ur good
15:37 < Shinister> but then you get lossless file formats, like flac
15:37 < Shinister> but they're much larger file size
15:38 < Shinister> most free software users try and avoid mp3 due to licencing reasons, it's not a free format that anyone can use - people have to lay royaltees for it
15:38 < Shinister> so Apple pay licences for iTunes to ship with an mp3 decoder
15:39 < fruitFly_> Shinister: when do u get lossless formats?
15:39 < Shinister> when quality really matters
15:40 < fruitFly_> so like audio cds use flac?
15:40 < Shinister> no
15:40 < fruitFly_> AAAAAAAAAAAH
15:41 < fruitFly_> Shinister: o u were just saying that u decode to flac when u want quality
15:41 < fruitFly_> Shinister:  or encode*
15:41 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:42 < Shinister> flac is still compressed, but in such a way that no quality has been lossed
15:42 < Shinister> lost
15:42 < Shinister> http://en.wikipedia.org/wiki/FLAC
15:42 < Shinister> can explain it a lot better than me ;)
15:43 < fruitFly_> Shinister:  THANKS BRO U DA MANNN!
15:43 < Shinister> http://en.wikipedia.org/wiki/Red_Book_(CD_standard) <- how audio is stored on a cd
15:43 < fruitFly_> Shinister: isn't it just stored like moth's eyeballs
15:44 < Shinister> well it's pits that reflect a laser
15:44 < fruitFly_> they're concave? Shinister 
15:44 < fruitFly_> thought they wer vex
15:53 < kaseano> I've been at this ALL day if anyone can point me in the right direction, I'm making a url post request to my nodeJS server from a .NET app.  about 1 out of 10 times, the request will idle, eventually the .NET request will timeout saying the request was cancelled.  However if while it's idling, I stop and start the nodeJS server, the idling request will complete
16:03 <@Nexxy> kaseano, you're probably leaving a callback uncalled?
16:03 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:03 < kaseano> I can check thanks Nexxy
16:03 <@Nexxy> kaseano, like broken conditionals that end up not calling res.render/res.json/res.end w/e you're using
16:04 <@Nexxy> or a callback that never fires for res to get finished
16:04 < Sly> NEXXY <3
16:04 <@Nexxy> SLY <3
16:04 < Sly> How are you?
16:04 < kaseano> yeah that's a good idea let me look through it
16:04 <@Nexxy> fantabulous
16:04 < Sly> That's good. :D
16:04 <@Nexxy> and your lovely self?
16:04 < Sly> The Mexican food I ate last night is disagreeing with my stomach.
16:04 < Sly> Other than that, I'm good. :D
16:05 <@Nexxy> if mexican food disagrees with you
16:05 <@Nexxy> you're wrong!
16:05 < Sly> rofl
16:05 <@Nexxy> mexican food is always right.
16:05 < Sly> I'm really not even supposed to eat it.
16:05 < Sly> Celiacs disease.
16:05 <@Nexxy> oh ;<
16:06 < Sly> Yeah. :3
16:06 < Sly> I never listen, though. Gluten free food? No thanks.
16:13 < fruitFly_> when ininstalling linux mint 14 alongside windows should I make a /boot and /home, or should I just install in /
16:18 < fruitFly_> when ininstalling linux mint 14 alongside windows should I make a /boot and /home, or should I just install in /
16:35 < kenperkins> say you have an NPM package that's globally installed with a bin entry point
16:35 < kenperkins> and say this package needs a config file
16:35 < kenperkins> where should that live?
16:36 <@TooTallNate> kenperkins: ~/.my-config-file is a popular choice
16:36 < Mtoko> Hello everyone, is anybody familiar with d3.js ?
16:36 <@TooTallNate> kenperkins: but really every OS has their own "place" defined
16:36 < kenperkins> but isn't the config then in the ~ of the current user?
16:37 < niix> I need the EMCA Standard on tape
16:38 < niix> and is this correct? http://hastebin.com/dudiyaheqe.js
16:38 < kmczn> Mtoko: just ask your question. if anyone can answer they'll speak up. :)
16:39 <@TooTallNate> kenperkins: yes but that's the only place you can be confident that it's gonna be writable
16:39 < kenperkins> fair enough
16:39 <@TooTallNate> kenperkins: unless your config file doesn't need editing
16:39 <@TooTallNate> then you can just put it in your package somewhere
16:39 < kenperkins> well, it won't need editing once it's on a box
16:39 < kenperkins> but it's not part of the package
16:39 < Mtoko> kmczn: Thanks, well, here it is http://tinkerbin.com/hqVr2Hgs , i have trouble mapping data correctly to the dom
16:40 <@TooTallNate> kenperkins: without knowing the details, i'd say a per-user config file is fine :)
16:40 < kenperkins> rgr
16:40 < Mtoko> i think i have to map my data to an array of array, i explained everything in the source code
16:40 < Mtoko> http://tinkerbin.com/hqVr2Hgs
16:40 < kenperkins> so then do you do "var config = require('~/config.json');" or something like that?
16:40 < kenperkins> can you even put ~ in require path?
16:42 < jtomasrl> how could i send login credentials to an API? Basic auth? or just post data?
16:42 < quidnunc> Is it possible to 'npm install' per user? I don't want to install into system and I don't want to install into the current directory.
16:43 < listochkin> quidnunc: go to user dir and install there
16:44 < listochkin> quidnunc: it will create node_modules dir and npm will look into it before looking into global
16:44 < listochkin> quidnunc: to support binaries add ~/node_modules/.bin to your PATH
16:45 < quidnunc> listochkin: by "user dir" you mean the user's home directory, ~/ ?
16:48 < listochkin> quidnunc: yep, also any directory above your project directory will do. For example, ~/node-projects/project-A Installing into ~/node-projects and putting ~/node-projects-node-modules/.bin into your PATH will work, too
16:49 < listochkin> ~/node-projects/node-modules/.bin
16:50 < listochkin> quidnunc: https://npmjs.org/doc/folders.html
16:50 < kenperkins> anyone here familiar with the blub paradox?
16:50 < quidnunc> listochkin: Can I just change prefix?
16:51 < listochkin> quidnunc: you mean, `node_modules`? No, but you can create a directory named `lib` for example, and symlink `node_modules` to it
16:52 < listochkin> quidnunc: as far as I know, `node_modules` is set in stone at this point
16:56 < j105rob> any ideas why my http server would be processing a request 2 times?
16:56 < shapeshed> j105rob: paste some code plz
16:57 < j105rob> pastie http://pastebin.com/aRBr8ykc
16:57 < neo314> alguien habla español por que mi ingles es horrendo
16:58 < cronopio> neo314: si, hay varios aqui que hablan tambien español, pero para comodidad de todos ingles es el usado siempre
17:00 < j105rob> neo314: Eso es lo que es por traductor Google!
17:01 < j105rob> shapeshed: any ideas?
17:03 < cnd> I'm finding npm dedupe isn't working, it's actually breaking my dependencies
17:03 < cnd> is it known to be buggy?
17:07 < xk_id> is there a unix way to see the number of connections made by a process? I'm trying to see if my node app is using the same "keep alive" http connection, or creating new ones for each request.
17:07 < Otto__> Hi, is there a nodejs security mailing list like there is for rails?
17:11 < dob_> can i create a second node_modules folder and add this as search path for require?
17:11 < Mtoko> Someone please gimme a hand fixing my d3js problem :) http://tinkerbin.com/hqVr2Hgs 
17:12 < Mtoko> having trouble mapping data to dom
17:15 < kmczn> Mtoko: see https://github.com/mbostock/d3/wiki/Selections#wiki-data
17:15 < kmczn> there's an example of nested data
17:16 < Mtoko> kmczn: this is where i came from
17:16 < Mtoko> kmczn: can't figure it out neither
17:17 < Mtoko> kmczn: oh wait, not there, i came from here http://bost.ocks.org/mike/nest
17:17 < Mtoko> kmczn: reading your link, i will tell you if it is of any help, ta
17:18 < kmczn> Mtoko: have you tried formatting your data like you have at the bottom of your comments?
17:18 < someprimetime_> do jade templates always dynamically serve up the html? or can they be cached?
17:24 < spots> hi
17:26 < valterguy> hi spots 
17:28 < spots> i have a simple question (at least i hope it is simple), i want to make a node server that connects to a device via rs232, but the server should get a value from the device every second and serve that value. how would one do that?
17:28 < spots> i just don't want every request to make a new call to the rs232 device
17:29 < Mtoko> spots: you could cache the device response in a file
17:29 < Mtoko> spots: but how do you want the device to send a new value every second if you don't want to probe it ?
17:30 < Mtoko> spots: or use Settimeout()
17:32 < spots> could i just keep it in an variable?
17:32 < Mtoko> spots: http://nodejs.org/api/timers.html
17:33 < spots> since theres only one writer and multiple readers there should be no race conditions
17:33 < Mtoko> spots: you can also push the value to an array ?
17:35 < spots> i just don't know if i write something to a variable while it's read
17:36 < spots> could that produce errors?
17:36 < Mtoko> var array = []; setTimeout( array.push(probeDevice)), "1000";
17:37 < Mtoko> IIRC
17:39 < ajostergaard> spots: surely it's not possible in a single threaded app?!?
17:39 < cloudbender> Uart programming, my favorite !!!
17:40 < cloudbender> Is there a slip library these days ?
17:40 < ajostergaard> freak ;)
17:41 < ajostergaard> of course i'm just jealous as uart programming is way out of my comfort zone
17:42 < spots> ajostergaard: with a timeout its not single threaded anymore, or is it?
17:43 < cloudbender> It's easier with a slip ip layer over the ports
17:43 < ajostergaard> Very much so - in the end everything is sequential.
17:44 < spots> cloudbender: its not ip, the device has its own protocol
17:44 < Mtoko> spots: spawn multiple threads woo
17:46 < ajostergaard> mtoko: but those threads wouldn't have access to the same variables so still no chance of read and writing the same variable at the same time (or have i completely misunderstood something fundamental?)
17:46 < ajostergaard> cloudbender: still scary
17:49 < cloudbender> spots what kind of device is it ?
17:49 < spots> weather station
17:49 < cloudbender> wow, where can I get one of thos ...
17:50 < cloudbender> the documentation has no suggestions ?
17:51 < cloudbender> it probably cites a model for datalogging somehow
17:51 < spots> the documentation only describes the serial protocol
17:51 < cloudbender> What operating system on the server ?
17:51 < spots> linux
17:51 < quidnunc> Is there any way to get npm to work with debian's checkinstall?
17:52 < spots> would something like that work? http://pastebin.com/raw.php?i=8gNegRqe
17:52 < geNAZt> spots: yes
17:52 < quidnunc> Somehow checkinstall npm install -g is putting files in my home folder
17:52 < spots> or better, is it ok to do this?
17:53 < Gabriel403> quidnunc: dont need to sudo?
17:53 < quidnunc> Gabriel403: Yes I was using sudo
17:54 < geNAZt> http://hastebin.com/jaliguxule.js
17:54 < geNAZt> if you have only one data pusher its okay
17:54 < cloudbender> spots: a primer ... http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html
17:54 < Robert00001> In windows, -g puts modules in %APPDATA%\npm\node_modules
17:55 < owen1> i have process.title = 'foo'  but   ps aux|grep foo shows nothing. how to set the process name?
17:55 < geNAZt> owen1: which os ?
17:55 < owen1> geNAZt: mac
17:55 < geNAZt> its buggy on mac
17:55 < owen1> geNAZt: ok. i'll try on centos
17:56 < spots> cloudbender: i just have to open stty, seen a nice serial module on npm
17:56 < geNAZt> owen1: https://github.com/joyent/node/issues/3687
17:56 < spots> or is there something you would recommend for serial in node?
17:57 < cloudbender> Well, his primer assumes a terminal as the 'device', whereas you have a weather station.
17:57 < owen1> geNAZt: thanks
18:04 < xk_id> is there a unix way to see the number of connections made by a process? I'm trying to see if my node app is using the same "keep alive" http connection, or creating new ones for each request.
18:04 < geNAZt> xk_id: you can filter the iptable
18:04 < CoverSlide> it creates new ones
18:04 < xk_id> CoverSlide: and you are basing that on what?
18:05 < geNAZt> http://de.wikipedia.org/wiki/Lsof
18:05 < CoverSlide> this was an issue already discusses
18:05 < CoverSlide> a while ago
18:06 < xk_id> CoverSlide: in what context? 
18:06 < CoverSlide> using keepalive http connections
18:06 < Robert00001> why de.wikipedia.org? most people speak english here.
18:06 < xk_id> CoverSlide: because, this: https://groups.google.com/forum/m/?fromgroups#!topic/nodejs/fD0yz9bOiD4
18:06 < geNAZt> yes and when i type in wikipedia its german
18:06 < geNAZt> and to change it you only have to switch 2 chars
18:07 < geNAZt> not that hard or ?
18:07 < Robert00001> Or click english in the sidebar
18:07 < CoverSlide> aww simple.wikipedia.org doesn't have an entry for lsof
18:08 < tippenein> If I'm populating a database with a python script and serving a node.js site WITH that database, will there be problems when the both try to  connect?
18:10 < xk_id> geNAZt: lsof is not real time, I need to monitor how many connection the app opens
18:10 < CoverSlide> you could override net.Socket
18:10 < CoverSlide> or was it net.createConnection?
18:10 < CoverSlide> I did something like this
18:10 < geNAZt> xk_id: use watch ?
18:11 < geNAZt> watch lsof
18:11 < CoverSlide> i'd have to fish through my code
18:11 < geNAZt> http://alexander.holbreich.org/2010/11/lsof/
18:11 < geNAZt> here are some lsof usage examples
18:15 < Robert00001> almost 1000 users
18:16 < spots> what is recommended for rest? restify?
18:16 < CoverSlide> restify works
18:17 < spots> or is there a better way?
18:18 < CoverSlide> well what do you want your app to have / do?
18:18 < spots> express supports rest to right?
18:19 < CoverSlide> name some features of it
18:19 < CoverSlide> express does
18:19 < spots> rs232 to rest "adapter"
18:19 < azylman> REST isn't a thing that something supports, it's just recommendations to design your API
18:19 < azylman> So you can make a RESTful API in Express
18:19 < CoverSlide> it's less designed for REST in particular and more geared for websites
18:20 < azylman> And I think restify provides methods and stuff to make that easier, but I've never used restify
18:20 < nlf> use what makes you happy. all you really need is a simple way to define routes
18:20 < CoverSlide> personally, i'd just use a simple routing library and the http module
18:20 < nlf> CoverSlide: jinx
18:21 < nlf> restify is pretty nice, express works, what was the other one i saw recently.. percolator?
18:21 < CoverSlide> that's a new one i haven't heard of
18:21 < nlf> seemed ok
18:21 < nlf> a basic REST api is such a simple thing that you don't need much
18:22 < spots> it just have to be lightweight, dunno if express is as lightweigth as restify if i remove all the page rendering stuff
18:23 < nlf> if it's just for a REST api and it *has* to be lightweight, express is probably not what you want
18:23 < geNAZt> spots: if u want it lighweight, use the http nodejs module and parse the path out of it
18:23 < CoverSlide> that's always an option too
18:23 < spots> geNAZt: that's what i thought of, but it should be easy to maintain
18:24 < geNAZt> spots: that is in your hand
18:24 < nlf> spots: then find a routing library
18:24 < nlf> use that on top of the http core library and call it a day
18:26 < spots> many to choose from :( - https://github.com/joyent/node/wiki/modules#wiki-web-frameworks-routers
18:27 < geNAZt> journey looks the best imo
18:27 < Robert00001> many popular modules use connect
18:28 < spots> geNAZt: that's the one i'm looking at right now :)
18:28 < geNAZt> but connect is too much for his needs
18:28 < cloudbender> U'm, how do I comment in HTML ?  Prepared for insults.
18:28 < geNAZt> <!-- comment here -->
18:28 < igl> lol
18:29 < xk_id> geNAZt: I'm getting *something* with "lsof -p xxx -r 1", but I'm not really happy...
18:29 < xk_id> i.e I don't know what to infer from it
18:35 < CoverSlide> the "routes" package is what the npm site uses, seems sane enough
18:36 < geNAZt> xk_id: try this: lsof -r 1 -i4 | grep node
18:37 < spots> CoverSlide: https://github.com/gett/router this one?
18:38 < CoverSlide> https://github.com/aaronblohowiak/routes.js
18:38 < CoverSlide> you could use that one too
18:38 < xk_id> geNAZt: almost only  "localhost:52529->localhost:6379 " kind of stuff, and lots of it
18:38 < xk_id> geNAZt: basically the connections to the outside host do not show up
18:40 < geNAZt> one moment pls
18:43 < geNAZt>  netstat -an | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\:<port of your application>' | sort | uniq -c
18:43 < interurbana> Hi to all! I try to run express on osx and I receive this error http://pastebin.com/xW6tVPG7
18:43 < geNAZt> outputs something like this: 
18:43 < geNAZt>   18010 192.168.1.106:8080
18:43 < geNAZt> 18010 conenction on my node service
18:44 < xk_id> what do I substitute <port of...> with?
18:44 < geNAZt> there u must fill in the port of your node application
18:44 < CoverSlide> interurbana: what version of express, and what outdated tutorial are you copy-pasting from?
18:44 < geNAZt> for me its port 8080
18:44 < CoverSlide> http://expressjs.com/api.html#bodyParser
18:44 < xk_id> geNAZt: of the client?
18:44 < CoverSlide> ^ is probably what you want instead
18:44 < geNAZt> the server
18:45 < xk_id> ok
18:45 < xk_id> well, it doesn't return anything
18:45 < interurbana> ok thasnk 
18:46 < geNAZt> oO it should
18:46 < xk_id> I'm under os x btw
18:46 < geNAZt> if you have active connections to the server
18:46 < Octagonking> I'd like my file, written with the IRC library, to respond to /me events as well as /msg events.
18:46 < geNAZt> well........
18:46 < geNAZt> damn os x
18:46 < Robert00001> ?
18:48 < niix> would it be weird to develop a basic site in express?  I like the idea of having node incase I need to add any additional server side functionality
18:49 < Octagonking> How can I add a listener to listen to /me events using the IRC library
18:49 < ashnur> does Node.js support the `let` keyword?
18:50 < bradleymeck> ashnur: no
18:50 < CoverSlide> ashnur: only with the --harmony flag
18:50 < ashnur> thanks
18:52 < geNAZt> xk_id: if this all doesnt work use a connection counter in node
18:52 < geNAZt> it is dirty as hell but it works
18:53 < xk_id> geNAZt: have you worked with the 'request' library?
18:54 < geNAZt> yes i builded the crawler with you :D
18:54 < xk_id> :P
18:54 < xk_id> it's almost ready, btw
18:54 < geNAZt> nice
18:55 < Octagonking> I'd like my file, written with the IRC library, to respond to /me events as well as /msg events.
18:55 < xk_id> geNAZt: how did this guy count the connections? https://groups.google.com/d/topic/nodejs/fD0yz9bOiD4/discussion
18:56 < xk_id> If I can't figure it out how to connect connections, I'm just going to use the 'http' library instead of 'request' and do the exact code in this post. and that's that
18:56 < xk_id> *how to count connections
18:57 < geNAZt> he counts the connection event occurs
18:57 < geNAZt> and the close event occurs
18:57 < geNAZt> and => connected - ended => current connected
18:57 < spots> hmm how can i make file socket in node?
18:58 < geNAZt> spots: unix socket file or file descriptor ?
18:58 < spots> unix socket, i want to simulate a stty with node
18:58 < Octagonking> How can I add a listener to listen to /me events using the IRC library
19:00 < geNAZt> so its a file descriptor ?
19:00 < geNAZt> or a real unix socket
19:00 < MI6> joyent/node: bnoordhuis created branch issue1776 - http://git.io/bJlL_A
19:01 < geNAZt> -F, --file=DEVICE
19:01 < geNAZt> 	      open and use the specified DEVICE instead of stdin
19:01 < geNAZt> from the stty manual
19:01 < geNAZt> it sounds like a file descriptor
19:01 < spots> i want node to create a /home/foo/dummystty
19:01 < spots> for bidirectional access
19:02 < spots> a file descriptor for me is more a less the "handle" of an opened file
19:03 < neo314> anyone can help me with this problem https://gist.github.com/4685277
19:03 < niix> where is the documentation on doing this in jade? http://hastebin.com/dawuvowewi.coffee
19:03 < geNAZt> if u want a unix socket: http://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener
19:03 < geNAZt> the 3rd example
19:05 < jtomasrl> when using bcrypt i need to store the hash and the salt?
19:05 < spots> geNAZt: thanks
19:06 < gildean> jtomasrl: yes
19:07 < gildean> and the salt should be random and unique
19:08 < jtomasrl> yup
19:10 < Octagonking> the salt should be yummy as well, jtomasrl
19:12 < jtomasrl> got it :P
19:16 < MI6> joyent/libuv: bnoordhuis created branch fix-mingw - http://git.io/80G3ZQ
19:21 < fruitFly_> Helphttp://superuser.com/questions/544580/dual-boot-modular-partitioning
19:23 < segomos> niix: http://bit.ly/VwLFbT
19:23 < niix> segomos: heh, yeah I figured it out
19:23 < niix> thanks :)
19:25 < MI6> joyent/node: isaacs created branch stream-nodata-noteof - http://git.io/u1WEtQ
19:44 < ndimatteo> hello all, I'm wondering how to write an upstart job for forever.js
19:48 < Robert00001> 1.03k users, and no activity...
19:53 < cloudbender> ok, ready for threading, c'mon send it, right over home plate, c'mon ...
19:57 < segomos> ready for threading?
20:02 < MI6> joyent/node: isaacs master * 7e1cf84 : stream: Don't signal EOF on '' or Buffer(0)  Those values, if passed to t - http://git.io/HxkdWA
20:06 < wroathe> I really don't know a lot about the performance of Node but is this video a valid critique? https://www.youtube.com/watch?v=1e1zzna-dNw
20:06 < wroathe> Or is he just trolling?
20:07 < geNAZt> its a troll
20:07 < geNAZt> he is using iis
20:08 < geNAZt> :D
20:10 < wroathe> geNAZt: How do you know that? I don't see any reference to IIS in the video.
20:11 < geNAZt> look his other videos
20:11 < geNAZt> and his company
20:12 < segomos> how do i connect nodejs to my NIC card?
20:13 < wroathe> I'm not planning on building anything of note or anything like that. I'm just mainly curious what need nodejs fulfills in the current landscape...
20:13 < wroathe> Or if it's just a cool novelty project
20:13 < geNAZt> it handles many concurrent connections
20:13 < wroathe> geNAZt: Doesn't NGINX also?
20:14 < geNAZt> and its one of the first languages that dont break with new html5 things like websocket or datachannels
20:15 < geNAZt> try to use vb.net, php, ror or jsf and try to hold websockets
20:15 < geNAZt> then you know what i mean :D
20:16 < wroathe> I'm seeing a lot of write ups that talk about including either apache or nginx with a node installation... 
20:17 < wroathe> Maybe I'm just not understanding what's going on but why would you need to do that?
20:17 < wroathe> http://stackoverflow.com/questions/11079145/why-install-server-nginx-apache-with-node-js
20:17 < geNAZt> Nginx does a few things faster (and in some cases easier to configure) than Node.js: proxying, url rewriting, http caching, redirection, static file serving, and load balancing.
20:17 < geNAZt> thats the valid answer
20:17 < wroathe> I see that
20:18 < wroathe> But what I mean is if Nginx is doing those things than what is Node bring to the table
20:18 < wroathe> Node bringing
20:18 < wroathe> sorry
20:18 < geNAZt> dynamic programming language for webapplications
20:18 < geNAZt> like php
20:18 < geNAZt> but not so ressourceheavy
20:18 < geNAZt> and much nicer
20:18 < geNAZt> and faster
20:19 < wroathe> So basically it's just because people like writing Javascript for web applications in place of PHP or Ruby or something like that.
20:19 < Havvy> More in place of PHP.
20:19 < wroathe> PHP is gross
20:19 < geNAZt> no its the question of the use case
20:19 < Havvy> I can't see somebody wanting to replace Ruby with JS...
20:19 < Havvy> Also, I use Node.js for my IRC bots.
20:19 < geNAZt> if you need websockets or bidirectional communication to the client php or ruby cant do that
20:19 < wroathe> Havvy: Hubot?
20:20 < Kakera> I use Node.js for this http://steamcommunity.com/id/dota2bot/
20:20 < Havvy> wroathe: My own framework. Only libraries it is using is SimpleSets and this Protocol thing I'm trying to get rid of.
20:21 < Havvy> (The protocol thing was a test of using Clojure's protocols in JS. It failed.)
20:21 < wroathe> Havvy: Ahh
20:22 < Havvy> https://github.com/havvy/nrc  (though I've got architectural changes unpushed)
20:23 < wroathe> So for most people Node is used as a framework for web applications and most of the actual server stuff is handled by either apache or nginx or some other alternative
20:24 < zeromodulus> Could node be called a minimal framework? Kind of like Sinatra?
20:24 < wroathe> zeromodulus: Express seems very similar to Sinatra to me
20:24 < wroathe> From what I've seen
20:25 < zeromodulus> Oh, sweet.
20:26 < CoverSlide> express was designed to be similar to sinatra
20:27 < CoverSlide> and node isn't a framework, it's a javascript runtime
20:27 < Kakera> about sockets again
20:27 < Kakera> I just discovered a curious thing
20:28 < Kakera> if you try to connect using the same socket that's currently trying to connect, you'll get an error
20:28 < Kakera> Error: connect Unknown system errno 114
20:28 < Kakera> makes sense so far, right?
20:28 < CoverSlide> ok
20:29 < CoverSlide> they probably should fix that unknown errno
20:29 < Kakera> however, if I handle the 'error' event and try to connect again after that, it works perfectly
20:29 < CoverSlide> looks like it's EALREADY
20:29 < Kakera> using the same socket
20:29 < CoverSlide> hm
20:30 < Kakera> so basically, triggering an error is the only way to 'cancel' a connection and reuse the socket object for another connection
20:30 < Kakera> without waiting for ETIMEDOUT
20:30 < Kakera> I'm not sure if that's the intended behavior
20:31 < CoverSlide> so if we were writing a bug report, what would you put under "expected outcome"
20:31 < CoverSlide> because this is a hack that noone should be doing anyway
20:31 < CoverSlide> do you want to reuse the socket object?
20:31 < Kakera> either to error again, or to have a non-hacky way to cancel a connection
20:31 < Kakera> yes, I do
20:31 < CoverSlide> well if you close a socket, technically you have no reason to use it anymore
20:32 < Kakera> the docs specifically state that instantiating a Socket object is useful if you want to reuse it after it's closed
20:32 < CoverSlide> does it?
20:32 < Kakera> Normally this method is not needed, as net.createConnection opens the socket. Use this only if you are implementing a custom Socket or if a Socket is closed and you want to reuse it to connect to another server. 
20:33 < CoverSlide> so what if you close the socket, then call connect?
20:33 < CoverSlide> or destroy it rather?
20:33 < Kakera> destroying throws a weird assertion error
20:34 < Kakera> I mean, trying to connect after destroying
20:34 < CoverSlide> so destroy doesn't work at all?
20:34 < CoverSlide> hmmm
20:34 < Kakera> whereas if you close an open connection the right way (calling end() and all), then it works
20:35 < Kakera> but end() doesn't work for a pending connection
20:37 < Kakera> I'm not even sure what exactly the issue is here: the fact that 'error' refreshes the socket, that there is no way to cancel a connection in a non-hacky way, or that destroying the socket makes it unusable
20:38 < CoverSlide> i say report an issue
20:38 < Kakera> I guess
20:38 < CoverSlide> the core devs can discuss it over length as see what happens
20:38 < CoverSlide> and what should be done about it
20:38 < CoverSlide> by the way, you're using the latest stable, right?
20:39 < Kakera> yeah
20:39 < CoverSlide> k
20:39 < CoverSlide> well write up a test case
20:39 < CoverSlide> and make a GH issue
20:40 < Sicp> and call 911
20:40 < Sicp> and file a report to your local council
20:48 < bnoordhuis> Kakera: core dev here. we're not changing that
20:49 < Kakera> bnoordhuis, why is it like that?
20:49 < bnoordhuis> Kakera: because that's how it works
20:49 < bnoordhuis> i.e. you cannot reconnect an os-level socket either
20:50 < bnoordhuis> we could paper over that in node but we don't and we won't
20:50 < Kakera> that's not the issue here
20:50 < Kakera> you _can_ reconnect a socket after it's properly closed
20:50 < Kakera> and you _can_ reconnect it after it errors out
20:50 < bnoordhuis> is it about the timeout?
20:50 < Kakera> not exactly
20:51 < supster> `npm rebuild bcrypt` fails due to permission errors when node_modules is owned by root - i have to use --unsafe-perm to get it to work - is this expected and what i should be doing?
20:51 < bnoordhuis> supster: chown user:user node_modules ?
20:51 < bnoordhuis> probably add -R
20:52 < supster> but the app is supposed to run as root
20:52 < bnoordhuis> really? why?
20:52 < livinded> if you're running as root you're doing it wrong
20:53 < livinded> unless it's just to bind to port 80 then drop
20:53 < supster> right ok
20:53 < tjfontaine> and there are ways to do that without being root
20:53 < livinded> ya
20:53 < CoverSlide> iptables++
20:53 < supster> who should i be running as and who should own the files? this is on a production where a single instance of the app is running from /srv started by upstart
20:54 < bnoordhuis> or authbind
20:54 < livinded> and if you are doing that you should look at the unix-groups module unless you're using 0.9.x because 0.8.x and below don't drop supplemental groups
20:54 < tjfontaine> or capabilities
20:56 < Kakera> not exactly
20:56 < ajostergaard> supster: there are cases where running as root is the right thing to do but they are so rare nobody here will believe you need to (i can't actually think of any cases right now but i guess i could if i had to)
20:56 < Kakera> oops wrong window
20:57 < supster> ajostergaard: right. i realize i do not need to be running as root -- so what user should i run as and who should own the source files? nobody?
20:57 < ajostergaard> kakera: have you taken your socket discussion out of here? it's interesting :(
20:57 < bnoordhuis> supster: user nobody is usually a good choice
20:57 < bnoordhuis> no login shell, restricted access
20:57 < ajostergaard> supster: yep - nobody
20:57 < Kakera> I'm trying to make a test case
20:58 < ajostergaard> :)
20:58 < Kakera> interesting
20:59 < supster> ok, thanks! i'll give it a try and see how that works... thankfully i don't need to bind to port 80 so it should be no problem
20:59 < Kakera> reconnecting right after the 'error' (or the subsequent 'close') event throws an AssertionError
20:59 < Kakera> however, if you wait at least 10ms, it works
21:00 < bnoordhuis> Kakera: handle != self._handle, that assertion?
21:00 < Kakera> yes
21:00 < bnoordhuis> i wrote that :)
21:00 < Kakera> let's try it with destroying
21:01 < Kakera> could you explain what the assertion checks?
21:01 < bnoordhuis> Kakera: a net.Socket object is a front for a half c++/half js object that is the actual connection
21:02 < bnoordhuis> that's the _handle field in that message
21:02 < bnoordhuis> the real magic happens in and around that object
21:03 < bnoordhuis> when you reconnect, the handle changes
21:03 < bnoordhuis> but there may still be pending actions in the binding layer (c++ land) that eventually come back to js land
21:03 < Kakera> oh
21:04 < bnoordhuis> that assert sanity-checks that the object it returns to is the one it saw previously
21:05 < ajostergaard> bnoordhuis: so is it possible that the error and close events being emitted too early? i.e. before c++ land has completely pending actions
21:05 < bnoordhuis> ajostergaard: yes and no
21:06 < bnoordhuis> the events from the binding layer usually all arrive on the same tick of the event loop
21:06 < bnoordhuis> but say you have three canceled write reqs returning
21:06 < bnoordhuis> and in the callback of that first write req, you reconnect or do some other funky thing
21:07 < bnoordhuis> then the other two write reqs will come back to the wrong object
21:07 < bnoordhuis> at least, not the object they expect
21:07 < Kakera> shouldn't reconnecting on an open socket throw an error?
21:08 < Kakera> as in, ideologically
21:08 < bnoordhuis> Kakera: well, maybe
21:09 < bnoordhuis> there's some ongoing discussion on when it's appropriate to throw, actually
21:09 < supster> bnoordhuis ajostergaard: so how do i manage my repository that is owned by nobody? i can't `git fetch` as nobody because user nobody does not have ssh keys. do i do the fetch as root?
21:09 < Kakera> well, an 'error' event rather
21:10 < ajostergaard> supster: as yourself or some other user created for the purpose
21:10 < Kakera> and I just discovered that you _can_ reuse a destroyed socket, as long as you wait 10ms before reconnecting
21:10 < supster> ajostergaard: and then do i need to chown all the git objects fetched to nobody - or do i not need to worry about that?
21:11 < bnoordhuis> supster: you mean check out your project in order to run it?
21:11 < whomp> how can i tell what character encoding the client is sending data in?
21:11 < supster> bnoordhuis: yes, and subsequently update from upstream later
21:12 < bnoordhuis> supster: there's lots of options but i usually create a tarball with git archive and then upload that to the server
21:13 < bnoordhuis> you probably don't want your full dev history on a public server
21:13 < supster> bnoordhuis: yep, i am aware of several options -- for now i am just using git to do it because we are early in ops development and don't have too many servers
21:13 < Kakera> bnoordhuis, I think it's a problem that you can't reuse the socket right away after the 'close' event fires
21:16 < Kakera> but I'm curious what could creep in from a destroyed socket after it's already closed
21:16 < bnoordhuis> Kakera: explain to me again why you want to do this so bad?
21:17 < Kakera> bnoordhuis, in case of a connection timeout, I want to reuse the socket object without waiting until the OS decides to throw ETIMEDOUT
21:18 < bnoordhuis> Kakera: yes, but why?
21:18 < Kakera> why which part?
21:18 < bnoordhuis> why reuse the socket object? it's not as if they're expensive to create
21:18 < Kakera> then why does node.js support reusing them at all?
21:19 < bnoordhuis> who says it does?
21:19 < Kakera> http://nodejs.org/api/net.html#net_socket_connect_port_host_connectlistener
21:19 < Kakera> Normally this method is not needed, as net.createConnection opens the socket. Use this only if you are implementing a custom Socket or if a Socket is closed and you want to reuse it to connect to another server. 
21:20 < ajostergaard> kakera: i think your answer should have been: "because it's optimal" ;)
21:21 < Kakera> well, that would be a lie, since I didn't benchmark anything
21:21 < whomp> what character set does node.js use by default?
21:21 < geNAZt> whomp: utf8
21:21 < ajostergaard> Optimal from a GC perspective if nothing else.
21:21 < whomp> thx
21:21 < Kakera> but ideologically I don't like the idea of creating a new socket and reassigning many event handlers whenever I reconnect
21:22 < bnoordhuis> ah, i hate it when the documentation contradicts me
21:22 < ajostergaard> rofl
21:22 < ajostergaard> that's why we all hate documentation ;)
21:22 < ajostergaard> code is so much more reliable
21:22 < bnoordhuis> looks like something that survived from long, long ago
21:22 < bnoordhuis> but i guess we should honor it
21:22 < CoverSlide> in a kingdom far, far away
21:22 < ajostergaard> oh oh - he's going to fix the documentation not the code :( ;)
21:23 < Kakera> honor it, or deprecate it
21:23 < bnoordhuis> Kakera: if you open an issue, i'll look into (eventually)
21:23 < Kakera> sure
21:23 < ajostergaard> i'm gobsmacked - there are still hnourable people in the world :)
21:24 < ajostergaard> i'm also off to the land of nod - night all you folk in my part of the planet. good day, evening, morning (as appropriate) to the rest of you
21:25 < Kakera> also, I never had any problems reconnecting after the socket closes due to the server sending FIN or RES
21:25 < Kakera> only when I destroy it myself
21:35 < Kakera> https://github.com/joyent/node/issues/4698 bnoo.. aw he left
21:35 < Kakera> ajostergaard, you might be interested in this
21:37 < cloudbender> I'm building a gadget.
21:38 < cloudbender> A thing, gizmo, robotnik
21:39 < ajostergaard> kakera: thanks!
21:40 < CoverSlide> cloudbender: and what does this gizmo do?
21:41 < cloudbender> it sweeps an array of objects and does stuff to it based on a few inputs.
21:41 < cloudbender> It's a wrapper for arrays
21:42 < cloudbender> Dang I need a life geez
21:43 < cloudbender> I was going to call it 'zipline' but I went with 'smart_array_gadget'
21:43 < cloudbender> it's really, really, smart
21:45 < cloudbender> It would be threadsafe, if only ... (sigh)
21:45 < MI6> joyent/node: isaacs master * a6c1847 : stream: Don't stop reading on zero-length decoded output  Fixes regressio - http://git.io/pLKwcw
21:48 < cloudbender> Wow that post sounds serious ... like 'missle abort button now fully functional' or something ...
21:51 < niix> how would I make a word bold inside a paragraph in jade?
21:54 < chilts> niix: you can just say <strong>here</strong> and it will output it for you
21:54 < niix> chilts: heh go figure, I'm trying to think of some weird way to do it
22:07 < tlack> im using the cluster module to support a very high traffic web service. i notice that the # of hits routed to each worker is very uneven. anyone have any ideas why that might be? what each worker serves is very similar (just an object access and res.write)
22:08 < azylman> I believe there were some bugs related to uneven routing when using the cluster module in node 0.6 that got fixed in 0.8
22:09 < tlack> hmm im using 0.8.18 here. 
22:09 < azylman> Then I got nothing. I dunno that much about cluster.
22:09 < tlack> are there any good tech articles about how node decides to distribute hits with cluster? 
22:09 < tlack> cluster is some black magic stuff. :)
22:10 < crabtree> hi friends
22:10 < crabtree> niggler !
22:10 < niggler> hey crabtree
22:10 < tlack> process.send() seems very slow too. puzzling
22:10 < crabtree> my face is frozen
22:10 < crabtree> -26 is chilli
22:11 < tlack> thats crazy come to miami it was 80 yesterday
22:11 < crabtree> oh celsius sorry
22:11 < niggler> sweater, scarf, vanilla spice latte
22:11 < crabtree> like -15 tlack
22:11 < tlack> still too cold :)
22:11 < crabtree> niggler: no help!
22:11 < azylman> It's 63 degrees here :/
22:11 < azylman> I wish it was warmer
22:12 < crabtree> pfft
22:12 < crabtree> warmer than 18 degrees
22:12 < crabtree> l0l
22:12 < crabtree> that'd be heaven right now
22:19 < gnarf> anyone have any suggestions for solid npm modules for caching?
22:19 < tlack> gnarf: caching what?
22:19 < gnarf> preferably something that can use file based cache / has expires, etc
22:19 < gnarf> tlack: data - in this case generated images
22:21 < tlack> gnarf: in that particular case i'd use nginx to serve the static file you generate via node.. but you can of course do it in node too.. http://stackoverflow.com/questions/9147516/how-would-one-make-connect-express-use-non-expiring-caching-on-a-particular-dire 
22:22 < gnarf> tlack: hrm
22:23 < gnarf> tlack: hadn't thought of using a proxy cache in nginx either
22:23 < tlack> gnarf: another option if you're kinda ballin out of control is to just send it to s3 right there and redirect the user there when the image request comes in to your host (tracking + cache control + no load on server at all)
22:23 < tlack> i wouldnt actually proxy it. serve it via a legit location /genimgs/ { root / .. } thing
22:23 < gnarf> well these get used in local .zip stuff too
22:23 < gnarf> its for the jquery ui themeroller/download builder
22:23 < tlack> ah ok
22:23 < gnarf> so we occasionally need to generate images for a color we don't have pre-built
22:24 < gnarf> but like, doing it every time is noticiable
22:24 < gnarf> was just hoping for a lib that kinda handled it
22:24 < gnarf> was thinking about using memcache too
22:24 < tlack> i don't think you'll find anything. what you probably want to do is name the files very clearly (or md5 all their parameters), check if they exist, and if so serve them w/ long cache expiration. if not exist, generate.
22:25 < tlack> what would memcache do? it cant really speed up your creation process, and serving a file from disk is faster than memcache in many cases (no tcp connection overhead)
22:25 < gnarf> yeah
22:25 < gnarf> thats why i went back to file
22:25 < gnarf> :)
22:25 < tlack> you're on the right track, just roll it yourself. this is very application specific stuff you are doing.
22:25 < tlack> dont suppose you're using the cluster module over there? :)
22:26 < gnarf> nope
22:26 < gnarf> it's kinda messy atm: https://github.com/jquery/download.jqueryui.com/commit/69f57584acc8dcfff9ccd8174e2c39027eaa379c
22:27 < goloroden> does anyone know or have an idea on how to close an http(s) server immediately (without waiting for kept-alive connections to expire), *without* shutting down the entire process?
22:27 < trypwire_> has anyone here used restify?
22:27 < trypwire_> restify requires that you return next(); at the end of your routes
22:28 < trypwire_> but i'm working on a project with async database calls within the routes
22:28 < trypwire_> soo…. return next() isn't quite as simple
22:28 < tlack> trypwire_: remember, return next(); doesnt do anything in terms of RETURNING data. it simply calls next() async. get it?
22:28 < gnarf> call next from tyour callbak?
22:28 < gnarf> bah typing fingers today
22:29 < goloroden> basically, what I am looking for is something such as server.forceClose(callback); ... any ideas?
22:29 < trypwire_> hm
22:29 < tlack> trypwire_: so dbcall(check_record) becomes dbcall(function(){ check_record(); next(); });
22:29 < trypwire_> tlack: that's what i had expected… but none of my routes are being hit by things that certainly should hit them
22:29 < trypwire_> so i thought maybe it was the discrepancy in that i'm not returning next()
22:29 < tlack> trypwire_: afaik the return is just cuz you want to leave the function at that point, not cuz you need to grab the actual return value. that wouldnt be very async friendly
22:30 < gnarf> Typo: what does next() return ?
22:30 < gnarf> er sry -- trypwire_
22:30 < tlack> trypwire_: put your code on gist. im 99% sure you're dropping next() somewhere.
22:30 < trypwire_> gnarf: i think tlack is right, id ont think it returns anything, or at least anything of importance
22:30 < trypwire_> tlack: ok, sec
22:30 < gnarf> too many t's!
22:31 < tlack> gnarf: see here http://mcavage.github.com/node-restify/#Routing they're using "return next();" to really mean "call next(); now and return from this function."
22:32 < trypwire_> tlack: http://pastebin.com/QgwjnDc6
22:33 < trypwire_> tlack: when i try to hit these routes in my browser, no problem, but when i try to hit them with ajax, problem
22:34 < tlack> trypwire_: none of that is working? not even get the .get()?
22:34 < trypwire_> tlack: not via ajax, no
22:34 < tlack> ajax could be anything.. CORS?
22:34 < tlack> does restify support jsonp? so many questions
22:34 < tlack> if it works from your browser, the bug is probably in your js
22:35 < trypwire_> i have a cors proxy server running.. not sending jsonp
22:36 < trypwire_> the request hits my server… my logger prints it
22:36 < trypwire_> but then the routes don't fit it
22:36 < tlack> add console.logs all over the place i have no idea brah
22:36 < trypwire_> really frustrating
22:36 < trypwire_> heh, tried that already too :P
22:37 < othiym23> trypwire_: make sure the OPTION requests before the CORS requests are being handled properly
22:37 < tlack> DUH! 
22:37 < tlack> +1 
22:37 < othiym23> I can't remember the details because it was a year ago, but I ran into some nonsense with that the last time I tried to do CORS
22:37 < trypwire_> hmm
22:37 < trypwire_> ok
22:38 < othiym23> I *think* Express does the right thing by default; we were using some ganked-out custom middleware and / or EveryAuth that wasn't handling OPTION correctly
22:38 < tlack> he's right; invalid OPTIONS response will probably cause a cors abort
22:38 < othiym23> (assuming you're using Express)
22:38 < samholmes> remysharp: Hey, what do you think about possibly supporting Jade in JSBin?
22:39 < tlack> never realized jsbin did stylus.. wow
22:40 < trypwire_> othiym23: i was using restify cause i just need json in, json out
22:44 < traveler__> Hey y'all! got a question that I think has a canonical answer. I got a node.js app with a user database. Different parts of the app require users data. Some alternatives I got (a) hit the DB every time (b) store relevant user data in a cookie (c) put some sort of cache in place.
22:44 < tlack> traveler__: var globalUsers = {};
22:44 < traveler__> currently thinking about option (c). what I don't like is the constant checking "is it in the cache, if not do an asynch call"
22:45 < traveler__> tlack: what is the paradigm for "if its in the cache, use right away otherwise hit the DB asynchronously"
22:45 < tlack> traveler__: do you have more than one node.js instance (i.e., running copy of node or a fork()'d cluster member) touching this data?
22:46 < traveler__> tlack, let's say no. ie: if I have two instances, i don't mind if each one of them keeps its own cache, or even if those caches are different
22:47 < xk_id> If anybody has experience with the "mikeal/request" module, can you tell whether these two http requests will use the same connection, instead of opening one each?
22:47 < xk_id> If anybody has experience with the "mikeal/request" module, can you tell whether these two http requests will use the same connection, instead of opening one each? https://gist.github.com/4687366
22:48 < mikeal> that's not a request thing
22:48 < mikeal> it's a core thing
22:48 < mikeal> core http does pooling
22:48 < xk_id> :o you're here
22:48 < mikeal> but you have to hit the max pool size before it'll reuse that connection
22:49 < mikeal> so, the answer to your question is
22:49 < tlack> traveler__: in that case i would make Users.write(newData) do globalUsers[newData.id] = newData; and never check it at all. if you insist on checking, do globalUsers[newData.id] = { data: newData, setAt: new Date() }
22:49 < mikeal> "only if the pool is saturation cause you are under load"
22:49 < xk_id> mikeal: will I hit it, since I set 'pool.maxSockets' to 1? and also, when does 'request' switches off the socket to make it available to new requests?
22:50 < traveler__> tlack, I understand - that's not quite sufficient for me. I plan to have records in the DB before the app starts. and I don't really want to mirror the cache in the DB
22:50 < trypwire_> othiym23: express handled it fine… restify was doing something wrong i guess?
22:50 < tlack> traveler__: you'd check if the element is in the cache inside Users.find() and if not, populate it
22:51 < traveler__> actually yes
22:51 < traveler__> and i can decide in there if i can return synchronously or not
22:51 < traveler__> that makes sense
22:51 < traveler__> thank you
22:51 < tlack> traveler__: probably easiest to stick to all-async
22:51 < mikeal> xk_id, once you're in that callback it's too late
22:51 < tlack> traveler__: just cuz everything else in node is (which i hate)
22:51 < mikeal> the intention of core pooling is to give you reliability all the time and efficiency under load
22:52 < mikeal> but not to provide effeiciency gains when you are not under load
22:52 < traveler__> tlack,  i think its OK. my find can take a CB. and call the CB right away if the record is in cache. otherwise do a find.
22:52 < tlack> precisely
22:52 < traveler__> thanks for your help. it was good to discuss
22:52 < tlack> anyone used the Cluster module much? im having some weird performance issues (some cluster workers getting far more traffic than others) despite the work load being very simple
22:52 < mikeal> if we keep the connection around for any arbitrary amount of time there is a risk that the connection will get severed at a point in time that it's not attached to a request and the error cannot be handled
22:53 < mikeal> one of the rules of a stream is that it either emits "end" or "error"
22:53 < mikeal> that request callback is on "end", we can't call "error" after that
22:53 < mikeal> if we kept that connection open and it error'd you wouldn't be able to handle it
22:54 < mikeal> so we don't, we close the connection on "end" if there is not a *pending* reqest
22:54 < xk_id> mikeal: I understand. at least when I'm inside the callback, the connection already end-ed :)
22:54 < mikeal> right
22:54 < mikeal> but
22:54 < mikeal> when people are hammering your site
22:54 < xk_id> I just wanted to minimise the stress on the server, as I'm coding a spider.
22:54 < mikeal> you won't exceed 1 remote socket connection if you keep that max size
22:55 < mikeal> oh, in that case, set it to one, and then do all kinds of concurrent lookups :)
22:55 < xk_id> hammering my site? but I'm coding a client, not a server.
22:55 < mikeal> they'll all queue up and use the same conncetion
22:55 < mikeal> when you pull a page, and find 10 more that you want to spider, create all the requests at once
22:55 < xk_id> Ic. so I should focus on doing the other requests outside the callback, so they get queued
22:55 < mikeal> as long as you don't do so many that you fill up all your memory, it'll be great
22:56 < mikeal> or, doing *many* in the callback
22:56  * xk_id nods
22:56 < xk_id> got it
22:56 < xk_id> thanks, buddy
22:56 < mikeal> no problem
22:57 < rcombs> file under "neat things": http://runnable.com/express/
23:00 < tlack> rcombs: wow! web dev is officially getting weird.
23:00 < rcombs> tlack: webdev got weird a while ago
23:01 < rcombs> tlack: also, I think anyone working on that site is doing metawebdev
23:01 < tlack> metawebdev?
23:01 < rcombs> they're writing web code that people use to write web code
23:01 < superjoe> recently, someone here showed a web page they made with code examples for the current ecmascript 6 spec
23:01 < rcombs> (same with JSFiddle and Cloud9 and such)
23:01 < superjoe> anyone remember what that was?
23:01 < superjoe> it looked kind of like a "cheat sheet"
23:02 < tlack> hmm. i definitely have used jsbin to write deliverables for clients. i hear you tho
23:06 < superjoe> found it! http://benvie.github.com/es-spec-html/
23:07 < Benvie> =D
23:07 < Benvie> a bit outdated, but still mostly useful
23:07 < superjoe> thanks :)
23:07 < Benvie> especially if you're looking for es5 reference
23:07 < johnkpaul> I am trying to duplicate the benchmark results that I am finding here http://zgadzaj.com/benchmarking-nodejs-basic-performance-tests-against-apache-php
23:12 < johnkpaul> but for some reason, on OSX, even with a machien with much higher specs, node fails much much sooner
23:12 < superjoe> Benvie, someone sent me this: http://docs.python.org/3/whatsnew/3.3.html#pep-380
23:13 < superjoe> and I was trying to see if we're getting anything similar in es6
23:13 < johnkpaul> on ubuntu 12, I ahve no problem
23:13 < johnkpaul> is there some reason that node is much less performant on OSX?
23:13 < tlack> i have no input but i do have one question - so Apache was very fast under OSX but Node was much slower than expected? or were both slow?
23:13 < johnkpaul> tlack: node was much slower than expected
23:13 < johnkpaul> I didn't try apache
23:13 < johnkpaul> tlack: actually, not slower
23:13 < johnkpaul> node just failed
23:13 < johnkpaul> the process quit
23:13 < tlack> resource limits perhaps? ulimit(1) et al
23:13 < johnkpaul> wheras a VPS linux machine, with much lower specs, worked fine
23:13 < johnkpaul> tlack: I had to ulimit -n 10000 to get it to run at al
23:13 < johnkpaul> tbh I don't know what ulimit is doing, but that allowed it to run in the first place
23:13 < Benvie> yeah
23:13 < Benvie> superjoe: in es6 that's accomplished by the yield* expression
23:13 < Benvie> delegating to another generator
23:13 < tlack> unix has built in limits for users: number of files they can open, amount of memory they can use, even disk quotas in some instances. it can be a complex hierarchy of limits. OSX's are probably just much more strict straight out the box
23:14 < Benvie> superjoe: I haven't implemented it in continuum, but it's specified
23:14 < Benvie> superjoe: http://wiki.ecmascript.org/doku.php?id=harmony:generators and go down to "delegating yield"
23:15 < asdf12> is twitter vine like mobile youtube ?
23:15 < tlack> no
23:15 < asdf12> or video instagram
23:15 < tlack> other than at the most bullshit surface level
23:15 < tlack> more like instagram 
23:16 < asdf12> is it 10 seconds only recording? or you can upload a full movie
23:16 < tlack> shameless plug: i reverse engineered the Vine client and built an API client for it. https://github.com/tlack/vino
23:16 < tlack> 6 seconds asdf12 
23:16 < asdf12> oh i see
23:17 < sorensen> johnkpaul: it might be an issue with osx apache bench
23:18 < sorensen> i had to install the latest version from source to get it to work correctly
23:18 < johnkpaul> tlack: oh I see, I didn't know that's how it worked, thank you!
23:18 < johnkpaul> sorensen: oh ok, I will try that
23:18 < sorensen> also had to run this: https://gist.github.com/1095933
23:19 < xk_id> Does anybody know if these two httprequests are executed in one 'keep-alive' connection? The problem is that my local server says the second request is sent although the first one hasn't executed its callback (due to the server not responding with anything). https://gist.github.com/4687608
23:19 < asdf12> tlack: heh you're a fan of snap chat?
23:19 < sorensen> otherwise AB was failing pretty fast with a high number of concurrent users
23:19 < tlack> asdf12: huge fan of both
23:19 < asdf12> ehhhh
23:19 < superjoe> Benvie, nice!
23:19 < johnkpaul> sorensen: now that I'm googling, many people have the same opinion
23:20 < johnkpaul> I'm going to recompile it tomorrow and see what happens
23:20 < johnkpaul> I think you're right though
23:20 < johnkpaul> thanks for your help sorensen tlack!
23:20 < sorensen> its just an osx thing as far as i know
23:20 < sorensen> np, spent too much time trying to solve that same issue
23:26 < othiym23> the longer I spend on es-discuss the weirder ES6 seems to me
23:26 < othiym23> language standards seem to always end up trying to solve way too many problems at once
23:27 < gf3> And then not solving any problems at all
23:28 < gf3> YAY COMMITTEES! 
23:28 < substack> othiym23: ignore it and maybe it'll go away
23:28 < frem> it's not like it can get much weirder than previous ES-es
23:28 < substack> just build excellent things instead
23:29 < superjoe> I just want normal dictionaries and sets :-(
23:29 < superjoe> I remember fondly using python and using object instances as keys in dictionaries and sets
23:31 < wereHamster> is it possible to list all active timers/sockets or whatever is preventing nodejs from exiting?
23:31 < gf3> superjoe: ClojureScript is nice; you get all the fancy data structures :D
23:36 < sorensen> superjoe: its a nice pythonic thing, but how often do you end up using that?
23:38 < sorensen> you could always use lua and then only have tables
23:38 < sorensen> :P
23:41 < tlack> dict[obj.key] = obj; :)
23:41 < miracleblue> :D
23:41 < miracleblue> HA
23:41 < miracleblue> I've done it!
23:41 <@Nexxy> ermahgerd!
23:41 < miracleblue> Ermahgerd
23:41 < miracleblue> IRC from werk
23:41 <@Nexxy> wherd~!
23:41 < miracleblue> So since almost everything in this code I'm writing deals with file management, I've wrapped EVERYTHING in an async.series
23:41 < miracleblue> except of course for local variable caching.
23:42 < miracleblue> :O only tables?
23:42 < sorensen> lol
23:42 < sorensen> its not so bad
23:43 <@Nexxy> TUPLES, TUPLES EVERYWHERE
23:43 < sorensen> ermahgerd, terperls
23:43 <@Nexxy> rofl, terperls
23:44 < sorensen> do you prerfer arrers?
23:44 < nlf> lersts
23:44 < gf3> vercters
23:44 < othiym23> substack: WeakMaps and Proxies could be super awesome for the excellent thing I want to build, but some of the other stuff makes my head hurt
23:45 < nlf> internet chatting from across the room ^5 sorensen
23:45 < sorensen> lol
23:46 < sorensen> ermahgerd, ernd yert
23:53 < miracleblue> ermagherd, sets
23:53 < miracleblue> serts
23:53 < miracleblue> Internet chatting from across the indian ocean
23:53 < miracleblue> ^5
23:53 < superjoe> sorensen, cases for using it would be rare
23:53 < gf3> INTERNET CHATTING FROM AN ISLAND
23:53 < miracleblue> Awwww snap
23:53 < gf3> THE FUTURE IS NOW
23:53 < miracleblue> I'm on an island too
23:53 < gf3> ISLAND FIVE, miracleblue 
23:53 < miracleblue> :D
23:53 < miracleblue> i^5
23:54 < miracleblue> Okay silly question #436808
23:54 < miracleblue> How to tell if a path is a file or directory
23:54 < gf3> ℹ
23:54 < sorensen> ∆
23:54 < miracleblue> B
23:54 < aandy> to think what it would be like to go blind tomorrow. no chat, no internet, NO INTERNET, no chat
23:55 < miracleblue> Accessible internet!
23:55 < miracleblue> Although that's basically like no internet
23:55 < gf3> miracleblue: See the fs.Stats object
23:55 < miracleblue> Because of how terrible it is.
23:55 < supster> When deploying a node app, who should i run npm rebuild as? root? nobody? a deploy user?
23:55 < gf3> miracleblue: http://nodejs.org/api/fs.html#fs_class_fs_stats
23:55 < miracleblue> gf3 <3 thank you kind sir
23:55 < miracleblue> or ma'am
23:55 < aandy> please.. i tried browsing with Links. accessibility might be a step up, but it wasn't pretty
23:56 < aandy> why they don't make such browser intelligent i'll never understand. like.. fixate on the content, not the horrible html menu crap. like how i imagine instapaper or that read api works
23:57 < miracleblue> Well
23:57 < miracleblue> I'm not sure it's that easy
23:57 < miracleblue> But I dunno
23:57 < enjalot> i'm having trouble configuring webkit-dev-devtools to work on a remote server. anyone have any guidance?
23:58 < aandy> i'm not saying it is, but i'd imagine using similar technology, and have it be a view mode, like F11 for full screen, or toggle
23:58 < miracleblue> Mmm
23:58 < aandy> like this http://www.readability.com/
23:58 < miracleblue> well I think this is why we have accessibility guidelines.  We have content emphasised in the markup, but then manipulated using stylesheets
23:58 < aandy> hmm, maybe not that.. pretty sure there was a free api once
23:58 < miracleblue> Or that's the way it's supposed to work
23:59 < miracleblue> But no one really follows the guidelines anyway.
23:59 < aandy> that would be great
23:59 < aandy> but many forms of conformity would
23:59 < aandy> ;)
23:59 < miracleblue> Yeah ;)
23:59 < miracleblue> If only we could all follow a standard.
23:59 < miracleblue> Alright, so, fs.stats
23:59 < aandy> one markup to rule them all
--- Log closed Fri Feb 01 00:00:03 2013
