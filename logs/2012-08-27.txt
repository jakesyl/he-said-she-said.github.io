--- Log opened Mon Aug 27 00:00:32 2012
00:00 < AaronATX> mscdex: no, that does not work either
00:01 < AutowiredConstru> mscdex is horrible outdated. it is something from dos
00:02 < mscdex> AutowiredConstru: thanks for making me feel old!
00:02 < mscdex> AaronATX: are you sure that the 'message' event is firing?
00:03 < AaronATX> adding console.log(typeof db); to the message handler shows "object", so the db object is there...
00:03 < AaronATX> yes
00:03 < mscdex> AaronATX: what if you try the streaming method?
00:04 < AaronATX> mscdex: i don't know what you mean
00:06 < mscdex> the `mysql` module has a way to stream results instead of buffering them
00:07 < mscdex> try: db.query("SELECT 1 AS foo").on('error', function(e){console.log('db error: ' + e)}).on('end', function(){console.log('done!')});
00:09 < AaronATX> ok, i'll try it.
00:12 < AaronATX> mscdex: there is no output from either of those events :(
00:13 < mscdex> dunno then
00:13 < AaronATX> very confusing
00:13 < mscdex> maybe the module has a debug option that might help
00:14 < mscdex> yeah, you can set `debug: true` in your connection config
00:21 < AaronATX> wow... i'm not sure how that output is going to help... :x
00:21 < AaronATX> http://pastebin.com/WKCgEuVb
00:22 < AaronATX> i have an idea though
00:22 < AaronATX> var obj = db.query(...
00:22 < AaronATX> gonna examine the obj
00:29 < patrickv> hi, anyone around? I've been searching the web for hours on a weird "Error: socket hang up" after upgrading from nodejs 0.4 to 0.6 (ubuntu oneiric to precise) and I can't seem to be able to figure it out...
00:30 < rvagg> patrickv: for a start, get onto the latest Node, use Chris Lea's PPA, he keeps it very up to date, see Ubuntu section here: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
00:32 < patrickv> thanks I'll try that
00:32 < mscdex> AaronATX: that was mostly just to see if there was anything actually happening in the module when that 'message' event actually fires
00:32 <@konobi> 0.8!?
00:33 < mscdex> patrickv: there are also pre-built tarball distributions available
00:33 < patrickv> ppa seems good
00:33 < rvagg> if you're on ubuntu, use the PPA
00:35 < patrickv> installed, I'll recompile sqlite module now
00:36 < patrickv> still get the socket hang up with 0.8.8
00:38 < rvagg> you might need to give more context then patrickv , a gist perhaps, then someone might be able to see the issue
00:38 < patrickv> yup
00:38 < patrickv> I'll condense it in one or two lines
00:41 < patrickv> it's an ssl client that connects to an https server with certificates, both are nodejs
00:41 < patrickv> var options = { host: 'blabla', port: 8200, path: '/client', method: 'POST', cert: sslcert, key: sslkey, headers: { 'Content-Type': 'application/json', 'Content-Length': raw_msg.length }, ca: sslca, };
00:41 < patrickv> var req = https.request(options, function(res) { (....)   req.on('error', function(e) { console.log('error: '+e); }  
00:41 < patrickv> works perfectly with 0.4.9 of ubuntu oneiric
00:42 < patrickv> installed a new server on ubuntu precise, doesn't work anymore
00:43 < patrickv> 0.6.12, and neither on 0.8.8 installed a minute ago
00:48 < deltab> patrickv: can you get debug output from the ssl lib?
00:52 < patrickv> err maybe, can't see it documented though
00:54 < luckysmack> if I wanted to make an app using couchdb as the server, what would you guys recommend I look into or use to make an offline capable app? I want the user to be able to still use and interact with the site if they are offline.
00:55 < mmalecki> local couch + replication
00:56 < luckysmack> yea but im not sure how i would go about that with node. 
00:57 <@konobi> caolan has a couch interface that sits atop indexdb
00:57 < luckysmack> was hoping someone could point me in some direction. ive played with couch for a bit, but not sure how I would use it with node if the user is offline.
00:57 < luckysmack> oh ok. link|
00:57 < luckysmack> *?
00:58 <@konobi> http://kan.so/
00:58 < luckysmack> thanks
00:58 < luckysmack> so its a repo of couch apps?
01:17 < tyebud> Hey node.  Can anyone recommend an excellent resource that goes over project organization?
01:18 <@konobi> KISS and JFDI
01:24 < maxogden> lol
01:29 < tyebud> Thanks for that
01:29 < tyebud> Anything else?
01:29 < maxogden> tyebud: http://nodejs.org/api/modules.html#modules_modules is a good read
01:36 < tyebud> Ok, I read an article that spoke about dependency injection.  Wasn't sure if I should be considering that as well as using imports
01:38 < Aria> It's a good thing if you need to move the configuration out, but that's not always needed.
02:15 < Nuck> Kay I'm gonna ask again today and hope for a response — Any good docs of the com posable API for Request?
02:16 < Nuck> composable
02:16 < Nuck> Fucking autocorrect :C
02:35 < timeturner> node has a built in request api
02:37 < owen1> i want to build i website with some dynamic content like blog, jobs section etc (similar to http://engineering.linkedin.com/) the content will be added by developers. any good code samples/modules/approaches i should look at?
02:37 < Nuck> I don't want the built-in request API, I want Request, the lib that makes it easy
02:37 < Nuck> ಠ_ಠ 
02:41 < mscdex> jeez $2800 for an amiga x1000
02:41 < SomeoneWeird> use restler
02:41 < luckysmack> hey, advanced technology has its price...
02:42 < Aria> Wow
02:43 < owen1> SomeoneWeird: thanks. i'll take a look
02:44 < onairelav> hello everybody
02:45 < onairelav> hello soguy have experience with node and postgre ?
02:46 < samholmes> fuck. I stepped away from my computer for a few hours, and now what AAA_awright said to me is not on my shitty IRC client (x-chat) anymore. :\ What did thoust saith?
02:46 < timeturner> x-chat is a bad client?
02:46 < timeturner> I thought people said it was good...
02:47 < luckysmack> samholmes:  xchat is great. look in the settings to see if logging is turned on. if it is, just look at the logs.
02:48 < samholmes> Logging to a disk you mean?
02:48 < luckysmack> yea.
02:48 < samholmes> it wasn't on. :(
02:49 < luckysmack> mine is set to save my irc logs to disk
02:49 < samholmes> Do the logs show up in the client or do I have to  open the log files manuallY?
02:49 < Domenic__> Has anyone made X-Chat shut up about people renaming themselves?
02:49 < luckysmack> then theres not much to do. lol. short of asking him what he said
02:50 < luckysmack> theyre .log files on the computer you open with an editor
02:50 < samholmes> I asked him. :P
02:50 < luckysmack> not that i know of
02:51 < mmalecki> samholmes: http://static.izs.me/irclogs/node.js/
02:52 < Nuck> haha that's convenient
02:52 < samholmes> mmalecki: :o
02:56 < timeturner> has anyone figure out how to stream the irc log for any particular channel from a web archive?
02:56 < timeturner> when the client starts up basically
02:56 < timeturner> instead of saving those loga
02:56 < timeturner> logs* manually
02:57 < AAA_awright> samholmes: Ping
02:57 < samholmes> AAA_awright: hey. :)
02:57 < AAA_awright> <AAA_awright> samholmes: if you email someone a "reset your password" link, that's alright too... But make sure you take care of that as well as you do passwords, too. Email them a temporary password (in the form of a URL), and keep that URL hashed in the database.
02:57 < AAA_awright> <AAA_awright> *that's alright, period
02:57 < AAA_awright> <AAA_awright> Access to the database shouldn't expose password reset links or passwords, alike
02:57 < AAA_awright> <AAA_awright> samholmes: And make sure it's salted. Use pbkdf2 with 0.1s worth of iterations
02:57 < AAA_awright> <AAA_awright> Use a randomly generated salt, 128 bits at least, etc
02:57 < AAA_awright> <AAA_awright> And Node.js's crypto routine is an ugly duckling, make sure you use Buffer(value, 'binary') encoding. Explicitly specify that 'binary' encoding.
02:58 < AAA_awright> And also, use crypto.randomBytes(). Math.random() isn't cryptographically secure.
02:58 < samholmes> for what?
02:58 < AAA_awright> For secret keys
02:58 < sshaginyan> Hey guys how do I check if a directory is empty?
02:58 < AAA_awright> I guess it's alright for salts but you never know
02:58 < sshaginyan> somethinf like STAT.isEmpty(dir)?
02:59 < AAA_awright> samholmes: Read off the directory listing, make sure the only contents are . and ..
02:59 < samholmes> AAA_awright: Looks like I
02:59 < samholmes> I'm only using the SHA mysql function with the passsword. :\
02:59 < AAA_awright> samholmes: Though I guess Node.js strips out the . and .. for you so you should be left with an empty Array
02:59 < sshaginyan> yeah it does
03:00 < AAA_awright> samholmes: You absolutely want to use a salt. SHA-* is not secure for passwords.
03:00 < gkatsev> bcrypt
03:00 < gkatsev> always bcrypt
03:00 < wookiehangover> samholmes: bcrypt is a good option
03:00 < wookiehangover> gkatsev: +1
03:00 < samholmes> No SHA algorithm is secure for?
03:00 < AAA_awright> SHA-1 is only secure for verifying the integrity of contents
03:00 < gkatsev> sha-256 and above is probably bareable
03:00 < AAA_awright> And even then, you want to use HMAC-SHA-1
03:00 < AAA_awright> SHA-1 is good for nothing, really
03:00 < gkatsev> but bcrypt is designed to be processor intensive which is what you need/want
03:01 < SomeoneWeird> <AAA_awright> samholmes: You absolutely want to use a salt. SHA-* is not secure for passwords. < sha256 is fine, really
03:01 < AAA_awright> or pbkdf2?
03:01 < gkatsev> you want to use bcrypt plus a salt
03:01 < SomeoneWeird> but yeah, go with bcrypt and salt
03:01 < AAA_awright> SomeoneWeird: No! sha256 alone doesn't salt or provide key stretching
03:01 < wookiehangover> most bcrypt libs will even salt for you
03:01 < wookiehangover> BOOM
03:01 < gkatsev> wookiehangover: hehe
03:01 < SomeoneWeird> AAA_awright, ofc
03:01 < gkatsev> you can even tell bcrypt to use extra processing time
03:01 < AAA_awright> er
03:02 < samholmes> Where do I get the function?
03:02 < AAA_awright> SomeoneWeird: This is security, you can't joke about bombs and such!
03:02 < wookiehangover> its considered a bit of a cargo-cult these days, buts that doesn't make it bad asvice http://codahale.com/how-to-safely-store-a-password/
03:02 < SomeoneWeird> AAA_awright, obviously, :)
03:03 < gkatsev> also, on top of bcrypt and salt, consider doing multiple passes (500 or more)
03:03 < SomeoneWeird> jesusabdullah, you need to fix https://github.com/jesusabdullah/hoarders/issues/1
03:03 < Lorentz> that article wins purely because it mentions pink himalayan salt
03:03 < samholmes> I just need a barebones security for now.
03:03 < gkatsev> no such thing!
03:03 < gkatsev> go all the way, or don't bother
03:03 < samholmes> gkatsev: I mean, something to start with..
03:03 < gkatsev> npm install bcrypt
03:03 < samholmes> I see.
03:03 < gkatsev> or something along those lines
03:05 < AAA_awright> http://pdos.csail.mit.edu/papers/webauth:sec10.pdf too
03:05 < gkatsev> that looks cool
03:06 < gkatsev> actually, now days it's really simple to do security correctly. I dont know why people dont :/
03:06 < timeturner> security is very easy
03:06 < timeturner> at least the concepts
03:06 < AAA_awright> I'm inclined to disagree
03:06 < timeturner> I find it harder to use plugins, etc. to "help" expedite the password creation process
03:07 < AAA_awright> Security is really frustratingly hard to get right
03:07 < timeturner> what's hard
03:07 < timeturner> if you use bcrypt or node's hashing facilities
03:07 < timeturner> everything else just fits
03:07 < AAA_awright> The average person has to learn about this
03:07 < timeturner> now if someone steals your app code and your database well then everything is screwed
03:08 < gkatsev> don't keep your salt with your db :)
03:08 < timeturner> yeah
03:08 < timeturner> it's very simple actually
03:08 < timeturner> imo
03:08 < gkatsev> it's relatively simple to what it used to be
03:08 < timeturner> learning the actual encryption concepts is pretty difficult though
03:08 < gkatsev> yeah
03:08 < timeturner> tbh I understand very little about that
03:09 < gkatsev> I wanted to take the coursera crypto course
03:09 < timeturner> I wish I knew more, it is pretty interesting
03:09 < timeturner> yeah
03:09 < gkatsev> but taking algorithms instead (as they have more immediate use for me currently)
03:09 < timeturner> I was thinking about that
03:09 < gkatsev> timeturner: do it
03:09 < timeturner> yep
03:09 < timeturner> yeah might give it a try
03:09 < gkatsev> starts tomorrow, I think
03:10 < samholmes> Where do I store my salt?
03:10 < AAA_awright> Why not keep your salt with your db?
03:10 < AAA_awright> You keep it with the password
03:10 < ljharb> next to the pepper!
03:10 < ljharb> hahaha sorry couldnt resist
03:11 < gkatsev> AAA_awright: lol
03:11 < samholmes> ljharb: haha, that made me laugh.
03:11 < samholmes> :D
03:11 < samholmes> AAA_awright: So, a salt column next to the password column?
03:12 < AAA_awright> This is what my password column typically looks like: kSolRALqXXObYULV7J1nWA==:10000:7I6gT9oJHGnFqfiRCzpavaMs2mnbpRZh57lqFo3XNWBNLgh5JuEFwF81RWUkf6+bxBY3dYeL1pR+SSBhBbIADQ==
03:12 < gkatsev> don't forget to keep the plain text around as well. :P
03:12 < AAA_awright> That's pbkdf2 for "password"
03:13 < AAA_awright> First is the salt, base64 encoded, then 10000 rounds, then the hashed password, base64 encoded
03:13 < samholmes> What's 10000 rounds?
03:13 < AAA_awright> Oh pbkdf2 also takes a "hash length" argument, but you can calculate that from the stored hash
03:13 < AAA_awright> It applies SHA-1 10k times
03:13 < AAA_awright> or something like that
03:13 < gkatsev> AAA_awright: wait, do you really keep your salt with your password?
03:13 < AAA_awright> gkatsev: Yes!
03:13 < gkatsev> ...
03:14 < AAA_awright> And you use a DIFFERENT salt for each password
03:14 < AAA_awright> You're using a different salt, right?
03:14 < gkatsev> even better, different salt for different password AND keep it separate
03:14 < AAA_awright> gkatsev: MAYBE you encrypt your salt, with a key kept outside of the database
03:14 < samholmes> You don't keep the salt in the same column, do you?
03:14 < AAA_awright> That's a single string I keep in MongoDB
03:14 < AAA_awright> kSolRALqXXObYULV7J1nWA==:10000:7I6gT9oJHGnFqfiRCzpavaMs2mnbpRZh57lqFo3XNWBNLgh5JuEFwF81RWUkf6+bxBY3dYeL1pR+SSBhBbIADQ==
03:14 < Aria> encrypting salt seems like mixing things up wrong. Its purpose is to make every entry unique, even if the password is the same, so there's no rainbow tabling.
03:14 < Nuck> AAA_awright, gkatsev, samholmes: just use bcrypt
03:14 < Nuck> Srsly
03:15 < Aria> bcrypt ++
03:15 < gkatsev> Nuck: I know. I suggested bcrypt.
03:15 < Nuck> Am I the only person who uses crypt with a second random salt?
03:15 < Nuck> nom install bcrypt is your friend
03:15 < samholmes> nom?
03:15 < gkatsev> nom? lol
03:15 < Nuck> It even has a built-in salt
03:15 < Nuck> Fuck you autocorrect
03:15 < Nuck> ಠ_ಠ 
03:15 < samholmes> haha
03:16 < AAA_awright> What's so much better about bcrypt? It's a wrapper around pretty much the same stuff
03:16 < Nuck> AAA_awright: ...
03:16 < samholmes> So, the hash returned by bcrypt include the salt then?
03:16 < AAA_awright> PBKDF2 has test vectors, it's a standard, idk about bcrypt
03:16 < Aria> Yeah, bcrypt includes the salt.
03:16 < Nuck> AAA_awright: …..
03:16 < Nuck> Hold on
03:17 < samholmes> Aria: So, I don't have to even worry about storing the salt.
03:17 < AAA_awright> If bcrypt comes with a salt that means you still have to define some way of storing it, or comparing it, and retreiving the password
03:17 < Nuck> AAA_awright: http://codahale.com/how-to-safely-store-a-password/
03:17 < Nuck> There
03:17 < Nuck> AAA_awright: Nope!
03:17 < Aria> Indeed. Like crypt()
03:17 < Nuck> AAA_awright: It stores the salt in the hashstring
03:17 < timeturner> why not encode the salt with the hash
03:17 < AAA_awright> That's what I do, too
03:17 < Nuck> It's like $salt$bcrypt or some shit
03:17 < timeturner> like bcrypt
03:18 < Nuck> AAA_awright: Go ahead and soak in that article
03:18 < AAA_awright> Nuck: I've seen it
03:18 < timeturner> it generates the salt and then uses that salt to generate the hash and encodes it in
03:18 < Nuck> Then why aren't you using crypt, AAA_awright ?
03:18 < AAA_awright> It makes no argument as to why use bcrypt as opposed to something else
03:18 < AAA_awright> It's just telling you don't use SHA-1
03:18 < Lorentz> salt is good, that's not the problem; it's simply that usual hash algos are made for speed, not for doing passwords
03:18 < AAA_awright> Which is correct, but it's a non-sequitur that you should use bcrypt instead
03:18 < mscdex> node.js rules!
03:18 < Nuck> AAA_awright: Then you clearly did NOT read it
03:19 < Lorentz> bcrypt introduces work factor, making running a single hash much more difficult to run
03:19 < gkatsev> which is why I also suggested doing multiple runs
03:19 < AAA_awright> THAT'S WHAT PBKDF2 DOES
03:20 < clooth> *burps*
03:20 < samholmes> AAA_awright: Yeah, but you can pronounce bcrypt.
03:20 < samholmes> :D
03:20 < AAA_awright> bcrypt?
03:20 < gkatsev> lol
03:21  * AAA_awright rages
03:21 < Nuck> AAA_awright: Not to mention, you're just key-stretching SHA1
03:21 < Nuck> Which is *still* unsafe
03:21 < AAA_awright> There's nothing unsafe about SHA-1
03:21 < gkatsev> lot's unsafe about it
03:21 < Nuck> Chaining a crappy hash algorithm is not safe
03:21 < gkatsev> sha-1 has been proven unsafe
03:22 < Nuck> There are THOUSANDS of reasons not to use SHA1, even with chaining
03:22 < gkatsev> it's better than md5 but not by much
03:22 < AAA_awright> CTR-HMAC-SHA-1 is considered safer than AES
03:22 < Nuck> Isn't AES an encryption algorithm not a hashing algorithm?
03:23 < AAA_awright> CTR turns it into an encryption algorithm.
03:23 < AAA_awright> It's XOR.
03:23  * Aria shrugs. Both pretty well known, both pretty understood.
03:23 < gkatsev> AES Advanced Encrypt Standard
03:23 < AAA_awright> gkatsev: SHA-1 has fewer bits of security than advertised, but it's not "broken". The length-extension attack is mitigated with HMAC.
03:23 < Nuck> AES is fast
03:23 < Nuck> :I
03:23 < Nuck> Just use bcrypt and rest assured that you're good for the next 5-10 years
03:24 < gkatsev> probably even longer if you use a high work factor and do multiple passes
03:24 < timeturner> lol
03:24 < timeturner> yeah
03:24 < AAA_awright> My point is, you still have to implement bcrypt correctly. You still need some mechanism to read the hash, including salt, from the database, and compare it to the input password
03:24 < Nuck> Instead of using SHA1 and probably having to change your hash after a few years
03:24 < timeturner> and after that who's going to stick around anyways
03:24 < Nuck> gkatsev: Don't do multiple passes, just increase the work factor
03:24 < timeturner> ah
03:24 < Nuck> AAA_awright: No, you don't
03:24 < timeturner> you should change the hash every couple of years
03:24 < Nuck> AAA_awright: You just use the bcrypt.compare_hash function
03:24 < timeturner> problem solved
03:24 < gkatsev> AAA_awright: http://eprint.iacr.org/2008/469.pdf
03:25 < Nuck> It does a 100% secure comparison
03:25 < Nuck> No timing attacks
03:25 < AAA_awright> Which is my point, it includes a comparison function
03:25 < Nuck> Which if you're using === on a string, is a risk
03:25 < AAA_awright> You can have other timing attacks too
03:25 < AAA_awright> I.e. if the user doesn't exist, if the hash doesn't exist in the database
03:26 < Nuck> Yes, but those aren't really "attacks" that can risk your users' passwords
03:26 < AAA_awright> I make the minimum unsuccessful page load time for submitting a password 250ms
03:26 < Nuck> That's paranoia right there
03:26 < AAA_awright> You can get information about if the user exists
03:26 < Nuck> Also 250ms is terrible lag, you'll have a nice drop off there
03:26 < AAA_awright> Really easily
03:26 < AAA_awright> It either returns instantly, or it returns after 100ms
03:26 <@konobi> bcrypt is also cusomtizable in terms of how much processing is required to generate/verify the hash
03:26 < Nuck> Who cares if the user exists?
03:27 < AAA_awright> Lots of people, that's an attack vector
03:27 < Aria> As is PBKDF2.
03:27 < Nuck> I use a work factor of like 11-12, I'll probably up it by 1 every year or so
03:27 <@konobi> yeah... work factor, that's the one
03:27 < gkatsev> just start at 100 :P
03:27 < AAA_awright> I calculate 100ms of cycles and use that
03:28 < AAA_awright> Also, the big reason I wouldn't use bcrypt is it's modified blowfish, it doesn't use any well-tested block ciphers or hashes or anything. It's considerably less tested than other hashes.
03:28 < Amine> Hello guys
03:29 < Amine> I'm new to nodejs and need help about something
03:29 < Nuck> gkatsev: 100 work factor?  Jesus fuck
03:29 < gkatsev> haha
03:29 < Nuck> gkatsev: That'll add a minute of lag? D:
03:29 < Nuck> At least
03:29 < Nuck> Maybe 5-10 minutes
03:29 < gkatsev> probably
03:30 < gkatsev> idk, I've not used it.
03:30 < Nuck> I did the math, a work factor of 12 is about 200ms or something
03:30 < timeturner> if the user exists then come and find the password
03:30 < Nuck> AAA_awright: Blowfish is badly-tested?
03:30 < gkatsev> Nuck: the article says it took him 0.3 seconds for yyaa
03:30 < Nuck> Are you shitting me?
03:30 < AAA_awright> My KeePassX is encrypted with 5000000 rounds, it takes me 5 seconds to load
03:31 < Lorentz> pretty sure blowfish was a finalist in aes competition
03:31 < Lorentz> or was it twofish
03:31 < Lorentz> then again it's normal blowfish, not the modified one for bcrypt
03:31 < Nuck> It's not modified blowfish
03:31 < Lorentz> Nuck: well then, it should be damn well tested
03:31 < Nuck> It's just the blowfish methodology and keying schedule used to make a one-way hashing algo
03:31 < Nuck> It is tested
03:32 < AAA_awright> Nuck: Modified blowfish
03:32 < Nuck> AAA_awright: No, BASED on blowfish.  Big difference.
03:32 < AAA_awright> Even worse
03:33 < cc> hi
03:33 < Nuck> Le sigh.
03:33 < Nuck> Whatever, keep with your methods.
03:33 <@konobi> it's plain blowfish... it just makes the keys much more expensive to generate
03:33 < AAA_awright> Sorry if I'm skeptical towards new encryption algorithms
03:34 < Nuck> konobi: Not quite.  Blowfish itself is an encryption algorithm, bcrypt is hashing.
03:34 < timeturner> doesn't blowfish have documented vulnerabilities?
03:34 < Nuck> timeturner: None
03:34 < AAA_awright> Modifying algorithms generally isn't something you want to do, since they should alredy be secure
03:34 < Nuck> Been around since 1993, no known cryptographic vulnerabilities
03:34 < Nuck> AAA_awright: ...
03:34 < timeturner> I'm happy with bcrypt because it's modified anyways
03:34 < Nuck> AAA_awright: That's a terrible way of thinking.
03:35 < timeturner> although pbkdf2 might be more effective...dunno about that
03:35 < Nuck> Anyways, I just recommend bcrypt for all password storage because (1) it's easy to implement (8 lines of code where unhashed MD5 might take 3) and (2) it's secure as fuck
03:35 < Nuck> timeturner: If it's just chaining SHA-1 it's not secure
03:35 < Nuck> Maybe if it chained SHA-256 or SHA-512 I could trust it
03:35 < timeturner> yeah
03:36 < Nuck> But with just SHA-1?  Might as well MD5 the thing
03:36 < gkatsev> sha-1 has a known attack vector
03:36 < Lorentz> AAA_awright: if wikipedia's page is anything, best attack on sha-1 is 2^51, pretty bad considering it should be 2^64
03:36 < Nuck> gkatsev: Exactly
03:36 < Lorentz> not sure on details of attack exactly to pull that off
03:36 < gkatsev> 23:34:04 < AAA_awright> Modifying algorithms generally isn't something you want to do, since they
03:36 < gkatsev> oops
03:36 < gkatsev> http://eprint.iacr.org/2008/469.pdf sha-1 collision vector
03:37 < AAA_awright> Blowfish has a known chosen-plaintext attack, it looks like. I'm not sure if that would affect its use as a hash function in this instance.
03:38 <@konobi> AAA_awright: just because an academic paper says an algo is secure, doesn't mean that the implementation is
03:38 < AAA_awright> gkatsev: Is that an actual collision or just showing it does, indeed, have fewer bits of security than advertised
03:38 < AAA_awright> konobi: That's kind of the point I'm making?
03:39 <@konobi> yet you have a preference of one over the other? just pick the easiest one to implement
03:39 < AAA_awright> Nuck: Why should you trust some new encrypton algorithm? Encryption isn't a deductive science like math or economics, it's inductive, you have to publish something and hope it's never broken
03:39 < AAA_awright> Never disproven
03:39 < Nuck> AAA_awright: … It IS math.
03:39 < Nuck> :|
03:40 <@konobi> quite concretely so
03:40 < Nuck> AAA_awright: I really get the feeling you're not fully understanding cryptography here o_O
03:40 < AAA_awright> It uses math, but the science isn't making proofs
03:40 < Nuck> Not all math is making proofs, man
03:40 < AAA_awright> That's my point
03:40 < Nuck> In fact, only a tiny sliver of it is
03:40 < AAA_awright> Cryptography doesn't formulate proofs about things
03:40 < AAA_awright> Therefore, it's inductive
03:40 < Nuck> That's not how logic works, AAA_awright 
03:40 < AAA_awright> Mm, no, most of math is deductive
03:40 < Nuck> No, most of math is inductive
03:41 < Nuck> High school math is only deductive because that's easier to teach
03:41 < Nuck> REAL WORLD math is inductive
03:41 < AAA_awright> It's not called a theorem until it's proven
03:41 < AAA_awright> It's not good enough to say "Our computer searched 3e40 permutations and all came back positive"
03:41 < Nuck> And it's not a reasonable cryptographic formula until you demonstrate why it's hard to break mathematically
03:42 < AAA_awright> In cryptography you have to demonstrate it's secure against known attacks, which includes things like calculating key diffusion and such
03:42 < AAA_awright> That doesn't mean there's not more attacks
03:42 < Nuck> No, that's not how you do it
03:42 < timeturner> AAA_awright, Nuck: Can anyone produce statistical reasearch that pkbdf2 or bcrypt is more or less vulnerable than the other?
03:42 < timeturner> any real research
03:43 < timeturner> documented
03:43 < AAA_awright> Well the whole point is that you can't. We know it has at MOST x bits of security, but someone could publish a paper that proves it's actually less than that
03:43 < Nuck> timeturner: I cannot, but SHA-1 is known to be broken (hence SHA-2) and chaining is also known to be an ineffective means of preventing attacks
03:43 < Nuck> It doesn't unbreak the algorithm
03:43 < gkatsev> apparently, sha-3 is being worked on
03:43 < AAA_awright> You can prove how many bits of security something has at most, but you can't prove that your newfangled hash has at LEAST x bits
03:44 < Nuck> AAA_awright: That's how you prove it if you don't know what the fuck you're doing like a bumbling fool, but the people who made blowfish and AES and whatnot are not bumbling fools and prove their cryptographic security the right way
03:44 < Nuck> gkatsev: Good, they'll be in time for the breaking of SHA-256 (it'll happen someday, we all know it :D)
03:44 < gkatsev> Nuck: haha
03:44 < Nuck> Everything is broken eventually
03:44 < Nuck> It's just a question of how long it takes (and the computing power involved)
03:44 < timeturner> the only safe assumption I can make is that if they are making a newer version of SHA then the reason is probably related to algorithm effectiveness and it is probably better to use the latest version of SHA
03:45 < Nuck> timeturner: Exactly
03:45 < AAA_awright> Nuck: That's how they demonstrated the hash is secure! You test it with a reduced number of rounds, you do statistical regressions on the output at each stage, test which constants produce the best mixing of the plaintext the quickest
03:45 < Nuck> Which is why if you're going to use PKBDF2, at least use HMAC-SHA-256 or -512
03:45 < timeturner> Nuck: righty
03:45 < timeturner> right*
03:45 < timeturner> exactly
03:46 < Nuck> AAA_awright: No, that's not.  You analyze the algorithm behind it and attempt to find any deficiencies through logic and mathematical properties.
03:46 < AAA_awright> You can't use logic to prove that something doesn't exist
03:46 < AAA_awright> You can try a fairly exaustive search and demonstrate it probably doesn't, but that's not proof
03:47 < AAA_awright> When I hear "logic" I think first-order logics, A and B therefore C
03:47 < timeturner> that's a limit
03:47 < timeturner> a calculus problem
03:47 < timeturner> very simple
03:48 < AAA_awright> timeturner: Go ahead and find the limit x->+0 of cos(1/x) for me
03:48 < Nuck> AAA_awright: You use logic to prove that you are protected against specific attack vectors and various other theoretical attack vectors — examples being thrown against it do not prove anything
03:49 < Nuck> AAA_awright: Examples could have holes
03:50 < timeturner> right
03:50 < timeturner> it boils down to theory
03:50 < AAA_awright> timeturner: If you think calculus can solve anything that requires an exaustive search, some mathemiticans working on the Reimann hypothesis want to talk to you
03:51 < AAA_awright> Nuck: That's the point I'm making
03:54 < timeturner> I lost track, why do you think pkbdf2 is better?
03:57 < AAA_awright> timeturner: Because bcrypt doesn't have any significant cryptanalysis work behind it to demonstrate it's secure. It's modified from other algorithms which, worst case, could mean it was modified with malicious intent. It's probably way more secure than anything else but stranger things have happened.
03:57 < timeturner> ah I see
03:59 < AAA_awright> SHA-1 isn't the secure algorithm that we'd like either but there's no attacks against it that would make PBKDF2-SHA-1 insecure that I know. SHA-1 suffers from a length-extension attack, which isn't relevant to PBKDF2, and if there's a collision, that introduces a chosen-plaintext attack, which also doesn't affect PBKDF2
04:02 < AAA_awright> Also, let's assume that bcrypt is secure for the sake of argument, I'd prefer http://en.wikipedia.org/wiki/Scrypt because it stretches memory, too, which is slightly more expensive
04:03 < gkatsev> ok, use scrypt. That's fine too.
04:03 < AAA_awright> I haven't looked at the basics of scrypt to know if it's on solid foundation, though
04:03 < AAA_awright> Does it use a standard block cipher... what?
04:04 < gkatsev> http://www.tarsnap.com/scrypt.html
04:26 < mscdex> tales from the bcrypt
04:27 < Robdgreat> ^^
04:27 < gkatsev> mscdex: hehe
04:52 < cc> l
04:58 < dr0id> m
05:13 < astropirate> m
05:16 < mscdex> n
05:18 < gkatsev> o
05:23 < astropirate> What are people using to hash their passwords in the database?
05:23 < dr0id> p
05:24 < astropirate> 5
05:24 < dr0id> cool people use md5
05:24 < dr0id> non-cool people use bcrypt
05:24 < gkatsev> haha
05:25 < astropirate> but the coolest of them all use rot13 right
05:25 < deoxxa> i use rot26 - impossible to reverse
05:25 < etcetera> is there a good chrome tab management tool you guys like?
05:26 < astropirate> etcetera, how many tabs do you open taht you need a tab management tool?
05:27 < etcetera> 30+
05:27 < astropirate> i personally feel clostraphobic if i have more than... 5-6
05:27 < etcetera> I'd like something like spotlight for tabs.
05:27 < astropirate> lol
05:27 < etcetera> astropirate: me too, but for when it gets out of hand and I don't have time to organize...
05:27 < dr0id> I have about 100 tabs open anytime
05:28 < etcetera> Spotlight for Tabs would be....awesome. Especially with a keyboard shortcut.
05:28 < astropirate> jeez luise
05:28 < dr0id> across 4-5 browser instances
05:28 < dr0id> but that doesn't mean I use tab management tools
05:28 < dr0id> but I use sessionbuddy
05:31 < devians> hey, i think i broke my npm. its saying it wont run on 0.8.5, how can i fix it? i assume npm just needs an update but the curl install method fails also.
05:37 < mscdex> devians: you tried `npm update npm -g` ?
05:39 < devians> yep, same error.
05:39 < devians> Error: npm doesn't work with node v0.8.5
05:40 < ljharb> i have npm 1.1.59, and i can't `npm update` anymore
05:40 < chilts> I generally just use the npm that comes with each node, so that these kind of inconsistencies don't happen
05:40 < devians> i think i should uninstall my npm i think
05:41 < chilts> I'd probably remove your globally install npm, and default to the one in the same dir as the node executable
05:41 < devians> if i do which npm its in my non global node_modules/.bin
05:42 < chakrit> just curious, why is the second version slower: https://gist.github.com/3485922 ?
05:42 < chakrit> because I have function calls in a try block?
05:43 < ljharb> chakrit: try/catch makes everything slower
05:44 < chakrit> ljharb: I have try/catch in both version :/ just wondering why having a larger try block is slower
05:44 < chakrit> about 100ms slower.. not much.. but wanna know the reason
05:45 < gkatsev> v8 can't optimize anything inside of a try block
05:45 < gkatsev> chakrit: try moving the stuff inside the try block into a separate function and you should see an increase in speed
05:48 < chakrit> gkatsev: ah, yeah that makes it a bit faster
05:48 < gkatsev> chakrit: there's a good talk about it at this year's google io, if you want.
05:49 < chakrit> i guess things gets real tricky inside a try block for v8
05:49 < chakrit> gkatsev: i c, thanks, will look for it :)
05:50 < gkatsev> chakrit: http://www.youtube.com/watch?v=UJPdhx5zTaw
05:50 < chakrit> gkatsev: thx :)
05:50 < gkatsev> np
05:51 <@isaacs> AAA_awright: nodejs-dev gets very very little traffic
05:51 < mscdex> anyone know where the compiling guide to building node on pi/arm11 is at?
05:51 <@isaacs> AAA_awright: and the types of conversations it used to have are all on github now.
05:52 <@isaacs> AAA_awright: literally every thread that could potentially be on it would be better as a github issue
05:52 <@isaacs> AAA_awright: it was only serving to annoy all core committers (myself included)
05:52 <@isaacs> AAA_awright: if you what what it used to be, follow joyent/node on github
06:14 < astropirate> Anyone recommend a wysiwyg editor?
06:16 < onre> for what? if you mean a wysiwyg html editor that runs in browser, i'd suggest looking at elrte
06:17 < astropirate> thanks onre looking into it
06:27 < framlin> I use http-proxy and want to store the result of the request for caching. How to do that?
07:29 < clooth> What exactly is the difference between client.json.send and client.json.broadcast?
07:29 < clooth> (socketio)
07:33 < astropirate> Does mongoose allow for setting a setter? I want to "set" the users password on the database. But i want my schema to automatically generate a hash and set that instead
07:36 < [AD]Turbo> hi there
07:36 < astropirate> [AD]Turbo, hello
07:37 < astropirate> Why is bcrypt's hashing async?
07:37 < astropirate> it doesn't perform IO 
07:38 < astropirate> ohh it uses native
07:39 < clooth> Oh my question was reallly stupid.
07:39 < clooth> :D
07:40 < astropirate> clooth, high five
07:40 < clooth> Shhh
07:40 < clooth> Don't admit anything!
07:49 < prettyrobots> ccowan: Internet narcissism.
07:49 < prettyrobots> ccowan: Regarding not being able to drop things.
07:50 < prettyrobots> ccowan: Going over my ircretary notes.
07:54 < clooth> What do you guys think about balancing require lines with extra whitespace after the variable name and the = sign?
07:54 < clooth> like fs and http are two letters different, so I would pad the fs line with two spaces
07:56 < framlin> for testing-reasons I want to record the http-request and its responses, so that I can replay the results later from a server-mock. Is there any module thyt can do this or (if not) any hint how to do this?
07:57 < framlin> I played a little with http-proxy, but I did not find out, how to get the responded data ...
08:02 < clooth> How can I expose variables into the global scope so they're accessible by all the modules in my application
08:02 < clooth> say.. paths or debug levels, etc.
08:05 < substack> clooth: there are better ways to have global state than exposing variables
08:05 < clooth> I mean like, my app has paths for different resources used by multiple models
08:06 < clooth> erm, modules
08:06 < substack> if you're running into that problem at all then you're doing something wrong
08:06 < clooth> kinda like having an app.root_path, app.resources_path
08:23 < framlin> does nobody have any idea, howto record and reply http-requests/-responses?
08:24 < zomg> You mean like record what http reqs and responses happened, and then play them back somehow?
08:26 < framlin> zomg: yepp
08:26 < framlin> I want to store the reults and response them later if I replace the server with a server-mock
08:27 < framlin> and I want to reply the reqs to the real server
08:27 < zomg> Well you could either do it in your application, or use some software to monitor the traffic to the server I guess
08:27 < zomg> If you do it in your own app code, then you'd just need to implement something to store the request and response data
08:27 < framlin> thats for testing-reasons, so I do not want to integrate this in my app code
08:28 < framlin> I want to sit between the client and the server and record the requests together with their responses
08:29 < framlin> later Iwant to exchange the server with a server-mock that responses with the stored responses of the real server
08:30 < framlin> it sounds like using http-proxy with (connect-)middleware, but i do not know, how tho access the response-data within the middleware
08:48 < clooth> Is it ok to do this: globals._ = require 'path to underscore.js'
08:49 < framlin> clooth: you never want to use global variables .....
08:50 < clooth> mk
08:50 < clooth> I will not, then.
08:50 < clooth> I will only require it where needed
08:50 < clooth> ^_^
09:04 < framlin> zomg: what do you exactly mean by " use some software to monitor the traffic to the 
09:04 < framlin>               server"
09:04 < framlin> ?
09:24 < eaSy60> Hello. Somebody is using session-mongoose?
09:41 < framlin> how can I decide, if response-data are a string (e.g. JSON-String) or binary-data (e.g. an image)?
09:51 < Fodi69> hi, I want to do test driven development with node, but I have found many choices doing it, can anyone provide me a guide, which module is better for which kind of work or project?
09:53 < substack> Fodi69: nodeup 28 earlier today was all about that topic, it'll be online soon
09:53 < substack> http://nodeup.com/
09:53 < substack> I like https://github.com/isaacs/node-tap the best
09:53 < Fodi69> I've looked at Mocha, Vows and Cucumberjs
09:54 < sorin7486> a node.js podcast ? :)
09:54 < sorin7486> cool :D
09:54 < Fodi69> substack: do you know what does 'soon' mean?
09:54 < sorin7486> Fodi69, I'm new to node.js too
09:54 < Fodi69> minutes, hours, days?
09:55 < Fodi69> sorin7486: nice :D
09:55 < sorin7486> but in the few weeks I've been using it there's one thing I learned
09:55 < sorin7486> just pick one and go with it
09:55 < sorin7486> I'm scratching my head with vows atm
09:55 < mmalecki> sorin7486: any problems with vows?
09:55 < mmalecki> I know my way around it ;)
09:56 < sorin7486> mmalecki, nah, just different :)
09:56 < sorin7486> I have another problem right now, I'll get to that in a minute :)
09:56 < sorin7486> Fodi69, you can always go to https://npmjs.org/ and search for the module you're interested in and see how popular it is
09:57 < substack> sorin7486: that doesn't go away
09:57 < sorin7486> :)
09:57 < sorin7486> also there's this website I found that will do that for you, meaning compare different modules
09:57 < sorin7486> http://nodejsmodules.org/
09:57 < sorin7486> but I'm not sure if the data there is up to date
09:57 < sorin7486> there's some tags that seem to be missing
09:58 < sorin7486> now to the reason I dropped by
09:58 < clooth> I'm requiring a module called playerManager from my main server script, and I'm thinking.. what if I want the same instance of playerManager be accessible from other modules, how would I achieve this?
09:58 < sorin7486> clooth, you can use a common script
09:59 < clooth> Elaborate?
09:59 < sorin7486> here's an example
09:59 < sorin7486> https://github.com/nearform/appgen/blob/master/lib/common.js
09:59 < clooth> 404
09:59 < sorin7486> you have one that requires everything
09:59 < sorin7486> and then you import that everywhere else
10:00 < sorin7486> I'll look for another example
10:00 < clooth> Thanks.
10:01 < milani> clooth, sorin7486 nodejs does not load modules everytime
10:01 < clooth> milani: I need to be sure it is always the same instance when it is called though
10:01 < milani> if you require somewhere, the same instance is used everywhere unless something clear the catch.
10:01 < clooth> as long as the server is running
10:02 < sorin7486> milani, ok, didn't knew that
10:02 < clooth> milani: so... hold on
10:03 < milani> clooth, if nothing goes wrong you have the same object everywhere( not 100% guarantee, but it supposed to work in this way ). 
10:03 < clooth> milani: https://gist.github.com/3487075
10:03 < clooth> Would server.coffee and map_manager.coffee have the same instance with the same data?
10:03 < clooth> of playerManager
10:03 < milani> yes.
10:03 < clooth> "not 100% guarantee"
10:03 < milani> nodejs loads the module the first time you require it. 
10:04 < clooth> what would cause it to not be the same one
10:04 < milani> then it puts it in a cache.
10:04 < clooth> s/would/could
10:04 < milani> then node puts the module in a cache.
10:04 < clooth> hmm
10:04 < clooth> so if I modify attributes of the module in server.coffee and then again in map_manager.coffee, they would be in sync?
10:04 < milani> and if you require again, the cached module is passed.
10:05 < milani> yeah.
10:05 < clooth> that's great.
10:05 < clooth> exactly what I needed to know
10:05 < clooth> thank you.
10:06 < clooth> also, what sorin7486 brought up about having a common script which requires all of them
10:06 < sorin7486> cloth, you could also use config for that
10:06 < clooth> would it be possible to do something like this:
10:06 < clooth> playerManager, spriteManager, mapManager = require 'common'
10:06 < clooth> If you know what I mean
10:06 < sorin7486> mmm.. not sure
10:06 < sorin7486> gotta run
10:06 < sorin7486> lunch waiting
10:06 < sorin7486> o/
10:06 < clooth> in common I would have module.exports = [require 'player_manager', require 'sprite_manager', require 'map_manager']
10:07 < clooth> would this work?
10:07 < milani> it makes the code less readable.
10:07 < clooth> yes that line does
10:07 < clooth> but it was just an example
10:07 < clooth> had to keep it in one line for IRC
10:07 < clooth> :P
10:07 < clooth> but yeah I guess.
10:07 < clooth> I could always do something like..
10:09 < clooth> milani: https://gist.github.com/3487131
10:09 < clooth> right?
10:09 < clooth> ignore the commas
10:11 < milani> yeah it is now better.
10:11 < clooth> I think I will do it like that.
10:15 < clooth> milani: https://gist.github.com/3487168
10:16 < clooth> D: why is it using tabs
10:16 < clooth> *fixes editor*
10:19 < clooth> https://gist.github.com/3487201
10:19 < clooth> this works nicely.
10:33 < niloy> yooo my blog is up, new article on generating static website via node and hosting on github: http://niloy.github.com/Introducing_Stasig.html
10:41 < hipsters_> https://gist.github.com/3487317 anybody able to look at these few isolated lines of code and let me know why i'm getting  a range error?
10:42 < hipsters_> as far as i can tell it's not even hitting the file system check, just going straight onto the iterator each time
10:42 < rvagg> hipsters_: fs.stat() is async, you're using 'return' which does nothing
10:42 < hipsters_> ugh fuck
10:42 < hipsters_> thanks rvagg 
10:42 < hipsters_> thought i was missing something there
10:56 < hipsters_> niloy: that 3d canvas header thingy uses 60% CPU in Chrome when the tab is in focus 
10:59 < niloy> hipsters_, yeh really sorry about that :D
11:00 < jiml_> ...and it's hideously ugly.
11:00 < hipsters_> haha there's also that
11:00 < hipsters_> at least stop it after i've scrolled down far enough i'm not seeing it anymore
11:01 < niloy> humm that a good idea
11:07 < sorin7486> looks like xchat stops logging after suspend
11:07 < sorin7486> can anybody see what I wrote before ?
11:09 < NodeX> No
11:19 < sorin7486> ok, thanks
11:19 < sorin7486> I have a problem when passing a stream from a function to a callback
11:19 < sorin7486> the stream is closed before the callback is called
11:19 < sorin7486> http://pastebin.com/3Ck28uun
11:19 < sorin7486> that's an example
11:19 < sorin7486> anybody know why this happens ?
11:32 < clooth> I am superpower.
11:38 < tonist> hey. anyone has a recommendation for a library that does redis memoize using pub/sub?
11:39 < tonist> I have long requests (>6sec) going to outside server so I need to cache the result to not completely slow down the UI. I use cluster so I can't use regular memoize. Problem is that second request usually comes before first one has finished so get/set isn't enough and I need pub/sub.
11:40 < tonist> Writing it myself also seems bad as npm shows so many results for redis.
11:45 < shlevy> Running the tests, I'm getting "Error: addMembership ENODEV". My distro's package manager uses a special chroot for builds, what device might be missing that we need to add to the chroot?
11:58 < jaseemabid> [libgit2] "error while loading shared libraries: libgit2.so.0". I have the file in the build folder. Where am i supposed to put it? I have /usr/local/include/git2.h and it is linked properly with -lgit2 flag
11:58 < jaseemabid> I'm working on a node.js binding with it
12:00 < astropirate> jaseemabid, i *THINK* there already exists a library
12:00 < astropirate> saw it somewhere...
12:00 < astropirate> and there is App.js
12:00 < jaseemabid> astropirate, I know there is a binding. Im trying out something with it
12:00 < milani> appjs has nothing to do with git:)
12:00 < milani> but there is libgitteh 
12:00 < milani> for nodejs
12:01 < astropirate> milani, this is what sleep deprevasion will do to you :p  i read that libgtk instead of libgit
12:01 < astropirate> :(
12:01 < milani> jaseemabid, if you want to work with your own copy of libgit you should use rpath when linking
12:01 < jaseemabid> I know about libgetteh and nodegit. Its an experimentation 
12:02 < pringlescan> If you have synchronous functions (like string functions, etc) in a published NPM module… how should you handle invalid arguments. Throwing errors seems informative, but overkill, should I just return false on error regardless of expected output type?
12:02 < zomg> pringlescan: throw on invalid arguments
12:02 < pringlescan> I could make them callback style, but it doesn't really make any sense if they're not waiting for I/O
12:02 < clooth> Oh the hue-manatee.
12:02 < zomg> synchronous ones should usually just throw if it's user error
12:03 < pringlescan> Error: decodeVanity expects argument 'phone' as string! <— so that's not excessive
12:03 < milani> jaseemabid, r u on linux?
12:03 < zomg> Of course not
12:03 < zomg> That's very good
12:04 < zomg> I think it would only be confusing and hard to debug if it didn't do that
12:04 < zomg> var rs  = decodeVanity(null); if(rs == 'phone_not_string') ?????
12:04 < zomg> :D
12:06 < pringlescan> okay, thanks. i don't know why I thought other people not using error handling would be my fault when my error crashed their production system. 
12:08 < jaseemabid> milani, some ldconfig and tweaks! it works :)
12:09 < milani> jaseemabid, yeah it works for you only.
12:09 < milani> but if someone else wants to use that, he gets into trouble.
12:09 < milani> if you are on linux you can simply use -rpath, google it.
12:10 < zomg> pringlescan: well it would crash eventually anyway. If they don't handle the input to your function correctly, and your function returns an error code instead of the expected output, it would probably cause the application to fail eventually, but only in a more confusing way :D
12:10 < jaseemabid> milani, http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html helped me
12:11 < pringlescan> zomg, true
12:11 < jaseemabid> milani, !google -rpath is quite ambiguous. Which tool exactly are you talking about?
12:13 < milani> jaseemabid, https://github.com/appjs/appjs/blob/master/binding.gyp#L300
12:13 < milani> using rpath ( -R ) you tell linker to link against a relative path.
12:13 < milani> so ld can find it relative to your project, what it means is that you can rely on your own copy of library
12:14 < jaseemabid> milani, hmm, I came across this in the gitteh source
12:14 < jaseemabid> Thanks
12:19 < milani> np
12:19 < milani> :)
12:20 < milani> jaseemabid, just take care, it is different in osx. 
12:21 < jaseemabid> milani, Yes. I'm working on a sort of toy project. I just need it to work on my machine now. 
12:21 < jaseemabid> milani, Works well on linux
12:21 < jaseemabid> milani, You the app.js guy? Good stuff :)
12:22 < milani> thx:)
12:22 < jaseemabid> he he
12:22 < milani> yeah these are all experiences from early days on appjs;)
12:33 < FND> `npm install jquery` puts dependencies into ./node_modules/jquery/node_modules/ -- is that a bug or intentional?
12:33 < FND> (npm v1.1.59)
12:36 < RLa> jquery dependencies? i think that's intentional
12:36 < FND> RLa: but `require("jsdom")` fails in node (with ./ as CWD)
12:38 < RLa> did you set jsdom as your project dependency in package.json?
12:39 < tqotjqno> hi
12:39 < FND> I just did `mkdir foo; cd foo; npm install jquery; echo 'require("jsdom")' | node` -- npm reports jsdom as an installed dependency though, and it appears in the nested node_modules dir
12:39 < tqotjqno> i made a chat application http://www.chatkapi.tk
12:40 < tqotjqno> how many user can stay online at a 2 gb linux vps average~ ?
12:41 < FND> RLa: FWIW, jsdom is listed in https://github.com/coolaj86/node-jquery/blob/master/package.json#L32
12:42 < RLa> you must mark jsdom as dep of your own project too
12:42 < RLa> FND, make sure you understand how modules work
12:43 < FND> yeah, it appears I'm not up to date anymore - things have changed since I've last done Node stuff
12:43 < FND> will read up, thanks
12:43 < RLa> and create package.json for the project
12:45 < FND> RLa: so even if I just want the REPL I need a package.json?
12:45 < RLa> yes
12:45 < FND> alright, thanks
12:46 < RLa> or also run npm install jsdom in addition to npm install jquery
12:46 < pringlescan> In javascript is === type coercion only or will it also not throw an error on undefined when we check it's value?
12:47 < RLa> === does not type coercion
12:47 < RLa> no*
12:47 < RLa> == does
12:47 < RLa> and no error on undefined
13:20 < jiml_> == is evil. === is good.
13:21 < jiml_> In a nutshell.
13:22 < martinrue> jiml_: that === true
13:22 < mscdex> coffee === good
13:46 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:49 < margle> coffee === good?
13:49 < margle> I cleared
13:49 < margle> man,
14:00 < ben_alman> are there any tools that can, for all dependencies in package.json, tell me if a newer version is available than what the specified version string covers?
14:00 < ben_alman> i find myself often needing to manually go through all dependencies and check for  updates
14:00 < ben_alman> since i'm using ~
14:02 < wltsmrz> I think you can use simply "latest" for the version, ben_alman 
14:02 < wltsmrz> Not that that's always a good option
14:02 < ben_alman> not at all
14:03 < AntelopeSalad> npm has an update function, but i don't know if it lets you look before updating
14:03 < ben_alman> it updates per the rules in package.json
14:04 < AntelopeSalad> are you sure?
14:04 < ben_alman> https://github.com/isaacs/npm/issues/817
14:04 < ben_alman> see the fixes
14:04 < AntelopeSalad> i could be crazy but i swear i once used npm update to update a bunch of deps at once
14:04 < AntelopeSalad> but it was a long time ago
14:05 < ben_alman> well i just tried it and it followed the rules
14:05 < AntelopeSalad> read the first response
14:05 < AntelopeSalad> "npm update on the other hand updates the dependencies, but to latest (and not according to the package.json):"
14:06 < ben_alman> yes and it doesn't actually do that
14:06 < ben_alman> this is an old, closed (fixed) ticket
14:08 < AntelopeSalad> hmm, wow i just tested it --- yeah you're right
14:09 < AntelopeSalad> it works if you use * as the first but that's just as bad as latest
14:09 < AntelopeSalad> *first = version
14:10 < ben_alman> this kinda works
14:10 < ben_alman> npm install $(node -pe "Object.keys(($(< package.json)).dependencies).map(function(m) { return m + '@latest' }).join(' ');"); npm ls | grep invalid$
14:10 < ben_alman> it installs the latest of all deps and then lists all the ones that are now invalid
14:11 < ben_alman> and their versions
14:13 < AntelopeSalad> the ideal solution for you is for it to check but not install right?
14:13 < ben_alman> yeah biut i can install, then fix my package.json and then re-install
14:14 < ben_alman> either way
14:14 < AntelopeSalad> a dirty solution might be to use something like yql to scrape the version # off the npm site
14:14 < ben_alman> nah
14:14 < ben_alman> you could use npm as a lib
14:14 < ben_alman> but this is probably a lot easier
14:14 < ben_alman> (what i've done)
14:15 < ben_alman> i mean, i've already completed it
14:15 < ben_alman> so it was pretty easy
14:15 < AntelopeSalad> but that forces an update no?
14:15 < ben_alman> yes
14:15 < ben_alman> but i can always just "npm install" to put it back
14:18 < darrenlooby> if I have export.watch ... how do I call that within another function in the same module ... so, in export.show {export.watch()} <<something like that?
14:22 < wltsmrz> var watch = module.exports.watch = function(){}; perhaps
14:23 < wltsmrz> (I might have misunderstood what you're after)
14:23 < darrenlooby> Maybe... I'll try and clarify... wltsmrz 
14:23 < darrenlooby> I've created a module function exports.watch =  function(){}
14:23 < darrenlooby> I can use that in my node app.
14:23 < wltsmrz> With you so far
14:24 < darrenlooby> Now, when looking at my module - I'll like to create a new function - which calls the first, like the app would.
14:24 < darrenlooby> For further processing
14:24 < darrenlooby> Was looking for something like "this."
14:24 < darrenlooby> But the module equivalent
14:25 < wltsmrz> So just (1) define your watch function and then (2) assign it to module.exports. That function will be accessible from within your module.
14:25 < wltsmrz> https://raw.github.com/gist/a1adfdecc8fdd4ba8adc/d00d2144d938b69e56821dd47892ff0f094949e2/gistfile1.txt
14:26 < darrenlooby> wltsmrz, ahh okay. That makes sense.
14:26 < darrenlooby> Cheers
14:26 < VesQ> or you could also just do expors.watch = function (){} and later on call it with exports.watch();
14:27 < wltsmrz> Of course
14:27 < VesQ> the way darrenlooby first said it was correct
14:28 < VesQ> "so, in export.show {export.watch()} <<something like that?"
14:28 < darrenlooby> Cheers guys. Just having a dumb moment... :)
14:29 < Industrial> Anyone use Stylus? I have this weird case where every now and then the stylus output file is blank
14:29 < Industrial> just .. no css. no warning anywhere etc
14:54 < superjoe> is there already something built out there that will help me deploy my server with zero downtime?
14:54 < superjoe> it should spin up a new instance, direct new requests to that, and then wait for a certain thing, and then spin down the old one
14:55 < yawnt> http://blog.nodejitsu.com/new-nodejitsu-features
14:55 < yawnt> superjoe: ^
14:57 < armetiz> Hi there, short question about child_process. I'm trying yo get the output of "grep -v Foo file.txt", But I get an error from stderr
14:57 < superjoe> yawnt, this is cool, thanks. I'm looking for software projects which do this, as opposed to a service
14:58 < armetiz> https://gist.github.com/3489256
14:58 < yawnt> superjoe: not that i know of, then.. i'm sorry
14:58 < yawnt> superjoe: you can install the nodejitsu platform on your server though
14:58 < armetiz> Do you have any clue regarding the code on gists ?
14:58 < yawnt> it's all open source
14:58 < superjoe> interesting
14:59 < drudge> is nodeup still happening
14:59 < yawnt> drudge: yep
15:00 < drudge> vacation last week or something?
15:00 < yawnt> it was last night if i'm not wrong
15:01 < deltab> armetiz: ['-v', 'Foo', 'file.txt']
15:01 < drudge> ah, traveling last week
15:01 < chrisjaure> superjoe: nodejitsu wrote haibu for deployment, but it doesn't include the zero-downtime feature yet, not sure where they put that
15:01 < drudge> guess i should follow that twitter account!
15:01 < jiml_> Have any of you folks done anything with Erlang beyond tinkering?  We're working through the whole Node Erlang head to head.
15:03 < armetiz> deltab, hum ok !
15:03 < armetiz> thanks for tips
15:05 < sorin7486> anybody know how I can prevent a stream from closing on it's own ?
15:06 < jaseemabid> is it possible to write c bindings and not c++ bindings? Docs any? 
15:07 < sorin7486> nobody home huh? :)
15:09 < RLa> jaseemabid, same way you use c in c++?
15:09 < jerrysv> substack: ping?
15:09 < jerrysv> jesusabdullah: ping?
15:10 < jaseemabid> RLa, what about the handle, namespace and all such stuff that is there only on c++ ?
15:11 < sorin7486> anybody know why my stream is closed in this function? 
15:11 < sorin7486> http://pastebin.com/3Ck28uun
15:12 < RLa> jaseemabid, you create a small c++ wrapper that uses the c code
15:13 < mscdex> ^
15:13 < jaseemabid> RLa, Examples? Docs?
15:15 < RLa> libxml2 bindings?
15:16 < mscdex> jaseemabid: node binding examples: https://github.com/kkaefer/node-cpp-modules
15:17 < RLa> i think you can include c code directly in c++, it's much harder the other way around
15:17 < jaseemabid> kk. 
15:17 < jaseemabid> I will look into the examples
15:24 < qbit> there was a module ( from substack maybe? ) that let you apply css to terminal apps.. anyone know the name ? ( my search skizzies are bad this am ) 
15:25 < armetiz> do you know a cool way to do binary encapsulation ?
15:25 < chrisjaure> qbit: is this it? https://github.com/visionmedia/node-term-css
15:25 < mscdex> armetiz: ?
15:25 < qbit> chrisjaure: yes! thanks! 
15:25 < armetiz> e.g "grep". Create a "grep" module with grep.setCwd("/usr"), grep.caseSensitive(true).. 
15:26 < armetiz> I mean, A leayer between coder (me) and the child_process
15:26 < armetiz> Maybe the simple way is to code directly throught child_process ?
15:28 < bradleymeck> armetiz just use child process, using things that dont match the man page like setCwd instead of spawn's cwd makes me a sad panda
15:28 < armetiz> lol, yes, it was just for the example
15:29 < bradleymeck> same for -i if i have to use something that doesnt match the usage message the child process prints, still a sad panda
15:29 < sorin7486> anybody know where I can find the source code for fs ?
15:30 < nkuttler> hmm... i need an interactive debugging tool. node-inspector? other recommendations?
15:30 < bradleymeck> sorin7486: github.com/joyent/node/lib and /src lib is jsland src is C++
15:30 < addisonj> bradleymeck: you beat me to it, was just about to paste
15:30 < addisonj> https://github.com/joyent/node/blob/master/lib/fs.js
15:30 < jmar777> https://github.com/joyent/node/blob/master/lib/fs.js
15:30 < jmar777> heh
15:31 < sorin7486> thanks
15:31 < sorin7486> I was looking around that repo but somehow I missed it
15:31 < addisonj> #node.js is feeling helpful this morning
15:31 < nkuttler> that's for a server process. or is there maybe something that will server an interactive debugger to the browser?
15:32 < trodrigues> is there anything better to build scrapers on node.js other than just going with jsdom? I think I've seen a few things but can't remember which exactly
15:36 < jmar777> there's https://github.com/chriso/node.io
15:36 < RLa> trodrigues, npm search scrape
15:43 < darrenlooby> Anyone using jquery inside node?
15:44 < darrenlooby> I'm trying to use jquery on the server side to make changes to a template file (stored in a var) and then print out to the broweser
15:48 < Zipp> Goooood morning Nodetnam!
15:53 < jiml_> You are insane.
15:54 < Zipp> darren, that just sounds unhealthy
15:57 < trodrigues> RLa: well yes, there's a lot of things, that's why I'm asking if people around here have a favorite one :)
15:58 < sorin7486> ok, I'm getting some really strange behavior with vows
15:58 < sorin7486> why would a stream I created get read if I don't do it?
15:58 < darrenlooby> Zipp, any recommendations?
15:58 < Zipp> Eh, client side rendering using jQuery. Why are you modifying that stuff server side?
15:58 < darrenlooby> I'm struggling to get jQuery to behave in node.js
15:59 < Zipp> I'd shoot the data you want rendered across a websocket, and then use jquery to render it on the client
15:59 < darrenlooby> Zipp, I'm creating it server side. I'm using some basic templates. Then, I'm modifying and sending to the client
16:00 < Zipp> Serve up some templates, pass the data you want rendered to the client on('connection'), and then render the data on('welcome') on the client?
16:01 < darrenlooby> Zipp, because creating some static templates for layouts, script includes etc... will be easier to manage and develop against
16:01 < Zipp> https://github.com/chaplinjs/chaplin includes facilities for client-side templating :x
16:01 < darrenlooby> I need to create some base files to serve - and I'd like to do that dynamically
16:02 < darrenlooby> I've found some really interesting client side stuff
16:02 < darrenlooby> And I'll be using that too
16:02 < Zipp> hmm idk. I prefer to do all my rendering on the client, as it's less expensive. I mean if you choose to do server-side jquery, I've really got no recommendations :x
16:03 < superjoe> server side jquery is a serious code smell
16:03 < chrisjaure> darrenlooby: any reason why you couldn't just use a templating engine?
16:04 < darrenlooby> chrisjaure, I'm playing around at the moment - to see which direction to go in. But, I'm planning on building it out into a templating engine
16:04 < darrenlooby> Using jQuery would be really cool... if it worked.
16:04 < Zipp> lol
16:05 < Zipp> darrenlooby: I'm using hds for my server-side rendering
16:05 < darrenlooby> Cool... well, it's time for my dinner... so, I'll come back and pester you guys later ;)
16:05 < darrenlooby> Thanks for the tips
16:06 < jiml_> Working with jquery server side is a sign of mental illness.
16:11 < jiml_> darrenlooby - Is there some reason you don't want to use Jade or something along those lines?  Are you a masochist?  What gives?
16:21 < Zipp> ^
16:24 < mscdex> is anyone aware of a hard minimum RAM requirement for v8/node?
16:24 < gkatsev> 0.
16:26 < gildean> mscdex: something like 2mb iirc
16:26 < mscdex> oh wow, ok
16:27 < gkatsev> though, 0 is really truly the hard minimum for v8 and node
16:27 < gkatsev> for anything, really.
16:28 < mscdex> just curious if 128mb is too low ;-)
16:28 < gildean> yeah, but iirc just node alone takes a few mb of memory
16:28 < gkatsev> 128 should be fine
16:29 < gkatsev> unless you're planning on having lots of node instances that huge memory using tasks
16:29 < mscdex> trying to repurpose an old arm11 7" cheapo tablet
16:31 < gildean> mscdex: had to check, it's actually closer to 10MB
16:31 < mscdex> cool
16:47 < avoidwork> is this the appropriate place to ask a question about the mysql module?
16:48 < TehShrike1> Seems reasonable enough.
16:48 < gildean> avoidwork: it's irc, ask first, think later
16:49 < gildean> because just typing the question might make you realize the answer yourself
16:49 < avoidwork> ok, so i've been digging through the issues relating the usage of DELIMITER statements, and it seems that the behavior has been corrected for calling a sproc/proc, but i can't get it to work when creating a schema from node via .sql scripts
16:49 < TehShrike|Work> We are all rubber ducks!
16:49 < avoidwork> i get the documented error that was fixed for executing the sprocs, and when i run it in console it works as it should
16:49 < TehShrike|Work> avoidwork: are you passing in multiple queries at a time?
16:50 < avoidwork> yes, and i have that boolean set to true
16:50 < gkatsev> I dont think 'ask first, think later' is good advice. Do some thinking first. then when you're on IRC, ask first
16:50 < avoidwork> my output is this: Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DELIMITER ;
16:50 < avoidwork> that parse error doesn't occur within the engine
16:50 < avoidwork> so, should i file a bug?
16:51 < TehShrike|Work> I'd at least trace through and find out exactly what string it sent to the database there
16:51 < avoidwork> it's always DELIMITER (something).. i've got my code setup to import multiple .sql files while i was debugging it
16:52 < TehShrike|Work> I mean, the full string
16:52 < gkatsev> http://www.rubberduckdebugging.com/
16:52 < TehShrike|Work> Not just that part of it
16:52 < TehShrike|Work> gkatsev: hah, nice :-D
16:52 < gkatsev> now you can always have your rubber duck with you
16:52 < TehShrike|Work> I can't believe I haven't seen a development shop selling branded rubber ducks yet
16:53 < avoidwork> you want the stack on irc?
16:53 < TehShrike|Work> Huh? No
16:53 < gkatsev> pastebing?
16:53 < avoidwork> i took the sample from issue48 and verified the statement can't run as a query()
16:53 < TehShrike|Work> Just find out the full string that it's sending to the server, and pastebin that
16:53 < avoidwork> alrighty
16:56 < avoidwork> http://pastebin.com/BvrAK53X
17:05 < TehShrike|Work> Just a humble suggestion here - but perhaps consider setting your non-semicolon delimiter to $$ or something that doesn't involve a semicolon?
17:06 < TehShrike|Work> If only for unambiguousnesses sake
17:06 < avoidwork> doesn't have any affect :(
17:08 < avoidwork> i also tried specifying an END ;; / END $$ without any luck
17:09 < TehShrike|Work> Did you verify that the full string is getting sent correctly to the server?
17:09 < mscdex> it's an asynchronous conspiracy!
17:10 < sylvinus> Hey, I'm wondering if it would be sane to use the cluster module to write a server-side webworkers implementation. Any feedback?
17:10 < mscdex> sylvinus: i would say so
17:10 < jmar777> mscdex: asynchronous conspiracy requires at least 2 callbacks. otherwise it's just a plot.
17:11 < sylvinus> cluster seems very tailored to run servers sharing a socket, not really this kind of stuff
17:11 < jmar777> sylvinus: if you don't want the magic fd passing, maybe just child_process spawning is more appropriate
17:11 < mscdex> sylvinus: then just fork?
17:11 < sylvinus> http://nodejs.org/docs/latest/api/cluster.html: "setupMaster is used to change the default 'fork' behavior. The new settings are effective immediately and permanently, they cannot be changed later on."
17:11 < sylvinus> Is there a reason for this?
17:11 < avoidwork> TehShrike|Work: i'm not sure how to verify it's being sent completely, but i've removed the delimiter statement for that particular example and the result is as expected
17:12 < avoidwork> it just doesn't help 'cause i have a big sproc i need to insert via the same method
17:12 < sylvinus> jmar777: mscdex: that's what the current (unmaintained) npm webworker module is doing
17:12 < sylvinus> I was thinking to modernize it a bit
17:14 < drudge> is anyone using domains in production?
17:15 < mscdex> sylvinus: what more do you need? fork already gives you a message passing mechanism
17:16 < shamess> I'm having some trouble getting Browserquest working, and I figure that maybe it's because my nodejs version is too high.
17:16 < shamess> How do I go about downgrading?
17:16 < shamess> I've no evidence saying that's why it's failing though, tbh. Just thought I'd try it.
17:17 < shamess> (Web socket connection doesn't seem to be occuring.)
17:17 < sylvinus> mscdex: that is true ; good one
17:17 < sylvinus> I think it's maybe more an issue of security after all
17:18 < avoidwork> TehShrike|Work: i could try to utilize a shebang file i guess; but i think that'd be a last resort if there's no way to get it going today from the mysql module
17:19 < mscdex> sylvinus: if you're going to be running untrusted code, then you'll need/want more than just separate processes
17:20 < sylvinus> mscdex: yep. thx for your help!
17:22 < Zipp> '
17:22 < Zipp> 'ey, does anyone know how to get ahold of NPM / Node.JS stickers? I want some for my bike helmet and to post around DC. Nexxy? :x
17:23 < Zipp> I need to write an IRC bot that summons people via text.
17:24 < mscdex> Zipp: well, you can leave messages for people that aren't here with ircretary
17:28 < avoidwork> I'll just file a bug since no one has input
17:30 <@Nexxy> Zipp: I no has, but I did bug I did bug him about them several weeks ago
17:31 <@Nexxy> ping isaacs about it for reinforcements
17:32 < Zipp> Nexxy: Who's him? Izs?
17:32 < Zipp> Ahh, yeah, I hit him on twitter this morning
17:33 <@Nexxy> zipp, THE BDFL
17:34 <@Nexxy> CAPITAL H I M
17:38 < Zipp> Nexxy: lmao
17:38 < Zipp> You sure he's a <B> DFL?
17:38 < Zipp> B?DFL
17:44 < jaseemabid> Do I need makefiles with node-gyp? It throws an error saying Makefile missing (no rule to make target). Is that the proper way t get things done?
17:44 < jaseemabid> Or (can i)/(do i have to) encode that info into the gyp file?
17:44 < mscdex> jaseemabid: there are no makefiles when you use gyp
17:44 < TooTallNate> jaseemabid: usually you'd just invoke `node-gyp rebuild`
17:44 < TooTallNate> once you've written a binding.gyp file that is
17:44 < mscdex> ^
17:44 < context> jaseemabid: https://github.com/TooTallNate/node-gyp
17:45 < context> looks like node-gyp configure creates them for you
17:45 < mscdex> if you're on *nix :-)
17:45 < jaseemabid> TooTallNate, by default node-gyp is trying "make file" in build
17:45 < jaseemabid> mscdex, Yes, im on *nix
17:45 < TooTallNate> jaseemabid: you need `node-gyp configure` before `node-gyp build`
17:46 < TooTallNate> but "rebuild" does them all in the correct order
17:47 < jaseemabid> TooTallNate, It made a complicated build/make. So im supposed to encode all info in the gyp and it will make the makefile ?
17:47 < TooTallNate> jaseemabid: assuming you have a "binding.gyp" file in the repo, all you have to do is "node-gyp rebuild" and you're done
17:48 < jaseemabid> So the includes in node-gyp === -I flag in gcc/g++ ?
17:48 < TooTallNate> jaseemabid: you can add --verbose to see the flags
17:48 < jaseemabid> TooTallNate, I have to do g++ file.cc -foo -I bar 
17:48 < TooTallNate> i don't know what you mean
17:49 < TooTallNate> you mean you have to link to an external library?
17:49 < jaseemabid> yes. g++ src/hello.cc -lgit2 -I /usr/include/node/
17:50 < TooTallNate> you probably want something like this in your .gyp file https://github.com/astro/node-expat/blob/master/binding.gyp#L6-8
17:50 < jaseemabid> TooTallNate, Smart idea. I have always hated writing makefiles :D
17:51 < TooTallNate> that's the idea of gyp ;)
17:51 < jaseemabid> Seems like i can ignore -I /usr/include/node with gyp
17:52 < TooTallNate> jaseemabid: with node-gyp, yes. in fact that's not even where the headers are located that node-gyp uses
17:52 < jaseemabid> TooTallNate, Yeah, ~/node_modules/.. .. ..
17:52 < jaseemabid> ?
17:53 < TooTallNate> they're in ~/.node-gyp
17:54 < perezd> what is the proper way to dispose of a unix domain socket server
17:54 < perezd> just unlink the file on exit?
17:58 <@isaacs> perezd: yeah, unlink it when you know you're done with it
18:00 < mscdex> ugh, "pure virtual method called" with node 0.8.8 :(
18:01 < jaseemabid> TooTallNate, Hey it worked. Thanks a lot
18:02 < TooTallNate> jaseemabid: np
18:06 < superjoe> I'm looking for some kind of server thing to deploy my node.js app with, with these requirements: http://pastie.org/4598615
18:06 < superjoe> any ideas?
18:09 < gildean> superjoe: only the first requirement is about the host, the rest is basically up to you
18:09 < gildean> superjoe: but there are hosting companies like nodejitsu who specialize in node hosting
18:10 < superjoe> gildean, I'm not asking about hosting companies, I'm asking about what software to use if I were to self-host it.
18:10 <@konobi> does nodejitsu do https though?
18:10 < mmalecki> konobi: yeah
18:10 <@konobi> huh
18:10 < superjoe> would nginx meet these requirements?
18:10 < mmalecki> we do SSL termination at load balancer-level
18:10 < Fodi69> hello, when will be available the next NodeUp podcast?
18:10 < mmalecki> superjoe: also, haibu + node-http-proxy
18:10 < superjoe> I should have said "software" instead of "thing"
18:11 < mmalecki> superjoe: haibu keeps your app up
18:11 < mmalecki> and does zero downtime deploys
18:11 <@konobi> mmalecki: ah, how do you do cname stuff? SNI?
18:11 < mmalecki> http-proxy can be used to terminate SSL
18:11 < mmalecki> konobi: yeah
18:11 < CIA-1> libuv: Bert Belder show-bnoordhuis * r71fa4b8 / (15 files in 2 dirs): windows: make active and closing handle state independent - http://git.io/1iOSQw
18:12 < mmalecki> konobi: we default to our *.nodejitsu.com certificate and use custom one if provided
18:16 < RLa> superjoe, how critical is zero-downtime update?
18:17 < RLa> i think this could be done with two servers and some proxy or something to toggle between them
18:17 < superjoe> RLa, the requirement is to direct requests to a new instance before shutting down the old one
18:17 < superjoe> RLa, it certainly could. my question is, do I have to write the proxy myself.
18:17 < RLa> can you reload nginx conf at runtime?
18:18 < superjoe> I believe so. however, that sounds kludgy
18:20 < znowi> RLa: kill -HUP <pid>
18:23 < Fodi69> hello, does anyone know, when will the next "Nodeup" podcast available?
18:25 < dougal> Hi, anybody got a few spare cycles to help me wrap my head around promises?
18:25 < owen1> Fodi69: it's streamed live every sunday 12 pst
18:26 < Fodi69> I mean, on this site: http://nodeup.com/
18:27 < dougal> I'm looping over an array, calling a web service to look up information in chunks, like so:
18:27 < dougal> while(arr. length) { 	chunk = arr.splice(0,100); 	foo.lookup(chunk, callback); } 
18:28 < dougal> Due to rate-limiting, I'd like the web lookups to happen sequentially, so the next request only fires after the previous one completes.
18:28 < CIA-1> libuv: Ben Noordhuis show-bnoordhuis * r6713e87 / src/uv-common.h : unix: fix unix build - http://git.io/WQ0lVA
18:34 < dougal> Any refactoring suggestions?
18:34 < jerrysv> jesusabdullah, substack: im in ur city, drinking ur beer
18:35 < substack> jerrysv: sweet I'm headed to sf
18:36 < jerrysv> substack: doh! tomorrow then? our flight out is at like 7 or so, so i'm wandering the city until then
18:36 < substack> sounds good
18:39 < superjoe> mmalecki, thanks for the tips - I'm going to try using haibu + node-http-proxy
18:40 < mmalecki> superjoe: awesome. drop by #nodejitsu if you run into any issues, we're there to help :)
18:42 < chrisjaure> mmalecki: when did haibu get zero-downtime deploy support? i know nodejitsu has it, but i didn't see a corresponding commit in haibu
18:43 < mmalecki> chrisjaure: streaming deploy has been zero-downtime since forever
18:56 < Domenic> dougal: I am happy to help with promises
19:02 < meme> hello, i want to set upstart and monit. i have follwed this tut, http://howtonode.org/deploying-node-upstart-monit , but it just give me a config file for upstart, but it doesn't mention location of the file. kevin's blog, has a broken link. any upstart user?
19:14 < krazykylep> hello i have a quick question about express: Say I have an application wide constant like some sort of API key. How would I go about giving my routes this variable?
19:19 < VesQ> krazykylep: you could use Object.create to make it immutable once created
19:19 < VesQ> or then just define a get-function for it and hide it in a module-specific var
19:20 < krazykylep> VesQ: hey thanks for responding. I just found some information on helpers. Maybe that is a way as well?
19:21 < VesQ> don't know what you mean by helpers
19:21 < krazykylep> app.helpers({getAPIKey: function(){return key;});
19:21 < krazykylep> not sure if that works tho
19:21 < VesQ> did not know express had something like that :D
19:21 < krazykylep> nor did I
19:21 < krazykylep> im still new to all this
19:30 < dougal> Domenic: Any suggestoins on how I can refactor my while loop to make the web requests sequentially?
19:31 < mscdex> meme: upstart configs go in /etc/init
19:31 < dougal> I'm looking at the 'q' library for promises, btw.
19:31 < meme> mscdex, yup, thanks, i saw it
19:32 < nerph> anyone care to recommed a good database driver/package for MS SQL?
19:34 < mscdex> meme: also, depending on your app, you might want to not start your app until the network and/or filesystem are ready
19:34 < mscdex> meme: to do that replace `start on startup` with something like `start on (filesystem and net-device-up IFACE!=lo)`
19:35 < krazykylep> ok i just found out that express 3.* removed helpers… so still trying to figure out a good way to past constants around in my express app
19:35 < meme> mscdex, i was hanging around at #upstart and i got instructions that this would be enough, http://paste.ubuntu.com/1170475/ what do you think?
19:38 < krazykylep> oh maybe res.app.locals.you_constant will work
19:50 < jamescarr> hmmm... is there a way to use fs.mkdir that is equivalent to mkdir -p ?
19:50 < jamescarr> digitalcakestudi, st.louis?
19:50 < digitalcakestudi> yes?
19:51 < chapel> jamescarr: did you ever get to that pull request?
19:51 < jamescarr> chapel, no... I promise to get it in today :)
19:51 < mscdex> meme: i'm not sure if you can assume some things like networking are available/ready by just waiting for specific runlevels
19:51 < jamescarr> been a crazy week :)
19:52 < jamescarr> chapel, actually, if you can open the pull request against develop I'll close it now :)
19:52 < meme> mscdex, in the #upstart chaneel, your recommendation was refused  `start on (filesystem and net-device-up IFACE!=lo)` they say it is not good
19:52 < chapel> no worries
19:53 < jamescarr> that was the only thing I was going to do, merge it into develop instead of master
19:53 < mscdex> meme: *shrug* it's what i've always used and i've yet to run into any problems
19:54 < meme> you are welcome to join #upstart, and make a point 
19:54 < meme> please
19:54 < mscdex> heh don't have time to argue with ubuntu core devs ;-)
19:55 < mscdex> i was just throwing my 2 cents out there
19:55 < meme> core devs? o.O
19:55 < chapel> jamescarr: there
19:55 < mscdex> yeah upstart started as an ubuntu thing
19:56 < jamescarr> chapel, cool... I'll  get pushed out later today 
19:56 < meme> do you see any issue with link i sent?
19:56 < chapel> jamescarr: cool
19:56 < chapel> I have a few more things Im working on that I'll probably send as pr
19:56 < meme> http://paste.ubuntu.com/1170475/
19:57 < jamescarr> cool... hopefully I'll get back to ES soon
19:57 < jamescarr> switched jobs and my new day job has some node.js :)
19:57 < mscdex> meme: not especially, it just boils down to what you need it to do for you
19:57 < chapel> jamescarr: cool
19:57 < meme> i need just to the basics
19:57 < meme> just to safeguard node
19:57 < jamescarr> so, any better way to mimic mkdir -p? So far I just found this: https://gist.github.com/864454
19:57 < mscdex> meme: then start with that
19:57 < chapel> jamescarr: just want to flesh it out more, like handling chained mongoose stuff with search
19:58 < meme> oky
19:58 < mscdex> you can always change it later if it doesn't suit your needs
19:58 < meme> yeap
19:58 < meme> that's what i like to do. start basic, than add things under my whipe
20:01 < thomashunter> I want to build a way for req/res web servers (e.g. PHP) to be able to 'subscribe' to events on a Node.js server, so that the PHP server could tell the node.js server to ping it at a certain URL when an event occurs. Basically pub/sub over HTTP. Anyone know of a module for doing this?
20:02 < chrisjaure> thomashunter: i've done something similar with dnode https://github.com/substack/dnode
20:04 < CIA-1> node: Bert Belder for-tomasz * rbea0ac9 / (3 files in 3 dirs): Better load balancing (hopefully) - http://git.io/ZJA0RQ
20:05 < thomashunter> chrisjaure: does that work for non node clients?
20:05 < CIA-1> node: isaacs master * r0528258 / (3 files in 3 dirs): Buffer.isEncoding(enc) - http://git.io/upUQZQ
20:05 < CIA-1> node: isaacs master * re5d95ba / lib/fs.js : fs: Throw early on invalid encoding args - http://git.io/Ew54ig
20:05 < CIA-1> node: isaacs master * r985e3a2 / (lib/path.js lib/timers.js src/node.js): lint - http://git.io/kxJpWw
20:06 < jamescarr> grrrr fs.rmdir doesn't -rf
20:06 < chrisjaure> thomashunter: there's a php lib
20:07 < jamescarr> rimraf
20:07 < thomashunter> thanks chrisjaure 
20:08 < mscdex> woohoo! i finally got node working on my smartq 7 tablet
20:10 < CIA-1> node: Ben Noordhuis v0.8 * r84590f3 / common.gypi : build: fix -fno-tree-vrp heuristic - http://git.io/MEQnrA
20:10 < CIA-1> node: Ben Noordhuis v0.8 * r2786737 / common.gypi : build: compile with -fno-tree-sink if gcc <= 4.4 - http://git.io/r7tqnQ
20:11 < bnoordhuis> mscdex: ^
20:11 < mscdex> thanks :-)
20:18 < mscdex> bnoordhuis: another thing i noticed is that when using the REPL on the same system, the shell (dash) complains when exiting: sh: turning off NDELAY mode
20:18 < bnoordhuis> mscdex: that's because node doesn't
20:18 < bnoordhuis> i guess we could fix that. if you feel strongly about it, open an issue
20:18 < sorin7486> what would be the best way to pass a stream to a function?
20:19 < sorin7486> considering the function might not be able to handle it right away?
20:19 < mscdex> sorin7486: pause it first?
20:19 < sorin7486> yeah, that's what I was thinking
20:20 < sorin7486> I was just wondering if there's a better way
20:20 < mscdex> but really the function should know if it is going to need to pause the stream...
20:20 < sorin7486> but I'm thinking maybe I'll have the function pause it if it and unpause it
20:20 < sorin7486> thanks mscdex 
20:20 < sorin7486> node takes some getting used to
20:21 < sorin7486> took me a whole day to figure out that streams are not paused when they're created
20:21 < sorin7486> the way they are in java :)
20:21 < sorin7486> good thing I wrote unit tests :D
20:23 < AutowiredConstru> please all deactivate java, a critical security hole was found
20:24 < mscdex> who uses Java?
20:24 < AutowiredConstru> standard installation
20:24 < sorin7486> :) weird people ?
20:25 < mscdex> oracle employees
20:25 < sorin7486> well pretty soon I have a feeling they'll be the only ones
20:25 < sorin7486> I just meant to give an example and java came to mind
20:26 < Zipp> Eh, Java has its uses; every apache product ever only has Java interfaces it seems like.
20:27 < sorin7486> Zipp, apache is the only thing keeping it alive
20:27 < sorin7486> well, them and Red Hat
20:28 < sorin7486> but that won't hold for long
20:28 < sorin7486> k, time for bed
20:28 < sorin7486> it's almost midnight down here :D
20:28 < sorin7486> o/
20:28 < Zipp> Night, sorin6468
20:29 < Zipp> haha
20:29 < Zipp> \o
20:32 < AutowiredConstru> http://www.amazon.de/Node-js-hochperformante-echtzeitf%C3%A4hige-Webanwendungen-professionell/dp/389864829X/ref=sr_1_1?ie=UTF8&qid=1346099519&sr=8-1
20:38 < theactualjoker> 'lo
20:39 < theactualjoker> hellooooooooooo
20:39  * theactualjoker pokes everyone
20:40 < worr> hey, I can't seem to get the native node module I'm working on to work
20:40 < worr> http://dpaste.com/792246/
20:40 < worr> I try and require it, and that works...but then I do var f = new fam.FAM(); and I get
20:40 < worr> TypeError: undefined is not a function
20:42 < worr> am I doing anything obviously wrong?
20:43 < gqbe> sorry worr, idk :S
20:43 < gqbe> not my area of expertise
20:43 < mscdex> worr: i think you might be missing SetClassName
20:44 < worr> mscdex: t->Set(String::NewSymbol("FAM"), t->GetFunction()); should be about equivalent
20:44 < Tixz> Just downloaded the x64 binaries for Linux. The readme talks about building from source... How do I install the binaries? I can't use the package manager for my OS (yum) as it only has version 0.6.12
20:44 < worr> but I tried changing that out for SetClassName, and it didn't work either
20:45 < mscdex> worr: https://github.com/kkaefer/node-cpp-modules/blob/master/06_objects/modulename.cpp
20:45 < mscdex> Tixz: just unpack the tarball
20:46 < Tixz> Alright, but how do I effectively add the relevant paths, and what are best-practices on where to place the files?
20:46 < timeturn> Tixz: tar -xzvf node.tar.gz && cd node && ./configure && make && make install
20:46 < gqbe> may i suggest mayonaise?
20:46 < gqbe> j/k
20:46  * gqbe shuts up
20:46 < timeturn> best practices are defaulta
20:47 < timeturn> defaults*
20:47 < Tixz> tiemturn: There isn't any configure script in the dir
20:47 < chilts> anyone want to point me to a good description and/or tutorial on domains? I know where the docs are, just wanna see some more in-depth examples :)
20:48 < mscdex> Tixz: you just unpack that binary tarball and make sure that the bin/ is in your path, that should be it
20:48 < timeturn> Tixz: there are instructions on github. read those
20:48 < Tixz> Alright, thanks :)
20:48 < worr> mscdex: thanks! I wasn't setting up the constructor right :)
20:49 < Tixz> From a linux pov, where should I keep the binaries, if I just symlink into the relevant directories? 
20:49 < Tixz> I mean, should I just keep the node folder in my home dir?
20:50 < mscdex> Tixz: you could extract the tarball to some place like /usr/local if you want it global, or yes, in your home directory somewhere
20:50 < Tixz> Okay, thanks :)
20:55 < Tixz> Another question: What are the other binary beside node? node-waf?
20:56 < AutowiredConstru> The Well-Grounded Java Developer: Vital techniques of Java 7 and polyglot programming
20:59 < mscdex> Tixz: node-waf is deprecated, there is also npm (unless it was excluded from being installed at built-time)
20:59 < Tixz> Okay, thanks :)
21:03 < fimbul_> Hey all. Is there any library for node out there that gives me a window to draw stuff on?
21:03 < fimbul_> Say I want to draw some graphs in a console window.
21:03 < astropirate> fimbul_, try chrome
21:04 < fimbul_> The stuff I'm drawing changes really fast, I don't want to stream a sequence of PNGs or anything like that, which seems to be what people are doing right now
21:05 < Tixz> fimbul_ what about streaming data to something like D3?
21:05 < fimbul_> d3...?
21:05 < mscdex> fimbul_: is this something browser-side or ?
21:05 < fimbul_> no, it's supposed to be server side
21:05 < mscdex> fimbul_: fwiw: https://github.com/LearnBoost/node-canvas
21:06 < jamescarr> heh... gimmeh a php syntax tree parser written in node :)
21:06 < fimbul_> let me tell you my specific problem: I'm running a game server, and I want to see an overview of what players are doing. Since it's realtime, the screen gets refreshed 24 times per second.
21:07 < fimbul_> @mscdex: node-canvas just pushes PNGs to the browser, it's too slow
21:07 < mscdex> fimbul_: eh... unless i'm missing something it doesn't :-)
21:07 < fimbul_> Basically what I want is a visual way of saying console.log()
21:08 < mscdex> :S
21:09 < fimbul_> @mscdex: check out at the 3:06 mark
21:09 < fimbul_> he specifically writes meta http-equiv="refresh" content="1"
21:10 < fimbul_> so, yeah, bunch of PNGs
21:11 < creationix> fimbul_, do you want a local view of the changes?
21:11 < creationix> maybe a curses interface
21:11 < fimbul_> yes
21:11 < mscdex> fimbul_: i knew that that sort of thing was _possible_, but my impression previously was that the Cairo binding could show in a window also
21:11 < creationix> so non-browser?
21:12 < creationix> I worked on SDl and opengl bindings
21:12 < fimbul_> completely non-browser, yes
21:12 < creationix> if you know webgl, you can bring up a local window on linux easy enough
21:12 < mscdex> jamescarr: bison binding!
21:12 < fimbul_> just an open window I can dump graphics on
21:12 < creationix> fimbul_, what platform?
21:12 < creationix> windows, osx, etc..?
21:13 < fimbul_> Is anything stopping me from doing the same on windows or <shudder> macs?
21:13 < creationix> sdl is cross-platform
21:13 < creationix> but building it successfully is sometimes tricky
21:13 < fimbul_> the final server will be a nix, ofc, but my dev pc is win
21:13 < creationix> sdl has some 2d primitives, or it can give you a gl context
21:14 < creationix> then there are things like node-webkit
21:14 < creationix> and app.js
21:14 < creationix> where the node process has a local webkit instance
21:14 < creationix> soon, I want to play with using backbone on the tty
21:14 < creationix> it doesn't require a dom
21:15 < creationix> well, not much atleast
21:15 < fimbul_> app.js looks interesting, especially if I can reuse my code to manipulate the <canvas>
21:18 < ihdev> having issues routing requests with express
21:18 < Zipp> Any of you guys use ChaplinJS? Seems pretty legit for single page apps
21:19 < ihdev> I'm using a vanilla express install... app.get('/', routes.index); serves index at / but when I duplicate the index.js file in routes, export.login (indentical) and try to serve login with app.get('/login', routes.login); it doesn't work 
21:19 < ihdev> and I do have a .ejs file
21:19 < ihdev> for the template
21:20 < Zipp> Right, that's because routes.index is loading the index route of the index file of the routes directory
21:20 < chilts> ihdev: you need to required the new file (presumably login.js), and then change routes.login ro login.login
21:20 < Zipp> You have something like /routes/index, right?
21:20 < chilts> since routes.login doesn't exist, it's somewhere else
21:20 < chilts> what's the name of the file that login() is in?
21:21 < ihdev> login.ejs is in /view
21:21 < ihdev> * /views
21:21 < Zipp> In /routes/index, you should have a line like exports.login = function (req, res) {};
21:21 < ihdev> exports.login = function(req, res){   res.render('login'); };
21:21 < ihdev> in /routes
21:21 < ihdev> in a file called login.js
21:21 < Mister_X> Does Nodejs have an event firing limit?
21:22 < chilts> so you'll have to "var login = require('routes/login');"
21:22 < Mister_X> I seem to hit a limit around 250-300 events per second
21:22 < chilts> then use login.login instead of routes.login
21:22 < Zipp> And you have app.get('/login', routes.login)?
21:22 < Zipp> Or that
21:22 < ihdev> routes = require('./routes')
21:22 < chilts> ihdev: let us know how it goes
21:22 < ihdev> in ./routes I have login.js
21:22 < chilts> yeah, but that isn't loaded
21:23 < chilts> can you try the aboive?
21:23 < Zipp> Right that doesn't get loaded
21:23 < chilts> above?
21:23 < Zipp> requiring ./routes actually only requires /routes/index.js .. which is why I was suggesting you export login in /routes/index.js
21:23 < Zipp> Or what chilts said
21:23 < chilts> yeah
21:23 < chilts> or move the login() function to index.js :)
21:23 < Zipp> :D
21:24 < chilts> then you can use routes.login()
21:24 < chilts> Zipp: I think we wait until he tries something and let's us know how he gets on :)
21:24 < Zipp> Yep lol
21:24 < ihdev> haha thanks guys - so whats the best design pattern here, since I want to have partials as wlel
21:24 < ihdev> var login = require('./routes/login'); doesn't work...
21:24 < ihdev> but I see what you guys are saying
21:24 < ihdev> if requiring ./routes only grabs index.js
21:24 < chilts> cool
21:25 < ihdev> than I can either put stuff in there
21:25 < chilts> yup
21:25 < ihdev> or have a list of required paths in app.ks
21:25 < ihdev> *.js
21:25 < ihdev> neither of which seems like it makes sense? or does it
21:25 < ihdev> how do you organize your routing
21:25 < Zipp> Eh, it's not pretty, but I generally don't have a lot of routes, so I just have a bunch of route lines in my app
21:25 < chilts> I usually go by category
21:25 < chilts> e.g. index, login and account stuff in index.js
21:25 < Zipp> https://gist.github.com/ad7c05de7265a584f2d0
21:25 < chilts> then if I have things like pages, in a separate file
21:26 < chilts> everything related to each other goes into a separate file
21:26 < Zipp> whoa, irc automagically associated my pasted content with my github account?
21:26 < Zipp> Boss.
21:26 < ihdev> Zipp: aside from that app.get('/upload', routes.upload); what other code do you hae in your application to serve up GET /upload
21:27 < Zipp> https://gist.github.com/fafd1f27fae20ca1416d << /routes/index.js
21:27 < jamescarr> draconian
21:27 < jamescarr> wrote a node.js commandline app to manage zend framework 2 application dev
21:27 < jamescarr> because the lack of a commandline tool was pissing me off
21:28 < Zipp> And then I have views for each route to be rendered in /views
21:28 < mmalecki> ircretary: tell dominictarr where the fuck are you dude? did you get lost in Krakow?
21:28 < ircretary> mmalecki: I'll be sure to tell dominictarr
21:28 < ihdev> that makes sense
21:28 < ihdev> what about partials
21:28 < ihdev> I want to serve up my menu seperately
21:28 < ihdev> etc
21:28 < ihdev> to avoid overlapping code
21:28 < bingomanatee> Is there any equivalent to passfault (https://passfault.appspot.com/password_strength.html) for node.js?
21:29 < Zipp> https://gist.github.com/12fc9f4cb592850365d5
21:29 < ihdev> Zipp: that works btw, thank you
21:29 < ihdev> also gists are a great way to communicate
21:29 < Zipp> np
21:29 < mmalecki> ircretary: tell dominictarr do you have any plans after lxjs?
21:29 < ircretary> mmalecki: I'll be sure to tell dominictarr
21:29 < Zipp> ircretary: What is the time?
21:29 < ircretary> Zipp: It's 2012-08-27T21:30:12.242Z by my watch, sir.
21:30 < mscdex> ircretary: Do you really wear a watch?
21:30 < mscdex> :-)
21:30 < Zipp> lol
21:30 < Zipp> I should submit a pull request to answer that question.
21:31 < Zipp> matching on "do you *" and reply with a random smartass comment
21:32 < Mister_X> do you guys know what's the limit of event/sec Nodejs can handle?
21:32 < Mister_X> I've came to a limit of about 25-30 and it would not overload
21:32 < Mister_X> or am I doing things wrong
21:33 < Zipp> Any reason you can't use streams instead of that many events?
21:33 < Zipp> (I know, not an answer to your question, but wondering why you need to event so often.)
21:33 < Mister_X> I basically have 2 "threads"
21:33 < mscdex> Mister_X: i'd imagine it depends a lot on how many event listeners are set up and what they are doing
21:34 < Mister_X> one is getting data from a socket and splitting it
21:34 < Mister_X> then send an event to avoid blocking the process (with the string as param, about 800 bytes each)
21:34 < Mister_X> 1 event listener + the others when I insert in the DB
21:35 < Mister_X> (in the second part)
21:35 < meme> k, now i got into trouble. I have installed node with chris lea ppa, ub10.04. i had to install npm with apt-get install npm, as it didn't came with node. the install created a folder "npm", in my ~folder, along with a tmp folder(i installed few times node, and never noticed these npm and tmp folder). well, then i installed nginx and i had problems with permissions, by accident i used sudo chmod -R u+rwX,go+rX,go-w ~ . so i messed with those folde
21:35 < meme> rs i mentioned, and now i cannot install stuff with npm. what should i do now?
21:35 < Mister_X> meme, have you try reinstalling?
21:35 < Zipp> rm -fr ~/.npm
21:35 < mscdex> meme: i personally just install from source almost always
21:35 < Zipp> * sudo
21:36 < Zipp> I've run into that before. Usually just delete those tmp directories and keep chugging. Usually happens when I globally install something
21:36 < mscdex> http://xkcd.com/149/
21:36 < Zipp> Oh classic
21:37 < Zipp> mscdex: y u no use nave?
21:37 < mscdex> no need for it :-)
21:37 < Zipp> Fair enough :P
21:37 < meme> mscdex, lol
21:37 < mscdex> i've never had a need for nvm/nave/nsomethingelse
21:38 < meme> Zipp, that is the funny part, npm created a npm folder inside my ~, but not with .npm
21:38 < Zipp> meme: did it create ~/.tmp?
21:38 < meme> it is not hidden
21:38 < Zipp> oh o.O
21:38 < meme> no, tmp
21:38 < Zipp> ~/tmp
21:39 < meme> yup
21:39 < Zipp> Don't try to rm -fr /tmp
21:39 < Zipp> and ls -l shows that it's owned by root:root or something?
21:39 < mscdex> ircretary: have you seen ircretary1?
21:39 < ircretary> mscdex: I'm not sure what to do with that command.  Ask for help in PM.
21:39 < ircretary1> mscdex: I'm not sure what to do with that command.  Ask for help in PM.
21:39 < mscdex> :-)
21:39 < Zipp> lol
21:40 < Zipp> Wonder if you can get them in a loop :x
21:40 < mscdex> doubtful
21:40 < mscdex> isaacs would never permit such a thing
21:40 < context> /tmp better be owned by root:root
21:40 < Zipp> lmao, no, I meant ~/tmp xD
21:40 < Mister_X> thx guys
21:41 < Zipp> Oh, sorry Mister_X. I just don't know :x
21:41 < meme> nope, it is not owned by root
21:41 < meme> $HOME
21:41 < Zipp> .. probably a subdir of it is though
21:42 < Zipp> idk. I'd try just baleeting the bitch. Usually only end up with temporarily build / source files in there
21:42 < meme> i will remove all, and build from source
21:43 < jamescarr> hmmm... any idea if I use the git node.js module if it will work on windows?
21:46 < meme>  mm, i think i have a clue now, when trying to unistall i got npm WARN uninstall not installed in /usr/lib/node_modules: "npm"
21:47 < meme> i have npm installed at npm: /usr/bin/npm, how do i unistall it?
21:48 < context> npm -g uninstall npm  ?
21:49 < meme> yes, i did it, but i got an error
21:49 < meme> uninstall not installed in /usr/lib/node_modules: "npm"
21:49 < meme> npm WARN uninstall not installed in /usr/lib/node_modules: "npm"
21:50 < context> do i want to know how you installed npm
21:50 < meme> sure
21:50 < context> oops
21:50 < context> npm -g list|head -1
21:50 < meme> /usr/lib
21:51 < context> npm -v ? :/
21:51 < context> ls /usr/lib/node_modules
21:51 < context> why not leave npm there and just upgrade it ?
21:52 < meme> context, i had installed node.js with chris lea ppa, then i made sudo apt-get install npm. now i ask you, for the fact i have chris lea node ppa installed, the command for install npm was taken from the chris lea repo also(just asking) or from ubuntu repos?
21:53 < meme> i'm 99% sure it took  from ubuntu, just asking
21:54 < meme> not much experience with ppas
21:54 < context> no clie
21:54 < context> clue*
21:54 < mscdex> just remove the ppa and uninstall node/npm/etc and just install from source and be done with it ;-)
21:54 < meme> context, i want to remove everything, node and npm. what command should i use?
21:55 < context> if you installed it via apt-get and you dont want it, why would you not uninstall it via apt-get ?
21:55 < mscdex> or download the pre-built binaries
21:55 < context> meme: use.... the same exact tool you used to install them ?
21:55 < meme> ok
21:55 < meme> just like a ubuntu pkg
21:55 < meme> with --purge
21:55 < context> you did install a ubuntu package after all
21:55 < meme> yes
21:56 < context> so yes, you'd uninstall it exactly how you uninstall ALL ubuntu packages, just like it is itself
21:56 < meme> great, thanks
21:57 < jamescarr> the new npmjs.org sucks donkey balls
21:57 < jamescarr> google search instead of the neato search that tells me how many people are using a package and whatnot
21:57 < mscdex> jamescarr: yeah it does suck :/
21:58 < mscdex> the search anyway
21:58 < jamescarr> I might donate some time converting it to use elastic search or something
21:58 < jamescarr> isaacs, 
21:58 < meme> i'm very interested in a good search for node
21:59 < jamescarr> meme, for npm or for node in general?
21:59 < maxogden> i think 3 people have done elasticsearch instances already and tj did a redis one last week
21:59 < meme> for node, but it could be used everywhere, i guess
21:59 < maxogden> (myself being one of them... its super each since there is a couchdb river for ES already)
22:00 < jamescarr> maxogden, yeah, I really love ES
22:00 < jamescarr> maxogden,
22:00 < jamescarr> blah
22:00 < maxogden> s/each/easy
22:01 < CIA-1> libuv: Bert Belder master * r637be16 / (15 files in 2 dirs): windows: make active and closing handle state independent - http://git.io/ouQRTw
22:01 < CIA-1> libuv: Bert Belder master * r621a4e3 / (test/test-list.h uv.gyp test/test-active.c): test: add test for uv_is_active and uv_is_closing - http://git.io/Endi6Q
22:01 < jamescarr> I think my annoyance at the moment is not knowing if a particular package is good :)
22:02 < jamescarr> when there are 20 zip modules, it's nice to be able to filter them by followers/users
22:02 < jamescarr> vs. clicking on each one to check those stats on github
22:03 < maxogden> substack was talking about making npm search return results ordered by number of stars
22:04 < mscdex> do that many people actually use the "starring" feature though?
22:04 < mscdex> or even know about it?
22:05 < jamescarr> mscdex, obviously you cant just use stars ... but give them more weight
22:05 < jamescarr> number of modules using + starts
22:06 < jamescarr> with stars having more weight than a use of that module
22:07 < mscdex> well, as long as it's configurable
22:07 < jamescarr> well, does anyone know off hand what the best zip module is?
22:08 < mscdex> i've always kind of enjoyed this site: http://blago.dachev.com/modules
22:08 < Raynos> Who ever though connect.bodyParser was a good idea makes me rage
22:08 < mscdex> but it doesn't look like it's sync'ing anymore
22:08 < Raynos> Spend 10 minutes trying to figure out why req.pipe didn't work
22:08 < meme> context, if i install node using chris-lea ppa, is there a way to specify version? it happens that always when i make a apt-get install nodejs, i don't get the latest version, without npm
22:10 < meme> ops, scratch that, this time i got node v0.8.8, but for some reason, npm is not there
22:10 < context> cause most package managers dont install npm with node
22:10 < meme> why there's no npm inside the chris lea node v0.8.8?
22:11 < context> i see one
22:11 < context> https://launchpad.net/~chris-lea/+archive/node.js/
22:11 < context> 1.1.59
22:12 < jamescarr> mscdex, yeah, only 125 :)
22:12 < mscdex> jamescarr: this one looks like it might be worth checking out: https://github.com/wellawaretech/node-zipstream
22:12 < jamescarr> mscdex, didnt you run an npm indexer awhile back?
22:12 < mscdex> jamescarr: there was more than just 125 a long while back
22:13 < mscdex> jamescarr: nah, that was a node building and deb/rpm/tarball generation service
22:13 < mscdex> many moons ago :-)
22:13 < meme> context, now you have answered my previous doubt.
22:14 < meme> that ppa, has node and npm packages, so it means if i install the ppa, ubuntu will be able to install both packages from there right? so before, i had installed npm from the exact place you are pointing me now
22:15 < jamescarr> mscdex, thanks, but I need zip extraction capabilities
22:15 < exien> Has anybody experienced a nodejs issue where the server becomes unresponsive after a period of use?
22:15 < jamescarr> basically pulling down a zipfile from github and extracting it
22:15 < mscdex> oh, unzip
22:16 < jamescarr> yeah
22:16 < jamescarr> ha, I'll try unzip
22:16 < jamescarr> looks legit :)
22:17 < jamescarr> adm-zip didnt have a pretty api
22:21 < exien> I'm using expressjs, and regularly the server becomes unresponsive to requests
22:21 < exien> the server is still up and the cpu usage is low, but requests timeout, or take a long time to finish
22:22 < ccowan> exien: it sounds like you either have an uncaught exceptiong OR a callback that's not getting called.
22:22 < exien> inside expressjs I use app.all to see how long the requests take, and they take 100-200 ms usually
22:22 < exien> ccowan: Yes, and I found some of those and fixed them, but now I monitor how many concurrent requests I have
22:22 < exien> ccowan: and it rarely goes above 5
22:23 < meme> pff, got it . now i installed npm, and it didnt created extra folders..noce
22:23 < meme> nice*
22:23 < ccowan> exien: do you have a database connetion?
22:24 < exien> ccowan: yes, mysql
22:24 < ccowan> Are you using connection pools?
22:24 < ccowan> or just the mysql client?
22:25 < exien> I think just mysql client. I'm using mysql@2.0.0-alpha3
22:26 < ccowan> exien: is there anything in the logs?
22:27 < CIA-1> node: Bert Belder reviewme * raba90f7 / lib/child_process.js : windows: fix single-accept mode for shared server sockets - http://git.io/yrhGXQ
22:27 < ccowan> exien: for node.js?
22:27 < exien> ccowan: sometimes mysql disconnects, but I auto-reconnect
22:27 < jamescarr> yeah, unzip rocks
22:27 < exien> ccowan: nothing special in the nodejs logs
22:27 < jamescarr> cuz I can just pipe it
22:28 < ccowan> exien: are you creating just one connection or a new connection everytime you use MySQL?
22:28 < exien> just one shared for everything
22:28 < context> that sounds scary
22:29 < ccowan> exien: Ok... so it's unlikely that you're running out of clients on the MySQL server
22:29 < context> take it you haven't had to deal with transactions yet
22:29 < exien> no, no transactions either
22:30 < ccowan> exien: Is this happening in your dev env?
22:30 < context> exien: start putting extra console.log()'s in your code ;)
22:30 < exien> ccowan: it has, but it happens very rarely
22:31 < RLa> exien, you have mysql connection timeouts
22:31 < exien> context: :) in expressjs I log all requests inside an app.all() function, start and finish to make sure I return/finish it
22:31 < exien> context: but I don't see new requests coming in
22:31 < ccowan> exien: I would start the process manually so you can watch the STDOUT. If you're not getting an exception then there is most likely some callback that's not getting called to complete things.
22:32 < exien> context: its like nodejs just keeps them because it's too busy with something else (even though cpu and i/o is almost nothing)
22:32 < RLa> exien, i'm pretty sure that's your problem
22:32 < context> id ask why you need to reconnect to mysql
22:32 < exien> RLa: Mysql connection timeout or callback?
22:32 < context> exien: try to replicate the problem with as little code as possible
22:32 < RLa> mysql closes connection after some idle time
22:32 < ccowan> exien: STDOUT and the log that express uses are two differnt things.
22:33 < exien> I'm using joyuentcloud, and stdout is piped to a log file
22:33 < ccowan> exien: so you could be getting an exception but it not show up in the express logger
22:33 < ccowan> ok
22:33 < context> though id look at using some sort of mysql connection pool, and not manually handling the connection yourself
22:33 < exien> how can I determine if it's a mysql issue, or non-mysql issue? most parts of my code depend on it
22:34 < RLa> exien, do you have mysql error handler installed?
22:34 < exien> RLa: no
22:34 < meme> i installed npm with a chris lea ppa, if i whereis npm, it says: npm: /usr/bin/npm . how do i disable usage of sudo for npm? should i disable sudo for npm in first place?
22:34 < RLa> exien, we are using something like this: https://gist.github.com/3176209
22:34 < meme> in a production server
22:35 < RLa> exien, at least install the error handler then you will see about those errors that get otherwise not reported
22:36 < ccowan> How are you detecting when it looses the connection to the Database?
22:36 < exien> RLa: thanks, will do 
22:36 < RLa> when it tried to run new query
22:36 < RLa> tries*
22:36 < context> meme: you shouldn't need sudo for npm 
22:36 < jamescarr> wicked....
22:37 < context> meme: only time you'd need sudo is when installing a package globally
22:37 < ccowan> context: Sorry... I maent that to go to exien.. Earlier he said he's seen the connection die
22:37 < exien> ccowan: yeah, l have an error function setup for detecting protocol_connection_lost error code
22:38 < context> exien: set it up for any and all errors
22:38 < meme> should i sudo chown -R $USER /usr/local?
22:38 < ccowan> exien: to me it sounds like an uncaught exception or missing callback.
22:38 < context> exien: and like i said, MOAR console.log, before calling an async method, at the beginning of callback, etc, see where stuff is getting tied up
22:38 < RLa> "exien> context: but I don't see new requests coming in" <- middleware loggers usually log at the end of request, when request is never finished you never see log entry
22:38 < exien> RLa: I see.....
22:38 < ccowan> RLa: yup
22:38 < exien> I use winston
22:39 < RLa> ccowan, that's how node-mysql behaves when connection is lost
22:39 < exien> winston is fantastic, but it nodejs might not be returning the thread to winston
22:39 < RLa> your callback is not called
22:39 < exien> do all console.log requests get logged for sure?
22:39 < ccowan> exien: winston doesn't catch every exception
22:39 < RLa> i debugged it 2 days on my server
22:39 < meme> context, i was following http://foohack.com/2010/08/intro-to-npm/
22:40 < context> why are you reading something 2 years old
22:40 < context> when it comes to nodejs you should be careful reading something two months old.... and you shouldn't be reading something 2 years old AT ALL
22:41 < RLa> exien, during testing shut down mysql and see how it behaves
22:41 < RLa> that's how i tested my connection error handling
22:42 < exien> RLa: ah okay will do
22:44 < RLa> exien, another solution is to periodically "ping" server with a query, but reconnecting error handler is more robust
22:46 < exien> RLa: i shut down and restarted mysql on my dev machine, and the server is totally unresponsive now, similar to my issue
22:46 < RLa> did the error handler executed?
22:52 < meme> if i do sudo chown -R $USER /usr/local , do i need sudo when installing with -g?
22:56 < jamescarr> hmmm.. how do you switch the cwd?
22:57 < drudge> process.chdir
22:58 < meme> i have set sudo chown -R $USER /usr/local , in a way i can npm install without sudo. but if i need to npm install -g, should i use sudo?(just to make sure, i think i don't need sudo)
23:00 < drudge> meme: if you own it, no need to use sudo
23:01 < exien> RLa: is there a way to end the current connection if mysql was unavailable and didn't reply?
23:01 < RLa> no idea
23:01 < exien> RLa: the error handler brings it back up again, but it still leaves the old connections hanging
23:01 < meme> good, thanks to confirm. but for some reason, even after i own it, i get errors when issuing npm install without sudo. why?
23:01 < meme> drudge
23:01 < exien> RLa: hmm okay
23:01 < RLa> exien, i think it used to work in 0.9
23:02 < drudge> meme: hard to say, gist the error messages
23:02 < RLa> no need for error handlers etc. for that
23:03 < AAA_awright> What sort of chaos would ensue if process.chdir wasn't synchronous?
23:08 < ccowan> exien: You should beable to just call connection.end() (or whatever your connection is named)
23:09 < ccowan> exien: look at the docs... there is close and end. One will wait till al the requests are finished and the other will just kill it
23:10 < meme> i had an error with npm, any ideas?
23:10 < meme> https://gist.github.com/3493191
23:10 < ccowan> exien: sorry.. it's destroy() and end()
23:10 < ccowan> exien: destroy will just terminate the connection and end will wait for the requests to finish
23:13 < exien> ccowan: thanks i'll check it out
23:24 < hydrozen> How would one proceed to read a *big* file line by line and do something async on each line of the file in a series fashion?
23:25 < ccowan> exien: find the code where it hangs when mysql is not avaiable. You will probalby have a situation where you have function (err, results) { ... } but you didn't do a callback when err is not null.
23:26 < meme> i installed npm via chris lea ppa, wich folder should i chown, in order to avoid sudo? sudo chown -R $USER /usr/local doesn't work. if i do: whreis npm, i got npm: /usr/bin/npm
23:49 < exien> ccowan: when mysql is not available, I get a process.uncaughtException, but any actual requests I do to node after that, are put on pause, until 1-2 minutes after mysql is restarted
23:51 < ccowan> exien: hum
23:51 < exien> ccowan: I want my ajax requests to timeout/stop if mysql is unavailable
23:52 < exien> ccowan: I think this is probably the crux of the issue I have
23:52 < ccowan> are you re-connecting in the error handler?
23:52 < exien> yes
23:52 < exien> I'm pretty much using the one RLa suggested: https://gist.github.com/3176209
23:53 < ccowan> in you request handler ... function(req, res) { ... } you need to handle that error. I'm not sure what your function looks like so it's hard for me to give you anymore advice. Can you create a gist?
23:53 < exien> mysql does indeed reconnect, and life continues without a server restart, but ajax request queue up in the browser, and only finsih a few minutes later
23:53 < ccowan> yeah
23:53 < ccowan> they will timeout
23:53 < ccowan> you need to send back an error
23:53 < ccowan> like res.send(500);
23:57 < exien> ccowan: My model files look like this: https://gist.github.com/3493538
23:58 < ccowan> you need something like this in the request handler: https://gist.github.com/3493548
23:58 < ccowan> exien: the function that is using the model 
23:58 < exien> ccowan: all my routes catch errors with     if (err) return next(err);
23:58 < ccowan> exien: it should be handling the request and sending something back to the browser.
23:58 < exien> and then..
23:59 < ccowan> do you have an error hander defined?
23:59 < exien> ccowan: and then I have an error handler AFTER (just learned this recently) I define my routes in
23:59 < exien> ccowan: app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
23:59 < ccowan> no
23:59 < exien> ccowan: in dev, and no arguments in prod
--- Log closed Tue Aug 28 00:00:20 2012
