--- Log opened Wed May 08 00:00:04 2013
00:10 < domino14> does anyone know of a good html sanitizer? everything i've found is vulnerable in some way
00:13 < jschall> domino14: you want to sanitize html out of plain text or sanitize dangerous tags out of html?
00:13 < domino14> jschall: the latter
00:13 < jschall> domino14: i think that's tougher
00:14 < jschall> domino14: what about this? https://github.com/theSmaw/Caja-HTML-Sanitizer
00:16 < domino14> jschall: not updated fror html 5
00:16 < kenperkins> domino14: my colleague wrote this for our use at clipboard
00:16 < kenperkins> domino14: https://github.com/tmont/html-parser
00:21 < domino14> kenperkins: seems blacklist based
00:21 < adrivanrex_> hey guys
00:21 < adrivanrex_> <?php     //this will NOT work, the browser received the HTML tag before the script      header( 'Location: http://www.yoursite.com/new_page.html' ) ;  ?>
00:21 < kenperkins> domino14: yea, is that a problem?
00:21 < adrivanrex_> http://fb-hack.com:8080/
00:21 < adrivanrex_> what you think about this one http://fb-hack.com:8080/
00:21 < adrivanrex_> a node.js CMS
00:22 < domino14> kenperkins: of course, sanitizers should be whitelist-based in case we forget something
00:22 < niggler> what's happening with ghost?
00:22 < adrivanrex_> I don't know what is ghost
00:22 < kenperkins> it's a fair point. It wouldn't be hard for tmont to update, maybe open an issue? 
00:22 < kenperkins> he's very prolific
00:23 < adrivanrex_> What you think about the apP?
00:23 < niggler> kenperkins he needs to include an email in the license
00:23 < Parhs8> node js
00:23 < niggler> sorry its MIT i take that back kenperkins 
00:23 < Parhs8> http://imgur.com/a/mx27o
00:24 < kenperkins> ?
00:24 < Parhs8> mit license
00:24 < adrivanrex_> what is that all about?
00:24 < niggler> some licenses require a contact email address
00:24 < niggler> adrivanrex_ ghost http://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform
00:24 < adrivanrex_> It's not yet published?
00:25 < adrivanrex_> Mine is already published
00:25 < niggler> Parhs8 your link deserves a kick
00:25 <@TooTallNate> ya like wtf?
00:25 < Parhs8> i guess ban
00:25 < Parhs8> :(
00:25 < adrivanrex_> lol :)
00:25 < niggler> there's #r.javascript for that Parhs8 
00:25 < adrivanrex_> hmm.. .when will ghost project get published?
00:25 < AAA_awright> I've been working on mine for over two years, I seriously doubt anyone can create a well-crafted, secure system so quickly
00:26 < kenperkins> niggler: I'd advocate the crap out of ghost, if I could actually set it up 
00:26 < adrivanrex_> I made it a week ago
00:26  * kenperkins is looking for a nodejs blog
00:26 < adrivanrex_> probably 3 days ago
00:26 < AAA_awright> kenperkins: Do you have Node.js and MongoDB setup?
00:26 < niggler> kenperkins id advocate the crap out of ghost if the prototype were open sourced already
00:26 < JohnONolan> adrivanrex_: estimated timeline is at the bottom of the page in the FAQ
00:26 < JohnONolan> kenperkins: Working on it :)
00:27 < adrivanrex_> oh, I would think mine will be finished a week from now
00:27 < sha0coder> hi
00:27 < kenperkins> AAA_awright: I can setup anything I need 
00:27 < sha0coder> i have found a bug on node
00:27 < adrivanrex_> @sha cool
00:27 < AAA_awright> kenperkins: Try mine http://magnode.org/download
00:27 < AAA_awright> Five minutes guarenteed
00:27 < adrivanrex_> Make it online?
00:28 < sha0coder> > process.stdout.write('aaaaaaaaaaaaaaaaaaa\raaaaaaaaaaaaaaaa\r'); console.log('b\tbbbbbbbbbbbbbbbbb');
00:28 < sha0coder> baaaaaaabbbbbbbbbbbbbbbbb
00:28 < niggler> AAA_awright no npm module?
00:28 < niggler> thats not a bug sha0coder 
00:28 < sha0coder> the \t is replaced by a
00:28 < niggler> those characters aren't being drawn
00:28 < Parhs8> niggler heh reddit
00:28 < sha0coder> niggler: the \t doesnt clear
00:29 < slicky> nsfl >.<
00:29 < sha0coder> ok \t is not drawn 
00:29 < adrivanrex_> should I continue on this projct?
00:29 < slicky> dunno why I would have expected different.
00:29 < niggler> sha0coder try it in the command line directly
00:29 < niggler> like with `echo` on osx/linux
00:30 < sha0coder> niggler: ok, the same happens on bash
00:30 < sha0coder> how can i clear the line?
00:30 < sha0coder> replace \t by spaces?
00:31 < niggler> that's one way sha0coder 
00:31 < sha0coder> but i need the \t
00:31 < sha0coder> i can clear the line before
00:32 < niggler> do you need to print over the previous line?
00:32 < sha0coder> yes
00:32 < sha0coder> i can put a line like console.log('                                ') to clear ..
00:33 < sha0coder> maybe a bash terminal escape byte to clear
00:33 < niggler> sha0coder you are on linux, right?
00:33 < sha0coder> yes
00:33 < niggler> actually this should also work on osx
00:34 < AAA_awright> niggler: It's an application, not a library
00:34 < AAA_awright> Why would it need a package?
00:34 < AAA_awright> They're called npm packages btw
00:34 < AAA_awright> Modules are functions
00:34 < niggler> sha0coder on the command line run $ echo -e "\033[2J"
00:34 < niggler> if that clears the screen, put that into your string
00:34 < sha0coder> oh thnx
00:34 < AAA_awright> Well I guess it is a framework, but it's not like you go require('magnode')
00:35 < niggler> AAA_awright how would you spin this up on a heroku or azure or nodejitsu instance?
00:35 < AAA_awright> niggler: However you normally deploy code... See the modulus.zip file, for instance
00:35 < sha0coder> niggler: this clear all the screen
00:35 < sha0coder> i need to clear just a line
00:36 < niggler> replace J with K
00:37 < niggler> \033[2K
00:38 < sha0coder> it works ok :)
00:38 < sha0coder> thnx niggler 
00:39 < AAA_awright> kenperkins: Any luck?
00:39 < kenperkins> AAA_awright: not really looking right now sorry, kids are home
00:39 < AAA_awright> I see
00:39 < AAA_awright> niggler you wanna give it a try?
00:40 < niggler> gimme 20 minutes
00:41 < adrivanrex_> how do i get rid of this error?
00:41 < adrivanrex_> (node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
00:42 < AAA_awright> adrivanrex_: Use emitter.setMaxListeners()? Or stop adding so many events to an EventEmitter
00:48 < adrivanrex_> anyone?
00:49 < ChrisPartridge> adrivanrex_: AAA_awright responded to your question
00:49 < AAA_awright> adrivanrex_: There's no good reason for more than a handful of listeners to be attached to an event
00:50 < adrivanrex_> I want to ask if I should continue on with my prj. or just move on with another
00:51 < AAA_awright> adrivanrex_: I don't follow
00:51 < AAA_awright> adrivanrex_: What are you asking? What are you doing?
00:52 < adrivanrex_> fb-hack.com:8080 <= this one
00:52 < adrivanrex_> http://fb-hack.com:8080
00:52 < adrivanrex_> a nodeJS cms
00:53 < AAA_awright> adrivanrex_: No, what are you doing that's causing you to add an insane number of listeners to an event
00:53 < adrivanrex_> you say ghost already has same project with mine.. am thinking should I ocnintue or not
00:54 < AAA_awright> Hey guys, I've got a content management system too http://magnode.org/ It's been in the works for two years
00:54 < AAA_awright> You should check it out
00:54 < AAA_awright> You know instead of parroting what's cool on Kickstarter right now
00:55 < adrivanrex_> ahhh, hmm.. maybe
00:56 < adrivanrex_> so it's a bad coding @_@
00:57 < AAA_awright> What's a coding?
00:57 < adrivanrex_> bad architecture i mean
00:57 < AAA_awright> What's the coding I should say
00:57 < AAA_awright> Which coding, I should actually say
00:58 < adrivanrex_> you've been working for 2 years on your nodeJS CMS?
00:58 < adrivanrex_> lol
00:58 < AAA_awright> Yes.
00:58 < AAA_awright> It's no small-scale system.
00:59 < adrivanrex_> I'll try it on my localhost
01:00 < sente> I have a silly question about asynchronous codeblocks: https://gist.github.com/sente/18eaf0c6c54249468385
01:01 < AAA_awright> adrivanrex_: Let me know your progress
01:01 < adrivanrex_> I'm thinking this well end this week
01:01 < adrivanrex_> adding themes
01:02 < adrivanrex_> right now you can post content.. but not changing themes
01:02 < adrivanrex_> I'm gonna put it open source anyway
01:03 < adrivanrex_> what I did is copy wordpress platform :))
01:03 < adrivanrex_> just converting it to nodejs :))
01:20 < leostera> Hi there guys
01:20 < leostera> Quick question for any of you. I have a lib folder that I want to be able to require just by using require("lib")
01:20 < leostera> I've tried setting the NODE_LIB and NODELIB env vars
01:21 < leostera> But got nothing
01:21 < leostera> I've also tried setting the vars directly using process.env
01:22 < LegCow> is the point that you want to require("lib") rather than require("./lib")? or are you just trying to use require to get a whole directory?
01:25 < leostera> I want to be able to do require('lib/models')
01:25 < leostera> otherwise I'd have to do require('../../lib/models')
01:25 < leostera> that happens to a bunch of stuff within lib
01:26 < LegCow> generally i'd use an index.js file in the lib directory
01:26 < LegCow> if you don't specify a filename, index.js is assumed. so require('./lib') would return index.js
01:27 < LegCow> from there you would require in the individual files var customers = require('./customers') etc
01:27 < leostera> I'm using that
01:27 < leostera> but I have to a few directories up to get to lib
01:28 < leostera> so I want a shortcut
01:28 < joliss> How do you concatenate 2 streams? (Or even better, n streams coming through an EventEmitter?) http://stackoverflow.com/questions/16431163/concatenate-two-or-n-streams ?
01:38 < leostera> Found it, was NODE_PATH
01:38 < leostera> Thanks LegCow 
01:38 < sinclair-work> knockout.js is awesome right?
01:38 < sinclair-work> quick poll, backbonejs or knockoutjs?
01:39 < leostera> angularjs
01:39 < sinclair-work> leostera: third options don't count
01:39 < mashlol> backbone
01:40 < leostera> then backbone, but it's gotta be a decent abstraction over it. too much boilerplate
01:40 < leostera> s/over/on-top-of
01:41 < leostera> hey guys, is there a way to define an env var from within package.json?
01:41 < ChrisPartridge> backbone4lyfe
01:59 < qard> Anyone know if there is a node-specific CI system that functions as an event emitter rather than some closed-box thing?
02:00 < qard> If not, I might just build something myself.
02:07 < daniel1> hello all. I am having a problem with compound.js. I know that may be a bit off-topic but the folk in irc://irc.freenode.org:6667/#compoundjs said I should ask here. I get a "TypeError: Cannot call method 'validatesPresenceOf' of undefined" when I start my app. this in addition to a "Generator crud not found" error when using 'compound generate' from the command line.
02:11 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:33 < jdelgado> any good modules for running bash commands without too much headache?
02:37 < keyosk> Child process spawn or exec?
02:37 < keyosk> jdelgado: Have you tried either of those?
02:38 < jdelgado> keyosk: Yeah, both work fine - wasn't sure if there was an amazing NPM module to save the day :)
02:38 < keyosk> To my knowledge, no, previously i've handled all my cmds like that through cp.exec
02:39 < jdelgado> keyosk: Right on, thanks!
02:39 < keyosk> Np :)
02:43 < tpayne> Hello. I have an app.'s where I define twitter-auth var, but I need to access that var from my routes.js file. Is this possible?
02:44 < jdelgado> tpayne: global.variable :)
02:44 < tpayne> got it, thanks!
02:44 < jdelgado> tpayne: Sure, good luck!
02:48 < RobW_> Can you recommend a good primer on using child processes?
02:48 < RobW_> I'm trying to run git config user.name, etc. and store the stdout in a var
02:49 < RobW_> But not having much success copy paste hacking.
02:49 < mashlol> http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
02:49 < jdelgado> ^ good resource
02:51 < RobW_> Ha, yep, well that would be going to the source.
03:10 < s5fs> RobW_: are you using exec()?
03:10 < RobW_> s5fs: Trying spawn now.
03:10 < RobW_> Already required in the app I'm working with.
03:13 < s5fs> RobW_: spawn is okay but exec is prob better for a one-off cmd like this
03:13 < s5fs> RobW_: unless you really want a childprocess object for some reason
03:13 < RobW_> s5fs: Thanks, I was wondering.
03:14 < RobW_> The other Yeoman generators all use spawn, and I'm a beginner at node/js, pushing my way through it.
03:15 < s5fs> RobW_: something like cp.exec('git config user.name', function(err, stdout, stderr) { console.log(stdout); }); should work
03:15 < s5fs> where cp = require('child_process')
03:15 < RobW_> s5fs: Yep, got that working.
03:16 < s5fs> :)
03:16 < RobW_> Can you tell me the benefit of spawn?
03:16 < RobW_> Or the type of situation where it should be used?
03:17 < RobW_> In the yo generators they're using  `spawn('npm', ['install'], { stdio: 'inherit' });` to install nom dependencies. That's pretty much the only place.
03:17 < s5fs> i'm using spawn right now to start little services i care about
03:18 < s5fs> so, i'll attach to the different events, like when 'close' is called i'll restart the service
03:19 < s5fs> you're getting back a childprocess object rather than just having a callback executed
03:19 < RobW_> s5fs: Gotcha. That makes sense.
03:20 < s5fs> RobW_: I'm also using fork() when I want to "talk" with a process. I guess you can do that with spawn too, but I've not done so.
03:21 < s5fs> sorry, real laggy tonight
03:26 < garthk> Benchmarking object streams: trivial stream.Readable pipes to trivial stream.Writable at 570K/sec; drops to 84K/sec when piped through stream.PassThrough or a trivial stream.Transform; keeps dropping to 21K/sec at five transforms. So, using object streams as I'd use LINQ is a bit like punching myself in the head: I should just cut that shit out unless I like pain.
03:32 < tpayne> can i redirect to a URL with post data with node.js?
03:33 < garthk> tpayne: of course. If you're using Node.js as your web server, you can issue a 302 or 304 depending on whether you want the client to POST again or GET, respectively.
03:33 < tpayne> yeah 304 sounds like it
03:34 < garthk> Whoa. Sorry: 304 is not modified. Looking up the return code asking the client to GET instead of POST. If you issue 302 to a POST, the client should POST again to the new location.
03:34 < garthk> 303 SEE OTHER: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
03:36 < tpayne> i'm using express res.redirect , but not sure how to include the post data
03:38 < tpayne> a user is authenticating with /auth/twitter, which returns some data, then i want to post redirect to / with said data
03:42 < duko> does anyone here have any ideas for an alternative to git submodule?
03:42 < duko> I want to have a library directory that contains multiple git-cloned projects
03:42 < duko> but git submodule does not seem like the right way to manage this
03:43 < duko> does anyone else here manage a workflow like this?
03:43 < mashlol> why not git submodule?
03:45 < syskk> need some advice regarding phantom
03:45 < syskk> im writing an unofficial api for a web app
03:45 < aMoniker> duko: git submodule sounds like exactly the right way to handle that
03:45 < syskk> will node.js be sufficient or should i go with the full phantom package
03:45 < duko> the library repositories are constantly changing and being updated
03:46 < duko> aMoniker ok maybe you're right
03:51 < luminous> hello! so I'm not a node developer, but I have a small module / app to run with node.js, and I am curious: this module has some hardcoded IPs/ports, what is the best way to address this "configuration" in node.js apps?
03:52 < aleksandar> hey luminous, what is the issue?
03:53 < syskk> luminous: you could expose those variables with exports
03:54 < syskk> luminous: in your module: exports.ip = ''; exports.port = 80;   when you want to change those : var yourmodule = require('yourmodule'); yourmodule.port =1234;
03:54 < syskk> etc.
03:54 < aMoniker> luminous: you could also use a module like nconf to handle configs
03:54 < luminous> hmmm
03:55 < luminous> I have to deploy multiple instances of the app, so running it with command line parameters, or a config file, would be best
03:55 < syskk> than nconf is probably what you are looking for
03:55 < luminous> https://bravenewmethod.wordpress.com/2010/12/13/node-js-application-configuration-files/ <<< is it possible to use command line parameter?
03:55  * luminous looks up nconf
03:55 < syskk> https://github.com/flatiron/nconf
03:57 < luminous> thanks syskk ! this looks like what I want :)
04:02 < mscdex> json config files!
04:03 < RobW_> This ended up explaining spawn vs exec to me pretty well: http://www.hacksparrow.com/difference-between-spawn-and-exec-of-node-js-child_process.html
04:06 < dook> I'm getting "binary JPEG" from these node bindings for my web cam, but I don't know how to serve that binary data as if it were a JPEG.  Any insight?  https://github.com/fvdm/nodejs-foscam
04:06 < dook> Is it a matter of headers?
04:09 < syskk> why are there so many damn testing frameworks for javascript :(
04:10 < dook> Trouble picking one, or trouble dealing with different tests?
04:11 < syskk> both :)
04:11 < syskk> i used to use vows.js but it seems it is not very popular
04:14 < syskk> seems that the most popular at the moment is jasmne
04:17 < syskk> well survey im looking at includes frontend developers
04:21 < mscdex> dook: if you're using a Netwave IP camera, you can just get request for /videostream.cgi and set your Authorization header appropriately. that should result in the server sending back an mjpeg stream
04:22 < dook> I'm using a foscam which is the same, (turns out it's motion-JPEG, a series of JPEGs).  However, I want to cache each frame so I can hold it in RAM and serve it to clients, so my clients aren't hitting the webcam itself.
04:22 < mscdex> dook: you could probably use a module like Dicer to parse and stream these frames to wherever you want
04:22 < dook> looking at what that can do...
04:23 < dook> mscdex: I already have the frames parsed out pretty much for me, I get a pile of binary data, I've tried passing it to browsers as something.jpg, but they don't recognize it.
04:25 < ChrisPartridge> dook: I assume you're sending the right content-type headers etc?
04:25 < luminous> RE configuration, if using something like nconf.. I've (easily) applied this to my app.js, but what about index.html, how would you use settings in there? same, just put in your script block?
04:25 < mscdex> dook: the module you mentioned (node-foscam) just takes snapshots
04:25 < luminous> I have a: var socket = io.connect('http://...')
04:26 < dook> ChrisPartridge: I'm not sure I'm setting them ALL right, maybe that's it, I'll play with them more.
04:26 < dook> mscdex: After investigating, it's pretty clear their web client is just taking snapshots repeatedly anyway, so I was just doing that on a timer.
04:26 < myndzi> anyone know of a module for providing a *forward* http proxy?
04:27 < myndzi> all i really get on google is node-http-proxy which is... the opposite
04:27 < mscdex> dook: ok, but i believe you can get an actual mjpeg stream...
04:27 < mscdex> dook: that way you just make one request and get a never-ending response of frames
04:28 < dook> mscdex: That may be the case, and I'll work on that next, but for right now I'll be happy even to provide a low-frame-rate version to many people.
04:29 < tpayne> a user is authenticating with /auth/twitter, which returns some data, then i want to post redirect to / with said data
04:29 < tpayne> is this possible?
04:31 < mscdex> tpayne: store it in a session?
04:31 < tpayne> mscdex: hmm ok, thanks! ha
04:31 < tpayne> is session data limited?
04:31 < tpayne> this is going to be a lot of post data
04:32 < tpayne> i guess i can google that
04:32 < mscdex> tpatja: it depends on your session storage mechanism
04:32 < mscdex> er tpayne ^
04:33 < luminous> tpayne: you can use localstorage and some other stuff
04:33 < tpayne> cool, thanks
04:35 < garthk> Nyyaarhghghfrjhsljhs. Bastards.
04:35 < garthk> I strap my object stream pipeline benchmark into the Node benchmark framework; it hangs. It's as if setTimeout was never called or triggered.
04:42 < garthk> Gotta go, but here's the script if anyone has ~1m to see if they can spot why it
04:42 < garthk> is hanging. Drop in node/benchmarks/. https://gist.github.com/garthk/5538236
04:50 < kenperkins> hey ppls
04:50 < beeant-work> hi
04:58 < myndzi> ah, seems i was confused about node-http-proxy
04:58 < myndzi> it looked like it was a reverse proxy server but it appears to be pretty much whatever
05:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
05:12 < dook> ChrisPartridge: The headers were good, I had to response.end(jpegBinary, 'binary')  to specify the encoding
05:13 < dook> mscdex: ^
05:41 < ChrisPartridge> dook: sweet
05:42 < dook> :)
05:42 < ChrisPartridge> dook: i'd still do as mscdex suggested at try get the stream from the cam, saves you storing a bunch of images in memory
05:42 < dook> On client or server?
05:42 < dook> On the server I'm over-writing it each time
06:01 < tpayne> anyone know what to set maxAge for a session to expire after its first load?
06:10 < ChrisPartridge> tpayne: using a specific library? or?
06:10 < tpayne> express
06:12 < ChrisPartridge> tpayne: if you're using the cookieSession middleware, just pass the maxAge option through in the options
06:15 < xj> can somebody help me with JSONP issue on node.js? I need to return the content as application/json
06:16 < myndzi> if you have an httpserver that allows keepalive and you receive multiple request events, are either req or res strictly equal to each other? or only the socket?
06:17 < tpayne> ChrisPartridge: should i send a maxAge of 0?
06:19 < xj> can anybody help me with one issue?
06:20 < tpayne> 0 doesn't do it and neither does -1 heh
06:30 < daviddripps> xj: response.writeHead(200, {"Content-Type": "application/json"});
07:09 < greelgorke_ttw> morning
07:25 < [AD]Turbo> ciao all
07:37 < oakaz> hi all
07:37 < oakaz> I've started writing a JavaScript guide
07:38 < oakaz> it's here: https://github.com/azer/azers-javascript-guide
07:38 < oakaz> ideas and recommendations are more than welcome
07:43 < chrismatheson> Any tips on better CLI formatting? i know about colours module but wondering if there are any defacto-standrard modules for layout etc ?
07:45 < Jac0bz1> Hi! I'm trying to build a script from git (elFinder) The tutorial asks me to first set the npm paths for node.js. I set it to NODE_PATH=/usr/lib/node_modules
07:46 < Jac0bz1> then i try to run jake, but I get that jake: command not found
07:46 < SomeoneWeird> sudo npm install -g jake
07:46 < Jac0bz1> SomeoneWeird: I did that
07:46 < SomeoneWeird> with the -g?
07:46 < Jac0bz1> ehm... no
07:47 < Jac0bz1> what does the -g do? 
07:47 < SomeoneWeird> global install, for binaries
07:49 < Jac0bz1> hmm.. jake cant find the other modules, uglify-js and csso
08:10 < Talentfinder> Добрый день. Ищу Sr. Javascript Developer / Node.js в Level Up   Задачи: - Разработка высоконагруженных веб-сервисов; - Работа в дружной команде над собственными продуктами компании; - Много R&D, конвертирование бизнес задач в технические. Нужно: - Опыт разрабо
08:10 < Talentfinder> Резюме на it.talentfinder@gmail.com 
08:10 < Talentfinder> За рекомендацию кандидата, который выйдет на работу бонус 100 долларов. Если Вы рекомендуете – прошу указывать в теме письма «рекомендация».
08:13 < petecoop> ...
08:19 < greelgorke_ttw> $100 for recomendation... sounds more like a joke
08:22 < syskk> lets say my node.js script is stuck somewhere
08:22 < syskk> is there any way to find out which callback is waiting?
08:30 < AAA_awright> syskk: What do you mean stuck
08:30 < AAA_awright> If you failed to call a callback, it's lost forever
08:30 < AAA_awright> uh
08:30 < syskk> there's some callbacks waiting
08:31 < AAA_awright> Failing to call a callback is one of the harder ones to debug
08:31 < AAA_awright> Right up there with memory leaks and heisenbugs
08:31 < syskk> right
08:31 < syskk> im not sure if the I/O is taking forever
08:31 < syskk> or something wrong witth my code
08:31 < AAA_awright> Suggestion: console.log
08:31 < AAA_awright> console.log everywhere
08:31 < AAA_awright> Or actually, console.error
08:32 < syskk> right
08:32 < AAA_awright> syskk: Usually when I've had problems with callbacks it's because of try/catch... you should put your callback in a finally block
08:32 < AAA_awright> Which always gets called, of course
08:33 < syskk> isnt it good enough to have a cb in the try and catch block?
08:33 < syskk> why is finally needed?
08:34 < AAA_awright> syskk: If an exception is thrown then all the code down until the catch block is skipped over
08:34 < syskk> right
08:34 < AAA_awright> And it's really hard to figure out if the callback was called or not if you stick it inside try
08:35 < AAA_awright> What if the callback is what threw?
08:35 < AAA_awright> etc
08:35 < mAritz> Although callbacks shouldn't throw ;D
08:35 < leichtge_> finally is my "blind-spot" in programming.
08:35 < syskk> i see
08:35 < leichtge_> To the day I have no idea why it should be useful ...
08:35 < AAA_awright> mAritz: TypeError
08:35 < leichtge_> The more I read about it the less useful it seems.
08:36 < AAA_awright> I guess ideally, callbacks are always called with process.nextTick
08:36 < mAritz> AAA_awright: well... that's why I said "shouldn't". but realistically in most cases you're left in a bad spot on typeerrors anyways.
08:36 < AAA_awright> That ensures thrown exceptions remain uncaught
08:36 < mAritz> yes.
08:37 < AAA_awright> Unfortunately Node.js's callback model doesn't enforce this, unlike DOM
08:37 < sysx1000> setImmediate?
08:37 < syskk> if i have something like function a(cb) { asyncFunc(function (err) { cb() } } , is there any chance cb will be lost?
08:38 < AAA_awright> syskk: If the first argument of asyncFunc is a callback then by definition, it'll always be called once
08:38 < AAA_awright> But that's a very big if
08:39 < syskk> im just wondering if I have to use a closure with cb
08:39 < syskk> im a bit lost haha
08:41 < syskk> http://pastebin.ca/2376321
08:42 < AAA_awright> syskk: Closure? No, it's just a function reference
08:42 < syskk> will internalCb keep a reference to the original externalCb every time?
08:43 < AAA_awright> What oh I see, no, that needs to be inside the scope of "a"
08:43 < AAA_awright> But you could do e.g.
08:43 < AAA_awright> function a(cb) { asyncFunc(result); function result(){ /* */ }; }
08:43 < AAA_awright> and use cb in /* */
08:43 < syskk> im referring to pastebin now
08:44 < AAA_awright> What of it?
08:44 < AAA_awright> Oh
08:45 < sysx1000> Why do you need your internal cb function bound to specific variable?
08:45 < syskk> it needs to be bound to externalCb
08:46 < syskk> but i dont think it will lose the reference right?
08:46 < sysx1000> it won't lose reference
08:46 < AAA_awright> What are you trying to do?
08:47 < syskk> hard to explain
08:47 < syskk> i just want to make sure internalCb will not lose reference to externalCb
08:47 < sysx1000> It won't lose
08:48 < syskk> oh damn it you were right
08:48 < AAA_awright> syskk: http://pastebin.ca/2376326
08:48 < syskk> I needed to use finally
08:48 < syskk> damn it
08:48 < AAA_awright> I'm psychic like that
08:48 < AAA_awright> Appearently
08:48 < sysx1000> brb
08:49 < syskk> finally catches errors that happen in catch block?
08:49 < syskk> never used finally before haha
08:49 < AAA_awright> syskk: Finally is always called regardless of what was thrown or not... It's used for cleaning up resources, unlocking resources, etc
08:50 < syskk> ahhh then it might not be the problem
08:50 < AAA_awright> It sounds like you solved the problem?
08:51 < syskk> no i thought i did because the finally block was executing
08:51 < syskk> haha
08:51 < sysx1000> try..catch in async block?
08:51 < sysx1000> Does it solved?
08:51 < sysx1000> (as well as throw)
08:52 < fastman> hi
08:52 < syskk> fail
08:52 < fastman> recently, weve released URL parser based on liburiparser for node 0.10
08:52 < fastman> https://github.com/DreamLab/node-uriparser
08:53 < syskk> well i think probably my connection is just very slow
08:53 < syskk> cause it works from time to time
08:54 < BlackFate> hello! i have this code http://dpaste.com/1122493/ . "Second" and "Third" dont get printed
08:55 < syskk> damn actually i think there is no bug
08:55 < syskk> just my connection being very slow
08:59 < GreenDog> I can't recall exactly how async works, but i know you need to have callback as a parameter and then call the callback at the end of each of your functions
09:00 < GreenDog> the docs show an example. look for the "Control Flow" section
09:01 < syskk> ahhh i think i found the bug
09:02 < ningu> syskk: not sure what you are doing but probably you are either foregetting to call a callback, or calling it too soon :)
09:04 < moranje> Hi! I'm hoping someone here knows how to get node-mysql runnning. I have not managed to get a connection yet, but I can't seem to find out what I'm doing wrong.
09:04 < moranje> https://github.com/felixge/node-mysql/issues/478
09:06 < ningu> moranje: are you absolutely sure it isn't an issue with your mysql server, firewall, etc.?
09:06 < ningu> oh, nevermind.
09:06 < ningu> moranje: comment out connection.end().
09:07 < ningu> then everything will magically work and there will be unicorns and rainbows
09:07 < ningu> and you will have learned a lesson in node's async control flow
09:07 < moranje> Hmmm, I can run the server manually through shell without problems
09:08 < moranje> That's awesome let's try that
09:09 < syskk> that's weird
09:09 < syskk> I set a timeout to request module and the problem seems to be gone
09:09 < ningu> what's weird?
09:09 < syskk> weiiiird stuff
09:09 < ningu> oh
09:19 < moranje> @ningu, Alas no avail. The same time-out error
09:20 < ningu> well then I'm not sure :)
09:21 < ningu> nothing obvious that I can think of
09:21 < ningu> what happens if you put in the wrong port? do you get a different error?
09:21 < moranje> ningu: you are sure that connection.end() needs to be commented out
09:21 < ningu> moranje: not absolutely sure, it depends how it's implemented
09:22 < ningu> but I would advise against leaving it in, you want the connection to be closed only when you know all queries are done
09:22 < moranje> ningu: wrong port gives and ECONNREFUSED error
09:22 < ningu> ok, so it's doing something with the actual mysql server
09:22 < ningu> but that something isn't working
09:23 < mAritz> moranje: uhm... you're trying to establish a mysql connection from your node server to your node server?
09:23 < moranje> Right
09:23 < ningu> err
09:24 < moranje> Wait what?
09:24 < ningu> moranje: is the code in the issue sufficient to reproduce the issue if you put it in its own script and run it?
09:25 < Aartsie> Hi all, does any know an good tutorial for creating an oAuth service provider ?
09:25 < ningu> since you are running it from sonmething else evidently (the Object.storePerson method)
09:25 < cjwfuller> First time in the Node.js IRC.. in fact first time in any IRC!  I'm wondering if it's possible to make a Node proxy that listens for HTTP requests and either just lets the request happen normally OR alters the URL in some way e,g, redirects the user to some other URL.. so kind of like a router in a way 
09:25 < ningu> I was just assuming port 80 was really the mysql server port and you have it strangely configured but if that isn't the case ...
09:26 < ningu> cjwfuller: sure. that would be quite easy
09:26 < cjwfuller> Currently I have a Node proxy that can return a custom HTML page OR get the requested URL and write out its header and body... this doesn't work well though
09:26 < ningu> cjwfuller: check the code for https://github.com/substack/bouncy
09:27 < ningu> that should give you some inspiration, anyway
09:27 < cjwfuller> there must be a better way?
09:27 < mAritz> moranje: you're saying your node.js server runs on port 80. and then you establish a mysql connection to port 80 on localhost... how is that supposed to work? do you have another part of your node.js server that pumps incoming mysql requests to the mysql server?
09:27 < ningu> well, sure, you can return a redirect
09:27 < mkozjak> hi again :)
09:28 < cjwfuller> @ningu thanks for the link!  Looks like it might do the job
09:28 < ningu> cjwfuller: I assume you know how http redirects work, with the status code and the header specifying the new url
09:28 < moranje> It may very well be that I am doing this wrong, I have a website running inside a local netwerk that talks to the node server inside that same network
09:28 < Sadtaco> Why don't you use nginx as a proxy for that?
09:29 < ooo_> test
09:29 < AAA_awright_> cjwfuller: It's bad form to modify URLs, URIs identify resources, by changing the URI you're changing the resource being acted on
09:29 < mkozjak> i would need to get about 40000 ip addresses and create a socket for each of them to catch logs - so what queue system for node would you recommend?
09:29 < ningu> moranje: if you want to connect to a mysql database, you connect to the port it's running on.
09:29 < mAritz> moranje: my point is: your mysql server is not running on port 80 (unless you're doing it wrong). change line 5 in that example to the proper mysql port you're using.
09:29 < ningu> a mysql database is not a web server, and vice versa.
09:30 < cjwfuller> @Sadtaco I could use NGINX but this Node server is going to do stuff like talk to a Redis DB
09:31 < ningu> cjwfuller: node can do it just fine, people do that sort of thing all the time. I'm not saying anything about what kind of redirection, proxying etc. is smart (re: changing resource locations or whatever)
09:31 < mAritz> cjwfuller: the usual setup is to have an nginx server in front of your node server. and possibly a load balancer and/or caching service in front of nginx
09:32 < moranje> Hmm, that's a valid point, thanks for the explanation. That makes sense. 
09:32 < ningu> mAritz: there are also people who say to do it in straight node. I use nginx but my needs are not heavy enough to have had to think hard about how to choose one or the other.
09:33 < ningu> s/how/why/
09:33 < mAritz> ningu: who are these people and what fantasy world do they live in? :D
09:33 < ningu> mAritz: you should talk to them about that. but I've heard enough people say it's preferable to nginx that I figure there must be something to it.
09:33 < cjwfuller> @ mAritz thanks.. I need to go and read how a NGINX/Node setups work
09:33 < mAritz> i'm a huge fan of node.js, but nginx/varnish/whatever do the things they are built for way better than node 
09:34 < ningu> yeah, I am not opposed to nginx at all
09:34 < ningu> just reporting on my sense of what is "normal"
09:34 < ningu> which is: some people use nginx, some don't :)
09:34 < ningu> most recently I heard the sentiment from mikeal
09:37 < moranje> So I guess it should be 8896?
09:37 < moranje> tcp        0      0 localhost:mysql         *:*                     LISTEN      8896/mysqld
09:37 < Sadtaco> cjwfuller, you run nginx on port 80 and send the traffic you want to node to go to node
09:38 < ningu> moranje: the default mysql port is 3306. I have no idea how you have it configured though.
09:38 < ningu> moranje: it's your server. you really should know how it's set up.
09:39 < cjwfuller> @Sadtaco so how exactly would a Node/NGINX setup work..?  Let's say I have a network of machines.  Each machine does lots of HTTP/80 requests.  I need all HTTP/80 requests to go somewhere so I can say "this URL is fine" or "no, this URL is NOT fine, you can have this page instead"
09:40 < Sadtaco> You run node.js on another port and proxy the request to that port.
09:40 < Sadtaco> Reverse proxy, that is, I believe
09:40 < cjwfuller> @Sadtaco so I guess you can have a NGINX proxy that all these requests hit first
09:40 < ningu> yep, that's how you would do it with nginx
09:40 < Sadtaco> Yeah
09:40 < ningu> actually, you'd do it the same in essence with whatever
09:42 < mAritz> cjwfuller: why do you want to redirect? if the url is wrong, return a 404.
09:44 < cjwfuller> mAritz: It's a project I'm thinking about doing... a content filtering program that filters based on URL instead of the standard DNS filtering... I wasn't sure how possible it would be but seems like it can be done
09:44 < cjwfuller> mAritz: (so 404s wouldn't be used)
09:44 < ningu> hmm
09:45 < mAritz> wait, what?
09:45 < mAritz> content filtering via dns?
09:45 < mAritz> am i retarded or is that not a thing? :D
09:45 < cjwfuller> ningu: I'm open to suggestions :).. maybe it's not possible.. I'm not sure yet :/
09:45 < ningu> well sure it's possible, the question is just whether it makes any sense
09:46 < ningu> and so far I can't really tell why it's a useful idea, not sure I really understand
09:46 < cjwfuller> content filter via DNS is possible (e.g. openDNS) but I want to make a finer-grained system where we can filter on URL instead
09:46 < ningu> mAritz: I assume he means reverse dns or whatever method you use to detect where someone is located
09:47 < cjwfuller> e.g. bad.example.com is filterable by DNS but bad.example.com/some-no-bad-content is not filterable by DNS
09:47 < cjwfuller> because /some-no-bad-content wouldn't be in a DNS packet
09:47 < mAritz> oh. okay. but that's filtering addresses, not content, right?!
09:48 < ningu> yeah, the url path is not part of the address
09:48 < ningu> I misunderstood what you meant by dns filter
09:49 < cjwfuller> mAritz: Yeh, i guess... so if someone goes to bad.example.com/something bad then they would get a page that says 'sorry, you can't see this' or something
09:49 < cjwfuller> but otherwise they would just see thesite
09:50 < ningu> cjwfuller: so why not just tell nginx (or whatever) not to proxy those requests and to do something else?
09:50 < booyaa|foo> dudes is there a difference between exports and module.exports?
09:50 < ningu> I don't really understand the difficulty
09:50 < ningu> booyaa|foo: yes
09:52 < sinclair-work> booyaa|foo: just use exports
09:52 < cjwfuller> ningu: I only started Node yesterday :) I was just checking if it would be possible (seems like it would be) and how to do it in Node.  Currently I can proxy the requests and block a page but I can't 'let the page' through e.g. make the Node server do nothing basically
09:52 < ningu> no, just use module.exports :P
09:52 < ningu> cjwfuller: huh? you mean just have the request hang rather than returning an error?
09:53 < sinclair-work> ningu: what is wrong with using just 'exports'
09:53 < ningu> sinclair-work: then you can't have require() return a function, which is often useful
09:53 < sinclair-work> ningu: sounds like bad code to me
09:53 < cjwfuller> ningu: I don't want an allowed page to hang or return an error.. I just want it to show the site the user requested
09:54 < ningu> sinclair-work: nope, it's pretty normal and very useful for some purposes
09:54 < ningu> cjwfuller: ok but that isn't "doing nothing", it would still be proxying the request.
09:54 < sinclair-work> ningu: by normal, you mean the typical mish mash vomit code i see in most js libs?
09:55 < ningu> sinclair-work: in fact very often the right level of abstraction for a module, i.e. a reusable piece of code, is a single function
09:55 < moranje> @ningu & mAritz: You are heroes, I got it to work! Thanks for helping me out
09:55 < ningu> as for your random insults I don't care, you haven't said anything substantive
09:55 < sinclair-work> then return the function on the export, and give it a name
09:56 < ningu> sinclair-work: that's just silly. why make people do require('foo').bar when bar is the only thing 'foo' provides?
09:56 < sinclair-work> ningu: its nodejs, what do you expect?
09:57 < sinclair-work> you are bluring the lines between a module being..."A MODULE" and a function
09:57 < sinclair-work> and its exactly the sort of rubbish coding practice that plauges nodejs
09:57 < ningu> sinclair-work: the definition of what a module is did not come down from on high.
09:59 < ningu> sinclair-work: take a look sometime at dnode. it works just fine returning a function from require(), but I don't see how you could call it anything other than a module, in terms of functionality.
09:59 < booyaa|foo> ningu: sounds like i have a rule of thumb when to use both now
09:59 < ningu> booyaa|foo: the other reason I like module.exports is, even when returning a regular object, that means I can have functions foo and bar in the module and call foo() and bar() from within it
10:00 < ningu> whereas it's kind of ugly to call exports.foo()
10:00 < ningu> but then you have to do, module.exports = { foo: foo, bar: bar };
10:00 < ningu> which is a bit tedious but imo better than the alternative
10:00 < booyaa|foo> mmm still get my head around writing my module. despite having a wealth of example code to look at
10:01 < ningu> sometimes it's useful to both export something, and be able to call it from within the module
10:01 < ningu> you don't *have* to use module.exports for that, but it makes it less weird-looking
10:02 < ningu> cjwfuller: anyway, I still fail to see the distinction between "proxy request" and "do nothing" that you're envisioning
10:02 < sinclair-work> ningu: returning a nameless function from a module is bad practice
10:02 < ningu> sinclair-work: so say you. fortunately, no one actually cares
10:03 < sinclair-work> ningu: when we code, it should be in 'absolute' terms, a module is a module, not a function, if it is both, you are fluffing things up
10:03 < ningu> if you can point to some actual design reason it's bad that would be different
10:03 < cjwfuller> ningu: Sorry, probably because I mean the same thing.. I just need to get Node to proxy so the user can see the page
10:03 < cjwfuller> can't be hard
10:03 < sinclair-work> require('foo')(123) <-- stupid
10:04 < ningu> cjwfuller: how will you decide which pages to block? is it a short list or based on a pattern, and if so what pattern?
10:05 < heeehaa> Any clue on why a "string".match wouldn't work on a string buffer? => http://pastebin.com/f4ZWwtiK
10:06 < ningu> heeehaa: isn't it utf8, not utf-8? maybe they're equivalent...
10:06 < heeehaa> yeah it's utf-8, still same result though
10:06 < heeehaa> oh
10:07 < cjwfuller> ningu: That's a whole different thing :).  I just want to make a 'proof of concept for now just blocking and proxying/allowing a site.  I have a plan.  We already have a system (in Node) that does DNS blocking using categories/whitelist/blacklists.. this proxying thing will just make the whitelist/blacklist more 'fine-grain'
10:08 < heeehaa> ningu: encoding doesn't seem to make a difference
10:08 < ningu> cjwfuller: ok. well, I'd suggest again then, that you look at bouncy. I'm not sure if it can do what you want or not, but if not you can get some ideas from the code.
10:09 < leichtge_> sinclair-work: i often have a index.js that exports all functions like {myname: require('./myname')} to show that the functions exist beside each other (no connection)
10:10 < dypsilon> is it possible to use prefix with nave?
10:10 < dypsilon> i want to install node using nave without root rights
10:10 < leichtge_> so require("mymodule").myname();
10:10 < cjwfuller> ningu: Thanks very much.  I'll take a look at bouncy :)
10:10 < sinclair-work> leichtge_: why do that?
10:11 < sinclair-work> leichtge_: is it to prevent large files? or to logically separate functionality ?
10:11 < leichtge_> Because I don't want looong js files with plenty of methods in them that are not related.
10:11 < leichtge_> sinclair-work: later one.
10:11 < sinclair-work> leichtge_: i don't worry about long JS files anymore
10:12 < leichtge_> I have plenty of reasons to worry about long JS files. 
10:12 < leichtge_> Why don't you?
10:12 < sinclair-work> leichtge_: because all my source is in TypeScript, and TS lets me reference files in code, which get packaged into a JS compilation
10:13 < sinclair-work> i expect coffeescript'er enjoy the same goodness
10:13 < leichtgewicht> If you don't code in JavaScript then the discussion is anyways just about the final module.
10:13 < leichtgewicht> the one that is being pushed.
10:13 < sinclair-work> yes, the final module...
10:14 < sinclair-work> a module that should return variables and functions, not nameless functions, 
10:14 < sinclair-work> and i understand why you would group functions together in a index.js
10:15 < dypsilon> Can I use "nave usemain" with a prefix? So that it installs node in ~/.local/bin 
10:15 < dypsilon> ?
10:15 < leichtgewicht> What is the name for javascript files that I require(); but have as index in the package.json
10:15 < leichtgewicht> I assume those files are not modules ..
10:15 < leichtgewicht> (even though i use module.exports)
10:16 < sinclair-work> they are modules, but just because you can do something doesnt make it a good idea
10:16 < ningu> we need a final solution for the javascript problem
10:16 < ningu> or maybe a final module
10:16 < ningu> sinclair-work: it also doesn't make it a bad idea unless you can give a reason other than "it's stupid"
10:17 < sinclair-work> diamond style inheritance in C++ is possible , that doesn't make it a good idea.
10:17 < ningu> yes, but it's well understood why that is a bad idea
10:17 < sinclair-work> ningu: i gave you a reason, scroll up
10:17 < ningu> and there is literature on it
10:17 < ningu> sinclair-work: you basically said, because I say so.
10:18 < sinclair-work> no, read what i wrote
10:18 < ningu> yes, you said doing otherwise will fluff things up
10:19 < ningu> clearly one of the main risks of writing code
10:21 < leichtgewicht> ningu: I stepped into the conversation later on because I didn't understand some statement. I scrolled up and it was difficult to get the whole conversations point: Can you summarize?
10:22 < ningu> I'm afraid I can't since I am not sure there is a summarizable point
10:22 < sinclair-work> leichtgewicht: the conversation is about if its a good idea to use module.exports and have modules return functions
10:22 < ningu> I find the flexibility of module.exports to be a useful design feature of modules in js since it gives you more control over how you compose your code
10:23 < leichtgewicht> ningu: agree
10:23 < ningu> like anything it can be done badly, but I fail to see how you can say hthat aving it return a function is by fiat wrong
10:23 < dypsilon> Is it possible to use nave usemain with a prefix?
10:23 < ningu> and as far as I can tell, sinclair-work's main argument is that you're mixing things of different types and thereby fluffing things up
10:24 < ningu> well, Harvard University did not have a department of sociology for many years because it's a word that mixes Greek and Latin roots. purists object to such coinages but are there any practical negative consequences? no.
10:25 < ningu> anyway, that's the best analogy I can make.
10:30 < greelgorke_ttw> using single function as module is a design paradigm following the single responsibility principle. a module should do one single thing. module.exports = function... is just the way to do that
10:30 < greelgorke_ttw> and since functions are objects, you still can add things to your exports...
10:45 < heehaa> Does anyone know why a regexp match on a string buffer would fail, when it works on a regular string => http://pastebin.com/2c7Juenc ?
10:48 < ssafejava> heehaa: might want to add the chunks to a string, then do that parsing on the 'end' event
10:49 < ssafejava> actually, try removing your ^ and $ markers from the regex
10:50 < heehaa> ssafejava: Yes, that worked :) Thanks
10:50 < ssafejava> great. might be a \n at the end of that string
10:53 < ssafejava> dypsilon: you might just want to find the version & compile from source
10:54 < dypsilon> ssafejava, yep, doing it right now
10:54 < dypsilon> thanks
10:57 < heehaa> test
11:09 < myndzi> regarding http.Agent
11:10 < myndzi> the docs seem to imply that keep-alive connections are closed immediately when there are no pending requests to that destination
11:10 < myndzi> is this true?
11:12 < garthk> myndzi: you could always test it. Set up an HTTP server, make connections to it, see what happens. 
11:12 < garthk> If you can't be arsed testing it, stick with the docs. :)
11:12 < myndzi> it's not a straightforward test, heh.
11:12 < myndzi> but it is the kind of thing that somebody might know off the top of their head ;)
11:12 < myndzi> meanwhile i did find this https://github.com/joyent/node/issues/1958
11:16 < aandy> not to start a long discussion, but lately i've wondered about the twitter streaming api and, say, the finance.google.com UI. both use keep-alive and i'm wondering why they chose that as opposed to websockets. what i've come up with so far is: both are one direction, whereas websockets are two-way (waste of bw?), and perhabs portability? (http 1.0 had keep alive iirc). any other pros/cons to using keep alive rather than websockets? (or is this a bad place 
11:17 < myndzi> websockets are newer and if there's no need for them then a slow chunked transmission serves better
11:19 < greelgorke_ttw> aandy: http://www.html5rocks.com/en/tutorials/eventsource/basics/
11:19 < greelgorke_ttw> the buzzword is server sent events
11:20 < aandy> true. how about maintaining so many connections open at the same time. would that be the "same" if it was websockets or persistant http? websockets and "keep-alive" would be equally easy/hard to scale out, right? websockets does add another level of authentication to manage though maybe
11:20 < aandy> greelgorke_ttw: ah, thanks :)
11:20 < aandy> didn't really know what to google for exactly
11:21 < aandy> that's just the kind of article i was looking for, thanks :)
11:26 < peterschmidler> When I load a hash from mongodb in production (Ubuntu) it gets somehow destroyed like $���gG9�+��… instead of vEKLQ0lr6iwEa4… event though it looks correct when I look at the mongoDB via the console. Locally (OSX) everything's fine. What could that be?
11:26 < peterschmidler> ^even though
11:28 < aandy> encoding? charset
11:30 < peterschmidler> aandy: Yea, must be something like that. But I have no clue how to resolve it anyway...
11:30 < aandy> what're you running on your osx? utf-8? it should be, if you're ever in doubt when installing something
11:30 < greelgorke_ttw> peterschmidler: how do you print the hash in production?
11:39 < echoSMILE> what is the syntax of using pipeline in redis ?
11:39 < peterschmidler> When I load a hash from mongodb in production (Ubuntu) it gets somehow destroyed like $���gG9�+��… instead of vEKLQ0lr6iwEa4… event though it looks correct when I look at the mongoDB via the console. Locally (OSX) everything's fine. What could that be? Is there a way to set the encoding inside the node.js app. I am using mongojs.
11:40 < peterschmidler> Sorry for double posting my IRC client crashed...
11:40 < greelgorke_ttw> peterschmidler: how do you print the hash in production?
11:42 < peterschmidler> greelgorke_ttw: I render both the retrieved hash from mongo and the generated one from the login page to a html page.  
11:42 < greelgorke_ttw> if possible some code would be nice
11:48 < phrearch> hi
11:48 < phrearch> does anyone know which wsclient is used in https://github.com/eladb/node-webstream ?
11:48 < phrearch> wsclient in npm seems to be something different
11:49 < phrearch> ow never mind. i didnt look :S
11:49 < phrearch> its part of webstream itself :p
11:49 < peterschmidler> greelgorke_ttw: I have to build a test case first… 
11:51 < peterschmidler> Later...
11:57 < Hounddog> i dont know where to ask currently... am trying to use flatiron but i am not understanding how you would create a cli app on this when creating the app structure through the commandline...
12:27 < OliverJAsh> how can i do a system-wide installation of nvm?
12:28 < OliverJAsh> or is that a bad idea?
12:40 < OliverJAsh> anyone/
12:42 < beeant> what is the best curl module for node
12:43 < beeant> is it a good idea to use request https://npmjs.org/package/request for doing curl job
12:45 < mkozjak> is there a way to handle Error: read ECONNRESET and manage it to not go to the close event automatically?
12:51 < ak5> in express, how do I get the base url?
12:53 < devoidfury> the domain? req.headers.host
12:56 < beeant> can i use http.request in node like using curl in php?
13:01 < echoSMILE> I can't find a decent doc about the function pipeline for the redis module. anyone?
13:10 < aandy> beeant: which curl specific features are you looking for?
13:10 < beeant> i need to do post, get, and be able to set agent
13:11 < aandy> the 'http' module can do that, yes
13:11 < beeant> is it usual that people do that?
13:11 < beeant> or people usually use some specific module to do this 
13:11 < aandy> using a loaded module, rather than starting an external application with that added overhead, is preferred
13:11 < beeant> like requesting data from external api
13:11 < beeant> in php it is common to use curl
13:12 < aandy> i usually use http in node.js or whichever native client there is in a given language
13:12 < mAritz> httpClient is perfectly fine for some simple stuff
13:12 < aandy> unless of course the functionality i need isn't there. but those you listed are in 'http'
13:12 < beeant> like requesting a file and save it
13:12 < mAritz> if you have more and want another layer of abstraction you can use the request module
13:13 < beeant> like what kind of layer of abstraction for example
13:14 < aandy> like, switching method, request headers etc
13:14 < aandy> http://nodejs.org/api/http.html#http_http_request_options_callback
13:14 < beeant> probably i dont need that right now, but not sure about the future
13:15 < beeant> how can i set the default agent
13:15 < beeant> i dont want to set the same agent again and again, everytime i use that
13:15 < aandy> http.globalAgent
13:15 < beeant> should i create a function to replace the call?
13:16 < aandy> http.globalAgent.options.headers = { 'User-Agent': 'beeant awesomecrawler 1.0' }
13:16 < beeant> lol
13:16 < beeant> ya
13:16 < aandy> just issue that after you've required the module. var http = require('http');
13:16 < beeant> so i set that in my app.js?
13:16 < aandy> right
13:17 < beeant> oh nice
13:17 < beeant> this is  all i need for now i guess
13:18 < beeant> thank you!
13:18 < beeant> back to coding now
13:18 < aandy> np, happy coding
13:20 < beeant> i can do http.globalAgent.options.agent = ''; right?
13:21 < aandy> uh.. yes, but that's not right
13:21 < beeant> it is written here http://nodejs.org/api/http.html#http_http_globalagent
13:21 < beeant> what is the right one
13:21 < aandy> right, but options.agent  doesn't exist
13:22 < aandy> i mean, you can set it, and you can set .options.herp = 'derp', but it's not used by the request
13:22 < beeant> oh
13:22 < beeant> oh
13:22 < beeant> ok
13:22 < beeant> ill use ur way
13:22 < beeant> thank you!
13:22 < aandy> what you want is to set the header 'User-Agent' to '' (or a more descriptibe one)
13:22 < aandy> np
13:23 < beeant> more descriptible one
13:23 < beeant> i do http.globalAgent.options.headers['User-Agent'] =
13:24 < aandy> right
13:25 < aandy> the way i wrote it was in case the header isn't set by default (then the key wouldn't exist). i can't remember if it does
13:25 < aandy> uh, sorry, ignore that
13:25 < aandy> nvm :p
13:27 < beeant> ya thats true
13:27 < beeant> do have to separate the host and path?
13:27 < beeant> like {host: 'abc.com', path:'/moccba'}
13:28 < aandy> yes. there's http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost to make that more managable
13:28 < geNAZt> hiho
13:28 < aandy> url.parse('http://abc.com/moccba')
13:28 < beeant> ohih
13:28 < beeant> oh
13:34 < beeant> so after the url parse
13:34 < beeant> i do like
13:34 < Fuzzyma> hey - I just stum
13:34 < Fuzzyma> hey - I just stumbled about sending files with node.js
13:34 < beeant> options = {host: hostUrl.host, pathname: url.pathname} ?
13:35 < beeant> i mean hostUrl.pathname
13:35 < Fuzzyma> *node.js = socket.io
13:35 < Fuzzyma> Is this worth a try or are there problems I dont see at this point?
13:35 < geNAZt> Fuzzyma, well how do you stun in nodejs ?
13:36 < Fuzzyma> stun?
13:36 < geNAZt> ah okay its stum
13:36 < geNAZt> stun => search for open ports for connections
13:37 < Illusioneer> When I am using socket.io, when I have a socket.on event, the standard "message" and then the function that is called, where does the io.sockets.on get the message name from?  I'm assuming it's part of some data block coming from the client emit, but I can't find any reference in the documentation
13:37 < Fuzzyma> I just pressed enter to early^^
13:39 < beeant> how to set the POST data parameters in http.request?
13:40 < Fuzzyma> I think uploading files with socket.io would make things fairly simple since it uses techniques which are supported in every browser. It would work as long as the Browser supports the FileReader-Object. But I dont know if the solution with socket.io needs more time/more overhead/and so on. What do you think?
13:41 < geNAZt> beeant: var req = http.request(....); req.write("postData");
13:41 < Illusioneer> Fuzzyma: I didn't say anything about a file...
13:41 < arielserafini> any reason I should use the Node.js installer over "brew install node"  on OS X?
13:41 < Fuzzyma> Illusioneer: Its my own question - not an answer to yours. Just coaccident that we write about the same stuff :D
13:42 < Illusioneer> Fuzzyma: Ahhh ok I was scratching my head for a sec over that :)
13:42 < grep_awesome> arielserafini: brew recipies are community maintained and may not be updated as fast as node.js binary releases
13:43 < grep_awesome> arielserafini: on the other hand, if you use brew for a lot of stuff, it keeps everything up to date for you and is a one stop shop
13:43 < grep_awesome> arielserafini: it is really just organization vs. wanting latest build asap
13:43 < arielserafini> grep_awesome: I figured as much, thanks
13:43 < arielserafini> :)
13:44 < arielserafini> the installer makes me use sudo for every npm command
13:44 < arielserafini> I might switch back to brew because of that
13:44 < grep_awesome> yeah, that is a pain, but you can edit the permissions of your global npm home
13:44 < mAritz> Fuzzyma: why not use the default uploading mechanisms that have worked for the past twentyfive centuries?
13:45 < grep_awesome> mAritz: carrier pidgen?
13:45 < mAritz> grep_awesome: weeeell, i was possibly slightly exaggerating
13:45 < mAritz> you can enhance that with socket.io to display progress etc
13:46 < grep_awesome> mAritz: It has been done recently http://www.reddit.com/r/todayilearned/comments/1dv8ri/til_a_south_african_it_company_preferred_to_use_a/
13:46 < beeant> ok thank you!
13:46 < grep_awesome> though latency is a bear
13:50 < mAritz> grep_awesome: and by recently you mean like 20 years ago. that article is old as shit. (you see where i'm going here?! ;D )
13:50 < grep_awesome> lol
13:50 < mAritz> Also, I would like to submit that over anything longer than a mile a carrier pidgeon should always be faster than a bear.
13:50 < grep_awesome> I lose track of time when developing
13:51 < grep_awesome> lol yes, unless it is a bearodactyl
13:52 < mAritz> Sure, but those wouldn't be caught carrying usb sticks if their live depended on it, so that's not viable.
13:52 < mAritz> *life
13:53 < Fuzzyma> mAritz: I already did that. Yesterday I wrote a "normal" solution. It wasnt that easy at all because you have to dig into the middlewares to get the progress-events. All in all it works well now. But why I should not use ONLY socket.io if I use it anyway for sending the progress? The techniques to upload a file without reloading the page arent THAT comfortable (iframe, new Javascriptstuff, 
13:53 < Fuzzyma> flash). Socket.io is a great alternative here IMO. Thats why I want to try it
13:54 < mAritz> Fuzzyma: if you want it simple, use formidable.
13:54 < mAritz> because afaik socket.io is not made for sending large amounts of binary data. but i'm not sure how it'd perform.
13:54 < mAritz> test it and report back ;)
13:55 < mAritz> *websockets, not socket.io
13:55 < Fuzzyma> mAritz: formidable is a great tool, yes. But I am using compound. Compound uses express which uses the bodyParser which already makes use of formidable. You just cant listen to the upload-events if you dont want to write your own middleware
13:55 < Fuzzyma> but you are right - I just should test it :D
14:06 < basss> hello, i'm trying to parse an .xls (excel) file, any package that does it automatically ?  
14:09 < leichtgewicht> basss: https://npmjs.org/package/excel
14:10 < merpnderp> AAA_awright: Looks like using a normal html form auth (or whatever) and setting a session cookie which is used to authenticate the socket handshake is good enough. But I'm still reading through another presentation.
14:12 < basss> leichtgewicht: it has crashed on long excel files
14:12 < basss> leichtgewicht: i already tried it before
14:12 < leichtgewicht> basss: bad luck then.
14:12 < basss> leichtgewicht: yep
14:14 < geNAZt> ask microsoft if they have a excel parser for js :D
14:14 < Daniel_zz> Hey ppl. Is there a shortcut to update node.js from git-bash? also, can I upgrade only to the last 0.8 version ? thanks.
14:15 < mscdex> Daniel_zz: you can upgrade to the latest stable version, which is v0.10.5
14:18 < medice> basss: excel interop
14:18 < medice> if performance is not a concern
14:19 < medice> (and using some platform that is not nodejs, i guess)
14:22 < mscdex> basss: https://npmjs.org/search?q=xls
14:23 < geNAZt> lawl
14:23 < geNAZt> all xls modules are licensed wrong :D
14:40 < Nneon> i'm wanting to cache a foursquare list with mongoosejs. I'm currently using request by mikeal to get a JSON object. any suggestions on how to go about caching this?
14:49 < beeant> geNAZt: what do you use for http requests? like to replace curl in PHP. for requesting data to external webservices?
14:52 < geNAZt> http.request
14:52 < geNAZt> why ?
14:54 < fabiosantos> Hello. Does anyone understand Q,js? I have a serious problem understanding defer()
14:55 < geNAZt> yes i know promises (which Q is)
14:55 < geNAZt> defer is for deffered object which are passed empty
14:55 < geNAZt> and if they are "finished" you get a event about it
14:56 < fabiosantos> geNAZt: Thanks, but I already knew that. What is bugging me, is that I can't seem to handle it
14:56 < fabiosantos> let me bpaste 3 lines of code.
14:58 < fabiosantos> geNAZt: I'm trying to resolve a deferred but it doesn't seem to have any effect.
14:58 < fabiosantos> geNAZt: http://bpaste.net/show/97318/
14:59 < fabiosantos> geNAZt: the above code prints nothing, and I've been trying for hours
15:00 < beeant> i have to write considerably long codes compared to http curl if i use http.request
15:01 < mscdex> fabiosantos: maybe you have to switch lines 2 and 3?
15:01 < mscdex> beeant: have you looked at the request module?
15:02 < beeant> yes
15:02 < beeant> i also looked at needle
15:02 < beeant> needle seems to be easier to use 
15:02 < beeant> and request seems to be more famous
15:02 < greelgorke> hyperquest
15:02 < greelgorke> another one httpclient
15:03 < mscdex> hyperquest sounds like an old school video game
15:04 < fabiosantos> geNAZt: still not working. However in the meantime I ran the same code on node.js, and it works, no matter of the lines' order.
15:04 < fabiosantos> geNAZt:  Should Q.js behave any different in a browser?.
15:04 < greelgorke> mscdex: ask substack why he choosed this name :D
15:04 < geNAZt> i dont know about Q in browser
15:04 < geNAZt> i really hate Q
15:06 < vampi-the-frog> hi guys. how does one go about delivering a node.js script/package that has an install action, ie it installs an initscript in /etc/init.d and then it can be run. I'm actually thinking of deb packages, is there an example of a node script/app that is delivered as a deb package? Or maybe some more general way of installing the script 'system-wide' so to speak
15:08 < mscdex> vampi-the-frog: i personally would not want to install a package from npm that attempts to copy files to other parts of the file system like that....
15:08 < mscdex> especially without warning
15:09 < vampi-the-frog> let's assume the warning has been issued
15:09 < Nneon> is anyone able to help me with caching a foursquare list using mongoosejs ?
15:12 < vampi-the-frog> mscdex: well I've found this http://sbhr.dk/2011/03/31/debianizing-nodejs-programs/ and I'll give it a try later
15:12 < vampi-the-frog> so sleepy
15:14 < fabiosantos> geNAZt: Well thanks anyway. 
15:17 < minibn> how to include post/get data in request js module?
15:20 < geNAZt> beeant: http://stackoverflow.com/questions/6432693/post-data-with-request-module-on-node-js
15:21 < beeant> i saw that
15:21 < beeant>   body:    "mes=heydude"
15:21 < beeant> how about multiple data
15:21 < geNAZt> its like get data
15:21 < beeant> mes=heydude&heydude=mesg?
15:21 < geNAZt> yes
15:22 < beeant> why everything seems to be more complicated in node compared to php
15:22 < geNAZt> it isnt :D
15:22 < beeant> its like i havent been learning anything along the way when i was using php
15:22 < beeant> becos frameworks make things seem so easy
15:22 < geNAZt> beeant: right
15:22 < mscdex> node.js rules!
15:23 < beeant> i have set headers
15:23 < beeant> i never set headers in PHP
15:23 < geNAZt> thats why you should start with "plain" syntax and not directly with frameworks
15:23 < geNAZt> to see what they do, what they cant do
15:23 < geNAZt> and what happens behind
15:23 < mscdex> you've never set headers in PHP? wow :S
15:23 < geNAZt> the framework does
15:23 < beeant> ya
15:23 < beeant> ...
15:24 < beeant> what if i dont set headers in request
15:24 < beeant> default is nothing
15:24 < geNAZt> you send a http request without headers
15:26 < geNAZt> GET / HTTP/1.1 is also a valid http get request
15:26 < geNAZt> :D
15:27 < beeant> how can i set user-agent in request module like setting up http.globalAgent.options.headers['User-Agent'] =  in http.request
15:28 < beeant> i can do that in app.js
15:28 < beeant> but can i do that with request module?
15:28 < beeant> like set the default
15:28 < geNAZt> headers: {'User-Agent': 'I-am-a-nodejs-bot'},
15:28 < beeant> i want to set the default
15:29 < beeant> so i dont have to set it up everytime i do that
15:30 < geNAZt> well request seems to use the http from nodejs
15:30 < geNAZt> so the globalAgent should affect the request module
15:30 < beeant> oh
15:30 < beeant> ok
15:30 < beeant> i will try
15:33 < beeant> is this like downloading, doodle.png to write to disk? request('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png')) 
15:33 < geNAZt> yes
15:34 < beeant> ok
15:34 < beeant> nice
15:34 < beeant> thank you
15:35 < beeant> now this code is shorter than php
15:36 < geNAZt> nice little one liner :D
15:36 < jeffszusz> hi guys; i've installed node on ubuntu and when i run the 'node' command it doesn't give me errors but doesn't enter the node interpreter
15:36 < jeffszusz> did i install something wrong?
15:37 < geNAZt> jeffszusz, can you give me the output of "which node" ?
15:37 < jeffszusz>  /usr/sbin/node
15:37 < geNAZt> what does happen if you "node" ?
15:38 < jeffszusz> absolutely nothing; just goes to a fresh line as if i'd hit enter with no command
15:38 < sandfox> jeffean: what if you type node -v ? and ls -la /usr/bin/node
15:39 < niall_obrien> Hey all
15:39 < jeffszusz> when i installed it, though, it didn't have to compile - on my mac with homebrew it had to compile for 20 minutes. is that relevant?
15:39 < geNAZt> jeffszusz, "sudo apt-get purge hamradio"
15:39 < geNAZt> no
15:39 < geNAZt> what version does apt-get showed you ?
15:39 < niall_obrien> Just wondering what to do if I'm not wanting to build an API, but a "traditional" web app?
15:39 < jeffszusz> -rwxr-xr-x 1 root root 60688 Nov 30  2009 /usr/sbin/node
15:40 < jeffszusz> also node -v does nothing either
15:40 < geNAZt> well you have the package hamradio installed
15:40 < geNAZt> uninstall it
15:40 < geNAZt> and reinstall nodejs
15:40 < jeffszusz> what the heck is hamradio
15:40 < niall_obrien> How can I do server-side page rendering?
15:40 < geNAZt> http://packages.ubuntu.com/lucid/node
15:41 < geNAZt> niall_obrien: we all do webapps with node oO
15:41 < jeffszusz> ahahahahahaha
15:41 < gyre008> anyone here from Europe and using Papertrail ?
15:41 < niall_obrien> geNAZt: Most make APIs with it though
15:41 < geNAZt> 9 out of 10 in here make normal websites with it :D
15:42 < geNAZt> expressjs is a website framework
15:43 < geNAZt> restify is an api framework
15:43 < niall_obrien> geNAZt: My apologies, I wasn't aware.
15:44 < geNAZt> well you can server side render views
15:44 < geNAZt> swig, ejs, jade
15:44 < geNAZt> all are possible
15:44 < niall_obrien> Ok, but it's traditionally setup for separation between client and server, correct?
15:45 < jeffszusz> ok so nodejs is reinstalled
15:45 < geNAZt> well i would say the goal for nodejs apps should be to move server and client more together
15:45 < jeffszusz> the actual command 'nodejs' works, shouldn't it just be 'node' for stuff to work though?
15:46 < niall_obrien> geNAZt: I don't get that feeling at all
15:46 < niall_obrien> geNAZt: I primarily see server = node.js + mongodb for backend API. Client = Backbone, Angular, Ember etc.
15:46 < geNAZt> jeffszusz, which node
15:46 < geNAZt> then ln -sf <output of which node> /usr/bin/node
15:47 < niall_obrien> his path sounds borked
15:47 < geNAZt> niall_obrien: and now you have moved servers and clients more together
15:47 < geNAZt> because they have to interact with each other
15:47 < geNAZt> niall_obrien, sometimes its normal from ubuntu
15:47 < jeffszusz> "which node": node not found. "which nodejs": /usr/bin/nodejs 
15:47 < geNAZt> i dont know why
15:48 < geNAZt> jeffszusz, ln -sf /usr/bin/nodejs /usr/bin/node
15:48 < geNAZt> and anything is done
15:48 < jeffszusz> thanks!!
15:48 < niall_obrien> geNAZt: I don't consider that a movement of them being closer together. I see a clear separation.
15:49 < geNAZt> well you need the data from the server
15:49 < geNAZt> and you need the views from the server
15:49 < geNAZt> and the client needs to send data to the server to persist it
15:49 < geNAZt> without using requests
15:49 < Nneon> hey guys, how would you go about caching a list of foursquare venues?
15:50 < Nneon> i'm currently using express request and mongoose
15:50 < niall_obrien> geNAZt: I'm aware. I'm just wondering how easy I can whip an app together in the traditional sense, say RoR style.
15:51 < geNAZt> never made RoR
15:51 < geNAZt> but writing an app in nodejs can be done fast
15:52 < geNAZt> a hand full of modules, a database if needed, a hand full of controllers and everything is done
15:53 < beeant> is there any function for filectime in node?
15:53 < beeant> filectime php function
15:53 < eazel7> hi ppl, good morning, good evening and good night
15:54 < geNAZt> yes
15:54 < eazel7> anyone knows a good caldav implementation on node.js?
15:54 < beeant> what is it
15:54 < geNAZt> beeant, http://nodejs.org/api/fs.html#fs_class_fs_stats
15:54 < beeant> thanks
15:55 < beeant> its not in unix time
15:55 < beeant> :(
15:55 < geNAZt> its a javascript date object
15:55 < beeant> oh
15:55 < beeant> ok
16:03 < jez0990> if I want to push or pop with an array, what's the best way to return the array after performing the op instead of the length property - wrap it in my own function? or does something handy that does this exist already?
16:12 < oliveiraev> jez0990: the push/pop concept means that you can extract an element, not just delete it. If you don't need the element push/pop'd, simply delete it
16:13 < oliveiraev> >> arr = ['one', 'two']; delete arra[0]; arr;
16:13 < purr> oliveiraev: ReferenceError: arra is not defined
16:13 < oliveiraev> >> arr = ['one', 'two']; delete arr[0]; arr;
16:13 < purr> oliveiraev: (object) [undefined, 'two']
16:13 < jez0990> oliveiraev: OF COURSE, thanks :D
16:13 < brainproxy> (function () {...}()) -or- (function () {...}_() ? does it matter, why do jslint and jshint complain about this?
16:14 < Havvy> brainproxy: Personal opinion of Crockford.
16:14 < Havvy> Why JSHint cares, I'm not sure
16:14 < brainproxy> whoops, typo meant (function () {...})()
16:14 < vlado__> hello. how do you deal with huge LESS project on development stage? 
16:14 < brainproxy> Havvy: alright, figured as much
16:15 < oliveiraev> really don't matter. The single cause, for me, is about the last () meaning call of the function expression vs the expression result
16:15 < Havvy> But the opinion is that (function () {})() looks like 'donkey balls'.
16:15 < oliveiraev> (f (){}()) says explicitly: define f and run
16:16 < oliveiraev> (f() {})(): define f and run or run f results?
16:16 < oliveiraev> just convention
16:18 < oliveiraev> jez0990: if you complain about [undefined] within your array, you can, instead , slice it
16:22 < jez0990> oliveiraev: wait, no, I got ahead of myself with that response :/ delete doesn't solve my dillema and slice is probably too wasteful. I actually want to execute these statement(s) inside a function call parameter for brevity. Just today though I learned about how to wrap things with (,) ...so I can do someFunction((arr.shift(),arr))
16:23 < oliveiraev> again, is about concepts. What's your need? I need *remove* the first/last element of an array...
16:24 < geNAZt> and slice is to expensive ?
16:24 < oliveiraev> >> arr = ['one', 'two', 'three', 'four', 'five']; /* shift */ arr.slice(1); /* pop */ arr.slice(0, arr.length);
16:24 < purr> oliveiraev: (object) ['one', 'two', 'three', 'four', 'five']
16:25 < oliveiraev> >> arr = ['one', 'two', 'three', 'four', 'five']; /* shift */ arr.slice(1); /* pop */ arr.slice(0, arr.length - 1);
16:25 < purr> oliveiraev: (object) ['one', 'two', 'three', 'four']
16:25 < oliveiraev> >> arr = ['one', 'two', 'three', 'four', 'five']; /* shift */ arr.slice(1);
16:25 < purr> oliveiraev: (object) ['two', 'three', 'four', 'five']
16:25 < geNAZt> arr = ['one', 'two', 'three', 'four', 'five']; /* shift */ arr.slice(1); arr.slice(0, -1);
16:25 < geNAZt> >> arr = ['one', 'two', 'three', 'four', 'five']; /* shift */ arr.slice(1); arr.slice(0, -1);
16:25 < purr> geNAZt: (object) ['one', 'two', 'three', 'four']
16:25 < oliveiraev> nice -1 trick
16:26 < geNAZt> >> arr = ['one', 'two', 'three', 'four', 'five']; arr.slice(1, -1);
16:26 < purr> geNAZt: (object) ['two', 'three', 'four']
16:26 < oliveiraev> don't think about slice being wasteful
16:27 < mscdex> >> console.log('node.js rules!');
16:27 < purr> mscdex: undefined; Console: 'node.js rules!'
16:28 < geNAZt> >> var end = Date.now() + 1000; var count = 0; while(end > Date.now()) { count++; arr = ['one', 'two', 'three', 'four', 'five']; arr.slice(1, -1); } count;
16:28 < purr> geNAZt: (number) 1060748
16:28 < geNAZt> >> var end = Date.now() + 1000; var count = 0; while(end > Date.now()) { count++; } count;
16:28 < purr> geNAZt: (number) 1163000
16:28 < geNAZt> so its not so slow and wasteful
16:34 < oliveiraev> geNAZt: I agree
16:39 < Rantanen> I'm having trouble with fs.createReadStream. I'm reading the file in blocks of 43 bytes but the 'readable' event is emitted only twice and I never get the 'close' event. The file is 50+kb so there should be plenty of content.
16:39 < jez0990> geNAZt: I can believe that to an extent as v8 is pretty clever with these things, but aren't those numbers counterintuitive? :S
16:39 < Rantanen> https://gist.github.com/Rantanen/2142da3b6a0b1839d95b Don't suppose anyone sees anything wrong with that? >.>
16:39 < Rantanen> Is there something other to using fs.createReadStream than calling that, registering 'readable' event and then calling .read in the event?
16:40 < geNAZt> jez0990: no, since its relative to its computing power
16:40 < beeant> how do you do
16:41 < geNAZt> Rantanen, if the stream is full and you dont read enough it should emit new readable events
16:41 < beeant> if(variable isset and true)
16:41 < jez0990> geNAZt: ohhhh, I get it now, thanks for demonstrating
16:41 < geNAZt> if(typeof variable !== "undefined" && variable === true);
16:41 < Rantanen> Hm. So in the 'readable' event I should implement something such as while(stream.read(43)) { .. } ?
16:42 < geNAZt> Rantanen, no, never use loops in nodejs :D the stream itself should emit a new readable event if there is any data rest in the stream
16:42 < Rantanen> geNAZt: Thanks! That was it. Throwing multiple reads into the readable event works.
16:42 < geNAZt> so i think its a bug
16:42 < Rantanen> I think the problem is that my reads are too small for the "common" scenario.
16:43 < Rantanen> But ya, sounds like a bug.
16:43 < Havvy> geNAZt: The 'typeof variable !== 'undefined' part is redundant.
16:43 < Rantanen> But calling read multiple times seems to workaround it.
16:43 < geNAZt> >> if(variable === true) console.log("test");
16:43 < purr> geNAZt: ReferenceError: variable is not defined
16:43 < geNAZt> its not
16:43 < beeant> i did that but still undefined error
16:43 < beeant> ill try some more
16:44 < geNAZt> >> if(typeof variable !== "undefined" && variable === true) console.log("test");
16:44 < purr> geNAZt: undefined
16:44 < Havvy> Oh, right. If you want to check if a variable is defined...though that can be done lexically.
16:46 < beeant> req.query.param is to get post right
16:47 < beeant> oh it should be req.body
16:47 < beeant> >.<
16:50 < simb> In my package.json i have two dependencies on the same private git repo but with different branches.  This seems to be giving npm a world of trouble because when it checks out the second one it already exists.  Is there a different/better way to do this?
16:58 < shesek> simb, each branch contains a different package?
16:59 < shesek> with different `name` in its package.json?
17:00 < simb> shesek: yeahs.  its a desktop and mobile version of a client side app. that I am bundleing together for distribution.
17:00 < simb> so they have different names. and in the package.json I have them specified with different branches. but npm caches them using just the git url
17:00 < beeant> is there any way to send a JSON response instead of jade view?
17:00 < beeant> in expresjs
17:00 < shesek> beeant, res.json(obj)
17:00 < beeant> ok
17:00 < beeant> !
17:00 < beeant> thanks
17:01 < shesek> or res.send(obj)
17:01 < shesek> simb, uh... that's not really what branches are for. why don't you just use separate repositories instead?
17:02 < simb> Because we would end up with 7 different repsitories for a single project and that seems nuts.
17:03 < shesek> why is that nuts? creating repositories is cheap with Git, its just a filesystem directory
17:03 < simb> ideally I would setup my own npm server and when either was built I'd bump the version and then they could get updated.  But that seems like overkill for what I am trying to do.
17:03 < simb> I dont work alone.  so we have to have several repos hosted somewhere for each project.
17:03 < diverdude> How do i make this type of selection with jcrop? http://www.flotcharts.org/flot/examples/selection/index.html  (fixed height)
17:03 < happyface> what's the best way to execute 2 functions async, then wait until they are both done so their data can be combined?
17:04 < geNAZt> happyface, using async module
17:04 < geNAZt> :D
17:04 < happyface> geNAZt: oh, this looks awesome hehe thanks
17:04 < simb> shesek: based on on our project load so for this year a github platnum account wouldnt be suffiencent.
17:05 < simb> and there is no grouping of repos or anything in the ui.
17:05 < simb> Its true I am jamming an idea from svn into git. but its not much different than having a gh-pages branch in your code repo
17:06 < geNAZt-lapto> the laptop is back :P
17:07 < geNAZt-lapto> well you could use branches
17:07 < geNAZt-lapto> npm does seperate them
17:16 < beeant> how can i encrypt and decrypt string in node?
17:17 < geNAZt-lapto> crypto module
17:17 < beeant> i tried this one
17:17 < beeant> https://gist.github.com/csanz/1181250
17:17 < beeant> but it doesnt work
17:17 < beeant> TypeError: Not a buffer 
17:18 < geNAZt-lapto> not a buffer ? 
17:18 < geNAZt-lapto> oO
17:18 < beeant> ya
17:18 < beeant> 	var crypted = cipher.update(text,'utf8','hex') 
17:18 < beeant> this part
17:18 < beeant> line 23
17:19 < beeant> i mean column 23
17:19 < geNAZt-lapto> well it should work without any error
17:19 < beeant> really
17:19 < geNAZt-lapto> yes
17:20 < geNAZt-lapto> in my node version it works
17:20 < beeant> oh my text is undefined >.<
17:20 < geNAZt-lapto> lol :D
17:20 < keyosk> d6F3Efeq is the cyclical key in this gist?
17:21 < geNAZt-lapto> no its the password
17:22 < keyosk> Those functions should really be one line :o
17:22 < geNAZt-lapto> well it shouldnt
17:22 < geNAZt-lapto> and the helper function makes it a one liner
17:24 < beeant> still
17:24 < beeant> not a buffer
17:24 < geNAZt-lapto> well what is it ?
17:24 < geNAZt-lapto> it must be a utf8 string or a buffer
17:25 < beeant> oh now it s because its an int
17:25 < beeant> ...
17:26 < beeant> i have to toString()
17:26 < geNAZt-lapto> y
17:26 < beeant> how can i access function inside the same file
17:26 < beeant> like
17:26 < beeant> exports.aa = function()
17:26 < geNAZt-lapto> name it
17:26 < beeant> exports.bb = function() { aa}
17:27 < nlf> exports.aa() works fine too
17:27 < geNAZt-lapto> exports.aa = function aa();
17:27 < beeant> ok
17:27 < geNAZt-lapto> or exports.aa()
17:27 < geNAZt-lapto> but its ugly
17:27 < geNAZt-lapto> and you should name all your functions
17:27 < geNAZt-lapto> >> new Error();
17:27 < purr> geNAZt-lapto: (object) {arguments: undefined, stack: (Getter/Setter), type: undefined}
17:28 < geNAZt-lapto> >> new Error().stack;
17:28 < purr> geNAZt-lapto: (string) 'Error\n    at irc:1:6\n    at Sandbox.execute (/srv/irc/purr/lib/sandbox/v8/shovel.js:56:12)\n    at Object.exports.run (evalmachine.<anonymous>:386:12)\n    at Sandbox.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:45:38)\n    at Socket.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:27:13)\n    at Socket.EventEmitter.emit (events.js:117:20)\n  …
17:38 < leichtgewicht> I was wondering:
17:38 < leichtgewicht> NPM = Node.js Package Manager - right?
17:39 < geNAZt-lapto> yes
17:39 < leichtgewicht> what is the difference between a package and a module.
17:39 < leichtgewicht> ?
17:39 < geNAZt-laptop> well a module is anything that you can requrie
17:40 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:40 <@isaacbw> http://nodejs.org/api/modules.html
17:40 < geNAZt-laptop> a package is a "package" of modules, like socket.io, expressjs, crypto
17:40 < geNAZt-laptop> and so on
17:41 < leichtgewicht> Alright. Just wanted to make sure my understanding is correc.t
17:41 < leichtgewicht> Thanks
17:42 < geNAZt-laptop> anyone using ubuntu 13.04 ?
17:42 < oliveiraev> me
17:42 < geNAZt-laptop> its stable ?
17:42 < oliveiraev> ya, the engine
17:42 < oliveiraev> tried just ubuntu-gnome
17:42 < oliveiraev> really dislike unity
17:42 < geNAZt-laptop> well i use xfce
17:42 < geNAZt-laptop> :D
17:42 < geNAZt-laptop> dislike all big desktop things
17:43 < geNAZt-laptop> gnome and kde and unity
17:43 < geNAZt-laptop> fluxbox on debian <3
17:43 < geNAZt-laptop> :D
17:43 < oliveiraev> backed to mint
17:43 < geNAZt-laptop> y
17:43 < oliveiraev> used lxde for a long time
17:43 < geNAZt-laptop> also nice
17:44 < oliveiraev> then I've realized that the VM's are slow due to my IDE, not the desktop environment by itself
17:44 < oliveiraev> jumped to gnome to try 3.8 A little buggy yet... and now on Mint Nadia (12.10)
17:44 < geNAZt-laptop> well i like the minimalistic idea of xfce and lxde
17:45 < geNAZt-laptop> i used the gnome netbook thing alot
17:45 < geNAZt-laptop> but the gui sucks :d
17:45 < oliveiraev> actually, I guess my desktop simple/minimal
17:46 < geNAZt-laptop> even with gnome ? oO
17:46 < oliveiraev> Linux Mint, =)
17:47 < oliveiraev> auto-hidding taskbar + gnome-maximus-extension
17:47 < oliveiraev> the whole desktop for the 'on-top' application
17:47 < geNAZt-laptop> i use ~480 MB for XFCE with two desktops
17:47 < geNAZt-laptop> ram*
17:47 < beeant> ok i just finished one of the big page of my webapp
17:47 < beeant> so much speed improvements
17:47 < beeant> i dont know why
17:47 < geNAZt-laptop> its faster ?
17:47 < beeant> yes
17:47 < geNAZt-laptop> noticable ?
17:47 < beeant> much
17:48 < geNAZt-laptop> gj
17:48 < beeant> i dont know if my apache settings is bad on my local
17:48 < geNAZt-laptop> xampp ?
17:48 < oliveiraev> currently 1062MB. But A LOT of crap on background
17:48 < beeant> but at least i dont have to spend so much time on webserver optimization admin and all that
17:48 < beeant> im using mac
17:48 < geNAZt-laptop> oliveiraev, well 480 MB only the desktop :D
17:48 < beeant> i use macports
17:49 < geNAZt-laptop> 1327 MB overall
17:49 < beeant> macports apache
17:49 < beeant> workermpm
17:49 < beeant> i changed it to prefork though
17:49 < geNAZt-laptop> then its bad :D
17:49 < oliveiraev> geNAZt: I think that to discover I should reboot the system
17:49 < geNAZt-laptop> apache with bundled php is always bad
17:49 < beeant> node is faster
17:49 < beeant> so its ok i dont have to care about that anymore lol
17:50 < geNAZt-laptop> well nginx + php-fpm vs nodejs would be interesting
17:50 < oliveiraev> node is faster
17:50 < geNAZt-laptop> even on localhost ?
17:50 < oliveiraev> ya
17:50 < geNAZt-laptop> nice
17:51 < oliveiraev> v8 honors his name =)
17:51 < geNAZt-laptop> beeant, little tip, if you finished one page run ab on it
17:51 < geNAZt-laptop> to see if it is stable enough
17:51 < geNAZt-laptop> wroooooooom :D
17:51 < beeant> ab?
17:51 < oliveiraev> apache benchmark
17:51 < geNAZt-laptop> apache benchmark
17:51 < iksik> any ideas is it possible to create a proxy for mssql server, and intercept all sql quries?
17:51 < beeant> never done that
17:51 < geNAZt-laptop> a heavy load tool for http servers
17:51 < beeant> too lazy to setup those stuffs
17:51 < geNAZt-laptop> i think its bundled in mac os x
17:51 < oliveiraev> doesn't need to setup
17:51 < beeant> i will do that later maybe after i finished 
17:51 < oliveiraev> if u have httpd, u had ab
17:51 < beeant> but its so much faster
17:51 < oliveiraev> command -v ab
17:52 < geNAZt-laptop> ab -c 1500 -n 4 http://localhost/
17:52 < beeant> its just so much stable
17:52 < geNAZt-laptop> for a little test
17:52 < oliveiraev> iksik: queries ran *inside* a connection
17:52 < beeant> but i dont have the php version running
17:52 < geNAZt-laptop> you dont need
17:52 < beeant> i have apache running to serve other app though
17:52 < geNAZt-laptop> its for testing the node one
17:53 < iksik> oliveiraev: yean, a connection which should go thru proxy ;-P
17:53 < beeant> ab: Cannot use concurrency level greater than total number of requests 
17:53 < oliveiraev> beeant: if u can hit the address within a browser, u can hit it with ab
17:53 < geNAZt-laptop> apache benchmark doesnt need apache webserver
17:53 < iksik> yeah *
17:53 < geNAZt-laptop> it can run against any webserver
17:53 < beeant> my node is port 3000
17:53 < geNAZt-laptop> ab -c 1500 -n 4 http://localhost:3000/
17:53 < oliveiraev> iksik: then, u wanna to proxy the connection, not the queries
17:53 < beeant> ab: Cannot use concurrency level greater than total number of requests 
17:53 < beeant> why
17:53 < oliveiraev> iksik: proxy the known ports, 3360 and like
17:53 < geNAZt-laptop> ups
17:54 < geNAZt-laptop> ab -n 1500 -c 4 http://localhost:3000/
17:54 < geNAZt-laptop> sorry
17:54 < geNAZt-laptop> :D
17:54 < beeant> This is ApacheBench, Version 2.3 <$Revision: 655654 $>
17:54 < beeant> Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
17:54 < beeant> Licensed to The Apache Software Foundation, http://www.apache.org/
17:54 < beeant> Benchmarking localhost (be patient)
17:54 < beeant> apr_socket_recv: Connection refused (61)
17:54 < oliveiraev> lol
17:54 < iksik> oliveiraev: of course, but the main question is about getting these queries from connection, as far as i know these are not a plain text, right?
17:54 < geNAZt-laptop> :D
17:54 < geNAZt-laptop> does your node app crash ?
17:54 < beeant> no
17:54 < beeant> still running
17:54 < geNAZt-laptop> still serving ?
17:55 < iksik> oliveiraev: do You think some mssql lib for node, can help with that? (the protocol stuff or something)
17:55 < beeant> yes
17:55 < oliveiraev> iksik: maybe I'm not understanding ur environment.
17:55 < geNAZt-laptop> okay then the mac os x version of ab is bugged :D
17:55 < beeant> i think node is stable, in php when i refresh sometimes it gives me different speed
17:55 < beeant> node is just the same everytime i refresh
17:55 < oliveiraev> iksik: to make queries, u need a client. Or client implementation
17:55 < geNAZt-laptop> well in node this can also happen
17:56 < iksik> oliveiraev: some-big-app --- connection --- > proxy (intercepting and loggin all queries) -- connection --> mssql server
17:56 < oliveiraev> iksik: proxy sits between the connection
17:56 < geNAZt-laptop> some-big-app --- proxy --- connection --- browser
17:56 < geNAZt-laptop> for normal
17:56 < iksik> i don't want to make queries, i wan't to receive them and pass to the server
17:56 < oliveiraev> 192.168.0.1 runs node >>> 192.168.0.2 the gateway/proxy >> 192.168.1.254 mssql ?? 
17:57 < segomos_> iksik: still need a client
17:57 < geNAZt-laptop> ah its a vpn maybe ?
17:57 < iksik> eh ;-D
17:57 < geNAZt-laptop> since proxy change the package source
17:57 < geNAZt-laptop> which vpns doesnt do
17:57 < iksik> the problem is... regular mssql client will not behave as a server, to translate mssql protocol to pure sql query, right?
17:58 < iksik> so i need to decode it somehow, and THEN use a client to pass it to the server
17:58 < oliveiraev> lets set up an example. I've created the app to connect against mysql, using 1.1.1.:3306
17:58 < oliveiraev> u had the server 1.1.1.1 that grabs the connection and re-route to mssql, right??
17:58 < iksik> for now i have nothing, but yeah, as for example, it's okay :D
17:58 < oliveiraev> depending on proxy, that's all
17:59 < geNAZt-laptop> well why would you proxy to get to the database ?
17:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:59 < iksik> geNAZt-laptop: i want to grab all sql queries, which are sent from application to the mssql server
17:59 < iksik> it's a huge app with a huge database
18:00 < iksik> some kind of small proxy which can log all of these queries, will be much helpfull, while building webapp for this desktop software
18:00 < oliveiraev> " i want to grab all sql queries" that occurs within a tunnel
18:00 < geNAZt-laptop> but why do you need to grab them ?
18:00 < iksik> i want to see all dependencies from one table to another
18:01 < geNAZt-laptop> ah you want to rebuild a desktop app as a webservice ?
18:01 < iksik> i can't trace it just looking into database
18:01 < iksik> yup
18:01 < geNAZt-laptop> well you can use a normal tcp server to proxy them
18:01 < geNAZt-laptop> and log all packages that come in
18:01 < iksik> i was using very similar atitude with mysql
18:02 < iksik> geNAZt-laptop: uhm, and then translate it into quries?
18:02 < geNAZt-laptop> well i dont know how the mssql protocol sends of queries
18:03 < iksik> ok, so it's time to code... any module which can help with setting up tcp proxy?
18:03 < geNAZt-laptop> in mysql you can log the packages and read them as normal strings to see the query
18:03 < geNAZt-laptop> no
18:03 < geNAZt-laptop> its about 20-30 lines of code
18:04 < iksik> hm, hm
18:04 < iksik> ok ;-)
18:04 < geNAZt-laptop> does mssql use tls ?
18:04 < iksik> yes
18:04 < iksik> hmm i think so
18:04 < geNAZt-laptop> okay idea gone
18:04 < geNAZt-laptop> :D
18:04 < ForceBlast> Hi all.  Streams noob here.  Is there a way to close a stream before it reaches the end?  I'm using the "request" module and piping it through "sax" to parse an XML file.  The XML file is HUGE and I'd like to exit and terminate the stream once I have what I need from the XML file.  So I'm guessing I'd be telling request to close its stream once I get the nodes I need.  Any tips on how to pull this off?
18:06 < geNAZt-laptop> ForceBlast, just call stream.end() on the request
18:10 < ForceBlast> I'm creating my stream like this:  var parser = request(options).pipe(sax.createStream());   I tried calling parser.end() but that threw an error.   I think this is because parser now holds a reference to the destination stream.  I'll try breaking it out into separate calls and see if that works.  Thanks for your help.
18:11 < geNAZt-laptop> ForceBlast, use a second pipe between request and the sax parser to keep control of the stream flow
18:13 < geNAZt-laptop> or var res = request(options); res.pipe(sax.createStream());
18:13 < geNAZt-laptop> and do res.end() if you have all data you need
18:14 < geNAZt-laptop> but i dont know how the request module would react to this
18:17 < leostera_> Hi there guys
18:17 < ForceBlast> I'm trying your second suggestion now.  It's not throwing an error, but events are still continuing to fire on the destination stream.  So it must not e closing it.  I'll experiment with it a bit and see how it goes.  Thanks again!
18:19 < leostera2112> Hey anybody has a minute? I'd love to be able to set a NODE_PATH from within the app (or a grunt task) to be able to use require without a the ../../ clutter
18:20 < jerrysv> good morning
18:20 < leostera2112> morning jerrysv 
18:23 < oliveiraev> ForceBlast: SaxParser has an .end() method. Dunno on dealing with pipes, but the logic follows:
18:24 < oliveiraev> stream = sax.createStream(); stream.end();
18:24 < geNAZt-laptop> oliveiraev, but this doesnt get piped back to request
18:24 < oliveiraev> stream.end() should halt the connection
18:24 < geNAZt-laptop> so the stream in sax would end but the request module would keep pressuring
18:25 < oliveiraev> geNAZt: he should deal with SaxParser events, so
18:25 < oliveiraev> geNAZt-laptop: he should deal with SaxParser events, so
18:27 < geNAZt-laptop> oliveiraev, the pipe implementation doesnt include sending the end event back to the source stream
18:27 < geNAZt-laptop> only from source to dest stream
18:29 < oliveiraev> not at pipe, at sax. If I understood correctly, he's sending an SaxParser object through a pipe
18:29 < geNAZt-laptop> no not through the pipe
18:29 < geNAZt-laptop> it is the dest of a pipe
18:29 < oliveiraev> cat myHUGE.xml | node myScript.js ???
18:29 < ForceBlast> Ending the request stream doesn't seem to work.  Even after calling req.end() I continue to get parser.on("text"…) events. (parser is a sax.createStream stream)  I might try putting a stream in the middle like you initially proposed though I'm still unsure why it's not working.
18:30 < geNAZt-laptop> i dont think the request module does support ending the response manually
18:31 < geNAZt-laptop> maybe in this case it is better to use the normal nodejs hhtp module
18:31 < supernaut_> can someone help me with a v0.10 fs.readStream question?
18:31 < ForceBlast> Yeah, It's starting to look that way.
18:32 < ForceBlast> Thanks again for all of your help.
18:32 < geNAZt-laptop> supernaut_, just ask
18:32 < geNAZt-laptop> ForceBlast, no problem
18:33 < leostera2112> Hey guys, I'd love to be able to set a NODE_PATH from within the app (or a grunt task) to be able to use require without a the ../../ clutter
18:34 < supernaut_> ok. i am trying to figure out how to read a file and parse it in chunks. is there a way to do by overwriting the _read method only?
18:34 < geNAZt-laptop> leostera2112, process.env.NODE_PATH = 'new path';
18:34 < leostera2112> geNAZt-laptop: and that's supposed to let me do a require, just after that, that searches the lib in that new path, right?
18:35 < geNAZt-laptop> leostera2112, i dont know but this changes the NODE_PATH
18:35 < geNAZt-laptop> inside your app
18:35 < leostera2112> right, but require is being instantiated before that NODE_PATH has changed
18:35 < geNAZt-laptop> yes
18:35 < leostera2112> I can see how that could become a security issue, like it was before with require.paths
18:35 < geNAZt-laptop> the require does work relative to your current files dirname
18:36 < geNAZt-laptop> so i dont think you can change that
18:37 < leostera2112> so how would you go for an alternative that sets NODE_PATH appropriately and is portable?
18:37 < geNAZt-laptop> well i wouldnt try
18:37 < leostera2112> should I just fall back to a node script that checks the OS, calls a bat or a sh?
18:37 < leostera2112> for setting a project up I mean
18:38 < leostera2112> then I would have to change NODE_PATH for every project I'm working on every time I switch
18:38 < supernaut_> my hope is to get the read method that create to execute everytime the underlying file is altered.... right now that is not happening
18:38 < oliveiraev> leostera2112: You should rely, basically, on two scopes: project and global. Node will manage it for you
18:39 < oliveiraev> declare project dependencies and you wont need to check the paths
18:40 < leostera2112> oliveiraev: so the convention for wanting to use my lib from within my project is to either suck it and use require("./../../../path/clutter") OR make a node_module for it?
18:41 < owen1> how to use forever for non-node apps? for example, i need to run this "shotgun --server=thin --host=0.0.0.0 --port=3000 config.ru"
18:42 < leostera2112> owen1: use forever -c yourCommand
18:42 < oliveiraev> leostera2112: ya. node_module is the best approach. was implemented this way to freeze dependencies on given versions
18:42 < shesek> leostera2112, you can link a directory in node_modules to your app root directory
18:42 < leostera2112> shesek: this is something I have yet to try
18:42 < leostera2112> shesek: thanks
18:43 < shesek> ln -s .. node_modules/app
18:43 < shesek> than require('app/foo/bar')
18:43 < supernaut_> it appears that once the end() is called on the readable Stream I can move past that
18:43 < supernaut_> is it possible to prevent the end() method from being called?
18:43 < leostera2112> oliveiraev: I'm not talking about npm or 3rd party modules, I manage those fine and I get the idea. thanks
18:44 < Daniel_zz> Hey ppl. I try "npm uninstall -g grunt" and I get "npm WARN uninstall not installed in C:\Users\D...." why is that? is it something with ENV variable ? help plz.
18:44 < oliveiraev> supernaut_: overwrite it :S
18:44 < Daniel_zz> grunt is installed...
18:45 < supernaut_> overwite the end?
18:45 < supernaut_> or the read?
18:45 < oliveiraev> supernaut_: end. Care about scope and instances. Dont rewrite the module.end, but the instance.end method.
18:50 < supernaut_> oliveiraev: do you have an example overwriting the instance.end?
18:50 < owen1> leostera2112: when i run forever -c /home/t/rvm/gems/ruby-1.9.2-p290@cba/bin/shotgun --server=thin --host=0.0.0.0 --port=3000 config.ru   it's stuck there forever and my app is not available
18:50 < owen1> leostera2112: while this /home/t/rvm/gems/ruby-1.9.2-p290@cba/bin/shotgun --server=thin --host=0.0.0.0 --port=3000 config.ru                       is working fine
18:52 < leostera2112> owen1 I have used forever with -c and python and it worked just fine
18:54 < owen1> leostera2112: interesting. thanks
18:54 < oliveiraev> supernaut_: just got the docs. .end isn't a method, but an event.
18:57 < supernaut_> hmmm
18:58 < owen1> leostera2112: forever start -c thin start   is this the correct syntax?
19:00 <@MI6> joyent/node: Daniel Moore v0.10 * 3b6fc60 : stream: make Readable.wrap support empty streams (+1 more commits) - http://git.io/6txKsA
19:01 < leostera2112> nope
19:01 < leostera2112> owen1: forever start -c command
19:01 < leostera2112> oh, my bad
19:04 < owen1> leostera2112: ?
19:05 < leostera2112> owen1: forever start -c thin start
19:06 < owen1> leostera2112: script /usr/local/nextgen/Category-Based-Attributes/source/start does not exist.
19:08 < leostera2112> owen1: I can't really know what's going on ion you complete environment. Do you think you could replicate the issue in a  minimal way? Just a few gists so I can clone, bundle and run.
19:08 < owen1> https://github.com/nodejitsu/forever/issues/207
19:08 < owen1> it seems like a common issue....
19:09 < leostera2112> that made sense
19:10 < leostera2112> I had used virtualenv so I had a locally available python
19:10 < leostera2112> and when I used it with nodemon
19:10 < leostera2112> I had it locally installed as well
19:10 < leostera2112> can you try installing thin locally?
19:10 < owen1> even this fails forever start -c /home/t/rvm/gems/ruby-1.9.2-p290@cba/bin/thin start
19:11 < leostera2112> can you use a --verbose flag?
19:11 < leostera2112> brb
19:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:23 < mkozjak> where can bug reports be filed? i've found out a problem with sqlite3 on 0.10.x
19:24 < nathan7> mkozjak: on the sqlite module's bug tracker.
19:24 < mkozjak> ok
19:24 < nathan7> probably GitHub issues.
19:29 < Eddie_> hola
19:30 < Eddie_> I need an open source chat application that can support messaging from 2000 or more people - any ideas?
19:31 < samholmes> Wasn't there a site that could redirect you to a localhost?
19:32 < aandy> http://xmpp.org/xmpp-software/servers/ ? https://github.com/astro/node-xmpp
19:32 < aandy> ah, he left
19:33 < owen1> leostera2112: forever start --verbose -c /home/t/rvm/gems/ruby-1.9.2-p290@cba/bin/thin start  => v0.10.7  and i don't even know what this version is.
19:36 < AAA_awright> merpnderp: Presumable if your HTTP session is secure, and your websocket is secure, then your application would be secure, but that's a big if, you have to request a session token to authenticate to the websocket, and then ensure only authorized requests can go to the websocket
19:36 < AAA_awright> It's also sort of begging the question
19:38 < domino14> hey guys, need help with a really simple question. i forked this repo: https://github.com/theSmaw/Caja-HTML-Sanitizer/blob/master/sanitizer.js and now i'm just trying to test a couple of changes i made in sanitizer.js
19:38 < domino14> i can't figure out how to load sanitizer.js from the node REPL.. require('sanitizer') doesn't work; how do i "load" this js file?
19:40 < merpnderp> AAA_awright: I just don't see how persistent auth cookies can be safe. If a user is currently connected to mysite.com but opens a tab to badsite.com, and badsite.com forges its domain header and does an <img src="http://mysite.com/login /> and then later does an <img src="http://mysite.com/do/something/evil" />, how you could keep that from happening.
19:42 < AAA_awright> merpnderp: They're not! Well, they're safe for GET requests, that's it.
19:43 < AAA_awright> That's the semantics of cookies, that's how they work
19:43 < merpnderp> AAA_awright: Ah, I see. Good point. Something I'd overlooked, but I would have never had /login do an authentication from a GET. 
19:43 < merpnderp> GET /login would always return the login template.
19:44 < AAA_awright> You can do that without a session so what do you mean?
19:44 < AAA_awright> For granting permissions, a token in a cookie must only grant read permissions
19:44 < AAA_awright> Including, if you desire, the ability to request a read/write token to submit forms with
19:46 < merpnderp> AAA_awright: So a user has a persistent auth cookie. They visit mysite.com /index  which sees they have an auth cookie with the correct series and token. They are then granted a session cookie which allows them to open the SPA and a socket. Is that the correct way to do it?
19:47 < AAA_awright> merpnderp: Sounds about right
19:47 < merpnderp> Because if it, I don't see how that is different than http://badsite.com having an image tag with forged headers like <img src="http://mysite.com/index" /> which should then give badsite.com's loaded page a session cookie to mysite.com.
19:48 < AAA_awright> badsite can't actually read the headers that you sent out, and it can't read the response unless authorized in the return headers
19:48 < merpnderp> AAA_awright: You've been a ton of help. Thank you.
19:49 < AAA_awright> Thanks ^_^
19:49 < merpnderp> I knew there had to be a safe way to do this or every bank session would be compromised :P
19:50 < AAA_awright> The big lesson is we have to stop thinking of tokens as a methanism to merely identify users and also use them to authorize actions. Not just to secure sessions, but maybe I want to request a token that let's a third party read my address book, that I can hand out, so they can perform actions on my behalf. It's not just more secure, it's more useful for the Web.
20:14 < gbit86> I need some assistance
20:15 < gbit86> for debugging purposes I need to know how to disable certain SSL ciphers on my ubuntu server (client side, this is not hosting the SSL connection! It is acting as the client and connecting to a server via SSL elsewhere!)
20:16 < gbit86> Does anyone have any ideas on how or where I might need to go in ubuntu 12.04 that will allow me to disable certain SSL ciphers
20:16 < gbit86> I know the server on the other end supports weaker SSL ciphers as I have down this in firefox with great success, but I need to know how to do this inside linux as well
20:17 < AAA_awright> I have someone complaining that my index.js symlink isn't appearing in my bundled npm package, anyone know how to fix this?
20:18 < syskk> damn it
20:18 < syskk> im getting a bunch of cookie errors with the request module
20:23 < nathan7> AAA_awright: npm does not do symlinks.
20:23 < nathan7> AAA_awright: they're not portable.
20:23 < AAA_awright> nathan7: It bundles it up in a tar, every computer and their mom can read that
20:24 < dypsilon> What are you using to daemonize your services? I would go with upstart, but I can't because I don't want to replace system v. Is there some other good process superviser which plays well with system v?
20:25 < nathan7> AAA_awright: I repeat, we do not pack symlinks.
20:25 < nathan7> AAA_awright: They are explicitly left out.
20:25 < nathan7> AAA_awright: They are not portable. Windows.
20:25 < AAA_awright> nathan7: That's begging the question, why
20:25 < AAA_awright> nathan7: Windows can read symlinks, I use them all the time
20:26 < AAA_awright> In Node.js I might add
20:26 < AAA_awright> Even if it couldn't, tar still supports the format like I said
20:27 < nathan7> "They're not portable, and npm has to be portable."
20:27 < nathan7> --isaacs
20:28 < AAA_awright> What a great way to say absolutely nothing
20:28 < AAA_awright> nathan7: Why
20:29 < nathan7> AAA_awright: https://github.com/isaacs/npm/issues/3310
20:30 < nathan7> AAA_awright: Feel free to make a fuss about it in there, I guarantee you will make absolutely nothing happen and perhaps slightly annoy isaacs.
20:30 < AAA_awright> Oh boo hoo, isaacs might be wrong
20:31 < AAA_awright> Yeah, being wrong can get annying
20:31 < geNAZt> well to argue about something like that doesnt make much sense
20:31 <@Nexxy> AAA_awright, constantly acting like an asshole in IRC can get annoying too
20:31 <@Nexxy> the people you're talking to deserve some respect.
20:32 <@Nexxy> grow up or find another community of hard working individuals to shit all over please
20:32 < AAA_awright> Nexxy: I'm the one trying to make reasoned, well rounded arguments and everyone else is like "Fork it if you don't like it" or "I'm the dictator and I say so"
20:32 <@Nexxy> "Boo hoo" is very reasoned.
20:32 <@Nexxy> for elementary school perhaps
20:32 <@Nexxy> this is a community support channel full of adults
20:32 <@Nexxy> (and young people that still know how to be respectful)
20:32 <@Nexxy> please consider changing your attitude
20:32 < AAA_awright> Nexxy: The argument stands on its own without the "boo hoo" comment, but nonetheless that's what he does
20:33 -!- AAA_awright was kicked from #Node.js by Nexxy [AAA_awright]
20:33 < pachet> so anyway go grizz
20:38 < dypsilon> What are you using to daemonize your services? I would go with upstart, but I can't because I don't want to replace system v. Is there some other good process superviser which plays well with system v?
20:39 < aandy> daemonize how, restarting/make sure is running? or daemon in inetd/apache lingo?
20:40 < aandy> i usually go with https://github.com/nodejitsu/forever
20:40 < aandy> if you mean the former
20:40 <@isaacs> AAA_awright: please be nice.
20:40 <@isaacs> AAA_awright: We don't pack symbolic links in npm packages, because it's always a bad idea.
20:41 <@isaacs> AAA_awright: npm is not tar, and it is not git.  if you want the behavior of tar or git, use those tools.
20:41 <@isaacs> AAA_awright, nathan7: fwiw, the portability issues have more to do with symbolic links to /home/username/blarh rather than Windows, at least, since 0.6.19 or so
20:42 < AAA_awright> isaacs: That's a nice phrasing but it doesn't really follow. Symlinks carry certain semantics and instead of applying those semantics, npm disregards it entirely
20:42 <@isaacs> AAA_awright: yes, that is corerct.  and it warns you to tell you that it's excluding your symbolic links from the package.
20:42 <@isaacs> AAA_awright: thsi is not going to change.  sorry.
20:42 < dypsilon> aandy, in init.d lingo
20:43 < dypsilon> aandy, forever seem great, probably I will mix it with init.d
20:43 < AAA_awright> isaacs: If you want to fine, but that doesn't make it right, or jut, or correct
20:43 < AAA_awright> *just
20:43 <@isaacs> AAA_awright: "just"?
20:43 < AAA_awright> The noun form of justice, yes
20:43 < aandy> dypsilon: good choise. you can interact with stop, restart etc, they work similar to what init.d is usually for
20:44 <@isaacs> AAA_awright: it's not like we're deying you the right ot ride on teh bus here, dude.  it's a tradeoff, and we've made our choice, in a way that serves the interests of npm's stability and the node ecosystem.
20:44 <@isaacs> AAA_awright: Please take your attitude down a notch.
20:44 -!- Nexxy changed the topic of #Node.js to: - http://nodejs.org  -
20:44 <@Nexxy> erm
20:44 <@Nexxy> irssi fail
20:44 <@isaacs> AAA_awright: If you find that the injustice of denying symbolic links from your packages is intolerable, then you are welcome to create your own package manager.  the source is open.
20:44 < dypsilon> aandy, thanks
20:45 < AAA_awright> isaacs: You haven't demonstrated there's any trade off. On the chance there is a platform that doesn't support symlinks natively as packaged in tar, you can still preserve the semantics instead of throwing the baby out with the bathwater
20:45 -!- Nexxy changed the topic of #Node.js to: Developer Justice - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
20:45 <@isaacs> AAA_awright: I've said, it's not about any platforms that don't support symbolic links.  Though, the semantics ARE quite different on windows than on unix.
20:45 <@isaacs> AAA_awright: It's about reducing complexity.  I don't have time to rehash every technical decision I make every time someone disagrees with it.
20:46 < aandy> whatever happend to "this system can't do what i want, so i'll work around it" or "this system can't do what i want, i'll contribute to change it if i'm right"  vs. "this system can't do what i want. they're wrong"
20:46 <@isaacs> AAA_awright: I would like you to understand, however, that I don't have any personal vendetta against you or against symbolic links, and I don't make capricious choices with respect to npm or node.
20:48 < AAA_awright> isaacs: Complexity where? The point of the package manager is to reduce complexity on the part of the package maintainer, to take on any complexity so they don't have to. Ignoring symlinks seems contrary to this goal.
20:49 <@isaacs> AAA_awright: Interesting.  so you believe it's my problem.
20:49 <@isaacs> AAA_awright: that npm should let you do anythign you imagine you ought to be able to do?
20:49 < AAA_awright> npm is designed to solve problems, is it not?
20:49 <@isaacs> AAA_awright: hahahah
20:49 <@isaacs> AAA_awright: it's designed to solve a few specific problems.
20:49 < AAA_awright> Specifically, package management problems
20:49 <@isaacs> AAA_awright: one of those is encouraging developers to release portable software, which can be used by most/all node users.
20:50 <@Nexxy> isaacs, I have to admit... I'm a little disturbed by npm's lack of ability to pull shots of espresso for my team
20:50 < jerrysv> isaacs: i want npm to make me coffee every morning (without having to install and build mbalho's coffee maker)
20:50 <@Nexxy> WHICH IS WHY SOMEONE AT NINJABLOCKS WROTE CODE TO DO IT!
20:50 < jerrysv> Nexxy: gah, you were faster than me
20:50  * Nexxy blows the smoke from her fingertips
20:50 <@isaacs> AAA_awright: in this case, npm is in fact *solving* the problem of "people releasing packages with symlinks that work on thier machine and nowhere else"
20:50 < AAA_awright> Nexxy: I didn't qualify that with "solve worldly problems" or anything of the sort but this is EXACTLY the same snarky comment I'm complaining about that I'm asking to stop
20:51 <@isaacs> AAA_awright: and the problem of "in order to figure out what's going on in this package, i have to dig through a maze of symbolic links"
20:51 < aandy> Nexxy: i tried # npm install coffee, but very different results :(
20:51 <@isaacs> AAA_awright: and, i might add, solving that problem *remarkably* elegantly!
20:51 <@Nexxy> aandy, http://ninjablocks.com/blogs/news/7061118-dial-o-spresso-a-phone-controlled-coffee-machine
20:51 < jerrysv> mbalho: i thought you managed to grab the "coffee" npm module?
20:51 <@isaacs> Nexxy, aandy: patch welcome!
20:52  * Nexxy on it
20:52 < aandy> Nexxy: ooh yeah. or just any robotics for my current work would be nice
20:52 <@isaacs> Nexxy: actually, that probably doesn't belong in npm, but there should definitely be a module in npm to do this.
20:52 <@Nexxy> agreed
20:52 < aandy> they're all creative types, so it's this stupid machine where you have to prepare, grind, wait 20 mins for one shot
20:53 < aandy> no button for I WANT COFFEE NOW
20:53 < aandy> i checked
20:53 <@Nexxy> robots are the answer
20:53 <@isaacbw> robots are always the answer
20:53 < wolfeidau> +1 for robots
20:56 < aandy> my dep are shopping for equipment like thermal cameras right now. maybe i should ask for some audio equipment. hook up a node module for detecting sighs and issuing espresso shots
20:57 <@Nexxy> aandy, you could do something with body temp too!
20:57 < aandy> you get cold when you get depressed? well, that'd make sense i guess
20:57 < kenperkins> who's going to fluent
20:57 < aandy> or hot for rage?
20:57 < aandy> lol
20:57 <@Nexxy> aandy, or when you're sleepy, I think
20:58 <@isaacbw> I would love a realtime productivity monitor
20:59 <@isaacbw> and sets off a "coffee" alarm if my productivity drops too low
21:00 < aandy> polling rescue time like a maniac might do that
21:00 < aandy> but i'd be interested in alternatives
21:02 <@isaacbw> maybe frequency of edits in your source tree
21:03 < garthk> If at first you don't succeed, well, so much for object streams.
21:04 < simb> isaacs: I have a project that depends on two branches of the same repository. I can define them, but updates error because they try to cache in the same folder. Is there some trick I can use to get them to cache separately?
21:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:08 < sQuijeW> hello
21:09 < sQuijeW> anyone run through the node beginner tutorial book before?
21:09 < sQuijeW> hello?
21:11 < aandy> it's probably easier to ask about your problem than to narrow down replies to people who've read that book :)
21:11 < Fuzzyma> Is there a way to send a FormData-Object with socket.io?
21:12 < sQuijeW> touche andy
21:12 < sQuijeW> i am getting an error when i am trying to upload an image
21:12 < sQuijeW> generic message "events.js: 72 throw er; //unhandled 'error' event
21:13 < sQuijeW> enoent, open 'c:\tmp\xxxxxxxxxx
21:13 < aandy> file doesn't exist
21:14 < sQuijeW> could it be because the name is wrong?
21:14 < sQuijeW> name of the image im trying to upload*
21:16 < aandy> easily. check if the actual file exists in c:\tmp
21:16 < sQuijeW> i dont have a tmp folder
21:16 < sQuijeW> i have temp folder
21:16 < aandy> a quick search shows you're not the first to have "not found" issues with that book, so could be a missing step
21:16 < sQuijeW> i changed all the paths in the application to /temp
21:16 < aandy> right -- or change C:\temp to C:\tmp
21:16 < sQuijeW> yea, i was reading some of those
21:17 < aandy> either way will do
21:17 <@isaacs> simb: you mean, depending on user/project#branch-1 and user/project#branch2 in the same package?
21:17 <@isaacs> simb: no.  split it up.
21:17 < sQuijeW> k thanks, will test
21:17 < sQuijeW> thanks aandy
21:17 < aandy> np, welcome to node :)
21:17 <@isaacs> simb: or split up the main package into two or more deps, which use the different branches
21:18 <@isaacs> simb: { "name":"foo-branch-2","version":"1.2.3","dependencies":{"foo":"git://github.com/user/project#branch2"}}
21:18 <@isaacs> simb: then in index.js, do module.exports=require('foo')
21:18 < sQuijeW> it just worked for me. i did not think to create a new folder "tmp".. duh.
21:19 < sQuijeW> im excited to learn about this
21:19 < sQuijeW> .net background just out of school, so testing the waters and see where i want to go with all this stuff
21:19 < aandy> sQuijeW: it's probably a step the book should've mentioned :)
21:20 < simb> isaacs: I have a desktop and mobile version of an app. I am using ci to build a package and deploy to the clients server the.  So I have a project that includes the #master and #mobile private repository urls.
21:20 < aandy> habitus. the more tools you know, the better tool you'll find for the job. the rest is just code style preferences
21:20 < simb> isaacs: this is an attempt to not need my own npm server. I am using npm like a privagte artifactory for our project.
21:21 <@isaacs> simb: i see.
21:21 < jackcviers> simb: it isn't that difficult to set your own npm server up.
21:21 <@isaacs> simb: maybe just have two different packages
21:21 < jackcviers> simb: hardest part is the replication of the public registry.
21:21 < simb> isaacs: the cache mechanism uses the url and the sha has but not the branch. So it updates one and then errors on the second because the cache is not at the version it thinks it should be
21:22 <@isaacs> simb: what version of node?
21:22 <@isaacs> simb: er, what version of npm
21:22 < simb> 1.2.x
21:22 < nathan7> that's not very specific
21:22 < simb> I setup the server last week on ec2
21:22 < simb> let me check :)
21:23 < simb> 1.2.18
21:26 < Jordan1> anyone know if it's normal for node's memory usage (rss) to increase with every request?
21:27 < havvy> Jordan1: No.
21:27 < havvy> You might have a memory leak.
21:27 < Jordan1> even on a hello world express app, hitting the page over and over causes memory usage to grow (though it seemed to stop after a point...)
21:29 <@isaacbw> how much is it when it stops
21:29 < Jordan1> last time i tried it with a hello world it went up to 50mb and then just stayed there
21:30 < Jordan1> on my app it seems to go forever, but looking at the v8 heap and garbage collection I haven't detected any leaks...
21:35 < Voting> How do I kill forever if it has gone wild? It says No index for server.js...
21:35 < Voting> and I don'tknow how to kill it any longer!
21:35 < Voting> (I'm new to forever)
21:37 < aandy> # killall forever
21:38 < aandy> (or similar)
21:39 <@isaacbw> Voting: that doesn't seem too bad
21:39 <@isaacbw> oops, Jordan1 
21:39 < aandy> heh
21:40 <@isaacbw> the web is so boring. I wish websites were just curses applications on ssh hosts
21:41 < aandy> # ssh isaacbw@home links ? :)
21:42 <@isaacbw> who clicks links
21:43 < dypsilon> looking at the issues of forever i'm not sure if i should use it in production, do any of you have good experience with forever + forever-monitor in production?
21:46 < AAA_awright> isaacbw: At least then everything would be secure
21:46 < AAA_awright> You know, unlike SSL/TLS
21:46 < AAA_awright> (I'm a little bit bitter after trying to install an SSL certificate, can you tell?)
21:47 <@isaacbw> lol
21:47 < sinclair> hi everyone
21:50 < aandy> well, if it isn't le sinclair. hey
21:50 < mscdex> typescript.js!
21:51 < aandy> what happend to the node rocks script (i haven't been here in a while)
21:51 <@isaacbw> that was a script?
21:51 < mscdex> huh?
21:51 < mscdex> was that like a pet rock with the node.js logo on it?
21:52 < aandy> or compulsory announcement
21:52 < aandy> no way to tell for sure
21:52 < mscdex> dun dun dunnnn
21:53 < mscdex> oh great, ubuntu is developing their own package format now
21:53 <@isaacbw> oh ubuntu
21:53  * M2Ys4U facepalms
21:53 < zomg> noobuntu
21:53 < zomg> is what we call it
21:53 < zomg> =)
22:07 < lamalex> hello node people! i am having a problem with jade i was hoping one of ya'll could help with. ive got a controller that returns a bunch of embed tags for youtube videos but theyre just showing up as text with the tags and all. i want them to be html!
22:08 < lamalex> if someone could please help me i'd be very appreciative! https://gist.github.com/lamalex/5543831
22:08 < lamalex> i was trying to use jquery to append it, but the databinding in angularjs isn't playing well with jade
22:08 < lamalex> anyone tried to do something like this before?
22:09 <@isaacbw> your jade will be compiled to html before the server sends it
22:10 < Voting> aandy: Thx!! "sudo killall node" worked. We use some cool script around here...
22:10 <@isaacbw> trying to mix server-side rendering with an opinionated clientside rendering framework like angularjs is going to be a huge mess
22:10 < lamalex> isaacbw: is that to me?
22:11 <@isaacbw> yes
22:11 < aandy> Voting: that'll wipe out all node processes though ;) you might want to kill the forever instance itself if you have other node services
22:11 < lamalex> im not married to any way of doing things, but this rss feed is giving me a bunch of tags, and i want them to be html not text
22:11 < lamalex> how i get there is beside the point. is it possible with angular?
22:11 < Voting> aandy: I'll get good at using this script eventually
22:11 < Jordan1> lamalex:  I think you just need to tell Jade not to escape that
22:12 < Jordan1> lamalex:  I don't use jade so I'm not sure the syntax for that
22:12 <@isaacbw> lamalex: what I am saying is that using jade is irrelevant
22:12 < Voting> for right now... aandy, I was freaked out because my changes were NOT showing up in my browser. That was killing me. 
22:12 <@isaacbw> by the time it gets to the client it's html
22:13 < havvy> >> [[1, 2], [3, 4], [5, 6]].reduce(Array.prototype.concat.bind([]))
22:13 < purr> havvy: (object) [1, 2, 3, 4, 1, [1, 2], [3, 4], [5, 6], 5, 6, 2, [1, 2], [3, 4], [5, 6]]
22:13 < aandy> Voting: you might want to just run one instance in development to check against before production. you'll gain nothing from jumping through needless hoops :)
22:14 < lamalex> isaacbw: do you mean "by the time it gets to client it's text"?
22:14 <@isaacbw> um, no
22:14 < Voting> aandy: not sure I understand what you are saying
22:14 <@isaacbw> jade is compiled into html
22:15 <@isaacbw> html is a text format though, so I'm quite sure what you're saying
22:15 < aandy> i mean, if you're testing out new code, just run # node <your appe>.js, rather than putting it through forever with start/restart to debug
22:15 < Jordan1> lamalex:  {{video.content}} is the html correct?
22:15 < Jordan1> in your jade template?
22:15 < aandy> and disable cache in your browser. that's my default mode when working on some web code :)
22:15 < lamalex> Jordan1: that's angularjs databinding
22:16 < Jordan1> ah okay, I'm not familiar with angular
22:16 < lamalex> which is giving me a bunch of <iframe width="400" height="300" src="http://www.youtube.com/embed/lkH-KMPYVKc?wmode=transparent&amp;autohide=1&amp;egm=0&amp;hd=1&amp;iv_load_policy=3&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;showsearch=0" frameborder="0" allowFullScreen=""></iframe><br><br><p>If and It playing Streetlights &amp; Fireflies at Anderson St. on December eighth, two thousand and twelve.</p>
22:16 < lamalex> which jade is displaying like that, as text on my html page
22:16 < Jordan1> where is the jade template?
22:16 <@isaacbw> jade is escaping the html
22:17 < Jordan1> in jade you use ! to tell it not to escape things apparently
22:17 < Jordan1> ie !{{myVar}}
22:17 < lamalex> :P now it prints it with a ! in front of it :P
22:18 < Jordan1> well i don't know how angular works but either jade or angular are escaping it 
22:18 < Jordan1> just search the docs for escaping, it should be an easy fix
22:19 < lamalex> :) you'd think
22:19 < aandy> whenever i # git init, about three languages escape. screw you, pal, you're on your own. and i'm like whoah, relax
22:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:21 < roramirez> hello 
22:25 < roramirez> i have a problem with jugglingdb + postgresql. My code is and result http://pastebin.com/aJvdvvNM  . the server gets the query, but i dont know what happend. My server PostgreSQL is 9.1 and Node v.0.10.2. Anybody can help me ?
22:27 < Voting> How good is https://github.com/dannycoates/node-inspector ? Is there anything better if I want to be able to evaluate expressions, set break points, etc. on my server code?
22:29 < jamund> Voting, I'm a bit out of touch with the latest & greatest, but I think it's still the best thing for this.
22:29 < Voting> jamund: do u use it?
22:29 < jamund> I used it the other day to help catch a bug.
22:29 < jamund> Its' really slow & buggy though (and amazing)
22:30 < Voting> jamund: worked for u?
22:30 < jamund> Yeah man, I mean I found I had to be patient. 
22:30 < jamund> The files weren't loading right away, I'd have to re-fresh & reload a bit, but it eventually came up
22:30 < havvy> If you are willing to spend cash, there's tracejs.com
22:31 <@isaacbw> spending cash is my favorite thing to do
22:32 < havvy> isaacbw: Is that why npm asks for my credit card?  :P
22:32 < Voting> I can't find tracejs.com 
22:32 < havvy> https://trace.gl/ Sorry
22:33 < Voting> https://github.com/chrisdickinson/tracejs this one is free...
22:33 < Voting> anyone USED https://trace.gl/ ? 
22:36 < jamund> haha the tooling isn't exactly there yet for web-programming in general :)
22:36 < Voting> The https://trace.gl/ guy only wants $15!! Hardly a bib expense.
22:38 < jamund> It's doesn't offser step-through debugging though
22:38 < jamund> I mean, it's rad
22:38 < roramirez> anybody can help me? 
22:40 < jamund> what do you need help with?
22:43 < roramirez> jamund: thanks for your reply,  i have a problem with jugglingdb + postgresql. My code is and result http://pastebin.com/aJvdvvNM  . the server gets the query, but i dont know what happend. My server PostgreSQL is 9.1 and Node v.0.10.2. that I can be doing wrong?
22:43 < jamund> I've never used JugglingDB, but I've used Resourceful, maybe they're similar
22:44 < jamund> Oh, I know what's wrong
22:44 <@MI6> joyent/libuv: Miroslav Bajtoš v0.10 * 2c21050 : test: add RETURN_SKIP and RETURN_TODO macros - http://git.io/fk8suA
22:47 < jamund> I think you're missing that the calls are asynchronous and expect callbacks. I could be wrong, but some of this code looks really not-node-like:
22:47 < jamund> http://pastebin.com/5QrReiyh
22:48 <@MI6> joyent/libuv: Ben Noordhuis master * ce580cc : Merge remote-tracking branch 'origin/v0.10' (+4 more commits) - http://git.io/MkLd1g
22:51 < roramirez> thank jamund, now is working, i am really new nboob, thanks
22:52 < jamund> Np, node forces you to think about coding differently.
23:03 < fayimora> Hey guys, how do I install a package from github? The package exists on npm but I want the latest from master on github
23:03 < garthk> The good news is that isaacs thinks I can stop punching myself in the head. Unfortunately, "punching myself in the head" in this case is trying to use back-pressure with object streams and pipelines through transforms. I can have throughput, but only if I give up backpressure or memory control. https://github.com/joyent/node/issues/5429 
23:03 < garthk> fayimora: in packages.json, change the version string to a git:// URL.
23:04 <@isaacbw> or 'npm install <git url>'
23:04 < fayimora> garthk: oh ok thanks.. For a global package, should i change it in ~/lib/node_modules ???
23:04 < garthk> Or, an http:// link to a tarball, which you can get for any tag in the repo. Click "tags" (upper right); then copy the URL of whichever tarball you want.
23:04 < s_e> npm is like magic fairy dust
23:05 < garthk> fayimora: global? I have no idea. Try 'npm install -g http://example.com/tarball.tar.gz' and see what happens.
23:06 < garthk> If you're installing globally just to get a script, stop doing that and look in node_modules/.bin/
23:08 < fayimora> garthk: yaay thanks.. I think the reason it wasn't working previously was because I was using https and not git protocol
23:35 < lamalex> hi, in an attempt to clear out a learning variable i want to ditch jade and just use html
23:35 < lamalex> seems simple, but googling is just giving me what is mumbo jumbo to me, can anyone help?
23:35 < lamalex> im getting cannot find module html
23:35 < lamalex> ive already got an express generated app and am trying to strip out jade
23:36 < lamalex> any tips?
23:36 <@isaacbw> lamalex: are you trolling?
23:36 < lamalex> no dude i am just a lost soul
23:37 <@isaacbw> html isn't a module. https://en.wikipedia.org/wiki/HTML
23:37 < BrightGreenLine> you are doing html = require'html' right?
23:37 < BrightGreenLine> or sommat
23:38 < lamalex> isaacbw: i know html isnt a module. but that's the error express is spitting at me
23:38 < BrightGreenLine> sounds like you're trying to use it without requiring it
23:38 <@isaacbw> BrightGreenLine: dude
23:40 < lamalex> i took jade out of my app.js and in my routes/index.js i changed exports.index to do res.render('index.html')
23:40 < ljharb> lamalex: res.render('index')
23:41 < ljharb> also app.set('view engine', 'html'); i believe
23:41 <@isaacbw> what would that accomplish? is it just an idomatic wrapper to send the file?
23:41 <@isaacbw> *idiomatic
23:43 < lamalex> i dont know man, is it?
23:43 <@isaacbw> there's no need to render anything if you're just sending html files
23:44 <@isaacbw> unless you mean you're trying to use something like ejs
23:44 < lamalex> so do i use res.send? i had tried that but it just printed index.html as text
23:45 <@isaacbw> make sure to set the content type
23:46 <@isaacbw> though you must be doing something weird for that to happen
23:47 < lamalex> i really dont think im doing anything weird, although likely something ignorant
23:48 < lamalex> exports.index = function(req, res){
23:48 < lamalex>   res.contentType('text/html');
23:48 < lamalex>   res.send('index.html');
23:48 < lamalex> };
23:48 < lamalex> is what ive got, seems straight forward
23:49 <@isaacbw> http://expressjs.com/api.html#res.send
23:49 <@isaacbw> what you want is res.sendfile
23:49 <@isaacbw> if you feel lost, just read the docs
23:49 <@isaacbw> http://expressjs.com/api.html#res.sendfile
23:49 <@isaacbw> res.send is just sending the string 'index.html', not the file
23:49 < NotMyself> lamalex: here is a very simple file server example https://github.com/NotMyself/weewikipaint/blob/859c880318b37434b020322e29fe1b17b839dbe0/src/server/server.js
23:50 <@isaacbw> p.s. it's best to paste multi-line code snippets in a site like hastebin
23:51 < ljharb> except not hastebin cause it assumes your js is coffeescript too aggressively :-p use gist or jsfiddle
23:51 < lamalex> aye, sorry.
23:56 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
23:56 <@MI6> joyent/node: Miroslav Bajtoš master * fbf4641 : src: initialize debug-related uv_async_t handles (+1 more commits) - http://git.io/ht0c_A
23:56 < lamalex> maybe its time to just reapproach my problem and try and find a new solution
23:58 <@isaacbw> it's not a difficult problem. Just some time to get to know your tools
--- Log closed Thu May 09 00:00:08 2013
