--- Log opened Tue Jan 22 00:00:06 2013
00:00 < CoverSlide> life is harsh
00:01 < CoverSlide> it's easy to fail at it
00:01 < CoverSlide> case in point: my previous statement
00:01 < olivoil> join /#whopaidit
00:02 < CoverSlide> #whopaidit
00:02 < olivoil> ooops
00:02 < CoverSlide> ?
00:02 < CoverSlide> wtf
00:02 < olivoil> just mistyped
00:02 < CoverSlide> alrighty ...
00:29 < andrepadez> please, someone help me...: https://gist.github.com/4590904
00:30 < zomg> andrepadez: I don't see a prop called 'nome' in the first log output, sure that's not the issue?
00:31 < andrepadez> sorry, i meant titulo
00:31 < andrepadez> changed the gist
00:31 < zomg> That is pretty odd..
00:32 < zomg> What if you just do a for-in loop and try outputting each valid prop name?
00:32 < zomg> eg. for(var k in data.docs[0]) { console.log(k); }
00:34 < andrepadez> i get the same
00:34 < andrepadez> now i fucked up my git repo, so i can't go on
00:35 < andrepadez> sorry and thanks for the trouble, i'll do it all again
00:44 < isaacbw> andrepadez, what did you do to git
00:57 < owen1> i just wrote a little template for website/web service that let's me run my unit tests easily (single test or all of them). any feedback is welcome - https://github.com/oren/node-webservice-template
01:35 < isaacbw> so my ratatouille turned out kinda shitty
01:36 < isaacbw> it was weird
01:36 < cloudbender> Overcooked ?
01:36 < isaacbw> no, I used carrots instead of zucchini
01:36 < isaacbw> lol
01:36 < cloudbender> Next time steam the carrots first.  Or go shopping.
01:37 < isaacbw> I mean, the final product was fine for what it was
01:37 < cloudbender> Mongodb seems kinda cool
01:37 < isaacbw> but the tiny little grocery store I went to didn't have zucchinis
01:37 < cloudbender> like couchbase or db4o
01:37 < rcombs> How would you recommend doing a network speed test between a client and a server in Node?
01:37 < isaacbw> I would have to walk 5 blocks to go to a proper grocery store
01:37 < rcombs> (the server may be Ruby, actually)
01:38 < cloudbender> rcombs who is hoting theserver
01:38 < cloudbender> hosting I mean
01:39 < rcombs> cloudbender: AWS
01:39 < rcombs> the client is an app.js thing
01:40 < cloudbender> Are you trying to guage the line speed or the server performance ?
01:40 < rcombs> line speed
01:41 < cloudbender> I would build a big block of data, and pas the football back and forth a bunch of times (say, 100,000 times) and take an average.
01:43 < rcombs> how do I measure how long it takes to transmit the data, though?
01:44 < ^robertj> is there a way to set a descritor for an object that will show on  "of object #<Object> is not a function" kind of error messages?
01:44 < rcombs> once I've chucked a block of data at .write(), how can I tell how long it actually takes to get to the server? Just have the server reply with something small, and disregard the latency?
01:44 < blazes816> haven't ever done it, but I'd imagine something like send the current time form the server, compare with the current time on the client
01:49 < cloudbender> Send a football and have the server send it back.  compare your start and end times.  The football has to be large enough to minimize the percentage of overhead vsersus transport.
01:50 < cloudbender> You need to do it enough times to get a reliable average.
01:51 < cloudbender> Think of it as a 'fat ping'
01:53 < rcombs> cloudbender: alright, cool
01:54 < rcombs> cloudbender: sounds good; I wonder how speedtest.net does their upload tests (they always have a continually-updating speed)
01:56 < CoverSlide> don't they use flash?
01:57 < rcombs> yeah, but it's not like Flash is magically able to do things that Node.js can't
01:58 < ljharb> flash is a client-side technology, node is server-side - they're incomparable.
01:58 < CoverSlide> well i don't think node would be the blocker, i think it'd be the browser
01:58 < rcombs> yeah, but this isn't running in a browser
01:58 <@TooTallNate> i mean they probably just open a TCP socket and write to it, haha
01:59 < rcombs> how do you figure out what the speed of a TCP connection is, though?
01:59 < ljharb> you have to measure it, like speedtest does.
01:59 < ljharb> more to the point, there is no answer, because the speed of it entirely depends on what you're connecting to.
02:00 < rcombs> yes, I'm aware. That's why I'm connecting to the same server that the eventual actual upload will be do
02:00 < rcombs> s/do/to/
02:00 < rcombs> ljharb: you say "measure it", but how?
02:00 <@TooTallNate> ljharb: i'd hope the entity testing my speed has a faster upstream & download speed
02:01 < ljharb> TooTallNate: it depends on every single hop in between too.
02:01 <@TooTallNate> ljharb: that's why speedtest.net picks the closest server
02:01 < ljharb> rcombs: both download and upload a file of multiple known sizes (because you have to account for bursts), and measure how long it takes to transmit it in each direction.
02:01 <@TooTallNate> ljharb: but good point nonetheless
02:01 <@TooTallNate> rcombs: personally never tried it, but this popped up earlier https://github.com/fent/node-streamspeed
02:02 < rcombs> TooTallNate: yeah, I mentioned that
02:02 <@TooTallNate> oh ok :p
02:02 <@TooTallNate> ignore me then
02:02 < rcombs> TooTallNate: I read the source, though; it just measure time between .write() calls
02:02 < rcombs> TooTallNate: which is useless if I'm just chucking a big fixed file at a single .write()
02:02 < rcombs> (or for measuring line speed in general)
02:02 < xk_id> !seen test
02:02 < Lee_> I'm working on a node app that could do with some expert feedback. Amazon gift card in return for your time. Anyone game? http://j.mp/RsNEhF
02:03 <@TooTallNate> rcombs: ya that might not be the best testâ€¦ i'd think ideally it would utilize the .write() callback function to know when it's been written
02:03 <@TooTallNate> rcombs: before doing the next .write() call
02:03 < CoverSlide> probably need something on the client to report back to the server
02:03 < rcombs> TooTallNate: it actually replaces the .write() function
02:03 <@TooTallNate> yuck :p
02:03 < rcombs> TooTallNate: and calls a .oldWrite() with the real data (.oldWrite is copied from .write)
02:03 < CoverSlide> only $25 for 30 minutes of my time?
02:04 < rcombs> ljharb: how does it get _live_ speeds, though? It's not like it sends a new file and gets a response several times per second
02:04 < CoverSlide> what am i some yemeni sweatshop worker?
02:04 < niggler> CoverSlide if those 30 minutes involved watching goatse for 29 would you do it?
02:05 < CoverSlide> hell to the yes
02:05 < ljharb> rcombs: the server measures how much of the file it's received, and it reports back to the client a percentage
02:05 < ljharb> or something like that
02:07  * rcombs decompiles a SWF
02:07 < iv597> So, anyone here know why I'm getting all kinds of WebkitFormBoundary gibberish in my POSTS that's preventing querystring from working properly? I've Googled all over to no avail on this, getting kinda irksome that I can't even pull email/pass from a form because the stuff is all gibberish-ized.
02:08 < CoverSlide> ah yes i've decompiled myself many a SWF in my day, fun times
02:08 < ljharb> iv597: what's the form tag look like in the html?
02:08 < rcombs> CoverSlide: ever read through the YouTube player source?
02:08 < CoverSlide> no, haven't
02:08 < iv597> ljharb: <form id="login" action="/login" method="POST" enctype="multipart/form-data">
02:08 < CoverSlide> iv597: WebkitFormBoundary is a multipart stream, that can't be parsed as a querystring
02:09 < CoverSlide> there's a formidable package for that
02:09 < ljharb> iv597: if you're not uploading a file, you don't need multipart.
02:09 < CoverSlide> although personally am not a fan of the api
02:09 < iv597> Derp. Is there a better way to enctype that then so it's parsable?
02:09 < CoverSlide> application/x-www-form-urlencoded
02:09 < iv597> and ljharb in a login box I don't need uploads. Later in this webapp there'll be uploads all over the place.
02:10 < CoverSlide> it should be the default
02:10 < iv597> CoverSlide: thanks. I'll give it a whirl.
02:11 < iv597> Gee. I feel real dumb right now. I should stop coding on lack of sleep, clearly. Worked great, ljharb and CoverSlide. Thanks a bunch.
02:11 < xk_id> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map#Example.3A_Pluralizing_the_words_(strings)_in_an_array << kangareese? wat?
02:12 < CoverSlide> haha awesome
02:12 < ljharb> hahaha thats a great example
02:14 < niggler> xk_id: "This article is in need of a technical review."
02:16 < xk_id> fancy way to call it
02:17 < niggler> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map$revision/1688
02:17 < niggler> lol appears to be an isolated edit
02:18 < CoverSlide> MDN doesn't show diffs?
02:21 < dougtoppin> question for anyone with the time to help, i wanted to try voxel which needs browserify, browserify wants to be installed -g, once before i ended up with a mess because i had some stuff installed -g and some not.  if i install browserify -g now will i end up having to install other stuff in the future that way?
02:22 < CoverSlide> TIAS
02:23 < substack> dougtoppin: if you don't want to install browserify with -g you can just ./node_modules/.bin/browserify
02:23 < substack> but using -g to install browserify shouldn't cause problems
02:24 < substack> it's recommended to use -g to install scripts to run, just not modules to require()
02:24 < dougtoppin> should have included that node_modules/browserify/bin only has cmds.js in it
02:24 < dougtoppin> i.e. no bin/browserify, is that not what should have happened?
02:24 < substack> dougtoppin: that is not the same as what I wrote
02:24 < substack> npm puts bin scripts into node_modules/.bin
02:25 < substack> based on what the package.json says
02:25 < substack> bins are set up according to the package.json bin field
02:27 < dougtoppin> substack duh, find did not check .bin, tks, i found it
02:34 <@TooTallNate> lol, isaacbw, nice you've made the /title
02:35 < isaacbw> I'm super important
02:35 < isaacbw> and you guys are bad at reading :P
02:35 < phonebook_> i have kind of a dumb question. when writing a web server is there any benefit in serving up the file with streams over simply using response.sendfile()? 
02:35 <@TooTallNate> isaacbw: you mean since you've still had that happen even after the title?
02:35 < isaacbw> yea
02:36 < CoverSlide> sendfile is an express-ism
02:36 < SomeoneWeird> lmao wat
02:36 < SomeoneWeird> bai
02:36 < isaacbw> phonebook_, sendfile just wraps the http streams
02:36 < phonebook_> got it
02:36 < phonebook_> so its the same thing 
02:37 < CoverSlide> basically
02:37 < CoverSlide> http://expressjs.com/api.html#res.sendfile
02:37 < CoverSlide> read up
02:38 < phonebook_> ah nice. has a .download too. 
02:38 < phonebook_> cool thanks
02:52 < ArxPoetica1> What is the single best node book to ramp up to a more professional level? :P
02:53 < CoverSlide> professional?
02:53 < CoverSlide> there are professionals using node?
02:53 < ArxPoetica1> HA.
02:53 < ArxPoetica1> I'm getting paid.
02:54 < CoverSlide> maybe look at smashing node
02:54 < ArxPoetica1> A little more than half my income.
02:54 < isaacbw> before you have the skills to do the work?
02:54 < isaacbw> lucky bastard
02:54 < isaacbw> I wish I could get paid to do things I don't know how to do
02:54 < ArxPoetica1> I've worked pretty intensively w/ Node, but I'm ready to take it to the next level.
02:54 < CoverSlide> but that's pretty specific to the express / mongoose stack i think
02:54 < CoverSlide> but it shows some best practices
02:54 < ArxPoetica1> that's okay, that stack is fine
02:55 < ArxPoetica1> Just looking for "the" book everyone swears byâ€¦if there is such a one.
02:55 < ArxPoetica1> I actually have access to the whole O'Reilly library, if that's the way to go.
02:55 < isaacbw> not really
02:55 < CoverSlide> yeah not too many books out there, node changes quickly, so the books get outdated
02:55 < ArxPoetica1> gotcha
02:56 < isaacbw> if you really want to master node, get to know the source code
02:56 < ArxPoetica1> http://smashingnode.com/
02:56 < CoverSlide> maybe when we hit a 1.0 release or something
02:56 < CoverSlide> yes, i agree with reading the source
02:57 < ArxPoetica1> The source is all in C?
02:57 < ArxPoetica1> https://github.com/joyent/node <--
02:57 < ArxPoetica1> ?
02:57 < CoverSlide> the files in lib/ are javascript
02:57 < CoverSlide> that should be enough to read
02:58 < gildean> ArxPoetica1: as you can see it's part js, part c++
02:58 < isaacbw> and mostly c++
02:58 < CoverSlide> that's only because of v8
02:58 < ArxPoetica1> I actually learned C++ way back when, so that's good.
02:58 < CoverSlide> the parts that touch v8 have to be C++
02:58 < gildean> then there are things like openssl and the http-parser from nginx etc.
02:58 < CoverSlide> libuv is the event-binding layer, that's all pure C
02:59 < ArxPoetica1> ah
02:59 < ArxPoetica1> That stuff interests me.
02:59 < CoverSlide> that's whare a lot of the node development work goes is on libuv
02:59 < CoverSlide> which unfortunately doesn't have much documentation. there's this uvbook think somewhere, but i don't know how accurate or up-to-date it is
03:00 < isaacbw> does anyone know if joyent plans on participating in gsoc?
03:01 < ArxPoetica1> where is libuv?
03:01 < isaacbw> https://github.com/joyent/libuv
03:01 < isaacbw> goooglllee
03:01 < ArxPoetica1> oh, it's an entirely separate project
03:02 < ArxPoetica1> I see. I was looking in /joyent/node
03:03 < isaacbw> CoverSlide, do you work on node?
03:03 < CoverSlide> not professionally no
03:03 < isaacbw> at all
03:03 < CoverSlide> nope
03:04 < CoverSlide> but i tinker a lot in my spare time
03:06 < CoverSlide> and i waste time in here when i should be busy working
03:06 < isaacbw> damn IRC
03:06 < ArxPoetica1> welcome to the club, man
03:06 < CoverSlide> i probably got 20 minutes of work done today
03:07 < ArxPoetica> Has anyone here ever tried to scale a websockets connection using socket.io or engine.io?
03:07 < isaacbw> lots of people use socket.io
03:09 < isaacbw> it's more for browser transparency than scaling thugh
03:09 < isaacbw> though
03:11 < redshadowhero> Is it acceptable to start a socket connection, and then use that to emit an event? e.g., socket.connect( someport, somehost, function() { this.emit( 'connection'); } ). The only reason I ask is because the 'connection' event doesn't seem to be emitted.
03:12 < isaacbw> is joyent friendly to public patches/pull requests?
03:14 < iv597> So, another question. This one's getting more odd. So, when a form is invalid, I'm running my callback function which passes a 301 error with a "text/plain" type and a location header to redirect to. My callback function acknowledges all this, and console.log() is telling me 301 /login, but the browser is getting a... 200 OK /login?
03:14 < iv597> It's not passing my redirect at all.
03:17 < rcombs> isaacbw: for Node.js core? Yes. You need to sign a CLA, though
03:18 < cloudbender> Yes but CoverSlide, you earned a $25 Dollar Gift Card !!! Yay!
03:18 < cloudbender> Redeemable in Yemen, but not for booze
03:18 < cloudbender> Or chicks
03:18 < niggler> CoverSlide you watched goatse for 29 minutes?  congrats
03:20 < MI6> joyent/node: Tim master * d5a5901 : doc: Fix syntax in cluster example code - http://git.io/NbL0aw
03:20 < cloudbender> <<< wonders if he has put his foot in his mouth.
03:21 < niggler> cloudbender strictly speaking it would have been something else in your mouth
03:22 < rcombs> cloudbender: by the way, is your nick an Avatar reference?
03:22 < cloudbender> No, have not seen avatar
03:23 < rcombs> cloudbender: cloudbending is a thing in Avatar: TLA (it's a combination of water- and airbending)
03:24 < cloudbender> I was in the bush when it was in theatres, and there are no places to rent DVD movies anymore.
03:25 < niggler> netflix?
03:26 < cloudbender> there's a thought ...
03:26 < CrawfordComeaux> weird thought: single page web app where the only HTTP reqs are for the main page & socket.io client...with everything else being sent via socket.io
03:26 < cloudbender> Comeaux you mean a multi-channel kind of thing ?
03:27 < niggler> why is that a weird thought CrawfordComeaux
03:28 < niggler> it *can* be done but seems like overkill
03:28 < CrawfordComeaux> cloudbender: it could turn into that, but initially just transmit code necessary to create the socket and transmit all resources via the socket
03:28 < CrawfordComeaux> niggler: guess cause I've never seen/heard of it being done and i'm sure there are reasons why you wouldn't
03:29 < niggler> if you used standard xmlhttprequest you could take advantage of caching
03:29 < CrawfordComeaux> would you lose out on parallel HTTP requests>
03:29 < niggler> it *could* be faster but wouldnt scale as easily
03:32 < redshadowhero> Huh. Well, TIL using "this.emit" within a callback function of another event most likely refers back to the calling object's "this" emitting the original event, not the containing object....
03:32 < redshadowhero> aka, 'I feel stupid'.
03:33 < SomeoneWeird> redshadowhero, correct
03:33 < SomeoneWeird> maybe you should play around with scopes a bit more :)
03:34 < redshadowhero> In my defense, this is theoretically day 1 with node, and day 4 with javascript. I was going to write all of this in C, but node lets me prototype so much faster.
03:34 < SomeoneWeird> cool :)
03:34 < redshadowhero> It is really cool, actually!
03:35 < SomeoneWeird> that is it 
03:35 < SomeoneWeird> it is*
03:35 < redshadowhero> I was using rhino at first, but it was waaay too slow. Some project euler stuff I was using as a test took as much as 15 seconds, but v8 took less than a tenth of that.
03:36 < redshadowhero> So, I guess to avoid some of these scoping issues, I should define something like a `var thisobj = this;' soft of thing?
03:37 < SomeoneWeird> well, yes you could 
03:37 < SomeoneWeird> but I would recommend adding .bind(this) to the outside of the function
03:37 < SomeoneWeird> { /* do stuff */ }.bind(this)
03:38 < SomeoneWeird> it changes the internal scope of the function to the argument of bind
03:39 < redshadowhero> SomeoneWeird: I'm going to show my ignorance one more time here: is that a node feature, or javascript?
03:39 < SomeoneWeird> js
03:39 < SomeoneWeird> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind
03:40 < redshadowhero> I just found that :)
03:40 < redshadowhero> I did not know this at all!
03:40 < cloudbender> visibility is different in js
03:42 < redshadowhero> I'm starting to notice that. Closures are strange to me how you can refer to something, and then 'violate' scope. Definitely not like C pointers to functions like I assumed all these callbacks were.
03:43 < isaacbw> closures are sex
03:43 < redshadowhero> The only use I've seen for them so far is protecting the global namespace.
03:44 < cloudbender> They are object references, not pointers.
03:44 < isaacbw> I think maybe you're misusing the term closure, redshadowhero 
03:44 < isaacbw> closures are the bread and butter of javascript
03:44 < redshadowhero> I might very well be!
03:45 < isaacbw> and you've probably been using them without knowing it
03:46 < isaacbw> https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures
03:46 < redshadowhero> I see.
03:47 < redshadowhero> So, I was a little on track that it preserves the scope from where it's coming from.
03:48 < isaacbw> in a way, yea
03:48 < cloudbender> Is it the 'this' that's throwing you ?
03:48 < redshadowhero> from before, yes.
03:49 < isaacbw> closures are what make events so powerful in node
03:49 < redshadowhero> Because it preserves the scope like that?
03:49 < isaacbw> sure
03:50 < redshadowhero> Well, Today I Learned.
03:51 < cloudbender> Lets talk about object methods and functions
03:51 < cloudbender> these are PROPERTIES of an object
03:51 < redshadowhero> you mean like var obj = { a: function() {}, b: function() };
03:51 < redshadowhero> ?
03:52 < cloudbender> Well, yes, but even more simply ....
03:52 < cloudbender> In c you are accustomed to functions being code modules of a library
03:53 < redshadowhero> Indeed I am.
03:53 < cloudbender> but objects can have thier own functions attached as callable properties
03:53 < isaacbw> redshadowhero, I just read your older messages
03:53 < isaacbw> a lot of node code actually uses the pattern var self = this;
03:53 < cloudbender> Yeah, maybe I should let you proceed with ISaacbw
03:53 < isaacbw> oh, is this a lesson
03:53 < isaacbw> I'm watching adventure time
03:54 < redshadowhero> I suppose it is now. But I do have to go to bed soon. Lots of work tomorrow for me :/
03:54 < isaacbw> work :(
03:54 < redshadowhero> Well, work is usually fun, but there's a lot of stuff going on right now that makes it not fun.
03:55 < redshadowhero> Like security clearence paperwork and pretty intrusive background checks..
03:55 < isaacbw> as long as you don't have any dark secrets
03:55 < redshadowhero> I've lived in more places than I've had fingers in the last decade, which was part of the problem.
03:56 < isaacbw> oh, you must be a drug dealer
03:56 < redshadowhero> naw. Foster care.
03:56 < isaacbw> they would give you trouble for that?
03:57 < redshadowhero> which was the other part of the problem, since I had to list every single one of them under 'family', for some reason.
03:57 < redshadowhero> Well, yes and no. If any of those people have shady backgrounds, it apparently reflects badly on me.
03:57 < isaacbw> that's obnoxious
03:57 < redshadowhero> Yep!
03:57 < isaacbw> good luck then
03:57 < iwalkbarefoot> redshadowhero: oh man, what a PITA.  I hadn't lived that many places and it was a pain
03:58 < redshadowhero> I dunno. I got out of foster care in... I guess 2006-2007ish, and I'd rather just leave all that baggage or whatever back there, y'know?
03:58 < cloudbender> If it's not yours, don;t carry it.
03:58 < isaacbw> hopefully you get to do something cool after all this, at least
03:58 < redshadowhero> I will, but I can't talk about it!
03:59 < isaacbw> :D
03:59 < iwalkbarefoot> redshadowhero: I hope you don't like to travel internationally, lot sof paperwork involved with that afterwards too
03:59 < redshadowhero> afterwards, you say?
03:59 < redshadowhero> ...le sigh.
04:00 < redshadowhero> another quick question, though. 'var' in a function is like a private scope, while this.whatever is more like a... public scope, right?
04:00 < redshadowhero> Since you guys just turned everything I thought was true about js scoping on its head.
04:00 < cloudbender> this referes to the owning object
04:00 < cloudbender> it is a nickname
04:00 < cloudbender> a shortcut
04:00 < iwalkbarefoot> yeah you have to list everywhere you want, where you stayed, etc.  if you interacted with anyone
04:01 < redshadowhero> cloudbender: Alright, I think I get it.
04:01 < redshadowhero> iwalkbarefoot: sounds tedious. Guess I won't be going anywhere :/
04:02 < cloudbender> If I have two objects in a class, and they both have a beep() function, as properties of themselves, then....
04:02 < isaacbw> this is worth reading even though it's for lua: http://www.lua.org/pil/16.html
04:02 < isaacbw> self and scope carry over to javascript
04:02 < redshadowhero> Man, you guys are the best.
04:02 < cloudbender> I have to call object1.beep() and object2.beep() explicitly
04:04 < cloudbender> but WITHIN the beep function(s), I can say 'this'
04:04 < cloudbender> this refers to the owner of the function
04:05 < redshadowhero> I think I'm starting to get the hang of it.
04:06 < redshadowhero> One sec.
04:06 < cloudbender> It will click in.  read code alot and it will eventually make sense
04:07 < redshadowhero> That's better.
04:07 < cloudbender> another thing that makes it tricky for you is anonymous in-line functions
04:07 < cloudbender> once it sinks in it will make perfect sense
04:08 < redshadowhero> anonymous functions haven't really struck me as a problem so far.
04:08 < redshadowhero> It was alien at first because I'm used to functions being predefined, but it's okay. Part of me wants to do my own garbage collecting of the heap still, but the feeling passes quickly.
04:09 < redshadowhero> and objects have a bunch of cool predefined properties. When I found hasOwnProperty and even for( prop in obj ), I was delighted.
04:10 < cloudbender> You have to remember that alot of the new stuff is compiled on-the-fly, even as it comes off the stream from where-ever.
04:10 < redshadowhero> Yeah, the JIT compiler with v8 is something I've read a bit about.
04:11 < cloudbender> Read some code, you'll get it.
04:11 < cloudbender> w3schools has some great lock-step tutorials
04:11 < redshadowhero> I've been reading some, but the other side of the coin is actually getting out there and actually typing.
04:12 < cloudbender> try w3schools for that, you'll see34
04:12 < cloudbender> try w3schools for that, you'll see
04:12 < zomg> www.w3fools.com
04:12 < zomg> :P
04:13 < cloudbender> it's a good place to get the fundies
04:13 < cloudbender> fundementals
04:14 < redshadowhero> I'll lock at it when I'm not so neck-deep in regex for irc raw output.
04:15 < redshadowhero> (because obviously the best place to start isn't typing up tutorials, but doing the 'smart' thing and making an irc bot)
04:15 < redshadowhero> s/mart/tupid/
04:15 < myndzi> disagree
04:15 < myndzi> also irc is made for tokenizing
04:16 < myndzi> but even then regex should be pretty easy, what's hanging you up?
04:16 < richcollins> Any recommendations for profiling on OS X?
04:16 < redshadowhero> being awake for 18 hours is step one :/
04:16 < myndzi> hah
04:16 < richcollins> --prof output is unreadable
04:16 < myndzi> i ... sometimes telnet to irc for fun
04:16 < myndzi> :P
04:16 < redshadowhero> ...you... YOU MONSTER.
04:16 < myndzi> i also happen to know amusing ways to screw with people who do that ;)
04:17 < myndzi> (telnet still has a protocol after all)
04:18 < redshadowhero> Yeah, I guess something like /^:.*!~.*@.* PRIVMSG .*:/ is a good enough test for a message, right?
04:18 < myndzi> well, i'd be using \S at least
04:18 < myndzi> but really what you wanna do is capture tokens
04:18 < redshadowhero> well, this is for an 'isMessage' function.
04:19 < myndzi> it's a message if the second token == 'PRIVMSG'
04:19 < myndzi> no reason to validate anything else
04:19 < myndzi> and possibly a disadvantage in some cases
04:19 < redshadowhero> what's the split? Just a space?
04:19 < myndzi> yep
04:19 < myndzi> space splits tokens, and space with colon means "everything else"
04:19 < myndzi> i don't know what the exact character of the : in the source is but i believe it's always present
04:19 < myndzi> so
04:19 < myndzi> :source PRIVMSG dest :this text can have spaces
04:20 < myndzi> there are some other responses where the "wildcard" isn't the fourth parameter
04:20 < myndzi> whois replies perhaps
04:20 < myndzi> :rajaniemi.freenode.net 311 myndzi myndzi myndzi 2600:3c01::f03c:91ff:fedf:3d4e * :Imagining order into life, like dreams with might
04:20 < myndzi> so you ought to be able to do some sort of repeating regex
04:20 < myndzi> like maybe
04:21 < myndzi> ^:(\S+)(?: (\S+|:.*))+$
04:21 < myndzi> or whatever, you get the idea hopefully
04:21 < myndzi> \S is a bit broad, technically it should just be [ ]
04:21 < myndzi> cr lf and nul are banned i believe
04:21 < myndzi> the rest are acceptable
04:22 < myndzi> one of the few commands that you'll see without a source is PING
04:22 < myndzi> if you don't send back a PONG you'll get disconnected
04:22 < myndzi> just copy everything after PING and send it back
04:23 < redshadowhero> maybe var message = /(?:^:[^:]*:)(.*$)/.exec(input);?
04:24 < myndzi> i guess
04:24 < myndzi> depends on if you want to speak irc or just hack it
04:24 < myndzi> :P
04:25 < redshadowhero> my class acts a dumb frontend, with a 'convienience' object to parse different things (isMessage, getMessage, etc).
04:25 < redshadowhero> I figure if I make it open-ended, I can reuse it.
04:25 < myndzi> what i mean is that, if you want to properly "speak IRC", you're doing it wrong
04:25 < myndzi> but that doesn't mean it won't work
04:26 < myndzi> up to you
04:26 < redshadowhero> Well, that is a good point.
04:26 < redshadowhero> It partially depends on what I want to do with it, I guess.
04:26 < myndzi> indeed
04:26 < myndzi> if you want 'open ended' you'll want to do it right
04:26 < myndzi> if you want simple and functional, hacky is okay
04:27 < redshadowhero> Well, right now I have a listener for data, and the only event I emit is 'irc-raw', which just throws the line at you.
04:27 < redshadowhero> but I wanted other events for irc-message, irc-notice, etc.
04:27 < isaacbw> have you made sure to buffer lines by crlf?
04:27 < myndzi> irc is pretty structured, and it's easy to break down the rules
04:27 < isaacbw> because messages might be split up between packets
04:27 < myndzi> if the second token is numeric, it is a reply to a query you've sent
04:27 < myndzi> replies are sent first in first out
04:27 < myndzi> if the second token is not numeric, it's an event that happened
04:28 < myndzi> join, quit, nick, privmsg, notice, etc.
04:28 < myndzi> first token is source in everything but ping, i believe
04:28 < myndzi> third is target where applicable, and fourth is content in messages
04:28 < myndzi> the cases where fourth is not the message are generally in numeric responses
04:28 < myndzi> so you can handle those as individual cases
04:28 < redshadowhero> isaacbw: No I haven't. There is some thinking to do in that..
04:29 < myndzi> but you probably want to start by breaking it into tokens and examining the second token
04:29 < isaacbw> you won't be able to get very far until you do it
04:29 < myndzi> (ping = special case)
04:29 < myndzi> also ctcps are just privmsg / notice wrapped in chr(1)
04:29 < myndzi> there's a lot more to the ctcp protocol but nobody uses it
04:29 < myndzi> notice is a reply, and convention (which nobody pays attention to) is to never send an automated reply to a notice event
04:30 < myndzi> well, i shouldn't say that; people kind of incidentally pay attention to it because notices aren't used much
04:30 < redshadowhero> myndzi: I can do it both ways. Parse it out like that, but also provide some 'hacky' functions for when I want to specifically manipulate the raw functions.
04:30 < isaacbw> you'll want ctcp if you want to do /me stuff
04:30  * isaacbw is the coolest person ever probably
04:30 < myndzi> you'll never need to specifically manipulate the raw data
04:30 < redshadowhero> Actually, I've got /me working!
04:30 < myndzi> mirc had a bug for the longest time that let me send text that it wouldn't display ;)
04:31 < myndzi> you'd send a ctcp action like:
04:31 < myndzi> privmsg target :ACTION some stuff here
04:31 < myndzi> alternately you could use ctcps or ctcpreplies with empty contents like privmsg target : stuff here
04:31 < myndzi> it was fun until i saw someone flood with it :(
04:31 < myndzi> then i had to report it
04:32 < myndzi> anyway, moral is just to be careful to cover all the cases
04:32 < myndzi> it isn't hard but apparently it happens
04:32 < dminus> there were some crap clients out there that you could /ctcpreply PING -1518951
04:32 < dminus> and they would go "oh noooo"
04:32 < myndzi> hehe
04:32 < dminus> direct quote
04:32 < myndzi> my friend started writing one
04:32 < myndzi> and he uhh
04:32 < myndzi> printf'd some %s
04:32 < myndzi> so you could crash it just by saying %s%s%s%s%s%s
04:33 < dminus> "what no these are not numbers arrrghhhh"
04:33 < myndzi> not as bad as the netgear bs
04:33 < myndzi> "There was a problem" *closes socket*
04:33 < dminus> questions are for bourgeois pigdogs
04:33 < myndzi> because they couldn't interpret a malformed ctcp message
04:34 < myndzi> in fact they didn't even distinguish between whether it was outgoing or incoming
04:34 < myndzi> you could use it to breach NAT :P
04:34 < dminus> what a lovely device
04:34 < myndzi> i don't think anybody but me looked into it that closely
04:34 < myndzi> they were having too much fun disconnecting half the channel in every channel they could find
04:34 < redshadowhero> oh god. That was a wall of text right into the node console there.
04:35 < dminus> all in your grill son
04:35 < myndzi> btw
04:35 < myndzi> before you go any further you might want to filter out control codes
04:35 < redshadowhero> like colors?
04:35 < myndzi> i mean console control codes
04:35 < myndzi> ansi commands, cursor position, etc.
04:35 < myndzi> colors too
04:35 < dminus> printable chars !
04:36 < myndzi> they can really screw with your terminal ;)
04:36  * rshbot makes some action!
04:36  * dminus makes action also!
04:36 < redshadowhero> Well, that just proves that it works to me.
04:36 < myndzi> speaking of bugs, did you know that utf-8 encoding allows you to mask C2 terminal codes in a utf sequence?
04:36 < myndzi> improperly configured terminal + irssi set to allow utf-8 = arbitrary ansi codes
04:36 < myndzi> never was able to do much useful with it but i did manage to spoof messages in a very specific case
04:37 < dminus> improperly configured terminal + [@MANY_THINGS] = [@MANY_BAD_THINGS]
04:37 < myndzi> indeed, but this seems to be one people don't expect
04:37 < myndzi> the moral here is: if someone sends text over irc and your system fucks up, don't announce it loudly
04:37 < dminus> thats cause they dont use wacky stuff like powerline.vim
04:38 < myndzi> this guy complained so much that i eventually figured out what was going on just to shut him up
04:38 < myndzi> haha
04:38 < redshadowhero> I'm sure the 'bot' will time out.
04:38 < dminus> good thing irssi drives me crazy
04:38 < cloudbender> couchnode - node.js access to libcouchbase
04:38 < cloudbender> https://github.com/couchbase/couchnode
04:38 < dminus> been to lame to read bitchx.doc since 99
04:38 < myndzi> redshadowhero: if you want to be REALLY lazy just use setinterval and send a ping every 30 seconds or so
04:39 < redshadowhero> I guess the first thing I'll do is create a 'pingbot' that'll look for PING messages.
04:39 < myndzi> not a ctcp ping, an irc ping
04:39 < myndzi> there is the PING irc command and the PING ctcp message
04:39 < redshadowhero> Hrm.
04:39 < myndzi> the server only pings you when you're idle though
04:39 < myndzi> well, typically
04:39 < myndzi> i've seen some goofy irc servers
04:40 < cloudbender> remember, ping can be blocked by firewalls and ISP switchgear
04:40 < myndzi> twitch's pseudo-irc disconnects you for sending CAP before logging in, rather than giving invalid command
04:40 < myndzi> irc ping and ctcp ping - neither are icmp ping
04:40 < myndzi> they are just messages sent over the already connected socket
04:41 < cloudbender> <<<< will shut up now
04:41 < myndzi> haha it's np :P
04:41 < myndzi> i don't often have anything useful i can contribute, but i do know irc :D
04:41 < redshadowhero> Yeah, parsing this based on tokens shouldn't be too hard.
04:41 < myndzi> i uh.. read rfc1459 when i was a kid :P
04:42 < redshadowhero> first things first.
04:42 < redshadowhero> I guess I need to figure out how to only emit my events when I've gotten a full line.
04:43 < cloudbender> On the client side ?
04:43 < redshadowhero> Yeah.
04:44 < redshadowhero> Well, I guess I'm looking at the node... stream api?
04:45 < myndzi> i assume you've got an on data event or something
04:45 < myndzi> in the socket, yeah?
04:45 < cloudbender> Someone here can probably point you in the right direction regarding 'chunked' transport, where the connection remains open between chunks
04:45 < redshadowhero> Yep.
04:45 < myndzi> all you have to do then is read each buffer
04:45 < myndzi> find the first (\r\n|\r|\n)
04:45 < redshadowhero> and make sure they end with \r\n?
04:45 < isaacbw> it wouldn't be that hard to do yourself
04:45 < myndzi> i'm pretty sure it should always be \r\n
04:46 < myndzi> and emit the line
04:46 < myndzi> then keep processing the buffer
04:46 < isaacbw> it will always be \r\n
04:46 < redshadowhero> Yeah, lemme test real quick.
04:46 < isaacbw> just append to a string until you hit a \r\n, then process the message
04:46 < myndzi> so just loop the characters or use something to seek it
04:46 < cloudbender> very nice
04:46 < redshadowhero> Is it forgetting to regex it?
04:46 < myndzi> keep whatever portion of the buffer is left if the end doesn't have \r\n
04:46 < redshadowhero> *forbidden
04:46 < myndzi> and append the next data chunk to that
04:47 < myndzi> not forbidden, but using regex for cases where you don't have to is like to give you headaches more often than not
04:47 < isaacbw> I don't think the protocol guarantees that \r\n will be at the end of the packet though
04:47 < myndzi> right
04:47 < myndzi> i think most servers implement it as \r\n
04:47 < myndzi> but i also think that \r or \n are acceptable, or at least are generally understood
04:48 < isaacbw> I mean, \r\n *is* always the message separator
04:48 < isaacbw> but you might have a packet with a \r\n in the middle of it, which means it contains the end of a message and the start of the next one
04:48 < myndzi> you can, for example, send messages to the server delineated by \n and they'll work fine
04:48 < isaacbw> so keep that in mind with your buffering code
04:48 < redshadowhero> Well, in the node console, there's an extra newline in there, so I assume that the \r\n is also being interpreted by the console.
04:48 < myndzi> so by the same token presumably it works from the server
04:48 < isaacbw> servers will always send it as crlf, even if they accept \n
04:49 < myndzi> you can't speak for all servers
04:49 < myndzi> heh
04:49 < myndzi> what was the quote..? be forgiving in your input and strict in your output? something like that
04:49 < isaacbw> hah, okay. They're *supposed* to unless they're breaking the rules
04:49 < myndzi> rules are merely guidelines :V
04:49 < myndzi> you save bytes by omitting the \r.
04:49 < isaacbw> brilliant
04:49  * myndzi grins
04:50 < myndzi> now i have to look it up
04:50 < redshadowhero> But, like you said, what if it's in the middle?
04:50 < isaacbw> IRC says crlf
04:50 < isaacbw> oh
04:50 < isaacbw> redshadowhero, you just start the buffer over again with the second half
04:50 < myndzi> yeah, it's defined as crlf
04:50 < redshadowhero> I mean locating it.
04:50 < myndzi> redshadowhero: that's why you parse it
04:50 < isaacbw> string.indexOf
04:51 < redshadowhero> Well, that's a way of doing it. Is \n guaranteed to be the last character?
04:51 < redshadowhero> of a message, I mean.
04:51 < isaacbw> \r\n is
04:52 < redshadowhero> indexOf accepts strings and chars?
04:52 < isaacbw> I think so
04:52 < myndzi> ahh, that's why the : in front of the source
04:52 < myndzi> so things like PING aren't a special case
04:52 < myndzi> :P
04:52 < myndzi> so: leading ':' indicates the command has a prefix
04:52 < myndzi> then command, then params
04:53 < myndzi> params are space-separated until one begins with a :, then the last param is everything after the : before the \r\n
04:53 < myndzi> irc trivia: ~ was originally a valid character in nicks, but got left out of the rfc writeup and so is not implemented as valid these days
04:54 < redshadowhero> Oh lord.
04:54 < redshadowhero> It's almost 11pm.
04:54 < redshadowhero> and I have work in like 5 hours...
04:55 < myndzi> spoken like a true irc user :D
04:55 < atatsu> if that's the case you go to work too early :P
04:55 < cloudbender> All of this will be here tomorrow, get some sleep
04:56 < redshadowhero> Well, lemme put some //TODO:s in the code for trying to figure out some of this stuff with \r\n, and then I'll idle here for a while.
04:57 < myndzi> for me, TODOs are an effective form of WORM storage :P
04:58 < redshadowhero> ...
04:58 < redshadowhero> Huh. Well, that isn't a bad idea.
04:58 < myndzi> worm = write once, read many
04:58 < myndzi> i should start calling them TODONTS
04:59 < redshadowhero> function( data ) { buffer += data; line = buffer.split("\r\n");
04:59 < redshadowhero> aaaand then I need to figure out how to put the last bit back into the buffer.
04:59 < redshadowhero> then I can emit separate events for each line in the array.
04:59 < redshadowhero> ...line isn't a good name, then. Probably line.
05:00 < redshadowhero> ...
05:00 < redshadowhero> or lines
05:01 < redshadowhero> pop gets the last element of the array, right?
05:01 < redshadowhero> I can't brain right now.
05:01 < isaacbw> it removes it
05:01 < isaacbw> I don't think it returns it
05:01 < redshadowhero> but doesn't it re-
05:01 < redshadowhero> d'oh.
05:02 < isaacbw> oh wait
05:02 < isaacbw> yes it does
05:02 < cloudbender> nice
05:02 < redshadowhero> YES!
05:04 < redshadowhero> so then I can throw the last 'incomplete' item back onto the buffer and be done with it.
05:04 < SomeoneWeird> <isaacbw> I don't think it returns it < it does
05:04 < SomeoneWeird> yes
05:04 < SomeoneWeird> >> [ '1', '2', '3'].pop()
05:04 < purr> SomeoneWeird: (string) '3'
05:05 < isaacbw> isaacbw> oh wait
05:05 < isaacbw> <isaacbw> yes it does
05:05 < SomeoneWeird> :)
05:05 < SomeoneWeird> i saw that after I typed :P
05:06 < isaacbw> fadsfas;ldfsadf;ash so tired
05:06 < SomeoneWeird> sleeeep
05:06 < myndzi> you don't know if it's incomplete after you split the string
05:06 < myndzi> be sure and check first
05:07 < redshadowhero> Well, that fixes ONE problem brought up by isaacbw
05:07 < redshadowhero> and my code is more robust for it.
05:07 < SomeoneWeird> what's the other problem?
05:08 < myndzi> actually i dunno, maybe javascript gives an empty item in the array
05:08 < SomeoneWeird> myndzi, huh
05:08 < myndzi> it does, cool
05:08 < myndzi> you can ignore me ;)
05:08 < SomeoneWeird> lol
05:08 < cloudbender> So, MongoDB cites a native node.js driver, that's cool.
05:09 < redshadowhero> Well, I was going to go forward with my plan for creating all my isX functions complete with regex, then I'll probably go the extra mile like myndzi suggests and throw in a full-out parser.
05:09 < myndzi> http://tools.ietf.org/html/rfc1459
05:09 < redshadowhero> and somewhere in there comes the cleansing of the input.
05:09 < myndzi> for reference ;)
05:09 < myndzi> there isn't much to cleanse
05:10 < myndzi> the only banned characters are nul, cr, lf (in a message)
05:10 < cloudbender> If I'm limiting the app to 20-30 users, can I run a single-tier server with MongoDB ?
05:10 < myndzi> page 8 is the pseudo-bnf for the protocol
05:10 < cloudbender> Maybe a million records per year, max.
05:10 < redshadowhero> Well, I'm also thinking about color codes too.
05:10 < redshadowhero> and all the other things like that.
05:10 < myndzi> color codes are a bit annoying (thanks khaled)
05:11 < myndzi> but \x03\d{1,2}(,\d{1,2})? ought to cover it
05:11 < myndzi> the rest are ascii 15, 2, 31, and ... 3?
05:11 < myndzi> i forget italic
05:11 < myndzi> they are actually the proper ctrl codes for C O R B I
05:11 < myndzi> (even though he uses ctrl+k)
05:11 < myndzi> well it wouldn't be 3 then, derp
05:11 < myndzi> 9
05:12 < myndzi> and U
05:12 < myndzi> forgot u
05:12 < myndzi> none of those have arguments though
05:13 < myndzi> warning: parsing OUT control codes before deciding if your bot should trigger is unadvisable
05:13 < redshadowhero> Yeah. I think. I feel my brain shutting down as sleep is hitting me hard.
05:13 < myndzi> people will sometimes use them to PREVENT triggering bot commands, e.g. for purposes of demonstration
05:14 < redshadowhero> Well, maybe they can attach to the irc-raw event I'm emitting if some of the other ways aren't working?
05:14 < myndzi> ?
05:14 < redshadowhero> I keep saying 'they', even if I'm the only person that'll probably use it.
05:14 < myndzi> i'm saying that you probably don't want to try to compensate for that case
05:15 < redshadowhero> I know.
05:15 < myndzi> the only reason to strip or process control codes from the bot's perspective is for display
05:15 < redshadowhero> like doing .trigger
05:15 < myndzi> right, you wouldn't typically want to react if someone said
05:15 < myndzi> .trigger foo
05:15 < redshadowhero> Yeah.
05:16 < redshadowhero> (I'd still be writing the socket in C, I think. I'm really slow at those.)
05:17 < redshadowhero> ANYWAY.
05:17 < redshadowhero> I'm gonna go to bed.
05:17 < redshadowhero> It was a blast talking with all of you!
05:17 < myndzi> oh no, my Payroll Account has been Holded by Intuit
05:17 < myndzi> 'night
05:22 < trypwire_> hey all. I'm working on a library in which I'd like to offer a `load` method which loads a file via XMLHttpRequest in the browser or fs.readFile in a node environment. Is there a preferred solution to this problem?
05:22 < trypwire_> like is there a common approach that library writers typically use?
05:23 < trypwire_> maybe they just offer two different methods?
05:24 < myndzi> what's the trouble? telling the difference?
05:24 < myndzi> i'm sure there are better ways, but you can test for window, document, or module
05:24 < shesek> trypwire_, I'd personally do it by using browserify and mocking the fs module, so that require('fs').readFile() would just work both client and server side
05:25 < shesek> but I don't quite understand what's your original issue
05:26 < trypwire_> shesek: that's an interesting idea
05:26 < trypwire_> so i'm just writ ing a file decoding utility
05:26 < trypwire_> and if people are using it in the browser, i want to put a nice utility function to simplify loading the file with XMLHttpRequest
05:26 < trypwire_> but if their in node, i'm assuming the path passed to `load` would be a local (relative) file path
05:26 < shesek> load = typeof window !== 'undefined' ? function(path, cb) { $.get('/readSomething.php?path=' + encodeURIComponent(path), cb); } : require('fs').readFile
05:27 < trypwire_> hm
05:27 < trypwire_> damn
05:27 < trypwire_> that's really simple
05:27 < trypwire_> i imagined there was a little more to it, but that makes plenty of sense
05:27 < shesek> if you're expecting the path to be an URL on the client side, it can simply be `load = typeof window !== 'undefined' ? $.get : require('fs').readFile`
05:28 < trypwire_> right
05:30 < trypwire_> well, thanks!
05:32 < shesek> trypwire_, you're welcome
05:44 < myndzi> i feel smart when my approach to something turns out to be known and effective, but most of the time i just wish i'd gone to school and learned it so i didn't have to figure it out
05:44 < myndzi> :P
05:45 < fruitFly> what is a good tut to learn socket.io 
05:47 < fruitFly> Does anyone have a good socket.io tut recommendation?
05:53 < fruitFly> Does anyone have a good socket.io tut recommendation?
05:53 <@mbalho> what i didnt hear you
05:53 <@mbalho> fruitFly: here is book by socket.io dood http://smashingnode.com/
05:58 < grantbow> any ideas why "node --version" might hang on a new install?
05:59 < grantbow> I followed these instructions. http://respectthecode.tumblr.com/post/16115560558/node-js-on-dreamhost
06:00 < fruitFly> mbalho: I just recently got this book http://www.manning.com/cantelon/ and it's building a simple chat app in just the second chapter refrencing socket.io and I have no experience with it. Have you read smashing node and really recommend it? I've read it is very succint and that attracts me.
06:01 <@mbalho> fruitFly: im surprised that book doesnt cover socket.io
06:02 <@mbalho> fruitFly: if you just want info on socket.io specifically im sure there are blog posts out there
06:03 < fruitFly> mbalho: it seems to start covering express in chap 9 The chat apps in chapter 2 seems premature, kinda like its written inside out or something
06:04 < fruitFly> mbalho: I might also check out that book you recommended me. Did you read it?
06:11 <@mbalho> fruitFly: it came out after i learned node but i looked at it and it covers the popular frameworks (if thats what youre after)
06:23 < xk_id> Is there any library that has a method for extracting "xxx" out of "xxx.domain.com"?
06:24 < myndzi> https://npmjs.org/package/publicsuffixlist can help
06:24 < xk_id> Otherwise, I'll just have to subtract the "indexOf(.domain.com)" from the length of the string, and then "substr"...
06:24 < myndzi> if you want to do it naively, a regex or split will work
06:24 < myndzi> but the bigger problem is that the "base domain" isn't always the last two tokens
06:25 < xk_id> regex has .exec which returns the whole match. How can I make it return the substr?
06:25 < xk_id> No, in my case, it is.
06:25 < phonebook_> .exec().toString()
06:25 < xk_id> psl looks perfect, btw. 
06:25 < phonebook_> but sometiems it returns null
06:25 < phonebook_> so you have to do it on two lines
06:26 < myndzi> i'm having a brain fart, but you can apply a regex and it will return a list of matches
06:26 < myndzi> specified by the capturing brackets
06:26 < myndzi> oh derp
06:26 < myndzi> string.match(regex)
06:26 < phonebook_> on a string its just "abc".match(/myregex/) // <-- is an array
06:26 < xk_id> but .exec(/\w\.domain\.com/) returns "xxx.domain.com".
06:27 < xk_id> what I need is just the "xxx" part. Can I do that with .exec()?
06:27 < myndzi> that's why i wasn't using .exec
06:27 < xk_id> hm
06:27  * xk_id checks .match()
06:27 < myndzi> "www.domain.com".match(/^(.*)\..+\..+$/)[1]
06:28 < myndzi> or something
06:28 < myndzi> that's a crap regex but it should demonstrate how to
06:28 < myndzi> i don't believe [0] is the first matching capturing group
06:28 < myndzi> i think it's the whole matched string
06:28 < xk_id> no, that returns the whole thing I think
06:28 < myndzi> > "www.domain.com".match(/^(.*)\..+\..+$/)[1]
06:28 < myndzi> 'www'
06:28 < xk_id> ok
06:29 < myndzi> you'll want to use character classes or something and validate the url though
06:29 < myndzi> perhaps parse it first and then run the regex on the extracted hostname
06:29 < owen1> i wrote a small script that run all my test files. the problem is each test is making a request to my server. and there is i race condition where 1 test add a file and the ather test remove that file. so it causes test 1 to fail.
06:29 < xk_id> no, I'm safe in my case. 
06:29 < owen1> i guess i need to run those 2 tests in sequence?
06:29 < myndzi> that would be a fair assumption
06:29 < phonebook_> http://jsfiddle.net/KpxGC/
06:30 < phonebook_> is the answer to the xxx
06:30 < xk_id> cheers, guys. thanks a lot
06:30 < myndzi> ^ that regex returns the first sequence before a .
06:30 < myndzi> mine returns everything but the last two
06:30 < myndzi> (fyi)
06:38 < xk_id> ohhh
06:38 < xk_id> x(?=y) <-- that's what I needed to know. 
06:38 < myndzi> that's called a lookahead
06:39 < myndzi> it's a zero-width assertion, which means it affects if things match or not but doesn't consume input
06:39 < myndzi> a simpler way would be something like
06:39 < myndzi> [^.]+
06:39 < myndzi> doesn't require a lookahead, just matches everything that's not a .
06:40 < myndzi> but the larger situation of "returning the part that matched, not the whole thing" is better done with .match
06:40 < myndzi> it can be convoluted to phrase a regex to match what you want and only what you want
06:43 < xk_id> myndzi: why? I can't see the difference between .match() and exec.()
06:44 < myndzi> .match follows your intent, but .exec does not
06:44 < myndzi> what if you want to extract the domain name from a url that contains a certain query string, for example?
06:44 < myndzi> that would get real messy real fast
06:45 < myndzi> for the GENERAL case of extracting the match you want, .match is the pick
06:48 < xk_id> myndzi: doesn't match() and exec() return the exact same thing?
06:48 < myndzi> no
06:48 < myndzi> match() returns a list of captured items
06:48 < myndzi> exec returns the matched string?
06:52 < xk_id> regex jiu jitsu :))
06:54 <@Nexxy> actually that depends on whether or not you use /g in the regex
06:56 <@konobi> exec returns an object
06:57 < xk_id> myndzi: why does [^.]+ stop at the first .?
06:59 <@konobi> it's a negated character class
07:01 <@konobi> myndzi: actually (.*?)\. would be sufficient
07:02 <@konobi> xk_id: so yeah... ^(.+?)\. is all you need
07:02 < phonebook_> done could google this but since im not an idiot in node for a second. does node expand on javascript's regex functionality (+= look behinds, - look aheads)
07:02 <@konobi> no
07:03 <@konobi> phonebook_: though someone could write a pcre addon if needs be
07:03 < mscdex> i have a gypified version of pcre!
07:03 <@konobi> mscdex: oh? nice
07:03 < mscdex> yeah, i use it in mmmagic
07:04 < mscdex> the libmagic binding
07:04 <@konobi> would be a useful addon
07:04 <@konobi> pre-compiled regexps would be rather useful
07:05 < mscdex> doesn't v8 do that to some degree with javascript regexes?
07:06 < mscdex> if you keep the regex object around?
07:06 < mscdex> yeah that would be neat though.... use a regex on Buffer directly
07:07 <@konobi> yeah, there's a bunch of pre-existing ones that you can use in javascript
07:07 <@konobi> like the one for a valid email address
07:07 <@konobi> required look-behind assertions
07:08 < mscdex> i was surprised to find out that look-ahead was supported when i tried it the other day
07:08 <@konobi> things like named parameters and the like are also very handy
07:09 <@konobi> but i also have a list of >3000 regexps that would be good to have instantly ready
07:09 < myndzi> konobi: \. wouldn't work because he's using exec
07:09 < myndzi> he doesn't want to capture the .
07:10 < myndzi> also lol @ valid email regex
07:10 < myndzi> i used to use an email address with a space in it just for the lulz
07:10 < myndzi> i figured no spammer would get it right
07:10 < myndzi> but it turns out 90% of websites don't get it right either
07:11 <@konobi> myndzi: it's the .+?
07:11 <@konobi> non-greedy
07:11 < phonebook_> it would have to be flipping dynamic because of the constantly updated domain suffixes
07:12 < myndzi> konobi: but it includes the . in the match text
07:12 <@konobi> nope
07:12 < myndzi> unless i misunderstand how exec works
07:12 <@konobi> myndzi: you were using .* rather than .*?
07:12 <@konobi> the question mark makes it a non-greedy capture
07:13 < myndzi> i was using a character class
07:13 <@konobi> so... ^(.+?)\.
07:13 < myndzi> i know what a non-greedy capture was
07:13 < myndzi> but the goal was to construct a regex that matched only the desired characters
07:13 < myndzi> not to match more characters and use capturing brackets
07:14 < myndzi> it looks like i was simply confused about what .exec does
07:14 <@konobi> k... then ^(?:.+?)\.
07:15 < myndzi> i was sort of implicitly gathering it based on phonebook's answer
07:15 < myndzi> .exec().tostring()
07:15 < myndzi> konobi: that doesn't solve the stated problem lol :P
07:15 < myndzi> that regex matches the text "foo."
07:15 < myndzi> the idea was to match "foo"
07:15 < myndzi> it's kind of a moot point, i was just trying to explain what was going on
07:16 <@konobi> k... so just the word "foo" ?
07:16 <@konobi> "foo".test(...
07:16 < myndzi> he wanted to extract the word 'foo' from 'foo.whatever.com'
07:16 < myndzi> one user suggested using .exec().toString()
07:16 <@konobi> k... that's a capture
07:16 < myndzi> and phrased the .exec match in such a way that it didn't match any characters that were not desired to be captured
07:17 < myndzi> so i inferred that .exec simply returned the matched characters or something
07:17 < myndzi> (this is incorrect)
07:17 <@konobi> ah
07:17 < myndzi> either way, the point is that ^[^.]+ achieves the desired result
07:17 < myndzi> and <anything>\. doesn't
07:17 < SomeoneWeird> /(\w{1,})\./
07:17 < myndzi> even if that desired result is actually erroneous
07:17 < myndzi> :P
07:18 < myndzi> also .exec.tostring errors for me lol
07:18 < myndzi> er, nm. i typoed
07:18 <@konobi> .exec()[0]
07:18 <@konobi> heh
07:19 < myndzi> i see what he was doing now
07:19 < myndzi> .exec().toString() returns a concatenation of the matches
07:19 <@konobi> mscdex: oh... i also miss \A and \Z
07:19 < myndzi> so it works if there's no capturing brackets
07:19 < mscdex> heh
07:19 < mscdex> i'll see what i can do if i get some free time coming up
07:19 <@konobi> mscdex: well, it's just Array.toString(foo.exec())
07:24 < xk_id> In relation to asynchronous, what happens if I run the same function twice? for example, "request("url", function {do stuff}); request("otherurl", function {do other stuff});"
07:24 <@konobi> they both run
07:25 < xk_id> asynchronously?
07:25 <@konobi> yes
07:25 < xk_id> Node.js doesn't get confused? duplicates the function in the memory, etc?
07:26 <@konobi> um... you called the code twice, to it runs twice
07:26 <@konobi> *so
07:26 < xk_id> even if the previous hasn't finished, right?
07:26 <@konobi> yes
07:26 < xk_id> okay.
07:26 < xk_id> do you see the point of my question?
07:26 <@konobi> the callback you pass in will be called when the request returns
07:27 <@konobi> xk_id: no
07:27 < CrawfordComeaux> are there any tools that'll watch the github repo of a node project & automatically pull latest?
07:27 < xk_id> oh ,wait. the callback is an entirely different function
07:27 < xk_id> sorry konobi. my bad
07:27 <@konobi> xk_id: you could pass the same function too
07:28 <@konobi> it's just code getting called
07:28 < xk_id> :D
07:28 < xk_id> got it
07:48 < xk_id> https://github.com/MatthewMueller/cheerio#-selector-context-root- <-- what happens if I require more than 3 search levels?
07:49 < xk_id> do I nest?
07:50 < phonebook_> xk_id, if i understand correctly, the answer is its a seperate context and it dies when the "GC" comes. this is coming from a js perspective though. i know almost 0 node
07:50 < xk_id> GC?
07:51 < phonebook_> garbage collector, when no references to variables in your closure
07:52 < phonebook_> or better said... when that closure ends
07:53 < xk_id> ah, Im so sorry. I didn't mean nesting. I meant calling it again from inside the callback
07:54 < phonebook_> the most modern context wins
07:54 < phonebook_> but anything that comes before that context remains the same
07:55 < xk_id> I'm just preoccupied with selecting what I want. 
08:34 < xk_id> https://github.com/MatthewMueller/cheerio#each-functionindex-element- <--- does this mean in order to break out of the "each()" loop, I need to "return false;"?
08:35 < xk_id> I tried and it is not working. 
08:38 < milani> how to seek to the end of file when using file descriptors in nodejs?
08:38 < milani> http://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback 
08:39 < milani> the link states that  "If position is null, data will be read from the current file position"
08:39 < milani> how to set the current position?
08:41 < Gottox> milani: it is 0 by default and will be increased by each read call.
08:42 < milani> Gottox, ok if I call read with a position 
08:42 < milani> then in the next call it should continue from there
08:42 < milani> right?
08:42 < milani> but it doesn't.
08:43 < Gottox> let me recheck.
08:43 <@konobi> milani: tried setting the position as -1?
08:44 < Gottox> milani: what do you use as fd?
08:45 < milani> konobi, -1 works correctly. but setting position to a non-zero value does not.
08:45 < milani> milani, fs.open.
08:47 <@konobi> so read(fd, buf, 0, 10, 500, ...?
08:52 < [AD]Turbo> hi there
09:25 < esamson> To the bilookkk !
09:28 < durre> I have requests coming in like /myapi/products?token=abc123232 â€¦ I want to throttle these requests by token. I'm using express & connect. is there already or module for this?
09:29 < SomeoneWeird> define throttle, durre 
09:32 < durre> SomeoneWeird: if a client with a specific token sends 100 request at once, I might want to throttle these requests to 1 request every 100ms. also, if a client makes 100 requests / second when the limit is 100 requests / hour I want to end the request saying that the limit has been reached
09:32 < SomeoneWeird> you just have to keep track of them, then
09:33 < SomeoneWeird> var requests = {}; requests[client] = 0; then on request, if(requests[client]>99) { no(); } else { ok(); requests[client]++; }
09:37 < zomg> Wouldn't it be simpler to just put the most recent valid access to a database and then just check against that, and return an erroneous response if the user exceeds the limit
09:42 < durre> hmm, thats right. this is a load balanced system so I will probably use memcached to synchronize
09:50 < boinG> using express.bodyParser to upload files, where can i get the file's client side directory path?
09:54 <@konobi> durre: restify has built-in plugin support for throttling api requests
09:57 < durre> konobi: yes, I saw that. restify is probably a better fit for what were doing, but its a bit late to change now :)
09:59 <@konobi> durre: *shrug* they're pretty lightweight wrappers, should be reasonably interchangeable
10:00 < draginx> Anyone here use axon with another language?
10:25 < nurettin> draginx: I have only used axon in f3 (php) framework
10:31 < milani> konobi, sorry. power cuts.
10:32 < milani> konobi, here is the gist: https://gist.github.com/4593636
10:34 < draginx> nurettin: im referring to visionmedia's axon
10:38 < k_89> npm ecosystem NEEDS to highlight modules that are good for standard web dev
10:39 < k_89> because after struggling for 4 days, i have been able to establish a good looking workflow
10:39 < k_89> and fuck, even standard web dev using js is damn fast
10:39 < k_89> its js mainly, that rocks
10:42 < NoelDavies> It's amazing to think how far JS has come in the past 10 years
10:44 < k_89> true
10:44 < k_89> and the language itself is pretty awesome
10:44 < Gottox> I wouldn't call it awesome.
10:44 < k_89> what would you call awesome then ?
10:45 < k_89> i find it better than python and ruby
10:45 < SomeoneWeird> js IS awesome
10:45 < Gottox> I'm more a C guy.
10:45 < k_89> eh
10:45 < k_89> now, you don't compare monster trucks to sports cars right ?
10:45 < Gottox> JS lacks very basic features and security concepts.
10:45 < k_89> like ?
10:45 < Gottox> typesafety
10:45 <@Nexxy> this thread again?
10:45 < k_89> hehe
10:46 < SomeoneWeird> lolllllllllll
10:46 < _ior> oh noes, we have a static typist in our midst
10:46 < SomeoneWeird> typesafety
10:46 <@Nexxy> what
10:46 <@Nexxy> typescript
10:46 < smwaidojwk> the only awesome thing about JS is the amount of things it can be used for
10:46 < Gottox> js is a pretty good compromise.
10:46 <@Nexxy> it's a thing if you need types
10:47 < _ior> types are for relational databases
10:47 < saturation> well js is not a perfect
10:47 < saturation> but it works
10:47 < _ior> (sorry, i've been reading steve yegge while bored at work)
10:47  * Nexxy is a perfect
10:47 < Kakera> types are for people who don't understand their own code
10:47 < k_89> i like the language itself, its the first one i have seen that makes using closures so easy and piece of everyday code
10:47 < Gottox> saturation: exactly :)
10:47 <@Nexxy> lol so much trolling
10:47 < k_89> and damn, controlling scope with closures is awesome
10:48 < SomeoneWeird> yes
10:48 < SomeoneWeird> yes it is
10:49 < NoelDavies> What's better? Sex and Beer or Controlling scope with closures? << Channel wide poll :P
10:49 < _ior> that depends. are you talking about coors lite, or, for instance, arrogant bastard?
10:49 <@Nexxy> only one of those things is actually appropriate discussion for this channel
10:50 <@Nexxy> lol
10:50 < NoelDavies> Nexxy: Beer? o.0
10:50 < Gottox> Sex and Beer, but scope control are pretty close
10:50 < NoelDavies> Haha Gottox 
10:51 < Gottox> I still try to get my gf to moan codesegments.
10:53 < _ior> just beware: she might start throwing exceptions, isntead.
10:53 < _ior> i suspect this metaphor could go too far, too quickly.
10:53 <@Nexxy> too late!
10:54 <@Nexxy> http://www.youtube.com/watch?v=FONN-0uoTHI
11:13 < Gottox> node-canvas + LED-Panel: http://www.youtube.com/watch?v=0lLpi-iH3Cs http://www.youtube.com/watch?v=a8IQ1ewoWi4
11:14 < rudiX> wow
11:14 <@Nexxy> Gottox, that's pretty cool
11:15 < Gottox> the cool thing about that is I can simply take others HTML5-canvas demos and port them over.
11:15 < _ior> TRSi?
11:15 <@Nexxy> what are you controlling the panel with?
11:16 < Gottox> Nexxy: it's a simple udp-protocol.
11:16 < Gottox> the code of the node module can be found here: https://github.com/c3ks/node-ledpanel
11:16 < cloudbender> Good Morning
11:16 < _ior> gottox, preparing something for breakp^H^H^H^H^H^H revision?
11:17 < Gottox> nah, I'm no demo-coder.
11:17 < _ior> but there's been a fair bit of hardware in wild compos in recent years :)
11:18 < Gottox> the hardware isn't done by me, a friend of mine built it.
11:19 < _ior> ahhah
11:19 < Gottox> I just did the node-module which takes a canvas context and sends it to the panel.
11:20 < _ior> cool, though
11:21 < _ior> on that note, time to brave the cold for lunch
11:21 < Gottox> thanks :)
11:25 < Gottox> a related question: does anyone know an algorithm to convert rgb to indexed colors? As the ledpanel supports only a 2bit color range.
11:26 < _ior> haven't made it to lunch yet, but once upon a time i coded up a "colour decimator" filter
11:26 < _ior> that worked much like audio decimators would
11:26 < _ior> effectively divide the sampling rate by 2, repeatedly, til you have the range you want
11:27 < _ior> it made things very ugly!
11:27 < _ior> here's the "right way" to downsample: http://en.wikipedia.org/wiki/Downsampling
11:28 < Gottox> for now I use r > 128 -> red bit high, g > 128 -> green bit high and blue is ignored.
11:28 < Gottox> thanks, I'm looking into it.
11:28 < _ior> that's certainly one way, but you are effectively asking how to downsample: take a larger sample rate (or sample space in this case, of 2^24 colours) and turn it into a smaller one (2^2 colours)
11:29 < Garo_> Has anybody any experience debugging a running node.js instance with gdb? My program is stuck in some loop where strace shows that it's only running gettimeofday constantly in a loop. I'm not very experienced gdb user, so all tips are appreciated.
11:32 <@Nexxy> Garo_, I don't have any experience with gdb, but have you tried node-inspector / v8-profiler?
11:33 < Garo_> Nexxy: not in this case. I can reproduce this only in production and I've understood that running those would decrease execution performance so I'd rather use gdb
11:33 < TheAceOfHearts> does anyone here know any JS (preferably ndoe.js) related internships in the US a student could apply for? 
11:34 < jesusabdullah> TheAceOfHearts: I don't, but I can give you advice if you would like it
11:34 < Garo_> Nexxy: I'm hoping that I could examine the v8 variables with gdb to determine the approximate location in my .js code where the execution is going circles. Other option would be somehow to get inside the node.js event loop to see what's in there.
11:35 < TheAceOfHearts> jesusabdullah: sure, shoot :P
11:35 < jesusabdullah> Okay
11:35 < jesusabdullah> So first of all, do you have github? If so link it
11:35 < jesusabdullah> Second of all, do you have any open source node.js modules? If so make sure they are on both github and npm
11:36 < jesusabdullah> TheAceOfHearts: ^^
11:36 < TheAceOfHearts> I don't have a github :(, I worked on a node.js project last semester, and I'm thinking of doing two or three things this semester too
11:37 < TheAceOfHearts> but I keep it in bitbucket, and it's private, I've been thinking of cleaning it up and putting it out there, though
11:37 < SomeoneWeird> that would be the first thing todo
11:38 < TheAceOfHearts> so, put up all big projects on github?
11:38 < jesusabdullah> TheAceOfHearts: Your github is your portfolio
11:39 < TheAceOfHearts> ah, cool
11:39 < jesusabdullah> TheAceOfHearts: unfortunately github won the social momentum war, you'll find it's much much easier to share code with github cause everyone else is on there
11:39 < jesusabdullah> TheAceOfHearts: so I'd migrate at least some of your work to github
11:39 < _ior> yikes, is all this true in the programmer jobhunt these days?
11:39 < _ior> i'm so glad i'm no longer a professional programmer
11:39 < jesusabdullah> TheAceOfHearts: it's also important to publish open source modules on npm
11:39 < TheAceOfHearts> I'm really starting to get into the whole node.js and JS community
11:39 < jesusabdullah> TheAceOfHearts: nothing crazy, doesn't have to be perfect
11:40 < jesusabdullah> TheAceOfHearts: you just have to be able to be like, "see I write code, here's some modules I wrote"
11:40 < jesusabdullah> TheAceOfHearts: and then people know you're legit, y'know?
11:40 < TheAceOfHearts> I don't have any problem with github
11:40 < TheAceOfHearts> yeah, I get you
11:40 < jesusabdullah> Word
11:40 < TheAceOfHearts> that makes sense
11:40 < jesusabdullah> Okay cool
11:41 < jesusabdullah> so if you do that you'll have a portfolio, and if you write a good module people will be like, "oh yeah I use x TheAceOfHearts wrote that"
11:41 < TheAceOfHearts> nice :D
11:41 < SomeoneWeird> _ior, why so?
11:41 < jesusabdullah> the second part is to make sure people see your stuff, and I don't mean "whoring yourself out" as much as I mean, hang out here, and maybe in #stackvm and #nodejitsu and hang out, show people what you're doing
11:42 < TheAceOfHearts> stackvm? 
11:42 < jesusabdullah> TheAceOfHearts: oh, and if there's a company that interests you and they do a lot of open source, try sending them pull requests
11:42 < _ior> well, if i were a hiring manager, i would certainly hire someone who has contributed a heavily used package to the repository of any language which my company is using ... but i wouldn't discount people just because they haven't
11:42 < _ior> afterall, the chances that i'm a hiring manager in a company that's ;positioned to ONLY hire superstars is quite slim
11:42 < jesusabdullah> TheAceOfHearts: nodejitsu hired a lot of their talent through the pool of open source contributors to flatiron and their other projects
11:43 < TheAceOfHearts> oh, cool
11:43 < jesusabdullah> _ior: it's not about hiring people that only have **heavily** used modules
11:43 < jesusabdullah> _ior: it's about showing that, yes, you can/do write code
11:43 < SomeoneWeird> lol
11:43 < _ior> but surely there are other ways
11:43 < jesusabdullah> _ior: if your github has like 5 projects I just assume you're a casual coder at best
11:43 < jesusabdullah> _ior: keeping in mind, of course, that many people hack on specific projects, but, like
11:43 < _ior> why give away the source of everything you've done, though? surely a portfolio of things that are running is enough?
11:43 < nanashiRei> When inherting the EventEmitter, is the events.eventEmitter.call(this) call essential?
11:44 < _ior> i know i'll get lynched for that in a channel that's about an opersource project :)
11:44 < jesusabdullah> _ior: would you hire an artist if you'd never really seen their work?
11:44 < _ior> the problem about opersourcing everything is that people get to see all your mistakes
11:44 < _ior> :D
11:44 < TheAceOfHearts> what you're saying makes sense
11:44 < jesusabdullah> mistakes are okay
11:44 < jesusabdullah> I mean, look at my github's older projects, you can really see my progression
11:44 < _ior> i mean, i hate talking to enterprise java coders cause they're all "you didn't follow pattern x"
11:44 < TheAceOfHearts> I've been thinking of making a page with the projects I've done, but I'm not sure about putting all the source code out there, since a few of the projects are really hacked together
11:44 < SomeoneWeird> no, nanashiRei 
11:44 < _ior> and i'm all "i didn't read the @#%$@#$ GoF book"
11:44 < nanashiRei> _ior: your code is only half as bad as you think it is.
11:45 < jesusabdullah> I mean
11:45 < nanashiRei> Rule of thumb.
11:45 < jesusabdullah> I've never read GoF either
11:45 < _ior> nanashirei, considering you've never seen some of the horrible hacks i've produced, i'lm quite flattered XD
11:46 < TheAceOfHearts> heh
11:46 < _ior> yeesh, i remember trying to get j2ee to talk to j2me to talk to bea weblogic to talk to sap s/3
11:46 < _ior> that was just no fun at all
11:46 < _ior> and who would want to see that published ANYWHERE?
11:46 < jesusabdullah> TheAceOfHearts: I have tons of half-baked, broken projects, people mostly only see the good, and the fact that you have a high volume of work
11:46 < nanashiRei> No, really. I always thought my code is shit, until i started going open source and got all those "WOW" statements :s
11:47 < _ior> hahaha
11:47 < jyp> hi guys 
11:47 < TheAceOfHearts> that makes sense
11:47 < _ior> the only code i've ever written that i've looked back at and said "hey! this shit is cool!" was something i scrapped together for an embedded system in mips assembly
11:47 < _ior> and no one would bother to read it to see what makes it cool
11:47 < jesusabdullah> haha, nice
11:48 < jesusabdullah> I wrote some nsis code for an installer that was pretty leet
11:48 < jesusabdullah> mostly because it was "working around" the limitations of said platform
11:48 < _ior> yeah!
11:48 < nanashiRei> The only cool thing i produced is https://osu.yas-online.net :D
11:48 < _ior> that's exactly what makes it cool
11:48 < TheAceOfHearts> http://www.youtube.com/watch?v=J7QgHDa8LOQ I made this learning ASM 
11:48 < nanashiRei> but it smells. It's php
11:48 < SomeoneWeird> only cool thing i've done is https://github.com/SomeoneWeird/msfjs
11:48 < SomeoneWeird> :P
11:48 < _ior> liek "hey man i just implemented feedback and echo delay in a circular buffer in only 8k and i only had 2 8bit registers to store pointers AND data"
11:49 < _ior> but you know? who cares?
11:49 < jesusabdullah> TheAceOfHearts: Here's a dead project https://github.com/jesusabdullah/node-prompt-0.0.x
11:49 < jesusabdullah> SomeoneWeird: neat
11:50 < jesusabdullah> Yeah that's cool _ior, hardware hackers would geek out over that for sure
11:50 < SomeoneWeird> jesusabdullah, there's a fully functioning web interface for it too, https://github.com/SomeoneWeird/msfjsweb
11:50 < SomeoneWeird> even one of the guys from rapid7 starred it :P
11:50 < jesusabdullah> word
11:50 < _ior> well, anyway, having been in the position of interviewing and hiring junior team members in the past (though never in such a social-web2.0-etc-etc enabled framework like the nodejs community) i can say that while i appreciate superstartdom, i also prefer to look for someone who demonstrates they can learn what they do not know more than already being super
11:50 < TheAceOfHearts> huh
11:51 < jesusabdullah> Kenneth Reitz once mentioned https://github.com/jesusabdullah/pyee in a sentence of a blog post
11:51 < jesusabdullah> that was pretty cool
11:51 < jesusabdullah> even cooler, I get patches for pyee sometimes
11:51 < _ior> but perhaps i'm just showing curmudgeonly attitudes by not subscribing to any of the social media that seems to be so hot these days
11:51 < jesusabdullah> _ior: I agree, and I think having an open source portfolio is good for that
11:52 < jesusabdullah> _ior: you see a lot of code someone's written, you can see a steady progression and a desire to play
11:52 < _ior> unfortunately, you're likely to meet a lot of interviewers or hiring managers like me ... or worse still: people with attitudes like mine without the tech skills to make an informed opinion!
11:52 < TheAceOfHearts> I think I'm gonna start putting my stuff out on github from now on, then
11:52 < TheAceOfHearts> I'm feeling motivated
11:52 < _ior> errr ... slightly informed opinion :D
11:52 < jesusabdullah> _ior: I refuse to think of programmers are "stars", they're just people, and some of them have more practice or a talent for a particular way of thinking than others
11:53 < jesusabdullah> I mean
11:53 < jesusabdullah> I'm friends with a number of the "node.js rock stars" as it were
11:53 < _ior> sure, everyone's "just people" but then there's RMS
11:53 < jesusabdullah> yeah but he has swords
11:53 < jesusabdullah> and doesn't write node (right?)
11:53 < Gottox> jesusabdullah: in my portfolio one can see my desire to start new projects before the old ones become mature.
11:53 < TheAceOfHearts> well, being a star probably helps finding internships/jobs :p
11:54 < _ior> you're probably right, in that node is such a young community that github is the way to go to get node jobs
11:54 < _ior> i really don't know
11:54 < _ior> i'm basically in here because i had a question once and then people here were actually helpful and funny
11:54 < SomeoneWeird> lol yeah
11:54 < _ior> i'm like a tagger-on
11:54 < _ior> so don't listen to me
11:54 < _ior> also i went to jsconf without knowing a single thing about js
11:54 < _ior> :)
11:54 < jesusabdullah> <3
11:55 < _ior> (though really i only went for the free drinks)
11:55 < _ior> (shh! don't tell anyone)
11:55 < TheAceOfHearts> I'm hanging out here because when working on stuff I can usually find someone to point me in the right direction, or I can pick up some cool knowledge, and the people are usually very nice
11:55 < jesusabdullah> Naw _ior I think you're right about hiring rock stars, you really want to hire people with the engineer mentality
11:55 < _ior> ace of <3s, exactly. it's so rare for a support channel :)
11:55 < TheAceOfHearts> but the JS world is massive @.@
11:55 < _ior> jesusabdullah, only if i'm hiring engineers ;)
11:56 < _ior> but these days i actually do far more stats than i do engineering
11:56 < _ior> so coding is only one of the skills i look for
11:56 < jesusabdullah> TheAceOfHearts: The way Nodejitsu hired was like, "oh hey we need a support guy, do we know anybody?" "Oh yeah that one dude in the irc works on flatiron a lot and gets along with our other users"
11:56 < _ior> meh, anyway. there's no right answer to this one, i think, and your advice is almost certainly more useful than mine is
11:57 < jesusabdullah> _ior: By engineer I don't mean "codes" I mean more like, thinks in terms of, like, wanting to know how things work and solve problems
11:57 < TheAceOfHearts> that's actually really cool
11:57 < jesusabdullah> my degree's in mechanical engineering
11:57 < _ior> ahhh yeah
11:57 < TheAceOfHearts> I appreciate the advice :), I'm gonna go to class now @.@, thanks a lot! 
11:58 < _ior> one of my favourite quotes is by a statistician named george box: "all models are wrong, but some are more useful than others."
11:58 < jesusabdullah> TheAceOfHearts: What's your degree? XD
11:58 < jesusabdullah> TheAceOfHearts: also you're welcome
11:58 < jesusabdullah> _ior: that's lulz
11:58 < foofoobar> Hi. I'm coding something which is similar to a blog structure: A post can be related to a category. I want to use mongodb as my database. Saving/retrieving of the articles is now problem, but I wonder how I should save the categories. usually I would just do sth. like {title: foobar, category: barfoo, id: â€¦.}. So when I want to show a list of categories now, what do I do?
11:58 < jesusabdullah> _ior: "Let's assume that all horses are perfectly round spheres of exactly the same size and mass..."
11:59 < TheAceOfHearts> Computer Engineering, this semester I'm taking a Microprocessor Interfacing course, which is apparently the hardest course in my degree, after this semester I should be home-free
11:59 < foofoobar> Should I hardcode the categories in an array?
11:59 < _ior> jesusabdullah hahahaha yeah
11:59 < SomeoneWeird> lolol
11:59 < _ior> aceofhearts, most fun class i ever had was a microprocessor design class. 
11:59 < jesusabdullah> _ior: so you sling some R around?
11:59 < _ior> but don't neglect your abstract data structures class
11:59 < _ior> jesusabdullah yeah most of my work in in R
11:59 < _ior> can't stand coding in stata or in matlab
12:00 < foofoobar> Any hint for me?
12:00 < TheAceOfHearts> _ior: my favorite EE course has been a micro course too :), we learned ASM and such, but the first project was making a microprocessor using logic gates; it was amazing
12:00 < Gottox> foofoobar: I would use a Array of strings for that scenario.
12:00 < TheAceOfHearts> anyway, I really be off to class :(, thanks for the advice! I think I'm gonna setup a github account and start putting stuff up :D
12:00 < SomeoneWeird> good :)
12:00 < foofoobar> Gottox, okay. And how would you place this to an express.js project? Should I create a models/categores.js file ?
12:00 < _ior> aceof<3s :o that sounds pretty cool, kinda like applied FPGA design or something
12:01 < SomeoneWeird> i should start looking into a internship too maybe
12:01 < SomeoneWeird> an*
12:01 < Gottox> foofoobar: Do you want to safe meta-information with the category?
12:01 < _ior> okay seriously now lunchtime afk
12:01 < Gottox> -f+v
12:01 < foofoobar> Gottox, the Category title is enough, maybe an ID also
12:02 < jesusabdullah> _ior: matlab is kinda hilariously bad
12:02 < jesusabdullah> _ior: unless you're working strictly with matrices
12:02 < jesusabdullah> _ior: I prefer numpy for that though
12:02 < Gottox> foofoobar: if the title is enough, I wouldn't use a model, but instead using the Categories title directly
12:03 < foofoobar> Gottox, and if I want to add some meta information like a icon-name etc.? Then use a models/category.js file and put that js-dict in there?
12:04 < Gottox> foofoobar: do you use Mongoose or mongodb directly?
12:05 < foofoobar> I do not have chosen a database-module for this, this would be the second thing I'm thinking of
12:05 < foofoobar> Why is this important?
12:05 < Gottox> I don't know the database module of express, but I believe they would do that, yes.
12:06 < Bwild> ohnoes 
12:06 < Gottox> anyway, heres a similiar example which uses nested objects: http://docs.mongodb.org/manual/reference/projection/elemMatch/#_S_elemMatch
12:07 < foofoobar> Okay
12:08 < jesusabdullah> Does express HAVE a "database module" ?
12:08 < jesusabdullah> I don't think it has any sort of blessed orm
12:08 < SomeoneWeird> it does not
12:10 < SomeoneWeird> Anyone have any ideas for a project? /me bored
12:13 < jesusabdullah> fix my projects
12:13 < jesusabdullah> ;)
12:13 < SomeoneWeird> make me
12:13 < SomeoneWeird> :p
12:14 < cloudbender> Mathemeticians are like Yogi: they can levitate, but only for a few milliseconds, between jumps.
12:15 < cloudbender> <<<< expects tomatoes to be thrown
12:29 < cloudbender> Studying closures
12:30 < cloudbender> Interesting
12:30 < foofoobar> Is it possible in express.js to make my "model" accessible in all views?
12:31 < jesusabdullah> When I first started javascript I really thought closures were this crazy special thing
12:32 < jesusabdullah> turns out I used them all the time but took them for granted
12:34 < SomeoneWeird> ye
12:37 < xk_id> How do I call a callback function earlier? by manually throwing an error?
12:38 < MI6> joyent/node: Ben Noordhuis v0.8 * d7bf7ed : zlib: don't assert on malformed dictionary  Handle Z_DATA_ERROR errors fr (+1 more commits) - http://git.io/xXx3XQ
12:38 < cloudbender> I'm wondering if closures are leaky
12:38 < SomeoneWeird> xk_id, hm?
12:38 < zomg> cloudbender: leaky?
12:39 < cloudbender> memory
12:39 < xk_id> SomeoneWeird: I need to jump to the callback from within a async.series()
12:39 < zomg> cloudbender: only if you do a circular reference afaik
12:39 < cloudbender> ok I'll consider that tnx
12:39 < SomeoneWeird> cb("error")
12:39 < SomeoneWeird> or something
12:39 < zomg> though I'd imagine in most situations the vm would be smart enough to sort thouse out
12:39 < SomeoneWeird> just pass an argument, iirc
12:39 < xk_id> i think you're right
12:40 < cloudbender> <<< has problems with 'vm would be smart enough'
12:40 < zomg> hehe
12:40 < zomg> yeah I'm not entirely up to date whether circular refs are still an issue with JS VMs
12:41 < cloudbender> tnx
12:42 < _ior> jesusabdullah, i don't really work with python so i can't comment on numpy, but yeah, matlab is good for matrics
12:43 < _ior> has a decent set of sig processing and neural net packages too
12:43 < jesusabdullah> Yeah, the scikit packages ain't bad
12:43 < jesusabdullah> it's a nice platform for casual scientific computing
12:43 < _ior> but i still prefer to work in R
12:43 < _ior> i find it so much faster to actually get anything done
12:43 < jesusabdullah> Yeah, R is a good dsl
12:44 < jesusabdullah> I'm waiting for R's webstuff to become better
12:44 < jesusabdullah> secretly I just want libuv + http-parser bindings in R
12:45 < verysoftoiletppr> hello friends
12:45 < verysoftoiletppr> can anyone give me a hand?
12:45 < verysoftoiletppr>  I'm trying to figure out what's the purpose of the object named "child" being passed to new Spooky() in https://github.com/WaterfallEngineering/SpookyJS#usage
12:46 < jesusabdullah> with your toilet paper? nothx
12:46 < _ior> R's webstuff?
12:46 < _ior> you mean Rapache?
12:46 < _ior> have you looked at Rstudio server?
12:47 < jesusabdullah> I don't see this object verysoftoiletppr ?
12:47 < jesusabdullah> _ior: I was thinking more along the lines of Rserve
12:47 < jesusabdullah> _ior: I have not heard of Rstudio, is it oss?;
12:48 < jesusabdullah> Ah, I see
12:48 < verysoftoiletppr> jesusabdullah is was modified 14 hours ago: https://github.com/WaterfallEngineering/SpookyJS/commit/9ef16fae836149ab8551edf2ae01850d02fe2ff4
12:48 < jesusabdullah> verysoftoiletppr: probably old api, likely dealing with how to run phantom
12:49 < _ior> https://github.com/rstudio/rstudio
12:54 < jesusabdullah> Yeah _ior, I want less of an ide or interactive environment and more of a way of exposing R routines over an http api
12:55 < jesusabdullah> I think there's actually an Rserve client for node
12:55 < _ior> is there? :o
12:55 < _ior> i know rapache
12:56 < _ior> rserve, too
12:57 < jesusabdullah> _ior: https://jakut.is/git/RSERVECLIENT/tree/ was what I had in mind
12:57 < jesusabdullah> _ior: https://github.com/albertosantini/node-rio appears similar
12:57 < _ior> then there's the stuff yeroon.net provides
12:57 < _ior> http://www.yeroon.net/
12:58 < _ior> but that's more built on rserve or some such
12:58 < _ior> hm, neat!
12:58 < _ior> thanks for pointing that out
12:59 < _ior> what since i'm in the process of rewriting our analytics platform i node
12:59 < _ior> (screw php)
13:01 < MI6> joyent/node: Ben Noordhuis v0.8 * 13d86a8 : doc: document PYTHON env var in README - http://git.io/F0QYzg
13:03 < rounce^work> hey all, having a bit of a lack of brain today
13:03 < SomeoneWeird> wasup
13:03 < rounce^work> what's the argument to set the node debugger port to something other than 5858 
13:05 < rounce^work> tried setting debugger_port in v8 opts but no joy :(
13:05 < rounce^work> I'm sure I've done this plenty of times before
13:06 < rounce^work> guh
13:06 < rounce^work> nvm
13:06 < remysharp> if I spawn a child using .fork - is there a way for that forked child to know it's a child? (ie. so I can also run the child process entirely separately in a different mode)
13:06 < SomeoneWeird> node --debug=port file
13:06 < rounce^work> just dawned on me
13:07 < rounce^work> yeah
13:07 < rounce^work> cheers 
13:08 < rounce^work> @remysharp
13:08 < rounce^work> check the pid of the parent
13:08 < rounce^work> if there is one 
13:09 < rounce^work> *pid file (sorry to flood, brain is sporadic today)
13:09 < jesusabdullah> It's not flooding until you copy paste
13:09 < remysharp> where would I find if there's a parent pid - that's the bit I'm missing?
13:09 < rounce^work> write it to a file
13:09 < rounce^work> =D
13:09 < rounce^work> 1sec I don't have the mental capacity to explain atm, but lemme google that for you
13:10 < rounce^work> from stackoverflow: http://stackoverflow.com/questions/5566009/node-js-parent-process-id
13:10 < rounce^work> bading!
13:10 < rounce^work> exactly like that link
13:11 < rounce^work> not sure about the try catch, I'd use exists, not sure it's worth a stack frame just for that
13:11 < rounce^work> *an extra frame
13:12  * rounce^work has just been given a load of remysharp's books
13:12 < remysharp> rounce^work: cheers. bit dirty that way - maybe I can just drop a message in via the comm channel, or just give it an argument. It's a bit nasty either way.
13:12 < rounce^work> yeah
13:12 < remysharp> rounce^work: hand-me-downs :)
13:12 < rounce^work> yeah
13:12 < rounce^work> off my friend Katie 
13:12 < cloudbender> function() { //.. }
13:12 < cloudbender> IS that formed ok ?
13:13 < rounce^work> no
13:13 < rounce^work> commenting out closing brace
13:13 < jesusabdullah> yeah, what are you trying to do there
13:13 < rounce^work> who you gave them to a while ago iirc
13:13 < jesusabdullah> maybe you mean function () { /* ... */ }
13:13 < jesusabdullah> ?
13:13 < cloudbender> Sorry guys, working on closures and scope today
13:13 < rounce^work> she used to date aral a while ago (I think)
13:14 < cloudbender> function() { }
13:14 < cloudbender> better ?
13:15 < jesusabdullah> cloudbender: https://gist.github.com/1118657 idk if this is helpful, I used it to explain closures to a person once, I'm guessing you know what they are but aren't used to thinking about how to take advantage of them/
13:16 < cloudbender> jesusabdullah yes I understand them but so many discussions on the web are so poorly written, and yes I need more practice thinking in 'JavaScript'
13:16 < holzp> cloudbender, good chapter on closures in http://jsninja.com/
13:16 < cloudbender> thanks people
13:17 < cloudbender> The following expression seems ill-formed
13:17 < cloudbender> (function() { }() )
13:17 < rounce^work> no
13:17 < rounce^work> totes legit brahh
13:19 < _ior> closures solve all problems in js. if you have identified the function call that causes your program to behave in undefined ways, but not what exactly, just wrap that function definition in another function that returns it as an anonymous function but closes over the needed variables
13:19 < _ior> i guarantee it will solve your pboelm
13:19 < _ior> problem.
13:19 < _ior> any problem
13:19 < SomeoneWeird> lol
13:19 < _ior> (except, perhaps, my typing)
13:19 < rounce^work> anonymous function is declared, then executed, and it's execution scope (though lexical persists) is confined to the execution context
13:20 < cloudbender> No, I get that _ior, I just need more practice in my brain meat
13:21 < _ior> well, er, i say that kinda tongue-in-cheek
13:21 < jesusabdullah> haha
13:21 < _ior> closures are not panacaea
13:21 < _ior> but they are pretty great!
13:21 < jesusabdullah> too many variables? fuck it, create a closure with an iife
13:21 < jesusabdullah> good to go
13:21 < rounce^work> hahahaha
13:21 < _ior> exactly!
13:21 < rounce^work> Rather a little "closure first ask questions later", no?
13:22 < Or1on> :oD
13:22 < SomeoneWeird> lmao
13:22 < jesusabdullah> you know it's true >:)
13:23 < rounce^work> @cloudbender: I'd mess around with a JS profiler and check out the possible performance implications
13:23 < rounce^work> they can be a pain in a few cases and can really piss off GC
13:24 < _ior> function fixBugs(codestring) { return function(codestring) { console.log(codestring); } }();
13:24 < _ior> done and dusted.
13:24 < xk_id> Why is Node.Js finding an error in an else statement that doesn't get executed?
13:25 < _ior> oops, i passed too many variables.
13:25 < rounce^work> not enough it looks like
13:26 < _ior> that's also possible. i wasn't really paying attention to what i was typing
13:26 < rounce^work> hjaha
13:26 < _ior> but see! that's the magic of closures
13:26 < holzp> that jresig book has a beautiful example of closures used to make multiple agrument signatured functions
13:26 < rounce^work> haha
13:26 < SomeoneWeird>  <_ior> function fixBugs(codestring) { return function(codestring) { console.log(codestring); } }(); < lolol
13:26 < holzp> one of the most elegant pieces of code i've seen
13:27 < rounce^work> _ior, then again try using closures all over the shop with a lot of object creation/destruction
13:27 < xk_id> Sorry, forget my question, I R dumb.
13:30 < cloudbender> I need to rtfm says me
13:32 < cloudbender> I'm too much accustomed to thinking of handles and pointers
13:52 < cloudbender> In the following expression ...
13:53 < cloudbender> function (x) { } ()
13:53 < cloudbender> ... what purpose do the training paranthesis serve ?
13:53 < cloudbender> er, trailing
13:54 < cloudbender> I can't find a formal reference to that pattern
13:54 < Kvisle> cloudbender: it executes the function
13:55 < Kvisle> immediatly
13:55 < cloudbender> ok
13:56 < cloudbender> (function (x) {} )
13:57 < _ior> yeah
13:58 < cloudbender> I see this also, and it seems wrong ...
13:58 < cloudbender> ( function (x) {} () )
13:58 < _ior> sorry, my "yeah" was in the wrong channel :)
13:58 < _ior> i'm not sure why you'd need to wrap a function def in parens
13:59 < cloudbender> Mozilla is calling it a language requirement
13:59 < cloudbender> maybe mozilla needs a slap today
14:01 < SomeoneWeird> cloudbender, huh
14:02 < cloudbender> this is a pattern they show ...
14:02 < cloudbender> ( function (x) {} () )
14:03 < cloudbender> anyway sorry I'll take it outside
14:04 < SomeoneWeird> so?
14:11 < exit2> Anyone have any module ideas? :P
14:22 < ash__> hi, im trying to use domains to isolate a type error in a 3rd party library
14:22 < ash__> http://pastie.org/private/iexulds93m8fbfpzdbmtoq
14:23 < ash__> the d.on "error" catches error fine, but the error still leaks out beyond the domain, am i doing anything wrong here?
14:28 < rounce^work> exit2, yea wanna join ph0rces?
14:45 < MI6> joyent/libuv: Andrius Bentkus master * bdb498f : unix, windows: return UV_EINVAL, not UV_EFAULT  A wrong multicast members - http://git.io/FiuObQ
14:50 < thomblake> I don't understand.  There are *two* people named isaac?
14:51 < thomblake> There must be some mistake.
14:57 < exit2> thomblake: http://www.thinkbabynames.com/meaning/1/Issac
14:58 < thomblake> exit2: I think you meant http://www.thinkbabynames.com/meaning/1/Isaac
14:59 < exit2> thomblake: ah yes, I liked the chart
15:17 < josh_> any bay area node gurus up in here?
15:19 < Shinister> I've lived in a bay area.
15:19 < Shinister> but probably not the one you're talking about.
15:21 < zomg> I also live in a bay area
15:21 < zomg> :P
15:22 < josh_> are you a guru? lol
15:22 < josh_> not the bay i'm talking about maybe?
15:22 < josh_> not the bay i'm talking about maybe?
15:22 < zomg> haha yeah _a_ bay area, not _the_ bay area ;)
15:22 < josh_> i see i see
15:23 < zomg> I am pretty decent with node tho, or at least I like to think so
15:23 < josh_> would you mind shooting me an email?
15:23 < SomeoneWeird> i live in a bay area too!
15:23 < SomeoneWeird> lol
15:24 < zomg> josh_: depends on why I should be doing that =)
15:24 < josh_> because i wanna give someone money to help me out on a project!
15:24 < zomg> haha
15:24 < zomg> in that case, most certainly
15:24 < josh_> haha
15:24 < SomeoneWeird> lmao
15:24 < MI6> joyent/libuv: Ben Noordhuis master * 7841f77 : build: don't export _POSIX_C_SOURCE on non-linux  Don't export _POSIX_C_S - http://git.io/7Yz3zw
15:24 < zomg> what's your address and what do you want me to write into the mail?
15:24 < zomg> :P
15:24 < SomeoneWeird> "I can help give me money"
15:25 < MI6> joyent/node: Ben Noordhuis master * 814bdf0 : deps: upgrade libuv to 7841f77 - http://git.io/5dTxZQ
15:25 < josh_> just drop me a line at selektah@lavabit.com
15:25 < zomg> Will do
15:25 < josh_> brrb
15:40 < maccs> hey
15:41 < maccs> I am currently writing a paper about async technologies and node.js at university. i am looking for information regarding the future development (e.g. developer roadmap or similar). can anyone help?
15:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:50 < jan____> Is there a way to programatically do the equivalent of `npm config set a b`?
15:51 < rounce^work> jan____: npm.config.set
15:52 < jan____> rounce^work: uh, huh?
15:52 < rounce^work> https://npmjs.org/api/npm.html#METHODS-AND-PROPERTIES scroll up a bit
15:53 < jan____> rounce^work: #facepalm
15:53 < jan____> rounce^work: thanks :D
15:54 < MI6> joyent/libuv: Ben Noordhuis master * cf1dc61 : test: remove .travis.yml  Travis CI was generating a lot of false positiv - http://git.io/W8_tQw
16:01 < jan____> rounce^work: pardon my thickness, but I canâ€™t seem to see what `configObject` is supposed to be.
16:01 < jan____> "an object hash of top-level configs" could be anything
16:01 < rounce^work> key : value
16:01 < rounce^work> { k : v }
16:02 < jan____> rounce^work: s I have to parse, say, ~/.npmrc myself and provide it as a hash?
16:05 < SomeoneWeird> git repo's that don't have a readme should be banned
16:05 < SomeoneWeird> from life
16:05 < tonka> >.<
16:06 < rounce^work> jan____: This is for runtime setting of NPM config 
16:06 < rounce^work> which is what I assumed you were doing
16:08 < jan____> rounce^work: sorry I wasnâ€™t too clear. this is a node script doing some setup tasks, like recording a password over readline(). to make local devving easier, Iâ€™d like to store it in ~/.npmrc
16:08 < jan____> rounce^work: `npm config set a b` does that for me, but Iâ€™d like a code-API and avoid exec() :)
16:09 < foofoobar> I'm trying to add some data to a mongodb (mongoose) via coffee-script. This is my little script: http://pastie.org/5825230
16:09 < foofoobar> I get the line "Saved one entry." two times, then the script does not end
16:09 < foofoobar> and there are no entries in the database
16:10 < foofoobar> What am I doing wrong?
16:15 < foofoobar> any hints?
16:15 < holzp> i dont know much about it
16:15 < holzp> but I do remember somsne making astink about silent fails from at least one of the nlsqls
16:15 < holzp> nosqls
16:16 < holzp> perhaps its not writing correctly and you just are not being informed
16:16 < brettlangdon> foofoobar, what does "new Job(data).save" do? how does it get access to the mongodb connection you are creating?
16:19 < foofoobar> brettlangdon, its a mongoose model
16:19 < foofoobar> This is the model: http://pastie.org/5825286
16:19 < foofoobar> I call everything via "coffee myscript.coffee"
16:19 < foofoobar> I'm trying to do it as in this example; https://gist.github.com/1025038
16:20 < brettlangdon> foofoobar "Important! If you opened a separate connection using mongoose.createConnection() but attempt to access the model through mongoose.model('ModelName') it will not work as expected since it is not hooked up to an active db connection."
16:20 < brettlangdon> https://github.com/LearnBoost/mongoose#accessing-a-model
16:22 < brettlangdon> also, it looks like save can take a callback to tell you if an error has occurred, I would recommend doing that as well
16:23 < rounce^work> jan____: ahhh, I see. AFAIK writing to the .npmrc is your only option
16:24 < jan____> rounce^work: ok, thanks
16:24 < foofoobar> brettlangdon, "if you open a speerate connection". But why separate connection? I'm just opening one connection
16:24 < brettlangdon> right, but your model doesn't belong to a connection
16:24 < brettlangdon> *active connection
16:25 < foofoobar> brettlangdon, why not? It's not done different in the example, or is it?
16:25 < brettlangdon> if you take a look at that link I posted from mongoose's documentation
16:27 < foofoobar> brettlangdon, yeah, but I don't now understand when to use moongose.model(â€¦) and when to use conn.model(â€¦)
16:27 < foofoobar> Also your second hint gave me the following error: Cast to date failed for value "function now() { [native code] }" at path "date"
16:27 < foofoobar> Maybe this already solves it
16:27 < brettlangdon> it might, I have never used mongoose before, but from what I can see that might help
16:28 < foofoobar> Okay, I'm getting "Null" as an error now, but its still not inserted
16:29 < brettlangdon> something worth trying, is in your model create the connection and do conn.model and see if that works
16:31 < jan____> rounce^work: turns out configObject is optional and all configs are loaded if ommitted.
16:31 < rounce^work> huzzah
16:31 < rounce^work> good to know I'll keep that in mind
16:32 < jan____> rounce^work: to be more precise, all configs are always loaded, configOptions just is a local override
16:34 < jan____> rounce^work: https://github.com/isaacs/npm/pull/3087
16:37 < rounce^work> Wunderbar!
16:41 < foofoobar> brettlangdon, I don't think its a problem with the connection
16:41 < foofoobar> I added a handler for a connection error
16:41 < foofoobar> But there is no error
16:41 < foofoobar> also if the connection would not work the .save error handler would not return "null"
16:42 < brettlangdon> foofoobar, I am not sure, the only thing I can think of is that the model doesn't have an active db connection to use. and the mongoose documentation shows using conn.model instead of mongoose.model and says it is the proper way of doing it, all I have to go on, sorry if that is not helpful
16:43 < foofoobar> brettlangdon, but the conn.model should only be used if a _separate_ connection was opened. 
16:43 < brettlangdon> foofoobar, then I don't know, sorry, good luck
16:44 < foofoobar> thanks anyway
16:44 < foofoobar> :)
16:44 < brettlangdon> np
16:44 < andrepadez> Hi, i am newb to mongoose and am getting a very strange behaviour, can someone please help? https://gist.github.com/4596065
16:53 < andrepadez> ping
16:56 < brettlangdon> andrepadez, I am not a mongoose user, but can you describe the strange behaviour?
16:56 < andrepadez> brett, it's all in the gist
16:56 < andrepadez> in the comments
16:57 < andrepadez> i use Owner.findOne({_id: ObjectId(location.ownerid)}, function(err, owner){});
16:57 < andrepadez> and i get owner = location object instead of owner object
17:00 < brettlangdon> andrepadez, oh, I see, let me take another look at it
17:03 < CrawfordComeaux> Does anyone know of a way to get @import "some/relative/path" to work in less when it's used with express?
17:04 < brettlangdon> andrepadez, sorry I don't see what could be causing that error, also, I assume that 'err' in that callback is null?
17:05 < andrepadez> yes, it is null
17:06 < brettlangdon> andrepadez, out of curiosity, why the IIFE?
17:06 < andrepadez> IIFE???
17:07 < andrepadez> brettlangdon: IIFE? what is that?
17:07 < brettlangdon> immediately involved function expression
17:07 < andrepadez> oh, sorry
17:08 < brettlangdon> andrepadez, it's ok
17:08 < andrepadez> brettlangdon: that is because the counter i would always have its final value when the for is executed
17:08 < brettlangdon> oh right, yeah, sorry, should have noticed that
17:08 < andrepadez> as models.Owner.findOne is async
17:08 < andrepadez> :)
17:09 < andrepadez> brettlangdon: tell me something, to a newb in nosql
17:09 < cloudbender> Is there a codepaste area we can use with #node.js ?
17:10 < brettlangdon> cloudbender, I like gist myself
17:10 < andrepadez> in this case, where you have a Owners collection and a Locations Collection in for each location you have a owner
17:10 < cloudbender> copy gist
17:11 < brettlangdon> andrepadez, ok
17:11 < andrepadez> would you store: location: {title: '', ..., owner: owner._id} or  location: {title: '', ..., owner: ownerObject}?
17:11 < brettlangdon> it really depends
17:11 < brettlangdon> :)
17:12 < brettlangdon> andrepadez, well, so, does it make sense for you to store owner in it's own collection?
17:13 < brettlangdon> as in, you need to have owners who do not have locations?
17:16 < mary5030> hi could someone guid me on a simple way of doing a get request using request library in nodejs
17:17 < cloudbender> so, as an object, a function's .ToString method returns a text representation of the function block
17:17 < brettlangdon> cloudbender, yes
17:17 < andrepadez> brettlangdon: i really don't have owners without locations
17:18 < jan____> mary5030:  request("http://example.com", function(error, response, body) { if(error) { throw error; } console.log(body); });
17:18 < andrepadez> brettlangdon: but isn't it easier to iterate through every owner (for building selects, for example) if i have them in my own collection?
17:18 < cloudbender> wow
17:18 < jan____> mary5030: requestâ€™s Readme is fairly solid: https://github.com/mikeal/request/blob/master/README.md
17:18 < brettlangdon> andrepadez, ok, so, you cant have an owner without a location, can multiple owners belong to a single location?
17:18 < andrepadez> brettlangdon: or is there an easy way to get a distinct(locations.owners)?
17:18 < mary5030> thanks <jan-->
17:18 < brettlangdon> andrepadez, yeah, you can index locations.owners
17:19 < andrepadez> ok, i gots me to study more mongodb then
17:19 < brettlangdon> I haven't used mongodb in a while, so I don't know the command off hand
17:19 < andrepadez> i won't bother you with documented questions
17:19 < brettlangdon> or, there should be a #mongodb channel too
17:19 < andrepadez> thanks very much once again
17:19 < brettlangdon> np
17:19 < brettlangdon> 10-gen employees tend to be very helpful
17:22 < andrepadez> brettlangdon: like you :)
17:22 < brettlangdon> andrepadez, ha, yeah
17:22 < andrepadez> do you work for joyent? or are just here for the kicks?
17:23 < brettlangdon> andrepadez, just here for the kicks
17:23 < andrepadez> :)
17:23 < brettlangdon> node enthusiast
17:24 < andrepadez> i love that
17:24 < andrepadez> i try to give something back to the community too, but generally through stack overflow
17:25 < brettlangdon> yeah, I don't spend too much time on stack overflow, we use IRC for communicating at work, so this is just easy
17:25 < cloudbender> Oh I get it now.
17:27 < cloudbender> function beep() {} () ... both declares and calls beep
17:30 < jack150> i want to inform visitors of my site when someone enters the chat-room (socket.io), my problem that the users of the main-page (a message board) refresh/change the page quite frequently and on every reload/refresh a new socket connection is made and the old one is disconnected. is there a better way to just broadcast info like this? (I unfortunately can't change the main page into a permanent 1-page-site)
17:31 < Ramone> hey all? socket.connect() docs suggest that it can take a 'connectListener' param which is a "listener"? is that supposed to be a callback?  or some other object type?
17:31 < Shinister> jack150: interesting question
17:31 < brettlangdon> cloudbender, not exactly: https://gist.github.com/4596483
17:32 < brettlangdon> cloudbender: http://benalman.com/news/2010/11/immediately-invoked-function-expression/
17:32 < Shinister> you could ajax in the content you need for the rest of the site, so the page isn't changed
17:32 < cloudbender> looking now
17:34 < cloudbender> So by wrapping it, a statement is formed, rather than a declaration in scope ?
17:34 < cloudbender> er, an expression is formed
17:35 < cloudbender> very nice post thank you
17:35 < brettlangdon> cloudbender, np
17:35 < brettlangdon> IIFE's come in handy when you have callbacks and loops and need to sort of, scope off some variables
17:35 < mary5030> i want to do a get on certain parameters how would i go about it using request library
17:36 < mary5030> any guidance is appreciated
17:36 < jergason> how can i check if some object is a ReadableStream?
17:36 < jergason> it is an interface, so I can't do instanceof, right?
17:37 < jergason> because they might not be using the base ReadableStream in the prototype chain
17:42 < jack150> Shinister:  I found 1 workaround suggesting to start a timer on the server upon receiving a disconnect-signal (refresh or quit) and after n-seconds of no connection the socket is disconnected
17:43 < bitpimp> I'm using node/backbone/jquery/zepto to create an ios game with drag and drop elements... does anyone know of any examples of this?
17:43 < bitpimp> going to be a touch interface, of course.
17:45 < regality> bitpimp: http://doc-drop.jit.su/ is something I threw together that shows how it can be done
17:45 < Ramone> anyone know what the docs mean when they talk about a 'listener' param?  is that a callback?  or some object with some specific interface?
17:45 < regality> open it in side by side windows and drag the docs into the share section
17:45 < regality> or drag them to the right side for an editor
17:46 < regality> it worked on the ipad
17:49 < regality> source hur https://github.com/regality/doc-drop
17:49 < jiverson> bitpimp: drag and drop can be on touch device but not necessarily easy because the "touch" event never changes its target when dragging and therefore the drop target is unknown...but you can get that by doing elementFromPoint()
17:50 < regality> jiverson: there are some touch shims you can use that make touch devices behave well with regular mouse events
17:54 < jiverson> regality: yes hammer.js(for example) is pretty nice but it doesn't solve determining the drop target when live dragging in particular
17:55 < regality> I just tossed a couple shims in my app, jquery.touch or smth, and it worked with jquery-ui for drag and drop
17:56 < jiverson> regality: yes in my particular project jquery-ui was not an option 
17:56 < eydaimon> is there a way to specify a loadpath that require can use so I don't have to specify relative paths each time?
18:01 < mary5030> i want query some parameters using get would someone guid me in the right direction please
18:01 < cloudbender> <<< requires a bowl of noodles
18:02 < Ramone> mary5030:  http://nodejs.org/api/querystring.html  
18:04 < mary5030> thanks
18:07 < othiym23> eydaimon: you can add new require paths by setting the environment variable NODE_PATH
18:08 < simong> Does anyone know if there is a yum repository for centos ?
18:08 < simong> err
18:08 < othiym23> but if you're looking to do less typing for a large set of files in a single module, the standard response is that that's a code smell, and the package should probably be broken up into a set of smaller modules
18:08 < simong> If nodejs is available in a yum repository so I can run it on centos
18:09 < Ramone> simong: doubt it.  but you can compile from source easily enough
18:10 < simong> Yea, this is for a production server configured in puppet though. So I'd like to keep it simple
18:11 < eydaimon> othiym23: great, thank you. Can I set it from within my app too? like process.env.NODE_PATH ?
18:11 < Ramone> simong: yeah understandable.  doubt there's a yum package though.
18:13 < othiym23> eydaimon: you can, but I don't recommend it. Read the docs: http://nodejs.org/api/modules.html#modules_loading_from_the_global_folders
18:14 < eydaimon> othiym23: thanks :)
18:14 < othiym23> there are definitely CentOS / RHEL RPMs for Node floating around: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
18:16 < eydaimon> othiym23: basically the idea is to avoid hving to keep specifying relative paths everywhere. will this really slow things down that much?
18:18 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:25 < eydaimon> othiym23 why don't you recommend it?
18:27 < CoverSlide> because the established way is locally installed modules for each project. this is after a long time of dealing with bugs pertaining to global installs or require.paths editing
18:27 < niix> I wonder if I get do text-2-speech on ECMA spec :|
18:27 < CoverSlide> older versions of node you could edit a require.paths array that would tell where to look for modules, and older versions of NPM would do global installs by default
18:28 < niix> listen to it at work or something
18:28 < niix> isaacs: Can you go ahead and make a audio book of the ECMAScript spec for our listening pleasures?
18:29 < CoverSlide> tts is terrible to listen to over long periods of time
18:29 < niix> CoverSlide: agreed, we need a soothing voice to read the ECAMScript spec for us
18:29 < CoverSlide> if you're on linux you can install orca and just load the spec on your webpage
18:29 < brettlangdon> it's fun when you get a book on tape and listen to on shuffle
18:29 < Samuel_Roldan> hi all. is it possible to add symlinks when you do npm pack?  I can't seen them when I do: tar tvvf `npm pack`
18:29 < Garo_> I'm using node-inspector to debug a running node program which is leaking memory/resources at lot. I'm using node 0.8.2 and in nearly every case when I pause the program execution with the remote debugger it shows the program to be running node.js:306, which doesn't make sense, because that line is "stream._type = 'fs';" - it should not be taking time here. Any ideas why the line is not shown correctly? The relevant line: ...
18:30 < Garo_> ... https://github.com/joyent/node/blob/v0.8.2/src/node.js#L306
18:30 < niix> the new google maps chick has a pretty nice voice
18:30 < eydaimon> CoverSlide: thank you
18:33 < cloudbender> there's a mps chick now ?
18:34 < cloudbender> << has a broken left wrist, misses the 'a' key alot
18:36 < niix> CoverSlide: what was that JS podcast you were talking about yesterday?
18:36 < CoverSlide> JavaScript Jabber?
18:36 < niix> Not sure, I'll check into it though
18:39 < niix> CoverSlide: I think I've listened to this one before.  I listened to one on Ender awhile ago with fat and Alex MacCaw
18:41 < chadeubanks> Hi everyone,  quick question about 'fs' error codes.
18:41 < chadeubanks> Is there a list of al the error codes with explanations? 
18:42 <@TooTallNate> chadeubanks: depends on the function being calledâ€¦ but they correspond to their C counterpart
18:42 < CoverSlide> man errno
18:42 <@TooTallNate> chadeubanks: so for `fs.stat()`, you can check stat()'s man page, `man 2 stat`
18:42 <@TooTallNate> CoverSlide: i actually don't have that manpage on OS X
18:42 < CoverSlide> really?
18:43 < CoverSlide> it's on my linux
18:43 <@TooTallNate> â˜® ~ (master) âˆ´ man errno
18:43 <@TooTallNate> No manual entry for errno
18:43 < CoverSlide> hmm
18:43 < chadeubanks> Im working with mkdir();
18:43 <@TooTallNate> chadeubanks: so check `man 2 mkdir`
18:43 <@TooTallNate> the ERRORS section specifically
18:43 < chadeubanks> cool thanks!
18:45 < chrisevans1001> im passing data between my clients and my node code using json. it all works perfectly however obviously i wish to handle what would happen if somebody tried sending incorrect json etc. i try to access various parts of each json request. so data.request, data.message etc. if one of these is missing, it'll generate an error. how are you handling this?
18:46 < chrisevans1001> i could check with typeof before each attempt to access that data, but that seems like a hacky solution
18:47 < CoverSlide> usually just check if it's truthy, unless falsy values are valid
18:49 < chrisevans1001> truthy?
18:49 < niix> We should build a npm module request thingy
18:50 < CoverSlide> /msg ecmabot truthy
18:51 < chrisevans1001> ah, but would that not be doing the same thing. before accessing any variable id have to do typeof(data.type) !== "undefined"
18:52 < majuscule> Hi, I can't seem to install sqlite3, here is the npm-debug.log http://dpaste.com/888056/
18:52 < majuscule> Any ideas on how to get this working?
18:53 < CoverSlide> no you don't you just have to check typeof data, which, if it's guaranteed to be varred or a param in that scope, you don't have to check at all
18:53 < niix> Does anyone know if a request page exists for node modules?
18:53 < Samuel_Roldan> is it possible to add symlinks when you do npm pack?  I can't seen them when I do: tar tvvf `npm pack`
18:54 < CoverSlide> the only time you need typeof == 'undefined' is to check if something exists in global scope, or unless your scrips was magically inserted into some scope that you don't know if something exists or not
18:54 < CoverSlide> like with eval or new Function
18:55 < CoverSlide> that's the only time you actually need typeof == 'undefined', you can check undefined, or if the value should never be falsy, do a regular if( or if(!
18:55 < chrisevans1001> well i had no idea of that
18:55 < chrisevans1001> thanks for the tip! :)
18:58 < chrisevans1001> CoverSlide, i think ive written my question poorly actually, ill rewrite:
18:59 < chrisevans1001> data comes in from client in JSON format. its parsed using JSON.parse. its valid json. i have various parts of code access the json data as its quite large. all data should be there, but if a piece is missing, im looking to detect.
19:00 < chrisevans1001> so, in my example and yours, the code still fails.. i.e. data.request is missing - doing a check on it will result in cannot read property request of null
19:00 < CoverSlide> you could do if('request' in data && 'message' in data)
19:00 < chrisevans1001> ah
19:00 < chrisevans1001> let me give that a whirl
19:00 < CoverSlide> oh so if data can be null
19:00 < CoverSlide> hmm i haven't tried doing 'in' in null
19:01 < CoverSlide> >> var a = {b:1},b;['b' in a, 'c' in a, 'b' in b]
19:01 < purr> CoverSlide: TypeError: Cannot use 'in' operator to search for 'b' in undefined
19:01 < CoverSlide> >> var a = {b:1},b = null;['b' in a, 'c' in a, 'b' in b]
19:01 < purr> CoverSlide: TypeError: Cannot use 'in' operator to search for 'b' in null
19:01 < CoverSlide> oh ok
19:02 < CoverSlide> i guess you can do `if(data &&` first
19:02 < CoverSlide> if(data && data.request && data.message)
19:02 < CoverSlide> should handle it
19:02 < CoverSlide> unless of course request or message can legally be a falsy value
19:03 < yuho> hey. was wondering if anyone's bumped into a project for node that's in the vein of textmine for perl (http://textmine.sourceforge.net/index.html), mainly data mining with summarization
19:03 < CoverSlide> i've never heard of one
19:04 < CoverSlide> but be a node hero! be the first!
19:04 < yuho> it seems super handy
19:04 < yuho> but.. perl :)
19:04 < CoverSlide> yes ... perl :/
19:05 < chrisevans1001> CoverSlide, interesting, so it works when doing (data && data.request)
19:05 < chrisevans1001> why would it accept it like that, but not !data.request?
19:05 < CoverSlide> the && operator doesn't check the next value if the first one returns false
19:06 <@isaacs> niix: my voice is not soothing
19:06 < CoverSlide> if data is falsy, it can't be an object, therefore it doesn't check data.request, which otherwise would pass an error
19:06 < CoverSlide> i prefer dshaw's voice
19:06 < niix> isaacs: maybe process it afterwards to assist with said smoothing
19:06 < CoverSlide> he sounds kind of like a dirty old man
19:06 < niix> *soothing
19:07 < CoverSlide> i can imagine him saying "Hey kids, want to check out my van?"
19:07 < holzp> data can be wierd in ajax
19:07 < holzp> if the server sends a 304(i think) back data will be empty
19:07 < holzp> but still return a success
19:08 < CoverSlide> hm that is weird
19:08 < chrisevans1001> i still cant understand that though... data exists, data.request doesnt. so its still having to checking if data.request exists
19:08 < CoverSlide> but you can check responseStatus or something
19:08 < chrisevans1001> yet if i try just (data.request) (when i know data exists) then it fails again
19:08 < CoverSlide> if data is null, it doesn't exist
19:09 < CoverSlide> console.log the values, it would only fail if data is not an object
19:09 < holzp> well in the case of the 304 the data exists its just the exact same so it doesnt return the object
19:09 < holzp> so bizarre
19:09 < holzp> http://stackoverflow.com/questions/5215181/proper-way-to-handle-304-not-modified-in-jquery-ajax
19:10 < CoverSlide> oh wait, xhr.stats == 304 && xhr.getResponseHeader('Location')
19:10 < chrisevans1001> coverslide; http://pastebin.com/RGgrkLFk
19:11 < chrisevans1001> oh wait, i think i misunderstood you coverslide, ill try again
19:11 < CoverSlide> oh wait i was thinking 301
19:12 < chrisevans1001> yes, i was misunderstanding, thanks for your help :)
19:20 < geNAZt> hi
19:20 < geNAZt> someone knows of a tcp stream multiplexing module ?
19:22 < context> genazt: https://nodejsmodules.org/tags/multiplexing
19:22 < ksmth> hey guys - I'm just curious what the JS community is using for indenting code â€¦ tabs or spaces? I don't want to know why anyone thinks one is superior to the other, just what you're using :)
19:22 < geNAZt> context: thats only for websocket or local stream multiplexing
19:23 < tonka> >.<
19:24 < CoverSlide> spaces for everything, and no more or less than 2
19:24 < tonka> 2 spaces here, usually
19:24 < Bonuspunkt> 2 private, 4 company
19:24 < CoverSlide> 4 spaces is enterprisey
19:25 < Bonuspunkt> yes, best combined with lots of nested if clauses
19:25 < CoverSlide> i use a lot of terminal stuff, so reading grep or less or cat output suck with tabs
19:25 < Exx2xxO> Hello ! I got a problem: Does anybody know how to store several user informations to one json with node and express?
19:26 < Exx2xxO> from different users
19:26 < CoverSlide> the only reason to ever use tabs is makefiles, since that's the only format i can think of where it's mandatory
19:27 < nanashiRei> WHYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
19:27 < nanashiRei> sorry.
19:27 < nanashiRei> .bind()
19:27 < nanashiRei> best invention ever made.
19:28 < ksmth> well, tabs allow for personal customization of the indentation depth - I can't read code that's indented 2 spaces
19:28 < nanashiRei> ksmth: i feel ya!
19:28 < nanashiRei> 4 spaces >3
19:28 < nanashiRei> >:3 *
19:29 < tonka> 2 spaces ought to be enough for anybody.
19:29 <@TooTallNate> geNAZt: https://github.com/dominictarr/mux-demux
19:32  * nanashiRei detects a wild geNAZt
19:32  * nanashiRei throws a node-ball at him
19:34  * geNAZt has been hit in the face by a ball
19:34 < nanashiRei> :x
19:34 < CoverSlide> geNAZt likes balls in his face
19:34 < nanashiRei> wtf
19:34 < othiym23> someday I will be punished for the liberties I have taken with Node's module loader
19:34 < geNAZt> thats another question i can answer you easily
19:34 < geNAZt> no
19:34 < geNAZt> :D
19:35 < othiym23> although I guess I'd argue that the last 24 hours are punishment enough
19:35 < nanashiRei> othiym23: You cannot outsource Joyent.
19:35 < nanashiRei> (not alone, that is)
19:36 < nanashiRei> I"m starting to like heroku. But srsly.. fkn credit cards every where... 
19:37 < nanashiRei> Got to get one, soon...
19:37 < aboudreault> lol
19:37 < othiym23> oh, I'm not trying to outsource anything
19:37 < othiym23> just do evil via monkeypatching
19:37 < geNAZt> @TooTallNate: that looks like what i need thanks
19:37 < nanashiRei> hey, not my fault it not common in ger man eeeh
19:38 < nanashiRei> muxing, sounds like something with video :x
19:38 < nanashiRei> as in mp4 and mkv
19:39 < geNAZt> some sort
19:40 < nanashiRei> So what are zou trying to mux? P
19:40 < nanashiRei> -_- typing skill: lvl -3
19:41 < geNAZt> http://picload.org/image/arrlrro/unbenannt.png
19:41 < CrawfordComeaux> Does anyone know wtf could be going on here? http://pastebin.com/mfK7FZMU
19:41 < geNAZt> i will build a game engine that allows games to run in a window ( appjs ). but there will be a chat or multiple game instances that have to communicate with the server. for matchmaking, positioning and so on
19:42 < Kongo> Hi all
19:42 < nanashiRei> oh, multiplexing a stream
19:43 < nanashiRei> looks interessting enough
19:43 < k_89> i'm interested in writing drivers using node :P
19:43 < nanashiRei> But doesn't socket.io kinda do this already?
19:43 < nanashiRei> lol
19:43 < CoverSlide> yeah if want all that overhead
19:44 < CoverSlide> frameworks boo
19:44 < CoverSlide> libraries yay
19:44 < k_89> the node mysql driver written in js sorta opened my eyes
19:44 < nanashiRei> geNAZt: hm, really that should be doable with socket.io :s
19:44 < k_89> its js, not java that *runs* everywhere
19:44 < geNAZt> nanashiRei: if you have a full build browser it is okay
19:45 < geNAZt> but i dont have it
19:45 < nanashiRei> define "full build"
19:46 < CoverSlide> anything that runs on netbsd runs anywhere
19:46 < nanashiRei> xD nice one
19:46 < SebastianG> Having Node.js Domains now, I wonder about the future of Node's default callback style, where the first argument represents a possible error. As far as I can see Node modules which are API-locked (Modules, Timers, util, Assert) don't use this kind of callback. Other module APIs which use error-callbacks, like FileSystem, are only called "stable". Do you think that indicates plans to make some changes in the future?
19:46 < geNAZt> i dont have chrome or something
19:46 < k_89> like this usb device which reads rfids and writes to a socket ... a node driver to read and parse its input, and to provide that data on an api via a local server, and then a chrome app of sorts which uses that api to provide a local-installed js *app*
19:46 < CoverSlide> download it
19:46 < geNAZt> i have the libwebkit in a native window
19:46 < Kongo> Hi I have problem with install mysql module. I run CMD as Admin, write npm install mysql. All files has been downloaded but I don't know where there are seaved. Anybody can help me ? :)
19:47 < CoverSlide> oh you mean with appjs
19:47 < nanashiRei> Talking mobile?
19:47 < CoverSlide> Kongo: npm ls
19:47 < nanashiRei> Kongo: npm root -g
19:47 < k_89> npm implode
19:47 < k_89> eh
19:47 < nanashiRei> npm worlddomination
19:47 < k_89> thats rvm implode :P
19:47 < nanashiRei> :x
19:47 < CoverSlide> it will show the node_modules directory it detected as the root of your project
19:48 < k_89> i like how npm keeps only those modules at top level which you *require* in package.json
19:48 < k_89> pretty cool
19:49 < nanashiRei> simple, yet powerful :D
19:49 < geNAZt> CoverSlide: yes appjs
19:49 < k_89> btw, whats the scene with appjs ? does it work fine ?
19:49 < k_89> anyone tried it yet ?
19:49 < geNAZt> yes appjs works fine
19:49 < niix> do any of you think you could benefit from a npm module request type thing
19:49 < geNAZt> i use it :D
19:49 < CoverSlide> i haven't tried it
19:50 < CoverSlide> geNAZt: have you compared it to node-webkit?
19:50 < k_89> geNAZt: really ?? fkin awesome
19:50 < k_89> node-webkit??? ,fk
19:50 < nanashiRei> niix: no.
19:50 < k_89> now i am seeing a desktop app in node
19:50 < nanashiRei> before you request a module, you should help others and write it yourself
19:51 < geNAZt> node-webkit no but it seems to have more features of chromium build in
19:51 < geNAZt> appjs has very limited access to the "normal" browser apis
19:51 < CoverSlide> problem is the webkit binaries are pretty big
19:51 < geNAZt> like webrtc or something
19:51 < k_89> fuck .. node-webkit !!! , most of us can already make browsers dance 
19:51 < nanashiRei> geNAZt: oh, now i remember, i tried that too. But i stopped when it required me to use 32bit node... that a saaaad no go on this machine :(
19:51 < k_89> eh damn
19:51 < geNAZt> i a world where every pc has more then 500 gb of space that shouldnt be a problem
19:52 < k_89> fkin node
19:52 < isaacbw> nanashiRei, what
19:52 < geNAZt> appjs can run on 64bit nodejs oO
19:53 < nanashiRei> since when?
19:53 < isaacbw> ugh, appjs
19:53 < isaacbw> I'm going to let myself out
19:53 < nanashiRei> i tried it like 2 weeks ago, and there was this bitching restriction of 32bit noe
19:53 < geNAZt> AppJS requires 32bit Node on OS X.
19:53 < nanashiRei> node*
19:53 < CoverSlide> they both have 64-bit linux binaries
19:53 < geNAZt> on windows and on linux the 64bit node binaries work
19:53 < k_89> i really feel like swearing in hindi, given how awesome node is
19:54 < k_89> bhenchod !!
19:54 < nanashiRei> <- windows 8 user
19:54 < geNAZt> ihhhhhhh
19:54 < geNAZt> :D
19:54 < isaacbw> bastard
19:54  * nanashiRei enjoys it even so
19:54 < k_89> bleh, windows
19:54 < geNAZt> windows is great for gaming :D
19:54 < isaacbw> I'm going to throw a tantrum if anyone else gets excited about appjs
19:54 < nanashiRei> jajajaja everyone going like all crazy about it. i could say the same about mac and linux
19:54 < isaacbw> yea, I keep a windows box around exclusively for gaming
19:55 < k_89> isaacbw: wy ?
19:55 < nanashiRei> linux runs on my servers. that's cool
19:55 < k_89> why*
19:55 < nanashiRei> my macbook runs os x, fine too
19:55 < isaacbw> I just moved and haven't set it up yet and I haven't been more productive
19:55 < nanashiRei> but my GAMING computer, windows 8. End of story.
19:55 < k_89> nanashiRei: http://www.brankovukelic.com/2013/01/on-state-of-windows-on-desktop.html
19:55 < k_89> :P
19:55 < nanashiRei> nononononononoooo
19:56  * nanashiRei hides
19:56 < isaacbw> k_89, because if you're going to make desktop apps, you might as well use tools which are brilliant at it instead of trying to strong-arm the web platform into being for the desktop
19:56 < isaacbw> html, css, etc make a lot of sacrifices for the sake of the web
19:56 < nanashiRei> isaacs: gtk3 is cool.
19:56 < isaacbw> wrong isaac
19:56 < nanashiRei> right? :)
19:56 < isaacbw> but yea, I love gtk
19:56 < nanashiRei> oh
19:56 < isaacbw> look at the channel topic :P
19:56 < k_89> but seriously, the write once and run everywhere appeal is pretty aweosme
19:57 < k_89> like look at asana
19:57 < nanashiRei> blame tab
19:57 < isaacbw> k_89, that applies to pretty much everything though
19:57 < k_89> c#?
19:57 < isaacbw> even a c application can pretty much be written once and run everywhere if you get a good autotools setup
19:57 < isaacbw> I think mono is pretty mature by now
19:58 < jamesd> isaacbw, its even easier if you write clean standard C code without gnuisms or other fancy extendsions. 
19:59 < isaacbw> and for non-standard GUIs, there are tools like clutter: http://blogs.gnome.org/clutter/
19:59 < k_89> but that would be another paradigm to learn, and fit into ... and the only framework i know of for gui apps is qt
19:59 < isaacbw> I don't know what they did to their website though. It used to be more than just a wordpress blog
19:59 < isaacbw> k_89, I guess that's a good reason if there was one, though I wonder why you would choose to make it a desktop app instead of a browser app if you're going to be using html anyway
20:00 < isaacbw> a browser app will have much larger accessibility
20:00 < isaacbw> the only case I can think of for an app having to be local is perhaps admin tools
20:01 < k_89> yeah ^^
20:01 < k_89> was coming to it
20:01 < isaacbw> that's just my opinion on it all though. If you like appjs and enjoy using it, there's nothing wrong with that
20:01 < geNAZt> i like it
20:01 < isaacbw> I think there are a number of appjs users here, so you won't be alone
20:02 < geNAZt> and it has its space
20:02 < bingomanatee> Does anyone have any thoughts on http://wonderlandlabs.com/wiki/a/node_and_javascript/event_paradox ?
20:02 < k_89> and more than that, its like i already know a lot of browser related stuff, and i dont see any desktop app which cannot be implemented easily in html css js
20:02 < isaacbw> I do slightly question the use of node, though, which is architected largely for asynchronous server-type applications
20:03 < isaacbw>  I suspect there is a better way to design a platform on v8 for desktop app development
20:03 < bingomanatee> tl:dr; is there any way to elegantly "gate" changes to several states without redundant event triggers?
20:03 < k_89> and i am seeing the use of node for socket level thingy's
20:03 < k_89> thingies
20:03 < k_89> *
20:03 < geNAZt> nodejs can handle all i need for it
20:03 < k_89> eh, better get back to work
20:04 < geNAZt> it has a nice tcp socket, it can handle with events bound to the gui, it is fast, it has binary buffers
20:05 < bingomanatee> a v8 platform for desktop work is going to be either (a) responsible for a lot of local UI stuff or (b) essentially a slave to another adaptive system.
20:06 < bingomanatee> I'd suggest that the v8 platform for destop app development is a browser :D
20:06 < geNAZt> if you want to have a full http stack yes
20:06 < geNAZt> if not then no
20:06 < isaacbw> unity3d I think uses v8
20:07 < CoverSlide> if it does it uses it horribly
20:07 < isaacbw> or maybe they rolled their own js engine
20:08 < CoverSlide> oh it uses Unityscript, not really JavaScript
20:08 < peace_and_profit> Is there a convention for argument names for file names vs file contents. Should I call a file path "path" or "file" in the arguments list of a function for exmaple
20:08 < isaacbw> CoverSlide, they tout it as javascript
20:08 < isaacbw> peace_and_profit, do whatever you want as long as you document it
20:08 < isaacbw> though path is a little more obvious
20:09 < isaacbw> file might be a file descriptor
20:09 < CoverSlide> or a file stream
20:09 < isaacbw> yea
20:10 < CoverSlide> http://wiki.unity3d.com/index.php?title=Head_First_into_Unity_with_JavaScript << "DON'T learn JavaScript just so you can learn UnityScript -- they're very different"
20:10 < isaacbw> welp
20:10 < isaacbw> my glass carboy came in the mail today
20:11 < CoverSlide> a carboy? is that like a Transformer?
20:11 < bingomanatee> The problem is, multi-desktop adaption is such a cavernous system, that you are more likely ending up looking at a solution that does that task and adapting v8 into it than vice versa. 
20:11 < isaacbw> do cookies sent back in xhr requests work properly?
20:11 < isaacbw> CoverSlide, for homebrewing :D
20:11 < isaacbw> http://passionforthepint.com/wp-content/uploads/2011/06/Glass-Carboy-305x400.jpg
20:12 < CoverSlide> aw. I imagined a young optimus prime
20:12 < isaacbw> :(
20:12 < isaacbw> heh
20:14 < CoverSlide> "Although Unity's JavaScript tries to follow the ECMAScript standard closely, it varies in many ways from other implementations of JavaScript that are based on the same standard. It is perhaps most similar to Microsoft's JScript, especially in that both are .NET languages."
20:15 < peace_and_profit> Is there a reason to use async file methods for a node script run using the CLI?
20:15 < CoverSlide> depends on what the CLI script does
20:15 < CoverSlide> if you care about concurrency, use async methods
20:16 < CoverSlide> if you don't care, use whatever you feel most comfortable with
20:17 < CoverSlide> for example, i had a cli script that would extract images from swf files, and i could batch those up to do many at a time
20:17 < CoverSlide> although it had more http than fs stuff, so most of it was async anyway
20:17 < peace_and_profit> Hrmâ€¦ okay thanks.
20:19 < isaacbw> peace_and_profit, it doesn't matter. Just decide whether you want the call to be blocking or non-blocking
20:19 < isaacbw> the answer is probably blocking for a CLI applications
20:21 < therealkoopa> If you're using bundledDependencies in package.json, do the dependencies need to be in the repository?
20:25 < brianc1> anyone know of a good mocking library for node?
20:26 < CoverSlide> sinon?
20:27 < brianc1> thanks
20:29 < bingomanatee> By the way - the collective for idiots is "a thicket of idiots." 
20:29 < bingomanatee> this is not related to anything/one - I just am starting to enjoy venery
20:31 < isaacbw> is that true, bingomanatee 
20:33 < isaacbw> woo, wootoff time
20:41 < rovar> question, when using _.each to iterate over an object, is it normal to have a null as the final value in the iteration?
20:42 < gluxon> rovar: It shouldn't.
20:42 < gluxon> rovar: In your object, do you have a trailing comma at your last property?
20:44 < rovar> I did, I thought I had found the culprit, but that didn't fix
20:45 < rovar> gluxon: I see that it uses for(key in obj)
20:45 < rovar> in the implementation..
20:46 < gluxon> rovar: Which is how I usually iterate over objects.
20:46 < rovar> oh
20:47 < rovar> that is my bad.  I tack in a property later
20:48 < dKc> what is the best game written in Node.js?
20:49 < nodejsfrogger> anybody know where is using nodejs for big apis like java ee
20:49 < nodejsfrogger> anybody know where is using nodejs for big apis like java ee??
20:49 < nodejsfrogger> hm
20:50 < gluxon> nodejsfrogger: Can you rephrase? I don't think I understand.
20:52 < nodejsfrogger> im searching for example companys whos using nodejs as an big api like twitter or orthers
20:52 < nodejsfrogger> as an backend api
20:53 < isaacbw> myspace
20:53 < nodejsfrogger> mosty coms using java ee spring for build complex applications and i will knowlege wich like today to usw nodejs
20:54 < isaacbw> I think yahoo uses it
20:54 < CoverSlide> joyent and voxer use it up the ass
20:54 < isaacbw> that sentence makes no sense
20:54 < isaacbw> nodejsfrogger, 
20:55 < nodejsfrogger> full backend in nodejs?
20:55 < CoverSlide> linkedin uses it for their mobile api
20:55 < nodejsfrogger> full api backend
20:55 < CoverSlide> i believe voxer does
20:55 < creationix> cloud9 is all node backend
20:55 < inolen> isaacbw: it makes sense. He's saying lots of companies prefer java / spring for complex applications these days, and he's wondering if any big companies have adopted node primarily. 
20:56 < gluxon> creationix: Is it really?
20:56  * gluxon learned something new.
20:56 < creationix> yep, and I rewrote a lot of it when I worked there
20:56 < inolen> gluxon: they do a large amount of the core node dev
20:56 < nodejsfrogger> test
20:57 < CoverSlide> well they did have 2 members on the core team
20:57 < creationix> 3 + me at one point
20:57 < CoverSlide> although 1 recently left, but is still hacking on node
20:57 < CoverSlide> right
20:57 < nodejsfrogger> yes in the company i work all means java ee ist the bedder thay to use java ee to build complex backend apis 
20:57 < creationix> (technically I'm not core)
20:57 < nodejsfrogger> and i was wondering wy not nodejs
20:58 < Ramone> what's so complex about them?
20:58 < Ramone> other than the j2ee part :)
20:59 < CoverSlide> why java? it's got a long history, it has a big company behind it for support
20:59 < creationix> but cloud9 didn't use node because it had node people on staff, it was the other way around
20:59 < holzp> yeah and a ton *ton* of experienced java programmers everywhere
20:59 < creationix> a bunch of front-end js devs rewrote their backend in node, liked it so much, they hired as many core people as they could
20:59 < CoverSlide> yeah true
20:59 < holzp> unsure node has been in use long enough to have very many *experienced* node.js programmers
21:00 < CoverSlide> right
21:00 < creationix> holzp, what would you consider experienced?
21:00 < holzp> hard to tell, prob have two or three large apps built and deployed
21:00 < holzp> and that takes time
21:01 < holzp> + node itself hasnt settled down yet (1.0)
21:01  * CoverSlide forks node, releases something with a 1.0 sticker on it
21:01 < holzp> you can be more experienced than the next guy, but thats not a lot of experience really
21:01 < creationix> node is pretty stable these days
21:01 < CoverSlide> bam!
21:01 < Ramone> there are a bunch of platforms that have been around for a long time and have a big company backing them? it's not like java is the only choice
21:01 < creationix> I wouldn't hold my breath till 1.0 is cut
21:01 < holzp> you don't have to convince me, you have to convince the head of IT
21:02 < CoverSlide> well, tell that to mjr
21:02 < creationix> holzp, just tell them the facts
21:02 < creationix> either it's ready and approproiate or it's not
21:02  * creationix scratches head at his funky spelling
21:03 < CoverSlide> convincing IT is not easy
21:03 < holzp> large corporate heads of IT dont deal with facts they deal with CYA
21:03 < CoverSlide> what you do is find a little corner of code that you control
21:03 < Ramone> if you have a CYA manager, they'll want to be ~10 yrs behind the curve
21:03 < creationix> I worked at HP under the PSG (consumer laptops and desktops) division, and IT wouldn't approve any psg products
21:03 < Ramone> so after that the choice is up to you ;)
21:04 < creationix> We were only allowed to order enterprise laptops
21:04 < holzp> well how long did it take Java and they had Sun
21:04 < CoverSlide> something like an internal utility or test thing
21:04 < holzp> I think Node may just get there, but its gonna take time
21:04 < creationix> ruby has been trying to break into enterprize for many, many years
21:04 < holzp> esp when to them Javascript is used to making fun responsive client side effects
21:04 < CoverSlide> then after enough people adopt it, and 5 years pass, management may say "hey this node thing seems to be catching on"
21:05 < holzp> those guys deal in breadth not depth, so they will slide Javascript right into the clientside space, and not think about it
21:05 < holzp> "why would I write my app over in html?"
21:05 < holzp> if you want to use it in "enterprise" emphasise the java part Oh Im writing it in Java..scmrpfhs. 
21:06 < holzp> and then make sure it never ever fails and you will be fine :)
21:06 < CoverSlide> haha
21:07 < nodejsfrogger> for waht is yahoo using nodejs?
21:07 < CoverSlide> who knows?
21:07 < CoverSlide> they do lots of stuff that noone uses
21:07 < brettlangdon> nodejsfrogger, science
21:07 < CoverSlide> for example, all of yahoo
21:07 < ChrisPaterson> CoverSlide: lol
21:07 < sohcahtoa> ask in #yui :P
21:08 < aalex_> hello
21:08 < holzp> yahoo isnt taken very seriously anymore
21:08 < aalex_> How do I explode an array into arguments for a node-addon function to call?
21:08 < nodejsfrogger> :)
21:08 < CoverSlide> aalex_: .apply?
21:09 < gluxon> aalex_: Can you elaborate? I don't know how you would explode an array.
21:09 < isaacbw> array.split()
21:09 < holzp> right [functionname].apply(argsArray)
21:09 < isaacbw> oh wayt
21:09 < isaacbw> wait
21:09 < aalex_> .apply()?
21:09 < CoverSlide> wheight?
21:09 < Ramone> i'd be surprised to find and array.split() :)
21:09 < isaacbw> that's the one
21:09 < isaacbw> there is an array.split()
21:09 < CoverSlide> >> [].split
21:09 < gluxon> isaacbw: Not explode string into array.. the other way around.
21:09 < purr> CoverSlide: undefined
21:09 < isaacbw> but that's not what he wants
21:09 < isaacbw> oh
21:10 < isaacbw> wait what
21:10 < isaacbw> god I'm being retarded
21:10 < isaacbw> time to make more coffee
21:10 < holzp> iit takes an array and applies the array arguments to a function as if it were being called like function(array[0],array[1],array[2])
21:10 < isaacbw> or maybe let this coffee go through my system
21:10 < isaacbw> I don't know
21:10 < CoverSlide> coffee is the retardation cure
21:10 < ChrisPaterson> it's array = "".split()
21:10 < aalex_> holzp, hmm, functionname.apply()'s first argument should be a string, but it's not.
21:11 < holzp> its a context
21:11 < gluxon> aalex_: You're getting into the X Y problem. Your question could be a bit more helpful. -> http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
21:11 < gluxon> Can you tell us what you're trying to do instead?
21:11 < holzp> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply
21:13 < ChrisPaterson> gluxon: I like that xy problem thing.  I'm going to use that!
21:13 < holzp> yeah that xy problem post should be the top stackoverflow post everywhere
21:14 < k_89> node-webkit wins over appjs
21:14 < k_89> in ease of getting up
21:15 < aalex_> gluxon, well, it relies on a not-so-far-public node addon... 
21:15 < isaacbw> you guys are so silly
21:15 < CoverSlide> that's what she said
21:16 < gluxon> aalex_: So, this is data/variable manipulation, right? An array is already structured into easily accessible elements. That's why I'm having a bit of trouble understanding the question.
21:18 < nodejsfrogger> are you sure yahoo is base full api in nodejs?
21:18 < nodejsfrogger> and myspace to?
21:18 < jamesd> isaacbw, you should see the code they produce, and then you will know how bad it really is 
21:19 < draginx> nodejsfrogger: im pretty sure parts of yahoo utilizes nodejs but I dont think their entire API is.. after all that did make the mojito framework :P
21:23 < TehShrike1> Hey, anyone remember the name of that JS library that would fire eventy-things whenever a given object's property would change?
21:23 < context> k_89: does node-webkit or appjs have any sort of 'local database'
21:24 < isaacbw> TehShrike, there's angularjs
21:24 < isaacbw> but it's more than a library
21:24 < isaacbw> god I love angularjs
21:24 < isaacbw> mmmmm nerdgasm
21:24 < TehShrike1> heehee
21:24 < k_89> context: dunno
21:24 < isaacbw> it's probably not what you're looking for
21:24 < TehShrike1> Yeah, that's the direction this is going, but I just want the bit that watches objects' values
21:24 < k_89> but wont be hard to work with
21:24 < k_89> work around*
21:24 < TehShrike1> I remember a month or two back I saw a library on github that did it
21:24 < TehShrike1> But I don't remember its name
21:24 < isaacbw> I think you might be able to extract just the object stuff from ember.js
21:25 < isaacbw> still probably more than what you're looking for
21:29 < nodejsfrogger> is myspace using expressjs only ? or using an java api backend?
21:30 < nodejsfrogger> and nodejs only only as an second backend
21:30 < CoverSlide> who knows what their backend is
21:30 < Ramone> myspace was originally coldfusion
21:30 < CoverSlide> I know they used to do a bunch of .NET too
21:30 < draginx> whats the benefit of passing next(err) in an expressjs app?
21:30 < draginx> Like where does "next" go?
21:30 < CoverSlide> it's possible they used that over Java
21:30 < draginx> slash how can I capture that "err"?
21:31 < TehShrike1> One of their old devs was in here on the 2nd
21:31 < TehShrike1> He said their API layer was still C#
21:31 < CoverSlide> wwicks ?
21:31 < TehShrike1> Yeah
21:32 < CoverSlide> Yeah usually it's either Java or .NET, I rarely see the two mixed, unless they're doing some transition from one to the other
21:33 < pringlescan> What's RangeError: Maximum call stack size exceeded usually in regards to?
21:33 < CoverSlide> lots of people said .NET would be the new Java
21:33 < TehShrike1> pringlescan: Infinite recursion, likely
21:33 < CoverSlide> pringlescan: too much recursion usually
21:33 < TehShrike1> pringlescan: the maximum call stack size defaults to 100 I believe
21:33 < pringlescan> â€¦ I'm trying to track down where it's happening, I'll review again
21:34 < pringlescan> when I call something outside of an express handler, it works, but when I call it inside the express handler, it gives me that error
21:34 < TehShrike1> Yeah, it'd be nice if you could get a better stack trace when that happens
21:34 < pringlescan> I named all my callbacks so I try to get good traces, but stillâ€¦ nothing
21:34 < pringlescan> now, the error is being reported as being inside the mongodb module though
21:34 < CoverSlide> >> function f(n){return n == 0 ? 1 : f(n - 1)};f(100)
21:34 < pringlescan> but I'm sure it must be my code that's causing the error?
21:34 < purr> CoverSlide: (number) 1
21:34 < CoverSlide> >> function f(n){return n == 0 ? 1 : f(n - 1)};f(10000)
21:34 < purr> CoverSlide: (number) 1
21:34 < CoverSlide> >> function f(n){return n == 0 ? 1 : f(n - 1)};f(1000000000)
21:35 < purr> CoverSlide: RangeError: Maximum call stack size exceeded
21:35 < TehShrike1> You can change the max call stack size with an argument
21:38 < isaacbw> if you're recursing that deep, you should really rewrite it as a loop thugh
21:38 < isaacbw> *though
21:39 < isaacbw> recursion is usually a development tool and you will want to rewrite it with iteratively once you have a working algorithm
21:39 < isaacbw> I have no idea what you're talking about though
21:39 < TehShrike1> mm, I think this was it https://github.com/melanke/Watch.JS
21:39 < isaacbw> cwaffeeee
21:39 < tonka> yep
21:41 < holzp> i see closures used resursively and it makes me nervous
21:41 < isaacbw> heh
21:42 < isaacbw> those would be fun bugs to solve
21:43 < dKc> anyone know some games written with node.js ?
21:43 < TehShrike1> Why did I not know this existed? 8-| http://docs.angularjs.org/api/angular.element
21:43 < TehShrike1> dKc: http://voxeljs.com/
21:43 < isaacbw> because you're a turd
21:43 < isaacbw> hur hur hur
21:43 < isaacbw> sorry
21:43 < isaacbw> coffee
21:43 < TehShrike1> :-P
21:43 < isaacbw> caffeine makes me stupid
21:43 < isaacbw> and smart
21:43 < isaacbw> and stupid
21:43 < isaacbw> dfsdfsafhasdfkjlashdflkj
21:44 < TehShrike1> "NO FUCK YOU!" "What?" "Sorry, coffee."
21:44 < CoverSlide> I know the backend for Dice With Buddies is written in node
21:44 < isaacbw> lol
21:44 < CoverSlide> I interviewed with them
21:44 < pringlescan> guys, here was the problem spot: https://gist.github.com/ac989f1515e8a3a3ed5d
21:44 < pringlescan> is this a bad way to accomplish things? I didn't think this qualified as callback hell, but mayhbe I'm misinformed
21:45 < holzp> that ain't callback hell
21:45 < pringlescan> ahhhh
21:45 < pringlescan> weird, mongodb is returning that error >_< not node.js
21:45 < holzp> when your indents have newlines in them....
21:46 < pringlescan> i feel like such a stuge
21:46 < CoverSlide> I think https://github.com/mozilla/BrowserQuest has node on the serverside
21:46 < isaacbw> stooge
21:46 < pringlescan> *stoog
21:46 < pringlescan> blahhh
21:46 < isaacbw> I got you
21:46 < isaacbw> bruthah
21:46 < CoverSlide> i may be wrong
21:46 < CoverSlide> oh wait it does
21:47 < isaacbw> you could write something like tribal wars in node really easily
21:47 < pringlescan> that's weird, i wonder what the error is, the code works as expected
21:48 < CoverSlide> probably
21:48 < CoverSlide> you could write KoL in node too, but heck you could write that in PHP
21:48 < TehShrike1> ...and that's what they did :-P
21:49 < CoverSlide> i never bothered looking, but yeah i would assume so
21:50 < CoverSlide> oh of course,, wordsquared is a node game, that apestronauts thing, and whatever won the last node knockout
21:50 < CoverSlide> which is basically the same as apestronauts but with multiple planets
21:51 < CoverSlide> oh yeah Disasteroids
21:56 < cloudbender> Am I missing voice features in xchat ?
21:57 < isaacbw> man, I want to start a shitty file hosting service and make a million dollars
21:58 < CoverSlide> Like MEGA?
21:58 < isaacbw> maybe you have to look like a thumb first
21:58 < crabtree> hi isaacbw
21:58 < isaacbw> hello crabtree 
21:59 < isaacbw> I hate to break it to you, but crabs don't grow on trees
21:59 < CoverSlide> holy shit what the hell is mega loading into my browser, i'm scared
21:59 < cloudbender> The cloud seems to open opportunities for legitimate, and illegitimate, small service companies.
22:00 < cloudbender> We may not make huge bux, but we can make honest bux.
22:00 < cloudbender> honest is better, says me.
22:00 < isaacbw> you silly
22:00 < cloudbender> I know ....
22:01 < CoverSlide> there's no money in honesty
22:02 < TehShrike1> I disagree
22:02 < cloudbender> I've made a decent living for a long time by having a good reputation.
22:02 < cloudbender> I've gone hungry a few times, but mostly not.
22:03 < cloudbender> Is there a voice module I need for xchat ?
22:03 < cloudbender> I see no icons
22:04 < CoverSlide> for what os?
22:04 < cloudbender> doze
22:05 < cloudbender> Sorry, will purchase a nix box in the fall
22:05 < cloudbender> When I start the app
22:05 < cloudbender> and am really good at node/mongo
22:05 < CoverSlide> if you have a doze box, you don't need to buy a nix box
22:05 < cloudbender> I want a nix stack for node
22:06 < brycebaril> you could always dual boot, pave, or use a vm
22:07 < cloudbender> I think during the development phase, I'll be wiping the server alot, so I'm gonna develop off-line then migrate.
22:07 < CoverSlide> then u b leet haxx0r
22:07 < cloudbender> not sure of the reference^^^^
22:07 < brycebaril> I think CloverSlide is saying that windows is a fine dev os
22:07 < isaacbw> I removed windows the day I got my laptop
22:08 < isaacbw> CoverSlide is insane though
22:08 < brycebaril> cloudbender with a vm you could do just that, run linux in a vm on your windows box, and routinely pave it and start with a fresh install on your vm
22:08 < isaacbw> a vm is a great choice if your computer is fast enough
22:08 < isaacbw> otherwise it will just be painful
22:08 < holzp> i run windows, but do most of my work in remote shells
22:09 < cloudbender> I have no problem with windows per se, but I need better control of what is happening on my qire to the ISP.  WIndows 8 is taking more of that control away.
22:09 < cloudbender> on my wire
22:09 < isaacbw> the worst thing about developing on windows is the lack of repositories
22:09 < cloudbender> <<< left arm is broken, lot-o-typos
22:09 < katatonia> cloudbender: go fuck yourself
22:09 < cloudbender> ?
22:09 < isaacbw> yea go fuck yourself
22:09 < cloudbender> whatever
22:09 < isaacbw> aaarrggghhh
22:09 < isaacbw> I'm so mad
22:09 < isaacbw> jk, I love you
22:10 < isaacbw> lol what
22:10 < isaacbw> he quit right after saying that
22:10 < cloudbender> must be a 12 year old from the chzeck republic
22:10 < brycebaril> yay irc.
22:11 < holzp> always check your republic
22:12 < isaacbw> yay, incense holder came in the mail
22:12 < cloudbender> My new favorite 'People are bastard-coated bastards with a bastard filling'.
22:12 < isaacbw> now people will stop giving me weird looks for using nail clippers
22:12 < cloudbender> 'Incense' ?
22:12 < isaacbw> to hold the incense
22:13 < isaacbw> cloudbender, http://stuffstonerslike.com/wp-content/uploads/2008/04/incense.jpg
22:13 < holzp> his cents bought a holder for his incense, make sense?
22:13 < cloudbender> It's better than candles, which my roomy burns.
22:14 < cloudbender> Too much wax smoke.
22:14 < isaacbw> I think people assume I smoke lots of weed
22:14 < isaacbw> because I act like I'm high all the time and I'm always burning incense
22:14 < hydrozen> Hi there. Anyone has any experience with the wd library (web driver for selenium). I'm wondering if you always have to explicitely get an element using getElementById (or something similar) before being able to type something in the fieldâ€¦. or if there's a way to specify some kind of id or css selector to the type command.
22:14 < holzp> i would just assume you do not shower
22:14 < isaacbw> that's possible too
22:14 < isaacbw> I'm kind of gross
22:15 < isaacbw> not gross, but
22:15 < isaacbw> damn
22:15 < isaacbw> fuck you guys
22:15 < isaacbw> I shower
22:15 < isaacbw> sorry, coffee
22:16 < isaacbw> this adorable japanese woman is moving into my apartment
22:16 < CoverSlide> adorable as in ...
22:16 < cloudbender> I'm one of those people who smells like what he eats.  I have to be careful with junk food.
22:16 < CoverSlide> bonable?
22:17 < cloudbender> lol people geez 'bonable'.
22:17 < cloudbender> lol
22:17 < isaacbw> like, she forgot to take off her shoes when she came inside and apologized profusely
22:17 < isaacbw> and i was like 'lol, I don't care if you wear shoes'
22:17 < isaacbw> and she was like 'omg i'm so sorry
22:17 < cloudbender> yup, she's bonable
22:17 < CoverSlide> me so solly!
22:18 < isaacbw> aw
22:20 -!- CoverSlide was kicked from #Node.js by Nexxy [CoverSlide]
22:21 -!- cloudbender was kicked from #Node.js by Nexxy [cloudbender]
22:21 < CoverSlide> :(
22:21 < cloudbender> I apologize
22:23 < cloudbender> No offense intended.
22:23 <@Nexxy> yeah it's totally not offensive to discuss whether someone is "bonable" in a community support channel.
22:23 <@Nexxy> get it together
22:24 < cloudbender> I get your point, I'll be more careful.
22:24 <@Nexxy> that would serve you well :)
22:24 < holzp> Anybody read the js ninja book yet? http://jsninja.com/
22:24 < cloudbender> Actually it would.  The channel is awesome.
22:24 < holzp> its fairly awesome
22:25 < holzp> 40% off coupon code makes the book a steal: j1740
22:25 < holzp> its sold out on amazon already
22:25 < CoverSlide> wow you get as much off as it is complete!
22:25 < holzp> jresig is a co-author
22:25 < holzp> the book? its done
22:26 < isaacbw> no, I'm boycotting it because I wanted that domain name
22:26 < isaacbw> bastards
22:26 <@Nexxy> lol
22:26 < holzp> its interesting he actually (thus far) uses a lot of examples from Prototype
22:26 < holzp> I thought it would be all JQuery
22:27 < CoverSlide> oh he finally completed it
22:27 < holzp> well the book does have this wierd ninja obsession thing
22:27 <@Nexxy> I think that's called "character"
22:28 < holzp> yeah its good
22:28 <@Nexxy> I can't believe how many node books there are
22:29 <@Nexxy> someone should make a review blog for them all
22:29 < holzp> I didnt think there were many
22:29 < cloudbender> I saw one at Chapters last week, almost dropped $70.00
22:29 <@Nexxy> it seems like a new one every couple weeks
22:29 < holzp> well it is an emerging thing
22:29 < cloudbender> It's kinda exciting
22:29 < holzp> but so many of them are the same old
22:30 < CoverSlide> meh, i've stopped reading things on dead trees, google and github are my reading material
22:30 < thoughtthirst> I'm trying to install node.js on a centos 5.8 dist and I'm running into trouble. I've been all over the web back and forth looking for a solution but the few I've come across mention the rpm from tchol.org (which seems to be down), or using nave, which throws it's own errors at me. I'm on a media temple (dv) share so switching to a more friendly dist like Ubuntu isn't an option unfortunately. Would appreciate any kind of hel
22:30 <@Nexxy> I think just about everything is available in at least one ebook format
22:31 < cloudbender> I am reading ECMA262 on wikipedia.  It's cheap.
22:31 < holzp> I still appreciate the comprehensive narrative of a book
22:31 <@Nexxy> thoughtthirst, have you tried compiling from source?
22:31 < holzp> thoughtthirst, I ended up compiling it for Amazon Linux which i think is a centos offshoot
22:32 < Deathspike> thoughtthirst, you can add a repo for CentOS and use yum to install node?
22:32 < CoverSlide> thoughtthirst: install python 2.7
22:32 < cloudbender> amazon linux. hmmmm. another intrigue.
22:32 < CoverSlide> and compile yes,
22:32 < holzp> im not gonna be using much else on AWS
22:33 < holzp> have to figure they will keep their own linux at the front edge
22:33 < CoverSlide> quite the opposite i believe
22:33 < holzp> but that was my first linux in 12 years
22:33 < CoverSlide> I think they would value stability
22:33 < holzp> front edge of aws features, even for stable
22:34 < cloudbender> Wow I have to get good at compiling sources.
22:35 < CoverSlide> ha wonderful, the wifi for our office ran out of ips
22:35 < jamesd> quick get management to fire some people :-) 
22:35 < cloudbender> Iphones are a b%tch
22:36 < cloudbender> I have the same problem in my lobby
22:36 < CoverSlide> we're hiring like 3 people a week, it's nuts over here
22:36 < cloudbender> You need to set a policy, trust me.
22:36 < cloudbender> It's gonna eat up your route.
22:37 < cloudbender> The new devices are gobbling up all the bandwidth I can budget for.
22:37 < cloudbender> I may have to block sites at the router.
22:38 <@Nexxy> someone should implement a post-receive hook that bumps people's rate limit 
22:38 < holzp> there is really a testing library called "Screw.Unit"
22:38 <@Nexxy> commit for faster WiFi!
22:38 < holzp> netflix, spotify, reddit, facebook
22:38 < cloudbender> They will take anything I can commit.
22:38 < holzp> then all your bandwidth  comes back
22:39 <@Nexxy> along with your productivity
22:39 < cloudbender> right
22:39 <@Nexxy> and requests to work from home
22:39 < holzp> attempts to circumvent != productive
22:40 < holzp> i gotta get better at regex :(
22:40 < cloudbender> I am about to draft a letter, as the IT director, to the VP, on this very topic.
22:40 < CoverSlide> hey i think all our source needs a copyright notice!
22:41 < holzp> you can do that in pre-release processing
22:42 < holzp> its the proper place for it, keep it out of yo face
22:42 < CoverSlide> yeah but that's like 100 lines per file for me!
22:43 < holzp> just drop an indicator in the source /* COPYRIGHT NOTICE */ 
22:43 < holzp> then as part of a release build replace it with the actual copyright notice
22:43 < holzp> auto-magically
22:44 < holzp> and have the notice in source control as a text file so you can track its contents too
22:44 < holzp> and tag it with each build so you know what it actually says per-build
22:58 < isaacbw> does anyone know of a service that resells twitter firehose data with *just* the geolocation?
23:02 < MI6> joyent/libuv: Bert Belder master * e4d8cba : unix: support sending uv_udp_t handles over ipc pipes - http://git.io/gmKiJw
23:20 < MI6> joyent/node: Bert Belder master * e2acf26 : deps: upgrade libuv to e4d8cba - http://git.io/H-JhuA
23:21 < addisonj> hrm... anyone know of a ppa that keeps around older version of node packages? chris lea's doesn't...
23:21 < addisonj> wanting to test something against an earlier version...
23:21 < CoverSlide> use nave / nvm /n
23:22 < CoverSlide> for some versions you can use direct downloads
23:22 < CoverSlide> others you have to compile
23:22 < CoverSlide> but it's all of 20 minutes or so to compile
23:23 < Raynos> Does anyone know a different way to access NativeModule? ( https://gist.github.com/1841241 does it but uses arguments.callee :() 
23:29 < cloudbender> this. works a bit differently in JS I see. 
23:30 < cloudbender> If I declare this.property within a block, does it stay in block-scope with the leading VAR keyword ?
23:31 < cloudbender> << Thinking interms opf 'classes' today
23:31 < cloudbender> I mean without the keyword dang.
23:31 < CoverSlide> /msg ecmabot oop
23:31 < othiym23> cloudbender: "this" is dynamic and materialized at evaluation time, not compilation time
23:31 < cloudbender> OK I'll play with it sometime
23:32 < othiym23> and is scoped to a function, not a block, since JavaScript has hoisting
23:32 < cloudbender> copy hoisting
23:32 < mary5030> in an array I know my begining index[1] but my end depends on the number of input how can i set this range
23:32 < othiym23> so if you take that function and move it from one object to another, this will point to the new object
23:32 < mary5030> any help appreciated
23:33 < CoverSlide> personally, the js resource that helped me the most was http://bonsaiden.github.com/JavaScript-Garden/
23:33 < cloudbender> ok
23:33 < othiym23> and if you copy a reference to a function off its original object (var funktion = object.method; funktion()), this will point to the global object
23:33 < CoverSlide> http://bonsaiden.github.com/JavaScript-Garden/#function.this
23:33 < cloudbender> mary5030 can you not look at the array.length ?
23:34 < othiym23> mary5030: index.length - 1 is the final element in the array
23:34 < jim_X11> any suggestions for node.js books?  Maybe something written by an active community member?
23:34 < CoverSlide> jim_X11: smashing node if you want to know how to write a complete app 
23:34 < othiym23> jim_X11: Node doesn't do books, but Tom Croucher-Hughes' book for O'Reilly isn't bad, and Guillermo Rauch's book for Smashing is the next level up from that
23:35 < mary5030> how would i type that args.slice(1, index.length )
23:35 < mary5030> ?
23:36 < jim_X11> CoverSlide and othiym23: thanks!
23:36 < othiym23> mary5030: if you just want everything but the first element, just use args.slice(1)
23:37 < mary5030> ok thanks
23:39 < mary5030> othiym23 thanks a bunch
23:39 < mary5030> !
23:42 < cloudbender> othiym23 nice bonsaiden reference thank you
23:45 < isaacbw> are there significant speed differences between SET vs HSET?
23:46 < isaacbw> in redis
23:46 < CoverSlide> TIAS, why?
23:46 < isaacbw> what
23:46 < CoverSlide> try it and see
23:46 < isaacbw> that's work
23:46 < isaacbw> ugh, headache
23:47 < isaacbw> does json.parse throw an exception?
23:47 < CoverSlide> yes it throws
23:47 < isaacbw> cool, thanks
23:47 < CoverSlide> you have to try/catch
23:47 < othiym23> cloudbender: that was CoverSlide's reference, not mine!
23:48 < cloudbender> CoverSlide sorry and thank you
23:48 < CoverSlide> np
23:48 < othiym23> isaacbw: if you look at the dox on redis.io, Salvatore and Pieter have helpfully put the complexity cost of each command right there at the top of the page
23:48 < isaacbw> oh, how nice
23:48 < cloudbender> And I gotta say I love the way that page works, GUI I mean.  very slick.
23:48 < isaacbw> thank you
23:49 < othiym23> so both SET and HSET are O(1)
23:50 < CoverSlide> that's algorithmic complexity, not necessarily the actualy performance
23:54 < isaacbw> it's still helpful CoverSlide 
--- Log closed Wed Jan 23 00:00:11 2013
