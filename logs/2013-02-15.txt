--- Log opened Fri Feb 15 00:00:35 2013
00:01 < SandorKrashna> anyone know how to enamble the public folder in express 3
00:02 < DarkArgon>   app.use(express.static(path.join(__dirname, 'public')));
00:04 < SandorKrashna> getting an express is not defined 
00:05 < groundwater> SandorKrashna: is express defined? lol
00:05 < SandorKrashna> here is my code http://pastebin.com/GXxFLhXv
00:05 < SandorKrashna> express is included 
00:05 < groundwater> SandorKrashna: express isn't defined
00:05 < groundwater> SandorKrashna: importing it doesn't define it, you need to assign it
00:05 < groundwater> var express = require('express')
00:06 < SandorKrashna> gotcha thanks
00:06 < groundwater> then "var app = express();"
00:07 < MI61> joyent/node: isaacs v0.8 * 987338f : http: Do not let Agent hand out destroyed sockets  Fix #4373 (+1 more commits) - https://github.com/joyent/node/compare/3e2be6f39f70...987338fe31b3
00:07 < SandorKrashna> thank you
00:08 < groundwater> np
00:31 < othiym23> so has anyone here done any metrics gathering on Heroku?
00:31 < othiym23> specifically, correlating how X-Request-Start measures up with the time when a Cedar stack Node app receives an incoming request?
00:32 < mmalecki> othiym23: I'd read http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics first
00:32 < othiym23> mmalecki: that's why I'm asking ;)
00:32 < groundwater> othiym23: that article wouldn't affect node.js in the same way it affects ruby
00:33 < othiym23> groundwater: I know, but I do wonder if anyone outside Heroku's seen if the numbers match up between x-request-start and x-heroku-queue-wait-time
00:33 < othiym23> i.e. if there's overhead within Heroku's mesh that isn't captured by the queueing time
00:33 < othiym23> (docs on what I'm talking about: https://devcenter.heroku.com/articles/http-routing#heroku-headers)
00:34 < othiym23> as an aside, based on the things various dudes from nodejitsu have told me, all the discussion about how hard it is to squeeze two unicorn instances into a 512MB dyno are kinda funny, kinda sad
00:38 < dscape> othiym23: leave me out of it :P
00:38 < dscape> eheh
00:38 < dscape> just kidding
00:38 < dscape> how are you? :)
00:39 < mmalecki> hahaha
00:39 < othiym23> dscape: hah, it wasn't even you
00:39 < othiym23> dscape: I'm good, how's tricks?
00:39 < dscape> all good :)
00:40 < dscape> btw the most shocking thing for me in that article was that each dyno is one concurrent connection
00:40 < othiym23> you guys could probably get a good competitive white paper out of showing how much extra bullshit Heroku piles onto a worker instance because they're not Node-focused
00:40 < othiym23> although I spose you've already done it and I just haven't seen it
00:40 < mmalecki> othiym23: I just got the same idea
00:40 < mmalecki> othiym23: and am starting a chapter in the handbook
00:40 < othiym23> good show
00:41 < rossk1111> mmalecki, which handbook is this?
00:41 < mmalecki> rossk1111: nodejitsu/handbook :)
00:41 < rossk1111> i figured, just sanity checking :D
00:42 < groundwater> dscape: are you nodejitsu?
00:42 < dscape> groundwater: i work at nodejitsu, yeah
00:43 < mmalecki> dscape: "work" - he mostly wears hats and drinks beer
00:43 < groundwater> dscape: cool, nice to meet you
00:43 < dscape> likewise groundwater 
00:43 < dscape> im also sometimes in nodeup if you listen to that
00:43 < dscape> if you dont you should, its great
00:43 < dscape> (except when im there) :P
00:43 < othiym23> nodeup's good times
00:44 < othiym23> even mostly when Nuno's there
00:44 < groundwater> dscape: i am curious about the nodejitsu router actually, a blog post would be cool (assuming one doesn't already exist)
00:44 < dscape> groundwater: we like to grow on our own merits, we are super proud of having integrity as a core value
00:44 < dscape> not that we would mind if someone else did that
00:45 < dscape> but if we do, it wont be right after a bashlash on heroku
00:45 < dscape> if we do, its because we want to inform users
00:45 < groundwater> dscape: heh, yah i wouldn't want to read an anti-heroku post
00:45 < dscape> but its a good idea :) especially cause we have nothing to hide
00:45 < groundwater> maybe it's a bad time
00:45 < dscape> you can ask mmalecki, he wrote most of it :)
00:45 < othiym23> I'm just amazed they haven't actually gotten a blog post up yet
00:45 < groundwater> mmalecki: nice to meet you to!
00:45 < dscape> you can also check nodejitsu/http-proxy
00:45 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:45 < mmalecki> did I? jeez, I hate this code
00:45 < othiym23> I know Oren slightly casually, and he's generally very on the ball
00:45 < dscape> its the beauty of open source
00:45 < dscape> :)
00:45 < mmalecki> groundwater: nice to meet you too :)
00:46 < othiym23> s/casually/socially/
00:46 < mmalecki> groundwater: I actually started working on a chapter in handbook
00:46 < mmalecki> people happen to have questions about websocket routing
00:46 < mmalecki> and things like that. this is a good idea. I can promise it won't be opinionated :)
00:46 < SandorKrashna> can you have a client connected to a node server forever or is there  a timeout?
00:47 < amurdaca> just read on Professional Nodejs that: you shouldnâ€™t perform CPU-intensive operations inside
00:47 < amurdaca> the event loop
00:47 < dscape> SandorKrashna: infiniterequest.com
00:47 < amurdaca> so how should i use a cpu intensive op in node?!
00:47 < groundwater> amurdaca: don't perform I/O tasks together with CPU-bound tasks
00:47 < mmalecki> amurdaca: spawn child processes
00:47 < groundwater> amurdaca: use a work queue for CPU-bound tasks
00:47 < dscape> SandorKrashna: github.com/daleharvey/infitiniterequest has the code
00:47 < amurdaca> groundwater can you explain more noob friendlY?:)
00:48 < mmalecki> or a work queue ^
00:48 < amurdaca> oh
00:48 < Spion> pool of workers ready to accept tasks :)
00:48 < Spion> (worker processes that is)
00:48 < Spion> and for RPC, its easiest to use dnode
00:48 < mmalecki> libuv has solutions for that too
00:48 < amurdaca> so ill just spawn a node process and let it process it
00:48 < groundwater> amurdaca: the workers pull jobs from the queue, the webserver pushes jobs to the queue
00:48 < mmalecki> which is called 'work queue' too
00:48 < mmalecki> in case you like coding C
00:48 < amurdaca> gotcha!
00:48 < groundwater> amurdaca: usually workers are long-running, and tuned to the number of cpu-cores
00:49 < amurdaca> did Computer science class about C 
00:49 < amurdaca> groundwater so there is 1 main process and others are workers right?
00:49 < Spion> you don't really have to write them in C (at first)... moving them out of the main event loop should be enough... right?
00:49 < amurdaca> (i mean, a scenario)
00:50 < SandorKrashna> infiniterequest.com doesnt work
00:50 < amurdaca> Spion yep
00:50 < groundwater> amurdaca: scale the web servers to handle the web traffic
00:50 < groundwater> amurdaca: scale the workers to use the cores
00:50 < groundwater> amurdaca: they independently scale
00:50 < dscape> SandorKrashna it does, its the point
00:50 < dscape> a nodejs server that never responds
00:50 < amurdaca> im not talking only about web server :) i mean in general
00:50 < dscape> didnt you ask about that?
00:50 < dscape> >  can you have a client connected to a node server forever or is there a timeout?
00:51 < dscape> code: github.com/daleharvey/infitiniterequest 
00:51 < groundwater> amurdaca: yah, i think you get the idea
00:51 < dscape> btw, default timeout is 2 minutes
00:51 < DarkArgon> 404
00:52 < dscape> sry: https://github.com/daleharvey/infiniterequest
00:52 < jschall> where is documentation for JSON.parse?
00:52 < SandorKrashna> i think we're talking about different things, I am connecting to my node server and interacting on my site, but lets say i leave this site on overnite in my browser is my connection going to stay open. BTW i am talking aobut socket.io connections
00:53 < SandorKrashna> i wasnt clear in stating my question
00:53 < othiym23> SandorKrashna: yeah, it'll stay open, but it may not stay on a websocket the whole time
00:53 < othiym23> in fact, I'd be kind of amazed if it did
00:54 < othiym23> I(I have not had the greatest luck with websockets being long-lived)
00:54 < amurdaca> jschall JSON.parse is a general js function what are u lookin?
00:54 < SandorKrashna> i need to have this socket.io app to have an 100% uptime because we're using it on a video wall installation
00:55 < SandorKrashna> the server is loading videos into the browsers
00:55 < jschall> amurdaca: documentation about it. what errors it throws.
00:55 < Spion> socket.io does auto-reconnect right?
00:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:55 < Sembiance> Spion: don't remember. I switched away from socket.io to sockjs
00:56 < DarkArgon> jschall, https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse
00:56 < Spion> ah there is a disconnect event which you can use to reconnect
00:56 < SandorKrashna> yes socket.io does have a disconnect
00:57 < Spion> Sembiance, + shoe + dnode here :)
00:57 < othiym23> SandorKrashna: you're pushing video over a socket.io connection?
00:58 < SandorKrashna> i am not pushing the video i am just pushing the url of the videos over socket.io
00:58 < SandorKrashna> and having them play all at once via socket.io
00:58 < Sembiance> Spion: shoe looks to be sockjs based :)
00:58 < Spion> yeah, hence the "+"
00:58 < Spion> :D
00:59 < mAritz> are there any modules for having a timeline on the state of some object where you can playback what happened?
00:59 < Spion> shoe to get a stream, then dnode to get full blown rpc
00:59 < Spion> and then - freedom!
00:59 < Spion> export *all* the server-side things to the browser!
00:59 < Spion> :)
00:59 < othiym23> SandorKrashna: that makes sense -- socket.io should work just fine for that, assuming you're fine with having it fall back to XHR if the websocket connection goes wonky
00:59 < Spion> okay, not all
01:01 < Spion> othiym23, i think he mentioned yesterday that its going to be LAN-only
01:01 < SandorKrashna> absolutely
01:01 < Spion> so it might just hold up much better
01:01 < mAritz> or are there databases where you can stop the reception and then rewind/pause/play what changed?
01:01 < Sembiance> Spion: using sockjs in my latest web game project: http://worldofcardgames.com
01:02 < SandorKrashna> yes Spion is correct, its all LAN
01:02 < othiym23> Spion: anything's possible ;)
01:03 < othiym23> especially if it's just browsers under your control talking directly to Node with no Internet in between
01:03 < SandorKrashna> yes my videos are playing in sync
01:03 < SandorKrashna> yay
01:03 < othiym23> my bad experiences with websockets have to do with working with fairly complex web stacks + AWS + proxies + who knows what else
01:04 < Sembiance> othiym23: it can get complex quick if you let things get away from you. Need to always be saying "How can I make this simpler?" heh
01:05 < SandorKrashna> socket.io is perfect for video walls 
01:05 < SandorKrashna> interactive video walls too
01:05 < SandorKrashna> i hope it works out
01:05 < othiym23> Sembiance: well yeah, but that assumes that you aren't working with a bunch of other developers with their own agendas ;)
01:05 < Sembiance> othiym23: ahhh, true :)
01:06 < motaro> What happened the other day I received a bunch messages with some file that stopped my client?
01:12 < Spion> ah damn. i saw this and thought its the whole game - http://www.adityaravishankar.com/projects/games/prince-of-persia/
01:13 < Spion> i really miss that game
01:13 < Sembiance> hehe
01:14 < othiym23> Spion: go nuts! https://github.com/jmechner/Prince-of-Persia-Apple-II
01:14 < Sembiance> I had fun playing it back on the C64 and a PCJunior machine. I wasn't very good though
01:15 < Spion> othiym23, go nuts trying to port it? :P
01:15 < othiym23> aw c'mon, a little 6502 assembly never hurt nobody
01:15 < Spion> you did say "go nuts"
01:18 < asdf12> it sucks that twitter/flight has jquery as a dependency
01:19 < systemfault> Because you don't like jQuery? ;)
01:19 < asdf12> no because i like options
01:20 < othiym23> the only part of Flight that really interests me is Angus's lil mixin / advice library
01:20 < jschall> hmm, i just ran into an interesting problem. i wrote a tcp server that asynchronously runs a hashing algorithm that takes a lot of time... i set timeout to 10000ms and i socket.end(); in the timeout handler, but it doesn't stop the (very cpu intensive) hash
01:20 < Spion> to me it seems like flight doesn't have a clear separation of concerns :/
01:21 < Spion> everything is a component, but then there are data components and ui components.
01:21 < jschall> so if i make 100 requests at the same time, it will reply to like 20 of them and then the rest of them will timeout, but it will still be sitting there 40 seconds later trying to work on the requests that timed out
01:21 < othiym23> jschall: you have to figure out how to tell the algorithm to pause yourself -- just a setTimeout isn't going to terminate processing on its own
01:21 < asdf12> othiym23: thats not really mind blowing to me, but flight is a really good alternative to backbone , i've been playing with it
01:22 < asdf12> it's dependency to jquery isn't even that bad, someone could do a pull request to drop it :DD
01:22 < othiym23> jschall: either you want the hashing done in a separate process, or you want to chunk it up with process.nextTick so that it only does bits of work per turn of the event loop
01:23 < othiym23> asdf12: I like how lightweight and clean the mixins approach is, and also because I saw a talk Angus gave about it last year at Fluent and have been waiting for his version to show up as source ever since
01:25 < Spion> and then there is also AMD
01:26 < jschall> othiym23: so it can't cancel things that it's doing if they time out?
01:26 < asdf12> components make more sense to me than mvc or similar
01:26 < jschall> othiym23: or there's no mechanism to make it cancel them?
01:26 < asdf12> for the web 
01:26 < othiym23> jschall: it's a running function -- even if you have a timer fire, the function's still going to run to completion
01:27 < othiym23> so no, there's no way to just kill a function within V8
01:27 < Spion> jschall, why not spawn a separate process for each?
01:27 < systemfault> Guysâ€¦ Flight is a framework and frameworks are opinionated :/
01:27 < Spion> that way you can kill it
01:27 < therealkoopa> Does anyone have any good articles on deployment for node? I'm wondering if it's best to use git push and have a hook that does the npm install. Or do npm pack and send teh tar the server for the deploy
01:27 < Spion> if you can't do that (memory) there still is a way, that is, if you are willing to give up 50% of the performance there is a way
01:29 < Spion> jschall, https://gist.github.com/spion/4701611 - using fibers, fibrous and a high performance manual context switcher
01:29 < Spion> basically a thread with manually defined preemption points
01:29 < Spion> :)
01:29 < Spion> and giving up 50% is probably the worst case scenario
01:29 < asdf12> you know what the channel topic should be?
01:29 < asdf12> 'SINGLE MEN TALKING TONIGHT"
01:30 < Spion> aww.
01:30 < othiym23> tsk, could be some single women in here as well
01:30 < asdf12> you wish
01:30 < asdf12> lol
01:30 < Sembiance> I love node :)
01:30 < othiym23> or, you know, people who just don't really give much of a shit about Valentine's Day
01:30 < jschall> stop making me depressed
01:31 < othiym23> although I will be celebrating v-day by ni noing some more kunis
01:31 < Spion> jschall, basically this (the gist) is a way to write a cpu-intensive task using fibers that doesn't block the event loop.
01:32 < Spion> (however there is a price to pay)
01:32 < othiym23> YOUR SOUL
01:32 < Spion> yes.
01:32 < othiym23> shoulda read the license more carefully
01:32 < Spion> thou shall be damned by the node gods
01:32 < Spion> which do not approve of fibers.
01:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:33 < Spion> also if your computation does not require() anything you might give threads_a_gogo a try - if it still works
01:33 < othiym23> on the whole, it's probably cleaner to shove computation into a child process of some kind and keep the request-handling process async and evented
01:34 < othiym23> Spion: somebody's pushing threads_a_gogo at least once a week on the google group, so somebody still thinks it works, at least
01:34 < Spion> othiym23, i think the issue here is canceling that CPU-intensive task.
01:34 < Spion> killing the process should work though
01:34 < jschall> well, i guess i'm trying to determine the behavior when it gets overloaded...if i waste time half-running hashes and canceling them, that's just dumb
01:35 < jschall> but if i waste time finishing running the hash after the user has disconnected, that's dumb too
01:35 < othiym23> jschall: this sounds like a job for a job queue
01:35 < othiym23> have a worker pool that computes hashes, push requests on the queue from the master process, have the workers pull them off, have the workers post notifications that the hashes are done onto another queue, etc
01:36 < othiym23> that'll be a lot easier to scale, to boot
01:37 < jschall> it's kind of inefficient that asynchronous stuff can't be stopped if the client disconnects...
01:38 < khayes> should the packages in my ~/.npm dir, be owned by root?
01:58 < RLa> any way to get node's repl on android?
02:03 < othiym23> anybody happen to know when node / cares uses ENOENT and when it uses ENOTFOUND?
02:04 < othiym23> I had a test case that's flipflopping between the two
02:05 < othiym23> it seems to be a change between 0.8.17 and 0.8.18
02:05 < jschall> interesting, if i make 100 requests at the same time to a cluster, one of the workers ends up with 99% of the work
02:05 < othiym23> guess I'll just take me a gander at the changelog
02:05 < othiym23> jschall: is your cluster running on Linux?
02:06 < jschall> othiym23: yes
02:06 < othiym23> it's a known issue, and as far as anyone knows, it's a kernel thing
02:06 < othiym23> I don't know the issue number offhand, but there's some discussion of it on node's github issue tracker
02:07 < jschall> othiym23: interesting.
02:07 < jschall> othiym23: i think i need some kind of queue
02:07 < othiym23> jschall: IIRC, it gets better or worse depending on which version of the kernel you're running
02:07 < othiym23> jschall: yeah, you do ;)
02:09 < jschall> othiym23: or i'm just massively overengineering this thing...
02:09 < andrewaclt> Is there a quick read about building rest apis in node?
02:10 < othiym23> hah! found it
02:10 < othiym23> https://github.com/joyent/node/commit/7295bb9435c10fe569d36e64d50769fed4b5d7e3
02:10 < othiym23> it's a byproduct of making the actual errorcode match the error message
02:11 < othiym23> OK, now to make my test less dependent on the actual version of Node running
02:11 < othiym23> andrewaclt: it's not exactly a quick read, but "Building Hypermedia APIs with Node.js" has a really good read about API design
02:11 < othiym23> andrewaclt: a faster read is probably the Restify docs
02:12 < othiym23> jschall: that's also possible -- what are you actually trying to do?
02:12 < jschall> othiym23: well, i'm writing a website for a startup, and this is just the authentication server
02:13 < andrewaclt> othiym23, book looks pretty good, kinda outdated?
02:14 < othiym23> andrewaclt: it actually doesn't have that much code, and some of the code examples are a little stale, but they're easy enough to bring up to speed
02:14 < andrewaclt> othiym23, thanks I'll take a look
02:15 < othiym23> andrewaclt: and the focus on Couch is actually kinda nice
02:15 < othiym23> jschall: so are you like trying to compute bcrypt / pbkdf2 in your Node process?
02:16 < jschall> othiym23: yes
02:16 < andrewaclt> othiym23, restify looks pretty solid too
02:16 < jschall> othiym23: as suggested here earlier
02:16 < jschall> othiym23: well, i'm using an async bcrypt module
02:18 < othiym23> jschall: ISTM that if you're trying to log people in, you should probably be serializing auth on the validation of their credentials
02:19 < jschall> othiym23: what do you mean?
02:19 < othiym23> i.e. you should be treating it as synchronous and letting the event loop block
02:19 < othiym23> and if that makes for a slow login server, you probably want to have a cluster of them, rather than a worker pool
02:19 < othiym23> at least that's what I'd do
02:20 < othiym23> andrewaclt: for API servers, Restify is a simpler, more efficient choice than Express -- it's nice
02:21 < andrewaclt> othiym23, yeah, it looks exactly like what I need
02:21 < andrewaclt> othiym23, the book seems to cover the design theory so that's helpful
02:22 < jschall> othiym23: right, so what i have right now is a TCP server that i send a JSON-encoded request to, and for each request it runs bcrypt and responds with a success: true or success: false.
02:24 < jschall> othiym23: what i'm thinking i need to do is make another server that builds a queue of requests and then passes them on to various workers as they become available.
02:25 < jschall> othiym23: and then i just register as many workers as i want with that server and they can be on different physical boxes or whatever.
02:25 < jschall> othiym23: is that what you were thinking?
02:26 < freeformz> jschall: what are you doing ?
02:26 < jschall> freeformz: an authentication server
02:27 < jschall> freeformz: a probably ridiculously overengineered authentication server
02:28 -!- mode/#Node.js [+o isaacbw] by ChanServ
02:28 < freeformz> jschall: I would remind you of http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
02:29 < freeformz> jschall: i.e. use HTTP response codes as often as possible instead of arbitrary things in the body.
02:29 < jschall> freeformz: this isn't even http
02:29 < freeformz> jschall: ahh well then nevermind
02:52 < andrewaclt> Can you use jade client side?
02:52 < mAritz> yes
02:53 < mAritz> but if you can, it's better to pre-compile to js functions
02:53 < andrewaclt> oh
02:53 < andrewaclt> that works too
02:53 < mAritz> if you're using yeoman/grunt there is grunt-jade to help you with that :)
02:54 < mAritz> you'll still need the runtime in the browser
03:06 < jschall> is Array.shift() O(n) or O(1) with V8?
03:09 < psyl0v> would anyone know if its possible to compile .jade files into a different extension instead of .html ?
03:44 < benatkin> I was screwing around with questionable filenames and found this :) https://github.com/joyent/node/issues/4779
03:50 < AAA_awright> benatkin: I'd ask what does argv show
03:50 < AAA_awright> but... that's not really sensical is it
03:52 < benatkin> AAA_awright: it's probably unintended consequences of some code, and it might turn up in other scenarios too
03:55 < swaj> man I just wrote some nasty-looking express middleware to make connect-flash messages play nicely with dust.js templates...
04:09 < chris---> any ideas why if I have two dependencies in my package.json file, and do 'nmp install' the first time it fails http://pastebin.com/CPVNCtU8 then if i just run 'npm install' again it works. and if i remove the node_modules dir and it redoes it all it works fine the first time after that?
04:10 -!- mode/#Node.js [+o isaacbw] by ChanServ
04:43 < cloudbender> It seems I can assign an iife to a var, but should I ?
04:43 < brycebaril> does it return a value you want to keep?
04:44 < cloudbender> var gotime = (function myprog(){...})();
04:44 < cloudbender> no
04:44 < cloudbender> but it could be used as a refernce
04:44 < cloudbender> i.e. gotime
04:44 < chris---> looks like its restify in particular that wont install without two trys
04:45 < brycebaril> cloudbender: the thing you are saving is not the function but the value returned by it
04:45 < brycebaril>  var foo = (function go(){return "hi";})();
04:45 < brycebaril> foo is now "hi"
04:46 < cloudbender> right
04:48 < cloudbender> I wrote a proof model today, entitled 'fun with properties and references'.
04:48 < cloudbender> ... but it wasn't fun.
04:50 < cloudbender> ... but I learned alot.
04:52 < mscdex> node.js rules!
05:15 < cloudbender> I guess I should be to picky about speed if I'm eventing lot's of calls.
05:21 < carl_> Could anyone tell me how to easily transform an incoming post like this: {title: 'This is a great title', info: 'this is some information'} to valid JSON (before entering it to mongodb)
05:24 < jschall> if i pipe two tcp connections to each other, they don't end, even though the documentation says "By default end() is called on the destination when the source stream emits end"
05:26 < plato> carl_: JSON.stringify({...}) ?
05:26 < plato> thats probaby not the right way to use mongodb tho. ive only played with couch
05:27 < carl_> yes i am doing JSON.stringify(req.body, function()...
05:27 < carl_> then adding it the DBD
05:27 < carl_> DB*
05:28 < carl_> however my shell gives me "Error: Invalid JSON"
05:28 < carl_> But it works as it should, its in the database and I can read it.. just don't like the error.. any thoughts?
05:28 < jschall> why doesn't this work how i would expect it to? it sends an empty string to my client. https://gist.github.com/anonymous/1ef8f62c40b343ce8cbd
05:29 -!- mode/#Node.js [+o isaacbw] by ChanServ
05:53 < lamarus_> is node really not meant to be used with mysql    ... should I create my node.js applicaiton with a nosql solution?
05:54 < groundwater> lamarus_ lots of people use it with mysql
05:54 < groundwater> it works fine
05:54 < lamarus_> i have just been doing a lot of reasearch on it and everyone seems to build restful api's on node using some nosql database (mongo)
05:55 < groundwater> well, that's up to them, but node definitely works with mysql
05:56 < lamarus_> sounds good... Just want to make sure before I get to far along in my planning
05:56 < groundwater> a wise idea
05:56 < groundwater> go nuts!
05:57 < lamarus_> oh i have been going nuts all day....   learning and head down into code trying to learn this thing...
05:58 < lamarus_> Thanks for the info again tonight groundwater 
05:58 <@Nexxy> \o/
05:58 < groundwater> lamarus_ no problem!
05:58 <@Nexxy> groundwater, lamarus_ you two are great
05:58 < groundwater> Nexxy that's your signature move
05:58 <@Nexxy> groundwater, yep!
05:59 < groundwater> i co-opted it earlier today
05:59 <@Nexxy> it's open source
05:59 <@Nexxy> there's also the salute
05:59 <@Nexxy> .o7
05:59 <@Nexxy> \o\ \o/ /o/
06:00 < groundwater> MIT licensed?
06:00 < groundwater> should i include the copyright notice each time
06:00 < lamarus_> im curious now... what is your signature move
06:00 < groundwater> \o/ - this emoticon is provided AS-IS without warranty
06:01 < SomeoneWeird> lols
06:01 < lamarus_> :)
06:07 < atharan> is resume called periodically on a stream?
06:07 < atharan> or am i supposed to do process.nextTick(this.resume.bind(this))
06:08 < atharan> i have a simple string stream class. stream.pipe(process.stdout) works
06:08 < atharan> without the nextTick
06:36 < MiracleBlue> Hey guys :D
06:41 -!- mode/#Node.js [+o isaacbw] by ChanServ
07:07 < xeodox> Why can't I install modules via npm non-root? (npm ERR! Please try running this command again as root/Administrator.)  Installing via root works
07:07 < xeodox> npm ERR! Error: EACCES, open '/home/user/.npm/64a534c1-express.lock'
07:33 < dileep> any module for not restarting the server again nd again
07:33 < xeodox> dileep , use forever
07:35 < efflux> total noob here.. can someone possibly tell me why my windows command line locks up after a running a node command?
07:36 < efflux> I run server.js and then can't do anything after that.. without restarting the cmd prompt
07:36 < groundwater> efflux what version of node are you running?
07:36 < efflux> 0.8.19
07:37 < SomeoneWeird> efflux, control c?
07:37 < efflux> just did a fresh install
07:37 < groundwater> efflux does your server-code catch any signals?
07:38 < efflux> ahh.. ctrl C did it!
07:38 < gkatsev> the node process is still running when you run node
07:38 < efflux> ah.. gotcha
07:38 < gkatsev> so, you either need to kill node, or do more work in a different window
07:38 < gkatsev> idk if you can background a process in cmd
07:39 < efflux> I'm just getting started with the basics right now.. not used to running anything from the command line
07:39 < gkatsev> efflux: get webstorm and you can run it from the IDE.
07:40 < gkatsev> (webstorm isn't free though)
07:40 < gkatsev> anyway, sleep time for me now
07:40 < gkatsev> night
07:40 < efflux> any packages for sublime text 2?
07:40 < efflux> thanks for your help
07:40 < gkatsev> ST2 probably has plugins
07:40 < gkatsev> np
07:40 < SomeoneWeird> it does
07:40 < efflux> right on
07:41 < gkatsev> (node-specific plugins, rather than plugins in general. I know it has plugins)
07:44 < dileep> xeodox:nodemon is best
07:47 < danny> hey um trying to install nodejs it gives me this error everytime bash: ./configure: No such file or directory
07:47 < danny> i am new to this can ne1 help??
08:00 < mscdex> danny: make sure you're in the right directory
08:02 -!- mode/#Node.js [+o isaacbw] by ChanServ
08:08 < Bonuspunkt> today = node.js 4th birthday?
08:14 < mscdex> Bonuspunkt: every day is a node.js celebration!
08:14 < Bonuspunkt> true, true, i'm just checking my memory
08:16 < Bonuspunkt> oh not today, tomorrow https://twitter.com/nodejs/status/288744877997559808
08:40 < [AD]Turbo> hola
08:41 < MiracleBlue> Heyo
09:00 < jschall> how do i keep node from terminating when i get the error "Error: listen EADDRINUSE?"
09:00 < jschall> i want to iterate through ports until i find one i can use
09:01 < jschall> never mind, found node-portfinder
09:11 < jurgenhaas> Hi, I'm having an issue with our firewall configuration (iptables on ubuntu 12.04), is there some advise available somewhere on how to do that properly if we're using sockets as well? Or is it just not possible?
09:13 < dileep> jschall: use nodemon in npm
09:14 < bradleymeck> jurgenhaas: can you specify what the issue is
09:17 < jurgenhaas> I have started the firewall and since the clients (some js in regular web sites) get very slow because they can't connect to the nodes server anymore
09:17 < jurgenhaas> I have opened TCP 80,443,8080 in and out plus the whole range of UDP in and out. 
09:17 < bradleymeck> are you using flash websockets?
09:18 < bradleymeck> also very slow != cannot connect
09:18 < jurgenhaas> Yes, cannot connect. And not sure which websockets. How can I find out?
09:19 < bradleymeck> jurgenhaas: that would just be in your codebase, some swf like websocket.swf would be included somewhere
09:20 < bradleymeck> either way if you cant serve anything it sounds like its just a firewall issue and google is your best bet for reading up on proper configuration
09:21 < jurgenhaas> It is a server.js from drupal.org which is otherwise working really well. What I found is that for transports it uses websocket, flash socket, htmlfile, xhr-polling, jsonp-polling
09:21 < jurgenhaas> With the firewall being stopped, everything works perfect - and that for several weeks now.
09:21 < jurgenhaas> I consulted Dr. Google already and haven't found anything specific
09:22 < jurgenhaas> That's why I thought I gonna ask here
09:22 < bradleymeck> jurgenhaas: if it has flash sockets see http://www.adobe.com/devnet/flashplayer/articles/socket_policy_files.html
09:22 -!- mode/#Node.js [+o isaacbw] by ChanServ
09:24 < jurgenhaas> bradleymeck: Thanks, I'll look into that
10:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:08 < MiracleBlue> Australia: Natural Disaster World Champions
10:09 < MiracleBlue> The same area is currently on fire *and* flash flooding
10:16 < mmalecki> MiracleBlue: which area? I happen to have friends there, a bit concerned
10:17 < MiracleBlue> mmalecki: Grampians, rural victoria
10:17 < SomeoneWeird> mmalecki, north west victoria
10:17 < SomeoneWeird> http://www.cfa.vic.gov.au/warnings-restrictions/warnings-and-advice/index.html?inUrl=websites_detail_1321863477.html
10:18 < mmalecki> ah, not bad. thanks.
10:19 < max> Hello. Can Node.js(+express) work with variables like $_SERVER["HTTP_HOST"] or any other solutions?
10:20 < SomeoneWeird> yes max
10:20 < SomeoneWeird> request.headers.host
10:24 < max> SomeoneWeird, thanks
10:24 < bradleymeck> MiracleBlue: you forgot they still have dangerous wildlife out there
10:25 < MiracleBlue> I never forgot ;)
10:25 < SomeoneWeird> yep
10:26 < alchimis_> hi everyone, I just put my nodejs app on an amazon ec2, when i run my app through ssh on amazon ec2 it is running correctly
10:26 < alchimis_> my question is how can i acess from an external computer
10:27 < alchimis_> i mean from my won computer what should i put on mu browser address bar to see the app 
10:27 < simius> your server ip:port
10:27 < alchimis_> i tried ip:port of my amazon imgaeit doest work
10:27 < alchimis_> it doesn't work
10:28 < simius> any firewall on?
10:29 < alchimis_> how can i check for firewal from ssh
10:30 < SomeoneWeird> sudo iptables -v --list
10:31 < alchimis_> this is the output https://gist.github.com/anonymous/4959564
10:33 -!- mode/#Node.js [+o isaacbw] by ChanServ
10:34 < jvanveen> morning
10:34 < jvanveen> im trying to execute two functions with callbacks in parallel. any idea which function in async is meant for that?
10:35 < SomeoneWeird> parallel?
10:35 < SomeoneWeird> lol
10:35 < SomeoneWeird> async.parallel
10:35 < jvanveen> oops :)
10:35 < jvanveen> lol
10:35 < jvanveen> sorry, i should have read the github page a little bit better
10:35 < jvanveen> yea, thats what i need
10:45 < alchimis_> SomeoneWeird: did u saw the out of sudo iptables -v --list , it is here, https://gist.github.com/anonymous/4959564 but from this i can not figure it out if the firewall is on
10:46 < mscdex> alchimis_: `service iptables status`
10:48 < alchimis_> mscdex: i see this /etc/init.d/iptables: line 53: /etc/sysconfig/iptables-config: Permission denied
10:48 < mscdex> huh... try prefixing with sudo?
10:48 < mscdex> or just `ps aux | grep iptables`
10:49 < alchimis_> this is the out put https://gist.github.com/anonymous/4959646
11:01 < Palsternacka> Hello.
11:09 < flock3> Hey guys - QQ: Is NodeJS a good choice for tailing a log file (using Tail via npm) and then inserting the results into beanstalkd?
11:10 < flock3> Or should I use a different language? 
11:53 < NuZZ> id say so
11:58 < foobar321> How to get fd from socket ?
11:59 < foobar321> Hi is it possible to get file descriptor in JavaSscript for given socket ?
12:17 < mrvisser> Anyone familiar with the amqp plugin for nodejs?
12:19 < shwaiil> hi
12:21 < shwaiil> Q: I've installed Forever to run a .Js as a daemon. I've noticed that I've got a process running but has nothing to do with forever, stopall says there's no forever processes running. I'm under linux so I do kill -9 PID but the .js file starts again with a different PID after I kill it, I wonder why ? thanks
12:21 < shwaiil> *in my early learning process of node 
12:21 < Palsternacka> That sounds messed up.
12:22 < shwaiil> root     22448  3.7  1.6  34992  8584 ?        Sl   12:19   0:00 /usr/bin/nodejs /var/www/nodejs/001/helloRefactor.js
12:22 < shwaiil> if I kill this process it gets a new PID loll... :Z
12:24 < Palsternacka> #1 rule of computerstuff, have you tried restarting your computer?
12:24 < shwaiil> humm found something interesting
12:24 < shwaiil> root     20133  0.0  2.6  55644 13224 ?        Ssl  Feb14   0:00 /usr/bin/nodejs /usr/lib/node_modules/forever/bin/monitor helloRefactor.js
12:24 < Palsternacka> THAT on our other hand side, is interesting. 
12:24 < mrvisser> shwaiil: looks like forever is just a node process itself.
12:25 < shwaiil> just stopped the script
12:25 < Palsternacka> mh mh.
12:25 < shwaiil> just wonder why stopall didn't worked. sorry about this question guys
12:25 < shwaiil> I'm pretty sure I tried forever stopall a few times :Z
12:25 < shwaiil> argh :X 
12:25 < Palsternacka> That question really belongs in a Linux channel though.
12:26 < shwaiil> Palsternacka: if just related with running processes yes... but I'm learning node.Js and installed the module forever
12:26 < shwaiil> so I guess it's more then fine to ask here, anyway
12:26 < mmalecki> Swizec: for some reason forever might not be seeing its monitors
12:26 < mmalecki> do a `ls ~/.forever`
12:26 < mmalecki> you should find some unix sockets there
12:26 < Palsternacka> Yes ofcourse, shwaiil!
12:27 < Palsternacka> Ima also new to node.js
12:27 < shwaiil> I'm going to try to initialize another "forever" process and see if stopall works
12:27 < shwaiil> Palsternacka: that's nice, but can u imagine going to linux to ask something that like u saw was related with forever ? and let me first try to understand the technologie
12:27 < shwaiil> no one else here ever complained 
12:28 < Palsternacka> no yeh, I get you.
12:28 < Palsternacka> But yeh, if process related.. I'd go to Linux-channels.
12:28 < Palsternacka> But people tend to know more than just what the channel tells one to discuss.
12:32 < shwaiil> So, I've run ' forever start helloWorld.js and did ' forever list ' the process was there and the ' forever stopall ' worked fine. now I'm going to exit the console and try to ssh and run ' forever stopall . earlier it didn't found the forever process so I had to kill it manually
12:33 < mmalecki> shwaiil: you really should ask here
12:33 < mmalecki> I actually wrote that part of forever
12:34 < shwaiil> mmalecki: really nice project btw, and thanks for looking!
12:34 < mmalecki> pleasure :)
12:34 < shwaiil> I think I found a bug! So, I'm learning nodeJs, installed in my vps, running ubuntu 12.04. after running forever start script and then ssh logout / exit 
12:35 < shwaiil> when ssh / login, forever stopall returns info:    No forever processes running
12:35 < mmalecki> oh, this *is* interesting
12:35 < shwaiil> the same for forever list
12:35 < mmalecki> is the process monitor alive?
12:35 < mmalecki> do a `ps aux | grep node`
12:35 < shwaiil> while ps aux | grep node returns 
12:35 < shwaiil> root     22492  0.2  2.5  55644 13092 ?        Ssl  12:28   0:00 /usr/bin/nodejs /usr/lib/node_modules/forever/bin/monitor helloRefactor.js
12:35 < shwaiil> interesting right mmalecki ?
12:36 < mmalecki> it is...
12:36 < mmalecki> can you do `ls ~/.forever/sock`?
12:37 < shwaiil> ls ~/.forever/sock returns empty
12:37 < mmalecki> interesting...
12:37 < mmalecki> very interesting
12:38 < shwaiil> is there something else I can pick from this and send to you ?!
12:38 < mmalecki> when monitor starts up it creates a unix socket in that directory
12:38 < mmalecki> well, it should
12:38 < mmalecki> sounds like it gets deleted somehow
12:38 < shwaiil> let me kill the process and then run that command again
12:38 < shwaiil> so I'll kill the process manually
12:40 < shwaiil> maleknet: so, I've run kill -9 PID; "forever start helloWorld.js"; and then "ls ~/.forever/sock" and I've got "worker.1360931779152sOg.sock" 
12:41 < mmalecki> yeah, this is how it should be
12:41 < mmalecki> try logging out now, please
12:41 < shwaiil> ok, so before login out I did "forever list" and the process is running etc it's fine
12:42 < shwaiil> connection to xxxx closed
12:42 < shwaiil> i'll ssh again
12:42 < shwaiil> humm
12:43 < shwaiil> mmalecki: it's there. forever list returns me the running process now
12:43 < shwaiil> strange
12:43 < mmalecki> yeah, very strange
12:43 < shwaiil> let me exit again
12:43 < therealkoopa> Do you typically recommend using forever locally during dev, if that's what you're using on the server (ec2)?
12:45 < shwaiil> mmalecki: so ok! I was logged in with the same user that init the process and after "forever list" I saw the process running fine.
12:46 < mmalecki> yeah, strange
12:46 < mmalecki> sounds like a race condition to me
12:46 < shwaiil> mmalecki: I've now exit, logged with the root acc and by running "forever list", the process list is empty
12:46 < mmalecki> oh, you have to run it under the same user account
12:46 < shwaiil> mmalecki: login in with the same user that init the process now gets a empty list as well
12:46 < mmalecki> OH.
12:46 < NuZZ> u need to kill the forever process b4 u kill node btw
12:46 < mmalecki> now this is way more interesting
12:46 < shwaiil> oh wait
12:47 < shwaiil> mmalecki: in the user acc ps aux | grep forever didn't found a process running 
12:47 < shwaiil> let me start again from step 0, I'll create a log from this, just a sec
12:54 < shwaiil> mmalecki: http://pastie.org/private/f2pqncce8ynruw2eamrja
12:54 < shwaiil> it seems that everything is alright
12:57 < shwaiil> mmalecki: it's working fine. probably started the process while root and then logged in as userX, etc.
12:57 < shwaiil> can't replicate the issue now so, I'd say everything is nice
13:06 < Usse> hi guys
13:06 < Usse> i have a problem with my node server configuration. i need to redirect all the url to index.html but i also need to serve the js and css file in the normal way. i have this code right now : http://pastebin.com/M3phV4jk 
13:06 < Usse> how can i serve the js and css properly? thanks
13:18 < gildean> Usse: move the app.get route below the app.configure
13:18 < gildean> also the app.configure-wrap around the other methods is unnecessary
13:19 < Usse> gildean: damn it was so easy.. thanks a lot :)
13:20 < gildean> np
13:22 < thestranger> hi
13:32 < jvanveen> hm useragent is not send on a websocket upgrade request?
13:43 < roxlu> hi, what's the recommended way to handle post data?
13:51 -!- mode/#Node.js [+o isaacbw] by ChanServ
14:00 < Sembiance> roxlu: could you elaborate? Are you looking for a module? or general best practice? or?
14:06 < exit2> alo friends
14:06 < rickibalboa> Is it possible to basically forward all events from one emitter to another, without attaching a listener to each event and adding a function call
14:12 < roxlu> Sembiance: hey, I would expect a request.data['somedatafield'], but I see you need to add listeners to the data and end events
14:15 < tralamazza> rickibalboa: akaik nope, a handler per event type is always expected. You have to make this event trampoline yourself
14:15 < rickibalboa> tralamazza, ok thank you. I guess i'll start working on that then
14:16 < tralamazza> rickibalboa: you can probably use .listeners to list all current events and also hook to newListener events
14:17 < oberhamsi> assert.throws: does it re-throw exception if expected!=actual or does it throw AssertionError in that case?
14:17 < rickibalboa> Hmm okay thanks.
14:18 <@isaacbw> are there any public logs of the channel?
14:23 < Sembiance> that meteor that just hit russia is INSANE
14:25 < MiracleBlue> Sembiance: Was it just the one?
14:31 < Morkel> What is an easy and fast way to send commands from one node to an other nodejs instance ?
14:31 < Morkel> over the net
14:31 <@Nexxy> dnode
14:31 < hannes__> zerorpc
14:31 < nkohari> zmq
14:31 < nkohari> :)
14:31 <@Nexxy> wrong and wrong
14:31 < Morkel> Nexxy: thx dnode looks perfekt
14:31 <@Nexxy> :)
14:32 < MiracleBlue> Heya Nexxy :)
14:32 <@Nexxy> hi MiracleBlue ^-^
14:33 < MiracleBlue> What's up in your world?  :D
14:35 <@Nexxy> MiracleBlue, just working on a presentation
14:35 <@Nexxy> you?
14:35 < MiracleBlue> Ahh neat, what about?
14:36 <@Nexxy> 'node.js & realtime hardware'
14:36 < Sembiance> MiracleBlue: aye, just the one
14:36 < MiracleBlue> Nexxy: Sounds great :)
14:37 < MiracleBlue> I'm just sitting here trying to think straight haha
14:37 < MiracleBlue> So I can code productively
14:51 < Kakera> Nexxy, maybe show it later?
14:51 < Kakera> sounds interesting
14:54 <@Nexxy> Kakera, it will be shown here http://www.scandevconf.se/
14:56 < Kakera> will there be a live feed?
14:56 < roxlu> When I want to remove a entry from a mongodb collection, do I use findAndModify() with the option: remove:true? Or is there a plain "remove()/delete()" somewhere?
14:59 <@Nexxy> Kakera, I'm not sure
15:05 <@isaacbw> argh I just burned my hand with coffee
15:05 <@Nexxy> in retrospect that may not have been the smartest idea
15:05 < SomeoneWeird> poor u
15:06 <@isaacbw> I could have mitigated most of the damage, but I decided to save the coffee instead
15:06 <@Nexxy> FWIW I burned my thumb with a lighter last night
15:06 < pachet> i burned my girlfriend
15:06 < pachet> with my caustic wit
15:07 <@Nexxy> o snap
15:07 < pachet> i am the insult master
15:07 <@Nexxy> triumph?
15:07 <@Nexxy> the insult comic dog?
15:08 < pachet> not quite so high brow
15:08 < pachet> http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDEQtwIwAA&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DH6xCtNZMAnU&ei=hk4eUYD6GbKz0QGXp4HwCQ&usg=AFQjCNHDd9t3Svp_RazR72kIAb-Qp5KA-g&bvm=bv.42553238,d.dmQ
15:08 < pachet> erg.
15:08 < pachet> s/that/www.youtube.com/watch?v=H6xCtNZMAnU
15:08 < cloudbender> I there a way to set a reference to an objects property rather than the properties value ?
15:08 < cloudbender> I there a way to set a reference to an objects property rather than the properties value ?
15:08 < cloudbender> ... property's value I mean
15:08 < pachet> cloudbender: is the property a primitive
15:09 < cloudbender> no it is an object
15:10 < cloudbender> I know I can use the object['propname'] method, but object.property would be much cleaner
15:11 < cloudbender> I need an external function to manitupulate the property contents and pass the reference along
15:12 < cloudbender> geez spelling me
15:12 < jrajav> cloudbender: I think you should be clearer about the problem you're trying to solve... why is that you want to avoid object['propname']? That seems best here. Is the property key gotten dynamically?
15:12 < TehShrike2> cloudbender: given var a = 'prop', object[a] and object.prop are equivalent
15:12 < jrajav> Also, whether you retrieve it with object['prop'] or object.prop, you will obtain precisely the same value
15:12 < cloudbender> I'll gist the problem
15:13 < jrajav> The only difference is that object.prop cannot reference a property key consisting of any arbitrary string
15:14 < cloudbender> I'm so close, so very close ...
15:15 < NoiseEee> by 'cleaner' you mean "i don't like the way obj[whatever] looks"
15:16 < amurdaca> 13 days to do DBMS exam T.T
15:18 < jrajav> amurdaca: Scrawl "NoSQL" all over it in big red letters
15:18 < jrajav> Trust me, it will be hilarious
15:19 < TehShrike2> cloudbender: however awkward it may look to you at first, bear in mind that everyone everywhere knows that obj[a] means "get the property of obj whose name is stored in the variable a" and obscuring that by trying to do something clever so you can do obj.whatever will most likely hurt readability
15:19 < _ior> i found a great job for a hotshot developer. it even pays! http://mlkshk.com/r/OEGM
15:20 < cloudbender> I get that TehShrike2, generally speaking.
15:20 <@isaacbw> look at all that moneyz
15:20 < jrajav> It doesn't even make sense to differentiate those two syntaxes
15:20 < jrajav> They are literally exactly the same semantics
15:20 < typarkr> hi.
15:21 < jrajav> The only limitation imposed on the . syntax is just a necessity for proper parsing
15:21 < jrajav> JS objects are just dictionaries/maps/what-have-you, . syntax is just sugar.
15:22 <@isaacbw> objects = maps + magic
15:22 < Kakera> magic that makes you shoot yourself in the leg if you assume it's just a map
15:22 <@isaacbw> :P
15:23 < Kakera> like __proto__
15:23 < jrajav> They're just maps - that doesn't mean they don't have a few extra properties you should be aware of and account for.
15:24 <@isaacbw> they aren't just maps though
15:24 < jrajav> Alright fine
15:24 < jrajav> Take away my trite simplification
15:24 <@isaacbw> :(
15:25 < jrajav> </3
15:25  * jrajav is left with nothing to his name
15:36 < _ior> aw, shame that node-mysql doesn't support ssl
15:38 <@isaacbw> what's the preferred format for uuids in node? a string with dashes?
15:39 < pachet> yap
15:40 < pachet> ideally whatever module you use will give you multiple formats
15:40 < pachet> https://github.com/broofa/node-uuid/
15:41 < context> isaacbw: UUID is a set standard. there are a couple different versions however
15:41 < context> isaacbw: http://en.wikipedia.org/wiki/Universally_unique_identifier
15:44 < jvanveen> hey
15:44 < jvanveen> is there an easy method to check if a certain date is today?
15:46 < DarkArgon> momentjs
15:46 < nkohari> jvanveen: use momentjs
15:46 < jvanveen> aha thans!
15:46 < jvanveen> *thanks*
15:50 < aklt> Hi all, I was wondering about socket.io and cluster used together and if there are people here who have experience using these
15:50 < aklt> My problem is that, using socket.io, I want to be able to guarantee that I always get to request the same node process
15:51 < DarkArgon> use redis for storage and u should be fine
15:51 < DarkArgon> https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO store
15:51 < aklt> But as far as I can see from the nodejs cluster documentation examples, the master will always select a random worker to communicate with
15:52 <@isaacbw> anyone know a module off the top of their head for parsing/transforming IP addresses?
15:52 < chapel> aklt: if you use redis with socket.io it won't matter which process you get
15:52 < aklt> DarkArgon: I have a little experience that tells me that the handshake that happens when setting up the socket.io connection can become broken, ie. if I am not communicating with the same process
15:53 < Kakera> isaacbw, what exactly do you want to do?
15:53 < aklt> chapel: Ok, not even when handshaking?
15:53 < Kakera> because it probably doesn't require a module
15:53 < chapel> aklt: using redis shares the connection pool between processes
15:53 <@isaacbw> Kakera, you're probably right
15:53 < DarkArgon> "If you want to scale to multiple process and / or multiple servers you can use our RedisStore..."
15:53 <@isaacbw> I was starting to feel lazy. I want to convert a buffer of bytes to a canonical ip address
15:54 <@isaacbw> I'll just do it myself :(
15:54 < Kakera> [].join.call(buffer, '.')
15:54 < Kakera> done
15:54 <@isaacbw> ipv4 and ipv6
15:54 < Kakera> hmm
15:54 < Kakera> let me look up how ipv6 is structured
15:55 <@isaacbw> :D
15:55 <@isaacbw> laziness prevails!
15:55 < aklt> DarkArgon, chapel: Have you experience using socket.io + cluster + redis in production, and not having problems with the initial websocket handshake?
15:56 < chapel> aklt: not generally, but I haven't had a high traffic site to test it, I have implemented it and it worked as expected
15:56 < Kakera> >eight groups of four hexadecimal digits
15:56 < Kakera> well that makes things harder
15:58 < aklt> chapel: Ok, but I do see a problem with this handshake, maybe I should experiment
15:58 < Kakera> I know I know
15:58 < chapel> aklt: look at the code they use to implement it
15:59 < aklt> DarkArgon: Ah, thanks for the link
15:59 < chapel> I have when I was first investigating it
15:59 < Kakera> buffer.toString('hex').match(/..../g).join(':')
15:59 <@isaacbw> :O
15:59 <@isaacbw> :D
15:59 <@isaacbw> <3
16:00 < aklt> chapel: You mean the socket.io examples?
16:00 <@isaacbw> I've decided that I hate myself, so I'm writing a CQL3 binary protocol driver
16:00 < chapel> aklt: no the socket.io code
16:01 < aklt> chapel: Ah, ok
16:01 < aklt> Gulp, looking at redis's github page I see they have lots of issues
16:02 < nkohari> the redis project is good about not releasing until it's stable
16:02 < nkohari> most of those issues are likely about the unstable branch
16:02 < pachet> ^
16:03 < aklt> Ah, that makes sense
16:06 < stefan41> anyone a nodejs / windows wizard? I've got a script that works great on linux / mac, trying to port it to windows. It runs a ruby script, but the subshell that child_process creates doesn't seem to get all of the %PATH% (windows) that it needs
16:13 < bradleymeck> stefan41: if you are using spawn and have options argument, set env: {PATH:process.env.PATH}
16:14  * mscdex shakes a fist at ruby
16:16 < stefan41> bradleymeck: will try. thank you.
16:17 < aklt> chapel, DarkArgon: What if the process I want to connect my browser to has to keep state such as open sockets.  Then I imagine that a redis store cannot help me.
16:17 < chapel> the redis store for all I know, matches state of sockets
16:18 < chapel> if you could force connection to one process then another, it should know about you from the first process on the second
16:18 < aklt> chapel: So it is possible to have open socket connections stored in redis?
16:19 < chapel> also, cluster in 0.8+ usually tries to keep open connections with the processes they are connected to, so if you are using websockets, you won't be hitting different processes
16:20 < aklt> chapel: aha, that is interesting news, I'll have to have a look at the code.  Would be great if that was guaranteed :-)
16:20 < stefan41> bradleymeck: that did the trick. thank you.
16:29 <@isaacbw> how do you escape angle braces in markdown
16:29 <@isaacbw> I don't want code formatting
16:30  * holzp thinks "I should learn more markdown"
16:32 < jrajav> isaacbw: Same way you escape them in HTML
16:32 < jrajav> isaacbw:  &lt;
16:32 <@isaacbw> :(
16:32 <@isaacbw> markdown is supposed to be prettier
16:32 < jrajav> Not for HTML
16:32 < holzp> really, no escape syntax?
16:32 < holzp> I thought markdown was supposed to be essentially compat with text
16:33  * holzp marks *that* down
16:33 < jrajav> "Markdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags. The idea is not to create a syntax that makes it easier to insert HTML tags."
16:33 < jrajav> "For any markup that is not covered by Markdownâ€™s syntax, you simply use HTML itself. Thereâ€™s no need to preface it or delimit it to indicate that youâ€™re switching from Markdown to HTML; you just use the tags."
16:33 < holzp> right, so to have to use html escaping seems odd
16:34 < jrajav> Well, it may or may not, but it's consistent with his philosophy for it at least
16:34 < teste_> hello
16:34 < jrajav> http://daringfireball.net/projects/markdown/syntax#autoescape < Just read the whole "inline HTML" section
16:37 < aklt> chapel: Hmm, I do not see in the cluster.js code that we are guaranteed to hit the same node process
16:38 <@isaacbw> well, this morning is going to look productive on github
16:39 <@isaacbw> I just sent a string of ten commits to github trying to get markdown to work
16:39 < chapel> aklt: aklt from what I understand, it isn't specific to cluster
16:39 <@isaacbw> :(
16:39 < chapel> aklt: just that cluster shares a socket between the processes and this is on the OS level
16:40 < chapel> aklt: that is why there is no special routine like round robin or whatever
16:40 < chapel> aklt: the OS itself handles it
16:41 < aklt> chapel: Yes, I think that is true... so I cannot guarantee that the same process will be hit each time
16:42 < chapel> aklt: if it is an open connection that isn't close, the OS layer should guarantee it connects to the same process, but again I don't know that for a fact, looking for more info
16:43 < aklt> chapel: Interesting!  Hmm, something to do with file descriptors, I'm looking too!
16:44 < brettlangdon> @isaacbw, I've had that problem before, until I realized you can edit markdown on github and see previews before you commit
16:44 <@isaacbw> :/
16:44 <@isaacbw> welp
16:44 < aklt> chapel: I guess it has to do with the kind of schedular the kernel is using
17:10 < aklt> chapel: I don't think accept() helps me with process affinity
17:11 < chapel> aklt: if you haven't built anything, and do not have a large site/load already, I wouldn't worry about it
17:17 < aklt> chapel: I am going to build something :-) So I would like to be sure of how I use a persistent socket connection in a sensible way
17:18 < chapel> aklt: I get that, but don't fret over the small details when most times aren't even a problem you will have ever
17:18 < chapel> I call it diving into the rabbit hole, you look at a potential problem, and next thing you are reinventing the wheel
17:19 < chapel> sometimes it is better to just pick a path, go forth, and conquer 
17:19 < groundwater> worry about optimizations when you have numbers
17:20 < chapel> groundwater: exactly
17:21 < aklt> chapel: Hehe, true, I can get stubborn at times
17:21 < MiracleBlue> aklt: I'm exactly the same :P
17:22 < groundwater> an hour spent worrying about an optimization will cost you as much as an extra AWS instance for a month
17:22 < MiracleBlue> Too much of an over-perfectionist
17:23 < aklt> MiracleBlue: Sometimes that is a very useful trait as a developer :-)
17:23 < aklt> Anyway, thanks for the help!  See you lalter!
17:24 < alchimis_> hi every one
17:25 < alchimis_> I have this error while installting my app on an Amazon EC2 ubuntu
17:25 < alchimis_> gyp ERR! stack Error: `make` failed with exit code: 2 
17:25 < groundwater> alchimis_: do you have the full error?
17:25 < groundwater> alchimis_: gist it or something
17:26 < alchimis_> https://gist.github.com/anonymous/74288ec569befe18e148
17:27 < groundwater> when you need to compile C++ extensions, i think there are extra packages to install on ubuntu
17:28 < alchimis_> gorundwater: this is the full error https://gist.github.com/anonymous/0aaba7220bc5a4732dd6
17:28 < alchimis_> i am very new in ubuntu, so can u plz tell me what should i install
17:28 < alchimis_> ?
17:28 < alchimis_> thanx
17:29 < groundwater> alchimis_: i think openssl needs to be installed
17:29 < groundwater> alchimis_: through apt-get
17:29 < alchimis_> so the command would be sudo apt-get openssl ?
17:29 < groundwater> alchimis_: not 100% sure, but i would try that
17:31 < naomi> I'm looking at (http://nodejs.org/api/crypto.html#crypto_crypto_getdiffiehellman_group_name) and I am curious about the group_name param. What is the difference between modp1, modp2, modpX etc
17:31 < cloudbender> Further to my earlier conundrum re: property references
17:31 < cloudbender> https://gist.github.com/cloudbender/4961875
17:32 < cloudbender> comments welcome but please no flying dishes or insults k ?
17:32 < cloudbender> it's not as fugly as it looks
17:32 < cloudbender> brb
17:40 < alchimis_> thanx groundwater: i had to install openssl, now it works
17:40 < groundwater> alchimis_: good stuff
17:42 < shwaiil> Q: I'm learning nodeJs and I've chosen LocomotiveJs. I'm trying to understand how to use node-mysql with locomotiveJs. Tried to find articles or tips through google without success and I'm not sure if the moongose tip in the locomotive docs / manual could help. Any suggestion ? thanks for looking  : )
17:43 < toad-br> how to implement validation like i'm trying: http://pastebin.com/4b91dVvc ??
17:47 < jrajav> toad-br: It's hard to tell without knowing what the code is that takes that 'validate' property and actually does something with it, but chances are that you need to actually call email(), so that it returns that inner function. Unless the calling code actually takes in a meta-function to call to get the real function...
17:47 < jrajav> Why do you have the outer function anyway? It does absolutely nothing
17:58 < cloudbender> OK did it this way but I still want the 'smarts' in the bucket
17:58 < cloudbender> https://gist.github.com/cloudbender/4961875
18:01 < MI61> joyent/node: isaacs created branch v0.8.20-release - http://git.io/xf7p0w
18:08 < jschall> eww, this bcrypt module is 3 times slower than the python library i was using before.
18:08 < jschall> on the same hash
18:10 < CoverSlide> jschall: which bcrypt module?
18:10 < jschall> CoverSlide: https://npmjs.org/package/bcrypt-nodejs
18:11 < CoverSlide> well it is completely native
18:11 < CoverSlide> that's probably a reason
18:11 < CoverSlide> have you tried the bcrypt package?
18:12 < CoverSlide> that  one is a linked mofule
18:12 < jschall> CoverSlide: not yet, i'm sure going to though
18:15 < jschall> CoverSlide: yep, much better
18:19 < othiym23> jschall: sorry I bugged out on you last night -- it was time to go home ;)
18:19 < othiym23> jschall: how's your login server looking?
18:19 < othiym23> I enjoy using mofules
18:19 < othiym23> they're like modules, but harder core
18:19 < jschall> othiym23: doing well, i have workers that register with a queue server and then the queue server proxies requests to them
18:23 < othiym23> jschall: how long is taking to generate hashes now?
18:23 < jschall> othiym23: 350ms
18:23 < othiym23> oof, I can see why you've got that on a worker queue
18:24 < jschall> othiym23: on 8 cores it should hash 100 passwords in about 3 seconds i think
18:24 < jschall> othiym23: well, they're supposed to take that long.
18:25 < jschall> othiym23: so they can't be broken by current or future hardware
18:25 < ckknight> yeah, it's smart for them to take a required amount of time, security-wise
18:26 < ckknight> and also a deterministic amount of time, so that a correct password vs. an incorrect vs. a partially-correct take the same amount of time
18:26 < jschall> combine with a salt and A. they have to be brute-forced individually and B. they take a trillion years to brute force
18:26 < othiym23> yeah, I know, but that's still a lot of conpute time sunk per login
18:26 < shwaiil> Q: checking some mvc frameworks for node. why do people use the underscore ? where's that convention coming from ?! MyController._model = require('app/model/MyModel') 
18:26 < shwaiil> Tks
18:27 < jschall> ckknight: which reminds me, i still need to make this thing take the same amount of time regardless of incorrect password vs incorrect login email
18:27 < othiym23> it makes me wonder how web scale services that use pbkdf2 or bcrypt layer their architecture to keep login from slaughtering overall performance of the system
18:27 < jschall> othiym23: probably like this
18:28 < jschall> othiym23: a queue server that can have an arbitrary number of clustered workers
18:28 < othiym23> shwaiil: it's just a convention marking a variable as private
18:28 < othiym23> jschall: how are you hosting the queue?
18:28 < jschall> othiym23: what do you mean?
18:29 < othiym23> jschall: are you using an in-memory array, or Redis, or...?
18:29 < jschall> othiym23: array
18:29 < jschall> othiym23: array of sockets
18:29 < jschall> othiym23: someone connects to make a request, their socket is paused and goes in the queue
18:29 < toad-br> jrajav, thx i gave a researched and found this: http://pastebin.com/LyqQBUHE
18:30 < jschall> othiym23: when there's stuff in the queue, it loops through the workers and finds one that has room for it.
18:31 < jschall> othiym23: then it just passes all data both ways
18:31 < othiym23> and then the workers are an array of child processes?
18:31 < jschall> othiym23: nope. they're sockets. they connect and register
18:32 < othiym23> oic
18:32 < jschall> othiym23: so then i can just type for i in {1..8};do node auth.js& done and 8 of them connect
18:33 < jschall> othiym23: but i could start up my other computer and connect another 8
18:33 < othiym23> jschall: you can probably do all that from within the main process using child_process, but your way works too
18:33 < jschall> othiym23: but can child processes be on another physical machine?
18:33 < othiym23> jschall: at some point you might want to take a look at http://github.com/substack/fleet
18:33 < othiym23> jschall: no, that's why I suggested you take a look at fleet ;)
18:35 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:35 < jschall> othiym23: anyway, i'm not 100% certain i'm going to use the queue proxy, i wish cluster would work right instead of assigning 1 job to each worker and then assigning the remaining 90 to one worker
18:37 < othiym23> yeah, that sucks and is dumb
18:37 < diamonds> unimportant question: what does this mean? a sad day for absurdity. views started getting bogged down by hoarders' absurd dep list. had to impose a max dep count. :â€™(
18:37 < diamonds> https://twitter.com/npmjs/status/302475602634620928
18:37 < diamonds> what was happening?
18:37 < jschall> othiym23: this thing isn't going to be very robust, it doesn't check that workers are doing their jobs
18:38 < jschall> othiym23: it relies on an open TCP connection to each worker to determine if it's still there
18:38 < cloudbender> coffee time ...
18:41 < EyePulp> yo ho ho
18:42 < jschall> othiym23: i have a question. at the moment i'm accumulating data into a buffer until the connection is ended, then on end i'm running JSON.parse on the data. what if i wanted to send multiple packets of JSON data over the course of one connection?
18:42 < jschall> othiym23: i would need some way to delimit it...
18:43 < Sembiance> node.js should have a bot that announces new NPM packages (totally new, not updates)
18:43 < Sembiance> that would be cool :)
18:44 < Sembiance> I love the 'step' module for handling my async callbacks, but after YEARS of using it, I decided it needed a few new features/changes. So in case anyone cares, here is yet another async control-flow module: https://github.com/Sembiance/node-tiptoe
18:47 < groundwater> hey everyone, i'm trying to write about dependency injection in node. if anyone wants to read the draft, i would love feedback https://gist.github.com/jacobgroundwater/ae7d6a4af43b71fed82a
18:48 < groundwater> you can leave comments on the gist, or here
18:50 <@isaacbw> I think your main premise is untrue
18:50 < groundwater> what's the main premise?
18:50 <@isaacbw> "A 100% dependency-injected application will look like a star"
18:50 <@isaacbw> "but modules do not point to one and other"
18:51 < LouisT> good day
18:51 < groundwater> isaacbw: probably poor wording, what do you mean?
18:51 < groundwater> isaacbw: because modules do not use 'require' on each other
18:51 <@isaacbw> so what you're trying to say is non-cyclical
18:52 < groundwater> isaacbw: asyclic is good, but a star is best
18:52 <@isaacbw> but it isn't true
18:52 < groundwater> isaacbw: hmmâ€¦ how?
18:52 < groundwater> isaacbw: not saying that 'controller' doesn't use 'model'
18:53 < groundwater> it just never calls require('./model')
18:53 < groundwater> model is passed into controller as a dependency
18:54 < MI61> joyent/node: isaacs v0.8.20-release * e10c755 : 2013.02.15, Version 0.8.20 (Stable)  * npm: Upgrade to v1.2.11  * http: D (+1 more commits) - http://git.io/70JDYA
18:54 < groundwater> isaacbw: maybe i should be more clear what the arrows mean
18:54 <@isaacbw> no, you should rethink what you're saying
18:55 < geNAZt> does someone know a solution for vms / execution chains that emit events / callback when the code in it has finished ?
18:55 < groundwater> isaacbw: can you give an example of what you mean?
18:56 < groundwater> isaacbw: if auth points to module, for example, then it's no longer an injected dependency. it's an explicit dependency.
18:56 <@isaacbw> I would start by not using vague and non-technical terms like 'star'
18:56 < groundwater> isaacbw: start topology is neither non-technical or vague
18:57 < groundwater> http://en.wikipedia.org/wiki/Network_topology#Star
18:57 <@isaacbw> in that case, it's still false
18:58 < groundwater> isaacbw: how so?
18:58 <@isaacbw> just think about it
18:58 <@isaacbw> I can't help right now
18:59 < groundwater> isaacbw: it must be the language, because I use this all the time, that's exactly how DI works
18:59 <@isaacbw> maybe
18:59 < groundwater> isaacbw: thanks for the feedback anyhow
19:00 < groundwater> isaacbw: if you get time later, i'm happy to keep discussing it
19:00 < geNAZt> does someone know a solution for vms / execution chains that emit events / callback when the code in it has finished ?
19:01 < mrvisser> geNAZt: can you be a little more specific? I know how to invoke a callback at the end of an execution chain... but my guess is that is not what you're asking
19:01 < othiym23> jschall: there are a number of JSON stream implementations out there, one of them would probably work for you
19:02 < geNAZt> i have a context (contextify) or whatever you want and a peace of normal js code that should run in this context
19:02 < geNAZt> the goal is to get the end of the execution for this piece of code in that context
19:03 < othiym23> groundwater: looks good -- you might want to add a section that looks at "plugin managers" like c9/architect or flatiron/broadway
19:03 < mrvisser> can you bind things to the context in the vm?
19:03 < geNAZt> yes
19:03 < othiym23> they give you a nice framework for dependency injection that relies on conventions sorta like the ones you describe in your draft
19:03 < geNAZt> but i dont want to execute callbacks or something that a developer must think of
19:04 < mrvisser> geNAZt: so you want it to be completely synchronous
19:04 < geNAZt> no
19:04 < groundwater> othiym23: i want to make sure i SELL the idea first, so I want to keep it focused on people who may not have heard of DI yet.
19:04 < geNAZt> i want it to tell me if it has finished computing
19:04 < mrvisser> geNAZt: without using a callback or an event?
19:04 < groundwater> othiym23: haven't used those containers yet, perhaps a second article suggesting implementation strategies
19:04 < geNAZt> not if the developer must send/call it
19:04 < mrvisser> might need a gist with a code sample geNAZt
19:05 < geNAZt> one moment
19:05 < groundwater> othiym23: do you use any of those?
19:06 < othiym23> groundwater: yeah, I use architect in a bunch of places in the New Relic agent tests
19:07 < othiym23> if I ever get to write app code again, I'm definitely going to use architect to stitch together all my DALs and service-layer APIs
19:07 < cloudbender> OK this is to where I was heading ... https://gist.github.com/cloudbender/4961875
19:07 < geNAZt> mrvisser: https://gist.github.com/geNAZt/4962552
19:07 < othiym23> it's like using Spring with about 1/20th of the overhead
19:08 < jschall> this looks pretty awesome https://npmjs.org/package/json-over-tcp
19:08 < geNAZt> jschall: why json ?
19:08 < jschall> geNAZt: its easy...
19:08 < brettlangdon> msgpack ftw
19:08 < othiym23> groundwater: the only problem I have with the current draft is that the .inject convention is kinda idiosyncratic (and also I personally really prefer keeping everything down to one module.exports assignment in my modules)
19:10 < groundwater> othiym23: i actually don't use that exact convention myself, but i wanted something easy to understand. what do you use?
19:10 < CoverSlide> isaacs: wtf is this lorempixel thing at the bottom of your blog?
19:10 < othiym23> if you want to expose initializer logic for a module, module.exports = function initialize(opts) {};
19:10 <@isaacs> CoverSlide: http://lorempixel.com/
19:10 <@isaacs> CoverSlide: it's awesome, that's what :)
19:11 < othiym23> require('module')({option1: 'value',...});
19:11 < mrvisser> geNAZt: So you want that asynchronous code to notify the context that it has completed without issueing an event or callback?
19:11 < geNAZt> correct
19:12 < geNAZt> vor everything else i could pass in a callback which the developer must call
19:12 < groundwater> othiym23: thanks, i'll ponder over which method is clearer to a beginner
19:12 < othiym23> groundwater: to paraphrase Rich Hickey, you should spend a little time thinking about what's simpler, not easier ;)
19:12 < mrvisser> geNAZt: yes that would be necessary
19:12 < mrvisser> and probably the easiest
19:12 < geNAZt> and i search a way around that
19:13 < geNAZt> the problem with a callback is that i _must_ call it to not hang the request
19:13 < groundwater> othiym23: the goal of the blog is the communicate the concept, not the implementation. easier to understand = simpler in this context
19:13 < geNAZt> and so i also have to call it if i have sync code in the vm
19:13 < cloudbender> did someone say blog ?
19:13 < othiym23> groundwater: I personally disagree, but I see your logic
19:14 < mrvisser> geNAZt: yup, thats jsvsscript
19:14 < groundwater> othiym23: time will tell!
19:14 < groundwater> othiym23: thanks
19:14 < jschall> msgpack looks very cool.
19:14 < othiym23> my goal would be to get the context across in a way that gets people up to speed *and* gets them writing idiomatic Node
19:14 < geNAZt> well thats shit :D
19:14 < othiym23> sure np
19:18 < mrvisser> gotta take the good with the bad :P
19:19 < cloudbender> lorempixel thumbs up
19:22 < sent_hil> Is there a way to force disconnect a websocket connection?
19:22 < CoverSlide> msgpack is awesome, especially if you want to send binary data
19:23 < othiym23> msgpack is awesome, especially if you want to pack messages
19:24 < groundwater> othiym23: lol
19:24 < CoverSlide> well yeah
19:24 < CoverSlide> although i hear JSON is better if your message is very string-heavy
19:26 < nkohari> it's tough to beat the performance of v8's json routines
19:26 < MI61> joyent/node: isaacs created tag v0.8.20 - http://git.io/wQpNYw
19:27 < nkohari> json also gzips very well
19:27 < nkohari> i would probably use something like thrift over msgpack
19:27 < nkohari> or protobufs
19:27 < MI61> joyent/node: isaacs v0.8 * 3f38069 : blog: Release v0.8.20 (+4 more commits) - http://git.io/s49KWw
19:27 < groundwater> nkohari: i think thrift tries to do too many things at once
19:27 < nkohari> yeah, i agree
19:28 < nkohari> you can just use the serialization part of thrift
19:28 < groundwater> nkohari: true
19:28 < nkohari> but it would be better if they broke the project up i think
19:29 < CoverSlide> are there pure-js libraries for either?
19:30 < groundwater> CoverSlide: not for protobuf unfortunately :(
19:30 < CoverSlide> right
19:31 < CoverSlide> because i want something that works in the browser too
19:31 < nkohari> json is your best bet
19:31 < nkohari> almost definitely
19:31 < groundwater> agreed
19:31 < nkohari> unless you're sending a huge amount of data you won't see a meaningful difference
19:31 < groundwater> unless there are numbers to show otherwise
19:31 < context> protobuf from the browser?
19:32 < tjmehta_> When node warns the following:: (node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
19:32 < tjmehta_> does it prevent additional listeners from being attached?
19:32 < groundwater> tjmehta_: no
19:32 < CoverSlide> json is nice, but doesn't do binary data well
19:32 < groundwater> tjmehta_: but you may want to re-evaluate your strategy
19:33 < CoverSlide> and i use JSON 95% of the time
19:33 < tjmehta_> groundwater - thanks was just wondering, definitely looking into the problem :)
19:34 < cloudbender> took a look at walden's idiomatic code gist
19:34 < cloudbender> seems comma-first coding is a sore subject
19:35 < CoverSlide> comma-first ftw
19:35 < cloudbender> lol
19:35 < CoverSlide> i use it wherever i can
19:35 < othiym23> all stylistic differences in writing JS are sore points
19:36 < cloudbender> also, I like setting the return value to a default at the top of a function.
19:36 < CoverSlide> http://enterprise-js.com/9
19:36 < othiym23> I just write code to be consistent with itself and make sure my PRs follow whatever halfassed, morally degenerate style the relevant module uses
19:36 < CoverSlide> http://enterprise-js.com/4
19:36 < cloudbender> copy half-assed and moally inept.
19:36 < cloudbender> morally even
19:37 < cloudbender> I understand the 'style' issue, but I'm not sure what is meant by 'idiomatic.
19:38 < cloudbender> And yes, I suppose I compress my whitespace a bit too much
19:38 < nkohari> an idiom is something that isn't defined by the language but is "customary"
19:38 < nkohari> like the callback format of (err, result)
19:38 < nkohari> being passed as the last argument to a function
19:38 < nkohari> or how ruby uses underscore_naming_like_this
19:39 < nkohari> whereas java uses camelCasing
19:39 < cloudbender> I'm hoping no-one will slap my taters if I use 3 space indents instead of 2
19:39 < CoverSlide> .NET uses UpperCamelCase
19:39 < cloudbender> I use some camelCase
19:39 < nkohari> PascalCase :)
19:39 < isaacbw_> is { } object construction performed in order? e.g. if I have {a: a(), b: b(), c: c() } can I be guranteed the execution order will be a()->b()->c()?
19:39 < CoverSlide> i-like-lisp-case
19:39 < CoverSlide> when-i-can-use-it
19:39 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:39 < othiym23> isaacbw: in V8 yeah, in other environments not so much
19:39 < CoverSlide> which-is-not-often
19:40 <@isaacbw> othiym23, alright, thanks
19:40 <@isaacbw> hmm
19:40 < othiym23> the spec doesn't guarantee initialization order within object literal expressions, I'm pretty sure
19:40 < cloudbender> I never use underscores, an invention of beelzebub.
19:40 <@isaacbw> but in v8 it definitely does?
19:40 < othiym23> I monkeypatch the living shit out of your -- yes YOUR -- code as part of how my code works, so I use underscores like it was my job
19:41 < cloudbender> well, if ya gotta ...
19:42 < CoverSlide> Array.prototype.for_each = Array.prototype.forEach
19:42 < cloudbender> as an indicator ? ok
19:43 < cloudbender> I guess I'm having flashbacks of my VB days
19:43 < othiym23> isaacbw: yeah, although if you're paranoid about that, it's not going to kill you to do var thing = {}; thing.a = a(); etc
19:43 <@isaacbw> I'll leave it, but if someone bugs me about it breaking, I'll blame it on you
19:43 < othiym23> as is fitting and just
19:44 < CoverSlide> >> var i = 1;function f(){return ++i};{a:f(),b:f(),c:f(),[f(),f(),f()]}
19:44 < purr> CoverSlide: SyntaxError: Unexpected token :
19:44 < CoverSlide> >> var i = 1;function f(){return ++i};{a:f(),b:f(),c:f(),d:[f(),f(),f()]}
19:44 < purr> CoverSlide: SyntaxError: Unexpected token :
19:44 < CoverSlide> wtf
19:45 < cloudbender> hey what is f() ?
19:45 < cloudbender> oh nevermind
19:46 < othiym23> >> var i = 1; function f() { return i++; }; var hamburgefonstiv = {a:f(),b:f(),c:f(),d:[f(),f(),f()]}; return hamburgefonstiv
19:46 < purr> othiym23: SyntaxError: Illegal return statement
19:46 < othiym23> oh up yours purr
19:46 < othiym23> >> var i = 1; function f() { return i++; }; var hamburgefonstiv = {a:f(),b:f(),c:f(),d:[f(),f(),f()]}; hamburgefonstiv
19:46 < CoverSlide> >> var i = 1;function f(){return ++i};({a:f(),b:f(),c:f(),d:[f(),f(),f()]})
19:46 < purr> othiym23: (object) {a: 1, b: 2, c: 3, d: [4, 5, 6]}
19:46 < purr> CoverSlide: (object) {a: 2, b: 3, c: 4, d: [5, 6, 7]}
19:46 < CoverSlide> fucking block syntax
19:46 < cloudbender> potty mouth
19:46 < CoverSlide> intercoursing block syntax
19:47 < cloudbender> lol lol
19:48 < othiym23> you mean "loving block syntax"
19:48 < CoverSlide> yes
19:48 < cloudbender> Shatner is preparing for a new role as 'Kirk'.
19:48 < othiym23> as is the somethingawful way
19:48 < CoverSlide> i'm all about the <3
19:55 < EyePulp> so if our company was looking for a node dev for some contract work - is there a good place to be looking (beyond irc?)  I've got an app that's been running in beta for months, and stable, but I've been pulled off for higher priority work for the moment, and want to see this thing get finished.
19:57 < CoverSlide> i don't know anyone who's gotten hired off of irc, at least ones that have gotten good jobs
19:57 < othiym23> EyePulp: there's the nodejs.org jobs page and / or paying the NodeUp dudes to mention your opportunity
19:57 < CoverSlide> or gun.io or the nodefirm
19:58 <@isaacbw> IRC jobs don't tend to be very good, so people aren't likely to respond
19:59 < EyePulp> CoverSlide: yeah, this is short time stuff, probably less than 20 hours total.  I can't imagine it's of interest unless someone wants the money and has the time.  
19:59 < EyePulp> Two bugs, actually.
19:59 <@isaacbw> what kind of project is it?
19:59 < EyePulp> =)
20:00 < CoverSlide> are you looking for remoties or do you need someone local? local you might want to try craigslist
20:00 < EyePulp> It's a multi-tenant chat system - essentially a customer support tool that allows for a lot of different companies to use it.  
20:00 < CoverSlide> unless you're in the bay area
20:00 < EyePulp> CoverSlide: Remote is fine
20:01 < willwhite> is there any reading I can do to get caught up on the idea of long stack traces? has this been implemented?
20:02 < CoverSlide> i think the long stack traces solutions so far require massive performance hits
20:02 < CoverSlide> maybe that's changed recently, but that's how i understood it
20:03 < willwhite> CoverSlide: ok thanks. this is the latest discussion I can find about it and it's from 2010. https://groups.google.com/forum/?fromgroups#!msg/nodejs/5R6kPncBGwE/woBz84kwMcAJ
20:04 < CoverSlide> willwhite: check out longjohn
20:06 < Kakera> how would you convert an ipv6 string into a buffer?
20:06 < Kakera> with ipv4 it's simple: new Buffer(ip.split('.'))
20:06 <@isaacbw> :O
20:06 < Gambit--> I know that node.js isn't multithreaded, but does it expose the current threadid regardless?
20:07 <@isaacbw> why would you want that
20:07 < Gambit--> magic.
20:07 < Kakera> preferably as a single expression
20:07 < willwhite> CoverSlide: thanks, will do.
20:08 < CoverSlide> not to the node side afaik
20:08 < groundwater> EyePulp: github jobs works wonders
20:08 < EyePulp> groundwater: thanks for the pointer
20:09 < groundwater> EyePulp: reading further at your request, i'm not sure how well it works for short gigs
20:09 < CoverSlide> probably why you need gun.io or nodefirm
20:09 < EyePulp> yeah - I'm looking through gun right now
20:10 < groundwater> that beard...
20:10 < d4rklit3> hey
20:10 < d4rklit3> if i have an object in my app, what is the best way to write it to a file as json
20:10 < d4rklit3> do i use response.write() ?
20:11 <@isaacbw> I'm writing a driver for the cql3 binary protocol and so far I've just been shooting in the dark with everything (no unit tests) and so far I haven't had any issues with anything I've written
20:11 <@isaacbw> this is bad reinforcement
20:11 < d4rklit3> i jsut want to write it the filesystem as a static
20:11 < CoverSlide> d4rklit3: you'd have to use JSONl.stringify it first
20:11 < d4rklit3> ok
20:11 < CoverSlide> *JSON.stringify
20:12 <@isaacbw> can anyone recommend an api doc generator? I don't need it to look at code, I just don't want to write markdown for everything
20:13 < groundwater> don't like docco?
20:14 <@isaacbw> does it only work with coffeescript?
20:14 < nlf> i wrote a thing that's like docco
20:14 < nlf> ape
20:14 < groundwater> isaacbw: i've used it with javascript
20:14 < nlf> just put markdown in your comments and it handles its bidness
20:15 < nlf> works in 18 languages i think we're up to
20:15 <@isaacbw> does it play nicely with comment blocks where each line begins with a *?
20:15 < nlf> mine does, sure
20:15 < groundwater> nlf: link?
20:15 <@isaacbw> cool
20:15 <@isaacbw> I can't find it either
20:15 < nlf> groundwater: https://github.com/nathan-lafreniere/ape
20:16 <@isaacbw> woo, thanks
20:16 < groundwater> gotta boost your SEO
20:16 < groundwater> nlf: any example output?
20:16 < nlf> yes, in the lib directory
20:16 < nlf> the ape.html file is an example of html output, the ape.md is the markdown output
20:17 <@isaacbw> is anyone here a cassandra user?
20:17 < groundwater> nlf: you may wanna use github pages to host the example output
20:17 < nlf> yeah i really should
20:18 < groundwater> nlf: help the lazy like me =]
20:18 < nlf> it outputs comments side by side with code in html mode, much like docco
20:20 < CoverSlide> nobody uses cassandra
20:21 <@isaacbw> hah
20:31 < Kakera> oh, it's actually pretty simple too
20:31 < Kakera> new Buffer(ipStr.replace(/:/g,''), 'hex')
20:37 < asiekierka> so i'm trying to install Scotch
20:37 < asiekierka> and async_testing lacks shasum :<
20:48 < willwh> well there's your problem
20:48 < willwh> you're supposed to drink it
20:58 < eighty4> http://everyauth.com/ yes/no?
21:00 < othiym23> eighty4: no, use Passport instead
21:00 < othiym23> nobody likes everyauth anymore
21:00 < eighty4> othiym23: any special reason?
21:00 < othiym23> it is friendless and lonely
21:00 < jaredhanson> i vote for passport too :)
21:00 < asiekierka> better yet, write your own, maybe you'll be the new hip library of the month
21:00 < othiym23> passport has a simpler, plugin-based architecture with lots of support for different auth strategies
21:00 < asiekierka> and you'll learn a lot
21:00 < othiym23> and isn't made out of gargoyles and hairballs like EveryAuth
21:00 < eighty4> last update on everyauth is 4 months ago, passport 4 days ago :P
21:01 -!- mode/#Node.js [+o isaacbw] by ChanServ
21:01 < eighty4> asiekierka: I'm learning alot in any case :)
21:01 < othiym23> yeah, there's enough to do when integrating auth into a Node app for the first time
21:01 < eighty4> and I doubt any code of mine in node would be the next new thing atm
21:02 < othiym23> I mean, you could write your own OAuth 2 client, but it's easy to get things wrong
21:02 < eighty4> atm I'm playing around with node.js some fs and streams and net, express, socket.io, jade, dust and so on...
21:03 < eighty4> ok, passport it is
21:04 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:04 < eighty4> I really should learn how versions work in package.json as well :| I'm just doing * atm :P
21:05 <@isaacbw> you can pick a specific version so your module doesn't break
21:05 < eighty4> and I'm assuming I'll need mongo or similar for passport :D
21:06 < eighty4> isaacbw: yeah, I realize that. But atm I just go with * I'll look it over later
21:07 < eighty4> http://passportjs.org/ being down isn't helping
21:07 < eighty4> or I'll just skip mongoâ€¦
21:08 < jaredhanson> eighty4: shouldn't be anything to permanent, looks like the host is doing DNS stuff
21:10 < LouisT> eighty4: passportjs.org works fine for me
21:20 < eighty4> thanks othiym23 and asiekierka. The hardest part to get passport working was to remember my twitter password :D
21:24 <@isaacbw> why are there no Buffer#readInt64* functions
21:25 <@isaacbw> does javascript not play well with large ints?
21:25 < othiym23> isaacbw: in a word, no
21:26 < othiym23> all thanks to our good friend IEEE754 and the fact that Brendan Eich, pbuh, decided that JS only needed one numeric type
21:26 <@isaacbw> welp
21:27 <@isaacbw> I thought maybe internally it would do something clever
21:27 < othiym23> the only way to do it is to keep the numbers outside the JS domain or use another representation, like a string
21:28 < othiym23> which is why all the bigdecimally things have native components
21:28 < scott_gonzalez> isaacs: About how long does it take you to do a release?
21:33 < CoverSlide> there is a node-gmp
21:33 < CoverSlide> is there some binary format that uses 64-bit ints?
21:34 < CoverSlide> >> Math.pow(2,53)
21:34 < purr> CoverSlide: (number) 9007199254740992
21:34 < othiym23> >> Math.pow(2,54)
21:34 < purr> othiym23: (number) 18014398509481984
21:34 < othiym23> >> Math.pow(2,63)
21:34 < purr> othiym23: (number) 9223372036854776000
21:35 < othiym23> somewhere in there precision eats it ;)
21:35 <@isaacbw> CoverSlide, yers
21:35 <@isaacbw> and decimal floating points
21:35 <@isaacbw> er
21:35 <@isaacbw> no
21:35 <@isaacbw> variable precision decimals
21:35 < CoverSlide> http://cdn.memegenerator.net/instances/400x/34920592.jpg
21:37 < CoverSlide> >> var s = Math.pow(2,53), t = s + 1;[s,t,s == t]
21:37 < purr> CoverSlide: (object) [9007199254740992, 9007199254740992, true]
21:47 < awkorama> hello everyone. Does anyone know, where  I can find information on support cycle of node.js ?
22:02 < CoverSlide> awkorama: http://nodejs.org/api/all.html#all_stability_index
22:03 < awkorama> thank you
22:03 < CoverSlide> that's api stability
22:03 < CoverSlide> closest thing i can think of
22:07 -!- mode/#Node.js [+o isaacbw] by ChanServ
22:07 <@isaacbw> nlf, does ape understand this.* methods in constructors?
22:08 < nlf> should work fine
22:20 < eighty4> There's 4 things with a stability of 5 in node.js :D
22:21 < systemfault> I wonder if we'll ever see a 1.0 version :D
22:22 < eighty4> There's 9 unstable things in node. I.e. node is more unstable than stable?
22:23 < CoverSlide> unstable means possible to change
22:23 < CoverSlide> not like sid unstable
22:23 < samholmes> remysharp: Does jsbin support jade now?
22:23 < systemfault> Debian-speak in #Node.js :P
22:24 < eighty4> systemfault: really not ok :)
22:24 < CoverSlide> the component dudes should put everything on a cdn
22:24 < CoverSlide> er wait, is jade on component? it should be
22:26 < othiym23> systemfault: 1.0 will be out when Bert, Ben and the rest of the libuv hackers are satisfied with its stability
22:26 < othiym23> libuv is a lot newer than the JS / V8 sides of Node
22:27 < othiym23> isaacs's last guess was that 0.12 stands a good chance of being 1.0
22:27 < othiym23> so, another year maybe?
22:27 < systemfault> othiym23: Good :)
22:27 < systemfault> As long as it's not like enlightenment 17 :P
22:28 < SandorKrashna> how do I send my socket connecton to app.get?
22:28 < SandorKrashna> i want to send req.params.id back to the client
22:28 < othiym23> the goal is for each release to be faster than the one preceding it, and for stability indexes to only increase over time
22:29 < othiym23> SandorKrashna: assuming you're using Express, you should have a request and a response within your route handlers
22:29 < othiym23> so copy the ID from the req to the res
22:29 < othiym23> being on the mailing list leaves me with strange fantasies
22:30 < othiym23> like, get a big colisseum
22:30 < SandorKrashna> i need to do a socket.emit('foo', {req.params.id}); inside app.get but socket.io is not available there
22:30 < othiym23> put all the peopel with axes to grind about their pet control flow libraries in there
22:30 < othiym23> and then LET LIONS LOOSE ON EM ALL
22:30 < groundwater> othiym23: two libraries enter, one comes out
22:30 < othiym23> more like 43 libraries enter NONE LEAVE
22:31 < othiym23> and then we all just write callbacks forever and ever amen
22:33 < groundwater> othiym23: http://xkcd.com/927/
22:33 < othiym23> yes
22:33 < othiym23> I don't mind the libraries, though
22:34 < othiym23> it's just the years-long, patient, methodical explanations of how everyone who doesn't use <fibers|threads-a-go-go|step|Q|streamline> is a panty-sniffing cretin that gets to me
22:34 < groundwater> i read a good quote about libraries vs. frameworks. You call libraries, a framework calls you. I think too many people start out making frameworks when they should start with libraries.
22:35 < othiym23> I agree, says the dude with the 30kloc monolithic module that does like 30 different things
22:36 <@isaacbw> people are more likely to use a library you made than a framework anyway
22:36 <@isaacbw> and that makes it more fun
22:38 < othiym23> yeah
22:38 < groundwater> i would call express a framework, and it's about the only one i use
22:38 < othiym23> I got into a long and unedifying argument with Trek Glowacki on Twitter about Ember a few weeks back
22:39 <@isaacbw> I worship Angular
22:39 <@isaacbw> Ember is the devil
22:39 < othiym23> and that was what I was trying to express -- as much as you can break Ember down into parts, it's designed as a framework and it just feels so totalitarian and monolithic
22:39 < systemfault> What about ember?
22:39 <@isaacbw> Ember is very very opinionated
22:39 < groundwater> isaacbw: I've been watching angular screen casts, it seems pretty great
22:39 < systemfault> isaacbw: I totally agree.
22:40 < systemfault> Angular seems like a pile of attributes on markup.. I don't like it.
22:40 < othiym23> you know, I really used to like going to sushi places and ordering omakase, and thanks to 37signals and Yehuda Katz, I will never ever be able to do it again without feeling at least slightly like a tool
22:40 < groundwater> anyone use backbone?
22:40 <@isaacbw> then you haven't looked very carefully systemfault 
22:40 < systemfault> groundwater: I used it for a few projects.
22:40 < groundwater> systemfault: thoughts?
22:40 < othiym23> groundwater: I've used backbone for a couple small things, which I don't think was the right use case
22:40 < systemfault> groundwater: backbone isn't in the same category as ember and angular.
22:40 < othiym23> mostly because it felt like too much for what I was trying to do
22:41 < othiym23> Knockout feels better for littler things
22:41 < othiym23> just want some data binding, that's all
22:41 < systemfault> groundwater: I think that backbone is nice for smaller projects with only a few interactions.
22:42 < groundwater> i've heard good things about knockout, but the most praise i've heard is for angular
22:42 < groundwater> i'm also one of those people who likes google projects
22:42 < othiym23> systemfault: I think it's good as a smaller piece of largeish projects where you want finer control over your architecture
22:42 <@isaacbw> it's difficult to grasp angular, but once you do it becomes a tremendously powerful tool
22:42 <@isaacbw> and it's more than a 'pile of attributes' ;)
22:42 < SandorKrashna> hi guys, can someone take a look at my code here http://pastebin.com/enq4sGrF and help me with passing req.params.id to my connected socket
22:42 < othiym23> yeah, I'm inclined to give Angular another shot
22:42 < SandorKrashna> line 21
22:42 <@isaacbw> it *does* use html, so if you're allergic to markup maybe it isn't for you
22:42 < othiym23> the last time I looked at it, it was definitely overkill for the kinds of things I was trying to do
22:42 <@isaacbw> but that's one of the reasons it appeals to me
22:42 < systemfault> Angular is google, right?
22:43 <@isaacbw> yea
22:43 < systemfault> Hmm.. I thought they didn't like JS :P
22:43 <@isaacbw> google doesn't like js?
22:43 < systemfault> They were all for GWT and Dart.
22:43 <@isaacbw> that's a strange thing to say
22:43 < othiym23> Google contains multitudes
22:43 < othiym23> cf. ref. V8
22:43 < systemfault> isaacbw: They spent a shitload of money on v8.. true
22:43 < groundwater> i think systemfault was joking
22:43 <@isaacbw> everything at google used to be built on closure
22:44 < systemfault> Still.. Why GWT and Dart if they really like JS?
22:44 <@isaacbw> I think there's only one public-facing project at google built on angular
22:44 <@isaacbw> it's something in adwords
22:44 <@isaacbw> because google is a big company
22:44 <@isaacbw> and they like to experiment 
22:44 < amurdaca> angularjs ftw
22:45 < amurdaca> for me is better than backbone
22:45 < systemfault> amurdaca: I think that anything is better than backbone for anything not super simple.
22:45 < systemfault> A programmer shouldn't have to manually deal with view rendering..
22:45 < amurdaca> i found angular simpler than backbone
22:45 <@isaacbw> systemfault, you don't
22:46 <@isaacbw> or rather, you do once and then never again
22:46 <@isaacbw> in directives
22:46 < systemfault> I found that I needed a view manager with backboneâ€¦ I used backbone-layoutmanager for that purpose
22:46 < othiym23> Backbone is a component of a larger architecture
22:47 < othiym23> I think there's a reason that it and AMD are pretty much always mentioned together
22:47 < systemfault> It's nice to hear your opinions on the MV* frameworks, I love it.
22:47 < groundwater> and *groan*
22:47 < groundwater> amd*
22:48 < systemfault> I like amd
22:48 < systemfault> It's good for the browser.
22:48 < systemfault> I wouldn't want something like that on node though :P
22:48 < groundwater> i know this topic will never have closure; i don't like them, but i won't argue
22:48 < systemfault> groundwater: Indeed :P
22:49 < systemfault> groundwater: I just like the fact that you don't need any compile step with it unlike the alternatives like substack's browserify
22:49 < groundwater> 90% of node arguments come down to this http://i.imgur.com/4Lo4fOz.png
22:49 < systemfault> Haha
22:49 < othiym23> groundwater: AMD is probably the most common dependency injection framework encountered by the average JS developer ;)
22:50 <@isaacbw> are event listeners guaranteed to be called in the order they registered?
22:50 < groundwater> systemfault: not starting an argument, but i still compile my require.js
22:50 < systemfault> groundwater: I also do
22:50 < othiym23> isaacbw: depends on what you mean by "guaranteed"
22:50 < systemfault> groundwater: Before deploying to prodâ€¦ when developing, having separated files is very nice
22:50 <@isaacbw> othiym23, erm, how many meanings could it have
22:51 < groundwater> systemfault: when developing, i have everything set to auto-reload, and no compression/concat
22:51 < othiym23> ee.on('event', fn) -> ee._events['event'].push(fn)
22:51 <@isaacbw> can I structure my software relying on that feature
22:51 <@isaacbw> I guess
22:51 < othiym23> that doesn't mean that isaacs couldn't get totally ripped on Meow Mix and change it in the future
22:51 <@isaacbw> right, okay
22:52 < othiym23> (I guess what I'm saying is that I'll rely on that behavior in test code, but not in production code)
22:56 < benatkin> systemfault: what's wrong with Backbone.stickit?
22:56 < systemfault> benatkin: Nothing as I never heard of it
22:57 < systemfault> Not sure what I'm winning if I'm using backbone + plugins instead of just ember or angular
22:57 < benatkin> systemfault: well, it lets you map model names to view elements
22:57 < systemfault> benatkin: Yeah, just google'd it :)
22:57 < systemfault> Good to know it exists
22:58 < benatkin> systemfault: well, no further comment then, if you think plugins are bad, I'll just agree to disagree
22:58 < systemfault> They're not bad at allâ€¦ that's not the point.
22:59 < systemfault> Just saying that ember and angular does the same thing as backbone + plugins.. without the problems
23:00 < amurdaca> systemfault agree
23:00 < systemfault> If I upgrade my backbone.js fileâ€¦ will it break the plugins?
23:05 < benatkin> systemfault: fear is the mind killer
23:05 < systemfault> So is losing my job ;)
23:10 < groundwater> benatkin sounds like he's from the matrix
23:10 < othiym23> either that or he's had Bene Gesserit training
23:10 < othiym23> oops, not Bene Gesserit, Mentat
23:10 < systemfault> Aren't we all in the matrix?!?!?</crazy>
23:10 < othiym23> how embarrassing
23:11 < benatkin> heh, just trying to be nice whilst saying flatly that I disagree
23:21 <@Nexxy> lol
23:22 < benatkin> Hi Nexxy!
23:22 <@Nexxy> hey!
23:22 <@Nexxy> what's up?
23:23 < benatkin> I was thinking of putting KEEP JS WEIRD on TeeSpring. Could use the unofficial black on yellow logo, or could try and make it like the Keep Austin Weird stuff.
23:23 < Sembiance> muhahaha!
23:24 < benatkin> I don't know where I'd have the proceeds go to. Not to me personally, of course. :)
23:25 <@Nexxy> benatkin, stickermule stickers too plx
23:25 < benatkin> Nexxy: sounds good :)
23:25 <@Nexxy> OBTW just saying
23:25 <@Nexxy> austin stole that from portland ;x
23:25  * Nexxy hipster
23:26 <@Nexxy> benatkin, also another good one would be
23:26 < benatkin> hadn't been to either of those places before this decade, so I wouldn't know
23:26 <@Nexxy> JAVA FUCKING SCRIPT
23:27 < benatkin> YUSSSSSSS
23:27 <@Nexxy> lol
23:27 < Sembiance> benatkin: you could always donate to the EFF
23:28 <@Nexxy> or the Ben Atkin School for Kids Who Can't Program Good and Want to Do Other Stuff Good Too
23:29 < benatkin> ROFL
23:31 < SandorKrashna> Hey guys I'm still having issues with socket.emit inside app.get('client/:id'), function(){}) I want to pass the req.params.id back to the connected socket
23:32 < SandorKrashna> so if i go to /client/1 it will return 1 to the client
23:34 < SandorKrashna> do I need to do io.connect(/client/1) on the client?
23:41 -!- mode/#Node.js [+o isaacbw] by ChanServ
23:44 < SandorKrashna> :q
23:44 < SandorKrashna> oops
23:44 < SandorKrashna> heh
23:45 < chapel> hows it going Nexxy ?
23:47 < amurdaca> when 0.8.20 was released? :O
23:47 < amurdaca> haven't noticed it
23:48 < amurdaca> should i stop my node app while recompiling from source?
23:49 <@isaacs> scott_gonzalez: depends.
23:49 < amurdaca> ?
23:49 < amurdaca> i just did git fetch && git checkout v0.8.20
23:50 <@isaacs> amurdaca: if you have something running, then the binary is already in memory
23:50 <@isaacs> amurdaca: you can swap it out, but you won't be using the new bits until you restart
23:50 <@isaacs> amurdaca: and if it does child_process.fork() then undefined behavior maybe
23:50 < amurdaca> so i can recompile node while keeping my website running
23:50 <@isaacs> sure
23:50 <@isaacs> then restart it once it's done
23:50 < amurdaca> and then just do 1ms restart
23:50 <@isaacs> yep
23:51 <@isaacs> or graceful whatever if you have something set up like that
23:51 < amurdaca> nice thanks isaacs :)
23:51 <@isaacs> np
23:51 < amurdaca> i have upstart
23:51 <@Nexxy> omg, *the* mikeal ?!
23:52 < amurdaca> is it normal that it just took 2 mins?!?!?!
23:52 < amurdaca> ./configure && make && make install
23:52 < willwh> depends on your box 
23:52 < willwh> :p
23:52 < willwh> but that is pretty speedy :)
23:52 < amurdaca> its a micro ec2
23:52 < willwh> yeesh
23:53 < amurdaca> first time compiled node 0.8.19 took 1 hour exactly
23:53 < willwh> are those not 1x600mhz core?
23:53 < willwh> or something?
23:53 < amurdaca> now upgrading just 2 mins?
23:53 < willwh> seems odd, but I am no node exprt :]
23:53 < systemfault> Perhaps 8.20 only had a few small changes..
23:54 < systemfault> And your build folder already had most objects compiled
23:54 < amurdaca> oh
23:54 < amurdaca> that make sense
23:54 < amurdaca> didn't make clean it5
23:54 < systemfault> If you want to be sureâ€¦ make clean
23:54 < systemfault> Right.
23:54 < amurdaca> wouldn't make clean lol
23:55 < amurdaca> upgrading will take hours maybe
23:55 < amurdaca> i'll let this as is for now
23:57 < amurdaca> are there particular situation where should i "make clean" in my node git folder before recompile isaacs?
--- Log closed Sat Feb 16 00:00:41 2013
