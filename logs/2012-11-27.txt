--- Log opened Tue Nov 27 00:00:20 2012
00:06 < ack006> ahhh, finally switched to arch linux, should've done that years ago.
00:07 < pspeter3> Does anyone know of a module that tests network speed?
00:10 < MitchW> ack006: from what?
00:11 < jtwalters> anyone know how i would go about troubleshooting an express POST route (app.post)? it doesn't seem to fire, even though a previous callback in the chain does
00:12 < ack006> MitchW: ubuntu. liked it a lot back in the day, now gets more and more bloated
00:12 < ack006> also, i gravitate more and more towards dev not user stuff
00:12 < ack006> i.e. build my own packages etc
00:13 < ack006> and patch them ;) otherwise that wouldn't be 'dev' 
00:13  * MitchW nods
00:13 < MitchW> I'm still a debian person myself, not sure I'll ever change >.<
00:14 < ack006> stability counts yeah, but do you build your own packages too?
00:14 < ack006> i've always had all kinds of fights with debian/rules (literally + idealistically :) )
00:14 < MitchW> not much no, only mono related stuff usually - or if I do, i tend to have multiple versions installed on the system anyway - so I install into /opt/... and setup alternatives in /usr/local
00:15 < ack006> aha
00:15 < MitchW> I don't push any packages upstream to debian, everything i do is for internal use
00:15 < MitchW> so not so much an issue
00:16 < MitchW> I definitely like the ideals of debian packages from a server perspective though, hence I use it (though for my debian desktop I blow that away epically by mixing sid into the mix + custom installs of crap :P it doesn't often cause major headaches though)
00:17 < MitchW> as long as you place nice w/ apt
00:17 < ack006> don't get me wrong, i support the dfsg, but the micromanagement of where files should go is sometimes a bit ..much
00:17 < ack006> i like arch way of saying, if it's a bug or misconfig, upstream should get a chance to fix it first
00:18 < ack006> before we(arh) go patching the hell out of a package
00:18 < ack006> arh = arch
00:18 < othiym23> isaacs: how long does it take for a publish to npm to show up on npmjs.org?
00:23 < MitchW> I imagine it could be for package maintainers.  but if you look at things from a multi-arch perspective, does it make sense mebbe?
00:24 < MitchW> ack006: mmm, the whole point of debian though is secure stable servers... sometimes you can't wait when a 0day exploit has been found and you're hosting 200 websites that could potentially give people root access to your servers, customer data, etc... :P
00:25 < MitchW> at least w/ debian you know everything has been pretty thoroughly reviewed by people who are familiar with such issues, and are attentive/responsive to such security issues (mostly... lets not bring up history here :P)
00:25 < MitchW> anyways offtopic again, sorry >_>
00:34 < FatDarrel> https://gist.github.com/1707371 come on guys! 
00:35 < RocketJSquirrel> Sometimes a missing comma can turn a programmer's plea into gay porn.
00:37 < stagas> RocketJSquirrel: comma first problem solved
00:38 < FatDarrel> hahahah most awesome
00:47 < samholmes> Anyone here with experience watching all traffic coming into a node.js site?
00:48 < othiym23> samholmes you mean with a protocol-level tool like wireshark?
00:48 < samholmes> othiym23: I didn't mean that.
00:49 < othiym23> OK!
00:49 < samholmes> othiym23: More like, instrumenting all the traffic. Figuring out how many signups there are, where they came from etc.
00:50 < othiym23> samholmes: that sounds like analytics to me
00:50 < samholmes> othiym23: is it a good idea to build these tools from scratch?
00:51 < othiym23> samholmes: really depends, but no, more often than not
00:51 < othiym23> have you looked at mixpanel, Crazy Egg, KISSmetrics or even just Google Analytics?
00:52 < samholmes> I'll write these all down to look at.
00:52 < othiym23> if you just want high-level metrics on things like conversion and engagement, one of those will give you what you want
00:52 < othiym23> if you're more interested in application performance, I *just* pushed a beta build of the Node agent for New Relic, which is now more or less in a public beta
01:05 < ack006> MitchW: was afk for a bit, but good point about security. different distros have different purposes
01:05 < `10> would be really nice for http(s).{createServer,request} to take a socket object as an option
01:20 < MitchW> ack006: couldn't agree more - i don't actually think debian is good for a workstation/desktop - i just use it because i'm most familiar with it, but don't like how ubuntu have butchered it all
01:31 < TehShrike> ...what?  Japanese cell carriers actually have standards for emoji?
01:31 < othiym23> there are many to choose from!
01:31 < othiym23> how did that gist of mranney's start doing the rounds again today, anyway?
01:31 < othiym23> did it hit HN?
01:32 < TehShrike> ionno
01:32 < rektide_> it hit HN I believe yes
01:37 < othiym23> I'm still not sure where Node / v8 fails with glyphs outside the BMP
01:37 < othiym23> var x = 'ùåÜ'; looks weird upon input in Node, but it renders fine, and I can console.log it just fine
01:37 < othiym23> I wonder if that just nuked npmbro ;)
01:38 < othiym23> var x = 'ùåÜ';
01:38 < othiym23> haha it totally did
01:38 < othiym23> sorry npmbro
01:46 < mmalecki[slides]> ùåÜ
01:47 < mmalecki[slides]> good thing that it runs on nodejitsu
01:48 < othiym23> apparently the fix to V8 landed in 2012/03, so once again HN decides to exhume old news
01:48 < othiym23> don't know what npmbro's deal is
01:50 < mmalecki[slides]> it's running on node v0.6
01:50 < mmalecki[slides]> DTrejo: you might want to change your engines field XD
01:53 < DTrejo> oh lol
01:53 < DTrejo> umm dunno man
01:53 < DTrejo> fixing that
01:58 < Disil> How difficult is it to create a node.js interface with an existing API? I'd like to interface with Skype's API
02:00 < mscdex> Disil: pretty easy, depending on how well the remote API is documented :-)
02:01 < Disil> It uses a COM interface. Does node have an existing method to interact with such a thing?
02:02 < mscdex> oh, nevermind :D
02:02 < mscdex> COM is crap
02:03 < othiym23> Disil: if you want to interface with COM, you're going to have to write a native binding
02:03 < deoxxa> also you'll have to cry every night
02:03 < othiym23> it can be done, but it's a pain in the ass, and Node / v8 doesn't have a convenient FFI like some dynamic languages
02:03 < deoxxa> because that's how COM makes you feel
02:03 < othiym23> I'm not a big fan of COM / DCOM, but it's not as bad as some things in Windows-land
02:05 < Disil> I wrote a C++ program when I was learning win32. Something like 150 lines of code to create a window.
02:05 < Benvie> node doesn't have ffi?
02:05 < Benvie> npm install ffi
02:06 < deoxxa> you're spreading lies and rumours again Benvie
02:06 < deoxxa> that doesn't exist
02:06 < timeturner> any idea why I might be getting Port error: Could not establish connection. Receiving end does not exist. in chrome even though the client successfully connects with socket.io
02:06 < Benvie> oh I forgot the secret ffi handshake
02:06  * deoxxa bends his arm under his knee
02:07 < Benvie> I'm not supposed to talk about the secret ffi handshake...
02:07 < Benvie> it all makes sense now
02:25 < Disil> I think node-ffi is exactly what I want. I can write a wrapper library (or possibly even just find one)
02:50 < DukeofURL> hey i got a question if anyone can help,  its not a node question though. I dont know where my redis and node are installed on the system.  its ubuntu. i just ran a script to install it 
02:51 < asadpakistani> is the built in cluster module production ready?
02:51 < chilts> DukeofURL: type at the prompt 'which node'
02:52 < chilts> and it'll come up the path where it lives
02:52 < DukeofURL> magic 
02:52 < DukeofURL> thanx
02:52 < chilts> not magic if you know it :)
02:52 < DukeofURL> eheh
02:52 < chilts> if you don't know it, it seems like magic :)
02:53 < DukeofURL> yea i still dont know all them unix programs
02:53 < chilts> so with redis, you'll either use redis-server or redis-cli I think
02:53 < chilts> so 'which redis-server' will give you that
02:53 < chilts> etc
02:53 < DukeofURL> yea
02:53 < chilts> Redis _is_ magic
02:53 < chilts> be careful :D
02:53 < DukeofURL> heehehe
02:54 < DukeofURL> yes it is magical
02:54 < DukeofURL> its cache money
02:55 < DukeofURL> where does it store the config files tho?
03:00 < ack006> chilts: and 'whereis' is the wizard, it will even tell you what man pages there are for a command ;)
03:01 < ack006> and its config files, try 'whereis bash' for example :)
03:17 < chilts> ack006: heh, the Wizard :)
03:17 < chilts> speaking of Wizards, it's The Hobbit's premiere here in Wellington tomorrow :D
03:17 < ack006> :-)
03:32 < khmer_> whoooo wants to help me figure out why my package won't install and run its bin alias in windows
03:33 < khmer_> who's that person
03:33 < khmer_> here is my pastebin
03:33 < khmer_> http://pastebin.com/HXVDTWjY
03:42 < Youdaman> so you type "mozomozo" on line 35 and then nothing? or does it spit out that stuff on line 37?
03:46 < rump> do bangs work in windows?
03:46 < rump> i doubt you have /usr/bin/env in that enviornment
03:46 < rump> type: node mozomozo
03:47 <@konobi> khmer_: http://stackoverflow.com/questions/10396305/npm-package-bin-script-for-windows
03:48 < khmer_> konobi: thanks, i've seen that answer and it seems to be what my copy of node did
03:48 < khmer_> konobi: it installed a mozomozo.cmd in my npm bin -g
03:49 < khmer_> but executing that file *directly* gives me the same error
03:49 <@konobi> so the .cmd version doesn't have the full syntax?
03:49 < Youdaman> khmer_: i use Windows, and I've found I have much more joy using Git Bash (comes with Git for Windows)
03:50 < khmer_> konobi: how so?
03:50 <@konobi> (ie 'node <bleh>/bin/momomomo.js'
03:50 < khmer_> Youdaman: i'm with you. i wouldn't use windows if i could avoid it, but i'm trying to make this utility cross-platform
03:50 < khmer_> Youdaman: so i'm trying to run it in a barely-customized w7 vm
03:50 < khmer_> konobi: i'll paste the contents of mozomozo.cmd
03:51 < khmer_> :: Created by npm, please don't edit manually.
03:51 < purr> khmer_: you're a fucking retard.
03:51 < khmer_> "%~dp0\.\node_modules\mozomozo\bin\mozomozo"   %*
03:51 < Youdaman> can you run it with node directly? i.e. node mozomozo ?
03:51 < khmer_> purr: how deep did you dig for "fucking"
03:51 < khmer_> purr: there are so many more exciting modifiers!
03:51 < khmer_> Youdaman: yes, that works. i'm just trying to get that extra ease of use, for white-labeling
03:51 < Youdaman> ah ok
03:52 < khmer_> purr: you could have gone for motherfucking, giving it that extra incestuous swag
03:52 < Youdaman> purr: yolo
03:52 < khmer_> purr: you could have swung "goddamned", making yourself seem long-suffering and exasperating
03:52 < khmer_> purr: you could have even said "cock-a-doodie" for the misery shoutout! instead you went for a spluttery, ineffectual-sounding 'fucking"
03:53 < khmer_> you went for a spluttery "fucking" and honestly, i don't want to hurt your feelings, but it just served to emasculate you
03:53 < khmer_> konobi: anyway. sorry about that.
03:53 <@konobi> khmer_: purr is a bot
03:53 < khmer_> konobi: .... and i put in all that effort too
03:53 <@konobi> elliottcable: right?
03:54 < khmer_> konobi: was it because i said "paste"
03:54 <@konobi> nah, the two colons
03:54 < Youdaman> ::
03:54 < khmer_> konobi: why
03:54 < Youdaman> khmer_: i'm still trying to grok your problem, bear with me why my brain churns
03:54 < khmer_> Youdaman: thanks a lot, man
03:55 -!- purr was kicked from #Node.js by konobi [no bots bitte]
03:56 < elliottcable> konobi: sorry, what?
03:57 < elliottcable> konobi: what, this time?
03:57 < elliottcable> khmer_: purr is a bot; :: executes code, and the code you pasted was a syntax error.
03:57 < elliottcable> khmer_: sorry if he offended you. (=
03:58 < khmer_> elliottcable: oh, not at all, not at all
03:58 < elliottcable> :: flip flop (paddily whop
03:58 < khmer_> elliottcable: i was just less surprised than i ought to be at the random abuse
03:58 < elliottcable> okay, apparently even it erroring-out is borked. woo.
03:58 < khmer_> yee!
03:58 < elliottcable> :: flip flop (paddily whop
03:58 < elliottcable> oh, he was banned
03:58  * elliottcable sighs
03:58 < elliottcable> khmer_: ‡≤†_‡≤†
03:58 < khmer_> ok i just made sure by deleting the contents of my npm and npm-cache global directories
03:58 < elliottcable> er,
03:58 < elliottcable> konobi: ‡≤†_‡≤†
03:59  * elliottcable wanders off
03:59 < khmer_> brb
03:59 < Youdaman> khmer_: kk
04:01 < elliottcable> konobi: I can't tell whether you intended for him to re-join or not, since you didn't ban him. Should I bring him back?
04:01 < Youdaman> khmer_: can i download this module from anywhere to test locally?
04:02 < elliottcable> konobi: as for the offensive response on Paws-source errors, that doesn't seem too out-of-line for this channel; but I'll change it if you like.
04:06 <@konobi> elliottcable: i'd rather not have bots, tbh
04:20 < brainproxy> cool stuff --> http://vimeo.com/stljs/control
04:20 < brainproxy> starts off a little slow, but at ~2:30 the presenter begins showing off something pretty slick
04:32 < garthk> Weird. console.log() is doing something to process.stdout() that fixes a bug. If I take out the log, though, the bug returns.
04:33 < mscdex> what bug?
04:37 < mdedetrich> is 500kb considered too large for a compress .js file for a website?
04:40 < jamesd> mdedetrich, a user on a 56k modem will take 100 seconds to download the .js file before it gets to a single graphic file, its way too big,  break it up and do more on-demand loading or remove lots of bloat from it. 
04:41 < mdedetrich> jamesd: yeah thats what I thought, I need to see whats making it so bloated
04:41 < mdedetrich> this is even compress with uglifyjs
04:41 < garthk> mscdex: https://gist.github.com/4152383
04:42 < mscdex> 56k modems? whoa. ;-)
04:42 < garthk> mscdex: I'm sure it's my stuff-up rather than Node's stuff-up, but I'm not sure what's going on.
04:46 < mscdex> garthk: without actually going into it further, have you already seen this (possibly related)?: https://github.com/JSBizon/node-memorystream/issues/5
04:46 < jamesd> mscdex, well you can also turn it around... if you have a 100 users each pulling down a 500k .js file, is using 50MB so your 50MBit link to the net is full for 10 seconds just serving users a single file 
04:47 < mscdex> jamesd: maybe, but also most browsers have a cache
04:48 < jamesd> mscdex, so you are saying that a 500k file is fine, before you even talk about graphics and animations? 
04:48 < mscdex> jamesd: if it's a popular js package/bundle like jquery or some such hosted at google it's not a problem because usually users will already have it cached from some other site
04:48 < mscdex> jamesd: not without knowing the contents of the payload :-)
04:48 < mdedetrich> jamesd: do you think the google closure compiler is a lot better at compressing js when doing advanced?
04:49 < MI6> joyent/node: Michael Axiak master * ffb4c17 : build: add $(PYTHON) when calling configure - http://git.io/Rj4GSQ
04:49 < jamesd> mdedetrich, haven't used it 
04:49 < garthk> mscdex: not sure. 
04:50 < mdedetrich> sigh, this is the biggest problem of using a dynamic language like JS
04:50 < mscdex> garthk: you might check out BufferedStream from mikeal's morestreams module
04:50 < mdedetrich> its basically impossible to compress it to a less than trivial degree without breaking the problem
04:50 < mdedetrich> *breaking the code
04:50 < mdedetrich> or exposing the ability to break code
04:51 < mscdex> mdedetrich: generally it should compress well, since it's text
04:51 < garthk> mscdex: wilco.
04:51 < mdedetrich> mscdex: thats not it, static languages can actually do better deep inspection, and do stuff like remove code thats not used, and remove reused code
04:52 < mscdex> garthk: otherwise dominictarr does a lot of stream stuff, he probably also has something similar out there
04:52 < mdedetrich> google closure compiler does that for example with ADVANCED optimization, however it places restrictions on the JS else it will break your code
04:52 < mscdex> garthk: or substack
04:52 < mscdex> mdedetrich: i mean something like gzip
04:52 < clever> mdedetrich: i recently came across a project that put a 5mb js file (minified) into an html file
04:52 < mdedetrich> mscdex: ah right
04:52 < clever> mdedetrich: in 8kb chunks
04:53 < clever> mdedetrich: each chunk was inside <script>s("...");</script>
04:53 < mdedetrich> hmmm
04:53 < mdedetrich> so it loaded all the js parts in parallel?
04:53 < mdedetrich> which sped it up
04:53 < clever> each call to s simply updates a fancy progress bar and pushes it into an array
04:53 < clever> nope
04:53 < mscdex> if you fragment your javascript too much then you end up with a lot of extra round trips
04:54 < clever> mscdex: it was all in a single html file
04:54 < mscdex> which can be bad if you're on a bad mobile data connection
04:54 < substack> garthk: https://npmjs.org/package/pause-stream
04:54 < clever> about all it did was give a fancy skinned progress bar while loading
04:54 < clever> in the end, it did data.join('') to re-assemble the pieces into a single 5mb long string
04:54 < mscdex> clever: right, i'm speaking generally though
04:54 < garthk> substack: heh. Cheers. 
04:54 < clever> then eval() it
04:55 < garthk> mscdex: dropping in BufferedStream in place of MemoryStream worked fine.
04:55 < garthk> mscdex: though, I also removed the pause() call. 
04:55 < clever> mscdex: i can see how putting it all in one file would prevent exactly what you mentioned
04:55 < clever> less round-trips
04:55 < clever> but 5mb is pretty insane, and thats after being minified (poorly)
04:56 < clever> i found countless long variables repeated countless times
04:58 < garthk> substack: do you have a module for taking input on incoming possibly overlapping request streams and dumping output into a single coherent stream, while handling back pressure correctly the whole way?
05:00 < dominictarr> garthk, I was just thinking that about building something for that,
05:00 < dominictarr> what sort of streams are they?
05:01 < dominictarr> are they regular text? can you interleve the chunks or do they need to be concatenated?
05:02 < garthk> dominictarr, it's newline separated JSON blobs coming in, usually one per request.
05:02 < dominictarr> right, so can you merge them by lines?
05:02 < dominictarr> are you parsing them into lines?
05:03 < dominictarr> before you merge?
05:03 < garthk> dominictarr: I'd hope so, but there's no guarantee someone won't pretty-print the JSON before lobbing it at me.
05:03 < dominictarr> garthk, JSONStream can handle that
05:04 < dominictarr> it can parse out multiple valid json objects from a stream, separated by white space.
05:06 < DTrejo> ^ ask your questions now while the author is present !:)
05:08 < toddbranch> clear
05:14 < misterhat> hi friendly people
05:15 < garthk> dominictarr: looks pretty good.
05:16 < misterhat> what's going on
05:22 < garthk> dominictarr: any protection in JSONStream to stop objects getting too large? 
05:28 < wookiehangover> http://gif.ly/random.gif
05:28 < wookiehangover> with the power of node...
05:28 < wookiehangover> different GIFs for everyone!
05:29 < Mahesh> Can anyone help me how to use tap device using Node?
05:31 < substack> Mahesh: what is tap device?
05:32 < Mahesh> its a tun/tap device
05:33 < Mahesh> used to create virtual adaptor
05:34 < Mahesh> http://backreference.org/2010/03/26/tuntap-interface-tutorial/
05:37 < dominictarr> garthk, no, but someone suggested that feature
05:38 < dominictarr> currently, it builds up the whole object, but it would be better to just stream it.
05:38 < dominictarr> then you could stream really really large JSON if you wanted.
05:40 < dominictarr> you'd need to put in a change to jsonparse, but I'd be happy to take such a PR
05:40 < Mahesh> #libuv
05:43 < garthk> dominictarr: ash, I reckon I'll just control the upstream end for now, e.g. hanging off the request's data event and killing the input if it gets too big.
05:43 < dominictarr> right, that is probably the right thing
05:44 < garthk> Oh, nuts. That won't work well for someone opening a long-lived pipe for logging.
05:44 < garthk> More planning required. Clearly. :)
05:45 < garthk> It's funny how trying to get resilient about such things always seems to end up with the temptation to write your own message queue server from scratch. 
05:45 < mdedetrich> if you want to manually serve gzip files (like on a cdn)
05:45 < mdedetrich> can you just gzip the file, put it on the CDN
05:45 < mdedetrich> and will browsers automatically recognize the .gz extension
05:45 < mdedetrich> and unzip the file?
05:45 < dominictarr> garth just do length / time open
05:45 < dominictarr> so you can just destroy DoS attacks?
05:46 < dominictarr> there is one attack where you send a massive header, (like, several mb in a http header) 
05:46 < dominictarr> the http parser doesn't like that.
05:47 < dominictarr> mdedetrich, if you have a decent file server, it will set the right content type
05:47 < dominictarr> use mikeal/filed
05:47 < mdedetrich> dominictarr: im using rackspace cloudfiles
05:48 < dominictarr> okay, one should think so then.
05:49 < mdedetrich> dominictarr: eh?
05:49 < dominictarr> oh, sorry. the file server should notice it's a gzip and write the correct content type
05:49 < dominictarr> I don't think that the browser cares about the extension.
05:49 < mdedetrich> well I guess I should try it
06:17 < MI6> joyent/node: Adam Malcontenti-Wilson master * 0c9bee4 : build: support ARM in makefile target 'binary' - http://git.io/MSGHHA
06:22 < MI6> joyent/node: Chad Rhyner master * 8fc578b : test: disable eio-race tests  Disabled the following unit tests:  * test- - http://git.io/IVOSTQ
06:25 < fg3> damn quiet 
06:27 < yarco> hi, i found there is a module._compile function in source code, but i didn't see it in nodejs doc, any hidden function/method exists?
06:33 <@konobi> methods or functions beginning with an underscore are usually treated as private
06:35 < yarco> konobi , so you mean nodejs doc won't include those methods?
06:35 < yarco> konobi , private methods
06:35 <@konobi> the source is the documentation
06:36 < tnorris> bnoordhuis: your a beast man. I think you've closed all the issues I've commented on. need to get in gear and go over the next batch.
06:37 < gkatsev> yeah, I was doing some command-line stuff and was able to find some nice stuff in the repl object by inspecting it.
06:37 < bnoordhuis> tnorris: keep 'em coming :)
06:37 < jtm> If I do an emit with socket.io, do I need to pass in an empty {} for the second parameter?
06:37 < jtm> For example client.emit('unauthorized'); or client.emit('unauthorized', {});
06:40 < yarco> konobi : that is terrible...
06:44 <@konobi> yarco: ?
06:45 <@konobi> jtm: nope
06:45 < gkatsev> yarco: why should the docs include functions that are "private"?
06:45 < mdedetrich> bleh
06:46 < mdedetrich> i cant seem to get rackspace to server gzip
06:46 < mdedetrich> *serve
06:49 < yarco> gkatsev: why it shouldn't?
06:50 < yarco> gkatsev: if it will be used
06:51 < yarco> gkatsev: when you use some api generate tool, those are hidden? NO!!!
06:54 < GreenDog> Hi! 
06:55 < GreenDog> Does anyone know where I can find additional details on the changes made to node.js other than the breif thing in the blog? I tried looking at github source but couldn't find the fix mentioned.
06:56 < yarco> it is strange you didn't include those private methods in docs, no just tag it as  @private 
06:56 < yarco> no => not
06:57 < freewil> GreenDog, did you see the changelog: https://raw.github.com/joyent/node/v0.8.15/ChangeLog
06:57 < gkatsev> yarco: perhaps it would be nicer to have a section for the "private" functions, but I dont think it's bad that they aren't there. Also, the website does take pull requests.
06:58 < GreenDog> yes, that doesn't provide details.
06:58 < GreenDog> I'm most curious about * net, tls: fix connect() resource leak (Ben Noordhuis)
07:03 < GreenDog> nvm, found it on github
07:04 < GreenDog> ohh
07:04 < GreenDog> i wonder if this will fix the issue i've been seeing
07:04  * GreenDog hopes
07:05 <@konobi> yarco: private functions are private because you may not rely on their behaviour between versions
07:06 < yarco> gkatsev: i think i get it. those who did nodejs also bring the bad habit from c++‚Ä¶make things unclear...
07:06 <@konobi> yarco: should we also have a trailing comment on every line explaining what each line does?
07:06 < yarco> konobi: they should be marked as @unstable just like what they did currently
07:06 <@konobi> no
07:06 <@konobi> because they're private
07:07 < gkatsev> the functions are only available to you because making them truly private would be terribly in-efficient and a pain in the ass.
07:08 < gkatsev> though, once ES6 comes and we have @names, all those functions could be made truly private
07:09 <@konobi> useful documentation is useful... how you and I interpret "useful" is debatable
07:09 < jtoft> With express/connect; is there a way to tell when the formidable upload is complete?
07:09 < jtoft> seems like I'm trying to work with files that haven't completed yet
07:09 < yarco> but expressjs or connect may use module._compile
07:10 < yarco> and then other app may also would like to use this feature.
07:10 < yarco> then module._compile is not public
07:10 < yarco> not public => not private
07:11 < gkatsev> that's because of how js is made.
07:11 < gkatsev> you should consider functions beginning with _ truly private.
07:13 < yarco> i agree. but what about if i know js, don't know c++, and one day when i'm reading code which contains module._compile, then i have no idea to get the whole information about it
07:14 < gkatsev> if you know js, then you would know about the precedence that _ properties are private and you shouldn't fiddle with them.
07:17 <@konobi> or many other languages that aren't statically typed
07:18 < fg3> looking for a simple node promise lib - please recomend
07:26 < gkatsev> I guess substack just published his 200th module
07:31 < xer0x> fg3: re: promises -> https://gist.github.com/3889970
07:32 < fg3> xerthx
07:32 < fg3> xer0x:  thx
07:33 < misterhat> wowwow wait
07:34 < chovy> any other sites like ycombinator and reddit?
07:34 < chovy> for techy stuff?
07:35 < wolfes> quora has some tech Q&A and discussions about tech topics
07:36 < misterhat> promises look very strange 
07:36 < wolfes> chovy: http://www.quora.com/Technology
07:37 < ljharb> misterhat: "The point of promises is to give us back functional composition and error bubbling in the async world." https://gist.github.com/3889970
07:37 < misterhat> yeah i read that but i still don't really understand it
07:37 < misterhat> var promiseForTweets = getTweetsFor("domenic");
07:37 < misterhat> what do you do with promiseForTweets
07:37 < ljharb> promiseForTweets.done(someFinishedCallbackFunction)
07:38 < misterhat> so it's basically just abstracting the first function
07:38 < ljharb> also .fail(errorCallback).always(someCallbackForEitherOne)
07:38 < ljharb> it also lets you chain unlimited callbacks
07:38 < ljharb> and preserves the resolution value.
07:38 < misterhat> hm
07:38 < misterhat> cause like
07:38 < misterhat> getTweetsFor("domenic", callback);
07:38 < misterhat> is essentially the same thing
07:38 < misterhat> as the first example
07:38 < ljharb> also, you can pass around a promise and never care if it's done or not - just throw callbacks into it
07:39 < ljharb> misterhat: yes, for only 1 callback.
07:39 < misterhat> but it is interesting because i guess you can pass them around
07:39 < misterhat> yeah
07:39 < mattijs> and you can chain them
07:39 < ljharb> also whether it's done or not - you can attach a callback at any time. like in jquery, $(document).ready acts like a promise.
07:39 < misterhat> it almost looked like blocking code for a second which was why i was confused 
07:39 < ljharb> that's the point
07:39 < ljharb> you can kind of write it that way but it won't actually be blocking.
07:39 < misterhat> yeah
07:40 < misterhat> well that's pretty cool
07:40 < ljharb> exactly.
07:43 < misterhat> so how would one solve the problem of having to do a long-list of functions with potential delays in between each of them
07:43 < misterhat> without crazy deep callbacking 
07:43 < ljharb> delays?
07:43 < misterhat> sleeps
07:44 < ljharb> like intentional ones?
07:44 < misterhat> yeah
07:44 < ljharb> var p = new Promise(). p.done(delayedCallback); setTimeout(p.resolve, 1) ?
07:44 < ljharb> something like that
07:45 < misterhat> hm
07:45 < misterhat> yeah
07:45 < misterhat> pretty simple
07:45 < ljharb> pretty sure you don't even have to do p.resolve.bind(p) :-) 
08:19 < asadpakistani> is the built in cluster module production ready?'
08:23 < khurram> hi guys
08:24 < khurram> after structuring my file system into server.js , index.js , routes.js , requestHandler.js  NOW  i want to send the contents of  /views/welcome.html to the browser i read the file succesfully and logs the data but the response.write doesn't flush it over to browser ?
08:27 < khurram> can anyone  please help
08:31 < Raynos> khurram: res.end()
08:32 < [AD]Turbo> hola
08:38 < khurram> how to make node render a particular   index.html page and then its contents to the server  ? right now it prints the whole html on to the page when read from fs.read
08:39 < chovy> khurram: have you looked at express?
08:39 < khurram> chovy: i did looked at the express but it is very complex for me to figure out 
08:40 < khurram> i just want my server to send the html to the browser so that browswer can load all the  js libraries etc etc 
08:49 < onr> khurram: what's your previous web dev language/environment?
08:49 < khurram> php
08:50 < khurram> onr: php/windows
08:54 < yarco> vote for php / mac
08:54 < onr> khrome: yeah PHP is easier to deploy
08:54 < yarco> khurram: express is also simple
08:55 < yarco> khurram: just do `express -se`
08:55 < yarco> it will auto create files structure for you
08:56 < AAA_awright> I think that's missing the point
08:56 < deoxxa> ugh, scaffolding
08:56 < deoxxa> ugh.
09:01 < _smf_> asadpakistani: yes - I use it in production.
09:01 < chovy> deoxxa: its not that bad
09:01 < deoxxa> yes, it is
09:01 < chovy> well not like rails scaffoling
09:02 < chovy> khurram: express is not that difficult to learn and will save you a lot of headache re-inventing the wheel on your own.
09:03 < chovy> khurram: https://github.com/chovy/express-template-demo
09:11 < radiodario> morning
09:24 < Antaranian> hi ladies
09:25 < Antaranian> on file upload with fineuploader file isn't saving properly
09:25 < Antaranian> http://pastie.org/5441492 here is server side code
09:26 < Antaranian> but as I see req.on('data', .. misses some bytes
09:26 < Antaranian> any suggestions ?
09:40 < tuannat> anyone can help me with typescript
09:54 < bid> hey, any one have an exapmle on how to get a file as a pramter and run exe file on windowns macine? (local) 
09:56 < radiodario> bid i think visual basic is pretty good for that sort of stuff
09:59 < asadpakistani> is there a chance that the node cluster module be depriciated...or should i go ahead and start using i in my production project
10:01 < RanzQ> ls
10:05 < samholmes> I'd like some feedback on how I built my app. I have these "controller" files that are located in a directory of the same name. They handle the specific http routes of my express based app. I have "models", in a directory of the same name as well, and they handle database getting and setting. Is this a good way to do things?
10:07 < _smf_> asadpakistani: if you mean http://www.nodejs.org/api/cluster.html then I doubt it will be deprecated any time soon.  It's been around since 0.6 and I use it in production myself.
10:33 < chakrit> i have a large files that have undergone lots of refactoring and are now littered with unused requires.
10:33 < chakrit> is there a good way / command / module to help me spot those old requires?
10:40 < samholmes> How can I  become a better node.js developer?
11:03 < AAA_awright> samholmes: Developing developing developing developing
11:24 < regality> anyone have any idea on how a node process could keep running after emitting 'exit'?
11:35 < Stephen> Anyone familiar enough with dnode to get around the requirement that a client running in a web context be served from the server?
11:35 < Stephen> I'm looking to use dnode in a Firefox extension, which means no downloading scripts allowed
11:35 < Stephen> They must all be pre-packaged
11:42 < bnoordhuis> Stephen: substack probably knows but i bet he's asleep right now
11:58 < _smf_> bnoordhuis: any news on the TLS/crypto bug I reported on the list?
12:05 < asadpakistani> _smf_: thanks a bunch
12:05 < _smf_> asadpakistani: no problemo
12:06 < asadpakistani> _smf_: id like to see it become frozen in the future...it really increases scalability
12:08 < _smf_> asadpakistani: I'm sure it will be in time.  It's the only thing to use if you have multiple CPU cores, which is just about everyone ;-)
12:09 < _smf_> It's been around in one form or another since node 0.4 - prior to being in node core it was available as a module (learnboost/cluster)
12:11 < khurram> i have installed the express framework and run the app succesfully but i do not want to use jade or any other templating engine i want to use backbone and underscore template is that possible ?
12:12 < khurram> Also how would i make express load my  javascripts libraries present in /public/javascipts folder ?
12:12 < aandy> the public folder is in express by default
12:13 < aandy> if not, app.use(express.static('...'));
12:14 < asadpakistani> _smf_: i am new to node...taking a leap of faith for a big product...*fingers crossed*
12:16 < _smf_> asadpakistani: I've done the same too and moved a big product from C to node.js - but I've been using node for about a year now and I couldn't be happier.
12:18 < Gottox> node is awesome. I still would prefere a typesafe language around the node API, but I can live with it up to now.
12:21 < asadpakistani> _smh_: thanks for the confidence
12:22 < asadpakistani> Gottox: only if adobe wasnt greedy enough to keep their type safe ecma die instead of opensourcing it you might have had one
12:25 < Gottox> Damn, debugging webapps on iOS<=5.x is totally retarded. Neither can I use a debugger without dirty hacks, nor are line-numbers available on errors.
12:26 < Gottox> but I just found out: iOS5 does not support Function.bind().
12:26 < Gottox> it took me days -.-
12:29 < asadpakistani> Gottox: have you looked in to http://people.apache.org/~pmuellr/weinre/docs/latest/
12:30 < asadpakistani> Gottox: ios6 has remote debugging if u are paid enough to have a mac
12:31 < Gottox> asadpakistani: ios6 supports Function.bind :)
12:32 < Gottox> I looked into weinre, too but it wasn't able to give me line numbers other than 'undefined'
13:01 < elliottcable> konobi: People in here use it all the time >:
13:01 < elliottcable> konobi: oh well. Fly safe. (=
13:27 < sinclair|work> anyone used the async waterfall method, and found it a bit weird ?
13:27 < hipsterslapfight> yes, no
13:27 < mdedetrich> sinclair|work: lets put it this way
13:28 < mdedetrich> sinclair|work: I havn't found anything less weird
13:28 < sinclair|work> heh
13:28 < mdedetrich> its probably the nicest way to deal with callback hell
13:28 < mdedetrich> out of the other methods
13:28 < mdedetrich> dealing with callbacks in general is painful
13:28 < sinclair|work> mdedetrich: well, i guess i like it
13:28 < hipsterslapfight> of course it's only really needed for situations where the next level depends on the previous levels
13:28 < hipsterslapfight> otherwise you have various other methods available
13:29 < sinclair|work> hipsterslapfight: its the first function in the list i find odd
13:29 < hipsterslapfight> how so?
13:29 < mdedetrich> sinclair|work: you can also have a look at https://github.com/kriskowal/q
13:30 < sinclair|work> hipsterslapfight: not sure why, maybe id have put it as the first argument, followed by the call stack
13:30 < sinclair|work> then the result
13:30 < sinclair|work> hipsterslapfight: i guess it makes sense where it is
13:30 < spion> lately I've been eyeballing https://github.com/goodeggs/fibrous
13:31 < spion> yeah it uses fibers and extends Object.prototype, the first being a node sin and the second a JS sin
13:31 < spion> but its so damn elegant :)
13:31 < sinclair|work> mdedetrich: i don't like that one you posted
13:31 < spion> sinclair|work, ^
13:31 < mdedetrich> sinclair|work: you will end up having to make a lot of wrappers, I agree with you there
13:32 < sinclair|work> well, the chaining im not fond of
13:32 < sinclair|work> mdedetrich: better to leave it as an array imo
13:32 < mdedetrich> eh, I still prefer to use async
13:32 < mdedetrich> as it works with everything
13:33 < mdedetrich> I havn't had any issues with it
13:33 < sinclair|work> mdedetrich: yeah, async for the win
13:33 < sinclair|work> q sucks
13:33 < mdedetrich> q doesn't suck, in design its even better than async
13:33 < sinclair|work> mdedetrich: i don't think so
13:33 < mdedetrich> the biggest problem with q is its designed to work with promises
13:34 < mdedetrich> and not a lot of libraries are promise based at all
13:34 < sinclair|work> right
13:34 < spion> fibrous has the brilliant idea of extending Object.prototype and Function.prototype with a "sync" property.
13:34 < mdedetrich> and so you end up using deferreds all the time
13:34 < mdedetrich> spion: I can see that causing problems
13:34 < spion> giving you stuff like fs.future.readFile(arguments) without explicit wrapping
13:34 < sinclair|work> mdedetrich: JS needs this...
13:35 < mdedetrich> js needs a lot of things tbh
13:35 < sinclair|work> mdedetrich: var result = await fl.readFile('whatever.txt');
13:35 < spion> mdedetrich, namespace problems?
13:35 < sinclair|work> var result2 = await someotherasynccall();
13:35 < sinclair|work> and so on
13:35 < mdedetrich> sinclair|work: that ands up causing havoc
13:36 < mdedetrich> sinclair|work: have a look at http://maxtaco.github.com/coffee-script/
13:36 < sinclair|work> mdedetrich: well, it would cause havok as JS could never support it 
13:37 < sinclair|work> mdedetrich: i dare say, TS could support it, at the expense of the output JS looking like a dogs breakfast
13:37 < spion> mdedetrich, I think issues with extending Object.prototype are greatly exaggerated, given Object.defineProperty with enumerable:false and an obscure enough name.
13:38 < mdedetrich> spion: trust me, in a big project it can cause problems
13:38 < sinclair|work> mdedetrich: but the await convention is still quite nice
13:38 < sinclair|work> var result1 = await do_async(...);
13:38 < sinclair|work> var result2 = await do_async(result1);
13:39 < sinclair|work> for example, as line 2 wouldn't execute till line one had completed, the await tells a js compiler to bang the second line in a callback
13:40 < sinclair|work> mdedetrich: the callback is omitted in the call, and inferred by the compiler
13:40 < spion> sinclair|work,  isn't await a proposal for Harmony?
13:40 < sinclair|work> spion: sorry, Harmony ?
13:40 < spion> ES6
13:40 < sinclair|work> oh
13:40 < sinclair|work> not that i know of
13:41 < sinclair|work> spion: id like to see it tho
13:41 < spion> http://wiki.ecmascript.org/doku.php?id=strawman:async_functions
13:41 < hipsterslapfight> now would be the perfect time to link that article talking about how promises aren't promises
13:41 < hipsterslapfight> but i can't find it
13:41 < spion> there is a replacement based on generators
13:41 < sinclair|work> hipsterslapfight: are you really a hipster ?
13:41 < hipsterslapfight> i've been told i am, yes
13:41 < sinclair|work> hipsterslapfight: that's not really something to be proud of tho
13:42 < hipsterslapfight> why? says who? (whom?)
13:43 < hipsterslapfight> hmm i forgot to bookmark that article about promises. does anybody have a link to it? it was a few weeks back and on either github or gist
13:43 < hipsterslapfight> he was talking about various libraries and how they don't implement promises correctly
13:45 < mdedetrich> I think I know the article you are talking about
13:45 < mdedetrich> its from the guy that made q
13:45 < spion> https://gist.github.com/3889970
13:46 < mdedetrich> hhmm, I think the nice thing about IcedCoffee (if anything)
13:46 < mdedetrich> is the readable stack traces
13:47 < spion> mdedetrich, I've been thinking that when generators finally come to V8, promises will make a lot more sense in node (via something like e.g. http://taskjs.org/ ). But node decided to go with callbacks... so I'm wondering hows that going to play out.
13:47 < mdedetrich> promises aren
13:47 < mdedetrich> *promises arent ever going to take off until libraries start using the promise paradigm
13:48 < mdedetrich> else you just end up writing wrappers and putting defferreds everywhere
13:48 < hipsterslapfight> thanks spion 
13:48 < spion> i think the problem of promises is that writing callback-based API is slightly cheaper :)
13:48 < spion> with promises you have to create a promise first.
13:49 < mdedetrich> promises is also more difficult to understand initiallly
13:49 < mdedetrich> or thats how I found it
13:49 < spion> and there is a bit of extra mental effort involved reasoning with a promise object
13:49 < spion> yeah
13:49 < mdedetrich> icedcoffee-script is looking nice
13:49 < mdedetrich> and its quite usable
13:50 < sinclair|work> mdedetrich: what does it offer?
13:51 < mdedetrich> sinclair|work: in context of what?
13:51 < sinclair|work> mdedetrich: over other js compiled languages 
13:52 < mdedetrich> well since I already use coffeescript, there is negligable overhead in me using something like icedcoffeescript
13:52 < mdedetrich> it just adds 2 keywords, and thats it
13:52 < mdedetrich> as for the difference between coffeescript and javascript, coffeescript just hides a lot of yucky shit in javascript
13:52 < asadpakistani> in the child_process documentation an example listens for a 'connection' event in the parent process...and the child process also listens for that event...how is it that sometimes the parents handler is used and sometimes the childs...also why isnt tht both are exectued because events usually execute all handles attached to them
13:53 < sinclair|work> mdedetrich: really, you code coffeescript ?
13:53 < mdedetrich> yes
13:53 < sinclair|work> mdedetrich: get many people trolling you for it ?
13:53 < mdedetrich> not really?
13:53 < asadpakistani> sinclair|work: i was just gonna troll
13:54 < Doikor> i dont like the way coffeescripts hides the prototypal inheritance.
13:54 < sinclair|work> mdedetrich: i get a lot for using typescript
13:54 < sinclair|work> which is why i asked
13:54 < mdedetrich> thats because its not hipster
13:54 < mdedetrich> and its made by microsoft
13:54 < asadpakistani> sinclain|work: what kind of script makes its compiler in ruby...its beyond me
13:55 < sinclair|work> asadpakistani: compilers should be written in JS right
13:55 < mdedetrich> eh
13:55 < mdedetrich> compilers should be bootstrapped
13:55 < mdedetrich> that is they should be written in the same language that they compile
13:55 < sinclair|work> mdedetrich: what?
13:55 < mdedetrich> sinclair|work: http://en.wikipedia.org/wiki/Bootstrapping_(compilers)
13:56 < sinclair|work> mdedetrich: TypeScript is written in TypeScript, which is actually JS
13:56 < mdedetrich> yeah so that is bootsrapped
13:56 < Doikor> are you seriously saying that javascript compilers should be written in javascript. instead of like with c/c++ (V8)
13:56 < mdedetrich> which is what im saying
13:56 < sinclair|work> mdedetrich: it ticks all the boxes
13:56 < asadpakistani> write it in anything but ruby...
13:56 < mdedetrich> Doikor: uh, V8 runs JS code
13:56 < asadpakistani> javascript could make it elegant to write compilers
13:57 < mdedetrich> javascript is a scripted, not compiled language
13:57 < mdedetrich> javascript doens't compile to anything
13:57 < mdedetrich> *doesn't
13:57 < asadpakistani> cofee script compiles to javascript
13:57 < mdedetrich> yes
13:57 < asadpakistani> transforms more like
13:57 < sinclair|work> mdedetrich: so anyway, what are your thoughts on TS?
13:57 < asadpakistani> i guess transformer is a better word than compiler
13:57 < mdedetrich> sinclair|work: I like it because it adds static typing
13:57 < mdedetrich> the problem is, as with most things
13:58 < mdedetrich> that no libraries are wrriten in TS, and so static types are only created with the code you write yourself
13:58 < sinclair|work> mdedetrich: wrong
13:58 < mdedetrich> and most webserver code is just manipulating library code
13:58 < asadpakistani> mdedetrich: i havent found my self really desiring typechecking ever to be honest
13:58 < mdedetrich> asadpakistani: trust me, I hate JS for not having proper typing
13:58 < asadpakistani> mdedetrich: but i see how it could be easy to find alo tof issues
13:59 < mdedetrich> all of my issues are due to its stupid typing system
13:59 < asadpakistani> mdedetrich: i feel you
13:59 < mdedetrich> coming from scala (which I think is still the best language)
13:59 < sinclair|work> mdedetrich: TS can consume JS no problem, and map to JS though declarations, and supports static methods (not like thats a big deal)
13:59 < asadpakistani> mdedetrich: well if there were types involved then alot of these hidden class mutation performace issues could be eliminated too...but oh well
13:59 < mdedetrich> sinclair|work: yeah but the libraries themselves don't do static types because they are in JS not TS
14:00 < mdedetrich> unless TS is doing some black magic shit
14:00 < sinclair|work> mdedetrich: except, they do
14:00 < sinclair|work> mdedetrich: hang on, what is your definition of a static type
14:00 < mdedetrich> unless I am remembering something incorrectly, you have to declare a type as static
14:00 < mdedetrich> which is done with TS
14:00 < sinclair|work> mdedetrich: nope, 
14:01 < Doikor> isnt optional typing already in some upcoming ecmascript spec?
14:01 < sinclair|work> mdedetrich: ive been able to write declarations which map to all sorts of existing libraries, and TS has been able to map perfectly so far
14:01 < asadpakistani> mdedtrich: do you know why the connection event if consumed by the parent process will not be processed by the child and vice versa...in http://pastebin.com/DwWicNhQ
14:01 < mdedetrich> sinclair|work: http://en.wikipedia.org/wiki/TypeScript#Type_annotations
14:01 < mdedetrich> uh yes?
14:01 < mdedetrich> Doikor: yeah I believe it is
14:02 < mdedetrich> the problem is, static typing is not default
14:02 < mdedetrich> unlike languages like haskell/java/scala
14:02 < sinclair|work> mdedetrich: i don't understand where you are coming from
14:02 < asadpakistani> Doikor: it was already hell to make all browsers properly implement the current ecma...which they havent even properly...i dun know how long it will be when we can enjoy the new ecma...years i bet
14:02 < sinclair|work> mdedetrich: TS does not enforce static typing at all
14:03 < mdedetrich> in order to state that a type is static, you have to annotate the type as static
14:03 < mdedetrich> yes and thats the problem
14:03 < Doikor> mdedetrich: well they cant go and do that now. it would break every old app out there.
14:03 < Doikor> make it the default i mean.
14:03 < mdedetrich> Doikor: well obv
14:03 < mscdex> node.js rules!
14:03 < sinclair|work> mdedetrich: still not following you
14:03 < asadpakistani> Doikor: but atleast sticking with one engine keeps node clean
14:03 < asadpakistani> node with spidermonkey would be a disaster
14:03 < mdedetrich> which is why, even though I like TS, its not really useful, unless people started writing their code in TS
14:03 < Doikor> but yeah browsers should try to implement the ecma standard faster. theres just so much good stuff waiting there.
14:04 < sinclair|work> mdedetrich: what do you mean?
14:04 < asadpakistani> Doikor: i know chrome will
14:04 < mdedetrich> for static typing to be useful, everything needs to be static typed
14:04 < sinclair|work> mdedetrich: have you even used it? because everthing you are saying isn't true at all
14:04 < sinclair|work> mdedetrich: not at all
14:04 < asadpakistani> Doikor: i was playing with web rtc the other day..but when it comes to making a product...u still have to use the old crap or crap ur product with polyfills
14:04 < mdedetrich> it wouldn't have solved my problems, thats for sure
14:04 < asadpakistani> grrr
14:04 < sinclair|work> mdedetrich: languages which support dynamic typing and static types get by just fine
14:05 < asadpakistani> sinclain|work: support for both wont harm
14:05 < mdedetrich> but the thing is, TS works with JS code
14:05 < Doikor> asadpakistani: yeah thats the problem. I you have to use external library or your own made function just for forEach due to old IEs not supporting that. etc.
14:05 < sinclair|work> asadpakistani: of course not, that's what im trying to say
14:05 < mdedetrich> almost all JS code out there is dynamic
14:05 < sinclair|work> mdedetrich: right
14:05 < mdedetrich> the thing is, if you have a language X (that supports both static/dynamic typing)
14:05 < mdedetrich> when people write libraires for x
14:06 < mdedetrich> they choose the model that is suited for the library
14:06 < asadpakistani> Doikor: i have to add filter method to my arrays smh
14:06 < mdedetrich> in the case of TS, you are going to be use JS code, which is going to be ALL dynamic
14:06 < mdedetrich> *JS library code
14:06 < sinclair|work> mdedetrich: and TS maps to whatever style of JS you want to write
14:06 < asadpakistani> sinclair|work: yup and i guess tht would bring type casting to js too which is a good thing
14:06 < asadpakistani> does anyone know why the connection event if consumed by the parent process will not be processed by the child and vice versa...in http://pastebin.com/DwWicNhQ
14:06 < sinclair|work> mdedetrich: you are not forced into a particular style of code with TS
14:06 < mdedetrich> ffs
14:06 < Doikor> and tbh firefox (spidermonkey) has better support for ecmascript6 stuff then chrome/node atm. http://kangax.github.com/es5-compat-table/es6/
14:06 < mdedetrich> thats not the god damn fuken point
14:06 < mdedetrich> the point is
14:07 < mdedetrich> that not every library is in TS
14:07 < Doikor> but i guess V8 guys haven't even started implementing those
14:07 < mdedetrich> TS is not the issue
14:07 < mdedetrich> the issue is that TS -> javascript
14:07 < mdedetrich> and all the libraries are in javascript
14:07 < mdedetrich> and all those libraries are dynamic because they are in javascript
14:07 < sinclair|work> mdedetrich: but hang on, im happyly consuming node, async, threejs, express, etc etc without any problems at all
14:07 < mdedetrich> yes
14:07 < mdedetrich> and if you listen to me directly
14:08 < mdedetrich> my issue is that I get errors (with those libraries) due to js being dynamically typed
14:08 < mdedetrich> usually stupid typos and whatnot
14:08 < sinclair|work> mdedetrich: i don't
14:08 < mdedetrich> TS is not going to solve THAT problem because THOSE libraries are in dynamic JS
14:08 < mdedetrich> in a language like scala/java, it picks up EVERYTHING
14:09 < mdedetrich> every single piece of code you touch is static, all of the libraries are static, its all static
14:09 < mdedetrich> so if I am tired and just did 6 hours of coding, and actually rewrote a variable to res (which I shouldn't have)
14:09 < mdedetrich> it would pick it up
14:09 < sinclair|work> mdedetrich: in order for what you are saying to be true, js libs have to be completely random in all ways, for example, sometimes, it confuses the order of arguments you pass to functions
14:09 < sinclair|work> it obviously doesn't 
14:10 < mdedetrich> there isn't a practical solution to my problem
14:10 < mdedetrich> which is what I am saying
14:10 < mdedetrich> (at least for the JS world)
14:11 < mdedetrich> its nothing wrong with TS specifically (its a fairly good language), its just the JS ecosystem it deals with
14:11 < sinclair|work> mdedetrich: if what you are suggesting is that TS does not assure 100% type safety, you are right
14:11 < mdedetrich> and its why I would use something like coffeescript
14:11 < sinclair|work> mdedetrich: why, it has the exact same problems
14:11 < mdedetrich> that is what I am saying, and it can't assure that (unless all your code happens to be TS code)
14:12 < mdedetrich> yup it does, but its nicer in some respects (such as embracing what JS is meant to be)
14:12 < mdedetrich> which is a fully dynamic language
14:12 < Doikor> i just stick with javascript. i dont see coffeescript giving me anything that special that i could be bothered to learn in. and when most javascript libs are written in javascript its useful to be better in javsacript then coffeescript
14:12 < sinclair|work> i dont understand why coffeescript would appeal to you more, it can't assure type safety 
14:12 < mdedetrich> my code takes up like 60% of the original code
14:12 < mdedetrich> and its easier to read
14:12 < sinclair|work> mdedetrich: do you have an example of coffeescript being amazing ?
14:13 < Doikor> and then there is the debugging problem with coffeescript. i just wouldn't want to try find where a random exception is coming from when you have thousands of lines of code
14:13 < mdedetrich> its easier to read/takes up less room
14:13 < mdedetrich> function syntax is a lot better
14:13 < jonpacker> Doikor: source maps?
14:13 < mdedetrich> Doikor: thats a biggest exagurrated piece of shit i heard
14:13 < sinclair|work> mdedetrich: that's only a preference, 
14:13 < mdedetrich> if you can't read js code from CF, then your not a programmer
14:13 < sinclair|work> mdedetrich: i like C style
14:13 < mdedetrich> its basically a translator
14:14 < Doikor> jonpacker: they got those working now?
14:14 < Doikor> its been a while since i took a look at coffeescript
14:14 < Doikor> and they sure as hell didint work back then
14:14 < sinclair|work> mdedetrich: i don't understand how you can think cs is a better expression of js than what ts is currently providing
14:14 < mdedetrich> sinclair|workq: its not a thing of style, it actually is a lot shorter
14:14 < jonpacker> sinclair|work: coffeescript is only a preference. you won't find an objective reason why it's better or worse than JS.
14:14 < mdedetrich> my reasons are
14:14 < mdedetrich> 1. its shorter/less verbose
14:14 < jonpacker> Doikor: yeah, they need a bit of setup but they work. either way it's pretty easy to read the JS that CS spits out so it's never been an issue for me
14:14 < mdedetrich> 2. much better syntax for what you do a lot in JS (such as anonymous functions)
14:15 < mdedetrich> 3. classes syntax
14:15 < sinclair|work> jonpacker: im not looking for one, people like languages on their looks, i know i do
14:15 < mdedetrich> and things like splats
14:15 < sinclair|work> mdedetrich: does cs offer arrow like functions ?
14:15 < Doikor> mdedetrich: i like prototypal inheritance stuff more then classes
14:15 < jonpacker> sinclair|work: fair enough :)
14:15 < Doikor> one of the reasons i dont like coffeescript
14:15 < mdedetrich> uh, you can do that in CS
14:16 < mdedetrich> you can prototype with the :: syntax
14:16 < mdedetrich> instead of having to write prototype everywhere
14:16 < jonpacker> sinclair|work: yes it does. not the ES6 arrow thing though.
14:16 < jrajav> mdedetrich: All of those are the same reasons I and many others find Coffeescript regressive
14:16 < mdedetrich> your NOT forced to use classes
14:16 < jrajav> The syntax isn't "shorter and less verbose", it's overly clever and obfuscated
14:16 < mdedetrich> if you don't like classes, don't use it
14:16 < jrajav> Its anonymous function syntax is a perfect example
14:16 < Doikor> jrajav: that too
14:16 < mdedetrich> im sorry, but (a,b) ->
14:16 < jrajav> And class syntax? You're Doing It Wrong
14:16 < jrajav> (Javascript that is)
14:16 < sinclair|work> jonpacker: with arrow functions, does cs retain the current scope through the var that = this; pattern
14:17 < mdedetrich> is shorther then function(a,b){‚Ä¶..}
14:17 < jonpacker> no - like I said it's not the ES6 arrow thing.
14:17 < jrajav> Shorter? Yes. Clearer? No.
14:17 < mdedetrich> jrajav: yes it does
14:17 < sinclair|work> jonpacker: right
14:17 < mdedetrich> with fat arrow, it rebinds the context
14:17 < jrajav> Also, it leads to ambiguous and hard-to-debug syntactic situations
14:17 < jonpacker> sinclair|work: actually, yes it does. i forgot. -> doesn't retain context, => does
14:17 < mdedetrich> => instead of ->
14:17 < Doikor> mdedetrich: i dont try to write as short code as possible. i can see it pretty clearly that you used to/still do a lot of scala stuff
14:17 < mdedetrich> jrajav: no it doesn't
14:17 < sinclair|work> mdedetrich: i use that feature "all the time"
14:17 < mdedetrich> i havn't had any issues debugging CS
14:17 < jrajav> .... These are factual arguments I'm using to support my subjective point
14:17 < Doikor> to me one of the problems with scala is that they are trying too hard to write everything in a very short way
14:18 < jrajav> You can disagree with my point but not with the facts
14:18 < mdedetrich> jrajav: what?
14:18 < Doikor> makes it very hard to read for non experts
14:18 < mdedetrich> it not being clever
14:18 < mdedetrich> thats entirely subjective
14:18 < mdedetrich> rofl
14:18 < jonpacker> "debugging is hard in CS" isn't a fact
14:18 < sinclair|work> mdedetrich: ill be honest, i like it that you code node with coffeescript
14:18 < jrajav> You might find that the lack of clarity and the ambiguous, need-to-memorize situations are WORTH the shorter, more pretty syntax
14:18 < jrajav> But that doesn't magically make those go away
14:18 < mdedetrich> ....
14:18 < jrajav> jonpacker: I said no such thing.
14:18 < mdedetrich> thats the biggest crap I heard, using that logic, you should code in ASM instead of C
14:19 < jonpacker> jrajav: must have been someone else then, sorry
14:19 < sinclair|work> mdedetrich: in fact, i think its awesome that you do, im not the only one who things JS is borked enough to warrant languages such as cs and ts
14:19 < jrajav> ASM is clearer than C?
14:19 < mdedetrich> using your logic it is
14:19 < jrajav> Really.
14:19 < jrajav> Elaborate, please?
14:19 < mdedetrich> You might find that the lack of clarity and the ambiguous, need-to-memorize situations are WORTH the shorter, more pretty syntax
14:19 < mdedetrich> that statement
14:19 < sinclair|work> mdedetrich: tho, i think your views on TS are a little inaccurate 
14:19 < jonpacker> jrajav: if you like explicit verbosity you should check out this wonderful language which you will love called Java
14:20 < mdedetrich> jonpacker: exactly, which is the most disguisting language in terms of verbosity
14:20 < jrajav> jonpacker: Verbosity for the sake of verbosity is just as much a violation of clarity and maintainability
14:20  * mmalecki grabs popcorn
14:20 < jrajav> mdedetrich: You should read http://ceronman.com/2012/09/17/coffeescript-less-typing-bad-readability/
14:20 < jrajav> If you honestly think there are no ambiguous, hard-to-debug, very unclear situations that can arise
14:20 < jrajav> In perfectly normal coffeescript code
14:21 < Doikor> to me i guess the biggest reason why i dont like coffeescript is that i've never really done any python/ruby developing before where you dont use curly brackets. always have a hard time reading coffeescript due to that
14:21 < jonpacker> so javascript is good an everything else is evil? CS is just as terse as python or ruby
14:21 < mdedetrich> jrajav: those posts are irrelevant to me because its about people abusing the language
14:21 < jrajav> jonpacker: Ruby suffers from the same problem, but not to such an extent; in addition, Ruby's semantics support the paradigm much more elegantly
14:21 < mdedetrich> jrajav: and you can make just as many arguments in JS as you can with coffeescript
14:21 < asadpakistani> so when i enable clustering...lets say i have 4 cores and 2 threads on each cuz of hyperthreading...will node run 4 processes...or 8?
14:21 < mdedetrich> Doikor: thats fair enough
14:22 < jrajav> mdedetrich: The post hurts your feelings, so you aren't willing to read it objectively?
14:22 < jrajav> It makes valid points.
14:22 < jonpacker> jrajav: what do you think of Haskell
14:22 < mdedetrich> ive read it before, or posts exaclty like it
14:22 < mdedetrich> yes, and they are valid, but at the end of the day, I don't wrote stupid code like that
14:22 < jrajav> jonpacker: It is extremely terse, but the strictness of the language allows that brevity - it never leads to unambiguous situations.
14:22 < Doikor> asadpakistani: you get to choose yourself the amount of instances you start in the cluster
14:23 < mdedetrich> I right MY code to be readable, and at the same time being shorter and easier to code in than JS
14:23 < Doikor> you can start 1000 if you want to even on a single core (no real good reason to do that but you can)
14:23 < jonpacker> I'll assume you mean ambiguous there
14:23 < sinclair|work> mdedetrich: i was looking at sass (the CSS compiler thing) today
14:23 < jrajav> mdedetrich: That's what everyone says in response to such articles, but "I just won't do that" isn't always a counterargument to a clear detriment to maintainability inherent in a language or library
14:23 < mdedetrich> jrajav: and the thing is, you can use that argument in every language
14:23 < jrajav> mdedetrich: Sure, YOU may be skilled enough to avoid it, but that means it may not be an option for a larger team
14:23 < mdedetrich> every language has that problem
14:23 < jonpacker> I admit CS does open the door for writing ambiguous code, jrajav. but it is entirely possible, even easy, to write explicit and readble CS
14:24 < jrajav> mdedetrich: No, some are worse than others.
14:24 < mdedetrich> and my point is, you can do stupid stuff in C and in js as you can in other languages
14:24 < jonpacker> oh, shit, we just bought in the "doesn't work in a larger team argument"
14:24 < jrajav> jonpacker: You think Haskell is ambiguous?
14:24 < jonpacker> I'm out! that means "stupid people can't handle it therefore it's bad"
14:24 < mdedetrich> jrajav: haskell can turn into a mental clusterfuck
14:24 < mdedetrich> incredibly easily
14:24 < jonpacker> jrajav: no, you said "it never leads to unambiguous code"
14:25 < jonpacker> which means "it is always ambiguous". i was assuming you meant the opposite.
14:25 < jrajav> Oh. You're right :P
14:25 < mdedetrich> reading non trivial haskell code can sometimes pop a vein in your brain
14:25 < jrajav> mdedetrich: I'm going to assume that you mean "Some haskell code is difficult to reason about"
14:26 < mdedetrich> well its not just some, but wheather thats due to the style of programmers that haskell attracts versus the language design
14:26 < mdedetrich> is another debate altogether
14:26 < jrajav> Haskell has a high barrier of entry, to be sure, but when you are skilled in it, arbitrary programs are actually much easier to reason about than in most other languages
14:26 < jrajav> That is, in fact, its entire purpose
14:26 < jonpacker> Haskell wouldn't work in a large team either, the only difference it is that it has a big gatekeeper called a compiler that will force the underperforming team member to have a mental breakdown rather than committing poor code
14:26 < mdedetrich> Haskell main's strength is verifiability
14:26 < mdedetrich> tbh
14:26 < jrajav> That's a naive view
14:27 < mdedetrich> its a realistic view
14:27 < jrajav> Its verifiability is a product of its main goals
14:27 < mdedetrich> its the main reason why its used in the world (if at all)
14:27 < mdedetrich> its used in financial sectors, and the defense force
14:27 < mdedetrich> and its used to verify a S3 kernel
14:28 < mdedetrich> in any case, the main point im making is that your claim jrajav, that ALL coffeescript code is ambigious
14:28 < mdedetrich> is crap
14:28 < jrajav> I never made such a claim.
14:28 < mdedetrich> you are heavily implying it
14:29 < jrajav> I am implying that it can lead to more bugs and harder-to-reason-about code than the same app written in Javascript.
14:29 < sinclair|work> jrajav: not true
14:29 < mdedetrich> which isn't entierly true
14:29 < sinclair|work> mdedetrich: cs has source mapping nowadays right?
14:30 < mdedetrich> sinclair|work: not yeah, but as I said earlier
14:30 < mdedetrich> the code translation is incredibly literal
14:30 < jrajav> I think we've hashed it out, and neither of us is going to convince the other - but I would really encourage you to read that article, if only so that you can avoid those situations in your own code
14:30 < mdedetrich> if you can't read JS code from CS code, than your not a programmer
14:31 < sinclair|work> jrajav: i think you are mis informed personally, and based your opinions on stupid know nothing bloggers
14:31 < spion> one of the things I really dislike about CS is variable scoping
14:31 < mdedetrich> jrajav: I havn't done a single thing like that in my code, and CS is my first major entrance into the whole Ruby/CS/Python dynamic programmeing
14:31 < mdedetrich> *programming
14:31 < mdedetrich> CS does have a more flexible syntax than JS (just like ruby)
14:32 < jrajav> sinclair|work: I'm not the only one who thought the article was well thought out. It got upwards of 300 points on HN
14:32 < mdedetrich> which means you can create much nicer JS code, but at the same time make uglier code
14:32 < jrajav> sinclair|work: Did you actually read it?
14:32 < mdedetrich> which is why you have a community that reviews code
14:32 < sinclair|work> jrajav: who cares
14:32 < mdedetrich> and goes 'this is ugly shit, wtf are you doing'
14:32 < jrajav> I thought so
14:32 < sinclair|work> jrajav: thought what?
14:32 < mdedetrich> jrajav: you want an area where js is ambigious and ugly as shit
14:32 < mdedetrich> jrajav: make a templating language in java, or a DSL
14:32 < mdedetrich> and see how ugly it is
14:32 < mdedetrich> and how hard it is to reason in it
14:33 < jrajav> What does that have to do with JS?
14:33 < sinclair|work> jrajav: i get tired of js nazi purists 
14:33 < mdedetrich> I am implying that it can lead to more bugs and harder-to-reason-about code than the same app written in Javascript.
14:33 < mdedetrich> thats your statement
14:33 < mdedetrich> and what I just said, has everything to do with that
14:33 < sinclair|work> jrajav: ive been coding js for over 10 years now, i don't like js
14:33 < jrajav> A templating language in.. Java?
14:33 < mdedetrich> you are making a blind assumption that JS code is always easier to reason and produces less bugs
14:33 < jrajav> You've lost me
14:34 < mdedetrich> *javascript
14:34 < mdedetrich> my bad
14:34 < spion> and yeah, coffeescript gives *way* too much meaning to spaces.
14:34 < jrajav> sinclair|work: It's not my favorite language either
14:34 < sinclair|work> jrajav: so embrace something more sane
14:34 < mdedetrich> I was talking about javascript before
14:34 < sinclair|work> at least until such time js sorts it act out
14:35 < jrajav> You seem to be making a logical error, thinking that my argument that JS -> "More maintainable than Coffeescript" == JS > *
14:35 < mdedetrich> you make a templating language in javascript, or some non trivial dsl, it will be harder to reason about and produce more bugs
14:35 < mdedetrich> than CS
14:35 < Doikor> underscore microtemplates seem to be a good enough template language in javascript
14:35 < jrajav> I'm not really sure I understand that argument mdedetrich 
14:35 < Doikor> some people like ones that do more though.
14:35 < mdedetrich> in fact, thats why stuff like Jade was made, because doing any sought of templating is bloody disguisting
14:35 < sinclair|work> jrajav: no, you are being openly critical about cs based on the wordings of some hipster blogger
14:36 < mdedetrich> jrajav: '	 I am implying that it can lead to more bugs and harder-to-reason-about code than the same app written in Javascript.'
14:36 < mdedetrich> that is wrong
14:36 < mdedetrich> thats what I am saying
14:36 < jrajav> sinclair|work: You are assuming that that is the only basis for my argument and that I have little to no personal experience with the subject
14:36 < sinclair|work> jrajav: also, i cop a lot of crap in this channel for using TS, so im sensitive to this sort of attack
14:36 < mdedetrich> Doikor: underscore microtemplates are also ugly
14:36 < jrajav> mdedetrich: I mean that I don't really understand what makes Coffeescript inherently better for something like that
14:37 < jrajav> sinclair|work: I don't see how that's related. It's a completely different language from coffeescript
14:37 < mdedetrich> because, while that blogger did a nice job showing all of CS' flaws
14:37 < mdedetrich> he didn't show any of its strengths
14:37 < sinclair|work> jrajav:  same principle 
14:37 < hipsterslapfight> is there a good linter for cs?
14:37 < mdedetrich> and one of CS's major strengths, due to its flexible syntax, much like ruby's, is its DSL's
14:37 < vicapow> sword
14:38 < jrajav> sinclair|work: In that it compiles to Javascript?
14:38 < mdedetrich> a templater written in CS is perfectly usable, and not painful
14:38 < mdedetrich> thats the point I am making
14:38 < mdedetrich> in javascript, it would be ugly and error prone, which is why there isnt a javascript templating language that is used out there
14:38 < mdedetrich> its either HTML splicing
14:38 < mdedetrich> or people use something like Jade
14:38 < sinclair|work> jrajav: no, it provides sanity to Javascript
14:39 < mdedetrich> so your statement that JS provides more 'error prone' code generally
14:39 < mdedetrich> is inorrect
14:39 < hipsterslapfight> there's a lot of js templaters mdedetrich, unless i'm misunderstanding you?
14:39 < vicapow> hey guys. i made a thing that's kind of like a search engine for nom. http://nodejs.clickb.in/browserify/user%20substack/
14:39 < jrajav> To be clear, Typescript and Coffeescript aren't "addons", they're wholly separate languages that draw from (and compile to) Javascript
14:39 < vicapow> npm*
14:39 < mdedetrich> hipsterslapfight: I am talking about something like this
14:39 < Doikor> mdedetrich: i dont rate things by how beatiful they are. just how easy to use they happen to be. I found it much easier to teach someone to use something like underscores templates then jade if all they knew beforehand was html
14:39 < mdedetrich> hipsterslapfight: http://coffeekup.org/
14:40 < sinclair|work> jrajav: and wraps prototypes and other boring to write js fluff with a concise syntax that...makes sense
14:40 < mdedetrich> hipsterslapfight: not something where you write a html string with some parts getting replaced (like moustache)
14:40 < sinclair|work> jrajav: and, if its anything like TS, provides fair decent compiler options for different environments
14:40 < Doikor> not everyone who uses templates is a programmer (we've had designers touch those to make their css more sane)
14:40 < mdedetrich> thats fine, the point I am making
14:40 < sinclair|work> jrajav: and yes, it because it compiles to JS
14:40 < mdedetrich> is that you can't make a blanket statement
14:40 < spion> sinclair|work, i am slightly out of the loop with TS - are sourcemaps in the works? :)
14:41 < mdedetrich> that JS is less error prone
14:41 < sinclair|work> spion: they are ready now
14:41 < mdedetrich> its simply not correct
14:41 < mdedetrich> people may prefer javascript, thats fine
14:42 < mdedetrich> but if you do stupid things in JS, it becomes very error prone, because at the end of the day, errors are something that is made by humans, and humans make errors (more often than usual) when they are doing something in the language that is retarded
14:42 < jrajav> I agree
14:42 < mdedetrich> so in javascript, all of the {} you would be throwing around in trying to do something like coffeekup
14:42 < jrajav> And JS has a lot of really silly semantics
14:42 < mdedetrich> would be loads more erorr prone
14:43 < mdedetrich> you would be tracking bracers everywhere, especially with the function syntax
14:43 < jrajav> I consider braces to be assets, not liabilities, in real code
14:43 < mdedetrich> coffeekup is as real code as is any other code
14:44 < spion_> oh, TS has sourcemaps now.
14:44 < jrajav> Maybe, but it's certainly not representative of normal code
14:44 < mdedetrich> and my jade is starting to look more like that because my templates are not trivial flat html
14:44 < mdedetrich> jrajav: thats ur opinion
14:44 < jrajav> You think a comprehensive HTML templater is representative of code, on average?
14:45 < sinclair|work> spion: its a compiler option, not well documented (unless you dig through the compiler cli code for it)
14:45 < mdedetrich> in the site I am making, the code in templating is as complicated (if not more) than as it is with the webserver
14:45 < mdedetrich> I have a lot of complicated client side rendering (its a SPA)
14:45 < spion_> sinclair|work, that definitely makes me reconsider it
14:45 < spion_> :)
14:45 < mdedetrich> that kind of crap would be so ugly in JS
14:45 < mdedetrich> it wouldn't be funny
14:45 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:46 < jrajav> mdedetrich: Sounds like it's not very modular
14:46 < sinclair|work> spion_: i havent needed it so far, but its a nice to have
14:46 < mdedetrich> jrajav: it is modular
14:46 < hipsterslapfight> i let underscore do my client side templating for me
14:46 < mdedetrich> its just complex, because its doing complex things, ui elements are drawn quite differently depending on whats gotten from server
14:46 < mdedetrich> etc etc
14:46 < mdedetrich> and at this point, tbh, you are making excuses
14:47 < jrajav> .. You think I'm still trying to make my point?
14:47 < jrajav> I already made it
14:47 < jrajav> You're the one blathering on about this hyper-specific "counterexample"
14:47 < mdedetrich> its not hyperscefic, unless you are calling jade hyperspecific
14:47 < sinclair|work> jrajav: have you actually used coffeescript ?
14:47 < jrajav> Yes.
14:48 < mdedetrich> *hyperspecific
14:48 < sinclair|work> jrajav: have you used python ?
14:48 < jrajav> Yes?
14:48 < sinclair|work> jrajav:  so whats the problem ?
14:48 < jrajav> If you haven't been following, I'm not gonna catch you up
14:48 < sinclair|work> jrajav:  i can't work out why you think cs is so bad
14:49 < sinclair|work> jrajav: ive been reading, but everything you said is a over reaction to minor things
14:50 < sinclair|work> coffeecup_: its no where near as bad as you say, if anything it helps you write correct js, not botched hacked (look what i made) script
14:50 < sosnon> hello; 1) is there a way to have more of the readline goodness with the node repl (like Ctrl-l, for instance)?  2) is there an online documentation/help system for the repl (like help and help(foo) in python)?  3) what is the 'best'/recommended node repl so far?
14:51 < mdedetrich> the thing is jrajav, and it the massive thing you are forgetting
14:51 < sinclair|work> coffeecup_: sorry mate, that was directed at jrajav 
14:51 < mdedetrich> I follow a few projects written in CS
14:51 < mdedetrich> and I basically do not see shitty code like that
14:51 < jrajav> sosnon: You could try https://github.com/Benvie/Node.js-Ultra-REPL
14:51 < mdedetrich> except in blog posts of people complaining about how apparently bad CS is
14:52 < mdedetrich> at the end of the day, the people that write in CS take pride in making their code readable and nice to understand, its the whole point of ruby which is what CS is inspired off
14:52 < mdedetrich> so if you make your code look like that, your a god damn idiot
14:52 < Doikor> i take pride in making my javascript readable and nice to undestand.
14:53 < mdedetrich> and thats fine, but as is pointed out
14:53 < mdedetrich> and the reason why ruby is so popular, is because the langauges have such flexible syntax
14:54 < mdedetrich> you can basically write 'readable' pieces of code that would look like crap in other languages
14:54 < Doikor> and ive seem some python coders write some truly horrible CS code due to them not understanding how javascript/dom works in general
14:54 < mdedetrich> (and what often happens in that situation, is they create another format/language and a parser for that)
14:54 < Doikor> they just wanted to add some "ajax magic" to the page...
14:54 < sosnon> jrajav: funny, ultra-repl installs itself in /usr/local/bin/ as 'ultra-repl', but does not include a hashbang line; that is not supposed to be like that, is it?
14:55 < Benvie> oops
14:55 < sinclair|work> jrajav: also, those examples in that blog are perfectly readable, im from the same background as the author, and i don't even code coffeescript..... 
14:55 < mdedetrich> Doikor: yup and are idiots
14:55 < Benvie> I'll fix that sosnon
14:55 < mdedetrich> Doikor: and such code wouldn't be seriously considered
14:56 < mdedetrich> the difference in, CS can write much nicer code in situations js simply cannot
14:56 < mdedetrich> its hard to say the reverse
14:56 < Doikor> thats how i've seen most web devs treat js/cs
14:56 < Doikor> they dont bother to learn it. they just want to add some nice little script to their site
14:56 < Doikor> and do that for 2-3 years and its going to be completely unmaintanable
14:57 < sosnon> Benvie: snapshots seem to indicate you're not much of a unix guy ;) also, "sosnon: ..." is better than "..., sosnon" or "... sosnon" for most clients
14:57 < sosnon> Benvie: sorry for schooling you
14:57 < Benvie> no the problem is
14:57 < mdedetrich> Doikor: I don't see that hapenning
14:57 < Doikor> mdedetrich: it happens. alot
14:57 < mdedetrich> also http://ceronman.com/2012/09/17/coffeescript-less-typing-bad-readability/#comment-150 comments bangs it straight on the head
14:57 < Benvie> this wasn't meant to be published, this version of the bin
14:58 < mdedetrich> odds are, if your code is unmaintable in cs, you would fall into the same boat with javascript
14:58 < Doikor> well ofcourse they would
14:58 < Doikor> the problem is more that they dont know how javascript/dom works
14:58 < Doikor> and thus writing cs is impossible then
14:59 < mdedetrich> thats not cs problem
14:59 < Doikor> they just go "ooh this looks like python/ruby ill write it like that"
14:59 < Doikor> though people do that with javascript too. "this looks like c/java ill write it like that"
14:59 < Doikor> mdedetrich: never said it was.
15:00 < mdedetrich> well we are on the same page then
15:00 < mdedetrich> sinclair|work: in any case, I would have more of a reason to use TS if all JS libraries were in TS
15:00 < mdedetrich> sinclair|work: and in such a case, I would vastly prefer scala
15:01 < sinclair|work> mdedetrich: you know about declarations right ?
15:01 < sinclair|work> mdedetrich: TS declaration files ?
15:01 < sosnon> Benvie: well, for some reason it tries to run /usr/local/lib/node_modules/ultra-repl/bin/putty.exe even on linux; so only windows support intended?
15:01 < mdedetrich> sinclair|work: yeah and??
15:02 < sinclair|work> mdedetrich: they let you consume js in a dynamic or static way
15:02 < mdedetrich> sinclair|work: yeah but unless you are telling me there is a decleration file for every library
15:02 < sinclair|work> mdedetrich: i've written several
15:03 < sinclair|work> mdedetrich: for node, threejs, async 
15:03 < sinclair|work> and others
15:03 < Sly> mdedetrich: <3
15:03 < mdedetrich> which becomes a pain when internals for the library changes
15:03 < mdedetrich> and whatnot
15:03 < mdedetrich> as I said, my opinion is that its just not worth the trouble
15:03 < sinclair|work> mdedetrich: so, don't use them at all
15:03 < sinclair|work> mdedetrich: you are not forced into it
15:03 < mdedetrich> in which case I wouldn't use TS at all
15:03 < sinclair|work> its a nice to have
15:03 < Doikor> sosnon: there exist a unix port of putty maintained by the guy who makes putty. though i dont think the executable is called putty.exe
15:03 < mdedetrich> as there is little point
15:04 < mdedetrich> so we are at square one
15:04 < sinclair|work> mdedetrich: source maps, a compiler that runs in js, 
15:04 < Benvie> yeah
15:04 < sinclair|work> mdedetrich: amd and commonjs module targetting, 
15:04 < Benvie> like I said
15:04 < Benvie> it wasn't supposed to be published
15:04 < Benvie> I'm fixing it now
15:04 < sinclair|work> mdedetrich: access to compiled ts AST 
15:05 < Benvie> putty is to bring support for windows people up to where it is for linux mac people
15:05 < mdedetrich> sinclair|work: eh?
15:05 < sosnon> Doikor: it should never be the goal to have to run putty just to get a terminal-emulator on *nix systems, especially if node itself runs fine on the platform itself
15:05 < Benvie> it's to get a terminal emulator on a Windows system
15:05 < Benvie> the bug is that it's launching on not windows
15:05 < sinclair|work> mdedetrich: im listing a few reasons for you
15:05 < sinclair|work> in case you weren't aware of them
15:05 < mdedetrich> coffeescript also has all those things
15:05 < context> sosnon: windows doesnt have anything i would consider 'a terminal' so its kind of a requirement.
15:05 < Benvie> on Windows Ultra-REPL makes heavy use of 256 colors
15:06 < Sly> mdedetrich: Is this guy still talking about TypeScript?
15:06 < Benvie> er on every platform
15:06 < sosnon> context: did you even read my statement (sorry for the harsh tone)
15:06 < sinclair|work> Sly: im talking to mdedetrich about Coffeescript actually
15:06 < Benvie> on Windows the experience is severely limited if you use cmd
15:06 < Benvie> though it is supported
15:07 < sinclair|work> mdedetrich: i wasn't aware you had access to coffeescript ast
15:07 < sosnon> well, ultr-repl isn't widely used so far then? are people using the standard node repl then?
15:07 < mdedetrich> you can make source maps to cs
15:07 < mdedetrich> and it does have an AST
15:07 < Benvie> you can just `require('ulra-repl')()` to run it on non-windows
15:07 < mdedetrich> *for cs
15:07 < context> ive never even heard of ultra-repl
15:07 < Benvie> it has a few hundred watchers on github
15:07 < Benvie> it's not the default one
15:07 < Benvie> node has a built in one
15:08 < sinclair|work> mdedetrich: the thing about ts i like, is that i can compile ts from node, and reflect type information out of it
15:08 < Benvie> ultra-repl is the one that's the best which is what you were asking for, but I screwed up the last npm publish
15:08 < Doikor> context: powershell is a good terminal on windows
15:08 < Doikor> just that its not a unix terminal
15:08 < sinclair|work> mdedetrich: which would be awesome for automating various things from node
15:08 < context> doikor: ill stick to my mac ;)
15:08 < Benvie> https://github.com/Benvie/Node.js-Ultra-REPL
15:08 < mdedetrich> eh, yeah i suppose
15:08 < mdedetrich> in any case, its 2 am, im going to bed
15:09 < sosnon> i'm asking since for python ipython has become quasi-standard and for ruby it's pry, but for node there does not seem to be such a quasi-standard repl yet, so ultra-repl would find a niche there
15:09 < jrajav> If you want a term emu on Windows, get msys + mintty
15:09 < bradleymeck> 100 line file with 20 lines of require, i think its been decoupled enough
15:09 < Doikor> well i do use mac at work too but i've been able to get all my terminal/scripting work done just fine in powershell
15:09 < jrajav> (Mintty is Putty's terminal without getting putty)
15:09 < Doikor> you just have to learn it
15:09 < sinclair|work> mdedetrich: cool mate, nice chatting
15:09 < Doikor> (have a windows box at home)
15:09 < mdedetrich> sinclair|work: https://github.com/michaelficarra/CoffeeScriptRedux
15:09 < mdedetrich> thats a remake of the CS compiler thats currently being done
15:10 < mdedetrich> which provides a complete AST, as well as source maps
15:10 < thomas`-> Hey guys. I was just wondering if any of you happened to know if there is any possible way I can get the domain name a newly connected user used to connect to a SOCKET.IO listener?
15:11 < sinclair|work> mdedetrich: looks good, hopefully it can offer some new features syntactically also
15:11 < thomas`-> io.sockets.on("connection", function(socket) {  /** get the domain name here. Possible?? **/ }
15:13 < sosnon> bradleymeck: ok, requiring it works fine; maybe you want to include a platform test somewhere, i think child_process.exec/execFile does it, can't remember; anyway, you don't intend to provide readline functionality, do you? at least there is none for me; even the default node repl provides basic cursor jumping
15:13 < sosnon> Benvie: meant as constructive criticism
15:13 < Benvie> yeah I actually just published that
15:13 < Benvie> what you said
15:14 < Benvie> it has that
15:14 < Benvie> if you go into the ulra-repl directory in node_modules and then go into settings, you'll find three files with the configuration
15:14 < Benvie> in controls.js it's a giant keybind file 
15:15 < Benvie> so you'll see for example
15:15 < Benvie> 'Word Left': keybind('ctrl+left'),
15:18 < sosnon> Benvie: for some reason i get "Error: Cannot find module 'repl-rainbow'"; package.json lists it as dependency, though; maybe the version number is off?
15:18 < Benvie> hm
15:19 < Benvie> maybe npm doesn't like the tilde anymore
15:21 < sosnon> Benvie: http://blog.nodejitsu.com/package-dependencies-done-right
15:22 < Benvie> yeah I stopped using ~ and changed to >= a while back but I didn't update that I guess, I just changed it and published it
15:24 < sosnon> Benvie: i hate saying it, but ultra-repl bumped me back a few times now; 1) no sensible default keybindings for linux 2) running a simple 'console.log("foo");' doesn't print anything 3) ... (already fixed); again: meant as constructive criticism
15:25 < Benvie> it does have sensible keybindings for linux because I use it on linux, so the issue with that is something other than the settings
15:26 < Benvie> console.log should work somewhat but it's not the ideal way to do output something
15:26 < sosnon> also, the worst of all UX mistakes (almost): no sane way of exiting it... Ctrl-d? Wrong. Ctrl-c? Wrong. 'quit'? Wrong. 'exit'? Wrong. 'quit()'? Wrong 'exit()'? Wrong. ... process table + sigkill? finally!
15:26 < Benvie> simply write the object
15:27 < Benvie> escape
15:27 < Benvie> but that's a good point
15:27 < Benvie> I'll make ctrl+c on non-windows do it
15:30 < sosnon> Benvie: 'simply write the object'; this behaviour differs from the default node repl, so "To begin with it has all the features Node's built-in REPL does." is not 100% true
15:30 < Benvie> no it's not
15:30 < Benvie> if you do `this`
15:30 < Benvie> in node's repl it outputs the object
15:31 < Benvie> there is a different model for outputting things in ultra-repl than node's. Node's simply contrinues writing down infinitly, so if you use console.log then it'll be in the stream
15:31 < Benvie> ultra-repl is paged, so you can go up and down and it won't continue writing forever. This means the output area isn't simply a stream that can be continually written to
15:32 < Benvie> it's like trying to use console.log in vim
15:32 < sosnon> well, if i run "console.log('foo');" in the default repl i get both, "foo" and "undefined", in ultra-repl, the same just returns "undefined"; it's just confusing, that's all
15:33 < Benvie> although I thought I did make it so it'll make an effort to capture console output and print it like you'd expect
15:33 < Benvie> but I guess that's not having the desired result
15:35 < sosnon> also: running it in a terminal emulator and exiting it using "Esc", it will clutter up the terminal; this is common mistake with ncurses, but as far as i can see ultra-repl does not use it; unpleasant anyway
15:36 < sosnon> this is all 'surface' stuff, but, as i said, it makes the usability less great... and in the end i want the repl to be a great interface for the iterpreter (personal opinion, though)
15:39 < sosnon> also i don't know how to access (tab) completion; well, i guess i should read the docs/source for those basic things before using it
15:40 < sosnon> also there should be a space before the cursor in the input line; also the blue cursor in the 'output area' is confusing; well now i'm just on a rant trip, sorry
15:41 < sosnon> but i guess i'm the only one having this much trouble them
15:41 < sosnon> *then
15:44 < Benvie> haha
15:44 < Benvie> yeah no you're right
15:44 < Benvie> ultimately I've been working on offshoot of this
15:45 < Benvie> the problem was I wanted to do too much with the console interface and the net result was I've been working on a web interface with the same goal
15:45 < Benvie> which you can see here http://benvie.github.com/continuum/
15:45 < Benvie> although it's not currently in use for a node console
15:45 < spion_> cool.
15:45 < Benvie> that's one of the planned uses for it
15:45 < spion_> have you thought of an editor that has a REPL at hand?
15:46 < spion_> and convenience shortcuts to send blocks/functions to the REPL
15:46 < Benvie> my goal is to merge the two
15:46 < Benvie> that's exactly what I want to do
15:46 < Benvie> that's why continuum is a full javascript virtual machine
15:46 < spion_> that would be extremely useful
15:46 < Benvie> that way execution can be rewinded, or branched, and you can edit code at the AST level
15:46 < Benvie> like drag and drop or copy and paste
15:47 < Benvie> I'm working on the AST as code editor interface right now
15:47 < sosnon> same 'mistake' with the web interface when running "console.log('foo');" ;9
15:47 < sosnon> ;)
15:47 < Benvie> you have to import the console there currently
15:47 < sosnon> the scrollbar looks cool, though; it's like a futuristic spaceship
15:48 < Benvie> thanks for the reminding me
15:48 < Benvie> been meaning to make the console included by default
15:48 < Benvie> currently it's
15:48 < Benvie> `import console from '@std'`
15:49 < Benvie> originally I was trying to make a pristine ecmascript global environment
15:49 < Benvie> but now I'm going to start adding normal stuff by default
15:49 < Benvie> er nope I mean
15:49 < Benvie> module console = '@console'
15:49 < sosnon> ok, bottom line; i'll stick to the default repl, but as soon as ultra-repl should ship with sane defaults/usability, i will consider switching
15:49 < Benvie> in es6 terms
15:50 < Benvie> yeah
15:50 < Benvie> I need to hook continuum up to ulra-repl hmm
15:51 < Benvie> you pretty much just have tried to do every thing that is a weakness in it currently lol
15:51 < MI6> joyent/libuv: Shane Holloway master * 5d92ccc : windows: add flag for hiding windows created by a spawned process  Closes - http://git.io/_eZf-w
15:51 < Benvie> hopefully you're employed somewhere as a breaker of things
15:52 < khmer_> there were some lovely folks helping me last night and i had to go, so thanks to them first of all, and second, anyone want to give me a hand with an npm bin problem?
15:53 < khmer_> here's my pastebin: http://pastebin.com/ijmqw3fr
15:53 < khmer_> the goal is to get my library installing well on all platforms including windows, and installing a bin shortcut so you can just run the command instead of "node command".
15:53 < khmer_> doesn't work in windows and i can't seem to figure out why
15:58 < matbee> IRC I need your help to stay in the global startup battle competition ;) lets vote for my nodejs project: http://vote.groupnotes.ca (contest ends tonight)
15:59 < Tobsn> This is just for our fans on Facebook.
15:59 < Tobsn> To become a fan and get access, click the Like button above!
15:59 < Tobsn> yeah fuck that.
15:59 < niggler> woah woah woah facebook is blocked
15:59 < niggler> by blocked i mean i added it to my /etc/hosts and point it to localhost
15:59 < sosnon> "hopefully you're employed somewhere as a breaker of things" - is that a complement? ;)
15:59 < sosnon> Benvie: ^
15:59 < Benvie> haha basically
16:00 < Benvie> you're really good at it =D
16:00 < niggler> sosnon that's an invaluable job
16:00 < sosnon> Benvie: i didn't have a single look at the code so far, though, hah
16:00 < stagas> khmer_: did you install latest node from nodejs.org ?
16:01 < Benvie> good cause I'm not particularly proud of ulra-repl's code at this point ;)
16:01  * sosnon tries to break niggler's stupid irc handle 
16:01 < niggler> you can't break that which has been broken
16:01 < khmer_> stagas: i'm trying to get it to work in ~0.6.17
16:01 < rump> life saver, 7.2.1: http://book.mixu.net/ch7.html
16:03 < stagas> khmer_: obviously some issues with 0.6 and bins, try installing latest 0.8 and install again, the generated files look quite different here
16:03 < stagas> khmer_: which means it probably won't work on 0.6
16:03 < khmer_> stagas: ok, fair enough, i'll give that a shot
16:03 < sosnon> ok, so besides ultra-repl there is no real enhanced node repl like ipython/pry (color, ...), is there?
16:05 < sosnon> and there is no built-in/pluggable help system for the node repl, is there? or at least some way of viewing/searching the API reference on the command line/locally?
16:05 < niggler> sosnon there's autocompletion
16:06 < sosnon> niggler: which is not documentation/a help system
16:07 < niggler> in all likelihood the function you are looking for is sufficie
16:07 < niggler> *sufficiently simple that it appears
16:07 < niggler> like 'readFile'
16:08 < sosnon> something like help('http.Agent') => "Starting with Node.js 0.5.3, there's a new implementation of the HTTP Agent which is used for pooling sockets used in HTTP client requests...." would be nice
16:09 < sosnon> niggler: sure, but it doesn't say anything about the function's signature, and especially with js this is crucial to know
16:09 < khmer_> stagas: sure enough. thanks for letting me now
16:09 < niggler> sosnon that sounds like something that you would find in the change log
16:09 < khmer_> stagas: i didn't want to unthinkingly upgrade, since i was *hoping* to get this running on legacy versions
16:09 < khmer_> stagas: thank you again
16:09 < niggler> lol function signature
16:10 < sosnon> niggler: it was a bad example since the docstring is a bit weird
16:11 < niggler> you'd also need to devise a standardized docstring format
16:11 < niggler> and there are many such formats in the wild
16:12 < niggler> question: anyone here work for a company?
16:12 < drudge> i do
16:12 < niggler> so when you write code, does it belong to you or the company?
16:12 < rmill> niggler: usually the company.
16:12 < shanse> company usually
16:12 < rmill> depends on your contract, really.
16:12 < drudge> niggler: company
16:12 < niggler> im debating whether to use https://github.com/stephen-hardy/xlsx.js/blob/master/xlsx.js or just write my own
16:13 < sosnon> well, at least some sort of documentation format for the command line would be nice; maybe just manual pages for the different modules or something; but there is no such thing yet, right?
16:14 < thomas`-> Is there any reasons why functions defined in my main file are "Undefined" in other files, but arrays defined in there are accessible?
16:14 < niggler> (things are so much clearer when there's a very clear IP agreement in place, but the whole practice of putting code up online makes the issue confusing)
16:15 < drudge> niggler: if i write code on my own time with my own equipment it is mine, and i grant them a royalty free license to use it
16:15 < drudge> so i generally do that with things i want to open source
16:15 < niggler> that's not necessarily true " if i write code on my own time with my own equipment it is mine" (depending on jurisdiction)
16:16 < niggler> in the particular case, its on some person's github yet it says copyright Microsoft Corporation
16:16 < drudge> niggler: that is in my agreement anyway, it would vary
16:19 < niggler> and in terms of open source licenses
16:20 < niggler> there's GPL and friends
16:20 < niggler> and there's BSD and MIT
16:20 < niggler> what do you generally use?
16:21 < drudge> I use MIT
16:21 < mscdex> MIT
16:21 < thomas`-> Hey why are variables shared between files, but not functions?
16:25 <@mbalho> module.exports = function() {}
16:28 < thomas`-> mbalho, is there any other way as this method you have proposed creates a problem in my app
16:29 < sosnon> while we're at module setup, are there node-specific patterns on setting up 'classes'/instanciable objects (well, prototypes...) and multiple inheritance in node/#node.js or do all the basic js patterns/styles still apply in the node universe?
16:29 < thomas`-> because Im sharing the variables and functions with both node and my client user using: eval(fs.readFileSync("/Path"))
16:32 < timeturn> emitter will never be backwards compatible < 0.9 is it?
16:33 <@mbalho> sosnon: node doesnt have anything special other than require('util').inherit(sourceprototype, targetprototype)
16:37 < sosnon> sure, that's the language, but there are no 'unification efforts' so far; for instance a certain agreement on how to do inheritance in general or that both, Foo constructor and "Foo.prototype = ..." should be wrapped in another function or ... or ...
16:38 < sosnon> i mean there is the node styleguide http://nodemanual.org/latest/nodejs_dev_guide/ecma5_in_nodejs.html but it does not really address such 'more advanced' topics
16:39 < flexd> Uh, could someone tell me I am doing this in a very stupid way? https://gist.github.com/c2907fc057acb4c023ce
16:39 < flexd> I know I am, I would very much like some comments as to how to improve it )
16:39 < flexd> :9
16:39 < gkatsev> flexd: "you are doing this in a very stupid way"  yw
16:39 < flexd> currently it also does not exit when it's done :D
16:39 < gkatsev> :P
16:39 < flexd> gkatsev: constructive comments about my stupid ways p
16:39 < flexd> .p
16:39 < flexd> :P
16:40 < gkatsev> I did exactly as you instructed!
16:40 < flexd> argh, what idiot spilled coffee or something all over this keyboard :( the dangers of not having a set desk at work.. :/
16:40 < sosnon> flexd: for a start, i would put all the requires in the head
16:41 < flexd> Oh, right. That's more a result of gradually building it up, but thanks :)
16:41 < sosnon> flexd: double newlines between functions
16:41 < flexd> It's a bit odd wanting things to happen in sequence when node inheritly is asyncronous, I was hoping there was a better way than this
16:41 < sosnon> that's cosmetics, though
16:42 < flexd> I feel like the whole async.series() call is a bit of a hack.
16:43 < newnoder> hi
16:43 < flexd> I NEED to select the database, then clear the table and then insert things. they can't really happen in paralell :/
16:43 < sosnon> flexd: well, you always have to handle CRUD in a synchronous fashion in some way, but node can help you reduce access time to the longest of all the CRUD-like calls (optimal assumption)
16:44 < newnoder> I want to know any of you using cloud9 for node development
16:44 < newnoder> and if there's any community of people collaborating on it using cloud9
16:45 < nathan7> I tried cloud9 and I fail to see the appeal
16:45 < sosnon> flexd: you can ensure this by calling them in the right order, so don't pass requests down too far in your abstraction layers; in general the funcs look fine to me ()
16:45 < sosnon> flexd: (just call them in the right order)
16:45 < sosnon> untested, though
16:46 < flexd> I tried that, which means they all happen at once. :P
16:47 < flexd> It will return from selecting the DB long before it's done, and you get errors
16:53 < newnoder> nathan... but what about collaboration and learning?
16:53 < rektide> hi ho #node.js
16:54 < Leeol> Well fine then, don't stay logged in after you ask a question. I was going to comment on C9 :s
16:55 < Leeol> nathan7: I'm curious though, do you not see the appeal of web based development? Or C9 specifically?
16:55 < Leeol> nathan7: Eg: Do you have the same thoughts about Koding.com ?
16:55 < nathan7> Leeol: I think web based development *could* rock
16:55 < Leeol> nathan7: (I ask about Koding.com as it's down.. lol)
16:55 < nathan7> :(
16:56 < nathan7> Leeol: I live in the console. I have a zillion copies of vim open in different projects at any given time.
16:56 < Leeol> nathan7: Koding is in very early beta, but if you haven't heard of it give it a go. It's quite nice (all be it, rather slow during this early beta)
16:56 < Leeol> And in fairness, this is the first outage i've seen since i started two weeks ago
16:57 < nathan7> Leeol: Part of the issue is that I don't like relying on having an internet connection
16:58 < nathan7> Leeol: don't take that wrong - you're talking to someone whose time without an internet connection is usually measured in minutes
16:58 < Leeol> nathan7: Koding's console is far better than Cloud9's, imo. Though, i'd still say it is unlikely to fit your heavy terminal needs, as it's not *that* good yet, imo
16:58 < nathan7> I think vim is imperfect and I think we can do better
16:59 < niggler> nathan7 you don't grok vim
16:59 < nathan7> emacs can do everything and the kitchen sink and this has some appeal, but it's fairly heavy
16:59 < nathan7> niggler: I use vim for everything.
16:59 < nathan7> niggler: I like vim.
16:59 < nathan7> niggler: I don't believe it is the maximally perfect editor of all time
16:59 < Leeol> nathan7: Oh no, i completely understand. Prior to Koding (two weeks ago) i was subscribed to Cloud9 for 9 months. The biggest feature they did for me, was C9-Offline. It is so frustrating to be blocked by a connection, or server maint, or w/e. 
17:00 < nathan7> Leeol: You can't really do git like that and stuff
17:00 < niggler> C9 has many issues
17:00 < Leeol> niggler: Agreed
17:00 < Leeol> nathan7: Git? Why can't you?
17:00 < nathan7> Leeol: vim and git are the main components of my dev environment for anything
17:00 < nathan7> Leeol: git in the browser?
17:00 < nathan7> Leeol: without serverside logic?
17:00 < niggler> the problem with using git is that there are too many workflows for a web ide to adapt to
17:01 < nathan7> Yes.
17:01 < Leeol> nathan7: What are you talking about? There is server logic in both C9 and Koding
17:01 < Leeol> nathan7: They give you a VM
17:01 < nathan7> Leeol: Yes
17:02 < nathan7> Leeol: Now I am on a train in Germany and I have no internet.
17:02 < Leeol> nathan7: Well that is what i was saying, C9-Offline was great for that
17:02 < nathan7> Leeol: what about the git bit?
17:02 < Leeol> It's way too early to call it feature complete (eg: No proper syncing), but it's still nice
17:02 < drunkgoat> hey everyone. my scenario is this: when a user requests for a file, i'm checking with fs.exists if this file exists on the server. if it is not, i'm getting it from amazon s3 and when the stream ends i'm sending the file. then, i want to set a timer to delete the file in the near future (there is some caching because i'm expecting that other users will request the same file in the near future). 
17:02 < drunkgoat> now, i'm afraid that when a user A is done getting the file, the timer starts. then, when user B is still downloading the same file it could be deleted by user A's timer. does this makes sense to you? how would you solve this? thanks
17:02 < Leeol> nathan7: C9-Offline uses your local box
17:03 < Leeol> nathan7: So you still have server logic, it's just that your server logic takes place on your box, instead of theirs
17:03 < nathan7> Leeol: hm
17:03 < nathan7> Leeol: I might as well work on my machine then
17:04 < niggler> ive been playing with gateone and its pretty slick
17:04 < Leeol> nathan7: git/etc will work the same as it does in the cloud, though, maybe not for windows. A *!huge note!* though, C9_Offline is currently a joke of a feature, it's far from feature complete :P
17:04 < drunkgoat> (the timer deletes the local file, not the one on s3)
17:04 < niggler> http://liftoffsoftware.com/Products/GateOne
17:04 < nathan7> Leeol: mhm
17:04 < Leeol> nathan7: Well the idea is you work on C9 (so you get the features/etc you like on C9), and then if you plan on going offline, you hit one button. 
17:04 < Leeol> nathan7: Now, you work the same.. except you happen to be working from your box, instead of theirs
17:04 < nathan7> The GateOne dude came in here or ##javascript once
17:05 < nathan7> And then the demo broke on my machine
17:05 < niggler> yeah that's when i discovered it nathan7 -- ive seen some quirks mixing it with tmux/screen but for small bursts its perfect
17:06 < ppppaul> hey guys
17:06 < Leeol> nathan7: Sure, you can argue that "you may as well be on your box from the beginning", but then why were you on a web-dev-environment in the first place? In concept, assuming the Cloud9 crew makes C9-Offline worth your time, it's really the best possible workflow in the given scenario.. again, assuming you like the "cloud" dev thing.
17:06 < ppppaul> i need some help with connect sessions
17:06 < nathan7> mhm
17:06 < Leeol> nathan7: But yea, as it stands now, i would not recommend c9-offline.. or c9 as a whole, heh.
17:06 < nathan7> vim could be better but the answer does not lie in moving to the browser for me
17:07 < ppppaul> my cookies/ID keeps changing on every request
17:07 < ppppaul> my sessions are being stored, but they aren't being used because the cookies keep changing
17:08 < Leeol> nathan7: Yea, i'm not arguing *for* moving to the web, it's got a long ways to go. It's nifty, and it is the future (imo), but we're not there yet. 
17:14 < bradleymeck> Leeol: once i can ssh into c9 and have them manage my projects with a vfs and rsync to local i will care much more, but for now its fairly nice and the refactor tools for JS are starting to show p
17:14 < bradleymeck> up*
17:14 < flazz> is there a node based deploy tool like capistrano?
17:15 < Leeol> bradleymeck: I thought you could currently ssh into c9, no?
17:15 < bradleymeck> Leeol: you can tunnel and stuff, but not quite the same
17:15 < Leeol> Ah
17:16 < Leeol> bradleymeck: Koding (imo) gives you a far better/fuller VM, so perhaps try with them (though Koding is *really early beta*)
17:16 < bradleymeck> don't really want/need a vm, just vim and rsync to be full featured, rsync is the killer
17:17 < Leeol> Gotcha
17:17 < thomas`-> in the node.js engine, is it possible to extend an array by multiple keys in 1 line?
17:17 < bradleymeck> thomas`-:  .push(x,y,z) ?
17:17 < thomas`-> hm lemme check
17:18 < Astoboy> ciao
17:18 < Astoboy> !list
17:18 < thomas`-> ah cool, thanks it seems to be what i needed
17:22 < Kakera> why doesn't request auto-detect UTF-8 in http://google.com/search?q=1234&hl=ru ?
17:23 < MI6> joyent/node: piscisaureus created branch balance - http://git.io/srpTKQ
17:28 < flexd> sosnon: About this again, https://gist.github.com/5fb8e92a5825e0e3b988 , any idea how I can know if the CSV file is finished reading/all the queries have been executed?
17:28 < Kakera> superagent fails too
17:28 < flexd> Or anyone else, hm.
17:29 < flexd> the readers 'end' event happens like 3 times, and it's not when it's done inserting
17:29 < flexd> I kind of need to figure out when it's all done so I can exit the process/script :/
17:33 < ryanrolds_w> flexd, It looks like you're calling r.end(). I don't thin you need to do that, it should emit 'end' on it's own.
17:33 < ryanrolds_w> Also, your callback invoke needs to go in to the on 'end' listener.
17:34 < flexd> hm, the r.end() bit kind of ended up there after a bit of frustration.. you might be right
17:34 < flexd> checking it out :)
17:34 < flexd> It's still logging "How often does this happen" long before it's done importing them though
17:34 < ryanrolds_w> Right, because you're calling r.end().
17:35 < ryanrolds_w> Which emits an 'end' event.
17:35 < flexd> No, without that.
17:35 < ryanrolds_w> One fewer end or the same number as with it in?
17:35 < flexd> Because that's the end event of the CSV reading
17:35 < flexd> One fewer end, but the SQL stuff is still going
17:35 < deanclkclk> hello folks
17:35 < misterhat> hi
17:35 < deanclkclk> I have a question
17:35 < deanclkclk> I am trying to install node.js on my windows 8 PC
17:35 < ryanrolds_w> Ok, what about the callback, have you moved that in to you're end handler function?
17:35 < flexd> Yes
17:35 < flexd> rerunning it as we speak, 5 secd
17:36 < deanclkclk> I am getting windows installer could not be accessed
17:36 < flexd> s
17:36 < deanclkclk> any ideas?
17:36 < flexd> ryanrolds_w: just stop at 100% like before.
17:36 < ryanrolds_w> Is it possible that the db calls are finishing after the end is emitted?
17:37 < flexd> they most likely are yeah, but shouldnt it finish once they have completed?
17:37 < ryanrolds_w> The steam will most likely finish reading and end before your pile of db calls are all done.
17:38 < ryanrolds_w> You may want to look at using something like async.queue to pop the inserts in to the queue and once the queue is done then invoke the callback.
17:38 < niggler> deanclkclk get another OS
17:38 < flexd> ryanrolds_w: I was actually looking at that
17:38 < ryanrolds_w> https://github.com/caolan/async#queue
17:38 < flexd> Maybe that's a good idea.
17:39 < flexd> I sort of feel like I am doing the whole progressbar thing in a bit of an odd way too though
17:39 < ryanrolds_w> That will also allow you to control the number of inflight db calls.
17:39 < ryanrolds_w> Progress bar looks fine.
17:40 < ryanrolds_w> You init with the total and tick on each insert, that's pretty much all you need. 
17:40 < flexd> the total feels hacky heh, calling wc -l :p
17:41 < ryanrolds_w> Oh, that's a bit odd.
17:42 < Kakera> can someone explain why this outputs garbage? https://gist.github.com/4155782
17:44 < ryanrolds_w> flexd, How you get the total num lines in the csv isn't very portable, but that can always be fixed latter with very little change to what you have.
17:45 < flexd> True
17:45 < flexd> I know where it will be running anyway, and most likely we won't need to be importing people like that much longer.
17:45 < flexd> I just could not figure out a way of getting the CSV reader to tell me the lines of the file
17:45 < ryanrolds_w> flexd, yeah, thats a side effect of streaming.
17:45 < flexd> I guess I could just open it and count the lines though, but seemed a bit silly when I am reading the thing later :/
17:45 < ryanrolds_w> *er streams
17:46 < flexd> Cool.
17:46 < flexd> It works now
17:46 < flexd> With a queue instead
17:46 < ryanrolds_w> Awesome.
17:47 < ryanrolds_w> Kakera, Look at the res.text and see if it looks sane.
17:47 < Kakera> ryanrolds_w, everything non-ASCII is garbage
17:48 < ryanrolds_w> Ah, this sounds like a encoding or charset issue.
17:48 < Kakera> but google uses UTF-8
17:49 < ryanrolds_w> Kakera, Look at the headers and the meta tags and see if anything looks odd.
17:49 < ryanrolds_w> the hl is ru, which I assume is isn't English.
17:50 < ryanrolds_w> Does it work without the hl=ru?
17:51 < Kakera> yes, it does
17:51 < Kakera> hl=ru is russian
17:52 < ryanrolds_w> Is it possible you're rendering this in a termnial that doesn't know what do with non-ASCII chars?
17:53 < ryanrolds_w> *er, outputing this
17:53 < Kakera> out of the question
17:53 < Kakera>   'content-type': 'text/html; charset=windows-1251',
17:53 < Kakera> huh
17:53 < ryanrolds_w> Oh, interesting
17:54 < ryanrolds_w> I can't say for sure, but that looks like the smoking gun,.
17:56 < sosnon> __dirname is in module scope instead of in global scope; is there still a way of making it available in the default node repl? maybe rather creating an 'artificial' module in the repl than invoking the repl from module scope?
18:00 < sosnon> let me rephrase that question: what is a correct way of defining a module else than creating a new file? can there be multiple modules in one file then? can there be (multiple) modules in the repl? i mean it should work, right? no matter how bad this design is...
18:02 < ryanrolds_w> sosnon, is your issue a problem with modules or with getting your pwd/cwd?
18:02 < niggler> a file corresponds to exactly one module
18:02 < sosnon> or is module.filename supposed to provide the path in such situations?
18:02 < ryanrolds_w> ^^^^ one file = one module
18:03 < sosnon> well, my question (no real-world problem) is if one file = one module is always true/can be exploited
18:03 < ryanrolds_w> I'm not sure what you're getting at or what your issue is.
18:04 < ryanrolds_w> Also, does process.cwd() works in the repl.
18:05 < niggler> require.main.filename
18:05 < matbee> IRC I need your help to stay in the global startup battle competition ;) lets vote for my nodejs project: http://vote.groupnotes.ca (contest ends tonight) SHOW ME SOME LOVE
18:05 < sosnon> sure... basically: 1) can i cram multiple modules into one file?  2) can i create (multiple) modules in the repl?
18:05 < matbee> god damnit windows, why u make me reboot so much
18:05 < niggler> matbee requires facebook, nonstarter
18:05 < ryanrolds_w> 1) No 2) Not that I know of, you need to require in existing modules/files in the repl.
18:06 < niggler> sosnon you probably are using modules incorrectly
18:06 < sosnon> there is really no way of having multiple modules in one file?
18:06 < niggler> start from the top -- what exactly are your reusable components here
18:06 < ryanrolds_w> You can require other modules in a module and expose them through exports.
18:06 < sosnon> (sure, this is not the intended use of modules... at least with node)
18:06 < ryanrolds_w> But you don't can't get seperate exports in a single file.
18:07 < ryanrolds_w> Er, require call on a file.
18:07 < mscdex> sosnon: you can export multiple objects
18:07 < ryanrolds_w> ^
18:07 < niggler> i remember reading something in the docs about it
18:07 < niggler> "Node has a simple module loading system. In Node, files and modules are in one-to-one correspondence."
18:07 < ryanrolds_w> Can you link us the docs?
18:07 < sosnon> i see
18:08 < niggler> mscdex i think he's thinking of modules as a construct and not just exporting multiple objects
18:08 < mscdex> `exports.MyFooClass = ...; exports.MyBarClass = ...;` ?
18:08 < niggler> http://nodejs.org/api/modules.html#modules_modules
18:08 < sosnon> apropos docs, is this http://nodemanual.org/0.8.14/nodejs_ref_guide/index.html still the place to look up docs for functions/modules/...? especially the search bar using google search?
18:08 < niggler> first line
18:08 < sosnon> or is there a better place to read the docs?
18:08 < mscdex> other than that  you can't really do multiple modules in one file
18:08 < niggler> sosnon use http://nodejs.org/api/
18:09 < niggler> ryanrolds_w nodejs.org is your friend
18:09 < niggler> except duckduckgo for some reason defaults to an older version
18:09 < mscdex> nodejs.org/api/ will always point to you the latest stable version docs
18:10 < ryanrolds_w> niggler, Sorry I kept think you were the one asking the questions. I have 3+ tabs open to that site all the time ;)
18:10 < mscdex> mind.watchFile("http://nodejs.org/api/")
18:10 < mscdex> ;-
18:10 < mscdex> ;-)
18:13 < niggler> ryanrolds_w you should expect a niggler to pay attention to details in the docs :)
18:14 < ryanrolds_w> haha, ;)
18:14 < ryanrolds_w> soson, that making sense?
18:14 < ryanrolds_w> sosnon
18:14 < niggler> mscdex any way to kick the DDG people to use the latest API?
18:15 < mscdex> niggler: i'm not one to ask, i don't even use DDG
18:16 < niggler> lol mscdex don't tell me you use bing!
18:16 < niggler> or, god forbid, yahoo!
18:16 < mscdex> google
18:16 < niggler> :/
18:17 < ryanrolds_w> Is there some push to not use google that I'm not aware of?
18:17 < mscdex> the only thing i used to use bing for was their angled aerial views in maps, before google implemented them
18:19 < ericelliott> Google is the man. Down with the man!
18:19 < misterhat> NO
18:19 < niggler> ryanrolds_w there's no push per se -- there are security concerns with google
18:20 < niggler> granted there are security concerns with every company
18:21 < niggler> but google is notorious for free services, and i am wary of free services that aren't driven by donations
18:21 < niggler> take freenode: http://freenode.net/pdpc_onetime.shtml
18:22 < sosnon> ryanrolds_w: what exaclty should make sense?
18:23 < mscdex> niggler: you want to pay for web search? :-)
18:25 < niggler> i wouldn't mind paying a small amount to preserve some semblance of privacy
18:25 < niggler> and/or stop ads
18:26 < chovy> anyone have any suggestions for where i can upload 100gb of data to my server? It will take way too long over dsl.
18:26 < flexd> niggler: duckduckgo.com? :)
18:26 < mscdex> use /etc/hosts and/or browser extensions to block ads
18:26 < niggler> flexd that's what i use now
18:26 < flexd> Me too, mostly
18:26 < flexd> But I often have to resort to using google
18:26 < flexd> A lot of stuff has a lot worse results
18:26 < mscdex> chovy: fire up an extra dialup connection? ;-)
18:27 < flexd> chovy: send the datacenter a hdd? :)
18:27 < mscdex> chovy: find someone with FIOS?
18:27 < chovy> i was thinking a library or something
18:27 < flexd> do you go to school anywhere?
18:28 < flexd> or work with internet.
18:28 < chovy> no
18:28 < niggler> fios isnt really that fast
18:28 < chovy> i work with internet.
18:28 < chovy> i was thinking of doing it at work, but i might hog all the bw
18:28 < flexd> chovy: work with internet asi n a workplace with internet :p
18:28 < chovy> yes
18:28 < niggler> chovy just send a hard drive
18:28 < flexd> You could do it late at night
18:28 < niggler> that's by far the fastest method
18:28 < chovy> it will take abotu 23 hours at 20Mbps
18:28 < mscdex> pull up to a local university that has free wifi?
18:29 < mscdex> :-)
18:29 < gkatsev> niggler: fios can be. verizon has up to 200Mbps symmetric, if you are willing to pay
18:29 < chovy> our speed is not all that fast here
18:29 < chovy> yeah, someone suggested stanford
18:29 < chovy> but i think you need to be a student to get access.
18:29 < niggler> iirc you can't get residential symmetric
18:30 < niggler> those are for the business subscribers
18:30 < chovy> i have u-verse and it is 12mbps/1.5mbs
18:30 < chovy> horrible.
18:30 < gkatsev> hm... don't remember either way, you can get upt o 200mbps down.
18:30 < gkatsev> move to kansas city.
18:31 < niggler> gkatsev how does the download rate help with uploading a file?
18:31 < gkatsev> even if it isn't symmetric, it'll still be at least 50mbps
18:31 < chovy> gkatsev: yeah, w/ google fiber itwould take 2 hours
18:32 < gkatsev> what are you uploading?
18:33 -!- Topic for #node.js: Node.js - JavaScript Everywhere.  This is a friendly channel.  Take your aggression elsewhere. http://blog.izs.me/post/30036893703/policy-on-trolling
18:33 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Sun Nov 25 19:24:54 2012]
18:33 < flexd> chovy: what kind of speeds can you get with your DSL though?
18:34 < flexd> 100GB is not that much
18:34 -!- isaacs changed the topic of #Node.js to:  Node.js - JavaScript Everywhere.  This is a friendly channel.  Take  your aggression elsewhere. http://blog.izs.me/post/30036893703/policy-on-trolling
18:34 -!- isaacs changed the topic of #Node.js to:  Node.js - JavaScript Everywhere. This is a friendly channel. http://blog.izs.me/post/30036893703/policy-on-trolling
18:34 < niggler> hey isaacs i take offense to your post
18:34 < flexd> Would take about 22 hours @ ca. 1MB/s
18:34 < niggler> its not gender-neutral
18:37 < gkatsev> lol
18:38 < strk> ([^\s]\s*){([^}]*)} 
18:38 < strk> ^^ why the \s* part is not being greedy ?
18:38 < niggler> \S = [^\s]
18:39 < strk> oh, thanks for that
18:39 < chovy> flexd: i don't what the fastest u/l is, but the d/l is 24Mbps. Probably only 3Mpbs up
18:39 < strk> well, \S doesn't work, so let's take taht away
18:40 < strk> "[x] { hello }"
18:40 < niggler> where are you matching square brackets?
18:40 < mscdex> strk: i think your { and } should be escaped btw
18:40 < hallas> anyknow how to declare unique properties in geddyjs models?
18:40 < strk> I want to get the last character before the "{" and 
18:40 < niggler> [] denotes character class
18:40 < hallas> anyone*
18:40 < strk> not being a space
18:41 < niggler> strk if you want to match "[x] { hello }"
18:41 < strk> RegExp('([^\s]\s*){([^}]*)}', 'g');
18:41 < niggler> (\[\S\]\s){([^}]*)}
18:41 < strk> this is matching "[x] { hello }"
18:41 < chovy> flexd: yeah 3.0 upload
18:41 < chovy> for $45/mo
18:41 < niggler> >>> new RegExp("(\[\S\]\s){([^}]*)}").test("[x] { hello }")
18:41 < mscdex> purr is gone
18:42 < niggler> boo
18:42 < strk> but I want to match both "#t {hello}" and "#t[x] {hello}" and be able to tell if there was a "[..]" block or not
18:42 < strk> so I don't want to have a verbatim [ or ] in the regexp
18:42 < strk> the class [^\s] was to match " a non-space "
18:43 < strk> so, a non-space followed by 0 or more spaces:
18:43 < strk> ([^\s]\s*){
18:43 < strk> ([^\s]\s*) 
18:43 < niggler> use \S
18:43 < niggler> (for non-whitespace)
18:43 < strk> \S does't match anything anymore
18:43 < mscdex> R.I.P. \S
18:43 < niggler> you can use a subexpression to test for []
18:43 < mscdex> :-)
18:44 < gkatsev> strk: how come?
18:44 < strk> "#t{hello}".match(RegExp('(\S\s*){([^}]*)}', 'g'));
18:44 < strk> "#t{hello}".match(RegExp('([^\s]\s*){([^}]*)}', 'g'));
18:45 < strk> but:
18:45 < strk> "#t  {hello}".match(RegExp('([^\s]\s*){([^}]*)}', 'g'));
18:45 < strk> doesn't include the "t" in the match:
18:45 < strk> result: [ ' {hello}' ]
18:46 < strk> so I don't see the [^\s] part
18:46 < strk> which is weird, isn't it ?
18:46 < niggler> mscdex bring back purr
18:46 < niggler> strk the glob matches whitespace and not characters
18:46 < niggler> [^\s]*
18:46 < strk> to make itsimpler: "#t  {".match(RegExp('([^\s]\s*){', 'g'));
18:47 < strk> I read the above as:
18:47 < strk> a non-space, followed by zero or more spaces, followed by an open curly brace
18:47 < strk> so should match: "t  {"
18:47 < strk> instead it matches ' {' 
18:47 < strk> loosing the non-space part
18:48 < mscdex> niggler: not my bot, but you'd have to take it up with konobi
18:48 < strk> simpler: 't  {'.match(RegExp('[^\s]\s*{'));
18:49 < strk> it looks like I must omit the \s* part
18:49 < strk> '[^\s].*{'
18:49 < strk> works better
18:50 < strk> only it doesn't give me only the last non-space, but rather all of them :/
18:50 < misterhat> greedy
18:50 < strk> is \s valid in [] at all ?
18:50  * strk wonders if [^\s] means "not an 's' char"
18:51 < niggler> "#t {".match(/(\S+)(\s+)({)/);
18:51 < niggler> try that
18:51 < niggler> err "#t {".match(/(\S+)(\s*)({)/);
18:52 < chovy> well i can transfer 200gb at 1.5Mbps in 12 days
18:53 < strk> damn, no dice
18:53 < strk> how can I set greediness of a portion ?
18:53 < niggler> so im running tihs in node strk
18:54 < niggler> > "#t  {".match(/(\S+)(\s*)({)/);
18:54 < niggler> [ '#t  {',  '#t',  '  ',  '{',  index: 0,  input: '#t  {' ]
18:54 < strk> the way I'm running it is:
18:54 < strk> var newstyle = style.replace(re, function(mtc, cond, stl) {
18:55 < strk> want to get the last non-space character before the open brace into the cond variable
18:55 < strk> it would be "t" in your case above
18:55 < strk> see if you can get "t" there somehow (I don't see it in your output)
18:56 < strk> "#t [ anything ] {" <-- and here I'd want cond to be ']'
18:56 < strk> basically: last non-blank character before '{'
18:56 < strk> ah, and this is a global !
18:56 < strk> so repeated multiple times (making the greedy part harder as you don't really want it greedy)
18:57 < niggler> strk
18:57 < niggler> then its just
18:57 < niggler> "#t  {".match(/(\S*)(\S)(\s*)({)/);
18:57 < strk> yeah, everything is broken with adding that portion
18:57 < niggler> that gives you '#', 't', '(whatever whitespace)', '{'
18:58 <@isaacs> strk: 
18:58 <@isaacs> $ node -pe '"a".match(/^[^\s]$/)'
18:58 <@isaacs> [ 'a', index: 0, input: 'a' ]
18:58 <@isaacs> $ node -pe '" ".match(/^[^\s]$/)'
18:58 <@isaacs> null
18:58 <@isaacs> strk: [^\s] means "not a space char"
18:58 < niggler> isaacs: use \S
18:58 <@isaacs> $ node -pe '" ".match(/^[^\S]$/)'
18:58 <@isaacs> [ ' ', index: 0, input: ' ' ]
18:58 <@isaacs> $ node -pe '"a".match(/^[^\S]$/)'
18:58 <@isaacs> null
18:59 <@isaacs> niggler: \S is "a nonspace char"
18:59 <@isaacs> niggler: so [^\S] is "not a nonspace char"
18:59 < flexd> chovy: Sucks :/
18:59 < niggler> \S = [^\S]
18:59 < niggler> err
18:59 < flexd> I get 10Mbit for "free" through my rent
18:59 < niggler> isaacs \S = [^\s]
18:59 <@isaacs> \s = [^\S]
18:59 < flexd> student housing though
18:59 <@isaacs> yes
18:59 <@isaacs> niggler: yes
18:59 <@isaacs> niggler: but . != [\s\S]
19:00 <@isaacs> niggler: because . doesn't match \n
19:00 < niggler> right isaacs that's how . is defined
19:00 <@isaacs> or \r
19:00 < niggler> newline
19:01 <@isaacs> niggler: php and perl have a mode where you can make it match newlines
19:01 <@isaacs> but alas, not js
19:01 < niggler> JS leaves much to be desired
19:01 < mscdex> [\s\S] is . in newline mode in JS
19:02 < niggler> oh yeah isaacs your post is not gender neutral
19:02 < niggler> oh yeah isaacs your post is not gender neutral: "tl;dr If you‚Äôre a dick, you get kicked out. This is not negotiable." -- 'dick' is an inherently masculine term
19:03 < flexd> Dick is more of an asshole than a gender-specific word.
19:03 < niggler> see, asshole is gender-neutral
19:03 < flexd> You can be an asshole without having an asshole (except for the not being able to poop part) :p
19:03 < ppppaul> would it be possible for someone with connect/express experience to help me in #express?
19:04 < niggler> i also never understood censorship of that word, because some feel that its acceptable to say ass but not asshole
19:05 < flexd> I usually prefer asshat. Implying your butt is located near your head. :D
19:05 < othiym23> one is a recalcitrant animal, the other is the most unsavory of all possible body parts *clutches pearls*
19:05 < flexd> Anyway, back to topic:
19:05 < othiym23> *clutches Perl*
19:05 < flexd> othiym23: shouldn't you be clutching your nodes?
19:05 < flexd> ppppaul: I am not that experienced but I could try to help?
19:05 < othiym23> that would be immodest
19:05 < niggler> or rubies?
19:13 < Kakera> ryanrolds_w, apparently google doesn't use utf-8 unless you tell it to
19:13 < Kakera> but if superagent knows it's windows-1251
19:13 < Kakera> , why doesn't it decode it properly?
19:16 < strk> solved with the regexp
19:16 < strk> next issue: _.clone() isn't cloning ?!
19:16 < strk> console.log("global_marker_directives at startup: "); console.dir(global_marker_directives);
19:16 < strk> console.log("cloned global_marker_directives at startup: "); console.dir(_.clone(global_marker_directives));
19:16 < niggler> strk is the origin of your nick 'strtok'?
19:17 < strk> global_marker_directives at startup: [ 'marker-type': 'arrow' ]
19:17 < strk> cloned global_marker_directives at startup: []
19:17 < strk> niggler: yes
19:19 < gavri> there are cookies that this node.js app gives me that starts with "j:"
19:19 < gavri> what does it mean?
19:29 < Blkt> good evening everyone
19:30 < flexd> 'evening
19:32 < mscdex> good afternoon
19:32 < niggler> its 2:30 folks
19:32 < mscdex> pm
19:32 < niggler> indeed, 14:30
19:32 < niggler> actually i dunno why this computer isnt on 24 hour time
19:33 < mscdex> you have 12 hour days? ;-)
19:34 < niggler> mscdex i noticed something weird
19:34 < chovy> it's 11am here
19:34 < niggler> when i go into bootcamp
19:34 < niggler> and then come back to mac, the 24 hour setting is lost
19:35 < mscdex> darn macs!
19:35 < context> niggler: ?
19:35 < context> oh wow.
19:36 < context> might might be doing that too
19:37 <@isaacs> any zsh users here?
19:39 < nathan7> isaacs: Yep
19:39 < nathan7> isaacs: What do you require, isaac-man?
19:39 <@isaacs> nathan7: echo $SHELL
19:39 <@isaacs> nathan7: what's that?
19:39 < nathan7> isaacs: /bin/zsh
19:39 <@isaacs> interesting.  ok
19:40 <@isaacs> when i run zsh manually, it's set to /bin/bash, because it's picking up the envs
19:40 <@isaacs> from the parent process
19:40 < nathan7> chsh -s `which zsh`
19:40 < gkatsev> interesting
19:40 < nathan7> I think SHELL is set by /bin/login
19:40 < nathan7> or whatever goes in its place for graphical logins
19:42 <@isaacs> nathan7: right.
19:42 <@isaacs> nathan7: oh well, nave can't work with zsh anyway.  no --rcfile option.
19:42 < nathan7> isaacs: --rcfile?
19:43 <@isaacs> nathan7: with bash, you can give ita file to run on login, rather than .bashrc or .bash_profile
19:43 <@isaacs> nathan7: zsh *only* runs ~/.zshrc
19:43 < nathan7> isaacs: mhm
19:43 < nathan7> isaacs: I could make my zshrc take an argument
19:43 < nathan7> isaacs: I'm curious how rvm does that
19:44 <@isaacs> nathan7: well, rvm works like nvm, right?  you have to put a thing in your zshrc/bashrc
19:44 < nathan7> isaacs: ah
19:44 <@isaacs> nathan7: nave is a standalone program
19:44 <@isaacs> nathan7: it spawns an interactive subshell for you
19:44 < nathan7> isaacs: I haven't ever touched rvm, I dislike ruby - but I saw the rvm plugin in oh-my-zsh
19:44 < othiym23> what about rbenv, which also works fine with zsh?
19:44 < othiym23> I guess it uses a shim directory a la nvm
19:45 < brianc1> I compile & install each version of node under ~/local/node<version> and manage a which version I'm using via a symlink from ~/local/node<version> to ~/local/node
19:45 < brianc1> and then my path is always set to $PATH = $HOME/local/node/bin:$PATH
19:45 < brianc1> SO EASY
19:45 < brianc1> NO MAGIC
19:45 <@isaacs> brianc1: nave is actually less magical than that :)
19:46 < niggler> wait a second isaacs couldnt you set ZDOTDIR?
19:46 < brianc1> negaive magic!
19:46 <@isaacs> brianc1: it does: PATH=$NAVEDIR/$NAVE/bin:$PATH bash
19:46 < brianc1> yeah I used to use nave, i liked it
19:46 < nathan7> isaacs: that should work..?
19:46 <@isaacs> brianc1: but with a bit of other niceties.
19:46 < nathan7> goddamnit, waf
19:46 < brianc1> i just sometimes got inception-ish with "exit, exit, exit...okay wait how many shells am in inside?"
19:46 <@isaacs> brianc1: you can do `nave use 0.6.14 node test.js` for example
19:46 < nathan7> waf expects python2
19:46 < brianc1> yeah that is goodness there
19:46 < nathan7> but /usr/bin/python is python3 on Arch
19:46 < niggler> isaacs: try this: mkdir -p zshtest; echo "echo foo" >> zshtest/.zshrc; ZDOTDIR=zshtest zsh
19:47 <@isaacs> nathan7: i think what you mean is "goddamnit, arch"
19:47 < brianc1> i now rely on travis to test versions of node for me because I am lazy and a bad developer. :p
19:47 <@isaacs> niggler: i'm not comfortable with programs that modify your dotfiles for you
19:47 < brianc1> niggler: i agree 
19:47 < niggler> isaacs its a custom .zshrc
19:47 <@isaacs> niggler: i consider that like inviting a guest over for tea, and finding that they've rearranged the furniture.
19:47 <@isaacs> niggler: in the bathroom.
19:47 < niggler> did you read the command?
19:47 < nathan7> isaacs: No, not quite
19:48 < niggler> zsh will execute $ZDOTDIR/.zshrc
19:48 < niggler> so you can take advantage of that to fake --rcfile
19:48 < nathan7> isaacs: /usr/bin/python2 is python2 like on any distro
19:48 <@isaacs> niggler: oh, ok, so you can tell zsh to pull its dot file out of a different dir.  but it must still be named .zshrc
19:48 <@isaacs> nathan7: python2 should be the default.
19:48 < nathan7> isaacs: /usr/bin/python doesn't specify a version
19:48 < nathan7> isaacs: Why shouldn't it be python1?
19:48 < niggler> isaacs you can fake a .zshrc in /tmp/bumfuck that tells it to source the file you want
19:48 <@isaacs> nathan7: real world python programs all assume python2
19:49 < niggler> isaacs many still use /usr/bin/python2.6 or .7
19:49 < nathan7> It's not that hard to add the 2
19:49 <@isaacs> niggler: or i can just s/naverc/.zshrc/ and do ZDOTDIR=$NAVEDIR
19:49 < othiym23> except for the poor brave sad souls trying to convince everyone that Python 3 is the de facto standard now
19:49 < niggler> lol othiym23 arch linux
19:50 < othiym23> nathan7: the workaround is to create a directory containing a symlink from python to python2.6 / python2.7 and put that directory at the head of your PATH
19:50 < othiym23> it is dumb but also functional
19:51 < niggler> what about the mac technique with com.apple.versioner.python
19:51 < othiym23> niggler: that's just doing the same thing at the OS level
19:51 < niggler> you can also set the variable
19:51 < niggler> VERSIONER_PYTHON_VERSION
19:52 < nathan7> othiym23: there's /usr/bin/python2, dear.
19:52 <@isaacs> btw, i think we actually support the PYTHON env everywhere now
19:52 <@isaacs> so you can do PYTHON=/usr/bin/python2 blahblahblah
19:52 < niggler> $ VERSIONER_PYTHON_VERSION=2.7 python
19:52 < niggler> Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05)
19:52 < niggler> $ VERSIONER_PYTHON_VERSION=2.6 python
19:52 < niggler> Python 2.6.7 (r267:88850, Jul 31 2011, 19:30:54)
19:52 < niggler> like that
19:53 < othiym23> nathan7: I'm just saying, you can hack up waf and have who knows what happen, or you can fix the problem without being a patronizing dick
19:53 <@isaacs> python3 is a cautionary tale in how to fuck up a successful platform
19:53 < nathan7> othiym23: Yes
19:53 < nathan7> isaacs: mhm
19:53 <@isaacs> take note: Node will never do this.
19:53 <@isaacs> we are stuck with our mistakes forever.
19:53 <@isaacs> but the alternative is worse.
19:53 <@isaacs> python3 should have had a differnet name
19:54 < mscdex> python-ng
19:54 < brianc1> cobracommander
19:54 <@isaacs> if it was called boa or something, and they just dubbed it the spiritual heir of python, then that would've been great.
19:54 <@isaacs> boa's also easier to type :)
19:54 < nathan7> mhm
19:55 < niggler> what's the status of perl6
19:55 <@isaacs> niggler: HAHAHAHAHHA
19:55  * nathan7 giggles like a little girl
19:55 <@isaacs> the status of perl6 is "Failing to inform Python, apparently"
19:55 < nathan7> also, delicious, oh-my-zsh just broke
19:56 < nathan7> luckily it checks it out from git
19:58 < superjoe> what are we stuck with? I missed the first part of that
19:58 < nathan7> superjoe: The few quirks in JS
20:02 < superjoe> ah
20:18 < samholmes> I keep getting a "Can't set headers after they are sent." in my code and it's bugging the hell out of me. 1. I cannot duplicate this error on my end; it only occurs when other people signup. 2. I don't see anywhere in my code where I would be sending headers. Eh..
20:18 < samholmes> Anyone have any insight into the possible..possibilities?
20:18 < niggler> https://github.com/Stuk/jszip
20:18 < niggler> err
20:18 < gavri> if I use the cookieStore connect module, it makes no sense to use the cookieParser connect module, right?
20:18 < niggler> anyone familiar with the dual licensing structure like what JSZip uses
20:19 < nathan7> isaacs: by the way
20:19 < nathan7> isaacs: are there any real docs on node-tar?
20:20 < sontek> Hey, i'm trying to grab uglify-js and its telling me: message No compatible version found: source-map@'>=0.1.7- <0.2.0-'  valid targets: message ["0.0.0","0.1.0","0.1.1","0.1.2","0.1.3"]
20:21 < sontek> anything I can do to fix that or just have to wait for the maintainer?
20:21 < sosnon> i have an annoying scoping problem; it's not really node-specific, but rather my lacking js skills, but in case you want to help me, feel free to comment this http://jsfiddle.net/4j9UE/
20:21 < nathan7> sontek: I wonder what it's matching on
20:21 < sosnon> also the inner "var self = this;" is nonsense
20:21 < nathan7> sontek: node -v
20:21 < sontek> v0.6.18
20:22 < sontek> should I get a newer version?
20:22 < nathan7> We're at at least 0.8.14
20:22 < sontek> ok, I just use my package managers stuff for node since I only use it for uglify
20:23 < context> http://mashable.com/2012/11/27/parents-name-baby-hashtag/
20:25 < nathan7> sontek: ubuntu and stuff have ridiculously old versions
20:26 < nathan7> Arch won't run on crazy old kernels so my nodestuff VPS can't run it
20:27 < nathan7> So I tried Ubuntu Server (I come from Debian/Ubuntu-land - I know my way around in Debian systems)
20:27 < nathan7> in repos: node 0.6.x. couchDB <1.0
20:28 < nathan7> I forgot how grateful I should be for Arch's fresh packages
20:28 < nathan7> Oh hey, new node
20:30 < sosnon> what is wrong here? http://jsfiddle.net/YEfuG/
20:30 < sosnon> i mean i have the callback inside the readFileSync call, but that should not prevent me drom accessing parent scope variables, right?
20:31 < bigkevmcd> nathan7: https://launchpad.net/~chris-lea/+archive/node.js/ might help
20:31 < nathan7> bigkevmcd: mhm
20:31 < nathan7> bigkevmcd: I just compiled my own node
20:36 < mr-spoon> Howdy folks. I'm doing some testing with Mocha‚Ä¶ however, a subclass (UptimeMonitor) seems to be inheriting tests from the parent (Monitor). Given that UptimeMonitor overrides Monitor for a particular method, I don't want it to inherit the tests (they fail). Any suggestions?
20:40 < wltsmrz> sosnon, are you sure you want readFileSync?
20:40 < wltsmrz> http://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_encoding
20:40 < wltsmrz> Looks like you are trying to use a callback. Maybe you want readFile.
20:45 < wltsmrz> Maybe tinker with this sosnon, http://jsfiddle.net/xJFZA/3/
20:50 < JasonJS> I'm hoping someone can explain the following object that I'm dumping using util.inspect - I'm not understanding what the first line is:
20:50 < JasonJS> https://gist.github.com/4156909
20:50 < sosnon> wltsmrz: well, readFile requires the callback, that's the base of the problem (or the good thing, however you like)
20:51 < wltsmrz> Well, if you just want to read the file synchronously, you don't need a callback at all :)
20:51 < daRkKn1ghT0> Hello
20:52 < wltsmrz> Howdy partner
20:52 < sosnon> wltsmrz: right, but it does not work with readFile like that, how would i access 'list' from inside the callback?
20:53 < voodootikigod> piscisaureus_: any chance you are around/here?
20:54 <@piscisaureus_> voodootikigod: there's a change
20:54 <@piscisaureus_> *chance
20:54 < voodootikigod> dangerous
20:54 <@piscisaureus_> sup?
20:54 < voodootikigod> :)
20:54 < voodootikigod> looking for hope/insight/love as to how to investigate why a stream won't die
20:54 < voodootikigod> OR
20:54 < voodootikigod> a way to force kill a stream
20:55 < voodootikigod> i guess i should say
20:55 <@piscisaureus_> voodootikigod: what kind of stream?
20:55 < voodootikigod> a "special stream"
20:55 <@mbalho> lol
20:55 < voodootikigod> serialport stream, we switch to using createReadStream for reading data off the wire
20:55 <@piscisaureus_> ah
20:55 < voodootikigod> passing in the tty opts set fd
20:55 < voodootikigod> and now
20:55 < voodootikigod> we can't kill it
20:55 <@piscisaureus_> ha
20:56 <@piscisaureus_> true that
20:56 < voodootikigod> haha
20:56 <@piscisaureus_> ok here's the problem
20:56 < voodootikigod> much like serialport
20:56 < voodootikigod> i just cant kill it :)_
20:56 < voodootikigod> only one?
20:56 < sosnon> wltsmrz: just for the kicks, how would that work with readFile then? should i try to somehow access 'list' from inside the callback with any means?
20:56 <@piscisaureus_> createReadStream reads on the thread pool
20:56 <@piscisaureus_> but we can't kill stuff that's happening in the thread pool
20:56 <@piscisaureus_> ehm so
20:57 < voodootikigod> so
20:57 < voodootikigod> raw (clevel) reader returns?
20:57 <@piscisaureus_> have you ever tried net.createConnection({fd: 42}) to read from a serial port?
20:57 < voodootikigod> i mean that makes sense
20:57 < voodootikigod> no
20:57 < voodootikigod> not yet
20:57 <@piscisaureus_> it's something you could try
20:58 <@piscisaureus_> lemme see
20:58 < wltsmrz> That condition is something more like this sosnon, http://jsfiddle.net/xJFZA/4/
20:58 < voodootikigod> test ing out now
20:58 < voodootikigod> worst typist ever
20:58 < wltsmrz> But I'm not quite sure what it is you're doing.
20:58 < wltsmrz> Or, trying to do.
20:59 <@piscisaureus_> voodootikigod: actually, i would think that destroy() should work...
21:00 < voodootikigod> on fs.readStream
21:00 < voodootikigod> i would think so too :)
21:00 < voodootikigod> it doesnt
21:00 <@piscisaureus_> voodootikigod: so what happens?
21:00 < voodootikigod> and its not the "specialness" of my code
21:00 < voodootikigod> what are the odds you have an arduino near by
21:00 < voodootikigod> ?
21:00 <@piscisaureus_> 0
21:00 < voodootikigod> fantastic!
21:01 < voodootikigod> linux/mac/win
21:01 < voodootikigod> ?
21:01 < voodootikigod> the modern asl
21:01 <@piscisaureus_> preferrably linux
21:01 < aandy> 26/m/linux/mac/win
21:01 < aandy> :(
21:01 < voodootikigod> lets see if this works then 
21:02 < voodootikigod> let me mock a gist
21:02 <@piscisaureus_> voodootikigod: so, in what sense is it un-destroyable?
21:02 < sosnon> wltsmrz: well, doing it synchronous was a bad idea
21:02 < voodootikigod> getting it for you
21:02 <@piscisaureus_> voodootikigod: does it leak FDs, or never emit "close", or hang?
21:02 < voodootikigod> just figuring out commands for pty
21:02 < voodootikigod> never emits close and hangs
21:03 < voodootikigod> so code like this: https://gist.github.com/1d6832964aaf2c860a6c
21:03 < voodootikigod> just hangs forever (where tty addres is a mounted arduino board)
21:04 <@piscisaureus_> voodootikigod: can  you also gist the strace output?
21:04 <@piscisaureus_> sudo strace -f node test.js
21:04 < voodootikigod> let me  grab my arduino
21:04 < voodootikigod> and yes
21:05 <@piscisaureus_> my suspicion that either the thread pool is saturated, or close() is synchronized and queued after read() somehow
21:06 < sosnon> wltsmrz: i don't know if this makes sense http://jsfiddle.net/YD6ra/1/
21:06 <@mbalho> macs dont have strace they have dtruss
21:06 <@piscisaureus_> oh shit
21:06 <@piscisaureus_> true
21:07 <@piscisaureus_> and dtruss prints like half of all the syscalls if you're lucky
21:08 < voodootikigod> no worries
21:08 <@mbalho> voodootikigod: got your ping in gmail (<- maxogden)
21:09 < voodootikigod> was just going to say
21:09 < voodootikigod> epic job!
21:09 <@mbalho> hehehe thanks
21:09 < sechrist> nodejs!
21:10 <@mbalho> now i have to figure out a good arduino mounting situation and play with sensors
21:10 < sosnon> wltsmrz: never mind, your example basically nails it, i'm tired, sorry
21:10 < sosnon> wltsmrz: thanks for the help!
21:11 <@mbalho> voodootikigod: i have a rfid reader that i can mount on the drone and put rfid tags on objects or other drones
21:11 <@mbalho> voodootikigod: also 3d positioning is a juicy problem
21:11 < voodootikigod> tonight, plannign on adding IR sensorso n the outboards
21:11 < voodootikigod> then have it do autonomous flight decisions
21:12 <@mbalho> voodootikigod: are you gonna use the long range IR sensors?
21:12 <@mbalho> voodootikigod: i was looking up videos of people who made ghetto lidar with a single IR laser + some servos
21:12 <@mbalho> voodootikigod: though i dont think you could doit on the parrot given the amount of instability during flight
21:13 < voodootikigod> did you see vektor?
21:13 <@mbalho> nope
21:13 < voodootikigod> https://github.com/rockbot/vektor
21:13 < voodootikigod> from _rockbot_
21:13 < voodootikigod> piscisaureus_: have to install node on this linux instance
21:13 < voodootikigod> so you can have teh output
21:13 <@piscisaureus_> ah hmm
21:13 <@mbalho> oh hell yea, raquel used to work at jpl
21:13 < voodootikigod> can I ping you with it in a bit?
21:13 < voodootikigod> yea
21:13 < misterhat> who else thinks it's cool that people ported sdl to node
21:13 < misterhat> :P
21:13 < voodootikigod> haha
21:14 <@piscisaureus_> voodootikigod: You can try but I may be gone soon. But feel free to drop me an email :-)
21:14 <@piscisaureus_> or to bother bnoordhuis :p
21:14 < sechrist> x ported to node == cool
21:14 < voodootikigod> piscisaureus_: can you email me so i have you address
21:14 < othiym23> raquel!
21:14 < voodootikigod> unless you wanna drop it here
21:14 <@piscisaureus_> sure
21:14 < voodootikigod> voodootikigod@gmail.com
21:14 <@piscisaureus_> bertbelder at gmail.com
21:14 < voodootikigod> i have zero fear of people emailing me evils :)
21:14 < voodootikigod> they do anyways
21:15 <@piscisaureus_> My email is everywhere anyway :-)
21:15 <@piscisaureus_> git log
21:15 < bnoordhuis> also crazybertje1985 at hotmail.com
21:15 < bnoordhuis> or should that be 1986?
21:15 <@piscisaureus_> both wrong
21:16 < bnoordhuis> not 1984 right?
21:16 <@piscisaureus_> I am the same age as justin bieber remember
21:16 < bnoordhuis> am i giving away my age if i ask who justin bieber is?
21:16 <@mbalho> voodootikigod: do you have any ideas on how the stty -F /dev/ttyO3 -raw step can be avoided? can node-serialport set raw mode?
21:17 < voodootikigod> it is by default
21:17 < voodootikigod> but
21:17 < voodootikigod> you can't restart :)
21:17 < voodootikigod> hence hte reason i am asking the questions
21:17 < voodootikigod> i am  :)
21:17 <@mbalho> ahhhah
21:18 < voodootikigod> bnoordhuis: only if you dont tell me when you find out
21:18 < voodootikigod> also leonardo boards have this same problem
21:18 < voodootikigod> and you can always (dirty, but works) exec("stty -F /dev/"+port+" -raw", func...)
21:18 <@mbalho> ehe
21:18 <@mbalho> *hehe
21:18 < voodootikigod> leonardo not meant for  you meant arduino leonardo
21:18 < voodootikigod> i like dirty
21:18 < voodootikigod> always works
21:20 < voodootikigod> will package upa nd send to you
21:20 < voodootikigod> thanks for the direction
21:20 < leonardo> I like leonardo
21:20 < voodootikigod> mbalho: thank cats for your persistence (although arguably that wasn't a legit ticket on sp :), though I loved it )
21:21 <@mbalho> voodootikigod: hahaha
21:21 < misterhat> so many idling people
21:21 <@mbalho> felixge: does node-ar-drone support the bottom facing camera? how hard would that be to hack in? i wanna use it at node olympics
21:21 < voodootikigod> they really should turn off their engines. It releases fumes otherwise
21:22 <@mbalho> this channel pays for carbon offsets, its cool guys
21:22 < felixge> mbalho: it does support it
21:22 < felixge> you just need to send some config() command I forgot
21:22 < felixge> :)
21:22 <@piscisaureus_> bnoordhuis: actually, what is unix supposed to do when you close() an fd while a read/write is pending on another thread?
21:22 <@mbalho> felixge: sweet, there are no docs in the readme yet, do you have a gist or soemthin?
21:22 < bnoordhuis> piscisaureus_: fail horribly
21:22 < felixge> mbalho:  client.config('video:video_channel', '1')
21:22 < voodootikigod> i like fail
21:22 <@mbalho> felixge: yay
21:22 < voodootikigod> fail I can deal with
21:22 <@piscisaureus_> bnoordhuis: error == ?
21:22 < voodootikigod> hang I can't
21:23 < felixge> mbalho: download the offical SDK docs
21:23 < felixge> mbalho: contains this and more
21:23 < bnoordhuis> piscisaureus_: you mean close() as in fs.close(fd) and write() as in fs.write(fd)?
21:23 <@piscisaureus_> bnoordhuis: I mean syscalls
21:23 <@mbalho> felixge: cool will do. p.s. gonna try to get a servo on the bottom of the drone to drop bombs over targets
21:23 <@isaacs> nathan7: no, there are not.
21:23 < bnoordhuis> piscisaureus_: if you try a write on a fd that's closed you get EBADF
21:23 <@isaacs> nathan7: and the API is shit.
21:23 < bnoordhuis> piscisaureus_: if the fd has been repurposed in the mean time, you're in trouble
21:23 < felixge> mbalho: bombs? : )
21:23 <@isaacs> nathan7: it needs a lot of work, actually.  as far as actually, you know, parsing tarballs, it's awesome.
21:23 < felixge> mbalho: may have to find a nicer term for them :P
21:23 <@isaacs> nathan7: but pretty much everything else about it is terrible
21:24 <@piscisaureus_> bnoordhuis: I'm thinking c here, not node
21:24 < nathan7> isaacs: I was trying to stream a tarball through changing the path
21:24 < nathan7> isaacs: to convert npm packages so haibu will eat 'em
21:24 <@isaacs> nathan7: yeah, mostly i just point people at npm's codebase to see how to do stuff
21:24 <@piscisaureus_> bnoordhuis: what happens if a write() has already started, and then the fd is closed?
21:24 < nathan7> isaacs: mhm
21:24 < bnoordhuis> piscisaureus_: you mean thread a is in the write() syscall and thread b calls close()?
21:24 < nathan7> isaacs: I'll do that then
21:24 <@piscisaureus_> bnoordhuis: yes, that
21:25 <@mbalho> felixge: headline from next week: "Node JavaScript used to control UAV bombing raids by bearded lunatic"
21:25 < bnoordhuis> piscisaureus_: it depends. the write could either succeed or fail with EBADF
21:25 < felixge> mbalho: :)
21:25 <@piscisaureus_> bnoordhuis: so under no circumstances close() would block until write()  completes?
21:25 < niggler> bnoordhuis i thought you get EINTR
21:26 < bnoordhuis> piscisaureus_: the close() syscall can block
21:26 < bnoordhuis> piscisaureus_: i stress *can*, it doesn't have to
21:27 < bnoordhuis> niggler: EINTR is when your process/thread receives a signal when you're inside a blocking syscall
21:28 < voodootikigod> piscisaureus_: does not fail (works as should) in linux
21:28 <@piscisaureus_> voodootikigod: ew
21:29 <@piscisaureus_> voodootikigod: I suppose dtruss it is, then
21:29 < voodootikigod> yup
21:30 < voodootikigod> ok let me get that rolling
21:30 < voodootikigod> brb
21:30 < bnoordhuis> piscisaureus_, voodootikigod: what's the issue?
21:31 <@piscisaureus_> bnoordhuis: apparently ReadStream.destroy hangs when the "file" is a serial port device on os x
21:31 < bnoordhuis> piscisaureus_: oh, that could be because some special files aren't pollable with kqueue
21:31 < bnoordhuis>  /dev/tty is one example
21:31 <@piscisaureus_> bnoordhuis: ReadStreams use the thread pool
21:31 < voodootikigod> that sounds right
21:32 < voodootikigod> it is a stty
21:32 < bnoordhuis> piscisaureus_: oh, right
21:32 <@piscisaureus_> bnoordhuis: I actually suggested to use createConnection({fd: x})
21:33 < bnoordhuis> voodootikigod: what does dtruss -f show?
21:33 <@piscisaureus_> ah actually that should be `new net.Socket({fd: x})
21:33 < voodootikigod> https://gist.github.com/81d43e57ca843c06b443
21:33 < voodootikigod> will try both piscisaureus_ 
21:33 < voodootikigod> there is teh dtruss
21:33 < voodootikigod> brb
21:34 < bnoordhuis> voodootikigod, piscisaureus_: i'm not seeing any reads actually
21:35 <@piscisaureus_> I'm not seeing any relevant open() calls
21:35 <@piscisaureus_> hah, bnoordhuis voodootikigod: that ^
21:36 <@piscisaureus_> however
21:36 <@piscisaureus_> __mac_syscall(0x7FFF936118CC, 0x2, 0x7FFF5FBFE3D8)
21:36 <@piscisaureus_> so nice, dtruss :-p
21:36 < bnoordhuis> i've been thinking of writing a better dtruss
21:37 < bnoordhuis> it's not that hard, dtruss creates a d script and scripts have access to the syscall args
21:37 <@piscisaureus_> bnoordhuis: can you explain the failing fcntl calls btw?
21:37 <@piscisaureus_> in that gist
21:37 <@piscisaureus_> bnoordhuis: also, you need to find a way to tap into mach syscalls
21:37 < bnoordhuis> piscisaureus_: i was more concerned about freebsd actually :)
21:38 < bnoordhuis> i don't use os x all that much
21:38 < bnoordhuis> piscisaureus_: those failing fcntl() calls are node putting fds 0-16 back in blocking mode before execve()
21:39 < bnoordhuis> piscisaureus_: ignore the third arg, it's junk that dtruss doesn't filter out
21:40 <@piscisaureus_> bnoordhuis: ah, you were wrong :-p
21:40 < bnoordhuis> impossible. heresey!
21:40 <@piscisaureus_> bnoordhuis: it's node trying to set CLOEXEC on inherited fds
21:40 < bnoordhuis> *heresy
21:41 < bnoordhuis> piscisaureus_: oh sorry, that's what i mean. CLOEXEC
21:41 < bnoordhuis> that's uv_disable_stdio_inheritance() at work
21:41 < bnoordhuis> that function was your idea btw :)
21:41 <@piscisaureus_> yes
21:41 <@piscisaureus_> and it fixed a bug or two
21:41 <@piscisaureus_> sorry about that bennetje
21:42 < bnoordhuis> geeft niet hoor bertje
21:43 < rump> events for flow control... http://wekeroad.com/2012/04/05/cleaning-up-deep-callback-nesting-with-nodes-eventemitter/  is that crazytalk?
21:45 < othiym23> rump: EEs are one of the core abstractions in Node, so it's not crazytalk
21:46 < rump> you just dont see it very often for flow control
21:46 < rump> people use callback functions
21:46 < othiym23> unfortunately the examples in that article are a little contrived, and it doesn't really make clear the advantages of using EEs over well-factored callbacks
21:46 < othiym23> I've used events in conjunction with Mocha for flow control
21:46 < rump> yeah i mean itd be different if he had many listeners for an event etc
21:47 < rump> but for simple series?
21:47 < othiym23> it's often more direct than getting something like caolan's async into the mix
21:47 < othiym23> it's just making the state machine more explicit with the edges being named
21:47 < othiym23> which could lead to more maintainable code
21:47 < rump> its actually more logical to me..
21:47 < othiym23> and it doesn't really add much (if any) overhead
21:47 < rump> reminds me js is event driven :)
21:47 < rump> but i get the sense its taboo the way he wrote it
21:48 < othiym23> the only thing that can be confusing is if you're using an EE both for control flow and for stream-like data emission
21:49 < othiym23> there are certain database drivers that have some confusion between the two that can make them difficult to work with
21:49 < rump> and if someone wanted to hook in on an event... they'd automatically cascade/continue on the event chain he created
21:49 < othiym23> yeah, which is also useful when testing / debugging
21:49 < othiym23> and for instrumentation
21:50 < rump> thats what ive been struggling with... how to keep functions modular and doing 1 thing, and then later throw them into a predetermined series
21:50 <@piscisaureus_> bnoordhuis: actually, I can replicate voodootikigod's problem on linux with a fifo
21:50 < othiym23> it's basically the same thing as using object polymorphism with the command pattern
21:50 < othiym23> and not super far off using promises with a chainable interface
21:51 < othiym23> they're all variations on CPS
21:52 < bnoordhuis> piscisaureus_: test case?
21:53 < rump> i miss returning values
21:53 < rump> the good ol days
21:53 <@piscisaureus_> bnoordhuis: https://gist.github.com/4157340#gistcomment-608963
21:53 <@piscisaureus_> bnoordhuis: er, that gist :-)
21:53 < rump> now my methods just take take take
21:54 < rump> like a bride forever after her honeymoon
21:54 < othiym23> hmm
21:54 < othiym23> not sure about your analogy there, chief
21:55 < nlf> rump: sometimes i write synchronous functions, just to feel alive
21:55 < rump> haha
21:56 < rump> it feels good to get something back
21:56 < Hotroot> With setTimeout, this is the skeleton setTimeout(callback, delay, [arg], [...])
21:56 < Hotroot> What is [arg]?
21:57 < bnoordhuis> piscisaureus_: you're opening the fifo for reading, that blocks until there is a writer
21:58 < Hotroot> Oh, I see, reread, sorry
21:59 <@piscisaureus_> bnoordhuis: yes - just like with ttys
21:59 <@piscisaureus_> bnoordhuis: but the thing is - another thread closes the FD. The close() succeeds immediately but the read() hangs
21:59 <@piscisaureus_> bnoordhuis: this is likely to happen in libuv
22:00 < bnoordhuis> piscisaureus_: it never spawns the thread, it hangs in the open() syscall
22:00 <@piscisaureus_> bnoordhuis: well, that's why you do "cat > a"
22:00 <@piscisaureus_> bnoordhuis: here's what I get for output:
22:00 <@piscisaureus_> bert@piscisaureus-mint:~$ ./a.out
22:00 <@piscisaureus_> fd: 3
22:00 <@piscisaureus_> Closing...
22:00 <@piscisaureus_> close 0
22:00 <@piscisaureus_> Closed
22:00 <@piscisaureus_> ^C
22:01 < bnoordhuis> piscisaureus_: ah, i see what you mean. that's RCU in action, that is :)
22:01 <@piscisaureus_> bnoordhuis: anyway, it's a problem if you read from /dev/xxx devices that could pend indefinitely
22:02 < bnoordhuis> piscisaureus_: that's life for you
22:03 <@piscisaureus_> eug?
22:03 < bnoordhuis> piscisaureus_: alarm(5); err = read(fd, buf, sizeof(buf)); if (err == -1 && errno == EINTR) /* interrupted */
22:03 < bnoordhuis> that could work - though not in a MT environment
22:03 <@piscisaureus_> bnoordhuis: it could work if libuv had proper fs streams :-p
22:04 <@piscisaureus_> bnoordhuis: because we'd always know which threads are processing
22:04 <@piscisaureus_> we could just pthread_signal the reading thread
22:04 < bnoordhuis> piscisaureus_: there is no pthread_signal, just pthread_kill
22:04 <@piscisaureus_> ah that
22:04 < bnoordhuis> pthreads and signals are hopelessly undefined/underdefined territory
22:07 <@piscisaureus_> bnoordhuis: if I signal the main thread after close() it works fine
22:08 < bnoordhuis> piscisaureus_: no doubt. the read() call will abort with EINTR
22:08 <@piscisaureus_> bnoordhuis: yes. and after that it sets EBADF
22:08 < bnoordhuis> all according to spec
22:08 <@piscisaureus_> bnoordhuis: yes
22:08 <@piscisaureus_> bnoordhuis: so I don't dig this "hanging"
22:08 <@piscisaureus_> even windows doesn't
22:08 <@piscisaureus_> except windows 8 :-(
22:09 < bnoordhuis> in my experience, windows hangs quite a lot, actually
22:09 < bnoordhuis> piscisaureus_: i don't know of a good solution that'll work across unices
22:10 < bnoordhuis> on linux, at least, you can signal individual threads
22:10 < bnoordhuis> though there are a few gotchas...
22:10 <@piscisaureus_> But hey, what daddy always tell you? Straighten up, little soldier
22:10 <@piscisaureus_> I am sure the problems are differnent on mac
22:10 <@piscisaureus_> there will be a fix
22:10 < bnoordhuis> i don't think he ever said that
22:10 < bnoordhuis> maybe "bring me another beer, son"
22:11 < xp_prg2> I have lost the battle and must refactor my code to be event driven and non-blocking
22:13 < EyePulp> xp_prg2: who was on the opposing side of that battle?
22:13 < EyePulp> the pro-blocking contingent?
22:14 < xp_prg2> me
22:14 < xp_prg2> the I don't like doing that club
22:15 < tzenesaurus> I'm having a slight npm issue, if someon would be willing to help.  I'm using npm install and I'd like it to put my node_modules in a different folder. Unfortunately I can't seem to figiure out how to set the prefix
22:16 < ericelliott> I'm writing web apps using browserify. In my library code, I want to fall back and expose the library on the window object if browserify is not there. I was doing: if (typeof module !== 'undefined') { module.exports = api; } else { window.foo = api; }
22:17 < ericelliott> is there a better way?
22:24 < substack> ericelliott: what users do you envision will be using modules without using a module system?
22:35 < othiym23> man, I wish CrypticSwarm would release the CPS transformers he demonstrates in http://vimeo.com/54271436
22:37 < othiym23> it seems relatively simple once you know what you're doing with esprima / escodegen, but I would love to see how he manages the execution graph with the SHA objects
22:37 < othiym23> being able to rewind and replay execution is super handy, especially for higher-order programming
22:51 < JohnMcLear> Guys what's the status on Node supporting encoded ANSI files on fs.readFile ?  I have a bunch of files users saved in notepad that I need to import to an app
22:53 < CoverSlide> i think you'd have to write your own converter
22:53 <@isaacs> nathan7: Hey, can i bug you for some zsh again?
22:54 < nathan7> isaacs: Sure
22:54 < CoverSlide> but noone uses ansi anymore
22:54 < JohnMcLear> CoverSlide..  I'm sorry to say this but windows notepad does..
22:54 < CoverSlide> noone uses windows notepad
22:54 < CoverSlide> noone
22:55 < JohnMcLear> 72% of our users do.
22:55 < CoverSlide> if you use it
22:55 < CoverSlide> you're noone
22:55 < JohnMcLear> Let's not get into this discussion please, we're all adults here.
22:55 < nathan7> No-ones happen to be enterprises at times, CoverSlide.
22:55 <@isaacs> nathan7: i just added zsh support to nave 0.4
22:55 < JohnMcLear> The app I'm working on (Etherpad) is used by a lot of large orgs that have a lot of diverse users, we like to support them all to the best of our ability. :)
22:56 < nathan7> isaacs: awesome
22:56 < nathan7> isaacs: .4.1?
22:56 < othiym23> JohnMcLear: you're probably going to want to shell out to some kind of icu utility
22:56 < FIQ> notepad sucks
22:56 <@isaacs> nathan7: yeah
22:56 < othiym23> JohnMcLear: the number of encodings that Node supports out of the box is pretty limited
22:56 < FIQ> I hope MS finally got things right with windows 8 notepad
22:56 <@isaacs> nathan7: it should sort of Just Work properly, sourcing your .zshrc files, etc.
22:57 < JohnMcLear> btw hey isaacs
22:57 <@isaacs> nathan7: it seems to still work in bash
22:57 <@isaacs> JohnMcLear: yo
22:57 < FIQ> I don't ask for a programming editor, just that it actually handles text right..
22:57 < context> i didnt know notepad still shipped with windows
22:57 < nathan7> isaacs: ..what the hell ass
22:58 < FIQ> it does on w7
22:58 <@isaacs> nathan7: it doesn't work?
22:58 < nathan7> isaacs: it is recursively invoking my zshrc or someshit
22:58 < FIQ> don't know about w8
22:58 < othiym23> JohnMcLear: I take it by "ANSI" you mean old-style text that uses the old 8-bit pre-unicode mappings for chart / symbol characters?
22:58 <@isaacs> oh..  hm.  that's not good :)
22:58 < CoverSlide> either way, what percentage of users use non-ascii characters in their ansi documents?
22:58 < nathan7> isaacs: does it do anything with .profile?
22:58 <@isaacs> nathan7: yes.
22:58 <@isaacs> er, zprofile
22:58 < nathan7> though that shouldn't matter
22:58 < nathan7> hrm
22:58 < nathan7> My .zshrc sources my .profile
22:59 < FIQ> once I accidently sourced .bashrc from .profile... and vice versa
22:59 < FIQ> go figure what happened
22:59 <@isaacs> nathan7: ok.
22:59 <@isaacs> nathan7: it doesn't source ~/.profile
23:00 <@isaacs> FIQ: i have a guard in my files for that reason.
23:00 <@isaacs> export _BASHRC_LOADED=1; if [ "$_BASHRC_LOADED" == "" ]; then ; export _BASHRC_LOADED=1; ... 
23:00 < FIQ> yeah
23:01 < FIQ> that was what I imagined :p
23:01 < FIQ> when you told about the "guard"
23:01 < CoverSlide> the guys in #bash would tell you not to use uppercase variables in your scripts
23:01 < othiym23> the guys in #bash are hostile jerks
23:01 < TooTallNate> why is that?
23:01 < FIQ> i would probably just call it "loaded"
23:02 < CoverSlide> apparently uppercase variables are reserved for system environment variables, local script variables should be lowercase
23:02 <@isaacs> othiym23: yes, they are.
23:02 <@isaacs> CoverSlide: _BASHRC_LOADED isn't a local script variable, it's a global
23:02 < nathan7> ..okay, I just segfaulted htop
23:02 < CoverSlide> ic
23:03 <@isaacs> nathan7: i have a very very minimal zsh setup (since i don't use zsh) and it seems to wokr fine
23:03 < FIQ> nathan7: gz
23:03 < gkatsev> nathan7: what were you doing to it?
23:03 <@isaacs> nathan7: are your init files anywehre that i can reproduce?
23:03 < nathan7> isaacs: a moment
23:03 < JohnMcLear> othiym23 that's a good question, looking at the file(in vi) that we dump ¬£ becomes √Ø¬ø¬Ω, doing some more investigation now.
23:04 < nathan7> isaacs: http://sprunge.us/FCCf ~/.zshrc
23:04 < nathan7> isaacs: shouldn't matter, but including anyway http://sprunge.us/QhSI .shrc and http://sprunge.us/MCje
23:04 < nathan7> isaacs: I use oh-my-zsh
23:04 < othiym23> JohnMcLear: that doesn't look like "ANSI" to me, that looks more like one of the win codepages
23:04  * JohnMcLear nods
23:04 < nathan7> isaacs: which shouldn't interfere
23:05 < JohnMcLear> joy.
23:05 <@isaacs> nathan7: oh, you have zsh++
23:05 < nathan7> isaacs: Yeah
23:05 < nathan7> isaacs: my shell is heavy as fuck
23:05 <@isaacs> nathan7: (that's my mildly derrogatory name for oh-my-zsh)
23:05 <@isaacs> nathan7: mine is as well, but it's all bash, and all in one file
23:05 <@isaacs> (mostly)
23:05 < othiym23> JohnMcLear: what happens when you point node-icu-charset-detector at one of the affected files?
23:05 < nathan7> isaacs: I am too lazy to do all that
23:06 < nathan7> isaacs: I can just flick on a few oh-my-zsh plugins and have everything the way I like it
23:06 < CoverSlide> zsh is a pita to configure by itself
23:06 < CoverSlide> zsh++ does a lot of the common stuff for you
23:06 < CoverSlide> unlike bash which works pretty well ootb
23:07 <@isaacs> nathan7: if you comment out the oh-my-zsh.sh line, does it work then?
23:07 < othiym23> JohnMcLear: once you know what character set is actually in use, you can use bnoordhuis's https://github.com/bnoordhuis/node-iconv to actually do the conversion
23:07 < CoverSlide> most people i know just use zsh++ and get on with it
23:07 <@isaacs> nathan7: i suspect it might be a matter of setting ZDOTDIR
23:07 < CoverSlide> like me
23:07 < nathan7> isaacs: ..it does
23:07 < nathan7> isaacs: hrmpf
23:07 < JohnMcLear> yea, problem is that libicu is a dep so i can't use that in production but it might help me debug
23:07 < nathan7> isaacs: yes, nave works
23:07 < othiym23> or they use a 13-year-old cargo-culted copy of somebody else's tricked-out zshrc, like me
23:08 < JohnMcLear> thanks tho othiym23 that's 2 steps forward :)
23:08 < othiym23> JohnMcLear: I don't think there's a pure JS solution, iconv and icu are both pretty large chunks of C/++
23:08 < othiym23> yr welcome
23:08  * JohnMcLear nods
23:08 < nathan7> othiym23: I just have some shit that checks if particular plugins are to be loaded
23:09 < nathan7> othiym23: http://sprunge.us/FCCf
23:09 < nathan7> othiym23: other than that, plain oh-my-zsh
23:09 < othiym23> yeah, my problem is that I'm super used to all the magical stuff that my zsh does, and I have no idea anymore which config variables control which features
23:10 < othiym23> its completion behavior is basically telepathic at this point
23:10 < nathan7> mhm
23:10 < nathan7> I need to make git-extras completion work or I'll end up never using git-extras
23:10 < othiym23> if I were going to actually change behavior that dramatically, I'd probably just switch to bash or fish-fish
23:11 < nathan7> othiym23: ?
23:11 < CoverSlide> or tcsh!
23:11 < othiym23> no, already did tcsh for a few years and am not going down that road again
23:12 < othiym23> nathan7: modern bash does basically all the things I'd want zsh to do barring my crazypants VCS-aware promptstring setup and my very specific conmpletion behavior
23:12 <@isaacs> nathan7: ok, so, it looks like nave is now zsh-compliant, but not oh-my-zsh compliant
23:12 < othiym23> not a lot of the magic zsh features like the calculator or line editor that I use on a regular basis
23:13 <@isaacs> and, as far as i can tell, once you've decided that you're going to use zsh, you're probably not going to half-ass it and not use oh-my-zsh
23:13 <@isaacs> may as well eat the whole pig at that point.
23:13 < othiym23> isaacs: I don't use oh-my-zsh and I do use zsh
23:14 < CoverSlide> calculator? why don't people just use bc?
23:14 < CoverSlide> or is it that  $(()) <-- vagina operator
23:15 < othiym23> CoverSlide: no, there's a full calculator with line editor in there somewhere
23:17 < othiym23> CoverSlide: http://opensource.apple.com/source/zsh/zsh-34/zsh/Functions/Misc/zcalc
23:18 < nathan7> isaacs: mhm
23:22 < FIQ> bc is inferior, it can't do googolplex
23:24 < Shadow_S> i have a working knowledge of node.js from reading nodebeginner and a few other things and i've made some small applications with it before. is there any book you guys would recommend to get to the next level?
23:25 < othiym23> Shadow_S: either http://smashingnode.com/ or http://ofps.oreilly.com/titles/9781449398583/
23:25 <@isaacs> othiym23: you're an anomoly :)
23:26 <@isaacs> othiym23: wanna try out nave and tell me how it works for you?
23:26 < CoverSlide> i don't read things on dead trees
23:26 < CoverSlide> it's barbaric
23:26 < othiym23> there aren't a lot of printed references for intermediate to expert Node developers
23:26 < othiym23> isaacs: sure, do I just clone the latest on github?
23:26 <@isaacs> CoverSlide, othiym23: If you read Japanese, the new japanese book is amazing
23:26 <@isaacs> othiym23: or `npm install -g nave`
23:26 <@isaacs> othiym23: or drop the nave.sh script somewhere and call it
23:26 < Shadow_S> thanks othiym23
23:26 < othiym23> isaacs: OK
23:27 < othiym23> chotto nihongo o wakarimasu
23:27 < CoverSlide> I've fully given up on nave and am using mmalecki's give
23:27 <@isaacs> CoverSlide: give is pretty nice.  different approach
23:27 < substack> Shadow_S: you can read https://github.com/substack/stream-handbook
23:27 <@isaacs> CoverSlide: similar to nave, but using git instead of the dists
23:27 < substack> work in progress book, watch it to receive new content
23:27 < othiym23> I mostly just use my own hacked-up fork of nvm
23:28 <@isaacs> CoverSlide: i don't use give because i usually want to test against the actual distributed binaries
23:28 <@isaacs> CoverSlide: and i already have git checkouts of node anyway :)
23:28 < Shadow_S> i'll definitely take a look substack
23:30 < othiym23> isaacs: WFM
23:32 < othiym23> nave is nice
23:32 < othiym23> maybe it's time to switch away from nvm
23:32 <@isaacs> othiym23: you can add $NAVE to your PS1 (or whatever zsh uses for that) and it'll show you what you got all the time
23:32 <@isaacs> othiym23: and when you exit, you're back to the place where you started
23:32 <@isaacs> othiym23: since it's a subshell
23:32 < schofld> hi
23:32 < schofld> i have a question about the API
23:32 <@isaacs> schofld: YOUR QUESTION IS DESIRED POST HASTE
23:33 < othiym23> aw, no binary builds for 0.6.x
23:33 <@isaacs> othiym23: nope
23:33 <@isaacs> othiym23: those are slow... :(
23:33 < nathan7> isaacs: any ideas on making it work with oh-my-zsh?
23:33 <@isaacs> nathan7: well... my first thought is to recruit you to help
23:33 < nathan7> isaacs: Okay
23:33 < nathan7> isaacs: I'll look into it tomorrow then
23:33 <@isaacs> nathan7: failing that, i think i'd have to just figure out a way to replicate your shell env, but... i dunno.  i'll probably just not do that.
23:33 <@isaacs> :)
23:34 < schofld> i know you can call querystring.parse("some text").text so why cant i find the .text and the other options in the API on nodejs.org/api
23:34 < nathan7> isaacs: It's 0:32 here
23:34 <@isaacs> nathan7: ahh, god old CET
23:34 <@isaacs> *good
23:34 < othiym23> isaacs: yeah, I knew how nave worked, I just like how efficient nvm is (at the expense of scribbling all over the runtiem environment)
23:34 < nathan7> schofld: because they're not part of the API
23:34 < schofld> nodejs.org/api/querystring.html i have obviously not understood how to read/interpret the api docs
23:35 < nathan7> schofld: querystring.parse("text=this&otherparam=that").text == 'this'
23:35 < nathan7> schofld: querystring.parse("text=this&otherparam=that").otherparam == 'that'
23:35 < schofld> nathan7: what are they part of 
23:35 < nathan7> schofld: of your query string
23:35 <@isaacs> schofld: querystring.parse() returns the object that is encoded int he query string
23:35 <@isaacs> > querystring.parse("a=b&c=d&c=e")
23:35 <@isaacs> { a: 'b', c: [ 'd', 'e' ] }
23:35 < CoverSlide> 90% of the time, this is how I read the API: https://github.com/joyent/node/tree/master/lib
23:35 <@isaacs> schofld: ^
23:36 < nathan7> gkatsev: can't you bring ecmabot in here?
23:36 <@isaacs> >> require('querystring').parse("a=b&c=d&c=e")
23:36 <@isaacs> oh, no purr
23:36 <@isaacs> .. require('querystring').parse("a=b&c=d&c=e")
23:37 <@isaacs> oh well, the bots are sleeping, i gues
23:37 < CoverSlide> not catbot either
23:37 < CoverSlide> *no
23:37 < nathan7> man
23:37 < nathan7> I am reading my old code
23:37 < schofld> thanks for your help BUT..sorry i am to stupid and still dont get it 
23:37 < CoverSlide> lame
23:37 < nathan7> and it makes me so sad
23:37 < nathan7> it is just piles of unreadable jQuery
23:37 <@isaacs> schofld: querystring.parse(string) --> returns an object
23:38 <@isaacs> schofld: the keys on that object are determined by the string
23:38 <@isaacs> schofld: it's like JSON.parse() in that way
23:38 < gkatsev> nathan7: I asked inimino to
23:38 < nathan7> gkatsev: coo'
23:38 <@isaacs> schofld: does that make sense?
23:38 < schofld> how can i find the list of the objects options ex .text and .password
23:39 <@isaacs> schofld: look at the string
23:39 <@isaacs> schofld: the string youer' putting into parse()
23:39 <@isaacs> schofld: parse("a=b") would return an object like: { a: "b" }
23:39 <@isaacs> schofld: parse("text=foo") would return an object like : { text: "foo" }
23:39 < schofld> oh ok 
23:39 < schofld> now i get it
23:39 <@isaacs> :
23:39 <@isaacs> :D
23:39  * nathan7 waits for the beard
23:40 < schofld> so i will try to use console.log and see what simply 'parse' outputs
23:40 <@isaacs> schofld: yes, try that
23:40 <@isaacs> schofld: javascript lets you chain things together
23:40 <@isaacs> schofld: so parse("a=b").a === "b"
23:40 <@isaacs> schofld: get it?
23:40 <@isaacs> schofld: but that's just being cute and clever.  dont' do that.
23:41 < nathan7> I am starting to believe nathan-a-year-ago was just trying to really confuse me
23:42 < schofld> thats great so how could i view what the object returns if i dont know that .text exists ?? 
23:42 < xaka> isaacs: i wish we could clone you and join to the other channels to help people like you do :)
23:42 < schofld> i cannot simply use console.log since that will return [object Object]
23:43 < nathan7> Do it in a REPL, leave the console.log out
23:43 < schofld> i would like to see something along the lines of {text: "this is my text"}
23:43 < nathan7> so run node's REPL or fire up your browser's debug consol
23:43 < nathan7> *console
23:43 < schofld> REPL ?? will try to look that up now 
23:44 < nathan7> Read Evaluate Print Loop
23:44 < nathan7> Reads a line of code, evaluates it, prints the results
23:57 < schofld> nathan7: Ok so this is what i was looking for >> console.log(util.inspect(querystring.parse("my text string")))
23:58 < nathan7> schofld: or just querystring.parse('my text string')
23:58 < nathan7> > require('querystring').parse('a=b&c=d')
23:58 < nathan7> { a: 'b', c: 'd' }
23:58 < nathan7> schofld: ^
23:59 < sechrist> is there a way to make it print nested layers deep without explicitly doing util.inspect(obj,true,15);?
23:59 < sechrist> without recompiling node
23:59 < schofld> nathan7: util.inspect shows the object's properties that it is {text:"my text string"}
--- Log closed Wed Nov 28 00:00:12 2012
