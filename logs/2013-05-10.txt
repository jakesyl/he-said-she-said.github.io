--- Log opened Fri May 10 00:00:17 2013
00:02 < othiym23> anybody going to the bnoordhuis / piscisaureus meetup at Klout tonight?
00:02 < keyosk> So for anyone that was in here earlier, having a problem making requests from a server I have in node (node is the 'client') against an apache server on a second machine (both machines are on their own private network), a very small percent of my requests are reported as 'timed out'. Now I currently have timeout set for 2 seconds, after first timeout, wait 200 ms, and re-attempt the request. In the majortiy of these cases, upon re-request it succeeds. Th
00:02 < keyosk> e problem is, there is no entry in the apache access log for the request that has 'timed out'. So we put an nginx reverse proxy on the same machine as the node to intercept and log the request, and then forward on to apache. here is 2 log entries in nginx :
00:02 < keyosk> x.x.x.x - - [09/May/2013:23:32:47 +0000] "GET /api/?someData=test&rqId=227 HTTP/1.1" 200 18 "-" "-"
00:02 < keyosk> x.x.x.x - - [09/May/2013:23:32:47 +0000] "GET /api/?someData=test&&rqId=226 HTTP/1.1" 499 0 "-" "-"
00:03 < keyosk> What's really wierd is that &rqId=226 was fired form node 2.2 seconds prior to rq=227 (the re-request)
00:03 < keyosk> But to nginx they both arrived at the SAME time stamp..
00:03 < keyosk> And is displaying http error code 499 for the 'first' request..
00:04 < nfour> well 200ms means it can be the same timestamp
00:04 < keyosk> No
00:04 < keyosk> 2 seconds + 200ms wait
00:04 < supernaut> Rantenen: thanks for your help!
00:04 < supernaut> Rantanen: thanks for your help.
00:06 < Rantanen> supernaut: Welcome
00:07 < adrivanrex_> any ways to get this?
00:07 < adrivanrex_> http://sphotos-g.ak.fbcdn.net/hphotos-ak-snc6/282256_186136724877103_1458855832_n.jpg
00:07 < adrivanrex_> the mongoDB row number
00:08 < jdelgado> adrivanrex_: Uhhh.. isn't that just the array index?
00:08 < Rantanen> keyosk: Any chance that what you're seeing in nginx log is.. Node sends message, Apache starts waiting for it to end, 2 seconds pass and node sends a new one. At this point apache realizes the first message wasn't complete, replies with 499 which nginx writes to the log - this is followed by a successful message from Node with roughtly the same timestamp?
00:08 < othiym23> adrivanrex_: what do you want it for?
00:09 < adrivanrex_> unique ID for the page
00:09 < Rantanen> ie. nginx logs the message only after it receives the 499 from Apache
00:09 < Rantanen> s/message/request/g too
00:10 < jdelgado> adrivanrex_: It's just the response array index
00:10 < adrivanrex_> ok
00:18 < someprimetime> i've got a collection that i'm augmenting with a generated score based off of another collection (so the score isn't stored in the first collection) and the problem I'm having is maintaining pagination on it when sorting from the score in descending order
00:20 < someprimetime> so basically I've got pages scored like 1. score: 99, 2. score: 84, 3. score: 34, 4. score: 0, 5. score: 0, etc.. to ten… then from eleven to 20 i've got like : 11. score: 123, 12. score: 100, 13. score: 0, etc to twenty...
00:20 < someprimetime> the problem with this of course is that the collection that has its cursor on the second page should be displaying those 2 first values on the first page
00:21 < someprimetime> since this is an overall descending sort of all submissions in the collection
00:21 < someprimetime> and not just for each particular `skip`'d section
00:21 < keyosk> Rantanen: You really think nginx is logging only on apache reply and not as soon as it receives request from node?
00:22 < someprimetime> so because 123 and 100 are > 99 and 84 they should come before it but they aren't although the reason is because I'm not actually storing the score anywhere (it's generated dynamically)
00:22 < Rantanen> keyosk: The fact that it lists the '499' which would be Apache reply for "incomplete request" kind of hints that it logs it only after it receives the reply from apache?
00:22 < Rantanen> The only other alternative is for it to save the timstamp of the node request, then wait for apache reply and log it with the request timestamp + response code
00:23 < Rantanen> My money's on the former.
00:23 < keyosk> I'm logging the first request timeout, and i'm logging the retry's success or 'timeout' as well
00:24 < keyosk> We're putting apache into debug mode logging right now to see if we can get that indication
00:24 < jdelgado> someprimetime: No one will answer your question if you can't put it in a short sentence...
00:25 < keyosk> Also Rantanen: from wiki : 499 Client Closed Request (Nginx)
00:25 < keyosk> Used in Nginx logs to indicate when the connection has been closed by client while the server is still processing its request, making server unable to send a status code back.
00:25 < someprimetime> jdelgado: Dynamically augmenting a collection and maintaining ranking through pagination in Mongoose. Need help with that.
00:26 < someprimetime> Can't really be that succinct with this question since I've never come across it so I don't know what to search for
00:34 < AAA_awright> someprimetime: You'll have to calculate all the intermediate results and discard them then
00:34 < AAA_awright> Or just store the value you want to page by inside the database
00:34 < AAA_awright> You should really be doing the latter
00:36 <@isaacbw> #mongodb would be a better place to ask
00:38 < someprimetime> AAA_awright: the reason I neglected to store the value within my `submissions` collection is because I thought it'd be expensive if you have a lot of changes to it (e.g. a user can vote up or down a lot thus reflecting a change in score)
00:38 < AAA_awright> someprimetime: That's probably less expensive than calculating it on the fly
00:39 < AAA_awright> If you're chancing *all* the documents on *every* vote due to some eccentric ranking algorithm, then yeah, MongoDB isn't your choice of database
00:40 < someprimetime> AAA_awright: so every time someone votes I'd need a `pre` save function on the SubmissionVotesSchema that essentially pulls all votes for that particular submission, and then updates my SubmissionSchema and adds the newly calculated `score`
00:40 < AAA_awright> You mean updates?
00:40 < AAA_awright> It's a rather simple operation to update a single numeric field in MongoDB
00:41 < someprimetime> I know *how* to do it.. but the reason I opted to not do it was because I thought that'd be expensive on each vote
00:41 < someprimetime> this is essentially a reddit clone
00:41 < jdelgado> someprimetime: That's really the only way to do it.
00:41 < someprimetime> where you can vote up (that's a new addition.., vote down.. that's either an addition or an update.. or remove your vote which is a removal
00:42 < AAA_awright> someprimetime: It's less expensive than maintaining and summing all the individual votes
00:42 < someprimetime> AAA_awright: ok … and the reason I chose mongodb was because it worked nicely with node/express
00:42 < jdelgado> someprimetime: Websites like Youtube have blurry voting, which store the amount of up/downs and can calculate an overall quickly. Maybe that it better for your system.
00:42 < someprimetime> and I wanted to kind of try something new
00:42 < AAA_awright> I don't see any conflict there, it's a nice choice
00:42 < someprimetime> Hm I'll look into blurry voting never heard of it 
00:42 < AAA_awright> Blurry voting?
00:42 < someprimetime> thanks for the help I'll go with that way
00:42 < someprimetime> Yeah
00:43 < someprimetime> ah I'm used to hearing s/blurry/fuzzy
00:43 < someprimetime> nvm
00:43 < AAA_awright> someprimetime: I'd keep a collection/table listing the individual votes, and every time it changes, THEN sum up the votes and update the document. But there should be no need to sum the votes every read request.
00:43 < AAA_awright> I'm familiar with fuzzy math but I'm not sure how you'd use it in your application
00:43 < jdelgado> AAA_awright: It's the same as what you described, but it basically assumes values, since you can't do a true percentage on the spot.
00:44 < jdelgado> AAA_awright: Well, you can, but if you simply store the value of ups/downs, you cannot. :)
00:45 < AAA_awright> My more advanced voting algorithms involve linear algebra and huge matrices, those aren't suitable for MongoDB
00:45 < someprimetime> AAA_awright: I do current have a separate collection for all the votes for a submission.. they are related to the submissions collection by `submission._id === votes.submission_id` but when I'm doing the paging, that's when I run into the issue of fragmenting the scores 
00:46 < jdelgado> AAA_awright: Which is why you grab the upvote and downvote column from mongo and run it yourself
00:46 < AAA_awright> jdelgado: I still don't get it, YouTube seems to know what I've voted up/down in the past, if they don't even want to go through the trouble of summing votes, they can see how I'm changing just my vote and increment or decriment the vote tally as necessary
00:46 < AAA_awright> Without summing potentially millions of votes
00:46 < AAA_awright> And that's exact
00:47 < AAA_awright> someprimetime: Yeah I'd put each vote as their own document, and make sure that collection is indexed
00:47 < jdelgado> AAA_awright: Ok - When you vote something, it adds to the video's overall and it adds it to a collection of user votes. When loading the video, instead of tallying all the users, it grabs that video's overall. If you try to vote again, it gravs the users votes.
00:47 < AAA_awright> because that can grow without bound
00:48 < jdelgado> AAA_awright: Make sense?
00:48 < AAA_awright> jdelgado: That sounds like what I just suggested
00:48 < AAA_awright> someprimetime: But the total number of votes doesn't grow without bound, it's constant size, so put that in with the resource being voted on
00:49 < AAA_awright> It's not any more expensive than the collection of votes, less expensive if anything actually
00:50 < SrPx> Is there a way to wrap something around browserify's output, using the stream? echo "<html><script>" > browserify my_file.js > echo "</script></html>" > my_file.html
00:50 < SrPx> Something like that.
00:52 < someprimetime> AAA_awright jdelgado this is more or less my code: http://pastebin.com/By0CjtUa
00:52 < AAA_awright> SrPx: Sounds like a job for Makefiles
00:52 < AAA_awright> Unless "cat" can accept - as an argument
00:52 < SrPx> AAA_awright: makefiles? No idea
00:53 < AAA_awright>        cat f - g
00:53 < AAA_awright>               Output f's contents, then standard input, then g's contents.
00:53 < SrPx> I thought they were for... C etc?
00:53 < AAA_awright> SrPx: Anytime you're building one file whenever another changes, Makefiles to the rescue
00:53 < SrPx> but what is a makefile? is it something special or just a shell script?
00:53 < AAA_awright> For what you're doing, it's trivial
00:54 < SrPx> hm
00:54 < AAA_awright> It should really be broken up into two recipies, but you could do:
00:55 < SrPx> AAA_awright: This is still confusing enough for me... echo "lol" creates a stream... but that's just what cat does...
00:57 < AAA_awright> SrPx: Cat outputs content from a file or stdin, use - to represent stdin. cat will also print from stdin if there are no arguments at all
00:57 < AAA_awright> It's a useful quick way to turn off colors, e.g. interactive_program|cat
00:58 < AAA_awright> SrPx: http://pastebin.com/2mydsNXW
00:58 < SrPx> AAA_awright: what I could do?
00:58 < SrPx> Oh lord
00:59 < AAA_awright> SrPx: Lord?
01:00 < SrPx> this all is just a command? how do I type the extra lines in the terminal? 
01:00 < AAA_awright> SrPx: Save that as Makefile
01:00 < AAA_awright> then type `make`
01:00 < SrPx> oh
01:00 < AAA_awright> That's it. $@ represents the target file, $< represents the first listed input file
01:01 < SrPx> but then I'll have to create a makefile for each file I convert?
01:01 < AAA_awright> Add recipies as necessary, just like that
01:02 < AAA_awright> Or you can do a pattern
01:02 < AAA_awright> Convert all files like src/%.js -> browserify/%.js
01:02 < SrPx> AAA_awright: this is just a vim command that converts the file when I save
01:02 < AAA_awright> SrPx: The first target in the Makefile is default, usually it's named "all" and depends on everything that should be built, if you want to build multiple files
01:03 < SrPx> I have no idea how I'll make vim create a makefile with the right contents ):
01:03 < jdelgado> SrPx: Just use grunt, much more usefull
01:03 < Rantanen> Right. I've made the decision to bundle the compiled binaries into the module. Now the next question would be the syntax to embed current configuration string to binding.gyp? The obvious <(configuration) didn't work.
01:03 < SrPx> jdelgado: hm?
01:03 < AAA_awright> jdelgado: How do you get more useful than a Makefile?
01:03 < jdelgado> SrPx: www.gruntjs.com
01:04 < AAA_awright> You can't, really
01:04 < jdelgado> AAA_awright: For real? Literally everything has a plugin. Amazing for development.
01:05 < AAA_awright> jdelgado: In unix-land we call those programs
01:05 < jdelgado> AAA_awright: Huh?
01:05 < lohkey> a make file and a bin directory == profit
01:06 < SrPx> jdelgado: that sounds really really great, but all I wanted was a command that converted a .js to .html so I could trigger it from vim when I saved a file :/
01:06 < AAA_awright> SrPx: Did you try the Makefile? That should do exactly what you want
01:07 < jdelgado> SrPx: I'm just trying to start you off on the right foot. You can do that with grunt, and a plethora of other things.
01:07 < AAA_awright> I use them for everything from building Node.js programs to building entire AWS images, any time one file needs to be built from another
01:08 < AAA_awright> jdelgado: I'd not like to encourage re-inventing the wheel
01:08 < SrPx> jdelgado: I know, it is nice.
01:08 < AAA_awright> Oh noes, my favorite tool is written in C
01:08 < AAA_awright> How can I develop ECMAScript when it's written in C or C++ /s
01:08 < SrPx> but really no point in learning something new at this point
01:09 < jdelgado> AAA_awright: Bro, I'm not trying to start an argument, I'm not sure why you are..?
01:09 < Rantanen> (echo "<html><body>" && cat htmlfile && echo "</html></body>") > newfile
01:09 < BobAlmighty> Hey guys, I'm having an issue installing Socket.io as a global package on my windows 7 x64 machine. I did find an article about C++ reditributable 2010 causing trouble. I uninstalled everything. Re-installed VS C++ 2010 express, updated SP1, installed compiler SP1. The error has gone away, but the package still isnt' installing.
01:09 < BobAlmighty> I'm not getting warnings which I don't think matter when it tries to recompile.
01:09 < AAA_awright> Oh yeah that works too
01:10 < Rantanen> Guess AAA_awright wasn't familiar with these fancy pipes we got here in the unix land. ;)
01:10 < BobAlmighty> This is specifically the node-gyp package I think
01:10 < AAA_awright> Rantanen: If you're trying to do a single command, at least
01:10 < AAA_awright> That doesn't solve the problem of re-typing it every time
01:11 < Rantanen> 01:02:28 < SrPx> AAA_awright: this is just a vim command that converts the file when I save
01:11 < Rantanen> That's what vimrc is for
01:11 < AAA_awright> Oh you're literally inside vim
01:11 < havvy> !learn add typescript=http://typescript.org TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.
01:11 < BobAlmighty> Pastebin of my CMD
01:11 < BobAlmighty> http://pastebin.com/k6NargTC
01:12 < havvy> (Wrong channel)
01:12 < jdelgado> havvy: Lol, I was wondering what you were trying to accomplish
01:12 < SrPx> Rantanen: yea dude, listen, I just want a line command that will convert a file to browser. "browserify my_file.js" converts it to javascript. I need to further wrap my_file.js with html tags.
01:13 < SrPx> I am currently creating helper files for that, but this is slow. I wanted to do it "correctly", directly on the output streams
01:13 < AAA_awright> SrPx: Yeah, add "make" to your post-save commands, and keep a Makefile around, then you can re-build all the files you need them. And other people can easily see how to re-build the files too, maybe they use "watch" or other tools to trigger re-building.
01:13 < Rantanen> SrPx: (echo "<html><body>" && browserify % && echo "</body></html>)
01:13 < BobAlmighty> Anyone had any luck installing socket.io via NPM on a windows 7 x64 machine?
01:13 < Rantanen> Assuming 'browserify my_file.js' outputs to stdout
01:13 < SrPx> "convert a file to browser" = "convert a .js to a browserified .html"
01:13 < SrPx> let me see
01:14 < Rantanen> It should if you don't specify outfile with -o
01:15 < ChrisPartridge> BobAlmighty: what issue are you having?
01:15 < SrPx> Rantanen: yes! Thank you very much. I wish I understood what you've done, I read half a book on unix commands and it didn't even mention && ! :(
01:15 < AAA_awright> Also consider you can't just put ECMAScript into HTML, it often has > and < characters that need escaping
01:15 < Rantanen> SrPx: && just ties the commands together pretty much
01:15 < SrPx> AAA_awright: but I'd need to do that for every single file, that's the problem
01:15 < AAA_awright> SrPx: How many files?
01:15 < Rantanen> That might even work with (echo ..; browserify %; echo ..) - not sure. && continues execution only if the previous command succeeded.
01:15 < BobAlmighty> ChrisPartridge: I was getting an error while trying to install. I re-installed VS 2010 express, SP1, compiler SP1, and tried again. Now I'm gettin http://pastebin.com/k6NargTC
01:16 < BobAlmighty> It doesn't look like it's installing
01:16 < SrPx> AAA_awright: I want to be able to just create a new file, type in some code, press "r" and yay, it's an html app...
01:16 < SrPx> AAA_awright: but good point
01:17 < AAA_awright> So arbritrary files... I'm not sure how to script that on vim, but Rantanen has the right idea
01:17 < BobAlmighty> Do things installed with -g, not show up in "npm ls"
01:17 < ChrisPartridge> BobAlmighty: and you install the win7 sdk?
01:17 < BobAlmighty> Am I that stupid?
01:17 < SrPx> AAA_awright: yea, that solved it
01:17 < BobAlmighty> ChrisPartridge: Yes I installed win7 sdk
01:17 < SrPx> thank you all btw! (:
01:17 < BobAlmighty> Well everything but the samples.
01:20 < BobAlmighty> okay okay okay, wait.
01:20 < BobAlmighty> If you install something with -g
01:20 < BobAlmighty> how the hell do you tell if it's installed
01:20 < Rantanen> AAA_awright: '%' expands to the path of the current file, which I'd guess would be most useful.
01:20 < BobAlmighty> I just installed another package, and "npm ls" shows empty
01:21 < Rantanen> And I'm still looking for someone who can use node-gyp >.>
01:21 < substack> SrPx: cat <(echo '<html><body><script>') <(browserify main.js) <(echo '</script></body></html>')
01:22 < BobAlmighty> I have no clue what node-gyp is, but I guess socket.io uses it
01:22 < ChrisPartridge> BobAlmighty: try add -g to npm ls
01:22 < Rantanen> BobAlmighty: It's the system used for crossplatform builds
01:22 < BobAlmighty> That makes sense
01:22 < Rantanen> substack: Out of curiosity, is there a benefit of doing it that way instead of (echo && browserify && echo)?
01:23 < substack> either works
01:23 < BobAlmighty> ChrisPartridge, I swear I tried -g, but clearly I'm stupid.
01:23 < BobAlmighty> It works
01:23 < BobAlmighty> and it's installed
01:23 < ChrisPartridge> great
01:23 < BobAlmighty> Sorry to waste your time
01:23 < ChrisPartridge> but now, why do you want to install socket.io globally? :P
01:23 < BobAlmighty> Lazy
01:23 < BobAlmighty> I have a couple things I'm playing with that need it and I was setting up a new dev machine
01:25 < BobAlmighty> Mostly I work off my laptop which is an Apple. Never really done any node work in windows.
01:29 < SrPx> substack: thanks, weirdly it doesn't work on node.js's exec (it works if I simply paste the command it's using on the terminal. weird)
01:29 < SrPx> With the error /bin/sh: -c: line 0: syntax error near unexpected token `(' /bin/sh: -c: line 0: `cat <(echo "<html><body><script>")'
01:30 < myndzi> if you receive more than one header with the same name (eg Set-Cookie), it's stored as an array under the key name in incomingMessage.headers?
01:32 < substack> SrPx: because those are bash-specific
01:33 < SrPx> substack: interesting. Just wondering, browserify --ig returns pretty fast on the terminal, but it is actually still writing the file, right? Because my automation tool automatically refreshes chrome after browserify returns, but I get a 404 error, as in, the HTML file is not there yet. 
01:53 < ChrisPartridge> SrPx: how are you running browserify with your automation tool?
01:53 < MrTrick> I've generated a string that I need to pass to an executed program's stdin, from node.js. The child process documentation only talks about streams. Any suggestions on how I should pass the string to the program?
01:54 < SrPx> ChrisPartridge: by automation tool I mean running a node.js script to perform the shell commands, and it was a timing mistake of mine, chrome was reloading on the beginning of the program. everything is awesome now, thanks guys!
01:54 < ChrisPartridge> SrPx: ok, just note you can use browserify programmatically iirc
01:55 < SrPx> ChrisPartridge: not to make a .html though, my current workflow is: program in livescript > press R > see the resulting app running on chrome (and for that it does ls > js > js_bundle > html > reload all in a sec)
01:55 < SrPx> (:
01:57 < dazoe> Anyone have a use for elliptic curve cryptographic in node? My first stab at a node c++ addon https://github.com/dazoe/ecc
02:00 < AAA_awright> dazoe: I'd just use OpenSSL or similar
02:01 < dazoe> AAA_awright: it uses openssl
02:02 < julianduque> substack: baudio is amazing, I think I will begin some music experiments with it <3
02:03 < garthk> Dangit. This switching to new-streams stuff is harder than I thought. :)
02:05 < AAA_awright> Then don't?
02:05 < AAA_awright> If you process data as a stream, byte by byte, then event streams are exactly what you want
02:05 < MrTrick> Hmm, can I just do `var stream = new Stream.Readable(); stream._read(size) { this.push(myString); }` ?
02:05 < garthk> AAA_awright: Kinda stuck halfway, now. 
02:07 < garthk> AAA_awright: I take data streams to object streams and back, trying to keep back-pressure. New streams seem to perform better if treated properly.
02:07 < AAA_awright> back-pressure?
02:07 < garthk> Though, I might have changed two things at once, there. Aah, well.
02:08 < garthk> AAA_awright: if the destination stream can't keep up, slow down reading from the source to avoid running out of memory. 
02:10 < AAA_awright> garthk: Congestion control
02:12 < garthk> AAA_awright: substack calls it back-pressure. Nobody else on NodeUp fights him on the term. I figure that's good enough for me.
02:12 < garthk> … for all the good that randomly picked authority figures can grant. :)
02:12 < AAA_awright> I figure the highest authority should be the specifications themselves
02:12 < substack> prescriptivist busy-bodies
02:17 < blizzardctx> hello
02:18 < blizzardctx> does anyone know if socket.io using redisstore sends the same information to all nodes?
02:20 < garthk> Phew! Not dropping any data while using dominictarr's stuff to tie together new streams.
02:25 < MrTrick> How do I connect a readablestream to a writable stream? Eg I want to send child.stdout -> http.response
02:25 < ChrisPartridge> pipe?
02:25 < MrTrick> ah. :-) Thanks.
02:26 < havvy> http://pastebin.com/RPeAT6FF
02:27 < ChrisPartridge> havvy: /kick RainbowDash ? :)
02:27 < havvy> He's an IRC OP.
02:28 < havvy> Also, it's an invalid reason for kicking in that channel.
02:32 < mst1228> is it possible you use node.js along with casperjs to get realtime feed back about the casper process in a browser?
02:33 < mst1228> ex: i have written a casper script to do some automation that works great from command line.  I want to be able to send some POST data to a web service, and have the casper script run according to that data, but be able to see the logged messages in the browser while it's happeneing
02:34 < mst1228> i've read about Spookyjs node module, has anyone used that?
02:34 < myndzi> casper scripts aren't running under node
02:34 < myndzi> you could perhaps include the node libraries explicitly
02:34 < myndzi> or
02:35 < myndzi> you could launch the casper process and read the stdin
02:35 < mst1228> yeah that would work to read stdin
02:36 < mst1228> and then emit an event whenever new data is read?
02:37 < mst1228> nm that, i'm going to check it out
02:37 < mst1228> thanks
02:38 < Rantanen> Eh. How am I supposed to give variables to node-gyp? node-gyp rebuild -Dsdkdir=/usr/sdk doesn't seem to work.
02:50 < Rantanen> Nevermind. --sdkdir=/usr/sdk seems to do it.
02:51 < MrTrick> aha! s/send\(stdout\)/end\(stdout, 'binary'\)/ fixed it.
03:21 < tehroflmaoer> hey, what would be the best way to keep state of a small amount of data, like an array of less than 10 entries, or a single integer?
03:21 < tehroflmaoer> right now I'm just using a global variable
03:28 < ChrisPartridge> tehroflmaoer: you could use a singleton
03:28 < ChrisPartridge> better than a global imo
03:28 < adamsmeat1> isnt a singleton a global?
03:29 < BobAlmighty> Not always
03:30 < BobAlmighty> Singleton pattern means you only return a new or the same object.
03:31 < ChrisPartridge> ^
03:32 < T-Co> Is it in anyway possible to "move" nodes from one jsdom to another?
03:32 < T-Co> At least importNode is not implemented in jsdom...
03:37 < T-Co> Or am I trying to optimize too far. Are there any real performance implications if I'd use just innerHTML?
03:41 < AAA_awright> tehroflmaoer: What are you trying to do
03:51 < tehroflmaoer> Basically I have a list of users that accumulates until its length is 10, and then it resets
03:54 < sahat> Is there an IRC channel for Express web framework?
03:54 < px> yes
03:55 < sahat> what is it px?
03:56 < AAA_awright> #express iirc
03:56 < AAA_awright> sahat: Or just hang out here
03:56 < px> yes it's express
03:56 < px> but not all that active
03:56 < ChrisPartridge> px: feel free to ask express questions here
03:56 < sahat> Thanks, will do.
03:57 < px> im scared of express 3 :/ still hanging out on 2.5.9 for old projects 
03:59 < ChrisPartridge> px: why?
03:59 < ChrisPartridge> it isn't much work to go from 2->3
04:00 < px> the order of res.send arguments probably is the most scary
04:00 < px> yes just worried about overlooking something
04:01 < sahat> Is there an easy way to enable caching for Jade templates?
04:02 < sahat> In Express 3 that is.
04:04 < ChrisPartridge> sahat: it's enabled by default when in production
04:08 < sahat> ChrisPartridge: Hmm ok thanks. Then caching is not the issue.  I am using Ratchet UI framework (similar to jQuery Mobile), and every time I switch tabs on the bottom, tab icons flicker on page transition like it's trying to load and render them every single time.
04:09 < blizzardctx> does socket.io really scales?
04:12 < sahat> ChrisPartridge: On a related note, do I need to specify somewhere in Express "Enter production mode" or will it be done automatically when I deploy my application to Heroku or AppFog?
04:14 < ChrisPartridge> sahat: it comes from the NODE_ENV environment variable
04:16 < ChrisPartridge> blizzardctx: simple answer, yes - but obviously depends on your application as to how you would scale
04:19 < mscdex> node.js rules!
04:19 < TehShrike> word
04:19 < ChrisPartridge> ^
04:22 < LegCow> Hnnng! lh c:\dos\mscdex.exe /d:mscd001
04:33 < codingstream> what would you recomend i use to pipe a readstream to two write streams, but have the two write streams be independant and not flow one after the other?
04:34 < codingstream> or just do it on two lines?
04:44 < adrivanrex_> hey guys what's new?
04:44 < TehShrike> generators in V8, from what I hear
04:48 < leichtgewicht> es6 ... looong way to go:
04:48 < leichtgewicht> http://t.co/3ccRzsTAeT
04:49 < TehShrike> It's working its way towards Chromium 29 apparently?
04:49 < leichtgewicht> The first column will take a while.
04:50 < LegCow> do they ever remove things from javascript? o.O
04:50 < leichtgewicht> LegCow: "use strict" (opt-out-of-bad-stuff)]
04:50 < LegCow> so many ways to do something
04:51 < LegCow> yeah, i've started doing that
04:51 < gildean> using strict removes like two things (not saying you shoulnd't use it tho')
04:51 < LegCow> alters behaviors as well
04:51 < TehShrike> It checks against accidental globals
04:51 < gildean> yeah, i just meant it doesn't really remove all that much
04:52 < TehShrike> I once spent hours tracking down a bug that would have caused an error if I'd been using strict there
04:52 < LegCow> backward compatibility sometimes seems like a curse
04:53 < havvy> LegCow: It is a curse.
04:53 < TehShrike> It's definitely a curse
04:53 < TehShrike> But it comes with making things
04:53 < TehShrike> Which is generally good
04:53 < TehShrike> So, you know
04:54 < LegCow> Things should have a life span, can't rely on software remaining alive forever. just promise terrible code reuse
04:54 < LegCow> promotes*
04:54 < garthk> Trying to read node-tick-processor results from v8.log…
04:56 < leichtgewicht> document.all is but a memory from the past :)
04:56 < garthk> 59    3.3%   27.7%  LazyCompile: ChunkyThrough_transform ~/lib/chunky.js… ok, so that's 27% of my time not spent in the libraries being… what, compiling this thing again and again? But it's only 3.3% of the overall runtime?
05:02 < adrivanrex_> why there are so many people join and  leave are they bots?
05:02 < adrivanrex_> botnet
05:07 < ChrisPartridge> adrivanrex_: that's typical IRC noise
05:08 < adrivanrex_> lol
05:08 < adrivanrex_> what you doin?
05:10 < adrivanrex_> so boring shit
05:11 < wiherek> hi. does anyone have experience with running nodejs through drupal integration in a multisite environment?
05:11 < adrivanrex_> drupal is php
05:12 < havvy> wiherek: Probably not...
05:12 < adrivanrex_> hehe
05:12 < adrivanrex_> you can try this http://nodecms.cube-space.net/
05:13 < adrivanrex_> but it's under development
05:13 < wiherek> nodejs integration is a module for drupal, with a v1.2 release. stable and everything. Basically ive got it working, but there are some issues with the multisite setup
05:14 < adrivanrex_> samples?
05:16 < wiherek> here is a working demo http://chatroom.int3c.com/test-chatroom
05:17 < adrivanrex_> ahh I see nice
05:18 < adrivanrex_> cant send anything
05:20 < wiherek> you wont be very helpful, will you :) i have an issue with a specific configuration
05:21 < adrivanrex_> yeah lol
05:23 < adrivanrex_> why it's very slow?
05:25 < k_89> i want to work with media files, make audio filters, and apply those custom made audio filters on them, don't know where to start on this, and can't find anything concrete via googling, can anyone point me to something 
05:29 < wiherek> adrivanrex - cause theres some overhead
05:30 < wiherek> the messages get stored as comments (entities) in a db
05:30 < wiherek> or so it should work.
05:30 < leichtgewicht> k_89 Libav / ffmpeg?
05:31 < leichtgewicht> http://www.openframeworks.cc/documentation/sound/ofSoundStream.html#show_getSoundStream
05:31 < leichtgewicht> all not really node related. 
05:32 < leichtgewicht> Because most of the processing is CPU intensive -> written in C
05:32 < k_89> leichtgewicht, thanks a ton ! :D
05:32 < leichtgewicht> k_89: JavaScript based: http://audiolibjs.org/
05:33 < k_89> wow, that rocks
05:33 < k_89> :D
05:48 < AAA_awright> Permissions are difficult
06:30 < sinclair|node> so, i think it should be possible to entirely embed TypeScript into nodejs
06:30 < sinclair|node> such that, you can code nodejs with pure TypeScript (with the exception of some embedding stuff)
06:31 < sinclair|node> and, have it compile on the fly and have it preform as if you were just running JS
06:31 < sinclair|node> anyone want to discuss this ?
06:33 < sinclair|node> AAA_awright: how about you?
06:33 < AAA_awright> Why me
06:33 < myndzi> i'd like to discuss how to get the HTTP message from a client request :P
06:34 < myndzi> i can get the status code, but not the text?
06:34 < AAA_awright> sinclair|node: You'd think right
06:34 < sinclair|node> AAA_awright: ?
06:34 < ningu> myndzi: listen for the data event, it's a stream like usual
06:34 < ljharb> sinclair|node: i don't understand why you'd need the typescript itself to be part of the node app.
06:34 < myndzi> no, i mean the text of the header response
06:34 < sinclair|node> ljharb: i don't like JavaScript
06:34 < myndzi> HTTP/1.1 500 Some Text Here
06:35 < ljharb> sinclair|node: i think you could make it work just the same with an npm module that ran in the background and watched your ts files for changes, and compiled them to js, without modifying require.extensions
06:35 < ljharb> sinclair|node: then node is probably a poor choice
06:35 < sinclair|node> ljharb: node is a platform i like
06:35 < ningu> myndzi: oh, right. hmm, not sure, I never tried to do that
06:35 < ljharb> sinclair|node: but i'm not suggesting avoiding typescript in this particular discussion
06:35 < sinclair|node> ljharb: javascript is rubbish imo tho
06:35 < ljharb> lol
06:35 < ljharb> it's really not
06:35 < ljharb> and node is built on it.
06:35 < ljharb> so, if it's rubbish, so is node.
06:35 < myndzi> a-digging in the source i go again :P
06:36 < AAA_awright> ljharb: Not necessarially
06:36 < ljharb> AAA_awright: not all of node is built on it. but much.
06:36 < ningu> what about Mr. Rubbish?
06:36 < AAA_awright> You can make a distinction between "ECMAScript is amazing!" and "Node.js is an amazing library (exposed through ECMAScript)"
06:36 < sinclair|node> ljharb: there are plenty of options out there that have the same characteristics as JS
06:36 < ljharb> so then build a platform on those options. this is node.js.
06:37 < ljharb> the reason node and npm is so awesome is because of javascript.
06:37 < AAA_awright> And there's nothing wrogn with ECMAScript
06:37 < ningu> the point of node is not to be an amazing library. javascript is not a coincidental part of it
06:37 < ljharb> it's core to it.
06:37 < AAA_awright> And it is supposed to be called ecmascript guys, despite the .js at the end of "node"
06:37 < sinclair|node> ljharb: im not arguing the choice for JS, it is responsible for the platforms success, but JS is rubbish as a language, i don't need to go into details why, they are well known
06:38 < ningu> you could do something very much like node in another language, in fact people have in the past and probably will do so again, but there are reasons node is different from, say, python's twisted
06:38 < ljharb> that's a totally ridiculous statement
06:38 < ningu> although the reasons are a bit comple
06:38 < ningu> x
06:38 < sinclair|node> ljharb: no its not at all
06:38 < AAA_awright> sinclair|node: Alright now we're just being slanderous. What rubbish?
06:38 < ljharb> you're the only one ever in here who dislikes javascript.
06:38 < AAA_awright> It's far superior to most languages
06:38 < sinclair|node> AAA_awright: in what way?
06:38 < ljharb> it's not "well known" since npm, one of the biggest communities in ANY language, is almost entirely javascript.
06:39 < sinclair|node> ljharb: npm is a mess
06:39 < myndzi> dat response object, dayum
06:39 < ljharb> lol
06:39 < AAA_awright> ljharb: Well that's probably going to happen, I wouldn't be caught dead hanging out in the python channel
06:39 < ljharb> for anyone you can find that thinks its rubbish, i can find someone who thinks it's the best, which makes neither opinion valid.
06:39 < AAA_awright> ... I wouldn't be caught alive either
06:39 < sinclair|node> ljharb: i could count the worthwhile projects on there with one hand
06:39 < ljharb> AAA_awright: lol, exactly. why would you want to hang out in a <language> room when you hate the language?
06:39 < ljharb> sinclair|node: that's not only very subjective, but very incorrect.
06:40 < ningu> sinclair|node likes to make categorical statements without attempting to justify them
06:40 < sinclair|node> ljharb: look, too bad if you take offense to be not liking JavaScript
06:40 < AAA_awright> It's one of the top languages
06:40 < ljharb> worthwhile to some people is worthwhile. end of discussion.
06:40 < sinclair|node> i like node, i don't like having to code it in javascript
06:41 < ljharb> sinclair|node: initially i was suggesting a more responsible way of achieving your typescript goals. now i'm taking offense to your incorrect and arrogant attitude, that smacks of a java programmer, which is "well known" to be a really shitty language.
06:41 < ningu> and I like planes except it's so annoying that they go up in the air
06:41 < ljharb> lol
06:42 < sinclair|node> ljharb: my opinion is different than yours, this place is notorious for going off topic when someones opinion differs
06:42 < ljharb> true
06:42 < ljharb> you're the one that started assaulting the language that every single person in here uses.
06:42 < sinclair|node> back to the topic, i think it is possible to embed TypeScript in nodejs, with little overhead
06:42 < ljharb> it may be possible. but it's inadvisable.
06:42 < AAA_awright> There is no topic in here :p
06:42 < sinclair|node> keep on topic
06:42 < AAA_awright> Just the conversation
06:42 < ljharb> because you have to modify require.extensions to do it.
06:42 < ningu> AAA_awright: I see one right up there
06:42 < ljharb> and my suggestion achieves the same goal, without doign that.
06:43 < sinclair|node> ljharb: no you don't
06:43 < AAA_awright> ningu: Not /topic
06:43 < AAA_awright> a.k.a. TOPIC
06:43 < ningu> wait... the /topic isn't the topic? they've lied to me all this time
06:43 < kenperkins> ljharb you need more sleep
06:43 < AAA_awright> ningu: I'm clearly not referring to the channel TOPIC
06:43 < sinclair|node> ljharb: adding extensions to require is completely optional, its just that people felt that made the most sense 
06:44 < sinclair|node> there are some good points to using require() tho, as node will cache modules 
06:44 < AAA_awright> sinclair|node: I don't see any reason it shouldn't be natively supported, like a nodets binary
06:44 < AAA_awright> Shared library where it makes sense
06:44 < ljharb> sinclair|node: the module cache doesn't matter anyways, since you're compiling on the fly
06:44 < ningu> in case anyone forgot, sinclair|node is categorically opposed to require() returning a function
06:44 < ljharb> every time you have to recompile, you have to hit the disk anyways
06:44 < ljharb> so the require cache is irrelevant
06:44 < ljharb> lol, what?
06:44 < ljharb> require should return a function most of the time.
06:45 < ljharb> modules should export one thing.
06:45 < AAA_awright> require can return a function but should probably
06:45 < AAA_awright> Wat
06:45 < sinclair|node> ljharb: the thing is, you project grows really really large, you run into really long compile times
06:45 < ljharb> well sure
06:45 < ljharb> don't make a large project
06:45 < ljharb> that's just a poor project design.
06:45 < sinclair|node> ljharb: no its not, its reality 
06:45 < ljharb> use lots of really small modules
06:45 < ljharb> lol
06:46 < AAA_awright> ljharb: About 1/3 of my modules are libraries of things, there's no way to sanely make a new require('function') for each of them
06:46 < ljharb> reality is that large apps are harder to maintain, to scale, to test, etc.
06:46 < ningu> ljharb: ok, so would the node community say not to build, say, amazon in node? or would they just say not to do it as a single large project?
06:46 < ljharb> AAA_awright: if you have a library that exports 10 things, fine, but inside your module, you should be requiring 10 separate mini modules
06:46 < sinclair|node> ljharb: im not completely adverse to splitting things out as modules, but it goes against the grain in someways im too tired to explain
06:46 < ljharb> ningu: perfect example! amazon internally is a bunch of tiny apps. they are NOT a large app at all.
06:47 < ljharb> amazon uses a service-based architecture. every single service is a tiny tiny tiny little black box, that's well tested and has a well-documented API
06:47 < AAA_awright> ljharb: Considering that Node.js purposefully makes it very hard to expose those "mini modules" when in the same package, I don't see the benefit
06:47 < ningu> ljharb: yeah, but there is some common look and feel and other functionality... it's still a large thing to manage even if you can split it up
06:47 < ljharb> AAA_awright: i don't know what you mean? module.exports = {a: require('a'), b: require('b')} etc
06:47 < havvy> If by mini-module, you mean a module that has one and only one function, I disagree with that.
06:47 < ljharb> havvy: not necessarily
06:47 < ljharb> i just mean conceptually small
06:47 < ljharb> the "export only one thing" thing is more of a guideline.
06:48 < AAA_awright> ljharb: That's way too many files to handle in a single package. Why do that when you could just use one file.
06:48 < sinclair|node> ljharb: why have a small module?
06:48 < ljharb> ningu: of course, i'm not saying large systems aren't large
06:48 < ljharb> sinclair|node: smaller API surface, easier to test, easier to refactor
06:48 < sinclair|node> ljharb: why not have your entire application loaded as one module?
06:48 < AAA_awright> e.g. https://github.com/Acubed/contenttype/blob/master/contenttype.js
06:48 < ljharb> sinclair|node: because then every change could break everything.
06:48 < ningu> ljharb: well the other night here he said, modules are modules and functions are functions; don't "fluff things up". so it doesn't surprise me that he wants to make JS statically typed. :)
06:48 < ljharb> sinclair|node: with small pieces, a change risks breaking a much smaller part of your app.
06:48 < ljharb> ningu: lol, true
06:48 < havvy> AAA_awright's link makes a good sized module.
06:48 < AAA_awright> I have a function that splits a string while minding quoted parts, and other functions that specify how split it, by , or by ;
06:49 < AAA_awright> It doesn't make sense to have one module per function
06:49 < sinclair|node> ljharb: i think the benefit of keeping things as mini modules is due to JavaScript itself
06:49 < ljharb> AAA_awright: i suppose if it's really well tested that's fine. but all your internal functions there could certainly be a small module
06:49 < ljharb> AAA_awright: if you're concerned about efficiency, use a prepublish script to concatenate it all together.
06:50 < AAA_awright> They could, it's not practical.
06:50 < havvy> IMO, a module should be something that can be unit tested in a meaningful way.
06:50 < ljharb> AAA_awright: obviously it depends on the use case.
06:50 < ljharb> havvy: i'd agree with that
06:50 < sinclair|node> ljharb: in node, you split your code up unnecessarily so your source files don't grow overly large
06:50 < AAA_awright> ljharb: That's even more backwards... I'm talking about editing
06:50 < ljharb> sinclair|node: it's nothing to do with javascript.
06:50 < havvy> And I don't care what your language is.
06:50 < AAA_awright> Some things do well split apart by file, others don't
06:50 < ljharb> sinclair|node: in many languages, at many companies, system design is moving towards an SOA instead of a megalithic app.
06:50 < ningu> yeah, I don't think good module design has anything to do with the language
06:50 < AAA_awright> It's in the minority of cases, but this doesn't
06:50 < sinclair|node> ljharb: its not about that either
06:51 < havvy> Also, Node.js's 'module' object could be called 'file' instead.
06:51 < ljharb> sure it is. SOA means, split up your code. has nothing to do with the size of the file
06:51 < sinclair|node> ljharb: no one is calling for monolithic applications, and SOA has little to do with anything
06:51 < havvy> file.exports = function () { ... }; or file.exports = { ... };
06:51 < leichtgewicht> Chiming into the discussion: Why would you try to change node and not fork node: If it should work with TypeScript then make a TypeScript server ...
06:51 < ljharb> sinclair|node: SOA is npm and node.
06:51 < ljharb> leichtgewicht++
06:51 < AAA_awright> havvy: No, module is better, best would be no "module" object at all, and you return the value as I do at the bottom
06:51 < AAA_awright> https://github.com/Acubed/contenttype/blob/master/contenttype.js#L163
06:52 < sinclair|node> ljharb: what does npm have to do with large source files?
06:52 < havvy> Sure, returning an object could work.
06:52 < ljharb> AAA_awright: ps on that particular module, exports.mediaCmp? why not just module.exports = mediaCmp
06:52 < ljharb> AAA_awright: why return an object that contains only one thing?
06:52 < sinclair|node> ljharb: you can, in other platforms, have hundreds of source files, and the compiler turns them into a binary / IL
06:52 < AAA_awright> It appears I'm forgetting a "var exports = exports || {};" declaration in case the variable doesn't exist, huh.
06:52 < ljharb> sinclair|node: nothing has anything to do with large source files. npm has to do with "lots of small modules that do one thing well". like unix.
06:52 < AAA_awright> >> exports
06:52 < purr> AAA_awright: ReferenceError: exports is not defined
06:52 < sinclair|node> ljharb: my question is, what is wrong with a million line JS file?
06:52 < ljharb> sinclair|node: yes but we're not talking about binaries. this is an interpreted language.
06:53 < AAA_awright> >> var exports = exports || {};
06:53 < purr> AAA_awright: undefined
06:53 < ljharb> sinclair|node: if you need a million lines of code to do something, you're doing it wrong.
06:53 < havvy> sinclair|node: Generally the same thing as in any other language.
06:53 < ljharb> AAA_awright: you should avoid "exports". use "module.exports"
06:53 < sinclair|node> ljharb: the million line js file is the output from a TypeScript compile
06:53 < ningu> how many lines of typescript?
06:53 < AAA_awright> ljharb: I use exports purposefully, so I can return the value
06:53 < ljharb> right. that's disgusting.
06:53 < leichtgewicht> ljharb: Disagree: If you need a million lines of code to do something you havn't abstracted well (because your doing tons of things at once)
06:53 < sinclair|node> ljharb: the compile takes care of the details of linked all your source into one really large js file
06:53 < ljharb> AAA_awright: you can return it either way
06:53 < havvy> Wouldn't that imply 2 million lines of TypeScript or something?
06:54 < ljharb> AAA_awright: "exports" is legacy commonjs stuff. "module.exports" is the recommended way. you can still `return module.exports` afterwards if you want.
06:54 < AAA_awright> ljharb: Like I said I don't want to use those symbols at all, the fact I use "exports" is coincidental. I should assign module.exports = exports; at the bottom.
06:54 < sinclair|node> havvy: you write less code in TS as you would have to in JS (syntactic sugar)
06:54 < ljharb> AAA_awright: yes, i'm just saying, swap "exports.mediaCmp = " with "module.exports = " and your modules will be simpler and more robust.
06:54 < sinclair|node> ljharb: so, what is wrong with a million like JS file?
06:54 < sinclair|node> *line
06:55 < havvy> TypeScript is the language that got generics recently, right?
06:55 < sinclair|node> havvy: yes
06:55 < ljharb> sinclair|node: if you're talking about a concatenated final asset, the number of lines is mostly irrelevant. although a million is insanely large for any app.
06:55 < ljharb> sinclair|node: but that's not what i'm talking about.
06:55 < sinclair|node> ljharb: well, those are the kinda of numbers i am talking about
06:55 < AAA_awright> ljharb: I don't see how that makes anything simpler, module.exports is an awful bit of design that I'm explicitly trying to avoid, in a Node.js compatible way
06:55 < ningu> I prefer to con-dog-enate
06:55 < ljharb> sinclair|node: then i'd be willing to bet that your app is really a bunch of smaller apps, improperly welded together.
06:55 < ljharb> AAA_awright: "exports" is worse than "module.exports"
06:56 < AAA_awright> Why?
06:56 < sinclair|node> ljharb: dynamically welded together
06:56 < leichtgewicht> AAA_awright: What is wrong about module.exports? What would be different solutions? How to avoid it?
06:56 < ljharb> AAA_awright: because on the other end, exports.foo = bar => require('module').foo - whereas module.exports = bar => require('module')
06:56 < ningu> what do you mean by dynamically?
06:56 < havvy> Because exports is an object, while module['exports'] is a property.
06:56 < ljharb> yes
06:56 < havvy> And you can reset a property value, but you can't change an object into a function.
06:56 < sinclair|node> ljharb: dependent source gets compiled, things you dont call doesn't wind up in the final compile
06:56 < ljharb> sinclair|node: right. separate apps should run separately and communicate over a stable API
06:56 < AAA_awright> ljharb: I use module.exports when I export entire functions. I don't need to use it at all here, so I don't.
06:57 < ljharb> AAA_awright: doesn't matter what you're exporting - why force the additional ".bar" on the users of your module?
06:57 < sinclair|node> ljharb: but you could write a perfectly stable API in TypeScript
06:57 < ljharb> AAA_awright: it's just extra boilerplate that adds nothing
06:57 < AAA_awright> ljharb: What additional .bar?
06:57 < ljharb> AAA_awright: exports.foo = bar => require('module').foo
06:57 < ljharb> extra "foo" i meant
06:57 < sinclair|node> ljharb: my argument is this, nodejs forces people to split source files into mini modules, because that is how 1) JavaScript works, 2) how nodejs modules work
06:57 < ljharb> the ".foo" after the require is just garbage. just export the foo directly
06:58 < AAA_awright> ljharb: There's multiple functions to choose from in there, they *have* to pick something
06:58 < garthk> Woot! Slashed the overhead on my chunky version of dominictarr's through-stream.
06:58 < sinclair|node> ljharb: having a compiler changes the game this this regard
06:58 < ljharb> sinclair|node: no, it's how the framework works. rails does that too. so do most php and python frameworks.
06:58 < AAA_awright> You think Node.js will magically return the function they're looking for?
06:58 < ljharb> sinclair|node: every language, JS included, has had the ability to have a build step. that doesn't change (and should never change) how you code.
06:58 < AAA_awright> ljharb: If I'm returning one function I use simply module.exports. I don't do that here, so I don't need it, so I don't use it.
06:58 < ljharb> AAA_awright: you're not understanding me. your module returns an object, right?
06:58 < sinclair|node> ljharb: yes it should
06:59 < AAA_awright> ljharb: Necessarially so, yes
06:59 < ljharb> AAA_awright: right but you're returning an object. so require('module').foo.a, require('module').foo.b. why not just require('module').a, require('module').b?
06:59 < sinclair|node> ljharb: what "build step" are you referring to in JS?
06:59 < ljharb> sinclair|node: minification (used since the 90s). concatenation. google closure compiler removes unused JS code for you.
06:59 < AAA_awright> ljharb: What are you talking about? If you want to use that module you go require('contenttype').mediaCmp
06:59 < ljharb> AAA_awright: right. what's the point of the extra ".mediaCmp"???
06:59 < AAA_awright> There's no additional foo anywhere
07:00 < ljharb> AAA_awright: why do i need to type ".mediaCmp" ever
07:00 < echo|> sinclair|node: And require.js-like methods
07:00 < AAA_awright> ljharb: Because there's MULTIPLE functions in that module that I have to expose
07:00 < sinclair|node> ljharb: its not handled for you
07:00 < sinclair|node> ljharb: and minification means nothing in the context of node.
07:00 < ljharb> sinclair|node: it is if i pick a tool that does it. if you're saying, you like that something does all the hard thinking for you cause thinking's hard, then sure, node's not trying to impose tools on you
07:00 < AAA_awright> ljharb: select, MediaType, splitQuotedString... the most used one is select
07:00 < ljharb> sinclair|node: but then you're not saying you like TS, you're saying you like that the TS people made all the decisions for you
07:01 < sinclair|node> ljharb: no, but those tools are now available with coffeescript, livescript and typescript
07:01 < ljharb> AAA_awright: ok so mediaCmp is just one of the functions, gotcha. that makes sense.
07:01 < ljharb> sinclair|node: they're available in pure JS. google closure compiler. traceur compiler. to name two.
07:01 < ljharb> sinclair|node: all the altJS languages aren't unique for having them.
07:01 < AAA_awright> You read the file right? I linked to it twice >_>
07:01 < sinclair|node> ljharb: yes, that is a good thing, they gave me a language better than javascript, 
07:02 < ljharb> "better" being a subjective term. that nearly everybody working with node disagrees with you on.
07:02 < sinclair|node> ljharb: you don't write your own express(), i don't write my own languages
07:02 < ljharb> AAA_awright: yes, sorry, it's just a long file :-p
07:02 < ningu> eh, there are plenty of coffeescript coders in node
07:02 < ningu> the other two, not so much
07:02 < ljharb> ningu: less and less as time goes on methinks :-p
07:02 < sinclair|node> ljharb: as a language, TS offers everything JS does, and a lot more
07:02 < ningu> ljharb: not sure, I haven't been keeping track
07:03 < ljharb> sinclair|node: it certainly is a superset of JS, yes.
07:03 < AAA_awright> sinclair|node: It's called ECMAScript, it's defined in ECMA-262 convienently available in HTML form at http://ecma-international.org/ecma-262/ . So what's so bad about it? Can you link to specific sections?
07:03 < ljharb> sinclair|node: the argument is whether the extra stuff it adds is worth the extra complexity. you're welcome to believe it's worth it.
07:03 < sinclair|node> ljharb: if your definition of "better" language means, it has a greater feature set, then yes, TS is better than JS
07:03 < ljharb> sinclair|node: right but that'd be a really stupid metric of language quality
07:03 < ljharb> "more features" generally makes things worse, not better.
07:04 < thealphanerd> BAH… more is less
07:04 < sinclair|node> ljharb: personal preference is a far stupider metric 
07:04 < thealphanerd> its "The Good Parts" for this chap
07:04 < ljharb> sinclair|node: it's precisely as stupid actually
07:04 < thealphanerd> "use strict"
07:04 < ljharb> but that's not the only reason i prefer JS. nor is it the only reason you prefer TS. so let's not bring up straw men
07:04 < sinclair|node> ljharb: no it isn't, and im not getting into a language war
07:04 < ljharb> then don't insult JS in a JS room :-)
07:04 < ningu> ljharb: what metric of stupidity are you using? :)
07:05 < ljharb> ningu: i know, so many to choose from :-p
07:05 < sinclair|node> ljharb: this is a nodejs room, there are coffeescripters in here
07:05 < ljharb> sinclair|node: and you'll node not a single one of them ever trashes JS.
07:05 < leichtgewicht> sinclair|node: yep, we love js :D
07:05 < ljharb> sinclair|node: in fact, they usually convert their code to JS when asking for help.
07:05 < nettu> we love node
07:05 < ljharb> sinclair|node: so you're the only one trolling JS.
07:05 < thealphanerd> subset > superset
07:05 < sinclair|node> ljharb: be subjective 
07:05 < ljharb> so stop being a dick please.
07:06 < sinclair|node> ljharb: then stop bleating about it, and stay on topic
07:06 < ljharb> you're the one who started trashing JS. not me.
07:06 < ljharb> i just suggested an alternative for you to use your precious TS, and you started bitching about JS
07:06 < ningu> yeah, guys, remember the topic is the guy with the pan as a head with a moustache on it
07:06 < AAA_awright> If you love Node then STOP USING COFFEESCRIPT but I digress
07:06 < sinclair|node> ljharb: id use something else other than TS if i thought it was better
07:06 < ljharb> AAA_awright++ :-)
07:06 < thealphanerd> sinclair|node: have you read Crockford's the good parts?
07:07 < ljharb> sinclair|node: obviously. who would use something worse if they had a better option?
07:07 < sinclair|node> ljharb: a fool
07:07 < thealphanerd> you can strip away all the junk and get to the juicy lispy center
07:07 < ljharb> sinclair|node: so, back to your original question. you want to be able to type TS, and have it compile on the fly
07:07 < masm> Hey, guys! I'm having a problem with an express server. It's returning 413 Request Entity Too Large for file uploads of a little more than 1 Mb. This was working fine a few weeks ago for uploads of 30 Mb. I have updated express version recently, but I can't find anything in the documentation for removing limits, and I'm NOT using connect's limit middleware. Any idea of what can be causing this?
07:07 < nettu> come on guys
07:07 < echo|> AAA_awright: Save that conversation for another time. :P
07:07 < kenperkins> how do folks test method signatures in node
07:07 < sinclair|node> ljharb: correct
07:07 < ljharb> sinclair|node: your method was to hack require.extensions. i'm suggesting that instead, you try a daemon that watches your code and does it for you.
07:07 < sinclair|node> ljharb: at this stage in the game, no one is doing it right
07:08 < ljharb> if you mean doing TS right, you're right about that one
07:08 < sinclair|node> ljharb: when did i say my method was to hack require.extentions?
07:08 < masm> I also have an node-http-proxy in front of express, but that shouldn't be the problem, right?
07:08 < ljharb> you showed me that typescript.api module the other day.
07:08 < thealphanerd> sinclair|node: what environment are you using to code the TS in that you want live inturpretation?
07:08 < sinclair|node> ljharb: it has the option to do that
07:08 < ningu> masm: it might have max-upload settings, not sure
07:08 < ljharb> right. i'm suggesting not including that option.
07:08 < sinclair|node> ljharb: i actually agree with you
07:09 < ljharb> lol, that's what i suggested earlier, and the other day
07:09 < sinclair|node> ljharb: you get far better benefit not using it, but then again, JS people have a fetish for one line code api's
07:09 < AAA_awright> masm: No gateway like Nginx?
07:09 < sinclair|node> ljharb: read the rest of it
07:09 < AAA_awright> That shouldn't affect anything but who knows
07:09 < echo|> masm: Have you tried express.limit(30000000) ? Explicitly setting it to 30mb? 
07:09 < sinclair|node> ljharb: after building that project, i have done some testing on it
07:10 < masm> No, only node-http-proxy and express behind it.
07:10 < masm> I tried 10Mb.
07:10 < AAA_awright> masm: That's a gateway
07:10 < sinclair|node> ljharb: it works, but after i generate a sizable amount of source, things get slow
07:10 < AAA_awright> masm: Try connecting directly to express on 8080 or whatever it is and make sure
07:11 < ljharb> sinclair|node: why does it get slow? just because it's a large app?
07:11 < sinclair|node> ljharb: TypeChecking
07:11 < ljharb> the compiling gets slow, or the JS type checking that TS inserts is?
07:11 < sinclair|node> ljharb: type checking the TS annotations, 
07:11 < ljharb> is that done at runtime, or compile time?
07:12 < sinclair|node> ljharb: i am compiling and running at runtime 
07:12 < ljharb> right, my suggestion is, compile at write time. run the pre-compiled JS.
07:12 < sinclair|node> ljharb: i want this to happen on a http request handler
07:12 < ljharb> why on earth would you want that
07:12 < ljharb> you're not hot-editing your app
07:12 < sinclair|node> ljharb: i am at dev time
07:12 < ljharb> ok so you're just saying it's slow during dev. not in prod.
07:13 < ljharb> cause in prod it's precompiled
07:13 < sinclair|node> ljharb: even at dev time, you don't want to wait for a page to load ever 15 seconds
07:13 < ljharb> right. so instead of compiling at request time, do it at "file modified" time.
07:13 < sinclair|node> ljharb: i would be fine with a 15 second start up however
07:13 < ljharb> whenever you change a file, recompile just that file.
07:13 < greelgorke> foobar
07:13 < sinclair|node> ljharb: exactly
07:13 < ljharb> the same way git works by only looking at changes.
07:14 < ljharb> sinclair|node: but there's no need to concatenate it during dev. save that for prod.
07:14 < sinclair|node> ljharb: i want to be able to deploy TS to prod
07:14 < ljharb> sure. you can precompile and concatenate it in a prepublish script before deployment. that should be fast.
07:15 < sinclair|node> ljharb: i want compile on the fly the standard, and precompilation to be a thing of the past
07:15 < T-Co> I someone using hapi?
07:15 < ljharb> but during dev, avoid concatenation, because you do want to leverage the require cache, and only recompile and refetch modules that have changed
07:15  * leichtgewicht .oO( How can i mute this discussion? )
07:15 < ljharb> sinclair|node: right, but that can never be fast.
07:15 < ljharb> leichtgewicht: :-p sorry
07:15 < T-Co> I'm having a problem where I get duplicate requests
07:15 < albert> hi all , is there any good module that watch file changes ? The original watch function has bugs :(
07:15 < sinclair|node> ljharb: my recent delving into the TS compile suggest that it can be fast
07:16 < leichtgewicht> albert: What bugs are you referring to?
07:16 < sinclair|node> ljharb: assume a million line project, i am talking only a few ms extra on code changes
07:16 < thealphanerd> albert: nodemon?
07:16 < thealphanerd> https://github.com/remy/nodemon
07:16 < sinclair|node> ljharb: part of this magic is to do with the 0.9 compiler, and some of the stuff built into it for compiler services and vs integration
07:17 < leichtgewicht> albert: There are various watch systems: https://github.com/shama/gaze
07:17 < ljharb> albert: also forever
07:17 < thealphanerd> ohhh forever is good too
07:17 < leichtgewicht> albert: https://npmjs.org/search?q=watch
07:17 < thealphanerd> nodejitsu app
07:17 < sinclair|node> ljharb: currently, i resolve all files in a source tree, and compile the lot each time, what i am going to change, is after a full resolve, i pass the TS compiler only the things that have changed
07:18 < sinclair|node> ljharb: the TS compiler is smart enough not to typecheck things twice
07:18 < sinclair|node> ljharb: as such, you can have a million line project, and get compile on the fly performance
07:19 < ljharb> still seems like 10 100k line projects would be better, but sounds like you've got it figured out
07:19 < sinclair|node> ljharb: already for small projects, the TS compiler is blazing fast
07:20 < sinclair|node> ljharb: i think it will be well worth the effect
07:20 < sinclair|node> ljharb: X > JS compilers have come a long way, and they offer benefits above and beyond the language itself
07:21 < sinclair|node> the only issue, is it hard to work with them, pre compilation is a step i would rather avoid 
07:21 < sinclair|node> if node can do this on its own, without the developer thinking about it, its a winner
07:22 < ljharb> i don't think any altJS has figured that one out.
07:22 < leichtgewicht> sinclair|node Reloading code at runtime is always risky at best ... nothing you want to be done "just like that"
07:22 < greelgorke> sinclair|node: node core team just depricated require.extensions, which is used by coffeescrit for compile-free integration.
07:22 < sinclair|node> leichtgewicht:: think about it, when i write C#, i give little thought to the IL it produces
07:23 < greelgorke> so i do not think ts will ever get that support in node
07:23 <@konobi> ts?
07:23 < sinclair|node> leichtgewicht: pre compilation is only viewed as risky is you dont trust your compiler
07:23 < greelgorke> typescript
07:23 < leichtgewicht> sinclair|node: I was talking about runtime reloading of ANY code.
07:24 < sinclair|node> konobi: compile on the fly or really large projects
07:24 < sinclair|node> *of
07:24 < AAA_awright> sinclair|node: My critique is the same as Coffeescript, if I wanted to write ECMAScript, I'd write ECMAScript
07:24 < AAA_awright> Instead of pretending it has semantics that it doesn't
07:24 < AAA_awright> It has fine semantics as it is
07:25 <@konobi> ecmascript pls
07:25 < AAA_awright> Now TS isn't a bad idea, it adds the feature of static typing
07:25 < leichtgewicht> sinclair|node: You do not want your database and server to explode because some code you loaded uses a different code than it did 10ms before.
07:25 < AAA_awright> But how does that make ES bad?
07:25 < greelgorke> can you guys just move this upcomming flamewar somewhere else?
07:25 < sinclair|node> leichtgewicht: that will never happen in practice, 
07:26 < ljharb> sure, let's all go argue about it in #typescript
07:26 < leichtgewicht> greelgorke: right. I stop now.
07:26 < sinclair|node> greelgorke: what flame war?
07:26 < AAA_awright> YOU'RE ALL PINHEADS
07:26 < greelgorke> srry if i accidently called someone a guy, who isn't
07:27 <@konobi> i'm a harp seal... you git!
07:27 < greelgorke> sinclair|node: ts vs js has a potential to explode
07:27 < sinclair|node> greelgorke: i am not having a ts vs js argument, im talking about compilation 
07:28 <@konobi> without actual compiler/interpreter/engine support built in, it's a fruitless exercise imho
07:28 < greelgorke> sinclair|node: sure. 
07:28 < sinclair|node> konobi: how so?
07:29 <@konobi> just extra hoops to jump through for debugging (especially in a 5-alarm scenario)
07:29 < sinclair|node> konobi: but what if you could iron out all the source mapping, such that errors are reported in your source language, 
07:29 < sinclair|node> file and line number etc
07:30 < sinclair|node> konobi: compile on the fly in JS is difficult due to performance reasons, but not impossible
07:30 < thealphanerd> sinclair|node: like jslint?
07:30 <@konobi> for which version of which compiler? on which platform? is there guarnateed back-compat? what happens when i interact with code that it's in half-caf-no-foam-latte-script?
07:30 < greelgorke> konobi solved by source maps
07:31 <@konobi> also means i can't use things like code coverage tooling
07:32 < sinclair|node> konobi: such as? jasmine?
07:32 < sinclair|node> konobi: a lot of these things can be solved by a compiler anyway, 
07:33 < sinclair|node> konobi: and if the output of the compile is JS, your coverage tools shouldn't be impacted
07:34 < ChrisPartridge> half-caf-no-foam-latte-script, lol!
07:34 <@konobi> it wouldn't be a compiler... it'd be a "source filter"
07:34 < sinclair|node> konobi: i don
07:34 < sinclair|node> er
07:34 < sinclair|node> i don't follow
07:36 < sinclair|node> at the risk of sounding like a complete MS zealot, Visual Studio already has amazing tooling and editing features for typescript, but they don;t relate to node development,
07:37 < sinclair|node> to be perfectly honest, developing node + ts on visual studio is......a bad experience 
07:37 <@konobi> that's fine, and you can use what you want... but i like the priniciple of least surprise
07:37 < LegCow> i've never bothered with coffee script, anyone recommend it?
07:37 < LegCow> is it time saving? neater? worth it?
07:37 < sysx1000> I'd better stay with Javascript
07:37  * Bergle_1 likes the idea of coffeescript and it looks neat, but im not going there :)
07:38 < guybrush> LegCow: you will find lots of people who recommend it and lots who advise to not use it
07:38  * sysx1000 hate to learn and follow yet another language
07:38 < LegCow> sinclair|node: i like the intellisense. none of the other ide's + addon's seem to do it quite as well
07:38 <@konobi> there's like 30-40 coffeescript-esque things
07:38 < greelgorke> LegCow: try webstorm
07:38 < px_> javascript is already short enough for me
07:38 < Bergle_1> yeah i know people on both sides of the coffeescript fence - and both sides have cluey people
07:38 <@konobi> all claiming to fix things that the others don't do right
07:38 < Bergle_1> personaly i think webstorm is a good thing :)
07:38 < LegCow> greelgorke: that's also very good but doesn't feel the same
07:39 < greelgorke> i don't argue about feelings
07:39  * konobi sticks to vim
07:39 < px_> if you don't like writing javascript for some reason maybe you will like coffee more
07:39 < LegCow> coffeescript is an abstraction that's similar enough to javascript to probably safely skip
07:39 < sinclair|node> LegCow: ive gone ahead and written a compile on the fly lib for node + ts, and developing in TS for node actually feels "just right"
07:39 < guybrush> its not an abstraction
07:39 < ljharb> coffeescript has some quirks. i wouldn't recommend it to anyone who doesn't know javascript.
07:39 < Bergle_1> imo if your learning dont start with or get into coffeescript till you know javascript 'well' for some meaningful definition of 'well' :)
07:39 < MiracleBlue> Derp
07:39 < LegCow> i'm using sublime text mostly
07:40 < greelgorke> coffescript is kinda javascript with ruby-ish syntax and some sugar  (most of wich is in ecma6 soon)
07:40 < ljharb> variable shadowing, class sugar where JS doesn't have classes…
07:40 < sinclair|node> LegCow: i have been using VS, but any editor with TS edit time goodness would do just fine
07:40 < ljharb> CS's class sugar is different than ES6's class sugar.
07:40 < ljharb> and neither of them is actually a class.
07:40 < LegCow> worth checking out
07:41 < LegCow> i work in a company. i'm at work right now. we do inventory systems. in MS Access :D
07:41 < sinclair|node> LegCow: https://npmjs.org/package/typescript.api
07:41 < greelgor_> fu isp...
07:41 < sinclair|node> LegCow: not even TS can save you from MS Access
07:41 < sinclair|node> :)
07:41 < LegCow> thanks sinclair|node. having a look
07:41 < ljharb> LegCow: good lord. i haven't used access in over a decade
07:42 < LegCow> they've finally started using sql server... with access frontend
07:42  * Bergle_1 wishes he could say that about access :)
07:42 < ChrisPartridge> LegCow: i'm still supporting MS Access applications that were written aeons ago :(
07:42 < LegCow> ljharb: ahhh, you're missing out ;D
07:42 < sinclair|node> Access 97 was the last time i did anything meaningful in that horrid DB
07:42 < echo|> LegCow: Ow. ms access? On another note, I really like ST's SFTP plugin
07:42 < greelgor_> opinion: since coffeescript has much traktion in ruby/rails land, typescript will get traktion in MS land also, but in pure js world both will still be a niche
07:42 < LegCow> MS Access was WAY too easy to make stuff, perfect for my company
07:43 < sinclair|node> greelgor_: maybe, i feel TS has the potential to be just as big 
07:43 < sinclair|node> greelgor_: basically due to the fact you can just write JS as you have always done
07:43 < greelgor_> LegCow: "easy make stuff" depends always on skillsets already there ;)
07:43 < LegCow> We also support a product written in business basic. Basic is ok, it's old obviously but it had its place. but the code in this product. UGH. nightmare
07:44 < sinclair|node> greelgor_: personal opinion here, but with CS, there is a step learning curve, with TS, there is no learning curve (if you are from a JS background)
07:44 < LegCow> greelgor_: essentially everyone hired was a VBA programmer except for me. they got me in for handheld stuff. .net compact framework :(
07:44 < greelgorke> sinclair|node: sure, why the change anyway then? the only thing i'd like to see in js is the interface part. could be really handy with options-params
07:44 < LegCow> i'm surrounded by 3 kinds of hell
07:45 < sinclair|node> greelgorke: well, TS lets you do analysis of your existing JS code
07:45 < sinclair|node> greelgorke: that is a good enough reason there, if you chose to use it for that
07:45 < sinclair|node> greelgorke: so, you could write your own jslint with the ts compiler
07:46 < greelgorke> but it doesnt save you from the bugs with runtime nature in production, this bugs are not catched by typesystems, except they are as strong as haskells ;)
07:46 < LegCow> this TS.api your doing, sinclair|node?
07:46 <@konobi> anywhos... it's javascript and node all the time in #Node.js!
07:46 < ljharb> you can do that already with esprima
07:46 < sinclair|node> LegCow: yes
07:46 < LegCow> i'll definitely give it a try then
07:47 < greelgorke> sinclair|node: but i agree, that typehints can help you in developing in larger teams, since additional infos provided by intellisence &co may save some time
07:47 < ljharb> unit tests can do that just as easily
07:47 < sinclair|node> LegCow: ill be gutting it soon and moving all the "run" stuff into a separate npm module soon
07:48 < sinclair|node> LegCow: ill leave the compiler bits in this project, and all the runtime compile on the fly into another project
07:48 < LegCow> it's quite obvious i have a shittonne to learn
07:48 < sinclair|node> LegCow: ill also gut the reflection stuff into a seperate project too
07:48 < LegCow> how long have you been working on this?
07:49 < sinclair|node> LegCow: 1.5 weeks
07:49 < sinclair|node> but been doing compiler as a service stuff for way longer
07:50  * sinclair|node notes, 0.9 alpha has only been out for 3 weeks :P
07:50 < LegCow> wish i could work on node fulltime
07:50 < greelgorke> LegCow: who's not?
07:51 < LegCow> clearly not me with all these amazing languages like VBA needing support
07:52 < greelgorke> child_process.spawn is your friend :D
08:25 < janezz> How to pass fs module object to other custom module
08:28 < dypsilon> janezz, with require?
08:28 < havvy> module.exports.fs = require('fs');
08:33 < ljharb> why would you need to pass fs?
08:33 < ljharb> it's in node core. every module can just require it
08:34 < janezz> I'm newbie
08:35 < janezz> I'm searching best way to use other modules in custom module
08:35 < dypsilon> janezz, in short, there is no need to pass fs because you can just require it in every module you need
08:36 < ljharb> there's no need to pass any module
08:36 < ljharb> you can require any module wherever you need it.
08:36 < janezz> is that best practice?
08:36 < dypsilon> ljharb, well, you might need to pass database connection around or something
08:36 < janezz> what about external modules
08:36 < dypsilon> janezz, same
08:37 < ljharb> dypsilon: then you're passing around state. that's not a module.
08:37 < dypsilon> ljharb, module is a vague term, but you are right
08:37 < leichtgewicht> I think i ruined my local installation ....
08:37 < leichtgewicht> I just tried to uninstall "sudo npm remove coffee-script -g"
08:38 < leichtgewicht> yet coffee is still available from the command line
08:38 < leichtgewicht> and the binaries are at /usr/local/share/npm/lib/node_modules/coffee-script/bin/coffee
08:38 < nettie> Hi guys, we're a RoR shop and we're building 2 new projects with node. Our dev team is having difficulties finding best practices and realword advises. I'm not sure if it's a lack of interest in the technology or maybe just too much infomrations, in part outdated. I was wondeirng if an online training course would be a good investment and would have enough updated content?
08:38 < janezz> so how would I use express object "app" inside custom module?
08:39 < leichtgewicht> But when I try to remove it again: npm WARN uninstall not installed in /usr/local/share/npm/lib/node_modules: "coffee-script"
08:39 < ljharb> janezz: your app isn't a module. you'd have to pass that in as an argument to a function. and your module would export the function.
08:39 < janezz> ok
08:39 < janezz> thx
08:39 < leichtgewicht> nettie: Meteor is very specific but its one way to go: http://www.discovermeteor.com/
08:40 < ljharb> ush
08:40 < ljharb> ugh
08:40 < dypsilon> nettie, i don't know any online course for node.js. Assuming you are even talking about node.js...
08:40 < ljharb> nettie: there's no conventions like there is with rails. express is the most popular, and it's very like sinatra
08:40 < ljharb> there's lots of online courses. codelesson.com has one i believe.
08:41 < nettie> ljharb yeah they're using express
08:41 < nettie> and also compound which I think was driven by the similarietis to rails
08:41 < ljharb> nettie: mongoose, express, async are the most common i'd say
08:41 <@konobi> there's also folks who provide training
08:41 < ljharb> nettie: but i would strive to resist the urge to make it like rails
08:41 < ljharb> nettie: anything that's too rails-like is likely written by rubyists that don't properly use JS idioms.
08:42 < greelgorke_work> if you can rails, and do node like rails, then just stick with rails instead
08:42 < ljharb> nettie: it'd be like trying to treat rails like it's JS :-p
08:42 < nettie> ljharb execlty you perfectly got it, I don't think compound was actually a good choice
08:43 < greelgorke_work> nettie: it would help if you'd provide more infos about the node projects. differnt things need different approaches
08:43 < greelgorke_work> and the adaptation problems are also different. 
08:43 <@konobi> nettie: training may be a cheaper approach overall
08:45 < sinclair|node> anyone think that the dart vm might make it to node?
08:45 < nettie> greelgorke_work I'm looking for a more general approach, out dev team is made by senior multi-language developers with 10 years of mixex languaes experiece, I'm not lookig for a specific solution to a particular problem, they've very good skills at problem solving, I'm looking for some initialial tutoring.
08:45 <@konobi> no
08:45 < thealphanerd_> nettie: best way I foudn to learn was come up with a problem to solve and hack it out
08:45 < leichtgewicht> sinclair|node why would you ask this question again?
08:46 < ljharb> dart? gross. it won't even make it to browsers.
08:46 < ljharb> it's another desperate google attempt to keep their java engineers from having to learn proper javascript.
08:46 < greelgorke_work> nettie: training: http://strongloop.com/nodejs-expertise  http://thenodefirm.com/#services  tutorials: http://net.tutsplus.com/?s=node.js http://howtonode.org/
08:46 < nettie> the first project has been finished and put into production is a websocket based realtime auction system, the second project we'r working on is a facebook contest app 
08:46 < sinclair|node> ljharb: now now
08:47 < ljharb> that's exactly what most every JS thing out of google is :-)
08:47 < sinclair|node> ljharb: dont be too harsh of VM's
08:47 < ljharb> i'm not harshing on VMs.
08:47 < ljharb> i'm harshing on google's JS atrocities. and dart specifically.
08:47 < sinclair|node> ljharb: they did do V8?
08:47 < ljharb> that is a good point
08:47 < thealphanerd> ljharb: angular isn't too bad either
08:48 < ljharb> ehh
08:48 < sinclair|node> ljharb: google does "some" stuff right
08:48 < ljharb> i've seen angular projects. bunch of nonstandard html tags.
08:48 < greelgorke_work> clojure compiler is googles baby too
08:48 < ljharb> closure compiler you mean
08:48 < greelgorke_work> yes
08:48 < ljharb> sinclair|node: with JS, they do a few. but you're right about v8.
08:48 < ljharb> and closure compiler doesn't do anything new unless you turn on advanced mode
08:48 < ljharb> (also google's js style guide is half good and half garbage, and it's not configurable)
08:49 < sinclair|node> ljharb: well a VM would be faster than JS, and be a nice option
08:49 < nettie> I think the problems they encounter are more related to the phylosophy of the language to raise their interest and momentum but also to the practical use, the choice of a framework for example. One of the major complain is the fact they need much more libraries to do something than they need to do the same in rails (with gems) 
08:49 < ljharb> sinclair|node: a native VM would, yes. but if you have to compile it to JS, it's always slower
08:49 < ljharb> greelgorke_work: and closure compiler's advanced mode is awful because it makes you write your JS in specific ways.
08:49 < sinclair|node> ljharb: i don't necessarily think google should be the ones to invent the standard browser VM
08:49 < dypsilon> nettie, it sounds like your devs just want to go back to rails
08:49 < nettie> anyway thanks a lot fo the interesting links.
08:49 < ljharb> nettie: npm is far better than rubygems - far more small modules
08:49 <@konobi> nettie: that's what training is for... sometimes you just need outsider knowledge to fill those gaps
08:49 < greelgorke_work> nettie: thats because node's philosophy is about small modules
08:50 < nettie> dypsilon yeah :)
08:50 < sinclair|node> greelgorke_work: why is node's philosophy  to have small modules?
08:50 < jesusabdullah> YOU're about small modules!
08:50 < japaniel_> Is anyone familiar with the request module for node? https://github.com/mikeal/request
08:50 < booyaa|foo> semver ftw
08:50 < greelgorke_work> nettie: then just let them go back to rails. :D
08:51 < booyaa|foo> we are all modules
08:51 < nettie> greelgorke_work perfect this what we need, they're used to something different, they are worried this might not be the best way to do it.
08:51 < jesusabdullah> sinclair|node: when it's easy to modularize, you find it's worthwhile not to have too much fundtionality in a single module, it's *nice* to have small, well-scoped modules
08:51 < jesusabdullah> sinclair|node: some people take this to further extremes than others, obviously
08:51 < japaniel_> I am having an issue with getting the body of a page to assign to a variable. 
08:51 < jesusabdullah> sinclair|node: for example, many would consider underscore and lodash to be undesirable due to being "utility grab-bags"
08:51 <@konobi> look at the disaster that is activerecord
08:51 < jesusabdullah> sinclair|node: and yet many use them
08:51 < ljharb> the same philosophy applies to git. many small repos is much better than one large one.
08:52 < sinclair|node> i get modularization, but why have small modules, as if large modules are frowned upon 
08:52 < nettie> greelgorke_work we're stilly building rails apps when high-performances is not needed because it's faster for them thus our pricing will be more competitive
08:52 < jesusabdullah> sinclair|node: large modules often can be further modularized and this is considered good
08:52 <@konobi> limitation of scope and domain knowledge
08:52 < booyaa|foo> sinclair|node: a really good podcast to listen to is nodeup modules i think that's episode 40
08:52 < dypsilon> nettie, you need a leader in the team who is passionate about node and shows them the advantages of node over rails on a daily basis and inspires them to move. but then again, you will probably make better investment just going back to rails
08:52 < ljharb> large things need to know too much stuff. and depend on too much stuff.
08:53 < thealphanerd> sinclair|node: dependency injection can become easy to accomplish with smaller modules
08:53 < booyaa|foo> substack, izs, dshaw and mikeal discuss tis in detail
08:53 < booyaa|foo> i still can't get my head around dep injection.. angular uses it right?
08:53 < jesusabdullah> I disagree with their fervor
08:53 < thealphanerd> you can replace a single module without having to replace large portions of code… or even cooler replace on the fly based on needed functionality
08:53 < sinclair|node> thealphanerd: i think my definition of dependency injection differs from yours
08:53 < greelgorke_work> nettie: you can mix node with rails. node is good at realtime and i/o heavy tasks. but at classical crud apps rails is just good enough, even better at devspeed
08:53 < thealphanerd> sinclair|node: have you done work with inversion of control before?
08:53 < jesusabdullah> I think modularity is important but not a panacea
08:54 < sinclair|node> thealphanerd: whenever i code anything??
08:54 < nettie> dypsilon I don't want to kill rails because it's not economically sustainable considering the invested resources I just need the team to b able to produce good node.js apps when perfromance is needed.
08:54 < thealphanerd> :D
08:54 < booyaa|foo> re: modules and why small is good - nodeup episode #40 covers this well
08:54 < nettie> greelgorke_work this is exaclty what we do.
08:54 < nettie> greelgorke_work or at least trying to do :)
08:54 < thealphanerd> nettie: node is not going to neccessarily be the best solution for performance
08:54 < jesusabdullah> I think IoC is a loaded term that means a lot of things
08:54 < thealphanerd> v8 can be a bottle neck
08:55 < sinclair|node> thealphanerd: are you inferring that dependances can be hot swapped by modules of the same interface?
08:55 < thealphanerd> sinclair|node: with inversion of control you can create apps through loosely coupled components
08:55 < thealphanerd> generated by models
08:55 < sinclair|node> thealphanerd: i know
08:55 < thealphanerd> and you can do transformations on said models in real time to change functioanlity
08:55 < jesusabdullah> nettie: node tends to do very well when it's mostly juggling IO, and reasonably well when it does a bit more, but will bog down if you try to do heavy computation in javascript
08:55 < sinclair|node> thealphanerd: i know
08:55 < nettie> thealphanerd I think it's viral  facebook apps with high concurrency. 
08:55 < dypsilon> nettie, why do you think they are not producing good node.js app right now?
08:56 < dypsilon> *apps
08:56 < greelgorke_work> before i get bashed here: when i say small modules, i in fact talk about single responsibility principle. not loc or such stuff
08:56 < thealphanerd> sinclair|node: perhaps I am missing the point
08:56 < jesusabdullah> nettie: what I mean to say is, if you have a big ol' blocking chunk of code you're at best on-par with a blocking server and at worst, well, worst
08:56 < jesusabdullah> I agree greelgorke_work, focusing on LoC is not the right approach
08:56 < thealphanerd> greelgorke_work: that makes sense too… small tool that works to do the job and does it well
08:56 < sinclair|node> thealphanerd: i don't know why you are explaining to me IoC 101
08:56  * sinclair|node is confused
08:56  * thealphanerd is too
08:56  * thealphanerd hugs sinclair|node 
08:57 < jesusabdullah> BROHUG
08:57  * jesusabdullah grabs everyone around man or woman to HUG IT OUT
08:57 < nettie> jesusabdullah I know this, we select the technology based on the application needs. IF we decide to use node is becayse the app will have high concurrency or bacause it's interactive with slow remote webservices or anything which makes it interesting.
08:57 <@konobi> oh i see... leave out the harp seal...
08:57 < thealphanerd> jesusabdullah: that is quite a binary approach to hugging
08:57 < sinclair|node> thealphanerd: the way would structure IoC patterns traditionally is with interfaces that i pass around to dependent code 
08:57 < sinclair|node> thealphanerd: JS has no interfaces, 
08:58 < ljharb> yes, let's not leave out anyone who's not a man or a woman.
08:58 < jesusabdullah> yes I agree
08:58 < ljharb> why do you need an interface?
08:58 < nettie> dypsilon they're thinking they're not doing it right because they had not tutoring and relayed on books and google.
08:58 < thealphanerd> sinclair|node: check out this framework http://fluidproject.org/products/infusion/
08:58 < jesusabdullah> everyone and anyone that has joined #node.js
08:58 < booyaa|foo> jesusabdullah: hahaha i love that response. i think if we man hugged isntead of deskflipped
08:58 < booyaa|foo> the world would be a bettter place
08:58 < jesusabdullah> well
08:59 < greelgorke_work> sinclair|node: js` sproach of interfaces is property detection: like "this object has pipe function on it, so i just call it and don't care if it's build with Foo or has bar and baz properties on it"
08:59 < jesusabdullah> hopefully the part of this channel that's not male is cool with brohugging XD
08:59 < jesusabdullah> oh noooo not a natsplot
08:59 < japaniel_> and there they go
08:59 < jesusabdullah> ls
08:59 < jesusabdullah> er
08:59 <@konobi> greelgorke_work: duck typing
08:59 < thealphanerd> seems like all the noisy people are still here
08:59 < jesusabdullah> netsplits remind me of some Star Trek bullshit where the away team gets stuck behind "radiation interference"
09:00 < thealphanerd> I gotta run and make out wiht my defintiely for real girlfriend
09:00 < thealphanerd> smell ya later :D
09:00 < jesusabdullah> brb running a level three diagnostic on the irc chat network
09:00 < booyaa|foo> lol
09:00 < sinclair|node> greelgorke_work: i don't feel comfortable with it, JS can iterate members of a object, but not method signatures 
09:00 < dypsilon> nettie, ah ok, so they want tutoring just because they had none yet. well in this case you are right, probably it's the best to just give them some training to soothe them :)
09:00 < ljharb> why would you want to dynamically introspect method signatures
09:00 < nettie> I totally second the idea of having a leader with strong passion for the language in the team would be great but it's not a quickly viable solution. I'll look at the curse links and see if we can find a viable solution. 
09:01 < jesusabdullah> sinclair|node: yeah but you can fake it if you add signatures
09:01 < ljharb> sinclair|node: you can, however look at how many arguments it has. Function#length
09:01 < jesusabdullah> sinclair|node: https://github.com/bigcompany/resource
09:01 < nettie> dypsilon yeah exaclty, they were just parachuted in the jungle :)
09:01 < jesusabdullah> sinclair|node: ljharb: Add JSON schemas for input arguments, reflect away
09:01 < greelgorke_work> sinclair|node: the thing is, you usually don't care about signatures
09:01 < jesusabdullah> depends on what you're doing greelgorke_work, no?
09:02 < sinclair|node> greelgorke_work: i do, but i prefer statically typed languages 
09:02 < greelgorke_work> sinclair|node: in fact, most use cases use polymorphic functions
09:02 < sinclair|node> greelgorke_work: polymorphic functions?
09:02 <@konobi> sinclair|node: then go use though
09:02 <@konobi> *those
09:02 < greelgorke_work> konobi: he does
09:03 < japaniel_> anyone got a second for some https://github.com/mikeal/request assistance?
09:03 < greelgorke_work> sinclair|node: polymorphic function, may be i use a wrong term. functions wich can take different values (and different number of values) as parameters 
09:03 < sinclair|node> konobi: would you prefer i didn't use nodejs?
09:03 < greelgorke_work> different types of values 
09:04 <@konobi> sinclair|node: *shrug* i'd prefer a more JFDI approach than yet another discussion of why ecmascript does have this, that or the other
09:04 < leichtgewicht> npm seems to install binaries in the wrong directory ... 
09:04 <@konobi> *doesn't
09:05 < sinclair|node> greelgorke_work: do you not see value in being able to get the statically typed signature of a method tho?
09:06 < sinclair|node> greelgorke_work: a nice features in C# is to be able to generate web service contracts based on classes
09:06 < sinclair|node> greelgorke_work: a lot of meta data a client can use to consume the service, WSDL springs to mind
09:07 < havvy> sinclair|node: Attach it to the function then?
09:07 < sinclair|node> havvy: the signature you mean?
09:08 < havvy> There is absolutely nothing stopping you from adding a yourFunction.signature value.
09:08 < sinclair|node> could use jsdoc
09:08 < sinclair|node> jsdoc would be better
09:08 < havvy> Do people actually use JSDoc?
09:09 < sinclair|node> havvy: people who like to document that this method accepts "this type, and this type, and this type"
09:15 -!- Topic for #Node.js: it's kinda like http://img.pointlimit.com/ubz4mje5l7z4e.png - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
09:15 -!- Topic set by Nexxy [~emily@unaffiliated/nexxy] [Thu May  9 11:31:32 2013]
09:15 [Users #Node.js]
09:15 [@isaacbw         ] [ Corey           ] [ groundwater     ] [ leichtgewicht] [ petecoop       ] [ ssafejava       ] 
09:15 [@isaacs          ] [ Country         ] [ Grun1           ] [ lejonet      ] [ peterbra1en1   ] [ stagas          ] 
09:15 [@konobi          ] [ CoverSlide      ] [ gsf             ] [ LennyLinux   ] [ peterfile      ] [ stalled         ] 
09:15 [@MI6             ] [ crashev         ] [ gshipley        ] [ LeoAtWork    ] [ ph8            ] [ standoo         ] 
09:15 [@Nexxy           ] [ creationix      ] [ Guest29965      ] [ leonardo     ] [ PhilK          ] [ stbuehler       ] 
09:15 [@tjfontaine      ] [ crescend1       ] [ Guest86714      ] [ leostera     ] [ philo23        ] [ stef            ] 
09:15 [@trevnorris      ] [ crewmoss        ] [ Guest87593      ] [ leptonix     ] [ phI||Ip        ] [ stephank        ] 
09:15 [ [[zz]]          ] [ crodas          ] [ guilleiguaran_  ] [ lihnuz       ] [ phrearch       ] [ StephenS        ] 
09:15 [ \mSg            ] [ cTIDE_          ] [ guybrush        ] [ lihnuz_      ] [ PhysX          ] [ stevenbenner    ] 
09:15 [ ^esc            ] [ culturelabs     ] [ gwoo            ] [ listochkin   ] [ pickels        ] [ Stew-a          ] 
09:15 [ __main__        ] [ cxreg           ] [ gyaresu         ] [ liwen        ] [ pig            ] [ stolsma         ] 
09:15 [ __sri           ] [ d-best          ] [ hackygolucky    ] [ ljharb       ] [ Pilate         ] [ strax           ] 
09:15 [ _cheney-        ] [ D4RK-PH0ENiX    ] [ Hadaka          ] [ ljharb_work  ] [ pinja          ] [ stride          ] 
09:15 [ _janne          ] [ dak__           ] [ hakunin         ] [ lmf40        ] [ Piotras        ] [ stuartmcfarlane ] 
09:15 [ _marvin         ] [ daleharvey      ] [ happyface       ] [ lmjabreu     ] [ Pitel_IPEX     ] [ Stuk            ] 
09:15 [ _marvin__       ] [ Damn3d          ] [ harth           ] [ LocalPCGuy   ] [ plato          ] [ stutter         ] 
09:15 [ _pid            ] [ dan_johnsin     ] [ hartley         ] [ Lorentz      ] [ polyrhythmic   ] [ stylus          ] 
09:15 [ _pid1           ] [ danheberden     ] [ havvy           ] [ lrvick       ] [ poorman        ] [ styol           ] 
09:15 [ _Steve_         ] [ danmactough     ] [ hdon            ] [ lucastockmann] [ pquerna        ] [ subsilico       ] 
09:15 [ `3rdEden        ] [ DarkArgoz       ] [ heath           ] [ luminous     ] [ prawnsalad     ] [ substack        ] 
09:15 [ a_suenam_       ] [ darkc0met       ] [ HeN             ] [ Lunar_Lamp   ] [ pretty_function] [ sugyan          ] 
09:15 [ a_suenami       ] [ dastagg         ] [ henrikakselsen  ] [ luruke       ] [ PrgmrBill      ] [ suneye          ] 
09:15 [ AAA_awright     ] [ daurnimator     ] [ henrikhodne     ] [ lyetz        ] [ prismatictrail ] [ superjoe        ] 
09:15 [ aandy           ] [ dawolf          ] [ herbnerder      ] [ m0           ] [ Proditor_      ] [ supernaut       ] 
09:15 [ aboudreault     ] [ dazoe           ] [ herki2          ] [ M2Ys4U       ] [ prophile       ] [ supersym        ] 
09:15 [ abraxas         ] [ dch             ] [ heroux          ] [ macgregor    ] [ przemoc        ] [ sveisvei        ] 
09:15 [ abstractj       ] [ de_henne        ] [ herzi           ] [ Mack         ] [ psino          ] [ Sven_vB         ] 
09:15 [ abumirqaan      ] [ deadalus        ] [ hhuuggoo        ] [ madscientist ] [ purr           ] [ SvenDowideit    ] 
09:15 [ admc            ] [ dec             ] [ hij1nx          ] [ majek        ] [ pvde           ] [ svnlto          ] 
09:15 [ admc1           ] [ deetb           ] [ hipertracker    ] [ malladi_     ] [ px_            ] [ swaagie         ] 
09:15 [ adrianlang      ] [ defunctzombie_zz] [ hipsterslapfight] [ manacit      ] [ PY1NB1         ] [ swaj            ] 
09:15 [ aeberlin        ] [ deimos          ] [ Hosh            ] [ ManneW       ] [ pyykkis        ] [ switz           ] 
09:15 [ Aidanie         ] [ dekz__          ] [ howdynihao      ] [ manutter     ] [ qbit           ] [ Swizec          ] 
09:15 [ Aikar           ] [ denysonique     ] [ hueniverse1     ] [ mape         ] [ quillo         ] [ syntax          ] 
09:15 [ ajpiano         ] [ Derander_       ] [ Huevos          ] [ marahin      ] [ qwerty|        ] [ syskk           ] 
09:15 [ akshayms        ] [ derchill1r      ] [ hugo_moss       ] [ marcooliveira] [ r04r           ] [ sysx1000        ] 
09:15 [ al3xnull        ] [ DesiJat_        ] [ hydrawat        ] [ marienz      ] [ r0tha          ] [ T-Co_           ] 
09:15 [ albert          ] [ dested          ] [ iain__          ] [ marlun       ] [ radiodario     ] [ t_p             ] 
09:15 [ alekibango      ] [ devdazed        ] [ iaincarsberg_   ] [ Marsup       ] [ railbait       ] [ tahu            ] 
09:15 [ alekibango_     ] [ devdoo          ] [ ianjm           ] [ martijnk     ] [ raj            ] [ takayuki        ] 
09:15 [ alexwhitman     ] [ devsharpen      ] [ iapain          ] [ maru_cc____  ] [ raja           ] [ tanepiper       ] 
09:15 [ AllStruck       ] [ dhpe            ] [ icecandy        ] [ mary5030_    ] [ ralphholzmann  ] [ tarruda         ] 
09:15 [ aMoniker        ] [ didiergm        ] [ ickyb0d-        ] [ masch        ] [ ralphtheninja  ] [ tassmjau        ] 
09:15 [ andrehjr        ] [ digiwano        ] [ icodefo__       ] [ mashlol      ] [ Ralt           ] [ tdh_andy_       ] 
09:15 [ andrew12        ] [ diminoten       ] [ idefine1        ] [ matjas       ] [ randallagordon ] [ teadict         ] 
09:15 [ AntelopeSalad_  ] [ DjMadness       ] [ igl1            ] [ matt_c       ] [ Rantanen       ] [ tec27           ] 
09:15 [ anuby           ] [ DjMadness_      ] [ iksik           ] [ mattdawson   ] [ Rapiere        ] [ techkid6        ] 
09:15 [ anuby_          ] [ djoot           ] [ il_padrino      ] [ mattgifford  ] [ rawtaz         ] [ TechnoCat       ] 
09:15 [ anupam          ] [ dKc             ] [ illunatic       ] [ maveonair    ] [ rax0-          ] [ TehShrike       ] 
09:15 [ arduix          ] [ dleonardi       ] [ im0b            ] [ mawuli       ] [ Raynos         ] [ tellnes         ] 
09:15 [ areil           ] [ dlmannin1       ] [ ImBcmDth        ] [ max_weller   ] [ rcs            ] [ terietor        ] 
09:15 [ arielserafini   ] [ DmitryBochkarev ] [ inarru          ] [ mbalho       ] [ reactormonk    ] [ tg              ] 
09:15 [ armin           ] [ dmogle          ] [ Incip           ] [ mbor         ] [ redir          ] [ tgies           ] 
09:15 [ arnorhs         ] [ dmwuw           ] [ InconceivableB  ] [ Mchl         ] [ ree            ] [ TheAceOfHearts  ] 
09:15 [ asdfz0mg        ] [ dnyy            ] [ indexzero       ] [ McMAGIC--Copy] [ reid           ] [ thealphanerd    ] 
09:15 [ asellus         ] [ dob_            ] [ InezK_away      ] [ mdevolving   ] [ remysharp      ] [ thedaywi1lcome  ] 
09:15 [ asherkin        ] [ dobber_         ] [ ingenthr1       ] [ meckanism    ] [ rendar         ] [ thejefflarson_  ] 
09:15 [ ashnur          ] [ doffm           ] [ inimino         ] [ med_         ] [ retornam       ] [ TheJH           ] 
09:15 [ aslant_         ] [ Domenic_        ] [ Inoperable      ] [ medice       ] [ retrostyle|me  ] [ TheLink         ] 
09:15 [ Asterokid       ] [ dominictarr     ] [ Internet13      ] [ mekwall      ] [ rgmarcha       ] [ thelleo         ] 
09:15 [ aszeszo         ] [ don_jones       ] [ intripoon_      ] [ melter       ] [ rhalff         ] [ TheMoonMaster   ] 
09:15 [ atatsu          ] [ donCams         ] [ irclogger_com   ] [ mephux       ] [ RichardBronosky] [ thirdknife      ] 
09:15 [ Atlantic777     ] [ DoNcK           ] [ ircretary       ] [ MerlinDMC    ] [ rickibalboa    ] [ thrcka          ] 
09:15 [ atojs           ] [ donghee_        ] [ ironfroggy      ] [ merrihew     ] [ riku           ] [ thread          ] 
09:15 [ atomless        ] [ donovanh_       ] [ isaacs_         ] [ mertimor     ] [ rioter         ] [ threesome       ] 
09:15 [ augustl         ] [ DonRichie       ] [ ivan\           ] [ meso_        ] [ Riztonn        ] [ tim_smart|away  ] 
09:15 [ aus             ] [ dook            ] [ ivan`           ] [ metadaddy    ] [ rmill          ] [ timoxley        ] 
09:15 [ AvianFlu        ] [ doolinkr        ] [ j0ni            ] [ metellus     ] [ robinson_k     ] [ TimTim`         ] 
09:15 [ avital          ] [ doowb           ] [ j0ni_           ] [ mferranti    ] [ roger_rabbit   ] [ tklun           ] 
09:15 [ avro            ] [ doug            ] [ Jac0bz1         ] [ mfn          ] [ roger_raymond  ] [ tlync           ] 
09:15 [ awkorama        ] [ dpemmons        ] [ jalcine         ] [ mfrauenh1ltz ] [ Rolken         ] [ tmpvar          ] 
09:15 [ azbarcea        ] [ Draggor         ] [ jamesbathgate   ] [ mickhansen   ] [ rolleiflex     ] [ tokuhirom       ] 
09:15 [ azend           ] [ draginx         ] [ Jamy            ] [ mihamina     ] [ rom1504_       ] [ tomaw           ] 
09:15 [ azhwkd          ] [ dresende        ] [ jan____         ] [ mikegerwitz  ] [ romainhuet     ] [ TommehM         ] 
09:15 [ Baastrup        ] [ drewp           ] [ janezz          ] [ mikey_p      ] [ rounce         ] [ TomRone_        ] 
09:15 [ BadDesign       ] [ drey            ] [ japaniel        ] [ mikl         ] [ roxlu          ] [ tomshredz       ] 
09:15 [ bagro           ] [ DriverDan       ] [ japaniel_       ] [ miql         ] [ rphillips      ] [ tonist          ] 
09:15 [ balboah         ] [ drodger         ] [ jaredrhine      ] [ miql_        ] [ rtgibbons      ] [ tonist_         ] 
09:15 [ balgarath       ] [ DrPizza         ] [ jaredrhine_     ] [ MiracleBlue  ] [ Rubennn        ] [ toothrot        ] 
09:15 [ balupton        ] [ DrShoggoth      ] [ jareiko         ] [ mirkok       ] [ rudasn         ] [ topaxi          ] 
09:15 [ baranaby        ] [ drudge          ] [ jasonrm         ] [ MitchW       ] [ rudolfrck      ] [ topek           ] 
09:15 [ barnes          ] [ dscape_         ] [ JasonSmith      ] [ MitchyNuts   ] [ ruff           ] [ topi`           ] 
09:15 [ barneybook|2    ] [ dshaw_          ] [ Jaylee__        ] [ mitemitreski1] [ RushPL         ] [ torgeir         ] 
09:15 [ bartt1          ] [ duncanbeevers   ] [ jayne           ] [ mkm          ] [ RushPL_        ] [ Torsten         ] 
09:15 [ bastinat0r      ] [ durnik          ] [ jayrobot        ] [ mlocher      ] [ russfrank      ] [ tpatja          ] 
09:15 [ bbttxu          ] [ dwcook          ] [ jb_             ] [ mmalecki[zzz]] [ rvagg          ] [ track7          ] 
09:15 [ bear            ] [ dwierenga       ] [ jcastelli       ] [ mnaser       ] [ rwaldron       ] [ trepan          ] 
09:15 [ beatpanic       ] [ dypsilon        ] [ jcrugzz         ] [ monokrome    ] [ rworth         ] [ trepatudo       ] 
09:15 [ beawesomeinstead] [ echo|afk        ] [ jdar            ] [ MoRn         ] [ RX80           ] [ trodrigues      ] 
09:15 [ beeant          ] [ ed209           ] [ jden            ] [ Motu         ] [ ry4nn_         ] [ ttt             ] 
09:15 [ beeant-work     ] [ edude03         ] [ jeffean         ] [ mp_          ] [ ryanrolds      ] [ tuhoojabotti    ] 
09:15 [ ben_alman       ] [ eighty4         ] [ jefferai        ] [ mpajor_o15   ] [ ryanseddon     ] [ Tux_            ] 
09:15 [ benatkin        ] [ eins78          ] [ jesseproulx     ] [ MrDHat|afk   ] [ rybnik         ] [ txdv            ] 
09:15 [ bencevans       ] [ ejnahc          ] [ jesusabdullah   ] [ mrkurt       ] [ s00pcan        ] [ tylersmi_       ] 
09:15 [ bengl_          ] [ El_Angelo       ] [ jeswin          ] [ mrmoneyc     ] [ s2g            ] [ Typo            ] 
09:15 [ benjaminbenben  ] [ elijah-mbp      ] [ jetienne        ] [ MrNibbles    ] [ s3shs          ] [ unflores        ] 
09:15 [ bentruyman_     ] [ elliotf         ] [ jez0990         ] [ mrpibb       ] [ s4muel         ] [ v-fpiris        ] 
09:15 [ Benvie          ] [ elliottcable    ] [ jgornick        ] [ mscdex_      ] [ s5fs           ] [ VesQ            ] 
09:15 [ Benvie_         ] [ elliottcable_   ] [ jimbot          ] [ munro        ] [ s_e            ] [ vguerra         ] 
09:15 [ Bergle_1        ] [ emattias_       ] [ jimmyff         ] [ myhrlin      ] [ salsamontes    ] [ vguerra_        ] 
09:15 [ bergquist       ] [ emilsedgh       ] [ jimt_           ] [ myndzi       ] [ sam_w          ] [ vsayer_         ] 
09:15 [ beuk            ] [ emptynine       ] [ jjore           ] [ n0c          ] [ sambarino      ] [ vwoo            ] 
09:15 [ Bilge           ] [ enriclluelles   ] [ jkarsrud        ] [ n8n          ] [ SamuraiJack    ] [ Wa              ] 
09:15 [ billy           ] [ enzo            ] [ jlord           ] [ nail___      ] [ sander_        ] [ wagtag          ] 
09:15 [ bitfed_         ] [ epa_            ] [ jmanoto         ] [ nanashiRei   ] [ SargoDarya     ] [ wang            ] 
09:15 [ Blorb           ] [ Epeli           ] [ jmaugue_        ] [ nanoflite    ] [ sawrubh        ] [ wao             ] 
09:15 [ bmatusiak_      ] [ EPIK            ] [ jmoney          ] [ naquad       ] [ sayd           ] [ weal            ] 
09:15 [ BobAlmighty     ] [ epiloque        ] [ jn              ] [ nathan7      ] [ sbeam          ] [ wedgeV_         ] 
09:15 [ bodisjw         ] [ ePirat          ] [ joaojero1imo    ] [ nathanbz     ] [ schredder_     ] [ wereHamster     ] 
09:15 [ bolson          ] [ er1c_           ] [ Joefish_        ] [ nb-ben       ] [ scott_gonzalez ] [ wesbos          ] 
09:15 [ BombStrike      ] [ ereslibre       ] [ joeytwid1le_    ] [ ndngvr       ] [ sdboyer        ] [ wesside         ] 
09:15 [ Bonuspunk       ] [ Erriond__       ] [ jolo2           ] [ netj_        ] [ SebastianFlyte ] [ whyhankee       ] 
09:15 [ Bonuspunkt      ] [ EToS            ] [ Jonathan1cClare ] [ nettie       ] [ Secutor        ] [ wiherek         ] 
09:15 [ booo            ] [ eventualbuddha  ] [ JonathanMcClare ] [ neverendingo ] [ segomos_       ] [ willwh          ] 
09:15 [ booyaa|foo      ] [ EvilJStoker     ] [ Jonghwan        ] [ niclone      ] [ Segrel         ] [ willwhite       ] 
09:15 [ bowen199        ] [ EvilPacket      ] [ joshie          ] [ niftylettuce ] [ seich          ] [ Will|-          ] 
09:15 [ braincra-       ] [ ewalker         ] [ joshthecoder_   ] [ niggler      ] [ Sembiance      ] [ winni           ] 
09:15 [ brainproxy      ] [ exos_           ] [ jpiche          ] [ nihilista    ] [ sente          ] [ wizonesolutions ] 
09:15 [ brettlangdon    ] [ Ezku            ] [ JPT             ] [ Nijiko       ] [ seric          ] [ wolfeidau       ] 
09:15 [ brianc          ] [ Ezku_           ] [ jrdn            ] [ Nijiko_      ] [ Seventoes      ] [ wookiehangover  ] 
09:15 [ brianloveswords ] [ fabienf         ] [ jso             ] [ nikkimccavee ] [ sevvie         ] [ WorkingClassDev ] 
09:15 [ BrightGreenLine ] [ fafaca          ] [ JSON            ] [ nikola       ] [ seyz           ] [ wyan            ] 
09:15 [ brimster        ] [ fastman         ] [ JSON|work       ] [ nilsology    ] [ sg             ] [ wycats__        ] 
09:15 [ brocken_        ] [ faulkner        ] [ jtwalters       ] [ NimeshNeema  ] [ sh19910711     ] [ x13378071       ] 
09:15 [ brycebaril      ] [ felixge         ] [ juliangruber    ] [ ninegrid     ] [ sh19910712     ] [ xande17__       ] 
09:15 [ Bunge_          ] [ fikst           ] [ jvolkman        ] [ ningu        ] [ Shadda         ] [ xAt             ] 
09:15 [ buritic__       ] [ filleokus       ] [ k1ng            ] [ ningu_       ] [ Shadowized     ] [ xdmb            ] 
09:15 [ buritica        ] [ filleokus_      ] [ k_simon         ] [ nkohari      ] [ shanlar        ] [ xk_id_          ] 
09:15 [ bwall           ] [ flagg0204       ] [ ka2n_           ] [ nlf          ] [ shanse         ] [ xorspark        ] 
09:15 [ Bwild           ] [ flyth           ] [ Kai`            ] [ nocturne7    ] [ shesek         ] [ xSmurf          ] 
09:15 [ bytemask        ] [ FMJaggy         ] [ kaichanvong     ] [ Nodon        ] [ shihan         ] [ xxblakefailxx_  ] 
09:15 [ Cainus          ] [ Fofr_           ] [ Kaimei          ] [ NoFaTe       ] [ shlevy_        ] [ yacks           ] 
09:15 [ calvinfo        ] [ FooBarWidget    ] [ Kaltiz          ] [ npmbro       ] [ shoerain       ] [ yankhates       ] 
09:15 [ candlejackson   ] [ FortuneDays     ] [ kanzure         ] [ nsm          ] [ Shrink         ] [ yano            ] 
09:15 [ cburyta         ] [ fpuc            ] [ karupanerura    ] [ nuba         ] [ sideshowcoder  ] [ yawnt           ] 
09:15 [ cce             ] [ frankblizzard   ] [ kaspertidemann  ] [ Nuck         ] [ silvers        ] [ yhpark          ] 
09:15 [ ccohn_          ] [ frdmn           ] [ Katafalkas      ] [ nullo        ] [ simius         ] [ yhpark_talk     ] 
09:15 [ cebor           ] [ Freedonkeys     ] [ kazupon_        ] [ nutcase      ] [ simon|         ] [ yorn            ] 
09:15 [ celogeek        ] [ freeside        ] [ kborchers       ] [ nym          ] [ sinclair|node  ] [ YoY             ] 
09:15 [ cesconix        ] [ freethen`       ] [ kc8qvp          ] [ nzjames      ] [ sindresorhus   ] [ Yuffster_fun    ] 
09:15 [ cha0s           ] [ freewil         ] [ keeto           ] [ o^_^o        ] [ sir_tyri1n     ] [ yuwang          ] 
09:15 [ chaobin         ] [ Frippe          ] [ kenperkins      ] [ occamshatchet] [ sirecote       ] [ yuya_           ] 
09:15 [ chapel          ] [ Furai           ] [ Kenta           ] [ odyniec      ] [ SirFunk        ] [ yzap            ] 
09:15 [ chayin          ] [ fwg             ] [ Kester          ] [ ofan         ] [ sivoais        ] [ zadark          ] 
09:15 [ Cheery          ] [ g0z             ] [ kevinfagan      ] [ ohcibi       ] [ Siyfion        ] [ zaheera         ] 
09:15 [ cheese1756_     ] [ gab82           ] [ KevinT          ] [ ohcibi_      ] [ skattyadz      ] [ Zak             ] 
09:15 [ chilts          ] [ gabriel         ] [ kevireillyy     ] [ olegp_       ] [ skebcio_       ] [ zaleb           ] 
09:15 [ chjj            ] [ Gabriel403      ] [ Kexoth          ] [ omni5cience_ ] [ sKeiths        ] [ zanea           ] 
09:15 [ chmac           ] [ garann          ] [ keyosk          ] [ onr          ] [ skinofstars    ] [ zapu            ] 
09:15 [ chridal         ] [ garren          ] [ khismetix       ] [ oon__        ] [ Slashbunny     ] [ Zauberfisch-idle] 
09:15 [ ChrisAnn        ] [ Garrick         ] [ kinabalu        ] [ ootje        ] [ slicky         ] [ Zauberfisch|idle] 
09:15 [ chrisbuchholz   ] [ garthk          ] [ Kingdutch       ] [ optixx       ] [ slipstream     ] [ Zaxnyd          ] 
09:15 [ chrisdickinson  ] [ gbit86          ] [ KiNgMaR         ] [ oreth        ] [ slurp1         ] [ zdwolfe_        ] 
09:15 [ chrisdotcode    ] [ gdbz            ] [ Kjerski         ] [ orospakr     ] [ smlgbl         ] [ zedas           ] 
09:15 [ chunhao         ] [ gde33|2         ] [ klobucar        ] [ Oskar        ] [ sneakyness     ] [ zeekay          ] 
09:15 [ ckknight        ] [ geb             ] [ korilo          ] [ othiym23     ] [ snuggl         ] [ zemm_           ] 
09:15 [ clarkk1         ] [ gf3             ] [ kornnflake      ] [ Outsider_    ] [ so             ] [ zenazn          ] 
09:15 [ claudio         ] [ ggordan         ] [ kppullin        ] [ over_        ] [ Soarez         ] [ zenodub         ] 
09:15 [ ClaudioAlbertin ] [ ghoti           ] [ krill           ] [ owen1        ] [ SomeoneWeird   ] [ zeromodulus     ] 
09:15 [ clone1018       ] [ gildean         ] [ krishna         ] [ owenb        ] [ someprimetime1 ] [ zeroz           ] 
09:15 [ codelahoma      ] [ gkatsev         ] [ Kudos           ] [ oxy_         ] [ sordina3       ] [ zivester        ] 
09:15 [ codepal         ] [ GlitchMr        ] [ kuja            ] [ oz           ] [ sorensen       ] [ zodiak          ] 
09:15 [ codingkevin     ] [ gnarf           ] [ kuuranne        ] [ Pagan        ] [ sorensen_      ] [ zomg            ] 
09:15 [ Codynyx         ] [ gorillat1on     ] [ kzrl            ] [ pandark_     ] [ sparqz         ] [ zz_angrysock    ] 
09:15 [ Connorhd        ] [ gorillatron     ] [ l1lj3nz1n       ] [ parasight    ] [ spion          ] [ zz_runningskull ] 
09:15 [ conorm          ] [ Gottox          ] [ L_star          ] [ passcod      ] [ sproates       ] [ |Gobo|          ] 
09:15 [ conradev        ] [ greelgorke_work ] [ lance|afk       ] [ patrickod    ] [ Spudly_        ] 
09:15 [ context         ] [ GreenDog        ] [ LanyonM         ] [ paulwe       ] [ SpX            ] 
09:15 [ CookieNomster   ] [ greg5green      ] [ Lee-            ] [ pcarrier__   ] [ squeakytoy     ] 
09:15 [ coolnalu        ] [ Gregor          ] [ Leeol2          ] [ percival     ] [ sreeix         ] 
09:15 [ copongcopong    ] [ Grephix         ] [ LeftWing        ] [ perezd       ] [ sriley         ] 
09:15 -!- Irssi: #Node.js: Total of 1021 nicks [7 ops, 0 halfops, 0 voices, 1014 normal]
09:15 -!- Home page for #node.js: http://nodejs.org/
09:15 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
09:15 < greelgorke_work> as list of params
09:15 < sinclair|node> that would be a method overload wouldn't it?
09:15 -!- Irssi: Join to #Node.js was synced in 21 secs
09:16 < sinclair|node> i tend to avoid method overloading in JS
09:16 < greelgorke_work> yes. tha's what  mean with polymorphic function
09:16 < sinclair|node> i don't really like the extra work involved making a method overloaded 
09:17 < greelgorke_work> sometimes it's nice for the user of your api
09:17 < greelgorke_work> and i tend to be nice to the user of my api
09:17 < greelgorke_work> it really depends on he specific case
09:17 < greelgorke_work> the*
09:17 < ManneW> So, I'm trying to get AngularJS play nicely together with ExpressJS/Passport/NodeJS. I want to implement Facebook login and my server side implementation transfers data exclusively in JSON format (no HTML). I thought that using the built in session support in Passport would be enough, but when I do AJAX requests from my AngularJS app, the session doesn't seem to do any difference - it still says that my current user is not authenticated.
09:18 < ManneW> Is there any other cookie I have to set from when receiving the FB callback? Or any other thing that might be wrong?
09:18 < greelgorke_work> sinclair|node: i just tend not to do things the only this or only that way
09:19 < sinclair|node> greelgorke_work: convention is good
09:19 < greelgorke_work> sinclair|node: yes, it is. but conventions are or should be always scoped to the app/lib/plattform
09:20 < nettie> thanks a lot for the help guys,I really appreciate it. I'll start from here and see how it goes :)
09:20 < sinclair|node> greelgorke_work: i disagree, i think everything should follow the same convention
09:20 < greelgorke_work> not every convention is fine for everything. there is no silver bullet :)
09:20 < sinclair|node> greelgorke_work: if there is something that is not possible due to convention, then the convention is wrong
09:21 < greelgorke_work> well this is the kind of dogma i usually avoid
09:21 < sinclair|node> therefore, you change the convention, rinse, repeat until you have a strong convention that does  work for all use cases
09:21 < greelgorke_work> it asumes, that there is some kind of silver bullet out there
09:22 < sinclair|node> greelgorke_work: my point is, there is no point to writing the same kind of thing a thousand different ways
09:23 < sinclair|node> greelgorke_work: also, if everyone agreed upon the same convention, there would be less involved in getting up to speed with this or that
09:23 -!- mode/#Node.js [+o konobi] by ChanServ
09:23 < sinclair|node> greelgorke_work: i have a question tho
09:23 < ManneW> The Passport deserializeUser doesn't even seem to be called. If that might help? :)
09:24 < greelgorke_work> sinclair|node: principles and conventions are not really the same thing. something, which is considered best prectice is beyond of being convetntion
09:24 <@konobi> ManneW: try #passport.js
09:25 < greelgorke_work> conventions are things made by aggreement of a group. best practices are based on empirical experience. thats the difference
09:25 < sinclair|node> greelgorke_work: best practice should be a precursor to a convention 
09:26 < ManneW> konobi: Thanks, I'll try that. Just thought that chances were better of finding someone knowing anything and being active among the 1000 people in here compared to the 5 users in #passport.js ;)
09:26 < greelgorke_work> sinclair|node: best practices are often born out of conventions
09:27 < greelgorke_work> some group defined a conventions, used it and empirically proved that it's a good practice
09:28 < greelgorke_work> 'nuf said. you said you have a question? gotta work to do ;P
09:28 < sinclair|node> greelgorke_work: anyway, it is good to be restricted in how you code, things that are possible to do but never lead to good places should NEVER be done, a issue i have with JS is that there is no restriction like that in place, its free reign chaos from my point of view
09:28 < havvy> I wonder how TypeScript is going to handle proxies.
09:29 < greelgorke_work> chaos is good for innovations that breaks status quo
09:29 < havvy> sinclair|node: C allows buffer overflows.
09:29 < sinclair|node> greelgorke_work: its unsustainable tho
09:29 < sinclair|node> look at PHP
09:29 < greelgorke_work> there are some practices and conventions in js land, that are sustainable
09:29 < sinclair|node> havvy: what proxy?
09:30 < havvy> ES6 proxies
09:30 < sinclair|node> havvy: i am unfamiliar with them
09:30 < greelgorke_work> sustainablity arises not from a language btw. it's coming from the users and their attitude
09:31 < havvy> They allow you to create an object that decides various facets, like what member access means, what it means to invoke it, and other things.
09:32 < sinclair|node> havvy: can i do this with them....
09:32 < sinclair|node> var obj = {};
09:32 < sinclair|node> obj.method(); <--
09:32 < havvy> Yes.
09:32 < greelgorke_work> i know a guy, who built a commons framework for the firm he worked in. he tried to teach his colleges with in-code strict checking via aspectj and enforcing his architecture
09:32 < sinclair|node> TS will handle them then
09:32 < greelgorke_work> this was kinda strong+strict+hard statical checking everything
09:33 < greelgorke_work> this was not very sustainable
09:33 < sinclair|node> havvy: TS will handle them by way of ambient types
09:33 < beeant-work> how can i copy javascript variable as non reference
09:33 < sinclair|node> greelgorke_work: : his architecture cant have been very good then :P
09:34 < greelgorke_work> beeant-work: if it's privmitive, just assign, if its an object, clone it
09:34 < greelgorke_work> sinclair|node: i'm not to judge it. but the way to do things in this hard-static way was not suitable for his environment
09:35 < beeant-work> var aa = ['aa', 1, 2, 3, 4, 5];
09:35 < beeant-work> var bb = aa;
09:35 < beeant-work> console.log(bb);
09:35 < beeant-work> - ["aa", 1, 2, 3, 4, 5]
09:35 < beeant-work> aa.shift();
09:35 < greelgorke_work> i know, there some big firms out there, where the architects actually do, and are supposed to do, such things
09:35 < beeant-work> console.log(bb);
09:35 < beeant-work> - [1, 2, 3, 4, 5]
09:35 < beeant-work> like im doing that
09:35 < sinclair|node> paste bin 
09:35 < sinclair|node> please
09:35 < greelgorke_work> beeant-work: use pastebing or gist
09:35 < beeant-work> i want bb to be independent
09:35 < beeant-work> sorry
09:36 < sinclair|node> greelgorke_work: do you feel static typing is a bad idea?
09:36 < greelgorke_work> you can clone arrays using slice method
09:36 < beeant-work> http://pastebin.com/8pq9bHcZ
09:36 < beeant-work> ok ill try
09:36 < greelgorke_work> beeant-work: warning: slice create a shallow copy
09:37 < beeant-work> what do you mean by shallow copy
09:37 < greelgorke_work> beeant-work: http://en.wikipedia.org/wiki/Object_copy#Methods_of_copying
09:38 < greelgorke_work> sinclair|node: it's not a bad idea. it's good as dynamic typing
09:38 < sinclair|node> greelgorke_work: from my point of view, static typing is the best, except when it comes to working with dynamic data
09:38 < pluma> What are the popular/recommended choices for web app frameworks these days? I remember express/connect getting a lot of flak for violating node.js conventions or something.
09:38 < beeant-work> oh ok
09:38 < beeant-work> thank you
09:38 < greelgorke_work> my problem with static typing is that most of languages with static typing just introduce to much load with it. and most of this load doesn't bring equaly big advantages
09:39 < sinclair|node> what load?
09:39 < greelgorke_work> to handle with types explicitly
09:39 < sinclair|node> you mean implicitly 
09:39 < greelgorke_work> type inference is one feature, that is missing in many popular static typed langs
09:40 < sinclair|node> C# has type inference 
09:40 < greelgorke_work> but also it reduces flexibility. that might be good or bad
09:40 < sinclair|node> as does C++11
09:40 < greelgorke_work> my point of view on it is: if static typing, then please with inference and strong typing
09:40 < pluma> greelgorke_work, what do you think of how TypeScript handles typing?
09:40 < greelgorke_work> the strong typing is even more important
09:41 < sinclair|node> greelgorke_work: as i mentioned, the lack of flexibility only exists when working with dynamic data
09:41 < beeant-work> i need to make a deep copy in js
09:41 < beeant-work> how can i do that
09:41 < sinclair|node> for everything else, static typing wins
09:41 <@konobi> beeant-work: check npm
09:41 < pluma> beeant, There's plenty of libraries
09:41 < beeant-work> ok 
09:41 < greelgorke_work> beeant-work: look at lodash, it has a deep clone function, which you can see on github
09:41 < pluma> beeant, if you really want to roll your own, iterate over an object's keys recursively.
09:42 < sinclair|node> greelgorke_work: i have spent many many hours creating types for things i have found in some data structure peeled from the internet
09:43 < sinclair|node> greelgorke_work: that is painful and boring work, but you had to do it, modern languages (C#) have a bolt on DLR that handles dynamic when needed
09:43 < greelgorke_work> sinclair|node: well this is the whole point. data is inherently dynamic. we just trying to reduce it's dynamic nature by "classify" it. then you have complex type systems or hirachies of classes
09:43 < pluma> beeant, fwiw, I generally recommend aug but I also wrote my own library called assimilate.
09:43 < beeant-work> how about in underscore
09:43 < pluma> beeant, lodash ~= underscore
09:44 < beeant-work> ok
09:44 < greelgorke_work> beeant-work: you can in fact just copy-paste the lodash or underscore implementation
09:44 < beeant-work> i think i have another idea
09:44 < beeant-work> just clone the keys
09:44 < pluma> hwat?
09:44 < beeant-work> in my use case
09:44 < patrickfromchina> hi,ya,
09:45 < patrickfromchina> any body interesting design a webchat  similar livezilla? 
09:45 < patrickfromchina> with nodejs?
09:45 < sinclair|node> greelgorke_work: completely unrelated topic, do you have thoughts on knockoutjs?
09:46 < patrickfromchina> i want do it. but, i think if anybody interesting, we can do it together,
09:48 < pluma> sinclair|node, I have worked on a web app that used knockout.js. It's neat, but the auto-dependencies are a PITA
09:48 < sinclair|node> pluma: what deps?
09:48 < qwebirc689595> back
09:49 < pluma> sinclair|node, computed observables and such
09:49 < qwebirc689595> wow
09:49 < qwebirc689595> my username changed.
09:49 < qwebirc689595> hehe,
09:50 < pluma> sinclair|node, ko watches when you call observables within a computed observable or binding handler and then re-evaluates them when the observables that were called change. This can be surprising in some cases.
09:50 < sinclair|node> pluma: um, i know, but the computed methods i didn't really kind difficult
09:51 < pluma> sinclair|node, you a word
09:51 < sinclair|node> *find
09:52 < pluma> sinclair|node, computed methods aren't difficult. But in our case we had a binding handler that was used to load "apps" (or "views", depending on your terminology) dynamically. Bad idea.
09:52 < sinclair|node> pluma: oh, im keen to hear what problems you ran into
09:52  * sinclair|node was planning on doing something similar
09:53 < pluma> basically, it was a single page web app integrated into an existing website. We wanted to avoid the initial overhead of loading *everything*, so we used AMD to load some of the content modules.
09:53 < sinclair|node> ok
09:53 < sinclair|node> pluma: did you use the knockout templating stuff?
09:53 < pluma> We defined a binding handler to load the "apps" dynamically and insert them into the DOM.
09:54 < sinclair|node> as in <script type='text.html' id='my-template'> </script>
09:54 < pluma> Well, what we did was that each "app" had a "template", which was then injected into the DOM and then the app module's return object was injected into that as context.
09:54 < sinclair|node> pluma: hang on, let me find you some code i recently worked on
09:55 < pluma> We didn't use regular templates because we didn't want to preload all templates on each page.
09:56 < pluma> We were aware of the external templates plugin, but the designers wanted to have the templates for each app in one place instead of cutting them up, so we just had them in one file each, with plenty of KO bindings to determine what to show and hide
09:56 < sinclair|node> pluma: what templates did you use?
09:56 < greelgor_> back
09:57 < pluma> i.e. just plain old HTML with ko bindings.
09:57 < pluma> This was probably a mistake, but it was tempting.
09:58 < pluma> We ran into several issues. One was that in addition to the global application state viewmodel we had these app-specific viewmodels, but we wanted to be able to access both of them. This wasn't so hard with custom bindings (just prevent the default handling and substitute your own context).
10:00 < pluma> Our biggest mistake wasn't really ko-related. We used curl (cujo's AMD loader) and its plugins extensively. We didn't really distinguish between regular modules and "apps". So if you loaded a module, it could have side-effects just from loading it.
10:00 < pluma> Basically, the modules were stateful and initialised themselves (using the async plugin).
10:01 < sinclair|node> pluma: yeah, i really need to explore the ins and outs, i was thinking about having a go making a tabbed UI, in which each tab might contain s different view
10:01 < sinclair|node> well, view/model
10:01 < sinclair|node> each tab would be responsible for loading in its respective view/model
10:01 < sinclair|node> pluma: the tabs themselves would just be models
10:02 < pluma> Also, handling stuff like widgets is really hard when you're using knockout for everything. We had to rewrite some simple widgets as knockout binding handlers.
10:02 < greelgorke> hm
10:03 < sinclair|node> pluma: tried backbone?
10:03 < pluma> Because ko could swap out entire DOM subtrees automagically, regular widgets would have the rug swept away under their feet.
10:03 < pluma> sinclair|node, not with ko, no.
10:03 < sinclair|node> pluma: on its own?
10:03 < sinclair|node> pluma: some prefer one over the other
10:04 < pluma> sinclair|node, a previous version of the same "app" was based on a bastardized version of backbone. Personally I don't like it, even though I don't blame it for the problems we had with that project.
10:04 < sinclair|node> heh
10:04 < pluma> Basically the programmer who wrote the original code for that one just put everything in views. Including AJAX calls and whatnot.
10:05 < sinclair|node> backbone looks like a lot of work, i like the fact that knockout is really geared towards the client, i need to put its through its paces
10:05 < pluma> Also, backbone models are unnecessarily verbose. I prefer observables over getters/setters.
10:06 < pluma> Shameless plug: I wrote my own observable implementation called "obs". I also wrote a library that allows using them to define models.
10:06 < syskk> if i require the same file but with 2 different paths
10:06 < syskk> is the module still cached?
10:07 < pluma> I'm considering adding optional auto-dependencies, but because of how bad an experience I've had with them it's not a priority for me.
10:07 <@konobi> syskk: assuming they resolve to the same place, yes
10:07 < syskk> ok
10:09 < pluma> sinclair|node, data binding is awesome. But the problem with auto-dependencies is that things can get out of hand if you use observables for more than just display logic.
10:14 < qwebirc689595> whoami
10:15 < qwebirc689595> nickname how change it?
10:16 < pluma> type /nick foo
10:16 < qwebirc689595> how to change nick name?
10:16 < qwebirc689595> wow.
10:17 < standoo> hello
10:20 < pluma> You were saying?
11:08 < Venemo_N9> hi
11:08 < Venemo_N9> could someone please help me with this? http://stackoverflow.com/questions/16477385/how-can-i-maintain-zero-copy-in-a-native-node-module
11:09 < v-fpiris> what about embedding v8 into nginx?
11:11 < atomless> hi
11:11 < atomless> can anyone comment on this : https://gist.github.com/atomless-gist/5553761
11:18 < pluma> atojs, module.exports and exports should be identical, except when you assign directly to exports, you're overwriting it rather than just changing module.exports
11:18 < pluma> gah
11:18 < pluma> atomless, ^
11:19 < pluma> What idiot programmer thought "let's just use the closest alphabetic match for nick completion"?
11:20 < Ezku_> iirc irssi has a plugin for autocompleting in the order of most recent activity
11:22 < pluma> Ezku, that's actually the default in irssi. But I switched to HexChat because irssi has issues with Unicode for some reason.
11:22 < pluma> Ezku, apparently there's an XChat plugin, but it's in Perl.
11:26 < Ezku> pluma: if you had no other problems with irssi, I recommend checking out a guide on the unicode configuration part; I think irssi's implementation is pretty much the most complete one available
11:30 < pluma> Ezku, well, I'm on Windows so there's that.
11:31 < Ezku> which ssh client? putty?
11:31 < pluma> yes
11:31 < pluma> okay, I just found a tutorial for setting up irssi with putty to use utf8
11:31 < Ezku> putty should work fine; just remember to tick the utf8 checkbox
11:32 < Ezku> I've been on windows / os x / unix boxen and never had any trouble with a properly configured irssi
11:32 < pluma> brb
11:33 < pluma> Okay. This *should* have worked.
11:35 < pluma> Now I just need to find out how to force console2/msys-bash to use utf-8 too
11:37 < greelgorke> atomless: commented
11:44 < syskk> is there any way to prevent node.js from terminating if there is any opened tcp connections?
11:44 < syskk> maybe I could use a signal handler?
11:46 < Epeli> syskk:  I think that's the default
11:46 < syskk> ah good
11:47 < atomless> thanks greelgorke
11:55 < iksik> hm, is it possible to secure authentication with websocket server, using ssh keys?
12:04 < leichtgewicht> iksik http://nodejs.org/api/tls.html
12:09 < patstoms> hi, about socket.io. Is there any nice workaraound to not lose sockets on user reconnects.
12:10 < patstoms> for example client got timeout for 2 seconds, and in that time socket.io server is sending socket, but client is reconnecting and get that socket on connection?
12:11 < iksik> leichtgewicht: thank You
12:16 < mscdex_> iksik: there is wss, which uses tls
12:19 < iksik> hm
12:23 < iksik> i think that i have asked wrong, hummm
12:30 < sambarino> don't doubt yourself iksik, you belieb or you die
12:32 < patstoms> do socket.io checks if socket goes to reciver?
12:33 < patstoms> I mean if it's no lose because of bad connection or something like that?
12:35 < mscdex> patstoms: you can supply a callback that gets called when the message was received IIRC
12:36 < patstoms> yes, I understand that I can send back some socket that I got that socket, but do socket.io checks it by default
12:36 < onr> tcp does that
12:37 < patstoms> onr, so, there don't need to be situation when socket is lost, yes?
12:38 < mscdex> patstoms: it does not do an ack by default from what i'm seeing
12:38 < mscdex> on the application level
12:41 < mscdex> so if you don't specify a callback at the end of emit() or write(), it won't request an ack
12:46 < newbie8080> Hello, is there a specific channel for websocket-related questions? Or just here.
12:55 < patstoms> thanks about info mscdex, onr
13:12 < jdar> I'm looking for some tutorials on updating a nodes project from v04-> v0.10  … not finding any good resources. Can anyone recommend?
13:23 < euoia> jdar: I have to say, I'd be surprised if you find something. If you don't find anything I suppose you'll have to start with the changelogs. Perhaps you could write up your experience after?
13:25 < jdar> euoia: I will do that. Thanks for answering. I assume you mean change logs for nodejs.
13:25 < euoia> jdar: yep!
13:31 < Midasx> What do I need to google to figure out how to round down, convert or just display a decimal variable into an integer? i.e 6334.23423 -> 6334
13:32 < euoia> Midasx: javascript round down
13:32 < bnoordhuis> Midasx: Math.floor()?
13:32 < bnoordhuis> or ~~123.456
13:32 < bnoordhuis> though that last one only works for values that fit in 32 bits
13:32 < Midasx> bnoordhuis: Oh cool!
13:33 < Midasx> bnoordhuis: Is there any way I could have figured that out by googling?
13:33 < gildean> parseInt works too
13:33 < gildean> >> parseInt(6334.23423);
13:33 < purr> gildean: (number) 6334
13:33 < bnoordhuis> Midasx: the first one, yes. the second one is not that googleable
13:34 < Midasx> bnoordhuis: Cool well thanks a lot for the help!
13:34 < bnoordhuis> no problem
13:38 < gildean> ~~ is the ugliest, but it seems that it's faster than parseInt or Math.floor 
13:40 < jmav> What's the best oprin for logging server errors
13:40 < euoia> presumably only worth doing if you're in a tight loop or not working with other programmers
13:40 < jmav> I did try log4js, is there any better option?
13:41 < euoia> jmav: I imagine it's a bit of a personal choice
13:43 < jmav> ok, did anyone try caterpillar
14:06 < booyaa|foo> yeah just avoid console.log cause it's blocking
14:12 < greelgorke> booyaa|foo: blocking log isn't that bad for antike-style debugging :)
14:17 < zot> hey!  using request library, and have a piece of code that makes a FormData instance, and I pass it through.  however, the header "'content-type': 'application/x-www-form-urlencoded;...
14:18 < zot> " gets auto assigned, but i need multipart/form-data.  when i pass that into the headers opt, it just gets tossed aside.  is there a proper way to do this?
14:21 < leichtgewicht> Why is reinventing the wheel just soo much fun?
14:22 < zot> not sure what you mean
14:22 < echo|> zot: Got a paste or gist of the code?
14:22 < zot> echo|: yeah, gimme a sec to snip it down to size
14:23 < lejonet> is there any nifty way to create a multipart body with nodejs directly or is there a module that does it swiftly?
14:24 < seismo> In case one of you has an idea for the most awesome web-project ever and needs a project-name: http://arminboss.de/superist/
14:26 < lejonet> seismo: epicness xD
14:26 < zot> echo|: http://pastebin.com/4A9dVhEh gives the gist; unfortunately the real code has an extra (proprietary) layer between me and request, so this is not the real thing.  but i checked the args in the debugger, and they get through as expected.  (note: just realized that the URL gets passed in option block, but i didn't re-add it when trimming.)
14:31 < seismo> :)
14:32 < echo|> zot: So it does seem request determines it based on two things. Have you tried putting that into a multipart array?
14:33 < zot> definitely not, since i don't know what you mean :)
14:34 < zot> ah, i see this in the docs now.  the problem is that the server that i'm sending to (in theory) will only accept multipart/form-data — so i'm assuming from reading that multipart bit that it would also fail :/
14:34 < greelgorke> lejonet: tried request ?
14:35 < alexwhitman> Anyone know which plugin Nodejs-Jenkins is using to validate pull requests?
14:45 < echo|> zot: http://pastebin.com/X1gJVxnH I think in order for request to apply multipart-form like you need, you'll want to use the form built-in.
14:45 < zot> yeah, that's what i discovered just now
14:46 < zot> seems strange that using form: doesn't have the same effect as options={ form: … }
14:48 < Tekhne> I'm new to node.js, and I'm starting a new project on the MEAN stack (MongoDB, express, AngularJS, node.js). Can anyone recommend a full-stack testing framework?
14:48 < echo|> zot: Ah, it's even using the form-data module. https://github.com/mikeal/request/blob/master/index.js#L944-L953
14:48 < zot> yeah, that's why i thought this would just work
14:49 < zot> it's literally just shifting the same form assembly code into a different, more convenient place; so i didn't expect a behavioral change
14:50 < rossk> Tekhne, I was hoping someone else would chime in with a magic bullet
14:50 < kenperkins> morning rossk
14:50 < rossk> morning kenperkins
14:50 < kenperkins> Does anyone have/know of a pkg for doing signature validation (method sig) in node?
14:51 < Tekhne> rossk: Yea :). Maybe there isn't one, but if someone could suggest reasonable choices on the front and back ends, that would be cool too. I know Jasmine is the normal AngularJS choice, but I wasn't sure if there were "better" choices.
14:52 < rossk> Tekhne, we use mocha for our backend testing
14:53 < Tekhne> rossk: Okay. I saw references to it. It looks cool. Will Mocha be a good front end choice?
14:53 < rossk> jury is still out on that one for us
14:53 < rossk> we're currently using superagent for REST testing
14:53 < rossk> and zombie.js for minimal front-end testing
14:53 < kenperkins> man, I miss the days of worry about front end testing
14:53 < rossk> switching to phantom.js / karma.js soon
14:54 < kenperkins> rossk: see my old product is shutting down? :(
14:54  * kenperkins is depressed
14:54 < rossk> i saw that ken
14:54 < rossk> bummer dude
14:54 < kenperkins> it was a great product
14:54 < rossk> i had one upset co-worker :D
14:54 < kenperkins> the problem is, it wasn't focused enough
14:54 < rossk> Tekhne, the Angular folks use Karma (used to be Testacular) for validating their controllers, routes, etc
14:54 < kenperkins> but there's not really an equivalent product
14:55 < rossk> evernote is my clipper
14:55 < kenperkins> thats going to have to be my option as well
14:57 < rossk> Tekhne, if you do find a better end-to-end solution, give me a shout
14:59 < echo|> kenperkins: :( I saw the email last night. 
14:59 < kenperkins> cest la vie
14:59 < kenperkins> i made my bed when i decided to leave, so i can't really complain that much
15:01 < kenperkins> hij1nx does ee2 support bubbling?
15:01 < Tekhne> rossk: will do
15:01 < rossk> @rosskukulinski
15:11 < jt2190> Is there a practical difference between inheriting from EventEmitter and just using process.emit(...) ?
15:24 < pachet> jt2190: process.emit is itself an instance of EventEmitter
15:24 < pachet> er, process rather
15:24 < pachet> thereby exposing an emit method
15:25 < pachet> so its really just an issue of what emitters you want to hold responsible for specific messages
15:26 < gaf> hi. I have a problem with nodemailer.Node is sending the email just fine, but  when I receive the email , the field "from:" doesn`t show the senders name and email address, although  I have  this       from: req.body.name + ' &lt;' + req.body.email + '&gt;', . This is my full code https://gist.github.com/anonymous/5555121
15:31 < kenperkins> rossk: lon auth does work as expected
15:31 < kenperkins> fyi
15:31 < rossk> thanks kenperkins
15:31 < rossk> just specify region as 'LON'?
15:31 < rossk> oh, authUrl.... i remember
15:31 < kenperkins> right
15:32 < kenperkins> rossk: what do you use for logging in your app
15:33 < rossk> winston
15:33 < rossk> ties into express as well as cluster modules
15:33 < kenperkins> perfect
15:33 < kenperkins> FYI, I'm putting lots of self.emit into pkgcloud
15:33 < rossk> mmm delicious
15:33 < kenperkins> so you can wire that into your winston instance
15:34 < daslicht> hi , I have created a simple express app to try out swig and socket.io 
15:34 < daslicht> is it "normal" that it is quite slow when i disable the browser cache 
15:34 < daslicht> ?
15:35 < daslicht> thats the code: https://github.com/daslicht/swig
15:35 < daslicht> marcwensauer.de:3000 is the test 
15:35 < beeant> hello
15:35 < daslicht> hiu:)
15:36 < kenperkins> rossk: do you use cloud files at all
15:37 < rossk> not with our app... though it gets used by your backup system
15:37 < rossk> which we have wired up
15:37 < kenperkins> yea, not via pkgcloud
15:37 < rossk> nope
15:38 < rossk> ken, you have cloud-dns support in your other package, right?
15:38 < kenperkins> yea, I want to get that into pkgcloud as soon as I reconcile the compute/storage delats
15:39 < rossk> ok, that's what I thought
15:40 < kenperkins> Sorry I'm so slow :(
15:42 < rossk> oh hush now
15:43 < gaf> anyone able to help me with nodemailer?
15:47 < geNAZt> hiho
15:47 < webdesserts> gaf: I don't know node mailer, but did you try just using '<' and '>' instead of escaping them?
15:47 < gaf> no
15:47 < webdesserts> that's what their example readme shows
15:48 < gaf>       text: req.body.message works, so i'm able to get the message fine
15:51 < geNAZt> i need a little api framework or just a router module
15:51 < geNAZt> expressjs for my task is to blown up
15:51 < geNAZt> i only need a simple router
15:51 < webdesserts> geNAZt: tried restify?
15:52 < webdesserts> http://mcavage.github.io/node-restify/
15:52 < gaf> webdesserts, better now, at least the senders name is rendering. but the sender email, shows at my own email... :/
15:52 < geNAZt> webdesserts, it also to blown up
15:53 < geNAZt> i only need a pure router for the nodejs http module
15:53 < webdesserts> geNAZt: if you want to go simpler than that https://github.com/saambarati/mapleTree
15:53 < webdesserts> although that's one of many I've seen
15:55 < geNAZt> https://github.com/gett/router
15:55 < geNAZt> easy simple
15:55 < geNAZt> and http module compatible
16:07 < s-p-n> hi
16:07 < geNAZt> hi
16:08 < s-p-n> So, what's the deal with coffeescript?
16:08 < geNAZt> ? 
16:08 < bluesm> Hi
16:09 < geNAZt> some people love its syntax
16:09 < bluesm> This code https://gist.github.com/bluesm/5555422
16:09 < s-p-n> is it only for syntax sugar?
16:09 < geNAZt> but i think its bad, because it can hide bugs and performance holes
16:09 < geNAZt> s-p-n, yes
16:09 < bluesm> Doesn't make a first "hello" and second "world"
16:09 < s-p-n> ah, good point
16:09 < geNAZt> bluesm, does the http server gets bound ?
16:09 < bluesm> But seems to wait until 2000 ms ...
16:10 < bluesm> geNAZt: Could you explain ?
16:10 < enzo> Hi
16:10 < s-p-n> bluesm, you told it to wait 2000ms in the settimeout
16:11 < s-p-n> is that not expected?
16:11 < geNAZt> bluesm, it works on my node
16:11 < geNAZt> it writes hello, waits 2 seconds then world, and the connection is ended
16:11 < daslicht> anyone got expereince with node-proxy ?
16:11 < enzo> I'd like to run a shell command (indeed composer.phar install that prints some data on stdout), and I'd like to see the data written by this command, as the flow goes (I don't want to wait for the command to end, to see the complete stdout)
16:11 < s-p-n> I have experience with node and proxies
16:11 < s-p-n> not node-proxy
16:12 < s-p-n> what's the issue daslicht?
16:12 < enzo> possible to do that? 
16:12 < enzo> I use for now require('child_process').exec but it only trigger a function at the very end of the shell command
16:12 < s-p-n> enzo it's possble
16:12 < s-p-n> I forget tho
16:12 < daslicht> i have created a simple proxy which forwards the request from marcwensauer.de to marcwensauer.de:3000
16:12 < daslicht> is therer a way to disallow directcalling marcwensauer.de:3000 ?
16:13 < s-p-n> to disallow directcalling...
16:13 < geNAZt> enzo, use .spawn
16:14 < daslicht> https://gist.github.com/daslicht/5555445
16:14 < daslicht> s-p-n maybe its the wrong term or my approch is bad :)
16:14 < daslicht> just curious how to do something like this correct
16:14 < s-p-n> well I'm not a proxy specialist
16:14 < s-p-n> I just dabble
16:14 < daslicht> :)
16:15 < geNAZt> daslicht, wand it doesnt work ?
16:15 < daslicht> its working 
16:15 < daslicht> but i also can call my proxied site directly
16:15 < enzo> I'm trying http://stackoverflow.com/questions/8389974/how-to-run-commands-via-nodejs-child-process that uses spawn, first try is not a success however
16:15 < s-p-n> but how would u explain ur problem to a non proxy specialist?
16:15 < daslicht> would be nice if marcwensauer.de:3000 would return nothing
16:16 < daslicht> just marcwensauer.de
16:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:16 < daslicht> is that more clear ?
16:16 < s-p-n> so u have a connection working daslicht?
16:16 < daslicht> yes
16:16 < gaf> any ideas what is wrong with my code? issue on line 53 of app.js https://gist.github.com/anonymous/5555121
16:16 < s-p-n> but u don't want what now?
16:16 < daslicht> i dont whant that marcwensauer.de:3000 is callable directly 
16:17 < daslicht> the page should be just reachable via marcwensauer.de
16:17 < gaf> i changed       from: req.body.name + ' &lt;' + req.body.email + '&gt;', 
16:17 < gaf>  for       from: req.body.name + '<' + req.body.email + '>', , but still not working
16:17 < s-p-n> ohh
16:17 < s-p-n> u want to set up a firewall kind of thing in node?
16:17 < s-p-n> to only allow one service to connect?
16:17 < daslicht> yeah that sounds good
16:17 < daslicht> hm
16:18 < s-p-n> u can check that the ip is 127.0.0.1
16:18 < s-p-n> and the port is 80
16:18 < joe_k> hi. I am looking for an oauth2 client library for node
16:18 < s-p-n> that should work for the same pc
16:18 < bluesm> geNAZt: Why it don't work on my node ?
16:18 < joe_k> not oauth2, and not so I can pass through to facebook or google. but just so I can make oauth2 authenticated requests to an oauth2 protected server
16:19 < joe_k> err, not oauth1
16:19 < daslicht> i try that 
16:19 < s-p-n> but u do the check on the 8000 port program
16:19 < s-p-n> yeah
16:19 < s-p-n> good luck
16:19 < daslicht> thanks
16:20 < echo|> daslicht: For my apps, I've always found nginx to work great and haven't had the need to try and use node-http-proxy, primary because I usually serve some kind of static files along with the app, which nginx is an expert at serving and caching.
16:20 < daslicht> yeah its on my todolist
16:20 < daslicht> i try it 
16:22 < daslicht> thank you
16:22 < gaf> nodemailer is using my email from the transport instead of the sender's email. ideas?
16:23 < s-p-n> @gaf, look for a way to change the sender
16:23 < s-p-n> what are u trying now?
16:23 < s-p-n> the docs should have the info u need
16:24 < lacrymology> is there a way for me to console.log() a string without formatting it? like I want to see "foo
16:24 < lacrymology> I mean
16:24 < lacrymology> "foo\n"
16:25 < s-p-n> use replace
16:25 < devoidfury> console.log(JSON.stringify(foo))
16:25 < lacrymology> devoidfury: yeay
16:25 < s-p-n> use replace
16:25 < s-p-n> whoops, sry for dbl
16:27 < s-p-n> @devoldfury, JSON.stringify is an elegant solution actually
16:28 < gaf> s-p-n, what do you mean? i was reading the docs though, no info
16:28 < devoidfury> s-p-n: yes, it'll print out javascript-valid representations, should be exact on strings
16:28 < s-p-n> you're using node-mailer?
16:28 < gaf> yup
16:28 < s-p-n> i'll look it up
16:29 < gaf> look ma code https://gist.github.com/anonymous/5555121
16:30 < s-p-n> gaf, https://github.com/srod/node-mailer
16:30 < gaf> i was using this https://github.com/andris9/Nodemailer
16:31 < gaf> the link you sent redirects to mine
16:31 < gaf> not a 301 ^^
16:32 < gaf> the problem is from: req.body.name + '<' + req.body.senderMail + '>',
16:33 < gaf>  req.body.senderMail renders the transport email account, not the one the sender input
16:33 < s-p-n> in the example I see a checkmark :/
16:34 < gaf> i mean  req.body.email
16:34 < gaf> huh?
16:34 < s-p-n> "Fred Foo ✔ <foo@blurdybloop.com>"
16:34 < s-p-n> on nodemailer
16:35 < s-p-n> do u see a checkmark or is it my android?
16:35 < gaf> i see it, yes
16:36 < gaf> i don't think that is the issue
16:36 < gaf> it is just a string
16:36 < s-p-n> me neither
16:36 < s-p-n> well the string is parsed
16:36 < s-p-n> by something
16:36 < s-p-n> probly the email client
16:36 < gaf> mm, i see
16:36 < s-p-n> but nodemailer must escape it correctly
16:37 < gaf> yes, yes, it was escaped properlly before, and still not working
16:37 < s-p-n> console.log the req.body.email stuff
16:37 < s-p-n> or
16:37 < gaf> that i changed already
16:37 < s-p-n> so are they what u want them to be?
16:38 < gaf> no
16:38 < s-p-n> well, 
16:38 < gaf> i said, it was escaped properlly before, and still i had the wrong email
16:38 < gaf> it is inserting the email i set as the transport
16:38 < gaf> it is not getting from the the req.body
16:40 < gaf> it is funny, cause req.body.name  works
16:40 < gaf> also req.body.message works
16:40 < s-p-n> what do u mean 'works'? when u console.log them, they are what u want?
16:40 < lejonet> Okay, I'm stumped now, I've tried with serveral modules (request, restler amongst others) to get a frikin multipart upload client to work, but either the module crashes when you submit the data or I get a "stream ended unexpectedly" on the server side, which is using formidable to parse the form data
16:41 < gaf> i tested sending the email form, so i can see it works as expected
16:41 < gaf> eg. shows the correct content
16:42 < gaf> i will try to  console.log the req.body.email
16:43 < lejonet> https://gist.github.com/anonymous/650fc08603fdaa1cfb45 is the function that handles the POST request on the server side..
16:44 < lejonet> I can't find a single module or technique that gives me anything but failure to upload a multipart form to that function...
16:44 < lejonet> (it must be multipart as the purpose is to upload a file to that server)
16:44 < devoidfury> lejonet: you sure the parameters are in the right order? generally the convention is (request, response)
16:45 < lejonet> devoidfury: yeah, that is all in order, if I use urlencoded and send to it, everything works like it should...
16:45 < webdesserts> gaf: http://cdn.memegenerator.net/instances/400x/36347732.jpg
16:45 < lejonet> except the obvious that the file is mangled and cannot be restored on the server side
16:45 < rossk> :P webdesserts
16:46 < devoidfury> lejonet: are you using anything else in your application that might interfere with the req stream?
16:46 < lejonet> devoidfury: I got 2 other POST request handling functions that works perfectly fine so it isn't that, sadly
16:47 < lejonet> nah, the only things I'm using on the server side is nodejs, formidable and node-orm2
16:47 < lejonet> oh and cryptojs, but none of those should manipulate the req stream except formidable
16:48 < spence__> stream listeners need to be towards the top of the execution chain
16:48 < spence__> or data-loss can happen
16:48 < lejonet> well the only 2 things fiddling with the request stream is nodejs that accepts it and formidable that later parses the request
16:49 < spence__> not familiar with formidable
16:49 < lejonet> I have no frikin clue why it thinks all of the multipart stream solutions I've tried "unexpectedly closed the stream"...
16:50 < lejonet> iirc it's the module express uses for handling forms too
16:50 < gaf> my  node app is running with forever, in production, how can i see the console, to check console logs?
16:52 < spence__> gaf, um.. if you don't have a way to view the console then u can't view the console.. You don't have a testing environment?
16:52 < gaf> i do...need to ring local so :/
16:52 < gaf> ring*
16:52 < devoidfury> gaf : forever redirects stdout and stderr to log files
16:52 < gaf> bring*
16:52 < devoidfury> gaf : do -- forever logs
16:53 < gaf> cool
16:53 < spence__> right on
16:53 < ilyai> gaf: there are a lot of options: log to file, use logger library like winston etc..
16:55 < leichtgewicht> I have been working on preparing a cheat sheet for NPM. https://gist.github.com/martinheidegger/5554941
16:55 < leichtgewicht> What do you think?
16:56 < spence__> leichtgewicht, nice
16:57 < ilyai> leichtgewicht: is it generated somehow or created manually?
16:57 < leichtgewicht> Want to layout it to a A3 .pdf so: any comments on welcome.
16:57 < leichtgewicht> I just wrote it down ...
16:57 < leichtgewicht> I
16:58 < leichtgewicht> So: not generated ...
16:58 < leichtgewicht> right now.
17:01 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:09 < mbor> how do I make a script keep running when executing it?
17:09 < mbor> (from within the script - not using tools like forever etc.)
17:09 < standoo1> mbor: define keep running?
17:10 < daslicht> @s-p-n: http://stackoverflow.com/questions/12349251/node-js-restrict-access-by-ip
17:10 < daslicht> :D
17:10 < daslicht> so easy
17:11 < mbor> standoo1: I'm doing something like this: http://pastie.org/private/u9ksucw5f94hhl0qea0ta, which returns immediately because it's async. but I don't want to destroy the node process to make the server keep running
17:11 < Rantanen> mbor: Start the server?
17:12 < Rantanen> mbor: It shouldn't close the node process if the server is listening - what does your server.js contain?
17:12 < webdesserts> mbor: that link is dead for me
17:13 -!- mode/#Node.js [+o isaacs_] by ChanServ
17:13 < Haputanlas> Hey Guys, I'm trying to decide if it's feasible to use REST instead of a TCP agent. I'm tasked at my company to create a management solution for a client/server architecture. The client is hardware and needs to send updates via heartbeats so that the server can track online/offline status.
17:14 < Rantanen> webdesserts: var Server = require('./server.js'); var server = new Server({ port:env.PORT }); server.on('listening', handle); in short.
17:14 < mbor> Rantanen: it's basically a wrapper around express, where I'm doing: app.listen(this.port, function () { server.emit('listening', server.port, server.env); });
17:14 < Haputanlas> The server will also manage configuration of the clients
17:14 < Haputanlas> Would it be stupid to use REST instead of a TCP agent?
17:14 < Rantanen> mbor: Are you doing the app.listen in the Server constructor?
17:14 < standoo1> Haputanlas: websockets?
17:14 < Rantanen> Any chance of getting a paste of the file?
17:15 < mbor> Rantanen: sure, one moment
17:15 < Haputanlas> I thought websockets were more designed for browser to server communication?
17:15 < Haputanlas> Typically on the same host
17:15 < mbor> Rantanen: this is where I got the concept from: https://github.com/tanem/express-backbone-boilerplate/blob/master/server/src/server.js
17:15 < mbor> Rantanen: it has a start method that emits the "listening" event
17:16 < Rantanen> 17:11:28 < Rantanen> mbor: Start the server?
17:16 < Rantanen> You're not starging it in the first paste - the app.listen never gets called, there's nothing running when the first file ends. :)
17:16 < Haputanlas> standoo1: Am I wrong on that?
17:17 < mbor> Rantanen: that's just my bad. I'm, of course, calling start() in the end
17:17 < standoo1> Haputanlas: thinking..
17:17 < standoo1> why don't you just ping the client fromt the server?
17:18 < mbor> Rantanen: hmm, you're right. that did it. I wasn't doing it correctly
17:18 < mbor> Rantanen: thx :)
17:18 < Rantanen> No problem
17:18 < Rantanen> Haputanlas: Nothing stops you from using websockets from a non-browser client - although it might be a bit of an overkill.
17:18 < Haputanlas> standoo1: that's possible, but I wouldn't be able to authenticate that it's the same client as before.
17:19 < Rantanen> And websockets mainly solve server->client updates. If you're doing client->server updates, just do normal HTTP requests.
17:19 < Haputanlas> Rantanen: This also has to be a scalable solution. I'm expecting around 10,000 clients consistently sending heartbeats
17:19 < Rantanen> Do HTTP requests if your client hardware provides easy library for those. Otherwise send raw UDP packets.
17:20 < Haputanlas> Rantanen: I plan on having Node on both the client and server
17:20 < Haputanlas> So, this should be easy enough to implement any of the suggestions so far. I'm mostly concerned with finding a scalable solution.
17:21 < Rantanen> In that case I'd go with HTTP requests. Easy enough to set up in Node - unless you really worry about scalability in which case go for raw TCP sockets (if you need the reliability) or UDP (if you won't)
17:21 < Haputanlas> Rantanen: reliability is also key. I can't have clients reporting incorrect states.
17:22 < Haputanlas> So, your suggestion would likely be to use TCP sockets rather than HTTP requests?
17:22 < Rantanen> How frequent the requests are?
17:22 < Rantanen> Or updates
17:22 < Haputanlas> Rantanen: Raw TCP sockets will be more scalable than HTTP requests?
17:22 < Rantanen> HTTP requests use raw TCP sockets + HTTP overhead.
17:22 < Haputanlas> The requests are probably every 20-30 seconds
17:23 < Haputanlas> Rantanen: True
17:23 < Rantanen> So you CAN make TCP sockets more scalable - however at the same time Node's HTTP libraries already have optimizations in place.
17:23 < Rantanen> And is it important to know that the clients are alive or that they are online?
17:24 < Haputanlas> At 20-30 seconds per heartbeat with 10,000 clients, do you think Node will have any issues with CPU performance (Considering a core i3 processor)
17:25 < Haputanlas> It's more important to know a specific state (Online, connected to a server, offline, etc)
17:26 < standoo1> what's the bandwidth?
17:26 < Haputanlas> That will be variable depending on the customer's site
17:27 < Haputanlas> However, expect the server side to be in a datacenter
17:27 < standoo1> ok
17:27 < Haputanlas> Should be somewhere in the tune of 1Gb to 10Gb
17:27 < standoo1> then bandwidth speed wouldn't be a problem
17:28 < Rantanen> 10k clients, 1 request per 20 seconds... 500 requests per second?
17:28 < Haputanlas> I've seen all of these crazy articles about 100,000+ HTTP sessions on single machines with Node
17:28 < Haputanlas> Rantanen: sounds abou right
17:29 < Rantanen> That gives 2ms per request
17:29 <@isaacs> niggler: what's the current status of xls on npm?
17:29 <@isaacs> niggler: i just realized that it actually started in january.
17:29 < Rantanen> Haputanlas: What are you doing with the requests on Node-side. Writing info to DB?
17:30 < niggler> haha isaacs still there, but i also kinda forgot about it
17:30 < Haputanlas> Rantanen: yes. Sending to MySQL
17:30 < niggler> i also chose a different name so no worries
17:30 <@isaacs> niggler: k, well, just followup email just dinged
17:30 <@isaacs> :)
17:30 < niggler> that was april 12
17:30 < Rantanen> isaacs: Quick question on NPM - if I screw up first publish of a project, is there a preferred way to fix that? npm unpublish --force, npm publish or just npm publish --force with the same version? >.>
17:30 < standoo1> it's so rare to hear a mod speak
17:31 < Rantanen> Not that I'd ever do such a thing.. twice.. in a row...
17:32 < niggler> Rantanen how did you screw up?  did you put confidential info there?
17:32 < Rantanen> Nope. Was still trying to learn the package.json syntax so got my description field stuff all kinds wrong.
17:33 <@isaacs> Rantanen: they do the same thing :)
17:33 <@isaacs> Rantanen: so either is fine
17:33 < Haputanlas> Rantanen: I'd likely query MySQL to validate whether a configuration of the remote device is synced. If there is an update request (Which of course could be in-between a heartbeat), the MySQL DB would need to be updated
17:33 <@isaacs> Rantanen: but if it's a significant code change, do the right thing and bump the version and publish
17:33 < Rantanen> I guess I could have just upped rev by ..1, but figured I could just as well fix it for good.
17:33 < Haputanlas> Rantanen: however, I would expect the updates to be rare
17:34 <@isaacs> niggler: yeah, i forward those requests to 4weeks@followupthen
17:34 < Rantanen> isaacs: Yah, had it been, I'd have done that - but was just a package.json fix.
17:34 < Rantanen> But thanks for the info!
17:34 <@isaacs> niggler: so, speaking of which, what about pb?
17:34 < Rantanen> Haputanlas: What's your DB engine?
17:34 < niggler> i still don't see the repo 
17:34 < Haputanlas> node-mysql
17:34 < niggler> isaacs the hubspot github doesn't show it
17:34 < Haputanlas> Would there be a reason to choose one of the other?
17:35 < niggler> *the alleged repo doesn't exist nor was it put up there recently
17:35 < Rantanen> Haputanlas: Mysql engine, not the node module - just wondering about transaction support.
17:35 < Haputanlas> Ah
17:35 < Rantanen> Although not sure if you need it.
17:35 < Rantanen> Node can handle thousands of requests - it won't do that in one process, but you can fork it to handle them.
17:35 < niggler> so I'm not quite sure what happened on April 9 when they said "fixed the repo url and republished"
17:36 < Haputanlas> Rantanen: Cluster?
17:36 < Rantanen> So as long as your Node process doesn't hold the state (ie, relies on the DB), you shouldn't have trouble forking it.
17:36 < Rantanen> Yah
17:37 < Rantanen> (And well, it can handle thousands in one process, but not Thousands.. as in, the 100 000+ you keep seeing in places. >.>)
17:37 <@isaacs> niggler: yeah, their repo url is still busted
17:37 <@isaacs> niggler: and they didn't publish anything in april
17:37 < niggler> more importantly isaacs i don't see any repo on the hubspot github that corresponds to the project
17:38 < Haputanlas> Rantanen: I expect most customers to be in the range of 1-4 thousand. However, we expect a few near 10k
17:38 < Rantanen> So I'd go with HTTP requests. Build it with forking in mind and if you hit problems with one Node process, scale it with cluster.
17:38 < Haputanlas> Also, I plan on creating a situation with multiple management servers to offload traffic
17:39 < Rantanen> Just remember that cluster will introduce concurrency on the DB level so if there's common data you might need transactions in the DB.
17:39 < chapel> I have a weird situation, I am testing how many operations can happen in 1 second with some code, and removing a function that isn't being called slows it down
17:39 < Rantanen> MySQL supports those with InnoDB and BDB engines.
17:39 < Haputanlas> Rantanen: understood. Thanks
17:39 < chapel> from 780k to 730k
17:39 < chapel> and its a consistent change
17:39 < Haputanlas> Will probably be InnoDB
17:40 < chapel> I honestly don't care about the difference, so much as I am curious about why
17:40 < TehShrike> substack: <3 <3 <3
17:41 < TehShrike> relaychum makes me excited
17:42 < gaf> s-p-n, where should i insert the console log?      console.log(req.body.email)
17:42 < chapel> anyone have any idea why removing a function (remember it isn't being called anywhere) would affect the amount of operations?
17:43 <@isaacs> niggler: yeah, exactly
17:43 < TehShrike> chapel: what scope was it created at?
17:43 <@isaacs> niggler: well, in a week, i'll delete it i guess
17:43 <@isaacs> niggler: and xls is yours
17:43 < gaf> i tried in the app.post cb, but it doesn't log :/
17:43 < chapel> well, highest scope of the module
17:43 <@isaacs> niggler: thanks for playing the isaacs email followup game, where everyone's a winner, eventually!
17:44 < niggler> you're only about 4 months late isaacs -- could be worse
17:44 <@isaacs> haha
17:44 < chapel> niggler: can't rush quality
17:45 < niggler> chapel you should have said "it's faster than valve" :P
17:45 < chapel> heh
17:45 < chapel> isaacs Time
17:45 < chapel> 4 weeks to 4 months
17:48 < Domenic_> isaacs: I tagged some npm pull requests for your review :) https://github.com/isaacs/npm/issues?labels=isaacs-please-review&state=open
17:48 <@isaacs> Domenic_: thanks!
17:48 <@isaacs> that's a good idea
17:48 < Domenic_> :)
17:49 < Domenic_> they're the ones that seem reasonable and useful but not trivial enough for me to feel comfortable merging...
17:49 < TehShrike> whaaaa JSON.stringify([ [].concat(who).filter(Boolean), msg ])
17:50 <@isaacs> kewl, i'm gonna do some node building today, so i'll do these first
17:50 <@isaacs> Domenic_: good timing :)
17:50 < alexwhitman> isaacs, do you know which jenkins plugin Nodejs-Jenkins uses to validate pull requests?
17:53 < TehShrike> substack: the shortcuts in the send function frighten my feeble brain, but relaychunk is sweet
17:57 < pluma> I'm full of fail.
17:57 < pluma> I'm trying to make an HTTP POST request via node.js with http.request. But somehow I can't figure out how to send a POST body.
17:57 < pluma> I tried using hyperquest instead, but I'm still at a loss.
17:59 < t4nk914> Hi..I am trying to run exec command and then read output..the issue is that exec is not returning my entire output...the output contains lot of lines.. is there a way I can get entire output ?
17:59 < Domenic_> pluma: both http.request and hyperquest return a writable stream
17:59 < t4nk914> It returns 20% output...does the exec output get truncated?
18:00 < Domenic_> you need to write to the stream, e.g. req.write(JSON.stringify(stuff)); req.end();
18:00 < Domenic_> or pipe a file to it
18:00 < Domenic_> fs.createReadStream("filename").pipe(req);
18:01 < pluma> Domenic_: That's what I'm *trying* to do.
18:01 < Domenic_> :-/
18:02 < t4nk914> My exec command is "exec("git log --pretty='%n' --name-only --since='" + duration + "'", function(error, stdout, etderr){..." stdout doesn't have entire output..the output is truncated..
18:02 < t4nk914> in exec is it possible to return entire output?
18:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:02 < t4nk914> or is there any other way?
18:02 < pluma> Besides, am I daft or is there no way to use http.request with a string URL *and* pass a method?
18:03 < pluma> (i.e. different http method than GET)
18:04 < Domenic_> pluma: yeah it kind of sucks you have to do `var options = url.parse(string); options.method = "POST"; http.request(options)`
18:05 <@isaacbw> so much work
18:05 < t4nk914> could anyone please help me..I am stuck ..My exec command is "exec("git log --pretty='%n' --name-only --since='" + duration + "'", function(error, stdout, etderr){..." stdout doesn't have entire output..the output is truncated..
18:05 < t4nk914> is there a way I can write enteire output?
18:05 < pluma> Domenic_: doesn't url.parse also remove the query args from the pathname?
18:06 < Domenic_> pluma: probably, not sure :(. i guess we can just go see what hyperquest does...
18:07 < pluma> Domenic_: When i try to use hq from the repl, I always get "request already sent" if I try to change the headers.
18:07 < ry4nn_> t4nk914: how big is the buffer? maxBuffer Number (Default: 200*1024) bigger than that?
18:09 < t4nk914> ry4nn_ : I didnt set any max buffer..it uses default...can I give any maximun to it?
18:09 < t4nk914> ry4nn_ : yes it is bigger than that..is there any other better option to use?
18:09 < joe_k> anyone know of an oauth2 client for node?
18:10 < ry4nn_> t4nk914: idk i don't write node ;) just lurk, http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback, the second argument can be a object w/ some keys, maxBuffer: n should prob suffice for the time being
18:10 < t4nk914> ry4nn_ : thanks..
18:20 < pluma> Domenic_: I think the issue I had was caused by some listeners not being added in the correct order or something. I was probably writing after the request had already been processed.
18:20 < pluma> It works now. I'm using content-length now though.
18:31 < keyosk> Someone should modify the api docs to have a (select maybe?) to quickly hop between versions of node ^^
18:45 < leichtgewicht> while preparing my presentation about npm, which I am holding tomorrow I realized that npm itself is not doing "just one thing good" its doing a aweful lot of things very well.
18:46 < leichtgewicht> it is not necessary following the "npm substack" principle, but I think that is okay.
18:46 < leichtgewicht> Because npm is awesome :D
18:50 < nlf> is removing an owner from a package failing for anyone else?
18:59 < cpp1> hey
19:01 < cpp1> i get an error, compiling the latest version using cygwin:
19:01 < cpp1> cc1: Fehler: nicht erkannte Kommandozeilenoption »-fno-tree-sink«
19:02 < cpp1> anyone got an idea how to fix it?
19:07 < robinson_k> hi
19:08 < robinson_k> leichtgewicht: where do you present?
19:10 < robinson_k> Domenic_: uh oh, one from me is also in the tagged list :)
20:10 < qballer> hi
20:10 < qballer> I was wondering if someone knows any small bugs for a newbie in the project
20:19 < robinson_k> qballer: npm?
20:19 < Atlantic777> qballer: hey, what bugs you?
20:29 < qballer> Hey guys, I only onced used the system as a user for a small project.
20:29 < qballer> I liked it a lot and I want to be part of it. 
20:29 < qballer> Looking for a bug
20:31 < echo|> keyosk: Not certain what that was in response to, but that's what I use nave for, and I love it.
20:34 < Atlantic777> qballer: oh, you are looking for some bug in node.js which needs to be fixed? 
20:35 < robinson_k> qballer: node has quite a need for a better documentation as it moves/moved so fast, if you search small things in node core
20:42 < adamsmeat> Hi, I'm trying to embrace grunt but not yet using node for production. mostly for dev purposes. when a node module is installed globally, that same module is just copied over when you need to install into a local project the same module?
20:43 < adamsmeat> or a local grunt installation + contrib is redownloading everything? my internet is sadly being capped and must use bandwidth wisely.
20:45 < adamsmeat> rephrasing: Can I do this: Intall all modules I use a lot globally. In local projects, is there an npm install that will just copy the global module instead of doing http calls?
20:46 < echo|> adamsmeat: AFAIK npm caches packages you've installed for a different purpose, but the same effect. If there's a new version, it will likely pull down that one instead. Try running npm cache ls / to see if grunt and it's dependencies are in the cache. 
20:47 < adamsmeat> so npm cache ls / giving no result means, nothing is in cache?
20:48 < echo|> Right, that's not the only option though. Looking over the man page, theres:  The --link argument will cause npm to link global installs into the local space in some cases. 
20:50 < adamsmeat> Ok. I'll check on that. Coming from php, I just noticed that in node, a project and all its subprojects installs their dependencies under each namespaced folders unlink in php composer, that when a subproject/submodule has same dependency, it just uses all those that are in a vendor dir in the main/root project
20:51 < ljharb_work> adamsmeat: fwiw, that's php composer, not php. there's no convention in php for it.
20:52 < hueniverse1> any streams2 experts? Am I missing something obvious about this https://github.com/joyent/node/issues/5448?
20:52 < d2dchat> is there any library that takes a configurable amount of ondata calls from a stream and queues them up into one call?
20:52 < jcroot> I want to contact with anybody has developed FLEX with NodeJS
20:53 < d2dchat> I want to be able to queue say 1000 ondata values into one
20:53 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:54 < echo|> adamsmeat: I just tested npm install --link on a globally installed module, it shows the check for version matching/deps and then symlinks. However, I see if there's a newer version or it isn't installed globally, it won't complain... it'll just proceed to download.
20:55 < adamsmeat> echo|: thanks for saving me time for it as I'm pretty new with nodejs. I just can't leave yet php  because of session management and pretty used with rdbms mysql.
20:56 < adamsmeat> But using nodejs for dev is introducing me how to get it done in the server for future purposes
20:57 < echo|>  Your time will come. I think I've said much similar things about php, there's some very high-level sugarry modules out there that make the switch very easy. 
21:02 < adamsmeat> Yup. But for other projects that will still stick with php, I don't mind dual language focus as I can easily source matured libraries in php(composer) too just like in node(npm)
21:14 < adamsmeat> ehco|: just confirming to you that --link option is creating symlinks flawlessly in my windows 8 workstation. all just under git bash.
21:29 < mclenithan> anyone have a good example of how to test your own API?   need some new ideas...
21:29 < echo|> adamsmeat: Sweet, glad that worked out for you. That's quite a neat usecase.
21:29 < kenperkins> mclenithan: I use mocha with hock
21:30 < mclenithan> kenperkins: do you set a script to start your server then run calls against it?
21:30 < kenperkins> well, if I'm testing the API proper yes. for some reason I thought you said API SDK :D
21:31 < kenperkins> I test SDK for an API with mocha & hock
21:33 < mclenithan> hock looks interesting, thanks!
21:33 < kenperkins> docs are a bit thin so ask questions if you eneed
21:33 < kenperkins> still working on that
21:34 < mclenithan> cool thank you
21:38 < itsrachelfish> How can I display data from a socket as hex?
21:40 < thealphanerd> itsrachelfish: like the data being sent over the socket?
21:40 < thealphanerd> is the source data hex?
21:42 < itsrachelfish> thealphanerd: Take this script for example http://delog.wordpress.com/2011/04/08/a-simple-tcp-proxy-in-node-js/
21:42 < thealphanerd> what are you trying to do?
21:42 < itsrachelfish> On line 42, serviceSocket.write(data);
21:42 < itsrachelfish> I want to be able to see the data being written in hex
21:43 < thealphanerd> one thing aside
21:43 < thealphanerd> if you are doing proxy stuff
21:43 < thealphanerd> https://github.com/nodejitsu/node-http-proxy
21:43 < thealphanerd> you made find this module helpful
21:43 < itsrachelfish> Unfortunately I don't want an http proxy
21:43 < thealphanerd> ahh
21:43 < thealphanerd> what are you proxying?
21:44 < thealphanerd> I thought you meant web socket between client / server
21:44 < itsrachelfish> Applications
21:45 < thealphanerd> so multiple applications that are part of a larger app?
21:50 < itsrachelfish> The answer was to install https://npmjs.org/package/hexy
21:59 < sinclair|node> havvy: you know, C# has been able to handle these ES6 type proxies for about 3 years already
21:59 < MicahS> I'm having some trouble with node-mysql and streaming rows. Anyone know about that?
22:00 < havvy> sinclair|node: Ah, alright.
22:00 < sinclair|node> havvy: in C#, its call the Dynamic Language Runtime
22:00 < sinclair|node> havvy: what it means is, if you have a obj typed as "dynamic" you can call any property, method, field on that object
22:01 < havvy> But it also means you have no clue what the return type is?
22:01 < sinclair|node> havvy: its just like JS then
22:01 < MicahS> Specifically, it doesn't appear that any events are firing when I try to use the mysql streaming
22:01 < sinclair|node> havvy: but yeah, in general, you don't know, 
22:02 < sinclair|node> havvy: what then happens is when the .net runtime encounters that call, it defers the call off to the DLR to resolve, in which the DLR API is very similar to the ES6 proxy api you posted
22:03 < sinclair|node> havvy: its super useful tho
22:04 < havvy> Yeah.
22:04 < sinclair|node> havvy: for example, in the past, if you wanted to consume a soap web service, you would need to generate a proxy class and compile it with your application, the proxy would be generated off a WSDL document
22:04 < MicahS> felixge or dresende, around?
22:04 < sinclair|node> havvy: however, with the DLR, you can just call the method, and have the DLR API resolve the method calls at runtime
22:05 < havvy> Yeah...I'm wondering how that works...do you specify the type you are expecting to get?
22:06 < sinclair|node> havvy: in the DLR, you are entirely dynamic
22:06 < sinclair|node> havvy: the DLR is exactly what you are used to in JS
22:06 < havvy> Yes, but I'm wondering how that works in a typed language.
22:07 < sinclair|node> havvy: what it does is wrap the object up in a dynamic proxy, so that calls made to the dynamic proxy can be resolved
22:08 < sinclair|node> havvy: as a programmer, you override methods of that proxy to intercept calls
22:08 < havvy> Hmm, maybe I should just look at an example.
22:08 < sinclair|node> the overrides in the proxy contain all the information about how the caller called some method on the proxy, and it is up to you to work out what to do with it
22:09 < sinclair|node> havvy: http://msdn.microsoft.com/en-us/library/dd233052.aspx
22:10 < havvy> Yep, already found that. ^.^
22:11 < pquerna> any learnboosters
22:12 < sinclair|node> havvy: can grab the source too http://dlr.codeplex.com/
22:12 < pquerna> around
22:14 < sinclair|node> havvy: needless to say, having the DLR, or ES6 proxies are an immensely powerful technology to have
22:14 < havvy> Yeah.
22:14 < havvy> But both of them also allow very stupid things too.
22:14 < sinclair|node> havvy: no more say than what typically goes on in JS dev
22:16 <@isaacbw> I only use safety scissors so I don't accidentally cut myself
22:17 < sinclair|node> havvy: SignalR and JSON.NET are the two big projects that were born as a result of the DLR
22:17 < havvy> Weren't you arguing last time that JS should have more restrictions?
22:17 <@isaacbw> me?
22:17 < sinclair|node> havvy: yeah, it should
22:17 <@isaacbw> oh
22:17 <@isaacbw> silly bum
22:17 < echo|> Everytime I look in here sinclair|node is arguing about something :P
22:17 < sinclair|node> im not arguing 
22:17 < havvy> There's no argument at the moment.
22:18 < sinclair|node> havvy: well, maybe JS shouldn't but the tooling should
22:18 < sinclair|node> tooling that says "dont do this"
22:18 < havvy> JSLint, JSHint
22:20 < sinclair|node> havvy: the more i see these X > JS compilers and language arrive and get more sophisticated, the more i look at JS as a target to be compiled onto, than a language anyone should go near
22:20 < havvy> I wish functions could grab properties on themselves.
22:20 < havvy> I see JS as a fine language to still write.
22:21 < sinclair|node> havvy: the option still exists to write ASM, but for large projects, people use C/C++ and a compiler, the same analogy is true for JS
22:21 < ljharb_work> use strict mode if you want JS to have more restrictions
22:21 < ljharb_work> JS is not assembly.
22:21 <@MI6> joyent/libuv: isaacs master * ab157df : Now working on v0.11.3 (+1 more commits) - http://git.io/9aUpWQ
22:22 < sinclair|node> so from that point of view, all these new JS features might be viewed as new instruction sets that X > JS compilers can target
22:23 < havvy> There's also a lot of things that I can use....  destructuring, proxies, maps and sets, perhaps the class syntax.
22:24 < sinclair|node> ljharb_work: but why not draw an analogy between the million line JS source file and a assembly ?
22:25 < sinclair|node> var assembly = require('myassembly');
22:25 < ljharb_work> an assembly program that big is just as poorly architected as a JS program that big.
22:25 < havvy> A million line JS source file would be a trillion line ASM file....no?
22:25 < sinclair|node> ljharb_work: what depends on what the assembly is doing, besides its just an example
22:26 < sinclair|node> ljharb_work: the 10k line js file if you prefer
22:26 < ljharb_work> no matter what a program is doing, if it's large, it's poorly designed.
22:26 < ljharb_work> nature and distributed computing teach us that :-p
22:26 < ljharb_work> a JS file, and an assembly file, are exactly the same as each other, and as a Java file, or any language. it's a non-argument.
22:27 < sinclair|node> ljharb_work: so, the TypeScript compiler which is 53000 lines of JS is poorly designed?
22:27 < ljharb_work> you can generate every language, and write every language natively. that's also a non-argument.
22:27 < ljharb_work> sinclair|node: almost certainly
22:27 < sinclair|node> ljharb: so, you could write it better?
22:28 < ljharb_work> i'm not saying that, nor have i looked at the code. i'm saying it could likely *be written* better.
22:28 < sinclair|node> never mind the fact that TS was engineered by a guy with over 30 years experience in developing compilers
22:28 < sinclair|node> ljharb: in 52000 lines?
22:28 < ljharb_work> you're awfully focused on line count
22:29 < ljharb_work> how many lines a program has does not matter. how complex it is matters.
22:29 < sinclair|node> you are convinced that large projects are always "badly designed"
22:29 < sinclair|node> compilers are complex
22:29 < ljharb_work> large in complexity. not in lines of code, considered a useless metric decades ago
22:29 < sinclair|node> compilers are inherently complex tho
22:29 < ljharb_work> i'm sure one could be built that wasn't so complex.
22:30 < ljharb_work> nothing is inherently complex. only how people reason about it.
22:30 < ljharb_work> or implement it.
22:30 < sinclair|node> well, maybe you should look at the TS source and then decide if its poorly written or not
22:30 < sinclair|node> its very OO
22:31 < sinclair|node> ljharb_work: anyway, we were talking about viewing modules as just really large assembled programs
22:31 < ljharb_work> in JS, OO is poorly written :-p
22:32 < havvy> ljharb: Opinion
22:32 <@Nexxy> OH OH
22:32 < ljharb_work> JS doesn't have classical inheritance. OO is the wrong model.
22:32 <@Nexxy> are we having opinions again?!
22:32 <@Nexxy> can I play?
22:32 < ljharb_work> oh noes
22:32 < havvy> Nexxy: Please do.
22:32 < ljharb_work> havvy: note, i'm not making the argument here that inheritance is bad (that's for another time), i'm just saying that "OOP" is a classical mindset, that does not apply to non-classical languages.
22:32 < AAA_awright> It has prototypical inheritance which is superior
22:32 < slicky> Hands should have exactly five fingers. No more, no less.
22:32 <@Nexxy> I'm pretty sure that unless you're doing things the way I personally do them...
22:32 < ljharb_work> AAA_awright++
22:32 <@Nexxy> you're WRONG
22:33 < ljharb_work> omg how did you make that red
22:33 <@Nexxy> magic
22:33 < havvy> ljharb: mIRC color codes.
22:33 < ljharb_work> my opinions will be so much louder in red
22:33 < slicky> \uRED
22:33 < slicky> heh
22:33 < ljharb_work> :-p
22:33 <@Nexxy> I mean... magic!!!
22:33 < sinclair|node> ljharb_work: is there any issues with doing OOP in JS tho?
22:33 < havvy> A bastard spec of IRC.
22:33 <@Nexxy> mirc? 
22:33 <@Nexxy> plx, I use irssi
22:33 <@Nexxy> which by the way
22:33 <@Nexxy> is the only correct IRC client
22:33 < AAA_awright> sinclair|node: Many
22:33 < sinclair|node> other than syntactic issues 
22:33 < havvy> Nexxy: It's the /name/ of the thing.
22:33 < sinclair|node> AAA_awright: such as?
22:34 <@Nexxy> sorry, no
22:34 < AAA_awright> sinclair|node: Semantic issues
22:34 < slicky> poop > pee
22:34 < slicky> i win
22:34 <@Nexxy> that's not how I feel
22:34 < ljharb_work> sinclair|node: generally "OOP" means lots of nouns, lots of shared state, and classical inheritance. JS doesn't have classical inheritance, it's got verbs (first-class functions), and has lots of functional idioms that can make your programs cleaner and easier to test and maintain.
22:34 < AAA_awright> sinclair|node: Why would you go with an inferior object model? Prototypical inheritance is better...
22:34 < AAA_awright> sinclair|node: I DO like static typing, don't get me wrong
22:34 < havvy> ljharb: OOP doesn't mean lots of nouns. Java means lots of nouns.
22:34 < sinclair|node> OOP != inheritance 
22:34 < ljharb_work> havvy: lol ok, fair enough
22:34 <@Nexxy> OOP means a lush landscape
22:34 <@isaacbw> I smell arguing
22:34 < havvy> And also, Java 8 might actually change that.
22:34 <@Nexxy> Functional is like a barren wasteland
22:35 < ljharb_work> isaacbw: smells like internet
22:35 < slicky> javascript is imba... it's crits are too high
22:35 < havvy> slicky: Lulz
22:35 < sinclair|node> ljharb_work: what do you mean "shared state"
22:35 < AAA_awright> sinclair|node: OO limits you to a single dimension of relationship, the "instance of a class". ECMAScript doesn't make a distinction.
22:35 < ljharb_work> sinclair|node: i should have said "persistent state" - ie instances that hold on to a state, instead of passing data around
22:35 < sinclair|node> AAA_awright: i dont know what that means
22:35 < AAA_awright> You create instances of functions, which themselves can be functions
22:36 < AAA_awright> So you can have instances of instances of instances...
22:36 < slicky> inceptioninstances
22:36 < havvy> ljharb_work: You can write OO that doesn't pass around shared state.
22:36 < AAA_awright> Or just a simple object which isn't an instance of anything
22:36 < slicky> inceptionstances
22:36 < sinclair|node> ljharb_work: but, objects encapsulate state, and you pass objects around
22:36 < AAA_awright> (technically, an instance of Object)
22:36 < ljharb_work> sinclair|node: you might represent state as data, sure. but "state" is a preserved scope, with a "this", etc
22:36 <@Nexxy> you can do anything when you use... IMAGINATION
22:36 < AAA_awright> >> Object instanceof Object // And Object is an instance of itself
22:36 < purr> AAA_awright: (boolean) true
22:36 < ljharb_work> imagionattiioonnnnnnn
22:37 < slicky> those colors are fabulous
22:37 < sinclair|node> ljharb_work: members of an objects all share "this"
22:37 < ljharb_work> not an object literal
22:37 < ljharb_work> only an object instance.
22:37 < sinclair|node> and are scoped to an object
22:37 < slicky> like pre-school
22:37 < ljharb_work> {a: 1} is an object with no "this"
22:37 < AAA_awright> It's more fractal-like
22:37 < AAA_awright> ECMAScript defines itself in terms of itself
22:38 < slicky> infraception
22:38 < sinclair|node> ljharb_work: what about {a:1, b:function() { console.log(this.a) }}}
22:38 < ljharb_work> in that example "this" can have 6 meanings, depending on how b is called
22:38 < AAA_awright> That might seem like it's breaking rules, but we're talking about how instances are defined, not the semantics of it which *are* well-defined
22:39 < sinclair|node> ljharb_work: well, JS closure scope makes life fun and all, but that's why we have var that = this
22:39 < ljharb_work> sinclair|node: but sure, you can force an object literal to have a "this". it's just not usually used
22:39 < ljharb_work> we have that pattern because people insist on using "this" instead of passing data around :-)
22:39 < sinclair|node> ljharb_work: yeah, but even in the object literal sense, a object is an object
22:40 < ljharb_work> i'm talking about an object that was not constructed.
22:40 < sinclair|node> OOP != constructors
22:40 < AAA_awright> ljharb_work: It's semantically the same, there's no difference between ObjectStyle.call(data, argument0) and FunctionStyle(structure, argument0)
22:41 < AAA_awright> ljharb_work: The former case allows you to adopt a programming style that may save time in some cases, that's why we have it, and it's useful
22:41 < AAA_awright> It allows prototypical inheritance
22:41 < slicky> nice -n 19 make -j1
22:41 < AAA_awright> That doesn't exist by default in the former, FunctionStyle call
22:41 < slicky> -_- wrong window
22:41 < slicky> compiling on production software is fun!
22:42 < sinclair|node> ljharb_work: anyway, OOP is not bad like everyone thinks it is, its not inheritance, its not anti performance, what it is is a elegant way to reason about code with 0 downside (other than syntax)
22:42 < AAA_awright> If you're feeling evil try make -j
22:42 < slicky> what's -j without a specified # do?
22:42 < ljharb_work> i disagree on zero downside. there's lots of potential downside. but it's certainly one way to reason about code
22:42 < sinclair|node> ljharb_work: what downside?
22:42 < AAA_awright> sinclair|node: We're arguing it does have downside, it's not elegant like prototypical inheritance is
22:42 < AAA_awright> slicky: It does everything all at the same time
22:43 < slicky> cool, sounds perfect for production
22:44 < sinclair|node> AAA_awright: i have heard some invalid reasons why OOP is bad, proto inheritance aside as an alternative 
22:44 < AAA_awright> sinclair|node: Elegant means there's emergant functionality, OO only has a single dimension like I said
22:44 < AAA_awright> It's not any more elegant than simple function calls
22:44 < sinclair|node> AAA_awright: i don't understand what you mean by single dimensional 
22:44 < AAA_awright> sinclair|node: The only thing that OO understands are instances of classes
22:44 < AAA_awright> sinclair|node: What if I want an instance of an instance
22:45 <@Nexxy> in the history of the internet
22:45 <@Nexxy> has anyone ever actually changed their view as a result of one of these kinds of conversations?
22:45 < sinclair|node> AAA_awright: what is a instance of an instance, can you give an example?
22:45 < ljharb_work> Nexxy: sure. i just don't often admit it right away
22:45 <@Nexxy> "You know what? I used to think OOP was bad but after having a fairly protracted argument with some guy on IRC, I think I'm starting to see the light."
22:45 < AAA_awright> Unicorn is an instance of a Species, Fred is an instance of a Unicorn
22:46 <@Nexxy> You go, Fred.
22:46 < AAA_awright> Unicorn inherits functionality from other instances of Species, and Species itself inherits from other classes that define common elegant behaviors
22:46 < sinclair|node> AAA_awright: oh, so mixins ?
22:46 < AAA_awright> Uh no
22:46 <@Nexxy> no, sinclair
22:46 <@Nexxy> mixins are what you get at sonic
22:47 < BrightGreenLine> I used to think OOP was ___ but then after having a protracted discussion on IRC I realized I still dont know anything about OOP
22:47 <@Nexxy> or the fancy fountain machines
22:47 < sinclair|node> class Unicorn {}; var fred = new Unicorn(); 
22:47 < ljharb_work> also at coldstone!
22:47 <@Nexxy> YEAH!
22:47 < havvy> The problem with OOP is that everybody has a different definition of OOP.
22:47 < sinclair|node> rather: class Unicorn extends Species {}; var fred = new Unicorn(); ??
22:47 < ljharb_work> coldstone mixins are the best
22:47 <@Nexxy> I like to be all like
22:48 < BrightGreenLine> I program in pOOP
22:48 <@Nexxy> "Shut up and knead my icecream"
22:48 < brycebaril> So Coldstone is an instance of Sonic, or am I mixing up my mixin analogies
22:48 < sinclair|node> AAA_awright: is that what you mean?
22:48 <@Nexxy> Coldstone is an instance of Fred the Unicorn
22:48 < ljharb_work> "i'll take a small" *heaps a pound of ice cream on the stone* "with cookie dough, reeses, gummies, bananas, graham crackers" *that'll be $3"
22:48 < AAA_awright> sinclair|node: Right now I'm working on authentication and authorization, with seperate notions of credentials, users, session/bearer tokens (a subclass of credentials), permissions, and such things, while technically possible to program in an OO system, it wouldn't be as elegant...
22:48 < keyosk> More like.... var Unicorn = function() { return {}; }; var fred = new Unicorn();
22:49 < brycebaril> assert.ok(Coldstone instanceof fred)
22:49 < sinclair|node> AAA_awright: I have built these things too in a OOP sense, how have you done it differently?
22:49 <@Nexxy> if (!this instanceof Unicorn) { return new Coldstone("Fred"); }
22:49 < AAA_awright> sinclair|node: ... I mean ES makes no distinction between instances and classes. A function is an object and an object is an instance and an instance is a class and a class is a function.
22:49 <@Nexxy> right?
22:50 < brycebaril> It's a Fred/Coldstone factory!
22:50 <@Nexxy> don't forget the unicorn aspect of this discussion please
22:50 < s_e> mixed metaphors breaking my mind.
22:50 < keyosk> I imagine a coldstone factory tastes better than a unicorn factory.
22:50 <@Nexxy> keyosk, have you ever tasted a unicorn?
22:50 < nlf> only if you eat rocks
22:50 < keyosk> Nexxy, I wish.
22:51 <@isaacbw> empty calories
22:51 <@Nexxy> keyosk, well I have
22:51 <@Nexxy> and I can tell you that it is at least as amazing as coldstone
22:51 < brycebaril> right: function Unicorn() { if (!(this instanceof Coldstone) return new Fred()}
22:51 < sinclair|node> AAA_awright: with all the different types of Authentication that are possible, interfaces + dependency injection seems to make a lot of sense to me
22:51 < ljharb_work> if (fred.horns === 1 && fred.legs === 4 && fred.looksLikeAHorse && fred.fartsRainbows) { console.log('fred is a unicorn'); } // <- duck typing?
22:51 < keyosk> I'll take your word for it
22:51 < AAA_awright> sinclair|node: In OO systems, classes are symbols, they're usually globally defined
22:51 < nlf> keyosk: http://www.thinkgeek.com/product/e5a7/?srp=3
22:51 < sinclair|node> AAA_awright: they can be scoped
22:51 < AAA_awright> Or globally accessible in some fashion, it doesn't make sense for them to have a scope
22:51 < keyosk> I prefer : http://www.instructables.com/id/Unicorn-Poop/
22:52 < AAA_awright> As ES defines it
22:52 < sinclair|node> AAA_awright: namespaces ?
22:52 <@isaacbw> keyosk: beautiful
22:52 < sinclair|node> var ns = ns || {}; 
22:52 < qard> This is a weird conversation to enter suddenly.
22:52 < keyosk> isaacbw: I wish I could take credit for something so gorgeous
22:52 < sinclair|node> ns.sub_ns = || ns.sub_ns || {}
22:53 < sinclair|node> er, you get the idea
22:53 < AAA_awright> sinclair|node: I said accessible... Namespaces just change the context of which set of things you refer to
22:53 < ljharb_work> that's just a less dirty way to do globals tho
22:53 < sinclair|node> AAA_awright: right
22:54 < sinclair|node> then i don't understand what you meant by accessible
22:54 < AAA_awright> sinclair|node: In OO it doesn't make sense for me to say "var fred = new Unicorn; var x = new fred;" but this is entirely posible in ES (with some changes to that example)
22:54 < sinclair|node> ahh
22:55 < mscdex> >> nodejs.rules();
22:55 < purr> mscdex: ReferenceError: nodejs is not defined
22:55 < sinclair|node> well, im not sure in what instances you would want to do that
22:55 < mscdex> :-(
22:55 < AAA_awright> That may not make any sense, like seconds squared doesn't make any sense, but none the less it's possible to describe, like how we describe acceleration with meters/(second^2)
22:55 < sinclair|node> AAA_awright: so back to downsides, i don't really see any
22:56 < AAA_awright> Downsides of what?
22:56 < sinclair|node> OOP
22:56 < sinclair|node> in JS
22:56 < sinclair|node> the instances of instances example doesn't really make sense to me
22:56 < sinclair|node> id use a Factory for such things
22:57 <@isaacbw> AAA_awright: it makes sense if you understand /second^2 as per second per second
22:57 < AAA_awright> isaacbw: Exactly
22:58 < s_e> the fact that you have to make factories isn't a downside?
22:58 < ljharb_work> s_e++
22:58 < havvy> s_e: I make function factories in functional programming.
22:58 < AAA_awright> s_e: Factories in OO?
22:58 < sinclair|node> ljharb_work: are you completely adverse to organizing code logically ?
22:59 < s_e> AAA_awright: [23:56:39] <sinclair|node> id use a Factory for such things
22:59 < AAA_awright> Right but I don't get what it's for
22:59 < sinclair|node> AAA_awright: in reference to instances of instances
22:59 < ljharb_work> sinclair|node: "logically" is how i organize my code. but that's subjective, so you can't use it as a valid comparison.
22:59 < ljharb_work> i don't find OO logical most of the time.
23:00 < AAA_awright> sinclair|node: What do factories have to do with it
23:00 < sinclair|node> where the factory is the instance, and the methods of the factory return other instances
23:01 < s_e> OO is just a paradigm, and in some cases things become incredibly contrieved in order to fit that paradigm, functional style is just a different paradigm. </philosophical>
23:01 < sinclair|node> AAA_awright: remember var unicorn = new Unicorn(); var fred = new unicorn();
23:01 < AAA_awright> sinclair|node: What about it
23:01 < AAA_awright> Where's the factory necessary
23:01 < sinclair|node> AAA_awright: what i am saying, is i would not do var unicorn = new Unicorn(); var fred = new unicorn();
23:02 < sinclair|node> AAA_awright: i would follow a factory pattern in OOP and get the same effect
23:02 < AAA_awright> Actually it would be more like
23:03 < AAA_awright> var Unicorn = new Species(); Unicorn.someVariable = 1; Unicorn.fly = function(){...}
23:03 < ljharb_work> when you need a pattern to work around a flaw in the language…
23:03 < AAA_awright> Well, a big long pattern
23:03 < sinclair|node> ljharb_work: OOP is not a language
23:03 < AAA_awright> ES has patterns but those are well suited
23:03 < ljharb_work> ok let me rephrase. a flaw in your design.
23:03 < AAA_awright> the return void pattern is a favorite
23:04 < AAA_awright> ES needs patterns for asynchronous behaviors, etc
23:04 < sinclair|node> ljharb_work: its not my design
23:04 < ruff> http://i.imgur.com/4IQ9maq.jpg
23:05 <@isaacbw> so name.com, which stores passwords in plain text, was hacked
23:06 < TimTim`> awesome
23:06 < TimTim`> -_-
23:06 < purr> TimTim`: ಠ_ಠ is an IRC client/IRC client framework.
23:06 < s_e> passwords, plain text
23:06 < s_e> why does this still happen in 2013?
23:07 < sinclair|node> ljharb_work: Object Orientated Programming has had decades to evolve, and its been hugely successful, i don't know how you can claim its flawed, you are literally ignoring years of proof and academia that says it works.
23:07 < kornnflake> ?dd
23:07 < s_e> I don't think anyone is arguing that it doesn't work.
23:08 < sinclair|node> s_e: sorry, ljharb_work claimed it was flawed, (and also it was a paradigm i invented)
23:08 < ljharb_work> oriented btw
23:08 < sinclair|node> ignoring the latter, how is it flawed?
23:08 < ljharb_work> functional programming has had decades too
23:08 < ljharb_work> and "successful" never precludes "flawed" in any domain :-)
23:09 < sinclair|node> ljharb_work: which is why the vast majority of software written today is in lisp
23:09 < ljharb_work> "majority" also doesn't correlate with "better", in any domain.
23:10 < brycebaril> isaacbw: their blog post claims the passwords were hashed http://www.name.com/blog
23:10 < sinclair|node> ljharb_work: vs arguments are pointless, so i wont go into OOP vs functional, but why is OOP flawed in JS?
23:10 <@isaacbw> brycebaril: no it doesn't
23:11  * sinclair|node thinks OOP and functional work best together anyway
23:11 < brycebaril> isaacbw: "The information that was accessed includes usernames, passwords, physical addresses, email, hashed passwords and encrypted credit card data"
23:11  * havvy points out that common lisp has the Common Lisp Object System
23:11 < ljharb_work> i'll agree that JS is a great combo of OO and functional
23:12 < ljharb_work> i think forcing everything into a verb pattern, or a noun pattern, is a mistake.
23:12 < sinclair|node> why?
23:12 < niggler> npm question: suppose that A requires B and you globally install A.  a new version of B is pushed to npm.  I run npm update -g.  will A's version of B be updated?
23:12 < ljharb_work> because not everything is a noun. or a verb.
23:12 < ljharb_work> niggler: no
23:12 <@isaacbw> brycebaril: passwords, ... *and* hashed passwords. There was some news a little bit ago about them sending passwords as plain text in emails 
23:13 < sinclair|node> if it is not a noun or a verb, what is it, an adjective ?
23:13 < niggler> so then A would need to be version bumped then in order to get B
23:13 < ljharb_work> niggler: however, if you have a compatible version of B installed at the same level as A, A will use that instead of installing it's own dependency
23:13 < ljharb_work> niggler: yes
23:13 < ljharb_work> sinclair|node: i don't mean other parts of a sentence. i mean some things are nouns, and some are verbs.
23:13 < ljharb_work> and wrapping everything in an object is treating everything like it's a noun
23:13 < brycebaril> isaacbw: yeah a bit confusing that it is in there twice. The second time it is mentioned it talks about them being hashed again.
23:14 < havvy> ljharb: But functions /are/ objects. ;)
23:14 < ljharb_work> havvy: ok s/object/noncallable object/ if you want to be pedantic :-p
23:14 < sinclair|node> ljharb_work: still don't understand
23:14 < ljharb_work> sigh, i know you don't
23:14 < havvy> Course, if we could actually define [[Call]] for objects, it'd be awesome.
23:15 < ljharb_work> havvy: awesful i'd say
23:15 < sinclair|node> at least give me a concrete example
23:15 < brycebaril> isaacbw: they have a comment reply that clarifies it, says they accessed bcrypt hashed passwords, not plaintext
23:15 < sinclair|node> ljharb_work: i wouldn't be very keen on developing in a system where i couldn't call things, "things"
23:16 < niggler> thing is a bad word to use
23:16 < sinclair|node> class Thing {} 
23:16 < sinclair|node> ^ no idea what it does, doesn't deserved to be named
23:16 < brycebaril> Yeah 'thing' is bad, call it 'this'
23:19 < ljharb_work> sinclair|node: i agree. but if you're writing a task, it's not a thing, it's an action.
23:19 < ljharb_work> objects are things. functions are actions.
23:19 < sinclair|node> what?
23:19 < ljharb_work> i'm sure i've sent you http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html but read it please if you haven't yet
23:19 < sinclair|node> will do
23:20 < ljharb_work> hopefully that helps explain some of the mindset i'm coming from
23:21 < sinclair|node> ljharb_work: but no one codes like this anymore?
23:22 < sinclair|node> class Task { delegate:Function }
23:22 < mbor> does anyone know if __dirname is supported in nodejs v0.8.15?
23:22 < sinclair|node> ljharb_work: or even...
23:22 < ljharb_work> why? the task isn't a thing
23:22 < ljharb_work> it's just a function. no need for an object to escort it.
23:23 < sinclair|node> class Task { name:string, description:string, delegate:Function } <-- if you prefer
23:23 < ljharb_work> obviously you still are forced to code like that in a language without modern features
23:23 < ljharb_work> (like java)
23:23 < sinclair|node> ljharb_work: no you are not tho, see above
23:23 < ljharb_work> but when there's no need for it, why limit yourself
23:23 < ljharb_work> that's just a workaround
23:23 < sinclair|node> its not a work around
23:23 < ljharb_work> it's letting you treat a class/object/noun like it's a verb. which is hacky. but sure, better than the older way
23:24 < sinclair|node> its better than just passing a function, in that example, a caller issuing a task can provide additional information about the tast
23:24 < sinclair|node> *task
23:25 < sinclair|node> the think picking up and processing the task can console.log(task.description) for example
23:26 < ljharb_work> functions in JS can have properties.
23:26 < sinclair|node> but then you are hacking the definition of a function
23:26 < ljharb_work> of course not. functions are objects. :-)
23:26 < qard> a function is an object is a function.
23:26 < s_e> this conversation is very internet
23:26 < ljharb_work> JS is awesome like that.
23:27 < sinclair|node> ljharb_work: shouldn't be done in my opinion 
23:27 < s_e> that's the crux, why not?
23:27 < ljharb_work> you'd rather a Task class that delegates to a method that has properties, than a first-class function with properties?
23:28 < sinclair|node> s_e: because a Function is well understood, a function with extra bits is not
23:28 < s_e> did everyone suddenly understand OOP when that was first popularised?
23:29 < qard> yes. everyone ever knows everything always.
23:29 < sinclair|node> s_e: class Task extends Function {} perhaps would another option
23:29 < sinclair|node> *be
23:29 < havvy> Imagine if you could define your own callables by doing   `callableType selfBinding (args) { body}` and it would be the same as doing  `callableType(function selfBinding (args) { body })`
23:30 < jjore> qard, interestingly, a function is *not* an object is *not* a function.
23:30 < s_e> contrievance? why do you have to add complexity?
23:30 < sinclair|node> qard: https://en.wikipedia.org/wiki/Object-oriented_programming <- the internetz knows everything
23:30 < jjore> Speaking from the ECMAScript point of view that says there are several types and that Function and Object aren't the same type.
23:30 < sinclair|node> s_e: was that at me?
23:31 < s_e> yes
23:31 < sinclair|node> that is hardly extra complexity 
23:31 < sinclair|node> var task { name:'job', description:'does something', delegate:function(){}};
23:32 < sinclair|node> for(var n in tasks) { console.log(tasks[n].description); tasks[n].delegate(); }
23:36 < sinclair|node> s_e: i fail to see why the above is contrived 
23:38 < s_e> because you can just do function task(){} when that's all you need.
23:40 <@MI6> joyent/node: isaacs master * 5e9c7a9 : test: Darwin file watcher has paths now (+1 more commits) - http://git.io/mCZ5Ew
23:40 < sinclair|node> s_e: i was given reference to this http://steve-yegge.blogspot.co.nz/2006/03/execution-in-kingdom-of-nouns.html
23:41 < AAA_awright> This authorization problem is kicking my butt
23:41 < AAA_awright> How do you do pluggable authentication, and plugable authorization, and implement bearer tokens
23:41 < AAA_awright> All at the same time
23:41 < AAA_awright> It's like one of those "choose two" dilemmas
23:41 < sinclair|node> AAA_awright: ...
23:42 < sinclair|node> AAA_awright: they are both completely seperate things
23:42 < AAA_awright> sinclair|node: That's kind of my point?
23:43 < AAA_awright> sinclair|node: What do you mean?
23:43 < sinclair|node> so, your application first authenticates the user, gets the bearer token, then whenever the user tries to do something, you authorize the user based on their token
23:44 < AAA_awright> I know how it *works* on the HTTP side
23:44 < AAA_awright> How to program it is another issue
23:44 < sinclair|node> it has little to do with http
23:44 < AAA_awright> Again, how to program it is another issue
23:44 < sinclair|node> AAA_awright: i thought you had this sorted?
23:44 < AAA_awright> Hardly
23:44 < sinclair|node> i was keen to hear your non OOP approach
23:45 < sinclair|node> AAA_awright: what are you authing against?
23:45 < dypsilon> AAA_awright, are you writing a provider or consumer?
23:45 < AAA_awright> I have a few pages of designs but I need to prove it's secure too
23:45 < AAA_awright> Anything and everyone
23:45 < sinclair|node> so, you need a Auth provider
23:45 < AAA_awright> dypsilon: I'm providing services for users to perform actions against
23:46 < AAA_awright> Provider
23:46 < dypsilon> AAA_awright, are you planning to allow third parties to act on behalf of the users? (like twitter does for example)
23:46 < AAA_awright> This isn't strictly API too, this includes login with a form, request a session bearer token cookie that carries read-only permissions, and permission to create a one-time read-write token for submitting forms
23:47 < AAA_awright> dypsilon: Yes. For all purposes, submitting forms is authenticating actions from third parties
23:47 < AAA_awright> Because a submission could in fact potentially be from a third party, CSRF attacks and whatnot
23:48 < sinclair|node> ...
23:48 < dypsilon> AAA_awright, ok, so if you really have 3 legs, the best way to go right now in my opinion is openid connect + oauth 2 + ssl
23:48 < AAA_awright> OAuth support with little addional work is a nice side-effect
23:48 < dypsilon> AAA_awright, also you will need some authentication for your own site, cookie auth for example...
23:49 < AAA_awright> dypsilon: I can do the protocols easily, it's doing the actual authorization work. "Does root user have the permission to delete this content using this token?" "No, it's only a read-only token found in the cookie"
23:49 < sinclair|node> AAA_awright: ...
23:50 < sinclair|node> AAA_awright: got roles?
23:50 < sinclair|node> how about claims based authorization 
23:50 < dypsilon> AAA_awright, yeah, that's not an easy problem to solve and everyone has something else. If you have a small service the best thing is probably to jfdi with if statements
23:50 < AAA_awright> Permission-granting user groups, to be exact, yes
23:51 < sinclair|node> AAA_awright: then authorization should be a breeze
23:51 < AAA_awright> dypsilon: I'm crafting a solution to the generic problem of authorization
23:51 < sinclair|node> AAA_awright: you only need to "know" for sure who a user is, and what group they belong in
23:51 < dypsilon> AAA_awright, are planning to OS it?
23:51 < dypsilon> *you
23:51 < sinclair|node> you get that from the Bearer token
23:51 < AAA_awright> sinclair|node: While the user may have the permission to delete content, their credentials don't necessarially also carry it. You must not allow deleting content from a cookie, for instance, even if the cookie authenticates the root user.
23:51 < AAA_awright> ESPECIALLY if the cookie authenticates the root user
23:52 < cococo> hihihi
23:52 < AAA_awright> Resetting passwords and emails must only be done with the password, not even a read/write session token
23:52 < sinclair|node> AAA_awright: ... you are not storing credentials in the cookie are you?
23:52 < cococo> can anyone sugest me a free nodejs hosting server?
23:52 < AAA_awright> So it's not just the user, it's the combination of credential + if the user has the permission
23:52 < sinclair|node> you would store the bearer token in the cookie
23:52 < dypsilon> cococo, there are plenty clouds, just google
23:52 < cococo> nonononono
23:52 < dypsilon> cococo, nodejitsu, appfog, dotcloud
23:53 < AAA_awright> sinclair|node: I use credential to include bearer tokens as well as two-factor auth and username/password, etc
23:53 < cococo> I want to join one that let me handle the big posible user online, in a node.js server I make
23:53 < dypsilon> AAA_awright, doesn't oauth 2 has the role kind of build in?
23:53 < sinclair|node> AAA_awright: DO NOT store credential (user/pass) in any form, encrypted or otherwise in the users cookie
23:54 < dypsilon> sinclair|node, no problem to store user name
23:54 < AAA_awright> The credential should also include metadata like "This authorizes Twitter to perform actions on behalf of User" so the user can see who is acting in their name
23:54 < cococo> I read nodester only suport 12 user online in his free plan
23:54 < sinclair|node> AAA_awright: additionally, your application should not even know the users password
23:54 < cococo> I need hmm 64
23:54 < cococo> to beging with a free you know
23:54 < AAA_awright> sinclair|node: You could say I'm familiar with cryptography
23:54 < sinclair|node> AAA_awright: there should be no way for your application can retrieve a users password
23:55 < AAA_awright> sinclair|node: That's a major understatement
23:55 < dypsilon> cococo, so you want a hosting for a lot of users, and you don't want to pay anything?
23:55 < cococo> lol
23:55 < sinclair|node> AAA_awright: so, it sounds like you use the users password as part of some authorization step
23:55 < sinclair|node> which means your application is passing the users password around
23:55 < cococo> I think 64 is a few, but enough to make money with my game in couple of month then I pay for a plan
23:55 < sinclair|node> which is BAD
23:56 < AAA_awright> sinclair|node: I'd go farther and say, don't even store session tokens in plaintext. They should be at least 256 bits long and stored encrypted with SHA-2-HMAC
23:56 < dypsilon> cococo, just send a mail to any cloud provider and ask them if they are willing to help you, most likely some of them will
23:56 < sinclair|node> AAA_awright: encryption aside, you do not need to be passing a users password around your application
23:57 < niggler> cococo azure
23:57 < sinclair|node> it is....unnecessary 
23:57 < niggler> azure + bizspark
23:57 < dypsilon> true
23:57 < sinclair|node> AAA_awright: so long as the user obtained the bearer token, you know they authenticated ok
23:57 < AAA_awright> sinclair|node: Thanks for the consern but I said I'm familiar with the principles of authentication
23:58 < AAA_awright> Or at least demonstrated it
23:58 < sinclair|node> AAA_awright: then use are you passing the users password around?
23:58 < AAA_awright> If it's something that's used to authenticate users, don't store it. Period. Make sure it has 128 bits of security, this means a PBKDF for storing user passwords and a MAC of bearer tokens with at least 256 bits of randomness
23:59 < sinclair|node> AAA_awright: you do store it
23:59 < sinclair|node> in the users cookie
23:59 < BobAlmighty> Any socket IO gurus on?
23:59 < AAA_awright> sinclair|node: That's not your storage, it's theirs
23:59 < niggler> BobAlmighty isn't there a dedicated channel?
23:59 < BobAlmighty> Can you have sockets in multiple rooms?
23:59 < BobAlmighty> is therE?
23:59 < sinclair|node> AAA_awright: cookies are also transmitted over the internet, and can be intercepted
23:59 < cococo> azure just give u 3 month trial
23:59 < BobAlmighty> I'm not aware of one, but that'd be sweet if there were
23:59 < niggler> cococo bizspark
--- Log closed Sat May 11 00:00:04 2013
