--- Log opened Wed Aug 15 00:00:01 2012
--- Day changed Wed Aug 15 2012
00:00 <@konobi> jetienne: there can be only one?
00:00 < jetienne> but he died with a mustache ?
00:03 < mscdex> the template engine?
00:41 < joshwnj> what are folks using for handling sessions? any good independent (ie. non-framework) module recommendations?
00:43 < ngoldman> joshwnj: does connect count as a framework?
00:46 <@xyxne> joshwnj, connect is nice and easy
00:49 < joshwnj> ngoldman & xyne: yeah thanks for the suggestion... but wondering if there's something that can be used for sessions, without having to buy-in to the rest of connect
00:49 < joshwnj> do you know how portable the connect sessions plugin is?
00:51 <@Nexxy> joshwnj, I can't say that I've tried to wrench it out of the rest of connect
00:52 <@Nexxy> joshwnj, upon a cursory review of the code however; it looks quite doable
00:52 < joshwnj> cool thanks Nexxy
00:52 < joshwnj> i mean there's a few things going on with sessions right.. there's the part that interracts with http (and cookies)
00:53 <@Nexxy> joshwnj, https://github.com/senchalabs/connect/blob/master/lib/middleware/session.js
00:53 < joshwnj> and the part that is more like a database
00:53 <@Nexxy> you can do in-memory sessions
00:53 <@Nexxy> but connect supports using a session store like redis
00:53 < joshwnj> cheers
00:55 <@Nexxy> ^-^
00:57 < joshwnj> does anyone know, from a security aspect: is it crazy to use unsigned cookies these days if you're only storing a session ID? or should we really be using "secure" cookies for everything?  a little rusty on my theory there
00:58 < Qbix1> hey guys
00:58 < Qbix1> what is node.js doing these days
00:58 < austinbv> is it possible to require a file that does a bunch of setup like assignment
00:58 <@Nexxy> oh, you know...
00:59 <@Nexxy> little bit of this, little bit of that
00:59 < Qbix1> it woudl be cool if I could package node.js + some js files into a windows executable!!
00:59 < austinbv> similar to what a spec_helper would do in ruby
00:59 <@Nexxy> Qbix1, sort of like http://appjs.org/?
01:00 < austinbv> I guess just make them global
01:00 < Qbix1> yes, like this :)
01:00 < Qbix1> is this like PhoneGap for desktop?
01:00 <@Nexxy> Qbix1, seems like it :)
01:01 < Qbix1> mozilla prism type thing?
01:01 <@Nexxy> I haven't played with it myself (I already have an embedded framework for my particular use case)
01:01 <@Nexxy> but it looks promising
01:01 < Qbix1> looks interesting
01:01 < Qbix1> I wonder why there isn't a phonegap for desktop
01:01 < Qbix1> that's popular
01:05 < Hotroot> joshwnj: Cookie stealing is very easy
01:06 < Qbix1> how
01:06 < Hotroot> The session cookie at least should probably always be secure, and definitely http only
01:06 < Qbix1> cookie stealing is easy?
01:06 < Hotroot> Yes
01:07 < Hotroot> Look up "firesheep"
01:07 <@Nexxy> Qbix1, definitely listen to Hotroot ... their name has the word "root" in it, so they can't be wrong
01:07 < Qbix1> firesheep is only easy for wifi etc
01:07 < Qbix1> secure cookies aren't easy to steal
01:07 < joshwnj> Hotroot: but does that apply if you're on https?
01:07 < Hotroot> Qbix1: Yes, and most people use wifi
01:08 < Qbix1> I use wifi
01:08 < Hotroot> joshwnj: Oh. I'm not sure, but I would think that if the cookie is transmitted over https, it's okay?
01:08 <@Nexxy> most script kiddies aren't going to drive to a target's house just to sidejack their sessions
01:08 < Hotroot> joshwnj: Also, make sure the cookie is http only so it can't be stolen with XSS
01:08 < Qbix1> wardriving is rarely done
01:08 < Qbix1> but starbux isn't safe
01:09 <@Nexxy> it is if you tunnel
01:09 < Hotroot> Nexxy: No, but people browse from public wifi.
01:09 < holzp> If they do you have larger security problems
01:09 <@Nexxy> ssh -ND 9999 <your linode's IP here>
01:09 <@Nexxy> all better.
01:09 < Hotroot> Yeah, I use a VPN, but most people don't
01:09 < Hotroot> Depending on his target audience, they could be idiots
01:10 <@Nexxy> hey now
01:10 <@Nexxy> the term is, "unaware of security implications"
01:10 < Hotroot> Plus, good security is good security. Why do I password protect all my stuff? Nobody cares enough to try to hack it, but who knows.
01:11 <@Nexxy> or *do* they?
01:11 < Hotroot> =0
01:11 <@Nexxy> would you even know? ;)
01:11  * Nexxy watches Hotroot install rkhunter
01:11 < joshwnj> heh
01:12 < Hotroot> And now I have to install that =P
01:12 < joshwnj> thanks for the tips all
01:12 <@Nexxy> tee-hee.
01:12 < holzp> THe best security is working on worthless stuff not worth hacking
01:12 <@Nexxy> Hotroot, let me know if it's detected
01:12 <@Nexxy> err, I mean... if you find anything.
01:13 < mscdex> dun dun dunnnnn....
01:13 < Hotroot> Damn that's a big program
01:13 < Hotroot> 'Oh
01:13 < Hotroot> Dependencies
01:13 <@Nexxy> ;P
01:13 < Hotroot> I wonder when Windows will get their shit together and make a package manager
01:13 < mscdex> fireshepherd
01:14 < Hotroot> Doesn't count if you install it on the side
01:14 < mscdex> wpm
01:14 < Hotroot> Apparently they still aren't giving up on IE, they actually advertised during Olympics 0.o
01:14 < mscdex> i don't think Windows will become self-aware and start writing a package manager though
01:14 <@Nexxy> what did we do before they invented rosin core solder?
01:15 < Hotroot> Steam coming to linux will be nice. Right after they did it for Mac, more games started being multi-platform Mac/Win
01:15 <@Nexxy> rosin is annoying
01:15 < mscdex> what did we do before node.js was invented?
01:15 <@Nexxy> cgi
01:15  * mscdex shudders
01:16 < Hotroot> What is rkhunter going on about? Mail system?
01:16 <@Nexxy> hey don't knock my SOA
01:16 < Hotroot> I use gmail like the rest of the world
01:16 < Hotroot> Not arpanet or whatever they think I have
01:16 < mscdex> just saying "CGI" makes me have a gag reflex
01:16 < mscdex> we should just go back to BBSes
01:17 < mscdex> long live fidonet!
01:17 < Hotroot> I just said gmail 0.o No idea if that's what it wanted
01:19 < Hotroot> One warning so far, hopefully just mint =0
01:23 < Hotroot> Yeah, besides some standard ubuntu stuff, looks fine
01:34 < ard_> is there some eval-bot here? I wanted to eval something on a new node version, I have only old one installed
01:35 < DarkArgon> what do u want to eval?
01:36 < ard_> (function() { return this }).call(0)
01:36 < DarkArgon> join #argontest, i'll eval it for you
01:40 <@Nexxy> if only node had some sort of... read, eval, print... loop?
01:44 < mscdex> >> console.log('Hello World!');
01:44 < purr> mscdex: undefined; Console: 'Hello World!'
01:45 < mscdex> >> 'node.js rules!';
01:45 < purr> mscdex: (string) 'node.js rules!'
02:04 < mappum> is there a module for general logging? (where i can set log levels to view certain details or something)
02:08 < jadams> is there a way to require just a text file with commonjs require?  Ala the require.js text! prefix?
02:10 <@Nexxy> jadams, not directly if i'm not mistaken
02:14 < jadams> Nexxy: ok, thanks.  I'll have to figure something out
02:15 < jadams> I'm converting a backbone/require.js app to backbone/coffeescript and am trying to get require.js out of there
02:15 < jadams> will likely add it again later, but for now would like to avoid it
02:19 < samholmes> Wait, what are so bad about globals if you could always access them through the `global` namespace even when they're overwritten with local or module-scoped variables?
02:19 < samholmes> var config = 'overwrite'; global.config; //Still good
02:21 < jrajav> You're looking for "shadowed," not "overwritten"
02:21 < jrajav> And what if two different modules are using the same global name?
02:26 < rvagg> in general it's best not to be too dogmatic about anything in programming, pragmatism is best, globals occasionally have their use
02:26 < jrajav> I agree
02:26 < jrajav> I'm not saying the dogma should be strictly enforced
02:26 < jrajav> But samholmes seems to be questioning the reason for the dogma at all
02:27 < jrajav> Unless you were responding to me, not him :P
02:27 < jrajav> *him not me
02:27 < rvagg> no, I'm not really responding, just throwing that out there
02:28 < rvagg> reminds me of this actually (partly because jadams is talking require.js): https://github.com/jcoglan/sylvester/issues/8#issuecomment-7207071
02:28 < rvagg> " by using AMD, you're simply replacing bindings to global JS identifiers with bindings to global module names, which amounts to the same thing"
02:29 < rvagg> i.e. dogmatism can blind you to your hypocrisy.
02:29 < rvagg> sorry, not ranting about anything in particular, just reflecting! I'll take my reflecting offline now
02:36 < samholmes> What if globals where constants?
02:37 < samholmes> This is basically what I'm doing, creating global reusable functions and a config object. If the rule is to never touch the values of the global namespace except in the global.js file itself, I don't see how there could ever be conflicts.
02:38 < rvagg> the conflict issue is about using other people's stuff
02:38 < rvagg> if you only ever use your own stuff then *shrug*
02:38 < jrajav> You still didn't answer the original issue I raised, which has nothing to do with mutability
02:38 < jrajav> Polluting the global namespace
02:38 < rvagg> but if you're pulling in third party code then you may have cause for concern
02:45 < joshwnj> samholmes: still curious as to why you want to mess with the `global` object... what value are you getting from that? 
02:51 < samholmes> joshwnj: global.config, instead of require('../global.js').config
02:52 < deoxxa> samholmes: seems to be backwards
02:52 < samholmes> Controller('foobar') instead of require('./controllers/foobar')
02:52 < deoxxa> oh my
02:52 < samholmes> deoxxa: what's backwards?
02:52 < deoxxa> shouldn't you be passing that down into your module?
02:52 < deoxxa> i.e.
02:52 < deoxxa> var my_module = require("my_module"), my_instance = new my_module(config);
02:52 < uipoet> Has anyone else been met with disaster after npm -g update?
02:53 < samholmes> deoxxa: I can do that too.
02:53 < uipoet> Created an issue on Github a day ago and haven't heard any updates.
02:54 < samholmes> deoxxa: but the point is, I have quick and easy access to my controllers and models via the global Controller and Model require wrappers.
02:54 < samholmes> It's just syntax sugar
02:54 < Dragonblade> Heya I have a question that I hope someone knows :3 I have a music player using node that my friend made.
02:54 < deoxxa> that makes that code unusable in any environment without that sugar though
02:54 < uipoet> My npm became broken beyond repair. Had to reinstall from scratch and so far avoiding npm -g update until I hear the issue has been resolved.
02:54 < deoxxa> which might be fine in your case
02:54 < joshwnj> samholmes: huge benefit of require('../global.js').config over globals.config is that you can look at it and instantly know where it came from
02:55 < Dragonblade> Unfortunately he has no time to help and I was wondering if I were to show one of you the .js file on what it has could you help
02:55 < rvagg> upstream: been hearing a bit about that, clearing out ~/.npm (i.e. rm -rf) seems to help some people
02:55 < rvagg> ugh, sorry, not upstream, uipoet 
02:55 < Dragonblade> making it playing all the songs in 1 directory instead of a single file?
02:56 < samholmes> joshwnj: good point. But like I said, globals.js would be the only place where you define globals, as a rule.
02:56 < rvagg> Dragonblade: if you post a gist or a link to some code someone may have time to give you pointers
02:56 < Dragonblade> alright Ill do that in a sec
02:56 < dragon> dragonblade?
02:56  * dragon stares
02:56 < deoxxa> oh no!
02:57  * deoxxa covers dragon with a sheet
02:58 < uipoet> Here is the issue: others are confirming same thing regardless of platform: https://github.com/isaacs/npm/issues/2717#issuecomment-7746315
03:00  * dragon can't see anything!
03:00 < uipoet> Would be nice to see an "official" response there soon.
03:04 < Dragonblade> Im here
03:04 < Dragonblade> I was gonna link my webspace page
03:04 < Dragonblade> but apparently apache2 is being difficult
03:04 <@Nexxy> when isn't it?
03:06 < Dragonblade> True
03:07  * rvagg likes apache
03:07 < rvagg> it's been very good to me over the years
03:08 < rvagg> I'm not hipster enough to diss apache
03:08  * Nexxy fires up slowloris
03:08 < rvagg> hipster
03:08 <@Nexxy> OH?!
03:08 < rvagg> you heard me
03:09 <@Nexxy> rvagg, sorry, my TTS was off
03:09 <@Nexxy> say that again?
03:14 < rvagg> well, apparently we're all hipsters cause were here and we use Node...
03:14 < rvagg> that's what the .NET kids say anyway, I hear
03:14 < Dragonblade> I love Apache2 but wow this is what happens when I try setting up a music server BEFORE my friend throws me his player XD
03:15 < Dragonblade> It doesn't load my index.html like it should
03:16 < rvagg> uipoet: looks like you got your response on that issue thread
03:16 < rvagg> closed "3 minutes ago"
03:18 < deoxxa> rvagg: i'm not a hipster because i use node
03:18 < deoxxa> rvagg: i'm a hipster because i ride a fixed gear bicycle
03:18 < deoxxa> but i was a hipster before it was cool to be a hipster
03:18 < rvagg> oooo
03:20 < joshwnj> deoxxa doesn't that just make you even more of a hipster? ;)
03:21 < deoxxa> look i don't like to label myself like that
03:21 < joshwnj> :)
03:21 < deoxxa> but if you have to call it something, i'd go with "alternative culture enthusiast"
03:22 < deoxxa> ast... est... not sure
03:22 < deoxxa> stupid words
03:22 < joshwnj> just start spelling it that way, maybe it'll catch on
03:22 < deoxxa> yeah
03:27 < cainus> any mocha users awake?  just wondering if others are having troubles with node 0.9.0
03:29 < cainus> doesn't look like 0.9.0 is being tested on travis either
03:30 <@Nexxy> cainus, is there something in 0.9.0 that you need specifically?
03:31 < cainus> well 0.8.2 seems broken as well
03:32 <@Nexxy> have you tried 0.8.6? lol
03:32 < cainus> well 0.8.0 apparently works
03:36 < ShaneN> Ugh, I'm noticing a massive memory leak on a windows xp machine. Can't reproduce it on Win 7 or OS X. Tried for the life of me to get v8-profiler and nodetime to install on the xp machine without luck. Need alcohol.
03:39 < AvianFlu> ShaneN: I whole-heartedly support this self-assessment of yours
03:41 < ShaneN> :)
03:45 < ShaneN> @TooTallNate, you are an active contributor to node-time, right? :)
03:45 < rvagg> let me take this moment to pimp a package of mine that I'm again finding useful today for writing tests against a new project: https://github.com/rvagg/node-mkfiletree
03:45 < TooTallNate> ShaneN: it's my module, so yes
03:45 < rvagg> take an object tree and turn it into a directory/file structure
03:45 < ShaneN> First off, it's great (sucking up!). Secondly, any advice for when v8tools fails to compile?
03:46 < TooTallNate> ShaneN: thanks :)
03:46 < TooTallNate> ShaneN: and what's v8tool?
03:46 < ShaneN> Erm, sorry. Let me grab the output of the install
03:48 < ShaneN> @TooTallNate http://pastebin.com/qzrHfj4e
03:48 < ShaneN> Missed the 's'
03:48 < TooTallNate> ShaneN: oh haha, first time the two have been mixed up on me
03:48 < TooTallNate> ShaneN: this is my module: https://github.com/TooTallNate/node-time
03:49 < TooTallNate> "time"
03:49 < ShaneN> gah
03:49 < ShaneN> I clearly need alcohol
03:49 < TooTallNate> nodetime: https://github.com/dmelikyan/nodetime
03:49 < TooTallNate> ^ i am not a part of
03:49 < ShaneN> Thanks :)
03:49 < ShaneN> All that sucking up for nothing...
03:49 < TooTallNate> np, sorry about that
03:49 < ShaneN> =P
03:49 < TooTallNate> hahaha
03:50 < TooTallNate> ShaneN: in any case, what version of MSVC do you have?
03:50 < ShaneN> I'm running against whatever comes with the .NET 3.5 compatible SDK
03:51 < ShaneN> Not sure off hand which version it is
03:51 < ShaneN> I could probably figure it out, but it'd take me a few minutes :)
03:51 < TooTallNate> well that might be 2008. i'm not sure
03:51 < ShaneN> Yeah, 2008 sounds correct
03:51 < gkatsev> what's the node-inspector "fork"?
03:51 < gkatsev> also, that long-stack-traces "fork"?
03:51 < TooTallNate> of mine?
03:52 < ShaneN> It wanted vcbuild.exe, which didn't seem to come with the .NET 4/2010 version
03:52 < TooTallNate> ShaneN: i think gyp might only support 2010 unfortunately
03:52 < TooTallNate> so you might wanna try installing that
03:52 < ShaneN> hrm. Good to know either way. I'll have to try that again
03:53 < TooTallNate> https://github.com/TooTallNate/node-gyp#installation
03:53 < TooTallNate> ^ links for the known working setup
03:53 < ShaneN> Great. Thank you!
04:03 < Raynos> tmpvar: why is motion.js abandoned?
04:05 < rvagg> isaacs: is it safe to listen to both 'data' and 'entry' events on a stream and assume that an fstream will only emit 'entry' events while a standard stream will emit 'data' events?
04:20 < aroman> so, what's the asset pipeline/manager of the week?
04:21 < AvianFlu> I AM THE ASSET MANAGER OF THE WEEK
04:21 < AvianFlu> …seriously though, no idea
04:22 < aroman> well it could be of the month. I'm just not sure which ones people are using in production lately since everyone and their sister seems to have one
04:25 <@Nexxy> my sister doesn't have one
04:27 < rvagg> grr, got disconnected and my irc proxy thinks I already received everything so I now have a gap in the channel! did I get an answer about my question above?
04:27 < cainus> rvagg: nope
04:27 < AvianFlu> Nexxy: neither does mine!
04:27 < AvianFlu> though I'm trying to change that
04:28 < rvagg> thanks cainus 
04:28 < cainus> any express 3 users?  Ican't find close() for the life of me... there seems to be no reference to the server either if I'm not mistaken
04:28 <@Nexxy> rvagg, yes
04:29 < rvagg> troll
04:41 < fosstux> Hi! First of all: I'm a total noob what javascript and node.js concerns - so please bear with me!
04:41 < fosstux> I have a project idea which I'd like to publish as open source software. The software is going to be run on a domain of mine - but can also be installed  somewhere else.
04:41 < fosstux> The idea is a modular Twitter client - a client with a twist: I'd like to be able to offer any registered user to create his/her ideal Twitter client by using Widgets and plugins.
04:41 < fosstux> An overview of this project - which I'm currently panning using the name MulTwyt - can be found here: https://trello.com/board/multwyt/5008bf0943889e536a028be4.
04:41 < fosstux> As stated earlier I don't know javascript and node.js yet - but I want to learn it! Would anyone of you be interested in helping me get this project off the ground?
04:42 < fosstux> I can gladly send you a screenshot of my ideal twitter client, if you are interested.
04:45 < axefrog> woohoo got my proxy working! dual http/https on one port, forwarding to another upstream proxy with local authentication and upstream authentication
04:45 < axefrog> gonna have to github this when it's done...
04:59 <@isaacs> rvagg: i think that's safe, yeah
05:02 < rvagg> thanks
05:04 < tomshreds> hey guys I need something to archive a blog to html files. Is there anything to crawl and save to static html an entire website? No I don't want to rip a porn website or something
05:04 < rvagg> isaacs: do you know of a stream implementation that simply collects the data into a buffer or do I need to write one?
05:04 <@maxogden> rvagg: npm install concat-stream
05:05 < rvagg> nice! thanks maxogden 
05:06 <@isaacs> maxogden: concat-stream should use Buffer.concat
05:06 <@maxogden> it does
05:06 <@isaacs> oh rawk!
05:11 < theBrettman> any opinions in here about sencha and mojito?
05:13 < wookiehangover> mojitos are delicious?
05:13 < Init--WithStyle-> I need to parse a .tiff file on my node.js server and then put it into a database... any idea how I can start tackling this problem?
05:13 < theBrettman> I currently develop with php and jquery but I want to go to node, it's just a big learning curve for me just because there is so many modules and Idk if an aio solution is a good idea or what to use...
05:14 < theBrettman> by mojito, I mean yui's mojito projects
05:14 < theBrettman> *project
05:15 < deoxxa> yui's mojito? i think you mean yahoo.
05:15 < theBrettman> oh, yeah, that's what I mean, lol
05:16 < theBrettman> yui is used in mojito
05:16 < deoxxa> heh
05:16 < theBrettman> I like yui cuz they have support for like everything, even raphael (for svg)
05:16 < theBrettman> sencha kind of does too
05:17 < theBrettman> I wouldn't mind making a cms that can do graphical stuff like it has adobe illustrator built in or something
05:17 < deoxxa> well, sencha made raphael, didn't they?
05:17 < Init--WithStyle-> The Tiff file I need to parse is a heightmap.. I need to convert pixel data to a data collection...
05:17 < theBrettman> I don't think so?
05:18 < AAA_awright> I've thought about making a webapp that takes scans of documents and has a UI so you can do OCR and import data from it, like tabular data or lists
05:18 < AAA_awright> A webapp so you can use it to import data into your blog or whatever
05:18 < AAA_awright> Like that?
05:20 < theBrettman> hm, I guess you're right...
05:21 < theBrettman> mojito is too new for mojito vs sencha but I get the feeling that if I go with sencha now, I will end up switching to mojito later...
05:22 <@Nexxy> :|
05:27 < Init--WithStyle-> Does anyone know of any resources that might help me tackle the problem of taking in a .tiff or png heightmap image and parsing it on my node.js server to a database?
05:56 < rvagg> Nexxy: what are the "wonderfuls"?
05:56 <@Nexxy> rvagg, lol
05:57 <@Nexxy> rvagg, something like this: http://24.media.tumblr.com/tumblr_lm2eo8gvNM1qineolo1_500.jpg
06:00 < thealphanerd> phew
06:00 < thealphanerd> almost ruined a project with an over zealous use of git rebase
06:01 < ljharb> you can always recover.
06:01 < ljharb> git is awesome.
06:01 < thealphanerd> yeah
06:02 < thealphanerd> I merged a branch I didn't want to with a bad rebase
06:03 < ljharb> why are you both merging and rebasing? pick one.
06:03 < ljharb> (pick rebase)
06:04 < thealphanerd> I accidentally merged my master with an experimental branch via rebase
06:04 < thealphanerd> the commits got all mixed up
06:06 < ljharb> merge via rebase? you either merge, rebase, pull, or pull via rebase
06:19 -!- isaacs changed the topic of #Node.js to: stream all the things
06:21 < mappum> join #bitcoin
06:21 < mappum> whoops
06:24 < DTrejo> so... ANI?? https://code.google.com/p/anic/
06:25 < DTrejo> i feel like there must be better syntax for doing streams and filters all that. Also, a better way to prevent the code from degenerating into noisy characters and un-ordered lines
06:26 < DTrejo> oh nvm the project is dead
06:50 <@maxogden> isaacs: http://wooki.ee
07:04 <@isaacs> maxogden: !!!!
07:04 <@isaacs> maxogden: oh, wait, it just directed me to zone.eu/en
07:04 <@isaacs> maxogden: is this some kind of registrar parking thingie?
07:14 <@maxogden> isaacs: dns hasnt propagated fully, try refreshing a few times
07:14 <@isaacs> kk
07:19 <@isaacs> TREE PEOPLE!
07:19 <@maxogden> :D
07:19 <@maxogden> i think im going to estonia next month
07:19 <@maxogden> provided i can convince adobe to fly me there
07:19 <@maxogden> MUWHAAHAHAHA
07:24 <@isaacs> maxogden: i think i just made the most annoying irc bot ever...
07:24 <@isaacs> epic troll
07:24 <@isaacs> wanna see?
07:24  * Nexxy prepares b& hammer
07:25 <@isaacs> Nexxy: you'll see... it'll annoy me WAY Before anyone else
07:25 <@isaacs> it's this can_i_aks_u_a_q thing
07:25 < can_i_aks_u_a_q> but just listening that not actually calling anything when i put app.post is?
07:25 <@Nexxy> oh
07:26 <@Nexxy> my. god.
07:26 <@isaacs> can_i_aks_u_a_q: i'm not sure what you're asking, exactly.  can you elaborate?
07:26 < can_i_aks_u_a_q> only when the connection ends after each line sent, or stream, would end go off In a telnet or SSH?
07:26 <@maxogden> can_i_aks_u_a_q: hay wat r cmd to set http header
07:26 < can_i_aks_u_a_q> fs.watch is giving ENOSPC - else is this a no space in memory problem or something?
07:26 <@maxogden> can_i_aks_u_a_q: try nodejs.org for nodejs hels
07:26 < can_i_aks_u_a_q> what is inadequate about version numbers for your purposes?
07:26 <@maxogden> helps
07:26 <@isaacs> i thikn i might have it join #libuv just to make bnoordhuis's head explode.
07:26 <@maxogden> haha
07:27 <@maxogden> can_i_aks_u_a_q: semver is overrated
07:27 <@isaacs> can_i_aks_u_a_q: maybe you should try the mailing list
07:27 < can_i_aks_u_a_q> this a small snippet that does into http.request? Anybody got maybe use createReadStream and pipe it I am trying to read I guess I have to a file and post it to a server over http?
07:27 < can_i_aks_u_a_q> So has anyone been following the mailing list?
07:27 <@maxogden> hahaha
07:27 <@Nexxy> can_i_aks_u_a_q, has anyone been far even as decided to use even go want to do look more like?
07:27 < can_i_aks_u_a_q> util.inspect() oh wait, console.log(util.inspect()) or just?
07:27 <@maxogden> can_i_aks_u_a_q: that is deprecated
07:27 < can_i_aks_u_a_q> the same node_modules would all make use of disparate modules (self-contained apps), which node.js application if they had hi guys! does anyone know how one would structure a?
07:27 <@isaacs> oh, i need to have it respond to the person replying to it.
07:28 <@isaacs> can_i_aks_u_a_q: mailing list
07:28 < can_i_aks_u_a_q> isaacs: modules hey guys - anyone mind that require() checks when loading pointing me to the docs on the paths and order?
07:28 <@Nexxy> I once had a bot very much like this one
07:28 <@Nexxy> we called it eggdrawp
07:28 <@isaacs> almost might think it's a logger P)
07:28 <@maxogden> can_i_aks_u_a_q: what node version are you running
07:28 < can_i_aks_u_a_q> maxogden: wtf kind of box are you running?
07:28 <@maxogden> can_i_aks_u_a_q: pentium2
07:28 <@Nexxy> ahaha
07:28 < can_i_aks_u_a_q> maxogden: true about killing the execution what about console.logs? i want to behave as a good unix citizen. should i write to 2 seperate files instead of console.log? error file and non-error file?
07:28 <@maxogden> hahahah
07:28 <@maxogden> can_i_aks_u_a_q: require('async') noob
07:28 < can_i_aks_u_a_q> maxogden: can I get v8 version from node.js commandline?
07:29 <@maxogden> can_i_aks_u_a_q: yea check your CLFAGS
07:29 < can_i_aks_u_a_q> maxogden: finished when i have the stdin and see when it is stream in node and feed i have to collect input it from another program, will multiple 'data' events, so that the 'data' event always be message, or may messages produce called only once with a buffer which contains the whole?
07:29 <@isaacs> can_i_aks_u_a_q: node -pe process.versions
07:29 < can_i_aks_u_a_q> isaacs: another (8080) port (9000) and Node.js on devaholic, the apache on one?
07:29 <@maxogden> can_i_aks_u_a_q: dont concat buffers prematurely for heap maximization
07:29 < can_i_aks_u_a_q> maxogden: do you also control the php server?
07:29 <@maxogden> can_i_aks_u_a_q: use nginx
07:29 < can_i_aks_u_a_q> maxogden: I'm not understanding require('socket-io').listen(app); Does it need to listen to port 80 and on the same host that the HTTP server is listening on? I thought that websockets don't go through the http protocol and on a single port how would the socket use only be one process listening the same port as the http server when there can?
07:29 <@maxogden> can_i_aks_u_a_q: it leverages the request and response events
07:29 < can_i_aks_u_a_q> maxogden: up from dnode through upnode that "local" event to bubble way to some how get on purpose, is there a a diode server. Is this in a similar fashion as to emit a "local" event an upnode server doesn't appear?
07:30 <@isaacs> it's seeded with all the questions asked in this channel from the last month or so
07:30 <@maxogden> i wish it knew what topic it was asking about
07:30 <@isaacs> and a markov(5) chain
07:30 <@maxogden> so that it could ask multiple followup questions
07:30 <@isaacs> maxogden: oh, that's nice.
07:30 <@isaacs> maxogden: when it joins, it should get the topic
07:30 <@isaacs> and ask a relevant question :)
07:30 <@maxogden> haha
07:30 <@isaacs> or anyu time the topic changes.
07:30 <@maxogden> then it would be megatroll5000
07:30 <@Nexxy> it should also leave immediately after asking n questions
07:30 <@maxogden> lol
07:30 <@Nexxy> and randomly reappear
07:30 <@isaacs> Nexxy: hahahah
07:30 <@Nexxy> with an entirely new set 
07:30 <@isaacs> Nexxy: or maybe the EXACT SAME ONES AGAIN
07:31 <@maxogden> whoa, a cat ive never seen before just walked through a small hole in my wall
07:31 < tasslehoff> isaacs: did you see my Q about fstream+node-tar being slow for me yesterday? did some benchmarking and found that it took 4,5 minutes to serve a 64MB file with the oneliner from yesterday. If I first use fstream to create a tarfile and then serve that file, it takes 1m10s.
07:31 <@Nexxy> lmfao
07:31 <@maxogden> ITS LIKE CHRISTMAS
07:31 <@Nexxy> maxogden, better get mappin'
07:31 <@isaacs> tasslehoff: well, that's not too surprising.
07:31 <@maxogden> apparently there is a new cat owner crashing at my house and the cats name is birthday
07:31 < tasslehoff> isaacs: educate me? :)
07:31 <@isaacs> tasslehoff: fstream does a lot of stuff to create that tarball.  you should definitely be caching it
07:31 <@isaacs> tasslehoff: or pre-generating
07:32 <@isaacs> it's the difference betwen `cat file > otherfile` and `tar c . > file`
07:32 <@isaacs> tasslehoff: fstream is walking the directory tree, stat'ing everything, readlink'ing every link, caching all the inodes, getting all the time values, etc.
07:32 < tasslehoff> isaacs: the 1m 10s is "creating a tar with fstream, and then serving it", not "serving a premade tar"
07:33 <@isaacs> tasslehoff: oic.
07:33 <@isaacs> well, that sounds odd
07:33 <@isaacs> could be that backpressure is getting unnecessarily confusing
07:33  * tasslehoff goes to find a pastebin
07:33 <@isaacs> yes, plz.
07:33 <@isaacs> tasslehoff: you can also post an issue on either fstream or node-tar
07:33 <@isaacs> can_i_aks_u_a_q: you ever use node-tar or fstream?
07:33 < can_i_aks_u_a_q> isaacs: nssocket looks nice and simple You were saying you use it in production? How is it's stability and 'reconnect'ability?
07:34 <@maxogden> i just read that an didnt realize it was the bot
07:34 <@maxogden> and almost repsonded
07:35 <@maxogden> can_i_aks_u_a_q: r u on gitorius
07:35 < can_i_aks_u_a_q> maxogden: of 0.8.6 guys.. is it possible to build a statically linked binary?
07:35 <@maxogden> can_i_aks_u_a_q: ya use gypwaffle
07:35 < can_i_aks_u_a_q> maxogden: is there a way to code avoid restarting the server everytime I make a change to?
07:35 <@maxogden> can_i_aks_u_a_q: yea use a continuous interpolation server
07:35 < can_i_aks_u_a_q> maxogden: You can always run redis in the VM, and connect to it with node from Windows?
07:36 <@maxogden> can_i_aks_u_a_q: yea npm install mranney
07:36 < can_i_aks_u_a_q> maxogden: an .emit(...) and a .once(...) what's the best way to have a one-to-one correlation between?
07:36 <@maxogden> can_i_aks_u_a_q: you gotta flow control your errbacks
07:36 < can_i_aks_u_a_q> maxogden: about that here is it appropriate to ask I am having some difficulties with PUT request using express?
07:36 <@maxogden> can_i_aks_u_a_q: try #tjholowaychuckmodulesupport
07:36 < can_i_aks_u_a_q> maxogden: implements it And is that how Node.js?
07:37 -!- maxogden changed the topic of #Node.js to: implements it And is that how Node.js?
07:37 <@Nexxy> oh dear gods
07:37 <@Nexxy> I almost choked on my ramen equity with that one
07:38 < tasslehoff> isaacs: http://pastebin.com/pGBSaLCh
07:44 <@isaacs> ok one sec...
07:44 <@isaacs> if this works, it'll be genius...
07:44 < can_i_aks_u_a_q> Hi.  Can I ask a question?
07:44 < can_i_aks_u_a_q> so whats the tool for node.js?
07:44 <@isaacs> ahhhh, too fast.
07:44 <@Nexxy> lol
07:46 < can_i_aks_u_a_q> Hi.
07:46 < can_i_aks_u_a_q> Can I ask a question in here about Node.js?
07:46 < can_i_aks_u_a_q> How do i update my node.js?
07:46 <@Nexxy> can_i_aks_u_a_q, very carefully
07:46 < can_i_aks_u_a_q> Nexxy: of 'standard' funcs to add all these types Isn't there a prototype-adding proj?
07:46 <@isaacs> omg, this is so entertaining
07:47 <@isaacs> oops, it crashed
07:49 < can_i_aks_u_a_q> Hi.
07:49 < can_i_aks_u_a_q> Is this the right place to ask about Node.js?
07:49 < can_i_aks_u_a_q> so whats the tool for node.js?
07:50 <@Nexxy> can_i_aks_u_a_q, primarily we use spatulas
07:50 < can_i_aks_u_a_q> Nexxy: make a social network hey man u think if nodejs have sufficient power to?
07:50 <@isaacs> the questions are so believable, too
07:50 <@Nexxy> indeed
07:50 <@maxogden> can_i_aks_u_a_q: have you met rymate1234?
07:50 < can_i_aks_u_a_q> maxogden: the REST API's search Streaming API statuses/filter or polling a particular hashtag with ntwitter? what do you reckon's the most reliable way to track?
07:50 <@Nexxy> isaacs, you should add a delay to the response
07:50 < rymate1234> wat
07:50 <@maxogden> yea
07:50 <@isaacs> Nexxy: yeah
07:51 <@isaacs> it's too robotic
07:51 <@maxogden> rymate1234: oh you arent a bot?
07:51 <@Nexxy> like the # of chars * .3 secs or something
07:51 < rymate1234> Nope
07:51 <@maxogden> dangit!
07:51 < rymate1234> I just lurk
07:51 < can_i_aks_u_a_q> Hi.
07:51 < can_i_aks_u_a_q> Is this the right place to ask about Node.js?
07:51 < rymate1234> well
07:51 <@isaacs> rymate1234: you have a bot-like name
07:51 < can_i_aks_u_a_q> guys, what's the significance of node.js?
07:51 < can_i_aks_u_a_q> Hi.
07:51 < rymate1234> It is the node.js channel
07:51 <@Nexxy> rymate1234, reboot
07:51 < can_i_aks_u_a_q> Is this the right place to ask about Node.js?
07:51 <@isaacs> whoops, some kind of loop
07:51 < rymate1234> Nexxy, nothx
07:51 < rymate1234> Takes ages for my pc to reboot
07:53 < rymate1234> can_i_aks_u_a_q was either very stupid or a bot
07:53 <@Nexxy> rymate1234, please be respectful
07:54 <@Nexxy> #node.js is a safe place for people of all skill levels to seek assistance with their endeavors.
07:54 < rymate1234> ah
08:02 < bawwwller> we looked like giants
08:02 <@isaacs> Nexxy: NOW who's trollin? ;P
08:02 <@isaacs> rymate1234: can_i_aks_u_a_q is me trolling myself
08:02 <@isaacs> for fun
08:02 <@Nexxy> isaacs, who... me?!
08:02 < rymate1234> ummm
08:02 < rymate1234> ok
08:03 <@isaacs> here it comes?
08:04 <@Nexxy> can_i_aks_u_a_q, No.
08:04 < can_i_aks_u_a_q> Nexxy: luck with what have you guys had coffeescript/js from a node.js/express webapp testing up in my web-side I'm looking to get some?
08:04 <@isaacs> hm... didn't do the hi
08:04 <@isaacs> did in the other room, though
08:04  * Nexxy broke it
08:04 <@Nexxy> preemptive strike
08:04 <@isaacs> ohh, bug
08:04 <@isaacs> i see
08:04 <@Nexxy> webapp testing up in my web-side
08:05 < can_i_aks_u_a_q> Hi.
08:05 < can_i_aks_u_a_q> can I ask a question in here about Node.js?
08:05 < can_i_aks_u_a_q> is there a way to build GNU readline-alike interfaces in node.js?
08:05 <@isaacs> can_i_aks_u_a_q: use require('readline')
08:05 < can_i_aks_u_a_q> isaacs: anyone update to mountain lion and have issues with node?
08:05 <@isaacs> Nexxy: more human-like?
08:05 <@isaacs> can_i_aks_u_a_q: not really.  seems to work fine here.
08:05 <@Nexxy> lol yeah
08:06 < can_i_aks_u_a_q> isaacs: anyone's done udp hole punch with node?
08:06 <@Nexxy> ahahahaha
08:06 <@isaacs> can_i_aks_u_a_q: ask nexxy
08:06 < can_i_aks_u_a_q> isaacs: it in JS sounds interesting. are you doing?
08:06 <@isaacs> oh, wait i didn't do that bit
08:06 <@isaacs> on esec
08:06 <@isaacs> then bedtime :0
08:06 <@Nexxy> 2 steps ahead of you
08:06 <@Nexxy> nanight
08:07 <@isaacs> g'nite
08:08 < can_i_aks_u_a_q> Hi.
08:08 < can_i_aks_u_a_q> can I ask a question in here about Node.js?
08:08 <@isaacs> can_i_aks_u_a_q: hola
08:08 <@isaacs> can_i_aks_u_a_q: yes
08:08 < can_i_aks_u_a_q> But wait, no...  That doesn't wrok, does it?
08:08 < can_i_aks_u_a_q> isaacs: What framework you recommend me to build an REST API in node.js?
08:08 <@isaacs> can_i_aks_u_a_q: ask maxogden about that
08:08 < can_i_aks_u_a_q> Hm.  Ok...
08:08 < can_i_aks_u_a_q> isaacs: guys, what's the significance of node.js?
08:08 <@isaacs> hmm.... oh, didn't work.
08:08 <@isaacs> ok, i need sleep more than irc trollin
08:46 < Guest_1448> can I use this http://nodejs.org/api/readline.html for reading a file (stream)?
08:47 < Guest_1448> i can't find ANY examples of file or any other stream other than process.stdin/out
08:47 < Guest_1448> :/
08:49 < Guest_1448> hellllllp
08:51 < Spion_> fs.createReadStream
08:52 < Spion_> http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options
08:54 < Guest_1448> so I can pass that stream object from fs.createReadstream to readline module?
08:54 < Guest_1448> Spion_ ^
08:55 < Spion_> I suppose you can. Haven't used the readline module
08:56 < Guest_1448> I'm confused about the output option too.. I want to get the output back in code not send it to some other stream
08:57 < Guest_1448> I guess I could create a dummy stream and setup callbacks there but that just seems weird
09:07  * Guest_1448 is going to use node-bufferreader
09:08 < ombr> hello
09:08 < lzjever> i need help .  i posted this in #express channel .  but no one answered me .
09:08 < lzjever> i have a url mapping problem , how can i map a url like "http://127.0.0.1:8080/playl?url=rtsp://127.0.0.1/1/16/20110915/268445903/268445903.ts&focus=112"  ?
09:09 < ombr> I'm looking for a oAuth2 server written in node that I can configure in depth....
09:09 < Guest_1448> lzjever: what do you mean "map"?
09:09 < Guest_1448> map what and where
09:10 < lzjever> like this : i wrote "app.all("/play:pp" , require("./routes/test").page);" , expect i can get the full params in the router , but it didnt work , how can i do this properly ?
09:11 < stagas> lzjever: try '/play/:pp'
09:12 < lzjever> tried, didnt work neither
09:12 < Guest_1448> I don't think you can do :xx like that
09:12 < Guest_1448> use a regex
09:12 < Guest_1448> .. /play/:pp should work if you call it like /play/l?
09:13 < lzjever> i want to get the full 'get param' ..  by my example , it should be "url=rtsp://127.0.0.1/1/16/20110915/268445903/268445903.ts&focus=112"  i want get the full string at the router .
09:13 < Guest_1448> req.query
09:14 < lzjever> yep , /play/:pp worked fine with /play/l 
09:14 < lzjever> i can get the "1"
09:14 < stagas> lzjever: '/play/*'
09:15 < lzjever> 3q , stagas, im going to try this . report latter.
09:18 < Guest_1448> lzjever: http://expressjs.com/api.html#req.query
09:19 < ombr> So I found 2 implementations of oauth server https://github.com/jaredhanson/oauth2orize.git and https://github.com/AF83/oauth2_server_node.git
09:19 < ombr> do you know any others ?
09:24 < lzjever> thank you 1448 , but i wrote " app.all("/play/*" , require("./routes/test").page); "  . and visit it by   "http://127.0.0.1:8080/play/url=rtsp://61.135.88.136/1/16/20110915/268445903/268445903.ts=url&focus=112=focus"   it dident call the router function .
09:26 < Guest_1448> use app.all('/play/:pp' not *
09:26 < Guest_1448> I don't think * has any special role in pure strings 
09:27 < Guest_1448> in the router function, you can get the 1,2,3 etc by using req.param('pp')
09:27 < lzjever> Cannot GET /play/url=rtsp://61.135.88.136/1/16/20110915/268445903/268445903.ts&amp;focus=112
09:28 < Guest_1448> oh you moved the query string to the url
09:28 < lzjever> y, the first 'get' param is a url .
09:29 < Guest_1448> move it back to query string
09:31 < Guest_1448> if you use app.all('/play/:pp'), you can use req.param('pp') to get the 1,2,3 etc and req.query.url, req.query.focus etc to get the parameters
09:31 < Guest_1448> with urls like http://127.0.0.1:8080/play/1?url=rtsp://61.135.88.136/1/16/20110915/268445903/268445903.ts=url&focus=112
09:31 < Guest_1448> to make the 1,2,3 etc optional, use app.all('/play/:pp?'
09:33 < lzjever> the 'play' page written with some old client-side js codes , it demands that the url keep the old way . so i cant change the url
09:33 < Guest_1448> but you were using query strings initially?
09:34 < Guest_1448> the first url you posted was http://127.0.0.1:8080/playl?url=rtsp://127.0.0.1/1/16/20110915/268445903/268445903.ts&focus=112%22
09:38 < lzjever> thank you  , 1448 ,  problem solved! 
09:40 < lzjever> i use "app.all('/play/*' , require("./routes/test").page);" to map the url , and in the router i use "req.params[0]" to get the params string ,then splite them by hands . . not a smart way , but it worked.
09:42 < Guest_1448> cool
09:59 < cas> Hi, I got some problems with getting POST data with express. The request.body is 'undefined'. Has this something to do with express 3.x?
10:00 < chakrit> cas: just to be sure, you have app.use(express.bodyParser()) right?
10:05 < cas> chakrit: ok, that was stupid of me.
10:06 < cas> that was it thanks
10:20 < Industrial> substack: How do I create an alias with mountie? I want www.mydomain.com to bounce to mydomain.com really :)
10:20 < MHK_> Hello!
10:21 < substack> Industrial: you can use .mount() to create custom handlers
10:21 < substack> https://github.com/substack/mountie#servermountopts-cb
10:22 < MHK_> Can anybody answer this question regarding node? http://stackoverflow.com/questions/11966292/being-both-event-driven-servers-why-node-js-needs-async-code-where-nginx-doesn
10:23 < Industrial> substack: nice, thanks!
10:26 < jetienne> MHK_: hehe good one
10:38 < chakrit> node.js is lots of PR ... lmfao
10:39 < substack> because ryah is such a slick marketer!
10:40 < MHK_> LOL. I'm definitely not accepting that answer :P
10:42 < substack> I greatly prefer registering callbacks to using complicated coroutine/green thread/eventlet abstractions that obscure when the system is going out and doing work
10:42 < substack> callbacks are so much easier and more consistent than other ways of managing parallelism
10:43 < substack> especially when you have multiple parallel tasks that are all sufficiently different and need to pass information around among themselves
10:43 < substack> that is so crazy hard to do with channels or stm or mutexes or joins
10:43 < trodrigues> hey guys. i have a development setup which is using connect static to serve JS files, and IE9 is taking ages to load some of the bigger files (like jquery), something like 65 seconds
10:44 < trodrigues> anyone seen anything like this before? request seems ok and it only happens with IE
10:44 < substack> people look at linear chains of statements and proclaim "aha callbacks must obviously be bad" but completely miss what it buys you in terms of the simple and regular mental model
10:45 < chakrit> i felt sorry for the guy
10:46 < MHK_> Callbacks are definitely not bad, it just doesn't go with our practiced coding style at first 
10:46 < trodrigues> actually, scratch that. it's not IE's fault. it's happening with any browser inside that VM where i'm running IE
10:47 < trodrigues> it's like there's some crazyness going on in the connection between the VM and the host
10:47 < chakrit> it's like when people see lisp and think that lots of parenthesises are all that it has got.
10:47 < substack> MHK_: I reject your classification of "our style"
10:49 < chakrit> trodrigues: what vm/host/guest?
10:49 < chakrit> maybe you need to supply the host argument when connect-ing?
10:50 < MHK_> But callbacks are aadditional hassels for sure, otherwise wo won't have SEQ, async, slide-flow-control, step, flow-js, funk, step, node-continuables, futures, groupie etc etc
10:50 < deoxxa> hey rvagg
10:50 < deoxxa> alive?
10:51 < RLa> trodrigues, what is running in vm?
10:51 < RLa> can you test for network bandwidth?
10:51 < RLa> maybe it's connecting through some slow proxy
11:04 < trodrigues> no, it's a NAT connection on VMware fusion, straight to the host
11:04 < trodrigues> so host is osx 10.8 mountain lion, using flatiron/connect static to serve the files
11:05 < trodrigues> and guest is windows 7 running on vmware fusion with NAT networking
11:05 < trodrigues> i'm fiddling around with the transfer-encoding header and it seems to have some influence but my knowledge of http headers is not that deep
11:26 < trodrigues> ok, ignore everything. node.js is behind an nginx and it's nginx fucking things up
11:44 < lvx3> Hi, I'm maybe missing something, so could someone point me in the right direction - I'm trying to start an https server up but getting the following error: Error: error:0906406D:PEM routines:PEM_def_callback:problems getting password
11:45 < lvx3> my SSL certificate does indeed have a password on it, and I'm not at liberty to change this
11:45 < rvagg> deoxxa: I'm here, recovering from a dead SSD... back to a slow HDD, lost >1day's work
11:45 < deoxxa> :<
11:45 < deoxxa> may i pm you, good sir?
11:45 < rvagg> surely
11:50 < lvx3> ah got it, needed to decrypt the ssl private key - didn't realise you could do that! (new tricked == learned:))
12:01 < bnoordhuis> lvx3: you can also pass a passphrase in the options object
12:18 < TRUPPP> are there any active channels for javascript on freenode?
12:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:52 < jovi> hi
12:52 < jovi> i have a question regarding the node pipe
12:53 < jovi> is it possible to write an node js app for filesharing over the browser
12:53 < jovi> ie. A opens up his browser and B opens the same URL. A  uploads a file and it gets piped to B's browser
12:54 < jovi> can something like that be made with node/express
12:54 < jovi> ?
12:56 < jovi> i thought if it can be made with simple chat, why wouldn
12:56 < jovi> would't it work with files
12:56 < jrajav> I don't know about express, but that would certainly be possible with websockets
12:57 < jovi> i would use express to randomly generate an url so that the two browsers connect to the same stream using socket.io
12:58 < jovi> the only thing that i cant quite figure out is how to manage the upload field/ the download itself
12:59 < klawd_prime> hi guys! could someone help me get started with mocha?
13:01 < jrajav> What are you having trouble with that isn't explained on the website?
13:01 < klawd_prime> i don't know about the resources
13:01 < klawd_prime> the tutorial wants me to include mocha.js and .css
13:02 < klawd_prime> should i just copy them over from my mocha install dir to the project?
13:02 < klawd_prime> can i do this directly via mocha?
13:04 < jrajav> Yes, just copy them. Mocha.js and .css are all you need
13:04 < chesterjg> in npm, when I run npm install -g, it runs my "scripts" (in package.json) from /usr/local/lib rather than the original directory, how can I fix this?
13:04 < chesterjg> it's a bash script
13:04 < jrajav> klawd_prime: http://visionmedia.github.com/mocha/#browser-support
13:05 < klawd_prime> To setup Mocha for browser use all you have to do is include the script
13:05 < klawd_prime> not really, eh? :)
13:07 < jrajav> ?
13:07 < jrajav> What do you mean not really
13:07 < klawd_prime> yeah, well, i would have to copy it over.
13:07 < jrajav> ...
13:07 < jrajav> That's kind of implied in "include"
13:08 < klawd_prime> explicit > implicit :P
13:08 < jrajav> What would you expect to do with any other js lib you wanted to serve as part of a website?
13:08 < jrajav> Sometimes to be concise a baseline of knowledge is assumed in the audience
13:08 < klawd_prime> jrajav: i would think it possible to serve this whole thing with node
13:09 < jrajav> In this respect that's no different from serving it with tomcat or something - To serve a file, the file has to be there
13:09 < rayfranco> Hi there, I've just installed grunt module globally "npm install -g grunt" but if do a "npm ls -g installed" it seems not installed. I only can see it without grepping to installed. Do I have missed a step ? Newbs to Node though. Thanks for help !
13:10 < jrajav> If you mean requiring mocha in a node server and then using it directly, that's fine too, but you'd have to find out how to produce the output yourself
13:10 < klawd_prime> jrajav: i see.
13:10 < deoxxa> but it should magically know what you want, jrajav!
13:10 < klawd_prime> another question: i can test serverside code with mocha, yes?
13:11 < rayfranco> And if try to use "grunt init", it would say grunt: command not found. Even with rebooting the terminal.
13:11 < klawd_prime> .. even when running it in the browser?
13:12 < jrajav> klawd_prime: Check out HTMLCov
13:12 < rayfranco> Here is the outpout when installing grunt http://snippi.com/s/q5zpw5o
13:12 < jrajav> klawd_prime: It apparently lets you generate an HTML report
13:12 < jrajav> klawd_prime: You could query the server to run some tests, which would run them and then serve the report as the response
13:13 < klawd_prime> i see. now i understand the confusion.
13:13 < klawd_prime> is there no such thing premade?
13:13 < jrajav> There probably is. I don't know about it if so, I've never had such a need
13:14 < klawd_prime> how do you run your tests?
13:14 < jrajav> To the googlemobile!
13:14 < aesptux> Hi guys. Do you have any book recommendation for NodeJS? I want to start from scratch
13:14 < jrajav> I don't think I've seen the need to test server-side code from a client
13:14 < jrajav> With Node.js
13:15 < klawd_prime> how do you run your tests?
13:18 < klawd_prime> jrajav: i would prefer to run my tests via my IDE but there is no such binding and i doubt there will be one. so the next best thing would be from the browser. since there is a JSON Stream reporter, i don't find it that far fetched for a small lib to exist that does just that
13:19 < jrajav> You can make requests to a server running locally
13:20 < jrajav> I've never bothered with an IDE for node.js work. I tend to avoid them in general if I'm not working with Java
13:20 < jrajav> And like I said; such a thing might indeed exist but I don't know about it
13:20 < jrajav> If not, write one yourself
13:20 < jrajav> There *certainly* are boatloads of JSON -> HTML templaters
13:20 < Taneem> maybe zombiejs might help
13:21 < rayfranco> anybody to help for npm install fail here ? thanks.
13:21 < Taneem> write up test scripts that load up instances of zombie and run through tests
13:22 < klawd_prime> https://github.com/makeusabrew/mochet.io
13:22 < klawd_prime> view real time Mocha test results in your web browser
13:22 < klawd_prime> sounds good.
13:23 < jrajav> klawd_prime: Looks like it's just still just showing you the results of server-side tests
13:23 < jrajav> That's different from actually constructing the tests
13:24 < jrajav> I may be confused about what you actually want
13:24 < klawd_prime> i want to run the tests via F5 in my browser instead of with $ mocha on my cli
13:24 < klawd_prime> and get pretty results
13:24 < substack> whoa a thing happened http://techcrunch.com/2012/08/15/hp-spins-off-webos-into-a-brand-new-company-called-gram-mission-unknown/
13:24 < jrajav> Then yeah mochet looks perfect, if it works
13:25 < jrajav> Gram is a new company leveraging the core strengths of webOS, Enyo and our Cloud offerings, as well as the firepower of our partners to create a technology that will unleash the freedom of the web.
13:25 < jrajav> Fuck you MBAs
13:25 < jrajav> That doesn't MEAN ANYTHING
13:26 < substack> maybe that means they'll finally upgrade to node 0.4
13:26 < drudge> haha
13:27 < jrajav> I like the "leaked" email
13:27 < jrajav> Added some comic relief to the article
13:29 < klawd_prime> it's still started via server
13:29 < klawd_prime> bleh
13:34 < thejav> writing my first node app and have a question. say I have an array of data that I need to save, and I'm using a callback with the DB's save function. two of the items in the array collide; they have the same unique key, so while my code tests for existence then creates or updates as needed, because it's asynchronous they both try creating it, and both fail. what's the nodeJS way of handling this situation? check for existence again wh
13:34 < thejav> creation fails?
13:45 < chesterjg> in npm, when I run npm install -g, it runs my "scripts" (in package.json) from /usr/local/lib rather than the original directory, how can I fix this? (it's a bash script)
13:52 < rustyshackleford> Hey guys, I have an installation question
13:53 < rustyshackleford> Im getting a syntax error when I try to run './configure'
13:53 < rustyshackleford>     o['default_configuration'] = 'Debug' if options.debug else 'Release'
13:53 < rustyshackleford> Its complaining about the 'if'
13:53 < rustyshackleford> I downloaded this right from the nodejs.org site
13:54 < rustyshackleford> Im on python 2.7 and have root
13:54 < rustyshackleford> Thoughts?
13:55 < jadams> with require.js or dojo's AMD loader, there's a require('text!templates/foo.html') that will return the text of a file as a module's output.  This works in-browser or elsewhere.  Is there an equivalent in node/commonjs?  I've looked but I haven't found anything yet
13:56 < jadams> I like to keep my templates in their own html files, so that I can tae advantage of vim's filetypes to make developing the templates swell
13:56 < jadams> so far, I can use require('fs') to read them locally, but  no dice in the browser
13:57 < jadams> substack: I've followed you on le twitter for forever but I think this is my first time 'seeing you' out and about in public :)
14:05 < mscdex> the elusive substack!
14:06 < _smf_> rustyshackleford: if you run 'python -V' - what does it show?
14:06 < _smf_> I'm betting that you have several versions of python and 'python' is not v2.7 but 2.4.
14:07 < _smf_> As I had this problem myself.
14:07 < rustyshackleford> I do have multiple but i exported python 2.7
14:15 < _smf_> rustyshackleford: you mean you've done something like: PYTHON=python27 configure
14:26 < mscdex> rustyshackleford: what i usually do (mostly on RHEL/CentOS 5.x systems) is just make a symlink in ~/bin and then compile node like `PATH=$HOME/bin:$PATH ./configure && make && make install
14:59 -!- isaacs changed the topic of #Node.js to: Hi.  Can I aks you a queshion?  Do you ever get JavaScripts on your server?  More sync than you prefer?  IO pressure?     Hi.
15:09 < mAritz> yawnt: https://github.com/bdryanovski/coffeescript-notify/pull/2 :D
15:11 < dominic[zzzz]> does anyone know a really simple client side templating lib that works with browserify?
15:17 < yawnt> mAritz: lookin
15:17 < yawnt> AHAHHAAHAH
15:17 < mAritz> yawnt: xD
15:18 < mAritz> i now have that running on my vbox (debian) and everytime i save a non-compiling .coffee file there my windows gets a growl notification :)
15:19 < mAritz> same thing on my vps and desktop.
15:21 < mAritz> dominic[zzzz]: how about https://github.com/substack/node-jadeify/ ? :)
15:21 < mmalecki> dominic[zzzz]: plates?
15:22 < dominic[zzzz]> yeah. plates possibly, I'm trying mustache right now
15:22 < moisan> hi, I'm trying to setup something like client-side javascript <-> nodejs <-> mongodb. I'm wondering how can I connect my clien-side javascript to nodejs to get data from mongodb.
15:22 < moisan> or is there a simpler way to do it?
15:24 < Domenic> dominic[zzzz]: simpler jade + browserify solution at https://github.com/domenic/simple-jadeify/
15:27 < klawd_prime> i read "synchronous code" and "asynchronuos code" all over the place
15:27 < klawd_prime> what's it mean?
15:33 < yawnt> mAritz: sweet :|
15:33 < yawnt> still >coffeescript
15:34 < mAritz> yawnt: still have to use cs at my job :P
15:35 < mscdex> nothing like having some old school Bitmap Brothers music to code to :-D
15:36 < mAritz> klawd_prime: given: command1(); command2();  now synchronous would mean command 2 does not get executed untill command1 has finished. asynchronous means command 1 does some stuff, returns controll to command2 but may still do stuff afterwards.
15:36 < mAritz> (fuck yeah, i'm horrible at explaining)
15:43 < zipp> lmao mAritz
15:43 < zipp> That makes sense
15:44 < mAritz> yeah, but it might not clear up the confusion for a node.js/async beginner :D
16:00 < Killswitch> Just saw this on the front page of Hacker News, incase anyone here feels it could be helpful > http://java.dzone.com/articles/40-resources-nodejs-developer
16:01 < dominictarr> okay, I found this new templating engine called "nothing"
16:01 < dominictarr> it's pretty simple, the only weird thing is you have to surround each item with '+value+' but otherwise, 
16:02 < dominictarr> it's pretty easy.
16:02 < pandemic> link?
16:02 < pandemic> wouldn't mind checking it out, see if I would prefer it over mustache
16:02 < mmalecki> dominictarr: lol
16:03 < pandemic> ah, i'm tarded
16:03 < Taneem> lol
16:03 < pandemic> it's early in the morning, haha. I'm a bit of a zombie at the moment
16:04 < dominictarr> time for coffee
16:05 < pandemic> no shit lol
16:23 < mAritz> "this is a nothing template. hello '+value+'!"? :P
16:25 < Ramone> hey all... Anyone have any experience with json and large numbers?   Seems like it's not doable without a lib like bigint/bignum ...  but a lot of popular json apis return large ints
16:26 < indutny> hey osx people
16:26 < Benvie> ref adds support for 64bit ints to Buffer
16:26 < etcetera> do you guys use tap to click or press to click on mac os?
16:26 < indutny> who wants to test vock with me?
16:27 < Ramone> Benvie: I'd still have to rewrite the parser though I think
16:28 < drudge> using cluster, how do i get the current worker's id
16:28 < Benvie> oh json
16:28 < Benvie> well it reads strings into numbers 
16:29 < Benvie> I guess you mean not that though
16:29 < indutny> drudge: I think you can use pid
16:29 < indutny> it's quite trustable
16:29 < Ramone> well large ints will lose precision when they're the Number type
16:30 < drudge> indutny: the api confuses me because when i fork() i get the worker and can access id, but if not master how do i access this?
16:30 < Benvie> if you're pulling them from json they'll essentially be usable as strings
16:30 < indutny> drudge: em... you can send id to the worker
16:30 < Almindor> is it possible to specify stuff like CFLAGs etc. to npm install?
16:30 < indutny> but I just can't figure out why do you may need it
16:30 < Almindor> malloc is non-standard on mac os X and a module fails to build because it doesn't look in the place for includes
16:30 < Benvie> once it's in a buffer then managing 64bit ints is easy
16:31 < indutny> you can try process.env['NODE_UNIQUE_ID']
16:31 < Ramone> Benvie: they're not strings though.... {"asdf" : 1234123412341234123412341234} goes into a Number 'type'
16:31 < drudge> indutny: our jobs are tagged with the worker id when processed
16:31 < Benvie> you just don't carry it around as a number
16:31 < Benvie> you carry around the buffer
16:31 < Ramone> Benvie: talking about JSON.parse()
16:31 < Benvie> let me see here
16:32 < dominictarr> Ramone, there is a BigDecimal lib in npm
16:32 < dominictarr> on npm, rather
16:33 < technocrat> bigint
16:33 < dominictarr> ... although you are receiving json that is technically invalid.
16:33 < technocrat> used it, works well
16:33 < Ramone> dominictarr: sure but JSON.parse() doesn't use it... 
16:33 < Benvie> so I think you have deduced you will not be using JSON.parse
16:33 < Benvie> not the built in one
16:34 < dominictarr> Ramone, maybe if you use a reviver function?
16:34 < Ramone> ha yep... just wondering if anyone has come across this... the only solution I can think of is to find a js-based parser and hack bignum into it
16:34 < Ramone> reviver function?
16:35 < technocrat> no parse needed, quote nums with regex, parse json, parse numeric strings with bigint lib
16:35 < dominictarr> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse#Parameters
16:35 < dominictarr> technocrat, that is a good solution
16:36 < Ramone> not bad technocrat
16:37 < technocrat> reviver also looks interesting...
16:37 < dominictarr> json.split(/(bigIntRX)/).map(function (e, i) {return i % 2 ? JSON.stringify(e) : e }).join('')
16:37 < Ramone> don't think reviver will work... it's already too late at that point
16:37 < dominictarr> yeah, it sounds like it's parsed already
16:38 < Ramone> the RE way sounds reasonable though
16:38 < dominictarr> but the combination of the two will make for a clean solution
16:38 < dominictarr> clean enough to be it's own module on npm.
16:39 < Ramone> what would you do in the reviver after the object that gets output already has BigNums in it?
16:40 < Benvie> reviver goes strings
16:40 < Benvie> everything is forced to string
16:40 < Benvie> so you just don't lose anything to begin with 
16:40 < Ramone> ahh
16:41 < dominictarr> but then the reviver can return a big num, and that gets stuck into the object.
16:41 < Ramone> yeah I might even leave bignum out entirely and leave the reviver up to the calling lib
16:41 < indutny> so vock anyone?
16:41 < dominictarr> or you could default to the reviver
16:41 < indutny> really
16:42 < Ramone> dominictarr: yep... even better
16:42 < indutny> I need to test conferences :)
16:42 < dominictarr> default to the BigNum reviver, i mean.
16:42 < Ramone> yep
16:42 < Ramone> alright thanks guys... very helpful...
16:42 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:42 < Ramone> feel like giving me a code review after if you're not busy?
16:43 < technocrat> good code is always good to look at ;)
16:43 < Ramone> alright... I'll hammer away at it
16:44 < drudge> indutny: worker.on('listening') with worker.send and process.on works ok
16:45 < indutny> cool
16:46 < drudge> indutny: what port is vock trying to bind on?
16:47 < indutny> either port mapped one, or random one
16:47 < indutny> it'll try to portmap it automatically
16:47 < drudge> i just did vock create and it throws Error: bind EADDRINUSE
16:47 < indutny> hm...
16:47 < indutny> can you give me a stack trace?
16:48 < drudge> http://pastie.org/4494595
16:50 < indutny> cool
16:50 < indutny> problem in dependency :D
16:50 < indutny> are you on osx?
16:50 < drudge> i am
16:51 < indutny> hm...
16:51 < indutny> I can't see this problem
16:51 < indutny> are you running natman?
16:51 < indutny> that's marak's module
16:51 < drudge> i am not
16:51 < maxamillion> are there any docs anywhere that offer a firm statement on if 0.8.x is meant to be backwards compatible with 0.6.x ?
16:51 < indutny> https://github.com/TooTallNate/node-nat-pmp/blob/master/index.js#L77
16:51 < indutny> it's trying to bind 5350 port
16:51 < maxamillion> I'm clearly failing at finding it, was hoping someone might just know where to look
16:52 < drudge> indutny: netstat does show udp4       0      0  all-systems.mcas.5350  *.*
16:52 < indutny> em...
16:59 < drudge> indutny: interestingly enough, on my iMac when i try to connect i get:
16:59 < drudge> [1]    21214 abort      vock connect eaafe6dfb3e2294524112fa69c3285241dfe6ffc
17:00 < dominictarr> maxamillion: short answer: no. long answer: quite compatible. but somethings did change.
17:00 < indutny> drudge: can you run `gdb `which vock` connect ....` ?
17:01 < drudge> http://pastie.org/4494662
17:07 < ryanrolds_w> How's everyone?
17:12 < theBrettman> why do I have to have visual studio to install node.js in windows? I like aptana...
17:14 < Daman> Use question -- would node.js be good for a google maps application that has maybe 50 markers that update in real time(based off data read from a file, I guess, or maybe there's a better node.js-specific way to give it the data?)
17:14 < MARXBRONSON> yes
17:14 < MARXBRONSON> use websockets :)
17:14 < Daman> will look into that, thanks
17:15 < theBrettman> I wanna use websockets :( but I need node first
17:15 < MARXBRONSON> Daman: i like http://socket.io/
17:15 < Daman> neat, thanks for the link
17:15 < MARXBRONSON> it is a nice wrapper around websockets and provides some fallback protocols
17:17 < indutny> drudge: gdb --args node `which vock` connect ...
17:17 < theBrettman> oh, I'm not limited to visual studio. why does the site say I "need" visual studio to do node in windows?
17:18 < ryanrolds_w> theBrettman: Where does it say that?
17:19 < theBrettman> https://github.com/joyent/node/wiki/Installation
17:19 < theBrettman> it says for building it on windows
17:20 < theBrettman> nvm
17:20 < theBrettman> node comes with npm now?
17:20 < ryanrolds_w> theBrettman: Yeah, that's for building, not the MSI installer.
17:20 < ryanrolds_w> theBrettman: The other way around, npm comes with Node.js
17:20 < theBrettman> yeah, why would anyone build?
17:21 < ryanrolds_w> theBrettman: They want to contribute to Node.js core.
17:21 < Leeol2> Question.. for Nodejs, is there a module level 'global' var? That is to say, if you want a function to expose a bunch of vars to a module, how would you do it without using global? `global.a = 1; console.log(a)` works, but is there a `module.a = 1; console.log(a)` version?
17:21 < theBrettman> oh, ok
17:22 < Leeol2> (Ie, i am trying to avoid polluting the global namespace)
17:22 < ryanrolds_w> Leeol2: Put the vars in another module and require it in.
17:22 < ryanrolds_w> *module/file
17:23 < Leeol2> ryanrolds_w: That doesn't do what i am asking though :s
17:23 < Leeol2> ryanrolds_w: Is what i am asking impossible? Is global pollution the only way?
17:23 < AAA_awright> Leeol2: If you want to create a global variable within a file, just use "a=1" with no leading var. But that's generally considered a Bad Idea.
17:24 < ryanrolds_w> I'm pretty sure files have their own scope. You shouldn't have to worry about global polution across your app.
17:24 < Leeol2> AAA_awright: But this needs to happen from *outside* the file.. sort of confusing, let me write an example up. (I should have wrote a mockup from the start, my apologies)
17:25 < AAA_awright> Leeol2: There's almost certainly no reason you should need to do that... If you need to pass a value to a module, you call a function
17:25 < Leeol2> AAA_awright: Think Mocha. 
17:25 < AAA_awright> I'm not familiar with that
17:25 < Leeol2> AAA_awright: Mocha uses global vars, i'd prefer to do something similar, but i would prefer not to use global
17:25 < Leeol2> AAA_awright: http://visionmedia.github.com/mocha/ 
17:26 < Leeol2> Mocha exports it's BDD functions (describe, it, etc) to global.describe, global.it, etc. 
17:26 < Leeol2> So that testing files don't have to write `mocha.describe, mocha.it`
17:26 < Leeol2> I am doing something similar, but i would prefer to not use global
17:27 < Leeol2> Note that this involves testing code specifically, not production
17:27 < Leeol2> So global is perfectly acceptable, i would just prefer to avoid it
17:29 < Leeol2> AAA_awright, ryanrolds_w: https://gist.github.com/9bf5943308e6332d627f
17:30 < AAA_awright> Leeol2: It appears to be just extending the execution environment, when you run mocha instead of node... What are you trying to accomplish?
17:30 < Leeol2> My reasons for such code is almost the same as Mocha, so please spare the obvious "just add `foo = file1.foo` to file2"
17:30 < AAA_awright> I'm not sure I would do it that way. I use vows, where you do go var vows=require('vows');
17:31 < Almindor> how do you specify a local package in package.json?
17:31 < Leeol2> AAA_awright: I'm confused on your question. What i am trying to accomplish is a way to make the example work :s
17:32 < Leeol2> AAA_awright: For example, the example would work if i wrote `file1.add_vars(global)` **but i don't want to do that** :s
17:32 < AAA_awright> Leeol2: Well, obviously you're not trying to define a file-level global for the sake of doing that, there's some problem it's going to solve
17:32 < Leeol2> AAA_awright: It's for the same reason Mocha is doing it. Nothing more
17:33 < AAA_awright> Leeol2: If it's the same reason as Mocha, then you could just write your own execution environment
17:33 < Leeol2> AAA_awright: But that's what i am asking, i don't want to use global like mocha does.
17:34 < AAA_awright> Leeol2: http://nodejs.org/docs/latest/api/all.html#all_executing_javascript ?
17:34 < Leeol2> AAA_awright:  Mocha does it so that the user doesn't have to type 10 lines of `foo = mocha.foo; bar = mocha.bar`, and on the flipside so the user doesn't have to do `mocha.describe(...)` every time
17:35 < klawd_prime> can i just require installed modules via require('name')?
17:35 < AAA_awright> Leeol2: There's nothing wrong with doing that. If it wanted to save you characters, it could have just defined a function "d"
17:35 < Leeol2> AAA_awright: That may be what i was looking for, let me investigate
17:35 < klawd_prime> i have installed class.js with -g but Error: Cannot find module 'class' when i try to require it
17:35 < Leeol2> AAA_awright: I am aware there is nothing wrong with doing that
17:36 < Leeol2> AAA_awright: I never said there was. Like i said, the workarounds are numerous and quite obvious to not using any sort of scope injection
17:36 < Leeol2> That's what modules are for.
17:36 < AAA_awright> Leeol2: If it's acceptable to do that, then I'd do that. It's best not to go against programmer's expectations of how stuff should work
17:36 < bradleymeck> klawd_prime: files are required via paths ie require('./class.js') modules ala npm are required by name and looked up in the node_modules folder
17:36 < Leeol2> AAA_awright: Who said i was?
17:37 < Leeol2> AAA_awright: If the user asks to inject the scope, i will do so.
17:37 < Leeol2> (In a safe way at least)
17:37 < bradleymeck> i would avoid systems that attempt to recreate class based languages in a prototype based language (you wouldnt add classes to lisp would you?)
17:38 < Leeol2> AAA_awright: foo.please_save_my_lazy_ass_from_typing_three_characters(this)
17:38 < klawd_prime> bradleymeck: i just don't like writing .prototype. all the time
17:38 < AAA_awright> var d = foo.please_save_my_lazy_ass_from_typing_three_characters; // done?
17:39 < bradleymeck> klawd_prime why not x.prototype = {y: f, z: f2}; ? or use a mixin scheme if you do need prototype chains
17:40 < Leeol2> AAA_awright: You missed the point of that function. The user is asking to inject scope into his module from some foo vars
17:40 < Leeol2> AAA_awright: I am not forcing anything on anyone, just providing the option for people to have mocha style syntax
17:40 < AAA_awright> I'm saying that style sintax is a _bad_ idea
17:41 < Leeol2> AAA_awright: If people want it your way, they can have it your way. If they want it the mocha way, they can ask for it.
17:41 < Leeol2> Talk to mocha. 
17:41 < klawd_prime> bradleymeck: actually a good question. i never used that much javascript. just the odd client side effect or ajax load
17:41 < AAA_awright> Also, you're not going to get it from require()
17:41 < Leeol2> AAA_awright: pardon?
17:41 < AAA_awright> You can write your own require()-style function, check out the source, in Node.js lib/module.js
17:42 < Almindor> there's no way to tell packages.json to use a local path for a module?
17:42 < Leeol2> AAA_awright: I'm a bit confused on what you mean? Are you talking to me?
17:42 < Almindor> like with npm install /whatever
17:42 < bradleymeck> Almindor `npm help link`
17:43 < AAA_awright> Leeol2: Yeah... You can't define arbitrary variable names in another require()d file
17:44 < Leeol2> AAA_awright: Well, in the mock i gave File1 is never requiring File2
17:44 < Leeol2> AAA_awright: https://gist.github.com/9bf5943308e6332d627f
17:44 < Leeol2> AAA_awright: File2 requires file1, and then asks File1 to inject some vars into it's scope
17:45 < AAA_awright> Leeol2: File1 is user code? You could possibly ask the user to wrap the entire file in a giant with(){} block
17:45 < Leeol2> AAA_awright: I'm not saying the mock works, i came here asking how to make it work :P
17:45 < Leeol2> AAA_awright: File1 is library code
17:45 < Leeol2> AAA_awright: File2 is user code
17:45 < Almindor> bradleymeck: that's a bit longshot for automated builds
17:46 < AAA_awright> Ohoh, you're importing variables from File1 into File2
17:46 < Almindor> bradleymeck: I just need a modified version of a module to be in our project instead of downloaded
17:46 < Leeol2> AAA_awright: Yes
17:46 < Leeol2> AAA_awright: If i was doing it the Mocha way, add_vars() might look like this `add_vars = function () { global.foo; global.bar }`
17:46 < AAA_awright> Still the same problem, really... You can ask the user to:
17:46 < AAA_awright> with(require('./file1'){ foo(); bar(); }
17:47 < bradleymeck> Almindor: bundledDependencies ?
17:47 < Leeol2> err, sorry, `global.foo = foo;`
17:56 < Almindor> bradleymeck and how do I tell it to bundle a local package? From what I understand it still downloads
17:56 < Leeol2> AAA_awright:  What i am trying to avoid is the Mocha way. I, like you, dislike "magic" variables. I just want a rough feature parity, and one of those features is not having to have cryptic variable names `a.b(...)` or 10 lines in every test file defining everything locally `foo = d.foo; bar = d.bar` etc
17:56 < bradleymeck> Almindor if its in bundledDependencies it will not download a copy if a copy already exists in node_modules
17:56 < Almindor> hmm
17:57 < freewil> what is the use case for using cipher.final()
17:57 < Almindor> that should works, I'll need to change a lot of scripts to not delete the whole node_modules tho
17:57 < Almindor> work*
17:57 < bradleymeck> Almindor: use npm pack instead of doing something too smart
17:57 < bradleymeck> npm pack will make you a sane tarball instead of you manually nuking node_modules etc
17:58 < AAA_awright> freewil: Returning the last block of a stream cipher
17:58 < AAA_awright> Kinda important
17:58 < freewil> im confused how it's diff from cipher.update
17:58 < AAA_awright> freewil: Same API as Hash
17:58 < AAA_awright> Or same reason
17:58 < freewil> hash.update() actually returns the hash value?
17:58 < sk8ball> anyone reccommend a linux distro for setting up a node dev environment in a VM
17:58 < AAA_awright> freewil: Almost certainly you don't want to be using ciphers directly unless you're really experienced at what you're doing and know their internals
17:59 < gkatsev> ubuntu for everything works. mint for simplicity. arch for do-it-yourself.
17:59 < ryanrolds_w> sk8ball: If you can't use a SmartOS image then debian, personal opinion
17:59 < gkatsev> sk8ball: ^^
18:00 < AAA_awright> freewil: A stream cipher encodes a chain of encrypted blocks, and a block is output every some number of bytes. However, the last block usually isn't filled to the end, so it needs to be padded out to the end before it can be sent out.
18:00 < AAA_awright> freewil: See cipher.setAutoPadding
18:02 < freewil> AAA_awright, i see
18:03 < freewil> AAA_awright, so you would always want to use final() no?
18:03 < freewil> after you've called update() n times?
18:03 < AAA_awright> final() returns the final block
18:03 < AAA_awright> It has to be padded out to the end, after all
18:04 < AAA_awright> But again, security is something that's really trivially easy to screw up in any number of ways, so you probbly want to use existing protocols like TLS instead of building your own.
18:04 < AAA_awright> Most notably, a cipher offers no protection against a MITM attack
18:04 < freewil> AAA_awright, im not using it for network communication
18:04 < freewil> just to temporarily encrypt and store some data
18:05 < sk8ball> any other smartos advocates around here
18:05 < AAA_awright> So, another program erases the contents and replaces it with its own
18:05 < sk8ball> what makes smartos so great
18:05 < AAA_awright> If you're doing filesystem encryption, there's libraries for that, too
18:06 < ryanrolds_w> sk8ball: dtrace and it should preform pretty well, maybe one of the Joyent guys can speak up.
18:07 -!- isaacs changed the topic of #Node.js to: test, please: http://nodejs.org/dist/v0.8.7/
18:07 <@isaacs> test, please: http://nodejs.org/dist/v0.8.7/
18:07 < zipp> yes, almighty overlord. as you wish.
18:08 < zipp> There a changelog in this shiz?
18:09 < AAA_awright> Bah, is the python going to be dumped anytime soon
18:09 < AAA_awright> This is an insult to the kingdom of V8
18:10 < AAA_awright> `make test` runs 100%, installs fine, my programs run fine
18:11 < dnnsmanace> what is the proper way to send a response with a 200 to a POST in express?
18:17 < sukima> Google fail: ubuntu 11.04, apt-get install npm; npm install -g spine.app -> fails with missing 'package.json' in directory . I don't understand. why does npm need a package.json for a global install? (node.js v0.4.9, npm v0.2.19)
18:25 < ryanrolds_w> isaacs: Installed fine and the Express 3.0 tests passed on it (except one, but that one fails all the time)
18:28 < pooya> i am trying to add AtExit handler to a node module, is there anyway to access all instantiated modules there?
18:29 < dnnsmanace> anyone can tell how to pass a response of 200 to http with express?
18:32 < chrisjaure> dnnsmanace: res.send(200), have a look at the docs http://expressjs.com/api.html#res.send
18:33 < bradleymeck> pooya: require.cache?
18:33 < pooya> bradleymeck: this is in C++
18:33 < dnnsmanace> chrisjaure: thanks
18:34 < pooya> maybe I should keep my own references...
18:35 < pooya> @bnoordhuis ideas? i am trying to close sockets on each instance of module on AtExit https://github.com/joyent/node/commit/e4a8d26
18:38 < me_janis> hi, I'm trying to write a node app, that communicates with multiple slaves on an RS-485 half duplex serial bus. the problem is: every time the the master "polls" a slave, he has to wait for an answer (since its half duplex). these polls will be event driven. is there any nice (non blocking) mechanism to "queue" these polls?
18:39 < zipp> Where's Nexxy when you need her? She'd probably know.
18:42 < ryanrolds_w> me_janis: Check out the async module. It's got a queue.
18:42 <@Nexxy> hmm?
18:42 < dnnsmanace> me_janis: or step module
18:43 <@Nexxy> no.
18:43 <@Nexxy> serial isnt asynx
18:43 <@Nexxy> lol
18:43 < me_janis> is the step module able to append function calls?
18:44 <@Nexxy> no control flow module will help there
18:44 <@Nexxy> unless I'm misunderstanding the Q
18:44 < zanefactory> qq, what do all of you use to load/stress test your node.js apps
18:44 < dnnsmanace> is there any documentation for bodyparser module? i am trying to parse an attachment posted thru sendgrid but have no idea where is going
18:44 < ryanrolds_w> Nexxy: I think he wanting to queue is somewhat sync actions.
18:45 <@Nexxy> zipp: I'm always near by, all you have to do is call out!
18:45 < ryanrolds_w> Which, async will work. It can start the request and wait for the event it needs, then do the next item in the queue.
18:45 <@isaacs> ryanrolds_w: thanks!
18:45 < zipp> Nexxy: Oh my, you really are always watching. I'm scared.
18:45 <@Nexxy> ;)
18:46 <@Nexxy> I get IRC hilights on my phone when I'm not at the computer
18:47 < stefan41> are there any best-practice type guides on code separation for node apps?
18:47 < dominictarr> how do you know something good is happening? regexp for !'s ?
18:47 < ryanrolds_w> isaacs: At some point I should set a system for running the test of the top 10 modules. When a version needs tested, shuck it in to nvm, nvm use the new RC and run the battery of tests.
18:47 <@Nexxy> stefan41, commonJS
18:48 < chrisjaure> dnnsmanace: A lot of the middleware in express comes from connect http://www.senchalabs.org/connect/
18:49 < stefan41> Nexxy: like commonjs.org?
18:49 < dnnsmanace> chrisjaure: ah, thats why it wasnt in express docs
18:49 < livinded> Nexxy: what client do you use for that?
18:49 < livinded> looking into using twilio to set that up for irssi to sms me
18:51 < leekox> I am starting with node.js and I don't solve a little prob. when i call the server the first time works, the second no i have this message curl: (52) Empty reply from server the code is http://pastebin.com/bKn9EDer 
18:53 < ryanrolds_w> leekox: Does it work if you move `connetion.end()` in the `connection.query()` callback?
18:54 < ryanrolds_w> leekox: nvm, ignore. Just looked at the mysql module example and it should be fine.
18:55 < leekox> ok thank ryan!!
18:55 <@Nexxy> livinded: irssi
18:56 <@Nexxy> no twilio required, although I suppose you could.
18:56 <@Nexxy> stefan41, ya
18:57 < livinded> Nexxy: what are you using?
18:58 < me_janis> ryanrolds_w: thx! queue of async should do the job. (with concurrency = 1) 
18:59 <@Nexxy> perl scripts
18:59 < ryanrolds_w> me_janis: Sweet. Async is a great module.
19:01 < livinded> Nexxy: do they have a name?
19:01 < livinded> or did you write them yourself?
19:01 < nlf> npm rebuild will not install new packages, correct?
19:01 < me_janis> spend the last 4-5 days learning node.. i'm initially situated in the world of bitwise operations (µC stuff) strange transition… ^^
19:02 < livinded> me_janis: unfortunately bitwise operations in js are not fun
19:02 < me_janis> … indeed ;)
19:03 < me_janis> my logic analyzer saves my day…. 
19:03 < klawd_prime> is there a way to get the stacktrace?
19:03 < klawd_prime> i could throw an exception and catch it but is there a better way?
19:04 < ryanrolds_w> klawd_prime: console.trace();
19:04 < klawd_prime> thanks
19:08 < Murvinlai> bnoordhuis
19:08 < Murvinlai> bnoordhuis: u here?
19:09 <@Nexxy> livinded, I'm not sure, I modified them from something I found on the interwebs
19:22 < sukima> how do you install a global pakage from the registry without needing a package.json? Using ubuntu 11.04 package then running npm install -g spine.app causes an error thate package.json doesn't exists in current directory
19:23 < jergason> I am trying to use knox to overwrite files already in s3.
19:23 < jergason> I can create new files and view them immediately.
19:24 < jergason> But  when I PUT files on top of old ones, the url still seems to point to the old version of the file.
19:24 < jergason> Any ideas?
19:25 < sukima> caching?
19:26 < chesterjg> in npm, when I run npm install -g, it runs my "scripts" (in package.json) from /usr/local/lib rather than the original directory, how can I fix this? (it's a bash script)
19:33 < sukima> Anyone know how to diagnose missing package.json files while npm runs globally? http://pastie.org/4495344
19:34 < Dragonblade> Anyone have an idea on how to get node.js to stream from a directory with mp3s instead of one mp3
19:34 < bradleymeck> sukima : npm pack $PKG and check the tarball?
19:35 < Dragonblade> I have the http-example.js on the webserver
19:35 < Dragonblade> http://63.246.136.84/
19:35 < sukima> pm pack spine.app
19:35 < sukima> opps
19:36 < sukima> npm show the help screen. doesn't seem to have a pack command
19:39 < tprice> how do i install a module that im working on with out creating a node_modules folder this is with npm
19:39 < tprice> is it npm link
19:39 < tprice> or is it better to npm install -g
19:40 < context> This is Grade A 100% pure Colombian cocaine, ladies and gentlemen... Disco shit... Pure as the driven snow.
19:44 <@Nexxy> context, wat?
19:45 < context> quoting a movie
19:45 <@Nexxy> too bad it's all tainted with levamisole these days
19:46 < AAA_awright> tprice: ... git clone`?
19:46 < AAA_awright> * `git clone`?
19:47 < tprice> no its a local folder that im developing in
19:47 < dnnsmanace> does bodyparser automatically take the attachment out of req.body in a POST?
19:47 < AAA_awright> Well where else would npm put a package
19:48 < tprice> all i want is not to npm install -g every time
19:49 < tprice> or like i am cd ../ npm install package
19:49 <@Nexxy> tprice, `npm link` in the source dirextory
19:49 <@Nexxy> then in the directory you want it imported to, `npm link <module name>`
19:53 <@Nexxy> uh oh
19:53 < tprice> yes i think link was what i wanted
19:53 < tprice> thanks
19:53 <@Nexxy> :)
19:53 < yawnt> :)
19:54 < yawnt> (:
19:54 <@Nexxy> you're.welcome!
19:54 < yawnt> :)
19:54 <@Nexxy> stupid android keyboard
19:54 < yawnt> haha
19:54 < yawnt> hai btw
19:54 <@Nexxy> haii
19:54 < ryanrolds_w> tprice: Link will still need an npm_modules dir.
19:54 <@Nexxy> que paso
19:54 < LordThumper> Hi.
19:54 < LordThumper> How do I make a Headers Request in node.js?
19:54 < ryanrolds_w> tprice: It just puts a sym link in node_modules pointing to the other copy.
19:55 <@Nexxy> lol
19:55 <@Nexxy> I think you missed tprice's question
19:55 < ryanrolds_w> Nexxy: Nope, <tprice> how do i install a module that im working on with out creating a node_modules folder this is with npm
19:56 < LordThumper> I need ContentType for a resource, is is possible to request only the headers?
19:56 < ryanrolds_w> Nexxy: npm link still needs a node_modules dir, which is what he wanted to avoid creating.....
19:56 < duko> i have found something in someone else's code that i do not understand `return ([1, 2, 3])`
19:56 < LordThumper> Maybe i should read HTTP specification first
19:56 < duko> what are the open and close parens for?
19:56 <@Nexxy> alright. l
19:56 <@Nexxy> ol
19:57 < tprice> oh it still creates a node_module folder
19:57 < tprice> maybe i just delete it when im done
19:57 <@Nexxy> what 
19:57 < ryanrolds_w> tprice: What is the issue with a node_modules dir?
19:58 < tprice> i'm developing a module and for testing localy with out having to npm install -g
19:58 <@Nexxy> which is exactly what link is for
19:59 < sukima> Found the answer. Always use the latest node.js / npm version regardless of OS prefered package. All older versions are very broken.
19:59 < ryanrolds_w> Yeah, that is exactly what it's for, but tprice has something against the node_modules dir.
19:59 <@Nexxy> oh my 
19:59 <@Nexxy> them's fightin' werds
20:00 < tprice> i dont want to have to delete the node_module every time i publish to npm
20:00 < ryanrolds_w> tprice:  Just add node_modules to your .npmignore if you want to avoid it getting packaged. 
20:00 <@Nexxy> cuz modules get packaged
20:01 < ryanrolds_w> Now, I have to check if they do.....
20:01 <@Nexxy> spoiler: they don't
20:01 < ryanrolds_w> Nexxy: Thanks, that makes sense. So this is all a non-issue.
20:02 < ryanrolds_w> I've been adding node_modules to the .npmignore to be 100% sure.
20:02 <@Nexxy> oh I'm making it an issue
20:02 < tprice> a work around for myself is to install all dependencies globally
20:02  * Nexxy flips a table
20:03 < ryanrolds_w> tprice: Yeah, just use npm link. It makes things so much easier.
20:04 < tprice> - ryanrolds_w> will do
20:04 < tprice> have done
20:05 <@Nexxy> A++++++ would link again
20:09 < zipp> Nexxy: You make everything an issue -_- :P
20:09 <@Nexxy> that's what I'm here for <3
20:09 <@Nexxy> while I have you, your name:
20:10 <@Nexxy> needs moar 'p'
20:10 < zipp> Ever since Node conf, I've been trying to stream ALL the things :x
20:10 <@Nexxy> zippp
20:10 <@maxogden> woot
20:10 <@Nexxy> ty
20:10 < zipppppppppp> <3
20:10 <@Nexxy> now you need a bot called zoppppp
20:10 <@Nexxy> and one called zoobity
20:10 < zipppppppppp> "I'm the scatman!"
20:10 < zipppppppppp> Or just Bill Cosby
20:10 <@Nexxy> badabadammmbapbadabap
20:11 <@Nexxy> I'm slip slidon
20:11 <@Nexxy> slidin*
20:12 < zipppppppppp> http://www.youtube.com/watch?v=y2wMsnE2cvI dat intro
20:14 <@Nexxy> I wish connectbot parsed links
20:15 < ZipZopZoobityBop> LimeChat does :3
20:15 <@Nexxy> rofl
20:15 <@Nexxy> I'm using irssi
20:16 < ZipZopZoobityBop> Ahh, that connectbot.
20:17 < RLa> anyone tried appfrog's free hosting?
20:17 <@Nexxy> appfrog?
20:18 < RLa> https://console.appfog.com/pricing
20:18 < RLa> 2GB ram is pretty good for free
20:18 < RLa> tho db size of 1GB sucks
20:18 <@Nexxy> is that some sort of cheap amazonian rip-off of appfog?
20:18 < RLa> amazon gives you free machines?
20:18 <@Nexxy> yes
20:19 < RLa> no idea, but i'm going to try them out
20:19 < RLa> last time i tried "free" amazon machine it took hour to compile node
20:19 <@Nexxy> nodejitsu is the answer
20:19 < RLa> because of cpu stealing
20:20 <@Nexxy> nodejitsu will protect you from the terrible secret of space
20:20 <@Nexxy> RLa, do you have stairs in your house?
20:20 < jesusabdullah> In space, nobody can hear you scream. Except Nodejitsu.
20:21 < RLa> ? yes
20:21 <@Nexxy> and simon cowell
20:21 < gkatsev> Nexxy: irssi connectbot!
20:21 <@Nexxy> he hears all
20:21 <@Nexxy> gkatsev but it's not on play, is it?
20:22 < gkatsev> it is
20:22 < jesusabdullah> The difference is, Simon Cowell will just remind you how obnoxious your screaming is and tell you to just quit while you're ahead
20:22 < gkatsev> but you can also build from source, if you wish
20:22 < gkatsev> Nexxy: https://play.google.com/store/apps/details?id=org.woltage.irssiconnectbot
20:23 < gkatsev> Nexxy: been using it for a while.
20:23 < RLa> hm, appfrog runs stuff on aws, openstack, azure and rackspace
20:25 < RLa> Nexxy, got express 3 app running there: http://rla.eu01.aws.af.cm/
20:25 < RLa> very quick setup
20:25 <@Nexxy> but does it include jitsu
20:25 <@Nexxy> I dont think so
20:26 < RLa> it does not
20:26 <@Nexxy> shame
20:26 < tprice> whats a good folder on linux for log file?
20:27 < technocrat> its mostly /var/log
20:28 <@Nexxy> tprice, /var/log/
20:28 < tprice> is it good practice to create a folder /var/log/myfolder?
20:28 < tprice> and place the logs in that folder?
20:28 < technocrat> for more than 1 log file, yes (like apache)
20:29 < tprice> kk thanks
20:30 <@Nexxy> I prefer to just use appname.log/appname.err
20:30 <@Nexxy> or w/e
20:32 < tprice> well i would end up will 50+ logs
20:33 < tprice> i dont want to cloge the folder up
20:33 < tprice> clog**
20:35 < RLa> Nexxy, app already crashed
20:35 < rhl> Hi, Can you get help here with using Express and Jade?
20:35 < tjholowaychuk> rhl #express
20:36 < RLa> looks like that attempt to attach mongodb to my account makes my app crash
20:37 < rhl> tjholowaychuk: thanks
20:42 < rhl> tjholowaychuk: actually I think you can answer my question, since your name shows up on github next to jade
20:42 < Industrial> Anyone used https://github.com/substack/mountie ? https://gist.github.com/8807fdfde2a637e421b3 Having trouble understanding how to forward requests from http://www.site.com to site.com
20:44 < Industrial> https://github.com/substack/mountie#servermountopts-cbhttps://github.com/substack/mountie#servermountopts-cb passes the bouncy() function but that requires a port, not a service name. 
20:46 < Industrial> substack_ perhaps :x?
20:47 <@Nexxy> tjholowaychuk, hater
20:47 < tjholowaychuk> Nexxy :D
20:47 <@Nexxy> </3!
20:52 < Leeol2> What file is the source for require() found?
20:53 < TooTallNate> Leeol2: lib/module.js
20:53 < Leeol2> ty
21:01 < Benvie> TooTallNate: I spend some time with ref and ref-struct over the last few days since i've been doing a bunch of win32 api ffi stuff. It's probably a bit too much to be pulled in but you might find some of it interesting https://github.com/Benvie/gyp/commit/800287c6c77303bb50668b8b89513edb2e1cec6a https://github.com/Benvie/ref-struct/commit/fc29fa1af947517ff7272790a048d92cac776505
21:03 < Murvinlai> would someone help me to look into this issue? http://stackoverflow.com/questions/11975526/why-node-js-throw-errors-on-my-https-remote-connection-where-it-has-a-missing-ha
21:09 < TooTallNate> Benvie: yikes, lots of changes
21:09 < TooTallNate> Benvie: what's sorta the general goal of it all?
21:10 < Leeol2> Can package.json define local dependancies? Ie, `"dependancies": { "name": "../../foo/bar" }` ?
21:11 < newToNode> My first time in here, looking for advice or inspiration...I am looking to write something interesting in node for my final year dissertation in college, any ideas
21:11 < Leeol2> When i try that, it says that the url returned 404
21:11 < Benvie> the Windows API has 800 bajillion different types
21:11 < tprice> Leeol2 package.json should be in the root folder
21:11 < Determinist> what are you gentlemen using for logging? I'm looking for a way to create daily log files (e.g. foo_2012-08-15.log)
21:11 < tprice> so ../../ is way out side the modules folder
21:11 < Leeol2> tprice: huh?
21:11 < Benvie> and a certain usage pattern to it
21:11 < Leeol2> tprice: I have two different projects
21:12 < Leeol2> tprice: One project is trying to install the other, via package.json
21:12 < Determinist> not just gentlemen, obviously :P
21:12 < tprice> use the module by its name
21:12 < Leeol2> tprice: It works fine if i run `npm install ../../foo/bar`, but when i put that into the package.json, it returns 404
21:12 < tprice> not its static path
21:12 < Leeol2> tprice: How is it going to install it if it does not know where the package is located?
21:13 < tprice> there are two packages right?
21:13 < Benvie> this is my currently functionality win32 api bindings that I'm using which is kind of a repretentation generally of what I need to do with it https://github.com/Benvie/win32-api-js-ffi/blob/master/bindings.js
21:13 < Leeol2> ~/projects/project1/package.json and ~/projects/project2/package.json
21:13 < Leeol2> tprice: ^^
21:13 < tprice> dont like to a static file that is outside the root folder
21:14 < Leeol2> tprice: So how would you do it then?
21:14 < tprice> these projects are on the npm site?
21:15 < Leeol2> tprice: Of course not lol
21:15 < Leeol2> tprice: These are on my file system, hence the directory structures
21:15 < Benvie> er I gues this is a better representation of the APIs in usage https://github.com/Benvie/win32-api-js-ffi/blob/master/Window.js
21:15 < Benvie> though still building up the foundations
21:15 < tprice> dependancies in the package.json install from the npm site
21:15 < Leeol2> tprice: Like i said, `npm install ../project2` works absolutely fine, i am just trying to put that into package.json
21:15 < Leeol2> tprice: Not true, they also install from URLs
21:16 < Leeol2> tprice: I was trying to see if it was possible for them to also install from the file system
21:17 < tprice> just require('../project2') dont use it as a dependancies
21:17 < Leeol2> But then you would have to have all sorts of changes to your code when that finally went live
21:17 < Leeol2> Seems a shoddy way to do it. Much easier to manually install via npm
21:18 < Leeol2> Anyway, i'll just do it manually via npm, no worries
21:18 < tprice> or publish project2 and your dependancies will be {"project2":"*"}
21:18 < Leeol2> tprice: Right, but both project1 and 2 are not at a publishable state
21:19 < tprice> a shoddy way is to include a file outside of the root folder
21:19 < Leeol2> The same could also apply to projects that *can't* be published (private: true)
21:19 < tprice> things will break if you do it that way
21:20 < tprice> you move the folder you loose the static path
21:20 < tprice> maybe you can npm link project2
21:20 < Leeol2> tprice: .. huh? `npm install ../project1` installs project1 into project2, nothing breaks if you move it
21:20 < Leeol2> Ah, i'll look into link, ty
21:21 < Leeol2> tprice: At any rate, like i said, this is all pre-publish, so "breaking if you move it" is sort of irrelevant. It's dev code
21:21 < Leeol2> tprice: It would break *far far worse* if you used "require('../project1')" all over the place lol
21:22 < tprice> dont require a file outside the root folder of your module
21:22 < tprice> thats all im saying
21:25 < Leeol2> tprice: It's illrelevant during development
21:25 < Leeol2> If that was a hard and fast rule, npm link would not exist.
21:29 < tprice> it's just bad practise "dependancies": { "name": "../project1" } will not work and require('../project1') will but is bad as well
21:29 < robinson_k> hi
21:30 < tprice> i would like to know what people do to develop two module that require each other
21:30 < Leeol2> tprice: Yea but for development, it's no worse than `npm link foo`
21:30 < Leeol2> tprice: (though, npm link foo is *far better*)
21:30 < tprice> from what was said before npm link is the way to go
21:31 < Leeol2> tprice: Two modules that require eachother is exactly what i am doing
21:31 < Leeol2> `npm link foo` :)
21:31 < tprice> well npm link foo is right from what i understand
21:31 < tprice>  Leeol2 i was asking something similer before
21:31 < Leeol2> It is, i had forgotten about it when i asked about the package installation
21:32 < robinson_k> anyone has a clue why this seems to be a bad idea: http://pastebin.com/rCuzL2eh
21:32 < Leeol2> We disagree on installing ../foo, but we both agree on npm link. No need to discuss further hehe, we're just spamming now :)
21:32 < Murvinlai> anyone can help me on this???
21:32 < Murvinlai>  socket hang up     at SecurePair.error (tls.js:907:15)     at EncryptedStream.CryptoStream._done (tls.js:385:17)     at EncryptedStream.CryptoStream._pull (tls.js:536:12)     at SecurePair.cycle (tls.js:825:20)     at EncryptedStream.CryptoStream.end (tls.js:358:13)     at Socket.onend (stream.js:66:10)     at Socket.EventEmitter.emit (events.js:115:20)     at TCP.onread (net.js:416:51) 
21:32 < Murvinlai> http://stackoverflow.com/questions/11975526/why-node-js-throw-errors-on-my-https-remote-connection-where-it-has-a-missing-ha
21:33 < Murvinlai> bnoordhuis: would you help me to take a look on this? http://stackoverflow.com/questions/11975526/why-node-js-throw-errors-on-my-https-remote-connection-where-it-has-a-missing-ha
21:33 < newToNode> If you had 9 months to work on a project using node, programming absolutely anything, what would you?
21:33 < tprice> Murvinlai why do you have two i++?
21:33 < Murvinlai> what i++?
21:33 < robinson_k> tprice: i think you mean me.
21:34 < tprice> oh yeah sorry that pastbin
21:34 < robinson_k> tprice: copy / paste error from production code i tried to benchmark.
21:34 < Murvinlai> but.. anyone can help me on this SSL cert problem?
21:34 < Murvinlai> a missing handshake..
21:35 < tprice> robinson_kand your only closing the last client  client.close();
21:35 < robinson_k> oh
21:37 < mscdex> secret handshake!
21:38 < me_janis> does every event listener, listening on the same event, get the same var when called?
21:38 < tprice> robbinson try this http://pastebin.com/KJFfEte8
21:44 < mikeywaites> hey guys, anyone know what the correct format for doing a findByid is in mongoose
21:45 < mikeywaites> findById(req.params.id, function(err, doc) returns null, null even thought ObjectId is copied straight from mongo
21:45 < RLa> ObjectId?
21:45 < mikeywaites> {_id: req.params.id} says req.params.id is an invalid object id
21:45 < robinson_k> tprice: thanks for the input.
21:46 < RLa> try new ObjectId(req.params.id)
21:46 < mikeywaites> RLa: cool, was just about to try that
21:46 < RLa> _id is not string but it can be represented by hex string
21:46 < RLa> some libs might to such conversion automatically
21:48 < mikeywaites> RLa:  still null null :/
21:48 < RLa> is the object in db?
21:48 < RLa> with that objectid
21:49 < jaha> anyone know any JS/node based file browsers, preferably with S3 support?
21:49 < mikeywaites> RLa: yeh the object is being outputted fine that object has been taken straight from db
21:49 < jaha> im using the redactor.js wysiwyg and would like to be able to let the user navigate around the file tree
21:50 < RLa> mikeywaites, collection is same?
21:51 < RLa> mikeywaites, you can also enable mongoose.debug = true
21:52 < mikeywaites> RLa: ah wait i got it! not sure whats different though, maybe i didnt copy the id properly after using ObjectId cheers!
21:52 < RLa> oh ok
21:52 < mikeywaites> oh geez i just realised what i done :/ copied embeded doc id :S think its time for bed 
21:53 < mikeywaites> using req.params.id directly, after all that, works
21:53 < mikeywaites> RLa:  beh!
21:59 < theBrettman> how do I see the stack when I run something in node?
21:59 < theBrettman> or do  trace I mean
21:59 < tprice> console.trace()
22:00 < theBrettman> is there a way to run it with the node command instead?
22:00 < tprice> node -pe "console.trace()"
22:00 < tprice> i dont know what you mean
22:02 < theBrettman> like to run the server I run node server.js
22:02 < theBrettman> but I wanna see what is happening when
22:02 < theBrettman> I guess I will put it at the end of the response just before it ends
22:03 < tprice> node-inspector might help
22:04 < robinson_k> tprice: great tip with the closure. but it seems i just open too many sockets a time. the callback never gets called (where i close the client)
22:04 < theBrettman> is there a bot to link me to the docs for that?
22:07 < tprice> theBrettman> https://github.com/dannycoates/node-inspector i take it your trying to debug
22:07 < theBrettman> just learning node
22:07 < theBrettman> some stuff is hard to wrap my head around so this will help
22:07 < tprice> yeah use node-inspector
22:08 < tprice> debug your code
22:08 < livinded> node-inspector is the greatest thing since sliced bread
22:08 < livinded> and possibly before
22:08 < theBrettman> is it already packaged or I have to get it with npm?
22:08 < tprice> robinson_k> you're welcome
22:08 < livinded> npm
22:08 < tprice> yeah you need to install it
22:09 < livinded> you just run your code with "node --debug <file>"
22:09 < livinded> then start node-inspector
22:09 < livinded> then connect to it via a webkit browser
22:11 < theBrettman> oh, this lets me do it in the browser? cool
22:22 < other_guy> does anyone have any bright ideas about how to handle processing streams without recalling the callback every time a new completed chunk is available?
22:22 < timeturner> no
22:22 < deoxxa> that's how it works
22:22 < timeturner> that's what streams are
22:23 < timeturner> chunks of stuff
22:23 < other_guy> Yeah, I know… it's becoming something of a pain in the ass to use with async.js
22:23 < other_guy> been trying to think of a way around it.
22:23 < timeturner> you could create an abstraction of some sort if you don't like seeing all the callbacks
22:24 < other_guy> async.js relies on firing a callback to notify it when a stage is done
22:24 < timeturner> but they'll still be there
22:24 < other_guy> the problem is that the first chunk calls the callback
22:24 < deoxxa> other_guy: wait there might be a way
22:24 < other_guy> and async.js thinks that phase is done.
22:24 < deoxxa> other_guy: do you have a reliable quantum computer?
22:25 < me_janis> is there any LRC (longitudinal redundancy check) module out there?
22:25 < other_guy> I think there's a dusty one down by the furnace
22:25 < deoxxa> otherwise, it sounds like you want to buffer up all the data from a stream
22:25 < deoxxa> take a look at buffoon (npm show buffoon)
22:25 < theBrettman> it's not working
22:26 < other_guy> yeah, most of the time that would work… in this case unfortunately I'm getting chunks of valid JSON back, each containing an array keyed with the name "keys"
22:26 < other_guy> so I need to append each new "keys" array to the one before it
22:26 < other_guy> which is doable
22:27 < other_guy> I just don't like it… sorta defeats the purpose of streaming
22:27 < deoxxa> well yes
22:27 < theBrettman> tprice, not sure what's wrong... it tells me visit http://0.0.0.0:8080/debug?port=5858 to start debugging but I get: The connection to 0.0.0.0 was interrupted.
22:27 < deoxxa> why not use each chunk as a new starting point for your logic?
22:28 < deoxxa> theBrettman: 0.0.0.0 means "all interfaces on your computer". replace it with "127.0.0.1". then go learn about tcp/ip.
22:28 < theBrettman> thx, that works
22:28 < other_guy> I do, basically.  The stream is sets of values… as they become available (parsed) I bubble them up.  The phase above is where the async.js structure is at.
22:28 < theBrettman> except no scripts are showing
22:29 < other_guy> Hmmm…. perhaps I can use a different async.js control
22:29 < other_guy> like whilst or until
22:29 < deoxxa> theBrettman: did you do the last part?
22:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:31 < other_guy> deoxxa, I suppose I could at least wrap my stream aggregation in a process.nextTick() so that dealing with the huge data set doesn't block everything else.
22:32 < upstream> Can someone take a look at this: https://gist.github.com/3364308
22:32 < theBrettman> I keep getting connect ECONNREFUSED
22:33 < wltsmrz> You can expand on this if you like other_guy https://github.com/Weltschmerz/Accumulate
22:33 < deoxxa> upstream: you're getting a partial object
22:33 < wltsmrz> If that's at all like you were imagining
22:33 < tprice> upstream you need to set module.exports before requireing it
22:33 < upstream> I'm having like an infinite recursive require issue or something
22:34 < deoxxa> upstream: that's how node's require() deals with cyclic require statements - it'll give you an object reference that's yet to be resolved properly
22:34 < other_guy> wltsmrz, yeah something like that
22:35 < upstream> deoxxa: i'm not too clear on that, can you go into more details?
22:35 < deoxxa> lemme find some documentation
22:35 < tprice> theBrettman> start node-inspector first then start your app
22:35 < other_guy> Unfortunately in this case that won't actually work, because the stream has to be decoded and then part of it pulled out, because that's the stuff that actually makes up the accumulation
22:35 < tprice> on exit of your app you might have to restart node-inspector
22:35 < TooTallNate> upstream: rewrite it like this: https://gist.github.com/3364320
22:35 < other_guy> the stream chunks are like
22:35 < deoxxa> upstream: http://nodejs.org/api/modules.html << ctrl+f for "unfinished"
22:36 < other_guy> { keys: [1, 2, 3, 4] }
22:36 < tprice> theBrettman> there are problem like the one you have that i found with node-insoector
22:36 < other_guy> { keys: ["asdf", "iop", "qwer"] }
22:36 < theBrettman> ok
22:36 < wltsmrz> You want a streaming parser?
22:36 < me_janis> anyone got an idea how to implement a LRC in javascript? … i would use crc.. but I'm bound to hardware…….
22:36 < other_guy> I get a bunch of those and I need to merge all the arrays described by keys across all chunks of the stream
22:36 < upstream> TooTallNate: That works, but I don't understand why, it seems like it's the same to me?
22:37 < TooTallNate> upstream: the general rule with cyclic dependencies is that you must set the "exports" *before* requiring anything else
22:37 < TooTallNate> upstream: what was happening before was you were requiring foo, which requiring index, but index hadn't set it's exports yet
22:38 < TooTallNate> so it was just an empty object when foo got ahold of it
22:38 < upstream> TooTallNate: That's interesting, I think I get it
22:39 < upstream> Thanks for the help!
22:39 < other_guy> checked out buffoon… that's an extremely expensive operation for handling JSON
22:39 < TooTallNate> upstream: no prob
22:39 < theBrettman> ok, so node-inspector is still running right? so I just run node --debug server.js? cuz that's not working
22:39 < other_guy> basically try to JSON.parse every section of the stream, and compile them if it fails, and keep trying until it succeeds
22:39 < theBrettman> do i have to kill the process and start it again?
22:40 < tprice> theBrettman> refresh you browser
22:40 < theBrettman> I did
22:40 < wltsmrz> I see, other_guy 
22:40 < teadict> I intend to build a vivarium at the back of my house
22:41 < other_guy> wltsmrz, it's definitely an oddball case.
22:41 < tprice> theBrettman> both are running at no error has shown?
22:41 < teadict> Wait, wrong window :P
22:41 < theBrettman> after it says connect ECONNREFUSED, do I have to kill the process or what?
22:41 < tprice> theBrettman> retry the steps node-inspector is a bit iffy
22:41 < tprice> yes
22:43 < theBrettman> it keeps getting connect ECONNREFUSED
22:43 < theBrettman> either way
22:43 < theBrettman> I'm in windows btw
22:45 < tprice> https://github.com/dannycoates/node-inspector/issues/115#issuecomment-6702232
22:45 < tprice> maybe drope back to node v0.6.x
22:45 < tprice> drop**
22:46 < tprice> has any progress been made on running node on android?
22:46 < tprice> i kinda want to get a touchpad just for node
22:47 < other_guy> Oh, in case anyone cares, the way that the default http Agent or http module handles DELETE requests is retarded.
22:47 < theBrettman> which x? lol
22:48 < other_guy> it maintains the transfer-encoding as chunked, which makes no sense, and automatically appends a body with "0", which makes no sense
22:48 < tprice> theBrettman> any past 17
22:48 < theBrettman> ok. you got a link for how I do that for this project? I forget...
22:50 < tprice> theBrettman> i dont understand
22:50 < theBrettman> um, there's like a way to regress the node to an earlier version just for the project I'm on, right?
22:50 < theBrettman> without uninstalling/reinstalling, all that
22:51 < tprice> you could use n
22:51 < tprice> github it
22:51 < theBrettman> I thought that was some feature built into node? hm... idk
22:52 < theBrettman> damn node can be a pain
22:52 < theBrettman> just like linux, lol
22:53 < theBrettman> spend the rest of your day/week/month trying to do one small thing, lol
22:53 < tprice> theBrettman i find linux better then working with node
22:53 < tprice> theBrettman lol yeah you where doing something with an http server an hour ago
22:53 < livinded> I find both enjoyable
22:54 < livinded> ...generally
22:54 < theBrettman> the price you pay for bleeding edge...
22:54 < livinded> the price people pay me for being on the bleeding edge is worth it
22:55 < tprice> livinded> i just dont like the forward slash in windows
22:55 < pringlescan> When you port something to another language, do you fork it on Git Hub or just link to it?
22:55 < theBrettman> you mean back slash?
22:55 < livinded> tprice: that's the only thing you don't like?
22:55 < pringlescan> livinded, lol
22:56 < livinded> windows is so ass backwards
22:56 < tprice> i dont like to resolve my paths
22:56 < theBrettman> well, windows is bloated and no package manager and it doesn't come with all the cool stuff linux does. terminal not as easy to use either, no tabs... other features suck
22:56 < tprice> and i dont like the cmd in windows
22:57 < livinded> I don't like the windows kernel
22:57 < livinded> or userland
22:57 < livinded> or directx
22:57 < theBrettman> but linux requires an emulator to run your games and they prolly won't work right anyway... 
22:57 < livinded> who has time for games?
22:57 < Lorentz> just waiting for steam on linux
22:57 < livinded> unless you're making them
22:58 < theBrettman> leaves you with mac, best of both worlds if you have enough money to buy one :(
22:58 < theBrettman> not to mention, mac is waaaaaaaaay behind pc in terms of hardware technology
22:58 < livinded> no it's not
22:59 < theBrettman> oh yeah? seen a mac with the newest line of processors yet?
22:59 < kuja> definitely is not, also the retina mbp is pretty ahead of its time
22:59 < theBrettman> and the imac doesn't have touch? wtf?
22:59 < tprice> has anyone used https://github.com/paddybyers/anode?
22:59 < livinded> iMac doesn't have touch?
22:59 < theBrettman> nope
23:00 < theBrettman> you would think they woulda done this a year or so ago
23:00 < kuja> Not cutting edge != Waaaaay behind
23:00 < livinded> wtf are you talking about?
23:00 < livinded> if you look at the air it's WAY ahead of all the ultra book hardware out there
23:00 < theBrettman> pc has the latest processors and video cards, mac has stuff 2 generations ago
23:01 < theBrettman> they don't even use the a4 yet
23:01 < livinded> um, all current apple hardware is running ivy bridge besides mac pro I believe
23:01 < tprice> looking at the java hack on the mac took them 6 months to get the code out
23:01 < tprice> its just the way they ride
23:01 < tprice> have their hands in everything
23:02 < livinded> good, I don't want Java on my machine anyway
23:02 < livinded> or Flash
23:02 < livinded> both are a giant pile of crap
23:02 < tprice> lol all i need it node
23:03 < livinded> give me a C compiler and I'll make it work
23:03 < tprice> lol just give me v8
23:06 < jrajav> livinded: A C compiler alone wouldn't be enough from today on; both LLVM and GCC have to be bootstrapped with C++
23:07 < jrajav> (Though I'm assuming you weren't being literal)
23:09 < theBrettman> if only apple would quit being buttheads and let you buy osX
23:10 < theBrettman> and put it on anything
23:10 < theBrettman> there is a workaround for that though, isn't there?
23:11 < theBrettman> why can't they make a 17" mac? I know it would prolly cost $3k+ lol
23:11 < nicholasf> hey, anyone here using vows.js extensively? Just wondering how to handle tearDowns to clean up the database between tests while they run asynchronously
23:12 < nicholasf> the closest I can get to it is to think I'll transactions, actually, but I havent found much onit
23:15 < theBrettman> tprice, figured it out without changing version. my code was running to fast so I had to run --debug-brk server.js
23:17 < upstream> TooTallNate: Check this out https://gist.github.com/3364320#gistcomment-399013 (pretend the first line is included in the code block ;)
23:17 < theBrettman> unfortunately, I have to look at all nodes modules in the stack too :(
23:17 < theBrettman> I just wanna see my modules only
23:17 < upstream> TooTallNate: basically this approach doesn't work using var foo = function(){ ... } but it works as `function foo() { .. }`
23:18 < upstream> Does anyone know what the main difference between `function foo(){ ... }` and `var foo = function(){ ... }`
23:19 < TooTallNate> upstream: read up on Javascript "hoisting"
23:20 < TooTallNate> upstream: to answer your question, define the index function before doing the require() call
23:21 < timeturn> mongo question (since #mongodb is kind of dead) what's the difference between creating a compound index and creating multiple indexes
23:22 < upstream> TooTallNate: that doesn't seem to fix it :(
23:22 < upstream> oh wait
23:22 < theBrettman> ok, so after the socket is closed in node-inspector, how come it doesn't exit?
23:23 < tprice> node-inspector will stay open
23:23 < theBrettman> can I run it again or I have to ctrl+c every time?
23:23 < upstream> TooTallNate: That works, if I also define the function before the module.exports assignment and make sure the require is last
23:23 < tprice> run it again
23:23 < theBrettman> how?
23:24 < tprice> in your app you must ctrl+c
23:24 < tprice> but not node-inspector
23:24 < TooTallNate> upstream: right. remember the golden rule: exports come before require() calls
23:24 < theBrettman> it's actually in socket.io right now
23:24 < upstream> TooTallNate: I'm going to need to refactor all my files as I had been doing it wrong then :)
23:25 < theBrettman> cuz node-inspector is in the background
23:25 < TooTallNate> upstream: that rule is only really necessary when it comes to cyclic dependencies
23:25 < upstream> Ok
23:25 < TooTallNate> upstream: but like NodObjC has a few of them, so I follow that pattern there
23:31 < myndzi> anybody used passport?
23:44 < theBrettman> damn, debugger is hard to use! my page times out while I'm going through it!
23:50 < timeturner> anyone have experience with mongodb
23:50 < timeturner> have some basic questions
23:51 < caaakeeey> timeturner, just ask them
23:51 < timeturner> what is the difference between a compound index and multiple indexes?
23:51 < timeturner> also when is linking appropriate vs creating a collection with an index
23:51 < timeturner> for example each group has infinite posts and a group has: users, posts, created_at, and created_by
23:51 < timeturner> since I can't embed infinite number of ObjectIds (one for each post) in a field in a group, should I add the group name into each post and add an index on that field?
23:53 < etcetera> anyone know of an ORM on top of node-redis?
23:53 < timeturner> node-redis is pretty easy by itself
23:53 < timeturner> I'm not aware of any ORM though
23:54 < etcetera> https://github.com/ServiceStack/ServiceStack.Redis/
23:54 < etcetera> nicer API in c#
23:56 < dcode> hello
23:58 < tprice> hey
--- Log closed Thu Aug 16 00:00:28 2012
