--- Log opened Mon Mar 11 00:00:54 2013
00:01 < clarkk> thank you Sly. I think this module is buggy :(
00:01 < Sly> np
00:16 < MI6> joyent/node: isaacs created branch v0.10.0-release - http://git.io/R5Oaug
00:26 < faceleg> clarkk: agree. many series are incredible and accomplish more than a movie could ever hope to
00:42 < MI6> joyent/node: isaacs v0.10.0-release * 163ca27 : 2013.03.11, Version 0.10.0 (Stable)  * npm: Upgrade to 1.2.14  * core: Ap - http://git.io/3sKc1A
00:43 < Guest66319> a
00:44 < deoxxa> b
00:44 < JamesMGreene> "Error: Command failed: execvp(): No such file or directory"  <-- Huh?
00:44 < deoxxa> JamesMGreene: that's what happens when you try to .spawn() something that doesn't exist
00:44 < deoxxa> JamesMGreene: it can also show up in the build process for a few modules
00:44 < JamesMGreene> mxmlc: /home/travis/build/JamesMGreene/node-flex-sdk/lib/flex_sdk/bin/mxmlc
00:44 < JamesMGreene> mxmlc exists (expecting true): true
00:44 < JamesMGreene> TargetSource: /home/travis/build/JamesMGreene/node-flex-sdk/test/testData/testApp.as
00:44 < JamesMGreene> TargetSource exists (expecting true): true
00:45 < deoxxa> paste code and be happy
00:46 < JamesMGreene> Travis output:  https://travis-ci.org/JamesMGreene/node-flex-sdk/builds/5397896 
00:47 < JamesMGreene> nodeunit tests that die: https://github.com/JamesMGreene/node-flex-sdk/blob/v3.0.1/test/flex_test.js
00:47 < JamesMGreene> oh snap o_O
00:48 < deoxxa> dayum
00:48 < deoxxa> JamesMGreene: does that work locally?
00:48 < JamesMGreene> It works for me on Windows
00:49 < JamesMGreene> but Travis is Linux, of course
00:49 < JamesMGreene> I coded it to work on both, or so I thought
00:49 < deoxxa> it could also be that the binary doesn't run properly
00:49 < deoxxa> like... hrm
00:50 < deoxxa> ok if it's a 32-bit binary running on a purely 64-bit system without 32-bit compatibility libs installed, it can give you the same kind of response
00:50 < deoxxa> same vice versa
00:51 < deoxxa> it's a weird error
00:51 < deoxxa> in the case of incompatible libs, it's actually an error from the linker
00:51 < deoxxa> saying "no such file or directory" in relation to a library that the binary requires
00:51 < deoxxa> JamesMGreene: see if you can build a static binary
00:51 < JamesMGreene> Well, I'm pretty sure it is something wrong with the Adobe Flex SDK that it downloads
00:51 < JamesMGreene> because it passes for Flex v3.0.0 but fails for v3.0.1
00:52 < deoxxa> ahh, yeah
00:52 < JamesMGreene> Saw similar results for other versions
00:52 < JamesMGreene> some pass, some fail
00:52 < deoxxa> JamesMGreene: for funsies, check the output of `ldd /path/to/binary'
00:52 < deoxxa> ldd tells you what libraries the thing is looking for
00:53 < JamesMGreene> If I point `ldd` at a shell script will it trace its dependencies?
00:53 < JamesMGreene> e.g. shell script calls java, etc.
00:54 < deoxxa> not a shell script, no
00:54 < deoxxa> has to be a binary
00:54 < JamesMGreene> Well all of the Flex apps for Linux/Mac are just shell scripts that call Java JARs
00:55 < deoxxa> oh
00:55 < deoxxa> so it's all java?
00:55 < JamesMGreene> I guess so
00:55 < deoxxa> that's... hm
00:55 < deoxxa> ok
00:55 < deoxxa> no idea how you'd go about figuring out what's going on there, sorry
00:55 < JamesMGreene> On Windows (up until the more recent versions of Flash), it has a standalone exe
00:56 < JamesMGreene> More recent versions are .bat scripts that call Java
01:03 < jtomasrl> i have a mobile app that ask to a node server for json files, how can i make so the server just send values that has change and not everything?
01:03 < deoxxa> jtomasrl: i hear using "programming" works really well for that
01:04 < deoxxa> i actually don't know anything else that could do that really
01:04 < sorensen> that was a bit rude
01:04 < jtomasrl> hmm
01:04 < deoxxa> not particularly! i'm highlighting, through the use of facetious statements, the fact that we weren't given enough information to provide a meaningful answer! :D
01:05 < deoxxa> mainly by answering in as detailed a manner as i can while still covering all the points raised in the question and staying within the bounds given
01:05 < deoxxa> this is all based on the fact that i *suck* at reading minds
01:06 < sorensen> whatever makes you feel better
01:07 < jtomasrl> the mobile apps request the server for items, that items are saved internally and ppl can change that items values on the server side, so i need to push those changes to the mobile app internal db, but i dont want to send everything again, so just based on what the user needs
01:08 < sorensen> jtomasrl: you could push just the changed vals, which you'd be able to determine when they are saved on the server
01:08 < sorensen> if your pushing data it would be easier to do, if the client is pulling data it would be harder
01:08 < jtomasrl> sorensen: i can push on the server side, but if the user isnt using the mobile app in that moment, nothing will happend
01:08 < JamesMGreene> I wonder if the Travis VMs for Node.js aren't guaranteed to have Java installed
01:09 < deoxxa> sorensen: are you suggesting that he use "programming"?
01:09  * sorensen sigh..
01:09 < deoxxa> :>
01:10 < deoxxa> jtomasrl: that's an interesting problem - check out how the rails guys were going to approach PATCH requests for json resources
01:10 < jtomasrl> i'll read about it, ty
01:13  * faceleg giggle
01:13 < ningu> are you still v8'ing?
01:13 < faceleg> ningu: only @ night
01:13 < faceleg> but yes. And it is good (getting good)
01:14 < faceleg> good as in I no longer desire to murder the creators
01:14 < ningu> what are you trying to do, anyway?
01:14 < faceleg> I'm the new maintainer of nodegit
01:14 < mscdex> heh
01:14 < ningu> and why does that require knowledge of v8 internals?
01:14 < faceleg> i.e. I want to use a git wrapper module 
01:14 < faceleg> and the rest do not allow me to achieve desired results
01:15 < faceleg> or I plain ole don't like them
01:15 < faceleg> so I dove in and fixed some stuff
01:15 < faceleg> and here we are
01:15 < faceleg> 2 weeks of raging later i hover on the brink of grok
01:15 < ningu> are there bindings with gyp or what?
01:15 < faceleg> thanks to many of you. kisses.
01:15 < faceleg> ningu:  I don't konw what that means. it wraps libgit2, with code written in V8, and is built with node-gyp
01:16 < faceleg> used to be node-waf but I migrated
01:16 < ningu> I see
01:17 < faceleg> mscdex: this is srs business no laughing please
01:17 < ningu> I can't remember the name of the guy who wrote the gyp stuff but he is or was on here often
01:17 < mscdex> nate
01:17 < mscdex> well, node-gyp
01:18 < faceleg> all I know is that migrating from waf to gyp was a goodness
01:18 < ningu> I don't know enough about either to know why gyp is better
01:18 < faceleg> and to bring nodegit up towards first citizen status is must be done
01:18 < faceleg> nodewaf is old
01:18 < faceleg> nodegyp is new
01:18 < faceleg> waht mroe is there in teh world of node.js
01:18 < ningu> yes, but I don't know why gyp is technically better
01:18 < faceleg> no neither
01:18 < faceleg> well actually I do
01:18 < faceleg> nodewaf doesn't have coloured output that is as pretty as nodegyp
01:18 < faceleg> problem?
01:19 < faceleg> ah
01:19 < ningu> however, I've had almost no problems with modules using nodegyp actually compiling, which is pretty nice
01:19 < faceleg> nodegyp allowed me to ditch Make files
01:19 < faceleg> and ./configure
01:19 < faceleg> etc
01:19 < faceleg> OOOOOH
01:19 < faceleg> I could write my isntall script in node
01:19 < faceleg> that was a bonus
01:19 < ningu> in fact I've had almost no issues with installing modules via npm period
01:19 < faceleg> easy for me to detect whether in src (cloned) or npm-installed env and gather deps differently depending
01:20 < faceleg> yes I like it more than nodewaf, says the noob who knew neither, glanced at the existing nodewaf builder, shuddered and reimplemented in gyp
01:21 < faceleg> what does "gyp" mean anyway #lazyweb
01:26 < JamesMGreene> Do shell scripts have any equivalent to Windows batch scripts' "@echo on" functionality? i.e. it echoes every command it runs
01:27 < ningu> I think bash has an option for that
01:27 < ningu> look at shopt
01:28 < ningu> apparently: set -o verbose
01:28 < JamesMGreene> This is a `sh` script, though
01:29 < ningu> ok, but what shell is it?
01:29 < JamesMGreene> (and not mine)
01:29 < ningu> there is no plain 'sh'
01:29 < JamesMGreene> #!/bin/sh
01:29 < ningu> it could be dash, bash, ...
01:29 < JamesMGreene> oh
01:29 < JamesMGreene> well, whatever Travis CI uses
01:29 < ningu> yes, there is a /bin/sh but it must actually be something
01:29 < ningu> try sh --version
01:30 < JamesMGreene> Looks like Bash to me but I'll add a version check to my Travis config
01:30 < ningu> if the script begins #!/bin/sh you generally make conservative assumptions -- write only something compatible with lowest common denominator
01:31 < ningu> on OS X for example, though, /bin/sh is actually bash
01:35 < JamesMGreene> $ sh --version
01:35 < JamesMGreene> sh: 0: Illegal option --
01:35 < JamesMGreene> The command "sh --version" failed and exited with 2 during before_script.
01:35 < JamesMGreene> Your build has been stopped.
01:35 < JamesMGreene> wtf :-\
01:36 < ningu> hehe
01:36 < ningu> you could try sh -v or sh -V
01:42 < faceleg> lol
01:47 < awesomeSkins> Heello?
01:48 < awesomeSkins> Why isn't there anyone talking? .-. There's 930 people here!
01:49 < awesomeSkins> :|
01:49 < awesomeSkins> :[
01:51 < awesomeSkins> I feel like… I'm missing something ._.
01:51 < echo> 930 separate lives doing mostly separate things, sharing the consolidated idling in yet another irc room ;)
01:52 < awesomeSkins> Maaan :\
01:53 < JamesMGreene> It's a Sunday night...? :)
01:53 < JamesMGreene> (depending on your timezone)
01:54 < deoxxa> monday afternoon here!
01:54 < awesomeSkins> Seriously? Where the heck do you live?
01:55 < deoxxa> australia, yo
01:55 < echo> I'm in Houston, TX and it's 9PM on a Sunday :)
01:55 < JamesMGreene> Wacky that you connect through an Oslo server :-o
01:55 < JamesMGreene> (deoxxa)
01:55 < awesomeSkins> Ooooh… yo.
01:55 < fusiongrokker> this has got to be a bug: http://jsfiddle.net/atuttle/LWCCQ/
01:56 < echo> Daylight savings time?
01:56 < fusiongrokker> ahj
01:56 < fusiongrokker> fun
01:56 < fusiongrokker> of course I need to do date math on DST switch day
01:56 < fusiongrokker> thanks
01:56 < echo> :D
01:57 < fusiongrokker> confirmed: initializing the moment with a date from a few days ago correctly subtracts 24 hours
01:57 < fusiongrokker> as much as I enjoyed the sunlight today
01:58 < fusiongrokker> what a pain in the arse
01:58 < mdel> hey all - im using socket io and I would like to maintain shared data between users based on an ID parameter on the page (not session)
01:58 < awesomeSkins> DST is so pointless
01:59 < faceleg> yeah monday too. kill me
01:59 < faceleg> deoxxa: waht part of your horrible country do you live in?
01:59 < mdel> what would be the proper approach here - do I need a database?
01:59 < deoxxa> faceleg: the least horrible part - melbourne
01:59 < faceleg> deoxxa: oooo I've heard that is true 
01:59 < faceleg> (that it's the least horrible part)
01:59 < deoxxa> yep!
01:59 < faceleg> deoxxa: I had an offer to move there last year
02:00 < deoxxa> i like melbourne, even if it's a bit small
02:00 < deoxxa> after living in japan for a while, everything here just seems like a small town
02:01 < mdel> hmm, redis looks like what I'm after
02:04 < echo> So far, I've loved Redis. I can't wait until it's clustering features are implemented.
02:05 < faceleg> yes I lived in Shanghai/Hong Kong, when I came back to NZ I felt like I was in a ghost town
02:06 < mdel> I really want to subscribe my clients to a particular channel... is there some way to dynamically create and subscribe to one on the server?
02:07 < mdel> so the server emits the data (using socket.io) to the proper clients based on some id
02:07 < deoxxa> faceleg: it's kind of boring, but comforting at the same time, right?
02:08 < ddod> mdel, you know about socket.io rooms, right?
02:08 < deoxxa> i found that when i got back to australia last time (a month and a bit back), i was like "oh this is kind of cool"
02:08 < ddod> io.sockets.in(room)
02:09 < ddod> or something like that
02:09 < mdel> ddod, I'm quite new to socket, and I've seen that
02:09 < ddod> i don't quite understand what you're asking but it sounds like rooms are what you're looking for
02:09 < mdel> i guess I'm curious about where to store the data for each room 
02:09 < ddod> depends on your app
02:10 < mdel> right, yeah
02:10 < ddod> you can store info on the socket objects
02:10 < ddod> but it's more reliable to have the clients send their info on each message
02:10 < ddod> in case they disconnect
02:10 < ddod> which happens constantly with socket.io
02:10 < fusiongrokker> so here's an odd question... why does my UTC offset change with DST? Does UTC/GMT not observe DST?
02:11 < mdel> yeah that's exactly what I'll need to do anyway - the client data is essentially a bunch of on/off switches that need to sync across all clients in the room
02:11 < deoxxa> fusiongrokker: UTC has no DST, GMT isn't guaranteed not to
02:11 < Lorentz> dst's really based on local time
02:12 < Lorentz> frankly it's a pain in the butt
02:12 < mdel> ddod, thanks for pointing me at rooms 
02:12 < Lorentz> stupid time zones and stuff
02:13 < ddod> mdel, no problem let me know if i can help with any other socket stuff
02:13 < ddod> i'm doing a big sockets.io project at the moment
02:13 < mdel> ddod, I'll try and not make you regret saying that :)
02:13 < ddod> you can see what i'm doing clientside with it here http://deepship.com/audio
02:14 < awesomeSkins> Hmm, I feel like getting to know some people, since this is my first time here. What kind of stuff does everyone do?
02:14 < ddod> node stuff, you know
02:14 < awesomeSkins> No way :o
02:14 < faceleg> deoxxa: also you don't have to work with another language
02:15 < mdel> ddod, this is very similar to an idea I was toying with a month or so ago... very cool
02:15 < faceleg> you can actually speak without thinking again
02:15 < deoxxa> faceleg: ha yeah
02:15 < deoxxa> faceleg: last year i went to england right, and up until then i'd never been to another country where people speak english - it kind of freaked me out
02:16 < awesomeSkins> I'm from England, and I freak myself out sometimes too ._.
02:16 < deoxxa> faceleg: like every other time i'd been overseas, i'd had to mentally prepare myself like "ok, not going to be able to communicate well, going to talk in hand gestures and english nouns". but then i got to england and it was like "wait, people here actually speak better english than me, technically..."
02:16 < faceleg> deoxxa: hilarious
02:16 < deoxxa> i didn't know what to do
02:16 < deoxxa> haha
02:16 < faceleg> I've not done this yet - been to an eng speaking country
02:16 < deoxxa> when you're "that dumb white guy", it's easy to get away with mistakes
02:16 < faceleg> when I went to korea I ended up just pissing them all off by tyring to speak chin at them
02:16 < faceleg> yeah lol
02:17 < deoxxa> haha
02:17 < ddod> i guess you didn't go to glasgow
02:17 < faceleg> lol
02:17 < deoxxa> ddod: correct! i was in london the whole time, lol
02:17 < ddod> i lived in scotland for years and i never understood glasgies
02:27 < faceleg> man I love IE
02:27 < awesomeSkins> I pretty much boycott it.
02:27  * deoxxa tilts head
02:28 -!- mode/#Node.js [+o ryah] by ChanServ
02:28 < faceleg> is there a way to load a script ONLY IF !IE?
02:28 < faceleg> do conditional comments work that way
02:28 <@isaacs> faceleg: yes, you can do that with conditional comments
02:28 < faceleg> thank the lord in heaven
02:28 < faceleg> <![if !IE]>
02:28 < faceleg> render site
02:28 < faceleg> <![endif]>
02:28 < faceleg> done
02:28 <@isaacs> <!--[if !IE]><!-->
02:28 <@isaacs> <p>You are not using Internet Explorer.</p>
02:28 <@isaacs> <!--<![endif]-->
02:29 <@isaacs> faceleg: <![if !IE]> isn't valid html, technically speaking
02:29 < deoxxa> <p>You are not using Internet Explorer. HAPPY DAY!</p>
02:29 <@isaacs> faceleg: comments must have <!-- dashes
02:29 < fusiongrokker> ^*&^&^%$#%$@#!!!!!!!
02:29 < fusiongrokker> I've been fighting date math for hours now, and it all comes back to 1 missing parseInt
02:29 < faceleg> isaacs: but but http://www.javascriptkit.com/howto/cc2.shtml
02:29 < mdel> :(
02:29 < faceleg> the internet
02:30 < faceleg> fusiongrokker: HAHAHAH!
02:30 < faceleg> WELCOME TO PROGRAMMING HAVE A NICE DAY
02:30 < fusiongrokker> srsly
02:31 < faceleg> I was deadly serious
02:32 < deoxxa> isaacs: streams2 in the browser - yes? no?
02:32 <@isaacs> deoxxa: MAKE THIS HAPPEN!
02:32 <@isaacs> deoxxa: you'll have to shim process.nextTick
02:32 < deoxxa> cool
02:32 < deoxxa> i want to use pillion in the browser
02:32 <@isaacs> deoxxa: other than that, it shouldn't be too rough
02:32 < deoxxa> for happiness
02:32 <@isaacs> deoxxa: it's basically just javascript stuff
02:32 < deoxxa> yeah, i've had a quick glance over things
02:33 < deoxxa> didn't see anything too tricky
02:33  * deoxxa hacks
02:33 <@isaacs> deoxxa: you should browserify readable-stream
02:33 < deoxxa> i've got no idea how browserify works
02:35 < samholmes> In jade, how do I pass specific locals to a included file?
02:41 < Sly> deoxxa: https://lh4.googleusercontent.com/-Zj-6FYTi0xQ/UT07XhAYzyI/AAAAAAACkT0/Yc_-wKGi1ZY/w497-h373/13628636620568.gif
02:41 < Sly> You're supposed to know how everything works! God!
02:41 < deoxxa> lol
02:42 < samholmes> In jade, how do I pass specific locals to a included file?
02:54 < polotek> isaacs: hey, do you know about the perf issue with using res.end(data)?
02:55 < tjfontaine> is it an issue on github?
03:05 < polotek> tjfontaine: I haven't looked yet
03:09 < polotek> so many issues. it would be impossible to find if it was there
03:15 <@isaacs> polotek: huh?
03:15 <@isaacs> polotek: what's the issue?
03:16 <@isaacs> polotek: also, if you have problems finding an issue, just go ahead and post another one.  yes, dupes suck, but if you've made an honest effort at finding it, and still can't, then your karma is clear.  if it is a dupe, someone will eventually find it
03:16 < polotek> The short version is that doing res.end(data) instead of res.write(data); res.end()
03:17 <@isaacs> polotek: yeah
03:17 < polotek> causes some serious slowdown that is not obvious
03:17 <@isaacs> polotek: that's weird.
03:17 <@isaacs> polotek: what version of node?
03:17 < polotek> 0.10.0 but the place I got it from says it happens in 0.8.x as wel
03:17 < polotek> well
03:17 <@isaacs> wild
03:17 < polotek> https://gist.github.com/jdpaton/9f20ff0b13e0cc20017a
03:18 < polotek> the benchmark is trivial. I've been using siege which I like a bit better
03:18 < polotek> but I've confirmed it's almost twice as slow with just that simple change
03:19 <@isaacs> wrk works for me
03:21 < polotek> maybe the problem is the shared buffer in the example?
03:26 < teadict> well, some time passed since I used express... has any other mvc fw come along that is preferrable? also accepting sugestions for the ones that do mvc on the side but focus on other new shiny things 
03:26 < polotek> isaacs: here's my output https://gist.github.com/polotek/c1b4a7bee5659d73af74
03:26 < polotek> teadict: express isn't MVC.
03:26 < polotek> see geddy
03:26 < teadict> polotek: but does it
03:27 < teadict> there's no MVC though in JS server-client applications, I know
03:27 < teadict> but y'know what I meant
03:27 < substack> do you really need "a thing that does MVC" on your behalf?
03:28 < substack> teadict: perhaps enumerating your specific requirements will help to choose the most applicable libraries
03:28 < teadict> substack: kinda, because of the rest of the dev team, who come from php
03:29 < teadict> substack: no specifics.. so I guess I could stick to express
03:29 < substack> mvc too often seems like a solution in search of a problem
03:29 < teadict> but some do so nice things, automated magics
03:29 < teadict> oh, we're going to use Angular, so maybe there's one that talks nicely with it...
03:29 < polotek> teadict: geddy
03:29 < deoxxa> there's plenty of "MVC" in javascript applications
03:29 < polotek> it's closer to something like rails (still simpler though)
03:29 < deoxxa> the M is your data layer, the V is your view layer and the C is just the rest of your crap
03:29 < teadict> C for Crap
03:30 < teadict> polotek: I want something more node-ish
03:30 < substack> I mostly just pick and choose tiny narrowly-defined modules
03:30 < polotek> teadict: my understanding is that angular doesn't have "Models"
03:30 < polotek> you just grab data
03:30 < deoxxa> exactly
03:30 < deoxxa> the "C" is where everything that doesn't fit gets dumped
03:30 < deoxxa> (traditionally)
03:30 < deoxxa> (except in rails, where it all ends up in "M" somehow)
03:30 < polotek> teadict: then you don't want MVC
03:30 < teadict> let's say I don't
03:30 < polotek> no offense, but you can't just start throwing out a bunch of buzzwords ;)
03:30 <@Nexxy> MVC, BGP, FTP OCD
03:31 < teadict> OFFENSE TAKEN, meet me outside
03:31  * Nexxy starts an acronym rap
03:31 <@Nexxy> HTTTP LCD U NO ME
03:31 < substack> teadict: this is what the websites I build look like lately https://github.com/substack/browserify-website/blob/master/server.js https://github.com/substack/substack.net/blob/master/server.js
03:31 < substack> those are both simple glog blogs that do some other stuff too
03:32 < substack> then I just hook some api endpoints up with the browser code over some streams and I'm done
03:32 < substack> the best tools for the job are highly contingent on the problem at hand
03:33 < teadict> can you do REST to that?
03:33 < substack> teadict: you say that as if "REST" is a thing that you do
03:33 < teadict> true, I mean...
03:33 < substack> can you elaborate?
03:33 < substack> you can speak http if that is what you mean
03:33 < teadict> how do you organize the server app? mine will be fairly mvc-ish
03:34 < polotek> the problem with making everything highly domain specific is that you can't have a conversation with somebody without asking them for mountains of detail
03:34 < polotek> the point of emerging standards so we don't have to do this every time
03:34 < teadict> there's angularjs's ajax rest request to my routes which talk to mysql/nosql (dunno yet)
03:34 < substack> polotek: I think modules that stick to the idioms in core can avoid a lot of that problem
03:34 < substack> and when the api surface area is small enough it's pretty obvious what's going on even if you're not very familiar with the libraries being used
03:35 < polotek> I agree
03:35 < polotek> but once you specify those patterns, they should coalesce into a thing people are familiar with
03:35 <@isaacs> polotek: https://gist.github.com/isaacs/5131707
03:35 < polotek> that is the point
03:36 <@isaacs> polotek: i'm seeing end(chunk) is slightly faster than write(chunk);end()
03:36 < garthk> Bah.
03:36 <@isaacs> polotek: oh!  you're doing writeHead() first
03:36 < garthk> Tried regexp splitting to parse this simple XML faster. Ended up slower once I'd got to the right level of detail.
03:36 <@isaacs> polotek: one sec.
03:36 < garthk> Tried pegjs, but only matched node-expat speed.
03:37 < teadict> substack: I understand the node server part is simple, but I need to develop an app then... substack.net is a simple blog like you said, you don't more than that main.js; I suspect I'll need something that gives me more automation
03:37 < teadict> substack: but I don't want to end up on express again unnecessarily
03:37 < teadict> substack: but I don't know yet how to program all the needed stuff to make a common app work either
03:37 < substack> teadict: what will you need specifically?
03:38 < garthk> Tried node-libxml bindings to libxml2, which hits 27MB/s on my Mac… but still only 13MB/s on my Ubuntu boxes, when it doesn't fail with "Killed".
03:38 < substack> saying "an app" is kind of a mysterious answer
03:38 < teadict> substack: rest and routing I guess it's what apps are nowadays
03:38 < garthk> So, anyone got a really fast XML parser? 
03:38 < substack> but what specifically about those
03:38 <@isaacs> polotek: yep, same results if i do writeHead() https://gist.github.com/isaacs/5131707
03:38 < polotek> substack: no it isn't
03:38 < polotek> there is a ton of stuff that is common across "apps"
03:38 < polotek> that is the stuff people want standardized
03:39 <@isaacs> polotek: unhook from substack :)
03:39 <@isaacs> polotek: come back to me :)
03:39 < teadict> substack: what do you wnat to know specifically?
03:39 < garthk> Looks like gzmask tried node bindings for rapidxml a couple of years ago. Rapidxml thinks it can do 100MB/s, which would be nice. 
03:40 < polotek> isaacs: I'm always here for you man
03:40 < substack> teadict: I'm more trying to get you to be more specific about your problem because that is how I go about chosing solutions
03:40 <@isaacs> polotek: https://gist.github.com/isaacs/5131707
03:40 < teadict> substack: I don' know at what kind of necessities you are referring to
03:40 < polotek> but I don't know what to tell you
03:40 <@isaacs> polotek: so, i'm getting opposite results.
03:40 < polotek> there's some difference in our methods
03:40 < polotek> how does your bench module work? what's doing the requests?
03:40 <@isaacs> polotek: wrk
03:40 <@isaacs> polotek: it runs wrk in a child proc
03:40 < substack> teadict: like in what concrete ways does "doing REST" diverge from merely "speaking http" that the core http server gives you already
03:40 < teadict> substack: ok.. well, we'll use angular, and the app will be fully async of course.. 
03:41 < teadict> substack: I guess none...
03:41 < garthk> (Meanwhile, isaacs, dominictarr was saying I should report bugs on any Node module which claims to do streams but doesn't emit 'data' events. That'd include your fstream and sax modules, which brings me back to my XML speed parsing questions. Any recommendations?
03:42 < substack> garthk: sax isn't meant to be streaming as such but you can use github.com/substack/node-trumpet which sits on top of sax
03:42 < substack> or http://github.com/substack/hyperstream that sits on top of trumpet
03:42 < substack> layering!
03:42 < garthk> substack: yaay, layers: now, how fast is it? :)
03:43 < garthk> Actually, I can test that. Lazy. Sorry.
03:43 < polotek> isaacs: what's wrk? not an npm module
03:43 < teadict> substack: let's do a use case.. I'm used to create a route in a fw, then instantiate some models which persist the data and return a JSON string, then let the client-js do everythign else.. nothing fancy.. how do you do all those if you don't have something like express in the middle which organizes you?
03:43 <@isaacs> polotek: wrk is tools/wrk/wrk
03:43 <@isaacs> polotek: the same wrk your'e using
03:43 <@isaacs> i assume
03:44 <@isaacs> polotek: https://github.com/joyent/node/tree/v0.10/tools/wrk
03:44 < substack> polotek, teadict: I think the fundamental disconnect here is that we are approaching the same problems from completely different ends.
03:44 < substack> this would be interesting to explore in a blog post
03:44 < polotek> substack: yeah I know. that's what I'm talking about
03:45 < substack> hah this reminds me of a dialectic from ancient history
03:45 < polotek> if you have to ask how REST is different from just "speaking http", then you've clearly got your own thing going.
03:45 < polotek> which is my actual point
03:45 < polotek> I think it's cool you have a different way of looking at things
03:45 < polotek> but until that way becomes familiar pattern to lots of people
03:45 < polotek> you will have to ask them "what do you need specifically"
03:46 < polotek> every single time
03:46 < teadict> what? you're dizzing me publicly? are you THAT bored?
03:46 <@isaacs> polotek: yeah, i can reproduce what you'er seeing with ex2
03:46 < teadict> I started asking what mvc fws are outhere nowadays..
03:46 <@isaacs> polotek: i mean, wrk doesn't like it
03:47 <@isaacs> polotek: ahhhhh...
03:47 < polotek> isaacs: ah, yeah I'm not using wrk. I'm using siege.
03:47 <@isaacs> polotek: it's sometimes spinning randomly on ex1, too
03:48 < substack> it is like how the romans prided themselves on the pragmatism of focusing on the effect and the etruscans prided themselves on the power of looking into the cause
03:49 < teadict> so because I didn't used your approach to my problem I'm forced to watch it your way? is that what you're saying?
03:49 < garthk> Ok, sax is ~2MB/s on this CPU. So, not a contender. Dang.
03:49 <@isaacs> polotek: ab is showing that ex2 is faster.
03:49 < zivester> is runnable.com new? how am I just discovering this?
03:49 <@isaacs> polotek: i'm growing suspicious of the benchmark methodology!!
03:49 < polotek> isaacs: ab sucks in my experience. unreliable
03:49 < garthk> Picking kids up. 
03:49 <@isaacs> yeah, but i just ran it 10 times
03:49 <@isaacs> for 10s intervals each time
03:50 <@isaacs> ex1 is slower.  ex2 is faster.  nothing hung ever.
03:50 < polotek> how much faster?
03:50 <@isaacs> siege and wrk use some of the same libs.  and i've seen wrk get into weird deadlocks on osx before.  i an suspicious of the bench tool.
03:50 <@isaacs> polotek: 692.77 vs 859.95
03:51 < substack> teadict: It's more that the solution that resonates most is due in large part to which habit of thought is most familiar
03:51 <@isaacs> polotek: because it's sending all in one write()
03:51 <@isaacs> gotta run for a bit.
03:51 <@isaacs> post an issue with your findings.
03:51 < polotek> will do
03:51 <@isaacs> polotek: it's especially informative if you don't run wrk in a loop like that and hide the output
03:52 < polotek> the original gist wasn't mine
03:52 <@isaacs> polotek: you'll see it get 2 or three iterations in, and just stop.
03:52 <@isaacs> polotek: yeah
03:52 <@isaacs> polotek: also, fwiw, i don't really trust siege, either.
03:52 <@isaacs> polotek: it's got too many features, i always feel likei 'm doing it wrong.
03:52 <@isaacs> and it's really a "can i bring your site down" app rather than a "how fast does your server go" app
03:52 < polotek> load producers are about as reliable as say actual traffic
03:52 < teadict> substack: which is why I tend to use mvc for web apps, but if I were to stop doing that I wouldn't come here and bother you asking how, that's why I just asked what new mvc fws are now
03:53 <@isaacs> polotek: right, and for testing yammer, that totally makes sense.
03:53 < teadict> substack: what other approaches to webapps are besides mvc?
03:53 <@isaacs> polotek: but as a "slam this one url and get q/s", as an isolated measure of a server's response, it's not ideal.
03:53 <@isaacs> polotek: integration test vs unit test.
03:53 < teadict> substack: normal webapps, with models and lists and searches and all the crap people use
03:53 <@isaacs> anyway, gotta run.
03:53  * isaacs &
03:53 < polotek> isaacs: sure
04:03 < substack> teadict: I just write libraries or glue code that stitches libraries together I guess
04:04 < supersym> teadict: depends if you find MVVM the same as MVC
04:05 < substack> I wrote a rails app once and that project went well but something about that approach felt really counter-intuitive at a very fundamental level
04:07 < Sly> Nexxy: https://lh4.googleusercontent.com/-Upo1QPi2et0/UT1W0xZvuJI/AAAAAAACkbs/wpKyzfE3BB8/w497-h373/479720_627685367258314_2047116287_n.jpg
04:09 < substack> it probably gets into a point about epistemology
04:09 < supersym> dude...
04:09 < substack> I like to understand things by focusing on how all the individual parts work in an isolated fashion
04:09 < Havvy> Why the spider?
04:09 < substack> others prefer to understand systems by looking at how the parts fit into the whole
04:09 < aslant> "substack: it is like how the romans prided themselves on the pragmatism of focusing on the effect and the etruscans prided themselves on the power of looking into the cause"  <---my fav irc comment in a while thank you, except that it's 4am here, I've got far too much to do and I'm now reading up on the Etruscans
04:20 < JamesMGreene> Soooooo.... wtf?
04:21 < JamesMGreene> (big paste coming, sorry)
04:21 < JamesMGreene> Platform: linux
04:21 < JamesMGreene> mxmlc: /home/travis/build/JamesMGreene/node-flex-sdk/lib/flex_sdk/bin/mxmlc
04:21 < JamesMGreene> mxmlc exists (expecting true): true
04:21 < JamesMGreene> TargetSource: /home/travis/build/JamesMGreene/node-flex-sdk/test/testData/testApp.as
04:21 < JamesMGreene> TargetSource exists (expecting true): true
04:21 < JamesMGreene> Process 1743 attached
04:21 < JamesMGreene> [pid  1743] execve("/home/travis/build/JamesMGreene/node-flex-sdk/lib/flex_sdk/bin/mxmlc", ["/home/travis/build/JamesMGreene/"..., "+configname=air", "/home/travis/build/JamesMGreene/"...], [/* 194 vars */]) = -1 ENOENT (No such file or directory)
04:21 < JamesMGreene> Process 1743 detached
04:21 < polotek> JamesMGreene: gists are good for that
04:21 < polotek> substack: I think what you're saying makes total sense
04:21 < JamesMGreene> good call, sorry
04:21 < polotek> the only thing I'm suggesting is that you package it better
04:22 < polotek> substack: it's not obvious how a person needs to change the way they think in order to use your method
04:22 < polotek> I've thought about this a bit
04:23 < polotek> Because the rails way of doing things bothers me too
04:23 < polotek> Rails takes a bunch of solutions and packages them together
04:23 < polotek> It takes the "glue" out of your hands and tries to only leave the holes where your domain logic goes
04:23 < polotek> Ember works on this same principle
04:24 < polotek> If this is the way you think, where you don't really care about the details of the machinery
04:24 < deoxxa> JamesMGreene: is "mxmlc" an actual binary file?
04:24 < polotek> …then this might be an attractive approach for you
04:24 < deoxxa> JamesMGreene: if it's a shell file or something, you'll need to spawn /bin/sh with the shell file as an argument
04:24 < JamesMGreene> yes
04:24 < JamesMGreene> Oh
04:24 < JamesMGreene> It's a shell script
04:24 < JamesMGreene> Hmm
04:24 < polotek> But IMO in any app, there is some subset of the functionality that you really want to control
04:24 < polotek> it's the "bread and butter" and you don't want a bunch of other code dictating how it goes
04:24 < JamesMGreene> Worked in my previous version with the previous version of mxmlc
04:25 < polotek> rails doesn't let you break down part of the framework for when you need to work on that one part
04:25 < polotek> so it's starts to feel limiting
04:25 < polotek> substack: to the uninitiated, your philosophy has the opposite problem
04:26 < polotek> you have to examine every aspect of your app and decide what tools to use and how to strap them together
04:26 < polotek> even the parts you really don't care about and just want to grab an integrated solution that already works
04:26 < supersym> polotek hits teh nail
04:27 < shesek> <polotek> the only thing I'm suggesting is that you package it better
04:27 < supersym> every program/lib/api/language has a learning curve, you only get quicker (more smart) in looking up names
04:27 < shesek> what's wrong with the way he's packaging his libs?
04:27 < shesek> he evens adds cool drawings
04:27 < supersym> :D
04:27 < JamesMGreene> true that :)
04:28 < polotek> shesek: sorry, I don't mean his code packages. I mean his the way he presents his app-building philosophy
04:28 < shesek> ah, right
04:30 < shesek> it seems like the nodejs ecosystem really embraces the one-lib-does-one-thing-and-does-it-well philosophy, which I really like
04:31 < shesek> I hate huge libraries that try to do everything
04:31 < Havvy> shesek: Yeah. The Node ecosystem is highly useful because of that.
04:31 < shesek> I much prefer that approach; everyone writes libs that does small things, than write more libs on top of the previous ones
04:32 < shesek> I didn't see anything like that in other ecosystem; in many of them, it seems like everyone are a lone cowboy trying to re-invent everything
04:33 < Havvy> In Node it is *really* easy to take some modules, package them together, and distribute them seperately from the rest of what you are working on.
04:34 < polotek> Yeah it's great, but it's not the whole story
04:34 < polotek> think about this in unix
04:34 < polotek> there are lots of small awesome utilities
04:34 < polotek> but have you ever tried to strap them together into something really nontrivial?
04:35 < shesek> I do, all the time
04:35 < polotek> knowing which tools to reach for, how they work exactly and how to maintain state going through them is difficult
04:35 < Havvy> I've tried strapping them together into something trivial and had difficulty.
04:35 < JamesMGreene> deoxxa I thought execve is supposed to work with scripts
04:35 < polotek> shesek: certainly if you do it a lot, you can get very good at it
04:35 < polotek> but it takes practice and you need to be familiar with the tools
04:35 < shesek> polotek, well, finding the right tool is always hard, and definitely harder when you have lots of choices
04:35 < Havvy> Strings in Strings out was a nice interface in the 1970s. JSON in JSON out is a nice interface in the 2010.
04:35 < Havvy> *2010s.
04:35 < JamesMGreene> deoxxa i.e. with a defined interpreter line
04:36 < polotek> like the 20,000+ modules in npm :)
04:36 < supersym> mastering a language = knowing the libraries, same goes for distros/frameworks like node.js
04:36 < aslant> Here's what I think the is the crux of the architectural problem of sizeable web apps - often you'll have one http server and one big fat model. You want lots of small parts to handle all of the different types of requests, but working out to do this with one entry point and one model is not easy.
04:36 < shesek> but when some package does something really well, and doesn't try to do too much, its can become the de-facto way of doing something in nodejs
04:36 < supersym> means any system I worked with so far spent a lot, really a lot, in knowing the market
04:37 < deoxxa> JamesMGreene: hrm, i'm not quite sure... that might be the case.
04:38 < aslant> It's a routing issue I think
04:41 < freeside> moo.
04:42 < Havvy> If you think you need more than one http webserver, then go create another web server.
04:43 < aslant> Havvy: that is absolutely not what I'm saying
04:43 < Havvy> And leave the high level routing logic to nginx or whatever you use.
04:43 < JamesMGreene> The scripts are both identical, as are the "jvm.config" files used for launching the Java JAR
04:43 < JamesMGreene> deoxxa ^
04:43 < JamesMGreene> one works, one doesn't
04:45 < JamesMGreene> both are 755 chmod
04:54 < mdel> is there an equivalent of socket.get on the client?
05:01 < mass_alvaro> mddl use the socket.io library
05:01 < mass_alvaro> mddl use the socket.io library
05:01 < mdel> that lib is already loaded, but socket.get is undefined
05:01 < mass_alvaro> jeez sorry just got a new macbook keys are a little funky
05:02 < sorensen> mass_alvaro: agreed
05:02 < mdel> no problem, just got a new thinkpad and im not used to it either
05:02 < sorensen> the cmd / control i always switch
05:02 < mdel> (keyboard is amazing though)
05:02 < mass_alvaro> i always use macs, i just moved from an 11" air to the 13" retina. I love it. Way better for development
05:03 < ddod> mdel what are you trying to do?
05:03 < deoxxa> mass_alvaro: i've been considering doing the same (except from a 13" air to a 13" retina) - what's the main difference you've seen?
05:03 < mdel> ddod, actually I was doing something silly and trying to emit a value to the server from the client... but I already have that value on the server since I've socket.set it
05:04 < mdel> now on the server, socket.get is throwing an error
05:04 < ddod> i dont think you should use socket.set really
05:04 < mass_alvaro> deoxxa for me the resolution. I code / watch a screen cast /  have an open brower at the same time… not easy on the 11" air
05:04 < ddod> like i was saying earlier, sockets disconnect pretty frequently
05:04 < ddod> and all the info you set on them will be lost
05:04 < mass_alvaro> this thing does 1680x1050
05:05 < mdel> ddod, hmm, do I need a database then to store simple values per-client?
05:05 < mass_alvaro> mddl why are u using a socket.get  anyways?
05:06 < ddod> you can keep everything in memory
05:06 < ddod> no need for much of a database
05:06 < mass_alvaro> ddod agreed
05:06 < mdel> just throw values in a hash or something on the server? that would work
05:06 < ddod> it really depends on what you're trying to do. like it sounds like the clients could store all their info and just keep sending it over
05:06 < mass_alvaro> its like the client is asking the server on the clients own info.
05:07 < ddod> if you give us a but more of a description of the goal, someone could prob give you a recommendation
05:07 < ddod> bit*
05:07 < mdel> yeah, I'm not giving much info
05:07 < mdel> let me think a min and I'll get back to you if necessary - thanks :)
05:08 < mass_alvaro> deoxxa this macbook pro retina 13" doesn't weigh much more than the 11" air, and it has a smaller footprint than the 13" air. 
05:08 < mass_alvaro> Why do people ask for help but are vague on the details
05:08 < ddod> i know i'm typically embarrassed about what i'm trying to achieve 
05:08 < deoxxa> mass_alvaro: interesting! i thought it'd be a lot heavier
05:08 < deoxxa> mass_alvaro: what's the battery life like?
05:09 < mdel> I recognized I was being vague, I'm just a bit tired atm
05:09 < mass_alvaro> it claims almost 7 hours if its not doing much. Im syncing my old stuff over my wifi so its showing 3
05:09 < ddod> mdel it sounds a bit like you're making things a bit more complicated than they need to be
05:10 < mass_alvaro> deoxxa what I did was get the original version. Its cheaper than the current, but its a 2.5 i5 vs a 2.6 i7 i think i only write web apps so its ok for me
05:10 < mass_alvaro> it came up to 1500
05:10 < deoxxa> nice
05:10 < deoxxa> i get about 5 hours of moderate use on the air
05:11 < deoxxa> take that down to ~4 if i have my external drive plugged in
05:11 < mdel> ddod, I have a few values that get sent to the server when a client performs an action and the server processes those values and emits the result to all clients
05:11 < mass_alvaro> My 11" i got about 4 1/2 at best. I was on a flight from LA to NYC last week It made it to about 4 with no wifi
05:11 < ddod> how many clients are we talking
05:11 < mdel> ddod, I just want to use those values again on the server when a client performs a second action
05:11 < mdel> to re-emit the result
05:11 < mdel> like 5 max
05:12 < ddod> how often are the clients doing these actions
05:12 < ddod> like is it in the context of 30 seconds or will people be coming back the next day
05:12 < mass_alvaro> You know what's really annoying? the fact that npm (and bowser for that matter) doesn't have a central cache. You end up downloading the same packages 100 times
05:12 < mdel> not very often, once every 5-10 minutes over the course of an hour or so
05:13 < ddod> i think you should generate a uuid on the clientside
05:13 < deoxxa> mass_alvaro: npm has ~/.npm
05:13 < ddod> socket.emit('parsingindicatorofsomesort', uuid, actions)
05:13 < deoxxa> mass_alvaro: npm will just do head requests to the tarballs themselves and make sure they're up to date
05:13 < ddod> then have a users or actions array
05:13 < ddod> on the server
05:13 < mdel> ddod, yeah, that makes sense (and I already have a uuid too)
05:13 < ddod> of { uuid: XXXXX, actions [] }
05:14 < mass_alvaro> deoxxa yea it caches to install.. but i mean dependencies will install into the npm_modules of each package you download
05:14 < deoxxa> oh
05:14 < deoxxa> that's by design :)
05:14 < ddod> and then match the uuid each incoming message
05:14 < mdel> ddod, that makes perfect sense, and yes I was overcomplicating things :)
05:14 < mass_alvaro> yea but if I used a lot of differing projects i don't need connect or node-redis installed a ton of times
05:15 < deoxxa> mass_alvaro: you could hack npm to do symlinks instead :P
05:15 < mass_alvaro> I should figure that out
05:16 < mdel> on the topic of laptops - I used to be a mac loyal, but I prefer running Arch... if you want linux, the current Thinkpads are spectacular
05:16 < samholmes> Is there a way to create closures in Jade?
05:16 < samholmes> I'm trying to define a set of variables for an include, but I don't want scope seeping out
05:17 < samholmes> in other words I want to define vars for a specific include
05:17 < mass_alvaro> i don't think i've seriously used linux since like red hat 7
05:17 < mass_alvaro> maybe the original ubuntus
05:18 < mass_alvaro> i really really really needed POSIX + popular aps
05:18 < mass_alvaro> apps*
05:18 < mdel> i just got sick of macports and brew, as awesome as they both are
05:19 < mass_alvaro> interesting. in building this new computer today i only used homebrew for nginx, mongodb and wget
05:19 < mass_alvaro> so much stuff is on the cloud and i pretty much killed my habit of installing stuff i don't use
05:21 < mass_alvaro> ok peoples goodnite
05:21 < mdel> night :)
05:25 < JamesMGreene> deoxxa https://api.travis-ci.org/jobs/5401283/log.txt?deansi=true Search for "Process 1722 attached". Any ideas why it is accessing so many files?
05:26 < samholmes> How does jade's variables scope work?
05:36 < gildean> samholmes: what do you mean?
05:36 < samholmes> gildean: if I define variables in Jade, what's the scope of these variables for included files or other parts of my jade template?
05:37 < ningu> they will be visible in the included files
05:37 < samholmes> For example, I might want to include a template, but that template needs a few locals defined. If I define them, then would they be available to _all_ parts of my template, not just the include. Is there a way to add a scope?
05:37 < ningu> I don't think you can pass parameters to included templates
05:38 < ningu> you can to mixins
05:38 < sorensen> you can
05:38 < ningu> can pass params or can define a scope?
05:38 < sorensen> if you did something like: `- var foo = 1`
05:38 < sorensen> and then your include
05:38 < sorensen> foo would be accessable in the include
05:39 < ningu> from the docs: "Includes allow you to statically include chunks of Jade, or other content like css, or html which lives in separate files."
05:39 < ningu> afaik there is no way to have finer granularity of scope
05:39 < sorensen> i am currently doing this exact thing
05:40 < ningu> an include is just as if you pasted the file in where you write "include foo"
05:40 < sorensen> yes
05:40 < sorensen> maybe i am misunderstanding
05:41 < sorensen> he *doesnt* want this?
05:41 < samholmes> sorensen: I'm talking about ONLY having the variables used in the include
05:42 < ningu> like I said, afaik there is no variable scoping in jade
05:42 < samholmes> Also, I notice that if I declare a variable outside of a block, then it's not available within the block.
05:42 < samholmes> ningu: Okay
05:42 < ningu> everything is accessible for the whole template
05:43 < sorensen> ah, yes, i read it wrong
05:43 < ningu> oh... hrm, that's a good point actually
05:43 < ningu> all locals passed in are accessible in all blocks
05:43 < ningu> but if you declare something in a block, I'm not sure
05:44 < ningu> I seem to recall encountering this but it's been a while
05:44 < sorensen> the locals directly passed to the template are
05:44 < sorensen> if you declare within the template though i think its isolated to blocks
05:44 < sorensen> if done within a block
05:44 < sorensen> i thought if you did it outside it would still be available
05:44 < sorensen> but now i dont know
05:44 < sorensen> lol
05:47 < sorensen> ah yes
05:47 < sorensen> blocks are isolated
05:47 < sorensen> just tested
05:47 -!- mode/#Node.js [+o TooTallNate] by ChanServ
05:48 < ningu> what about blokes?
06:03 < supersym> streams of blokes? is that like raining men>?
06:22 < Deepak> hello
06:23 < Deepak> i am using socket.io but it is giving me error access is deneid for createProcessW
06:23 < Deepak> can anybody let me know how can i resolve this one
06:24 < Deepak> ??
06:25 < Deepak> when i running my server js file from command promt at that time it is giving me error websocket writing createProcessW : Access is denied
06:36 < Guest13855> hi everyone
06:37 < __pradeep> how to implement stable proxy in node for specific url ?
06:37 < __pradeep> using node-proxy or any other lib
06:55 < GreenDog> seems like I'm always trying to wrap my head around what exactly exports does. Can someone tell me the difference between the last two exports, found at the end of the file, at https://github.com/joyent/node/blob/master/lib/console.js
06:56 < Havvy> GreenDog: Whatever is at module.exports is what require('./path/to/module.js')  will return to you.
06:56 < Havvy> (The .js is optional)
06:57 < GreenDog> but there's two exports
06:57 < Havvy> It's an object.
06:57 < Havvy> Which he attaches a property to.
06:58 < ningu> what's tricky is the difference between exports and module.exports
06:59 < ningu> afaik exports only lets you set properties, module.exports lets you set the whole exports object to whatever you want.
06:59 < Havvy> From what I can tell, you can require('console') and use it as a default Console, but if you want to build your own Console, he attaches the Console constructor to it as a subproperty.
06:59 < Havvy> ningu: You can't do `exports = {a: 1, b: 2};` ?
06:59 < RLa> Havvy, is that some kind of common pattern?
06:59 < ningu> Havvy: try it. but I don't think it works.
06:59 < Havvy> RLa: It's the first time I've seen it.
06:59 < ningu> Havvy: I have no idea *why*, though.
06:59 < RLa> i see lot of differences how different modules treat exports
07:00 < Havvy> If I just have one class in my module, I just export that as the main thing.
07:00 < Havvy> Otherwise I create an index.
07:00 < ningu> http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-nodejs
07:01 < ningu> I guess exports and module.exports are two separate objects? that's odd.
07:01 < ningu> I don't understand implied scope in javascript -- for example, location implicitly means window.location; foo implicitly means global.foo (?).
07:02  * GreenDog sighs, i'm just gonna use a simple language like C
07:02 < Havvy> Isn't `module` the name of the global scope in a module?
07:02 < deoxxa> c brings together the power of assembly language and the ease-of-use of assembly language
07:02 < GreenDog> hehe
07:02 < ningu> Havvy: I always assumed so, but that doesn't explain how exports can possibly be different from module.exports.
07:03 < ningu> so I'm kind of stuck on that one. but it's clearly the case. I remember from testing both.
07:03 < Havvy> What that happens is confusing me greatly.
07:04 < ningu> it sort of blew my mined when I learned that in client side js you can test if someone has defined a variable by doing if (window.foo) { ... }
07:04 < ningu> whereas if (foo) would throw an exception.
07:04 < Havvy> Why would if (foo) throw an exception?
07:04 < ningu> if foo has not been declared it will.
07:04 < Havvy> Ah.
07:05 < ningu> which is what you're testing for, so you can't assume...
07:05 < ningu> at least, it could be what you're testing for.
07:05 < Havvy> Also, if (window.foo === undefined) { ... }
07:05 < ningu> yeah, that too.
07:05 < ningu> but I don't know if you can do if (foo === undefined)
07:05 < ningu> no, you can't.
07:05 < Havvy> You could var it I think.
07:06 < ningu> what do you mean?
07:06 < Havvy> I wonder if `if (var foo === undefined)` would work.
07:06 < ningu> hrm. maybe.
07:06 < ningu> when I do that in the repl it seems to think the line isn't finished
07:06 < ningu> > if (var foo === undefined) { console.log('blarg') }
07:06 < ningu> ... 
07:07 < ningu> however, both module.foo and global.foo work.
07:07 < ningu> aha. var foo = 1; sets global.foo but not module.foo.
07:08 < ningu> in the repl anyway.
07:08 < deoxxa> var foo === undefined << not valid
07:08 < Havvy> ningu: Then global is the global object, and not module.
07:09 < ningu> but when I do it from test.js it doesn't find *either* global.foo or module.foo
07:09 < Havvy> var foo; if (foo === undefined) { ... }
07:09 < ningu> can you re-declare a variable like that?
07:09 < Havvy> Not sure what would happen if foo was already defined though.
07:09 < ningu> yeah...
07:09 < Havvy> ningu: If there are multiple scripts, I don't know.
07:09 < Havvy> If there is one script, no.
07:10 < JamesMGreene> Heeeeeeey
07:10 < ningu> Havvy: it seems to not shadow the previous foo.
07:10 < ningu> the previous foo is still visible and the same value
07:10 < JamesMGreene> Does Node.js core or userland have any way to essentially do `dos2unix --safe`?
07:10 < ningu> this is if they're in the same scope of course
07:10 < JamesMGreene> i.e. assuming that the command may or may not be available on the core OS
07:10 < Havvy> Since global is the global object, then `exports` is global.exports and not module.exports. And a module starts with exports = module.exports = {}
07:10 < ningu> hrm
07:11 < ningu> I guess, but then why is var foo = 1; having no effect on global.foo?
07:11 < Havvy> :/  I'm not sure.
07:11 < ningu> aha
07:11 < ningu> this is weird
07:13 < ningu> http://pastebin.com/XEV0WvF6
07:13 < ningu> try that
07:13 < ningu> I'm slightly confused :)
07:14 < ningu> Havvy: anyway, you were basically right; exports is equivalent to global.exports.
07:14 < ningu> apparently if it's declared with var, it doesn't go on the global object.
07:15 < Havvy> Then were do 'var' things go?
07:16 < ningu> I don't know.
07:16 < ningu> but they can appear in many scopes, so obviously they can't all go on one global object.
07:16 < ningu> console.log(global) and console.log(module) is interesting.
07:17 < ningu> for example, console is global.console.
07:17 < ningu> there's also a global.global.
07:18 < Havvy> Heh. Is there a window.window in the browser?
07:18 < ningu> no idea.
07:18 < Havvy> Yes.
07:18 < Havvy> There is.
07:18 < ningu> hrm, there's also a global.GLOBAL.
07:19 < ningu> for some reason there's a global.setInterval but not global.parseInt.
07:20 < ningu> module.loaded is false. I wonder when it's true... I guess when you require() it.
07:20 < Havvy> Probably because parseInt is part of the JS spec while setInterval is not.
07:20 < ningu> really? but I thought setInterval was de facto standard at least.
07:21 < Havvy> It is a de facto standard.
07:21 < ningu> but I don't know the spec. you mean ECMAScript edition 3, 5?
07:21 < Havvy> ECMAScript. All versions.
07:21 < Havvy> setInterval/setTimeout/setImmediately are not a part of them.
07:21 < ningu> and V8 implements what, exactly?
07:22 < Havvy> V8 implements ES5 with some ES6 extensions.
07:22 < ningu> then where does setInterval come from? ES6 extensions?
07:22 < Havvy> But those extensions are hidden behind --harmony-x flags.
07:22 < Havvy> setInterval is unspecced.
07:22 < Havvy> It's a nonstandard extension.
07:23 < ningu> I wonder then if the setInterval you get in node is from V8 or node.
07:23 < Havvy> Most probably Node.
07:23 < ningu> but it works in chrome too.
07:23 < ningu> I guess chrome might have its own additions to V8.
07:23 < Havvy> Well, the entire DOM.
07:24 < ningu> yeah, I was going to say that presumably the whole DOM implementation is part of chrome, not v8.
07:26 < ningu> I wonder if V8 and Chrome were developed in parallel.
07:26 < Havvy> Yes.
07:26 < Havvy> They were announced together too.
07:26 < ningu> I don't understand enough about the technical underpinnings to know how V8 compares to other modern js engines
07:27 < ningu> I guess it was the first to use a JIT
07:27 < Havvy> Nitro was the first to use a JIT.
08:38 < deoxxa> https://gist.github.com/deoxxa/5132822 << is there an easier, still accurate way of doing this?
08:38 < deoxxa> i'm taking a bunch of streams and making them look like one stream
08:38 < deoxxa> where the .write() side is hooked up to the first stream and the .read() side is hooked up to the last one
08:38 < deoxxa> (this is 0.10.0, btw)
08:39 < [AD]Turbo> hi there
09:09 < extrawurst> 5
09:09 < Havvy> 42?
09:43 < kevindish> What is best module for a local task qeues? Not a distrubuted.
09:44 < ningu> kevindish: caolan's async?
09:47 < phrearch> hi
09:47 < phrearch> i want to render javascript files as templates, but libs like hogan.js crash on the content
09:47 < phrearch> is there a lib that does this easily
09:47 < phrearch> ?
09:48 < ningu> phrearch: what do you mean by "javascript files as templates"?
09:48 < ningu> there are various templating modules for node
09:48 < standoo> ejs?
09:48 < ningu> oh, right
09:48 < kevindish> phrearch: JST?
09:48 < ningu> forgot about that one
09:49 < ningu> kevindish: anyway, you can modify the concurrency of async task queues if you can only handle one at a time or whatever
09:49 < phrearch> ningu: im using a directory of js files to scaffold a new module. there should be some variables inside to change naming according to user input
09:49 < ningu> I don't really understand the question
09:49 < phrearch> kevindish: thanks, checking. wondering if underscore will do 
09:49 < ningu> underscore is pretty much irrelevant
09:50 < phrearch> ningu: ehm, well i have a file like views.js with naming that should be changable every time that file is created
09:50 < ningu> you could just do search/replace of {foo
09:50 < ningu> {foo} even
09:50 < phrearch> like function <% mymodname %> 
09:50 < ningu> depends how elaborate your needs are
09:50 < phrearch> just to change some var names
09:51 < ningu> well, I would just do something like that. I suppose you can look at how express does it, for example
09:51 < ningu> ejs would probably work as well
09:52 < phrearch> ningu: ill give it a try. thanks
09:53 < faceleg1> ugh so much of this lib is sync
09:53 < faceleg1> almost every function I debug I notice also needs async-ing
09:53 < faceleg1> progress like molasses moving uphill
09:53 < ningu> how do you write your own async method, anyway?
09:54 < faceleg1> ningu: me?
09:54 < ningu> I suppose I could create an event emitter, but how would I Know when to emit the events... something would have to call one of my callbacks for that
09:54 < ningu> yeah
09:54 < faceleg1> this lib
09:54 < ningu> the actual async stuff seems to be mostly under the hood
09:54 < faceleg1> either you call a function that goes through to c++
09:55 < faceleg1> which handles it then calls the callback
09:55 < faceleg1> or
09:55 < ningu> there is process.nextTick but I don't really understand how that works
09:55 < faceleg1> that is abstracted behind another function (of a different object) that handles it with an event emitter
09:55 < faceleg1> no neither
09:55 < faceleg1> I'm using event emitters (that really just wrap my initial desc)
09:55 < faceleg1> and libuv in C++
09:55 < dz0ny> hi
09:56 < faceleg1> event emitter is used for git history walking
09:56 < faceleg1> and tree walking
09:56 < ningu> what about tree climbing?
09:56 < faceleg1> standard func(cb) for everything else
09:56 < faceleg1> not implemented
09:57 < dz0ny> what rest api library would you recommend, something based on express?
09:58 < faceleg1> why do you need an api library?
09:59 < ningu> yeah, rest is simple enough that you don't really need one
10:00 < guidocalvano> hey people, is npm installed with node nowadays?
10:00 < guidocalvano> good morning by the way
10:00 < faceleg1> yes
10:00 < faceleg1> evening
10:01 < ningu> sometimes it is packaged separately depending on your distro
10:02 < faceleg1> ningu: 
10:02 < dz0ny> i was looking into HopJS, basically it should also autogenerete docs, be mvc capable
10:02 < guidocalvano> and if I'd like to install node js on an ubuntu machine, do I just click install on the node site, or do I use the package manager of ubuntu, do I down the source?
10:02 < faceleg1> guidocalvano: I'd do $ sudo apt-get install node
10:02 < ningu> guidocalvano: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
10:02 < guidocalvano> k
10:02 < ningu> you should add the custom repository
10:02 < ningu> apt-get install nodejs npm
10:02 < faceleg1> yeah do what he said
10:03 < ningu> quantal is still on 0.6.x
10:03 < faceleg1> struct a { anotherStruct s }
10:03 < guidocalvano> and that should also make node update itself right?
10:03 < guidocalvano> (I'm not on a
10:03 < ningu> guidocalvano: well, if the repository is updated and you run apt-get update && apt-get upgrade
10:03 < faceleg1> should I make anotherStruct a pointer, so when I pass it to functions I don't have to use & or should I *not* do this?
10:03 < guidocalvano> *ubuntu )
10:03 < faceleg1> guidocalvano: yes
10:03 < faceleg1> guidocalvano: what are you using?
10:04 < ningu> faceleg1: it's more a question of memory allocation and not syntax
10:04 < guidocalvano> faceleg1: currently I am on mac, but our company's server is on ubuntu
10:04 < ningu> if you make it a pointer then you can dynamically allocate it with malloc
10:04 < faceleg1> guidocalvano: mac I'd recommend installing homebrew
10:05 < faceleg1> ningu: if I'm not doing any malloc calls?
10:05 < ningu> homebrew instructions are on the link I pasted
10:05 < guidocalvano> faceleg1: I know how to get things working on mac, I'm asking cause I have to make it easy for our lead dev to install node on the server
10:05 < faceleg1> if he's lead then everything is easy
10:05 < ningu> faceleg1: then it probably doesn't matter. if it matters then I can't think of how :)
10:06 < guidocalvano> faceleg1: unfortunately I can not test things on an ubuntu machine right now
10:06 < ningu> but I'm sure there are consequences of some sort
10:06 < ningu> guidocalvano: just send him the link I pasted up there
10:06 < ningu> it has instructions
10:06 < guidocalvano> k
10:06 < faceleg1> ningu:  yeah I get that, C/C++ is like a minefield form me atm haha
10:06 < faceleg1> guidocalvano: yes follow ubuntu steps, it's what I did on my ubuntu machine
10:07 < ningu> faceleg1: well, it's hard to predict exactly what the consequences will be. sizeof(struct a) will obviously be different.
10:07 < ningu> whether that matters is kind of un-obvious
10:07 < guidocalvano> ningu, faceleg1: thanks for the advice (:
10:07 < faceleg1> ningu: time and segfaults will tell
10:07 < ningu> also, i'm not sure whether having large (in terms of bytes) structs is sub-optimal 
10:08 < faceleg1> guidocalvano: note that without node-dev your lead dev will have issues if he tries to npm install native modules
10:08 < faceleg1> you mean it might be suboptimal?
10:08 < ningu> that's a question of stack allocation and so on and I never learned enough about that
10:08 < guidocalvano> ningu: C++ is horrible… and the reason I say that is cause I've had the misfortune of working with that hideous language for a long time now
10:08 < faceleg1> no other way to pass data aronud in a baton right?
10:08 < guidocalvano> ningu: whenever it can't be avoided
10:09 < faceleg1> guidocalvano: ningu "write a simple program that draws bricks on the screen"
10:09 < faceleg1> is a recurring nightmare I have
10:09 < faceleg1> aboutC++
10:09 < faceleg1> also you guys use Ubuntu on a server?
10:09 < ningu> faceleg1: well, it's going to be allocated differently is all I really meant -- even if you create the struct on the stack rather than with malloc, it's probably going to be allocated differently if you store a pointer to it rather than storing it inline
10:09 < ningu> yeah, I do
10:09 < guidocalvano> we do too
10:10 < faceleg1> is it a production server that like, serves websites?
10:10 < ningu> guidocalvano: sei italiano o olandese?
10:10 < guidocalvano> I'm not the administrator of that server (just write code) but I can imagine that my colleague is quite happy with everything being very simple on ubuntuy
10:11 < ningu> ubuntu works fine as a server in my experience, but i haven't done anything very heavy duty
10:11 < guidocalvano> ningu: falo portugues, meu avo era italiano, meu pai é do brazil (:
10:11 < guidocalvano> faceleg1: I think we have quite a lot of requests
10:11 < ningu> guidocalvano: falo um pouco portugues tambem
10:11 < guidocalvano> ningu: podemos falar portaliano
10:12 < ningu> mas falo melhor o espanhol
10:12 < faceleg1> ningu:  is ternary not OK here? Local<Value> argv[1] = { baton->error ? GitError::WrapError(baton->error) : Local<Value>::New(Null()) };
10:12 < guidocalvano> ningu: entendo muitas linguas latin
10:12 < guidocalvano> ningu: não falo eles, mas entendo muito
10:12 < Havvy> faceleg1: Are both values of the same time?
10:12 < faceleg1> if only there was a chines person here, I'd show you two
10:12 < guidocalvano> ni hao
10:12 < ningu> hehe
10:13 < faceleg1> 不好笑
10:13 < ningu> yeah, Havvy's question is the relevant one I think -- are they the same type
10:13 < faceleg1> no, sadly
10:13 < faceleg1> I've been in dynamic land for too long
10:13  * guidocalvano was hoping no one would respond…shamefully uncovering that is all he knows
10:13 < ningu> whatever is in there better be a Local<Value>
10:13 < phrearch> hm, underscore isnt able to compile this as template either
10:13 < phrearch> http://paste.kde.org/693218/
10:13 < faceleg1> so ternary only OK for vars of same type?
10:13 < ningu> no
10:13 < phrearch> probably should use the search replace thing 
10:14 < ningu> it's an array of Local<Value>'s
10:14 < ningu> arrays are always arrays of things of the same type
10:14 < faceleg1> mmm
10:14 < ningu> nothing to do with ternary
10:14 < guidocalvano> faceleg1: yes probably
10:14 < faceleg1> but if I put GitError:: blah
10:14 < faceleg1> into it it compiles (and runs) fine
10:14 < faceleg1> which is Handle<Object>
10:14 < ningu> C++ types are kind of a mess
10:14 < faceleg1> guidocalvano: everyone knows ni hao, it doesn't count
10:15 < guidocalvano> faceleg1: you should try casting both to the same type, though that might give issues given that you are forced to use templates there
10:15 < faceleg1> C++ seems like kind of a mess
10:15 < ningu> you can also have rules for conversion which will be applied when necessary
10:15 < mac_nibblet> Heya peeps im working on this funny system that requires a scheduler to task stuff so my idea was to have a class/object emit an event
10:15 < ningu> so maybe casting Handle<Object> to Local<Value> is OK
10:15 < mac_nibblet> but whats best having 1000 setTimout/setInterval or a single setTimeout and use events ?
10:15 < ningu> I have no idea
10:15 < faceleg1> ningu: neither
10:15 < faceleg1> ningu: I'm going to do if/else
10:15 < ningu> faceleg1: I doubt it will matter, but give it a try
10:15 < guidocalvano> faceleg1: that sounds like a wise idea
10:15 < smugglinRaisins> have i made it to the node.js irc?
10:16 < mac_nibblet> smugglinRaisins: yes
10:16 < smugglinRaisins> wonderful
10:16 < guidocalvano> faceleg1: not in the least because it will make your code easier to understand
10:16 < faceleg1> ningu: how do I cast
10:16 < faceleg1> guidocalvano: yes
10:16 < guidocalvano> smugglinRaisins: welcome!
10:16 < ningu> (type)a casts a as type
10:16 < Havvy> mac_nibblet: Depends on what you are doing.
10:16 < faceleg1> guidocalvano: this code was ... confusing when I started
10:16 < faceleg1> ningu:  thanks, going to do if else though
10:16 < smugglinRaisins> do you guys know an mscdex?
10:16 < ningu> oh, or you can do type(a) and make it look like a function all
10:16 < mac_nibblet> Havvy: i have a lot of clients connected via sockets
10:16 < ningu> call*
10:16 < mac_nibblet> Havvy: that i need to pull information from at a given interval
10:16 < faceleg1> ningu: guidocalvano okok I'm going to try to cast
10:16 < faceleg1> here I go
10:17 < Havvy> I would go with 1000 setTimeout/setIntervals then.
10:17 < mac_nibblet> Havvy: care to explain why?
10:17 < faceleg1> ningu: 
10:17 < faceleg1> does C++ have method overloading
10:17 < faceleg1> i.e. can I have a class with two methods of the same anme
10:17 < faceleg1> that differ only intheir return type?
10:17 < ningu> would you rather fight 1000 duck-sized setIntervals or 1 horse-sized setTimeout?
10:18 < guidocalvano> faceleg1: yes
10:18 < Havvy> mac_nibblet: I can't explain, no. :(
10:18 < guidocalvano> faceleg1: as long as the arguments are different
10:18 < faceleg1> which is least worse
10:18 < ningu> what guidocalvano said
10:18 < faceleg1> ah well
10:18 < faceleg1> not an option then
10:18 < ningu> the arguments have to vary in number or type
10:18 < faceleg1> laaaame
10:18 < Havvy> C++ operator overloading is the same as Java operator overloading.
10:18 < faceleg1> ok
10:18 < guidocalvano> faceleg1: how it deals with two functions one with an argument of type X and one with an argument of a derived type I don't know
10:18 < faceleg1> which is least worse
10:18 < sheldonh> can i rely on Timers.setTimeout(fn, ms) firing no sooner than now + ms milliseconds?
10:18 < faceleg1> Local<Value> argv[1] = { baton->error ? Local<Value>(GitError::WrapError(baton->error)) : Local<Value>::New(Null()) };
10:18 < RLa> sure you can't have different return types?
10:18 < mac_nibblet> ningu: that makes no sense ? the code will still be pretty much the same
10:18 < faceleg1> or splitting that into a 4+line if/else
10:19 < Havvy> sheldonh: Yes.
10:19 < mac_nibblet> ningu, Havvy my question is performance wise
10:19 < ningu> mac_nibblet: I was referencing a joke on reddit
10:19 < guidocalvano> *class X
10:19 < smugglinRaisins> is anyone familiar with any of the node imap modules?
10:19 < sheldonh> Havvy: thanks
10:19 < mac_nibblet> ningu: oh lol :P
10:19 < RLa> afaik you can have method overloading by return type constness
10:19 < guidocalvano> sheldonh: no you can't
10:19 < Havvy> mac_nibblet: Performance is complex...how long does it take for the function if you did it in one straight shot?
10:19 < guidocalvano> sheldonh: if the event queue is bogged down with a complex function, or your system as a whole is slow, it could take much longer than x ms
10:20 < ningu> faceleg1: first figure out of it compiles
10:20 < Havvy> guidocalvano: (S)He said "no sooner"
10:20 < mac_nibblet> Havvy: well response time from the units are 40-100ms + latency
10:20 < mac_nibblet> so say 250ms for each socket
10:20 < ningu> faceleg1: I would say though that generally, array literals are probably to be avoided if possible. but I may be wrong
10:20 < guidocalvano> sheldonh: you can assume it will fire later than x ms from now
10:20 < faceleg1> ningu: guidocalvano Havvy no! error: functions that differ only in their return type cannot be overloaded
10:21 < sheldonh> guidocalvano: yeah, i'm used to having no upper bound to rely on. just making sure i have a lower bound to depend on
10:21 < sheldonh> thanks folks
10:21 < faceleg1> ningu:  even for declaring arg array for a JS callback function?
10:21 < faceleg1> (which is waht this is)
10:21 < ningu> as I said yesterday my C++ is pretty rusty and I'm sure my sense of style has been affected by other languages
10:21 < RLa> faceleg, turn return into out parameter
10:21 < Havvy> Then if you had 1000 of them, it would take 1000 * 250ms for that function, and while it is going, no other functions can execute.
10:21 < Havvy> faceleg1: I never said that you could overload on return type.
10:21 < smugglinRaisins> Anyone, IMAP modules?
10:22 < faceleg1> Havvy: sorry didn't mean to imply that
10:22 < ningu> yeah, all of us said you *can't* overload on return type :)
10:22 < faceleg1> ningu: I compiled and it said that, was providing confirmation on your correctness
10:22 < faceleg1> Havvy: ningu calm down I know you're all C++ gods
10:22 < mac_nibblet> Havvy: is that if i use a single timeout and events or if i do 1000 timeouts ?
10:22 < Havvy> mac_nibblet: A single timeout.
10:22 < ningu> I'm more like someone who learned C++ 15 years ago and hasn't used it much since then
10:22 < Havvy> faceleg1: I've never written C++ before. ;)
10:23  * faceleg1 hangs his head
10:23 < sheldonh> oh i've *written* c++. i've just never learned it ;)
10:23 < ningu> STL was still a draft
10:23 < mac_nibblet> Havvy: so a setTimeout is actually blocking ?
10:23 < Havvy> mac_nibblet: Any javascript function is blocking.
10:23 < Havvy> The setTimeout won't block while its not being executed though.
10:24 < faceleg1> ningu: if/else it is
10:25 < mac_nibblet> Havvy: so creating the query string takes 0.001ms and it get sent to the socket and then i listen on the data event for the response and then push that to a json rpc
10:25 < smugglinRaisins> anyone written a javascript gmail reader?
10:25 < mac_nibblet> Havvy: what parts of this is actually blocking ?
10:26 < sheldonh> mac_nibblet: i find it helpful to think of it like this: if javascript is executing some code, that code is blocking everything else
10:26 < smugglinRaisins> i'm writing one now, thought im not sure if the problem is hte IMAP server or the oauth2...
10:26 < Havvy> mac_nibblet: None of that is blocking.
10:26 < mac_nibblet> Havvy: so do you still recommend 1000 timeouts ?
10:27 < faceleg1> well I just discovered that if something bad happens in the uv Work method
10:27 < faceleg1> node hangs with no output
10:27 < faceleg1> protip
10:27 < faceleg1> protip heavy on the scare quotes
10:27 < Havvy> If you are doing nothing but creating query strings, sending them immediately, and then listening, you could do it all in one shot.
10:28 < Havvy> Since all of those are pretty fast operations.
10:28 < mac_nibblet> I think the setTimeout would be the easiest way to solve this issue
10:28 < Havvy> But then, you actually have to have an object keep track of all of your connections.
10:28 < mac_nibblet> yes
10:29 < mac_nibblet> And if i use the cluster it gets even more complicated
10:30 < guidocalvano> faceleg1: if a functions return an object representing a binding to a javascript argument array, that has some template type X then that should work when you overload it
10:31 < guidocalvano> faceleg1: otherwise it would be impossible to have a templated return value
10:31 < faceleg|home> guidocalvano: it works, just didn't like the ternary
10:32 < faceleg|home> guidocalvano: used if/else anyway, it's clearer, but wanted to learn why ? : didn't work, and how to make it work. achievement unlocked
10:32 < guidocalvano> faceleg|home: (:
10:32 < ningu> faceleg|home: I don't really know why it didn't work
10:33 < faceleg|home> ningu: casting it to Local<Whatever> worked
10:33 < faceleg|home> just looked ugly all on one line, trying to be cool
10:33 < guidocalvano> ningu: probably because the templates got instantiated to different values or something
10:33 < guidocalvano> ningu: what faceleg|home said (:
10:34 < faceleg|home> how to debug EXC_BAD_ACCESS
10:34 < faceleg|home> ?
10:35 < guidocalvano> faceleg|home: it a runtime bug?
10:35 < guidocalvano> faceleg|home: or do you have a line number
10:35 < guidocalvano> faceleg|home: for runtime bugs you could try gdb, though I don't have that much experience with gdb
10:36 < faceleg|home> gdb is how I know what the rror is
10:36 < faceleg|home> node just hangs
10:36 < guidocalvano> faceleg|home: or the old comment out half of your code
10:36 < faceleg|home> hahha
10:36 < faceleg|home> yep
10:47 < faceleg|home> guidocalvano: omfg
10:47 < faceleg|home> copy paste error
10:49 < kevindish> Does anyone know a inmemory queue background worker module? Where you can add jobs and process them.
10:51 < kevindish> It is because i have this app http://domainlookup.eu01.aws.af.cm/ which let you lookup .dk domains, but the server i get the information from only let you process 1 req at a time.
10:51 < kevindish> So when multiple users use the app, there req is denied.
11:02 < korilo> when 0.10.0 will be out?
11:03 < sheldonh> oh. mocha runs tests in serial. i didn't expect that in an async environment
11:06 < guidocalvano> faceleg|home: C++ made you do it
11:06 < guidocalvano> faceleg|home: it is evil like that
11:06 < faceleg|home> guidocalvano: I KNOW
11:06 < faceleg|home> guidocalvano: should one always initialise out vars to null?
11:07 < guidocalvano> faceleg|home: C++ doesn't do it for you
11:07 < faceleg|home> i.e. type var = NULL; funct(&var);
11:07 < guidocalvano> faceleg|home: to save time it just allocates the memory, without setting it
11:07 < faceleg|home> yep
11:07 < faceleg|home> but in terms of best practice
11:08 < faceleg|home> guidocalvano: copy paste error resulted in the wrong method being used as Work for libuv, so of course baton wasn't populated, so of course BAD_ACCESS, of course...
11:08 < guidocalvano> faceleg|home: the idea behind it its to improve performance
11:09 < faceleg|home> so I should or should not = NULL?
11:09 < guidocalvano> faceleg|home: if you are pretty sure that piece of code will not be performance critical, I'd NULL it
11:10 < faceleg|home> I have no idea
11:10 < faceleg|home> but I'd rather not optimize prematurely
11:10 < guidocalvano> in that case NULL it
11:10 < faceleg|home> half the point of doing this is to undestand V8/C++ better
11:10 < faceleg|home> god knows why 
11:10 < guidocalvano> set it to NULL (: it will save you a lot of annoying bugs (:
11:11 < faceleg|home> guidocalvano: yes, had them in ObjC
11:11 < faceleg|home> (images not cleared have random noise etc)
11:11 < guidocalvano> faceleg|home: imagine the privacy implications of that (:
11:11 < faceleg|home> guidocalvano: if it's a struct then no problems
11:11 < faceleg|home> guidocalvano: I know hahahaha
11:12 < guidocalvano> when I start ogre3D I get to see what I last had in my browser again (:
11:12 < faceleg|home> guidocalvano: I mean if struct then no need to init?
11:12 < guidocalvano> always init
11:12 < faceleg|home> init struct to null doesn't like it
11:12 < guidocalvano> C++ never inits unless you tell it to
11:12 < faceleg|home> no viable overloaded '='
11:13 < faceleg|home> struct a { b c; }
11:13 < faceleg|home> a->b = NULL
11:13 < faceleg|home> = fail
11:13 < guidocalvano> a.b
11:13 < guidocalvano> unless be contains a pointer you want to dereference
11:14 < guidocalvano> *b
11:14 < faceleg|home> no it doesn't
11:14 < faceleg|home> that compiles, thanks
11:14 < guidocalvano> (:
11:14 < faceleg|home> oh no wait
11:14 < faceleg|home> *' is a pointer; maybe you meant to use '->'? lol
11:15 < faceleg|home> b is itself a struct
11:15 < faceleg|home> if that mattters?
11:15 < faceleg|home> so struct a { struct b {} c };
11:16 < guidocalvano> I don't entirely understand your pseudocode
11:16 < faceleg|home> a is a struct that contains a value c, which is also a struct
11:16 < faceleg|home> so I guess my question is
11:16 < faceleg|home> is it necessary to init a sub-struct before using said sub-struct as the out param of a function?
11:16 < guidocalvano> if I remember correctly (and I could very well not) a struct is a class with its members set to public by default
11:17 < faceleg|home> ok thank you
11:17 < guidocalvano> and if you are initializing a member that is a pointer I think you'd have to do this: a.b = address
11:17 < guidocalvano> and then you can do
11:17 < guidocalvano> a-> b
11:18 < guidocalvano> but my C++ is really rusty
11:18 < guidocalvano> I think it is more than a year ago I last wrote C++
11:18 < faceleg|home> when I started this it had been 5 years+
11:19 < guidocalvano> so you'd have to do a.b = NULL to initialize a member to NULL
11:19 < faceleg|home> oh yep
11:19 < faceleg|home> and if b was a struct?
11:19 < faceleg|home> b/c it is and a.b NULL made the compile moan
11:20 < guidocalvano> then structname() would create a struct, calling its default constructor
11:20 < guidocalvano> and its variables would be uninitialized if that default constructor was not written
11:21 < faceleg|home> I don't think I've ever seen a struct with a constructor
11:21 < faceleg|home> c structs are the same as C++ ctructs?
11:21 < guidocalvano> you can assign the values too
11:21 < guidocalvano> I am not entirely sure
11:22 < guidocalvano> faceleg|home: http://www.cplusplus.com/forum/general/24738/
11:26 < guidocalvano> faceleg|home: … holy !@#$@ I actually remembered that stuff
11:26 < guidocalvano> I never use structs… ever
11:26 < guidocalvano> I just use classes
11:26 < faceleg|home> good one thanks
11:27 < guidocalvano> faceleg|home: are you good to go? cause I am at work and can do some stuff I wanted to do for a long time now
11:27 < guidocalvano> faceleg|home: check this lib: http://www.boost.org/doc/libs/1_53_0/libs/smart_ptr/smart_ptr.htm
11:27 < jameshowe> I'm having issues https://gist.github.com/OrangeDog/0f91af840863af59e9e8
11:28 < jameshowe> when processEvent is called from a thread that the module has created itself
11:28 < xdomx> have a javascript DOMish question
11:28 < xdomx> i want to resize an image proportionally
11:28 < xdomx> several images actually
11:29 < xdomx> say in a box 100px^2
11:29 < guidocalvano> faceleg|home: boost is awesome in general: http://www.boost.org/doc/libs/
11:30 < aMoniker> xdomx: so you just want to multiply an images width height by a certain factor?
11:30 < xdomx> no like 
11:30 < xdomx> I want to resize it depending on if it is portrait on landscape
11:31 < aMoniker> you want to crop the image itself?
11:31 < faceleg|home> guidocalvano: I'm good, thanks a lot for your help
11:31 < xdomx> i want to make it 100*100 but i want it to keep it
11:31 < guidocalvano> faceleg|home: great (: you're welcome
11:31 < xdomx> it's aspect ration by cutting off a bit
11:32 < xdomx> ratio*
11:32 < Industrial> Say I have lots of little services (node server) I want to spawn. I want to configure each server instance beforehand in a JSON file, so I don't have to go around changing code if I want to add some workers here or there. Can I use github.com/dominictarr/scuttlebutt to provide a 'live' configuration environment that is available/queryable from e.g. the commandline but also in every node/server? Reading over
11:32 < Industrial> the github page it seems like a good fit but I'm not sure how to implent it and/or if there are other solutions/libs to this problem.
11:32 < aMoniker> so scale and crop
11:32 < xdomx> so doing that (checking which way to resize it, resizing it)
11:32 < xdomx> isn't an issue right
11:33 < aMoniker> doesn't seem like it would be
11:33 < jameshowe> xdomx why would it?
11:35 < xdomx> but to do it the images need to be completely loaded
11:36 < jameshowe> what has this got to do with nodejs?
11:37 < aMoniker> xdomx: you could give https://github.com/rsms/node-imagemagick a shot
11:37 < aMoniker> if you literally want to modify the image files
11:38 < jameshowe> it's usually easier to just call it directly
11:38 < aMoniker> if you just want to resize in the DOM, you could use a div containing the image set to overflow: hidden, then scale that div and the image however you like
11:39 < jameshowe> I tried using an imagemagick wrapper library for a bit - but it is so much easier to just exec them oneself
11:49 < noocx> hi
11:50 < BlackFate> hi
11:59 < jameshowe> native module help appreciated https://gist.github.com/OrangeDog/0f91af840863af59e9e8
12:10 < JamesMGreene> With Node.js, what's the right way to check if a command exists? i.e. I want to see if `dos2unix` is installed
12:11 < JamesMGreene> Is there like a  `which` functionality available, for instance?
12:12 < korilo> just use which and grab the output
12:12 < korilo> exec a child process
12:12 < korilo> gotcha?
12:12 < JamesMGreene> Hmm, maybe
12:13 < JamesMGreene> it'll fail on Windows
12:13 < JamesMGreene> Well, I guess I can flip to `where` on Windows
12:13 < korilo> oh you're on winzozz
12:13 < korilo> yes whatever
12:14 < JamesMGreene> Well I really just want the check for non-Windows, as dos2unix is kinda useless for Windows
12:14 < JamesMGreene> but I figured I may as well just make a cross-platform module if possible
12:16 < korilo> yes you could do an addon too
12:20 < jameshowe> JamesMGreene: the os module can probably tell you what you want to know
12:22 < JamesMGreene> jameshowe: How so? I don't see any methods in `os` that look like they would help
12:22 < jameshowe> to tell whether you're on windows or not
12:22 < JamesMGreene> process.platform === 'win32' is the usual check
12:22 < JamesMGreene> That's not my problem :-P
12:22 < JamesMGreene> but thanks
12:23 < jameshowe> "Well I really just want the check for non-Windows, as dos2unix is kinda useless for Windows"
12:23 < korilo> i think the addon way would be your best bet
12:23 < JamesMGreene> Sorry, I meant: Well I really just want the check [`which`] for non-Windows, as dos2unix is kinda useless for Windows"
12:24 < JamesMGreene> Didn't fully form my context before that sentence as well as I had thought
12:24 < jameshowe> then either exec(which), or just exec(dos2unix) and catch the error
12:25 < jameshowe> or make a TransformStream to do line-ending translation
12:25 < jameshowe> or pre-0.9 equivalent
12:25 < korilo> will 0.10.0 be released today jameshowe ?
12:26 < jameshowe> no idea
12:26 < korilo> because i can see the 0.10.0-pre API already
12:26 < jameshowe> but the branch exists now
12:28 < mscdex> coffee.brew();
12:29 < JamesMGreene> [07:06] * Now talking in #Node.js
12:29 < JamesMGreene> [07:06] * Topic is 'v0.10 comes Monday 2013.03.11 - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js'
12:29 < JamesMGreene> Looks like a "yes"
12:32 < JamesMGreene> I see the ShellJS guys did a Node-based impl of `which`: https://github.com/arturadib/shelljs/blob/bb63e85ed5d4baef50e1fc17e87a732b4016f112/shell.js#L783-L844
12:32 < Industrial> Say I want a Scuttlebutt/Model that represents a global service configuration avalable in every service node I run in the network (https://github.com/dominictarr/scuttlebutt), would that mean I need an extra server in every service to communicate the service over?
12:33 < Industrial> err, to communicate the scuttlebutt model over.
12:34 < phrearch> hm, is it possible to execute a command with a shell?
12:34 < phrearch> like running it from a certain directory
12:34 < phrearch> i need to run npm link from a script
12:36 < Industrial> phrearch: http://lmgtfy.com/?q=nodejs+run+command&l=1
12:38 < jameshowe> dropping this again, in-case anybody has a clue https://gist.github.com/OrangeDog/0f91af840863af59e9e8
12:40 < mscdex> JamesMGreene: that can be a bit deceiving on Windows though
12:40 < phrearch> Industrial: i got that, but how do you run it from a specific directory?
12:41 < sheldonh> should package.json list coffee-script as a dependency?
12:41 < phrearch> in python there was an option to run a command like that, or to run it through a shell
12:41 < mscdex> sheldonh: no
12:41 < sheldonh> ok thanks
12:41 < phrearch> was wondering if the distinction exists with child_process exec as well
12:41 < mscdex> sheldonh: use a hook to compile to js before it is published
12:42 < mscdex> phrearch: you can specify a working directory when spawning a child process
12:43 < phrearch> mcsdex: aha, ill look that up. thanks!
12:44 < phrearch> ah got it, https://github.com/joyent/node/commit/aaa1f451e6392a530c3e32a64d8b6ad4fece988a
12:44 < sheldonh> mscdex: hmmm... and still include the .coffee files in the distributed npm?
12:59 < Kakera> it's monday here
12:59 < Kakera> where's mah 0.10
13:05 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:08 < fusiongrokker> By now it's Monday everywhere, except where it's Tuesday. :P
13:11 < mac_nibblet> Havvy: Got a few minutes :)?
13:17 < mscdex> sheldonh: you could if you wanted
13:18 < mscdex> sheldonh: example: https://github.com/devongovett/pdfkit/blob/master/package.json
13:18 < mac_nibblet> i need to scan a bus network that potentially has 16320 addresses
13:19 < mac_nibblet> over a socket that will only allow for a single ping at a time
13:19 < mac_nibblet> and does not respond if no devices exists at the given address
13:19 < mac_nibblet> how on earth should i implement this ?
13:27 < alchimis_> Hi every one,
13:27 < alchimis_> I wanna have an amazon ec2 instance to play role of a load balancer.
13:27 < alchimis_> is there any module already implemented to to that
13:28 < mac_nibblet> iptables ?
13:29 < mscdex> alchimis_: why not use haproxy or something?
13:29 < cicoder> anyone come across a user 'award' badge script like the one on coderwall?
13:30 < alejo2> hola a todos alguien puede ayudarme en español?
13:30 < mmalecki> alchimis_: http-proxy
13:32 < alchimis_> mmalecki: and mscdex: thanx for the links
13:33 < alchimis_> another question (maybe stupid one) now I am trying to do it for amazon ec2, but later is it portable to do it for other clouds, such as OpenStack
13:33 < alchimis_> ?
13:34 < jameshowe> haproxy will work anywhere
13:34 < jameshowe> and is much better than a node module
13:37 < gazarsgo> is there a project for a proxy that will pass through client side instrumentation (google analytics, new relic, etc)
13:38 < jameshowe> haproxy
13:38 < jameshowe> or almost anything
13:38 < jameshowe> those are all in a layer above HTTP
13:38 < gazarsgo> haproxy isn't correct in this context
13:38 < jameshowe> and a proxy should only care about HTTP or below
13:38 < gazarsgo> maybe proxy isn't the right word
13:39 < gazarsgo> this is for multiplexing multiple http calls into one
13:39 < gazarsgo> many ajax calls -> 1 ajax call
13:39 < gazarsgo> kind of like a message broker pattern
13:40 < gazarsgo> (demuxing?)
13:40 < gazarsgo> very much needs to be at the application layer, not http layer, because there are different contexts for each sort of clientside instrumentation
13:41 < jameshowe> well SPDY would sort-of do that
13:41 < jameshowe> muxing at HTTP
13:42 < gazarsgo> maybe in 3 years my project will be obsolete, but better start it now and pivot later :)
13:43 < gazarsgo> i understand your point, but the protocol layer will take a long time to produce a viable solution where I can solve it today at the application layer…just want to see if i was reproducing anything existing
13:43 < gazarsgo> my sanity check will just be to aggregate time spent across multiple clientside instrumentations on my userbase… maybe i am solving the wrong problem :)
13:44 < gazarsgo> thanks for the help, bbl
13:44 < jameshowe> related? http://stackoverflow.com/questions/1387894/is-it-possible-to-multiplex-many-ajax-requests-from-the-same-page
13:45 < JamesMGreene> mscdex What about shelljs's `which` command can be a bit deceiving on Windows?
13:50 < stonedmind> Hi guys. I see 4 bugs for 0.10 milestone. So release will postponed?
13:56 < hartzie> hey guys. i need some help with nodejs ejs templates. i want to dynamic include another template but partial is not available is there a way to do it otherwise?
13:59 < ins0mnia> hartzie: put a tag in your template, read the external template file and inject it when it needs to be ;)
14:00 < korilo> or use jade :)
14:00 < hartzie> ins0mnia: okay that was my way of doing it before i used ejs. so this will still do it xD
14:01 < ins0mnia> hartzie: or switch to handlebars:)
14:02 < hartzie> okay jade or handlebars i will look at them
14:02 < hartzie> thx guys
14:03 < alchimis_> again another question,  before giving a try to node-http-proxy with round robin and using it as a load balancer, is node-http-proxy redirect all the requests from one user to nother server or it divide the requests of a certain user and redirect it to different srvers?
14:04 < damarusama> hartzie: handlebar is really easy to use btw
14:04 < asdf12> alchimis_: both of those are wrong
14:04 < asdf12> it won't know 'user'
14:05 < jameshowe> alchimis_ seriously, use haproxy
14:05 < hartzie> damarusama: is it well documented? i missed that in ejs xD
14:05 < alchimis_> so for example, a user need to see a page, but that page loads different files(so different requests), his requests then distributed on diferent servers?
14:05 < asdf12> alchimis_: it's not guaranteed, but yes that is the idea
14:05 < asdf12> also making sure you know, the http proxy won't have a concept of 'user'
14:06 < alchimis_> jameshowe: I wanna try both, since for my exprimentation i need to use at least one node module, so I have to give a try to http-proxy
14:07 < jameshowe> if you need to always route "users" to the same server, this is usually achieved with cookies
14:07 < jameshowe> and tell the proxy to route on the cookie
14:07 < paultman_> good morning everyone.  I was reviewing some express stuff and have a question regarding setting a "secret" string in the express.session call.
14:07 < asdf12> no don't do that
14:07 < paultman_> i understand the need for security in cookies
14:08 < damarusama> hartzie: well it's simple enough, but I had to dig some online tutorial to really make it work
14:08 < paultman_> but don't see why it's needed in the session obj from the server
14:08 < damarusama> hartzie: please note it doesn't work with yeoman
14:09 < hartzie> damarusama: and what about express?
14:09 < paultman_> is it actually signing the data that's in the in-memory  session object?
14:09 < paultman_> i'm referring to a call like this: app.use(express.cookieParser('my secret string'));
14:09 < damarusama> hartzie: well it's two different beast
14:09 < asdf12> paultman_: it's signing the cookie
14:09 < paultman_> opps
14:09 < paultman_> i mean
14:09 < paultman_>  app.use(express.session({  25     secret: 'my secret string',
14:09 < asdf12> it'll be expensive, and pointless to encrypt the memory
14:10 < paultman_> minus the 25 part (copy from vi)
14:10 < paultman_> yeah, agreed
14:10 < paultman_> ok, so the secret string should be the same in both of those calls?
14:10 < paultman_> if so, why does it take the input twice
14:11 < damarusama> hartzie: with handlebar you sprinkle it's magic templating on your pages, with express you sell you soul to it to build your project
14:11 < stonedmind> just repeat.. I see 4 bugs for 0.10 milestone. So release will postponed?
14:12 < asdf12> paultman_: one is signing the cookie, the other is hashing it
14:13 < hartzie> damarusama: i needed something to build a small webapp very fast and that was somehow a good deal for my soul. but for future projects i am currently looking for a good template engine for both client and server side
14:16 < SomeoneWeird> stonebranch, post to the mailing list
14:17 < damarusama> hartzie: well handlebar works well client side, for example on a gallery it works wonders, or any sort of listing/tables
14:17 < damarusama> it parses your json really nicely in your html
14:18 < gratz> trying to work around this if anyone has any ideas: http://stackoverflow.com/questions/15339379/node-js-spawning-a-child-process-interactively-with-separate-stdout-and-stderr-s
14:19 < hartzie> damarusama: alright i will give it a shoot today ;) 
14:19 < paultman> sorry guys, my connection here is pathetic
14:19 < jameshowe> any v8 experts around yet: https://gist.github.com/OrangeDog/0f91af840863af59e9e8
14:19 < korilo> have someone checked coffescript support in ternjs?
14:19 < korilo> that's amazingf
14:20 < korilo> http://t.co/5nSwHjLQAG
14:20 < damarusama> ternsjs is out ?
14:20 < korilo> nope
14:20 < korilo> atleast not yet
14:20 < asdf12> jameshowe: if i had to take a wild guess (i don't know c++ well) but your scope needs to close scope.Close();
14:21 < damarusama> hs ~ I still had to give them my money
14:21 < korilo> is released on github
14:21 < damarusama> s/hs/ha/g
14:21 < korilo> can't wait to have st2 and 3 plugins btw
14:21 < korilo> damarusama, i donated 2days ago..money well spent lol
14:21 < jameshowe> everything is fine when processEvent is called from the main thread
14:22 < damarusama> korilo: yeah I was keeping an eye on it making sure he created the node plugin
14:22 < jameshowe> but the library I'm using can call it in other threads too - when it goes all wrong
14:22 < damarusama> I hope his indiegogo will be a raving success and he can continue coding all year ;) 
14:22 < korilo> yup it should in the next days since he got 12k+
14:22 < korilo> yeah
14:23 < korilo> we (js dev) never had a thing like that
14:23 < damarusama> yeah it's a good time for js dev ;) 
14:23 < asdf12> jaqmeshowe: well, i was speaking purely about the segfault , think it's because your scope never called Close
14:36 < jameshowe> but it doesn't segfault unless it's called in a worker thread
14:36 < jameshowe> it segfaults either in the HandleScope constructor or NewSymbol
14:37 < jameshowe> I think the latter for the snippet that's there
14:44 < jameshowe> yes, in v8::String::NewSymbol(char const*, int) ()
14:44 < jameshowe> presumably because some isolate reference is NULL
14:45 < jameshowe> the deadlock and the SO are closer to being right
14:48 < jameshowe> hmm, I tried the SO version again and this time: ERROR: HandleScope::HandleScope Entering the V8 API without proper locking in place
14:48 < jameshowe> which makes more sense
14:49 < jameshowe> so, does anyone know how v8 isolate locking is supposed to work?
14:58 < phrearch> hm, anyone tried forms-mongoose lately?
14:58 < phrearch> trying to generate a form of a mongoose model, but it doesnt have any fields
15:01 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:06 < Laddi> Question: I'm trying to use request to pipe a request but change the content-type of the response.  It doesn't seem to work so I'm wondering if it's at all possible...?
15:07 < Laddi> https://gist.github.com/laddi/5134855
15:08 < ahungry> hey guys, I need help with tcp requests (https://github.com/jehiva/ahungry-tactics/blob/master/socket.io/lisp-client.js)
15:09 < ahungry> on this, when I receive a lot of data as a response from my port, it cuts the data off, how can I collect all the data before sending it back out to the originating client?  or read it all in one large chunk vs smaller data received chunks?
15:09 < ahungry> the app works with small amounts of data, and the server back end works directly with telnet, but not with node tcp request
15:10 < jameshowe> Locker::IsLocked(m_isolate) is false, yet Locker(m_isolate) waits forever in lll_lock_wait
15:15 < teadict> Geddy is named after Geddy Lee! I'm convinced of using it now!
15:15 < teadict> polotek: I'll use geddy in the end, simple as f
15:16 < teadict> postwait: changelog says models can be used in the front end, what front end? backbone like or in the templates? ^^.-
15:20 < bmcgee> any of you guys using grunt-express?
15:27 < niggler> bmcgee grunt makes my eyes bleed.  why can't people just use makefiles? :)
15:28 < bmcgee> niggler: i smell a flame war in the air...
15:30  * niggler <3 make
15:30 < JamesMGreene> Anyone used emscripten?
15:30 < JamesMGreene> niggler Well, maybe if `make` actually worked on Windows....
15:30 < JamesMGreene> or cross-platform, for that matter
15:30 < niggler> heh point taken
15:30 < niggler> screw windows!
15:31 < SomeoneWeird> cygwin!
15:31 < JamesMGreene> Believe me, I've TRIED to make make work
15:31 < SomeoneWeird> lmao
15:31 < JamesMGreene> cygwin and mingw don't cut it for `make`
15:31 < SomeoneWeird> windows?
15:31 < SomeoneWeird> :P
15:31 < JamesMGreene> And Grunt? Works out-of-the-box for all my systems :)
15:32 < niggler> cygwin is a cute effort but it gets neither unix compatibility nor windows integration right
15:32 < niggler> how about ANT?
15:32 < JamesMGreene> lol
15:32 < JamesMGreene> You're funny
15:32 < JamesMGreene> Been using Ant for years due to lack of a good solution like Grunt
15:32 < JamesMGreene> It has since been ditched, hard
15:33 < JamesMGreene> Anyone used emscripten?
15:33 < JamesMGreene> Curious if it could successfully compile `dos2unix` into a Node.js module
15:34 < niggler> JamesMGreene why?
15:35 < niggler> you could write it directly
15:35 < niggler> just replace the line endings
15:36 < JamesMGreene> Yeah but dos2unix has some niceties built in like safe mode to avoid binaries
15:36 < JamesMGreene> I have zero doubt I can write it myself in straight Node.js but I don't really want to waste the time of it
15:36 < JamesMGreene> *on it
15:36 < jameshowe> problem solved :)
15:36 < JamesMGreene> But I also don't want to tell Mac/Linux users of my module that they are required to have dos2unix installed
15:36 < jameshowe> the good documentation about locking is on the Unlocker class, not the Locker
15:37 < SomeoneWeird> fs.writeFileSync(fs.readFileSync('file.txt').toString().replace(/[\r\n]/g,'\n'));
15:37 < SomeoneWeird> done
15:37 < SomeoneWeird> or something like that
15:37 < SomeoneWeird> lol
15:37 < niggler> SomeoneWeird that's wrong
15:38 < niggler> youd replace \r\n -> \n\n
15:38 < niggler>  /[\r\n]+/g
15:38 < SomeoneWeird> eh yeah, tired
15:38 < SomeoneWeird> get rid of the [ ] 's
15:38 < jameshowe> and the whole point of doing it in Node would be to stream it
15:39 < jameshowe> so you'd want buffer-tools, or whatever it's called 
15:39 < SomeoneWeird> fs.writeFileSync(fs.readFileSync('file.txt').toString().split('\r\n').join('\n'));
15:39 < jameshowe> and have to deal with a \r at the end of a buffer
15:41 < Industrial> Anyone here use seaport? I'm getting this problem where my seaport server reports an EPIPE when I quit a process that has several clients to it. (supposed to be saparated out into different processes later)
15:43 < juan_>  hi, how I can make a file containing this code ( http://pastebin.com/esrzbPr4 ) is global to all modules? 
15:44 < mac_nibblet> Does anyone know a better way of writing this ? https://gist.github.com/macnibblet/d6fe34211816046aee7b
15:46 < euoia> mac_nibblet: looks pretty clear to me
15:46 < bradleymeck> anyone have a new streams example of concating many streams together while adding separators?
15:46 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
15:48 < euoia> mac_nibblet: I can't see how it won't result in an infinite loop though
15:48 < euoia> mac_nibblet: I don't see a base case for the recursion
15:48 < mac_nibblet> euoia: it doesn't
15:48 < mac_nibblet> euoia: it's "roof" is network 15 subnet 15 and address 255
15:51 < euoia> mac_nibblet: strange, the way I read it the scanNetwork function calls itself without any limit
15:52 < mac_nibblet> euoia: https://gist.github.com/macnibblet/d6fe34211816046aee7b#file-protocol-js-L76-L80
15:52 < euoia> mac_nibblet: ah right, I didn't see that you have an inner function with the same name as the outer one!
15:52 < MI6> joyent/node: isaacs created tag v0.10.0 - http://git.io/kJcyrA
15:52 < mac_nibblet> oh lol
15:53 < mac_nibblet> thats a stupid idea
15:53 < mac_nibblet> euoia: thanks for poiting that out
15:53 < euoia> mac_nibblet: :)
15:53 < MI6> joyent/node: isaacs v0.10 * e2b293c : Now working on 0.10.1 (+2 more commits) - http://git.io/Sog8_A
15:54 < korilo> so 0.10.0 is out?!
15:55 < superjoe> woo!
15:55 < mac_nibblet> korilo: it would seam so ?
15:55 < bmcgee> any recommendations for integrating with oAuth (google) in express?
15:56 < azylman> bmcgee: there's an official ligbrary https://github.com/google/google-api-nodejs-client
15:56 < azylman> Not specific to express
15:56 < bmcgee> azylman: much obliged. Only seen everyauth so far, don't need to allow logins via the entire world of apps, just google
15:59 < ddod> can someone tell me if http://statcounter.com/ is giving them a server error?
15:59 < niggler> isnt there a service for that
16:00 < azylman> downforeveryoneorjustme
16:00 < niggler> http://www.downforeveryoneorjustme.com/
16:00 < ddod> there is, it's saying it's up
16:00 < niggler> there we go
16:00 < azylman> It's up for me, too
16:00 < niggler> working here
16:00 < ddod> hrm, ok
16:00 < ddod> kind of strange that it's 500ing
16:00 < ddod> for me
16:01 < ddod> ah yep, clearing the cookies and cache fixed it
16:03 < superjoe> ddod, you probably have a bug that is triggered by some cookie configuration
16:03 < superjoe> if it was 500ing
16:03 < ddod> yeah
16:04 < mikolalysenko> Network flow in JavaScript:  https://github.com/mikolalysenko/push-relabel
16:06 < diogogmt> I'm using the winston-redis lib to save all the logs to a redis db: https://github.com/indexzero/winston-redis
16:06 < diogogmt> however, the logs are being saved as a string in a list
16:06 < diogogmt> I want to have more granular separation between the logs, for example: have an option to sort by date, but type, by metadata options
16:07 < diogogmt> and the way it works right now I need to get all elements in the list JSONfy them and then sort
16:07 < diogogmt> does anybody knows about another lib to save winston logs to redis? or any suggestions of how to manage this issue?
16:08 < sgallagh> isaacs: What's the final version of V8 that Node.js 0.10.0 is shipping with?
16:12 < Fishrock123> sgallagh: 0.10.0's last V8 update seems to have been 3.14.5.8 - https://github.com/joyent/node/commits/v0.10.0-release3
16:13 < sgallagh> Fishrock123: Ok, that matches what I thought I saw in the git history. Just wanted to be certain.
16:13  * sgallagh gets started on the packaging.
16:13 < Fishrock123> Except that that link is broke. https://github.com/joyent/node/commits/v0.10.0-release
16:19 < MI6> joyent/libuv: isaacs created tag node-v0.10.0 - http://git.io/NolnJA
16:19 < Domenic_> man we're behind a few v8 versions huh
16:19 < Domenic_> hope they fix their stability issues so we can catch up
16:20 < guor> Domenic_, what stability issues do you mean?
16:20 < Domenic_> guor: i'll try to find the bug isaacs filed, but basically they tried a newer v8 version for a while then had to downgrade because of some issue with v8
16:20 <@isaacs> sgallagh: past tense :)
16:20 <@isaacs> sgallagh: $ ./node -p process.versions.v8
16:20 <@isaacs> 3.14.5.8
16:20 <@isaacs> sgallagh: it shipped with 3.14
16:21 < bingomanatee> Good morning everyone. Hi issacs
16:21 < kanongil> hmm, I just found a stream pipe() error that has been there forever, and is carried over to streams2
16:21 < sgallagh> isaacs: Thanks for confirming, and congratulations on the release!
16:21 <@isaacs> Domenic_, guor: Yeah, there were some problems with strings of certain shapes.
16:21 < bingomanatee> Is there a good article on the protocol for upgrading your node? 
16:21 <@isaacs> bingomanatee: it's the same as installing.  just do it again.
16:21 < guor> you mean the thing with Utf8Length?
16:21 <@isaacs> guor: yeah
16:21 < bingomanatee> I have coworkers who seem to consistently get stuck with bits of old installs in their systems
16:21 <@isaacs> guor: which we use i node, a LOT
16:21 < tjfontaine> INodeALot
16:22 < bingomanatee> so I am not confident that the install scripts do a thorough job of removing old instances of node/NPM on OSX
16:22 <@isaacs> bingomanatee: 1. Uninstall it, using whatever method you used to install it in the first place, if you used brew or whatever.
16:22 < guor> a fix has been landed recently, and some minor improvements are being worked on
16:22 < superjoe> congrats on v0.10
16:22 <@isaacs> bingomanatee: 2. click the "Install" button on the website.
16:22 <@isaacs> bingomanatee: or just skip step 1, and do step 2
16:22 < superjoe> isaacs, I think he's talking more about release notes / making sure that your code doesn't break
16:22 < superjoe> bingomanatee, try this: https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10
16:22 < bingomanatee> not specifically.
16:23 < guor> the issue was that we switched from ASCII strings to Latin-1, using the full 8 bits, and some older things had to be reimplemented, so some optimizations were missing
16:23 < bingomanatee> superjoe: thanks.
16:23 <@isaacs> guor: you're a v8 person?
16:23 < guor> I work on v8, if that's what you mean :)
16:24 < bingomanatee> but when I install node via downloading the install wizard there is not a clear path to uninstalling the old versions
16:24 < guor> but yeah, not updating to bleeding edge is a good idea in any case.
16:24 < Domenic_> guor: great news, thanks for filling us in
16:24 < guor> you find me landing stuff as yangguo@chromium.org
16:24 < tjfontaine> did you land the other micro optimizations?
16:25 < guor> nah I didn't implement the Latin-1 changes. Which btw. has just been activated two weeks ago so if there are subtle bugs related to non-ASCII strings, please file them
16:28 < NoiseEee> hey congrats on 0.10 
16:28 < NoiseEee> release notes / blog is super
16:28 < korilo> n 0.10.0
16:28 <@isaacs> guor: ahh!  you're yanguo.  nice to meet you :)
16:29 <@isaacs> guor: i've seen your name in patches we've floated in node.
16:29 < guor> hi isaac :)
16:29 <@isaacs> guor: yeah, i think the plan is to try to get to 3.16 or 3.17 for node 0.12
16:29 < guor> yeah I've landed some of your contributions
16:29 < jameshowe> require('cluster').isWorker == true, but process.env.NODE_UNIQUE_ID == undefined ?
16:30 < jameshowe> v0.8.20
16:37 < korilo> the blog post is amazing btw :)
16:37 < korilo> great job isaacs & Cp
16:37 < korilo> *Co
16:42 -!- mode/#Node.js [+o ryah] by ChanServ
16:43 < DuranDuran> Hey guys for Content-Length I was using body.length but there were some weird characters that were getting counted as two bytes
16:43 < DuranDuran> So I started using Buffer.byteLength(information, 'utf8')
16:43 < DuranDuran> Is this correct?
16:43 < DuranDuran> Should I be doing it this way?
16:44 < medice> i'll ask a magic 8-ball
16:44 < jameshowe> DuranDuran: yes, and they are supposed to count as two bytes
16:44 < jameshowe> Content-Length is the length in bytes, not characters
16:44 < niggler> what jsdoc hints do people use
16:44 < medice> DuranDuran: you may rely on it
16:45 < jameshowe> trying to use worker.send(): how can I reassign the constructor/prototype of the object after receiving it?
16:47 < jameshowe> the constructor is from a native module, if that matters
16:53 < _6a68> where's the best place to read more about the nextTick changes in 0.10?
16:54 < Sly> _6a68: the new node docs are on the site now.
16:54 < _6a68> Sly: ah, of course. thanks :)
16:56 < sgallagh> isaacs: Do you know of anywhere to find the tarball for v8-3.14.5.8? The latest that http://view.appspot.com/chromium-browser-official/ has is 3.14.5.7
16:56 < sgallagh> (The latest in the 3.14.5 line, I mean)
17:00 < DuranDuran> HOw do you control the number of workers express spawns?
17:01 < DuranDuran> Does express use cluster?
17:02 < jeturcotte> any mongoose adepts on?
17:03 < jeturcotte> if I've set up a schema (var fS = mogoose.schema({ SRID: String, units: Number });) for example, but will occasionally have an optional field tucked it, how do I apply that optional un-schemad field in prior to write to db?
17:04 < jeturcotte> the documentation on their own site doesn't get into it where i've looked anyways
17:04 < azylman> jeturcotte: Mongoose will not save any fields to the db that aren't in your schema, by default
17:05 < jeturcotte> hm
17:05 < jeturcotte> thats kinda wasteful; could have sworn someone said it could be done, it would just lack the full benefits of a schema'd field
17:05 < azylman> There's a `strict` option you can pass in when you create your schema that you can use to disable that (strict: false)
17:05 < jeturcotte> hmmm
17:05 < azylman> http://mongoosejs.com/docs/guide.html#strict
17:05 < jeturcotte> i shall try it
17:05 < jeturcotte> danke danke
17:08 < sgallagh> isaacs: Alternately, is there any known reason that 3.14.5.7 would be insufficient?
17:13 < jaha> anyone have a good way to convert jade temapltes to handlebars or html for the entire directory
17:16 < MI6> joyent/libuv: Timothy J Fontaine master * 2f84a57 : test: add tap output for windows - http://git.io/_90w2g
17:16 < AphelionZ> So what modal/popup (like Fancybox) is popular with the kids these days?
17:20 < requesterr> Is there a library out there to call RESTful resources from other service?
17:20 < requesterr> *services
17:20 < requesterr> I know I could probably use http, etc
17:20 < requesterr> but that's too low level for me
17:20 < requesterr> like, if a service put out documentation for their RESTful API
17:21 < requesterr> and I want to call it
17:21 < requesterr> I'd like to be able to just put in the base url, and add parameters
17:21 < requesterr> and also the type of request
17:21 < requesterr> like callURL(baseURL, params, 'post', callback)
17:22 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:22 < requesterr> without having to worry about the "on" this or "on" that
17:23 < MI6> joyent/node: isaacs v0.10 * 228ad93 : blog: Post about v0.10.0 - http://git.io/b_ds4A
17:23 < qbit> sqlite3 Y U NO 0.10.0!!!!???
17:23 < kornnflake> how to force brew my own formula? wanna update node :(
17:23 < kornnflake> *to use my own formula
17:25 < qbit> kornnflake: brew edit ? 
17:28 < kornnflake> qbit thanks :) don't know how i missed that :(
17:28 < qbit> heh
17:28 < qbit> np :D 
17:29 < guidocalvano> is it possible to use browserify in such a way that it can put variables in the global scope… don't ask why...
17:30 < guidocalvano> legacy code can be a pain
17:31 < jxson> guidocalvano: https://github.com/substack/node-browserify#brequirename
17:31 < jxson> I think thats what you want
17:31 < jxson> You might also to be able to just window.foo = whatever
17:32 < guidocalvano> jxson: doesn't require just import a variable?
17:33 < superjoe> "One of the toughest things to get right in a garbage collected language is garbage collection."
17:33 < superjoe> nice quote
17:33 < ddod> question for anyone: if I GET an image file, is there a way to interpret the results (which look like this in the console: u0011g ޑ�:��Bx�m��Ր\u0000k���) into pixel data without rendering it in canvas or using imagemagick?
17:34 < bradleymeck> guidocalvano: it does a little bit more, involving cache, potential preprocessing and relative path resolution
17:35 < jxson> guidocalvano: I could be wrong but from the v2 readme: "Make name available from outside the bundle with require(name)."
17:35 < guidocalvano> bradleymeck: I meant that require functionally imported the value of an object from a script 
17:36 < guidocalvano> jxson: the window.x = y ; approach worked
17:36 < jxson> ;)
17:36 < kornnflake> can't i store nested objects in redis?
17:37 < guidocalvano> superjoe: you poor man… you are not forced to work in C++ are you?
17:37 < alchimi__> I am using this example https://github.com/nodejitsu/node-http-proxy/blob/master/examples/balancer/simple-balancer.js to create a ;pad balancer
17:37 < alchimi__> and I have 4 amazon ec2 one running the load balancer script two running my app and  another one run for my mongodb
17:37 < superjoe> guidocalvano, not currently.
17:37 < superjoe> guidocalvano, that was a quote from the v0.10 release notes
17:37 < alchimi__> it seams it works fine, but when i login, i can not login in my app
17:38 < alchimi__> i think the simple load balancer can not handle well the requests
17:38  * guidocalvano wipes sweat from forehead
17:38 < jameshowe> ddod: use an <img> tag with a data URL?
17:38 < alchimi__> any idea how to change the script that for every user it forward his request to another server, and not for every request
17:38 < AlexMax> congratulations on the 0.10 release
17:38 < alchimi__> or any other idea that help me in solving the login issue
17:38 < jameshowe> ddod: or indeed, a regular URL of that's all that's returned in the GET
17:38 < alchimi__> any one here reading my question?
17:39 < jameshowe> ddod: just make sure the Content-Type is correct
17:39 < asdf12> alchimi__: what session store are you using?
17:39 < alchimi__> I am using passportjs
17:39 < ddod> jameshowe, thanks, i'll see what I can do with that
17:39 < asdf12> but how are you storing sessions?
17:40 < asdf12> i'm guessing it's in memory (that's the problem)
17:40 < jameshowe> *if, not of
17:40 < alchimi__> I think passportjs handle it http://passportjs.org/guide/authenticate/
17:40 < avidal> Is there something like dnode that works over the i/o channels created by child_process.fork?
17:40 < asdf12> it doesnt
17:40 < guidocalvano> jxson, bradleymeck: thanks (:
17:41 < jameshowe> passing objects with worker.send() - how do I keep the prototype properly?
17:41 < squeakytoy> im going to try and create and release my own module tonight!
17:41 < squeakytoy> for npm!
17:42 < alchimi__>  asdf12: memory , what do u mean?
17:42  * squeakytoy is pumped up
17:43 < alchimi__> so any hint for loging issue in loadbalancing
17:43 < jameshowe> I did tell you before
17:44 < spideep> Hello from Lima, Perú
17:44 < asdf12> you need to store session information outside of app's memory
17:44 < asdf12> (in a database)
17:45 < jameshowe> or route on the session cookie
17:45 < alchimi__> any example, link
17:45 < asdf12> just google it, 'connect session X' x being a database
17:45 < alchimi__> I am new in nodejs, jameshow: if u provide me a link
17:45 < alchimi__> asdf12: thanx
17:45 < asdf12> do not route on session cookie, that defeats the purpose, and makes your app have to maintain state
17:46 < jameshowe> it has to maintain state anyway
17:46 < jameshowe> that's what a sesison is
17:46 < asdf12> right but you're moving it to the routing level
17:47 < spideep> I am following a NodeJS, Express, Jade, Stylus beginner's tutorial...  this is the error in my terminal: Error: listen EADDRINUSE, I think I have installed Jade in a wrong way... permissions maybe?? I would appreciate any help. Thanks
17:47 < jameshowe> no state needed, just a hash ring or something
17:47 < asdf12> yea but you're making http requests have state, when http is stateless, it's just opening up a lot of problems
17:47 < jameshowe> that's what cookies are
17:47 < jameshowe> spideep: most likely there's already something running on that port
17:48 < jameshowe> if you just move to a database, that gives you a single point of failure
17:48 < jameshowe> which defeats the point of load balancing
17:48 < alchimi__> people, u all discuss the problem that i wrote?!
17:48 < mg9831> hello there. I am using OSX. I went to nodejs.org and clicked on install, ran the installation process and created a simple console.log('hello world'); file (test.js)… when I ran "node test.js" it returns "-su: /usr/sbin/node: No such file or directory" anyone know what could be the issue?
17:48 < alchimi__> or it is s.th else
17:49 < jameshowe> and if you balance the database too, without intellegent routing, the HTTP request can get to it before your session data has
17:49 < jameshowe> yes, alchimi_ your thing
17:49 < alchimi__> thanx
17:49 < alchimi__> so what is the advice
17:49 < asdf12> it's not a single point of failure, you're making your applications stack as stateless as possible
17:49 < guidocalvano> mg9831: did you restart your terminal?
17:49 < mg9831> yeah
17:50 < jameshowe> so if the database goes down, that doesn't break your app?
17:50 < guidocalvano> mg9831: why does it say sbin?
17:50 < spideep> Thanks jameshowe, I changed that port, now this error is shown: "Error: Failed to lookup view "index""
17:50 < mg9831> That I can't answer
17:50 < deoxxa> mg9831: did you install the 64 bit version on 32 bit os x, perhaps?
17:50 < asdf12> jameshowe: you do realize if you did routing based on http cookie headers, the database goes down, your app goes down regardless? -_-
17:50 < asdf12> so your example is pointless
17:51 < alchimi__> so asdf12: what u adive me?
17:51 < jameshowe> only if it's using a database already, and you haven't got failover/balancing on the db
17:51 < alchimi__> as I said i have 4 server, 1 is load balancer, 1 is db server, 2 is app server
17:51 < jameshowe> if you do have failover/balancing, it still won't work properly unless you route on cookies
17:51 < alchimi__> and in my app i am using passportjs
17:52 < spideep> I'll be back later, thanks jameshowe
17:52 < asdf12> it would work probably, i have no idea what you mean jameshowe
17:53 < jameshowe> because your HTTP traffic can jump db servers fatser than they can replicate your data
17:53 < asdf12> no
17:54 < jameshowe> yes, I have seen it in Real Life(TM)
17:55 < alchimi__> :) ok, what is the final advice
17:55 < alchimi__> and any link or example is appreciated 
17:55 < jameshowe> if you only have 4 servers to play with, load balancing is probably not worth it
17:56 < jameshowe> and if you want a good, reliable, fast load balancer that's easy to configure for various uses, use haproxy
17:56 < alchimi__> jameshow: for now (experimenting phase) I have 4 servers, later I will have more servers
17:57 < kinabalu> Hey guys, is there a node.js module for NTLM auth?  if nothign specific, i was going to modify this to suit my needs - https://github.com/jclulow/node-smbhash
17:58 < alchimi__> jameshow: I am going to use also haproxy, but as requirment of the experiment that I am doing I have to at least use a nodejs module too
17:58 < asdf12> databases are good at handling data
17:59 < deoxxa> asdf12: what the heck?!
17:59 < asdf12> do not add state to incoming requests
17:59 < jameshowe> a) the internet has more bandwidth that you can possibly get in a replication pipe, b) they already have state
18:00 < jameshowe> "HTTP State Management Mechanism" being the name of the cookie standard
18:00 < asdf12> your replication problem is not a real issue, if you are getting requests faster than you can replicate, then you're doing it wrong
18:01 < jameshowe> if you have users in Africa, and only datacentres in Europe and the US, it will happen
18:02 < asdf12> think about what you're saying not just in this case, but data transactions as a whole, if anytime you want to save an important piece of data, and that db server
18:03 < asdf12> blows up before it could replicate, then man that is one risky operation
18:03  * cloudbender slaps the nearest person for no reason whatsoever
18:04 < jaya_> Hello Guys !
18:04 < kevindish> Does somebody know a good simple background worker? Have search Google but seems i only find big ones like celery.
18:05 < jaya_> I'm from Srilanka ..Is Node.js is used in Industry ?
18:05 < cloudbender> Fact: It requires more calories to digest celery, than one gets from the celery being digested.
18:06 < cloudbender> jaya try node and form your own opinion.  It will be worth your time I promise.
18:07 < kevindish> cloudbender: What? :P
18:07 < cloudbender> celery ^^
18:08 < kevindish> It is a little bit hard digesting this http://celeryproject.org/
18:10 < cloudbender> It kinda looks like frankenware
18:10 -!- Topic for #Node.js: v0.10 comes Monday 2013.03.11 - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
18:10 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Wed Mar  6 22:10:29 2013]
18:10 < cloudbender> node has child processes forked or spawned if that works for you
18:10 < alchimi__> jameshowe: for haproxy any good tutorial how to start?
18:11 -!- isaacs changed the topic of #Node.js to: v0.10 is out - http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/ - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
18:11 < SJKramer> Good morning, gentlemen.
18:11 < kevindish> cloudbender: Yes, but the task has be done serial
18:11 < SJKramer> I aim to make me a website.
18:12 < Fishrock123> SJKramer: Express.js
18:12 < kevindish> It is because our provider only allow 1 request at a time
18:12 < cloudbender> you mean sequentially versus asynch ?
18:12 < SJKramer> Eloquent, Fishrock. Word up?
18:13 < SJKramer> My manager already spat a list of buzzwords in my face, thank you Fishrock. My job is to cobble them together into a product we can sell.
18:13 < kevindish> yes, it has be sequentially, but has to be done by a background worker.
18:13 < SJKramer> Did you have a point?
18:13 < SJKramer> You're slow Fishrock.
18:13 < cloudbender> Is it working on global data ?
18:13 < cloudbender> or shared data ?
18:13 < Stephen> Hah
18:13 < Fishrock123> SJKramer: ......
18:13 < SJKramer> Anybody else lisetning?
18:13 < SJKramer> Yes, Fishrock.
18:13 < Stephen> 0.10 stable is out
18:13 < SJKramer> I'm going too fast for you. I apologize.
18:13 < Stephen> awesome
18:14 < SJKramer> I need to chill.
18:14 < SJKramer> I know.
18:14 < SJKramer> I just want to get the thing installed
18:14 < SJKramer> I mean, I did.
18:14 < SJKramer> But there's no installer docs!
18:14 < SJKramer> Am I missing them?
18:14 < SJKramer> I ran the installer but what next?
18:14 < SJKramer> I've never used node.js
18:15 < cloudbender> and there it is
18:15 < SJKramer> Anybody's help would be appreciated. SJKramer out. :)
18:15 < SJKramer> And there you have it :)
18:15 < Fishrock123> SJKramer: Just. Slow. Down. lol
18:15 < SJKramer> lol
18:15 < SJKramer> I know
18:15 < SJKramer> I freak out sometimes.
18:15 < asdf12> yea
18:15 < asdf12> you
18:15 < asdf12> could
18:15 < SJKramer> Need meds I bet
18:15 < asdf12> combine your lines
18:15 < asdf12> into 
18:15 < asdf12> 1
18:15 < SJKramer> Don't flood asdf
18:15 < SJKramer> Dork
18:15 < Fishrock123> SJKramer: The downloads for node itself are here, including the installers. http://nodejs.org/download/
18:16  * cloudbender is charging his HeRF gun
18:16  * SJKramer is loading up his styrofoam disc shooter and giving cloudbender the stinkeye
18:16 < SJKramer> Already did that Fishrock
18:16 < brianc1> hey
18:16 < ddod> sjkramer can you float the idea to your boss to perhaps fire you and hire me instead?
18:16 < SJKramer> I'm on Windows and there's no icon to start the server
18:17 < brianc1> i just had node v0.9.12 segfault on me
18:17 < SJKramer> hahaha!
18:17 < brianc1> not using any native modules
18:17 < SJKramer> Well I dunno.
18:17 < asdf12> brianc1: 0.10 is out
18:17 < SJKramer> I know you could get the job, but could you DO the job?
18:17 < brianc1> well dang
18:17 < brianc1> hopefully that one doesn't segfault too
18:17 < SJKramer> Fishrock, you dig where I'm coming from?
18:17 < ddod> sjkramer, well i wouldn't be looking for the nodejs icon
18:17 < SJKramer> I'm not, fishlips.
18:17 < SJKramer> I'm looking for installer documentation
18:17 < cloudbender> You have the job but you can't start node.  Can I have your job ?
18:18 < cloudbender> I can start node.
18:18 < brianc1> when it says "core dumped" do you know where the core is dumped to?
18:18 < SJKramer> This is why I have the job and you don't, ddod ;)
18:18 < Fishrock123> SJKramer: You install it by running the installer files.
18:18 < nikkubhai> #drupal
18:18 < deoxxa> SJKramer: node.js isn't a "server" - think of it more like .net or java. it's a set of APIs and a runtime environment. you use it to write your own servers.
18:18 < Fishrock123> SJKramer: I.e. the .msi, the .pkg
18:19 < SJKramer> deoxxa! Ah ha! Someone who knows what he's talking about amidst the obligatory flamewar.
18:19 < ddod> sjkramer$ node.createmysite()
18:19 < SJKramer> So it's like a script interpreter
18:19 < deoxxa> SJKramer: bingo, buddy
18:19  * SJKramer launches a disc in ddod's direction
18:19 < Fishrock123> SJKramer: You didn't know that? Well.. anyways, docs are here: http://nodejs.org/api/
18:19 < SJKramer> Alright. So I need to launch the payload my manager atteched to his weekend e-mail message :P
18:19 < daekano> var website = require('internet').createWebsite('like', 'facebook.com');
18:20 < daekano> website.deploy();
18:20 < daekano> bank.wait();
18:20 < Fishrock123> LOL
18:20 < deoxxa> SJKramer: so you're going to want to open up a text file and shove in `require("http").createServer(function(req, res) { res.end("hi there"); }).listen(8080)`, then run that with node. that'll be your first server :>
18:20 < daekano> self.cry();
18:20 < SJKramer> Not knowing things is human, Fishrock. Knowing what you need to know to survive is manhood. And for the last time, you can't have my job :D
18:20  * SJKramer strafes the trolls
18:20 < daekano> deoxxa: s/hi\ there/hello\ world
18:21 < SJKramer> Sweet, thanks deoxxa
18:21 < daekano> get it right
18:21 < SJKramer> Escaping quotes is for script kiddies, daekano
18:21 < SJKramer> daekano.spank()
18:21 < SJKramer> lol
18:21 < deoxxa> daekano: 'ELLO PLANET
18:21 < daekano> rofl
18:21 < SJKramer> Alright I'll give that a shot deoxxa thax man
18:21 < Fishrock123> SJKramer: Where did I ask for your job? Whatever. I'll let the rest of these people deal with your problems.
18:22 < ddod> so actual node noob question here: what's the best way to send a binary string i have in memory through Express and have it displayed as an image on the client?
18:22  * SJKramer fires one last shot at the b ack of Fishrock's trolly head :D
18:22 < daekano> daekano.laugh();
18:23 < Fishrock123> Trolling? Think what you like.
18:23 < SJKramer> I do. This world needs more independent thought :)
18:23 < SJKramer> "And he knew, also, what the old man was thinking as his tears flowed, and he, Rieux, thought it too: that a loveless world is a dead world, and always there comes an hour when one is weary of prisons, of one's work, and of devotion to duty, and all one craves for is a loved face, the warmth and wonder of a loving heart." -- Albert Camus, The Plague
18:23 < daekano> you can be independent in the corner, independently.
18:24 < SJKramer> But I also plagarize when convenient. And I don't take no crap off somebody whose idea of socialization is writing lines of code on IRC to simulate emotions. :P
18:24 < jaya_> I have some Javascript Experience
18:24 < ddod> sjkramer, i'm just impressed you managed to find the irc channel but not any of the millions of intro guides, tutorials, and docs on nodejs
18:24 < SJKramer> daekano.puInCorner()
18:24 < daekano> lol ddod
18:24 < jaya_> Is Node.js == Javascript ??
18:24 < Fishrock123> Some people are just downright annoying.
18:24 < asdf12> ddod: lol
18:24 < Fishrock123> Also, Ill be back later of you need me.
18:25 < SJKramer> Aw. Ego bruise. Those can smart.
18:25  * SJKramer gets back to real work
18:26 < asdf12> ddod: how did you get the binary string? you'd use a Buffer (it's probably already a buffer)
18:26 < ddod> asdf12, it was from a Request
18:26 < ddod> but i think ive given up on that and i'll just send the originating url
18:26 < ddod> save myself some bandwidth
18:27 < pachet> so you're making a req for the imagedata?
18:27 < pachet> should be able to just pipe it to the client req
18:28 < ddod> how would i do that piping
18:29 < fusiongrokker> 0.10 is the first new stable release since I started using node... I'm trying to upgrade via homebrew, but getting this response. Not really sure how to interpret it. Can anyone offer advice? https://gist.github.com/atuttle/30cb3742b06a8d0e02f2
18:30 < azylman> fusiongrokker: Which part of it is confusing?
18:31 < azylman> It's telling you that if you upgrade node via brew, it's going to need to install npm. But you already have npm installed. So you either need to uninstall it, using the instructions they give you, or keep your current installation, using the instructions they gave you.
18:31 < fusiongrokker> well, it doesn't explain why the node upgrade failed -- was it because of the npm message? and it doesn't explain why I would choose to stay with my current npm install or to take the new one. my guy says to go with the new one but being a noob to node I'm gunshy to just start making changes without knowing the potential problems...
18:32 < fusiongrokker> my gut* says
18:32 < azylman> I'd guess you should go with the new one, but I didn't install node via brew (I used nvm instead) so I can't say for sure
18:32 < fusiongrokker> nvm is node version manager, right? that would seem like a good idea... maybe I'll look into that.
18:32 < azylman> Yeah
18:33 < azylman> It's pretty legit
18:33 < azylman> Like for me to upgrade I'm just going to do "nvm install 0.10" and "nvm alias default 0.10"
18:34 < korilo> fusiongrokker, yes there is also n as well
18:34 < fusiongrokker> ahhhh! paradox of choice! :P
18:34 < superjoe> I don't believe in the paradox of choice
18:35 < superjoe> if you're annoyed by choosing, just pick choices[0]
18:35 < korilo> lol
18:35 < fusiongrokker> who determines the order? :P
18:35 < fusiongrokker> it's not that I'm annoyed
18:35 < fusiongrokker> it's that I've been burned in the past by making, and living too long with, bad choices
18:35 < superjoe> ok fine. function choose() { for (var id in choices) { return choices[choiceId]; }
18:36 < ddod> if any of you are bored and want to help me playtest a little node/socket project i'm working on check out http://deepship.com/audio
18:36 < korilo> does this always return the first elem lol
18:36 < superjoe> korilo, yeah after I fix both of the typos
18:37 < cmoncrief> You can always go with the installers on the node website, if you only need one version of node installed at a time.They are pretty straightforward.
18:37 < superjoe> ddod, this is too cool to check out right now, it would make me unproductive at work
18:38 < ddod> superjoe haha thanks
18:38 < ddod> there's a bit of complexity to it
18:38 < ddod> the whole upgrade system is pretty fleshed out
18:39 < pachet> ddod: sorry for the late response, something like https://gist.github.com/anonymous/5136475
18:39 < ddod> ah thanks pachet
18:39 < pachet> but then im not really sure what you're doing
18:39 < ddod> ha neither am i
18:39 < pachet> heh
18:44 < SJKramer> Guess it helps to have nodejs in your environment variables when you install on Windows. #protip
18:44 < fusiongrokker> hm, so I installed N and attempted to install 0.10 using "n stable" but that grabbed 0.8.22
18:44 < deoxxa> windows is bad, mmkay
18:44 < deoxxa> fusiongrokker: ha, i guess n does a lexical sort
18:44  * SJKramer hangs his head in shame
18:45 < daekano> lol
18:45 < daekano> ddod: interesting
18:47 < ddod> i'm thinking of making it a bit more accessible and turning it into the first blind-friendly mmo
18:47 < ddod> don't know if anyone here is blind, but if you are, i could use your help
18:48 < daekano> ah, the /audio should have been an indicator for me to put on my headphones
18:49 < fusiongrokker> so I updated to 0.10 via N, do I need to update npm? (how?)
18:49 < fusiongrokker> apologies for the noob questions :\
18:49 < gkatsev> npm update npm
18:49 < daekano> you may want to look into key bindings then ddod
18:49 < ddod> it's more just for atmosphere now, but i think the way it's designed would work well for screenreaders
18:49 < deoxxa> fusiongrokker: do `npm -v'
18:49 < daekano> instead of typing
18:49 < ddod> good idea, daekano
18:49 < deoxxa> fusiongrokker: you should be on 1.2.14
18:50 < daekano> would be cool to set up macros as well
18:50 < fusiongrokker> module.js:340
18:50 < fusiongrokker>     throw err;
18:50 < fusiongrokker> Error: Cannot find module 'npmlog'
18:50 < ddod> the whole thing is really accessible for bots, as well
18:50 < ddod> so it will be interesting to see what people can do with it
18:50 < daekano> haha
18:50 < daekano> baidu is going to be the highest rated player 
18:51 < SJKramer> A blind-friendly mmo... that's a cool idea, ddo.
18:51 < daekano> that guy goes to my website all the time!
18:51 < korilo> fusiongrokker, the latest npm is 1.2.14
18:51 < korilo> just do npm -v and in case (sudo) npm update npm -g
18:51 < korilo> but that should come with node i guess
18:52 < ddod> it's going to be interesting to figure out who is using bots and who isnt
18:52 < fusiongrokker> korilo: the above error is what I get when I do npm -v
18:52 < ddod> timing analytics
18:52 < ddod> most likely
18:52 < korilo> fusiongrokker, weird
18:52 < fusiongrokker> aye
18:52 < korilo> try re-installing the whole
18:53 < fusiongrokker> can do... just gotta figure out the right way to uninstall. pretty sure I went with the normal download on nodejs.org originally...
18:54 < korilo> just filled a job application as node nosql develper lol
18:54 < SJKramer> nosql :D
18:55 < korilo> yes they need ppl that know or have experience with node and a plus is to have experience with nosql db like mongo, redis and cassandra
18:55 < korilo> i could have just written node dev i know lol
18:55 < SJKramer> The industry has stretched the SQL lexicon a bit. That's all :)
18:56 < daekano> ?
18:56 < SJKramer> NoSQL?
18:56 < genazt> which means _no_ sql
18:56 < SJKramer> Exactly.
18:56 < korilo> nope
18:56 < SJKramer> So they could have called it NoCheese
18:56 < SJKramer> NoAnything
18:56 < daekano> uh
18:56 < korilo> it means not only sql
18:56 < SJKramer> There's lots of things it's not
18:56 < _6a68> um
18:56 < korilo> Not Only SQL
18:57 < SJKramer> Ohhhhhhhh hahaha!
18:57 < genazt> looooool
18:57 < Gregor> By my understanding, it means "waaah I'm afraid of relational databases they're big and scary"
18:57 < SJKramer> looooooooooooool :)
18:57 < SJKramer> Yeah, I'm with u Gregor
18:57 < genazt> mongodb, couchdb and redis doesnt have a sql interface
18:57 < daekano> Who needs ACID?
18:57 < SJKramer> Hackers getting lazy up in here :)
18:57 < korilo> they aren't btw when you go deep in data normalization etc etc
18:57 < SJKramer> etc etc etc indeed
18:57 < SJKramer> Dude sounds like the king of Siam
18:57 < zomg> There's about equal amounts of big and scary about nosql databases as there are about sql databases :P
18:57 < _6a68> right tool for the job is sometimes not a relational database
18:57 < korilo> indeed
18:58  * _6a68 shrugs
18:58 < SJKramer> It's not about big and scary, it's just about getting the job done.
18:58 < SJKramer> Done right.
18:58 < genazt> _6a68, right
18:58 < SJKramer> That's right, sometimes its overkill
18:58 < SJKramer> But sometimes it fits like a glove
18:58 < SJKramer> And you can't let "big and scary" get in your way.
18:58 < genazt> sometimes
18:59 < genazt> it depends on the case
18:59 < SJKramer> It does.
18:59 < genazt> sometimes a nosql is better
18:59 < SJKramer> But relational DB has been industry standard for a long time
18:59 < genazt> sometimes a relational is better
18:59 < korilo> it doesn't mean SJKramer 
18:59 < korilo> is better
18:59 < genazt> yes, it has
18:59 < korilo> when you need transaction for example
18:59 < genazt> win 3.11 also was a stable os -_- if you argument that way
18:59 < korilo> and you are a bank and can't lose anything
18:59 < SJKramer> Aaaaand a new IRC debate is born. Have at it, gentlemen :) I gotta get back to work.
19:00 < korilo> genazt, lol
19:00 < genazt> mongodb can also transact
19:00 < korilo> i know
19:00 < SJKramer> ADHD
19:00 < korilo> i'm just saying ppl feel more confortable with sql
19:00  * SJKramer raises hand
19:00  * SJKramer scans the room
19:00 < korilo> if they need consistency
19:01  * SJKramer smiles
19:01 < SJKramer> Bye y'all
19:01 < korilo> bye
19:01  * SJKramer goes back to work
19:01 < genazt> yes they feel
19:02 < genazt> but in some cases a nosql can still be the better use case even if you need consistency
19:02 < korilo> mmm could be.....
19:02 < korilo> not sure btw...at least haven't seen somthing need consistency and using nosql
19:02 < korilo> but yes you're right
19:03 < genazt> well before i am forced to use blobs or text in sql land i use a nosql :D
19:03 < genazt> the only thing i really miss a foreign keys
19:03 < korilo> right lol
19:03 < genazt> are*
19:03 < korilo> have you tried cassandra=
19:03 < korilo> ?
19:03 < genazt> no
19:04 < korilo> that db is amazing when you have really huge dataset
19:05 < genazt> it looks like a key value store combined with database capabilities
19:05 < korilo> yup
19:05 < genazt> but again it doesnt have foreign keys
19:05 < genazt> but why does no nosql db has something like this
19:06 < gazarsgo> you mean referential integrity constraints ? because that's what nosql is trying to get away from ...
19:07 < korilo> cause you don't need relation i suppose
19:07 < gazarsgo> you're supposed to generate your own lookup tables and manage them with your application layer
19:07 < genazt> well its bad to get away from this
19:07 < gazarsgo> congratulations, you've self-selected out of the nosql community
19:07 < genazt> so you have to do it all in your app
19:07 < genazt> which can lead to race conditions if your app breaks
19:08 < genazt> and can mess up all your data
19:11 < cloudbender> object databases have inherent referential integrity
19:12 < cloudbender> A good example is db40
19:13 < cloudbender> not sure of how well couchbase handles it
19:13 < cloudbender> But I'll be trying it
19:13 < genazt> http://docs.mongodb.org/manual/applications/database-references/
19:13 < genazt> nice :D
19:13 < cloudbender> or that
19:14 < djshotglass> good day
19:14 < cloudbender> I think mongoDB is using an Object-Relational-Model
19:14 < djshotglass> i have tested out the cloud9 and subway packages and would like to remove them both
19:15 < cloudbender> db4o does not.
19:15 < djshotglass> do i just delete the git repo? or did npm install copy the files somewhere
19:15 < cloudbender> db4o is a pure object database engine
19:15 < genazt> well i like mongodb
19:15 < cloudbender> there is no 'normalization'
19:15 < genazt> and if i use nosql i go with it
19:16 < genazt> it has so much nice things
19:16 < genazt> like expire indexes
19:16 < genazt> :D
19:16 < cloudbender> I'll probably look at mongo also
19:17 < Bugz___> mongodb ftw
19:17 < genazt> if i am more with mongodb i try to use capped collections for express sessions
19:17 < genazt> which should be no problem
19:18 < cloudbender> The database cache engine I am writing for node is an object database.
19:18 < cloudbender> the persistance will be either mongo or couch
19:18 < genazt> well i would like to find people to port doctrine2 to nodejs
19:19 < genazt> but its hard to make, and the php lib of it is awesome
19:21 < cloudbender> maybe doctrine is ok for what you are doing ?
19:21 < genazt> i dont think there is something like doctrine in nodejs
19:21 < cloudbender> I switched to node so I can have the same language at either end of the pipe
19:22 < cloudbender> ... and discovered AWESOME ness
19:23 < genazt> yes nodejs is awesome
19:23 < Bugz___> indeed
19:23 < genazt> but there are some modules that i still miss
19:23 < cloudbender> there are a few things I don't like, but overall it's pretty great
19:23 < genazt> doctrine2 is one of them
19:23 < genazt> a good date/timezone i18n lib is another :D
19:24 < Kakera> anyone having experience with node-serialport?
19:24 < Kakera> for some reason, listening for 'data' on process.stdin and manually writing to serialPort works fine
19:24 < Kakera> but piping doesn't pipe
19:25 < teadict> does anybody know if there's a Chef cookbook for node?
19:25 < teadict> the one in the Chef's website is not updated
19:29 < faceleg> good lord what is to like about doctrine?
19:32 < teadict> faceleg: the butt rustling
19:32 < faceleg> lol?
19:33 < cmoncrief> ...
19:34 < ddod> Does anyone here use puush? I just made this and posted it to hn: http://news.ycombinator.com/item?id=5359066
19:39 < zone117x> hey guys. should I not expect node v0.10 to be installed on ubuntu when I run sudo apt-get install nodejs npm ?
19:39 < faceleg> zone117x: you should not
19:39 < faceleg> unless you've updated your repositories
19:39 < naomi> zone117x: it will be a while before an official package is realeased
19:39 < faceleg> zone117x: I think ubuntu quantal has 0.6
19:39 < faceleg> go to node install page for details on adding more up to date repo
19:39 < naomi> zone117x: it's really easy to setup on your own though
19:40 < zone117x> okay. is this that page? https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
19:43 < cmoncrief> This PPA usually updates pretty quickly. He tweeted a little while ago that 0.10 will be up on Thursday. https://launchpad.net/~chris-lea/+archive/node.js
19:44 < zone117x> great. thanks for the info guys. I've read that this was a great community. first time seeing it for myself :)
19:46 < sgallagh> We at Fedora are planning to have 0.10 available in the updates-testing repository by tomorrow, for those who are interested :)
19:47 < Havvy> sgallagh: Nice.
19:48 < faceleg> sgallagh: try not to make me regret using ubuntu over fedora too much, please
19:48 < sgallagh> faceleg: I usually let Canonical take care of making people regret using Ubuntu ;-)
19:48 < Bonuspunkt> did anyone say already NODE IS AWESOME
19:48 < Bonuspunkt> and I LOVE THE NEW STREAMS
19:49 < faceleg> sgallagh: they do a pretty good job, you're right. personally I get sick of alt+f2, login, sudo service lightdm restart
19:49 < faceleg> Bonuspunkt: YES IT IS SO AWESOME OMG 
19:49 < faceleg> I rub it into my face before sleep
19:50 < faceleg> sgallagh: which I have to do frequently as it all seems so fragile and freezalicious
19:50 < faceleg> s/seems/is/
19:50  * sgallagh shrugs. I'm a KDE-on-Fedora user myself.
19:50 < sgallagh> That's my "getting things done" OS.
19:51 < faceleg> ubuntu is my 'getting things done until something happens and I have to spend 10 minutes waiting for it to restart" os
19:52 < superjoe> faceleg, that's bullshit
19:53 < superjoe> what do you have to wait for to restart?
19:53 < niggler> ubuntu is bloatware
19:53  * faceleg prepares the sword & shield
19:53 < virtualsue> oh yawn
19:53 < faceleg> superjoe: you're welcome to come over and see for yourself
19:53 < superjoe> does that mean you're giving me ssh access? :P
19:54 < faceleg> superjoe: no you'd have to physically come here
19:55 < asdf12> that'll be 100$ for on site technical support
19:55 < niggler> i daresay that osx has less UI bloat than ubuntu
19:55 < faceleg> niggler: I'd believe it
19:56 < asdf12> how's your project with threads coming?
19:56 < faceleg> unity, my word. I think my system is so unstable b/c I refuse to use it and force ubuntu to show me gnomeshell
19:56 < faceleg> asdf12: good, I grok the necessary things now, it's all refactoring
19:57 < asdf12> what does it do again?
19:59 < superjoe> faceleg, I'm with you on unity hate
20:00 < faceleg> asdf12: nodegit, async wrapper for libgit2
20:01 < asdf12> oh i thought it was bring threads to node userland
20:01 < faceleg> noah
20:01 < faceleg> nah*
20:04 < faceleg> users don't deserve threads
20:04  * azylman fights for the user.
20:05 < azylman> s/user/users
20:07 < diogogmt> anybody knows who is the maintainer of the https://github.com/indexzero/winston-redis lib?
20:08 < asdf12> indexzero?
20:08 < _6a68> heh
20:08 < diogogmt> yes
20:09 < diogogmt> does he hang around here?
20:10 < _6a68> diogogmt maybe try #nodejitsu?
20:12 < korilo> i'll make an xmpp bot for my dev team with your libgit2 faceleg :)
20:15 < spideep> Hello from Lima, Perú
20:16 < spideep> I am following a NodeJS, Express, Jade, Stylus beginner's tutorial...  this is the error in my terminal: Failed to lookup view "index", I think I have installed Jade in a wrong way... permissions maybe?? I would appreciate any help. Thanks
20:17 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:18 < asdf12> 'index' file is in the wrong path, or the file extension is wrong
20:19 < asdf12> or, you have the wrong view engine set
20:20 < faceleg> korilo: cool, let me know what things are particularly broken / missine
20:20 < faceleg> s/missine/missing
20:21 < jhsto> does anyone know you can write stuff in ISO-8859-1 to a file?
20:21 < context> jhsto: was that a question or a statement ?
20:22 < jhsto> excuse my brevity, I of course meant *how* - so a question
20:23 < faceleg> korilo: lol waht a noob, I just google xmpp, ignore my last message
20:24 < Advant> TooTallNate:  you around?
20:28 <@TooTallNate> Advant: yo
20:29 < Advant> TooTallNate:  I was using your telnet lib, and maybe I didn't understand it correctly, but it looks like .write ultimately converts to a 'utf-8' string and no way to write byte buffer directly?
20:30 <@TooTallNate> Advant: can you show me some code that's failing for you?
20:31 < Advant> TooTallNate:  I was working with a client that doesn't support unicode, so I attmpted to write extended ascii directly like client.write('\xC0'), but when I looked at the traffic dump it looks like '\x86' was being appended to my single bytes
20:31 < korilo> faceleg, np lol i should have written Jabber maybe
20:32 < SJKramer> Does the Node.js Windows installer put an install log anywhere? Anybody know? It failing but won't give me a clue as to why. I'm not keen on putting the stupid installer under a microscope, but it's being ridiculous and won't say what it's problem is.
20:32 < spideep> -Failed to lookup view "index"-
20:32 < spideep> what does it mean?
20:32 < spideep> means*
20:32 < SJKramer> All I get is this "Setup Wizard has ended prematurely because of an error" gloss. Not helpful.
20:33 < korilo> as asdf12 said, either index file is the wrong path or the file extension is broken spideep 
20:33 < Advant> SJKramer:  you check windows event log?
20:33 < korilo> use *nix!!!!!
20:33 < SJKramer> Good call Advant, good advice korilo, but I've got what I've got. :P
20:33 < korilo> im joking SJKramer :)
20:34 < SJKramer> I know, old joke thats all :)
20:35 <@TooTallNate> Advant: if you could create a failing test case that would be awesome
20:36 <@TooTallNate> Advant: at first glance, it looks like the "convertLF" logic could be better
20:38 < faceleg> any vim users here
20:38 < Advant> TooTallNate:  yeah I can probably do later tonight, make sure I didn't over look anything. Ultimlately I added a .writeBytes() method.  Should I create an issue on github and post findings there?
20:38 <@isaacbw> emacs 4 lyfe
20:38 < korilo> faceleg, is "nodegit": "~0.0.72", ok to target your lib?
20:38 < daekano> vim is for nerds
20:38 < faceleg> I mean actual users, knowing how to quit doesn't count
20:38 < faceleg> korilo: 
20:38 < korilo> ST is for pro!
20:38 < faceleg> yes
20:38 < faceleg> korilo: yes I use it on my local
20:38 < korilo> nice
20:39 < faceleg> korilo: I will be following tha tconvention with versioning yes
20:39 <@TooTallNate> Advant: i mean you may have run into a genuine bug… .write() should accept a Buffer instance without complaining
20:39 <@TooTallNate> Advant: but a test case would help me confirm
20:40 < Advant> TooTallNate:  Ok, will do
20:40 < SJKramer> No luck on the app logs, Advant... not enough detail in there. Just MsiInstaller messages. I might have to go medieval on this so-called Install Wizard.
20:40 < faceleg> korilo: but I maintain a lot of sites, not always practical to get them running on my local in order to make a simple change
20:40 < Advant> SJKramer:  UAC causing an issue?
20:40 < faceleg> therefore skillz with vim/vimdiff/git cli are essential
20:40 < qubit01> ouch
20:41 < qubit01> you should stop that as soon as possible - are you using version control ?
20:41 < faceleg> just wanted to affirm that time put into learning vim actually pays off with fluency, or if it's always a constant battle
20:41 < faceleg> yes
20:41 < faceleg> qubit01: I do changes on the testing versions, not into the live sites
20:41 < SJKramer> UAC...?
20:41 < faceleg> and yes I do feature branch, all that jazz
20:41 < faceleg> just not worth the n*10 minutes it takes to get a site running just to fix a minor bug
20:41 < qubit01> I see, if you don't know either, I would recommend emacs - but Im an emacs fan 
20:42 < SJKramer> Forgive me, Advant, but should UAC mean something to me?
20:42 <@isaacbw> emacs 4 lyfe
20:42 < SJKramer> *nix gangsta
20:42 < faceleg> qubit01: yes I hear that is good. I used it @ uni but that was 5 years ago. do you have a few specific reasons for it being better?
20:42 < qubit01> +1 isaacbw , gansta's use emacs
20:42 < SJKramer> That would make a badass geek tat
20:42 < SJKramer> emacs4lyfe
20:43 < faceleg> You don't quit Vim it quits you
20:43 < korilo> faceleg, does your lib read remote repo too? #lazyreadingdoc
20:43 < SJKramer> :)
20:43 < qubit01> faceleg, mostly the macro system, I mostly use IDE's for everything now except clojure, but I still go back to emacs to perform complex text based tasks / data cleanup
20:43 <@isaacbw> I know the vim navigation keys because of roguelikes
20:43 < SJKramer> Advant? I'll google it.
20:43 < btyler> did you have a vim question, faceleg?
20:43 < qubit01> emacs = Editor MACroS
20:43 < faceleg> korilo: as in clone, pull? 
20:43 < faceleg> clone is finished in libgit2, but not implemented in nodegit
20:43 <@isaacbw> I would like to learn emacslisp at some point
20:43 < korilo> i mean to get history faceleg 
20:44 < faceleg> no
20:44 < faceleg> works on local
20:44 < korilo> argh
20:44 < Advant> SJKramer:  User Access Control, i.e. rlight cick and run as Administrator
20:44 < faceleg> one must clone to local first
20:44 < korilo> will try on local then
20:44 < faceleg> I don't thikn libgit2 allows working with remotes
20:44 < korilo> but remote was really nice to have
20:44 < korilo> that makes sensetoo
20:44 < faceleg> btyler: more of a "I've put so much time into leanring it, is it going to be worth it"?
20:44 < deoxxa> you have to fetch the remote data to do things like history
20:44 < korilo> s/sensetoo/sense too/
20:45 < korilo> gotcha
20:45 < korilo> will dive into now
20:45 < faceleg> korilo: remote would be too slow for any serious use
20:45 < faceleg> async or not
20:46 < faceleg> qubit01: oh so emacs wouldn't be a competitor for say, ST2?
20:46 < btyler> faceleg: depends what you mean by worth it. being comfortable with vim means I'm quite comfortable in just about any unix environment from the get-go, and some RSI issues have gone away moving from mouse-drivien editors to vim
20:47 < faceleg> btyler: yes RSI is an issue for me, and yes @ vim making me better at *nix
20:47 < faceleg> I find myself using ctrl+u to try to clear line even in browsers now...
20:47 < faceleg> I've forced myself to learn tmux fairly well also, and zsh
20:47 <@isaacbw> that's the biggest downside of emacs to me, is that if I'm on a system where I can't install shit, I have to use nano because I don't know how to use vi
20:47 < qubit01> faceleg, never used ST2 - looks very cool
20:47 <@isaacbw> but I'm usually not in that situation
20:48 < faceleg> qubit01: it is like cake without the calories
20:48 <@isaacbw> vim/emacs are in a world of their own
20:48 < harrisonm> I switch off between ST2 and vim depending on what I'm doing
20:48 < faceleg> isaacbw: sometimes I am, and I can't stand nano - vi/vim is almost always installed
20:48 <@isaacbw> I think comparing them to sublime text or anything like that is going to be problematic
20:48 < faceleg> yeah
20:48 < qubit01> is ST2 usable from CL ?
20:48 < daekano> no
20:48 < faceleg> as in can you open files from cli?
20:49 < qubit01> no I mean if you need to edit files on a headless server - than its usually back to vim or emacs, or pico/nano
20:49 < faceleg> yes
20:49 < faceleg> no cli for st1
20:49 < qubit01> still ST looks very slick
20:49 < faceleg> *2
20:49 < faceleg> it is the boss
20:50 < faceleg> I've made vim almost as good though, with plugins
20:51 < faceleg> only lacking multi-cursor, multi pane features
20:51 < korilo> ST2 with the upcoming Ternjs plugin will be amazing faceleg 
20:52 < Stephen> Hmm... not so many came back
20:52 < Stephen> I'm afraid they seem to have done it, too
20:52 < faceleg> korilo: ternjs?
20:52 < korilo> http://www.indiegogo.com/projects/tern-intelligent-javascript-editing?c=home
20:52 < korilo> see it yourself
20:53 < korilo> for me it'sthemost amazing stuff for JS dev like me
20:53 < faceleg> korilo: please for the love of god let me become a js dev
20:53 < faceleg> full time
20:53 < korilo> have you seen it?
20:54 < faceleg> watching now
20:54 < korilo> isn't it amazing:3
20:54 < korilo> lol
20:54 < faceleg> yes
20:54 < faceleg> I've watched 2 mins and I'm sold
20:54 < ericelliott> tern looks very helpful
20:54 < ericelliott> I want it in sublimetext.
20:55 < korilo> i mean, it's a feature none of the js editors never had
20:55 < drudge> chocolat is integrating tern
20:55 < korilo> it will be hopefully if 15k will be raised
20:55 < korilo> by the same ternjs author
20:55 < korilo> he's still deciding whether to support both ST2 and ST3
20:56 < korilo> the voting is here -> http://ternjs.net/vote.html
20:56 < defunctzombie> bnoordhuis: https://github.com/joyent/node/issues/4981#issuecomment-14741709
20:56 < defunctzombie> bnoordhuis: something has to be done cause right now there is not good way to upgrade from 0.8 to 0.10 if you had the sync style api
20:57 < ericelliott> Awesome.
20:58 < faceleg> btyler: do you have any recommendations for plugins that improve "tab" support in vim?
20:59 < Stephen> var the = $("#game").detach(); delete the;
21:00 < btyler> faceleg: I like buftabs: http://www.vim.org/scripts/script.php?script_id=1664 but many like minbufexplorer
21:00 < defunctzombie> bnoordhuis: whatever you decide for dgram going forward I would like to be in the loop if possible :) I use dgram quite a bit with my use of node
21:00 < gf3> faceleg: Tab support?
21:00 < Stephen> It seems that the human mind's garbage collection function has a "new" in it somewhere
21:00 < btyler> I have ctrl-h and ctrl-l bound to switch buffer left and right, respectively, works very well for me.
21:00 < defunctzombie> bnoordhuis: I would be in favor of a simpler core for socket in general and build a user facing dgram on top of that
21:01 < defunctzombie> bnoordhuis: certainly breaking changes need to follow the two step upgrade cycle otherwise it is basically impossible to upgrade cleanly
21:04 < faceleg> gf3: :tabe, :tabp, :tabn etc
21:04 < faceleg> btyler: I'll have a look @ those, thanks
21:07 < bnoordhuis> defunctzombie: so i kind of agree
21:08 < bnoordhuis> defunctzombie: the problem with the dgram module is that it's fundamentally broken in a couple of ways
21:08 < bnoordhuis> it should have been cleaned up a long time ago but there aren't that many users
21:08 < defunctzombie> bnoordhuis: I am a user :)
21:09 < defunctzombie> bnoordhuis: I love me some UDP packets
21:10 < defunctzombie> bnoordhuis: I am all for updating it or making it better, but if I can't reasonably upgrade.. that is a problem
21:10 < bnoordhuis> defunctzombie: no disagreement on that
21:10 < defunctzombie> I have it used in a number of places in non trivial ways :/
21:10 < bnoordhuis> the problem with some of these issues is that i don't see a way of supporting both the old and the new way at the same time
21:11 < bnoordhuis> well, save for having essentially two dgrams modules in-tree, old and new
21:11 < defunctzombie> bnoordhuis: why not use the old way if no callback?
21:11 < defunctzombie> bnoordhuis: basically, the problem is that in 0.8 there was no callback approach
21:12 < defunctzombie> bnoordhuis: also, it was my understanding that you always have to call .bind first anyway
21:12 < defunctzombie> so calling setTTL before bind is incorrect
21:12 < defunctzombie> which is what that linked issue was trying to do maybe?
21:12 < bnoordhuis> yes... but it kind of worked, actually. don't ask
21:13 < defunctzombie> bnoordhuis: I remember there being something about that way back when I added back multicast support
21:13 < defunctzombie> bnoordhuis: I think requiring bind first isn't a bad compromise
21:13 < defunctzombie> I would approach it in the same way you would if you wanted to program it in C
21:14 < defunctzombie> exposing a very minimal socket interface
21:14 < bnoordhuis> defunctzombie: okay, let me think about bind()
21:14 < defunctzombie> and then build something on top of that maybe
21:14 < defunctzombie> bnoordhuis: think away :D
21:14 < bnoordhuis> doing it the old way when the callback is omitted sounds reasonable
21:14 < defunctzombie> that is what isz and I discussed
21:14 < defunctzombie> as a migration solution
21:15 < superjoe> in regards to taking out the IdleNotification: I wonder if a more effective strategy might not be to tell v8 when to collect garbage, but to tell v8 when *not* to collect garbage
21:15 < matt123> hey
21:15 < superjoe> although, this coming from someone who has not looked at the code.
21:16 < matt123> can i get some advice on installing node.js on my server 
21:16 < superjoe> matt123, yes
21:16 < dayom> Is this place only for contrib type commentary?
21:16 < superjoe> dayom, no
21:16 < dayom> ok so
21:16 < dayom> stumbled across this on the node blog http://www.youtube.com/watch?feature=player_embedded&v=F5jCXdTYJYc
21:17 < dayom> the leader board uses like cron scripts to do http between a ticker and a leader board daemon for updating the leaderboard
21:17 < dayom> doesn't that like
21:17 < dayom> completely defeat the purpose of using node
21:17 < gf3> faceleg: Whoops, got disconnected
21:17 < gf3> faceleg: I've setup CtrlP to open files in tabs by default, and to switch to tabs if the file is already open. So CtrlP is my "launcher"
21:18 < gf3> faceleg: Then, I've a shell alias that basically just adds -p to the vim command opening all files in new tabs
21:18 < dayom> http://youtu.be/F5jCXdTYJYc?t=28m27s
21:18 < matt123> -bash-3.2# ./configure Traceback (most recent call last):   File "/root/node-v0.6.18/tools/waf-light", line 157, in <module>     import Scripting   File "/root/node-v0.6.18/tools/wafadmin/Scripting.py", line 7, in <module>     import os, sys, shutil, traceback, datetime, inspect, errno   File "/opt/python2.6/lib/python2.6/inspect.py", line 41, in <module>     from operator import attrgetter ImportError: /opt/python2.6/lib/python2.6/li
21:19 < gf3> matt123: Rude
21:19 < matt123> im on CentOS with python 2.6.8
21:19 < superjoe> dayom, I agree - I'd rather use a setInterval for that
21:19 < matt123> urm.. sorry. didnt mean to be "rude"
21:20 < bnoordhuis> matt123: why node 0.6.18?
21:20 < faceleg> btyler: holy crap minibuffexpl is great
21:20 < LeftWing> kinabalu: So, jclulow/node-smbhash is mine.  It kind of maybe might do NTLM authentication now, but probably not.  If you have an actual NTLM/IIS server on the Internet that I could poke at, I may be able to finish it. :P
21:20 < faceleg> gf3: nice 
21:21 < dayom> superjoe: I mean even using a timer here… isn't the whole point of a real time system to be evented / not on a timer?
21:21 < gf3> faceleg: https://github.com/gf3/dotfiles/blob/master/.vimrc#L267-L272
21:22 < btyler> faceleg: yeah, many folks really like it. I like buftab better (uses less screen space), but they're both good options
21:22 < faceleg> gf3: gf3 is that for raw vim, or for a plugin?
21:22 < gf3> faceleg: It's for CtrlP.vim which I highly recommend
21:23 < superjoe> dayom, ah I see. I haven't looked at the code you're talking about, but I agree with you in principle
21:23 < matt123> using the latest node i get this error:
21:23 < matt123> -bash-3.2# ./configure Traceback (most recent call last):   File "./configure", line 6, in <module>     import shlex   File "/opt/python2.6/lib/python2.6/shlex.py", line 12, in <module>     from collections import deque   File "/opt/python2.6/lib/python2.6/collections.py", line 9, in <module>     from operator import itemgetter as _itemgetter ImportError: /opt/python2.6/lib/python2.6/lib-dynload/operator.so: undefined symbol: _PyUnico
21:23 < faceleg> gf3: lol another one
21:24 < gf3> faceleg: It's like FuzzyFinder on coke
21:25 < faceleg> gf3: so really, really fat?
21:25 < gf3> faceleg: Lots of chest hair and bling
21:25 < faceleg> sounds like me
21:26 < matt123> I hav looked online for that error but i cant seem to see a fix
21:27 < matt123> if i type in gmake it brings up that error... is the error within the gmake?
21:28 < faceleg> gf3: will it work with minibufexpl?
21:30 < gf3> faceleg: No idea
21:30 < matt123> i dont know if anyone here could have pointed me in the right direction..
21:30 < bnoordhuis> matt123: when you say latest node you mean 0.10?
21:30 < matt123> yes
21:31 < bnoordhuis> matt123: that undefined symbol error you're getting means your python install is somehow screwed up
21:31 < matt123> ok.. Ill have a go at re-installing it.
21:34 < faceleg> gf3: OH MY GOD
21:35 < gf3> faceleg: OH SWEET BABY JESUS
21:35 < faceleg> gf3: ctrlp + your ctrlp conf + minibufexplr IS AMAZING
21:35 < faceleg> gf3: I ACTUALLY FEEL EMOTION
21:35 < gf3> faceleg: ❤ YAYYYY ❤
21:35 < azylman_> faceleg: gf3: https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRRqRY8b_5clMn4hhanki3TE144ttegI6RDXt9S_93Rc533Jc5uTw
21:36 < faceleg> azylman_: yes but positive
21:36 < azylman_> Actually, the animation is broken there for some reason
21:36 < azylman_> http://media.tumblr.com/tumblr_m7514plyCx1qcislx.gif
21:36 < faceleg> more like brick + cake
21:37 < azylman_> You mean like this? http://www.youtube.com/watch?v=A8mpfdVu8O0
21:38 < faceleg> azylman_: yes
21:38 < over_> hi
21:40 < faceleg> hi
21:41 < ArxPoetica> gf3
21:41 < gf3> ArxPoetica
21:41 < ArxPoetica> what are they talking about?
21:42 < gf3> ArxPoetica: Like… in general?
21:42 < ArxPoetica> ha
21:42 < gf3> ArxPoetica: I just want all you people to be happy
21:42 < ArxPoetica> lol
21:42 < ArxPoetica> it's okay — I actually went to hit "ctrl + f" to find gf3 — to see what they were talking about "emotional wall of glass" but hit enter instead and that's why I yelled your name
21:43 < ArxPoetica> shrug
21:43 < azylman_> not emotional wall of glass, glass case of emotion :p
21:43 < gf3> ArxPoetica: I don't mind, it's nice to hear someone else say your name sometimes
21:43 < azylman_> Get your references right!
21:43 < gf3> ArxPoetica: ❤
21:43 < faceleg> ArxPoetica: vim domination and subsequent euphoria
21:43 < ArxPoetica> lol
21:47 < styol> What is a good strategy for maintaining different versions of an API? For instance, certain requests may have changed between version 1 and 2 that may break legacy clients. I was thinking about using headers -- bad idea? better idea?
21:47 < faceleg> /api/1.1/
21:48 < faceleg> /api/1.2/
21:48 < faceleg> ?
21:48 < Industrial> Say I have a process.on('SIGING', function() { /* ??? */ });. What do I do to stop the process, preferrably after a callback?
21:48 < styol> faceleg: yeah that could work indeed
21:49 < Industrial> SIGINT, even.
21:49 < styol> Industrial: http://nodejs.org/api/process.html#process_process_exit_code
21:50 < faceleg> 4
21:50 < faceleg> lol
21:50 < faceleg> ignore it
21:51 < Industrial> styol: I see.
21:53 < korilo> faceleg, use simply /api/v1/
21:53 < Industrial> Say I have a ps output e.g. `ps -e|grep node`, How do I tell one process from the other? How do I get to the information so that I can differentiate one from another so I can deice which to kill?
21:54 < superjoe> Industrial, try `ps aux`
21:54 < styol> korilo: it is actually less an API version and more an application ID and application version
21:54 < SJKramer> Let us set the record clear on this one point: node.js is great. Especially for JS developers. Woo! I'm backend now! hahaha :)
21:54 < Industrial> nice ty
21:55 < korilo> stylus, soz i didn't got that, i use the standard /api/v1/ /api/v2/ for my web api..don't like 3 number versioning (even 2) in APIs
21:55 < korilo> stylus, but i got what you mean
21:55 < korilo> you could give apis names like fb did i guess
21:56 < styol> korilo: i guess the theory is that multiple applications might use the same API eventually, and that each might be versioned to support different clients potentially
21:57 < korilo> yes
21:57 < korilo> im saying you could "version" your apis even giving them "names" as facebookdid
21:57 < zeromodulus> hey, I'm trying to load a module for use in another module... console.log(module) at the app level shows the object I'm looking for, buuut, trying to use that object in another module says it's undefined, what gives?
21:57 < zeromodulus> I'm using express by the way.
21:58 < korilo> zeromodulus, have you done module.exports?
21:58 < zeromodulus> yep.
21:58 < zeromodulus> it's supposed to go like, exports.module right?
21:58 < gf3> korilo, stylus: Or you can use headers to indicate API version
21:58 < zeromodulus> exports.somename
21:58 < azylman_> zeromodulus: http://nodejs.org/api/modules.html
21:58 < korilo> zeromodulus, yes exports.funcname
21:58 < korilo> or
21:58 < daekano> zeromodulus. what an appropriate name.
21:58 < smugglinraisins> anyone seen mscdex here lately?
21:58 < korilo> module.exports = yourstuff
21:58 < zeromodulus> hahahaha
21:58 < zeromodulus> yes indeed.
21:59 < korilo> then var m = require('../module'); m.method;
21:59 < styol> hrm seems most people prefer URL level versioning, seconded by request headers http://stackoverflow.com/questions/389169/best-practices-for-api-versioning
22:00 < korilo> yeah
22:00 < styol> gf3: yeah that is what i was thinking.. i'd like to keep it out of the url personally, just wasn't sure if that made sense.. the implementations will all be internal, so just a matter of preference unless one is abnormally slower
22:01 < gf3> styol: I think it might have been GitHub who just mentioned they're moving to an HTTP header
22:01 < zeromodulus> okay... so, I have a file routes/foo.js, in that file I want to be able to use lib/foobar.js, I tried requiring lib/foobar.js from routes/foo.js, and I also have lib/foobar.js in app.js, but routes/foo.js doesn't see it. O.o
22:01 < styol> gf3: oOo
22:02 < zeromodulus> app.js loads lib/foobar.js just fine.
22:02 < zeromodulus> so I know I'm using module.exports properly in that case.
22:02 < smugglinraisins> anyone familiar with the IMAP module?
22:02 < zeromodulus> but now I need routes/foo.js to see lib/foobar.js
22:02 < styol> Making your own random header like Application-Version: 1.0 is probably a bad idea, right?
22:02 < korilo> do you call your routers modules injecting the express app? zeromodulus 
22:02 < korilo> zeromodulus, can you gist your code :) it will be way better
22:02 < zeromodulus> I'm not sure what that question means exactly.
22:03 < zeromodulus> okay.
22:03 < korilo> also are you using correct path to require your lib?
22:07 < zeromodulus> okay, here's the gist, https://gist.github.com/zeromodulus/5138246
22:09 < zeromodulus> oh, derp
22:09 < zeromodulus> herp derp.
22:09 < zeromodulus> forgot to var foo = require('foo')
22:10 < SJKramer> Speaking of derp, anybody here running Node.js on Windows using the standalone EXE?
22:10 < daekano> yep
22:10 < daekano> <--
22:10 < SJKramer> How do you do NPMs?
22:10 < daekano> npm is included with node
22:10 < SJKramer> Included with the standalone?
22:11 < daekano> so just use npm install [options] [package]
22:11 < daekano> it's part of node, so yes
22:11 < daekano> open command line and type npm -v
22:11 < SJKramer> Did you run an installer when you installed Node?
22:11 < daekano> pretty sure I did
22:11 < deoxxa> i didn't! i didn't!
22:11 < daekano> I'll always use the easy way
22:12 < SJKramer> Okay. I'm talking about the standalone. It has no installer. And it's the installer that normally gives you the npm manager.
22:12 < SJKramer> Deoxxa!
22:12 < korilo> zeromodulus, eheh
22:12 < SJKramer> I bet you know what I'm talking about :)
22:12 < daekano> deoxxa typed and installed his windows node install from memory.
22:12 < SJKramer> lol
22:12 < SJKramer> In bin or hex?
22:12 < deoxxa> daekano: i painted the pixels into mspaint
22:12 < daekano> lol
22:12 < deoxxa> daekano: then saved as .exe
22:12 < SJKramer> hehehe
22:12 < daekano> typical deoxxa
22:12 < SJKramer> Sounds like the path I'm taking.
22:13 < SJKramer> Installers ain't workin today.
22:13 < daekano> SJKramer: why on earth are you using windows anyways?
22:13 < zeromodulus> My vim keeps segfaulting. v.v
22:13 < daekano> install a VM
22:13 < deoxxa> SJKramer: no idea how you'd do it on windows - there's all sorts of weird environment issues there
22:13 < daekano> and just run it on mint or something
22:13 < daekano> there's literally no reason to use node on windows
22:13  * SJKramer is a creature of habit
22:13 < ChrisPartridge> SJKramer: if you're using the standalone exe, just ship your deps with your project
22:13 < daekano> bad habit*
22:13  * SJKramer nods
22:14 < SJKramer> So you don't use the NPM manager on Windows, Deoxxa?
22:14 < deoxxa> i don't use windows period
22:14 < deoxxa> except for playing simcity now
22:14 < daekano> the day deoxxa uses windows, I'll eat my hat
22:14 < deoxxa> oh daekano i hope you're hungry
22:14 < deoxxa> i played simcity a few days back
22:14 < daekano> joke's on you, I don't have a hat
22:14 < deoxxa> haha
22:14 < deoxxa> already ate it
22:14 < daekano> hahaha
22:14 < deoxxa> "i was wondering why i did that..."
22:15 < SJKramer> My mistake. Well this is a big crap, as my Indian coworker would say :D
22:15 < daekano> that was racist.
22:15 < SJKramer> It was accurate, daekano :D
22:15 < SJKramer> he says that when something isn't working hahaha
22:15 < SJKramer> Good guy.
22:15 < daekano> lol
22:15 < deoxxa> lol
22:16 < SJKramer> It's not racist of me to report to you fine gentleman what my indian coworkers do.
22:16 < SJKramer> It's cute of them to do such things.
22:16 < inolen> SJKramer: all French people love saying that as well
22:16  * SJKramer spews flame at the troll
22:17 < daekano> haha
22:17 < asdf12> the racism is the need to describe him as Indian when it doesn't matter if he is or isn't
22:17 < asdf12> would you call him your black haired coworker?
22:18 < daekano> asdf12: the benefit is being able to say "big crap" in your head with an indian accent
22:18 < daekano> it really makes the joke better
22:18 < SJKramer> Hair color does not affect linguistic habituation, and I bid you good day silly mofos :D
22:18 <@mbalho> can ya'll take this discussion somewhere else
22:18 < SJKramer> Yeah, really.
22:18 < SJKramer> Trolls :)
22:18 < asdf12> ^ pot calling the kettle black
22:18 < deoxxa> daekano: works in french too
22:19 < SJKramer> lol
22:19 < deoxxa> daekano: "AW HAW HAW, ZIS IS ZE BIG CGHRAP"
22:19 < SJKramer> asdf do you have anything node.js related to contribute today? :P
22:19 < daekano> lol deoxxa
22:19 < asdf12> a few
22:20  * SJKramer yields the remainder of his time to asdf12
22:20 < SJKramer> Thanks y'all, I'll poke around with the NPMs...
22:20 < daekano> Is it normal that I want to go home and write unit tests?
22:20 < azylman_> Naw man, unit tests are the best
22:21 < asdf12> talk to me when you write tests for yo tests
22:21 < azylman_> Hah, I've never done that
22:21 < jrajav> Testception
22:21 < azylman_> And I'm very skeptical
22:21 < Havvy> If you write tests for your tests, then your tests are too complicated.
22:21 < daekano> hahaha
22:21 < daekano> it's an interesting concept though
22:21 < jrajav> No
22:21 < jrajav> It's actually
22:21 < jrajav> Not
22:21 < daekano> what would be useful is a way to merge multiple streams of unit tests for the same code
22:22 < jrajav> .... what?
22:22 < azylman_> I'm not sure what I just read
22:22 < deoxxa> daekano: vows
22:22 < daekano> <-- noob, so mute me if you want
22:22 < daekano> but my understanding is you write tests and then code, but your tests are only as good as your code
22:23 < daekano> so if your tests are flawed, so is your code
22:23 < jrajav> Well, no.
22:23 < daekano> but if you have another perspective writing tests, it could cover something you missed
22:23 < jrajav> You can have terrible tests but amazing code
22:23 < daekano> yeah
22:23 < daekano> I don't trust myself when writing tests
22:23 < azylman_> It was more the "merge multiple streams of unit tests" that had me confused
22:23 < daekano> i distill them down to the most basic yes/no
22:23 < daekano> azylman_: haha sorry
22:23 < jrajav> I think he means writing multiple sets of tests for the same code
22:23 < daekano> right
22:23 < azylman_> Ahh
22:24 < daekano> different people doing so
22:24 < asdf12> jrajav: terrible tests but amazing code? sounds like you need to write tests for yo tests
22:24 < jocafa> don't cross the streams.
22:24 < daekano> but the code must be written for the secondary/tertiary tests
22:24 < echo> :3
22:24 < daekano> so i guess that's worthless
22:24 < azylman_> I  generally try to have a test covering every possible edge case
22:24 < jrajav> Sounds like you need to weigh your productivity and your design skills against your unit testing fetish
22:24 < daekano> lol
22:25 < azylman_> jrajav: Was that directed at me?
22:25 < jrajav> @asdf12
22:25 < asdf12> no it was towards me
22:25 < azylman_> Ah
22:25 < daekano> all your names are green
22:25 < daekano> it's confusing
22:25 < asdf12> apparently he doesn't like tests or a joke
22:25 < jrajav> This is a very longstanding debate in software development
22:25 < jrajav> Just google "Why TDD is {good|bad}"
22:25 < jrajav> Or don't.
22:25 < jrajav> It is a silly place.
22:26 < azylman_> A lot of the debate comes from companies with different requirements
22:26 < azylman_> Small companies tend to not like it because it slows them down
22:26 < azylman_> Big companies like it because it speeds them up
22:26 < zeromodulus> -.-
22:26 < azylman_> (As your codebase grows, the more likely a change is to break something, so test cases can actually save you development time - run your test suite and if it passes, you're good)
22:27 < jrajav> The debate isn't so much *whether* to test - that's mostly agreed upon. It's *when* you write the tests and *how much* of them you write.
22:27 < Havvy> Tests help me debug my code.
22:27 < asdf12> azlyman_: that was poetic
22:27 < jrajav> And also what part of the code, and how broadly, you test.
22:27 < jrajav> TDD espouses the idea of writing your tests for every single part of the code, and before you even write the code itself.
22:28 < daekano> that really was poetic
22:28 < daekano> tweeting
22:29 < Havvy> daekano: You're tweeting something that is common knowledge amongst those who write tests?
22:30 < asdf12> why not share that knowledge
22:30 < asdf12> knowledge hater
22:30 < daekano> I decided it was too much work
22:30 < azylman_> Havvy: I think you'd be surprised by what is considered common knowledge...
22:31 < daekano> but let's be honest, "those who write tests" is a much smaller community than you think :P
22:31 < azylman_> A lot of people haven't worked at both big and small companies so they don't get both perspectives
22:31 < Havvy> Then tell people to open Kent Beck's book. It's on page one or something.
22:33 < azylman_> You realize that Kent Beck has a lot of books, right?
22:33 < deoxxa> open all of them
22:33 < deoxxa> read the first page of each
22:34 < azylman_> Now why didn't I think of that
22:34 < deoxxa> devise your own plot from them
22:34 < deoxxa> write fanfiction
22:34 < deoxxa> develop a following
22:34 < deoxxa> then become happy
22:34 < azylman_> "I believe this book is about the proliferation of space aliens as a result of nuclear test ban treaties."
22:34 < deoxxa> that's where it was going, clearly
22:36 < Havvy> azylman_: Yes. But only one of them is about Test Driven Development.
22:37 < asdf12> whats your module going to do?
22:38 < asdf12> @dae ^
22:39 < zeromodulus> If I have a module I'm exporting, via exports.foo, then shouldn't all submodules of foo be accessible as well?
22:39 < zeromodulus> all properties of foo, that is.
22:39 < azylman_> No
22:39 < azylman_> Oh
22:39 < azylman_> Yes
22:39 < zeromodulus> I keep getting undefined errors when I try to access properties of foo. But I know foo is defined, I can even see the property with console.log, but trying to access that property yields undefined, O.o.
22:40 < azylman_> Put a gist so someone can see what's wrong?
22:40 < azylman_> Gits or pastebin or something
22:43 < zeromodulus> https://gist.github.com/zeromodulus/5138563
22:43 < zeromodulus> eh, forgot to add something to that paste.
22:43 < zeromodulus> sec.
22:44 < zeromodulus> actually, I think I realized what's wrong.
22:44 < zeromodulus> maybe...
22:45  * spion plunges into debugging node-sqlite3
22:45 < asdf12> im surprised you can even see Bar , what the !
22:45 < spion> apparently casting the fourth argument of uv_queue_work to uv_after_work_cb doesn't quite help.
22:45 < zeromodulus> okay, scratch that, here's an update, https://gist.github.com/zeromodulus/5138563
22:46 < zeromodulus> output is the same.
22:46 < asdf12> you want foo.foo.Bar
22:46 < zeromodulus> O.o
22:46 < zeromodulus> How can I do that without the redundancy?
22:47 < asdf12> exports = { Bar: Bar }
22:47 < zeromodulus> O.o
22:47 < azylman_> That's what that output is showing you
22:47 < zeromodulus> so having foo.Bar is not possible?
22:48 < azylman_> foo is an object with a key foo and a value of another object with a key Bar and the value that function
22:48 < zeromodulus> oh. ._.
22:48 < zeromodulus> weird...
22:48 < azylman_> It's because you're doing `exports.foo = foo`
22:48 < azylman_> That makes the module export { foo: { Bar: <function> } }
22:48 < azylman_> Then you're storing that into foo in routes-foo.js
22:49 < zeromodulus> oh, huh...
22:49 < zeromodulus> uhh...
22:49 < zeromodulus> oh, gotcha.
22:49 < asdf12> yea yea, you can also just do module.exports = foo;
22:49 < azylman_> Yeah
22:49 < zeromodulus> sweet.
22:50 < zeromodulus> that doesn't overwrite exports?
22:50 < zeromodulus> O.o
22:50 < asdf12> yes
22:50 < asdf12> thats the point
22:50 < zeromodulus> strange.
22:50 < zeromodulus> but cool.
22:50 < asdf12> its common
22:50 < zeromodulus> yay, it worked.
22:50 < zeromodulus> thanks guys.
22:51 < asdf12> module.exports is nothing , there's nothing really to overwrite per se
22:51 < asdf12> (its just an empty object)
22:51 < zeromodulus> oh, neat.
22:51 < faceleg> zeromodulus: awesome
23:12 < MI6> joyent/node: Ben Noordhuis v0.10 * da10bb8 : doc: events: add 'removeListener' event section  Amends commit 84221fd by - http://git.io/7KO7cw
23:13 < jonaslund> hmm
23:13 < jonaslund> I'm looking for a word
23:13 < jonaslund> "to make something real"
23:14 < faceleg> realize
23:14 < faceleg> next question
23:14 < khrome> manifest
23:14 < context> instantiate
23:14 < jonaslund> hmm, it's a more specific term
23:14 < faceleg> he's going with realize gues
23:14 < faceleg> guys*
23:14 < khrome> I didn't realize :P
23:15 < context> materialize
23:17 < context> incarnate
23:17 < context> coalesce
23:18 < jonaslund> i remember it from the scheme manual regarding macros
23:18 < context> substantialize, mold, unfold, metamorphize
23:18 < jonaslund> or some document explaining how you expand them
23:18 < context> hygienic ?
23:19 < context> http://community.schemewiki.org/?scheme-faq-macros
23:19 < jonaslund> no the meaning was to realize
23:19 < khrome> Hey guys: after a painful road I'm realizing a DOM client designed for testing seriously sucks for generalized scraping as I'm wasting time at runtime and development twiddling with browser quirks. Are there any DOM libs that aren't selling themselves for testing? I'm looking for pure API coverage, not a mimic library…. anyone have suggestions?
23:19 < _6a68> khrome: just a scraper?
23:20 < _6a68> khrome: maybe https://www.google.com/search?q=npm+html+scraper ?
23:20 < _6a68> (public room so others can find + harvest from the logs later :-)
23:22 < context> you're on your own jonaslund 
23:23 < jonaslund> context: i guess, i was hoping someone here could remember the term. i'll let you know if i find it (I'm reading the docs i read in the past regarding this)
23:29 < jonaslund> ahh
23:29 < jonaslund> i was thinking of reification
23:33 < samholmes> Anyone have an express style routing lib for the client-side?
23:33 < samholmes> cross-browser*
23:34 < samholmes> pagejs doesn't work in some legacy browsers.
23:35 < faceleg> angular js
23:35 < faceleg> I mean it's nothing like what you're asking
23:35 < faceleg> but use it anyway
23:39 < korilo> angular ftw
23:40 < kornnflake> <3 backbone
23:41 < faceleg> kornnflake: Angular FTW
23:43 < guidocalvano> Hey everyone
23:43 < faceleg> anyone know how to make vim's minibuffexpl show dotfiles?
23:43 < faceleg> hey guidocalvano 
23:44 < guidocalvano> tyring to get browserify to bundle all my js files in a dir such that I can require them from a script tag
23:44 < guidocalvano> but it is giving me pain and frustration
23:45 < guidocalvano> I want to do this: browserify -r *.js -o ../index.js
23:45 < substack> guidocalvano: don't do that, require() the files explicitly
23:45 < substack> *.js doesn't expand the way you think it expands
23:45 < guidocalvano> substack: I require them explicitly in the .js files
23:46 < substack> only the first one of those js files will be loaded with -r
23:46 < substack> guidocalvano: then you don't need to specify them explicitly
23:46 < substack> oh I see you are trying to get at the file contents individually from outside?
23:46 < substack> you possibly want -x instead of -r
23:46 < guidocalvano> substack: what is the difference?
23:47 < guidocalvano> (it still complains if I use ./*.js
23:49 < guidocalvano> )
23:49 < guidocalvano> substack: I have a test script
23:49 < guidocalvano> substack: and I want to test all my files individually
23:50 < guidocalvano> substack: but you can imagine that I don't like typing all those file names individually
23:53 < guidocalvano> substack: -x might be useful thanks
23:54 < guidocalvano> substack: and dreary manual typing it is then...
23:54 < guidocalvano> raaah
23:54 < korilo> hey substack will you update your github tutorial about Stream to reflect new Stream2? :)
23:55 < substack> eventually
23:55 < substack> guidocalvano: consider refactoring how your application exposes its functionality
23:55 < substack> sometimes things that are bad ideas should hurt
23:56 < substack> like how it's a good idea for a hot stove to be painful
23:56 < korilo> i found the examples in the offical node api not to be so expressful..mostly when it talks about the stream should be inherited etc etc
23:56 < guidocalvano> substack: I was already refactoring
23:56 < guidocalvano> (:
23:56 < samholmes> faceleg: I'm not completely sold on angular
23:57 < substack> korilo: you should probably not be using the core api except for .pipe() unless you have a pretty good reason
23:57 < substack> modules like through and duplexer are pretty handy
23:57 < Gambit--> where in the node.js code does global.errno get set?  Somewhere in node.cc?
23:57 < samholmes> angular is a framework on how to markup an application, which is completely different from what I want to do.
23:58 < samholmes> I want a single js bundle to handle all pages using a routing system and the page's URL
23:58 < korilo> substack, why? i read professional node and there was many examples when i could use stream.on('data', fn); so now it changed and i was looking for new examples
23:58 < guidocalvano> substack: when that philosophy is ingrained in technology, it often makes it a bit more impractical for a real life working situation
23:59 < guidocalvano> substack: the reason a lot of people want to do things less tidy is often cause they are forced to be a code base with design flaws
23:59 < guidocalvano> substack: and those are common in my experience in working life
23:59 < _6a68> samholmes: YUI provides a router, you could use it or borrow ideas
--- Log closed Tue Mar 12 00:00:16 2013
