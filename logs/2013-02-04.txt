--- Log opened Mon Feb 04 00:00:26 2013
00:03 < justin__> ok, so i get it everyone is watching the game... "trying to install node on a hackberry running debian weezy, all good until I do the ./configure im getting : /usr/bin/env: python: Not a directory" still with no luck :(
00:04 < Robert00001> I'm not american so I'm not
00:04 < Robert00001> watching it
00:07 < gabrieluk> he, not everyone is american
00:07 < amurdaca> luckly..
00:07 < gabrieluk> lol
00:07 < gabrieluk> justin__, why not get a ppa?
00:08 < gabrieluk> i think the ubuntu ppa chris lea works on debian..no?
00:08 < ins0mnia> is npm down?
00:09 < gabrieluk> https://launchpad.net/~chris-lea/+archive/node.js/
00:09 < echo> insOmnia, not for me.
00:09 < TommehM> What would be the best way to call a nodejs script from a browser (I don't mean run it from within the browser).
00:09 < ins0mnia> echo: strange, it's not responding. ok thanks
00:09 < echo> insOmnia, You're visiting http://npmjs.org , right?
00:10 < ins0mnia> echo: no, commandline
00:10 < echo> TommehM: Then what do you mean?
00:10 < ins0mnia> echo: npm install
00:10 < TommehM> echo, I want to be able to execute a nodejs script on the system from php.
00:11 < echo> insOmnia, Hrm. Just tested it on a random package and I was able to install and load from it.
00:11 < TommehM> All the script does is send an email.
00:11 < ins0mnia> echo: thanks for the help, gonna check this out, could be nvm screwing things up
00:13 < echo> TommehM: If your node.js script is built to executed via command line and not run as a daemon, you could use shell_exec in PHP to call execution of your node.js file using node. However, that's an ass-backwards and insecure way to send email, imo.
00:15 < TommehM> echo, Have you ever tried dnode? if so, is it any good?
00:17 < asdf12> anyone made like a terminal irc client? like with ncurses or something
00:18 < chilts> asdf12: irssi
00:18 < asdf12> i meant with node
00:23 < isaacbw> the godaddy superbowl ad is ridiculous
00:24 < motaro> A hypothetical situation let's say I've made a finding on my database of an eventuality, that I will surely like to know if more people on the net have had this eventuality, but I do not want to share my database information per se, so i make a hash of every single entity taken into account and send it with some public DB, I set some metadata to tell the pourpuse of the data so that others can match their results by knowing is the same value because is th
00:24 < motaro> same hash string. I'm I violating a privacy law because of this?
00:24 < isaacbw> privacy law
00:25 < isaacbw> hah
00:27 < robertj> motaro, can you be a _little_ more specific :p
00:27 < cloudbender> It sounds like you are answering your own question mortaro.  Either you respect privacy or you don't.
00:29 < isaacbw> privacy is overrated
00:29 < motaro> Let's say I have a dinner as a business I've notice that the 4 of July I'm getting a lot of customers asking for bacon and eggs. I would like to know if next year I should order more "bacon and eggs", I hash my database information with other restaurant owners in the area to see if their having similar results. 
00:30 < spion> do you have a privacy policy
00:31 < spion> if yes, does it allow you to do what you want
00:31 < motaro> I do not want infringe on my customer privacy information of his culinary choices, so I hash the information.
00:31 < spion> if yes, is it medical data
00:31 < robertj> so just have them grant you that right?
00:31 < spion> if no, go ahead.
00:32 < spion> if its medical data... boy you're in for a ride.
00:32 < crabtree> a fun ride
00:32 < spion> ianal
00:33 < crabtree> is it
00:33 < crabtree> or innit
00:33 < motaro> So let's take the customer "bacon and egg" relation, and just the "bacon and egg" would it be the same?
00:34 < spion> i don't think a hash gains you much in this case.
00:34 < spion> if you want others to be able to compute the hash you have to make the salt public
00:35 < motaro> If it's the same hash string is the same underlying value.
00:35 < motaro> MD5 doesn't use salt entries
00:35 < spion> after a couple of years when hardware advances makes your hashing algorithm faster than lightspeed, dictionary attacks become feasible
00:36 < spion> md5 is useless even now :(
00:36 <@Nexxy> it's nice for checksums
00:36 <@Nexxy> that's not useless
00:36 < motaro> spin, So you are saying is ok to do so.
00:36 < spion> oops sorry, yeah.
00:36 <@Nexxy> motaro, this isn't a legal advice channel
00:37 <@Nexxy> motaro, if you're unsure of the legal implications of something
00:37 <@Nexxy> ask a lawyer
00:37 < Lorentz> nope, even for checksum it has collision issues
00:37 < Lorentz> use something else
00:37 < asdf12> the dollar menu at mcd is a scam
00:37 <@Nexxy> pretty sure all of mcd is a scam
00:38 < tjfontaine> to get me fat
00:38 < asdf12> we cant all eat like King Nexxy
00:38 < isaacbw> reality is a scam
00:38 < isaacbw> sheeply
00:38 < isaacbw> sheeple
00:38 < tjfontaine> there is no spoon
00:38 < asdf12> at least i realized not everyone cares about the superbowl
00:39 < asdf12> a bunch of people out
00:39 <@Nexxy> asdf12, Queen*
00:39 <@Nexxy> tyvm
00:41 < isaacbw> god, the matrix is 13 years old
00:41 <@Nexxy> Hackers is 18 years old
00:41 < bnoordhuis> wargames is 30 years old
00:42 <@Nexxy> Tron is 31 years old
00:43 < tjfontaine> <urmom joke>
00:48 <@mbalho> i heard <urmom> is landing in html6
00:48 < Lorentz> keyword on landing
00:48 < Lorentz> she's so fat when she sits it's called landing
00:51 < spion> <urmom> is so big it can't be nested within anything\
00:51 < spion> hey, this could work.
00:52 < Lorentz> except another <urmom> perhaps
00:52 <@isaacs> mbalho: i herd when <urmom> lands on html6, it's gonna get squashed down to html3
00:52 <@isaacs> mbalho: HAHAA UR MOM IS FAT THATS WHY
00:53  * isaacs reading scrollback
00:53 <@isaacs> mmmmm bacon, eggs, and salted hash..
00:54 <@mbalho> isaacs: i herd ur mom because she is a goat and goats get herded
00:55 < isaacbw> https://gist.github.com/3889970#youre-missing-the-point-of-promises
00:55 <@Nexxy> http://www.youtube.com/watch?v=K-CFEPBWI78
00:55 <@Nexxy> relevant.
00:56 <@isaacs> mbalho: I MET YOUR MOM ONE TIME AND SHE SEEMED LIKE A VERY NICE LADY AND KIND OF LOOKED LIKE YOU!
00:56 < mscdex> asdf12: i made one with ncurses
00:56 <@isaacs> mbalho: HAHA, YOUR MOM HAS A BEARD!
00:56 < mscdex> asdf12: it's fairly simple though, meant as a demo
00:57 <@isaacs> (just kidding, she kinda did look like you, but no beard.)
00:58 < asdf12> link?
00:58 <@mbalho> isaacs: if she had a beard she could be a stunt double
00:58 <@mbalho> isaacs: actually better than stunt double she could have screen time
00:58 <@isaacs> mbalho: yeah, for sure.
00:59 <@isaacs> is it sexist to point out that most women have pretty pathetic beards?
00:59 <@isaacs> i mean, i don't have the mightiest beard or anything.
00:59  * Nexxy scathing blog post
00:59 <@isaacs> but for srs, most "bearded ladies" are no where near mbalho levels or even substack levels.
00:59 < tjfontaine> misogynist!
00:59 <@mbalho> lol
01:00 < lyaunzbe> google docs  spreadsheet memorystore, good idea or bad idea?
01:00 <@isaacs> lyaunzbe: mbalho didn't jlord write a thing that does a thing kinda like that? ^
01:00 <@Nexxy> isaacs, I'd just like to remind you
01:00 <@Nexxy> it's the beard on the inside that counts.
01:01 < lyaunzbe> isaacs: ahh sheetsee
01:02 <@mbalho> lyaunzbe: haha i was just on your github page cause andrew from diy started following you
01:03 < lyaunzbe> mbalho: haha, worlds collide 
01:05 < isaacbw> lyaunzbe, what does that mean?
01:05 <@isaacs> Nexxy: you're just saying that because i'm ashamed of my lackluster beard ;)
01:06 < lyaunzbe> isaacbw, sorry, what does what mean?
01:06 <@isaacs> Nexxy: you are a good friend :)
01:06 < isaacbw> lyaunzbe, the thing about google docs spreadsheet memory store
01:07 < lyaunzbe> you would use the google docs spreadsheet as a key value store
01:07 < isaacbw> what would be the benefit of that
01:07 < isaacbw> being able to edit it by hand?
01:07 < lyaunzbe> programmatically acessing it would be interesting, no? and yes, you could edit it by hand so that would be cool too.
01:08 < isaacbw> it would be interesting, but I can't imagine it being terribly useful
01:09 < isaacbw> and it would be pretty slow compared to most other key value stores
01:13 < asdf12> so
01:13 < lyaunzbe> hmm, I guess you are right isaacbw, plus there seems to be no way to programmatically edit google drive files
01:14 < isaacbw> I guess that's the end of it anyway
01:14 < asdf12> i looked that over isaacbw , the promises link
01:14 < asdf12> now what?
01:14 < isaacbw> what do you mean now what
01:14 < asdf12> i mean now what
01:14 < isaacbw> I don't know. Maybe take a walk
01:14 < isaacbw> or make a cup of coffee
01:15 < isaacbw> it's up to you really
01:16 < isaacbw> maybe a glass of wine
01:16 < sshaginyan> Are there any books/tutorials on v8?
01:16 < sshaginyan> I've been googling around but can't find anything decent
01:17 <@mbalho> sshaginyan: have your ead http://nikhilm.github.com/uvbook/
01:17 < isaacbw> not really. Apparently the source is well documented
01:17 < asdf12> shouldn't promises be something thats implemented in the standard lib
01:17 < asdf12> instead of some 3rd party lib/module
01:18 < isaacbw> it could be
01:18 < isaacbw> but it isn't
01:18 <@Nexxy> asdf12, no
01:18 < sshaginyan> thanks mbalho so I guess this is similar to v8 ? At the the architecture?
01:18 < bnoordhuis> we had promises in node 0.3, i think
01:18 < asdf12> why no
01:18 < isaacbw> you can wrap callbacks with promises
01:18 < asdf12> doesn't node.js follow commonjs spec
01:18 < isaacbw> callbacks are more flexible
01:19 <@isaacs> bnoordhuis: promises were gone by 0.1, i believe
01:19 <@Nexxy> promises were already ripped out of node once
01:19 < chilts> asdf12: the standard way in Node.js is the (err, callback) rather than promises, but you're welcome to use promises from other libraries
01:19 < bnoordhuis> or perhaps earlier :)
01:19  * isaacs out
01:19  * isaacs &
01:19 <@Nexxy> lol
01:19  * Nexxy waves
01:19 < chilts> heh
01:19 < asdf12> yea but thats what i mean by now what
01:19 < asdf12> if its not in the standard lib, its not going to be widely adopted
01:19 <@Nexxy> exactly
01:19 < bnoordhuis> sshaginyan: uv != v8. one is a platform abstraction library, the other a js vm
01:19 < chilts> fine by us
01:19 < bnoordhuis> sshaginyan: what do you want to do?
01:20 < asdf12> exactly thats why i asked issacbw now what
01:20 <@Nexxy> asdf12, what is your question/point? lol
01:20 < isaacbw> you can use promises on top of async libraries
01:20 < asdf12> asking issacbw his point
01:20 < isaacbw> my point was to link an article that I found informative
01:20 <@Nexxy> I wonder that myself sometimes!
01:20 < isaacbw> :/
01:21 <@Nexxy> promises are definitely something that should remain in userland
01:21 < asdf12> isaacbw: oh, i thought it was trying to convince us to use promises in node
01:21 < asdf12> where i'm kind of like if its not standardize i'm not going to use it
01:21 < bnoordhuis> no one's forcing you
01:21 <@Nexxy> which is good since you can use the same callbacks the rest of us use
01:21 < asdf12> i was just explaining what i meant
01:22 < sshaginyan> bnoordhuis: Fundamentally understand how v8 works. For example hidden classes
01:22 < isaacbw> there are a number of talks on the web
01:22 < bnoordhuis> sshaginyan: ah, you'll have to read a _lot_ of source code for that
01:22 < isaacbw> and if you really want to dig in, just read the source
01:23 < bnoordhuis> v8 is almost 600 kLoC and counting
01:23 < sshaginyan> k
01:23 < isaacbw> v8 involves some really intense compiler stuff though that you will probably have a hard time understanding without a phd
01:23 < asdf12> its kind of sucks though, the divergence on how async should be handled, error propagation 
01:24 < asdf12> between node and the web libs
01:24 < bnoordhuis> sshaginyan: http://wingolog.org/ - he's got some pretty good articles on v8's internals
01:25 < sshaginyan> isaacs: I'm very against school and truly don't believe in idiotic titles such as phd, master's, bachelor's. 
01:25 < sshaginyan> There is no relationship between these titles and knowledge 
01:25 < bnoordhuis> wrong isaac :)
01:25 <@Nexxy> sshaginyan, I was thinking the same thing
01:26 < sshaginyan> but thanks bnoordhuis 
01:26 < sshaginyan> I'll take a look at it
01:26 < asdf12> tell that to all the employers in the world
01:26 < bnoordhuis> some knowledge of compiler design will help you though
01:26 < isaacbw> it's also not true. a PhD requires you to absorb and process significant body of knowledge
01:26 < bnoordhuis> as will intimitate knowledge of the x86 architecture
01:26 < sshaginyan> isaacs: That's cute
01:27 < isaacbw> still the wrong isaac
01:27 <@Nexxy> sshaginyan, lol
01:27 <@Nexxy> isaacbw and isaacs are two different people (just to clarify)
01:27 < asdf12> what
01:27 < asdf12> so...
01:27 < asdf12> all this time...
01:27 < isaacbw> haha
01:27 <@Nexxy> wow lol
01:27 < asdf12> all those intimate message he was leaving me...
01:27 < isaacbw> :|
01:27 < timeturner> lol
01:27 <@Nexxy> errr
01:28 < tjfontaine> asdf12: manti t'eo?
01:32 <@Nexxy> way to make it awkward guys
01:34 < asdf12> yea, whats wrong with you guys
01:34 < isaacbw> jesus
01:35 < isaacbw> woah, what's this es6 async() stuff
01:36 < isaacbw> http://taskjs.org/
01:36 < isaacbw> when will we get that in node
01:36 < asdf12> what
01:36 < asdf12> yield ?
01:36 < asdf12> enable harmony
01:37 < isaacbw> neato
01:37 < asdf12> BUT
01:37 < asdf12> supposedly
01:37 < crabtree> i still don't understand yield 
01:37 < asdf12> async stuff, like error propagation is supposedly coming in harmony
01:37 < crabtree> i've read a few explanations and watched a few videos
01:37 < crabtree> i don't get it
01:38 < asdf12> but i've yet to hear or see any proposal for it
01:38 < crabtree> does it just make things like synchronous or what
01:39 < isaacbw> the other way around
01:41 < spion> isaacbw, http://code.google.com/p/v8/issues/detail?id=2355 - star the issue if you really want yield :)
01:42 < isaacbw> done
01:42 < isaacbw> everyone star that shit
01:42 < spion> crabtree, yield is like return, only when you call the function (erm generator) again, it will resume after the yield instead of starting from the beginning
01:42 < spion> :)
01:43 < asdf12> oh
01:43 < spion> so you yield async tasks to the task runner
01:43 < crabtree> hm
01:43 < asdf12> i thought it was already in v8 harmony
01:43 < spion> and then it gets back to you when its done.
01:44 < asdf12> whats the point anyway, unless you're going to tell everyone who uses your module to turn on the harmony flag
01:44 < spion> the difference with return is that yield also returns a value. so var result = yield task can be made to work.
01:45 < spion> the benefit is big enough to just turn the damn flag on :)
01:45 < asdf12> you underestimate how lazy people are
01:45 < isaacbw> and not every module is going to be intended for public release
01:48 < spion> people will turn it on *because* they're lazy
01:48 < asdf12> its the tv and remote catch 22 thing
01:49 < asdf12> they really want to watch tv, but theyre too lazy to get the remote
01:49 < asdf12> or something
01:49 < spion> otherwise they have to work really hard at avoiding callback hell
01:49 < isaacbw> some people are too lazy for remotes, so we're not going to make remotes for anyone at all
01:49 < spion> s/at/on
01:49 < isaacbw> in fact, no one gets to watch tv
01:49 < isaacbw> because some people are too lazy to turn theirs on
01:50 < asdf12> no 
01:50 < asdf12> stop
01:50 < asdf12> stop using my bad analogy against me
01:51 < spion> even if people don't end up using it its nice to have the option.
01:51 < asdf12> the callback spaghetti thing isn't even a problem anymore
01:51 < spion> it isn't?
01:52 <@Nexxy> not when you code properly
01:52 < isaacbw> like how
01:53 <@Nexxy> with named functions and lots of streams
01:53 <@Nexxy> or just event emitters
01:53 < isaacbw> still sounds like callbacks, even if you're flattening them out with named functions
01:53 <@Nexxy> ...
01:53 <@Nexxy> uh huh.
01:54 < asdf12> callbacks are good
01:54 < spion> there are many problems with named functions
01:54 <@Nexxy> like coming up with all those names?
01:54 <@Nexxy> I know.
01:54 <@Nexxy> so hard!
01:55 < spion> I have a deja-vu, so I'll just stop here.
01:55 < chilts> a, b, c, d, ... lots of options :)
01:55 < asdf12> to be honest
01:55 <@Nexxy> lol chilts 
01:55 < asdf12> i'm scared to see your guys code
01:55 < chilts> :)
01:55 <@Nexxy> asdf12, who's?
01:55 < asdf12> i dont have a monitor wide enough to see it all
01:56 < asdf12> spion, and isaacbw
01:56 <@Nexxy> I code at max 80 columns
01:56 <@Nexxy> strictly enforced
01:56 <@Nexxy> with 4 space tabs
01:56 < asdf12> because they still do the call back spaghetti thing
01:56 < isaacbw> asdf12, what are you talking about
01:56 < chilts> I code as though it's minified, at 1,000 cols
01:56 < chilts> man, it's Monday afternoon and I wanna go home
01:56 < isaacbw> no, we're saying promises alleviate the work required to avoid it
01:57 < asdf12> so you were advocating promises!
01:57 < asdf12> i knew that link had a purpose
01:57 <@Nexxy> isaacbw, at the cost of added complexity and a diminished understanding of actual control flow
01:57 < isaacbw> if you don't understand promises I guess
01:58 < isaacbw> anyway, I'm out. This is turning into an argument
01:58 < asdf12> dont be like that
01:58 <@Nexxy> can't we throw around a few more broken analogies first?
01:58 < asdf12> haha
01:58 <@Nexxy> :P
01:59 < isaacbw> I think promises are purty :(
01:59 < spion> here is one for you - named functions force you to pre-define all variables used across calls in the outer most scope.
02:00 <@Nexxy> oh?
02:01 <@Nexxy> this conversation has made me think of this song: http://www.youtube.com/watch?v=llDikI2hTtk
02:01 < spion> named functions also allow you to put the code in any order, resulting with true spaghetti code where the flow of the code doesn't match the sequence of events.
02:02 < spion> oops, someone added some crap right in the middle between those named functions.
02:02 <@Nexxy> pretty sure that's a false cause
02:02 < spion> pretty sure you never worked with sloppy coders :)
02:03 <@Nexxy> it seems like you're making the point that callbacks are bad because people can do bad things with them
02:03 < spion> they're not really *bad*, but yield is better.
02:09 < spion> and afaik you must write yield every time you are "exiting" a generator so the exit point can't be hidden like with fibers and is always clearly visible in the code.
02:09 < spion> admittedly not as clearly as indenting it, but not at all hidden either.
02:09 < spion> what can I say, I passionately like yield.
02:09 < spion> :D
02:10 < asdf12> no yield is worse
02:10 < asdf12> heres why
02:10 < asdf12> are you ready
02:10 < isaacbw> butts
02:10 < asdf12> are you readyyyyyyyy readddy?
02:10 < asdf12> because you can't use it
02:10 < asdf12> so its all pointless
02:10 < spion> :(
02:11 < spion> you're right
02:11 < isaacbw> oh, were you guys talking about yield the whole time
02:11 < spion> I am going to go and cry.
02:11 < isaacbw> lol
02:11 < xk_id> crawler up and running in the EC2....
02:11 < isaacbw> doing what
02:12 < xk_id> 5 jobs out of 1,300,001 completed successfully :P
02:12 < xk_id> spidering data for my dissertation
02:12 < isaacbw> what field?
02:36 < gluxon> Hm.. for some awkward reason, I am more excited about Node.js 0.10 than iOS 6.x jailbreak.
02:40 < skaag> :-)
02:41 < skaag> who cares about that jailbreak
02:41 < skaag> I stopped caring a while ago, I stopped jailbreaking the phone too
02:41 < skaag> It had no value for me
02:41 < gluxon> skaag: I care about it so I can run Node on my phone :D
02:48 < skaag> oooh
02:48 < skaag> I would ask why, but I won't
02:48 < skaag> My philosophy is, you should be able to run whatever the hell you wanna run on your own phone
02:49 < skaag> by the way you ever tried node <-> node communications?
02:51 < gluxon> skaag: What is that?
02:52 < gluxon> You mean standard tcp between node client/server?
03:08 < skaag> between two node.js servers
03:08 < onr> zeromq
03:09 < skaag> yes that's what i'm looking into right now
03:09 < skaag> I used zeromq in another project of mine, last year
03:10 < SomeoneWeird> use redis pubsub
03:10 < SomeoneWeird> so much easier
03:10 < SomeoneWeird> (but you have to have redis running)
03:10 < isaacbw> does it use polling?
03:11 < isaacbw> ah, I see
03:11 < isaacbw> neat
03:11 < skaag> I don't mind having redis, but does redis have to run on both servers or can it run on the master "server" only?
03:11 < isaacbw> redis is a swiss army knife
03:11 < SomeoneWeird> only need 1 server skaag 
03:11 < skaag> awesome
03:11 < SomeoneWeird> you just hook up a client to it and then you can send and receive messages
03:12 < SomeoneWeird> client.publish('channel', { data: true });
03:12 < SomeoneWeird> then on the other side
03:12 < onr> if you have a past with zeromq, why would you cheat on it?
03:12 < SomeoneWeird> client.subscribe('channel', function(data) { });
03:13 < skaag> I actually like zeromq, it served me wwell
03:13 < onr> redis pubsub is okay if youre already running redis. i wouldn't use redis for message passing only
03:13 < ckknight> sometimes you just feel like you have to try new things, SomeoneWeird
03:13 < skaag> you know pubnub.com? I wonder what they use
03:13 < skaag> they might be using zeromq as well
03:14 < SomeoneWeird> you can use whatever you want, just giving another option :)
03:14 < SomeoneWeird> (this way you don't have to have a p2p connection between every server if you wish to expand too)
03:15 < skaag> I'm going to have a situation where many clients will communicate with a bunch of load balanced servers
03:15 < skaag> so ideally i'd like the servers to be fully synchronized, but eventual sync is good enough for me
03:15 < skaag> that's why I'm also looking at mongodb for the replicated db
03:16 < skaag> even though mysql now does it very nicely, master-master
03:16 < skaag> so that's also an option
03:16 < skaag> I like zmq because it's very light on the protocol side of things, small packets, little overhead
03:17 < echo> I really really like Riak. Have you checked it out, skaag?
03:18 < skaag> I only heard about it 2 days ago, here on this channel
03:18 < skaag> so I haven't tried it yet
03:19 < skaag> but I am looking at the comparison table right now, only the enterprise version has masterless multi-site replication
03:19 < echo> Ah. If you're wanting a highly replicated, distributed system, I would highly recommend it. It's really sturdy and easy to use. I love REST and it has a native HTTP rest API.
03:21 < skaag> I can't pay for software yet, not making any money
03:21 < skaag> so at this point I favor databases that are totaly free and ofer multi-site replication without my having to pay for the "enterprise" version.
03:22 < echo> I'm trying to find where you see that. I have had no issue configuring it with the free version.
03:23 < skaag> http://basho.com/products/riak-overview/
03:24 < skaag> Masterless Multi-Site Replication <-- says "yes" only in the "enterprise" column
03:24 < echo> Ahh, I see now. You're referring to mutli-datacenter replication.
03:27 < skaag> yes
03:27 < skaag> I need that
03:27 <@Nexxy> skaag, that's referring to something like a failover cluster w/ replication
03:27 < skaag> you mean an entire cluster replicated to a secondary cluster?
03:27 <@Nexxy> if you just need your data to exist on multiple nodes, riak does that just fine
03:28 <@Nexxy> yeah
03:28 < skaag> awesome, i'll try it out right now
03:28 < skaag> will install it on 3 boxes in 3 continents and see how it goes
03:28 <@Nexxy> nice
03:28 <@Nexxy> I have a 3 node cluster spread across the US
03:28 <@Nexxy> it works well
03:29 < skaag> sounds good!
03:29 < echo> Really? I would expect it to actually perform poorly like that, Nexxy. Especially with Quorums and stuff. Do you have redis on top of it?
03:29 < chilts> I've always been meaning to play with Riak - sounds like how I think :)
03:29 <@Nexxy> echo, I don't really have a high throughput or a very stringent response time requirement
03:30 <@Nexxy> but it's highly tunable, so you can pick your priorities
03:30 < MelkorNemesis> fuck, it's 4:30AM again?
03:32 <@Nexxy> just 2:28pm
03:32 < skaag> 10:30pm here
03:32 < skaag> MelkorNemesis: but I know that feeling.......
03:32 < echo> Nexxy, Oh definitely. One thing I've found is rather expensive is search/mapreduce/etc. And I've found using redis as a caching layer on top is beautiful.
03:58 < zodiak> any recommendations on good node.js news sites/webpages ? kinda like daily.js ?
04:00 < gkatsev> dailyjs :P
04:03 < airtanah> the node.js reddit is pretty lacking, but sometimes i check it out
04:06 < mscdex> airtanah: planetnodejs.com, echojs.com ?
04:06 < mscdex> badassjs.com ?
04:08 < cloudbender> is require node-specific ?
04:09 < airtanah> honestly, i prefer reading general programming vs. node specific stuff
04:09  * Havvy learns a lot more about programming by reading about programming in languages he doesn't use often.
04:09 < cloudbender> I have a module downloaded, and a script tag in the html page, but 'require' is throwing an error
04:09 < cloudbender> firefox
04:11 < isaacbw> heh, yes.
04:11 < gkatsev> yes, require is a node thing
04:11 < isaacbw> it's node-specific
04:11 < gkatsev> though, there is require.js
04:12 < nkohari> anyone have experience using node.js clustering on EC2?
04:13 < nkohari> trying to figure out what the optimal amount of processes would be for each "EC2 compute unit"
04:13 < nkohari> since it doesn't really correlate to a core
04:13 < gkatsev> cloudbender: you could also try browserify
04:14 < cloudbender> Sorry guys, I'm new to the gymnastics of mapping SDK's into browser scripts
04:14 < cloudbender> the tag ... <script src="promises.min.js"></script>
04:14 < cloudbender> seems to be correct
04:15 < isaacbw> use q
04:15 < hemezh> Hello everyone ! Can someone please tell me how can I start contributing to node?
04:15 < isaacbw> read the source
04:15 < isaacbw> or contribute to userspace
04:16 < cloudbender> yes isaacbw I saw the q stuff, and will definetly be taking that advice.
04:16 < cloudbender> I saw the q git but could not determine whitch module was intended for the browser side
04:16 < cloudbender> that's why I grabbed this other one
04:17 < isaacbw> that's a terrible reason
04:17 < gkatsev> q works in the browser
04:17 < cloudbender> Well, one does what one can
04:17 < hemezh> and what after reading the source ?
04:17 < gkatsev> also, if you use browserify, it makes some magic
04:18 < isaacbw> cloudbender, you just include q.js
04:18 < isaacbw> <script src="q.js"></script>
04:18 < cloudbender> If 'require' is throwing errors could that mean I need node scripted in also ?
04:18 < isaacbw> what
04:18 < cloudbender> and yes, I'll move to q asap
04:19 < hemezh> @isaacbw :  What should I do after reading the source ?
04:19 < cloudbender> nevermind lemme get q.  at least then you guys won't be pissed with some off-broadway kind of thing
04:20 < isaacbw> https://github.com/joyent/node/blob/master/CONTRIBUTING.md
04:21 < cloudbender> ah, browserify, now I get it. ok.
04:21 < gkatsev> :)
04:21 < asdf12> hipster programmers use that library no one has ever heard of
04:22 < gkatsev> asdf12: no, they've long stopped using *that* library. They use a different one now.
04:22 < isaacbw> you don't need browserify to use q, cloudbender 
04:22 < asdf12> gkatsev: haha true
04:22 < substack> but if you like node-style requires
04:22 < gkatsev> browserify will give you require, more or less
04:22 < substack> if you hate modularity then sure
04:22 < substack> don't use it
04:23 < gkatsev> haha
04:23 < isaacbw> heh
04:23 < cloudbender> I'll get there, thanks all.
04:24 < isaacbw> it's seriously one html element
04:34 < asdf12> its a mixture of synth and some old school new age
04:34 < asdf12> that hipster library
04:37 < asdf12> remember when being a programmer was uncool
04:37 < asdf12> now everyone thinks its cool
04:37 < asdf12> well kind of
04:38 < asdf12> so facebook is showing me ads
04:38 < asdf12> one is i can find hot dates on zoosk
04:39 < asdf12> the other is about how to treat for herpes
04:41 < echo> I dislike that I regularly get those emails from facebook that say, "You have more friends on facebook." And I have to put on my forever alone face and be like, "YOU DON'T KNOW ME, I HAVE NO FRIENDS."
04:42 < asdf12> haha
04:43 < asdf12> yea facebook does spam your email with those
04:44 < cloudbender> <<< refuses to be shopped-for online, like a pair of shoes or a face cream.
05:02 < NuZZ> anyone know of any open sourced ecommerce node.js projects I can gander at?
05:04 < asdf12> no i dont know any
05:04 < asdf12> i mean yes
05:04 < asdf12> its called magento.js
05:05 < asdf12> a port of magento
05:05 < asdf12> its written by you
05:05 < asdf12> get to it!
05:05 < NuZZ> the most fucked up ecommerce platform eh
05:05 < NuZZ> could never get my head around the templating
05:06 < NuZZ> thx, i did see that floatin about though
05:06 < asdf12> blame yourself! you wrote it
05:07 < NuZZ> lol, link me?
05:07 < SomeoneWeird> lol asdf12 
05:07 < khrome> heh, for some people ecommerce is direct to processor communication, for others a gateway and others it's a shopping cart, if all you need is a gateway, that's not too rough to roll your own
05:07 < NuZZ> oh now it makes sense
05:08 < NuZZ> i sware to god i saw a megento port to node
05:08 < NuZZ> im more interested in seeing it all work together. shopping cart and all
05:09 < AAA_awright> E-commerce platforms tend to have NIH syndrome very badly
05:09 < khrome> lol, I'm just thankful to be far away from that world these days :)
05:09 < NuZZ> yep
05:09 < asdf12> isaacbw: https://github.com/icodeforlove/node-promise-object this is trending on git?
05:10 < asdf12> dont know if you saw it
05:10 < isaacbw> no
05:10 < asdf12> github*
05:10 < khrome> even when processors aquire each other they tend to leave them as autonomous units and slowly shift new accounts to which ever one they decide is the better platform
05:11 < khrome> but to be fair, integrating proprietary payment platforms has a track record of bitter failure
05:11 < isaacbw> it seems to miss the whole point of promises though
05:11 < NuZZ> I was thinking of using Stripe for payments
05:11 < NuZZ> http://nodejs-eshop.eu01.aws.af.cm/ domed here
05:11 < isaacbw> square is the popular one
05:11 < NuZZ> demoed*
05:12 < isaacbw> nvm
05:12 < NuZZ> ^ not me
05:12 < isaacbw> I thought they offered a web service as well
05:12 < asdf12> hey
05:12 < asdf12> those are cheap jeans
05:12 < asdf12> thanks for linking that
05:12 < billybonos> is there anyone who might be able to help me figure out an issue I am having (noob working with a stream)
05:13 < NuZZ> lol
05:13 < billybonos> just throwing it out there
05:13 < NuZZ> post ur issue billy 
05:13 < billybonos> http://stackoverflow.com/questions/14680543/how-to-make-a-socket-a-stream-to-connect-https-response-to-s3-after-imagemagick
05:13 < isaacbw> are they for sale?
05:13 < billybonos> I've spent 6 hours on it!
05:13 < isaacbw> I want $15 jeans
05:14 < echo> On the real, where can I throw my money for node.js swag?
05:14 < NuZZ> nodejs.org i think has a shirt up there?
05:14 <@mbalho> echo: substack does tshirt runs every once in a while
05:15 < billybonos> I will make you a tshirt if you look solve my SO question 
05:18 < echo> billybonos: Instead of writing the new image to stdout, spin up a writeable stream, write to that, accepting chunks and concatenate them and send that response. See an example gist using this method here: https://gist.github.com/4549230
05:19 < echo> I think I may have misunderstood your question though.
05:19 < billybonos> ok
05:20 < billybonos> I think I tried something similar where I tallied up all the data send back (the image) and tried writing it to S3 as a buffered file... couldn't get that to work though. I don't know if Knox is finicky or it is me
05:21 < billybonos> this looks good though
05:21 < billybonos> I'm going to try it
05:21 < billybonos> thanks man!
05:21 < echo> With the code in the Gist, phantomjs makes a screenshot, sends the base64 encoded value -> binary -> gm -> stream -> concatenated -> stored as one blob in a riak object. 
05:21 <@mbalho> billybonos: knox should support a streaming upload
05:21 <@mbalho> billybonos: figure out how to .pipe() your readable stream to its upload stream
05:22 < billybonos> ok
05:22 < billybonos> to be honest I'm not sure I know what concatenated means or what a riak object is
05:22 < billybonos> but I will use this gist as an example
05:23 <@mbalho> billybonos: here is a module that does concatenation of streams https://npmjs.org/package/concat-stream
05:23 < echo> It was my first time using streams ever. Also, that's true, you should be able to pipe it to a different stream instead of creating your own. concatenation is the act of combining things. And Riak is a distributed nosql database system.
05:24 < echo> mbalho: Is that the same as: http://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength ?
05:25 < billybonos> yeah I thought that piping the streams would be better
05:25 <@mbalho> echo: nope but it uses that
05:26 < billybonos> it is weird though... I pipe my response from the server to a local file and it works. and so does stdout. and the response from the server works when sending to the S3 but the stdout doesn't
05:27 < echo> mbalho: Sorry, I didn't read the word stream and register it in the url lol. 
05:27 < billybonos> I guess that is the difference between an "incomingmessage" and a "socket" object
05:37 < billybonos> ok getting closer
06:05 < asdf12> whats everyone doing
06:05 <@Nexxy> science
06:06 < asdf12> sounds complicated
06:06 < echo> Working :(
06:07 < asdf12> sounds stressful
06:07 < echo> Nah, just slow tonight. So, kind of bored.
06:08 < tuhoojabotti> school exam about electromagnetism 
06:13 < Asterokid> is there any king of the EffectComposer here?
06:16 < Asterokid> lol, wrong channel sorry
06:20 < cloudbender> XmlHTTPRequest2 ... discuss
06:20 < cloudbender> http://www.html5rocks.com/en/tutorials/file/xhr2/
06:22 < cloudbender> xhr.overrideMimeType('text/plain; charset=x-user-defined');
06:24 < cloudbender> xhr.responseType = 'blob';
06:25 < cloudbender> var blob = new Blob([this.response], {type: 'image/png'});
06:28 < cloudbender> A revamped send() method has been overridden to accept any of the following types: DOMString, Document, FormData, Blob, File, ArrayBuffer.
06:33 <@mbalho> cloudbender: wrong hannel?
06:33 <@mbalho> channel*
06:33 < SomeoneWeird> yeah..
06:34 < cloudbender> mbahlo it pertains.  Are you using xhr2 ?
06:36 < cloudbender> curious if node supports the new content types.
06:51 <@konobi> does your app support it?
06:57 <@konobi> oh, looks like it's just a client-side thing
07:05 < cloudbender> My app will definetly use it.  With asynch server code and binary data streams the world is my oyster.
07:23 < mansoor-s> To use rethikdb or not to use rethinkdb
07:23 < mansoor-s> :\
07:24 < cloudbender> think about it
07:24 <@Nexxy> lol
07:24 < cloudbender> ( was that funny ? I thought it was funny )
07:24 < mansoor-s> it was funny
07:24 < substack> BENDING
07:24 < cloudbender> lol
07:24 <@Nexxy> cloudbender, you should rethink that
07:24 <@Nexxy> ...
07:24 < cloudbender> I'll give it some thought
07:25 < mansoor-s> cloudbender, http://i0.kym-cdn.com/photos/images/original/000/000/681/what-you-did-there-i-see-it.thumbnail.jpg
07:25 <@Nexxy> I think db the best idea
07:25 < cloudbender> oooooh that's baaaad lol
07:26 <@Nexxy> ... you think?
07:26 < cloudbender> lol
07:26 < cloudbender> I'm totally thrilled with the arraybuffer stuff.
07:26 < cloudbender> finally geez
07:31 < cloudbender> that bird could really do some damage
07:48 < cloudbender> troll in channel
07:49 < SomeoneWeird> yeah you
07:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
08:40 < [AD]Turbo> hi there
08:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
08:50 < tequnix> Good morning. Is it just me or is http://ui.ajax.org/#docs broken? I cannot click on any link from the navigation bar on the left without getting an 404 error :(
09:29 < mansoor-s> So..
09:29 < mansoor-s> whats the deal with ORMs?
09:30 < echo|> mansoor-s: What about them?
09:30 < mansoor-s> i'm debating whether I should use one 
09:31 < mansoor-s> ORM/ODM
09:32 < echo|> It all depends on the usecase of your data and your data model.
09:34 < echo|> http://blog.nahurst.com/visual-guide-to-nosql-systems
09:36 < mansoor-s> echo|, i've set on my db
09:36 < mansoor-s> on one hand, I would gt a self documenting system, I know exactly what fields my application is using
09:36 < mansoor-s> on the otherhand its a dev overhead
09:37 < echo|> And when it comes to selection of which system, you have to be able to decide how you rank your priorities. Replication, Availability, Consistency. And then counter in specifics such as mongodb has a document size limit. Some are geared better to write cheaply, and some systems, writes are expensive while reads are insanely cheap.
09:37 < myndzi> anyone know of a list or something that lays out which html tags get implicitly closed by which other tags?
09:38 < mansoor-s> echo|, i'm going to try out rethinkdb
09:38 < mansoor-s> been meaning to give it a go
09:38 < echo|> myndzi: Like a table? Or something that does it dynamically?
09:38 < myndzi> what i mean is like
09:38 < myndzi> if you are in an <li> tag and you reach another <li> tag you can assume the previous one is closed
09:38 < myndzi> same if you reach, say, </ol>
09:38 < myndzi> but i'm wondering if there's a compiled/canonical list that describes these relationships
09:39 < echo|> myndzi: Ahh, that would be interesting.
09:39 < myndzi> or if the best i can do is read through the html5 spec and compile it myself
09:39 < myndzi> i mean, they mostly make sense
09:39 < myndzi> but if there IS a canonical definition i want to use it
09:40 < myndzi> i guess i was googling wrong
09:40 < myndzi> http://www.w3.org/html/wg/drafts/html/master/syntax.html#optional-tags
09:40 < echo|> Oh sweet
09:40 < myndzi> looks like about as close to what i want as there would be
09:41 < myndzi> i thought it was all broken up among specific parsing rules or something
09:42 < stafamus> ,m  m  .........................................001533,,.//l;./·, mjħĸui9
09:42 < echo|> mansoor-s: I'd be interested to see how it goes. The first time I heard of rethinkdb was earlier when cloudbender responded. It seems very very similar to MongoDB, just with raw JSON objects and no metadata encoded vs. BSON with meta data. It also doesn't appear to have any additional indexing other than the key itself.
09:44 <@konobi> that's because it's map/reduce style
09:45 < echo|> I noticed that and it's queue-based parallel processing of those jobs vs. Mongo's single-threaded options.
09:46 <@konobi> across multiple hosts and shards?
09:46 < mansoor-s> I was just reading on HN that it uses the same mechanism that erlang uses
09:49 < echo|> konobi: "Query Distribution: Transparent routing, distributed and parallelized" -- http://www.rethinkdb.com/docs/comparisons/mongodb/
09:50 < echo|> "RethinkDB clients can connect to any node in the cluster and queries  will be automatically routed internally.  Both simple (such as filters,  joins) and composed queries (chained operations) will be broken down,  routed to the appropriate machines, and executed in parallel. The  results will be recombined and streamed back to the client."
09:51 < echo|> The same way Riak does their map/reduce. It distributes the jobs to the nodes which the partitions for the data you are querying against lie. Bringing the computation to the data instead of the other way around, which is more expensive. 
09:51 <@Nexxy> \o/
09:51 <@Nexxy> most triumphant
09:52 <@konobi> depends how you measure expense
09:53 < echo|> And ofcourse depends even more on what exactly you're doing in your map/reduce and how expensive it, itself, is.
09:55 < Almion> Je tu nejaky freelancer z Cech, co zrovna nema plne ruce projektu?
09:55 < amurdaca> +1 Symfony
09:55 < Shinister> projektu in cech sounds japanese
09:56 < Almion> It is Czech, not japanese ;) I was looking for a Czech guy, so...
09:56 < Almion> But sorry to the rest
09:57 <@konobi> echo|: that wouls seem to suggest you're not taking I/O throughput into account and what the aggregate of the spinning rust gets you
10:12 < myndzi> haha, what.
10:13 < myndzi> "An end tag whose tag name is 'sarcasm': Take a deep breath, then act as described in the 'any other end tag' entry below."
10:14 < ckknight> myndzi: where you see this?
10:14 <@Nexxy> myndzi, I was showing off your rap on twitter the other day
10:15 < myndzi> ckknight: html 5 editor's draft
10:15 < myndzi> Nexxy: ?
10:15 < myndzi> i vaguely recall something about this
10:15 < myndzi> lol
10:15 < myndzi> but i write a lot of silly raps
10:16 <@Nexxy> https://twitter.com/nexxylove/status/295830082877001728
10:16 < myndzi> lmao
10:16 <@Nexxy> :D
10:16 < myndzi> yeah, that was not bad ;)
10:17 <@Nexxy> it was great.
10:17 < SomeoneWeird> ahaha
10:17 < myndzi> i once had a rap battle as thousand island dressing against ranch dressing
10:17 <@Nexxy> wow.
10:17 < myndzi> it was pretty funny
10:18 < myndzi> i guess it wasn't much of a rap battle, i think we transitioned between rap, haiku, limerick, etc.
10:19 <@Nexxy> someone needs to do webscale nerdcore raps
10:20 <@konobi> see the one of the teacher vs his student?
10:21 < myndzi> yo mama's so fat she couldn't fit at the bigtable? :P
10:22 <@Nexxy> oh god moar yomama jokes
10:24 <@konobi> myndzi: http://www.youtube.com/watch?v=tp4wEewrQdU
10:26 < myndzi> hah
10:27 < myndzi> apparently there was an seo convention where they had rap battles with like, google vs yahoo etc.
10:27 < Shinister> Or a SEO.
10:40 < otari> hello folks, i have developed small node.js application, which does a simple task: checks "some url" for new ID and sends notification to all connected users.. the problem is memory leak.. i have tried lots of things but no success..
10:41 < otari> could you please look through code and tell me what i do wrong? CODE: http://pastebin.com/gqZfRPLj
10:41 < otari> thanks!
10:44 <@konobi> otari: webkit-devtools-agent
10:46 < otari> konobi, should i install it on the same server where nodejs is running?
10:47 <@konobi> otari: check the repository for instructions
10:47 < otari> thanks
10:59  * CoverSlide smells humans in here
10:59 < CoverSlide> do these humans not sleep?
11:00 < stanonyime> I cant seem to get the node sqlite3 to work via npm on my x86 32-bit Windows vista machine
11:00 < CoverSlide> you mean the module doesn't compile?
11:00 < CoverSlide> what error message do you get?
11:01 <@Nexxy> CoverSlide, who are you calling human?
11:01 < stanonyime> yes
11:02 < mscdex> i hate working with vendors with unwieldy products/services
11:02 < stanonyime> "Error: sqlite3@2.1.1 preinstall: `node-waf clean exit,...."
11:03 < mscdex> stanonyime: try this: `npm install https://github.com/mscdex/node-sqlite-fts/tarball/master`
11:03 < myndzi> anyone familiar with aredridel's html5parser ?
11:04 < stanonyime> mscdex : page not found
11:04 < mscdex> huh?
11:05 <@Nexxy> lol
11:05 < CoverSlide> stanonyime: what version of node do you have?
11:05 < mscdex> stanonyime: i meant type that in your terminal
11:05 < CoverSlide> stanonyime: also, try installing the sqlite3 package instead
11:06 < stanonyime> 0.6.5
11:06 < amurdaca> i'm getting mad, should i use node+express+mongodb or php/nginx/mysql for my restful api????
11:06 <@Nexxy> amurdaca, not mad enough
11:06 < amurdaca> lol
11:06 < SomeoneWeird> node
11:07 < CoverSlide> stanonyime: oh yeah, and definitely upgrade node to latest stable
11:07 < amurdaca> then why=
11:07 < SomeoneWeird> its fast
11:07 < amurdaca> i do not expect much traffic to my api
11:07 < CoverSlide> its got the webscale secret sauce
11:07 < amurdaca> php would be too
11:07 <@Nexxy> amurdaca, you should use whatever you're more comfortable with then
11:07 <@Nexxy> unless you want something to learn a node stack with
11:07 <@Nexxy> then do it w/ node
11:08 < amurdaca> i know Nexxy but i'm a senior php developer with an open mind (so i wouldn't kickoff node just becouse is not php)
11:08 <@Nexxy> amurdaca, that's nice of you :)
11:08 < stanonyime> mscdex: "Node-gyp is not recognized as an internal or external program error"
11:08 <@Nexxy> amurdaca, you could also look at restify
11:09 < CoverSlide> stanonyime: node-gyp comes with node v0.8.x
11:09 < amurdaca> i'm really getting mad...i could use Silex (symfony microframework) which i always use but node inspire me T.T
11:09 < mscdex> stanonyime: upgrade to node 0.8.x
11:09 <@Nexxy> inspiration is always good
11:09 < mscdex> stanonyime: 0.8.18 is the current latest for stable
11:09 < stanonyime> ok
11:09 < amurdaca> yup but i'm not so experienced with node
11:10 < CoverSlide> use node if you don't want all the apache baggage. you can still use nginx as a proxy, it's common option
11:10 < gildean> amurdaca: you could use node+modules+nginx+whatever db you want
11:10 < CoverSlide> you could even use mysql with node
11:11 < mscdex> definitely!
11:11 < CoverSlide> the mysql module is pretty sweet
11:11 < CoverSlide> and mscdex has a nice one too
11:11 < mscdex> so is mariasql!
11:11 < mscdex> :-D
11:11 < amurdaca> Nexxy how about node-restify?
11:12 <@Nexxy> I hear good things
11:12 <@Nexxy> I don't use it myself
11:12 < amurdaca> i have also a noob question
11:12 < CoverSlide> not having used symfony, I can't say for sure what framework would be most symfony-like
11:12 < amurdaca> using nginx in front of node don't i lose the power of the unique single process of ndoe?
11:13 < gildean> all node frameworks seem to be pretty easy to use and extend imo
11:13 < CoverSlide> amurdaca: not at all
11:13 < amurdaca> can you explain please?
11:13 < gildean> amurdaca: nginx is singlethreaded as well, and it's faster in dealing static content
11:13 < Gottox> arnedebree: there's no such thing as unique singe process power.
11:13 < Gottox> +l
11:13 < mscdex> amurdaca: you lose the possibility of websocket usage with nginx in front currently...
11:14 < mscdex> if you care about that
11:14 < gildean> mscdex: isn't there a way to circumvent that? or do i recall incorrectly
11:14 < CoverSlide> although there is patch for nginx which addresses it, but you have to compile it yourself
11:14 < amurdaca> for now i don't care but it seems like i lose something about node..
11:14 < amurdaca> what if i then need websocket?
11:14 < mscdex> gildean: the only way iirc is doing tcp proxying
11:15 < amurdaca> how can i migrate in a production enviroment?
11:15 < mscdex> gildean: or something
11:15 < mscdex> or you could use haproxy in front
11:15 < CoverSlide> I second haproxy
11:16 < CoverSlide> but then you don't get the static-ness of nginx
11:16 < mscdex> or be a *real* developer and use node in front 
11:16 < gildean> or just use node in front, depends on your situation
11:16 < mscdex> :-P
11:16 < CoverSlide> although you can use varnish or use a cdn for that stuff
11:16 < amurdaca> node in front doesn't look  so secure as having nginx :D
11:17 < amurdaca> to me of couse
11:17 < amurdaca> *course
11:17 < CoverSlide> it'll be about as stable as node in the back
11:17 < CoverSlide> i favor mullet-driven development
11:17 < CoverSlide> business in the front, party in the back
11:18 < mscdex> and node is both!
11:22 <@Nexxy> ಠ_ಠ
11:22 < mscdex> unicode boxes!
11:23 <@Nexxy> get a real IRC client!
11:23 < SomeoneWeird> haha
11:24 < CoverSlide> pwnied!
11:29 <@konobi> Nexxy: omg, that's rather lewd
11:29 < mansoor-s> mscdex, i recommend xchat :d
11:31 < mscdex> mansoor-s: that's what i'm using
11:31 < mansoor-s> mscdex, ohh.. your an windows aint ya?
11:31 < mansoor-s> xchat has unicode problems on windows, but works fine on linux
11:32 < mscdex> this machine, yes
11:33 <@konobi> irssi++
11:33 < CoverSlide> I am uninstalling jedit due to a lack of midi-chlorians
11:34  * mscdex shakes a fist at Java
11:34 < mansoor-s> konobi, i tried irssi but i felt like i was try8ing to prove something.... and it made me feel clostraphobic
11:35 < CoverSlide> i use irssi because it's easy to keep in a terminal, and i have a tmux sessions that i log into from home or at work
11:35 < mscdex> i used to use bitlbee for the longest time
11:36 < mscdex> but now this is the only time i use irc
11:36 < CoverSlide> i considered looking into weechat though
11:36 < mscdex> so gui is favorable for me
11:37 <@konobi> i can leave irssi going in the background to not distract me
11:37 <@Nexxy> SURE you can
11:37 <@konobi> but you do need a reasonable config upfront
11:37 <@konobi> Nexxy: =0P
11:37 < CoverSlide> irc always distracts me
11:38 < CoverSlide> it's distracting me from my much-needed sleep right now
11:38 <@Nexxy> I'm sorry, were you saying something?
11:38 <@Nexxy> I got distracted.
11:38 <@konobi> Nexxy: someone has to keep the kids from throwing poop
11:38 < CoverSlide> aww
11:38 <@konobi> =0P
11:38  * CoverSlide hides el poop
11:39 <@Nexxy> it's electroluminescent feces?!
11:39 <@konobi> wtf have you been eating?
11:39 < CoverSlide> possibly
11:39 <@Nexxy> what I want to know is how you discovered the fact
11:39 < CoverSlide> i did have mexican last night
11:39 <@konobi> mercury?
11:39 <@Nexxy> depleted uranium!
11:39 <@Nexxy> deliciously authentic
11:39 < CoverSlide> just some cesium 137
11:40 < CoverSlide> now that's what I call a dirty bomb
11:40 <@Nexxy> aged?
11:40 < CoverSlide> like fine wine
11:40 <@konobi> best paired with pinot gris
11:42 <@konobi> time for some benadryl and bed thinks i
11:42 <@Nexxy> lol
11:55 < stanonyime> appjs and websql
11:56 < mansoor-s> *webscale
12:13 < CrawfordComeaux> I'm building an app that takes an image uploaded by the user, feeds it into a python script for processing, and then presents the output of the processing to the user. How should that backend look?
12:13 < CoverSlide> why python?
12:15 < Zac12> hi
12:16 < onr> Python has tons of libraries like SimpleCV
12:16 < SomeoneWeird> depends on what he means by "Processing"
12:17 < CrawfordComeaux> detecting shapes, writing, symbols
12:17 < onr> obviously image processing
12:18 < onr> but probably not something trivial like resizing, cropping
12:18 < CrawfordComeaux> python because i'm using scipy for the processing
12:18 < CrawfordComeaux> onr: yep
12:20 < CoverSlide> alright, acceptable answer
12:20 < CrawfordComeaux> and also, how is it I completely forgot to look at SimpleCV for this? :P
12:20 < onr> i'd use tornado for the processing server
12:21 < CoverSlide> if you said something like resize / crop / converting, i got some radioatcive poo for you
12:21 < CoverSlide> anyway, I assume your python script reads the image from stdin
12:21 < CrawfordComeaux> CoverSlide: I decided to skip over the chimpstagram idea
12:22 < CrawfordComeaux> yep, but I can modify it to fit into whatever architecture makes sense
12:22 < onr> it's gonna morph people's faces to monkey faces?
12:23 < onr> i'd make users upload files to tornado server
12:24 < CrawfordComeaux> onwards to the tornado docs!
12:24 < gyre007> nodejs gurus...what is the best way to run nodejs app which is using websockets over SSL ?
12:24 < `3rdEden> reverse proxy
12:25 < `3rdEden> one does not simply run SSL in node
12:25 < onr> Haproxy has SSL, Nginx + 3rd party TCP proxying module is nice but kinda experimental
12:25 < CoverSlide> I agree with the haproxy
12:26 < CoverSlide> although I haven't seen benchmarks with haproxy using ssl
12:26 < CrawfordComeaux> onr: it's actually a web design tool. redraw final site sketches as plain boxes (by hand), take photos & upload, specify properties, get full-page renders + HTML
12:26 < SomeoneWeird> <`3rdEden> one does not simply run SSL in node < for http its easy
12:26 < CoverSlide> so I'm mainly basing my decision on haproxy's non-ssl performance
12:27 < `3rdEden> SomeoneWeird: the performance bottlenecks you get from it are not easy
12:27 < `3rdEden> Node's SSL performance is inferior if you compare it to HAProxy or NGINX
12:28 < gyre007> CoverSlide onr: HAproxy doesn't have SSL suport built in the stable version yet...
12:28 < onr> CrawfordComeaux: edge detection is rather simple, just a tornado server should be fine
12:28 < CoverSlide> and node isn't 1.0
12:28 < CoverSlide> what's your point?
12:29 < CrawfordComeaux> onr: yeah...the initial script is pretty simple. there's more to it than what I've mentioned, though. ideally want to minimize the "specify properties" part of the process
12:32 < onr> gyre007: yeah. i wouldn't use latest version for critical tasks. but still okay for most apps
12:44 < mscdex> ahhh coffee
13:08 < amurdaca> hey guysss
13:09 < amurdaca> a question! :)
13:09 < amurdaca> where should i handle ssl client certificate?
13:09 < amurdaca> nginx and pass raw cert to node or node?
13:09 < mscdex> correctly!
13:09 < mscdex> :-)
13:10 < amurdaca> https nginx with client certificate -> http node with raw ssl cert passed for additional auth
13:10 < amurdaca> or http nginx -> https node with node handling everything
13:10 < mscdex> if you have nginx in front, why not terminate it there?
13:11 < shapeshed> amurdaca: why not just reverse proxy SSL?
13:11 < amurdaca> shapeshed you mean let nginx handle ssl?
13:11 < shapeshed> nginx on https, proxy to node on http
13:12 < amurdaca> note that i use client certificate + username|email from certificate and password to authenticate in node so i need to read the ssl cert stuff
13:12 < amurdaca> it's like 2 layer: ssl client cert (user1 pass to protected area with username: user1)
13:13 < amurdaca> node show a password field and it will be POSTed along with the user1 from cert to auth
13:13 < amurdaca> does this make sense?
13:13 < shapeshed> yup seems complex though - do you really need that?
13:13 < amurdaca> yeah
13:13 < amurdaca> and is not complex at all
13:14 < amurdaca> both handling client cert in nginx or node
13:14 < amurdaca> i just wanted your thought about where is better to handle SSL
13:15 < shapeshed> I'd go nginx 
13:28 < jucko> YO
13:56 < funkbox> any of you using winston? i want to use custom colors for different log statements
13:59 < `3rdEden> funkbox: did you read the project's readme? https://github.com/flatiron/winston#using-custom-logging-levels
14:00 < funkbox> `3rdEden: i want it colorized by something other than the log level
14:00 < `3rdEden> funkbox: then why don't you color them your self?
14:02 < funkbox> i guess that would work
14:02 < funkbox> just gotta check if there's a formatting 
14:03 < funkbox> err something that can transform the message before logging for every transport
14:03  * Nexxy hands out crayons
14:03 < jasonroyle> Ooo crayons!
14:04 < dch> isaacs: we're starting some benchmarking of complex views in couchdb project, any objection to us using npm registry as a test case?
14:04 < dch> given I can replicate it all, I assume its fair used.
14:11 < amurdaca> is node fully supported on FreeBSD 9.1-RELEASE? i'm installing/compling form ports
14:12 < balboah> the ports version wasn't very up to date when I tried it. However compiling source worked fine. Not a full scale test though
14:12 < amurdaca> ty
14:27 < ilanF> hello someone can explain to me how to use editorconfig plugin for sublimetext 2?
14:28 < niix> ilanF: I don't know if anyone here could help but I think there is a sublime channel
14:28 < ilanF> thankx
14:42 < amurdaca> hey guys
14:43 < amurdaca> is it possible to release a node/express/passport project under BSD license?
14:51 < tongcx> i tried to use EventSource to stream events to iphone, but seems it doesn't accept chucked message
14:51 < tongcx> do anyone know how to make Server sent event work on iphone?
14:52 < Shinister> to iPhone?
14:52 < Shinister> so, like, a website on an iphone with socketio?
14:53 < tongcx> i guess like websocket
14:53 < tongcx> but i used EventSource
14:53 < Shinister> no idea sorry
14:53 < tongcx> it works on computer browers, but fails to communicate with iphone browers
14:54 < tonka> why not just use websockets/socket.io?
14:55 < tonka> websockets works well on iOS 5/6 afaik
14:55 <@Nexxy> websockets on a mobile network?
14:56 < tonka> Nexxy: over ssl
14:56 < tonka> otherwise proxies may mangle requests and fuck the bidirectional connection
14:56 < shapeshed> you can use other transports like xhr-polling
14:58 < wwwy3y3> you don't have any fallback?
15:00 < shapeshed> EventSource has pretty poor browser support no? Or are you using shims?
15:10 < pats_Toms> is there any fw for writing restfull api on nodejs?
15:10 <@Nexxy> fw?
15:10 < pats_Toms> Nexxy, framework
15:11 <@Nexxy> restify
15:14 < TheeBryanWhite> Question for you guys. I'm a total noob with node. Looking for a project to help me get my head around it. I have an idea for an app that archives Facebook status updates. Is node something I can use to automate the process of keeping an eye out for new statuses?
15:15 < JPT> i guess you can use node for almost everything you can think of
15:15 < JPT> maybe check some rss feedparser-projects
15:16 < TheeBryanWhite> cool. I'm looking around github for something I could use like that as a jumping off poingt
15:20 < shwaiil> hi
15:22 < shwaiil> What's the best resource to start learning NodeJs and a Mvc Framework to start working ? Or should I start straight with the MVC Framework, such as ExpressJs ? Thanks for looking! *found a Peepcode video tutorial but I think it forces you to also learn Coffeescriptt that i'm not interested. Thank you!
15:23 < Virunga> shwaiil: i think this doc can be a start http://book.mixu.net/index.html
15:23 < diogogmt> shwaiil: expresse.js is a really good way to get an app up and running
15:23 < shwaiil> Virunga: tks
15:24 < diogogmt> shwaiil: looking into the connect module, which is behind express is also a good way to understand how express can easily create a http server
15:24 < Virunga> shwaiil: express is really easy to learn and use; you could exercise with it
15:24 < shwaiil> thank you guys : )
15:25 < Virunga> express isn't MVC tough
15:25 < Virunga> though
15:25 < Shinister> it can be!
15:26 < BlakeRG> can you combine express and backbone?
15:26 < diogogmt> Virunga: it provides the foundation to structure the app in a MVC way
15:26 < thanpolas> BlakeRG, yes
15:26 < Virunga> Yes
15:26 < diogogmt> BlakeRG: sure
15:26 < Shinister> I call it exprckbone
15:26 < Virunga> :)
15:26 < diogogmt> BlakeRG: you could even share some models between the client and server side
15:26 < diogogmt> pretty cool stuff 
15:27 < shwaiil> so expressJs is not a MVC framework ?
15:27 < Virunga> But, is it a good choice, instead of using framework predisposed for MVC?
15:28 < thanpolas> Virunga, you can self-discipline to an MVC pattern
15:28 < Virunga> shwaiil: no, it's like sinatra. Do you know it?
15:28 < thanpolas> apart from that, you may check component that relies on express
15:28 < shwaiil> I'm not a ruby dev
15:28 < thanpolas> but nothing is as mature as you've prolly be accustomed to
15:28 < shwaiil> Virunga: I usually read about it yes, but not a ruby dev
15:29 < diogogmt> Virunga: which features would you say are missing to be considered a "full MVC" framework?
15:29 < Virunga> I'm just wondering if that's a good choice, nothing more.
15:30 < Virunga> no judge
15:30 < Virunga> diogogmt: there's no model mecanism representation for example
15:30 < thanpolas> Virunga, you'd have to see that for yourself based on your requirements.
15:31 < Virunga> I see
15:32 < MrTiggr> wow ..i only just spotted this and i even KNOW the guy .. any Nodesters with a black-ish hat shud check out https://github.com/SomeoneWeird/msfjs
15:32 < Virunga> I don't know backbone but seems used a lot
15:32 <@Nexxy> MrTiggr, you know SomeoneWeird?
15:33 < MrTiggr> indeed
15:33 < MrTiggr> very well
15:33 < MrTiggr> hes my "protege"
15:33 <@Nexxy> MrTiggr, how do you manage?
15:33 < MrTiggr> lol
15:33 < SomeoneWeird> ohhey
15:33 < SomeoneWeird> Nexxy, shoosh u
15:33 <@Nexxy> lol!
15:33 < MrTiggr> with alkihol
15:33 <@Nexxy> :P
15:33 < Virunga> Nexxy: you're popular! I saw you in a video on twitter :)
15:33 < BlakeRG> anyone here have experience using web workers?
15:33 < MrTiggr> o/ some
15:34 < MrTiggr> they are a PiTA to work with 
15:34 < MrTiggr> or can be
15:34 <@Nexxy> Virunga, my apologies!
15:34 < Virunga> There's no need! 
15:35 < Virunga> Those videos are nice :D
15:35 <@Nexxy> I never watch them
15:35 <@Nexxy> so I will take your word for it
15:35 <@Nexxy> :P
15:35 < Virunga> I understand, not everyone have my free time ahahah
15:36 < diogogmt> BlakeRG: how are you planning to use web workers? 
15:38 < BlakeRG> diogogmt: i've got a web service which in turn relies upon 4 external web services… I want to be able to call those 4 external web services at the same time and when the results come back have a callback run where i can join the data together then send it back out to the client
15:38 < BlakeRG> since each WS hit takes about a second each, we're talking 4 seconds minimum for a single API call.. which is why i want to "thread" the calls
15:38 < MrTiggr> in NodeJS, BlakeRG ?
15:39 < MrTiggr> or in the browser
15:39 < BlakeRG> MrTiggr: in node
15:39 < MrTiggr> no need for webworkers
15:39 < amurdaca> node is not threaded
15:39 < diogogmt> you just need to set the callbacks for each ws call, and when they are all completed parse the results
15:39 < MrTiggr> just do seperate async get's
15:39 < MrTiggr> or posts
15:39 < MrTiggr> to the webservice
15:39 < MrTiggr> use something like restler
15:39 < BlakeRG> MrTiggr: i was thinking something like this https://github.com/caolan/async#parallel
15:39 < MrTiggr> ^^ like diogogmt sed
15:40 < MrTiggr> no need
15:40 < BlakeRG> but it's not truly parallel is it not?
15:40 < MrTiggr> they are already parallel if they are callback-based/async in node
15:40 < diogogmt> you can create a cluster
15:40 < SomeoneWeird> neither is async.parallel
15:40 < diogogmt> still not in prod phase, but you could try it out
15:40 < SomeoneWeird> they run (kind of) parallel in the event loop
15:41 < diogogmt> SomeoneWeird: cool work on the msfjs
15:41 < SomeoneWeird> cheers
15:41 < SomeoneWeird> check out https://github.com/SomeoneWeird/msfjsweb
15:41 < SomeoneWeird> too
15:41 < MrTiggr> you should see it actually running, diogogmt  :D
15:41 < SomeoneWeird> fully fledged web interface for it
15:41 < SomeoneWeird> gunna add SE stuff to it soon
15:41 < MrTiggr> and the web UI is pwn too :D
15:41 < diogogmt> I sure will!
15:42 < MrTiggr> BlakeRG: do you need to "wait until they all return" ?
15:43 < BlakeRG> MrTiggr: yes because i need to mashup the data from all 4 calls and send it back out to the client browser
15:43 < MrTiggr> ok ... so you can just do it with plain Node js
15:44 < SomeoneWeird> or use async.series
15:44 < MrTiggr> make the call to each WS asynchronously and increment a counter when you make the call
15:44 < MrTiggr> ^^ yu can use async.series tho ofc
15:44 < diogogmt> BlakeRG: using the Step lib makes thing even easier
15:44 < MrTiggr> Step is also good for this ^^
15:45 < BlakeRG> link?
15:46 < MrTiggr> ;;sl NodeJS Step
15:46 < MrTiggr> hrmm   SomeoneWeird   invite gribble
15:46 < SomeoneWeird> not quite
15:46 < MrTiggr> aaanyway ...  ima bed all - nn! o/
15:47 < SomeoneWeird> now watch him timeout >.>
15:47 < MrTiggr> nah, im leaving the laptop lid open :P
15:47 < MrTiggr> GN!
15:47 < SomeoneWeird> gn
15:47 < BlakeRG> here's what i am having trouble understanding though. If each external web service i am syndicating takes a second to come back and node is only a single process, then node won't help me speed up this API call at all. unless i'm using threads/webworkers there's no possible way to make the process less than 4 seconds total.. So i might as well just stick with PHP right?
15:48 < BlakeRG> unless i can process all of the calls at the same time
15:48 < SomeoneWeird> nope
15:48 < SomeoneWeird> it's async
15:48 < SomeoneWeird> which makes all the difference
15:48 < MrTiggr> spawn *cough*
15:48 < MrTiggr> NN!
15:53 < bnoordhuis> BlakeRG: node makes the calls for you asynchronously and concurrently
15:53 < diogogmt> BlakeRG: That's the beauty of node, all the ws calls do not block
15:53 < diogogmt> so you just need to register the callback and wait until the async call is completed
15:53 < bnoordhuis> BlakeRG: if you're querying 4 web services and each takes 1 second to respond, that's 1 second total for all four, not four seconds
15:54 < BlakeRG> thats interesting
15:54 < jd823592> Hello, i am attempting to use passportjs with expressjs and i can see that my user gets serialized and even deserialized correctly upon subsequent requests after login in. but accessing a route with passport.authenticate("local", {successRedirect: "/", failureRedirect: "/login"}) keeps redirecting to login :/ what can be wrong?
15:54 < SomeoneWeird> sessions
15:54 < SomeoneWeird> cookies
15:55 < BlakeRG> bnoordhuis & diogogmt so as long as i create an HTTP call with a callback node should take care of the rest :)
15:55 < jd823592> if cookie/session was the problem the user would not be deserialized after requesting the road would it? but i have console.log user in that method and i get the correct user object
15:55 < bnoordhuis> BlakeRG: yep
15:55 < diogogmt> BlakeRG: yes
15:56 < BlakeRG> is there a good node package for interfacing with external REST web services?
15:57 < BlakeRG> rather than doing manual HTTP requests
15:57 < SomeoneWeird> depends, some API's have dedicated packages, else just use request or restler or something
15:57 < basiliothecat> Hi everybody! Can someone hint me on what's the best way to share bits of code between 2 node apps? e.g. i'm doing a web app and an api part which share some functionality. Relative reuire()'s, npm links or is there anything better?
15:57 <@Nexxy> basiliothecat, modules.
15:58 < BlakeRG> https://github.com/danwrong/restler
15:58 <@Nexxy> that's kind of exactly what they're for :)
16:00 < basiliothecat> Nexxy: and that can be done with the shared pieces being private? (not in npm repo)
16:00 < jd823592> Please, if i try to GET a route in my express app. The passportjs deserializeUser method gets called and recreates the correct User and calls done(null, user) and after that I am redirected to failureRedirect
16:00 < SomeoneWeird> BlakeRG, yes
16:00 < SomeoneWeird> basiliothecat, yep, you just don't do npm push
16:00 < jd823592> what is wrong?
16:01 < basiliothecat> SomeoneWeird,Nexxy - thanks a lot! will get study npm then
16:02 < basiliothecat> s/get//
16:02 <@Nexxy> basiliothecat, you can set them to private
16:02 < BlakeRG> you guys have been very helpful, i'm going to do a proof of concept today and see what kind of speed gains i can get with node.js
16:02 <@Nexxy> and use your own repo
16:02 <@Nexxy> instead of npmjs
16:03 < basiliothecat> Nexxy: that's what i'm doing, yet am not clear on how the private deps will be resolved - will check that issue out
16:05 <@Nexxy> basiliothecat, https://npmjs.org/doc/registry.html
16:05 < diogogmt> BlakeRG: good luck with that and don't forget to come back and share you results here :)
16:06 < BlakeRG> i surely will.. right now doing this in PHP just isn't cutting it
16:07 < SomeoneWeird> (or if you need help)
16:07 < BlakeRG> i figured, if i have to convince my employer to let me use a different technology it might as well be in a language the other developers already know
16:08 < Bitz> Hello people! Does anybody knows a strong on-site course about NodeJS ?
16:09 < basiliothecat> Nexxy, hope i'll be able to cope with it without setting up a registry - doesn't seem worth it in my case. Still - thanks for the tip!
16:14 < foobar321> Hi. How to check than given object has a key on C++ side? I can't find any example of such thing in http://nodejs.org/api/addons.html
16:15 <@Nexxy> meteor has a package manager now! it appears to be completely incompatible with npm modules!
16:15  * Nexxy thumbs up
16:16 <@Nexxy> (except for the fact that its package manager... is an npm module)
16:16  * mbalho facepalm
16:16 < holzp_> Time to build a package manager manager. hooray!
16:16 <@Nexxy> package.json doesn't convey enough of a sense of... intelligence
16:16 <@Nexxy> let's call it...
16:16 <@Nexxy> oh, I don't know
16:16 <@Nexxy> smart.json
16:16 <@Nexxy> yeah!
16:16 < niix> haha
16:17 < foobar321> what is meteor?
16:18 <@Nexxy> it's what happens when someone gets funding to make a rails for node
16:18 < niix> http://oortcloud.github.com/meteorite/
16:18 <@Nexxy> and decides to over engineer everything
16:18 <@Nexxy> because, why not? they've got the money.
16:18 < niix> meteor seems useless to me
16:18 < holzp_> it really doesn't matter, they money, tech people like always wins
16:19 < crabtree> yes
16:21 < jd823592> How should passport.js work? does passport.authenticate(...) check session for User object or does it only check post username password?
16:25 < niix> jd823592: have you checked out the examples?
16:25 < niix> like these https://github.com/jaredhanson/passport-local/tree/master/examples
16:26 < jd823592> niix: lot of them, i am still confused
16:29 < jd823592> niix: thanks... in this example ensureAuthenticated
16:29 < jd823592> is used
16:30 < niix> jd823592: word, yeah it looks like it goes back to connect's middleware
16:32 < diminoten> what's the expressjs channel?
16:32 < crabtree>  /join #express
16:32 < diminoten> thanks
16:44 < owen1> can i change the url in package.json to a different repo (for an npm package i created)
17:02 <@isaacs> dch: as long as you don't impact the actual public registry, it sounds awesome.  please share the numbers :)
17:02 <@isaacs> dch: but yes, the data is out there, free for all.
17:03 < owen1> i am trying to write an number into a 64byte buffer. is that correct? buf = new Buffer(8); buf.writeDoubleBE(1,0); <Buffer 3f f0 00 00 00 00 00 00>
17:03 < owen1> i meant 8 byte buffer
17:04 < owen1> and int64
17:04 < crabtree> javascript doesn't have int64
17:04 < crabtree> :(
17:05 < owen1> crabtree: do i care? i need to write it in binary
17:05 < crabtree> so lame
17:30 < funkbox> any of you use glossy with ubuntu's rsyslog ?
17:33 < cloudbender> See tha Express has a google group.  Thought google groups were going away.
17:36 < funkbox> i'm seeing [object Object] logged instead of the text
17:36 < harrisonm> In its original sense.  They've been unrolling a new design/functionality set for a while
17:46 < cloudbender> OK what the hell is a 'webworker'
17:46 < cloudbender> funkbox see if you can get to object.value instead of object
17:46 < funkbox> cloudbender: i've made a change to winston-syslog and it works
17:49 < xk_id> Is there a verbose mode in ndoe
17:49 < xk_id> Is there a verbose mode in node? I mean when running an app. For example, how each variable gets changed, etc. 
17:49 < cloudbender> xk_id firefox has some web developer tools on the menu
17:49 < cloudbender> They are adequate
17:50 < xk_id> I'm not dealing with brwosers, unfortunately.
17:50 < cloudbender> well, then you bang results to the console
17:50 < xk_id> yes, but I'm afraid I'm missing something....
17:50 < cloudbender> Go old school
17:50 < xk_id> my app is behaving extremely strangely
17:50 < Kakera> use a debugger
17:51 < Robert00001> but google chrome's dev tools are the best
17:53 < xk_id> is there a command like console.log that doesn't print on a new line?
17:53 < tellnes> xk_id: process.stdout.write()
17:53 < xk_id> thanks.
17:57 < cloudbender> ok, today is client-side indexdb day
17:57 < cloudbender> <<< loves object databases
17:59 < xk_id> has anybody every considered writing everything a Node.js prints/logs, to a file?
17:59 < spion> xk_id, yup.
17:59 < xk_id> spion: how did you go about that?
17:59 < Kakera> https://github.com/Lewuathe/node/commit/1a0ef20d2c600d6468cbfd7369a185ca68c3e3e2
18:00 < Kakera> I'll be really sad if this gets pulled and called a day.
18:00 < spion> there are 3 ways but all seem to be buggy on windows
18:00 < spion> one is process.stdout.pipe(fs.createWriteStream(...))
18:02 < xk_id> spion: think i'm gonna use this? http://www.computerhope.com/unix/uscript.htm
18:02 < spion> another is node app.js > output-file.log 
18:02 < spion> and the third is to simply use forever
18:02 < spion> and get both process monitoring (autorestart) and logging to files.
18:03 < johndoe_> Hello guys can someone help me with node.js? It is a specific question
18:03 < Robert00001> what's the question?
18:03 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:03 < spion> oh, and forever --watchDirectory for automatic restarts on file changes.
18:03 < johndoe_> The guys on stackoverflow couldn´t help me
18:04 < johndoe_> Maybe you know getUserMedia in HTML5 I recorded the audio buffers and send them to node.js
18:04 < johndoe_> I created a byte array 
18:04 < johndoe_> and want to create a wav file
18:04 < johndoe_> out of it
18:04 < johndoe_> People use "new Blob" function in browsers
18:05 < johndoe_> constructor to build wav files
18:05 < johndoe_> node.js does not have a way to construct byte array to wav how do I solve this?
18:05 < spion> it has the Buffer class
18:05 < johndoe_> I tried with buffer class
18:05 < johndoe_> But when I want to save it
18:05 < spion> why do you need a wav file?
18:06 < johndoe_> I want to listen to what I recorded on the mic
18:06 < johndoe_> When I use fs.write
18:06 < johndoe_> I only get one line of code
18:06 < johndoe_> saying object blabla
18:06 < johndoe_> It only saves the object name not the whole structure
18:06 < johndoe_> as wav
18:07 < spion> why not wavFile = fs.createWriteStream('path/to/wavfile') and then httpRequest.pipe(wavFile) ?
18:07 < spion> also, where is the code?
18:07 < johndoe_> I can send you wait
18:07 < Industrial> pastebin.
18:07 < johndoe_> ok
18:08 < johndoe_> http://pastebin.com/DV870YBJ
18:09 < johndoe_> ExportWav function
18:09 < spion> johndoe_, how about the browser code
18:09 < johndoe_> I can create the dataview
18:09 < cloudbender> bbl
18:10 < spion> your problem sounds to me like jQuery is serializing the file object to some kind of JSON.
18:10 < spion> instead of passing it to xmlhttprequest
18:10 < johndoe_> http://pastebin.com/JFTvKhNx
18:11 < johndoe_> Everything is correct
18:11 < johndoe_> but new Blob works inside browsers
18:11 < johndoe_> because its DOM
18:11 < johndoe_> I just need a way to save/Create the wav file inside node.js and save it with node.js
18:11 < spion> then what is getchannelData ?
18:11 < johndoe_> getChannelData is the clients audio input
18:12 < spion> okay, so you are saying, you can verify that the data arrives correctly in node
18:12 < Industrial> Anyone use mocha for testing? Howcome it resolves to a function once, but in the describe callback it resolves to undefined? https://gist.github.com/fdd254110274f5fb8bc7
18:12 < johndoe_> Yes
18:12 < johndoe_> I can verify
18:12 < johndoe_> that the data is correct
18:12 < johndoe_> its only about this line of code
18:12 < johndoe_> var audioBlob = new Blob([dataview], { type: 'audio/wav' });
18:13 < johndoe_> I need a substitute for the new Blob function
18:13 < johndoe_> it creats the wav audio file from a typed array
18:13 < johndoe_> creates*
18:14 < Industrial> nvm, my fault.
18:14 < johndoe_> If this works I would have a working node.js audio streaming server :-)
18:15 < spion> johndoe_, did you try converting the arraybuffer to a buffer?
18:15 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:16 < Kakera> johndoe_, are you sending the audio stream over socket.io?
18:16 < johndoe_> yes
18:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:16 < johndoe_> I am sending it via socket.io
18:16 < johndoe_> I used https://github.com/mattdiamond/Recorderjs
18:16 < johndoe_> but wanted to port his function
18:16 < Kakera> how does it encode the binary data?
18:17 < johndoe_> from client to serverside generation
18:17 < johndoe_> spion, I tried to create a buffer from this data view
18:18 < johndoe_> but its not generating it correctly
18:18 < spion> where is that code?
18:19 < spion> thats about the only remaining possible point of failure besides socket.io serialization
18:19 < Kakera> johndoe_, can you show the code where you listen for the socket.io event in node.js?
18:19 < johndoe_> yes, I can show you but the data is send correctly
18:20 < johndoe_> I just don´t know how to construct
18:20 < johndoe_> the wav file
18:20 < johndoe_> out of a dataview array
18:20 < johndoe_> wait
18:20 < Kakera> I didn't know socket.io supported sending anything but strings
18:22 < johndoe_> http://pastebin.com/DNt9JGZj
18:22 < xk_id> How bad do you think this error is? It is thrown after a few iterations, but program seems to be working fine afterwards too... https://gist.github.com/4708487
18:22 < johndoe_> Kakera socket.io
18:22 < johndoe_> is sending strings
18:23 < johndoe_> that is correct
18:23 < johndoe_> I am not getting binary data
18:23 < Kakera> and how do you get an arraybuffer from them
18:23 < johndoe_> kakera http://pastebin.com/DV870YBJ
18:24 < johndoe_> I get the left and right audio input
18:24 < johndoe_> and merge buffers
18:24 < johndoe_> then encode it to a wav dataview like in recorder.js
18:24 < johndoe_> the data given from audio input
18:24 < johndoe_> are strings
18:24 < spion> I do wonder how is that Float32Array converted to string
18:25 < johndoe_> or better said it is sending numbers
18:25 < spion> but nevermind that the packing and unpacking should be the same.
18:25 < spion> if it works
18:25 < johndoe_> I can send you
18:25 < spion> johndoe_, have you tried this to convert the ArrayBuffer - http://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer
18:26 < spion> (the second function)
18:27 < johndoe_> spion I will try this but, how can I save my buffer to the harddisk using fs.write?
18:27 < johndoe_> I am still confused
18:27 < johndoe_> how to save this data view array to the harddrive 
18:27 < spion> well, fs.write supports a buffer argument.
18:27 < spion> you can even simply use fs.writeFile
18:28 < johndoe_> mhh i used fs.writeFile without data view but I will try to use your function
18:29 < spion> first convert it to a node buffer.
18:29 < Robert00001> it can be a string
18:31 < spion> it will be much easier and high-performance if you use streams though
18:31 < johndoe_> WOT
18:31 < johndoe_> WOOT
18:31 < johndoe_> spion thanks alot
18:31 < spion> yay :)
18:31 < johndoe_> it works
18:31 < Robert00001> Happy now?
18:31 < johndoe_> yes!!
18:32 < johndoe_> the 2nd function worked
18:32 < spion> i recommend you look into creating a more streamy api :D
18:32 < johndoe_> WOOOW I can stream audio
18:32 < johndoe_> with html5
18:32 < johndoe_> without flash ^^
18:32 < spion> i think through() should be excellent for this
18:33 < johndoe_> before this worked
18:33 < johndoe_> I used binary.js
18:33 < johndoe_> But streaming didnt really work well
18:33 < johndoe_> but this works
18:33 < johndoe_> so thankful
18:33 < foobar321> How you stream audio withouth flash?
18:33 < johndoe_> HTML5 GetUserMedia
18:33 < spion> the new media api
18:33 < johndoe_> it is supported in chrome 
18:34 < johndoe_> firefox
18:34 < johndoe_> and in 2013 also internet explorer
18:34 < Robert00001> why not make it work with the audio element in html5?
18:34 < spion> can it record audio?
18:34 < Robert00001> for wider support
18:35 < rendar> johndoe_: which audio codec do you use?
18:35 < Robert00001> oh
18:35 < johndoe_> Hehe it works with audio element in html5
18:35 < Robert00001> you could use audio element for playback
18:35 < spion> yep, streaming user mic -> server
18:35 < johndoe_> I am using HTML5 audio element
18:35 < johndoe_> for playback
18:36 < johndoe_> rendar it sends raw wav data
18:36 < spion> voice chat? :)
18:36 < johndoe_> but I convert it with ffmpeg-fluent
18:36 < rendar> johndoe_: i see, what is the input of audio? mic, or some file?
18:36 < Robert00001> mic
18:36 < Robert00001> I think
18:37 < Robert00001> because of GetUserMedia
18:37 < johndoe_> mic
18:37 < rendar> i see, cool
18:37 < johndoe_> I actually
18:37 < johndoe_> combined
18:37 < johndoe_> more than this audio
18:38 < johndoe_> together with other events
18:38 < johndoe_> you have
18:38 < johndoe_> the possiblity
18:38 < johndoe_> to record
18:38 < johndoe_> things you are doing
18:38 < johndoe_> like on google docs
18:38 < johndoe_> but the next step
18:38 < johndoe_> would be
18:39 < johndoe_> creating rtmp server
18:39 < johndoe_> if someone is good with node.js
18:39 <@mbalho> you sound like http://www.youtube.com/watch?v=fVSguNhHwPQ
18:39 < Robert00001> I am good with node.js
18:39 < johndoe_> I would even pay some thousand dollars
18:39 < johndoe_> if someone is capable
18:40 < spion> i kinda love the excitement when you discover the new stuff that are possible :)
18:40 < amurdaca> evening guys!
18:40 < spion> s/love/like
18:40 < Robert00001> Hi
18:40 < johndoe_> If you would like to earn some money with node.js and have fun creating serverside apps for html5 audio streaming
18:40 < johndoe_> you can contact me
18:41 < johndoe_> good payment
18:41 < johndoe_> if you want freelance work
18:41 < spion> johndoe_, you might be interested in https://github.com/nalply/mtrude
18:42 < johndoe_> spion thanks
18:42 < johndoe_> thats exactly
18:42 < johndoe_> what I was looking for 
18:42 < eydaimon> is there any description for package.json anywhere and what all the options etc are? Not been able to find. Specifically the question I have now is how to tell npm install a specific URL for an npm package.
18:42 < spion> apparently its not complete yet
18:43 < johndoe_> yes I have talked with people creating this kind of projects
18:43 < johndoe_> its kinda difficult
18:43 < kaen> is there a way to ask node or socket.io how much data has been transmitted since startup?
18:44 < basiliothecat> eydaimon, check out npm help json
18:45 < shakefon> eydaimon: http://package.json.nodejitsu.com
18:45 < johndoe_> ok thankyou spion you saved my day bye
18:46 < eydaimon> basiliothecat and shakefon: thanks
18:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:49 < funkbox> if i call net.Socket.write ona tcp socket consecutively will the first message be written tot he steram entirely before the second one ?
18:50 < bnoordhuis> funkbox: yes
18:50 < funkbox> excellent
18:51 < funkbox> god whoever wrote winston-syslog should have maintained it :(
18:54 < diogogmt> anybody knows why node doesn't have autoconf to check for dependencies when building it from source?
18:54 < wraithgar> funkbox try bucker on for size https://github.com/nathan-lafreniere/bucker
18:54 < funkbox> eh i've got this fixed 
18:54 < funkbox> plus i've already added winston
18:55 < wraithgar> bucker was designed so if you're using winston just instantiate it w/ the same name and whatever was logging will still work
18:55 < diogogmt> wraithgar: do you recommend any other logging module?
18:56 < funkbox> wraithgar: okay will check it out
18:57 < gkatsev> anyone good with uglify? what options got you the smallest output file-size? For some reason, I'm getting the output to be over 1.5x of what I can get with google's closure compiler
18:58 < Robert00001> closure is the best, but not as buggy as uglify
18:58 < funkbox> wraithgar: it uses UDP, no go
18:58 < Robert00001> but is more buggy I mean
18:59 < gkatsev> Robert00001: yeah, but if I look at http://lisperator.net/uglifyjs/ that table at the bottom, the difference isn't 1.5x
18:59 < nathan7> gkatsev: You want -m
18:59 < gkatsev> hm... maybe ADVANCED mode wasn't used?
18:59 < gkatsev> nathan7: I'm using -c -m
18:59 < nathan7> gkatsev: and -c, yes
18:59 < gkatsev> but actually, it doesn't seem to be mangling it much :/
19:00 < nathan7> hrm
19:00 < nathan7> That's strange
19:00 < eydaimon> basiliothecat: doesn't seem to work with dropbox :/   npm ERR! fetch failed https://www.dropbox.com/s/p1lqje73/package-0.0.1.tgz  any ideas?
19:00 < gkatsev> maybe I need to tell it with -r what to keep?
19:01 < xk_id> what's the best C compiler to use to compile Node.js?
19:01 < Robert00001> dropbox says: Invalid Link
19:01 < Robert00001> This link was not well formed.
19:01 < amurdaca> 2 hours compiling node on a freebsd VM with 512K or ram T.T!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
19:01 < gkatsev> Robert00001: oh, weird, that wasn't the url I wanted to link
19:01 < eydaimon> basiliothecat: nm, changing https to http made it work
19:02 < gkatsev> Robert00001: wait, never mind, I misread shit
19:02 < s5fs> Does npm get built when you compile node, or is it still a separate install?
19:02 < amurdaca> same
19:02 < gkatsev> s5fs: you get npm when you install node nowdays
19:02 < amurdaca> s5fs when u compile node you get npm
19:02 < amurdaca> *install
19:02 < s5fs> gkatsev: huh, that's what i thought. okay, thanks!
19:06 < s5fs> Is node-waf officially dead in 0.8.x and beyond?
19:07 < othiym23> s5fs: it's officially deprecated in 0.8+
19:07 < s5fs> othiym23: Thanks. I'm building an Angstrom package from an old node recipes and a few things are omitted from the package (dtrace, node-waf, and npm). I know I need npm, but the others I'm not so sure about.
19:07 < othiym23> it may be nuked at some point, but the core team is using gyp now
19:09 < holzp_> is there a built in unserscore-ish Object.values in node?
19:11 < cloudbender> has anyone worked with IndexedDB on firefox ?
19:11 < skope_> hmh. i don't get that npm install -g package. how am i supposed to load those in the script?
19:11 < skope_> i just have var express = require('express'); but it whines that cannot find module express
19:12 < cloudbender> Window.IndexedDB is null on my browser
19:12 < othiym23> holzp_: nope, closest ES5 method is Object.keys(object).map(function (key) { return object[key]; })
19:12 < othiym23> skope_: install -g is only for installing binaries, not packages
19:12 < holzp_> :(
19:12 < othiym23> skope_: if you want to have a bunch of packages shared across a deploy, set a NODE_PATH and install the shared modules there
19:12 < skope_> othiym23: heh. ok
19:12 < skope_> othiym23: okay. thanks
19:13 < aduran> dang it... chrome on android doesnt display the results :(
19:13 < aduran> i wonder if its socket.io or my android
19:13 < nathggns> Anyone here know about swig?
19:13 < geNAZt> nathggns: yes me
19:14 < geNAZt> its my first choice template engine
19:14 < skope_> i do know about swag yo
19:14 < nathggns> geNAZt: This is just about swig, not node btw. Is it possible to use custom tags in the browser? The docs use node.
19:14 < aduran> hey,,, whatsup when i dont get my results showed in android chrome? im using socket.io only
19:15 < geNAZt> define custom tags
19:16 < nathggns> http://paularmstrong.github.com/swig/docs/#tags-custom
19:16 < s5fs> How do I install a node module that's not in npm? It's just a directory currently.
19:17 < s5fs> Can I just drop it into node_modules and then npm install from node_modules/mymodule?
19:19 <@mbalho> s5fs: if your module folder name matches the name in package.json you just have to put the folder in node_modules and then you will be able to requrie it
19:19 <@mbalho> s5fs: if it has dependencies cd into the folder and run `npm install` to install its dependencies
19:19 < nathggns> geNAZt?
19:19 < s5fs> mbalho: perfect, thank you. this is what I was doing but just because it worked doesn't mean it was correct, haha!
19:21 < s5fs> Like a fool I've added node_modules to my git repo, and now that I've got Mac users on the project, this approach sucks. I've got modules that are built on multiple platforms now and that causes node to segfault on occasion. I'm going to remove the diretory from git, is there a way to have npm rebuilt all the modules, or should I just empty the node_modules directory?
19:22 < geNAZt> s5fs: lookup for package.json
19:23 < nathan7> s5fs: npm rebuild, yo.
19:23 < nathan7> s5fs: You should probably go for npm shrinkwrap.
19:24 < s5fs> nathan7: thanks! I'll take a look at shrinkwrap too.
19:29 < MI6> joyent/libuv: Ben Noordhuis master * 8311390 : darwin: merge uv_cond_timedwait implementation  Merge the OS X specific i - http://git.io/CafB5g
19:35 < rickibalboa> Has anyone got any feedback on the binary distributions for latest stable? Says it's experimental, but cannot be bothered recompiling node
19:36 < CoverSlide> what says it's experimental?
19:36 < CoverSlide> all the stable packages should be stable
19:36 < rickibalboa> http://blog.nodejs.org/2012/08/07/node-v0-8-6-stable/
19:36 < rickibalboa> "This is an experimental feature. Please use it and provide feedback."
19:37 < CoverSlide> as of august
19:38 < CoverSlide> i think lots of people are using the binary executables now, those of us using nvm / nave etc
19:38 < CoverSlide> I haven't heard any complaints so far
19:38 < rickibalboa> hmm ok.
19:53 < dob_> Where are you logging? Syslog, plaintext or mongodb? I am developing a large scale application and thinking about using mongodb for logging. Cause I can run a multimaster logging infrastructure. Will it slow down my server too much? What are you thinking?
19:54 < livinded> dob_: looking into doing something very similar
19:55 < dob_> Currently I am using winston but i am not sure if i should use mongodb for logging ;-)
19:56 < livinded> I'm planning to start with mongo then depending on scale and performance possibly move to hadoop
19:57 < livinded> but for our current needs mongo should be more than sufficient. I just need a way to easily store different types of events that don't all have the same information and allow me to quickly perform map/reduce type operations over the data for generating statistics
20:01 < dob_> livinded, thanks for your reply
20:03 < livinded> dob_: no problem. I haven't implemented it yet so I have no idea how well it's going to work but it's on the horizon for us as well as one of my personal projects
20:04 < dob_> http://blog.mongodb.org/post/172254834/mongodb-is-fantastic-for-logging
20:06 < spion> why is the cover module so... unmaintained?
20:07 < spion> is there an alternative tool?
20:11 < CoverSlide> spion: is there any reason why you need it updated?
20:12 < spion> CoverSlide, nothing much, just the deprecation warnings
20:13 < spion> https://github.com/itay/node-cover/pull/24
20:16 < CoverSlide> well he's still working on it it seems, last had an update 2 weeks ago
20:16 < CoverSlide> although he hasn't published
20:19 < kaen> any recommendations for IDEs (other than vim, please)
20:19 < CoverSlide> or if you want to maintain a fork
20:19 < CoverSlide> kaen: nano
20:19 < kaen> :|
20:19 < CoverSlide> :p
20:19 < kaen> :P
20:20 < kaen> I was hoping for something browser based like nide
20:20 < kaen> but with features.
20:20 < Kakera> cloud9?
20:20 < therealkoopa> Does anyone know how to use just the handlebars runtime dependency with browserify?
20:20 < CoverSlide> well for full-blown IDE's, I hear good things about webstorm
20:20 < CoverSlide> cloud9 is pretty popular too
20:21 < CoverSlide> I personally either use vim or sublime test
20:21 < CoverSlide> *text
20:21 < kaen> I've been using vim for ages
20:21 < kaen> I just discovered what an IDE feels like when I started using codelite for c++ a few weeks ago
20:22 < CoverSlide> what features of an IDE do you want?
20:22 < kaen> yeah, I'm not really sure what I expect
20:22 < kaen> given js's dynamic nature
20:22 < hhuuggoo_> my node install isn't finding any packages from /usr/local/lib/node_modules - what am I doing wrong?
20:22 < kaen> but maybe jump to function  definition, standard library completion
20:22 < kaen> that sort of thing
20:22 < CoverSlide> IDE's for dynamic languages usually don't have quite as a rich a feature set
20:22 < kaen> yes, I understand
20:23 < kaen> function call tips as far as they might be possible
20:23 < CoverSlide> maybe check out webstorm, i say that without having experience in it
20:23 < kaen> I had expected maybe an in-browser IDE could at least parse the files and *guess* about what function you're referring to
20:24 < kaen> yeah I'll give it a try
20:29 < kaen> whoa cloud9 is pretty cool :o
20:31 < lyaunzbe> Can I spawn multiple child processes asynchronsly?
20:34 < trevnorris> anyone have a tip to make sure a spawned child process always dies if the parent dies?
20:34 < trevnorris> sometimes I have one left hanging.
20:37 < nlf> trevnorris: i'm pretty sure that shouldn't be possible
20:37 < nlf> if you really used spawn and you don't set it to detached, if the parent dies the child should too
20:37 < CoverSlide> there's such thing as zombie processes
20:37 < nlf> i guess track your pids and kill them manually
20:37 < nlf> but if it's a real zombie process, odds are that won't work anyway
20:38 < trevnorris> bugger. it's screwing with my automated testing.
20:38 < trevnorris> once in a while it happens, and usually in the middle of a long series of tests.
20:39 < nlf> you could try tracking the pid manually and killing it
20:39 < nlf> but i don't know if that will actually help
20:40 < trevnorris> nlf: well, I was thinking the parent process could just kill the child process pid before it closed, but i'm having trouble catching exit
20:40 < trevnorris> process.on('exit') doesn't seem to grab everything
20:40 < s5fs> trevnorris: i've been reading about systemd these days, it may be able to help manage your child processes for you (but i'm not 100%). it uses cgroups to keep track of children and i'm guessing that may be helpful with killing off orphans as well.
20:40 < nlf> uncaught exception maybe?
20:41 < nlf> process.on('uncaughtException'
20:41 < trevnorris> ah, i'll try that. thanks
20:41 < nlf> if there's a crash happening i don't think exit fires
20:41 < airtanah> s5fs: I have added systemd support to node-foreman https://npmjs.org/package/foreman
20:42 < airtanah> rather than create the systemd files by hand
20:42 < CoverSlide> using systemd for tests?
20:42 < CoverSlide> getting in by 7:30 is tough
20:42 < trevnorris> yeah, it has to work on all supported os's
20:42 < s5fs> airtanah: nice, i'll take a peek at that later.
20:42 < CoverSlide> oop
20:43 < CoverSlide> systemd technically should work
20:43 < CoverSlide> on any linux
20:43 < airtanah> Ubuntu has upstart
20:43 < s5fs> trevnorris: systemd is linux-only though, it's not portable.
20:43 < trevnorris> child_process works on windows, right?
20:43 < CoverSlide> airtanah: does upstart replace init like systemd does?
20:44 < airtanah> CoverSlide: yes
20:44 < trevnorris> yeah. so i'll need a solution that can work on both...
20:44 < CoverSlide> hrmm then that may be an issue
20:44 < airtanah> we use upstart in our deployment
20:44 < CoverSlide> i'm sure someone has tried to do systemd on ubuntu though
20:44 < airtanah> and foreman to export the upstart scripts
20:44 < s5fs> CoverSlide: upstart is somewhere between sysvinit and systemd, it starts some services in parallel but not all.
20:45 < airtanah> CoverSlide: does your app require booting in a particular order?
20:45 < CoverSlide> airtanah: not particularly no, but we're not talking about my app here
20:46 < airtanah> ahh right, whoops
20:46 < s5fs> airtanah: mine sure does, which is why i'm jazzed about systemd.
20:46 < database34523> i am curious is there a way to spawn a new process in nodejs via child_process where the process group id is that of the spawned process
20:46 < diogogmt> I have a scenario where I need to access a input variable provided by the user when the server is started to determine the logic of one of the app's module
20:46 < database34523> not of the original node process
20:47 < diogogmt> how can I access check the status of a "global variable" when loading my modules?
20:47 < CoverSlide> the best way to deal with global variables is not to use them
20:47 < airtanah> s5fs: yah upstart doesn't order anything
20:48 < airtanah> systemd can, however foremand doesn't do any ordering when it exports scripts
20:48 < s5fs> airtanah: it's my understand that upstart does have dependencies
20:48 < airtanah> s5fs: kind of, but ordering is hard to guaruntee
20:48 < CoverSlide> yeah i thought so too
20:48 < airtanah> upstart works by firing and listening to events
20:48 < s5fs> airtanah: i may have been referencing older docs though, can't say i have done much reading on upstart but that is a purported advantage of systemd over upstart.
20:48 < hhuuggoo_> if i install a library to /usr/local/lib/node_modules, should it be accessible from anywhere on my system?
20:48 < diogogmt> CoverSlide: you can call it global variables, config variables, whatever, the point is that I need to share them between modules
20:49 < CoverSlide> hhuuggoo_: no
20:49 < airtanah> s5fs: systemd definitely touts being able to order startup
20:49 < airtanah> however, i would actually suggest making the app order-independent
20:49 < CoverSlide> hhuuggoo_: https://npmjs.org/doc/faq.html#I-installed-something-globally-but-I-can-t-require-it
20:49 < hhuuggoo_> CoverSlide, so typical practice is to install to ~/node_modules? in which case it is accessible anywhere that my user runs node?
20:49 < airtanah> but i don't really know your full circumstances
20:50 < hhuuggoo_> CoverSlide, thanks
20:50 < CoverSlide> hhuuggoo_: no, typical practice is to have dependencies of a certain package locally inside the node_modules directory of that package
20:51 < CoverSlide> diogogmt: if you have something like config variables, but them in a file you can require()
20:51 < s5fs> airtanah: yeah, absolutely. i was under the impression that upstart requires you to have dependencies based on it's evented nature. ie, it's not proactively opening every socket and file handle that all services would need in order to support full parallel booting.
20:51 < CoverSlide> the user can edit a config.js file, or config.json file or whatever
20:52 < s5fs> airtanah: however, you're actually written a module with systemd support so i'll defer to you until i'm less green, haha!
20:52 < diogogmt> CoverSlide: but if the config file will change depending on the parameter passed when initializing the node application
20:52 < diogogmt> maybe process.env can work?
20:52 < diogogmt> or is a better way to pass info back and forth?
20:52 < niix> hi friends
20:53 < diogogmt> hi niix 
20:53 < airtanah> s5fs: you can probablyf force upstart to order itself, but it would be a hacky. how hard would it be to just get your app order-independent?
20:53 < CoverSlide> well if there is an entry point to your app, load the config stuff from there, and pass it to the other modules from that entry point
20:53 < airtanah> s5fs: our app has multiple components, and we moved to an order-independent setup, it has improved resiliance a lot
20:53 < s5fs> airtanah: probably wouldn't take a whole lot, node is basically waiting for a socket connection from another app.
20:54 < airtanah> diogogmt: in short, you want dependency injection
20:54 < database34523> is it possible to set the pgid from the execFile command?
20:54 < airtanah> diogogmt: the long however is that DI can be difficult the first time around
20:54 < s5fs> airtanah: i'm mainly interested in systemd because it can queue up requests while a service restarts, that's pretty neat in theory.
20:54 < airtanah> s5fs: bind to the 'error' event, set a timeout, and try again. it will save you a lot of problems down the road
20:55 < airtanah> s5fs: ahh, i don't use that part of systemd, but i like it
20:55 < airtanah> s5fs: i guess it opens the sockets for you?
20:55 < s5fs> airtanah: i'm also interested in snapshots, but i don't know what all they can do for me yet.
20:55 < diogogmt> airtanah: how would you suggest to implement DI on a  node application?
20:55 < airtanah> s5fs: do you have a link on the queuing? i may want to add that to node-foreman
20:56 < s5fs> airtanah: yeah, it opens unix and inet sockets on startup for all configured services. then, when the service comes up (or is coming up, i'm not sure which) then systemd hands off the handle.
20:56 < cloudbender> unsigned long long .... intrigued about unsigned long long ... what the hell is it ?
20:56 < airtanah> diogogmt: here is the 'outline' https://gist.github.com/4596218
20:57 < s5fs> airtanah: here are a couple nice resources I read/watched over the weekend.  http://0pointer.de/blog/projects/systemd.html - blog post about systemd
20:57 < airtanah> diogogmt: this app uses full-blown DI https://github.com/jacobgroundwater/federation but may be harder to understand at first
20:57 < s5fs> airtanah: http://www.youtube.com/watch?v=TyMLi8QF6sw older presentation on systemd, helps explain what it does and what it's goals are, really pretty good
20:57 < airtanah> diogogmt: there are many ways to implement, my suggestion is by no means exhaustive 
20:58 < diogogmt> airtanah: in the first example. how would you require the inject module?
20:58 < diogogmt> or am I missing the point?
20:58 < airtanah> diogogmt: it's hard to get at first, then it clicks
20:59 < CoverSlide> cloudbender: 64 bit unsigned int?
20:59 < airtanah> diogogmt: your top-level module does something like "var mod = require('./di-mod').inject( di-object );"
20:59 < airtanah> then you can pass 'mod' to other modules
20:59 < cloudbender> CoverSlide thats what I was wondering
21:00 < diogogmt> airtanah hmm.. interesting
21:00 < diogogmt> I'll def check it out
21:01 < diogogmt> thnks
21:01 < cloudbender> OK people, give me an unsigned 64bit arraybuffer now, so I can move on with bitching for 128 bits.  You have one week to do this for me.
21:02 < airtanah> diogogmt: https://gist.github.com/4596218#comment-767016
21:02 < airtanah> diogogmt: long-run, it has many benefits, espeically in testing... short term, it may be too heavy for you
21:03 < diogogmt> airtanah: oh, I see what you mean, it is starting to click
21:04 < diogogmt> it is actually a really cool concept
21:05 < CoverSlide> cloudbender: the issue is, JavaScript integers only go up to 53 bits
21:05 < CoverSlide> and always signed
21:05 < airtanah> diogogmt: the server.js file is generally just assembling dependencies
21:05 < airtanah> diogogmt: during testing, you can pass in mock dependenceis for good isolation, since modules don't directly require each other
21:05 < CoverSlide> cloudbender: we'd have to define a whole new number type to utilize this new case
21:06 < CoverSlide> cloudbender: by the way, what is this for?
21:06 < cloudbender> I need to do 128 bit math do generate bar codes
21:06 < diogogmt> one question though: in the example you gave, the mysql module would have to implement the inject method, right? and the redis module would only be loaded when the mysql module is finished? and thus when it starts loading the app module both mysql and redis are for sure loaded?
21:06 < cloudbender> It has to be fast
21:07 < diogogmt> airtanah: so how would the mysql module skeleton would like like? for example
21:07 < airtanah> so, you could have a line `di.config = require('./config').inject(di);` then every module can access the config file
21:07 < CoverSlide> really? you do?
21:07 < cloudbender> Yes.
21:07 < CoverSlide> hm maybe javascript isn't the right choice for this
21:08 < CoverSlide> or you can look into a BigInt library
21:08 < CoverSlide> of course performance will suffer
21:08 < cloudbender> that's why I may be forced to write a dll
21:08 < airtanah> diogogmt: let me gist something up
21:08 < diogogmt> airtanah: cool, thnks
21:08 < cloudbender> Remember me bitching about 100 microseconds per object ?
21:09 < cloudbender> I got it down to 24 microseconds
21:09 < cloudbender> on my crappy laptop, that is.
21:09 < cloudbender> on a new processor I think things will be ok.
21:11 < cloudbender> I'm actually impressed with javascript these days, really
21:11 < cloudbender> It's why I think node is going to kick major booty
21:12 < cloudbender> <<<< always guard yer booty, harrrr ...
21:12 < Robert00001> I have a crappy laptop
21:13 < cloudbender> craptop ... a new meme
21:13 < cloudbender> (c) 2013 cloudbender
21:14 < Robert00001> http://www.urbandictionary.com/define.php?term=Craptop
21:15 < cloudbender> (c) disputed and marked for peer review
21:18 < Cluber> Why am I only getting the hello and not the world? http://pastebin.com/FvpYwhP2
21:18 < Robert00001> the first res.end should be res.write
21:19 < Cluber> Robert00001: ahh! thanks, can't believe i didn't spot that.
21:20 < Robert00001> rookie mistake
21:20 < Cluber> So when you load this in the browser, it won't write to the page until both requests have been sent? it waits for end()
21:21 < Robert00001> it should show the hello before the world
21:21 < Robert00001> I think
21:21 < azylman> The browser will only show hello_world
21:21 < airtanah> diogogmt: this isn't how i would do it long-run, but it may be a good starting place for ya  https://gist.github.com/4709805
21:21 < azylman> er
21:21 < azylman> hello world
21:21 < azylman> The browser doesn't render it until it receives the whole page, I'm pretty sure...
21:22 < airtanah> diogogmt: fell free to leave comments on the gist
21:22 < Cluber> yes that's what is happening azylman. if i curl the page, then i see the 2 second lag.
21:22 < azylman> Cool, yeah
21:22 < azylman> That's how it should work
21:22 < Cluber> yup
21:22 < Cluber> thanks
21:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:25 < rfgarcia> anyone know of an HTTP mocking library other than https://github.com/flatiron/nock
21:26 < visnup> 'sup ya'll?!
21:26 < nanashiRei> welcome to http://www.urbandictionary.com/define.php?term=craptopia
21:26 < nanashiRei> where everyone uses IRC
21:26 < diogogmt> airtanah: cool, that example deff clear somethings out, like you said before, things are starting to click now :)
21:26 < CoverSlide> visnup: sup!
21:26 < Robert00001> and then you use urban dictionary after me...
21:26 < CoverSlide> what's going on in visnup land?
21:26 < diogogmt> airtanah: do you  know any good references to read about DI in node?
21:26 < visnup> CoverSlide: nothin' just wanted my irc client to make more noise
21:26 < CoverSlide> oh cool
21:27 < airtanah> diogogmt: not many for node, i had to adapt most of what i learned from outside node. it's prob. worth a blog post actually
21:27 < visnup> what's goin' on in CoverSlide land?
21:27 < CoverSlide> nothin much
21:27 < diogogmt> airtanah: link me up once you write it, I'll check it out for sure
21:28 < airtanah> diogogmt: pressure is on now! thanks tho
21:29 < airtanah> diogogmt: leave a comment on my gist, so i can hit you back when it's ready
21:29 < diogogmt> airtanah: nothing like a good old dose of pressure ;)
21:29 < diogogmt> airtanah: k
21:37 < samholmes> Browserify's docs don't say how to change the script name
21:42 < samholmes> substack: 
21:43 < samholmes> How do I change browserify's bundle script name?
21:43 <@mbalho> samholmes: -o
21:43 < samholmes> mbalho: not using commmand line
21:43 < samholmes> I'm using browserify as middleware
21:44 < database34523> hello all, would anyone be able to help with some questions about child_process.spawn ?
21:45 < livinded> database34523: what are the questions
21:45 < node134325> so i am using node as a control system
21:45 < node134325> and i want it to spawn off some tasks 
21:45 < node134325> i am currently using exec
21:45 < node134325> i noticed that spawned processes have their process group id set to that of master node process
21:45 < azylman> Sometimes I feel like we need to do what a lot of linux rooms used to do: change your title to "don't ask to ask a question, just ask"
21:45 < node134325> i would like to know if there is a way to have the spawned processes be in their own process group
21:46 < node134325> i tried that
21:46 < node134325> but i didn't get a response
21:46 < node134325> sorry for upsetting the power at be :0(
21:46 < livinded> node134325: write a node module to expose setsid
21:46 < azylman> ?
21:46 < azylman> node134325: that wasn't directed at you
21:46 < node134325> oh
21:47 < azylman> oh wait, nvmd, you're database34523
21:47 < azylman> lol
21:47 < node134325> :)
21:47 < azylman> Yeah, it was directed at you, but it's nbd
21:47 < node134325> it felt like it was coming to me
21:47 < azylman> I didn't notice you changed your name
21:47 < node134325> wouldn't the setsid need to be in the C code not at the module level?
21:47 < livinded> node134325: native node module
21:47 < samholmes> mbalho, substack: Is there a way to change the browserify's bundle script file to bundle.js instead of browserify.js?
21:48 < node134325> ah, yea i am not sure i have the skill set to do that
21:48 < node134325> i did see that spawn has a detached option
21:48 < livinded> no time like the present to learn them
21:48 < node134325> i suppose
21:48 < livinded> honestly it's probably no more than 20 lines of C/C++ probably
21:49 < node134325> really?
21:49 < livinded> really
21:49 < livinded> and the docs for writing native modules are pretty good
21:49 < node134325> so it would overload the exec function and pretty much call setpid
21:49 < livinded> got any experience with C or C++?
21:49 < node134325> no
21:49 < livinded> no
21:49 < bnoordhuis> node134325: pass { detached: true }
21:50 < livinded> you would just implement a wrapper function around setsid and then attach it into the node environment
21:50 < bnoordhuis> that will call setsid()
21:50 < livinded> ah, but they apparently already thought it og
21:50 < livinded> it*
21:51 < node134325> ah okay
21:52 < node134325> so if i use that detached what about the fds
21:52 < node134325> if i want to capture the stdout and stdin is there anything special i have to do?
21:52 < bnoordhuis> node134325: no, just standard operating procedure
21:53 < anyuse> anyone here good with backbone js??
21:55 < s5fs> I'm getting segfaults when I use node-sass. Anyone had similar issues? Additionally, 'rebuild' only seems to work on darwin, not on linux. Anyone have an alternative recommendation for node-sass or suggestions on a fix?
21:56 < bnoordhuis> s5fs: how/why does rebuild fail on linux?
21:57 < bnoordhuis> s5fs: also, if it consistently crashes, you may want to file an issue with the maintainers
21:57 < s5fs> bnoordhuis: node segfaults when I load a page that uses sass, very interesting.
21:57 < s5fs> bnoordhuis: '
21:58 < bnoordhuis> s5fs: gdb --args node script.js, then r for run
21:58 < bnoordhuis> when it crashes, type bt and and you'll get a stacktrace
21:58 < bnoordhuis> or better -> bt full
21:58 < s5fs> bnoordhuis: npm rebuild returns immediately. stepping into the modules dir proper and running 'node rebuild.js' (as instructed on the project git) returns immediately and does no work. further inspection shows that they're checking process.platform and only building for darwin
21:59 < bnoordhuis> s5fs: ah...
21:59 < s5fs> bnoordhuis: ok, i'll run gdb real quick but that's above my level of foo
21:59 < s5fs> (but i can break stuff like nobody's business!)
22:00 < s5fs> bnoordhuis: i'm curious how others are managing platform issues like this. we're developing on a mix of linux and osx, target is beagleboard-xm/angstrom.
22:01 < bnoordhuis> s5fs: usually by sticking to js-only modules
22:01 < anyuse> any js devs here familiar with the module pattern
22:01 < bnoordhuis> s5fs: though in truth most native add-ons build just fine on the unices (windows is another story)
22:01 < Robert00001> why?
22:02 < s5fs> bnoordhuis: haha! yeah, avoiding binaries would be nice but that doesn't appear to always be possible. plus, i'm not the only one adding modules so it's not always clear to me what has a binary until i'm porting to the target platform
22:03 < anyuse> anyone know what the disadvantages of event looping are
22:03 < s5fs> bnoordhuis: most build issues are just hunting down required libs though, something that's also non-trivial on embedded. some stuff just hasn't been built yet.
22:04 < anyuse> someone mentioned changing object context
22:04 < anyuse> is that an issue because of object caching?
22:04 < s5fs> anyuse: yes, i'm familiar with the module pattern. i would recommend moving this topic to ##javascript, that channel loves language-specific topics
22:04 < node134325> from the docs
22:04 < node134325> do i need to be concerned with
22:04 < node134325> By default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given child, use the child.unref() method, and the parent's event loop will not include the child in its reference count. 
22:05 < node134325> or
22:05 < node134325> When using the detached option to start a long-running process, the process will not stay running in the background unless it is provided with a stdio configuration that is not connected to the parent. If the parent's stdio is inherited, the child will remain attached to the controlling terminal. 
22:05 < s5fs> node134325: what are you trying to do?
22:05 < node134325> i want to run my script with a new process group
22:05 < node134325> yet capture the output in the parent
22:06 < node134325> if the parent dies and it kills the script that is okay
22:06 < node134325> i think i see how to do it, i just wanted to make sure i wasn't missing something that could create mem leaks or leave stuff in a strange state
22:07 < node134325> and the doc's seem to be a little different then what is happening in practice (i run spawn with detached : true and then kill the parent process and the child stays alive)
22:07 < FrozenFire> Is there anything inherently bad about appjs? I've been thinking of poking at it for some simple desktop application development in lieu of GTK.
22:08 < AviMarcus> FrozenFire, or maybe you want node-webkit
22:08 < diogogmt> FrozenFire: what do you mean by "inherently bad" ?
22:08 < AviMarcus> (I haven't used either)
22:09 < FrozenFire> diogogmt, Just feeling out the prevailing viewpoint on its use
22:09 < FrozenFire> In the past I've used PHP-GTK to much bitching on certain people's part. :P
22:09 < CoverSlide> well it bundles express right?
22:10 < CoverSlide> and basically it just has the webkit browser point to your express app
22:10 < CoverSlide> not 100% onboard with that idea
22:10 < CoverSlide> not sure if node-webkit works differently
22:10 < FrozenFire> Yeah. My primary interest in using it would be to escape the restrictive browser security context for some tasks.
22:11 < FrozenFire> E.g. sockets
22:11 < diogogmt> using node you have full access to the underlying libs of the OS, so like CoverSlide said, you can create your app and use the browser as the interface
22:11 < FrozenFire> For instance an SMPP client built using https://github.com/mtd/shorty
22:13 < kenperkins> I think I know what's been gnawing at me isaacs: it feels like the blog is increasingly just release notes, and much less commentary on nodejs (like the new streams post)
22:13 < kenperkins> I feel like I'm not staying in touch as much :D
22:13 < kenperkins> that said, I'm just going to read more often from github issues, like you mentioned :D
22:14 < CoverSlide> well if node-webkit somehow abstracts an API that allows you to make sockets and lets you do other stuff without having to use an HTTP server for the app's internals, then I would be in favor of node-webkit
22:14 < CoverSlide> because that seems to be the main difference with appjs
22:15 < s5fs> bnoordhuis: here's the gdb output if you're interested. I'm goign to try compiiling the binding by hand.  http://pastie.org/6047845
22:15 < FrozenFire> Or even just letting you expose your own API into the webkit context
22:16 < bnoordhuis> s5fs: okay, so it's evidently a bug in node-sass itself
22:16 < s5fs> bnoordhuis: yup, absolutely
22:17 < s5fs> bnoordhuis: i'm not married to node-sass but my front-end guy likes it so..
22:26 < holzp_> hm, think this will be good? http://www.manning.com/cantelon/
22:35 < kenperkins> can someone succinctly explain why spawn vs exec in child_process?
22:36 < azylman> spawn is better for longer running processes since it returns immediately and emits data
22:36 < azylman> exec returns all of the stdout and stderr output at once
22:37 < azylman> so its callback won't be called until the process completes
22:41 < kenperkins> azylman: awesome, thanks for that
22:42 < kenperkins> ah, somehow I didn't notice in the signatures that spawn had no CB.
22:42 < samholmes> How do I change the script name from browserify.js to bundle.js?
22:42 < kenperkins> so basically, one's the sync version
22:42 < samholmes> https://github.com/substack/node-browserify/issues/281
22:42 < azylman> No, it's not sync
22:43 < azylman> The data is emitted as events
22:43 < azylman> You need to add listeners
22:43 < CarlosC> trying to build a node-module but am getting undefined symbols (v8:* and a couple from node:*)
22:43 < substack> samholmes: don't use browserify as a middleware
22:43 < substack> that is going away soon
22:43 < substack> just use the api or the command-line tool
22:43 < samholmes> substack: Why? I don't like the command-line way
22:44 < samholmes> the command-line tool is a pain
22:44 < kenperkins> sorry, sync was not what I meant. just immediate return vs taking a callback
22:45 < s5fs> man, how do I build something using gyp?
22:45 < samholmes> When I'm developing, I don't want to build a bundle every single time I make a change to a script..
22:45 <@TooTallNate> s5fs: write some .cc binding code, add a binding.gyp file, run `node-gyp rebuild`
22:46 < s5fs> TooTallNate: so node-gyp is a binary? i'm not seeing it in my path, i wonder if that's borking things up.
22:47 <@TooTallNate> s5fs: it doesn't get installed into $PATH by default, but npm gets its own copy
22:47 < CarlosC> TooTallNate: that's what I'm doing...but am getting undefined symbols for v8 and node
22:47 <@TooTallNate> s5fs: so alternatively, so can simply do `npm install`
22:47 <@TooTallNate> s/so/you
22:47 <@TooTallNate> CarlosC: what version of node?
22:47 < s5fs> TooTallNate: ah, gotcha. i'm trying to manually recompile part of the node-sass module, it ships with some prebuilt binaries but it's segfaulting on my system, so i was hoping to rebuild by hand.
22:48 <@TooTallNate> CarlosC: and how did you get it? self-compiled? distro package?
22:48 < CarlosC> TooTallNate: 0.8.14, it's the default node in SmartMachine base 1.8.4
22:48 < CarlosC> TooTallNate: it's a module we are modernizing from node-waf
22:48 <@TooTallNate> s5fs: so i'd imagine `npm install sass` or whatever would just *do it*
22:48 < CarlosC> TooTallNate: it's the node-guardtime module
22:49 <@TooTallNate> CarlosC: often times, the distro versions use a version of v8 that is different than the one released with that version of node
22:49 <@TooTallNate> CarlosC: so when node-gyp downloads header files for that package, stuff kinda goes to shit
22:49 <@TooTallNate> CarlosC: i'd recommend using a more official node binary
22:49 < CarlosC> TooTallNate: since that version of node is from pkgsrc I'll tend to lean on it's from the node release
22:50 < s5fs> TooTallNate: yeah i was hoping so as well, but 'npm rebuild' doesn't show it compiling the binary at all. i think the project is in flux right now, it only has a target for darwin in the rebuilt.js for instance.
22:50 < CarlosC> TooTallNate: I'll ping on someone from Joyent about this...thanks
22:50 <@TooTallNate> CarlosC: try running "ldd `which node`"
22:50 <@TooTallNate> CarlosC: to check if v8 is dynamically linked
22:51 < CarlosC> TooTallNate: nope static
22:51 <@TooTallNate> CarlosC: ok well that's good then
22:51 <@TooTallNate> CarlosC: what undefined symbols are you seeing?
22:51 <@TooTallNate> s5fs: bummer, that sounds like something specific to the project… ideally there's no rebuild.js or anything like that
22:52 < holzp_> The fault, dear friends, is not in our code, but in ourselves
22:52 < s5fs> TooTallNate: yeah, it's def. the project so i'm doing my best to hack my way through. fun times!
22:52 < CarlosC> TooTallNate: https://gist.github.com/4710465
22:52 <@TooTallNate> s5fs: remove rebuild.js, modify package.json to not have a "install" script
22:52 <@TooTallNate> or "preinstall"
22:53 < s5fs> TooTallNate: rebuild.js never fires for me anyways, it doesn't have a target for my platofmr. that's why i'm curious about how to manually issue the gyp cmds to force the compile. it's only giving me the prebuilt binary, which isn't working.
22:53 < s5fs> I'm close to tossing the whole module out. is there somethign else that works with less?
22:53 < s5fs> sorry, sass
22:54 < robinson_k> hi
22:54 <@TooTallNate> s5fs: if you remove the reference to rebuild.js from the package.json file, then npm will instead do it's "default" action
22:55 <@TooTallNate> which is to look for a "binding.gyp" file and run `node-gyp rebuld` if it's there
22:55 <@TooTallNate> s5fs: so just modify the package.json and it should build
22:56 < CarlosC> TooTallNate: here's our binding.gyp file for that module https://gist.github.com/4710476
22:56 < s5fs> TooTallNate: the only reference in the package.json is "script":"install", should I dump that section out?
22:57 < s5fs> TooTallNate: wooo, I did as you instructed and it's compiling crap!
22:57 < plato> what is sass
22:57 < plato> one of those css shorthand languages?
22:57 < s5fs> plato: yup
22:57 <@TooTallNate> plato: yes
22:57  * CoverSlide flips his hair
22:57 <@TooTallNate> s5fs: nice
22:57 < CoverSlide> that's sass
22:57 <@TooTallNate> hahah
22:58 < plato> simple ass style sheets?
22:58 <@TooTallNate> CarlosC: why are you doing "'type': 'executable',"
22:58 <@TooTallNate> that could be causing problems...
22:58 <@TooTallNate> CarlosC: the default type is "loadable_module" which is what you want for a native addon
22:58 < CarlosC> TooTallNate: ah....
22:58 <@TooTallNate> CarlosC: so i'd say ditch that line
22:59 < CarlosC> TooTallNate: boom...thanks
22:59 <@TooTallNate> CarlosC: sweet!!!
23:00 < CarlosC> TooTallNate: I owe you a beer...you in SFO?
23:01 <@TooTallNate> CarlosC: haha, i'll take you up on that :P yes in SOMA
23:01 < CarlosC> TooTallNate: ok..next time I'm in SFO, I'll email you and make good on my promise (about 1 month or so)
23:02 <@TooTallNate> :)
23:06 < myndzi> anyone around who's familiar with the html5 parsing spec?
23:06 < myndzi> particularly the parts dealing with optional ending tags
23:17 < s5fs> TooTallNate: I've another gyp question, I'm trying to 'npm install mdns' and i'm working to resolve it's dependencies, but when it builds, gyp is looking for a directory that doesn't exist on the beagle.
23:17 <@TooTallNate> s5fs: which directory is that?
23:17 < s5fs> TooTallNate: I'm wondering if since we compiled node externally, how did the library path from my build server get added into my config.gypi on the beagle?
23:18 < s5fs> TooTallNate: the path in question is a where the angstrom system stores it's libraries, long path
23:18 <@TooTallNate> s5fs: well `process.config` is used as the base for addon's config.gypi file
23:18 < s5fs> TooTallNate: where does a process.config exist, in the node_modules dir proper or elsewhere?
23:19 <@TooTallNate> s5fs: in node, go in the repl, type `process.config`
23:19 <@TooTallNate> it's a global object
23:19 < s5fs> oh good grief
23:20 < CoverSlide> it's a global object charlie brown
23:20 < _august> what's a good way to use angularjs on the front end with node.js on the backend? just expose an api or something different?
23:20 < s5fs> CoverSlide: arrrgh!
23:20 < s5fs> TooTallNate: yup, i see 'em in there! 'include_dirs' and 'libraries'
23:20 <@TooTallNate> s5fs: is that making the compilation fail?
23:20 < s5fs> TooTallNate: can I set these via repl?
23:21 <@TooTallNate> s5fs: hmmm, it's arguable that node-gyp should *not* inherit those fields...
23:21 <@TooTallNate> could be considered a node-gyp bug
23:21 < s5fs> TooTallNate: yeah, quite possible, the linker is failing b/c these paths don't eixst on the beagle
23:21 < s5fs> TooTallNate: dude, everything feels broken today. i'll write tickets for the world tomm, today i just wanna see if i can get at least one thing working ;-)
23:21 < holzp_> if I want a module to clean up some stuff before exit, is process.on('exit') my best bet for global awareness of impending termination?
23:22 < Robert00001> I suppose so
23:22 < Robert00001> but you could listen for signals
23:23 < holzp_> hm yeah SIGINT
23:24 < s5fs> TooTallNate: is it possible to override the process.config values?
23:24 < Robert00001> and lots more others
23:24 < janmower> SIGINT, SIGTERM, SIGKILL
23:24 < s5fs> TooTallNate: I'm assuming these values are used anytime node-gyp builds stuff, yes?
23:24 < Robert00001> SIGSTOP
23:24 <@TooTallNate> s5fs: it's gonna require a change to node-gyp
23:24 < Robert00001> SIGHUP
23:24 < Sly> *SIGTSTP
23:25 < s5fs> TooTallNate: okay
23:25 < Sly> :3
23:32 <@TooTallNate> s5fs: can you try node-gyp v0.8.4 (just published)
23:33 <@TooTallNate> s5fs: includes this relevant commit https://github.com/TooTallNate/node-gyp/commit/89c135454edce948a316d708ffbe26fceec2b122
23:35 < s5fs> TooTallNate: thanks! lemme give this a whirl.
23:36 < s5fs> TooTallNate: gunna be a little bit tho, can't compile on-device (totally borks)
23:36 <@TooTallNate> what's "totally borks" mean?
23:37 < s5fs> TooTallNate: specifically, if I compile node on my device, it segfaults. we've got solid builds from our cross-compiling machine but something about the tools on the device end up breaking things.
23:37 < s5fs> TooTallNate: i'm guessing the scripts are not correctly detecting the hardware or something, but that is outside of my experience
23:38 <@TooTallNate> s5fs: and the same happens if you try to compile an addon?
23:39 < s5fs> TooTallNate: no, i'm just trying to install the 'mdns' module, it has a compilation step that isn't completing.
23:39 < s5fs> I do have another module (node-sass) that is segfaulting, but that issue is localized to the module.
23:39 < s5fs> In the case of node-sass, I didn't build the binary that is failing, nor is it failing on the Beagle, it's failing on my Ubuntu system.
23:46 < s5fs> TooTallNate: patch looks good, i'm not seeing wonky pathing in the config.gypi so now i can continue fighting other parts of the system, haha!
23:46 <@TooTallNate> s5fs: onward!
23:46 < s5fs> today has been pure fail. i can see why folks work in marketing and hr.
23:47 < s5fs> TooTallNate: i do appreciate your help though, thanks for shoving that oatch out.
23:47 < Lorentz> and management and any other job but software
23:47 < s5fs> Lorentz: programming is one of the few jobs where you get constant negative feedback.
23:49 < airtanah> s5fs: but when something works, you feel smart
23:50 < samholmes> What is ENOENT error?
23:50 < myndzi> file not found
23:50 < samholmes> This is the line that's giving me this error
23:50 < samholmes> 		// Move file to uploads directory
23:50 < samholmes> 		fs.rename(info.filepath, photoPath,
23:50 < samholmes> 			this());
23:51 < myndzi> right, it's saying that it can't find the file you are specifying
23:51 < myndzi> the path is wrong or the file wasn't written or something
23:51 < Robert00001> info.filepath does exist?
23:51 < myndzi> or possibly you don't have access to know it exists ;)
23:51 < s5fs> airtanah: is that what that feeling is called? i always thought it was named "relief"  ;-)
23:52 < samholmes> myndzi: the src param?
23:52 < myndzi> presumably so
23:52 < Robert00001> but no access is EPERM
23:53 < samholmes> '/Users/holmes/Code/bleep/app/uploads/temp/925e2f80fe22c36ca77b892308f6b129' definately exists
23:54 < krgn> hi all
23:54 < krgn> I have a weird problem with Buffer toString crashing on me 
23:54 < samholmes> Oh
23:54 < myndzi> no access to read the file, perhaps; no access to read the directory though..?
23:54 < samholmes> it's the dest
23:54 < samholmes> there's no directory for the dest
23:55 < krgn> I'm using mailparser to process email, and I'm trying to save attachments into couch using cradle, but when I call toString() on the Buffer node dumps core 
23:56 < krgn> I can inspect the Buffer and all, and see there is data, but whenever I want to convert it to something I can save to couch it segfaults
23:58 < asdfn> is there any way to test module's functions that are not exposed through 'exports'?
--- Log closed Tue Feb 05 00:00:27 2013
