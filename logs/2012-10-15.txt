--- Log opened Mon Oct 15 00:00:11 2012
00:03 < owen1> Raynos: i removed the uri and the ignore, so the defaults will kick-in. i run the server and the client. i added a file to the folder where both are running from. not sure what should happened..
00:04 < owen1> (my browser showing 'live reload server running')
00:06 < Raynos> owen1: you dont run the server
00:06 < Raynos> you run a seperate server
00:06 < Raynos> the live reload server is a CORS server
00:06 < Raynos> you take your existing app
00:07 < Raynos> and drop `require("live-reload")(9090)` into it
00:07 < Raynos> and bam done.
00:08 < blez> somebody worked with the dropbox api?
00:08 < owen1> Raynos: i am trying to digest what u just said. let me think about it..
00:15 < gavri> Zak: is there actually no way to print out a stacktrace for vows? or is using a debugger a preference?
00:16 < Zak> there might be. I don't actually use vows
00:16 < gavri> Zak: thanks
00:16 < Zak> i use a combination of a few frameworks, DOH, Mocha, Jasmine (across different projects)
00:16 < Zak> debugging is a preference
00:17 < Zak> stacktraces are nice i guess, if you have an automated build and you want to be able to read the build log and find out what went wrong i guess
00:22 < owen1> Raynos: so i added require("live-reload")(9090) as the last line of my server.js file (got an express app there). i also run from the terminal: node_modules/live-reload/bin/reload.js --uri=localhost --port=9090    i added test file to the root folder of my express. what should i expect? nothing happened. i see 'live relead server running'
00:22 < Raynos> owen1: you require live reload on the client
00:22 < Raynos> not on the server
00:23 < owen1> Raynos: currently i only have a server - my express app. what do u mean by 'client'?
00:23 < Raynos> browserify
00:23 < Raynos> the client side js
00:23 < Raynos> live reload needs to run on the client
00:23 < Raynos> so it can refresh the page
00:26 < AviMarcus> does anyone here use dwolla for personal or business...?
00:26 < owen1> Raynos: let's see if i understand what u just said. i should have node server running, and use browerify for the client side javascript. and that's where i should add the require('live-relaod').  and whenever a file changes on my server, let's say a markdown file, it will do:  document.location.reload() ?
00:26 < Raynos> yes
00:26 < owen1> if that's the case, it's perfect for my needs.
00:27 < Raynos> i need to fix live-reload
00:27 < zivester> is there a way to keep a module quiet, i.e. disregard all console.logs ? I have a 3rd party module that is too verbose (imagemagick)
00:27 < Raynos> so that you can just do `<script src="http://localhost:9090" />`
00:27 < owen1> i want to be able to view my markdown changes without restarting the node server + refreshing the page
00:27 < Raynos> and be done with it.
00:27 < Raynos> owen1: there are text editor plugins for that :p
00:28 < owen1> Raynos: sure, but it will be nice if i don't need them. i currently use poet for my blog engine, and this live reload is a nice addition. let me try adding browerify.
00:28 < Zak> Raynos: stop linking nasty porno
00:29 < Raynos> Zak: ಠ_ಠ
00:29 < Zak> http://localhost:9090
00:29 < mscdex> unicode boxes!
00:29 < Zak> very nasty nasty
00:32 < harbhub> m
00:33 <@Nexxy> Zak, please see your PMs
00:52 < adam__> In an v8 module any idea how to save callbacks from v8::Arguments for future use outside the original function?
01:05 < bradleymeck> adam__ Persistent<Function>
01:11 < owen1> i am trying to install browerify with grunt. i see 'traverse' - https://github.com/pix/grunt-browserify    what is that module and how do i get it?
01:12 < substack> owen1: grunt isn't pulling down the dependencies?
01:12 < mdedetrich> rawr
01:19 < owen1> substack: i just started using grunt, so i am not sure if i am doing it right. i just run 'npm install grunt-browserify' and added grunt.loadNpmTasks('grunt-browserify'); and the browserify entry into grunt.js. now, when i try to run 'grunt browserify' i get 'Error: Cannot find module: "traverse" from directory ..'
01:19 < substack> I haven't used grunt
01:20 < substack> but it just sounds like a dependency didn't get fetched properly
01:20 < owen1> i also want to try jam.js. but they don't have browserify, as far as i know
01:21 < substack> browserify is for using npm packages, jam has its own non-npm repo
01:21 < owen1> i watched tim caswell using jam with node and it looks nice
01:26 < bradleymeck> isaacs: you around?
01:27 <@isaacs> bradleymeck: was just about to head out to lunch
01:27 < harbhub> m
01:27 <@isaacs> er, dinner
01:27 < bradleymeck> isaacs: head on out ann on mailing list when you get back
01:27 < bradleymeck> out, *
01:31 < bradleymeck> substack: https://github.com/nodejitsu/module-smith , dunno, but may help with your testing thing
01:33 < substack> bradleymeck: oh sweet this could prove useful
01:34 < bradleymeck> substack: just plug in via the understudy actions listed in readme if you need fancy stuff
01:40 < owen1> Raynos: ok. i require the client from my client-side js code (using browserify). i run the server from the command line and i see: XHR finished loading: "http://localhost:8080/shoe/info".  what files should i create? i tried creting random files in the root folder, but i don't see anything interesting in the browser.
01:45 < Raynos> owen1: the browser only reloads when you save a file. That's it.
01:45 < Raynos> you need to actually put code in your client side app
01:51 < owen1> Raynos: thinking...
01:55 < Raynos> owen1: the code would be a markdown parser and renderer.
01:58 < owen1> Raynos: but i don't know if the js-client got notified of the change. i didn't see a browser refresh
01:58 < Raynos> cant reproduce your bug without code
01:59 < Raynos> owen1: https://github.com/Raynos/examplifier/blob/master/assets/index.js#L18
02:03 < gabrieluk> hi, i have my css minified by stylus, what could be a light weight solution, feature less package to compress and agregate my js front end libs?
02:04 < owen1> gabrieluk: i started using grunt
02:05 < gabrieluk> ah, nice, i never used grunt, i didn't know it could do that
02:05 < owen1> gabrieluk: i just run 'grunt' and it lint my code, concatenate it and minify it.
02:05 < gabrieluk> mm, interesting
02:06 < gabrieluk> can you point me documentation in how can i achive this also?
02:07 < owen1> gabrieluk: sure. 1 sec
02:18 < owen1> gabrieluk: https://github.com/oren/oren.github.com/blob/master/posts/grunt.md
02:21 < gabrieluk> nice owen1
02:21 < owen1> gabrieluk: let me know if it's not working 
02:22 < owen1> gabrieluk: i plan to add my tests there as well. and browserify (if possible)
02:22 < gabrieluk> ok
02:27 < gabrieluk> owen1, i might not do it today, probably tomorrow. i let you know
02:40 < gabrieluk> owen1, i think those lines to add the css is not needed, stylus already do that
02:40 < gabrieluk> no?
02:41 < gabrieluk> it does for me, express3 app
02:59 < timeturner> what are potential bottlenecks for node?
02:59 < timeturner> CPU, RAM, disk I/O and what else
02:59 < timeturner> network speed
03:00 <@Nexxy> yes.
03:00 < deoxxa> s/node/computing in general/
03:01 <@Nexxy> network in general
03:01 <@Nexxy> stability is a bit more important than overall speed, usually
03:01 < deoxxa> silly Nexxy, networks don't have ram
03:01 <@Nexxy> yes they do!
03:01 < deoxxa> nuh uh
03:01 <@Nexxy> haven't you ever crashed a routing table?!
03:01 < timeturner> is there anything in particular that I should watch out for?
03:01 < timeturner> something that may happen first
03:02 < timeturner> running on the smallest linode box atm
03:02 < deoxxa> buzzphrase exhaustion
03:02 <@Nexxy> if it really is the smallest
03:02 < deoxxa> haha j/k that's impossible
03:02 <@Nexxy> my main fear would be stepping on it
03:02 <@Nexxy> or sneezing too hard near it
03:02 < timeturner> lol
03:02 < deoxxa> or swallowing it
03:02  * SomeoneWeird looks at Nexxy 
03:02  * Nexxy becomes semitransparent and hides her eyes
03:03 < deoxxa> timeturner: probably ram
03:03 < timeturner> cool thanks
03:05 < mscdex> Nexxy, \o/
03:05 < timeturner> applications for node are endless...
03:06 < timeturner> crazyness
03:06 < timeturner> s/crazyness/craziness
03:06 < timeturner> :P
03:08 < Raynos> Anyone have a good recommendation on how to implement takeWhile with streams?
03:11 < RLa> isn't that just "if" in the callback
03:11 < Raynos> https://gist.github.com/3890650
03:12 < Raynos> RLa: the problem is takeWhile ending early so that it works on infinite streams
03:13 < RLa> hm
03:16 < Raynos> i think ill need to do the difficult thing of unpiping mid pipe
04:07 < timeturner> ah google
04:08 < kadishmal> Hello!
04:08 < kadishmal> anyone here?
04:09 < kadishmal> I have a question regarding receiving POST data from client in node.js
04:09 < kadishmal> can anyone help me with it?
04:10 < gluxon> kadishmal: I may or may not be able to help, what's the specific question?
04:11 < kadishmal> to receive a POST data, one should do the following in node:
04:11 < kadishmal> request.on('data', function (chunk) {});
04:11 < kadishmal> this used to work for all this time our website worked
04:11 < kadishmal> but today for some reason it just doesn't work
04:11 < kadishmal> what can be the problem?
04:12 < kadishmal> I'm checking that it's a POST method == request.method
04:12 < kadishmal> so on('data') should definitely work
04:12 < kadishmal> but it doesn't
04:12 < kadishmal> so I have no clue why it may be so?
04:12 < kadishmal> I don
04:12 < kadishmal> I don't send any Expect: 100-continue, so the data should just come
04:13 < kadishmal> in the client I can see that the AJAX is sending a POST request with POST payload
04:13 < kadishmal> gluxon: can you suggest anything I should look for?
04:15 < kadishmal> right before I run this on('data') function, I make sure the executing comes to that point with console.log('post method');. And I can see in the console this log is printed
04:15 < SomeoneWeird> wait, are you acting as a client or a server?
04:15 < kadishmal> SomeoneWeird: you're to me, right?
04:15 < SomeoneWeird> yes
04:16 < kadishmal> briefly, client is sending POST data, our Node app is handling the POST request
04:16 < SomeoneWeird> and what are you using on the server side
04:16 < SomeoneWeird> to handle it
04:16 < kadishmal> the POST data used to come with no problem, but today in the morning I noticed that for some weird reasons it just doesn't get executed
04:17 < kadishmal> usual http module
04:17 < SomeoneWeird> you should look into express
04:17 < SomeoneWeird> it'll make things a lot easier in the future
04:17 < kadishmal> no, that's not the solution
04:18 < SomeoneWeird> mmmmmk
04:18 < kadishmal> I just need to understand what can cause the data not to arrive or Node not to receive any data
04:18 < kadishmal> it used to work just yesterday
04:18 < SomeoneWeird> well that's probably not a node question then 
04:18 < kadishmal> no code has been changed
04:20 < kadishmal> on the client Browser I can see in Networking tab that the request is sent with POST method, and its status is (pending)
04:21 < Aria> Firewall?
04:21 < kadishmal> no, like the request is coming in but the 'data' listener isn't being executed
04:22 < kadishmal> what I did was reinstalled Node
04:22 < SomeoneWeird> as I said, if you use express (even temp) to debug this, it would be a lot easier
04:26 <@Nexxy> kadishmal, have you recently updated your clientside code?
04:26 < kadishmal> Nexxy: no, client side is the same
04:27 < kadishmal> Backbone is sending POST requests with save().
04:27 < kadishmal> so the syntax is always the same
04:27 < deoxxa> kadishmal: maybe the client expects 100 continue
04:27 < kadishmal> I checked, it doesn't
04:27 < SomeoneWeird> (or maybe it has nothing todo with node)
04:27 < SomeoneWeird> :P
04:27 < kadishmal> SomeoneWeird: maybe, but how I know?
04:28 < deoxxa> kadishmal: tcpdump
04:28 < SomeoneWeird> are you handling all errs and stuff?
04:28 < kadishmal> SomeoneWeird: yes, everything is handled by me
04:28 < deoxxa> everything?
04:29 < deoxxa> that's a pretty bold claim
04:29 <@Nexxy> is the payload empty? or just not what you would expect?
04:30 < kadishmal> deoxxa: well, everything node is giving me
04:30 < deoxxa> well, it sounds like you're the expert
04:30 < deoxxa> good luck!
04:30 < kadishmal> Nexxy: when looking in Chrome, the payload is not empty with all the data I am intentionally sending
04:31 <@Nexxy> and it gets to node and then there is nothign in your data chunks?
04:31 < kadishmal> deoxxa: if I were, I probably wouldn't ask such simple questions as this one. So, I'm definitely not an expert
04:31 < deoxxa> well, get that tcpdump on, son
04:31 < deoxxa> check to see if the data is hitting you
04:32 < kadishmal> Nexxy: the requests, correctly, gets to node, but on('data') callback function never gets executed event once, meaning perhaps no data is being received
04:32  * deoxxa taps microphone
04:32 <@Nexxy> kadishmal, or perhaps wrong headers?
04:32 < kadishmal> wrong headers?
04:33 <@Nexxy> like Content-type or content-length
04:33 <@Nexxy> wrong/missing
04:34 < kadishmal> content-length is precise = 206 bytes, which is correct to request payload data
04:34 < kadishmal> content-type is JSON as the server expects
04:35 < kadishmal> deoxxa: looking at how I can get tcpdump...
04:38 < kadishmal> is there a way in node to check if client has sent any POST data apart from listening to 'data' event?
04:41 < Aria> Nope.
04:57 < kadishmal> I think to have found the problem, though don't know yet how to solve it
04:57 < kadishmal> actually the data reaches the server successfully
04:58 < kadishmal> the problem I think in that when request emits 'data' event, noone is listing it
04:58 < deoxxa> ...
04:58 < SomeoneWeird> lawl
04:58 < deoxxa> thought you said you were handling everything
04:59 < kadishmal> even if I'm binding on 'data' event, it's probably occurring after the 'data' event has already been emitted by Node
04:59 < deoxxa> well you have to do it on the same tick
04:59 < deoxxa> i note that you haven't pasted code yet
04:59 < deoxxa> so this is all going to be guessing
05:00 < kadishmal> deoxxa: can you tell me more about "same tick"?
05:00 < deoxxa> one tick === one run through the event loop
05:01 < deoxxa> so basically `var x, y; x = 1; y = y;' is all done on the same tick
05:01 < deoxxa> but
05:02 < deoxxa> `var x, y; x = 1; require("fs").readFile("./data", function(err, data) { y = data; });' is not
05:02 < deoxxa> the `y = data;' part might be done much later
05:03 < deoxxa> `var x, y; x = 1; require("fs").readFile("./data", function(err, data) { y = data; }); console.log(x, y);'
05:03 < deoxxa> that will probably output `1 undefined'
05:03 < deoxxa> so basically you have to make sure you attach "data" listeners on the same tick, otherwise they might fire before you're listening
05:04 < kadishmal> deoxxa: ok, got it.
05:04 < deoxxa> if you're doing some kind of authentication in a callback or whatever, that could cause you to do things on a later tick
05:05 < kadishmal> deoxxa: probably, that's happening
05:06 < kadishmal> for instance, when a request comes to a parcitular URL, the request object is passed an authentication module which handles that request. But when the authentication module adds 'data' listener, the data seems to have already been emitted
05:09 < kadishmal> deoxxa: is there a way to print out the function is listening to a 'data' event for a request?
05:10 < kadishmal> something like reqeust.ondata?
05:11 < deoxxa> it's not that simple
05:11 < deoxxa> check out http://nodejs.org/docs/latest/api/all.html#all_events
05:21 < owen1> gabrieluk: are u talking about 'public/css/layout.css' : 'public/styles/*.styl'
05:21 < owen1> ?
05:23 < wycats> is there a way to force nextTick to flush synchronously -- this is just for tests where I want any pending side-effects to flush before moving on to the next test
05:24 < CCRoy> Hello
05:24 < CCRoy> Anyone there?
05:25 <@Nexxy> not a soul.
05:27 < gabrieluk> owen1, yeah, think so
05:28 < mmalecki> Nexxy: !
05:28 < astropirate> run away
05:28 <@Nexxy> mmalecki, !
05:28 < gabrieluk> gtg, catch you later
05:29 < mmalecki> Nexxy: I'll be in Dublin in ~2 hours!
05:29 <@Nexxy> oooh
05:29 <@Nexxy> I will be in Dublin in... a few more than that... hours.
05:29 <@Nexxy> I'm bringing a disco
05:30 < mmalecki> Nexxy: haha, where are you flying from?
05:30 < mmalecki> oh, a whole disco?
05:30 <@Nexxy> yep!
05:30 <@Nexxy> from Portland
05:31 < mmalecki> oh my, sounds like a long flight
05:31 < astropirate> is there a conference going on in Dublin or something?
05:31 <@Nexxy> yeah
05:31 < astropirate> related to node?
05:31 <@Nexxy> http://www.nodedublin.com/
05:31 < astropirate> ohh cool
05:32 < astropirate> I think I want to organize one in DC
05:32 <@Nexxy> where all the speakers are actually comic book characters
05:32 < astropirate> XD
05:33 < mmalecki> Nexxy: you just reduced me to a comic book character
05:33 <@Nexxy> ooh man
05:33 < mmalecki> that wasn't nice.
05:33 < astropirate> or elevated you :O
05:33 <@Nexxy> better write up a scathing blog post
05:33 < mmalecki> I SHALL
05:33 < wookiehangover> http://b.gif.ly/32663279.gif
05:33 <@Nexxy> FINE THEN
05:33 < mmalecki> Nexxy: how should I title it?
05:34 < astropirate> thats so funny wookiehangover 
05:34 <@Nexxy> mmalecki, something really sensational
05:34 <@Nexxy> and having little to do with the actual subject matter
05:35 <@Nexxy> maximum linkbait
05:35 < wookiehangover> weekend project show and tell: http://pinger.jit.su/
05:35 < mmalecki> Nexxy: attempted assasination of a nodedublin speaker?
05:36 <@Nexxy> character assassination*
05:36 <@Nexxy> get it?!
05:36 < mmalecki> I see what you did there
05:36 < mmalecki> wookiehangover: pretty cool thing
05:37 < mmalecki> actually, do want.
05:37 < mmalecki> cc AvianFlu 
05:39 < mmalecki> okay, time for me to explore the airport!
05:39 < AvianFlu> WAIT HUH WHAT!?
05:39 < mmalecki> AvianFlu: YES?!
05:40 < nathan7> Avian flu wants to explore the airport too
05:40 < mmalecki> AvianFlu: CALM DOWN EVERYTHING IS FINE
05:41 < AvianFlu> OH OKAY THEN NEVERMIND
05:41 < wookiehangover> EVERYONE STOP PANICKING
05:41 < AvianFlu> mmalecki: stop copenhatin' from copenhagen, I'm having trouble copen...hagen
05:42 < nathan7> AvianFlu: <3
05:42 < nathan7> man, hats.
05:42 < nathan7> I found my hat among things from the post yesterday, apparently my grandparents thought it wasn't a package for me
05:42 < mmalecki> AvianFlu: now everything is clear XD
05:43 < nathan7> so now I have a hat
05:43 < nathan7> maybe I should wear it to school. maybe I shouldn't.
05:43 < mmalecki> AvianFlu: ANYWAY, I SHALL GET A COFFEE
05:43 < mmalecki> I haven't slept
05:43 < mmalecki> DUE TO REASONS.
05:43 < Nena33> hello there
05:43 < nathan7> then seep
05:43 < nathan7> *sleep
05:43 < nathan7> I sleep during the day and do things exciting enough to keep me awake at night
05:43 < mmalecki> nathan7: well, coffee is the preferred method of sleeping
05:44 < nathan7> Nononono
05:44 < Nena33> are u a vampire nathan?lol :p
05:44 < nathan7> I sleep through school
05:44 < mmalecki> it's really easy to apply
05:44 < nathan7> Sometimes I have to be awake for school
05:44 < nathan7> and then I eat some caffeine
05:45 < nathan7> but if something isn't exciting enough to keep me focused then it's probably not fun enough anyway
05:45 < medice> not sure why i drink coffee
05:45 < wookiehangover> http://b.gif.ly/3dca95b5.gif
05:45 < nathan7> I like the taste of coffee.
05:45 < nathan7> But I don't drink coffee to stay awake because I have enough pure caffeine to kill.. three people now
05:46 < nathan7> or four, I'm not sure
05:57 < mmalecki> I received my caffeine does
05:57 < mmalecki> now I'm much less likely to die than I was 5 minutes ago
05:58 < rknLA> does anyone know if mocha has something like a global "before" that doesn't have to be inside a describe?  i want to make sure my test database is dropped before running the tests.
06:00 < ChrisPartridge> rknLA: look at suite() with setup() and teardown() 
06:00 < wookiehangover> rknLA: before is probably the best way to go
06:00 < othiym23> rknLA: you can nest describes, so just stick all of your tests in describes within the outermost one, put the DB drop in that containing describe's before()
06:01 < wookiehangover> othiym23: +1
06:01 < rknLA> othiym23: not helpful.  i want to drop the db in a test_helper that's called before the rest of my files.
06:01 < othiym23> well then!
06:01 < othiym23> shush my mouth!
06:01 < rknLA> what i mean is, 
06:01 < othiym23> if you want guaranteed execution order, mocha is probably not the tool for you
06:01 < wookiehangover> rknLA: then just load your test modules after the db is dropped
06:02 < rknLA> afaik, you can't have a describe span more than one file.
06:02 < rknLA> wookiehangover: and how do i go about that?
06:02 < wookiehangover> tias
06:02 < rknLA> O_o?
06:02 < othiym23> use a Makefile
06:02 < wookiehangover> there's not a bot in here that knows that
06:02 < wookiehangover> "try it and see"
06:03 < rknLA> othiym23: i am. https://github.com/rknLA/shared_cinema_node/blob/master/Cakefile
06:03 < Zak> !tias
06:03 < Zak> awe
06:03 < wookiehangover> db.dropOrWhatever(function(){ require('./testssss') })
06:04 < rknLA> huh.. that's an interesting approach.
06:05 < wookiehangover> I usually always have interfaces that just require my tests. but for the record I always do db dropping in describe blocks
06:06 < othiym23> I abstract all my database setup and teardown logic into a helper library and then call the helper functions from before clauses in specific tests
06:06 < othiym23> that way I have greater control over the state of the system in each individual suite
06:06 < wookiehangover> othiym23: ditto
06:07 < othiym23> this is place where using a plugin tool like architect is extremely useful
06:08 < rknLA> othiym23: that makes sense, but feels like overkill for these tests.  very repetative.
06:10 < rknLA> looks like require('./foo/*') doesn't work.. is there a way to achieve that without iterating by hand?  as you can see in my cakefile, i was just calling mocha on test/models/* and test/apps/*
06:25 <@Nexxy> rknLA, fs.readDir + module.exports, I'm sure there's a module out there for it
06:27 < rknLA> right now i have few enough that manually enumerating them was merely annoying, so i did, and couldn't get requiring my tests from my helper to actually run them.  at this point, i just want the db to be cleaned (and the callback to be finished) before mocha moves from my test helper to the actual tests.
06:28 < rknLA> (this is leading me to believe i found a situation where the answer to my problem is actually forcing busy waiting, since mocha will run the helper until it finishes its functionality completely before running the actual tests)...
06:37 < Zak> rknLA: words of advice, try using mock objects where you can
06:37 < Zak> also, look at a global db rollback
06:38 < rknLA> Zak: context for that?  
06:38 < Zak> re: cleaning of your db
06:38 < rknLA> i mean, is that just general advice, or related to my code?
06:38 < Zak> general advice
06:39 < rknLA> yeah... not terribly useful when i'm trying to do db cleaning for unit tests.
06:40 < rknLA> (and while i'd like to learn more about mocking, in the context of this project, that's more yak shaving.. i'm coming from rails, where shit like this makes sense and is easy, because for the most part, the road has been paved.  with node, a lot of the time i feel like i'm trying to shovel concrete)
06:44 < Zak> new stuff always seems harder
06:45 < Zak> there are also people who are struggling and succeeding using a language
06:47 < rknLA> thanks for the profound wisdom.
06:50 < etcetera> anyone using wintersmith
06:50 < etcetera> wondreing where this article.hasmore property is coming from.
06:55 < rknLA> also, it looks like the after function doesn't get called if the test fails or throws an error... that's kindof... ineffective...
07:13 < othiym23> rknLA: after will get called on failure, not on error
07:13 < rknLA> yeah, that's stupid. going to file a github issue about it.
07:13 < othiym23> good luck!
07:14 < othiym23> a pull request will get you further
07:14 < rknLA> maybe next week.
07:14 < rknLA> gotta get this shit done first.
07:15 < othiym23> fwiw, the way I've dealt with this is by just bootstrapping the database from nothingness instead of trying to scrub it between test runs
07:16 < othiym23> in general, the advice about not depending on external services in unit tests is even more applicable to most Node apps than to Rails
07:16 < othiym23> so I've pushed that stuff off to integration tests that run in a less BDD way that gives me more control over the execution scenario
07:16 < othiym23> ymmv
07:22 < rknLA> for larger apps that definitely makes sense.
07:23 < rknLA> i tend to favor integration tests over unit tests in general anyways,
07:23 < rknLA> so for this particular app, with learning a whole new environment, i'm gonna take one step at a time.
07:29 < [AD]Turbo> hi there
07:29 < coderarity> hi
07:41 < chovy> howdy
07:52 < mscdex> chovy: yo!
08:01 < chovy> mscdex: hey
08:01 < chovy> how goes it
08:09 < cconstantine> hey all
08:10 < cconstantine> I'm trying to use express 3.0, and I can't figure out how to specify where my view files are
08:13 < cconstantine> ah, the 'views' setting changed from expecting an array to a single path
08:13 <@Nexxy> cconstantine, app.set('views', your/path/here);
08:14 < cconstantine> yup
08:14 < cconstantine> not app.set('views', ['your/path/here'])
08:20 < etteola> Hi, what is the best way for parsing an XML file with node?
08:21 < etteola> I would really like to use XPATH-like queries like //model but would also be open to a more elegent solution
08:33 < Tuan_> Hi
08:53 < DCdeBrabander> hey
08:53 < astropirate> Hello!!
08:53 < DCdeBrabander> some active ppl around here?
08:53 < SomeoneWeird> hai
08:54 < DCdeBrabander> i have some q's about node.js and such ;)
08:54 < nathan7> Ask, don't ask to ask.
08:54 < astropirate> ask away maybe someone here knows the answer 
08:54 < nathan7> yes, node.js will set your hair on fire.
08:55 < astropirate> sometimes even your brain :O
08:55 < DCdeBrabander> well, i was wondering: Is there a free webserver where i can host node.js webapplications 
08:56 < DCdeBrabander> I know from nodejitsu and heroku, but heroku doesn't say anything about webhosting? and nodejitsu doesn't install on ubuntu
08:56 < nathan7> jitsu runs just fine
08:56 < nathan7> And they don't do webhosting
08:56 < nathan7> they host applications
08:56 < nathan7> If you want to serve static files that's a different matter entirely
08:56 < DCdeBrabander> mm
08:57 < DCdeBrabander> i just want to develop something, which uses the techniques from node.js and socket.io and i want it to put it online
08:57 < DCdeBrabander> so, that's is reachable for the 'public'  ;)
08:57 < DCdeBrabander> -is xd
08:58 < nathan7> Well, then use nodejitsu
08:58 < DCdeBrabander> ye but how?
08:58 < nathan7> jitsu should install just fine on ubuntu
08:58 < nathan7> sudo npm install -g jitsu
08:58 < DCdeBrabander> nope
08:58 < DCdeBrabander> i get an error
08:58 < nathan7> What error?
08:58 < DCdeBrabander> ye that command
08:58 < DCdeBrabander> i know ;)
08:59 < DCdeBrabander> i have ubuntu install in VM
08:59 < nathan7> "it doesn't work" is as useless as error reports get
08:59 < DCdeBrabander> let me boot
08:59 < DCdeBrabander> haha
09:00 < DCdeBrabander> but if i get it installed
09:00 < DCdeBrabander> can i use it to put node apps online?
09:01 < nathan7> Yeah.
09:01 < DCdeBrabander> naiz
09:01 < DCdeBrabander> ok 
09:02 < DCdeBrabander> i used the command again
09:02 < DCdeBrabander> i get messages like:
09:02 < DCdeBrabander> error installing .... 
09:02 < DCdeBrabander> and ... is:
09:02 < DCdeBrabander> propmt, wizard, flatiron and jitsu itself
09:03 < DCdeBrabander> further down all the echos
09:03 < DCdeBrabander> error: no compatible version found
09:03 < SomeoneWeird> hhuh
09:05 < DCdeBrabander> so? 
09:06 < SomeoneWeird> pastie an error
09:08 < DCdeBrabander> ye i wil copy it in pastebin or something
09:09 < nathan7> Somehow the javascript-related channels seem to have a flood of dutchies
09:09 <@Nexxy> DCdeBrabander, you need a current version of node
09:09 < nathan7> ah
09:09 <@Nexxy> DCdeBrabander, what version are you using?
09:10 <@Nexxy> `node -v`
09:13 < DominiqueDeB> sd
09:14 < DominiqueDeB> hastebin.com/yogokocayi.hs
09:16 < DominiqueDeB> i have also an errorlog, written by command, would it be useful?
09:16 < radiodario> what's a good tool for logging with node.js?
09:16 < rvagg> npm appears to be having problems, anyone else experiencing issues?
09:16 < radiodario> rvagg: yep it took me like 10 minutes to update a pkg
09:16 < DominiqueDeB> i had problems installing since the first time i tried, that was yesterday so?
09:17 < DominiqueDeB> using commands that is
09:17 < DominiqueDeB> also tried windows version, and manually, but in the end u have to use terminal? 
09:19 < SomeoneWeird> winston
09:20 < DominiqueDeB> so anyone any idea why ubuntu can't install jitsu?
09:20 < shinaku_> fenton
09:20 < shinaku_> fenton!
09:20 < shinaku_> DominiqueDeB: is it in apt?
09:20 < DominiqueDeB> i used sudo npm install jitsu -g
09:20 < shinaku_> what error did it give?
09:21 < SomeoneWeird> https://github.com/nodejitsu/jitsu
09:21 < SomeoneWeird> clone it manually
09:22 < SomeoneWeird> edit package.json and change the minimum version required for 'read' to 0.1.1
09:22 < SomeoneWeird> then run npm install in the dir
09:22 < rox> hello
09:22 < DominiqueDeB> where should i find packagejson lol
09:23 < DominiqueDeB> i uninstalled npm altogether and running the command again
09:23 < SomeoneWeird> clone the git repository
09:23 < DominiqueDeB> then i will try ur options
09:23 < SomeoneWeird> it's not a problem with npm 
09:23 < SomeoneWeird> it's a problem with the settings for jitsu
09:23 < DominiqueDeB> mmm ok
09:23 < DominiqueDeB> o rlly
09:23 < DominiqueDeB> like a bug 
09:23 < SomeoneWeird> yes
09:24 < DominiqueDeB> but i want to use the jitsu command, how would cloning a repo enable me to use the command
09:24 < SomeoneWeird> because it will install it
09:24 < DominiqueDeB> like, installing it locally or something
09:24 < DominiqueDeB> ye
09:24 < SomeoneWeird> it'll work, just try :)
09:24 < DominiqueDeB> ye i'm still in the learning curve for using ubuntu and terminal xD
09:25 < DominiqueDeB> so sorry if i come over as a retard, that's because i am a retard at this hahaha
09:25 < SomeoneWeird> lol allgood
09:25 < SomeoneWeird> do you have git installed?
09:25 < DominiqueDeB> nope, i will install it now
09:25 < DominiqueDeB> just apt-get install git?
09:26 < SomeoneWeird> sudo apt-get install git-core
09:26 < DominiqueDeB> o wait, i do have git installed 
09:26 < DominiqueDeB> i think 
09:26 < SomeoneWeird> then go into a directory
09:26 < SomeoneWeird> and type
09:26 < DominiqueDeB> i have git command so
09:26 < SomeoneWeird> git clone git://github.com/nodejitsu/jitsu.git
09:26 < DominiqueDeB> ok!
09:27 < SomeoneWeird> then when its done cd into jitsu
09:27 < SomeoneWeird> and type npm install
09:27 < SomeoneWeird> and see if you get the same error
09:28 < DominiqueDeB> ye still the error
09:28 < DominiqueDeB> but manually change the package.json
09:28 < DominiqueDeB> can solve it right?
09:29 < SomeoneWeird>  /join #nodejitsu
09:29 < SomeoneWeird> and ask in there
09:30 < DominiqueDeB> ? :O 
09:30 < DominiqueDeB> ok 
09:32 < DominiqueDeB> some1 from #nodejitsu is reading this channel
09:33 < DominiqueDeB> i don't have 2 repeat the question? xD
09:38 < coderarity> SomeoneWeird: lol
09:38 < SomeoneWeird> wat
09:43 < etteola> LOL, node!
09:58 < dhpe> what would you recommend for SSL in production environment with Node? Websocket support is a prerequisite.
09:58 <@Nexxy> dhpe, node-http-proxy or bouncy
09:59 < dhpe> What are the advanteges there over alternatives?
09:59 <@Nexxy> alternatives such as?
10:00 < holzp`> websocket and ssl are tough
10:00 < dhpe> such as anything? are there so few options?
10:00 <@Nexxy> for the both, yeah
10:01 < holzp`> i tried a lot of options then quit on it
10:01 < holzp`> waiting for the nginx support
10:01 <@Nexxy> I've been happy with bouncy
10:01 < dhpe> yeah i've heard that nginx is going to support websockets soon.
10:01 <@Nexxy> it kinda does now
10:03 < dhpe> any major challenges with bouncy?
10:03 < harrydog> anyone know how to run mongodb from os x?
10:03 < shinaku_> open a terminal
10:03 < shinaku_> mongodb
10:03 <@Nexxy> dhpe, I had to generate a certificate bundle!!!
10:03 < shinaku_> I recommend using Homebrew to install it
10:04 < harrydog> yeah, i used brew, if i run mongod it says all output going to ...
10:04 < dhpe> uh been there and that's awful.
10:04 <@Nexxy> yeah it was OK
10:04 < harrydog> i'm just curious, how do i connect to it, just "localhost"
10:04 <@Nexxy> but also the hardest part
10:04 <@Nexxy> the rest is just javascript
10:04 < harrydog> nevermind.. var server = new mongodb.Server('localhost',:27017, {auto_reconnect: true});
10:04 < dhpe> i'd need to relearn to do the bundle then. or do you have any good resources?
10:05 <@Nexxy> most cert providers give decent walkthroughs
10:05 <@Nexxy> basically you're just concatenating your cert with any other intermediary certs
10:30 < sassf> i have problems with my proxy company
10:30 < sassf> i cant use npm with my proxy
10:50 < harrydog> is there a way in express, to include a page in parts, kinda like php's include('header'), include('footer'), etc
10:51 < pyrotechnick> harrydog: yep you wanna use jade partials and layouts
10:51 < pyrotechnick> or some other templating language
10:51 < harrydog> great
10:52 < pyrotechnick> probably just a layout is enough, check the docs and examples they're heavily docced
11:05 < harrydog> wonder why express doesn't include a models folder
11:10 < pyrotechnick> harrydog: it's not an MVC framework or anything
11:12 < pyrotechnick> express's purpose is to bring node up to a level of something like apache or nginx
11:12 < Nasga> harrydog: you can user require :)
11:13 < pyrotechnick> harrydog: there used to be an mvc example for express but TJ took it out, probably because too many noobs were hitting him up with questions and requests for advice and help and stuff
11:14 < pyrotechnick> harrydog: if you look around though you'll find heaps of examples of mvc in express
11:14 < Nasga> harrydog: take a look at towerjs and other framework if you need more than a MVC framework
11:14 < harrydog> cool thanks, yeah i'm reading through learning node, the author shows how to add the models to a model folder
11:19 < symeog> how can i use master pages in my application ?
11:19 < pyrotechnick> define master pages
11:20 < symeog> hey pyro…how can i do that ?
11:20 < pyrotechnick> symeog: no i meant what are they? layouts?
11:20 < symeog> i want the layout of the application to one html file
11:20 < symeog> yes!
11:21 < pyrotechnick> are you using express or any templating language or something?
11:21 < symeog> not so far but i am willing to
11:22 < pyrotechnick> best start there, in express they're called "layouts"
11:22 < symeog> ohh so i can find how it works in express site right ?
11:22 < symeog> any good tutorials are also appreciated
11:24 < pyrotechnick> start with the site
11:24 < symeog> ok all i need for now is to know for sure that it has the feature i want
11:24 < pyrotechnick> there is also #express
11:25 < symeog> also i am gonna use the twitter bootstrap if u happen to know it
11:25 < pyrotechnick> yep that's fine, you can even get bootstrap snippets in jade
11:26 < pyrotechnick> but you can use ejs (html) templates aswell
11:26 < symeog> and can u tell me your opinion about jade/stylus and all those templates ???
11:26 < symeog> hahahaha ok u got me first 
11:27 < symeog> i have never used one of those before…are they mandatory ? do they worth the learning curve ?
11:27 < pyrotechnick> if you can afford the time, yes
11:27 < pyrotechnick> but no they are not mandatory, only one thing is mandatory: death
11:27 < symeog> ok and which one is suitable for me ? jade or ebb ?
11:28 < symeog> ejb*
11:28 < pyrotechnick> ejs
11:28 < symeog> yeah this !
11:28 < symeog> so els u say ?
11:28 < symeog> ahhh EJS
11:28 < pyrotechnick> it's sort of like how php'ers mix php into html if you know it
11:28 < pyrotechnick> it's the same kind of thing except js in html
11:28 < symeog> i am not a php er..actually i used to develop in ASP.NET !!!
11:29 < pyrotechnick> so it's easier to take bootstrap snippets and use them in your layouts and templates without having to port them to jade
11:29 < symeog> hmm myes i see ur point…..so els is more familliar
11:29 < pyrotechnick> but you should realise if you hang with the express crew they're probably going to be using jade and stylus
11:29 < pyrotechnick> they're cool like that
11:29 <@Nexxy> lol, express crew
11:29 < symeog> ohhh don't give me that now
11:30 < pyrotechnick> the expressinati
11:30 < symeog> so i maybe go for jade and stylus ?
11:30 <@Nexxy> I made an ultrasonic rainbow generator!
11:30 < symeog> but should i have a bigger problem using bootstrap then >?
11:30 < pyrotechnick> if you're struggling to decide quickly try both
11:30 < pyrotechnick> symeog: no there's nothing incompatible about express, bootstrap, jade, stylus or anything
11:31 < pyrotechnick> it's just about making them play nice
11:31 < pyrotechnick> which other people have well documented by now
11:31 < pyrotechnick> for instance: http://devashish.co.in/2012/01/27/node-jspart-3-jade-bootstrap/
11:32 < pyrotechnick> but you'd be able to find more accurate/recent examples than they, my point is there's alot of info out there if you look
11:32 < pyrotechnick> and you'll probably get more help in #express
11:33 <@Nexxy> pyrotechnick is setting you up for disappointment
11:33 <@Nexxy> there's no one in #express
11:33 < pyrotechnick> there's 100+ people
11:33 < symeog> from a first look this article u gave me will get me started very quickly !!!!!! thanks man!!!
11:33 < symeog> i m gonna read all the parts i guess
11:34 < pyrotechnick> you're welcome, there's also projects like https://github.com/SeraphimSerapis/Bootstrap-for-Jade
11:35 < symeog> trying to talk in express channel
11:35 < symeog> one has answered so far...
11:35 <@Nexxy> OH, REALLY?!
11:35 < symeog> anyways…let me see the link u gave me pls
11:35 < symeog> hahah
11:35 <@Nexxy> symeog, see what did I tell you! disappointment.
11:36 < symeog> compared to this channel …YEAH !!!
11:36 <@Nexxy> where's mscdex 
11:37 < pyrotechnick> patience symeog
11:37 < pyrotechnick> he's finally had enough of the trolls
11:37 < pyrotechnick> so he used a He balloon to escape this rock
11:37 < symeog> figures
11:37 <@Nexxy> but pyrotechnick ... you are the trolls
11:37 < pyrotechnick> troll isn't a position it's a role
11:37 < symeog> now before i go (cause its launch time but ill be back laterz)
11:38 < deoxxa> and then pyrotechnick was a troll
11:38 < symeog> troll is a wow race ;D
11:38 <@Nexxy> launch time?! my favorite!
11:38 < symeog> everybody's !!!
11:39 < symeog> so if i have a good reading to the link u gave me before, u think is enough to get me started with a basic layout and the technologies i need ?
11:40 < symeog> or should i rea all the god damn web first !!!!
11:40 < symeog> thats why sometimes i praise microsoft
11:40 < pyrotechnick> no it's not
11:40 < symeog> damn
11:40 < Nasga> symeog: you can also praise for me while send me few dollars :p
11:41 < pyrotechnick> symeog: http://www.youtube.com/watch?v=dwQxTNLNiEo
11:41 <@Nexxy> lol
11:41 < symeog> hahahaha
11:41 <@Nexxy> a still more glorious dawn awaits.
11:42 < pyrotechnick> not a sunrise
11:42 < pyrotechnick> but a galaxy rise
11:42 < pyrotechnick> a morning filled with four hundred billion suns
11:42 < pyrotechnick> and the rising of the milky way
11:42 <@Nexxy> you suck at duets
11:42 < pyrotechnick> only in IL
11:43 < symeog> ok guys i am gone for a break…i ll be staying online but cya laterz…and THANK YOU
11:44 < deoxxa> are dnode and upnode fast/stable enough to use for high throughput data?
11:44 < deoxxa> i.e. the "data" portion of a connection, not just the "signalling" part
11:46 < deoxxa> substack: ^^
11:46 < substack> deoxxa: try it and see
11:46 < pyrotechnick> substack++
11:46 < deoxxa> noted
11:48 <@Nexxy> ohhh
11:48 <@Nexxy> you got TIAS'd
11:48 < deoxxa> that pretty much means "no"
11:48 < pyrotechnick> no it doesn't
11:48 <@Nexxy> not hardly
11:48 < pyrotechnick> it means your question is subjective like how long is a piece of string is
11:49 <@Nexxy> extremely long.
11:49 < pyrotechnick> and that no matter what substack answered you still wouldn't have learned anything
11:49 <@Nexxy> or relatively short.
11:49 < pyrotechnick> so the best way he can help you is to tell you to find out for yourself
11:50 < pyrotechnick> short of him coming there, implementing it himself, measuring it, finding out what you consider fast and stable enough, he can't possible answer
11:51 < deoxxa> thanks, pyrotechnick
11:51 < pyrotechnick> just sayin
11:51 < deoxxa> keep saying words, please
11:51 < deoxxa> i value your opinion
11:52 < pyrotechnick> :p
11:52 <@Nexxy> you guys make this channel feel like a bad CBS sitcom
11:52 < pyrotechnick> no it's a HBO satirical
11:53 < pyrotechnick> or a shakespearean tragedy
11:53 <@Nexxy> you would mention HBO
11:55 < pyrotechnick> http://i0.kym-cdn.com/photos/images/newsfeed/000/341/503/397.jpg
12:04 < harrydog> can jade mix html from an external file into the template?
12:05 < pyrotechnick> yes https://github.com/visionmedia/express/issues/923
12:06 < chunhao> hi
12:26 < harrydog> how i combine multiple els files
12:35 < Areks|2> hello all, does anybody install websocket on windows? I try to do it, but get error "error MSB6006: "CL.exe" exited with code -1073741515. è íå ñòàâèòñÿ websockets " (win7 x64)
12:35 < will_uk> Installing websocket on Windows is very much like making love to a beautiful woman...
12:36 < Areks|2> will_uk: oh, I noticed
12:36 < blez> yes, it just don't happen
12:36 < will_uk> :-P
12:37 < Areks|2> i already solved about 5-7 same problem, installed 2gb different sdk and utils ))
12:38 < Areks|2> but still have nothing (
12:40 < Areks|2> maybe there is true windows user who complete all quest and installed websocket?
12:40 < holzp`> I found websockets (at this time) to be much more trouble than they are worth
12:43 < Areks|2> holzp`: maybe but i have good project for them )
12:43 < Areks|2> and i wanna get more experience
12:45 < holzp`> yeah, if its just a throwaway thing, I would not bet the store on them till there is an easier direct transport of websockets through a good webserve
12:45 < holzp`> r
12:45 < holzp`> all my websockets eventually become long pollers
12:46 < Areks|2> holzp`: i will support only moder browser
12:47 < holzp`> i had a much troble up top as down on the browser
12:47 < holzp`> proxying and the like
12:47 < holzp`> real PITA
12:49 < Areks|2> at first i wanna install websocket on windows )
12:50 < holzp`> im just saying, get used to that sort of thing if you are using websockets at this time
12:53 < harrydog> what does the Express().router method do?
12:54 < pyykkis> harrydog: use the force, read the source? :)
12:54 < harrydog> rtfs :)
12:55 < holzp`> isn't that the iddleware that actually handles the processing of the declared get()/post()/etc on the app?
12:55 < holzp`> its exposed so you can monkey with the middleware load ordering?
12:57 < harrydog> i'm doing so much work, and it's probably just going to be a 3 page website
12:57 < holzp`> do you need node in that case? can it just be a static site?
12:58 < harrydog> well, i need to run a socket server, so i figured kill 2 birds 1 stone
12:59 < holzp`> dont use a stone when a gun will do
12:59 < holzp`> thats all
13:00 < holzp`> I notice a trend in web developers, forgetting that html, client side js and static serving still get a lot f jobs done well and simple
13:02 < harrydog> i think it's more about learning something new
13:02 < dhpe> Nexxy: stunnel+haproxy seems to be a promising combination.
13:04 <@Nexxy> dhpe, bouncy and node-http-proxy are decidedly easier than that
13:04 <@Nexxy> but whatever floats your boat
13:04 < holzp`> stunnel itself wasnt great I used it to proxysocket.io over https and push it direct back to node and it still dropped sockets a lot
13:04 <@Nexxy> if you really need performance then by all means
13:04 < superjoe> holzp`, I agree
13:05 < superjoe> I try to get away with adding as little moving parts as possible
13:10 < holzp`> after a week of struggling to get alll those moving parts to move tog, I just went to my own long poller and everything was much better
13:10 < holzp`> im sure in a year there will be well defined ways to do socket.io, https and proxying but that day is not here
13:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:11 < holzp`> and once nginx supports it for real then the whole stack will look different
13:11 < holzp`> so im just waiting that out
13:11 < exit2> What is the recommended starting place to learn node.js?
13:11 < Areks|2> nodejs.org ,
13:11 < Areks|2> ?
13:11 < Areks|2> api
13:14 < dhpe> thanks for comments.
13:15 < flexd> I am having a really odd problem with childprocesses and python
13:16 < flexd> (Yes, I will elaborate, I broke my gist :()
13:16 < flexd> I am trying to run this: https://gist.github.com/59551b61c9eac6f3df68 , but it outputs nothing.
13:17 < flexd> Running the python script itself, https://gist.github.com/1905d67ecbf23221f6fa works as expected, but running it from node does not seem to produce any output..
13:17 < flexd> Running another process in the exact same way works fine though: https://gist.github.com/3853512
13:18 < flexd> So, what could I be doing wrong? I asked the same question here about 7 days ago, I just haven't been at work since :)
13:19 < holzp`> is uidgrabber supposed to be using stdout?
13:19 < flexd> Making the node script run python --version seems to have it printing its version to stderr.. but the normal python output does not seem to give anything :/
13:19 < flexd> holzp`: Yes, as far as I can tell (not that good at python)
13:20 < flexd> it's using print(), which is basically a wrapper around system.stdout.write()
13:20 < holzp`> the first thing i would look at would be my stdouts, ins and errs make sure they are all doing what they are supposed to
13:20 < flexd> sys.stdout.write()*
13:20 < holzp`> thats just general advice when dealing with external scripts
13:20 < flexd> Yeah, I understand
13:21 < flexd> print() prints to stdout :/
13:22 < pyrotechnick> node punkd you
13:22 < flexd> Hm
13:22 < flexd> Added a sys.stdout.flush() and it seems to sort of work
13:22 < flexd> hm
13:23 < flexd> dd
13:23 < flexd> Odd*
13:23 < flexd> It only appears in stdout if I call sys.stdout.flush() manually.. what the
13:24 < mscdex> Nexxy: i'm right here!
13:24 < flexd> pyrotechnick: I guess it did..
13:24 < pyrotechnick> ry is actually ashton kutcher's love-child to bjork
13:24 < pyrotechnick> its one big troll
13:32 < flexd> Huzzah, got it working :)
13:36 < zenista> is there a way to stop / end node execution in  a block
13:36 < zenista> or redirect
13:55 < Fox`> can you really not run apache and node.js on the same webserver?
13:56 < substack> Fox`: that doesn't make any sense
13:57 < substack> Fox`: you have some unstated assumptions in place about what your particular circumstances are
13:57 < Fox`> i think i misunderstood some google results
13:58 < pyrotechnick> google punkd you
13:58 < pyrotechnick> http://rt.com/files/news/muslims-protest-google-islam-437/instagram-user-youralcoholhero-image.n.jpg
14:14 < rott> any way to safely sandbox (and re-load upon change) an untrusted node module without spawning a new process?
14:15 < rott> ala Sandbox.js:  http://gf3.github.com/sandbox/
14:16 < aslant> I'm trying to pipe fs.createReadStream to fs.createWriteStream in order to convert from utf8 to base64. Here's my code:
14:16 < aslant> fs.createReadStream('/tmp/utf8.json',{encoding:'utf8'}).pipe(fs.createWriteStream('/tmp/base64.json',{encoding:'base64'}))
14:16 < aslant> what am I doing wrong?
14:20 < aandy> can anyone recommend a library for ssh connections (tunnels specifically), or is spawn/exec still the most common way?
14:28 < astropirate> hey
14:28 < astropirate> i know honesty is the best policy
14:28 < holzp`> you must not be married
14:28 < astropirate> but no need to be so direct as to put it in the chatroom title :(
14:29 < astropirate> holzp`, you look like a man that is bored
14:29 < pyrotechnick> astropirate: i hope you remember where you left your sense of humour soon
14:29 < pyrotechnick> it misses you
14:30 < fnguest> can i prevent npm install from making a node_modules directory in my home directory?
14:30  * astropirate smacks pyrotechnick 
14:30 < pyrotechnick> yea i like that
14:30 < pyrotechnick> do it again
14:30 < aslant> fnguest: npm init on your project root dir?
14:31 < gavri> I'm using q.js for promises in node.js with express. how are errors typically handled here? are they allowed to be propagated to the controller and handled in a common handler and sends back a response to the client with a message about the error?
14:31 < fnguest> aslant can't i just do it on the node directory?
14:31 < aslant> fnguest: with your npm install, are you trying to install modules for the project, or globally?
14:33 < aslant> fnguest: I'm assuming that you're trying to install a module to be used in your app/project ?
14:33 < fnguest> yeah but globally is fine too
14:33 < astropirate> soo... Anyone hiring freelance Node dev?
14:33 < aslant> fnguest: it's not fine ;)
14:35 < aslant> fnguest: I think npm will search up your directory hierarchy looking for a node_modules directory
14:36 < aslant> fnguest: just create a node_modules directory in your app root dir, then when you do an npm install from that dir or a subdir, the module will be place in the app root dir's node_modules
14:37 < fnguest> yeah i have to be in the directory i want, but i thought it was still touching my home directory
14:38 < aslant> fnguest: here are my assumptions. You have an app/project/website for which you are using node. There are node modules that you want to install to use in your app/project/website
14:38 < aslant> fnguest: you want those modules installed for the project, not globally
14:39 < aslant> fnguest: for several very good reasons you can google
14:39 < aslant> fnguest: in any case, the npm install will not be global without the -g flag
14:39 < fnguest> ah i think the -g flag is the ticket, thanks
14:39 < aslant> fnguest: it really fucking isn't
14:40 < aslant> fnguest: *for the vast majority of use cases
14:42 < aslant> fnguest: basically, if you want to use a module from the command line (like e.g. 'n') then install globally. If you want to require the module in your app, install locally
14:44 < aslant> fnguest: http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/
14:45 < holzp`> somsone should kickstart for a technical writer to follow tjholowaychuk around and take release notes, write documentation
14:45 < holzp`> I think one of google's real problems is they hired a billion engineers and few technical writers
14:46 < holzp`> they re doing amazing stuff but their docs for it all suck
14:46 < SomeoneWeird> <holzp`> somsone should kickstart for a technical writer to follow tjholowaychuk around and take release notes, write documentation< lold
14:46 < holzp`> not a joke...
14:46 < substack> I've never written a changelog or release notes ever
14:47 < mmalecki> real man read code
14:47 < holzp`> i know, i think techincail writers may be more valuable than engineers
14:47 < pyrotechnick> real man use diff
14:47 < substack> just look at the commit history and issues
14:47 < mmalecki> substack++
14:47 < substack> changelogs are a bit heavy
14:47 < pyrotechnick> if we all used typescript we could procedurally generate changelogs
14:47 < pyrotechnick> >.<
14:47 < mmalecki> they are too much work to maintain honestly
14:48 < substack> just write smaller software and the problem that they solve goes away
14:48 < mmalecki> ahahahahaha
14:48 < mmalecki> nice joke pyrotechnick 
14:48 < pyrotechnick> i'm deadly serious
14:48 < astropirate> pyrotechnick, never joke when it comes to typescript
14:48 < pyrotechnick> guys im not joking
14:48 < mmalecki> oh, yeah, method signatures are only changes in code, right :) ?
14:48 < pyrotechnick> let's all use typescript
14:49 < mmalecki> how about... not?
14:49 < superjoe> substack, it takes like 5 minutes to execute `git shortlog 0.0.3..0.0.4` and then delete the superfluous messages
14:49 < pyrotechnick> javascript clearly has failed
14:49 < astropirate> no
14:49 < superjoe> s/5 minutes/55 seconds/
14:49 < astropirate> you have failed javascript
14:49  * jocafa makes some popcorn
14:49 < pyrotechnick> anyway that dude guaranteed us we'd all be using it in 6 months
14:50 < superjoe> does that mean I get my money back if he's wrong?
14:50 < pyrotechnick> that ms shill
14:50 < pyrotechnick> resistance is futile
14:50 < pyrotechnick> it means men are fallible if he's wrong
14:50 < mmalecki> ahahahahahaha
14:50 < mmalecki> for one short second I thought you were serious
14:51 < pyrotechnick> for a planck second i was
14:51 < astropirate> bazinga
14:53 < holzp`> speaking of tjh i was looking at his github, anyone use mocha?
14:53 < pyrotechnick> holzp`: LOTS of people
14:54 < astropirate> anyone that matters?
14:54 < pyrotechnick> including but not limited to everyone who has starred it
14:54 < brianc> mocha is great
14:54 < brianc> especially if you're kinda getting used to sync/async stuff in node
14:54 < holzp`> im just querying personal exp here, if any of you have found it very useful
14:54 < brianc> holzp`: I've found it extremely useful
14:55 < brianc> I'm giving a talk over it in 4 days too
15:01 < holzp`> I have to look into it, God knows I could use more tests
15:02 < pyrotechnick> Nexxy: people are starting to talk about their imaginary friends again
15:02 < mmalecki> lol
15:03 < pyrotechnick> actually god's a thought and thought is light and light exists
15:03 < pyrotechnick> thus god exists
15:03 < pyrotechnick> discuss.
15:04 < superjoe> pyrotechnick, you just proved that the thought of god exists
15:05 < superjoe> congrats. now back to the topic
15:05 < pyrotechnick> that's what i god
15:05 < pyrotechnick> i mean thought
15:34 < owen1> anyone using zombie.js? http://pastebin.com/U68LED7W - why don't i get an exception? the title is 'google'.
15:38 < timeturne> anyone here using mongoose
15:39 < timeturne> it saves _id for an array of documents in a field apparently
15:39 < pyrotechnick> that's mongodb itself
15:40 < timeturne> no I mean if my schema object is { a: String, b: [{foo:String, bar: Number}] }
15:40 < timeturne> it will create an _id for each object in b's array
15:40 < timeturne> which I don't need
15:41 < holzp`> then youll prob have to just filter it out
15:41 < holzp`> perhaps everything starting with a '_' since that seems to be their choice for internals
15:41 < timeturne> but is there a way to prevent mongoose from even saving the _id or is mongo doing that?
15:42 < timeturne> I filter it out but its just using up space
15:42 < holzp`> theres probably a good reason for it
15:42 < holzp`> even if you dont see it
15:42 < holzp`> the framework may be using it internally
15:44 < holzp`> I would be very reluctant to take something named '_id' that magically showed up and screw with it
15:44 < therealkoopa> On npmjs.org, it lists how many times a module was downloaded. Do you know if those are direct downloads, e.g. npm install foo, so downloads++, or it counts if it's downloaded as a dependency?
15:44 < porjo> I've created a HTTP server and would like to keep track of currently connected clients. The problem I have is handling disconnects. Using the net.socket 'close' event: how do I know which client just disconnected?
15:58 < jrajav> porjo: A socket is a connection to a single client
15:58 < jrajav> porjo: You can only attach the 'close' event to a socket after the connection has been established (unless you're establishing it manually), so you'll have to store the state at that point
16:03 < porjo> jrajav: thanks, I've got it now
16:04 < jrajav> porjo: I'd suggest reading a bit on TCP/IP if you're interested in servers
16:04 < jrajav> (Not to mention HTTP, but that wasn't the issue here)
16:05 < porjo> I already know quite a bit having coded them in C. I'm just getting used to async programming...that's my real problem :)
16:06 < pspeter31> Is there a node module to compile a module and all of it's requirements into one file to be served client side?
16:07 < porjo> regarding JS arrays: I've seen code like this 'var a = {}; a[1] = 2;' why does this work? ( declared as an object and used as an array!?)
16:08 < pachet> arrays are objects that do special stuff with their numeric indices
16:09 < pachet> there's no rule that says you can't have numeric prop names on an object
16:09 < pachet> but having those doesnt mean its an array
16:15 < porjo> ok. If I'm using the array with only numeric indices, is there any benefit to declaring it one way or the other - or does it make no difference?
16:16 < jrajav> It does make a difference
16:16 < pachet> sure, if it's an array you get all the cool array methods
16:16 < jrajav> If you do var a = {};, an object that inherits from Object.prototype is assigned to a
16:16 < jrajav> But if you do var a = [];, an object that inherits from Array.prototype is assigned to a
16:17 < jrajav> Array.prototype is what gives it all the fancy Array methods, as well as the handling of indices and .length
16:17 < porjo> ok, thanks
16:17 < jrajav> You can do a[1] on any object to get the '1' property
16:17 < jrajav> But you can't do a.length or a.slice() and expect it to work unless it's actually an Array object
16:19 < tubbo> guys
16:19 < tubbo> did we REALLY have to change the name of sys to util
16:19 < tubbo> ;)
16:21 < TheEmpath> bleeding edge, baby.  wait til we change the name of require() to positivelyNeed()
16:22 < mmalecki> lol
16:24 < tubbo> hmm, maybe i can run this on an earlier version of node
16:24 < jrajav> TheEmpath: a la http://www.addedbytes.com/blog/if-php-were-british/ ?
16:24 < TheEmpath> jrajav: exactly lol
16:25 < jrajav> We should definitely change try { } catch () { } to would_you_mind { } actually_i_do_mind () { }
16:26 < tubbo> http = require('sup')
16:26 < tubbo> sup.createServer()
16:26 < TheEmpath> I wonder if theres a 1990s rap video version…. slangThis { } ohShitThePoPop { }
16:26 < TheEmpath> s/ThePoPop/ThePoPo
16:26 < tubbo> yes
16:27 < context> help help help the police !
16:27 < etcetera> are there any perf metrics for node latency at or near cpu saturation?
16:27 < etcetera> /s/any/any good/
16:28 < tubbo> slang { } beOut { throw "woop woop thats the sound of the police" } 
16:28 < TheEmpath> rofl
16:30 < jrajav> true -> fresh, false -> whack
16:31 < TheEmpath> this idea has merit and i demand a kickstarter
16:32 < pyrotechnick> http://sweetjs.org/
16:32 < pyrotechnick> already done
16:35 < TheEmpath> ooo
16:35 < pyrotechnick> thanks mozilla
16:36 < pyrotechnick> mozilla doesn't afraid of anything
16:37 < Lucky--> anyone try typescript out yet?
16:37 < pyrotechnick> #typescript
16:39 < recidive> hey folks, do you think it's reasonable to use commander on a web server?
16:39 < recidive> or does its footprint doesn't worth it?
16:42 < jrajav> pyrotechnick: It compiles to Javascript
16:42 < pyrotechnick> my cup overfloweth
16:43 < pachet> sup deep
16:43 < holzp`> - john holmes before football practice?
16:43 < pachet> heh
16:44 < Lucky--> its basically strongly typed js
16:44 < Lucky--> its like a diff version of coffeescript in a sense
16:45 < pyrotechnick> https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS
16:46 < gavri> anybody using vows here? when something goes wrong, I get "callback not fired". I'd prefer an actual stack trace of the original problem instead. it would be about a 1000x more helpful. anybody know how I can get that?
16:46 < jrajav> How is "strongly typed js" a "different version of coffeescript"?
16:46 < jrajav> That's like the exact opposite of coffeescript
16:46 < Lucky--> i said its "like"
16:46 < jrajav> There are like 500 million languages that compile to javascript :P
16:46 < Lucky--> and its only strongly typed as a helper, its not strongly typed per se
16:47 < Lucky--> http://www.typescriptlang.org/Playground/#ex5
16:47 < pachet> strong types, defibulator paddles for classical inheritance, and a lot of cruft for scope resolution
16:48 < jrajav> Types result in compile time errors if improperly assigned
16:48 < jrajav> Don't know how much more "strongly typed" you can get
16:48 < pyrotechnick> c++
16:50 < nathan7> pyrotechnick: C++ is a massive clusterfuck
16:50 < pyrotechnick> that powers half the known world
16:51 < pyrotechnick> including v8
16:51 < Lucky--> yea
16:51 < Lucky--> can i install node into my chrome console? ;-)
16:51 < pyrotechnick> don't bite the hand that feeds
16:52 < pachet> queue the chorus from 'living in america'
16:52 < pachet> s/queue/cue
16:53 < pyrotechnick> enqueue
17:03 < jrajav> C++ is the most ubiquitous, workable option for GCless high performance and low-level control
17:03 < pyrotechnick> no c
17:03 < jrajav> Nobody actually thinks that it has nice, elegant abstractions, just tolerable ones
17:03 < jrajav> Or if they do, they haven't seen enough abstractions
17:04 < jrajav> pyrotechnick: Whether C is as (or more) workable as C++ is subjective
17:05 < jrajav> Well, it's subjective in any case, so meh
17:05 < pyrotechnick> http://d22zlbw5ff7yk5.cloudfront.net/images/cm-26400-0507b97a7ece10.gif
17:06 < tubbo> jrajav: bjarne said it best: "C makes it really easy to shoot yourself in the foot. C++ makes it harder, but when you do it blows your whole leg off"
17:06 < exit2> Is Express the most popular web framework for node?
17:06 < tubbo> so i guess...whatever floats yer boat? :)
17:07 < rendar> tubbo: lol, nice one
17:07 < pyrotechnick> what you hear is all here-say
17:08 < tubbo> i don't get typescript
17:08 < tubbo> couldn't that just be done with a JS lib?
17:08 < pyrotechnick> not really
17:08 < jrajav> tubbo: Getting compile-time errors for type information? :/
17:08 < tubbo> ehh actually...i guess not, there isn't a way to rewrite how comparisons and assignments happen
17:08 < pyrotechnick> no unless you annotate your code with meta-data in comments or something
17:09 < mmalecki> anyone here is in Dublin?
17:16 < harrisonm> mmalecki: I'm about a 3-hour drive from Dublin, Texas
17:17 < mmalecki> harrisonm: pretty far from me XD
17:26 < astropirate> I am going to hyperventilate if I get another recruiter trying to seel me on a job by telling me the use angular js
17:26 < astropirate> :(
17:26 < jamescarr> any of you manage your node processes with supervisord?
17:26 < astropirate> sell*
17:26 < niggler> lol fuck recruiters
17:27 < astropirate> niggler, yes. but fuck angular js even more
17:28 < niggler> what's angular js/
17:28 < astropirate> its this thing
17:28 < niggler> " Superheroic JavaScript MVW Framework"
17:28 < astropirate> yes
17:28 < astropirate> its basically inline JS
17:28 < astropirate> but instead of doing  onCLick="foo()"
17:28 < astropirate> you do
17:28 < astropirate> data-onCLick="foo()"
17:28 < astropirate> FUUUUUU
17:28 < niggler> love the modesty here
17:29 < niggler> according to google
17:29 < niggler> "AngularJS Docs
17:29 < niggler> AngularJS is what HTML would have been, had it been  ...."
17:29 < astropirate> you see it right/
17:29 < aandy> so, html hasn't been?
17:29 < astropirate> it is inline JS!!!
17:29 < astropirate> they are taking us back to the bad old days of early 2000's
17:29 < astropirate> :(
17:30 < pyrotechnick> we should go back further
17:30 < pyrotechnick> and never invent marquee
17:30 < astropirate> madness!
17:30 < pyrotechnick> and have gone with plan9
17:30 < astropirate> lol
17:30 < niggler> http://imgur.com/y9dO9
17:30 < pyrotechnick> and kept the internet serverless
17:31 < niggler> aandy: check the screenshot
17:31 < aandy> what's up?
17:31 < niggler> "aandy: so, html hasn't been?" i was copy-pasting from google's "AngularJS Docs" link
17:31 < niggler> "AngularJS is what HTML would have been, had it been ..."
17:31 < aandy> i know
17:33 < flexd> If I need a database to store a simple queue, what would you recommend?
17:33 < pyrotechnick> REDIS
17:34 < flexd> Really?
17:34 < pyrotechnick> yes
17:34 < pyrotechnick> plus the author is "sexist"
17:34 < niggler> flatfiles
17:34 < pyrotechnick> so you know it's good
17:34 < niggler> always go with flatfiles
17:34 < flexd> Basically the only things needed are storing the queue, removing any item in the queue (most likely the one at the top) and the ability to store some statistics on a per-day basis.
17:34 < flexd> CSV flatfiles would probably work heh
17:35 < niggler> 'removing any item in the queue' is definitely not a queue ADT
17:35 < flexd> Just making a helpdesk queue system, you can get your access card scanned to get a spot in the queue ,get a sms when its almost your turn.
17:35 < flexd> Something like that, not really a queue as you'd think in programming I suppoes :p
17:35 < superjoe> what do you guys use instead of angularjs to update a dom without destroying user inputs?
17:36 < flexd> niggler: I could be using mysql, I'm looking at the bindings now but I can't decide.
17:36 < flexd> Actually given the fact that we have a mostly postgres shop, I should be looking at those o
17:36 < flexd> :o
17:36 < niggler> flexd: that's probably the best bet
17:36 < zane> What's the proper syntax to start forever using -nouse-idle-notification and a ulimit?
17:36 < niggler> leverage the existing competency
17:36 < superjoe> astropirate, ^^
17:36 < flexd> I have used Redis before though, it's fun to play with
17:37 < zane> I'm under the impression that command-line arguments don't get passed the same way when usinng forever
17:37 < flexd> I've just not gotten comfortable doing anything that could need any relations, I get confused p
17:37 < flexd> which is not good :)
17:37 < niggler> zane: 'ulimits are better set by the parent process
17:37 < niggler> if you are launching node from a shell, set 'ulimit there
17:38 < niggler> btw: what's the motd referencing?
17:38 < niggler> "at least one request every five seconds"
17:38 <@Nexxy> requests
17:38 <@Nexxy> at least one
17:38 <@Nexxy> every.
17:38 <@Nexxy> five.
17:38 < flexd> Someone whining about performance in one way or the other I expect.
17:38 <@Nexxy> seconds.
17:39 < zane> niggler: ah, ok, what about -nouse-idle-notification? would "forever start -nouse-idle-notification api.js" work? 
17:39 < niggler> "at least one request every five seconds" is a really shitty target
17:39 < zane> niggler: alternatively, a way to determine if the flag was properly accepted by node would be helpful ;)
17:39 < niggler> that's like "at least one weapon of mass destruction"
17:39 < flexd> You only need the one =
17:39 < flexd> :)
17:41 < niggler> afaict there's no way to tell if  --nouse-idle-notification is enabled programmatically
17:41 < zane> yeah, I'm confused about it; sometimes I see it referenced with -- and sometimes just one -
17:43 < niggler> i think its supposed to be 2 dashes:   --use_idle_notification (Use idle notification to reduce memory footprint.)
17:43 < niggler> if you run node --help
17:43 < niggler> err node --v8-options
17:44 < tubbo> shot in the dark...but does anyone here run hubot with the hubot-flowdock adapter?
17:44 < tubbo> i'm having some module-loading issues
17:44 < tubbo> the docs say that i should load hubot-flowdock into the package.json of my whole bot's project, but the hubot module doesn't seem to be finding the adapter, so it can't load
17:44 < tubbo> i'm wondering if maybe i should be loading hubot-flowdock into the package.json of hubot in my node_modules..
17:45 <@Nexxy> tubbo, have you done `npm install` after modifying your package.json?
17:45 < tubbo> Nexxy: i have
17:45 < tubbo> Nexxy: perhaps i'm parsing this error incorrectly? https://gist.github.com/1714a32c98da36053153
17:46 < niggler> did you install -g?
17:48 < tubbo> niggler: nope, should i? i don't feel comfortable doing that with node because shit breaks so often =\
17:48 < niggler> fair criticism :)
17:49 < tubbo> hehe...i don't *really* mind for my own dev purposes, but when i want to use node for anything important it becomes a bit of an issue ;)
17:50 < niggler> lol who uses node for something important :P
17:50 < tubbo> i do like the ability to just patch whatever in my node_modules on a per-project basis
17:51 < chovy> #!/usr/bin/env node -- this doesn't work on startup script when debain boots up
17:52 < niggler> chovy: why are you booting up detain?
17:52 < niggler> 'debain
17:52 < chovy> debian
17:54 < draginx> would line 7 ever be called before line 8? http://pastie.org/private/jhp7thpazq9i6f0sxeaq1q (the .save and cb() )
17:56 < holzp`> draginx, called yes? actually running hard to tell is it blocking?
17:56 < tnorris> draginx: ...don't know if I understand correctly, but unless `result.save()` is asynchronous, it shouldn't.
17:57 < draginx> yeah I have no idea :/
17:57 < holzp`> it gets called, but when the guts of it "runs" is anyones guess right?
17:57 < holzp`> does it take a callback?
17:57 < holzp`> for the most part depending on its caback sig you should be able to pass it cb
17:59 < draginx> right
17:59 < draginx> let me check :) thanks guys
17:59 < holzp`> :)
18:00 < NickMessing> Anyone has experience in compiling node.js for RHEL?
18:00 < holzp`> sometimes programming node is like playing a game of hot potato, everyone is passing control to everyone else
18:00 < adamramadhan> NickMessing: yeah working fine centos 6.3
18:00 < adamramadhan> hmm but i heard that there are some issues with centos 6.2
18:01 < adamramadhan> use g++ 
18:01 < draginx> ok .save is syncronous :D
18:01 < draginx> so that means line 8 will run after line 7 yeah?
18:02 < ujjwalt> people is it possible to create a raw socket in node.js
18:03 < adamramadhan> btw is nodejs felixge/mysql sync? or async in default?
18:03 < graeme_f> hey guys, in dominic's event-stream 'stringify' example he has objectStream - https://github.com/dominictarr/event-stream#stringify - how do I make a stream i can write objects to?
18:05 < ujjwalt> am i trying to do something node wasn't meant for reading raw packets?
18:05 < s5fs> ujjwalt: no expert but it looks like raw sockets are not supported. no mention in the docs and i found a couple older posts (2011) explicitly stating that raw sockets were not supported (at least in v0.6)
18:06 < ujjwalt> ok thanks man
18:06 < s5fs> ujjwalt: there may be a module but I'm not seeing one
18:06 < ujjwalt> there seem to be only tcp4/tcp6 and unix socket support
18:06 < ujjwalt> but not raw ones
18:06 < s5fs> ujjwalt: yup, and udp sockets too
18:07 < ujjwalt> cool
18:07 < ujjwalt> thanks buddy
18:07 < graeme_f> (i'm basically trying to replicate socket.io using this and substack's shoe, so i think i need parse and stringify)
18:08 < s5fs> ujjwalt: np, good luck
18:14 < tubbo> getting an error with the following package.json: https://gist.github.com/ba23e4f150fa4c01d4f0
18:18 < tubbo> this shit sucks
18:18 < tubbo> i see the fucking module RIGHT THERE
18:18 < tubbo> it's loading everything else
18:18 < tubbo> and even when i `npm install` in the hubot node_module dir, it *still* doesn't work
18:18 < tubbo> what am i doing wrong here?
18:22 < graeme_f> got it - just needed to stringify and call stream.write()
18:22 < graeme_f> (duh) :)
18:23 < context> tubbo: you do npm install, in he hubot dir
18:23 < context> not in the node_modules dir
18:23 < tubbo> context: i did it in the base dir of my project, then in node_modules/hubot
18:23 < context> is hubot in your package.json ?
18:24 < tubbo> context: yes
18:24 < context> you will probably need to load coffee-script as well BEFORE including hubot into your project
18:24 < context> since it is written in coffeescript
18:24 < context> well... requiring
18:25 < tubbo> context: that makes sense. i tried adding coffee-script to the package.json of my project, still no difference
18:38 < draginx> Any reason why I can't create a directory in nodejs? err is not returning anything
18:38 < draginx> and permissions are gine
18:40 < gabrieluk> dragix, what do you mean, care to elaborate?
18:41 < gabrieluk> draginx*
18:43 < context> draginx: maybe you are creating it just not where you expect ?
18:44 < draginx> nvm i figured out the preoblem im an idiot sorry :S
18:59 <@Nexxy> draginx, that's not good self talk
18:59 < draginx> Nexxy: I forgot that I moved the file to *another* location and then removed it form TMP later down the road
19:00 < draginx> so when I was trying ot debug I was only deubgging half the process, etc.
19:01 < cnd> is there any way to defer handling of a stream's 'data' event?
19:01 <@Nexxy> draginx, everyone makes mistakes :)
19:01 < draginx> Nexxy: not me, I'm perfect :P
19:02 <@Nexxy> oh you too huh?
19:02 < draginx> so for deploying nodejs to production... monit and forever are good enough? :D
19:03 < samholmes> Is nodejitsu enough to run high end web services, say I was building a twitter like service or something.
19:03 <@Nexxy> samholmes, yes
19:03 <@Nexxy> draginx, I just use upstart, but yeah
19:04 < tnorris> upstart ftw.
19:04 < draginx> Nexxy: right, O Ksome people have trouble with forever -- are there alternatives just in case if I go down that road? OR is there a way for monit to email me errors? :D
19:04 < samholmes> How do I host my mysql server if I use nodejitsu?
19:04 < jesusabdullah> nexxy tell me about upstart
19:04 <@Nexxy> I'm sure you can get monit to email you
19:04 < jesusabdullah> samholmes: elsewhere
19:05 < samholmes> jesusabdullah: where would you recommend?
19:05 < samholmes> Also, how much bandwidth does a drone on nodejitsu give you?
19:05 <@Nexxy> jesusabdullah, it's super easy and lets you do all the standard stuff like track pid and log and start/stop your daemon(s) on various conditions/runlevels
19:05 <@Nexxy> you can even set up your own custom events
19:05 < blakmatrix> Nexxy: works on windows?
19:05 < superjoe> draginx, here's an alternative to forever: https://github.com/indabamusic/naught
19:05 <@Nexxy> blakmatrix, oh yes.
19:05 < draginx> ty
19:06 < jesusabdullah> I don't use sql generally so
19:06 <@Nexxy> sql use *you*
19:06 < dotplus> environment question: if I do npm -g install <foo> and it installs various modules, I want to have symlinks made from /usr/bin or /usr/local/bin to the various binaries in /usr/lib/node_modules/*/node_modules/bin/ . Do I need to do that manually or can I get it done as part of the install?
19:07 < dotplus> or does that depend on the module maintainer?
19:07 < jesusabdullah> Nexxy: I'm starting to think I really just want init.d with some extras <_<
19:07 < draginx> superjoe: what are some of the advantages to using naught over forever?
19:07 < superjoe> draginx, http://www.superjoesoftware.com/temp/naught.html
19:09 < draginx> superjoe: nice :) https://github.com/indabamusic/naught/blob/master/src/main.co <-- what is the CO ext?
19:09 < superjoe> draginx, https://github.com/satyr/coco/
19:10 < draginx> also superjoe would u ahve an example on how to manage a production server with naught / restart it after git update?
19:10 <@Nexxy> ho that's ugly
19:10 < draginx> if not i can figure it out but was j/w idf theres s preferred way etc.
19:10 < superjoe> Nexxy, syntax coloring helps.
19:10 < niggler> woah woah woah 
19:10 <@Nexxy> so do curly braces
19:10 <@Nexxy> and parentheses
19:10 < niggler> superjoe: are you kidding me? there exists 
19:10 < niggler> "dialects" of coffee script?
19:11 < superjoe> niggler, it's stable, it's tested, it produces cleaner, more optimized javascript code, and if any maintainers ever want to jump ship, it's 1 command to switch back to js.
19:11 < niggler> and then there's "Livescript"
19:11 < jrajav> niggler: http://maxtaco.github.com/coffee-script/
19:11 < jrajav> Feast your inappropriately named eyes
19:11 <@Nexxy> generated js
19:12 < superjoe> niggler, you gotta admit, lines 203 and on here would suck to write in javascript: https://github.com/indabamusic/naught/blob/master/src/main.co
19:12 < niggler> so live script is a fork of coco which is a perturbation of coffeescript
19:12 < niggler> fair enough 
19:13 <@Nexxy> you could use something more appropriate like YAML for that
19:13 < superjoe> I could. but that would be more complicated
19:13 <@Nexxy> instead of writing your entire app in cs
19:13 <@Nexxy> hardly lol
19:13 < etcetera> anyone know if you can run redis on ec2 micro instances?
19:13 < niggler> so when will we see livescript with support for icedcoffeescript? 
19:13 < superjoe> niggler, you joke, but I bet there's an issue for it
19:14 < superjoe> niggler, https://github.com/gkz/LiveScript/issues/116
19:14 < superjoe> boom.
19:14 < niggler> baby jesus would cry
19:14 < tnorris> etcetera: yeah, can't do much but I've done it.
19:14 < niggler> holy fuck you've gotta be kidding me
19:14 <@Nexxy> haha
19:14 < etcetera> tnorris: can you host both on the same instance?
19:14 < anarchist> does anyone know any code examples of spawning a child process and then displaying the stdoutput on a web page?
19:14 < superjoe> anarchist, read the friggin api docs
19:14 < niggler> and i thought category theory was generalized abstract nonsense
19:15 < tnorris> etcetera: haven't been following. "both" what? node and redis?
19:15 <@Nexxy> superjoe, be nice
19:15 < superjoe> Nexxy, k.
19:15 < etcetera> tnorris: yea, node and redis
19:15 < superjoe> anarchist, please read the nice api docs
19:15 < anarchist> superjoe: gee, i hadn't thought of that
19:15 < etcetera> do I have to point redis's dbfile to something durable?
19:15 < tnorris> etcetera: sure. both doing nothing only use about 15MB. just need to track how much you're doing in node, or how much you're storing in redis.
19:15 < niggler> superjoe: it could be parsed as the API docs to nice
19:16 < etcetera> tnorris: so micro instances should more than cover just playing around.
19:16 < superjoe> niggler, hmm?
19:16 < superjoe> are you making a joke about compilers?
19:16 < tnorris> etcetera: definitely. use it for testing all the time.
19:16 < etcetera> gotta love that free tier.
19:16 < niggler> i saw "nice" and thought about the process control command 'nice'
19:17 < niggler> http://linux.die.net/man/1/nice
19:17 < superjoe> ah.
19:17 < niggler> it is also the name of the system call
19:19 < anarchist> okay is it that node.js needs socket.io to do this?
19:20 < superjoe> anarchist, what exactly are you stuck on? I'd like to help but your questions are very vague
19:21 < anarchist> well i'd like to emulate a simple command line program i have, but in a web app
19:21 < anarchist> and not technically emulate, but you know, send command lines to the server, and then read and manipulate the stdout
19:21 < anarchist> is that clear-ish?
19:21 < superjoe> yes, in that case I would urge you to read the socket.io docs
19:22 < niggler> is there a wiki?
19:22 < anarchist> okay cool. i've seen references to socket.io but didn't really get what it is
19:24 < draginx> superjoe: booting: 0, online: 0, dying: 1, new_booting: 0, new_online: 0 I keep getting the dying lol
19:24 < draginx> o wait I just had to kill the old processes good to go
19:24 <@Nexxy> shoe is way easier than socket.io
19:25 <@Nexxy> !gh substack/shoe
19:25 <@Nexxy> oh.
19:25 <@Nexxy> https://github.com/substack/shoe
19:26 < etcetera> shoe?
19:26 <@Nexxy> yes, shoe.
19:26 < pyrotechnick> as in sock.js
19:26 < pyrotechnick> as in sockets
19:26 < pyrotechnick> we're pretty punny people
19:26 < etcetera> ah, breaks the websocket protocol.
19:27 < etcetera> that's interesting, graceful degradation.
19:27 < draginx> superjoe: does naught have trouble with spawn and exec? :D
19:28 < superjoe> draginx, check your stderr.log. is your process crashing?
19:28 < draginx> well now it is but thats because of redis-connect messing up
19:28 < draginx> let me flush everything :)
19:28 < tnorris> etcetera: one more thing, if your node process exceeds the allotted memory on the micro instance, then it will be automatically killed.
19:28 < etcetera> tnorris: what's the allotted memory?
19:29 < draginx> superjoe: there it goes :)
19:29 < superjoe> draginx, have fun!
19:29 < tnorris> etcetera: 613MB
19:29 < etcetera> tnorris: process mem max.
19:29 < draginx> superjoe: thanks! :) And Im assuming two things.. 1: Each worker = 1 cpu and 2: you going to maintain this code? :P
19:29  * etcetera thinks azure made a huge mistake not offering free hosting.
19:29 < superjoe> draginx, 2. we use it in production for indabamusic.com, so yes.
19:30 < draginx> :D yay
19:30 < pyrotechnick> ms isn't in the game of freedom
19:30 < draginx> cool site btw
19:30 < tnorris> etcetera: well, node will grow up to 1GB, unless you're using Buffers, then it could grow indefinitely. is that what you're asking?
19:30 < superjoe> thanks
19:30 < etcetera> tnorris: no I mean what's the max process mem allowed by ec2 free tier?
19:30 < superjoe> draginx, as for #1, see the README. you can specify more workers. it's up to you to decide how many
19:31 < superjoe> defaults to 1
19:31 < tnorris> etcetera: no process has a max. only the system. but if you're running a node process and run out of memory then it will be killed automatically.
19:31 < etcetera> tnorris: fair enough.
19:31 < draginx> right i guess in nodejs world worker = 1 cpu? :)
19:31 < draginx> just not familiar with the terminology here
19:32 < etcetera> 613 is more than linode already.
19:32 < superjoe> draginx, ah. 1 worker == 1 process
19:32 < draginx> ah ty :)
19:34 < draginx> superjoe: one last question.. "No server watching; use deploy" 1. what is deploy is it a specific npm? and 2. Would this essentially mean "Install monit / upstart / etc. for this"
19:34 < superjoe> draginx, look at the naught readme and look for the "deploy" command
19:35 < draginx> oooo i see
19:37 < therealkoopa> It doesn't look like the socket.io redisstore keeps the clients by room in redis, so that must be stored in memory. Any ideas if it's possible to get clients by rooom from another process
19:40 < draginx> therealkoopa: it might be a good idea to use redis as the pub/sub?
19:40 < draginx> if u store the users in redis any process can access it..
19:41 < therealkoopa> draginx: Yea, I have no problem doing that. I was just a bit shocked the redistore didn't hold the clients by room.
19:41 < therealkoopa> So they must do something else to achieve that functionality.
19:43 < jhsto> does anyone happend to know how i can add expire in redis when creating a key?
19:43 < jhsto> im new to it and i cant figure out where i should add the expire()
19:44 < therealkoopa> jhsto: setex
19:44 < therealkoopa> jhsto: http://redis.io/commands/setex
19:44 < jhsto> thanks man
19:45 < jhsto> i wonder how i missed it
19:45 < therealkoopa> And if a key has already been set, it's just: expire(key, ttl)
19:46 < jhsto> ok, thanks
19:51 < superjoe> wow, that's a really nice feature
19:53 < theartisan> wondering if anyone can help with some guidance, i have a routing middleware, and im wondering if its consuming part of request.url is the right course of action, as in if it routes /foo/bar on /foo then the request.uri becomes /bar
19:53 < theartisan> the nice thing about that is you can chain routers and apps, the bad thing is that its dicking with the request uri and would make generating urls harder...
19:54 < theartisan> unfortunatly the node request has no consept of script_name and path_info like the cgi spec :(
19:54 < draginx> If I wanted to make a "global" error function (so that any file including exported ones can use this functionality) what would be the best way to do that?
19:54 < draginx> im using expressjs if that helps in anywya but not all functions pass down the req or res variable
19:54 < nathan7> theartisan: it's not CGI
19:54 < nathan7> CGI is a silly hack
19:54 < nathan7> draginx: in express you can have error middleware
19:55 < theartisan> nathan7: yes, but the CGI environ has some nice things in it
19:55 < nathan7> theartisan: hm
19:55 < draginx> nathan7: right but the req or res doesnt pass down to some of the functions if that makes sense..?
19:55 < nathan7> theartisan: middleware ftw
19:56 < theartisan> the path being comprised of two seperate values was one
19:56 < nathan7> draginx: hm
19:56 < draginx> http://nodejs.org/api/domain.html this? :D
19:56 < nathan7> draginx: then you should be catching that in their callbacks
19:56 < draginx> well I guess.. is there a way to listen for throws? :P
19:56 < draginx> like throw new err; would always pass the throw to my function
19:57 < theartisan> you could create routers that consumed path_info and added to script_name in order to nest an arbitrary number of apps / routers, something you see in python wsgi and rails rack apps alot
19:57 < nathan7> draginx: throwing is when your application needs to die
19:57 < draginx> right
19:58 < chilts> yeah, throwing in an async environment doesn't really make sense :)
19:58 < nathan7> draginx: if you're encountering a runtime error that you can just log or something, then you should be passing it as cb(err)
19:58 < chilts> unless you wanna die as nathan7 says
19:58 < nathan7> throwing makes sense when you've grandly fucked up the environment in some way
19:58 < draginx> theres no way to do like.. process.emit('error', 'My message!') and process.on('error' ? :p
19:59 < theartisan> throwing also makes sense in synchronous bootstrapping code, like reading configs and such
19:59 < nathan7> You can do process.on('error')
19:59 < nathan7> or something close
19:59 < nathan7> It's to handle application shutdown
19:59 < nathan7> You should never ever catch the error there
19:59 < draginx> what about process.on('whateverIWant' ?
19:59 < draginx> right
20:06 < jasonkuhrt> has anyone experience a "bash: node: command not found" when deploying to heroku?
20:09 < chilts> jasonkuhrt: someone also just reported that on #heroku
20:10 < jasonkuhrt> chilts: Ok thanks I will check it out, I just created another dummy express 3.x app and was able to deploy ok, but my main app, a brunch.io app, won't work no matter what I do seemingly
20:11 < chilts> can you redeploy and see what happens?
20:13 < nathan7> what's the hype around brunch.io
20:14 < jasonkuhrt> chilts: Ya I am trying again and again, removing parts of my app until there will be nothing left ha
20:16 < theartisan> nathan7: yet another framework with a cool domain and a cheesy web 2.0 style site? who wouldn't want to use it?
20:16 < chilts> jasonkuhrt: I think it's a problem at their end rather than yours
20:16 < chilts> what engine have you specified in your package.json?
20:17 < jasonkuhrt> chilts: only specific  to certain apps though? My dummy app worked: http://kuhrt-test.herokuapp.com
20:17 < chilts> oh ok
20:18 < jasonkuhrt> chilts: I've tried a whole range of things, npm 1.1.x, node 0.8.x, and leaving them blank
20:18 < chilts> oh ok, I'm not sure what else to try then
20:19 < chilts> sounds like you're on to it though
20:19 < draginx> superjoe: Error: Cannot find module '/Users/daniel/Fracture/pro/app.jks' <-- why the hell is it trying to get .jks? O-o
20:20 < superjoe> draginx, can you give me more context?
20:20 < draginx> superjoe: I guess my app crashed and I didnt type in naught stop
20:21 < superjoe> draginx, if your app crashes naught restarts it
20:21 < draginx> i see
20:21 < superjoe> that's a feature :)
20:21 < superjoe> draginx, typically you would use naught in production, not in development
20:25 < Fryck_> How cani "reresh" the Express project dependencues ? i added "mongoose" module in pakacge.json, but npm install in the project directory add nothing
20:26 < plato> hey all I just built node on an Amazon EC2 micro instance
20:26 < superjoe> Fryck_, pastebin your package.json and the command you used to npm install
20:27 < superjoe> plato, congratulations
20:27 < nathan7> Fryck_: generally you add things to package.json with a command like npm install --save mongoose
20:27 < chilts> plato: cool ... took about 30-40 mins I guess?
20:27 < plato> superjoe: thx. i was wondering how to get it into my path but realized i forgot make install
20:27 < plato> bout that
20:28 < Fryck_> thanks nathan7 you're right ;)
20:29 < Fryck_> Someone use MongoDB for big project ? :)
20:30 < jaha> how do I figure out which user npm is using programmatically?, when i try to npm.commands.install() it doesnt seem to have the correct permissions
20:30 < shanimal> npm question... As a front end developer, I would like to be able to use "npm update lodash" is npm just for nodejs libraries or can it update other http://cdnjs.com/ libaries as well?
20:30 < superjoe> jaha, you could put "scripts": {"test123": "whoami"} in your package.json
20:30 < superjoe> jaha, and then run `npm run test123`
20:31 < opus_> is it possible to write a single page app with socket.io and jquery, where the server can create new html elements and they are drawn on the client?
20:32 < superjoe> opus_, yes but you'll want to let the client handle creating new html elements
20:32 < opus_> ok, is that because of latency? 
20:33 < superjoe> because it makes more sense that way. if you want to optimistically predict actions, for example, the client will already need to know how to render things
20:33 < nathan7> Plus, serverside computing power has a cost.
20:33 < nathan7> Clientside computing power is free.
20:34 < opus_> well, i wanted to do this just to learn and develop. Then, somehow take a snapshot of the DOM and save it for the real app
20:35 < superjoe> opus_, you can do whatever you want
20:35 < superjoe> but you're not going to get help from people doing it a way that doesn't make sense
20:37 < rauchg> i agree with superjoe as far as the approach goes
20:38 < jaha> superjoe: cant get that far, npm seems to fail trying to "mkdir node_modules" when i use npm.commands.install() from within a node process
20:39 < superjoe> jaha, my idea does not require a node_modules folder or executing npm install
20:42 < jaha> superjoe: i misunderstood, got it, however it is showing me the correct user, and idea as to why i cant access the node_modules folder or why it is trying to "mkdir" when the folder already exists
20:42 < jaha> any idea*
20:43 < superjoe> jaha, pastebin your package.json and the command you're trying to run
20:43 < superjoe> and the output you get
20:49 < jaha> superjoe: https://gist.github.com/3895346
20:50 < superjoe> jaha, why are you trying to do it programatically?
20:52 < jaha> superjoe: its a function of the app, it will check for an installed NPM (all private) and install it if the version differs, i tried it this way but I suppose I could spawn a child process to run the console commands
20:52 < jaha> but it makes more sense to keep it this way to fit nicely into the JS workflow
20:52 < superjoe> I see
20:53 < superjoe> jaha, sorry I led you on - I thought you were having trouble with the CLI.
20:53 < jaha> :)
20:54 < jaha> this works on my local dev (OSX), but not production (Linux), it seems like a permission error but cant figure out how to debug
20:58 < thomasd_> when you pass messages inbetwan processes are they live objects or are they sterilized?
21:02 < jaha> superjoe: also, the npm install works over CLI, just not programatically
21:02 < superjoe> gotcha. yeah sorry I haven't messed with that.
21:03 < thomasd_> is the ubuntu default node package up to date
21:04 < nathan7> thomasd_: they're serialised afaik
21:05 < thomasd_> if that's the case i'll probably pas the data by myself through pipes
21:05 < superjoe> I think this guy is trolling...
21:06 < thomasd_> why do you say that?
21:06 < thomasd_> why do you say that
21:09 < draginx> anyway to make packagae.json install an npm globally?
21:09 < draginx> so I can just deploy and do npm install and everything will work as expected?
21:09 < chilts> draginx: npm install -g package will install a package globally
21:10 < draginx> chilts: right I get that but I mean for package.json
21:10 < chilts> but you're talking about installing stuff from package.json globally ... dunno if you can do that
21:10 < chilts> yeah
21:10 < jaha> thomasd_: yes, its up to date
21:11 < superjoe> draginx, you don't want to install things globally
21:11 < draginx> superjoe: actually I want to install ur npm globally :P
21:11 < draginx> naught ^
21:11 < superjoe> draginx, try something like this: https://github.com/superjoe30/groovebasin/blob/master/package.json
21:12 < superjoe> draginx, if you put things in "scripts" then you can use locally installed binaries
21:12 < draginx> whats coke build? O_o
21:13 < draginx> oh coco?
21:13 < superjoe> yeah.
21:13 < therealkoopa> Would the best way to get turn this into an array of all quux be to use map reduce? https://gist.github.com/c966f781e4804fc5b3f7
21:13 < draginx> superjoe: this doesnt show me how I can install something globally....
21:14 < draginx> unless i make a new script and call it like "global_build" ya?
21:14 < draginx> and then have git post-hook-receive just execute npm global_build
21:15 < superjoe> draginx, if you put things in "scripts" in package.json, then you can use `npm run <script>` and that script has environment variables such that all your local packages are installed.
21:16 < draginx> ahhh awesome thanks :D
21:18 < superjoe> np
21:32 < tnorris> has anyone done development using the `--harmony` flag?
21:34 < superjoe> tnorris, what's the question
21:35 < tnorris> superjoe: if anyone has found advantage to start using any of the ES6 spec now, or whether they think it's worth waiting until it's standard part of the v8 engine.
21:36 < etcetera> wat, es6 is now in some sort of beta?
21:37 < tnorris> etcetera: if you run `node --harmony` then you can get access to things like Set and WeakMap.
21:38 < etcetera> heh, work in progress.
21:38 < LouisT> hello
21:38 < superjoe> hot damn! I want to use Set
21:38 < superjoe> it seems safe to rely on right?
21:38 < superjoe> it's not like the features will ever be reverted
21:38 < tnorris> superjoe: implementation in stable, and won't be removed.
21:39  * superjoe embraces the future
21:39 < tnorris> lol. here's an article explaining it all: http://dailyjs.com/2012/10/15/preparing-for-esnext/
21:40 < othiym23> as a module author, I'm not gonna be able to use --harmony until it's the default
21:40 < superjoe> that makes sense
21:40 < othiym23> and even then I'll probably wait until a couple major versions of Node have shipped with those features enabled
21:40 < othiym23> I'm still running into people stuck on 0.4
21:41 < othiym23> it's easy to forget how fast Node moves relative to most dev environments ;)
21:41 < superjoe> I wish there were a mode where variables were block scoped without using `var` and you'd have to say 'nonlocal' or something 
21:41 < superjoe> how can you get stuck on 0.4?
21:41 < niggler> duckduckgo
21:41 < niggler> i have no clue why, but DDG points to 0.4
21:41 < superjoe> they must have a fuckton of code
21:42 < othiym23> interfaces in the standard library changed a bunch between 0.4 and 0.6
21:42 < niggler> http://duckduckgo.com/?q=nodejs+process
21:42 < niggler> magic box links to
21:42 < niggler> http://nodejs.org/docs/v0.4.7/api/all.html#process
21:42 < othiym23> and there were lots of resources available to dev the app originally and not so many to maintain it
21:42 < anarchist> anyone have an idea for the one node app to rule them all?
21:42 < othiym23> anarchist: npm install hoarders
21:43 < othiym23> make sure you have a couple TB of free disk space and plenty of time
21:43 < tnorris> superjoe: start with `node --use-strict --harmony` and try the following: for (let i = 0; i < 3; i++) console.log('i: ', i); typeof i;
21:44 < othiym23> tnorris: don't you also need --harmony_typeof for that last bit?
21:44 < superjoe> othiym23, --harmony turns on all the features
21:44 < superjoe> or so I just read
21:44 < aandy> whatever happend to while (true) :(
21:44 < othiym23> superjoe: read again ;)
21:44 < tnorris> othiym23: only if you want to use the typeof spec, but that's subject to change. so i usually leave it out.
21:44 < tnorris> superjoe: --harmony doesn't enable es6 typeof. the spec is incomplete.
21:45 < superjoe> my bad
21:45 < othiym23> or, in that case, the spec was rejected
21:45 < othiym23> I need a little rwaldron in a box I can open up to ask questions about where stuff is with TC39
21:46 < superjoe> wow this is super nice!
21:46 < othiym23> following the mailing list is more time than I have for Harmony right now
21:47 < othiym23> Domenic Denicola's presentation on promises and coroutines has some really interesting stuff towards the end on using ES6 generators with coroutines: http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript
21:47 < Trindaz> a question for the node pros. My node.js app never completes. Just sits there after finishing the final callback doing nothing - how can I debug to find out more? I've already tried webstorm to no avail. What can cause a node.js app to just sit there spinning its wheels?
21:47 < anarchist> othiym23: i don't get the hoarders joke. what's in it?
21:47 < othiym23> anarchist: everything
21:47 < anarchist> "everything" but what
21:47 < niggler> anarchist: everything
21:47 < tnorris> othiym23: lol, no kidding. I have hundreds of unread emails from that mailing list.
21:47 < niggler> look at package.json
21:48 < othiym23> Trindaz: after the last line of your program, console.error(process._getActiveHandles()) will show you what's left running
21:49 < othiym23> I guess I do have a rwaldron in a box, because he's pretty responsive on the twitters
21:49 < MI6> joyent/node: Ben Noordhuis v0.8 * 28b0cc0 : Revert "Disable OpenSSL UI"  This reverts commit 1c88c3b3b56c6047180e116c - http://git.io/dzyK9A
21:49 < Trindaz> thanks othiym23 but Object #<EventEmitter> has no method '_getActiveHandles'
21:49 < othiym23> anarchist: you want a more specific answer, ask a more specific question ;)
21:49 < Trindaz> i'm on node.js 6.14 if that makes a difference
21:49 < othiym23> Trindaz: yeah, it does, that method is 0.8+ only
21:49 < Trindaz> what else can i try?
21:50 < othiym23> Trindaz: in general, if you have any setTimeout or setInterval handlers that you or a module created, Node will keep running
21:50 < othiym23> so look for those, and make sure you call clearTimeout or clearInterval where necessary
21:50 < Trindaz> none of those, but maybe some libs that i have referenced are using them
21:50 < anarchist> othiym23: it's missing some things i need. is there a more complete one?
21:50 < Trindaz> i can just upgrade
21:50 < othiym23> also, if you have a network listener up and running, you'll need to close it before Node will exit of its own volition
21:51 < othiym23> so if you're running an Express / Restify / http app, you'll need to call close() on the listener
21:51 < othiym23> anarchist: guess you'll need to mirror npm and GitHub onto your laptop,then
21:51 < anarchist> othiym23: k
21:52 < othiym23> probably more space-efficient than installing hoarders anyway
21:52 < othiym23> Trindaz: if you just want the process to quit and don't care about clean shutdown, you can call process.exit()
21:53 < Trindaz> thanks, sounds a bit risky tho. I just discovered n. how awesome for version management.
21:53 < othiym23> Trindaz: in general, though, it's worth figuring out what it takes to get your app to shut down cleanly and then factor that out into a function somewhere
21:53 < Trindaz> exactly
21:53 < othiym23> because you can then stick it on a SIGINT listener and get clean shutdown from ctrl-c, which is a win
21:53 < othiym23> make sure you get the version of n that doesn't nuke your /usr/local ;)
21:54 < rwaldron> othiym23 what's up?
21:55 < othiym23> rwaldron: lol I was just mentioning your mighty oracular powers when it comes to the state of play with TC39
21:55 < othiym23> rwaldron: nothing specific
21:57 < MI6> joyent/node: Ben Noordhuis v0.8 * 1205734 : configure: turn on VFPv3 on ARMv7  Fixes a V8 build error caused by missi - http://git.io/fQUd_w
21:58 < rwaldron> othiym23 oh... word
22:01 < stonecobra> anyone know the best way to look for leaks in a node program?  Is http://dtrace.org/blogs/bmc/2012/05/05/debugging-node-js-memory-leaks/ still the state of the art?  I am trying to get v8-profiler to work in 0.8.11 with not a lot of success, so looking for any other options
22:01 < MI6> joyent/node: Nathan Rajlich v0.8 * cca15e8 : test: disable global variable check for "test-repl-options.js"  Previousl - http://git.io/Sw8O0g
22:02 < bradleymeck> anyone good with windows, in particular lots of exp with "runas"
22:02 < GtoXic> Hiya guys
22:03 < GtoXic> I was given https://gist.github.com/579c373655e8f805ff8c yesterday but I seem to be getting an error telling me postdata isn't defined
22:03 < GtoXic> (at sendResponse (/root/express/test.js:26:25)
22:03 < GtoXic> )
22:04 < GtoXic> 25:25*
22:08 < zane> Is doing a var tmp = require('my_module'); within code (not at the top of the file, but rather scoped inside a function) a bad practice, eg, does it increase memory overhead by re-importing the module etc.?
22:08 < Trindaz> othiym23 little help: how do I make sense of a handle objects? Some are obvious, with values reffering to "jsdom" so that's obviously where the outstanding task comes from, but others have much more vanilla looking keys
22:09 < MI6> joyent/libuv: Hiroaki Nakamura master * 36b1e1a : test: change 10e8 to 1e9  It is clearer and used everywhere else. - http://git.io/j1f_1w
22:10 < Trindaz> little help @othiym23?
22:13 < ChrisPartridge> zane: if it has already been required, it will come from the module cache - otherwise, afaik, it will be a synchronous call
22:13 < AttackingHobo> Hello, I am trying to set up a socket server in node.js for use with flash. I have it working for 1 client. But when I add a second client it gets all the data piped to it
22:14 < othiym23> stonecobra: you're gonna want to take a look at https://github.com/c4milo/node-webkit-agent
22:15 < othiym23> stonecobra: it's like node-inspector, only it *only* does profiling and heap introspection
22:15 < othiym23> Trindaz: you just kinda gotta eyeball 'em and see if they look like setTimeout handlers or network listeners or what
22:16 < agente0> hi, I would like to use the JSV json-schema validation (https://github.com/garycourt/JSV) inside a static html page. I need a way to handle the node.js "require" its using.  I've been searching around but I haven't found a working solution yet. Has anyone done this before? cheers
22:16 < Trindaz> yup ok thanks othiym23. just when i thought the problem was about to solved, the real work just begins. that's what i get for using half-baked open source projects in my app
22:17 < othiym23> Trindaz: process._getActiveHandles()[0].constructor.toString()
22:17 < stonecobra> othiym23: trying it now
22:18 < othiym23> unless the handle was constructed from native code, that should give you the constructor
22:19 < Trindaz> NICE! I can search for those code snippets. thanks othiym23
22:20 < othiym23> Trindaz: you can also just use the constructor object directly (it's a function), and try constructor.name
22:20 < AttackingHobo> Can I get some help or some pointers on setting up a multiplayer socket server?
22:23 < superjoe> AttackingHobo, try the socket.io docs
22:26 < AttackingHobo> superjoe: I am using as3 and was wondering if there was a way to just broadcast the received data to all clients
22:27 < AttackingHobo> without using any other moduals
22:29 < CoverSlide> so you want something to connect to your flash game?and be able to push data to it? you'd have to figure something out with flashsockets, or just use socket.io and expose some stuff to ExternalInterface
22:31 < AttackingHobo> CoverSlide: I have a semi working thing just using require('net') and a few events
22:31 < AttackingHobo> but only the latest client gets all the data sent to it
22:32 < AttackingHobo> I just want to figure out how to send data to all the clients instead of just the latest one, is there no way to do that without using socket.io?
22:32 < ChrisPartridge> AttackingHobo: gist some code
22:34 < AttackingHobo> ChrisPartridge: http://hastebin.com/sopovetifo.js
22:35 < CoverSlide> AttackingHobo: line 5, clients.fd is undefined
22:36 < CoverSlide> i think you mean sock.fd
22:37 < LouisT> wut chart.apis.google.com uses an invalid security certificate.
22:37 < LouisT> er, wrong window
22:37 < ChrisPartridge> CoverSlide: I'm glad you spotted that :)
22:37 < AttackingHobo> CoverSlide: thanks, but the same issue persists
22:37 < AttackingHobo> I had done some edits, and reverted, but not all the way it seems
22:37 < ChrisPartridge> AttackingHobo: are the connections staying open? 
22:37 < AttackingHobo> yes
22:37 < AttackingHobo> data from all the clients is being pumped into one
22:38 < AttackingHobo> actually I am not sure if all the old clients are staying open
22:39 < AttackingHobo> ChrisPartridge: Ok. They do seem to be staying open
22:46 < ChrisPartridge> AttackingHobo: sock.fd is still undefined
22:47 < AttackingHobo> ChrisPartridge: what are you debugging this with?
22:47 < ChrisPartridge> I just changed clients = {} to clients = [], pushed new connections to it, and changed the code to iterate the array, works fine
22:47 < ChrisPartridge> AttackingHobo: console.log
22:47 < ChrisPartridge> :)
22:47 < AttackingHobo> ah ok
22:47 < AttackingHobo> what do you push into clients?
22:47 < AttackingHobo> sock?
22:47 < AttackingHobo> or what?
22:48 < ChrisPartridge> the socket connection
22:48 < AttackingHobo> ChrisPartridge: I love you
22:48 < ChrisPartridge> that's what she said
22:59 < Tezzle> hello?
22:59 < Tezzle> could someone lend me a quick hand installing node on a system running Python 3.3?
22:59 < Tezzle> ive installed Python 2.7 temporarily but cant get it to work
22:59 < CoverSlide> Tezzle: you have two options
23:00 < Tezzle> yes sir?
23:00 < CoverSlide> one is to use sed to convert python to python2 in all the source files
23:00 < Tezzle> i tried setting my vars like it said
23:00 < Tezzle> no luck
23:00 < CoverSlide> the other is to symlink python2 to python in your path
23:01 < Tezzle> ya cause python2 is currently linked to my 3.3 install
23:01 < CoverSlide> like I usually have a $HOME/bin directory in my PATH
23:01 < Tezzle> hm
23:01 < CoverSlide> and I symlinke $HOME/bin/python to /usr/bin/python2 
23:01 < Tezzle> so symlink to the 2.7 install i just put on?
23:01 < CoverSlide> yes
23:02 < Tezzle> i just used make in itss directory, i didnt make it global or anything
23:02 < Tezzle> will that matter?
23:02 < CoverSlide> ...? umwhat?
23:02 < CoverSlide> global?
23:02 < Tezzle> sry im not very good at this stuff
23:03 < Tezzle> i downloaded the python 2.7 build onto the root
23:03 < Tezzle> then i config
23:03 < Tezzle> then make
23:03 < CoverSlide> umm
23:03 < Tezzle> so now i have the 2.7 interpreter but its in the 2.7 directory on the root, will that be a problem? does it need to be global?
23:03 < Tezzle> i just made it locally in that directory is all, prolly not the best idea
23:04 < Tezzle> heh
23:04 < Tezzle> well ill try symlinking it
23:04 < CoverSlide> how about this
23:04 < superjoe> the ubuntu release coming out in 3 days has 0.6.19 :-/
23:05 < CoverSlide> run this command `python(){/path/to/python2 $@}`
23:05 < CoverSlide> of course replace /path/to/python2 to the python2 executable
23:05 < CoverSlide> and then try running make ... etc
23:06 < ChrisPartridge> superjoe: bleeding edge! 
23:06 < ChrisPartridge> ;-)
23:06 < Tezzle> i dont want to break the 3.3 install is all
23:07 < othiym23> Ubuntu isn't really built to deal with beta software
23:07 < superjoe> true
23:07 < othiym23> that said, chrislea's PPA does a pretty good job of tracking releases
23:07 < superjoe> yeah I use chrislea's PPA
23:07 < CoverSlide> or just use git
23:07 < superjoe> I'm trying to get a node.js app into ubuntu's package manager though
23:07 < CoverSlide> yup that sounds like a good solution
23:07 < Tezzle> hm that call didnt work
23:07 < othiym23> CoverSlide: as a devops person, I want a build that was blessed by somebody other than me
23:08 < Tezzle> just have it on my root
23:08 < Tezzle> as such "python(){/Python-2.7/python $@}"
23:08 < superjoe> node 0.6.19 has v8 version 3.6.6.25
23:08 < superjoe> anyone know if that has --harmony and generators?
23:08 < CoverSlide> Tezzle: ... you have /Python-2.7 in your root directory?
23:08 < Tezzle> like i said before yes
23:08 < Tezzle> i was just putting it there temporarily to install it real quick
23:08 < CoverSlide> or do you not know the difference between absolute and relative urls
23:08 < Tezzle> no its on my root
23:09 < CoverSlide> are you on windows?
23:09 < Tezzle> i know that much thankfully
23:09 < Tezzle> mac
23:09 < Tezzle> linux server
23:09 < Tezzle> centos to be specific
23:09 < CoverSlide> ... and /Python-2.7/python is the executable file ... ?
23:10 < Tezzle> that runs python 2.7 yes
23:10 < othiym23> superjoe: https://gist.github.com/3896231
23:10 < Tezzle> or did you mean the make?
23:10 < Tezzle> i get "-bash: syntax error near unexpected token `{/Python-2.7/python'"
23:11 < superjoe> thanks othiym23.
23:11 < Tezzle> was that to be run from within my main python?
23:11 < Tezzle> or in the linux command line?
23:12 < othiym23> superjoe: np
23:13 < CoverSlide> ok nevermind, i guess you can't do that with bash
23:13 < Tezzle> so /Python-2.7/python will run 2.7 for instance and just "python" will run 3.3
23:13 < CoverSlide> Tezzle: ok, do this: export PATH=/Python-2.7:$PATH
23:13 < Tezzle> so i guess i'll try symlinking my "which python2">
23:13 < Tezzle> ?
23:13 < CoverSlide> and do make, etc
23:14 < Tezzle> do i need to remake?
23:14 < CoverSlide> yeah sure sounds good to me
23:14 < Tezzle> idk if i should change our PATH env var
23:14 < Tezzle> someone else set it up and i dont want to break it
23:15 < Tezzle> sorry
23:15 < CoverSlide> it only changes it for your current session
23:15 < CoverSlide> just do that within the shell
23:15 < Tezzle> im logged in as root atm
23:15 < CoverSlide> yes
23:15 < Tezzle> aite
23:15 < CoverSlide> the current shell session, it won't change anyone else's
23:16 < Tezzle> so now call make again within the 2.7 dir?
23:16 < CoverSlide> call make in the node dir
23:17 < Tezzle> i didnt even get config to work yet
23:17 < CoverSlide> ok do configure in the node dir then
23:17 < Tezzle> ls
23:17 < Tezzle> sweet
23:17 < Tezzle> seems to be working now
23:18 < Tezzle> i'll let you know once config is done, then on to make
23:18 < Tezzle> k now make
23:18 < Tezzle> you are a god amongst programmers sir
23:18 < Tezzle> though beware, Apply may sue your ass to oblivion for your handle
23:18 < Tezzle> ^__^
23:18 < Tezzle> *Apple
23:19 < Tezzle> seems it was missing tokenizier_pgen, printgrammar and pgenmain
23:19 < Tezzle> is that a problem?
23:20 < CoverSlide> did you get a python error?
23:20 < Tezzle> it was gcc in the make
23:20 < Tezzle> missing those three dirs
23:20 < CoverSlide> never seen those before
23:21 < Tezzle> gcc: Parser/tokenizer_pgen.o: No such file or directory gcc: Parser/printgrammar.o: No such file or directory gcc: Parser/pgenmain.o: No such file or directory make: *** [Parser/pgen] Error 1
23:21 < Tezzle> i'll just hope for the best
23:22 < CoverSlide> hmm ..
23:22 < Tezzle> how can i test?
23:22 < Tezzle> o i need to do make install still
23:23 < Tezzle> crap those missing dirs are throwing errors
23:23 < Tezzle> em
23:23 < Tezzle> im gonna try a clean dl
23:27 < Tezzle> seems to be running differently this time
23:27 < Tezzle> maybe its better? idk we'll see
23:27 < Tezzle> >__<
23:34 <@Nexxy> mscdex, 
23:35 < Tezzle> k hopin to worked
23:36 < Tezzle> YES!
23:36 < Tezzle> thank you again Coverflow
23:36 < Tezzle> Coverslide
23:36 < Tezzle> see what I mean about Apple?
23:36 < CoverSlide> icic
23:36 < Tezzle> haha
23:37 < Tezzle> aite i think ill save off updating mongo till tomorrow
23:37 < Tezzle> tnx again
23:37 < Tezzle> should i keep 2.7 installed or does it not matter now?
23:37 < CoverSlide> if you want to update it
23:37 < Tezzle> cheers
23:38 < CoverSlide> although there are ways of having python2 and 3 on the same system, and not putting them on root
23:38 < CoverSlide> i know debian and arch can do it
23:38 < CoverSlide> i'm sure fedora can too
23:38 < CoverSlide> not sure how centos would do it though
23:41 < Tezzle> its possible
23:41 < Tezzle> there's another version oh here
23:41 < Tezzle> 2,4
23:41 < Tezzle> 2.4
23:41 < Tezzle> the guy who set it all up is out for the week though so i'll just leave it on root for now
23:41 < Tezzle> seems my old scripts are up and running 
23:41 < Tezzle> thanks
23:41 < Tezzle> all this just to install mongoose
23:42 < Tezzle> gah
23:42 < Tezzle> later and thanks
23:53 < EuroNerd> I'm new to node and have a control flow riddle. A browser will ask node to do a series of ops: search sth in db, verify, maybe update, return result. It's a series of ops, so sounds like Step or Async would be good, but it can take various paths, depending on conditions, so doing Step(fn1, fn2, fn3) is not good enough. How do I avoid a complete mess?
23:54 < Aria> Break it down into groups without variations.
23:54 < EuroNerd> what does that mean?
23:54 < Aria> function searchSthInDb, function doTheRest
23:55 < Aria> in doTheRest, check a condition, then invoke the next subchain.
23:55 < Aria> I'd draw the paths, taking note of branch points. Every branch point is probably a stop in the chain. 
23:55 < Aria> Simplify what you can.
23:55 < EuroNerd> ok
23:59 < EuroNerd> and BTW, this is probably a silly question, but which is better, Step or Async?  ;)
23:59 < Aria> Neither.
--- Log closed Tue Oct 16 00:00:05 2012
