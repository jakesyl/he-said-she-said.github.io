--- Log opened Sun May 19 00:00:21 2013
00:08 < echo|> mscdex: There could be way more cool node shirts than there are. Someone should speak to someone about that.
00:16 <@isaacbw> somone should always speak to someone about something
00:20 < ningu> I still think there should be a node t-shirt in latin that says nodus iavascriptiensis
00:22 < bubo> lol
00:34 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:57 < jtomasrl> how should i handle db connections? one per app with a connection pool, one per user or one per db query?
01:00 <@isaacbw> it's usually always better to have a pool
01:03 < astropriate> why do developers feel the need for displaying idiotic errors like this: "Error: CastError: Cast to number failed for value " "
01:03 < astropriate> ok, but WHERE?!?!
01:03 < astropriate> give us the model property for the love of all that is sane
01:04 < astropriate>   </vent>
01:04 <@isaacbw> does it not give you a stack trace?
01:06 < astropriate> isaacbw, stack trace shows me where i called save() on the model, other than that not much unless i dig through 200 mongoose source files
01:06 < astropriate> even then that wouldn't help actually
01:06 < astropriate> because its  anumber but which one
01:13 <@isaacbw> astropriate: it's a pretty explanatory error. You're trying to save a string to a number field and ' ' can't be cast to a number in a meaningful way
01:30 < astropriate> isaacbw, are you a bot?
01:57 < ningu> also, if you know what line of your code is causing hte error you can console.log the offending mongo document
02:39 < astropriate> i have a number that i'm getting from mogoose
02:39 < astropriate> it is shown to be of type Object for some reason...
02:39 < astropriate> how can I get it to be of type Number
02:40 < ningu> astropriate: the error showed it as a string with two spaces in it
02:40 < ningu> what are you using, typeof?
02:40 < ningu> to detect the type
02:40 < astropriate> ningu, that error is seperate
02:40 < astropriate> and yes
02:40 < astropriate> i'm using typeof
02:41 < astropriate> hmm
02:41 < astropriate> using instanceof shows that it is a number :\
02:41 < astropriate> ok
02:41 < astropriate> why does typeof shows the it to be of type object
02:42 < astropriate> but if you do  typeof 4564    it shows Number
02:42 < ningu> astropriate: I don't know what this thing is or how you got it
02:44 < astropriate> my dislike of mongoose grows by the day
02:44 < astropriate> no offense to the devs :0
02:44 < astropriate> :) *
02:51 < ericelliott> Anybody else seen mongo get into funny re-election infinite loops?
02:51 < ningu> I didn't know mongo was a political candidate
02:51 < ericelliott> Sharding mongo has been a battle under stress
02:52 < ericelliott> ningu: apparently electing a master is a political process...
02:52 < ericelliott> ningu: Maybe I should try bribes. ;)
02:52 < ningu> hehe
02:52 < ningu> I've never done anything distributed with mongo
02:52 < ningu> actually, not with any db
02:52 < ericelliott> it's loads of fun
02:53 < ningu> for one of my projects i've reverted to postgres because I prefer the more robust data model
02:53 < deoxxa> ericelliott: got an arbiter?
02:53 < ningu> and there isn't that much data to deal with so it's ok
02:57 < ericelliott> deoxxa: I don't know the answer to that question off the top of my head. I didn't set it up.
02:57 < ericelliott> deoxxa: I'll be sure to bring it up. Thanks for the suggestion.
02:58 < deoxxa> ericelliott: yeah mongo really doesn't like rebalancing with an even number of nodes
02:58 < ericelliott> deoxxa: However, we have been working with the 10gen team to resolve our issues, so I'm sure it has been mentioned before. =)
02:58 < deoxxa> ericelliott: so you throw an arbiter in the mix and it'll usually push it out of a tie condition
02:58 < deoxxa> ah
02:58 < deoxxa> well
02:58 < deoxxa> yeah they know the deal better than i do :P
02:59 < ericelliott> deoxxa: At this point, anything that might have been overlooked may be useful. =)
03:00 < ericelliott> deoxxa: I've mostly been ducking and running for cover when our mongodb woes have the alarm bells ringing. ;)
03:00 < deoxxa> lol
03:01 < ericelliott> deoxxa: I think we're just trying to throw more load at it than it can handle.
03:03 < ericelliott> dear Sauce Labs: please stop timing out the IE instances so quickly. IE is just slow, okay? - a fan
03:08 < ericelliott> Hurray! All my unit tests pass! Even in IE8! Yes, you can port modules from Node to Browserify/UMD and make them work in IE8.
03:09 < ericelliott> Now my libs will be everywhere http://images2.wikia.nocookie.net/__cb20100702150415/simpsons/images/6/6a/Mr_Burns_evil.gif
03:16 < ericelliott> is there a way to save all my current node_modules as dependencies?
03:17 < sinclair|nz> anyone using go?
03:18 < sinclair|nz> go + appengine seems really good
03:19 < deoxxa> ericelliott: npm shrinkwrap
03:19 < sinclair|nz> deoxxa: thoughts on go and appengine?
03:20 < deoxxa> i've never used go, but i've read a bit about how it works and it seems like it's a very naive implementation of some very interesting concepts
03:20 < deoxxa> appengine is just a lol
03:20 < sinclair|nz> ive used python + appengine for three projects in the past, and it was rather pleasant 
03:20 < sinclair|nz> deoxxa: lol in what regard?
03:24 < sinclair|nz> deoxxa: anyway, i like having app engine as a option for scenarios when load cannot be known before hand, as it just auto scales out
03:26 < sinclair|nz> deoxxa: as a platform, its not all that bad, its a bit of vendor lock in, especially if you leverage things like google compute engine and other such wacky things, but as far as scalable cloud platforms go, App Engine is a big win
03:28 < sinclair|nz> deoxxa: however, i think Go might be a better fit for that platform, over say Python and Java
03:28 < mmalecki> I bet google spent lots of time optimizing appengine for go
03:29 < sinclair|nz> mmalecki: its still experimental 
03:29 < mmalecki> deoxxa: yo
03:29 < sinclair|nz> mmalecki: i see they run PHP nowadays
03:29 < mmalecki> deoxxa: how's it going?
03:29 < mmalecki> sinclair|nz: oh, really?!
03:29 < mmalecki> that's just funny
03:30 < sinclair|nz> mmalecki: https://developers.google.com/appengine/docs/php/
03:30 < deoxxa> sinclair|nz: i think appengine scared me off mainly because of the lock-in - it's a platform through and through, not just infrastructure
03:30 < deoxxa> mmalecki: sup! i'm well, how about you?
03:30 < sinclair|nz> deoxxa: well, infrastructure is something id rather not deal with
03:30 < mmalecki> yeah, same stuff scared me off
03:31 < mmalecki> deoxxa: I'm good too, where's deoxxa-land these days?
03:31 < deoxxa> melbourne! :>
03:31 < sinclair|nz> in the three instances i when with app engine, it was all for high traffic, simple stuff, and app engine was such a big win
03:31 < sinclair|nz> especially in the cost department, and that was a few years ago
03:32 < mmalecki> deoxxa: nice one. is it warm?
03:32 < deoxxa> by polish standards? extremely!
03:32 < deoxxa> haha
03:32 < deoxxa> it's 9 degrees here at the moment
03:32 < sinclair|nz> mmalecki: i think PHP on appengine is incredibly lame, why no C# / Mono?
03:32 < mmalecki> deoxxa: it's 20 degrees here at the moment :)
03:32 < mmalecki> sinclair|nz: yeah, PHP is a totally different model
03:33 < mmalecki> short-lived process and such
03:33 < Aria> Works nicely on app engine because of that.
03:33 < mmalecki> it's a weird decision from business point of view too
03:33 < sinclair|nz> mmalecki: well, AppEngine can run wordpress now
03:34 < mmalecki> Aria: does it? I'd expect long-lived daemons to be more optimal due to process spawn overhead
03:34 < sinclair|nz> mmalecki: and i think that App Engine sucks in the off the shelf solution department, so thats a reasonable win for them, but its still PHP
03:34 < Aria> PHP doesn't make you spawn processes for each request
03:34 < Aria> PHP just makes you write scripts that don't expect to outlive the request.
03:34 < Aria> Which means you have fewer assumptions about longevity built in to things that use it.
03:34 < mmalecki> Aria: true too :)
03:34 < sinclair|nz> Aria: that is a good fit for App Engine then
03:34 < Aria> Exactly.
03:34 < mmalecki> deoxxa: I might drop by one day!
03:35 < sinclair|nz> Aria: i still think they should get mono up there
03:35 < mmalecki> deoxxa: I'm planning to do solid amount of travelling after I'm done with some stuff
03:35 < mscdex> node.js rules!
03:35 < sinclair|nz> mscdex: not really
03:35 < mscdex> yes really!!
03:36 < sinclair|nz> nah, its just another thing
03:36 < Aria> Maybe. But mono app servers don't have those restrictions. So apps will have to be ported to GAE/Mono if such a thing starts existing.
03:36 < sinclair|nz> Aria: same could be said for Java up there tho
03:36 < mscdex> java sucks
03:36 < sinclair|nz> mscdex: Java does suck
03:36 < sinclair|nz> irrelevant tho
03:36 < mscdex> never irrelevant!
03:37 < mscdex> anyone know of a nodejs solution that does html to pdf using the likes of cairo and such?
03:37 < Aria> Exactly. And that's a major limit of GAE.
03:38 < sinclair|nz> Aria: its limitations are also its strength
03:38 < sinclair|nz> Aria: with so many restrictions, the thing scales out like nothing else available 
03:39 < mmalecki> to be fair, it's google, they know scale
03:39 < mmalecki> so those restrictions might be just irrelevant
03:39 < sinclair|nz> mmalecki: well, you can do anything in app engine you can do anywhere else, you just have to work a bit harder is all
03:40 < sinclair|nz> other things let you do whatever, then you suffer down the track with scale, app engine forces you into a corner and says "if you are going to do this, do it right"
03:41 < sinclair|nz> which results in some often counter intuitive approaches to common things 
03:41 < Aria> sinclair|nz: Not gonna dispute that!
03:41 < sinclair|nz> but the result is always fantastic (and cheap)
03:42 < sinclair|nz> if anything tho, spending some time with App Engine will make you a better programmer as you come away thinking about scale is a whole new way
03:48 < levilewis> what are some good REST documentation/testing applications? I've used stuff like postman for chrome. Is there anything good that can be auto-generated based on expressjs projects?
03:54 < mbogo> What is the format of the result from a successful call to cradle.view()?
03:55 < AAA_awright> levilewis: Well REST is a type of protocol, of which HTTP is one
03:56 < levilewis> right… looks to document a web service. Tools like this apiary.io
03:56 < levilewis> http://apiary.io/ sorry
04:00 < boogyman> levilewis: there's a channel for #rest
04:01 < mikehaas763> I'm on ubuntu, where do modules from npm get installed to if you don't specify -g ?
04:02 < mikehaas763> I thought they went in ~/node_modules but that doesn't exist
04:09 < DarkArgon> does a write stream count the bytes it has written?
04:10 < jtomasrl> im doing ab test on localhost and with -n 50 -c 10 to a mongodb find is getting stuck
04:11 < mmalecki> mikehaas763: current directory, under node_modules
04:17 < sinclair|nz> -does anyone else find writing software in node difficult?
04:18 < sinclair|nz> someone should create a web site of examples
04:18 < sinclair|nz> mmalecki: go
04:19 < jesusabdullah> I find writing software in general to be more or less difficult depending on what I am trying to write
04:20 < mmalecki> writing software isn't hard at all
04:20 < mmalecki> writing software which does what you want and does it well is hard
04:23 < jesusabdullah> lol mmalecki
04:23 < jesusabdullah> mmalecki++
04:24 < jesusabdullah> technically, writing software is easy, just copy and paste console.log("hello world") into a .js file and execute it, g2g
04:24 < jesusabdullah> haha, someone should make that a module
04:24 < jesusabdullah> require('hello-world')();
04:26 < aarobc> Where could I find some documentation on how to use socket.io with connect?
04:26 < aarobc> google is failing me.
04:27 < ioNull> https://github.com/LearnBoost/socket.io
04:28 < ioNull> https://github.com/LearnBoost/socket.io-client
04:28 < aarobc> ioNull: that covers using it with express, but not connect
04:29 < aarobc> like this: http://www.senchalabs.org/connect/
04:33 < ioNull> aarobc getServer from connect,? the same, I think..
04:34 < ioNull> var io = require('socket.io')(new Connect());
04:34 < ioNull> io.on('connection', function(socket){
04:34 < ioNull>   socket.on('event', function(data){});
04:34 < ioNull>   socket.on('disconnect', function(){});
04:34 < ioNull> });
04:35 < aarobc> oh, cool
04:39 < aarobc> ioNull: much thanks, I will try to get this to work. 
04:39 < ioNull> aarobc :) welcome
04:51 < pasha17> i am implementing websocket based application using node.js probably on heroku or aws,  my first question is which one is better? and am also wondering if sending both audio and video over websocket actually works ? any ideas suggestions would be helpful. 
04:52 < s5fs> pasha17: can't comment on heroku vs aws
04:53 < s5fs> pasha17: i've used websockets to send video (as binary) so it is possible. i'd assume audio is possible as well.
04:54 < s5fs> pasha17: also check out binary.js
04:54 < s5fs> binaryjs sorry
04:55 < pasha17> s5fs: thanks for the input, oh yes i was about to ask about binaryjs, did u used binaryjs or some other library? and if you implemented it online, which server did u used  for that purpose. 
04:57 < s5fs> pasha17: most recently we were playing with 'ws'
04:58 < s5fs> pasha17: for most hosting i'm using aws but not streaming data in production, just dorking around
05:00 < pasha17> s5fs: i was wondering about the quality actually if i send the video and audio over websocket would it be a good quality?  
05:01 < pasha17> s5fs, would it be of* a good quality, I mean
05:02 < s5fs> pasha17: it would be whatever quality you put into it, but the performance i'm not sure of. i've only done really basic proof of concept work, not production, but i'm certain there's info out there.
05:20 < pasha17> thanks s5fs , will discuss again on this later
05:57 < s5fs> pandark_: sounds good, i'll be interested to hear what your findings are
06:31 < thealphanerd> was anyone at maker  faire today?  going tomorrow?
06:31 < deepu> is any one using node email-templates on windows?
06:32 < deepu> Its failing on windows and I failed to find any documentation regarding it
06:39 < Guest96776> Does anyone know how to use cygwin make? I'm trying to learn through "Jump Start Node.js" and I just can't make it work :(
07:12 < dhzr> deoxxa, damn your candy game
09:09 < peterschmidler> I have a problem, where after a redirect the csrf middleware and the authentication middleware are not executed in the right order, and the token is not passed to the template. Can anyone have a look, please? https://gist.github.com/peterschmidler/5607153
09:11 < geNAZt> which of the middlewares redirects ?
09:12 < peterschmidler> geNAZt: the redirect is in the route
09:13 < geNAZt> are you sure that the request gets into the route and is not redirected earlier ?
09:14 < peterschmidler> Even without the redirect the token is not available at the login form
09:16 < peterschmidler> If I comment out the authentication route it works as expected...
09:16 < peterschmidler> ^ authentication middleware
09:21 < geNAZt> hmmm
09:27 < kutchbhi> any recommend method to create xml ? using  for sphinx btw
09:28 < kutchbhi> *recommended
09:30 < Havvy> kutchbhi: How complex is the XML?
09:30 < Havvy> And how much is it variating?
09:31 < kutchbhi> nvm found this : http://www.wezm.net/technical/2011/01/generating-xml-with-node-js/
09:35 < leichtgewicht> where did node version manager find this?
09:35  * leichtgewicht is being silly.
09:36 < geNAZt> leichtgewicht, :D
10:22 < dypsilon> a little something for fun: https://gist.github.com/paulmillr/2657075/
10:22 < dypsilon> not mine
10:23 < geNAZt> visionmedia <3
10:56 < sinclair|nz> geNAZt: really?
11:00 < geNAZt> yes
11:46 < maaarghk> hey, quick theoretical qustion
11:46 < maaarghk> question*
11:47 < maaarghk> If I have 4 instances of the same app running through nginx for balance, what's the best way to do socketio push updates?
11:47 < maaarghk> e.g. socket.io based live chat, client 1 posts a message, how to let the other instances know so that they can push it to clients 2,3,4..?
11:56 < maaarghk> ^-- just read about redis pub/sub
11:56 < maaarghk> seems like probably the most sensible option
12:01 < sinclair|nz> http://pastebin.com/XNaZvhF5 <-- TS does make stuff more readable
12:04 < sinclair|nz> i think its nice having annotated types, you can see at a glance whats being passed around
12:04 < r1card> How do you organize your projects so it's clear what's on the server and what's for the browser?
12:05 < sinclair|nz> r1card: me?
12:05 < r1card> Everyone :)
12:05 < sinclair|nz> r1card: put all your client / static stuff in either /public /static directory hanging off the root
12:06 < pilau> hello all, quick questions: what is the difference between node.js shortcut with green icon and node.js command prompt?
12:07 < arnorhs> pilau: icon? are you on windows?
12:07 < pilau> yes, win8 to be specific
12:07 < sinclair|nz> pilau: the icon will enter a interactive REPL
12:07 < sinclair|nz> pilau: as will running "node" at the command line
12:08 < sinclair|nz> pilau: if you run "node app.js" for example, then it will run the code inside app.js
12:08 < sinclair|nz> pilau: its recommended to start node from the command line
12:08 < sinclair|nz> pro tip, navigate to a directory with "app.js" in it, hold shift and right click on the folder window, there will be an option to "Open Command Prompt Here"
12:09 < sinclair|nz> click that, then run node.
12:09 < sinclair|nz> Windows FTW right?
12:10 < Sven_vB> windows is so fantastically easy for plumbing hobbyists!
12:10 < pilau> windows ftw.
12:11 < Sven_vB> i especially like those GUI pipes where you can send the standard GUI output from one program into the standard GUI input of any other program
12:11 < Sven_vB> (that offers one)
12:11 < sinclair|nz> Windows is tops, i don't see myself using anything else for a long time, i wish ubuntu was better, but lets be honest, its really crap. there are probably other distros out there, but i can't be arsed installing them
12:11 < maaarghk> happy with new right click menu on bottom left on screen on win8
12:11 < maaarghk> more pissed off about 1000 clicks to shut down
12:11 < sinclair|nz> and Mac is never, EVER and option
12:11 < sinclair|nz> *an
12:11 < pilau> thanks sinclair. when i open both shortcuts open a node.js command prompt
12:11 < sinclair|nz> Sven_vB: you mean, named pipes ?
12:12 < maaarghk> sinclair|nz: yeah, I agree. I like the idea of mac os... it seems sleek, nice hardware, unix. but it's also ugly
12:12 < pilau> Mac is indeed never an option, as in everything Apple, but let's not deviate :)
12:12 < maaarghk> and ubuntu is even uglier
12:12 < maaarghk> honestly... purple and brown? 
12:12 < maaarghk> anyway, yeah, OT :P
12:13 < sinclair|nz> im a big advocate for useability, and i just get held up by quirks in the Ubuntu desktop, and sticky edges drive me insane, and it somehow forget about the nvidia drivers it had, just terrible
12:13 < Sven_vB> sinclair|nz, nope those GUI pipes that automagically OCR text inside windows and paste them into other ones. however they only come with the fag edition
12:13 < Sven_vB> (the finally, a good edition)
12:13 < pilau> Oh! I realize what is the difference: The node.js shortcut is for node.exe which simply runs the node executable, while the command prompt shortcut runs the Windows command prompt in a node & npm environment :) Woohoo!
12:14 < sinclair|nz> Sven_vB: no idea what you are talking about, but i smell sarcasm
12:14 < Sven_vB> sinclair|nz, yep. click start to smell it harder.
12:15 < sinclair|nz> Sven_vB: meh, Windows pwns whatever crap you are running, use whatever you want and keep pretending its as good as what i run
12:15 < pilau> Oh no, another Windows 8 opposer
12:15  * sinclair|nz pays for his operating system, and he pays for quality
12:16 < Sven_vB> sinclair|nz, i'm not trying to pretend my ubuntu can even reach a zero on _your_ "good" metric :)
12:17 < sinclair|nz> Sven_vB: i cringe when using ubuntu
12:17 < pilau> sinclair thanks for your help
12:17 < sinclair|nz> np
12:17 < sinclair|nz> 12.04 desktop was just crusty 
12:17 < geNAZt> yes because ubuntu says you have to use it oO
12:18 < Sven_vB> sinclair|nz, i wouldn't recommend it to anyone else either :) i just like win xp, 7, and 8 even less
12:18 < sinclair|nz> geNAZt: in some instances,i do have to use it
12:18 < Sven_vB> well maybe i'd recomment it to other plumbing hobbyists
12:18 < geNAZt> well ubuntu never tells you to use a desktop 
12:18 < geNAZt> and if it tells you you can choose which one you want
12:19 < sinclair|nz> as some projects require linux dev, and not being one of those distro a week people, i use what every one else is
12:19 < sinclair|nz> geNAZt: well, as i spend the majority of my time in a terminal window, ditching the Desktop altogether wouldn't be such a bad idea
12:20 < geNAZt> in a terminal window ? on linux ?
12:20 < arsdmthe> THE PC DON'T TELL TO USE UBUNTU
12:20 < geNAZt> why do you window a terminal if you have a linux ?
12:21 < Sven_vB> so while we have win8 apologetes here :>, is there a way to get multiple windows remote-controlles at the same time? i tried searching some multi-desktop apps, but they still have only one input focus (esp. mouse pointer)
12:22 < sinclair|nz> Sven_vB: as much as i like Windows, i havent bothered to install Win8 yet, not until they let me boot to desktop
12:22 < Sven_vB> ok... maybe a win7 solution? maybe i can port that to win8
12:22 < sinclair|nz> metro works on a phone, and a tablet, not on my damn desktop
12:23 < sinclair|nz> Sven_vB: are you talking about MDI applications?
12:23 < Sven_vB> nope, it's multiple instances of one program and they don't care about each other instance
12:23  * sinclair|nz hasn't said "MDI applications" since the late 90's
12:23 < Sven_vB> ist just want to hit badgers very fast and if two badgers appear at the same time, i'd like to be able to send both of them a mouse click
12:24 < sinclair|nz> Sven_vB: you want two instances to talk to each other?
12:24 < Sven_vB> s/ist/i/
12:24 < sinclair|nz> no idea what you are trying to do
12:24 < Sven_vB> play a game very efficiently ;)
12:24 < sinclair|nz> two instances can chat to one another through named pipes
12:25 < arsdmthe> code a virus Sven_vB 
12:25 < Sven_vB> nah i don't need them to communicate, i justn eed to be able to click into multiple windows at the same time
12:25 < Sven_vB> on Ubuntu, i just give each window its own X server
12:25 < sinclair|nz> Sven_vB: metro lets you have drag windows side by side
12:26 < sinclair|nz> via some magic
12:26 < maaarghk> microsoft also hold a patent on that
12:26 < maaarghk> which is why window tiling on other OS is so messy
12:26 < sinclair|nz> maaarghk: there are worse patents, like Apples patent on anything rectangular 
12:27 < maaarghk> All of those patents are BS
12:27 < arsdmthe> lol
12:27 < maaarghk> Apple's make me laugh
12:27 < maaarghk> Like the filleted corner
12:27 < Sven_vB> you can't even file a patent complaint aganist that on us letter paper ;D
12:27 < maaarghk> which has only been in every "how to design things to look nice" book since 1950
12:27 < r1card> sinclair|nz, I have this problem.
12:28 < Sven_vB> i heard some pharaos had rectangles as the basic shapes for their pyramid blicks
12:28 < r1card> sinclair|nz, sometimes the server side is generating HTML and there's CSS/images associated with it, sometimes it's the cliet side.
12:28 < r1card> sinclair|nz, both require compilation of sorts.
12:28 < r1card> sinclair|nz, I need two sets of images/css :P
12:29 < Stumbler> sinclair|nz: Mechanical engineering has the same problem. You should see the room full of GM patents. 
12:30 < Stumbler> You can't even design a good engine these days, else you'll be breaking the law
12:30 < sinclair|nz> Stumbler: i used to get very annoyed at the marching cube algorithm 
12:31 < sinclair|nz> Stumbler: as it was patented, and i wanted to used in in all the graphics demo's i used to write in the late 90's
12:31 < arsdmthe> no one patented exponential mechanic ...
12:31 < spots> hi, is there someone who has experience with redis and nodejs?
12:32 < sinclair|nz> Stumbler: i used it anyway
12:33 < Stumbler> sinclair|nz: I would hope so.
12:33 < Sven_vB> well having windows side by side might solve some easy level where it's not that mucha problem to click sequentially instead of simultaneously. so let's move a level up. i have some instances of the garden game running, each its own window. each has a rake that i'd like to drag over a field. so is there any way on windows 7 or 8 to drag (mouse down, move 2px/wait, move 2px/wait, ..., up) simultaneously in multiple windows?
12:33 < Stumbler> sinclair|nz: God, I hope I'm never in a position where I have to choose between what works well, and what isn't privately owned XP
12:35 < sinclair|nz> Stumbler: if you code, reading licenses is part of the job description
12:35 < r1card> sinclair|nz, well, the marching cubes output sucks anyway :P
12:35 < sinclair|nz> r1card: its awesome bro
12:35 < r1card> sinclair|nz, maybe you missed a chance to invent the asymptotic decider.
12:35 < r1card> ;)
12:36 < Stumbler> sinclair|nz:  Yeah, well, I'm already having a hard time distinguishing between commercial and private use.    
12:36 < sinclair|nz> r1card: iirc, the core of marching cube was the lookup tables used in the iso surface construction also, there were 256 possible intersections on a cube + a scaling factor
12:36 < sinclair|nz> so, it was the most elegant means of doing it
12:37 < geNAZt> did someone test rethinkdb ?
12:37 < sinclair|nz> it had implications for things like turning medical MRI scans into something visual
12:37 < r1card> sinclair|nz, it's interesting.
12:37 < sinclair|nz> sadly, i could have made a career doing that, instead of farting around in the web space
12:38 < r1card> sinclair|nz, innovate in web space :P
12:38 < sinclair|nz> r1card: nah, im playing catchup 
12:38 < r1card> sinclair|nz, well there isn't much to catch up to
12:38 < sinclair|nz> r1card: too much time wasted in my last job doing Microsoft CRM
12:39 < Stumbler> I feel like I've been playing catch up for 13 years XP
12:39 < r1card> :P
12:39 < sinclair|nz> Pro Tip: don't do MSCRM for a job
12:40 < Stumbler> *jots that down*
12:40 < r1card> sinclair|nz, ssooo have you had to organize a project from multiuple platforms / compilers / computer languages in one cohesive project on the file system?
12:40 < sinclair|nz> r1card: Visual Studio takes care of that
12:41 < r1card> sinclair|nz, it does by having separate projects.
12:41 < sinclair|nz> yeah, the visual studio solution
12:42 < r1card> sinclair|nz, my problem is I have one project which includes the following: SCSS (compiled), TypeScript for the browser (JS), TypeScript for Node.JS (JS), PHP, Python, image assets.
12:42 < r1card> sinclair|nz, I want it to be so organized that everything has its place.
12:42 < r1card> And "make" it in one go.
12:43 < sinclair|nz> r1card: you can go to project -> properties -> build and change the build properties 
12:43 < r1card> I'm not sure how to even organize the files.
12:43 < sinclair|nz> r1card: i don't often find myself doing anything more complex than writing a .bat for custom builds
12:43 < r1card> some CSS is for PHP templates, some CSS is for JS components...
12:43 < r1card> So yeah.
12:44 < sinclair|nz> r1card: put all your browser TS in one project
12:44 < robertkowalski> heya
12:44 < sinclair|nz> all your node TS in another, i have found that VS sucks compiling things the way you want in node
12:44 < r1card> sinclair|nz, so if the browser TS "owns" some of the CSS and PHP owns some of the CSS for its templates, who owns the CSS in the end?
12:45 < sinclair|nz> TS or PHP shouldn't own CSS
12:45 < r1card> Well.
12:45 < r1card> sinclair|nz, is that a third project then?
12:45 < sinclair|nz> CSS belongs with your web project
12:46 < sinclair|nz> r1card: i have the following directories
12:46 < sinclair|nz> ./static/scripts/
12:46 < sinclair|nz> ./static/css/
12:46 < sinclair|nz> ./static/images/
12:46 < sinclair|nz> i build my TS and it goes in scripts,
12:47 < sinclair|nz> i build my CSS (with LESS) and it goes in CSS
12:47 < sinclair|nz> and images are generally empty nowadays
12:47 < r1card> sinclair|nz, I think we're close to a revelation (I mean me)
12:47 < r1card> sinclair|nz, on the side, happy to learn you use TS as well ;)
12:48 < r1card> It rocks doesn't it
12:48 < sinclair|nz> so, your build script for TS would build up all your JS, and copy it into the target directory
12:48 < sinclair|nz> yeah, TS is great
12:48 < r1card> sinclair|nz, here's where the problem comes in. Modularization.
12:49 < r1card> sinclair|nz, I have JS modules (reusable) and reusable PHP, Python and so on modules.
12:49 < sinclair|nz> r1card: ignore modularization
12:49 < r1card> Well :P
12:49 < sinclair|nz> that's what im doing
12:49 < sinclair|nz> r1card: well, first, i have this.... https://npmjs.org/package/typescript.api
12:49 < sinclair|nz> then, i write a build script (in node) that does the compilation for me
12:49 < sinclair|nz> using the api
12:50 < sinclair|nz> so, in my scenario, for a given module (which might contain 100 TS files), i use the compiler to bundle all that up into a single output JS (index.js)
12:50 < sinclair|nz> then, i iterate submodules, and do the same
12:51 < sinclair|nz> r1card: so basically, i have extremely large modules when contrasted with your typical module you would find on npm, 
12:52 < sinclair|nz> r1card: they are more assemblies than they are modules, as they contain the entire namespaces
12:52 < sinclair|nz> multiple namespaces
12:52 < r1card> sinclair|nz, here's my issue. When I create a reusable component, it very often contains some assets with it. CSS, images, XML, whatever. Sometimes SQL files.
12:52 < r1card> sinclair|nz, so it's not just TS code.
12:52 < sinclair|nz> you JS should not reference CSS
12:52 < r1card> sinclair|nz, when I drop a dependency I need to also somehow involve those assets into the build process
12:52 < r1card> It might not, but it's related.
12:53 < r1card> As in, let's say, my UIWidgets module will use ui-widgets.css
12:53 < sinclair|nz> r1card: again, its seperate
12:53 < r1card> I prefer not to make the app builder being aware of manually including those per se.
12:54 < r1card> Instead, a global config says "assets go in this folder"
12:54 < sinclair|nz> you can have a ui-widgets-blue.css ui-widgets-red.css ui-widgets-green.css, but only 1 ui-widgets.js
12:54 < r1card> and the API has "includeStyles()" call or so.
12:54 < sinclair|nz> r1card: it shouldn't tho
12:54 < sinclair|nz> r1card: CSS should be included in the page, not via script
12:54 < r1card> sinclair|nz, maybe it shouldn't.
12:55 < r1card> sinclair|nz, I want when I have a component, to care as little as possible what's it made of.
12:55 < r1card> Just tick a proverbial box in my build config, and it's in.
12:55 < sinclair|nz> r1card: what is typical, is JS is written for a specific html element layout
12:55 < r1card> sinclair|nz, that's so far only a dream.
12:56 < r1card> sinclair|nz, indeed, and the templates should reside with the component, no
12:56 < sinclair|nz> you would pass your JS the elementID or Jquery SelectorID and it would work with that element
12:56 < sinclair|nz> additionally, your CSS works the same, but is in no way related to the JS code at all
12:56 < sinclair|nz> they are seperate things
12:57 < r1card> sinclair|nz, I do it another way. I have an empty span/div with the id, and I pass it to a new WidgetView('id') and it "renders itself" into that element, replacing it.
12:57 < sinclair|nz> which is also fine, but even that doesn't have anything to do with CSS
12:58 < r1card> Well it means my TS components also depends on HTML templates 
12:58 < r1card> and so on.
12:58 < r1card> I don't know, it's Complicated (tm)
12:58 < sinclair|nz> well, don't think of html, js and css as one thing, think of them individually 
12:59 < r1card> sinclair|nz, it hurts my head to do so
12:59 < sinclair|nz> r1card: far easier to think about JS and only JS, rather than JS and its implications with CSS
12:59 < r1card> sinclair|nz, imagine going back to C and thinking of methods (functions) and instance properties (structs) separately ;)
13:00 < sinclair|nz> r1card: you just need some practice with web dev, what i am describing is all common industry stuff
13:00 < r1card> sinclair|nz, there's a lot of overlap. for example due to browser shortcomings, it's not out of the question sometimes to implement a style from jQuery, and the rest via CSS.
13:00 < r1card> sinclair|nz, well I know it's common.
13:01 < sinclair|nz> you shouldn't do that
13:01 < r1card> sinclair|nz, but I don't like it.
13:01 < r1card> To encapsulate an element it needs all its bits in one place.
13:01 < sinclair|nz> what you should do is use jquery's AddClass and RemoveClass methods, 
13:01 < sinclair|nz> then CSS picks up on the class changes 
13:01 < r1card> sinclair|nz, sure.
13:02 < r1card> sinclair|nz, well you're right, that's the right way to do it, bad example.
13:02 < sinclair|nz> r1card: also, i strongly recommend looking at knockout.js
13:02 < r1card> sinclair|nz, but my point is these things play together.
13:02 < sinclair|nz> r1card: they do, but from a workflow standpoint, you could have 3 people, 1 html guy, a css guy and a js guy, they can all do their things without impacting eachother
13:03 < r1card> sinclair|nz, I've been checking those out lately. Can.JS, Knockout, Backbone, and so on.
13:03 < r1card> sinclair|nz, and Angular which is scary IMHO.
13:03 < r1card> sinclair|nz, they've given me a direction to go to.
13:04 < sinclair|nz> im not so damn with backbone, i expect i should learn it, but im not really a browser developer, i just heard backbone.js is being used to model things in nodejs backends. i wanted to see that and make a call on if i like it or not
13:04 < r1card> sinclair|nz, I don't know, is it *really* possible to have a HTML guy and CSS guy work separately?
13:04 < r1card> sinclair|nz, it's slightly like having doc comments and code  guys ;)
13:04 < sinclair|nz> r1card: most CSS developers can style a page looking at only markup alone (using the browser dom inspecters)
13:05 < r1card> sinclair|nz, backbone is not perfect in any way but it's very simple, so.
13:05 < jtomasrl> my node is blocking in a mongodb find, actually it doesnt perform any read operation with "ab -n 500 -c 100" but makes the connection. is this a problem with mongo?
13:05 < r1card> Basically events and KVO.
13:05 < r1card> sinclair|nz, overriding CSS and so on is important indeed.
13:05 < sinclair|nz> r1card: i don't do a lot of CSS
13:06 < sinclair|nz> or browser stuff in general
13:06 < r1card> sinclair|nz, but I wish I could say, install a component and that component can communicate to the app "you need to either do something with this CSS or tell me you don't need it."
13:06 < r1card> sinclair|nz, similar for images
13:06 < sinclair|nz> r1card: i have something for you to watch and think about...i second
13:06 < r1card> "either tell me where to put my images, or tell me where to expect your version"
13:07 < r1card> sinclair|nz, see? Think of it as "self-documenting behavior"
13:07 < sinclair|nz> r1card: https://www.youtube.com/watch?v=fqULJBBEVQE
13:07 < sinclair|nz> r1card: plan for this
13:07 < r1card> sinclair|nz, not the right phrase, but in other words, when something "doesn't work" you don't have to spend 1 hour reading docs, because the component TELLS YOU what it needs.
13:07 < r1card> sinclair|nz, and the dev has to be EXPLICIT he/she will override a certain asset
13:08 < r1card> sinclair|nz, wouldn't it be awesome :P?
13:08 < r1card> I'll check the vid :0
13:08 < r1card> :)
13:08 < r1card> Thank you.
13:08 < r1card> Ah web components, yep sinclair|nz.
13:08 < r1card> sinclair|nz, this is in fact kinda pushing things in my direction I think
13:09 < sinclair|nz> r1card: this is all possible now
13:09 < r1card> sinclair|nz, that's my point. I think like this already.
13:09 < r1card> sinclair|nz, and I want components that are "on their own" by default.
13:09 < r1card> Self-managed. Including their CSS/html/etc.
13:10 < ningu> what kind of bat are .bat files on windows, are they microbats or megabats?
13:10 < ningu> and who is the .bat man?
13:11 < r1card> ningu, wooden bat.
13:11 < jtomasrl> I nned some help with this, is this the correct way? https://gist.github.com/jtomasrl/7635f83958e0ff8ce7b2
13:12 < sinclair|nz> ningu: experience the awesomeness of windows powershell 
13:12 < sinclair|nz> ningu: for "experienced" batch scripters only
13:12 < ningu> sinclair|nz: I will stick to bash, thank you
13:14 < sinclair|nz> heh
13:15 < ningu> jtomasrl: I think you want to do, var coll = new mongo.collection(mongodb, 'stores');
13:15 < ningu> and then coll.find() or whatever
13:15 < r1card> sinclair|nz, I'm not sure about the <template> tag. Seems like basically a minor performance optimization at the cost of architectural messiness.
13:15 < jtomasrl> ningu: why is that?
13:15 < ningu> jtomasrl: actually, you're doing some other weird stuff...
13:15 < sinclair|nz> r1card: those web components are pretty powerful, they are like iframes in terms of how they scope document styles etc
13:16 < sinclair|nz> r1card: the "shadow dom" 
13:16 < r1card> sinclair|nz, I like the scoping part and custom tags part, yes shadow DOm. That's 100% awesome.
13:16 < ningu> jtomasrl: you shouldn't change the value of the mongo global
13:16 < r1card> sinclair|nz, but <template> is like a step back.
13:16 < sinclair|nz> r1card: not really
13:16 < r1card> sinclair|nz, I'll tell you why. 
13:17 < jtomasrl> ningu: im not changing it vasue
13:17 < jtomasrl> value*
13:17 < ningu> jtomasrl: of course you are, global.mongo = ...
13:17 < r1card> sinclair|nz, the same reason it's bad to include a giant CSS as a <style> block inline in an often changed document. You keep redownloading those. Once. Templates should be able to be defined *outside* the main document. 
13:17 < spots_> re
13:18 < sinclair|nz> r1card: but, templates can be loaded externally 
13:18 < jtomasrl> ningu: im assigning the db object to the global.mongo to use across modules the same connection
13:18 < r1card> sinclair|nz, oh can they.
13:18 < sinclair|nz> r1card: they can be linked in, in the same fashion as CSS
13:18 < r1card> sinclair|nz, well that's nice then.
13:18 < r1card> sinclair|nz, what's the syntax?
13:18 < ningu> jtomasrl: that's not going to work
13:18 < ningu> global is different in each module, I believe
13:19 < sinclair|nz> r1card: i don't know, im not a browser developer 
13:19 < r1card> sinclair|nz, ok thanks
13:19 < jtomasrl> ningu: actually it does but i dont think its the best way
13:19 < spots> had to leave unexpected, is anyone using node and redis?
13:19 < ningu> jtomasrl: ok, didn't realize that -- but yeah it's a bad idea
13:20 < spots> i need a fast way to look up an value in node (something like btree)
13:20 < ningu> jtomasrl: you should get a connection object once in your app.js and then inject it into other required modules
13:20 < ningu> as in require('./routes/foo')(app) or whatever
13:20 < jtomasrl> ningu: anyway, why should it be "var coll = new mongo.collection(mongodb, "stores")" instead of giving a callback, should that be blocking?
13:20 < ningu> jtomasrl: I'm just following the docs
13:21 < RLa> maybe it returns a promise
13:21 < RLa> or whatever you call such object
13:21 < brianng> hi i need some help
13:21 < ningu> I don't think it does anything besides return an object that will use that collection name when you do some actual query
13:21 < brianng> i need to find the first x number of occurences of an id in a collection
13:21 < brianng> then delete them
13:22 < brianng> getting them is not a problem at all deleting them is
13:22 < brianng> mongodb btw
13:22 < spots> noone can help?
13:22 < RLa> spots, what is the type of keys?
13:23 < ningu> can't you do collection.remove() with the appropriate conditions?
13:23 < spots> md5
13:23 < sinclair|nz> ningu: socket.connect(port, host, func) <-- the callback 'sometimes' gets fired twice
13:23 < gj> Todays hot question on HN https://news.ycombinator.com/news would some one pay for managing their FB and Twitter ?
13:23 < RLa> spots, strings?
13:23 < spots> yes
13:23 < RLa> you could use an object then
13:23 < spots> how does js look up properties?
13:24 < spots> there could be 1million properties or more
13:24 < sinclair|nz> ningu: its hard to write good code on node when node does unexpected things, like fire connection events twice
13:24 < ningu> sinclair|nz: by socket do you mean require('net')?
13:24 < sinclair|nz> var socket = new net.Socket();
13:24 < RLa> spots, hash map i guess, and special code for hidden classes
13:24 < geNAZt> never had that case that a connect emits two connection events
13:24 < geNAZt> oO
13:24 < sinclair|nz> socket.connect(...)
13:24 < ningu> oh, right.
13:25 < sinclair|nz> ningu: im using 0.10.7
13:25 < ningu> I've also never seen multiple connect events
13:25 < ningu> but this reminds me of an issue someone on here was having the other day
13:25 < guest853> mooo
13:25 < sinclair|nz> ningu: its intermittent,  
13:25 < ningu> sinclair|nz: and the callback is used for one socket, and one socket only?
13:26 < sinclair|nz> sometimes i get one connection event, other times i get two
13:26 < sinclair|nz> ningu: yes
13:26 < geNAZt> well if this is so it is a bug
13:26 < geNAZt> but i never had this oO
13:26 < ningu> yeah, if that's all there is to it then it's a bug
13:26 < sinclair|nz> ningu: well, there are two sockets
13:26 < ningu> sharing one 'connect' callback, or...?
13:26 < sinclair|nz> ningu: two instances of net.Socket()
13:27 < sinclair|nz> no, they are completely seperate
13:27 < ningu> I would add some console.log stuff to be totally sure what's being called for what
13:27 < ningu> ok, and both have this bug, or what?
13:27 < sinclair|nz> ningu: i have a logger, and i am watching events
13:27 < sinclair|nz> ningu: yes
13:27 < sinclair|nz> it appears so, but again, its intermittant
13:27 < geNAZt> so you have 2 - 4 connection events ?
13:28 < Gabriel403> ccccccbrtjcvlbilgdiggucrnergbcjngvjcjnnjekvk
13:28 < sinclair|nz> ningu: http://pastebin.com/XNaZvhF5 - line 146
13:31 < geNAZt> well the third parameter is appended to the eventEmitter via once
13:31 < geNAZt> so it is impossible to get two events
13:31 < sinclair|nz> geNAZt: shrug 
13:32 < ningu> sinclair|nz: I would add a console.log before callback(socket) to see if that code path is being called twice too
13:32 < ningu> you can also check that way whether your event logger is working right
13:33 < ningu> actually
13:33 < ningu> you call the callback twice from ConnectPassive
13:33 < ningu> once immediately, and once on connect
13:34 < sinclair|nz> ?
13:34 < geNAZt> oh i didnt spotted that callback(null) at the end
13:34 < ningu> line 152
13:34 < sinclair|nz> oh, well spotted
13:34 < sinclair|nz> my bad
13:37 < robertkowalski> Domenic_: ?
13:37 < jtomasrl> how can i ensure that im using the same db connection object
13:37 < ningu> https://www.smore.com/clippy-js
13:38 < ningu> jtomasrl: pass it in from the entry to your app to other modules
13:38 < ningu> "Our research shows that people love two things: failed Microsoft technologies and obscure Javascript libraries. Naturally, we decided to combine the two."
13:40 < geNAZt> ningu, nice !
13:40 < ningu> the msword html template is pretty awesome on the site, too
13:43 < guest253> mooo
13:43 < sinclair|nz> am i the only one who struggles to write good software on node, perhaps i need more practice :(
13:43 < standoo1> sinclair|nz: good luck
13:44 < sinclair|nz> standoo1: it must be possible, 
13:44 < standoo1> are your from nz?
13:44  * sinclair|nz holds onto the promise that a application might finally emerge from this callback crazyness
13:44 < ningu> sinclair|nz: well, I think your preferred way of writing software is more OO-heavy than many folks in node
13:45 < pachet> sinclair|nz gotta abstract that away
13:45 < pachet> if the pattern offends thee, cut it off
13:45 < sinclair|nz> pachet: in what regard?
13:45 < pachet> callback soup
13:46 < gj> any one tried the scrollback.io client?
13:46 < sinclair|nz> pachet: i could use async i suppose, but id rather write my own variant in TS
13:46 < sinclair|nz> pachet: all im doing is firing commands at a FTP server and awaiting responses, 
13:47 < pachet> sinclair|nz not too hard to write a control flow lib that does what you want
13:47 < sinclair|nz> patchet: so each command is another level of nesting
13:47 < sinclair|nz> pachet: no, i suppose it isn't 
13:47 < sinclair|nz> oddly, im finding the nesting acceptable in this scenario
13:47 < sinclair|nz> pachet: however, its handling logic in callbacks i find difficult 
13:48 < sinclair|nz> if the server response this way, do this, otherwise, do this
13:48 < sinclair|nz> which in callback land, turns into guff
13:48 < pachet> the trick is to try and only introduce logic where it differs
13:48 < pachet> so for instance
13:48 < sinclair|nz> and its hard to imagine what a control flow library would look like in that scenario, perhaps i need some modeling software 
13:49 < pachet> a lot of the services i write that are async and do a lot of io, for instance
13:49 < pachet> i treat all errors as the same, within the concern of that service
13:49 < pachet> so i dont really do any manual error handling in that scope
13:49 < ningu> sinclair|nz: I dunno, it sounds to me like async.series is approximately what you want
13:49 < pachet> if an error occurs, push it up, then something upstream is capable of digesting the error and outputting the correct response
13:49 < ningu> you could implement it your own way
13:50 < ningu> that lets you handle errors in a single place
13:50 < sinclair|nz> ningu: its not in series, it may branch depending on what the server responds with, 
13:50 < sinclair|nz> ningu: what i need is to plug in windows workflow foundation into node and visual model a flow diagram
13:51 < sinclair|nz> WWF is a bad idea, but the concept is correct i think
13:51 < ningu> it's still a variation on the same idea
13:51 < sinclair|nz> perhaps it is possible to decoratively model such things
13:52 < ningu> the place where the branch could occur would be the last one in that series
13:52 < sinclair|nz> er, declaritively 
13:52 < ningu> and then it would do a new async.series or whatever as appropriate
13:52 < sinclair|nz> ningu: that defeats the purpose, and i am only calling one thing, not a series of things
13:52 < ningu> and use the finish callback passed to the last action in the original async.series
13:52 < ningu> defeats what purpose?
13:53 < ningu> anyway, in node, several network requests in sequence are never just one thing
13:53 < ningu> they may all belong to one larger action, but you need some way to manage the flow between them
13:53 < sinclair|nz> ningu: sure, but i am making a decision at each request
13:54 < ningu> nothing you've said so far indicates that what I suggested wouldn't work
13:54 < sinclair|nz> so, the last thing in the series would also be the first thing in the series 
13:54 < pachet> really its just about being able to elegantly dance back and forth between serial and parallel
13:54 < ningu> sinclair|nz: it would initial a *new* series
13:54 < ningu> initiate*
13:54 < sinclair|nz> ningu: maybe, i need to think on this for a bit
13:54 < ningu> if you want error control in one place, you just have to make sure to properly pass your callback references around
13:55 < ningu> to make sure that the errors get handled where you want them to be
13:55 < sinclair|nz> ningu: ideally, i dont really want to think about it so much
13:55 < ningu> well, regardless of whether you use sync or async control flow, you have many decision points and many different places to handle errors
13:56 < ningu> so I don't see how you can avoid thinking about it
13:56 < sinclair|nz> ningu: let me draw you a picture
13:56 < ningu> ok
13:56  * sinclair|nz likes drawing pictures
14:02 < guest253> Test
14:04 < guest253> test
14:04 < coin3d> hello there, i'd like to use mongoose to access my existing mongodb schema. i've got a one to many relationship, implemented with referencing, but i'm also denormalizing some fields for performance reasons. is there a way to automatically keep the denormalized fields in sync with mongoose?
14:06 < sinclair|nz> ningu: http://oi42.tinypic.com/2njeflj.jpg
14:07 < sinclair|nz> ningu: so, what i really want to do (in a OOP sense) is encapsulate operations as Actions, and pipe the result of each action to a condition/logic Op, which routes the output into the input of another Action
14:07 < sinclair|nz> or yields (callback)
14:07 < ningu> hmm
14:07 < sinclair|nz> i understand that async would be possible to use, but its difficult to move (compose) Actions around
14:08 < ningu> well, I suppose you could look at promises
14:08 < ningu> but I'm not sure if that would really solve anything
14:08 < sinclair|nz> ningu: well, Promises, .NET Task<T> 
14:09 < sinclair|nz> ningu: what i want is, a standard interface for a "Action" that a operation can implement
14:09 < RLa> you still do not like callbacks?
14:09 < sinclair|nz> RLa: its more about taming them
14:09 < sinclair|nz> RLa: and no, i don't like them all that much
14:09 < ningu> what I would probably do is inline the conditionals and not inline the actions, so something like: doSomething(function (err, result) { if (result.foo == bar) action1(cb) else action2(cb) };
14:10 < ningu> forgot a paren but you get the idea
14:10 < ningu> and I left out the error handling but that could be done with something like if (err) return cb(err);
14:11 < sinclair|nz> ningu: well, it would be nice to have a bunch of operations could link together in a graph (like in the picture)
14:11 < sinclair|nz> ningu: part of me wants to click on one of these actions or conditions, and edit some code
14:12 < ningu> sinclair|nz: yes, this would basically be doing that but not in a formal graph structure
14:12 < sinclair|nz> pretty much
14:12 < ningu> I would be hard pressed to come up with a formalized object that could properly encode all of the conditionals
14:12 < sinclair|nz> the only thing is, its a tad on the intrusive side
14:12 < ningu> unless you pass in functions to evaluate them I suppose
14:12 < ningu> but it just seems like more trouble than it's worth to me
14:13 < sinclair|nz> [input] -> [action] -> [output]
14:13 < sinclair|nz> ningu: well, its more trouble for simple things, but im not trying to do simple things
14:13 < ningu> the most basic thing is just to make all of the actions their own functions
14:13 < sinclair|nz> i want complex things
14:13 < ningu> and you need to figure out how much shared context they need and where you're going to keep that
14:14 < poacher2k> hey guys! anyone know of a good way for doing node.js development from an ipad?
14:14 < sinclair|nz> ningu: well, that's not a problem really
14:14 < ningu> well I don't think node runs on iOS :)
14:14 < poacher2k> probably not ^^
14:15 < ningu> sinclair|nz: ok, so I don't see the issue; just write conditionals and call functions as you would anyway
14:15 < poacher2k> was hoping there was some way I could set node.js up on my home computer, then connecting to it from my ipad
14:15 < sinclair|nz> ningu: i might play around, what would be nice tho, is with a graph like this, you could show logic in a visual sense, 
14:15 < sinclair|nz> it would be very very worth while in some scenarios
14:15 < ningu> poacher2k: well sure, you can connect to a server from your ipad
14:15 < ningu> or you can ssh from your ipad to whatever
14:15 < ningu> not sure what you are trying to accomplish
14:16 < poacher2k> guess I'm not sure either!
14:16 < ningu> what do you mean by "connect to it"?
14:16 < standoo1> haha
14:17 < poacher2k> so, I've set up node.js on my home computer, which runs Windows. from my ipad, I can use ssh, but I read node.js doesn't compile to cygwin anymore?
14:18 < poacher2k> (there's a high possibility I have absolutely no clue of what I'm doing)
14:18 < standoo1> poacher2k:hmm\
14:18 < ningu> sure but what does cygwin have to do with anything?
14:18 < standoo1> poacher2k: what are you doing?
14:18 < poacher2k> the ssh-part
14:18 < poacher2k> or do I not need cygwin to have openssh?
14:18 < ningu> I don't know how to set up ssh on windows but I doubt cygwin is the only way
14:19 < standoo1> ssh server you mean?
14:19 < ningu> yes, at least, that's what I assume he means
14:19 < poacher2k> yup
14:19 < standoo1> do we have a windows irc channel?
14:19 < poacher2k> is there some easier way of doing node-development that I'm missing completely btw?
14:20 < standoo1> poacher2k: i'm developing one...
14:20 < sinclair|nz> ningu: you know what?
14:20 < ningu> well given that I have no idea what you're doing I can't exactly answer that
14:20 < ningu> eh?
14:20 < sinclair|nz> let me code something for you
14:20 < ningu> I am going to sleep soon :)
14:21  * sinclair|nz likes coding things
14:21 < ningu> but I'll see it sooner or later
14:21 < standoo1> sinclair|nz: are you from nz?
14:21  * poacher2k realises he has no clue what he's doing
14:21 < sinclair|nz> won't take long, i code faster than i draw
14:21 < sinclair|nz> standoo1: yes
14:21 < standoo1> its 2 now
14:26 < sinclair|nz> ningu: http://pastebin.com/mKm4rUPh
14:26 < sinclair|nz> standoo1: you from NZ also?
14:26 < standoo1> sinclair|nz: yes
14:26 < sinclair|nz> Auckland?
14:26 < standoo1> sinclair|nz: its late though should get sleeping soon
14:27 < standoo1> sinclair|nz: hamilton
14:27 < sinclair|nz> auckland here
14:27 < sinclair|nz> didn't know there were other nodejs developers around :)
14:27 < ningu> there are a few
14:27 < ningu> not me
14:27 < ningu> but at least 2 others in this channel
14:27 < sinclair|nz> standoo1: you do node for a living?
14:28 < sinclair|nz> note: its only 2:27am
14:28 < ningu> sinclair|nz: anyway, I suppose in TS it might make sense to do it that way
14:28 < sinclair|nz> ningu: well, the same thing could apply in JS
14:28 < standoo1> sinclair|nz: no
14:29 < sinclair|nz> ningu: its just a bit more formal and easier to rationalize about it in TS
14:29 < standoo1> sinclair|nz: i am designing a development platform for node
14:29 < sinclair|nz> standoo1: me too
14:29 < sinclair|nz> standoo1: are you doing this on your own, or in a team
14:29 < sinclair|nz> ?
14:29 < standoo1> sinclair|nz: on my own
14:30 < ningu> we should put a bunch of platforms together and make a train station
14:30 < standoo1> haha
14:30 < sinclair|nz> standoo1: what sort of development platform are you making?
14:30 < standoo1> sinclair|nz: you also developing a platform too?
14:30 < standoo1> standoo1: a general one
14:30 < standoo1> standoo1: for people to experiment with nodejs
14:30 < Havvy> I thought nodejs was a platform for experimenting with nodejs.
14:31 < sinclair|nz> standoo1: mines more to do with building a professional content management platform for node
14:31 < standoo1> development environment
14:31 < standoo1> sinclair|nz: a CMS?
14:31 < sinclair|nz> well, not in the traditional sense
14:31 < sinclair|nz> but yeah, you could say that
14:31 < standoo1> sinclair|nz: a CMS framework?
14:32 < standoo1> standoo1: eg wordpress like?
14:32 < sinclair|nz> more a services hub
14:32 < standoo1> cool
14:32 < standoo1> sinclair|nz: startup?
14:33 < sinclair|nz> nah, homeless, im coding in a internet cafe
14:33 < ningu> at 2am?
14:33 < sinclair|nz> ningu: they 24/7 mate
14:33 < standoo1> sinclair|nz: homeless programmer?
14:33 < sinclair|nz> will code for food
14:33 < standoo1> sinclair|nz: serious?
14:34 < arsdmthe> you joker
14:34 < sinclair|nz> nah, im contractor by trade, building node stuff inbetween contracts
14:34 < standoo1> sinclair|nz: freelancer consultant programmer?
14:34 < sinclair|nz> standoo1: i plan on taking my node stuff out to digital agencies and a few enterprises i know
14:35 < ningu> I'm more of an expander rather than a contractor
14:35 < sinclair|nz> standoo1: apparently i do consulting, but i don't subscribe to the term
14:36 < _noskill> hello
14:36 < poacher2k> sinclair|nz: feel you bro. I think I do too, but I don't like to call it "consulting" :p
14:36 < ningu> good to use a name for yourself that others will understand
14:36 < sinclair|nz> standoo1: most of what im doing is really to get node up and running as a viable technology for some of the work i find myself doing
14:36 < sinclair|nz> standoo1: as it stands currently, node sucks
14:37 < sinclair|nz> there is next to nothing i would consider using in a project
14:37 < standoo1> sinclair|nz: me too
14:37 < standoo1> sinclair|nz: i'm trying to promote node
14:37 < arsdmthe> all softwares sucks sinclair|nz 
14:37 < standoo1> sinclair|nz: there's potential in it
14:38 < pachet> abandon your preconceptions
14:38 < _noskill> i'm having some trouble using npm. Tried to install serialport
14:38 < pachet> its like a zen thing
14:38 < sinclair|nz> standoo1: yeah, there is potential, but as it stands, its a just a big mash up
14:38 < ningu> I've used node for projects and will do so again -- and I'll use it for the things node is good at
14:38 < sinclair|nz> standoo1: so im writing all my own stuff
14:38 < ningu> not the things it isn't meant to do
14:39 < ningu> use the right tool for the job -- it's only certain things like opening beer bottles where many tools will work :)
14:39 < _noskill> but it gives me an error (microsoft.cpp.invalidplatform. [...] the platform is invalid. Platform = 'x64'
14:39 < ningu> _noskill: maybe it doesn't work on windows?
14:39 < sinclair|nz> ningu: well node seems perfectly capable of being useful at doing day to day business programming
14:40 < dida> _noskill: Ensure you have Visual Studio 2010+ (Express is fine) installed.
14:40 < sinclair|nz> ningu: but not in its current form
14:40 < pachet> sinclair|nz why not?
14:40 < sinclair|nz> what it needs is meaningful abstractions over the core stuff
14:40 < antonio06> join socket.io
14:40 < pachet> sinclair|nz there are modules for that
14:40 < antonio06> hi guys how i join a socket.io IRC?
14:40 < pachet> sinclair|nz the whole core philosophy is to be abstraction agnostic
14:40 < _noskill> ningu: nope, it should work (based on their github). I've already installed python + Visualstudio 2010 express and microsoft dev tools (as required)
14:41 < ningu> _noskill: ok, I dunno then. I'm not on windows.
14:41 < sinclair|nz> pachet: that's fine as a philosophy, i am skeptical about it in practice
14:41 < _noskill> gonna try that on my arch then ^^
14:42 < sinclair|nz> pachet: the way node dev has gone for me is, i want to do X, i have a look at NPM, all the modules don't work as i need them to, or the developer thought it was good to expose the functionality as 1 function, or it doesnt do enough
14:42 < sinclair|nz> pachet: so, i write my own
14:42 < sinclair|nz> rinse repeat
14:43 < arsdmthe> implement harmony so sinclair|nz 
14:44 < sinclair|nz> pachet: nowadays, i don't even bother using NPM, 
14:44 < sinclair|nz> the theme is the same over and over
14:44 < maaarghk> sinclair|nz: you must have an interesting github :p
14:44 < sinclair|nz> besides, the core stuff is pretty simple, but there is a gap between what the core stuff offers, and the stuff i actually need
14:44 < standoo1> npm is bad?
14:45 < sinclair|nz> standoo1: its not bad, its just a lot of programmers with different ideas about code
14:46 < maaarghk-> some kind of 'styleguide' would probably go down nicely
14:46 < pachet> i dont see why
14:46 < standoo1> sinclair|nz: i think the popurlar ideas will stay
14:46 < arsdmthe> pfff
14:46 < standoo1> sinclair|nz: part of the evolution theory
14:46 < pachet> the style guide is implicit
14:47 < pachet> if people accept it and use it, that's validation of the style, maybe, or maybe in spite of the style
14:47 < maaarghk-> i have no experience, bt apparently not if what sinclair|nz is true
14:48 < pachet> sinclair|nz a typical pattern for me is to find a module that does roughly what i want
14:48 < pachet> then hide it behind an interface that i define, so that i get consistent behavior across modules
14:48 < sinclair|nz> pachet: its not even about style, the ECMA committee hasn't come to a consensus if its acceptable to return nameless function on modules 'aka module.exports', yet i see programmer after programmer telling other programmers to do it (because its possible)
14:49 < pachet> that cosmetic work takes a little effort but its much less than having to roll my own <insert overly ambitious project here>
14:49 < ningu> most progress in software is not made by adhering to a standard that a committee drafted
14:49 < sinclair|nz> pachet: its just slow going, and i've given up on the "this should be easy" idea, to tell the truth, i struggle with everything
14:49 < zapu> sinclair|nz, i hope there will be no consensus, or node won't deny me doing it
14:49 < ningu> standards are good, but the best standards have arisen by consensus
14:50 < zapu> this is javascript, I can do whatever I want, haha
14:50 < pachet> sinclair|nz ecma is playing catch up, and they're taking their cue from us
14:50 < ningu> in a few cases, like unicode, it's good to have top-down standards
14:50 < zapu> I'm tired of e.g. java module system
14:50 < sinclair|nz> pachet: they are being dragged by the ear
14:50 < pachet> better that they be dragged by the ear by the actual use cases that individual developers experience daily
14:51 < sinclair|nz> pachet: its better to follow the standards
14:51 < pachet> standards change
14:51 < sinclair|nz> no, they are built upon
14:51 < ningu> sinclair|nz: in that case we'd all be using XML
14:51 < zapu> haha
14:51 < pachet> the difference between built upon and change is semantic
14:52 < pachet> the use patterns change, whether or not the whole standard stays backwards compliant for 4000 years
14:52 < sinclair|nz> pachet: regardless, as the community seems to blissfully disregard standards, i don't want to use their software
14:52 < ningu> pachet: sadly we have not achieved that, my latest laptop no longer has a cuneiform tablet reader :(
14:53 < sinclair|nz> i want my software to be compliant, 
14:53 < pachet> ningu++
14:53 < sinclair|nz> so i won't use anything that isn't
14:53 < pachet> sinclair|nz sounds paralyzing
14:53 < sinclair|nz> pachet: not really
14:53 < arsdmthe> go to ES6
14:53 < sinclair|nz> its not hard to conform and get the same result
14:54 < pachet> sinclair|nz the conformance is still being figured out
14:54 < pachet> why hold yourself to standards that aren't even adopted yet
14:54 < ningu> especially if you have to deal with others who only imperfectly enforce standards
14:54 < sinclair|nz> pachet: i also use TypeScript, which aligns to the ES6 specification, so the language itself helps validate im not doing stupid things
14:55 < pachet> sinclair|nz can you link me to the final es6 specification?
14:55 < pachet> and yes thats a trick question
14:55 < sinclair|nz> pachet: i know it is, but MS working along side the standards committee and updating the language accordingly 
14:56 < sinclair|nz> which is nice
14:56 < pachet> all im saying, is you're trying to hit a moving target
14:56 < sinclair|nz> Microsoft are, not me
14:57 < pachet> you say you wont use anything that isnt compliant - i just dont understand how you cant be compliant to a spec that's not formally accepted
14:57 < sinclair|nz> anyway, this is just an effort on my part to take node seriously, and try and develop professionally on it
14:57 < arsdmthe> hehe
14:57 < pachet> er s/cant be compliant/can be compliant
14:57 < ningu> standards-compliant and professional are two separate categories
14:58 < arsdmthe> ES6 is free to extend
14:59 < pachet> and if the history of javascript implementations has anything to teach us its that standards compliance is a greyscale, not a pure dichotomy where some players get it perfect
14:59 < mscdex> poacher2k: there is a windows version of node, it doesn't require cygwin
15:00 < sinclair|nz> pachet: well, i rely on TS to get as close as i possibly can to the standard, without having to know all the details of the standard
15:01 < Stumbler> Not that anyone asked me, but sinclair|nz is IMHO holding himself to a pretty responsible standard.   I recently took over a project where the dev team (small, just a couple of guys)  had hacked their way into a piece of usable software for my client.   Well, a few years later and the entire ground is caving in because they disappeared, and I have to figure out what the hell is going on under the duct tape.  If they had used ANY kind of 
15:01 < sinclair|nz> a good language wont let you do stupid things
15:01 < Stumbler> standards… platform, technology, code layout, or even naming convention, my life would be a lot easier. :\
15:02 < sinclair|nz> Stumbler: right :)
15:02 < sinclair|nz> Stumbler: and i've suffered similar scenarios myself
15:02 < Stumbler> they built the thing in real basic of all things
15:02 < Venemo_N9> Stumbler, I think every dev on the planet can say that
15:03 < pachet> you get to that point in node from rolling everything yourself rather than relying on established modules where appropriate :[
15:04 < Stumbler> Not that I'm dissing node by any means, I love it, and have adopted it in the hopes that it grows.  I just know that following standards can be beneficial in a group setting (perhaps not as strictly as some suggest)
15:04 < sinclair|nz> pachet: that remains to be seen
15:04 < arsdmthe> userlands sucks
15:05 < sinclair|nz> pachet: substack came in here the other day complaining that the node core library broke underneath him 
15:05 < pachet> beneath his mighty heel
15:05 < sinclair|nz> something like that
15:06 < pachet> substack works very close to the metal with apis that arent flagged as stable
15:06 < sinclair|nz> if substack had been able to built is most awesome software on a abstraction above the node core, then he wouldn't have that problem
15:06 < pachet> i wouldnt hold him up as emblematic of the average node dev
15:06 < sinclair|nz> me either
15:06 < sinclair|nz> nor any other node developer actually
15:07 < sinclair|nz> but regardless, that "yet to be developed" abstraction doesn't exist
15:07 < mscdex> everyone use coffeetypescript!
15:07 < zapu> icedcoffeetypescript
15:07 < pachet> orangemochafrappucinoscript
15:07 < ningu> toffeescript
15:07 < sinclair|nz> jquery was a fairly nice abstraction of the dom, we need something similar for node
15:08 < zapu> abstracting what in node?
15:08 < pachet> yeah there's not a single problem space as dominant in node as the dom is in the browsers
15:08 < sinclair|nz> pachet: right, but it would still free up the node core team from worrying about breaking changes in their updates
15:08 < FMJaggy> ability to program
15:09 < pachet> FMJaggy lol
15:09 < sinclair|nz> pachet: who ever managed that abstraction would take care of the details
15:09 < ningu> if an API is unstable that's because there is not certainty that it is well designed
15:09 < ningu> if there was certainty about the best API then it would exist
15:09 < sinclair|nz> ningu: and who said that node was "well designed"
15:09 < pachet> lol
15:10 < ningu> or alternatively even if poorly designed it's necessary to keep the oldest APIs for backwards compat
15:10 < pachet> i'd say it
15:10 < arsdmthe> ooh
15:10 < ningu> sinclair|nz: my point is that it's harmful to enforce an API that you aren't certain is well designed
15:10 < ningu> that is the actual issue
15:10 < pachet> node has historically been pretty good about flagging the relative stability of core modules
15:10 < ningu> and that's why node has the different levels of stability
15:10 < pachet> ^
15:10 < sinclair|nz> ningu: yeah, it has
15:11 < sinclair|nz> but substacks breaking problems are a testament to things going wrong, and a lot of people rely on his code
15:11 < ningu> if you think it's easy to design an abstraction that will be useful for the general case then you must not have much experience designing them
15:12 < sinclair|nz> ningu: when did i say it was easy?
15:12 < ningu> well, what you're proposing is essentially what node is already doing
15:13 < ningu> compatibility broke when flaws or limitations were found in the initial versions of APIs
15:13 < ningu> but the point of the API is the same as what you're proposing
15:13 < sinclair|nz> ningu: they are very very low level things tho
15:14 < sinclair|nz> ningu: the node core is "low level" relatively speaking
15:14 < ningu> they are as general as they can be without being too general
15:14 < ningu> the rest is npm
15:14 < sinclair|nz> as they should be
15:14 < sinclair|nz> ningu: used the .net BCL?
15:14  * pachet shudders
15:14 < ningu> nope
15:15 < sinclair|nz> ningu: well, that is a extremely large, well organized library of useful stuff
15:15 < sinclair|nz> its "huge"
15:16 < sinclair|nz> and models very "high level" things
15:16 < sinclair|nz> things that you would otherwise need a npm module for (more likely several)
15:16 < pachet> node takes a different approach
15:16 < pachet> break things into units of behavior, and do those well
15:16 < sinclair|nz> pachet: as does .net
15:16 < pachet> rather than do a bunch of higher level func sort-of-well
15:17 < pachet> it also makes the core much easier to support
15:18 < sinclair|nz> the entirely of the BCL is built on a limited subset of IL, a similar thing could be built on node with JS and the node core
15:18 < sinclair|nz> and, it is being built, the problem is, its being built in the most mish mash, unorganized way possible
15:19 < sinclair|nz> you couldn't get anymore mish mash
15:19 < pachet> i wouldn't want it any less mish mash
15:19 < pachet> i've said my goodbyes to monolithic frameworks :[
15:19 < sinclair|nz> .net is not monolithic, i think you have the wrong idea
15:20 < FoxDiller> GAC
15:20 < sinclair|nz> GAC is optional
15:22 < FoxDiller> I know. ;D I just like the GAC.
15:22 < sinclair|nz> well, that's there deh .nets live
15:22 < FoxDiller> Like a warm blanket.
15:22 < sinclair|nz> but you are free to not reference anything in there
15:22 < sinclair|nz> and at the end of the day, assemblies are like modules
15:23 < sinclair|nz> and assemblies reference other assemblies like modules reference other modules
15:24 < r1card> sinclair|nz, btw I figures out what sits wrong with me regarding retheming HTML components by changing the CSS.
15:24 < r1card> sinclair|nz, the fact it means you can have one component theme per page.
15:24 < sinclair|nz> so, you might as well write sizable node modules that do a wide array of "contextual" stuff, rather than npm install my-awsome-one-line-module
15:24 < r1card> sinclair|nz, imagine having to button themes, it's not very far out.
15:24 < r1card> two*
15:25 < sinclair|nz> r1card: CSS selectors ?
15:25 < pachet> sinclair|nz there are definitely modules that fit the bill
15:25 < r1card> sinclair|nz, parodn?
15:26 < pachet> a lot of them are just collations of lower level functionality though
15:26 < pachet> into a contextual collection
15:26 < pachet> which i find elegant
15:26 < abrkn> can anyone recommend a good number formatting and/or parsing library? i need flexible formats like optional decmials, fixed decimals, different decimal separators, thousand grouping, etc.
15:26 < sinclair|nz> pachet: i know this might sound a bit controversial, but if microsoft got in there and starting writing a node base library, it would be the best thing that ever happened to nodejs
15:26 < pachet> haha
15:27 < pachet> i'm just seeing meteor in my head
15:27 < FoxDiller> r1card: You'd hate me then, I am making a nodejs tcp server emit dynamically generated CSS that alters themes on HTML elements.
15:28 < sinclair|nz> pachet: well, no, despite the bad rep microsoft gets, if there is one thing they do right, its writing solid abstractions and API
15:28 < r1card> FoxDiller, I certainly don't hate you.
15:28 < r1card> FoxDiller, but I'm thinking what's the right way to do this.
15:29 < FoxDiller> r1card, I was being silly. ;)
15:29 < r1card> FoxDiller, I'm smart.
15:29 < sinclair|nz> pachet: if they wrote a base library, and provided good tooling for it, it would be a huge win for node
15:29 < r1card> FoxDiller, also my dead pan sarcasm is too dead pan.
15:29 < FoxDiller> lol
15:29 < pachet> sinclair|nz i wouldnt be opposed to them publishing something like that to npm
15:29 < pachet> sinclair|nz not sure what exactly it would offer that other frameworks dont, though
15:29 < sinclair|nz> pachet: i used some of their Azure stuff, its well written
15:30 < r1card> FoxDiller, anyway, I was thinking the following: you can certainly emit dynamic CSS, but assign each theme a class.
15:30 < sinclair|nz> pachet: well, it would offer consistency for one
15:30 < FoxDiller> pachet, 'npm install msjs' ?
15:30 < pachet> npm install markofthebeast-js
15:30 < FoxDiller> hahaha
15:30  * pachet is just kidding
15:30 < sinclair|nz> why not just "npm install .net
15:30 < sinclair|nz> yay \o/
15:30 < FoxDiller> Scary thought
15:30 < sinclair|nz> var system = require("System");
15:31 < FoxDiller> var String = require('System.String');
15:31 < sinclair|nz> var system_net = require("System.Net");
15:31 < r1card> FoxDiller, for example, and you may find this ugly, but I prefix classes with a dash if they're "relative" (not to be selected by themselves), so I have this:   <div id="com1234" class="namespace-to-ComponentClass -defaultTheme"></div>
15:31 < pachet> lol
15:31 < abrkn> dear god.
15:31 < spots> hi, how can i check the content type of a response and cancel the http client if its the wrong type?
15:31 < abrkn> spots: express?
15:31 < mdel> "base library" ??
15:31 < spots> abrkn: pure nodejs
15:32 < sinclair|nz> you know, using managed C++ extensions, it would be possible to bind .net to nodejs
15:32 < r1card> FoxDiller, the style for this would be:    .namespace-To-ComponentClass.-defaultTheme { ... }
15:32 < sinclair|nz> only applicable for machines with .net installed
15:32 < sinclair|nz> i was actually going to do that
15:32 < sinclair|nz> (still is)
15:32 < pachet> sinclair|nz without commenting on the merits of this idea, that's the beauty of node
15:33 < FoxDiller> sinclair|nz: Speed, legality?
15:33 < pachet> nothing keeping you, or ms, or whoever wants to write .net-js, from doing so, and pushing to npm
15:33 < pachet> but then you become what you are trying to combat
15:33 < sinclair|nz> FoxDiller: of course it would be legal
15:33 < pachet> i dont know the term in english for when you're absorbed into a conflict by your resistance to it
15:33 < r1card> In fact...
15:34 < FoxDiller> pachet: Stockholm Syndrome? ;P
15:34 < abrkn> pachet: being argumentative
15:34 < r1card> Would a well coded HTML component even select via CSS selectors?
15:34 < r1card> Maybe not.
15:34 < sinclair|nz> pachet: i would do it as an experiment, for the project summary i would write "for nodejs developers who just wish they were back using .net"
15:34 < abrkn> .net needs to die in a fire, that's all. i programmed it for so long. years i
15:34 < abrkn> just sit there waiting for your shit to compile all day. takes forever to do anything
15:35 < sinclair|nz> abrkn: large project?
15:35 < abrkn> sinclair: not huge, maybe like 30 csprojs
15:35 < sinclair|nz> you probably didn't learn that you can switch off unnecessary builds
15:35 < sinclair|nz> there is a checkbox for that
15:36 < abrkn> sinclair: the compiler is a slow fuck. it takes forever to realize what must be rebuilt. even running a clean is slow
15:36 < sinclair|nz> abrkn: its not slow
15:36 < sinclair|nz> you just don't know how to work with large projects
15:36 < r1card> Maybe you're guys both right.
15:36 < abrkn> i think this thing just happened to me: <pachet> i dont know the term in english for when you're absorbed into a conflict by your resistance to it
15:37 < pachet> lol
15:37 < abrkn> now i remember why i came here: can anyone recommend a good number formatting and/or parsing library? i need flexible formats like optional decmials, fixed 
15:37 < r1card> And abrkn is running on a Pentium II.
15:37 < sinclair|nz> abrkn: ive had a couple of 100+ projects in the past, i never had any problems with long compiles
15:37 < sinclair|nz> abrkn: i compile once, and only recompile the things i need to
15:37 < sinclair|nz> which is quite normal
15:39 < spots> hmm how do i abort an http client?
15:39 < sinclair|nz> abrkn: not only that, VS is smart enough to auto compile dependencies if you change something that requires that to happen
15:41 < arsdmthe> actual compilers do recompile  unneeded parts of code
15:42 < sinclair|nz> arsdmthe: new compiler technology from Microsoft is pretty amazing, see the Roslyn compiler as a service project
15:43 < arsdmthe> is it not file based sinclair|nz ?
15:43 < sinclair|nz> arsdmthe: in the past, if you wanted to compile a million line project into a single output, you would need recompile 1 million lines each time
15:44 < sinclair|nz> arsdmthe: the new stuff allows you to compile once, then retain the AST, the API's allow you to update nodes dynamically in the AST, so changing one line of code only means updating that ast node
15:45 < arsdmthe> AHH COOL
15:45 < sinclair|nz> arsdmthe: noting that, once you have AST, its pretty quite for the compiler to emit that
15:45 < sinclair|nz> *quick
15:45 < sinclair|nz> arsdmthe: yeah, its pretty cool alright, and opens up a lot of possibilities for code automation that weren't possible before
15:46 < sinclair|nz> arsdmthe: you know what else, the TypeScript compiler already does that :P
15:46 < beeant> can i ask a beginner's question
15:46 < sinclair|nz> arsdmthe: you just have to work a bit harder as they don't expose the TS compiler as a api yet
15:47 < sinclair|nz> arsdmthe: https://npmjs.org/package/typescript.api <-- yay
15:47 < sinclair|nz> arsdmthe: anyway, the Roslyn will be in the next big iteration of the .net platform i think
15:47 < sinclair|nz> can't wait
15:48 < arsdmthe> i'll go ahead for my ES6 implementation ...
15:49 < arsdmthe> no compiler needed
15:49 < sinclair|nz> arsdmthe: i do wonder where .net will go after roslyn actually 
15:49 < sinclair|nz> arsdmthe: compilers are good, not evil
15:49 < arsdmthe> idk
15:49 < arsdmthe> not needed
15:50 < sinclair|nz> arsdmthe: i used to think the same way when i did QBASIC
15:50 < sinclair|nz> that was interpreted also
15:51 < arsdmthe> i'm away sinclair|nz 
15:51 < sinclair|nz> c ya
15:54 < r1card> sinclair|nz, I've decided that selecting via CSS to apply behavior is lazy.
15:54 < sinclair|nz> r1card: its not
15:55 < sinclair|nz> r1card: did you know, CSS selectors are the same as JQuery selectors ?
15:55 < r1card> sinclair|nz, yes
15:55 < r1card> sinclair|nz, and it's very handy. Way too handy, in fact. Way too handy.
15:55 < sinclair|nz> so, you can target elements in JS with the same selectors as you do in CSS
15:56 < r1card> sinclair|nz, it binds behavior to CSS classes, and I think they should be used just for styling.
15:56 < yorick> http://www.nodejs.org/api/http.html#http_event_connection  When a new TCP stream is established. socket is an object of type net.Socket. Usually users will not want to access this event. In particular, the socket will not emit readable events because of how the protocol parser attaches to the socket. The socket can also be accessed at request.connection. 
15:56 < yorick> ok, so how do I pipe from that stream?
15:56 < yorick> I need the raw HTTP data
15:56 < r1card> sinclair|nz, I know. I've been doing this for a long time, but I'm rethinking my assumptions.
15:57 < sinclair|nz> r1card: CSS shouldn't really be binding behavior 
15:57 < sinclair|nz> it should be binding visual things
15:57 < r1card> sinclair|nz, well in this case theming should require a simple change of class="" no?
15:58 < sinclair|nz> yes
15:58 < sinclair|nz> its perfectly accepted practice to do it this way
15:59 < r1card> sinclair|nz, well, except for the parts where it's not enough :P
16:03 < r1card> sinclair|nz, question. Can I make the TS compiler find classes in any other way except listing the filepath in the source with those /// comments
16:06 < sinclair|nz> r1card: um, yeah, you can
16:06 < sinclair|nz> import mymodule = module("mymodule");
16:07 < sinclair|nz> that will load in the types in "mymodule.ts"
16:07 < sinclair|nz> i personally don't use it tho
16:08 < sinclair|nz> as nice as it is to be able to dynamically load in modules with AMD, i practice, i never find myself writing things that need that
16:08 < sinclair|nz> i just compile the lot
16:09 < sinclair|nz> tsc --out output.js source.ts 
16:09 < r1card> sinclair|nz, well I don't mean dynamically loading them.
16:09 < r1card> sinclair|nz, I mean merging it at compile time
16:10 < sinclair|nz> tsc --out output.js input.ts
16:10 < r1card> Well.
16:10 < sinclair|nz> where input.ts contains all your <reference> 's
16:10 < sinclair|nz> i found it simpler to do it that way rather than build other ways
16:10 < r1card> sinclair|nz, " Can I make the TS compiler find classes in any other way except listing the filepath in the source with those /// comments"
16:10 < r1card> sinclair|nz, I meant <reference> above :P
16:10 < sinclair|nz> i.e tsc @buildfile
16:11 < sinclair|nz> yes, you can
16:11 < sinclair|nz> tsc @buildfile
16:11 < sinclair|nz> where build file contains ....
16:12 < sinclair|nz> --out output.js a.ts b.ts c.ts etc
16:12 < r1card> sinclair|nz, so I'll have to write a little parser myself I guess.
16:12 < sinclair|nz> its easier to resolve source by creating a index.ts with all the things you want in the compilation listed as <reference> 's
16:13 < r1card> sinclair|nz, in order to build this build file
16:13 < sinclair|nz> hang on...
16:13 < r1card> sinclair|nz, having a main file is my current practice.
16:13 < r1card> But I wish I wouldn't have to type it manually
16:14 < sinclair|nz> hmm, i removed a math library i had up there on github
16:14 < sinclair|nz> i built that using a buildfile
16:14 < sinclair|nz> build files are easy, they are just what you would normally type at the command line
16:15 < r1card> sinclair|nz, they're easy, the hard part is having to maintain them.
16:15 < sinclair|nz> you don't have to
16:15 < r1card> sinclair|nz, especially if I move one of the libraries I use.
16:15 < r1card> And all filepaths change
16:15 < sinclair|nz> not if you run from the current directory, its really not a big deal
16:16 < sinclair|nz> like i say, its just easier to have a index.ts 
16:16 < sinclair|nz> with all the things you want in the compilation
16:16 < r1card> sinclair|nz, I don't :) I have a structure like /src    /lib/library-name-version/...
16:16 < sinclair|nz> doesn't matter
16:16 < r1card> sinclair|nz, when the library updates, the version changes
16:16 < r1card> all filepaths change
16:16 < sinclair|nz> well, you could write something to automate the process
16:16 < r1card> I guess so.
16:17 < sinclair|nz> its not a big deal to do that on node, or C# 
16:17 < r1card> sinclair|nz, I guess I'll have to tokenize JS and look for patterns, like "require()"
16:17 < r1card> then eliminate them
16:17 < sinclair|nz> why?
16:17 < r1card> and make a build file
16:17 < r1card> well, I have no other ideas.
16:17 < nathan7> like browserify, r1card?
16:18 < r1card> nathan7, quite right actually. This does the same.
16:18 < sinclair|nz> r1card: its easy not to require, or use import m = module(m) or whatever
16:18 < r1card> nathan7, thanks ;)
16:18 < nathan7> I personally use Component
16:18 < nathan7> But Browserify operates in the way you mention
16:18 < r1card> sinclair|nz, well, how would my buildfile builder know what classes I'm using.
16:18 < sinclair|nz> r1card: by walking the references 
16:19 < r1card> sinclair|nz, that still requires a parser.
16:19 < r1card> nathan7, this? http://componentjs.com/
16:19 < sinclair|nz> seriously, try out https://npmjs.org/package/typescript.api
16:20 < sinclair|nz> ^ i wrote this to handle source resolution and automated builds
16:20 < nathan7> r1card: No
16:20 < nathan7> r1card: component.io
16:20 < nathan7> r1card: https://github.com/component
16:20 < sinclair|nz> r1card: look at the example for resolve() 
16:21 < nathan7> r1card: component doesn't parse deps out of files, it does explicit dep listing
16:21 < sinclair|nz> it automatically gives you all the things needed to compile
16:21 < r1card> nathan7, I see
16:21 < r1card> sinclair|nz, I'll check it out thanks :)
16:21 < r1card> sinclair|nz, but I'm not sure what exactly you implement
16:22 < sinclair|nz> its all there in the example
16:22 < sinclair|nz> you pass it an array of source filenames and it returns all the deps
16:22 < sinclair|nz> you can then pass those to the compiler
16:23 < sinclair|nz> take you a few minutes to get the gist looking at those examples
16:23 < sinclair|nz> the only thing it currently doesn't do is spit out declaration files and source maps, ill be updating that after i finish up on what im currently working on
16:26 < r1card> sinclair|nz, which particular method here gives back a list of classes I referred to (without using <reference>)
16:27 < sinclair|nz> reflect
16:28 < sinclair|nz> r1card: i don't see why you want that however, but you can dig around in reflect
16:29 < r1card> sinclair|nz, what I want is basically to specify a reference by *namespace and classname* and not by *filepath*
16:29 < r1card> and have it work.
16:29 < r1card> I'll try reflect, although typically reflection means it'd give me the declarations of the file.
16:29 < r1card> And not what the file calls.
16:30 < sinclair|nz> r1card: in order to reflect, its need to compile first, and in order to compile, it needs to resolve
16:31 < sinclair|nz> and in order for it to resolve, it needs to traverse <reference>
16:31 < r1card> :|
16:31 < sinclair|nz> r1card: what you are asking is not possible 
16:32 < r1card> sinclair|nz, it's possible, but I guess it needs to work a bit differently.
16:32 < sinclair|nz> well, it is entirely possible for you to workout what classes reference other classes
16:32 < sinclair|nz> but the "correct" way to do that is to analyze AST
16:32 < r1card> sinclair|nz, 1) a folder (or list of folders) are scanned recursively and all symbols defined (modules, classes, interfaces) are written to an index file 2) references to a symbol get resolved against the index
16:32 < sinclair|nz> any other way would be hackery 
16:33 < r1card> sinclair|nz, well ///<reference> is a hackery ;)
16:33 < sinclair|nz> r1card: so, you are trying to build up a index file?
16:33 < r1card> sinclair|nz, well I'll have to.
16:33 < r1card> sinclair|nz, it's step 1
16:33 < r1card> :)
16:34 < sinclair|nz> ../// <reference> is the same as #include "code.h"
16:34 < r1card> yeah
16:34 < sinclair|nz> its not hackery at all
16:34 < r1card> the problem is I want to import foo.bar.ClassName; 
16:34 < r1card> I don't want to include "filename"
16:34 < sinclair|nz> r1card: you don't have to do this, just add <reference> to your source files
16:35 < r1card> Neither is hackery, just, one is filesystem centric, the other is symbolname centric
16:35 < r1card> sinclair|nz, I can't. My filepaths change too much.
16:35 < sinclair|nz> r1card: i think you underestimate the work required to do what you are asking
16:35 < r1card> sinclair|nz, I did it in PHP :P
16:35 < r1card> sinclair|nz, cause I'm slightly nuts
16:36 < r1card> But also because I like automatic resolution. 
16:36 < sinclair|nz> you get automatic resolution from /// <reference>
16:36 < r1card> How
16:36 < r1card> does it accept namespace.Class?
16:36 < sinclair|nz> and...all the tooling TS provides works directly off <reference>
16:36 < r1card> I don't mind TS using <reference>
16:37 < sinclair|nz> then use it
16:37 < r1card> But I see it as an intermediate step.
16:37 < r1card> I can't have my code like that.
16:37 < r1card> I'll need to write a filter.
16:37 < sinclair|nz> i don't follow at all
16:37 < sinclair|nz> folder paths shouldn't be changing
16:38 < sinclair|nz> all references support relative references
16:38 < r1card> source: import foo.bar.Baz; ---->  find where Baz is ---> filtered source:  ///<reference "whatever/Baz.ts"/>
16:38 < r1card> sinclair|nz, mine change
16:38 < sinclair|nz> don't use import
16:38 < sinclair|nz> use reference
16:38 < r1card> I am.
16:38 < r1card> Except indirectly.
16:39 < r1card> sinclair|nz, I'm not sure why you don't accept this but my folders do change :P
16:39 < r1card> sinclair|nz, I use a format called bundles, similar to Objective C / Cocoa frameworks.
16:39 < sinclair|nz> writing invalid syntax into your source files to do something already supported by the compiler is crazy tho
16:39 < r1card> sinclair|nz, the name of the bundle is arbitrary.
16:40 < sinclair|nz> also, you have no way of validating that your automatic resolution is correct
16:40 < sinclair|nz> you lose all your tooling support
16:40 < r1card> sinclair|nz, I know, it's tough.
16:40 < r1card> sinclair|nz, but how can I do it?
16:40 < r1card> I can't.
16:40 < r1card> TS has decided for some reason to filepath all the things.
16:40 < sinclair|nz> and, your source "wont" compiler until its gone through your  resolution hackery
16:40 < r1card> Would've been better if the compiler accepted a list of "classpaths"
16:41 < sinclair|nz> r1card: its not C#
16:41 < r1card> I launch the compiler with a set of classpaths, and reference refers to classnames, not filenames
16:41 < sinclair|nz> unfortunately 
16:41 < r1card> sinclair|nz, it's pretty much C# for JS ;)
16:42 < sinclair|nz> but TS is not C#, and names are not loaded prior to compilation, you have nothing to reference
16:42 < r1card> sinclair|nz, there's no technical hurdle here aside from the tooling has decided not to do that.
16:42 < sinclair|nz> module names can be anything
16:43 < r1card> sinclair|nz, as I noted above I don't mind "import"-ing each class a file uses explicitly
16:43 < r1card> sinclair|nz, as long as I don't mention filepaths.
16:43 < sinclair|nz> r1card: well, i can't really help you with your problem, and losing tooling is basically throwing out one of the main reasons to use TS in the first place
16:43 < sinclair|nz> so how do your folder paths change?
16:43 < sinclair|nz> out of curiosity ?
16:43 < r1card> sinclair|nz, in two ways.
16:44 < r1card> sinclair|nz, first the bundle names are arbitrary as I mentioned.
16:44 < r1card> sinclair|nz, this is so people can be specific about what's in the bundle, which version, debug version or not, etc.
16:44 < r1card> sinclair|nz, second reason is "non-namespace folders"
16:45 < r1card> sinclair|nz, you know how Java organizes classes on disk, right
16:45 < sinclair|nz> r1card: that has little to do with TS
16:45 < r1card> sinclair|nz, this encourages some people to create a namespace just to isolate files in a folder.
16:45 < sinclair|nz> r1card: so, why not just create a bundle.ts file that lists all the things you want in your bundle?
16:45 < sinclair|nz> the only thing in bundle.ts is <references>
16:46 < spots> which sqlite library shoud i use in nodejs??
16:46 < r1card> sinclair|nz, I'll move to #typescript
16:46 < sinclair|nz> righto
16:46 < hlysig> Is there any public channel for the express.js framework?
16:47 < yorick> what's the newfangled equivalent to stream.destroy()?
16:48 < ome> I don't understand what problem is TypeScript trying to fix?
16:50 < ome> Anyone else thinks it's merely a political move from Microsoft rather than anything pragmatic?
16:53 < nathan7> ome: It's for the C# people
16:53 < ome> yorick: #express
16:53 < yorick> emilsedgh: what?
16:53 < yorick> ome: what?
16:53 < ome> sorry, wrong name.
16:53 < yorick> emilsedgh: sorry, wrong name.
16:54 < ome> hlysig: I meant.
16:54 < hlysig> ah thanks ome :D
16:54 < ome> Not a problem. :)
16:55 < ome> nathan7: So basically, JavaScript.net in a sense?
16:55 < nathan7> ome: Yep
16:58 < yorick> so what's the newfangled way to do stream.destroy()
16:59 < geNAZt> well you cant destroy them anymore
16:59 < yorick> geNAZt: so how will I get the destroy tests to pass? :P
16:59 < geNAZt> which destroy test ?
16:59 < yorick> geNAZt: the tests on the module I'm fixing
17:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:00 < yorick> it currently does stream.on('error', function(){stream1.destroy(); stream2.destroy()})
17:01 < bubo> is anyone using sequelize and has a project on github? I wanna see your file structure
17:01 < geNAZt> stream1 and stream2 are writestreams ?
17:01 < yorick> geNAZt: stream1 is a readstream, stream2 is a writestream, stream1.pipe(stream2)
17:01 < geNAZt> well you could pause the readstream and then null it
17:02 < geNAZt> for the writestream you can call .end() and null it
17:02 < geNAZt> but its ugly :D
17:04 < yorick> geNAZt: the http module does the most ugly thing every by defining stream.ondata and stream.onend instead of being a proper stream user already
17:04 < yorick> I have enough ugliness in the module trying to get the raw http data
17:04 < geNAZt> well why dont you use tcp servers for this ?
17:05 < yorick> geNAZt: the module parses the http headers and then either sends the http data elsewhere or handles it itself based on the http data
17:05 < geNAZt> yes you can make a tcp server and a header parser which does this
17:06 < sinclair|nz> yorick: why are you not using a http request ?
17:06 < geNAZt> well he is a http server
17:06 < geNAZt> but he doesnt want to parse the whole http request
17:06 < geNAZt> since he doesnt need it
17:06 < yorick> I'm fixing https://github.com/substack/bouncy alright :P
17:06 < nathan7> You can just .pipe the HTTP stream
17:06 < yorick> geNAZt: well in the callback the user can either bounce it or res.write()
17:07 < yorick> nathan7: you cannot.
17:07 < yorick> nathan7: "In particular, the socket will not emit readable events because of how the protocol parser attaches to the socket. "
17:07 < nathan7> yorick: ..lol wut
17:07 < geNAZt> yes
17:08 < nathan7> yorick: an HTTP req is not a readable stream?
17:08 < yorick> nathan7: nope
17:08 < nathan7> yorick: That's fucked up
17:08 < yorick> well technically yes, but the http module ruins it
17:08 < yorick> https://github.com/joyent/node/blob/master/lib/_http_server.js#L339
17:09 < yorick> apparently when someone defines .ondata and .onend the stream stops being sane
17:11 < geNAZt> well it should be a socket
17:11 < geNAZt> and a socket is a readable stream
17:11 < yorick> but not this one :P
17:12 < nathan7> So how exactly are you supposed to consume the body?
17:13 < geNAZt> ah i see what you mean
17:13 < geNAZt> you can consume the body
17:13 < geNAZt> thats not the problem
17:13 < geNAZt> but you cant access the socket stream
17:14 < nathan7> That's all you need to do
17:14 < nathan7> Send the same headers and pipe the body
17:14 < nathan7> piping the socket would be wrong
17:14 < geNAZt> well and if the parsing of alle headers is to much ?
17:14 < geNAZt> all*
17:14 < nathan7> then you shouldn't be using core-http
17:18 < bubo> Any moduel for handling registration and login/logout in express app? except passport.js
17:18 < bubo> module*
17:19 < geNAZt> why not passport ? :D
17:19 < bubo> just asking :D
17:19 < bubo> I am using passport and mongodb
17:20 < yorick> hmm, after using this for a while I'm really not sure streams2 are really an improvement
17:20 < geNAZt> well they are
17:20 < geNAZt> because they fix some problems
17:20 < yorick> geNAZt: the added complexity is huge and the documentation is terrible
17:20 < geNAZt> streams1 doesnt have real backpressue for example
17:20 < geNAZt> also you could miss data with stream1
17:21 < geNAZt> yes true
17:21 < yorick> I constantly need to look at the source to find out how to do things
17:21 < geNAZt> well in nodejs i always read the source
17:21 < geNAZt> since the docs arent good (sorry)
17:22 < yorick> the promise of not breaking old modules also didn't really come through
17:23 < geNAZt> they try not to do so
17:23 < geNAZt> but they dont promise this to you
17:24 < geNAZt> but i think streams2 are a good addition into nodejs
17:24 < geNAZt> even if they break some code
17:24 < yorick> they break *all* code
17:24 < geNAZt> nah not all
17:25 < yorick> I had to replace a perfectly fine stream.pipe(otherstream) with var oldondata = stream.ondata; stream.ondata = function(d, start, end) { otherstream.push(d.slice(start, end)); oldondata.call(stream, d, start, end) } /* repeat for stream.onend */
17:25 < geNAZt> but its a non stable version
17:26 < yorick> 0.10 is stable
17:26 < geNAZt> lol
17:26 < yorick> supposed to be
17:26 < geNAZt> 1.x is stable :D
17:26 < geNAZt> these versions are development versions
17:26 < yorick> inb4 gonna break everything again
17:27 < AAA_awright> geNAZt: s/backpressure/congestion control/
17:27 < yorick> oh well, 548/549 tests passing :)
17:45 < bmatusiak_> sinclair|nz  http://tomasz.janczuk.org/2013/03/run-c-and-nodejs-code-in-process-with.html
17:47 < sinclair|nz> bmatusiak_: awww, i was going to write that
17:47 < sinclair|nz> last year too, i would have beaten him to it
17:47 < sinclair|nz> the lesson is, don't procrastinate 
17:48 < bmatusiak_> lol
17:54 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * e515d71 : darwin: make two uv__cf_*() functions static - http://git.io/R72LZg
17:55 < Ritzton> Hello, I am using child_process spawn, the problem is when string arguments contain special character like "ç", it is replaced by "?", do you know how I can deal with this problem ?
17:58 < mscdex> Ritzton: convert it to a binary string?
17:59 < Ritzton> mscdex> would you have examples please ?
18:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:03 < mscdex> Ritzton: you might have to use iconv/iconv-lite to convert since that's a latin-1 character
18:03 < mscdex> Ritzton: which node does not have built-in support for
18:05 < Ritzton> mscdex> in fact it is working under my debian server in production, but not in local in windows in development
18:06 < Venemo_N9> Ritzton, debian and windows have different default character encodings
18:15 < gaf> hi, i have nginx running as a proxy for 2 node.js sites. when i created the vhost for the second site, it worked, but now the other site, that was working before, give me a 502. ideas?
18:16 < motaka2> Is it right to write very big apps with Node?
18:17 < robertkowalski> i am searching for talks about leveldb
18:17 < robertkowalski> any hints?
18:17 < pachet> motaka2 debatable
18:17 < pachet> i would say, keep things small, degradable, composable
18:17 < pachet> if the interplay of small things yields large results, then there you are
18:20 < bnoordhuis> motaka2: what's your definition of 'very big'?
18:20 < motaka2> pachet: I dont understand please explain in simple english siince I am not familiar with slangs
18:20 < motaka2> bnoordhuis: 10 thousand lines
18:20 < pachet> build using small pieces
18:21 < pachet> recycle those pieces
18:21 < pachet> keep things simple wherever possible
18:21 < gaf> it is all about what your app do dude
18:21 < bnoordhuis> ^ that
18:22 < bnoordhuis> 10k without further context is meaningless
18:24 < Chiffon> hi all
18:25 < pachet> hi
18:26 < Chiffon> a little question about socket.io callbacks
18:27 < Chiffon> i've a boolean var, like bValid = false
18:27 < Chiffon> my callback give the information than bValid = true
18:28 < Chiffon> but an alert before my emit on bValid give me "false"
18:28 < Chiffon> before than an alert in my emit function qui me "true"
18:28 < Chiffon> know what i mean ?
18:29 < Chiffon> is their a way to have a "synchronous callback"
18:29 < pachet> contradiction
18:29 < Chiffon> with a break, wainting the result ?
18:30 < pachet> there are a couple of ways to do it, but you should try and get your solution working using callbacks
18:30 < pachet> eg, dont use that value until it's been set to the value you're expecting
18:31 < Chiffon> thats my point, how to do that
18:31 < pachet> put the relevant logic in the callback?
18:34 < Chiffon> exemple:  bValide = function () { var isValid = false; oSocket.emit('try', oData, function(response) { isValide=response.validation }}); return isValid }
18:34 < hashset> anyone have experience with https://npmjs.org/package/express-zip that can provide better code examples? I swear my res.zip(…) is formed correctly
18:35 < Chiffon> if response.validation = true, bValid still false :(
18:36 < pachet> bValide = function ( callback ) { oSocket.emit('try', oData, function ( response ) { callback(null, response.validation); }); };
18:37 < Chiffon> ok i will try that, thx
18:42 < hashset> I can provide my code if it would help
19:05 < bubo> I have Subscriptions and items.. Subscriptions.hasMany(Items) --> How do I find the items for a specific subscription? --- Using sequelize js
19:06 < jtomasrl> is this a good way of sharing a mongodb connection between modules? https://gist.github.com/jtomasrl/5608613
19:08 < gluxon> jtomasrl: Why wouldn't it be?
19:08 < yorick> how does the HTTP module take care of backpressure if it uses stream.ondata?
19:08 < gluxon> jtomasrl: Except, I don't know why you would create another module just to hold a connection.
19:09 < jtomasrl> gluxon: how can i share the same connection between dfferent modules without having it on a separate one?
19:09 < hashset> help appreciated:  I'm trying to use https://npmjs.org/package/express-zip to send a zipfile back to a post call in some client-side JS, here is my post on the server and stacktrace http://pastebin.com/2nPa6Wau
19:11 < gluxon> jtomasrl: Create the connection in your main app?
19:11 < gluxon> Then pass that handle/object around.
19:12 < jtomasrl> in the routes as a function attribute?
19:12 < jtomasrl> server.get("/stores", stores.all(mongoConnection)) something like this?
19:13 < kutchbhi> any recommended memcache client ?
19:14 < kutchbhi> for a guy who knows nothing about memcache, except that 'caching is good'
19:16 < jtomasrl> kutchbhi: https://github.com/elbart/node-memcache
19:17 < kutchbhi> Thanks!
19:17 < r1card> kutchbhi, you should really need caching across machines, because otherwise Node already offers in-memory caching for you.
19:17 < jtomasrl> try redis
19:19 < kutchbhi> r1card: in other words: if my requirements go so big that my app is distributed across machines, only then would I need something like memcache ?
19:19 < r1card> kutchbhi, no
19:19 < r1card> kutchbhi, only if you need *caching* across machines. 
19:20 < kutchbhi> ok i get it
19:20 < r1card> kutchbhi, there are many distributed apps which are just fine with *local caching*
19:20 < kutchbhi> r1card: thanks 
19:21 < r1card> kutchbhi, typical example is a cache so large, it can't fit in RAM for a single machine.
19:21 < r1card> kutchbhi, and since fetching cache from another machine is slow, the operation must be even slower.
19:22 < kutchbhi> hmm
19:22 < r1card> The reason jtomasrl suggests redis is because storing parts of the data on disk (like redis does) is a solution for the "doesn't fit in RAM" problem.
19:23 < r1card> kutchbhi, so you must decide is sharing cache faster than generating multiple sets of cache in redis.
19:23 < r1card> kutchbhi, which again depends on your app.
19:23 < r1card> kutchbhi, basically any simple SQL query won't be slow enough to warrant a lot of that setup.
19:28 < hashset> any suggestions?
19:30 < mattclements> Hey - anybody here any good with node-webkit on OSX?
19:31 < gluxon> mattclements: Does it not work? :(
19:32 < bubo> I have Subscriptions and items model.. Subscriptions.hasMany(Items) --> How do I find the items for a specific subscription? --- Using sequelize js
19:32 < mattclements> Nope - it works brilliantly, just a few Q's, as I am working on a pretty huge project - starting to loose the wood for the trees!
19:40 < Shayanjm> anyone had any experience using 'natural' for natural language processing?
20:17 < Fuzzyma> hey guys - iam using compoundjs. Is their a way to get the name of the current controller and action that the app is executing?
20:43 < khmer> hey gorgeouses, has anyone ever called gruntjs from inside another script
20:56 < raven> is there is a problem on nodejs.org
20:56 < raven> must of the links for documentation is not working
20:56 < raven> most*
20:57 < gluxon> raven: Works fine for me.
20:57 < gluxon> If you're using Chrome, try using Firefox :D
20:57 < raven> mm ok i will try again 
20:57 < ljharb> or safari.
20:57 < gluxon> ljharb: Nah, just Firefox.
20:57 < ljharb> chrome's always unpredictably buggy :-) safari works perfectly for me
20:57 < ljharb> firefox's web inspector is junk imo
20:58 < raven> Firefox 
20:58 <@isaacbw> firefox itself or firebug?
20:58 < gluxon> ljharb: Firefox's Developer Tools is amazing... are you kidding?
20:58 < gluxon> *are amazing
20:58 < Gabriel403> O.o
20:58 < ljharb> firefox's built in one. i find it really annoying to quickly get to the JS console, and to scripts for debugging
20:58 <@isaacbw> seriously, I think firefox is pulling ahead as far as inspction goes
20:58 < ljharb> maybe it's better since i last looked
20:58 < ljharb> but the interface is highly unintuitive for me
20:58 <@isaacbw> oh, for js. I prefer it over chrome for design
20:58 < gluxon> The developer tools are awesome :(
20:59 < gluxon> ljharb: Interface is the best part -.-
20:59 < raven> it is not working folks really http://www.nodemanual.org/
20:59 < gluxon> raven: nodemanual.org is different from nodejs.org
20:59 < gluxon> I was replying that nodejs.org/api works fine.
20:59 < raven> sorry i was not clear
20:59 < gluxon> nodemanual.org doesn't work at all for me.
20:59 <@isaacbw> lol
21:00 < gluxon> I've never even heard of nodemanual.org
21:00 < raven> no i mean that site is down http://www.nodemanual.org/
21:00 < raven> http://nodejs.org/community/
21:00 <@isaacbw> where did you get that link
21:00 <@isaacbw> ah
21:00 < raven> here is the link http://nodejs.org/community/
21:01 < gluxon> raven: http://www.downforeveryoneorjustme.com/nodemanual.org
21:01 < gluxon> Nothing to do but wait for it to come back.
21:02 < raven> so i think i will just download a book or somthing
21:02 < gluxon> The official API's work..
21:02 < raven> yea i know but 
21:02 < raven> i just want more info
21:03 < raven> thanks qluxon for your help
21:40 <@isaacbw> nothing to do but wait
21:41 < mykul> Waiting for a train to go?
21:45 <@isaacbw> has anyone written a simple static file server utility that will run scripts with every file request?
21:47 < gluxon> isaacbw: So a static file server?
21:47 <@isaacbw> static file server + watch
21:48 < gluxon> isaacbw: You can't make a watch with Node.js. You need hardware for that.
21:49 <@isaacbw> oh, silly me
21:50 < RLa> why not use express/connect static middleware?
21:50 < ningu> can I make static electricity in nodejs?
21:51 <@isaacbw> only if you curry all your functions
21:51 < ningu> sounds tasty
21:51 < Aria> ningu: No, but you can add electricity to your constructor's prototype directly ;-)
21:52 < gluxon> isaacbw: That's the second time I've heard curry today. What is with "currying"?
21:52 < ningu> gluxon: it's useful
21:52 < gluxon> If this is a concept I should be using in Node.js, I would be like.. grrr..
21:52 <@isaacbw> a functional programming concept that was mentioned on hacker news today I think
21:52 < ningu> it just means making a new function that calls another with one or more of its arguments pre-set
21:53 < gluxon> isaacbw: It was.
21:53 < gluxon> But why should I use it?
21:53 <@isaacbw> it wouldn't really be useful for node.js
21:53 <@isaacbw> it's more a matter of mathematical purity
21:53 < ningu> actually there are situations where it is
21:54 < ningu> in a more ad hoc way
21:54 < AAA_awright> gluxon: Maybe not, but with jsemc2 you can emulate the physical workings of a watch and 3D print it if you like
21:55 < AAA_awright>  /s
21:55 < ningu> for example, say you have a function that connects to foo.com and does some command specified in the second parameter: connect(foo, param). you could do function(param) { return connect('foo.com',param) }
21:56 < ningu> and then you wouldn't repeat 'foo.com' each time or the variable it's in, and you've captured in your code that you want all of those calls to have the same first param
21:56 < AAA_awright> There's also the Function.prototype.bind function call
21:56 < ningu> AAA_awright: is that the same idea though really? well, I suppose since this is a parameter of sorts
21:57 < AAA_awright> >> function F(a, b){ console.log(arguments); } (F.bind(null, 'A')).('B');
21:57 < purr> AAA_awright: SyntaxError: Unexpected token (
21:57 < AAA_awright> uh
21:57 < AAA_awright> >> function F(a, b){ console.log(arguments); } (F.bind(null, 'A'))('B');
21:57 < purr> AAA_awright: undefined; Console: {0: 'A', 1: 'B', callee: (function) F, length: 2}
21:57 < ningu> hmm
21:57 < ningu> I forgot you could use bind for more than 'this'
22:03 < hashset> ok, let's try something more basic.  I have an express server and fire a $.post(…) client-side, I build a .zip file in the server and I need to send that .zip as a download back to the client.  Can anyone suggest tips on figuring this out?
22:04 < lacrymology> I'm getting a most strange error message
22:04 < lacrymology> ERROR: spawn ENOENT
22:04 < lacrymology> no info
22:06 < gluxon> hashset: What are the complications of that?
22:06 < s5fs> hashset: you could look at res.download
22:07 < ningu> hashset: I built something like that by spawning 'zip' in the shell 
22:08 < ningu> and streaming stdout back to the client
22:08 < Aria> hashset: Doesn't sound like purely static file serving -- only in the 'zip already exists' case is that what that is.
22:08 < ningu> protip: foo.pipe(res) to stream http body
22:09 < ningu> in this case foo could be the stdout of the spawned zip process
22:10 < hashset> everything is behaving correctly up until the res.download().  first, I'm not entirely sure what to throw as parms in that invocation (I'm relatively new to node),  would that just be the route to the .zip file sitting in the root dir of the server?  ie res.download(__dirname + "file.zip"); 
22:10 < ningu> hashset: yes, if the file already exists
22:10 < ningu> are you sure it's not still being built when you call it?
22:11 < hashset> i wrote the code to build the zip, upon the post invocation stuff happens and it appears
22:11 < ningu> ok but you can't call res.download until the zip has been fully written
22:11 < ningu> or you can stream it
22:12 < ningu> but what you definitely can't do is res.download while it's being made :)
22:12 < hashset> so what you are saying is that I need to force synchronization if using res.download() ?  
22:12 < ningu> it's still async
22:12 < ningu> you would use a callback
22:12 < hashset> ok
22:12 < ningu> hashset: gist/pastebin your code
22:15 < hashset> it's a mess because I've been fighting for hours but hopefully it's readable
22:15 < hashset> http://pastebin.com/dVSVYKCj
22:16 < ningu> hashset: first comment, fs.mkdir is not sync
22:17 < ningu> hashset: I would suggest using the mkdirp module and then do mkdirp('routes/tmp/' + directory)
22:17 < ningu> still won't be sync but that means only one call
22:17 < ckknight> hashset: file and name are function-scoped, not block-scoped within the for loop
22:17 < hashset> thanks, will do. the 'files' var holds blob urls and I'm writing them to the server
22:17 < ckknight> hashset: so you keep acting on the very last file
22:18 < ningu> ckknight: good catch
22:18 < ningu> you can solve that by using files.forEach(function (file) { ... })
22:19 < ningu> or rather, function (name) to match your existing code
22:20 < hashset> ok, fixing
22:20 < rvagg> robertkowalski: resources are being collected here: https://github.com/rvagg/node-levelup/wiki/Resources
22:20 < ningu> and you need to move res.download into the callback to zip.finalize
22:20 < hashset> as a side note I know that logic isn't totally correct, I'm just totally blocked on getting any file to be sent back
22:21 < ningu> hashset: move res.download as I said and it will not be returned until zip.finalize is done
22:25 < hashset> ok, fixing
22:35 < brianng> hi im hving trouble with jquery and socket.io
22:36 < brianng> when i get info back from socket io and i want to manipulate the number of elements based on the data i got
22:36 < brianng> jquery stops working 
22:36 < ningu> brianng: that isn't really a node question, you should look in your browser's javascript console to see if there are any errors
22:37 < hashset> ningu: new code http://pastebin.com/3hA3DMh0 excuse the mkdir and for each problems, just trying to get the .zip back
22:39 < hashset> i believe at this point some http headers may not be correct in the res
22:40 < ningu> does 'directory' exist?
22:40 < ningu> you only mkdir 'routes/tmp/' + directory
22:40 < ningu> res.download should take care of the headers
22:42 < hashset> 'directory' is the random number used as the 'name'.zip to make it unique so directory could be 1689771264 making the .zip file to be sent 1689771264.zip
22:42 < hashset> bad naming i guess
22:43 < ningu> ah ok
22:49 < hashset> ningu: problem is, still not getting anything back in the callback from the $.post(…) on the client
22:49 < ningu> is the zip file being created correctly?
22:50 < ningu> is there an error in the jquery response?
22:50 < ningu> I would just try debugging each part to see where the issue is
22:52 < hashset> it's almost like res.download() doesn't send the response (correct or not).  if I say res.end() I get something back in the client, albeit 'null
22:52 < ningu> you could try res.download(__dirname + '/' + directory + '.zip')
22:52 < ningu> not sure if it needs a full path
22:57 < hashset> full path added.  I get no ENOENT errors so I guess all paths are found.  nothing back on client.
23:00 < ningu> hashset: I would break it down and try e.g. making a test file and an action with res.download() for that
23:00 < ningu> do it with a GET from your browser first, then try from jquery
23:01 < ningu> there are a bunch of pieces you're working with and you need to narrow down where in the chain it's going wrong
23:02 < hashset> alright
23:02 < DarkArgon> i like to use crypto.randomBytes(8).toString('hex') for random strings...
23:02 < ningu> I tie random knots with random strings
23:03 < hashset> DarkArgon: looks hot, will use
23:05 < Chiffon> anyone can speak with me in private about socket.io and callback : newbie question
23:05 < ningu> why in private?
23:05 < DarkArgon> it actually took me a while to understand that joke ningu. don't tell anybody
23:06 < ningu> hehe
23:06 < ningu> I like radically changing context at a moment's notice
23:06 < ningu> dunno why
23:06 < Chiffon> because i'm really a newbie :-s
23:06 < ningu> Chiffon: ok, but others are newbies too, we generally discuss these things in the channel
23:06 < Chiffon> mmh ok
23:06 < DarkArgon> Chiffon there is a free codeschool weekend
23:06 < ningu> private consulting generally comes with an hourly rate :P
23:06 < DarkArgon> might wanna check that out
23:06 < ningu> oh, forgot about that
23:07 < boogyman> zeeflo: because you're using a transitional doctype after that we deprecated for 10 yrs
23:07 < Chiffon> my problem is maybe about javascript and closure
23:07 < boogyman> sry
23:07 < ningu> Chiffon: easiest thing to do is show us your code
23:08 < ningu> use gist.github.com or pastebin.com
23:08 < AaronMT> ಠ_ಠ
23:08 < Chiffon> ok
23:08 < DarkArgon> or hastebin.com
23:09 < ljharb> i don't like how hastebin aggressively assumes coffeescript when it's nice, normal javascript
23:09 < ningu> hastebin usually gets the extension wrong
23:09 < ningu> but the site is easy to use
23:09 <@isaacbw> you can change the extensions
23:09 <@isaacbw> *-s
23:10 < Chiffon> http://pastebin.com/DaS27uE9
23:10 < Chiffon> there is my function
23:10 < Chiffon> with my socket.io emit, but my bEstValid still "false", when the respnse is "true"
23:11 < Chiffon> because the function continue is execution during the response of the server
23:11 < Chiffon> i think it's really a classic problem for newbies
23:11 < Chiffon> but i dont get it
23:11 < Aria> Chiffon: Because it's a callback. That function gets called back AFTER the return.
23:11 < ningu> Chiffon: you need to make the function take a callback
23:11 < ningu> chargerPays: function (sPays, cb) {
23:12 < Aria> read thing(function() { } 
23:12 < ningu> and instead of bEstValide = !reponse.bEstDejaPris;
23:12 < Aria> ) as "later(function() {}
23:12 < ningu> cb(null, !reponse.bEstDejaPris);
23:12 < ningu> the first callback argument is always the error
23:13 < Chiffon> ok but how ans where to define this cb function ?
23:13 < Chiffon> why is there "null" in ur exemple
23:14 < ningu> Chiffon: in node callbacks the first argument is used to indicate an error
23:14 < ningu> null means no error
23:14 < ningu> the callback would be passed by the caller of the function
23:14 < Chiffon> ok
23:14 < ningu> so someone will do blah.chargerPays(something, function (error, estValide) { ... })
23:15 < Chiffon> ok i will try
23:20 < Chiffon> sorry ningu, but can you explain this part : blah.chargerPays(something, function (error, estValide) { ... })
23:20 < Chiffon> i put my return in my callback function
23:20 < ningu> Chiffon: the second argument is the cb parameter
23:21 < Chiffon> and i kick it from my chargerPays function ?
23:21 < ningu> no
23:21 < ningu> you pass the return value as an argument to the callback
23:21 < ningu> the callback is a parameter to the function
23:22 < Chiffon> yes but, how to obtain : bValidation = true with bValidation = oSio.chargerPays(x, function (error, estValide) {});
23:22 < nathan7> never
23:23 < Chiffon> and use bValidation with the real result directly after ?
23:23 < nathan7> Because at the moment the assignment happens, that value isn't there
23:23 < nathan7> that value is not there yet
23:23 < Chiffon> :(
23:23 < ningu> Chiffon: it will be send as the estValide parameter to the callback
23:23 < Aria> Yeah. Once async, always async.
23:23 < ningu> and you continue your code execution there
23:23 < ningu> sent*
23:23 < Aria> It takes a while to get used to. This is called 'continuation passing style'
23:24 < hashset> ningu: update: res.download(__dirname + '/' + 'testfile') successfully downloaded the file to the client in a 'get' method called from html.
23:24 < Aria> (where you pass in a function that is the "rest" or "continuation" of the process, where stuff can happen between the two)
23:24 < ningu> hashset: ok. so that much is working at least.
23:24 < Chiffon> so, thr rest of my code must be in my callback function, and it will "wait" the result to execute it
23:24 < nathan7> mhm
23:24 < Aria> Yep.
23:24 < ningu> Chiffon: right
23:24 < Chiffon> oh ok
23:24 < Aria> The best thing to do is to name your functions and pass them by name.
23:24 < Chiffon> thank you very much ! all of u
23:25 < ningu> Chiffon: this is how async operations work in node, that's how you can do many operations at once in one thread
23:25 < Chiffon> ok
23:25 < ningu> well, not exactly "at once"
23:25 < Aria> blah.chargerPays(something, afterValid); function afterValid(error, answer) { ... })
23:25 < ningu> Chiffon: you should read callbackhell.com :)
23:25 < ningu> that goes into more detail on what aria just said
23:25 < Aria> After a while your named functions start looking like a high-level view of what your code does.
23:26 < Chiffon> ok, thx !
23:26 < Aria> function startStuff(cb) { ... }; function afterward(cb) { .... }; startStuff(afterward);
23:27 < Aria> Think of them like unix pipes,
23:27 < hashset> ningu: right, so something in the jquery + 'post' + res.download() is breaking.  would a ridiculous but feasible workaround be to redirect to a get method with the new filename passed-in the query-string?
23:27 < ningu> hashset: no, you can get it to work the original way, you just need to zero in on where the problem is
23:28 < ningu> hashset: try a post next with your test file
23:31 < hashset> ningu: 'post' works also with test file
23:35 < hashset> something must be wrong with the jquery.  just firing the $.post(…) from the jquery to a post with the same res.download() with the test file, nothing happens.
23:36 < ningu> I'm not sure how jquery handles post responses with zip files etc.
23:36 < ningu> it does look at the content-type 
23:36 < ningu> the full set of behavior is only available from $.ajax
23:53 < hashset> ningu: getting further but it looks like jquery doesn't support file downloading out of the box http://stackoverflow.com/questions/4545311/download-a-file-by-jquery-ajax
23:53 < ningu> hmm ok
23:54 < chilts> yeah, Ajax hasn't supported file downloads (not specifically jQuery) ... but I believe there are plans to make it happen soon
23:54 < ningu> chilts: there were 2 other NZers on here last night
23:54 < chilts> cool :)
23:54 < chilts> who were they?
23:54 < ningu> sinclair|* and... umm
23:54 < ningu> I don't remember the other person's name
23:54 < ljharb> you can't force downloads on the client in most browsers.
23:55 < ningu> the other was standoo1
23:56 <@isaacbw> which is a good thing
23:57 <@isaacbw> the internet would be a pretty miserable place if websites could start downloads on their own
23:57 < ljharb> yup, agreed
23:57 < ningu> it's bad enough they can open windows :)
23:57 < ljharb> if you want a user to download something, just set a server header on the url, or let them right click and "save as"
--- Log closed Mon May 20 00:00:09 2013
