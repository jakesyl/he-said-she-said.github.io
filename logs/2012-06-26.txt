--- Log opened Tue Jun 26 00:00:17 2012
--- Day changed Tue Jun 26 2012
00:00 <@isaacs> fatfatfat: yes.
00:00 <@isaacs> fatfatfat: it'll work on 0.6
00:00 < sven_oostenbrink> What does a ~ in front of an object mean?
00:00 <@isaacs> fatfatfat: but on 0.8, you'll see 'exit' happen before stdout and stderr are ended
00:00 < fatfatfat> i have v0.6.16 - and it doesn't work :(
00:00 <@isaacs> sven_oostenbrink: binary not
00:01 < sven_oostenbrink> isaacs: Would that not be ! 
00:01 < sven_oostenbrink> if(!false) etc?
00:01 <@isaacs> sven_oostenbrink: no, ! is boolean not.  not bitwise not
00:01 < sven_oostenbrink> isaacs: ah! okay, thanks!
00:02 <@isaacs> > !1
00:02 <@isaacs> false
00:02 <@isaacs> > ~1
00:02 <@isaacs> -2
00:02 <@isaacs> sven_oostenbrink: ^
00:03 < fatfatfat> isaacs: my problem is I only get the first output… not the % from 0-100
00:04 < CIA-75> node: Bert Belder v0.8 * r74872b0 / (5 files in 5 dirs): v8: upgrade to version 3.11.10.12 - http://git.io/n2gIrg
00:04 < CIA-75> node: Bert Belder v0.8 * rf60def5 / deps/v8/build/common.gypi : v8: reapply floating patches - http://git.io/Nq-ZsQ
00:04 <@isaacs> fatfatfat: oh, it's probably only outputting it if stdout is a tty or something
00:05 < fatfatfat> hm
00:05 < Raynos> I'm using spawn and it returns execvp(): No such file or directory through stdout
00:05 < fatfatfat> isaacs: any way to make it work?
00:06 < myndzi> wtfwtf this is so frustrating
00:06 < myndzi> > add one line of code that doesn't modify ClientRequest.shouldKeepAlive
00:06 < myndzi> > http uses keep-alive
00:06 < myndzi> > remove, http closes connection
00:07 < myndzi> it's like some sort of weird timing crap but i can't see how or why
00:07 < rageous> I'm looking for one word reviews on using Express. Any input?
00:09 < Lorentz> suggs: possibly, try 2.6.*
00:09 < regality> rageous: ossum
00:09 < krishna> rageous: elephant
00:09 < Lorentz> surely it's upgradeable to it in centos
00:10 < suggs> Lorentz: manually upgrading now.
00:10 < rageous> Express must be worth it. 
00:10 < rageous> I'm learning it.
00:11 <@Nexxy> rageous, Express is its own one word review
00:11 < rageous> Nexxy: Let me see... hae I run across any modules that aren't single words?
00:13 <@Nexxy> rageous, could you rephrase the question?
00:14 < rageous> Nexxy: No.
00:14 <@Nexxy> alright then
00:19 < ccowan> What solution are people using to deploy code?
00:20 < gyaresu> ccowan: heroku / rhel
00:21 < ccowan> I'm deploying to my own vm instance
00:21 < TonkaTruck> I'm curious about a pattern I've seen during my second node day.  Do you guys ever do return callback(); to keep from having to nest code and/or type return; on a new line?
00:22 < ljharb> why would you ever need "return;"
00:22 < ljharb> just end the function.
00:22 < TonkaTruck> ljharb: I thought people were using return to end the function and call a callback at the same time.
00:22 <@konobi> if there's more than one path, perhaps
00:23 < ljharb> if you are ok with multiple exit points out of a function, sure, but i prefer a single exit point.
00:23 <@konobi> foo(ifSuccess, ifFail)
00:26 < rudiX> hello, I am trying "Canvas" and PhantomJS on fedora ... and the fonts are all squares ... anyone know the required package i need to install
00:32 < rudiX> missing xorg fonts ... resolved
00:35 < TonkaTruck> konobi: You have your success callback first but it seems like foo(err, success) is more common, no?
00:36 < TonkaTruck> oh, nevermind...callback arguments...
00:39 < superjoe> node-static is a great project
00:39 < superjoe> which is now unmaintained
00:39 < superjoe> :'-(
00:39 < superjoe> and finally, broken with 0.8.0
00:39 < superjoe> anybody have an alternate static file server package to suggest?
00:40 < mmalecki> ecstatic
00:40 < tjholowaychuk> unconditional caching ftw
00:40 < superjoe> tjholowaychuk, is that sarcasm?
00:41 < tjholowaychuk> yes :p
00:42 < dested> has anyone tried fibers in 0.8.0 yet?
00:42 < dested> im about to
00:43 < superjoe> mmalecki, why does ecstatic have 10% the number of watchers and 20% the number of forks as node-static?
00:45 < tjholowaychuk> superjoe: nvm it does support conditional gets
00:45 < tjholowaychuk> does it wrong but it's thre
00:45 < tjholowaychuk> there*
00:45 < superjoe> tjholowaychuk, which project are you referring to?
00:45 < tjholowaychuk> node-static. i swear it used to just hold stuff in memory regardless
00:46 < tjholowaychuk> must have read it wrong
00:46 < mmalecki> superjoe: no idea?
00:46 < tjholowaychuk> or maybe the default of doing so threw me off, not sure
00:48 <@konobi> isaacs: the docs haven't been updated on the site?
00:48 <@konobi> oh... nvm... cached copy
01:01 < CIA-75> node: Ben Noordhuis v0.8 * r07e5877 / configure : build: disable strict aliasing in v8 with gcc 4.5.x - http://git.io/J3JxIQ
01:03 < myndzi> sockets are not supposed to emit data if you destroy them, right?
01:09 < wdent_> newbie question.  Trying to get node.js to compile on centos and need to change to different version of python.  Anyone now how to force node.js to use a different version of python
01:09 < superjoe> wat
01:12 < TehShrike> wdent_: node.js doesn't use python
01:15 < dested> node: symbol lookup error: /directory/src/node_modules/fibers/bin/linux-x64/fibers.node: undefined symbol: _ZNK2v85Value11IsUndefinedEv
01:15 < dested> anyone wanna weigh in on possible fixes?
01:15 < dested> that name doesnt seem to be random, threw the same characters twice lol
01:15 <@konobi> dested: got a minimal test case?
01:15 <@konobi> oh wait... that's not domains... nvm
01:16 < dested> no sorry, fibers 
01:17 < dested> hmm, reran npm install fibers 
01:17 < dested> and now she works
01:17 < dested> also says it didnt update... lol
01:17 < dested> oh baby, update and nothing broke, magic speed increase 
01:17 < dested> thanks team :-)
01:19 < dested> __considerably__ faster and more stable
01:20 < styol> Any recommendations on a pattern that allows other code/modules/etc to "hook" into a specific task or routine executed by a function for example.. ie hook_user allows core_user to evaluate any other function/variable loaded into memory, such as mymodule_user, to get passed data and perform additional tasks on top of an existing layer? Seems that may be partially what EventEmitters are for, but it doesn't seem like an EventEmitter is designed to send da
01:23 < bnoordhuis> wdent_: PYTHON=/path/to/python make
01:23 < bnoordhuis> TehShrike: the build system does
01:23 < TehShrike> bnoordhuis: aaah
01:25 < topfunky> Is there any way to force a version of a library? socket.io won't install on 0.8 because of commander, but it appears that commander 0.6.1 should be ok: http://search.npmjs.org/#/commander
01:25 < topfunky> oddly, 0.5.2 is shown as the latest even though there's an 0.6.1
01:26 < tilleps> Substack: Do you got any modules that can format/display data like the "top" command (that updates instead of displaying another)?
01:28 < tjholowaychuk> tilleps "charm" though that might be lower level than you're looking for
01:28 < tjholowaychuk> or tootall's ansi.js
01:32 < tilleps> tyvm tjholowaychuk, charm is what I was looking for (I think)
01:32 < tjholowaychuk> if you just want to clear the page and re-print etc that will work for you
01:33 < tjholowaychuk> if you just need to update chunks you can .move() around and write() over top
01:35 < tilleps> intended to display a table of information
01:35 < tilleps> like the statuses of cluster workers
01:38 < tilleps> should work nicely with https://github.com/LearnBoost/cli-table, I hope
01:39 <@konobi> tjholowaychuk: you're not a mock fan, right?
01:39 < tjholowaychuk> yeah just clear in that case
01:39 < tjholowaychuk> it's just a single ansi escape sequence
01:39 < tjholowaychuk> konobi not unless you have to
01:39 < tjholowaychuk> or have a compelling reason
01:39 <@konobi> tjholowaychuk: had a look at 'mocked' at all?
01:39 < tjholowaychuk> nope
01:40 <@konobi> released it recently... it a very minor/lightweight way of doing stuff
01:40 < tjholowaychuk> cool cool. for anything specific? http stuff or ?
01:40 <@konobi> anything
01:40 <@konobi> it'll let you override internal modules or externals
01:41 <@konobi> but it's up to you as to what should be in that mock lib
01:42 <@konobi> http._RETURN_THIS_ON_NEXT_GET = { ... }; http.get(...)
01:43 < tjholowaychuk> tilleps https://github.com/substack/node-charm/blob/master/index.js#L197
01:43 < tjholowaychuk> that's the only part you need if you want to refresh and re-write the table
01:43 < tilleps> topfunky: did you manage to update socket.io?
01:43 < tjholowaychuk> minus the crazy encode module
01:43 < tjholowaychuk> \033[
01:44 < tilleps> got it, ty
01:44 <@konobi> tjholowaychuk: hopefully that makes sense ^_^
01:46 < tjholowaychuk> konobi yup!
01:49 < topfunky> tilleps: no. I assume people are busy updating their libraries after 0.8. I'll wait a few days and try again.
01:50 < topfunky> I was able to install commander@0.6.1 manually, but not as a sub-dependency of socket.io
01:51 <@konobi> TooTallNate: ping
01:51 <@konobi> tjholowaychuk: *phew* cool
01:51 < TooTallNate> konobi: hey
01:51 <@konobi> i hate mock 'libraries'... no... i just want a minimal surface
01:52 <@konobi> TooTallNate: any idea how to roll npm modules/addons into the normal node build?
01:53 < TooTallNate> konobi: well you can drop regular .js files into /lib and they get compiled into the node binary, but as for whole modules, and addons, no i don't know of anything
01:54 <@konobi> TooTallNate: hhhmmm... any pointers... would be nice to compile in some .js and .node stuff into the binary (for platform specific stuff)
01:55 < TooTallNate> konobi: i think compiling native addons into the binary as part of the build as one of ryah's wishlist items
01:55 < TooTallNate> but really, i'm not even sure where to start at the moment
01:55 < TooTallNate> you'd definitely need to touch gyp
01:55 <@konobi> yeah
01:56 <@konobi> i just don't know the difference between how npm does it vs node, etc.
01:58 < bnoordhuis> konobi: drop .cc in src/, add to compile list in node.gyp, look up with process.binding('module')
01:58 < bnoordhuis> konobi: make sure you use NODE_MODULE(node_foo, init_func). the node_ prefix is mandatory btw
01:58 <@konobi> bnoordhuis: that'd be a PITA though... what i'd want is a extras/ folder
01:58 <@konobi> and then have the npm folder slurped up
01:58 < bnoordhuis> alas, it doesn't work that way
01:59 <@konobi> bnoordhuis: not now... but that's realistically how it needs to work
02:00 <@konobi> otherwise management of those libs will be a huge PITA
02:00 <@konobi> and node already understands the npm package layout iirc
02:01 < CIA-75> node: Ben Noordhuis master * r57276ae / (common.gypi configure): build: enable strict aliasing if gcc < 4.5.0 (+21 more commits...) - http://git.io/zETjhw
02:04 < wavded> what are people using for deployment, I have been using a Makefile, rsync, upstart, but feel like I can do better, and wondering what has worked well for ya'll
02:06 <@konobi> bnoordhuis: the examples are standard libs for different platforms... osx, linux, smartos, bsd, win32, etc.
02:10 < TehShrike> Anyone here used spinejs?
02:10 <@konobi> wavded: it really depends
02:11 < TehShrike> I'm curious how people handle authentication and session keys in spinejs
02:11 < bradleymeck> uggg anyone know if there is a way in node to recieve udp multicast on the same machine that is sending?
02:18 < emostar> is there any recommended way of looking into why some code is giving an "Maximum call stack size exceeded" error?
02:20 < bob_the_bob> Hi
02:21 <@konobi> emostar: most likely you have infinite recursion
02:21 < bob_the_bob> is there a migration guide from the 3rd party "cluster" module for 0.4.x to the one now built in?
02:21 < emostar> konobi: and how would i find out where it is
02:22 < bob_the_bob> hi jon :)
02:22 < tjholowaychuk> emostar do you have the top of the stack trace?
02:22 < tjholowaychuk> should be able to see where it starts
02:22 < emostar> tjholowaychuk: no, its not printing a stack trace
02:22 < tjholowaychuk> oh :(
02:23 < emostar> the code is running as expected though
02:23 < emostar> at least the parts that i expect to see as a side effect
02:23 < tjholowaychuk> if you can reproduce it i guess run through with the debugger
02:24 < emostar> what is the best way to use the debugger? i haven't really used it with node before
02:25 < tjholowaychuk> you can add a "debugger" statement and do $ node debug script.js
02:25 < tjholowaychuk> and run "help" to see what's available to step around in the code
02:26 <@konobi> there's also node-inspector which works pretty well
02:29 < emostar> tjholowaychuk: i added a "debugger" statement, but it doesn't break on it
02:30 < tjholowaychuk> hmm it should
02:30 < tjholowaychuk> it was a little wonky the last time i used it
02:30 < tjholowaychuk> haven't tried with 0.8.0
02:30 < emostar> i'm still on 0.6
02:31 < emostar> well i am getting the call stack size errors before the debugger statement
02:31 < william> hello everyone!
02:31 < william> anyone know how to upgrade to 0.8.0 on unbuntu?
02:35 < livinded> is it possible to overwrite the moduleLoadList in process to disallow certain native modules from being required in?
02:35 < dshaw_> Dealing with REPL wonkiness in 0.8
02:35 < dshaw_> Is not closing the socket on exit intentional?
02:35 < bob_the_bob> http://stackoverflow.com/questions/11200050/migrating-from-learnboost-cluster-to-nodes-built-in-cluster-module <anyone can help?
02:36 < bnoordhuis> william: compile from source, `./configure --prefix=$HOME/opt/node` to make it a user-local install
02:36 < william> thank you bnoordhuis
02:42 < emostar> tjholowaychuk: could it be that i am really overflowing the stack here? it is a large express app
02:42 < tjholowaychuk> emostar nah it'll be some recursion
02:43 < emostar> tjholowaychuk: hmm well it works when i comment out a req.app.emit()
02:44 < tjholowaychuk> that doesn't mean it's not recursion though
02:44 < emostar> yeah, but found the possible culprit
02:45 < deoxxa> tjholowaychuk: jeez can't you tell from the code he pasted? it's obviously the emit() call.
02:45 < tjholowaychuk> ah yeah that's good
02:45 < tjholowaychuk> on the trail
02:47 <@konobi> tjholowaychuk: ever hit up jstash for shared space?
02:48 < tjholowaychuk> starbucks is my office :D haha
02:48 < tjholowaychuk> and other random cafes downtown
02:48 < tjholowaychuk> are you in vic too?
02:49 < emostar> tjholowaychuk: hmm got it down to one statement, an instance of a winston object for logging...
02:49 <@konobi> tjholowaychuk: nah... yvr
02:49 <@konobi> (joyent... =0) )
02:50 < tjholowaychuk> ah :D
02:50 < tjholowaychuk> awesome
02:50 < tjholowaychuk> i think microsoft is moving out of vic already haha i saw some lease signs on the building
02:50 < tjholowaychuk> might have been some other offices im not sure
02:50 < emostar> tjholowaychuk: i don't understand how that is a recursive call though
02:50 <@konobi> yeah, probably moving to the richmond campus
02:50 < emostar> the library has a bug, and doing recursion in itself?
02:50 < tjholowaychuk> possibly
02:51 < tjholowaychuk> hard to say without the head of that stack trace
02:51 < emostar> tjholowaychuk: yeah i know :(
02:51 < emostar> tjholowaychuk: hah https://github.com/flatiron/winston/issues/100
02:51 < tjholowaychuk> oh
02:51 < tjholowaychuk> haha
02:51 < tjholowaychuk> that'll do
02:52 < emostar> this is production code as well :|
02:52 <@konobi> tjholowaychuk: jstash is good craic =0)
02:52 < emostar> only happens on errors though
02:52 < tjholowaychuk> that makes sense if it's a cyclic toJSON
02:52 < tjholowaychuk> im with indexzero tho, you dont reallyw ant to support that
02:53 < tjholowaychuk> that should be up to whatever is implementing the method
02:53 < benvie> best new feature in node .8
02:53 < emostar> i have no problem with it not working, but going into recursion b/c you pass it a certain object is pretty bad
02:53 < benvie> icon
02:55 < brainss> s
02:57 < bob_the_bob> cluster.disconnect() doc doesn't say if it must be called only from the master or if it can be called from the workers too
02:58 <@konobi> tjholowaychuk: i'll prolly go visit jstash for a few days in the not too distant future
03:00 < livinded> holy shit! you can overwrite the cached stdlib and not allow spawned subprocesses to use certain functions
03:01 < livinded> hello whitelisting
03:01 <@konobi> livinded: ?
03:02 < livinded> konobi: I'm trying to build proper sandboxing. The current node module for it doesn't allow whitelisting of the stdlib
03:02 < livinded> or blacklisting for that matter
03:02 <@konobi> livinded: have a look at 'mocked'
03:03 < livinded> konobi: that requires that you do it on a module by module basis though doesn't it?
03:04 < livinded> you can't specify only certain functions within a module
03:05 <@konobi> livinded: sure... but no reason you can't do it function by function within those libs
03:08 < livinded> konobi: then you have to iterate over every exported function and do a compare against the key. Check this out: https://gist.github.com/b9989e1f15616fc4e979
03:09 < livinded> you can just stub out the cached version
03:10 < livinded> you don't need to execute the code each time a require is called
03:14 < dshaw_> Hmm, I guess it's not the socket. FD is not getting cleared. Subsequent REPL restarts EADDRINUSE.
03:17 <@konobi> livinded: but why would you want a mix?
03:17 < livinded> a mix?
03:17 <@konobi> of mocked and "real"
03:18 < livinded> so that I can run untrusted code and limit it's functionality
03:18 <@konobi> well, why not just not implement the things you don't trust?
03:19 < livinded> no, say I want to allow people to upload scripts and then run them
03:19 <@konobi> sure... just use vm
03:19 < livinded> but I don't want to give them access to write to the fs, open network connections
03:19 < livinded> but maybe I want to let them stat files, and use functions that are part of the fs and net modules
03:20 <@konobi> yeah... but just implement those specific ones
03:20 < livinded> why would I re-implement node stdlib?
03:20 <@konobi> becuase even with those, you'll want to restrict them
03:21 <@konobi> livinded: fs.removePath('/'
03:21 < livinded> konobi: I wouldn't give them access to removePath
03:21 < livinded> but maybe I want to give them access to fs.readSync
03:21 <@konobi> regardless... i could probably hack out of it
03:21 < livinded> I don't really care what they read, I'll let unix permissions take care of that
03:21 <@konobi> '../../../../../../////////' 
03:22 <@konobi> baudehlo: hey matt, how goes?
03:22 < Franz__> somebody here know gamejs?
03:23 < livinded> konobi: my point is that I want everything to work normally and just have certain functions do nothing
03:23 < rektide> Are there tuning options in node for files?
03:23 <@konobi> livinded: in a chroot? in a vm? in a... ?
03:23 < livinded> in a process
03:23 < baudehlo> konobi: not bad, yourself?
03:23 < rektide> Rather, libuv exposes some tweaking options iirc, does Node make them accessible anywhere? Can I control the number of threads in the thread pool, or other tewaks?
03:23 <@konobi> yeah... yoy'll still need to intercept all the calls
03:24 <@konobi> baudehlo: dandy... bit knackered
03:24 < livinded> why do I need to intercept them? I can just stub them out so they literally do nothing?
03:24 <@konobi> baudehlo: getting out this way at some point?
03:24 < livinded> as long as the cache resolves the function it'll use that
03:24 <@konobi> livinded: sure... but the ones you do expose... are still hackable
03:24 < livinded> konobi: that's the point
03:24 < livinded> I want normal behavior for the ones I do expose
03:25 < livinded> I'm not trying to build modified versions that are "secure" I'm just trying to stop certain functions from doing anything
03:25 <@konobi> so you want your users to be able to read other users data?
03:25 < baudehlo> konobi: where's "this way"?
03:25 <@konobi> baudehlo: yvr
03:25 < livinded> konobi: fs permissions take care of that
03:25 < baudehlo> not until snowboarding season is back on :)
03:26 <@konobi> livinded: heh
03:26 <@konobi> baudehlo: your're still TO, right?
03:26 < styol> Any kind souls familiar with EventEmitters and might be able to help me determine what I might be doing wrong here? http://pastie.org/4152146 I'm seeing the prototype.test being fired but not the .on listener
03:26 <@konobi> and still symantec?
03:27 < baudehlo> nope, work for a startup now. But yes still TO.
03:27 < vendar> お邪魔します。。。。
03:27 < livinded> konobi: I guess I just have a weird use case. This does exactly what I need
03:27 < livinded> I'm not trying to build "safe" functions, I'm just trying to whitelist/blacklist access to certain ones
03:28 <@konobi> livinded: go nuts... feel free to rely on what you think... noone is ever going to try to bypass unix permissions, especially if the process runs as the same user
03:28 <@konobi> baudehlo: oh, which startup?
03:28 < livinded> konobi: setuid...
03:28 < baudehlo> konobi: we haven't launched yet. Called hubdoc.
03:29 <@konobi> livinded: oh... so you expose a root process to the net... nice
03:29 < zomg> vendar: このチャンネルで英語書いてください
03:29 <@konobi> baudehlo: anyone i know?
03:29 < baudehlo> me? ;)
03:29 <@konobi> perl wise?
03:29 < dshaw_> Fuck, it's not REPL… it's net.
03:29 < livinded> no, I have a process running as root that looks for new files dropped into a directory
03:30 < livinded> filenames that are controlled by the system and can't be used for command injection
03:30 <@konobi> livinded: k... go nuts =0) just wanted to know you'd thought about it
03:31 < rektide> i guess i'm making this up. i could've sworn somewhere under the hood there was a thread pool doing the async io work in unix, and that it was configurable somehow. meh.
03:31 <@konobi> baudehlo: um... perl wise that is
03:31 < baudehlo> konobi: nope. Just me. I hired a couple of other toronto JS guys so far. But no perl in the stack.
03:32 <@konobi> baudehlo: huh... CEO or CTP?
03:32 <@konobi> *CTO
03:33 <@konobi> baudehlo: and still mail based?
03:34 < baudehlo> VP Eng. Sorta CTO basically. And no not email based.
03:34 < baudehlo> Web app.
03:35 < baudehlo> There's emailing, like outbound stuff, but that's pretty basic and not a "core feature".
03:36 < bob_the_bob> cluster API doc uses cluster.autoFork() in the examples, yet this method doesn't exist according to the doc
03:37 <@konobi> livinded: (i'm from a comp sec background... so i'm just paranoid ^_^)
03:38 < livinded> konobi: I'm a security researcher building a wargame
03:38 < livinded> I just need very specific behavior
03:40 <@konobi> livinded: ah... 
03:43 < styol> bob_the_bob: https://github.com/joyent/node/issues/3532
03:46 < bob_the_bob> styol: yay
04:07 < alejandr2mg> So, is ok if I use the undocumented api, like util._extends or process._getActiveRequests or they are unstable or in test-mode?
04:36 < SimSala_> Anyone who know of a good ORM for sqlite? Been looking into sequelize..
04:54 < guybrush> http://nodejs.org/docs/latest/api/ should point to 08
04:54 < dested> i installed cloud9 with my node isntall at http://apptob.org/, anyone have any idea where that bastard installs to or how to run it?
05:02 < austinbv> so can you check the exit status of a last run and shelled out command
05:02 < austinbv> or is there a good jslint util that can be run inside a script
05:12 < owen1> guys, tell me if i got it right - when an http request comes to my node server, node uses a THREAD (5 threads is the deafult) to execute the request, and when an async call is made inside this thread, the libuv (c library) is responsible to handle the execution of the code. and every 'tick' in the event loop, node asks all the async code if any of them finished. and if one finished, the callback is being 
05:12 < owen1> called. more request at the same time will be excuted by different thread from the thread pool.
05:13 < owen1> but since everything is asnc, there is a good chance we only going to use the same thread.
05:26 < austinbv> so whats the deal with returning out of a callback?
05:26 < austinbv> or how do people do assignment in a callback
05:27 < austinbv> wookiehangover: hows it going
05:27 < wookiehangover> sup
05:32 < ljharb> austinbv: the callback has access to the enclosing scope in which it was created, and you can just assign to things in that scope.
05:33 < myndzi> i'm using new Class() in a function, but when i call that function on two separate instance objects (instance1 !== instance2), the instances of the class are the same
05:34 < myndzi> the parent instances are not the same, but the child instances are, any idea why that could be?
05:35 < tim_smart> myndzi: Got some reproducible code handy?
05:36 < ljharb> myndzi: what's "Class"? javascript doesn't have classes.
05:37 < ljharb> but yes, reproducible code is good
05:39 < milani> myndzi, maybe that's because JS has no class, everything is an object.
05:40 < milani> myndzi, so even before new Class() is called, class it self is an object ( a constructor function but its actually an object ).
05:40 < ljharb> everything is not an object, and "everything being an object" has nothing to do with classes
05:40 < ljharb> "true" and "null" and 3 are not objects.
05:41 < milani> ljharb, you are right, I mean there is no class, there is object:)
05:41 < myndzi> (sorry, phone call)
05:42 < myndzi> i know there aren't true classes, but it is the simplest way to describe the problem
05:42 < myndzi> i call new on the "object" in two separate instances and i somehow wind up with the same object reference for both
05:44 < ljharb> myndzi: can you provide a jsfiddle
05:44 < timoxley> isaacs curious, is there a problem with those percentages? Don't want to sensationalise the benchmarks?
05:45 < myndzi> that depends, how many thousands of lines of code do you want? :P
05:45 < myndzi> i mean, i haven't been able to simplify and reproduce
05:45 < myndzi> i'm just looking for suggestions about what to examine
05:46 < ljharb> myndzi: lol whichever step you remove in your simplification that fixes it?
05:46 < myndzi> as far as i can tell, there is no such thing
05:46 < myndzi> i literally do foo = new Foo(); this.foo = foo;
05:46 < ljharb> you just said you can't simplify and reproduce
05:46 < myndzi> the parent objects are not equal
05:47 < ljharb> provide a jsfiddle with that
05:47 < myndzi> but their properties are
05:48 < ljharb> in the global scope, "this.foo" and "foo" might be the same. try wrapping it in an anon function
05:48 < myndzi> well, call it self ;) but you just gave me the kind of thing i was hoping for
05:48  * myndzi checks scopes
05:48 < myndzi> or rather, this's
05:49 < bob_the_bob> "use strict", Luke…
05:49 < myndzi> hm nope, it's not global scope
05:49 < myndzi> this instanceof Parent = true
05:50 < ljharb> so precisely what line of code is doing the wrong thing?
05:50 < ljharb> this.foo === foo? or what
05:50 < myndzi> lemme try and describe clearly as i can
05:51 < myndzi> Parent.func contains code like "self.child = new Child()"
05:51 < rev087> License Agreement: "If you are caught in a dire situation wherein you only have enough time to save one person out of a group, and the Author is a member of that group, you must save the Author."
05:51 < jesusabdullah> "use strict" sucks :C
05:51 < myndzi> if i do "a = new Parent(); b = new Parent(); a.func(); b.func();"
05:51 < myndzi> then a.child === b.child
05:52 < jesusabdullah> it's false
05:52 < myndzi> that's what it should be, yes
05:52 < myndzi> but it's true in this case which is my problem
05:52 < myndzi> a !== b
05:52 < myndzi> but a.child === b.child
05:52 < ljharb> then that class is probably using a singleton pattern for the child
05:52 < jesusabdullah> so you're probably doing something like
05:52 < jesusabdullah> var child = {};
05:52 < ljharb> which means the "class" definition is probably broken
05:52 < jesusabdullah> a.child = child; b.child = child;
05:52 < jesusabdullah> that's what you're doing, somewhere.
05:53 < myndzi> k thanks, that's what i was hoping for :)
05:53  * myndzi goes off to investigate
06:01 < myndzi> well i tracked it down to some weird scoping thing
06:01 < myndzi> i can correct it but i don't know why it's broken
06:03 < nick______> hellow...
06:03 < myndzi> i was referring to self which was defined at the beginning of the function (var self = this)
06:04 < myndzi> but it no longer refers to the correct thing inside an async callback later in that block of code
06:04 < ljharb> that should be fine if it's declared within each invocation of an inherited method call
06:04 < ljharb> well yeah
06:04 < myndzi> but isn't reassigned everywhere
06:04 < ljharb> inheritance sucks.
06:04 < myndzi> anywhere*
06:05 < myndzi> anyway, i try to avoid this kind of thing to begin with but here's just one more reason i guess ;)
06:08 < nick______> im trying to start with nodejs. but this video (http://www.youtube.com/watch?v=1e1zzna-dNw&feature=endscreen&NR=1 )say something negative about nodejs.. any comment about this video.. 
06:11 < jankeromnes> does node 0.8.0 have problems with HTTPS or is it just me?
06:14 < sveisvei> nick____: dont make people watch that. Ask questions :)
06:14 < jankeromnes> running with key, crt and ca, but chrome says `webpage unavailable` and curl https://localhost says `unknown SSL protocol`. same thing runs fine on 0.6.19. Am I doing something wrong?
06:18 < heroic123> hi, any comments about this http://blog.targeterapp.com/post/25865112316/when-and-how-nodejs plz?
06:28 < rageous> Render, damn you.
06:33 < myndzi> ahaha, silly me
06:33 < myndzi> i figured it out :)
06:33 < myndzi> i had done var self = foo = this
06:34 < myndzi> so that i didn't get 'self' all confused later
06:34 < myndzi> but of course... foo wasn't declared so it was global
06:34 < ljharb> ha
06:34 < ljharb> yes, var self = this, foo = self; is what you'd need.
06:35 < myndzi> yep :)
06:35 < myndzi> cleaned up some stuff too, but that was the heart of the problem
06:39 < wiherek> when executing functions in series with async, can I wrap multiple asynchronous functions in higher-level functions (I mean: function high1() { function low1() {}.... function low2() {}.... }, function high2(........
06:39 < wiherek> and execute those higher-level functions in series?
06:39 < wiherek> (that is - allow all low-level functions from high1 to execute before executing high2
06:40 < wiherek> also - those low1, low2... functions dont need to be run in series.
06:41 < owen1> guys, tell me if i got it right - when an http request comes to my node server, node uses a THREAD (5 threads is the deafult) to execute the request, and when an async call is made inside this thread, the libuv (c library) is responsible to handle the execution of the code. and every 'tick' in the event loop, node asks all the async code if any of them finished. and if one finished, the callback is being 
06:41 < owen1> called. more request at the same time will be excuted by different thread from the thread pool.
06:46 < szikael> is there any easy way to update node.js or shell i delete old one an install new one 
06:47 < szikael> ubuntu software
06:48 < SubStack> szikael: you could use a program like nave to fetch, compile, and install node versions
06:49 < SubStack> once nave is installed you can just do `nave install 0.8.0` for instance and then `nave use 0.8.0` at some other point
06:51 < jankeromnes> SubStack: do you know who I should ping for SSL issues?
06:53 < yawnt> hai
06:54 < dr0id> aye
06:56 < SubStack> jankeromnes: ssl issues with what?
06:56 < SubStack> you should just ask questions to the channel probably instead of pinging people
06:58 < jankeromnes> SubStack: I have an "Unknown SSL protocol error" when running my server with 0.8.0 instead of 0.6.19
06:58 < owen1> is it accurate to say that in a node website i have 'state' that is created by using clojures (the external vars are accessable to any function inside)?
06:59 < szikael> thanks work well
06:59 < jankeromnes> I opened an issue here with error messages: https://github.com/joyent/node/issues/3541
07:04 < bob_the_bob> so, node-bj is version 0.0.3bogeyatsix-1.0, but node_mdns (same author) is version 0.0.3orlando-1.0. Is Orlando > Bogeyatsix, or the opposite??
07:05 < bob_the_bob> nevermind my last comment, found the right repo
07:34 < [AD]Turbo> hi all
07:45 < wiherek> how can I pass a variable between three functions running in series?
07:46 < SubStack> wiherek: you want to thread a value along a chain of functions that run in series?
07:47 < wiherek> yes
07:47 < SubStack> asynchronously or synchronously?
07:48 < wiherek> Im trying to run them in sync, using async.series
07:48 < SubStack> are you trying to return?
07:48 < SubStack> sync means you do return
07:49 < SubStack> async means you call a callback in some fashion
07:50 < wiherek> I think I have some basic error here.
07:50 < jesusabdullah> sync and async are mutually exclusive
07:50 < SubStack> >> 1+2
07:51 < SubStack> .. 1+2
07:51 < SubStack> moar eval bots
07:51 < wiherek> ok, Im doing something terribly wrong :)
07:52 < SubStack> > (function next (x, fns) { if (!fns.length) return; fns[0](x, function (x_) { next(x_, fns.slice(1)) }) })(11, [ function (x, cb) { cb(x+1) }, function (x, cb) { cb(x*2) }, function (x,cb) { cb(x*10)}, function (x) { console.log(x) } ])
07:52 < SubStack> 240
07:52 < SubStack> and probably using async.series would be something like that
07:53 < sabermonk> hi, How to flush a stream given by fs.createWriteStream()?
07:53 < SubStack> oh it's called waterfall
07:54 < sabermonk> i dont see any method in the documentation?
07:54 < SubStack> beh except there's not an initial parameter, that's dumb
07:54 < SubStack> sabermonk: all writes get flushed, pretty sure
07:54 < jesusabdullah> BO
07:54 < SubStack> "Returns true if the entire data was flushed successfully to the kernel buffer."
07:55 < jesusabdullah> that is TOO MANY FUNCTIONS
07:55 < jesusabdullah> BRO* stupid fucking laggernets
07:55 < sabermonk> hmm .. i have a scenario where some writes are queued.. but upon crossing a threshod i need to flush stream to be able write new data
07:56 < SubStack> jesusabdullah: async annoys me, looking at it
07:56 < SubStack> sabermonk: you don't flush the stream yourself, node does that part
07:56 < sabermonk> any way to explicitly do it? 
07:56 < SubStack> sabermonk: in your program, check if stream.write(buf) === false
07:56 < SubStack> and if that condition is true, then wait for a 'drain' event to start writing again
07:57 < jesusabdullah> tbh I use forEachSeries and that's about it
07:58 < sabermonk> ohk.. so this is like i need to listen to drain event to be sure that all writes are flushed?
07:58 < SubStack> sabermonk: yep
07:58 < SubStack> but only when write() returns false
07:59 < SubStack> also you might want to implement a readable and/or writable stream and then .pipe() will handle all that for you
07:59 < SubStack> or some of it, depending
08:00 < sabermonk> i thot of using .pipe() but i need to parse the data from the stream coming from the other end , and then write 
08:01 < sabermonk> but .pipe() essentially dumps one stream to another?
08:01 < SubStack> .pipe() knows how .pause(), .resume(), false write buffering and 'drain' work
08:02 < SubStack> you can write streaming parsers as readable/writable streams
08:02 < SubStack> here's an example of one of those: http://github.com/dominictarr/JSONStream
08:03 < tuhoojabotti> it seems complicated to do
08:03 < SubStack> tuhoojabotti: it's not very complicated
08:03 < SubStack> you can also use a lib like http://github.com/dominictarr/event-stream to help
08:04 < SubStack> usually you can just get away with writing a .write, a .end, set readable and writable to true and just emit 'data' and 'end' events
08:04 < SubStack> then if you want to handle backpressure more finely you can do that too
08:05 < SubStack> sabermonk: in your cause you could check out event-stream's .map() function
08:05 < SubStack> s/cause/case/
08:06 < sabermonk> hmm thx ..
08:07 < sabermonk> SubStack : i was hoping for a simpler solution
08:07 < sabermonk> condisering i required just a flush...hehe
08:08 < SubStack> the simple solution is check write() and if it returns false, listen for 'drain'
08:08 < SubStack> once 'drain' fires you'll know that the writes have been written
08:08 < radiodario> hmm i updated to 0.8.0 and now node 'cant find module "debug"'
08:08 < sabermonk> hmm yes...that'll do.. and what abt read() 
08:09 < sabermonk> does read () send the no. of bytes to be read
08:09 < sabermonk> ?
08:10 < wiherek> SubStack - nevermind my question about the variable.  that was actually working well. However, I have a major problem with async functions
08:10 < wiherek> I have this: http://jsfiddle.net/Eu574/
08:11 < wiherek> http://jsfiddle.net/Eu574/1/
08:12 < TAiS46> is there a way to push from php some data to the web socket console?
08:12 < wiherek> what happes is the subsequent functions don't wait for the foregoing to finish.
08:12 < radiodario> feck sake my node installation is now completely broken. 
08:13 < radiodario> why call it stable if it breaks everything?
08:13 < nonuby> have you considered it a problem isolated to you
08:13 < radiodario> no, i found last night jade hadn't been updated
08:13 < radiodario> they fixed the problem rather quickly now
08:13 < radiodario> which is great
08:13 < radiodario> but then more stuff keeps on creeping up
08:13 < SubStack> TAiS46: that sounds like a question that php folks would be better at answering
08:14 < nonuby> so node should delay release until jade is compatible, why did you upgrade without checking package compatibility
08:14 < SubStack> radiodario: use nave to manage node versions
08:14 < radiodario> there are so many things to manage things in node
08:14 < SubStack> https://github.com/isaacs/nave
08:14 < radiodario> how about brew?
08:14 < radiodario> and the official package?
08:15 < radiodario> i'll just remove eveything inside node_modules and install again
08:15 < SubStack> those don't make it easy to have multiple versions handy on the same system
08:15 < radiodario> see if it fixes it
08:15 < SubStack> radiodario: there's a command for that, `npm rebuild`
08:15 < wiherek> http://jsfiddle.net/Eu574/2/ help please :)
08:15 < radiodario> how do i set npm to work as root?
08:16 < SubStack> radiodario: why would you want to do that?
08:16 < nonuby> why would you want to do that?
08:16 < yawnt> lol
08:16 < wiherek> lol
08:16 < radiodario> { [Error: EPERM, chmod '/Users/dariabla/Workspace/dashboards/node_modules/.bin/express']
08:16 < radiodario> Please try running this command again as root/Administrator. 
08:16 < radiodario> because npm is asking me to
08:17 < radiodario> 0xBdrwxr-xr-x   5 dariabla   PEROOT\Domain Users  170 26 Jun 08:59 .bin 
08:17 < radiodario> i dont get it, it's mine
08:17 < radiodario> why can't npm do chmod?
08:17 < radiodario> this is weird
08:19 < nonuby> ah yes I seen that issues before,  irc npm attempts to validate the perms before calling chmod but sometimes it doesnt get it right, this was fixed months ago tho i believe what version of npm are you using? 
08:19 < radiodario> the latest 'stable' one
08:19 < radiodario> 1.1.32 
08:19 < radiodario> that came with v.0.8.0
08:19 < radiodario> or is it not?
08:20 < nonuby> i reported thiss  months ago and it was fixed I believe https://github.com/isaacs/npm/issues/2317 
08:20 < nonuby> i have not seen the issue since
08:20 < nonuby> can you do a quick chown -R on your Workspaces/dashboards/ to be sure?
08:21 < radiodario> the thing is, they're already mine
08:21 < radiodario> jeez i just got a shower of "operation not permitted" on every file in there
08:24 < wiherek> need some help please, async functions get out of my control: http://jsfiddle.net/Eu574/3/
08:24 < heroic1231> why do we recommend not to serve static files via nodejs and use nginx instead?
08:24 < SubStack> wiherek: it's because you're calling the callbacks right away
08:25 < SubStack> wiherek: basically you need to completely rethink your approach
08:25 < SubStack> wiherek: have your functions that take a while to set up take callbacks as parameters
08:26 < wiherek> hm
08:31 < wiherek> SubStack: so I went with something like this http://jsfiddle.net/Eu574/4/
08:32 < wiherek> added the callback into login.login and set an execution point for it at the end.
08:32 < pecke01> heroic1231: Because nginx supports http://linux.die.net/man/2/sendfile which is the fastest and smallest memory usage you can get. With that being said you need a lot of traffic before serving static files with node becomes an issue
08:32 < wiherek> same output.
08:33 < heroic1231> pecke01: Thanks
08:33 < radiodario> so i'm trying nave SubStack , and it can't see that i have v.0.8.0
08:34 < pecke01> heroic1231: np
08:35 < radiodario> express is also broken on 0.8.0 TypeError: Object function app(req, res){ app.handle(req, res); } has no method 'address' 
08:38 < radiodario> oh well i hope nave rolls me back to my trusty 0.6.19
08:39 < SubStack> radiodario: you install versions of node with `nave install`
08:40 < SubStack> wiherek: it's not just login.login(), you've got to call callback everywhere you do async io
08:41 < radiodario> SubStack: it didn't work
08:41 < radiodario> Could not install the file '/usr/local/include/node/uv.h'
08:41 < radiodario> how do i uninstall node from pkg?
08:42 < SubStack> radiodario: when you typed exactly: `nave install 0.8.0` ?
08:42 < radiodario> no, i used the pkg from the node website to install 0.8.0
08:42 < radiodario> and i typed ./nave.sh usemain 0.6.19
08:44 < booyaa> woohoo
08:44 < booyaa> get to see my two nodejs heroes tomorrow
08:45 < booyaa> felixe and nuno
08:47 < gellis11> does anyone know if there's a good beginner tutorial for node.js that uses coffeescript and mongodb to build a simple web app?
08:49 < Daegalus> wow, just read up on 0.8.0, looks great!
08:50 < gellis11> Daegalus: do you think node.js can replace ruby on rails or django for building web apps? or is it still useful just for realtime apps?
08:50 < radiodario> Daegalus: yeah it's great - at breaking you current installation
08:50 < radiodario> give it a few days!
08:50 < SubStack> gellis11: you shouldn't use node if you want to just replace rails or django
08:51 < Daegalus> radiodario: current installations are of little importance to me,a nd I dont use node. I have no problems nuking an installation and starting over
08:51 < Daegalus> i dont use nave*
08:51 < woeye> both rails or django are still way more powerful when it comes to dealing with webapps. things like form handling, scaffolding etc.
08:51 < radiodario> whatever man
08:51 < gellis11> do you think node.js will one day have those capabilities too?
08:51 < woeye> most likely
08:52 < radiodario> but you'll have to wear thick-rimmed glasses to make the most out of node.js
08:52 < radiodario> and drink Pabbst
08:52 < gellis11> i'm deciding what to learn between node.js, ruby/rails or python/django
08:52 < SubStack> Daegalus: if you don't want to waste a lot of time playing upgrade roulette or you have legacy code you need to port over piece by piece, nave is very useful
08:52 < gellis11> leaning towards python/django, but it seems everyone is saying node.js is the future. dont wanna learn something thats on its way out :)
08:53 < Daegalus> SubStack: i dont do enough hardcore Node for nave, plus I do a lot of Node development on Windows, nave doesnt work for me
08:53 < SubStack> gellis11: technology platform lifecycles are longer than they appear
08:53 < zomg> gellis11: I'd say pick between python/django stuff vs node depends on what you wanna use it to build
08:54 < Daegalus> gellis11: dont lock yourself into 1 platform, learn one, but also learn the others. One platfomr will not alwys be the best for everything, you need to understand when to use what tools and platforms
08:54 < zomg> If you  are more towards traditional websites then django is a stronger option I think, but with more "native" feel web applications node is pretty strong I think
08:54 < radiodario> pff nave alters your current bash session?
08:54 < woeye> i used django a lot. for many years now. i really like it. what i do not like, however, is this python2 vs python3 thing ...
08:54 < SubStack> woeye: yep I wouldn't use node if I wanted things like scaffolding or form building or auth plugins
08:55 < gellis11> whats your thoughts on rails vs django?
08:55 < SubStack> but luckily I don't really build the sorts of application that requires those things
08:55 < zomg> Until someone builds Django on node...
08:55 < zomg> ´=
08:55 < zomg> =)
08:55 < zomg> gellis11: with rails you get lots of fanboys
08:55 < SubStack> node has a completely different aesthetic
08:55 < zomg> dunno anything actually useful since I haven't used ruby or rails myself :D
08:55 < shanse> you get lots of fanboys with just about any big framework
08:55 < Daegalus> oh i just noticed an x64 version of node. not sure hwy i never had this installed
08:55 < woeye> gellis11: depends on your personal style. i prefer python's explicit style. other prefer rails magic style. you have to play around with both of them to find out which one suits you best
08:55 < SubStack> and the module system is so hypercompetitive that I doubt we'll see consolidation around big frameworks
08:56 < gellis11> I'm thinking python/django because the udacity courses I'm doing atm are based around python
08:56 < woeye> gellis11: both of them are really good these days. it's really a matter of taste imho
08:56 < gellis11> and there's even a web app one taught by steve huffman so may as well use python
08:56 < SubStack> people will build them of course, but there will be so many of them that there won't be concensus
08:56 < Daegalus> I also see a big push for Node in the direction of Desktop applications and UI apps. WxWidgets, GTK, OpenGL, CEF, etc.
08:57 < emostar> i did rails, then switched to django, and now use node
08:57 < SubStack> and most of the concensus groupings we will see will be at the low end of the abstraction continuum
08:57 < emostar> node gives you more power to customize the stack the way you see fit… which makes it faster for me to develop than rails or django did
08:57 < Daegalus> I used Django, never touched rails because I do not like Ruby in any way shape or form. Now I do node if i need web stuff.
08:57 < emostar> plus the state of 3rd party apps on django is pretty bad...
08:57 < Daegalus> plus Javascript is amazing when used right
08:58 < Daegalus> i like prototypes far more than classes
08:58 < gellis11> if i learned python and webapp2 or django, would that make it easier to jump into node in the future?
08:58 < woeye> but javascript often feels very barebone compared to python imho. you really need either polyfills or helper libs for all kinds of things
08:59 < woeye> fortunately ES6 looks amazing though :)
08:59 < SubStack> woeye: that's a feature
08:59 < SubStack> woeye: ES6 is very troubling in a lot of places
08:59 < SubStack> especially since ES can only add, never remove, features
08:59 < tuhoojabotti> hehe
09:00 < Daegalus> I went to a talk by Douglas Crockford at Paypal a few days ago. Great guy, awesome talk, though he did say that ES6 wont be here for a while, and they will be spending a lto of time reviewing and junking things
09:00 < woeye> but i really do not want to implement basic features everytime. i have better things to do. and 3rd party libs can be problematic, too. like outdated, no longer maintained or too much focus on browser support
09:01 < Daegalus> woeye: basic features like what? just curious
09:02 < woeye> python, for example, is very powerful when it comes to dealing with lists or maps
09:02 < woeye> intersecting, merging, etc
09:02 < woeye> like underscore.js
09:02 < SubStack> npm install merge or npm install deepmerge
09:02 < SubStack> there are actually different kinds of merges
09:02 < SubStack> and then there's updates
09:02 < woeye> yeah, two libs. will they be maintained next year? 
09:03 < SubStack> Daegalus: ignore old man crockford, he says a lot of things
09:03 < woeye> there are already a lot of dead npm modules out there :)
09:03 < SubStack> woeye: it's pretty easy to verify if a module works or not
09:03 < Daegalus> SubStack: ya, but some of the stuff he talked about was quite interesting.
09:04 < Daegalus> and I got a free copy of his book
09:04 < Daegalus> so im going through that now
09:04 < Daegalus> lots of good info
09:05 < Daegalus> and the only explanation of prototypes that made snese to me perfectly (i kinda knew how to use them and what they did, but his explanation pretty much made it 100% clear)
09:07 < SubStack> Daegalus: careful, some of the ideas in the good parts are pretty awful
09:08 < SubStack> like hoisting all your variables manually
09:08 < SubStack> is stupid because there gets to be a really big vertical distance between where things are defined and where they are used
09:08 < Daegalus> SubStack: oh, ya i dont agree with that.
09:08 < SubStack> and putting an entire implementation in a callback results in far too much transient state
09:09 < Daegalus> but actually just most of his prototype stuff
09:09 < SubStack> just look at the json2.js source for a great example of how shitty code written the way he advocates can be
09:09 < Daegalus> and prototype examples
09:09 < Daegalus> liek create, and method, and a few tothers
09:09 < SubStack> also most of the arguments are completely moot if you have require() and module.exports
09:09 < Daegalus> well it was written for browser js
09:10 < Daegalus> book was released in 2008
09:10 < Daegalus> so it was written before that
09:11 < Daegalus> node.js was conveived a year later
09:11 < Daegalus> though, his tip on i+=1 instead of i++ makes sense. 
09:12 < Daegalus> dunno if i will follow it, maybe just make sure i do ++i
09:13 < Daegalus> SubStack: the book has its good points though, lots of graphs and exmaples of stuff. plus i needed to get a better understanding of JS, i kinda jumped into JS from all the Java/C# work i do. So some of the info here, while i knew, is better explained
09:20 < robx> I have question regarding Mongo (tried the mongo channel with no luck) I have a document structure where each document has a sub document like: { field : value, subdocument : { field : value } }. I need to do a query where one of the fields in the subdocument is unique. Any suggestions? Or is the only way to do a distinct first, save those results in memory then do findOne foreach of those results?? Help really appreciated and might result in a cookie!
09:21 < radiodario> turns out my problem had to do with express 3
09:21 < radiodario> oh well
09:21 < radiodario> SubStack: thanks for the tip on nave, it's pretty sweet
09:22 < radiodario> also, note to self, never install node from the pkg
09:22 < pats_Toms> yes, it's true
09:23 < Daegalus> robx: i cant necessarily help you, but also, a good portion of the people that can, are asleep. I would try asking again in 4-6 hours if you can. More people will be on, more chance someone will know
09:23 < Daegalus> in both channels
09:24 < robx> Daegalus: I hate timezone differences :(
09:24 < tim_smart> robx: Like: Model.where('subdocument.field', 'value').run()
09:24 < tim_smart> Or somethign else?
09:24 < tim_smart> something*
09:29 < Mauricio> Hi. I'm passing an ipv6 addres as a localAddress option in http.request but nodejs is sending the request using the ipv4 address of my NIC
09:29 < Daegalus> robx: the wait shouldnt be long, its 2:30am on the west coast right now. east coast will start waking up in 1-2 hours.
09:29 < Mauricio> is ipv6 supported as a valid localAddress??
09:32 < Mauricio> somebody there???
09:33 < robx> Mauricio: yes
09:34 < jetienne> i look for a good name for a "require.js", anybody got suggestino ?
09:34 < deoxxa> Mauricio: when someone arrives who feels like they want to answer your question, they will answer your question. until then, be patient.
09:34 < radiodario> sugestino sounds like some sort of italian cheese
09:35 < topaxi> jetienne: ronaml - ronaml omg not another module loader
09:36 < topaxi> ;D
09:36 < jetienne> topaxi: :)
09:40 < maximumrfan> Question: How would one build a word tallier to count how many times a word has been used? I have a word logger down, I just can't figure out where to start on the tallier. 
09:41 < deoxxa> blob_of_text.split(" ").reduce(function(c,v) { if (typeof v[c] === "undefined") { v[c] = 0; } v[c]++; }, {})
09:41 < Daegalus> ^^^ i was about to say this, but with a lot more words and less code
09:42 < deoxxa> code > werdz
09:42 < wiherek> I have a problem with executing async functions in series --> http://jsfiddle.net/Eu574/7/
09:42 < wiherek> appreciate all help.
09:48 < robx> wiherek: tried safe : true ?
09:48 < robx> on the call to mongo
09:49 < wiherek> no
09:49 < wiherek> thats some argument that blocks the function?
09:49 < robx> Mongo is fire and forget, so the driver will fire the callback before the request is done
09:49 < wiherek> yea, but thing is
09:49 < wiherek> the restler request doesn't complete
09:50 < wiherek> and mongo connection is a callback for restler().on('complete')
09:51 < robx> What exactly is it that you want to do? You seem to be making things harder than they need to be :)
09:52 < wiherek> :)
09:52 < wiherek> im making an app lol
09:52 < wiherek> basically i have a login module
09:53 < wiherek> as in login function in another file :)
09:53 < wiherek> and I want to execute it before executing anything else.
09:53 < robx> Okay, you are looking this up in mongo?
09:54 < tim_smart> robx: Did you solve your mongo issue?
09:54 < robx> tim_smart: no, I did not
09:54 < tim_smart> My irc went all wierd.
09:54 < tim_smart> weird*
09:54 < wiherek> robx: no, I am looking it up in Drupal via a REST server (using restler for that)
09:55 < wiherek> and then im executing a mongo connection
09:55 < tim_smart> robx: I have a reasonable amount of mongo experience, so I might be able to help.
09:55 < robx> tim_smart: one second!
09:56 < robx> wiherek: and you dont get the http response and restler fires the callback anyway (???)
09:56 < wiherek> basically - yes!
09:57 < wiherek> login.login is in the window to the right for reference
09:57 < wiherek> or no
09:57 < wiherek> thats not what happens, sorry
09:58 < wiherek> its like this:
09:58 < wiherek> restler gets called, but nothing waits for restler to be executed
09:58 < wiherek> nevermind, its the same thing as async callback is called on('complete')
10:00 < wiherek> I think i spotted the error
10:00 < wiherek> the callback is called for restler.post
10:01 < wiherek> so it's called when data is posted, not received..
10:01 < wiherek> there is a response for the post function, but nothing waits for it.
10:02 < pats_Toms> hi, I want to use oauth on node 0.8, but I always got error - Cannot find module 'oauth'
10:02 < robx> wiherek: did you solve it?
10:03 < pats_Toms> tried easy-oauth before
10:03 < pats_Toms> any ideas?
10:04 < wiherek> robx - I now know what I need :) I should read the response as calllback for restler.post AND THEN put the rest as callbacks for read
10:07 < tornad> hi, anyone knows how to close redis connection  on redis-client ?
10:09 < tornad> humm.. seems to be client.quit();
10:09 < tornad> thanks anyway :)à
10:23 < luto_> hi
10:24 < luto_> my node.js script uses nearly 800MB ram (starting at 80MB, increasing over time). But I don't keep any data, everything is in local variables in short methods
10:24 < luto_> is there a way to track this down?
10:24 < luto_> the rumtime is ~4 minutes
10:25 < tim_smart> luto_: Starting at 80M? Wow.
10:25 < tim_smart> That is a pretty hefty process.
10:27 < onre> luto_, could you possibly have a "scoping problem" where the v8 garbage collector can't know when it can free a resource?
10:27 < onre> i had something similar in my node.js server app, causing it to leak memory
10:27 < onre> after fixing it it stays at its normal size (~700 megabytes, it's a sort of statistical analysis service with data loaded in memory) for weeks
10:29 < tim_smart> Basicially avoid nested functions / callbacks. Event emitters and prototypes can help here.
10:29 < luto_> oh, all my callbacks are nested..
10:30 < tim_smart> :p
10:31 < luto_> hmm
10:31 < luto_> can I somehow look at all the variables which use the RAM?
10:32 < tim_smart> luto_: I think node-inspector allows you to take heap snapshots.
10:33 < luto_> yeah, I've see that. But is only tells me the allocated data-types plus thier total size
10:33 < luto_> seen*
10:40 < ASY_> hello.  I was wondering if anyone can shine some light on a problem I am having... it's a really odd one:  I have node.js C++ module.    (building with cmake/make).  Works fine. a single .cpp file with headers.  The second I add another .cpp file (even just a generic #include <stdio.h> void test(void) { printf("test"); }     node reports that it no longer is able to load the module.  require() 
10:40 < ASY_> fails...  my build process is rather straight forward / generic.  and I am wondering what may cause something like this...
10:44 < timoxley> whoa
10:44 < stermi> Hi guys I've got a problem with libxmljs: can you give me an hand? https://github.com/polotek/libxmljs/issues/138
10:44 < timoxley> what happened to node_modules/.bin ???
10:44 < radiodario> 0.8.0 happened
10:45 < timoxley> what are we supposed to do instead
10:45 < timoxley> is there an alternative?
10:46 < radiodario> 0.6.19
10:46 < radiodario> that's what i did
10:46 < timoxley> ha
10:46 < timoxley> ok
10:46 < radiodario> either that or get the evil looks from some of the dudes in here
10:47 < radiodario> i figured i'd give 0.8.0 a week to simmer down a bit eh>
11:05 < circlicious> what is that weird data in child_exec.spawn's stdout/stderr callbacks ?
11:12 < timoxley> radiodario fair enough. just interested in what happened to it, as there isn't any mention of node_modules/.bin that I have seen anywhere, and npm bin still exists and works
11:14 < radiodario> dunno my installation went to hell last night so i spent all night fixing it
11:14 < radiodario> turns out it was express's fault
11:14 < radiodario> so it might work for you
11:14 < radiodario> use nave and have a couple of versions maybe?
11:20 < tco> There seems to be many curl wrappers available. Which one is the "best"?
11:21 < mmalecki> why'd you need a curl wrapper?
11:21 < tco> hmm, maybe I don't. I guess I can just use request?
11:22 < mmalecki> yeah :)
11:24 < dr0id> hi mmalecki
11:25 < mmalecki> sup dr0id 
11:26 < dr0id> you're the one who wanted to see processify on github right?
11:26 < tco> How about a router?
11:27 < mmalecki> dr0id: I don't actually remember few last days, but sure, show me
11:27 < dr0id> my progress - http://toolsdeck.com:8080/processify almost done. but I guess code is crappy :D
11:27 < mmalecki> oh, right, the thing
11:28 < dr0id> ruby preprocessors are a bit slow because the vps is not cool. while on my linode, its super fast :)
11:28 < mmalecki> you mentioned it was slow or something?
11:28 < mmalecki> :)
11:28 < mmalecki> try nodejitsu!
11:28 < dr0id> yah I did, hehe
11:28 < Bennit_GRR> Hi
11:28 < mmalecki> oh, cool :)
11:28 < Bennit_GRR> fix nick first, sec
11:28 < dr0id> should I put it on github now or maybe make the code better ? :P hehe
11:29 < Bennit> I'm trying to work with flapjax on node's server side: http://servian.eu/bcorne/test.zip
11:29 < Bennit> (dummy window and some function mappings)
11:30 < Bennit> but when I require the flapjax library, it results in an empty object, how comes?
11:31 < Bennit> (test.js just requires the flapjax library and logs it in the console, resulting in an empty object)
11:32 < mmalecki> dr0id: whatever, put it on github and fix later :)
11:32 < dr0id> ok
11:44 < Bennit> i've tried adding "return impl" at the end of the flapjax library (as it was missing since it originally provides all functions globally), but it still results in an empty object on require
11:56 < wiherek> hi
11:57 < circlicious> what is that weird data in child_exec.spawn's stdout/stderr callbacks ?
11:57 < circlicious> is it binary?
11:58 < circlicious> child_process.spawn
12:02 < luto> I execute many similiar actions in a row. Can I somehow wait for the first action to finish before starting the 2nd one, etc?
12:02 < wiherek> I had a problem with async functions, and I narrowed it down to this: http://jsfiddle.net/qhhfx/
12:03 < wiherek> basically, i need to wait for data to be received before executing other stuff - and I dont know how to wait for data to complete:)
12:04 < luto> wiherek: I think we have kind of the same problem :P
12:04 < augustl> isaacs: would be nice if you could take a look at http://travis-ci.org/#!/cujojs/when/builds/1683898 and tell us what exactly is going wrong :) When.js 1.3.0 has a devDependency for "buster", which in turn depends on When.js 1.3.0, or something like that.
12:04 < wiherek> luto: go with async module
12:05 < maximumrfan> >/#!/ Oh, how I hate this in URLs.
12:05 < circlicious> how did you make that grene?
12:06 < circlicious> green
12:06 < maximumrfan> Color/Control codes.
12:24 < wiherek> how to write a function that will read POST data before continueing? stuck at http://jsfiddle.net/qhhfx/
12:24 < arcanis> hmm, why does this code doesn't work ? Am I wrong with my streams ? http://pastebin.com/60saBT6k
12:35 < wiherek> how do I wait for data from a restler.post call to be received?
12:43 < RLa> wiherek, use callback
12:43 < wiherek> RLa - yea, but what function :)
12:43 < wiherek> I am using 'restler' module
12:43 < RLa> doesn't doc say
12:43 < wiherek> what happens now is the function executes
12:44 < wiherek> unfortunately, not
12:44 < wiherek> the function executes the callback before data is received.
12:45 < RLa> hm, it returns ee instead of using callback
12:45 < RLa> https://github.com/danwrong/restler#example-usage
12:48 < TehShrike> wiherek: are you saying that there will be many post requests like that, and you want the callback function to be executed only on the last one?
12:49 < wiherek> TehShrike - actually, no. But I just found that my code has a few more bugs :(
12:49 < TehShrike> Ah, ok :-)
13:02 < TehShrike> isaacs' blog is down? :-o
13:03 < Rainbowwww> the lulz
13:03 < TehShrike> Apparently the servers couldn't stand the rush of people heading over to read his post about modules
13:03 < Rainbowwww> Dem Modules :3
13:03 < TehShrike> Yeah... they're a big deal apparently...
13:05 < slickplaid> looks up to me http://www.isaacsdeli.com/
13:05 < TehShrike> :-D
13:05 < TehShrike> There are less blog posts than I remember
13:09 < Rainbowwww> slickplaid lol
13:10 < Rainbowwww> http://blog.izs.me/ 
13:11 < TehShrike> Aye, seems to be back up.  Now I can link people to it!
13:12 < slickplaid> that site made me hungry
13:15 < luto> well, I can't bring the RAM usage under 450MB..
13:15 < luto> bye then node.js :)
13:16 < TehShrike> <:-/
13:54 < UserOne> confused
13:58 < kiur> a quick question: is emitting events on the process object a good practice? e.g. process.emit('error', something);
13:58 < milani> didn't think v0.8.0 goes from RC to Release this soon:(
13:58 < kiur> 0.8 is released now?
13:58 < milani> yeah.
13:58 < kiur> great, updating my production server then
13:59 < kiur> node 0.8 means socket.io 1.0 is coming
13:59 < milani> kiur If I were you 
13:59 < kiur> which is way better than 0.x
13:59 < milani> I spent time to test on development box first.
13:59 < kiur> i've been testing the code on 0.7.something
14:00 < kiur> but sure i will take another look before really updating the production server
14:00 < milani> yeah if that something was after 9 then you are almost there.
14:00 < milani> but if it was v0.7.8 or below, you need to test again.
14:03 < kiur> i tested few 0.7.x releases back
14:04 < kiur> can somebody answer about emitting on process
14:04 < kiur> a quick question: is emitting events on the process object a good practice? e.g. process.emit('error', something);
14:04 < augustl> kiur: doesn't seem like a good idea to me
14:04 < lpin> can't compile node 0.8.0 from sources fedora 14 https://gist.github.com/2995961
14:04 < augustl> don't see what benefit that has over just making your own event emitter
14:04 < lpin> anyone had a similar issue?
14:07 < kiur> why initialize a new emitter if you already have one in the top scope?
14:08 < kiur> for generic, global events
14:10 < augustl> kiur: semantics and expected behaviour, I guess
14:14 < fluxrad> Hi i'm having some installation trouble with node - I'm getting the following error: ./configure 'import site' failed; use -v for traceback   File "./configure", line 261     o['variables']['node_prefix'] = options.prefix if options.prefix else ''                                                     ^ SyntaxError: invalid syntax
14:16 < augustl> lpin: worked fine on ubuntu for me
14:16 < lpin> fixed it augustl
14:16 < lpin> found a reply in github issue
14:17 < lpin> https://github.com/joyent/node/issues/3544
14:17 < lpin> if anyone has the same error
14:17 < lpin> have*
14:20 < augustl> lpin: nice!
14:21 < circlicious> what is that weird data in child_process.spawn's stdout/stderr callbacks ?
14:21 < circlicious> is it binary ? how do i convert it to plain text (i guess utf8?)
14:23 < AvianFlu> circlicious, I think there's child.setEncoding - you should check the docs
14:23 < AvianFlu> you'd set 'utf8' for the encoding - or you can just .toString() everything
14:23 < kiur> you can use a .toString() method on any buffer
14:24 < CIA-75> libuv: Shigeki Ohtsu master * rc6f2ef2 / include/uv.h : uv.h: add members to any-union of handle and req - http://git.io/x3UeLw
14:25 < circlicious> AvianFlu: kiur : so is that buffer binary string?
14:25 < circlicious> just curious
14:26 < kiur> probably
14:26 < kiur> output the buffers contents as a string with the .toString() method and you'll see what it is
14:26 < klaemo> I'm using dscape's nano to access my iriscouch and I randomly get ECONNREFUSED errors. I can't reproduce it, I just see it in my logs. Any idea what is happening?
14:27 < circlicious> kiur: .toString gives me the text i want it as
14:27 < kiur> so problem solved?
14:28 < AvianFlu> buffers are how node handles binary data
14:28 < AvianFlu> it's like an array straight out of C, instead of a pretty magic javascript array
14:28 < AvianFlu> that's a simple way to think o fit
14:29 < circlicious> AvianFlu: ok
14:32 < kiur> its funny how you can increase or decrease the .length property of a buffer ... if i resize a buffer to a larger size, will the heap get fragmented more easily?
14:33 < AvianFlu> kiur, there's a slab allocator involved, I think, to make stuff like that sane
14:33 < AvianFlu> but we're rapidly getting out of my league, here
14:34 < kiur> :P
14:34 < kiur> i dont know what im talking about either :P
14:36 < CIA-75> node: Ben Noordhuis v0.8 * r06c82c5 / configure : build: expand ~ in `./configure --prefix=~/a/b/c` - http://git.io/IHtHCQ
14:48 < circlicious> well
14:49 < circlicious> i will have multiple apps in my 1 root folder, so what can i do to acces them in the way they are organized from the browser?
14:49 < circlicious> so /var/www/foo/bar becomes example.com/bar , /var/www/foo/baz example.com/baz , get me?
14:55 < creationix> circlicious: what kind of apps?
14:55 < creationix> is it static files, express apps, something else?
14:55 < creationix> but generally to serve multiple apps/websites you can either use url routing (with possible virtual hosting) or run each app on it's own port and put  reverse proxy in front of them.
14:56 < creationix> both methods have their pros and cons
14:56 < circlicious> creationix: express
14:56 < creationix> express apps are mountable inside a big express app I believe
14:56 < circlicious> i want to maintain each app separately in git repos and what i said above :) not sure ow to do it :S
14:57 < creationix> that doesn't matter for running the apps
14:57 < creationix> your file system doesn't care if it's one big repo or many small ones
14:57 < creationix> the question is do you want one process listening on a single port, or several processes on individual ports
14:57 < circlicious> hmmm, which is ebetter ?
14:58 < circlicious> i guess 1 process on 1 port and serving all app sshould be fine ?
14:58 < NodeX> whichever is best for you probably#
14:58 < circlicious> hm, but if something fails in some app the entire process is going to die right ? all apps gone to hell
14:58 < NodeX> each to thier own normaly
14:58 < creationix> circlicious: correct
14:58 < creationix> I run howtonode.org and creationix.com in a single process
14:58 < creationix> but nodebits.org and my other c9 sites have own processes
14:58 < circlicious> c9?
14:59 < creationix> cloud 9, I work for them
14:59 < radiodario> CLOUD9
14:59 < circlicious> oh
14:59 < radiodario> creationix: i love you gusy
14:59 < creationix> :)
14:59 < radiodario> i use cloud9 its awesomesauce
14:59 < creationix> radiodario: you should see the updates we're getting today
14:59 < circlicious> cloud9 is built on node.js ?
14:59 < radiodario> yes
14:59 < booyaa> true dat
14:59 < creationix> yep
14:59 < booyaa> heck you can fork it and runa  local instance of c9
14:59 < creationix> and so are my c9 related sites like nodebits.org
14:59 < radiodario> i run it locally tho, boss aint happy about me storing code on your servers
14:59 < booyaa> how awesomes is that
14:59 < circlicious> its the one that uses ace ajax editor right?
15:00 < creationix> and nodemanual.org
15:00 < creationix> circlicious: yes, we wrote ace
15:00 < circlicious> oh wow
15:00 < circlicious> you guys did a lot:D
15:00 < creationix> cloud9ide was called ajax.org
15:00 < booyaa> creationix: are you the same bloke that got nodejs working on webos touchpad?
15:00 < circlicious> good to know, never knew all these :D
15:01 < creationix> booyaa: not initially, but I was the one that got 0.4.x finally on there
15:01 < circlicious> but back to my original quesdtion, hehe
15:01 < creationix> (days before 0.6.x came out :()
15:01 < circlicious> well
15:01 < circlicious> say if i want to run all on 8080
15:01 < booyaa> creationix: ja time marches on eh?
15:01 < circlicious> express app, what should be done?
15:01 < creationix> circlicious: are you using web sockets?
15:01 < circlicious> no, but i will use it for 1 app
15:02 < circlicious> whihch i will build next month
15:02 < creationix> web sockets are hard to proxy
15:02 < circlicious> initially i will have about 3 apps
15:02 < creationix> but there are proxies now that handle it
15:02 < creationix> including one written in node
15:02 < creationix> so if you go the proxy route, be aware of that
15:02 < circlicious> i have taken a look at https://github.com/nodejitsu/node-http-proxy/ - i guess thats what you would say if i wanted to run on separate ports
15:02 < creationix> yep, that works
15:03 < creationix> I think I use nginx for nodebits.org and friends
15:03 < creationix> since they don't use websockets
15:03 < creationix> circlicious: where are you going to host this?
15:04 < circlicious> i think linode :)
15:04 < creationix> circlicious: ubuntu?
15:04 < creationix> (all my sites are on linode)
15:04 < circlicious> yup "_
15:04 < circlicious> :)
15:04 < circlicious> ubunut 12.04
15:04 < creationix> ok, let me gist my upstart configs
15:04 < circlicious> i love ubuntu, its easy for noobs like me lol
15:05 < circlicious> creationix: cloud9 uses express?
15:05 < creationix> https://gist.github.com/2996318 - for creationix.com, howtonode.org, and others I run
15:05 < creationix> circlicious: I think so, or maybe just connect.  I work at cloud9, but not very much on the IDE itself
15:06 < bradleymeck> is there a way to save a compiled module in the npm cache to prevent ppl from needing to rebuild it on install?
15:06 < circlicious> creationix: just wanted to know that such projects are built on small frameworks like expres (sinatra like) :)
15:07 < circlicious> i thought such projects would use bigger frameworks, thats all
15:07 < wavded> in your opinion what do people use node the most for?
15:07 < wavded> or in other words, what do you use node for?
15:07 < wavded> trying to take a little mini poll
15:09 < bradleymeck> wavded: arbitration of data streams
15:09 < circlicious> creationix: i am still a bit confused, how would i make it work in my case ? foo/bar example.com/bar foo/baz example.com/baz on 1 port?
15:09 < creationix> circlicious: ok, added more to gist
15:09 < creationix> I added my upstart scripts for my 3 node sites on another linode
15:09 < creationix> each on it's own port
15:09 < creationix> and here is one of the nGinx configs https://gist.github.com/2996318#file_nodebits.org
15:11 < eddyb> so, are any sort of iterators working in v8/node.js?
15:11 < creationix> circlicious: and my node server that embeds the sites in-process on the other box https://gist.github.com/2996348
15:11 < creationix> circlicious: you have to decide if you want one port for all or one port for each
15:11 < funktronic> any of you using joyent cloud with smartos?
15:12 < eddyb> Iterator isn't defined, does an __iterator__ method help with anything?
15:12 < creationix> one port for each is more work, but more robust
15:12 < creationix> and there is overhead of having the proxy
15:12 < creationix> eddyb: did you check the v8 flags?
15:12 < creationix> most featured past ES5 have to be enabled at command-line
15:13 < eddyb> creationix: isn't --harmony enough?
15:14 < creationix> eddyb: no idea
15:14 < creationix> and V8 doesn't have all of harmony
15:14 < creationix> though 0.8.0 got a much newer V8
15:14 < eddyb> wow
15:14 < bradleymeck> funktronic: i use smartos some
15:15 < circlicious> creationix: 1port per app is something i might fo a bit later. but right now i wanna try and quick setup 1 port for each with the filesystem way i mentioned (like i can do with my apache+php)
15:15 < circlicious> i dont use nginx, and that node code is a bit complex, so i am still confused :P
15:16 < circlicious> but hey, dont delete the gists, i'll use them to learn more in the next few days :)
15:16 < eddyb> my old v8 has typeof, block scope, proxies (those I knew) and collections
15:16 < creationix> circlicious: there is no automatic way to do what apache+php does
15:16 < creationix> it has to be implemented 
15:16 < creationix> plus the model is different
15:16 < funktronic> bradleymeck: any real advantages to using it over vanilla linux?
15:16 < creationix> php scripts are compiled on demand
15:17 < creationix> node is long-running processes
15:17 < circlicious> ya true
15:17 < bradleymeck> funktronic: io speed
15:17 < creationix> circlicious: how php-like do you want it?
15:17 < bradleymeck> funktronic: oh and full featured dtrace
15:17 < bradleymeck> linux dtrace is not 100%
15:17 < funktronic> bradleymeck: that does sound appealing.. IO speed just for node?
15:17 < funktronic> we hit mongo a ton
15:17 < creationix> bradleymeck: dtrace indeed, but I thought linux was still better for raw performance
15:18 < eddyb> stupid node.js REPL
15:18 < eddyb> stop trying to guess that my statement is incomplete
15:18 < circlicious> creationix: as i said, say my root dir is /var/www/ and i have my apps, /var/www/foo and /var/www/bar and /var/www/baz, i want to access them likelocalhost:8080/foo and /bar and /baz :)
15:18 < eddyb> it does it even in eval
15:18 < creationix> circlicious: ok, so with some conventions this can be done
15:18 < circlicious> i guess the mian index.js/server.js will le in/var/www
15:18 < creationix> basically you'll want to readdir in a folder, create an express app instance for each one, and mount then at the urls
15:19 < creationix> with code somewhat like my node code
15:19 < funktronic> but approaching it like php is the wrong way to go
15:19 < bradleymeck> creationix: for non-virtualized it can be, virtualized smartos wins
15:19 < bradleymeck> zones are way less than containers
15:19 < bradleymeck> overhead wise
15:19 < bradleymeck> though i guess you should pay attention to if you even need more IO some people don't need it and should benchmark
15:19 < bnoordhuis> creationix: yes. node is a hell of a lot faster on linux than it is on smartos
15:19 < bnoordhuis> mostly due to a better kernel, better tuned libuv
15:20 < creationix> but yes, dtrace is best in smartos, (partly do to the fact that Brian works at Joyent)
15:21 < creationix> and solaris has always had the best dtrace being where it was initially made
15:21 < funktronic> smartos is a solaris derivativ e then?
15:21 < creationix> yep
15:21 < bnoordhuis> creationix: now if they only had a great kernel, eh? :)
15:21 < bnoordhuis> (i kid, i kid - partly)
15:21 < circlicious> hmmm
15:21 < creationix> bnoordhuis: is linux still faster inside a xen virtual kernel?
15:22 < creationix> that's what I usually use
15:22 < bnoordhuis> creationix: there is no yes or no to that question
15:22 < creationix> yeah, it all depends on the tuning I'm sure
15:23 < creationix> circlicious: do you need more help?
15:23 < bnoordhuis> creationix: but a moderately representative benchmark is libuv's run-benchmarks target
15:23 < bradleymeck> need to find a good cache layer for npm's compiled modules...
15:23 < circlicious> creationix: well, so basically i just do it with express routes?
15:23 < creationix> bnoordhuis: so just run that on various hosts I want to host on and see what's faster?
15:23 < circlicious> app.get('/foo') app.get('/bar') ... ?
15:23 < creationix> circlicious: I think so
15:24 < creationix> I'm not an express expert by any means
15:24 < circlicious> not something like keeping my app more like separate, etc.
15:24 < circlicious> like if its all 1 express app, i have t use 1 single assets folder for all, which is not what i want for example
15:24 < circlicious> i want /var/www/foo/assets and /var/www/bar/assets but then i have to use 1 single location
15:24 < creationix> I don't know about express, but it should be quite possible to mount app instances inside a parent app
15:24 < circlicious> hmm
15:25 < creationix> I wrote connect and this was one of the design goals
15:25 < creationix> I assume the feature is still there
15:25 < bnoordhuis> creationix: yes
15:25 < circlicious> creationix: you said howtonode and creationx.com are on the same port
15:25 < circlicious> are they using express?
15:25 < bnoordhuis> creationix: should also give some insight on the operating system's strong and not-so-strong points
15:26 < creationix> circlicious: right, raw node on a linode.  See server.js and node.conf in the gists
15:26 < creationix> bnoordhuis: good idea.  Also the hardware involved affects performance
15:26 < creationix> so the best way to know for sure is to test it
15:27 < creationix> circlicious: no, I don't use express, but I think those use stack (which is a minimal connect replacement)
15:27 < creationix> circlicious: when I was working on it, a "middleware" was just a function with (req, res, next)
15:27 < creationix> you could layer these and mount them into eachother
15:27 < creationix> r
15:28 < creationix> so www/foo/app.js would export a function
15:28 < creationix> and www/server.js would iterate over it's child directories and load the function from each one
15:28 < creationix> and mount each at a path
15:28 < creationix> and then bind to port 80 
15:29 < creationix> I think in express you can export the app instance before calling listen
15:29 < creationix> and then use it as a route in the maste
15:29 < creationix> r
15:29 < circlicious> ya but how do you mount 2 different routes at howtonode.org/ and creaitonix.com/ ?
15:29 < creationix> that's just header based routing
15:29 < creationix> it checks the Host header
15:30 < circlicious> and then maps to some app.get('/howotnode_home' and app.get('creationiz_home') ?
15:30 < creationix> https://github.com/creationix/creationix/blob/master/vhost.js
15:30 < CIA-75> node: Andreas Madsen v0.8 * r401ff10 / doc/api/child_process.markdown : doc: `detached` is a boolean - http://git.io/wcoe9w
15:31 < creationix> circlicious: see line 18 in https://gist.github.com/2996348
15:31 < creationix> Stack arguments are like calling .use() over and over
15:32 < circlicious> ok thanks, i guess these will help, i will be back when i have more questions. :)
15:32 < creationix> circlicious: there are probably express idioms for this, I just don't know them.  You can always ask in #express for specific questions about how to do this there
15:32 < circlicious> ok ,sure
15:32 < circlicious> later when i move to multiple ports i just use this re verse proxy - https://github.com/nodejitsu/node-http-proxy/ ? :)
15:34 < creationix> yeah, that's a good one
15:34 < circlicious> ok, thank you very muych
15:34 < creationix> I think that's what we use for cloud9 and what joyent uses
15:34 < creationix> so it should be battle tested
15:34 < bradleymeck> creationix, did you think of any protocols you need and/or get that msg from last night?
15:35 < SubStack> http-proxy has lots of hull plating to resist cylon attack
15:35 < creationix> bradleymeck: mainly serialization formats and higher-level protocols
15:35 < bradleymeck> its in heavy use here, but avoid the routing table as almost no one uses that
15:35 < bradleymeck> creationix list em and ill spec/work on them as time allows
15:35 < jocafa> pew pew pew
15:35 < CIA-75> libuv: Roman Neuhauser v0.8 * r5a0f341 / (include/uv.h src/unix/error.c): unix: map ENODEV to UV_ENODEV - http://git.io/3mr_Tw
15:36 < creationix> bradleymeck: well, would you want custom protocols like dnode-protocol or my smith protocol
15:36 < bradleymeck> anything
15:36 < creationix> or json and msgpack with optional netstring framing and/or streaming
15:37 < AvianFlu> SubStack, lolololol
15:37 < bradleymeck> if it serves a purpose that cannot be filled with those listed it will be medium priority if it duplicates lower priority, if it facilitates other protocols gets high priority
15:37 < jocafa> we use protocol buffers at work </2¢>
15:37 < SubStack> creationix: speaking of, I guess that weakref stuff is working pretty well for folks at getting rid of memory leaks
15:37 < creationix> SubStack: awesome
15:37 < SubStack> even if you write code in a completely silly way that sends a new callback thousands of times per second
15:38 < AvianFlu> SubStack, some people pummel test stuff for fun, it's a fact we all have to face :D
15:38 < SubStack> also node-weak is awesome
15:38 < creationix> I think that was my biggest gripe with dnode-protocol
15:38 < SubStack> it just took me forever to figure out how to use it effectively and how best to shim it into dnode-protocol
15:38 < creationix> the other was lack of binary data, but that shouldn't be hard to bake in
15:38 < creationix> just replace json with msgpack or something
15:38 < eddyb> SubStack: <3 weak
15:38 < eddyb> finally, dtors :P
15:38 < SubStack> AvianFlu: yeah I did that too and the memory stabilized with 10 concurrent connections going full throttle on 1 server at <40M
15:39 < SubStack> it's in the perf/memory directory of dnode
15:39 < AvianFlu> nice
15:39 < SubStack> creationix: yeah I left that part pluggable in dnode-protocol so people should use different libs for serialization
15:40 < STRML> wow node-weak is very cool
15:40 < creationix> I extended the msgpack format to know the difference between undefined and null, between "foo" and new Buffer("foo")
15:40 < creationix> so it works great for js apps
15:40 < creationix> I tried to serialize streams in the protocol, but it was too complicated
15:41 < creationix> I ended up doing that on top of the protocol using named events and ids
15:41 < SubStack> I think streams are better handled using a dedicated mux/demuxer
15:41 < SubStack> https://github.com/dominictarr/mux-demux
15:41 < creationix> https://github.com/c9/vfs/blob/master/socket/consumer.js and https://github.com/c9/vfs/blob/master/socket/worker.js
15:41 < creationix> SubStack: yep, something like that
15:42 < SubStack> with mux-demux you can put an rpc stream alongside other streams carrying different payloads
15:42 < SubStack> all over the same stream
15:42 < creationix> oh, I see, I was multiplexing the streams using rpc
15:42 < creationix> you do it lower down
15:42 < SubStack> well I've been experimenting with doing it lower down
15:42 < SubStack> I've used streams over rpc too but they don't fit very well unless you make them a primitive
15:42 < creationix> I tried that too, but didn't like it for some reason
15:43 < creationix> I don't remember now
15:45 < jocafa> node-weak?
15:45 < klaemo> I'm using dscape's nano to access iriscouch and I randomly get ECONNREFUSED errors. I can't reproduce it, I just see it in my logs. Any idea what is happening? the URL, user and password are correct for every request
15:45 < therealkoopa> I'm looking to "throttle" or "debounce" a function.  I have a function that may be called 5 times in a few ms.  I want it to build up an array with all the arguments it receives, and then after 2 seconds (or whatever), do some operations on the arguments it received over the last few calls.  Does throttle or debounce make sense, or should I be looking at a different/better way?
15:45 < jocafa> therealkoopa:  underscore has both of those
15:46 < jocafa> except not what you're looking for. nm
15:46 < SubStack> jocafa: implements weakrefs which let you have a reference to an object that doesn't get counted by the GC and lets you listen for when your objects gets GC'd
15:46 < therealkoopa> jocafa: I use it on the client-side, haven't included underscore in my node stuff yet, but I don't think it fits right.  Maybe I'm not looking at it correctly, though.
15:46 < jocafa> SubStack:  i… want in on this.
15:46 < SubStack> jocafa: well I've only had a single use for them in all my modules so far
15:47 < SubStack> I guess it could be useful if you need to de-initialize state
15:47 < jocafa> therealkoopa:  i use underscore server-side, it's got some great utilities in it and nothing that's client-side specific
15:47 < SubStack> RAII and all of that
15:47 < therealkoopa> jocafa: Yea, I have no problem including it if I need it.
15:48 < jocafa> SubStack:  i've been dying for something like it for a while on one of my projects. haven't needed it anywhere else before
15:50 < jocafa> https://github.com/TooTallNate/node-weak  ← this?
15:50 < jocafa> </subtle js joke there>
15:50 < SubStack> jocafa: yep
15:50 < creationix> bradleymeck: ok, I files a few issues.  hopefully it's what you're looking for
15:50 < jocafa> cool. follow'd
15:51 < bradleymeck> klaemo: have you tested if curl can touch it on an interval consistently? it may just be unable to talk for w/e reason (migrating db server, server overloaded, etc)
15:51 < context> http://sphotos.xx.fbcdn.net/hphotos-prn1/603690_10150883911392535_1100286172_n.jpg
15:51 < SubStack> jocafa: here's the code that dnode uses it for https://github.com/substack/dnode/blob/master/index.js#L26-L37
15:52 < SubStack> it's really terse but it took forever to figure out how best to fit it into dnode/dnode-protocol
15:52 < Y3Klo> Morning guys!
15:52  * jocafa reads
15:52 < Y3Klo> I'm starting with NodeJS, I've successfully made a "Hello World".
15:53 < Y3Klo> I just want to know what is the best way to handle development environments.
15:53  * jocafa high fives Y3Klo
15:53 < creationix> SubStack: so what does that do exactly?
15:53 < Y3Klo> In Python, for example, we've virtualenv (which allows isolates packages, paths, etc.)
15:54 < Y3Klo> I've read aboud nodeenv (another Python package), but I'm just curios about what you think
15:54 < SubStack> creationix: dnode-protocol has wrap/unwrap options that let you define custom logic to store and retreive values that are different from the actual objects used by the client
15:54 < creationix> I see, it's a hook
15:55 < SubStack> yep https://github.com/substack/dnode-protocol/blob/master/index.js#L67-L72
15:55 < klaemo> bradleymeck: I will try that. It happens really inconsistently though. I just can't imagine it's because of some admin tasks on the db
15:55 < SubStack> that's all the code it took to make these work but it took forever to figure it out still
15:55 < SubStack> like 2 solid days just for ~10 lines in total
15:56 < SubStack> and a lot of restructuring around those changes
15:56 < creationix> that's how you know it's real coding
15:56 < creationix> 99.9% thinking
15:57 < creationix> ;)
15:57 < jocafa> creationix:  amen, man. i wish more developers realized that
15:57 < creationix> I mean don't misunderstand me, I'm as bad a cowboy coder as they come.  I think by writing
15:58 < creationix> but my best projects are the ones I spend days trying to figure out and came up with short, elegant solutions
15:58 < dr0id> I probably have a weird question, I want to maintain 2 package.json. actually the second one should be more of a dependency list only, nothing else. is that possible ? so maybe then I can do something like $ npm install --source package_dependencies_only.json ?
15:58 < creationix> (after rewriting them 10 times)
15:58 < SubStack> yeah I'm in that mode right now too, just thinking about how to structure this headless browser launcher instrumentation code coveragerator
15:58 < jocafa> "Are you working?"  "Yes. I'm thinking. Go away."
15:58 < SubStack> I have a working prototype but it seems like the structure is not ideal to add more browsers and to interface with testling
15:59 < creationix> jocafa: yeah, pausing to think is kinda important
15:59 < jocafa> so is not-getting-interrupted.
15:59 < jocafa> STOP INTERRUPTING ME GUYS
15:59 < jocafa> ¬¬
15:59  * jocafa waits patiently for adderall to kick in
16:00  * dr0id waits patiently for his question to get answered :)
16:01 < SubStack> I think in this case I'll get past this sticking point by rolling this into its own module
16:01 < SubStack> that usually works
16:01 < sriley> Y3Klo: personally, id say the best way to set up a development environment is to have a separate vm per project (vagrant makes it nice and easy)
16:01 < SubStack> plus it's fun
16:01 < SubStack> and it's easy to throw modules away that don't work out
16:02 < Y3Klo> sriley: Of course, the idea is to maintain the whole projects separate from each other. I'll check vagrant then, thank you.
16:07 < klaemo> bradleymeck: iriscouch seems to perform fine. I just did a few apache benchs and curls and no dropped requests at all. what could I be doing wrong?
16:07 < bradleymeck> unsure, just that would seem the first thing i would test
16:12 < CIA-75> node: isaacs master * re307468 / (src/node.cc test/simple/test-process-env.js): Fix #3521 Use an object as the process.env proto - http://git.io/aRBqiQ
16:14 < CIA-75> node: isaacs master * r42ea37a / src/node_version.h : Now working on 0.9.0 - http://git.io/hOhjLQ
16:19 < Rainbowwww> http://notes.envato.com/general/tuts-premium-security/ <-- da lulz!
16:31 < NotMyself> morning noders
16:34 < bnoordhuis> http://news.ycombinator.com/item?id=4161664 <- ORMs, evil or merely always wrong? discuss!
16:35 < vrlogrs> ello
16:35 < vrlogrs> hello*
16:37 < vrlogrs> was hoping to find a few people to test out my game
16:37 < vrlogrs> made it in node.js :)
16:37 < vrlogrs> http://209.141.47.151/chess
16:37 < janmower> as someone who has been in the trenches in ActiveRecord and Hibernate, http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx
16:37 < vrlogrs> need a bunch of people preferably to test the wait queue
16:38 < vrlogrs> and see how much memory it's going to roughly useup per connection
16:38 < vrlogrs> also need some more ideas for games :)
16:39 < vrlogrs> to code in node.js
16:39 < vrlogrs> already got chess and tictactoe
16:39 < context> vrlogrs: kerplunk
16:39 < augustl> are there any libraries for per-environment config files for express? Or are most people using environment variables?
16:39 < vrlogrs> whats that?
16:40 < tjholowaychuk> augustl it can be as simple as var conf = require('./config/' + app.settings.env)
16:40 < tjholowaychuk> augustl we're layering https://github.com/visionmedia/eson on top to make some config a bit more declarative
16:41 < vrlogrs> context: not sure if many people would even play that 
16:43 < vrlogrs> so, any players?
16:43 < context> heh. not sure how internet kerplunk would work to be honest
16:43 < vrlogrs> yah, that's what im thinking too
16:43 < possibilities> can anyone recommend a lib for deep copying a fs directory? first one i tried (wrench) kinda worked but it lost file permissions
16:48 < vrlogrs> so, any other game suggestions?
16:48 < vrlogrs> and/or chess players?
16:54 < STRML> vrlogrs: backgammon?
16:55 < STRML> vrlogrs: also, why login for a game of Chess? Can't I just put my name in?
16:55 < vrlogrs> it only needs a first name
16:55 < vrlogrs> it's for the leaderboard
16:56 < vrlogrs> doesnt need anything else
16:56 < vrlogrs> i just havent written a login/register script yet
16:56 < STRML> Right. I run a site that does FB oauth also but I can't shake the suspicion... evil FB apps ruined it for me. But yeah I'll give it a shot
16:56 < vrlogrs> so, fb-login is easy
16:56 < vrlogrs> trust me: http://vrlogrs.com/
16:56 < vrlogrs> i use the same fb script here as well
16:56 < STRML> :)
16:57 < vrlogrs> my sites are online
16:57 < vrlogrs> u can spam me if i ever spam u :)
16:57 < STRML> Also, after logging in I got bounced back to the login page with an access denied message in the URL bar. But going back to /chess showed me logged in
16:57 < vrlogrs> weird ..
16:57 < vrlogrs> ill look into that - thanks
16:57 < STRML> Sure. Nothing is ever simple
16:58 < vrlogrs> anybody else care to play?
16:58 < vrlogrs> please
16:58 < vrlogrs> I agree STRML
16:59 < vrlogrs> STRML -- were you able to login?
16:59 < vrlogrs> did you get into the waitq?
16:59 < Franz__> vrlogrs whats address?
16:59 < vrlogrs> http://209.141.47.151/chess
17:01 < vrlogrs> anyone else for chess? will appreciate it
17:01 < Franz__> im playing
17:02 < vrlogrs> oh, that's you Smith ?
17:02 < STRML> vrlogrs - yeah I did, in a meeting atm though
17:02 < vrlogrs> oh ok -- no worries STRML 
17:02 < vrlogrs> thanks though
17:02 < Franz__> yes
17:02 < vrlogrs> ok
17:02 < vrlogrs> please let me know if there's any bugs
17:05 < vrlogrs> seems like the timer's not working properly
17:08 < tar_> I want to serve a static directory, but modify the contents of HTML and JS files as they are sent
17:09 < tar_> Can I do that by hooking into connect.static? Or maybe there's a better way?
17:09 < Franz__> i cant move
17:09 < Franz__> ;/
17:09 < Franz__> my tower
17:09 < vrlogrs> ur in Check :)
17:10 < Franz__> i cant move nothing now
17:10 < vrlogrs> u have to move king ..
17:10 < vrlogrs> u have to kill the queen
17:10 < Franz__> ah yes
17:11 < Deathspike> Hello, I'm trying to get into development with Node and have done the basic introductions with Node and Express. I was wondering what would be recommend, or popular, stacks for MVC and RESTful services; something that is active and stable?
17:11 < Franz__> because the text 
17:11 < Franz__> i not seeing the queen
17:12 < vrlogrs> any bugs so far?
17:19 <@isaacs> many people pitching their libraries gets so tedious.  we should make a rule that you get at most one "Check out this thing I built" message per library.
17:20 <@isaacs> or maybe we should just fix the npm search experience so that we rely less on advertisemetns..
17:22 < AAA_awright> And applications, too... "Check out my new application you can now search for flashlight battery by charge capacity and country of origin you should try it out it's the best thing since sliced bread, never be left with the wrong type of battery when the power goes out ever again!"
17:22 < othiym23> Deathspike: above and beyond Express?
17:22 < vrlogrs> im out for lunch soon
17:23 < vrlogrs> if anyone else wants to play: .php
17:23 < vrlogrs> http://209.141.47.151/chess *
17:23 < CIA-75> node: Bert Belder v0.8 * r1044848 / configure : configure: don't fail if compiler_version() doesn't work - http://git.io/qV7TxQ
17:23 < Franz__> i cant...
17:23 < vrlogrs> Franz__: any bugs?
17:24 < Deathspike> othiym23: Yes, I'm mainly looking for information about a clean (or proper way) to define controllers, routing, views, and so forth. I've spend most of my day looking into NodeJS and Express, but there is *so much available* I don't really know what's popular, or good, etc.
17:24 < vrlogrs> apart from the timer -- ive fixed that - so ill restart the server after our game
17:24 < Franz__> bug
17:25 < othiym23> Deathspike: most people seem to end up with a pretty typical Express / Connect + EJS / Jade / Plates / Mustache / Handlebars + Stylus / LESS + CouchDB / MongoDB / MySQL / Mongoose stack
17:25 < vrlogrs> ok, server's back online
17:25 < vrlogrs> fixed the bug
17:25 < timoxley> Deathspike I struggled with that at the start as well. The proper way is 'just build as you need it, expand when necessary'.
17:25 < vrlogrs> thanks Franz__ and STRML
17:25 < STRML> Deathspike: Depends on your DB, but a simple models/views/controllers stack using Express is really common
17:25 < othiym23> Deathspike: if you're looking for something like Rails, Node.js webapps tend to be leaner and less monolithic than that
17:26 < timoxley> Deathspike i.e. just start with a single file and go from there
17:26 < STRML> i would start by creating m/v/c folders and index.js loaders then going from there
17:26 < timoxley> gross
17:27 < tjholowaychuk> write modules not m/v/c stuff, spread the app horizontally
17:27 < othiym23> Deathspike: if you want a good source of ideas for building a kinda Railsesque stack, look at Flatiron
17:27 < othiym23> but Node.js dictates its own architectural patterns, like tjholowaychuk said
17:27 < tjholowaychuk> you want things like ./lib/{login,signup,admin}/{views,server,public}
17:27 < othiym23> Railsy apps in Node feel pretty clunky
17:27 < tjholowaychuk> not unix spread yourself all over the damn place style
17:27 < Deathspike> Thanks for the advice. I come from a PHP and C# background so I'm very much looking into things like automatic routing to a controller folder, stuff like that.
17:28 < Deathspike> It seems clunky to have to include each file by hand
17:28 < tjholowaychuk> explicit > *
17:28 < Deathspike> (But it is possible I'm missing things!)
17:29 < othiym23> I'm with TJ
17:29 < tjholowaychuk> you dont have to manually pull files in, but if you choose not to
17:29 < tjholowaychuk> at least it was your choice
17:29 < othiym23> lotsa small, focused bits of functionality over monolithic abstractions
17:29 < tjholowaychuk> nothing wrong with abstractions just dont make ones you cant back out of
17:32 < timoxley> Deathspike avoid making architectural decisions until you're more familiar with the system and the problem domain. Poor architecture is worse than none.
17:33 < timoxley> MVC  lulls people into false sense of security
17:33 < Deathspike> timoxley: That is a major issue for me, I'm usually taking on the role of architect so I tend to think too big, too soon.
17:33 < timoxley> start with single file and grow organically
17:34 < Deathspike> However, I cannot even grasp how I would route calls without being explicit for every single function.
17:34 < tjholowaychuk> think big horizontally
17:34 < timoxley> I had exact same issue.
17:34 < tjholowaychuk> ./{controllers,views,public} is a terrible mistake lol
17:34 < tjholowaychuk> unless you know the project is going to be small
17:35 < Deathspike> For example, if I am going to define a controller (talking MVC pattern here) I want actions. Do I really need to write "app.get( "/Product/:id", func.." for every single method I want?
17:35 < tjholowaychuk> at that level yes
17:35 < tjholowaychuk> if you look at express-namespace or express-resource
17:35 < tjholowaychuk> you'll see it's easy to abstract on top of those
17:36 < tjholowaychuk> personally i dont use any of those, routes are simple and i like that but people use those
17:36 < tjholowaychuk> i just dont think you really gain anything
17:36 < Deathspike> I like express-resource, from the looks of it, too. It takes away a bit of clunkyness of having to write out an entire path every time :P
17:36 < tjholowaychuk> https://github.com/visionmedia/express/blob/master/examples/route-separation/app.js#L19
17:36 < tjholowaychuk> is what I prefer personally
17:37 < Deathspike> That is not bad either.
17:37 < tjholowaychuk> duplicating a line wont kill you haha
17:38 < Deathspike> I tend to think DRY
17:38 < othiym23> I like the way that explicitly enumerating the routes acts as implicit documentation of the app's API
17:38 < othiym23> it makes it very easy to come back to a project after some time and figure out what's going on, or pick up a new project written in that style and figure out what messages it supports
17:39 < othiym23> I was able to suss out a fairly complicated application written in typical Express style in about half an hour, starting cold
17:39 < Deathspike> And this linked example is considered typical?
17:40 < othiym23> Deathspike: tjholowaychuk == visionmedia ;)
17:41 < Deathspike> Can I iterate over files from within NodeJS?
17:41 < othiym23> fs.readDirectory should do what you want
17:42 < othiym23> sorry, fs.readdir
17:42 < othiym23> (try to pretend the *Sync variants of the fs calls don't exist for as long as possible)
17:43 < AAA_awright> isaacs: --shared-v8 works perfectly fine when I also include --shared-v8-includes=somevalue (doesn't matter what value, it just has to be truthy)
17:43 < AAA_awright> isaacs: In configure in function configure_v8 after line 316 the following needs to be added so --shared-v8 by itself doesn't throw an error: "  o['variables']['node_shared_v8_includes'] = b(options.shared_v8_includes)"
17:43 < Deathspike> I have a tendency to use CamalCase and not lowerCamelCase; I suspect this is frowned upon in NodeJS community?
17:44 <@isaacs> AAA_awright: post issue or mailing list.
17:44 < othiym23> Deathspike: it's a strong JavaScript convention to reserve initial caps for Constructor functions
17:44 < Deathspike> othiym23: Gotcha.
17:45 < timoxley> Deathspike http://nodeguide.com/style.html
17:45 < Deathspike> timoxley: Thanks!
17:45 < AAA_awright> Can someone else confirm that --shared-v8 fails for them?
17:47 < Deathspike> Another little thing, do I really have to restart node each time I make a change in my app? Is there some kind of tool that I can use to auto reboot automatically (@file change) or at a press of a button?
17:48 < qbert_> how can I get the requesting IP address in expressjs ?
17:49 < othiym23> Deathspike: you can configure your application to use NODE_ENV to determine whether to run in dev or prod mode, and then write support for dev mode to look for changes to app files
17:50 < othiym23> but you gotta write it yourself
17:50 < othiym23> Node.js is all about the DiY
17:50 < timoxley> qbert_ it's something like req.connection.remoteAddress
17:50 < othiym23> Deathspike: you might want to take a look at github.com/cowboy/grunt whlie you're playing around with stuff
17:50 < othiym23> it could possibly save you some time
17:50 < timoxley> qbert_ console.log() the reqest object
17:51 < tobo> qbert_ 3x has req.ip but yeah in 2x you have to use req.socket.remoteAddress
17:51 < othiym23> as for me, I just write most of my apps (except for asset pipelines) to run in production mode all the time, and ctrl-c / restart a lot
17:51 < tobo> whatever it is
17:51 < NotMyself> anyone have a node user group up and running? what kind of stuff do you do at your meetings?
17:52 < possibilities> interesting, tried a couple libs that copy a fs dir recursively and they both use lose execute perms on a file... any tips?
17:52 < timoxley> Deathspike I use nodemon to restart my app whenever files change, grunt is more for compiling/preprocessing assets and probably overkill for what you need
17:52 < Deathspike> tomixley: That's exactly what I was looking for!
17:53 < NotMyself> Deathspike: i use supervisor for similar functionality
17:53 < jfroma> is npm still having issues?
17:54 < alunny> can anyone recommend a module for dealing with zip files? zipstream looks reasonably well maintained
17:54 < CIA-75> node: Tim Oxley v0.8 * r69f594d / doc/blog/release/node-v0.8.0.md : Added % difference for perf benchmarks in 0.8 post - http://git.io/56GEjQ
17:54 < jfroma> possibilities fstream
17:55 < Deathspike> timoxley: Any pointers on starting nodemon? I installed it, but not sure how to run it (the page doesn't help).
17:55 < timoxley> Deathspike did you install it globally?
17:55 < Deathspike> timoxley: I did not.
17:55 < Deathspike> Failure..
17:55 < possibilities> jfroma, thanks, guess i'll just have to do the recusive part myself, no?
17:56 < Deathspike> There we go. Thanks!
17:57 < vekexasia> :)
17:57 < jfroma> possibilities, no it does for you dont remember the syntax right now but it is something like new Reader(path).pipe(new Writer(path))
17:57 < possibilities> jfroma, love it, thanks again
17:58 < Deathspike> Is there some sort of decent IDE with intellisense/autocomplete for nodejs dev?
17:59 < qbert_> timoxley, yeah it just says circular and doesn't report it, I'll keep checking
18:00 < RLa> Deathspike, webstorm or webmatrix
18:00 < jfroma> deathspike i guess (microsoft) webmatrix or (jetbrains) webstorm....but i dont know if the intellisense is decent
18:01 < timoxley> Deathspike learn you some vim
18:01 < RLa> webstorm is bit slow sometimes for autocomplete, could hang for minutes
18:02 < RLa> but i guess that's because it's written in java and gc needs to work too
18:02 < qbert_> RLa, yeah I get that too, still the best I've found though
18:02 < timoxley> qbert_ use util.inspect  http://nodejs.org/docs/latest/api/all.html#all_util_inspect_object_showhidden_depth_colors
18:03 < RLa> i also use emacs with js2-mode too, does indentation ok but no autocomplete
18:03 < othiym23> Deathspike: vim + a pile of plugins has given me all the autocompletion I actually use
18:04 < qbert_> timoxley, same :( , I dont think you can print out circular references
18:05 < jfroma> i use sublimetext2 there are some nice plugins like sublimelinter (it does jshint), poor intellisense but i love it
18:05 < qbert_> timoxley, I just grepped for it, its req.socket.remoteAddress
18:05 < timoxley> qbert_ strange, it works for me. what version of node? 
18:06 < qbert_> timoxley, .8
18:06 < qbert_> oh wait, console.log(util.inspect()) or just util.inspect() ?
18:06 < timoxley> actually, no. it doesn't, wtf am I smoking.
18:07 < possibilities> jfroma: fstream appears to be syncronous, which is fine for me... is that true?
18:10 < jfroma> possibilities no, is asynchronous.. you can subscribe like writer.on("end", function() { ... } )
18:11 < possibilities> oh ok, great
18:15 < TheRedMood> Hey
18:15 < Deathspike> timoxley: Regarding the style guide, there is a section "Named closures", is the "wrong" example really that wrong? I see it all over the place in documentations and tutorials.
18:15 < TheRedMood> Is there a way to output something from the terminal with node?
18:15 < Deathspike> TheRedMood: console.log("Hello world");?
18:15 < TheRedMood> Not like that
18:15 < TheRedMood> If i want to do something like
18:16 < TheRedMood> apt-get install xxxxx
18:16 < timoxley> Deathspike yeah I've actually never named my functions like that, though it does look like a good idea
18:16 < TheRedMood> and show the output
18:17 < Deathspike> timoxley: Don't names like this conflict with real named functions? Anonymous seems like a better idea in that regard.
18:18 < timoxley> Deathspike for sure, it could though within a single file you hopefully won't have too much of a problem with that
18:18 < teodor> Back
18:19 < timoxley> Deathspike and RE nested closures, a good general rule is 3 levels of indentation and you're out. YMMV.
18:20 < Arpie> Can anyone recommend which module to use to access RabbitMQ? Better to go with straight AMQP?
18:22 < othiym23> Deathspike: there's a bunch of qubblable choices in that style guide, but it's a good place to start
18:23 < othiym23> Deathspike: it makes a very good point in that it does make stacktraces easier to follow
18:23 < othiym23> I might start using that
18:23 < othiym23> TheRedMood: you can pipe the streams from child processes to stdout, and if getting that set up by hand is more work than you're interested in doing, check out the carrier module
18:26 < jfroma> i did this yesterday: https://github.com/jfromaniello/sublime-node-require
18:28 < vekexasia> Hello, can someone tell me an efficient/node way to parse a buffer into an object ? The buffer contains a json string
18:29 < Arpie> @vekexasia Other than JSON.parse ?
18:29 < vekexasia> hmm lol prob JSON.parse will work
18:29 < vekexasia> didn't know it would work with buffers
18:29 < vekexasia> :)
18:29 < vekexasia> @jfroma very good. 
18:30 < Arpie> var data = JSON.parse(obj)
18:30 < vekexasia> yes thanks i'll try :) 
18:30 < Arpie> np
18:31 < arcanis> is there a way to limit node request flooding ?
18:33 < vekexasia> Arpie: another nooob request. Date parsing ? I've a string presenting the date is there a library or something to parse the date?
18:33 < tehgeekmeister> when you run npm install and one of the lines shows up yellow, what does that mean?  is there a log file i should be looking at for more info?
18:33 < brianc> vekexasia: Date.parse
18:34 < othiym23> tehgeekmeister: if it errored out, look at npm-debug.log
18:35 < tehgeekmeister> it's ambiguous as to whether it worked or not.  it says it finished successfully, but i can't require the module, and there are some steps yellow in the build process.  looking at that log now.
18:35 < Arpie> I believe that's right, and I think it's the same as doing new Date(string)
18:38 < tehgeekmeister> othiym23: find didn't pull up that file quickly, and my locatedb is outta date.  where would it live, if it existed?
18:39 < othiym23> tehgeekmeister: it would exist in whatever directory you ran npm from
18:39 < tehgeekmeister> hmm.  weird.  it exists in root (i'm in home).  prolly left over from a previous botched attempt at getting this working.
18:39 < tehgeekmeister> thanks
18:41 < othiym23> tehgeekmeister: also, you can run 'npm ls' in the current directory, and it'll show you if any of the dependencies aren't correctly installed
18:41 < othiym23> where by "the current directory", I mean "the root directory of your Node project", natch
18:43 < tehgeekmeister> othiym23: yeah, it shows it as installed correctly.
18:43 < tehgeekmeister> know anything about yellow lines in the install process?
18:43 < othiym23> nope! just green, red or black
18:44 < therealkoopa> I'm using expressjs and have routes module defined.  If I create a top-level foo = _.debounce(...) function, that would debounce all requests.  Where's the best place to create a debounced function for each request?
18:45 < timoxley> tehgeekmeister you'll see 'yellow lines' if it's building the module with node-waf or something
18:46 < timoxley> tehgeekmeister double-check you're not just requiring it wrong, or perhaps you installed it from the wrong directory
18:50 < tehgeekmeister> timoxley: i am requiring it the same way on two different machines.  works on one, and not on the other.  to be fair, mysql is in a nonstandard location on machine (the one it doesn't work on), and it is a mysql driver i'm building.
18:50 < tehgeekmeister> *on one machine
18:52 < timoxley> tehgeekmeister sounds like you're onto the issue
18:53 < tehgeekmeister> looks like the wscript is something like the equivalent of config/make files in other projects?
18:54 < tehgeekmeister> does npm preserve environment variables during the build process?  if not, it wouldn't be able to find my mysql_config binary, and that'd mess it up.
18:59 < stymo> Is anyone using generic-pool for db connection pooling?
19:05 < tehgeekmeister> timoxley: yeah, strace and a bit of skepticism found the problem.  it found the right mysql_config binary, but then looked in standard locations for the libmysqlclient.so at runtime.
19:06 < timoxley> tehgeekmeister if it's an easy fix, you should do up a PR for the module
19:07 < tehgeekmeister> it might be, but i'm not familiar enough with this stuff to know immediately.
19:07 < tehgeekmeister> i'll take a look, though
19:13 < Raynos> Why does node still depend on python?
19:14 < bradleymeck> Raynos: gyp is in pythong?
19:14 < Raynos> oh I see
19:14 < Raynos> Ok then it makes sense
19:27 < scott_gonzalez> Why do the docs for net.Server#listen() recommend calling server.close() before calling server.listen() again in the case of EADDRINUSE?
19:27 < scott_gonzalez> Isn't the server already closed because it never started listening?
19:28 < Raynos> Trying to install node on smartos
19:28 < Raynos> Not sure how / where to download libssl-dev
19:29 < Raynos> I guess i can just install openssl
19:29 < elijah-mbp> pkgin in openssl ?
19:29 < elijah-mbp> should have headers inside it.
19:33 < Raynos> which is the slow one make or make install?
19:35 < augustl> Raynos: make compiles, make install moves some files
19:35 < augustl> and there's a lot of stuff to compile, so have a guess :)
19:36 < augustl> looking for suggestions to add an authentication filter to all routes for an express app, with the ability to disable this filter for some routes.
19:36 < augustl> I'd rather white-list some routes, in case I forget adding authentication middlewares to specific routes
19:39 < tuhoojabotti> SubStack: "Optionally .options() can take an object that maps keys to opt parameters." What does this mean?
19:41 < tuhoojabotti> .options({option: {stuff}, option2: {stuff}}) I suppose
19:52 < troy--> hello. Does node.js run threads in a multi-core processor
19:53 < XyploatKyrt> take a look at the cluster module
19:53 < troy--> nm, was hoping to sneak a quick answer hehe
19:56 < tbranyen> troy--: yes
19:56 < tehgeekmeister> troy--: the documentation for it gives you a pretty good starting point.  just google it and you'll find something you can copy and paste and modify.
19:56 < tbranyen> thats your quick answer
20:04 < Deathspike> If I write a function in a file I want to include, should I use exports.name=function?
20:11 < tuhoojabotti> There's gotta be a better way: essage.split(' ').splice(1).join(' ') :D
20:12 < othiym23> tuhoojabotti: looks good to me! :D
20:12 < tuhoojabotti> message*
20:15 < bradleymeck> tuhoojabotti: str.indexOf(' ') ?
20:15 < tuhoojabotti> Hmm
20:15 < tuhoojabotti> bradleymeck: ?
20:16 < tuhoojabotti> I'm removing first word
20:16 < tuhoojabotti> I guess I could just regex it
20:16 < bradleymeck> why not just substr with the first var i=str.indexOf(' ');if(i !== -1) {str = str.substr(i + 1);}
20:17 < timoxley> Deathspike generally you'll do something like myObject = {}; myObject.doStuff = function() {}; module.exports = myObject;
20:17 < timoxley> *var myObject
20:17 < tuhoojabotti> bradleymeck: That doesn't seem so elegant either.
20:17 < tuhoojabotti> :D
20:18 < Deathspike> timoxley: I don't get it. Can you elaborate? I'm using a require to import the file, and I want to use a function.
20:18 < tuhoojabotti> bradleymeck: message.replace(/\w+/, '')
20:18 < tuhoojabotti> :D
20:18 < bradleymeck> tuhoojabotti: elegant, no, fast, very
20:19 < tuhoojabotti> Luckily it doesn't have to be. :P
20:20 < othiym23> Deathspike: var myDuder = require('./mymodule').myDuder;
20:21 < othiym23> Deathspike: in ./mymodule.js: exports.myDuder = function () {…};
20:22 < Deathspike> Yeah, okay. Thanks :)
20:22 < benatkin> I love this concept, especially with the improved IO performance in 0.8 https://github.com/visionmedia/search
20:22 < Deathspike> Is it bad to call a particular require more than once, or do you get the same obj back?
20:22 < othiym23> or you could just have module.exports = function () {…} and then var myDuder = require('./mymodule'), but that's less idiomatic
20:23 < othiym23> there's a cache for loaded / compiled module, so you can require with gay abandon
20:23 < timoxley> Deathspike node modules export a single thing. It could be a number, a function, or an object. At the start of a module file `this`, `exports` and `module.exports` all point at the same object.
20:23 < othiym23> you can think of node's modules as being similar to singletons in C#
20:23 < timoxley> Deathspike at the end of the file, whatever is in `module.exports` becomes what is returned from `require('myModule')`. 
20:23 < Deathspike> othiym23: Gotcha.
20:23 < Deathspike> timoxley: Understood ^_^
20:23 < othiym23> timoxley: it's generally a better pattern to use exports.blah instead of setting module.exports to a single global object at the end
20:24 < othiym23> IMHO
20:24 < timoxley> othiym23 why.
20:25 < Deathspike> Also, is there any way to override the default "Cannot GET /" in Express to just throw a plain 404 w/o content?
20:25 < othiym23> timoxley: simpler, easier to read, more idiomatic way of showing which functions / classes are being exported
20:25 < timoxley> othiym23 I like to be explicit about it since module.exports could end up pointing at something different to exports and lead to confusing 
20:26 < othiym23> timoxley: I def. agree that you should use ONE of module.exports or assigning values to exports.*
20:26 < tobo> Deathspike add app.use(function(req, res){ res.send(404) }) at the bottom
20:26 < othiym23> it's very rare that I see both being used in a module correctly
20:26 < tobo> Deathspike: you can do whatever you want, render a template etc
20:27 < Deathspike> tobo: I still get content, "Not Found", when using this. I want it to send 404 w/o content, thus, forcing the browser to render its default 404-page.
20:27 < tobo> res.send('', 404)
20:28 < timoxley> othiym23 RE your use of the term 'idiomatic': http://blog.izs.me/post/25906678790/on-es-6-modules "However, it is widely acknowledged in the node community that using the module.exports = xyz style generally results in better programs. "
20:29 < Deathspike> tobo: It won't show the default page, even with this.
20:29 < timoxley> othiym23 I'm not totally sure why though, don't think I understand some of the complexities
20:29 < othiym23> timoxley: I'm being descriptive not presecriptive ;)
20:30 < Deathspike> tobo: Nevermind, it's firefox 14 screwing about. Chrome/IE do it fine.
20:30 < othiym23> timoxley: I've run into a lot of code written using exports.blahblabh and less that assigns module.exports
20:30 < timoxley> me other way 'round
20:30 < othiym23> tiny flags for everyone!
20:31 < othiym23> I guess I really just care more about consistency than one over the other
20:31 < hij1nx> has anyone tried to run libpcap on smartos?
20:31 < Deathspike> othiym23: Is there any way to pass a variable into an included file (i.e. pass the 'app' variable, the server, to the controller I am including, so it can register its funcs..)?
20:32 < othiym23> Deathspike: that's a can of worms
20:32 < hij1nx> node-pcap is crapping its pants on smartos
20:32 < othiym23> but in short, yes, although there are a bunch of different ways to do it, and I'm not sure what the recommended convention is for module initializers
20:32 < Deathspike> othiym23: How else do you suppose I separate each controller and register cleanly, without scattering function definitions and uri handlers?
20:33 < timoxley> Deathspike you can do something like require('./controllers/blah')(app)
20:34 < timoxley> just export a function that returns the controller object
20:35 < othiym23> Deathspike: I've done what timoxley suggests in a few projects but empirically speaking, it does confuse other users of the module
20:35 < Deathspike> timexley: http://pastebin.com/tcQjJjmM like this?
20:35 < timoxley> yeah I don't like it much
20:35 < Deathspike> Lol, me neither. Just creating a basic controller system is giving me a headache >_>
20:36 < othiym23> Deathspike: you should really listen to what tjholowaychuk said earlier
20:36 < timoxley> Deathspike if it feels like you're going against the grain then you probably are
20:36 < mmalecki> hij1nx: use dtrace?
20:36 < mmalecki> hij1nx: perfect for your usecase
20:36 < othiym23> I tend to write a few larger files for handling web requests, and then start factoring them out into smaller libraries when they get unwieldy (like, longer than 100 commented lines or so)
20:37 < Deathspike> Then what kind of pattern should I apply to build robust business applications?
20:37 < timoxley> Deathspike build your functionality first, stop worrying about your files
20:37 < hij1nx> mmalecki: wut?
20:37 < timoxley> Deathspike the my "app actually does stuff pattern"
20:37 < hij1nx> mmalecki: I'm not going to write dtrace scripts just to emulate what node-pcap does perfectly well
20:37 < timoxley> Deathspike start there and grow as required
20:37 < othiym23> Deathspike: that pattern that TJ laid out, of writing the handlers that get mapped to routes, where the route handlers are defined wherever, is a good one
20:38 < othiym23> Deathspike: so you start with all the routes and handlers in one file, and then start factoring out the handlers, but leave all the routing information in the one file
20:38 < mmalecki> hij1nx: right
20:38 < Deathspike> I intend to rewrite a semi-large site from php to nodejs so I have to plan ahead, and not "just do stuff".
20:38 < othiym23> like I said earlier, you end up with a byproduct of a single (code) document of your API
20:39 < mmalecki> hij1nx: what do you mean by craps itself, then?
20:39 < Deathspike> That scatters method bodies from registration? That's kind of messy, isn't it.
20:39 < tobo> Deathspike i used to think that
20:39 < othiym23> Deathspike: it's as messy as you make it, isn't it?
20:39 < tobo> but it's the opposite imo
20:39 < tobo> our app was a massive mess with routes defined inline
20:39 < tobo> and viewing precedence was difficult
20:40 < tobo> but i mean that's why it is the way it is, you can do whatever you are comfortable with
20:41 < othiym23> Deathspike: less flippantly, once you wrap your head around the way Node / JS do things and learn to trust duck typing (and write looooooots of tests), you end up with a lot of short, relatively DRY route handlers calling from a smallish library of helper functions
20:42 < othiym23> and having one, well-commented file with all of your route mappings in it that pulls in a smallish set of modules that export route handlers is an invaluable roadmpa later
20:42 < othiym23> but that's what's worked for me and the teams I've been on!
20:42 < hij1nx> mmalecki: it complains about missing all kinds of header files
20:43 < mmalecki> hij1nx: pm me the ip of the box you were trying to set it up on and I'll take a look
20:44 < timoxley> othiym23 +1
20:44 < othiym23> Deathspike: Node isn't like a lot of web frameworks, in that it's focused on cohesion over completeness or conventionalizing everything; it makes it a pain to learn but fast to use
20:44 < Deathspike> othiym23: This is the real major issue, I seem to be getting told that I should just worry about functionality first and care about architecture later, however with almost 8 years of both PHP and C# experience that is both counter-intuitive and I wouldn't even begin to trust myself or a team just to let them do whatever they want. There's no real guidelines, I'm missing this a LOT.
20:44 < tobo> Deathspike simple is architecture
20:44 < tobo> it's just.. simple vs complex
20:45 < tobo> abstract as much as you want but it'll hurt you
20:45 < timoxley> Deathspike if you're writing clean code, it's easy to refactor later, but if you make a shoddy abstration choice early on it can be hard to change that later.
20:45 < othiym23> Deathspike: I think what we're actually saying is that there is an underlying architecture, but you gotta play with the tools a bit to learn it, it's not as plain as, say, Rails's
20:46 < othiym23> Deathspike: and like I said earlier, if you want a good store of ideas that *do* wrap some conventions around this stuff, take a look at Flatiron
20:46 < tobo> or maybe geddy
20:46 < tobo> it's tighter as far as conventions go
20:47 < timoxley> Deathspike once you've got an app up and running, and a good idea of what parts of the app will change, then you can start concreting pieces in by adding abstractions
20:47 < timoxley> Deathspike early stages of app dev every choice has repercussions, so it's a good idea to make as few as possible
20:49 < othiym23> Deathspike: there's also http://derbyjs.com/, although that may go too far towards the heavyweight end of the spectrum
20:53 < AAA_awright> othiym23: It's not even a framework, it's just an additional set of libraries on for ECMAScript
20:53 < othiym23> AAA_awright: which one?
20:54 < Deathspike> Thanks for the opinions, but... well.. I think I'll go and call it a day. I've been all day at this and I've done almost nothing. Clearly I can't let go of everything that experience taught me and just "fiddle about", so I'll go ahead and re-think my possible strategies and, unfortunately, whether or not to adopt node instead of re-using .net or php again.
20:54 < AAA_awright> othiym23: Er, Node.js
20:54 < othiym23> AAA_awright: yeah, you're right
20:54 < othiym23> AAA_awright: I was using it metonymically to refer to the larger ecosystem
20:55 < othiym23> Deathspike: Node is just familiar enough to look more similar to what's already out there than it really is
20:55 < othiym23> Deathspike: I think of it as being more like Erlang than, say, Python or Rails or PHP -- it's tailor-made to solve a certain subset of problems very well, but it requires a different thought process to get comfortable with it
20:55 < Deathspike> othiym23: I just can't grasp that all the solutions are pretty much just a bunch of things that you can use in whatever fashion you desire, without looking at structure and such.
20:56 < timoxley> Deathspike I actually think node is a bad fit for complex general purpose websites, something that does more for you like rails or django is more suited.
20:56 < othiym23> Deathspike: I like Node because it allows *me* to define the architecture for large software projects and doesn't force me into one
20:56 < Deathspike> othiym23: The main thing that caught my attention was sharing code on client/server, not much more. What exactly should it solve?
20:57 < Deathspike> Well, better than alternatives, that is.
20:57 < ddollar> anyone know if later versions of npm have changed how the .bin symlinks are created (specifically that they are now absolute rather than relative paths)
20:57 < othiym23> Deathspike: but I agree with timoxley as well, if you're trying to do large-scale software construction on the web, that's not really Node's strength
20:57 < timoxley> othiym23 unless you can break it down into lots of really small parts
20:58 < Deathspike> All the tools are there, templating, routing, binding a server, database -- so mvc or mvvm, whatever -- just.. not organized.
20:58 < othiym23> Deathspike: it's great for focused network applications that need high throughput and low latency
20:58 < othiym23> timoxley: indeed, and that's how the largest project I've worked on in Node was structured (http://lockerproject.org)
20:58 < AAA_awright> Nuck_: How goes things these days?
20:59 < Deathspike> othiym23: If I would deploy mono .net on linux using a single-threaded http server with asynch passing, wouldn't I get a higher performance and even lower latency?
20:59 < timoxley> othiym23 looks pretty cool
21:00 < Deathspike> dynamic languages can't beat static compiled languages in terms of raw speed after all?
21:00 < othiym23> Deathspike: it's hard to beat the strengths of the V8 JIT plus the efficiency of libuv
21:00 < tobo> y u no scale horizontally
21:00 < timoxley> tobo +1
21:01 < othiym23> and yeah, if you want to scale horizontally, you design your app to use Node's clusters and take advantage of process-based concurrency
21:01 < othiym23> I've done some stupidly complex things with deploying Node, and in general been pleasantly surprised by its performance
21:02 < othiym23> but it's all about the system architecture, in the end
21:02 < othiym23> I guess I'm not really answering your question, Deathspike, but it's a pretty apples/oranges question in a lot of ways
21:03 < othiym23> if you feel faster and more efficient developing in C# / F# / whatever, using the .NET ecosystem, then you should keep using that!
21:04 < Phoenixz> Just upgraded to node.js v0.8.0release (from GIT repo), with these dependancies http://pastebin.com/T3nZ5a55 .. When running my project, I had a few easiliy fixed details, and then this: Cannot read property 'url' of undefined on /home/sven/projects/pladeo/node_modules/connect/lib/proto.js:104:18
21:05 < Phoenixz> Anybody who might know what the cause might be? I've checked google, nothing..
21:05 < Deathspike> othiym23: I'd like to make use of NodeJS, though, but that might be a wiser choice in the end.
21:06 < Phoenixz> Also checked source code, but could not directly make up what the problem might be..
21:06 < othiym23> Deathspike: I think you should take a closer look at Geddy, it seems like it would give you a lot of what you feel like you're missing
21:07 < othiym23> Deathspike: also, I had to spend some time adjusting to how Node does things, after a 16+ year background in Java / Perl / Rails, and I'm ultimately loving how easy Node makes it for me to build complicated but pretty ligtheweight RESTful services with heavy client-side apps
21:08 < Deathspike> othiym23: Geddy does look promising. RESTful services are easy, like registering in Express and returning something JSON.stringify'ed?
21:08 < Deathspike> Or is there a better way.
21:10 < othiym23> Deathspike: Express lets you just do res.send({foo:blurgh}) and will do the conversion for you as well as setting the correct Content-Type and status code
21:10 < othiym23> there's a lot of magic packed into it
21:10 < ddollar> seems like the shim behavior has changed in some recent version of npm: https://github.com/isaacs/npm/issues/2572
21:10 < Deathspike> now that is super useful, much better than anything on other platforms.
21:11 < othiym23> Phoenixz: I haven't seen your problem, but it looks like something is breaking the middleware chain somewhere -- is there custom middleware in your stack?
21:12 < Deathspike> othiym23: On a REST service, can you eat a particular defined model from a POST as well?
21:13 < othiym23> Deathspike: probably, through some combination of a module like mongoose and some middleware, although I haven't done that myself
21:13 < Deathspike> othiym23: Can you turn off indented formatting for json response, or use jsonp?
21:13 < othiym23> I'm thingy about translating input between domains that way
21:14 < othiym23> Deathspike: y to JSONP, dunno about turning off the formatting
21:14 < othiym23> since I tend to do a lot of debugging-by-curl, I would never turn it off myself ;)
21:14 < tobo> in production it compresses
21:14 < tobo> by default
21:15 < Deathspike> tobo: How do you change between production and development?
21:15 < Deathspike> Sorry for the many questions :3
21:15 < tobo> no worries
21:15 < othiym23> NODE_ENV=production
21:15 < tobo> you can either do app.set('env', 'whatever')
21:15 < tobo> or NODE_ENV=whatever
21:15 < tobo> using an env var is preferred
21:16 < Mantic> So, I'm trying to install nodejs 0.8.0, but configure is failing with a syntax error. I'm using python 2.7.3 on a CentOS 5.8 system. Any one familiar with nodejs's configure script? 
21:16 < Deathspike> I don't see how I can set the production, it either A) crashes or B) does nothing
21:16 <@bnoordhuis> Mantic: i think i can answer that question with a resounding 'yes'
21:16 < tobo> Deathspike: $ NODE_ENV=production node app
21:17 < Deathspike> Okay..? And where do I do that?
21:17 < othiym23> Deathspike: from the command line?
21:17 < Mantic> bnoordhuis: Sweet! It fails online 261 with a syntax error. Looks like it is choking on the inline if statement
21:17 < othiym23> you probably don't want to combine nodemon and NODE_ENV=production
21:17 <@bnoordhuis> Mantic: then your python is not actually 2.7
21:18 < Mantic> ok, I figured it was a python issue
21:18 <@bnoordhuis> Mantic: what's your python binary called? just python or python27 or ?
21:18 < Deathspike> FYI I'm on a Windows machine, so whatever that line is supposed to do, it won't do it on Windows.
21:18 < Mantic> I'm on a hosted machine that has 2.4 -> 3.2  I just need to point to the right one
21:19 < Phoenixz> othiym23: gzippo.. I could try disabling that..
21:19 < othiym23> Deathspike: well, you can set it systemwide in the properties, or use a cmd file of some kind
21:20 < Deathspike> othiym23: Without even using the shortcut the installer threw at me, I wouldn't even be able to run node; let alone tamper with its settings.
21:20 <@bnoordhuis> Mantic: make sure the right python's path comes first in your PATH variable
21:20 <@bnoordhuis> Mantic: e.g. `env python` should start python 2.7
21:21 < Mantic> bnoordhuis: ahh, k. it defaults to 2.4.3 *fixing*
21:21 < othiym23> Deathspike: then try setting NODE_ENV to production in the system properties
21:23 < Deathspike> othiym23: No effect whatsoever; unless Windows wants me to reboot (Oh what a joke, it always does!)
21:23 < Deathspike> No way to force it to production from within code?
21:24 < tjholowaychuk> you can tweak all the settings individually too
21:24 < tjholowaychuk> if you want - app.set('json spaces', 0) to remove the formatting
21:24 < othiym23> Deathspike: sure, do what tobo suggested and set it on the Express app, or set process.env['NODE_ENV'] = 'production';
21:25 < othiym23> or what tjholowaychuk said
21:25 < Deathspike> Okay, that worked (tjholowaychuk and your process.env method)
21:28 < styol> is it a good idea to keep variable names, object keys, function names, etc small like a character or two? or does it not really matter since the js files aren't downloaded by clients? 
21:28 < Mantic> styol: seems like that's the /last/ optimization you'd need to worry about
21:28 < styol> I guess wondering if the generally reduced the foot print and overhead or if it's negligible for readability
21:29 < styol> Mantic: ok excellent :)
21:29 < styol> *if it generally reduces
21:30 < Mantic> styol: I personally don't know how v8/nodejs work in that sense. Don't js files get compiled/cached in memory anyway? in which case variables get boiled down into memory pointers
21:31 < Mantic> styol: but I'm just guessing here. :P 
21:32 < styol> Mantic: yeah that is what i imagined also so that is part of the curiousity is if that maybe reduces memory usage or something else i dont understand
21:33 < Deathspike> No, V8 compiles and doesn't retain names and such in memory. Normally, you might care about the size due to transmission to the client but if you exclusively use the file on the server, there's no reason to care. Otherwise, there are always minifiers.
21:33 < Mantic> styol: v8 is pretty memory-heavy to begin with, but with the intent of speeding up the runtime. I'd have to consult my v8 guru buddy about specific variable name usage. But even then, there are other points of optimisation that you'd want to hit long before variable names are a concern.
21:34 < Mantic> what Deathspike said. :) 
21:35 < styol> awesome, i really appreciate the input Mantic and Deathspike
21:37 < CIA-75> libuv: Ben Noordhuis v0.8 * r4d42af2 / src/unix/stream.c : unix: don't create connect req when connect() fails - http://git.io/KlvZ3w
21:40 < Mantic> bnoordhuis: Ok, so I slapped #!/usr/local/bin/python2.7 at the head of configure (taking out the env one) and now it chokes somewhere in the config process as it's loading source files: "./tools/gyp/pylib/gyp/common.py" line 373: "with open(source_path) as source_file:"
21:41 < TooTallNate> Mantic: is that actually running python 2.7?
21:41 <@bnoordhuis> Mantic: that happens because the configure script calls other python scripts
21:41 <@bnoordhuis> Mantic: which have #!/usr/bin/env python at the top
21:41 < Mantic> gotcha. Hmm.. how do I change the env python path? 
21:42 < TooTallNate> Mantic: export PATH="/path/to/python27:$PATH"
21:42 < TooTallNate> Mantic: in your case it looks like just make sure that /usr/local/bin is *before* /usr/bin i'm guessing
21:42 <@bnoordhuis> Mantic: well... a simple solution is to run `perl -i -pe 's|#!/usr/bin/env python|#!/usr/local/bin/python2.7|g' $(find -name \*.py)`
21:43 < Mantic> which I think it is. problem is, "python" is 2.4  "python2.7" is python 2.7, etc. So somehow I need to either alias or change the default "python" path
21:44 < othiym23> Mantic: another way to do it would be to create a bin directory in your local directory on the host, ln -s /path/to/python2.7.3 ~/bin/python, and then add $HOME/bin to the head of your PATH
21:44 < Mantic> Oh hey, that would work
21:44 < othiym23> (o_o)-b
21:47 < Mantic> very nice, thanks all
21:47 < othiym23> cool, glad that helped
21:47 < CIA-75> node: Ben Noordhuis v0.8 * r1e50282 / (6 files in 4 dirs): deps: upgrade libuv to 4d42af2 - http://git.io/ycnviA
21:47 < Phoenixz> othiym23: I just removed ALL app code, basically, there is app=new expresblablah, then app.listen, and I still have the problem... Is there anything new and obligated for connect since... say the last 4 months?
21:47 < augustl> is there a stand-alone express like router DSL for connect?
21:47 < tjholowaychuk> augustl tons
21:47 < Mantic> of all the shared hosting, at least this one comes w/ gcc and is geared around letting users build their own apps
21:47 < othiym23> Phoenixz: probably, ask tjholowaychuk ;)
21:48 < augustl> cool :) I'll google around then, haven't found anything yet
21:48 < Phoenixz> othiym23: Great user names here! :D
21:49 < augustl> tjholowaychuk: btw, is there something like Rails' skip_before_filter for the express routing DSL? I want all routes by default to be behind authentication, but disable authentication for some actions, like logging in.
21:49 < augustl> would prefer a default that I disable, instead of manually adding it to all routes, I might forget it that way
21:49 < Phoenixz> tjholowaychuk: Sorry to disturb, but just a quick question. I used node 0.6.9, just upgraded to node v0.8.0release (from GIT) and get Cannot read property 'url' of undefined on /home/sven/projects/pladeo/node_modules/connect/lib/proto.js:104:18...  I just removed ALL app code, basically, there is app=new expresblablah, then app.listen, and I still have the problem... Is there anything new and obligated for connect since... say the last 4 months?
21:49 < tjholowaychuk> augustl you can wrap middleware with more middleware
21:49 < tjholowaychuk> like for example
21:50 < tjholowaychuk> app.use(ignoreAssets(app.logger('dev'))); contrived example but yeah
21:50 < tjholowaychuk> Phoenixz might want to check the changelog
21:50 < tjholowaychuk> in the repo
21:51 < augustl> tjholowaychuk: so I could probably make two express apps, one with auth by default, and one without, and combine them?
21:51 < tjholowaychuk> augustl: just have something like app.use(ignore('/foo', authThingy()))
21:52 < tjholowaychuk> or pass an array/regexp to that
21:52 < tjholowaychuk> whatever works
21:52 < Bennit> Hi
21:52 < augustl> tjholowaychuk: ah, makes sense
21:52 < augustl> tnx
21:52 < Bennit> I'm trying to get node-inspector to work on windows
21:53 < Bennit> do I still need to follow this: https://github.com/glennblock/node-inspector-windows, or should npm install -g node-inspector do everything that should be done?
21:53 < Bennit> I've got visual studio and python installed, npm install -g node-inspector finished without problems
21:53 < Bennit> but there's no node-inspector on my path
21:55 < Bennit> Can't find where npm put the compiled native binaries, so that's no help either
21:58 < Phoenixz> tjholowaychuk: Dont see much differences in the history.md file.. Is express 2.5.latest compatible with node v0.8.0?
21:58 < Phoenixz> tjholowaychuk: or should I go for t he 3.0.0betalatest?
21:58 < othiym23> Bennit: it'll be somewhere helpful, like under the system node_modules/node-inspector/bin/node-inspector.cmd or whatever
21:58 < jocafa> i wish github had a better way to organize repos you're following.  i'm following 103 and i can never find anything heh
21:59 < Bennit> in C:\Program Files\nodejs\node_modules there's only one folder: npm
21:59 < othiym23> Bennit: you've exhausted my limited expertise in dealing with npm on Windows ;)
21:59 < Bennit> oh, apparently it writes to %appdata%/roaming/npm/
22:00 < Bennit> hehe
22:00 < Bennit> I could go to my ubuntu box, but then I can't take a quick 10 min break once in a while for some tf2 :p
22:01 < Bennit> but it's OK, windows indexing found it for me
22:01 < Bennit> thanks anyways :)
22:03 < Phoenixz> tjholowaychuk: mmmm, fixed it with removing the entire node_modules directory, then npm install again
22:11 < motiooon_> how do I read a remote file. like image from example ?
22:12 < motiooon_> an image that I'm not hosting on my server but I want to send it in response to a http request
22:12 < dshap> does anyone here use cluster2 by any chance?
22:12 < motiooon_> can fs read a remote file ?
22:12 < dshap> motiooon_: i've done that.  use the "request" library
22:12 < othiym23> motiooon_: look at mikeal's request module
22:12 < dshap> yes what he said
22:12 < motiooon_> ok, I'll take a look at request tahnks
22:14 < peewee> Is there a cleaner way to check if a module is available than wrapping it in a require try/catch block?
22:16 < TooTallNate> peewee: well there's require.resolve(), but that still throws when the module isn't found
22:16 < TooTallNate> no i guess no
22:17 < peewee> Alright, thanks, I'll have to make due then
22:19 < Raynos> I have this module that fails to install when process.platform is solaris but installs when it is sunos
22:19 < Raynos> neither OS in their package.json whitelist
22:19 < Raynos> does npm cheat and whitelist sunos by default?
22:20 < CIA-75> node: isaacs reviewme * r21aa0df / (lib/fs.js test/simple/test-fs-realpath.js): realpath: No sync cb() calling allowed. - http://git.io/-Wy2cw
22:22 < CIA-75> node: isaacs v0.8 * r21aa0df / (lib/fs.js test/simple/test-fs-realpath.js): realpath: No sync cb() calling allowed. - http://git.io/-Wy2cw
22:22 < motiooon_> what is the content type header to put in a response for an image - jpg
22:22 < motiooon_> ?
22:23 < tjholowaychuk> image/jpeg
22:24 < Bennit> how do you write to node-inspector's console?
22:24 < Bennit> from an application
22:27 < coderarity> do other people occasionally freak out about non-free software?
22:27 < upb> totally
22:30 < qbert_> I cant use npm without SSL ?
22:30 < qbert_> ugh
22:30 < qbert_> might as well just require node to have it, 30 mins wasted :S
22:31 < qbert_> and now how do I tell node to remove the old configure file and replace with a new one that requires ssl ?
22:33 < TooTallNate> qbert_: make clean
22:33 < TooTallNate> ./configure
22:35 < CIA-75> node: Ben Noordhuis v0.8 * rf00c8bc / (configure node.gyp): build: fix --shared-v8 option - http://git.io/q-0mTg
22:36 < myndzi> node-postgres question anyone?
22:36 < myndzi> i'm wondering what is output when you supply an array as a parameterized query
22:36 < myndzi> not entirely sure how to find out easily without source diving
22:36 < myndzi> (which i'm gonna do anyway, just asking in case someone knows ;)
22:37 < motiooon_> how do I prompt user to download a file(jpg) instead of showing the image in the browser when clicks a button ?
22:38 < tjholowaychuk> content-disposition attachment
22:38 < motiooon_> is this a header ?
22:38 < myndzi> yeah
22:38 < tjholowaychuk> yeah, or with express there's res.download
22:39 < motiooon_> tjholowaychuk: thanks, I'm using express, I'll try that
22:39 < Raynos> Trying to run nave on joyent
22:39 < Raynos> nave uses sysctl which smartos doesn't have
22:39 < Raynos> anyone know a way around that?
22:40 < qbert_> yeah res.download is nice
22:41 < qbert_> however, the docs could use some work, <cough> , trying to find remoteAddress when util.inspect won't print out socket because it's circular is a pain
22:41 <@konobi> Raynos: ping isaacs
22:42 < Raynos> isaacs: pong. nave uses sysctl which falls over on smartos. Their wiki says use "cat /etc/system"
22:42 < motiooon_> tjholowaychuk: can res.download serve a remote image ?
22:42 < tjholowaychuk> motiooon_ it serves files from disk
22:43 < motiooon_> ok
22:43 < motiooon_> thanks
22:43 < Bennit> I'm working with flapjax and node.js. I'm trying to do a post request with getWebServiceObjectE (http://www.flapjax-lang.org/docs/#getWebServiceObjectE), but passing {nickname: 'Ben') as the request.fields field results in the following on the serverside: { '{"nickname":"Ben"}': '' }
22:43 < Bennit> anyone any clue why it does this?
22:44 < Bennit> if not I'll just use rawPost and JSON.stringify it myself
22:46 < Bennit> rawPost ends up in the same
22:46 < motiooon_> dshap: can "request" library write to a file after getting the resource ?
22:47 < dshap> motiooon_: no you need to use request to download the file and then use fs to write it
22:47 < dshap> motiooon_: are you just doing images?
22:48 < motiooon_> yes, I want users to download a image after they purchased it, and when they hit the download button I want them to download the photo
22:48 < motiooon_> but the photo sits on a can so it's not local
22:49 < motiooon_> sorry: the photo is on cdn
22:49 < motiooon_> dshap: could you think of any other good way to do this, other that requesting the resource than writing the file with fs and then sending the use the file ?
22:51 <@isaacs> Raynos: it actually falls over?  or just returns non-zero which is ignored?
22:51 < dshap> motiooon_: i would download the file from the cdn using request, and then return it directly to the browser with file-attachment headers so that it's a file
22:51 < Raynos> isaacs: i thought it fell over but it actually falls over at the ./configure step
22:52 < Raynos> isaacs: I also noted I can set $NAVE_JOBS to overwite it
22:52 < Raynos> so its a non-issue
22:52 <@isaacs> Raynos: yep
22:52 <@isaacs> it's just to guess
22:52 <@isaacs> i think the default is 2 or something
22:52 < motiooon_> dshap: I will do that
22:52 < dshap> cool
22:53 < mattrobenolt> isaacs: Care to explain to me the benefits of an async callback with nextTick for something that isn't async?
22:53 < mattrobenolt> I've been seeing it pop up, and I saw you just committed some stuff with it.
22:53 <@isaacs> mattrobenolt: let's say you do this:  fs.realpath(foo, fn); doStuff()
22:53 <@isaacs> mattrobenolt: the 'doStuff' shoudl happen *before* the fn
22:53 <@isaacs> right?
22:54 < mattrobenolt> Right.
22:54 <@isaacs> mattrobenolt: but, what if we know the results of the realpath, and call fn() right away?
22:54 <@isaacs> now the order has changed.
22:54 <@isaacs> and your program is busted.
22:54 <@isaacs> nextTick to the rescue!
22:54 < mattrobenolt> Ahh, so nextTick just forces it to be delayed a tad.
22:54 <@isaacs> mattrobenolt: until the end of the current run-to-completion, yes.
22:54 < qbert_> do ya'll use commas in clojure ?  just looking for best practices
22:54 <@isaacs> mattrobenolt: it's still blocking *when* it runs, so it's not a thread.
22:55 <@isaacs> it's not a replacement for uv_work_queue etc.
22:55 < tjholowaychuk> debugger seems pretty broken in 0.8.0 :(
22:55 <@isaacs> but it just runs *after* anything else that's pending
22:55 < mattrobenolt> Right. So it's no efficiency gain or anything by doing a nextTick, just keeps the order as expected.
22:55 <@isaacs> tjholowaychuk: elaborate?
22:55 < tjholowaychuk> continue doesn't seem to work
22:55 < tjholowaychuk> getting lots of errors
22:55 <@isaacs> mattrobenolt: yes, in fact, it's a efficiency loss at the moment, but that'll change soon in master.
22:55 < tjholowaychuk> i'll try and get some reproducable samples
22:55 <@isaacs> tjholowaychuk: thanks :)
22:55 <@isaacs> tjholowaychuk: thanks for making express 0.8-friendly, btw.
22:55 < tjholowaychuk> list
22:55 < tjholowaychuk> gives you [function]
22:55 < tjholowaychuk> haha
22:56 < mattrobenolt> isaacs: Thank you for the explanation. :)
22:56 <@isaacs> tjholowaychuk: saved us all a LOT of bugs with that one package.json change :)
22:56 <@isaacs> mattrobenolt: np
22:56 < motiooon_> dshap :  here's the gist with the code for the request https://gist.github.com/2999909, it's throwing an error
22:59 < dshap> motiooon_: what is "res" ?
22:59 < dshap> res.download
22:59 < motiooon_> res is from express function (req, res)
23:00 < dshap> motiooon_: set the encoding option to null for request
23:00 < dshap> motiooon_: that makes it return a buffer in the body, and a buffer is what you need to send an image file to the browser
23:00 < dshap> motiooon_: that's how i got it working at least
23:01 < dshap> request.get({ uri: 'somesite.com/somefile.jpg', encoding: null}, function(err, resp, body){ … });
23:03 < motiooon_> dshap : I've updated the gist https://gist.github.com/2999909
23:03 < motiooon_> would this work ? 
23:04 < tjholowaychuk> motiooon_ there's res.attachment() if you jsut want to set that header field
23:04 < tjholowaychuk> for non-file responses
23:04 < tjholowaychuk> but res.download is basically express.static()
23:04 < tjholowaychuk> + res.attachment()
23:04 < dshap> motiooon_: i don't use express so not sure about that, but seems like you should use res.attachment() per tjholowaychuk
23:04 < tjholowaychuk> but if your CDN has those files public
23:05 < tjholowaychuk> you're kinda fucked
23:05 < tjholowaychuk> a CDN wouldn't really help you there other than holding your files
23:05 < dshap> tjholowaychuk: what if they're hidden though 
23:05 < dshap> tjholowaychuk: the people using his app would never know where node downloaded the file from, right?
23:05 < tjholowaychuk> right
23:05 < dshap> security by obscurity
23:05 < dshap> lol
23:05 < motiooon_> :)
23:07 < motiooon_> dhsap , tjholowaychuk thanks I'll try res.attachment(), 
23:15 < motiooon_>  tjholowaychuk but res.attachment() wouldn't only serve files from disk? 
23:15 < tjholowaychuk> that method just sets the field
23:15 < tjholowaychuk> with an optional filename
23:16 < tjholowaychuk> check out the docs or the source
23:23 < motiooon_> my browser win I hit link has this headers : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
23:24 < motiooon_> how do I serve back an image in response ?
23:35 < AAA_awright> motiooon_: You'll need an image to serve back first of all...
23:36 < Raynos> isaacs: https://github.com/isaacs/nave/blob/master/nave.sh#L327 http://stackoverflow.com/questions/3615627/solaris-equivalent-of-o-option-of-grep-on-linux
23:36 < Raynos> -o falls over on joyent as non root user
23:37 < ekristen> I am trying to run exec on a windows platform, it works well for dir and other small commands
23:37 < ekristen> but when I try to pass it a large command like several hundred characters in length, it just returns
23:37 < ekristen> doesn't seem to execute
23:38 < Raynos> have you tried exec(command, otherStuff.split(" "), ...) ?
23:39 < Raynos> exec should have arguments in an array and not be passed a large string
23:40 < ekristen> Raynos: good to know
23:40 < ekristen> so I am trying to call powershell with a lot of extra stuff 
23:40 < ekristen> powershell -Command "Do something; Do a second something; Do a third something;"
23:40 < ekristen> so how would or should I organize that with exec?
23:40 < Raynos> no clue.
23:42 <@isaacs> Raynos: patch welcome
23:43 <@isaacs> Raynos: if you point grep at ggrep, it'll work
23:43 < CIA-75> node: Ben Noordhuis reviewme * rf00c8bc / (configure node.gyp): build: fix --shared-v8 option - http://git.io/q-0mTg
23:43 < CIA-75> node: Bert Belder reviewme * r1f04249 / (lib/fs.js test/simple/test-regress-GH-3542.js): windows: make fs.realpath(Sync) work with UNC paths - http://git.io/_1wzgA
23:43 < Raynos> isaacs: how does one "point" ?
23:43 < qbert_> ln -s ?
23:44 < Karmaon> Hi, why does new Date.getTime() say undefied is not a function?
23:44 < Raynos> qbert_: thanks
23:46 < Karmaon> Ah, it's new Date().getTime();
23:52 < othiym23> Karmaon: Date.now() is faster, as long as you're fine getting the date in milliseconds rather than a date object
23:53 <@isaacs> Karmaon: perhaps you want Date.now()?
23:53  * isaacs beaten to the punch
23:53 < othiym23> jinx buy me a coke
23:53 <@isaacs> Raynos: yes, `ln -s $(which ggrep) ~/bin/grep` or something
23:54 <@isaacs> Raynos: what does `grep --version` output?
23:54 < Raynos> isaacs: sweet
23:54 < Raynos> grep --version is illegal operator
23:54 <@isaacs> Raynos: my smartos box says GNU grep 2.5.3
23:54 <@isaacs> Raynos: annoying.
23:54 <@isaacs> Raynos: you should go bitch and moan in #smartos about that.
23:54 <@isaacs> Raynos: or just use ggrep :)
23:54 < Lorentz> oh, trying to deal with different types of grep?
23:55 < Raynos> isaacs: https://gist.github.com/96553f5aba7b14405acf
23:55 < Raynos> trying to use nave to install 0.8.0
23:55 < Raynos> it just hangs at ln -fs until I kill it
23:57 <@konobi> i just install into a ~/local directory and than have a symlink for ~/local/node/bin -> ~/local/node-0.6.12/bin
23:58 <@konobi> (smae for perl and ruby actually)
23:59 < CIA-75> node: Bert Belder reviewme * r0cdeb8e / (lib/fs.js test/simple/test-regress-GH-3542.js): windows: make fs.realpath(Sync) work with UNC paths - http://git.io/iK2ygw
23:59 <@konobi> then in .bashrc i have -- for local_install in `find $HOME/local -maxdepth 1 -type l`; do PATH="${local_install}/bin:$PATH"; done
--- Log closed Wed Jun 27 00:00:12 2012
