--- Log opened Mon Apr 01 00:00:05 2013
--- Day changed Mon Apr 01 2013
00:00 < lethalduck> Some of the best
00:00 < deoxxa> javascript-related conferences would be more likely to earn me a subsidy on my travel costs
00:00 < lethalduck> but just think what you'd be missing
00:01 < zemonk> hello, i am writing a module that talks to an smtp serve, how do i match the request i send to the response the server sends back?
00:01 < someprimetime> jquery conference is in portland
00:01 < someprimetime> in june
00:01 < someprimetime> but tbh conferences are a waste of time 
00:01 < zemonk> i can do client.write("HELO") for example
00:01 < zemonk> and the server would send back "220 ..."
00:01 < someprimetime> they are more so a dog and pony show than anything else. i used to go to conferences a lot and meetups as wellâ€¦ if you like networking they are useful
00:01 < deoxxa> i dunno, i went to a couple last year in europe and i had a great time. ended up meeting some really awesome people who i still talk to regularly.
00:02 < zemonk> i can listen to the data event emitted by client
00:02 < deoxxa> yeah
00:02 < deoxxa> it's more about meeting cool people for me
00:02 < someprimetime> yeah then that's cool
00:02 < zemonk> but i believe i need not get the whole data in one "data" event
00:02 < deoxxa> zemonk: take a look at https://github.com/deoxxa/ennenn - it's a parser for NNTP which is very similar to SMTP as far as i know
00:03 < zemonk> awesome thanks! let me take a look
00:03 < deoxxa> zemonk: the short version is that you have to write a parser that can operate on small bits of the input, potentially giving up on incomplete tokens and putting them into a buffer
00:04 < zemonk> hmm i see, so i should buffer all the data i get back and parse out whole responses?
00:05 < deoxxa> that's one way to do it, but it's better to only buffer the bits that you can't process
00:05 < deoxxa> some responses might be arbitrarily large, for example
00:05 < deoxxa> and you might have to buffer 30mb of email content
00:05 < ningu> deoxxa: hey, jesus is awesome :)
00:05 < deoxxa> which would "suck" (tm)
00:05 < deoxxa> ningu: thanks!
00:05 < ningu> deoxxa: small request, jesus stopall
00:05 < deoxxa> sure thing
00:05 < deoxxa> i'll add it now
00:06 < zemonk> lol, i see cool
00:06 < ningu> also one other thing, I have a shell script that does jesus daemon and then jesus start a few apps... but it seems to take a minute to get going so I've added a sleep 2
00:06 < ningu> just wondering if that sounds right
00:06 < ningu> it doesn't really matter that much
00:06 < deoxxa> yeah, it doesn't actually wait to tell you that the processes have started
00:07 < ningu> ok
00:07 < ningu> it might be nice if jesus daemon didn't return until it was ready
00:07 < ningu> but like I said that's fairly minor
00:07 < deoxxa> oh, i think i might be able to do that...
00:07 < zemonk> deoxxa: how do i match a bunch of writes to the responses? do i just assume for each request i made, the server gave me one line of response back?
00:08 < zemonk> or should i wait for the server's response before sending the next request?
00:08 < zemonk> in that case, how do i know when the server is done talking?
00:08 < deoxxa> zemonk: depends on how the protocol you're using works - some protocols require you to wait for the current response to end, some are fine with you sending a bunch of requests in a row, some provide you with an ID for each response, etc
00:09 < deoxxa> zemonk: in the case of SMTP, i think you might have to wait until the current response is done
00:09 < zemonk> how do you know a response is done?
00:09 < ningu> deoxxa: also if you really want to take after jesus... shouldn't jesus resurrect himself? :)
00:09 < deoxxa> again, depends on the protocol :)
00:09 < zemonk> lol ic
00:09 < deoxxa> ningu: jesus start jesus jesus
00:09 < deoxxa> ningu: lol
00:09 < ningu> deoxxa: I think it crashed once... but I don't know if I have any useful debugging info
00:10 < deoxxa> yeah, i've managed to crash it once in production
00:10 < deoxxa> not sure how i did it
00:10 < ningu> me neither
00:10 < jrdn> anyone know what the difference between oauth's "Resource Owner Password Credentials" and "Client Credentials"
00:14 < Cainus> anyone know if js allows dangling commas now?  node isn't giving me a syntax error on them anymore...
00:15 < deoxxa> Cainus: on objects, arrays, etc, yes. that's fine.
00:15 < deoxxa> Cainus: on statements, argument lists, and other stuff? nope!
00:15 < Cainus> interesting... thanks
00:15 < deoxxa> Cainus: also, as a side note that you're probably aware of, JSON is much more strict than javascript about that stuff
00:16 < deoxxa> Cainus: in JSON, there's no trailing commas
00:16 < Cainus> any clue about browser support for dangling commas in arrays/objects?
00:17 < Cainus> it'd be fantastic to tell my co-workers to stop their comma-first silliness
00:17 < cramrod> Help!  Im having mongoDB problems.  Im trying to insert the contents of an array into a collection.  Instead of inserting a few key/value pairs like I expected, it created a seperate field for each character in every string with fieldnames numbered starting at 0. What am I doing wrong?! 
00:17 < deoxxa> Cainus: anecdotal evidence on my part says that no browser breaks with dangling commas
00:17 < Cainus> deoxxa: nice
00:18 < deoxxa> Cainus: that is, i've never personally seen it cause problems. the stuff i write is mostly targeted towards chrome/firefox/latest IE though
00:18 < deoxxa> Cainus: so it's possible that safari or older IE's might take issue with it
00:18 < Cainus> yeah well it at least foretells the direction
00:19 < Cainus> cool thanks
00:21 < ningu> cramrod: you will have to pastebin your code for us to have any idea
00:21 < ningu> deoxxa: IE crashes on dangling commas
00:21 < ningu> just say no :)
00:21 < deoxxa> ningu: interesting!
00:21 < ningu> it's silly imo to use them
00:22 < ningu> since that's a fairly silly reason to break your whole site
00:22 < ningu> at least, the JS part of it
00:22 < deoxxa> yeah there's no real functional benefits to them
00:22 < deoxxa> aside from easier copy/paste
00:22 < ningu> yeah
00:22 < deoxxa> just a habit i suppose
00:22 < ningu> I prefer them too but it isn't worth breakage
00:23 < cramrod> Im on it Ningu
00:26 < defaultro> hey guys, what would be a proper sentence to ask a former colleague that I'm looking for a job?
00:26 < crabtree> sup
00:26 < ningu> if you want to be sentenced you will have to be arrested and charged first
00:26 < defaultro> don't want to say this directly, Do you have job opening
00:27 < defaultro> :)
00:27 < crabtree> i'm desperate and i need a job opening
00:29 < deoxxa> ok ningu, pushing codez now for stopall :>
00:31 < ningu> deoxxa: awesome thanks
00:31 < ningu> what about the daemon thing?
00:31 < deoxxa> ningu: looking at child_process.spawn options now
00:31 < ningu> cool
00:31 < ningu> strange to think that jesus would need updates
00:32 < deoxxa> ha
00:50 < lethalduck> Which view engines are people enjoying with node and node's web frameworks? jade, EJS, handlebars etc?
00:50 < crabtree> i like jade
00:50 < crabtree> it's neat
00:50 < crabtree> EJS would be my 2nd choice
00:51 < svileng> +1 for jade, reminds me of slim for Rails
00:51 < lethalduck> Seems to kind of be the consensus. There are a lot of them though.
00:51 < lethalduck> Anyone used handlebars with node?
00:52 < someprimetime> jade ftw
00:53 < ningu> jade is disorienting I guess if you are used to straight html but I like it a lot
00:54 < ningu> I like not ever worrying about closing tags and getting the nesting right
00:54 < ningu> and the html output strips out all the whitespace
00:54 < crabtree> yeah i like the compressed output
00:54 < lethalduck> ningu: I thought you had to get the nesting right. That's how it manages without the closing tags?
00:55 < ningu> lethalduck: I know, I meant I like that it's so much easier (for me) than getting it right in html
00:55 < svileng> lethalduck yep, you have to pay attention to identation
00:55 < svileng> but you get used to it
00:55 < crabtree> yeah that's the only thing that can get annoying
00:55 < crabtree> like if you want to have a lot of different elements in a single indent
00:55 < svileng> you can set up your editor to show you tab spaces, etc
00:55 < svileng> that helps a bit
00:55 < crabtree> the colon in jade helps but it's only for two
00:55 < crabtree> li: a(href='') bla
00:55 < lethalduck> It seems young though... 0.28.2?
00:56 < chilts> it's had lots of revisions, not young
00:56 < crabtree> jade's been around for other frameworks for ages
00:56 < ningu> lethalduck: that's version 28
00:56 < chilts> also, version numbers are not indication of quality, stability or maturity
00:56 < ningu> jade has been around for node for at least 2 years I believe
00:56 < ningu> that too
00:56 < lethalduck> Ah
00:57 < chilts> that's how many versions and updates Jade has had since the beginning (end of 2012) -> http://paste.dollyfish.net.nz/c7ae7f
00:57 < chilts> plenty :D
00:59 < lethalduck> So no ones used and enjoyed any of the others?
01:01 < deoxxa> lethalduck: depends on what content you're generating
01:01 < deoxxa> lethalduck: most of the popular template engines in node are all-html-all-the-time
01:02 < deoxxa> lethalduck: if you're generating literally anything else, you're going to have a tough time getting the job done with something like jade or handlebars (though EJS can be a good contender there)
01:02 < lethalduck> hmm
01:03 < deoxxa> lethalduck: for this reason, i ended up writing https://github.com/deoxxa/node-ginger a while back. i wouldn't suggest using it in production, but it's a good example of how you don't need all the abstractions that some of the other libraries provide to achieve the same effects
01:06 < lethalduck> deoxxa: Cool, thanks.
01:21 < gest> hi all I have a question that doesn't pertain to node js but it has to do with webdev
01:22 < gest> specifically I'm looking for a form validation frame work that is interactive
01:22 < gest> enable/disable controls
01:22 < gest> based on answers to a prevous question
01:22 < gest> or so
01:22 < gest> Does anyone know of a framework
01:23 < gest> that does this
01:23 < gest> ?
01:23 < gest> or Just in General : What are the form validation framework/libraries do you guys use?
01:29 < Andorbal> Anyone have any tips for developing a site where the frontend and backend API will be served from different domains?  Like app.foo.com and api.foo.com?
01:29 < ningu> Andorbal: what's there to say, exactly?
01:29 < Andorbal> I'd like app.foo.com to be static html and javascript that will most likely live on S3 and api.foo.com to be a nodejs app.
01:29 < ningu> ok
01:29 < ningu> so do that :P
01:30 < Andorbal> The production setup seems straightforward, but making it work in development seems slightly more challenging.
01:30 < ningu> making what work in development?
01:30 < ningu> the node app?
01:30 < howdynihao> use the hosts file!
01:31 < ningu> the hosts file can't specify a port though :)
01:31 < Andorbal> Exactly.
01:32 < howdynihao> oh
01:32 < Andorbal> I can add a couple entries to my host file and put like nginx in front of the servers, but I'm looking to see if anyone knows of a simpler way.
01:32 < howdynihao> then just setup a simple port redirect
01:32 < ningu> I typically have a config.json for my apps where I specify the port to use and also possibly a url to be prefixed to all links
01:32 < ningu> or at least a base path
01:32 < ningu> would be set to "" if on root, or to "/dir" if not
01:35 < Andorbal> How do you have your file structure laid out?  And would you have the front-end stuff in the same repository as the api?  I plan on having mobile apps use the api as well, so one big repository doesn't seem good to me.
01:41 < chilts> Andorbal: I usually do the following. If I have app.foo.com, then you also have app.development.foo.com, app.testing.foo.com, app.staging.foo.com
01:41 < chilts> same for api.foo.com
01:41 < chilts> then each environment is simillar
01:42 < chilts> production doesn't have a prefix so it's just app.foo.com and api.foo.com
01:42 < ningu> food for thought: http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/
01:42 < chilts> each set of subdomains point to the relevant environment, development sometimes points to 127.0.0.1
01:42 < Andorbal> How do you actually serve those up when you're on your development machine?
01:42 < chilts> ningu: and http://www.futurealoof.com/posts/broken-promises.html
01:43 < chilts> Andorbal: well, you run node app.js and it runs :)
01:43 < ningu> chilts: cool, thanks :)
01:43 < Andorbal> LOL
01:43 < Andorbal> Do you you have a single node server running multiple applications?
01:43 < ningu> Andorbal: by the way, not sure what your experience with node is, but I've run into surprisingly few issues going from dev -> production. my apps are relatively small though.
01:44 < ningu> anyway just a bit of encouragement. I don't have experience doing it in a more systematic way as you're describing.
01:44 < lethalduck> gest: have a read through my posts on the subject: http://blog.binarymist.net/2012/11/04/sanitising-user-input-from-browser-part-1/
01:44 < lethalduck> http://blog.binarymist.net/2012/11/16/sanitising-user-input-from-browser-part-2/
01:44 < Andorbal> I'm pretty confident moving a single application from dev to production.
01:44 < chilts> Andorbal: no, I usually have a single program be a single site
01:45 < ningu> Andorbal: I say that just because in my previous experience with other platforms I've run nto various hard to debug issues
01:45 < ningu> Andorbal: anyway making the dev environment as similar as possible sounds like a good idea so I'm not saying not to do that.
01:45 < chilts> though sometimes I either load balance to multiple instances with Nginx, or use cluster to create child processes (which I usually also proxy to via Nginx)
01:45 < gest> @lethalduck thanks but I't seems that you are more talking from the perspective of security
01:46 < ningu> yes, cluster to take advantage of multiple cores -- although I haven't used it myself.
01:46 < gest> @lethalduck I just need features like jquery.validation plugin
01:46 < lethalduck> gest: Yes.
01:46 < gest> but a little more advanced
01:46 < chilts> well, or two (or more) instances ... though I did that in the past, am doing it with cluster now
01:46 < chilts> but there are various ways of doing it
01:46 < gest> like validation + direction
01:47 < gest> enblling disabling form controls based on the state of other form controls
01:47 < gest> I've written something custom
01:47 < Andorbal> I'm pretty confident that I could get an environment set up in development, but I want to make it as simple as possible to start and stop.
01:47 < gest> but I can't seem to find a way to generalize it
01:47 < chilts> Andorbal: node app.js
01:47 < chilts> C^c to stop it
01:47 < chilts> up arrow, RET to restart
01:47 < howdynihao> wasnt there some project that setup a fake amazon web services api for testing, develpoment?
01:47 < chilts> or use supervisor :)
01:48 < Andorbal> So I need to add entries to my hosts file, start api.foo.com, start app.foo.com, start nginx...
01:48 < lethalduck> gest: direction?
01:48 < Andorbal> Supervisor?
01:48 < Andorbal> I'll look into that
01:48 < chilts> you might not need Nginx on your local machine
01:48 < Andorbal> I'll have two sites on two different ports.
01:48 < ningu> I don't use nginx at all on my dev setup
01:48 < chilts> seems like you have a fair bit of reading to do to see how all these things fit together :)
01:48 < ningu> just node app.js
01:48 < gest> direction meaning Directing users of the form - helping them fill out the form by disabling non-relative controls
01:48 < chilts> same
01:49 < ningu> I generally run redis locally and connect to mongo or postgres or whatever remotely
01:49 < Andorbal> node app.js will only start a single server, though.
01:49 < Andorbal> I need two.
01:50 < ningu> you said the other site was static. why bother doing it in node at all?
01:50 < ningu> and why would the api need to access it? but if it does just access it wherever it's going to be... unless I'm missing something...
01:50 < Andorbal> I don't need node for the static site, but I want the files served through HTTP
01:50 < ningu> oh I see, you want to access the api *from* the static site.
01:50 < Andorbal> Exactly!
01:50 < Aria> You can have a single app respond for both; you can start two servers in a single app; you can start two apps.
01:51 < lethalduck> gest: have you looked at jster.net
01:51 < lethalduck> http://jster.net/category/validation
01:51 < ningu> Andorbal: honestly I would just open a file:/// url or something and put in some way to change the url to the api
01:52 < ningu> not sure if that would be appropriate or not for your setup
01:52 < Andorbal> I'll give that a shot; I've just run into situations where file:/// and http:// behave differently in the browser with regards to same origin stuff...
01:52 < gest> @letahlduck I'm looking at it now that you have mentioned it
01:52 < ningu> yes, that's possible. well, you can always run nginx locally too.
01:53 < Sorella> > But flow control fails this test because the semantics which might be removed, literally the flow that is being controlled, are operations provided by the final consumer of that API.
01:55 < Sorella> I couldn't disagree more with Mikeal here. Sequencing and explicit ordering is only important for manual optimisations, flow can be figured by the platform given well-defined data relationships. E.g.: everything in Haskell.
01:55 < Andorbal> I come from a .NET background and I'm just trying to avoid going back to a situation where I've got to give devs instructions on how to set up their dev boxes to work correctly, you know?
01:56 < ningu> Andorbal: well, you can always set up a dev version of the static site that generates localhost:3000 links or whatever for the api
01:56 < ningu> that is, on your server wherever it is
01:57 < Andorbal> I'll look into that as well.
01:58 < Andorbal> Actually, let me turn my question around...
01:58 < owen1> can someone look at this simple server.js and tell me why the author wrote in the readme to add <script src='//localhost:3001/receive.js'></script>? there is no route for /receive.js
01:58 < owen1> https://github.com/tmcw/bigclicker/blob/master/server.js
01:58 < Andorbal> How would you set up an application so that there was a web front end, a mobile app, and an api?
01:59 < owen1> Andorbal: that a good approach for most web apps. seperate the ui from the api
02:00 < ningu> owen1: indeed there appears not to be :)
02:01 < Andorbal> I'm trying to separate the ui from the api, but it seems much more cumbersome to develop that way, especially if I don't want the api and the ui to be developed in lock-step with each other.
02:01 < owen1> ningu: https://github.com/tmcw/bigclicker/blob/master/receive.js  even if you'll add a route for /receive.js and send this file to the client, the client will complain that there is no 'happen' variable
02:01 < ningu> owen1: *shrug* looks like a work in progress
02:02 < owen1> ningu: any idea how to send the happen library to the client? 
02:02 < ningu> use static?
02:02 < owen1> what that? a module name?
02:03 < ningu> it's a middleware
02:03 < ningu> generally:  app.use(express.static(path.join(__dirname, 'public')));
02:03 < ningu> except in this case it's in the root dir
02:03 < ningu> I would make a public/ and put it in there
02:05 < owen1> and how will it be added to the client?
02:06 < ningu> with the script tag you mentioned
02:06 < owen1> oh - <script src='//localhost:3001/receive.js'>
02:06 < owen1> but we still need to find a way to add happen.js
02:07 < ningu> put it in public too
02:07 < owen1> <script src='//localhost:3001/happen.js'> ?
02:07 < ningu> owen1: that will work if happen.js is in public, yes
02:08 < owen1> cool
02:14 < owen1> ningu: i did that, do i still need to create 2 routes (one for /recieve.js and the other for /happen.js)
02:14 < ningu> owen1: no you don't
02:14 < owen1> and why do i need the static middleware, can't i just res.sendFile ?
02:14 < ningu> sure, do whatever you want
02:16 < ningu> you have to call app.use() before http.createServer
02:29 < freon> anyone using coffee-trace? or found a better solution for coffee script stack tracing?
02:30 < ningu> "Yeah, Iâ€™ve always greatly disliked the tendency to use simple callbacks in Javascript. It never leads to writing usefully-asynchronous code. It becomes little more than an exercise in pretending an incredibly useful event loop is simply a bunch of procedural code that happens to call functions with values instead of return them directly."
02:30 < ningu> that literally makes *no* sense to me.
02:30 < ningu> of course, he goes on to say: "Iâ€™d much sooner spawn threads in Python to stat a bunch of files concurrently and join() the results than waste time contriving that solution in Node."
02:35 < ningu> "abaaso is a modern, lightweight Enterprise class RESTful JavaScript application framework." buzzword overload
02:36 < freon> ningu: I'm cool with that. if ppl prefer python threads, good luck to them. Just don't try to jam that way of working into node.
02:36 < ningu> freon: he was basically saying that doing async the way node does it -- i.e. all in one process -- is not "usefully asynchronous".
02:36 < lethalduck> deoxxa: This was the one I was really keen on http://fluentconf.com/fluent2013/
02:37 < ningu> I couldn't disagree more. whether you want to do it that way, as you say, is a choice; but to say it's not usefully asynchronous seems ridiculous.
02:37 < deoxxa> lethalduck: that might work
02:37 < lethalduck> It looks bloody good.
02:38 < trippeh> With pythons global interpreter lock, his way is about as fast as node per process, just using more memory probably ;)
02:38 < deoxxa> lethalduck: i was thinking of spending june in the US, maybe a bit longer
02:38 < niggler> GIL sucks
02:38  * deoxxa reads about what's on
02:38 < freon> oh, well, again, if someone can't see the value of node, fine. so long as that means they look elsewhere.
02:38 < ningu> trippeh: right... I think he was basically just saying, async callback code is ugly, I'd rather do it in threads. basically ignoring the whole reason node was created.
02:38 < niggler> ningu where's MVC?
02:39 < ningu> niggler: MVC is so web 2.0
02:39 < niggler> MVVC?
02:39 < ningu> now it's all about data binding, MVVM
02:40 < trippeh> The state of threading in pretty much any "scripting language" is annoying though. Perl has its "a full interpreter per thread" model (not even COW'ed!), for example.
02:40 < niggler> woah woah MVVM?
02:40 < ningu> knockout.js calls it MVVM
02:40 < ningu> angular calls it MVW I think -- model/view/whatever
02:40 < ningu> same idea though
02:40 < lethalduck> Not really the same idea ningu
02:41 < lethalduck> qute different
02:41 < ningu> no?
02:41 < ningu> the model-view bindings are the same
02:41 < ningu> functionally, not in implementation
02:41 < lethalduck> from knockout to angular?
02:41 < lethalduck> ah
02:41 < ningu> lethalduck: as far as I can tell they solve the same problem
02:41 < ningu> you just write it differently
02:42 < ningu> angular is all about custom attributes and tags, knockout uses data-bind
02:42 < niggler> ningu: "Declarative templates with data-binding, MVW, MVVM, MVC, dependency injection and great testability " (duckduckgo's summary)
02:42 < ningu> niggler: summary of angular?
02:42 < lethalduck> I haven't used angular. Evaluated it with knockout though. Then decided to go with knockout for the project in question.
02:42 < niggler> oh ningu apparently that used to be on the homepage
02:42 < niggler> "AngularJS is what HTML would have been, had it been designed for building web-apps. Declarative templates with data-binding, MVW, MVVM, MVC, dependency injection and great testability story all implemented with pure client-side JavaScript!"
02:42 < ningu> lethalduck: that's funny, I recently also evaluated both and went with angular :)
02:43 < deoxxa> lethalduck: there's so, so much going on at that conference, haha
02:43 < ningu> however I generate templates on the server
02:43 < deoxxa> lethalduck: i couldn't possibly choose what to see
02:43 < ningu> deoxxa: which conference? fluent?
02:43 < deoxxa> 4 tracks is a bit nuts
02:43 < deoxxa> yeah
02:43 < niggler> woah ok here's the answer: MVW = Model-View-Whatever 
02:43 < ningu> niggler: yes I already said that :)
02:44 < ningu> may 28-30? maybe I can get my boss to send me, I live in SF after all
02:44 < niggler> "model/view/whatever" lol
02:44  * owen1 <3 angular
02:44 < ningu> niggler: I prefer that to attempting to define things that vary tremendously across apps -- controller has never been terribly well defined as a concept
02:45 < niggler> when will we move beyond this?
02:45 < owen1> and falling in love with leveldb. for anyone interested in the fastest db ever - join ##leveldb
02:45 < ningu> niggler: create something that makes more sense and get everyone to adopt it :P
02:45 < owen1> faster than berkely-db
02:45 < howdynihao> anyone using mongohq and having problems lately?
02:45 < niggler> mongo = crap
02:46 < ningu> I think mongo has its uses
02:46 < ningu> it's fine if that's what you are doing
02:47 < howdynihao> what
02:48 < niggler> ningu i've never found that use case
02:48 < niggler> the case where mongo actually makes sense
02:48 < ningu> niggler: so what is your objection to it, out of curiosity? curious if you have the same criticisms as I would
02:49 < ningu> I made a small-ish app in mongo and I am currently considering moving it back to SQL
02:49 < bradleymeck> keep wondering if the promises and callback ppl can find some common ground for a dual system
02:49 < niggler> i don't think its a problem with mongo specifically, but people use it in contexts when a proper SQL database makes more sense (like with financial transactions)
02:50 < howdynihao> who does that?
02:50 < lethalduck> ningu: probably for different reasons
02:50 < niggler> coinbase :/
02:50 < BombStrike> here we use it as a cache for complex SQL structures
02:50 < howdynihao> i dont know what coinbase is, but i think thats obvious since its not acid
02:50 < niggler> BombStrike do you use a proper SQL server as well?
02:51 < BombStrike> yes
02:51 < bradleymeck> new is like the perfect way to say, hey this async op should be a promise instead of just a callbackâ€¦ meh, thinking
02:51 < niggler> so why not something like memcached+mysql?
02:52 < niggler> bradleymeck there are intellectual masturbators and people who get stuff done
02:52 < lethalduck> I had to cater for developers familiar with MVVM and having never used JavaScript before. knockback would feel very familiar for them. Plus the documentation and other training material seemed better.
02:52 < howdynihao> niggler: i still that was a far reaching comment though saying mongo is crap
02:52 < BombStrike> because we use memcache for more critical operations, storing large blobs of json in memcache feels kinda wrong
02:52 < bradleymeck> niggler: unsure what you are talking about in general there referring to me
02:52 < howdynihao> just because some people ignore the disclaimer from mongo themself
02:52 < niggler> bradleymeck oh you were asking about promises and callbacks
02:52 < lethalduck> deoxxa: Well that's why they video the whole lot and give it to you as well.
02:53 < ningu> bradleymeck: huh? "new is the perfect way to say"?
02:53 < lethalduck> deoxxa: or you can just buy the video and watch it from your couch.
02:54 < freon> btw, anyone got any recommendations about coffeescript stack traces??
02:54  * niggler slaps freon
02:54 < bradleymeck> new fs.read().then(onsuccess,onerror) vs fs.read(cb) trying to think of a common ground for promises and callbacks
02:54 < ningu> lethalduck: in that case it may make sense. knockout is definitely better documented. angular imposes more of a framework but in my opinion it isn't too onerous and is ultimately more powerful
02:54 < freon> constructive recommendations
02:54  * freon turns the other cheek
02:54 < niggler> freon isn't there a coffee script chatroom?
02:54 < bradleymeck> freon: use sourcemaps is all i can say and then you have to use a debugger that supports them, unsure if npm has a module that supports directly strapping them to CS
02:55 < lethalduck> ningu: imposes more of a framework? Shit... knockout is imposing enough.
02:55 < deoxxa> freon: take a transparent piece of paper and hold it over the stack, then trace it by hand
02:55 < ningu> bradleymeck: as long as you can implement that in a way that it works automatically with existing code...
02:55 < freon> hey, I'm fine debugging CS elsewhere, but in node ...
02:55 < deoxxa> freon: i'm only partially kidding there
02:55 < ningu> lethalduck: haha fair enough. I may be wrong since I haven't used knockout, just read various docs and examples.
02:55 < lethalduck> ningu: more powerful in what way?
02:55 < bradleymeck> ningu ive made a prototype, but the new operator dection is pretty ugly
02:55 < freon> deoxxa, I thought you would realise by 'anyone' I meant 'anyone other than deoxxa'
02:55 < bradleymeck> for perf*
02:55 < deoxxa> freon: oh, duh. my bad!
02:56 < bradleymeck> freon: have you seen node-webkit-agent and node-inspector(was recently updated)
02:56 < ningu> lethalduck: it gives you a framework for managing your app code that I find really nice. you define controllers, factories etc. and put all the code in one place for one thing. also the ability to define your own directives (= html attributes usually) is very powerful.
02:56 < someprimetime> How come this works in jsfiddle but not on my server? http://jsfiddle.net/someprimetime/pnDUL/3/
02:57 < someprimetime> This is from a mongoose collection, so I quoted put quotes around the object id and the date
02:57 < ningu> dude come over to my house and checkout my mongoose collection... bring snakes
02:57 < lethalduck> ningu: actually doesn't sound to different from knockout.
02:57 < ningu> lethalduck: maybe not. they are different ways of doing the same thing ultimately
02:58 < lethalduck> mm
02:58 < howdynihao> ningu: so whats your beef with mongo?
02:58 < ningu> in angular I just love how I can define a factory or service and then just add it to the args list in a controller
02:59 < ningu> also the scope facility is really powerful
02:59 < ningu> howdynihao: basically the lack of transactions/acid
02:59 < niggler> howdynihao have you tried using mongo in a write-heavy workload?
02:59 < howdynihao> have i actually tried it no, but i'm convinced thats one of its best areas
02:59 < ningu> I don't have a lot of data but it's very important data
02:59 < owen1> freon: learn js
02:59 < niggler> its actually one of the worst howdynihao because of the db lock
02:59 < howdynihao> ningu: do you really want transactions?
03:00 < howdynihao> ningu: because you can have it replicate important data before it tells you it succeed the write op
03:00 < ningu> yes, there is no sense in writing something that has multiple parts unless they all are written. I've had multiple issues with consistency in mongo
03:00 < freon> bradleymeck: yeah thanks, loving it. great for devt. I'm keen for getting a good stack trace in production tho.
03:00 < bradleymeck> freon: unfortunately not easy to do
03:01 < howdynihao> well i mean transactions its pretty much i mean given, they warn or explicitly tell you its not supported
03:01 < lethalduck> ningu: ember also looked good, but didn't win for me.
03:01 < ningu> ultimately all due to bugs in my code, not mongo, of course
03:01  * freon nods
03:01 < ningu> howdynihao: of course, I don't feel misled
03:01 < lethalduck> nice comparison between backbone and ember here: http://smus.com/backbone-and-ember/
03:01 < niggler> howdynihao the problem is rarely whether you can evaluate the situation, but rather whether others can
03:02 < niggler> i would venture to guess that it's more a community problem than a technology problem
03:02 < lethalduck> ningu: TodoMVC was also good to play with for evaluation purposes for MV* frameworks: http://todomvc.com/
03:02 < ningu> lethalduck: I looked at ember too but had the same reaction
03:02 < Cainus> mongo has atomic reliable writes... just one doc at a time
03:03 < Cainus> if you want a relational db, you don't use mongo
03:03 < ningu> niggler: I've asked the mongo folks about their thoughts on data integrity and they basically said if that's your requirement don't use it
03:03 < ningu> yes, that too
03:03 < niggler> lol exactly
03:03 < niggler> Cainus i blame hipsters
03:03 < howdynihao> ningu: that was probably awhile ago you asked?
03:04 < ningu> http://i.imgur.com/mH8Ekr1.jpg
03:04 < niggler> gets back to a point earlier bradleymeck 
03:04 < ningu> howdynihao: probably
03:04 < niggler> nodejs has crossed the proverbial rubicon
03:04 < ningu> howdynihao: I'm still using 2.0
03:04 < niggler> but mongo is still in hipster land
03:04 < Cainus> well a lot of problems don't need relational dbs either... but people who use a document db in a relational way are going to be disappointed
03:05 < Cainus> a lot of problems don't even need reliable writes
03:06 < niggler> Cainus many problems do need reliable writes
03:06 < niggler> like when real money is involved
03:06 < Cainus> yeah obviously
03:07 < Cainus> I wouldn't use mongo for that either, but it does do reliable writes... if you tell it to
03:07 < ningu> someone should fork it and make bongodb
03:07 < deoxxa> data with a rhythm
03:08 < deoxxa> DRUM UP A DATA STORM
03:08 < deoxxa> beat your app into shape
03:08 < ningu> not just asynchronous... syncopated
03:09 < deoxxa> i want bongodb now
03:10 < niggler> deoxxa you need to make it happen
03:10 < deoxxa> i am but one man, i couldn't possibly be funky enough to make that happen
03:15 < ningu> hmm... queue-flow looks interesting but probably also too much magic
03:17 < howdynihao> ningu: what do you have against harry potter?
03:17 < ningu> in russian it's gary potter
03:18 < niggler> ningu I'm waiting for the control flow library written like DOT
03:18 < ningu> department of transportation?
03:18 < ningu> I mean they do handle control flow of a sort...
03:19 < niggler> graphviz
03:19 < niggler> This --> That
03:21 < JamesMGreene> If I am reading a file with a ReadStream (i.e. `fs.createReadStream`), do I have to close the stream/file manually with `destroy`?
03:23 < JamesMGreene> Or will it auto-close when it either (a) hits the end of the file, or (b) when it hits the end of its start-to-end range as specified in its creation options?
03:32 < JamesMGreene> Anybody? isaacs mbalho Nexxy ryah substack creationix etc
03:33 <@mbalho> JamesMGreene: i'd recommend asking a question and coming back later to see if anyone answered you, that is how most people use irc
03:33 <@mbalho> JamesMGreene: especially on weekends
03:33 < JamesMGreene> Understood, thus the nice 8-minute gap ;)
03:34 <@mbalho> JamesMGreene: i think fs.createReadStream emits 'close' after it hits the end of the file
03:34 <@mbalho> JamesMGreene: should be easy enough to play with int he node repl to figure out for sure
03:37 < lethalduck> Who's used less and stylus?
03:38 < deoxxa> JamesMGreene: you talking 0.10 or <=0.8?
03:38 < JamesMGreene> 0.8+
03:39 < deoxxa> that's not an acceptable answer
03:39 < deoxxa> >=0.10 or <=0.8?
03:39 < JamesMGreene> lol
03:39 < deoxxa> the behaviour is different
03:39 < JamesMGreene> >= 0.8.10
03:39 < deoxxa> and <0.10?
03:39 < JamesMGreene> Understood but it's going to have to work on both, eh?
03:40 < JamesMGreene> deoxxa: If that's what it takes for now, sure
03:40 < deoxxa> well for some definitions of "it", "it" will be the same
03:40 < deoxxa> a stream returned from fs.createReadStream() will emit "end" once it's hit EOF and it'll destroy its own bits and pieces that it uses internally
03:40 < JamesMGreene> Just reading bytes as buffers; in one case: just the first four bytes of the file using the start/end options, in the other reading the whole file
03:41 < deoxxa> yep
03:41 < lethalduck> and what are your preferences?
03:41 < deoxxa> both cases should result in the stream closing itself and sorting itself out
03:41 < deoxxa> unless you specifically tell it not to close
03:42 < JamesMGreene> In the first case it will not emit "end", though, just "close" right?
03:42 < deoxxa> no it should emit "end", as far as i know, because that's what downstream consumers will be listening for
03:42 < deoxxa> (i.e. .pipe(consumer))
03:43 < JamesMGreene> Oh interesting
03:43 < deoxxa> the EOF condition is basically just "no more data is ever going to come out of this thing"
03:43 < JamesMGreene> And I should always call "resume" at the start to make it work in both 0.8.x and 0.10.x, right?
03:44 < deoxxa> well, that depends on how you're doing things
03:44 < deoxxa> if you're attaching to the "data" event, you don't have to, but you also shouldn't be attaching to that
03:44 < deoxxa> if you're read()ing from it, you don't have to
03:44 < deoxxa> if you're pipe()ing from it, you don't have to
03:44 < JamesMGreene> Huh?
03:44 < JamesMGreene> I thought you had to attach to "data" to get the data
03:44 < deoxxa> if you're opening it, then *never* doing any of those things, but still expecting it to close, you have to .resume() in 0.10 for it to work
03:45 < deoxxa> nope!
03:45 < deoxxa> welcome to 0.10
03:45 < deoxxa> streams are new and confusing again
03:45 < deoxxa> (but ultimately better)
03:45 < JamesMGreene> But how about in 0.8.x?
03:45 < deoxxa> 0.8 has old-style streams where things just start happening as soon as the stream is created
03:45 < deoxxa> so you don't have to .resume()
03:46 < ningu> deoxxa: according to a recent mailing list post from isaacs, the old style streams are not discouraged -- you can just do it how you want to
03:47 < deoxxa> ningu: oh yeah, it's fine, but you shouldn't just be doing .on("data", function(chunk) {}) to consume data anyway - you should be constructing a writable stream and .pipe()ing to it if you want to take advantage of backpressure etc etc
03:47 < JamesMGreene> deoxxa: So with 0.10 I assume you're talking about using `readable.read(size)` instead of `readable.on('data', fn).resume()`, right?
03:47 < ningu> deoxxa: what if I need all of the data?
03:48 < JamesMGreene> deoxxa: In the first scenario, I'm not interested in writing the data out again so that seems impractical
03:49 < JamesMGreene> In the latter scenario I could potentially use piping, though I'm curious: in which stream would you add data filtering? reader or writer?
03:49 < deoxxa> ningu: you'll still get all the data - it's just that by constructing a proper stream to .pipe() to, you can tell the source stream "no wait stop for a minute, i'm still waiting on <x> from the last chunk" and avoid having to keep 50mb of data in a buffer if you're not ready to deal with it yet
03:50 < deoxxa> JamesMGreene: it'd look the same for me in 0.8 or 0.10, i'd have a writable stream that i'd pipe to - but in the case of doing it "lo-fi", yes, that's the basic difference
03:51 < deoxxa> JamesMGreene: i'd filter at the consumer (the "reader")
03:51 < deoxxa> streams are just awesomely composable
03:52 < howdynihao> ningu: i got a bone to pick with you
03:52 < ningu> deoxxa: what if I can't do anything at all, ever, unless I have all the data? why not just do it the old way?
03:52 < ningu> howdynihao: ?
03:52 < howdynihao> you know that link you pasted? it was a nice read
03:52 < deoxxa> ningu: i guess consistency
03:52 < ningu> howdynihao: what, the one on promises?
03:52 < howdynihao> but look at the first commentators avatar, what the heck is that lol ??
03:53 < howdynihao> what are you linking me!
03:53 < howdynihao> go back and look at that thing haha
03:53 < ningu> it doesn't look like anything
03:56 < howdynihao> zoom
03:57 < ningu> no idea
04:00 < howdynihao> well anyway, its an interesting read, but i feel like you can call an apple an orange, that dont make it an orange
04:01 < ningu> yeah I posted it before I had read more than the beginning
04:01 < ningu> I ultimately agree with mikeal 
04:01 < deoxxa> howdynihao: http://www.smbc-comics.com/?id=2921
04:01 < Tux> I have a quick newbie question: I'd like to return data from a event listener but when I try to simply assign to the variable it simply returns the previously-assigned value. Is there any "valid" way to return the data?
04:01 < howdynihao> i didnt read his response
04:01 < howdynihao> my thing is conceptually its very nice, but thats not really what it is
04:02 < mikeal> i wrote a response
04:02 < deoxxa> mikeal: horizontal scrolling, man, come on
04:02 < ningu> mikeal: btw is there a link to substack's talk on streams that you mention?
04:02 < mikeal> james is basically arguing that promises have features
04:02 < ningu> maybe it's the "harnessing" talk
04:02 < mikeal> which, of course, i agree with, its just that i don't think those features matter :)
04:03 < mikeal> ningu: which one?
04:03 < ningu> mikeal: someone else here linked to queue-flow
04:03 < mikeal> LXJS or Dublin?
04:03 < ningu> mikeal: dunno, you mention it in the LXJS talk
04:03 < mikeal> http://www.youtube.com/watch?v=lQAV3bPOYHo
04:03 < ningu> ah cool thanks
04:04 < ningu> Tux: what do you mean exactly by "return data from an event listener"?
04:04 < ningu> mikeal: btw where are you based?
04:04 < mikeal> i live in the east bay
04:04 < mikeal> i work in sf everyday
04:04 < ningu> mikeal: ok just curious. I live in sf and sometimes work in the east bay. :)
04:04 < howdynihao> how is parking in sf
04:04 < mikeal> haha
04:05 < ningu> I got into node when I was out of the country and am looking to hook up with folks now and hten
04:05 < mikeal> parking in sf is foolish
04:05 < ningu> actually in my neighborhood parking is not bad at all
04:05 < ningu> it's a bit freakish
04:05 < howdynihao> do most people commute by public transit?
04:05 < ningu> howdynihao: depends where you're going
04:05 < ningu> walk, bike, bus/train, drive
04:05 < mikeal> Bart, yeah
04:05 < ningu> bart doesn't go a lot of places though
04:05 < mikeal> east bay to the city 
04:05 < ningu> well yeah
04:06 < Tux> ningu, I'm attempting to return from the data event in net.Socket some data. I've added console.log() statements and I'm getting the data intended but somehow it's resetting.
04:06 < JamesMGreene> Does Node ignore small `bufferSize` settings for `fs.createReadStream`? i.e.
04:06 < ningu> silly to take any other public transit for that
04:06 < JamesMGreene> `fs.createReadStream(filePath, { bufferSize: 4, start: 0, end: 3 })` is returning a Buffer of 40960 bytes
04:06 < ningu> mikeal: you work at joyent or somewhere else?
04:06 < JamesMGreene> (almost all of which are `0`)
04:06 < mikeal> i'm the CTO at Getable
04:06 < mikeal> my office is like 3 blocks from joyent tho
04:07 < ningu> mikeal: I have a bit of an odd background, getting a ph.d. in linguistics and currently working half-time for long now... but I'm thinking about life after the ph.d. and it's not exactly certain I'll get an academic job
04:07 < ningu> so good to keep up with what's going on while this boom lasts
04:07 < niggler> screw academia
04:07 < mikeal> the regular meetups went to shit
04:07 < ningu> oh well
04:07 < mikeal> node got too popular too fast
04:08 < ningu> I've just been doing on on my own for my own stuff and now I'm using it at my new job since my boss is pretty amenable to whatever does what he wants
04:08 < mikeal> it became impossible to organize anything, it would fill up in a day with like 200 people, all of a sudden meetups are just free conferences with people who don't really give a shit
04:08 < niggler> mikeal entrance fee
04:08 < ningu> mikeal: anyway I'm not looking to monopolize anyone's time, just curious what's up
04:08 < mikeal> we're working on some new stuff
04:09 < mikeal> the short answer is "not muhc"
04:09 < mikeal> hopefully that will change soon
04:09 < ningu> I am obviously not on the level of you and substack but I know I'm not a total noob
04:09 < mikeal> i mean, i get lunch with isaac a few times a week, but nothing like public
04:09 < deoxxa> JamesMGreene: check the .length property
04:10 < ningu> mikeal: yeah, I know everyone has real work to do :)
04:10 < deoxxa> JamesMGreene: buffers are usually backed by a larger chunk of memory than what you ask for
04:10 < Tux> This is my code: http://pastie.org/7255492
04:10 < mikeal> its more like, too many people show up
04:10 < ningu> I am really impressed with isaac's ability to keep everything/everyone together somehow
04:11 < mikeal> its more than just him, but yeah :)
04:11 < niggler> there are other people too ningu 
04:11 < ningu> if it weren't for the stuff on npm I probably wouldn't use node, not enough time to write it all myself
04:11 < ningu> I don't mean he does it singlehandedly
04:11 < mikeal> the ecosystem is the real success of node
04:11 < niggler> it also helps to have a corporation behind it
04:11 < ningu> I just mean, he has skills other than technical skills which are very necessary
04:11 < mikeal> hehe
04:12 < mikeal> its taken time, he wasnt always so good at the community stuff
04:13 < ningu> I guess I meant more the ability to make the right design decisions too -- what's needed, what's too much
04:13 < ningu> with so many projects those decisions go the wrong way one way or the other
04:13 < ningu> I dunno how those decisions get made with node though to be honest
04:13 < niggler> ningu people make proposals
04:13 < mikeal> a lot of what defined the scope of node was during Ryan's time, and he stepped back once what was left to do wasn't so much what he was good at and Isaac stepped up 
04:14 < JamesMGreene> deoxxa: Yup, length on the Buffer was correct
04:14 < ningu> niggler: right, but there's no shortage of people to make proposals, *someone* has to decide
04:14 < JamesMGreene> deoxxa: So how would I go about filtering a piping ReadStream?
04:14 < mikeal> Isaac was always more hooked in to the ecosystem
04:14 < mikeal> but yeah, isaac is great as saying no
04:15 < ningu> mikeal: also why is your name spelled that way? I always thought you were dutch or something until I heard your voice
04:15 < ningu> I know it's a silly question
04:16 < ningu> Tux: you need to pass a callback to mcslp() and pass the result to it
04:16 < ningu> Tux: event listeners run "in the future", after mcslp has returned
04:16 < mikeal> haha
04:16 < mikeal> my parents are hippies, so they made up a spelling
04:16 < mikeal> it's not ethnic
04:16 < ningu> :)
04:16 < Tux> So I should add a callback function, but then how would it get called?
04:17 < ningu> Tux: from one of the listeners
04:17 < Tux> And how would I specify it? I'm sorry for asking noobish questions, my JS-fu is weak
04:17 <@mbalho> mikeal is literally mike + al, mikeals mom told me that
04:18 < mikeal> my father and her had conflicting stories
04:18 <@mbalho> hahah
04:18 < ningu> Tux: add a cb argument to mcslp() and then do cb(<error>, <result>)
04:18 < Tux> okay
04:18 < Tux> thanks
04:18 < ningu> when there is no error pass null as the first argument
04:18 < ningu> when there is an error, pass it as the first argument
04:19 < ningu> and thus the node callback api was bornb
04:19 <@mbalho> haha
04:30 < Tux> I've decided to just jettison callbacks and just expose it all via an external HTTP API.
04:30 < ningu> Tux: you can't do i/o in node by jettisoning callbacks.
04:31 < Tux> I attempted to adapt the functions to the point where I could just require("mcslp.js").ping(server, port) without dealing with a lot of red tape.
04:32 < ningu> and how will you get the response back from the server?
04:32 < Tux> I guess I'm still stuck in the Python world.
04:33 < Tux> Regardless, I'll have to start getting used to a lot of callbacks in my code.
04:33 < mikeal> callbacks are as much a part of writing node as significant whitespace is in Python :)
04:33 < mikeal> the sooner you get used to them the happier you'll be
04:34 < boof> Hey guys
04:34 < ningu> mikeal: you called stalin trotsky. the two of them would not have been happy about that confusion. :)
04:34 < boof> i've been having a little problems with my mongodb for node.js
04:34 < mikeal> huh?
04:34 < boof> I was wondering if anyone might have the solution
04:34 < mikeal> didn't i say lenin and trotksy?
04:34 < ningu> yes but it was a picture of stalin
04:35 < mikeal> i guarantee it wasn't :)
04:35 < boof> b/c I've tried tweaking and looking up the solution everywhere and my localhost is still not displaying anything
04:35 < mikeal> i'm pretty sure it was lenin
04:35 < ningu> it was lenin and stalin
04:35 < ningu> 19:10 in the lxjs talk
04:36 < mikeal> oh shit
04:36 < boof> anyone have any experience with mongoJS?
04:36 < mikeal> it was this one
04:36 < mikeal> but it's cropped
04:36 < mikeal> http://0.tqn.com/d/history1900s/1/0/2/I/1/stalinlenin2.jpg
04:36 < ningu> http://commons.wikimedia.org/wiki/File:Vladimir_Lenin_and_Joseph_Stalin,_1919.jpg
04:36 < ningu> ahhh
04:36 < mikeal> the slides in that talk got all fucked up
04:37 < ningu> but the person on the right is kalinin not trotsky
04:37 < mikeal> surprisingly, they are less fucked up in the video
04:37 < mikeal> than they were on the projector
04:37 < mikeal> i mention it several times
04:37 < ningu> I know, I was talking about the slide that was edited in later
04:37 < ningu> couldn't see the other one well enough
04:37 < mikeal> you're right
04:37 < ningu> anyway lenin != stalin != kalinin != trotsky ;)
04:38 < mikeal> stalin was only important later
04:38 < mikeal> in the talk i'm discussing the time of the revolution, way before stalin took power, before they had even pushed out the tsar
04:39 < ningu> mikeal: yes but you also talk about someone "kicking all the tsars out" of the ukraine :P
04:39 < mikeal> that's nestor mahkno
04:39 < mikeal> who is a certified badass
04:39 < ningu> sure, but there was only one tsar
04:39 < ningu> there were tsar*ists*
04:39 < SomeoneWeird> me
04:39 < mikeal> i meant the tsar government
04:39 < mikeal> and all their leaders
04:40 < mikeal> when you read the translated works of mahkno it gets translates to "tsars" for short
04:40 < ningu> hmmm
04:40 < ningu> I wonder what the original says
04:40 < mikeal> some shit in ukranian :)
04:40 < ningu> nah it would be in russian
04:40 < ningu> most likely
04:41 < ningu> actually he could have been radical enough to write in ukrainian
04:41 < ningu> but given the period I doubt it
04:42 < mikeal> also, if you read Alexander Berkman's "The Bolshevik Myth" he refers to "the tsars"
04:42 < mikeal> mahkno published almost everything while in exhile
04:42 < mikeal> so he may have worked with someone to publish the original in english
04:43 < ningu> The Russian Revolution in Ukraine (March 1917-April 1918) Translated from the Russian edition of 1929 (in consultation with French edition of 1928). Black Cat Press, 2007.
04:44 < mikeal> oh man, does that mean it's translated from Russian to French to English?
04:44 < ningu> it means it's translated from Russian to English with reference made along the way to the French edition
04:44 < ningu> maybe the French translators had access to extra information the English translator wanted to make use of
04:44 < niggler> the french version is treated as a faithful translation when making the english version
04:44 < niggler> ningu there are some french idiomatic expressions
04:44 < ningu> I dunno, "in consultation with" sounds weaker than that to me
04:45 < ningu> niggler: where?
04:45 < niggler> oh no i mean in general
04:45 < niggler> i don't know in this specific case
04:45 < ningu> well sure, every language has idiomatic expressions, I don't see how that's very relevant :)
04:45 < mikeal> we could walk to AK Press in Oakland and ask them 
04:45 < mikeal> :)
04:45 < niggler> lol
04:46 < ningu> nah I'd just get all 3 editions and compare them
04:46 < ningu> why go through a middleman
04:46 < mikeal> if anyone has those editions, they do :)
04:46 < ningu> oh, I thought you meant ask their opinion rather than ask for the books
04:47 < mikeal> could also ask their opinion, the editor of Anarchy's Cossack still works there, as far as i know
04:47 < mscdex> node.js rules!
04:47 < ningu> mscdex: is there a reason you periodically come in here to say that?
04:47 < ningu> not that I mind just wondering :)
04:47 < niggler> its a cron job
04:48 < mscdex> ningu: preaching to the non-choir in here
04:48 < mikeal> pretty sure it's a setInterval, this being #nodejs and all
04:48 < niggler> mscdex is a unix hacker at heart
04:49 < mscdex> no setInterval or setTimeout, just pure, raw emotion when it bubbles up
04:49 < niggler> mscdex actually you come at a good time.  are you familiar with any pure-JS zip libraries?
04:50 < niggler> i was using jszip but it seems to choke on big (say, 1M+) zip files
04:50 < mscdex> no, sorry
04:50 < mscdex> there are several though
04:51 < mscdex> why pure-js though? no node zlib module usage?
04:51 < ningu> mikeal: so nginx is one of the pieces of infrastructure we don't need?
04:52 < Tux> I'm still a bit confused but I think I understand node's want for callbacks now.
04:52 < niggler> mscdex for http://niggler.github.com/js-xlsx/ (currently using jszip but zip.js also chokes on 12M sheets -- roughly 1M cells)
04:56 < Tux> I think I'll have a great time with node.js for my project ;)
04:57 < mscdex> niggler: are you wanting to compress or decompress zip files?
04:57 < niggler> at the end of the day, both
04:57 < niggler> initially just decompress
04:57 < niggler> XLSX and, more generally, OPC files are zip files
04:58 < mscdex> niggler: have you tried this one for unpacking?: https://github.com/augustl/js-unzip
04:59 < niggler> i have not mscdex one sec
05:01 < dileep_> how to call one mongose model in multiple databases dynamically
05:07 < niggler> mscdex that seems to have issues with the .rels folders in the OPC zips
05:09 < mikeal> ningu: yes
05:10 < ningu> mikeal: what about things like site-wide static file serving or gzip?
05:11 < mikeal> both just as easy and fast to do in node than in nginx
05:11 < mikeal> the difference between the two not being large enough to justify additional infrastructure
05:13 < ningu> what if I have a legacy site with ssi and cgi? this is not a hypothetical question ;)
05:13 < mikeal> legacy is legacy
05:13 < mikeal> you scale down to the least common denominator 
05:13 < ningu> well, I'm using nginx which is capable of doing the legacy stuff and also passing back to upstream node servers
05:14 < ningu> it's a very thin layer really
05:14 < mikeal> it may seem thin now
05:14 < mikeal> but once you get used to managing node processes and deploying them it'll seem heavy
05:15 < ningu> mikeal: everything will be on one machine for the foreseeable future
05:16 < dileep_> how to call one mongose model in multiple databases dynamically
05:16 < JamesMGreene> So with Streams (0.8.10 & 0.10.x), does `pipe` literally just add listeners to all events without them (in both A and B) and then emit the same event from A to B?
05:16 < JamesMGreene> i.e. any listener I add will take precedence and not be overridden (e.g. so I can filter the `.on('data', ...)`?
05:18 < mikeal> JamesMGreene: its more complicated than that
05:19 < mikeal> its best not to try and figure out the implementation
05:19 < mikeal> just pick the new or old API and run with it
05:19 < mikeal> 0.10 supports the old API effectively
05:19 < JamesMGreene> mikeal: Well I'm really just hoping to see a basic example of a file ReadStream being filtered and piping to a file WriteStream
05:20 < mikeal> just piped is fs.createReadStream(path).pipe(fs.createWriteStream(outpath))
05:20 < JamesMGreene> I'm thinking all I have to do is just add an event listener for 'data' to A and then emit the filtered data, then `pipe` takes care of the rest
05:20 < JamesMGreene> mikeal: Yes but how do I _filter_ it?
05:20 < mikeal> the new api would prefer calling .read()
05:20 < JamesMGreene> And the old?
05:21 < mikeal> the old you would listen for "data" and then .write() the filtered data
05:21 < deoxxa> JamesMGreene: http://nodejs.org/docs/latest/api/all.html#all_class_stream_transform has you covered
05:21 < mikeal> but you've also gotta sit on all the pause/resume logic
05:21 < mikeal> best thing to do, honestly, is use someones' filter stream
05:22 < lethalduck> anyone used stylus and less?
05:22 < mikeal> lethalduck: might want to checkout rework
05:22 < mikeal> its basically a library for building something like stylus and less, but you can turn on the features you need and add them easily
05:22 < JamesMGreene> mikeal: So like https://github.com/dominictarr/through?
05:23 < mikeal> that's a good one
05:24 < JamesMGreene> OK, I'll consider using that when I rewrite that method. Thanks!
05:25 < mikeal> np
05:25 < lethalduck> Thanks mikeal
05:26 < mikeal> no problem
05:26 < mikeal> we're using it now, it's pretty great
05:26 < ningu> just watched substack's talk... I think my brain is a bit overloaded ;) cool stuff though.
05:26 < mikeal> we also auto-validate all the output with csslint
05:26 < ningu> given how fast he talked it actually was pretty easy to understand but would have to think more to write it myself.
05:26 < mikeal> ningu: it was pretty nuts :)
05:27 < polotek> mikeal: how do you recommend testing api modules that use request?
05:27 < mikeal> you mean like you need to mock it out
05:27 < lethalduck> mikeal: no new language?
05:28 < mikeal> polotek: i haven't done this myself but i know other people have used the httpModule option to pass in a mock http core client, eran hammer wrote a prtetty good one
05:29 < polotek> that's lame. I wanna just mock request itself
05:29 < mikeal> lethalduck: nah, css syntax is fine, it's all the damn prefixes and the lack of variables that get in the way
05:29 < mikeal> mocking request takes longer than mocking core and passing it to request
05:29 < mikeal> also, request is likely to change and add api more often than core
05:29 < lethalduck> mikeal: yes.
05:29 < lethalduck> So how does rework overcome that?
05:30 < mikeal> did you read the docs?
05:30 < lethalduck> I'm pretty new to using css solidly.
05:30 < lethalduck> reading
05:30 < mikeal> https://github.com/visionmedia/rework
05:30 < bvalosek> Anybody use a library to emulate classical-style inheritance at all? Or do most stick with native prototype-style ?
05:30 < lethalduck> yip
05:30 < mikeal> rework is a processor
05:31 < polotek> mocking request does not take longer. it's just a function
05:31 < mikeal> the plugins add syntax features to the input file, which we'll assume is css unless a feature is present to support a new dsl
05:31 < polotek> I don't want it to do anything
05:31 < JamesMGreene> If a stream emits 'error' it will still also emit 'end', right?
05:31 < mikeal> polotek: haha, you're joking right :)
05:31 < polotek> I just want to check what gets passed into it by my module
05:31 < mikeal> request is way more than a function
05:31 < polotek> you're misunderstand what I mean by mock
05:31 < mikeal> if you're not using any of the streaming then it would be easier to mock
05:31 < polotek> my module uses request
05:31 < polotek> I want to write unit tests for my module
05:32 < polotek> so I want to punch out request and have it do what I want
05:32 < polotek> instead of what it normally does
05:32 < mikeal> yeah, i'm saying, its probably easier to replace request with request.defaults({httpModule: new Mock()}})
05:33 < polotek> what do you mean by "easier"?
05:33 < mikeal> 1) there is already a library written to mock it
05:34 < mikeal> 2) the api surface of core http is smaller than request
05:34 < polotek> I do not care about the api surface of request
05:34 < JamesMGreene> Is it a bug that Buffer.toJSON serializes the whole Buffer instead of just the filled portion?
05:35 < polotek> I want to test the input to request
05:35 < polotek> that is coming from my module
05:36 < mikeal> oh i see
05:36 < howdynihao> check out npmjs.org/intercept.js
05:36 < JamesMGreene> Question #1: If a stream emits 'error' it will still also emit 'end', right?
05:36 < JamesMGreene> Question #2: Is it a bug that Buffer.toJSON serializes the whole Buffer instead of just the filled portion?
05:37 < mikeal> JamesMGreene: nope, cause it's that size no matter what, even if you write it
05:37 < JamesMGreene> That's super not useful, IMHO :(
05:38 < mikeal> Buffers are not strings
05:38 < mikeal> its best not to think of them like strings
05:38 < JamesMGreene> buffer max size = 40960, buffer.length = 4, JSON.stringify(buffer) = blaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
05:38 < mikeal> and empty buffer of 50 length is still 50 bytes long
05:38 < JamesMGreene> I know, I just find it odd that they have a `.toJSON` method for serializing them that doesn't take the `.length` into account
05:40 < JamesMGreene> mikeal: How about Question #1?
05:41 < mikeal> no
05:42 < mikeal> it will not emit end
05:42 < mikeal> streams are guaranteed to emit *either* error or end
05:44 < JamesMGreene> k, thx
05:46 < deoxxa> mikeal: JamesMGreene is talking about something a little different
05:46 < JamesMGreene> mikeal: Though, if it is a file stream (`fs.createReadStream`), I'd assume that it WILL still emit 'close' post-'error'?
05:46 < deoxxa> JamesMGreene: i've observed that behaviour before as well, the buffer stuff
05:47 < deoxxa> i think it has something to do with the difference between Buffer and SlowBuffer and how it's allocated (via c++ or js)
05:47 < mikeal> probably, but relying on "close" is not universal across streams
05:47 < deoxxa> but i never dug too far into it
05:47 < mikeal> actually, no, don't assume close will be called after error
05:47 < mikeal> cause if the file handler errors on open then it won't be closed
05:47  * deoxxa nods
05:48 < JamesMGreene> true, good call
05:48 < deoxxa> "end" is misleadingly specific, it's literally "the end of the stream", or more accurately, "there is no more data"
05:49 < mikeal> it's "i'm done reading"
05:49 < mikeal> many streams don't scope to a file handler that will be closed
05:49 < mikeal> so don't rely on close
05:49 < deoxxa> yeah
05:49 < deoxxa> mikeal: "*successfully done reading" is maybe a better way to describe it?
05:50 < deoxxa> like "i successfully reached a point of completion"
05:51 < sinclair|work> deoxxa: you do a bit of C# right?
05:51 < deoxxa> luckily no!
05:51 < deoxxa> :P
05:51 < deoxxa> all js all day for me
05:51 < mikeal> deoxxa: you could put it that way
05:51 < mikeal> once end is called error should not be called
05:52 < mikeal> so you can assume "success"
05:52 < deoxxa> i do some C stuff, sinclair|work, maybe that's what you're thinking of
05:52 < mikeal> but often success might be defined by a stream that stream is piped to
05:52 < mikeal> take HTTP, a tcp stream is piped to an http parser, the tcp stream could be closed cleanly and "end" is emitted
05:52 < mikeal> but if it's in the middle of a parse the parser is going to emit "error"
05:54 < sinclair|work> i have been deep diving into .NET async / await stuff
05:54 < sinclair|work> anyone used that at all?
05:54 < mikeal> i've looked, haven't spent serious time with it
05:54 < sinclair|work> it is comparable to what people are doing in node
05:54 < sinclair|work> im actually surprised how powerful it seems to be
05:55 < mikeal> as well done as it is, it still lacks an ecosystem 
05:55 < sinclair|work> the whole thing about node is the event loop, which runs on a single thread
05:55 < mikeal> the whole thing about node is that there are 25K+ modules that use that event loop and are compatible with each other
05:56 < mikeal> node core isn't much
05:56 < sinclair|work> well, async await does that, and also magically handles simple parallelism, and a few other things, including spawning new threads and handling context switches and stuff
05:56 < mikeal> its small and does files and sockets and http well enough
05:56 < sinclair|work> mikeal: yeah, node has that going for it
05:56 < mikeal> sure, features are great, but a community is better :)
05:57 < sinclair|work> mikeal: still, i would take the .NET BCL over the many half baked npm packages out there
05:57 < mikeal> most of what can be done is node is what you can do by leveraging what's been created in the ecosystem
05:57 < sinclair|work> mikeal: sure, but it can get quite painful
05:58 < mikeal> .NET ships with a *ton* of great stuff, but that's where it ends, there's not a big community publishing and contributing value that you can use
05:58 < sinclair|work> mikeal: what kinds of things are you referring to?
05:58 < sinclair|work> mikeal: there is a community of .net heads, and they do produce amazing software
05:58 < mikeal> the ratio of "half baked" packages to ones you would use is the same in node as in any other platform, the difference then can be quantified in volume
05:59 < mikeal> software, sure, modules you can install and use and contribute to when there is a bug, hell no
05:59 < sinclair|work> mikeal: well, define contributing 
05:59 < mikeal> send a pull request on GitHub :)
05:59 < sinclair|work> mikeal: plenty of .net projects on github, codeplex and google code
06:00 < niggler> lol .NET sucks
06:00 < lorddelta> wait what lol, talking about .NET in node.js?
06:00 < sinclair|work> anyway, im not really here to talk about .net vs js
06:00 < mikeal> https://github.com/WindowsAzure
06:00 < mikeal> there's more node modules there than .NET :)
06:00 < lorddelta> Did I miss some major remarketing strategy of Microsoft?
06:00 < lorddelta> ah lol
06:00 < sinclair|work> im here to talk about .net's async/await stuff
06:00 < niggler> microsoft is trying to capture the AWS space
06:01 < lorddelta> Not that I have anything against .NET persay (as long as it works, isn't a hassle, and doesn't have me install 5 Gigs of crup just to get it to work)
06:01 < mikeal> i'll take Azure seriously when they figure out how to update the SSL certificate on time and an entire coast doesn't go down because of it
06:01 < sinclair|work> niggler: are they?
06:01 < niggler> yeah sinclair|work their azure offering has a heroku-like thing and an AWS-like thing
06:01 < niggler> *running VMs, custom marketplace, etc
06:02 < sinclair|work> niggler: azure is pretty good tho, and has gone from strength to strength over the past 12 months
06:02 < niggler> I'm not knocking on azure
06:02 < niggler> i love it
06:02 < niggler> but I'm saying that its pretty clear that they are going after Amazon's monopoly in the space
06:02 < mikeal> sinclair|work: all of azure west went down last month because they forgot to update the SSL certificates
06:02 < sinclair|work> niggler: i think the perception is that AWS is still cheaper
06:02 < niggler> bizspark
06:02 < mikeal> that's not "pretty good" that's, "just figuring your shit out"
06:02 < sinclair|work> mikeal: haha, yeah, i got a email telling me
06:02  * sinclair|work signs up to Azure
06:03 < sinclair|work> anyway, was wondering what people thought about async/await in C#
06:03 < mikeal> most node people don't care too much about the technical superiority of a particular approach to IO
06:03 < sinclair|work> more so as a language construct, syntactic sugar, and in comparison to node
06:04 < mikeal> the community is at the point where people are just building shit
06:04 < mikeal> i have very long opinions about syntactic sugar for async io and why it's a bad idea
06:04 < mikeal> unless you're willing to go as far as erlang does to ensure that share state mutations are impossible
06:04 < sinclair|work> mikeal: that's fine and all, but things there were impractical in the past, are now practical
06:05 < mikeal> you need good visual indicators that things in the future look like they happen in the future
06:05 < mikeal> otherwise its leaky
06:05 < mikeal> you can't hide semantics with syntax when you need to understand the semantics in order to write code effectively
06:06 < sinclair|work> mikeal: hmm, tbh, im still quite confused as to how .net works doing the single threaded event loop asynchrony thing
06:06 < sinclair|work> mikeal: yes, i agree, and to be honest, there is a lot of magic going on in the C# compiler i fine a little scary
06:07 < mikeal> my opinion is that shit like this is way too complicated
06:07 < mikeal> http://i.msdn.microsoft.com/dynimg/IC612215.png
06:07 < sinclair|work> mikeal: scary, as in, its hard to know if i am doing it right
06:07 < deoxxa> https://github.com/WindowsAzure/azure-sdk-for-node/blob/master/lib/diagnostics/logger.js so microsoft
06:07 < mikeal> and that a visual indicator like a callback is much simpler to understand
06:08 < sinclair|work> mikeal: yes, it is read in a synchronous fashion
06:08 < mikeal> see, that's a misstake
06:08 < deoxxa> i love it when code doesn't do what it looks like it does
06:08 < mikeal> it should be clear is something is happening now or in the future
06:08 < sinclair|work> mikeal: however, it has a lot of behavior you wouldn't necessarily expect
06:09 < deoxxa> it makes things really easy to understand
06:09 < sinclair|work> mikeal: let me show you something
06:09 < mikeal> unless you can insure that I truly never have to care, like erlang does
06:10 < sinclair|work> mikeal: see this -> http://pastebin.com/N1KjtzJ2
06:10 < mikeal> here's the problem
06:10 < mikeal> await is a deep continuation
06:10 < mikeal> so all that state gets yeiled
06:10 < mikeal> and the person who instantiated this object doesn't know it
06:11 < sinclair|work> mikeal: which object?
06:11 < mikeal> they thing they're writing sequential code 
06:11 < mikeal> er think
06:11 < sinclair|work> mikeal: sure, again, behind the scene, there is a compiler aided state machine taking care of things
06:11 < mikeal> yeah yeah, fancy fancy
06:11 < mikeal> here's the thing
06:11 < mikeal> i write some code that uses this object
06:12 < mikeal> it looks like it just gets insantiated and moves on, but it doesn't
06:12 < mikeal> turns out, state can change between the line i instantiate this and the line below it
06:12 < mikeal> even worse: combine this with getters
06:12 < sinclair|work> mikeal: not sure i follow
06:12 < mikeal> i access a property and state I thought i had a lock on can mutate
06:13 < sinclair|work> mikeal: did you see that code i posted?
06:13 < mikeal> yes
06:13 < sinclair|work> it would be a good talking point
06:13 < sinclair|work> mikeal: also, i have no idea how it is doing what it is doing
06:14 < mikeal> that's also a problem :)
06:14 < sinclair|work> it spawns 2 event loop like things, running on the same thread
06:14 < sinclair|work> it isn't multithreaded
06:14 < mikeal> if you're playing with async IO, you're writing servers
06:14 < sinclair|work> so, locking isn't an issue
06:14 < mikeal> you can't not undestand how concurrency works if you're writing servers
06:15 < mikeal> you missundertand "lock"
06:15 < sinclair|work> mikeal: i do write servers tho
06:15 < mikeal> not a vm lock
06:15 < mikeal> check this out
06:15 < mikeal> var somemodule = require('module')
06:15 < sinclair|work> im using the .net language keywork used to serialize access on a object
06:15 < sinclair|work> *using / referring to
06:16 < mikeal> fs.readFile(path, function (err, data) { fs.writeFile(path, somemodule.data + data) })
06:16 < mikeal> now
06:16 < mikeal> between starts thing readFile and doing the writeFile, somemodule.data can change :)
06:16 < dileep_> how to call multiple databases from one port  dynamically in mongodb ???
06:16 < sinclair|work> sure
06:16 < mikeal> ok
06:17 < mikeal> but, between
06:17 < mikeal> var x = obj.asdf
06:17 < mikeal> fs.writeFile(path, somemodule.data)
06:17 < mikeal> somemodule.data can't mutate between getting that property and calling that write
06:17 < mikeal> but, in your .NET thing
06:18 < mikeal> obj.asdf property access could ivoke some yielded continuation 
06:18 < sinclair|work> mikeal: not sure i follow
06:18 < mikeal> and, without knowing it, fs.writeFile would happen after a few cycles of the event loop giving plenty of changes for that share module state to mutate
06:19 < lethalduck> mikeal: not much documentation on rework.
06:19 < sinclair|work> mikeal: i understand and appreciate the mutations that can happen while waiting for things to happen
06:20 < mikeal> my point is, state mutations need to be understood by the developer
06:20 < mikeal> so you can't hide them behind syntax that "looks" sequential
06:20 < sinclair|work> mikeal: unless they are completely mitigated by tricks on the state machine
06:21 < sinclair|work> mikeal: you raise a good point, i do not know the answer 
06:21 < mikeal> unless you're going to go full erlang, and serialze all the state on every continuation and ensure that state mutations can never happen
06:21 < sinclair|work> mikeal: i have read that is what happens
06:21 < mikeal> .NET doesn't do the serialization that erlang does
06:21 < sinclair|work> mikeal: but, i do not know what that means for .net object referencing
06:22 < sinclair|work> it is definitely worth doing some tests on
06:22 < mikeal> and, to be honest, it's not the most efficient route, it's a strategy that pushes safety above all else
06:22 < mikeal> but safety at the cost of performance for sure
06:22 < mikeal> serialization is not free, never will be
06:22 < sinclair|work> of course not
06:23 < ningu> what about cerealization?
06:23 < deoxxa> it's pretty cheap in chakra
06:23 < mikeal> cereal makes you fat
06:23 < deoxxa> (apparently!)
06:23 < mikeal> i code paleo :)
06:23 < RLa> erlang has cyclic data structures?
06:23 < sinclair|work> anyway, the fact i do not entirely understand how that code example i posted works says something about async/await
06:24 < mikeal> erlang is like programming in a strait jacket. not easy but it keeps you from hurting yourself.
06:24 < sinclair|work> as i wrote it myself, but the compiler is doing back flips to produce the behavior it is
06:24 < mikeal> sinclair|work: haha, good point :)
06:25 < sinclair|work> mikeal: in saying that tho, the async/await stuff could prove a powerful tech in the right hands, more so that it makes asynchrony in .net a breeze (a practical one)
06:31 < lorddelta> sorry not paying lots of attention, but how does this relate to .NET again?
06:32 < sinclair|work> lorddelta: how does what?
06:53 < sinclair|work> mikeal: anyway, maybe you have some thoughts on ... http://pastebin.com/DUU6Qxhx
07:43 < lorddelta> sin: I dont' think you are there any more, just confused why it was being brough up
07:43 < mstrcnvs> Coming from a python scene how can I reproduce "from mongoose import Schema, X, Y" in nodejs?
07:43 < lorddelta> .NET and node js are nothing alike, not useful to compare them really unless its for experience...
07:44 < deoxxa> mstrcnvs: var mongoose = require("mongoose"), Schema = mongoose.Schema, X = mongoose.X, Y = mongoose.Y;
07:44 <@Nexxy> JamesMGreene, ?
07:46 < mstrcnvs> deoxxa: thank you :)
07:46 < andrew12> mstrcnvs: if you don't like that syntax (like me) you may want to check out coffeescript, coco, or livescript
07:47 < mstrcnvs> andrew12: is not really DRY, but I'll keep with it, thank you too
07:47 < lorddelta> mstrcnvs: DRY principle from CS? or just a coding style?
07:48 < mstrcnvs> lorddelta: principle
07:49 < deoxxa> mstrcnvs: you could shorten "mongoose" to "m" if you have carpal tunnel syndrome or a rental keyboard where you pay by the character
07:49 <@Nexxy> http://lucumr.pocoo.org/2011/12/22/implicit-scoping-in-coffeescript/
07:50 < lorddelta> I wonder is there a HARD principle to?
07:50 < lorddelta> too*
07:51 < lorddelta> And what does this say about the beauty of code, if its all HARD and DRY >_>
07:51 < lorddelta> Needs more moisteurizer? :P
07:52 < mstrcnvs> deoxxa: I'll keep with the explicit way: mongoose.Schema
07:52 < lorddelta> npm install moisteurizer <_<
07:53 < deoxxa> lorddelta: eek, sounds like when you spend too long at the beach in summer
07:53 < lorddelta> moisteurizer.squirt('mstrcnvs')
07:53 < lorddelta> deoxxa: indeed
07:53 < andrew12> moistuerizer.squirt \mstrcnvs 
07:53 < ningu> just ported my app from socket.io to shoe + dnode. shockingly, everything seems to work.
07:54 < lorddelta> ningu: wow do your tests all pass?
07:54 < deoxxa> ningu: what do you think of the https://github.com/deoxxa/pillion api, being familiar with dnode?
07:55 < deoxxa> (i mean, since you are familiar with the dnode api, what do you think of pillion's?)
07:55 < andrew12> what is shoe
07:55 < deoxxa> (that was a terribly-constructed sentence)
07:58 < deoxxa> ningu: of particular note is the brevity of implementation - https://github.com/deoxxa/pillion/blob/master/index.js
07:59 <@Nexxy> deoxxa, needs moar logo
07:59 < deoxxa> Nexxy: i'm a terrible artist :(
08:00 <@Nexxy> the module's purpose is also a bit opaque w/o investing effort
08:00 < deoxxa> Nexxy: hrm yeah the github tagline thing is a bit cryptic
08:01 < deoxxa> Nexxy: or do you mean just in general?
08:01 < ningu> deoxxa: haven't looked at it yet, will take a look
08:01 < ningu> lorddelta: no tests, it's a small app and the socket part is just an addon really
08:01 <@Nexxy> deoxxa, mainly the description
08:02 <@Nexxy> deoxxa, (the thing @ the top below the repo name)
08:02 < deoxxa> yeah, i should change that
08:03 < deoxxa> but burros are awfully cute :(
08:03 < deoxxa> http://horsestr.webs.com/burro.jpg just look at the little guy
08:04 <@Nexxy> yep that's a burro alright
08:04 < deoxxa> lol
08:05 < deoxxa> http://www.picslap.com/sites/default/files/field/image/pigeon.jpg << is this you, Nexxy
08:12 < ningu> deoxxa: it looks very similar to dnode, not sure really why I'd pick one
08:12 < ningu> but I don't really understand burro
08:13 < ningu> also I'd want to use it with an express server
08:13 < ningu> but shoe can install itself on an express server so that's no problem I guess
08:14 < deoxxa> i think you could use pillion on top of shoe, as long as shoe provides a .write(object) method and emits objects back out
08:15 < ningu> the other question would be using it from the browser
08:15 < deoxxa> burro is basically just great for make-your-sockets-smarter stuff
08:15 < deoxxa> well yeah, i'm not sure streams2 works in the browser yet
08:15 < deoxxa> but someone will sort that out in the near future, i'm guessing
08:15 < ningu> browserify is somewhat magic to me
08:15 < ningu> I want to look into how it does it
08:15 < ningu> or maybe I don't...
08:16 < deoxxa> it's actually kind of sane
08:16 < deoxxa> surprisingly enough, for something that seems so magical
08:16 < deoxxa> it does a few things
08:17 < ningu> hehe it reimplements process.nextTick
08:17 < deoxxa> it provides its own require() that works in the browser (which is a simpler version, as far as i know)
08:17 < deoxxa> it makes sure stuff is minified in the correct order
08:18 < deoxxa> and the important bit is that it automatically works out dependencies by parsing the javascript and looking for require() calls
08:18 < ningu> well yes
08:18 < ningu> that I understand at least in principle
08:18 < deoxxa> the workings of it are... interesting... but straightforward
08:18 < ningu> what I don't understand is how some of the core node api can actually be implemented to work in a browser
08:18 < deoxxa> oh
08:18 < deoxxa> ha
08:18 < deoxxa> yeah
08:19 < deoxxa> well... there are various definitions of "work"
08:20 < yawnt> hey deoxxa 
08:49 < Kosch> jan____: have a sec?
09:03 < pats_Toms> hi, is there any way to make routes for subdomains?
09:04 < ningu> pats_Toms: well sure, but it wouldn't be built in to express
09:04 < deoxxa1> pats_Toms: sure, but first you have to write a whole bunch of code so handle the concepts of "routes" and "subdomains"
09:05 < pats_Toms> ok, any idea where to start?
09:05 < ningu> you could look at https://github.com/substack/bouncy
09:05 < deoxxa1> pats_Toms: ok, subtlety is lost on you. that's cool. what i was trying to point out is that you're using a framework of some kind and you haven't mentioned what framework it is. mention it.
09:06 < pats_Toms> I am using express
09:06 < deoxxa1> there we go!
09:07 < deoxxa1> pats_Toms: have you tried googling "express route subdomain"
09:07 < deoxxa1> i'm seeing a bunch of quality results right on the first page
09:07 < pats_Toms> before some time I got this... https://github.com/tblobaum/express-subdomains
09:08 < pats_Toms> but didn't get it working
09:08 < Kosch> npm question: lets say I've got installed a module. I noticed inside the module directory all deps are installed too. so one of the deps I need to change. Whats the usual workflow? Install the changed dep without -g option and then overwrite the specific directory of the dependency?
09:09 < ningu> Kosch: what do you mean "one of the deps I need to change"?
09:09 < ningu> update to a newer version? or what?
09:09 < Kosch> ningu: yes, I've a local modified version of it
09:09 < ningu> oh, you might look at npm link
09:09 < SomeoneWeird> https://npmjs.org/package/express-vhost
09:10 < Kosch> ningu: e.g. I need to change stuff in fleet/node_module/propagit
09:10 < ningu> Kosch: I generally try to patch modules rather than modify them though
09:10 < pats_Toms> SomeoneWeird, looks nice
09:10 < Kosch> ningu: ok, will have a look at link
09:11 < lethalduck> mikeal: Would I be correct in assuming that rework is going to kind of act as an abstraction for the likes of sass, less, stylus?
09:12 < lethalduck> That they will be used as plugins?
09:12 < lethalduck> for rework that is?
09:13 < lethalduck> Anyone else have any thoughts on rework?
09:35 < pats_Toms> https://github.com/tblobaum/express-subdomains works nice
09:35 < Kosch> ningu: works, thx.
09:36 < pats_Toms> thanks everyone 
09:48 < faceleg> ningu: 
09:48 < faceleg> do I need to memcpy a const char*?
09:48 < ningu> it all depends on when it will be deallocated
09:48 < ningu> if you don't know, then yes
09:56 < faceleg> YES
09:57 < ningu> ?
09:57 < faceleg> is std::string string = (some const char*) the same ?
09:57 < ningu> the same as what?
09:57 < ningu> I would do std::string string(foo);
09:57 < faceleg> as memcpy dat bad boy
09:58 < ningu> oh, yes, I think so
09:58 < ningu> it's not "the same" but it should do what you want
09:58 < faceleg> mmm ok
09:58 < deoxxa> faceleg: pretty sure there's a operator=(const char*)
09:58 < ningu> it will be destroyed when it goes out of scope
09:58 < ningu> yeah, there should be
09:58 < faceleg> oh
09:58 < ningu> that's why I said "I would do" rather than "you must do" :P
09:58 < faceleg> I need it to not be destroyed 
09:58 < faceleg> so memcpy I guess
09:59 < ningu> faceleg: well you shouldn't just randomly allocate and never free stuff, but ...
09:59 < ningu> I dunno what you're trying to do
09:59 < agu10^> What do you think is better? Stanford or MIT ?
09:59 < faceleg> get some const char on thread A
09:59 < faceleg> and send it to JS on thread B
09:59 < ningu> I've never done any thread stuff in C so I dunno
10:00 < faceleg> MIT is better in that it has less characters in its name
10:00 < faceleg> and therefore saves resources
10:00 < ningu> I mean, how you handle free'ing stuff in that context -- obviously you could free it from thread B but js needs to use it first
10:00 < faceleg> I have no idea how it is freed
10:00 < ningu> well V8 must have addressed this question somehow or other
10:00 < faceleg> it is wrapped up in a node/v8 object and never seen again
10:00 < faceleg> yeah
10:01 < faceleg> I think when it goes out of JS scope it is thrown away
10:01 < ningu> if V8 copies it too then you'd free your copy  of it and let it handles its
10:01 < faceleg> but I have no idea if that is true
10:01 < ningu> but I dunno how V8 does anything
10:01 < ningu> deoxxa sounds like he has more of a clue
10:01 < faceleg> yes
10:01 < yawnt> e
10:02 < deoxxa> eeeeeeeeeeee
10:02 < ningu> pi
10:02 < faceleg> eeeeeeeeeeeeeeeeeeeeeeeee
10:02 < ningu> IEEE
10:03 < faceleg> AIIIIIIIIIIEEEEE
10:03 < ningu> huh, there's an IEEE MAN standard... I didn't even know MAN was a thing
10:03 < deoxxa> faceleg: see http://www.cplusplus.com/reference/string/string/operator=/
10:03 < ningu> deoxxa: what about the allocation/deallocation and passing to V8 business?
10:04 < deoxxa> nooooooooo idea
10:04 < ningu> deoxxa: hopefully what I said above doesn't sound crazy tho
10:04 < deoxxa> little known fact: the "v" in v8 stands for "voodoo"
10:04 < ningu> I just don't know what the right way is
10:04 < deoxxa> and the "8" just means "8 times"
10:04 < faceleg> deoxxa: +1 million
10:05 < faceleg> deoxxa: well that looks magic
10:05 < faceleg> thanks
10:05 < deoxxa> :>
10:05 < ningu> C++ overloaded operators do look magic
10:05 < ningu> that's kind of the problem
10:05 < deoxxa> they're super (crazy)
10:05 < faceleg> templates are the problem
10:05 < faceleg> it's the only craziness I hadn't seen before
10:06 < faceleg> also malloc etc
10:06 < ningu> I wonder how Java gets by without templates... it doesn't have them right?
10:06 < faceleg> no
10:06 < ningu> I guess via interfaces
10:06 < faceleg> I guess
10:06 < ningu> but those still have to be done case by case
10:06 < faceleg> not knowing anything about templates, I cannot converse with you about them
10:07 < ningu> well templates only really make sense in a strongly typed language, which Java is
10:07 < faceleg> aw 
10:07 < faceleg> so we won't be getting them in js?
10:08 < deoxxa> faceleg: v8 does it for you*
10:08 < deoxxa> (*sometimes)
10:08 < deoxxa> (*probably)
10:08 < faceleg> deoxxa: (*it hasn't segfaulted on that line yet)
10:08 < ningu> obv8s the need to do it yourself
10:08 < faceleg> oh, ha, ha. ha.
10:09 < deoxxa> ningu: oh my god.
10:09 < deoxxa> you're
10:09 < deoxxa> ugh
10:09  * deoxxa sighs
10:09  * deoxxa claps
10:09 < ningu> deoxxa: you haven't heard my dog breed joke 
10:09 < deoxxa> ok, hit me
10:09 < faceleg> do it
10:10  * deoxxa prepares
10:10 < ningu> you know a programmer by his dog. the C programmer prefers pointers; the OOP programmer prefers setters.
10:10 < faceleg> oh right I heard that
10:10 < nududu> hi
10:10 < faceleg> last time I didn't realise it was a joke
10:10 < ningu> haha
10:10 < ningu> well it is pretty stupid
10:11 < nududu> hi
10:11 < deoxxa> oh
10:11 < deoxxa> lol
10:11 < nududu> so dummy
10:11 < ningu> nududu: my joke, not you
10:12 < ningu> if a C programmer had a pointer as a pet he would try to dereference him
10:13 < deoxxa> my favourite is
10:13 < deoxxa> "what's blue and smells like red paint"
10:13 < faceleg> ugh
10:13 < deoxxa> "blue paint"
10:13 < faceleg> how do you tell which end of a worm is the head
10:13 < deoxxa> so bad, but it makes me giggle every time
10:13 < faceleg> tickle the middle and see which end laughs
10:14 < deoxxa> lol
10:14 < ningu> what's huge, green and swims in the ocean?
10:14 < ningu> moby grape
10:14 < faceleg> what do you do with a blue monster
10:14 < faceleg> try to cheer him up
10:14 < ningu> that's from the late 60s, I think you had to be on acid to laugh
10:15 < ningu> how do you catch a unique rabbit?
10:15 < ningu> unique up on him
10:15 < faceleg> why couldn't the leopard escape from the zoo?
10:15 < faceleg> he was always spotted
10:16 < ningu> you can't change the spots on an old dog
10:18 < maasan> is there node js library maintaining send request and maintain session with third party server?
10:18 < deoxxa> maasan: check out "request" or "superagent"
10:18 < ningu> maasan: are you building an app? or do you want to do an http request?
10:19 < deoxxa> that's a good question
10:20 < ningu> hmm superagent looks nice. so far I've only used request.
10:20 < maasan> ningu:  Yes we are builiding an app which needs to communicate with other server(Govt) to fetch and store information. They does not provide API Token method. They only have an session based connection. I want to connect to the server and maintain the session with the server
10:20 < ningu> looks about the same though
10:21 < ningu> maasan: ok, then the modules deoxxa mentioned should work
10:21 < maasan> ningu: We are using that only. We have to maintain session also
10:21 < ningu> I don't know if they track cookies, though... I think request does
10:22 < deoxxa> request definitely does
10:22 < maasan> ningu: Unfortunately, the Govt server takes 6 minutes to login. 
10:22 < deoxxa> pretty sure superagent will do it automatically too
10:23 < maasan> deoxxa: If i login to server using super agent, then will cookies be maintained?
10:25 < deoxxa> maasan: as long as the object remains alive, sure
10:25 < deoxxa> maasan: if you stop and restart the application or whatever, no
10:25 < deoxxa> also, lol, 6 minutes to log in?
10:25 < deoxxa> that's scary
10:26 < maasan> yes :(
10:26 < nathan7> 'moin, deoxxa 
10:26 < deoxxa> sup nathan7
10:26 < nathan7> my hair being a pain to dry
10:27 < nathan7> I have annoyingly thick hair, and as it's getting longer drying it in a reasonable timeframe is becoming more and more of an annoyance
10:27 < nathan7> deoxxa: What's happening in upside down land?
10:28 < deoxxa> nathan7: you have strange problems
10:29 < deoxxa> nathan7: all's well down here! looking forward to colder weather, moving house in a couple of weeks, work is going swimmingly and i'm in love with an awesome girl
10:29 < deoxxa> so all in all, can't complain
10:32 < nathan7> deoxxa: Heh.
10:32 < nathan7> The best I can come up with when people ask me what's up is "I'm alive"
10:32 < deoxxa> lol
10:32 < deoxxa> on the negative side, i have a headache :/
10:33 < nathan7> eat a pill, resume life
10:33 < faceleg> codeine
10:33 < faceleg> ftw
10:35 < MI6> joyent/node: Mitar v0.10 * e5b90a1 : querystring: Removing unnecessary binding  Binding of `http_parser` in qu - http://git.io/W4yAew
10:48 < geoous> anyone already worked with twitter api?
10:48 < zenetik> mscdex: ping ? :)
10:48 < Andy-> geoous: That's a rather broad question
10:48 < Andy-> I think most developers have worked withe the API
10:48 < Andy-> with*
10:49 < geoous> I'm trying to receive tweets from a hashtag, but i didn't find anything related to javascript
10:55 < alexwhitman> geoous, https://github.com/ttezel/twit/
10:59 < milani> Why does JSON.parse('{"type":"Î”set","msg":["\u000f",0,"frame",["\u0001",4]]}') fail?
11:01 < milani> oh I need to doubly escape unicode characters.
11:01 < jan____> Kosch: yea
11:02 < nathan7> milani: the "\u000f" is what it chokes on
11:02 < nathan7> ah
11:02 < nathan7> I missed that one too
11:13 < Kosch> jan____: ah, -> pm
11:32 < santacruz> hi... need some help with async
11:32 < ningu> doesn't everyone
11:33 < santacruz> please?
11:37 < santacruz> hi... need some help with async
11:49 < Acconut> Hi
11:49 < Acconut> The net module in v0.10 doesn't use streams2, does it?
11:49 < JohnMcLear> Anyone keep up to date on what's going on w/ Debby stable node package?
11:49 < JohnMcLear> Afaik apt still grabs you 0.6 on 12.04 ubuntu
11:49 < JohnMcLear> seems kinda crazy.
11:50 < nathan7> Acconut: Why wouldn't it?
11:51 < Acconut> The readable event wasn't emitted and the method read() wasn't found.
11:52 < Acconut> Ok sorry.
11:52 < Acconut> Installed wrong version.
11:52 < Acconut> :S
12:12  * JamesMGreene is very sad that "rimraf" keeps getting "ENOTEMPTY" errors on Windows :-/
12:32 < DaMorpheuS> i have some problems with riak-js can't get the indexing to work
12:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:33 < DaMorpheuS> my indexes work when i connect directly to riak but through the riakjs it won't work
12:33 < DaMorpheuS> any ideas
13:19 < andrea93> hotty shit http://www.youtube.com/watch?v=NvijX055h5M
13:20 < NuZZ> ^ wat
13:21 < NuZZ> ima just put this out there; having to work on php after being a coffeescriptfag for months, feels quite bad. SO MANY SEMICOLON ERRORS 
13:35 < Industrial> Are there any good replacements for google reader?
13:36 < context> industrial: i use reeder
13:38 < s2g> Industrial: feedly
13:40 < zdwolfe> I'm currently using nginx to proxy node instances and supervisor to restart failed instances. I stumbled upon learnboost/cluster which looks like it could be a better option than my current setup, but the module doesn't support node >.5.10.  Anyone have suggestions?
13:41 < context> zdwolfe: it was put into node itself
13:41 < context> zdwolfe: http://nodejs.org/api/cluster.html
13:42 < Industrial> s2g: how does feedly make money? sell all your browser history? it can access it all I see
13:43 < andrew12> heh
13:43 < niggler> they are aiming for an acquisition by google
13:43 < Industrial> but google is dropping reader? exactly because of that?
13:43 < zdwolfe> context: the learnboost/cluster module had things like auto restart, etc that I'd like to use
13:44 < zdwolfe> which to my understanding the node api cluster does not
13:44 < niggler> Industrial i have no clue what feedly's monetization strategy is
13:45 < niggler> but it should be noted that many a startup have no strategy, instead aiming for an acquisition by big G
13:45 < Industrial> niggler: they survive only on investors' money or something? kind of a long shot? :P
13:46 < Industrial> I'm starting a company besides my day job >_>
13:46 < niggler> there was another company whose name starts with an 'I' that was also a long shot
13:58 < context> zdwolfe: the docs have an example for how to restart...
14:12 < paul4> hello
14:13 < paul4> Looking for feedback on a minimal "promises" implementation that aims to interop with current callback style: https://gist.github.com/anonymous/3a06c18659a3bacf0398
14:13  * niggler slaps paul4 
14:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:19 < paul4> anyone home?
14:19 < andrew12> no
14:45 < NuZZ> i've a prablem. wrote an irc client but I need to change the virtual host (what I appear to be from) when i use net.connect() and tls.connect(). cant figure out how
14:47 < NuZZ> im seeing a lot of solutions for http servers, but not client connections
14:53 < paul4> can anyone give me some feedback on a very minimal promises implementation: https://gist.github.com/anonymous/4421563620c1cbbf5503
14:54 < paul4> it "abuses" adding methods to the callback function so you can use it in any old function that uses a callback
14:55 < basss> hello i'm new to nodejs, im using express and im trying to get the response size in kb, any idea how to do so ? 
14:57 < NuZZ> ah, localAddress with net.createConnection looks legit but I see nothing for TLS. :<
14:58 < pachet> basss: request size, or response size?
14:59 < basss> pachet: response size 
15:06 < akrs> Whare the risks/benefits of executing a child_process vs. running a separate cron job?
15:06 < NuZZ> ooh. looking at the nodejs commits for localAddress it appears it was added to tls but the api docs werent updated to reflect that
15:07 < sshaginyan> Guys I just installed nginx. I'm comparing nginx vs not using nginx and there is a huge speed difference. With nginx I get almost 10 times slower results then without nginx. All I'm doing is fs.readFile a 2 mb json file.
15:07 < pachet> basss: Buffer.byteLength(responseBody, 'utf8') / 1024
15:08 < sshaginyan> WOuld you like to see my configuration files?
15:10 < NuZZ> Are you trying to serve that file with nginx?
15:10 < sshaginyan> ys
15:10 < NuZZ> so, it doesnt touch node at all? or it does?
15:10 < sshaginyan> iIt does
15:10 < pachet> that's question #1
15:11 < pachet> for static files, why not set up nginx to do that
15:11 < sshaginyan> I does. Here is my server.js file
15:11 < sshaginyan> pachet: This is just a test.
15:11 < sshaginyan> pachet: It won't be a static file in the future
15:12 < NuZZ> hastebin it
15:12 < sshaginyan> k
15:12 < sshaginyan> http://hastebin.com/huvodohusa.coffee
15:12 < sshaginyan> It's sooo simple. Yet the nginx version is like 10 times slower.
15:13 < NuZZ> and what is nginx doing
15:14 < NuZZ> proxying to port 80 ?
15:14 < NuZZ> may wanna throw the nginx configs up too
15:14 < mrvisser> heh, weird, if I do "npm explore npm", NPM tells me that the NPM module isn't installed :P
15:15 < sshaginyan> NuZZ: Doing it now
15:16 < NuZZ> also when u say 10 times slower, are we talking 50ms or 500ms?
15:16 < sshaginyan> NuZZ: This is my config http://hastebin.com/fobosafixi.nginx
15:18 < sshaginyan> NuZZ: 973ms VS 27ms
15:18 < sshaginyan> very very slow
15:18 < NuZZ> it could be you need to set some kind of buffer size stuff in nginx's config. maybe check out the docs and see if it's throttling it
15:18 < sshaginyan> NuZZ: I've been trying to do this for hours.....
15:18 < sshaginyan> I can't find anything about it
15:18 < NuZZ> heh, crazeh
15:18 < sshaginyan> I understand it might be a buffer issue
15:18 < sshaginyan> please help me
15:19 < NuZZ> http://wiki.nginx.org/HttpCoreModule#limit_rate_after
15:20 < NuZZ> eh?
15:20 < NuZZ> if the default is 1meg then id test it with a 900kb json file
15:21 < sshaginyan> NuZZ: the default is 0
15:22 < NuZZ> yes it is :p
15:23 < kornnflake> what does func(lala || test) do? :D
15:24 < kornnflake> reading through a source code
15:24 < NuZZ> http://wiki.nginx.org/HttpCoreModule#client_body_buffer_size
15:24 < NuZZ> "write to temp file". not sure if relevant but sounds rather 900ms-esque
15:25 < howdynihao> kornflake: its passing in lala or test, if lala is not true, then test
15:28 < NuZZ> sleepy time, gl sshaginyan 
15:32 < mrvisser> err mmmmm, npm registry not in good shape?
15:33 < mrvisser> sha failures, SSL cert certificate failure :S
15:38 < skelterjohn> where can i get an old version (0.8) of nodejs?
15:41 < LuckyBurger> skelterjohn : http://nodejs.org/dist/
15:41 < LuckyBurger> you can get any branch there
15:41 < skelterjohn> thanks
15:42 < lrvick> npm ERR! 404 'fs' is not in the npm registry.
15:42 < lrvick> npm ERR! 404 You should bug the author to publish it
15:42 < lrvick> :(
15:45 < mrvisser> lrvick: yea I had some trouble w/ NPM briefly
15:45 < mrvisser> back to normal for me though
15:46 < lrvick> still saying fs not found
15:46 < deoxxa> lrvick: fs is in node core, you don't need to install it
15:47 < lrvick> grunt-imagemagick apparently requires it
15:47 < lrvick> fail
15:47 < deoxxa> that's certainly weird
15:50 < geoous_> anyone used twitter api ?
15:50 < paulfryzel> isaacs: i was looking into issues/4932 (slow tests). would it make sense to change test.py's -t to milliseconds for a bit more timeout granularity?
15:51 < geoous_> paulfryzel: have you used twitter api with node.js?
15:52 < paulfryzel> geoous_: sorry no i haven't, but i may be able to help. what is your question specifically?
15:52 < deoxxa> geoous_: have you tried searching npm for "twitter"? there's roughly a quarter-million modules out there for dealing with it
15:53 < daekano> that's a lot of modules
15:56 < context> deoxxa: i only see 3500 results. and less under keyword twitter
15:58 < deoxxa> context: sshhh you'll ruin it, now geoous_ won't go and search npm on his/her/its own
15:58 < howdynihao> paul, i think he means that the tests need to be refactored to be faster than anything else
15:59 <@isaacs> paulfryzel: sure.
15:59 <@isaacs> paulfryzel: it should default to 30000 in that case, though.
16:00 < jocafa> that's over 9000
16:00 < howdynihao> i'm surprised about http-full-response test, it uses 'ab' ?
16:00 <@isaacs> paulfryzel: but yeah, the tests should just be faster :)
16:00 <@isaacs> howdynihao: yeah, that's annoying.
16:00 <@isaacs> howdynihao: shoudl use tools/wrk/wrk, if available
16:00 < paulfryzel> isaacs: ok cool. i'll try to put in a PR for that small change.
16:01 < paulfryzel> isaacs: another small feature that would be nice in test.py is the ability to run a specific test rather than a suite
16:01 < paulfryzel> isaacs: right now i'm creating a 'slow' suite and linking the tests you've flagged through there. maybe a -f <filename> might make some of that easier?
16:02 < tjfontaine> paulfryzel: python tools/test.py simple/<mytest>
16:03 < FF_> So, am trying to install latest Node.js on a RHL linux. Got the latest tar (node-v0.10.2-linux-x64.tar.gz), unzipped it to a folder (/usr/share). The configure file is in /usr/share/node-v0.10.2-linux-x64/lib/node_modules/npm. I did a ./configure, but I see nothing happening. Am I doing something wrong here? 
16:03 < howdynihao> how do you guys use benchmark compare? that is, for me when i run it, it gives a pretty high +/- like maybe 5% ?, so unless i see something like a 5%+ difference it's hard to say whether changes
16:03 < howdynihao> make any real difference
16:03 < howdynihao> is that correct?
16:06 < paulfryzel> tjfontaine: oh thanks, great protip. i was incorrectly trying to pass simple/test-cluster-master-kill.js (with the extension)
16:06 < tjfontaine> nod
16:08 < howdynihao> i think its exacerbated more on benchmarks that run really fast
16:13 < mansgrf> http://www.reddit.com/r/xWETPUSSYx/comments/1bfdqt/experienced_girl_does_naked_yoga/
16:14 < howdynihao> i wonder what that is
16:14 < niix> yeah
16:14 < niix> me too
16:15 < context> i get reddit is down :(
16:17 < Marak> anyone here at html5devconf in SF right now?
16:18 <@mbalho> i thought that was in southbay
16:19 < Marak> palace hotel
16:48 < MI6> joyent/node: Kyle Robinson Young master * 889fec3 : doc: typo fixes - http://git.io/Peh3PQ
16:52 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:04 < MI6> joyent/node: Timothy J Fontaine master * b3a8e0d : etw: update prototypes to match dtrace provider  The DTrace probes were u - http://git.io/5F45Mg
17:13 < MI6> joyent/node: Michael Hart v0.10 * 440dcae : Ensure BAD domain example actually uses domain - http://git.io/bAG28w
17:14 < devpilot> can I handle 30000 socket.io client from single node instance?
17:15 < SargoDarya> devpilot can a car drive 500mph?
17:15 < SargoDarya> not to sound rude but it depends what car you have
17:16 < SargoDarya> so it depends on what node instance you're running
17:19 < devpilot> I want to run a socket io based chat server, which may have user upto 30000
17:20 < pachet> devpilot: um, theoretically
17:20 < pachet> at that level its going to boil down to you being smart
17:20 < deoxxa> (which is unlikely if you're asking questions like "can i handle 30000 socket.io client")
17:28 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:30 < Kosch> hey. Whats the usual technology stack for deploying and monitoring node.js apps on multiple servers?
17:31 < squeakytoy> anyone can recommend an "embedded" forum solution of somekind?
17:34 < wereHamster> does the npm registry have any issues today? npm ERR! fetch failed https://registry.npmjs.org/mongoose/-/mongoose-3.6.1.tgz
17:57 < MI6> joyent/node: isaacs v0.10 * 164d5b3 : tls: Destroy socket when encrypted side closes  The v0.8 Stream.pipe() me - http://git.io/8moh0w
17:59 < Gokay> hi all
18:00 < Gokay> anyone develope node.js and mongodb?
18:00 < _marvin__> yes
18:00 < FellowMD> yup
18:00 < Gokay> hi
18:00 < _marvin__> hi Gokay 
18:00 < Gokay> I use c9.io as developemnt
18:00 < Gokay> hi _marvin_
18:01 < Gokay> could you send me some examples about node.js and mongodb and mysql,please?
18:02 < _marvin__> i barely use mysql anymore 
18:02 < _marvin__> for mongodb i use mongoose 
18:03 < FellowMD> Gokay: have you searched for tutorials online?
18:03 < _marvin__> Gokay: "mongoose examples"@google
18:03 < Gokay> I am new to node.js,I already tried some xamples but was unable to run them
18:03 < _marvin__> there is plenty of stuff
18:04 < _marvin__> get through them step by step get mongoose then connect to DB, then read,write some data etc
18:05 < Sembianc1> hamster on a piano!
18:05 < FellowMD> check out the "Documentation" section at http://nodejs.org/community/
18:06 < Gokay> thank you very much,I am looking 
18:07 < Gokay> which book do yo recommend for Node.Js?
18:08 < _marvin__> node.js documentation ^^
18:09 < Gokay> thank you_marvin_
18:09 < _marvin__> no worries
18:09 < FellowMD> Gokay: Node.js is still changing fairly frequently. Any well-regarded book on javascript will serve you well
18:10 < CoverSlide> s/documentation/source
18:10 < FellowMD> Javascript: the good parts by douglas crockford is quite good
18:10 <@isaacbw> someone here is writing a node book, but I've forgotten who
18:10 < FellowMD> As is Effective Javascript by David Herman
18:10 < context> gmail.com/blue
18:11 < bnoordhuis> isaacbw: you mean 'node in action' from tjholowaychuk and TooTallNate?
18:11 < Gokay> thank you FellowMD
18:11 <@isaacbw> bnoordhuis: probably
18:12 < _marvin__> context: april 1st
18:12 <@isaacbw> context: hah, it took me way too long to realize that was an april fools thing
18:13 <@isaacbw> "how do we completely reimagine something while keeping it exactly the same"
18:15 < CoverSlide> context: reminds me of this old blog post:  http://stopdesign.com/archive/2009/03/20/goodbye-google.html
18:16 <@isaacbw> it's even funnier because it almost seems like a promo video google would put out for real
18:16 < CoverSlide> yeah
18:18 < CoverSlide> especially the line "Yes, itâ€™s true that a team at Google couldnâ€™t decide between two blues, so theyâ€™re testing 41 shades between each blue to see which one performs better. I had a recent debate over whether a border should be 3, 4 or 5 pixels wide, and was asked to prove my case."
18:18 < CoverSlide> ^ and that wasn't an april fools joke
18:20 <@isaacbw> oh lordy
18:23 < crabdude> isaacbw: Did you know O'Reilly has like 8 different node.js books? Would you like to know more?
18:25 <@isaacbw> crabdude: what
18:26 <@isaacbw> tell me more
18:27 < CoverSlide> Yes, itâ€™s true that a team at Google couldnâ€™t decide between two blues, so theyâ€™re testing 41 shades between each blue to see which one performs better. I had a recent debate over whether a border should be 3, 4 or 5 pixels wide, and was asked to prove my case.
18:27 < CoverSlide> crap
18:27 < CoverSlide> http://www.youtube.com/watch?v=gRQZEs14Ejs
18:27 < crabdude> haha, ummmâ€¦ I actually don't know them off the top of my head, I just have a stack of 2 of each copy on my desk at home
18:28 < crabdude> they sent them to me, and I was pretty shocked at how many node.js books had been written
18:28 < howdynihao> why do they send you free books
18:28 <@isaacbw> do you review?
18:28 < crabdude> to give away at BayNode. It's pretty cool, they've reached out to me multiple times now to give away free books.
18:29 < CoverSlide> what's it take to be an orielly author?
18:29 < crabdude> it's hard not to crack them open and given them away as slightly used...
18:29 < howdynihao> probably not much CoverSlide
18:29 <@isaacbw> honestly I think it's kind of irresponsible to have published node books at this point. People are going to get them and find that a lot of the code snippets don't work
18:29 < crabdude> ya, perhaps
18:29 < CoverSlide> there's probably a form "Hai! Kan haz book deal?"
18:29 < crabdude> async JavaScript was a really good book
18:30 < crabdude> though not node specific
18:30 < CoverSlide> isaacbw: that's what xth Editions are for
18:30 <@isaacbw> heh...
18:31 < howdynihao> its the whole ebook thing, its easier to give people book deals
18:32 < howdynihao> doesnt really cost them much
18:32 < howdynihao> if the book sucks i mean
18:33 < unr3al011> hello
18:33 < CoverSlide> By the way, onyone here know who runs cubehero.com?
18:34 < unr3al011> i want to access ten thousands of urls with node.js. i use debian as OS and 8gb ram. my software firewall logs network throughput, it is never higher than ~ 10% (1000kb/s) of my actual connection(64mbit => 8mb/s). any ideas on how i can get a higher throughpuT? my code: http://pastie.org/private/jwtdv1j7tphklg8fel3w
18:34 < _marvin__> CoverSlide: Wil Chung ... Paris, France
18:36 < unr3al011> nobody? :| :D
18:37 < CoverSlide> i swear i've talked to the guy in here.
18:40 < unr3al011> how to increase http client throughput? i't only exceeds 10% of my bandwith
18:40 < howdynihao> unr3al011: you dont get any errors?
18:41 < unr3al011> no it works fine
18:41 < unr3al011> but slow
18:41 < howdynihao> do you even get any console output?
18:41 < unr3al011> yes
18:41 < unr3al011> as you can see i output the body length
18:41 < unr3al011> it differs from every request
18:41 < unr3al011> but i do not understand why it does not use my full bandwith
18:41 < howdynihao> did you raise your fd limit?
18:42 < unr3al011> yeah i did a couple of sysctl changes if you mean that
18:42 < unr3al011> i can show if you want
18:42 < bnoordhuis> unr3al011: grep the http documentation for maxSockets
18:42 < tpayne> sup
18:42 < howdynihao> if you get expected results, then i'm guessing httpAgent throttles you
18:43 < bradleymeck> also be sure w/e is sending the responses is not being throttled by w/e is between you and the remote producer
18:43 < quips> what are some things to do to start troubleshooting a possible reason node would crash like every 4 hours of my prod site?
18:43 < bnoordhuis> quips: define 'crash'?
18:43 < unr3al011> sysctl: http://www.pastie.org/private/xfdrfhfpdsatlhnnphqxrw
18:43 < quips> bnoordhuis: stop running?
18:44 < quips> and i need to restart it
18:44 < gildean> unr3al011: hmm, iirc you can set the maxSockets with http.globalAgent.maxSockets
18:44 < bnoordhuis> quips: exits without an error message? what's the status code?
18:44 < unr3al011> mh let's give it a try
18:44 < unr3al011> mom pls
18:44 < quips> bnoordhuis: one sec let me ask my sys admin
18:45 < gildean> unr3al011: also add var in front of callback
18:46 < unr3al011> ok did now
18:46 < howdynihao> well i mean isn't it fair to say he will never be able to come close to using 8mb/s at any given time since 1 node process doesn't provide any real parallelism ?
18:46 < unr3al011> highest throughput was 1300 kb/s 
18:47 < unr3al011> speed is definately faster now and more constant
18:47 < unr3al011> but it still is nearly 15% of maximum
18:48 < unr3al011> i set maxSockets to 99999
18:48 < quips> bnoordhuis: he says node isn't crashing, the workers are. I don't know. nm. I'll let them deal with this
18:48 < gildean> unr3al011: and you've raised your os's limit ?
18:48 < howdynihao> why would you set it that high anyway, you're only making 10k requests
18:49 < unr3al011> yes i dit. check my sysctl config http://www.pastie.org/private/xfdrfhfpdsatlhnnphqxrw
18:49 < unr3al011> why not? its for testing only
18:49 < howdynihao> unr3al011: its not like all requests fire at once
18:49 < unr3al011> i do not want to "self bottleneck" me
18:49 < unr3al011> yeah but how can i increase the concurrency?
18:49 < howdynihao> more processes
18:50 < unr3al011> how can i run multiple node processes? simple starting it a couple of times?
18:50 < LouisT> can use workers
18:51 < gildean> also i'm not sure how the set connection pool limit on the core http works
18:51 < gildean> and how you can rise it
18:51 < howdynihao> i doubt its that
18:51 < gildean> iirc substack was ranting about it having a 5 connection limit
18:51 < bnoordhuis> by default anyway
18:51 < howdynihao> node isn't going to fire all requests at once, there's too much overhead in expecting it to all happen at once, even on the network layer, just the way tcp works too
18:51 < gildean> don't know if it would apply
18:51 < bnoordhuis> subject to change in v0.12
18:52 < unr3al011> mhhh
18:52 < gildean> bnoordhuis: sure, but that's not the current behavior
18:52 < unr3al011> so adding cluster/workers should increase performance?
18:52 <@isaacs> https://twitter.com/nodejs/status/318792106879623170
18:52 < bnoordhuis> gildean: i already pointed him to maxSockets
18:52 < gildean> bnoordhuis: so it's just the maxSockets that govern the connections?
18:52 < bnoordhuis> unr3al011: depends on what you're doing. for raw i/o, it may not make much difference
18:53 < unr3al011> making http requets only
18:53 < bnoordhuis> gildean: yes
18:53 < gildean> ok, good to know
18:53 < howdynihao> isaacs: haha
18:53 < bnoordhuis> unr3al011: add some logging to check what it's doing
18:53 < unr3al011> what to log?
18:54 < bnoordhuis> number of concurrent requests, request times, etc.
18:54 < unr3al011> mhh how do i measure this?
18:54 < bnoordhuis> also, are you trying this on a home DSL?
18:54 < unr3al011> yes
18:54 < unr3al011> 64mbit connection
18:54 < unr3al011> my throughput is 1300kb/s
18:54 <@isaacbw> http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/
18:54 < bnoordhuis> make sure it's not your router crapping out because of many concurrent connections
18:55 < unr3al011> maximum with my dsl is ~8000kb/s
18:55 <@isaacbw> "You will often hear it said that JavaScript is a â€˜functionalâ€™ programming language."
18:55 <@isaacbw> who
18:55 <@isaacbw> who says this
18:55 < bnoordhuis> unr3al011: and a simple cross-check: how much traffic can you generate on localhost?
18:55 < unr3al011> wait a minute
18:55 < unr3al011> i'll test it
18:55 < bnoordhuis> isaacbw: the same people that say lisp is a function programming language
18:56 < bnoordhuis> which is true for certain values of 'functional'
18:57 < unr3al011> mhhh
18:57 < unr3al011> my firewall doesnt log it :|
18:57 < unr3al011> debian systemmonitor either doesn't :|
18:58 < unr3al011> but in 1 second it's done
18:59 < desandro> Hi there! I'm looking for help on how to troubleshoot "Error: getaddrinfo ENOENT".
18:59 < desandro> This is happening on the server. When running my app locally, everything is fine.
18:59 < desandro> I understand there might be a problem with the server's proxies. That's what I need help with. I don't know how to troubleshoot this.
19:00 < CoverSlide> python has first-class functions. therefore it is a functional language
19:00 < CoverSlide> heck, so is C
19:00 < unr3al011> what can i do now? :|
19:01 < draginx> desandro: that means it cant connect to the address u provided (I believe)
19:03 < desandro> draginx: Okay, do you know of a way I can resolve if the address is connect-able or not?
19:03 < draginx> ping it? :P
19:04 < unr3al011> any ideas how to further increase performance?
19:04 <@isaacbw> write it in C
19:04 < LouisT> multiple servers
19:04 < draginx> isaacbw: that article caught my attention with promises as well
19:04 < draginx> but the community loves callbacks more so
19:04 <@isaacbw> I love promises, but most people talk about them wrong
19:05 < draginx> and like mikeal said at lxjs'12, if your library uses promises no body will use it
19:05 <@isaacbw> and I get grumpy and hide in my cave
19:05 < draginx> isaacbw: i think this guy did a fantastic job and even slightly convinced me :P
19:05 < howdynihao> isaacbw: whats with the first comments avatar (in that article)?
19:05 < merpnderp> Didn't Douglas Crockford say Javascript is also functional even though most people don't think of it that way?
19:05 <@isaacbw> you have to look at promises as data that's in transit and not just as callback fluff
19:06 < pachet> isaacbw: i just joined, can a brother get a repost
19:07 < draginx> isaacbw: isnt that what streams are for though too? :D
19:07 <@isaacbw> pachet: making fun of people who think javascript is functional: 
19:07 <@isaacbw> http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/
19:07 < howdynihao> isaacbw: conceptually that sounds nice, but in reality is that what it really is?
19:08 <@isaacbw> draginx: the nice thing about promises is that you can pass them around like they're real values and only worry about whether the data is ready or not when you actually need it
19:08 < draginx> yeah id be really interested to hear why nodejs does *not* like promises
19:08 < draginx> it could just be a cultural thing
19:09 < substack> promises are too high-level for core
19:09 < pachet> isaacbw: oh gotcha, read it already this morning
19:09 <@isaacbw> nodejs had promises in it a long time ago but they were a horrible mess
19:09 < substack> if people want to use promises they can
19:09 <@isaacbw> anyway, promises would be innappropriate I think
19:09 < howdynihao> it is just callback 'fluff' (abstraction)
19:09 < draginx> substack: watching ur video on streams now, its helping a lot so thanks man :) owe u a beer
19:09 <@isaacbw> again, they shouldn't just be a replacement for callbacks
19:09 < substack> core will just not *force* people to use them
19:10 < CoverSlide> can substack drink beer?
19:10 < pachet> no
19:10 < pachet> it gets in his circuitry
19:10 < substack> if node were a political ideology it would be libertarianism
19:10 < substack> a very small core with a desire for the free market of userspace libraries to step in to fill the gaps
19:11 < howdynihao> well its like the article said though, if node doesn't support it, no one will use it
19:11 <@isaacbw> with a central management of that free market userspace
19:11 < howdynihao> it makes using node immensely hard 
19:11 < pachet> how's that
19:11 < pachet> just write what you need!
19:11 <@isaacbw> who cares if anyone else uses it
19:11 <@isaacbw> use it if you want to
19:11 < CoverSlide> node doesn't support cookies, oauth or databases, people use that all the time
19:12 <@isaacbw> promises should be on the application level anyway
19:12 <@isaacbw> man, I really just want to write server applications in haskell
19:13 <@isaacbw> fuck javascript
19:13 < pachet> i kno rite
19:13 < draginx> howdynihao: I don't think so
19:13 -!- isaacbw changed the topic of #Node.js to: Now with promises - http://blog.nodejs.org/ - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
19:13 < draginx> node is incredibly easy especially if you follow unix's rules
19:14 < howdynihao> i meant using promises when node itself doesn't support it
19:15 <@isaacbw> node doesn't not support it
19:15 < pachet> because they're not widely transmissable you mean?
19:15 < pachet> just get one of those modules that decomposes promises into a callback :[
19:16 <@isaacbw> Q even has a one-liner for using node callbacks as promises
19:16 < CoverSlide> the q module is very popular and easy to use. if you've heard of promises you've probably heard of it, and therefore if you want to use promises you probably know to use q
19:18 < CoverSlide> if you don't know or want promises, then there is nothing forcing you to use them
19:19 < pachet> my beef with q is that it still doesnt feel super composable
19:20 < pachet> and its a pain to interpose calls to callback-returning fns with arity > 1
19:20 < crabdude> isaacbw: I wrote a Harmony Proxies wrapper for Q a while back calles Proxis. Let's you do: Q(fs).readFile(path).then(...)
19:20 <@isaacbw> I don't think you can do much better withotu changing the rules of the language
19:20 < crabdude> https://github.com/crabbot/Proxis
19:20 < CoverSlide> you can write your own promises thingy 
19:20 < crabdude> I still hate promises
19:20 < CoverSlide> hate is such an ugly word
19:20 < crabdude> haha
19:21 < crabdude> nothing personal, I just want to die a slow painful death, and have people remember them negatively.
19:21 < crabdude> *want them
19:21 < crabdude> I don't want to die
19:21 < CoverSlide> .. oh
19:21 < pachet> famous last words
19:21 <@isaacbw> haha
19:21  * CoverSlide puts away the gun
19:22 <@isaacbw> I've had a few love affairs with promises but I always find myself getting rid of them in the end
19:22 <@isaacbw> they just don't fit with the javascript programming style
19:22 < CoverSlide> you're a promise-slut!
19:22 <@isaacbw> there was one case where I honestly don't know how I would have solved a problem without promises
19:22 <@isaacbw> but just one
19:23 <@isaacbw> and I ended up not needing to solve that problem anyway
19:23 < pachet> i dont know if its ever been a matter of necessity for me
19:23 <@isaacbw> brace yourself for a glimpse of insanity: https://gist.github.com/isaacbwagner/4772886
19:23 < pachet> unless you count massive convenience as a necessity
19:24 <@isaacbw> in the end it was really fucking cool
19:25 <@isaacbw> but I didn't need it
19:27 <@isaacbw> someone tell me I'm not crazy :(
19:27 < jfischoff> why would I this output undefined with phantomjs: var http = require('http'); console.log(http.createServer); ?
19:27 < pachet> isaacbw: you're not crazy
19:27 <@isaacbw> :D
19:27 < kornnflake> is there an assets-pipeline you guy can recommend me for expressjs? minify css/js is all i need
19:27 < jfischoff> mind you I don't completely understand the connection between node.js and phantomjs
19:27 < pachet> jfischoff: circular references most likely
19:28 < pachet> er, wait
19:28 < pachet> nevermind :[
19:28 < hydrawat> jfischoff: there is no connection
19:28 < hydrawat> they both just use reuqire
19:28 < pachet> took my brain a couple seconds to read 'http'
19:28 < jfischoff> ah
19:29 < jfischoff> so I can't necessarily use node libraries in phantomjs
19:29 < hydrawat> jfischoff: correct. probably better to use phantom in node
19:29 < hydrawat> jfischoff: what are you trying to do?
19:29 < jfischoff> I am trying to get the phantomcss demo to work correctly
19:29 < jfischoff> which uses casperjs to take screenshots of web pages
19:30 < jfischoff> taking screenshots is the high level
19:30 < jfischoff> fixes a timeout issue in the demo is the low level
19:30 < hydrawat> node-webshot is cool for screenshots in node
19:30 < hydrawat> it's a wrapper for phantom
19:31 < jfischoff> oh okay. what would you use to make the comparisons?
19:31 < jfischoff> diffs what have you...
19:31 < hydrawat> jfischoff: you just want to compare two screenshots to see if they match?
19:31 < jfischoff> yes exactly
19:31 < hydrawat> coupel different ways. How ive done it is use the base64 data stream
19:32 < hydrawat> if you want to output the file you could do md5 sums maybe
19:32 < jfischoff> cool well I'll checkout that stuff
19:32 < jfischoff> thanks!
19:32 < hydrawat> here's my experience with the module and the b64 stream https://github.com/tomsteele/cetera
19:33 < hydrawat> jfischoff: np good luck :D
19:37 < pachet> isaacbw: the conversation's died out, but we use this pattern in our services and routes ALL the time:
19:37 < pachet> https://gist.github.com/anonymous/5287124
19:38 < pachet> little bit of a hack so that .then() can accept arbitrary arguments in place of the error fn
19:38 < pachet> but then you tack on the error fn at the end as a catchall for the entire chain
19:44 <@isaacbw> pachet: nice, that's how they ought to be
20:00 < trippeh> Whats a good way to deal with a simple length prefixing framing protocol?
20:01 < trippeh> node 0.10.x
20:02 < trippeh> Say 15 bit length indicator + 1 bit continuation indicator + data, or somesuch.
20:03 < reid> I don't have a module for that, but yeah, I've had to write a parser for that.
20:05 < reid> trippeh: state machine, e.g. https://github.com/yui/yeti/blob/v0.2.20/lib/blizzard/session.js#L693-L837
20:06 < trippeh> reid: parsing is pretty simple; i'm more curious on what API's to use, ie to handle buffering etc.
20:06 < trippeh> a lot on the npm is quite old :)
20:06 < reid> trippeh: Indeed.
20:07 < trippeh> Thanks for the link, will investigate
20:09 < reid> trippeh: I used to use the npm module buffers, but replaced it after a few months to improve parse speed
20:10 < pachet> isaacbw: i'll just leave this here: https://github.com/reflex/promix/#examples
20:22 < zackiv31> does a mongoose schema .pre('save', function(){ }) execute before all modifications of the document (it doesn't seem to be calling for me)... if not, what hook am i looking for?
20:26 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:39 < Phil__> Hello
20:39 < pachet> hi
20:39 < Phil__> Does anyone know if there is a way to start a node server from gui
20:40 < Phil__> so for example... having an icon on a PC or Mac where by clicking it, I could get my server running
20:40 < pachet> just make a script that launches your process
20:40 < pachet> and give that script an icon
20:41 < Phil__> And I would need a different one for a PC and a Mac, right?
20:43 < willwh> Phil__: cd c:
20:43 < willwh> wups
20:43 < bradleymeck> Phil__: generally yes
20:43 < pachet> Phil__ most likely
20:43 < willwh> "cd c:\whateveryournodeinstalllocationis" \n "node someserverorapp.js" in to a batch file
20:44 < pachet> if only windows supported shebangs
20:44 < willwh> make a shortcut to it and right click -> properties -and add an icon
20:44 < willwh> I have no idea about osx - but I'd imagine you could do the same thing very easily
20:44 < bradleymeck> pachet: s/shebangs/*/
20:44 < Phil__> ok, that sounds awesome
20:45 < pachet> bradleymeck: lol
20:45 < Phil__> thanks
20:45 < bradleymeck> willwh: cd /path/to/your/nodeinstallation\nnode someserverorapp.js in a shell script 
20:45 < willwh> np
20:46 < willwh> init script in debian for me >.>
20:46 < willwh> node = compile from source && custom init script <3
21:12 < owen1> anyone knows if dshaw is here?
21:12 < hackedy> is there a code formatter that follows the npm style guid?
21:12 < hackedy> *guide
21:13 < howdynihao> hackedy: probably closure
21:13 < howdynihao> thats the linter that node core uses
21:14 < michael-robinson> ck faceleg|work
21:14 < hackedy> howdynihao: ehh but it doesn't do npm style
21:15 < hackedy> howdynihao: maybe I'll use it anyway I'm not particularly attached to comma-first etc
21:15 < howdynihao> hackedy: oh yea true, i looked it up, semicolon less style
21:15 < faceleg|work> oh god
21:15 < howdynihao> so thats definitely not it
21:15 < faceleg|work> comma first. no please no
21:15 < hackedy> hahaha
21:16 < pachet> like waking up every day and immediately stepping in a little dog turd
21:16 < pachet> ,
21:16 < faceleg|work> , I know what you mean
21:16 < hackedy> , well
21:16 < hackedy> }
21:16 < faceleg|work> I will endure any amount of RSI caused by refactoring such hideousness
21:16 < howdynihao> so whats the deal with mongoose? if you have no connection available and try to do a db call through its abstractions it doesn't bubble the err to the call's callback
21:16 < faceleg|work> , because it is awful
21:17 < faceleg|work> lolyup
21:19 < howdynihao> ah i see, i found the issue, i guess it makes sense...
21:19 < deoxxa> comma first? more like "wrong and worst", right?
21:19  * faceleg|work applause
21:20 < howdynihao> the npm style guide is not saying comma first
21:21 < howdynihao> oh wait it isnt
21:21 < howdynihao> it is*
21:21 < howdynihao> regardless whys that a bad style?
21:21 < howdynihao> it's literally used by so many people, tjholowaychuk does it
21:22 < howdynihao> it's part of airbnb's styling guide too i remember
21:22 < deoxxa> a lot of people used to advocate for hungarian notation too
21:23 < faceleg|work> I for one don't care who the hell uses it
21:23 < faceleg|work> it is horrible and should be abolished
21:24 < EvanCarroll> comma-first is better when you're not using node.
21:24 < EvanCarroll> afaik, it was at least somewhat popularized after Perl's best practices.
21:24 < EvanCarroll> erg
21:24 < EvanCarroll> not using JS.
21:25 < pachet> was like
21:25 < pachet> :{
21:25 < EvanCarroll> JS works by seeing if the statement is valid, if it fails, it falls to different syntaxes.
21:25 < EvanCarroll> This is very problematic for comma-first form.
21:26 < EvanCarroll> especially when semi-colons are voluntary and the first failure the lexer will try to remedy.
21:26 < faceleg|work> another pet hate is ommitting semi-colons
21:26 < Bansku> what is 'comma first'? :I
21:27 < faceleg|work> devs who dev w/o jshinting on bitching at them that they're doing it wrong need reeducation
21:27 < EvanCarroll> so `return var`, falls back to `return var;` and `return var\n , bar`; falls back to `return var;\n , bar.`
21:27 < faceleg|work> Bansku: pray you never find out
21:27 < pachet> , it will find you
21:27 < faceleg|work> , this is comma first
21:27 < pachet> , you have to sleep some time
21:27 < faceleg|work> , see why we moan
21:27 < EvanCarroll> Comma first is great, it's a superior style, but in JS the lexer can't handle it well, so I'd advise avoiding it.
21:28 < EvanCarroll> I also think symantic-tabs are good though too, but people are too stupid to use them.
21:28 < faceleg|work> Comma first is terrible, it's an inferior style. 
21:28 < ccowan> you guys have now convinced me to switch to coffeescriptâ€¦ thanks!
21:28 < Bansku> I just google'd it
21:29 < EvanCarroll> coffeescript? lol, people still use that!
21:29 < EvanCarroll> Harmony is only a couple years out...
21:30 < slicky> coffeescript annoys me
21:30 < faceleg|work> slicky: same
21:30 < EvanCarroll> comma-first, creates an vertical alignment an eye-line. The argument goes that's it's easier to see a missing comma with comma-first syntax, the science backs it too.
21:31 < slicky> commas are fine wherever they want to go, coffeescript is unwanted anywhere
21:31 < Bansku> I
21:31 < EvanCarroll> slicky++ # agreed.
21:31  * ccowan trolling like a gansta
21:31 < slicky> shun, shun the non-believers charlie, shunnnn
21:31 < EvanCarroll> I wish Joose was more popular.
21:32 < faceleg|work> EvanCarroll: jshint sees the errors for me
21:33 < pachet> 8/10 scientists agree
21:33 < Venom_X> the other 2 are busy hacking in coffeescript instead of arguing
21:34 < EvanCarroll> faceleg|work: right, if that works for you great. I prefer to simply use a style that doesn't require a lexer to identify errors.
21:34 < ljharb> coffeescript, gross
21:34 < EvanCarroll> not to mention comma-last is ugly, even if it is the norm
21:34 < ljharb> EvanCarroll: that's subjective. i find comma-first unreadably ugly.
21:35 < EvanCarroll> I think it's less subjective than you make it out to me.
21:35 < ccowan> 9 out of 10 javascript developers prefer CoffeeScript
21:36 < faceleg|work> EvanCarroll: comma first is ugly, and I don't mind jslint helping me
21:36 < faceleg|work> 9 out of 10 js developers are wrong
21:36 < ccowan> the other 10% are lying :D
21:36 < EvanCarroll> I think a good argument can be made that the human-brain, as a patern seeking instrument is likely to find comma-first more appeasing, and it's only your own personal inability to adapt and comfort-zone that biases you.
21:37 < faceleg|work> EvanCarroll: no, I just don't like how it looks
21:38 < slicky> I don't like coffeescript because it's different. And I hate change.
21:38 < faceleg|work> EvanCarroll: I never disagree with science, and I *do* agree that c-first is better because psychology (I have a psyc degree)
21:38 < faceleg|work> I just don't like it, personally
21:38 < ljharb> EvanCarroll: you can make whatever argument you want about the human brain. i like comma-last, so your argument can't possibly be universal
21:38 < faceleg|work> and arrogantly attempt to impose my opinions on others
21:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:38 < brettlangdon> comma last is ugly
21:38 < ljharb> EvanCarroll: and based on the english language's syntax, i'd have a great argument that english-language speakers will prefer comma-last.
21:38 < brettlangdon> oops
21:38 < brettlangdon> comma first I mean
21:39 < ldlework> Hey anyone heard of socket.io not returning the first bootstrap data?
21:39 < brettlangdon> getting close to the end of the day if you cant tell
21:39 < EvanCarroll> ljharb: you're just simply referring to comfort-zone, that has nothing to do with utility, or cleanliness.
21:40 < EvanCarroll> It's even more evident when you brought in another unchallanged tradition
21:40 < ljharb> it has everything to do with it.
21:40 < EvanCarroll> And interestingly enough, you're wrong.
21:40 < ljharb> lol
21:40 < EyePulp> ldlework: that sounds like crossing of streams.  Bootstrap data, as inâ€¦ Twitter's bootstrap?
21:40 < EvanCarroll> In English we don't use commas to denote lists. We use bullets; and, bullets go first.
21:40 < ljharb> wtf?
21:40 < ljharb> bullets aren't part of english. they're an outline convention.
21:40 < ljharb> english sentences have commas in lists.
21:41 < EvanCarroll> A better argument can be made that bullets should be adapted for lists in computer programming languages, and commas retired, but that'd create all kinds of shit not least of which is the need for a key, or a composition layout, or a new modifier.
21:41  * EyePulp uses commas, e.g. This argument is spurious, flawed, non-sensical, and ridiculous.
21:41 < ljharb> EyePulp: <3 agree, and love that you used an oxford comma.
21:41 < EvanCarroll> Bullets are how we construct lists out prose, which is what we're talking about.
21:41 < ljharb> "we" is a pretty absolute statement. i don't.
21:41 < EyePulp> ljharb: My wife would kill me for that.
21:41 < lorddelta> Um
21:41 < lorddelta> What?
21:42 < EvanCarroll> outside of prose*
21:42 < ljharb> EyePulp: i'd divorce someone that didn't use it.
21:42 < lorddelta> Kids these days XD
21:42 < EyePulp> Of course, I still put two spaces after the period when writing e-mails.  She's frowns on that heavily.
21:43  * lorddelta agrees heartily with EyePulp
21:43 < ljharb> EyePulp: as she should. that's wrong unless you're in a monospace font or on a typewriter.
21:43 < lorddelta> ljharb: #fonts?
21:43 < lorddelta> #microsoft word, #desginers #document layout >_>
21:44 < EyePulp> ljharb: I'm old enough that "keyboarding" in high school was on a typewriter, and you had *better* put two spaces after a period.
21:44 < trabus> does anyone here have experience using minimatch?
21:44 < ljharb> EyePulp: break the cycle, man!
21:44 < trabus> I'm trying to write a glob pattern for matching a relative folder like ../../folder
21:44 < faceleg|work> trabus: we're busy debating incredibly important aspects of programming
21:45  * EyePulp wonders if keyboarding today is something the CIA doesâ€¦ pouring buckets of typewriters onto people for information.  Brutal.
21:46 < pachet> ptsd flashbacks induced by a carriage return
21:47 < lorddelta> EvanCarroll: if you want bullets, write a plugin for your text editor, write a language that uses less (not no) commas
21:48 < lorddelta> I wager you'll find it incredibly difficult to replace all commas with bullets.
21:48 < lorddelta> Just a fact.
21:48 < lorddelta> And if you do you'll be so damn deep in file dependency hell you 
21:48 < lorddelta> you'll wish you'd been more flexible/sensible
21:48 < hackedy> I am so sorry for instigating this discussion
21:48 < othiym23> is anyone having trouble with longjohn under 0.10?
21:49 < othiym23> if I do anything that generates errors in a loop, it starts doing pathological things and Node eventually dies with FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
21:49 < lorddelta> hackedy: its april fools day, no problem ;)
21:51 < hackedy> april fools!! the bikeshed is actually blue!!
21:51 < lorddelta> Interestingly actually in Stylus I'm running into this problem, languages that do away with syntax turn out to be fucktards when it comes to expressing anything complicated in them...
21:52  * lorddelta grabs a Rhino and throws it into the room
21:55 < faceleg|work> april 2 here
21:57 < ljharb> lorddelta: surprise, punctuation is important :-p
21:58 < faceleg|work> , ljharb whatever you mean
21:58 < faceleg|work> , putting comma's at the front makes it easier for you to mentally pause
21:58 < faceleg|work> don't argue it's science
21:58 < Bansku> what's wrong with 'var first'
22:00 < howdynihao> faceleg, more work
22:01 < Bansku> I would argue it's less work
22:01 < howdynihao> oh no i meant, get back to work
22:03 < chrisdickinson> i use comma first and i have not been struck down by lightning
22:03 < chrisdickinson> but
22:03 < chrisdickinson> more importantly
22:03 < chrisdickinson> match surrounding style
22:04 < chrisdickinson> that's the real end-all be-all of js style. just make sure your code's format matches the format around it.
22:06 < faceleg|work> chrisdickinson: I thought it was "impose your will on others or struggle to become influential enough that it happens naturally"
22:06 < chrisdickinson> hah!
22:07 < pachet> i thought it was "find some sane dev who uses tab indentation and riddle his code with random space identation over and over again"
22:07 < chrisdickinson> i don't really care how folk write their javascript in their own modules; i care about the api contract they present
22:07 < chrisdickinson> even if they write coffeescript, though i'd really prefer them to use the prepublish option to turn it into js.
22:08 < chrisdickinson> (before publishing on npm.)
22:11 < faceleg|work> I just hate CS
22:12 < faceleg|work> ahhahaha and coffeescript
22:12 < pachet> good one
22:12 < faceleg|work> accidental win
22:21 < howdynihao> google nose (finally)
22:22 < howdynihao> they really went all out
22:23 < faceleg|work> It's great
22:23 < faceleg|work> Now Google really nose everything
22:23  * faceleg|work slaps leg
22:24 < howdynihao> 1.5 scentibytes, that sounds like a lot
22:25 < julian37> hi, how can I build d8 in deps/v8 for 0.10.2 on a mac so that I can use tools/mac-tick-processor? using scons doesn't seem to work, neither does 'make dependencies && make native'
22:26 < julian37> should I download and build v8 separately? if so, which version?
22:27 < howdynihao> julian37: you don't need to build v8
22:27 < howdynihao> to use it
22:28 < julian37> howdynihao: ok. running "tools/mac-tick-processor" tells me that I need to build the d8 shell by executing 'make native' from the V8 directory
22:28 < julian37> but doing that gives me: No rule to make target `test/cctest/cctest.gyp',
22:28 < julian37> how can I fix this?
22:29 < howdynihao> julian37: https://github.com/bnoordhuis/node-profiler/tree/master/tools you need build-nprof & nprof-stub.js , (look at build-nprof and it'll be obvious)
22:30 < julian37> howdynihao: thanks, that looks like a good lead, I'll check it out
22:30 < howdynihao> basically mac-tick-processor is just javascript
22:30 < jschall> what is domain.enter() and why isn't it documented?
22:31 < julian37> howdynihao: right, makes sense
22:33 < julian37> howdynihao: that worked, thank you :-)
22:43 < ningu> I can't believe that jesus has been updated
22:43 < ningu> imagine if this happened with the real jesus
22:43 < CoverSlide> a jesus update?
22:44 < CoverSlide> link?
22:44 < ningu> https://github.com/deoxxa/jesus
22:44 <@isaacbw> a what what?
22:44 < CoverSlide> oh sweet
22:45 < SomeoneWeird> lol ningu 
22:45 < ningu> we may update the pope but not jesus
22:45 < ningu> deoxxa doesn't care though
22:49 < mhretchin_> I posted this in #socketstream, but there's not many people on that channel, so I was hoping one of you guys could answer my question.  I tried to do "npm install -g socketstream", but got the following error: http://pastebin.com/raw.php?i=ZdD21uWw.  Can you guys help me figure out what's going on?
22:49 < faceleg|work> lol
22:50 < CoverSlide> mhretchin_: did you try reading the error?
22:51 < CoverSlide> because
22:51 < CoverSlide> your answer
22:51 < CoverSlide> lies there
22:51 < mhretchin_> I'm an idiot...
22:51 < ningu> CoverSlide: it does? I wasn't sure
22:52 < MI6> joyent/node: Andrew Hart v0.10 * db8ce89 : test: test intended code-paths  The tests did not agree with the test com - http://git.io/BvHR2A
22:52 < mhretchin_> It looks like I'm trying to install but it's already there?  I need to check the directory in question
22:54 <@isaacbw> npm ERR! not ok code 0
22:54 <@isaacbw> heh
22:54 <@isaacbw> I think the problem lies here: npm ERR! System Windows_NT 6.1.7601
22:55 <@isaacbw> why does anyone willingly develop on windows?
22:55 < ningu> isaacbw: visual studio?
22:55 <@isaacbw> outside of game development, maybe
22:55 < lorddelta> ljharb: indeed; OOP languages make a lot of sense when you think of it as punctuation.
22:55 < ningu> isaacbw: not that I use it, it just seems pretty nice
22:56 <@isaacbw> it's probably the nicest IDE you can use, but who uses IDEs
22:56 < ningu> lots of people on big projects
22:56 <@isaacbw> ssshh
22:56 < ningu> and for better or worse big projects exist and are very real
22:56 < mhretchin_> the computer came with windows, and even though I've learned how to use linux, I haven't made the switch yet.  So is that it, that socketstream is made for *nix computers, and mine is Windows?  Because I can install express globally just fine, not ss though.
22:56 < ningu> substack has not yet taken over the world
22:56 < lorddelta> isaacbw: I do, only because there are *cough* certain programs that are windows only.
22:57 < lorddelta> isaacbw: I have things set up so I can pretend I'm on *nix with a Windows UI :P
22:57 <@isaacbw> I keep windows around to destroy my life with video games
22:57 < ljharb> lorddelta: not just OOP. JS is more functional than that :-)
22:57 < ningu> mhretchin_: no, you can probably get it to work, but it isn't obvious to me what's wrong
22:57 < lorddelta> ljharb: quite, I was making a jab at JS
22:58 < lorddelta> And all other Functional languages for that matter
22:58 < ningu> the issue is with chokidar
22:58 < ningu> all the other modules seem to install fine
22:58 < mhretchin_> I'll try to install on my linux vm and tell you guys if that works...
22:58 < ningu> mhretchin_: you might look at the chokidar postinstall script
22:58 < ningu> it may be written assuming you're on *nix and not windows and need to be fixed
23:00 < mhretchin_> It turns out that "chokidar" doesn't exist
23:00 < ningu> of course it does
23:00 < mhretchin_> so it's probably trying to use a script in that folder that doesn't exist either
23:00 < mhretchin_> I looked, and the folder isn't there
23:00 < ningu> well yes, it's failing to install
23:00 < ningu> but the reason it's failing is because of its postinstall script
23:01 < mhretchin_> I just found this in the error message: npm WARN engine chokidar@0.4.0: wanted: {"node":"~0.6.10 || 0.7 || 0.8"} (curren t: {"node":"v0.10.2","npm":"1.2.15"}).  Maybe I'm using the wrong node version
23:01 < mhretchin_> the docs for socketstream claim I ought to use 0.10.x, but idk, I'll try to install an earlier version
23:02 < ningu> mhretchin_: that's just a warning
23:04 < mhretchin_> but it could be significant.  I don't know, I normally don't need to read error messages because stuff installs fine, I'm out of my depth
23:05 < ningu> mhretchin_: it's the chokidar postinstall script
23:05 < ningu> it's right there in the output
23:06 < tds5016> hey. can someone tell me how to add data to an express cookie session?
23:06 < tds5016> that I can authenticate against?
23:06 < ningu> mhretchin_: it generates the js from coffee-script
23:07 < mhretchin_> ningu: right, but chokidar as a folder isn't there, wouldn't the script be in the folder?
23:07 < ningu> mhretchin_: it removed it when it failed to install, I believe
23:07 < ChrisPartridge> tds5016: res.cookie
23:07 < ningu> mhretchin_: to debug this you'll need to download the tarball yourself and run the postinstall script and see why it's failing
23:07 < tds5016> how would I do that from within socket.io?
23:08 < ningu> mhretchin_: actually scratch that
23:08 < tds5016> or do I need to do a regular post, and then add the session, then start the websocket?
23:08 < ningu> mhretchin_: do this first: npm install -g coffee-script
23:08 < ningu> mhretchin_: then install socketstream and see if it works
23:09 < mhretchin_> I'll try that, thanks
23:09 < acidjazz> i have a commonjade issue.. i have a boolean that i only want to effect the next line with (if statement) .. not the lines under that.. any way i can specify that?
23:10 < shesek> acidjazz, than put just that line inside the block?
23:12 < mhretchin_> ningu: it didn't work, I'll try your other advice
23:14 < acidjazz> shesek: well the linse after need to be inside that div.. they just dont have anything to do w/ the condition statement
23:15 < shesek> div? what div?
23:16 <@isaacbw> I want a div
23:16 < ChrisPartridge> my friend dom had a div once
23:17 <@isaacbw> lucky bastard
23:17 < CoverSlide> (ãƒŽà² ç›Šà² )ãƒŽå½¡ <div>
23:17 < CoverSlide> (ãƒŽà² ç›Šà² )ãƒŽå½¡ <ÊŒÄ±p>
23:18 < shesek> acidjazz, I remember seeing you here now and than, so I know you aren't completely clueless
23:18 < shesek> but what you're saying makes no sense
23:19 < mhretchin_> this is interesting: I tried "npm install chokidar" on its own, and it gave me this error: http://pastebin.com/fjdp67W8
23:21 < ningu> weird
23:21 < CoverSlide> mhretchin_: try fixing your package.json
23:22 < mhretchin_> I did "npm install -g chokidar" and that installed.  Then I tried "npm install -g socketstream" again, but it didn't work
23:22 < ningu> mhretchin_: it uses chokidar 0.4.0
23:23 < mhretchin_> ah hmm
23:26 < SomeoneWeird> who divided by zero
23:28 <@isaacbw> woops, sorry
23:33 < ChrisPartridge> gee, whats up with freenode lately
23:33 < mhretchin_> it's dinnertime, I'll try and debug later.  adios
23:34 < ningu> cause I am free as a node now ...
23:53 < jay> I'm new to node, recently picked JavaScript up. Do you have resources that will guide me in building a simple but decently functional web application with node?
23:56 < ChrisPartridge> jay: I don't think there is a "complete guide".. i'd suggest taking a look at the frameworks out there, get started, if you get stuck, feel free to ask specific questions
--- Log closed Tue Apr 02 00:00:04 2013
