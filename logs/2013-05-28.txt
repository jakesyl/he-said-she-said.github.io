--- Log opened Tue May 28 00:00:19 2013
00:00 < volitek> it just says the name of the column and then (1 row)
00:00 < volitek> in between is blank
00:01 < ningu> volitek: so node-postgres is working just fine
00:01 < ningu> that's what you should get for an empty result
00:01 < volitek> i suppose
00:01 < ningu> no supposing required
00:01 < ningu> ask in #postgresql if you want them to tell you how to get different results from the query
00:01 < volitek> it's an array of players and their balances, and i was hoping to get the number of players in a game by getting the length of the array
00:02 < volitek> okay, thanks
00:02 < ningu> well it depends on how you're doing the query
00:02 < ningu> and what the type of the column is, etc.
00:02 < ningu> but it's a postgres question
00:03 < volitek> im switching from mongodb to postgres, it just worked in mongo, gave me a zero length array... maybe i should just stick with it
00:03 < not_mike> how do I get this the gray bar to slide up on hover instead of on click? http://jsfiddle.net/D5EMp/2/
00:04 < ningu> volitek: generally arrays should be stored as one-to-many relationships in a postgres database anyway
00:04 < ningu> not_mike: how is that a node question?
00:04 < niggler> node uses JS lol ningu 
00:05 < ningu> hehe
00:05 < ningu> not_mike: http://api.jquery.com/hover/
00:06 < niggler> isn't there a dedicated channel for jquery?
00:06 < ningu> yep
00:06 < innociv> lol
00:10  * garthk tries node-expat again. 
00:11 < garthk> Nope. Still slower than htmlparser2â€¦ and htmlparser2 is doing its own bloody parsing. indexOf, FFS.
00:12 < niggler> garthk: you'll find that regex parsing is faster than using a formal xml parser
00:12 < ningu> expat has a sax parser, right?
00:12 < not_mike> thankyou ningu
00:12 < not_mike> came here becase #javascript and #jquery were not responsive
00:12 < innociv> Regexp parsing faster than indexOf tokenizatoin?
00:12 < niggler> ningu: expat isn't sax-compliant
00:13 < garthk> niggler: I tried writing my own regex driven parser. It was insanely fast while I was just breaking up the input sections, but glugged down when I got to breaking out the content strings. I ended up back down to node-expat speed. 
00:13 < niggler> not_mike: ##javascript
00:13 < niggler> #javascript is different
00:13 < ningu> niggler: ok, but does it at least have a streaming parser?
00:13 < niggler> yeah it does ningu 
00:13 < not_mike> thats what i meant
00:13 < niggler> SAX is an API
00:13 < not_mike> nigger
00:13 < not_mike> niggler*
00:13 < not_mike> shit
00:14 < ningu> heh
00:14 < niggler> that's why you tab-complete
00:14 < niggler> http://wordsmith.org/words/niggler.html
00:14 < garthk> Ok, so much for that experiment. Back to OAUTH2, I guess.
00:17 < niggler> innociv: i was comparing native javascript string manipulation to a proper XML parser
00:17 < owen1> guys i am compiling my styl files into css file with simple cat, is that the correct way to do that - cat public/styles/*.styl > public/styles/all.styl && node_modules/stylus/bin/stylus -c public/styles/all.styl
00:17 < ningu> owen1: stylus supports @import
00:17 < ningu> why not just do that?
00:17 < niggler> There needs to be a #node_modules or other separate chatroom
00:18 < owen1> niggler: never heard about import
00:19 < owen1> what does it do
00:19 < ningu> owen1: there are these things called docs
00:19 < niggler> owen1: https://github.com/LearnBoost/stylus/blob/master/docs/import.md
00:20 < niggler> but @import is a css thing
00:20 < ningu> yes, it is, but importing of .styl files is not :)
00:20 < ningu> and inline import is also not
00:27 < owen1> nice. added @import to the main.styl and now i just need to run stylus with -c
00:31 < merpnderp> Are these valid criticisms of mongodb? http://en.wikipedia.org/wiki/MongoDB#Criticism
00:31 < merpnderp> Whups, wrong channel
00:32 < niggler> you know we have a problem when people confuse node for a hipster platform
00:32 < owen1> merpnderp: no. stay (: we're all doing mongo
00:33 < niggler> fuck mongo
00:33 < owen1> ahahah
00:33 < owen1> rethink is the new hotness
00:33 < owen1> and leveldb
00:36 < innociv> Does anyone have experience with mysql plugins for node?  I was using "db-mysql" and it seems to no longer work with the more recent node.js. I tried "mysql" and it just seems to be pretty shoddy.  The mysql connection can close, and I tried adding my own reconnection based off what I've seen others do with it, and the reconnection doesn't seem to work and doesnt' throw an erorr.
00:36 < innociv> db-mysql worked extremely well, except it isn't working anymore. :/
00:36 < ningu> innociv: afaik https://github.com/felixge/node-mysql is the standard module
00:37 < ChrisPartridge> ^
00:37 < innociv> That's the one i changed to using
00:37 < merpnderp> owen1: I read one criticism that there is a global write lock, regardless of which collection is being written to. One person claims this limited their server to 200 updates per second
00:37 < accc> innociv: yeah, mom pls
00:37 < ningu> you should look in the github issues for something similar to what you're experiencing
00:37 < innociv> I can't get it to reconnect properly.
00:37 < innociv> mom?
00:37 < accc> moment please = mom
00:37 < ningu> https://github.com/felixge/node-mysql/issues/431
00:37 < ckknight> accc: hmm, are you German?
00:38 < accc> yes
00:38 < innociv> I have that "server disconnects" "handleDisconnect(connection);" thing in my code. IT's not throwing an error, and queries aren't erroring. IT just silently does not complete queries after a dc
00:38 < ckknight> I've only encountered Germans who use "mom" to mean "moment"
00:38 < accc> yeah, right :D
00:38 < innociv> ningu, yeah I found that and read over it already :(
00:38 < niggler> are you saying that everyone who uses "mom" to mean "moment" is german, or that every german uses "mom" to mean "moment"?
00:39 < ningu> innociv: you might want to try any-db. it has its own connection pool code.
00:39 < ningu> and will use mysql
00:39 < innociv> Alright I might try that.
00:39 < ckknight> niggler: simply that everyone I've run across who uses "mom" to mean "moment" has been German thus far.
00:39 < innociv> YEah db-mysql had its own pooling and stuff built right in from the start and worked completely flawlessly
00:39 < ckknight> I never said that it applied to everyone or every German person
00:39 < ningu> if you really want to be German you can say Augenblick
00:42 < chilts> einen moment bitte
00:42 < chilts> I think
00:42 < accc> innociv: http://pastebin.com/A3rYwF9D
00:43 < merpnderp> owen1: what about this guys complaints? http://blog.engineering.kiip.me/post/20988881092/a-year-with-mongodb
00:43 < c0nrad> soop
00:44  * mscdex shakes a fist at EventEmitter
00:44 < mscdex> Y U NO `delete this._events[type];`?!
00:47 < niggler> merpnderp: i think they want their year back
00:49 < innociv> accc, i'll double check that against my code
00:49 < merpnderp> niggler: I used to work on an foss project that used MySQL replication and they ran into speed problems. Granted we sometimes did 100 queries per page render.
00:49 < niggler> merpnderp: that seems like really dumb design
00:50 < owen1> merpnderp: good read. Safe off by default is not the case anymore, and regarding the memory issues, and the locks, i have no idea. don't forget this article was written a year ago.
00:50 < owen1> merpnderp: try rethinkdb
00:50 < dozn> Yea, that design would be highly questionable >_>
00:51 < accc> i use mysql with a store/cache
00:51 < niggler> accc: memcached?
00:51 < accc> on a cms, loading pages in 10-20ms
00:51 < accc> yes
00:53 -!- mode/#Node.js [+o konobi] by ChanServ
00:55 < merpnderp> owen1: have you ever heard of anyone running into a 200 write/second limit with mongo? That seems slow.
00:55 < merpnderp> That article did mention EBS which is a slow network mounted I/O.
00:56 < innociv> That sounds insanely slow
00:57 < innociv> I have my own sort of javascript-db to use for memory caching instead of caching with mysql itself. I just periodically update mysql.
00:59 < dozn> Is it called... InnoDB? =D
01:00 < accc> me2, with innodb
01:00 < niggler> lol
01:00 < niggler> its not quite a hipster circle jerk without reinventing the wheel five times
01:01 <@konobi> varnish and ESI is pretty sweet
01:01 < innociv> I need super quick access of stuff and I can manually handle what is cached this way. But that's just my case.
01:02 < accc> it works fine, runs stable and is fast as hell. i see no problem on this way
01:03 < LouisT> tjfontaine: i don't use any libs, it's a file size thing i assume because from what i've seen by googling says about the same
01:03 <@tjfontaine> LouisT: you're using express/connect in the issue report
01:03 <@tjfontaine> LouisT: and peri said also canvas
01:04 < LouisT> no that's not me
01:04 < LouisT> that was someone else
01:04 < LouisT> and canvas is only generating the image
01:04 < LouisT> it happens if the file is too big and i try to request it too many times too fast
01:05 <@tjfontaine> can you `ulimit -c unlimited` and get the core, and then `gdb $(which node) ./core`, then `bt full`
01:05 <@tjfontaine> the result of which can be gist'd or added to the issue
01:07 < niggler> tjfontaine: that assumes that core dumps are enabled
01:07 < niggler> and that core_uses_pid isn't set
01:08 < mscdex> hooray for plugged memory leaks!
01:08 < niggler> and that core_pattern isn't set :)
01:08 < LouisT> tjfontaine: FailBo: ../deps/uv/src/unix/stream.c:1319: uv_read_stop: Assertion `!uv__io_active(&stream->io_watcher, 4) || !(&stream->write_completed_queue == (&stream->write_completed_queue)->prev) || !(&stream->write_queue == (&stream->write_queue)->prev) || stream->shutdown_req != ((void *)0) || stream->connect_req != ((void *)0)' failed.
01:08 < LouisT> Aborted
01:08 < Zolmeister> otherwise recompile with -g flag
01:08 <@tjfontaine> LouisT: right ok, this will be fixed in an upcoming release
01:08 < LouisT> that is what happens when i try to wget a 5MB file
01:08 < LouisT> tjfontaine: i tested it in 0.11.2 and it worked fine
01:08 <@tjfontaine> LouisT: if you try 0.10.7 I bet that isn't there
01:08 < ningu> upcoming release of what? node?
01:09 < Zolmeister> whens 1.0???
01:09 < LouisT> yea i'll probably revert to 0.10.7
01:09 < mscdex> Zolmeister: yesterday!
01:09 < niggler> Zolmeister: when pigs fly
01:09 <@tjfontaine> LouisT: 0.11.2 isn't necessarily a good test because different code paths
01:09 <@tjfontaine> LouisT: please post that assert onto the issue so I can close as dup
01:10 < ningu> I'll just be happy when humans reach 1.0
01:10 < Zolmeister> probably happen before node
01:10 < niggler> what makes you think they aren't >1.0 ningu ?
01:11 < mscdex> version all of the living things!
01:11 < niggler> if you believe the creationists, it's 1.0
01:11 <@tjfontaine> if humans were written in erlang you could just respawn your arm when it crashed
01:11 < mscdex> blue arm of death
01:11 < accc> haha
01:11 < ningu> I liked the neanderthal fork, too bad it hasnn't been actively maintained for 90k years
01:12 < mscdex> probably has bugs too
01:12 < niggler> submit some pull requests
01:12 < ningu> someone needs to negotiate ownership of the repo first
01:12 <@tjfontaine> human bitrot, that explains west virginia
01:12 < accc> TTL was over
01:13 < ChrisPartridge> http://en.wikipedia.org/wiki/Kardashev_scale seems relevant, we're definately not 1.0
01:13 < niggler> s/west virginia/the south
01:13 < LouisT> tjfontaine: post what?
01:13 < ningu> actually, the neanderthal genome has been sequenced. one of these days we may have the tech to bring them back.
01:13 <@tjfontaine> LouisT: the assertion
01:13 < mscdex> WE CAN REBUILD HIM
01:13 < merpnderp> niggler: I guess you are happy with innodb?
01:13 < niggler> merpnderp: i can't think of an application I've ever written where a page required more than two queries
01:13 < ningu> but passenger pigeons and wooly mammoths will come first
01:14 < niggler> (a nice way of saying that I've never run into the limitations that forced me to consider something else)
01:14 < ningu> wait, is innodb an independent thing as well as the mysql binary format?
01:15 < niggler> innodb is native in mysql5
01:15 < ningu> yeah, but there is no way to use innodb without using mysql, is there?
01:15 < niggler> not afaict
01:15 < niggler> but they switched from myisam to innodb default in mysql5
01:15 < ningu> I use postgres, never saw any reason to use mysql
01:16 < ningu> I guess I would use it if I had to maintain compat
01:16 < ningu> with something that already used it
01:16 < LouisT> tjfontaine: someone already posted?
01:16 <@konobi> ningu: seen sqitch?
01:16 <@tjfontaine> LouisT: https://github.com/joyent/node/issues/5562
01:16 < niggler> competent postgres people are few and far between
01:17 < ningu> konobi: I've heard of it. but I would be pretty paranoid about doing that sort of migration automatically
01:17 < merpnderp> mysql is pretty easy to use. postgres has always had a steep learning curve for me.
01:17 < ningu> niggler: well, I'm not hiring anyone, so it doesn't really matter
01:17 < merpnderp> every time I use it I have to read for an hour just to log in.
01:17 <@konobi> ningu: it's pretty damn paranoid
01:17 < ningu> konobi: ok. well maybe someone finally did it right.
01:17 < ChrisPartridge> merpnderp: just to login? come on
01:17 < merpnderp> :)
01:18 <@konobi> ningu: it's designed for postgres itself, not some framework trying to do it's own magic
01:18 < ChrisPartridge> konobi: are you using it?
01:18 <@konobi> well, postgres/sqlite/mysql
01:18 < ningu> konobi: yes, that's clearly preferable
01:18 < ChrisPartridge> (in production)
01:18 <@konobi> ChrisPartridge: i have done... just not got a project to use it on at the moment
01:19 < ningu> so it introspects the schema etc. and rewrites it?
01:19 < ningu> or do you have to give it more detailed instructions?
01:19 < LouisT> yea you're right, no issues in v0.10.7
01:19 <@konobi> ningu: there's a shed load of examples in the docs
01:19 < ningu> ok
01:23 < owen1> i use nodemon to compile styl files and run browserify - nodemon -e js,styl,html,ejs --exec bin/restart-dev.sh      the last line in restart-dev.sh is pgrep -f groups-website | xargs kill && node server.js
01:23 < owen1> is this the right way to restart my server?
01:24 < accc> i use a deamon
01:24 < owen1> what do u mean? is it a package?
01:24 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:25 < samholmes> man echos "checkout my package!" Git it?
01:26 < accc> no, its a simple cron
01:26 < owen1> on your laptop?
01:26 < accc> no, on a linux server
01:27 < owen1> accc: u use cron to run stylus and browserify?
01:27 < accc> nono, the main app
01:28 < accc> ah, ok, i see, my fault :D
01:28 < ningu> then there is croon
01:28 < ningu> it's like cron but sounds like tony bennett
01:28 < accc> haha :D
01:31 < ChrisPartridge> konobi: looks pretty good!
01:36 < accc> someone know a good module or snippet to interact with a running node app via shell?
01:37 < accc> so i can log on my server via ssh and control this save way
01:37 <@konobi> accc: you'd need to be far more specific
01:38 < owen1> accc: maybe http://nodejs.org/api/repl.html ?
01:39 < accc> no, i mean... i want to control my running app (running by a cron)
01:40 < accc> via ssh
01:40 <@konobi> accc: again "interact" means different things to different people, so you need to be a lot more specific
01:40 < accc> i mean control, sending lines to my running app on the server
01:41 <@konobi> lines?
01:41 < accc> comand lines
01:42 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:42 < deoxxa> accc: i hear sockets are really good at sending lines
01:42 < owen1> (:
01:43 <@konobi> accc: ?
01:43 < accc> yeah, but not save
01:43 < deoxxa> save?
01:43 < accc> i want it for my admin control
01:43 <@konobi> accc: XY problem
01:43 < accc> safe*
01:44 < deoxxa> ^ what konobi said
01:44 < accc> hm
01:44 < addisonj_> accc: in very concrete terms, what are you looking to control? do you want to start and stop it? see the number of open sockets? 
01:44 < deoxxa> accc: ask a different question. ask about what you want to solve, not about how you've tried to solve it.
01:45 < accc> ok
01:45 <@konobi> accc: http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
01:45 < accc> to re-init, changing configurations, show stats
01:46 <@konobi> accc: repl, sockets and a seperate client
01:47 < accc> hm, ok
01:48 < accc> thanks
01:50 < deoxxa> accc: you can bring tls into the mix if you want as well
01:50 < deoxxa> accc: i.e. http://nodejs.org/docs/latest/api/all.html#all_tls_ssl
01:50 <@konobi> well, personall i'd go for a FS socket rather than a network one
01:50 < accc> yes, but i have no ssl-cert
01:50 <@konobi> you can self-sign
01:50 < deoxxa> doesn't matter, make your own
01:51 < deoxxa> (if you want)
01:51 <@konobi> they're pretty cheap these days anyway
01:51 < accc> openssl?
01:51 < deoxxa> or, yeah, use a unix socket and set the permissions properly
01:51 < deoxxa> man, it's literally on the page i linked you to
01:51 < deoxxa> just read along and you'll sort it out
01:56 < accc> yeah, i know this page. ths question was for whats meaning self-sign
01:57 < ChrisPartridge> accc: creating your own certificate to use with tls
01:58 < accc> yes, i know :D
01:58 < accc> i've communication problems
01:58 < accc> need a coffee
02:08 < elliottcable> Hey, all. Is there a way to pass flags to `npm run-script` calls?
02:09 <@konobi> isaacs: is there a way with npm to detect modules that have addons?
02:09 <@konobi> (including recursive dependencies)
02:09 < boogyman> read the documentation for the module?
02:10 <@konobi> boogyman: that's not "detect" as in programattically
02:13 < Fishrock123> Ok, seriously, what the heck? My exports are returning undefined even through they clearly are defined. https://gist.github.com/Fishrock123/5658391
02:13 <@isaacs> konobi: i dunno about recursive
02:14 < gluxon> I need to write a 6 digit number to a buffer. What would be the best way of doing that?
02:14 < gluxon> buf.write* provides 1, 2, 4, 8
02:14 < gluxon> But I have 6 :(
02:14 <@isaacs> konobi: http://registry.npmjs.org/-/scripts?match=node-gyp
02:14 <@konobi> isaacs: also, node always treats stuff as location independent for the most part, right?
02:15 <@tjfontaine> gluxon: it's not about digits, it's about the value represented, unless you want to store it as a string
02:15 < ChrisPartridge> Fishrock123: you need to define loadDb as a property of module.exports - not return module.exports
02:15 <@isaacs> konobi: what do you mean by "location independent"
02:15 <@isaacs> ?
02:15 <@tjfontaine> gluxon: https://en.wikipedia.org/wiki/Integer_(computer_science)
02:15 <@konobi> isaacs: i can move an install from /opt/local to /usr/local or $HOME/local/foo/bar without needing to recompile
02:16 < Fishrock123> ChrisPartridge: Doesn't defining it as exports work? And I need to return it to set the blog variable synchronously.
02:17 < Fishrock123> ChrisPartridge: module.exports doesn't make a difference compared to just exports.
02:18 < gluxon> tjfontaine: But I still need to write a 6 digit number :(
02:19 <@tjfontaine> gluxon: as efficiently as possible or as a string?
02:20 < gluxon> tjfontaine: I have something encoded in hex. 0xdeadbeefb2
02:20 < gluxon> var digit = 0xdeadbeefb2;
02:20 < gluxon> Needs to be added to a 1024 byte buffer.
02:20 <@tjfontaine> then you use 32bit
02:21 < gluxon> tjfontaine: Thank you.
02:21 <@tjfontaine> the question is if it will be signed or unsigned
02:21 <@tjfontaine> and big or little endian
02:21 < Fishrock123> How do I log all the methods of an object?
02:21 < gluxon> It will be signed :(
02:24 < gluxon> tjfontaine: Value is out of bounds..?
02:26 <@tjfontaine> gluxon: is it larger than 2147483647?
02:26 < gluxon> No :(
02:26 < gluxon> Alright, I ended up using write Double.
02:26 < gluxon> That looks like it'll work for now.
02:27 <@tjfontaine> well is it larger than 0x7FFFFFFF in case you needed to see that in hex
02:27 < owen1> can someone tell me why is this not working? nodemon --ext js,html,ejs,styl --exec bin/restart-dev
02:27 < gluxon> tjfontaine: Thank you :)
02:28 <@konobi> isaacs: if that makes sense
02:31 <@tjfontaine> konobi: I don't have an answer for you, but I would worry about other consumers who might rely on if process.config.node_prefix
02:31 <@konobi> tjfontaine: hhhmmm...
02:42 <@konobi> tjfontaine: not sure how common that'd be though
02:42 -!- mode/#Node.js [+o MI6] by ChanServ
02:43 <@tjfontaine> konobi: me either, and I would consider anyone relying on that instead of execPath to be doing it wrong, but we do expose the information
02:46 <@tjfontaine> konobi: module loading would be what I would worry the most about, https://github.com/joyent/node/blob/master/lib/module.js#L504 that seems relatively safe
02:46 <@isaacs> konobi: i'm not sure if gyp is kewl with that.
02:46 <@isaacs> konobi: but npm has no opinions.
02:46 <@isaacs> konobi: it might break locally-linked stuf, of course.
02:47 <@isaacs> Fishrock123: for (var i in obj) console.log(i)
02:47 <@tjfontaine> node-gyp should be fine since it dumps headers in ~/.
02:47 <@isaacs> Fishrock123: or: console.log(Object.keys(obj))
02:48 <@isaacs> tjfontaine: oh, i think it's waf that is annoying about caching file paths
02:48 < Fishrock123> isaacs: Thanks. Dangit this is a weird issue I have.
02:48 <@isaacs> Fishrock123: also, if you want to see even non-enumerables: console.log(Object.getOwnPropertyNames(obj))
02:48 <@tjfontaine> isaacs: ya, I would say mostly we're "portable" but it's not something we guarantee to work
02:50 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:51 < elliottcable> Hey, all. Is there a way to pass flags to `npm run-script` calls?
02:52 < Fishrock123> isaacs: Ok this is just nuts. Everything I assign to my module's exports is undefined...
02:56 < ckknight> Fishrock123: do you have a dependency cycle?
02:57 < elliottcable> alternatively:
02:57 < Fishrock123> ckknight: Huh?
02:57 < elliottcable> is there a way to *set up* the NPM environment electively, from within a script?
02:57 < ckknight> a requires b, b requires a
02:57 < elliottcable> i.e. I have a script right now that depends heavily on $npm_package_config_... etceteras
02:57 < ckknight> when b requires a, it gets a reference to the object of a that is later going to be populated
02:57 < elliottcable> and if I run it without `npm run-script ...`, then I can't get those values into it
02:57 < elliottcable> but if I run it *with* `npm run-script`, I can't pass it arguments.
02:57 < elliottcable> so I dunno what to do.
03:00 < Fishrock123> hmmm..
03:01 < Fishrock123> ckknight: So your saying requiring it before stuff in it gets defined?
03:02 < elliottcable> Fishrock123 â‘Š No.
03:02 < ckknight> Fishrock123: I'm saying that's what it seems like you're doing.
03:02 < elliottcable> Fishrock123 â‘Š The thing that's undefined ... the file that it's in, that you're having things be unexpectedly undefined ..
03:02 < ckknight> thus the missing methods.
03:02 < elliottcable> Fishrock123 â‘Š is that file *required by*, the thing you're trying to require?
03:02 < elliottcable> you're doing `require('i_want_this')`, and it's not working. Inside, `me.js`.
03:03 < elliottcable> I'm asking if i_want_this.js has a `require('me.js')` statement
03:03 < Fishrock123> router.js requires blog.js. Not the opposite.
03:03 < elliottcable> or, does the same thing happen more indirectly (i.e. something else in between the two.)
03:03 < elliottcable> and blog never requires 'router'?
03:03 < Fishrock123> Nope.
03:04 < Fishrock123> *sigh*
03:05 < mscdex> Fishrock123: can you post the rest of the module?
03:05 < Fishrock123> mscdex: Sure.
03:06 < elliottcable> Anybody? NPM question? >:
03:07 < Havvy> Just ask.
03:07 < Havvy> Oh, is it asked?
03:07 < Fishrock123> mscdex: Both full files: https://gist.github.com/Fishrock123/5658391
03:07 < mscdex> Fishrock123: also, you ought to pass in a callback to that loadDb that's executed when the database is opened and your initial queries are finished
03:08 < owen1> this nodemon command should work but it doesn't: 'nodemon -e js,styl,html,ejs --exec bin/restart-dev'   can someone try it? clone https://github.com/oren/node-website-template.git && cd node-website-template && npm install && npm start
03:09 < owen1> and also npm install nodemon -g
03:10 < elliottcable> Havvy â‘Š yah, up above
03:12 < Fishrock123> mscdex: Yeah I'll do that instead, but It shouldn;t be the issues...
03:12 < mscdex> Fishrock123: i know, just thought i'd mention it
03:13 < Fishrock123> And it's not like it's just my machine that won't run it. Both my comp and nodejitsu don't run this.
03:14 < mscdex> huh... works for me
03:14 < mscdex> Fishrock123: what node version?
03:16 < Fishrock123> My comp: 0.10.7 Nodejitsu: 0.8.23?
03:19 < mscdex> Fishrock123: what if you try just this?: https://gist.github.com/mscdex/5660317
03:22 < Fishrock123> mscdex: Still errors.
03:22 < Fishrock123> mscdex: O_o
03:23 < mscdex> Fishrock123: you're running `node router.js`?
03:23 < Fishrock123> No it's required in app.js
03:24 < Fishrock123> require('./app/server/router');//(app);
03:24 < mscdex> hrmm
03:24 < mscdex> Fishrock123: what if you replace './modules/blog' with `__dirname + '/modules/blog'` ?
03:27 < Fishrock123> mscdex: But it doesn't say that it couldn;t require it... But ok
03:28 < mscdex> Fishrock123: well, try running that router.js manually: `cd app/server; node router.js`
03:28 < mscdex> Fishrock123: hopefully that will at least print out hello
03:28 < Fishrock123> mscdex: __dirname + '/modules/blog' Didn;t work. Trying manually.
03:29 < Fishrock123> .... Oh shi
03:37 < Fishrock123> mscdex: I had duplicate blog.js files in different dirs and was editing the wrong one.
03:37 < Fishrock123> mscdex: I'll go home now.
03:37 < mscdex> Fishrock123: :-)
03:37 < ssafejava> Does anyone have tips on reducing round-trips when parsing a streamed response? I'm getting a medium-sized response from a high-latency server (~230ms). Using traceGL I can see about 6-10 chunks arriving at a time before there's a 230ms wait, then another 6-10, etc. until the whole response is streamed after as much as 2000ms. If I could get the remote server to send me the whole file at once without ACKs it wou
03:37 < ssafejava> ld be much faster.
03:38 < ssafejava> it's being sent transfer-encoding:chunked; is there usually a RT between chunks?
03:38 <@tjfontaine> http://en.wikipedia.org/wiki/Transport_Control_Protocol
03:39 < deoxxa> ssafejava: highWaterMark *might* help - ctrl+f on the node stream docs for more
03:40 < ssafejava> tjfontaine: Yeah, I had a suspicion it might go down to the TCP layer itself, in which case I'm hosed
03:41 <@tjfontaine> well I mean I don't know that your problem is tcp, but you're not going to really reduce ack's unless things aren't doing mtu right or you're getting fragmentation
04:09 < ssafejava> Yeah, it looks like the initial TCP window size is the problem. 
04:18 < px> what are you supposed to do about socket hangup errors
04:22 <@tjfontaine> ssafejava: window scaling is some frustrating stuff
04:23 < ssafejava> tjfontaine: I agree. I had hoped that since it is storing the connections in the globalAgent, the window would remain large. But I admit I don't know exactly how that works. I'm on a pretty stable connection, just high latency.
04:23 <@tjfontaine> ssafejava: you might try twiddling nagle http://nodejs.org/api/all.html#all_socket_setnodelay_nodelay
04:24 <@tjfontaine> I'm not always sure of the interaction there, but there are probably platform knobs you can use as well for window'ing
04:24 <@tjfontaine> if you're getting max-mtu packets already nagle probably isn't playing, just the scaling
04:25 < owen1> is there a good reason why i need to install nodemon globally as oppose to local?
04:25 < ssafejava> Yeah I'm getting max mtu packets. I could play with the window size on the remote server, which I control too. Just figured the open connections would figure out their optimum window size after some time
04:26 < owen1> i feel bad for other devs whenever i force everyone to install global package
04:26 < ssafejava> owen1: so you can run it via `nodemon server.js` instead of `./node_modules/.bin/nodemon server.js`
04:27 <@tjfontaine> owen1: it's not necessarily required to install -g, but if you don't you need to set your PATH to something to accomodate it
04:27 <@tjfontaine> you could `export PATH=./node_modules/.bin:$PATH`
04:27 <@tjfontaine> but they would still need to be in the right place at the right time for that to work
04:27 < owen1> or i can put it in the scripts section and run with npm start
04:28 <@tjfontaine> all kinds of ways to skin this cat
04:28 < owen1> it's just more polite i think
04:28 < ssafejava> Yeah you can do that but nodemon is a nice global imo
04:29 < owen1> i guess if the entire team adopt nodemon to be THE package they use for other projects
04:29 < owen1> than it's fine
04:29 < owen1> but some devs use supervisor or others
04:29 < owen1> so it sucks
04:29 < ssafejava> It just sits there in your PATH, it'
04:29 < ssafejava> it's not like you're forced to use it.
04:30 < owen1> ok
04:55 < ak5> hey guys, I just cloned my app from git, did npm install and now I get the error "Error: Cannot find module 'pause'". I have Express in package.json (ver. 3.0.5) as well as jade and mongoose.
05:05 < elbuo8> can anyone give me a hand with this issue? im getting a callback twice http://stackoverflow.com/questions/16764160/node-js-callback-called-twice/16768940?noredirect=1#16768940
05:07 < deoxxa> doesn't look like javascript to me
05:08 < deoxxa> how anyone decides that that's easier to read than js, i'm not sure
05:08 < ChrisPartridge> yeah, although - it would probably help if you showed how/where you are calling this method
05:08 < elbuo8> sure
05:09 < elbuo8> one second
05:11 < elbuo8> https://gist.github.com/elbuo8/5660629
05:17 < ningu> I would like for my API users to be able to send request parameters as a JSON object. however, a lot of these requests are things which normally would be implemented using HTTP GET -- they make no modifications, can be cached, etc. I'm currently using POST but not very happy with that. any ideas?
05:18 < ningu> I know this isn't a direct node question but I figured some folks here have experience designing APIs.
05:18 < chilts> is the JSON very big and does it have multiple levels?
05:19 < ningu> it is allowed to be very big. in practice, it may not be. there is only one level, but the values are often arrays.
05:19 < ningu> so basically it's { "a": "b", "c": [1,2,3...], ... }
05:19 < ningu> the arrays can, in principle, have a very large number of items -- I think the current limit I set is 10k.
05:20 < ningu> so hopefully it makes sense why I did it with POST rather than query params.
05:20 < chilts> I think POST is fine, but yeah can't really cache that
05:20 < chilts> yeah, makes sense
05:20 < chilts> but as you say, it loses some benefits of GET
05:20 < ningu> well what I've done on the server end is to cache the value from the database, so the server cost of generating it is lower, even if clients don't cache it
05:21 < chilts> still, GET requests can be fairly large these days, but then if everyone's JSON is different the caching doesn't help anyway
05:21 < chilts> so I'd just stick to POST
05:21 < Zolmeister> if its over 10k, I would probably encode it and blob it
05:21 < chilts> stick to POST I think
05:21 < ningu> 10k array *values*... just thinking about how many bytes that would actually be
05:21 < chilts> unless you somehow change the input format to be nicer for query params
05:22 < ningu> depends on how big the id#s are I guess
05:22 < ningu> since the large arrays of values are inevitably row ids that were returned from a previous API query
05:22 < Zolmeister> just out of curiosity, why would you API users be sending you 10k?
05:23 < ningu> Zolmeister: we're still learning what our API users want. this API basically provides translations. one of the things you need if you want to translate an english word into anything (for example) is its expression id. so if you have 10k words in a text file that you know you want to translate, you could get all of their ids at once.
05:24 < ningu> I can't remember if I implemented a way yet to translate directly from the text strings.
05:24 < ningu> but in any case, you might want to translate a bunch of things at once, too.
05:25 < ningu> 10k might be too high of a limit, especially since it won't give you more than 2000 results in one query. but iirc there are a few cases where you might have 10k possible search values and still not get anywhere near 10k results.
05:25 < Zolmeister> oh, ok. then why do you need to cache client side?
05:26 < ningu> for that case you probably don't. but I can imagine there are others where it might be nice. but currently *everything* is via POST and this same format, no GET at all.
05:26 < ningu> I could make them both possible
05:27 < ningu> but what do you do if you have the equivalent of { "a": [1,2] } in query params? ?&a=1&a=2 ?
05:27 < ningu> for simple cases, GET might be just fine
05:28 < Zolmeister> it sounds like you want a multipart/form-data encoded object, no?
05:28 < ningu> but I don't want to rule out the other cases
05:29 < chilts> funny thing is, I still like using query params rather than all this RESTful or XML/JSON bodies stuff
05:29 < ningu> well, right now requests are via JSON and responses are too, and I like that
05:29 < chilts> it does what it says perfectly well
05:29 < chilts> you can still have JSON responses from it :)
05:29 < Zolmeister> oh, I see, you have json working, but want GET too
05:29 < ningu> I suppose I could support multipart/form-data POST bodies
05:29 < ningu> if I have GET, I might as well support that too
05:30 < ningu> yeah... I'm wondering how translatable that format is into JSON
05:30 < ningu> specifically for arrays
05:30 < Zolmeister> if its not too complex, you could specify lists as comma delimited strings for GET
05:30 < ningu> hrm, I'll also have to do string-to-number stuff
05:31 < ningu> I know that ?a=1&a=2 *can* be parsed as an array, but I probably shouldn't assume that everyone can generate that
05:31 < brainproxy> something strange.. I'm probably doing something stupid.. I have some relative paths setup in some pages I'm service with node-static, but on my.github.io they work different, even though it seems like they should work in exactly the same way
05:31 < Zolmeister> ningu: a=1,2,3 - why not that?
05:32 < ningu> Zolmeister: sure, seems reasonable enough
05:32 < ningu> hrm... but RFC 3986 doesn't allow commas un-urlencoded :(
05:32 < ningu> I don't know if anyone cares...
05:33 < Zolmeister> I've used apis with commas
05:33 < ningu> I guess they can encode the comma if they feel like it
05:40 < ningu> the fact that http 304 = not modified is really weird. how is that a redirect?
05:40 < xp_prg2> I need a live auction system
05:41 < xp_prg2> anyone know of a good one that is opensource?
05:41 < ak5> xp_prg2: ok
05:41 < ak5> xp_prg2: check drupal distributions
05:41 < ak5> they had groupons and shit when that was hot
05:46 < ChrisPartridge> ningu: who says it's a redirect?
05:46 < progrock`> hmm, I'm trying to find user in my users collection (mongo) and update the lastLogin field... I'm using findAndMondify, but instead of updating the lastLogin field, its replacing the whole user document with just the latLogin field
05:46 < progrock`> can anyone explain where I am going wrong?
05:47 < ningu> ChrisPartridge: well, 3xx is the redirect category
05:47 < ningu> "This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request."
05:48 < ChrisPartridge> ningu: yep, so in the case of 304, get it from yo cache
05:48 < ningu> I suppose, yeah
05:48 < ningu> but the name of the category in the RFC is "Redirection"
05:48 < ningu> I guess it means redirect to the cache
05:49 < ChrisPartridge> yeah
05:49 < ningu> progrock`: you want { $set: { lastLogin: foo } }
05:50 < ningu> http://docs.mongodb.org/manual/reference/operator/#update-operators
05:50 < progrock`> ningu: thank you
05:52 < progrock`> now would be cool if I could upsert the whole profile if no user is found.... but since I'm only updating the lastLogin, guessing that wont work
05:52 < c0nrad> oh herros
05:52 < ningu> progrock`: you can use $setOnInsert for that
05:52 < ningu> if you know the values the other fields would have
05:53 < progrock`> ningu: so if the variable profile was the new user profile (if one deosn;t exist) what would I do
05:53 < ningu> the variable profile? huh?
05:54 < progrock`> var profile = { ...objet containing al linfo for new user to go into db... }
05:54 < ningu> { $set: { lastLogin: foo }, $setOnInsert: profile }
05:54 < ningu> and you wouldn't do findAndModify, you'd do... whatever upsert is called
05:54 < progrock`> oh, cool, thank you
05:55 < ningu> oh, sorry, it *is* findAndModify
05:55 < ningu> with the upsert option
05:55 < progrock`> yeah
05:55 < progrock`> I got that much
05:55 < progrock`> cool, time to test, thank you
05:59 < progrock`> well that worked beautifully
05:59 < progrock`> hell, got rid of half my code
05:59 < ningu> :)
06:04 < progrock`> man, 3rd time today I look up at the tv (that i was paying no attention to) and a gay movie is on (by gay, i mean, its centered around 2 guys relationship_
06:05 < Oddman> awwww, you poor thing
06:05 < Oddman> #firstworldproblems
06:05 < progrock`> hahaha
06:05 < xp_prg2> ixnay on the aygay
06:05 < progrock`> god must be trying to make me gay
06:05 < progrock`> lol
06:06 < progrock`> oh man.. so 'node-boilerplate' probably would have been a goo dspot to start with this app, haha
06:06 < progrock`> didnt see it had Socket.io already 
06:07 < progrock`> now if it had basic mongo setup, my app ould have been halfway done before I started
06:07 < progrock`> but I'm learning as I go, so this is good
06:08 < ningu> http://i.imgur.com/jcMbhDw.jpg
06:08 < progrock`> this app is gonna be pretty damn ugly first go around, haha
06:14 < xp_prg2> I need some advice I have to do a live auction system that is web based
06:14 < xp_prg2> I have done a little bit of node.js but more python
06:15 < xp_prg2> any suggestions on frameworks etc? ?
06:15 < ningu> if you want realtime updates you could use socket.io
06:15 < substack> xp_prg2: before you go hunting down a framework, what do you actually need to do?
06:16 < xp_prg2> ya socket.io, I was trying to remember that
06:16 < ningu> yes, that's a better question
06:16 < substack> probably there are tiny modules that can narrowly solve your problem instead of a giant kitchen sinky framework
06:16 < xp_prg2> well, realtime bidding, notification of bidding events, etc...
06:16 < ningu> unfurnished german apartment sometimes come without a kitchen sink
06:16 < ningu> just saying
06:16 < ningu> apartments*
06:17 < xp_prg2> hmm? ok, didn't know you guys were so smart :>
06:17 < ningu> xp_prg2: sorry, I was just being annoying
06:17 < xp_prg2> unfortunately the requirements are a little bit vague
06:17 < substack> xp_prg2: what kind of data stream will you be using?
06:17 < ningu> something socket-y sounds like it would be useful but you don't have to go with socket.io, that's just the most well known
06:17 < substack> database / realtime feeds
06:17 < xp_prg2> just your basic auction shit
06:17 < xp_prg2> ya it has to be sockety for sure
06:18 < xp_prg2> but I want graceful degradation
06:18 < xp_prg2> I wish I could make drupal or wordpress do this, but they are not realtime :(
06:20 < xp_prg2> so, handlebars, socket.io, jquery?
06:20 < xp_prg2> should I use mysql while I am at it?
06:21 < ChrisPartridge> xp_prg2: I'd probably get some concrete requirements to start with
06:21 < substack> yes gather more concreteness before deciding specific technologies on a whim
06:21 < progrock`> ok, next step... need to add a doc id to the url:  myapp.com/docid  ... if document matches id, load document.. or doesn;t match (or non existent) create new doc and update url
06:21 < Lorentz> there's no point picking out technology to use yet if you don't yet have exact idea of what you're trying to achieve
06:21 < xp_prg2> its concrete enough, I know what auctions require
06:21 < progrock`> guessing this is actually pretty easy with express
06:21 < xp_prg2> I have heard of express and faye, no experience with them
06:22 < Lorentz> otherwise if it's jsut new to you, go do it and you'll find out if it works or not
06:22 < Lorentz> instead of asking us who has no idea what exactly you're trying to do
06:22 < progrock`> xp_prg2: havent trued faye.. but express is a quick way to get rolling out of the box
06:22 < xp_prg2> does it have graceful degradation?
06:22 < Lorentz> afterall, an auction site could just as well be done in drupal if you know what you're doing
06:22 < Lorentz> but that's my idea of auction site, and yours could be different
06:22 < Lorentz> with different requirements entirely
06:23 < xp_prg2> well I need realtime, drupal doesn't do that
06:23 < Lorentz> what is realtime?
06:24 < ningu> progrock`: use a named parameter and app.param('fooId') or whatever
06:24 < progrock`> I'm developin my app ass backwards... choosing which technologies, 90% independant of that app.. but... just trying to learn, and possibly havea useable end product when I';m done
06:24 < progrock`> ningu: yeah, I saw an example recently.. somthing like /:id  ... looking for it now
06:24 < Lorentz> I did a cms in node recently, had no idea how to do an actual site in nodejs besides "oh need to use express, maybe"
06:25 < Lorentz> some weekend hackathon thing
06:25 < Lorentz> nothing you can do except actually do it and read up if you don't know something, and try different things
06:25 < progrock`> Lorentz: yeah, so far going pretty smooth.. dedicating a couple of hours a night after work, and making a lot of progress
06:26 < xp_prg2> anyway, my experience says to use jquery, socket.io, and node.js
06:27 < Lorentz> try it out and see if it works
06:27 < buttface> hi newbie alarm, i have problems to find a proper way to use callbacks and synchronous calls in my little framework. http://pastebin.com/3SP2660J
06:28 < buttface> this does not work  i know
06:28 < xp_prg2> I have more experience with python, is node.js better?
06:28 < nightfly> Is there some magic variable that contains the current scope in JavaScript?
06:28 < Lorentz> better for what? only you can answer that, we don't know what criterias you need
06:30 < buttface> is there a way to set the assert from the callback?
06:37 < JediUnixMaster> [new to node] npm came with a mac download but not my ubuntu installation. what is the best way to install npm on my linux box?   i'm not sure of the usage
06:38 < DevDoo> npm didn't come with node?
06:38 < Lorentz> my preferred way is to download the source and compile it
06:38 < Lorentz> node, that is
06:38 < Lorentz> and yes it should come with node
06:38 < DevDoo> ^
06:38 < JediUnixMaster> no it didn't, i was surprised to
06:39 < SomeoneWeird> how did you install it, JediUnixMaster ?
06:39 < JediUnixMaster> i did a sudo apt-get install nodejs
06:40 < SomeoneWeird> yeah um don't do that
06:40 < SomeoneWeird> unless you added chrislea's repo
06:40 < SomeoneWeird> sudo apt-get install npm 
06:40 < DevDoo> What's wrong with installing via apt?
06:40 < ChrisPartridge> its old
06:40 < DevDoo> ...just curious.
06:40 < DevDoo> Oh.
06:40 < Lorentz> generally outdated
06:40 < SomeoneWeird> very very old
06:40 < ChrisPartridge> unless you use chrislea's updated repo
06:40 < progrock`> whats the 3rd argument to app.get when using a named parameter? I see people labeing it as 'next'
06:40 < DevDoo> Ubuntu...
06:40 < DevDoo> Kinda expected.
06:40 < JediUnixMaster> damn, was watch a lynda.com node tut
06:40 < DevDoo> ;-;
06:41 < SomeoneWeird> very very old
06:41 < nightfly> yeah...
06:41 < SomeoneWeird> it's like .6 or something
06:41 < DevDoo> ?!
06:41 < Lorentz> I don't think debian even has nodejs
06:41 < ChrisPartridge> JediUnixMaster: remove it via apt, compile from source (it's easy), or https://launchpad.net/~chris-lea/+archive/node.js/
06:41 < Lorentz> by default
06:41 < SomeoneWeird> Lorentz, it does
06:41 < Lorentz> I see it in sid
06:41 < Lorentz> I'm on stable though, wheezy, and it ain't here
06:41 < SomeoneWeird> heh
06:41 < Lorentz> and no way I'm going onto sid
06:42 < JediUnixMaster> ok ChrisPartridge 
06:42 < SomeoneWeird> why not?
06:42 < DevDoo> Haha I just checked.
06:42 < Lorentz> that said, even in sid, it's 0.6.19
06:42 < DevDoo> It's 0.6
06:42 < DevDoo> Wow.
06:42 < Lorentz> not 0.10.x
06:42 < SomeoneWeird> DevDoo, as i said, very very old
06:42 < Lorentz> sid is just too unstable for me, even testing is so much so, unless it's about a month or two before release
06:43 < SomeoneWeird> http://ftp.uk.debian.org/debian/pool/main/n/nodejs/
06:43 < SomeoneWeird> i see node in wheezy
06:43 < DevDoo> Like a boss: https://www.archlinux.org/packages/community/i686/nodejs/
06:43 < DevDoo> Lmao.
06:44 < JediUnixMaster> ChrisPartridge: is that your site?
06:44 < DevDoo> Launchpad?
06:44 < SomeoneWeird> JediUnixMaster, no
06:45 < xp_prg2> does express do realtime sockets with graceful degradation?
06:45 < deoxxa> yes, in realtime it uses sockets. then it gracefully degrades to not using sockets when you stop the application.
06:46 < Lorentz> SomeoneWeird: isn't that the pool
06:46 < progrock`> xp_prg2: socket.io does.. no express
06:46 < Lorentz> everything's there, no?
06:46 < progrock`> not*
06:46 < ChrisPartridge> deoxxa: lol
06:46 < xp_prg2> why would I use express if it doesn't do graceful degradation?
06:46 < SomeoneWeird> deoxxa, lol
06:46 < xp_prg2> does anyone care about my needs?
06:46 < DevDoo> ..lol.
06:46 < Lorentz> xp_prg2: why would you use a sieve if it doesn't hold water?
06:47 < Lorentz> you're asking strange things there
06:47 < deoxxa> xp_prg2: there's a fundamental misunderstanding here - express doesn't do websockets. a bunch of other libraries will happily do websockets though, and will work in harmony with express.
06:47 < Lorentz> express is a website framework, it has nothing to do with sockets itself
06:48 < Lorentz> SomeoneWeird: yep, it's the pool, sid has 0.6, and experimental has 0.10.7
06:48 < Lorentz> experimental? nope nope nope nope nope
06:48 < SomeoneWeird> so then use nvm
06:48 < SomeoneWeird> not that big of a deal
06:48 < Lorentz> I just compile from scratch
06:48 < xp_prg2> ok, I get it, its a hammer that puts nails in, I just want to mash it with my hand
06:49 < Lorentz> I'll give nvm a go though, later tonight
06:54 < JediUnixMaster> So SomeoneWeird if I add Chrisleas untrusted repo, then do a sudo apt-get nodes and nom?
06:54 < Lorentz> npm, not nom, but sure
06:54 < JediUnixMaster> auto spell
06:55 < Lorentz> because nom is a perfectly valid word in english vocab
06:55 < SomeoneWeird> JediUnixMaster, yes
06:55 < SomeoneWeird> nomnomnom
06:55 < JediUnixMaster> lol
06:56 < JediUnixMaster> this is probably stupid, but who is chrislea?
06:56 < Lorentz> who knows, a package maintainer
06:57 < Lorentz> hopefully he/she is doing a good job at it too
06:57 < Oddman> change it to Chris Rea
06:57 < Oddman> and you have a hell talented singer :P
06:59 < JediUnixMaster> ok, cool, thx
07:03 < syskk> anyone use sequelize? any method to get all associations of an object and their corresponding alias?
07:06 < progrock`> I have to create a collection before trying to access/insert into it in mongo, right?
07:06 < progrock`> would be cool if I didnt, haha
08:12 < syskk> https://gist.github.com/5661243
08:13 < syskk> anyone knows why i cant access fixture inside the _.each iterator? isn't it supposed to have access to the parent scope?
08:15 < syskk> what kind of sorcery is this
08:19 < syskk> ahhh damnnn it
08:19 < syskk> i redefined fixture 
08:19 < xp_prg2> can I do session variables and stuff with node?
08:22 < px> yes you can
08:22 < px> try using expressjs
08:25 < pabbie> hello, everyoneâ€¦I'm trying to use node.js to access an mysql database but I'm having troubles with it. This is what I'm using https://github.com/felixge/node-mysql#running-unit-tests
08:26 < pabbie> any help is much appriciated
08:26 < deoxxa> pabbie: it's line 12 of your program
08:26 < deoxxa> "but how do you know that without even seeing the source", i pretend to hear you say
08:26 < deoxxa> to which i reply "exactly!"
08:26 < pabbie> whaaaat? lol
08:27 < timoxley> pabbie yep, line 12
08:27 < timoxley> totally wrong.
08:28 < pabbie> you guys are trolling me
08:28 < deoxxa> pabbie: my point was "show some code already"
08:28 < pabbie> riiiight
08:28 < pabbie> one sec
08:28 < deoxxa> well it's that or we can keep guessing at random lines
08:29 < deoxxa> we'll eventually get the right one
08:29 < pabbie> hehe :P Im trying this unit test http://pastebin.com/JNbXdA4D
08:30 < pabbie> but it keep giving me this error: "bash config.sh
08:30 < pabbie> ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)
08:30 < pabbie> make: *** No rule to make target `test'. Â Stop"
08:31 < pabbie> I scared deozza away
08:32 < pabbie> deoxxa*
08:32 < fiws> do you have no password for root on your local mysql server?
08:32 < pabbie> yes I do
08:32 < syskk> is there any way in EventEmitter to call a listener for events that were fired before the listener was assigned?
08:33 < pabbie> and I wrote it
08:33 < pabbie> the password is correct
08:33 < AAA_awright> syskk: That would require someone record how the events were called, no
08:33 < syskk> ok
08:35 < pabbie> Do i have to configure some files in the mysql folder this created?
08:38 < fiws> try mysql -u root -p i think that will prompt you to enter the password
08:40 < pabbie> fiws ty, ill try that =)
08:48 < pabbie> fiws that kinda worked but now I got a different error:
08:48 < pabbie> ERROR 1049 (42000): Unknown database 'CREATE DATABASE IF NOT EXISTS node_mysql_test'
08:48 < pabbie> make: *** No rule to make target `test'.  Stop.
08:52 < pabbie> anyone? ^
09:01 < pabbie> woooo success! Welcome to the MySQL monitor.  Commands end with ; or \g.
09:01 < pabbie> Your MySQL connection id is 5383
09:01 < pabbie> Server version: 5.1.54-1ubuntu4 (Ubuntu)
09:01 < pabbie> now what? lmfao
09:34 < floody> hello
09:35 < greelgorke> hi
09:36 < fiws> hi!
09:38 < deoxxa> hello!
09:39 < elliottcable> hi.
09:39 < elliottcable> woah, I typed hi without looking, and noticing that four other people had said it first.
09:39 < elliottcable> coincidental.
09:39 < elliottcable> What's up, floody / greelgorke / fiws / deoxxa?
09:40 < deoxxa> you know, the usual
09:40 < deoxxa> flying to sydney tomorrow morning, then home in the evening
09:40 < deoxxa> which will be "fun"
09:40 < floody> nothing special, i'm trying to figure out how v8 engine works
09:40 < floody> and there?
09:40 < MiracleBlue> Ahh sydney
09:41 < yawnt> deoxxa: where you at
09:41 < yawnt> ?
09:41 < deoxxa> home :>
09:41 < deoxxa> melbourne
09:42 < yawnt> LIES!
09:42  * MiracleBlue is also in Melbourne
09:42 < deoxxa> woo!
09:42 < MiracleBlue> Melb ftw :D
09:42 < deoxxa> yawnt: uso ja nai ne :<
09:43 < deoxxa> MiracleBlue: i'm a fairly recent migrant to these parts - live in brisbane until a few years ago
09:43 < yawnt> deoxxa: suuuuure
09:43 < deoxxa> i do like your weather
09:43 < yawnt> as if i believed you
09:43 < MiracleBlue> deoxxa: Oh nice.  I'm originally from CAnberra myself.  Moved here a little over 2 years ago now.
09:43 < yawnt> and so they discovered
09:43 < yawnt> that no one in melbourne is native
09:44 < MiracleBlue> Got a job, met a girl, married said girl, all here in good ol Melbourne :P
09:44 < deoxxa> yawnt: just about
09:44 < deoxxa> yawnt: makes for an interesting place though!
09:44 < yawnt> totally
09:44 < yawnt> when i will be rich
09:44 < yawnt> i'll come to melbourne
09:44 < deoxxa> MiracleBlue: ha, well i'm down for 1/3 of those things
09:44 < deoxxa> (got a job)
09:44 < MiracleBlue> Nice!
09:45 < yawnt> i thought it was marrying a girl without meeting her
09:45 < yawnt> :D
09:45 < deoxxa> lol
09:47 < Testo> hello, im getting error can you help me pls 
09:47 < Testo> error : warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
09:47 < Testo> can i solve that issue?
09:47 < greelgorke> . Use emitter.setMaxListeners() to increase limit.
09:48 < deoxxa> or ignore it
09:48 < deoxxa> or stop adding so many listeners without removing some
09:48 < Testo> io.sockets.setMaxListeners(); doenst work 
09:48 < yawnt> lol
09:48 < deoxxa> Testo: paste the full stack trace
09:48 < gildean> Testo: are you actually adding those listeners on purpose, or are you doing it by mistake?
09:49 < Testo> deoxxa: (node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit. Trace     at Socket.EventEmitter.addListener (events.js:160:15)     at Socket.Readable.on (_stream_readable.js:679:33)     at Socket.EventEmitter.once (events.js:179:8)     at TCP.onread (net.js:527:26)
09:49 < greelgorke> pastebin or gist, post code 
09:50 < Testo> gildean: i dont understand exactly what u mean 
09:52 < gildean> Testo: i don't know how to ask the question more simply, are you setting listeners to an eventemitter on purpose, or do you have a bug
09:52 < gildean> i'd guess it's the latter
09:52 < Testo> greelgorke: http://pastebin.com/pHNLfmuW
09:53 < Testo> gildean: http://pastebin.com/pHNLfmuW look at my code 
09:53 < Testo> where is that problem? :S
10:04 < Testo> gildean: i'm trying for solve this problem for 2 days. if it s impossible, i will writing with java :S
10:08 < greelgorke> Testo: your code and the stack trace do not match. in your code you assign far less listeners 
10:12 < HSL> morning!
10:12 < Testo> greelgorke: Already, there is approx 4 listeners. :S
10:13 < Testo> i guess, not too much for nodejs
10:13 < greelgorke> i think you have to post more code
10:14 < greelgorke> you stack trace points somewhere else
10:14 < HSL> I'm seeing two a strange issues with my node app, I use socket.io to store all connects and disconnects from a website to a database, the first is that some clients just ignore node. and others don't send a disconnect event to the node server when they do disconnect.
10:20 < gildean> Testo: can't see that problem straight away from your code, but there are other things i'd change in the code
10:20 < gildean> like for example in the connection event of the server you already have the socket, so instead of doing io.sockets(socket.id).emit, you could just do socket.emit
10:22 < Testo> gildean: what like other things?
10:24 < Stephen> Anyone here work with emscripten enough to at least tell me how it generates the entry point?
10:24 < pabbie> Stockholm Sweden here!
10:26 < caolanm> any leveldb folk know how to release a file lock after a process exited badly?
10:27 < Testo> gildean: I already used like that but where it should
10:29 < ry_> hi
10:29 < ry_> guys anyone working on nodejs
10:29 < ry_> ?
10:30 < ry_> ??
10:30 < ry_> i am new here..
10:31 < ry_> anyone>>>
10:31 < ry_> ??
10:31 < greelgorke> gosh, you're in nodejs channel, just ask what you desire...
10:31 < ry_> ok
10:31 < ry_> regarding using redis with mongodb
10:32 < ry_> anyone had with these two ?
10:32 < SomeoneWeird> probably most of the channel
10:33 < rvagg> caolanm: it should be safe to just open the db again
10:33 < greelgorke> isn't "using redis with mongodb" the same as "using redis and mongodb"? 
10:33 < rvagg> caolanm: if it's stuck, then perhaps try deleting the LOCK file inside the dir
10:33 < rvagg> but.. you shouldn't normally need to do that
10:33 < SomeoneWeird> greelgorke, wo
10:33 < SomeoneWeird> t
10:33 < ry_> looking for reference on that
10:33 < caolanm> rvagg: tried both of those, no luck
10:33 < ry_> redis + mongodb
10:34 < caolanm> rvagg: deleted the whole db directory and it still says locked
10:34 < SomeoneWeird> redis.io + mongodb.org
10:34 < rvagg> caolanm: yikes, that's very odd, you're absolutely sure that the process is gone?
10:34 < caolanm> rvagg: will, I guess it might not have been killed when node.js died
10:34 < caolanm> *well
10:34 < caolanm> let me see..
10:35 < SomeoneWeird> sudo killall *
10:35 < SomeoneWeird> erm
10:35 < SomeoneWeird> yeah.
10:35 < caolanm> rvagg: ps aux | grep level gives me nothing ... what's it likely to be called?
10:36 < SomeoneWeird> it's a library not a seperate process
10:36 < rvagg> caolanm: it should be wrapped in the node process, just double check that the node process is actually properly dead and not zombiefied or anything weird
10:36 < rvagg> caolanm: btw, what OS?
10:37 < caolanm> rvagg: linux
10:38 < rvagg> caolanm: hm, same here and I haven't seen that before, very odd!
10:38 < caolanm> rvagg: definitely not running
10:38 < SomeoneWeird> debugging time
10:38 < rvagg> caolanm: are you using levelup or the leveldb package?
10:40 < ry_> ??????
10:41 < HSL> ry_: just ask your question, if you are just looking for a reference google is your friend :)
10:41 < caolanm> rvagg: pouchdb, which uses levelup I think
10:41 < rvagg> caolanm: indeedy, can you give me the exact error? I'm wondering if pouch is doing something odd
10:43 < caolanm> rvagg: IO error: lock /home/caolan/projects/hdb/_pouch__allDbs/by-sequence/LOCK: already held by process
10:44 < caolanm> rvagg: tried deleting that file, same error. tried rm -rf _pouch__allDbs ..same error
10:45 < rvagg> caolanm: that's a leveldb error but I think it only occurs if leveldb is instructed to open/lock the same directory/db that it already has open in the current process
10:46 < rvagg> caolanm: so I suspect pouch is doing a double-open somewhere
10:47 < rvagg> caolanm: it's even prior to the actual fcntl() call that does a system lock
10:47 < rvagg> caolanm: perhaps do some hackery inside pouchdb and console.log each time it does a levelup()
10:49 < caolanm> rvagg: ok
10:53 < caolanm> rvagg: https://gist.github.com/caolan/25d04149295749b7d89f
10:53 < caolanm> rvagg: looks like it is opening the same dbs twice
10:54 < rvagg> aye
10:54 < rvagg> prod @chesles about it I reckon
10:56 < caolanm> rvagg: thanks, will do
11:00 < aendrew> Howdy all!
11:05 < aendrew> So, I'm admittedly a bit of a Node.js newbie, so apologies if this is really evident, but is there a way to deploy from CI that's particularly accepted within the community? I have Hudson running the build and doing "npm install" for all dependencies -- what next? I'm ultimately wanting to push builds to a staging server, which uses as "Pathname Only" node-http-proxy ProxyTable to route traffic. But I also want to be able to test locally, which might have 
11:05 < aendrew> different port numbers than on the staging server.  
11:05 < aendrew> I was considering using Haibu, but was told that's not going to be ported to 0.10 (and is thus fairly end-of-lifecycle, I'm guessing?).
11:13 < mscdex> aendrew: you could check for an environment variable to check what port numbers to use, to make things a bit easier?
11:13 < gildean> aendrew: idk, use a config file to set different ports for different environments?
11:15 < aendrew> gildean: Where would that config file reside? In each project?
11:15 < gildean> for example
11:16 < floody> could someone please help me? i trying to write an extension to nodejs and i'm little confused in that  part how can i easily expose deeply nested cpp objects to the js world, could someone show me a good example?
11:18 < aendrew> mscdex: That's a thought one of my devs had, but how would I manage that between various projects such that there aren't conflicts? It almost seems like, on the staging machine (Using the premise that all devs aren't totally aware of what every other dev is doing), port number should be decided automatically somehow and routed accordingly?
11:19 < dominictarr> mmalecki: hey, check this out http://zerovm.org/wiki/The_Cloud_Hypervisor
11:19 < dominictarr> ^ super low weight vms
11:19 < dominictarr> just around posex processes
11:20 < mscdex> aendrew: maybe have the environment variable be your starting port number and just increase from there ?
11:23 < aendrew> mscdex: That might work, will keep that in mind. But is there really no package that integrates with node-http-proxy to manage these kinds of things?
11:23 < krnflake> what do you guys use for stats aggregation? is there a lightweight alternative to Graphite?
11:23 < mscdex> krnflake: i use Zabbix
11:24 < pabbie> I installed Node.js and node-mysql. The question now is how do I write/read data from a webpage to the DB now? Do i have something with the server now or does something like this suffice? http://pastebin.com/k47qGw1Z#
11:28 < accc>  pabbie: what u want to do?
11:28 < mpfundstein_work> I have some weird issues with Node 0.10 . I send json packages via my internal network to other node processes. When I sent multiple ones (10 - 30) they get sent in bursts. 4 packages a time, with up to 2 minutes between the batch. This is pretty annoying. On node 0.8 on Centos everything was fine. Now I am on 0.10 on mac 
11:29 < pabbie> accc: I want to fill a form on a simple webpage and save that data on my mysql server
11:29 < pabbie> accc: And afterwards I'd also like to retrieve that data from a webpage aswell
11:29 < accc> k
11:30 < accc> maybe curl will help
11:30 < mpfundstein_work> addendum: I use http post to send these json packages
11:31 < pabbie> accc: curl?
11:31 < mscdex> mpfundstein_work: try disable http agent
11:32 < accc> pabbie: https://github.com/jiangmiao/node-curl
11:33 < gildean> accc: how would curl help in that case in any way?
11:34 < accc> to send the form-data and get the result from the target page
11:35 < gildean> accc: so you'd create a separate server to get the post-req from the browser, re-send it with curl, get the response and re-send the response back to the browser?
11:36 < gildean> pabbie: is the webpage going to be served by the the same application?
11:36 < accc> hm? is the target-page the same page?
11:37 < gildean> accc: i'd presume so, he's talking about having a webpage to interact with the mysql db, and the simplest way to do that is just to have a http-server in the application that works the db
11:37 < accc> yes
11:38 < deoxxa> wow
11:38 < accc> and whats the problem? :D
11:39 < deoxxa> someone actually wrote a curl binding for node
11:39 < deoxxa> someone should also write a binding to spidermonkey, so we can execute javascript
11:39 < accc> hehe
11:40 < nathan7> deoxxa: it has been done
11:40 < mpfundstein_work> msxdex: in node?
11:41 < nathan7> deoxxa: https://github.com/gypified/smjs 
11:41 < mpfundstein_work> mscdex: in node?
11:41 < deoxxa> nathan7: ffs
11:41 < nathan7> deoxxa: well, gypified
11:41 < nathan7> deoxxa: next step is bindings
11:41 < deoxxa> lol
11:41 < mscdex> mpfundstein_work: yes
11:42 < mpfundstein_work> mscdex: ok I see. thanks, I will try that
11:44 < syskk> is there a native way to apply arguments in javascript? without opening a block
11:44 < syskk> apply(fn, val1, val2) etc.
11:44 < pabbie> glidean: no, don't think. Although I'm not 100% sure I know what you mean
11:45 < deoxxa> syskk: Function.apply() ?
11:45 < deoxxa> like... https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply
11:45 < g0z> syskk: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply
11:46 < deoxxa> i wonder if that's the first hit on google for "javascript apply function"
11:47 < g0z> see also "call"
11:48 < syskk> that's not what I meant
11:48 < g0z> o
11:48 < syskk> Function.apply executes the function
11:48 < syskk> it doesn't return a new function with the arguments applied
11:48 < deoxxa> syskk: Function.bind
11:49 < mscdex> bind is slow :\
11:49 < syskk> nahâ€¦ what i mean is this :           function apply(fn, args) { return function () { fn.apply(args); } }
11:49 < syskk> is there a native way to do this
11:49 < deoxxa> yes, Function.bind
11:50 < syskk> ahhh thanks
11:50 < syskk> i thought bind was just for binding the this argument
11:50 < syskk> thanks
11:50 < deoxxa> mscdex: bind() certainly is slow
11:54 < v-fpiris> just switched from php to nodejs :)
11:55 < accc> good shoice
12:07 < pabbie> so people say, but I'm too much of a noob to make this work
12:08 < accc> no, its simple
12:09 < pabbie> show me your ways
12:09 < pabbie> master
12:09 < pabbie> ;)
12:09 < accc> u just need a http server
12:10 < Testo> what is that problem ?
12:10 < Testo> node: ../deps/uv/src/unix/stream.c:726: uv__write: Assertion `stream->write_queue_size == 0' failed. Aborted
12:10 < v-fpiris> deoxxa, native implementation of bind is slow.
12:12 < pabbie> accc: me? I already have that
12:13 < SomeoneWeird> Testo, upgrade you're node, it's a bug
12:13 < accc> ok, then i dont understand the problem
12:13 < SomeoneWeird> er, your*
12:13 < pabbie> accc: Now I need to somehow create a form that sends data to a table in my sqldatabase. I don't know how to do that
12:13 < pabbie> accc: So the problem is: I don't know-to
12:13 < pabbie> how-to*
12:14 < accc> simple html output
12:14 < pabbie> accc: meaning? -_-
12:15 < Testo> SomeoneWeird: node --version v0.10.8
12:15 < gildean> pabbie: <form action="/someurl" method="post"><input type="text" name="someinput" /><input type="submit" /></form>
12:15 < accc> yeah, a simple html-form
12:15 < pabbie> ok, but how does that post the data into the mysql db?
12:16 < gildean> it doesn't
12:16 < pabbie> but thats what I want it to do =/
12:16 < gildean> it posts the data to your http-server, which then should pass it on to a function that inserts/queries the data
12:16 < pabbie> that is not the emoticon I was looking for haha ^
12:16 < pabbie> ok
12:17 < accc> or a second way is sending the data via socket
12:17 < pabbie> but yeah, thats the part I'm having trouble with. I know how to create the html-form and Ive done it already
12:17 < pabbie> its the function I don't know how to accomplish
12:19 < accc> maybe u read the api manual for http? :D
12:20 < pabbie> hmm ok, I installed the mysql module. This https://github.com/felixge/node-mysql
12:22 < pabbie> do you guys have any example on how to pass the data into a function that inserts/queries?
12:26 < fredr> how do you guys manage your shrinkwrap? do you have it checked in to your git repos, and if so, when do you updated your npm:s during development?
12:30 < accc> pabbie: http://stackoverflow.com/questions/4295782/how-do-you-extract-post-data-in-node-js
12:30 < pabbie> accc: ty!
12:32 < Iszak> fredr absolutely commit it into the git repo, you only update it in development, this is correct. When? that's up to you, monthly, weekly, daily, obviously tests need to be made to ensure everything is working
12:36 < pabbie> accc: I do have the express module installed. That example you posted, does that save the data to the mysql db?
12:36 < yalamber> Hello, please shed some light to me not this question in stack overflow http://stackoverflow.com/questions/16791909/server-performance-in-nodejs-script-running-forever
12:37 < fredr> Iszak ok! and how do I update the shrinkwrap? can I just do an "npm update", or do I delete the shrinkwrap and do a "npm install"?
12:37 < accc> pabbie: use database.query
12:38 < accc> to insert data in mysql u need a connection, then a query with the insert-sql
12:39 < Iszak> fredr you need to use npm install <package> to add or update packages and also update package.json
12:40 < Iszak> fredr see https://npmjs.org/doc/shrinkwrap.html#Building-shrinkwrapped-packages
12:45 < fredr> cool, thanks Iszak
12:50 < Chiffon35> hi all
12:50 < accc> hi
12:52 < HSL> what is the best UUID library for node?
12:53 < accc> whats uuid?
12:53 < accc> a module for unique user ids?
12:53 < HSL> accc: yeah, for unique id's
12:54 < fiws> crypto.randomBytes(10).toString('hex')
12:54 < greelgorke> there is node-uuid or so
12:54 < accc> i just use timestamps in milisecounds
12:54 < accc> + a string of random keys
12:55 < HSL> accc: yeah thought about that too
12:55 < greelgorke> HSL: it depends on how unique your id's should be
12:57 < HSL> greelgorke: they need to be really unique :) I store website visits in a database, right now I run it for about 50 sites and that already generates a lot of rows
12:57 < accc> bad privacy, shame on you :D
12:58 < greelgorke> https://npmjs.org/search?q=uuid
12:58 < HSL> accc: well,.. better privacy than google analytics offers :P
12:58 < greelgorke> i used the first one, i belive
12:58 < accc> haha true
12:58 < HSL> and website owners can delete the data whenever they want :)
12:59 < accc> nice
12:59 < HSL> greelgorke: thx!
12:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:01 < greelgorke> HSL: https://npmjs.org/package/node-uuid this one seems the mostly used
13:01 < greelgorke> 405 dependents and 248k downloads last month
13:02 < greelgorke> both seem to be the same, just another name
13:03 < rud> hi, hmm from a node process, i need to fork in background other node processes, than kill them on certain events.. is there a middleware of choice for handling forking to bg from within a node process?
13:03 < greelgorke> rud: what's wrong with core child_process?
13:04 < rud> greelgorke: nothing :) it's the first time i have to deal with such, and i'm still unsure of the path to follow :)
13:05 < greelgorke> just use child_process, it's pretty fine
13:05 < accc> cluster and clusterhub is fine too
13:06 < rud> thanks
13:09 < progrock`> gis there any reason to do: path.join(__dirname, 'public')  instead of (__dirname + 'public')
13:10 < greelgorke> progrock`: the missin /
13:10 < progrock`> lol, ok then:
13:10 < progrock`> gis there any reason to do: path.join(__dirname, 'public')  instead of (__dirname + '/public')
13:10 < progrock`> s/gis/is
13:11 < greelgorke> as far as i know, not really. but i'm not sure about windows
13:11 < progrock`> I find it weird whenever express hasa function to do somehthing as trivial as a string concat
13:11 < progrock`> lol, I couldnt care less about winows
13:11 < progrock`> windows*
13:11 < greelgorke> path is core module
13:11 < greelgorke> not express
13:12 < progrock`> oh, wel the boilerplate that express cli generated does path.join.. but the docs don't
13:12 < greelgorke> and join is helpfull when you need a path made form several path fragments, wich may be also things like '../.././/'
13:12 < progrock`> it appears the boilerplate is a little behind
13:12 < greelgorke> or the docs
13:13 < greelgorke> join is safer
13:13 < progrock`> I think its the boilerplate, not the docs
13:13 < progrock`> but in the smae code, tehre is: app.set('views', __dirname + '/views');
13:14 < progrock`> I guess wha your saying is, in windows, __dirname could potentially have a '/' at the end
13:14 < greelgorke> well. you could place your static files outside of the app, and reference them with '../../../public'. views are less likely placed outside of the porjcet
13:14 < progrock`> ehh, I'm getting rid of it, I would almoatprefer if someone ran my app on windows that it would fail, lol
13:15 < progrock`> and ninx will behadling my static files in prod... or a cdn will.. so dont matter I suppose
13:15 < progrock`> nginx*
13:15 < greelgorke> i'm not saying windows act different. i'm saying some paths may be better handled by join
13:15 < greelgorke> but it's your code, do what you like :)
13:17 < progrock`> Also, I see express.cookieParser('secret string') in the boilerplate.. but every single up to date example I see doesnt have a scret string there, just has one on sessions
13:18 < accc> replace every key with a *, because the can stand for every key, so your code is evertytime right an can do everything
13:19 < greelgorke> progrock`: examples tend to simplify things and omit details, just to show the point, they explain better
13:20 < progrock`> greelgorke: let me rephrase that.. I'm looking ta an up to date boilerplate
13:20 < progrock`> which I would assume would leave a string there letting you know to change it
13:20 < greelgorke> https://www.google.de/search?q=express+boilerplate&oq=express+boiler&aqs=chrome.1.57j0l3j62l2.4852j0&sourceid=chrome&ie=UTF-8
13:20 < greelgorke> pick one
13:20 < progrock`> so I;m thinking things changed.. or maybe if youre using sessins, its not needed
13:55 < Jeffail> z
14:00 < rud> hmm if using cluster(hub), if my workers are using socket.io, should i create my instance of io in the master and pass the same instance to all my workers, or just have each worker init it's socket.io instance as it would in a single-worker setup ..?
14:00 < rud> (my goal is that all sockets / rooms are shared across all workers)
14:24 < niggler> i have a bunch of modules in my global path that apparently are coffee script modules (so they require coffee-script).  are they all symbolic links or does the package physically reside in every place?
14:28 < Testo> node: ../deps/uv/src/unix/stream.c:726: uv__write: Assertion `stream->write_queue_size == 0' failed. Aborted 
14:28 < Testo> who can help?
14:36 < CorbinDallas> I have a multi file name space that I want to import into node via require.  How can I get all the files in the name space into node if require will only read one file?  I could concatenate the files and import, but I was wondering if there was a better or correct way of doing this.
14:39 < ckknight> CorbinDallas: your module should have an index.js which is the require'd module. That can then require the individual files within the module.
14:40 < CorbinDallas> ckknight: So if my namespace is foo and each file has a function that says foo.bar = function(){} will this not work?  I need to have a module.exports in every file in the namespace?
14:40 < ckknight> don't do that
14:40 < ckknight> each file has its own exports
14:40 < ckknight> what you can do in your index.js is exports.bar = require('./lib/bar')
14:41 < CorbinDallas> yeah, that sucks, the name space is an existing client side name space that is maintained by many people at my company
14:41 < CorbinDallas> hard to get people to budge on this stuff
14:42 < CorbinDallas> would an ok alternate be to concatenate all the files and have a single module.exports at the end that exports the entire name space?
14:42 < ckknight> do not concatenate the files, that misses the point entirely.
14:43 < CorbinDallas> I understand your point
14:43 < ckknight> you could do that
14:43 < ckknight> but it's terrible
14:43 < ckknight> just realize that
14:43 < ckknight> it's your code
14:43 < CorbinDallas> wellâ€¦ not entirely
14:43 < ckknight> are you responsible for it?
14:43 < CorbinDallas> it's a name space that has been around since before node
14:43 < CorbinDallas> some of it
14:43 < ckknight> then it's your code.
14:44 < ckknight> therefore it's your prerogative what you want to do about it
14:44 < CorbinDallas> it's a client side name space that is used quite a lot in production already so I can't change everything
14:44 < CorbinDallas> I wish
14:44 < CorbinDallas> I just want to import the name space to get to a bunch of helper functions in the name space
14:44 < ckknight> CorbinDallas: if it helps, you could tell them that concatenation absolutely won't work and there needs to be a refactor
14:44 < ckknight> might not be actually true
14:44 < ckknight> :P
14:46 < timoxley> CorbinDallas why don't you just copy the helper functions
14:46 < CorbinDallas> then I'd have to maintain two copies of the code
14:46 < niggler> CorbinDallas: do you use a helper like underscore or lo-dash?
14:46 < CorbinDallas> yes
14:46 < timoxley> CorbinDallas the separating that you do for node
14:46 < CorbinDallas> underscore
14:46 < timoxley> you can apply to the browser version
14:46 < niggler> so why not do it the same way you use underscore
14:47 < timoxley> CorbinDallas break it out into something, then use it in both places
14:47 < CorbinDallas> underscore thankfully is a single file
14:48 < CorbinDallas> if the name space at my company was a single file I wouldn't have this problem, but require won't read multiple files
14:48 < niggler> CorbinDallas: can you pitch a refactoring to make it look like underscore?
14:48 < niggler> appeal to jashkenas
14:48 < CorbinDallas> yeah, I think that's what I'll do - just a uphill battle I think
14:50 < oreth> can somone attempt to explain to me the concept of "middleware" and what it's used for (in the context of the express framework)?
14:51 < niggler> oreth: its ware in the middle
14:52 < vote539> oreth: the way I think of it is that it takes the HTTP requests and decides who should process them
14:52 < niggler> oreth: it applies more to connect than to express
14:52 < oreth> you can app.use(app.errorHandler()); as well as app.use(app.router); 
14:52 < oreth> i don't really understand how it knows what to do with it.
14:52 < oreth> and, how i create my own :P
14:53 < vote539> oreth: when you do app.use( xyz )
14:53 < vote539> then xyz is passed a request and response object
14:53 < oreth> and how does xyz know what to do?
14:53 < vote539> much like the built-in HTTP server
14:54 < niggler> oreth: each middleware is a module that exports a single function
14:54 < oreth> i assume that xyz then passes the request on to the next piece of middleware?
14:54 < vote539> xyz looks to see if the request has the right URL and stuff
14:54 < kenperkins> how do you know if a stream is writable
14:54 < niggler> and that function is expected to return a handler
14:54 < vote539> if it does, it sends its response, and it does not pass on the request to other middleware.
14:54 < niggler> the handler takes 3 arguments: the request, response and a callback 
14:54 < vote539> if it doesn't like the request, it passes it on to the next middleware.
14:54 < oreth> ahh
14:54 < oreth> ok
14:54 < niggler> if the handler is supposed to handle the request, it does the end
14:55 < niggler> if it is not supposed to handle the request, it calls the callback
14:55 < bngle> hi, is there a good library to "linkify" string content? e.g. "This is a http://link.org" -> "This is a <a href="http://link.org target="_blank">link.org</a>"
14:55 < oreth> so, i could write function xyz(req,res,callback) { if (req.someThing == true) {â€¦. callback() } } ?
14:55 < bngle> or components that you recommend to build one
14:55 < niggler> oreth: so if you want an example, look at the favicon middleware
14:55 < niggler> its in lib/middleware/favicon.js
14:55 < niggler> that looks pretty short
14:56 < niggler> https://github.com/senchalabs/connect/blob/master/lib/middleware/favicon.js should be the url
14:56 < oreth> readfing
14:56 < oreth> that makes perfect sense
15:01 < oreth> thanks niggler 
15:01 < oreth> and vote539 
15:04 < ereez> do you guys speak english
15:04 < niggler> ereez: ?
15:04 < niggler> what would suggest otherwise?
15:04 < CorbinDallas> english motherfucker, do you speak it!
15:04 < CorbinDallas> sorry, couldn't resist
15:05 < ereez> hey niggler are you alright
15:05 < niggler> I'm just terribly confused ereez I thought english was the standard language on IRC
15:05 < CorbinDallas> you're thinking aviation
15:06 < niggler> I'm thinking earth :P
15:06 < niggler> is there a language more ubiquitous than english?
15:06 < carlos_> chinese
15:06 < carlos_> probably
15:06 < CorbinDallas> even chinese program in english
15:07 < carlos_> well in terms of ubiquity then I guess yeah 
15:07 < niggler> carlos_: possibly, if you only counted english as a first language
15:07 < ereez> This is my first time chatting, I entered a group that speaks chinese thatw why I asked
15:07 < CorbinDallas> its fun to visit terribly anti american web sites, view source and find tons of english comments in the source
15:08 < niggler> ah ereez we are english speakers
15:08 < carlos_> @CobinDallas because they know you're looking :P
15:08 < niggler> isaacbw: you may need to modify the topic to clarify that we are all english speakers
15:08 < CorbinDallas> carlos_:  I was wondering why I found a letter addressed to my mother there
15:09 < carlos_> haha
15:10 < carlos_> I must admit I'm quite the noob both at IRC and Node
15:10 < carlos_> I take it there's a timeout
15:10 < vote539> How long does it typically take for a question posted in the Google Group to be "approved"?  I posted one a few hours ago and it has yet to appear in the stream
15:11 < carlos_> like if I'm AFK for too long
15:11 < carlos_> then disconnected, and other basic things
15:11 < CorbinDallas> carlos_:  there is no idle timeout
15:11 < niggler> vote539: you are better off asking here first
15:11 < CorbinDallas> carlos_: your connection might drop
15:12 < carlos_> I see, nice then (I have a shitty internet connection nonetheless unfortunatelyâ€¦ so it might happen)
15:12 < carlos_> well, I shall be back, next time to actually talk about Node hehe
15:13 < kenperkins> good luck JohnONolan 
15:13 < JohnONolan> Thanks kenperkins :)
15:14 < kenperkins> JohnONolan at nodeconf?
15:15 < vote539> My question is too long to post here, but the gist of it is: when Node spawns a process, it seems to treat that process differently than if I were to start that process from the terminal.  In my case, it is killing the process prematurely.  How do I find out what part of Node is causing the issue?
15:15 < vote539> by "spawn" I mean require("child_process").spawn
15:16 < JohnONolan> kenperkins: I wish - but probably not going to be possible this year. Super tight (really, overly ambitious) deadlines for the next 3 months
15:16 < kenperkins> pff, like nobodies ever done that before
15:17 < ereez> hey guyz i need an advice
15:18 < CorbinDallas> use a condom
15:18 < CorbinDallas> always grab an object by the smooth edge
15:18 < CorbinDallas> never take candy from strangers
15:18 < CorbinDallas> don't take advice from random people on the internet
15:19 < ereez> corbin are these what you have for me as an advice
15:19 < CorbinDallas> yes
15:21 < ereez> lol
15:21 < vote539> I'm heading out; hopefully my question will be in the google group stream soon
15:21 < ereez> vote whats the question
15:22 < sinclair|net> hello everyone
15:23 < ereez> hello how u doing
15:23 < sinclair|net> i've made some updates to this if anyone is interested... https://npmjs.org/package/typescript.api
15:23 < sinclair|net> now with declaration files being emitted on the compiled units
15:23 < sinclair|net> ereez: one step forward, 3 steps back
15:24 < ereez> are you in a confused state? sinclairjnet
15:25 < sinclair|net> ereez: no, not really, just writing an application on nodejs with TypeScript , and wanted to get a declaration file so another party can look at the interfaces and code against it. 
15:26 < ereez> ok thats cool
15:26 < sinclair|net> so, i had to dig into my TS api lib and emit the declaration back on compiled units. hence why i posted the link npm
15:28 < ereez> corbin are you there
15:28 < CorbinDallas> yes
15:31 < ereez> are you on facebook?
15:31 < CorbinDallas> no, I'm on IRC
15:31 < ereez> whats IRC?
15:32  * CorbinDallas sighs
15:32 < CorbinDallas> this is IRC
15:32 < Fishrock> ereez: You can't be serious, right?
15:33 < ereez> fish what do you mean?
15:33 < Fishrock> (This is IRC...)
15:33 < CorbinDallas> ereez: is english your first language?
15:36 < niggler> sinclair|net: is there a #typescript chat?
15:37 < ereez> hey guyz take it easy i was just kidding
15:37 < sinclair|net> niggler: some people in here might use typescript, 
15:37 < niggler> is there anyone here that has a non-english version of office?
15:37 < sinclair|net> niggler: besides, that library is specifically written for "nodejs developers"
15:39 < Fishrock> So since the people in #mongoose don't talk, does anyone have experience with mongoose.js?
15:45 < rud> so, it seems i managed to deploy my app using clusterhub and socket-io-clusterhub, i'm assuming it's a possible way to go to share sockets and rooms across all threads ..
15:46 < rud> but now, i'm wondering, can a cluster worker be a master of another clusterhub ?
15:48 < rud> i mean, my original need is to fork a given script when receiving a given event, and kill it when receiving another event.. i was originally suggested cluster(hub), which solves the multithread issues.. but now how to handle the forked processes inside the workers
15:48 < rud> with cluster(hub) ? or with something else ?
15:56 < scott_gonzalez> chjj: Would you consider documenting the data structures used for marked.lexer()?
15:56 < scott_gonzalez> I've been getting by with just manual inspection so far, but even patch updates change the structure.
16:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:06 < HSL> I'm trying to update mysql from inside my node app,.. do you have any clue, why a query like this could fail?
16:06 < HSL> UPDATE data SET seconds=184 WHERE id=71345f96-8968-484c-8aa0-5d8bee486566
16:07 < kuja> HSL: UPDATE data SET seconds=184 WHERE id='71345f96-8968-484c-8aa0-5d8bee486566' ? (note the quotes)
16:08 < HSL> damn,â€¦ sometimes I hate myself :P
16:08 < CorbinDallas> OK, I'm trying to use require on client and server side, but the paths are slightly different for client and server, what is the solution for this?
16:09 < kuja> HSL: Assuming you are using node-mysql, you should read: https://github.com/felixge/node-mysql#escaping-query-values
16:09 < thl0> CorbinDallas: are you using browserify
16:09 < thl0> ?
16:09 < CorbinDallas> thl0:  I'm using requirejs
16:09 < thl0> that's your problem
16:09 < CorbinDallas> https://github.com/jrburke/requirejs
16:09 < thl0> with browserify you wouldn't have these issues
16:09 < HSL> kuja: thanks! :)
16:10 < thl0> requirejs allows relative to root paths
16:10 < thl0> CorbinDallas: if you make all your paths relative to the script, you should be better off
16:10 < thl0> or just use browserify ;)
16:11 < CorbinDallas> thl0:  ok, so I have JS files in /public/js/  on the server, but the client sees them in /js/.  how would I type the path?
16:11 < CorbinDallas> all the files are in the same directory
16:12 < thl0> CorbinDallas: there is no easy solution for this (maybe requirejs allows you to config something, I don't know)
16:12 < thl0> the main prob. is that server/client are inconsistent when you use requirejs
16:12 < CorbinDallas> thl0: so it wouldn't help to use browserify?
16:12 < niggler> CorbinDallas: there's a way to cheat
16:13 < thl0> CorbinDallas: with browserify you wouldn't have any of these problems
16:13 < CorbinDallas> thl0: I have no allegiance to requirejs
16:13 < niggler> you put a script "requires.js" that defines all of the paths
16:13 < thl0> just run your code through: https://github.com/thlorenz/browserify-ftw
16:13 < niggler> and you put one in the root directory for the browser
16:13 < niggler> and one in node_modules
16:13 < thl0> it'll refactor to browserify automatcially
16:13 < niggler> so the resolution for node will use the node_modules version
16:13 < niggler> and the resolution for require.js will use the version in the root 
16:13 < niggler> so you define all the paths there and just reference those
16:13 < thl0> niggler: that sounds painful - another reason not to use requirejs
16:14 < CorbinDallas> ok, I won't use requirejs - I'll use browserify
16:14 < CorbinDallas> given that - how would I type the paths?
16:14 < niggler> thl0: its the type of thing you do once
16:14 < thl0> CorbinDallas: \o/ another peep that sees the light 
16:15 < thl0> CorbinDallas: if you need help, let me know
16:15 < CorbinDallas> are the paths just the name of the file?
16:16 < thl0> CorbinDallas: paths are the ones found in your requirejs config (referring to browserify-ftw right?)
16:16 < thl0> don't need to use it if your project is still small
16:16 < thl0> just write your code CommonJS style (i.e. normal relative requires) and browserify will make it all work on the client
16:18 < CorbinDallas> thl0: ok, so if my files on the server side are in /public/js/ and on the client side /js/ I would type the path as "foo.js"
16:18 < CorbinDallas> ?
16:18 < thl0> just require them the same everywhere
16:18 < thl0> browserify resolves it for you
16:18 < CorbinDallas> really? that's strange
16:18 < thl0> write your code as if you are on the server all the time
16:18 < CorbinDallas> ok, thanks - I'll give it a shot
16:19 < thl0> reakd through this: https://github.com/substack/node-browserify
16:19 < thl0> CorbinDallas: browserify creates a bundle for you (one file you use in the client) that contains all the magic to make things work
16:19 < CorbinDallas> ugh, I hate magic
16:21 < thl0> requirejs has even more magic - anyhoo choose what you like - just saying with browserify there is way less friction when reusing code on server and client
16:21 < CorbinDallas> I'm going to try and use it, thanks thl0 
16:21 < thl0> cool, np
16:22 < niggler> are CSV files supposed to end on a newline (last line empty) or just end with the last character of the last field of the last line?
16:23 < poacher2k> quick q: is it wise to begin learning node.js using express, or is it something I'll be missing if I don't start without it?
16:23 < poacher2k> is it like learning jquery instead of javascript?
16:23 < niggler> poacher2k: learn node first
16:23 < poacher2k> kk
16:23 < niggler> its not as bad as jquery, but it's still better to learn directly
16:24 < ljharb> niggler: i'm not aware of anything in any context that prescribes a trailing newline, or a lack thereof - but you should always include one imo, so diff and other unix programs are cleaner
16:24 < niggler> ljharb: excel (and I assume other microsoft tools) do not include a trailing newline
16:25 < poacher2k> I see :)
16:25 < poacher2k> thanks mate!
16:25 < niggler> but i agree that it makes more sense to include one
16:25 < ljharb> right, but that doesn't mean they can't handle one
16:26 < niggler> on import they don't seem to care ljharb 
16:26 < ljharb> i guess it's a tias :-p
16:26 < ljharb> nice
16:26 < ljharb> then yeah i'd include one
16:26 < arsdmthe> no node.js on debian
16:26 < niggler> arsdmthe: nodejs 
16:27 < arsdmthe> node niggler 
16:27 < niggler> also, does CSV mandate ASCII or some other character set
16:27 < niggler> did they change it arsdmthe ?  node used to be some really old radio program
16:27 < niggler> http://packages.debian.org/squeeze/node
16:28 < niggler> http://packages.debian.org/sid/nodejs arsdmthe 
16:28 < thomblake> There is no standard CSV format.  If you want to pretend there is, then go with RFC 4180.
16:28 < thomblake> The trailing newline is optional, and therefore should be included according to unix conventions because it is a text file.
16:28 < niggler> lemme rephrase the question thomblake 
16:28 < niggler> what are the standard CSV parser libraries / tools
16:29 < niggler> (against which compatibility should be measured)
16:32 < kenperkins> JohnONolan so close. I contemplated waited to see if I could be #200k
16:32 < thomblake> I know I have encountered at least one tool that required a trailing newline, but I believe it was obscure.  Normally they're completely optional.  I've never encountered something that punished you for trailing newline.
16:32 < kenperkins> but thought tweeting earlier would help :(
16:32 < arsdmthe> hmm i have wheezy niggler 
16:33 < JohnONolan> kenperkins: I noes. But we have paypal + outside sponsor that does push the grand total over Â£200k, just not on that nice shiny Kickstarter page. Which is a shame!
16:35 < kenperkins> how big is your team
16:35 < arsdmthe> paypal + kickstarter is expensive
16:35 < JohnONolan> yes, yes it is
16:35 < JohnONolan> kenperkins: 9 (10 including me) at present
16:40 <@MI6> joyent/node: isaacs master * ba048e7 : Merge remote-tracking branch 'ry/v0.10' (+20 more commits) - http://git.io/7fWJhA
16:41 < wavded> how do people feel about an OAuth2 server in Node?  has the craziness settled over this spec or is it a mess still?
16:41 < wavded> I'm reading: http://hueniverse.com/2012/07/oauth-2-0-and-the-road-to-hell/
16:46 < ljharb> wavded: personally i think it's always going to be a mess, and i'd avoid it
16:48 < progrock`> whats the easiest way to just return a string on a post request?
16:48 < charlydagos> I agree with ljharbâ€¦ if you must use one, just use previous drafts
16:48 < progrock`> node/express
16:48 < sinclair|net> hmm
16:48 < ljharb> definitely don't do that
16:49 < ljharb> if you use something, use the latest spec for it. if you don't like the latest spec, don't use that things.
16:49 < levilewis> Hoping somewhere here is familiar with sequelizejs - I tried their IRC room already - I'm having the same exact issue that was posted here earlier this month I was wondering if anyone has done this before or has insight?
16:49 < ljharb> ie, stick to oauth 1.0a
16:49 < levilewis> http://stackoverflow.com/questions/16356856/sequelize-js-custom-validator-check-for-unique-username-password
16:49 < sinclair|net> how does one call http.request() ?
16:49 < mscdex> sinclair|net: with a semicolon at the end
16:50 < sinclair|net> hmm
16:52 < sinclair|net> mscdex: i call http.request('http://google.com', function(response) {}); and the application hangs
16:53 < sinclair|net> the callback never gets fired
16:54 < sinclair|net> oh, i see, i need to call end() on the request
16:56 < kenperkins> if you like checkout mikeal/request on github
16:58 < sinclair|net> kenperkins: nah, its ok, http.request() and https.request() does everything i need
17:03 -!- mode/#Node.js [+o sblom] by ChanServ
17:07 < poacher2k> how does one go about actually marking up and styling a site when using node.js?
17:08 < poacher2k> do you make an index.html and style.css as usual, and inject/include/import them into node.js ?
17:09 < wavded> ljharb, charlydagos : thx, that is the feeling i've had, but hadn't looked into it in a while and still getting that feeling :)
17:09 < nlf> :q
17:10 < charlydagos> wavded: the same author is working on something else, worth checking out https://github.com/hueniverse/hawk
17:11 < charlydagos> better name too if you ask me heh
17:13 < poacher2k> seems kind of awkward to write the entire index.html as a variable and then write it to the body
17:13 < wavded> crazy, i have heard of that, didn't know it was the same guy, and much better name :)
17:13 < deoxxa> poacher2k: there are probably over 200 web frameworks for node.js
17:14 < deoxxa> poacher2k: the most popular by far would be express
17:15 < poacher2k> okay then
17:15 < poacher2k> hopefully express isn't a bad place to start learning node then
17:15 < poacher2k> :-)
17:18 < gildean> poacher2k: it's not, a lot of people have used express in their first node project
17:20 < poacher2k> great!
17:20 < poacher2k> thanks alot, deoxxa and gildean :)
17:20 < deoxxa> :>
17:30 < shlevy> With the new readable streams interface, why do you have to do a stream.read(0) when piping one stream into another?
17:31 < mscdex> shlevy: you don't?
17:32 < shlevy> mscdex: OK weird, why did I think you did? Sorry for the noise, I oculd have sworn I ran into this yesterday
17:32 < deoxxa> yeah, that's news to me
17:33 < mscdex> shlevy: i've never ran into that problem, it might be something else going on
17:33 < shlevy> But just setting a 'readable' listener doesn't start the stream going, right?
17:33 < deoxxa> shlevy: the .pipe() will do it
17:33 < shlevy> mscdex: I'm testing the place I ran into it, probably I fixed another bug somehow
17:33 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:33 < deoxxa> shlevy: specifically by calling .read() at some point
17:33 < shlevy> deoxxa: Sure, talking about a case where there is no pipe
17:33 < mscdex> shlevy: yeah the pipe() will do everything it needs to do
17:34 < mscdex> oh
17:34 < shlevy> (new question) :)
17:34 < deoxxa> oh, yeah, without a pipe() you'll have to read from it
17:34 < shlevy> OK
17:34 < shlevy> Thanks
17:34 < deoxxa> what i do is something like
17:34 < deoxxa> function sink() { var s = new stream.Writable(); s._write = function _write(input, encoding, done) { return done(); }; }
17:34 < deoxxa> then stream.pipe(sink())
17:35 < deoxxa> well, someReadableStream.pipe(sink())
17:56 < generik> has anyone setup a private npm registry just using the design docs (e.g.not replicating the whole public database)?
18:03 < eddyb> so I was desperately trying to get a heap profiler to work so I can find my leak
18:03 < eddyb> turns out the v8 heap is smaller by 1MB after the RAM usage increased by 20MB, and this is with a small test
18:04 < eddyb> large scale: RAM usage quickly goes to 1.5GB, process stops doing useful work after being incredibly slow for half an hour
18:06 < eddyb> I'm looking at a native leak, ain't I?
18:07 < foghsho> Hello!
18:07 < eddyb> either in v8, libuv (I only use stdout and stderr, I doubt it's uv), something in node, or the native parts of the few modules I use (then again, node-ffi does work only at the start of the process, so it - or the C library I use it for - couldn't be leaking long after)
18:08 < pachet> eddyb if i had a dollar for every time i thought a proc was beyond the scope of concern
18:08 < pachet> i'd have a couple dollars
18:08 < eddyb> pachet: huh?
18:10 < eddyb> c4milo: I'm using your node-webkit-agent, your version of v8-profiler is fine, except for the recent removal of BottomUpRoot for CPU snapshots from v8
18:12 < eddyb> so how do I profile native memory usage?
18:13 < eddyb> if I would hook malloc, then that could give me a size and a backtrace. then hook free to remove that object, output the objects, compact the backtraces, and you get a nice tree of function calls, sorted by total allocation size
18:14 < eddyb> I've done this before in a kernel, and the output was useful for fixing some memory leaks, but there has to be a tool for doing it in userspace, right?
18:18 < eddyb> valgrind's memcheck is almost like that, but more complicated
18:20 < eddyb> instead of all that fancy structural integrity, overflow detection, etc., I'd like to get the "live" heap objects (allocated after a certain point) at another point, each with an associated backtrace
18:21 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:29 < CorbinDallas> is there a way to read command line args?
18:29 < eddyb> CorbinDallas: process.argv
18:29 < CorbinDallas> ty
18:29 < eddyb> CorbinDallas: http://nodejs.org/docs/latest/api/process.html#process_process_argv
18:30 < CorbinDallas> you the man eddyb 
18:30 < c4milo> eddyb: bottomUpRoot? did it break anything? 
18:31 < eddyb> c4milo: they just removed it, so the extra work of converting between the formats isn't done in v8
18:31 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:31 < eddyb> I replaced it with a return Null() as a temporary hack, the rest is working
18:31 < c4milo> eddyb: for native profiling I haven't done anything yet unfortunately. 
18:31 < c4milo> eddyb: you mind sending a PR? 
18:32 < c4milo> eddyb: also, for native profiling, the C++ classes have to be instrumented I believe 
18:32 < eddyb> c4milo: I wouldn't give you a hack, and I don't have a complete conversion code :(
18:32 < c4milo> eddyb: ahah, that's better than having segfaults 
18:32 < gozo> Hi - starting node.js i've a question please. I have a directory with a list of JSON files. I want to read these and concatenate the contents.
18:32 < gozo> exports.index = function(req, res){
18:32 < gozo> 	res.send("getting a photo list");
18:32 < gozo> 	var json;
18:32 < gozo> 	
18:32 < gozo> 	fs.readdir(dir, function(err, files) {
18:33 < gozo> 		files.forEach(function(file) { 
18:33 < eddyb> c4milo: it doesn't compile at all with the new version
18:33 < gozo> 			console.log(file);
18:33 < gozo> 			fs.readFile(dir+"/"+file, 'utf-8', function(err, contents) { 
18:33 < gozo> 				return contents;
18:33 < eddyb> inb4 floodkick
18:33 < gozo> 			});
18:33 < gozo> 			console.log(contents);
18:33 < gozo> 		});
18:33 < gozo> 	});
18:33 < c4milo> eddyb: got it 
18:33 < gozo> 			
18:33 < gozo> };
18:33 < c4milo> gozo: use pastebin, gist, jsbin, or something similar please 
18:33 < gozo> sure
18:34 < eddyb> c4milo: I'm pretty sure you can hook malloc and free (or the C++ operator new/delete) and track that (but you need to manage your own memory to avoid recursion)
18:34 < eddyb> and I just found this http://valgrind.org/docs/manual/ms-manual.html
18:34 < c4milo> eddyb: this is how you instrument your C++ code: https://github.com/joyent/node/blob/master/src/node_buffer.cc#L677-L678
18:34 < c4milo> I believe 
18:35 < c4milo> eddyb: that's how they are doing it for node_buffer.cc 
18:35 < eddyb> aah, just that. well, yeah, that works
18:35 < c4milo> eddyb: and https://github.com/joyent/node/blob/master/src/node_buffer.cc#L623-L628 
18:35 < eddyb> it's not exactly what I need, then
18:36 < c4milo> eddyb: I need to dig more in the native profiler, but I believe they are just instrumenting webkit classes similar to what I just showed you in nodejs core 
18:37 < gozo> http://jsbin.com/izeqof/1/edit
18:38 < gozo> I want to after reading the contents of each json file i want to concatenate the results in to a single string to return as JSON to a client
18:38 < gozo> I'm usure how to build the json string
18:39 < niggler> gozo: you could make an array
18:39 < deoxxa> gozo: JSON.stringify
18:39 < deoxxa> sup niggler
18:39 < niggler> hey deoxxa 
18:40 < gozo> I will need to JSON.stringify the final result - but before doing that i want to get all the contents of these files in one json string
18:40 < niggler> gozo: make an array of the objects
18:40 < gozo> an array of the objects - ok -i'll look into that
18:41 < gozo> to pass between callbacks should i pass in the array and add to it in read file o r should i return from read file and then append in files.foreach
18:42 < niggler> >>> var x = {foo:"bar"}; var y = {baz:"qux"}; var xx = JSON.stringify(x); var yy = JSON.stringify(y); var strings = [xx,yy]; JSON.stringify(strings.map(JSON.parse)) @ gozo
18:42 < purr> gozo: (string) '[{"foo":"bar"},{"baz":"qux"}]'
18:42 < niggler> like that
18:43 < gozo> ok, cheers - i'll give it a go
18:44 < deoxxa> public transport is so much fun
18:44 < niggler>  its about as fun as pulling teeth
18:45  * deoxxa bounces around a little as the bus driver attempts to set the world record for "rockiest trip to the airport ever"
18:48 < floody> hello
18:48 <@MI6> joyent/node: Fedor Indutny v0.10 * 4f14221 : tls: invoke write cb only after opposite read end (+1 more commits) - http://git.io/lCINew
18:50 < ereez> hi
18:51 < eddyb> so I'm guessing somewhere in here is a leak
18:52 < deoxxa> eddyb: who do you reckon it is
18:52 < deoxxa> eddyb: i say we put 'em in a bathtub with a bunch of rats when we find 'em
18:52 < eddyb> err, forgot to post the link https://gist.github.com/eddyb/5e796d4504caf7ff71da
18:54 < ereez> hey guyz can we talk about celebrities
18:57 < bnoordhuis> ereez: only if it's scarlet johansson
18:57 < eddyb> hi dev. halp with leak pls.
18:58 < eddyb> but in all seriousness, I have little clue what I'm doing
18:58 < ereez> she is not my type
18:59 < eddyb> massif uses so much memory, I can't just run on the actual test, where the allocations might show up, so I'm stuck with this little test. I guess the leak is visible in the "visual" graph at the top
19:00 < redhoodie> Is this channel about jade as well or just node.js?
19:01 < eddyb> anything node.js goes, unless it has a separate channel/community, I guess
19:01 < redhoodie> so may I ask questions about jade then? 
19:01 < redhoodie> It seems like I can't find a channel for jade
19:01 < eddyb> wait, jade is a template engine? I'm not sure how on-topic that is, but you can ask anyway
19:01 < nathan7> worst-case, nobody answers.
19:01 < eddyb> redhoodie: also see the topic, don't ask to ask
19:01 < nathan7> the one thing we'll get angry about is "can I ask a question?"
19:01 < redhoodie> yes it is
19:02 < bnoordhuis> redhoodie: i think there's an express channel
19:02 < bnoordhuis> express, jade, they're kind of related, right?
19:02 < eddyb> oh, I see now, the report is split into snapshots. I would've wanted only two snapshots, pre-leak and post-leak, but this could work
19:02 < s5fs> bnoordhuis: express uses jade by default, so yeah
19:03 < redhoodie> I've been trying to install jade via npm 
19:03 < redhoodie> but now I get throw exception
19:03 < eddyb> gist it
19:05 < eddyb> ->09.80% (1,972,892B) 0x42AC7E: node::Buffer::Replace(char*, unsigned long, void (*)(char*, void*), void*) (in /usr/bin/node)
19:05 < eddyb> oh, replace as in "replace backing store"
19:05 <@tjfontaine> replace is called on basically all alloc/free's of buffers
19:05 < redhoodie> Is that for me? eddyb 
19:06 < eddyb> redhoodie: pastebin or gist the throw exception that you get, so we can help you
19:06 < redhoodie> http://dpaste.com/1202761/
19:06 < eddyb> tjfontaine: yeah, I just remembered. this is one example where a native leak can be caused by my code. I'm guessing I'm growing the Buffer pool by one MB
19:08 < eddyb> wait, what if all the extra memory allocated was from the buffer pool or something like that? could I even grow it to 1GB?
19:08 <@tjfontaine> I'm not really sure what it is you're asking
19:08 <@tjfontaine> do you have some code for inspection?
19:08 < redhoodie> Just a quick question. if I want to read jade files, do I need to install jade at all?
19:09 < nathan7> You need a text editor
19:09 <@tjfontaine> reading a file is one thing, doing something useful with the file is another thing
19:09 < nathan7> if that's what you mean
19:09 < nathan7> Oh, your npm is broken
19:09 < nathan7> redhoodie: Try reinstalling node
19:09 <@MI6> joyent/libuv: isaacs created tag v0.10.9 - http://git.io/uom-wg
19:09 < redhoodie> I need to make changes for a page, and it's done in jade. 
19:10 <@MI6> joyent/libuv: isaacs v0.10 * 21c12b8 : Now working on v0.10.10 (+1 more commits) - http://git.io/L3Ubmw
19:10 < nathan7> redhoodie: because your npm is badly broken
19:10 < redhoodie> oh ... 
19:10 < eddyb> tjfontaine: the code is way too big and the leak is not obvious, it's not even in the v8 heap, I'm either causing a native leak (like doing something wrong with buffers that accumulates) or there's an actual leak in some native code
19:11 <@tjfontaine> eddyb: in your own native code?
19:11 < eddyb> I have no native code, just JS
19:11 <@tjfontaine> are you using a module that is a native addon?
19:12 < eddyb> node-ffi, but it's only used at the start, to call into a C library and load some data from a file
19:13 < eddyb> apart from that, I have a single buffer, that I rarely slice (which is a noop AFAIK, or at least it doesn't copy the data)
19:14 <@tjfontaine> eddyb: holding a buffer from the slaballocator, and the bufferpool, around for a long time can make it appear that there is a leak happening
19:15 < eddyb> slaballocator? where's that? I know I've worked with one in a hobby kernel, haven't heard of it since then
19:16 < bnoordhuis> eddyb: src/slab_allocator.{cc,h}
19:16 < bnoordhuis> it's what node uses to reduce the number of malloc/free calls
19:17 < eddyb> that wasn't in src/ last time I checked, but that's cool :)
19:17 <@MI6> joyent/node: isaacs v0.10 * f523f70 : uv: Upgrade to v0.10.9 - http://git.io/90nduw
19:17 < samholmes> Is it okay to recommend VPS hosting here?
19:18  * nightfly uses BuyVm
19:18 < eddyb> tjfontaine: could it show up as using 1GB for a, let's say, 10MB buffer?
19:19 <@tjfontaine> eddyb: depending on how it all shakes out
19:26 < eddyb> tjfontaine: I don't really know what to look at. all the v8::internal::Parser functions in the massif output are scaring me. unless it's lazy parsing, I have no clue what they're there for :|
19:27 < eddyb> massif also shows the heap going down to a couple of MBs, but that's not what I'm seeing in the memory usage
19:32 < bnoordhuis> eddyb: v8 does a lot of lazy parsing
19:32 < bnoordhuis> if you have some optimized code that gets deopted, it'll reparse and regenerate unoptimized code
19:33 < eddyb> no keeping AST around?
19:34 < bnoordhuis> eddyb: i don't think so
19:34 < eddyb> it probably makes sense, since optimized code would have that extra AST in memory
19:34 < bnoordhuis> there's that
19:34 < bnoordhuis> but also func.toString()
19:34 < bnoordhuis> i know spidermonkey used to generate that from the AST
19:35 < chiel> hi guys, i'm looking for an easy way to generate a base62 string of N length. I was thinking of having a string with all the characters and then selecting a random character N times... is there an easier way?
19:35 < bnoordhuis> and it was a source of a million bugs
19:35 < eddyb> haha. including comments and whitespace?
19:35 < bnoordhuis> yep
19:35 < JediUnixMaster> [new to node]  if I'm going to run a nodejs server, should i add the root user to the /etc/group file for the nodejs group or does that matter? 
19:36 < eddyb> JediUnixMaster: you shouldn't run nodejs as root. but groups don't matter unless they represent access to a resource you want to use in your nodejs server/app
19:36 < bnoordhuis> chiel: that's probably the easiest way
19:36 < JediUnixMaster> ah, ok
19:36 < chiel> bnoordhuis: ok, ta :)
19:37 < JediUnixMaster> eddyb: i wasn't going to run it as root, just wanted to know if root needed to be part of the nodejs users group
19:38 < eddyb> JediUnixMaster: having user U in group G makes sense only if a process running as user U needs to do something related to G
19:39 < JediUnixMaster> eddyb: ok, thank you
19:39 < merpnderp> JediUnixMaster: that would mean that every file marked as accessible in some why by the user group 'root' would be available to the node.js process. I can't imagine every needing or wanting that.
19:40 < stefans7> hello
19:40 < eddyb> merpnderp: that's not how groups work, if I'm understand you right
19:40 < eddyb> group nodejs does nothing related to node.js
19:40 < JediUnixMaster> merpnderp: ya, that make sense.  Just working my way through it, thank you
19:40 < JediUnixMaster> lol
19:40 < merpnderp> if /etc/passwd is chmod g+wrx and 'myuser' is in the root group, then I can wrx /etc/passwd
19:41 < eddyb> merpnderp: oh, you misunderstood what he meant: adding the group nodejs to the user root
19:41 < merpnderp> oh
19:41 < merpnderp> hah
19:41 < merpnderp> my bad :P
19:42 < merpnderp> root is a magical all powerful entity. It cares not about groups :P
19:42 <@MI6> joyent/node: Daniel G. Taylor v0.10 * 299b8b3 : https: Add `secureProtocol` docs (+1 more commits) - http://git.io/qIR1KA
19:44 <@MI6> joyent/node: Daniel G. Taylor v0.10 * 675e858 : https: Add `secureProtocol` docs - http://git.io/4mC74w
19:44 < redhoodie> so I open a jade file, and there're parts omitted in my editor (vim) when I compare it with the one on github. Is it because I didn't install jade ? 
19:44 < JediUnixMaster> eddyb: Correct me if I'm wrong, I'm running NodeJS  as the user, and I don't think,,, and that is what your confirming, is that there r no resources that it needs other than its own, so there is no reason to make root part of the nodejs's group ??
19:46 < eddyb> JediUnixMaster: the group nodejs doesn't exist, node.js doesn't need/use a specific group for anything. if you're not running node.js as root, you don't need to touch root's settings/groups/etc. at all
19:47 < JediUnixMaster> eddyb: ok thank you, then i have been given some bad advice, thank you very much
19:51 < eddyb> bnoordhuis: but the parser stuff just makes the native heap go from 4MB to 20MB to 3MB, or something like that, it's pretty much inoffensive
19:53 < JediUnixMaster> geek
19:53 < _6a68> recommendations on an EventEmitter alternative that acts more like DOM events?
19:54 < _6a68> so many libs on npm
19:57 < eddyb> bnoordhuis: unless something is keeping a pool SlowBuffer alive, it should be garbage collected, right?
20:00 < eddyb> streams don't seem to be doing anything extremely dangerous either, unless stdout over-buffers
20:02 < myndzi> where do the node libraries reside on a linux install?
20:02 < eddyb> myndzi: "libraries"?
20:02 < myndzi> i've got a /usr/local/lib/node_modules but it's only npm stuff
20:02 < bnoordhuis> eddyb: that's correct
20:03 < myndzi> the javascript modules
20:03 < bnoordhuis> myndzi: the core libs are compiled into the binary
20:03 < myndzi> ah
20:03 < myndzi> no wonder i couldn't find them :P
20:03 < eddyb> https://github.com/joyent/node/tree/master/lib I was just looking at some of them
20:03 < myndzi> yeah, i read the github a lot
20:03 < myndzi> but i was looking to include one in a phantomjs script
20:04 < myndzi> or at least see if it worked
20:04 < myndzi> i can just grab the source then
20:04 < myndzi> if there was a native location i wanted to set that as the lookup path
20:05 < eddyb> bnoordhuis: is it possible for SlowBuffers to not get collected if I run JS code without stopping? like a while(1); after allocating and dereferencing a lot of buffers
20:06 < myndzi> chrome's garbage collector seems pretty nice lately, just the other day i helped a guy avoid a problem like that in firefox
20:06 < bnoordhuis> eddyb: if you don't do further allocations in that loop then yes, that's possible
20:06 < myndzi> he was creating a bunch of gradients in a render loop
20:06 < myndzi> but it only was a problem in firefox
20:06 < myndzi> chrome seemed to take care of it easily
20:07 < myndzi> s/chrome/v8/
20:07 < eddyb> I know about OSR in v8 (on-stack-replacement) and a little about GC, I'm not sure if v8 is willing to run a weak callback for a SlowBuffer in the middle of hot JS code
20:08 < eddyb> bnoordhuis: your "if" is confusing, you mean SlowBuffer collection will be delayed by long-running JS code?
20:09 < bnoordhuis> eddyb: not exactly
20:09 < bnoordhuis> v8's gc only sweeps when it can't avoid it (i.e. tries to be as lazy as possible)
20:10 <@isaacbw> lazy bastard
20:10 < bnoordhuis> if your loop doesn't do allocations, so doesn't create objects or arrays or floating-point numbers, then there's no reason for v8 to run the collector
20:10 < bnoordhuis> or strings or... you get the point
20:10 < eddyb> so it can grow to 1.5GB, then it's forced to do aggressive GC until it can't free anymore space, right?
20:10 < bnoordhuis> and it's possible that v8 inlines some of those allocations
20:11 < bnoordhuis> yes and no
20:11 < bnoordhuis> v8 has major and minor gc modes
20:11 < bnoordhuis> when possible it's does a minor, incremental sweep
20:11 < bnoordhuis> just enough to get by
20:12 < bnoordhuis> the major mode is when it does a compacting gc run
20:12 < bnoordhuis> actually, it's more complex than that
20:12 < eddyb> I couldn't remember the names, but I was looking at the flags the other day
20:12 < bnoordhuis> but i'll try not to digress too miuch :)
20:12 < eddyb> this entire thing is a Rude-Goldberg contraption :(
20:13 < eddyb> I mean, it's a decompiler written in ES6, using traceur-compiler to be transpiled and ran on node.js
20:13 < eddyb> although I do give back control to the event loop, I may be using nextTick wrong (so I could be running in the nextTick loop instead)
20:14 < eddyb> I should try a large test with no profiling and a setTimeout 50 instead
20:16 < lacrymology> is there a less stupid shell for node? something that remembers stuff between sessions?
20:16 < eddyb> I've seen an old pullreq for persistent history, not sure why that wasn't merged
20:17 < bnoordhuis> because it doesn't have to be in core, you can write a better repl as a module
20:18 < lacrymology> does it exist, though?
20:18 < bnoordhuis> yeah, there's a few on npm
20:19 < AAA_awright> As long as an *entire build system, blog, and package manager* is checked into the repository I *really* don't want to hear the "doesn't have to be in core"
20:23 < bnoordhuis> AAA_awright: :-/
20:24 < eddyb> so with await setTimeout(50); it runs for an actual time of 0:21 and slowly grows to 173.7MB (never goes does, at least not visibly)
20:26 < eddyb> running in a hot loop, actual time: 0:18, but the RAM usage gets to 192.3MB
20:26 < eddyb> the difference of 19MB is just wasted RAM :|
20:28 < bnoordhuis> eddyb: it's somewhat amusing. when the gc was still eager, people complained too much time was spent gc'ing
20:28 < bnoordhuis> now it's eager and people complain it uses too much memory!
20:28 < bnoordhuis> err, lazy
20:29 < eddyb> bnoordhuis: my app really grinds to a halt when reaching maximum heap limit
20:30 < RLa> and when you make it configurable then people will complain how hard it's to tune it
20:30 < jesusabdullah> bnoordhuis: make it choose to be eager or lazy with a pseudo-deterministic model on-the-fly
20:30 < bnoordhuis> jesusabdullah: well, you already can, it's pretty tweakable through command-line switches
20:31 < scott_gonzalez> chjj: Can you release a new vesion of marked? I'd love to not have to hack this into the jQuery site code: https://github.com/chjj/marked/commit/3fb76d7b2aa6ec86db4697a88238921c94d5dfaa
20:32 < chjj> scott_gonzalez: yeah, ill do that today. been meaning to.
20:32 < eddyb> bnoordhuis: hmm, my setInterval(x=>x, 1000); trick didn't work for some reason, the processes exited anyway
20:32 < scott_gonzalez> chjj: Thanks.
20:32 < jesusabdullah> bnoordhuis: node --gc="whatever-suits-your-mood"
20:34 < eddyb> 0:30/300MB for another test, delayed 5ms between jobs
20:35 < eddyb> bnoordhuis: nah, the difference is around ten, twenty MBs. there's something much larger that's growing and never shrinking
20:43 < jesusabdullah> eddyb: well yeah, x=>x will throw a syntax error
20:43 < eddyb> jesusabdullah: ES6
20:44 < jesusabdullah> uhhh
20:44 < eddyb> looks nicer than ()=>{} and does almost the same thing. in that context, it keeps the event loop alive
20:44 < jesusabdullah> no worky in my repl
20:44 < eddyb> because your repl isn't running traceur-compiler
20:45 < jesusabdullah> I'm sneering so hard right now I'm worried my face is going to fall off
20:45 < jesusabdullah> feel sorry for me plz
20:49 < nero_> i'm new to js/nodejs and want to create an restfulAPI with express + postgres
20:49 < eddyb> that sounds ugly
20:50 < ckknight> nero_: alright then
20:50 < nero_> http://pastebin.com/PfM2ktpS when using client within the products.js "client" the module "client" cannot be found
20:51 < nero_> how to expose the pg.client correctly to the products.js?
20:51 < eddyb> bnoordhuis: thanks for all the help, even if we haven't figured what's using all that memory (does v8 ever unmap RAM pages?) :D
20:51 < eddyb> good night, it's getting late and I have to wake up early
20:52 < eddyb> nero_: missing " on the 4th line
20:52 < eddyb> even pastebin complains
20:52 < nero_> besides that :P just a typo within the pastebin
20:53 < eddyb> nero_: client is a local variable to app.js, it's not in product.js
20:53 < skynetsys> has anyone created a swagger socket server?
20:54 < nero_> i tried client = exports.module = ... but couldnt "import" it into products.js
20:54 < eddyb> nero_: you can do var client = require('../app.js'); at the top of product.js. don't worry, it won't break, as long as you export client from app.js before importing other modules
20:55 < mscdex> nero_: why not instantiate your client at the top and pass that in to your "products.js" ?
20:55 < mscdex> nero_: like `require("./api/products)(client)`
20:55 < mscdex> except with the end quote ;-)
20:56 < eddyb_> worst freaking time for your window manager to die :(
20:57 < eddyb_> nero_: https://gist.github.com/eddyb/e2df5f76256e698b5742
20:57 < eddyb_> you have to export client before importing something that needs client
20:58 < nero_> so the order matters?
20:58 < eddyb_> very much so
20:59 < nero_> awesome, thanks :)
20:59 < nero_> its working
20:59 < eddyb_> if you import product.js before exporting client, product.js won't load client, just an empty exports object
20:59 < JediUnixMaster> eddyb: i removed the nodejs user, and uninstalled nodejs, I added ppa:chris-lea/node.js and then did a sudo apt-get install nodejs.  node test.'s runs fine, but npm is not installed. I have had to do a sudo apt-get install nom, it does not auto install as SomeoneWeird suggested last night here
21:00 < mscdex> nero_: you could also do this: https://gist.github.com/mscdex/31b8f2165c38fbe95bd1
21:00 < nero_> cool, looking into it, thanks eddy!
21:00 < JediUnixMaster> err test.'s test.js   and nom is npm  
21:00 < nero_> any pro / cons to the 2 solutions?
21:01 < eddyb_> JediUnixMaster: some distros have a single package for both, I guess ubuntu is different
21:01 < eddyb_> JediUnixMaster: now you can do anything you want with node.js :P
21:02 < JediUnixMaster> eddyb_: yes it appears that way, just thought you would like to know,  Again, thank you for being so kind with your time to help us new to Node :)
21:02 < nero_> "require(module)(object)" does the second ( ) pass an object to the module?
21:03 < mscdex> nero_: IMHO app.js is something that should be "main" and not be required by individual route modules
21:03 < mscdex> nero_: yes
21:04 < nero_> mscdex: thanks, advice?
21:04 < mscdex> nero_: another approach might be to put your database and other connections in a separate module and then just require that anywhere you need it, then you don't have to worry about passing stuff in or weird requires back to app.js
21:08 < mscdex> nero_: here's an example of that additional approach: https://gist.github.com/mscdex/d80af36d7f9fd82da7b9
21:08 < nero_> mscdex: like putting into database.js with all the postgres stuff and then require(database) in app.js ?
21:08 < mscdex> nero_: you could tack on anything else into that config.js that you need, like settings, etc
21:11 < alfonsodev> a related question (I think), I'm doing a web with express in a "modular" way , like in the tjholowaychuck video http://vimeo.com/56166857
21:11 < nero_> mscdex: and within all database entities (products, categories, orders, etc) i need to require the client or can i expose it from the config.js within doing a require every time?
21:11 < alfonsodev> I'm wondering how to pass settings to the modules
21:12 < alfonsodev> I've read some people saying to extend  req object
21:12 < mscdex> nero_: if you just need the client, then just do the same as product.js: `var client = require('../config').client;`
21:12 < substack> alfonsodev: mutating the req object is pretty evil
21:13 < nero_> ok thank you! greatful for any help
21:13 < mscdex> nero_: otherwise you can also do: `var cfg = require('../config'), client = cfg.client;` if you want to access other things in your config besides your db client
21:13 < substack> it makes the order of operations needed to use your module important where it shouldn't need to be
21:13 < substack> just pass parameters around explicitly
21:13 < alfonsodev> heap, I' m trying to avoid it,   but app.use(myotherapp)  does not have another parameter
21:14 < tjholowaychuk> alfonsodev myotherapp(options)
21:14 < tjholowaychuk> can return another function
21:14 < mscdex> ^
21:14 < tjholowaychuk> module.exports = function(options){ return function(){} }
21:14 < alfonsodev> hum .., I'm gonna try that
21:15 < alfonsodev> thanks for the video, by the way
21:30 < nero_> mscdex: they way you suggested it (https://gist.github.com/mscdex/d80af36d7f9fd82da7b9) doesnt work for me. wrong order again?
21:30 < segomos> nodeboners
21:33 < deoxxa> nero_: if only there was a mechanism for sorting a result set in sql
21:34 < accc> SORT BY
21:34 < deoxxa> rofl
21:34 < cianomaidin> NodeConf.eu alive ; absolutely stoked after much much planning
21:34 < nero_> cannot find module "../config.js"
21:37 < ProLoser> what's the default install location for npm modules globally?
21:39 < ProLoser> how do you guys usually install node? do you use the pkg or do you use brew?
21:40 < merpnderp> ProLoser: sudo make install
21:40 < merpnderp> ./configure; sudo make install
21:41 < ProLoser> where does the package install to?
21:41 < merpnderp> well, since I'm always curious about long running jobs and CPU utilization on my virtuals I do '.,/configure; sudo time make install' :P
21:42 < merpnderp> ProLoser: did you look in /usr/lb?
21:42 < nero_> another dumb question....when doing required() how to the paths solve? ./ one directory up, ../ two directories up?
21:43 < ProLoser> it's not in there
21:43 < merpnderp> nero_: ./ is the current dir
21:43 < ProLoser> blah
21:43 < ProLoser> shit gets installed in too many places :/
21:43 < merpnderp> welcome to *nix
21:43 < ProLoser> i tweaked my $PATH and now all my modules are gone
21:43 < ProLoser> do you guys normally sudo your global modules?
21:44 < ProLoser> i thought global modules install to ~/node_moduels or something
21:44 < merpnderp> unless you sudo, then they install in root's dir.
21:44 <@isaacbw> that's not true
21:44 < ProLoser> you mean unless i -g
21:44 < merpnderp> I think....I just know they aren't in my local
21:44 < merpnderp> maybe /usr/lib/node/node_modules?
21:45 < merpnderp> What I wouldn't give to have node be my day$job
21:45 < zomg> Your first born?
21:45 < merpnderp> close......but too much.
21:45 < zomg> lol
21:46 < deoxxa> merpnderp: it is for me!
21:46 < merpnderp> deoxxa: jealous :P
21:46 < zomg> Contract with client ends in 1 mon, we'll see what exciting things lie ahead after that
21:46 < zomg> =)
21:47 < zomg> Though I think I'll just chill for a month or two just doing random shiz I don't have time to do now
21:47 < s5fs> I'm on an endless contract, haha
21:47 < merpnderp> s5fs: hah, that's called 'work'.
21:47 < s5fs> project has been pushed back twice now
21:47 < s5fs> merpnderp: indeed!
21:48 < zomg> This client wanted me to move to SF to work for them
21:48 < zomg> No thanks, office jobs not for me
21:48 < zomg> =)
21:48 < ProLoser> if i use brew to install node, what should i add to my $PATH for node modules?
21:49 < ProLoser> zomg: you haven't been to an sf office then
21:49 < zomg> I don't really care
21:49 < ljharb> zomg: tell them they can move you to SF if you can work from home :-) then as ProLoser says, you'll end up preferring the office anyways
21:49 < merpnderp> zomg: once the hackerspace opens up in my town I think I'll quit the dayjob and strike out on my own. I've contracted before and hated working in the house.
21:49 < zomg> If it requires my presence at certain times of day
21:49 < zomg> It isn't for me
21:49 < ljharb> zomg: then it's not a real SF tech job :-p
21:49 < zomg> I'm worried it would require too much of my time at the office actually
21:50 < zomg> lol
21:50 < accc> sf offices, with marijuana plants and minibar
21:50 < zomg> Not even the typical 8 hours a day as with finnish jobs usually
21:50 < zomg> but more like 12 hours
21:50 < zomg> because startups
21:50 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * dfff2e9 : include: document uv_update_time() and uv_now() - http://git.io/_miW0A
21:50 < zomg> I rather just do whatever and work whenever I feel like it
21:51 < zomg> Sometimes I don't do anything during the week and then I'm in a huge hurry during the weekend to get all the work done
21:51 < zomg> but it doesn't matter
21:51 < zomg> =)
21:51 < accc> me2
21:51 < zomg> merpnderp: yeah I kinda wanna do my own apps or SaaS or something
21:51 < zomg> but it's hard =)
21:52 < zomg> technical part, easy. The rest ain't
21:52 < accc> tur, but a good feeling
21:52 < accc> tur=true
21:52 < nathan7> ProLoser: brew-node has broken npm
21:52 < nathan7> ProLoser: There are OS X binaries on nodejs.org
21:53 < merpnderp> zomg: yeah, I worked on a side project doing a small service app and think I want to just start pumping out SaaS apps that are all simliar enough to share a bunch of code. 1,000 user at $5/month is a living. At 5,000 users it's a Dr's wages.
21:53 < zomg> hehe
21:54 < zomg> I actually had a node based SaaS thingy
21:54 < accc> i do in web-apps for browsers. i dont like these one app for every device/os way
21:54 < zomg> it was more of an experiment which I thought "I'll just put a price tag on this!" than anything serious
21:54 < merpnderp> zomg: anyone sign up?
21:54 < zomg> I did have one user paying me 5 bucks a month for it, but it wasn't something that would've been sustainable in the long run
21:55 < ProLoser> nathan7: it's broken for brew?
21:55 < zomg> Competition was too well established and the niche was a bit too small, and the aspects of my service which were the differentiating factors weren't important enough for most users to consider paying
21:55 < zomg> It was an interesting learning experience though
21:56 < deoxxa> ProLoser: no, the brew packager broke it
21:56 < deoxxa> ProLoser: i.e. whoever packaged it for brew
21:56 < merpnderp> zomg: the thing about 1-2 man shops is they can do SaaS cheaper than a company. $10,000/month is great for 2 people. It's losing money for a corporation.
21:56 < zomg> Indeed
21:57 < deoxxa> time to get on a plane!
21:57 < zomg> My ideas for anything that I consider fun to do generally just don't bend too well to the business angle
21:57 < niggler> what's your saas merpnderp ?
21:57 < ProLoser> what are you talking about?
21:58 < nathan7> ProLoser: fairly, yeah
21:59 < merpnderp> niggler: If I tell you, then you'll whip it out overnight and crush my dreams.
22:00 < pachet> its like facebook for people who love dogs
22:00 < pachet> dogbook
22:00 < niggler> lol merpnderp no zuckerpunching here
22:00 < merpnderp> niggler: but I have about 4 ideas I think are solid, 1 of which I've done google surveys and SEO and search space research on, tracked down the competition and know what they offer. Then I've got 3 other ideas on the back burner.
22:01 < charlydagos> I'm with dogbook
22:02 < s5fs> dogbook is great, two paws up
22:02 < niggler> two wags of the tail
22:03 < s5fs> i think there should be more dog-focused services
22:03 < s5fs> barkbox = birchbox (and already exists)
22:03 < niggler> bitchbox?
22:03 < s5fs> i think too many ppl were turned off by pets.com, despite the incredible sock puppet marketing
22:04 < s5fs> niggler: birchbox.. get this, you PAY a monthly subscription to have someone send you trial products!
22:04 < niggler> s5fs: id be disturbed if you were turned on by the sock puppet
22:04 < niggler> no way!  that's awesome
22:04 < niggler> that's like penny-auction awesome
22:04 < s5fs> haha
22:14 < oti8> I wrote a multi-player game server using node.js, socket.io, mongo and redis. It's waiting for approval in the Apple App Storeâ€¦. until then: what can I do to prepare for a much higher server load and potentially critical crashes? This is my first production JS project
22:16 < thesisb> oti8: what is it called?  I'll keep an eye out as I'm working on a similar project
22:16 < oti8> thesisb: https://www.facebook.com/EvilApples
22:17 < rud> ...
22:17 < accc> a good logging, maybe running as multi-process with workers, so by a crash the master simple restarts a worker
22:17 < thesisb> oti8: have you seen http://stackoverflow.com/questions/12526265/loadbalancing-web-sockets
22:17 < niggler> oti8: give a tl;dr for those that don't have Facebook access
22:18 < thesisb> Oh I like that card game, and now you made an app for it! splended
22:18 < niggler> dumb question: is libre office open source?
22:18 < thesisb> splendid*
22:19 < oti8> tl;dr It's Cards Against Humanity or 'Apples to Apples' for the iPhone
22:19 < thesisb> niggler: yes
22:19 < charlydagos> libre = open as far as I'm concerned, but it could just refer to usage being free and not code being open :|
22:19 < accc> niggler: yes, i think its the new name of open office
22:19 < FellowMD> heyo is npm crawling for anyone else right now?
22:19 < FellowMD> https://npmjs.org/package/async for example
22:19 < niggler> http://www.joeffice.com/pr-joeffice-1st-release.pdf I'm trying to understand "the first open source office suite written in Java."
22:20 < oti8> accc: We haven't tested multi-process access to our DB although it *shoudl* work and was architected for that. 
22:20 < oti8> thesisb: thanks! you should 'like' us ;)
22:21 < accc> i use it for my project, with clusterhub and mysql
22:21 < Havvy> niggler: Libre Office is open source, yes.
22:23 < niggler> Havvy: i figured as much, but the claim i read was strange
22:24 < accc> the best way i think, is to spawn one worker for every cpu/core, so u can use the full power of ur server
22:26 < charlydagos> I joined this room to learn Node so I think it's a better time than ever to ask: I understand that Node is single-threaded, so what is a "worker" in this scenario? is it a child process, or a completely separate process?
22:26 < oti8> What about changing source code on the production server? Best practice for not taking down the server for too long?
22:26 < accc> child process
22:26 < patrickod> anyone here have experience with sinon.js ? 
22:27 < oti8> charlydagos: you can still create multiple processes
22:27 < charlydagos> I see, although each process is still single-threaded
22:27 < charlydagos> as far I understand there's no such thing as a "thread" in node
22:27 < charlydagos> and I'm quite excited about that prospect to be honest
22:28 < accc> node is a runtime
22:28 < accc> working async and event-based
22:29 < thesisb> charlydagos: maybe you want https://github.com/laverdet/node-fibers
22:31 < charlydagos> thesis thanks that one looks interesting =D
22:33 < charlydagos> accc yeah I had understood all that by doing some skimming here and there, I was just a little bit uncertain on nomenclature regarding workersâ€¦ easy enough though, I think I'll have to put some stuff in production to see how it really works
22:34 < charlydagos> as soon as I find something to do more interesting than "hello node.js world" heh
22:35 < accc> ok :D
22:41 < niggler> lol http://www.slant.co/topics/102/~what-is-the-best-variant-of-coffeescript
22:42 <@isaacbw> "javascript"
22:42 <@isaacbw> beautiful
22:42 < ljharb> +1
22:42 < TheAceOfHearts> I lol'd.
22:43 < accc> haha, smart :>
22:55 < jaCen915> Does anyone here recommend for/against wintersmith?
22:55 < Havvy> Never heard of it.
22:55 < jaCen915> Havvy: http://wintersmith.io/
22:56 < niggler> 706 stars, 90 forks, last change 9 hours ago
22:56 < niggler> seems like there's nonzero traction
22:56 <@isaacbw> just try it and decide for yourself jaCen915 
22:56 < progrock`> jaCen915: I liked wintersmith quite a bit for a SSG
22:56 <@isaacbw> niggler: it was on the front page of HN :P
22:56 < niggler> ah
22:57 < jaCen915> isaacbw: yeah that's where I took notice of it
22:57 < niggler> yeah HN is routed to 127.0.0.1 in my /etc/hosts
22:57 <@isaacbw> everyone probably forked it impulsively
22:57 < niggler> heh good pt isaacbw 
22:57 <@isaacbw> niggler: I ended up doing that with reddit so whenever I accidentally try opening reddit, I end up opening my test server and carry on with my work :P
22:59 < niggler> actually, the SNR for /r/javascript is much better than HN
23:00 < niggler>  /r/nodejs is pretty dead
23:02 < mikolalysenko> cache oblivious array operations for js:  http://0fps.wordpress.com/2013/05/28/cache-oblivious-array-operations/
23:03 < niggler> this doesn't work for standard arrays mikolalysenko 
23:03 < mikolalysenko> niggler: what do you mean?
23:04 < Havvy> niggler: That's sad...except for the fact I don't go on reddit.
23:04 < niggler> cache-aware makes sense when you know the access patterns
23:04 < mikolalysenko> niggler: did you read the article?
23:04 < niggler> yea i did mikolalysenko 
23:05 < niggler> stride etc makes sense in C (and incidentally, all of the lapack and blas routines accept stride parameters)
23:05 < mikolalysenko> I don't mean to be rude, but I don't think you understood the article...
23:05 < niggler> I think you meant to use buffers 
23:05 < mikolalysenko> no, I am using typed arrays
23:06 <@isaacbw> does anyone remember that tool that was on hn recently that generates color schemes based on dribbble data?
23:07 < niggler> typed arrays are buffers
23:07 < niggler> isaacbw: there's a search
23:07 < mikolalysenko> niggler: well, depends what you mean.  they are actually arraybufferviews, but they are not buffers in the node.js sense
23:07 < mikolalysenko> niggler: but stride *does* make sense for multidimensional arrays
23:07 < niggler> *ArrayBuffer
23:07 < niggler> there we go
23:09 <@isaacbw> niggler: oh perfect, that did the trick (http://nathanspeller.com/color-pickers/)
23:09 < mikolalysenko> at least for ndarrays anyway
23:09 < mikolalysenko> if you read the first article in this series it should explain how it works
23:09 < mikolalysenko> http://0fps.wordpress.com/2013/05/22/implementing-multidimensional-arrays-in-javascript/
23:10 < mikolalysenko> the second article is about how to optimize how you iterate over groups of ndarrays simultaneously
23:32 < aah> anyone have a pointer to anything describing v8's memory layout and GC algorithms?
23:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:40 < progrock`> well, got the initial functionality of my jsfiddle clone working... in about 14 hours of development... not too bad (not patting my own back, more impressed at the ease of node/express/passport/mongo)
23:41 < charlydagos> nice nice, is it just dev or you got it on some server? perhaps we can break it for you :D
23:42 < charlydagos> it's good to know though, gives me an idea for a good Node pet project
23:42 < progrock`> charlydagos: umm, I could thro it on the server.. and you can break it pretty easily, lol
23:43 < progrock`> charlydagos: I probably need about an hour to get things funcitoning smoothly (ie. right now you have it hit a specific url to create a new doc... should be automatic when you hit the root)
23:43 < progrock`> s/it hit/to hit/
23:43 < progrock`> and while I have user management running, I'm not linking docs to the user yet, lol
23:43 < charlydagos> yeah, boilerplate stuff, I get itâ€¦ you got the interesting part done first :P
23:44 < progrock`> got a bunch of glue, and clean up to do, but happy it actually works
23:44 < progrock`> tho, my big goal is to use sockets for collab editing.. I am not there yet
23:44 < charlydagos> yeah, that's always an interesting aspect
23:44 < charlydagos> socket.io is used for sharelatex.com
23:45 < charlydagos> sharelatex.com = awesomeness
23:45 < progrock`> here, give me a min I'll post a demo.. nothing special obviously
23:45 < charlydagos> awesome
23:46 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * b93cf8b : linux: don't ignore OOM errors in uv_cpu_info() (+2 more commits) - http://git.io/5t3S4Q
23:47 < accc> socket.io roxx (and socket.io-clusterhub for multi-processing)
23:47 < charlydagos> probably too advanced for me at this stage, but I'll be sure to check that out
23:48 < progrock`> http://codedhere.com/doc/51a4d82a3c0bc5e726000001#
23:48 < progrock`> so, almsot nothing actually works, haha
23:48 < progrock`> but save works
23:48 < accc> hehe
23:48 < progrock`> and if you refresh the page you will see the preview
23:48 < progrock`> and if you hit a url /doc/anythingThatsNotaDocID  you'll get yourself a new doc
23:49 < progrock`> login works, but has no meaning right now.. and is currently limited to gogle/yahoo... and is by no means skinnde
23:49 < progrock`> settings are ignored... the jquery is automaticlly loaded in preview (that will be changing, just wanted it for the demo)
23:49 < charlydagos> sweet man
23:50 < progrock`> and needless to say, the UI is onlu 25% there.. no resizing, etc.
23:50 < charlydagos> I'll be stealing your idea for a pet project as means to learn Node hehe
23:50 < progrock`> but, my first real node/mongo app.. so I'm happy with it so far
23:50 < progrock`> haha, thats why I'm doing it as well
23:50 < progrock`> well.. node/sockets
23:50 < progrock`> Mongo I have some experience with alredy due to work.. but I am super rusty
23:51 < charlydagos> I use Mongo regularly, but in Ruby/Sinatra
23:52 < charlydagos> quite simple to get yourself set up in that environment
23:52 < progrock`> I sorta use it was scala, lol.. but I'm far from a Scala expert... I just get suckered into writing som eof the mongo code at work
23:52 < progrock`> well if you know Ruby/Sinatra, express should be pretty natural
23:53 < progrock`> with scala*
23:53 < charlydagos> yeah the docs look like it's a pretty trivial first exposure
23:53 < progrock`> yeah, it is.. I mean.. my code is somewhat ugly, and I should separate some things... but its really not bad at all
23:53 < progrock`> of course, I could be pretty open for exploits i'm guessing
23:53 < progrock`> thats one giganticbenefit of us using scala at work
23:54 < progrock`> goodluck hacking us, haha
23:54 < charlydagos> I've done very little in Scala, just some universti
23:54 < charlydagos> University stuff
23:54 < accc> i think http://nodeguide.com is good for a better view of node
23:54 < progrock`> true... our whole platform is scala... got some really talented develpoers
23:54 < charlydagos> I thought people were just ignoring it as a language, actually, and now it's pretty "hot" if you will
23:55 < progrock`> well I would safely say its superior to java, and relatively simple for anyone using java to replace it with scala (sorta)
23:55 < progrock`> but I don't like backend coding much, haha.. I stick to front end, where the money is
23:56 < charlydagos> I work for a small company, I get to do both :P
23:56 < brainproxy> progrock`: did you try out clojure?
23:56 < progrock`> charlydagos: heh, mine was small when I started, lol
23:56 < progrock`> brainproxy: a little... I actually am much better with haskell than closure
23:56 < progrock`> clojure*
23:56 < charlydagos> I remember pulling off some nice functional-style programming with Scala, especially compressed lists generations, so I'll try to do push some jars tomorrow
23:57 < charlydagos> try to push** (getting kinda late hehe)
23:57 < progrock`> ironically I really only learned haskell to get better with functional style JS
23:57 < brainproxy> progrock`: at my shop we like to use clojure for heavy duty backend stuff; nodejs and front-end js for everything else basically
23:58 < progrock`> weird, I wonder why my iframe isnt being greedy, thought it was a block element
23:58 < progrock`> brainproxy: true, yeah my company uses scala for all calculations, and for running the front end... pretty much only display logic and charts on the front end
23:59 < charlydagos> well that's basically how most systems run if you're getting any real traffic :P
--- Log closed Wed May 29 00:00:25 2013
