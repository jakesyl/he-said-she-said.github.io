--- Log opened Sun Oct 28 00:00:12 2012
--- Day changed Sun Oct 28 2012
00:00 < jugglinmike> I wonder how this will effect my stress test performance
00:00 < davebe> seems client-side included in index.html is not working?
00:00 < jugglinmike> shripadk: link me to the pull request.. I'd like to support it, and also try out your fork for testing
00:00 < shripadk> sure i'll do now
00:01 < shripadk> what about your other issue?
00:01 < shripadk> is the load being spread across all cores?
00:04 < jugglinmike> honestly, I'm not sure this will effect that :/
00:04 < EuroNerd> Can anyone point me to a good resource on how to do user authentication & sessions in Express with Socket.io?  There's a lot of fragmentary stuff and a lot of outdated stuff (since Express 3.0) on the web.
00:04 < EuroNerd> Or maybe someone can just explain to me how to do it?
00:05 < shripadk> jugglinmike: the load should be distributed
00:05 < shripadk> that should be taken care of by Node itself
00:06 < jugglinmike> The work we've done will make things more memory efficient, but I still have to learn why the CPU is getting pegged when I use cluster
00:06 < shripadk> all socket.io has to do is ensure that the session is shared among all the child processes (which it does)
00:06 < davebe> EuroNerd: im wondering for my own benefit how do you test that locally?
00:06 < EuroNerd> davebe, I don't understand the question.  Why would it be a problem?
00:06 < shripadk> what is your CPU usage?
00:07 < shripadk> it should be greater than 100% while in a cluster
00:07 < jugglinmike> My plan is to run my tests with cluster spawning a single worker process. That will help me verify if it's a cluster thing or not
00:07 < jugglinmike> well it depends on the tool I use to monitor cpu usage
00:07 < jugglinmike> sar reports ~98%
00:08 < jugglinmike> thats usr-level
00:08 < jugglinmike> htop reports 100% on all four "cores"
00:08 < jugglinmike> (the system is dual core with hyper threading)
00:08 < shripadk> i think that should be fine
00:09 < shripadk> in your setInterval
00:09 < shripadk> have a console.log(process.pid + " " + clients.map….
00:10 < EuroNerd> no experts on Express + Socket.io sessions?
00:10 < shripadk> so you know if the load is being distributed
00:11 < jugglinmike> EuroNerd: https://github.com/senchalabs/connect/issues/588
00:11 < jugglinmike> read through that
00:11 < EuroNerd> thanks
00:11 < davebe> EuroNerd: i'm trying to fix a problem on my end
00:12 < jugglinmike> shripadk: I'll give that a shot. It will have to wait till Monday though. It's getting late here in Boston, and it's been a long day
00:12 < EuroNerd> davebe, and what's your problem?
00:13 < davebe> EuroNerd: prompt("test") doesn't prompt when placed in client-side js, but it works if placed in the html page
00:13 < EuroNerd> lol
00:14 < EuroNerd> u sure the client .js file is loaded properly?
00:14 < davebe> am not sure
00:14 < EuroNerd> i.e. alert() would work?
00:14 < shripadk> jugglinmike: sure :) i'm going to push to my repo now and will be making a pull request
00:14 < EuroNerd> or console.log ?
00:14 < davebe> style.css is loading and it is placed in the same dir as the js
00:15 < davebe> EuroNerd: those dont work
00:16 < EuroNerd> davebe, u sure your script scr path is right in the html?
00:16 < davebe> EuroNerd: no, i don't know how express.static interpret it
00:17 < EuroNerd> well, express should interpret it no different than .css
00:17 < EuroNerd> but maybe u gave the wrong path in <script src="path">
00:17 < davebe> then no, its correct
00:19 < davebe> __dirname is '/a/b/c' not /a/b/c/' (not the slash at the end)
00:19 < davebe> css maybe be loaded differently?
00:19 < davebe> how do you write it so it works for you?
00:22 < EuroNerd> Yeah, I think .css may be loaded a little differently than .js.  Maybe one is relative to webserver or node root, while the other relative to .html location or sth.
00:22 < EuroNerd> So you've got to look closer at the paths.
00:23 < shripadk> jugglinmike: https://github.com/LearnBoost/socket.io/pull/1061
00:28 < jugglinmike> nice work shripadk!
00:30 < shripadk> jugglinmike: thanks
00:32 < shripadk> jugglinmike: getting late here! hitting bed now! gn! :)
00:32 < jugglinmike> night shripadk--nice working with ya
00:33 < shripadk> cya :)
00:37 < phillyDesignr> hi coffescript cli question if i want to uglify compiled js from "coffee -o ../lib/ -cwb ./ " how would  one accomplish this?
00:43 < EuroNerd> aaaaarghhh!   I can't get this friggin Socket.io to work with sessions!  Why does it have to be so twisted?!
00:51 < mscdex> EuroNerd: Twisted is a Python thing, not node ;-)
01:03 < hoborick> Why, to return a non-object from a module, do you have to use module.exports instead of just exports? Is that to keep Node's module system inline with the CommonJS standard or is there some other reason you can't just set exports to anything?
01:05 < substack> hoborick: there is no satisfying reason
01:05 < hoborick> substack: Thanks. I've been scouring the web trying to figure this out so good to know.
01:13 < EuroNerd> My socket.io returns handshake headers with no cookies.  Why?
01:16 < mscdex> hoborick: exports is a local variable passed to the module in a closure, so overwriting it does not change the reference held by module
01:17 < hoborick> mscdex: Thanks... that makes sense.
01:21 < tsingi> Do I have to resolve the call for load files with a callback?  i.e. css
01:23 < vicapow> so i've been working on a pet project for a while now. anyone want to give me some feedback?
01:23 < shanse> is it a cat?
01:24 < EuroNerd> vicapow, if you want to get some feedback from someone who is about to tear his hair out  :P   (fucking sessions with socket.io)
01:25 < vicapow> SHANSE: yes
01:25 < vicapow> SHANSE: http://clickb.in/2m
01:26 < vicapow> EuroNerd: what about socket.io and sessions?
01:26 < vicapow> also, that's the site
01:26 < vicapow> http://clickb.in
01:27 < EuroNerd> vicapow, I can't get socket.io with express to work with sessions. Do you know anything about this studd?
01:27 < EuroNerd> *stuff
01:27 < vicapow> EuroNerd: what's not working for you?
01:28 < EuroNerd> sessions specifically, can't even read session ID.  Actually, my socket.io handshake header doesn't have cookies in it.
01:30 < vicapow> EuroNerd: maybe unset the HttpOnly cookie option
01:30 < EuroNerd> i'm not sure i've got it set.  Where should it be?
01:31 < EuroNerd> I certainly didn't set it, unless it's by default.
01:32 < EuroNerd> ..not to mention, I work over https
01:35 < vicapow> EuroNerd: maybe you should try to explicitly unset it
01:35 < EuroNerd> in app.use(express.session({    settings?
01:36 < davebe> hi, i can't get server-side js to client-side js, will someone help me into this?
01:36 < vicapow> EuroNerd: app.use(express.session({ … cookie : { httpOnly : false } … )
01:37 < vicapow> davebe: what's you're question?
01:38 < vicapow> EuroNerd: did you read this?
01:38 < vicapow> EuroNerd: http://stackoverflow.com/questions/4641053/socket-io-and-session
01:38 < EuroNerd> vicapow, looks familiar
01:39 < vicapow> EuroNerd: well that lays it out
01:39 < EuroNerd> Well, for starters, it uses Connect. Can I just replace every "connect" keyword with "express"?
01:42 < EuroNerd> vicapow, also, it's outdated, since there's no more connect.utils.parseCookie, as in small-print comments on that site
01:43 < vicapow> vicapow: it's the same module
01:43 < vicapow> it's just accessible now from express
01:43 < vicapow> whoops.
01:43 < vicapow> EuroNerd: ^^
01:43 < EuroNerd> All the info on socket.io and sessions on the web is either fragmentary or outdated or both. I'm trying to get this to work for like 6h now.
01:48 < davebe> vicapow: yes, want index.html to load client-side js scrip
01:52 < EuroNerd> ok, i've had enough of this shit, i'm going to bed
01:52 < EuroNerd> bye
02:55 < deoxxa[grumpy]> so i made these two things
02:55 < deoxxa[grumpy]> https://github.com/deoxxa/dissolve and https://github.com/deoxxa/concentrate
02:55 < deoxxa[grumpy]> oh dear i typo'd a filename
02:55 < deoxxa[grumpy]> oh no i didn't
02:55 < deoxxa[grumpy]> yay \o/
02:57 < ChrisPartridge> hey guys, venturing into c++ land and having some issues - if someone has a moment can they take a look at https://gist.github.com/3967266
03:00 < ChrisPartridge> everything appears to build fine with node-gyp, but getting "node: malloc(): memory corruption" when running test script
03:01 < jwulf> hey guys, anyone using jquery with TypeScript?
03:03 < deoxxa[grumpy]> lol typescript
03:16 < jwulf> deoxxa[grumpy], yeah, aka ES6
03:17 < jwulf> for all you peeps who are still rocking it like it's 2012
03:25 < huangjs> i met a weird problem that if i use jquery's $.ajax to do a POST, there's no log message in node express. any hint?
03:25 < maqr> i have npm installed via brew, and i have ~/.npm, where my modules seem to be installed, but "npm bin" retuns $HOME/node_modules/.bin, which doesn't exist... any idea how i should fix it?
03:26 < maqr> oh, nevermind, i ran 'npm install' again and it somehow fixed itself... weird
03:28 < leelu> hi on centOS 5 i have installed python 2.6 using epel repo, i need to now install node.js
03:28 < jwulf> leelu, i went with creationix's nvm 
03:29 < jwulf> it's basically alternatives for node
03:29 < jwulf> and a lot less painful than hacking your rpm setup
03:29 < leelu> default python ver in centos 5 is python 2.4.3
03:29 < leelu> how do i specify to use python 2.6 while compiling
03:30 < leelu> compiling node.js
03:30 < jwulf> leelu, i recommend you use this: https://github.com/creationix/nvm
03:30 < leelu> ok jwulf, going thru it
03:32 < jwulf> deoxxa[grumpy], any particular reason for the grumpiness today?
03:35 < davebe> my internet went down, was there a solution to my problem?
03:36 < davebe> index.html is supposed to load clientside.js, but it doesn't (i know this because prompt("test") in index.html does prompt, but not in clientside.js)
03:37 < davebe> maybe it is because of express.static(__dirname): dirname paths don't end with "/", but in index.html it is called src="clientside.js" ?
03:39 < gluxon> davebe: Could you reiterate you entire problem? I don't believe I was here to see it.
03:39 < davebe> gluxon: i just did
03:40 < davebe> does the clientsidejs have to have the root fnuction (function ...  to start processing my functions like socket.on(...) ?
03:59 < niggler> how does node work with use strict?  in particular, if i have a script with a shebang line, will use strict be called?
03:59 < niggler> *will strict mode be enforced if i put it on line 2
04:04 < danheberden> niggler: use strict is context specific - you could specify a function body to "use strict"; 
04:04 < danheberden> so yeah, it'd work under the shebang
04:05 < danheberden> you could also do (function(){ "use strict"; /* your shit */ }());
04:05 < niggler> you can also do it globally if its the first statement
04:05 < danheberden> niggler: correct
04:05 < danheberden> since 'context', in that case, would be on the global object
04:06 < danheberden> though i think jshint, by default, wants it in a function body
04:06 < danheberden> e.g., module.exports = function(){ "use strict"; ...
04:09 < davebe> crashed again
04:09 < davebe> what should i do/
04:10 < deoxxa[grumpy]> davebe: your explanation is rather confusing. what are you trying to do? can you perhaps do up an example to reproduce the issue?
04:13 < niggler> deoxxa[grumpy]: any reason for being grumpy?
04:13 < deoxxa[grumpy]> people asking me why i'm grumpy make me grumpy
04:13 < deoxxa[grumpy]> it's a bit of a vicious cycle
04:14 < niggler> would you be less grumpy if i gave you a pumpkin spice latte?
04:14 < deoxxa[grumpy]> that sounds horrible :<
04:14 < niggler> haha
04:17 < niggler> danheberden: why does jshint complain about the global form of use strict
04:19 < davebe> k
04:19 < davebe> just wanna now if index.html is loading clientside.html
04:19 < davebe> serverside.js (i run it like "node serverside.js" is loading index.html, and style.css from it)
04:20 < deoxxa[grumpy]> davebe: you're really not giving us enough information to even start to help. can you do up an example?
04:20 < danheberden> niggler: i didn't look into it - i think it was *just* in a module definition? but it also might have been cleared up
04:20 < danheberden> because it was in grunt.js that i had the issue
04:20 < danheberden> and, apparently, it lints fine like this:  https://github.com/gruntjs/grunt/blob/devel/Gruntfile.js
04:20 < niggler> jshint has a 'globalstrict' option
04:20 < niggler> n
04:20 <@Nexxy> lol grumpy
04:21 < niggler> "Global strict mode can break third-party widgets so it is not recommended."
04:21 < davebe> index.html have <script src=clientside.js> in <head> , that is all
04:22 < davebe> dont know any node.js online simulators
04:22 < deoxxa[grumpy]> davebe: okay. it's line 43 of your clientside.js.
04:22 < deoxxa[grumpy]> davebe: fix line 43.
04:22 < davebe> clienside.js only have one line: "prompt("test")
04:23 < davebe> "
04:23 < niggler> what's the difference between exports and module.exports
04:23 < deoxxa[grumpy]> davebe: my point was that i'm completely guessing at what's wrong, because of your lack of explanation
04:24 < davebe> what's your guess?
04:24 < deoxxa[grumpy]> davebe: line 43 was my guess
04:24 < deoxxa[grumpy]> davebe: it sounds like you're using a framework. probably express. go ask in #express
04:25 < davebe> deoxxa[grumpy]: which line is it in the express file?
04:25 < bubbles10101> anyone written a JS to coffeescript converter? that would be sweet
04:26 < davebe> deoxxa[grumpy]: i use express like on the tutorial
04:26 < davebe> so there no problem there
04:27 < niggler> bubbles10101: what does that even mean?
04:27 < deoxxa[grumpy]> davebe: i don't care. you seem incapable of explaining your problem and i'm not nice enough to hold your hand while you learn how to use express.
04:27  * deoxxa[grumpy] back to work
04:27 < niggler> ok next question deoxxa[grumpy] 
04:27 < davebe> express is like in the tutorial
04:27 < davebe> which line is it now?
04:28 <@Nexxy> lol deoxxa[grumpy] be nice
04:28 < deoxxa[grumpy]> direct and honest > nice
04:28 < niggler> as they would say nexxy, you can only bring a horse to water; you can't force it to drink
04:28 < niggler> also, fuck civility
04:29 < niggler> draw inspiration from our elected leaders
04:29 <@Nexxy> I just mean things like "you seem incapable..."
04:29 < bubbles10101> niggler: it means is it possible to have compiler that takes nodejs async js files and compiles it to CS. how is that hard to understand...?
04:29 < niggler> like mitch mcconnell and his "id rather see america burn than help obama"
04:29 < davebe> Nexxy: did he get offended?
04:29 < niggler> can coffee script not handle plain js?
04:29 <@Nexxy> davebe, who?
04:29 < bubbles10101> it's obviously a lot more challenging going from JS->CS than the other way around... but I don't see any reason why it's fundamentally not possible
04:29 < bubbles10101> do you?
04:30 < bubbles10101> the advantage should be obvious...
04:30 < niggler> bubbles10101: is any valid javascript code also valid coffeescript?
04:30 < niggler> ?
04:30 < davebe> bubbles10101: i can't even get one load to work
04:30 < niggler> and no the advantages aren't obvious
04:30 < danheberden> so, nexxy, i just put together, like, who you are
04:30 < danheberden> after our pdx parking discussion
04:30 < danheberden> and it's like the whole universe finally makes sense
04:31 <@Nexxy> danheberden, oh?
04:31 <@Nexxy> wait
04:31 <@Nexxy> who am I? lol
04:31 < bubbles10101> niggler: sigh.. i see ;) you guys are in one of those moods tonight
04:31 < danheberden> oh, great, now you're getting all existential on me
04:31 < danheberden> Nexxy: @nexxylove
04:31 < danheberden> yes?
04:31 <@Nexxy> lol yes
04:31 < niggler> bubbles10101: coffee script makes baby jesus cry
04:31 < danheberden> yeah, gnarf had nice things to say about you
04:32 <@Nexxy> ohhh
04:32 < danheberden> and then it was like "oh, she lives in pdx!"
04:32 <@Nexxy> ya gnarf is nice
04:32 < danheberden> and then, like, we had that chat about parking at pdx
04:32 < danheberden> and then my whole work aligned
04:32 < danheberden> *world
04:32 < jwulf> if you are going to go *script, go typescript
04:33 <@Nexxy> danheberden, hah
04:33 < danheberden> niggler: also, re: module.exports - module is implied as the context, so it's unnecessary, but I like to be explicit
04:33 < jwulf> hey, is there a rest wrapping library that i can use client- and server-side?
04:33 < danheberden> similar to 'window.whatever'
04:33 <@Nexxy> yeah I did econ prking for jsconf
04:33 < jwulf> i'm using restler atm, but want my code to be portable
04:33 < niggler> danheberden I'm trying to decide how to structure the code
04:33 <@Nexxy> but it took so long to get back to my car after my trip
04:33 < niggler> should i wrap the entire thing in a function call
04:33 < danheberden> Nexxy: really?
04:33 <@Nexxy> yeah
04:33 < bubbles10101> niggler: nah dude. CS is da biz yo
04:33 < danheberden> did you do the "park between o and x" trick?
04:33 < niggler> or assign (exports = (function ….)())
04:33 <@Nexxy> no I forgot which ones
04:33 < davebe> Nexxy: ah it was like i said all along
04:34 < niggler> bubbles10101: CS introduces more problems than it solves
04:34 < davebe> __dirname have paths in the form '/a/b/c' , not in /a/b/c/
04:34 < niggler> like interstitial whitespace
04:34 < davebe> so the path became /a/b/cclientside.js instead of /a/b/c/clientside.js
04:34 < bubbles10101> niggler: well... only if you avoid it :p .. .and that will become harder over time, especially in mixed coding teams
04:35 < davebe> you have to put absolute includes in the form /mine.js instead of just mine.js : <script src="/mine.js">
04:35 < davebe> i guess the node team too busy to fix this
04:35 < niggler> wait wait wait bubbles10101 point to a browser that supports coffeescript?
04:35 < davebe> "/something" is not the form of a relative path, its the form of absolute path
04:35 < niggler> iirc there exists no such browser that natively supports coffeescript
04:35 < niggler> you have to translate to guavascript
04:36 < danheberden> i should make bourbonscript
04:36 < bubbles10101> niggler: it's coming... 
04:36 < danheberden> i would code in that from 5pm to 2am every day
04:36 < danheberden> bubbles10101: that's what he said?
04:37 < bubbles10101> protip: it's here to stay ;) http://www.google.com/trends/explore#q=CoffeeScript&cmpt=q
04:37 < danheberden> gross
04:38 < niggler> holy shit http://www.google.com/trends/explore#q=CoffeeScript%2C%20typescript&cmpt=q
04:38 < niggler> looks like typescript is here to stay
04:38 < niggler> in fact it blows away coffeescript
04:38 < bubbles10101> yeah i like typescript btw, but... i just don't see the evidence for your assertion that it's here to stay
04:38 < bubbles10101> that is for the market to decide
04:39 < bubbles10101> not mr niggler
04:39 < niggler> bubbles10101: the market seems to like typescript far more than coffee script as an alternative to javascript
04:39 < niggler> and you pointing to a google search trend doesn't imply any sort of staying power
04:39 < bubbles10101> that seems to be your opinion of the market, which is of course different from the actual market
04:39 < niggler> http://www.google.com/trends/explore#q=CoffeeScript%2C%20typescript%2C%20fortran&cmpt=q
04:40 < niggler> now fortran really has staying power
04:40 < niggler> puts type and coffee to shame
04:40 < deoxxa[grumpy]> niggler++
04:40 < bubbles10101> well.. actually that graph backs up my point. fortran is a dying language
04:40 < niggler> fyi i still write fortran code
04:40 < bubbles10101> the amount of interest is legacy
04:41 < danheberden> bubbles10101: i'm sure they are both "here to stay" in whatever regard - it's not like they will be deleted tomorrow
04:41 < bubbles10101> but if you want to go ahead and hone your 'fortran skilz0rs' - be my guest! :p
04:42 < danheberden> hopefully they will both have some positive impact on ecmascript
04:42 < devatwork> hey guys just starting on nodejs here. How would i go about making it listen on two different ports ?
04:42 < devatwork> ie i want to serve different php pages dependant on which url they go to
04:42 < bubbles10101> yeah - im really hoping harmony is going to work out.. i've been depressed about it for a while, but seems the idea to go modular makes more sense
04:43 < danheberden> devatwork: http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback
04:43 < danheberden> listen on that shiz
04:43 < bubbles10101> these monolithic standards that take a decade and try to do everything is a silly approach
04:43 < danheberden> bubbles10101: have you looked at es6 and 7?
04:43 < danheberden> like, shit is moving much more quickly
04:44 < danheberden> and while i don't like coffeescript, i think it's a neat way to test new features
04:44 < bubbles10101> yup.. generators, macros and classes = teh leet
04:44 < devatwork> danheberden, hmm im already doing server.listen(8080, function() {
04:44 < danheberden> devatwork: so do moar listens
04:44 < devatwork> ah, just on different ports ?
04:45 < danheberden> listen for all the things
04:45 < niggler> coffee script solves the wrong problem
04:45 < devatwork> s/the/teh/
04:45 < niggler> as does typescript
04:45 < bubbles10101> so im glad functionality is being addressed. however i do prefer the aesthetic of CS over JS
04:45 < bubbles10101> many people won't care, or prefer what they are used to... and so the pushback against stuff like CS is understandable
04:45 < danheberden> bubbles10101: that's the divergence, i think - i dislike the aesthetics, thus i don't like to use it
04:45 < danheberden> but as long as concept is driven home
04:45 < danheberden> i'm happy
04:46 < niggler> bubbles lemme give you an example
04:46 < niggler> \
04:46 < niggler> x=1;y=2;z = x +y
04:47 < niggler> what javascript is generated from that
04:47 < niggler> off the top of your head bubbles10101 
04:47 < danheberden> omg i wanna answer this so bad!
04:47 < danheberden> and i don't even know coffescript
04:48 < niggler> lol
04:48 < danheberden> (which is funny, i really like ruby and it has a lot of that whitespace optional bullshit)
04:48 < bubbles10101> huh.. is this s trick question?
04:48 < bubbles10101> its basically the same
04:48 < bubbles10101> oh wait.. whitespace
04:48 < niggler> ?
04:48 < bubbles10101> haha
04:48 < bubbles10101> ok
04:49 < niggler> exactly
04:49 < niggler> exactly why coffee script is garbage
04:49 < niggler> coffee script leaves a bitter aftertaste
04:49 < devatwork> danheberden, hmm only one of them seems to work. Which ever one i specify first
04:50 < bubbles10101> yeah ok, but it has a few quirks, as does any language.. not sure why that's a CS only problem
04:50 < danheberden> devatwork: oh, sorry, shoudl have been more explicit
04:50 < danheberden> you'll need an instance per port
04:50 < bubbles10101> the bigger issue I see with CS is that it divides the community, and creates additional overhead
04:50 < danheberden> devatwork: but you can assign the same handler you see
04:50 < niggler> no bubbles the problem is
04:50 <@Nexxy> danheberden, pm?
04:50 < bubbles10101> cognitive overhead i mean.. compilation is trivial
04:50 < niggler> you've traded one set of quirks for another
04:50 < danheberden> Nexxy: oh, sorry, i suck at noticing those
04:50 < niggler> no underlying problem was solved
04:50 <@Nexxy> haha no worries
04:50 < devatwork> danheberden, ah ok thanks
04:51 < bubbles10101> niggler: ok but surely you cannot deny the rise in popularity of it, or the fact that many do enjoy it and find it cleaner and more productive to code in?
04:51 < bubbles10101> or do you think they are just making it up?
04:51 < niggler> there's no "rise in popularity"
04:51 < niggler> you can say the same thing about typescript
04:52 < bubbles10101> well.. maybe in your circles.. let me go check github quick 1 sec
04:52 < bubbles10101> we can objectively measure this
04:52 < danheberden> ok guise, what about ecmascript4.js
04:52 < niggler> last 3 months there's an uptick in interest in fortran
04:52 < niggler> github isn't the arbiter of code interest
04:52 < danheberden> we should make an actionscript transpiler
04:52 < niggler> its like looking at brooklyn as representative of america
04:53 < niggler> for example, a shit ton of goldman sachs code is written in a proprietary language called s-lang
04:53 < niggler> you won't see that in github
04:54 < devatwork> danheberden, awesome it worked. Thanks dude !
04:55 < danheberden> devatwork: awwww yeah
04:55 < danheberden> VBSCRIPT.JS
04:55 < bubbles10101> well.. niggler, github is now the largest code repository in the world. so I think it's a fairly good representation of the future of opensource.. i could be talking complete poo.. but you welcome to provide an alternative
04:55 < danheberden> the best new transpiler
04:55 < danheberden> forget 'function' bitches, we got 'sub'!
04:56 < niggler> that's absolutely not true bubbles10101 
04:56 < niggler> github is the largest open source code repository, i can believe that
04:56 < Benvie> es6 steals most of the good parts from cs anyway
04:56 < bubbles10101> niggler: yup that's the claim im making... opensource
04:57 < danheberden> Benvie: i donno if "steal" is the correct term
04:57 < danheberden> as CS got a lot of those things from other languages
04:57 < Benvie> coopts
04:57 < Benvie> appropriates
04:57 < danheberden> but, whatevs
04:57 < bubbles10101> i assume most people on this channel are also working on opensource or discussing it, and has the most relevance. if private corporate repositories are the dominant flavor then i will stand corrected.
04:57 < danheberden> as long as we're pushign the wheel down the road
04:58 < danheberden> i don't care how we're doing it
04:58 < Benvie> point was that if you're going to use something it might as well be es6
04:58 < danheberden> Benvie: exciting stuff fo sho
04:58 < niggler> bubbles10101: is it known if google or Facebook or microsoft use coffeescript?
04:58 < niggler> or are they still using javascript
04:59 < danheberden> i doubt you'd see existing code bases switch to CS
04:59 < niggler> i think dropbox did
04:59 < bubbles10101> im really glad es6 is happening... however i don't believe it we need to have binary thinking on this.. the CS guys are looking forward to it too
04:59 < danheberden> niggler: oh?
04:59 < niggler> fuck coffeescript
04:59 < niggler> blah there i said it
04:59 < niggler> https://tech.dropbox.com/2012/09/dropbox-dives-into-coffeescript/
04:59 < danheberden> niggler: oh cool
05:00 < niggler> danheberden: i remember hearing about it and wondering why
05:00 < Benvie> there's a lot less impetus to use cs with es6 as an option
05:00 < danheberden> exactly - i don't like CS but, like, it's still helping
05:00 < danheberden> so whatevs
05:00 < danheberden> it's just preference
05:00 < Benvie> yeah it's useful
05:00 < Benvie> it's a testbed
05:00 < danheberden> it sucks, sometimes, because if there's a project in CS 
05:00 < danheberden> and i want to contribute
05:00 < danheberden> i need to learn a new syntax
05:00 < danheberden> which i don't like
05:00 < danheberden> but oh wells
05:00 < bubbles10101> niggler: that's a good question.. im not sure if FB or MS are using it internally
05:00 < danheberden> there's still benefit
05:00 < niggler> javascript is the end goal
05:00 < niggler> so write components in javascript
05:01 < Benvie> and the things from it that are seen to work especially well will probably usually end up in js down the line, so I consider that a useful roll
05:01 < niggler> if you want to use them in your app, then use coffee script and draw from the javascript goodness
05:02 < bubbles10101> niggler: i think you secretly have a crush on CS :) 
05:02 < niggler> yes i would like to make sexual congress to coffeescript
05:02 < danheberden> so y'all don't seem to like my vbscript transpiler idea
05:02 < niggler> its a misguided project
05:02 < danheberden> niggler: congress? CONQUEST
05:02 < niggler> and makes my eyes bleed
05:03 < bubbles10101> awww u make CS sads 
05:03 < rvagg> YOU ALL KNOW THE FUTURE IS CAPSLOCKSCRIPT ANYWAY: https://github.com/RVAGG/CAPSLOCKSCRIPT
05:04 < niggler> thats awesome rvagg
05:04 < bubbles10101> looooooooooooooool
05:05 < niggler> id like to see some perlisms introduced into javascript
05:05 < niggler> like return if
05:07 < huangjs> i'm so disgusted by the error checking in node... any good approach that can help me clean up the code?
05:15 < bubbles10101> so.. i answered my original question... here is a tool to help migrate your existing JS code to CS  .. http://js2coffee.org/ or on GH at https://github.com/rstacruz/js2coffee
05:25 < niggler> whats the difference between nodemon and forever?
05:28 < chovy> i have a url like /:username/lists/:listid, but i noticed anyone can change the :username to another user and still load a :listid, is this a bad security model?
05:29 < deoxxa[grumpy]> ...yes?
05:29 < gnarf> Nexxy: danheberden :)
05:31 < chovy> deoxxa[grumpy]: what would be a good way to ensure the list id is actually owned by the username?
05:31 < deoxxa[grumpy]> chovy: look it up when you do whatever query it is that you're doing for the list
05:32 < chovy> i could probably make that a middleware
05:32 < deoxxa[grumpy]> i.e. `users.findOne({username: username}, function(err, user) { lists.findOne({id: listid, user_id: user.id}, function(err, list) { ... }); });'
05:32 < deoxxa[grumpy]> something like that
05:32 < chovy> app.get('/:username/lists/:listid', user.ownsList, routes.list.get);
05:32 < deoxxa[grumpy]> sure, why not
05:33 < chovy> deoxxa[grumpy]: ok, that is good.
05:51 < chovy> anyone want to play pong? http://sadasant.pong.jit.su/ my id is becOv
05:55 < ProLoser|Mac> hallo
05:56 < ProLoser|Mac> what is an easy way to iterate through a folder and read a bunch of json files that match a filename?
05:57 < chovy> lol, waht happened
05:58 < LouisT> chovy: a few glitches >.>
05:58 < chovy> yes
05:58 < chovy> i found it on geekli.st
05:58 < chovy> its about as good as i remember it
06:07 < LouisT> chovy: rock paper scissors?
06:27 < chovy> heh
06:28 < chovy> got an app for that?
06:50 -!- ServerMode/#Node.js [+o Nexxy] by pratchett.freenode.net
08:31 -!- ServerMode/#Node.js [+o Nexxy] by pratchett.freenode.net
09:39 -!- ServerMode/#Node.js [+o Nexxy] by pratchett.freenode.net
09:52 < jazzdev> anyone around who knows about selenium webdriverJS?
11:27 < Cheery> https://gist.github.com/3968372
11:27 < Cheery> Anyone knows why this bugs?
11:31 < Cheery> It seems to relate to node.js
11:33 < juliangruber> what's the output?
11:33 < Cheery> Segment Fault
11:33 < Cheery> I'll add the exact output
11:35 < airtanah> does it segfault on the require, or the console.log?
11:35 < Cheery> https://gist.github.com/3968372
11:36 < Cheery> I added egl.py, where it seems to work fine.
11:37 < Cheery> airtanah: I'd say it's something specific to do with nodejs
11:37 < Cheery> either with my installation (but it seems to work just fine. :/)
11:38 < Cheery> (gotten from apt)
11:38 < juliangruber> return scope.Close(Undefined()) at the end of Demonstrate?
11:41 < Cheery> doesn't help
11:41 < Cheery> besides it doesn't reach that point
11:42 < Cheery> if I move the target->Set over the eglGetDisplay, it'll exit but hangs up before it gets to print anything
11:43 < juliangruber> use <local> or <persistant> for the function template? btw, does it compile without the egl stuff?
11:44 < Cheery> yep
11:46 < juliangruber> idk what you're trying to achieve but you could have a look at kkaefer's github acc for examples
11:46 < Cheery> juliangruber: I'm trying to write a video context library for node.js
11:46 < graeme_f> is it possible to get a segfault in node by using a bad array index, or does the vm protect against that?
11:47 < Cheery> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/MGCj_y4VL6w
11:47 < Cheery> YAY!
11:47 < Cheery> I found someone has the same bug
11:49 < juliangruber> actially that's not a bug in node or v8, I'm 100% sure
11:50 < juliangruber> propably you may not create the egl stuff in init, you could try writing a c class as wrapper around egl
11:50 < Cheery> juliangruber: that's why I labeled it raspberry pi, EGL and node.js
11:50 < Cheery> okay
11:51 < Cheery> lets move the eglGetDisplay outside of init
11:51 < juliangruber> look at the common patterns, see api/addons.html
11:54 < Cheery> attempt to initialize egl
11:54 < Cheery> Demonstrate()
11:54 < Cheery> Demonstrate().exit
11:56 < Cheery> LD_PRELOAD does not help
11:58 < juliangruber> btw, why waf and not gyp?
11:58 < Cheery> just because examples I saw proposed it, and it just worked
11:59 < Cheery> I'll likely repackage the thing once I get everything working
12:15 < Cheery> https://github.com/raspberrypi/firmware/issues/112
12:22 < syskk> any way to know the "external port" of a http server being proxied by nginx?
12:22 < syskk> is that available in the headers
12:24 < SomeoneWeird> req.headers.host.split(":")[1], maybe syskk 
12:24 < syskk> right
12:24 < syskk> should work
12:26 < Cheery> once I'm bit more relaxed, I'll revert some code and implemnet that hack.
12:35 < syskk> actually, just found out Express provides req.port
12:36 < syskk> ah nvm
12:36 < syskk> just provides req.domain
12:37 < deoxxa[cookies]> syskk: it's not techically a thing you can do. not unless you ask nginx to send you a header with the port number.
12:38 < syskk> I see.. what about the Host header then?
12:38 < deoxxa[cookies]> syskk: it is, however, a thing you can practically do. it depends on how things are configured though, and you'd be relying on what we call in the biz "undefined behaviour", in that it's not guaranteed to work the way you expect or at all.
12:38 < syskk> it should contain the port isn't it?
12:38 < deoxxa[cookies]> not always
12:38 < deoxxa[cookies]> which is why it's "undefined behaviour"
12:38 < deoxxa[cookies]> since it "sometimes" or "mostly" works
12:38 < syskk> ok I see
12:38 < deoxxa[cookies]> but it's not actually designed to do so, so it's not always going to work that way
12:39 < syskk> ok well
12:39 < deoxxa[cookies]> you probably want to set up nginx to tell you what the original port was by putting it in a header
12:39 < deoxxa[cookies]> X-Original-Port or something
12:39 < syskk> what about getting the internal port of the current request
12:39 < deoxxa[cookies]> internal port?
12:39 < syskk> ok
12:39 < syskk> yeah i mean the port my  Node.js http server is running on 
12:40 < syskk> req.port
12:40 < syskk> duh :(
12:40 < shripadk> syskk: just have a global var containing the port of the server
12:41 < syskk> req.port is what I was looking for ;)
12:41 < deoxxa[cookies]> shripadk: that's the worst advice i think i've ever heard, and i once witnessed someone explain that bleach cures aids
12:41 < shripadk> deoxxa[cookies]: yeah and whats wrong with that?
12:42 < deoxxa[cookies]> syskk: there's also http.ServerRequest.connection, which is a net.Socket, which has net.Socket.address()
12:42 < shripadk> he wants the internal port
12:42 < shripadk> why should nginx tell him that?
12:42 < shripadk> he can as well just place it in a global variable
12:42 < syskk> deoxxa[cookies]: man,think you have to readjust your moral compass if that's the worse advice you ever heard -_-
12:42 < shripadk> when launching the HTTP server instance
12:43 < shripadk> net.socket.address() gives the external IP:PORT
12:43 < shripadk> not the internal port
12:43 < syskk> req.post is fine guys ;)
12:43 < syskk> just to be clear, nginx will not modify the Host header right?
12:44 < deoxxa[cookies]> it might, if you configure it that way
12:44 < deoxxa[cookies]> (and you might have done that)
12:44 < syskk> by default i mean
12:44 < deoxxa[cookies]> no, it won't by default
12:45 < shripadk> syskk: why do you need to pull the port out of the Host header?
12:47 < syskk> shripadk: i don't. just want to pull out the domain
12:48 < shripadk> so whats this discussion about port ??? :P
12:48 < deoxxa[cookies]> rofl
12:48 < syskk> this was solved at 8:39 pm chinese time
12:48 < syskk> syskk: req.port is what I was looking for 
12:48 < syskk> haha
12:48 < syskk> the external port thing will just be in my config file or might pass that through a proxy header
12:52 < syskk> nodemon is giving me a hard time :/
12:53 < syskk> nvm
12:55 < djazz> put in some music in the play queue of my node.js music player :) http://djazz.mine.nu:7000/
12:56 < djazz> hehe, fun
12:57 < djazz> check out the code here: https://github.com/daniel-j/omxradio
12:57 < djazz> and "in action": http://i.imgur.com/nlu0b.jpg
12:58 < gila> Im doing a binding; and constructing an v8::Object. One of the elements in want in there is an v8::Array, but i can't do object->Set(String::New("my_array"), array) any hints on this?
12:58 < Nvoico> hey guys
12:58 < Nvoico> is there a module that ddoes this
12:59 < Nvoico> like socket.io but for spdy/https. it will fall back to regular http if the browser doesn't support it kinda like socket.io falls back to flash etc
13:00 < clever> i thought the whole point of spdy, is to transparently merge http requests into an entirely different protocol
13:00 < clever> if the server supports both
13:00 < Nvoico> spdy on google chrome, http on ie maybe?
13:00 < clever> i have seen signs of spdy support in firefox, but ive not done much research on it yet
13:00 < syskk> ah damn it. req.port is only available for ClientRequest, not ServerRequest :(
13:01 < shripadk> syskk: you want req.port for fetching the external port?
13:01 < syskk> ah  http.ServerRequest.connection right
13:06 < syskk> if you  redirect on a POST, does the browser post again at redirected URL?
13:06 < syskk> with original body
13:07 < Nvoico> link me to the best express application
13:07 < deoxxa[cookies]> syskk: generally no
13:08 < syskk> it's in my private repo Nvoico :( maybe will open source soon
13:08 < deoxxa[cookies]> syskk: the standard is a little bit vague on that point, but most browsers will do a GET after a 302 from a POST
13:08 < Nvoico> what does it do?
13:08 < syskk> deoxxa[cookies]: thanks
13:08 < syskk> looks like twitter right now 
13:10 < Nvoico> anyone here colleges' will be closed due to the huricane?
13:11 < syskk> US?
13:13 < djazz> who queued nyan cat? :D
13:14 < shripadk> me :D
13:19 < djazz>  shripadk: :D
13:19 < djazz> I'm currently having lunch in kitchen, where the raspberry + speakers are
13:19 < djazz> http://djazz.mine.nu:7000/
13:20 < shripadk> :D
13:33 < Diable> How to change language for i18next module with POST method ?
13:35 < Diable> How to change language for i18next module with POST method ?
13:35 < SomeoneWeird> ask once, then wait
13:38 < Diable> How to change language for i18next module with POST method ?
13:38 < Diable> How to change language for i18next module with POST method ?
13:38 < deoxxa[cookies]> Diable: seriously
13:38 < abrkn> just /ignore...
13:39 < Diable> Why there is no one to help me ?
13:39 < SomeoneWeird> everyone in here is a volunteer, they don't have to
13:39 < abrkn> i'm about to implement auth&auth for my socket.io based browser game. i've chosen passportjs with with facebook strat, which works. now i need a way to understand which socket is authenticated as which user and the security impllications. anyone have a sample app, guide?
13:39 < deoxxa[cookies]> Diable: you pasted the exact same question 4 times in 4 minutes. that's considered impolite.
13:40 < SomeoneWeird> but probably because they don't know, Diable 
13:40 < Diable> And who knows ?
13:40 < SomeoneWeird> possibly someone else in the channel
13:40 < abrkn> should the socket.io client send his connect sid on the socket? i'm confused ;)
13:55 < gavri> anybody here uses vows? I'd like to know how to write transactional tests. there doesn't seem to be a way to instruct vows not to run separate tests (from different test files) in parallel, but I don't know how to get this working with the idea of database isolation for each test
13:56 < abrkn> nope, mocha.js, expect.js, mocha-phantomjs (for browser)
13:57 < substack> gavri: consider https://github.com/isaacs/node-tap
13:57 < substack> don't even read any of that readme, just look at the example
13:58 < substack> tap runs tests sequentially
13:59 < gavri> substack: is there anything that runs tests in parallel with database isolation? I'm not sure if that make sense though
14:00 < devatwork> hmm with socketio, how do i send a message to a specific client ?
14:00 < substack> gavri: "with database isolation" seems wildly out of scope for a test harness
14:00 < substack> you should solve your problems with programming
14:00 < devatwork> I have the socket.id but not sure how to use it
14:00 < substack> tests are just programs
14:00 < substack> not some weird special category
14:00 < gavri> I guess it doesn't have to be part of the test framework. I was just wondering if I should have to program this myself
14:02 < substack> gavri: what do you even mean by "database isolation"?
14:10 < abrkn> anyone have a util to transform a package.json dependency list that looks like: { mongoose:"x", "passport":x" } to "latest.latest.x"? im lazy...
14:11 < _kud> Hello, is there something who uses / has installed grunt-compass?
14:25 < prawnsalad> hey guys. i noticed a few projects using process.on('SIGUSR1', [...]); to respond to sisgnals
14:25 < prawnsalad> can I just use any string as a signal?
14:25 < prawnsalad> that is.. as logn as i send that custom string to it as a signal
14:37 < bigkevmcd> prawnsalad: no, there are a list of named signals, kill(1) has a list of them
14:39 < prawnsalad> bigkevmcd: right, thanks. will take a look :)
14:39 < bigkevmcd> prawnsalad: in practice, SIGUSR1-2 are available for anything, and SIGHUP is commonly used to tell an app to reload it's configuration
14:40 < abrkn> how do i get the session id out of an express cookie? (the cookie session string seems to have some extra parts to it)
14:41 < prawnsalad> i was looking to use it for a variety of things rather than a control socket. looking like it wouldnt be feasable for that though
14:41 < prawnsalad> i would have around 10 custom commands
14:42 < bigkevmcd> prawnsalad: given how cheap an http service is to build, would that be an option?
14:43 < SomeoneWeird> or even a socket server
14:43 < SomeoneWeird> (if you want something similar to signals)
14:44 < prawnsalad> yes, i mentioned the conrol socket above. will probably go down this route by the looks of things
14:44 < smith1> sorry about the links that people put on my website the other day, they no longer work iv upgraded my script to support base 62 links to make them even smaller. And it was not possible to keep the old links. Webmaster of http://brig.co
14:44 < prawnsalad> bit more flexible at least
14:45 < clever> bigkevmcd: i think sigusr1 turns the debuger on, if you dont hook it yourself
14:45 < syskk> does Express know it is behind a secure http proxy? meaning, does it set req.secure to true when the reverse proxy says it is secure?
14:46 < bigkevmcd> clever: oh, yeah, I forgot about that
14:46 < Nitish> i'm getting an error which is causing my app to crash.."cannot find module zlib" can somebody help me here please
14:47 < Nitish> git repo http://github.com/nitishraj/nse-live
14:48 < Nitish> anybody?
14:53 < jonno11> Hi - just wondering if I could get some opinions. I originally used to solely develop apps and handle the data server side (like most people). But more and more, my apps are moving to Javascript controllers (stored in /public) and polling an express-based REST service for data. All of my old being is shouting at me about 'compatibility'. It got me wondering, just how compatible with browsers/systems is this method?
14:59 < mscdex> Nitish: what version of node are you using?
15:01 < Nitish> 0.6.13
15:02 < hendore> Hi, i have started a node application, using npm I have installed a few modules, is there anyway to populate my package.json file with the installed modules using npm?
15:02 < hendore> without doing this manually
15:03 < hendore> doh! npm init does this for me.
15:04 < mscdex> Nitish: no idea then, 0.6.13 has the zlib module
15:05 < mscdex> Nitish: you don't happen to have an older version on your system somewhere that's being used instead ?
15:12 < Nitish> no, its hosted on heroku
15:13 < nully> So it's not enough that javascript exploits roam the internet. Oh no, we gotta allow servers to recive and process the same nasty code on that turns the clients into zombies on our servers. Node.js: Allowing non-programmers to write exploitable code. And leaving SysAdmins to constatnly clean up the mess. Good work, great project. I hope you kill many sysadmins with stress.
15:14 < clever> i'm guessing he's a sysadmin :P
15:14 < clever> personaly, its saved me tons of stress, put apps together much faster then ive done before with c++
15:17 < gildean> he could've at least stayed to give some examples
15:18 < thomas___> he probably had mess to clean up
15:19 < mscdex> gildean: those types of people care more about ranting than engaging in helpful conversations
15:19 < gildean> nah, i think he's just a php or java-programmer who lost his job because he didn't want to learn to node
15:20 < thomas___> hehe
15:20 < thomas___> actually he was arguing that the main problem is that node is to easy to use
15:21 < thomas___> so one should intentionally make node (and other systems) more difficult to use
15:21 < thomas___> great goal!
15:27 < woopwoop> i have a function that does function viewback(err, data) { console.log("Error: " + JSON.stringify(err)); how do I print it back to the client side with json? 	response.send(client.get("j.sahni").info(viewback));
15:28 < abrkn> socket.io's socket.on('error') is not triggering for me on authorization fail, i just see "500 error" in browser. pretty sure i followed the docs -- ideas?
15:29 < mscdex> abrkn: https://github.com/LearnBoost/socket.io/wiki/Authorizing
15:32 < abrkn> yep, that's where i got my example from, "How does the client handle the global authorization"
15:33 < abrkn> no error fires for me, just a 500
15:45 < mscdex> abrkn: what about namespace-level auth?
16:02 < abrkn> mscdex: ah, found it. the example i used returned string errors from accept()
16:02 < abrkn> i assume it should be null or new Error()
16:03 < Diable> Is someone knows how to use i18next-node ?
16:13 < mwcampbell> What is the de-facto standard SQLite module for Node.js?
16:52 < jtomasrl> why when doing an AJAX from a mobile app using jquery mobile into a node.js server i get "Origin is not allowed by Access-Control-Allow-Origin."
16:54 < niggler> hate to ask OT questions, but anyone familiar with git?
16:55 < niggler> I'm trying to set up an app in a dev environment so that if i push changes then the server will pick it up and restart
16:56 < dylang> when using a tool like mocha what's a good way to separate test output from application debug output?
16:58 < mscdex> jtomasrl: you're making a cross-domain request and the destination server is not allowing connections from other domains
16:59 < mscdex> niggler: use a git commit hook
16:59 < mscdex> or a similar appropriate hook
17:02 < jtomasrl> mscdex: i curl the domain and get Access-Control-Allow-Origin: *
17:14 < mscdex> jtomasrl: you get that header?
17:15 < mscdex> from the server?
17:16 < mscdex> jtomasrl: are you curling the same url that you're trying to use via XHR in the browser?
17:17 < niggler> can i use express to serve the git repo?
17:17 < niggler> (does express have DAV locking support)
17:21 < jtomasrl> mscdex: yup
17:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:33 < Sonderblade> is there any node library for javascript visitor tracking? like clicks on outgoing links, hoover, scroll events and text selections and so on?
17:36 < mscdex> Sonderblade: not that i'm aware of
17:39 <@mbalho> HAHA I WROTE A TEMPLATING LIBRARY IN JAVASCRIPT AHAHHAAH http://npmjs.org/fold
17:39 <@mbalho> (because there weren't enough on npm)
17:39 < patrickod> is there any way using the node.js standard API to normalize a URR?
17:39 < patrickod> URL* the parseURL and formatURL methods just return whatever you give it, not a normalized URL
17:39 <@mbalho> require('url').parse
17:40 < patrickod> that doesn't normalize the result.
17:40 <@mbalho> what do you expect to get back?
17:41 < Sonderblade> mscdex: it's trivial to write it yourself ofcourse, just annoying :)
17:41 < patrickod> a consistent URL that I can use as a DB index. 
17:41 < patrickod> for instance removing trailing slashes if needs be
17:43 < mscdex> patrickod: what about using the path module functions on the path part of the url?
17:43 < patrickod> hadn't thought to look at those docs. I'll give them a look.
17:44 < airtanah> niggler: prob. easier to use ssh
17:44 < mscdex> Sonderblade: trivial? i wouldn't call that exactly trivial.... especially figuring out the storage of the data, creating all the different ways to analyze the data, etc
17:44 < niggler> blah airtanah ended up hacking something together that seems to work
17:44 < airtanah> niggler: put in a post-commit hook to deploy the new app
17:44 < niggler> yep :/
17:44 < airtanah> did you use http?
17:44 < patrickod> mscdex: that looks to do what I need it to. thanks
17:44 < niggler> yeah airtanah
17:45 < niggler> so i had to set up two repos
17:45 < niggler> one bare, one non-bare, in order to get it to work
17:45 < niggler> and then added post commit hooks to do magic
17:45 < mscdex> Sonderblade: not to mention coming up with heuristics to determine returning visitors and sessions
17:45 < airtanah> what web server did you use?
17:46 < niggler> starting from jsDAV
17:46 < niggler> but there are some changes that needed to be made
17:47 < airtanah> i use a git deploy, but i just have a bare directory and export the new 'bundle' into a fresh directory
17:47 < airtanah> each directory is named after the deploy, so if necessary i can see how things 'were' and/or rollback
17:48 < mscdex> versioned deploys! \o/
17:48 < niggler> ah yeah here the live version retains the history
17:50 < airtanah> what service do you use to run your production jobs? upstart, init.d? or just 'hohup'
17:52 < mscdex> upstart on ubuntu server and sysvinit on centos
18:08 < AndreasMadsen> yo
18:11 < thomas___> yo
18:12 < drudge> yo
18:13 < gfunk> sup
18:13 < reza> yolo
18:26 < Cheery> say I have an object that takes an address of an interface and user can't directly create the object. how do I wrap it?
18:28 < Cheery> http://bpaste.net/show/54147/
18:31 < gfunk> public methods with accessors
18:32 < gfunk> or do some nasty code around it, its pretty easy to mess with. what you trying to do, whats your site?
18:32 < Cheery> gfunk: http://github.com/cheery/node-video is what I'm working on
18:33 < Cheery> this stuff isn't yet in there. and in fact this is some trying still. not sure whether it works like this
18:33 < Cheery> static Handle<Value> New(IVideoContext* context);
18:33 < Cheery> I guess this is the way.
18:34 < jhsto> I'm having issues sending a message to specific client in socket.io from server-side. I can access the socket.id with [socket.id], but when I try to emit a message as [socket.id].emit() I get TypeError: Object uFKDS97IYyRMXZb8o6G1 has no method 'emit'. Any idea what I'm doing wrong?
18:34 < jhsto> I've been trying for hours and I hope that someone could help me.
18:36 < gfunk> that shit is deep, are you trying to have an effective dumb terminal with a display of the chat? sorry, over a few hundred lines and im gonna ask first lol
18:38 < Cheery> gfunk: he? my things aren't about terminals anytime soon
18:40 < gfunk> explain more. i dont use much node code. 
18:41 < gfunk> what exactly are you trying to get that isnt being got, and is this on a site, or CLI ?
18:41 < Sonderblade> how do you iterate through all keys in req.body in express?
18:42 < Cheery> gfunk: you know this nifty small computer called raspberry pi?
18:43 < Cheery> it's interesting because there's about half million of them in circulation now.
18:44 < Cheery> I'm writing a library, which lets you open webgl-style context straight from command line.
18:45 < gfunk> i remember those circuit board USB powered mikrotik routers and busyboxes ... but as stated im not familiar with what your wanting it to do, and what its doing instead
18:45 < Cheery> as well as little bit of compositing and display support, so it's easy to implement a desktop in it.
18:46 < gfunk> i asked if u were CLI-ing it
18:47 < gfunk> so your trying to call *term from CLI kinda sorta?
18:47 < gfunk> like building a 'window' from 'basic' DOS code ... loosely synonamous
18:48 < Cheery> yeah. pretty much like that, but with a catch
18:48 < Cheery> you can build a 'window'.. but you'll be also able to build a window manager.
18:48 < gfunk> linux will give you issues with privileges as well as level differences of terminal vs display support ... i dont know if that helps or pertains
18:49 < gfunk> like java builds panels that can withold multples ...
18:49 < Cheery> I'm designing this library such way that it lets you give a handle to other process, and that process can open a context from that handle.
18:50 < gfunk> what process are you passing it to and how
18:50 < Cheery> probably a child process. and I'll be passing it with unix socket
18:51 < Cheery> well. maybe any process that connects to /tmp/desktop or some other such
18:52 < gfunk> reason i ask is i can directly telnet into mail servers or PHP code it, but i cant use sockets or any kind of prefab code to send mail whatsoever ... even though it does the same thing. that doesnt help you, but it was a pain in my ass billing customers
18:53 < Cheery> ok.
18:53 < Cheery> I'll get to see how this code compiles I just made up.
18:53 < gfunk> do child processes have the ability to do that? and im guessing your reading some fgets() equivalent of the ps -aux command to find the process itself to start
18:54 < Cheery> I haven't worked through that yet.
18:54 < Cheery> it's early. I'm still working on the drawing context code
18:54 < gfunk> im installing ubuntu 12.10 atm, no terminal access for meh...
18:55 < gfunk> id use some native calls first just to ensure your handles are properly passed
18:55 < gfunk> like ... port it to a standard terminal out
18:56 < gfunk> then if it works its between the code and display ... otherwise the display isnt even an issue yet
18:56 < gfunk> sounds like a hell of a program
18:57 < gfunk> i havent gotten my hands that dirsty in a while, since 2008 heh. you got a nice project on your hands
18:58 < reza> whats your weapon of choice for sending email? Nodemailer?
18:58 < reza> https://github.com/andris9/Nodemailer
18:59 < reza> any better options?
18:59 < Cheery> gfunk: yeah. I'll try handle it.
19:00 < jhsto> reza, there is emailjs
19:00 < Cheery> it's probably time to refine context creation code a bit now. I got it compiling.
19:01 < reza> jhsto: thx
19:01 < gfunk> i open sockets to my pop mail server and handle it directly with telnet commands ... cant chance anything fancy
19:08 < gfunk> all that abstraction confuses me lol...call me old school. i feel like they are wrapping things over way too much to be a creliable standard, i guess i should just OJ simpson some code one day
19:09 < Cheery> gfunk: they wrap stuff around. then they invent new competing interface and then others have to wrap over those two
19:11 < reza> any other popular mailers
19:11 < reza> i just ready thru both of those
19:11 < reza> read*
19:12 < gfunk> i was just reading your website 
19:12 < gfunk> i feel that way about web based programming
19:13 < gfunk> in college we wrote our own OS, a memory manager, we stole grub bootloader, tricked it to load dos ... it was some rough shit ... we even had to edit the video driver ... 
19:14 < gfunk> it gave us unlimited ability though
19:14 < deltab> that comes at a cost though
19:15 < gfunk> simplesmtp
19:15 < gfunk> whats that?
19:15 < reza> damn i installed nodemailer and it was 24mb
19:15 < gfunk> there was no other option
19:15 < deltab> you're spending effort on lower-level stuff (which is fun, admittedly), instead of being able to use it on higher-level stuff
19:16 < gfunk> if we had done it 100%, it would have been a lot better but 99% slave writing , and it was already tedious enough to write a memory manager ... and i thought i hated malloc() lol
19:16 < gfunk> thats the point ... less limitation
19:17 < jhsto> I'm using socket.io and the emits I'm making stack up if I refresh the page. Does anyone know is it supposed to be so?
19:18 < gfunk> i understand its a huge PITA and absolutely lacking in resources ... but it was a project that related to what we were talking about. id love to have had the ability no doubt heh
19:19 < gfunk> it will if you dont deallocate the memory
19:19 < gfunk> youll get memory leaks eventually
19:24 < Cheery> all right.
19:25 < Cheery> I'm getting to see if my code runs.
19:25 < Cheery> awesome ^^ it runs.
19:32 < gfunk> congrats man
19:32 < gfunk> what was the prob
19:34 < Cheery> gfunk: I had problems at the start with couple things..
19:34 < Cheery> opening of video context library caused a segmentation fault.
19:34 < Cheery> raspi EGL conflicts a bit with nodejs from some reason
19:36 < reza> does anyone think that 24mb for nodemailer is a bit extremem?
19:36 < reza> that seems really big to me
19:36 < gfunk> worthy of documentation
19:36 < rauchg> reza the npm download ?
19:37 < reza> yeah
19:37 < rauchg> why is it 24mb ?
19:37 < gfunk> yea, as do most wraps nowadays that try to include too much at times
19:37 < reza> i installed it and got info on the directory
19:37 < reza> and its 24mb
19:37 < rauchg> maybe adding something to .npmignore would fix it 
19:37 < rauchg> or moving things to "optionalDependencies"
19:38 < gildean> Cheery: i'd guess the problem is with the video driver and opengl es more than node on that regard
19:38 < reza> rauchg: i have to learn more about .npmignore and optionalDependencies
19:38 < reza> not sure what those are <— nodenoob
19:39 < Cheery> yay. it works entirely now. I provided wrong behavior for one stub.
19:39 < gildean> reza: you have to remember that the module most likely has tests and examples, and all the modules it depends on has tests and examples and documentation
19:39 < rauchg> reza .npmignore is like .gitignore, when you `npm publish` it excludes those files
19:40 < rauchg> optionalDependencies allows you to define modules that are dependencies but not under all circumstances 
19:40 < rauchg> like if you have a program that abstracts out 4 different databases and you choose to use it only with redis
19:40 < rauchg> "redis" would be defined as an "optionalDependency" along with "mysql", "mongo" etc
19:41 < reza> rauchg: i see, i will look into that
19:41 < reza> gildean: i have to look at npm publish
19:41 < reza> i'm in dev mode now and haven't gone to production with anything yet
19:44 < rauchg> reza yeah i mean that's what the node mailer guy should do
19:44 < reza> oh :)
19:46 < Cheery> didn't node.js have random number generator?
19:47 < aho> there is Math.random
19:47 < aho> if you want something better use xorshift, alea, or well512 (or 1024)
19:49 < Cheery> Math.random is fine
19:52 < leelu> hi I tried installing nvm using https://github.com/creationix/nvm in centOS 5.4 
19:52 < leelu> it's giving me error
19:52 < leelu> bash: shasum: command not found
19:52 < leelu> gzip: stdin: not in gzip format
19:52 < gabrieluk> argh, centos, i have only bad memories trying to install stuff on it
19:53 < leelu> i have installed python 2.6 using EPEL repo
19:53 < leelu> i need to have node.js working on my centOS
19:53 < gabrieluk> why not get node js free hosting with joyent or nodejitsu?
19:54 < leelu> our prod server is centOS , i am running a cloud instance now to test it so that i can repeat the steps later in prod server
19:55 < aho> <Cheery> Math.random is fine <- well, you can't seed it
19:55 < leelu> is there a way to mention to use python2.6 when compliling node.js ?
19:55 < gabrieluk> sry, i never installed node on centos. only debian/ubuntu and archlinux
19:56 < reza> when you npm install and the module includes tests and examples … do you go in a delete those things manually?
19:56 < gfunk> centos = need for tylenol
19:56 < reza> or just leave them in your app?
19:56 < gfunk> make a copy, you dont want compilation of unneccesary stuff
19:57 < gfunk> i always keep the original anywho, but not in production
19:57 < reza> so i production
19:57 < reza> do you remove that stuff yourself?
19:57 < reza> or is there a shortcut
19:58 < leelu> can we mention the version of python to use while compiling node.js
19:58 < Cheery> aho: that's all I needed at the moment.
19:59 < aho> it's just something to keep in mind
20:01 < Cheery> https://github.com/cheery/node-video/blob/master/src/webgl/renderer.cc
20:02 < gabrieluk> leelu, I would just get a ubuntu server, at linode.com, if you want a cusom server. it costs 20 $ and you could get chris lea ppa, and get node compiled and ready to go. no headache, my 2 cents
20:02 < jesusabdullah> gabrieluk: nodejitsu is no longer free
20:03 < gabrieluk> oh,pardon me, i thought it was. still, you can get an account with nodester or heroku
20:03 < Cheery> possibility to write cleanly structured addons was the reason why I picked node.js over python.
20:03 < Cheery> (tried really hard in python first)
20:10 < LouisT> gabrieluk: don't forget cloudfoundry!
20:19 < reza> i installed emailjs — 77kb :)
20:19 < reza> nodemailer is stupid big
20:20 < jesusabdullah> yeah it is
20:20 < jesusabdullah> nodemailer clocks in at like 25MB after its deps are dragged in
20:49 < airtanah> what service do you use to run your production jobs? upstart, init.d? or just 'hohup'
20:55 < astropirate> airtanah, upstart here
21:07 < stefan41_> is there a good way to wrap an async call to make it synchronous?
21:22 < jtomasrl> why does my node server dont accept ajax data with this format: data: { song: id, date: +new Date(), user: "test", help: false, partners: [], likes: 0 }
21:27 < chilts> jtomasrl: ajax data is anything you want, it looks like you want it to be JSON, but "+new Date()" isn't valid JSON
21:27 < Mortchek> Are functions provided to process.nextTick guaranteed to execute in the order provided?
21:27 < chilts> unless you're using some kind of custom extenstion
21:28 < chilts> Mortchek: maybe, maybe not, but I myself wouldn't rely on that
21:28 < Mortchek> chilts, well, I wouldn't rely on it unless I knew they were, which is why I ask.
21:28 < chilts> Mortchek: there is nothing in the docs to guarantee it
21:29 < chilts> http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback
21:29 < jtomasrl> chilts: im getting the error in the firsrt S
21:29 < chilts> your keys need to be quoted : "song"
21:29 < Mortchek> Should the docs be considered normative for this purpose?
21:29 < chilts> and what I said before also isn't valid
21:30 < cnewsom> not sure if anyone here is working with node + express
21:30 < cnewsom> i'm trying to update a document
21:30 < chilts> Mortchek: the docs are there to document Node's functionality, so I imagine it should be considered correct :)
21:30 < chilts> and normative
21:30 < cnewsom> and what's happening doesn't make sense to me (disclosure: i'm a n00b)
21:31 < Mortchek> I wasn't asking whether the docs are correct, but rather whether they *determine* what should happen, rather than describe it.
21:31 < chilts> cnewsom: you'll need to paste some code to show your problem ... also, what document? a Mongo document perhaps?
21:31 < TheFuzzball> Is there a way to find the index of an object literal in an array?
21:31 < cnewsom> https://gist.github.com/537e471155195c976d38
21:31 < jtomasrl> chilts: i quoted the keys and take the +new Date() and still the same error msg
21:31 < niggler> TheFuzzball: indexof
21:31 < cnewsom> i'm using express here
21:31 < cnewsom> for some reason 
21:31 < niggler> >>> [1,5,9].indexOf(3)
21:31 < purr> niggler: (number) -1
21:32 < niggler> >>> [1,5,9].indexOf(5)
21:32 < purr> niggler: (number) 1
21:32 < niggler> >>> [1,5,9].indexOf(9)
21:32 < purr> niggler: (number) 2
21:32 < cnewsom> the record is not actually saved to the DB
21:32 < TheFuzzball> What did I just say? "object literal in an array"
21:32 < TheFuzzball> >>> [{a : "b"}].indexOf({a : "b"})
21:32 < purr> TheFuzzball: (number) -1
21:32 < cnewsom> my logs show the number of records affected is correct
21:32 < Mortchek> I suppose I'll assume that if the docs don't specify, it is unspecified.
21:32 < Mortchek> Seems to be the safest bet.
21:32 < chilts> Mortchek: what do you want over and above the docs? they document how node works. If the docs are wrong or need clarification, you could raise an issue.
21:32 < cnewsom> however, i'm not saving the change
21:32 < cnewsom> do i need .save as well?
21:41 < jtomasrl> if i need to add data into mongodb, should i add the JSON received by a post request or should i remake the json in my server and then save it?
21:48 < gildean> jtomasrl: you should sanitize the data at the servers end
21:49 < allegrem> hi everyone !
21:49 < allegrem> i'm trying to install a ruby on rails server on my raspberry pi
21:49 < allegrem> and i have a little problem with the js runtime
21:49 < allegrem> when i'm running bundle install, it tries to compile therubyracer and then it fails
21:49 < allegrem> i've read on forums that v8 can't compile on arm
21:49 < jtomasrl> gildean: ok
21:49 < allegrem> but obviously it should work with node.js (installed with apt-get)
21:49 < allegrem> however it doesnt work for me and bundle install still tries to compile therubyracer
21:49 < allegrem> any idea ??
21:50 < gildean> allegrem: stop using ruby completely and change to node.js
21:50 < gildean> problem solved
21:51 < allegrem> well node.js definitely looks fun
21:51 < allegrem> but i'm ok with ruby for the moment
21:51 < allegrem> so any less extreme solution ?
21:51 < jtomasrl> maybe asking in #rubyonrails?
21:52 < allegrem> jtomasrl: #rubyonrails doesn't answer for the moment ...
21:52 < jtomasrl> execJS=
21:52 < jtomasrl> ?
21:52 < allegrem> what?
21:53 < jtomasrl> allegrem: btw u havent asked on #rubyonrails yet
21:53 < jtomasrl> allegrem: https://github.com/sstephenson/execjs
21:54 < allegrem> jtomasrl i asked my question a few minutes ago
21:54 < allegrem> didn't i ?
21:55 < jtomasrl> you didnt, btw u need to be registered to ask over there
21:56 < allegrem> what do you mean when you say "u need to be registered" ??
21:58 < jtomasrl> irc NickServer
21:59 < jtomasrl> what does bunyan does?
22:00 < gildean> jtomasrl: that's kind of stupid, blocking new users from talking to the channel without registration
22:00 < gildean> it's pushing people away
22:01 < nathan7> gildean: I've had enough experience with -R ing channels
22:01 < nathan7> gildean: spammers pour in more quickly than you can imagine
22:01 < jtomasrl> "Your message couldn't be sent to the channel"
22:02 < gildean> nathan7: then you should ask why are the spammers coming to the channel?
22:02 < gildean> also most spam floods only last for a while
22:02 < nathan7> +R for a while
22:02 < gildean> defaulting to +m or +r sucks
22:02 < nathan7> -R it.. in comes the flood
22:03 < allegrem> ok I think i got the nickserver thing
22:03 < allegrem> did my messages appear now ?
22:03 < allegrem> do*
22:03 < nathan7> no, we aren't seeing them
22:03 < nathan7> type harder or something
22:05 < jtomasrl> lol
22:06 < allegrem> ok i had to check my mails ...
22:06 < allegrem> (sorry i'm discovering irc...)
22:11 < jtomasrl> see they answered fast
22:12 < allegrem> yep they are very clever !
22:12 < allegrem> thanks for you help ;)
22:36 < llappy> Anyone know how I might be able to perform a speed test using Node.js?
22:37 < llappy> (e.g. determine what the maximum upload and download speeds are from the Node server to another server {the other server can be whatever I need it to})
22:49 < hendore> Hi, when a user logs into a node application (authenticated against a database), whats the best way to store that users information? (sessions in php) or is there a better way to this?
22:50 < timeturner> session in redis
22:52 < ericelliott> hmm.. I can't get cuid to pass the build on Travis. It's failing to find grunt on the applitude post install step. Applitude builds fine.
22:52 < ericelliott> https://travis-ci.org/#!/dilvie/cuid/builds/2967275
22:52 < ericelliott> Did I make a mistake with the applitude package.json?
22:53 < ericelliott> https://github.com/dilvie/applitude
22:53 < hendore> timeturner: Any other alternatives I could look at?
22:57 < brianc> hendore: are you using express?
22:59 < hendore> brianc: At the moment yes, currently just toying with node and I find express quite nice to build a simple api for my app
22:59 < jwulf> anyone created a module for both client and server-side.... using typescript?
22:59 < brianc> hendore: great! You're most of the way there already
23:00 < brianc> hendore: while timeturner was right about eventually using redis to store your session and all that, an easy way a lot of web frameworks choose is to store the session within the user cookie
23:00 < brianc> hendore: the drawback is the session is limited to the size of a cookie which I believe is 2k or 4k an older browsers (can't remember) but that's not important as long as you don't store tons of data in the session.
23:00 < brianc> hendore: so, start with this: http://expressjs.com/api.html#cookieSession
23:01 < brianc> hendore: if you get stuck or need fancier storage google for "express session store" and check out some github repos & npm modules for storing the session in redis or some other database
23:03 < brianc> jwulf: ever listened to dark side of the moon.....on crystal meth?
23:04 < othiym23> brianc: that sounds significantly less fun than making a client-server app with TypeScript
23:04 < hendore> brianc: timeturner:Thank you both for your answers, both have given me somewhere to start. Much appreciated.
23:04 < brianc> hendore: good luck.  also sometimes it helps to ask in #express if you have express specific questions. 
23:05 < brianc> othiym23: wouldn't know haven't done either.  just reminded me of one of those questions like "ever eaten pizza? ever eaten pizza....on weeeeeeed?"
23:07 < jwulf> brianc: lol
23:24 < stefan41_> can someone help me out with a scope problem that is murdering my head?
23:25 < SomeoneWeird> possibly
23:25 < SomeoneWeird> post some code :)
23:25 < niggler> i don't think that's possible SomeoneWeird if it's murdering stefan41_
23:26 < SomeoneWeird> maybe he's just tied up at the moment
23:26 < SomeoneWeird> oooooooooooooooooooooooooooooooooo
23:26 < stefan41_> SomeoneWeird: so, this http://jsfiddle.net/ny5su/ works like one would expect
23:26 < stefan41_> but here: http://pastie.org/5129445 <- I lose sitMessage
23:28 < SomeoneWeird> weird
23:28 < SomeoneWeird> does it work if you put line 22 outside of getUserData?
23:29 < stefan41_> yess
23:29 < stefan41_> and the super maddening thing is i just got this: http://pastie.org/5129445 to work as expected
23:29 < stefan41_> and that doesn't make any damn sense to me
23:31 < stefan41_> the only thing i dislike more than not understanding why something isn't working is not understanding why something *is* working
23:49 < Guest72292> a
23:50 < yitsushi> Ahoy!
23:50 <@mbalho> sup dood
23:54 < hendore> I hope it's ok to ask this here, not really node related but more a general javascript question here, http://pastebin.com/x8x9ka2q on line 6 im setting icon variable however when I output the link object the icon variable is not being set
23:54 < bradleymeck> isaacs: for your readable-stream stuff, is there a way to peek where a specific byte is? looking for a 0 without iterating one byte at a time
23:54 < hendore> from what I can make out, it's a closure? 
23:55 < hendore> and if so, is there a way around this/
23:55 < bradleymeck> hendore the `this` keyword does not always stay the same in callbacks, save var that = this; above it and use that.icon = ...;
23:56 < warz> hendore, you could use bind there as well
23:57 < warz> i typically go with the bind route, instead of var that = this, etc.
23:57 < warz> just preference, though
23:58 < warz> hendore, note line 7: http://pastebin.com/7NLgnPCv
23:59 < hendore> thank you both, using var that = this, when I come to output the object as a json string i get a circular reference + bind looks so much nicer
--- Log closed Mon Oct 29 00:00:29 2012
