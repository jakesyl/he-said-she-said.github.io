--- Log opened Mon Jan 28 00:00:39 2013
00:15 < Somelauw> Not sure, if I'm doing it right, but I downloaded pegjs, compiled some grammer, then in node, I enter p=require("grammar.js");  p.parse("5+3") and it just shows ...
00:16 < nullslash> Hi
00:16 < nullslash> What's up?
00:17 < nullslash> Hello Flks
00:17 < nullslash> Folks*
00:18 < brettlangdon> nullslash, hi
00:18 < nullslash> brettlangdon, Hi
00:18 < nullslash> Do you know what's the best node.js book?
00:19 < brettlangdon> nope, I have not read any of them
00:19 < nullslash> Have you ever used node.js in any of your webapps?
00:19 < brettlangdon> sure, I use node.js all the time for my personal development, not for work though
00:20 < xk_id> nullslash: this was recommended to me: http://www.amazon.de/Professional-Node-js-Building-Javascript-Scalable/dp/1118185463/ref=sr_1_1?ie=UTF8&qid=1358715179&sr=8-1
00:20 < nullslash> xk_id, Danke
00:20 < brettlangdon> and there is: http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595/ref=sr_1_1?ie=UTF8&qid=1359332252&sr=8-1&keywords=guillermo+rauch
00:20 < brettlangdon> I almost forgot about it
00:20 < xk_id> nullslash: but something on javascript can also be helpful to you
00:21 < nullslash> xk_id, I know js
00:21 < brettlangdon> a really good js book: http://o2js.com/interview-questions/
00:21 < nullslash> xk_id, So, if I want to build a real time application (e.g chatting), is node.js the right thing for me?
00:22 < xk_id> nullslash: it can be
00:22 < brettlangdon> nullslash, sure, lots of people use it for that
00:22 < nullslash> I know already django for the server side
00:22 < nullslash> but I don't think django will be useful for chat application.
00:22 < dust--> hi, would you consider node.js ready for a production webservice or is it still in its infancy?
00:22 < xk_id> nullslash: a very simple chat app was demonstrated in this video: http://www.youtube.com/watch?v=jo_B4LTHi3I
00:23 < brettlangdon> mainly people are using things like socket.io (web sockets) for developing a chat application, it just happens to be really easy in node.js IMHO
00:23 < craigrich> it's usually coupled node.js and socket.io to make real time web apps
00:23 < nullslash> ha
00:24 < dust--> how does node compare to say python in terms of fitness for dynamic webpage development?
00:24 < brettlangdon> but, nullslash, if you wanted to stick with django, you can probably develop it, if it supports websockets
00:26 < brettlangdon> dust--, what do you mean? just node vs python which is better for developing a web application?
00:27 < dust--> brettlangdon: yeah kinda, i know it is a broad question but i plan to develop a webservice and wonder if i should stick with traditional python or just use node since then i can shift around code between browser and back-end and also it promises to be better speed
00:29 < cloudbender> If I sign up for GitHub, and my e-mail changes later, can I update GitHub ?
00:29 < brettlangdon> dust--, well, I'm sure it is not the answer you want, but, it depends
00:29 < brettlangdon> cloudbender, yes
00:29 < cloudbender> oh yay.
00:29 < brettlangdon> I think you can even associate multiple e-mails accounts with a single github account
00:29 < dust--> brettlangdon: if you tell me what it depends on it might be
00:30 < brettlangdon> dust--, well it is the same thing as which is better, relational vs non-relations db, it really depends on the application, some applications work best with a relational model and others without
00:30 < bnoordhuis> dust--: if you're building some crud website, you might as well stick with python
00:30 < Somelauw> The documentation of parsejs says that an exception is thrown if it doesn't parse something well, but I just get to see dots like ...
00:30 < Somelauw> I mean peg.js
00:31 < bnoordhuis> dust--: node is a better fit if you have long-lived connections, want to do websockets, etc.
00:32 < Somelauw> also what was the difference between installing stuff locally and globally?
00:32 < cloudbender> cool
00:35 < brettlangdon> Somelauw, it is generally recommended (at least it was to me) to only install modules globally if they are being installed for their scripts, i.e.: forever, nave, npm, etc, and to install everything else locally to each project
00:35 < dust--> bnoordhuis: i guess the question is more like, i want to try node for developing a professional webservice - am i investing time in a immature environment that will force me to redevelop in a more traditional env like python later and is it expected to rival languages like python or die early - and are there common benefits and drawbacks using it. difficult to project, but at least learn from what you think would be helpful
00:36 < Somelauw> Okay, thanks. Do you also know about peg.js?
00:36 < brettlangdon> Somelauw, sorry, I have never used it before
00:36 < brettlangdon> butâ€¦ it seems cool
00:37 < bnoordhuis> dust--: re immature, node is used by a lot of big companies these days so i guess the answer to that is 'no'
00:37 < bnoordhuis> dust--: if it's worth your time to learn it, well, it depends. what do you expect to get out of it?
00:38 < min|dvir|us> Node.js itself is mature.
00:38 < dust--> bnoordhuis: well i think what catches my interest coming from c++ is speed compared to python and the common language with unavoidable client side browser js
00:38 < bnoordhuis> and re: rival python, node doesn't really go for the kitchen sink approach like python does. i don't think they're direct competitors, maybe only in the web space
00:38 < bnoordhuis> dust--: if you mean code sharing, yes, that's a major benefit of using node
00:39 < bnoordhuis> if you're developing one of those 'single page' web apps, having the same language on the server and the client helps a great deal
00:39 < min|dvir|us> The issue with Node.js is that libraries written for it are immature.
00:39 < bnoordhuis> some are, some are not
00:39 < min|dvir|us> Some are quite mature, that's true.
00:40 < min|dvir|us> But chances are, if you're doing something major, you'll have to submit a few pull requests.
00:40 < dust--> bnoordhuis: yes that's kinda the thought that got me interested
00:40 < dust--> min|dvir|us / bnoordhuis: yes, i have the feeling the problem might be missing or immature frameworks - what about 'express' - is it mature enough
00:41 < min|dvir|us> Express is quite mature.
00:41 < bnoordhuis> hah, i was just going to say you probably want to start with express
00:41 < min|dvir|us> But it is small and doesn't do everything.
00:41 < dust--> security might also be an issue i wonder about
00:41 < bnoordhuis> it's like the flask or bottle of the node world
00:41 < iwalkbarefoot> Good evening all
00:41 < iwalkbarefoot> I have a style question.   I have a function that I want to use both on the client and on the server.  Does anyone know how to do this [other than duplicating the function of course]
00:41 < min|dvir|us> iwalkbarefoot: put in a file that's used by both.
00:41 < dust--> min|dvir|us: what would be examples of things the available libraries dont do yet you came across? 
00:42 < min|dvir|us> Consolidate.js for example.
00:42 < min|dvir|us> Its support for Hogan partials is limited.
00:42 < min|dvir|us> Rather, Hogan inheritance.
00:43 < iwalkbarefoot> min|dvir|us: how would that work, doesn't the node.js server includes require a rather specific export syntax?
00:43 < min|dvir|us> Don't get me wrong, the situation is definitely improving at an exponential rate, but as it is now, it's not like Python where no matter what you're doing there's a lib for it.
00:43 < min|dvir|us> iwalkbarefoot: ?
00:43 < brettlangdon> iwalkbarefoot, i haven't used it but you can take a look at projects like require.js http://requirejs.org/
00:44 < brettlangdon> used to dynamically load js on the client side, you can then reuse the scripts on both client and server side
00:44 < dust--> min|dvir|us: ok but seeing almost 1000 people in this room is it safe to say node.js is more than a one day wonder?
00:44 < min|dvir|us> dust--: Node.js is the biggest thing to happen to computing in quite some time.
00:44 < iwalkbarefoot> thanks brettlangdon, this looks interesting.  I'm going to continue down min|dvir|us suggestion just as an intellectual exercise as well
00:45 < dust--> min|dvir|us: feels like, also got interested in Google Dart, but seems they are still considering themselves alpha and also it is not well received by js developers it seems
00:45 < min|dvir|us> I've never used it so I cannot opine.
00:45 < bnoordhuis> dust--: dart is, imo, a dead end. it's good but not good enough for everyone to switch
00:45 < bnoordhuis> otoh, google is still pouring time and money in it. who knows?
00:46 < min|dvir|us> Google has time and money for everything.
00:46 < dust--> bnoordhuis: yes, its not backwards compatible - that will kill it. how do you feel about TypeScript?
00:46 < bnoordhuis> dust--: no strong opinions
00:46 < min|dvir|us> dust--: have you looked at LiveScript?
00:46 < dust--> min|dvir|us: no, will do
00:46 < someprimetime> any of you using scss with node? i use scss for all my other projects but am using express for a new project and find that using stylus which goes well with express is much easier to get running, although i miss the scss convention
00:46 < min|dvir|us> It's pretty amazing. Using it now.
00:47 < iwalkbarefoot> min|dvir|us: so whenever you use a require statement in node.js, it expects the file to define the exports variable.  Wouldn't this confuse the browser?
00:47 < min|dvir|us> iwalkbarefoot: not if you're using a require lib.
00:47 < jerrysv> min|dvir|us, iwalkbarefoot: not necessarily, it's easy to write something that works in browser, node, and amd
00:50 < dust--> min|dvir|us: whats the main benefit of livescript? 
00:50 < min|dvir|us> dust--: what's the main benefit of TypeScript?
00:51 < iwalkbarefoot> min|dvir|us: so you're suggesting the same thing as brettlangdon essentially?
00:51 < dust--> min|dvir|us: compatibility - it is aiming to stay ECMAscript / Javascript compatible, forecasting the next official Javascript standard
00:51 < min|dvir|us> iwalkbarefoot: pardon?
00:51 < min|dvir|us> dust--: who cares if it's compatible, if it compiles to JS?
00:51 < iwalkbarefoot> min|dvir|us: you said not if you're using a require lib.  So that's something like require.js or others that are out there
00:52 < min|dvir|us> iwalkbarefoot: I'm not sure what the other guy said but you'd want to use a require lib in the browser if you have code that uses require.
00:52 < isaacbw> strict typing kind of defeats the purpose of javascript
00:52 < dust--> min|dvir|us: i dont have a lot of experience with interpreted languages - it seems to me if you dont use plain js you cant directly use the console to add and inspect code of a live system without switching back to js
00:53 < min|dvir|us> No, that's not how it works.
00:53 < dust--> min|dvir|us: but then typescript for now is the same story
00:53 < iwalkbarefoot> min|dvir|us: got ya.
00:53 < iwalkbarefoot> thanks all for the input
00:53 < min|dvir|us> iwalkbarefoot: :)
00:53 < iwalkbarefoot> next question I guess is what are people's favorite require libraries?
00:53 < min|dvir|us> dust--: when you deploy TypeScript, you compile it and it magically turns into equivalent JS.
00:54 < min|dvir|us> The point of any language that compiles into JS is that they have all the power of JS, but look way nicer.
00:54 < dust--> min|dvir|us: yes, indeed
00:54 < isaacbw> strictly typing removes power
00:55 < dust--> isaacs: if it is forced yes. static typing however allows for speed gains 
00:55 < isaacbw> wrong isaac
00:56 < min|dvir|us> isaacbw: no, he's right.
00:56 < dust--> on the other hand enforcing interface contracts writing big systems is what most js extensions seem to make sense for 
00:56 < dust--> he meant i wrote to the wrong isaac nick
00:56 < min|dvir|us> Oh, nevermind.
00:56 < isaacbw> I'm not saying it isn't useful, but it does limit the flexibility of the language
00:57 < dust--> not if optional
00:57 < dust--> which i would opt for
00:57 < min|dvir|us> So use TypeScript.
00:57 < min|dvir|us> I'll use LiveScript. And we'll both compile to JS.
00:58 < dust--> min|dvir|us: interesting example - how would that look like if we are developing on the same project?
00:58 < min|dvir|us> dust--: wouldn't be a problem.
00:58 < dust--> both obviously compile to javascript
00:58 < dust--> so it will functionally work
00:58 < min|dvir|us> Whatever API your TypeScript produces, my LiveScript can interpret.
00:58 < dust--> wonder though if it will make it inconvenient for the others
00:58 < min|dvir|us> No, it won't.
00:59 < min|dvir|us> Not unless they're hacking on your code.
01:01 < dust--> i guess my main question is with all these javascript variants and dart as well - all aim for better interfaces and performance - will we ever get close to native C performance with js?
01:01 < min|dvir|us> dust--: what do you care about performance?
01:01 < min|dvir|us> Are you folding proteins or reversing hashes?
01:02 < dust--> min|dvir|us: depends on your system, if you do 3d for example it matters
01:02 < dust--> webgl seems kinda interesting
01:02 < jerrysv> dust--: sometimes you can get better than native, sometimes not. depends on how you code compared to optimizations in the compiler
01:02 < min|dvir|us> The idea behind a language like JS is that it is very high-level.
01:02 < min|dvir|us> You say what you want done, instead of saying how you want it done.
01:03 < dust--> i dont see it really much higher level than say c++
01:03 < jerrysv> dust--: see for example the javascript parser for redis, usually faster than native, not always
01:03 < min|dvir|us> dust--: sure, all programming languages have the same power, theoretically speaking.
01:03 < min|dvir|us> What I mean by "high level" is it takes less code to do the same thing.
01:03 < dust--> it just seems a little easier to write
01:04 < jerrysv> dominictarr: !!
01:04 < min|dvir|us> Exactly.
01:04 < dominictarr> jerrysv: whats up?
01:04 < min|dvir|us> Typical JS applications are I/O bound, NOT CPU bound.
01:04 < jerrysv> dominictarr: just saying hey - you making it to the states for jsconf?
01:05 < min|dvir|us> So asking for performance leads me to believe you might be trying to fit a square peg in a round hole.
01:05 < dust--> min|dvir|us: agreed
01:05 < dominictarr> no, but I'll be at nodeconf!
01:05 < jerrysv> min|dvir|us: are you sure you know what you're talking about?
01:05 < min|dvir|us> So, what are you trying to do?
01:05 < min|dvir|us> jerrysv: I know nothing.
01:05 < jerrysv> dominictarr: i'm skipping nodeconf, the housing didn't work out well for laurie and i
01:05 < jerrysv> dominictarr: any chance of hitting pdx while in the states?
01:06 < dominictarr> yes, will do for sure!
01:06 <@Nexxy> jerrysv, nodepdx, yes?
01:06 < jerrysv> Nexxy: of course!
01:06 < jerrysv> Nexxy: you?
01:06 <@Nexxy> rumor has it there may be some hardware stuff! 
01:06 <@Nexxy> maybe.
01:06 < jerrysv> Nexxy: woo! i need to chat with troy/adron about it
01:07 <@Nexxy> do!
01:07 < jerrysv> Nexxy: selena is presenting on plv8 at jsconf
01:07 < dust--> min|dvir|us: just curious in general if desktop level performance is achievable in the browser without say google native client - for example 3d simulations - and to see where we are at. not that i would need this right now at the very moment, but helps me to get to know the js environment better for app development
01:07 <@Nexxy> also I missed you & laurie @ APIs & IPAs
01:07 < jerrysv> Nexxy: we were going to be there, but we both got really sick, it's been a tough week
01:07 < jerrysv> Nexxy: did you get a mapmap t-shirt?
01:07 <@Nexxy> I heard :< feel better :D
01:07 <@Nexxy> no!
01:07 < jerrysv> eep! i can grab you one then
01:07 < min|dvir|us> dust--: if you're not implementing the algorithm, but rather using it, then speed should be no different.
01:08 < jerrysv> Nexxy: almost better - spent the day coding at home, lots of cool geo stuff
01:08 < jerrysv> dominictarr: https://github.com/geoloqi/Terraformer
01:08 <@Nexxy> ya I saw terraformer
01:08 <@Nexxy> cool stuff
01:08 < dominictarr> * click
01:09 < jerrysv> Nexxy: wish i could have made it to apipa, it's rare that i pass up free beer
01:09 <@Nexxy> jerrysv, haha well
01:09 <@Nexxy> it was super crowded
01:09 <@Nexxy> and the bar was a little understaffed
01:09 < jerrysv> figures. i made it to pdxjs, but ended up catching a cab home early
01:10 < dust--> to my mind come for example emscripten versions of a few year old opengl games, which typically are playable at a decent framerate - which is amazing for an interpreted language - but still lose a lot of performance - would be interesting to know where they lose out on C - i guess matrix operations or stuff like that
01:10 <@Nexxy> I asked for a water w/ lemon and they rolled their eyes at me!
01:10 < jerrysv> Nexxy: they're a little snooty there, i prefer baileys
01:10 < min|dvir|us> dust--: I would say a quite safe bet on the future is JS.
01:10 < min|dvir|us> If that's what you're asking.
01:10 < dominictarr> jerrysv: you should checkout leveldb as alternative to indexeddb - it's a nicer api, runs in node, and polyfil ontop of idb in the browser
01:11 < jerrysv> dust--: most javascript gets compiled to assembly in the browser these days
01:11 < dust--> min|dvir|us: think so too, that's why i am here - i just wonder what holds it back aside the syntactic issues from replacing c 
01:11 < dominictarr> https://github.com/rvagg/node-levelup/
01:11 < jerrysv> dominictarr: will do
01:11 < dust--> jerrysv: yes, JIT and stuff
01:11 < min|dvir|us> Both JITs and hardware are getting better very rapidly.
01:11 < min|dvir|us> If anything, you can drop down to a lower-level language from JS.
01:11 < min|dvir|us> (Not in browser though.)
01:11 < jerrysv> dust--: there was a good talk about it last year at jsconf, can watch it online
01:12 < dominictarr> ALSO https://github.com/rvagg/node-levelup/wiki/Modules
01:12 < dust--> jerrysv: might be interesting
01:12 < min|dvir|us> dust--: nothing will ever replace C.
01:12 < min|dvir|us> C is almost a paradox.
01:13 < min|dvir|us> It's a portable language that's very low-level.
01:13 < min|dvir|us> That is why it is amazing.
01:13 < jerrysv> dominictarr: we are writing a couple of indexes on top of db's. my goal is to add rtree to riak
01:13 < jerrysv> but we're mostly using postgis at this point, debating arcsde
01:14 < dust--> min|dvir|us: it sure is, but then you are so tied to anything you develop for - for example if you want to present a screen with contents like a webpage its months of work
01:15 < dominictarr> jerrysv: you need to add a 2d index feature to the databases you use to do geo stuff well?
01:15 < dominictarr> I've read about spatial hashes, and z-indexing stuff
01:15 < jerrysv> dominictarr: going large on the data, so something like riak makes sense, already taking advantage of postgis and sqlserver
01:16 < dust--> i wonder if HTML script languages will get to native performance (V8, Google Dart) or if C will get into the browser (Google Native Client). it seems from the loose style fo the js  community dart and c dont have no chance
01:16 < jerrysv> dominictarr: and moving spatial indexes into the browser to help speed up geo in the browser
01:16 < dust--> on the other hand with WebGL C got its foot in the door already for graphics
01:16 < jerrysv> but only worrying about 2d and projections right now
01:16 < dominictarr> right - do you need to patch the database though?
01:17 <@Nexxy> only slightly related, I'm working on a riak mesh tool
01:17 < jerrysv> not yet, no. postgis and arcsde on top of postgres, and working on an index for riak, not determined yet if we'll need to write it in erlang or can use javascript at the moment
01:17 <@Nexxy> self-discovering & pairing riak clusters
01:17 < jerrysv> Nexxy: have you hooked up with adron and eric redmond yet? they're both basho folks that are local
01:18 < min|dvir|us> dust--: I think you're thinking about things a little twisted.
01:18 < dust--> ok thanks for all yourÂ input, i will explore node.js more for the moment and learn what it's limitations are
01:18 < min|dvir|us> Theoretically, the highest-level language is preferred.
01:18 < min|dvir|us> Always.
01:18 < min|dvir|us> I'd like to speak to my computer in English.
01:18 < dust--> min|dvir|us: agreed
01:18 < min|dvir|us> OK, then nevermind. :)
01:18 <@Nexxy> jerrysv, was eric the gentleman with you @ Bailey's?
01:19 < jerrysv> Nexxy: different eric
01:19 <@Nexxy> right
01:19 <@Nexxy> then no!
01:19 < jerrysv> that was sterling, the one that did the beer board
01:19 < jerrysv> redmond wrote 7 databases in 7 weeks
01:19 <@Nexxy> yes!
01:19 <@Nexxy> fancy
01:20 <@Nexxy> someone should make him a Tshirt for that
01:20 < jerrysv> and adron is one of the folks behind nodepdx
01:20 < dust--> min|dvir|us: what makes node.js interesting is that it is a high-level language that doesnt waste 99% all of my cpu cycles like other interpreted languages just say half of them
01:20 < min|dvir|us> dust--: yeah, non-blocking FTW.
01:20 < dust--> and v8's JIT magic not to forget
01:20 < min|dvir|us> Every language should have an implicit global event loop.
01:21 <@Nexxy> non-blocking is the secret in the async sauce
01:21 <@Nexxy> with it you go fast, without it you go slow
01:21 < jerrysv> non-blocking++
01:22 <@Nexxy> lol
01:23 < dominictarr> min|dvir|us: it's debatable wether english is higher-level than javascript.
01:23 < alxFradiani> does somebody have experience using appfog? 
01:23 < min|dvir|us> dominictarr: hah.
01:24 < min|dvir|us> Well, I strongly believe that it is.
01:24 < jerrysv> alxFradiani: i have lunch with them 2-3x/week, what are you looking for?
01:24 < redshadowhero> Didn't I read that there was an async  package earlier?
01:24 < dust--> dominictarr: debatable, but if you could code in english you dont have to translate it to some tech stuff first 
01:24 < alxFradiani> i'm trying to connect to the mongodb service
01:24 < min|dvir|us> redshadowhero: yes. caolan async.
01:24 < dominictarr> yes, it would still be exact, though - like legalese
01:24 < jerrysv> alxFradiani: i haven't deployed on it though, should be no problem connecting - have you contacted their support group?
01:25 < dominictarr> some concepts are easier to express in js than english
01:25 < dominictarr> especially relating to higher order functions, etc
01:25 < redshadowhero> is it better to write your code first, and then add on async based on your problem spots?
01:25 < min|dvir|us> redshadowhero: write your code keeping async in mind.
01:25 < min|dvir|us> When you come across a problem async solves, use it.
01:26 <@Nexxy> redshadowhero, just async all the things
01:26 < redshadowhero> async-ing without profiling the code seems to be like early optimization.
01:26 <@Nexxy> yeah cuz you know, using callbacks is optimizing!
01:28 < min|dvir|us> redshadowhero: what Nexxy is trying to say is that async isn't an optimization. It's a fact of life.
01:28 <@Nexxy> (within the context of node)
01:28 <@Nexxy> also that way you don't end up having to type Sync at the end of everything
01:28 < redshadowhero> I'd still like to try writing it regularly, then profiling the code some. Besides, there's this nifty dtrace tool I wanted to use.
01:28 <@Nexxy> "regularly" *is* async
01:28 <@Nexxy> I think is the point
01:29 < redshadowhero> I'll read up on it in a bit, then.
01:29 < mansoor-s> hmmm
01:29 <@Nexxy> it's worth spending time on upfront
01:30 <@Nexxy> IMHO
01:30 < alxFradiani> jerrysv: thanks, i haven't tried the support :p
01:30 < mansoor-s> to use disqus or write my own comments section to the site... :S
01:30 < mansoor-s> any suggestions?
01:30 <@Nexxy> use disqus
01:30 < redshadowhero> I'm kinda in the middle of non-js programming for non-fun, non-home things right now.
01:30 < jerrysv> alxFradiani: they have a big office and a keg, i know they have a good support group :)
01:30 < redshadowhero> I'll look into it when I get back to actually doing js again.
01:32 < redshadowhero> But, for when I do get back and this next build finishes, any good articles on async?
01:32 < min|dvir|us> redshadowhero: do you use JS or not?
01:33 < mansoor-s> Nexxy, such insight! :p
01:33 < min|dvir|us> redshadowhero: http://www.youtube.com/watch?v=jo_B4LTHi3I
01:33 < redshadowhero> What sort of question is that?
01:33 <@Nexxy> mansoor-s, lol 
01:33 < jerrysv> dominictarr: let me know when you hit the states?
01:34 < min|dvir|us> redshadowhero: just watch the video. :)
01:34 < dominictarr> jerrysv: will do! I don't want to think about that now, though! too much travelling!
01:34 < redshadowhero> I really don't have time for that right now.
01:34 < jerrysv> dominictarr: soon. soon. we will do a night of drinking again. it will be good.
01:34 < redshadowhero> I'll throw it in my reading list, but not now.
01:34 < dominictarr> haha
01:34 < dominictarr> yes
01:34 < jerrysv> if we can get tmpvar on board :)
01:35 < dominictarr> YES
01:35 < jerrysv> alright, logging out now. nexxy, you should come on tuesday
01:35 <@Nexxy> wait what
01:35 <@Nexxy> where?
01:35 < jerrysv> Nexxy: same place i am every tuesday: bailey's
01:36 <@Nexxy> ohh
01:36 <@Nexxy> is there any parking? :S
01:36 < jerrysv> street parking, but i take the max, and walk from my office
01:36 <@Nexxy> must be nice
01:36 <@Nexxy> :|
01:36 < jerrysv> yes, yes it is :)
01:36 <@Nexxy> lol :P
01:36 < jerrysv> good night!
01:36 <@Nexxy> I'll see
01:36 <@Nexxy> later
01:51 < redshadowhero> You know, after making this mistake for months, you'd think I'd learn not to test mpi code on a lower-end laptop.
01:52 < JohnMcLear> http://stackoverflow.com/questions/14553300/app-cache-manifest-method-to-tell-browser-to-go-back-online <-- can anyone shed some light on my appcache query?
02:00 < redshadowhero> Oh wait. I see now. I guess I have been doing async anyway. I thought you guys were talking about the async package specifically.
02:00 < min|dvir|us> redshadowhero: you watch the video?
02:01 < redshadowhero> Sort of. I've been listening to it while I wait for this run to finish.
02:01 < redshadowhero> I've been setting timeouts and using nextTick anyway. I just thought you were talking about the async package.
02:02 < timoxley> redshadowhero can you show some code
02:02 < redshadowhero> For what?
02:02 < redshadowhero> this run I'm doing now? No. The javascript? I'd like to clean it up some first, since this has been a moving target the more I learn.
02:03 < min|dvir|us> redshadowhero: the async package just makes it easier to deal with callbacks.
02:03 < min|dvir|us> Look at the functions it provides. Should be fairly straightforward.
02:03 < min|dvir|us> It's just a utility library.
02:04 < redshadowhero> I've looked at it a little. I'm starting to head into week 2 of javascript, so a lot of concepts are a little alien to me.
02:04 < redshadowhero> s/a little/very/
02:05 < redshadowhero> that, and I hate to keep asking questions; I feel like I'm bothering everyone.
02:05 < timoxley> redshadowhero meh
02:06 < redshadowhero> meh?
02:06 < min|dvir|us> redshadowhero: questions don't bother anyone.
02:06 < timoxley> redshadowhero yeah just ask. you're giving people an opportunity to procrastinate while still feeling constructive
02:07 < redshadowhero> Well, I do appreciate all of you that take the time to help me out.
02:09 < min|dvir|us> redshadowhero: that's what IRC is for.
02:11 < redshadowhero> I thought IRC is where my free time went to die.
02:12 < eduardo> Good evening guys. Any recomendations for frameworks for user management? In particular, I currently use Facebook authentication with passport, but i want to save some info about users into my DB, as well as let them log in w/o FB if they want to. Basically very common stuff - any suggestions
02:16 < yarco> how to get current class, current method? for example:    function AClass() { this.init = function() { // current is AClass::init } }
02:19 < isaacbw> has anyone read this book: http://www.amazon.com/NoSQL-Distilled-Emerging-Polyglot-Persistence/dp/0321826620/ref=pd_rhf_ee_s_cp_20_76DH
02:20 < Havvy> The author has.
02:20 < redshadowhero> the amazon slug url already has me saying "no"
02:21 < redshadowhero> yarco: what do you mean?
02:21 < Havvy> IMO, anybody who thinks NoSQL is one topic shouldn't be writing about NoSQL.
02:22 < Havvy> yarco: You can't get the current class and function name in JS.
02:22 < isaacbw> that's a pretty shallow thing to say if you haven't read the book
02:22 < isaacbw> it could be a survey of emerging techniques
02:23 < yarco> em? :(
02:23 < Havvy> For one, 'class' doesn't actually exist in JS.
02:23 < Havvy> And two, functions are values. They don't actually know where they are stored.
02:24 < yarco> i want to output debug information to tell me where it is and also the arguments
02:24 < min|dvir|us> yarco: then write an interpreter.
02:24 < min|dvir|us> Arguments are easy to get.
02:24 < min|dvir|us> Just use `arguments`.
02:24 < isaacbw> you could try to infer something from thsi
02:24 < isaacbw> *this
02:24 < holzp> you can try .callee but I think thats on the way out
02:25 < yarco> yes certainly, but i dont write to always write   console.log('AClass::AMethod', arguments);
02:25 < isaacbw> and you could set this.classname in each of your constructors
02:25 < isaacbw> but there's no built-in way to do it because that's not how javascript works
02:25 < min|dvir|us> Well I'm sorry for saying such a stupid recommendation.
02:25 < yarco> i want something like       console.log(__CURRENT___LOCATION, arguments);
02:25 < isaacbw> everyone has told you that there is no such thing
02:26 < isaacbw> asking it differently won't change the answer
02:26 < redshadowhero> oh wait.
02:26 < redshadowhero> I actually think there are some things that might help.
02:26 < Havvy> You could print a stack trace.
02:26 < isaacbw> you can probably get stack information
02:26 < Havvy> Which will give line numbers.
02:26 < yarco> so i can just copy and paste it to get the debug information `where it is` and `what is the arguments`
02:26 < isaacbw> that's in the debugger though, not javascript itself
02:26 < yarco> em...
02:27 < Havvy> Node.js has stacktrace methods, no?
02:27 < isaacbw> does it?
02:27 < AAA_awright> Havvy: Stacktrace?
02:27 < Havvy> I can't remember if it is exposed to the node programmer.
02:27 < Havvy> AAA_awright: Those things you see when you get an error.
02:27 < isaacbw> http://nodejs.org/api/debugger.html
02:27 < AAA_awright> Havvy: It's not a Node.js function, just ECMAScript, `new Error`
02:28 < min|dvir|us> AAA_awright: he wants the actual stack information.
02:28 < AAA_awright> Havvy: Or specifically, `(new Error).stack` will give you a stack trace in V8 (though not in all ECMAScript implementations)
02:28 < Havvy> Alright. It's at the V8 level then.
02:28 < Havvy> I'm pretty sure it's not at the ECMAScript level.
02:29 < Havvy> Anyways, yarco: Will the stack trace work?
02:29 < yarco> Havvy: you mean (new Error).stack?
02:29 < AAA_awright> ES in general doesn't define any way to access the stack
02:29 < Havvy> Yes.
02:29 < redshadowhero> Huh. apparently arguments.callee.name will give you the function name.
02:30 < Havvy> redshadowhero: Does that work in V8?
02:30 < AAA_awright> redshadowhero: Yeah, if you use the "function funcName()" syntax
02:30 < redshadowhero> Just tested it in the node console.
02:30 < yarco> haven't tested it yet. But i really want a simple solution like some constants in PHP
02:30 < redshadowhero> AAA_awright: Yeah. Anonymous functions aren't working.
02:30 < AAA_awright> And how could they
02:30 < AAA_awright> redshadowhero: Also note arguments is going away in a future version of ES, use the function name itself as the variable
02:31 < redshadowhero> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/callee
02:31 < redshadowhero> and it isn't allowed in strict mode, so that's a no-go anyway.
02:31 < AAA_awright> redshadowhero: Not arguments, arguments.callee is going away in favor of function funcName(){ funcName(...) }
02:31 < AAA_awright> So yeah, use the named function style
02:32 < redshadowhero> AAA_awright: I wasn't talking about arguments.callee() from the MDN page I linked.
02:32 < fmarceau> hi
02:32 < redshadowhero> er.
02:32 < redshadowhero> I was talking about it.
02:33 < someprimetime> why won't scss work with node?
02:33 < AAA_awright> Also note that function name(){} won't create a variable if used as an expression instead of a statement. So perhaps confusingly, you can't use a in place of b or vice versa in either location:
02:33 < AAA_awright> var a = function b(){ b(); }; a();
02:33 < someprimetime> why can it serve up the css files stylus generates but not the one compass/scss generate?
02:34 < fmarceau> hi guys.. is there a difference between var f = function() {}; and function f() {} ?
02:34 < fmarceau> in terms of memory consumption
02:35 < min|dvir|us> fmarceau: depends on implementation.
02:35 < Havvy> Probably not.
02:35 < Havvy> Or if it did, it'd be a small amount of memory.
02:35 < min|dvir|us> fmarceau: don't optimize if you don't have a reason to.
02:35 < min|dvir|us> You're only going to fuck yourself up.
02:35 < someprimetime> your var f named function expression would be contained within the scope you put it and your other normal global function declaration would get hoisted to the top.. but it doesn't matter
02:35 < fmarceau> I have one... my program is taking more than 1G :)
02:36 < someprimetime> 1GB? of what memory?
02:36 < min|dvir|us> fmarceau: run a memory profile.
02:36 < fmarceau> yeah
02:36 < fmarceau> I'm parsing a quite big CSV file and inserting in a DB
02:36 < fmarceau> using async.queue
02:36 < someprimetime> `top` node literally says 1000MB?
02:36 < min|dvir|us> someprimetime: it's not hard to believe.
02:36 < fmarceau> I think it's the closures that are eat all the memory
02:36 < min|dvir|us> fmarceau: you can take the guesswork out by profiling.
02:36 < someprimetime> min|dvir|us: true
02:37 < fmarceau> is there a better way to profile than node-inspector ?
02:37 < Havvy> Know any memory profilers?
02:37 < someprimetime> what are people using in here for their css preprocessors?
02:37 < min|dvir|us> someprimetime: read line-by-line.
02:37 < redshadowhero> Ooh!
02:37 < redshadowhero> wait, no.
02:37 < redshadowhero> I'm thinking of something else.
02:37 < redshadowhero> nevermind.
02:38 < someprimetime> i'm just trying out node today (coming from from CakePHP where I was using Sass (scss) and compass) and it seems like i now need to use stylus?
02:38 < someprimetime> (my options for preprocessors not basic css files in general, that is)
02:38 < someprimetime> compass is generating a .css file but when I look for it in localhost:PORT/public/styles/screen.css node won't allow it
02:38 < fmarceau> stylus is nice
02:39 < someprimetime> can I explicitly just tell node to open up that directory for reading?
02:39 < fmarceau> less is more broadly supported though
02:39 < someprimetime> well this is for a personal project and i've been using scss for awhile and moreover i use scss at work so i don't think i want to get used to the even more minimalistic syntax of stylus 
02:40 < someprimetime> i mean if you can install node to compile your less you can install ruby to do the same thing
02:40 < someprimetime> so i don't think that's a strong argument
02:40 < someprimetime> isn't that what less is compiled with? node?
02:51 < robertj> what properties does my proxy need to support for in to work?
02:56 < cloudbender> 'attempts to provide a separation' makes me need to slap someone.
02:59 < isaacbw> robertj, 'support for in to work'?
03:01 < robertj> it says cannot search TestProxy for writable with in
03:01 < robertj> because apparently i'm not supporting whatever it is with my Proxy that makes in function...is it writable or has?
03:01 < robertj> err iterable or ahs?
03:01 < robertj> has
03:01 < robertj> blah too late here :P
03:06 < isaacbw> robertj, I'm having a lot of trouble understanding you
03:07 < robertj> isaacbw, so I've got a Harmony Proxy object and i'm getting an error from eval that it can't search it for the writable attribute because it doesn't support the operator required by 'in'
03:11 < grass7boy> hello
03:12 < grass7boy> is there any node package that can convert mp3/mp4 <---> ogg / ogv audio
03:13 < grass7boy> by the way... how about mp4 video <----> webm video?
03:15 < Havvy> grass7boy: Find a program that can do it, and you can call it from Node.
03:16 < Havvy> I don't actually know if there are any or not, but it doesn't sound like the kind of thing Node would be good at.
03:18 < grass7boy> haha... maybe you re right
03:19 < grass7boy> ok~ i ll try it
03:19 < grass7boy> thanks you
03:19 < redshadowhero> What would be a good way to stress an irc bot written in js?
03:19 < gluxon> redshadowhero: "stress"?
03:20 < redshadowhero> I guess I mean 'throw lots of input at it at once'.
03:20 < gluxon> To an IRC bot?
03:20 < redshadowhero> Yeah.
03:21 < redshadowhero> besides, I kinda want to try out this article I read on using dtrace with node.
03:21 < gluxon> Find yourself a good irc module and use it :)
03:21 < gluxon> I use this one -> https://github.com/martynsmith/node-irc
03:21 < redshadowhero> Part of teaching myself about js and node, I decided that I wanted to write it myself.
03:22 < redshadowhero> Less about reinventing the wheel, and more about exposing myself to a sufficiently large project.
03:25 < redshadowhero> Though, reading the docs for this made me realize I could dynamically generate a string to emit as an event.
03:26 <@Nexxy> redshadowhero, have you looked at EventEmitter2?
03:27 < redshadowhero> I didn't know it existed.
03:27 <@Nexxy> it's pretty cool
03:27 < redshadowhero> I'll look it up after I finish up this next function.
03:28 < redshadowhero> At this point, everything is a moving goalpost with this project, since everytime I learn something new I use to to learn and implement more.
03:30 < redshadowhero> Though, I do have a question. Or maybe a suggestion. One of my functions has a somewhat large for loop. I've been using nextTick to process a chunk of the data and resume later. Is there a better way to do this?
03:30 < cainus> wow the http api from jquery is just terrible
03:34 < jtomasrl> what im doing wrong here? https://gist.github.com/4650651
03:34 < isaacbw> cainus, the ajax api?
03:34 < cainus> isaacbw: yep
03:34 < isaacbw> it's pretty nice...
03:34 < cainus> we get spoiled in node land I guess
03:34 < isaacbw> it's just a different sort of thing
03:34 < cainus> pretty nice?  it's just plain random
03:35 < xk_id_> (this is about redis:) does anybody have a clue why if I do "client.keys('*', function (entries) {for (entry in entries) {console.log(entry);};});" I don't get anything, while if I do "keys *" from redis-cli I get something?
03:35 < cainus> no one can write that stuff from memory
03:35 < isaacbw> that's what docs are for
03:36 < cainus> I can do requests from node using request or the core lib from memory
03:36 < cainus> because they're well designed and straightforward
03:39 < xk_id_> jtomasrl: is your database on a different server?
03:39 < jtomasrl> jtomasrl: yes
03:39 < jtomasrl> it happend locally too
03:39 < xk_id_> jtomasrl: it could be that it takes too long to connect to it, so node.js jumps to the "global.mongo.collection" instruction before it connected to the db
03:40 < xk_id_> oh okay
03:40 < jtomasrl> xk_id_: mongo doesnt connect unless required?
03:41 < xk_id_> jtomasrl: try doing a "console.log(global.mongo)" right before the ".collection" instruction, see what it returns. if it's "undefined", then "global.mongo = db;" didn't succeed/hasn't finished yet.
03:41 < fruitFly__> the difference between websockets and http is that the server can spontaneously send data to the client.. what else?
03:41 < jtomasrl> it does give undefined
03:42 < eduardo> guys - i am trying to understand why someone would use mongoose. what does it do for me that it extra over mongo
03:42 < xk_id_> jtomasrl: I would guess your script doesn't connect to the db in time, or at all. 
03:43 < jtomasrl> eduardo: the only reason i havent use it is b/c of speed (benchmarks on google)
03:43 < fruitFly__> may anyone recommend a good tut on websockets? even a great book?
03:43 < xk_id_> jtomasrl: try a "console.log(err)" after line 3. 
03:43 < cainus> eduardo: I just use the mongo-native driver... I don't understand a driver that implements schemas for a schema-less database
03:43 < jtomasrl> xk_id_: it does after some minutes or sometimes instant
03:44 < xk_id_> jtomasrl: node goes through the instructions asynchronously. so you need a way to wait until it connects, before you allow moving onto the next instructions.
03:45 < xk_id_> jtomasrl: by default, node won't wait and move on. 
03:45 < xk_id_> jtomasrl: so it will reach the ".collection" instruction too soon
03:46 < jtomasrl> hmmm
03:49 < jtomasrl> xk_id_: mClient.connect isnt being execute unless a mongo operation is perform
03:52 < jtomasrl> wrong, the callback is being executed late. connecting after 9222ms of server start
03:56 < jtomasrl> is it valid a  solution like this? https://gist.github.com/4650651
03:58 < xk_id_> jtomasrl: i don't really understand what's the purpose of the server
04:00 < jtomasrl> xk_id_: just db connections
04:14 < daslicht> where to get the install strings in a package.json such as : "passport-facebook": "~0.1.4" ?
04:15 < Havvy> From npm.org
04:15 < daslicht> https://npmjs.org/package/express
04:15 < daslicht> just the version?
04:16 < daslicht> e.g: Version	 3.1.0
04:16 < daslicht> ?
04:18 < gluxon> Hi, I'm sending images over HTTP.
04:18 < gluxon> Does anyone know what would cause the images to be distorted?
04:18 < gluxon> Every other request also ends in a blank image.
04:20 < Havvy> Yes, just the version.
04:33 < AliG> hi
04:37 < daslicht> why is that package.json not valid?
04:37 < daslicht> http://pastie.org/5893756
04:38 < daslicht> 5 error install Couldn't read dependencies
04:38 < daslicht> 6 error Failed to parse json
04:45 < redshadowhero> Is there a way to install packages from github using npm? It looks like there may be a way, but I could be wrong.
04:46 < AAA_awright> redshadowhero: You want to git clone npm packages?
04:46 < redshadowhero> Well, I want to install node-stackvis. If I have to clone it, that's fine.
04:47 < redshadowhero> oh wait.
04:47 < AAA_awright> I use https://github.com/Acubed/git-node to get git checkouts of all my dependencies, which works well
04:47 < redshadowhero> nevermind.
04:47 < AAA_awright> (Also my tool, shameless plug)
04:47 < redshadowhero> apparently stackvis is in the npm repos.
04:47 < rump> you can stick github urls into npm's package.json, right?
04:47 < rump> think ive seen that before
04:47 < AAA_awright> I really don't like that usage though
04:48 < redshadowhero> rump: Yeah. I found that in some documentation, so I don't know at what step that's used.
04:48 < daurnimator> can I kill/stop a vm?
04:48 < AAA_awright> Git submodules are the only correct way to depend on a git repository
04:48 < daurnimator> i.e. I do script.runInNewContext; how can I stop it?
04:48 < AAA_awright> (Well there's a few odd cases where something else may be better, but almost never is that the case)
04:49 < AAA_awright> daurnimator: You can't, Node.js being single-threaded and all
04:49 < daurnimator> AAA_awright: surely I can kill all outstanding requests from that vm though?
04:49 < redshadowhero> I use git submodules in my local 'bin' setup. Every package I install is a submodule in $HOME/bin/packages, which has worked pretty well.
04:49 < AAA_awright> daurnimator: Well where would you do it from? If the new context is executing, that means you /don't/ have the context
04:50 < AAA_awright> daurnimator: Unless you fork off a new Node.js process and send it SIGKILL or something
04:50 < redshadowhero> also with my .vim folder.
04:50 < daurnimator> AAA_awright: e.g. new context does a http request; new one comes in for main context => I want to kill that vm
04:50 < AAA_awright> daurnimator: In a single process, there's nothing you can do but wait until the next tick executes
04:51 < AAA_awright> What are you trying to _do_?
04:51 < AAA_awright> at a broader level
04:51 < daurnimator> do http requests in a sandbox
04:51 < AAA_awright> Unfortunately require('vm') isn't a very good sandbox
04:51 < daurnimator> I don't mind, I just need different globals
04:52 < AAA_awright> Why?
04:53 < daurnimator> because I'm running (non-node) js in there, and it expects certain globals
04:54 < daurnimator> eventually I get the answers I want out of it; and I want to make sure it gets collected
04:54 < AAA_awright> In most cases you should be able to just use a new function and define certain properties
04:54 < AAA_awright> rather, arguments
04:55 < redshadowhero> Huh. Question. When installing a -g package in npm, what does this mean? npm ERR! cb() never called!
04:55 < daurnimator> AAA_awright: I have a js file that does XHRs. I want to run it from node. so I set up a vm with a window +document and a function XMLHttpRequest. eventually it all works. now I need to make sure it doesn't have any left over resources allocated, and gets cleaned up correctly
04:58 < AAA_awright> Hmm I think I see. If the new context has asynchronous code then the context will be returned to your application, but the only thing you can do to terminate is make sure that references to those callback functions get deleted
04:58 < AAA_awright> And of course, you can't stop execution while code in that context is running
04:58 < AAA_awright> You can only wait until it returns back to you
04:59 < zivester> whats the preferred way to automatically reload my node.js app on save?  (running ubuntu if it matters)
04:59 < redshadowhero> I think there's a package called nodemon?
04:59 < redshadowhero> I'm probably wrong, though.
05:00 < daurnimator> redshadowhero: if not thats a cool name
05:01 < redshadowhero> let me finish pulling the latest npm and I'll tell you.
05:01 < zivester> yes i see a nodemon... seems to be what i want, thanks!
05:01 < redshadowhero> nodemon       Simple monitor script for use during development of a node.js app. =remy     2013-01-14 22:52  monitor development restart autoload reload terminal
05:01 < redshadowhero> could be it.
05:03 < redshadowhero> npm version 1.2.3 also doesn't seem to want to install stackvis
05:11 < daurnimator> best way to show a progress bar in terminal?
05:13 < Havvy> daurnimator: Look at how mocha.js does it.
05:13  * daurnimator is looking at https://npmjs.org/package/progress
05:13 < Havvy> Or possibly that.
05:14 < vicapow> hey! is there a voxeljs channel?
05:15 < redshadowhero> Huh. Well, today I learned.
05:15 < redshadowhero> some npm packages will not deploy if you're on a pre build.
05:27 < zivester> app.configure is deprecated in express now? http://expressjs.com/api.html#app.configure
05:31 < daurnimator> best arg parser?
05:46 < echo> test
05:49 < testdev> yeo
06:22 < yanivge> Guy, I have the following configuration: existing Apache web-application + new Node.js for push notifications based on Socket.io. but now i have a problem when i use https sith SSL (self signed certificate) - this works only on chrome (and with safari when i use xhr-polling as transpost). my application is build to work with self-signed certificate, so this part can not be changed. more over, i need to support completly with (IE,FF, chrome, s
06:22 < yanivge> afary)
06:23 < yanivge> anyone got any ideas? 
06:23 < yanivge> Maybe its a Socket.io issue? maybe some other module?
06:24 < echo> Can you elaborate on your actual problem? Are you receiving errors?
06:26 < lewellyn> hi. now that nodejs.tchol.org is offline, is there a repo for rhel users who want to keep node up to date?
06:28 < echo> https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager Shows it's in updates-testing and I show it in CentOS in updates.
06:34 < lewellyn> echo: hm. lemme check in sl's packages more then. i know it's in f18, but you're foolish if you're doing fedora on a server :)
06:37 < echo> lewellyn: While I wholeheartedly agree, there are some who really do like fedora that much. :P Personally, I just pull from master, recompile, test on dev and then push to production, although I do agree it would be much cleaner and easier with repo.
06:37 < lewellyn> i've had clients using fedora on servers. they're now all stuck on things like fc5 or even fc3 because of it.
06:37 < lewellyn> and i hate unpackaged files :)
06:38 < AthanClark> fc5?
06:38 < penzur> fedora core 5?
06:39 < SomeoneWeird> debian > *
06:39 < AthanClark> derp
06:39 < AthanClark>  - except gentoo
06:40 < echo> lewellyn: Yeah, I just checked the version for node in my CentOS-updates repo and it's 0.6. :-/
06:41 < SomeoneWeird> gentoo is cool except it takes so long to get it up and running
06:41 < NotreDev> i'm (trying) to use jam with bbb, and i cleared out my ./vendor/jam folder to try and rebuild it from the package.json file. i successfully ran bbb rebuild, which rebuilt the require.js and require.config.js files. however, i'm not sure how to reinstall the missing libs. what should I be doing?
06:41 < AthanClark> hey does anyone here know if there's a build tool for node that statically compiles everything into a nice, neat binary executable? V8 has an interface to C++, but you have to keep track of the output of expressions manually
06:42 < AthanClark> yeah that is a major downside
06:42 < AthanClark> I tend to swap out hard drives on my comp a lot, too, and it just fucks everything up if you don't use initramfs
06:43 < lewellyn> echo: latest i have is 0.6.18 from the now-defunct repo
06:43 < echo> NotreDev: have you tried running just 'jam' from your application root? It's been awhile but, the last time I used bbb and added in bootstrap to it, I did it manually to jam's json file and then just ran jam from the root and it loaded it up.
06:45 < NotreDev> i installed jam, but for some reason it didn't install to my node_modules/.bin/ folder. i do have node_modules/jam/ but there is no bin in there...
06:46 < NotreDev> i'm trying to use a ruthless cocktail of jam, require, backbone, and bbb.
06:46 < echo> NotreDev: I installed it globally without really thinking about it, so I don't have any experience using it locally.
06:46 < SomeoneWeird> NotreDev, thats not how it works
06:47 < NotreDev> apparently not, but the docs on jamjs.org says i can do things like "jam install backbone". there is definitely no jam exec on my path
06:48 < NotreDev> sorry if i sound foolish, i think i'm drinking from a firehose here. i'm usually just a python web server guy, but trying to give the SOC a shot :)
06:49 < SomeoneWeird> npm install jam -g
06:49 < SomeoneWeird> then add the global node_modules dir to your path
06:52 < NotreDev> SomeoneWeird: is there a reason i can't install it to a local node_modules dir?
06:52 < NotreDev> i.e. npm install jam
06:53 < SomeoneWeird> i suppose not, but most cli modules should go into your global dir
06:53 < NotreDev> >> jam@0.2.3-1 ./node_modules/jam
06:53 < purr> NotreDev: SyntaxError: Unexpected token ILLEGAL
06:55 < daurnimator> I don't suppose anyone that works on jsdom is here?
06:57 < NotreDev> ok, this kinda explains itâ€¦ ls ./node_modules/bbb/node_modules/.bin/ contains jam; don't understand that install style
07:00 < echo> NotreDev: Ah, I just realized you installed jam, which isn't jamjs. If you're using npm to install it, you want to use jamjs, and it includes a binary in the node_modules/jamjs/bin/jam.js. https://npmjs.org/package/jam vs. https://npmjs.org/package/jamjs
07:00 < NotreDev> haha crap
07:01 < echo> When I went to replicate it, I was like wow, how does it have so few dependencies. It makes all kinds of requests and works with grunt, etc. >_> Then I looked.
07:01 < AthanClark> sidenote - is it possible to include your current directory in a bash PATH? Like :./node_modules/bin?
07:02 < NotreDev> thanks for that echo. dumb question: a very small set of packages are listed on jamjs.org. so that means that most packages won't currently work with it, right?
07:04 < echo> NotreDev: I don't think their web UI is meant to be used as a repository for what they can serve. I'd try using the search command within jam to check for stuff first. I don't think it has the volume of it's sister languages like composer, but I don't think it has very few.
07:05 < echo> AthanClark: You may be able to rig up some kind of `pwd` in .bashrc to grab your current working directory and append node_modules/.bin/ to it.
07:06 < AthanClark> Ahh thanks echo. Hey... what's the command for a private message?
07:07 < AthanClark> hmm. Maybe I can alias cd too so that it automatically updates the PATH
07:07 < lewellyn> export PATH=$PATH:'$(PWD)'/bin
07:07 < lewellyn> that should work, AthanClark 
07:08 < lewellyn> it's likely non-portable, though, and a potential security risk :)
07:08 < lewellyn> no need to alias builtins
07:08 < lewellyn> i may be totally wrong though. i haven't ever had a convincing need to do it
07:09 < AthanClark> alias cd="cd $1 && ...sed out the last PATH... && export PATH=$PATH:`pwd`/bin
07:09 < lewellyn> looks like i was wrong.
07:09 < AthanClark> :)
07:09 < AthanClark> I'm just lazy
07:10 < AthanClark> standards, who needs em!
07:10 < AthanClark> haha
07:10 < bradleymeck> AthanClark: is a '.' in your path not working?
07:10 < AthanClark> speaking of standards... I know this isn't the right place, but does anyone know where I could find stuff on ES5/Strict - ES3 intersection (basically universal javascript)??
07:24 < mansoor-s> whats the deal with mongoskin
07:24 < mansoor-s> it reconnects on every requeset?
07:25 < mansoor-s> i don't see a "connect" option to connect to the database and then hold that connection and use it on subsequent calls
07:37 < lewellyn> echo: jfyi, i ended up with (for rhel6-alike): https://build.opensuse.org/package/show?package=nodejs&project=home%3Apresbrey%3Anodejs
07:38 < lewellyn> the spec is sane enough, so i hope there are no issues :)
07:39 < lewellyn> maybe now that it's in f18 it might make its way to epel eventually
08:21 < _ior> '/win shrink 2
08:25 < NotreDev> i'm trying to use marionette, grunt, and requirejs. my console is telling me that two dependencies of marionette can't be found. here is my app.js fileâ€¦ not sure what it should look like? http://pastebin.com/W5gNczwK
08:25 < NotreDev> the dependencies are wreqr and babysitter, btw
08:44 < [AD]Turbo> hi there
08:45 <@Nexxy> \o/
08:45 < Industrial> /o/
08:45 < gildean> good morning
08:45 <@Nexxy> \o\
08:46 < SomeoneWeird> /o\
08:48 < mpajor_op5> morning
08:48 < SomeoneWeird> *night
08:49 <@Nexxy> it's morning somewhere!
08:50 < lewellyn> i guess it is here ;)
08:50 < lewellyn> (technically)
08:50 < SomeoneWeird> lol
08:51 < xiecc> Yeah , morning
09:03 < trodrigues> morning, monday, check.
09:05 < Ned_> Anyone know if it's possible to change the default bin installation path for local module installs (i.e. something different from node_modules/.bin)
09:15 < bradleymeck> Ned_ no, but you can do global installs to odd places using --prefix
09:19 < Ned_> bradleymeck: Hmmm, yeah, in this case, I'd like to do local installs :p
09:20 < Ned_> I guess I can just either put .bin in my path, or do some symlinkin
09:20 < Ned_> g
09:20 < bradleymeck> Ned_ if you use npm start / npm run-script X it adds it to the path while executing
09:20 < bradleymeck> package.json scripts does a lot
09:51 < zot> is there a graceful way to uninstall from the mac os installer?  (i want to go back to source, and haven't found an uninstall script yet.)  i can do the lsbom stuff, but not preferred :)
09:58 < fruitFly> good websockets/socket.io tutorial?
10:06 < stagas> fruitFly: hands on, best tutorial
10:06 < fruitFly> stagas: AAAAAAAAAAAAAAAH
10:07 < fruitFly> stagas: got sumn elementary brah... there's almost no documentation on the website
10:08 < Industrial> scuse my generated output, but I think it's quite readable; https://gist.github.com/8b07a41e6deb434630db/93803962f03fa4c2d659749c1a9b079368418718 if I call render and then inject and then render again, the DOM is unchanged after the second render. Does this mean every time I want to update a DOM node, I should remove it, update it and add it in place again?
10:08 < stagas> fruitFly: https://github.com/einaros/ws
10:09 < gildean> fruitFly: https://github.com/LearnBoost/Socket.IO/wiki
10:10 < fruitFly> stagas: gildean Thanks :)
10:12 < fruitFly> Haskell... what do you guys think?
10:16 < Industrial> fruitFly, livescript
10:16 < Industrial> If I call render, then inject, then render my DOM nodes are not updated twice, only once. why? https://gist.github.com/8b07a41e6deb434630db/29755178600b468be1ab6997a10f3246154d1e67
10:24 < gildean> fruitFly: about haskell? it's a nice language, but it's pretty difficult to actually use it for anything at least with my limited knowledge
10:24 < stagas> Industrial: can you show the output? which one is rendered?
10:25 < fruitFly> gildean: is node.js the opposite of haskell?
10:25 < fruitFly> gildean: it seems like it
10:25 < zomg> fruitFly: opposite how?
10:26 < Industrial> stagas: https://gist.github.com/8b07a41e6deb434630db/c9d8d14b5cb6d75528f0c52fa192f487467a9920#file-initialize-ls-L42
10:27 < Industrial> because I set the title to 2, it should emit 'change', 'title', 'lol'
10:27 < Industrial> which should cause a render
10:27 < lewellyn> fruitFly: it seems to me that the opposite of haskell would be unfxryy
10:28 < fruitFly> node is single threaded and functional can utilize all cores, node works so well with the web where as haskell your relatively the furthest away with web frameworks, they're both highly scalable but in different ways... node is like an inside out language if haskell is the right side... but then again a lot of the time it's nice to write apps from the inside out
10:28 < fruitFly> zomg: 
10:29 < fruitFly> lewellyn: wut?!
10:29 < fruitFly> lewellyn: oooh lol... not fuckry
10:29 < lewellyn> huh?
10:29 < fruitFly> lewellyn: meaning applicable?
10:29 < fruitFly> lewellyn: unfuxryy?
10:29 < lewellyn> yeah. that'd be the opposite of haskell
10:30 < jesusabdullah> mildly lost here
10:30 < lewellyn> no u.
10:30 < fruitFly> unfuxryy??? lewellyn 
10:30 < jesusabdullah> hmmph!
10:30  * lewellyn hands fruitFly some rot13 and wanders back off to fight with this Jakefile
10:30 <@Nexxy> it's worth noting that node only uses one core per process
10:31 < zomg> fruitFly: I suppose in a way that's true, but Haskell web frameworks offer some quite nice features
10:31 < poikon> i've used haskell to write a web api
10:31 < zomg> For example, compile time verification of database queries, compile time verification of markup, etc.
10:32 < zomg> Compile time verification that all your routes are correct and your links actually use correct routes and parameters..
10:32 < fruitFly> zomg: so haskell is god language... but just to steep a learning curve for us plebs?
10:32 < poikon> it wasn't that big of a deal to be honest... most comments around haskell+web seem to be exaggerating 
10:33 < zomg> fruitFly: it can be a bit steep when coming from non functional languages yeah
10:33 < poikon> fruitFly: i wouldn't say steep learning curve. if you're used to any other language functional language you might even find it easy to learn 
10:33 < zomg> but the language is indeed pretty awesome
10:33 < stagas> Industrial: if you try calling render does it happen?
10:34 < fruitFly> zomg: poikon so why are you guys here in node?
10:34 < jesusabdullah> anyone seen domenic around
10:34 < jesusabdullah> not dominictarr obviously
10:34 < zomg> fruitFly: why not?
10:34 < poikon> fruitFly: i also write javascript
10:34 < zomg> =)
10:34 < zomg> Yeah, same for me. Plus node is convenient for certain sorts of applications
10:35 < poikon> fruitFly: and speaking of node, let's stop calling node a language please? :-P 
10:35 < fruitFly> I wanna learn node, got node in action and in chapter 2 he's already building a chat application with socket.io and he hasn't even gone over it. I dn't how to learn it with these git links... I need to see it in action, there's barley anything on the socket.io website... what to do?! And good tuts? What about that smashing node.js book? HEEEELp
10:36 < fruitFly> poikon: zomg ^^^^^
10:36 < fruitFly> I don't know*
10:37 < fruitFly> :'(
10:37 < poikon> fruitFly: what do you mean by see it in action?
10:37 < fruitFly> poikon: I want fundamental examples
10:37 < fruitFly> poikon: that I can code myself
10:39 < poikon> i think i get what you're saying. socket.io might be hiding a lot under the hood (like websocket handshakes, which, tbh, aren't straightforward when you start to support more than one draft of the specification)
10:40 < fruitFly> poikon: Any examples? good tuts? or even boks?
10:40 < fruitFly> books*
10:40 < poikon> but if you understand the basics of the http protocol (like, let's say a really basic concept would be a http response would contain a status, a header, and a body), then you'll find it easier to see what node is doing.
10:41 < `3rdEden> Smashing node.js from Guillermo would be a good start fruitFly
10:41 < `3rdEden> who is also the author of socket.io
10:41 < poikon> not socket.io though. websockets don't work like normal http. also, add to that: socket.io can fallback to xhr-polling/long polling so it's a bit hybrid isn't it? 
10:41 < fruitFly> `3rdEden: I suspected that, have you gone through it?
10:41 < `3rdEden> fruitFly: briefly
10:42 < `3rdEden> A book fully focused on socket.io will also be released soon
10:42 < `3rdEden> Can't say anything more specific then that. ;9
10:46 < xk_id> Does anybody here know whether I can store a kue job queue to file, and then reload it later to resume the work?
10:52 < xk_id> that was a silly question, nvm
11:03 < _ior> 1 comment, 10 months ago: "tell me how to avoid bugs"
11:14 < klaemo> hey, can I query my app's own http api from within the app with e.g. the mikael/request? like request('http://localhost:port/api' cb)
11:24 < mscdex> the imap protocol needs to change so badly
11:24 < mscdex> ugh
11:27 < SomeoneWeird> lol imap
11:30 < mickhansen> klaemo: yes, that shouldn't be a problem, have you tried?
11:35 < klaemo> mickhansen: yeah, works. :)
11:35 < mickhansen> great :)
11:36 < NotreDev> if yeoman can't find a package, am i supposed to just curl it to the vendor directory (sorry first time w/ modern js)
11:39 < mscdex> SomeoneWeird: seriously. i mean, there are servers out there that send multiple responses for the same email that contain duplicate information
11:39 < mscdex> just... why
11:39 < SomeoneWeird> i know, haha
11:46 < MI6> joyent/node: Ben Noordhuis master * a39f669 : test: move simple/test-http-dns-fail to test/internet  The test times out - http://git.io/joMEIA
11:55 < laughlinez> ?
11:56 < laughlinez> hi -new to freenode/irc and node.js - have a question about udp4
12:00 < gildean> laughlinez: then you need to ask it
12:03 < laughlinez> ok - so, typically when i write a udp server in c, i like to stop multiple instances running on same host, so don't set SO_REUSEADDR socket option, but my node code seems to use this option behind all bind's. Am i doing something wrong, or is this option available to toggle?
12:05 < SomeoneWeird> just set a specific interface to host on ?
12:31 < xk_id> "It's callbacks all the way down!" haha https://github.com/substack/dnode
12:40 < MI6> joyent/node: Fedor Indutny master * 0d7a021 : net: initialize TCPWrap when receiving socket  TCPWrap::Initialize() and  - http://git.io/KOuLJQ
12:41 < jhsto> guys
12:41 < jhsto> whats the most productive color?
12:42 < _ior> itsy bitsy teeny weeny yellow polkadots
12:43 < bnoordhuis> jhsto: provably green
12:44 < jhsto> im trying purple atm
12:44 < lewellyn> black.
12:44 < lewellyn> black is the new black.
12:44 < Industrial> #336699
12:44 < jhsto> ive been using white for a quite long time
12:44 < jhsto> seems to be bad
12:44 < jhsto> really bad
12:45 < Industrial> for what? your code?
12:45 < jhsto> for desktop
12:45 < lewellyn> you see your desktop? :)
12:45 < jhsto> cant get shit done on windows, but on linux i can
12:45 < jhsto> windows desktop
12:45 < lewellyn> i reiterate.
12:46 < Industrial> What's the non jquery way of converting a String of HTML into DOM nodes, then inserting it in the DOM?
12:47 < Industrial> After I insert it into the DOM, can I keep a local reference to update with new html/data, so I don't have to lookup a new reference every time (e.g. $('foo')) ?
12:56 < jvanveen> hey
12:57 < jvanveen> anyone uses bower to install browser components?
12:57 < jvanveen> i wonder if with npm i can run bower and optionally run make files for libs like hogan.js
13:01 < yanivge> Guys, another Socket.io questioon.... I am tring to force socket.io to use flashsocket as the transportation layer. does anyone know how? i notice that setting the transports property (on both side) is not enougth... i also notice a connection on port 10843 (i defined the socket on port 9000)
13:03 < xk_id> what does "node file.js &" do?
13:03 <@Nexxy> xk_id, it runs the node program in the background
13:03 < SomeoneWeird> backgrounds it
13:03 < xk_id> Nexxy: how do I close it?
13:04 < _ior> 1) fg
13:05 < _ior> that will reconnect the controlling terminal to background tasks
13:05 < _ior> or 2) killall node
13:05 < _ior> which does what it says
13:05 <@Nexxy> _ior's method is good
13:05 < xk_id> interesting
13:05 < lewellyn> especially on sysv ;)
13:05 < xk_id> what's the name for "fg"?
13:05 < SomeoneWeird> foreground
13:05 < xk_id> interesting
13:06 < `3rdEden> yanivge: answered in #socket.io where you also spammed the same message..
13:06 < xk_id> thanks very much
13:06 < lewellyn> xk_id: you might want to pick up an introductory book to teach you how to use your system. :)
13:06 <@Nexxy> xk_id, you can also just kill the process by PID
13:06 < _ior> nexxy careful, now you're going to have to explain ps and grep :)
13:06 < lewellyn> there are likely many things you probably want to do, but you don't know that you can :)
13:06 < lewellyn> _ior: pgrep ftw :)
13:06 < xk_id> lewellyn: I suppose you mean unix :)
13:06 < lewellyn> xk_id: i'm assuming you're on linux.
13:06 < lewellyn> otherwise, don't use killall :)
13:06 <@Nexxy> _ior, it returns the pid when you bg it!
13:07 < _ior> lewellyn well wth! learn something new every day. pgrep ftw indeed
13:07 < lewellyn> (well, i guess it's ok on bsd)
13:07 < xk_id> on os x :P
13:07 < lewellyn> osx is a bsd
13:07 < lewellyn> i don't think os x ships pkill anyhow
13:07 < xk_id> I am aware of that
13:07 <@Nexxy> I has a pkill
13:07 < SomeoneWeird> ew osx
13:08 <@Nexxy> SomeoneWeird, easy now
13:08 < Kudos> brew install pkill, tbh
13:08 < SomeoneWeird> Nexxy, :P
13:08 < lewellyn> xk_id: gimme a sec. i have a good book around here for os x...
13:08 < _ior> lewellyn however i dare say that explaining pgrep still requires explaining both ps and grep :)
13:08 <@Nexxy> I have /usr/bin/pkill
13:09 < lewellyn> xk_id: "The Mac OS X Command Line: Unix Under the Hood" by Kirk McElhearn
13:09 < lewellyn> _ior: not really. just handwave the name's origin :)
13:09 < xk_id> ps is very interesting
13:09 < xk_id> lewellyn: thank you
13:10 < lewellyn> xk_id: parts of it are a bit dated now, but it's a very good book.
13:11 < _ior> there's one big warning i can give about developing node on osx: beware the fact that some modules use c bindings and require gcc
13:11 < _ior> and installing CLI gcc on osx is nontrivial
13:11 < xk_id> so far so good
13:11 < xk_id> i thought xcode sorted things out?
13:12 < _ior> cause yeah, screw xcode
13:12 < xk_id> ah
13:12 < xk_id> :)
13:12 < Shinister> xcode installs devel packages
13:12 < lewellyn> _ior: which does vary depending upon your os version.
13:12 < _ior> oh, well, if you're happy to download 2 gigs for gcc, then go ahead
13:12 < _ior> :)
13:12 < Shinister> oh, can you install gcc over homebrew?
13:12 < lewellyn> yes
13:12 < _ior> yeah
13:12 < lewellyn> not the *same* gcc, of course :)
13:13 < Shinister> iirc osx moved to llvm?
13:13 < Shinister> no idea, I mostly just use c9 
13:13 < _ior> i do sometimes wish osx had apt-get :)
13:14 < lewellyn> the newest os x i have around atm is 10.6. no llvm iirc.
13:14 < Shinister> 10.6 was pretty much the best release
13:14 < lewellyn> i run 10.4 on my g4 powerbook
13:14 < lewellyn> my gf's imac is still on 10.5 for some unknown reason.
13:14 < Shinister> snow lep, beore they messed around with exposÃ©
13:14  * lewellyn hates expose
13:15 < lewellyn> always have :/
13:15 < Shinister> my boyfriends laptop still runs 10.6, I should upgrade him
13:15 < Shinister> I love it, with the huge multitouch pad on macbooks it works pretty well
13:15 < Shinister> mission control less so
13:15 < lewellyn> i half wish i could upgrade to 10.7. but nope. if you were an early adopter of intel osx, screw you :/
13:15 <@Nexxy> I like both ;x
13:15 < bnoordhuis> so... are there people using a real OS here?
13:15 < lewellyn> SunOS looking-glass 5.10 Generic_137137-09 sun4u sparc SUNW,UltraAX-i2
13:15  * Shinister rolls his eyes
13:15 < bnoordhuis> ^ that's what i mean
13:15 < Shinister> 'real OS'
13:16 < Shinister> Use what's most productive for you, and don't be elitist about it.
13:16 < xk_id> os x is the best os in the whole world
13:16 < lewellyn> bnoordhuis: i have more real oses too, if you're interested.
13:16 < _ior> what shinister said, but luls at people who think bsd isn't real :)
13:16 < bnoordhuis> os x is probably a nice consumer os
13:17 < xk_id> it's not just better, it's much better
13:17  * xk_id chuckles
13:17 < Shinister> I use Windows professionally, so sue me ;]
13:17 < bnoordhuis> xk_id: os x is an atrocity from the perspective of a systems programmer
13:17 < yuho> fancy seeing you here jesse :)
13:17 < _ior> i have no choice on what os i get to use professionally, since i am not part of the ops/it team
13:17 < _ior> hahaaha hi yuho
13:17 < bnoordhuis> there's a reason apple's kernel people never give talks at conferences
13:17 < _ior> i've also seen kschzt around recently ;)
13:17 < bnoordhuis> they'd get laughed out of the room
13:17 < yuho> haha
13:17 < Shinister> I'm a .net dev 
13:18 < lewellyn> i also have not-a-real-os-on-a-real-device :)
13:18 < lewellyn> QNX BLACKBERRY-19C1 8.0.0 2013/01/09-00:00:02EST OMAP4460_ES1.1_HS_Colt_Rev:06 armle
13:18 < lewellyn> geez. have i had this build for that long? can't wait for the next one in 2 days.
13:18 < bnoordhuis> Shinister: from a kernel perspective, windows > os x by a long shot
13:18 < hipsterslapfight> haha OS fights, how cute
13:18 < bnoordhuis> i'll happily enumerate all the reasons why in excruciating detail
13:18 < Shinister> Depends. As it does for everything.
13:19 < xk_id> what advantages does window's kernel provide over os x? and for whom? and when?
13:19 <@Nexxy> hipsterslapfight, your nickname has never been more relevant!
13:19 < xk_id> i'm honestly ignorant :)
13:19 < bnoordhuis> xk_id: anything regarding i/o really
13:19 < bnoordhuis> or task scheduling
13:20 < bnoordhuis> hmm, i guess that covers 99% of what an OS is for
13:20 <@Nexxy> um
13:20 <@Nexxy> excuse me
13:20 <@Nexxy> you forgot "looking pretty"
13:20 < bnoordhuis> no, that's what the gui is for
13:20 < hipsterslapfight> [citation needed] bnoordhuis :v
13:20 <@Nexxy> lol
13:20 < Sly> NEXXY
13:21 < Sly> <3
13:21 <@Nexxy> SLY! <3
13:21 < Sly> How are you?
13:21 < bnoordhuis> hipsterslapfight: as the primary author of libuv's unix side, i'm citing myself here
13:21 <@Nexxy> fabulous
13:21 <@Nexxy> and yourself?
13:21 < Sly> I'm good.
13:21 < Sly> Shopping for clothes for the cruise. :3
13:21 < hipsterslapfight> bnoordhuis: i don't think wikipedia allows you to cite yourself!
13:21 <@Nexxy> cruisy clothes?
13:22 < bnoordhuis> hipsterslapfight: fwiw, the libuv benchmarks run better in a linux vm running on os x that on os x itself
13:22 < hipsterslapfight> i'm sorry bnoordhuis i was just being facetious :(
13:23 < bnoordhuis> no problem, so was i
13:23 < bnoordhuis> i'm deadly serious about os x though
13:23 <@Nexxy> deadly
13:23 < xk_id> bnoordhuis: haha
13:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:25 < xk_id> bnoordhuis: so, essentially, you're saying I would get snappier performance if I ran linux, correct?
13:26 < bnoordhuis> xk_id: yes, very much so
13:26 < xk_id> what about windows?
13:26 < bnoordhuis> xk_id: depends on what you do. file ops performance isn't great but that's arguably partly the fault of libuv
13:26 < bnoordhuis> but tcp/udp performs well
13:27 < xk_id> better than on os x?
13:27 < bnoordhuis> on identical hardware? yes
13:27 < yuho> apple's apis tend to be on the slow side
13:28 < bnoordhuis> re file ops performance, it's probably worse on os x
13:28 < xk_id> is this something idiosyncratic to libuv?
13:28 < bnoordhuis> we need to serialize all writes because the write() and pwrite() syscalls are not thread-safe on os x :/
13:28 < bnoordhuis> xk_id: what is?
13:29 < xk_id> are you arguing windows generally performs snappier than os x?
13:29 < xk_id> hmm interesting
13:30 < Shinister> I think maybe the different is how most applications are developed 
13:30 < xk_id> I find it interesting to contemplate the difference between the level on which I'm coding, and the level on which you do :) 
13:31 < Shinister> OSX pushes towards ObjC, so it's very low level + efficient. Windows pushes towards the .net framework meaning there's a larger stack below it/virtual machine and managed code
13:31  * Shinister shrugs
13:33 < bnoordhuis> Shinister: the .net vm is awfully clever though
13:33 < bnoordhuis> there's a lot of very bright people working on it
13:33 < Shinister> Yup, my masters was touching a lot on the .net vm
13:33 < Shinister> it's what i work with now
13:43 < jvanveen> hi
13:43 < jvanveen> anyone using bower?
13:44 < jvanveen> i wonder how to use it with most packages, since most dont have dist files included in their git repo
13:44 < jvanveen> like: bower install requirejs
13:44 < jvanveen> then you dont have a minified version available by default
13:44 < jvanveen> most packages dont
13:44 < jvanveen> ...
13:44 < jvanveen> minification should be dont afterwards then i suppose
13:50 < serdem> which issue tracking system are you using guys?
13:53 < Guest__> sooo what is now the defacto standard for sql postgress access nowadays?
13:54 < Guest__> sequalize?
13:54 < _ior> i've been using brianc's pg
13:54 < _ior> but that doesn't actually answer the question you asked
13:55 < Guest__> _ior seems that many people us it, but seems like a lot of work still, isn't there anything which is a bit more orm'y. In the sense that it it can map back object graphs like posts/comments/users etc. 
13:57 < _ior> guest__ i'm afraid i cannot really answer your question, as i'm also realistically on my first node project and am quite new to the community
13:57 < _ior> however, pg fit my needs...
14:13 < jtomasrl> im not sure how to perform an upsert for a nested object. I have a checkins document and i want to update orders of different items, if the item exist, just add an order, if it doesnt, add the item and nest the ordet. this is what i got so far, but i dont see it going to work. https://gist.github.com/4655708
14:18 < brettlangdon> jtomasrl, might be worth asking on #mongodb
14:18 < brettlangdon> but afaik, this is not possible
14:19 < jtomasrl> no one active there, i thnk that too
14:20 < brettlangdon> well, it is 9 am too, have to let the 10genians get some coffee first
14:21 < Pilate> please, as annoying as they are with soliciting, i wouldnt hold back
14:32 < superjoe> haha
14:39 < ralphtheninja> -n
14:39 < ralphtheninja> ups
15:15 < jtomasrl> when using child process for a cpu intensive operation, that process is forked for every user?
15:16 < baudehlo> it's forked every time you call spawn/fork/exec
15:16 < jtomasrl> ok
15:37 < cloudbender> Mornin'
15:40 < isaacbw> I'm kind of new to the enterprise linux world. What does red hat offer that centos doesn't? Is it mostly a matter of support?
15:41 < superjoe> isaacbw, sounds like a question for ##linux
15:42 < boutell> yeah this is not really the channel for that question (:
15:45 <@Nexxy> isaacbw, pretty much just branding + support
15:45 <@Nexxy> although I've found plenty of RHEL stuff in CentOS packages
15:48 < lewellyn> rhel also offers non-public repos which have software that is otherwise a pain to get up-to-date versions of
15:49 < isaacbw> okay, cool
15:49 < isaacbw> thanks
15:56 < ezekielnoob> hi!
15:59 < daslicht> is therer something compareable to derbyjs but with a allive community ?
16:01 < bodisiw> daslicht, meteor?
16:02 < isaacbw> you're really opening a can of worms with those sorts of frameworks though
16:02 < bodisiw> agree
16:02 < daslicht> i dont want meteor
16:02 < daslicht> i dont care about frameworks
16:02 < isaacbw> huh
16:03 < daslicht> i just like to create a singlepage app which is fully indexable by search engines
16:03 < daslicht> how would you approach this
16:03 < daslicht> i prefer serverside rendering combined bith client side rendering
16:04 < bodisiw> daslicht, https://www.google.com/webmasters/tools/home?hl=en
16:04 < daslicht> but to approach this it would be from advatange to be able to share code between teh server and client 
16:04 < daslicht> I dont waht to create html snapshots
16:04 < daslicht> id rather offe a server side rendered fallback
16:05 < isaacbw> doing that is non-trivial
16:05 < daslicht> i know
16:05 < isaacbw> one technique is to render the app with phantomjs when a crawler asks for it
16:05 < daslicht> yeah 
16:05 < daslicht> but i prefer the other side :)
16:06 < isaacbw> what are you talking about
16:06 < daslicht> I heard that meteor is also introducing ss rendering due to the poor performance of phantomjs
16:06 < isaacbw> what are you using for your frontend?
16:06 < daslicht> anything possible
16:07 < daslicht> I am currently evaluating possibilities
16:07 < daslicht> >one technique is to render the app with phantomjs when a crawler asks for it
16:07 < isaacbw> so you want something that lets you write code once and use it for rendering both on the client and the server
16:07 < daslicht> I mean i prefer to render client side and offer a server side rendering fallback]
16:07 < isaacbw> you're searching for a holy grail and it doesn't exist
16:07 < daslicht> derbyjs does exactly this
16:08 < Aikar> substack: are you into minecraft? (per voxel.js :P)
16:08 < isaacbw> then use derbyjs
16:09 < isaacbw> http://www.youtube.com/watch?v=iB7hfvqyZpg
16:09 < isaacbw> I was at this meetup ^^
16:09 < isaacbw> the team from HBO talks about server-side rendering of angularjs apps
16:09 < jd823592> Hello, i have a https server with a request handler and i need to get the exact uri that has been requested to perform routing and stuff. but req.url does not contain hash part nor does it contain host part. can i get it simply from one field or do i need to put it together? where can i read the hash part?
16:10 < isaacbw> as long as you're caching properly, the performance won't be a huge concern
16:10 < daslicht> http://canjs.us/#why_canjs
16:11 < daslicht> i have a look on that angular video
16:12 < jd823592> my bad i know its stupid question
16:13 < isaacbw> wow
16:17 < Scrat> best way to escape shell arguments? besides using escapeshellargs from phpjs. even child process spawn() is vulnerable to shell injection
16:18 < isaacbw> you don't?
16:18 < isaacbw> if you're saying that you want to execute user input in the shell, don't do that
16:18 < SomeoneWeird> yeah, wtf are you doing
16:18 < Scrat> hey SomeoneWeird
16:18 < Scrat> it's simple: request doesn't support gzip
16:18 < Scrat> so I have to use curl
16:19 < SomeoneWeird> don't use request then
16:19 < Scrat> (some servers will send gzip even if you don't request it)
16:19 < ezekielnoob> hi, i have a system build on Yii Framework (PHP), i actually wanted to add a live notification system but php is not capable of that. is there a library for nodejs where i could just call to send notifications to users?
16:21 < isaacbw> http://nodejs.org/docs/v0.6.0/api/zlib.html#examples
16:21 < isaacbw> wow, how did I get that link
16:21 < isaacbw> that's old
16:21 < andrew12> haha
16:22 < isaacbw> http://nodejs.org/api/zlib.html
16:23 < andrew12> Scrat: child_process.spawn doesn't ever call a shell
16:23 < andrew12> http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
16:24 < Scrat> andrew12: but if you send for example a space in your arguments it will break
16:25 < andrew12> wrong
16:25 < Scrat> isaacs, SomeoneWeird: yeah ill probably use http with zlib
16:25 < andrew12> you call spawn with the command and the arguments as an array
16:25 < andrew12> which can have spaces
16:25 < isaacbw> but if you wanted to do something crazy with the shell, you could probably have an array of approved commands
16:26 < andrew12> so spawn('ls', ['-R', '/home/andrew/folder with spaces'], â€¦); e.g. will work
16:26 < andrew12> yeah I don't really understand exactly what Scrat is trying to do
16:26 < Scrat> andre12: I was going off this: http://stackoverflow.com/questions/10941545/nodejs-child-process-spawn-does-not-work-when-one-of-the-args-has-a-space-in-it
16:27 < andrew12> most of that looks like it's false
16:27 < andrew12> actually all of it
16:28 < Scrat> it's moot anyway. I'll be using http with zlib
16:28 < draginx> Anyone here use naught https://github.com/indabamusic/naught ?
16:28 < andrew12> kk
16:28 < bnoordhuis> Scrat: maybe that guy is thinking of exec()?
16:28 < andrew12> bnoordhuis: even then it's weird
16:28 < andrew12> because exec is called like
16:29 < isaacbw> bologna
16:29 < superjoe> draginx, need some help?
16:29 < andrew12> exec('ls -R "/home/andrew/folder with spaces", â€¦);
16:29 < andrew12> I missed a '
16:29 < andrew12> exec runs in a shell
16:29 < andrew12> so you would have to escape or quote things
16:30 < draginx> superjoe: hey :) So I'm planning on using systemd for deploying my nodejs application and everytime i use git deploy, I want to checkout to  adirectory and run 'naught deploy' (to update obviously) now the problem is.. I need a way to do somehting like naught start app.js --force or something like that to override despite the fact that there's a naught.ipc file
16:30 < isaacbw> git deployment
16:30 < draginx> Let's just say something kills naught.. I want systemd to be like "Oh shi oh shi oh shi, let me start it back up!" but if i use naught start app.js then the nauight.ipc file still exists
16:30 < isaacbw> you cray
16:30 < draginx> isaacbw: just to checkout :)
16:31 < superjoe> draginx, if you really want to force it, you can delete that file yourself
16:31 < superjoe> at your own peril
16:32 < draginx> hmm
16:32 < superjoe> but you really should be shutting it down with the shutdown command
16:32 < isaacbw> I don't know about naught, but could you run a cron process?
16:32 < isaacbw> to check up on things
16:32 < draginx> superjoe: so I guess i just run naught stop && naught start every time right? :)
16:32 < draginx> isaacbw: this is what systemd will be doing esssentially
16:32 < isaacbw> oh wait I'm retarded
16:32 < draginx> isaacbw: http://en.wikipedia.org/wiki/Systemd
16:32 < superjoe> draginx, sure, you could do that, but then you wouldn't be taking advantage of zero downtime deployment
16:32 < isaacbw> yea, I use systemd :/
16:32 < isaacbw> that's why I'm retarded
16:33 < draginx> superjoe: well deployment woul dbe downtime my problem is when naught is *already* down
16:33 < draginx> would be zero downtime*
16:34 < superjoe> draginx, I see. well that's really bad if naught is crashing
16:34 < superjoe> is it?
16:34 < isaacbw> if you really want zero downtime, you can have a staging server 
16:34 < draginx> superjoe: would it be just safe to do naught deploy then? would deploy even go if theres no naught.ipc file?
16:34 < draginx> superjoe: correct
16:34 < isaacbw> yay VPS
16:34 < superjoe> draginx, can you file an issue?
16:34 < draginx> but in the world of computers u cant.. just say "Oh this'll neveer go down!" :P
16:34 < isaacbw> load balancers
16:34 < draginx> superjoe: for a --force option? O_o or just describing this issue
16:34 < isaacbw> god dammnnnn
16:34 < isaacbw> do I need more coffee or less
16:35 < draginx> isaacbw: adderall :P
16:35 < niix> Is there a work around to not have to type sudo for each npm install I do?
16:35 < draginx> the new coffee for programmers ;)
16:35 < superjoe> draginx, sorry, I misunderstood. it sounded to me like you were saying that you have ever seen naught crash at all ever
16:35 < isaacbw> draginx, I could get a prescription pretty easily
16:35 < draginx> superjoe: sorry! It's a hypothetical
16:35 < isaacbw> I'd rather not though :(
16:36 < isaacbw> did you guys hear about the rich guy turned homeless?
16:36 < draginx> systemd = initial bootup, git checkout would nauight deploy
16:36 < draginx> which I guess covers everything
16:36 < isaacbw> kind of a scary prospect
16:36 < draginx> cause systemd would only run on bootup and when naught crashes
16:36 < isaacbw> he was scammed for over 2.5 mil
16:36 < superjoe> draginx, ok, gotcha. if you want a super safeguard situation, then you should be able to do the stop and then start thing
16:36 < draginx> superjoe: thanks mate :)
16:36 < superjoe> draginx, the only thing I don't remember, is what return code stop returns if the server is already not running
16:37 < superjoe> may or may not have to do ; instead of &&
16:37 < draginx> right
16:37 < draginx> ok thanks :)
16:37 < superjoe> np have fun
16:38 < draginx> hows ur site doing btw? is it putting naught ot the test? :D
16:38 < superjoe> sure is
16:38 < superjoe> we have 3 production servers running it 24-7
16:38 < superjoe> deployment down to 5 seconds
16:38 < superjoe> :)
16:39 < draginx> nice! :D all 3 http servers? O-o
16:40 < draginx> well deployment down to 5 seconds in how many months? :D or is it each deployment?
16:40 < superjoe> err, when we deploy, it only takes 5 seconds
16:40 < draginx> ah nice
16:41 < superjoe> draginx, maybe you would like this project: https://github.com/indabamusic/rodent
16:41 < isaacbw> superjoe, what's the site?
16:41 < superjoe> isaacbw, https://beta.indabamusic.com/
16:41 < draginx> superjoe: oh crap nice! thanks :)
16:42 < superjoe> isaacbw, we're still in the middle of a transition from a legacy rails 2.3.8 system
16:42 < isaacbw> oh, cool
16:42 < superjoe> hence the "beta"
16:42 < durango> superjoe: whats the difference between rodent and setting up git manually?
16:42 < isaacbw> so it's a music competition sort of thing?
16:42 < durango> like gi tremote add, git push etc.
16:42 < superjoe> isaacbw, yes
16:42 < durango> or is it just an easier way of doing things? :)
16:43 < isaacbw> you could use a "what is this site" page
16:43 < superjoe> isaacbw, agreed.
16:43 < superjoe> isaacbw, real home page is indabamusic.com  - but BE WARNED. rails app
16:43 < MI6> joyent/node: isaacs master * e26622b : stream: Correct Transform class backpressure  The refactor in b43e544140c - http://git.io/kjgB7A
16:43 < superjoe> node.js devs might melt to touch it
16:44 < isaacbw> oohh okay
16:44 < isaacbw> very cool
16:44 < isaacbw> how did you manage to justify a rewrite
16:45 < durango> oh crap i think im compilong ndoejs 0.8.18 on the same system twice xD
16:45 < superjoe> oh man, you have no idea how bad this legacy code is
16:45 < isaacbw> :P
16:45 < superjoe> durango, I'm not sure what you mean by "setting up git manually"
16:45 < durango> superjoe: my company is about to relaunch their site in rails.. any thoughts on it?
16:45 < durango> superjoe: just doing git remote add .. and git push
16:46 < superjoe> durango, rodent will do that for multiple destinations, and then run the deploy command for you, with the correct environment variables set up. that's about it.
16:46 < durango> ahhhh awesome :) thanks
16:46 < superjoe> durango, relaunch in rails, coming from what old system?
16:46 < durango> php :)
16:46 < durango> So *anything* is better hahahah but seriously >.>
16:47 < SomeoneWeird> lol
16:47 < niix> I think I have coders amnesia
16:48 < SomeoneWeird> woah jquery site changed massively
16:48 < superjoe> durango, I would welcome going from php to rails
16:48 < niix> SomeoneWeird: about a month ago now I think
16:48 < superjoe> almost as much as I would welcome going from rails to node.js ;)
16:48 < SomeoneWeird> yeah, havn't been onto it for a while
16:48 < durango> superjoe: oh definitely :) But I also develop in nodejs ;)
16:48 < durango> superjoe: u dont think nodejs takes 3x the amount of programming to develop the same thing?
16:48 < SomeoneWeird> no ?
16:49 < durango> And is nodejs really made for web applications that rails fits for? NodeJS to me seems mor elike fo rnetworking, sockets, etc.
16:49 < durango> SomeoneWeird: was just curious, some people reported that it takes them way longer
16:49 < niix> I'd much rather write a web app in Node than Rails
16:49 < superjoe> durango, no I don't think it does
16:49 < niix> any day
16:49 < durango> niix: whys that?
16:49 < SomeoneWeird> i do /all/ my coding in node, now
16:49 < niix> durango: too much magic
16:49 < durango> superjoe: interesting..
16:49 < durango> SomeoneWeird: really? U have *no* other use for anything else?
16:49 < SomeoneWeird> nope
16:49 < SomeoneWeird> node can do everything
16:49 < durango> even CPU intensive tasks?
16:50 < durango> we have to deal with a lot of image manipulation work
16:50 < SomeoneWeird> well for lke the 1 time i've had todo that I wrote a native module
16:50 < durango> which is pretty CPU intensive
16:50 < foobar321> Hi. Is there any JSON-like file format that will support include? I think this is best format data for my application but I would like to use includes within my configuration options
16:50 < niix> any app idea I've had, I've been able to do it in node with ease
16:50 < durango> foobar321: what do u mean by include?
16:50 < niix> also full-stack js is nice heh
16:50 < superjoe> durango, sounds like a job for a different process!
16:51 < foobar321> durango: That means that at wh;atever section I want I can include other file
16:51 < superjoe> or a media processing server such as https://github.com/superjoe30/mediablast
16:51 < durango> superjoe: yeah thats what I currently do :) Use graphicsmagick thats listening with redis using kue
16:51 < isaacbw> foobar321, json is just a format for structuring data
16:51 < isaacbw> you can create your own include
16:51 < durango> and I just queue it up (would love ot use something like gearman but jue works well for my needs)
16:51 < foobar321> Yes but how to create it nicely with JSON
16:51 < durango> foobar321: yeah u can just module.export = theJsonVar;
16:51 < foobar321> No. I don't mean inside code
16:51 < isaacbw> it's completely up to you foobar321 
16:52 < hipsterslapfight> not inside code? IRL?
16:52 < isaacbw> you could say that whenever a key is "$include", then load the contents of the value
16:52 < foobar321> I want sth like JSON.parse('{ here: 'is my configuration', foo: include ('other.cfg') }');
16:52 < isaacbw> so {"$include": "data.json"}
16:52 < durango> hipsterslapfight: hahah
16:52 < isaacbw> no
16:52 < isaacbw> that's not valid JSON
16:53 < foobar321> yeah that concerns me
16:53 < isaacbw> http://www.json.org/
16:53 <@Nexxy> foobar321, what you're asking for is called javascript
16:53 < foobar321> issacbw: but the way you provided I will have to escape $
16:53 < isaacbw> why
16:53 < isaacbw> oh, I guess
16:53 < isaacbw> yea, just make it a module
16:53 < decci> Hi
16:54 < foobar321> because this gives $ sometimes special meaning
16:54 < isaacbw> module.exports = { foo: require('other.js') }
16:54 < durango> whats full stack js?
16:54 < foobar321> Nexxy: yup, almost. But not entirely
16:54 < isaacbw> you can't do it with JSON, end of story
16:54 <@Nexxy> foobar321, just use require
16:54 < niix> durango: node
16:55 < foobar321> isaccbw: Yeah, that's why I came here. I'm looking for inspiration :)
16:55 < Hirzu> hi, do you have good debugging tools to recommend for nodejs?
16:55 < isaacbw> http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
16:55 < isaacbw> what are you trying to accomplish, foobar321 
16:55 <@Nexxy> foobar321, { "key1" : "some data", "key2" : require('some.json') }
16:55 < isaacbw> Hirzu, nodejs has a built-in debugger
16:55 < niix> Hirzu: there is one built in http://nodejs.org/api/debugger.html
16:56 < decci> I was following http://spiritconsulting.com.ar/fedex/2010/11/how-to-install-nodejs-express-socket-io/
16:56 < decci> I am facing the below error:[root@aeq ~]# npm install socket.io npm ERR! error installing socket.io@1.0.0 Error: version not found: 1.0.0 et.io-client/1.0.0 npm ERR! error installing socket.io@1.0.0     at Request._callback (/usr/lib/node_modules/npm/lib/utils/npm-registry-client/request.js:180:12)
16:56 < Hirzu> and that is the best there is?
16:56 < isaacbw> pretty much
16:56 < Hirzu> does it work with coffee?
16:56 <@Nexxy> Hirzu, look @ node-inspector + v8-profiler
16:57 < niix> decci: use sudo
16:57 < niix> decci: sudo npm install socket.io
16:57 < Hirzu> I'm pretty new with Node and looking for decent toolset
16:58 < decci> niix: I am root user
16:58 < niix> oic
16:58 < isaacbw> Hirzu, trying to use coffee might be more trouble than it's worth
16:58 < decci> niix: what does the error message says?
16:59 < decci> niix: I updated tar version too
16:59 < Hirzu> not really my decision here :)
16:59 < foobar321> Is there any new linux distribution based on Javascript? With Javascript package manager and so on? Basically this the only thing that  differentiate linux distros. So I'm waiting for some Javascript-based.
17:00 < decci> niix: One question where do i need to run npm install socket.io
17:00 < decci> niix: I am just running it in /root folder
17:00 < Hirzu> I just got this pile of code I should try to make work. Coffee actually makes the callback-inferno a little more tolerable :)
17:00 < crabtree> foobar321: firefox os may be interesting to you
17:00 < crabtree> although it is on mobile
17:00 < crabtree> afaik
17:00 < foobar321> crabtree: thnx, I'll take a look
17:01 < isaacbw> a javascript based distro...
17:01 < isaacbw> insanity
17:02 < foobar321> isaacbw: Yeah, the include feature will be nice to manage packets there, right?
17:02 < isaacbw> what do you mean
17:03 < foobar321> That you can create a package and inherit from different one ore include part of the other inside your own .json file
17:04 < isaacbw> not really
17:04 < isaacbw> dependencies are usually referenced by name
17:04 < isaacbw> look at npm
17:04 < isaacbw> https://npmjs.org/doc/json.html
17:08 < foobar321> crabtree: Where to get more information about Javascript inside Firefox OS?
17:08 < zomg> Probably from MDN
17:08 < crabtree> yeah
17:09 < crabtree> ik all the core apps are all in javascript
17:10 < foobar321> crabtree: Ok, I've found some manifest https://developer.mozilla.org/en-US/docs/Apps/Manifest
17:10 < isaacbw> man, npm is so full of vaporware
17:11 < SomeoneWeird> correct
17:12 < SomeoneWeird> foobar321, go google boot2gecko
17:13 < SomeoneWeird> https://wiki.mozilla.org/B2G
17:13 < MI6> joyent/node: isaacs master * 4c78a52 : net: Initialize _connection, _handle in Socket ctor  The better to reduce (+1 more commits) - http://git.io/uMEeXw
17:14 < WeeJeWel> hey guys. Is there a way to do something before i quit a node.js process (ctrl+c, close the window etc) ?
17:14 < jacksmithz> are there any decent e-commerce platforms or shopping carts for node.js?
17:15 < SomeoneWeird> WeeJeWel, process.on("SIGINT", function() { dostuff(); process.exit() });
17:15 < SomeoneWeird> will only work for ctrlc though
17:15 < isaacbw> or on('exit'
17:16 < WeeJeWel> ok thx. doesn't seem to work on windows tho
17:16 < foobar321> process.on('exit', function(){ ... });
17:16 < strk> what should http.server do when the number of connections goes above the limit passed to .listen as "backlog" ?
17:17 < strk> what's supposed to happen ?
17:17 < foobar321> WeeJeWel: try on exit
17:17 < foobar321> strk: http server will not know about such situation. This is handled by kernel and most probably those connection will be dropped without notification to application layer
17:18 < foobar321> strk: but it's always worth checking :)
17:19 < strk> that'd be pretty hard for code to handle
17:19 < strk> any way out would then be using timeouts
17:19 < strk> uhm, but maybe .listen would just never fire the callback, and then there's nothing really to be concerned about
17:21 < WeeJeWel> foobar321: on('exit') didn't work.. :(
17:21 < foobar321> WeeJeWel: switch to linux? :/
17:21 < WeeJeWel> I was testing that on OSX
17:22 < foobar321> Doh. Youre right. It handles only Ctrl+C . With Ctrl + \ it performs just core dump
17:23 < foobar321> WeejeWet: so the other way will be forking yourself and catching SIGCHILD
17:23 < WeeJeWel> Tried both ctrl + c and ctrl + \, both didn't work
17:23 < WeeJeWel> hehe
17:23 < WeeJeWel> ok
17:30 < FunnyLookinHat> Do most of you guys define your export classes with Class.prototype.whatever or with a Class = function() { return this; }
17:31 < isaacbw> what
17:31 < SomeoneWeird> module.exports = Class;
17:32 < brianc> module.exports = Class
17:32 < SomeoneWeird> >.>
17:33 < MI6> joyent/node: Fedor Indutny master * c13354e : child_process: move binding init in constructor  Doing this in net.Socket - http://git.io/oTV8Bw
17:33 < FunnyLookinHat> i.e. https://gist.github.com/4657409
17:33 < SomeoneWeird> what?
17:33 < FunnyLookinHat> There are two files in there - one for each class definition style.
17:34 < Kakera> personally I find this style terrible
17:34 < therealkoopa> Has anyone used mikeal's request api with the phantomjs server? I've used request a lot, but for some reason the silly phantomjs server (which is garbage I think) isn't receiving the post body. If I use the http-console from the command line nad pass values, the phantomjs server reads them
17:35 < FunnyLookinHat> Kakera, which one?  The first?
17:35 < FunnyLookinHat> Kakera, I do too - that's why I re-wrote it...  :)
17:35 < Kakera> wrapping the whole thing in a self-calling function
17:36 < FunnyLookinHat> Adding this (function(exports) { and following it with })(typeof global === "undefined" ? window : exports); allows me to do exports.Class = Class; and have it work both in Browser and NodeJS
17:36 < mscdex> FunnyLookinHat: i use Foo.prototype.bar
17:37 < FunnyLookinHat> mscdex, For all classes?   My hang up is that it feels clunky when I'm defining a "server" class that will be loaded by app.js to control a bunch of socket.io interaction and whatnot
17:38 < isaacbw> this 'baby powder' incense smells like baby powder
17:39 < mscdex> FunnyLookinHat: why does it feel "clunky"?
17:39 < FunnyLookinHat> mscdex, No public/private class structure, etc.
17:39 < FunnyLookinHat> I can get over it - 
17:39 < FunnyLookinHat> As long as I know that's what most everyone else is doing.
17:39 < isaacbw> that's javascript
17:39 < mscdex> well that's just a js issue
17:39 < mscdex> using a prototype just means you can share the function code among all instances
17:40 < mscdex> otherwise each instance gets a new copy
17:40 < Kakera> just prepend an underscore to your "private" members
17:40 < FunnyLookinHat> Yeah - and it hogs the heck out of mem
17:40 < isaacbw> what
17:40 < mscdex> yeah using a prepended underscore is the most common way of denoting private members
17:40 < mscdex> at least in the node community
17:41 < isaacbw> javascript is very "hack-friendly" anyway
17:41 < isaacbw> so if you know what you're doing and want to use "private" members, do whatever the hell you want
17:41 < isaacbw> just don't expect it to be documented or keep working after an update
17:42 < FunnyLookinHat> hahaha
17:43 < isaacbw> I mean when using other modules
17:43 < ezekielnoob> is live notifications easy with nodejs?
17:43 < ezekielnoob> cause i have my site running on php
17:44 < isaacbw> what do you mean by live notifications
17:44 < ezekielnoob> something like facebook
17:44 < ezekielnoob> on facebook
17:44 < ezekielnoob> but i think facebook uses XMPP
17:44 < isaacbw> I still don't know what you mean
17:44 < isaacbw> "like facebook"
17:44 < ezekielnoob> like the live notifications of facebook
17:45 < isaacbw> ajax?
17:45 < ryanrolds_w> I'm pedantic, when npm starts a sentence, NPM, Npm, or npm?
17:45 < brianc> ezekielnoob: depending on what you're doing generally "live notification" (i.e. the server notifies the client of something) is a pretty good fit for node
17:46 < brianc> ezekielnoob: you can either "poll" the server or you can use web sockets.  Node works well in both cases
17:46 < isaacbw> I'm being pedantic too
17:46 < isaacbw> I know exactly what ezekielnoob is talking about :/
17:46 < ezekielnoob> uhm
17:46 < ezekielnoob> what's the best for me?
17:46 < ezekielnoob> i'm hoping for easy integration for a php system
17:46 < brianc> ezekielnoob: depends on what you're doing and how "instant" you need the notifications
17:47 < brianc> ezekielnoob: polling works in a lot of the cases & you can do polling with your current php setup
17:47 < isaacbw> node is an alternative to php
17:47 < isaacbw> you can't mix them very easily
17:47 < brianc> ezekielnoob: no need to even use node.  and yeah like isaacbw said it's kinda difficult (though not impossible) to have a system using both php and node
17:47 < listochkin> ryanrolds_w: I'm pedantic, too. My take: Use Npm, however, if you need to distinguish between npm and something named Npm, than use lowercase by all means
17:47 < ezekielnoob> hmmm
17:47 < ezekielnoob> polling then
17:48 < ezekielnoob> but isn't querying the server for an interval of time to check if there are messages kinda heavy and innefficient?
17:48 < brianc> ezekielnoob: yeah you can use polling with php no problem. just fire an ajax request for updates every 'n' seconds
17:49 < ryanrolds_w> listochkin, Thanks. I was leaning on Npm, but only because npm looks wrong at the start of sentence and this is for marketing.
17:49 < brianc> ezekielnoob: yeah it is - hence websockets.  really though unless you're doing something at extremely high-scale you should be totally fine.  I'm pretty sure twitter uses 'polling' to tell you about new tweets...and they've got a pretty large user base. :)
17:49 < ezekielnoob> hmm
17:49 < isaacbw> ryanrolds_w, you could use the full name
17:49 < ezekielnoob> i got like 200 concurrent clients
17:49 < isaacbw> say Node Package Manager (npm)
17:49 < ryanrolds_w> isaacbw, Good point
17:49 < Kakera> but npm doesn't stand for Node Package Manager
17:50 < isaacbw> what
17:50 < ezekielnoob> so i could just make a fake "live notification" thing?
17:50 < pringlescan> What
17:50 < isaacbw> oh
17:50 < ryanrolds_w> yeah, what?
17:50 < ezekielnoob> not really server sent
17:50 < isaacbw> Node Packaged Modules
17:50 < ezekielnoob> thanks for the advice :)
17:50 < brianc> ezekielnoob: yeah absolutely go that way - by far the easiest route in your situation
17:50 < ryanrolds_w> https://npmjs.org/doc/
17:50 < pringlescan> What's a good flow control library for things like "I need to connect to three databases before I can start accepting requests?" 
17:50 < ryanrolds_w> "node package manager"
17:50 < brianc> pringlescan: async
17:51 < isaacbw> man, I was starting to question my sanity
17:51 < isaacbw> which I do regularly anyway
17:51 < holzp> async, always
17:51 < Kakera> Is it 'npm' or 'NPM' or 'Npm'?
17:51 < Kakera> npm should never be capitalized unless it is being displayed in a location that is customarily all-caps (such as the title of man pages.)
17:51 < Kakera> https://npmjs.org/doc/faq.html
17:51 < ryanrolds_w> async is my favorite. 
17:51 < isaacbw> yea, I say keep it lower caps
17:51 < squeakytoy> look at this example, this is a bit strange isnt? var users = nStore.new('data/users.db', function () { // It's loaded now });
17:52 < isaacbw> but make it bold if it's going to be at the beginning of a sentence
17:52 < Kakera> https://twitter.com/npmjs/status/105690425242820608
17:53 < listochkin> Kakera: good point. By the way that's a single sentence starting with lowercase 'n'. I guess it should be 'npm' anywhere then.
17:53 < ryanrolds_w> I'm going to go with "Node Package Manager (npm)", even if it goes against some troll tweets by @npmjs
17:53 < listochkin> ryanrolds_w: good idea
17:53 < Kakera> npm is a node package manager, but it doesn't stand for "node package manager"
17:53 < pringlescan> Thanks guys, async is what I used before, I couldn't rememebr.
17:53 < ryanrolds_w> ah
17:54 < pringlescan> *remember
17:54 < isaacbw> I think it's a crack on php
17:54 < isaacbw> PHP: Hypertext Preprocessor
17:54 < aandy> php, for people who still say hypertext and hyperlink
17:54 < isaacbw> hah, this is hilarious
17:54 < pringlescan> I'm using supervisord to keep node running and when I push changes to git it restarts node automatically. I know there was an all in one solution, but is that a bad way of doing it?
17:55 < isaacbw> there's a short essay in the npm faqs about what it stands for
17:55 < Kakera> https://npmjs.org/doc/faq.html ctrl+f "acronym"
17:55 < isaacbw> "NPM",  however,  is  an  acronym (more precisely, a capitonym) for the
17:55 < isaacbw>        National Association of Pastoral Musicians.  You can learn  more  about
17:55 < isaacbw>        them at http://npm.org/.
17:55 < ezekielnoob> are 200 concurrent users considered big?
17:55 < ezekielnoob> about the notifications that i asked
17:55 < isaacbw> not small
17:56 < brianc> ezekielnoob: not big either
17:57 < isaacbw> it really depends on how much data is being sent and how big your server is
17:57 < ezekielnoob> what a relief :D
17:58 < crabtree> 'It is a recursive bacronymic abbreviation for "npm is not an acronym".'
17:58 < crabtree> :P
17:58 < ezekielnoob> so i don't have to create a live program for the notification then
17:58 < isaacbw> a live program?
17:58 < pringlescan> If anyone is building anything for the enterprise, expect 30-40% of users to be on IE7/8 if it has to do with government or big businessâ€¦ don't go by the Wikipedia stats
17:59 < crabtree> npm has a respectable website
18:00 < crabtree> clear text, simple, good contrast
18:00 < crabtree> +1
18:02 < isaacbw> woo, clever coffee maker just arrived in the mail
18:20 < isaacbw> man, I wonder how many memcached servers are unknowingly accessible by the public
18:24 < aandy> about as many as * servers with all_open ports in firewalls, or almost any on LAN?
18:25 < aandy> or as many which purposely listen on an external ip, take your pick
18:26 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:31 < isaacbw> http://www.phonearena.com/news/Google-surpasses-Twitter-to-take-number-2-social-network-after-Facebook_id39150?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+phonearena%2FySoL+%28Phone+Arena+-+Latest+News%29
18:31 < isaacbw> only because they've basically forced users of all of their services to be on google+
18:31 < aandy> smooth link 
18:32 < isaacbw> someone needs a lesson in rest
18:32 < isaacbw> I guess that's all analytics stuff
18:32 < aandy> i wonder if youtube and g+ are mutually exclusive in those statistics
18:33 < isaacbw> youtube is trying to tie really closely to g+
18:33 < isaacbw> with all the real name bullshit
18:33 < aandy> bro, google owns youtube
18:33 < isaacbw> youtube has gone steadily downhill as they try to improve things
18:33 < isaacbw> hah, I know
18:33 < aandy> :p
18:33 < aandy> my only take-away from that graph was that g+ is huge, but none of my friends/family are on it
18:34 < timeturne> The best feature about youtube is their "related videos"
18:34 < timeturne> That's about the only thing that I use
18:34 < therealkoopa> If I have a response stream (using request) that contains a string that's a base64 encoded image, can it be piped to a file, or do I need to throw it into a buffer first?
18:34 < isaacbw> I just stopped watching my subscriptions cold turkey when they updated it so you couldn't remove videos from the stream
18:34 < aandy> timeturne: i've found they're much worse than 1-2 years ago. i get completely irrelevant related videos
18:34 < ezekielnoob> http://code.google.com/p/phpwebsocket/ maybe this would be better than just the regular SSE
18:34 < isaacbw> I need to be able to mark off what I'ev watched
18:34 < isaacbw> I barely go to youtube now
18:35 < timeturne> aandy: yeah it's definitely gotten worse in that aspect
18:35 < aandy> their playlist feature is horribly bad UX also
18:35 < aandy> if you need related, for music, go by tubalr.com or something
18:35 < unomi> I mostly use youtube for finding music tbh
18:36 < aandy> same tech as spotify (echonest)
18:36 < unomi> and agree 100% that their playlist UI is horrible
18:36 < isaacbw> I used to like watching all the videos on certain channels but they made that nearly impossible
18:36 < isaacbw> I used youtube like hulu
18:36 < tombuchok> should we expect a module to be faster than a child process? we are about embark on building a module with some c code as we're finding `exec`ing our binary with a child process is running much slower -- we're doing some SSL decryption, happy to explain further -- but doing all the work without knowing how much more performance we'll get seems a bit dicey. thoughts?
18:36 < timeturne> I'm glad I wrote one line of javascript to center the entire site
18:36 < timeturne> It made me go nuts after the first week of usng their new interface
18:36 < unomi> how many pages do you need to load through just to remove a vid from a playlist that you are listening to.. horrendous 
18:37 < isaacbw> tombuchok, pulling in C libraries will be faster than starting a new process
18:37 < timeturne> Everything on the left
18:37 < tombuchok> isaacbw: thanks. that's helpful.
18:37 < isaacbw> at least at the start
18:37 < FunnyLookinHat> Is there a way to have something use a C module, and a JS fallback automatically ?
18:37 < isaacbw> starting the external process will be slower, but then it will probably be faster once it's going
18:38 < isaacbw> so it's a question of whether you are starting the external process a lot
18:38 < isaacbw> you can consider communicating with it via stdio
18:38 < superjoe> a module can be faster in that case as well, provided it uses threads
18:38 < isaacbw> mm
18:39 < isaacbw> yea
18:39 < isaacbw> I like that
18:39 < tombuchok> isaacbw: we would be going out to a lot, we're aiming for performance in the range of 1000x / sec.
18:39 < isaacbw> 'going out to a lot'
18:39 < tombuchok> sorry, we're testing our perf at 1,000 / sec.
18:40 < isaacbw> no, what superjoe said was smart
18:40 < isaacbw> a module will probably be the best thing to do
18:41 < superjoe> you can also have a pool of external processes and communicate to the master
18:41 < superjoe> to avoid the overhead of starting new ones
18:43 < tombuchok> superjoe: sorry this might sound totally ignorant -- 'provided it uses threads' -- i.e., create a native module *and* run it in its own domain/process ?
18:44 < superjoe> a native module which internally uses threads but provides a message based API
18:44 < isaacbw> in the C library, you would do the calculations in a new thread and use the main thread for communicating with v8
18:45 < superjoe> exactly
18:45 < isaacbw> you keep blowing my mind with good ideas superjoe 
18:45 < isaacbw> do you have a blog?
18:45 < superjoe> yes: http://andrewkelley.me/
18:45 < superjoe> it has 0 articles
18:45 < isaacbw> heh
18:47 < tombuchok> seconding @isaacbw's praise, thx for the quick input superjoe 
18:47 < superjoe> aw you guys.
18:48 < azylman> My hero!
18:48 < tombuchok> alright, we'll dig into building this out and will keep you posted.
18:48 < tombuchok> isaacbw, superjoe: best way to follow-up with you guys in here? else?
18:49 < isaacbw> irc
18:50 < superjoe> tombuchok, you found this right? http://nodejs.org/docs/latest/api/addons.html
18:51 < superjoe> there are usually knowledgeable people in here who can help with the native stuff
18:53 < isaacbw> holy shit, this clever coffee dripper makes amazing coffee
18:54 < tombuchok> will definitely need it. thx again so much for the speed; felt like such a nebulous question -- i even led with an apology !!
18:54 < isaacbw> don't do that!
18:54 < tombuchok> superjoe: ha, we were going to start out with a hello world. add-ons api link helpful^n
18:56 < segomos> anyone have some suggestions for a ticketing system built in node?
18:59 < superjoe> segomos, that's a pretty vague question. any specific questions?
19:01 < icekk> Using Restify how do I define a method that will be called prior to every call to a specific GET path? I see it has server.use() but thats for defining global handlers in a chain.
19:01 < icekk> In express it'd be something like express server .addall(path,function)
19:02 < icekk> *.all
19:02 < isaacbw> can it be specifically for GET?
19:02 < icekk> nah 
19:02 < isaacbw> anyway, what I did was to have a use() and check the url against a regex
19:02 < icekk> just any in general
19:02 < isaacbw> it's messy 
19:02 < isaacbw> but it works
19:03 < jerrysv> isaacs: ping?
19:03 < icekk> that sucks, cause in express it lets you specify a path that you want to add a handler to the chain
19:03 < icekk> for a specific path
19:03 <@isaacs> pong
19:03 < isaacbw> restify is a lot more barebones
19:03 < isaacbw> I'm thinking of writing my own router that lets you structure routes as an object tree for just this purpose though
19:04 < isaacbw> then you can have 'gatekeeper' functions for certain branches
19:04 < jerrysv> isaacs: any thoughts on why 0.9 would have different results for floating point math than 0.8?
19:04 <@isaacs> isaacbw: i thought restify had a concept of pre-whatever thingies
19:04 < icekk> isaacbw i created a router that dynamically creates routes based on your controllers folder structure
19:04 < icekk> and its contents
19:04 < isaacbw> maybe I didn't see it
19:04 <@isaacs> jerrysv: V8 is a different version.
19:04 <@isaacs> jerrysv: so, it's possible that they made some changes.
19:04 < isaacbw> I kind of assumed my solution was a dirty hack and there would be a better way to do it
19:04 < icekk> yea
19:04 < jerrysv> isaacs: that's what i was afraid of. makes our math tests pass in 0.8 but fail in 0.9
19:04 <@isaacs> isaacbw: ping mark cavage
19:05 <@isaacs> jerrysv: post an issue.
19:05 < jerrysv> isaacs: node or v8?
19:05 <@isaacs> jerrysv: we'll investigate if its your bug or v8's
19:05 <@isaacs> jerrysv: node
19:05 < icekk> isaacbw for something like a get on /device/device_id I want to have a before handler that checks for errors in regards to if that device even exists
19:05 < jerrysv> isaacs: awesome, thanks much!
19:05 <@isaacs> np
19:05 <@isaacs> jerrysv: be prepared for a "wontfix. your code is broken."
19:05 < tprice> how do i stop npm from writting to stdout? im doing   npm.commands.install(["some", "args"], function (er, data) {
19:05 < isaacbw> icekk, I get what you want. My use case is almost identical
19:05 < jerrysv> isaacs: i always am, but happy to continue pressing it :)
19:06 < jerrysv> isaacs: breaking it out to a couple of math statements
19:06 <@isaacs> jerrysv: yes, the more minimal the better.
19:06 < jerrysv> isaacs: of course!
19:06 <@isaacs> jerrysv: at the very least, it'll be somethig for the "new in v0.10" wiki page.
19:06 < jerrysv> isaacs: which would be good as well
19:07 < azylman> "new in v0.10: 1+1 now equals 3!"
19:07 < isaacbw> it looks like restify does have a pre() function but it won't help with routing branches
19:07 < segomos> superjoe: looking for something to keep track of who's working on what tasks and for what customer.  bonus would be being able to do time tracking so we can keep track of how many hours we worked on what task
19:07 < jerrysv> azylman: it's not quite that bad :)
19:07 < azylman> I was kidding, mostly
19:08 < icekk> isaacbw looks like what it has is all globally based and not route path specific
19:08 < isaacbw> I'll try and ping mark cavage and I'll let you know if I figure out a solution
19:09 < isaacbw> my suspicion is that restify is just too basic though
19:09 < icekk> yea, would be good to know if we are just missing somethign thou
19:09 < isaacbw> in the meantime regex matching *will* work, even if it makes you cringe
19:09 < icekk> haha true
19:12 < icekk> isaacbw does mark idle in here?
19:15 < gildean> icekk: you could do app.get('/*', function (req, res, next) {...});
19:16 < icekk> gildean will it process the functions in order based on when they were added then
19:16 < icekk> ?
19:16 < gildean> that would be used on all get-reqs, and calling next(); from inside that middleware would pass the req to the next applicaple middleware
19:16 < isaacbw> I don't think you can use * like that in restify
19:16 < gildean> yeah, that needs to be above the other gets
19:16 < gildean> ah, sorry i thought you were talking about express
19:17 < icekk> gildean in express you can do server.add
19:17 < rcaskey> are harmony proxies being obsoleted by direct proxies?
19:18 < gildean> icekk: add?
19:18 < gildean> you mean .all?
19:18 < icekk> yup
19:18 < icekk> ohhh
19:18 < gildean> the .all method would be enacted on all reqs, not just get reqs
19:18 < icekk> haha ya gildean  app.all(path, obj.before);
19:18 < icekk> gildean nah you can specify path
19:19 < gildean> a path, but not a method, unless you do it yourself
19:19 < icekk> path is the path and obj.before is the method gildean 
19:19 < gildean> no mean the method of the request
19:19 < gildean> *i mean
19:20 < isaacbw> restify doesn't have an all()
19:20 < isaacbw> which is really the big issue
19:20 < icekk> haah yea isaacbw
19:20 < gildean> my point was just that the .all in express will be enacted on all req-methods, not just get
19:21 < isaacbw> you could also just put a check at the beginning of each route function
19:21 < gildean> but anyways, it's besides this problem
19:21 < isaacbw> but that's messy too
19:21 < icekk> isaacbw ya thats what i do now, for each method i call a before method
19:21 < icekk> haha
19:21 < icekk> quick and dirty
19:31 < lewellyn> so, might anyone here be able to help me figure out why npm refuses to upgrade to the latest version of a package?
19:31 < isaacbw> are you using a package.json file?
19:31 < CoverSlide> lewellyn: maybe your engine is not compatible
19:31 < lewellyn> isaacbw: grrr... i didn't realize there was one in here. *grumble* thanks.
19:32 < lewellyn> CoverSlide: the problem is that wrench was sticking at 1.3.6 and i'm on windows atm which doesn't do 1.3.6
19:36 < isaacbw> woo, I have a desk arriving tomorrow
19:36 < isaacbw> no more kitchen table office
19:38 < CoverSlide> is it a stand-up desk
19:38 < CoverSlide> i really want to get one of those
19:39 < isaacbw> my knees would kill me if I did that
19:39 < isaacbw> I have terrible knees
19:39 < isaacbw> and I wouldn't be able to stop myself from pacing instead of working
19:40 < isaacbw> I basically have to sit on my legs to stop from standing up every few seconds
19:40 < isaacbw> and then my legs fall asleep and I have to walk around to revive them anyway
19:40 < isaacbw> my life is tough
19:41 < isaacbw> does anyone know if gmail uses IMAP's priority feature for its 'important' inbox
19:42 < CoverSlide> firstworldproblem
19:42 < mscdex> isaacbw: doubtful
19:43 < mscdex> isaacbw: they use separate mailboxes instead of flags
19:43 < isaacbw> mm
19:46 < mlebrun> anyone know how to use subfolders with ecstatic and flatiron's director?
19:48 < CoverSlide> subfolders?
19:54 < mlebrun> like, a lot of the static file server modules put things in ./public
19:54 < mlebrun> i would like to have a ./static folder but whenever i try to hit static/index.html Director says it can't be found
19:57 < mlebrun> i think i figure it out
19:57 < mlebrun> i didn't know if i put the root as ./static that i don't need that in the url. pretty rookie :/
19:58 < mlebrun> figured it out*
19:58 < Sly> Nexxy: <3
20:00 < isaacbw> aw
20:01 < donpdonp> substack: i did a why-bouncy-is-awesome post http://donpark.org/blog/2013/01/28/nodejs-and-bouncy-as-web-front-end
20:01 < bricker> Hello, I'm trying to send a stream of 0 bytes (apple's new Podcast app requests it for some reason), and am getting the error: "EBADF, bad file descriptor" ... is am I way off the mark here?
20:01 < iasdf`> my web sever serves index.html but it doesn't load style.css , what's the problem here?
20:02 < iasdf`> i am testing it locally with webkit-gtk
20:04 < iasdf`> i am using express too
20:21 < therealkoopa> I have a base64 encoded string that I want to pipe into imagemagick, but I'm thinking I might have to buffer it first, does anyone know if I can pipe a base64 encoded string directly into imagemagick
20:21 < justicefries> graphicsmagick + gm supports streams
20:21 < justicefries> check that out
20:21 < manacit> NOTE: There is a limit on the size of command-line options you can pass .. Imagemagick docs suggest 5000 bytes. Base64-encoded strings are larger than the original (Wikipedia suggests a rough guide of 137% larger) which could be very limiting unless you're showing thumbnails.
20:21 < manacit> http://stackoverflow.com/questions/11599357/resizing-images-with-nodejs-and-imagemagick
20:22 < therealkoopa> manacit: I saw that... which makes me think I need to buffer it... Basically I have a response stream from a request that contains a base64 encoded image. I want the best way to send it to imagemagick to resize and compress, then ship to S3.
20:23 < manacit> probably write it to disc first?
20:23 < jawsome> therealkoopa: I'm using phantomjs to render into base64, creating a buffer and passing it into a stream into GM, it's worked quite well for me. I also decided against storing as base64 and moved to Riak.
20:23 < manacit> oh no
20:23 < manacit> well, actually, I don't know - try it and see if it works?
20:24 < therealkoopa> jawsome: That sounds about exactly what I'm doing. I'm using phantomjs to base64 encode, too. I wanted to avoid the buffer, but it might be necessary
20:24 < manacit> I think you can do srcData
20:24 < manacit> and toss whatever you want in
20:24 < manacit> the example down the pages uses fs.readFileSync()
20:25 < mansoor-s> LOL
20:25 < mansoor-s> i'm ashamed i wrote this http://pastie.org/private/kkc4ghadc7tvoocz3ej7zg
20:27 < mansoor-s> what was I thinking here http://pastie.org/private/a6grhjlmegpkfwxvyikpa :S
20:27 < mansoor-s> i'd say i was drunk but i dont drink
20:27 < mansoor-s> :\
20:30 < sr3d> I'm trying to configure node-dev to reload ejs file when there's a change  
20:30 < sr3d> anyone knows the syntax ?
20:33 < bricker> I keep getting EBADF error intermittently, it's hard to debug because the error doesn't say much
20:36 < jawsome> therealkoopa: I found it necessary since that's the only way to render with phantomjs without writing to a file. I didn't want anything to be written to disk except the raw binary going into the riak bucket. I can send you a gist of how I'm using it.
20:37 < bricker> It seems to happen when I make two requests quickly after one another
20:37 < therealkoopa> jawsome: That'd be awesome!
20:37 < therealkoopa> Are you just using request to hit the phantom response?
20:37 < jawsome> therealkoopa: This is one I made awhile ago to help someone with the same issue: https://gist.github.com/4549230
20:38 < jawsome> therealkoopa: You can rip a lot of it out since it's rendering the full in base64 -> binary -> piped to GM to resize and then both are saved separately.
20:38 < therealkoopa> Oh you're talking to phantom from within node? Are you using phantom-node for that?
20:40 < therealkoopa> I was finding that starting phantom and opening my page to grab an image was taking too long, so I hacked something together: I start a phantom server that receives requests. When it starts, it loads the page once...Then each request changes the page, and then it captures the image. This way I don't have to fire off phantom ecah time, and reload the page each time, rendering the javascript.
20:40 < therealkoopa> The problem is the phantomjs webserver is pretty weak.
20:40 < jawsome> therealkoopa: Woops, my bad. I'm using node-phantom and gm, both npm installable.
20:41 < jawsome> therealkoopa: Headed to work, I'll be back in a bit on the nick 'echo' 
20:42 < therealkoopa> jawsome: Okay
20:48 < therealkoopa> If you have a stream of a base64 encoded string, can you pipe that into something that decodes the base64 datA?
20:50 < manacit> therealkoopa, sure
20:51 < therealkoopa> manacit: How?
20:53 < stefan41> passportJS question: If I want to make sure that a user is auth'd with a federated strategy (fb or twitter, etc) AND my local strategy (i.e. make sure they have whatever extra profile info I require) what's the best way to do that? or, really, any way to do that?
20:54 < jerrysv> isaacs: even more odd, it's a bug on linux 0.9.x, but not on osx
20:59 < therealkoopa> I'd like to avoid this: fs.writeFile('test.jpg', new Buffer(buffer, 'base64'), function (err, foo) { -> where the buffer is the response from a request 
21:08 < e2b> If I would like to provide optional CoffeScript support in my module, should I use the optionalDependencies section in package.json?
21:08 < e2b> It isn't required if the user doesn't want to use it (should be an option on function call), but it is not just a faster alternative or something similar hidden to the user.
21:13 < cellvia> therealkoopa cant you use setEncoding on your receiving pipe
21:13 < doouge> Hi What is wrong with this code? It just keeps printing 15 it must be something silly:   for(var value=0; value<15; value++){ setTimeout(function(){console.log(value);socket.emit('news', { hello: value });},1000*value,[value]);}
21:13 < azylman> closures
21:14 < doouge> ?
21:14 < azylman> http://stackoverflow.com/questions/111102/how-do-javascript-closures-work
21:14 < therealkoopa> cellvia: It's the request module, I'm not sure what I should set it to.  If I just set it to base64, it doesn't seem to work I then pass that buffer into fs.writeFile
21:14 < azylman> Basically, "value" is 15 every time you're logging
21:15 < aho> because value is 15 at the time the code is executed
21:15 < azylman> So you should use a closure to fix it
21:15 < aho> (fwiw, that kind of code works as expected in dart) :>
21:15 < therealkoopa> cellvia: If I set it to base64 and pass it in, the file cannot be opened, but if I take the body and create a new buffer: new Buffer(body, 'base64'), the file can be opened.
21:18 < leonardo>  http://i.imgur.com/Q4tsP.jpg 
21:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:19 < MI6> joyent/node: piscisaureus created branch dgram-cluster - http://git.io/xBCPZQ
21:19 < segomos> haha
21:21 < e2b> So, using optionalDependencies for option CoffeScript support: yay/nay?
21:21 < superjoe> segomos, why not use an existing product?
21:21 < superjoe> e2b, nay
21:21 < someprimetime> nay
21:21 < doouge> azylman do you have an example of how i could change that code so it uses closures and works? i cant seem to get it to work with them
21:21 < cellvia> therealkoopa hmm i dont really have anything for you but have you already looked deeply into the stream docs
21:22 < doouge> it just keeps printing 15
21:22 < doouge> i understand what yuo mean thou
21:22 < e2b> Because of CoffeScript or because optionalDependencies should only handle internal opional things?
21:22 < MI6> joyent/node: Bert Belder dgram-cluster * 6311f1c : dgram: avoid EventEmitter leak warning  When a datagram socket hasn't bee - http://git.io/y6k8YA
21:22 < therealkoopa> cellvia: working on that
21:22 < superjoe> e2b, I'm not sure exactly what you're trying to do but it sounds too complicated to be good
21:24 < e2b> superjoe: I've an simple templating engine that uses HTML with ERB-like inline JavaScript tags (like embedded PHP). Would like to provide (optional) CoffeScript support, only if the option is set by the user.
21:25 < e2b> E.g. <p><%= generateSth %></p>
21:26 < e2b> * <p><%= generateSth(arg) %></p>
21:26 < azylman> doouge: I don't usually write javascript (coffeescript instead) so I can't guarantee that this is the right syntax, but it should give you the idea: http://pastebin.com/ksFWXqQy
21:26 < ktada> what is best place to learn node.js?
21:26 < acriax> I'm like, really new at this, but if I use npm to install a package, how do I then use the package?
21:26 < superjoe> ktada, the bathroom
21:27 < superjoe> ktada, I like to ponder it while I sit on the throne
21:27 < azylman> acriax: var package = require('package');
21:27 < superjoe> ktada, in all seriousness, pick a small project and see it through
21:27 < superjoe> e2b, sounds like a decision that only you can make
21:27 < ktada> superjoe: I already created a project using expess. but I want to learn advanced.
21:28 < superjoe> e2b, curious, what are you intending on doing with these templates?
21:28 < acriax> azylman: Oh, maybe I was a bit unclear. The package was supposed to add new commands to the command-line, so I can thereafter type $ roots new name
21:28 < superjoe> ktada, then pick a more complicated project :)
21:28 < e2b> superjoe: Simple separation between code and template. Look: https://github.com/ollym/parrot
21:28 < acriax> I might need to specify that I want to use a particular package in a certain folder, because npm list gives me nothing, but if I do npm list -g I see it
21:29 < e2b> superjoe: I am unsure if there is some strict definition of the use of optionalDependencies
21:30 < e2b> acriax: If you installed it via npm global or local, just `var modulename = require('modulename')` otherwise require('./relative/path/to/module/folder').
21:30 < superjoe> e2b, why not use one of the myriad template engines out there already?
21:31 < acriax> e2b: Sorry, this is going to sound super-noobish, but where do I type that?
21:31 < e2b> superjoe: It's actually one of them, just started to fix the project. It's KISS, don't need more.
21:31 < cellvia> therealkoopa id recommend looking at transform pipes
21:32 < cellvia> or using the module "through"
21:32 < cellvia> if you are using older version of node
21:32 < doouge> thanks a mil azylman
21:32 < e2b> acriax: On the top of your js file? You might take a look at some tutorial/guide.
21:32 < azylman> doouge: np
21:33 < acriax> e2b Yeah I guess so. Thing is, I'm following along with this: http://roots.cx/#installation and I don't have any js-file yet
21:34 < e2b> acriax: Do you stuck at 'npm install roots -g'?
21:35 < acriax> no, that part went fine, I can see roots when I run npm list -g afterwards
21:35 < acriax> The part i don't get is: "Once you have roots installed, it exposes a few useful commands for getting your project set up"
21:35 < e2b> oh, yeah
21:35 < superjoe> e2b, I like this one: https://github.com/paularmstrong/swig
21:35 < superjoe> you could probably use it without having to fix it
21:36 < jerrysv> isaacs: https://github.com/joyent/node/issues/4678
21:36 < acriax> I might have to edit the path file to include npm maybe?
21:37 < daslicht> is nodejs not working on ubuntu 12 x64 ?
21:38 < superjoe> no
21:38 < daslicht> i isntalled it with appt get, got NO errors
21:38 < daslicht> no means that it should work ?
21:38 < daslicht> if i execute node , nothing happens
21:38 < daslicht> any idea?
21:39 < superjoe> daslicht, I recommend chrislea's ppa
21:39 < daslicht> sudo add-apt-repository ppa:chris-lea/node.js ?
21:39 < daslicht> i get : sudo: add-apt-repository: command not found
21:40 < superjoe> daslicht, https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
21:40 < e2b> superjoe: Oh nice, some similarity, but already too complex. I mean, it's not bad to code sth, I'm just learning.
21:40 < superjoe> ok e2b 
21:40 < daslicht> yeah thats what i am following 
21:40 < daslicht> but i get add-apt-repository: command not found
21:40 < superjoe> daslicht, you didn't follow the 1st instruction.
21:40 < daslicht> i have installed sudo apt-get install python-software-properties
21:41 < e2b> acriax: the flag -g stands for global. With basically means it is available for all node projects. But it also often indicates that there is some standalone cli installed. just type 'roots' in your normal terminal (you might close and reopen it to be available) and see what happends.
21:42 < acriax> zsh: command not found: roots
21:42 < e2b> reopen your terminal
21:42 < daslicht> now its working yeah
21:42 < daslicht> at least the install
21:42 < e2b> ;)
21:43 < daslicht> but if i execute node still nothing happens
21:43 < acriax> It's still the same unfortunately
21:43 < e2b> daslicht: How do you execute node?
21:43 < daslicht> i just tried to type : node
21:43 < e2b> And what do you get?
21:44 < daslicht> or node app.js
21:44 < daslicht> nothing 
21:44 < daslicht> just blank line
21:44 < e2b> no error?
21:44 < daslicht> no error no nothing
21:45 < daslicht> root@Ubuntu-1210-quantal-64-minimal /home/node/hijax # node
21:45 < daslicht> root@Ubuntu-1210-quantal-64-minimal /home/node/hijax # 
21:45 < daslicht> just like this
21:45 < daslicht> i had it running before on 32 bit tho
21:46 < e2b> and you followed the whole guide and everything worked fine?
21:46 < superjoe> daslicht, sure you don't have any lingering files from the old installation?
21:46 < daslicht> on 32 bit yes
21:46 < daslicht> on 64 bit no
21:46 < niix> where are all the developers that got there start in making 'PRoGz' for AOL in the 90s?
21:46 < daslicht> possibly !
21:47 < daslicht> how to kill node entirely ?
21:47 < someprimetime> niix: i know of one who hangs out in jQuery
21:47 < someprimetime> i was in that "scene" but I just stole screen names :P
21:47 < segomos> niix: i programmed the aol virtual machine
21:47 < someprimetime> i miss people like MasTa though
21:47 < someprimetime> gothic nightmares
21:47 < someprimetime> aol virtual machine? lol
21:47 < niix> someprimetime: haha wow, yeah I used to steal screen names to make 'icases'
21:48 < someprimetime> hah nice. i stole a bunch of leets/3 chars and used to sell them
21:48 < niix> and 3 chars :P
21:48 < niix> yeah haha
21:48 < e2b> daslicht: how did you switch between 32 and 64?
21:48 < daslicht> clean install
21:48 < niix> someprimetime: http://codinghorror.typepad.com/.a/6a0120a85dcdae970b012877705ba4970c-pi
21:48 < someprimetime> oh glorious
21:48 < daslicht> i set up the server new
21:48 < niix> I used to write punters and mass-mailers in vb3 haha
21:49 < daslicht> i had to reinstall it since i needed to try wakanda server
21:49 < segomos> yea i made the aol virtual machine.
21:49 < acriax> does $NODE_PATH have to be set for the npm packages to work correctly?
21:49 < daslicht> it needs 64 bit
21:49 < daslicht> http://stackoverflow.com/questions/5650169/uninstall-node-js-using-linux-command-line
21:49 < segomos> it was 128 bit
21:49 < daslicht> i try this
21:49 < e2b> daslicht: do you get anything if you enter `node --version``
21:49 < gluxon> acriax: It shouldn't.
21:49 < segomos> with 512 bit SEK encryptions
21:49 < daslicht> nope
21:49 < segomos> yes
21:49 < daslicht> noe response to from node --version
21:50 < acriax> weird thing is sass seems to work, and I recall installing that through npm, so it might simply be some problem with roots
21:50 < e2b> daslicht: Just to check your terminal, what does echo "123"?
21:51 < daslicht> it echos the number
21:51 < e2b> weird
21:51 < jerrysv> taps 19
21:52 < daslicht> any suggestions how to get rid of node?
21:52 < daslicht> and reinstall i t?
21:52 < e2b> daslicht: I thought you used the ppa?
21:52 < daslicht> before that ppa did not worked and i installed teh regulatr node
21:52 < daslicht> :/
21:52 < daslicht> i bet thats it
21:52 < e2b> checkinstall or makeinstall?
21:53 < superjoe> daslicht, the regular one has a remove/uninstall target
21:53 < daslicht> i am not that experienced on linux 
21:53 < superjoe> try `sudo make uninstall`
21:53 < daslicht>  sudo make uninstall
21:53 < daslicht> make: *** No rule to make target `uninstall'.  Stop.
21:53 < e2b> (within the source folder)
21:53 < daslicht> where is that folder?
21:53 < superjoe> do that for every source thing you installed, and then uninstall the ones from the repos
21:54 < e2b> there where you entered make install
21:54 < superjoe> and then install the single package that you actually want
21:54 < daslicht> still teh same 
21:54 < otari> hello, i am developing news website, which now is up and running, its just new one and it has about 300 users online everytime.. i tried to implement node.js to it.. but i still have no success.. the problem is that when i enable my nodejs app it starts working just perfect but after some time.. (maximum was 1 day) nodejs app stops and it needs to be restarted.. and sometimes it takes to load /path/to/socke.io.js file to long from client side..can anyone hel
21:54 < e2b> highly recommend using a ppa for this. And you might take a look at checkinstall on debian-based systems next time. ;)
21:54 < otari> p please
21:55 < daslicht> i install node teh first tiem just with apt-get install node
21:55 < e2b> daslicht: Possible, but likely outdated. That's where the ppa gets useful.
21:55 < otari> bere
21:55 < otari> here is the code: http://pastebin.com/sLzNm95m
21:56 < daslicht> this uninstall dont work
21:56 < khushildep> Hi All - trying to pull the latest node from the site but it's awfully slow - anything up?
21:56 < gluxon> khushildep: It's a very small file. You say you're downloading from nodejs.org?
21:56 < e2b> are you in the right folder? you might give me the output of `pwd` and `ls`
21:57 < khushildep> http://nodejs.org/dist/v0.8.18/node-v0.8.18.tar.gz - 20KB/s
21:57 < fmarceau> hi peep
21:57 < fmarceau> any clue on this one: Uncaught Exception: RangeError: Maximum call stack size exceeded ?
21:58 < otari> my app is just about to notify user about new article added...
21:58 < fmarceau> is it because an array gets too big ?
21:58 < e2b> daslicht: by the way I've an additional test regarding the node installation for you: `node --version; echo $?`
21:58 < daslicht> echos 1
21:58 < echo> kushildep: 3.03M/s for me.
21:58 < e2b> daslicht: ok, that's an error
21:59 < e2b> shouldn't happen on such a simple task
21:59 < e2b> really sounds like a broken installation
21:59 < daslicht> hm cany i just delete it ?
21:59 < daslicht> and reinstall it ?
21:59 < e2b> daslicht: if you find all the files in /usr/bin/... or wherever it's installed ...
21:59 < daslicht> sheit
21:59 < daslicht> super
22:00 < daslicht> hmm again messed up the server 
22:00 < daslicht> freaking breakable ubuntu
22:00 < e2b> do you have still the folder where you executed make install?
22:00 < daslicht> yes
22:00 < jtomasrl> how can i store mongoDB ObjectId in an array to perfrm a $in
22:00 < e2b> navigate in it
22:00 < daslicht> make install?
22:00 < e2b> sudo make uninstall
22:00 < daslicht> i havent make install
22:00 < daslicht> only apt-get install
22:00 < e2b> mmm
22:01 < e2b> so what have you actually done?
22:01 < daslicht> apt-get install node
22:01 < daslicht> nevermind 
22:01 < daslicht> i kill teh vps
22:01 < daslicht> to much hassel now
22:01 < e2b> I thought that was afterwards?
22:01 < bricker> `python --version` shows Python 2.7.3, but I'm getting an Python syntax error when I try `make install`... is it trying to use a different version of python or something
22:02 < daslicht> that was the first thing i did
22:02 < daslicht> and after that did not worked i followed the other guide
22:02 < e2b> apt-get purge node
22:02 < e2b> are you aware of the debian package management and apt-get?
22:02 < bricker> hm, python is installed at /usr/local/bin/python , but the version at /usr/bin/python is 2.4
22:02 < daslicht> now i get 
22:02 < daslicht> root@Ubuntu-1210-quantal-64-minimal /home/node/hijax # node
22:02 < daslicht> -bash: /usr/sbin/node: No such file or directory
22:02 < e2b> bricker: did you run ./configure before?
22:03 < bricker> e2b: yes
22:03 < e2b> daslicht: correct, we just uninstalled it, right
22:03 < dabarnes> install it from source?
22:03 < e2b> daslicht: reopen your terminal, now it shouldn't show the path anymore
22:04 < daslicht> ok thanks i try
22:04 < e2b> daslicht: should no be just "command not found"
22:04 < bricker> is it a bad idea to just symlink /usr/bin/python -> /usr/local/bin/python ?
22:04 < doouge> Help on simple socket io http://pastebin.com/uTu3t9Nz ?
22:04 < daslicht> funny now i get a >
22:04 < CoverSlide> > means it's working
22:04 < doouge> I want the server to just keep emiting every second a random num
22:04 < doouge> but it only doe sit once
22:05 < daslicht> root@Ubuntu-1210-quantal-64-minimal ~ # node --version
22:05 < daslicht> v0.8.18
22:05 < e2b> bricker: doesn't really make sense, or?
22:05 < superjoe> bricker, both /usr/bin and /usr/local/bin should be in your PATH
22:05 < daslicht> will forever work on 64 bit ubuntu ?
22:05 < e2b> bricker: what guide are you following and which steps have you done?
22:05 < daslicht> can i just install it with npm ?
22:05 < Havvy> daslicht: Yes and Yes
22:05 < bricker> superjoe: `which python` shows the /usr/local/bin/python , so wouldn't the node installer use that?
22:06 < daslicht> cool
22:06 < Havvy> sudo npm install forever -g
22:06 < bricker> e2b: none, I just got the source tar and ran `./configure`, `make`, `sudo make install`
22:06 < e2b> daslicht: if you did a "make install" and apt-get install you likely screwed things up
22:06 < daslicht> ok
22:06 < daslicht> thank you !
22:06 < e2b> bricker: ubuntu?
22:06 < superjoe> bricker, correct
22:06 < trevnorris> having a brain fart. what can I use to track the number of times all functions are called?
22:07 < bricker> e2b: centos... I just realized that `sudo which python` gives different results :) I am dumb
22:07 < daslicht> root@Ubuntu-1210-quantal-64-minimal /home/node/hijax # forever app.js
22:07 < daslicht> module.js:340
22:07 < daslicht>     throw err;
22:07 < daslicht>           ^
22:07 < e2b> daslicht: which version do you have? the ubuntu repository is likely not as fast as the ppa since they only update versions for security reasons or when a new ubuntu releases
22:07 < daslicht> Error: Cannot find module './daemon.v0.8.18'
22:07 < daslicht>     at Function.Module._resolveFilename (module.js:338:15)
22:07 < daslicht>     at Function.Module._load (module.js:280:25)
22:07 < daslicht>     at Module.require (module.js:362:17)
22:07 < daslicht>     at require (module.js:378:17)
22:07 < daslicht>     at Object.<anonymous> (/usr/local/lib/node_modules/forever/node_modules/daemon/lib/daemon.js:12:11)
22:07 < daslicht>     at Module._compile (module.js:449:26)
22:07 < daslicht>     at Object.Module._extensions..js (module.js:467:10)
22:07 < daslicht>     at Module.load (module.js:356:32)
22:07 < daslicht>     at Function.Module._load (module.js:312:12)
22:07 < daslicht>     at Module.require (module.js:362:17)
22:07 < daslicht> Ubuntu-1210-quantal-64-minimal
22:07 < daslicht> forever seams not to work 
22:08 < superjoe> daslicht, don't paste into the channel
22:08 < daslicht> ok
22:09 < Havvy> daslicht: http://pastebin.com & http://gist.github.com/
22:09 < e2b> daslicht: are you the roots guy?
22:09 < daslicht> yes
22:09 < e2b> daslicht: where does app.js come from
22:09 < daslicht> its a app i wrote 
22:09 < e2b> daslicht: the error says just that required modules aren't installed yet
22:09 < daslicht> i get the same error withot that app.js 
22:10 < daslicht> if i type forever i get teh same error
22:10 < daslicht> how do i install the dependencies for forever ?
22:10 < superjoe> daslicht, it seems like you're coming here for help without reading any documentation
22:10 < daslicht> ?
22:10 < superjoe> please spend some time reading documentation and trying it yourself before coming here.
22:10 < daslicht> I did: npm install forever -g
22:10 < daslicht> that should be enough ?!
22:11 < e2b> yep
22:11 < daslicht> and if I execute "forever" i should get a list with all options
22:11 < e2b> but it get's deleted if you have uninstalled nodejs in between. you did, right?
22:11 < bricker> so is it a bad idea to put /usr/local/bin/ into root's $PATH ?
22:11 < daslicht> at least on my local machine its like this..
22:11 < daslicht> forever --help throws teh same error
22:12 < e2b> bricker: you shouldn't even need to do this
22:12 < daslicht> apt-get purge forever
22:12 < daslicht> oops
22:13 < e2b> daslicht: what the hell is forever now. sorry, but you might RTFM. check how npm works. first install nodejs, fiddle around with it, then start using roots
22:13 < acriax> daslicht: you also trying to use roots?
22:13 < daslicht> i thought u know forever : https://github.com/nodejitsu/forever
22:13 < e2b> daslicht: Have you used linux before? Do you know how node.js basically works?
22:13 < daslicht> i had no issue with 32 bit ubuto 
22:14 < daslicht> so i cant be that dumb ...
22:14 < acriax> e2b: I am the roots guy ^^
22:14 < daslicht> YES
22:14 < e2b> oh crap, sorry, I'm out.
22:14 < daslicht> i just have those trouble with that 64 bit version 
22:15 < e2b> whatever, I won't provide help for every step
22:15 < daslicht> ok thank 
22:15 < daslicht> you
22:15 < superjoe> +1 e2b 
22:16 < e2b> Just a reminder. Take it slowly. Check how apt-get works. how ppas work. what $PATH is. install node. checkout npm. then you could start with roots.cx
22:17 < otari> anyone willing to help please
22:17 < iwalkbarefoot> throw out the question, if someone can they usually will
22:18 < acriax> I am trying to take it slowly. Just I don't really know what is wrong since I get no error other than it does not seem to register the command-line commands for roots
22:18 < acriax> and editing the $PATH to include /usr/local/share/npm/lib did not help :/
22:19 < otari> i have simple nodejs app which uses socket.io its task is to parse json data everyminute and if new article is added it sends notification to users
22:19 < e2b> I might be back later.
22:19 < acriax> But I appreciate your help nonetheless, e2b. Sometimes it helps just to explain the problem to someone else :)
22:19 < otari> when i start it it just works fine but after an hour or so.. it stops or takes to long to load
22:19 < e2b> acriax: thx
22:19 < context> leaking memory?
22:19 < otari> do not realy know
22:19 < otari> i will show u code
22:20 < otari> here: http://pastebin.com/sLzNm95m
22:20 < iwalkbarefoot> otari: I'm with context on this one, probably a decent chance it's running out of memory. after it's in it's delayed state i'd look at the process and see how much memory it's using up
22:22 < otari> i thougnt about memory leakse too.. i also tried to fork on different cores but when i did fork and was responding eight times at once (server has eight cores)
22:22 < otari> is there any good solution to add to my code to prevent memory leaks
22:22 < context> write proper code
22:23 < otari> whats wrong with code i paste here?
22:23 < hipsterslapfight> anybody have any good links for well performing hashes on the client-side?
22:24 < khushildep> anyone else here from the UK? I wonder if you could see if you're getting slow speeds from nodes.org too? my connection to the EU and sites in the UK are find by the US ones seem to be very slow for some reason and I've a nodes in mid upgrade balked boo
22:24 < otari> i tried my best for this moment as a newbie.. writing proper code is just a metter of experience... so maybe someone experienced  can suggest smth..
22:24 < iwalkbarefoot> otari: unfortunately memory leaks aren't a one and done solvable problem.  I'd first confirm that's actually your problem
22:25 < daslicht> i made it work now ;P
22:25 < khushildep> otari - check that your callbacks aren't stacking upâ€¦ we get this sometimes when our redis backends slows down.
22:25 < hipsterslapfight> khushildep: (i assume you mean http://nodejs.org/) UK here, speeds look fine.
22:25 < gildean> otari: i'd guess your problem is the setInterval, iirc i've seen similar problems from people doing expensive operations between intervals
22:26 < gildean> otari: change the setInterval to a recursive setTimeout instead and test it out
22:26 < khushildep> thanks hipsterslapfight - guess it's my virgin connection then hmmm
22:26 < hipsterslapfight> virgin here too khushildep, but adsl not cable if that helps
22:27 < khushildep> hmm yeah I'm cable. ok I'll deal with it tomorrow and let it settle down some.
22:27 < otari> khushildep, callbacks? you mean when i send request?
22:28 < iwalkbarefoot> otari: he's refering to the generic term callback.  so on line 107 where you use function() { â€¦  that function is a callback
22:29 < khushildep> otari: use dtrace/flamegraphs or if on linux http://blog.nodetime.com/2012/05/cpu-profiling-with-nodetime.html
22:29 < gildean> otari: change the setInterval to a function with setTimeout that calls itself inside the timed function, and it should also prevent the callbacks from piling
22:31 < bricker> I guess all I really need is to tell node which python to use when compiling
22:31 < bricker> somehow
22:31 < cellvia> you can pass a flag into npm when you install
22:31 < cellvia> that will pass it into build script
22:32 < cellvia> might even just be something like --python="python2" something like that
22:32 < bricker> cellvia: thanks
22:32 < cellvia> i dont remember the exact command
22:33 < bricker> cellvia: looks like I might just need to set PYTHON env var
22:37 < otari> thanks gusy.. home this is realy setinterval function issue.. hope it will help. i'll test it on day time when there are lots of users online..
22:37 < otari> hope*
22:38 < iwalkbarefoot> otari: out of curiosity is this an rss feed you control or are you pulsing a third party's rss?
22:39 < otari> i controll it, not third party
22:40 < otari> iwalkbarefoot, why?
22:40 < iwalkbarefoot> depending upon how it is generated you could also trigger the messages to be sent that way instead, a bit easier.  not what you're doing is wrong or anything just an alternative solution
22:41 < otari> that url just returns last insert data from db as a sjon
22:42 < otari> mostly data from memcache server
22:42 < iwalkbarefoot> oh, I didn't look that closely :)  seems like a fun project
22:43 < otari> so, what else i could do?
22:43 < cellvia> bricker you could do that but you might mess up other programs if you  change it for everything
22:43 < brianc> guys wanna see my weekend project?
22:44 < brianc> s/guys/folks
22:44 < echo> brianc: We'd love to.
22:44 < brianc> http://hackernewsjob.com/
22:46 < bricker> cellvia: well it didn't work anyways. I guess I really don't understand unix. `python -v` is 2.7.3 ... `./configure` and `make` work, then `sudo make install` fails because it's using the system version of python
22:46 < isaacbw> so you mirrored hacker news job postings?
22:46 < bricker> (2.4.3)
22:46 < brianc> yah
22:46 < brianc> and sorted them by date & made them searchable & hidable
22:46 < isaacbw> oh cool
22:46 < brianc> was hard for me to keep track of the postings
22:46 < isaacbw> now you should tie in other job sites and make it a job aggregator
22:47 < CoverSlide> and step 3: profit!
22:47 < brianc> also added an RSS feed
22:47 < brianc> another thing hacker news doesn't want you to have
22:48 < cellvia> sweet brianc
22:48 < brianc> :thumbsup:
22:48 < brianc> hope you find it useful
22:49 < CoverSlide> i'm kind of over hn. i'm not running a startup, i don't care about customers or investors or being an entrepreneur
22:49 < brianc> yeah - me too
22:49 < brianc> they have some decent job postings though I didn't see on any other job board
22:49 < isaacbw> then it's not for you
22:49 < brianc> not all their job postings are startup related
22:49 < isaacbw> you and your steady job
22:49 < isaacbw> bah
22:50 < CoverSlide> i like angellist for startuppy jobs
22:50 < isaacbw> where's the fun in knowing you'll have a paycheck every month
22:50 < azylman> Paychecks are overrated
22:51 < brianc> this angelist website is nice
22:51 < brianc> pretty much what i wanted
22:53 < isaacbw> moneh
22:53 < blazes816> my current employer found me on angelist and I wasn't even looking.  it was pretty nice
22:53 < isaacbw> what do you mean?
22:53 < isaacbw> you had a profile up?
22:53 < blazes816> I made a profile, but never actually used it
22:53 < blazes816> yeah
22:53 < azylman> I signed up for angellist through my employer and then a bunch of other startups started contacting me
22:53 < azylman> Womp
22:53 < isaacbw> ah cool
22:54 < isaacbw> so it's more than just an investor network
22:54 < azylman> Yeah, they have job postings
22:54 < blazes816> yeah, afaict quite a few startups use it as a first place to go for candidates
22:55 < azylman> I think we tried to find jobs through AngelList but I don't think we were successful
22:55 < CoverSlide> yeah pretty awesome if you want low income and risky shares
22:55 < isaacbw> that's the life man
22:55 < isaacbw> living on the edge
22:55 < isaacbw> working on uninspired ideas
22:55 < azylman> lol
22:55 < azylman> Just gotta find the right startups :p
22:55 < CoverSlide> Man, I got 5 kids to feed
22:55 < CoverSlide> -- Total Recall
22:56 < CoverSlide> although I only have 1
22:56 < isaacbw> yea no totally
22:56 < isaacbw> I love startups
22:56 < blazes816> there're a lot of cat picture sharing apps to wade through to find good startups
22:56 < isaacbw> there are just a lot of shitty ones
22:56 < brianc> real money now > maybe more in the future
22:56 < Cronoh> what about a dating site but on this one you get unliminited messages?
22:56 < brianc> I'd rather work for a startup and take high pay and no options than low pay and options
22:56 < someprimetime> @brianc++
22:57 < azylman> I think there's a middle ground that's nice
22:57 < azylman> Medium pay and medium options :p
22:57 < mappum> are there any plans to add RSA to the node api?
22:57 < CoverSlide> I've found that the number of people who actually make money on shares is pretty low, and even then, the difference is usually not that significant
22:57 < isaacbw> or just start your own startup and get all the options
22:57 < isaacbw> and get paid based on how good you are and not how good your boss is
22:58 < Cronoh> i would only want options ona  project i fell in love with, which has been none so far
22:58 < mappum> right now, the main RSA module people use (ursa) doesn't install out-of-the-box on windows/osx because you have to build it
22:58 < CoverSlide> It's like winning a middle prize in a game show, not winning the lottery
22:58 < mappum> and it just uses openssl, which is a dependency of node anyway
22:58 < isaacbw> I wouldn't take shares from a startup I joined, only one I co-founded
22:58 < isaacbw> meaning if you aren't in control, it's really risky
22:58 < CoverSlide> yeah
23:02 < isaacbw> I'm realizing how much ebay actually sucks
23:02 < isaacbw> and there aren't any viable alternatives, really
23:02 < isaacbw> ebay's too big
23:02 < azylman> Garage sales
23:03 < AviMarcus> tjfontaine, do you have a sec?
23:03 < isaacbw> you know what would be really neat is something like amazon's return shipping where you print out a shipping label from the website and just take your package to the UPS store
23:03 < CoverSlide> or stoop sales
23:03 < CoverSlide> which are like yard sales
23:03 < isaacbw> so don't make the seller worry about shipping - do it all for them
23:03 < CoverSlide> if you live in brooklyn
23:03 < CoverSlide> which i don't
23:03 < MI6> joyent/node: Bert Belder master * 6311f1c : dgram: avoid EventEmitter leak warning  When a datagram socket hasn't bee (+1 more commits) - http://git.io/xo3wIQ
23:04 < isaacbw> I do :(
23:04 < isaacbw> why don't I know about that
23:04 < isaacbw> my part of brooklyn doesn't have stoops
23:04 < tjfontaine> AviMarcus: hm?
23:04 < CoverSlide> www.youtube.com/watch?v=bFOPwL32UvI
23:05 < AviMarcus> cool
23:05 < isaacbw> I haven't listened to mc frontalot in a while
23:05 < isaacbw> he did a song for an elmo movie about potty training
23:05 < AviMarcus> tjfontaine, I'm looking at your node-dns. How hard would it be to add NAPTR support? I don't see in the docs, but it's in dns.js but not in lib/client.js 
23:06 < AviMarcus> I don't really know DNS :S
23:06 < tjfontaine> AviMarcus: it should just work, iirc
23:06 < tjfontaine> what matters is if Packet.parse knows it
23:07 < isaacbw> the problem with ebay is that bids are based on time, so there's very little incentive to bid before you get close to the end
23:07 < tjfontaine> AviMarcus: so just ndns.resolve('domain', ndns.NAPTR, cb)
23:07 < AviMarcus> cool. Thanks!
23:07 < isaacbw> or you will just drive up the price. A good auction system would let the bid go as high as it will naturally go (within limits) and only end when the bidding ends
23:08 < CoverSlide> aren't there ebay sniper sites?
23:08 < isaacbw> I don't know. I know that there were a bunch of $30 TI-83+s for sale and I had to beat a bot to get one
23:08 < isaacbw> it took me three tries
23:09 < CoverSlide> maybe a good option would have the auction length hidden, or only give a general time, not an exact one
23:09 < donpdonp> sniping and waiting until the end is of no use at all really. bid your maximum and ebay will use the least amount of money to win the auction.
23:09 < isaacbw> yea there probably are
23:09 < isaacbw> all ebay has going for it is being big
23:09 < azylman> If you use an ebay sniper, you're going to have a bad time: http://imgs.xkcd.com/comics/packages.png
23:09 < CoverSlide> haha
23:09 < isaacbw> donpdonp, and when someone else bids, yours will automatically go up
23:09 < CoverSlide> and you might get a bobcat
23:10 < donpdonp> isaacbw: right, but someone else bid and you'd have to spend more anyways
23:10 < holzp> I may be too socially ackward penguin for GitHub
23:10 < isaacbw> bidding early just raises the price prematurely
23:11 < holzp> wow, moment.js is awesome
23:11 < azylman> Yup
23:11 < azylman> I love moment
23:11 < isaacbw> have you ever bid on something and then it says "You've been outbit" immediately?
23:11 < isaacbw> that's stupid shit
23:11 < CoverSlide> nide
23:11 < CoverSlide> *nice
23:11 < holzp> I found it by accident, so much time this would have saved me, pun intended
23:11 < CoverSlide> better than that date.js shit
23:11 < isaacbw> I'm sure there's a way to explain this mathematically but I'm not smart enough to do that
23:13 < mappum> isaacbw: you set your maximum bid, but it makes an actual bid that is the minimum increment
23:13 < Havvy> moment.js?
23:13 < mappum> so if you bid and someone's max is higher than that, it autobids for them right above you
23:13 < holzp> yeah moment.js
23:13 < xat-> whats that for in moment.js: (function (undefined) { 
23:13 < xat-> ??
23:13 < holzp> looks like a more formal style of coding
23:13 < holzp> like passing void in a c program
23:14 < holzp> I think?
23:14 < isaacbw> mappum, it ruins the psychology of auctions
23:14 < mappum> xat-: undefined used to be assignable, so people did that to make sure if something else assigns to it, it is still actually undefined
23:14 < holzp> general opinions: how is the coding style of moment.js? https://raw.github.com/timrwood/moment/1.7.2/moment.js
23:15 < isaacbw> what does moment do that Date doesn't
23:15 < mappum> it formats to canonical time text
23:15 < xat-> but window gets assigned to it imho
23:15 < mappum> like "3 days ago"
23:15 < isaacbw> oh, cool
23:15 < isaacbw> oh way holy shit I need that right now actually
23:15 < holzp> i know
23:15 < holzp> half of this stuff I saw and was like, damn I needed this
23:15 < Havvy> 3.days.ago *cough*
23:16 < isaacbw> Havvy, what
23:16 < Havvy> Something that works in Ruby.
23:17 < superjoe> I think Havvy is bragging about ruby or some kind of ActiveNonsense
23:17 < isaacbw> :P
23:17 < CoverSlide> i don't like the maginess of that
23:17 < CoverSlide> *magicness
23:17 < superjoe> I personally think that 3.days.ago is offensive 
23:17 < isaacbw> I don't even get it
23:17 < isaacbw> what does that do?
23:17 < isaacbw> ruby is crazy
23:17 < CoverSlide> it's not Ruby
23:17 < isaacbw> insanity
23:17 < CoverSlide> probably a Rails thing
23:18 < janmower> i'm offended that someone would find that offensive
23:18 < isaacbw> letting you do 3.anything is crazy ruby 
23:18 < isaacbw> ruby you crazy
23:18 < azylman> You're drunk, Ruby, go home
23:18 < isaacbw> ruby is that crazy uncle who's kind of cool but off
23:18 < superjoe> CoverSlide, it's ActiveSupport
23:18 < isaacbw> he'll take you on awesome camping trips and rant about how aliens are totally real
23:19 < holzp> hm google thinks datejs.com "may be compromised"
23:19 < superjoe> (which is bundled with rails)
23:19 < azylman> And then touch you under the sleeping bag
23:19 < holzp> date.js was last updated in 2007?
23:20 < mappum> you mean "6 years ago"
23:20 < holzp> lol yeah
23:20 < Havvy> 3.days.ago is unambigous though...
23:21 < Havvy> In JS, it'd be 3..days.ago probably.
23:21 < isaacbw> it's still insane
23:21 < superjoe> Havvy, in JS it'd be x = new Date(); x.setDate(x.getDate()-3); x
23:22 < superjoe> not the prettiest, I'll agree
23:22 < superjoe> but 3.days.ago doesn't work in ruby without a library anyway
23:22 < CoverSlide> except comparing JS to Rails is comparing apples to orange marmalade
23:23 < superjoe> haha
23:23 < CoverSlide> you can make 3..days.ago work in JS with a library
23:23 < superjoe> what 
23:23 < superjoe> prove it
23:23 <@mbalho> its in coffeescript
23:23 <@mbalho> (naturally)
23:23 < superjoe> that doesn't count
23:23 < CoverSlide> with getters
23:23 < superjoe> fuck getters
23:23 < CoverSlide> i agree
23:23 < CoverSlide> it's stupid to do so
23:23 < superjoe> (where's niggler when you need him?)
23:24 < CoverSlide> and anyone who uses it anyway should be shot
23:27 < superjoe> or at least be forced to write only assembly code for the next week
23:28 < superjoe> for x86
23:28 < Havvy> superjoe: Eh. Can I do both? :P
23:29 < CoverSlide> getting shot and write assembly code?
23:29 < Havvy> 3..days.ago && ASM 80x86
23:29 < isaacbw> how would you do 3..something?
23:29 < Havvy> isaacs: Add it to the prototype for Number.
23:29 < isaacbw> loooool
23:30 < Havvy> Just make sure it isn't enumerable.
23:30 < superjoe> poor isaacs 
23:30 < Havvy> :/ isaacbw**
23:30 < CoverSlide> >> Number.prototype.square = function(){return Math.pow(this.valueOf(),2)};8..square()
23:30 < purr> CoverSlide: (number) 64
23:30 < Havvy> Why my client goes directly for isa.acs, I'll never know.
23:32 < azylman_> One of these days he's going to make isaacbw change his irc handle
23:32 < azylman_> Just for #node.js
23:32 < CoverSlide> >> Object.defineProperty(Number.prototype, 'square', {get: function(){return Math.pow(this.valueOf(),2)}, enumerable: false});[5..square,8..square]
23:32 < purr> CoverSlide: (object) [25, 64]
23:33 < CoverSlide> enumerable: false is redundant of course
23:33 < superjoe> CoverSlide, but why 2 dots?
23:33 < Havvy> superjoe: Because `3.` is a valid Floating point number.
23:34 < superjoe> ah.
23:34 < CoverSlide> and it becomes a parse error
23:34 < superjoe> so you may as well write 5.0.square,8.0.square
23:34 < superjoe> or (5).square, (8).square
23:34 < CoverSlide> yeah
23:34 < CoverSlide> the double dot thing is ugly
23:34 < CoverSlide> but a little easier to type
23:35 < CoverSlide> than the alternatives
23:36 < owen1> on my personal projects i use mon/forever to restart my node if it crashes. at my employer i am not allowed since the operation team here believe that if something crashes, we should fix the reason. is it a valid argument for node and what are my options to work around that?
23:36 < azylman_> Generally, if things are crashing in your code you probably want to fix it...
23:36 < superjoe> owen1, why can't you do both?
23:37 < holzp> right
23:37 < superjoe> automatically restart it, and then fix it
23:37 < CoverSlide> um so your app is gonna be down until you fix the bug?
23:37 < Havvy> Say that it minimizes downtime to use forever, and that you can fix it as soon as you se it.
23:37 < CoverSlide> that's very ineffeicient
23:37 < azylman_> What Havvy said
23:37 < Havvy> But say you fall asleep at midnight, and the server goes down at 1am
23:37 < blazes816> 1) if you can keep from crashing do, 2) if possible your code should be able to handle a crash
23:37 < owen1> superjoe: my app is running on 5 servers. so it will still be up on 4.
23:38 < Patabugen> new Date().format("Y-m-d H:i:s") + "]
23:38 < Patabugen> That works on one server but not another
23:38 < Havvy> What if the crash is caused by a malicous hacker and the hacker uses it on all of them?
23:38 < Patabugen> The one it works on reports it's got Node 0.8.5, the website says 0.8.18 is the latest
23:38 < CoverSlide> the app shall be down until the hacker is murdered
23:38 < Patabugen> so... I'm not sure what to do :(
23:38 < blazes816> or any number of things that could take down multiple servers
23:38 < Patabugen> One is Windows and the other Linux
23:38 < Havvy> DoS is quite common.
23:39 < owen1> should i use uncaughtException to catch exceptions so it will not crash?
23:39 < Patabugen> Sorry, I'm sure that could be better explained. But I'm not sure how..
23:39 < owen1> (+ send me an email)
23:39 < isaacbw> <isaacbw> azylman_, he's the one who convinced me not to
23:39 < Havvy> Using uncaughtException can leave your program in an unknown state.
23:39 < isaacbw> <isaacbw> I was in the channel topic for a while
23:39 < isaacbw> <isaacbw> it didn't make a difference
23:39 < isaacbw> damn internet
23:40 < azylman_> I saw you in the channel topic
23:40 < azylman_> I loled
23:40 < Patabugen> ah! I was missing the date extention.
23:41 < isaacbw> do you guys know of a good browser js library/snippet for intelligently shrinking strings to fit in a container?
23:42 < azylman_> There a reason you can't do it with CSS?
23:42 < someprimetime> word-break: break-word ?
23:42 < isaacbw> no, I mean like turning mylongstring into mylo..ring
23:43 < someprimetime> oh
23:43 < azylman_> Well, you can get close to that with CSS at least
23:43 < azylman_> Turn mylongstring into mylon...
23:43 < isaacbw> I need a bit more control over it than CSS offers me
23:43 < someprimetime> a truncator
23:43 < isaacbw> because the size I need to shorten it to isn't an element
23:43 < hipsterslapfight> hmm,  basic auth over ssl or hash the object with a private key and send the hash back to check on the server?
23:43 < superjoe> isaacbw, maybe this page has something: https://github.com/component/component/wiki/Components
23:43 < isaacbw> I guess I can wrap it with an element and set the size
23:43 < isaacbw> thanks superjoe 
23:44 < superjoe> isaacbw, maybe https://github.com/component/truncate
23:45 < isaacbw> superjoe, the problem with that is I have a pixel width, not a character width
23:45 < isaacbw> I might have some code lying around from when I tried making a rich text editor without contentEditable
23:45 < isaacbw> a lot of offscreen size testing
23:45 < azylman_> I still don't see why CSS won't work for that, other than the ellipsis in the middle
23:45 < azylman_> Instead of at the end
23:46 < CoverSlide> that's a stupid stylistic design. whoever told you it needed to do that needs to be shot
23:46 < azylman_> http://www.quirksmode.org/css/textoverflow.html
23:46 < isaacbw> no one told me
23:46 < superjoe> yeah just call it a bug and move on
23:46 < isaacbw> haha
23:46 < isaacbw> maybe I will
23:46 < isaacbw> I'm kind of stuck on the idea now, just for the sake of doing it
23:47 < superjoe> ha
23:47 < superjoe> well if that's the case you might use canvas
23:47 < isaacbw> what I did before was to have a span off-screen and added one character at a time from the source string and then measure the new span width
23:47 < isaacbw> until I hit the limit, and there was my truncated string
23:47 < superjoe> interesting
23:48 < isaacbw> that's based on what I gleened of how google docs does it
23:48 < isaacbw> and my implementation worked pretty well
23:48 < isaacbw> I ended up abandoning the project when I couldn't make it through DOM hell
23:49 < blazes816> that sounds horrible
23:49 < blazes816> not that I know of a better solution, but that sucks
23:56 < hasbra> Is there any way for a script to open a new console window for output?
23:58 < superjoe> whoa
23:58 < superjoe> hasbra, it is my duty to ask, "why?"
23:58 < AAA_awright> hasbra: If there is it's OS specific. In general a program just has the environment variables, arguments, and a stdin stream to read from, and the stderr and stdout streams to write to.
23:59 < AAA_awright> also, what superjoe said
23:59 < hasbra> I want to output information to a console window. let's say one for logs and one for interaction
--- Log closed Tue Jan 29 00:00:32 2013
