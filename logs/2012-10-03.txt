--- Log opened Wed Oct 03 00:00:00 2012
00:00 < clever> which i tried, everything came out in caps and i lost right click
00:00 < clever> mouse wheel just wasnt worth the effort :P
00:00 < s5fs> clever: haha!
00:00 < s5fs> i'm still enjoying java
00:01 < s5fs> but then again, i can put up with a lot of bs
00:01 < clever> i picked an existing open-source vnc java client, so i could just throw an applet on the page and make it user-friendly
00:01 < clever> and so i could modify it to add a default pw
00:02 < s5fs> oh man, applets. java in the browser is just the worst, talk about a truck-sized security hole on windows.
00:02 < clever> s5fs: yeah, its insane
00:02 < clever> if i dont sign the applet, it restricts me to just my own domain, which is fine
00:02 < s5fs> bet oracle is feeling silly about that now
00:03 < clever> but the warning is mis-leading, and i hit dis-allow several times before figuring it out
00:03 < clever> if i sign it, it gets total access
00:03 < clever> to everything
00:03 < topspin> oh nice... i deliberately leaked child_process.spawn(...) and node caught it and emitted a warning
00:03 < clever> s5fs: so basicaly, all i need to do is make up a cert and sign the applet, and i get total acces
00:03 < clever> i have no way to define my own policy and declare what i want
00:04 < s5fs> sounds secure
00:05 < clever> either i dont sign it, and i get limited (sane), but the warning is ass-backwards (applet cant even render if you click block by mistake)
00:05 < clever> or i sign it, and get total access, and the end-user has no way to confirm any perm
00:05 < clever> just yes/no to the whole thing
00:06 < s5fs> my mini-goal for the night is to verify/document using self-signed ssl certs in node. seems straightforward enough.
00:06 < clever> it would be a lot more secure if i could just define a policy and include it in the jar
00:07 < clever> s5fs: i have wanted to generate certs (custom ca) and verify things from javascript
00:07 < clever> but the signing end wont be node, just xulrunner (firefox)
00:08 < s5fs> i still haven't done anything with xul
00:08 < clever> currently, the best 'crypto' i have, is just sha1(random bytes+private)
00:08 < s5fs> there's more cool stuff in the world than i have time to dork with, let alone gain some basic mastery with
00:08 < clever> server sends 256 bytes of random, client hashes and sends public
00:09 < clever> server uses public to fetch private (no math connection), and does the same, server sends hash
00:09 < clever> client verifys the hash, without ever sending the private or hash
00:09 < clever> so you can verify the server is authentic (or its a replay attack)
00:10 < clever> and its still open to tcp connection hijacking
00:11 < ryanrolds_w> Being able to `kill -s USR1 <pid> && node-inspector` and then go figure out why something that shouldn't be happening is awesome. <3 Node.js, V8 and node-inspector
00:11 < clever> ryanrolds_w: i should install that...
00:12 < clever> currently, i just have a second node script saving stdout/err to arrays
00:12 < clever> and dumping them to mysql if it exits
00:12 < clever> along with auto-respawn
00:12 < ryanrolds_w> node-inspector is awesome. We are using Cast, which logs all of that. We also have critical events going off to loggly.
00:13 < ryanrolds_w> Sometimes you just need to break and step
00:13 < clever> pretty much ALL of my debuging is console.log
00:13 < ryanrolds_w> *er, logs all of the stdout and stderr.
00:13 < sirvon> if i want my users to be able to automatically create a subdomain that points to their sections what would this be calleD?
00:14 < ryanrolds_w> clever, How you debug something remotely that you don't have console logs in place?
00:14 < sirvon> whats the terminology used when talking about automatic subdomain creation...
00:14 < clever> ryanrolds_w: i'm either ssh'd in, or its running under that second script i mentioned
00:14 < clever> ryanrolds_w: which saves stdout to mysql and re-spawns it
00:15 < sirvon> dns
00:15 < sirvon> opsp
00:15 < sirvon> opps
00:15 < ryanrolds_w> clever, I'm working on an issue manifesting on a remote cluster of servers. I may not be able to reproduce the issue immediately.
00:15 < clever> ryanrolds_w: similar, i cant always reproduce the issue, i just log it to death
00:16 < ryanrolds_w> clever, node-inspector allows me to leave all the debug console logs out and debug on demand without restarting the service.
00:16 < clever> if i cant track it down, i add more logging to the related area and wait for another failure
00:16 < clever> right now, everything is set to just throw an uncaught error on major failure
00:16 < clever> causing node to edit
00:16 < clever> exit*
00:17 < s5fs> sirvon: i'm not aware of any terminology for dynamically creating dns entries
00:17 < clever> its nearing 1 week uptime between failures, the last one was due to dns
00:17 < clever> s5fs: dhcp and bind can do it, ive seen mention of it before
00:18 < s5fs> clever: yes, but is there a specific term for this?
00:18 < clever> s5fs: all clients connecting via dhcp would automaticaly get their hostname added to bind as a sub-domain
00:18 < clever> i forget what dhcp/bind call it, but dyndns.com does similar services
00:19 < sirvon> but is this not what tumblr does, when u sign up it ask you for name of a subdomain and it makes it....
00:19 < clever> ah, thats likely different
00:19 < clever> wildcards
00:19 < clever> *.tumblr.com == 123.123.123.123
00:20 < clever> then the server side script just looks at the Host: header
00:20 < s5fs> sirvon: again, i'm not sure there is a specific term for that functionality. you may be able to glean a marketing term though, but i'm not aware of one.
00:20 < clever> if all the sub-domains are managed by your own service, you can just use a wildcard record and never edit the dns
00:21 < sirvon> thanks yall gave me something go on
00:21 < s5fs> sirvon: np, sorry i couldn't give you something more specific
00:27 < pyrotechnick> i'm a coffeescripter and i just tried to write some javascript before becoming enraged and giving up. AMA
00:28 < s5fs> clever: i'm out, take care!
00:28 < clever> later
00:31 < Bryson> i have a question on dealing with req.on('end', ...), JSON.parse() inside that listener, catching errors for bad JSON (try/catch?), and putting valid JSON in a variable outside the listener. is somebody available to help?
00:41 < ChrisPartridge> pyrotechnick: have you slept yet?
00:41 < pyrotechnick> no i tried but was haunted by semicolons and braces
00:47 < topspin> so.... typescript
00:47 < pyrotechnick> it doesn't work with node so don't bother
00:48 < niggler> what's the best way to do performance testing in nod
00:48 < pyrotechnick> ab always goes alright
00:48 < pyrotechnick> but there's like seige and crap too
00:49 < pyrotechnick> the pedias has a good article
00:49 < pyrotechnick> under load testing or something
00:49 < pyrotechnick> or do you mean microbenchmarks?
00:49 < niggler> microbenchmark
00:49 < pyrotechnick> sub has one called like bigben or something
00:49 < niggler> testing a few rngs
00:49 < pyrotechnick> ava:~ pyro$ npm search benchmark
00:50 < pyrotechnick> etc.
00:50 < niggler> npm WARN Building the local index for the first time, please be patient lol
00:51 < topspin> why would javascript generated by typescript not run on node?
00:52 < pyrotechnick> it just doesnt work
00:52 < pyrotechnick> it's just one of those things
00:52  * topspin isn't buying it
00:54 < pyrotechnick> you can lead a horse to water topspin but you can't make it drink
00:55 < topspin> have you tried it?  running typescript generated javascript on node?
00:55 < pyrotechnick> it doesn't work why would i bother
00:56 < topspin> 'it doesn't work'... that can provoke rage in some :)
00:56 < pyrotechnick> it's better to be pissed off than pissed on
00:56 < ChrisPartridge> hah
00:57 < pyrotechnick> i write javascript because it's finally a viable option on both the server and client. AMA
00:57 < topspin> "You can install TypeScript compiler as a Node.js package via the NPM"... http://weblogs.asp.net/shijuvarghese/archive/2012/10/02/microsoft-typescript-a-typed-superset-of-javascript.aspx
00:57 < pyrotechnick> no that's misinformation
00:58 < pyrotechnick> look who writes that blog
00:58 < pyrotechnick> it's bias
00:59 < niggler> pyrotechnick: if you are doing an AMA, then "what do you think about this new thing called typescript"
00:59 < pyrotechnick> i think it's the Next Big Thing and i encourage all my competitors to use it
01:00 < pyrotechnick> everyone with half a brain will be leaving the free and open source community and falling gracefully into the comforting arms of microsoft
01:00 < pyrotechnick> held and protected from the other ones, the evil ones
01:00 < pyrotechnick> go back to sleep.
01:02 < pyrotechnick> "Why does TypeScript have be the answer to anything?"
01:02 < pyrotechnick> >.<
01:02 < pyrotechnick> look ma, no dynamics!
01:04 < pyrotechnick> woe to thee who calls that which is typed untyped and that which is untyped typed
01:04 < pyrotechnick> woe to thee
01:07 < Slade-> hey a node.js channel :D
01:07 < pyrotechnick> that's what it says on the door
01:07 < ChrisPartridge> soon to be typescript channel ;-)
01:07 < pyrotechnick> lucky typedscript doesn't work with node
01:08 < luite> hm when is the final specification expected? looks like they're planning parametric polymorphism :)
01:08 < topspin> pft, this is a coffeescript channel soon to be a typescript channel
01:08 < topspin> no one uses javascript
01:08  * Slade- doesnt know typescript or what it is
01:08 < pyrotechnick> it's a glitch in the matrix
01:08 < Slade-> there a nopaste site of choice for the channel?
01:08 < pyrotechnick> gist.github.com
01:08 < luite> Slade-: http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf
01:09 < ChrisPartridge> Don't click it!
01:10 < Slade-> oh, its sugary stuff.. all i want is lamba style functions in es5 and i'll be happy
01:11 < Circlepuller> all i want is better class syntax
01:11 < pyrotechnick> all i want is isolates
01:11 < topspin> i want pie
01:11 < Slade-> damn everyone wants something different
01:11 < Fishrock123> ^
01:11 < pyrotechnick> you must first create the universe
01:11 < ChrisPartridge> pie!
01:12 < Slade-> tho i think pie is the most interesting and rewarding of all these wishes
01:12 < janmower> so everyone wants a real programming language like java (ducks)
01:12 < pyrotechnick> that's what she said!
01:12 < Fishrock123> Apparently.
01:12 < luite> hm, i think static types are quite useful, but unfortunately it's still stuck with the relatively limited primitives that javascript has, only one 'number' type
01:12 < janmower> it's got 'script' in the name.  no programming there.
01:13 < Fishrock123> Idk. I think both fully object languages like Javacsript, and class languages ala Java have their own places.
01:14 < janmower> yea for sure, it's just when you ask a fish to ride a bicycle, everyone has a bad time.
01:14 < pyrotechnick> http://www.youtube.com/watch?v=lD_9eRfZrhI
01:15 < Slade-> so. I just wrote my very first node.js application.. I was wondering if any of you fine people would 
01:15 < Slade-> mind critiquing it
01:15 < Slade-> https://gist.github.com/176365a42f1b2f3640f3
01:15 < Slade-> index.js is the 'entry' point (i think thats the standard, but i'm just guessing
01:16 < pyrotechnick> LGTM
01:16 < pyrotechnick> it's rather idiomatic
01:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:17 < pyrotechnick> i think the stream stuff can be cleaned up a little but i'm no expert at that
01:17 < Slade-> that can't be accurate. because i wrote it without a single syntax error. logic error or typo.. SOMETHING, has to be wrong :/
01:18 < pyrotechnick> well it's probably susceptible to hacks like /../../file.ext
01:18 < Slade-> the regex prevents that
01:18 < Slade-> cant have 2 periods in your filename
01:18 < pyrotechnick> ok, there's some methods in the fs/path modules that make that stuff a bit more robust
01:19  * Slade- looks it up
01:19 < topspin> pyrotechnick: sry to be this way but i think you're wrong.  i'm running typescript just fine with node.
01:19 < pyrotechnick> that depends on your definition of fine
01:20 < topspin> ok, so we're past 'it doesn't work' then?
01:20 < pyrotechnick> know i tried to save you topspin
01:20 < pyrotechnick> know that much.
01:20 < topspin> lol
01:21 < pyrotechnick> all my love is lost in translation
01:21 < niggler> fuck coffeescript, fuck typescript
01:21 < niggler> fuck java
01:22 < topspin> fuck pie
01:22 < pyrotechnick> fuck the demiurge
01:22 < BennyLava> fuck niggler
01:22 < pyrotechnick> fuck T.G.A.O.T.U.
01:22 < niggler> actually, pie is a pretty underrated dessert
01:22 < pyrotechnick> fuck the holy trinity
01:22 < Lorentz> pie is a meal, not a dessert
01:22 < Lorentz> mmmm, meat pies...
01:22 < pyrotechnick> fuck the fabric of space-time
01:22 < niggler> meat pies are disgusting
01:22 < niggler> fuck meat pies
01:22 < pyrotechnick> fuck the fundamental forces of nature
01:22 < topspin> fuck trinities, holy or otherwise
01:22 < niggler> fuck BennyLava and his typescript-loving ways
01:23 < Slade-> pie isnt underrated. everyone knows its the best
01:23 < pyrotechnick> fuck The Word
01:23 < Slade-> i mean pie > cake
01:23 < BennyLava> niggler: I never said I loved it?
01:23 < niggler> ooh that's a tough one Slade- 
01:23 < niggler> shitty pie < shitty cake
01:23 < mscdex> the cake is a lie
01:23 < niggler> mediocre pie > mediocre cake
01:23 < BennyLava> cookies > pie > cake
01:23 < pyrotechnick> fuck The Game
01:23 < niggler> excellent cake > excellent pie
01:23 < Slade-> the cake is always a lie
01:23 < niggler> fuck cookies
01:23 < pyrotechnick> fuck Source
01:23 < niggler> cookies are the poor man's cake
01:24 < BennyLava> don't be silly
01:24 < topspin> niggler: can i haz yer cookies?
01:24 < Slade-> pyrotechnick: thanks for the feedback btw. looking into filesystem stuff now
01:24 < pyrotechnick> fuck thy neighbour
01:24 < pyrotechnick> fuck the system
01:24 < pyrotechnick> fuck the man
01:24 < pyrotechnick> fuck the machines
01:25 < topspin> fuck thermodynamics
01:25 < niggler> damn it, its too cold for ice cream
01:25 < pyrotechnick> fuck maxwell and his equations
01:25 < niggler> yet i have hankering for mint chocolate chip
01:25 < pyrotechnick> fuck Einstein and relativity 
01:25 < pyrotechnick> fuck superposition
01:25 < niggler> fuck dirac
01:25 < niggler> feynman, however, is the man
01:25 < pyrotechnick> fuck the cosmic microwave background
01:25  * Slade- wonders if pie > icecream
01:26 < BennyLava> ^ troll
01:26 < niggler> mint chocolate chip ice cream > P for all P in Pies
01:26 < niggler> however, there exist ice cream flavors which are inferior to all pies
01:27 < niggler> so it depends on what metric you use Slade- 
01:27 < niggler> minimax favors pies
01:27  * Slade- has had icecream pie.
01:27 < pyrotechnick> i just asked the clockwork elves about typescript
01:27 < pyrotechnick> AMA
01:27 < topspin> what say the Elves?
01:28 < pyrotechnick> they said don't give into astonishment
01:28 < Slade-> so is typescript going to replace cofeescript?
01:28 < niggler> how do you plan on cleansing yourself?
01:28 < BennyLava> Slade-: wtf
01:28 < niggler> fuck coffeescript
01:28 < niggler> fuck typescript
01:28 < topspin> oy
01:28 < BennyLava> those 2 aren't even remotely comparable
01:28 < niggler> both attempt to replace javascript in some way
01:28 < pyrotechnick> fuck quantum mechanics
01:28 < BennyLava> yes, and that's ALL they have in common
01:28 < niggler> fuck QFT
01:28 < pyrotechnick> fuck the macrocosm
01:29 < pyrotechnick> fuck the ToE
01:29 < chilts> I think Typescript is intended as an addition to JS rather than a complete replacement
01:29 < niggler> BennyLava: any attempt to replace javascript faces the plan9 problem
01:29 < astropirate> chilts, spread your lies elsewhere\
01:29 < chilts> heh
01:29 < BennyLava> niggler: I'm not familiar with said problem
01:30 < niggler> so after unix
01:30 < chilts> in other news AwsSum (my AWS library) is being used in the backend of Greenqloud's new management console : https://my.greenqloud.com/
01:30 < Slade-> isnt plan 9 where the aliens turn all the humans into zombies?
01:30 < niggler> the bell labs guys ventured on a new operating system
01:30 < niggler> plan 9 from bell labs
01:30 < Slade-> oh
01:30 < niggler> Slade-: its named after plan 9 from outer space
01:31 < niggler> and they made many improvements on unix
01:31 < niggler> the problem is that unix was good enough for most use cases
01:31 < topspin> they fixed its design flaws
01:31 < pyrotechnick> TODAY A YOUNG MAN ON ACID REALISED
01:31 < pyrotechnick> there is no such thing as death
01:31 < pyrotechnick> life is only an illusion
01:31 < topspin> but the analogy is poor
01:31 < niggler> the design flaws werent showstoppers though
01:32 < pyrotechnick> we're a single consciousness experiencing itself subjectively
01:32 < pyrotechnick> and we're the imagination of ourselves
01:32 < niggler> javascript itself is good enough
01:32 < niggler> good enough for most things at this point
01:32 < niggler> is there something you can point to that typescript or coffeescript can do that fundamentally cannot be accomplished using javascript alone
01:33 < topspin> niggler: no.  by definition
01:33 < ChrisPartridge> pyrotechnick: perhaps you should join #philosophy
01:33 < niggler> D the programming language faces the same problem
01:33 < Slade-> hm by that logic wouldnt we all be writing our webpages in asm?
01:33 < gbhatnag> hi all - using mocha + should for testing and looking for an easy way to issue HTTP requests against a running node server. Know of any good modules to look into, or is it best to stick with the http module as documented here: http://docs.nodejitsu.com/articles/HTTP/clients/how-to-create-a-HTTP-request ?
01:34 < topspin> Slade... stop your trolling
01:34  * Slade- was unaware he was trolling
01:34 < niggler> there are reasons to avoid it Slade-, including portability
01:35 < ChrisPartridge> gbhatnag: There is superagent, and request libaries - otherwise phantomjs and zombiejs are pretty cool
01:35 < Slade-> niggler: sure, there are reasons for coffeescript to exist as well, portability, reduction in errors, speed of development
01:35 < gbhatnag> ChrisPartridge: thanks! checking 'em out now
01:35 < topspin> there he goes again.  making good arguments
01:35 < niggler> explain how coffeescript improves portability
01:36 < Slade-> err not portability
01:36 < niggler> reduction in errors is not a solid argument given what seems like a community competency in javascript
01:36 < niggler> portability is a fair argument, but i fail to see how coffeescript addresses it
01:37 < Slade-> it doesnt, i meant to write 'not portability, but'
01:37 < other_guy> what is the point of TypeScript?
01:37 < other_guy> faux-static analysis?
01:37 < Slade-> i'm not a coffeescript advocate by any means, but i see why it exists
01:37 < niggler> it exists because someone wanted to code in what looks like a functional language
01:38 < topspin> Slade: didn't you let him snow you on portability?
01:38 < topspin> *did
01:38 < other_guy> Because a Rubyist can't stand using anything that isn't Ruby so they make a DSL or transformer that makes every other language seem like Ruby?
01:38 < niggler> other_guy: i have an answer
01:38 < niggler> remember when oracle came out with their nosql server?
01:38 < Slade-> topspin: nah 
01:38 < other_guy> Да
01:39 < niggler> i think its to say "microsoft" is behind something
01:39 < pyrotechnick> ChrisPartridge: #philosophy is filled with philosophers
01:39 < other_guy> ah
01:39 < Slade-> niggler: you mean when they bought berkeleydb?
01:39 < niggler> and topspin im not going to stick my hand in the coffeescript circlejerk
01:39 < topspin> a compiler (typescript, coffeescript, whatever) can overcome limitations in javascript implementations, improving portability.
01:39 < niggler> topspin: they introduced more ambiguities
01:40 < topspin> pish posh
01:40 < Slade-> topspin: this is true, not an argument i was trying to make.. but it comes along the same lines of jquery making things more portable
01:41 < Slade-> other_guy: i dislike ruby btw
01:41 < other_guy> topspin… debug coffeescript… it's terrible.  Literally every problem is an exaggerated version of having to pick apart someone else's code to make sense of it before you can resolve the problem.  
01:41 < niggler> ok here's an example topspin
01:41 < niggler> oh topspin left
01:42 < niggler> foo() -> 'bar'
01:42 < niggler> is NOT THE SAME 
01:42 < niggler> as foo () -> 'bar'
01:42 < Slade-> i like lambdas too :(
01:43 < niggler> they fucked it up Slade- 
01:44 < other_guy> I like Ruby fine, but here's the thing about it… it already exists.  If you want to use a language that's Ruby-like, then use Ruby… I don't see the point of compiling a Ruby-like syntax to Javascript and then compiling Javascript to bytecode.
01:44 < niggler> thank you other_guy 
01:45 < other_guy> niggler, I have a JS nuance issue that you might be able to help with
01:45 < niggler> ok
01:45 < Slade-> hmm. sockjs > socket.io ?
01:46 < other_guy> niggle, one sec… gisting it
01:47 < Slade-> entering the world of node.js for the first time. gotta figure out whats the good things to use, and whats not ;p
01:48 < Slade-> everyone seems to love the express
01:48 < niggler> fuck express
01:48 < niggler> actually express is a decent entry point
01:49 < niggler> its not as bad as some of the other frameworks
01:49 < niggler> meteor (shudder)
01:50 < Slade-> i couldnt quite get it to play as nice as i wanted with sockjs 
01:50 < other_guy> niggler https://gist.github.com/64e8f4bb39090236455e
01:50 < other_guy> basically I want references, but I don't think I can do it.
01:50 < other_guy> I could easily establish that trick in C
01:52 < other_guy> I can fake it with getter's/setter's, but it's a messy process.
01:53 < other_guy> brb
01:54 < niggler> other_guy: there's a way to fake it with an object
01:55 < pyrotechnick> ChrisPartridge: oh my god
01:55 < pyrotechnick> ChrisPartridge: that place is like purgatory
01:56 < ChrisPartridge> pyrotechnick: ??
01:56 < pyrotechnick> "all links are spam therefor i'm not clicking it"
01:56 < pyrotechnick> is a summary of their attitude
01:56 < ChrisPartridge> Hah
01:57 < Slade-> so is there a good/preferred way of having a 'config' file? for a node.js app?
01:57 < ChrisPartridge> Slade-: just module.export an object, or load a .json file and parse it - generally what I do
01:59  * Slade- looks up how to load a json file
02:00 < other_guy> niggler
02:00 < other_guy> back
02:00 < niggler> so what you can do other_guy 
02:00 < ChrisPartridge> Slade-: If its a config that the app requires, just JSON.parse(fs.readFileSync(configPath))
02:00 < niggler> is create an object and assign both parts to it
02:00 < niggler> http://pastebin.com/1AFBx3VB
02:01 < ChrisPartridge> Slade-: actually i think you can just require it
02:01 < other_guy> checking it out
02:02 < niggler> Slade-: require it
02:02 < Slade-> require the config file? hm o
02:02 < niggler> put it in a javascript file in the node_modules directory and require it
02:02 < niggler> i set something up so that i can host from the same directory
02:02 < niggler> *using an apache server
02:02 < niggler> so if you put the file locally itll pick up a different file
02:04 < Slade-> hmm that reminds me. i'm using sockjs.. gotta figure out if its compatible with apache or nginx or something infront of it
02:05 < Slade-> prolly not nginx :/
02:05 < other_guy> niggler, that solution requires digging into "v:" in every object, yeah?
02:05 < other_guy> Slade-, HAProxy
02:05 < niggler> "blah" is a string literal
02:06 < Slade-> other_guy: http://haproxy.1wt.eu/ ?
02:06 < other_guy> yes
02:06 < niggler> so the second assignment is a copy and not an alias
02:07 < other_guy> fast, small, and handles both HTTP and straight TCP proxying.
02:07 < niggler> other_guy: its lame but afaict there's no way around it
02:07 < Slade-> other_guy: and it handles http/websocket?
02:08 < other_guy> Slade-, yes
02:08 < other_guy> niggler… got it.
02:08 < other_guy> Yeah, this is for an outward facing API, so I don't think i can get away with that esoteric implementation detail
02:08 < other_guy> Grrrr.
02:08 < niggler> what are you tryin to do?
02:08 < niggler> overall
02:09 < niggler> there may be a way to rework the api
02:09 < other_guy> I have an object the contains a metadata property where there's a bunch of properties I don't want to have to access through obj.metadata.some_property
02:09 < other_guy> For everything inside obj.metadata
02:09 < other_guy> I'd like obj.some_property to be a suitable alias for it.
02:10 < other_guy> Which I can do using getter/setters for obj.some_property
02:10 < niggler> instead of setting the metadata
02:10 < other_guy> yeah
02:11 < niggler> why not push the assignment to the object and have the metadata do the getter/setter
02:11 < niggler> esp if the public interface isnt aware of the metadata object existence
02:11 < other_guy> I'm not following :-(
02:12 < niggler> do you plan on advertising both obj.blah and obj.metadata.blah?
02:12 < niggler> or just obj.blah ?
02:12 < niggler> in the latter case you could put get/set on the metadata and that wont disrupt the api
02:13 < other_guy> well obj.blah is necessary for other internal implementation details… oh wait I think I see what you're saying.
02:13 < other_guy> Nope, nevermind lost it menally
02:13 < other_guy> mentall*
02:13 < other_guy> gah
02:14 < newjonaslund> hi. what's the general opinion for reliable vps to run nodjes, been using linode, is great but a bit expensive..
02:14 < niggler> im saying other_guy that the internal implementation can be a mess
02:14 < niggler> if you are concerned
02:15 < other_guy> niggler… well "metadata" is a property that will be set internally every time.
02:15 < niggler> you can rework that part
02:15 < other_guy> So I don't have to advertise it
02:16 < other_guy> Hmmm… the things inside metadata basically translate to HTTP headers
02:17 < other_guy> so the response comes back, they get cracked, and then stuffed into metadata
02:17 < niggler> the general rule, even in C, is that you should never have pointers undercutting the interface
02:18 < niggler> right other_guy so instead of putting them in that metadata object why not into the main object
02:18 < other_guy> because later everything in metadata needs to go back through an "uncracking" process to create HTTP headers
02:19 < other_guy> and the schema for what's in metadata isn't always the same.
02:19 < other_guy> It's always the same possible set of values, but any one object will only contain a subset of them
02:19 < niggler> and whats the reason for having the api access method involve what looks like property and not like function calls
02:19 < niggler> i.e. why not just make the api require function calls
02:20 < other_guy> yeah, that's essentially what it does now.  Some things you can fucking with like properties, well really anything if you know where you're looking in the metadata collection.
02:20 < other_guy> and then there are some functions for assisting with some of the more complicated bits of that
02:20 < other_guy> for instance
02:21 < other_guy> there's always an obj.metadata.vclock
02:21 < other_guy> and it's always named that
02:21 < other_guy> however there's also the possibility of having an obj.metadata.index._____
02:22 < other_guy> where there can be a bunch of different named indexes
02:22 < other_guy> actually its worse than that
02:22 < other_guy> it's obj.metadata.index___.bin or obj.metadata.index___.int
02:22 < other_guy> and then the underlying values
02:23 < other_guy> there are helper methods when creating the indexes to properly add .bin or .int to where you're saving your indexed value
02:23 < other_guy> the trouble comes when getting them back out.
02:23 < other_guy> I can guess the type going in… if it's a string then it's .bin
02:23 < other_guy> if it's not then it's .int
02:24 < other_guy> if a user asks for the value of obj.metadata.index___, I want to send them the values stored in .bin if it exists or .int if it exists
02:25 < other_guy> and… I think I just discovered a better more localized getter/setter pattern for just .index
02:25 < other_guy> after explaining all that
02:42 <@Nexxy> s5fs ping
02:48 < sinclair> TypeScript is awesome
02:48 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:48 < sinclair> it supports all the useful things i use daily, 
02:50 < mscdex> but it doesn't provide 100% cowbell
02:50 < ChrisPartridge> oh dear, there's already people idling in #typescript
02:51 < MitchW> omg, /joins
02:52 < Zak> MitchW: filter them out. If your client doesn't support that, get a better client.
02:52 < MitchW> filter what out?
02:52 < Zak> the /joins
02:53 < Zak> oh nm
02:53 < MitchW> I was commenting on ChrisPartridge comment that people were in #typescript ;)
02:53 < Zak> yeah, my bad. I read that out of context.
02:53 < sinclair> TypeScript is awesome
02:53 < sinclair> it makes JavaScript...useable
02:53 < ChrisPartridge> sinclair: How much are microsoft paying you? :)
02:54 < Zak> Javascript is very usable already
02:54 < sinclair> ChrisPartridge: you will be using TypeScript...eventually :)
02:54 < MitchW> sinclair: agreed, I spent WAY too much time trying to get the various type annotation extensions for things like coffeescript to work
02:54 < livinded> anyone got a freebsd box and/or solaris/smartos/openindiana box they can test something on for me?
02:54 < ChrisPartridge> sinclair: Over the past four years I have moved this business completely away from developing with microsoft technologies, never going back :)
02:54 < Zak> what does typescript offer me?
02:54 < pyrotechnick> types
02:54 < pyrotechnick> and scripts
02:54 < pyrotechnick> and stuff
02:54 < sinclair> ChrisPartridge: sounds like a terrible mistake
02:54 < pyrotechnick> HA
02:54 < sinclair> ChrisPartridge: your call tho
02:55 < MitchW> Zak: types, interfaces, well defined/standardised inheritance model
02:55 < pyrotechnick> it's like a straightjacket
02:55 < MitchW> and by 'types' I mean type annotation and inference, and checking
02:55 < pyrotechnick> or a padded room
02:55 < MitchW> which means when you change some low level core function that 60 of your other files all use and you forget to update one to pass in the new type, you get a nice compiler error instead of 'one day' some user encountering a JS error :)
02:56 < pyrotechnick> yeah you don't need tests
02:56 < sinclair> MitchW: i keep finding new stuff actually
02:56 < pyrotechnick> tests are dead
02:56 < pyrotechnick> long live compiler warnings
02:56 < ChrisPartridge> faith driven development!
02:56 < Zak> if you're not writing tests, you're doing it wrong
02:57 < Zak> unless it's prototyping
02:57 < Zak> a throw-away prototype
02:57 < pyrotechnick> if you're not prototyping in js you're doing it wrong
02:57 < Zak> i mean, prototyping in the non-javascript sense
02:57 < sinclair> MitchW: var canv = <HTMLCanvasElement>document.createElement("canvas");
02:58 < sinclair> MitchW: that is crazy useful
02:58 < Zak> so TypeScript is a microsoft thing?
02:58 < MitchW> ISO testing is pretty hard for your average user to actually do, it requires fuzzy testing mechanics, and generating terrabytes of data for each test
02:58 < sinclair> Zak: yeah, totally Microsoft
02:58 < MitchW> ... 'or', you could restrict the inputs w/ annotations and simpify the tests...
02:58 < Zak> yuck
02:58 < sinclair> Zak: don't use it then, and waste your time with writing hacked up JS
02:59 < Zak> who says i hack JS?
02:59 < deoxxa> oh are people discussing typescript now
02:59 < sinclair> Zak: i do
02:59 < Zak> why would you jump to that conclusion?
02:59 < deoxxa> typescript is the new coffeescript
02:59 < TehShrike> lol
02:59 < ChrisPartridge> deoxxa: its coffeescript all over again
02:59 < TehShrike> deoxxa: that's just what I was going to say
02:59 < ChrisPartridge> hah
02:59 < TehShrike> That's hilarious
02:59 < deoxxa> GOOD LUCK GUYS
02:59 < TehShrike> The new instant-trollbait
02:59 < sinclair> Zak: JavaScript is far too lose, TypeScript tidies all that up
02:59 < MitchW> in any case, no use discussion an age old debate in here - plenty of internet resources on dynamic vs. static typing, ducktyping, pros/cons, from both technical and engineering perspectives
03:00 < TehShrike> ^
03:00 < deoxxa> but more importantly
03:00 < deoxxa> does typescript require semicolons?
03:00  * MitchW rolls eyes
03:00 < Zak> sinclair: "use strict";
03:00  * ChrisPartridge steps away from the conversation
03:00 < TehShrike> deoxxa: rotfl
03:00 < Zak> JS is becoming stricter and stricter
03:00 < Zak> there's no need to reinvent the wheel
03:01 < sinclair> MitchW: what makes Python reasonable for large projects, vs JavaScript, which generally is considered crap for large projects
03:01 < TehShrike> It is?
03:01 < mscdex> i've never seen a ducktyping!
03:01 < deoxxa> i like these new languages appearing all the time, they're awesome as testing grounds for new javascript features
03:01 < TehShrike> Aye!
03:01 < MitchW> sinclair: as someone who uses python for his day job on a ~200k LOC project, it's NOT usable AT ALL for large projects.
03:01 < livinded> anyone got a freebsd box and/or solaris/smartos/openindiana box they can test something on for me?
03:01 < sinclair> MitchW: haha
03:01 < MitchW> it's horrible, the fact we use python here is the single largest impediment to our progress
03:01 < deoxxa> i just don't like when people go "you're an idiot if you are/are not using <x>"
03:01 < Zak> i don't know why you would assume a language isn't suitable for large projects
03:01 < livinded> just need a realy UNIX to check behavior
03:01 < larryapplegate> what about a mac laptop?
03:01 < Zak> wouldn't that depend on what the problem is?
03:01 < sinclair> MitchW: did you follow the PEP8?
03:02 < livinded> larryapplegate: I want to compare behavior of os x, linux, and normal unix
03:02 < sinclair> MitchW: im not serious, if there is a reason for python being an issue, what would it be?
03:02 < MitchW> sinclair: something similar, I believe we follow the google style guide
03:02 < livinded> os x behaves different than linux and I want to know if it's a bsd/unix thing or if it's just apple being retarded
03:02 < larryapplegate> sure, i am an IOS programmer trying to get into Node
03:02 < larryapplegate> not ued to command line
03:02 < sinclair> MitchW: Why is python hindering your progress?
03:03 < MitchW> sinclair: no type checking as part of a standardised 'compilation'/pre-run checking step.  we get typing issues all over the place with such a large codebase
03:03 < TehShrike> It's all about the framework you build for yourself in your giant application
03:03 < Zak> "everybody use C. It's crossplatform and fast. Therefore it is better than every other language"
03:03 < livinded> Zak: +1
03:03 < Zak> is the same as "Hey, everybody use a hammer. It is strong and can hit things. Use it for every job."
03:03 < TehShrike> Zak: no, screw you, screwdrivers for life!
03:03 < Zak> haha
03:03 < TehShrike> ;-P
03:03 < Zak> +1 TheEmpath 
03:03 < Zak> err.
03:03 < sinclair> anyway, TypeScript makes JavaScript ... practical
03:04 < Zak> * TehShrike +1
03:04 < TehShrike> It's weird, CoffeeScript and TypeScript are instant trollbait, but nobody ever gets mad when talking about LispyScript
03:04 < Zak> it sounds like TypeScript.. makes Javascript into the language that people are used to understanding
03:04 < livinded> let's just make a type safe, asynchrounous language that doesn't suck?
03:04 < Zak> e.g. Java/C#
03:04 < TehShrike> I like type checking
03:04 < livinded> why retain all the cruft and bad design of JS?
03:04 < sinclair> Zak: that's a good thing btw
03:04 < MitchW> Zak: essentially, yes :P
03:04 < TehShrike> Though I don't know if I'll find a project I want to write in TypeScript
03:05 < sinclair> TehShrike: i don't know why you wouldn't use TypeScript for everything
03:06 < MitchW> livinded: well, lets break compatibility - and ou can rewrite the billions of lines of JS into our new language, kay? :)
03:06 < TehShrike> sinclair: because I want to write things that are accessible to (as in, can be contributed to easily by) people who write JavaScript, but not some variant
03:06 < livinded> MitchW: we're breaking compatability anyway
03:06 < TehShrike> But it's not that different, and I'm interested, so I may try it anyway
03:06 < MitchW> livinded: no, we're not. TypeScript is a superset of JS, normal JS is TypeScript
03:06 < pyrotechnick> i just converted my entire codebase to typescript and now microsoft has abandoned it for the Next Big Thing. AMA
03:06 < sinclair> TehShrike: that's a weak reason
03:06 < TehShrike> sinclair: I know
03:07 < TehShrike> Thus, why I may do it anyway
03:07 < MitchW> pyrotechnick: TypeScript is opensource...
03:07 < pyrotechnick> yeah like .net is opensource
03:07 < pyrotechnick> lol
03:07 < TehShrike> eh?
03:07 < TehShrike> .net isn't open source in any way, to my knowledge
03:07 < pyrotechnick> MVC
03:07 < MitchW> pyrotechnick: no, .net is an open specification, mono is opensource.
03:07 < pyrotechnick> "opensource"
03:07 < pyrotechnick> no you guys you guys
03:07 < niggler> fuck .net
03:07 < MitchW> typescript, the spec, the source, the compiler, is all open source
03:07 < pyrotechnick> LOL
03:08 < TehShrike> There's a reason why you pay for Visual Studio, and don't get .net when you use the Express version
03:08 < sinclair> pyrotechnick: are you mad that MS have done something incredibly useful, and puts all your existing tech and common practices to shame?
03:08 < TehShrike> sinclair: oh come on, don't get personal :-x
03:08 < pyrotechnick> i'm devastated
03:08 < pyrotechnick> considering suciide
03:08 < Zak> me too
03:08 < TehShrike> But yes, typescript is open source, .net is not
03:08 < pyrotechnick> i'm already cutting
03:08 < TehShrike> And that's fine
03:08 < Zak> pyrotechnick: down the stream not across
03:08 < sinclair> TehShrike: the entire ASP.NET Stack is now open source too
03:08 < Zak> you don't want to make a mess with no result, like typescript
03:08 < TehShrike> I like the idea of TypeScript a lot more than I like the idea of Dart
03:09 < TehShrike> sinclair: ah, that's cool
03:09 < MitchW> TehShrike: likewise
03:09  * TehShrike prays he never has to use asp.net
03:09 < MitchW> pyrotechnick: also, as someone who uses mono in commercial multi-million dollar applications for gov/defense - and who's contributed to mono itself, I'm pretty sure I know what I'm talking about :P
03:09 < sinclair> TehShrike: tbh, i only used Routing and Razor templating out of MVC
03:09 < pyrotechnick> THAT'S WHY WE CAN'T HAVE NICE THINGS
03:09 < MitchW> also pretty sure our layers, and lockheed martin's lawyers - who've looked into it all for us, also know what they're talking about -but whatevs :P
03:10 < pyrotechnick> yeah man lawyers are the bomb
03:10 < pyrotechnick> praise moses
03:10 < TehShrike> Who cares about .net anyway, I write MFC! ;-P
03:10 < sinclair> TehShrike: you know what, i hate to admit it, but ASP.NET User Controls are still insanely helpful and fast to develop in certain situations
03:11 < sinclair> TehShrike: the rest of the old ASP.NET Forms stack can die tho
03:11 < MitchW> TehShrike: fuck MFC, I use 16bit win api
03:11 < pyrotechnick> Nexxy: we
03:11 < TehShrike> MitchW: :-D
03:11 < pyrotechnick> we're under attack
03:11 < TehShrike> MitchW: whenever I peer under the hood, I get scared
03:11 < newjonaslund> hi, anyone got the iptables rule for directing port > 1024 to port 80?
03:11 < MitchW> what's this 32bit word you speak of? :P
03:11 < niggler> i need something like global variables, except i see a 10x retardation.  any workarounds?
03:11 < pyrotechnick> bombarders to your stations
03:11 < niggler> pyrotechnick: bombardiers
03:12 < TehShrike> Huh, I never noticed that R in the middle of the word before
03:12 < pyrotechnick> alright yuri
03:12 < niggler> bombardier is the official rank
03:13 < niggler> bombarder is a stupid bombardier
03:13 < pyrotechnick> look man
03:13 < TehShrike> A bombarder throws rocks, a bombardier drops bombs
03:13 < pyrotechnick> take it up with apple's dictionary
03:13 < TehShrike> lol
03:13 < pyrotechnick> i'm not the linguist you're looking for
03:14 < niggler> bombarder is a word
03:14 < niggler> but you are referring to the wrong thing
03:14 < pyrotechnick> fuck niggler
03:14 < niggler> though there are stranger words
03:14 < TehShrike> substack: were you thinking of "upman" when you named the upnode project?
03:14 < niggler> like cleave
03:14 < TehShrike> cleave is a good one
03:14 < MitchW> time for me to start looking into elasticsearch stuff for node methinks :S
03:15 < TehShrike> defibrulator is a good one too
03:15 < niggler> the opposite is flammable
03:15 < niggler> defibrillator TehShrike 
03:15 < niggler> if oyu are referring to the heart device
03:15 < TehShrike> Ah yes, thank you
03:16 < niggler> flammable = inflammable 
03:16 < niggler> which is a real oddity
03:16 < TehShrike> heh
03:16 < TehShrike> What's the other word like that
03:16 < TehShrike> That people always mess up
03:16 < pyrotechnick> okay you gotta give it to those typescript guys
03:17 < pyrotechnick> they truly do believe in it
03:17 < pyrotechnick> they're not just misled
03:17 < pyrotechnick> they're quite aware of their deathmarch
03:17 < niggler> carnation/incarnation
03:17 < sinclair> pyrotechnick: nodejs without typescript "IS" a deathmarch
03:18 < pyrotechnick> HEAR THAT ISAACS/RY
03:18 < sinclair> pyrotechnick: typescript is exactly what node needed
03:18 < niggler> ladies, please
03:18 < sinclair> it brings sanity to JavaScript
03:18 < niggler> im waiting for a 1.0 to node
03:19 < niggler> *node 1.0
03:19 < sinclair> remembering that JavaScript was never intended to be used as anything other than a basic scripting language
03:19 < pyrotechnick> dude
03:19 < niggler> same could be said about php
03:19 < niggler> and perl
03:19 < niggler> and awk
03:19 < pyrotechnick> you need to smoke some salvia or bump some DMT or something
03:20 < pyrotechnick> you're building a prison for your mind
03:20 < sinclair> pyrotechnick: i guarantee you will be using TS in 6 months
03:20 < sinclair> pyrotechnick: perhaps you just need Ryan to give it the thumbs up?
03:20 < MitchW> sinclair: chill dude, you're gonna start rubbing people the wrong way and you'll get kicked
03:21 < MitchW> take it to a more appropriate channel :P
03:21 < pyrotechnick> no man
03:21 < pyrotechnick> leave him
03:21 < pyrotechnick> he can see the future
03:21 < pyrotechnick> my future
03:21 < MitchW> lol
03:21 < pyrotechnick> i'm actually
03:21 < pyrotechnick> my mind's fucking blown
03:21 < sinclair> nah, im cool
03:21 < pyrotechnick> this guy's a prophet
03:21 < pyrotechnick> tell me more
03:21 < deoxxa> > i guarantee you will be using TS in 6 months
03:21 < deoxxa> lolllllllllll
03:21 < pyrotechnick> STOP LOOKING FOR THE MOSHIACH 
03:21 < mscdex> teamspeak?
03:22 < pyrotechnick> I JUST FOUND HIM HERE ON IRC
03:22 < sinclair> stop using caps please
03:22 < niggler> are you bent over a barrel yet pyrotechnick 
03:22 < pyrotechnick> MY CUP OVERFLOWETH
03:22 < niggler> we need a more profane javascript
03:23 < user123> Hi I need to post to an API via node and was wondering if using Connect vs just plain Node would be a preferred way to implement for readability, etc.
03:23 < MitchW> there is 'some' truth in what sinclair says I guess
03:23 < pyrotechnick> i guarantee you will all by writing pyroscript in 6 months
03:23 < livinded> niggler: I agree
03:23 < niggler> motherfuckinscript
03:23 < niggler> where we replace every semicolon with motherfucker
03:23 < niggler> or bitch
03:23 < MitchW> w/ ECMA Script 6 not that far away, most of what TypeScript is will be normal JS soon enough
03:23 < livinded> javascript is too fucked up to not have profane keywords
03:23 < niggler> var x = 1 bitch
03:24 < pyrotechnick> i guarantee you pyroscript will replace C, C++, D, ruby, python, perl, PHP, JS, CoffeeScript
03:24 < pyrotechnick> i guarantee you people will bow before my ineffable wisdom
03:24 < niggler> fuck D
03:24 < niggler> fuck php
03:24 < niggler> fuck coffeescript
03:24 < niggler> fuck ruby
03:25 < niggler> fuck c++
03:25 < niggler> fuck perl
03:25  * sinclair enjoys watching Microsoft naysayers defend the indefensible
03:25 < pyrotechnick> you won't be talking like that once you've taken the fruit from the tree of pyro
03:25 < niggler> i think C and JS are the only acceptable languages in that list
03:25 < niggler> oh yeah, fuck python
03:25 < livinded> what about lisp?
03:25 < pyrotechnick> do you touch yourself when you enjoy watching us sinclair?
03:25 < mmalecki> "i guarantee you will be using TS in 6 months" ugh
03:25 < niggler> fuck lisp
03:25 < a_meteorite> what about brainfuck? c'mon, I'm dying to know!
03:26 < pyrotechnick> HE GUARANTEES IT
03:26 < mmalecki> this sentence is so wrong on so many levels
03:26 < mmalecki> OH OKAY THEN
03:26 < pyrotechnick> he will actually come to your house
03:26 < pyrotechnick> and make you code TS by fource
03:26 < pyrotechnick> resistance is futile
03:26 < pyrotechnick> he guarantees it
03:26 < niggler> in fact livinded the only functional language i find acceptable is standard ML
03:26 < mmalecki> damn man. but I like my javascript the way it is, without type errors
03:27 < niggler> what happened to errno
03:27 < niggler> errno was so simple
03:27 < pyrotechnick> it's too late for all that nonsense
03:27 < pyrotechnick> TS's takeover has been guaranteed
03:27 < niggler> pyrotechnick hide your kids, hide your wife?
03:27 < pyrotechnick> throw away your bibles
03:27 < pyrotechnick> burn your children and wives
03:27 < pyrotechnick> you have TS now
03:28 < sinclair> pyrotechnick: it is amusing that you would reject a open source project on the basis it was developed by Microsoft. When in fact, the project will make your life so much simpler, make your projects quicker to develop, easier to maintain, and gear you up for a ES6 spec. 
03:28 < MitchW> mmalecki: well, TS lets you 'not' annotate types - you can still go typeless inTS
03:28 < pyrotechnick> simple minds
03:29 < mmalecki> so what's the "profit" of TS if I don't annotate types?
03:29 < niggler> open source != magical
03:29 < sinclair> niggler: people i think forget that
03:29 < MitchW> mmalecki: ECMA6-ish stuff like OO, inhertiance, function pointers, etc
03:29 < pyrotechnick> do you guartantee that too sinclair or is that wild speculation?
03:30 < sinclair> pyrotechnick: guarantee what?
03:30 < mmalecki> yeah, built-in OO is a removed value. JavaScript has no oo system, which is why it's so flexible. you can use prototypes/clasical inheritance/whatever
03:31 < pyrotechnick> i guarantee you don't need that flexibility
03:31 < pyrotechnick> it makes your life more complex and your projects longer to develop
03:31 < sinclair> mmalecki: that's fine and all, and TS doesn't prevent you from using all your JS tricks
03:31 < mmalecki> it isn't application-scale
03:32 < pyrotechnick> so how much are they paying you sinclair?
03:33 < pyrotechnick> can i get bribed too?
03:33 < pyrotechnick> everyone has a price even me
03:33 < sinclair> pyrotechnick: TS is free, and im exciting about it as the primary issue i had with node was the JavaScript part
03:34 < ljharb> sinclair: just like with coffeescript, not knowing javascript means you'll have trouble with typescript.
03:34 < sinclair> pyrotechnick: specifically, building large applications with node, 
03:34 < sinclair> pyrotechnick: its almost enough for me to drop python and .net in favor of a node stack.
03:35 < pyrotechnick> were you this evangelical about those when you found them too?
03:35 < sinclair> pyrotechnick: ive always been keen on .NET, python i liked in the context of scalability on AppEngine
03:35 < pyrotechnick> did you guarantee everyone would be using .net or python too?
03:36 < pyrotechnick> why do you feed trolls?
03:36 < pyrotechnick> i'm getting full
03:36 < sinclair> no, but i did think at one point, managed runtimes would be what everyone would be developing on at some point. 
03:36 < sinclair> Dart is an example of that, but i don't like Dart
03:36 < mmalecki> god no.
03:36 < mmalecki> I like my operating system, really...
03:36 < ljharb> dart is awful.
03:37 < mmalecki> and I like my graphics card drivers
03:37 < pyrotechnick> go on
03:37 < mmalecki> I don't want people to stop wanting to develop them
03:37 < sinclair> mmalecki: what does a managed runtime have to do with your graphics card drivers?
03:38 < mmalecki> sinclair: graphics card drivers can't be written in managed runtime. so can't many applications, including my OS and everything involving direct access to hardware or HPC
03:38 < sinclair> mmalecki: yes, but managed runtimes allow you to interop into native code
03:39 < sinclair> mmalecki: and lets be honest here, 99% of the actual work you do does not require you to tinker around at the hardware level. 
03:39 < sinclair> mmalecki: (unless that's your job)
03:39 < mmalecki> obviously it doesn't. but for kernel people, it does
03:39 < mmalecki> you can't write everything in managed runtime
03:39 < mmalecki> that's my point
03:40 < sinclair> mmalecki: that's not entirely true
03:40 < sinclair> mmalecki: but true enough
03:42 < sinclair> mmalecki: i don't necessarily see the Dart runtime and JS/TS as mutually exclusive. If TS can compiler to JS, that's fine, but if TS can compiler to IL, that is also fine
03:43 < sinclair> mmalecki: anyway, managed runtimes offer a lot more than just GC :)
03:50 < MitchW> mmalecki: the value adding of OO in ECMAScript 6 comes w/ the module system - you're forced into using the same OO system the module uses (which could be incompatible w/ another module you use) w/ ECMASCript 3 prototype chains vs. alternatives
03:50 < MitchW> 'forced'... maybe encouraged is the right word
03:50 < MitchW> same deal now anyway, try to pass your type to a function which doesn't new it properly or some such and bad stuff (tm) happens
03:51 < MitchW> then worse, you update that module you use one day, and it changes to what you originally wanted, but you don't know - and it breaks again everywhere you used it ... ugh, why do I use JS agian >.<  memories of days and days wasted on some larger projects
03:59 < Raynos> Next time someone says "use promises" tell them "promises are like streams but less awesome ( https://github.com/Raynos/promise-stream#promise-stream )"
03:59 < topi`_> lots of discussion here. does anyone have experiences with nodejs-mysql and binary data? I think I am witnessing some kind of data corruption (wrong sha1sums before/after DB insertion)
04:00 < ljharb> Raynos: but simpler and easier to understand imo.
04:00 < Raynos> ljharb: oh cmon.
04:00 < Raynos> Look at the streams example.
04:00 < larryapplegate> I am looking for some help on adapting a simple node server for an Android client that uploads photos to serve an IOS client that also uploads photos.
04:00 < Raynos> streams are way simpler then promises
04:00 < larryapplegate> I'm starting with this code: https://github.com/danysantiago/NodeJS-Android-Photo-Upload
04:01 < ljharb> Raynos: just like async is a huge context switch, so too are streams, and i think a bigger one. i'm not saying people shouldn't end up there, but it's a big jump.
04:01 < Raynos> ljharb: I had to read and implement the promises/A spec. Now that was a huge context switch. Promises are crazy
04:02 < ljharb> Raynos: the spec is certainly crazy. but using promises isn't, at all
04:02 < Raynos> streams are easy to understand at the high level. "Streams are like arrays but on steriods, async & arbitary size ( https://github.com/Raynos/chain-stream#example )"
04:03 < ljharb> Raynos: so far (i haven't used them yet) it feels like they'll be harder to use because it's harder to reason about conceptually for me than promises..
04:03 < Raynos> what makes them hard?
04:04 < ljharb> if i knew that it wouldn't be hard anymore :-p
04:04 < ljharb> like i said, i haven't used them in a project yet.
04:04 < Raynos> A readable stream is a glorified array
04:04 < ljharb> possibly i'll get it when i do
04:04  * sinclair high fives MitchW
04:04 < Raynos> https://gist.github.com/3791742
04:05 < Raynos> a writable stream is an asynchronous iterator thing
04:05 < Raynos> writable(calledForEachItem, calledWhenNoMore)
04:05 < larryapplegate> Raynos: I'm itching to get started with node streams connected to IOS
04:05 < Raynos> its not quite an asyncrhonous iterator thing
04:05  * sinclair notes TJ holowaychuk appears to be critical of TS.
04:05 < larryapplegate> but i'm a newbie to node
04:05 < Raynos> a writable stream is actually just a write function
04:05 < Raynos> sinclair: TS ?
04:05 <@Nexxy> pyrotechnick, wat?
04:05 < niggler> fuck TS
04:06 < ljharb> typescript
04:06 < pyrotechnick> i love you
04:06 < ljharb> which is stupid.
04:06 < pyrotechnick> that is all.
04:06 <@Nexxy> that's understandable
04:06 <@Nexxy> <3
04:06 < Raynos> Oh
04:06 < Raynos> TypeScript is cool
04:07 < ljharb> sinclair: https://twitter.com/mikeal/status/252817549547413506
04:07 < Raynos> I dont like having a compile to language
04:07 < Raynos> I do like the tooling
04:07 < jmoyers> Raynos streams are a great concept
04:07 < jmoyers> current stream api is messy imo
04:07 < pyrotechnick> HAHA
04:07 < Raynos> MS needs to write something that generates a declaration from a js file
04:07 < jmoyers> just look at pipe implementation
04:07 < Raynos> and then make the tooling work with js
04:07 < jmoyers> cleanup is a hassle, end vs destroy, vs whatever the hell else
04:07 < Raynos> jmoyers: the implementation is ugly. The API surface is clean (https://gist.github.com/3791742 )
04:08 < jmoyers> api surface is clean but it forces you to think about its implementation details waaaay too much
04:08 < Raynos> not really
04:08 < jmoyers> like, implement a noon methods or break upstream, etc
04:08 < jmoyers> noop*
04:08 < pyrotechnick> i just put static typing in JS and dynamic typing in C#. AMA
04:09 < jmoyers> i love the concept, i embrace streams, i just think they need a little work
04:09 < jmoyers> but thats probably why a little work is being done to clean it up, as i recall
04:09 < Raynos> jmoyers: get involved.
04:09 < Raynos> jmoyers: https://github.com/isaacs/readable-stream
04:10 < jmoyers> I'm not complaining, i think its great.
04:10 < jmoyers> they just aren't a panacea is all
04:10 < Raynos> We have a new stream interface in 0.9
04:10 < MitchW> do streams in JS support joins/fences with other concurrent streams?
04:10 < niggler> pyrotechnick: can you make a preprocessor that allows me to insert random profanities ?
04:10 < Raynos> the new interface is still open to feedback
04:10 < Raynos> MitchW: in english?
04:10 < MitchW> I guess not.
04:10 < jmoyers> they don't, not in a sane way
04:10 < sinclair> Raynos: i don't think its possible to generate a declaration from a existing JS file. well, not a 100% guaranteed to be accurate one.
04:10 < MitchW> in stream processing, joins/fences are common varriers - was just wondering if they were in JS... kinda hard to do any serious parallel/concurrent programming without them
04:10 < jmoyers> multiple inputs or barrier algorithms cause trouble with a single `data` event output and so on
04:11 < MitchW> barriers*
04:11 < Raynos> sinclair: of course, but they can get 80% of the boilerplate right
04:11 < jmoyers> if its a stretch, i usually just go with an EventEmitter that acts like a stream
04:11 < sinclair> Raynos: sure :)
04:11 < Raynos> MitchW: I'm sure it can joins/fences. I just dont know what they are
04:11 < pyrotechnick> niggler: there's already a language comprised entirely of profanities, VB
04:12 < pyrotechnick> it's where all language features goto die
04:12 < niggler> hehe im glad you didnt point to something like php
04:12 < niggler> or perl
04:12 < pyrotechnick> that's too kind for PHP
04:12 < MitchW> Raynos: they're types of barriers (the thread stops at that point until a certain condition is met).  I'm guessing streams in this context aren't running in parallel though :)
04:12 < Raynos> MitchW: do you mean threads and barriers and doing transformations in lock step
04:12 < jmoyers> Raynos i actually think this is a much more sustainable and usable api already
04:12 < jmoyers> switching to a read loop is a nice compromise
04:12 < pyrotechnick> you all have 6 months to convert your code to TS
04:13 < pyrotechnick> discuss.
04:13 < jmoyers> .once makes it really nice
04:13 < larryapplegate> i want to replace Parse.com with node for an IOS app.
04:13 < MitchW> pyrotechnick: but I wanna use pyroscript. I heard it was better
04:13 < Raynos> jmoyers: I think the 0.9 API is a huge improvement. I've build a lot stuff on top of it (like 20 modules)
04:13 < mscdex> wow, there's already a typescript version of vapor.js
04:13 < pyrotechnick> i guarantee you could never wrap your mortal mind around pyroscript
04:13 < niggler> vaporware.js more like it
04:13 < jmoyers> the one use case that nags at me
04:13 < jmoyers> is multiple inputs
04:13 < mscdex> https://github.com/madrobby/vapor.js/pull/60
04:13 < mscdex> ^
04:14 < jmoyers> but i suspect maybe i get caught up on that when its not that important
04:14 < Raynos> MitchW: I dont think node would work like that. I've been using the 0.9 streams to implement somethign similar to clojure's reducers
04:14  * MitchW nods
04:14 < Raynos> MitchW: Heck I use streams to write code that can be possibly parallelized. I just havn't done it multi process yet. You need a map, fold & combine thing to make it work
04:15 < MitchW> I'm not familiar w/ streams, wasn't sure if this was a node/v8 specific thing, or maybe a parallel JS thing (when I think streams, I tend to think parallel processing)
04:15 < MitchW> not familiar w/ JS streams*
04:15 < Raynos> MitchW: streams are a node specific API for representing streaming data
04:15 < MitchW> got it =] cheers
04:15 < Raynos> for example streaming file uploads
04:15 < jmoyers> barriers can be implemented
04:15 < Raynos> i dont think barriers are useful as they are a threading primitive
04:16 < jmoyers> it would take what async/caolan does with .auto() and combining it with named conditions in buffered streams
04:16 < Raynos> I would prefer to try things in a distributed fashion
04:16 < Raynos> of course a very simple "parallel" barrier is async map
04:16 < pyrotechnick> is it just me or is the verb and nouns of "sanction" binary opposites?
04:16 < Raynos> https://github.com/Raynos/mapping-stream#example
04:17 < Raynos> Well async map isn't even a barrier. 
04:17 < thealphanerd> hey anyone cross compile node for arm before?
04:17 < jmoyers> Raynos https://github.com/caolan/async#auto -- this is a barrier
04:17 < jmoyers> stop going forward until conditions are met
04:17 < jmoyers> a buffered stream is a form of a barrier
04:18 < jmoyers> waiting on a completeness model
04:19 < pyrotechnick> hey guys i heard you liked types so i put types in your javascript so you can javascript whilst you type. AMA
04:20 < MitchW> I guess a rough example would be a simple game, where 4 players submit a number between 1 and 10, and guess the combined result - the input is received from node, but the output can't be sent untill all players submit their number - so you need to have a barrier that stops responses until all inputs are received and you can calculate the sum :)
04:20 < Raynos> jmoyers: I use https://github.com/Raynos/ready-signal#example for things like that
04:20 < pyrotechnick> thealphanerd: there was a guy in here last night who said he compiled it for his ipod
04:20 < jmoyers> yes
04:20 < thealphanerd> that is pretty dope
04:20 < thealphanerd> I found an article on doing it that looks fairly promising...
04:20 < jmoyers> everybody has their own version i think.
04:21 < thealphanerd> I just need to get a tool-chain working 
04:21 < pyrotechnick> thealphanerd: if you work it out let me know plz
04:21 < thealphanerd> http://n8.io/cross-compiling-nodejs-v0.8/
04:21 < thealphanerd> pyrotechnick: have you ever cross compiled before?
04:21 < pyrotechnick> not rly
04:21 < jmoyers> and MitchW, thats analogous to reading input from a file and waiting until you get a \n or \r\n to emit a 'line' event
04:21 < pyrotechnick> not like
04:21  * MitchW suspects Raynos is in fact, a node.js god
04:21 < pyrotechnick> habitually for any project
04:21 < pyrotechnick> just screwing around
04:21 < Raynos> MitchW: only 131 modules
04:21 < thealphanerd> which tool chain?
04:22 < MitchW> jmoyers: except you have N many input streams, not 1 file
04:22 < pyrotechnick> i dont even know man i was just pressing buttons and pulling levers
04:22 < Raynos> substack & tj still ahead of me
04:22 < pyrotechnick> aka: not really
04:22 < jmoyers> correct, so many inputs doesn't work out great
04:22 < jmoyers> and like i said, i use a plain EventEmitter for that kind of case
04:22 < pyrotechnick> thealphanerd: this looks filthy simple though
04:22 < jmoyers> because it feels clunky to use a writable stream interface which has one method, .write()
04:22 < Raynos> MitchW: Show me a concrete example and ill show you how its done with streams
04:23 < thealphanerd> it does
04:23 < thealphanerd> but I have to find the documentation on making a cross compile tool set
04:23 < pyrotechnick> maybe look at the vagrant project
04:24 < MitchW> Raynos: at work atm, just reading/discussing in this channel in my spare time :P
04:24 < pyrotechnick> they might have a vm
04:24 < astropirate> Anyone get bcrypt module to build under windows?
04:24 < thealphanerd> well I have cross compiled in a vm before
04:24 < thealphanerd> I have ubuntu set up
04:24 < niggler> fuck windows
04:24 < thealphanerd> just have to figure out the tool chain again
04:24 < pyrotechnick> i LOL'd
04:24 < pyrotechnick> IRL
04:25 < mscdex> astropirate: yeah
04:25 < mscdex> astropirate: but i used yaSSL instead of OpenSSL
04:25 < MitchW> Raynos: that said I have no doubt it can be done w/ streams either way :)  was just putting one possible use case out there
04:25 < pyrotechnick> are there any goldtards in here?
04:25 < mscdex> astropirate: fwiw: https://github.com/mscdex/node.bcrypt.js
04:25 < Raynos> im the only person that advocates "STREAM EVERYTHING"
04:26 < mscdex> Raynos: besides dominic tarr and substack?
04:26 < mscdex> ;-)
04:26 < Raynos> no
04:26 < Raynos> substack & dominictarr advocate "USE STREAMS FOR MOST SENSIBLE THINGS"
04:26 < Raynos> I also advocate "USE STREAMS FOR STUPID STUFF. BECAUSE."
04:27 < SomeoneWeird> lold
04:28  * MitchW suspects Raynos would love pure functional programming languages, assuming he doesn't toy w/ them already
04:28 < MitchW> or near-prue
04:28 < MitchW> pure*
04:28 < Raynos> I prefer to pretend JS is a pure functional programming language
04:29 < SomeoneWeird> is it
04:29 < SomeoneWeird> >.>
04:29 < astropirate> FFFFFFFFFFFFFFFFFUUUUU
04:29 < astropirate> developing on windows SUCKS
04:30 < mdedetrich> that depends on what your developing
04:30 < astropirate> mscdex, looking at yassl, it comes with source  no binaries
04:30 < astropirate> mdedetrich, i'm trying to install npm module :S
04:31 < mscdex> astropirate: i bundled it with my fork
04:31 < astropirate> ohh
04:32 < astropirate> mscdex, would you know what this nasty error is for? http://pastie.org/4900683
04:32 < mscdex> it should just be `npm install https://github.com/mscdex/node.bcrypt.js/tarball/master` and play
04:32 < astropirate> I'm on windows 7 64bit
04:32 < mscdex> do you have the windows 7.1 sdk installed?
04:33 < mscdex> if you're using express
04:33 < mscdex> vcexpress
04:35 < niggler> fuck windows
04:36 < topi`_> my boss uses windows. can't get rid of it, eh.
04:38 < MitchW> we still use DOS
04:38 < MitchW> trying to upgrade to NeXT
04:38 < MitchW> wait, upgrade? >_>
04:40 < astropirate> mscdex, i'm isntallin the sdk now
04:42 < sinclair> niggler: did you know, .NET and windows are awesome?
04:43 < Raynos> yeah I heard they are awesome
04:43 < Raynos> man I wish I could run those awesome ASP.NET 1.1 apps on windows 98
04:44 < sinclair> Raynos: me too
04:44 < niggler> if your standard of comparison is java i fully agree
04:45 < sinclair> niggler: you haven't looked into .net to really appreciate what it offers. you are just critical of it because its microsoft
04:45 < niggler> i worked on this old project
04:45 < sinclair> what, just one?
04:45 < niggler> called "phoenix"
04:46 < niggler> it was before ironpython came about
04:46 < sinclair> good for you
04:46 < niggler> in the .net framework, doing source code weaving based on annotations
04:46 < niggler> it sucked back then and it has only gotten worse
04:47 < MitchW> niggler: why does it suck?
04:47 < niggler> is jim hugunin still at microsoft?
04:47 < niggler> small things MitchW like boxing and unboxing
04:47 < sinclair> niggler: IronPython was released in 2006
04:47 < niggler> which made il manipulation a pain in the ass
04:48 < sinclair> niggler: the dark ages
04:48 < sinclair> niggler: why are you manipulating IL?
04:48 < mscdex> poor illinois
04:48 < niggler> i did a summer internship with a research group
04:48 < ChrisPartridge> Gee, this conversation is still going?
04:49 < jmoyers> hours and hours
04:49 < niggler> *at microsoft
04:49 < niggler> at the time, "Aspect-Oriented Programming" was the big thing
04:49 < niggler> and i and a group of others were tasked with finding a way to implement cross-cutting concerns in .NET
04:50 < niggler> but since then, ive seen that they've added quite a bit
04:50 < niggler> LINQ looks like a hammer
04:50 < MitchW> ChrisPartridge: it will never end, until Microsoft is ended. GO!
04:51 < niggler> no microsoft isnt inherently bad
04:51  * MitchW suspects niggler has been assimilated
04:51 < sinclair> niggler: have you sold out already?
04:52 < niggler> ive seen the challenges of having employees
04:52 < niggler> its a bitcj
04:52 < niggler> *bitch
04:53 < sinclair> niggler: when all the .NET heads start taking an interest in nodejs, and all come to this channel talking .net stuff, what will you do?
04:53 < niggler> by then i hope to be done with my project then i can get back to other stuff
04:53 < niggler> im glad i lasted 17 days thusfar
04:55 < niggler> but im amazed people have the stamina to keep up with these new languages etc
04:56 < sinclair> niggler: i agree with you on that point
04:57 < niggler> i also learned next time i should just pay someone to do stuff lol
04:58 < ChrisPartridge> wheres the fun in that?
04:59 < niggler> that was my thought initially, but i learned that i was much further away from the vanguard than I thought
05:07 < jmoyers> fucking bay area is like a goddamn sauna right now
05:07 < ljharb> true.
05:07 < ljharb> don't complain, this is our one week of summer
05:08 < SomeoneWeird> lol
05:09 < jmoyers> this kind of weather
05:09 < jmoyers> is for sitting around in irc neck bearding.
05:09 < jmoyers> in your boxers
05:10 < Raynos> bay area is to owarm :(
05:10 < ChrisPartridge> whats the temp?
05:12 < terinjokes> ChrisPartridge: it's like 90F
05:12 < terinjokes> insanely hot… i left florida to get away from weather like this
05:12 < ChrisPartridge> Thats beautiful weather
05:12 < terinjokes> no, it's not
05:13 < niggler> then get out of the bay area!
05:13 < terinjokes> did I say 80. i meant 85 right about not
05:13 < terinjokes> it was 89 at my office earlier
05:13 < ljharb> at least it's not humid.
05:13 < ljharb> this temp in florida, you'd be melted
05:14 < jmoyers> you broke your pattern
05:14 < jmoyers> you are supposed to say
05:14 < jmoyers> fuck bay area
05:15 < niggler> i was going to say fuck bay area, but i don't have enough experience to make a judgment
05:16 < niggler> i spent a week in union square, in hopes that itd be like union square nyc, and for some reason none of the places there were open in new york time
05:16 < Raynos> <3 npm
05:16 < purr> Let it be known that Raynos hearts npm.
05:16 < niggler> fucking starbucks opened at 7
05:16 < Raynos> Oh I see
05:16 < niggler> 7 your time is 10 my time
05:16  * astropirate smacks niggler 
05:16 < niggler> i was up at 5 am my time, which is 2 am for you clown
05:16 < niggler> the worst part
05:16 < Raynos> > node) warning: possible EventEmitter memory leak detected. 201 listeners added. Use emitter.setMaxListeners() to increase limit.
05:16 < niggler> was that they closed at 8 pm your time
05:16 < Raynos> Am I doing it wrong @ 201 listeners?
05:16 < niggler> holy mother of fuck there are places here that open before your places and close after your places
05:17 < niggler> but i can't say fuck bay area because my experience was limited to union square
05:17 < niggler> i didnt really explore
05:17 < niggler> although cali is nice because the equities trading day is over at 1 PM
05:17 < terinjokes> well, there's your mistake
05:17 < terinjokes> not leaving union square and day trading
05:18 < niggler> jmoyers: i reserve fuck ____ for things that I have a strong opinion about
05:19 < niggler> and its not fair for me to have a strong opinion of something if I haven't given it a fair shake
05:19 < jmoyers> fair enough
05:20 < niggler> its not used wantonly 
05:20 < ljharb> Raynos: yes, most likely. what are you doing?
05:20 < Raynos> using event emitters for caching
05:20 < Raynos> It means im requesting the same key 200 times
05:23 < Raynos> man I need to write tools for visualizing this data
05:23 < Raynos> it takes 30s to manipulate these 1000s of items
05:24 < ljharb> that doesn't sound like a good caching mechanism
05:27 < Raynos> ljharb: https://github.com/Raynos/cached-operation
05:27 < Raynos> it may not be.
05:28 < Raynos> but it's easy to write when you do it in two parts, cached operation & cached emitter
05:30  * MitchW has to remember to watch raynos on github when he gets home
05:30 < MitchW> I don't think there's something he hasn't made
05:31 < niggler> mscdex: you still awake?
05:36 < sinclair>  niggler im am still here
05:39 < D-Shawn> hi, I had one question
05:39 < D-Shawn> is there a way to invoke node.io from inside my express app?
05:40 < Raynos> MitchW: there are a lot of things i havnt made
05:40 < Raynos> they are on my todo list
05:45 < niggler> lol sinclair can you submit patches to node-ncurses
05:47 < niggler> http://imgur.com/iJAht -- i tried displaying the exact text in C using libncurses and came across no problems
05:47 < niggler> but the strange part is that if i instruct it to start rendering at a lower position its fine
05:49 < deoxxa> D-Shawn: what exactly is "node.io"?
05:50 < clever> deoxxa: https://npmjs.org/package/node.io
05:50 < D-Shawn> a data scraping and processing framework, built on top of node
05:50 < deoxxa> oh, i was assuming it was a typo
05:50 < D-Shawn> https://github.com/chriso/node.io
05:50 < deoxxa> the answer is, ultimately, yes
05:51 < deoxxa> but the question is so broad that any other answer is impossible
05:51 < pyrotechnick> are there networks of node.io you can tap into?
05:51 < D-Shawn> i mean from what I see, the usual way i invoke node.io is through command line
05:51 < deoxxa> well you can do that if you want
05:52 < deoxxa> sure, it'd be silly and inefficient, but sure, you can do it
05:52 < deoxxa> so the answer remains "yes"
05:52 < D-Shawn> but I would like my app to invoke it, say, every 5 minutes or so, i can't find a way to do it from my code
05:52 < deoxxa> setInterval(whatever_vague_stuff_it_is_that_i_want_to_do, 1000 * 60 * 5);
05:54 < D-Shawn> yep, i get the interval part, my question is precisely- "is there a way to run the node.io job from my code and not the command line, since as you said, it would be silly and inefficient"
05:54 < clever> D-Shawn: i just noticed, the example on the node.io page is massively flawed
05:54 < clever> D-Shawn: the example shows how to scrape the html of reddit.com, when you can just http://www.reddit.com/.json
05:54 < clever> no need for anything complex!, lol
05:55 < deoxxa> D-Shawn: that's a better question
05:55 < clever> deoxxa: the example i just mentioned, is also not command line
05:55 < D-Shawn> lol, yeah i was building something for a service that does not provide a json feed.
05:55 < clever> https://npmjs.org/package/node.io 'Scrape example
05:55 < clever> '
05:56 < deoxxa> yeah
05:56 < deoxxa> that seems to be the answer
05:56 < deoxxa> if only it was easy to find that kind of information
05:57 < jmoyers> uh
05:57 < jmoyers> node.io is just a node script
05:57 < jmoyers> in bin
05:57 < jmoyers> https://github.com/chriso/node.io/blob/master/bin/node.io
05:57 < jmoyers> and thusly, you now know how to invoke it
05:57 < clever> lol, 5 lines
05:58 < D-Shawn> lol
05:58 < D-Shawn> god i should have gone into the source
05:58 < clever> thats how ive answered every single issue i had with mysql-native
05:58 < clever> source!
05:58 < jmoyers> well, more specifically
05:58 < jmoyers> you can look deeper
05:58 < jmoyers> and find https://github.com/chriso/node.io/blob/master/lib/node.io/interfaces/cli.js
05:58 < clever> i accidentaly learned how it queues commands internaly, and part of the mysql network protocol
05:58 < clever> oops!
05:59 < D-Shawn> yeah I guess I can just copy this cli logic into my app.
05:59 < D-Shawn> thanks
05:59 < clever> jmoyers: i was expecting that, .cli is clearly doing all the work, and htose 5 lines are just to require the right lib
06:00 < jmoyers> this is where the real work is done
06:00 < jmoyers> https://github.com/chriso/node.io/blob/master/lib/node.io/processor.js
06:00 < clever> D-Shawn: looks like you probly just want line 148 or 152
06:00 < D-Shawn> clever: yeah seems like it
06:00 < jmoyers> this is such a strange program
06:00 < clever> jmoyers: ?
06:01 < jmoyers> every time it comes up i go… wtf? why not use request and grab the pages myself, then write the parser
06:01 < jmoyers> i don't get what this framework provides
06:01 < clever> jmoyers: it seems to provided jquery style syntax for parsing, as in the example i mentioned
06:01 < clever> some people just like to hump jquery till the cows come home :P
06:01 < deoxxa> jmoyers: yeah
06:01 < clever> but in my current project, its now bitten us in the ass
06:02 < clever> jquery got upgraded (out of our control) and everything broke
06:02 < deoxxa> jmoyers: request + cheerio seem to do everything i need for scraping
06:02 < jmoyers> i.. i still don't even
06:02 < clever> .attr() suddenly returned undefined instead of '', so many things failed
06:02 < jmoyers> jsdom + jquery if you REALLY care
06:02 < jmoyers> but that shit is some serious overhead imo
06:02 < clever> and setting attributes..... no longer sets attributes!!!
06:02 < deoxxa> most of the time you don't need a whole dom
06:02 < deoxxa> not with all the events and stuff anyway
06:03 < deoxxa> like you're not going to be running client side code on it
06:03 < niggler> fuck jquery
06:03 < jmoyers> hell, even go straight to https://github.com/aredridel/html5
06:03 < clever> niggler: agreed!
06:03 < deoxxa> all you need is the selector api for nearly all scraping
06:03 < jmoyers> rather than this wonky nodeio business
06:03 < mscdex> niggler: i'm still here
06:03 < clever> jmoyers: what about just an xml parser?
06:03 < jmoyers> html is not xml
06:03 < clever> xhtml
06:03 < jmoyers> its broken as fuck xml
06:03 < clever> :'(
06:03 < jmoyers> so you need something that deals with unclosed tags etc
06:04 < jmoyers> thusly, html5
06:04 < deoxxa> htmlparser2 is good for that too
06:04 < deoxxa> quite a bit faster than html5 iirc
06:04 < jmoyers> ^ probably better
06:04 < deoxxa> only makes a difference if you're processing megabytes of html
06:04 < jmoyers> i haven't looked in over a year
06:04 < clever> my last small app that actualy dealt with scraping, was purely regex
06:04 < deoxxa> clever: that's perfectly fine sometimes
06:04 < clever> ugly, but i was just porting it
06:04 < deoxxa> if you have a very strictly defined set of stuff to grab out, regex works great
06:04 < clever> i had to go over the 3 line long regex character by character
06:04 < clever> to find out where it stopped matching
06:05 < clever> 5 times
06:05 < deoxxa> ha
06:05 < jmoyers> fine, but only for things that doesn't require on understanding the difference between <div><div>test</div></div> and <div>test</div>
06:05 < deoxxa> sounds like yours has gotten a bit out of hand
06:05 < jmoyers> as soon as you get to nesting, you are fucked.
06:05 < deoxxa> yeah
06:05 < clever> deoxxa: its a single piece of regex to match the entire chunk of data in the page
06:05 < deoxxa> that's a bit crazy
06:05 < jmoyers> regex can be great, though
06:05 < clever> and there is a different regex for each variant of the page
06:05 < clever> and somebody decided to make a spelling change a few months back :P
06:06 < deoxxa> ha yeah
06:06 < jmoyers> like ti's https://github.com/visionmedia/dox (regex based)
06:06 < jmoyers> vs my shitty https://github.com/jmoyers/doc that i never finished
06:06 < jmoyers> so mine uses the ast parser. turns out to be WAY more complicated
06:06 < jmoyers> and regex does the damn job
06:07 < clever> i also found out, its imposible to get any speed out of my scraper
06:07 < clever> if i exceed 60 requests in 60 seconds, it kicks back connection reset by peer
06:07 < deoxxa> yep
06:07 < deoxxa> proxies ftw
06:07 < clever> for example, a solid loop with no delays, it fails on the 60th request, every single time
06:08 < clever> but if i delay it to exactly 1.1 seconds between requests, it never fails
06:08 < Yendor> hello
06:08 < clever> even if it goes for 2000 requests in a row
06:08 < Yendor> i hvae problem i hve convieniently placed here
06:08 < Yendor> http://houston.craigslist.org/etc/3311468275.html
06:08 < clever> deoxxa: but why is it kicking back tcp level errors?
06:08 < Yendor>   pos wrong links
06:08 < Yendor> sec.
06:08 < jmoyers> hahaha
06:08 < jmoyers> that was epic
06:08 < deoxxa> clever: rate limiting
06:08 < pyrotechnick> what the fucking fuck
06:08 < deoxxa> Yendor: gg
06:09 < clever> deoxxa: i wasnt aware a normal userspace app could trigger such error codes on purpose
06:09 < Yendor> wut
06:09 < Yendor> so dranks
06:09 < deoxxa> clever: might be a firewall rule
06:09 < clever> deoxxa: http keep-alives
06:09 < Yendor> im like one eyed willie over here
06:09 < clever> deoxxa: 60 requests in a row on the same connection, and it up and fails
06:10 < Yendor> hold on i get coed
06:10 < deoxxa> clever: hm. well, an application can do that if it wants to get deep enough into its networking stuff. most will just return http errors, but someone must have been overly excited about blocking bad user agents?
06:10 < jmoyers> you are saying
06:10 < clever> deoxxa: maybe
06:11 < jmoyers> you are scraping the fuck out of one domain
06:11 < jmoyers> and it kicks you back?
06:11 < jmoyers> without rate limiting
06:11 < jmoyers> nooooo shit!
06:11 < deoxxa> unfathomable!
06:11 < clever> jmoyers: yeah, connection reset by peer error
06:11 < clever> jmoyers: i'm just wondering how its even causing such an error
06:11 < jmoyers> well fuck dude, no shit. they are rate limiting the shit out of you
06:11 < jmoyers> could be firewall level, could be http server level, could be app level
06:11 < jmoyers> thats not generally considered nice
06:12 < Raynos> that reminds me
06:12 < clever> i dont see how iptables could easily count the number of requests inside a keep-alive connection
06:12 < Raynos> I'm hitting up iriscouch with a shit ton of requests
06:12 < Raynos> maybe i should stop annoying them
06:12 < clever> and i didnt think the app/http server had access to trigger tcp errors like reset by peer, just hang up without warning
06:12 < jmoyers> iptables
06:13 < jmoyers> isn't the only 'firewall' out there
06:13 < jmoyers> there are stateful firewalls
06:13 < deoxxa> blasphemer
06:13 < deoxxa> it is so
06:13 < ChrisPartridge> its not! :O
06:13 < ChrisPartridge> s/!/?
06:13 < clever> jmoyers: iptables can be statefull, and anything monitoring the actual http 1.1 transactions would be a resource hog
06:13 < jmoyers> i thought you were asl'ing me
06:13 < deoxxa> 13/f/cali
06:13 < clever> deoxxa: lol
06:16 < deoxxa> dude, Yendor, are you seriously going to let someone infect you with aids?
06:17 < deoxxa> (i just read that link fully)
06:17 < deoxxa> that sounds pretty dangerous
06:17 < clever> deoxxa: ive heard a few years ago about that being a form of suicide
06:17 < deoxxa> seems pretty inefficient
06:17 < clever> yeah, like you cant make up your mind
06:20 < terinjokes> deoxxa, Yendor: that link looks totally sketch
06:21 < Yendor> terinjokes, i have problem you can see error http://www.hopetakesaction.org/contact/standup.aspx
06:22 < Yendor> fuxgdmit
06:22 < clever> holy crap,! the gui on node-inspector!!
06:22 < ChrisPartridge> its just webkit dude
06:22 < ChrisPartridge> (unless its changed)
06:22 < clever> i was wondering how it got access to gui libs, but it seems it went the http route instead
06:23 < clever> and the skin is nearly identical to chrome's internal debuger
06:23 < Yendor> ops eyeambanned here
06:23 < terinjokes> clever: i thought it *was* the internal debugger
06:24 < clever> terinjokes: you have a point...., node is using the same js engine as chrome, lol
06:24 < clever> no reason they cant share node-inspector code
06:25 < clever> i'll have to play with that more later, pretty much eliminates the need for an admin console i was going to add to my app
06:25 < clever> i can just hook in a debuger and inspect any variable i want
06:26 < jmoyers> err
06:26 < jmoyers> you can also hook up a repl
06:26 < clever> ?
06:27 < jmoyers> clever http://nodejs.org/docs/latest/api/repl.html -- look at the tcp server
06:27 < clever> ah, i wondered how that cli console worked
06:27 < jmoyers> point being
06:27 < jmoyers> you can dump variables etc
06:27 < clever> i guess i could just put in a password protected access to it
06:27 < jmoyers> even poke at values
06:27 < jmoyers> well, bind to an internal interface
06:27 < jmoyers> or whatever
06:27 < jmoyers> plenty of ways to lock it up
06:28 < clever> yeah
06:28 < clever> the end-client actualy has a crude terminal interface already
06:28 < alucardX> hi
06:28 < clever> wouldnt be that hard to just connect it to nodes internal REPL
06:28 < jmoyers> been done
06:28 < jmoyers> clever https://npmjs.org/package/node-web-repl
06:29 < clever> jmoyers: the program doesnt have any http server in it, and port 80 is in-use
06:30 < jmoyers> you can put an http server on port whatever the hell you want
06:30 < jmoyers> but yeah, if its not a web app, no need
06:30 < clever> i know, but thats another port to add to the firewall
06:30 < clever> i already have a custom protocol fully implemented, with a terminal emulator at the client end
06:30 < clever> i just didnt implement its commands on the node app yet
06:32 < nathan7> sweet jesus
06:32 < clever> looks like i would want to replace the input and output streams on repl, and link them to the existing tcp socket
06:32 < nathan7> .load is gonna be my friend
06:32 < clever> after verifying the pw
06:36 < fourlincoln10> Hoping someone here can help me with a question about using nock during unit testing
06:37 < nathan7> nock nock
06:37 < deoxxa> fuuuuuuuuuuuck
06:37 < deoxxa> just lost a configuration file that's going to take ages to rebuild
06:37 < deoxxa> because i did things the "quick way" so we could "just put it out there"
06:37 < niggler> oh now you fucked up
06:38 < niggler> now you fucked up
06:38 < clever> jmoyers: hmmm, how would i do the same as the pipe() syscall? (create a read/write stream pair)
06:38 < niggler> man i miss that soundboard
06:38 < clever> jmoyers: it doesnt have to actualy hit kernel, it can be purely inside js
06:38 < deoxxa> my boss doesn't seem to understand that the "quick way" is never actually quicker
06:38 < nathan7> clever: you mean Stream#pipe?
06:38 < nathan7> clever: http://nodejs.org/api/stream.html
06:38 < clever> nathan7: from the docs, that takes an existing stream, and pipes it to another
06:38 < clever> which isnt what i want
06:39 < fourlincoln10> nock = require('nock')
06:39 < nathan7> clever: what do you want?
06:39 < fourlincoln10> nock(couchUrl).get('/v2/_design/users/_view/byUsername?include_docs=true').reply(400, dbResponse);
06:39 < fourlincoln10> That works in one unit test
06:39 < clever> nathan7: i want to create a stream where the input is from software (whatever i .write to it), and the output goes to repl
06:39 < owen1> i am doing 'git push' using child_process. it goes to the error event and the message is 'Github has received your commits.' why is it concidered an error and the 'exit' event is never invoked?
06:39 < fourlincoln10> nock(couchUrl).get('/v2/_design/users/_view/byId?key=1234&include_docs=true')
06:39 < nathan7> clever: hmm
06:39 < fourlincoln10> This fails in another unit tes.
06:39 < nathan7> owen1: ..wut
06:39 < fourlincoln10> The error I get is: Nock: No match for HTTP request GET /v2/_design/users/_view/byId?key=%221234%22&include_docs=true
06:40 < owen1> nathan7: what do u mean?
06:40 < nathan7> yes, note the %22, fourlincoln10 
06:40 < nathan7> owen1: that's odd
06:40 < clever> owen1: i'm guessing, that github is sending custom messages over stderr, to bypass gits internal stuff, ssh ... | git something-internal
06:40 < owen1> nathan7: yeah. and it's actually pushig it to git
06:40 < nathan7> owen1: and you're sure you're hooking exit in the right place?
06:41 < fourlincoln10> Not sure how to fix that. 
06:41 < clever> owen1: internaly, git calls ssh, and connects stdout to a git utility, so the only way to get a message to the end-user is stderr
06:41 < nathan7> Yes, but it should fire exit, clever 
06:41 < owen1> clever: nathan7 http://pastebin.com/dGxDjJGP
06:42 < nathan7> owen1: stdout will never have data
06:42 < clever> owen1, nathan7: the error event is not caught, kaboom!
06:42 < deoxxa> lol this whole application is broken now
06:42 < nathan7> owen1: process.exit() probably doesn't fire .on('exit'
06:42 < deoxxa> screw it, i'm going home
06:42 < clever> owen1: if you dont catch error events, the entire app crashes, and it never gets to the exit event
06:42 < nathan7> It never fires an error event, clever 
06:43 < nicholasf> deoxxa: what kind of config file was it?
06:43 < nathan7> stderr is a stream like every other
06:43 < clever> ah, i thought he said .on('error'
06:43 < clever> similar reason though, he is forcing an exit on line 10, before the .on('exit' triggers
06:43 < owen1> clever: but i catch the error event - git.stderr.on
06:44 < clever> owen1: yeah, and you force an exit before line 13 can trigger
06:44 < deoxxa> nicholasf: a schema description with a ton of fields
06:44 < nathan7> owen1: that's not an error!
06:44 < nathan7> owen1: git will not output stuff on stdout
06:44 < nathan7> owen1: any user message is on stderr
06:44 < owen1> nathan7: oh. 
06:44 < nathan7> owen1: http://sprunge.us/NiaP
06:44 < nathan7> owen1: this is what I do
06:44 < owen1> so this is a special case for git push?
06:44 < nathan7> sorry for the indentation
06:44 < nathan7> no
06:44 < clever> nathan7: so how do i create a stream?
06:44 < owen1> or anytime i use process?
06:44 < nathan7> stderr is for user output
06:44 < nathan7> it's simple as that
06:45 < nathan7> clever: derive from ReadableStream
06:45 < nathan7> clever: .emit('data' every once in a while
06:45 < clever> nathan7: ah, so id need to implement parts of it myself?
06:45 < clever> that may be simple enough
06:45 < nathan7> clever: it's pretty simple
06:46 < clever> *tries*
06:46 < deoxxa> nathan7: you're pretty simple!
06:46 < deoxxa> burrrrrrn
06:46 < nathan7> clever: you could make a MagicStream or whatever that derives from ReadableStream that has a .write that is actually .emit('data'
06:46 < owen1> nathan7: do i need to aggregate the data like u did?
06:46 < nathan7> deoxxa: Yeah!
06:46 < nathan7> owen1: This was for fetching a few hundred repos at a time
06:46 < nathan7> owen1: so output would overlap if I didn't
06:47 < nathan7> owen1: but no, you probably don't
06:47 < owen1> nathan7: and is this idea of err that is used as stdout, is a specific case for git push or it applies to other usages of spawing a process in node?
06:48 < nathan7> owen1: Nearly every UNIX program uses stderr for user output
06:48 < deoxxa> owen1: "err" is not being "used as" stdout
06:48 < nathan7> owen1: if you have, say, cat
06:48 < deoxxa> owen1: stderr is for people, stdout is for computers - it's a pretty common theme
06:48 < nathan7> owen1: stdout is where cat's output goes (the content of a file)
06:48 < nathan7> owen1: if I do cat blah|someotherthing
06:48 < clever> deoxxa: ive noticed that some programs use stderr to interogate the terminal emulator, to bypass redirections
06:49 < nathan7> owen1: I don't want the error messages / user warnings to go into someotherthing and mix up with my data
06:49 < clever> and all the special tty features fail to work if you redirect stderr
06:49 < nathan7> owen1: because then my data becomes useless
06:49 < nathan7> owen1: so I'd rather send them to stderr, where the user sees them, because stderr is still connected to the user terminal
06:50 < nathan7> owen1: if you have a program that generates... poems
06:50 < owen1> nathan7: nice.
06:50 < nathan7> owen1: the poems are output
06:50 < nathan7> owen1: and you might want to feed them to other stuff
06:50 < clever> nathan7: cant seem to get any reference to Readable stream...., it seems like a defined interface with no hard implentation
06:50 < nathan7> owen1: the error messages (error: failed to generate poem) clearly isn't output
06:51 < nathan7> owen1: and a program to handle poems can't really do useful stuff with them
06:51 < owen1> that's why in node i have console.log and cosole.error, right?
06:51 < nathan7> I'm not entirely sure where console.log goes actually
06:51 < nathan7> it's a thing we took from the browser, where things like stdin, stdout and stderr are completely alien concepts
06:52 < clever> nathan7: thats actualy pretty simple for me to test right now
06:52 < clever> console.log(stream);
06:52 < clever> write(1, "{ [Function: Stream] super_: [Fu"..., 76{ [Function: Stream] super_: [Function: EventEmitter], Stream: [Circular] }
06:52 < nathan7> clever: yeah
06:52 < clever> it went out fd #1, but i forget which is out and which is err, lol
06:52 < nathan7> clever: so just implement what a readablestream has
06:52 < Raynos> console.log goes to stdout
06:52 < Raynos> console.error goes to stderr
06:53 < nathan7> clever: 0,1,2
06:53 < nathan7> clever: in,out,err
06:53 < clever> Raynos: makes sense, and confirmed by the uncaught error showing up at 2
06:53 < nathan7> clever: 2>&1 redirects stderr to stdout 
06:53 < clever> nathan7: ah yeah, now its coming back to me!
06:53 < clever> and i almost did 2>&1|grep Stream
06:53 < owen1> Raynos: no progress on raynos-blog, ah?
06:53 < Raynos> owen1: kind of gave up on that
06:54 < Raynos> I decided screw that. tumblr time.
06:54 < nathan7> well fuck
06:54 < Raynos> owen1: https://github.com/Raynos/npm-used
06:54  * nathan7 has to run, school
06:54 < owen1> Raynos: check out poet - ttps://github.com/jsantell/poet#readme
06:55 < owen1> https://github.com/jsantell/poet#readme
06:55 < clever> nathan7: hmmm, i checked, .pipe is the only thing in the stream module! https://github.com/joyent/node/blob/master/lib/stream.js
06:56 < clever> nothing else is there, its all implemented in other areas that return stream like objects (stdin/out/files)
06:56 < clever> that makes things a bit more complicated then i was expecting
06:56 < owen1> Raynos: nice idea
06:57 < Raynos> owen1: I'm kind of working on npm tools.
06:58 < Raynos> clever: use something like from / through / read-stream / write-stream / read-write-stream
06:58 < Raynos> if you need a stream base class
06:58 < Raynos> or readable-stream
06:58 < clever> Raynos: a read-write-stream sounds like a decent fit
06:59 < Raynos> https://github.com/Raynos/read-write-stream#example-through
07:00 < Raynos> clever: what do you actually need? through or duplex might be better modules
07:00 < Raynos> so could readable-stream.Transform
07:00 < clever> Raynos: i need something that can be the input for repl, and i can programaticaly write to it
07:00 < Raynos> just write to the repl
07:00 < clever> and something similar for the output pipe
07:01 < clever> repl.write?
07:01 < Raynos> i dont know what the repl api is anymore
07:01 < clever> the docs say it wants an input and output stream to the constructor
07:01 < clever> and it will use stdin/out by default
07:02 < Raynos> then use a duplex stream
07:02 < Raynos> like duplex*
07:02 < Raynos> duplexer
07:02 < Raynos> or read-write-stream
07:02 < Raynos> or pass in two streams on readable and one writable
07:02 < clever> *tries*
07:06 < owen1> nathan7: so i should not put any process.exit on my err events anymore, right? since err is a way for a process to communicate with the user/client that uses this process. it's not an error.
07:08 < clever> nathan7: TypeError: Object #<Object> has no method 'split' at Interface.setPrompt (readline.js:121:24)
07:10 < clever> owen1: if you want to make stderr fatal, i would save a flag (something_went_wrong = true), and then process.exit() in the .on('exit', handler
07:11 < clever> nathan7: found my problem
07:11 < clever> nathan7: node 1.6 uses a total different api!
07:11 < clever> the docs show a simple all in one object api, but checking the source, its not so simple!
07:13 < TehShrike> Node 1.6 already?  What's it like in the future?
07:13 < TehShrike> Is everyone using TypeScript yet?
07:13 < clever> TehShrike: 0.6 actualy
07:14 < owen1> clever: how do i know that something is wrong? when the code in exit event is not 0 ?
07:14 < clever> owen1: i would check the message in stderr and compare it to a known good set of messages
07:14 < clever> if its not something you marked as good, show it and crash
07:16 < Zak> lol TehShrike 
07:17 < TehShrike> Zak: :-)
07:17 < TehShrike> st_luke: I'm having trouble parsing the last sentence of the second-to-last paragraph of your typescript post
07:18 < owen1> clever: nice. i can't rely on the exit code since non 0 not always means error. for example, in 'git commit' will return 1 if there is nothing to commit
07:18 < st_luke> TehShrike: might be kinda poorly written, i was kinda distracted when i wrote that whole thing
07:18 < clever> yeah, and git push can push one branch (the one i wanted) without issue
07:18 < clever> then fail to push another branch i dont care about
07:19 < clever> so the exit code is bad, even though it did what i wanted
07:19 < TehShrike> st_luke: I appreciated the post, but you might want to check that one sentence
07:19 < clever> last week, somebody forced a 'git pull remote otherbranch', while on the wrong one
07:19 < clever> causing a merge!
07:21 < TehShrike> Also, I'm now torn - should I purchase my four-letter family name in the .xxx domain?  Can I justify the 100 bucks a year?
07:21 < pyrotechnick> that's fucking creepy
07:22 <@Nexxy> wow
07:22 < TehShrike> In the .com tld, my family name's domain would cost at least 50k
07:22 < clever> Raynos: i think i have a working 6 line testcase..., now to try putting it in the real app
07:22 < yawnt> pyrotechnick: lol agreed
07:22 < TehShrike> Yet I see that st_luke can get luke.xxx, which is an impressively short domain name
07:22 < nathan7> heh
07:22 < TehShrike> And I do love short domain names
07:23 < yawnt> me wants android < 200$
07:23 < TehShrike> Right now I'm rolling with the email address me@firstlast.com - but if I shelled out, I could use first@last.com...
07:23 < nathan7> You should  start making  incest porn
07:23 < clever> TehShrike: lol
07:23 < clever> TehShrike: my dad happens to have last@isp.net
07:23 < TehShrike> first@last.xxx, rather
07:23 < clever> first last on the internet! :P
07:24 < TehShrike> (My first name isn't really "first", and my family name isn't really "last" :-P)
07:24 < clever> same:P
07:24 < clever> that email address is atleast 15 years old now
07:25 < clever> oh, and its had the same password for 15 years...
07:25 < TehShrike> lol
07:25 < clever> i dont even know how to change it if i wanted to
07:25 < clever> its the same one for dialup and dsl
07:25 < TehShrike> Woah, today's xkcd is trippy
07:26 < clever> *looks*
07:26 < clever> neat
07:26 < TehShrike> How... how long do I watch this?
07:26 < clever> reminds me of traffic hell last week in halifax
07:26 < clever> and dad was talking about gps hell in quebec 2 weeks ago
07:26 < clever> it said turn right before the bridge
07:26 < clever> he gets on the road, finds out you cant turn right
07:27 < clever> winds up in the middle of the city
07:27 < TehShrike> I'll bet if I was high I could watch this for at least an hour
07:27 < clever> wait
07:27 < clever> that 4th light just turned purple!
07:27 < TehShrike> I KNOW
07:27 < clever> and theres a bird on the wire!
07:27 < clever> the bird moved!
07:28 < clever> the first was just all off!, that cant be safe
07:28 < clever> wait, its just gone red and green for left!
07:28 < TehShrike> lol
07:28 < clever> 3 yellows....
07:28 < clever> on the same light
07:28 < phrearch> morning
07:28 < clever> wtf, now its got a green pointing up
07:29 < clever> and down?????
07:29 < TehShrike> :-D
07:29 < clever> TehShrike: and the middle (yellow) light was just red on one
07:29 < TehShrike> I told you it was trippy!
07:29 < clever> must be expensive RGB lights in that thing!
07:30 < TehShrike> I got to play with some of those recently, I was doing lights at a conference
07:33 < chrisbuchholz> What are something i can write with node.js that will blow me away and make me want to do more? I feel uninspired today...
07:33 < [AD]Turbo> hola
07:35 < astropirate> chrisbuchholz, you can hack with me :D
07:35 < astropirate> on a web framework
07:35 < chrisbuchholz> astropirate: github link?
07:39 < TehShrike> theinternet.com/astropirate
07:39 < astropirate> what is the meaning of this?
07:40 < clever> Raynos: ok, the repl side is all working, as is part of the input :)
07:40 < clever> now i just need to route the output back to the client
07:41 < SoulRaven> hello
07:42 < SoulRaven> anyone used for buffers readLong, there is any module for that
07:42 < SoulRaven> or something to read from buffers unsigned Long
07:42 < SoulRaven> ?
07:42 < clever> that was easy, all the client side code was in place and forgoten :)
07:43 < clever> though the protocol doesnt like \n's very well
07:45 < terinjokes> SoulRaven: what are you trying to do?
07:45 < SoulRaven> i am try to read from buffers the unix timestamp
07:45 < SoulRaven> from a binary protocol
07:45 < terinjokes> SoulRaven: check out node-ctypes
07:46 < terinjokes> it's what I'm using to do just that
07:46 < terinjokes> (read binary protocol, not timestamps)
07:46 < SoulRaven> and works with buffers?
07:46 < terinjokes> yes
07:46 < SoulRaven> https://npmjs.org/package/ctype
07:47 < antonjb> anyone able to help with a grunt query I have? (tried their channel without too much luck)
07:55 < SoulRaven> terinjokes: but what is unsigned long from ctype?
08:00 < clever> Raynos: :S, its using the wrong global!!!
08:03 <@Nexxy> and they say globals are an antipattern
08:03 < yawnt> YOU ARE AN ANTIPATTERN
08:03  * yawnt runs away
08:03 < clever> Nexxy: it seems to be using the 'global' inside the repl module
08:03 <@Nexxy> yawnt, I disagree
08:03 < clever> Nexxy: not the global i wanted, from the actual app using repl
08:03 < yawnt> Nexxy: prove it.
08:04  * yawnt waves a torch
08:04 <@Nexxy> I'm a person not a pattern
08:04 < yawnt> :(
08:04 < yawnt> okay
08:04 < yawnt> :'(
08:04 <@Nexxy> I'm also beneficial
08:04 < yawnt> ENOUGH
08:04 <@Nexxy> not harmful ._.
08:04 < yawnt> ;_;
08:04 < terinjokes> Nexxy: you're an anti-pattern of molecules
08:04 < `3rdEden> awww, I already got the tar and feathers :9
08:04 < yawnt> it's fun cause cul in italian is butt
08:04 < yawnt> mole-butts
08:04 < yawnt> :D
08:04 < yawnt> yes, i'm so funny
08:04 < yawnt> :\
08:05 < substack> ONLY USE GLOBALS
08:05 < pyrotechnick> Nexxy: you're an algorithm - http://en.wikipedia.org/wiki/Digital_physics
08:05 <@Nexxy> yes
08:05 < terinjokes> substack: my node code is procedural
08:05 < pyrotechnick> but not a very good one: http://theprofoundprogrammer.com/
08:05 < clever> Nexxy: any idea how to get the right global out of repl?
08:05 < yawnt> substack: hai
08:06 < yawnt> substack: is your code from lxjs on github?
08:06 <@Nexxy> clever, what global?
08:06 < substack> yawnt: https://github.com/substack/lxjs-stream-examples
08:06 < clever> Nexxy: the one for the main script being ran by node
08:06 < yawnt> substack: thx
08:08 < clever> Nexxy: http://privatepaste.com/86f516843a code being ran in repl winds up not returning global variables from this file
08:08 < SoulRaven> terinjokes: do you have any ideea how i read latitude and longitude in double using ctype?
08:09 < astropirate> hahah awesome link terinjokes 
08:10 < Casper_> Good morning! I was wondering if someone could help me out with this error: http://pastebin.com/gyj0HvYm
08:11 < terinjokes> astropirate: what link?
08:11 < astropirate> woops sorry
08:11 < terinjokes> SoulRaven: example of the binary?
08:11 < astropirate> meant pyrotechnick 
08:11 < terinjokes> since it all depends on the binary
08:11 <@Nexxy> clever, what are all of the arguments in repl.start() for?
08:12 < SoulRaven> longitude: <Buffer 0e f1 21 70>,
08:12 < SoulRaven>     latitude: <Buffer 1a ff 7b 00>,
08:12 < clever> Nexxy: https://github.com/joyent/node/blob/v0.6.12/lib/repl.js#L250
08:13 < nathan7> err
08:13 < nathan7> node 0.6?
08:13 < terinjokes> SoulRaven: one second, i'll come up with something and gist it
08:13 <@Nexxy> clever, ah oki
08:13 < SoulRaven> thx:)
08:13 < clever> nathan7: yeah, that bit me in the ass again when it tried to .split my object (i obeyed the docs)
08:13 <@Nexxy> clever, are you actually using 0.6?
08:13 < clever> Nexxy: yep
08:14 < terinjokes> SoulRaven: although I think the examples are clear ;)
08:14 < clever> one of my other servers turns out to have 0.2!, i just gave up and didnt even try any further on that box
08:15 < SoulRaven> i have try: longitude = mod_ctype.rfloat(AVL.splice(4), 'big', 0) / 10000000;
08:15 < SoulRaven>         latitude = mod_ctype.rfloat(AVL.splice(4), 'big', 0) / 10000000;
08:15 < SoulRaven> but is returning:  longitude: 5.944009624424478e-37,
08:15 < SoulRaven>     latitude: 1.0566262973084594e-29,
08:15 < nathan7> clever: dude
08:15 < nathan7> clever: upgrade
08:16 < clever> nathan7: i would, but who knows how 0.8 is going to handle 0.6 syntax, i dont want to up and break everything and have to rush to re-fix it
08:16 <@Nexxy> I mean, it's not always that simple
08:16 < terinjokes> SoulRaven: is that lat/long standalone, or part of a larger binary blob?
08:16 < SoulRaven> stand alone
08:16 < nathan7> clever: stuff is mostly backward compatible
08:16 < astropirate> http://i.imgur.com/0skrb.jpg
08:16 < SoulRaven> longitude: <Buffer 0e f1 21 70>,
08:17 < SoulRaven>     latitude: <Buffer 1a ff 7b 00>, is a lat/lng
08:17 < terinjokes> SoulRaven: sorry, I misunderstood then do the buffer.readDoubleLE/BE() functions not working for you?
08:18 < clever> nathan7: ah, i see that repl (atleast) has the identical prototype, with an if clause checking for the new style
08:18 < nathan7> clever: yep
08:22 < SoulRaven> terinjokes: if i tray readDoubleBE.LE i get AssertionError: Trying to read beyond buffer length
08:22 < SoulRaven> for the same set of buffers
08:23 < clever> i'll have to try upgrading it tomorow, then give repl another test run
08:23 < clever> its 5am now
08:24 < terinjokes> SoulRaven: does this not do what you want? https://gist.github.com/3825785
08:25 < terinjokes> SoulRaven: note that Double is 64 bits (8 bytes), where Float is 32 bits (4 bytes)
08:26 < clever> nathan7: or maybe i'll go back to my original plan
08:26 < clever> nathan7: node-inspector, password protected by something else
08:26 < clever> it looks better then repl! :P
08:28 < nathan7> clever: heh
08:29 < clever> nathan7: will probly be simpler to just use the proxy module in lighttpd
08:29 < clever> maybe with a dash of virtual hosts and pw protection
08:30 < nathan7> Delicious lighttpd C=
08:31 < clever> :D http://theprofoundprogrammer.com/post/25966111813/text-i-fucking-hate-this-i-hate-everything
08:32 < clever> i should get to bed now, *runs*
08:32 < SoulRaven> terinjokes: is not working, still returns     5.944328606571517e-37
08:32 < SoulRaven> 1.0566424531797982e-29
08:32 < pyrotechnick> i propose a new law
08:33 < SoulRaven> using the example from gist
08:36 < terinjokes> SoulRaven: do you know what the expected values are supposed to be?
08:36 < ZBZZN> Hi
08:37 < ZBZZN> Is there a reason to use fs.syncXXX methods?
08:37 < ZBZZN> we have a little argument here :)
08:38 < nathan7> When you have some initialisation
08:38 < nathan7> that needn't be async
08:38 < negative> ZBZZN: i would say it all depends on the situation
08:38 < negative> why am i negative...
08:39 < negative> stupid xchat
08:39 < SoulRaven> terinjokes: something like : lat: 253032016 lng: 54716368 and sometimes negative values
08:39 < ZBZZN> So what is the situation where I want to use the sync methods?
08:39 < SoulRaven> the main ideea is how to convert 4 bytes in double
08:40 < LouisT> ZBZZN: no idea, all depends on what you're doing
08:40 < nathan7> ZBZZN: server init
08:40 < LouisT> i have a file reader that'll read a file line by line, it uses fs.readSync
08:40 < kuja> ZBZZN: I'm pretty new, but to my understanding synchronous code should be avoided at all cost
08:41 < SoulRaven> and also 8bytes in long, for using in unix timestamp
08:41 < terinjokes> SoulRaven: so the bytes represent an integer?
08:41 < SoulRaven> yes
08:41 < kuja> ZBZZN: http://docs.nodejitsu.com/articles/getting-started/control-flow/how-to-write-asynchronous-code
08:41 < nathan7> When your code  gets down to business (ie actually handling shit) async is essential
08:41 < SoulRaven> but for lat/lng sometimes is negative values
08:43 < terinjokes> SoulRaven: ok, so looking at the gist and the API documentation for buffers, what might you guess trying to do?
08:43 < ZBZZN> I know how to write async code, I am just wondering why the methods are there
08:43 < ZBZZN> If I have a pyramid of lets say 10 levels
08:44 < SoulRaven> i try to convert to string, and after that to make a new buffer, but i have bin the resoults
08:44 <@Nexxy> amway.js?
08:44 < ZBZZN> then at some point the event loop time needs to be considered
08:44 < SoulRaven> and is not right
08:45 < terinjokes> SoulRaven: hint, it has to do with the "read" lines
08:46 < SoulRaven> i don't undestand:(
08:46 < ZBZZN> I wonder what is the real cost of leaving to the event loop
08:46 < nathan7> tiny
08:47 <@Nexxy> ZBZZN, the risk of blocking it
08:47 < terinjokes> SoulRaven: if the bytes don't represent a float (but instead an integer, that may or may not be negative), trying to read a float out of it won't be very helpful
08:47 < ZBZZN> Nexxy: what do you mean?
08:48 < SoulRaven> ok, so i read a int
08:48 <@Nexxy> I mean you should jsut be mindful of blocking your event loop
08:49 < terinjokes> SoulRaven: right, and you have a choice between signed and unsigned functions and you got to pock the right 'size'
08:49 < ZBZZN> Nexxy: When I call fs.exists(), where does the check actually happens? A different thread?
08:50 < ZBZZN> Somewhere I would have to "pay" for the time it takes to make the check
08:50 < nathan7> ZBZZN: kernel thread
08:50 < nathan7> ZBZZN: that sorts the IO
08:51 < nathan7> ZBZZN: the slow part is IO, physical disks spinning
08:52 < ZBZZN> nathan7: I understand that, I am just trying to understand who "pays" for that slow part
08:52 < nathan7> ZBZZN: when a thread  blocks on IO, does your entire computer grind to a halt?
08:52 < ZBZZN> nathan7: no
08:52 < nathan7> ZBZZN: or is just that one thread unscheduled until its data is there
08:53 <@Nexxy> ZBZZN, yes
08:53 < nathan7> ZBZZN: the only cost is on the disk
08:54 < nathan7> ZBZZN: the disk has to spin up, read data
08:54 < nathan7> ZBZZN: the disk is occupied with that one IO op
08:55 < nathan7> ZBZZN: the kernel has an interrupt handler for this
08:55 < nathan7> ZBZZN: a callback.
08:56 < ZBZZN> nathan7: so the answer is that the kernel thread pays for it
08:56 < nathan7> ZBZZN: nope
08:56 < nathan7> ZBZZN: the actual disk
08:56 < nathan7> ZBZZN: the kernel thread doesn't block either
08:56 < ZBZZN> oh, so it is not blocking on the kernel thread either
08:57 < ZBZZN> nathan7: great, thanks for the explanation
08:57 < nathan7> ZBZZN: the disk is the only thing that truly blocks
08:57 < substack> legos are blocking
08:58 < ZBZZN> Ok, I think I understand now
08:58 < nathan7> Disks don't spin freely when they are  doing real work
08:58 < nathan7> like event loops
08:58 < ZBZZN> thanks
08:59 < nathan7> C=
09:08 <@Nexxy> substack, ilol'd
09:11 < ZBZZN> substack: are you the substack from github?
09:11 < terinjokes> SoulRaven: figure it out?
09:12 < SoulRaven> yes, for lat/lng
09:12 < SoulRaven> but not for timestamp
09:12 < terinjokes> SoulRaven: how many bits is your timestamp?
09:12 < SoulRaven> 8
09:13 < terinjokes> it's 8 bits? so you get 256 seconds in there?
09:13 < SoulRaven> 8 bytes
09:14 < terinjokes> and is it an integer?
09:14 < SoulRaven> yes
09:14 < terinjokes> can it be negative?
09:14 < SoulRaven> no
09:14 < SoulRaven> is a unix timestamp
09:15 < terinjokes> then congrats, you've limited it down to one possible size
09:15 < terinjokes> so choose the big endian version, and move on
09:15 < SoulRaven> readInt32, but is not working
09:15 < substack> ZBZZN: the substack from github is actually the substack from irc
09:15 < terinjokes> SoulRaven: that's not the right one
09:15 < terinjokes> SoulRaven: how many bytes is 32 bits?
09:16 < chovy> any have any ideas for deploying a node.js app on a linux server? I was going to try to setup git and push to that host w/ a hook to restart the node app.
09:16 < SoulRaven> 8 bytes 
09:16 < terinjokes> no
09:16 < terinjokes> look at how many bits are in your lat/long
09:16 < terinjokes> bytes*
09:16 < ZBZZN> substack: I was looking at your repos earlier today. I am looking for a git integration node package that will let me clone, commit, add etc..
09:17 < ZBZZN> substack: Do you know anything that can help me? You seem to work with git alot
09:17 < SoulRaven> 32biti
09:17 < SoulRaven> 32bits
09:19 < terinjokes> so if you lats and longs were 32 bits 4 bytes, and your timestamp is 8 bytes, how many bits are there?
09:19 < SoulRaven> 64
09:20 < terinjokes> SoulRaven: right, which unfortunately JS doesn't support
09:20 < terinjokes> well, 64 bit integers, that is
09:21 < terinjokes> see the comment that starts here: https://github.com/rmustacc/node-ctype/blob/master/ctio.js#L152
09:21 < SoulRaven> with double i get: 6.66617950642e-312
09:22 < terinjokes> SoulRaven: but that's clearly not an integer
09:22 < SoulRaven> i know, this is what i get when readDouble
09:23 < terinjokes> SoulRaven: right, but your buffer doesn't contain a double
09:33 < SoulRaven> terinjokes: i get '314630916076' with is wrong when i try to use mod_ctype.ruint64(AVL.splice(8), 'big', 0).join('');
09:35 < SoulRaven> with is [ 314, 630966736 ], keep in main the values are unix timestamps so might difere from bin to bin
09:37 < SoulRaven> the unix timestamp is something like: 1349256964
09:42 < terinjokes> SoulRaven: you can't join the array!
09:43 < terinjokes> what's AVL?
09:44 < terinjokes> (plus you want the rsint64 version anyways)
09:45 < terinjokes> SoulRaven: if you're trying to turn the buffer into a string, I'm not sure that's douable
09:46 < SoulRaven> for teltonika devices
09:46 < terinjokes> doable*
09:47 <@Nexxy> http://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end
09:48 < terinjokes> Nexxy: would that work with an int64 though?
09:48 < terinjokes> (from the description, no)
09:49 < terinjokes> SoulRaven: try https://github.com/substack/node-bigint or https://github.com/justmoon/node-bignum
09:49 < terinjokes> (oh, sorry for pinging you substack ;) )
09:50 < bigx_> Hi guys, I would like to know which is the best way to install node.js (0.8.11) on a Raspberry Pi? I saw a lot of tutorials, some patches on github but I also heard about some accepted pull request about arm compilation recently. Am I worng? Regards
09:51 <@mbalho> bigx_: the guys at @clock have done that, maybe ping @clock on twitter with the question
09:51 <@Nexxy> bigx_, cross compiling is probably the "best"
09:51 <@Nexxy> but you can also just compile it on the rpi
09:52 <@Nexxy> last I tried to compile on ARM I had to edit the gyp file though
09:53 <@Nexxy> not sure if that's fixed yet
09:53 < substack> component is stupid if I need to update my packages for people to use it
09:53 < substack> tj already wrote a package manager that failed did he learn nothing?
09:54 <@Nexxy> be nice to teej, he means well
09:54 <@mbalho> fear leads to hate, hate leads to anger, anger leads to suffering
09:54 < substack> but now people are complaining at me to make my repos work with component
09:54 < substack> but I shouldn't have to do that
09:54 <@Nexxy> lol
09:54 < nathan7> :(
09:55 < substack> it should just work with what already exists
09:55 < substack> worse is better
09:55 <@mbalho> yea i wonder what his reasoning is there
09:55 < terinjokes> what's component?
09:55 < substack> https://github.com/component/component
09:55 < substack> it's like npm only it's not
09:55 < substack> so fuck that
09:56 < terinjokes> what's wrong with npm?
09:56 < terinjokes> other than NIH
09:56 < EweR> is there a way in node.js to watch size of the file which is located on a remote webserver and if it changes, then to download that file?
09:56 <@mbalho> oh he just wrote his own npm. dumb
09:56 <@mbalho> as opposed to forking npm
09:56 <@mbalho> and sending a pull request
09:57 < bigx_> Thanks Nexxy, I'm a total noob when it comes to cross compiling. I already succesfully installed node.js 0.8.9 on my Raspberry Pi with the following topic : http://www.raspberrypi.org/phpBB3/viewtopic.php?f=34&t=17647 but it took ages, so that's why I'm looking for a faster way/or binary packages.
09:58 < bigx_> I'll try to contact @clock and go deeper about cross compiling. Regards
09:58 <@Nexxy> bigx_, I have a feeling that ARM binaries will become more readily available sooner than later
09:59 <@Nexxy> mbalho, are you going to nodecopter?
10:00 < SoulRaven> i resolve the problem in another solution, parseInt(AVL.splice(8).toString('hex'), 16);
10:00 < SoulRaven> and i get the full number right
10:04 <@Nexxy> substack, you?
10:04 < bigx_> Nexxy, me too since some pull request about that were accepted. Thanks!
10:04 <@Nexxy> *the* mikeal?!
10:06 <@Nexxy> bigx_, :)
10:06 < terinjokes> SoulRaven: that's because the timestamp that you're testing happens to be representable as an 32-bit integer
10:06 <@mbalho> Nexxy: im goin to nodecopter, yes. sitting next to this right now: http://instagram.com/p/QUO8I0pr2j
10:07 < terinjokes> SoulRaven: depending on what data you're working with, and how long your application continues running, that might not always be the case
10:08 < SoulRaven> with readInt32BE is not working right, maybe because the protocol is something like: 00000113fc208dff
10:08 <@Nexxy> mbalho, aff
10:08 < terinjokes> SoulRaven: right, because that's not an 32 bit integer
10:08 < SoulRaven> where the last bytes represents the timestamp
10:08 <@Nexxy> mbalho, well then.
10:09 < shanse> awwww
10:09 < shanse> I tried getting into nodecopter but was off by a second or so
10:09 <@Nexxy> you have to be fast!
10:10 < shanse> I was there on time but then the site stopped loading
10:10 < terinjokes> SoulRaven: you don't get what I'm saying though
10:10 < shanse> and then all spots were gone on the next reload
10:10 <@Nexxy> shanse, that's because I disconnected your interwebs so I could steal your ticket
10:10 < shanse> obviously
10:10 <@Nexxy> I'm sorry.
10:10 < shanse> god damn haxors
10:11 < SoulRaven> i undestand, because of the leading zeros, that the numbers is in 64biti, but if i read the number as 32biti is right
10:12 < terinjokes> SoulRaven: it shouldn't be, it overflows
10:12 < christophsturm> whats the best way to profile a node app for cpu hotspots?
10:14 < terinjokes> SoulRaven: in the example you gave (00000113fc208dff) you're missing 1 trillion, 181 billion, 58 million, 559 thousand and 235 seconds because you truncated to 32 bits
10:15 < SoulRaven> the timestamp is 32biti wide, no more
10:15 < SoulRaven> so is ok if i truncate 64 to 32
10:16 < terinjokes> SoulRaven: then why are your buffers 64 bits wide and contain non-zero bytes > 32 bits?
10:16 < SoulRaven> because how the avl equipments send the timestamp
10:18 < terinjokes> SoulRaven: of course, your number's probably also a signed value, but if it works for you…
10:19 < SoulRaven> :)
10:23 < konobi> howdy all
10:23 -!- mode/#Node.js [+o konobi] by ChanServ
10:28 <@Nexxy> hai konobi 
10:35 < Sven_vB> when building a large dictionary, how can i determine how many items to pack into an object best? i assume that too many keys in one object, lookup gets slow. however, the deeper i nest the structure, the more lookups i have to do, which also makes it slow.
10:40 < timoxley> Sven_vB I have a feeling that direct property access is a constant time operation
10:43 <@konobi> Nexxy: you're up late/early
10:44 <@Nexxy> konobi, working on my talk ._.
10:44 <@Nexxy> and suddenly it's 3:45
10:45 < aandy> well, 3:44, you've got time
10:45 < TheBadger> having trouble with a really simple server if someone can help, would probably take 10 seconds to call me an idiot
10:45 < TheBadger> http://pastebin.com/hcWFmRF9
10:45 <@Nexxy> TheBadger, bet I can do it in 3
10:45 < aandy> TheBadger: sure, pastebin?
10:45 < TheBadger> never gets to the put request
10:45 < aandy> you're on
10:45 < TheBadger> www.samspi.com:8080
10:45 < TheBadger> thats where it is running, but the put request is never fired
10:46 < aandy> and the get is?
10:46 < TheBadger> yeah go to the link you can see the html form 
10:46 <@Nexxy> TheBadger, you're not specifying the action in the form
10:46 < aandy> works here
10:46 < aandy>  curl -XPUT http://www.samspi.com:8080
10:46 < aandy> Welcome, undefined
10:47 < aandy> but Nexxy is right, there's no <form>
10:47 < caioketo> How can I convert an uin8 array to base64 encoded string? (in the client)
10:47 < TheBadger> hmm, im not sure i understand the curl thing.. all I know is I thought when I type my name in the box it will take me to the other page.. its an example out of a book
10:48 < aandy> TheBadger: that was just to test it technically. does your server respond to _a_ PUT / call. and it does
10:48 <@Nexxy> TheBadger, try adding <form method="put" action="/">
10:48 <@Nexxy> or I guess the action isn't needed
10:48 < aandy> your get / doesn't redirect to it though. so that's the problem
10:49 < aandy> your hidden input tag should be a form yeah
10:49 <@Nexxy> http://pastebin.com/s6kEPnPr
10:49 <@konobi> Nexxy: i changed timezones, so that's my excuse
10:50 <@Nexxy> konobi, I'ma do that on Thurbsday
10:51 <@Nexxy> konobi, did you move?
10:51 <@konobi> nah, just back in .eu for a trip
10:51 <@Nexxy> you're *in* a TLD?!
10:51 <@Nexxy> are you neo?
10:51 < aandy> well, he does change time zones, so
10:52 <@konobi> there is no spork
10:52 < Gottox> welcome to greenwich-near timezones!
10:53 < TheBadger> okay so I added form method thing and it still doesn't take me to the put thing.. I am a total newb on this :( 
10:53 < TheBadger> http://pastebin.com/4aQ7UxEP
10:53 < aandy> TheBadger: we should've probably mentioned that PUT, DELETE and such aren't generally supported by browsers
10:54 < aandy> GET and POST are, so you'll probably want to use POST to make it more available
10:54 < TheBadger> ahh right thanks man, ill give it a whizz.. so that explains why it works in the terminal but not in chrome
10:55 < aandy> i mean, html5 might, but html up until 4, and xhtml1 only supports GET/POST
10:55 < TheBadger> ta daaaaa! it works.. thanks aandy
10:56 < aandy> no problem. vote for PUT/DELETE in forms 2012
10:57 < aandy> you should be able to do ajax calls with PUT though
10:59 < shanse> wtb PATCH
10:59 < rudiX> hello noders 
11:00 < rudiX> I am using runjs to work live with my code ... is there any alternative
11:00 <@Nexxy> nodians*
11:00 < rudiX> because it's really slow since the last update of node.js
11:00 <@Nexxy> I hear nice things about nodemon
11:01 < rudiX> Nexxy: Thanxxy :)
11:01 <@Nexxy> I've always been pleased with node-supervisor
11:01 < shinaku_> I use nodemon
11:01 < TheBadger> nodemon works good for me
11:01 < shinaku_> sometimes it doesn't pick up on all changes, but it's alright
11:01 < aandy> i use forever
11:02 <@Nexxy> supervisor is canonical
11:02 < rudiX> will try them all
11:02 <@Nexxy> rudiX, or you can roll your own
11:03 <@Nexxy> http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener
11:03 < aandy> Nexxy: canonical as in simple/pure?
11:04 <@Nexxy> just being dramatic about it having been written by isaacs 
11:04 < aandy> i'm just a bit confused what canonical means sometimes :)
11:04 < aandy> i thouht it was like stemming
11:04 <@mbalho> its the company that makes ubuntu
11:04 <@Nexxy> CANON
11:05 <@Nexxy> teh standard
11:05 <@mbalho> shiver me timbers!
11:05 < aandy> ah
11:05 < aandy> thanks ;)
11:05 <@Nexxy> AVAST
11:05 <@mbalho> load zee canons!
11:05 <@Nexxy> ye...
11:05 <@Nexxy> get in zee choppers!
11:05 <@mbalho> its not a tumor
11:05 <@Nexxy> take off zee zigs!
11:05 < aandy> oh man, anyone catch fallons impression of the governator yesterday?
11:06 <@Nexxy> We don't speak of fallon
11:06 < aandy> clearly
11:06 <@Nexxy> he doesn't have enough cowbell
11:07 < aandy> in defense, i'm pretty sure he doesn't speak of us either
11:07 < aandy> :(
11:08 <@Nexxy> turn that frown... uʍop ǝpısdn
11:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:21 < hij1nx> having interesting problem with crypto in 9.x, does anyone know if verify is borked?
11:27 < aandy> hij1nx: crypto 0.9?
11:28 < aandy> i'm off the mailing list, but i have noticed some apps switching dependencies to >= 1.0
11:28 < aandy> that doesn't mean verify is broken though
11:40 < lpin> if (match(subject) || othersubject ? match(othersubject) : false) {
11:41 < lpin> is something like this optimized to if (match(subject)) {... at runtime if othersubject === null ?
11:43 < lpin> or would be just better to move null check inside match to improve readability
11:43 < lpin> ?
11:43 < aandy> lpin: well, not sure about runtime, but even if it's not, it should stop evaluating after the match(subject) (if it returns true), then the condition is met and it doesn't need to evaluate the last
11:45 < aandy> lpin: that said, i would still move it in for readability. i think you're doing yourself a favor
11:45 < dEPy> question: I have a chat server in node (using Faye). I have two people talking about a task they want to complete.
11:46 < dEPy> Now I want the history functionality for when one clients (or the other) disconnects from the chat and comes back, I want the client to recieve the all messages for the current channel and start recieving new ones.
11:47 < dEPy> This is on a standard web page, so if I reload/refresh the page and get some messages meanwhile those have to be stored.
11:48 < lpin> aandy alredy did that way, just wanted to know if there was a more efficient way cause "subject" is almost never null
11:48 < dEPy> Queue would be appropriate but poping/reading from queue must not delete the message from queeu then.
11:48 < hij1nx> i think crypto is borked on 0.9.x https://gist.github.com/3826497#comments
11:49 < lpin> and that would cause a almost useless check
11:49 < lpin> anyway thank you :)
11:49 < hij1nx> who is currently working on the crypto module?
11:50 < aandy> lpin: useless check how? if match(subject) is almost never null (or is it just subject?) then the second condition won't be checked
11:50 < hij1nx> time to read some commits i guess...
11:51 < lpin> aandy just the param
11:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:54 < hij1nx> ok, so there are a lot of people working on crypto, who owns it?
11:54 < hij1nx> s/crypto/crypto module/
11:56 < lpin> aandy 99% of the times the function get called with the param !== null so checking for null param inside the function itself is not very efficient
11:58 < txdv_> but what if that idiot of an user doesn't check this 1%
12:01 < aandy> lpin: ah okay, well then put (param && match(param)) ?
12:02 < lpin> aandy good point
12:02 < aandy> should do what you want
12:02 < lpin> that should work indeed
12:02 < aandy> let me know if it doesn't work
12:03 < lpin> didn't thought about that, thank you
12:03 < aandy> and thanks for being so cautious about these things. sadly, not every programmer is :)
12:48 < caioketo_> Hi there, I got a lot of things working, my node.js server translate the byte array to base64 encoded string, and send to webClient, but, in webClient I got an uint8 array and I need to encode in base64 string, how can I do that/
14:23 < draginx> http://pastie.org/private/ixszrmz3hoou2gh0yxwzrg any idea why 'and were off!' wont execute?
14:26  * dragon glares at draginx 
14:26 < draginx> ? :D
14:26 < dragon> Are you mocking me?
14:26 < dragon> :P
14:26 < draginx> lol
14:26 < durango> I like this name better anyhow :P
14:26 < dragon> hahah
14:27 < durango> So PHP can do websockets O_o wonder how it compares to socketio :D
14:27 < dragon> I seriously doubt PHP's capabilities.
14:27 < dragon> and in that paste - too much JS. :P
14:27 < deoxxa> the issue is with php application design
14:28 < deoxxa> most php applications aren't designed to be long running
14:28 < deoxxa> which is something of a requirement for web socket use
14:28 < dragon> If you feel like the brackets get confusing, and if you like how python's indentation is a part of the syntax, CoffeeScript is for you.
14:28 < durango> right but im sure u can spawn it as aprocess right? :p
14:28 < durango> so yeah anyone know why my async.forEach wont callback? :/
14:29 < dragon> durango: I hope you're not planning to spawn one process per websocket client.
14:29 < durango> dragon: I've convinced my company to use nodejs :P
14:29 < durango> so I'm good ;) but the lead developer
14:29 < durango> wants to stick to php
14:29 < dragon> durango: good job! If you like node.js, you'll love CS!
14:29 < durango> we're a printing company with large amounts of data (images) being passed to our APIs.. I tried explaining throughput to him :P
14:30 < dragon> hah, I sound like CS marketing guy.
14:30 < luite> they did make some improvements to support long running apps better. their reference counting has been augmented with a garbage collector that can collect cyclic references
14:30 < durango> Idk, some of the people that I respect  alot in this community are anti CS and when is CS 2 coming out? May be map sourcing will change everything
14:30 < dragon> Trust me, I'm not. I just find it easier to read than JS.
14:31 < AAA_awright> durango: PHP can do UDP and TCP servers, I wrote a game server that way
14:31 < syskk> is there anyway to setup a "breakpoint" programmatically in Node.js? for instance id like to write : console.log('something'); break_here_until_user_pressed_enter();
14:32 < luite> syskk: you can add a debugger; statement
14:32 < luite> it will break if you run it with node debug
14:32 < syskk> ok ill try that
14:33 < syskk> doesnt seem to work
14:33 < syskk> im running with node --debug app.js
14:34 < durango> AAA_awright: I'm sure it can :P but let's compare it to node? :D
14:34 < AAA_awright> It does event loops and everything
14:34 < luite> syskk: node debug app.js, then c (to start), and then it breaks automatically on the debugger statement for me
14:34 < durango> syskk: you can do events?
14:34 < syskk> ah :(
14:35 < durango> AAA_awright: right but theres also the throughput issue no?
14:35 < syskk> guess so durango...
14:35 < durango> handling large amounts of data in / out
14:35 < AAA_awright> durango: If you're not doing disk I/O or anything like that no
14:35 < durango> true
14:35 < durango> so nodejs really isnt that much better than php? :P
14:35 < AAA_awright> As a communication server there's very little blocking anything
14:36 < AAA_awright> I wouldn't recommend it over something in ECMAScript
14:36 < AAA_awright> But it does work
14:36 < syskk> what is the node.js function to exit a running script?
14:36 < AAA_awright> Also note it's being run as a CLI app, running that on Apache would be deadly
14:37 < syskk> process.exit() right
14:37 < AAA_awright> syskk: http://nodejs.org/docs/latest/api/all.html#all_process_exit_code
14:38 < durango> So when does nodejs shine over php?
14:38 < syskk> AAA_awright: thanks
14:39 < AAA_awright> durango: ... Everything
14:39 < durango> lol so in terms of performance?
14:39 < aandy> oh no, not this again. please see topic
14:39 < aandy> can we not have two days without the apache troll'ing?
14:40 < AAA_awright> No.
14:40 < AAA_awright> And it's not trolling... That's against the rules! /s
14:40 < aandy> i hope it's not
14:41  * C0deMaver1ck goes and get's his Rails and Django buddies for a flame war
14:42 < aandy> can't we all just put while (true) {} around our if else and buts?
14:43 < rio{> Is people using nginx for production environments? (environments that is not hosted using heroku/nodejitsu etc)
14:43 < rio{> For web applications that is
14:44 < caioketo_> Hi there, I got a buffer with an uint8 array, and I need to convert it to byte array to send via net
14:44 < aandy> yes
14:44 < aandy> quite a few actually. almost a majority you might say
14:45 < caioketo_> Is it possible to convert uint8 array to byte array in node?
14:56 < jarr0dsz> hi all, anyone can recommend a clean user interface framework or library for jquery ( not jquery ui ?) ?
14:57 < SomeoneWeird> bootstrap or something?
15:00 < dEPy> any1 can give me an advice on implementing a chat server?
15:00 < dEPy> There will be max 2 clients in chat, I'm gonna store chat messages in a db
15:01 < dEPy> when I reload the web page, or navigate somewhere else and come back I want all my messages to be loaded from the db and the current messages keep coming
15:01 < drey> dEPy: websockets?
15:01 < dEPy> The problem I'm having is that meanwhile while my page is rendering and JS is not ready ppl can still send messages and the other client won't recieve them
15:02 < dEPy> I have a chat server with node+faye so far
15:02 < aandy> dEPy: so you need some authentication, and then for handling messages use something like socket.io (if you want to support non-websockets), and have users subscribe to "conversations" -- and store messages on receive. send old messages on connect
15:02 < drey> well, you can only really know when their request first hits your server
15:03 < drey> keep that time, get the time they're 'ready'
15:03 < drey> and send anything in between?
15:03 < dEPy> hm, I have a web server running rails, and chat server in node
15:04 < dEPy> So I would need to sync that somehow
15:04 < aandy> socket.io
15:04 < dEPy> I told you I have faye already which works fine
15:05 < aandy> no, you told me you asked for advice on how to make a chat server
15:05 < dEPy> aandy, I then wrote what problem I'm having
15:05 < dEPy> I need an idea/concept on how to deal with those messages that could be lost and how to identify them
15:06 < aandy> "dy ppl can still send messages": authentication problem, correct? "the other client won't recieve them": they're not subscribed or you're not publishing the messages to their conversations
15:06 < aandy> ready*
15:06 < holzp> if there any indication when nginx 1.3 will support websockets?
15:06 < aandy> dEPy: i'd advise that you don't let people send before they're ready
15:06 < drey> dEPy: why not just not let them send till the js is readY?
15:06 < aandy> or make a local queue
15:06 < drey> imo local queue would seem odd
15:06 < aandy> i agree
15:06 < drey> if other clients just get a blob of messages from one in the past
15:07 < aandy> but that's the two ways of handling it there is :) either deny or buffer
15:07 < dEPy> so I would have to lock everyone else when someone is not subscribed
15:07 < drey> no?
15:07 < aandy> hmm, what do you mean, dEPy?
15:07 < dEPy> Look, the scenario goes like this... :)
15:08 < dEPy> You and me are working on a task, and we have a web page where the chat is
15:08 < durango> if ur using nginx + websockets ull need haproxyt or something in front of it to prevent nginx picking it up :P
15:08 < dEPy> But! I'm working with other people on different tasks also. 
15:08 < dEPy> So when I reload the page or navigate to different chat. I don't want YOU to know that.
15:09 < dEPy> You shold be able to send messages.
15:09 < holzp> yea i have varnish + stunnel in front
15:09 < aandy> right, so a client sends messages to a "topic" (or channel, or conversations, whichever you want to call it)
15:09 < aandy> when your node chat server receives these messages, it does two things
15:09 < dEPy> And when I come back. I should get all the messages (preffered from http get request already) AND start receiving async messages immidiately
15:10 < aandy> 1. store in db for that key, 2. broadcasts to all who are listening for that key (if any)
15:10 < dEPy> aandy yes, each task has it's own channel
15:10 < hellopat> hi all, is node inspector a good way to debug node applications?
15:11 < dEPy> aandy so far so good yes, but while the page is rendering (I got my old messages from server) the other guy can write few lines.
15:11 < dEPy> those linse will be lost because at the time I got my messages from db they weren't there
15:11 < aandy> how long does it take for your rails app to render? :P
15:12 < drey> can't you just send a 'rendered' even to the server, and get the message histroy at that stage?
15:12 < aandy> well, anything BEFORE either db.fetch OR faye connection will always be lost
15:12 < dEPy> drey I could use ajax yes. But some ppl which I work with don't want to do that.. :)
15:13 < aandy> they want faye but not ajax. what kind of people? :D
15:14 < dEPy> I think I'm overcomplicating this :)
15:14 < aandy> okay, look. instead of putting message backlog in the render
15:14 < aandy> put it in faye
15:14 < aandy> that way you'll always have the latest
15:15 < aandy> so you render the html, chat window whatever
15:15 < aandy> and fill it once you've connected
15:15 < dEPy> hm
15:15 < dEPy> that should work ye
15:15 < aandy> and if you're really spammed, then queue the incoming events until after your backlog is done
15:16 < dEPy> so, I cache messages in memory in nodejs (plain JS object/array), and when someone subscribes (connects) I get them the whole log?
15:16 < aandy> so all realtime messages are queued while you're "rendering" the backlog
15:16 < aandy> don't know about the memory part, no. you don't have to do that
15:16 < dEPy> ye, in the meanwhile while sending old messages just put new ones at the end of the log, and when the log is empty avoid it?
15:17 < aandy> sure, prepend with the backlog and append with the realtime events would work
15:17 < aandy> would look weird, but i doubt people would notice
15:17 < aandy> unless what they're subscribing to is twitter^10
15:17 < aandy> :)
15:18 < dEPy> not yet ;)
15:18 < dEPy> it's actually 1on1 chat, but many rooms
15:18 < dEPy> shouldn't be a problem i guess
15:25 < durango> nodejs is not single threaded right?
15:25 < BennyLava> sure it is
15:26 < dogmatic69> its just the same as JS in a browser.
15:26 < dEPy> it is, it's just evented
15:26 < durango> so if its single threaded then that means u can only run one process at a time
15:26 < durango> but since its evented it can do multiple things at once?
15:26 < BennyLava> "you"
15:26 < dEPy> it can do things asynchronously
15:27 < BennyLava> No, doing things asynchronously is not the same as doing multiple tings at the same time
15:27 < BennyLava> things*
15:27 < dogmatic69> you can run 100 nodejs processes at a time if you like, all on different ports
15:27 < C0deMaver1ck> so then how does node utilize my 8 core processor?
15:27 < BennyLava> C0deMaver1ck: it doesn't, by default
15:27 < dogmatic69> it does not
15:27 < BennyLava> C0deMaver1ck: http://nodejs.org/docs/latest/api/cluster.html
15:28 < C0deMaver1ck> BennyLava: thank you
15:29 < C0deMaver1ck> BennyLava: do you know when the cluster API was introduced?
15:29 < aandy> last version
15:29 < aandy> last stable anyway
15:30 < RLa> it was in 0.6 but was considerably changed in 0.8
15:31 < RLa> C0deMaver1ck, cluster api allows to run them all on the same ports
15:34 < durango> is using nodejs a bad idea when I want to do image manipulation work?
15:34 < durango> since it might be high CPU usage???
15:37 < EyePulp> durango: your question lacks clarity
15:37 < CoverSlide> there's nothing wrong with it, i just wouldn't have it use the same process as all your other stuff
15:37 < durango> CoverSlide: so you woiuld use spawn?
15:37 < aandy> durango: it would be hight cpu anywhere, so make sure you have background processes and it should be ok
15:38 < durango> right whats the best way to implement background processes in nodejs?
15:38 < CoverSlide> personally, I would have a long-running dedicated background process that accepts data from your main process
15:38 < aandy> do you need to communicate?
15:42 < wockan> Hi, can anyone give me a good design pattern to use when creating nodejs rest API. I've mostly been working with Java. But most of the pattern are awkward to use :)
15:43 < aandy> CoverSlide: could you make a background "pool" for that?
15:44 < aandy> CoverSlide: or would you substitute for a cluster?
15:45 < durango> aandy: uhh i need it to tell me when its done with certain processes
15:46 < durango> and when its done
15:46 < CoverSlide> you can do taht too
15:46 < durango> with what?
15:46 < CoverSlide> personally i wouldn't use cluster for it, just plain cp
15:46 < CoverSlide> .fork
15:47 < aandy> CoverSlide: how about a pool, you wouldn't use that?
15:47 < CoverSlide> just because if you have a process dedicated to one type of job, it should have its own code
15:48 < CoverSlide> I'd use a pool
15:49 < CoverSlide> here's the thing, if you're using cluster for your main thread, I don't think I'd want to spawn a dedicated image handling process for each worker
15:49 < aandy> exactly
15:50 < aandy> CoverSlide: would you mind putting up a small pseudo example? :) what i'd imagine is you have your main thread, and <# cpu's> as a load balance'ish setup for pool, but is that incorrect?
15:50 < durango> so cluster main app
15:50 < durango> but have another app handle image stuff
15:51 < durango> even if its small like identify + convert to thumbnail?
15:51 < durango> (I need to pass the identify data back though)
15:51 < CoverSlide> well that depends
15:51 < durango> on?
15:51 < aandy> no, cluster the image stuff, and have another app as main. so you have a "pool" that always ready to accept an image job
15:52 < CoverSlide> are you calling identify / convert as commands? or are you using the imagemagick library within node?
15:52 < CoverSlide> because in the first scenario, it happens asynchronously anyway, so this scalability is kind of a moot point.
15:53 < durango> im calling them as commands
15:53 < durango> since the imagick wrapper / gm was slooooooow
15:53 < durango> for some reason
15:54 < durango> exec = much faster
15:56 < CoverSlide> i mean you can put that on a separate process anyways, but since all the actual image handling will be done by convert in another process, worrying about the cpu usage and blocking on the thread wouldn't be so much of an issue
15:57 < durango> ah ok so if i use exec
15:57 < durango> would I still be able to use cluster?
15:57 < CoverSlide> yeah
15:57 < CoverSlide> but test it out for yourself, do your own benchmarks for your own scenario
15:58 < CoverSlide> i mean, using all that cpu still might be good to delegate to another dedicated server 
15:58 < CoverSlide> but that depends on your needs / volume / usage
15:59 < CoverSlide> premature optimization is the root of all evil
15:59 < nariyal> Trying Node for the first time. The project I'm trying to work on (https://github.com/harvesthq/chosen) talks about the 'cake' command to build the coffeescript
15:59 < EyePulp> CoverSlide: I thought figuring out cache expiration was the root of all evil
15:59 < aandy> hehe
15:59 < nariyal> But I can't find cake anywhere. Apparently npm does not build cake. How do I get cake?
15:59 < EyePulp> nariyal: I'd try a bakery.  
16:00 < aandy> nariyal: cake is "make" for coffee-script. npm install coffee-script
16:00 < BennyLava> pie is better.
16:00 < nariyal> EyePulp: I didn't think of that. I tried Google.
16:00 < EyePulp> =P
16:00 < CoverSlide> nariyal: npm -g coffee-script
16:00 < EyePulp> npm install batter oven
16:00 < CoverSlide> it will install the `coffee` and `cake` executables
16:01 < nariyal> aandy CoverSlide  Thanks. nom install -d is supposed to have done that. I'm trying the command anyway.
16:01 < CoverSlide> oops, that's npm install -f coffee-script
16:01 < CoverSlide> -g*
16:01 < CoverSlide> grr i cant type today
16:01 < nariyal> Sorry, I'd typed npm, but either the Mac/Textual spelling corrector is mucking up things.
16:02 < CoverSlide> hm
16:02 < nariyal> Yaay nom install -g coffee-script saves the day. Thank you great folks.
16:02 < nariyal> Again. nPm.
16:06 < syskk> anyone familiar with mongoose? why does user.passports.push({a: 'b', c: 'd'); invert the order of the object keys?
16:07 < Sven_vB> as far as i know, there is no expectation ordering for JavaScript object keys in the first place. if your implementations had them ordered in the past, that looks like luck to me.
16:10 < syskk> Sven_vB: it seems MongoDB cares about key order
16:11 < CoverSlide> i think mongo uses spidermonkey internally
16:11 < CoverSlide> although for storage, who knows
16:11 < gkatsev> they run SM
16:11 < CoverSlide> in perl or python, a hash table is never ordered and people would just accept that
16:12 < CoverSlide> i don't see why the order is important. basic lesson is to never trust the order of a hash table / json document
16:13 < CoverSlide> syskk: why do you say that mongodb cares about key order? where do you get that information?
16:14 < aandy> it most certainly doesn't. it doesn't even care about keys in a strict sense
16:14 < syskk> CoverSlide: db.users.find({passports:{c:"d",a:"b"}});   this returns a document… this doesn't: db.users.find({passports:{a:"b", c:"d"}}); 
16:14 < syskk> if you guys solve this mystery for me you are gods:D
16:15 < aandy> syskk: can you give me the doc you want returned by both?
16:15 < syskk> passports is an array of objects
16:16 < syskk> aandy: { "_id" : ObjectId("506c5c39733b7e89e13a9222"), "name" : "Test", "passports" : [ { "a" : "b", "c" : "d" } ] }
16:16 < syskk> well actually db.users.find({passports:{a:"b", c:"d"}}); returns the object
16:16 < syskk>  db.users.find({passports:{c:"d",a:"b"}}); doesn't
16:19 < syskk> i want to return any users who has { "a" : "b", "c" : "d" } in its passports array
16:19 < syskk> maybe im not doing it the right way?
16:20 < aandy> syskk: do you have your passports indexed?
16:21 < syskk> aandy: been reading stackoverflow and it seems that might be the problem right? im new to mongodb 
16:21 < syskk> i let mongoose do the heavylifting
16:21 < syskk> how would i index it?
16:23 < aandy> syskk: i'm trying a few steps here, one sec
16:24 < syskk> http://www.mongodb.org/display/DOCS/Indexes#Indexes-IndexingArrayElements
16:24 < aandy> seems you need to use multikey and it should be fine
16:25 < syskk> which means?
16:27 < justicefries> anybody have any issues with node-mysql disconnects causing node.js to exit?
16:28 < context> is the disconnect itself causing node to exit, or an error happening when you try to query against the closed connection ?
16:29 < aandy> syskk: you could also have dot indexes
16:30 < aandy> like: db.users.ensureIndex({"passport.a": 1, "passport.c": 1})
16:30 < aandy> db.users.find({"passports.c": "d", "passports.a": "b"}) -> your doc
16:30 < aandy> and similar for
16:30 < aandy> db.users.find({"passports.a": "b", "passports.c": "d"}) -> your doc
16:31 < justicefries> context: no queries are happening. the disconnect is causing it.
16:32 < aandy> syskk: so long story short, yes we were doing it wrong, but only to some extend. what you're querying on should be indexed, and that's what we just did (the right way)
16:32 < justicefries> basically, i reconnect..
16:32 < justicefries> after so many times, the node process exits.
16:32 < justicefries> it's interesting
16:32 < justicefries> I dropped my wait_timeout just to verify it's that
16:32 < justicefries> and no interesting trace.
16:33 < aandy> otherwise you're trying without index, which is an exact match - at which point you're shooting 50/50 whether your exact object is right (including the order at which mongo receives AND interprets it)
16:33 < syskk> aandy: ok interesting. kind of sucks though cause i wanted my passports to be arbitrary hashes .. they dont all have the same keys
16:34 < aandy> syskk: then you might have to think about it another way. do you need to find multi? because c: "d", or a: "b" still worked in your standard example without any special indexes
16:34 < syskk> aandy: yes it did work.
16:35 < syskk> aandy: i have a suspicion that Mongoose is reordering my keys without telling me :o
16:35 < syskk> aandy: I'll hook up a debugger and see what it dows
16:37 < aandy> syskk: right, but you shouldn't trust the order, as CoverSlide also mentioned
16:38 < CoverSlide> yeah i suspect db.users.find({passports: {a:"b",c:"d"}}) is using a string match
16:38 < syskk> aandy: so is there anyway to match an hash like im doing if i dont know the keys in advance? 
16:38 < syskk> ahhh i guess i could do it programmatically
16:39 < syskk> and build the query
16:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:43 < TheEmpath> its a "limitation" in mongo itself.  order can't be guarenteed when dealing with JSON.  thats why they have atomic operations like $set and $append
16:43 < TheEmpath> and thats why you can't modify the same value twice in an atomic operation because order can't be guaranteed in an eventually consistent database
16:44 < TheEmpath> has mongoose reduced its memory usage?  I'm still very wary of ORMs + Node
16:44 < qubit[01]> syskk, youll probably have to use the $where and javascript 
16:44 < TheEmpath> well ODMs in this case
16:44 < qubit[01]> it kind of defeats the point for me, I dont want an orm, its all just a json doc anyway
16:47 < aandy> you should try neo4j then :)
16:48 < syskk> TheEmpath: if order is not important why do i get 2 different result when i change order of my keys then :(
16:49 < aandy> because it's an exact match, not a object comparison
16:52 < Sven_vB> i'd join in thinking that there is a String conversion happening, which can turn out both ways without ever guaranteeing which
16:54 < syskk> http://stackoverflow.com/questions/7222062/mongodb-composite-key
16:55 < TheEmpath> now try $set({a: 1, a: 2})
16:56 < TheEmpath> using whatever selection you want
17:01 < context> http://lolzbook.com/2012/06/his-last-words-werewhat-a-smart-guy/
17:02 < s5fs> scumbag siri
17:02 < euoia> ls
17:02 < euoia> oops
17:02 < s5fs> df -k
17:02 < syskk> well, here's how i solved the problem in case anyone's curious : https://gist.github.com/3828324
17:03 < context> not allowed to do {passports: passport} ?
17:05 < DaMorpheuS> hello does someone have a good example how to use db.walk (riak) in node.js
17:06 < syskk> context: it seems not as the key order might not be the same. see discussion above
17:06 < aandy> syskk: you might also want to check out orientdb http://code.google.com/p/orient/wiki/DocumentDBComparison
17:07 < syskk> aandy: ok thanks i will. won't use it for this project though deadline too tight :(
17:10 < aandy> syskk: i think you can use elemMatch instead
17:10 < aandy> without going through all the trouble of advanced indexes
17:11 < aandy> db.users.find({"passports": { $elemMatch: {c:"d", a: "b"}}})
17:11 < aandy> db.users.find({"passports": { $elemMatch: {a: "b", c:"d"}}})
17:11 < syskk> ah
17:11 < aandy> both return the same doc here
17:11 < syskk> let me try that
17:11 < astropirate> Well.... this is infuriating.....  author of inactive ( > 1 year )  refuses to give up npm package name!  
17:11 < aandy> ashb: take (name)-real, that'll show him
17:12 < aandy> astropirate*
17:12 < astropirate> haha
17:12 < aandy> or -working
17:12 < aandy> lol
17:12 < mscdex> -nodejsrules
17:12 < syskk> aandy: just found out about it? thats what ive been looking for since the beginning :D
17:12 < aandy> ;)
17:16 < caioketo_> hello there
17:16 < caioketo_> I got an uint8 array in a buffer, and I need to send it via net socket, but the server is excpecting byte array, how can I convert it properly?
17:19 < mscdex> caioketo_: Buffers are essentially uint8 arrays
17:20 < caioketo_> the prob is that i send from the client an uint8 array that the firsts elements are (21, 0, 0, 0) and when I debug on my server, the array I got is something like (116, 190, etc)
17:21 < caioketo_> how can I make it the same in the webclient and the server?
17:21 < caioketo_> the node.js server will just wrap the message between the .net server and the webClient
17:23 < syskk> aandy: thanks a lot by the way :)
17:26 < mscdex> caioketo_: something sounds messed up somewhere then because bytes are bytes
17:27 < caioketo_> how can I check the raw bytes in node? like log it in console, or somthing?
17:27 < aandy> syskk: no problem. it worked? :) good luck on your deadline
17:27 < syskk> aandy: yep. thanks haha :)
17:27 < aandy> ;)
17:28 < aandy> caioketo_: just console.log(your_var), it will show the buffer as a byte (hex) representation
17:28 < caioketo_> ok, let me try that and let you know if the prob is in node or in the webclient
17:28 < mscdex> caioketo_: what are you using to transport the data between the two? a raw tcp socket, socket.io, something else ?
17:28 < mscdex> caioketo_: and is your "webclient" a browser?
17:29 < caioketo_> socket.io
17:29 < caioketo_> browser
17:30 < caioketo_> in buffer i got "5b 6f 62 6a"
17:30 < caioketo_> prob the webclient is wrong in some point
17:31 < CoverSlide> hmm is it even possible to send binary data over socket.io?
17:32 < mscdex> caioketo_: i think socket.io encodes data to string/json or something last i remember, so i'm not sure how it's handling typed arrays
17:32 < CoverSlide> i mean, with websockets, i think you can set it to raw mode, but what about other sockets?
17:32 < caioketo_> i know that
17:32 < CoverSlide> s/sockets/transports/
17:32 < caioketo_> but in the client
17:32 < caioketo_> i do the conversion to base64 string
17:33 < caioketo_> socket.send(btoa(buffer))
17:33 < caioketo_> the buffer is an uint8 array
17:33 < caioketo_> with the values (21, 0, 0, 0)
17:33 < CoverSlide> oh
17:33 < caioketo_> is it wrong?
17:33 < CoverSlide> new Buffer([0x5b, 0x6f, 0x62, 0x6a]).toString() === '[obj'
17:34 < caioketo_> and when I got the message in node I do like this new Buffer(data, 'base64');
17:34 < CoverSlide> that's what's getting sent over
17:34 < caioketo_> so its sending [object] something?
17:34 < CoverSlide> it's stringifying the object before encoding
17:34 < CoverSlide> yeah
17:34 < CoverSlide> looks like
17:36 < caioketo_> in client i did console.log(b64)
17:36 < caioketo_> and it log this: "W29iamVjdCBVaW50OEFycmF5XQ== "
17:36 < caioketo_> i dont know how to make it
17:37 < CoverSlide> new Buffer("W29iamVjdCBVaW50OEFycmF5XQ==", 'base64').toString() == '[object Uint8Array]'
17:37 < mscdex> :-)
17:37 < caioketo_> ohhh
17:37 < caioketo_> so
17:37 < caioketo_> im not passing the properly object to btoa function
17:37 < caioketo_> how should I do it?
17:37 < caioketo_> like a viewer?
17:39 < mscdex> caioketo_: a quick and easy way would be to have a function that loops through and copies the typed array into a plain array and use that instead
17:39 < caioketo_> and how can I do that? i dont know nothing about plain arrays
17:40 < caioketo_> how can i create a plain array?
17:40 < wockan> new Array() ?
17:40 < mscdex> caioketo_: var a = [];
17:41 < wockan> that too :D
17:41 < mscdex> then just a.push(value);
17:41 < caioketo_> something like this? "    var plain = [];     for (var i = 0; i < typed.length; i++) {         plain[i] = typed[i];     }     return plain;"
17:41 < mscdex> uh
17:41 < mscdex> kinda
17:41 < caioketo_> plain.push(typed[i]);
17:41 < mscdex> use plain = new Array(typed.length);
17:43 < wockan> what ide do you guys use writing nodejs?
17:43 < s5fs> wockan: I use vim, but sublime text is popular
17:44 < s5fs> neither are full-blown IDEs though
17:44 < caioketo_> in node buffer it got (2c 2c 2c 2c etc)
17:44 < caioketo_> so still wrong? =/
17:44 < caioketo_> i did console.log(plain)
17:44 < caioketo_> and its ok
17:45 < caioketo_> but in node it got crazy
17:45 < CoverSlide> Array.prototype.slice.call(myUintArray)
17:45 < wockan> s5sf, vim feels like a pain using multiple files. 
17:45 < wockan> tho i got novice skills using vim... so what do i know
17:45 < caioketo_> i do slice before calling btoa?
17:45 < s5fs> wockan: haha, i'm not advocating vim, just stating what i'm using :)
17:45 < CoverSlide> yeah
17:46 < CoverSlide> waut
17:46 < wockan> s5fs, well you crazy!!  ;)
17:46 < s5fs> wockan: take a look at sublime text
17:46 < CoverSlide> nevermind
17:46 < CoverSlide> wow this is not easy
17:46 < caioketo_> yeah, i also think that it would be easy
17:47 < wockan> s5fs i will :)
17:47 < caioketo_> but dont work like it should
17:48 < wockan> ive been using eclipse as i have mostly been doing java and using it at work
17:48 < wockan> but it feels kind of crazy to
17:48 < caioketo_> i use visual studio
17:48 < caioketo_> but not so good either
17:48 < s5fs> caioketo_: maybe try base64.encode instead of btoa?
17:48 < caioketo_> base64.encode?
17:49 < s5fs> wockan: i'm doing java with netbeans here, haha
17:49 < wockan> ahh netbeans i loved it
17:49 < s5fs> caioketo_: dig this http://jsperf.com/btoa-vs-third-party-base64-encoder-5/2 mentions some issues with btoa and lists alternatives
17:49 < jmoyers> sublime text
17:49 < jmoyers> is the way to go
17:49 < wockan> stopped using it when i switched work
17:49 < jmoyers> for sure
17:49 < jmoyers> snippets, fast, cross platform, good style, good command system
17:49 < DaMorpheuS> hey guys is there an systax document for riak-js
17:50 < jmoyers> what is a 'syntax document'?
17:50 < s5fs> Is it possible to get ssl working with connect? nothing jumped out at me in the documentation.
17:51 < Slade-> does node.js have a way to change users in linux?
17:52 < s5fs> Slade-: in what sense?
17:52 < Slade-> I need to bind to port 80, therefore have to start as root, but I want the application to not run as root afterwards
17:52 < jmoyers> Slade- sure
17:53 < jmoyers> setuid
17:53 < jmoyers> process. i believe
17:53 < wockan> sublime no os :/
17:53 < jmoyers> ?
17:53 < jmoyers> sublime is cross platform
17:53  * Slade- tests
17:53 < caioketo_> i think that only works with strings
17:53 < CoverSlide> Array.prototype.reduce.call(myUint8Array, function(r, i){return r + String.fromCharCode(i)}, '')
17:53 < caioketo_> not arrays
17:53 < wockan> trying to only use open source stuff (free!)
17:54 < s5fs> wockan: that's why i'm using vim
17:54 < CoverSlide> sublime is freemium, it only nages once in a while
17:54 < wockan> hmm oki
17:54 < CoverSlide> there's eclipse if you want free, but .. it's eclipse
17:54 < aandy> besides, what's a little nagging
17:55 < fkm> Is it possible to have Apache and node.js running in parallel on port 80? I would like to continue using Apache for my existing domains and use node.js for a new domain on the same server/ip.
17:55 < jmoyers> s5fs re https, you need to read in a private key and cert
17:55 < aandy> ah okay, i see the price for sublime has gone up
17:55 < aandy> not that expensive though
17:55 < CoverSlide> fkm: you'd have to condigure mod_proxy
17:55 < wockan> fkm not really
17:55 < jmoyers> I'm sure you can pass key: and cert: params in the options hash on construct
17:55 < luite> fkm: you can't bind them both to that port unless you have multipl ip addresses, but you can configure apache to forward requests to node
17:55 < s5fs> jmoyers: understood, i'm looking at the tls examples for node proper, so i'm creating an "options" object w/the keys in it but then i don't know what to do
17:55 < fkm> CoverSlide: Ok. So I'd pass the request through Apache. 
17:55 < fkm> Thank you!
17:55 < wockan> fkm yep thats the way
17:56 < caioketo_> so, still not working....
17:56 < s5fs> jmoyers: hm, thought i was doing that. lemme review my work, it's not many loc
17:56 < coltr> Slade-: the `bind` happens as part of `listen`, so you have to `listen` before you downgrade using `process.setuid`
17:56 < fkm> What about multiple node.js Projects for the same domain (different subdomains) on the same server?
17:56 < jmoyers> too bad I'm about to head into a meeting, but you're on the right track :P
17:56 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:56 < jmoyers> fkm express has a way to do vhosts
17:57 < fkm> kk
17:57 < fkm> Thank you jmoyers!
17:57 < s5fs> jmoyers: haha crap! i just haven't seen any clear examples so i've been following other createServer examples.
17:57 < Slade-> coltr: :yea :)
17:57 < jmoyers> s5fs look up nodes tls.createServer
17:57 < caioketo_> i think ill give up on this for now.... maybe in some weeks i go back to it, since I dont know how it cant work properly
17:58 < caioketo_> this is getting me very stressed 
17:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:00 < s5fs> jmoyers: will do. i'm doing similar to the tls examples, but using connect to start the listener, not sure if that's the breakdown or what.
18:00 < jmoyers> s5fs https://github.com/senchalabs/connect/blob/master/lib/proto.js#L201-230
18:00 < s5fs> jmoyers: perfect, thanks!
18:09 < wockan> thanks for the suggestion of using sublime
18:09 < wockan> looks nice
18:10 < s5fs> wockan: good deal!
18:12 < wockan> have you guys made any web applications that are running right now?
18:12 < wockan> in nodejs of course :D
18:13 < s5fs> wockan: i have not! this is my first node project
18:13 < wockan> what are u doing?
18:14 < s5fs> we're using node as a lightweight web server for embedded devices
18:14 < wockan> oki oki
18:14 < wockan> and how is that going for you?
18:14 < s5fs> too early to tell
18:14 < wockan> oki
18:14 < s5fs> Nexxy has a really similar project and she's having great success, so i think it's probably a solid choice
18:15 < wockan> im doing a restful api 
18:15 < wockan> working on a little social network 
18:16 <@Nexxy> GREAT SUCCESS!
18:16 < wockan> brb
18:18 <@Nexxy> s5fs I'm going to Fry's today
18:18 < wockan> back again 
18:18 <@Nexxy> wb
18:19 < s5fs> Nexxy: nice!
18:19 < wockan> changed irc client
18:19 < wockan> was using webclient...
18:19 < aandy> wockan: which db are you using, if you don't mind me asking :)
18:20 < wockan> mongodb
18:20 <@Nexxy> I hear mi
18:20 <@Nexxy> mongo* solved CAP
18:20 < aandy> okay, did you consider graph dbs or?
18:23 < wockan> was looking a bit
18:23 <@Nexxy> riak as a graph db
18:24 < wockan> but i cant really say ive done a great job at checking out diff
18:24 < wockan> any good?
18:24 <@Nexxy> is so good
18:24 <@Nexxy> I've never really used it as such but I suppose is possible
18:24 < aandy> for networks graph dbs have a good use. neo4j is pretty mongo'ish, not sure about riak
18:24 < s5fs> Nexxy: soo.. whats at frys?
18:25 <@Nexxy> stuff for arduino kits for my talk
18:25 < s5fs> haha, so are you gunna give out some kits?
18:25 <@Nexxy> ya
18:25 < s5fs> that's super cool!
18:25 <@Nexxy> as long as I can find all the necessary parts
18:26 <@Nexxy> and get them through the airports
18:26 < s5fs> radio shack sells arduino gear as well
18:26 <@Nexxy> for like 3x the price
18:26 < s5fs> you can probably check them with your luggage and get past security
18:26 <@Nexxy> yeah
18:26 < wockan> what is so good about graph dbs?
18:26 < wockan> im quite new to nosql.
18:26 <@Nexxy> everyone is
18:26 < s5fs> true, ratshack isn't as cheap but it does work in a pinch
18:27 < wockan> hehe
18:27 < aandy> wockan: to relate it to mongo, think of it like this: you have two types of "objects", nodes and relationships, which are both objects in a js/json sense
18:28 < aandy> nodes and relationships can have properties, and relationships tie together nodes (or not)
18:28 < wockan> hmm i see
18:28 < caioketo_> I think I got it working
18:29 < aandy> so you do queries such as me-[:FRIEND]->(any_friend_of_mine)-[:FRIEND]->(someone_they_know) WHERE NOT(me-[:FRIEND]->someone_they_know), which will give you a cursor for your friends friends, so to speak
18:29 < caioketo_> the thing is to JSON.stringify() in the client and JSON.parse() in the server
18:29 < aandy> so think of it in terms of paths
18:29 < wockan> oki oki
18:29 < s5fs> caioketo_: nicely done! if you have a working example, i'd love to see the code
18:30 < aandy> wockan: i recently made a photo stream where i use such a db. my users then have a shared timeline, which they modify. so i can remove items from some but not all, by making a "bad" relationship between some user and a given picture
18:31 < aandy> then when query for his/her timeline, i just say, any picture that he/she doesn't hate, for instance
18:31 < wockan> how did you store pictures?
18:31 < wockan> in the db ?
18:31 < aandy> so, in a way it's "sql for mongo"
18:31 < nathan7> You mean.. queries?
18:31 < aandy> i didn't, but you could as binary. i just store meta data
18:31 < wockan> oki
18:31 < aandy> nathan7: single query, but yes
18:32 < nathan7> SQL is a query language for a specific type of DB.
18:32 < aandy> nathan7: right, and cypher (one of the languages for neo4j) borrows terms from it, to make it sql'ish
18:35 < wockan> oh man ive just learned mongodb... :P
18:36 < wockan> ill look into riak 
18:36 < SoulRaven> i am try to find an element inside an object, and for the moment i use this: http://bin.cakephp.org/view/160671153
18:36 < SoulRaven> i don't know if the the best solution and also the fastest
18:36 < SoulRaven> is posibile to give me a point or a new ideea?
18:41 < CoverSlide> SoulRaven: why can't you just do IO1ByteArray[IOID]
18:41 < wockan> aandy got any good riak tutorial?
18:41 < CoverSlide> or if(IOID in IO1ByteArray)
18:41 < aandy> word of caution: riak says it's not a good idea to use riak for (bigger) networks. but what you want to be looking for is linking: http://wiki.basho.com/Links-and-Link-Walking.html
18:42 < wockan> hmm oki
18:42 < aandy> otherwise, neo4j is a document schemaless structure much like mongodb
18:42 < SoulRaven> CoverSlide: no, because i want auto populate a new object with the element presnted in first object
18:42 < aandy> or orientdb: http://code.google.com/p/orient/
18:42 < tnorris> SoulRaven: if your worried about accessing inherited keys, then maybe try this: `Object.keys(IO1ByteArray).indexOf(prop) !== -1`
18:44 < SoulRaven> so using this i will make the identity
18:44 < CoverSlide> umwhat
18:45 < SoulRaven> i want to build another object with the elements from the identity
18:45 < tnorris> SoulRaven: so, basically you want to deep clone an existing object to a new one?
18:47 < SoulRaven> IO1ByteArray is of unknow dimensions, because came from a AVL device, but i have IOID with is of know origin
18:47 < SoulRaven> and when the 2 elements match, then that element i will add to the new object
18:49 < CoverSlide> but the IOID is the key and IO1ByteArray is the object you're searching right?
18:50 < SoulRaven> yes
18:50 < CoverSlide> ok i really don't understand why if(IOID in IO1ByteArray) isn't suiting your needs
18:50 < SoulRaven> http://bin.cakephp.org/view/327569551
18:50 < SoulRaven> this is a biger chunk of the code
18:51 < durango> Is there anyway to convert an array into a list of arguments? :p
18:53 < dch> #surgeon http://www.slideshare.net/davidapacheco/surge2012 debugging node Awesome
18:55 < sfoster> durango: function.apply? 
18:56 < tprice_> im getting an error building node.bcrypt.js
18:56 < tprice_> node v 0.8.8
18:56 < CoverSlide> SoulRaven: my question again. prop is the key, IOID is the key, why not just use the native hash key searching algorithm built into javascript instead of writing your own iterator?
18:56 < durango> sfoster: _.pick.apply(_, [__r].concat(__r.attributes)) :)
18:57 < CoverSlide> unless you mean to match IOID to IO1ByteArray[prop] instead of just prop
18:57 < SoulRaven> i don't know the native hash key searhing
18:57 < tnorris> tprice_: builds fine here with node v0.8.11. what errors you getting?
18:57 < SoulRaven> prop is the key for IO1ByteArray
18:57 < sfoster> ugh, underscore. If there was ever a vanity namespace, _ is about the worst. 
18:57 < tprice_> tnorris> https://gist.github.com/3829013
18:58 < sfoster> durango: but, yes. that :)
18:58 < tprice_> oh sorry node v0.8.2
18:59 < tnorris> tprice_: would it be possible for you to try building with a newer node? if not I'll install and compile with v0.8.2 and see what I get.
18:59 < CoverSlide> let's simplify. IOID is the key you are searching for. IO1ByteArray is the object you are searching on, prop is the key being looked at. therefore to find where prop is equal to IOID, you do IO1ByteArray[IOID]
18:59 < CoverSlide> do I understand your problem or no?
18:59 < tprice_> tnorris> ok i should bump node to 0.8.1
19:00 < CoverSlide> The only possible reason I can see for iterating if you actually are looking at the value not the key
19:00 < SoulRaven> something like: console.log(IOID + '-' + IO1ByteArray[IOID] + ': ' + IOVALUE);
19:02 < CoverSlide> nevermind. you're doing it right keep doing it your way
19:03 < dshaw_1> We're live on #nodeup
19:03 < SoulRaven> the problem is now is not working like this: http://bin.cakephp.org/view/1182269508
19:04 < SoulRaven> to have the key of object a var
19:06 < CoverSlide> IO1ByteArray[IOID]: IOVALUE << yeah that's not gonna work
19:06 < SoulRaven> i know:(
19:08 < CoverSlide> unpackAVL[i] = {}; unpackAVL[i][IO1ByteArray[IOID]] = IOVALUE; << you can do it like that
19:08 < tprice_> tnorris> error on build 0.8.11 https://gist.github.com/3829081
19:08 < CoverSlide> btw, what's the point of IOID being the same as IOVALUE?
19:08 < tprice_> the error : fatal error: openssl/opensslconf.h: No such file or directory
19:09 < SoulRaven> is not, because value is something else, and the value of IO1ByteArray[IOID] is a string
19:09 < SoulRaven> IO1ByteArray = {
19:09 < SoulRaven>             1: 'digitalInputState1',    //Logic: 0 / 1 }
19:09 < SoulRaven> somethink like
19:09 < tprice_> tnorris> I had to install openssl-devel
19:10 < tnorris> tprice_: really? that's strange. node should come with openssl. hm.
19:11 < CoverSlide> you can compile it to use openssl on your system
19:11 < CoverSlide> and skip openssl compilation
19:11 < tprice_> tnorris> well its installed now im running fedora 17
19:11 < tnorris> tprice_: ok, and that's working for you.
19:11 < CoverSlide> tprice_: did you build it yourself or use a package?
19:12 < tprice_> CoverSlide> both from npm and git repo
19:12 < tprice_> both failed
19:23 < bradleymeck> who was trying to impl the new readstream proto in js with current stuff (compat layer)
19:26 < nicolaas> What's roughly the expected number of Hello World requests that Express can serve per second ?
19:26 < BennyLava> OVER NINE THOUSAND
19:26 < timeturner> NINE THOUSAND AND ONE
19:27 < nicolaas> So I'm trying to benchmark my application locally, using tsung
19:27 < Sven_vB> 9023.5
19:27 < AAA_awright> Only six thousand for me :(
19:27 < nicolaas> and even for an ootb express, I can only get it to serve 330 requests per second
19:27 < AAA_awright> 9000 is about right
19:27 < niggler> fuck express
19:27 < nicolaas> anything obvious I could be doing wrong
19:28 < nicolaas> this is the code: https://gist.github.com/3829208
19:28 < timeturner> niggler: whoa
19:28 < timeturner> express is everything
19:28 < niggler> express is not "everything'
19:29 < BennyLava> fuck niggler
19:29 < niggler> its like saying rails is "everything"
19:29 < BennyLava> niggler is nothing
19:29 < BennyLava> FACT
19:29 < niggler> look, I invested about 3 hours with express before realizing what i needed would require me to start from scratch
19:29 < Sven_vB> BennyLava, are you named after that song?
19:30 < BennyLava> Sven_vB: no, I'm named after my name
19:30 < niggler> and im sure express/derby/meteor are fine if your job is contract work with a bunch of clueless people
19:30 < timeturner> niggler: then you aren't using it correctly
19:30 < BennyLava> Yes of course, Sven_vB. :)
19:30 < Sven_vB> :))
19:30 < timeturner> you can do literally everything with connect/express
19:30 < BennyLava> timeturner--
19:30 < timeturner> ok most things
19:30 < BennyLava> that's such a stupid statement
19:30 < timeturner> http related
19:31 < timeturner> I know, it was an example of the level of stupidity of niggler's statement
19:31 < timeturner> :P
19:31 < BennyLava> An a second ago you said LIERALLY EVERYTHING. LITERALLY!
19:31 < niggler> timeturner: this is simple
19:31 < BennyLava> L I T E R A L L Y !
19:31 < niggler> you are either working on some simple problem or something more complicated
19:32 < niggler> in the former, express is great
19:32 < niggler> but its not a panacea, and to misrepresent it as such is deceptive
19:32 < niggler> its like most frameworks, where the easy stuff is easy, but once you try to do something more complicated you find it harder to work with the framework than to start from scratch
19:33 < timeturner> quite possible
19:33 <@Nexxy> https://gist.github.com/3829271
19:34 < niggler> im debating whether to be amazed or disappointed nexxy
19:34 <@Nexxy> yeah I'm on the fence myself
19:34 < niggler> the problem with most things that try to solve a problem well
19:34 <@Nexxy> is that they don't?
19:34 < niggler> exactly
19:35 < s5fs> enlightening
19:35 < timeturner> someone is pissed
19:35 < timeturner> ...
19:35 < niggler> 80% of the cases will work in your favor
19:36 < timeturner> do you have an example of the other 20%
19:36 < niggler> but the 20% of the cases where you need something special, the framework bogs you down
19:36 < s5fs> thats true of most frameworks
19:36 < timeturner> that's why you have to use a combination of stuff
19:36 < s5fs> exactly right
19:36 < niggler> i want to say it was BennyLava, but i could be mistake, who was pumping browserify as if it were a gift from god
19:37 < niggler> and ive come across numerous cases where it doesnt work,
19:37 < niggler> which is not to say that its bad
19:37 < BennyLava> Not quite. But bowserify is prety sweet.
19:37 < BennyLava> pretty, too.
19:37 < niggler> but its better to recognize the faults upfront than to spend hours down a rabbit hole before realizing the problems
19:38 < niggler> so take coffeescript, which is something i think i explained
19:38 < s5fs> ppl are so funny. never heard of it? sucks. just found it? best thing ever.
19:38 < BennyLava> How did this become about browserify?
19:38 < niggler> there are some really *strange* quirks with whitespace
19:38 < niggler> where adding a single space within a line changes the meaning of a statement
19:39 < BennyLava> Oh my, that's like impossible in JS
19:39 < BennyLava> Wait, what?
19:40 < s5fs> niggler: so whats your beef with table tennis?
19:40 < BennyLava> haha
19:41 < CoverSlide> you have to be chinese to be any good at it
19:42 < timeturner> lol
19:49 < context> anyone happen to have kue running that i could by any chance see running ?
20:23 < drudge_> does anyone know how to filter an array of object ids in mongoose 3?
20:25 < drudge_> was thinking something like Department.find({ visible: true, members: { $elemMatch: { _id : self.request.user.id } } }, null, { sort: 'name' }, ...
20:28 < ljharb> drudge_: that looks good. i'd ask in #mongoosejs
20:28 < drudge_> ok, thanks
20:41 < thomaschaaf> I am trying to keep an array updated across multiple computers. What is the best way to do this? I would like as much to be managed by the library as possible. Now.js seems to be what I want are there alternatives? It is for a playlist where one computer is the master and the others can alter the playlist (add songs to the playlist, etc)
20:42 < tprice_> how do i use the ejs include from the layout.ejs?
20:42 < tprice_> nothing but <%- body %> seems to work
20:43 < ljharb> tprice_: the partial() function?
20:43 < ljharb> tprice_: "body" is just for yielding the primary template
20:44 < tprice_> <%- partial('header') %> does not work
20:44 < tprice_> even if i just do <%- title %> witha string for title nothing shows
20:45 < Guest62315> <% include header %>
20:45 < thomaschaaf> Or ask differently what alternatives to now.js are there? Googling always understands "alternative to node.js" instead of now.js
20:45 < tj> tprice_ it's a compile-time include
20:46 < nathan7> thomaschaaf: Search instead for alternatives to now.js
20:46 < durango> Anyone here have experience with Sequelize's QueryChainer method?
20:46 < nathan7> thomaschaaf: I'd say dnode, anyway
20:46 < nathan7> thomaschaaf: https://github.com/substack/dnode
20:46 < tprice_> tj> im calling it from inside the layout.ejs 
20:46 < tprice_> but nothing is been rendered
20:47 < Guest10136> with res.render('layout') ?
20:47 < tprice_> no render('index')
20:47 < machadogj_> thomaschaaf: http://github.com/substack/upnode (built with dnode)
20:47 < tjholowaychuk> well then you're just rendering the index.ejs
20:48 < thomaschaaf> thanks guys let me read up on dnode and upnode
20:48 < ljharb> tprice_: partial('header') works for me.
20:48 < tprice_> tjholowaychuk> oh im stupid
20:48 < tprice_> it is only rendering index
20:48 < tprice_> not the layout to
20:48 < machadogj_> thomaschaaf: np
20:49 < tprice_> so is it ejs.renderFile or something else
20:53 < tprice_> how do i render with a layout using ejs and express?
20:53 < tprice_> im doing app.engine('.ejs', ejs.renderFile);	app.set('view engine', 'ejs');
20:53 < tprice_> and setting the views folder
20:54 < tjholowaychuk> there's only include support right now for ejs, but you can still do <% include head %> and <% include foot %> for now
20:54 < ljharb> tprice_: that's all you should need to do
20:54 < tjholowaychuk> i haven't had time to add extend
20:54 < ljharb> tjholowaychuk: i use "partial()" in my ejs templates all the time.
20:54 < tjholowaychuk> ljharb that's in 2x
20:54 < ljharb> ejs's docs suck tho, so i don't remember how it found it
20:54 < ljharb> what version are you talking about?
20:54 < tjholowaychuk> 3x
20:54 < tprice_> tjholowaychuk> so i cant have a layout and use the body var to get the current page?
20:55 < tjholowaychuk> tprice_ that's in express 2x..
20:55 < tjholowaychuk> there's a migration page detailing all of this
20:55 < ljharb> ah
20:55 < tprice_> oh i found it i need to use ejs.__express not renderfile
20:55 < ljharb> i'll have to look at that; was unaware there's a 3.x
20:58 < boutell> poll: what are you really deploying to? Heroku? Nodejitsu? A VPS? A dedicated server?
20:58 < Sven_vB> VPS
20:59 < tprice_> AWS
20:59 < tjholowaychuk> aws / vps
21:00 < marek_> hihi
21:00 < marek_> anyone here?
21:01 < boutell> I missed AWS heh
21:01 < marek_> anyone here using c9.io IDE?
21:02 < LouisT> marek_: i have, i had some random issues using it, so i stopped.. they've probably been fixed by now however
21:03 < marek_> LouisT: did you have any problems with port?
21:03 < LouisT> port? what do you mean? and no my problem was with git related commands
21:04 < ljharb> tjholowaychuk: ah, express 3.x isn't released yet.
21:04 < marek_> first i had some problems with running just basic app
21:04 < marek_> at least..
21:05 < marek_> i managed to work
21:05 < marek_> but now i can't stop the app
21:05 < LouisT> oh.. that's probably not a planned feature of c9 heh
21:06 < LouisT> i have no idea, i didn't have that issue
21:07 < marek_> they should probably fix this
21:07 < mattvv> anyone here had much use of jaredhanson's passport? i'm trying to authenticate my public facing api and i'm trying to deciede on the best strategy
21:07 < marek_> i am new to node, so i hope iam not doing anything wrong
21:07 < chilts> mattvv: I've been using it recently
21:08 < mattvv> what strategy are you using chilts? can you combine strategies?
21:08 < chilts> I'm using Twitter, Facebook, Google OAuth2, Yahoo and LinkedIn
21:09 < mattvv> oh wow nice, so you can set up multiple strategies easily?
21:09 < chilts> yeah
21:09 < mattvv> i'm thinking i want to use a cookie as well as token authentication
21:09 < mattvv> so users authenticate to the api with a login command which places a cookie on them and returns a token
21:09 < chilts> just make sure they're on different URLs : e.g. /auth/google, /auth/google/callback, /auth/twitter, /auth/twitter/callback etc
21:09 < mattvv> then they can use the other api calls
21:09 < mattvv> which will be proected by the cookie or token
21:10 < chilts> you need a cookie so that you have a session, which contains the profile stuff from passport
21:10 < boutell> what does it mean for express 3.x not to be released yet if 'npm install' summons it?
21:10 < chilts> mattvv: so you're API is all in the browser?
21:10 < chilts> that seems a little weird if that's the case :D
21:10  * chilts is probably wrong
21:10 < mattvv> nawh not browser at all
21:11 < chilts> cli? some other program?
21:11 < mattvv> just restful
21:11 < chilts> I don't know about using passport outside of a website :)
21:11 < chilts> but you should be able to use it
21:11 < mattvv> well i currently use the cookie strategy with it
21:11 < mattvv> i'm just wanting to use a token strategy i guess
21:11 < chilts> ok, well, sounds like you know what you're doing :)
21:11 < mattvv> i'm not exactly sure how it compares the cookie with the server
21:11 < mattvv> if there is a cookie inside of it
21:16 < LouisT> tjholowaychuk: do you plan on expanding your list-parser to support more than just number ranges?
21:17 < tjholowaychuk> LouisT wasn't planning on doing much with it, didn't even create a repo for it haha
21:17 < tjholowaychuk> doesn't really do much
21:18 < LouisT> ah ok, i looked at the source of it and decided to work on my own range, seems to be ok but i need to clean the code up a bit more
21:21 < LouisT> tjholowaychuk: http://thepb.in/506a743488b0851d3700000b what i have so far, granted it's a bit sloppy.. i'll clean it up sooner or later
21:33 <@isaacs> Nexxy: supervisor is definitely not canonical
21:33 <@isaacs> Nexxy: or, maybe it is, i dunno.
21:33 <@isaacs> Nexxy: but at this point, it's basically not written by me any more.
21:34 <@isaacs> Nexxy: it's iangreenleef's baby now :)
21:34 <@isaacs> niggler: my ircretary backlog is all you fucking things.
21:35 < niggler> at least im not referring to things as gay :)
21:35 < niggler> *not that there's anything wrong with being gay
21:36 <@isaacs> niggler: i guess expressing your rage as sexual profanity is betterthan implicit homophobia.
21:36 < niggler> nonzero progress
21:36 < niggler> "almost surely" progress
21:39 < BennyLava> fuck niggler!
21:39 < niggler> fuck BennyLava and browserify
21:40 < BennyLava> now now, was that really necessary?
21:40 < s5fs> yeah, leave browserify outta this
21:41 < niggler> good point -- browserify can't defend itself
21:41 < st_luke> good convo
21:41 < BennyLava> ^_^
21:43 < jlongster> Hey guys, `npm install --dev` seems to recursively install devDependences. What am I supposed to do to install just the top-level package's devDependencies, but not recursively install them?
21:47 < tommybergeron> Hey guys, if I use /tmp/datTempPath while I upload stuff from a form to AWS S3. Do I need to remove the temporary file manually from /tmp when I'm done with it? (Usually you move from /tmp to your local path but not this time since I'm moving to S3)
21:48 < chilts> tommybergeron: if it's still there, then it probably makes sense to remove it once you're done
21:48 < chilts> are you using connect or express?
21:49 < tommybergeron> None, I'm using formidable
21:49 < tommybergeron> I don't know if formidable uses connect though
21:49 < chilts> connect bodyParser() middleware uses formidable, yes
21:49 < chilts> I was going to suggest using connect-stream-s3 but looks like you've already done it
21:50 < tommybergeron> oh nice, my irc client keeps only the last written line in the chat window. Congrats Linkinus.
21:50 < chilts> which S3 library are you using?
21:50 < tommybergeron> knox
21:50 < tjholowaychuk> tommybergeron yeah i would unlink after personally
21:50 < tjholowaychuk> or you can sweep /tmp but might as well be proactive about it
21:50 < tommybergeron> So far my test upload looks like https://gist.github.com/3830090
21:51 < tommybergeron> finally my irc client works
21:51 < tommybergeron> I'll check my logs to see what you have been writing lol
21:51 < tommybergeron> oh well it erased all my logs. wow look who's going to the trash.
21:52 < tommybergeron> I think I saw someone telling me to unlink it when I'm done with it, right?
21:52 < tommybergeron> Thanks for the opinion, I'll do so. If you have any comment about the gist I just pasted please go on
21:52 < chilts> yeah, tj and I both suggested it makes sense to get rid of it there and then, once you're happy it's in S3
21:53 < tommybergeron> Awesome, that way it doesn't fill the local disk space. Anyway it's pretty useless keeping temporary uploads I guess.
21:53 < tommybergeron> Thanks
21:54 < chilts> I'd just check that file.name is not a user generated thing (ie. from their browser) so that you don't overwrite other files in S3 :)
21:54 < chilts> I'm not sure what is in that field, but just a note for you to check what it contains
21:55 < tommybergeron> You are totally right on this. It's the same filename as picked in the file input.
21:55 < tommybergeron> So yeah it could overwrite EVERYTHING hehe
21:55 < chilts> :)
21:55 < chilts> connect-stream-s3 allows you to choose your own name prior to the upload :)
21:55 < tommybergeron> I'll throw in a date or something in there to keep sure. Or maybe use a path per user. Like /chilts/picture.jpg /tomshreds/hello.txt
21:56 < tommybergeron> Oh nice to know, I'll check it out thx
21:56 < tjholowaychuk> you can just save their filename in a db etc
21:56 < tjholowaychuk> and uuid it for s3
21:56 < chilts> yeah, a username somewhere, and you may want to add some random stuff too
21:56 < tommybergeron> Even better
21:56 < tjholowaychuk> if you even need the original name
21:56 < tommybergeron> No I don't need the original. A uuid would be perfect. Thanks for this
21:57 < chilts> tommybergeron: if you need a unique ID, I also wrote connect-uuid so you get a free one on every request :)
21:57 < chilts> I've used that before
21:57 < chilts> for S3 uploads
21:58 < tommybergeron> Perfect, I'll check these, I'm sure it'll help me a lot.
21:59 < tommybergeron> It's my first time doing stuff with s3, so I need all the tips I can have hehe
21:59 < chilts> so yeah, I used connect-uuid, then connect.bodyParser() and in connect-stream-s3 I've used the req.uuid for the filename for S3 :)
21:59 < chilts> I should do an example of that
21:59 < chilts> tommybergeron: sounds like you're on the right track anyway
21:59 < BRamp> Hey guys
21:59 < chilts> s'up
21:59 < BRamp> what do you guys think of node.js vs go?
21:59 < BRamp> working on anything cool chilts?
22:00 < BRamp> realtimey
22:00 < tommybergeron> chilts thx for the many tips, it helped a lot hehe
22:00 < niggler> both solve different problems BRamp 
22:01 < chilts> BRamp: everyone has cool stuff going on here :)
22:01 < BRamp> :P
22:01 < chilts> I used Go a lot last year, but came back to JavaScript
22:01 < BRamp> I want to make a social website in node for fun
22:01 < chilts> they are both cool languages
22:01 < chilts> sounds like a good plan to learn stuff :)
22:01 < BRamp> What did you use go for? Did you rewrite it in js or do something different
22:01 < tommybergeron> chilts: Any tips on "how to get a file list" from S3? All I saw in knox docs was put, get but no list. That could be helpful maybe.
22:02 < chilts> I just used it to talk to AWS, but I've rewritten it all in Node.js
22:02 < BRamp> kool
22:02 < BRamp> Did performance change or it is not noticable?
22:02 < chilts> tommybergeron: that's using AwsSum -> https://github.com/appsattic/node-awssum-scripts/blob/master/amazon/s3-list.js
22:02 < BRamp> Node does have a better ecosystem
22:03 < chilts> BRamp: I just didn't like having to write some datastructures in Go :)
22:03 < chilts> didn't trial performance
22:03 < tjholowaychuk> I cant get over Go's capitalization conventions :s
22:03 < tommybergeron> Exactly what I wanted! Thanks chilts
22:03 < BRamp> Do you have a github? Live site?
22:04 < BRamp> I remember now.js was coming out with some scalable stuff. Did they cancel it?
22:05 < deoxxa> "scalable"
22:05 < deoxxa> pretty much anything can be "scalable" if you use it properly
22:06 < deoxxa> should say more buzzwords
22:06 < deoxxa> see if one of them sticks
22:06 < s5fs> cluster-aware web 2.0 cloud api
22:06 < durango> is go > nodejs? :P
22:07 < Raynos> tjholowaychuk: Can I have the source code for npm-search's server. I want to rewrite it and maintain it.
22:07 < durango> tjholowaychuk: we need an express in go xD
22:07 < automatado> ermm Mocha is failing me a test. I am getting the " has no method 'match' " with this assert.match body, /user/ 
22:07 < tjholowaychuk> Raynos haha yeah sure, sorry I shut down the redis a while ago and forgot to restart it
22:07 < deoxxa> body isn't a string, apparently
22:07 < tjholowaychuk> one sec
22:08 < tjholowaychuk> Raynos it's more or less identical to https://github.com/component/search-api/blob/master/app.js
22:08 < Raynos> tjholowaychuk: It needs to be maintained and in sync. one of us has to do that. I'm happy to take it over and maintain it
22:08 < tjholowaychuk> i'll remove the npm package
22:08 < tjholowaychuk> so you can have that name
22:08 < Raynos> tjholowaychuk: I'm more interested in the code to populate redis with npm's couch's data.
22:08 < automatado> it is
22:09 < automatado> a string, I mean atleast that is what typeof returned me
22:09 < tjholowaychuk> i dont remember what the url is for npm's dump of json
22:10 < tjholowaychuk> but it's easy to chop it up into redis sets
22:10 < tjholowaychuk> once you have that
22:12 < BRamp> who here uses jugglingdb
22:13 < Azra-el> stupid question since ive been pondering switching our in-dev frontend from flask/python to nodejs (total newb) ... is there a particular framework i should go with? i saw that geddy is pretty nice with its twitterbootstrap integration and auto api and whatnot... 
22:16 < BRamp> I am looking at railway.js right now
22:16 < durango> railwayjs uses virtualmachine
22:16 < durango> so if u got the memory use railwayjs
22:16 < durango> if ur literally bootstrapped don't use it
22:16 < jlongster> `npm install` should also install devDependencies, right?
22:16 < durango> express + anything else should be good enough -- what are ur needs?
22:17 < durango> if ur building an API just express, geddy might be something better for slightly larger websites but meh ive converted express into mvc :P
22:18 < BRamp> what do you mean memory? ram? How much does railway use?
22:20 < automatado> ermm
22:21 < automatado> I just cheked the node doc
22:21 < automatado> assert, it has no 'match' method?
22:22 < CoverSlide> what do you mean by 'match'?
22:22 < tjholowaychuk> you could just assert(/stuff/.test(whatever))
22:23 < superjoe> automatado, if you want better asserting capabilities and object diffing, you'll want to use a 3rd party module
22:23 < automatado> CoverSlide, I am following the peepcode screencast on using mocha
22:24 < superjoe> automatado, http://visionmedia.github.com/mocha/#assertions
22:24 < superjoe> try one of those libraries
22:24 < CoverSlide> make a pull request if you think it should be in core. should be very trivial to do
22:24 < tjholowaychuk> automatado looks like chai has assert.match
22:24 < tjholowaychuk> that must have been what he was using
22:25 < automatado> Alright. Thank you guys!! =)
22:25 < BRamp> does railway go away from the node.js way like meteor?
22:25 < BRamp> this is the first i am hearing of the virtual machine
22:25 < CoverSlide> omg this is like MVC framework # 50 for node
22:26 < BRamp>   which is the best one lol
22:26 < CoverSlide> seriously they all should go the merb route
22:26 < CoverSlide> and just die
22:27 < superjoe> BRamp, prefer modules over frameworks
22:27 < tjholowaychuk> NODE_PATH=lib and use regular node modules
22:27 < BRamp> trie
22:27 < trb> evening
22:27 < BRamp> i was just thinking of zend framework 2
22:29 < CoverSlide> jugglingdb: like activerecord, but with extra fail
22:33 < gbhatnag> hi all - new to testing with mocha: is there any way to run a request (using superagent) and then have multiple tests related to the response to that request (i.e. visiting a static page should do X, Y, Z)?
22:33 < BRamp> lol
22:33 < BRamp> do you don't like juggling?]
22:34 < BRampersad> Node.typescript. amirite?
22:37 < BRampersad> lol
22:37 < BRampersad> what do you guys think of the benchmark?
22:38 < BRampersad> that shows erlang vs go vs node.js vs scala etc
22:38 < BRampersad> why did node perform so poorly?
22:39 < CoverSlide> BRampersad: link?
22:39 < trb> erlang is a different beast to js
22:39 < BRampersad> https://github.com/ericmoritz/wsdemo/blob/results-v1/results.md
22:39 < BRampersad> erlang is a beast. period lol
22:39 < BRampersad> node.js is still my love though
22:40 < trb> erlang is a progamming language, js is a scripting language
22:40 < _schulte_> hi, how can I get npm to install my package so that it can be used with `require'?  The package consists solely of c++ bindings, which work locally with "require('./path/to/foo')" -- https://github.com/eschulte/node-gpg
22:40 < BRampersad> link to summary. https://github.com/ericmoritz/wsdemo/blob/results-v1/results.md#summary
22:41 < trb> BRampersad: would be interested in the same but with perl and ruby versions
22:42 < BRampersad> i haven't used perl
22:42 < BRampersad> CoverSlide: thoughts?
22:43 < CoverSlide> this is nothing new
22:43 < BRampersad> My question is why didn't node beat the 10k problem. 
22:43 < BRampersad> how old is it?
22:43 < tjholowaychuk> i dont always use benchmarks for decisions, but when i do i only need 20 requests per second anyway
22:45 < _schulte_> is there a better place for me to ask npm questions?
22:48 < CoverSlide> well it is 4 months old for starters, but the comparison to erlang is nothing new
22:49 < samy_> hi
22:49 < CoverSlide> go i would assume would be a bit faster as well
22:49 < samy_> i'm having a somewhat dumb and i hope easy question for you
22:49 < CoverSlide> java i would assume to, assuming it's using nio
22:49 < samy_> i'm pretty new to node and having a hard time trying to figure something out
22:50 < langworthy> _schulte_: check out https://npmjs.org/doc/json.html. read up up "dependencies" and "Git URLs as Dependencies"
22:50 < LouisT> samy_: what seems to be the issue?
22:50 < samy_> i wanted to reduce the index.js to only a few require lines (hoping it would behave somewhat like includes in c)
22:50 < joemiller> is it possible to set a connect timeout for tcp sockets (not inactivity timeout) ?
22:50 < samy_> and splitting my routes to different files / modules
22:50 < langworthy> _schulte_: or you can publish your package to npm
22:51 < samy_> but my routes cannot seem to be found
22:51 < samy_> though i did a module.exports of the function i'm needing in each module
22:52 < gbhatnag> new to using vows for testing: is there some way to run code before and after all tests?
22:52 < samy_> so i guess i'm missing something quite easy or obvious but cannot figure out what
22:52 < _schulte_> langworthy: thanks, I'll read up there, just wondering why require('gpg') doesn't work when I install locally
22:53 < langworthy> _schulte_: that style will only work with packages that npm installed to the node_modules folder
22:54 < samy_> my index.js is only one line : require('mymodule')
22:54 < samy_> if i put everything in the index, it works. if i move it to mymodule.js then it tells me it cannot get my route
22:54 < _schulte_> langworthy: yes, so my package is in /usr/lib/node_modules/gpg, but from there I'm not sure if I just put gpg.node in the base of that directory or use the "main" field in package.json
22:55 < LouisT> samy_: what all is in your mymoudle.js file?
22:55 < LouisT> er module*
22:55 < davemo> can multiple people maintain and push updates of an npm package?
22:55 < davemo> if so, how does one add other people?
22:56 < samy_> getProfile = function (req, res) { .... } and at the end module.exports = getProfile
22:56 < samy_> of course the getProfile is the route i'm willing to get
22:57 < LouisT> samy_: have you tried something like: module.exports = function (req, res) { ... }
22:58 < langworthy> _schulte_: it sounds like you might have installed gpg globally? I'm not sure. Read up on the link I posted and you should have a good idea of how to use npm along with package.json files to use require() as you'd like
22:59 < _schulte_> langworthy: yea, did a global install, I'll re-read that page, do I need to wrap my C++ bindings in a .js file?  I'm thinking that may be the problem
23:00 < samy_> i tried to do it slightly differently : modules.exports=getProfile=function (req, res)...should it not work ?
23:00 < LouisT> samy_: that should work, sure, but kinda pointless
23:01 < LouisT> samy_: how are you using require?
23:01 < samy_> thing is i'm willing to keep different routes/function regarding the profile aspect in one file so I wanted to make sure i exported the function names 
23:02 < samy_> what do you mean how i'm using require ?
23:02 < LouisT> so are you doing: var getProfile = require('name.js');
23:02 < samy_> the index.js is stripped to a simple require('./profile')
23:02 < samy_> (both files in the same dir obviously)
23:02 < LouisT> ok
23:03 < langworthy> _schulte_: we're talking about a few different things. if you want to use require('my-package') in any node app you can either publish the package to npm and include the package name in package.json or define the git url in package.json. Both of these things will put the package into the projects node_modules folder when you "npm install". If the module just isn't working because of C++ bindings that's a different issue that i can't help with right 
23:03 < LouisT> samy_: i think you want: exports.getProfile = function (req, res) { ... };
23:03 < samy_> well i had this in the first place but did not work either ;P
23:03 < automatado> I am trying to learn TDD, any sincere thought on which should be a good start (Jasmine vs Mocha)?
23:04 < LouisT> then when you use require it works like: var profile = require('./profile'); and when you want to use getProfile, profile.getProfile(req, res);
23:04 < samy_> and the app.js has this btw : routes = require('./routes')  
23:04 < automatado> atleast which one has superior documentation/more screencasts =P
23:04 < samy_> and app.get('/:contentProvider/:email', routes.getProfile);
23:05 < LouisT> samy_: ah yea, then you need to use exports.getProfile
23:05 < _schulte_> langworthy: sorry for the confusion, this is not related to c++ bindings (everything works with relative require paths), I just can't find information on where to place my compiled gpg.node for easy require resolution... I'll search around some more, thanks for the help
23:06 < LouisT> samy_: sec, i'll try and write a quick example
23:07 < LouisT> wait wait, samy_ are you doing 3 different files?
23:07 < samy_> hmmm just tried it and does not work
23:07 < samy_> yup
23:07 < LouisT> ok
23:07 < LouisT> sec
23:07 < langworthy> _schulte_: http://nodejs.org/docs/latest/api/addons.html
23:07 < samy_> app.js then routes/index.js and routes/profiles.js
23:08 < caioketo> i know its socket.io, but I got a server-client working fine, but when the server sends some message the client dont recieve its
23:08 < AAA_awright> _schulte_: You write a file that does require('./binary.node');
23:08 < AAA_awright> And expose whatever logic you want from there
23:10 < _schulte_> AAA_awright, langworthy ok thanks, I'm on the right track now, how have I not seen that addons page before
23:10 < langworthy> _schulte_: :)
23:13 < LouisT> samy_: if i understood correctly it should look something like this https://thepb.in/506cc64888b085466d00001c
23:19 < samy_> LouisT, have you tried it ? i changed my code according to yours and mine does not work 
23:19 < LouisT> yes
23:19 < LouisT> $ node app.js 
23:19 < LouisT> This is just an example.
23:20 < tjholowaychuk> samy_ take a look at node's module system first
23:20 < tjholowaychuk> then things will make more sense
23:20 < tjholowaychuk> the structure express(1) creates is just a crude example to get things started but there's nothing special about the ./routes dir etc
23:21 < AAA_awright> substack: https://github.com/substack/node-browserify "Many npm modules that don't do IO" Don't you mean Node.js modules?
23:21 < AAA_awright> npm only deals in packages
23:22 < LouisT> AAA_awright: i assume he means many modules provided by npm
23:22 < samy_> hmmm still get a cannot get
23:23 < samy_> well i'll look into the modules system
23:23 < samy_> just to make sure
23:23 < samy_> the require does behave somewhat like an include ?
23:23 < tjholowaychuk> samy_ nope
23:24 < AAA_awright> LouisT: Right, but not all modules are npm packages
23:24 < AAA_awright> And vice versa
23:31 < samy_> damn...your code is working and i can't see the difference with mine ;P
23:40 < _schulte_> alright, I had to write a js wrapper and set my NODE_PATH environment variable but everything is now working with local and global installs, many thanks
23:40 < mthepc> hello everybody! I'm trying to setup Etherpad lite on a IIS server with IISNode (and later I plan on uploading it to Azure), but when I visit the local site, I get this error: http://pastebin.com/4rZWbqix Also, if I run it from start.bat, it works fine, but since I plan on uploading it to Azure that's not much of an option. Any ideas?
23:45 < _schulte_> etiquite/standards question, there is already a 'gpg' package in npm, how should I name my 'gpg' package?  The difference being they call gpg on the command line and I compiled gpg library bindings.
23:45 < _schulte_> maybe I'll rename my module gpgme as that's the full name of the gpg library...
23:51 < Azra-el> goddamit im so confused... i think i want to try to switch to nodejs but cannot decide what framework to use
23:52 < Bryson> What are you trying to do with it?
--- Log closed Thu Oct 04 00:00:09 2012
