--- Log opened Wed Sep 26 00:00:22 2012
00:00 <@konobi> yani: you have null values in redis?
00:00 < Hotroot> Yeah, I don't see why a username value would be null
00:01 < yani> @konobi: no, using redis-cli everything is set, no null values
00:01 <@konobi> only other thing i could think of is character encoding
00:01 < yani> the interesting part is that if I remove all null values I am ending with a specific array length say 792 and after 3-4 runs it gets to 991 then back to the same number
00:04 < yani> I'll try with github, maybe the author of hiredis port will know more :) thanks everyone
00:04 <@konobi> yani: try console.log(JSON.stringify(usernames))
00:06 < yani> @konobi: thanks, the same behaviour
00:06 < killfill> danheberden: right, thanks... it was no documents, so i thought it was on a special module.. :P
00:08 < danheberden> killfill: interestingly, the api site doesn't match the repo: https://github.com/joyent/node/blob/master/doc/api/util.markdown
00:08 < danheberden> though _extend still isn't in there
00:09 <@konobi> things with underscore at the front are generally considered a private interface, iirc
00:11 < danheberden> i noticed on the api site things weren't marked as 'expirimental' so wasn't sure if private methods were still documented as 'private'
00:11 < danheberden> but yeah, konobi, i think most devs follow that practice
00:15 < chovy> Can some node experts explain this to me: http://stackoverflow.com/questions/12592841/handling-callbacks-in-node
00:15 < chovy> do callbacks always have to be nested?
00:15 <@Nexxy> no
00:15 <@Nexxy> in fact they shouldn't be usually
00:16 <@Nexxy> you can name your callbacks
00:16 <@Nexxy> that will make things much easier to read
00:16 <@konobi> you can also use a library like async
00:18 < chovy> but will the token be set in my example, before I call user.save() ?
00:18 < chovy> or is it possible that callback hasn't returned yet.
00:19 <@konobi> chovy: assume if there's a callback, it won't be
00:19 < chovy> konobi: so i have to move all my code inside a callback just to set a variable
00:20 <@konobi> chovy: yup or use something like async
00:20 < Parlance> if I pipe a file read stream to an http response
00:20 < Parlance> will it stop buffering file data when the kernel outgoing buffer for the web socket is full?
00:20 < Parlance> or will I just end up with the entire file buffered as fast as possible into user memory waiting for the download to complete?
00:21 <@konobi> stream pipelines have built in flow control
00:21 <@konobi> Parlance: have a look at the stream docs around pause() and resume()
00:21 < chovy> konobi: how would you suggest i use async?
00:21 < chovy> i'm looking at it now
00:21 <@konobi> chovy: async.series?
00:23 < chovy> ok
00:23 <@konobi> chovy: read through first though, to make sure you find what works for you
00:25 < chovy> will do
00:25 < chovy> tyhanks
00:55 < jocafa> does anyone know of a good, current article on best practices for creating and distributing c++ npm modules?
00:56 < jocafa> especially when the c++ code has other dependencies
00:56 <@konobi> jocafa: look for a common up-to-date one, then follow it =0)
00:56 < jocafa> konobi:  thaaats what i'm googling around for while asking in her ;)
00:57 <@konobi> bignum might be a decent guide
00:57 < jocafa> *here
00:58 < jocafa> this one? https://github.com/justmoon/node-bignum
00:58 < sinclair> hey guys, has anyone here dealt with localStorage?
00:58 < jocafa> sinclair:  in a browser, yeah
00:58 < sinclair> well, cross browser localstorage
00:59 < sinclair> jocafa: what about syncing local storage with the server?
00:59 < sinclair> jocafa: i guess im looking for some options here, or best practice
00:59 < jocafa> not really so much syncing… the "big" time i used it, it was for local persistence for a mocked-up web app
01:00 < sinclair> jocafa: hmm, i wonder what technologies exist for syncing localstorage with a server,
01:00 < jocafa> it's pretty much just key/value storage, where values are pretty much limited to numbers or strings… so i JSON.stringified/parsed objects when they went in and out of localstorage
01:00 < jocafa> you may want to check out http://documentcloud.github.com/backbone/docs/backbone-localstorage.html
01:01 <@konobi> sinclair: pouch
01:01 < sinclair> jocafa: im used to things like rowstate (created, updated, deleted etc)
01:01 <@konobi> http://pouchdb.com/
01:01 < sinclair> konobi: thanks, im just reading up
01:03 < sinclair> konobi: i need to be able to sync with relational databases
01:03 <@konobi> sinclair: couchdb api isn't too tricky... it's http after all =0)
01:03 < sinclair> couch also isn't relational
01:04 <@konobi> sinclair: what does the api have to do with relationality?
01:04 < granjef3> why does underscore.js not use Object.prototype (http://documentcloud.github.com/underscore/docs/underscore.html, it just goes _.<whatever> vs _.prototype.<whatever>) compared to other npm modules like formidable (https://github.com/felixge/node-formidable/blob/master/lib/incoming_form.js)
01:05 <@konobi> granjef3: they're utility functions, not object methods
01:05 < sinclair> konobi: sorry, i was under the impression that this pouch thing has a requirement to use a couchdb like backend
01:05 <@konobi> a couchdb api (which is http)
01:05 < granjef3> so, its because underscore is like a global thing, where there is multiple formidable api's at once
01:05 <@konobi> you can put bash and flat files behind that if you want
01:05 < granjef3> *instances not apis
01:05 < sinclair> konobi: i see
01:07 < sinclair> konobi: in some instances, localstorage is preferable prior to submitting to the server, in other instances, its not. Id like to have an abstraction to allow me to use or not use local storage
01:07 < sinclair> konobi: i suppose i should follow strict REST-ful methods to achieve this.
01:08 < sinclair> konobi: i suppose i could "queue" operations on the client
01:09 <@konobi> sinclair: you should talk to caolan then
01:10 <@konobi> this is couch specific, but i know he's up to other stuff like it.. kan.so
01:11 < granjef3> konobi: so, for something that could have multiple instances, use Object.prototype, and for something that is a utility function, just do it directly?
01:11 <@konobi> granjef3: http://ejohn.org/apps/learn/
01:12 < granjef3> konobi: thanks!
01:15 < sinclair> konobi: do you have any thoughts on backbone.js?
01:19 <@konobi> sinclair: nope... i don't deal with client-interacting code really
01:20 < sinclair> konobi: i don't either, but it is insightful
01:24 <@konobi> i've used websockets for inter-server comms... but that's about it
01:24 < bartek> Hi! If I'm looking for a template system with some basic inheritance, what do you guys suggest? EJS seems to be the best choice, or I can use Mustache and use partials to have faux-inheritance. Any suggestions?
01:26 < jocafa> argh, too many build systems… i spent all day with `make` and now i'm learning gyp
01:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:39 < TaylorBaby1985> www.quickcollegehookups.com is accepting 45 more free accounts!
01:49 <@mbalho> anyone know a module that lets you capture microphone audio?
01:55 < automatado> Hai, I have a question. Let say I have a class that I want to keep them separated in 3 different modules, and each of them will be calling a method from one another to manipulate the same instance of object
01:55 < automatado> What is the best way for me to do that?
01:57 < Oddman> O.o
02:09 < jrajav> automatado: I would pass the object as a parameter.
02:09 < jrajav> To the methods in question
02:10 < anarchist> so what are people using Node for?
02:10 < BennyLava> cools hit and stuff
02:10 < jrajav> To take over the world
02:10 < BennyLava> cool shit*
02:11 < anarchist> i wonder if our take over the world plans are similar
02:11 < anarchist> mine involves RDF and Artificial Intelligence
02:11 < jrajav> I am right now (well not as I'm typing here) writing a note-taking app in node-webkit
02:11 < anarchist> ahh cool
02:11 < jrajav> It's the first step in my huge and ironically convoluted plan to take over the world
02:12 < anarchist> i like taskwarrior for notes, i hope they implement a task server in node
02:12 < anarchist> seen taskwarrior before?
02:12 < jrajav> No
02:12 < anarchist> command line GTD system
02:12 < jrajav> Sweet
02:12 < jrajav> I prefer text files
02:12 < jrajav> I love Simplenote and Notational Velocity
02:12 < anarchist> i'll check those out
02:12 < jrajav> Unfortunately Simplenote is migrating to for-pay API model
02:13 < jrajav> So I'm writing an app that will sync with Dropbox and/or Google Drive, possibly more
02:13 < anarchist> what i love about taskwarrior is that it has dependency management, it has a flat file database in JSON that you can edit manually, and it has real dependency management
02:13 < jrajav> But the main purpose is to clone most of Notational Velocity in Node so it can be written into several frontends
02:13 < anarchist> i use OwnCloud (open source dropbox)
02:14 < jrajav> Dependencies are waaay too high tech for how I like to organize GTD stuff
02:14 < jrajav> I just want labels
02:14 < jrajav> @in, @next, @someday, @someproject, etc.
02:14 < anarchist> sure
02:14 < automatado> jrajav, I have done that, but it can be a real mess with cyclic dependencies
02:14 < anarchist> taskwarrior has @contexts and +tags
02:14 < jrajav> automatado: I've been puzzling through that tonight
02:15 < anarchist> but you can be like task 1 dep:5 and now task 1 depends on task 5
02:15 < jrajav> automatado: I thought about making the note titles an enforced unique key, but that would be weird
02:15 < anarchist> so in certain views which you can arbitrarily manage you can hide things dependent on other tasks
02:15 < hatch> whatchuguystalkinbout
02:15 < anarchist> which is the same as if you said wait:2days
02:15 < niggler> fuck GTD
02:15 < anarchist> and did the blocking task in 2 days
02:16 < jrajav> niggler: It's simpler than the infomercial hype mucks it up to be
02:16 < niggler> what happened to the piece of paper?
02:16 < jrajav> You CAN use a piece of paper
02:16 < niggler> now a moleskine, but same concept
02:16 < anarchist> you can do GTD on a piece of paper
02:16 < hatch> lol really what are you guys talking about? 
02:16 < anarchist> in fact i do
02:16 < jrajav> It's just a few "best practices" for organization and thinking, not some fancy system
02:17 < niggler> the technology makes it too confusing
02:17 < niggler> just write shit down
02:17 < anarchist> hatch: GTD is just some practical advice for how to get distracting thoughts out of your head and into a trusted system
02:17 < jrajav> I agree. Like I said, I just use text files
02:17 < niggler> get some pencils
02:17 < niggler> i switched to the staedtler .3 mm drafting pencils
02:17 < hatch> anarchist, ahhh gotcha :) I use a notebook
02:17 < jrajav> I dislike paper/pencils. Not minimal enough. I already have a computer, I use that.
02:17 < niggler> their lead sucks (pentel is better)
02:17 < anarchist> anyway taskwarrior is like having a command line interface to a text file, and it just puts it into JSON and gives it unique identifiers
02:17 < jrajav> It reduces the amount of things I need to manage and the amount of places they can be
02:18 < anarchist> it's as simple or complex as you want it to be
02:18 < jrajav> anarchist: Sounds a hell of a lot like Todo.txt
02:18 < anarchist> it comes from Todo.txt
02:18 < chilts> hatch: GTD = http://en.wikipedia.org/wiki/Getting_Things_Done
02:18 < jrajav> Except that it makes it JSON instead of just plain text?
02:18 < anarchist> it began as an extension of Todo.txt to format the output better for the command line
02:18 < anarchist> on a grid, with better text wrapping, optional colors
02:19 < anarchist> in 3 or 4 months hopefully it will have android apps and a task server
02:19 < jrajav> Seen Cheddar?
02:19 < jrajav> I'd probably use that if it had an Android app
02:19 < niggler> cheddar is godawful
02:19 < anarchist> yeah it uses JSON as its data format and it has unique identifiers
02:19 < jrajav> Well, I haven't tried it, so.. heh
02:19 < anarchist> it will have an android app, in 4 months approximately (so people tell me)
02:20 < niggler> i understand some people like these great guis but they are mental condoms
02:20 < jrajav> ..... Um. Trying to work that analogy out
02:20 < jrajav> So a pretty GUI makes it... safer to.. mentally splooge?
02:21 < niggler> they wrap you in this nice little gui, separating you from what you want to do
02:21 < jrajav> Mmkay haha
02:21 < niggler> pretending to replicate the real experience
02:21 < niggler> its like a physical condom
02:21 < sinclair> nigger: http://imgur.com/o8JhA
02:21 < sinclair> heh
02:21 < sinclair> *niggler
02:21 < sinclair> nice name btw
02:22 < niggler> sinclair: hahaha you said nigger 
02:22 < niggler> the origin of niggler actually is 'niggle'
02:23 < sinclair> i see
02:23  * sinclair should "always" nick - tab complete
02:23 < anarchist> the other thing i want to use node for is payments processing and automated purchasing https://github.com/digitalbazaar/payswarm.js
02:23 < niggler> as you probably noticed sinclair, lots of small things bother me
02:23 < anarchist> and easy in-app payments systems
02:24 < sinclair> niggler: such as?
02:25 < niggler> my first github pull request: https://github.com/zaach/jison/pull/117
02:25 < anarchist> jrajav: so what's your next step after the notational velocity clone in various front-ends
02:25 < niggler> adding a few semicolons because jshint was complaining about a jison-generated parser
02:26 < anarchist> lol i looked up what notational velocity is
02:26 < anarchist> It is an attempt to loosen the mental blockages to recording information and to scrape away the tartar of convention that handicaps its retrieval. The solution is by nature nonconformist.
02:26 < niggler> just replicate the pen and paper experience
02:26 < niggler> and you'd have a buyer 
02:27 < niggler> fuck, if you could figure out how to make the ipad feel like a notebook there's a platoon of people ready to throw cash at you
02:27 < anarchist> one thing pen and paper can't do is use your geolocative information to find only the things you need to buy at the hardware store you happen to be at
02:27 < anarchist> and it can't do automated purchases
02:27 < jrajav> niggler: OneNote comes pretty close
02:28 < jrajav> anarchist: Nothing really
02:28 < jrajav> anarchist: I don't want to monetize and I have no idea how I would
02:28 < jrajav> This is to scratch my own damn itch
02:28 <@mbalho> niggler: please try to have some empathy when it comes to racial jokes
02:28 <@mbalho> (in regards to a few minutes ago)
02:28 < niggler> for the record, that was completely sinclair's blunder
02:29 < anarchist> oh same for me too, the only reason i want to do automated purchases is so i don't have to mentally calculate the most efficient way to purchase the parts for open source hardware projects from tons of different vendors
02:29 < sinclair> niggler: why would you be missing semi colons?
02:29 < niggler> i discovered jshint today
02:29 < niggler> and was playing with it
02:29 < niggler> and it pointed out a few missing semicolons in jison generated output
02:29 < niggler> so the patch was to force jison to print those
02:30 <@mbalho> niggler: "19:21 < niggler> sinclair: hahaha you said nigger " dont say stupid things like this kthx
02:30 < niggler> most people would just move on; it offended my sensibilities
02:30 < sinclair> mbalho: it was a genuine typo on my part
02:31 <@mbalho> sinclair: obviously
02:31 < sinclair> mbalho: sorry?
02:31 < niggler> no apologies are needed
02:31 < niggler> it was a gaffe
02:32 < niggler> we are all adults here
02:32 < niggler> in theory, and possibly in practice
02:33 < jrajav> Gonna use that as a pickup line if you don't mind
02:33 < anarchist> wow, i think notational velocity would be a great front end for taskwarrior
02:33 < niggler> jrajav: which one?
02:34 < anarchist> jravjav: do you have a project url for what you're doing?
02:34 < jrajav> anarchist: Not yet
02:34 < jrajav> anarchist: You could follow me on github (same nick there), I'll probably post a repo when it's halfway working
02:34 < anarchist> cool
02:35 < jrajav> My github is tragically empty right now :/
02:38 < anarchist> what i'd love is a twitter style language in something like notational velocity that can go off and actually accomplish tasks for me
02:38 < niggler> do you think in twitter anarchist ?  are you a twit?
02:39 < anarchist> twit, meaning this week in technology, right?
02:39 < niggler> a person who thinks in twitter
02:39 < niggler> is a twit
02:39 < anarchist> there was a post once about making microcontrollers do something off twitter based on some kind of hash-mark style simplicity
02:39 < anarchist> that's what i'm really thinking of
02:39 < anarchist> forget what it's really called so i call it a 'twitter style language'
02:40 < anarchist> i don't actually use twitter
02:40 < niggler> fuck twitter
02:40 < anarchist> yes fuck it in the ass
02:40 <@Nexxy> "we are all adults here"
02:40 < niggler> im not sure which orifice is considered twitter's ass
02:40 < sinclair> side note, what do you guys use to automatically restart node on file changes
02:40 < danheberden> niggler: might need to do a port scan
02:40 < niggler> lol danheberden 
02:41 < sinclair> nodemon?
02:41 < danheberden> sinclair: like repo changes?
02:41 < danheberden> or locally
02:41 < sinclair> saving files
02:41 < niggler> watchfile?
02:41 < sinclair> locally
02:41 < anarchist> everything is node, mon
02:41 < sinclair> nodemon
02:41 < sinclair> k, found it
02:41 < anarchist> i just installed node for the first time yesterday
02:42 < niggler> day 9 for me anarchist :)
02:42 < anarchist> counting the days, that's a good sign
02:43 < niggler> i started learning javascript last sunday
02:43 < niggler> i feel so … out of touch with development community
02:44 < anarchist> i heard the Node.js community is on the order of magnitude of the Drupal community so I had to check it out
02:44 < niggler> what's drupal?
02:44 < anarchist> not to mention all the asynchonyzation
02:44 < niggler> https://en.wikipedia.org/wiki/Drupal ?
02:44 < anarchist> drupal is a thingie that does stuff (sometimes)
02:44 < anarchist> yes
02:44 < sinclair> niggler: its a PHP CMS 
02:45 < sinclair> PHP is lame
02:45 < anarchist> oh i think the Drupal community is more than aware that PHP is lame
02:45 < niggler> lol now i feel really old
02:45 < anarchist> they're just having difficulty porting it to Haskell
02:45 < niggler> initial release january 2001
02:45 < niggler> i played with php in 1999
02:45 < niggler> man i feel old
02:46 < niggler> btw: any interest in a pure-javascript math library?
02:46 < anarchist> http://drupal.org/project/nodejs <-- gchat/facebook style chats using node.js
02:46 < danheberden> apparently phpMyAdmin's problem wasn't so much a corrupted mirror as it was their using php
02:47 < niggler> im debating whether to break out a separate project for implementations of various distributions and functions
02:47 < anarchist> i just call phpMyAdmin shootMyAdminInTheFace
02:47 < anarchist> which is the same protocol as if you php your admin
02:47 < danheberden> i've had clients be like "so do i get phpMyAdmin and ftp?" and i giggle so wildly
02:48 < anarchist> and you're like, if you have to ask, then no
02:48 < anarchist> and if you don't have to ask, then here's your shell account go do stuff
02:48 < danheberden> i had this old site from forever ago and i had to make some changes to it as a favor to an old client
02:48 < danheberden> must frustrating time of my life dragging files to fucking ftp clients
02:51 < niggler> anyone familiar with elance or any of these other sites?
02:52 < AAA_awright> anarchist: I wouldn't compare a content management system to a OS API platform but I guess it's still worth checking out
02:52 < sinclair> on linux, what directory do you guys develop you projects in?
02:52 < AAA_awright> sinclair: ~/projectname
02:53 < anarchist> actually Drupal 8 is in the direction of decoupling web content management from a new, underlying API server
02:53 < AAA_awright> Maybe ~/projectname/projectname and ~/projectname contains extranious data and resources
02:53 < AAA_awright> niggler: Yes, ECMAScript could use a nice bigint library
02:54 < AAA_awright> anarchist: I'm inclined to say it's too little, too late
02:54 < niggler> AAA_awright: there are many bigint libraries
02:55 < AAA_awright> Did I say bigint? Arbritrary-precision numerical library
02:55 < niggler> for example, lets say i wanted to calculate the gamma function
02:55 < AAA_awright> But bigint types easier
02:55 < niggler> i dont know of any javascript implementations
02:55 < niggler> fuck, even random needs a cleanup
02:55 < niggler> why isnt there a seed function for random
02:56 < AAA_awright> You mean Math.random?
02:56 < anarchist> AAA_awright, one thing drupal got right earlier than others is RDF integration
02:56 < niggler> yeah AAA_awright 
02:56 < anarchist> we have yet to see the significance of RDF
02:56 < niggler> you can't seed math.random
02:56 < anarchist> i think drupal is headed in the right direction even if it's a tall order to become an API server
02:56 < AAA_awright> If you need more functionality out of your random number library, usually you want a custom library
02:57 < AAA_awright> niggler: Why would you want that?
02:57 < AAA_awright> anarchist: Drupal's RDF support is meaningless
02:57 < AAA_awright> Drupal has no native understanding of RDF, it cannot consume RDF
02:57 < niggler> im trying to do math in javascript
02:57 < AAA_awright> Everything in the world can produce RDF easily, consuming RDF is what's actually meaningful
02:58 < anarchist> AAA_awright, i think it's a little bit lofty and simplistic to say that producing RDF is easy. producing content in general is a human task, it's not a question of simple data formats
02:58 < AAA_awright> But it is! It's just another serialization format if you wanted to implement it
02:59 < anarchist> what Drupal allows is for your content management system to be deeply tagged in RDFa without the user having to care hwo it works
02:59 < anarchist> i agree with you on a strictly technical level
02:59 < AAA_awright> All Drupal does is expose internal properties inside RDFa tags, with no understanding of what the RDFa actually *does*
02:59 < anarchist> no you're clearly right, this is what node.js would be great for
03:00 < AAA_awright> That's really awful if you produce RDF without understanding it's meaning, because then you're liable to produce *bad* RDFa facts, and this is actually a huge problem
03:00 < AAA_awright> anarchist: One step ahead of you :) http://magnode.org/
03:00 < anarchist> but if i want to build out an idea for how to use 20 content creators marshalling a community of 1,000 interested participants overnight, i can have them generating content in RDFa overnight
03:00 < anarchist> in drupal
03:00 < anarchist> okay i'll check that out
03:01 < anarchist> AAA_awright, you make a potentially relevant point
03:01 < anarchist> but not for a serious user
03:02 < anarchist> publishing a lot of FOAF and SIOC data you don't know what it is maybe it's all junk, but if you're publishing bills of material for open source hardware projects or transaction data from payment authorities or whatever, then presumably you have some way of consuming the data in a real way, not just with drupal hacked together sparql-esque nonsense
03:02 < AAA_awright> s/it's/its/
03:02 < AAA_awright> (bleh how did I do that)
03:02 < wingy> how do i check if my server is running on production or development env?
03:03 < AAA_awright> Right
03:03 < danheberden> wingy, assuming you're using NODE_ENV as en environment var?
03:03 < anarchist> i think magnode misspelled decisive
03:03 < AAA_awright> Probably
03:03 < wingy> danheberden: yeah .. how do one parse it?
03:03 < danheberden> process.env.NODE_ENV === "production"
03:03 < AAA_awright> I was inventing a buzzword
03:03 < AAA_awright> Because buzzwords are cool
03:03 < wingy> danheberden: yeah thanks
03:03 < wingy> what are buzzwords?
03:03 < wingy> trendy words?
03:04 < danheberden> like what "html5" and "css3" became
03:04 < AAA_awright> SHARDED SEMANTIC BIG DATA IN THE CLOUD
03:04 < danheberden> pretty much something that'd be in a recruiter email
03:04 < anarchist> AAA_awright, i'm very interested in this
03:04 < anarchist> looks cool
03:04 < AAA_awright> Something http://www.atrixnet.com/bs-generator.html would generate
03:04 < AAA_awright> anarchist: Awesome :)
03:12 < jrajav> Sharded semantic big data in the cloud actually sounds pretty neat
03:12 < jrajav> Just sayin'
03:13 < danheberden> only if you can iterate on the concepts and have a touch base later
03:14 < jrajav> Lol@ AAA_awright's link
03:14 < jrajav> "quickly deliver viral schemas"
03:19 < AAA_awright> anarchist: If you wanna help out, I can use people to do test installs
03:19 < anarchist> are you the guy working on this?
03:19 < AAA_awright> (Or develop)
03:19 < AAA_awright> Yeah
03:19 < anarchist> so my interest is in http://payswarm.com
03:20 < anarchist> i hope you have real code cause i've already passed your link around lol
03:20 < AAA_awright> Ooh that's yours?
03:20 < anarchist> no, it's a friend
03:20 < anarchist> i mean he's more of a god of RDFa than a friend
03:20 < anarchist> imagine if your friend was a god of rdfa
03:20 < AAA_awright> 4765 lines
03:21 < anarchist> coolsville
03:21 < anarchist> so right now i'm banking on a universal payments standard being the killer app of rdf
03:21 < anarchist> banking is a string literal here
03:21 < anarchist> as in, we're starting banks and shit, cause we're cowboys *pow pow pow*
03:22 < niggler> starting a bank isnt as hard as you think
03:22 < AAA_awright> And hardly secure, though I don't think your data serialization format is going to fix that if the bank doesn't do any authorization or authentication checking anyways :(
03:22 < anarchist> no not a river bank
03:22 < niggler> there's a corner case in NY state law, and basically they forgot to adjust for inflation
03:22 < niggler> so you need 1M dollars (This was back in the 1880s)
03:22 < niggler> b
03:22 < niggler> u
03:22 < niggler> t now oyu need 1M dollars (which is worth much less)
03:23 < AAA_awright> Yay inflation! /s
03:23 < anarchist> payswarm uses public key cryptography / digital signatures what-not
03:23 < niggler> so its called "Private Banker" status
03:23 < AAA_awright> anarchist: I'm kind of seeing the Internet go in the direction of Bitcoin, I remember looking at Payswarm but I don't really understand the benefits
03:23 < niggler> and NACHA and other groups have carved out exemptions for them
03:24 < niggler> you need 1M core capital and must maintain it at all times but you don't need FDIC protection
03:24 < AAA_awright> I should do that, start a bank where each check issued is cryptographically signed, so people can't forge your checks, short of stealing your checkbook (and it'd make them instantly verifyable, "is this legitimate?")
03:25 < niggler> no you cant do that AAA_awright 
03:25 < niggler> you have to follow the check protocol
03:25 < niggler> e.g. having a routing and account number
03:25 < AAA_awright> I'd include that, but you still have the option of refusing to redeem a check
03:25 < niggler> there's a lot of integration with frbny and they have crazy rules
03:26 < niggler> im setting up a bank now
03:27 < niggler> its a long process though :/
03:27 < AAA_awright> Also, keep 25% reserves, specify in contract withdrawls in excess of 25% needs to be taken out as a loan (this eliminates the possibility of a run, and the requirement to be "insured")
03:27 < niggler> AAA_awright: if you dont dip in the discount window you have no reserve requirements
03:27 < niggler> you dont have to be a PD to be a bank
03:29 < anarchist> AAA_awright, payswarm is an RDF based web payments standard
03:29 < anarchist> it can handle microtransactions down to 1/100,000 of a penny
03:30 < anarchist> set up monthly budgets that recur/refill
03:30 < AAA_awright> anarchist: It seems to be written a bit clearer now, yeah
03:30 < anarchist> here's a comparison with a leading competitor standard http://manu.sporny.org/2011/web-payments-comparison/
03:31 < AAA_awright> It can handle arbritrary currencies? USD, grams gold, Bitcoin, A3 Bucks?
03:31 < niggler> gold is not a currency
03:31 < AAA_awright> Sorry, moneys?
03:31 < niggler> in the jurisdiction of the US
03:32 < niggler> only utah recognizes gold as a currency
03:32 < AAA_awright> The US doesn't get to define what a money is, just legal tender
03:32 < AAA_awright> i.e. the stuff you pay taxes with
03:32 < niggler> currency
03:32 < niggler> you didnt say money, you said currency
03:33 < niggler> as for what is money, that's a deep philosophical question
03:33 < AAA_awright> It's well defined, it's a commodidy with secondary exchange value you use in a particular transaction
03:34 < niggler> what's secondary exchange value?
03:34 < AAA_awright> Something valued for what it can be exchanged for
03:35 < AAA_awright> We can't use dollar bills for anything, but we can trade it for stuff, etc
03:35 < niggler> right, but you are left with a temporal problem
03:36 < AAA_awright> What's that?
03:36 < niggler> you receive bills or whatever now but expect to exchange it in the future
03:36 < niggler> carl menger went through with this logic and built what we refer to as austrian economics
03:37 < AAA_awright> Problem with that? There's a tiny amount of risk involved maybe, but it's immeasurably small
03:37 < niggler> you assume that's the case, but are you familiar with the zimdollar?
03:37 < AAA_awright> And even if there was lots of risk (bank notes before the Federal Reserve Note), you just factor the risk in with the price of the transaction
03:37 < niggler> this happened a few years ago
03:37 < AAA_awright> Hyperinflation?
03:38 < niggler> yeah
03:38 < niggler> they had trillion zim bills
03:38 < AAA_awright> The effects of price inflation is well studied
03:39 < AAA_awright> I'm sure you're familiar
03:39 < niggler> this was more a confidence problem than anything else
03:39 < anarchist> ooh, am i missing currency talk?
03:39 < zak> did i stumble into #economics or something...
03:39 < niggler> that's the temporal issue here
03:39 < anarchist> scrolling up...
03:39 < anarchist> yes it can do arbitrary currencies like bitcoin although obviously you can't have a currency mint for bitcoin
03:40 < AAA_awright> niggler: You should integrate this Paysworm into your bank maybe? Is this a standard bank I would be able to open an account with?
03:40 < anarchist> potentially it can do bitcoin-like blockchains to do physical alternative cash although there's some trust issues
03:40 < niggler> AAA_awright: are you accredited?
03:40 < niggler> basically, do you have >1M net worth or >200K/yr salary?
03:40 < AAA_awright> traditional money warehouse, I mean
03:40 < anarchist> there will be a company launching as a Payment Authority (although the standard is open and anyone can write a payment authority in payswarm) in perhaps the 6 month range
03:40 < AAA_awright> niggler: Not yet lol
03:40 < niggler> the problem is that the rules are different 
03:41 < niggler> when you get there, itll be easy to bring you onboard
03:41 < anarchist> yeah menger and austrian economics i take issue with
03:41 < anarchist> i prefer MMT
03:41 < niggler> but if not, then you have all kinds of strange issues and reserve requirements are higher etc
03:41 < anarchist> tjere
03:41 < niggler> its a joke if oyu think about it
03:41 < niggler> because you are exposed to the same risk either way
03:41 < anarchist> there's never been a hyperinflation in a sovereign  whose debts were denominated in its own currency
03:42 < niggler> a ton of farmers were fucked over with MF Global
03:42 < AAA_awright> MMT?
03:42 < anarchist> modern monetary theory
03:43 < AAA_awright> Ah
03:43 < anarchist> kind of an arrogant name but it's a good description of actually existing monetary systems
03:44 < anarchist> actual theory is relatively decoupled from a mere description of how sovereign currencies actually work, unlike in austrian economics, where there's these predictive assumptions about the value of money that can't really be supported in the real world
03:44 < anarchist> and fanciful concepts like a "natural rate of interest"
03:44 < niggler> there needs to be an economic realpolitik
03:45 < AAA_awright> What's wrong with a natural rate of interest?
03:45 < anarchist> well it's a little bit of an invisible pink unicorn of monetary theory
03:45 < anarchist> the concept mostly rests on the assumption that no value is created by how you spend printed money
03:45 < anarchist> which is pretty ridiculous, depending of course on how you spend the money
03:45 < AAA_awright> Well value is subjective, so the value /changes/, but you can't say it was created or destroyed
03:46 < niggler> you cant create or destroy value
03:46 < niggler> you can create or destroy wealth
03:47 < anarchist> anyway i find that austrian economics moves a little bit too loosely between physical commodities and financial assets, whereas MMT more points out exactly what's happening with financial assets, and you can choose to apply that to real commodities in whatever way you see fit
03:47 < anarchist> of course someone like menger would just say money is a kind of commodity
03:47 < jocafa> lesson learned:   `make -j` with no number of jobs defined is a BAD IDEA
03:48 < AAA_awright> jocafa: LOL
03:48 < anarchist> jocafa, please don't break Node.js, since i know some people who have'nt had a chance to use it yet :-)
03:48 < jocafa> hehe
03:48 < jocafa> was compiling protobuf
03:48 < anarchist> i don't know what that is, but i recommend you seriously consider compiling something less dangerous sounding
03:49 < niggler> like php
03:49 < anarchist> yes compile php for instance
03:49 < anarchist> it has a friendly sounding name
03:49 < jocafa> i will never touch php ever again if i can avoid it
03:49 < AAA_awright> a_meteor: Hey there you are, so what do you think of creating a micropayments system in Node.js using... wait for it... Bitcoin
03:50 < niggler> are there php jedi knights not working for facebook?
03:50 < a_meteor> I think you know my answer
03:50 < AAA_awright> jocafa: Not even for templating? I think it's a rather beautiful template language
03:51 < niggler> any insight as to why php broke the ternary operator?
03:51 < jocafa> i'd rather torture myself with sed and awk.
03:51 < niggler> HEY jocafa you take that back
03:51 < niggler> awk is an amazing language
03:51 < anarchist> AAA_awright, a_meteor: i take it you guys don't like bitcoin?
03:52 < anarchist> i'm not a bitcoin fan personally
03:52 < a_meteor> anarchist: I love Bitcoin
03:52 < anarchist> ahh
03:52 < a_meteor> I've invested the time in it and it's treated me well.
03:52 < jocafa> niggler:  let me clarify: i'd be torturing myself with them because i don't know them very well :)
03:52 < anarchist> i'm not opposed, per se i just see the advantages as being the same as the limitations
03:52 < a_meteor> I'd like to see it gain more traction.
03:52 < anarchist> i think of it as the napster of alt currencies
03:52 < AAA_awright> anarchist: Oh no, it's brilliant
03:52 < niggler> most of my compliance scripts are in awk
03:53 < anarchist> i don't place a high value on the distributed generation of bitcoins
03:53 < AAA_awright> It has some, erm, trust issues though
03:53 < anarchist> but it's a nifty concept
03:53 < jocafa> (this said as i'm neck deep in makefiles)
03:53 < a_meteor> with a nick like anarchist, I'd think you'd love the idea of Bitcoins :P
03:53 < anarchist> heh
03:54 < niggler> i use make for everything lol including generating javascript
03:54 < anarchist> anyway payswarm will handle bitcoins
03:54 < a_meteor> A currency untouchable by the government and corporations
03:54 < AAA_awright> The reward for mining blocks is a nifty little social engineering trick I think
03:54 < jocafa> likewise.  tjhollowaychuk turned me on to make
03:54 < AAA_awright> niggler: Yeah, it upsets me when people insist on using like, Rakefile, wth? Make is perfectly adequate
03:55 < AAA_awright> And pretty simple
03:55 < jocafa> especially 'cause if you use make correctly, it'll do the bare minimum needed :)
03:56 < niggler> ant
03:56 < niggler> motherfucking ant
03:57 < a_meteor> I want to kill ant. With fire.
03:57  * siksia concurs
03:57 < a_meteor> Rather, a magnifying glass.
03:57 < a_meteor> Only appropriate.
03:57 < niggler> hehe
03:58 < AAA_awright> I made a program to use Git submodules to maintain dependencies, but it doens't do binaries or anything
03:58 < AAA_awright> Someone asked how do you do Makefiles on Windows?
03:58 < AAA_awright> That's curious because idk how common make is on Windows, I know it exists, though idk if Node.js uses cygwin anymore
03:59 < AAA_awright> That was probably a LONG time ago
03:59 < anarchist> AAA_awright, do you think magnode could be useful for cross referencing open transaction histories with SIOC and FOAF etc. data?
03:59 < anarchist> to make transparent organizations
03:59 < AAA_awright> anarchist: Yes, that's exactly what it's designed for
03:59 < AAA_awright> Plotting data, etc
03:59 < AAA_awright> Or *should eventually* do
03:59 < AAA_awright> Really time-series plots shouldn't be too hard, I just have to write the function that handles it
04:00 < anarchist> cause i'd like to take some organizations that all have appointed members with open payswarm accounts
04:00 < anarchist> with transparent RDF financial transaction histories
04:00 < a_meteor> AAA_awright: hopefully you're plugging the channel home of magnode ;)
04:00 < anarchist> and allow donors to do micropayments that they can divide the payments up arbitrarily
04:00 < AAA_awright> For instance, I'd like to import the Bitcoin block chain as RDF and then do stats and visualisations on it
04:00 < anarchist> and do extreme data discovery
04:00 < jocafa> node uses gyp these days
04:00 < anarchist> meeting minutes, livestreams, blog posts that reference specific transactions, etc.
04:01 < anarchist> or like archived livestreams rather
04:01 < AAA_awright> You'd think Node.js could write it's own build system... In ECMAScript
04:01 < jocafa> gyp dumps out build files appropriate for the platform it's run on
04:01 < jocafa> if i understand right
04:01 < niggler> timeseries regressions are fun :)
04:01 < anarchist> AAA_awright, this would be an occupy wall street project potentially
04:01 < anarchist> don't know how you feel about OWS
04:01 < AAA_awright> I don't have a problem with that
04:02 < AAA_awright> OWS usually has the right conclusions, if for the wrong reasons (better than then the other way around I guess)
04:02 < anarchist> the idea is that since payswarm has budgets that can be refilled on a monthly basis
04:02 < niggler> the problem, like with the tea party
04:02 < niggler> is that they were coopted
04:02 < niggler> i think both are essentially the same
04:02 < anarchist> they can hand the valet key (public key cryptography) over to vendors (or people who take donations in this case)
04:02 < AAA_awright> Right
04:02 < anarchist> so it could be like, donate 1 cent per month to occupy wall street
04:02 < anarchist> and donors choose which working groups get the money
04:03 < anarchist> and we do extreme RDF based data discovery
04:03 < anarchist> and make the OWS web presence RDF-ified
04:03 < anarchist> now if you have 2,500 lines of code, i think that's not something that would be the main CMS for OWS but it could be a parallel CMS on the donations application that the main websites push
04:04 < anarchist> that parallels that RDF data and allows instant data discovery and consuming blog posts etc. to find out about transaction histories, how money was spent
04:04 < anarchist> and then put it on chrome, android, ios, what-not
04:07 < anarchist> payswarm would allow this kind of granular division down to 1/100,000 of a US cent
04:07 < anarchist> between hundreds of working groups
04:08 < AAA_awright> Right now it's being designed to be a blog/static website hosting engine thing
04:08 < AAA_awright> So I'd take it as a main CMS before the specific application stuff
04:09 < AAA_awright> Certainly it should facilitate the serving and consuming of whatever data you want to throw at it, though
04:17 < AAA_awright> Alright, this might be crazy, but I'm looking for an implementation of ECMAScript, in ECMAScript
04:17 < AAA_awright> I want to create a new language with a grammar that's familiar, maybe
04:17 < AAA_awright> Or just create a new language maybe.
04:18 < AAA_awright> For analyzing lots of data at once and making queries
04:21 < danheberden> AAA_awright: would, like, starting with coffeescript be a first step?
04:21 < danheberden> like make your own transpiler?
04:22 < AAA_awright> I'm looking for a simple way to make one-line queries, think how people use SQL on the command line
04:22 < danheberden> i wanted to make SQL for jQuery as a joke once
04:23 < AAA_awright> anarchist: So let me understand your use-case a bit better, would you like some ability to make arbritrary queries on data, with one-liners? Like how you'd use a search engine, or scientific calculator
04:23 < danheberden> $('SELECT `name` FROM DIV WHERE `parent` = 'form[name="errmahgerd"]
04:23 < danheberden> ');
04:23 < AAA_awright> Graphing calculator, even
04:23 < AAA_awright> danheberden: I'd use that :p
04:23 < anarchist> errmahgerd!
04:23 < AAA_awright> If I could ship an in-memory MongoDB drop-in replacement, that'd be fantastic
04:24 < kuja> they took err jerbs!!
04:24 < AAA_awright> der terk er jrbs!
04:24 < anarchist> yeah maybe if users could create and share queries on the data or something
04:24 < anarchist> or user/developers
04:25 < AAA_awright> And then maybe you publish that query as a resource, optionally have some fields so you can change parameters
04:25 < AAA_awright> Hmm yeah
04:25 < anarchist> that sounds pretty good
04:25 < anarchist> and i'd like to embed this jquery slider all over the place that can allocate a donation in payswarm
04:26 < anarchist> so these new views on the data all lead back to the call to action which is to divide up your donation as you see fit based on this mass of transparent financial data
04:27 < anarchist> but also member data, meeting time/place, minutes and archived livestreams from meetings
04:27 < anarchist> a micro-donation platform for completely transparent working groups
04:27 < anarchist> that really gives confidence to the donor that this is the most transparent organization in the history of the world
04:28 < anarchist> where/when to go to meetings and join up, open organization
04:28 < anarchist> how to smash the state, etc.
04:28 < anarchist> putting the banks and the GAO to shame
04:30 < AAA_awright> Has OWS opened a bank? If niggler says it's so easy, and they have to have a million dollars among them... right? >_>
04:31 < niggler> its not *so easy*
04:31 < niggler> and individuals need to have >1M assets or >200K/yr to have an account
04:31 < niggler> and im willing to bet most OWS people arent in that class
04:31 < anarchist> 99% of them are not, no
04:32 < anarchist> it's not so much that OWS is opening a bank as that there will be this new proposed standard for RDF based web payments
04:32 < anarchist> and in a few years perhaps it will pass all the PCI compliance and ACH network compliance whatchama so that it's easily replicable
04:33 < kuja> that'd be the day...
04:33 < kuja> PCI is a PITA
04:34 < anarchist> i imagine the simplicity of the implementation and standardization of the... uhm... standard
04:34 < anarchist> will force change
04:34 < anarchist> also occupying the shit out of them
04:34 < anarchist> but you know, nevermind that for now
04:35 < anarchist> but yeah the overall headline is that OWS is moving into banking to show how it's done
04:35 < anarchist> on the paypal killer mdoel
04:35 < anarchist> *model
04:36 < anarchist> just as soon as we learn some javascript
04:39 < ccowan> Do most people create node modules and link them globall then locally?
04:39 < ccowan> specifically for your own private modules?
04:40 < AAA_awright> niggler: Oh, each accountholder needs to have that salary? And what if you're laid off?
04:41 < kuja> ccowan: globally linked would be handy for those modules that have executable scripts but I generally rely on npm and node_modules/
04:42 < ccowan> right ... but lets say for my project I have a bunch of modules i want to share between projects that are specific to my company.
04:42 < ccowan> I don't want to put them on npmjs.org
04:42 < niggler> AAA_awright: the rule is past 2 years
04:43 < AAA_awright> Mhm
04:43 < niggler> and if you get laid off you remain accredited for two years lol
04:43 < AAA_awright> Individual account holders need to be accredited?
04:43 < ccowan> it seems like the best way would be to run `npm link` in the module folder and then in the project folder run `npm link <module>`
04:43 < kuja> ccowan: there's `npm link`
04:43 < kuja> yeah whoops faster than me :p
04:43 < ccowan> which will link it from the global to the local
04:44 < ccowan> I'm just wondering if that's the "prefered" method/
04:44 < ccowan> I'm only asking because I'm putting together a Node.js presotation for a meetup and I don't want to desiminate the wrong info
04:46 < kuja> ccowan: I think it is possible to specify an internal registry
04:46 < kuja> to which you can publish your private packages
04:46 < kuja> Trying to find more info on that though
04:47 < Nuck> Okay, I'm experiencing some weird fucked up shit
04:47 < kuja> ccowan: https://npmjs.org/doc/registry.html
04:48 < Nuck> I'm trying to readFile a huge-ass JSON blob into memory, and it parses fine, but for some reason it's missing portions
04:48 < Nuck> Like, if I grep for this item, it works, but if I .indexOf it, I get -1
04:49 < mscdex> Nuck: what if you read it in with a readstream instead?
04:49 < danheberden> Nuck, are parts of the object overwriting themselves? like {wat:oh,foo:bar,wat:babybaby}
04:49 < ccowan> kuja: THX!
04:49 < mscdex> that too ^
04:49 < Nuck> mscdex: I need to JSON.parse it
04:49 < Nuck> danheberden: It's a big array
04:49 < kuja> np
04:49 < Nuck> So no rewriting possible :/
04:49 < danheberden> Nuck: twss
04:50 < mscdex> Nuck: yeah i mean concatenating manually
04:50 < danheberden> maybe an encoding issue making the match not work?
04:50 < Nuck> mscdex: Hmmm maybe
04:50 < danheberden> if the file was incomplete it woultn' have the trailing ], ya?
04:50 < danheberden> thus not parsing
04:50 < Nuck> Exactly
04:50 < Nuck> Which means it should be the full file
04:51 < AAA_awright> Nuck: If you know it's safe, try loading it as plain old ECMAScript, reportedly that's faster (for some inexplicable reason, V8 is so efficent, it compiles faster than it parses)
04:51 < Nuck> AAA_awright: Not surprising.
04:51 < danheberden> AAA_awright: well there's the decoding operation with json
04:51 < Nuck> But it's not just in the JSON
04:51 < Nuck> It's also missing from the input string
04:51 < AAA_awright> It's missing from JSON.stringify() then?
04:51 < danheberden> Nuck, if you grep that exact string?
04:52 < Nuck> Essentially I'm doing this:
04:52 < Nuck> fs.readFile('/tmp/animetitles.json', 'utf8', function (err, data) { console.log(data.indexOf('naruto')) });
04:52 < Nuck> I thought "well, maybe it didn't turn into JSON right"
04:52 < Nuck> So I opened it in Chrome and Cmd+F'd for "naruto"
04:52 < Nuck> Sure enough, 115 hits
04:53 < mscdex> is the capitalization the same?
04:53 < mscdex> :S
04:53 <@Nexxy> lol, naruto
04:53 < Nuck> Nexxy: :D I like to test things with terrible examples that make me feel bad
04:53 < Nuck> mscdex: In some places, it should be.  Lemme try case-insensitivizing
04:54 < kuja> Isn't that the Japanese swirl thingies served with ramen?
04:54 < automatado> Is thiere a better way to do this?
04:54 < automatado> http://pastebin.com/jmLK9efs
04:54 < automatado> without passing the object
04:54 < danheberden> Nuck: you could console.log() the data and from the command line grep to make sure
04:55 < Nuck> danheberden: hahahahahaha
04:55 < danheberden> node yourthingy.js | grep naruto
04:55 < Nuck> Yeah, I've done that to no avail
04:55 < Nuck> console.logging takes like 30 seconds too
04:55 < danheberden> so then you could look at that data and investigate?
04:55 < Nuck> I'm flying blind with such an enormous data set
04:55 < danheberden> and see where it's missing?
04:55 < danheberden> surely there's SOME clue
04:56 < Nuck> Apparently there were zero instances with the proper captilization of Naruto
04:57 < danheberden> hahaha
04:57 < mscdex> automatado: why not just define your error handler function and just use `bot.on('error', errHandler);` ?
04:57 < Nuck> :|
04:57 < Nuck> All case issues, figures
04:57 < mscdex> Nuck: :-)
04:57 < Nuck> mscdex: Thanks for making me think :P
04:57 < danheberden> next time i'm recommending to turn it off and on again
04:57 < Nuck> Sometimes my brain fails me
04:59 < Nuck> Wow.  I'm able to search a list of 7300+ animes with an average of 6 title fields each in under half a second.
04:59 < automatado> mscdex, the error is just an example. The reason why it is like that is because, I want the user to be able to choose what they want node-irc to listen and what not
04:59 < Nuck> And this is just by nesting map/reduce/any
05:01 < mscdex> automatado: well if you're not going to give them direct access to the node-irc object, then just create a proxy EventEmitter that the end user can use instead?
05:04 < automatado> mscdex, another reason is because I want to separate the events from the commands into two different modules
05:05 < mscdex> automatado: ok, then export an object of `'eventName': eventHandler` pairs and set those up in the other module?
05:11 < automatado> mscdex, as I said, I don't want all the listeners to be listening by default. The user will have the option to activate each and every listener
05:12 < owen1> i am writing a GET API that accept array of numbers. how to do that with curl?
05:16 < mscdex> owen1: well, node's built-in querystring parser will create an array if you have multiple of the same key name
05:20 < owen1> mscdex: ?chainId=1&chainId=2         so the curl should be this?
05:20 < mscdex> owen1: yeah, although you'll want to escape the ampersands if you're doing this in the shell
05:24 < owen1> mscdex: btw, i use url.parse(req.url,true).query    and here is my curl: curl 0.0.0.0:3000/merges?chainId=1%26chainId=2  
05:25 < owen1> mscdex: i see: 1&chainId=2     when i console.log the url.parse part
05:25 < mscdex> no, by escape i meant \&
05:25 < owen1> oh
05:25 < mscdex> apologies :-)
05:37 < owen1> i need advice about structuring my api. i currently have GET /merges/chainId=1 that return array of hashes. i would like to provide another api that get's array of ids and return array of ids. the return values in each api are different. what should the second api looks like?
05:38 < owen1> should it have different url, like /merges_info?chainId=1&chainId=2
05:39 < owen1> or maybe /merges/info?chainId=1&chainId=2
05:39 < danheberden>  maybe /merges/chainId:1/ gets the specific item, /merges/chainId:1,2,3-5,6/ gets the ones you want?
05:41 < owen1> danheberden: notice that object that is returned is different. the first return array of hashes and the second array of ints-
05:42 < owen1> danheberden: and if i'll use your idea, how will i know what to do with /merges/chainId=1  is that the first or the second type?
05:43 < danheberden> oh, it's, like, merging
05:43 < owen1> danheberden: replace merge with foo
05:43 < owen1> /foo/chainId=1
05:43 < owen1> is this the first type, that should return [{},{}] or the second type that should return [1]
05:44 < owen1> if i use /foo_info?chainId=1 i'll have a clear way to tell the difference
05:44 < owen1> the same with /foo/info?
05:49 < danheberden> maybe introduce another delimeter?
05:49 < owen1> danheberden: can u write an example?
05:49 < danheberden> i still don't understand your data structure or what you're trying to express, so probably not :/
05:51 < danheberden> but, like, /foo/chain/id:1/, /foo/get/id:1/
05:51 < danheberden> i donno
05:51 < danheberden> like, look at the backbone router stuff
05:51 < danheberden> that might spark some ideas
05:53 < owen1> danheberden: interesting. i never seen : usualy it's =
05:53 < owen1> oh. u'r not writing it as curl
06:10 < automatado> actually, I just removed hell alot of LoC after following mscdex suggestion
06:12 < Nuck> I'm trying to make sexy search results in terminal, preferably pacman-esque
06:12 < Nuck> Any suggestions on a lib?
06:13 < aandy> Nuck: you mean like ncurses?
06:13 < Nuck> aandy: Not at all like ncurses
06:14 < aandy> ok, then i don't understand what pacman-esque means :)
06:14 < Nuck> It's not designed like an application, it's simply textual results layed out in a nice easy to grok setup
06:27 < cellvia> help, does anyone know how to pipe a stream to the console
06:27 < cellvia> or otherwise print a stream to the console
06:27 < cellvia> using   .pipe
06:29 < gildean> cellvia: pipe to process.stdout
06:31 < cellvia> thanks!
06:33 < cellvia> this stream stuff is awesome... and crazy to wrap my head around but i feel like its revealing more of what makes node a powerful tool in the right hands
06:33 < pher0x1> streams ftw!
06:34 < cellvia> ChrisPartridge do you have any recommended novel uses or modules that have inspired you RE streams
06:37 < terinjokes> i don't currently use any streams
06:40 < cellvia> req and res in express are streams at least... prob most common ones   i think
06:42 < terinjokes> but I don't use pipe with them
06:43 < terinjokes> heh, have to remember how many people I know idle in here… normally i don't have such a large overlap
06:44 < gildean> cellvia: https://github.com/substack/stream-handbook
06:44 < gildean> credits to substack
06:45 < cellvia> hell yeh... i read through that, would love for all those stream modules to get a little blurb to explain what they can do
06:45 < cellvia> some of them are filled in
06:45 < cellvia> but not a lot
06:45 < cellvia> it should be called the plumbers guide (get it, pipes)
06:46 < cellvia> another bit of help anyone...  is there an easy and simple way to detect the OS inside script
06:46 < cellvia> im getting all sorts of path issues trying to do fs stuff
06:47 < cellvia> between my debian and windows installs
06:48 < cellvia> nm got it...   process.platform
06:48 < cellvia> laterz
06:48 < ChrisPartridge> cellvia: there are functions in the path module
06:48 < ChrisPartridge> or not
07:04 < jarr0dsz> hi everyone. does anyone know a good example or writeup of node + sockets.io + user based notification system ? preferrable with a delivery check type of thing?
07:07 < sinclair> hey guys, where can i find information on writing native modules for node?
07:10 <@isaacs> killfill: st only works with node 0.8
07:10 <@isaacs> killfill: please upgrade.
07:11 < nsm> s
07:11 < nsm> sinclair: https://github.com/nikhilm/jsfoo-pune-2012
07:12 < nsm> and http://kkaefer.github.com/node-cpp-modules/
07:13 < sinclair> http://channel9.msdn.com/Events/Patterns-Practices-Symposium-Online/Patterns-Practices-Symposium-Online-2012/node-js-on-Azure
07:13 < sinclair> thanks nsm
07:18 <@isaacs> niggler: if you want srand, you can do `npm install srand`
07:18 <@isaacs> niggler: if you want true cryptographically secure randomness, you can use crypto.randomBytes()
07:18 <@isaacs> niggler: Math.random() is neither
07:19 <@isaacs> niggler: but it is cheap and fast and relatively unpredictable
07:31 < jarr0dsz> so i try the node chat socket.io example and run it following the docs on port 3000 but localhost:3000 just times out
07:32 < jarr0dsz> is the node chat example outdated?
07:37 < [AD]Turbo> hi there
07:38 < Nuck> What's a good basic terminal library
07:38 < Nuck> Something providing stuff like moving the cursor
07:38 < Nuck> Maybe printing some text aligned left/right/center at a coordinate?
07:38 < Gottox> Nuck: ansi.js
07:41 < risto_> does nodejs have any String.printf like functions to make easier writing strings with  variables ?
07:42 < Nuck> Gottox: We have a winner, ding ding ding
07:43 < Gottox> risto_: util.format()
07:43 < Gottox> Nuck: :D
07:43 < Gottox> risto_: http://nodejs.org/docs/latest/api/util.html#util_util_format_format
07:43 < risto_> looks good
07:43 < risto_> ty didnt know such existed
07:46 < Gottox> risto_: it doesn't support the full featureset of printf, it's more a simple pattern-replacer. but it's enough for simple tasks.
07:47 < risto_> looks so, but some string concat operation can be long so it's better to use format
07:51 < sinclair> where do node packages get installed
07:53 < risto_> well if you use the -g flag then in somewhere bin/
07:54 < risto_> but if not then packages get installed in node_modules/ directory
07:55 < Gottox> the /usr/bin files are symlinks to /usr/lib/node_modules/
07:56 < Gottox> if you don't use -g, it's either pwd or the first parentfolder of pwd in which a node_modules directory is found.
07:57 < Gottox> iirc.
07:57 < Gottox> http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/
07:57 < sinclair> thanks Gottox 
08:00 < Gottox> you're welcome :)
08:16 < risto_> @uptime
08:34 < risto_> @uptime
08:34 < Miska>  11:32:01 up 3 days, 23:32,  0 users,  load average: 0.06, 0.04, 0.06
08:37 < joaojeronimo_> how does one execute a shell command from node, without it being a child ?
08:38 < Miska>  11:36:18 up 3 days, 23:37,  0 users,  load average: 0.07, 0.05, 0.05
08:44 < strk> does RegExp support back-references in the pattern side ? Like: (['"])a\1 to match both 'a' and "a" but not 'a" ?
09:12 < risto_> any information about express 3.0 and socket.io sessions ?
09:12 < risto_> blog articles 
09:20 < risto_> @uptime
09:20 < Miska>  12:17:43 up 4 days, 18 min,  0 users,  load average: 0.00, 0.04, 0.05
09:23 < sinclair> hey guys, if i have 2 node applications, which both start listening on port 80, how can i have them share the same port?
09:23 < bid> dont think you can
09:23 < rounce^work> stick something in the middle
09:24 < rounce^work> then reverse proxy so that urls are domain:80/app1 & domain:80/app2
09:24 < AAA_awright> sinclair: Only one application can listen on a port, like a load balancer or other server, which can then route the request to the appropriate program
09:25 < sinclair> AAA_awright: so, i should load balance with node?
09:25 < AAA_awright> Node.js doesn't do load balancing by itself
09:25 < AAA_awright> I use Nginx, that works well if you serve lots of static files, there's other load balancers written with Node.js itself
09:27 < sinclair> AAA_awright: if i have a CRUD and a socket.io implementation, that both constitute the same application, should i just run the socket.io app on a different port?
09:28 < AAA_awright> I'm not sure how that all works, I think so? Just run it on the same application
09:28 < AAA_awright> * Or just run it on the same application
09:29 < sinclair> AAA_awright: it would be nice to modularize the application, such that i shouldn't need to change the CRUD application to enable a socket.io component of it
09:30 < AAA_awright> sinclair: You should be doing that anyways...
09:30 < sinclair> AAA_awright: on another note, if i have an existing ASP.NET MVC application (80) and i want to augment the application with nodes socket.io, i would need to run that on a different port anyway right?
09:31 < AAA_awright> nodes socket.io?
09:31 < sinclair> AAA_awright: adding socket.io shouldn't mean making any changes to the CRUDs application code
09:31 < sinclair> the socket.io library yes
09:32 < AAA_awright> I'm not sure of the specifics
09:32 < sinclair> well, forgetting socket.io for a second
09:32 < AAA_awright> It's not that difficult to add a socket.io server on top of an existing Node.js application but other than that I'm not sure
09:33 < sinclair> if i have an existing application, and i wish to extend that application with node (a hybrid solution), then i need to be running node on a different port
09:33 < sinclair> AAA_awright: te thing that makes the most sense to me is having multiple node instances built up to constitute the full application.
09:34 < AAA_awright> Not necessarially...
09:34 < sinclair> I can bring up and down components of the application without the need to take the entire application offline, it has BIG benefits
09:34 < sinclair> AAA_awright: what about cluster
09:34 < AAA_awright> You'd do that if you need to split apart the program across different systems
09:35 < AAA_awright> Then you also need to handle downtime when other instances aren't responding
09:36 < sinclair> AAA_awright: the client can handle that
09:36 < sinclair> AAA_awright: i think the term is "a node core" where multiple "cores" constitute the full application, 
09:37 < sinclair> AAA_awright: here... http://nodejs.org/api/cluster.html#cluster_cluster ... The workers can all share the same port
09:39 < sinclair> AAA_awright: with something like this, you could do some form of process orchestration
09:40 < sinclair> AAA_awright: would be awesome
09:40 < sinclair> AAA_awright: but, runs within the same single threaded application
09:40 < AAA_awright> sinclair: A ping the first time after I say something is enough, I get it the first time
09:42 < sinclair> sorry
09:43 < Miska>  12:40:42 up 4 days, 41 min,  0 users,  load average: 0.01, 0.04, 0.05
09:54 < sinclair> AAA_awright: cluster seems pretty good
09:54 < AAA_awright> Well then use it?
09:54 < AAA_awright> I don't know how this involves me
09:54 < sinclair> i was talking to you about it
09:56 < aderuwe> g'morning. :) i'm wondering if there exists a way or library to make accessing and modifying a global array (connected users) without having concurrency issues?
09:58 < sinclair> aderuwe: im not sure you need anything
09:59 < sinclair> node is single threaded, multiple clients access a global array should be guaranteed to happen sequentially , although others here might be able to correct me on this
09:59 < aderuwe> aha that's something i misunderstood then
10:00 < sinclair> aderuwe: although, i do wonder about db concurrency 
10:00 < aderuwe> sinclair: ah i just found a s/o post about that :) https://groups.google.com/forum/?fromgroups=#!topic/nodejs/3J2qkfH3U2g
10:00 < aderuwe> uh. not s/o, google groups lol
10:10 < theblackbox> hello all, I'm attempting to utilise socket.io but I can't figure out for the life of me why socket.io.js is not available client side. From the MANY examples I've found it should be made available through the server… so the only thing I could conclude was that it isn't doing this because I'm using testify and not express, but this seems odd and I get no error messages
10:11 < SomeoneWeird> are you using express3?
10:12 < theblackbox> no, restify
10:13 < theblackbox> http://pastebin.ca/2210551
10:17 < stagas> theblackbox: try io.listen(server.server)
10:18 < theblackbox> ...you're kidding me
10:18 < theblackbox> yep, that worked...
10:20 < theblackbox> cheers stagas, that was a wonderful broadside shot. Could you explain the logic? I'm guessing Restify has a wrapper around a traditional http server and socket.io was expecting the latter?
10:21 < stagas> theblackbox: yeap, it should have worked but it seems restify isn't proxying 'request' events https://github.com/mcavage/node-restify/blob/master/lib/server.js#L184
10:22 < stagas> theblackbox: out of curiosity, why aren't you using express?
10:23 < theblackbox> lead developers preference… I'm half tempted to plug express back in, but I've heard there is talk that Restify is super fast and super lean
10:26 < stagas> theblackbox: but not so pluggable and widespread, so you'll be running into these issues often in the future as modules won't be able to "talk" to it out of the box
10:27 < risto_> creating irc bot in nodejs http://veebdev.wordpress.com/
10:27 < risto_> http://veebdev.wordpress.com/2012/09/26/irc-bot-with-node-js/
10:28 < theblackbox> stagas: noted, I'll probably conform to Express as testify is doing nothing that Express can't and proving to be a pain in the arse to boot
10:28 < theblackbox> *restify
10:30 < txdv> risto_: dafuq is wrong with that font
10:31 < risto_> dunno 
10:31 < risto_> any pick ?
10:31 < risto_> picture
10:32 < txdv> there are no spaces between the words
10:33 < txdv> http://tinyurl.com/8bje557 - this looks like one word
10:33 < risto_> ok something wrong with theme font :)
10:54 < Nuck> Why do all Node Version Managers suck?
10:54 < RLa> why they suck
10:55 < Nuck> NVM doesn't support precompiled binaries, Nave lacks support for anything but bash (yuck)
10:55 < Nuck> I like the concept of n, but even it's not perfect
10:56 < RLa> why not just migrate your stuff to current node version
10:56 < Nuck> I do
10:56 < Nuck> Which is exactly why I use a node version manager
10:56 < Nuck> :|
11:01 < SomeoneWeird> <Nuck> NVM doesn't support precompiled binaries < so?
11:05 < rendar> http://channel9.msdn.com/Events/Patterns-Practices-Symposium-Online/Patterns-Practices-Symposium-Online-2012/node-js-on-Azure -- in this video he says that node.js is not still suitable for cpu-bounds apps, such as a video encoder because js is an interpreted language -- but is it true? as far as i know, the v8 enigne compile with JIT the js code..
11:05 < txdv> am i the only one who compiles directly from git master 
11:06 < guor> yes. v8 uses a JIT compiler
11:08 < txdv> rendar: writing all the encoding code in js is insane and slow
11:09 < txdv> but you can integrate already existing fast c/c++ implementation as modules
11:09 < txdv> so writing cpu-bound apps is reasonable with node.js, but writing cpu-bound code in javascript and running in node.js is not
11:10 < NodeX> anyone know what sort of scalablility node will offer a chat app - it's a lightweight chatroom app based on socket.io
11:10 < NodeX> I am trying to work out how many users I can fit into a channel
11:12 < bid> hi, hope you guys can help me, i have a settings question. i install node from source as root. now when i am using ubuntu or any other sudo user i cant see npm or node. what should i do? the node and npm binaries are located in /root/local/bin/
11:14 < bid> when running as a root all works, execpt now i saw that some modules cant be installed as root (like bson: https://github.com/mongodb/js-bson/issues/7)... what should i do? 
11:15 < txdv> why are they located in root/local/bin
11:16 < bid> not sure :( it's just what happend 
11:16 < bid> can i just copy them? 
11:16 < bid> or link them... ? 
11:16 < bid> to /usr/local/bin 
11:17 < txdv> omg
11:17 < txdv> put it whereever you want. just configure with --prefix
11:17 < txdv> than export the path to it into the path variable
11:18 < bid> i see, thanks
11:18 < rendar> txvd: yes i know that, but what about js is not compiled by v8?
11:18 < guor> thats just wrong
11:19 < guor> javascript run by node/v8 is not interpreted
11:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:20 < RLa> i think the main problem with encoding algos is that you have no integers in js
11:20 < guor> well. you got typed arrays
11:21 < txdv> v8 is faster than the python and ruby implementations
11:21 < guor> it's just that encoding videos is solved in C/C++ pretty well, and v8 is not optimized for this sort of stuff yet.
11:21 < txdv> but slower compared to native and java
11:22 < guor> if it turns out that video encoding is a big use case for javascript, im sure every js engine will try to get it more efficient
11:22 < txdv> then freaking use the  the c libs
11:22 < RLa> yeah why not just link to ffmpeg or whatever is used for encoding
11:22 < txdv> except if you want to render in the browser
11:22 < guor> you mean, encode in the browser?
11:22 < guor> there are video decoders in js
11:23 < txdv> DA
11:26 < rendar> txdv: slower than java?
11:26 < txdv> 10 times at least
11:26 < guor> what jvm, javascript vm, and which benchmark?
11:27 < txdv> there is a page doing benchmarks on various algorithms with different languages
11:27 < guor> language shootout?
11:28 < guor> http://shootout.alioth.debian.org/ <-- this one?
11:28 < ag4ve> how would i go about compiling and saving (on the fs or in a db) handlebars templates and then using the compiled version on the client?
11:28 < aandy> guor: how do you figure encoding is a big use case for js? (i'm curious, as i'm a bit worried about parallel/single thread efficiency)
11:29 < guor> aandy: it's not. I was saying that JS engine devs would improve their engines for this use case if it were
11:29 < aandy> ah okay, i misread you, sorry :)
11:30 < aandy> didn't notice the "if"
11:30 < guor> txdv: on that shootout page JS isn't 10x slower than java, in some cases even faster
11:32 < txdv> http://shootout.alioth.debian.org/u32/chartbox.php?s=eNo9jMkNwAAIw1aCkHBMwf7blEpV8%2FHHjuzd6oOzhitYdR06ECtiGqsqY2waPeYPPoQh%2B8wB5xTggoxs05ZT8tXcDx833xf0&m=eNozMlUITi1QMDIwNFIoNTYCABy1A48%3D&w=eNrLSixL9C%2BzAAALFgKg
11:33 < hnan> So I had my questions on SO, http://stackoverflow.com/questions/12600728/ember-handlebars-helper-view-not-updated
11:33 < guor> so like, not "at least 10x"?
11:33 < txdv> video coding is number intensive
11:33 < txdv> it will be at  least 10 times slower in that area
11:34 < guor> it's sort of weird to insist on hard numbers without any evidence but alright...
11:34 < txdv> js has no easy way to - access memory as structures and calculation is slower
11:34 < txdv> while C has an easy access to memory as structures
11:35 < guor> thought you were comparing to java
11:35 < guor> java is also a VM language
11:36 < guor> that shares many of the drawbacks of js
11:36 < txdv> java has structures, but I don't know if it has memory mapping to structures
11:36 < RLa> in c you can use simd
11:36 < txdv> .net can do that
11:36 < RLa> that should give a lot speedup
11:37 < txdv> do you really want to do video encoding in the browser?
11:39 < guor> http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=java&lang2=v8 <-- I guess this summarizes it pretty much: java is usually faster than js, but also usually way more verbose
11:40 < guor> but video encoding in javascript really makes not much sense
12:05 < ashr> noob question
12:05 < ashr> say my module is ass.js
12:05 < ashr> inside ass.js i have two exports
12:05 < ashr> export.foo = function()
12:05 < ashr> export.bar = function()
12:05 < ashr> but i wanna call bar inside foo
12:05 < BennyLava> DAT ASS
12:05 < ashr> :)
12:05 < ashr> can i do this without passing in the module to foo ?
12:05 < ashr> atm im doing export.foo = function(instanceofass)
12:06 < ashr> it works but i feel dirty
12:08 < Industrial> ashr: define the functions before exporting them e.g. exports.foo = myFooFunc;
12:08 < ashr> ta Industrial 
12:08 < ashr> realised as i typed this
12:08 < ashr> facepalmed a bit
12:08 < Industrial> :F
12:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:41 < foobah> hello people! what is the accepted way of writing cross-compatible scripts (both node and CLI) that leverage native extensions in node?
12:42 < Ralt> cross compatible? cross what?
12:42 < mursalat> hi guys, i keep getting Object has no method "emit"
12:42 < mursalat> problem
12:42 < mursalat> you can get a look at the code and the problem at http://pastebin.com/pMeahr6P
12:42 < Ralt> mursalat: probably because your object doesn't have the emit method
12:42 < BennyLava> ^
12:42 < foobah> Ralt: meaning that i want to be able to use it both in node and in a regular javascript client
12:42 < foobah> *web browser
12:42 < BennyLava> that is my professional opinion too.
12:43 < foobah> in context im doing some heavy math stuff, so i want a native version for node (built in C)
12:43 < foobah> and a web browser version that falls back on javascript implementations
12:43 < Ralt> native extensions can't be used in the browser
12:43 < Ralt> oh :)
12:43 < foobah> thats a given Ralt 
12:43 < mursalat> :D no sh*t sherlock.. but am a noob at node, just got into it today, and i am not exactly sure what i am doing wrong
12:43 < Ralt> wait a minute
12:44 < BennyLava> mursalat: who says you're doing something wrong? Aside from calling a method that doesn't exist, obviously.
12:44 < Ralt> foobah: http://stackoverflow.com/a/11602245/851498 look at the end, there's the example
12:44 < mursalat> i am using a node-varnish in order to work with it, since its a somewhat well tested library, i am forced to think that its my problem 
12:45 < mursalat> i am following some example by the dudes who released the varnish-node module
12:45 < anarchist> https://github.com/digitalbazaar/payswarm.js/blob/master/examples/publish-asset-for-sale.js http://payswarm.com/minutes/2012-08-07/ is anybody here able to get this script to work? it's for http://payswarm.com
12:45 < mursalat> BennyLava and when i run the example i get this error 
12:45 < bnoordhuis> mursalat: check varnish_client.js, line 27, see what it calls
12:46 < anarchist> i'm getting this error: TypeError: Cannot read property 'id' of undefined { stack: 'TypeError: Cannot read property \'id\' of undefined\n    at assetRegistration.run.async.waterfall.listingUrl (/root/payswarm.js/examples/publish-asset-for-sale.js:103:35)\n    at async.iterator.fn (/root/payswarm.js/node_modules/async/lib/async.js:517:34)\n    at async.waterfall.wrapIterator (/root/payswarm.js/node_modules/async/lib/async.js:441:34)\n
12:46 < anarchist>     at process.startup.
12:46 < foobah> but especially if the dependencies are deep, id have to cascade that conditional logic all the way up to the top
12:46 < mursalat> bnoordhuis so its a bug in the code?  btw the file is at https://github.com/Vizzuality/node-varnish/blob/master/lib/node-varnish/varnish_client.js
12:47 < bnoordhuis> mursalat: apparently
12:47 < mursalat> bnoordhuis: sweet, i am not as stupid as my mom calls me, take that mommy
12:48 < bnoordhuis> mursalat: you may have to call new VarnishClient()
12:48  * bnoordhuis doesn't know CS syntax that well
12:49 < risto_> wow many people use coffescript
12:49 < wiherek> I need to do a foreach loop but have to wait for a callback before handling the next element
12:49 < mursalat> i am crap at it
12:50 < wiherek> can I do that with foreach?
12:50 < theblackbox> recursion?
12:51 < mursalat> *mursalat swears eternal loyalty to bnoordhuis, thnx to fixing the problem with new part*
12:51 < mursalat> shit, am still crap at IRC stuff
12:52 < foobah> its /me
12:52  * foobah slaps mursalat with a used condom
12:52 < foobah> like that
12:53 < tasslehoff> I'm trying to use node-zipstream to serve a zipped folder to a browser. Example usage: https://gist.github.com/3787795. How do I modify this to make the stream go to the http response instead of to a file on disk?
12:53 < tasslehoff> given that I have a res-object to play with, of course
12:53 < mursalat> how do i ddo the somebody does something in irc?
12:54 < mursalat> foobah: answer me, you have to, dont abandon me
12:54 < jareiko> foobah did answer you
12:54 < mursalat> ohhh
12:54 < mursalat> sorry, just noticed
12:54  * mursalat is an awesome dude, with a terrible attention span
12:55  * mursalat love mursalat
12:55  * mursalat sitting on a tree
12:55 < mursalat> okay, practice makes perfect
12:55  * foobah loves mursalat up the rear
12:55 < theblackbox> calm down
12:56 < foobah> its 9 am here and ive been sitting in the service station for an hour, this is the thing keeping me sane
12:56  * mursalat politely declines foobah, and makes love even better
12:57 < mursalat> where are you from?
12:57  * foobah is from planet earth
13:01 < foobah> anyone familiar with express?
13:01 < wingy> isn't node the best thing this century
13:02 < qballer> wingy,  I don't know it's good for the web development.
13:02 < wingy> its the best for web dev
13:03 < qballer> It's awesome, but the Internet probably had a bit more affect :)
13:03 < ofaqfsaf> hi
13:03 < ofaqfsaf> http://pastebin.com/raw.php?i=ytbR8s9w what may be the error
13:04 < ofaqfsaf> it works on local win machine :/
13:07 < ashr> is there a mysql server on the host you're deploying on ?
13:08 < qballer> so any interesting bugs people are working on, inside node core?
13:08 < ofaqfsaf> ashr: yes and its running
13:09 < ashr> ok :)
13:09 < foobah> the biggest bug of all: that node exists lol
13:10 < context> burn!
13:10 < SomeoneWeird> lol
13:10 < pachet> you're the burn master
13:11 < foobah> dumb javascript question: if i have an associative array, how do I pull the keys?
13:11 < foobah> do i need to just iterate or is there a method like python's .keys()
13:11 < BennyLava> JS doesn't have associative arrays
13:11 < BennyLava> Did you mean object?
13:11 < pachet> Object.keys()
13:11 < ofaqfsaf> Objct.xx.keys()
13:12 < BennyLava> s/\.xx//
13:12 < foobah> so when i write something like x["abc"] = 1 is that equivalent to x.abc = 1?
13:12 < pachet> yup
13:12 < ofaqfsaf> yes
13:12 < foobah> (that is, that they are fields in an object)
13:12 < foobah> ah ok
13:12 < pachet> well, fields? it's a property on the object
13:13 < BennyLava> aka field
13:13 < BennyLava> ..
13:13 < ofaqfsaf> mysql  ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES) 
13:20 < jpdery> morning
13:21 < jpdery> does anyone knows a webserver app written in nodejs that supports file listing ?
13:21 < ofaqfsaf> you could read dir
13:21 < ofaqfsaf> its not too hard :p
13:28 < mikrowelt> hey guys sup? )
13:28 < mikrowelt> isaacs, o/ <3
13:30 < havoc74> Good Morning everyon!
13:31 < mikrowelt> Guys plz help me... im having an isue with nodejs+scoket.io+express setup.... everything i try that i can find on google fails... so what i do is install node (from git) ... 'npm install express socket.io' in my app dir... then i go to http://socket.io/#how-to-use and there is tour how to use it with express 3 .... i copy/paste and get this error all the time.... http.js:644     throw new Error('Can\'t set headers after they are se
13:31 < mikrowelt> plz guys help... google doesnt know nothing about this issue...
13:32 < mikrowelt> im googleing it like for week already
13:32 < aandy> mikrowelt: if you paste the stack on pastebin (we didn't get it all) we'll might be able to help
13:32 < mikrowelt> sure hold on a sec
13:33 < havoc74> I have a newb question: Using the http module, I have set up a simple web server requesting an email. An external program then takes that email and validates it. The problem is, I can't figure a simple way of converting the %40 back to @ - as the external program isn't recognizing it as a @. Any suggestions?
13:33 < mikrowelt> http://pastebin.com/35a47nz2
13:33 < aandy> havoc74: decodeURIComponent("%40") gives @
13:34 < havoc74> aandy: YOU ROCK, ty
13:35 < aandy> mikrowelt: can you paste the complete error aswel (the one containing http.js:655 throw new...)
13:36 < mikrowelt> sure hold on a sec
13:36 < mikrowelt> http://pastebin.com/V94idP0w
13:37 < mikrowelt> and i think im not the only one having this issue.... im like using last version of node... and using npm install
13:38 < SomeoneWeird> it's something that sendfile does
13:39 < mikrowelt> this guys having the same issue
13:39 < mikrowelt> http://stackoverflow.com/questions/11801882/node-js-express-3-socket-io-cant-set-headers-after-they-are-sent
13:41 < aandy> mikrowelt: does this give you the same error? http://pastebin.com/k7Rvn0tE
13:41 < aandy> whoops, add fs = require('fs'); on top of that btw
13:42 < aandy> http://pastebin.com/UXGB6xjA
13:43 < mikrowelt> aandy: yeap
13:43 < mikrowelt> same one
13:44 < mikrowelt> i think this problem becouse of versioning... i think i have to downgrade something... node or express
13:44 < aandy> are you using the "right" version of express?
13:44 < mikrowelt> npm install express
13:45 < mikrowelt> is that ok version? )
13:45 < aandy> there's a express 2 and 3, and they're not too similar. there's also distinct examples for each on #how-to-use-node
13:45 < mikrowelt> so i should use express 2?
13:45 < mikrowelt> or 3?
13:46 < aandy> you probably have 3
13:46 < Appineer> mikrowelt you can type express --version to find the version you have
13:47 < mikrowelt> aandy so i should try using 2.0? yeah i got 3.0rc4
13:47 < SomeoneWeird> no 3 is better
13:48 < mikrowelt> SomeoneWeird: may be ) but i cant make work correctly )
13:48 < SomeoneWeird> not sure then, i've never had any trouble with it
13:49 < mikrowelt> SomeoneWeird: try using socket.io with it... )
13:49 < Appineer> mikrowelt someoneweird: 3 is better but it is also new. If you need help, it might be easier to find with 2.
13:49 < SomeoneWeird> i do mikrowelt..
13:50 < mikrowelt> SomeoneWeird: ... im know im noob... but i really use like git clone(nodejs) npm install socket.io npm install express... i take the code from socket.io web page... and i get the same error all the time
13:51 < mikrowelt> SomeoneWeird: i think its really hard to mess up with this 4 steps mate
13:52 < `3rdEden> mikrowelt: can you gist your code?
13:52 < mikrowelt> SomeoneWeird: i tried google for like 4-5 days of googlin it tryied differnt codes... and nothing helped me(( i just copy paste others ppl code
13:52 < `3rdEden> That way we don't have to guess how you implemented but can actually see it
13:52 < `3rdEden> implemented it*
13:52 < mikrowelt> `3rdEden: http://pastebin.com/UXGB6xjA
13:52 < `3rdEden> mikrowelt: what is the output when you start your server?
13:53 < mikrowelt> `3rdEden: express 3.0.0(npm install) , latest node form git and latest socket form npm install
13:53 < `3rdEden> do you see starting socket io etc?
13:53 < aandy> mikrowelt: to answer your previous question, yes it's that "easy" to mess up when you don't read the 4 step instructions :)
13:53 < benDos> Is there a network safe way to send extended unicode strings?
13:53 < mikrowelt>   home# node game    info  - socket.io started 
13:53 < benDos> I tried buffer but was havn't some issues json-ing that back and forth
13:54 < `3rdEden> mikrowelt: If you got node from git, you are probably using an unstable version
13:54 < ofaqfsaf> for (i = 0; i < 100; i++) { if(i%10) {  console.log("Hi>"+i); } }
13:54 < `3rdEden> I would really suggest using a stable version of node instead of a git / mster build
13:54 < ofaqfsaf> it works on every for
13:55 < mikrowelt> `3rdEden: can you advice me what should version i use?
13:55 < `3rdEden> mikrowelt: unless you checked out a stable version of course.. 
13:55 < gildean> mikrowelt: i don't think you can use the same server on the socket.io instance as the static web-page
13:56 < `3rdEden> mikrowelt: v0.8.9
13:56 < `3rdEden> as there is a small bug in v0.8.10
13:56 < gildean> mikrowelt: iirc you need a separate server for the socket.io to use
13:56 < mikrowelt> i got 0.9.3
13:56 < `3rdEden> if you still have your git repo you can just do git checkout v0.8.9
13:56 < mikrowelt> gildean: i do it with my nginx
13:56 < `3rdEden> yeh that's unstable, and probably the reason why it's failing
13:57 < mikrowelt> `3rdEden: if it will help ))) 
13:57 < mikrowelt> man ill try tnx alot
13:57 < mikrowelt> i pray god that this will help me
13:58 < `3rdEden> *crosses fingers* :)
13:58 < mikrowelt> ^^
13:59 < mikrowelt> guys did you see the video on youtube "Node.js is a big lie"?
13:59 < gildean> mikrowelt: nginx doesn't support websockets ootb
14:00 < mikrowelt> gildean: im not good at english but... its works for me)
14:01 < mikrowelt> gildean: socket.io + node works perfect... but when i plug in express... all stops working
14:01 < mikrowelt> gildean: node.js just passes me index.html... a nginx all other files from a seperted dir and port
14:05 < plato> mikrowelt: express 2.x and express 3.x are used differently with socket.io, make sure you are using the right one
14:05 < `3rdEden> he's using the right one ;p
14:06 < plato> nginx is getting in the way of the socket.io.js request?
14:07 < mikrowelt> plato: yeah i know that i found only 1 article how to this with express 3 but it gave the same error.. i know everything about this if its written in google )
14:07 < mikrowelt> plato: anyway i got some solution and im trying right now hope it wors tnx to `3rdEden 
14:10 < Industrial> I have a bit of a problem. I'm using handlebars templates on the server, but now that I want to play with Ember.js a bit, which also uses handlebars templates but for the client, I find myself embedding client handlebars code in server handlebars code, and the server handlebars doesn't like it. Can I get it to ignore parts of the template?
14:25 < ag4ve> how do i pass compiled templates into pages? should i just make an ajax call or is there a way to embed them into otherwise plain html pages?
14:47 < SoulRaven> hello
14:47 < benDos> Hi
14:47 < SoulRaven> please help me with something strange, i have this code: http://bin.cakephp.org/view/844519632
14:48 < SoulRaven> the problem when the callback is made from query, the row var is not populated with the new value
14:48 < benDos> I don't think that code is right
14:48 < benDos> js usualy should end with a semicolon
14:48 < benDos> nor am i familiar with the http:// syntax
14:48 < SoulRaven> remains with the default value
14:48 < Reko> Are there any make-like build systems which are actuable both by command line and Connect middleware?
14:48 < Reko> i.e., on demand.
14:49 < SoulRaven> any ideea way the row var is not populated with the new value, when the callback from the query is made?
15:01 < NodeNewbie> So - question about client certificates, websockets, and node v0.8.9 - It seems that if I turn on rejectUnauthroized:true - that any access of the https server with a client certificate works fine. However, with ws, websocket, or socket.io - they all fail with "socket hung up" or connection reset. Seems something down in TLS.js is barfing on an SSL3 error about "Get peer certificate".
15:03 < NodeNewbie> anyone out there?
15:08 < NodeNewbie> So - question about client certificates, websockets, and node v0.8.9 - It seems that if I turn on rejectUnauthroized:true - that any access of the https server with a client certificate works fine. However, with ws, websocket, or socket.io - they all fail with "socket hung up" or connection reset. Seems something down in TLS.js is barfing on an SSL3 error about "Get peer certificate".
15:09 < bradleymeck> NodeNewbie: sounds like you don't have your CA included with your cert
15:10 < NodeNewbie> You would think but here is an excerpt: var options = { 	passphrase: 'password', 	key: fs.readFileSync('ssl/server-key.pem'), 	cert: fs.readFileSync('ssl/server-cert.pem'), 	ca:     [fs.readFileSync('ssl/ca1-cert.pem')], 	requestCert:        true, 	rejectUnauthorized: true }; options.agent = new server.Agent(options);
15:10 < draginx> Is there a way to see if your app has any memory leakage?
15:11 < NodeNewbie> And if I use just a regular HTTPS request - it works great
15:11 < NodeNewbie> its only when I try to use any of the websocket stuff that the connection dies
15:12 < NodeNewbie> draginx: this is just a testing framework to see if I could get client certs working with websockets - its not up long enough to have memory leaks
15:12 < draginx> NodeNewbie: My problem !+ yours
15:12 < draginx> !=*
15:13 < Appineer> draginx Not that I know of. Best I know is manually go through your code an null out functions when you're done with them so memory can be reclaimed.
15:13 < draginx> null out functions?
15:13 < Appineer> set functions or objects to null... e.g. func = null;
15:15 < DissidentRage> Just to check: to use Node.js you have to create a server from scratch?
15:16 < niggler> DissidentRage: no
15:17 < draginx> Appineer: ah ok thanks
15:19 < DissidentRage> OK, because I was trying to figure out how to use SSJS with an Apache server but everything seemed to involve creating a Node.js server
15:25 < gildean> DissidentRage: it's usually easier to just create the server with node
15:29 < spion> the "from scratch" part isn't as scary as it looks :)
15:57 < rudiX> hello noders
15:57 < rudiX> I got problem installing libxml 
15:57 < rudiX> https://gist.github.com/3788844
15:59 < rudiX> libxml-devel and libxml2* are installed
16:01 < DissidentRage> "it's usually easier to just create the server with node" - I am a web developer, not a server manager
16:01 < RLa> go back to php
16:01 < plato> rudiX: i tried installing, it worked for me
16:02 < plato> DissidentRage: what do you want to do with node?
16:02 < DissidentRage> SSJS
16:02 < plato> sorry, never heard of that
16:02 < DissidentRage> server-side javascript
16:02 < plato> server side java script maybe?
16:02 < rudiX> plato: it works on my localhost "ubuntu" too ... I am missing some packages on this new fedora server
16:02 < rudiX> cp: cannot stat `build/Release/o3.node': No such file or directory
16:03 < plato> DissidentRage: node works fine without running a web server, you can code whatever you want in it
16:03 < RLa> server side javascript says nothing, it's very broad
16:03 < DissidentRage> If I wanted to recreate the wheel I'd make a web server in C
16:03 < plato> install node
16:03 < plato> type node at command line
16:03 < plato> now you are in an interactive node console
16:03 < plato> you can choose to create a web server with it, or do wahtever else you want to do with it
16:03 < deoxxa> DissidentRage: require("http").createServer(function(req, res) { res.end("HI THERE"); }).listen(3000)
16:03 < deoxxa> DissidentRage: that's a little more succinct than c
16:04 < DissidentRage> deoxxa: and it side-steps my point
16:04 < plato> DissidentRage: you aren't asking a question
16:04 < DissidentRage> ...
16:04 < plato> node IS server side javascript
16:04 < deoxxa> ^^ this
16:04 < deoxxa> node is an i/o framework really
16:04 < deoxxa> it makes network things really easy
16:05 < deoxxa> http is a subset of network things
16:05 < deoxxa> and it definitely makes http easy
16:05 < DissidentRage> Alright, so if I wanted something where accessing a file with a certain extension causes the server to handle said file as server-side Javascript...
16:05 < DissidentRage> with an already existing web server
16:05 < DissidentRage> then..?
16:05 < niggler> how does node + express handle multiple clients?  what variables are local and what are 'global'?
16:06 < plato> DissidentRage: so you want to use node for scripts instead of php, cgi, etc? and apache sees a particular request, fires up node, node sends a response?
16:06 < DissidentRage> bingo
16:06 < RLa> i think he wants php but with js
16:06 < deoxxa> DissidentRage: that's not how node works - you'd have to do some work to get it to "execute" a file on each request
16:06 < deoxxa> DissidentRage: you could, however, proxy to a node process with another web server. that's done quite commonly.
16:06 < DissidentRage> I haven't found anything that works like that... the few projects I've found "exist" as theoretical but with no available source or binaries
16:07 < plato> niggler: every request that comes in - no matter which client - is unique and is handled separately. you can use the session middleware to maintain state for each individual client.
16:07 < plato> deoxxa: couldn't you have apache spawn, e.g. node handle-task-a.js
16:07 < RLa> DissidentRage, i think v8cgi works like that
16:07 < deoxxa> plato: you'd have to implement cgi or something, i guess
16:07 < janmower> fastcgi + nodejs?
16:08 < RLa> DissidentRage, why you want such architecture
16:08 < deoxxa> DissidentRage: you have to realise that if you're spinning up node for every single request, and using a single process for each request, you're throwing away most of the cool parts of node
16:08 < DissidentRage> RLa: Because I've been becoming less content with PHP
16:09 < deoxxa> DissidentRage: it's equivalent to physically turning on a server for each http request and turning it back off when it's done
16:09 < RLa> DissidentRage, that's quite limiting
16:09 < deoxxa> DissidentRage: i.e. it's possible, but it's far from optimal or easy
16:09 < DissidentRage> I'd also like things like being able to access the DOM of a file on the server without having to read it into a DOMDocument which re-outputs a distorted version of the HTML
16:10 < tommydudebreaux> DissidentRage: Sounds like a better options would be having a node server and use a reverse proxy to eval the script and stream back the output.  yes?
16:10 < DissidentRage> RLa: I don't want something low-level. If I did I'd do it with C. :p
16:10 < RLa> it's hardly low-level
16:10 < tommydudebreaux> DissidentRage: Are you trying to mirror a single page app on the server?
16:10 < DissidentRage> Reinventing the wheel is lower-level
16:10 < tommydudebreaux> trying to get an idea of context.
16:11 < RLa> and having random js files scattered around being used as url handlers leads to messy stuff
16:11 < DissidentRage> tommydudebreaux: Some pages could use a single page, or just turn certain elements on or off
16:11 < tommydudebreaux> +1 to what RLa says
16:11 < RLa> well, you are reinventing php in node
16:12 < ag4ve> if i wanted to reinvent the wheel, i'd make a web server using cobol on cogs :)
16:12 < DissidentRage> PHP = language, Javascript = language
16:12 < ag4ve> php != node
16:12 < plato> DissidentRage: without further details of what your website does, i would advise you to take a look at the Express framework, it is pretty damn easy to get express to serve up a bunch of static content and use SSJS to dynamically handle particular url's
16:12 < deoxxa> php = language and a huge retarded standard library
16:12 < DissidentRage> ag4ve: duh.
16:13 < ag4ve> actually, that should be: php !== node
16:14 < plato> moving your whole project isn't 'reinventing the wheel', it's migrating from wheels to hovercars
16:14 < ag4ve> if all you want to do is serve up static files and handle partial urls, why not use nginx?
16:14 < DissidentRage> recreating a web server from scratch just to use a language is reinventing the wheel
16:14 < deoxxa> DissidentRage: you're not recreating a server
16:14  * plato facepalms
16:14 < plato> gl!
16:14 < tommydudebreaux> DissidentRage: I think you should start by keeping node running so it is ready when you need it.  It is much more lightweight than a threadpool..  Otherwise, you are looking at something like exec() which is not a good idea.
16:15 < DissidentRage> So the code you gave me earlier to handle an HTTP request
16:15 < DissidentRage> was not making a server
16:15 < deoxxa> DissidentRage: ... you're seriously comparing that to writing an http server implementation in c?
16:15 < tommydudebreaux> DissidentRage: I think the term server is confusing you.  The server is just setting up a network listener..
16:15 < deoxxa> DissidentRage: troll harder
16:15 < Sly> deoxxa, <3
16:15 < deoxxa> Sly: queensland, by the way
16:15 < Sly> Queensland? O_o
16:15 < DissidentRage> deoxxa: versus routing a request for a file to a handler which parses it out, YES.
16:16 < deoxxa> Sly: you asked me where i was from
16:16 < Sly> Ah, right.
16:16 < deoxxa> Sly: like 5 days ago
16:16 < deoxxa> haha
16:16 < Sly> rofl
16:17 < deoxxa> DissidentRage: until you read the front page of http://nodejs.org/ you're not going to have a great time
16:17 < DissidentRage> deoxxa: I read the front page, which is why I find it so frustrating
16:18 < DissidentRage> v8cgi looks closer to what I was looking for
16:19 < tjholowaychuk> cgi is terrible ;)
16:20 < substack> fact
16:20 < DissidentRage> yeah well, until you give me something more concrete that doesn't require setting up a new listener... :p
16:20 < substack> although it's neat that POST/PUT is a stream on stdin
16:20 < substack> only nice part about it
16:21 < substack> statelessness makes me :(
16:21 < ag4ve> DissidentRage: from what i know, you can use perl's net::server, cobol's cobol on cogs, ruby's rack, python's pylons, or node's http - choose
16:22 < ag4ve> ... idk c, so i'd be hard pressed to find a framework there
16:22 < jocafa> use them all, simultaneously!
16:22 < ag4ve> yeah, and use fleet.js to manage them
16:24 < ag4ve> ooh, smalltalk also has an awesome http server ... damn, forgot what it was :(
16:25 < substack> ag4ve: so fleet is going to get a lot better very rapidly now that I'm actually using it in production finally
16:26 < substack> although only testling is ported over, not browserling yet
16:26 < jocafa> this is relevant to my interests.
16:26 < ag4ve> substack: that's cool. i looked at it and it looked like the thing to use but i haven't needed it yet
16:28 < substack> ag4ve: well if you have a lot of inter-related processes it can be quite handy
16:28 < substack> if you write lots of little services instead of heavier single services
16:30 < jocafa> substack:  that's how we roll at work :)
16:30 < jocafa> but it's all ruby at the moment. everything communicates with protobuf
16:30 < substack> not bad
16:30 < jocafa> but dang i loves me some service-based architecture!
16:31 < substack> jocafa: register them with seaport!
16:31 < jocafa> i was up til like 2 working on node protobuf stuff last night
16:32  * jocafa falls asleep on keyboardddddddddddddddddddd
16:32 < substack> it's such rubbish how all my favorite libs have such little attention
16:32 < larryapplegate> I'm looking for a collaborator on an IOS to Node project. I learn Node, you learn IOS
16:32 < substack> http://npm-stat.vorb.de/charts.html?package=mux-demux
16:33 < substack> at least JSONStream is a bit better http://npm-stat.vorb.de/charts.html?package=JSONStream
16:33 < jocafa> what the… wayyyyyyy more downloads than i expected for Nonsense :)
16:34 < jocafa> http://npm-stat.vorb.de/charts.html?package=Nonsense
16:36 < plato> hey larryapplegate, still looking?
16:36 < larryapplegate> yes
16:37 < plato> i'm not able to tackle iOS right now... but you should be able to work with node independently of client architecture especially if you make your node server use a REST api... then it's just http calls from your iOS client to do stuff
16:37 < plato> are you planning to convert your existing project to node or make a new one?
16:37 < larryapplegate> yes, that's what i want to do
16:38 < larryapplegate> I'll start with a new one, first step just with a simple apple sample code project
16:38 < plato> have you looked at Express yet? its a pretty simple webserver for node. lotta fanbois here myself included
16:39 < larryapplegate> it was on my list, already recommended
16:53 < michaeljoser> morning
16:54 < michaeljoser> wondering if anyone having problems with socket.io with chrome and firefox x64 version
17:03 < mc> can you pass parameters to the npm start command?
17:14 < SoulRaven> is posiibile to make a function like this, http://bin.cakephp.org/view/50308964 to act as a sync function?
17:15 < SoulRaven> and return the value sync?
17:16 < SoulRaven> anyone?
17:17 < SoulRaven> nobody?
17:17 < deviantgeek> whats the bug on 0.8.10?
17:19 < chrisjaure> https://groups.google.com/forum/#!msg/nodejs/udqSi9liP2o/t2kUFB73OukJ
17:20 < CoverSlide> yes, wait until 8.11
17:22 < deviantgeek> is it just with fs.stat? 
17:28 < CoverSlide> yeah, and only on files > 1GB
17:28 < deviantgeek> well, thats not a big problem for me, so ill risk it for now since they put some new TLS stuff in it
17:32 < bradleymeck> anyone got a good idea why function f(){return {}}; function () {return 1;} act differently with return values if I use the new operator?
17:35 < CoverSlide> bradleymeck: stupid ES5 thing. basically, when you use new, you need to return an object, or else it returns the `this`
17:38 < tnorris> the new openssl asm changes are freaking awesome.
17:38 < bradleymeck> indutny++
17:39 < CoverSlide> do we have benchies?
17:40 < astropirate_> what is a benchie? sounds like a STD
17:41 < TooTallNate> node/bechmark/
17:41 < tnorris> CoverSlide: sha512 is 4 times faster
17:42 < CoverSlide> sweer
17:42 < CoverSlide> has the buffer crypto stuff landed yet?
17:42 < TooTallNate> CoverSlide: in master
17:42 < CoverSlide> ah wells
17:42 < TooTallNate> API changes nd all ;)
17:43 < SoulRaven> is posibile to make a function like this, http://bin.cakephp.org/view/50308964 to act as a sync function?
17:43 < SoulRaven> and return the value sync?
17:43 < CoverSlide> anything going over the network has to be async
17:44 < CoverSlide> that includes database stoof
17:44 < kuja> Why do you need it to be synchronous?
17:44 < CoverSlide> because he doesn't know how to structure his code otherwise
17:44 < SoulRaven> and how i return a value from DB, and in the same time to check that value outside the async method?
17:44 < jocafa> that's something i've been wanting to work on:   some sort of benchmarking utility that gets run with every release and then checks the results into a git branch and then can later be analyzed/graphed/whatever
17:44 < jocafa> would be teh secksy
17:45 < danheberden> SoulRaven: think of it like leaving your number with a hot person at a bar; you gotta wait for them to callback
17:45 < CoverSlide> SoulRaven: two options, use a flow control module, like async, or roll your own and use counters
17:46 < kuja> danheberden: From a man's perspective isn't it usually the other way around?? :P
17:46 < SoulRaven> i just start using node 5 days ago:)
17:46 < danheberden> kuja, depends?
17:46 < kuja> SoulRaven: Avoid synchronous code
17:46 < danheberden> i get callbacks? :/
17:46 < CoverSlide> SoulRaven: http://callbackhell.com/
17:47 < CoverSlide> SoulRaven: http://docs.nodejitsu.com/articles/getting-started/control-flow/how-to-write-asynchronous-code
17:47 < CoverSlide> read these
17:47 < SoulRaven> thx:)
17:47 < mike-d> SoulRaven: if you have time, you might try writing an async module, it's a great learning experience… I did this when I needed series/parallel database loading but it's general purpose
17:48 < mike-d> SoulRaven: the mechanics are pretty simple
17:48 < SoulRaven> ?
17:48 < CoverSlide> I find with flow control, my needs change often, and while using counters and stuff is ugly and verbose, it does exactly what I need it to do
17:49 < CoverSlide> isaacs had a nice tutorial on writing a flow control module
17:49 < CoverSlide> lemme find it
17:50 < danheberden> CoverSlide: i prefer deferreds instead of counters, as I can nest actions 
17:50 < danheberden> pipe actions, as well as group actions
17:54 < CoverSlide> SoulRaven: http://howtonode.org/flow-control-in-npm << this one too
17:55 < naomi> can someone help me understand how to process/mutate stream data before piping it off to a destination? http://stackoverflow.com/questions/12607502/how-to-process-a-stream-using-node-js
18:03 < tnorris> naomi: writing up some code. give me a few.
18:04 < naomi> tnorris: thank you :)
18:08 < naomi> tnorris: sorry, i have to leave, but i will be back later; thank you for your help :)
18:09 < tnorris> np, just writing up an explanation now
18:31 < Vendethiel> Hi - anyone using stylus here ? 
18:33 < RLa> well, i am
18:33 < Vendethiel> I couldn't find any IRC channel or anything (I don't think there's)
18:34 < Vendethiel> the problem is that my code, which compiles correctly on "try stylus online" fails with node
18:35 < deviantgeek> for express, how do i set a callback for app.listen()?
18:36 < mikrowelt> o/ all
18:36 < deviantgeek> nvm
18:36 < deviantgeek> figured it ouw
18:36 < deviantgeek> *out
18:52 < tjholowaychuk> deviantgeek same way as node
18:58 < aandy> hey, for express3, are the app variables (app.set/get) available in routes (req, res), or do you typically share resources (like a db connection) another way?
18:59 < mscdex> aandy: it should be available by scope if you don't have your handlers in a separate file
19:00 < aandy> mscdex: i do so i guess i should make a wrapper for each of those files (like, require('./routes')(shared_resource)) ?
19:01 < aandy> i mean, that's slightly better than using global, right?
19:01 < mscdex> aandy: or attach the app object to req in a middleware
19:01 < mscdex> if it isn't already there
19:01 < mscdex> i haven't used express in awhile
19:02 < aandy> mscdex: ah right, middleware of course. i'm still new to the express framework, so wasn't thinking about that :)
19:02 < aandy> thanks
19:06 < edsu> if i have node in a non standard place, and i want to npm install something that needs node header files, is there an option to pass to npm to tell it where that directory is? or is it needed?
19:15 < plato> LOL
19:15 < plato> typeof parseInt('a') returns 'number'
19:15 < plato> realy?
19:15 < plato> typeof NaN is the same
19:17 < othiym23> anybody got a reliable method for figuring out why a Node 0.6 server isn't shutting down / returning to the command line?
19:18 < othiym23> under 0.8 I can take a look at process._getActiveHandles() and see if there are any timers I need to clear, but that doesn't seem to be available in 0.6
19:30 < othiym23> man, node-tap is hellaciously sensitive to what version of node you're using to run it
19:30 < etcetera> aside from coffeescript is there an alternate way of writing javascript that also allows for debugging?
19:31 < CoverSlide> the best way to write javascript ...
19:31 < CoverSlide> is to write javascript
19:31 < CoverSlide> ^ truer words have never been spoken
19:31 < aandy> did you just confirm your own statement?
19:32 < aandy> :)
19:32 < CoverSlide> aandy: you tell me
19:33 < aandy> but yeah I thoroughly agree with you. i've actually used coffee on/off for some time, and a lot lately. mainly for my own convenience, but i will give it one plus: it teaches "better" javascript to mediocore/novice
19:33 < aandy> as in, when comparing the compiled version, you just might learn something
19:33 < aandy> other than that's, it's purely sugar, and should be treated as such
19:33 < aandy> that*
19:33 < chapel> "the best way to write javascript … is to write javascript" - CoverSlide
19:33 < aandy> ;)
19:34 < plato> guys, ##javascript was just helping me with something and now i am confused as balls
19:34 < chapel> aandy: I can confirm that reading the compiled javascript from coffeescript can teach you things
19:34 < aandy> plato: not uncommon in irc helpchans :) what's the issue?
19:34 < plato> if i type in node console var n = "10".match(/^\d+$/) it returns undefined
19:34 < chapel> aandy: but so can reading good code
19:35 < plato> if i type n, it returns [ '10', index: 0, input: '10' ]
19:35 < tnorris> plato: using 'var' will always return undefined.
19:35 < plato> if i type JSON.stringify(n) it returns '["10"]'
19:35 < chapel> the cost of adoption and switching in and out for other users/projects not to mention pain in debugging made me stop using coffeescript
19:35 < plato> what is happening to the index and input? 
19:35 < chapel> plato
19:35 < cyberd0m> hey I'm trying to get express-expose to work with express3 but no success so far. I can't even get the example in the repo to work.. any help would be appreciated
19:35 < chapel> because node repl outputs the return value
19:35 < aandy> chapel: absolutely, and i'm not arguing against it. i'm just saying that for me it's purely a matter of: is it convenient for me to use coffee rather than javascript here?. it is only sugar, it's not a new language, and the "docs" also stress that fact on the landing page :)
19:35 < chapel> e.g. return something
19:36 < chapel> plato: so when you do var n = blah
19:36 < chapel> in that case the return is being grabbed by var n
19:36 < aandy> chapel: right, and that's what i mean by convenience. you shouldn't use coffee just to use coffee
19:36 < chapel> (I assume so, there might be something more specific here happening)
19:37 < plato> chapel: it's fine that var n = blah is returning undefined. i am more interested in why console.log(n) and JSON.stringify(n) return different things
19:37 < CoverSlide> matches are arrays
19:37 < chapel> oh
19:37 < chapel> guess I misunderstood your issue
19:37 < CoverSlide> Array.isArray(n) returns true
19:37 < cyberd0m> Or maybe someone knows another library that can expose server-side stuff to the client?
19:37 < plato> CoverSlide: but, is a match an array of length one, or three?
19:38 < plato> [ '10', index: 0, input: '10' ]  vs  '["10"]'
19:38 < CoverSlide> 1
19:38 < chapel> CoverSlide: its technically an object
19:38 < chapel> just behaves like an array
19:38 < CoverSlide> all arrays are"technically" an object
19:38 < chapel> sure
19:38 < CoverSlide> but it's an array, its named constructor is Array
19:38 < danheberden> there is no spoon
19:38 < chapel> but it is modified, not a standard array
19:39 < plato> OK so it is an array with two additional properties .index and .input ?
19:39 < CoverSlide> it has non-array parameters added to it
19:39 < CoverSlide> there's no way to un-array an array
19:39 < chapel> CoverSlide: yeah, sorry, you are right, Array constructor with added elements
19:39 < chapel> CoverSlide: well, you can, but it isn't advised
19:39 < CoverSlide> really confusing ECMA stuff
19:40 < CoverSlide> where arguments is not an array, but regex returns an array with added properties
19:41 < plato> is this node specific?
19:41 < chapel> plato: ecma
19:41 < CoverSlide> i suppose part of it is that you have to implement arguments within Function, whereas Array has to implement Function to exist, you can't do one before the other
19:41 < CoverSlide> plato: no it's standard across all JavaScript implementations, including IE
19:41 < plato> rgr
19:41 < tnorris> was the "arguments not an array" thing done to improve performance by not having to instantiate an entire array object every time a function is called?
19:42 < CoverSlide> probably
19:43 < CoverSlide> but I think more to it, in order to define what array is, you have to define what a function is, and so you have to define arguments on a function before array exists
19:43 < BennyLava> ..
19:44 < CoverSlide> it's probably possible for the engine writers to redefine function to use array after array exists, but I think it's been that way for all platforms it's become standardized. and yeah, performance probably also plays a factor
19:46 < tnorris> hm, interesting. never thought about Array -> Function -> Array loop playing a part. nice insight.
19:49 < rio{> What is the most efficient way of creating a big array?
19:50 < danheberden> rio{: as in an array with a lot of elements or an array full of a lot of big stuff?
19:50 < context> define "big array"
19:50 < CoverSlide> new Array(9999999)
19:50 < rio{> danheberden lots of elements
19:51 < danheberden> CoverSlide: awww, you didn't let me lead into it :(
19:51 < rio{> can I instatiate the elements to a certain value?
19:51 < rio{> 0 for example
19:51 < danheberden> what do you think this is? RUBY?!
19:51 < rio{> CP
19:51 < rio{> ÅCC
19:51 < rio{> ehm
19:52 < danheberden> haha
19:52 < rio{> I was going to write C
19:52 < rio{> :D
19:52 < CoverSlide> well there's the [item1, item2, item3] syntax, similar to C's array initializers
19:53 < DriverDan> npm won't let me authorize but I can log into the website. Anyone around who can help? isaacs?
19:55 < rio{> hmm Buffer has a .fill method.
19:57 < dudes> hey all. can anyone help me figure out organizing modules + database connections?
20:00 < dudes> i'm using the mongdb native js driver for persistence in an app i'm writing, and the guy who wrote that suggested opening 1 connection to the db and using it throughout your app. but that becomes difficult if i write a module that wants to use the db connection established in a different file
20:01 < dudes> is there a common approach to this issue?
20:02 < bradleymeck> dudes, pass around an object, use some sore of Dependency Injection like broadway or go low level with just passing around a shared config
20:03 < plato> dudes, maybe instantiate your object that interfaces with the database and attach it to app, if you don't wanna pass it around
20:03 < plato> foo = require('./mydb.js'); app.mydb = foo;
20:04 < dudes> ahh i see
20:04 < dudes> ok but then
20:04 < aandy> plato: where would you access app in the other files then? is app attached to req/res?
20:04 < dudes> suppose i have a third file "three.js" that needs to use app.mydb. where does it establish a reference to app
20:04 < plato> oic
20:04 < dudes> aandy - exactly my question ;)
20:05 < aandy> dudes: see mscdex' answer to my question (i asked that same thing a short while ago :))
20:05 < dudes> bradleymeck, is that what you meant by pass around a shared config object?
20:05 < plato> in my use case I am passing app (and the db object, for that matteR) to everything i require that needs it
20:05 < aandy> using middleware, but that of course requires that you use express - or implement middleware yourself
20:05 < tommydudebreaux> I vote against middleware
20:06 < plato> how would middleware solve the problem?
20:06 < tommydudebreaux> if you really only want a singel instance, then export the singleton from a module
20:06 < tommydudebreaux> like plato mentioned
20:06 < gildean> aandy: or connect, that's where the middleware comes from
20:06 < bradleymeck> dudes, look at broadway, then whenever you want to introduce a module that needs some sort of shared state app.use(require('thing-using-shared-state')) then using .attach or .init conventions you can get it.
20:06 < tommydudebreaux> +1 for braodway
20:06 < aandy> plato: you can attached it to only the routes you want
20:06 < bradleymeck> its that or you just have your module be a function that takes a config
20:06 < aandy> but right, that wouldn't be a single instance
20:06 < aandy> so of course it depends on your need
20:07 < dudes> bradleymeck: ahh i see. will check out broadway. thanks!
20:07 < plato> i don't understand middleware very well. i thought that middleware in express was always something that took req, res, next objects, did stuff, and called next?
20:07 < tjholowaychuk> plato yeah that's effectively all it is
20:08 < aandy> plato: right, but you don't have to attach it to everything (every request)
20:08 < plato> so, in bradleymeck's example of app.use(require... wouldn't that call the thing-using-shared-state on every request/
20:08 < aandy> right
20:08 < bradleymeck> plato: no, app is a broadway app
20:08 < bradleymeck> read broadway's docs
20:09 < plato> alright
20:09 < aandy> but an example such as: app.get('/some/page/in/need/of/db', db_middleware, function(req, res) ...
20:09 < bradleymeck> also if you want something else for custom middleware points you could use understudy i guess, not all middleware pioints are the same
20:09 < aandy> vs. app.get('/another/page', function(req, res)
20:10 < victusfate> hi is tootallnate around?
20:12 < victusfate> any other folks cozy with node-gyp avail? trying to speed up some builds, and was wondering if there's something like -j 3 for building native modules
20:13 < victusfate> hey @TooTallNate got a moment for a node-gyp question?
20:13 < TooTallNate> victusfate: ya sure, shoot
20:14 < victusfate> @TooTallNate is there an option like -j 3 etc when building native modules, I'd like to speed up some big builds
20:15 < dudes> at first glance it seems like broadway is just a nice interface to passing around shared objects
20:15 < TooTallNate> victusfate: you know, there's not actually. but it seems reasonable to me. you on unix?
20:15 < bradleymeck> dudes: pretty much
20:15 < victusfate> sure am
20:15 < victusfate> os x local testing, deploy on ubuntu
20:16 < bradleymeck> dudes: standard interface to passing around shared objects is missing from most things, particularly if you do things like have 2 express apps in one process
20:16 < TooTallNate> victusfate: well you *could* do `node-gyp configure` followed by `make -j10 -c build`
20:16 < victusfate> TooTallNate: hot damn, that'd be sweet
20:16 < TooTallNate> `make -j10 -C build` rather
20:16 < dudes> gotchya
20:16 < TooTallNate> victusfate: that will work right now
20:16 < victusfate> TooTallNate: our binding.gyp files are pretty tweaked towards unixy commands
20:17 < TooTallNate> victusfate: but i can add an option to node-gyp itself
20:17 < TooTallNate> mirroring the Make api
20:17 < TooTallNate> --jobs
20:17 < victusfate> TooTallNate awesome. Thanks again Nate, you're a champ
20:17 < daum> hey guys i just installed node to try to get less working, and i keep getting that the less module can't be found, but i did npm install less -g, i also see in /usr/lib/node_modules less
20:17 < bradleymeck> TooTallNate: any chance we will get env vars passing as rich as npm?
20:17 < victusfate> TooTallNate: ok so node-gyp configure make --jobs 10 -c build
20:17 < bradleymeck> daum: global modules will not be used in local requires
20:18 < dudes> ok i think i got this. bradleymeck, aandy, plato - thanks guys! see ya later
20:18 < victusfate> TooTallNate: or your updated -j10 syntax, I'll figure it out, thanks
20:18 < victusfate> TooTallNate: you've got me on the right path
20:34 < mscdex> TooTallNate: yeah it would be cool if we could set a JOBS env var like node used to use and node-gyp would use that when compiling (if available)
20:34 < TooTallNate> mscdex: i agree. care to open an issue?
20:36 < mscdex> TooTallNate: done
20:37 < TooTallNate> mscdex: i *wish* JOBS works with make by default
20:37 < TooTallNate> would be nice :)
20:37 < TooTallNate> mscdex: thanks btw, i'll try to get to it asap!
20:37 < mscdex> yeah, but Windows uses something different
20:37 < mscdex> and i don't know about xcode
20:56 < urbann> hi all
20:56 < urbann>  this is a stupid question but what are you actually doing if you run a command like:
20:56 < urbann>  export MONGO_URL
20:57 < urbann> is export a unix command or have it something to do with npm ?
20:57 < urbann> I actually google this but are a bit confused 
20:59 < drapetomaniac> urbann: http://ifacethoughts.net/2011/02/28/using-export-shell-command/      http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.baseadmn/doc/baseadmndita/cmd_shell_var_export.htm
20:59 < othiym23> urbann: it's setting an environment variable in your command shell that will be visible to new processes you start
21:00 < urbann> thanks a lot
21:29 < mikrowelt> guys what is the best mongodb package for nodejs?
21:31 < cnd> is there a way to provide a function that is called whenever the node process is going to exit, whether due to uncaught exception, sucessful termination, or anything short of SIGKILL or the OOM killer?
21:31 < trb> mikrowelt: the usual one, mongodb, what do you mean by best package?
21:31 < cnd> something like libc's atexit?
21:31 < gbhatnag> hi all - new to using CoffeeScript with Node: I've installed coffee-script (npm install -g coffee-script), but I'm wondering if there's some other module available that will automatically watch my app.coffee and other .coffee files and convert them to JS without having to manually use coffee?
21:32 < trb> gbhatnag: dunno if it does this specifically, but nodemon will watch app.js
21:32 < trb> might do .coffee
21:32 < trb> or .tea :p
21:33 < gbhatnag> trb: cool, thanks!
21:35 < mikrowelt> trb: i mean there is mongoose and stuff like that
21:35 < trb> mikrowelt: mongoose is a separate npm module
21:35 < trb> mikrowelt: it really depends what you want from mongo
21:36 < mikrowelt> trb: database + i need to store my expressjs session
21:36 < trb> the native mongo package is ace, mongoose requires you to write code in it's way
21:36 < trb> mikrowelt: native will work fine, but if you need the abstraction then mongoose is great
21:37 < mikrowelt> trb: native is the "mongodb" on npm?
21:37 < trb> iirc, yes
21:38 < trb> mikrowelt: if what you are doing is small, then the native driver is great for it
21:38 < chrisjaure> cnd: process.on('exit', fn);
21:38 < trb> if its large, then you either want to use mongoose/other or use a framework
21:38 < cnd> chrisjaure: ahh, I'll take a look
21:38 < cnd> thanks :)
21:39 < trb> that encapsulates the whole db end
21:39 < mikrowelt> trb: big u mean database size or what?
21:39 < trb> mikrowelt: complexity of the app
21:39 < trb> complexity of the db structure
21:40 < mikrowelt> trb: tnx alot mate^^
22:10 < grantgalitz> Wait, is this channel bigger than #jquery ?
22:11 < BennyLava> #jquery is full of sheep, not people, anyway.
22:12 < grantgalitz> Braveness Level: So
22:14 < grantgalitz> I wonder if I should port https://github.com/grantgalitz/GameBoy-Online to a node.js environment.
22:14 < grantgalitz> Would be fun. :3
22:14 < JmZ> but think of all the productivity that time could've been used for
22:15 < grantgalitz> You're right, I should be fixing up https://github.com/grantgalitz/IodineGBA instead. :3
22:15 < ben_alman> isaacs: is there any way you can tell me this is by design or not? because it *seems* broken to me https://github.com/isaacs/node-glob/issues/48
22:16 <@isaacs> ben_alman: well, it should not be *stripping* the / if mark:true is set.
22:16 <@isaacs> ben_alman: but if the pattern ends with /, then the match will as well.
22:16 <@isaacs> ben_alman: check in bash
22:16 < ben_alman> yeah, it is stripping
22:16 < ben_alman> ok so only the very last example is a bug
22:17 <@isaacs> ben_alman: right.
22:17 < grantgalitz> inb4 someone asks for link support via websockets :3
22:17 <@isaacs> ben_alman: if !mark, then the / at the end is "arbitrary"
22:17 < ben_alman> i tried looking at the code but it hurt my brain
22:17 < ben_alman> sure
22:17 < ben_alman> makes sense
22:17 <@isaacs> ben_alman: ie, might be there, might not
22:17 < ben_alman> yep
22:17 <@isaacs> because i literally don't know if it's a dir yet
22:17 <@isaacs> lemme see.
22:17 <@isaacs> it should be simple.
22:17 < ben_alman> ok updated the description
22:18 < ben_alman> i'm trying to switch over to your glob in grunt and EOL my glob nonsense
22:18 < ben_alman> this is the only blocker i currently see
22:18 <@isaacs> ben_alman: line 204 to 208
22:18 <@isaacs> ben_alman: if i'm reading this properly, it's saying:
22:19 <@isaacs> 1. if (the match does not end in /, and it's a dir, then add the / and return that
22:19 <@isaacs> 2. if the match ends in /, then remove it
22:19 < ben_alman> sc === 2 is dir?
22:19 < ben_alman> so #2 should only remove if NOT dit
22:19 < ben_alman> dir
22:19 < ben_alman> maybe?
22:19 <@isaacs> right
22:20 <@isaacs> yeah
22:20 <@isaacs> impl detail
22:20 <@isaacs>     exists = stat.isDirectory() ? 2 : 1
22:20 < ben_alman> a very simple test should reveal this issue
22:20 <@isaacs> line 485
22:20 <@isaacs> ben_alman: wanna try a patch?  i believe in you.
22:20 <@isaacs> :D
22:20 < ben_alman> i bet you can do it much faster than me, i'm currently neck deep in other issues
22:20 <@isaacs> if you insist.
22:20 < ben_alman> if you absolutely can't do it, i'll go through the process
22:21 < ben_alman> but this is about a 2 min fix for you i bet
22:21 < ben_alman> me more like 15-20 mins
22:21 < ben_alman> let me know if you can't do it, otherwise i'll be editing other things
22:21 < ben_alman> if i can get this in grunt it'll be a huge yay for us
22:22 <@isaacs> ben_alman: fine i'll do it, but only if you promise to review it :)
22:22 < ben_alman> will do
22:22 <@isaacs> k
22:30 < ben_alman> ok i've got my failing unit tests set up
22:31 < ben_alman> in grunt at least
22:32 <@isaacs> ben_alman: done
22:33 <@isaacs> try with v3.1.13
22:33 < ben_alman> works :)
22:33 < ben_alman> you rock.
22:34 <@isaacs> thanks
22:34 < ben_alman> NO U
22:48 < [EddyF]> http://super-status.com/
22:52 < jergason> Does node have a default connection timeout?
22:53 < jergason> If so, how long is it?
22:53 < freddy_m> hello! I need some guidance. I have a JSON file that I'm reading with a node.js script. the goal is to fetch all the images on that file and save them locally. 
22:54 < freddy_m> this is what I have
22:54 < freddy_m> http://pastebin.com/Hz8aq96Z
22:54 < freddy_m> it creates the image (about 4.8 MB) of size, which looks ok. but I can't open it. it says that its an invalid file
22:57 < torm3nt> morning all
22:57 < torm3nt> if I've installed a module via npm, and committed that to git
22:57 < freddy_m> morning (evening here)
22:57 < torm3nt> it seems that if I pull at another location, that module doesn't load properly
22:57 < torm3nt> how do I circumvent that issue?
22:57 < ben_alman> cool isaacs, glob is now in grunt@devel
22:57 < torm3nt> i tried npm install, but that doesn't think anything needs to be installed
22:58 < ben_alman> In case anyone is interested, I published a fairly comprehensive article on partial application in JavaScript the other day https://twitter.com/cowboy/status/250656248784121857
22:59 < torm3nt> had to remove the module then install via npm
22:59 < torm3nt> should node_modules be ignored from git repo?
23:00 < nathan7> 6
23:01 < freddy_m> does anyone have a sample code on how to get a remote image and save it locally using node? 
23:01 < torm3nt> can you use the filesystem libs?
23:01 < freddy_m> yes
23:02 < torm3nt> look through those then :)
23:02 < freddy_m> but most of them use take the path to a file
23:02 < freddy_m> I'm getting the raw image on the request(…)
23:06 < torm3nt> here you go, freddy_m: http://lmgtfy.com/?q=node+js+download+image
23:12 < freddy_m> It turned out to be even easier -_- 
23:12 < freddy_m> request(image.url).pipe(fs.createWriteStream(image.name));
23:14 < torm3nt> ;)
23:20 < terinjokes> adsense be driving me crazy
23:31 < bingomanatee> lga69
23:31 < bingomanatee> gak
23:32 < bingomanatee> question - I want to echo the data being proxied by http-proxy - https://gist.github.com/36325ed4a2bbc8998d58
23:33 < bingomanatee> what would I listen to. Also will session, cookie stuff carry through from/to the proxied server?
23:38 < bingomanatee> hello? 
23:48 < TooTallNate> bingomanatee: hello
23:48 < bingomanatee> hey nate - any suggestions?
--- Log closed Thu Sep 27 00:00:27 2012
