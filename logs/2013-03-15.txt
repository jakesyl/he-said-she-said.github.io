--- Log opened Fri Mar 15 00:00:09 2013
--- Day changed Fri Mar 15 2013
00:00 < faceleg|work> but if I unzip it in terminal it works fine
00:00 < asdf12> you need to wait for the end event :P
00:00 < ningu> hehe
00:00 < ningu> yeah, presumably
00:00 < faceleg|work> on the ws? so I can listen for it with ws.on('end'
00:01 < ningu> faceleg|work: what kind of object does request() return?
00:01 < asdf12> yea faceleg
00:01 < samholmes> substack: I'm just interested in distributed solutions to existing, centralized applications out there. I'm thinking that glog, as a tech, could become the next tumblr. :P
00:01 < ningu> anyway I suspect you want to listen for .on('end') not close
00:02 < ningu> no, the end event on ws won't be emitted until you call end()
00:02 < ningu> I don't think pipe does it for you
00:02 < ningu> oh, actually
00:02 < ningu> "By default end() is called on the destination when the source stream emits end, so that destination is no longer writable"
00:02 < ningu> you want to listen for 'finish'
00:03 < ningu> ws.on('finish')
00:03 < faceleg|work> on the request
00:03 < faceleg|work> ok
00:03 < ningu> I think, anyway
00:03 < asdf12> whaaaa
00:03 < asdf12> what is this sorcery
00:03 < ningu> request().pipe(ws); ws.on('finish', ...);
00:03 < ningu> I may be wrong
00:03 < asdf12> didn't realize 0.10 added 'finish'
00:04 < faceleg|work> .8
00:04 < ningu> oh, if it's .8 then I guess it's close
00:04 < ningu> but same idea
00:04 < faceleg|work> yeah
00:04 < Daynab> I dont wan't to be a bother, but would anyone have a clue why the simple http.createServer(stuff).listen(port) method stop working for me only after updating to 0.10.0? I've looked online and haven't seen anyone with the issue. It even works in 0.9.22 which is the last beta in my version control list.
00:05 < ningu> Daynab: what does "stop working" mean?
00:05 < faceleg|work> yeah
00:05 < Daynab> basically, it seems to try and load it, but says it cannot find the address after 30-45 seconds
00:05 < Daynab> the exact same code works in every version except 0.10
00:06 < ningu> faceleg|work: funzioniert es jetzt?
00:07 < faceleg|work> ?
00:07 < Daynab> I've even tried another simple server with no code except the create server function and it doesn't work either
00:07 < ningu> I just thought I'd use some german and see if it would throw you off
00:07 < Daynab> ...except that it works on every version other than 0.10. Did something change?
00:08 < ningu> Daynab: good question. I don't know, but someone else in here reported a similar issue the other day.
00:08 < faceleg|work> 这里没有看懂德语的人
00:08 < Daynab> hmm, really? did they find out what the issue was?
00:08 < ningu> I don't know.
00:09 < asdf12> daynab: does localhost resolve correctly on your machine?
00:09 < Daynab> I'm not sure what you mean by that
00:10 < korilo> it points to 127.0.0.1
00:10 < Daynab> localhost:port works fine when I use any other version of node
00:10 < Daynab> yeah, it works
00:10 < Daynab> 127.0.0.1 works fine too.
00:11 < faceleg|work> ningu: ws.end still errors
00:12 < asdf12> thats hilarious
00:12 < asdf12> he asked you a question in german, and you replied back to him in chinese
00:12 < asdf12> whats the error?
00:12 < ningu> yeah, he said people here don't know german
00:12 < ningu> I asked him if it's working now
00:12 < ningu> except I spelled it wrong
00:12 < faceleg|work> :P
00:12 < faceleg|work> if it makes you feel better my grammar was probably off
00:13 < faceleg|work> asdf12: adm-zip errors wehn trying to unzip it
00:13 < ningu> you shouldn't call ws.end, you should listen for ws.on('close'(
00:13 < faceleg|work> dammit
00:13 < ningu> faceleg|work: I think, anyway
00:13 < ningu> I've gotten this to work before but I can't remember how
00:13 < faceleg|work> ningu: yeah I did try that
00:13 < faceleg|work> maybe I looked away and assumed it didn't work
00:13 < faceleg|work> ningu: asdf12 nah still same error
00:14 < faceleg|work> ningu: asdf12 but unzip in term works 
00:14 < ningu> and the file is being saved by the node script?
00:14 < ningu> strange
00:15 < faceleg|work> es by node
00:15 < ningu> this is where mikeal's advice for patching .emit() to log it might be useful
00:15 < asdf12> so you're doing ws.on('close', function() { unzips }) ?
00:16 < faceleg|work> unzips is a callback but yes
00:16 < faceleg|work> DAMMIT
00:16 < faceleg|work> OH. MY. GOD.
00:16 < faceleg|work> async.series
00:16 < Daynab> looks like there's some kind of issue with my code so I guess I'll look into it - a hello world tutorial's code works fine in both version. Weird
00:16 < faceleg|work> forgot it wasn't async.waterfal
00:16 < faceleg|work> series executes funcs in order right
00:16 < asdf12> 'close' seems wrong to me though
00:17 < asdf12> i feel like it should be 'end'
00:18 < faceleg|work> nah still same error
00:18 < samholmes> happy pi day everyone!
00:18 < faceleg|work> maybe sth to do with adm zip
00:19 < samholmes> I <3  π
00:20 < asdf12> things seem much simpler in erlang the movie
00:21 < samholmes> I ♥  π
00:21 < asdf12> there's some error, everyone is all cool and sitting back not doing any work waiting for someone to call them
00:22 < azylman> faceleg|work: yes, series executes in order
00:22 < faceleg|work> azylman: yah
00:22 < faceleg|work> changed to waterfall, verified admzip not used until ws.close is emitted
00:22 < faceleg|work> still moans about bad header
00:23 < azylman> I only just came in to this
00:23 < azylman> What's complaining abou tbad header?
00:23 < faceleg|work> admzip
00:23 < faceleg|work> https://github.com/cthackers/adm-zip
00:23 < faceleg|work> funny was working with exact same code on my OS X machine
00:23 < faceleg|work> (on ubuntu @ moment)
00:23 < azylman> Is zipfile defined somewhere?
00:24 < faceleg|work> azylman: http://hastebin.com/ledarijama.coffee
00:24 < faceleg|work> holy crap 
00:25 < faceleg|work> TIL you can change the extension of hastebins, and thus change the syntax highlighting
00:25 < korilo> substack, is there any way to handle things like comments as well?
00:25 < faceleg|work> I thought that was just random until now
00:25 < azylman> Presumably if it's saying bad header there's something wrong with the pipe from request to zipfile
00:25 < faceleg|work> azylman: unzip from terminal doesn't complain
00:25 < hnsz> JimBastard sent me
00:26 < azylman> Then you're probably either using admzip wrong or there's a bug in it
00:26 < faceleg|work> yeah
00:26 < faceleg|work> bad luck for people trying to install this module in !OS X
00:28 < matbee> Question: with substack/bouncy or node-http-proxy and socket.io... does the proxy server hold open the connection and relay all data to the other server? Or is it bouncing it transparently to the other server?
00:29 < azylman> Not sure how it works, but I can tell you that I've used node-http-proxy with socket.io and it works fine. My guess is that it keeps the connection open the same way it normally would
00:29 < azylman> Otherwise I think that it woul dnot work fine
00:30 < substack> matbee: bouncy is transparent with some modifications, http-proxy re-serializes the requests; both work with socket.io
00:30 < azylman> Hm, interesting
00:30 < substack> bouncy has some frustrating bugs right now though :(
00:30 < substack> might fix those tonight
00:30 < Daynab> hey ningu, I found out what the problem was, though I'm not sure why it doesn't work anymore - I had a request.addListener('end') function and apparently that doesnt work anymore as of 0.10. Any idea why?
00:30 < Daynab> I served the page from that listener
00:30 < matbee> substack, I'm just wondering if the traffic passes through the proxy or if the client "skips" the proxy and the data transfer is by the other host
00:31 < substack> matbee: the data goes through the proxy
00:35 < MI6> joyent/node: Timothy J Fontaine v0.10 * 4432dc8 : v8: move 32 bit heap hint on sunos  Setting the V8 heap at or near 0x2000 - http://git.io/C6y6Ew
00:53 < korilo> where the hell the user list has gone in xchat!!!!
01:09 < faceleg|work> korilo: you were deemed unworthy
01:11 < korilo> faceleg|work, i don't deserve this!
01:14 <@mbalho> felixge: transcoding question: for a format like youtubes flv video where you get separate audio/video streams, how do you combine them into a container format like webm with node?
01:19 < timeturner> felixge: does your service support matroska h.264 and dts-hd audio files?
01:19 < timeturner> transcoding of said files ^
01:42 < JamesMGreene> What's this business all about?
01:42 < JamesMGreene> npm ERR! cb() never called!
01:42 < JamesMGreene> npm ERR! not ok code 0
01:42 < JamesMGreene> isaacs
01:43 < Guest4434> Aloha
01:44 <@mbalho> JamesMGreene: i think i get those when my wifi is flaky
01:44 < JamesMGreene> Yeah, I thought the same
01:44 < JamesMGreene> but I'm seeing these on Travis-CI which typically has wicked fast network
01:46 <@isaacs> JamesMGreene: that's a bug.
01:46 <@isaacs> JamesMGreene, mbalho: That should never ever happen.  please report
01:47 < JamesMGreene> isaacs: It works several times and then just started crapping out. Any idea why it would be intermittent?
01:47 < JamesMGreene> worked*
01:47 < ningu> isaacs: btw I still think npm should cache requests during the running of a single command.
01:47 < deoxxa> i've seen that on occasion as well, i figured it was just a thing that happened sometimes
01:48 < ningu> yeah, I've seen it now and then too
01:48 < ningu> hard to reproduce though
01:48 < deoxxa> mmm
01:48 < ningu> sometimes I do npm cache clear 
01:48 < JamesMGreene> isaacs: i.e. it worked https://travis-ci.org/ariya/grunt-jsvalidate/jobs/5514863 but then failed on the next build https://travis-ci.org/ariya/grunt-jsvalidate/jobs/5515015 without any real changes (just changed the engine versions from "*" to ">= 0.8.0")
01:54 < jonno11> I'm looking to build a RESTful api using express, that allows an iOS app to request JSON data. How can I authenticate these requests?
01:55 < jonno11> I'm a n00b when it comes to api authentication
01:55 < ningu> what do you mean by authenticate? specify user/password?
01:55 < jonno11> ningu: not really, more just confirm that the request is coming from the app
01:55 < ningu> oh. why not just have it pass a header?
01:55 < ningu> unless you want it to be more secure than that
01:56 < jonno11> ningu: Yeah, more security would be good - headers I'm guessing are quite easy to spoof
01:56 < ningu> hmm. well I'm not sure then.
01:57 < jonno11> I've no idea where to start, it must have been done before
01:57 < ningu> I agree, but I also don't know.
01:57 < jonno11> ningu: No worries :) Does anybody else know?
01:58 < ChrisPartridge> jonno11: what do you need to authenticate? they are using your app?
01:58 < ChrisPartridge> if so, what ever you do, it wouldn't be hard to spoof afaik
02:00 < jonno11> ChrisPartridge: Yeah
02:00 < jonno11> Just so I know the request for the data is coming from the app
02:01 < jedierikb> new to node... wondering how to determine when my jsdom.createWindow has loaded external sources (e.g. remote javascript)
02:02 < jedierikb> on the command line I Can createWindow, wait a moment, and then access js objects from the remote code, as it has loaded in
02:02 < ningu> jedierikb: doesn't it have a callback?
02:03 < jedierikb> ningu: https://gist.github.com/jedierikb/5166948
02:04 < ningu> jedierikb: based on the docs it looks like the window should be ready immediately.
02:04 < ningu> but that's a good question about setting the src element.
02:06 < ningu> jedierikb: is there a reason you can't just make the scripts part of your jsdom environment?
02:06 < jedierikb> ningu: i am ignorant and only started on node a few hours ago :-)
02:06 < jedierikb> i can load them locally, good idea
02:07 < ningu> jedierikb: you can do that too but it isn't necessary
02:09 < ningu> var jsdom = require("jsdom"); jsdom.env(url, [script1, script2], function (errors, window) { ... });
02:18 <@mbalho> hm..... so im trying to stream a video http request into the google cloud storage api. if i pipe the request directly to google i get a TCP.onread ECONNRESET from node but if i pipe it to a file first then it works as expected
02:26 < jedierikb> ningu: here we go: https://gist.github.com/jedierikb/5166948
02:26 < jedierikb> ningu: onload lets me know when it is ready
02:27 < jedierikb> ningu: i appreciate your help, thank you
02:38 < Eigen_> hey a_suenami
02:54 < deoxxa> i made a thing: https://github.com/deoxxa/semver-c
02:55 < ChrisPartridge> i like things
02:55 < ningu> which is more efficient in v8, typeof or instanceof?
02:55 < deoxxa> well they do different things
02:55 < ningu> I know
02:55 < ningu> assuming both are applicable
02:56 < deoxxa> instanceof, i'd say
02:56 < deoxxa> because of hidden classes etc
02:56 < ningu> hmm ok
02:56 < deoxxa> benchmark time!
02:57 < ningu> just as long as I can take the marks off my bench later
02:57 < deoxxa> use a whiteboard marker
02:59 < ningu> why is it even possible to do new String('foo')?
02:59 < ningu> and why is/should it be different from 'foo'?
02:59 < ningu> I know it *is* different... it just seems strange that that should be possible.
03:00 < FellowMD> ningu Ahh I read about that two days ago but I've forgotten
03:02 < matbee> woo, just upgraded production to node 0.10
03:03 < FellowMD> @ningu new String is what happens when you do things like "    'hello'.prop = 'value'   "
03:03 < FellowMD> the . operator needs to cast to an object
03:16 < timetocode> here's a frequently cited simple websocket chat example ( https://gist.github.com/martinsik/2031681#file-chat-server-js ) -- how does the server know which connection a particular chat message came from? line 88 logs the username to console...but how does it know?
03:17 < niggler> timetocode the magic of closures
03:18 < timetocode> niggler, can you tell me of this magic? i see that the very first message the server receives becomes the userName for the client, also that userName is scoped prior to any of that... but how is it that multiple clients are connected and userName in that context is always the username associated w/ that connection?
03:20 < niggler> timetocode as a simpler example
03:21 < niggler> >>> function f(x) { return function g(y) { return x+y; }; }; var w = f(3); w(2)
03:21 < purr> niggler: (number) 5
03:21 < niggler> what's going on there timetocode?
03:23 < timetocode> niggler, i'm not sure.. what does w() do?
03:23 < niggler> you are asking a JS question, so lets take this to ##javascript
03:23 < timetocode> ok
03:34 < ningu> hey not to start another flamewar, but does anyone know why people say knockout is best for small projects only?
03:34 < ningu> that seems to be a meme but I can't really see what it's founded on
03:35 < jrajav> I want to start a meme about making technology decisions based on memes.
03:35 < jrajav> Is there a Meme Consultant in the house?
03:36 <@mbalho> use a picture of a white 20 something male with a fauxhawk and a macbook
03:36 < ningu> jrajav: I want to know the reality, not the meme
03:36 <@mbalho> LEARNED TO PROGRAM    FROM HACKER NEWS HEADLINES
03:36 < ningu> or at leat what someone's experiences are
03:37 < deoxxa> mbalho: all i learnt from hacker news headlines was "5 new ways to facepalm"
03:37 <@mbalho> lol
03:37 < deoxxa> my favourite was the one that broke my nose
03:37 < deoxxa> and resulted in morphine
03:37 < deoxxa> (disclaimer: didn't happen)
03:37 < zomg> ^ I am disappoint
03:38 < deoxxa> maybe that was too meta
03:38 < deoxxa> that was meant to be a continuation of the joke
03:38 < deoxxa> (hacker news headlines === linkbait)
03:39 < ningu> I use flies to catch links
03:39 < niggler> woah woah following the hacker news headlines would lead you to liveicedchaiteacoffeescript or whatever is the flavor of the month
03:40 < ningu> actually it was someone here who mentioned iced coffeescript
03:40 < ningu> which is what got me into looking that stuff up
03:40 < jesusabdullah> *shudder*
03:40 < deoxxa> niggler: i'm holding out for blueberryscript
03:40 < deoxxa> best flavour imo
03:40 < ningu> I prefer toffeescript
03:40 < deoxxa> i'd try cherryscript
03:40 < niggler> woah woah what's this blueberryscript
03:40 < deoxxa> well it's not a thing
03:41 < deoxxa> but i figure it's only a matter of time
03:41 <@mbalho> with 0.10.0 new stream.Readable() as a readable implementor do i just do myReadableStream.emit('error', error) when an erro rhappens?
03:41 < niggler> its also not in line with the <drink>script pattern
03:41 < deoxxa> milkscript
03:41 < ningu> mbalho: you couldn't do that before?
03:41 < deoxxa> all whitespace all the time
03:41 < niggler> there's a whitespace programming language
03:41 < deoxxa> i know :(
03:41 < ningu> why not blackspace?
03:42 < deoxxa> oh, edgey
03:42 < deoxxa> i like it
03:58 <@mbalho> can someone help me figure out what i'm doing wrong with this 0.10.0 readable stream implementation?  https://gist.github.com/maxogden/8a05d3fa3615e7404c8e
03:58 <@mbalho> (error is in the 2nd file)
03:59 < zjonsson> Am I the only one struggling with the new streams?  Particularly ensuring upstream blocking from transforms that spit out objects downstream?
04:00 <@mbalho> ohh i think im piping an object stream to a non object stream
04:00 <@mbalho> is what that error means
04:01 <@mbalho> yep! that was it
04:08 < zjonsson> Are there any good examples of transforms that block upstream if they aren't being read? 
04:10 <@mbalho> zjonsson: what is your use case?
04:10 < JamesMGreene> Hey isaacs, I think I can consistently reproduce that `npm ERR! cb() never called!` bug now
04:13 < JamesMGreene> Hmm, or I was....
04:14 < JamesMGreene> damn, stopped happening
04:15 < JamesMGreene> Seemed like it had something to do with installing grunt-contrib-jshint latest (0.3.0)
04:17 < zjonsson> @mbalho, as a quick experiment I'm trying to read a text file "slowly", have a transform that splits lines and then I am manually reading from it with on("readable") but put a setInterval to simulate delay
04:19 < zjonsson> with low high watermark on the file reader and the simulated delay on read commands I still don't get the orderly results I would expect
04:19 < zjonsson> too bad there aren't really many examples floating around yet
04:37 < swaj> argh... this express app, connect-flash worked perfectly when I was using dust... now I switch to swig, and somehow my flash messages aren't showing...
04:43 < garthk> Gaah. Having to give up on the latest episode of NodeUp; everyone's smacking their mouths like they're eating on mic.
04:49 < garthk> Aha! Calling /usr/bin/printf x >> y from the command definition doesn't work. 
04:49 < garthk> Writing a shell script to do it, though? No worries.
04:53 < niggler> garthk >> is processed by the shell
04:53 < garthk> niggler: figured. :)
04:53 < niggler> as is | and other flow control
04:54 < niggler> lol the first exercise given to kids in an operating systems class is to implement a shell
04:56 < ChrisPartridge> niggler: funny enough, that's the first thing in the 'becoming a hermit crab' class too
04:56 < niggler> lol ChrisPartridge
05:09 < quizme> with q, you lose asynchronicity right?
05:09 < quizme> i mean, if you chain Q.fcall(f1).then(f2).done()   f2 gets called after f1, yes?  
05:10 < quizme> ok nm
05:10 < quizme> i just answered my own question
05:18 < stagas> quizme: it's still going to be async if you have async operations in these functions
05:18 < quizme> right
05:19 < quizme> that chain of functions doesn't block is what u mean
05:19 < quizme> right ?
05:19 < stagas> quizme: yeah, with Q you just get a sync-like control flow in an async environment
05:19 < quizme> right
05:22 < quizme> i've been reading promises-q example docs for like 4 days
05:22 < quizme> it takes a while to get used to it
05:23 < quizme> it's frickin awesome though when u see the light
05:24 < quizme> javascript starts to look like neon glowing japanese characters flowing down vertically.
05:24 < quizme> in 3d
05:24 < ChrisPartridge> maybe lay off the acid ;-)
05:24 < GreenDog> what do the nested callbacks start to look like?
05:26 <@mbalho> callbackhell.com
05:26  * GreenDog reads
05:27 < quizme> hehe
05:28 < quizme> the shit just writes itself
05:51 < bren_> Can any Node guru solve this?  I keep seeing "[Error: Uncaught, unspecified 'error' event.]" in my output, but no callstack or anything.  How do I debug it??
06:04 <@mbalho> yourstream.on('error', errorHandlingFunction)
06:06 < ChrisPartridge> bren_: also see http://nodejs.org/api/domain.html
06:20 < lifechamp_> installing node.js on centos: any package managers? eg, yum install nodejs out there?
06:23 < lifechamp_> yum install nodejs -- you'd think it'd be there.. but no?
06:23 < garage00> lifechamp: http://serverfault.com/questions/299288/how-do-you-install-node-js-on-centos
06:23 < garage00> otherwise, installing from tar is not that difficult
06:23 < marlun_> If I'm searching for a rss module and I want to know which one is used the most can I see somehow which one is used with npm the most? On npmjs.org if I search I'm just getting a google search page.
06:24 < ChrisPartridge> lifechamp_: build from source, it's the method of champions
06:24 < ChrisPartridge> marlun_: npm shows dependent packages
06:25 < lifechamp_> k, easy enough to do, just wanted to do it the more easily maintainable way also, and from what i've read, that's usually rpm/yum etc, no?
06:26 < ChrisPartridge> rpm/yum are package managers, building from source is generally grabbing the tar, ./configure && make && make install
06:27 < garage00> lifechamp_: installing from source gives the opportunity to install the latest version handily, with packages, you'll have to wait for the distro to release
06:27 < deoxxa> lifechamp_: you have to remember that node moves pretty darned quickly, so a) your package manager will probably be out of date and b) if it's not, your applications will probably be out of date
06:28 < lifechamp_> ok, so, general agreement in the node.js community, perhaps somewhat diff than advice given to newcomers for other software, is to install from source then?
06:28 < lifechamp_> ok
06:28 < deoxxa> lifechamp_: basically you don't want node to be upgraded from underneath you without you knowing, if you're running something in production. just as with all software.
06:29 < deoxxa> lifechamp_: like node is pretty stable, and the api doesn't exactly explode every other day, but it's still not quite at the point of something like apache where you can have the same config for 5 years
06:29 < AAA_awright> How do I get Node.js to terminate after end of input for a piped stream in terminal?
06:30 < AAA_awright> I can't get e.g. `cat file|./example.js` to finish
06:30 < deoxxa> AAA_awright: stdin.on("end", process.exit)?
06:30 < AAA_awright> End is an event?
06:31 < deoxxa> y...es?
06:31 < AAA_awright> Oh yeah it is, but no, that doesn't work
06:31 < deoxxa> ah
06:31 < deoxxa> what version of node?
06:32 < AAA_awright> v0.9.10
06:32 < deoxxa> are you reading from the stream?
06:32 < AAA_awright> Yeah, and I'm getting input
06:32 < deoxxa> if you don't read from it, it'll never end
06:32 < deoxxa> ah
06:32 < AAA_awright> And I'm reading it
06:32 < deoxxa> hrm
06:32  * deoxxa not sure then
06:32 < AAA_awright> And processing it... but no 'end' event
06:32 < lifechamp_> does using nginx, which i haven't moved to, from apache, yet, take away a major reason for using node.js (asynch) handling? is nginx recommended for node.js, or does, conversely, node.js remove a lot of benefit of nginx for node-server pages?
06:33 < korilo> lifechamp_, that's a usual node stack to have nginx in front of it
06:33 < korilo> *of node
06:33 < deoxxa> lifechamp_: depends what you're doing with node - you have to remember that node doesn't just do HTTP
06:33 < korilo> lifechamp_, http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/
06:34 < deoxxa> case in point: nearly everything that i've got at work on node is just straight up TCP connections
06:34 < deoxxa> lifechamp_: i've not found any considerable overhead using node without a proxy in front of it
06:34 < ningu> my tcp connections tend to be lateral, not straight up
06:35 < deoxxa> ningu: mine go to the cloud, so yeah
06:35 < ningu> cumulonimbus?
06:41 < AAA_awright> So what tools are there for making sure a single request doesn't take up too much memory?
06:42 < AAA_awright> deoxxa: Most of your stuff probably could and should be HTTP, I use HTTP APIs for everything
06:42 < AAA_awright> And you get caching, etc, for free
06:43 < deoxxa> AAA_awright: show me how to magically upgrade embedded devices to use HTTP and i'll jump right on that cart with you, buddy
06:43 < faceleg> man I love node
06:43 < faceleg> also angular
06:44 < ningu> why angular?
06:44 < ningu> that's one of the things that does stuff like knockout, backbone, etc?
06:45 < faceleg> it does _all_ of the things
06:45 < faceleg> dev'd by the big G
06:45 < faceleg> I <3 it for many reasons
06:45 < ningu> hmm ok
06:45 < faceleg> one of them is the way it will save energy by drastically reducing bandwidth use
06:45 < faceleg> as all views are static html, data is trasnferred as json
06:45 < faceleg> so bandwidth use is minimal
06:46 < faceleg> also server doesn't render, browser does
06:46 < faceleg> so server load is less
06:46 < faceleg> it is a _perfect_ match to node
06:46 < ningu> hmm ok
06:46 < faceleg> with my project, I do _no_ rendering on server side
06:46 < faceleg> just static html
06:46 < faceleg> I've used backbone a lot
06:46 < faceleg> I like it & use it @ work 
06:46 < faceleg> but angualar beats the crap out of it
06:46 < faceleg> like node beats the crap out of php
06:47 < faceleg> it's a rather massive paradigm shift though, especially if you have exp with jquery
06:47 < ningu> I never really understood the point of backbone to be honest
06:47 < faceleg> this is the best: stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background/15012542#15012542
06:47 < ningu> hmm ok
06:48 < faceleg> backbone is pretty great tbh
06:48 < ningu> what does it... do, though?
06:48 < faceleg> it takes the madness out of trying to dev large app-y projects
06:48 < faceleg> angular?
06:48 < ningu> no, backbone
06:48 < ningu> maybe my issue is I've never had one of those
06:48 < faceleg> yah might be
06:48 < faceleg> I used backbone to make a file manager
06:48 < faceleg> that is backend agnostic
06:49 < faceleg> backbone removed my need to handle any management of REST calls
06:49 < faceleg> "AngularJS is built around the belief that declarative programming should be used for building UIs and wiring software components, while imperative programming is excellent for expressing business logic."
06:49 < faceleg> http://en.wikipedia.org/wiki/AngularJS
06:49 < ningu> what do you use for templates?
06:49 < faceleg> "http://en.wikipedia.org/wiki/AngularJS"
06:49 < faceleg> html
06:49 < faceleg> I have absolutely no issue with writing html
06:50 < faceleg> in fact I prefer it over anything else
06:50 < faceleg> can't have more control than total control. you can use jade though, and others so I hear
06:50 < ningu> the term business logic is one of my pet peeves
06:51 < faceleg> I know right, never seen a business that had any logic
06:51 < ningu> not everyone making web apps is a business
06:51 < faceleg> they should just say logic really
06:51 < Havvy> Can't we call it domain logic?
06:51 < faceleg> in this room, let it be ever so
06:51 < ningu> yeah, it's just a terminology issue, it doesn't really matter
06:51 < Sven_vB> ningu, you could think of it as the logic that keeps the hardware busy ;)
06:51 < Sven_vB> thus yielding the business
06:52 < faceleg> dammit I have a "thing" that I have to do before I can get to coding
06:52 < ningu> eat?
06:52 < faceleg> nah done that
06:52 < faceleg> interview
06:52 < ningu> jobs are a poor substitute for coding just like sleep is a poor substitute for caffeine
06:52 < Sven_vB> so this is what you call it these days? ;P
06:53 < Sven_vB> depends on the kind of job
06:53 < faceleg> this is a mostly JS job
06:53 < faceleg> that will help teachers effectively teach
06:53 < ningu> java the script, not jabba the hut
06:54 < ningu> so here's my real question
06:54 < Sven_vB> i hadn't thought teachers' problems were of that nature. how can JS help them?
06:55 < ningu> when choosing among backbone, knockout, angular, whatever...
06:55 < ningu> is there a use case for single page apps versus "traditional" sites?
06:55 < ningu> or is there an argument that single page is automatically better?
06:56 < Sven_vB> depends on whom you try to impress.
06:56 < Havvy> ningu: Google Reader makes (made?) a good single page application.
06:56 < Havvy> Not all sites are better as a single page though.
06:56 < ningu> Sven_vB: for the apps I've written in node I can't think of a good reason for making it single page
06:56 < ningu> however, I still need to manage dynamic rendering of information to some extent
06:56 < ningu> there are some dialogs for example
06:56 < Sven_vB> ningu, then probably you shouldn't.
06:56 < Havvy> Google's search engine makes a good single page app too, with fallback to multiple pages for those with JS turned off.
06:57 < ningu> so I want to use something more than jquery for managing my models etc.
06:57 < faceleg> so does double click
06:57 < faceleg> you can still use dynamic content
06:57 < ningu> but not if it forces me to do everything like a single page app
06:57 < faceleg> ningu:  it doesn't
06:57 < Sven_vB> ningu, you're not restricted to extremes. you can have multiple pages and still do _some_ things on the same page.
06:57 < faceleg> my app is hybrid
06:57 < ningu> faceleg: what doesn't?
06:57 < ningu> Sven_vB: ok. well, that's what I want :)
06:57 < faceleg> angular does not force single-pageness on you
06:57 < ningu> ah ok
06:57 < penzur> my site is full flash
06:57 < ningu> the dialogs are obviously on the same page
06:57 < ningu> but there are various pages
06:57 < faceleg> I ahve a landing page that has it's own controller 
06:57 < penzur> who needs javascript?
06:57 < faceleg> yeah
06:58 < Havvy> penzur: You are still using ECMAScript. ;)
06:58 < Sven_vB> penzur, lol, nice try
06:58 < ningu> currently using jquery-ui
06:58 < penzur> damn!
06:58 < faceleg> You could use a directive+service or something maybe for your dialogs
06:58 < faceleg> ugh I hate jquery ui
06:58 < faceleg> I've been using it for years
06:58 < faceleg> horrible
06:58 < ningu> it works fine for me so far
06:58 < ningu> my issue is not really with jquery ui
06:58 < ningu> but with managing data vs. rendering
06:59 < faceleg> unrelated
06:59 < faceleg> how do I git rebase master from origin-b to master from origin-a?
06:59 < ningu> rebase... I never understood that
06:59 < faceleg> on origin-a/master, git rebase -p origin-b/master?>
06:59 < faceleg> I'm forcing myself to learn
07:00 < ningu> don't understand freebase either
07:02 < faceleg> dammit
07:02 < faceleg> interview started
07:03 < ningu> why are you on irc?
07:04 < penzur> procrastinating my friend
07:08 < Sven_vB> can someone help me upgrade? should i really choose or do i have outdated package repos? nodejs-dev : Depends: nodejs (= 0.8.22-1chl1~precise1) but 0.10.0-2chl1~precise1 is to be installed. // nodejs : Conflicts: nodejs-dev but 0.8.22-1chl1~precise1 is installed. Conflicts: npm but 1.2.14-1chl1~precise1 is installed.
07:08 < ningu> looks like nodejs-dev is out of date
07:08 < Sven_vB> oh, using Ubuntu precise btw. ;)
07:09 < ningu> are you using chrislea's repo?
07:09 < Sven_vB> now that you write its name... i wonder why i have -dev installed in the first place
07:09 < Sven_vB> yes @ chrislea
07:10 < Sven_vB> oh of course, because npm wants it
07:11 < Sven_vB> seems like just the nodejs package is outdated, so i'd probably wait a few hours for chris to repackage it
07:44 < ningu> hmm... angular does look pretty cool
07:44 < ningu> I don't really understand how it does it, I mean... how is <html ng-app> valid code
07:50 < ningu> so what I don't understand is... assuming I don't want a single page app, which faceleg says angular doesn't force me into, how do I separate my model data from my html? presumably the server needs to pass a long a bunch of model data in a <script> tag or something... which feels icky.
07:51 < Sven_vB> you could try localstore
07:51 < ningu> Sven_vB: how will that help?
07:52 < ningu> it's per-page
07:52 < ningu> so including it with the page makes sense kinda
07:53 < Sven_vB> oh ok, i thought it was per domain
07:53 < nesusvet> ningu, I understood where a problem is ). I forgot to close all response queries using ".end();", so that when my clients tried to connect to master nodeJS server, they could't close the session for a long time 
07:54 < nesusvet> ningu, thanks )
07:55 < Sven_vB> or you could include one store page in every other page and access it with postMessage() :D
07:55 < ningu> no, the idea is, say I have a set of 30 records I want the client to display. I can send the client an html template which incorporates the logic for how to render that data. that buys me the model binding logic in angular, knockout or whatever. but how do I actually get the data to the client, assuming I want to optimize the number of requests and not make the client initiate a second request before the page can even render?
07:56 < ningu> Sven_vB: hmm... what do you mean exactly by a "store page"?
07:56 < ningu> nesusvet: ok, glad you fixed it
08:01 < Sven_vB> ningu, i understood your "it's per-page" as that each HTML page would have its own {session,local}Store instead of one per domain. so you could make a store.html which uses its URI identity to give a common storage, and then share that common storage by making it accessible to your other pages via postMessage()
08:02 < ningu> hrm
08:02 < ningu> I suppose, but that seems worse than the hacks I was considering :)
08:02 < ningu> it looks like there are a bunch of stackoverflow threads on inserting json into html files
08:04 < Sven_vB> now that i'm reading a bad tutorial on sessinStorage, i can't wait until lots of noobs start using that without sanitizing the names for their storage keys. i think i'll be sharing lots of vCards with people named "remainingSpace", "clear" and such.
08:04 < Sven_vB> if you already serialize it to json, the old window.name might come in handy
08:05 < Sven_vB> i've read that was how you stored cross-page (even cross-domain) session data before the days of sessionStore
08:05 < Sven_vB> +ag
08:06 < ningu> http://stackoverflow.com/questions/6616893/insert-javascript-data-chunk-json-into-an-html-page
08:06 < ningu> that's the sort of thing I want. and it sounds like how I planned to do it is what people recommend (option 1).
08:09 < Sven_vB> you can save some kittens by clamping your model to window explicitly (window.model = ... instead of var) and even more if you open your own, hopefully-unique named namespace below window and clamp your model to like window.COM_EXAMPLE_NINGU.model
08:09 < ningu> well, sure
08:09 < Sven_vB> good :)
08:09 < ningu> what's the advantage of window.model versus var model?
08:10 < ningu> mpd: multiple personality disorder?
08:10 < Sven_vB> it will be easier to switch to all-jslint-friendly style once you convert ;)
08:11 < Sven_vB> more precisly, you avoid an additional global variable
08:12 < douglaslassance> Can someone be nice enough to explain a poor soul the best way to approach versioning of your package?
08:12 < ningu> douglaslassance: you could check semver.org
08:13 < Sven_vB> i approve of semver.
08:13 < douglaslassance> sounds very interesting, I'll read that first and ask more after
08:14 < ningu> semver is pretty widely used in the node world
08:15 < douglaslassance> I think I am also interested in figure out how you make sure not to forget to update you package.json version information when you push your code to either npm or github
08:15 < douglaslassance> I am sure there is tips and tricks
08:16 <@Nexxy> before you publish to npm
08:16 <@Nexxy> make a version bump commit
08:16 < douglaslassance> What does this stand for Nexxy
08:17 < Sven_vB> douglaslassance, "push" sounds like version control? then you could plant a pre-push hook
08:17 < Sven_vB> that fails if you already used that version
08:17 < douglaslassance> That checks for version submited
08:17 < douglaslassance> sounds good
08:18 < Sven_vB> i'm so glad i live in modern times. some years ago, programming must've been hell
08:18 < douglaslassance> so your master branch bumps you back if you dont commit a new version, and this is the gateway before npm... thats the idea?
08:19 < Sven_vB> yes. or if you find a good scheme for automagically guessing a good next version number, the pre-push hook could add that one (i heard git tags are used for that), commit the version and only then push it.
08:20 < Sven_vB> also i'm sure there must be some toolchain frameworks out there which already do such stuff
08:21 < douglaslassance> Right, tags... I heard of them... it's not very clear to me when to use them. I suppose you tag versions of your package
08:21 < douglaslassance> So you could have a lot of commits on your master branch but only certain tagged as versions
08:22 < douglaslassance> and maybe only those you can push to npm... I dont know... just inventing
08:22 < douglaslassance> :D
08:22 < Sven_vB> i heard there are systems where when you push them new version tags, they'll start building deb packages with those versions from the respective commits
08:22 < Sven_vB> one could surely adapt that to npm
08:22 < douglaslassance> that is neat sven
08:23 < douglaslassance> I suppose I am just looking for something to tell me... Here is "the way" to do it...
08:23 < douglaslassance> but maybe there is no such thing
08:23 < Sven_vB> if you encounter tangible examples of such systems, i'll be looking forward to hear about them :)
08:24 < Sven_vB> i probably even have some tutorials about them deep down my "todo::learn" list
08:24 < douglaslassance> I'll share..
08:25 < ningu> http://funcall.blogspot.sg/2009/03/not-lisp-again.html
08:25 < ningu> off topic but it was a fun read
08:26 < ckknight> Hey all, I'm executing node from the command like as so: `node --harmony_collections -e "require('$DIR/../lib/command');" $*`, and if I pass in arguments to this script, if they start with a -, node tries to execute it as an option, I've seen other programs use something like "app file.ext -- --my-options-here", does node have anything like that so that options are passed into the process.argv?
08:39 < over_> hi
08:40 < [AD]Turbo> hi there
08:42 < over_> unfortunately yesturday I was disconnected, I'm looking for someone who can help me about webmatrix or visual studio
08:58 < gorillatron> Could someone look at https://gist.github.com/gorillatron/5168432 for me? Description of the problem is in first comment.
09:02 < faceleg> holy crap
09:03 < faceleg> longest interview _ever_
09:03 < ningu> gorillatron: so the question really is... are you calling the callbacks on both flushDB and readSQLFromSnapshot?
09:07 < gorillatron> yeah I am, the flusDB callback is invoked. Its the readSqlFromSnapshot function that isnt. And I have no clue why.
09:08 < gorillatron> yeah I am, the flusDB callback is invoked. Its the readSqlFromSnapshot function that isnt. And I have no clue why.
09:08 < gorillatron> oh sorry wrong window
09:15 < zot> anybody have suggestions on tutorials, or best examples to steal from, for developing C/++ node plugins?  i will be integrating a little bit w/ libuv/libev, so node-zookeeper is my current model, but i'd love to hear about other best practice examples
09:17 < faceleg> hey zot
09:17 < faceleg> welcome to hell
09:17 < faceleg> just kidding, c++ + node is awesome
09:17 < zot> now now, it can't be that bad.
09:17 < faceleg> ... after the initial learning curve
09:18 < faceleg> nah I just started the same a few weeks ago
09:18 < faceleg> I'll try to dig up the documents that saved my asnity
09:18 < faceleg> sanity*
09:18 < zot> awesome
09:18 < gorillatron> @ningu: AH ofc, its because when using async.auto the last argument passed to the function is an object containing the results, so fs.readFile is beeing passed that as last argument and not the callback.
09:18 < faceleg> zot: this: http://kkaefer.github.com/node-cpp-modules/
09:18 < ningu> aha
09:18 < ningu> I don't use async.auto
09:18 < faceleg> zot: this: http://nodejs.org/api/addons.html
09:19 < faceleg> zot: http://nikhilm.github.com/uvbook/threads.html
09:19 < faceleg> zot mainly I found v8 to be the weirdness
09:19 < faceleg> getting obj from js, giving it back
09:20 < faceleg> ningu: is the one to ask, in all things.
09:20 < faceleg> bnoordhuis too, when he/she is here
09:20 < gorillatron> @ningu: async.auto is nice for describing dependencies between async function calls
09:20 < ningu> faceleg: so I was looking into angular and it looks pretty cool, but I'm wondering... for my hybrid multipage app with dynamic functionality, what if I want to use angular's html bindings etc. but I don't want to do an ajax request to get the json data?
09:20 < ningu> faceleg: it sounds like zot already knows C++
09:20 < zot> faceleg: thanks dude(tte) :)
09:20 < faceleg> zot: ningu then I'm jealous
09:21 < faceleg> ningu: you don't have to use anything
09:21 < faceleg> use what you want
09:21 < faceleg> I use websockets for my data
09:21 < ningu> hmmmm
09:21 < zot> well, i've written a fair bit of C++, but it's not my best language, for sure
09:21 < ningu> that works
09:21 < faceleg> make a service, that is waht they're for
09:21 < ningu> what about just inlining var foo = <json>?
09:21 < faceleg> I use http for getting the current user
09:21 < faceleg> yeah you can do that
09:21 < faceleg> google 'priming angular js'
09:21 < ningu> ah ok
09:21 < ningu> cool
09:21 < faceleg> I think that's what I googled when I thought I wanted to do that
09:21 < ningu> the inline thing is simplest but the others are good ideas
09:22 < faceleg> yah I use http for current use (so I can easily fire 'show login' when 301
09:22 < ningu> also, I appreciate sending people to ask me questions but when I get out of my current procrastination stage I will probably not be on here at 2am :)
09:22 < faceleg> and authenticated / unauthenticated sockets for everything else, because sockets.
09:22 < ningu> yeah, sockets are a decent idea
09:22 < faceleg> haha ningu just didn't want to give the impression that I know everything
09:23 < ningu> bnoordhuis is definitely a he unless there are female bens around
09:23 < zot> that much i knew — but i didn't know faceleg :)
09:23 < zot> unless faceleg is an alias
09:23 < ningu> well, faceleg is a cipher
09:23 < ningu> wtf is a faceleg anyway
09:23 < faceleg> ningu: this is a WIP but it's what I'm using currently http://hastebin.com/tulidujofu.js
09:24 < ningu> factory is an angular method?
09:24 < faceleg> yeah it's confusing at first
09:24 < ningu> hmm, it has its own sockets? so no socket.io?
09:24 < faceleg> nah this is with socket.io
09:24 < faceleg> io = socket io
09:24 < ningu> ah ok
09:24 < faceleg> just wrapping it
09:25 < ningu> I think I was confused by the 'socket' arg to factory
09:25 < faceleg> was simpler but I realised I wanted both auth and unauth sockets
09:25 < faceleg> I KNOW
09:25 < ningu> that isn't telling angular to do anything but name it
09:25 < faceleg> the string args are so weird!
09:25 < ningu> what does it actually mean?
09:25 < ningu> define a socket factory with that function?
09:25 < faceleg> I'm finding a suitable usage example
09:25 < faceleg> socket = the naem you will refer to that service in controllers
09:26 < ningu> ah ok
09:26 < faceleg> ningu: a controller method
09:26 < faceleg> http://hastebin.com/codorufeja.js
09:26 < ningu> also, it freaks me how that you can do things like <html ng-app>
09:26 < faceleg> I think like '$location', '$scope' etc
09:26 < ningu> how does it *do* that?
09:26 < faceleg> haha I know
09:26 < chxane> angularjs sounds like a steep learning curve lol
09:27 < faceleg> what about <ng-view src="/some/html.html">
09:27 < ningu> I guess it's just an attribute?
09:27 < ningu> I don't know if attributes without an = are valid html
09:27 < faceleg> surprisingly, custom attributes are OK even down to low IE
09:27 < ningu> *custom* attributes yes
09:27 < faceleg> yeah they are, even in IE6 I think
09:27 < ningu> but is that even a valid attribute syntax?
09:27 < faceleg> disabled
09:27 < faceleg> google's mod pagespeed has the 'elide attributes' option
09:28 < faceleg> which removes unecessary ="..." from attributes like disabled="disabled"
09:28 < faceleg> just need disabled
09:28 < faceleg> attr w/o ="..." = true
09:28 < faceleg> what about <ng-switch>
09:28 < faceleg> and the whole
09:28 < ningu> hmmm
09:28 < faceleg> referencing functions that are macially linked to the same named funcs on the given scope
09:28 < faceleg> wait until you do nested controllers 
09:28 < ningu> and does it perform ok?
09:29 < faceleg> apparently
09:29 < faceleg> it's google
09:29 < ningu> I mean, I don't really need much
09:29 < faceleg> they use it for double click
09:29 < ningu> but I don't want it to mess up anything either
09:29 < faceleg> it takes the ability of you to screw up things like accidentally triggering too many reflows
09:29 < faceleg> away from you
09:29 < faceleg> and into the hands of google engineers
09:29 < faceleg> I'm sure they use something similar for their search page, analytics, gmail, g+
09:30 < faceleg> if not similar then angular
09:30 < faceleg> also, after I thought about it
09:30 < ningu> ok, and the doubleclick homepage -- dunno if that's in angular but it isn't a single page app
09:30 < faceleg> eayh
09:30 < faceleg> but if you go to "using angular" page on the ang sire
09:30 < faceleg> site*
09:30 < faceleg> it lists dc as a user
09:30 < faceleg> I guess the dashboard is 
09:30 < faceleg> same as my project - home page isn't ang, and won't be. though it'll use some on the forms etc
09:31 < faceleg> protip: to make a link work like a link and not trigger ang routing, add rel="_self"
09:31 < ningu> ok
09:31 < faceleg> otherwise ang's html5 history wrapper will pick it up
09:31 < ningu> so if I use it I guess I'll need quite a few links on my site to have that
09:32 < ningu> anyway, I have to get to sleep
09:32 < faceleg> ningu: http://hastebin.com/jaqafosofa.js
09:32 < faceleg> last one
09:32 < faceleg> wonderful directives
09:32 < ningu> cool
09:32 < faceleg> oh ang
09:32 < ningu> I'm saving these
09:32 < faceleg> haha
09:33 < faceleg> my contribution to the world
09:33 < ningu> will look at them when I can understand what they mean :)
09:33 < faceleg> the socket one is a WIP
09:33 < ningu> well, it will get me started
09:33 < faceleg> was v. small but grew as my requirements did
09:33 < faceleg> yeah I found it hard to know where to start
09:33 < faceleg> docs are great but who has time to go through the demos etc
09:33 < faceleg> in needed to get code down
09:33 < samholmes> jesus, does everyone use vim?
09:33 < faceleg> why?
09:34 < ningu> I think I'll just use my current jade templates as a starting point
09:34 < faceleg> most of us here use ST2
09:34 < ningu> and see if I can convert a page or two
09:34 < faceleg> yeah I've read it can integrate well with jade
09:34 < ningu> ST2 is the new textmate?
09:34 < faceleg> more like textmate is the old ST2
09:34 < zot> faceleg: one more question — how up to date is this thing?  (ie, node-waf versus node-gyp, etc.?)  i'm currently dev'ing vs v0.8, so i'm curious about that as well
09:34 < faceleg> node-gyp
09:34 < faceleg> don't use node-waf
09:34 < samholmes> faceleg: Like, all the talks on node is with vim.
09:34 < samholmes> I use ST2
09:34 < zot> so it's a bit old, then?
09:34 < faceleg> samholmes: a lot of people use vim as well
09:35 < faceleg> I use vim + st2, depending on situation
09:35 < ningu> I'll try out St2
09:35 < ningu> I'm pretty used to textmate but not in love with it
09:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
09:35 < samholmes> ningu: st2 rocks
09:35 < faceleg> st2 is the business
09:35 < ningu> does it have auto-completion and stuff?
09:35 < samholmes> I can't use vim for the life of me.
09:35 < faceleg> ...yes?
09:35 < samholmes> I use vi to do simple edits in bash, but that's bout it
09:35 < faceleg> haha esc :q = quit
09:35 < faceleg> fyi
09:35 < samholmes> haha
09:35 < ningu> like it will complete fs.* with exists or whatever
09:36 < samholmes> figured that much
09:36 < samholmes> :wq
09:36 < ningu> that might be a bit much
09:36 < faceleg> samholmes: I've found a bunch of plugins that make it almost like st2
09:36 < faceleg> the autocomplete in my vim is better actually
09:36 < ningu> but a lot of modern IDEs have that sort of stuff
09:36 < faceleg> and it has tabs, multi panes, fuzzy file search
09:36 < ningu> anyway, sleep
09:36 < ningu> ttyl
09:36 < samholmes> ningu: l8r
09:36 < faceleg> yeah st2 fails a bit there
09:36 < samholmes> faceleg: How do I use vim?
09:37 < faceleg> vim <filename>?
09:37 < samholmes> Copy/paste, search. Opening files..
09:37 < faceleg> copy paste?
09:37 < samholmes> Eh.
09:37 < faceleg> man 
09:37 < samholmes> I can't select with my mouse cursor.
09:37 < faceleg> to open another file when already in one, esc :e file path
09:37 < faceleg> yeah it's ... different and no you normally cant' use cursor
09:37 < faceleg> i had to put concerted effort into learning it
09:38 < faceleg> samholmes: http://www.openvim.com/tutorial.html
09:38 < samholmes> what about multiple selections?
09:39 < faceleg> samholmes: http://vim-adventures.com/
09:39 < faceleg> no. 
09:40 < samholmes> Do you use one finger for h and j or do you use two separate fingers when in the default mode?
09:41 < faceleg> I use one hand, pointer resting on j like normal
09:41 < faceleg> i'm still not used to it
09:41 < faceleg> I turned arrow keys off to force the learning
09:41 < zot> anybody use ST2 with the vintage mode?  i've been vim for 15 years, but curious about ST2.  if i try, i'm curious whether to try raw ST2 versus the vintage crutch...
09:41 < aMoniker> play nethack if you want to learn vim
09:41 < zot> lol
09:41 < zot> and change your sh settings to be vi mode
09:42 < zot> frustration makes for quick learning
09:42  * faceleg promotes zot to lead vim instructor
09:42  * zot gracefully declines
09:43  * faceleg zot accepts :x
09:43 < faceleg> so ... how do I debug a segfault again?
09:43 < zot> gdb
09:44 < faceleg> yes but it just gives me words and numbers with lots of 000 and x
09:44 < faceleg> what does it all mean>?
09:45 < faceleg> for example: http://hastebin.com/ladedisemu.bash
09:46 < zot> good luck :)  i would start going up the stack, and printing out variables to see which look like they contain what you expect
09:46 < faceleg> mmm
09:46 < zot> usually you'll find that you've crossed a line from good mem refs to bad, and just need to figure out why
09:46 < zot> easy as pie!
09:46 < faceleg> how does one print a struct
09:46 < faceleg> lol
09:46 < zot> p *struct_ptr
09:47 < zot> if it's typed nicely
09:47 < zot> otherwise help x
09:47 < faceleg> in gdb?
09:47 < zot> x is your best friend when doing serious memory debugging
09:47 < zot> yes.
09:48 < gorillatron> @zot: "frustration" === "quick learning" === true
09:48 < faceleg> what is Attempt to dereference a generic pointer.
09:48 < faceleg> ?
09:49 < zot> probably a void* someplace that you need to manually cast
09:50 < faceleg> when specifying static methods as C function callbacks
09:50 < zot> you can also link to a memory watching library and run that way, if performance isn't an issue
09:50 < zot> valgrind, etc.
09:50 < faceleg> do I need to use ClassName::Method?
09:50 < zot> ugh.  that syntax gets complicated, and i rely on gdb tab completion as much as possible for that :)
09:51 < zot> probably though
09:56 < faceleg> damn
09:56 < faceleg> thnk it was an issue with the library I'm wrapping
09:56 < faceleg> hate that
09:56 < zot> yes.
09:56 < faceleg> waste of an hour fooling myself that I'm capable of debugging C++
09:56 < zot> can always use eclipse or sth; prolly better for heavy C++
09:57 < faceleg> I do miss proper intellisense
09:57 < faceleg> I guess I'm used to not having it from working in duck languages
10:00 < jsmonkey> anyone aware of good node.js email weekly letters? like http://rubyweekly.com/ or http://javascriptweekly.com/
10:00 < faceleg> wow more than one colour in the splash screen now
10:02 < paultman> hey guys, I'm looking to run host multiple domains on my single heroku, looking at using connect.vhost or node-http-proxy, any thoughts?  I don't need all the features of node-http-proxy like https or socket.io, though it still might be a better way to go....
10:03 < paultman> anyone use heroku who serves multiple domains?
10:20 < pkstn> Hi! Please help me - I have this error code I don't know how to fix:
10:21 < pkstn> "Error: Module version mismatch. Expected 11, got 1."
10:21 < pkstn> node.js version 0.10.0 and all the npm packages updated as well, but it doesn't help..... :/
10:22 < faceleg> what context is that error from
10:22 < faceleg> i.e. what was happening when it popped out
10:22 < pkstn> trying to start servers with forever
10:23 < pkstn> servers are written with coffeescript
10:24 < pkstn> actually it seems that there is an error with bcrypt package..
10:24 < pkstn> Error: Module version mismatch. Expected 11, got 1.     at Module.load (module.js:356:32)     at Function.Module._load (module.js:312:12)     at Module.require (module.js:364:17)     at require (module.js:380:17)     at bindings (/home/node_modules/bcrypt/node_modules/bindings/bindings.js:74:15)     at Object.<anonymous> (/home/node_modules/bcrypt/bcrypt.js:1:97)
10:29 < pkstn> actually I found the error - thank you for your mental support :D
10:29 < faceleg> lol
10:31 < raffer__> Hi. can anyone help with our mongodb setup? (everyone still asleep at the #mongodb channel ;)
10:31 < raffer__> For our mongodb we use a primary/secondary setup. If the primary goes down, 2 becomes 1. If the first is back up, he is 2. Now HAProxy routes every request to the 2 ... (unless we rewrite the HAProxy of course...)
10:32 < raffer__> How would one solve this? Can this be enforced in the node mongoDB driver (or mongoose)? 
10:44 < sawbon3s> Awesome just found the node.js irc
10:44 < sawbon3s> Everyone is probably asleep >.> Either way, hello everyone!
10:46 < faceleg> ello
11:24 < barinovmaxim> Hi, Is anybody maintainer of node.js online?
11:25 < bnoordhuis> barinovmaxim: yes
11:25 < barinovmaxim> Can you apply this pull request? https://github.com/joyent/node/pull/4327
11:26 < bnoordhuis> barinovmaxim: with all due respect but it's not like it's the only PR in the queue...
11:26 < bnoordhuis> oh, i remember that one
11:27 < bnoordhuis> barinovmaxim: the comment still stands, it won't get merged until it's a standard
11:27 < barinovmaxim> :-(
11:28 < barinovmaxim> Can you recommend me any issue for solve it? I'm novice in open-source.
11:31 < bnoordhuis> barinovmaxim: apply the patch to your local fork?
11:32 < bnoordhuis> that's the beauty of open source, you can fix things yourelf
11:32 < bnoordhuis> *yourself
11:33 < barinovmaxim> I want to bring improvements in main branch Node.js
11:33 < ExxKA> Just wrote an article on how to setup a secure private web server with node.js using SSL authorization: https://gist.github.com/ExxKA/5169211
11:34 < barinovmaxim> Nice article, tnx
11:35 < aandy> ExxKA: nicely done. there are too few proper articles covering client certs
11:35 < faceleg> ExxKA: nice work, been wondering how to do that
11:35 < barinovmaxim> At the weekend was going to do it
11:35 < ExxKA> Thanks :)
11:35 < faceleg> bnoordhuis: hey, been working on the uv_thread thing we talked about
11:35 < ExxKA> It had a hassle doing it yesterday, but it worked out in the end
11:35 < faceleg> bnoordhuis: thanks for you advice ;:)
11:37 < faceleg> " I assume it is possible on a Windows machine aswell."
11:37 < faceleg> I lol'd
11:37 < ExxKA> :P
11:43 < aandy> i'm fairly certain it isn't - or are domain certs windows talk for client certs? :p
11:48 < ExxKA> aandy, you can probably do it in Windows certificate manager, I just dont have access to a Windows box right now, so I couldn't test it
11:51 < aandy> i was just making a comment, i don't use windows either (not often anyway) :)
11:51 < ExxKA> ok :) Don't get me wrong, I love win7, it's really good at running my VirutalBox linux systems
11:57 < ashnur> virutalbox. :D :D :D
11:57 < ashnur> that is really what it is.
13:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:18 < matbee> node: ../src/node_crypto.cc:935: int node::crypto::Connection::HandleSSLError(const char*, int, node::crypto::Connection::ZeroStatus): Assertion `err == 1 || err == 5' failed. --- Anyone aware of what's causing this?
13:19 < matbee> It's making my servers crash and burn
13:19 < matbee> I just updated to node 0.10
13:20 < bnoordhuis> matbee: can you get a backtrace in gdb? or a core dump?
13:21 < matbee> bnoordhuis, if the core dump is stored somewhere, sure
13:21 < bnoordhuis> matbee: you have to enable it with `ulimit -c unlimited`
13:21 < bnoordhuis> what os are you running?
13:29 < lrvick> Hey all. After upgrading node my project blew up with this: http://pae.st/dpku/
13:29 < lrvick> any ideas?
13:29  * spion is excited about https://github.com/brianc/node-sql/pull/45
13:33 < bnoordhuis> lrvick: Server not found
13:33 < matbee> bnoordhuis, Linux matbee-hp 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux... Ubuntu 12.10
13:33 < matbee> oh wait
13:34 < matbee> That was very dumb of me
13:34 < matbee> CentOS on the servers. I just woke up.
13:34 < lrvick> bnoordhuis: http://pae.st/dpku/ does not work for you?
13:34 < jsmonkey> anyone read "node in action" by manning?
13:35 < lrvick> bnoordhuis: http://pastie.org/6513270
13:35 < bnoordhuis> lrvick: right, that one works. you need to recompile your native add-ons
13:36 < bnoordhuis> matbee: okay. on linux, core files usually get written to the current working directory unless `sysctl kern.core_pattern` is set
13:36 < bnoordhuis> jsmonkey: i've read parts of the MEAP
13:40 < lrvick> bnoordhuis: how do I do that?
13:41 < [jasper]> hej guys, what's the best date/time object to work with in javascript to do calculations like seconds passed since
13:41 < [jasper]> etc?
13:41 < jsmonkey> bnoordhuis: first thought?
13:41 < [jasper]> which can also be transformed into a string
13:42 < lrvick> bnoordhuis: nuke the node_modules folder and rebuild all the things?
13:42 < pgte> jasper: take a look at moment.js: http://momentjs.com/
13:43 < [jasper]> pgte not a bit overkill?
13:43 < pgte> dependes on what you want to do
13:44 < pgte> [jasper]: if you want just to do time diffs, subtracting Date.now()s will do
13:45 < [jasper]> pgte but date.now is an object right...I was thinking more in the way of timestamps maybe?
13:45 < [jasper]> I guess that moment library looks quite nice though
13:45 < ahungry> hi all
13:46 < pgte> [jasper]: Date.now() returns a number, milisecs: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now
13:46 < bnoordhuis> jsmonkey: no strong opinions. there's nothing in there i didn't already know but i wasn't expecting that :)
13:46 < ahungry> anyone wanna try out my open source browser based game? early stages now, http://tactics.ahungry.com/play/ - looking for general or specific feedback :)
13:46 < [jasper]> ah thx pgte
13:47 < bnoordhuis> lrvick: yeah, that works. `npm rebuild` should do it too, i think
13:48 < alchimis_> I am following this http://howtonode.org/deploying-node-upstart-monit  to to create upstart script and monit
13:49 < alchimis_> my question is:  echo $$ > /var/run/yourprogram.pid  how can I get my program pid ?
13:49 < alchimis_> i mean if i do $ ps aux | grep node
13:49 < alchimis_> I can a pid
13:50 < alchimis_> then it is enough to simply create a file and put the id inside it and save it with pid extension
13:51 < jsmonkey> bnoordhuis: I see, ordered it now anyways :) need to dive into node with some updated
13:52 < alchimis_> I have another concern too, I mean next time when the app runs, the pid changes
13:52 < alchimis_> any hint/help
13:52 < alchimis_> any one read my qstion?
13:53 < bnoordhuis> alchimis_: you mean process.pid or ?
13:53 < alchimis_> yeh
13:54 < alchimis_> I am try to create an upstart script with monit, using this http://howtonode.org/deploying-node-upstart-monit
13:54 < bnoordhuis> alchimis_: okay. what is your question?
13:54 < alchimis_> my qstion is: in this line echo $$ > /var/run/yourprogram.pid
13:55 < alchimis_> how to create a pid file and put pid of my program
13:55 < bnoordhuis> from inside your node program, you mean?
13:55 < alchimis_> or terminal script
13:56 < bnoordhuis> terminal script? you mean a shell script?
13:56 < alchimis_> because actually i dont have a .pid file in this path /var/run/   for my app that is running 
13:56 < alchimis_> yeah sh script
13:58 < bnoordhuis> alchimis_: you already pasted it: echo $$ > /bla
13:58 < bnoordhuis> $$ is the pid of the shell script
13:58 < alchimis_> I think I have to change yourprogram.pid
13:59 < alchimis_> so u mean instead of "yourprogram.pid"
13:59 < alchimis_> I have to write "app.pid"  which my program is now app.js
13:59 < bnoordhuis> exactly
14:00 < alchimis_> thanx
14:04 < qbit> substack: mind if I pm-ask you a few questions about your blog setup?
14:05 < DarkArgon> npmjs.org only down here?
14:05 < xonev> DarkArgon: looks like it's hanging for me, too
14:05 < qbit> DarkArgon: same
14:07 < qbit> also bnoordhuis mind if I pm-ask you a few questions about v8 ? :D
14:09 < bnoordhuis> qbit: sure but why not use the main channel?
14:09 < bnoordhuis> for the edification of the masses and all that
14:09 < deepy> if I want to keep track of whenever a person is mentioned on twitter. What should I use?
14:10 < deepy> I've looked at twitscript which doesn't seem to work and evented-twitter which seems to have other issues
14:12 < qbit> bnoordhuis: sure
14:12 < qbit> what are the guiding decisions in which v8 version to use? 
14:13 < bnoordhuis> qbit: performance, stability
14:13 < bnoordhuis> sometimes v8 gains some interesting new api but that in itself is not a reason to upgrade for us
14:14 < qbit> k
14:14 < qbit> how often do you guys do a "test latest version" kind thing? 
14:16 < qbit> also for package maintainers that have v8 as an external dep ( because other packages besides node use it ) - would you say the changelog is a good source of truth for which v8 to use? 
14:17 < qbit> as it is now - i have been testing versions ahead of what node is running ( with some success ) - because postgres-plv8 requires some later versions
14:18 < bnoordhuis> qbit: re latest version, if you mean v8 HEAD, we don't in general. they're not stable and the api is subject to change
14:18 < bnoordhuis> well, i do test it sometimes but that's more to get a feel for new features
14:18 < qbit> k
14:19 < bnoordhuis> re the changelog, probably not
14:19 < bnoordhuis> it always says "performance improvements on all platforms" which is a rather broad generalization :)
14:19 < bnoordhuis> and sometimes the improvements turn out to be regressions (i'm looking at you Utf8Length())
14:20 < qbit> heh
14:21 < qbit> so i should just select the version of v8 that "just works" with all the various components
14:22 < bnoordhuis> qbit: yes. and run benchmarks afterwards :)
14:22 < qbit> cool
14:23 < qbit> would you be interested in the benchmarks as feedback? 
14:24  * niggler high-fives isaacs
14:24 < bnoordhuis> qbit: sure. another pair of eyes is always good
14:24 < niggler> qbit any reason why you dropped the 'u'?
14:25 < zot> practical question: when building with node-gyp, is there a trivial way to get normal compiler output, so that vim quicklist will just work? :)
14:25 < bnoordhuis> zot: you mean node-gyp -v
14:25 < qbit> zot: V=1
14:26 < sheldonh> is there magic for making require('events') in client-side code "just work"?
14:26 < qbit> niggler: never had a u :D - didn't want to be too nerdy 
14:26 < zot> qbit: thanks, that's the one. :)
14:27 < niggler> im not sure which is nerdier: 'qbit' or 'qubit'
14:27 < qbit> niggler: well crap :P 
14:27 < niggler> qubit appeals to the physicists
14:27 < qbit> bnoordhuis: thanks for the info - i will ping ya when i have the tests up somewhere 
14:28 < bnoordhuis> cool, thanks
14:28 < zot> ugh.  annoying.  directories are not relative to pwd in output.
14:28 < sheldonh> hmmm... maybe that question was stupider than i first imagined. EventEmitter probably only makes sense in node, not the browser, eh?
14:28 < qbit> bbiab
14:29 < bnoordhuis> sheldonh: it's pure js so you could conceivably use it in the browser
14:29 < bnoordhuis> sheldonh: i bet browserify has something for it
14:31 < sheldonh> bnoordhuis: browserify: "Write your browser code with node.js-style requires" <-- yes! thank you 
14:31 < niggler> anyone work with google drive?
14:33 < timoxley> sheldonh there's also https://github.com/component/emitter
14:34 < sheldonh> timoxley: thanks
14:35 < JamesMGreene> Is there something wrong with NPM right now?  My publish keeps hanging
14:35 < JamesMGreene> isaacs ryah Nexxy piscisaureus_ mbalho ^
14:35 < niggler> the website is going slow
14:35 < DarkArgon> it also was down a few minutes ago
14:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:57 < Littlex> hey when spawning a child process i am getting this none helping error [Fri Mar 15 2013 15:53:26 GMT+0100 (CET)] ERROR Error: spawn ENOENT - at errnoException (child_process.js:945:11) - at Process.ChildProcess._handle.onexit (child_process.js:736:34)
14:58 < Littlex> andyone got an idea whats going on?
15:01 < addisonj> Littlex: probably the command you are trying to run does not exists
15:02 < qbit> pewpew
15:02 < Littlex> the command exists, just verified that :<
15:03 < addisonj> relevant code helps with things like this
15:03 < skydome> maybe the process you called had an error
15:03 < addisonj> my guess is you are using spawn and passing the arguments improperly
15:03 < addisonj> its kind afunky
15:04 < addisonj> skydome: that would give you an exit with a status code, not an ENOENT
15:04 < zot> 'nuther dumb question: suppose I want to wrap my C++ extensions, "Bar" and "Baz" in a namespace (js object) "Foo".  What's the simplest way to do that…  creating a vanilla JS OBject with 2 members?  Something else?
15:04 < skydome> i got an enoent in fs, calling a file with invalid name, once.
15:05 < Littlex> addisonj: https://gist.github.com/omares/5170464 thats the code
15:05 < bnoordhuis> zot: something like that. i usually add a js shim that loads the binding and sets up exports
15:05 < zot> yeah, that's probably smarter actually
15:05 < zot> (the shim, i mean)
15:05 < Littlex> addisonj: this is the line where it fails https://gist.github.com/omares/5170464#file-capistranodeployment-coffee-L131
15:05 < skydome> or a file without permissions...
15:05 < Littlex> when spawning the capistrano command
15:05 < kenperkins> bnoordhuis: did my question come in about the keepalives?
15:06 < Littlex> fyi its hubot script
15:06 < bnoordhuis> kenperkins: keepalives?
15:07 < kenperkins> I timed out, so I guess not :D
15:07 < kenperkins> here it is: kenperkins:	 bnoordhuis: has there been any more discussion about the http connection keepalives?
15:07 < Littlex> addisonj, skydome: the command exists, the folder exists, and the user has access to the folder 
15:07 < bnoordhuis> kenperkins: you mean in the http client?
15:07 < Littlex> tested it by logging in as the user and executing the capistrano command
15:08 < kenperkins> yea
15:08 < addisonj> are you args being built properly?
15:08 < bnoordhuis> kenperkins: a little. nothing will change before v0.12
15:08 < addisonj> whats the array look like?
15:09 < kenperkins> bnoordhuis: cool. will you be at nodeconf?
15:09 < bnoordhuis> kenperkins: the idea is to make the connection pool easier to configure in v0.12
15:09 < bnoordhuis> and no, i'm not going to nodeconf. too far away
15:09 < Littlex> addisonj: yes - [ 'production', 'deploy', '-S', 'branch=master' ]
15:09 < Littlex> thats the array
15:09 < Littlex> addisonj: the command i want to exec would be "cap production deploy -S branch=master"
15:10 < addisonj> right, yeah that all looks good, hrm, I wonder if the CWD in your opts is messing with it
15:10 < addisonj> whats @capistranoPath?
15:10 < kenperkins> bnoordhuis: that's right, you're in europe right?
15:10 < Littlex> addisonj: { capistranoPath: '/opt/services/hubert/releases/20130314205633/shared/capistrano/reBus' }
15:10 < addisonj> (also, I am very excited to go to nodeconf!)
15:11 < bnoordhuis> kenperkins: yep. the netherlands
15:12 < kenperkins> ajax? fc twenty? az? :D
15:12 < bnoordhuis> haha
15:12 < addisonj> Littlex: two thoughts, either your PATH is getting mangled so that node can't find cap on your PATH, or, something about the options array is throwing it into a hissy fit
15:12 < kenperkins> twente rather
15:12 < Littlex> hmmm
15:12 < addisonj> I would try first to pull off the options all together to see if you at least get a proper shell to cap, and then if that doesn't help, explicitly use the full path to cap
15:12 < Littlex> addisonj: is there an event or a way to check if nodejs can spawn the command?
15:13 < Littlex> aka to verfiy it
15:13 < addisonj> Littlex: you could use some os level toosl, i.e. ltrace or something, to see if fork or something is called, but from a node level, idk
15:13 < Littlex> hmpf
15:14 < brocken> Sorry if this has already been asked, can't see it in my log - I'm going through an angular tut that requires testacular - does testacular not work with the new node?
15:14 < Littlex> cryptical errors is one of the reasons why nodejs is driving me crazy
15:14 < addisonj> heh, as a guy who enjoys OSes quite a bit, I like it :\
15:15 < addisonj> either way, strip it back to your base case (rip of cwd in your opts and use a full path) and you will get a clearer view of things
15:16 < RLa> brocken, contextify module does not compile?
15:16 < Littlex> ah it seems rvm breaks the path to the capistrano/ruby
15:17 < RLa> brocken, i remember it or either some other native lib having compilation problem on newer node
15:17 < RLa> it should be some dependencies dependency
15:17 < brocken> chokidar 0.5.3 doesn't seem to like it
15:18 < Littlex> addisonj: what else do you think of the code?
15:18 < brocken> completely new to node and npm so completely lost when it comes to fixing problems related to it
15:18 < addisonj> Littlex: looks quite clean, if I used cap, I would be interested in it, since we run a hubot where I am at. 
15:18 < addisonj> but we run our own custom deploy solution.... I need to do something like that
15:19 < Littlex> thanks for the feedback
15:19 < RLa> brocken, paste your npm output
15:19 < addisonj> np, dang RVM, one of the things I will never dig about ruby is that stuff, especially after having npm
15:20 < Littlex> gona used rbenv now
15:20 < brocken> RLa: http://pastebin.com/X9wUG7k3
15:20 < Littlex> rbenv > rvm
15:20 < Littlex> dunno who installed rvm on that machine
15:20 < addisonj> rbenv I can at least grok how it works, rvm, while powerful, is to opaque for me
15:21 < addisonj> anyways, GL
15:21 < Littlex> yeah
15:21 < RLa> brocken, mostly looks fine
15:22 < brocken> maybe I'm being an idiot but if I run testacular -v I get a command not found
15:22 < addisonj> brocken: npm install -g testcular 
15:22 < RLa> yeah, you need to install it globally if you want system-wide command
15:23 < addisonj> do you have it on your global path?
15:23 < brocken> yeah I used -g
15:23 < addisonj> "which testacular" if that doesn't resolve, then you don't
15:23 < brocken> I'll try uninstalling and reinstalling
15:23 < EyePulp> feeling wimpy?  Maybe you need to npm install testicular -g  
15:24 < brocken> probably me being an idiot
15:24 < addisonj> do other global npm modules work for you? npm instal -g express && express -v ?
15:27 < brocken> no just tried that and again command not found
15:29 < brocken> I'm going to do a bit of googling see where I'm going wrong before using up any more of all yours times :)
15:32 < jwprox> When I run '$> npm' in powershell I get a npmproxy.dll error, which I understand has nothing to do with npm and more to do with notepad.
15:34 < jwprox> npm.cmd works correctly
15:34 < jwprox> Has anyone run into this, if so how do you get powershell to just recognize npm instead of npm.cmd
15:34 < aMoniker> jwprox: install linux
15:34 < EyePulp> aMoniker: that's a fix.  I like it.
15:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:35 < jwprox> No way! Windows 8 is revolutionary!
15:35 < jwprox> LOL J/K
15:35 < addisonj> brocken: your PATH is messed up, do "echo $PATH"
15:35 < EyePulp> So are most dictatorships, initially.
15:36 < jwprox> Have to use Windows on work computer, was just curious if there is any clever work arounds
15:36 < addisonj> lets not mock our windows brethren, they shall eventually become enlightened, but patience and help is a much better approach than mockery ;)
15:37 < addisonj> that said, powershell, Ain't nobody got time for that
15:37 < EyePulp> Lord Jesus it's a far!
15:37 < bradleymeck> jwprox: you could put npm's path in front of notepads 
15:37 < JamesMGreene> Is npm back from the dead yet?
15:39 < jwprox> But it has "power" in its name
15:39 < jwprox> Must be good
15:39 < addisonj> I have seen some voodoo done with powershell, but thats what it takes to do do must simple things, so meh
15:41 < brocken> yeah addisonj the package seems to install as I've checked out node_modules and it's there, just not got the command
15:41 < brocken> $PATH is /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:/usr/local/git/bin:/opt/local/bin
15:41 < tkellen> if I wanted to request/implement a feature for node fs.readFileSync, how do I start?
15:42 < teadict> https://www.change.org/petitions/google-keep-google-reader-running
15:42 < addisonj> brocken: what osx are you on?
15:42 < addisonj> os*
15:42 < jwprox> Well, cygwin does not get confused about npm vs npm.cmd so looks like we have a compromise.
15:42 < brocken> osx
15:42 < brocken> assume I manually add /usr/local/share/npm/bin to path and all will be well?
15:43 < odarbelaeze> "Writing Qt desktop apps in C++" resource is down because the load :P ?
15:43 < tjholowaychuk> am i crazy or is process.on('exit' not called for an uncaught exception?
15:44 < onerope> Hey guys, i just found this competition
15:44 < onerope> Develop a mobile app for Target - $145,000 in cash prizes http://www.fastcolabs.com/accelerator/retail
15:44 < matbee> process.on('uncaughtException'
15:44 < addisonj> brocken: yep, whereever npm is installing your modules, for me thats nvm and it takes care of the path
15:44 < jocafa> tjholowaychuk:  you are crazy, but for entirely other reasons :D
15:45 < jocafa> my imac sounds like it's about to take off.
15:45 < EyePulp> jocafa: building node?
15:46 < jocafa> playing with blender's cycles renderer
15:46 < jocafa> peg all the cores!
15:46 < brocken> cheers addisonj
15:47 < jwprox> onerope: I'll write a mobile app to calculate the money my wife spends at target.... STACK OVERFLOW... 
15:47 < addisonj> brocken: np, glad its working for you :)
15:48 < jocafa> you're in luck:  we write personal finance software where i work hehe
15:59 < [jasper]> bnoordhuis I saw you were quite active with redis, do you know if there's a more in depth manual for node - redis?
16:01 < bnoordhuis> [jasper]: wrong noordhuis. that's pieter noordhuis, not me. :)
16:01 < Littlex> hey addisonj you were right i get the error because nodejs cant find the command
16:01 < [jasper]> oh, messed up bnoordhuis :(
16:01 < [jasper]> sorry about that
16:01 < [jasper]> it looked really familiour when i saw the name on the site :P
16:01 < Littlex> addisonj: after installing rbenv and providing the full path it works, but what would be the solution without providing the full path
16:03 < addisonj> Littlex: hrm, its been a while since I have played with rbenv, but can't you just put the gem location on your path and all will work?
16:03 < addisonj> so in ~.bashrc: export PATH=$PATH:/my/gem/path
16:03 < Littlex> well basically rbenv does that for you - hmhm i guess its because nodejs does not load the env of the user?
16:04 < addisonj> probably
16:04 < addisonj> how are you starting your app?
16:05 < Littlex> sudo -H -u nodejs sh -c 'source ~/nodejs_global_env/bin/activate && cd /opt/services/hubert/current && bin/hubot'
16:05 < tjholowaychuk> god streams not being uncorked right away is so much better <3
16:07 < pachet> godstreams.js
16:07 < addisonj> Littlex: do you have the rbenv stuff in the bashrc of the nodejs user? if you use "su nodejs -c 'your command'" I know that will properly source bashrc using PAM and all that magic
16:07 < addisonj> not sure if sudo does
16:10 < Littlex> ah it seems my sh workaround does weird stuff
16:10 < addisonj> jergason: I know you
16:11 < jergason> addisonj: YOU
16:11  * jergason high-fives addison
16:11 < damarusama> I need to code a UI in javascript that connect to a hardward
16:11 < damarusama> I need linear slider as well as rotary slider
16:12 < damarusama> this is a tad not on topic but I wonder if anyone know a nice UI library that is more aim toward multimedia
16:12 < jergason> damarusama: probably better off asking in #javascript
16:12 < damarusama> sound fair :) 
16:13 < Littlex> addisonj: yeah its the sh command ;)
16:13 < addisonj> I just keep trying different way to spawn processes till I get the proper one that sources my environment, then I curse PAM
16:16 < TheEwok> Why are you spraying oil on your code?
16:18 < addisonj> jergason: I don't feel like working on what I should be working on, lets make a robot instead
16:18 < jergason> addisonj: tell that to my deadlines and i am yours
16:20 < jergason> seems like i gravitate towards the teams with deadlines
16:20 < jergason> anyways enough complaining in public irc
16:26 < damarusama> quit
16:26 < damarusama> :(  
16:27 < OliverJAsh> with a message queue system such as Kue, what happens when i need to scale and have the message queue run across multiple processes? i can't see how you do that with Kue.
16:28 < st_luke> you figure it out
16:30 < OliverJAsh> st_luke: great…
16:40 < therealkoopa> Does anyone know if there is a module for finding out if divs (boxes) are connected (by overlapping)? 
17:18 < kevinliu> hi all!
17:18 < kevinliu> is cluster-master the defacto method to do a post-deploy rolling restart?
17:21 < qubit01> Can everyone please vote for this http://youtrack.jetbrains.com/issue/WEB-2033
17:22 < mrfox> Hi, I am trying to post data from a node.js instance to a php instance both run locally on the same machine. Is this possible?
17:26 < qubit01> mrfox, yes I do the same thing
17:27 < mrfox> Oh awesome, I'm using the example here http://tech.pro/tutorial/1091/posting-json-data-with-nodejs to post the data out, if I am posting to a .html page running on a php instance how do I receive the data?
17:27 < mrfox> above to qubit01
17:28 < qubit01> an .html page ?  I assume your treating .html as .php ( this needs an extra config entry in httpd.conf ).  If so it should be in $_REQUEST
17:29 < qubit01> mrfox ^
17:29 < qubit01> mrfox,  can you vote for this when you get a chance :)  http://youtrack.jetbrains.com/issue/WEB-2033 , I _really_ want proper typescript support
17:31 < mrfox> qubit01: I'm using the impact game engine and want to pull in data from my node server. Impact only runs on a server to avoid same origin issues. to be honest I am really a newb when it comes to server stuff. If I post the data to localhost/game/index.htm will the client receive it?
17:31 < mrfox> qubit01: sure I'll vote
17:33 < iksik> qubit01: multiselect/cursor support would be much better ;-P
17:34 < qubit01> iksik, that would be sweet - I dont know of any IDE that has that though
17:35 < qubit01> mrfox, im not sure I follow, you have a node server that is posting data to a PHP server?  Who is the client, the one visiting the Node served pages ?
17:35 < iksik> qubit01: me neither, but i know a text editor with support of it :P
17:37 < mrfox> qubit01: I have a node server, and know how to post data from it - I am running a php server on my machine which is serving a .html file, it's all local so the client is a browser on my machine. 
17:38 < mrfox> qubit01: if I post data from the node server to that .html file, can I access that data with javascript for example?
17:38 < st_luke> has everyone seen the giant gummy worms
17:39 < mrfox> again, forgive me because I'm sort of stabbing in the dark here
17:39 < qubit01> st_luke,  no, where ?
17:39 < st_luke> qubit01: https://www.google.com/search?q=giant+gummy+worms&aq=f&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&sa=N&tab=wi&authuser=0&ei=7FtDUe-5B8rB4AOMl4HoDw&biw=1436&bih=806&sei=7VtDUeynHfa14AOLnIGIAg
17:40 < qubit01> mrfox,  no you can't post directly to the client.  You would have to instantiate a request from the client side javascript, or use something like socket.io which allows you to push data to the client through web sockets.  But in traditional web development, you can't push data to the browser
17:40 < qubit01> mrfox, also Im not sure you need the php server, you can serve html pages directly from node, have you seen express ?
17:41 < mrfox> qubit01: OK great, so what would a request from the client side js to my local node server look like? Thanks for the help
17:42 < qubit01> mrfox,  using ajax or jsonp typically, what client side libraries are you using ?  I imagine Impact has something 
17:42 < qubit01> st_luke, that really grosses me out for some reason
17:42 < mrfox> qubit01:  there is a node script to run the impact engine but it seems pretty buggy
17:43 < qubit01> http://furiousfanboys.com/wp-content/uploads/2011/07/Giant-Gummy-Worm-3.jpg haha, Shai-Hulud
17:43 < mrfox> qubit01: just running impact and jquery in the client side
17:43 < qubit01> mrfox,  ah ok, http://api.jquery.com/jQuery.ajax/ is really solid and has a nice api
17:44 < mrfox> so I should be able to grab some data from my node server just using an ajax get request?
17:44 < mrfox> even when both are running locally?
17:45 < shmoon> with socket.io can i do soemthing like socket.broadcast.to('hello/w*') ? basically asterisk and all like regexp?
17:48 < qubit01> mrfox, for sure
17:48 < mrfox> qubit01: awesome, thanks for the help!
17:50 < qubit01> no problem, let us know how it goes
17:53 < mrfox> voting done :)
17:53 < Voting> ?
17:53 < diogogmt> I'm trying to establish a socket connection between two nodes servers, I was thinking about using socket.io but I found some goof information about some RPC libs: https://github.com/joyent/node/wiki/Modules#wiki-rpc
17:53 < Voting> mrfox: what are you referring to? 
17:53 < diogogmt> what you suggest is the best way to have a communication going on between two node servers?
17:55 < mrfox> voting: I was referring to literal voting!
17:55 < niggler> lol Voting 
17:55 < qubit01> Voting, lol, can you vote for this http://youtrack.jetbrains.com/issue/WEB-2033
17:55 < niggler> hey qubit01 !
17:55 < bencevans> diogogmt I'd suggest just using socket.io, it's easy, proven and well documented
17:55 < niggler> related to qbit?
17:55 < Voting> mrfox: I approve. Voting is a good thing.
17:56 < qubit01> niggler, not that I know of!
17:56 < euoia> bencevans: seriously?
17:57 < niggler> the worst name, voting, has to be so
17:57 < euoia> bencevans: I am not convinced on any of those points
17:58 < bencevans> euoia aah, from personal experience i've never ran into any major problems, although most of the work i've done with it is Server <-> Browser. the socket.io-client provides the same api on another node instance
18:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:19 < qbit> lal hi qubit01 :D
18:19 < niggler> some beat you to the punch qbit 
18:19 < SJKramer> Help me, obi-juan qbit. You're my only hope.
18:20 < qubit01> :D
18:20 < qubit01> Im usually qbert, but someone stole that a couple years ago
18:21 < StephenS> lol  qbert as bebert
18:21 < StephenS> lol
18:21 < StephenS> IM OG
18:26 < qbit> lal
18:26 < sheldonh_> can i trust the http library to give me a decoded req.url, such that req.url.match('..') will definitely catch directory traversal attacks?
18:29 < mrfox> qubit01: I am getting the error: XMLHttpRequest cannot load localhost:8080/index.html. Cross origin requests are only supported for HTTP. 
18:29 < mrfox> qubit01: should I use jsonp?
18:30 < CoverSlide> for loading an html file?
18:31 < qubit01> mrfox,  no that wont help, your ports will have to match , can you not serve the HTML files with the node server ?
18:32 < mrfox> qubit01: so the data is being generated by a script on the html page,if I move the script to a separate .js file can I do the get request from that?
18:33 < qubit01> mrfox,  can you post the data somewhere ?
18:33 < qubit01> the html page i mean
18:34 < niggler> mscdex__ what's going on
18:35 < mrfox> qubit01: http://pastebin.com/mELhV2HN
18:36 < mrfox> qubit01: that page is being served on the node.js server
18:36 < mrfox> qubit01: this is the script getting the data on the php server: http://pastebin.com/Grw0zcpA
18:38 < qubit01> im not sure why you need node at all ?
18:39 < mrfox> qubit01: node is reading data from the serial port on the machine
18:41 < qubit01> mrfox, the easiest way to fix it is to just get rid of the PHP part and serve all your HTML pages through node
18:41 < mrfox> qubit01: OK
18:42 < Ralt> yay
18:42 < Ralt> npm has less than 300 open issues now!
18:42 < qubit01> there ways to get around it, you can tell apache to forward requests to node for a given path, like localhost/node/ actually gets handled by the node server, but youd need to configure apache, I'll paste that in case you can't get the other working
18:43 < mrfox> qubit01: that's tricky because the libs I want to use to run the game rely on php
18:43 < marti1125> hi!
18:44 < marti1125> how to create a main.ejs for another ejs
18:45 < marti1125> reuse template ejs.
18:47 < qubit01> mrfox,  here is my config for running node and apache at the same time https://www.refheap.com/paste/12604 , this forwards any thing in the form of localhost/node/ to the node server, you can get around the origins problem that way
18:48 < timwis> Hey guys, I'm trying to do basic HTML parsing, and the environment I'm in apparently needs modules to be in a single file. Something like cheerio consists of a bunch of files/dependencies; is there an alternative, or a way to combine it?
18:49 < azylman> What environment requires that?
18:49 < azylman> That doesn't sound right
18:49 < timwis> azylman: Parse.com's cloud code
18:49 < azylman> Ahh
18:49 < timwis> https://parse.com/tutorials/integrating-with-third-party-services
18:50 < azylman> So upgrading all the code and requiring it doesn't work...?
18:50 < mrfox> qubit01: this goes in your apache conf?
18:50 < azylman> er, uploading
18:50 < bradleymeck> timwis: im sure substack has some way of turning off the browser shims in browserify
18:50 < bradleymeck> may be easiest approach
18:50 < timwis> huh?
18:51 < substack> timwis, bradleymeck: browser shims went away over a year ago
18:51 < substack> oh es5 shims I mean
18:51 < substack> aha nevermind
18:51 < bradleymeck> i mean like buffer etc
18:52 < substack> yes to turn those off you can do --detect-globals=false
18:52 < Ralt> substack: you just use es3 stuff since then? or you just don't care about older browsers?
18:52 < niggler> substack uses browserify
18:52 < substack> Ralt: I don't inflate the bundles with shims by default. If people want that they can load es5-shim themselves
18:52 < Ralt> oh... I thought he was browserify maintainer.
18:52 < Ralt> substack: k
18:53 < niggler> substack eats his own dog food
18:53 < Ralt> but by default, does browserify-generated code requires es5-shim on older browsers?
18:54 < niggler> Ralt http://substack.net/browserify "Browserify bundles with es5-shim by default so you can use shiny new javascript features like Function.prototype.bind() even if your browser doesn't have those yet!"
18:54 < substack> niggler: that information is far out of date
18:54 < davve> 0.1 omg. :)
18:54 < Ralt> niggler: substack just said that browserify doesn't bundle es5-shim anymore.
18:55 < substack> "Tue Mar 29 00:03:52 2011 +0000"
18:55 < qubit01> mrfox, yes
18:55 < substack> ^ a long time ago
18:55  * niggler slaps niggler
18:55 < davve> every time i use node there is a new version
18:55 < Ralt> substack: interested in "does browserify-generated code requires es5-shim on older browsers?" btw
18:57 < mrfox> qubit01: what do the serverName and serverAlias parameters refer to?
18:57 < qubit01> Its for the VirtualHost entry
18:57 < timwis> Hm, so does anyone know a simple way I can get the text of two <li> tag's in an HTML document, preferably without external libraries or with a single-file library?
18:58 < timwis> As someone new to node.js, it's a bit surprising that DOM parsing isn't supported by default, that you need a 3rd party module :/
18:58 < mrfox> qubit01: so they don't need to point to anything?
18:58 <@mbalho> node is a project that provides I/O access to filesystems and networks
18:59 < qubit01> mrfox, not on your local machine, probably no
18:59 < bradleymeck> timwis: node is Javascript only, not necessarily associated with a DOM, browser, etc
18:59 < timwis> bradleymeck: Yeah, I get it
18:59 < timwis> I understand why
19:00 < timwis> just was a bit surprised at first
19:00 < timwis> so does anyone know a simple way I can get the text of two <li> tag's in an HTML document, preferably without external libraries or with a single-file library?
19:00 < mrfox> qubit01: can it be inserted at the end of the .conf file?
19:01 < bradleymeck> timwis: you will want to bundle w/ deps you use with something like browserify into a single file (it will take all of the requires and resolve them and concat to a single file)
19:01 < CoverSlide> timwis: RegExp
19:01 < timwis> CoverSlide: That's true... though I know that's usually shunned upon for DOM parsing. Is it really that bad?
19:01 < qubit01> mrfox, try it, apache will complain if it cant read its config file
19:02 < CoverSlide> if it's simple, like <li>text</li> you should be OK
19:02 < CoverSlide> trying to traverse the DOM using regexp is just asking for trouble
19:04 < timwis> hm, okay
19:05 < timwis> bradleymeck: Interesting, so if I wanted to browserify something like cheerio ( https://github.com/MatthewMueller/cheerio ), would I run it on cheerio's index.js? Or it's /lib/cheerio.js ?
19:05 <@mbalho> trying to host node in an environment that doesnt work with normal node modules is also asking for trouble
19:05 < bradleymeck> mbalho: indeed which is why i have a whole node module system shim
19:06 < bradleymeck> timwis: on w/e the entry point is
19:06 < CoverSlide> timwis: you'd need an entry point for browserify, and form there you can do window.Cheerio = require('cheerio'), and that's all you need
19:07 < CoverSlide> although good point, i haven't looked at cheerio and all its deps, but it's possible somewhere down the chain there might be some node-specifics
19:07 < CoverSlide> and very likely it won't work with es3
19:08 < timwis> hm, interesting
19:08 < timwis> I think I'm going to post on parse.com and ask them how I'm *supposed* to be doing this. mbalho makes a good point.
19:10 < mrfox> qubit01: I am getting a 500 server error trying to open localhost/node/
19:11 < paperkettles> hi @all..! I'm new to ansyc programming and continuations and whathaveyou..
19:11 < paperkettles> currently making a small chat program.. trying to generate new rooms with unique/random IDs.. 
19:12 < qubit01> mrfox,  is node running on the port in the config file ?  Can you try a simple catch all route that just prints hello world to test ?
19:12 < paperkettles> but not sure the best way to handle that along with the db query callback when checking if existing IDs exist
19:12 < paperkettles> http://pastebin.com/K6BCPtXh
19:12 < qubit01> mrfox, this site http://thecodebase.com/bang/ , is all served by node with an apache proxy
19:13 < mrfox> qubit01: here is the config I am using http://pastebin.com/jXwSn0b8
19:13 < Sven_vB> paperkettles, i wonder why your make room function doesn't take a callback? don't you want to do anything with the room when you have one?
19:13 < mrfox> just the snippet I added
19:14 < qubit01> mrfox, and what happens when you just go to http://localhost:8080/
19:14 < paperkettles> hmm I was thinking I'd return it but maybe a callback would be a better approach
19:14 < mrfox> qubit01: perfect!
19:15 < Sven_vB> paperkettles, it's the async approach. if in doubt, always call back; that enables your functions to be later extended to find their result async
19:15 < qubit01> mrfox, well not quite, if youre seeing a response from :8080 and not from :80 then theres an apache config problem
19:15 < qubit01> do you have mod_proxy installed ?
19:15 < paperkettles> yeah good call and simply put - thankyou! I've got to wrap my head around that a bit. async thinking seems pretty awesome just taking some adjusting.
19:15 < qubit01> mrfox, `locate mod_proxy`
19:16 < mrfox> qubit01: I don't know, I'm running the server through XAMPP
19:16 < qubit01> on windows ?
19:16 < mrfox> qubit01: guilty
19:16 < Sven_vB> make sure to require('async') and watch episodes 1 to 8 of "Crockford on JavaScript" on YouTube ;D
19:16 < Sven_vB> paperkettles, --^
19:16 < qubit01> mrfox, yes you are.  Well make sure mod_proxy is enabled in XAMPP, I forget how to do that
19:18 < Sven_vB> paperkettles, also, it might be faster to use a strictly increasing number (like a counter) for uniqueness, and if you need the randomness to hide the room, instead just make a random password for the room.
19:20 < paperkettles> sven_v8 agreed. have a weird spec for this rough design but totally that would be a better way to do it
19:21 < Sven_vB> paperkettles, i like to also prepend a server name to my uniqueness counter, to be able to expand later. and i increase my uniq_ctr to at least the unix timestamp, so that people can't see in the difference between two of their logins, how many other users i had served.
19:22 < Sven_vB> (expand = to multiple servers)
19:26 < therealkoopa> Does anyone know if there is a module for finding out if divs (boxes) are connected (by overlapping)? Or any libraries that find connected nodes in a graph
19:27 < Sven_vB> therealkoopa, box2d can do this in the browser, so probably in node, too
19:28 < Sven_vB> on 2nd thought, i'm not that sure about the div part or if it needs its own structure. but it probably can do them as well.
19:28 < Nabeel> hi all. it seems the ubuntu packages have removed the 'npm' package and integrated it with the main nodejs package (couldn't find anything that said this was happening, no docs updated) - but it also seems the nodejs-dev package wasn't updated, and i'm trying to compile addons, but since hte new nodejs package removed both npm and nodejs-dev, and this give nodejs-dev : "Depends: nodejs (= 0.8.22-1chl1~precise1) but it is not going to
19:29 < therealkoopa> Sven_vB: Is this what you're tlaking about? http://box2d.org/
19:30 < Sven_vB> Nabeel, my apt says nothing about nodejs (the pkg) providing npm
19:30 < Nabeel> @Sven_vB I installed it on a clean system, and it installed npm
19:31 < deoxxa> Nabeel: package managers + node = a hard time
19:31 < Sven_vB> ok then... cool, i'll just try removing the npm pkg then
19:31 < Sven_vB> therealkoopa, yes, looks very like it
19:32 < Nabeel> deoxxa: Yeah, I haven't had a problem until now. But i've got an automated install which does the packages
19:32 < Sven_vB> Nabeel, with puppet?
19:33 < deoxxa> Nabeel: is it not locked to a specific version?
19:33 < Nabeel> @Sven_vB puppet for now, moving to chef
19:34 < Nabeel> deoxxa: it is, but i'm just testing now on a staging box the later versions and compatibility with some of our c++ modules
19:34 < deoxxa> ah yep
19:34 < Sven_vB> Nabeel, indeed, now that i upgraded the nodejs, i dont need npm anymore. thanks for sharing the info!
19:35 < Nabeel> Are you able to install nodejs-dev?
19:35 < Nabeel> Here's what my stuff is showing: http://pastebin.com/kV2e5NA7
19:35 < Nabeel> for some reason I'm unable to file a bug on the ppa
19:35 < Nabeel> would have been nice if there was a post or note or something :\
19:36 < Sven_vB> Nabeel, no, nodejs-dev would have conflicts
19:37 < Nabeel> Sven: is that package now deprecated? shouldn't it have also been updated to 0.10?
19:38 < Sven_vB> dunno. i never cared about installing it, had no need for it; it got here just because the old npm pkg needed it
19:40 < Sven_vB> ot, what made you switch to chef?
19:40 < joehoyle-> hey, I am using a a nodejs libary that uses .success() and .error() methods for callbacks, what does one call this method of callback, presuming it's not the same as standard node callabcks, and also not primises?
19:41 < pachet> bastardized promises
19:41 < joehoyle-> ahh ok, so should I steer clear of implementing this myself?
19:41 < pachet> its not exactly idiomatic, if that's what you're asking
19:42 < joehoyle-> ok cool
19:42 < Nabeel> Sven: *sigh* I'm not sure what to do. I guess I could post on the mailing list
19:42 < joehoyle-> thanks!
19:42 < pachet> more common is for methods to return objects that emit events
19:42 < pachet> so instead of having .error() and .success() as properties, you'd just have .on()
19:42 < pachet> .on('error', fn)
19:42 < pachet> etc
19:43 < pachet> alternatively, if your service returns a promise proper, you'd really just need one method in that case as well
19:43 < Sven_vB> Nabeel, if you really need -dev, why not keep the old node?
19:43 < pachet> .then(successFn, errorFn)
19:44 < Nabeel> @Sven that's what I'm doing for now in production. I'm trying to figure out an upgrade path from 0.8, and seeing what we need to update
19:44 < sheldonh_> crockford's voice puts me to sleep. they should dub his videos
19:44 < Sven_vB> therealkoopa, reading more about that box2d, i might have gotten something wrong. they say it's a C++ lib, but i'm quite sure GRITS used it and that is a JS project. :/
19:44 < therealkoopa> Sven_vB: I looked into it, and I don't think it's what I'm looking for :)
19:44 < pachet> sheldonh_: i agree, he's almost up there with Cooking With Dog
19:45 < therealkoopa> Sven_vB: My problem is really trying to find connected nodes in a graph. 
19:46 < joehoyle-> pachet: that wht I had thought, wondered if the .success() my be an alternative (automatic) to .on( 'success' )
19:46 < Sven_vB> therealkoopa, oh... then wouldn't breadth-first search be an idea?
19:46 < therealkoopa> Sven_vB: Perhaps, though I'm looking for an example because my implementation isn't working so well.
19:47 < azylman> therealkoopa: http://en.wikipedia.org/wiki/Breadth_first_search#Pseudocode
19:48 < joehoyle-> pachet: is there anythign in node code that can create "emitter" objects for me to return from methods I am writing?
19:48 < pachet> joehoyle-: not explicitly
19:49 < pachet> the typical pattern is to have your constructors inherit from events.eventEmitter
19:49 < pachet> s/eventEmitter/EventEmitter
19:49 < Sven_vB> therealkoopa, if your code is jslinty i might have a look at it ;)
19:49 < joehoyle-> pachet: ok cool, I look that up, thanks!
19:49 < pachet> joehoyle-: yeah there's a bunch of tutorials on it out there  :]
19:50 < joehoyle-> pachet: cool thanks, just wanted to check I was looking in teh right direction!
19:50 < pachet> yep!
19:52 < Sven_vB> therealkoopa, how do you store the nodes and links between them?
19:53 < therealkoopa> Sven_vB: The "nodes" for this idea is just an object with left, top, width and height properties (div in the browser) world. Given any object, I'd like to find out what other object it's connected to based on whether its area intersects others.
19:55 < Sven_vB> oh ok... then not that kind of graph search i had thought of
19:55 < matbee> Anyone aware of the best Facebook (non express-session-oriented) oauth library for node?
19:56 < matbee> or just plain ole oauth
19:57 <@mbalho> matbee: still pretty DIY but if you like vanilla.js https://github.com/maxogden/github-oauth/issues/3
19:57 < qbit> substack: do you run nginx or another webserver in front of your blog? 
19:57 < substack> qbit: no
19:58 < samholmes> Has anyone ever skipped out on work? :P
19:58 < substack> right now I just have a node tcp socket forwarding to port 8000 so I don't need to run the glog server as root
19:58 < substack> and later I'll fix bouncy to not suck so hard
19:58 < qbit> bouncy does reverse proxy kinda stuff? 
19:59 < qbit> i am tryign to figure out the best way to use glog from behind nginx 
19:59 < qbit> thinking i will just do a reverse with nginx to node runnign as a non-priv user
20:00 < matbee> mbalho, cool, I'll give it a shot
20:00 < qbit> nm on bouncy - just looked at your github 
20:00 < qbit> why is it sucky? 
20:02 < substack> qbit: because of bugs
20:03 < qbit> oh :P 
20:06 < matbee> mbalho, if your documentation wasn't so crappy, I'd actually give it a shot :P
20:11 < st_luke> wow
20:12 <@mbalho> matbee: i said it was DIY :)
20:12 < matbee> hehehe
20:12 < matbee> Yeah, I'll just do it all myself, there doesn't seem to be any maintained libraries out there anyway
20:14 <@mbalho> thats the node spirit
20:15 < s5fs> "the code *is* the documentation"
20:15 < willwh> hey guys - anyone using cloud9? I'm wondering about specifying the port that a project binds to when you run it from the IDE
20:15 < dabarnes> right
20:16 <@mbalho> i dunno i should probably add a documentation generation framework to my 60 line node module :)
20:16 < matbee> s5fs, by the time I read and understood the code, I could have written it myself ;)
20:16 < willwh> i.e. in my app; I go process.env.PORT || 3000 -> it seems to start up on a totally random port :]
20:17 < context> willwh: is env.PORT a random number?
20:17 < s5fs> matbee: yeah, that's always a challenge with javascript. so few loc make it easy to just write fresh yourself, these days I try to peek at existing approaches/libraries and then decide if it's worth my time.
20:18 < willwh> context: not sure :)
20:22 < willwh> I am not setting it anywhere
20:22 < willwh> it's just the cloud9 ide launching the project
20:22 < willwh> so I assume it sets a random port
20:29 < DTrejo> anyone know how to use require('assert') in such a way that exceptions are not thrown, but instead messages are returned?
20:29 < DTrejo> has anyone written a thing like that?
20:30 < DTrejo> basically, I'm using assert to do validations, and I want to be able to recover from them, and easily discover where the problems happened, without running a debugger. Note that I am doing this in the browser using browserify 1.x
20:30 < devongovett> really hate to be asking this, but what's the best xml generation module for Node? there are a bunch of them on npm without a whole lot of activity it seems, or I'm missing something.
20:31 < substack> DTrejo: I think Raynos has a module that does what you want
20:31 < DTrejo> oh great
20:31 < DTrejo> was about to @mention you
20:31 < substack> it outputs TAP instead of throwing
20:32 < DTrejo> thanks
20:32 < DTrejo> looking through his stuff for it now
20:35 < deoxxa> devongovett: i use `xml'
20:35 < deoxxa> devongovett: i.e. `npm install xml'
20:36 < devongovett> deoxxa: thanks. also just found https://github.com/polotek/libxmljs
20:37 < DTrejo> substack: I think this solves my problem https://github.com/Raynos/validate, thanks
20:38 < DTrejo> Oh, hmm
20:39 < DTrejo> either that or do assert = require('assert'); assert.fail = console.log; or something like that
20:40 < sheldonh> just fact-checking stack overflow. did JSGI kinda fall flat in the node.js community? i went looking for "ruby's rack for node.js" and found "not really" here: http://stackoverflow.com/questions/4770206/is-there-a-jack-equivalent-for-nodejs
20:43 < Raynos> Dtrejo: valid-schema is better
20:52 < No9> Hey anyone know how the builds for the binary releases are are done?
20:52 < Raynos> DTrejo: https://github.com/Colingo/valid-schema
20:53 < DTrejo> cool thanks. So I think my problem is a mix of using asserts wrong, and the fact that I dont have long stack traces
20:54 < DTrejo> Raynos: is there a better way than using the long-stack-traces module, or changing node's asserts to return the error instance instead of throwing or something?
20:54 < Raynos> ?
20:54 < Raynos> I don't know
20:54 < DTrejo> umm, ignore my question for a little while, I need to think more before I ask again
21:00 < allenTarns> Quick, broad question for those kind enough to answer: Do npms/modules REQUIRE compilation?
21:00 < allenTarns> I am trying to pitch node.js to our mgmnt team
21:01 < niggler> depends allenTarns there are plenty of modules which are pure js
21:03 < allenTarns> Thanks niggler, we were not sure
21:03 < paramMeter> does anybody know how I could pass an extra param into the function in async library?
21:03 < Havvy> allenTarns: If you want an example of a purejs module:  https://github.com/havvy/nrc
21:03 < paramMeter> I want to pass an array that will store the results of whatever that "thread" is doing
21:03 < dabarnes> uhh pass it an array
21:04 < paramMeter> dabarnes: I see the signature is this: async.each(someArray, aFunctionToWorkOnCurrentItemInArray, cbFunction)
21:04 < azylman> paramMeter: It sounds like you maybe want to be using async.map
21:04 < othiym23> DTrejo: longjohn is my favorite long stacktrace module if I'm using domains, trycatch if I'm not
21:05 < paramMeter> azylman: let me check it out!
21:05 < othiym23> altho the new version of trycatch also has domains support, so you can use it for both
21:05 < allenTarns> Thanks Havvy. Do you know if there is a flag/filter on npmjs.org
21:05 < DTrejo> thanks :)
21:05 < Havvy> There is no flag on npmjs that I know of.
21:06 < niggler> allenTarns what's the objection to compiling something?
21:07 < niggler> do you have to pay a compiler tax?
21:07 < allenTarns> end user app with no network connectivity
21:07 < paramMeter> azylman: hmm, I see I need to pass a function in. Does this mean I should create some sort of closure that holds the array temporarily?
21:07 < allenTarns> avoid complications
21:08 < allenTarns> im open to other solutions tho! :)
21:10 < samholmes> bluecheese quesadia?
21:11 < samholmes> its actually not that bad..
21:11 < samholmes> a bit salty
21:11 < azylman> paramMeter: http://pastebin.com/1xm1S2dT
21:11 < azylman> That's what you're trying to do, right?
21:11 < azylman> With async.map, it returns an array of everything you pass ot the callback
21:12 < azylman> So that squares every item in the input list and returns an array of all the squares
21:13 < azylman> The first parameter is the collection, the second is the iterator (the function to be run on every element in the collection), and the last is the callback that gives you an error (if there was one) or the array of results
21:13 < niggler> allenTarns you can always look at the source
21:14 < allenTarns> yeah i see that now, we will need to audit our stack and see if its achievable.  
21:26 < ningu> hey, has anyone here had experience with client-side template rendering? I'm reading a lot of conflicting opinions about whether it's "fast enough" to use client-side templates and data binding. I'm going to give it a try myself but just wondering.
21:26 < othiym23> ningu: depends, like everything else in software ;)
21:27 < ningu> othiym23: yes, I realize that.
21:27 < ningu> I'm not looking for a yes/no answer so much as more information on which to make an educated decision
21:27 < paramMeter> azylman: Thanks!
21:27 < othiym23> if you're going to be doing a lot of complex rendering and want to do responsive design with mobile support, it's gonna be challenging
21:27 < paramMeter> azylman: last last question. There are times when I dont want a particular item to show up on the list produced
21:27 < ningu> ok. but what if I have something simple like a table with 5 columns and somewhere between 5 and 500 rows and want to populate it from json?
21:27 < othiym23> if you've got a fairly simple design and the templated elements are reasonably straightforward, then you can probably do everything in the client
21:28 < paramMeter> I've tried a simple "return"
21:28 < paramMeter> but that doesnt work
21:28 < othiym23> ningu: only caveat is that it might be slow to render on mobile
21:28 < othiym23> if you care
21:28 < paramMeter> tried cb(null, null)
21:28 < paramMeter> but then may array is filled with nulls
21:28 < ningu> othiym23: I probably don't care but yeah
21:28 < ningu> I realize that's an issue
21:28 < ningu> I'll try it out and see what the limits of desktop browsers are
21:28 < ningu> I have a relatively old laptop so that will be a good test :)
21:28 < othiym23> it's going to take large data sets to bog down recent builds of Chrome, Safari or Firefox
21:29 < othiym23> like, thousands of rows
21:29 < ningu> what counts as "large"? ok
21:29 < othiym23> unless your code totally suxx
21:29 < ningu> that's more or less what I was wondering is what is the limit is
21:29 < daekano> dem repaints
21:29 < othiym23> ningu: what framework are you using?
21:29 < ningu> I won't have more than 1000 I believe
21:29 < ningu> othiym23: client-side? still looking at my options but I'm looking most seriously at angular and knockout
21:29 < othiym23> I've never done any benchmarking, so I'm curious what the performance difference between, say, AngularJS and Knockout + Handlebars might be
21:30 < ningu> yeah, I'm curious too
21:30 < ningu> there are various tests at jsperf but all are more or less contrived
21:30 < othiym23> yeah
21:30 < ningu> that's why I asked here rather than just looking up numbers
21:30 < azylman> paramMeter: Yeah, I think in that case you'd need to filter the result in your callback to remove nulls :/
21:30 < ningu> doens't angular basically use handlebars too? or at least... some variant of the same idea
21:30 < othiym23> I think you'll be fine doing it client-side with 5 x ~500 cells to render
21:31 < azylman> I don't believe there's a method in async that does a combined filter + map, but if you find one definitely let me know because I've needed to do that before ;)
21:31 < ningu> it does interpolation with {{foo}} anyway
21:31 < ningu> but it doesn't have {{each}}
21:31 < othiym23> ningu: Angular has its own templating system, which could be Handlebars but doesn't really feel like it
21:31 < ningu> yeah, I know it isn't the same but it resembles it a bit
21:32 < othiym23> ningu: mbalho might be able to give you more solid numbers, if he's around and in a giving mood
21:32 < ningu> hehe ok
21:32 < othiym23> altho I think he mostly just uses browserify plus a stack of substack madness to do his stuff
21:32 < ningu> if I had a team of people or whatever we might do our own thing somehow -- which seems to be the idea with backbone
21:33 < ningu> but this is more of a personal project with a more limited audience
21:33 < ningu> so I want to do things that will make my code maintainable and not reinvent the wheel
21:33 < othiym23> I'd give it a shot with AngularJS
21:33 < ningu> and also not have spaghetti code which is what I have now basically
21:33 < othiym23> and then write up your experiences so we can all learn from your pain ;)
21:33 < ningu> hehe yeah
21:33 < ningu> well, faceleg gave me a couple pointers yesterday
21:34 < ningu> by which I mean tips, not the pointers that have been giving him headaches
21:34 < ningu> for some reason I have a distrust of using google frameworks
21:34 < ningu> even though angular looks pretty cool
21:35 < ningu> I guess it's the top-down management -- could be shut down or fundamentally changed without community input
21:35 < ningu> but I realize that's a compromise you have to make
21:35 < othiym23> I totally rolled my eyes at the presentation on AngularJS at Fluent last year because the last thing HTML needs is more frameworks that require custom markup, but I've come around
21:35 < ningu> it seems relatively unintrusive
21:35 < othiym23> mostly because the more I try to use Backbone for anything real, the more it just sorta baffles me
21:36 < ningu> yeah that was more or less my take on backbone
21:36 < othiym23> in principle it feels like it's designed just for me, with the separate concerns and everything, but the reality is hard for me to get comfortable with
21:36 < ningu> what I don't like about knockout based on a bit I've seen is that you need to use things like handlebars and put your template in a <script> tag
21:36 < othiym23> Knockout is nice because it's so single-minded, but...
21:36 < othiym23> yeah
21:36 < ningu> I'd rather have it all as one html node
21:36 < othiym23> I really like plates as well
21:36 < othiym23> flatiron/plates that is
21:37 < ningu> oh, yeah, I looked at that but it didn't click with me somehow
21:37 < allenTarns> Angual is exclellent
21:37 < othiym23> but AngularJS is well-designed enough that it sorta overcomes my objection to it being an all-in-one framework
21:37 < allenTarns> Angular* is excellent..
21:38 < ningu> this is a totally separate issue but I also wonder sometimes about the attempts to develop all-encompassing server + client frameworks like asp or whatever
21:38 < ningu> right now I plan to just leave my server-side app in express just like it is
21:38 < ningu> and only tweak the template rendering and data binding
21:38 < ningu> all-in-one client side is about as far as I'm willing to go, not something that tries to tie *everything* up
21:38 < othiym23> GWT FOREVER
21:39 < ningu> hehe
21:39 < ningu> is that on the way out?
21:39 < othiym23> imma port GWT to Meteor so it can be moderner
21:39 < ningu> always felt too heavy for me
21:39 < othiym23> if Google keeps killing off services built on GWT, probably
21:39 < othiym23> although I actually don't know if Reader was built with GWT
21:40 < othiym23> I just assumed it was due to it having such a similar design to Groups
21:40 < paramMeter> azylman: in this case, it's just easier to send "null" and then filter it in a loop later on with a simple if-statement....
21:40 < ningu> that reminds me... I'm currently using a couple jquery-ui elements like their dialog and autocompleter. if I go to angular what will become of that? 
21:40 < ningu> I suppose I could just keep using it the same
21:41 < daekano> ningu: jquery works well with angular
21:41 < ningu> as long as the right data bindings are in the dialog markup
21:41 < ningu> daekano: yes, but this is jquery-ui, I guess it doesn't matter
21:41 < ningu> I guess I could use whatever
21:41 < daekano> personally I would do everything I could in angular lol
21:41 < daekano> don't see why you would add bloat
21:41 < ningu> daekano: but angular doesn't actually give you any ui elements or interactions right?
21:41 < ningu> or maybe it tries to do more than I realized
21:46 < ningu> "I know people who use Batman with a Perl server." -- that sounds like a good movie
21:46 < allenTarns> http://angular-ui.github.com/
21:46 < ningu> allenTarns: oh cool, will check it out after the meeting I have to go to
21:46 < ningu> thanks for the feedback
21:46 < ningu> bbl
21:47 < DroppedonCaprica> hello gentleben
21:47 < korilo> gday guys
21:48 < DroppedonCaprica> Didn't there used to be a migration guide
21:48 < DroppedonCaprica> for when you're migrating from an older version of node from to .8?
21:49 < DroppedonCaprica> seem to remember something like that existing a while ago
21:52 < allenTarns> Anyone have xp with sending commands to an active child process
21:53 < allenTarns> ?
21:53 < DroppedonCaprica> not personally no
21:53 < DroppedonCaprica> read documentation about it before, bout it
22:02 < DroppedonCaprica> HAH, finally found it
22:02 < DroppedonCaprica> https://github.com/joyent/node/wiki/API-changes-between-v0.6-and-v0.8
22:02 < DroppedonCaprica> SHAZAM
22:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:29 < kenperkins> mikeal1 around?
23:31 < mikeal1> yesh
23:31  * niggler ambushes mikeal1 
23:33 < mikeal1> haha
23:33 < frdmn> hey
23:33 < frdmn> can someone help me with Hubot?
23:34 < mikeal1> kenperkins: sup
23:34 < frdmn> i just tried to deploy a new version of my currently working hubot to heroku and it gets rejected with: "npm ERR! cb() never called! npm ERR! not ok code 0. Failed to install --production dependencies with npm. Heroku push rejected, failed to compile Node.js app"
23:35 < frdmn> and i am actually a total nodejs newbie
23:36 < kenperkins> mikeal1: just trying to track down a wierd bug with fakeweb and request. I think it's because fakeweb is hardcoded to request 2.1.1
23:36 < kenperkins> mikeal1: but my app was using 2.16.x
23:36 < kenperkins> (was looking for a resume method on the request object)
23:38 < mikeal1> yeah, 2.1.1 is crazy old
23:38 < kenperkins> is there a better way to fake responses?
23:38 < azylman_> I've used nock before
23:39 < Virunga> Hi, do you think that installing node on os x through the mac os x installer is the way to go? 
23:39 < othiym23> kenperkins: if you find the basic approach of fakeweb useful, you might as well fork it and updated
23:39 < azylman_> I installed it via nvm
23:39 < kenperkins> Virunga: if it's for dev, why not just install source and compile?
23:39 < othiym23> I know the author, and he's not going to be working on it again anytime soon
23:40 < kenperkins> othiym23: I already found a much more recent version of fakeweb, "node-fakeweb"
23:40 < kenperkins> which is also quite stale :S
23:40 < othiym23> that's the version I'm talking about ;)
23:40 < azylman_> kenperkins: You could look into nock, that's what we use
23:40 < othiym23> oh no it's not, you right
23:40 < kenperkins> azylman_: reading now
23:40 < mikeal1> kenperkins: there's one that hueniverse wrote
23:40 < othiym23> ctide/fakeweb is less stale than thegreatapp/node-fakeweb, according to ye olde github
23:40 < Virunga> kenperkins: well i'd prefer to have something to manage the updates and versions
23:41 < Virunga> I'll try nvm
23:41 < othiym23> Virunga: look at nave
23:41 < Virunga> I already tried n and nave but have some problem
23:41 < kenperkins> azylman_: this looks much better.
23:41 < kenperkins> thanks
23:41 < azylman_> np
23:41 < othiym23> Virunga: I install the main node distro using the official installer and then use nave to run other versions for testing
23:41 < Virunga> npm doesn't work with those
23:42 < Virunga> othiym23: oh, ok. 
23:42 < othiym23> npm had better work with nave, cuz isaacs wrote both ;)
23:42 < st_luke> ?
23:42 < st_luke> nave works fine with npm
23:42 < Virunga> Sure, it'd be my machine of course. 
23:43 < st_luke> I use it all the time
23:43 < st_luke> but I don't install nave with npm
23:43 < st_luke> just make a ~/.local/bin for stuff like that
23:44 < Virunga> mm
23:45 < Virunga> Well, thank you for advices people. 
23:45 < st_luke> othiym23: it's less work to just use nave for the made version as well :P
23:45 < st_luke> ohcibi: `nave usemain v0.10.0`
23:45 < st_luke> installers are stupid
23:45 < othiym23> st_luke: well, if you use recent versions of nave, you *are* using the official binaries
23:46 < st_luke> othiym23: binaries are fine
23:46 < othiym23> st_luke: eventually I got tired of having to keep porting all my globally installed stuff between versions, so now I just leave them all stashed in /usr/local/lib
23:46 < st_luke> im talking about .pkg installers
23:47 < st_luke> ohcibi: ? nave doesn't get rid of your /usr/local/lib/node_modules when you `usemain` on a new version
23:47 < st_luke> like nvm does
23:47 < othiym23> psst st_luke I'm over here
23:47 < st_luke> well nvm doesnt get rid of them
23:47 < st_luke> sorry
23:47 < othiym23> well, maybe I'll switch
23:47 < cTIDE_> i wrote my fakeweb because node-fakeweb was dead
23:47 < othiym23> having only one mechanism for everything would be simpler, which is nice
23:48 < st_luke> nvm does this annoying per directory thing which is nice from a certain perspective but a bit annoying in practice
23:48 < st_luke> I used nvm for a really long time and thought it was fine, then I switched to nave randomly one day and have been super happy with it
23:48 < othiym23> me too, st_luke 
23:49 < st_luke> the only slightly annoying thing nave does is go over the network every time for `usemain`, but I just submitted a patch that copies the local version if it exists instead of trying to download every time
23:50 < cTIDE_> and node-fakeweb was missing something i needed
23:50 < cTIDE_> i don't remember what though
23:51 < cTIDE_> kenperkins: feel free to take it over :)
--- Log closed Sat Mar 16 00:00:22 2013
