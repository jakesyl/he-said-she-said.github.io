--- Log opened Mon Jul 16 00:00:23 2012
00:04 < zeus> any coffeescript users out there?
00:09 < astropirate> zeus, no the language died
00:14 < ljharb> coffeescript, gross.
00:15 < zeus> ljharb: Lol, I know. But I want to contribute to a package that uses it, so I was wondering how people get around the issue of debugging the compiled version of coffeescript instead of the actual coffescript itself
00:16 < Ramone> anyone know if mocha runs on 0.8? seems like no...
00:17 < ljharb> zeus: coffeescript people will talk about "source maps" for debugging but that just sounds like nonsense to me
00:27 < prettyrobots> zeus: Try #coffeescript.
00:27 < CIA-93> node: Mike Morearty v0.8 * r19aa05f / doc/api/child_process.markdown : doc: fix bug in child_process.spawn() sample code - http://git.io/IvYvsQ
00:27 < zeus> prettyrobots: Danke :)
00:29 < prettyrobots> Travis CI makes me happy.
00:57 < ashnur> i wonder where should i report and what, when trying to debug my script, i get this: http://pastie.org/4263434 
00:58 < ashnur> i guess i have to resort again to browsers :(, really sad
01:03 < SkareCrow> ashnur, what are you typing?
01:04 < ashnur> i'm sorry, but I do not understand what you mean
01:06 < deoxxa> require("winston").log("testing") << why does this not output anything?
01:06 < deoxxa> oh
01:06 < deoxxa> derp
01:06 < deoxxa> IGNORE ME
01:07 < SkareCrow> ashnur, just taking a peak the line giving the error is trying to trim a line from stdin
01:07 < ashnur> SkareCrow: right. I am trying to use node's internal debugger, and this is an error I get 
01:08 < SkareCrow> https://github.com/joyent/node/blob/master/lib/repl.js#L284
01:09 < SkareCrow> looking at that i'd assume you're typing in something that's causing the error.. what are you typing in that results in you receiving that error?
01:09 < ashnur> ah, I get it now. 
01:09 < ashnur> 'continue' 
01:10 < ashnur> was the last thing I tried. but it gave me multiple times for multiple things.
01:10 < ashnur> no I have to update node, because I am on 0.8.1
01:11 < SkareCrow> https://raw.github.com/joyent/node/v0.8.2/ChangeLog
01:11 < SkareCrow> think it might be * repl: fix passing an empty line inserting "undefined" into the buffer (Nathan Rajlich)
01:11 < SkareCrow> ?
01:11 < ashnur> dunno. we will see after I manage to update it
01:12 < SkareCrow> you using nave?
01:12 < ashnur> no
01:12 < ashnur> nvm
01:13 < ashnur> should I use nave?
01:13 < SkareCrow> up to you.. it's really nice for installing new versions, checking versions and testing multiple versions
01:13 < chilts> I use nvm quite happily, use whatever works for you :)
01:13 < chilts> they're all pretty similar
01:14 < SkareCrow> you can type `nave use 0.6.19` for instance and it will install it into ~/.nave/installed
01:15 < SkareCrow> only installs if it's not already in there other wise it switches shells setting the paths for the version you specify
01:15 < ashnur> i guess it's a bit easier to use
01:15 < SkareCrow> or you can install /usr/bin by typing `nave usemain 0.8.2`
01:16 < ashnur> but I already started the install, so this will remain to another day
01:16 < SkareCrow> to /usr/bin*
01:19 < SkareCrow> ashnur, looks like that is the problem
01:19 < SkareCrow> the call right before that to trimWhitespace was returning undefined if the command didn't match /^\s*(.+)\s*$/m
01:20 < ashnur> i hope that you are right. :)
01:20 < SkareCrow> https://github.com/joyent/node/commit/9126dd2d903f3cf842f0c11a8349d794dde68e98
01:21 < ashnur> i guess that is's another 15 minutes till I can check it out
01:23 < SkareCrow> would have been caused by typing continue + enter twice, right?
01:25 < ashnur> I am not sure, it might have happened that way, yes
01:34 < Noldorin> what dirs should i add to my path for node & npm?
01:36 < SkareCrow> Noldorin, Windows or Linux?
01:36 < Noldorin> SkareCrow: os x lion
01:37 < Noldorin> the blog posts i find seem to concern out-of-date versoins
01:37 < Noldorin> and suggest prepending, which horrifies me.
01:37 < SkareCrow> don't know anything about Mac's other then they're a waste of $3,000
01:37 < cgiffard> Node usually installs to /usr/local/bin
01:38 < Noldorin> SkareCrow: pfft. won't get into a debate here, but think of it like BSD if you prefer :P
01:38 < Noldorin> cgiffard: okay, so what about npm?
01:38 < SkareCrow> idk how you installed but i'd assume it's like cgiffard
01:38 < Noldorin> to get npm packages to run from the cli
01:38 < cgiffard> 10.8 here, and that's where it is.
01:38 < cgiffard> nom and node are in there
01:39 < cgiffard> I compiled from source, not sure where the package installer puts it
01:39 < SkareCrow> npm installs to the same directory as node
01:39 < npmbro> SkareCrow: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20installs%20to%20the%20same%20directory%20as%20node
01:39 < joeandaverde> any in here greatly familiar with v8 api?
01:39 < cgiffard> *npm
01:40 < SkareCrow> does mac have a locate?
01:40 < cgiffard> yep
01:40 < cgiffard> but it's not on by default
01:40 < cgiffard> you need to start its launchd job and it takes a little while to build the index
01:40 < Noldorin> SkareCrow, gcgiffard yes but npm packages are certainly not installed there
01:41 < joeandaverde> https://github.com/joeandaverde/joed/blob/wrapper/HttpWrap.cpp   i think I'm retaining the callback incorrectly line: 36. Any tips on how to do this correctly? See line 64 for how i'm trying to fetch that callback.
01:41 < ashnur> SkareCrow: now I don't get the error
01:41 < ashnur> but I am still unable to debug
01:41 < joeandaverde> I'm getting a segfault when attempting to invoke the callback
01:41 < Noldorin> cgiffard: worth having on though, you think? or just live with 'find' ?
01:41 < SkareCrow> ashnur, nice =P
01:42 < cgiffard> if you install something with npm install -g, it goes to /usr/local/lib/node_modules
01:42 < SkareCrow> ashnur, why's that?
01:42 < cgiffard> but if you want CLI, I think the package has to do that itself
01:42 < Noldorin> okay
01:42 < ashnur> probably because I am inapt.
01:42 < cgiffard> `which express` on my system turns out /usr/local/bin/express
01:43 < cgiffard> Noldorin: yeah, I always turn it on.
01:43 < Noldorin> cgiffard: pretty minimal system impact?
01:43 < cgiffard> Noldorin: I haven't noticed any. Just typing 'locate' will prompt you to start its launchd job
01:43 < SkareCrow> ashnur, you can always learn if that's what you're saying
01:43 < Noldorin> indeed
01:44 < Noldorin> cgiffard: i'd expect locate to use the same database that Finder does. is that the case?
01:44 < cgiffard> Noldorin: You mean spotlight? Nope, different DB as far as I can tel
01:44 < cgiffard> *tell
01:44 < ashnur> SkareCrow: yeah, i learned that I should write cont and not continue
01:44 < Noldorin> cgiffard: i mean finder search...
01:44 < Noldorin> which spotlight probably uses implicitly
01:44 < cgiffard> Noldorin: That's run by spotlight
01:45 < Noldorin> other way round i thought, but okay :)
01:45 < cgiffard> cgiffard: mdworker is what runs spotlight, if you want to be really technical
01:45 < cgiffard> cgiffard: which hangs off fsevents
01:45 < Noldorin> hehe
01:45 < Noldorin> self-highlight nice ;)
01:45 < cgiffard> Noldorin: whoops
01:46 < SkareCrow> ashnur, lol did you follow http://nodejs.org/api/debugger.html?
01:46 < cgiffard> Noldorin: While locate might get its data from fsevents, I'm nearly 100% sure it maintains a totally distinct DB
01:46 < Noldorin> sounds fair enough
01:47 < Noldorin> cgiffard: so back to my issue, let me be specific. i installed https://github.com/clarkf/minifyjs fine, but it's not available from the command-line as it purports
01:47 < cgiffard> I assumed you installed via nom, right?
01:47 < cgiffard> *npm
01:47 < Noldorin> yeah
01:47 < cgiffard> Hrm. I'll have a go :)
01:48 < Noldorin> cgiffard: it looks like you're using colloquy with auto-correct on heh
01:48 < Noldorin> cheers.
01:48 < cgiffard> do you have /usr/local/bin in your path?
01:48 < Noldorin> yeah
01:48 < ashnur> SkareCrow: not exactly, I am using mocha, and it doesn't do what I expected. it breaks everywhere but not where I wish(and where I wrote debugger;.
01:48 < Noldorin> naturally, since homebrew uses it
01:48 < cgiffard> It put /usr/local/bin/minifyjs -> /usr/local/lib/node_modules/minifyjs/bin/minify
01:48 < cgiffard> And yeah, works for me on the CLI
01:49 < cgiffard> perhaps npm didn't have permissions to write to /usr/local/bin?
01:49 < Noldorin> cgiffard: drwxrwxr-x
01:49 < cgiffard> The symlink could have failed, and if the installer script caught it, npm wouldn't have errored out
01:49 < Noldorin> i see
01:50 < ashnur> it just skips over everything interesting. 
01:50 < cgiffard> is the symlink in there? You could make it yourself?
01:50 < SkareCrow> ashnur, are there actual break points where it's breaking? I haven't used the new CLI debugger yet only node-inspector and I've been working on my own to replace node-inspector because I think it's kind of crap
01:51 < ashnur> SkareCrow: I don't think there are. 
01:51 < Noldorin> cgiffard: yeah let me tryâ€¦ curious why it failed though. permissions look fine, no?
01:51 < cgiffard> who owns the folder? You? root?
01:52 < cgiffard> Noldorin: On my system, I'm the owner, and the group 'admin' is the group.
01:52 < cgiffard> Noldorin: I assume your OSX account is a local admin right?
01:52 < Noldorin> yeah
01:52 < SkareCrow> ashnur, have you used a debugger? it's kinda hard to tell you what the issue is
01:52 < Noldorin> cgiffard: and same here
01:52 < ashnur> I am trying to simplify the whole issue first, I have a strong feeling that my limited understanding is the main issue here :)
01:53 < Noldorin> cgiffard: okay i think i see why it didn't symlink now. my node_modules is in ~ for some reason :/
01:53 < SkareCrow> ashnur, try using step rather then cont
01:53 < cgiffard> hrm. Could be a problem with your env
01:53 < ashnur> SkareCrow: I have used a lot of debuggers, mainly php, but I used chrome's debugger, and before that, firebug's
01:53 < ashnur> SkareCrow: ok
01:53 < cgiffard> Noldorin: I remember I had a similar issue on ubuntu a couple of years ago
01:54 < Noldorin> cgiffard: is it normal that node_moduels should be under ~ in any cirucmstances?
01:54 < SkareCrow> ashnur, i'm going to treat you like you have no idea what you're doing as i have no idea what you're doing and I'm not exactly the best person at getting that kind of information out of people =P
01:55 < ashnur> =)
01:55 < cgiffard> Noldorin: Oh I guess if you want more granularity about what's installed on a per user basis
01:55 < SkareCrow> based on you talking about continue and it skipping over the good parts i'm just going with you using cont instead of step which will cause the debugger to run until the next breakpoint
01:55 < Noldorin> cgiffard: i mean, i have node_modules in both actuallyâ€¦ not sure how that happened!
01:55 < cgiffard> Noldorin: but /usr/local/lib seems quite sensible to me
01:56 < cgiffard> yeah perhaps an env problem
01:56 < ashnur> SkareCrow: that's what I expected, but I have a debugger; statement in my test.js file, and it still won't stop. I guess there is some earlier problem I missed.
01:56 < cgiffard> Noldorin: a while ago I had a node issue where it wasn't picking up the node_modules folder location for requiring globally installed modules. I had to manually specify it
01:56 < cgiffard> I'll check my dot files, they haven't changed in ages
01:57 < SkareCrow> are you using debugger; to create the breakpoint? did you try using console.log() prior to the breakpoint to ensure it's even hitting that line?
01:57 < cgiffard> Noldorin: This is what I put in my .bashrc/.bash_profile: export NODE_PATH='/usr/local/lib/node_modules/';
01:57 < SkareCrow> ashnur, also.. next is probably more appropriate as step actually steps in
01:57 < cgiffard> Noldorin: Since then, it's been really sensible
01:57 < cgiffard> Noldorin: Try that, removing minify, and reinstalling it again. Might work fine - fingers crossed! :)
01:58 < Noldorin> cgiffard: didn't think os x has a .bashrcâ€¦. guess you mean .bash_profile. yeah sounds sensible :)
01:58 < ashnur> SkareCrow: you are right, I placed another debugger statement, way ahead of where I thought the problem was, and it worked just fine, and found a different problem that I expected
01:58 < ashnur> so everything works now, thanks for your help :)
01:58 < cgiffard> Noldorin: I've got both on my system. One just refs the other :)
01:58 < ashnur> and yes, next is what I used
01:58 < SkareCrow> ashnur, no problem =)
01:59 < Noldorin> cgiffard: fair enough. though i've been told .bashrc never gets loaded, since all shells are login shells in OS X
01:59 < cgiffard> Noldorin: I use the same files on other machines, so I like to keep them the same :)
02:00 < cgiffard> Noldorin: In any case, let me know how that goes for you!
02:00 < ashnur> also, when using mocha, it's not mocha -d or mocha --debug but mocha debug
02:00 < Noldorin> yeah
02:00 < Noldorin> cgiffard: makes sense. btw, do you have a /usr/local/lib/node dir with anything in it?
02:00 < Noldorin> and alas, that seems to fail
02:01 < cgiffard> Noldorin: Yep, that folder is for waf
02:01 < Noldorin> ok
02:02 < cgiffard> Noldorin: Did you try reinstalling the minifier with the new path env in place?
02:02 < Noldorin> cgiffard: indeed. rm -r ~/node_modules, npm install minifyjs
02:02 < mAritz> is there any easy way to handle bitmaps in nodejs? specifically i want to get a part of a bitmap and send it to the browser on request.
02:02 < cgiffard> Noldorin: And did you check it correctly inserted itself into the environment?
02:03 < cgiffard> mAritz: I've used node-canvas before. It's a bit slow, but it means your code can work on the client too, since the API is (99%) the same.
02:04 < Noldorin> cgiffard: indeed. echo $NODE_PATH returns /usr/local/lib/node_modules
02:04 < mAritz> cgiffard: hm... slow would be a problem, but i'll try it
02:04 < cgiffard> Noldorin: Odd. I'll have to defer to more experienced troubleshooters then. Sorry!
02:05 < cgiffard> mAritz: You could always just use imagemagick or similar...
02:06 < Noldorin> cgiffard: no worries. thanks for your help anywya
02:06 < Noldorin> hopefully some guru will turn up :)
02:06 < cgiffard> mAritz: Seems there's a js wrapper for it already: https://github.com/rsms/node-imagemagick/
02:06 < cgiffard> Noldorin: Good luck! :)
02:07 <@isaacs> zeus: pong
02:08 < Spion> what would you guys think of an "event recorder" project? put a script on your site and it will start recording all user input when requested. you can end recording at any time and output it to a file. then this file can be replayed in a headless browser e.g. phantomjs
02:08 < Noldorin> t
02:08 < Noldorin> ta
02:08 < Spion> perhaps such a project already exists?
02:08 <@maxogden> there were some cool heatmap projects at node knockout last year
02:09 < cgiffard> Spion: I know it's not very trendy, but doesn't selenium have a firefox extension that can do this?
02:09 < tr45> how do i rotate sessions? two requests coming in, the first got rotated, what do i do with the 2nd?
02:10 < Spion> cgiffard, yep. can it do automated headless testing though?
02:12 < cgiffard> Spion: You can certainly run it in a virtual frame buffer...
02:13 < cgiffard> Spion: Perhaps there's something for phantomjs
02:17 < Spion> hmm perhaps just a playback script for phantomjs
02:17 < Spion> recording can be done in selenium
02:18 < hunmonk> anybody have an idea how to get the id of a system user via node? i need to do it in a blocking fashion, and don't see any way to accomplish that
02:19 < Noldorin> cgiffard: just noticed a .npm dir in ~â€¦ hmm
02:19 < Noldorin> wonder what that is
02:22 < Noldorin> cgiffard: incidentally, npm install -g solves it :)
02:23 <@piscisaureus_> s
02:24 < timoxley> hunmonk why do you *need* to do it in a blocking fashion?
02:26 < hunmonk> timoxley: i could do it in a child process, and stuff my work in the callback, but this seems like it should be so straightforward. and my code will be a lot uglier in this case if it's async. so i guess 'need' is too strong a word. ;)  *strongly prefer*
02:26 < cgiffard> Noldorin: Ah, the missing link! I just assumed you were doing that already :P
02:27 < Noldorin> :P
02:27 < dominictarr> hunmonk, how often do you need to get the system user id?
02:27 < Noldorin> i did quote my command line heh
02:27 < dominictarr> once?
02:27 < timoxley> hunmonk process.getuid()
02:27 < hunmonk> timoxley: i'm actually very surprised there's not a sync version of exec, a lot of the filesystem ops i see have a sync version
02:27 < hunmonk> timoxley: but it's not the uid of the currently runing process
02:27 < SkareCrow> cgiffard, Noldorin i think i was actually going to mention using the global flag earlier but was under the impression that was obvious
02:27 < SkareCrow> *sigh*
02:27 < hunmonk> timoxley: it's another system user
02:27 < timoxley> oh
02:28 < dominictarr> hunmonk, that to make it easy to write require()
02:28 < hunmonk> timoxley: i only need to get it on app startup
02:28 < timoxley> hunmonk process.pid?
02:28 < dominictarr> yeah, it's gotta be async
02:28 < hunmonk> timoxley: that's the process id, not a user id
02:28 < timoxley> oh
02:28 < Noldorin> SkareCrow: nothing is obvious to the newcomer. ;) in any case, i don't remember specifying that and previous packages installed globally
02:29 < Noldorin> so, odd.
02:29 < timoxley> ok understood now
02:29 < hunmonk> funny how the simplest thing can turn into a two hour problem
02:29 < dominictarr> just put it it a seperate file and then require('./you-app') when it's ready
02:30 < austinbv> anyone use mochas to.throw?
02:30 < austinbv> chais*
02:31 < hunmonk> timoxley: ok, this is ugly as sin, but there's a sync version of stat, so i just need a file owned by my user  :)
02:33 < timoxley> austinbv what's problem are you having
02:34 < austinbv> gisting code now timoxley 
02:36 < austinbv> timoxley: https://gist.github.com/3120054
02:36 < austinbv> it says it is throwing an error but still failing
02:38 < cgiffard> austinbv: Is that because it throws the error and exits the execution context _before_ the expect statement?
02:38 < cgiffard> perhaps try rewriting it in a way that expect can catch the error?
02:38 < austinbv> won't new throw the error
02:39 < cgiffard> austinbv: Well if you're throwing an error in your constructor, sure
02:39 < austinbv> cgiffard: https://gist.github.com/3120054
02:39 < austinbv> I am
02:39 < cgiffard> austinbv: but throwing an error uncaught means that the function will quit before the expect() statement is run
02:39 < cgiffard> to the best of my knowledge, anyway
02:39 < SkareCrow> hunmonk, https://github.com/melor/node-posix
02:39 < austinbv> then how would *.to.throw ever work
02:40 < cgiffard> I think you need to pass a function in there
02:40 < cgiffard> that's what I've done in previous tests
02:41 < cgiffard> timoxley: Please correct me if I'm wrong! :)
02:41 < austinbv> I tried this
02:42 < austinbv> see how I pass a function in?
02:42 < timoxley> the issue
02:42 < timoxley> is that you
02:42 < timoxley> throw Error
02:42 < timoxley> not an instance of Error
02:42 < austinbv> nice that was it timoxley 
02:43 < cgiffard> timoxley: how does chai catch the thrown error to run the test?
02:43 < austinbv> so how do you use .to.throw with just throw 'some message'
02:43 < cgiffard> austinbv You could pass the message in to the error constructor
02:44 < timoxley> austinbv http://www.devthought.com/2011/12/22/a-string-is-not-an-error/
02:45 < cgiffard> timoxley: does it hook into mocha somehow?
02:46 < timoxley> cgiffard why would it need to hook into mocha? 
02:46 < austinbv> timoxley: thanks
02:47 < cgiffard> timoxley: Maybe I'm way off base here. But if you're throwing an error uncaught on the previous line in your test definition, how does the expect() line ever run?
02:48 < timoxley> cgiffard the whole expect() chain is evaluated before the value passed to expect (a function block) is actually run
02:48 < cgiffard> timoxley: Hrm. Just thinking about how I can better articulate my question
02:49 < mAritz> cgiffard: just fyi: it appears as though node-canvas does not support loading of .bmp (only png, jpg, gif) :(
02:49 < timoxley> cgiffard oh I see, in his gist?
02:49 < cgiffard> mAritz: Ah, sorry! I just assumed you were talking about any bitmap image format
02:49 < cgiffard> mAritz: In any case, try out the node imagemagick bindings and let me know what you think of them
02:49 < cgiffard> mAritz: I may end up using them myself! :)
02:50 < cgiffard> timoxley: Yep. Unless chai has an opportunity to catch the error...
02:50 < cgiffard> timoxley: In the original gist, the error was thrown before expect() was evaluated, at least from my understanding
02:50 < timoxley> cgiffard it's not
02:51 < cgiffard> timoxley: Eh? How does that work?
02:51 < timoxley> cgiffard word = a function that instantiates a new Word
02:51 < timoxley> cgiffard  word = -> new Word
02:51 < cgiffard> timoxley: Yep. But if you're throwing an error in that function...
02:51 < mAritz> cgiffard: i'd prefer doing it in canvas, because i actually need to use some of the same code in the browser. i guess i'll use imagemagick to convert bmp to png
02:52 < timoxley> cgiffard the function isn't evaluated though, it's just defined
02:52 < cgiffard> timoxley: â€¦this challenges everything I know about constructors :P
02:52 < timoxley> cgiffard nothing to do with the constructor
02:53 < cgiffard> timoxley I always thought that when you did a new XYZ()
02:53 < cgiffard> that it ran the constructor
02:53 < timoxley> cgiffard it does. but only when that function is actually executed.
02:53 < timoxley> cgiffard look at the code again
02:54 < cgiffard> timoxley: I'm not familiar with coffee script :P
02:54 < cgiffard> timoxley: I may have misread it
02:54 < timoxley> cgiffard the -> = a function
02:54 < cgiffard> timoxley aaaaaaah it all makes sense
02:55 < cgiffard> timoxley: I can piece my world view back together. I wasn't wrong, just very confused ;-)
02:55 < timoxley> np
02:55 < cgiffard> timoxley: Thank goodness for you and your omnipotent backpack
02:56 < timoxley> cgiffard that room was full of php developers, I didn't want them stealing my stuff
02:56 < cgiffard> timoxley hahaha! You can never trust those guys :P
03:06 < Karmaon> wtf, nod eis blocking on http errors
03:06 < Karmaon> *node is
03:07 < SkareCrow> Karmaon, explain?
03:07 < vpitriumph> Any idea why after install I have node and node-waf in my /usr/local/bin but don't have npm?
03:07 < Karmaon> SkareCrow, I have my request logger here
03:07 < Karmaon> and normal requests are coming in around 40/sec
03:07 < Karmaon> but when I see a socket hangup
03:08 < Karmaon> the normal requests stop
03:08 < Karmaon> for a moment, only to continue after a second or so
03:09 < timoxley> vpitriumph how did you install node?
03:11 < Karmaon> lol node is a blocking piece of dog droppings
03:11 < SkareCrow> Karmaon, I think you need to be a little more specific.. The only blocking issues I've had with Node are issues I've introduced
03:14 < SkareCrow> Karmaon, what modules are you using? what sockets are you referring to? can you provide any code?
03:16 < Karmaon> SkareCrow, I think its the postgres driver I'm using with a crap query queue.
03:16 < Karmaon> clogging up requests because of network latency between the database and api server
03:17 < Karmaon> although its within the same lan
03:17 < Karmaon> but 6ms latency is not uncommon
03:17 < SkareCrow> what package are you using for postgres?
03:17 < Karmaon> node-postgres
03:18 < SkareCrow> can you create a gist of the code you think is causing the issue?
03:18 < Karmaon> its listed as 'pg' in npm
03:18 < Karmaon> its just the query queue, it doesn't execute the next query until it gets a result from the previous one
03:19 < Karmaon> more requests are piling up than it can get finished with
03:21 < SkareCrow> Karmaon, I don't have much experience with PostgreSQL or the pg package so hopefully someone else can help you out.. I'm going to afk for like 2 minutes to grab some food then I'll take a look around
03:22 < Karmaon> SkareCrow, no worries.
03:22 < Karmaon> As of right now, I do know http errors do not block.
03:23 < Karmaon> definitely must be the driver then
03:23 < zeus> Karmaon: That might be intended since the order of database modifying queries should most probably kept consistent with the order in which they were called
03:24 < zeus> Karmaon: Brian C is extremely responsive with node-pg, so if you file an Issue with some code (or even better, a test case) then I'm sure you can get an answer
03:26 < zeus> Karmaon: But at the same time, every time i've used pg, it never blocks or waits for queries to finish, it simply sends them to the queue and if the queue gets too long it will throw an error
03:27 < Karmaon> zeus, well not blocking as in blocking the node thread, but requests pile up faster then they can get handled
03:27 < Karmaon> after 30 minutes of run time, I get a boatload of timeouts from clients
03:29 < Karmaon> running the driver in a high latency environment is also not a good idea. 80ms between the client and server made my api slow as molasses
03:29 < Karmaon> (because of the queue)
03:31 < SkareCrow> is it due to pg adding everything to the queue when you don't define a callback? perhaps you should just use callbacks to do things you want to run successively rather then having everything hit the same queue
03:32 <@maxogden> anyone know why node -e doesnt write to stdout by default anymore?
03:33 < soldair> seems to for me..
03:34 < Karmaon> SkareCrow, no, every query is added to the queue
03:36 < soldair> @Karmaon one bad query can block a single db connection. a few reasonable ones can block a queue. do you use the same connection for all calls in your api?
03:36 < Karmaon> soldair, yes
03:38 < Karmaon> right now the latency is the bottleneck.
03:40 < austinbv> where and how do people store global config like db passwords and API keys
03:40 < enmityxero> Anyone know of any good articles on domain usage?
03:40 < prettyrobots> I create a file named configuration.json.
03:40 < prettyrobots> austinbv:
03:40 < prettyrobots> enmityxero: Yeah. I'd like to see that.
03:40 < austinbv> and load it into process.env?
03:41 < prettyrobots> Well, you might name the location of the file in process.env.
03:41 < prettyrobots> Put do not put the values in your environment. They'll leak.
03:41 < austinbv> ok
03:41 < prettyrobots> I create a read only file that can only be read by the user that runs the process.
03:42 < austinbv> cool
03:42 < soldair> @karmaon are you sure its network latency? if you have queries that need to be executed in a blocking manner on the same connection well they have to block each other to maintain expected state. this is useful.
03:42 < prettyrobots> And put it in a known location, maybe /etc or a home directory, if my app has one, /home/myapp
03:42 < Karmaon> soldair, yes, I have two frontends, one 80ms away and the other 6ms.
03:42 < prettyrobots> You can have APP_CONF=/path/to/configuration.json
03:43 < Karmaon> the 80ms away can only do ~3 requests a second
03:43 < prettyrobots> But do not do APP_DB_PASSWD=L337PA55SD
03:44 < prettyrobots> That is how you'd use environment, to indicate a path to configuration.
03:44 < prettyrobots> Not to pass configuration.
03:46 < taterbase> trying to use http.get() on 0.6.19
03:46 < taterbase> using an address with a prefix other than www throws errors
03:46 < taterbase> getaddrinfo ENOENT
04:06 < rookie84> wondering whats the difference between Jquery and Node.js?
04:07 < rookie84> like what are the things Jquery can't do that Node.js can! ?
04:07 < tbranyen> that can't be a real question
04:07 < rookie84> tbranyen: sorry, its from a newbie
04:08 < rookie84> and I do have some knowledge about Jquery and use it often.
04:08 < owen1> rookie84: jquery is a library to manifulate the browser's DOM. node is server side libraries for building network apps
04:08 < owen1> manipulate
04:08 < rookie84> is it like Jquery works much on the client side while Node.js works on the server side? how can a javascript framework on the server side?
04:08 < owen1> taterbase: i think it means u ran out of available file descriptors, but i am not sure
04:09 < owen1> rookie84: it's not a framework. it runs on top of v8, the engine behind chrome.
04:09 < taterbase> owen1 turned out to be a buggy http.get. It doesn't like addresses not prefixed with www. Using http.request isntead
04:09 < owen1> taterbase: oh cool
04:10 < rookie84> v8
04:11 < rookie84> so to be able to run node.js apps you need to have a v8 installed?
04:11 < cgiffard> taterbase: That's weird. I use http.get in simplecrawler and it works fine for me on 0.6.19
04:11 < taterbase> what does your options hash look like?
04:12 < cgiffard> well it's dynamic-ish
04:12 < cgiffard> but here it is: requestOptions = {
04:12 < cgiffard> 			host: requestHost,
04:12 < cgiffard> 			port: requestPort,
04:12 < cgiffard> 			path: requestPath,
04:12 < cgiffard> 			headers: {
04:12 < cgiffard> 				"User-Agent": crawler.userAgent
04:12 < cgiffard> 			}
04:12 < cgiffard> 		};
04:12 < taterbase> Does requestHost start with www?
04:13 < rookie84> owen1: thanks for answering, I really don't understand how node.js works like what kind of apps would it create? :)
04:13 < cgiffard> taterbase: depends on the domain being requested, but it works fine without www :)
04:13 < taterbase> Interesting...
04:13 < taterbase> I must be doing something wrong
04:13 < taterbase> brb
04:14 < taterbase> cgiffard you're right
04:14 < jamescarr> rookie84, anything you want
04:14 < taterbase> Must have missed a char somewhere
04:14 < taterbase> Thanks!!
04:15 < rookie84> jamescarr: I mostly work in php/mysql, jquery, I am wondering what is Node.js good for?
04:15 < taterbase> rookie84 LinkedIn, yammer, voxer, c9.io
04:15 < taterbase> any kind of app really
04:15 < cgiffard> rookie84: It can replace/augment the 'php' part of your stack.
04:16 < cgiffard> rookie84: And the apache/nginx part too, if you're so inclined.
04:16 < rookie84> i am not bad at php, and will still want to use it :) can Node.js work with Mysql?
04:16 < jamescarr> rookie84, yes
04:16 < rookie84> cgiffard: Apache? it can replace the webserver?
04:16 < cgiffard> rookie84: Sure, it's got a great mysql module that I've used in production
04:16 < jamescarr> rookie84, yes
04:17 < rookie84> you have anything done in Node.js? :)
04:17 < rookie84> like something online?
04:18 < felixge> rookie84: if you're mostly doing CRUD style apps, node doesn't bring a lot of exciting things to the table
04:19 < felixge> rookie84: if you're doing anything involving streams of data / websockets / many active connections -> node is pretty good for that
04:19 < rookie84> felixge: I have to use CRUD sort of things for the backends/CMS ?
04:19 < felixge> rookie84: ?
04:19 < prettyrobots> rookie84: CRUD is unavoidable, yes.
04:19 < felixge> o_O ?
04:19 < rookie84> is it possible to have a php framework doing the backend of an app/website and node.js for the frontend?
04:19 < prettyrobots> rookie84: But if you're doing all CRUD all the time, Rails may be easier.
04:20 < jamescarr> actually it makes more since to have node do the backend 
04:20 < prettyrobots> rookie84: You can mix and match.
04:20 < rookie84> I am doing Yii (Php framework) its much like rails and an excellent framework to work with.
04:20 < prettyrobots> But, it's not realy front and back when you do, it's more like Node.js off to the side doing special things.
04:20 < rookie84> 'special' ?
04:21 < prettyrobots> WebSockets.
04:21 < prettyrobots> JSON API.
04:21 < prettyrobots> Streaming stuff.
04:21 < rookie84> hmm ok
04:21 < jamescarr> Socket.IO!
04:22 < prettyrobots> I'm creating a PHP like template language for Node.js, so I can do old fashioned web stuff the old fashoined way, without leaving node.
04:22 < jergason> prettyrobots: wut
04:22 < prettyrobots> And there are frameworks like Express that is MVC-like.
04:22 < soldair> ejs?
04:23 < prettyrobots> jergason: Tepmlates that pull.
04:23 < rookie84> do you guys have anything done in Node.js (online)
04:23 < rookie84> so I can see?
04:23 < prettyrobots> The way PHP pulls.
04:23 < jergason> prettyrobots: what do you mean the way PHP pulls?
04:24 < prettyrobots> Uh, instead of setting of a model and having templets bound to a model...
04:24 < jergason> rookie84: https://github.com/idottv/thumbelina
04:24 < jergason> streaming thumbnails from ffmpeg
04:24 < prettyrobots> â€¦PHP you write templates and those templates put their grubby little mits on whatever they fancy.
04:25 < felixge> rookie84: We've done transloadit.com with node.js
04:25 < felixge> (which is a profitable business now)
04:25 < prettyrobots> felixge: Woot!
04:25 < rookie84> felixge: nice, the webserver is ?
04:25 < jergason> prettyrobots: isn't that just bad design? Why would you want that?
04:26 < prettyrobots> jergason: Is WordPress bad design?
04:26 < chilts> felixge: may I ask how long it took to go from not making to making a profit?
04:26 < jergason> it is badly-designed
04:26 < prettyrobots> I guess I want bad design sometimes.
04:26 < jergason> it is also very popular
04:26 < chilts> personal question I know :D
04:26 < prettyrobots> It's a worse is better.
04:26 < jergason> but its code is pretty widely hated
04:26 < prettyrobots> It's a worse is better approach.
04:26 < jergason> i see the worse part
04:26 < jergason> where does the better part come in?
04:26 < felixge> rookie84: we use node.js for most of the user facing API. But we also have Haproxy, Nginx and ELB mangling HTTP for us
04:27 < prettyrobots> If you need a sidebar, say recent comments, you invoke the recent comments tag.
04:27 < felixge> chilts: 2 years
04:27 < prettyrobots> And they appear.
04:27 < prettyrobots> And you don't have to update your model to have a relationship to comments, etc, etc.
04:27 < felixge> (that's counting the time from when we gave people the option to pay for the service to the time where we can pay all server costs and decent 3 salaries)
04:28 < felixge> before that we did about 1 year of product development
04:28 < felixge> but that includes pivoting from PHP to node.js
04:28 < owen1> flexd: i just realized it's you.. great talk about streaming
04:28 < prettyrobots> If you don't want recent comments in your template, delete it, and it goes away, query cost and all.
04:28 < felixge> and 1 complete rewrite when node 0.2 broke all the APIs on us
04:28 < felixge> :)
04:28 < prettyrobots> That's better for a lot of cases.
04:28 < SubStack> I remember that one!
04:28 < SubStack> couldn't use any code because of promises
04:29 < felixge> SubStack: hey, sup?
04:29 < prettyrobots> Like when you have a code base like a shopping cart of a blog, where most of the coding is done in the templates.
04:29 < felixge> yeah â€¦
04:29 < rookie84> felixge: I see your site on nodejs.org :)
04:29 < felixge> those were them dark days
04:29 < felixge> rookie84: yes
04:29 < rookie84> cool
04:30 < prettyrobots> shopping cart *or* a blog.
04:30 < rookie84> so node.js is not for business websites
04:30 < rookie84> in other words: websites for businesses, that our company do.
04:31 < rookie84> stuff like this: http://industriallightingsys.com/ 
04:31 < rookie84> thats what we do.
04:31 < rookie84> Node.js is much more for web apps.
04:31 < jergason> rookie84: seems like most of the work on that is in design
04:31 < jergason> but yeah, it seems like node wouldn't buy you much for just corporate blog-type sites
04:31 < felixge> rookie84: you can do that with node.js - but PHP is probably easier for this
04:32 < jergason> besides cool buzzwords :)
04:32 < prettyrobots> rookie84: Find an excuse to learn Node.js.
04:32 < rookie84> yes indeed.
04:32 < prettyrobots> The best way to learn what to do with it is to do with it.
04:32 < rookie84> prettyrobots: true, I need to find that excuse ;)
04:32 < jergason> tell them it will leverage their synergies
04:32 < prettyrobots> What jergason said.
04:33 < SubStack> felixge: mad sciencing as usual
04:33 < owen1> and their site will survive techrunching
04:33 < rookie84> I use this Yii framework it makes things pretty fast
04:33 < SubStack> finishing a queue thing using mountie
04:33 < prettyrobots> That would be a good topic for a blog post: Excuses to use Node.js.
04:33 < felixge> SubStack: nice
04:33 < rookie84> we have 72 hours of turn around time on sites like http://industriallightningsys.com
04:33 < prettyrobots> Something like that. I know a lot of people in PHP land who want to learn other things.
04:33 < rookie84> and I am wondering if Node.js will do something similar to this in that amount of time.
04:33 < felixge> I'm re-designing my mysql parser again : )
04:34 < prettyrobots> rookie84: WOw.
04:34 < jergason> rookie84: node would do nothing to help you churn those out faster :(
04:34 < felixge> the fucking thing keeps me up at night
04:34 < prettyrobots> rookie84: No. It would slow you down. :(
04:34 < rookie84> jergason: yes I think so now :)
04:34 < prettyrobots> Bummer.
04:34 < jergason> also that sounds like not much fun
04:34 < rookie84> on small sites we have turn around of 24 hours.
04:34 < felixge> rookie84: that doesn't sound like a lot of fun
04:34 < rookie84> the thing is that I get alot of work
04:34 < prettyrobots> rookie84: That is madness.
04:35 < rookie84> and make around 3k in a month.
04:35 < rookie84> or more sometimes.
04:35 < chilts> felixge: that's pretty cool you're all profitable though :)
04:35 < prettyrobots> Show us a couple more sites.
04:35 < rookie84> or less sometimes :)
04:35 < rookie84> sure
04:35 < jergason> rookie84: are you in the us?
04:35 < chilts> sounds like it is a good adventure (bar the rewrite) :)
04:35 < rookie84> we do around 10-20 sites in a month.
04:35 < felixge> chilts: yeah, it's fun :)
04:35 < fent> is there a module that pretends to be an http response until the response is returned from the callback? kind of what like the request module does
04:35 < rookie84> http://dentistofficeeverett.com/
04:36 < chilts> I'm hoping to get to being self-sufficient on Node.js at some stage too :)
04:36 < chilts> just gotta stop contracting and doing my own stuff on the side
04:36 < rookie84> http://dentistofficeeverett.com/ in 48 hours including content
04:36 < felixge> chilts: we were contracting the whole time
04:36 < felixge> while building transloadit
04:36 < felixge> we could have moved faster if it wasn't for that
04:36 < chilts> yeah, I think it's a good way to bootstrap
04:36 < rookie84> http://www.h-towneremodelers.com
04:37 < jergason> felixge: that is scary. how did you decide where to put your time?
04:37 < chilts> so am glad my way has been done (and proved) before
04:37 < prettyrobots> I'd love to have a discussion on the business of node.
04:37 < prettyrobots> Or how to make a living off it.
04:37 < rookie84> http://christchurchsuncity.org/ in 48 hours 
04:37 < felixge> jergason: intuitively. 
04:37 < chilts> prettyrobots: I think a general discussion of business is what you want more than the business of node
04:37 < chilts> node is just a technology
04:37 < chilts> like any other
04:37 < prettyrobots> No. It's not.
04:38 < felixge> jergason / chilts : biggest lesson learned was that you have to start billing for full days (not hours) when contracting
04:38 < prettyrobots> I mean, we're telling rookie84 that it doesn't fit with his business.
04:38 < jergason> it doesn't fit with his tech requirements
04:38 < felixge> otherwise you go insane trying to work on multiple projects every day
04:38 < chilts> felixge: how do you mean? at the moment I'm doing hours
04:38 < chilts> ie. if they want you, you charge them a day at a time
04:38 < chilts> ?
04:38 < felixge> chilts: well, instead of doing hours, you tell your client a day of your time costs them $ XXX
04:39 < jergason> felixge: we are in a similar situation, but are doing scary things of turning away customers to focus more on our product
04:39 < rookie84> yeh thats what I am wondering, I really love learning new technologies but it would affect what I do.
04:39 < chilts> ah right
04:39 < felixge> and when they buy a day you'll work all day on their shit
04:39 < felixge> and not spend time doing anything else
04:39 < felixge> this will keep you focused
04:39 < chilts> yeah, true
04:39 < chilts> I find I get messed around sometimes
04:39 < felixge> and also deals with the problem where clients make you wait for shit
04:39 < chilts> so yeah, I think you're right
04:39 < chilts> hmm, that's good to know :) thanks felixge
04:39 < felixge> and all the overhead time that comes with contracting (emails, phone, etc.)
04:40 < chilts> and travelling into town instead of working from home
04:40 < felixge> also makes it much easier for the client / you to budget
04:40 < rookie84> and we do these sites for very little $'s.
04:40 < felixge> rookie84: try to charge more
04:40 < felixge> :)
04:40 < felixge> you'll find different projects
04:41 < shama> or just quit your job... most productive times of my life is right after I quit my job :)
04:41 < rookie84> about $600 for http://christchurchsuncity.org/
04:41 < jergason> rookie84: are you in the US?
04:41 < rookie84> jergason: in Pakistan :)
04:41 < jergason> ah
04:41 < felixge> rookie84: if you become really got at a new technology, you should be able to make $500-1000 / day
04:42 < rookie84> felixge: how?
04:42 < rookie84> I agree though, doing something extra ordinary and you can make that amount of money.
04:42 < rookie84> I am not that great though. ;)
04:42 < jergason> in the goldrush you sell the pickaxes
04:42 < felixge> rookie84: might be hard to do from Pakistan, people will try to pay you less because of lower cost of living
04:42 < felixge> but you should still be able to make more money, always ;)
04:43 < rookie84> yeh exactly.
04:43 < rookie84> new technology like Node?
04:45 < rookie84> I was wondering maybe expanding a bit more, getting some more devs and doing the kind of sites we do, in the same amount of time.
04:45 < rookie84> its not just time but we also make great sites :)
05:02 < hunmonk> SkareCrow: forgot to thank you, https://github.com/melor/node-posix was exactly what i needed, thx!
05:05 < SkareCrow> hunmonk, np
05:21 < deoxxa> so forever is pretty cool
05:21 < deoxxa> has made my life easier while testing
05:49 < rafaecheve> hi , quick question npm incompatible with node v 8?
05:51 < Karmaon> rafaecheve, of course!
05:51 < rafaecheve> so I have to downgrade
05:51 < rafaecheve> ?
05:52 < rvagg1> npm comes bundled with node these days rafaecheve
05:52 < npmbro> rvagg1: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20comes%20bundled%20with%20node%20these%20days%20rafaecheve
05:53 < rafaecheve> hmm but when I try to access it
05:53 < rafaecheve> Igot the error
05:53 < rvagg1> rafaecheve: npm update -g to update it
05:53 < rvagg1> if that doesn't work then you might want to try installing node from the installer
05:53 < rafaecheve> I got this "Error: npm doesn't work with node v0.8.1"
05:54 < gildean> maybe clear the npm cache first?
05:54 < rafaecheve> my node version was installed from the installer, on the node.js page
05:54 < rvagg1> you had an old version of node/npm there beforehand?
05:55 < rafaecheve> yes
05:55 < rafaecheve> v4 node
05:55 < rvagg1> what OS?
05:55 < rafaecheve> mac os X 10.7
05:56 < rvagg1> perhaps you have multiple versions of npm and the older one is getting preference in your PATH
05:56 < rafaecheve> ok
05:56 < rvagg1> unfortunately I'm not a Mac person at all so I can't tell you where to look
05:56 < rafaecheve> ok
05:56 < rafaecheve> but in other OS
05:56 < rafaecheve> who do you get the node path?
05:57 < rafaecheve> any command to do so
05:57 < rvagg1> whereis npm
06:00 < rafaecheve>    /usr/local/bin/npm
06:02 < rafaecheve> ok
06:03 < rafaecheve> I jusit got it
06:03 < rafaecheve> I was working
06:03 < rafaecheve> with a outdated version
06:03 < rafaecheve> I just got the latest one
06:03 < rafaecheve> it's working fine now 1.1.36
06:05 < rvagg1> rafaecheve: what did you do?
06:06 < rafaecheve> I was accesing the old version of node installed somewhere in my systme
06:06 < rafaecheve> What I did was to reinstall the Node build from the site
06:06 < rafaecheve> and add the export PATH=/usr/local/bin:$PATH
06:06 < rafaecheve> to access the new node files
06:07 < rafaecheve> so I added the right references
06:07 < rafaecheve> the problem was that, "accesing old references"
06:07 < rafaecheve> that's why is important to uninstall old versions beforehand
06:09 < rafaecheve> ok , thanks guys !
06:14 < mawhtin> hi everyone
06:14 < mawhtin> can someone tell me how to get the name "bigShoe" into the parameter X
06:14 < mawhtin> http://jsfiddle.net/NjBE5/1/
06:16 < Karmaon> mawhtin, this.bigShoe?!
06:16 < mawhtin> didn't work
06:16 < mawhtin> haha, i tried it :)
06:16 < Karmaon> that.bigShow?
06:16 < Karmaon> oh, i assume you've already tried it
06:17 < mawhtin> tried it
06:17 < mawhtin> =]
06:17 < mawhtin> it's because the bigShoe string is a property in a backbone model
06:17 < mawhtin> so I don't really know how to pull its own property into the method
06:17 < ljharb> mawhtin: is this a backbone model on the client or the server?
06:18 < ljharb> can you repaste the fiddle, i cleared by accident
06:18 < mawhtin> http://jsfiddle.net/NjBE5/1/
06:18 < mawhtin> it's just on my computer rich tnow
06:18 < ljharb> what's "Parse.Object"?
06:18 < mawhtin> i haven't uploaded it or anything, just testing in firefox from dreamweaver
06:18 < mawhtin> just a backend object I'm extending
06:19 < mawhtin> think of parse = backbone though
06:19 < mawhtin> they designed it the same :)
06:20 < ljharb> why not Parse.extend then
06:21 < mawhtin> just the way the docs have it
06:21 < mawhtin> so i just followed 
06:24 < ljharb> just weird Parse made it that way
06:24 < ljharb> why are you passing a string into that function?
06:24 < ljharb> anything named "extend" usually takes objects
06:45 < owen1> what is the difference between res.write('hi') and res.write('hi\n')
06:45 < owen1> it seems like the second one sends the text to the client
06:47 < Karmaon> um, second one writes a newline
06:47 < owen1> Karmaon: i believe that the first one will not send the text to the server until res.end() will be called
06:49 < ljharb> http://stackoverflow.com/questions/6068820/node-js-problems-with-response-write
06:49 < ljharb> it depends on the browser.
06:49 < ljharb> it's sent immediately.
06:50 < ljharb> that was the first response on google, for future reference.
06:51 < ljharb> ^ owen1 
06:52 < owen1> ljharb: got it. thanks. does it mean that node always stream the data back to it's clients?
06:52 < ljharb> seems so
06:52 < andreys> hi all, got a problem with our node, dns.lookup returns ENOENT
06:53 < andreys> dns works good, dns.resolve works good
06:53 < andreys> any ideas what could be done?
06:53 < ljharb> http://stackoverflow.com/questions/9580226/nodejs-httprequest-with-data-getting-error-getaddrinfo-enoent also first result on google
06:54 < ljharb> andreys: are you passing a protocol like "http" in with the url?
06:56 < andreys> no, it is load problem
06:56 < andreys> when we are reducing number of request it works ok
06:56 < ljharb> there you go then
06:57 < ljharb> if youre doing a ton of requests you should probably have your own dns lookup service that doesn't rate limit you
06:57 < andreys> I have
06:57 < andreys> we have a caching local dns w/o rate limit, no errors logged and everyone else in the system works great
06:58 < andreys> even when I connect to misbehaving node via repl and do dns.resolve it works
07:09 < jmls> can anyone help me to understand the format of os.uptime() ? 
07:09 < jmls> I have this value : 1710310.979868501
07:10 < jmls> doesn't look like a number of seconds to me ;)
07:17  * SkareCrow yawnts
07:21 < mickhansen> jmls, http://nodejs.org/api/os.html#os_os_uptime - "Returns the system uptime in seconds."
07:22 < mickhansen> Just returned in a float presumably
07:22 < tuhoojabotti> 20 days
07:38 < [AD]Turbo> hi there
07:38 < SkareCrow> sup
07:47 < gates> after a start a server JS by node.exe server.js in Windows Command Line, how I can quit it?
07:51 < eugeneware> gates: ctrl-c?
07:54 < spolu> hi guys. Anyone know a really good vim javascript indenter? Can't find any decent
07:55 < gates> eugeneware: thanks, I want to control this by code
07:55 < eugeneware> gates: process.exit()
07:56 < gates> eugeneware: which event show I put the code?
07:57 < eugeneware> gates: When do you want to quit the server? 
07:57 < SkareCrow> while(true) require('cluster').fork();
07:57 < SkareCrow> should work as well
07:57 < SkareCrow> don't actually try that
07:57 < jesusabdullah> wat
07:57 < SkareCrow> going to get banned
07:57  * SkareCrow hides
07:59 < gates> eugeneware: I called node.exe from my VC++ program, before the main.exe quit, I want to  kill the node.exe
08:00 < eugeneware> gates: You could send it a signal (do they exist under windows?) or just kill it from the VC++ side (ie. keep a handle to the process and then kill the process).
08:01 < eugeneware> gates: on unix you could listen to events. See: http://nodejs.org/api/process.html#process_signal_events 
08:02 < gates> eugeneware: thanks , i 'll go to try these way
08:03 < eugeneware> gates: under VC++ you can use OpenProcess to get the process handle, requesting PROCESS_TERMINATE access rights, then call TerminateProcess on the handle when you're done.
08:14 < booyaa> morning!
08:20 < gates> eugeneware: understood, thx
08:20 < radiodario> morning
08:38 < stefi> ciao
08:39 < stefi> ! list
08:53 < Karmaon> node is extremely frustrating
08:53 < radiodario> lol
08:54 < Karmaon> random socket hangups block the other http requests
08:54 < tuhoojabotti> that does sound bad
08:58 < gildean> Karmaon: care to share the code that does that?
08:58 < Karmaon> gildean, I don't know which part of the code that blocks the requests
08:58 < Karmaon> its 4am and I'm getting tired
08:59 < Karmaon> its hard to debug
09:00 < Karmaon> you get a connection reset msg from request.error, and suddenly your requests stop getting served for a few seconds, then start again
09:00 < Karmaon> i can see this happening live with the 50 api calls I get every second
09:00 < Karmaon> its truely a wtf moment
09:02 < gildean> Karmaon: how is the error handled? is the project open source so we could look at the code?
09:08 < Nuck> Fuck.
09:08 < strk> so I'm back on debugging http module going in timeout
09:08 < strk> HTTP: outgoing message end.
09:08 < strk> HTTP: AGENT incoming response!
09:08 < strk> The above is what happens on "working" connections when NODE_DEBUG=http is set
09:08 < Nuck> I think I broke my NPM account :I
09:09 < Nuck> "Conflict Document update conflict." every time I try to npm login
09:09 < strk> on _non_working_ ones I only see the "HTTP: outgoing message end." message, and never get an incoming response. But this is _the_same_request_ of the one before
09:13 < strk> it looks like wrapping a JSON.parse(res.body) changes the outcome of the test, as if the hanging or not depends on timing
09:18 < strk> the Apache log (toward which I'm sending requests) shows that the 7th request (the hanging one) never arrives
09:19 < strk> ideas on what could go wrong between "HTTP: outgoing message end" and actually sending it ?
09:19 < strk> or how to have node print more info about that request ?
09:34 < Karmaon> I am getting socket hangup on every single request
09:34 < Karmaon> wtf
09:43 < Karmaon> FUCK YEAH
09:43 < Karmaon> its not an node issue.
09:47 < Phuc> Hi all, Can you help me about scraping a website 
09:48 < Phuc> Thanks so much 
09:48 < Phuc> Are you there? 
09:54 < strk> now I wonder if my issue has to do with exeptions thrown in http response handlers confusing HTTP module
09:56 < radiodario> Phuc: look up zombie.js
09:57 < booyaa> man gutted, i think archlinux arm node package is broke
09:58 < booyaa> oh well i should've compiled the damn thing from scratch
09:58 < Phuc> thanks radiari
10:02 < Karmaon> lol zombiejs
10:02 < Karmaon> the 100000 dependency bloat library
10:02 < strk> reduced testcase
10:03 < strk> http://strk.keybit.net/tmp/hang.js
10:03 < strk> to be run with mocha
10:05 < Phuc> @Karmaon: what does it mean?
10:06 < Karmaon> Phuc, huh?
10:06 < Phuc>  the 100000 dependency bloat library
10:06 < Karmaon> its bloated
10:06 < Karmaon> but does the job
10:06 < Karmaon> (not actually 100000 dependencies)
10:06 < Karmaon> it has native bindings so i assume its fast
10:12 < strk> can anyone confirm/verify the above hang.js test timeouts before getting a response from apache on localhost:80 ?
10:13 < strk> there could be an unpleasant side effect of throwing exceptions from http response handlers
10:19 < andreys> anybody knows anything about dns.resolve/dns.lookup in node?
10:19 < andreys> docs say that "Users who need to do a large number of look ups quickly should use the methods that go through C-Ares"
10:20 < andreys> does that mean that basically everything works via dns.lookup, and dns.resolve is left for those who want to resolve their hostnames manually?
10:22 < Nuck> haha apparently NPM requires all-lowercase package names now.  Glad I got Travis in there before :3
10:23 < radiodario> WhY WoUlD ThEY BaN UpPerCaSE?
10:24 < stagas> radiodario: because in windows the file system is case insensitive
10:24 < radiodario> oh yeah 
10:24 < radiodario> windows arriving late to the party with a hooker and cocaine.
10:24 < strk> https://github.com/joyent/node/issues/3715
10:33 < s0urce> Ok, maybe i better as here as in mongodb channel. Does anyone got an example for me, how to connect to mongodb in node.js using user and password?
10:40 < Epeli> Why npm creates a ~/tmp directory?
10:40 < radiodario> s0urce: look at the node mongo rest api
10:42 < radiodario> db.authenticate(config.db.username, config.db.password, function () {...});
10:42 < radiodario> https://github.com/christkv/node-mongodb-native
10:47 < ohcibi> i tried to install libxmljs via npm yesterday but i get an error that it cant find node.h. i played a bit around with paths and stuff and also tried to build from source, i made it to recognize node.h but then again it fails to find header-files referenced in node.h is this a bug of npm/libxmljs or is it my system? i'm on gentoo node.h is in /usr/include/node/node.h
10:49 < s0urce> radiodario: ty - but one thing i still don't get, why i need user/pass, if i can connect without anyway
10:50 < deoxxa> s0urce: you generally don't need a username/password for mongo
10:50 < radiodario> so don't put it
10:50 < deoxxa> s0urce: you have to configure mongodb to require one
10:50 < radiodario> some setups have it
10:50 < deoxxa> s0urce: by default, no password
10:53 < RLa> what, if you have no password then everyone can access your database?
10:53 < RLa> and delete whole data?
10:54 < RLa> or worse, steal it!
10:54 < deoxxa> RLa: only if you choose to have it listen on anything but localhost
10:54 < deoxxa> mongodb is designed mainly to run in a private/trusted environment
10:55 < deoxxa> there is provision for running in shared setups, but that's the exception rather than the rule
10:56 < djazz> what headers do i need to send except from content-length to make xhr's progress event detect the total size/length?
10:59 < s0urce> ok, thx, i'll search for options :)
11:15 < djazz> solved it, I use this in my progress event handler: evt.total || +request.getResponseHeader('Content-Length') || 0
11:22 < stef> hi, I just built node on a sheevaplug, but I'm getting "glibc detected free(): invalid pointer" crashes on some of the tests and in npm - anyone know what could be causing this?
11:23 < booyaa> stef: is sheeva arm based?
11:24  * booyaa getting problems using npm from archlinux arm package. you'd have thought they'd run the tests too
11:25 < stef> yep
11:26 < stef> I had to force -march=armv5t to get the v8 build to work
12:28 < radiodario> anyone has experience using tedious? the 'done' event on the request isn't firing
12:34 < jmls> owen1: thanks for help with modules
12:35 < jmls> I did try that, and it all seemed to be fine ;) using express and routing, when it came to reading records, things were just fine. However, when I came to put data, the req always seemed to be undefined
12:35 < jmls> moved everything back into app.js and all is well again
12:36 < jmls> ha! http://stackoverflow.com/questions/5055853/how-do-you-modularize-node-js-w-express
12:47 < Gloorian> Hello, in the child_process module, there's a parameter
12:47 < Gloorian> with maxBuffer
12:47 < Gloorian> but is it in octets, in bytes ?
12:48 < Gloorian> http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback <-- here
12:54 < Gloorian> No one knows ?
13:33 < austinbv> with mocha chai can you do the equilivent to rspecs =~ with arrays
13:33 < austinbv> it means unordered equal
14:27 < aroman> are there any libraries that make the bubbling/handling of these little 'error' booleans (which seem to be a ubiquitous pattern in async node code) easier to work with?
14:28 < aroman> because I'm finding myself typing out `if err \n console.log err \n callback err` wayy to much
14:32 < RLa> little error booleans!
14:32 < RLa> btw, they should be Error instances, not strings, not booleans
14:33 < RLa> if your call patterns match one of those that async module provides maybe you can use it
14:33 < cade_> When I try to start my node app, which worke on friday, I see this error: http://pastebin.mozilla.org/1705454 Anybody know what the cause of this is? haven't made any changes to the app since then
14:34 < aroman> RLa: I do make extensive use of caolan's delicious `async` library, which abstract some of that for me. why ought they be Error instances?
14:34 < RLa> to attach usable stack trace
14:35 < RLa> http://www.devthought.com/2011/12/22/a-string-is-not-an-error/
14:35 < sgimeno> bnoordhuis: hi, regarding the issue with binding unix stream sockets to a local path (#3705)... following your advice I've created a module to implement it and I've basically copied some parts of your code in node-unix-dgram... how should I acknowledge that? Adding your copyright line on the affected files?
14:40 < aroman> RLa: that was certainly thought-provoking
14:40 < aroman> part of my concern is shipping those errors over the wire via socket.io
14:41 < aroman> should I let my browser see the stack trace of an error from, say, mongoose or other I/O?
14:42 < RLa> aroman, it's up to you
14:43 < RLa> sending too much sensitive data to client could cause troubles
14:44 < RLa> but it would make debugging way easier
14:46 < aroman> yeah, and I guess i've been leaning on the side of the former
14:46 < aroman> besides stack traces are slightly less useful to me since I write in CS
14:46 < pspencer> how can I debug Error: socket hang up at createHangUpError (http.js:1124:15) - I'm trying to change to use secure connections to couchdb (via cradle library) - everything bootstraps okay and talks to the db for a second or two then I get this error and everything dies
14:58 < strk> is it a change in node-0.8 to get a parsed http.response.body (ie: an object for json Content-Type) ?
15:08 < radiodario> anybody had any experience running the node-oracle db bindings? it's made my mac a bit sick
15:11 < strk> talking with oracle does it
15:11 < strk> use free software, for an healthy life
15:13 < radiodario> hey thanks strk that's super helpful
15:13 < radiodario> :)
15:15 < TimeTurner_> Are there any workers I can have in node? I'm aware of process forking but not any sort of parallel workers
15:17 < aroman> TimeTurner: what do you mean by `parallel workers`?
15:18 < aroman> I use child_process to spin up child processes to do CPU bound work, and they work in parallel.
15:23 < strk> what's the best practice for comparing node module versions ?
15:24 < strk> extract & compare... from another running component
15:27 < jergason> strk: diff them, and look at the changelog?
15:27  * strk requires('semver')
15:28 < supsup> question:  can get node to work fine in linux, but in with windows installer I cannot gain access to node from command line, the system enviroment path has been updated to include the node directory.  Any idea why command not recognized?  repel works fine
15:29 < alex4nder> supsup: have you checked the basics?
15:29 < supsup> i thought system path was the basics always wasy for linux install  so maybe not
15:30 < supsup> the install did not put any readme in folder
15:32 < supsup> only thing i can think of since command also works if i nav to folder is for some reason i have to restart this windows machine...which i guess i'll try now.
15:32 < supsup> should not have to restart tho
15:34 < supsup> yep restart fixed it. odd
15:42 < bnoordhuis> sgimeno: yep. a copyright notice is fine
15:44 < sgimeno> ok
15:44 < sgimeno> thx
15:51 < LowValueTarget> Is there a module that will help me make a webservice and be able to facilitate multiple output types (e.g., json, xml)
15:52 < context> lowvaluetarget: require("http") ? connect ? express ? myraid of others
15:56 < LowValueTarget> context: excuse my noob
15:56 < LowValueTarget> I'll check em out
15:56 < LowValueTarget> thanks
15:57 < context> lowvaluetarget: decent place to start when looking for stuff: https://github.com/joyent/node/wiki/Modules
15:57 < LowValueTarget> Good dealk
15:57 < LowValueTarget> s/dealk/deal/
16:11 < stagas> LowValueTarget: also http://eirikb.github.com/nipster/
16:12 < TehShrike|Work> So, I'm a bit curious.  Why is Redis so popular nowadays?
16:13 < jcrew> good marketing
16:14 < TimeTurner_> Are there any workers I can have in node? I'm aware of process forking but not any sort of parallel workers
16:15 < bnoordhuis> TehShrike|Work, jcrew: i guess it fills a niche
16:16 < TehShrike|Work> bnoordhuis: what niche is that, in your mind?
16:16 < bnoordhuis> which doesn't mean that everyone who uses it is using it for the right reasons
16:16 < bnoordhuis> TehShrike|Work: the pub/sub thing is nice (convenient)
16:17 < TehShrike|Work> I've seen people using relational databases so effectively that I'm already not very interested in key/value stores, and this just seems like a memory-based k/v store.  Yet tons of open source projects (many node.js projects) are using it.
16:17 < TehShrike|Work> So I keep wondering if I'm missing something
16:17 < TehShrike|Work> I'm guessing it's because its easy?
16:17 < SkareCrow|W> What k/v store are you guys tlaking about?
16:17 < alex4nder> TehShrike|Work: stuff gets hyped
16:17 < TehShrike|Work> SkareCrow|W: I asked "Why is Redis so popular nowadays?"
16:18 < alex4nder> node.js doesn't bring anything to the table that hasn't been available for years
16:18 < SkareCrow|W> pub/sub is the shit
16:18 < alex4nder> as an another example
16:18 < TehShrike|Work> Sure
16:18 < alex4nder> s/an //
16:18 < ebright> Hi guys - I can't seem to get jshint to work.
16:19 < alex4nder> I just jshint my pants.
16:19 < TehShrike|Work> >_<
16:19 < jcrew> it fills the niche as an alternative to columnar store databases and it makes star schema quite a bit easier (in my mind)
16:19 < ebright> I've installed it through npm aswells as through packagecontrol in sublime
16:19 < bnoordhuis> alex4nder: in general, no. in the js world, yes
16:19 < TehShrike|Work> alex4nder: "what's all this jslint doing in my belly button?"
16:19 < SkareCrow|W> doesn't mongo have something like pub/sub?
16:19 < alex4nder> bnoordhuis: what?
16:19 < ebright> It's saying [Finished in 0.2s with exit code 1]
16:19 < alex4nder> bnoordhuis: I'm missing context
16:19 < jcrew> TehShrike|Work: it fills the niche as an alternative to columnar store databases and it makes star schema quite a bit easier^
16:20 < ebright> but it should be telling me there are a bunch of things missing!
16:20 < ebright> (semicolons)
16:21 < TehShrike|Work> jcrew: how does it make the star schema easier?  By storing the data from the outer tables in the rows of the central table?
16:21 < bnoordhuis> alex4nder: "node.js doesn't bring anything to the table that hasn't been available for years"
16:21 < ebright> anyone know why that might be? (I'm on windows using sublime text 2)
16:23 < alex4nder> bnoordhuis: oh right.
16:23 < jcrew> TehShrike|Work: yea - it requires more insert overhead but really, i mean who cares about an extra 240 bytes per row - i know it adds up but disk space isn't THAT expensive
16:23 < TehShrike|Work> Oh sure, that's not what turns me off about k/v stores
16:23 < TehShrike|Work> Disk space is cheap
16:24 < TehShrike|Work> The denormalization and data duplication is what makes me flinch :-x
16:28 < jcrew> TehShrike|Work: it is inappropriate for normal db stuff, star schema it is appropriate and the speed is well worth the headache of maintaining master data that way
16:29 < TehShrike|Work> How does pub/sub work with Redis?  Do things ever get automatically published simply because a row was inserted into a table that met certain criteria, or does publishing only ever happen when one client sends a "publish" message?
16:29 < TehShrike|Work> I suppose now I'm getting into the sort of questions that would actually be more appropriate for #redis
17:02 < cpsubrian> Interesting problem .. I am using socket.io with redisstore to server sockets from multiple serversâ€¦ I would like to keep track of how many people are in a couple different rooms â€¦. io.socket.clients('room') seems to be reporting wrong numbers
17:04 < FuzzyFox0> hey all
17:04 < FuzzyFox0> I am having an issue with npm since I updated node
17:05 < FuzzyFox0> http://pastebin.com/JN7m2Anu
17:07 < FuzzyFox0> any ideas?
17:10 < gildean> FuzzyFox0: npm cache clear
17:10 < gildean> or clean or something
17:10 < gildean> try that, then try again
17:11 < FuzzyFox0> same issue still
17:11 < FuzzyFox0> long shot.... remove the npm module from node by `rm -R /usr/lib/node_modules/npm`
17:11 < FuzzyFox0> then re install npm?
17:13 < FuzzyFox0> yup
17:13 < FuzzyFox0> that worked :P
17:13 < FuzzyFox0> wanted to see if anyone had anything else before I got round to doing that
17:14 < FuzzyFox0> thanks anyway gildean 
17:14 < gildean> np
17:17 < benatkin> npm bro todo
17:17 < npmbro> benatkin: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20bro%20todo
17:17 < benatkin> npmbro search todo
17:17 < npmbro> benatkin: Please see http://eirikb.github.com/nipster/#todo
17:17 < chapel> npm install todo
17:17 < npmbro> chapel: Please see http://github.com/vesln/todo
17:18 < chapel> npm search todo
17:18 < npmbro> chapel: Please see http://eirikb.github.com/nipster/#todo
17:18 < Qbix1> hey guys
17:18 < Qbix1> shoudl I use socket.io or engine.io
17:18 < Qbix1> what's the diff?
17:18 < chapel> Qbix1: socket.io has a lot of stuff on top
17:18 < chapel> at the moment they are separate
17:18 < Qbix1> chapel : like what
17:18 < Qbix1> how are they diff though
17:19 < chapel> engine.io is just the underlying websocket + fallback
17:19 < chapel> socket.io has rpc like commands
17:19 < chapel> evented handlers
17:19 < chapel> lots of helpers
17:19 < chapel> like room helper
17:19 < chapel> its like the difference between node and rails
17:19 < chapel> or node and express
17:19 < chapel> engine.io is closer to node, socket.io is closer to express
17:19 < benatkin> what happens when you try installing two npm modules with names that differ only in case on windows?
17:20 < benatkin> like oauth and OAuth
17:20 < RLa> i think one gets overwritten
17:20 < chapel> benatkin: aren't they the same?
17:20 < chapel> npm search oauth
17:20 < npmbro> chapel: Please see http://eirikb.github.com/nipster/#oauth
17:20 < benatkin> chapel: nope, they're totes diff
17:20 < chapel> wtf
17:20 < chapel> who is this erikb and his nipster
17:20 < RLa> the last one to install wins
17:21 < Qbix1> ah I see
17:21 < Qbix1> I like socket.io
17:21 < benatkin> chapel: it's a tool that searches npm and gets the watchers on github
17:21 < Qbix1> but the question is, socket.io chooses transport based on browser
17:21 < Qbix1> engine.io always tries a comet first right? bosh? bayeux? whatever?
17:22 < chapel> Qbix1: engine.io starts with xhr polling
17:22 < chapel> and then upgrades to websockets if available
17:22 < chapel> or otherwise
17:22 < benatkin> I hope they fix it through some clever hack on windows, not by making package naming case insensitive
17:22 < chapel> where as socket.io starts with websockets and down grades
17:23 < Qbix1> socket.io is biult on top of engine.io?
17:23 < chapel> so if no support, it takes longer to initiate connection
17:23 < chapel> Qbix1: it will be, but currently not
17:23 < Qbix1> ah I see ok
17:23 < Qbix1> how much longer does it take
17:24 < Qbix1> we have made a COOL framework
17:24 < Qbix1> using socket.io, node.js, and php
17:24 < Qbix1> like, superCOOL :)
17:24 < benatkin> php.net for consistency :p
17:24 < Qbix1> :P
17:24 < AviMarcus> npmbro, that's a great site to check if packages actually have a community! Thanks!
17:24 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
17:24 < benatkin> oh I forgot, we don't have a .js TLD
17:24 < benatkin> and the rules won't permit it o.O
17:24 < benatkin> er >.<
17:26 < AviMarcus> omg http://square.github.com/crossfilter/ I think I'm in love
17:29 < prettyrobots> Query languages packed into URLs.
17:29 < prettyrobots> I know there must be more than one. I found RQL on the interwebs.
17:29 < prettyrobots> At GitHub: https://github.com/persvr/rql
17:29 < prettyrobots> Anyone know of any similar efforts?
17:33 < prettyrobots> Query langauges in URLs. That's what it's all about.
17:33  * prettyrobots turns himself about
17:35 < Qalqi> 'm back to js in long time after an awful tussle with java
17:35 < prettyrobots> Qalqi: Java is a bully.
17:35 < RLa> prettyrobots, that would be neat for backend systems where you have single user
17:35 < RLa> prettyrobots, so security is not concern
17:36 < prettyrobots> Why would security have to be removed?
17:36 < Qalqi> but everything is coded in java
17:38 < RLa> prettyrobots, not removed but an issue, everyone could access all data with those queries
17:38 < prettyrobots> RLa: Not if you required authentication first.
17:38 < prettyrobots> Ah, oh, no I see what you're saying.
17:38 < RLa> yeah
17:38 < prettyrobots> Yeah, I assumed that the `tables` would be psuedo-tables.
17:39 < prettyrobots> Not against an actual database, like directly against your production PostgreSQL scheam.
17:39 < prettyrobots> But, like, a particular users `orders`.
17:39 < RLa> with one user there would be access or no access but not anything in between
17:39 < prettyrobots> If that user is authenticated.
17:40 < prettyrobots> I'm curious to find more URL query languages.
17:40 < RLa> anything else is too complex, including multiuser where one user must not see a part of data but may see another part
17:41 < RLa> i think i even wrote one such spec myself too
17:41 < RLa> there are some projects in java that do same
17:47 < RLa> prettyrobots, http://htsql.org/
17:47 < RLa> this is one of the most advanced i found
17:47 < prettyrobots> RLa: Yes. Thank you.
17:47 < RLa> but these things have limited use due to security issues
17:48 < prettyrobots> RLa: Perfect.
17:49 < prettyrobots> RLa: Do you have a Twitter handle? I want to Tweet this and I feel compeled to say 'via`.
17:50 <@Nexxy> d'aww
17:50 < prettyrobots> RLa: But if you like to keep to yourself, I understand.
17:50 < prettyrobots> @Nexxy: Wut?
17:50 <@Nexxy> "I feel compelled to say 'via'"
17:50 < RLa> prettyrobots, my twitter handle is RaivoL
17:51 < RLa> hm, i'm not getting what htsql is built onto, python?
17:52 < RLa> and how to secure it
17:52 < prettyrobots> Oh, Clark Evans.
17:52 < prettyrobots> That's who this is. Yeah, it's Python and it's his thing.
17:53 < prettyrobots> Looks like someone needs to write a parser for Node.js.
17:55 < prettyrobots> Ugh. Licesning is all screwed up.
17:56 < RLa> btw, if your backend is going to be *sql, why not just put sql code on the url :)
17:56 < context> rla: you need help. but judging by the smile im assuming thats sarcasm
17:57 < context> rla: and funny old project guy thought that was secure. flash/flex app he was doing the query in the flex app, sending it to the j2ee app and was always like "its completely safe against sql injection"
17:57 < context> rla: i didnt think about it much till i was snowboarding one day
17:58 < RLa> i think i have seen something similar on dailywtf
18:00 < Okee> Can someone give me a pointer on installing node from the command line on the Macbook Pro Lion?  I am getting an error message indicating the package is invalid.  I am using the following command line sudo installer -pkg node-v0.8.2.pkg -target /
18:01 < Okee> I may be bumped in the next few moments because a program update needs to close my browser, but I haven't gone away.
18:01 < Okee> I posted in the Mac Channel and didn't get a response.
18:02 < RLa> maybe it's for the wrong arch?
18:02 < RLa> i remember seeing similar error
18:02 < RLa> what helped was installing node from source
18:02 < Drager> I'm getting some errors
18:02 < Drager> var socket = io.connect('http://localhost');
18:03 < Drager> io.connect is not a function
18:03 < Okee> I am a total newbie.  Any suggestions on commands for doing this/
18:03 < prettyrobots> RLa: I believe the idea is to expose the relational model through URLs. It is a query language.
18:03 < RLa> but i had all dev tools like gcc etc already installed, so that was easiest solution
18:03 < prettyrobots> And SQL is not quite RESTful.
18:03 < prettyrobots> But, point taken. One could just accept an SQL string.
18:04 < johnmdonahue> Okee: how are you with git?
18:04 < prettyrobots> It's not quite the same, though. It's really a way of standardizing REST APIs.
18:04 < Okee> Total newbie.
18:04 < prettyrobots> johnmdonahue: Maybe tell Okee about homebrew?
18:05 < RLa> i still think it's too generic, that's probably reason i do not use it
18:05 < RLa> and complex queries would be just too complex to write as url
18:06 < RLa> think of joins when backend is *sql
18:06 < RLa> of course, one can write them as views in db
18:06 < RLa> (which i actually do a lot)
18:06 < johnmdonahue> Okee: this is my process for installing http://johnmdonahue.com/2012/installing-node-from-github/
18:06 < prettyrobots> RLa: Probably best to just design a nice RESTful API.
18:07 < prettyrobots> Hide the details.
18:07 < prettyrobots> And hide the details.
18:07 < johnmdonahue> Okee: but that's using git. it's not too complicated but yeah prettyrobots is right Homebrew might be a good solution as well
18:07 < Drager> Anyone here used socket.io?= 
18:07 < RLa> yeah, but something that still allows for things like offset, limit and order
18:07 < prettyrobots> Okee: You can probably get a lot of help getting homebrew running.
18:08 < prettyrobots> Okee: And it will help you all along the way, installing things you need to be a Node.js programmer.
18:08 < prettyrobots> RLa: Yup.
18:08 < Okee> Is this the URL http://hbc.hackmii.com/download/
18:09 < johnmdonahue> Okee: no i think thats for the wii
18:10 < Okee> ok.  i will keep checking.
18:10 < johnmdonahue> Okee: https://github.com/mxcl/homebrew
18:10 < Qalqi> all hail java
18:10 < johnmdonahue> Okee: and https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
18:11 < johnmdonahue> Okee: but there's a good chance you might run into issues with homebrew. i really suggest either learning to build from git or just use the installer on nodejs.org
18:12 < Okee> I am going to take a look at the code for the installer.  I am still learning the Mac.  Windows stole my childhood :)
18:12 < cce> prettyrobots: regarding HTSQL licensing, the original agreement I had with investors was that we'd charge for commercial (non-free, non-open source) databases only.  
18:12 < prettyrobots> cee: Hello!
18:13 < prettyrobots> cee: Soâ€¦ What does a clean slate implementation in JavaScript mean?
18:13 < johnmdonahue> Okee: haha. best of luck :)
18:13 < prettyrobots> cce: Which license applies?
18:14 < cce> So, the licensing complexity is due primarily to this promise... my need to have it unburdened for any use (including proprietary applications) with open source databases
18:14 < prettyrobots> cce: I should say, I understand licensing is what it is.
18:14 < prettyrobots> cce: Yeah, I'm trying to say, I'm asking, and not bellyaching.
18:15 < cce> prettyrobots: well, it has a very good chance of being MIT licensed straight-up in a while, just not yet
18:15 < prettyrobots> Ah, nice.
18:15 < prettyrobots> cce: I have a fleeting desire to hack at a JavaScript/Node.js implementation of the language.
18:15 < cce> Anyway, our investors still hope to charge commercial database vendors, so long as that remains viable...
18:15 < cce> prettyrobots: it'd require a very significant effort
18:15 < prettyrobots> cce: I like significant efforts.
18:16  * cce figures probably 1 year, presuming you're basically doing a literal verbatim copy
18:16 < cce> The parser... well, that shouldn't be hard, it's a straight-up grammar.
18:16 < cce> But, something that actually is useful... well, that's work.
18:17 < cce> The primary problem you'd have porting the code to Node.JS is that we use multi-classes, see htsql/core/adapter.py 
18:17 < prettyrobots> cce: Well, I'm wondering how you'd feel about it. Is it not a place you want the project to go? Would it undermine your business goals?
18:18 < cce> Well, we'd love to have other implementations.  I don't know if the business goal is realistic.
18:18 < prettyrobots> cce: Beyond the language, I'd look at how to implement rest of thang in a JavaScript way.
18:19 < prettyrobots> cce: Probably would not be a 1 to 1 port. Proabably not.
18:19 < cce> Semantics would be kinda hard, and we'd really not like "close enough".
18:20 < cce> We've spent 7+ years on this thing, it's really well designed (but awfully hard to implement).  You're goal is to port it wholesale?
18:20 < prettyrobots> cce: Hmmâ€¦ Well, from what I saw, you had the behavior pretty well specified. There's got to be an easy way to test conformance.
18:20  * cce nods.  We have lots of regression tests, and we're working on a model definition (I'm reluctant to call it a specification)
18:20 < RLa> cce, is there the expression grammar somewhere?
18:21 < prettyrobots> cce: I'm hearing that.
18:21 < cce> Yea, probably in htsql/core/tr/parser.py
18:21 < RLa> going to check it out
18:22 < cce> RLa: that'd be pretty straight-up, but it's less than 5% of the work
18:22 < cce> I mean, the grammar itself isn't where the hard work happens.
18:23 < cce> There are also a few "warts" in the gammar, they are the result of design compromises.  We've field tested it quite a bit over the years, you could normalize the grammar a bit more, but you'd lose some of the parsimony.
18:23 < prettyrobots> cce: It would be interesting is all. I wouldn't be able to dive into it looking for a prefect first draft.
18:24 < cce> prettyrobots: well, the translator itself is where things get complicated, I'm not sure you'd want to implement the language without doing a literal copy (at least, if your goal is to do it in a modest timeframe)
18:24 < prettyrobots> cce: It wouldn't be pleasant for me to do something that detracts from your efforts.
18:25 < cce> Well, if it's the choice of having the language be broadly adopted, or making money, I'd rather have adoption.
18:25 < prettyrobots> cee: I'm almost certain that a literal copy would be more difficult than conforming to benchmarks. I'm sorry, but I'm a programmer, and I think, probably incorrectly, that I can figure it out.
18:26 < prettyrobots> cce: Node.js is kind of different from Python.
18:26 < cce> So, right now we're designing insert/update/delete functionality, designs from those will be posted in a while (when i get time to write it up)
18:26  * cce nods.
18:27  * cce isn't that familar with node.js, only that it's probably what I see as the next generation of server software... hence me lingering on this channel.
18:28  * cce thinks if you're going to invest any reasonable amount of time in an similar effort, it'd be great to talk further.
18:29 < cce> (I have to go afk for a while)
18:29 < prettyrobots> cce: Source?
18:29 < cce> Source?
18:30 < prettyrobots> I'm acutally curious to survey the ...
18:30 < prettyrobots> savannah.
18:31 < cce> https://bitbucket.org/prometheus/htsql/
18:32 < prettyrobots> https://bitbucket.org/prometheus/htsql/src
18:32 < prettyrobots> Ah, yes. Thanks.
18:32 < RLa> btw, does it work with python 2.5?
18:32  * cce thinks we just dropped 2.5
18:33 < cce> RLa: why would you need 2.5?
18:33 < RLa> hm, my laptop has it installed :/
18:33 < RLa> should upgrade to 2.6?
18:33 < cce> Ah, we started porting to 3.X and 2.6 has the unicode stuff that is compatible.
18:34 < RLa> it's giving syntax error on 'with' keyword as well
18:34 < cce> Ya.  You'll also hit problems with unicode.
18:34 < cce> We want to get a 3.X version out, and to do this we needed the unicode features in 2.6
18:36 < cce> RLa: I'd upgrade your python to 2.6/2.7 -- Python 3.X is *totally* different though.
18:36 < RLa> damn this old laptop
18:37 < cce> Run it in a VM?  Or, demo.htsql.org has a nice query builder so you could play with it
18:37  * cce uses VMs alot these days, they make life much easier.
18:37 < prettyrobots> cce: Interesting.
18:37 < RLa> vm, yes, not sure if wicd would work after upgrading python
18:38  * cce has to go afk though.  I'll be back on-line in 2-3h.
18:38 < RLa> running slackware 12 here because nothing newer works on this laptop
18:38 < prettyrobots> cce: You had to get get going, but check back later. I'll be here. I
18:38 < RLa> damn my vbox is old too, cannot clone my debian vm
18:39 < prettyrobots> RLa: Gerk.
18:43 < jcrew> TehShrike|Work: i was referring to k/v stores in general, not just redix
18:43 < jcrew> redis*
18:44 < prettyrobots> How stupid do I have to be to attempt to invoke JSONP from Node.js?
18:44 < prettyrobots> On a scale from herp to derp?
18:45 < prettyrobots> Or is there a safe way to do it?
18:48 < jergason> congrats, you now have server-side xss
18:49 < Okee> ok.  I installed Github, but it isn't showing up in the library, or the applications folder. Where is it?
18:49 < prettyrobots> jergason: Yeah. That's all I could come up with too.
18:49 < jergason> it is kindof scary
18:50 < aroman> prettyrobots: I actually write almost all my server side code on the browser and send it over web sockets to node.js in a giant eval() loop
18:50 < aroman> </troll>
18:50 < jcrew> hahaha
18:50 < jergason> seems like you would have to do some kind of whitelisting, but even then it would be a nightmare to secure well
18:51 < prettyrobots> aroman: I have laughed aloud at your humorous statement.
18:51 < TooTallNate> has anybody attempted to write an irc *server* in node yet?
18:51 < prettyrobots> TooTallNate: Is that dare?
18:51 < jergason> uggh, irc servers are a nightmare
18:52 < jergason> well i guess they arent, since they are all different and you can do whatever the crap you want
18:52 < RLa> fancy bots and stuff
18:52 < prettyrobots> So, JSONP on the server is herp derp stupid. Good to know.
18:52 < TooTallNate> all i want is unicode nicknames :p
18:52 < jergason> maybe what i mean is that the state of the IRC standard is a nightmare
18:52 < prettyrobots> TooTallNate: Well, then *of course* you have write your own server.
18:52 < jergason> à² _à²  joined the chat room
18:53 < prettyrobots> FYI: I was implementing it in a library that works both client and server side, so on the server side, I'll throw an exception.
18:53 < prettyrobots> jergason: brilliant.
18:53 < jergason> wait, IRC doesn't say anything about character encoding, right?
18:53 < jergason> why couldn't you use unicode nicknames?
18:54  * jergason is sortof dumb about unicode stuff still and might be saying stupid things
18:54 <@maxogden> prettyrobots: a) why are you writing your own http lib b) jsonp is only for single origin policy restricted GETs :)
18:54 < prettyrobots> @maxogden: Working backwards...
18:55 < prettyrobots> @maxogden: b) perfect. I'm going to copy that into my docco. Thanks.
18:55 < prettyrobots> @maxogden: a) I'm writing a template language and jsonp is a client side data source.
18:56 <@maxogden> ahh cool
18:57 < prettyrobots> @maxogden: And I was implementing the server side resolver and came to JSONP and did a Scooby style Hurh?
18:57 < gildean> jergason: over here we actually changed all irc-channels to utf-8 almost ten years back
18:57 < jergason> gildean: where is over here? freenode?
18:57  * prettyrobots Rebembers a) Scooby-doo. b) How old he is compared to most noders.
18:58 <@maxogden> tweens know scooby thanks to freddy prinze jr
18:58 < sechrist> meddling kids and their asynchronous io too
18:58 < livinded> lol
18:58 < ebright> JSHint seems to be ignoring my .jshintrc file - I've put one in the root of my project folder and in Sublime's JSHint package folder. What am I missing?
18:58 < jergason> in portuguese shaggy is called hot dog
18:58 < gildean> jergason: no i mean here as in finland, and i believe most scandinavian channels ircops etc. were in on it too
18:58 < chapel> there are new scooby doo shows
18:59 < gildean> jergason: changed from iso-8859-1 to utf-8
18:59 < jergason> gildean: oh cool
18:59 < gildean> so characters like Ã„Ã¤Ã–Ã¶Ã…Ã¥ would work correctly for everyone
19:01 < RLa> prettyrobots, htsql looks pretty nice
19:02 < RLa> got it installed
19:02 < prettyrobots> RLa: Cool! I know cce has spend a lot of time thinking abou tit.
19:03 < prettyrobots> His use case is dashboards and accidental database queriests.
19:03 < prettyrobots> It would be useful with this template langugage I'm creating.
19:11 < jhsto_> is jesusabdullah online?
19:11 < TheEmpath1> every time i see his name, i think it needs a comma and an exclamation point
19:12 < jesusabdullah> jhsto_: I am, what's up?
19:12 < jhsto_> well, i had some problems with nodejitsu, idk is this you job to help me, but i already got some folks ready to help me at nodejitsu web chat
19:12 < jhsto_> ive been running into multiple errors
19:13 < jhsto_> while deploying
19:15 < jesusabdullah> jhsto_: It's my job to help you, so, like
19:15 < jesusabdullah> jhsto_: gimme sec
19:23 < webar7> is it better to use nodejs with redis or couchdb
19:23 < jcrew> webar7: you should *always* use nodejs with mongodb, never anything else
19:23 < webar7> wt?!?
19:23 < webar7> :)
19:23 < webar7> stop the heck
19:24 < webar7> but couch is in erlang and I'm nostalgic and part swedish so ...
19:25 < gildean> i would also recommend mongodb if you don't plan on caching everything to memory
19:25 < jcrew> it doesn't matter what you're doing, even if you don't need a storage system - you should include mongodb just in case
19:25 < webar7> :)
19:26 < benatkin> webar7: I like CouchDB
19:26 < jcrew> with that, you should add in your usecase if you want real advice on why you'd use either or something else
19:27 < benatkin> jcrew: I think if someone doesn't state a use case we can assume more than one db will work for them
19:27 < jcrew> benatkin: yea but which one is best is, at best, a troll question without a use case
19:28 < webar7> all I can say is spozed to use not gpl and spozed to cache in memory ... couchdb seems big compared to redis but still fast
19:29 < jcrew> that isn't really a use case
19:29 < webar7> caching lat long
19:29 < benatkin> jcrew: disagree, having a good general purpose db is very important
19:30 < benatkin> jcrew: and it's a debate worth having
19:30 < jesusabdullah> couch is awesome for what I like to call "small data"
19:30 < webar7> for a longish time ... when usere stores a location it goes to postgresql for long term "saved" config
19:30 < jesusabdullah> like, regular-sized datasets
19:31 < jlord> hey jesusabdullah!
19:31 < webar7> to me it seems the redis layer just caches for UI and I guess for reads from the application so it's just to stop postgres from being used too much in our case ... but postgres will repond to queries in JSON we could just cache
19:31 < sechrist> jesusabdullah: I accidentally the entire hoarders
19:32 < webar7> anyway if it's a pointless debate then I say we should revisit the question when we have 10million users
19:32 < webar7> :)
19:33 < jesusabdullah> sechrist: true story?
19:33 < jesusabdullah> jlord: Hey hey!
19:33 < webar7> benatkin, tnx we are less afraid
19:33 < benatkin> webar7: that sounds like a good use case for redis, actually, though other databases would work
19:33 < jesusabdullah> jlord: Not used to seein' you 'round these parts! You gonna stick around? :)
19:33 < webar7> benatkin, I think we will top out at 1000 users haha
19:33 < jesusabdullah> ("round these parts" meaning "in ur irc channelz")
19:33 < benatkin> webar7: you could even run a different postgresql instance and get good results
19:34 < blazes816> is it possible/advisable to somehow rename node_modules to .node_modules in my projects?
19:34 < webar7> benatkin, yeah ... the "traitional" rdbms are doing more nosql type trix now 
19:34 < webar7> well, so it seems
19:35 < webar7> .. storing query results in json for a while is going to help 
19:35 < RLa> blazes816, it's quite a convention to not rename/move that directory
19:36 < blazes816> RLa: okay.  thanks
19:45 < lohkey> whats the quickest way to temporarily mute stdout from within a node.js process?
19:46 < sechrist> lohkey: like in node code or bash pipe redirection?
19:46 < gkatsev> pipe stout to /dev/null?
19:47 < gkatsev> or you could probably pause the stream
19:47 < lohkey> in node code
19:47 < lohkey> hmmm, pause might work
20:02 < benvie> pause isn't a mute though
20:02 < benvie> if the mute button on my song machine shat out 8 minutes of music in 3 seconds when I pressed unmute I'd be unhappy
20:03 < benvie> probably dead
20:04 < benvie> at the very least, I'd be on fire
20:06 < gkatsev> lol
20:08 < TimeTurner> anyone have firsthand experience with require.js and going from commonjs node-style -> AMD?
20:08 < TimeTurner> or any tips
20:09 < gkatsev> TimeTurner: check out browserify instead.
20:09 < benvie> so I made this thing where chromium is in node and node is in chromium
20:10 < benvie> https://github.com/appjs/appjs/raw/master/examples/node-in-browser.png
20:10 < benvie> oh and https://github.com/appjs/appjs/raw/master/examples/shared-context.jpg
20:11 < gildean> also there's the thing google is pushing out
20:11 < benvie> yeah
20:11 < gildean> dart or whatever
20:11 < benvie> that's not this
20:11 < gildean> not realted to nodejs, but similar
20:11 < gildean> related even
20:12 < benvie> is related, highlights how nice it is to actually have the ability to interact with the system
20:12 < benvie> bonus points when node's included
20:12 < AlbireoX_> I don't know why Dart is so good
20:13 < benvie> what I mean is
20:13 < benvie> in browser -> window.node is node's global object
20:13 < AlbireoX_> dude
20:13 < AlbireoX_> that is awesome
20:13 < AlbireoX_> appjs
20:14 < benvie> and in node, process.mainModule.exports.windows[0] === browser.window
20:14 < AlbireoX_> you deserve another follower
20:14 < benvie> or, something like this works
20:14 < AlbireoX_> that is awesome
20:15 < benvie> require('appjs').createWindow({}).on('ready', function(){ console.log(this) })
20:15 < benvie> produces like 8000 pages of the document tree
20:15 < benvie> spamming the console because it's got a lot of shit
20:15 < benvie> (`this` is the browser "window")
20:16 < brianc1> wanna see a site I'm working on with node?
20:16 < brianc1> http://transferly.com/
20:16 < AlbireoX_> http://transferly.com/receive/1342469749776
20:16 < brianc1> browser -> server -> browser file transfer - no temp file stored on the server....stream back-pressure!
20:16 < brianc1> it only does a 1-1 transfer
20:16 < gildean> brianc1: hey, it works
20:16 < brianc1> not really an "upload, forget the file, and download it later." more like "I need to send this 300 megabytes to this other computer right now"
20:17 < brianc1> it's lacking some major polish. not in beta or anything, but wanted to share it w/ the lovely noders
20:17 < AlbireoX_> how long are the files stored on the server?
20:17 < AlbireoX_> this is awesome
20:17 < chapel> AlbireoX_: looks like not at all
20:17 < brianc1> AlbireoX_:  they are never stored on the server
20:17 < gildean> AlbireoX_: i don't think at all
20:18 < chapel> server just streams it
20:18 < gildean> from socket to socket
20:18 < brianc1> they stream _through_ the server
20:18 < deedubs> benvie: appjs is looking better and better.  Only thing holding me back giving it a go is https://github.com/appjs/appjs/issues/50
20:18 < AlbireoX_> oh
20:18 < brianc1> upload request piped to other browser's download response
20:18 < chapel> http://transferly.com/receive/1342469883088
20:19 < brianc1> I need to put some instructions up about the transient nature of the transfer
20:19 < brianc1> like you can't spread the file out to 5 receivers or anything
20:19 < chapel> brianc1: also handle if its been retrieved already
20:19 < AlbireoX_> sorry if this is a stupid question... but if I closed my browser, would that mean the transfer would stop?
20:19 < brianc1> chapel: yeah definitely
20:19 < brianc1> AlbireoX_: yeah it would stop
20:19 < gildean> brianc1: you need to update the retrieve page automatically as soon as the download link is first clikced
20:20 < brianc1> AlbireoX_: it's like sending a file over scp more than it's like attaching a file to email
20:20 < AlbireoX_> I see
20:20 < AlbireoX_> well, that's awesome, i'll be using this :p
20:20 < brianc1> gildean: yeah i need to do some mega work on it this week
20:20 < brianc1> AlbireoX_: thanks.
20:20 < brianc1> I want to make a cli client to send and receive
20:20 < deedubs> while we're all sharing projects I'd love some feedback on http://devsca.pe
20:20 < AlbireoX_> Put an error message if someone else is trying to download
20:21 < brianc1> deedubs: neat!
20:22 < AlbireoX_> nice deedubs
20:22 < deedubs> its very young
20:23 < deedubs> we just recently took a new swing at the signup process.  It still needs some polish but let me know
20:23 < AlbireoX_> I'm on there now in Dallas
20:24 < gildean> deedubs: not bad, but needs links on the description when you click someone
20:24 < chapel> deedubs: Dan Williams in Toronto
20:24 < deedubs> AlbireoX_: cool! We're working on new profiles that'll be more informative
20:24 < deedubs> gildean: ^^
20:24 < AlbireoX_> That would be great
20:25 < deedubs> http://cl.ly/2u0q3x3s1Z0C0912410R
20:30 < gildean> deedubs: tried signing in, didn't work
20:31 < deedubs> gildean: may I PM?
20:31 < gildean> sure
20:32 < AlbireoX_> deedubs: One feature I'd like to see is being able to click on a project and linking all of the developers/contributors/watchers of the project somehow together
20:32 < deedubs> AlbireoX_: Yeah we have some fun idea's in the pipe for the repo pages/views
20:32 < AlbireoX_> Nice
20:33 < context> deedubs: i clicked on someone with name on top of austin, tx
20:34 < context> and the whatever on right hand side says vancouver, canada
20:34 < deedubs> context: yeah there is a difference between the persons 'github' location and their actual location
20:34 < deedubs> we should probably not show there github location
20:35 < context> deedubs: tell them bastards to stop being lazy and make sure they fix their location on all 500 sites they have accounts at ;)
20:35 < deedubs> :D haha
20:35 < context> of course, 500 probably being on the low end of the spectrum for people
20:36 < deedubs> context: indeed. if only there was a service that was specifically focused on where developers are located
20:37 < context> deedubs: just one more place to update their location :p
20:38 < TimeTurner> I wish there was a direct way to change the prototype after object creation
20:38 < TimeTurner> in ES5
20:38 < TimeTurner> (without __proto__)
20:39 < smartPudding> Hi, is anyone using clojure to write node.js code ?
20:42 < supsup> did not know you could write javascript in clojure.
20:44 < supsup> is it just like coffeescript i guess?
20:46 < TimeTurner> clojure compiles down to JS?
20:46 < supsup> https://github.com/clojure/clojurescript guessing he means this
20:47 < TimeTurner> ah
20:47  * TimeTurner thinks more indirection :(
20:47 < supsup> heh
20:47 < supsup> yah
20:48 < happosade> What is the best way me to start learning node.js, I can't write (yet :D ) js, but I have programmed with Java..?
20:48 < TimeTurner> I think it takes me twice to three times as long to understand a coffeescript source than it does a js source file
20:48 < supsup> has weird license i've never used also.
20:48 < happosade> So guessing that I would need something fot totally newbie.
20:48 < TimeTurner> happosade: ##javascript
20:48 < TimeTurner> they have all the information over there
20:48 < supsup> happosade:  http://eloquentjavascript.net/
20:49 < smartPudding> yes, with closurescript you can compile to js
20:49 < kinginky> what's everyone using for control flow these days?
20:49 < TimeTurner> tons of helpful people with tons of guides
20:49 < happosade> TimeTurner: So I should learn some js before even strarting with node?
20:49 < gildean> happosade: just start making something
20:49 < kinginky> any good & current libraries?
20:49 < gildean> happosade: that's how i did it
20:49 < Karmaon> happosade, the best way is to write javascript and use node's libraries
20:49 < gildean> happosade: you'll learn js while you write your node.js app
20:49 < TimeTurner> happosade: definitely, node is all js on the developer side so you should know js from front to back
20:49 < Karmaon> then soon you'll realize node is not a silver bullet
20:50 < TimeTurner> of course, you leanr a lot by writing and stumbling a bit but that's just your learning style
20:50 < TimeTurner> learn*
20:50 < Karmaon> and the community is full of nosql hipsters with sub-optimal sql support
20:50 < gildean> i like to learn by doing
20:51 < TimeTurner> Karmaon: node-mysql is pretty popular for sql usage in node
20:51 < gildean> i've never seen a point in learning without something to work on at the same time
20:51 < supsup> i'd read some basic books first, then do a project.
20:51 < Karmaon> TimeTurner, postgres community is even smaller than mysql
20:51 < TimeTurner> and contrary to popular opinion, node doesn't really have a consensus on "nosql vs sql"
20:52 < Karmaon> with only a few packages
20:52 < smartPudding> peepcode video's about node.js are a good intro
20:52 < TimeTurner> nosql does weigh out sql in the community for sure, but sql support isn't dead or anything
20:52 < happosade> So if I have this quite-simple idea, then I shall just start doing with it skipping all the "step-by-step" tuts?
20:53 < TimeTurner> happosade: IMO I hate tuts, basically just start with expressjs.com for your standard http framework and then you'll be able to follow the api on the guithub page and find more libs from there
20:53 < supsup> makes no sense to me to jump into node.js if you don't even know javascript.
20:53 < TimeTurner> that's for your standard typical web app project
20:53 < VesQ> happosade: it's just about how you want to learn
20:53 < TimeTurner> but yeah you should really know javascript
20:53 < supsup> but thats just me everyone is different
20:54 < TimeTurner> it's like reading a foreign language that you have no clue about otherwise
20:54 < TimeTurner> and javascript is definitely != java
20:54 < TimeTurner> not even close
20:54 < VesQ> happosade: judgibg from your nickname, I could sonetimes offer a helping hand ahould you need Finnish help
20:54 < jcrew> it's practically the same thing
20:54 < VesQ> judging*
20:54 < jcrew> javascript and java, that is
20:54 < supsup> it has java in it's name right
20:54 < smartPudding> yep, javascript is a real language... with its own rules... like there are no integer or floats...
20:55 < TimeTurner> jcrew: no
20:55 < AviMarcus> smartPudding, ?
20:55 < happosade> Yeah, I know that Java != JS, but just said that I know some languages.
20:55 < jcrew> it's like they were born from the same stuff, java is so fast and fluid just like javascript
20:55 < jcrew> and that's because they're the same thing
20:55 < AviMarcus> anyone used derbyjs as opposed to angular?
20:55 < TimeTurner> jcrew: if you're trolling then it's working quite well
20:55 < qbit_> isaacs: is it possible to have a private npm repo with _just_ the private packages? ( ie .. anyway to setup a private repo without cloning all 25g of existing stuff? 
20:55 < supsup> same primordial goo
20:55 < TimeTurner> for the noobs
20:56 < jcrew> TimeTurner: thank you : - )
20:56 < TimeTurner> lol
20:56 < smartPudding> AviMarcus: yep, only numbers
20:56 < AviMarcus> Angular doesn't really have this syncing built in.. I dunno if I'll need it, but it's pretty cool that it's built into derby
20:56 < AviMarcus> parsefloat and toint() are just a rounding thing?
20:56 < jcrew> but seriously, they're exactly the same, one of them just doesn't compile until the browser cross compiles the script to java
20:56 < VesQ> haha
20:57 < jcrew> that's basically the only real difference
20:57 < supsup> iava byte code you mean
20:57 < kylefarris_> I'm using socket.io and my app works wonderfully well with Chrome (websockets) and IE9 (jsonp long polling) but Firefox keeps throwing this annoying error..."[16:52:09.484] uncaught exception: [Exception... "Security error"  code: "1000" nsresult: "0x805303e8 (NS_ERROR_DOM_SECURITY_ERR)"  location: "https://redacted.com/notifications/socket.io/socket.io.js Line: 2322"]
20:57 < supsup> then the jvm executes it
20:57 < kylefarris_> anyone ever seen that before and know how to go about fixing it?
20:57 < VesQ> a Java applet that runs JS would be the smartest move ever
20:57 < jcrew> yea it makes the compiler into a 1 and 0 and the jvm processes the byte code into machine code
20:57 < smartPudding> AviMarcus : right there is only one data type
20:57 < supsup> word
20:58 < jcrew> it's crazy smart stuff so you don't really need to anything except that they're the same
20:58 < supsup> that would be pro java applet it must have been done already.
20:58 < jcrew> need to know anything^
20:58 < supsup> if not prob possible with this sweet sweet clousrScript
20:58 < jcrew> i think the applet stuff is left over from javascript
20:59 < supsup> naw it was made for the javascripts
20:59 < jcrew> originally they wanted to avoid beverage names involved in mcdonald's lawsuits so they started to go towards fruity names
21:00 < jcrew> and everyone started writing javascript applets and then the lawsuit got overturned so they went back to javascript but couldn't get rid of the remnants of fruit
21:00 < jcrew> hence the applets in javascripts
21:00 < austinbv> Applets?
21:01 < austinbv> Does node accept pulls on a specific day?
21:02 < SubStack> christmas day
21:03 < SubStack> npm xmas
21:03 < npmbro> SubStack: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20xmas
21:03 < austinbv> Ha
21:04 < austinbv> tjholowaychuk: the timers bug i thought was mocha... was node
21:05 < tjholowaychuk> austinbv oh really? what was wrong
21:06 < austinbv> tjholowaychuk: https://github.com/joyent/node/pull/3710
21:06 < austinbv> Simple
21:07 < tjholowaychuk> ah
21:07 < austinbv> So hopefully the pull so i can push this library
21:12 < kinginky> need a way to output all arguments of a given function
21:12 < kinginky> process.argv?
21:12 < kinginky> or does this only deal with command line args?
21:13 < TimeTurner> yep
21:13 < TimeTurner> command line
21:13 < kinginky> TimeTurner: thx
21:13 < kinginky> k
21:13 < kinginky> thx
21:13 < kinginky> any way to do what i need?
21:13 < austinbv> Console.log(args)
21:13 < kinginky> cool, thx
21:14 < austinbv> Err arguements
21:15 < riven> kinginky: inside of a function body, you have access to the magic `argument` array-like object, which holds all passed-in arguments. Assuming that's what you meant.
21:15 < riven> err, `arguments`
21:15 < kinginky> riven: i figured it out now. thank you :]
21:15 < austinbv> Thanks my spelling is off today
21:15 < kinginky> okay, has anybody used Step?
21:28 <@isaacs> qbit_: you can do a filtered replication
21:31 <@isaacs> qbit_: here's an example of something like that: https://github.com/isaacs/npm-www/blob/master/dev/replicate.js
21:32 <@isaacs> qbit_: that's just replicating a slice of the registry for my own testing needs, but you can set it up to do whatever.
21:33 < qbit_> isaacs: thanks.. guess i will make a list of the submodules my private packages need .. filter only those into my couch repo.. and then do a --registry dance for the rest..
21:34 <@isaacs> qbit_: you could probably do something fancy like keep a list of package names, and update it via npm ls -pl and some awk trickery
21:39 < kenperkins> what's the "right" way of detecting when the parent process terminated from a child_process.fork()
21:39 < kenperkins> (so you don't leave orphaned child processes around)
21:45 < qbit_> isaacs: wait.. is npm-www the stuff to use for a private repo.. or is it npmjs.org? :O
21:45 < pawn> Hey. Socket.io says that MemoryStore isn't a good session store for production. How do I choose a good session store? What do you recommend?
21:46 < spolu> pawn: you basically have redisStore or MongoStore. For session if find redis really adequate
21:46 < spolu> ^ I find redis really adequate
21:47 < pawn> spolu: what about memcache? That was onee.
21:48 < spolu> pawn: yep memcache should be fine as well. Anything working in memory and accessible through network (so that it can scale beyond 1 instance) should be fine
21:49 < pawn> spolu: So my options are, memcache, redis and mongo, but how do I choose?
21:49 <@isaacs> qbit_: npm-www is the source of https://new.npmjs.org/
21:49 < TehShrike|Work> SubStack: In node-optimist, how did you decide to make argv a property with a getter, instead of just a function to call?
21:50 < spolu> pawn: I would rather say memcache or redis. redisStore + redistogo.com is a winner
21:50 < qbit_> isaacs: ah
21:51 < pawn> Is there a memcache to go?
21:51 < SubStack> TehShrike|Work: it was originally not a getter but then I would have had to break the api to do the things I wanted to do
21:51 < SubStack> so I used a getter
21:52 < SubStack> anyways don't use optimist as an example of good code or anything
21:52 < TehShrike|Work> heehee
21:52 < SubStack> it's old battle-hardened code with lots of special cases and exceptions and messy bugfixes
21:52 < perezd> does socket.io use redis pub/sub at all?
21:52 < TehShrike|Work> I liked the idea of the chaining, I was inspired to make something similar
21:52 < SubStack> meh chaining isn't so great
21:53 < TehShrike|Work> How would you implement that library differently?
21:53 < TehShrike|Work> Without chaining, that is
21:53 < TehShrike|Work> getArgument(name, type, default)?
21:54 < SubStack> I think today I would just write a function that takes an object of optiony things and returns an argv object
21:54 < SubStack> but whatever, that old code works fine
21:54 < TehShrike|Work> Makes sense.
21:55 < perezd> whats the recommended redis client to use in node these days?
21:56 < TooTallNate> perezd: "redis"
21:59 < perezd> k
22:00 < perezd> whats the current state of redis/socket.io integration?
22:03 < pawn> Which is more light-weight: redis or memcached?
22:03 < perezd> pawn: they are designed to solve different problems
22:04 < pawn> perezd: Where can I find that summary?
22:04 < perezd> google around for that
22:04 < perezd> im sure its been done a million times
22:08 < ccowan> For your package.json, Do you usually freeze the version or do you use "*"?
22:08 < perezd> freeze
22:16 < ccowan> Does anyone know of a minifier that will preserve line breaks?
22:17 < zackattack> benatkin: hey!
22:19 < chilts> ccowan: sometimes I use ~0.1.x which means to use any version of 0.1
22:19 < chilts> or ~0.1.3 which means anything like 0.1 but above 0.1.3
22:19 < chilts> (you may need to check what I think is true) :D
22:19 < ccowan> I have most of them set at ~0.x.x
22:19 < ccowan> I was just curious what everyone else is doing
22:20 < chilts> I like fixing at the APIi level (the middle digit)
22:20 < chilts> assuming the author does the right thing :)
22:20 < chilts> APIi=API
22:20 < ccowan> rightâ€¦ I don't actually have them set at ~0.x.x
22:21 < ccowan> just at whetever version I initially used
22:21 < ccowan> I upgrade them sometimes when I need a bug fix or what not
22:41 < TehShrike|Work> isaacs: I am bothered by the fact that people continue to use Github's "follow project" functionality to indicate interest in a project, as opposed to starring the project in npm.
22:41 < TehShrike|Work> It's a problem because 1. That's not what following something is supposed to do (though that's what people use it for) 2. it doesn't make it any easier for me to search npm to see what people like to use.
22:41 < TehShrike|Work> I can look and see what projects are required by the most other projects, but that's a different thing - I want to know the number of other programmers who have expressed interest in a project (and when researching libraries, I would ideally be able to sort npm results by this number)
22:41 < TehShrike|Work> I've been rolling around different ways to get people to transition from using the "follow project" button on github to starring things in npm, but I'm wondering if this is something you've already thought about and made any decisions about
22:42 <@isaacs> TehShrike|Work: yes.  i hear you.
22:42 <@isaacs> TehShrike|Work: that is where things are going.
22:42 < TehShrike|Work> Are you tending towards paying attention to number-of-followers in github, or in making starring more accessible?
22:43 < TehShrike|Work> I was thinking of making a browser plugin that would show a "star this on npm" button on appropriate github projects
22:43 < TehShrike|Work> But that would be a lot easier if you made an iframe-ready page for embedding, ala the way you can embed Facebook "like" buttons anywhere
22:44 < TehShrike|Work> And of course, the most serious downside to that idea is that it would only be usable by people who installed the browser plugin.
22:46 < devaholic> TehShrike|Work: and were somehow authenticated with NPM?
22:48 < mkh> hi all, am using ab to do some basic performance tests on Node/Express on mac os x
22:48 < mkh> ab -n 10000 -c 100 -r http://foo.com  for example
22:48 < TehShrike|Work> devaholic: eh?  Sorry, not sure I get your question
22:48 < mkh> and all seems well except occasionally I get response times in the tens of seconds
22:48 < TehShrike|Work> devaholic: oh, I see
22:49 < mkh> sorry, should have specified that I'm using the out of the box express app.js
22:49 < devaholic> mkh: ab doesnt work so well on mac afaik
22:49 < mkh> devaholic: true, I've had to upgrade ab to the latest from apache to get it to work at all
22:50 < mkh> so you would expect these poor response times to be outliers?  the seem to be a bit of a red flag to me otherwise
22:50 < TehShrike|Work> devaholic: Yes, assuming people could log in to npmjs.org, using an iframe would make it so that they didn't have re-authenticate with another API
22:50 < devaholic> mkh: if you are just testing one node instance (not a clluster) you could just use a node cluster to or other instance(s) to load test it
22:51 < mkh> I'd be a little leery of confusing the issue if I did that
22:51 < mkh> I suppose I should invest some time in using a non-ab loadtest solution for the mac.  will do, thanks.
22:52 < devaholic> mkh: is ab still waiting after node has stopped consuming cpu?
22:52 < mkh> mmm let me check
22:52 < devaholic> mkh: its actually not that hard to whip up a file that uses request to load test another http server, it works fairly well in my experience
22:52 < ccowan> ugh!â€¦ I'm so sick of sysadmin work.
22:53 < devaholic> mkh: getting all the same stats might not be as easy, but you can test simple stuff like req/s
22:53 < mkh> devaholic: I'm not concerned about difficulty of writing such a too, I'm leery of explaining how I used the tool to test the tool I'm testing
22:53 < mkh> *such a tool
22:53 < mkh> if that makes sense
22:53 < devaholic> sure, there are others besides ab
22:54 < devaholic> or you could put it all on a different box
22:54 < mkh> did that, still saw the hangs
22:55 < Vbitz> can you write a big endian string to a buffer
22:55 < devaholic> if they are really long times that'd be a concern, but if its just a small increase its probably nothing
22:55 < mkh> I'll swap out ab and rerun on linux, I guess.
22:55 < mkh> devaholic: 20sec +
22:55 < devaholic> if you look at the express load tests w/ ab, the response times increase as request/s go up, and the end of the test always has a little tail
22:55 < mkh> it is really only visible at -c 200 or so
22:56 < mkh> but I've seen it at -c 100 as well
22:56 < devaholic> mkh: you should be able to do a lot more than 200 concurrents, it sounds like an issue in the code
22:56 < mkh> its the default express hello world
22:56 < mkh> haven't touched it
22:56 < devaholic> lol
22:57 < mkh> ok thanks devaholic for your attention, I'll swap environments and tools and see if I can repro
22:57 < mkh> <3
23:08 < qbit_> oh god.. does npm not work with self signed certs?  npm ERR! Error: SSL Error: SELF_SIGNED_CERT_IN_CHAIN 
23:08  * qbit_ is attempting to setup on iriscouch
23:08 < qbit_> maybe i should be using v0.1.0 ( of npm ) ? 
23:26 < dilvie> anybody know how I can verify that my https cert is set up correctly on os x?
23:26 < dilvie> I'm trying to install a .pem file so I can test https locally
23:28 < CIA-93> node: isaacs master * rb8d8615 / test/simple/test-eio-limit.js : test-eio-limit: Remove confusing broken incorrect test - http://git.io/u9wJnA
23:32 < pawn> Recent benchmarks comparing redis and memcache for session stores in Node?
23:35 < pawn> Which is lighter weight and faster?
23:36 < Vbitz> why is node using utf8 encoding while i asked for ucs2 encoding
23:38 < _Tristan> Hello. I have an npm package which stores some persistent data, which is wiped every time I update it. Is there any way to make this data stay persistent without storing it in a different place?
23:51 < TimeTurner> can d8 be exposed with node's repl?
23:51 < TimeTurner> that would be a nice bonus when installing node
23:51 < TimeTurner> alongside*
23:52 < TimeTurner> so that one can check v8's optimizations etc.
23:54 < lohkey> TimeTurner: node --v8-options
23:54 < lohkey> run it
23:55 < lohkey> TimeTurner: all those v8 options (d8 options) are accessible via the node command
23:56 < lohkey> or at least i know for a fact they are in v0.8.0
23:56 < TimeTurner> lohkey: very cool, thanks!
23:56 < TimeTurner> it works :D
23:56 < lohkey> np
23:59 < dmilith> d8? what for?
--- Log closed Tue Jul 17 00:00:29 2012
