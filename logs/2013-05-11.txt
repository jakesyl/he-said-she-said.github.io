--- Log opened Sat May 11 00:00:04 2013
--- Day changed Sat May 11 2013
00:00 < AAA_awright> sinclair|node: You should be using TLS but strictly speaking that's out of my realm
00:00 < sinclair|node> AAA_awright: irrelephant
00:00 < niggler> you get enough to spin up a few small instances cococo for 3 years
00:00 < BobAlmighty> niggler, you're right there does appear to be a #socket.io
00:01 < sinclair|node> AAA_awright: its apparent you don't know the ins and outs
00:01 < sinclair|node> i can recommend some good reading
00:01 < AAA_awright> sinclair|node: What are you talking about
00:02 < sinclair|node> AAA_awright: what part of transmitting a users credentials over the internet sounds secure to you?
00:02 < AAA_awright> If you have a specific consern for my security practices, say it specifically
00:03 < niggler> i think the concern is that you shouldn't be passing around plaintext passwords
00:03 < niggler> especially when its hunter2
00:03 < BobAlmighty> Asking questions on a friday evening US, is a painful thing. Like the only people around are the Aussies. Not to slight them in the least, but they are few.
00:03 < AAA_awright> sinclair|node: This is a library, what protocol users will be using to transmit this information is several layers of abstraction above me. Needless to say, the correct implementation will involve TLS (or any equivelant scheme which I am unaware of)
00:04 < sinclair|node> AAA_awright: so not store the users password, do not transmit the users password, and protocol is irrelevant 
00:04 < sinclair|node> AAA_awright: if a user logs in in a internet cafe, the cookie lives on that machine
00:04 < niggler> BobAlmighty what's your question?
00:04 < AAA_awright> What is it with people, I admit they're right and they still want to argue with me
00:04 < niggler> also high-five for spending friday night slaving away
00:04 < AAA_awright> sinclair|node: Thanks for your consern but I said I don't store user passwords
00:04 < sinclair|node> AAA_awright: cookies are storage, 
00:05 < BobAlmighty> Well the one about sockets being in multiple rooms. I get that this is likely out of topic for here now that I know that socket.io channel exists
00:05 < sinclair|node> AAA_awright: and they get transmitted on each request
00:05 < sinclair|node> AAA_awright: the only thing you should store is the bearer
00:05 < AAA_awright> sinclair|node: That's why you use bearer/session tokens
00:05 < sinclair|node> right
00:05 < AAA_awright> Is it really that hard of a concept for you to understand?
00:06 < sinclair|node> AAA_awright: that's the thing, i understand perfectly
00:06 < sinclair|node> 100%
00:06 < AAA_awright> So stop arguing it after I've said I don't do that three times >_<
00:06 < sinclair|node> AAA_awright: but you told me your keep the users credentials in their cookie
00:07 < sinclair|node> a bearer token is not a credential
00:07 < AAA_awright> sinclair|node: Credentials include session tokens, they authenticate users
00:07 < AAA_awright> They can be used maliciously
00:07 < AAA_awright> And must be treated as confidential
00:07 < sinclair|node> the bearer token is used in authorization 
00:07 < sinclair|node> not authentication
00:07 < AAA_awright> This includes not storing the plaintext of bearer tokens in a database, use HMAC if the security of the token is >128 bits
00:08 < sinclair|node> AAA_awright: encryption is irrelevant 
00:08 < AAA_awright> A session/bearer token positively identifies a user, whether or not it carries any permissions
00:08 < sinclair|node> correct
00:09 < AAA_awright> I'd call that confidential at the very least, if not authentication
00:09 < sinclair|node> and user identification is handled in your authorization phase, not authentication
00:09 < AAA_awright> Session tokens need to be authenticated too, though
00:09 < AAA_awright> There's a distinct "Did the server issue this?" phase
00:10 < AAA_awright> Authorization can come in many forms, password (which I further break down into POST form and Authorization headers), "reset your password" email, session tokens
00:11 < AAA_awright> er, authentication
00:11 < AAA_awright> Receiving an email and, by extension, changing the email address, is a form of authentication
00:11 < sinclair|node> AAA_awright: but your application should not be passing a password around, the password is sent to the third party OAuth provider, which returns to you a token
00:11 < sinclair|node> just to be clear
00:12 < AAA_awright> sinclair|node: Very clear, I said I don't handle passwords, alright
00:12 < sinclair|node> ok
00:12 < AAA_awright> I don't handle session tokens for the same reason
00:13 < sinclair|node> AAA_awright: so, there should be no problems
00:13 < AAA_awright> Except this darned internal API design
00:13 < sinclair|node> AAA_awright: you have a authentication step, a authorization step, where is the problem?
00:13 < sinclair|node> who wrote the API?
00:14 < sinclair|node> AAA_awright: its not one of those gawd alful npm packages is it?
00:14 < AAA_awright> No
00:14 < sinclair|node> good
00:14 < sinclair|node> those things are dirty hacks at best
00:15 < AAA_awright> I think I have different reasons not to upload an npm package though
00:16 < sinclair|node> AAA_awright: if your code is written well, and is secure, it shouldn't matter who sees the source
00:17 < AAA_awright> In theory, but as a matter of principle security isn't tolerant of bugs and errors and so cryptographers don't work alone
00:18 < sinclair|node> i wouldnt get hung up on encryption
00:18 < AAA_awright> Cryptography is about much more than encryption, right
00:18 < sinclair|node> even if nothing was encrypted, you can still make something secure
00:18 < AAA_awright> Uhhh
00:19 < AAA_awright> There's some good research about life in a post-P=NP society
00:19 < AAA_awright> It doesn't look very pretty
00:19 < sinclair|node> P=NP is still a problem
00:20 < sinclair|node> and has little to do with authentication/authorization
00:20 < niggler> thats not true sinclair|node 
00:20 < sinclair|node> encryption is just something you sprinkle on to make the plebs feel safe
00:20 < niggler> discrete-log, for example, is P if P = NP
00:21 < AAA_awright> sinclair|node: Modern encryption may be far from the weakest link but that's a testiment to the fact that we need it, how you draw the opposite conclusion that we don't need it is beyond me
00:21 < sinclair|node> niggler: http://en.wikipedia.org/wiki/P_versus_NP_problem
00:21 < niggler> yeah i know sinclair|node 
00:21 < sinclair|node> AAA_awright: yup, its beyond you
00:21  * sinclair|node might have a game of starcraft
00:22 < niggler> I'm glad you can use wikipedia sinclair|node 
00:22 < AAA_awright> ^
00:22 <@isaacbw> sounds like people need a break from irc
00:22 < AAA_awright> sinclair|node: P=NP means you *can't* have public-key cryptography
00:23 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:24 <@isaacbw> it is still an unsolved problem, but most researchers have given up and just assume P != NP
00:25 <@isaacbw> which is probably a pretty safe assumption as far as assumptions go
00:25 < AAA_awright> isaacbw: And hopefully it says that way
00:25 < AAA_awright> There's some pretty absurd things that would have to be true if P=NP
00:26 <@isaacbw> hah, I wonder if there would be any effort to suppress a paper that shows P=NP
00:27 <@isaacbw> people do try to publish papers like that every once in a while but they don't last very long
00:28 < niggler> most are silly isaacbw 
00:28 < niggler> usually there's some obvious issue
00:30 < niggler> i think it was shown (i want to say it was yannakakis or papadimitriou) that most "simple" approaches cannot resolve the problem
00:31 < niggler> isaacbw its been 5 years :/
00:32 < niggler> I'm getting old :/
00:32 <@isaacbw> heh
00:33 < m_tbNnTpV> Hello. Does anyone here have a compiled version of node-ffi for windows, please? I've just spent two hours trying to compile it, but without any success.
00:34 < niggler> m_tbNnTpV what error message do you get?
00:34 < m_tbNnTpV> error MSB6006: "CL.exe" exited with code -1073741515
00:35 < m_tbNnTpV> something is somewhere missing, but i have no idea what and where
00:36 < niggler> what VS version?
00:36 <@isaacbw> code -1073741515
00:36 <@isaacbw> beautiful
00:36 < m_tbNnTpV> 2012, which may be part of the problem
00:36 < niggler> 2012 sucks
00:36 < niggler> lol
00:41 <@isaacbw> are there any good javascript-based lexer projects?
00:41 < niggler> I've had pretty good experience with jison
00:42 < niggler> although you may want a PEG or something antlr-based
00:42 <@isaacbw> I don't need a whole parser generator, just a lexer (generator)
00:44 < niggler> there may be a way to just lex with jison, although I haven't used it in that capacity
00:44 <@isaacbw> well, I'll take a look. thanks
00:46 <@MI6> joyent/node: isaacs master * fc58a5d : npm: Upgrade to 1.2.20 - http://git.io/lm6rsw
00:48 < AAA_awright> niggler: I've had hprroble experiences working with the developer of PEG, find something else
00:49 < AAA_awright> Or write your own, I ended up doing that
00:49 < AAA_awright> It's faster and not very hard
00:49 < niggler> i feel old-fashioned when recommending lex/yacc/jison
00:50 < niggler> there are some problems, but it gets you 90% of the way there for 10% of the effort
00:50 < dypsilon> http://nodejs.org/api/process.html#process_process_abort
00:50 < dypsilon> This causes node to emit an abort. This will cause node to exit and generate a core file.
00:50 < dypsilon> what is a core file?
00:51 < niggler> normally dypsilon you can run gdb with a core file and it will show you the state of the executable when the abort happened
00:51 < dypsilon> niggler, where will this file be stored?
00:52 < niggler> I'm not sure if they use the os mechanism but it should be called core or core.<pid> depending on your settings
00:52 < dypsilon> niggler, thank you for helping
00:52 < niggler>  /proc/sys/kernel/core_uses_pid for more info
00:53 < dypsilon> niggler, ah nice, thanks
00:53 < niggler> AAA_awright define horrible experiences
01:02 < leostera> Hey guys
01:02 < leostera> How are you
01:03 < leostera> I've been reading a few blogs and every now and then someone asks if some node module is "thread safe".
01:03 < leostera> As far as I know, there's no such thing as thread safety in node, since it doesn't use threads to provide parallelism
01:04 < leostera> But I haven't delved too much into the theory under the hood
01:04 < leostera> Could someone point me where to read to get a better understanding?
01:04 < niggler> leostera are you talking about a C++ module or a pure-js one?
01:05 < leostera> niggler: pure js one
01:05 < leostera> niggler: but on a C++ one I assume that thread safety can be an issue
01:06 < niggler> JS doesn't really have a threading model
01:06 < niggler> there's stuff like web workers 
01:06 <@isaacbw> anyone who talks about thread safety with regards to node is probably talking out of their ass
01:06 < arnorhs> also threads-a-gogo or whatever it's called..
01:06 < niggler> isaacbw or erlang people getting ready for a troll
01:07 < arnorhs> i didn't know there was a thing called thread safety
01:07 < arnorhs> how is it defined
01:07 < niggler> arnorhs that's a node-specific thing
01:08 < niggler> arnorhs you could have two threads acting on the same data structure
01:08 < leostera> isaacbw: thanks, that's what I needed to know
01:08 < niggler> and get different results based on timing (aka race conditions)
01:08 < niggler> so if you have a simple counter, and two threads try to increment the counter by reading the current value, adding one locally, and setting the value of the counter
01:09 < niggler> depending on timing, both threads could end up reading before the other writes
01:09 < niggler> in which case the counter would have been incremented once, not twice
01:10 < arnorhs> niggler: not sure what you're trying to say or why your are
01:10 < arnorhs> *you
01:10 < niggler> arnorhs you were asking about thread safety
01:10 < arnorhs> lol
01:10 < niggler> " <arnorhs>	 i didn't know there was a thing called thread safety"
01:10 < arnorhs> irony never translates
01:10 < arnorhs> to irc
01:10 < niggler> tis the internet, and surprisingly enough there are people who don't know basic things
01:11 < leostera> niggler: so what exactly is the model behind nodejs that provides parallelism? 
01:11 < arnorhs> niggler: true
01:11 < arnorhs> sorry about my bad humor
01:11 <@isaacbw> lol
01:11 < niggler> we had a discussion of P versus NP earlier
01:11 < s_e> leostera: asynchronysity, events, callbacks
01:11 < arnorhs> niggler: sad to have missed that
01:11 < arnorhs> did you guys solve it?
01:11 < niggler> asynchronicity
01:12 < arnorhs> that would be nice
01:12 < s_e> dammit
01:12 <@isaacbw> the answer is promises
01:12 < leostera> s_e: but then there's no parallelism, just deferring 
01:12 < arnorhs> isaacbw: lol
01:12 < niggler> arnorhs the quote was "[P=NP] has little to do with authentication/authorization"
01:12 < leostera> s_e: because even if you have a bunch of subscribers and publish an event they will get triggered in a certain order
01:13 < s_e> good lord
01:13 < s_e> freenode is not well
01:13 < leostera> s_e: sure, that triggering might not be blocking, but is definitely not entirely parallel
01:14 < arnorhs> niggler: got it, well, i guess P=NP has to do with everything
01:14 < RobW_> Is there a way to use node libraries in underscore templates? e.g., <% path.join('this', 'that')%>?
01:15 < RobW_> Or rather does anyone know if there's a way.
01:15 < niggler> well arnorhs the hardness assumptions oftentimes reduce to the difficulty of NP complete problems
01:15 < niggler> like discrete-log (which is not known to be NP complete but is NP)
01:15 < arnorhs> RobW_: yeah, you can use browserify to use any node module with node's require module stuff.. or you can port a file over if it doesn't have any dependencies
01:16 < niggler> RobW_ why are you using path.join in a template
01:16 < arnorhs> niggler: yeah, i'm no expert on the topic
01:16 < arnorhs> by a long shot
01:17 < RobW_> niggler: I have a couple paths that could have trailing slashes on them, e.g., foo.scriptDir
01:17 < RobW_> Suppose I should just run replace on them. It's been a long day.
01:18 < RobW_> Using path.join in the node part of the script.
01:20 < arnorhs> if path is an array, join is already a method on Array
01:20 < arnorhs> RobW_: 
01:21 < arnorhs> you can just do ["my/fugly/path", "other/half"].join("/")
01:21 < arnorhs> or what am i misunderstanding?
01:22 < RobW_> arnorhs: path.join fixes trailing  slashes for you. so path.join('foo/','bar/') and  path.join('foo','bar') give the same result
01:22 < arnorhs> ah ok
01:22 < RobW_> Anyways, thanks for letting me talk it out. Peace!
01:22 < arnorhs> RobW_: you could remove those using a regex
01:23 < niggler> using browserify for this task is like using jquery for simple dom work
01:23 <@isaacbw> down with jquery
01:24 < niggler> there was some stack overflow fake screenshot with jquery, i forget the url
01:25 < arnorhs> he's gone.. and i wrote him a function
01:26 < arnorhs> ;-(
01:26 < niggler> you can use ircretary to remind him when he comes back
01:33 -!- mode/#Node.js [+o MI6] by ChanServ
01:50 < astropirate> Hello friends
01:50 < astropirate> Anyone used RethinkDB on a project yet?
01:52 < niggler> whats rethinkdb?
01:55 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:10 -!- Topic for #Node.js: it's kinda like http://img.pointlimit.com/ubz4mje5l7z4e.png - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
02:10 -!- Topic set by Nexxy [~emily@unaffiliated/nexxy] [Thu May  9 11:31:32 2013]
02:10 [Users #Node.js]
02:10 [@isaacbw         ] [ Country         ] [ gsf_            ] [ kzrl           ] [ paulwe         ] [ Spencer         ] 
02:10 [@konobi          ] [ CoverSli1e      ] [ gshipley        ] [ l1lj3nz1n      ] [ PayPaul        ] [ spokenn         ] 
02:10 [@Nexxy           ] [ crashev         ] [ Guest14712      ] [ L_star         ] [ pcarrier__     ] [ sproates        ] 
02:10 [@piscisaureus_   ] [ creationix      ] [ Guest29965      ] [ lamalex        ] [ percival       ] [ Spudly_         ] 
02:10 [@tjfontaine      ] [ crescendo       ] [ Guest34415      ] [ lando          ] [ peterbra1en1   ] [ SpX             ] 
02:10 [@trevnorris      ] [ crewmoss        ] [ Guest35831      ] [ LanyonM        ] [ peterfile      ] [ ssafejava       ] 
02:10 [ 18WADGU5W       ] [ crodas          ] [ Guest52025      ] [ lejonet        ] [ petschm        ] [ stalled         ] 
02:10 [ 20WACD30G       ] [ cronopio[phone] ] [ Guest6243       ] [ LeMike         ] [ ph8            ] [ standoo1        ] 
02:10 [ 20WACD31B       ] [ cTIDE_          ] [ Guest9820       ] [ leonardo       ] [ PhilK          ] [ stbuehler       ] 
02:10 [ [[zz]]          ] [ culturelabs     ] [ guilleiguaran__ ] [ leostera       ] [ philo23        ] [ stef            ] 
02:10 [ \mSg            ] [ cxreg2          ] [ guybrush        ] [ leptonix_      ] [ phI||Ip        ] [ stephank        ] 
02:10 [ __main__        ] [ d-best          ] [ gwoo            ] [ lihnuz_        ] [ pig_           ] [ stephCoue       ] 
02:10 [ __sri           ] [ D4RK-PH0ENiX    ] [ hackygolucky    ] [ liwen_         ] [ pinja          ] [ StephenS_       ] 
02:10 [ _asdfz0mg       ] [ dak__           ] [ Hadaka          ] [ ljharb         ] [ playjax        ] [ stevegill       ] 
02:10 [ _cheney-        ] [ Damn3d          ] [ hakunin         ] [ lmjabreu       ] [ poeticninja    ] [ Stew-a          ] 
02:10 [ _janne          ] [ danheberden     ] [ halfhalo        ] [ LocalPCGuy     ] [ polyrhythmic   ] [ stride          ] 
02:10 [ _marvin1        ] [ danmactough     ] [ happyfac1       ] [ Lorentz        ] [ poorman        ] [ Stuk            ] 
02:10 [ _marvin__       ] [ darjeeling      ] [ Haputanlas      ] [ lostc          ] [ PPilate        ] [ stutter         ] 
02:10 [ _pid            ] [ DarkArgoz       ] [ harth           ] [ lrvick         ] [ prawnsalad     ] [ stylus          ] 
02:10 [ _Steve_         ] [ darkc0met       ] [ hartley         ] [ LuckyBurger|nap] [ prismatictrail ] [ subsilico       ] 
02:10 [ AAA_awright     ] [ daurnimator     ] [ Havvy           ] [ luigy          ] [ Proditor_      ] [ substack        ] 
02:10 [ aandy_          ] [ dawolf          ] [ hdon            ] [ Lunar_Lamp     ] [ prophile       ] [ sugyan          ] 
02:10 [ aboudreault     ] [ dazoe           ] [ heath           ] [ luruke         ] [ prosquare      ] [ superjoe        ] 
02:10 [ abstractj       ] [ dbarrett        ] [ HeN_            ] [ lushious       ] [ przemoc        ] [ supersym        ] 
02:10 [ AdamMagaluk     ] [ de_henne_       ] [ herbnerder      ] [ m0             ] [ psino          ] [ sveisvei        ] 
02:10 [ admc2           ] [ deadalus        ] [ herki2          ] [ M2Ys4U         ] [ purr           ] [ Sven_vB         ] 
02:10 [ admc_           ] [ dec             ] [ heroux_         ] [ macgregor      ] [ PY1NB1         ] [ SvenDowideit    ] 
02:10 [ AdrienBrault    ] [ deetb           ] [ herzi           ] [ Mack           ] [ pyykkis_       ] [ svnlto          ] 
02:10 [ aeberlin        ] [ defunctzombie_zz] [ hhuuggoo_       ] [ macluq         ] [ qbit           ] [ swaj            ] 
02:10 [ Aidanie         ] [ deimos          ] [ hij1nx          ] [ madscientist   ] [ quillo_        ] [ Swizec_         ] 
02:10 [ Aikar           ] [ dekz__          ] [ hipertracker    ] [ majek          ] [ qwerty|        ] [ syntax          ] 
02:10 [ ajpiano         ] [ Derander        ] [ hipsterslapfight] [ Makine         ] [ r04r|away      ] [ syskk           ] 
02:10 [ akshayms        ] [ derchiller      ] [ Hosh            ] [ malladi        ] [ r0tha          ] [ T-Co_           ] 
02:10 [ al3xnull        ] [ DesiJat         ] [ howdynihao      ] [ manacit        ] [ radiodario     ] [ tahu            ] 
02:10 [ alekibango      ] [ devdoo          ] [ hueniverse1     ] [ mandric_       ] [ raj            ] [ tanepiper       ] 
02:10 [ alexwhitman     ] [ devoidfury      ] [ Huevos          ] [ ManneW         ] [ raja           ] [ tarruda         ] 
02:10 [ AllStruck       ] [ dguttman        ] [ hugo_moss       ] [ mape           ] [ ralphholzmann  ] [ tassmjau        ] 
02:10 [ aMoniker_       ] [ dhpe            ] [ hydrawat        ] [ mappum         ] [ ralphtheninja  ] [ taternuts       ] 
02:10 [ andredub_       ] [ digiwano        ] [ iain__          ] [ marienz        ] [ Ralt           ] [ tauren          ] 
02:10 [ andrehjr        ] [ diminoten       ] [ iaincarsberg_   ] [ marlun_        ] [ randallagordon ] [ teadict         ] 
02:10 [ andrerod        ] [ DjMadness       ] [ iam5o1|work     ] [ marsulle       ] [ rangle         ] [ tec27           ] 
02:10 [ andrew12        ] [ djoot_          ] [ ianjm           ] [ Marsup         ] [ Rantanen       ] [ techkid6        ] 
02:10 [ AntelopeSalad_  ] [ dleonardi       ] [ iapain          ] [ maru_cc____    ] [ Rapiere        ] [ TechnoCa1       ] 
02:10 [ arduix_         ] [ dlmanning       ] [ icarot          ] [ masch          ] [ rawtaz         ] [ TehShrike       ] 
02:10 [ arielserafini   ] [ dmogle          ] [ ickyb0d-        ] [ mashlol        ] [ rax0-          ] [ tellnes         ] 
02:10 [ arlolra         ] [ dmwuw__         ] [ icodefo__       ] [ master5o1      ] [ Raynos         ] [ terietor        ] 
02:10 [ armin           ] [ dmz             ] [ idefine         ] [ matjas         ] [ rcs            ] [ tg              ] 
02:10 [ arnorhs         ] [ Domenic_        ] [ igl1            ] [ mattdawson     ] [ reactormonk    ] [ tgies           ] 
02:10 [ asellus         ] [ don_jones       ] [ iksik           ] [ maveonair      ] [ redir          ] [ The_Kingdutch   ] 
02:10 [ asherkin        ] [ DoNcK           ] [ il_padrino      ] [ max_weller     ] [ ree            ] [ TheAceOfHearts  ] 
02:10 [ ashnur          ] [ donghee_        ] [ ImBcmDth        ] [ mbalho         ] [ reid           ] [ thealphanerd    ] 
02:10 [ astropirate     ] [ donovanh_       ] [ inarru          ] [ mbor           ] [ remysharp      ] [ thedaywi1lcome  ] 
02:10 [ aszeszo`        ] [ dook            ] [ IncipLTN        ] [ Mchl           ] [ retornam       ] [ thejefflarson_  ] 
02:10 [ atatsu_         ] [ doolinkr        ] [ InconceivableB  ] [ mdedetrich     ] [ retrostyle|me  ] [ TheJH           ] 
02:10 [ Atlantic777     ] [ doug            ] [ InezK_away      ] [ mdevolving     ] [ rgmarcha       ] [ TheLink         ] 
02:10 [ atojs           ] [ dpemmons        ] [ infynyxx        ] [ meckanism      ] [ rhalff         ] [ thelleo         ] 
02:10 [ augustl         ] [ Draggor         ] [ inimino         ] [ medice         ] [ RichardBronosky] [ TheMoonMaster   ] 
02:10 [ AvianFlu        ] [ dresende        ] [ innociv         ] [ mekwall        ] [ rickibalboa    ] [ thread          ] 
02:10 [ avital          ] [ drewp           ] [ Inoperable      ] [ melter_        ] [ riku           ] [ threesome       ] 
02:10 [ azend           ] [ drey            ] [ Internet13      ] [ mephux         ] [ ripples        ] [ tim_smart       ] 
02:10 [ azhwkd|away     ] [ drodger         ] [ intripoon_      ] [ MerlinDMC      ] [ Ritzton        ] [ timoxley        ] 
02:10 [ b1eedr          ] [ DrPizza         ] [ irclogger_com   ] [ mertimor       ] [ rmill          ] [ TimTim`         ] 
02:10 [ bagro           ] [ DrShoggoth      ] [ ironfroggy      ] [ meso           ] [ robinson1k     ] [ tklun           ] 
02:10 [ bajtos          ] [ drudge          ] [ isaacs          ] [ metadaddy      ] [ roger_rabbit   ] [ tmpvar          ] 
02:10 [ balgarath       ] [ dscape_         ] [ itsrache1fish   ] [ metellus       ] [ roger_raymond  ] [ tokuhirom       ] 
02:10 [ balupton        ] [ dtriley41       ] [ ivan\           ] [ mferranti      ] [ Rolken         ] [ tomaw           ] 
02:10 [ baranaby        ] [ duncanbeevers   ] [ ivan`           ] [ mfn            ] [ rolleiflex     ] [ TommehM         ] 
02:10 [ barneybook      ] [ durnik          ] [ j0ni            ] [ mfrauenh1ltz   ] [ rom1504_       ] [ TomRone_        ] 
02:10 [ bartt           ] [ dvojrozec       ] [ Jac0bz1         ] [ mickhansen     ] [ romainhuet     ] [ tomshredz       ] 
02:10 [ bastinat0r_     ] [ dwcook          ] [ jalcine         ] [ mikegerwitz    ] [ rounce         ] [ toothrot        ] 
02:10 [ baudehlo        ] [ dwiereng2       ] [ jamesbathgate   ] [ mikey_p_       ] [ roxlu_         ] [ topaxi          ] 
02:10 [ bbttxu          ] [ dypsilon_       ] [ japaniel        ] [ miql           ] [ rphillips      ] [ topek_          ] 
02:10 [ bear            ] [ echo|           ] [ jaredrhine      ] [ MiracleBlue    ] [ rsmartinva     ] [ topi`_          ] 
02:10 [ beatpanic       ] [ edr             ] [ jareiko         ] [ mirkok         ] [ rtgibbons      ] [ torgeir         ] 
02:10 [ beawesomeinstead] [ edude03         ] [ jasonrm         ] [ mirzu          ] [ Rubennn        ] [ Torsten         ] 
02:10 [ beeant          ] [ eighty4         ] [ Jaylee__        ] [ MitchW_        ] [ rudolfrck      ] [ tpatja          ] 
02:10 [ beeant-m_       ] [ eins78          ] [ jayne|          ] [ MitchyNuts     ] [ ruff           ] [ trepan_         ] 
02:10 [ beg             ] [ ejnahc          ] [ jayrobot        ] [ mlocher        ] [ runningskull   ] [ trepatudo       ] 
02:10 [ benatkin        ] [ El_Angelo       ] [ jb_             ] [ mmalecki       ] [ RushPL         ] [ trodrigues      ] 
02:10 [ bengl_          ] [ elijah-mbp      ] [ jdelgado        ] [ mnaser_        ] [ russfrank      ] [ trusktr         ] 
02:10 [ bentruyman_     ] [ elliotf         ] [ jden            ] [ monokrome      ] [ rvagg          ] [ tuhoojabotti    ] 
02:10 [ Benvie          ] [ elliottcable    ] [ jeffean1        ] [ MoRn           ] [ rwaldron       ] [ Tux             ] 
02:10 [ Benvie_         ] [ elliottcable_   ] [ jefferai        ] [ Motu1          ] [ rwilcox        ] [ txdv            ] 
02:10 [ Bergle_2        ] [ emilsedgh_      ] [ jesseproulx     ] [ mp_            ] [ rworth         ] [ Typo            ] 
02:10 [ beuk            ] [ emptynine       ] [ jesusabd1llah   ] [ mpajor_o15     ] [ RX80           ] [ Vbits           ] 
02:10 [ Bilge-          ] [ enaqx           ] [ jetienne        ] [ MrDHat|afk     ] [ ry4nn_         ] [ VesQ            ] 
02:10 [ billy           ] [ epa_            ] [ jez0990         ] [ mrkurt         ] [ ryanrolds      ] [ vwoo            ] 
02:10 [ bingomanatee    ] [ Epeli           ] [ jimbot          ] [ mrmoneyc       ] [ rybnik         ] [ Wa              ] 
02:10 [ bitfed_         ] [ epiloque        ] [ jimmyff         ] [ MrNibbles      ] [ s00pcan_       ] [ wagtag          ] 
02:10 [ Blorb           ] [ er1c_           ] [ jimt_           ] [ mscdex         ] [ s2g            ] [ wang            ] 
02:10 [ blup            ] [ Erakso          ] [ JJMalina        ] [ munro          ] [ s4muel         ] [ wao_            ] 
02:10 [ bmatusiak_      ] [ ereslibre       ] [ jjore           ] [ myndzi         ] [ s5fs           ] [ weal            ] 
02:10 [ Bob_Gneu        ] [ Erriond__       ] [ jkarsrud        ] [ n0cturnal      ] [ s_e            ] [ wedgeV_         ] 
02:10 [ bodisjw         ] [ estebist_       ] [ jlord           ] [ n8n            ] [ salsamontes    ] [ wereHamster     ] 
02:10 [ BombStrike      ] [ EToS            ] [ jmanoto         ] [ nail___        ] [ sam_w          ] [ wesbos          ] 
02:10 [ Bonuspunkt      ] [ euforic         ] [ jmaugue_        ] [ nanashiRei     ] [ sambarino      ] [ wesside         ] 
02:10 [ booo            ] [ eventualbuddha  ] [ jmoney          ] [ napalmbrain    ] [ sander_        ] [ whyhankee       ] 
02:10 [ booyaa|foo      ] [ EvilJStoker     ] [ jn              ] [ naquad         ] [ SargoDarya     ] [ Will|           ] 
02:10 [ braincrash      ] [ EvilPacket      ] [ joaojero1imo    ] [ nathan7        ] [ satyr_         ] [ wilmoo___       ] 
02:10 [ brainproxy      ] [ exos            ] [ joe_k           ] [ nathanbz       ] [ sayd           ] [ wilmoore-js     ] 
02:10 [ breck7_         ] [ Ezku            ] [ Joefish]off     ] [ nb-ben2        ] [ sbeam_         ] [ winni           ] 
02:10 [ brettlan`       ] [ fastman         ] [ joeytwid1le_    ] [ ndngvr         ] [ SBoudrias      ] [ wizonesolutions ] 
02:10 [ brianloveswords ] [ faulkner        ] [ jolo2           ] [ netj_          ] [ schredder      ] [ wolfeidau       ] 
02:10 [ BrightGreenLine ] [ fayimora        ] [ Jonathan1cClare ] [ nettie         ] [ scoutz         ] [ wolfspraul      ] 
02:10 [ brimster        ] [ felixge         ] [ Jonathan2cClare ] [ neverendingo   ] [ sdboyer        ] [ wookiehangover  ] 
02:10 [ brycebaril      ] [ filleokus_      ] [ Jonghwan_       ] [ nfour_         ] [ Secutor        ] [ WorkingClassDev ] 
02:10 [ Bunge_3         ] [ flagg0205       ] [ joshie          ] [ nicholasf      ] [ segomos        ] [ wyan            ] 
02:10 [ buritica        ] [ Fli-c           ] [ joshontheweb    ] [ niclone        ] [ Segrel         ] [ wycats__        ] 
02:10 [ bwall           ] [ flyth           ] [ joshthecoder_   ] [ niftylettuce   ] [ seich-         ] [ x13378071       ] 
02:10 [ Bwild           ] [ FMJaggy         ] [ jpiche          ] [ niggler        ] [ Sembiance      ] [ xAt_            ] 
02:10 [ bwoodward       ] [ Fofr__          ] [ JPT             ] [ nightfly__     ] [ sente          ] [ xerora_         ] 
02:10 [ bytemask        ] [ FooBarWidget    ] [ jrdn            ] [ Nijiko         ] [ seric          ] [ xk_id           ] 
02:10 [ Cainus          ] [ FoooortuneDays  ] [ jsidewalk       ] [ nikkimccavee   ] [ Seventoes      ] [ xonev           ] 
02:10 [ calvinfo        ] [ foxx            ] [ jso             ] [ nikola         ] [ sevvie_        ] [ xorspark        ] 
02:10 [ cburyta         ] [ fpuc            ] [ jtwalters_      ] [ NimeshNeema    ] [ sg             ] [ xSmurf          ] 
02:10 [ cce             ] [ frdmn           ] [ julianduque     ] [ ninegrid       ] [ Shadda         ] [ xxblakefailxx_  ] 
02:10 [ ccohn_          ] [ FredC           ] [ juliangruber_   ] [ nkohari        ] [ Shadowized     ] [ yacks           ] 
02:10 [ celogeek        ] [ Freedonkeys     ] [ jvolkman        ] [ nlf            ] [ shanlar        ] [ yankhate1       ] 
02:10 [ chapel          ] [ freeside        ] [ ka2n            ] [ NoFaTe         ] [ shesek         ] [ yano            ] 
02:10 [ chayin          ] [ freethen`       ] [ kai             ] [ npmbro         ] [ shiftins_      ] [ yawnt           ] 
02:10 [ Cheery          ] [ freewil         ] [ Kai`            ] [ nsm            ] [ shihan_        ] [ yhpark_talk     ] 
02:10 [ cheese1756      ] [ Frippe          ] [ kaichanvong     ] [ nuba           ] [ shlevy         ] [ yorn            ] 
02:10 [ chiller         ] [ Furai           ] [ Kaimei          ] [ Nuck           ] [ shoerain       ] [ Yuffster_fun    ] 
02:10 [ chilts          ] [ fwg             ] [ Kaltiz          ] [ nullo          ] [ Shrink         ] [ yuwang          ] 
02:10 [ chjj            ] [ g0z             ] [ karupanerura    ] [ nutcase        ] [ sideshowcoder  ] [ zadark|2        ] 
02:10 [ chmac           ] [ gabriel         ] [ kborchers       ] [ nzjames        ] [ silvers        ] [ zaheera         ] 
02:10 [ chridal         ] [ Gabriel413      ] [ kc8qvp_         ] [ o^_^o          ] [ simius_        ] [ Zak             ] 
02:10 [ chrisbuc-       ] [ gaf             ] [ keeto           ] [ odyniec        ] [ simon^         ] [ zaleb           ] 
02:10 [ chrisdickinson  ] [ garren          ] [ kenperkins      ] [ ohcibi         ] [ simon^^        ] [ zanea           ] 
02:10 [ chrismatheson   ] [ Garrick         ] [ Kent_           ] [ olegp_         ] [ sinclair|away  ] [ zapu_           ] 
02:10 [ chunhao         ] [ gdbz            ] [ Kester          ] [ omni5cience_   ] [ sindresorhus   ] [ Zauberfisch^idle] 
02:10 [ ckknight        ] [ gde33|2         ] [ kevinfagan      ] [ onr            ] [ sir_tyrion     ] [ Zaxnyd          ] 
02:10 [ clarkk          ] [ geb             ] [ KevinT          ] [ oon__          ] [ sirecote       ] [ zdwolfe_        ] 
02:10 [ ClaudioAlbertin ] [ generali_       ] [ kevireillyy     ] [ ootje_         ] [ SirFunk_       ] [ zedas           ] 
02:10 [ clone1018       ] [ generic         ] [ keyosk          ] [ optixx         ] [ skebcio_       ] [ zeekay          ] 
02:10 [ codelahoma      ] [ gf3             ] [ kinabalu_       ] [ orospakr       ] [ sKeiths        ] [ zemm            ] 
02:10 [ codepal         ] [ ggordan         ] [ KiNgMaR         ] [ othiym23       ] [ skoba          ] [ zenazn          ] 
02:10 [ codingkevin     ] [ ghoti           ] [ kit             ] [ Outsider_      ] [ Slashbunny     ] [ zenodub         ] 
02:10 [ codycraven      ] [ gildean         ] [ Kjerski         ] [ over_          ] [ slicky         ] [ zeromodu_       ] 
02:10 [ Codynyx         ] [ gkatsev         ] [ klobucar        ] [ owen1          ] [ slipstream     ] [ zeroz           ] 
02:10 [ colinsullivan1  ] [ GlitchMr        ] [ kornnflake_     ] [ owenb          ] [ slurp1         ] [ zivester        ] 
02:10 [ colinwren       ] [ gnarf           ] [ kppullin        ] [ oxy_           ] [ smlgbl         ] [ zodiak          ] 
02:10 [ Connorhd        ] [ gorillat1on     ] [ kraft           ] [ oz             ] [ sneakyness     ] [ zomg_           ] 
02:10 [ conradev        ] [ gorillatron     ] [ krill           ] [ Pagan          ] [ snuggl         ] [ zz_angrysock    ] 
02:10 [ context         ] [ Gottox          ] [ krishna         ] [ pandark_       ] [ Soarez         ] [ |Gobo|_         ] 
02:10 [ CookieNomster   ] [ greg5green      ] [ Kudos           ] [ parasight      ] [ sordina3       ] 
02:10 [ coolnalu        ] [ Gregor          ] [ kuja            ] [ passcod        ] [ sorensen       ] 
02:10 [ copongcopong    ] [ Grephix         ] [ kuryaki         ] [ patrickod      ] [ Spence         ] 
02:10 [ Corey           ] [ Gruni           ] [ kuuranne_       ] [ PaulCape_      ] [ spence__       ] 
02:10 -!- Irssi: #Node.js: Total of 890 nicks [6 ops, 0 halfops, 0 voices, 884 normal]
02:10 -!- Home page for #node.js: http://nodejs.org/
02:10 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
02:10 -!- Irssi: Join to #Node.js was synced in 23 secs
02:30 -!- mode/#Node.js [+o MI6] by ChanServ
02:33 < cdepauw> I would like to know if there is an authoritative specification that describes how x-www-form-urlencoded values should be created
02:34 < cdepauw> I've found vague descriptions in rfc documents but I'm looking for something...
02:35 < cdepauw> that might be used to understand how an object with properties should be described using this value type
02:40 < AAA_awright> cdepauw: Yes, there is
02:41 < cdepauw> AAA_awright: would you share the url with me?
02:42 < AAA_awright> I'm thinking... It's the same format used as URIs but RFC 3986 doesn't define any particular format for the query string
02:42 < AAA_awright> And recently there was a specification allowing ; as a seperator in addition to &
02:43 < AAA_awright> Unfortunately Node.js's url module is completely out-of-spec
02:44 < cdepauw> i see
02:44 < cdepauw> good night
02:44 < AAA_awright> ...
02:45 < AAA_awright> If you don't stick around for the answer then you won't find out the answer
02:58 -!- Topic for #Node.js: it's kinda like http://img.pointlimit.com/ubz4mje5l7z4e.png - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
02:58 -!- Topic set by Nexxy [~emily@unaffiliated/nexxy] [Thu May  9 11:31:32 2013]
02:58 [Users #Node.js]
02:58 [@isaacbw         ] [ Corey           ] [ Guest2735       ] [ L_star_        ] [ passcod        ] [ sordina3        ] 
02:58 [@konobi          ] [ Country         ] [ Guest29965      ] [ lando_         ] [ patrickod      ] [ sorensen        ] 
02:58 [@MI6             ] [ CoverSli1e      ] [ Guest35831      ] [ LanyonM        ] [ PaulCapestany  ] [ Spence          ] 
02:58 [@Nexxy           ] [ crashev         ] [ Guest52025      ] [ LeftWing       ] [ paulwe         ] [ spence__        ] 
02:58 [@tjfontaine      ] [ creationix      ] [ Guest68154      ] [ leichtgewicht  ] [ pcarrier__     ] [ spokenn         ] 
02:58 [@trevnorris      ] [ crescendo       ] [ Guest9820       ] [ lejonet        ] [ percival       ] [ sproates^^      ] 
02:58 [ 18WADGU5W       ] [ crewmoss        ] [ guybrush        ] [ LeMike         ] [ peterbra1en1   ] [ Spudly_         ] 
02:58 [ 20WACD30G       ] [ crodas          ] [ gwoo            ] [ leonardo       ] [ peterfile      ] [ SpX             ] 
02:58 [ 20WACD31B       ] [ cronopio        ] [ hackygolucky    ] [ leostera       ] [ petschm        ] [ ssafejava       ] 
02:58 [ [[zz]]          ] [ cTIDE_          ] [ Hadaka          ] [ leptonix       ] [ ph8            ] [ stalled         ] 
02:58 [ \mSg            ] [ culturelabs     ] [ hakunin         ] [ lihnuz_        ] [ PhilK          ] [ standoo1        ] 
02:58 [ __main__        ] [ cxreg           ] [ halfhalo        ] [ liwen_         ] [ philo23        ] [ stbuehler       ] 
02:58 [ __sri           ] [ d-best          ] [ happyfac1       ] [ LocalPCGuy     ] [ phI||Ip        ] [ stef            ] 
02:58 [ _asdfz0mg       ] [ D4RK-PH0ENiX    ] [ Haputanlas      ] [ Lorentz        ] [ pig            ] [ stephank        ] 
02:58 [ _cheney-        ] [ d_d_d           ] [ harth           ] [ lostc          ] [ Pilate         ] [ StephenS_       ] 
02:58 [ _janne          ] [ dak__           ] [ hartley_        ] [ lrvick1        ] [ pinja          ] [ stevegill       ] 
02:58 [ _marvin         ] [ Damn3d          ] [ Havvy           ] [ LuckyBurger    ] [ plato_         ] [ Stew-a          ] 
02:58 [ _marvin_        ] [ danheberden     ] [ hdon            ] [ luigy_         ] [ pmcclelland    ] [ strax           ] 
02:58 [ _pid            ] [ danmactough     ] [ heath           ] [ Lunar_Lamp     ] [ polyrhythmic   ] [ stride          ] 
02:58 [ _Steve_         ] [ darjeeling      ] [ HeN             ] [ lushious       ] [ poorman        ] [ Stuk            ] 
02:58 [ AAA_awright     ] [ DarkArgoz       ] [ herbnerder      ] [ lyanchih       ] [ prawnsalad     ] [ stutter         ] 
02:58 [ aboudreault     ] [ darkc0met       ] [ herki2          ] [ m0             ] [ prismatictrail ] [ stylus          ] 
02:58 [ abstractj       ] [ daurnimator     ] [ heroux          ] [ M2Ys4U         ] [ Proditor_      ] [ subsilico       ] 
02:58 [ AdamMagaluk     ] [ dawolf          ] [ herzi           ] [ macgregor      ] [ prophile       ] [ substack        ] 
02:58 [ admc_           ] [ dazoe           ] [ hhuuggoo        ] [ Mack           ] [ prosquare      ] [ sugyan          ] 
02:58 [ AdrienBrault    ] [ dbarrett        ] [ hij1nx          ] [ macluq         ] [ przemoc86      ] [ superjoe        ] 
02:58 [ Aidanie_        ] [ de_henne_       ] [ hipsterslapfight] [ madscientist   ] [ psino          ] [ supersymmetry   ] 
02:58 [ Aikar           ] [ deadalus        ] [ Hosh            ] [ majek_         ] [ purr           ] [ sveisvei        ] 
02:58 [ ajpiano         ] [ dec             ] [ howdynihao      ] [ Makine         ] [ pwaleczek      ] [ Sven_vB         ] 
02:58 [ akshayms        ] [ deetb           ] [ hueniverse1     ] [ malladi_       ] [ PY1NB1         ] [ SvenDowideit_   ] 
02:58 [ al3xnull        ] [ defunctzombie_zz] [ Huevos          ] [ manacit        ] [ pyykkis_       ] [ svnlto          ] 
02:58 [ alekibango_     ] [ deimos          ] [ hugo_moss       ] [ ManneW         ] [ qard           ] [ swaj            ] 
02:58 [ alexwhitman     ] [ dekz__          ] [ hydrawat        ] [ mape_          ] [ qbit           ] [ Swizec_         ] 
02:58 [ AllStruck       ] [ Derander        ] [ iain__          ] [ mappum         ] [ qos            ] [ syntax          ] 
02:58 [ aMoniker        ] [ derchiller      ] [ iaincarsberg_   ] [ marienz        ] [ quillo         ] [ syskk           ] 
02:58 [ andrehjr        ] [ DesiJat         ] [ ianjm           ] [ marlun_        ] [ r04r|away      ] [ T-Co_           ] 
02:58 [ andrew12        ] [ dguttman        ] [ iapain          ] [ marsulle_      ] [ r0tha          ] [ tahu            ] 
02:58 [ AntelopeSalad_  ] [ dhpe            ] [ icarot          ] [ Marsup         ] [ radiodario     ] [ tanepiper       ] 
02:58 [ arduix_         ] [ digiwano        ] [ ickyb0d-        ] [ maru_cc____    ] [ raj            ] [ tarruda         ] 
02:58 [ arielserafini   ] [ diminoten       ] [ icodefor_       ] [ masch          ] [ raja           ] [ tassmjau        ] 
02:58 [ armin           ] [ DjMadness       ] [ idefine1        ] [ mashlol        ] [ ralphholzmann  ] [ taternuts       ] 
02:58 [ arnorhs         ] [ djoot           ] [ igl1            ] [ master5o1      ] [ Ralt           ] [ tauren          ] 
02:58 [ asellus         ] [ dleonardi       ] [ iksik_          ] [ matjas         ] [ randallagordon ] [ teadict         ] 
02:58 [ asherkin        ] [ dlmanning       ] [ il_padrino      ] [ matt_c         ] [ rangle         ] [ tec27           ] 
02:58 [ astropirate     ] [ dmogle          ] [ ImBcmDth        ] [ mattdawson     ] [ Rantanen       ] [ techkid6        ] 
02:58 [ aszeszo         ] [ dmwuw           ] [ inarru          ] [ maveonair      ] [ Rapiere        ] [ TechnoCa1       ] 
02:58 [ atatsu          ] [ dmz             ] [ IncipLTN        ] [ max_weller     ] [ rawtaz         ] [ TehShrike       ] 
02:58 [ Atlantic777     ] [ doffm           ] [ InconceivableB  ] [ mbalho         ] [ rax0-          ] [ tellnes         ] 
02:58 [ atojs           ] [ Domenic_        ] [ InezK_away      ] [ mbor           ] [ Raynos         ] [ terietor        ] 
02:58 [ augustl         ] [ don_jones       ] [ inimino         ] [ Mchl           ] [ rcs            ] [ tg              ] 
02:58 [ AvianFlu        ] [ DoNcK           ] [ innociv         ] [ mdedetrich     ] [ reactormonk    ] [ tgies           ] 
02:58 [ avital          ] [ donghee_        ] [ Inoperable      ] [ mdel           ] [ redir          ] [ The_Kingdutch   ] 
02:58 [ avo_            ] [ dook            ] [ Internet13      ] [ mdevolving     ] [ ree            ] [ TheAceOfHearts  ] 
02:58 [ awkorama        ] [ doug            ] [ intripoon_      ] [ meckanism      ] [ reid           ] [ thealphanerd    ] 
02:58 [ azend           ] [ dpemmons        ] [ irclogger_com   ] [ medice         ] [ retornam       ] [ thedaywi1lcome  ] 
02:58 [ azhwkd|away     ] [ Draggor         ] [ ironfroggy_     ] [ mekwall        ] [ retrostyle|me  ] [ thejefflarson_  ] 
02:58 [ b1eedr          ] [ dresende        ] [ isaacs_         ] [ melter_        ] [ rgmarcha       ] [ TheJH           ] 
02:58 [ bagro           ] [ drewp           ] [ itsrache1fish   ] [ mephux         ] [ rhalff         ] [ TheLink         ] 
02:58 [ balgarath_      ] [ drey            ] [ ivan\           ] [ MerlinDMC      ] [ RichardBronosky] [ thelleo         ] 
02:58 [ balupton        ] [ drodger         ] [ ivan`           ] [ mertimor       ] [ rickibalboa    ] [ TheMoonMaster   ] 
02:58 [ baranaby        ] [ DrPizza         ] [ j0ni            ] [ meso           ] [ riku           ] [ thread          ] 
02:58 [ barneybook      ] [ DrShoggoth      ] [ Jac0bz1         ] [ metellus       ] [ Ritzton        ] [ tim_smart       ] 
02:58 [ bartt           ] [ drudge          ] [ jalcine         ] [ mferranti      ] [ rmill          ] [ timoxley        ] 
02:58 [ bastinat0r      ] [ dscape_         ] [ jamesbathgate   ] [ mfn            ] [ robinson1k     ] [ TimTim`         ] 
02:58 [ baudehlo        ] [ dtriley41       ] [ jan____         ] [ mfrauenh1ltz   ] [ roger_rabbit   ] [ tklun           ] 
02:58 [ bbttxu          ] [ duncanbeevers   ] [ jaredrhine      ] [ mickhansen     ] [ roger_raymond  ] [ tokuhirom       ] 
02:58 [ bear            ] [ durnik          ] [ jareiko         ] [ mikegerwitz    ] [ Rolken         ] [ tomaw           ] 
02:58 [ beatpanic       ] [ dwcook          ] [ jasonrm         ] [ mikey_p        ] [ rolleiflex     ] [ TommehM         ] 
02:58 [ beawesomeinstead] [ dwiereng2       ] [ Jaylee___       ] [ miql_          ] [ rom1504        ] [ TomRone_        ] 
02:58 [ beeant          ] [ echo|           ] [ jayne           ] [ MiracleBlue    ] [ romainhuet     ] [ tomshredz       ] 
02:58 [ beeant-macbook  ] [ edude03         ] [ jayrobot        ] [ mirkok         ] [ rounce1        ] [ toothrot        ] 
02:58 [ beg             ] [ eighty4         ] [ jb_             ] [ MitchW_        ] [ roxlu          ] [ topaxi          ] 
02:58 [ belfare1        ] [ eins78          ] [ jdelgado        ] [ MitchyNuts1    ] [ rphillips      ] [ topek_          ] 
02:58 [ ben_alman       ] [ ejnahc          ] [ jden            ] [ mlocher        ] [ rsmartinva     ] [ torgeir         ] 
02:58 [ benatkin        ] [ El_Angelo       ] [ jednorozec      ] [ mmalecki       ] [ rtgibbons      ] [ Torsten         ] 
02:58 [ bengl_          ] [ elijah-mbp      ] [ jeffean4        ] [ mnaser         ] [ Rubennn        ] [ tpatja          ] 
02:58 [ bentruyman_     ] [ elliotf         ] [ jefferai        ] [ monokrome      ] [ rudolfrck      ] [ trepan_         ] 
02:58 [ Benvie          ] [ elliottcable    ] [ jesseproulx     ] [ MoRn           ] [ ruff           ] [ trepatudo       ] 
02:58 [ Benvie_         ] [ elliottcable_   ] [ jetienne        ] [ Motu1          ] [ runningskull   ] [ trodrigues      ] 
02:58 [ Bergle_2        ] [ emilsedgh       ] [ jez0990         ] [ mp_            ] [ RushPL         ] [ trusktr         ] 
02:58 [ bergquist       ] [ emptynine       ] [ jimbot          ] [ mpajor_o15     ] [ russfrank      ] [ tuhoojabotti    ] 
02:58 [ beuk            ] [ enaqx           ] [ jimmyff         ] [ MrDHat|afk     ] [ rvagg          ] [ txdv            ] 
02:58 [ Bilge           ] [ epa_            ] [ jimt_           ] [ mrkurt_        ] [ rwaldron       ] [ Typo            ] 
02:58 [ billy           ] [ Epeli           ] [ JJMalina        ] [ mrmoneyc       ] [ RX80           ] [ Vbits           ] 
02:58 [ bingomanatee    ] [ epiloque        ] [ jjore           ] [ MrNibbles      ] [ ry4nn_         ] [ VesQ            ] 
02:58 [ bitfed_         ] [ er1c_           ] [ jkarsrud        ] [ mscdex         ] [ ryanrolds      ] [ Wa              ] 
02:58 [ Blorb           ] [ Erakso          ] [ jlord_          ] [ munichlinux    ] [ rybnik         ] [ wagtag          ] 
02:58 [ bmatusiak_      ] [ ereslibre       ] [ jmanoto         ] [ myndzi         ] [ s-p-n          ] [ wang            ] 
02:58 [ Bob_Gneu        ] [ Erriond         ] [ jmaugue_        ] [ n0c            ] [ s00pcan        ] [ wao_            ] 
02:58 [ BobAlmighty     ] [ estebistec      ] [ jmonay          ] [ n8n            ] [ s2g            ] [ weal            ] 
02:58 [ bodisjw         ] [ EToS            ] [ jn              ] [ nail___        ] [ s4muel         ] [ wedgeV_         ] 
02:58 [ BombStrike      ] [ euphoria|jacked ] [ joaojero1imo    ] [ nanashiRei     ] [ s5fs__         ] [ wereHamster     ] 
02:58 [ Bonuspunkt      ] [ eventualbuddha  ] [ joe_k           ] [ napalmbr1in    ] [ s_e            ] [ wesbos          ] 
02:58 [ booyaa|foo      ] [ EvilJStoker     ] [ Joefish]off     ] [ naquad         ] [ salsamontes    ] [ wesside         ] 
02:58 [ braincrash      ] [ EvilPacket      ] [ joeytwid1le_    ] [ nathan7        ] [ sam_w          ] [ whyhankee       ] 
02:58 [ brainproxy      ] [ exos            ] [ jolo2           ] [ nathanbz       ] [ sambarino      ] [ willwh          ] 
02:58 [ breck7          ] [ Ezku            ] [ Jonathan1cClare ] [ nb-ben2        ] [ sander_        ] [ Will|           ] 
02:58 [ brettlangdon    ] [ fastman         ] [ Jonathan2cClare ] [ ndngvr         ] [ SargoDarya     ] [ wilmoore-js     ] 
02:58 [ brian_petersen  ] [ faulkner        ] [ Jonghwan_       ] [ netj           ] [ satyr_         ] [ winni           ] 
02:58 [ brianloveswords ] [ fayimora        ] [ JorgeRuiz       ] [ nettie         ] [ sayd           ] [ wizonesolutions ] 
02:58 [ BrightGreyLine  ] [ felixge         ] [ joshie          ] [ neverendingo   ] [ sbeam_         ] [ wolfeidau       ] 
02:58 [ brimster        ] [ filleokus_      ] [ joshontheweb    ] [ nfour_         ] [ scoutz         ] [ wolfspra1l      ] 
02:58 [ brycebaril      ] [ flagg0204       ] [ joshthecoder_   ] [ nicholas_      ] [ sdboyer        ] [ wookiehangover  ] 
02:58 [ Bunge_          ] [ Fli-c           ] [ jpiche_         ] [ nicholasf      ] [ SebastianFlyte ] [ WorkingClassDev ] 
02:58 [ buritica        ] [ flyth           ] [ JPT             ] [ niclone        ] [ Secutor        ] [ wyan            ] 
02:58 [ bwall           ] [ FMJaggy         ] [ jrdn            ] [ niftylettuce   ] [ segomos        ] [ wycats__        ] 
02:58 [ Bwild           ] [ FooBarWidget    ] [ jschall         ] [ niggler        ] [ Segrel         ] [ x13378071       ] 
02:58 [ bwoodward       ] [ FortuneDayss    ] [ jso             ] [ nightfly__     ] [ seich-         ] [ xAt             ] 
02:58 [ bytemask        ] [ foxx            ] [ JSON|work       ] [ Nijiko         ] [ Sembiance      ] [ xerora__        ] 
02:58 [ Cainus          ] [ fpuc            ] [ jtwalters_      ] [ nikkimccavee   ] [ sente          ] [ xonev           ] 
02:58 [ calvinfo        ] [ frd|afk         ] [ julianduque     ] [ nikola         ] [ seric          ] [ xorspark        ] 
02:58 [ candlejackson   ] [ FredC           ] [ juliangruber_   ] [ NimeshNeema    ] [ Seventoes      ] [ xSmurf          ] 
02:58 [ cburyta         ] [ Freedonkeys     ] [ jvolkman        ] [ ninegrid       ] [ sevvie_        ] [ xxblakefailxx_  ] 
02:58 [ cce             ] [ freeside        ] [ ka2n            ] [ nkohari        ] [ sg             ] [ yacks           ] 
02:58 [ ccohn_          ] [ freethen`       ] [ Kai             ] [ nlf            ] [ Shadda         ] [ yankhates       ] 
02:58 [ celogeek        ] [ freewil         ] [ kai__           ] [ NoFaTe         ] [ Shadowized     ] [ yano            ] 
02:58 [ chapel          ] [ Frippe          ] [ kaichanvong     ] [ npmbro         ] [ shanlar        ] [ yawnt           ] 
02:58 [ chayin          ] [ Furai           ] [ Kaimei          ] [ nsm            ] [ shanse         ] [ yhpark_talk     ] 
02:58 [ Cheery          ] [ fwg             ] [ Kaltiz          ] [ nuba           ] [ shesek         ] [ yorn            ] 
02:58 [ cheese1756      ] [ g0z             ] [ karupanerura    ] [ Nuck           ] [ shiftins_      ] [ yuwang          ] 
02:58 [ chiller         ] [ gabriel         ] [ kborchers       ] [ nullo          ] [ shlevy         ] [ yuya_           ] 
02:58 [ chilts          ] [ Gabriel403      ] [ kc8qvp          ] [ numba1stunnnnna] [ shoerain       ] [ zadark|2        ] 
02:58 [ chjj            ] [ garren          ] [ keeto           ] [ nutcase        ] [ Shrink         ] [ zaheera         ] 
02:58 [ chmac           ] [ Garrick         ] [ kenperkins      ] [ nzjames        ] [ sideshowcoder  ] [ Zak             ] 
02:58 [ chridal         ] [ gdbz            ] [ Kent_           ] [ o^_^o          ] [ silvers        ] [ zaleb           ] 
02:58 [ chrisbuc-       ] [ gde33|2         ] [ Kester          ] [ odyniec        ] [ simius         ] [ zanea           ] 
02:58 [ chrisdickinson  ] [ geb             ] [ kevinfagan      ] [ ohcibi         ] [ simon^         ] [ zapu            ] 
02:58 [ chrismatheson   ] [ generali_       ] [ KevinT          ] [ olegp_         ] [ simon^^_       ] [ Zauberfisch^idle] 
02:58 [ ckknight        ] [ gf3             ] [ kevireillyy     ] [ omni5cience_   ] [ sinclair|away  ] [ Zaxnyd          ] 
02:58 [ ClaudioAlbertin ] [ ggordan         ] [ keyosk          ] [ onr            ] [ sindresorhus   ] [ zedas           ] 
02:58 [ clone1018       ] [ ghoti           ] [ kinabalu        ] [ oon__          ] [ sir_tyri1n     ] [ zeekay          ] 
02:58 [ codelahoma      ] [ gildean         ] [ KiNgMaR         ] [ ootje_         ] [ sirecote       ] [ zemm_           ] 
02:58 [ codepal         ] [ gkatsev         ] [ Kjerski         ] [ optixx         ] [ SirFunk        ] [ zenazn          ] 
02:58 [ codingkevin     ] [ GlitchMr        ] [ klobucar        ] [ orospakr       ] [ sivoais        ] [ zenodub         ] 
02:58 [ codycraven      ] [ gnarf           ] [ kornnflake_     ] [ othiym23       ] [ skebcio_       ] [ zeromodulus     ] 
02:58 [ Codynyx         ] [ gorillat1on     ] [ kppullin_       ] [ Outsider_      ] [ sKeiths        ] [ zeroz           ] 
02:58 [ colinsullivan   ] [ gorillatron     ] [ kraft           ] [ over__         ] [ skoba          ] [ zivester_       ] 
02:58 [ colinwren       ] [ Gottox          ] [ krill           ] [ owen1          ] [ Slashbunny     ] [ zodiak          ] 
02:58 [ Connorhd_       ] [ GreenDog        ] [ krishna         ] [ owenb          ] [ slicky         ] [ zomg_           ] 
02:58 [ conradev        ] [ greg5green      ] [ Kudos           ] [ oxy_           ] [ slurp1         ] [ zz_angrysock    ] 
02:58 [ context         ] [ Gregor          ] [ kuja            ] [ oz             ] [ smlgbl         ] [ |Gobo|_         ] 
02:58 [ CookieNo1ster   ] [ Grephix         ] [ kuuranne        ] [ Pagan          ] [ snuggl         ] 
02:58 [ coolnalu        ] [ Gruni           ] [ kzrl            ] [ pandark__      ] [ Soarez         ] 
02:58 [ copongcopong    ] [ gsf             ] [ l1lj3nz1n       ] [ parasight      ] [ SomeoneWeird_  ] 
02:58 -!- Irssi: #Node.js: Total of 861 nicks [6 ops, 0 halfops, 0 voices, 855 normal]
02:58 -!- Home page for #node.js: http://nodejs.org/
02:58 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
02:58 -!- Irssi: Join to #Node.js was synced in 25 secs
03:00 < astropirate> BobAlmighty, explain
03:01 < astropirate> BobAlmighty, just use Objects and extend them
03:01 < astropirate> I like to do on object per module
03:01 < astropirate> and just exportt that
03:01 < astropirate> and you can use OOP from there on
03:01 < BobAlmighty> I guess that's what I'm kinda asking
03:02 < astropirate> BobAlmighty, i'll write you a pastie
03:02 < BobAlmighty> Does the sort of traditional object export, extend, work?
03:02 < astropirate> well to extend an object you simply extend its prototeype
03:04 < BobAlmighty> so if I like exports.myObject = function a() {}; And then in another file: var a = require('a'); a.prototype.newstuff = function b(){};
03:06 < astropirate> So   var Foo = module.exports = function() {};    Foo.prototype.mew = function() {};       || another file:    var Foo = require('Foo.js') var Moo = function() {};  Moo.prototype = new Foo
03:06 < astropirate> and then you can add properties/methods to the Foo's prototype
03:07 < astropirate> woops
03:07 < astropirate> Moo's prototype
03:07 < astropirate> without effecting Foo's prototype
03:07 < astropirate> BobAlmighty, 
03:11 < Havvy> astropirate: Moo.prototype = Object.create(Foo.prototype);
03:11 < astropirate> Havvy, why
03:11 < gkatsev> Havvy: astropirate is correct, fwiw.
03:12 < Havvy> You aren't calling the constructor, and everything that entails.
03:12 < gkatsev> astropirate: Object.create is prefered over `new`
03:12 < Havvy> With Object.create()
03:12 < astropirate> gkatsev, fwiw?
03:12 < ljharb> "for what it's worth"
03:12 < Havvy> 'for what its worth'
03:12 < astropirate> iahh
03:12 < astropirate> ok
03:12 < astropirate> alright good to know i'll have to start using that
03:12 < astropirate> right that makes more sense
03:12 < Havvy> If you need to call the parent constructor, do so in the child constructor.
03:12 < BobAlmighty> Interesting
03:13 < BobAlmighty> I literally think you just solved a bug of mine from a while bad
03:13 < BobAlmighty> back
03:13 < astropirate> BobAlmighty,  so, in the child constructor you would just   do   ParentConstructor.call(this)
03:13 < astropirate> (if you wanted to call parent constructor)
03:14 < Havvy> astropirate: Yes.
03:14 < BobAlmighty> The parent was a bastard, and I want nothing to do with it.
03:14 < ljharb> BobAlmighty: note that that won't work in IE 8 and below
03:15 < BobAlmighty> This is all in node, so not a big deal
03:15 < ljharb> k
03:15 < BobAlmighty> But, that does matter for the bug I was refering to.
03:15 < Havvy> Note that you can emulate the one-argument version of Object.create.
03:15 < BobAlmighty> Why do I have to support IE 6, for windows CE 5.3?
03:15 < BobAlmighty> WHY
03:16 < BobAlmighty> year old, thousand dollar, handheld motorola scanners.
03:16 < BobAlmighty> Fucking buy an andrioid or iphone already.
03:17 < therealkoopa> I'm stumped with a request issue. curl -L https://www.dropbox.com/s/hulox0kjvidmofc/body%20measurements.csv follows redirects, so I get the csv.
03:17 < therealkoopa> request is supposed to follow redirects but... request('https://www.dropbox.com/s/hulox0kjvidmofc/body%20measurements.csv').pipe(process.stdout) doesn't follow them
03:18 < therealkoopa> I've tried playing with followAllRedirects, too, but no dice.
03:22 < BobAlmighty> Wait...how do I pass parameters to the constructer if I use Object.create...
03:23 < BobAlmighty> Uh, NM....
03:23 < therealkoopa> Ah, dropbox likes the user-agent to be curl ;)
03:54 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
04:21 < astropirate> Anyone using OrientDB?
04:21 < astropirate> did you have a good experience with it?
04:21 < astropirate> would it be a good fit for a CMS style application
04:21 < AAA_awright> Link?
04:22 < astropirate> AAA_awright, http://www.orientdb.org/
04:26 < astropirate> it doesnt support indexing but rather just uses nodes and their relations
04:26 < astropirate> this woudln't be such a great thing for things like
04:26 < astropirate> querying documents based on a URL "slug"
04:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
05:09 < arnorhs> i have a question about the structure of the ideal module in terms of logging
05:09 < arnorhs> if you have if you have a module that needs to log stuff, i guess there are multiple ways to do it
05:09 < arnorhs> you could simply have an EventEmitter and emit a log event
05:09 < leichtgewicht> NodeJS Osaka: Beginners study session just started: http://www.ustream.tv/channel/nodejs-osaka
05:09 < arnorhs> but you could also just depend on an external logger type of thing
05:10 < arnorhs> but it seems ugly to inject that dependency into all the repos that require my module
05:10 < arnorhs> so it seems like an event is the best approach
05:11 < arnorhs> but maybe it would be nice for people to be able to plug in their logger thing, w/o too much wiring
05:11 < arnorhs> is there a standard/convention for how to do logging properly?
05:15 < echo|> This isn't necessarily a standard. But the principle of a module, in my opinion, is to do a particular thing. If logging is something your module must have, I think you should make it configurable in that it's both optional and extendable. It's an easy subject to please both crowds. All of that is totally opinion based, ofcourse. 
05:18 < arnorhs> echo|: ok, so what do people in general think of verbose flags? like passing in an option value for verboseness or argument
05:19 < arnorhs> i can't help but think about the unix philosophy.. where you can usually set a --verbose flag (-v) or something.. and unix programs usually don't require an external logger.. 
05:19 < arnorhs> unix programs even sometimes allow you to configure a format etc
05:20 < arnorhs> and how fine grained do people generally want logging for a server/service type of a scenario?
05:21 < arnorhs> i could imagine multiple versions where you either have certain values.. like timestamp, event type, description, maybe some status code like the number of active connections or whatever
05:21 < arnorhs> so you might want to log that all yourself in a particular way
05:21 < arnorhs> but for each module to support multiple formats seems insane
05:22 < echo|> One of my favorite implementations of a logger is the log.error/log.info/log.debug method. Where in the code, those are called no matter what. But either depending upon arguments or configuration options, only those requested are shown. Development is most definitely the predominate case where verbose logging is used.
05:22 < arnorhs> so would the people who might want to use something like syslogd or whatever want to be able to customize the output.. so basically I define a log event, where an object hash of values is passed in, or multiple arguments etc etc etc
05:23 < arnorhs> eg.. shoe does this as an example https://github.com/substack/shoe/blob/master/index.js#L25
05:23 < echo|> For the extension portion of the logging, I personally love connect's logging. Expose a function they can provide a callback for, exposing the values to them and let them do their own thing with it.
05:24 < arnorhs> yeah.. but the values/format of what the logging event receives.. that's the questionable part imo
05:24 < arnorhs> you could imagine that maybe an object hash would be more helpful than two arbitrary variables
05:25 < arnorhs> anyways.. probably doesn't matter.. most logging is just "[YYMMDDHHiiss] this happened"
05:25 < arnorhs> so i should probably forget about it
05:25 < arnorhs> but it would be nice if there was a convention
05:25 < echo|> If it's documented and makes sense, it has potential to make a standard.
05:26 < echo|> I was turned on to the log.'s first by npm's logging. 
05:27 < arnorhs> where you could just do something like myobject.on('log', loggerformat('TT N')) and that thing could be whatever logger you prefer etc
05:28 < echo|> If I was writing it, in the prototypes for each of the levels, I would have some standardized object format. And then in the eventhandler, it would bring in what was specified in the configuration.
05:28 < echo|> I personally love Logstash's object format
05:29 < arnorhs> yeah, i think i agree
05:29 < arnorhs> logstash, will check out
05:29 < echo|> http://logstash.net/
05:30 < beeant> what is the best way to define global constants in node?
05:31 < beeant> i think i got it, ill just make a file and require it
05:31 < arnorhs> beeant: yeah, that's the way to go
05:32 < arnorhs> echo|: that video from puppet conf is pretty funny
05:34 < echo|> Yeah, It's kind of dated, but he's pretty funnt.
05:34 < echo|> it's* funny*
05:34 < jdelgado> How much better performing is writeStream vs plain old Append?
05:37 < echo|> jdelgado: AFAIK, it depends upon the size and frequency of the writes. Something huge has to be buffered into memory before written. Therefor, making streams that can chunk it much more efficient. I also believe rapid appends perform better in streams due to not constantly requesting and closing file descriptors.
05:38 < jdelgado> echo|: Right on - sounds about right. Thank you :)
05:55 < navaru> Someone online?
05:56 < navaru> I have small issue, I'm watching a file for changes, an need to require('./config.js')
05:56 < navaru> but require will cache the loaded file
05:56 < arnorhs> echo|: have you used https://github.com/bpaquet/node-logstash ?
05:57 < arnorhs> navaru: when you say watching, what do you mean exactly?
05:57 < echo|> arnorhs: I've looked at it
05:58 < arnorhs> navaru: i ask because usually when people say that it means they're using something like supervisor to restart their node app each time something changes
05:58 < navaru> I've watching .css files for changes, and on('change') I need to read the config.js and compile build.js
05:58 < echo|> arnorhs: I had a bunch of issues with the api, found https://github.com/jordansissel/lumberjack to be MUCH simpler and the perfect solution for physical file logs.
05:58 < arnorhs> navaru: then you have to watch for changes to js as well and restart your node process
05:58 < navaru> I'm*
05:58 < echo|> navaru: There's a method to delete the require'd cache. 
05:59 < navaru> echo|: how? that's what I was aiming at
06:00 < echo|> navaru: Try: delete require.cache('./config.js')
06:00 < arnorhs> navaru: i think you do: delete require.cache
06:01 < arnorhs> require.cache is the cache object
06:01 < echo|> Since it's only one file, you don't have to resolve deps/find all associated files in the cache and remove it.
06:01 < echo|> That would delete all items from the cache, not just that one file though, if I'm not mistaken.
06:01 < echo|> There's some more advanced methods in this stackoverflow: http://stackoverflow.com/questions/9210542/node-js-require-cache-possible-to-invalidate
06:01 < arnorhs> yeah, probably
06:01 < arnorhs> why not just restart the node process?
06:03 < navaru> I have a gruntfile.js that does other stuff and logs, so I need it to keep track of some changes
06:03 < echo|> For some larger apps, reinitialization is lengthy for something as simple as a configuration file update. Or for instance, the usecase of an irc bot, wouldn't want to have to reconnect just to add a command.
06:04 < arnorhs> yeah.. you need the full path of the cached module
06:04 < arnorhs> so: delete require.cache["/full/path/to/file.js"];
06:05 < arnorhs> so: delete require.cache[require.resolve("./config.js")];
06:05 < navaru> yes, thanks for that
06:06 < arnorhs> np
06:06 < navaru> config.js returns 2 objects, is there other way I can read the file?
06:07 < navaru> previously I have used a .json file, but I need some functions to run in config.js
06:07 < arnorhs> navaru: you mean you just want to remove one of the things in it?
06:07 < arnorhs> fwiw i'm pretty sure just removing one will not reload the file next time it's requested
06:08 < navaru> on('change', function () { var config = require('./config.js') })
06:08 < navaru> I have something like that
06:08 < arnorhs> navaru: what is it in your config that you're changing?
06:08 < arnorhs> are you changing that file?
06:08 < navaru> yes
06:09 < navaru> in config.js there are variables for the .css files
06:09 < arnorhs> the only way i can imagine just to reload half of it is to either have it do some processing each time (so expose a function) or split your config thing into two files
06:09 < arnorhs> create a css.config.js
06:10 < arnorhs> you could also keep those things in a json file and clear that cache each time
06:10 < navaru> I was referring if there's another way to read the config.js except require()
06:10 < navaru> that will return an object as require does
06:11 < navaru> I used a .json file, but I need some js logic also
06:11 < arnorhs> i have no idea what you're doing exactly, but the fact that you're asking is a pretty big tell that there might be a different way of doing what ever you're doing
06:12 < arnorhs> eg.. why are you editing a config file for editing css
06:12 < navaru> I use https://github.com/visionmedia/rework
06:13 < arnorhs> anyways. you could do this.. exports.getCssConfig = function() { return require('css.config.js'); } in your config.js
06:13 < echo|> Alternatives to requiring it would be using fs to open, read and parse the file. Which is what require is optimized to do, I don't see value in using another method of just reading+parsing+exposing the file when there's one meant to.
06:13 < navaru> It will still be cached
06:13 < echo|> I also think there's a bunch of confusion as to what you're actually trying to seek advice on :P
06:13 < arnorhs> and then you just clear out the css.config.js file from the cache.. and next time that method is called, file will be parsed again
06:13 < echo|> We've covered how to remove the cache
06:14 < navaru> ok, thank you both for your time
06:14 < echo|> Placing that deletion arnorhs provided directly before your require in the on.('change') you provided, should give you the exact results you requested earlier
06:16 < beeant> is there anyway i can do if(! undefined_variable )
06:16 < beeant> without doing typeof check
06:16 < arnorhs> beean you can do if (varname === undefined)
06:17 < arnorhs> which relies on the variable undefined to be undefined as well :)
06:17 < beeant> oh i think !undefined_variable works fine
06:17 < beeant> my problem is
06:17 < beeant> setting an array
06:17 < beeant> unordered array
06:17 < beeant> like array[100]
06:17 < beeant> array[100] = abc
06:18 < arnorhs> yeah
06:18 < beeant> can i do that?
06:18 < arnorhs> ah, you want to know if it' sin tehre?
06:18 < arnorhs> you can do if (100 in array)
06:19 < arnorhs> if you just theck if (!arr[100]) { then that value could be a 0 or a false value
06:19 < arnorhs> and maybe that's what you want.. but maybe not
06:19 < beeant> i set array[100] = abc
06:19 < ljharb> sparse arrays, sigh
06:19 < beeant> and it gives me empty value for 0,99
06:20 < arnorhs> when you say 'empty', what do you mean exactly?
06:20 < arnorhs> empty string, or a null or an undefined?
06:20 < beeant> like [,,,,,,,,,,,... 100]
06:20 < ljharb> undefined.
06:20 < ljharb> it's called a sparse array.
06:20 < ljharb> and they make me sad.
06:20 < beeant> ya, its different with php
06:20 < beeant> so its just like this in JS?
06:21 < ljharb> yes
06:21 < ningu> ljharb: do boxed versus unboxed objects also make you sad?
06:21 < ljharb> ningu: boxing is actually nice. lets you have methods on a primitive
06:21 < ningu> yes, but the *difference* is weird
06:21 < ljharb> beeant: why do you think you need a sparse array? what are you actually trying to achieve?
06:21 < beeant> i'll just make object = {{id: key, value: abc}}
06:21 < ningu> besides, don't you get the methods anyway even on the unboxed ones? i guess it automatically converts
06:21 < beeant> i need to store the key and value
06:21 < ljharb> beeant: the difference is that in php, "arrays" are both "associative" and "just arrays"
06:22 < ljharb> beeant: in JS, "associative arrays" are "objects"
06:22 < ningu> beeant: that is invalid syntax, just use one {}
06:22 < beeant> can i use number as the object key?
06:22 < ljharb> so if you want a dictionary/object/map/associative array, use {}. if you want an ordered list with integer keys, use []
06:22 < ningu> yes
06:22 < ningu> var foo = { 10: bar, 20: baz }
06:22 < beeant> ok ill try
06:23 < beeant> i can define it with aaa[10] = abc right
06:23 < arnorhs> beeant: you can also step back up a bit and tell us what you're doing
06:23 < beeant> hold on let me try this first
06:23 < ljharb> yes, please explain in english
06:23 < arnorhs> beeant: yeah, nothing wrong with that
06:23 < ningu> beeant: yep, it's equivalent to aaa['10'] btw
06:23 < ningu> at least, I think it is :)
06:23 < ljharb> instead of asking how to do "the solution you think is right" tell us what you want to do, so we can give you the right solution
06:23 < echo|> lol
06:24 < arnorhs> ningu: yup :)
06:24 < ningu> so how many rounds do they go in object boxing?
06:24 < arnorhs> ljharb: i kind of think his questions were ok.. sometimes it's hard to phrase what you're trying to ask
06:24 < arnorhs> even though you/me/somebody might not like the approach that he/she's taking.. it's a learning process
06:25 < ljharb> oh totally
06:25 < ljharb> but i think you'll learn more about building a house by cutting the wall with a saw, rather than trying a hammer first :-p
06:25 < arnorhs> ljharb: you have to learn with blood why the hammer doesn't work imo :)
06:26 < arnorhs> or maybe not if you're a super human
06:26 < ningu> I'm used to learning by googling and reading tutorials or reference sites or whatever
06:26 < arnorhs> i'm not so i have to sweat
06:26 < ningu> I tend to leave the irc questions for things that are hard to look up
06:26 < arnorhs> ningu: same here :/
06:26 < arnorhs> i think there's a huge benefit in knowing how to phrases the question
06:26 < arnorhs> then it's often easy to google
06:26 < ningu> like... is there a good module for X? where X is a description of what I want but doesn't have a name that I know
06:27 < ningu> I'll ask people here things like that
06:27 < arnorhs> yeah, that makes sense
06:27 < ningu> or also if it depends on experience, like, I know you can do it way 1 or 2 but I don't know what the upsides or downsides are
06:28 < echo|> There's also a skill developed in gauging how much you should be asking to get the best, if any results. i.e. Here's the entire flow of the script I'm writing and what I want it to do vs. is this one object in this one of a bajillion functions the correct way to use it
06:29 < ningu> recently I was helping someone learn jquery, cheerio, and js all at once and they asked how can I know when I want to do something which docs I should read
06:29 < ningu> I had to think about that one for a while
06:29 < arnorhs> yeah.. sometimes also being able to phrase the question you're asking is the most important.. like "what are some of the more popular approaches to control flow" vs "so, i have this callback thing that calls another with a done and when the done is done it's deep down, and i'd like to wrap it so that the callback in b is above the one in c etc etc"
06:29 < arnorhs> lol
06:30 < echo|> Exactly
06:30 < ningu> will there be a food stand at nodeconf selling callback wraps?
06:30 < arnorhs> ningu: but control flow is also not a topic that comes up often in other languages/frameworks.. so..
06:30 < ningu> huh? of course it is
06:31 < ningu> oh, you said often, sorry
06:31 < ningu> I suppose
06:37 < arnorhs> oh btw .hasOwnProperty() is faster than checking (key in obj).. i didn't know
06:37 < cococo> hi hi hi, well well well
06:38 < arnorhs> i guess the results are not the same though
06:38 < cococo> Im trying run a project in cloud9 but they say "use the process.env.PORT as the port for your server"
06:39 < cococo> but I can not use "process.env.PORT" in the html client 
06:39 < cococo> I dont get it
06:39 < geNAZt> arnorhs, yes the results arent the same
06:39 < geNAZt> cococo, e port for your server vs. .env.PORT" in the html client 
06:39 < geNAZt> server != client
06:40 < arnorhs> geNAZt: this is in the context of what somebody was asking earlier about what would be the easiest way to check for the existance of a key in a numbered (sparse) array
06:40 < ljharb> "faster" isn't really relevant at that level, but good to know
06:41 < cococo> well, to make a socket.io connection I need to type "var socket = io.connect('http://www:1337');"
06:42 < cococo> .. in the client side
06:42 < geNAZt> cococo, yes
06:42 < geNAZt> give it into a variable from your server ?
06:43 < geNAZt> "var serverPort = " + process.env.PORT;
06:45 < beeant> how to set a session in express js?
06:45 < geNAZt> beeant, req.session.variable = "jkl";
06:45 < beeant> ok
06:46 < beeant> thanks
06:46 < beeant> and how to destroy it?
06:47 < beeant> req.session.variable = null?
06:47 < arnorhs> beeant: delete req.session.variable
06:47 < beeant> ok
06:47 < beeant> thanks
06:50 < cococo> geNAZt: it is a good idea!
06:50 < cococo> lol
07:01 < beeant> how to do object.length in node object
07:01 < beeant> should i use isEmpty in underscore
07:01 < beeant> or there is a built in function for that
07:02 < ljharb> beeant: Object.keys(object).length
07:02 < ljharb> you don't need underscore for most of what it does.
07:02 < beeant> is it better than _.isEmpty()?
07:03 < ljharb> it's part of the language, so yes
07:04 < arnorhs> _.isEmpty() works on arrays and objects
07:04 < arnorhs> and will also not fail on the object being null
07:04 < ljharb> sure. but arrays have "length", and objects can use object.keys
07:05 < ljharb> and if you don't know if your thing is an array, and object, or null, then i'm not sure what you're doing
07:05 < ljharb> underscore adds way too much ruby-like magic into JS. you are *supposed* to know what kind of thing you have.
07:05 < beeant> ya its ok
07:05 < beeant> but
07:05 < arnorhs> also looks like it starts an iterator and then returns.. so it might be more efficient on large objects http://underscorejs.org/docs/underscore.html#section-105
07:05 < beeant> i have foreach
07:05 < arnorhs> i'm not arguing for using the method
07:05 < beeant> i cannot use foreach with object?
07:05 < ljharb> beeant: forEach works on arrays - Object.keys(object).forEach works tho
07:06 < geNAZt> and is also the fastest iteration
07:06 < arnorhs> i'm just answering the question "is it better than _.isEmpty() forwhatever definition of better
07:06 < beeant> with Object.keys(object)?
07:06 < ljharb> beeant: yes, that's an array
07:06 < geNAZt> no Array.forEach is the fastest iteration through a array
07:07 < ljharb> it looks the clearest, and avoids lots of common pitfalls. that's far more important than speed
07:07 < arnorhs> geNAZt: not as fast as for (var i = 0; i < a.length; i++)
07:07 < beeant> but i need to iterate the value too
07:07 < geNAZt> arnorhs, wrong
07:07 < beeant> forEach(function(value, key)
07:07 < ljharb> beeant: Object.keys(foo).forEach(function (key) { foo[key] })
07:08 < beeant> thats kind of annoying to use foo[key]
07:08 < beeant> haha
07:08 < ljharb> beeant: you can use the foreach or for-each npm modules if you want to iterate over that, and you don't need to pull in a huge lib like underscore for it.
07:08 < ljharb> but Object.keys().forEach is the native way to do it.
07:08 < arnorhs> geNAZt: what's wrong here then? http://jsperf.com/difference-between-a-for-and-a-array-foreach-loop
07:09 < arnorhs> geNAZt: (i genuinely want to learn, i'm not arguing, fwiw)
07:09 < ljharb> arnorhs: for loops are faster. but that's irrelevant for 99.9% of use cases. don't ever write your code because of what's faster.
07:09 < arnorhs> i don't
07:09 < ljharb> arnorhs: forEach creates a scope, skips gaps in sparse arrays, etc
07:09 < ljharb> it also encourages you to write more functions for things.
07:09 < ljharb> which is a good practice overall
07:09 < arnorhs> i was not making the argument for either one
07:09 < geNAZt> >> var obj = {}; for(var i=0; i < 128000; i++) { obj.i = "a"; }; var start = Date.now(); for(var x in obj) { if(obj.hasOwnProperty(x)) {}}; console.log(Date.now() - start);
07:09 < purr> geNAZt: undefined; Console: 0
07:09 < ljharb> lol k
07:10 < arnorhs> ljharb: sorry, i just take things really literally, he specifically mentioned "faster" not "which should you use"
07:10 < ljharb> fair enough
07:14 < beeant> i like using forEach better
07:15 < beeant> cos it is similar to PHP
07:15 < arnorhs> beeant: me too
07:15 < beeant> so from the discussion
07:15 < arnorhs> i think it reads better, fwiw
07:15 < beeant> forEach is better overall right
07:15 < ljharb> "similar to php" isn't a great reason :-p
07:15 < ljharb> but it is better.
07:15 < arnorhs> beeant: hm, similar to PHP?
07:16 < arnorhs> doesn't php do foreach(obj => key) { ?
07:16 < beeant> ya in php theres a foreach(abc as a => a)
07:16 < beeant> ya
07:16 < arnorhs> that looks more similar to for (var k in obj) { to me
07:16 < arnorhs> the only difference being the name
07:16 < beeant> that var k
07:16 < beeant> only get the k
07:16 < beeant> not the value
07:16 < beeant> only get the key not the value it sucks
07:17 < beeant> so i think
07:17 < beeant> since Object.keys(obj).forEach(function(key) {
07:17 < beeant> doesnt get the value too
07:18 < beeant> ill just use for (var k in obj)
07:18 < gildean> it gets you the value with obj[key] inside the foreach function
07:18 < geNAZt> arnorhs, https://gist.github.com/geNAZt/5559184
07:18 < ljharb> beeant: please do not.
07:18 < ljharb> beeant: for..in will iterate over all the properties in the prototype. you don't want that.
07:18 < ljharb> beeant: use Object.keys.
07:19 < gildean> or check for hasOwnProperty
07:19 < gildean> but it's easier to use object.keys
07:19 < geNAZt> which is slow :D
07:19 < beeant> i hate slow stuffs
07:19 < beeant> so ill use foreach
07:19 < geNAZt> well look in my gist
07:19 < ljharb> always use iterators over loops :-)
07:19 < geNAZt> there is a little benchmark for vs forEach
07:19 < beeant> i can see your face
07:20 < beeant> you look handsome
07:20 < beeant> but im not gay
07:20 < jden> hello node people. quick/silly question: can I change the shell's CWD from a node script? for example, could I write cd.js which acts just like bash `cd`?
07:22 < beeant> i just tried the benchmark
07:22 < beeant> so for is best for array
07:22 < beeant> and forEach is best for object
07:22 < beeant> got it
07:22 < geNAZt> well i currently write a jsperf test
07:23 < ljharb> beeant: what, no
07:23 < arnorhs> geNAZt: first of all, in jsperf i'm not getting the same results: http://jsperf.com/looping-through-array-again
07:23 < ljharb> beeant: use forEach on arrays, and Object.keys().forEach on objects.
07:23 < ljharb> beeant: ignore performance tests until you're measuring your own working app
07:24 < beeant> performance is top priority
07:24 < jden> beeant: no, it's not
07:24 < ljharb> it shouldn't be.
07:24 < jden> stop it
07:24 < beeant> what else
07:24 < jden> making shit work
07:24 < ljharb> beeant: how clean and maintainable the code is.
07:24 < jden> christ
07:24 < ljharb> beeant: all of these things will vary in speed by milliseconds for you.
07:24 < beeant> ya thats true
07:24 < ljharb> beeant: write your code in the best possible way first. then measure it. THEN you can optimize.
07:24 < beeant> ok
07:24 < ljharb> but don't ever, ever pick what's fastest unless it's equally clean.
07:25 < jden> write it clean. then write unit tests. them benchmark. then optimize, making sure not to introduce regressions.
07:25 < beeant> for in is evil
07:25 < beeant> thats what google said
07:25 < jden> in practice, i never get beyond step 2
07:25 < ljharb> lol
07:26 < geNAZt> http://jsperf.com/object-iteration-with-object-keys-for
07:26 < arnorhs> geNAZt: second of all.. the function will be optimized out of existence by V8 and most decent js engines .. so I added something to the test to do something
07:27 < geNAZt> arnorhs, which test ?
07:27 < arnorhs> geNAZt: you can't do benchmarks w/o doing anything in the loops
07:27 < arnorhs> this one http://jsperf.com/looping-through-array-again
07:27 < ljharb> geNAZt: lol how many times did you make it to get to "1 op/sec"
07:27 < geNAZt> ljharb: look in setup
07:28 < ningu> for in is not evil
07:28 < ljharb> geNAZt: yes but how many times did you have to play with it to get to that number :-p
07:28 < geNAZt> arnorhs, cann you add a test case ?
07:28 < ljharb> ningu: it's pretty gross
07:28 < ljharb> ningu: it has its uses, but so far, i've only used it in an object keys shim :-p
07:28 < ningu> ljharb: you can break; out of it
07:29 < ljharb> ningu: "break;" is GOTO. come on now.
07:29 < ljharb> if you want to exit an iteration early, use Array#some or Array#every, and return true/false as appropriate
07:29 < Havvy> It's a limited form of GOTO.
07:29 < ljharb> i just hear "goto"
07:29 < geNAZt> arnorhs, https://gist.github.com/geNAZt/5559206
07:29 < arnorhs> brb.. gotta read my wife a hypnobirthing script sorry
07:30 < ningu> Array#some and Array#every are not designed for that case and imo it's rather hard to read when they are used that way
07:30 < beeant> is there any Object.values(obj)?
07:30 < ningu> unless the situation actually corresponds to asking the question: does some/every element meet this test?
07:30 < beeant> similar to keys?
07:30 < jden> depending on your collection size, early/partial return semantics is a legitimate case for implementing your own list processing functions
07:30 < ningu> beeant: no, but there are modules that provide it
07:30 < geNAZt> beeant, why should it ?
07:30 < jden> and by "your own" i mean "beyond what ES5 gives you, but still totally reasonable"
07:31 < beeant> because i want to get the values now
07:31 < ljharb> ningu: true, i agree with that. but it's not that hard to read when you're replacing a forEach with it
07:31 < ningu> like underscore _.values(foo) I believe
07:31 < ningu> or you can just get the values via the keys
07:31 < geNAZt> inside the forEach iterator ?
07:31 < ljharb> Object.keys(foo).map(function (key) { return foo[key]; })
07:31 < ljharb> screw underscore
07:31 < ningu> ljharb: yeah, I'd probably do it that way too
07:31 < ningu> it's a bit annoying that it isn't standard though
07:31 < beeant> underscore makes it better to read
07:32 < beeant> thats what you said, maintainable first
07:32 < beeant> so now im confused
07:32 < ljharb> ningu: i agree. let's push to get Object#forEach and Object#values in ES6 if they're not already :-p
07:33 < ningu> underscore introduces an alternative, nonstandard syntax so some people object to using it occasionally
07:33 < ljharb> ningu: my problem is that underscore is really 2 huge libs packed into one
07:33 < ningu> ljharb: and Object#forEach would be equivalent to for i in object?
07:33 < ljharb> ningu: it's first, an ES5 shim that doesn't shim, which isn't so bad
07:33 < ningu> I've often wished that would just work
07:33 < ljharb> ningu: and second, it's shoving a butt-ton of rails idioms into JS, which are all awful
07:34 < ningu> so what is, say, _.uniq()?
07:34 < ljharb> ningu: Object#forEach would be like Object.keys(foo).forEach, but the iterator would be called with `key, value, obj` or something
07:34 < ningu> ah ok
07:34 < ljharb> ningu: i guess it's a third thing, some extra utility methods
07:34 < ljharb> which aren't so bad either
07:34 < ljharb> but that should be 3 libraries. not one huge one.
07:34 < ningu> well, I usually use underscore for the third thing
07:34 < ningu> if it was just one library I'd use that
07:35 < ningu> I mean just one with only those things
07:35 < ningu> maybe there is a better alternative out there
07:35 < ljharb> right
07:35 < ningu> for example, substack's hashish
07:35 < jden> for posterity, the answer to my earlier question is process.chdir(dir) // (thanks rvagg)
07:36 < ljharb> hm, nice
07:36 < ningu> ljharb: what, hashish?
07:36 < ljharb> yes
07:36 < ningu> yeah, it looks well done
07:36 < ningu> haven't had a case yet that needed it
07:38 < ljharb> if i find one, i'll PR a ton of tests and testling into it :-p
07:43 < ningu> so the ostrich doesn't actually bury its head in the sand... it's all a lie
07:44 < ljharb> ?
07:44 < ningu> not on topic, just something I found out
07:48 < geNAZt> does someone work with forever under windows ?
07:49 < arnorhs> geNAZt: updated your test to do something: http://jsperf.com/object-iteration-with-object-keys-for/2
07:50 < geNAZt> forever start <jsfile> says it has started it, but i dont see it in task list and forever list says no forever process running
07:51 < arnorhs> geNAZt: no idea.. i'm guessing not a lot of people use it on windows
07:52 < geNAZt> http://jsperf.com/object-iteration-with-object-keys-for/3 now with less lag :D
07:52 < beeant> anybody here likes to listen to podcasts?
07:53 < geNAZt> arnorhs, little hint: for(var x = 0, l = arr.length; x < l; x++); the l = arr.length is not needed since it is a static value in javascript
07:53 < beeant> like JS podcasts or node podcasts
07:53 < geNAZt> beeant, if they are done good yes
07:53 < ningu> geNAZt: it isn't a static value. it can change in the middle of the loop.
07:54 < beeant> which podcasts do you listen to
07:54 < ningu> the main one for node is nodeup
07:54 < beeant> i like This Developer's life, the changelog, Javascript jabber
07:54 < beeant> oh
07:54 < beeant> ill look for that
07:55 < arnorhs> geNAZt: since we're talking speed & benchmarking.. the version with the cached length is actually faster: http://jsperf.com/object-iteration-with-object-keys-for/2
07:55 < geNAZt> ningu, but it doesnt get recalculated every time
07:55 < geNAZt> like count(array); in php
07:55 < arnorhs> (update the test, a little annoying that jsperf always saves to the same link for me)
07:56 < ningu> geNAZt: not sure about how v8 optimizes, but if you did arr.pop() each time through it would have to recalculate it
07:56 < ningu> if you mean it only gets reset when the array changes length that makes sense
07:56 < geNAZt> yes if :D
07:57 < geNAZt> does someone use nodemon in here ?
07:57 < ningu> I use as many demons as possible
07:57 < beeant> sorry maybe this kind of rude, but do programmers normally get hemorrhoid for sitting to long
07:58 < geNAZt> well i want a demon service for node which runs on windows and on linux
07:58 < geNAZt> and forever doesnt run on windows
07:58 < arnorhs> beeant: yup
07:58 < narsic> hi, i look for workflow engine with node.js, but i can't any with design system, anyone know about it?
07:58 < Rantanen> geNAZt: Tried supervisor?
07:58 < beeant> oh it sucks
07:59 < arnorhs> narsic: sorry, i'm not familiar with workflow engines.. what is a good example of one?
07:59 < beeant> i think there should be a podcast episode talking about that
07:59 < arnorhs> beeant: you haven't listened to hemerroiddevs.org ?
08:00 < geNAZt> Rantanen, no sorry, i only need a start/stop/list demon service
08:00 < beeant> Oops! Google Chrome could not find hemerroiddevs.org 
08:00 < geNAZt> forever would be the best but it doesnt work on windows
08:00 < arnorhs> beeant: reseve that jewel NOW!
08:00 < narsic> arnorhs: do you see Jira? Jira have a good one (part of system) workflow system
08:00 < beeant> jewel?
08:01 < arnorhs> beeant i mean.. that's a golden nugget of a domain name
08:01 < beeant> oh no
08:01 < beeant> its too long
08:01 < arnorhs> narsic: yeah, i know what that is
08:02 < arnorhs> ok, i see so you're looking for something that works similarly.. so far there aren't a lot of things with actual UI built for node
08:03 < arnorhs> or open source projects in general i guess
08:05 < narsic> i'm 0k if that not open source, but i need them
08:25 < geNAZt> whats the way in node to check if an pid is still running ?
08:28 < ningu> geNAZt: you mean a spawned process, or what?
08:29 < geNAZt> i have pid 123
08:29 < geNAZt> and i want to know if it runs
08:29 < geNAZt> but i saw i can send a kill 0 signal
08:29 < geNAZt> and if the pid isnt there i get an error
08:30 < ningu> hmm
08:30 < ningu> well you could try/catch that
08:30 < ningu> but yeah, I dunno
08:34 < geNAZt> doesnt debug-brk hold the nodejs anymore ?
08:34 < geNAZt> i get this: http://hastebin.com/noyemunete.txt it doesnt stop oO
08:38 < narsic> geNAZt: you can check for pid file exist in /proc
08:39 < geNAZt> narsic, on windows ? lol :D
08:39 < geNAZt> sending a kill 0 signal works fine
08:39 < narsic> geNAZt: l0l :D
08:51 < jnoon> anyone know whats up with these errors? i get them on npm install every so often.  i have PLENTY of ram available :( FATAL ERROR: JS Allocation failed - process out of memory
08:52 < geNAZt> jnoon, well the v8 heap cant allocate more memory
08:53 < leichtgewicht> jnoon: what system?
08:53 < jnoon> geNAZt: is that configurable, or its just built with a max?
08:54 < jnoon> leichtgewicht: just an ec2 m1.large, but i added a 5gb swap temporarily while running npm… the idea is that gives it the 7gb + the 5gb for more than enough memory to do any crazy thing thats happening during npm install.
08:54 < leichtgewicht> jnoon: what system: os/node/ (32/64 bit)
08:54 < geNAZt> jnoon, the heap in v8 is hardcoded to maximum of ~1.8? gb
08:55 < jnoon> leichtgewicht: ubuntu tls 12.04, 64, node 0.10.5
08:56 < leichtgewicht> I assume it doesn't write anything to the npm-debug.log?
08:57 < jnoon> leichtgewicht: nope not that i see
08:57 < jnoon> i basically have to brute force npm install until finally it finishes
09:00 < leichtgewicht> jnoon sounds like a bug to be honest :(
09:01 < jnoon> leichtgewicht: ya it probably is, although it could be one of the modules im using is big.. tzwhere.  anyway, just found this and it looks interesting http://blog.caustik.com/2012/04/11/escape-the-1-4gb-v8-heap-limit-in-node-js/
09:02 < leichtgewicht> if it were just one package (not module?!) then you wouldn't need to do that over and over again.
09:02 < leichtgewicht> (and you would be always stopped at the same place, right?)
09:05 < jnoon> leichtgewicht: ya i guess your right… its not always the same spot, sometimes it runs all the way without issue. 
09:06 < leichtgewicht> maybe having a performance test would be good ...
09:06 < leichtgewicht> memory leak ...
09:06 < leichtgewicht> a  lot of packages?
09:07 < RLa> anyone seen some intelligent image autocropping package for node?
09:07 < ningu> hire a plumber
09:08 < ningu> RLa: there is an npm package for graphicsmagick I believe
09:08 < RLa> trying to find it
09:08 < ningu> but that doesn't sound very intelligent...
09:09 < ningu> not sure what you meant by that
09:10 < RLa> http://www.cardinalpeak.com/blog/wp-content/uploads/2009/11/finch.jpg
09:10 < RLa> bird is in focus, flower in background is not
09:10 < ningu> yeah, not sure what you'd use for that, not really my thing
09:10 < ningu> if gm can do it already...
09:13 < RLa> i do not think that gm can do it
09:15 < leichtgewicht> My npm as forgotten how to install something -g ...
09:15 < leichtgewicht> It finishes without error yet the commands don't appear :(
09:27 < RLa> nice, found this: https://github.com/component/focus
10:09 < RLa> wow, compiling v8 with gcc 4.8 gives lots of warning messages
10:43 < arnorhs> Do you guys know of a module that does encryption/decryption on streams?
10:44 < geNAZt> arnorhs, nodejs crypto
10:44 < arnorhs> you mean core does this already?
10:44 < geNAZt> yes
10:45 < arnorhs> sweet
10:45 < geNAZt> crypto.createCipher => create a stream which plain => encode
10:45 < geNAZt> and crypto.createDecipher => stream for encoded => plain
10:47 < arnorhs> ah, sweet.. cipher is the thing i was looking for, i think
10:47 < arnorhs> thanks
10:48 < Technodrome> without getting into callback hell, isn't async the best way to do multiple sql queries and then return a view? 
10:49 < RLa> it is
10:49 < RLa> you could use promises too
10:49 < Technodrome> this is one thing i don't like about node.js 
10:50 < Technodrome> but i guess overall its worth it 
10:52 < Havvy> Technodrome: The other option is to use a synchronous model. ;)
10:52 < Technodrome> as in switch platforms? 
10:52 < Havvy> Yes.
10:52 < Technodrome> Havvy: i've came to far already! 
10:53 < Technodrome> well in reality, i was just going to do this project in Python
10:53 < Technodrome> its just a web front end nothing super high traffic
10:53 < arnorhs> geNAZt: hm, the createCipher / *Decipher methods seems to use a shared secret.. so there's no way to do a private/public key kind of encryption using RSA or something?
10:55 < rsmartinva> Anyone have some experience with Socket,io?, i've been on their IRC but have answered more questions than have received answers ha
10:55 < geNAZt> you want to encode / decode a stream with private and public keys ?
10:55 < geNAZt> rsmartinva, just ask
10:55 < AAA_awright> arnorhs: What are you trying to do
10:56 < arnorhs> i'm tring to send stuff across an encrypted stream, and decrypt it on the other side
10:57 < arnorhs> let's just say i want to send a text message encrypted through a non-ssl connection
10:57 < AAA_awright> arnorhs: Why "non-ssl"
10:57 < arnorhs> because it's fun
10:57 < AAA_awright> Use TLS, it's called TLS formally
10:58 < AAA_awright> You can do all the same stuff, creating a plaintext and ciphertext streams, and it's known secure
10:58 < rsmartinva> i'm looking to implements some sort of ACL for routes similar to how node_acl middleware works for http requests. I essentially have CRUD resources through socket that i'd like to be able to check permissions for. I have an ACL on my client side but would like to have a server fallback.
10:58 < AAA_awright> arnorhs: Unless it's strictly academic, working with 'crypto' is DANGEROUS
10:59 < arnorhs> strictly academic
10:59 < arnorhs> i just couldn't figure out anything better to do on a friday
11:06 < echoSMILE> is this a nice example of how to use domains? https://github.com/domenic/domains-romance/blob/master/serverWithDomains.js
11:06 < echoSMILE> I want to follow some best practice in this, but I'm not sure about the code I found in the web comparing with node documention.
11:11 < Technodrome> Havvy:  what do you use for server side dev?
11:11 < Havvy> Node.js
11:11 < Havvy> Also use it for IRC scripting.
11:12 < Havvy> Wrote a bot that joined a channel, changed all bans to quiet bans, and then quit yesterday.
11:12 < Technodrome> even for stuff which consist of many sql queries to render a page etc?
11:12 < Havvy> I haven't had need to write any database hitting stuff yet.
11:12 < Havvy> But yes, if I needed to use sql queries to render a page, I would still use node.js
11:14 < Technodrome> Havvy:  ever used vert.x ? 
11:14 < Havvy> No.
11:16 < Technodrome> Havvy: some call it a node.js killer etc
11:16 < AAA_awright> Link?
11:16 < Havvy> It uses multiple languages right?
11:16 < Havvy> Also, it's been around for at least a year.
11:16 < Havvy> And yet hasn't gained much traction in comparison to Node.
11:16 < deoxxa> yeah vert.x is going to kill node.js
11:16 < deoxxa> so much
11:16 < deoxxa> all 5 of its users think it's amazing
11:17 < AAA_awright> Well how old is it
11:17 < Havvy> Vert.x is nice in that it works on multiple languages. But it sucks in that it doesn't have the tooling necessary for good libraries.
11:18 < AAA_awright> And how many users did Node.js have after a year? Like, Ry and Me?
11:18 < Technodrome> deoxxa: just did a quick google and saw many blogs of people saying it
11:18 < Havvy> http://en.wikipedia.org/wiki/Vert.x
11:18 < Technodrome> I never heard of it either
11:18 < deoxxa> Technodrome: let me know how many blogs there are claiming the earth is flat, while you're at it
11:18 < AAA_awright> deoxxa: So you admit it's more than 5?
11:19 < deoxxa> AAA_awright: i admit nothing
11:19 < deoxxa> AAA_awright: also i was clearly being hyperbolic
11:19 < AAA_awright> My point still applies
11:21 < Havvy> VMWare apparently owns it.
11:22 < Havvy> And the actual maintainer and founder basically had it taken from him when he left VMWare.
11:22 < Havvy> So given the mismanagement at the top levels, I can't see a thriving community coming out of it anytime soon.
11:37 < arnorhs> is there a good guide out there on using/abusing streams? the ones I find mostly use 'data' events which seems to be outdated in the latest docs
11:38 < geNAZt> arnorhs, you can ask us if want something to know
11:38 < geNAZt> but i dont know any new streams2 tutorials sorry
11:38 < AAA_awright> arnorhs: That's a useful pattern
11:38 < AAA_awright> Not outdated
11:55 < peterschmidler> I got an authentication middleware that checks if a user is logged in. I would like to pass a variable with next() to my route. How's this done?
11:56 < geNAZt> peterschmidler, you cant
11:57 < geNAZt> since next isnt a transport for data
11:57 < gildean> peterschmidler: use the res.locals object
11:58 < gildean> peterschmidler: just set something to a value of the res.locals object and it'll be usable later in the route, but will only exist in the current req-res-chain
11:58 < peterschmidler> gildean: Thanks
11:59 < peterschmidler> gildean: like res.locals.authenticated = true ?
11:59 < gildean> for example
11:59 < peterschmidler> gildean: Cool.
12:00 < gildean> but it can hold any values, so for example passing on the users information after the authentication could be a good idea
12:00 < peterschmidler> gildean: Indeed
12:01 < gildean> res.locals.user = user and then later in the route you could for example read the username from res.locals.user.username
12:01 < gildean> or something
12:08 < onr> deoxxa: who's maintaining vertx?
12:08 < AAA_awright> Using routes for authentication doesn't seem very sound
12:08 < deoxxa> onr: i've got no idea - i've never used it or looked into it
12:09 < onr> deoxxa: https://groups.google.com/forum/?fromgroups=#!topic/vertx/gnpGSxX7PzI
12:09 < gildean> AAA_awright: not routes, a middleware
12:09 < AAA_awright> Nonetheless
12:09 < AAA_awright> peterschmidler: Merely being authenticated as a certain user isn't enough to determine they have authorization to do something. For example, you must never allow non-safe (read-write) operations from a Cookie or other header that is automatically submitted with each request.
12:10 < AAA_awright> So you'll need to enter that information, too
12:11 < wildex999> When I receive a data event on a socket with a buffer object, will the buffer objects length always be equal to the amount of data received?
12:11 < peterschmidler> AAA_awright: If I read the uuid from the cookie and later in the route check if the user has the right to view the content that's unsafe?
12:12 < geNAZt> wildex999, no
12:12 < AAA_awright> peterschmidler: Viewing content with a cookie is ok, editing it is not
12:12 < wildex999> Then what is the best way to find out how much data is in the event? =/
12:12 < geNAZt> in one event cycle the buffer has a length
12:12 < geNAZt> but its the length of the chunk
12:12 < peterschmidler> AAA_awright: How to do editng safely, then?
12:12 < geNAZt> not of the read data from the socket
12:14 < AAA_awright> peterschmidler: Read up on CSRF attacks, it's a tricky and inconvienent attack to mitigate.
12:14 < AAA_awright> peterschmidler: Also make sure you protect your session ids like you protect passwords, like passwords they grant authorization to actions, so you shouldn't store them on your server in plaintext
12:14 < geNAZt> can someone throw an eye on this one: https://github.com/geNAZt/gPloy
12:15 < AAA_awright> peterschmidler: Almost certainly, mitigating CSRF means including a hidden field in a form, and edit requests are authenticated with that instead of any cookie
12:15 < gildean> peterschmidler: i'm presuming you're using express, just add express.csrf to your middlewares and add the csrf token to the viewed page to be sent back on post-reqs
12:16 < peterschmidler> gildean: Also on the login post-req?
12:16 < peterschmidler> That makes no sense, right? ;)
12:19 < gildean> peterschmidler: i usually add it to the login page, it's linked to the session automagically, so it doesn't matter
12:19 < AAA_awright> Logging in is a safe action because it doesn't act on publically-accessible resources
12:19 < AAA_awright> So no, you don't need it on a login form
12:20 < gildean> the main reason i have it on a login page is because it's easier to add it there than to make some route-handler on the csrf-middleware
12:20 < gildean> so i just let the csrf-middleware check all reqs and not worry about it
12:20 < AAA_awright> (I mean, any resources viewable to any third party, not publically accessible ones)
12:20 < peterschmidler> gildean: AAA_awright: So I add a hidden form field containing the token to each page? How?
12:20 < gildean> somewhat lazy, but meh.
12:22 < gildean> peterschmidler: res.locals.csrf = req.session._csrf and then in a template just add an input with type="hidden" and value="#{csrf}"
12:22 < gildean> peterschmidler: did you look at the docs for express csrf?
12:22 < peterschmidler> gildean: I will.
12:22 < peterschmidler> Thanks
12:22 < gildean> http://expressjs.com/api.html#csrf
12:23 < peterschmidler> Another security issue: Do I still need hashed and salted cookie uuids with csrf? And do I steel need SSL? 
12:26 < peterschmidler> gildean: res.locals.csrf = req.session._csrf belongs to the post route, right?
12:27 < gildean> peterschmidler: no, that should be a middleware of its own that gets called on each req that returns a view of some sort, so you can have it readily available
12:28 < peterschmidler> gildean: For example in the auth middleware, when I detect a uuid in the cookie?
12:30 < gildean> peterschmidler: i usually have done something like this: http://pasted.herokuapp.com/guest/270dd7941b.js
12:30 < gildean> as a module of its own that gets added to the middleware stack
12:31 < gildean> the user in that would be added at an earlier point
12:32 < peterschmidler> gildean: What about this? http://pasted.herokuapp.com/guest/9004ea4fc1.js
12:33 < gildean> peterschmidler: looks fine
12:33 < peterschmidler> thx
12:35 < peterschmidler> gildean: Then in my editing post route I need to validate the token, right? like if (res.locals.csrf == req.session._csrf) ...
12:38 < gildean> peterschmidler: nope, the csrf middleware makes sure that the csrf token posted (you need to post it as '_csrf') is correct for the session used
12:38 < geNAZt> has someone used spawned nodejs in node ?
12:38 < geNAZt> because if i exit the parent on windows the child doesnt get killed
12:39 < geNAZt> and if i do process.on('exit', function() { child.kill(); }); in the parent nothing happens
12:40 < peterschmidler> gildean: What happens if it ain't right?
12:41 < gildean> peterschmidler: then the server returns iirc status 403 and an error-string like "forbidden" or something
12:41 < peterschmidler> gildean: Allright, thanks.
12:42 < peterschmidler> gildean: What about SSL?
12:51 < gildean> peterschmidler: you should always use ssl if possible
12:51 < gildean> peterschmidler: but that only requires for you to change the http-server to a https server
12:52 < peterschmidler> gildean: So it's easy to switch to ssl at any time in the dev process?
12:52 < gildean> yes, especially if you're attaching the express instance to a http-server you create separately
12:53 < peterschmidler> gildean: How does it affect my node.js code?
12:53 < gildean> as in: var express = require('express'); var app = express(); var server = http.createServer(app).listen(8000);
12:54 < gildean> then you'd just switch the http.createServer to https.createServer and add the certs as an argument, per the node core docs
12:58 < peterschmidler> gildean: How do I start the app in your example after server = http.createServer(app).listen(port); (I had app.listen(port) as the last line of my server.js)?
13:00 < gildean> you could just leave the .listen part out and the in the end call "server.listen(port)"
13:01 < peterschmidler> gildean: I get an error: ReferenceError: http is not defined
13:01 < gildean> peterschmidler: require('http')
13:01 < gildean> sorry, i left that out from the example
13:02 < peterschmidler> gildean: ah
13:02 < gildean> you could say var http = require('http'); or just var server = require('http').createServer(app);
13:08 < peterschmidler> gildean: How would I implement my certificate?
13:12 < peterschmidler> When using csrf, how can I prevent the 
13:12 < peterschmidler> Error: Forbidden
13:12 < peterschmidler>     at Object.exports.error….
13:12 < peterschmidler> Iif there's no token. Doesn't it reveal to much about my system?
13:15 < gildean> peterschmidler: use a error-handling middleware, something like: app.use(function (err, req, res, next) { res.send((err.status || 500), err.message); });
13:15 < gildean> peterschmidler: you can read more about the error-handling in the express docs
13:16 < peterschmidler> gildean: ok
13:16 < gildean> but if you set that below all your other routes, it'll handle all errors passed to next()
13:16 < gildean> which is what the csrf-middleware does too
13:21 < peterschmidler> Now I am getting 'Error: Forbidden' in my post-login-route even though I placed 'res.locals.token = req.session._csrf' in my get-login-route and 'input(type='hidden', value='#{token}')' in my jade template. Why's that?
13:22 < gildean> peterschmidler: i put together a simplified example which uses csrf and has a view with both a correct and an incorrect form: https://gist.github.com/gildean/5559948
13:22 < peterschmidler> gildean: ^
13:23 < peterschmidler> gildean: Great, thanks!
13:26 < gildean> peterschmidler: you're missing the name of the hidden input, it has to have name="_csrf"
13:27 < peterschmidler> gildean: I just found that out, too. Thanks a lot for your help! I'm having some lunch now. C-ya.
13:27 < gildean> np
13:50 < niix> Should I be having to sudo with every npm install?
13:50 < onr> only for global packages
13:51 < niix> onr: it seems my nom fails every time I try to do npm install
13:51 < niix> unless I sudo
13:51 < deoxxa> niix: your install is broken
13:51 < onr> niix: you probably sudo npm install before
13:52 < niix> deoxxa: word, is the solution to reinstall npm?
13:52 < onr> now your account can't write to npm's files
13:52 < deoxxa> niix: you probably just need to nuke ~/.npm (or move it to the side and test)
13:52 < onr> remove .npm folder
13:52 < onr> or yeah, create a new directory, try there
13:54 < niix> I just did a move
13:54 < niix> should I recreate ~/.npm now?
13:54 < deoxxa> niix: it should be created when you use npm
13:55 < niix> deoxxa: ok, how do I ensure that it's correct now when using it?
13:55 < onr> try using it
13:55 < deoxxa> niix: just try installing something without sudo, see if it works
13:55 < niix> ok
13:55 < niix> seemed to have work
13:55 < deoxxa> sweet
13:55 < deoxxa> another satisfied customer
13:56 < niix> thanks ;)
13:56  * deoxxa validates niix's parking stub
13:57 < niix> does npm install everything into the ~/.npm dir as well?
13:57 < deoxxa> nope
13:57 < deoxxa> npm will, by default, install to ./node_modules
13:57 < niix> so for example
13:57 < niix> I'm on my desktop
13:57 < niix> npm install socket.io
13:57 < niix> it will install to there
13:57 < deoxxa> for global stuff (i.e. npm install -g ...), it'll go to (probably) /usr/local/lib/node_modules/
13:58 < niix> it seems to have written to the ~/.npm dir as well :|
13:58 < deoxxa> it caches stuff to there
13:58 < deoxxa> but that's not where it's actually installed
13:59 < niix> symlink
13:59 < deoxxa> nope
13:59 < deoxxa> just cached tarballs and stuff
13:59 < niix> ok
14:01 < beeant> is event emitter and promises the same?
14:01 < deoxxa> beeant: no
14:01 < deoxxa> !next
14:01 < geNAZt> deoxxa :D
14:01 < beeant> callback hell can be solved by implementing promise?
14:02 < geNAZt> can
14:02 < geNAZt> but it also can be solved with async control flow
14:02 < geNAZt> or without all these
14:02 < beeant> which one is bettery
14:02 < geNAZt> http://callbackhell.com/
14:02 < beeant> async control or promise
14:02 < geNAZt> async control *hides*
14:02 < geNAZt> promises are shit :D
14:03 < beeant> im listening to a podcast talking about promise
14:03 < deoxxa> beeant: they'll all get the job done, and it's mostly up to you as to which you choose. if you go with regular async control though, it's a lot easier to integrate with other code, since most other code uses normal callbacks.
14:03 < beeant> is there any good simple example explaining what promises is
14:26 < RLa> damn, node-canvas is badly leaking memory?
14:27 < tuhoojabotti> hardly
14:27 < tuhoojabotti> :P
14:30 < squeakytoy> just released 1.0 of his async framework - https://npmjs.org/package/squeaky
14:30 < squeakytoy> time to get drunk!
14:31 < RLa> nice
14:31 < squeakytoy> its thanks to geNAZt 
14:31 < geNAZt> first thing
14:31 < geNAZt> NEVER include node_modules
14:31 < geNAZt> NEVER !!!
14:31 < squeakytoy> he told me i shouldn't suck, so i wrote an awesome framework
14:32 < squeakytoy> geNAZt, :( should that be excluded when publish to npm?
14:32 < geNAZt> yes
14:32 < geNAZt> and even on github
14:32 < SomeoneWeird> never checkin node_modules
14:32 < squeakytoy> i can add gitignore for github, but how do i put ignore on npm publish
14:33 < geNAZt> delete before publish
14:33 < adrianlang1> squeakytoy: What‘s about async? Why don’t you just use that?
14:33 < geNAZt> adrianlang1, he doesnt like it :D
14:33 < geNAZt> https://github.com/corgrath/npm-squeaky/blob/master/squeaky.js#L22
14:33 < geNAZt> throwing strings around ? oO
14:34 < deoxxa> you'll take an eye out like that
14:34 < RLa> time to try if it leeks again
14:34 < SomeoneWeird> wat
14:35 < squeakytoy> adrianlang1, not as cool
14:35 < squeakytoy> geNAZt, whats wrong with throwing Strings?
14:36 < geNAZt> no stacktrace =
14:36 < geNAZt> ?
14:36 < squeakytoy> you dont get a stacktrace?
14:36 < geNAZt> no one typing error objects ?
14:36 < geNAZt> no
14:36 < geNAZt> not from strings
14:36 < squeakytoy> really? in js?
14:36 < ManneW> Hi! I'm looking for alternatives to cookie session storage (like session handling through header parsing or something), but that still integrate nicely with Express. Anyone with ideas? :)
14:37 < RLa> nice, it's not leaking again
14:37 < geNAZt> and if i catch your "errors" i have to do typeof err === "string" 
14:37 < squeakytoy> geNAZt, gonna try your statement
14:37 < RLa> damn leak-prone closures
14:37 < RLa> native objects are refcounted?
14:38 < geNAZt> when allocated out of v8 yes
14:41 < squeakytoy> geNAZt, oh, wow
14:41 < squeakytoy> geNAZt, if i return an Error i get a stacktrace, but not when a String
14:41 < beeant> in passportjs, it stores a user object from the database to req.user
14:42 < beeant> is this req.user synchronize along the way with the database?
14:42 < beeant> like what if i update the user data ?
14:42 < geNAZt> no it isnt
14:42 < beeant> will it automatically updates the req.user
14:42 < beeant> oh
14:42 < beeant> ok
14:42 < beeant> so i have to refresh it
14:42 < RLa> when it deserializes it
14:43 < RLa> it expects serialize/deserialize functions
14:43 < beeant> so what is the best way to update it?
14:44 < beeant> just call the serializeUser function?
14:44 < beeant> i mean deserialize?
14:44 < beeant> for example
14:44 < geNAZt> weel you shouldnt call it manually
14:44 < beeant> updateUser -> username = 'aa';
14:45 < echo|> ^^ It'll get called, you just define it and be sure to call the callback inside of it.
14:45 < beeant> passport.deserialize(req.user.id)
14:45 < squeakytoy> geNAZt, ive done the changes, thanks for the feedback
14:45 < beeant> so how to do it
14:45 < squeakytoy> geNAZt, ill never throw Strings again, if it prevents stacktraces, wow.
14:45 < geNAZt> np
14:45 < squeakytoy> geNAZt, really good 2 know
14:45 < geNAZt> btw. today my deployment server version 1 comes out :D
14:45 < beeant> ill browse passport docs
14:50 < beeant> i cant find it in the docs
14:50 < beeant> im thinking to re-login the user but without redirect
14:51 < beeant> it doesnt seem to have that too
14:52 < squeakytoy> adrianlang1, i think async is too overkill
14:59 < echo|> beeant: Are you integrating it with Express? 
14:59 < beeant> yes
14:59 < beeant> i'm about to open an issue on github regarding this. I think this is kind of an important feature don't you think?
15:00 < echo|> The req.user object is stored in the session, which is controlled by express.
15:00 < beeant> so i can just do req.user = newUpdatedUser
15:00 < beeant> ?
15:00 < beeant> is it safe?
15:09 < RLa> hm, sped up my image crop code 20x
15:10 < beeant> i searched on google for req.user
15:10 < beeant> and this came up
15:10 < beeant> https://groups.google.com/forum/?fromgroups=#!topic/passportjs/nl_OVNlmWcM
15:10 < beeant> on the top result
15:11 < beeant> i guess google reads my mind
15:11 < RLa> before i was turning images into base64 encoded string between my processing steps :/
15:11 < beeant> it says it will have the latest info
15:11 < beeant> ill try
15:13 < RLa> beeant, have you read the guide: http://passportjs.org/guide
15:13 < beeant> not really i just read the code part
15:13 < beeant> ill read now
15:14 < slicky>  beeant, if you're just using express and not passport, setting req.user is as safe as you make it
15:15 < slicky> and yes, you can set req.user however you see fit if you're simply just using express
15:15 < beeant> oh, but this says https://groups.google.com/forum/?fromgroups=#!topic/passportjs/nl_OVNlmWcM
15:15 < beeant> it will automatically update the req.user after refreshing the page
15:15 < slicky> if you're using passport, ignore everything I said
15:15 < slicky> :D
15:15 < beeant> according to my understanding
15:15 < slicky> never used it
15:16 < beeant> oh
15:16 < beeant> im using passport and express
15:16 < beeant> both
15:16 < slicky> yeah i just read up :D
15:16 < slicky> ignore me
15:16 < beeant> ok
15:16 < beeant> thanks though
15:19 < RLa> slicky, beeant isn't it taxing db when you have to load it for each request?
15:19 < beeant> ya, but thats what it says
15:19 < beeant> im trying if its true or not right now
15:20 < beeant> so im continuing coding
15:25 < slicky> RLa, in my experience, no. We don't grab the whole user on ever request. We store some of it in the session object for the logged in user, which is stored in memory with redis
15:25 < slicky> but even before we transferred some of the store to redis, it didn't create any real impact even with quite a few users.
15:25 < RLa> hm
15:26 < slicky> then again, we are very good about offloading request to cookieless subdomains for things like images and scripts
15:26 < slicky> so the user request hit doesn't happen for anything but the page requested and maybe a secure script or two
15:27 < echo|> I'm also using the redis session store. However, it's true that if you have db calls in deserializeUser(), it's going to hit the db every session'ed pageload.
15:27 < slicky> We don't use passport, if that's what you're talking about echo|
15:28 < swords> I have something really strange. I make a lot of http requests to sites and they all work. Accept one. They are all equal and the one that does not work does work in the browser and with curl. Tried it with 0.8.23 and 10.5, both fail. 
15:28 < swords> require('http').get('http://gps.buienradar.nl/getrr.php?lat=52&lon=4', function(data) {}).on('error', function(e) {console.log(e.message);});
15:28 < echo|> And if you store data from the db in the session, and that data is updated, the user would have to re-log each time to get the updated data into the session without using deserializeUser.
15:31 < RLa> damn, why some packages use node_modules directory directly
15:31 < Rantanen> RLa: Which way around do you mean?
15:32 < echo|> swords: Did you try setting the useragent to curl or a browser? Someone was having a similar issue with dropbox acting differently due to the useragent.
15:32 < deoxxa> RLa: like require("./node_modules/...") ?
15:32 < swords> echo|: I've tried it with my browsers useragent and accept headers. Same error
15:32 < Rantanen> deoxxa: That would hardly be a problem. "../../node_modules/..." however would.
15:32 < txdv> do you guys now of a good html escaping lib?
15:32 < RLa> deoxxa, almost, except it looks for some xml files
15:33 < deoxxa> Rantanen: ha
15:33 < kenperkins> can you use npm to install a specific version of a package to a specific name?
15:33 < kenperkins> i.e. npm install foo@bar@0.6.5 or something
15:33 < RLa> deoxxa, but i needed patched version of that package which i added directly as my own project dep
15:33 < RLa> so those files are in the wrong node_modules directory
15:33 < Rantanen> kenperkins: Isn't the way to specify version is foo=0.6.5?
15:34 < Rantanen> Not that I know anything. Just crashed into that syntax yesterday. :p
15:34 < kenperkins> according to docs:    npm install <name>@<version>
15:34 < Rantanen> Ah
15:34 < echo|> npm install <name>@<version>, for a specific version. But, I don't see a method to specify your own custom name for it.
15:34 < kenperkins> echo|: me either :S
15:34 < swords> echo|: It doesn't just behave differently, I get ECONNREFUSED, both on IP and DNS, which is really strange
15:34 < kenperkins> is ok
15:37 < echo|> swords: That's really weird. Your curl attempts are also being performed from the same machine as the node process?
15:37 < swords> echo|: on the same terminal
15:37 < slicky> i can completely reproduce swords's problem on my end
15:37 < slicky> even changing the user agent doesn't help
15:38 < swords> slicky: Thanks for trying!
15:38 < slicky> oh
15:38 < slicky> i see what's going on
15:38 < slicky> curl moves down the DNS chain
15:39 < slicky> * About to connect() to gps.buienradar.nl port 80 (#0)
15:39 < slicky> *   Trying 82.94.174.33... Connection refused
15:39 < slicky> *   Trying 82.94.174.143... connected
15:39 < slicky> node does not follow the dns chain after the first IP's connection is refused
15:39 < echo|> Ahhh, and we can assume the browser would too.
15:40 < swords> slicky: Great find! Hmm, I'm not sure how to mimic that behaviour with node.
15:40 < swords> Using that second ip is probably a bad idea (if it changes...)
15:40 < slicky> you can query the dns with node
15:41 < jaha> anyone know any good free/cheap online image/graphics editor with an open api?
15:41 < slicky> and then turn it into a chain that tries each one until it either runs out of possibilities
15:41 < slicky> or connects 
15:41 < slicky> jaha imagemagick? gd?
15:41 < jaha> slicky: sry, i meant GUI based html5 app or flash
15:42 < swords> Wouldn't it be a nice feature request for the node.js dns module?
15:42 < Rantanen> Think http module should do it by default - or at least with some option.
15:42 < jaha> pixlr is close to what im looking at but a bit complicated, just thought id ask here
15:43 < echo|> Probably be better to implement in http, instead of the DNS module
15:43 < swords> echo|: Yeah it's already in the dns module
15:43 < swords> I think http uses resolve which gives only the first
15:44 < swords> resolve=lookup
15:45 < slicky> it would be pretty trivial to a) write your own implementation until b) you write a bug/feature request to the dev team and get a response
15:45 < slicky> :)
15:48 < swords> slicky: I'm doing it as we speak ;) 11 May 17:47:43 - lookup: '82.94.174.33', 11 May 17:47:43 - resolve4: [ '82.94.174.143',  '82.94.174.33',  [length]: 2 ]
15:52 < geNAZt> My Deployment Server: https://npmjs.org/package/gploy - tada :D
15:55 < merpnderp> What is the best library to replace Mongoose if a PostgresSQL db is required?
15:58 < swords> slicky: What do you think about ipv4 and ipv6. Should it use both? And in which sequence?
15:59 < ArxPoetica> stats.isSymbolicLink() <— if it IS a symbolic link, fs.readdirSync doesn't seem happy
15:59 < ArxPoetica> can one read a symlink?
16:01 < swords> https://github.com/joyent/node/blob/master/lib/net.js#L862
16:06 < ArxPoetica> is it possible to read a symlink directory?
16:06 < ArxPoetica> fs.readdirSync <— doesn't seem happy
16:09 < RLa> lol, opencv fails completely for face detection
16:09 < ArxPoetica> I suppose it would depend on where the directory is.
16:09 < ArxPoetica> the realpath that is
16:12 < mscdex> RLa: it probably doesn't know about face detection out of the box
16:12 < RLa> i'm using the example that comes with the code
16:14 < echo|> Aww :( I saw it awhile back and threw it in my 'Stuff to jack with' list when I have nothing to do.
16:17 < RLa> oh, seems like it works, but only with mona lisa picture
16:17 < swords> echo and slicky: I'm still having issues. If I connect to the hostname with curl it works, but if I connect to the ip I get a 404
16:18 < RLa> hm, looks like image width must be exactly 500px
16:18 < echo|> swords: If you connect using the IP directly, you have to specify a host header so the server knows which vhost to direct you to.
16:21 < swords> echo|: Thanks, curl --verbose --header 'Host:gps.buienradar.nl' http://82.94.174.143/getrr.php?lat=52 works
16:21 < ArxPoetica> anyone have an answer on the symlink question?
16:22 < foofoobar> Hi. I'm using express.js to create a small site. Now I want to make am XMLRPC call to a local service and get some data. The client should be initialized in my app.js. How can I use this client variable in a different required file now (var routes = require('./routes').
16:39 -!- mode/#Node.js [+o xyxne] by ChanServ
16:40 < ArxPoetica> btw — figured out my problems
16:40 < ArxPoetica> symlinks read just deliciously
16:42 < echo|> foofoobar: ./routes could be passed the client object in either the require, the config, or the function being loaded from the require.
16:44 < beeant> how can i convert javascript date to Y-m-d H:i:s
16:44 < beeant> is there any npm for that?
16:46 < echo|> beeant: The date function can be told the requested format. But, for a high level abstracted module that does it for you, I'd recommend moment.js
16:46 < beeant> i only use it for this format
16:46 < beeant> mysql timestamp
16:46 < beeant> if i use npm for this, im thinking its too much
16:46 < iig> beeant: date.toJSON() and replacing unneeded chars. that's the simplest way
16:48 < beeant> >> var aa = new Date(); aa.toJSON();
16:48 < purr> beeant: (string) '2013-05-11T16:48:13.184Z'
16:48 < beeant> so i gotta replace the T and the millisecs?
16:49 < iig> beeant: use regex
16:50 < beeant> do you have the snippet?
16:50 < geNAZt> beeant, http://momentjs.com/
16:51 < beeant> momentjs is only 5kb
16:51 < iig> beeant: .replace(/(.*?)T(\d{2}:\d{2}:\d{2}).*/, "$1 $2")
16:52 < beeant> oh ok
16:52 < beeant> >> var aa = new Date(); aa.toJSON().replace(/(.*?)T(\d{2}:\d{2}:\d{2}).*/, "$1 $2");
16:52 < purr> beeant: (string) '2013-05-11 16:52:06'
16:52 < beeant> nice
16:52 < beeant> what does the T mean anyway?
16:52 < beeant> time?
16:53 < geNAZt> beeant, http://en.wikipedia.org/wiki/ISO_8601
16:54 < beeant> ok
16:55 < geNAZt> the T is the spliiter between date and time
16:55 < geNAZt> the Z is the date format (in this case UTC Timezoned)
16:56 < beeant> oh, so it will always be T
16:56 < geNAZt> no :D
16:56 < beeant> so that regex is not safe
16:56 < geNAZt> it can also be 2007-08-31T16:47+00:00
16:57 < geNAZt> or even: P3Y6M4DT12H30M17S
16:57 < beeant> so it's better to use moment.js then?
16:58 < beeant> to avoid this complication
16:58 < geNAZt> well it depends
16:58 < geNAZt> if you are on only one engine the behavior is likley the same
16:58 < geNAZt> and if you dont want to change the format 
16:58 < geNAZt> its ok
16:58 < iig> beeant: i'd suggest test it in browsers first to see if it won't work
16:59 < beeant> i will change the node timezone
16:59 < beeant> maybe it will change the format
16:59 < beeant> i will use the server timezone
17:00 < geNAZt> you cant change the timezone of v8 or ?
17:00 < beeant> http://stackoverflow.com/questions/8083410/how-to-set-default-timezone-in-node-js
17:00 < beeant> it says theres a bug
17:01 < beeant> it seems like it wont be fixed
17:01 < beeant> https://github.com/joyent/node/issues/3286
17:02 < iig> beeant: if you're going to work with timezones you may find this module useful - https://github.com/mde/timezone-js
17:03 < beeant> oh this seems nice
17:04 < beeant> because my data in mysql was from PHP that uses timezone
17:04 < robinson1k> hi
17:26 < geNAZt> little question: what do you await from a deploment server ?
17:26 < geNAZt> deployment*
17:36 < peterschmidler> What's the difference between app.configure(function() {app.set('views', sourceDir);}) and plain app.set('views', sourceDir);?
17:36 < geNAZt> peterschmidler, you can setup different enviroments
17:36 < peterschmidler> geNAZt: What for?
17:38 < geNAZt> development mode, production mode, maintiance mode
17:38 < geNAZt> such things
17:38 < iig> peterschmidler:  app.configure is rather deprecated. see http://expressjs.com/api.html#app.configure
17:39 < geNAZt> does it have another env loader ?
17:39 < peterschmidler> lig, geNAZt: Thx
17:40 < robinson_k> geNAZt: app.get('env')
17:40 < geNAZt> yes but you can load in 2 envs
17:40 < geNAZt> and switch them
17:41 < geNAZt> this has allowed me to hot switch configurations
17:41 < geNAZt> for example
17:41 < beeant-macbook> oh, so in nodejs the Date timezone is automatically set to the server timezone
17:41 < robinson_k> geNAZt: i would use a plain middleware
17:42 < geNAZt> robinson_k, for env switching ?
17:42 < geNAZt> beeant-macbook, correct
17:42 < beeant-macbook> thanks!
17:42 < geNAZt> beeant-macbook, thats why momentjs are there
17:43 < beeant-macbook> yes, so ill just use moment js
17:43 < geNAZt> for manipulation of date stamps
17:43 < beeant-macbook> to format
17:43 < beeant-macbook> yes
17:43 < vampirefrog> hi guys. I'm gonna ask here, since nobody in #express seems to be answering. Where in express JS is the cookieSession code? I'm trying to specify a store for it, or retrieve its own store.
17:44 < beeant-macbook> now its so much easier
17:44 < beeant-macbook> in app.js?
17:45 < geNAZt> vampirefrog, this is the normal session store which connect/expressjs uses :
17:45 < geNAZt> https://github.com/senchalabs/connect/blob/master/lib/middleware/session/memory.js
17:46 < vampirefrog> geNAZt, now how do I get the instance in my code?
18:01 < samdutton_> test
18:31 -!- ServerMode/#Node.js [+o xyxne] by holmes.freenode.net
18:34 -!- ServerMode/#Node.js [+o trevnorris] by holmes.freenode.net
18:36 < owen1> does anyone know how to generate api docs like this - http://friends.diy.org/developers ?
18:36 < owen1> it was mentioned in the recent http://nodeup.com/ 
18:43 < beeant-macbook> in node is it ok to use switch case without break
18:43 < beeant-macbook> i want it to act like or | and
18:44 < astropirate> beeant-macbook, should be 
18:44 < beeant-macbook> but lint tells me Expected a 'break' statement before 'case'
18:44 < ljharb> beeant-macbook: it's ok, but it's considered a bad practice
18:44 < astropirate> holy shit
18:44 < beeant-macbook> why is it
18:44 < ljharb> beeant-macbook: personally i hate switch statements - it's much cleaner to use if/else or a hash lookup
18:44 < beeant-macbook> watch your mouth!
18:44 < beeant-macbook> shit is a bad word
18:45 < ljharb> beeant-macbook: because case fallthrough can cause subtle bugs that are hard to figure out.
18:45 < beeant-macbook> its like so many ifs
18:45 < ljharb> beeant-macbook: what exactly are you doing?
18:45 < astropirate> yes ma'am :(
18:45 < ljharb> like what are you selecting, and what do you do in each case
18:45 < beeant-macbook> difficult to explain
18:45 < ljharb> that's the first indicator that you're trying to do something too complex :-p
18:45 < ljharb> show me some example code, and i'll rewrite it to be clearer and more concise without a switch statement
18:46 < beeant-macbook> not too complex
18:46 < beeant-macbook> but i just feel that its easier to write it this way
18:46 < ljharb> that's not important
18:46 < ljharb> easier to read and maintain is what matters.
18:46 < beeant-macbook> its like writting or for 3 cases using same variable indicator
18:46 < ljharb> you write it once. you read it and tweak it thousands of time.
18:46 < ljharb> *times
18:46 < ljharb> seriously, show me some code
18:46 < ljharb> i'll fix it for you
18:48 < beeant-macbook> https://gist.github.com/anonymous/15ec905a703ae0c061b3
18:48 < ljharb> that's two things combined into one, but i'll fix it, one sec.
18:49 < beeant-macbook> its a result of bad database in early stages
18:49 < beeant-macbook> i have data column that stores capitalized word
18:49 < ljharb> there, just commented it.
18:50 -!- ServerMode/#Node.js [+o xyxne] by holmes.freenode.net
18:50 < ljharb> that's 7 lines to your 12, it's less of a diff when you want to make changes, and it's way cleaner.
18:51 < vampirefrog> has anybody had success in proxying websocket requests with apache? I mean I got the http calls proxying with mod_proxy, but the websockets are not working
18:53 < beeant-macbook> thank you!
18:53 < ljharb> np
18:53 < beeant-macbook> your code just made me realize that my programming logic skill needs some more improvements
18:53 < beeant-macbook> shit
18:53 < ljharb> i've never (yet) seen a use case in JS where a switch statement was the cleanest choice.
18:53 < ljharb> i'm sure they're out there, but it's so rare that switch should be the last resort, not the first.
18:54 < jaha> ljharb: can you share that code? im just curoisu to what you did
18:54 < beeant-macbook> the whole code?
18:54 < ljharb> it's a comment on the gist jaha 
18:54 < ljharb> https://gist.github.com/anonymous/15ec905a703ae0c061b3
18:55 < jaha> ah...
18:55 < beeant-macbook> its a long function
18:55 < beeant-macbook> im directly porting a legacy code from php to node, with less refactoring
18:56 < beeant-macbook> and its still undone
18:56 < beeant-macbook> ill send it to you after im done
18:56 < beeant-macbook> maybe 5 min
18:57 < ljharb> that's usually also a bad idea :-)
18:57 < ljharb> direct ports, i mean.
18:57 < ljharb> also in php, i avoid switch statements, fwiw.
19:00 < beeant-macbook> is js object key case insensitive?
19:00 < beeant-macbook> because the vocabulary can also be Vocabulary
19:01 < beeant-macbook> so i just put 		tables.vocabulary = tables.Vocabulary;  if its case sensitive
19:01 < ljharb> no, it's case sensitive.
19:01 < geNAZt> >> var j = { test:"1" }; j.TEST;
19:01 < purr> geNAZt: undefined
19:01 < ljharb> also you could just type.toLowerCase() and treat them all lowercase if you wanted
19:02 < beeant-macbook> yes its undefined
19:02 < beeant-macbook> in your code
19:02 < beeant-macbook> what will happen to the jtoe
19:03 < ljharb> it will be lowercased to the same thing?
19:03 < beeant-macbook> i will just change default to weakvocab
19:04 < ljharb> it's a default value, not a default key btw
19:04 < ljharb> but k
19:04 < owen1> what's wrong with mocking? according to the nodeup guys it's a stupid idea. not sure if i understand why.
19:04 < beeant-macbook> so i dont need to add tables.vocabulary = tables.Vocabulary too
19:04 < ljharb> beeant-macbook: not if you lowercase it, no
19:04 < ljharb> owen1: there's different schools of thought on it.
19:05 < ljharb> owen1: if you're testing function A, that calls B and C - you could test A by just calling A, and not caring who it calls. or you could mock B and C (which are tested separately in both cases), and then you're testing the part of A that's not B and C
19:06 < owen1> currently i put all my dependencies in config/developent.js and my app is loading config.test.js on my test environment. so i don't hit the real dependencies on my unit tests.
19:10 < beeant-macbook> this is the code https://gist.github.com/beeant/5561031
19:10 < beeant-macbook> its a bad code and i havent test it
19:10 < foofoobar> Hi. How do I handle global variables in a node.js project? app.'s should declare a var client; and I want to use this variable in a required file (./routes.js)
19:10 < beeant-macbook> please dont laugh at me
19:10 < ljharb> foofoobar: don't do that. make routes return a function, and call that function passing in `client`
19:10 < owen1> ljharb: thanks. what's your approach for mocking?
19:11 < beeant-macbook> i pass too many variables
19:11 < ljharb> owen1: i usually do stub out things after i'm confident they're fully tested
19:11 < owen1> ljharb: got it.
19:11 < ljharb> beeant-macbook: http://callbackhell.com/ please read that. also look into promises.
19:11 < foofoobar> ljharb, I use express.js. I have something like: app.get('/', routes.index); how should I pass my "client" there?
19:11 < ljharb> beeant-macbook: also you've still got a switch statement at the bottom
19:12 < ljharb> foofoobar: var routes = require('./routes')(client)
19:12 < beeant-macbook> ya i havent changed it
19:12 < foofoobar> ljharb, and what do I have to do in my routes file then to work with "client" ?
19:12 < beeant-macbook> i tried to use async.parallel
19:12 < ljharb> foofoobar: wrap it in a function that takes one arg, client
19:13 < ljharb> beeant-macbook: async.parallel is fine, but you can still follow the advice on that site to make your nesting not so unreadable
19:13 < foofoobar> ljharb, can you give me an example how you mean this?
19:13 < foofoobar> for the routes file
19:13 < ljharb> foofoobar: if routes.js used to be "module.exports = …", change it to "module.exports = function (client) { … }"
19:14 < foofoobar> ljharb, I have exports.index = function(req, res){ … } can I both use module.exports and exports.index in one file?
19:14 < beeant-macbook> ok
19:14 < ljharb> foofoobar: then wrap that function in another function. that returns the original function.
19:15 < ljharb> foofoobar: but yeah essentially you have to wrap the entire guts of the module, and use module.exports once instead of exports a ton of times
19:18 < ljharb> foofoobar: personally i find one module.exports far superior to N exports.foo lines in a module anyways
19:18 < foofoobar> and this module.exports is a dictionary with all functions?
19:18 < foofoobar> or how do I put a few functions in module.exports?
19:19 < beeant-macbook> I just tested my switch codes, it behaves differently with switch in php
19:24 < ljharb> foofoobar: assigning to "exports" assigns to an exported object, and is a legacy commonjs thing
19:24 < ljharb> foofoobar: assigning to "module.exports" lets you export anything - a number, a function, another object
19:25 < ljharb> in this case, i'l recommending building up a routes object in your file, and then module.exports = routes at the bottom
19:26 < foofoobar> ljharb, something like this: https://gist.github.com/anonymous/78a82f74dc7924230ffc ?
19:28 < ljharb> foofoobar: yes. but then for the client part - wrap the entire file in a function that has a client arg, and returns `routes`. and then, outside that function, module.exports = theFunction
19:30 < foofoobar> ljharb, https://gist.github.com/anonymous/aefa6b93342dff99874d ?
19:32 < ljharb> exactly
19:33 < ljharb> that way there's no globals, you're exporting in one place, and you could also generate different route sets for different clients any time you want
19:34 < foofoobar> ljharb, the only "not-so-nice" thing is that I have to 1) require the lib which creates my client 2) initiate the client with my parameters and then I can 4) require the routes
19:34 < foofoobar> I can't put all require to the top, I have to put one require in the middle of my code
19:38 < ljharb> foofoobar: true. so that's a great reason to write your routes so they don't vary by client
19:38 < ljharb> which i'm not sure why they do
19:40 < foofoobar> ljharb, client is an object which hold some credentials and methods for an xmlrpc request
19:41 < foofoobar> on calling a special route, an xmlrpc should be made
19:41 < foofoobar> I don't want to initialize the client with the credentials in the routes file
19:42 < ljharb> why are credentials in a routes file?
19:42 < ljharb> oh
19:42 < ljharb> hm
19:42 < foofoobar> ljharb, they are not and they should not
19:42 < ljharb> ok, so that sounds like the sort of thing you should store in the session
19:42 < ljharb> then you can get to it from the req object
19:43 < ljharb> (i'll ignore the xmlrpc comment for now, http://stopsoap.com )
19:43 < foofoobar> app.jss should do the initializing of the "client" with the credentials etc. and then I want to access this in my routes
19:43 < foofoobar> ljharb, yeah I hate it, too. I just need to make an interface for an already finished service
19:43 < ljharb> so put the client in the session
19:44 < foofoobar> ljharb, is the session a express.js feature?
19:45 < ljharb> i think it's also a normal http module feature, but certainly there's one in express
19:45 < ljharb> you must be using a session, otherwise every request is fully restful and holds authentication
19:47 < foofoobar> ljharb, okay. and thats a clean way to do this?
19:47 < ljharb> it makes sense to me. authentication goes in the session.
19:48 < foofoobar> ljharb, it's not only auth, the client object also holds methods to query the service
19:48 < ljharb> sounds like the client object should be rewritten a bit to not hold onto authentication stuff
19:48 < ljharb> ie, the client object is a singleton, that takes in credentials from the session, and does what it needs to do?
19:50 < foofoobar> ljharb, this is the "client" object: https://github.com/baalexander/node-xmlrpc
19:50 < foofoobar> (the line in the example with the xmlrpc.createClient)
19:50 < foofoobar> this is how I create the client (I add some basic_auth stuff there) and then this client object should be accessible in my routes
19:55 < Industrial> https://gist.github.com/Industrial/316e53b1db0d0e9f673f I'm trying to set up nodejs on a vagrant box and compiling take too much time every time I generate the virtual pc. How do I install the binaries for node (linux x86) into a system location (no idea where) and have it be available for all users?
19:56 < Industrial> also, &2> /dev/null doesn't seem to suppress errors/warnings.
20:02 < foofoobar> ljharb, how would you do this with the node-xmlrpc?
20:08 < peterschmidler> What's the most minimal way to pass a variable to the next route with a redirect?
20:14 < lamella> hi everyone, im having a pretty hard time understanding some node concepts. im trying to write a little photo sharing app with node, express, and mongo, using gridfs to store photos into a mongodb. i dont really understand how to talk to mongo from files outside my app.js though.
20:16 < mbalho_> lamella: you can just require all your other code from app.js so it is all running in the same process
20:17 < lamella> ah, maybe im not fully understanding how requires work then!
20:17 < lamella> mbalho_: so if in my app.js ive made my db connection and required ./routes/myroute, in myroute i can access that db connection?
20:18 < aandy> is there a "preferred" way of doing stuff like document.querySelector (or jquery) on a http.ServerResponse? normally i'd just regexp my way out of it, but since i have js code for it already i thought i'd check it out
20:18 < aandy> jsdom?
20:19 < mbalho_> aandy: i use cheerio from npm
20:20 < mbalho_> lamella: what gets required when you require routes/myroute? a function?
20:20 < robw> What do you use to debug node in chrome? node-inspector seems awesome but I heard it has problems, might be abandoned.
20:20 < lamella> mbalho_: yah
20:20 < aandy> mbalho_: thanks, i'll try that :)
20:22 < ljharb> foofoobar: you may be limited by the modules you've chosen - i guess you'd either want to store the xmlrpc object in the session, or, the minimum data required to instantiate it on every request
20:22 < foofoobar> ljharb, okay. so the require('./routes')(client) way is a bad idea?
20:23 < ljharb> it's not bad, it's just extra work you have to do since you're not keeping the client around
20:25 < ThemMiddleMan> Hi everyone, have a great day!
20:27 < foofoobar> ljharb, the session is hold locally, right?
20:27 < foofoobar> and not exposed to the client in any way (hashed etc)
20:28 < lamella> mbalho_:  if i put all of my db connection code in a file, and then did exported the mongo connection, and bits i needed- would that a good way to share that info across multiple files?
20:28 < lamella> id have to wrap the code to connect in a function though right? or else it'd get executed every time i required it
20:28 < foofoobar> ljharb, how would you handle a db connection?
20:29 < foofoobar> how are they accessible in each route?
20:29 < foofoobar> also in the session?
20:29 < ljharb> foofoobar: i've only used mongoose, which holds on to the instance in the required module
20:30 < ljharb> foofoobar: and no, sessions are held on the server. typically a unique value (the session key) is held on the client and used to point to the appropriate session store
20:30 < foofoobar> ljharb, but a db connection in a session.. sounds not clean.. I will google this
20:30 < foofoobar> anyway thanks for help
20:30 < ljharb> np
20:30 < lamella> ljharb: can you tell me more about mongoose holding onto the insance in the module? this seems pretty relevant to what im asking
20:32 < ljharb> lamella: i'm not sure how they do it exactly, but once you've connected to a mongo instance, require('mongoose') knows about that connection
20:32 < lamella> oh damn
20:32 < lamella> that rules
20:32 < ljharb> that sort of thing is generally a bad practice i'd say, but it works really well for a db connection
20:32 < lamella> indeed
20:32 < lamella> so each module i require mongoose in can access the establised db connection?
20:33 < foofoobar> ljharb, http://howtonode.org/express-mongodb they are doing this the var DB = require('./foo'); var dbConnection = new DB('host', 'user', 'pw); way
20:39 < lamella> ljharb: do you know how i access the connection object??
20:41 < lamella> oh im a doofus
20:41 < lamella> nm
20:41 < lamella> got it :)
20:41 < ljharb> lamella: i think require('mongoose').db? it's in the docs
20:41 < lamella> indeed
20:41 < lamella> i was just being dull
20:42 < ljharb> foofoobar: that was from 2011. node changes way faster than that.
20:42 < ljharb> foofoobar: mongoosejs.com
20:43 < foofoobar> ljharb, I don't want to use an ORM
20:44 < ljharb> yes but if you want to see how they hold on to the db connection.
20:44 < ljharb> don't look at a 2 year old example is all i'm saying
21:05 < foofoobar> ljharb, okay
21:05 < foofoobar> ljharb, but there is not an example how they do this with modules
21:07 < foofoobar> ljharb, huh
21:07 < foofoobar> https://github.com/LearnBoost/mongoose/blob/master/examples/express/connection-sharing/app.js
21:07 < foofoobar> global.? what is that?
21:12 < niggler> AAA_awright you awake
21:12 < txdv> i'm not very impressed with express
21:12 < txdv> code turns immediately into a mess
21:17 < foofoobar> txdv, is global an express feature?
21:18 < txdv> wat
21:22 < foofoobar> txdv, thought you are talking about my example
21:22 < txdv> i just deved some stuff
21:22 < txdv> socket.io is nice and integrates kinda fast
21:22 < txdv> but that async mess really is annoying
21:22 < mscdex> foofoobar: 'global' is a javascript thing and that mongoose example is bad for using it like that
21:23 < foofoobar> mscdex, okay. can you give me a better example how to share a db connection between modules? Like my app.js initiates the connection and my routes.js can use this connection
21:23 < mscdex> foofoobar: put it in a separate module, then you can just require it and get the same connection object
21:24 < BobAlmighty> What the hell happened to NickServ?
21:24 < BobAlmighty> stupid IRC
21:24 < mscdex> BobAlmighty: out to lunch
21:25 < BobAlmighty> if I can't identify I can't get to my private channels. Annoying.
21:25 < mscdex> it's a ddos issue still i believe
21:25 < foofoobar> mscdex, when I require a module several times they still have the same local vars?
21:25 < mscdex> foofoobar: a module is cached the first time you require() it
21:26 < BobAlmighty> I was wondering, because it's been really bad for a few days now
21:26 < foofoobar> mscdex, so what does that mean for me?
21:27 < hueniverse1> is there an example of using isaacs/readable-stream with a node 0.8 HTTP server?
21:27 < mscdex> foofoobar: for example, 'connection.js' contains `var mongoose = require('mongoose'); module.exports = mongoose.createConnection(uri);`. then you can just require('./connection') and get your connection
21:28 < mscdex> foofoobar: and any other future times you require() that same module you will get the same connection object during the life of the process
21:28 < foofoobar> mscdex, but lets say i have routesA.js and routesB.js. When I do a require('./connection') in both, the createConnection is called twice
21:28 < mscdex> foofoobar: no
21:29 < foofoobar> mh, but module.exports is the function to create a new connection, why do I get the connection object if I call it again?
21:29 < mscdex> foofoobar: no, module.exports is storing the result of createConnection
21:30 < leostera> foofoobar: and it returns a connection object
21:30 < leostera> foofoobar: mongoose, right?
21:30 < owen1> mscdex: just wanted to say node-ftp works great. i previously had issues uploading multiple files but worked around it by passing an array of files and calling c.put inside forEach.
21:30 < foofoobar> leostera, I don't want to use mongoose, I just want to understand the principle of how to share a connection between modules
21:31 < mscdex> owen1: cool :-)
21:31 < leostera> foofoobar: cache it
21:31 < leostera> foofoobar: var conn = conn || newConn; module.exports = conn;
21:32 < mscdex> that's not necessary
21:32 < mscdex> modules are cached once loaded by node
21:33 < mscdex> so `var conn1 = require('./connection'), conn2 = require('./connection'), conn3 = require('./connection');` are all going to point to the same connection object
21:33 < leostera> ok then, so just var conn = newConn; module.exports = conn; would do
21:34 < leostera> that depends if `require('./connection')` is creating a new one every time it's being imported 
21:34 < leostera> as in `module.exports = newConnection();`
21:35 < leostera> but if it just returns a local that was initialized once, then it would be the same connection
21:35 < leostera> or am I wrong?
21:36 < foofoobar> mscdex, can you make an gist example with three files: app.js (holds the credentials for the db), connection.js (creates the connection) and routes.js (defines a route which makes use of a connection) ?
21:46 < s2g> anyone has experience with the `forever` nodejs package? I have a silly problem and can't run the application outside app's folder. I'm trying to do `forever -a /var/www/myapp/app.js` but then relative paths get mixed up and nodejs throws an error that it can't find my `routes` folder
21:49 < mscdex> leostera: `module.exports = createConnection(uri);` is just creating one object during the lifetime of the process
21:50 < BobAlmighty> 30 minutes debugging. And the problem was code dislexia. setTimeout != setInterval
21:50 < mscdex> setTimeinterval
21:50 < mscdex> :-D
21:51 < foofoobar> mscdex, can you make an gist example with three files: app.js (holds the credentials for the db), connection.js (creates the connection) and routes.js (defines a route which makes use of a connection) ?
21:51 < mscdex> foofoobar: i've given you all the information you need
21:52 < foofoobar> mscdex, I'm still confused
21:55 < BobAlmighty> Day 3 of learning node. EventEmitter is awesome.
21:56 < b1eedr_> BobAlmighty am just like you man. node is awesome
21:56 < b1eedr_> am checking out fs right now
21:57 < BobAlmighty> Pretty straight forward if you've used many fs libs before
21:57 < b1eedr_> ya
21:57 < BobAlmighty> One thing I found anoying though was that you have to be pretty careful when trying to access files.
21:57 < b1eedr_> been using fs in bash
21:58 < BobAlmighty> Because trying to get to one you can't blows up node
21:58 < b1eedr_> k
21:58 < BobAlmighty> so always exists() before you do anything
21:58 < b1eedr_> am a noob still
21:58 < b1eedr_> k
21:58 < b1eedr_> cool
21:58 < BobAlmighty> Then you can use like fsStat
21:58 < b1eedr_> k
21:59 < b1eedr_> for now am using fswatch
21:59 < b1eedr_> to check changes in certain log files
22:06 < BobAlmighty> So I'm having a runtime failure on a class that's trying to emit an event. Can someone take a look at http://pastebin.com/dnMkT9Hn and tell me I'm stupid and what I did?
22:06 < BobAlmighty> I have a setInterval calling an class function that emits an event
22:06 < vampirefrog> BobAlmighty, I'll do one of your three requests
22:06 < BobAlmighty> Lol
22:06 < BobAlmighty> I think I know what I'd choose :P
22:07 < BobAlmighty> When the setInterval, I get a runtime error that this.emit doesn't exist
22:07 < BobAlmighty> Oh god
22:07 < mscdex_> BobAlmighty: you should really use a prototype instead
22:07 < BobAlmighty> No
22:07 < BobAlmighty> Not no to you, no to my dumbass
22:08 < BobAlmighty> I have private variables I want to access....
22:08 < SiGe> BobAlmighty: use this and that. this is not what you think with setInterval
22:08 < SiGe> or wrap it up.
22:08 < mscdex_> it's also not the same this inside emitTick
22:08 < BobAlmighty> setInterval changes the this scope
22:08 < BobAlmighty> Yeah
22:09 < BobAlmighty> I should have realized that
22:09 < BobAlmighty> SiGe, what do you mean?
22:09 < SiGe> BobAlmighty: Which part?
22:09 < BobAlmighty> Oh I didn't see your first message sorry
22:09 < SiGe> LoL
22:09 < BobAlmighty> flood of joins
22:09 < SiGe> Yeah.
22:10 < mscdex_> BobAlmighty: regarding the prototype, you can just attach the variables to an object property or as separate properties on `this`, like `this._tick = 0;` inside your constructor, then use `this._tick` in your prototype methods
22:10 < BobAlmighty> AHHHHH
22:10 < SiGe> Get dunked son.
22:11 < BobAlmighty> mscdex, Yeah I know I can do that. But I don't want anyone outside of my object messing with the tick count and stuff
22:11 < mscdex> BobAlmighty: if they do, it's their problem and they're doing it on purpose
22:11 < BobAlmighty> Lol I guess that's one way to look at it
22:12 < mscdex> BobAlmighty: otherwise you're making a copy of each one of those functions every time a new WorldClock is instantiated
22:12 < mscdex> wasteful
22:12 < SiGe>  mscdex: Depends how many worlds he has :D
22:12 < BobAlmighty> The class using worldclock never instantiates more than one and the export function only returns the same instance
22:12 < mscdex> SiGe: if it's enough to make a "class", then the intentions are to reuse :-)
22:13 < BobAlmighty> I guess it's kind of a poor mans singleton....
22:13 < TehShrike1> singletons are a poor man's global
22:13 < SiGe> BobAlmighty: did ... did you just .... say ss...ssingleton?
22:13 < BobAlmighty> Haha it's not
22:14 < BobAlmighty> but I only expect to use a single object
22:14 < sorella> BobAlmighty, all objects in JS are already singletons.
22:14 < BobAlmighty> I understand that an object literal is. Yes.
22:14 < sorella> BobAlmighty, no, all objects. Not just literals.
22:15 < TehShrike1> A module can give you your singleton pattern
22:15 < TehShrike1> Whatever object it returns the first time is the same object that every require() call will be given
22:15 < BobAlmighty> sorella how do you mean?
22:16 < isaacbw> singleton doesn't mean a whole lot in js
22:16 < niggler> class doesn't mean a whole lot in JS
22:16 < BobAlmighty> I said a taboo word.
22:17 < BobAlmighty> Prototype language, yes.
22:17 < BobAlmighty> I guess this is why they recommend not using 'new'
22:17 < isaacbw> does es6 have any plans to standardize __proto__?
22:17 < niggler> new has a specific meaning
22:19 < isaacbw> who recommends not using new
22:19 < BobAlmighty> niggler as in a new instance of a thing
22:19 < sorella> __proto__ will probably end up being standardised in ES6, yes.
22:20 < BobAlmighty> I think I read it in a Crockford presentation on best practices
22:20  * sorella recommends not using new, because it gives you a crippled OO model and makes things more complicated.
22:20 < niggler> you can embed it in your functions
22:21 < BobAlmighty> Okay so take http://pastebin.com/dnMkT9Hn as the example.
22:21 < BobAlmighty> Should I just declare everything as an object literal and return that?
22:21 < BobAlmighty> since I really only want one of it to exist
22:22 < s3shs> Wow, do a search on your system for node_modules.  I only had 55 of them.
22:22 < BobAlmighty> can I use util.inherits({}, events.EventEmiter)?
22:22 < niggler> what if getClock is called with different delays?
22:23 < BobAlmighty> I want it to be, potentially
22:23 < BobAlmighty> someone might want to more or less
22:23 < BobAlmighty> It's essentially configurable
22:23 < niggler> s3shs how are you counting?
22:23 < s3shs> Fingers and Toes?
22:23 < s3shs> (Is that a trick question?)
22:23 < niggler> s3shs meaning if A depends on B are you counting A and B or just A
22:24 < s3shs> I haven't gotten that far yet.
22:24 < s3shs> I just did a find.
22:24 < isaacbw> does anyone know how the noise level of cherry mx blue keyboards compares to buckling spring?
22:25 < BobAlmighty> Never use anything but an IBM Model-M
22:25 < BobAlmighty> Otherwise Das Keyboard is your best alternative
22:25 < isaacbw> I spilled water on my model M and the control/caps lock/tab keys stopped working
22:25 < niggler> for example s3shs npm itself uses something called read-package-json
22:25 < BobAlmighty> However, I believe the Cherry MX and the Das Keyboard share springs
22:25 < BobAlmighty> And they're not loud enough.
22:25 < niggler> that has a slew of dependencies
22:26 < niggler> s3shs start from https://npmjs.org/package/npm and see how many modules are in the tree
22:26 < sorella> BobAlmighty, why not just export WorldClock and let the user deal which how many instances of it they want to have around?
22:26 < niggler> BobAlmighty you can also stick stuff in the WorldClock prototype
22:26 < BobAlmighty> sorella, I thought about that, maybe I'm over designing things early.
22:27 < BobAlmighty> niggler, originally I was do that, but then I was gettin this.emit doesn't exist as a load error, not runtime.
22:28 < BobAlmighty> Really that's my problem here. Why the fuck is WorldClock not extending EventEmitter before this.emitTick is called
22:28 < s3shs> Whoops, fewer.  Here're their paths: http://pastebin.com/b7pc1DZ2
22:28 < BobAlmighty> I'd rather extend the prototype
22:29 < BobAlmighty> isaacbw, I'm sorry for your M-series loss. Mine died a year ago and I still morn its passing. That said, I hear good things about the cherry, and I love my das keyboard.
22:30 < BobAlmighty> Honestly, I kinda wish I'd gone with the cherry edition with the backlit keys, and media bar.
22:32 < isaacbw> I'm still hoping that there is a bit of water that just hasn't evaporated yet, but that's probably false hope
22:32 < BobAlmighty> Those old traces are very vulnerable to corrosian. That's why mine died.
22:32 < BobAlmighty> If it's JUST the switches
22:32 < BobAlmighty> YOu can replace them
22:33 < isaacbw> I think something is wonky with the matrix
22:33 < isaacbw> for example, the right control key triggers the numpad enter
22:33 < BobAlmighty> Yeah I lost my home row.
22:33 < BobAlmighty> Yeah, thats a trace problem
22:33 < sorella> BobAlmighty, https://gist.github.com/killdream/5561652
22:33 < BobAlmighty> Your up down trace isn't working
22:34 < yorrd> I'm new to all of this, would it be possible to get the console output of a Minecraft server with node.js to use some of it say in a live feed?
22:35 < jcrugzz> BobAlmighty: if you are extending the prototype you have to ensure you are using an instance of the object by using new. util.inherits also extends the prototype https://github.com/joyent/node/blob/master/lib/util.js#L557-L567
22:35 < BobAlmighty> sorella, the significant line to me is: var clock = Object.create(events.EventEmitter)
22:35 < BobAlmighty> What's up with that?
22:35 < vampirefrog> yorrd, are you running it in unix?
22:36 < yorrd> vampirefrog, I could, right now it's on my windows test machine
22:36 < redbeard> hi there, it is possible to make function variables global (for using it in _require_d files)?
22:36 < sorella> BobAlmighty, Object.create(prototype[, propertyDescriptors]) will give you a new object that delegates to the prototype you specify. So in this case, it creates a new object that inherits from events.EventEmitter
22:36 < sorella> (and that should actually be events.EventEmitter.prototype)
22:36 < vampirefrog> yorrd, well in unix, all you have to do is run the server executable from your node script and capture its output, then output it to an IRC client maybe
22:37 < yorrd> vampirefrog are you serious?! But why won't that work on windows?
22:37 < jcrugzz> sorella: which is essentially what util.inherits does
22:37 < BobAlmighty> And the functions you're defining by this, would be clock.prototype?
22:37 < vampirefrog>  yorrd: afaik, you can't capture stdout on windows, since it is not regarded as a file
22:37 < sorella> jcrugzz, yes, but util.inherits expects constructors. I don't use constructors.
22:37 < vampirefrog> yorrd, but you might as well try
22:38 < yorrd> vampirefrog I see... okay, thanks for now, I guess I'll get started :)
22:38 < vampirefrog> yorrd, http://stackoverflow.com/questions/10232192/exec-display-stdout-live
22:39 < sorella> BobAlmighty, no, this example doesn't use constructors, so there's no `clock.prototype`. The `clock` object being define *is* the prototype. You don't need constructor functions nor `new` to do OO in JS, and not using them gives you prototypical OO in its purest form (albeit the language doesn't give you good primitives to work with that out-of-the-box).
22:39 < yorrd> vampirefrog oh geez, thanks a bunch!
22:39 < jcrugzz> sorella: fair enough. you really dont like `new` eh :p
22:39 < BobAlmighty> sorella, this doesn't exist in the scope of "this.emitTick" in jcrugzz example.
22:39 < sorella> BobAlmighty, it's also simpler because you don't complect inheritance with initialisation, so you could do things like: `clock.fromClock = function(oldClock) { ... }`, which would give you a new clock that has the same parameters as the clock you pass to it. And all other sorts of cool stuff.
22:40 < sorella> BobAlmighty, that's what `bind` is for :3
22:40 < jcrugzz> BobAlmighty: sorella doesnt like new so this is another way of doing it instead of using .prototype
22:41 < BobAlmighty> Oooooooooooooh. I see
22:41 < BobAlmighty> I didn't see the this.emitTick.bind(this)
22:43 < BobAlmighty> Honestly, that seems very confusing code. I mean you're essentially repurposing 'this' of the require context, right?
22:43 < BobAlmighty> What is this in the require context
22:44 < BobAlmighty> Why can't you just replace this with clock.prototype?
22:45 < BobAlmighty> except for the setInterval?
22:46 < isaacbw> BobAlmighty: well, I just ordered a das keyboard. The deed is done :(
22:48 < vampirefrog> what wysiwyg editor do you guys suggest?
22:49 < isaacbw> RIP 
22:49 < vampirefrog> ?
22:50 < SiGe> sorella: shouldn't those this, be clock? e.g. this.resume = ... vs. clock.resume
22:50 < vampirefrog> netsplits are like it's raining :D
22:50  * SiGe it's raining ... lalalala
22:51 < BobAlmighty> sorella, jcrugzz ^^
22:51 < BobAlmighty> even, clock., ignoring prototype
22:55 < wildex999> Quick question, will calling socket.write with a buffer make a copy of the buffer? ie. if I send in a buffer and then change something in the buffer, will that change reflect on the socket write if it hasn't had time to send it yet?
22:56 < BobAlmighty> jcrugzz, sorry DDOS'd or something
22:56 < BobAlmighty> You around still?
22:56 < SiGe> BobAlmighty: What is going on @_@
22:56 < SiGe> HALP
22:57 < BobAlmighty> Massive freenode being fucked in the ass
22:57 < gkatsev> freenode  is/was being ddoses, so, lots of netsplits and other stuff
22:57 < BobAlmighty> Someone is trying to kill the entire worlds productivity by making their programmers twiddle their thumbs
22:58 < BobAlmighty> They're clearly moving a node to node pattern.
22:58 < BobAlmighty> Because once you get connected on a node that isn't being attacked, you good for an hour or so.
22:59 < gkatsev> yeah
22:59 < gkatsev> hopefully, everything actually is calming down a bit now.
22:59 < BobAlmighty> it's been like this for at least three days
23:00 < BobAlmighty> I've seen some DDOS attacks before, but man why the hell is this so sustained and so long.
23:01 < BobAlmighty> Assuming that IS what is happening
23:01 < gkatsev> that's what they said
23:02 < yorrd> vampirefrog for wysiwyg I love ckeditor. Also, stdout is confirmed to be working on Windows ;)
23:03 < BobAlmighty> I stand by my original statement then, that this is a WORLD WIDE TERROR ATTACK. Designed to inhibit the driving economic force of programmers in the 1st world. And cause the western empire to crumble to dust.
23:03 < BobAlmighty> Or some dick in russia.
23:03 < isaacbw> just turn of parts and joins and it's like nothing is happening
23:04 < gkatsev> I always have that turned off
23:04 < gkatsev> I dont have nicks turned off
23:05 < vampirefrog> yorrd, good for you then. I'm actually downloading dozens of wysiwyg editors and I'll have to try them all out. I've been unable to find a comparison table
23:05 < vampirefrog> but redactor looks like it's really nice, even though it's for money
23:05 < yorrd> vampirefrog, hmkay, let me know what you ended up using, I'm interested in checking out some new cool editors as well
23:06 < vampirefrog> maybe you can help me with my cool project
23:07 < yorrd> maybe ;) but I'm not very experienced, don't hope for too much
23:11 < jcrugzz> BobAlmighty: still having issues?
23:52 < yorrd> trying to spawn a java process, I get:    Error: spawn ENOENT;  at errnoException (child_process.js:975:11); at Process.ChildProcess._handle.onexit (child_process.js:766:34).
23:52 < yorrd> child process that is
23:52 < yorrd> What am I doing wrong? exec works.
23:56 < niggler> yorrd code sample?  exec and spawn do different things
23:59 < yorrd> niggler http://pastebin.com/NLuaCgjP
--- Log closed Sun May 12 00:00:09 2013
