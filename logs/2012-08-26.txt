--- Log opened Sun Aug 26 00:00:26 2012
00:23 <@konobi> what's the node blogging engine of choice these days?
00:23 <@konobi> static generation preferrable
00:24 < RichieEvan> hot girl
00:25 <@konobi> it is pretty warm
00:25 < RichieEvan> My girlfriend is hot
00:26 < RichieEvan> when she programs node.js
00:26 < Nuck> Any suggestions for a centralized logging solution based on JSON-logs?
00:26 < Nuck> (with a good API, obv.)
00:26 <@konobi> Nuck: bunyan
00:28 < Nuck> konobi: I can't see what backing that has, is it just a file or STDOUT?
00:29 <@konobi> any stream
00:29 < Nuck> ooooh
00:29 < Nuck> I can work with that :D
00:29 < Nuck> konobi: Thanks
00:29 < Nuck> This thing looks BOSS.
00:34 < owen1> i am looking at https://github.com/substack/node-optimist and noticed in the example, the first line is #!/usr/bin/env node
00:35 < owen1> why? is it suppose to use similar to a bash script?
00:40 < Nuck> owen1: That's just a generic hash bang line.  The hash bang is used by *nix to determine what environment is used to launch it
00:40 < Nuck> In this case, Node.js
00:45 < owen1> Nuck: which node tells me: ~/nvm/v0.8.8/bin/node so i tried this line: #!/Users/ogolan/nvm/v0.8.8/bin node   but i get  bad interpreter: Permission denied
00:45 < Nuck> owen1: "#!/usr/bin/env node" should automatically use the current environment (hence, env) to find the node binary
00:47 < owen1> Nuck: nice. do i have to chmod the app? btw, what the advantage of running it with ./app.js vs node app.js ?
00:48 < Nuck> owen1: Well, mostly I think it's just shorter.  There might be other advantages, I'm not sure.
00:48 < Nuck> I think you do need an executable flag for a file with a shebang
00:50 < Aria> Indeed you do.
00:50 < Aria> There's really no other difference.
00:50 < Aria> node hides the tiny difference in ARGV from you, you'd have to go seek it out to see it.
00:51 < Aria> And that's the only difference.
00:52 < Nuck> haha well, y'know most programmers are lazy, so typing "node" might annoy them :P
00:53 < owen1> got it. thanks!
00:55 < TehShrike> owen1: just started using node on linux today, and discovered that you've got to have root-like permissions to be able to bind to a port, so if you're running an http server, you may need to sudo it
00:56 < Nuck> TehShrike: You only need root for <1024, anything higher will be allowed.  If you want a low port, I recommend setting up iptables or some other mechanism for forwarding the port (so you don't run as root, which is dangerous)
00:56 < TehShrike> Nuck: ah, much thanks for that wisdom
00:57 < TehShrike> I felt like a clod swinging hammers around getting stuff to work - "I'm sure if I was familiar with Linux I'd know the right way to do this"
00:57 < TehShrike> The other main thing I was wondering (if you have any wisdom on the subject) was the best way to get node in my path
00:58 < TehShrike> I ended up editing my .bash_profile and appending node/bin to $PATH
01:00 < Nuck> TehShrike: That's probably your best option, if you don't install to something already in it
01:00 < Nuck> At least, as far as I know
01:01 < TehShrike> Where in the linux directory structure would you usually extract the contents of the tar.gz containing the node binaries?
01:01 < Nuck> … I honestly don't know, I build from source ^^;
01:01 < TehShrike> lol
01:01 < TehShrike> Fair enough.
01:02 < TehShrike> I'm not much of a Linux admin.
01:02 < dominictarr> TehShrike, into your ~/dev folder or something. you won't need them anymore after complation, except for your personal reading pleasure
01:03 <@konobi> so back to my earlier question... what's the node blogging engine of choice these days?
01:03 < dominictarr> where ever you want really.
01:03 <@konobi> Nuck?
01:03 < Nuck> konobi: I have no idea, I'm gonna be rollin' my own for my startup, probably
01:03 < Nuck> If you find a Jekyll-style one which works with post-recieve hooks, tell me :P
01:04 < Nuck> dominictarr: He means the binary tar ball, not the source tarball
01:04 < dominictarr> just use tumblr and then use node for stuff that is an order of magnitude cooler than blogs.
01:04 <@konobi> the nodejitsu guys did one... but can't remember the name atm
01:04 < dominictarr> konobi, backsmith
01:04 < dominictarr> sorry
01:04 < dominictarr> blacksmith
01:05 < dominictarr> Nuck, ohh, probably /usr/local/bin 
01:05 < dominictarr> echo $PATH <-- one of those places.
01:05 < TehShrike> heehee
01:05 < Nuck> ^ well said.
01:05 < Nuck> I recommend one which contains the word "use" because finagling with /bin always gave me grief
01:06 < Nuck> "usr"
01:06 < Nuck> Fucking autocorrect
01:08 <@konobi> dominictarr: just after something i can run locally and then sync up
01:09 < Nuck> konobi: There's always wheat?
01:09 <@konobi> seemed a little janky to me
01:10 < Nuck> Yeah, we have chat systems in Node.js, but no good blogging systems
01:10 < Nuck> Funny, innit?
01:10 < ph0n3tic> Just roll your own, it's a pretty trivial, yet useful, exercise. 
01:11 < Nuck> Very true
01:12 < Nuck> If you do it Jekyll-style, then it becomes even more trivial :D
01:12 < Nuck> (no time constraints)
01:12 < TehShrike> You mean, performance-wise?
01:12 < TehShrike> Is that Jekyll-style? :-P
01:13 < Nuck> You don't need to worry about performance in Jekyll-style setups because it's just a compiler of Markdown to HTML
01:13 < Nuck> All you do is serve the static output
01:13 < TehShrike> aah, Jekyll is some frameworkey thing
01:16 < Nuck> Aye, it was some old Ruby blogging system
01:19 < owen1> konobi: let me know if you pick a blogging engine. i am looking for something as well. i might roll my own.
01:20 < owen1> konobi: how do u want the admin to post a blog? via a web interface with text area or by uploading a markdown file?
01:55 < AaronATX> anyone have a minute to help me with a question that probably has a very simple answer?
01:55 < TehShrike> First rule of IRC: just ask the question :-)
01:56 < AaronATX> ok, i have a socket server running and i'm trying to find the ip address of the socket within the function that handles the close event
01:56 < AaronATX> but socket.remoteAddress returns undefined
01:56 < AaronATX> i assume that's because the socket is already closed?
01:57 < AaronATX> but then how do i find out the address :x
01:58 < Nuck> With request, there's a system for defaults, but is it possible to set URI components without the path, then do like .get('/foo/bar')?
01:59 < AaronATX> i posted my question at stackexchange.  thought i might get a better reply here though.  http://stackoverflow.com/questions/12126403/getting-the-ip-address-of-a-socket-inside-a-close-event-handler
02:12 < owen1> do u guys use a script to start the dev environment (running db, browserify, the node server, etc)? if so, do u put them in scripts folder or something similar?
02:18 < TehShrike> Good question.  I want to hear the answer to that, too :-)
02:18 < Nuck> Honestly, I'm doing that manually right now
02:19 < nlf> owen1: in some projects, sure. a scripts directory with a short bash script to set things up manually, then define a script in the package.json to run it
02:19 < Nuck> I do plan on making a scripted launch eventually
02:19 < Nuck> `request.defaults({'url':{'hostname':'example.com','port':50}}).get({'url':{'pathname':'/test'}});` doesn't work in Request :(
02:19 < kuja> If you use npm, there are start and stop scripts that can be run with `npm start` and `npm stop`
02:19 < Nuck> This makes me sad
02:20 < nlf> kuja: indeed, between those and environment variables you don't need much else
02:20 < TehShrike> Well that's handy
02:21 < kuja> https://npmjs.org/doc/scripts.html
02:21 < kuja> yep, i use it for pretty much everything :p
02:22 < kuja> what's also cool is it seems to correctly recognize path to executables in node_modules dependencies
02:22 < TehShrike> semicolon-separated lines?
02:23 < zivester> anyone have experience with imagemagick wrappers?  do you prefer node-imagemagick or node-easyimage or ... ?
02:24 < mscdex> AaronATX: you could always save it upon connection if nothing else
02:24 < owen1> nlf: thanks
02:24 < mscdex> AaronATX: although it makes sense if it's undefined in the close event
02:25 < AaronATX> mscdex, yes but how would I look it up later?  when the close event comes in, what else do I have to reference the socket if not the ip/port ?
02:25 < mscdex> save it on the socket object as a different name maybe?
02:25 < mscdex> that would be the easiest
02:25 < kuja> TehShrike: Yeah you can semi-colon separate commands
02:26 < TehShrike> Well that's just unreasonably handy
02:26 < AaronATX> oh, that *is* easy. :x
02:31 < AaronATX> that works.  thanks!
02:32 < owen1> i run supervisor node server.js  so i don't need to restart my server. if i kill supervisor (with ctrl
02:33 < owen1> +c) i still see the node process running. how to kill supervisor and node at the same time?
02:33 < gkatsev> killall supervisor?
02:36 < owen1> gkatsev: i'll give it a try
02:37 < AaronATX> mscdex: do you see anything wrong with keeping track of the clients like this? http://pastebin.com/4h1LDwtQ
02:38 < gkatsev> owen1: perhaps you want node-supervisor -n? it should not restart if program ends
02:38 < owen1> gkatsev: i'll try that as well. cool!
02:39 < gkatsev> owen1: read the help for exact usage
02:40 < mscdex> AaronATX: the event should be 'connection' for a net.Server and the `socket.on('close', ...)` should go inside the connection event handler
02:40 < mscdex> AaronATX: also, you can remove that if-statement in the 'close' event handler, it should always be defined
02:41 < mscdex> AaronATX: unless you should actually delete it elsewhere in your script
02:41 < AaronATX> no, that makes sense
02:42 < AaronATX> the connection event and placement of close handler is correct in my code.  i did a bad job of typing up the example.
02:42 < AaronATX> thanks!
02:42 < mscdex> ah ok
02:42 < mscdex> np
02:43 < Nuck> https://gist.github.com/24aeb5f0651cc0829e2d Can somebody explain why I can't do this?
02:44 < Nuck> Does Request not deep-merge the two objects?
02:44 < Nuck> There must be some workaround
02:45 < Nuck> Because this feels like Request is making my life harder, not easier
02:48 < AaronATX> aww, SE won't let me answer my own question yet :|
02:49 < mscdex> :-)
02:49 < AaronATX> i'll save my post for later.  it includes credit to you and the channel :p
02:50 < zivester> can someone explain how the package.json "scripts" works for "test" ... I guess I want it to be like a makefiles test? I basically want to know how to run `npm test` or the like, which will run `node test/simple-test.js` and make sure there are no errors
02:50 < zivester> if relevant, here's my repo: https://github.com/zivester/node-quickthumb
03:06 < Nuck> … I think I'll just kludge with Request until I get it all figured out ;)
03:19 < Domenic> zivester: gm is a GraphicsMagick wrapper that's excellent; it supports streaming unlike the ImageMagick wrappers (last I checked)
03:26 < zivester> Domenic: tx.. been a while since I've looked at gm... I doubt I'll switch my package at this point... just created my first npm module... boy are there a lot of similar packages :-/
03:27 < Domenic> zivester: for what it's worth we switched from async node-imagemagick to streaming gm with like an hour of work, and it decreased our server's memory usage by... a lot.
03:29 < zivester> Domenic: in a production system? what's the use case?  my package is just for resizing images to variable sizes.. I'm guessing you use it for something a bit more complex?
03:30 < Domenic> zivester: yeah it was production on-demand thumbnailing, i.e. /my/image/thumbnail?max-width=123&max-height=456
03:30 < Domenic> images streamed from Amazon S3 through gm then to the client, it was awesome, no buffering in memory at all
03:30 < Domenic> No temp files on our server either
03:32 < zivester> so you substituted mass storage for CPU time.. interesting.. guessing it's cheaper that way, instead of pre-generating all the sizes you may need?
03:32 < zivester> or the majority of generated images aren't ever needed
03:36 < Domenic> Yeah we have no control over the sizes that are needed, so pre-generating didn't make much sense.
03:36 < Domenic> Each client could want a different size
03:36 < Domenic> I guess over time we could histogram requested sizes and try pre-generating those
03:37 < JacobSingh> Hey, I'm trying to download 10k files I got http.get working
03:38 < JacobSingh> but I run out of sockets
03:38 < JacobSingh> now I know I can set ulimit and all, but I'd like to know how to do this properly.  Iknow there isn't any sleep in JS exactly
03:38 < JacobSingh> So what's the best way to buffer the operation
03:39 < owen1> i have my js file included it my html page: <script src="js/bundle.js"></script>   when i deploy my code, i want to run uglify and replace the src with js/miniBundle.js (the output of uglify). how do u guys achieve that?
03:43 < Domenic> JacobSingh: you could fire off, say, 100 connections at once, each with a callback that fires off another when it's done, so that only 100 are active at any given time.
03:43 < zivester> Domenic: good stuff.  I'll have to think of a use case for gm with my module.. or atleast see this gm streaming in action.. what npm package do you use, 'graphicsmagick' or 'gm' or your own wrapper?
03:43 < Domenic> zivester: we use gm
03:44 < yelo_> is it possible using socket.io to make the nodejs server retrieve the current url of the browser when it makes a socket request
03:45 < yelo_> for example i have two browser clients at /url1 and /url2 who connect to the server, i would like to retrieve url1 and url2 for each socket
03:46 < Domenic> yelo_: sure, just have hte first thing the clients do be `socket.emit("connected", { clientUrl: document.location.pathname })`
03:47 < bernaman> hi, a simple helloworld mongoose query hangs in node after callback: http://pastebin.com/CZfFRYvk anyone?
03:47 < yelo_> Domenic: thx, that will do :)
03:57 < Domenic> So, HuJS... how foreigner-friendly does it look to be?
04:39 < pringlescan> Is there a way to do the command line equivalent of "mkfifo" in Node.js?
04:44 < Raynos> https://twitter.com/Raynos2/status/239582953271877633
04:44 < timeturner> lol @ tjholowaychuk's latest status
05:13 < AAA_awright> timeturner: What would that be?
05:14 < zivester> Pouring booze on myself like a boss
05:50 < deoxxa> Raynos: it's disappointing how many people don't understand that way of making programs
05:51 < Raynos> it's disappointing how many people don't understand the sublime-ness of streams
05:51 < deoxxa> that too
05:51 < Raynos> https://twitter.com/Raynos2/status/237644771148046336
05:52 < deoxxa> > your
05:56 < Raynos> ._.
05:56 < Raynos> https://github.com/Raynos/arrow-keys#example
05:56 < Raynos> How do you know whether your abusing streams?
05:56 < arcatan> more education to be done
06:01 < Raynos> Is it bad I write a module
06:01 < Raynos> and then npm search to see whether someone else wrote it before I publish it?
06:02 < AnonymousFunctio> Raynos: Even if they had, there is nothing wrong with having something redundant.  The amount of crap on NPM is astounding.
06:02 < coderarity> Raynos, well, people have their own modules sometime, whatever
06:02 < coderarity> Raynos, maybe your style is just cooler for some people?
06:02 < Raynos> :D
06:02 < Raynos> it is 
06:02 < Raynos> because it's streaming
06:02 < Raynos> and if your module is streaming you get bonus points
06:03 < AnonymousFunctio> There is a reason I don't built NPM modules... it's because I have no idea what I'm doing, and I do not want the Node ecosystem to go the way of PHP.  :-)
06:04 < AnonymousFunctio> Keep my shitty code out of other projects.
06:04 < Raynos> psh
06:04 < AnonymousFunctio> Besides, I don't have time to maintain that stuff anyway.  Way too many modules out there are never maintained.
06:04 < AnonymousFunctio> "Compatible with 0.2 or later", bullllshit.
06:05 < AnonymousFunctio> coderarity: Speaking of shitty code, you should see how I solved that HTTP client hooking last night...  http://stackoverflow.com/a/12119765/362536
06:05 < substack> php's problem is that there are too few modules, not too many
06:05 < AnonymousFunctio> It works beautifully!  That is until the socket is unexpectedly closed, then all hell breaks loose.
06:06 < cainus> Raynos: whaddya mean "streaming"?  it emits events?
06:06 < Raynos> its a node stream
06:06 < AnonymousFunctio> PHP has many problems, but I would say that the quality of example code out on the internet has held it back more than pushed it forward.  I love PHP... quick and dirty for getting most jobs done. Trying to hire a decent PHP coder is impossible, as they are incredibly rare.  Most have no understanding of OOP basics.
06:07 < substack> cainus: http://nodejs.org/docs/latest/api/stream.html
06:07 < cainus> it sounds like you're saying that can apply to any old module
06:07 < substack> AnonymousFunctio: the code is not written in a reusable way and uploaded to a package manager
06:08 < substack> it's written for copy pasta sauce
06:08 < AnonymousFunctio> substack: That is true.
06:08 < AnonymousFunctio> Mmmmm, pasta sauce.  I haven't had any good pasta in a long time.
06:08 < AnonymousFunctio> Maybe I'll microwave some tortellini tomorrow, ha.
06:08 < AnonymousFunctio> substack: You didn't like PEAR?  :-)
06:09 < deoxxa> (っ◕‿◕)っ ♥NPM♥
06:12 < AAA_awright> Really? Anyone know any good PHP jobs?
06:16 < AnonymousFunctio> AAA_awright: Where do you live?
06:28 < Nuck> The problem PHP has isn't simply a lack of good OOP programmers.  It's that once programmers learn OOP, they move to better languages.
06:28 < Nuck> Like, say, anything that isn't PHP
06:29 < AnonymousFunctio> Nuck: That is very true, generally.
06:30 < Nuck> As a former (and sometimes current) PHP programmer, I can say that's true ;)
06:31 < Nuck> Also, PHP has too few modules because the core does everything #trufax
06:34 < AnonymousFunctio> Woot, just fixed my http.request.ondata overrider crap hack.  It actually works now.  Of course, I said that last night too...
06:35 < AnonymousFunctio> This time, I didn't replace the entire socket object with my own... I simply changed the ondata function to my own, and I still call the original function.
06:35 < AnonymousFunctio> This plays much nicer with the HTTP parser's listeners on the socket events.
06:36 < astropirate> AnonymousFunctio, high five!
06:36 <@konobi> iirc, you can push event handlers onto an event (ie: more than one)
06:36 < AnonymousFunctio> astropirate: Thanks!  high five.
06:36 < AnonymousFunctio> knobi, You can, but I have a very particularly interesting problem.  http://stackoverflow.com/a/12119765/362536
06:37 < AnonymousFunctio> I wanted to use http.request, but I'm working with a non-standard HTTP server.  Most HTTP clients use it okay, but Node's HTTP parser is quite strict, and coughs.
06:37 < AnonymousFunctio> My solution is to re-write one small string of data to make it compatible.  Prior attempts involved a really nasty proxy server internal to my app.
06:37 < AnonymousFunctio> As I had bug fix after bug fix on it, I decided to take a different approach.  Last night, I found out that I could easily override internal functions on a socket object, so that's the road I went down.
06:38 < deoxxa> AnonymousFunctio: damn, shoutcast must be full of weird stuff like that
06:39 < AnonymousFunctio> deoxxa: SHOUTcast is actually a very simple beast.  That one status line is the only response data that isn't really up to HTTP/1.0 standards.
06:39 < deoxxa> i... think... there's a way to do that without the function overwriting stuff
06:39 < AnonymousFunctio> deoxxa: I'm all ears.
06:39 < AnonymousFunctio> If it exists, I haven't seen it.  :-)  But am very open to suggestions.
06:39 < deoxxa> i'm not 100% sure, but i think you can specify the "classes" (functions) to use to construct the request/response objects when you create an http server
06:40 < deoxxa> or you can overwrite them on the server
06:40 < AnonymousFunctio> Right, but I am the client, not the server.
06:40 < deoxxa> oh
06:40 < deoxxa> so you are
06:40 < deoxxa> disregard!
06:40 < AnonymousFunctio> However... I am intrigued.  I have another problem I'd like to solve.
06:41 < AnonymousFunctio> I'd like to reply with HTTP/1.0 to support a couple broken clients.
06:41 < AnonymousFunctio> So, if I could do what you suggest, that may be possible.
06:41 < deoxxa> yeah, i'm like 75% sure you can do that
06:41 < deoxxa> or at least you could, at some point
06:41 < AnonymousFunctio> Any documentation anywhere that you know of?
06:41 < AnonymousFunctio> Or, know what it was called?
06:41 < deoxxa> i'm not sure it was ever a documented thing
06:41 < AnonymousFunctio> Ok, back to the src I go!
06:42 < AnonymousFunctio> Over the last week, I've found it to be a far more reliable documentation source.
06:42 < AnonymousFunctio> If I had the time, I'd contribute to better docs for Node.
06:42 < AnonymousFunctio> Maybe once this project is over...
06:42 < deoxxa> yeah, but it's a bit touch and go sometimes - the implementation of things can change underneath you with very little notice as long as they keep to the api docs
06:43 < AnonymousFunctio> That's what I'm worried about with my latest hack, but it seems fairly safe.
06:43 < deoxxa> might be worth patching http-parser
06:43 < AnonymousFunctio> I don't think they'd ever accept my patch.  :-)  That was my first thought.
06:44 < AnonymousFunctio> I agree with the philosophy of keeping Node as pure as possible.  I do wish there were hooks available though to modify behavior.
06:44 < AnonymousFunctio> My problem is a very specific use case, but hooks in place could be useful for other things as well.
06:45 < AnonymousFunctio> I need to get better at testing stuff with the snapshot builds.  Then, at least I have a heads up when things change.
06:45 < deoxxa> i'm pretty sure isaacs is keen on the idea of eliminating http_parser entirely in favour of pure js - maybe find out who's working on that and help them move that along a bit?
06:45 < deoxxa> as a long term thing
06:46 < deoxxa> if it's bugging you that badly anyway, heh
06:47 < AnonymousFunctio> That surprises me... the speed improvement of a compiled parser seems to be talked about frequently.
06:48 < deoxxa> well that's one of the sticking points right now
06:48 < deoxxa> buuuuut
06:48 < deoxxa> the loss of speed from javascript will more than be made up for by the gain in speed by avoiding the c++/v8 barrier crossing
06:48 < deoxxa> that's a huge, huge performance sink
06:49 < AnonymousFunctio> Ah, I was not aware of that.
06:49 < AnonymousFunctio> In that case, it is generally better to keep code in one or the other?
06:49 < deoxxa> yeah, avoiding crossing over from one to the other is a good idea
06:49 < AnonymousFunctio> Makes sense
06:50 < deoxxa> there's times when it makes sense to do it though, like if you have to do a lot of math or binary (bit level) manipulation of data
06:51 < deoxxa> but for something like string processing (where javascript is actually pretty fast), it does more harm than good to implement it in native code
06:53 < AnonymousFunctio> Interesting.  Well, I will definitely be watching the commit logs for that change.  I will have to re-work how I do some things, but it isn't a significant part of my code.
06:53 < AnonymousFunctio> coderarity tried to convince me to do a full HTTP client in JS last night.
06:54 < coderarity> it's not that hard and it's very educational
06:54 < coderarity> :P
06:54 < AnonymousFunctio> coderarity: It's only educational if you don't know how HTTP works.  :-)
06:54 < AnonymousFunctio> otherwise, it's a pain in the ass  :-)
06:55 < AnonymousFunctio> However, my prodding around in the Node src was very educational.  That's my excuse anyway.
07:01 < AnonymousFunctio> Alright, time to go inside and do some performance tests on a wired connection.  Have a good one everybody!
07:09 < Nuck> Are there any good docs for the Request Composable APIs?
07:12 < duko> the layer of software that persists/returns data
07:13 < duko> what is this layer commonly called?
07:13 < Nuck> duko: Application layer
07:13 < Nuck> ?
07:13 < deoxxa> duko: the customer :<
07:14 < duko> not a trick question
07:15 < Nuck> duko: In the OSI model, it's Layer 7, the application Layer
07:16 < duko> thanks for the responses
08:05 < Industrial> Can't find anything about sessions in http://expressjs.com/api.html
08:12 < deoxxa> Industrial: you're right, there's also nothing there about converting video formats...
08:19 < gizmo--> ccccccbgjiculhhbfuttehcetvthunehflnhevhvtccb
08:22 < AAA_awright> Even fewer excuses to not use Git submodules now! https://github.com/Acubed/git-node
08:22 < AAA_awright> Now it'll git clone repositories listed as packages in package.json
08:23 < AAA_awright> BIG EXCITING NEW FEATURE
08:38 <@konobi> AAA_awright: unless the server is down
08:39 < AAA_awright> konobi: I guess, but that's not really a non-generic attack
08:40 <@konobi> well, unless you're doing CD
08:40 < AAA_awright> CD?
08:40 <@konobi> continuous deployment
08:41 <@konobi> there's also npm shrinkwrap
08:46 < AAA_awright> That completely defeats the point of developing with Git
08:46 < Industrial> deoxxa: guess it's connect middleware. I can get things from request.session when using the middleware but how do I set things in the session?
08:58 <@konobi> AAA_awright: how so?
09:00 < AAA_awright> Well maybe not like that, but the point of developing with Git is so you see the development histories of the trees that you depend on
09:00 < AAA_awright> Git is really awesome because two trees can have different development histories... npm packages loses all of that valuable data
09:01 < AAA_awright> shrinkwrap solves some problems, but not with libraries
09:04 <@konobi> AAA_awright: you're also assuming that all your dependencies will always be available in a git repo, with a history
09:04 <@konobi> and if i need history on a lib... i go to it's repo
09:05 < AAA_awright> Yeah, I am
09:06 < AAA_awright> If a dependency lacks a git repository/subtree to use, you just lose all that development history
09:06 < AAA_awright> Though I guess you could do a SVN import or whatever, if there is a development history
09:06 < AAA_awright> And use an import-mirror as a dependency
09:06 <@konobi> or hg, or perforce or...
09:07 < deoxxa> but git is decentralised!
09:07 < deoxxa> so it's better because of reasons!
09:07 < AAA_awright> deoxxa: Which is correct reasoning
09:08 < AAA_awright> konobi: Right.
09:08 < AAA_awright> Also ewww people still use perforce?
09:08 < AAA_awright> I thought SVN was bad enough
09:08 < deoxxa> there are still people using cvs
09:08 < AAA_awright> I'd rather take CVS over SVN because at least CVS has tags
09:09 <@konobi> yeah, perforce is still used a lot, especially commercially
09:09 < AAA_awright> All of the data to make a proper import is there, it's just that CVS isn't smart enough to know it. Git can handle that stuff fine.
09:09 < AAA_awright> Unlike Subversion, which actually completely lacks the data
09:12 <@konobi> i'll concentrate on my code during development, and poke out history elsewhere if i need to
09:12 <@konobi> =0)
09:15 <@konobi> just seems like optimization for the 0.01% case
09:15 < AAA_awright> konobi: What part?
09:16 < AAA_awright> I mean, the idea of using Git exclusively for downloading libraries should stand by itself
09:16 <@konobi> i don't see how that deals with downstream dependencies and version numbers
09:17 < AAA_awright> If you want to clone only a single version, Git supports that. If you want the full development history, Git supports that. If one server goes down, you have the commit id, you can download it from anywhere that has that commit and related blobs and trees
09:18 < AAA_awright> If npm goes down, you've got nothing
09:18 <@konobi> well, except npmmini and my local cache
09:18 < Raynos> Not really
09:18 < Raynos> you can trivially clone npm
09:18 < AAA_awright> It's not /exactly/ what I'd call trivial
09:19 < Raynos> sure it is
09:19 < Raynos> theres an npm module to do it for you
09:19 < AAA_awright> Not for most development, maybe for enterprise applications
09:19 <@konobi> npmmini is a short http server script
09:20 < AAA_awright> The fact it requires any setup at all means most people won't have it. I've only scarcely heard of it
09:20 < AAA_awright> If it requires any setup at all, that's asking a *lot* of users
09:20 <@konobi> then just use a mirror
09:21 < deoxxa> on that note, how many public npm mirrors are there?
09:21 <@konobi> https://blog.caurea.org/2012/01/31/local-npm-registry-mirror.html
09:21 <@konobi> not sure, tbh... they should probably get registered somewhere
09:22 < deoxxa> i wouldn't mind running one
09:22 < deoxxa> i've got the space and the bandwidth
09:22 < Raynos> AAA_awright: npm is unlikely to go down
09:22 < Raynos> just like github is unlikely to go down
09:22 < Raynos> and when it is
09:22 < deoxxa> Raynos: it already has, more than once
09:22 < Raynos> there are back ups
09:22 < Raynos> of both of them
09:22 < AAA_awright> Point is, "going down" is a non-generic consern
09:22 < Raynos> github has also gone down, more than once
09:22 < AAA_awright> er, generic consern
09:23 < AAA_awright> It's not non-generic
09:23 < Raynos> is shadow npm still running?
09:24 < deoxxa> i'd love it if npm took a list of hosts to try in succession
09:24 < deoxxa> i wonder how hard that would be to add
09:24 < AAA_awright> Or rather, weighted list to distribute randomly
09:24 < deoxxa> the npm code was rather twisty and turny last time i saw it
09:24 < AAA_awright> It's better than it was a year ago but it's still Pretty Bad
09:24 < deoxxa> AAA_awright: i'd like to have it try fetching from a local mirror first, then go out to the "public" npm
09:26 < AAA_awright> I'm waiting for some sort of Git search engine
09:26 < AAA_awright> "Which URL serves 'f7da4a7aba2a533717e35a27b5b659eb4391d39f'?"
09:26 < AAA_awright> Including local
09:26 < deoxxa> that'd be neat
09:27 < AAA_awright> I'd imagine there's all sorts of ways you could do it, starting with some bloom filters locally, then if that hits, you scan all the repositories you have, else you hit up a few remote endpoints and ask them the same thing
10:17 < user12345> hey people what tou think on this http://www.quora.com/Node-js/Is-it-a-good-idea-for-me-to-learn-node-js
10:19 < Raynos> user12345: the answer is troll worthy
10:19 < deoxxa> when is it a bad idea to learn anything?
10:20 < deoxxa> unless it's like "how it feels to eat 1kg of sand" or something like that
10:22 < Raynos> xd
10:26 < AAA_awright> Would it be considered good form to have an optional module loading function? i.e.:
10:27 < AAA_awright> modules.exports.data = function(){ return require('./data.json'); }
10:27 < AAA_awright> So one could load modules by proxy, I guess
10:28 < AAA_awright> From the application that would look like:
10:28 < AAA_awright> var data = require('module').data();
10:29 < AAA_awright> The use-case is having an index.js file which can load sub-modules. Often there may be a large number of modules which are highly related, and deserve to be in the same repository, but need not all be used at the same time.
10:58 < dsirijus> heya, can someone help me outline web site structure, node.js framework/sass-wise?
11:00 < dsirijus> actually, nvm, ignore me. i don't even have the specs of the functionality right :
11:00 < dsirijus> :D
11:01 < franck34> hi
11:02 < franck34> do you know if there is a way to use a particular DNS when using dns.lookup feature in node ?
11:02 < franck34> there is no way if i read the doc
11:02 < franck34> just asking ..
11:04 < deoxxa> what
11:04 < deoxxa> franck34: what's up, buddy?
11:05 < franck34> my OS use 1.2.3.4 for DNS by example, and i want to use 8.8.8.8 for node dns resolv
11:05  * franck34 speaking english like a spanish cow
11:06 < deoxxa> i don't think there's a way to do that
11:06 < deoxxa> node uses the system's DNS functions
11:07 < yawnt> https://github.com/tjfontaine/node-dns franck34 
11:09 < franck34> thx deoxxa 
11:09 < yawnt> *sigh* deoxxa takes all the credits
11:10 < deoxxa> well i'm clearly the best person to ever live
11:10 < yawnt> |:
11:10 < deoxxa> don't feel bad, yawnt
11:10 < yawnt> but
11:10 < yawnt> but
11:10 < yawnt> ;_;
11:10 < deoxxa> actually, no. feel bad.
11:10 < yawnt> ok
11:10 < yawnt> ç_ç
11:10 < yawnt> j/k
11:10 < deoxxa> franck34: do you mean just for doing DNS lookups, or for all DNS stuff?
11:10 < yawnt> deoxxa: you should continue bittorrent.js
11:10 < yawnt> i kinda need it
11:11 < franck34> only lookups/resolv
11:11 < yawnt> 13:07 < yawnt> https://github.com/tjfontaine/node-dns franck34 
11:11 < deoxxa> oh, then yeah, the thing yawnt mentioned will do nicely
11:11 < deoxxa> yawnt++
11:11 < deoxxa> tch
11:11 < yawnt> lol
11:11 < yawnt> i'm flattered
11:11 < franck34> yawnt: lol THANKS !
11:12 < yawnt> there we go
11:12 < yawnt> np, i was joking before anyway
11:12 < yawnt> :P
11:12 < deoxxa> yes! sweet, sweet recognition
11:12 < yawnt> exactly
11:12 < yawnt> first #node.js
11:12 < yawnt> next
11:12 < yawnt> #TheWorld
11:12 < deoxxa> but yeah, yawnt, i've been trying to think of a good way to do the client interfaces and stuff
11:12 < yawnt> found a youtube video of a guy playing Gangnam Style in a metal way
11:12 < yawnt> can you understand that korean deoxxa ?
11:13 < deoxxa> the protocol is there, it works, but i can't think of the best way to do stuff like client streams and stuff
11:13 < deoxxa> ha, only a tiny bit
11:13 < yawnt> i see
11:13 < deoxxa> i'm mui mui bad at korean
11:13 < deoxxa> so bad i have to express it in spanish
11:13 < yawnt> WOP WOP OPPA IS GANGNAM STYLE 
11:13 < yawnt> it's `muy`
11:13 < yawnt> sorry :(
11:13 < deoxxa> see!
11:14 < deoxxa> i'm even bad at spanish
11:14 < yawnt> i don't know spanish
11:14 < yawnt> but it sounds like italian
11:14 < yawnt> kina
11:14 < yawnt> *kinda
11:14 < deoxxa> spanish == italian
11:14 < deoxxa> (not ===)
11:14 < yawnt> MUCHO MUCHO PELIGROSO MI HERMANO 
11:15 < yawnt> yeah .. if you typecast italian.. i guess so
11:15 < deoxxa> i can actually only say one thing in spanish
11:15 < yawnt> vamos a bailar
11:15 < deoxxa> "estoy usando el internet"
11:15 < yawnt> esta vida nueva 
11:15 < yawnt> lol
11:15 < yawnt> in italian
11:15 < yawnt> "sto usando l'internet"
11:15 < deoxxa> yep, lost me
11:15 < yawnt> see.. they're similar
11:15 < deoxxa> ha
11:16 < deoxxa> yawnt: perhaps you can help me out, if you're a potential user of bittorrent.js
11:16 < deoxxa> basically i don't know how people are going to want to use it
11:16 < yawnt> well
11:16 < yawnt> i was thinking of buying a rasp
11:16 < yawnt> or something like that
11:16 < deoxxa> mhmm
11:16  * deoxxa takes notes
11:17 < yawnt> and turn it into a home server to download perfectly legal linux isos
11:17 < yawnt> :3
11:17 < deoxxa> ah yes, linux isos
11:17 < yawnt> exactly
11:17 < deoxxa> i have a couple of terabytes of linux isos here
11:17 < yawnt> aahaha
11:17 < deoxxa> many exotic distros
11:18 < deoxxa> maybe i should just go from the top down
11:18 < yawnt> The Dark Knight Rises Linux
11:18 < deoxxa> mock out a high level client
11:18 < deoxxa> all the way from `new bittorrent.Client()' through `bittorrent.PeerConnection' etc
11:18 < yawnt> lemme see what it does
11:19 < yawnt> also i'm gonna use connect-winston.. youhappy
11:19 < yawnt> ?
11:19 < deoxxa> the only thing implemented right now is bittorrent.Protocol.TCP iirc
11:19 < deoxxa> haha
11:19 < deoxxa> connect-winston ftw!
11:19 < deoxxa> i was surprised it wasn't a thing already
11:19 < yawnt> i guess you should be able to download & seed
11:20 < yawnt> and then it'd be nice to have a web app wrapper around it
11:20 < yawnt> which would require a client ofcc
11:20 < yawnt> *ofc
11:20 < deoxxa> yeah
11:20 < deoxxa> i want to make sure i don't lock anyone into using disk storage etc
11:21 < yawnt> yeah it'd kinda suck
11:21 < yawnt> you should just use streams and let people do what they want
11:21 < gildean> save all your downloads to a db?
11:21 < yawnt> i mean.. at somepoint of my life i will probably write some dlna server for nodejs
11:21 < deoxxa> yeah, except torrent data doesn't come in all in order
11:21 < yawnt> so i could download stuff with bittorrent.js
11:21 < yawnt> and stream it directly to my tv
11:21 < yawnt> without saving it anywhere you see?
11:21 < deoxxa> so it'd need to emit {position: 12345, data: Buffer(...)} objects or something
11:22 < yawnt> forgot that :/
11:22 < deoxxa> gildean: yeah, i'd love to be able to point it at mongodb or redis or something
11:22 < yawnt> you're right
11:22 < deoxxa> that's ok though, that's managable
11:22 < gildean> deoxxa: exactly my idea
11:22 < deoxxa> i guess in a high level client there's only a few events
11:23 < deoxxa> torrent#data, torrent#complete
11:23 < deoxxa> client#torrent-complete
11:25 < deoxxa> so it'd be like, `Client' -(has many)-> `Torrent' -(has many)-> `Peer'
11:25 < deoxxa> streams all the way down
11:25 < yawnt> deoxxa: multi transport layer for bittorrent
11:25 < deoxxa> the Torrent object would have to know how to read/write from/to its persistent data store
11:25 < yawnt> winstorrent
11:26 < deoxxa> yawnt: already a thing - there's uTP
11:26 < deoxxa> that's why i have the current protocol underneath TCP
11:26 < yawnt> i see
11:26 < deoxxa> i.e. BitTorrent.Protocol.TCP
11:27 < deoxxa> going to have to break parts of this out into submodules at some point as well i think
11:27 < yawnt> now the question is
11:27 < yawnt> how do you write data if stuff doesn't come in the right orther?
11:27 < yawnt> *order
11:27 < yawnt> i mean.. you'd have to write chunks right?
11:27 < deoxxa> well, you know the size of the torrent
11:27 < deoxxa> so you can reserve that in advance
11:28 < deoxxa> then just write the chunks to the right positions as they come in
11:28 < yawnt> uhm
11:28 < deoxxa> you can still "stream" them, just not straight into a file
11:28 < yawnt> didn't know you could do that.. i never really used files in dbs
11:28 < deoxxa> well i know you can do that with a file (not sure how to with node though)
11:29 < yawnt> well of course you can do that with a file, i was thinking about dbs
11:30 < deoxxa> depends on the backend
11:30 < deoxxa> also depends on how you stream the events coming in
11:30 < deoxxa> if you save each chunk separately, it's easy
11:30 < deoxxa> then again there's another unit below chunk, "block"
11:31 < yawnt> if you save chunks separately
11:31 < deoxxa> basically a chunk is of arbitrary size (usually a few mb), but that's way larger than the maximum amount you can request from a peer at a time
11:31 < yawnt> you'll have to put em all together in the end
11:31 < deoxxa> yeah
11:31 < deoxxa> exactly
11:32 < yawnt> damn it sucks so much that bittorrent doesn't work sync
11:32 < yawnt> i mean, it's better to have random chunks come in for performances
11:32 < yawnt> but... i wish i could just save as they come
11:32 < deoxxa> ha
11:32 < deoxxa> then what do you do if one of the first chunks is missing :P
11:32 < yawnt> random chunks means i can't stream directly to the tv
11:32 < yawnt> ;_;
11:32 < deoxxa> well you still can
11:33 < deoxxa> you just lose some efficiency
11:33 < yawnt> you delete the hell outta everything \ò/
11:33 < deoxxa> all you do is make sure you only request the next couple of chunks in the stream at all times
11:33 < yawnt> i see
11:33 < yawnt> i should read the protocol
11:33 < yawnt> feelin ignorant
11:34 < deoxxa> it's actually a lot simpler than you'd expect
11:34 < deoxxa> i always assumed it'd be crazy complex
11:34 < deoxxa> the complex part is in the application logic, keeping track of things like which peers have you choked etc
11:34 < deoxxa> https://github.com/deoxxa/bittorrent.js/blob/master/lib/protocol/tcp/parser.js << but that's literally the whole parser, so you can see how simple it is underneath
11:35 < yawnt> uh
11:35 < yawnt> quite easy
11:36 < yawnt> wouldn't it be better to use a switch {} there?
11:36 < deoxxa> perhaps
11:36 < deoxxa> can't remember why i did it that way
11:37 < deoxxa> one of the really really cool things i want to do is add a messaging layer on top of the protocol
11:37 < deoxxa> as you can see, the packet id is 8 bits, so you have a full 256 possible packets
11:38 < yawnt> yeah
11:38 < deoxxa> only about 15 of them are used in practice
11:38 < deoxxa> so i want to hijack a couple of ids for messaging and build a distributed chat thing with it
11:38 < deoxxa> using the existing bittorrent dht network to find peers
11:38 < deoxxa> a conversation topic would be linked to an SHA1 hash
11:39 < deoxxa> then you ask the dht "which peers have this 'torrent'"
11:39 < deoxxa> then you connect to them and talk about cats or whatever
11:39 < deoxxa> cats -> 8ebf601f8b808c32b8d2fb570c2e0fbdbb388add
11:40 < yawnt> lulz
11:40 < yawnt> p2p chat using the torrent protocol
11:40 < deoxxa> every client i know of just discards unknown packet types
11:40 < deoxxa> so it's completely safe
11:40 < deoxxa> even if you manage to somehow connect to the wrong type of client
11:40 < thanpolas> are you happy with eventEmitter's behavior on the special 'error' event?
11:41 < yawnt> thanpolas: no
11:42 < thanpolas> good to know...
11:42 < thanpolas> if i wanted an exception i'd just throw one...
11:42 < yawnt> i think that too
11:43 < yawnt> maybe there's some über clever reason i'm just not grasping
11:43 < deoxxa> i like what it tries to achieve (making everyone handle errors properly), but i don't like how risky it is
11:43 < deoxxa> i'd like it better if it spammed stderr or something
11:44 < deoxxa> yawnt: http://www.utorrent.com/help/documentation/utp
11:44 < yawnt> ohey italian :|
11:44 < deoxxa> lol?
11:44 < deoxxa> ha
11:44 < yawnt> yeah it's i18n
11:45 < yawnt> redirected to http://www.utorrent.com/intl/it/help/documentation/utp
11:46 < deoxxa> i hate it when websites use your ip to do that
11:46 < deoxxa> it's like "my browser is already telling you to display it in english, don't listen to my stupid ip"
11:46 < deoxxa> used to get it all the time in japan :<
11:46 < yawnt> nah
11:47 < dejanr> hi guys, i am getting wierd behavior for module exports, can someone take a look here https://gist.github.com/3477943
11:47 < yawnt> it works for like the 98% of the internet population
11:47 < yawnt> we're just a minority deoxxa 
11:47 < deoxxa> that means we're better than 98% of the internet
11:47 < deoxxa> sweet!
11:47 < yawnt> exports doesn't exist dejanr 
11:47 < yawnt> it's either module.exports or exports.<something>
11:47 < deoxxa> ^^
11:48 < dejanr> yawnt: i havent played for a while, i sure it worked some time ago :)
11:48 < yawnt> i wish there was ^^ updside down
11:48 < deoxxa> vv
11:48 < yawnt> not the same
11:48  * deoxxa looks for unicode
11:48 < yawnt> lol
11:49 < deoxxa> ˇ ˇ
11:49 < deoxxa> that's as close as it gets :<
11:49 < yawnt> http://nodejs.org/api/modules.html <- if you don't believe me dejanr 
11:49 < deoxxa> maybe ∨ ∨
11:49 < yawnt> that's better
11:49 < yawnt> but still
11:49 < yawnt> i wish i had japanese keyboard
11:49 < yawnt> i'd do crazy stuff
11:50 < deoxxa> japanese keyboards are annoying
11:50 < yawnt> (╯°□°）╯  ┻━┻) 
11:50 < deoxxa> it's hard to type normally with them
11:50 < yawnt> ヽ(`Д´)ﾉ ┻━┻
11:50 < yawnt> :3
11:50 < yawnt> it's a lot more creative than ours
11:50 < deoxxa> ┬─┬﻿ ノ( ゜-゜ノ)
11:51 < yawnt> why are you putting my table back >:(
11:51 < yawnt> ヽ(`Д´)ﾉ ┻━┻
11:51 < yawnt> there
11:51 < deoxxa> ┬─┬ ノ( ^_^ノ)
11:51 < yawnt> i wish there was a `blow up table` emoticon
11:52 < yawnt> i'd have won
11:52 < deoxxa> ┬─┬﻿ ︵ /(.□. \）あぶない！
11:53 < yawnt> lol
11:53 < yawnt> GANGNAM STYLE
11:53 < yawnt> WOP WOP WOP
11:53 < yawnt> this song is addicting
12:26 < thomasfr> Hi everyone
12:26 < SomeoneWeird> haidere
12:30 < sshaginyan> Hey guys I need to detect changes on a directory and everything inside of it. What would be the best way to do this? Should I traverse the directory and do fs.watch(filename, [options], [listener]) on every single file?
12:32 < thomasfr_> There is already a README.md file in it
12:34 < sorin7486> sshaginyan, I don't have much experience with node but from what I see in the api documentation you might be better off implementing that as a wrapper around some native code
12:35 < sorin7486> like C
12:35 < sshaginyan> why would you do that?
12:35 < sshaginyan> sorin7486: fs gives you everything
12:36 < sorin7486> sshaginyan, stability for fs.watch is 2
12:36 < sorin7486> also not sure how things are performance wise if your dir gets really large
12:37 < sorin7486> why don't you try it though
12:37 < sorin7486> I don't think there's any other way
12:37 < sorin7486> unless someone wrote a module for it
12:37 < sshaginyan> Don't want to use a module 
12:37 < sshaginyan> I'm just doing this to learn
12:38 < sorin7486> here we go...
12:38 < sorin7486> https://github.com/mikeal/watch
12:38 < sorin7486> you can have a look and see how mikeal implemented it
12:38 < sshaginyan> cool thanks
12:38 < thomasfr_> Okay. I have found an issue for this. The README.md file should not be empty
12:38 < sorin7486> it's 121 lines of code
12:38 < sorin7486> np
12:38 < thomasfr_> https://github.com/isaacs/npm/issues/2733
12:39 < sorin7486> anybody know how I can test if a callback is actually called in vows ?
12:39 < thomasfr_> The message "no README.md file found" is not precise enough
12:39 < sorin7486> when I use this.callback in topic I mean
12:40 < RLa> doesn't it have expect() function?
12:40 < sorin7486> I tried it and it looks like the vow just hangs there
12:40 < yawnt> Executing your 3 (export TRAVIS_NODE_VERSION=0.8) took longer than 0 minutes and was terminated.
12:40 < yawnt> well, that escalated quickly
12:41 < sorin7486> RLa, I don't think so
12:41 < yawnt> hey RLa !
12:41 < RLa> hey
12:42 < RLa> sorin7486, most testing modules have expect() function where you can give number of assertions it must run
12:42 < sorin7486> RLa, I've used Jasmine and I know it has, but there's nothing about that on the Vows website
12:43 < sorin7486> that's why I thought I'd ask here
12:43 < RLa> hm, seems like not :(
12:43 < sorin7486> thing is I'd expect it to do it on it's own
12:44 < sorin7486> I am executing something inside the topic and it should call this.callback
12:44 < sorin7486> I expected vows to be able to tell that it wasn't called since there's no point of doing the test then
12:44 < sorin7486> but it just hangs there
12:46 < sorin7486> ok I think I figured it out
12:47 < sorin7486> I have a connection to mongodb that seems to stop the test script form ending or something
12:47 < sorin7486> that's why it can't tell the test didn't run
12:48 < RLa> you should close mongo connection at the end of test
12:50 < aragon_> Hi all!!
12:50 < SkyRocknRoll> Welcome to irc aragon_ 
12:51 < aragon_> SkyRocknRoll: Hey!
12:55 < sorin7486> RLa, yeah, if I can only figure out how :)
12:55 < sorin7486> it has a takedown method but it doesn't do the trick
12:55 < sorin7486> I'll keep at it, thanks
14:00 < tqtqotoq> hi
14:00 < yawnt> ò/
14:00 < tqtqotoq> just did npm install expres @ w7 x64
14:00 < tqtqotoq> but still cant access express module at other dirs?
14:00 < tqtqotoq> Error: Cannot find module 'express'
14:01 <@konobi> npm installs to the local directory
14:01 < tqtqotoq> so why cant i access them from another dir?
14:01 < yawnt> you have to use npm install -g
14:01 < yawnt> where -g == global
14:01 <@konobi> nope
14:02 < yawnt> oh i thought he meant the binary
14:02 < yawnt> my dab
14:02 < yawnt> *bad
14:02 <@konobi> because you want to keep your dependencies local to the project
14:02 < deoxxa> omg i need a low latency sound module
14:02 < deoxxa> like right now
14:02 < deoxxa> ffff
14:02 < yawnt> QUICK
14:02 < yawnt> CODE IT
14:02 < deoxxa> can't
14:02 < deoxxa> :<
14:03 < tqtqotoq> i already added a env. path for nodejs
14:03 < yawnt> you just install deps locally
14:03 < yawnt> as konobi said
14:03 < tqtqotoq> can access node.exe from everywhere but not to modules
14:03 <@konobi> (in the node_modules directory)
14:03 < tqtqotoq> i know
14:03 < tqtqotoq> i can see express folder under C:\Program Files (x86)\nodejs\node_modules
14:04 < yawnt> when you call require
14:04 <@konobi> tqtqotoq: (mkdir foo; cd foo; npm install express; ls node_modules)
14:04 < yawnt> it checks <DIR>/node_modules
14:04 < tqtqotoq> but why can't i access it from other dirs while C:\Program Files (x86)\nodejs is an env path?
14:05 <@konobi> tqtqotoq: as far as you need to be concerned... it will only _ever_ check the relative node_modules directory
14:06 <@konobi> (relative to the CWD)
14:23 < tqtqotoq> does anyone know how can i disable development mode in express module
14:34 < darrenlooby> Ok. So... I'm wanting to add {id} into a text file. Then, have node pull out all the {id}'s and then search for each "id" and replace it with the value. Leave blank if key isn't there.
14:42 < chakrit> tqtqotoq: NODE_ENV=production node app.js
15:22 < thanpolas> why a route works when accessing via the browser, and returns 404 when hit via AJAX?
15:23 < thanpolas> never mind
15:25 < Benvie> process.env.path += ';'+require('path').dirname(process.execPath)
15:29 < tqtqotoq> do i have any problem if users can learn other users socketid at socket.io
15:32 < tqtqotoq> ip=socket.handshake['x-forwarded-for'] || socket.handshake.address.address;
15:32 < tqtqotoq> while socket.handshake['x-forwarded-for'] is exists ip= still socket.handshake.address.address;?
15:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:20 < clooth> I am a booger.
16:42 < strevat_> Hi all - nooby here. I'm having issues with the Express partials. Before I ask in detail, is this the right channel to be asking about Express templating problems? 
16:47 < AaronO_> Hi, I'm looking to recruit a Javascript developer based in Paris
16:47 < AaronO_> Anyone interested ?
16:47 < RLa> there is also #express
16:48 < RLa> interested in work, but i'm not from Paris
16:48 < AaronO_> Where are you from ?
16:49 < RLa> from Estonia
16:52 < AaronO_> RLa: That's a shame, we haven't had a terribly good experience working remotely with people
16:53 < RLa> that depends on people i guess
16:53 < AaronO_> RLa: So ideally we're looking for someone in Paris
16:53 < AaronO_> RLa: Yep, I know I spent a few years doing freelance development myself, with clients in America and Canada
16:54 < AaronO_> RLa: It's not an issue with the developers or how good they are, but distance often complicates communication
16:54 < RLa> true
16:55 < AaronO_> Anyone else interested ?
16:56 < RLa> seems quiet time in channel atm
16:57 < zomg> AaronO_: if you want good guys you might want to consider remoting ;) You could always get them for a try out and see how it works out
16:57 < zomg> Most of the time the problem with comms is working with people not used to remoting so you need to work it out together to come up how you want to improve it
16:59 < RLa> you could try to post into node jobs listing
16:59 < AaronO_> zomg: You are right indeed. Right now the company I'm recruiting for isn't willing to take the risk hiring remote developers
17:04 < darrenlooby> If I have an object with telephone numbers as keys - how do I pull out a partial match? So ?number=07506 will return key 07506230888?
17:06 < rio{> Object.keys(obj) then regExp match i guess
17:07 < zomg> AaronO_: Yeah it's hard to find companies open to that sadly. I'm pretty decent nodejs dev myself but can't really find work easily when you're in Finland and don't really want to move to somewhere completely different
17:07 < zomg> So I'm stuck doing PHP :P
17:10 < AaronO_> zomg: Yep luckily I was able to drop PHP a few years ago.
17:11 < AaronO_> zomg: Mostly writing Python, C, Clojure, Coffeescript and Javascript these days
17:11 < rio{> Rather write PHP than Coffeescript ;D
17:12 < AaronO_> rio{: I would rather jump off a bridge than use code from the PHP community
17:12 < zomg> There are some decent frameworks and libraries around these days
17:12 < zomg> thankfully
17:13 < AaronO_> rio{: To be honest, you'll probably come to same conclusion that languages themself don't matter that much, I've written a lot of PHP code. But what turns me away from PHP isn't the language itself but quality of code in the wild
17:13 < zomg> Indeed
17:13 < zomg> PHP is alright if you get to work with people who know what they are doing
17:13 < zomg> Sadly this is often not the case
17:13 < AaronO_> zomg: Exactly
17:13 < zomg> =)
17:13 < rio{> I have the same issue with coffee basically. I immedietly dismiss a node module if it's written in Coffeescript.
17:13 < AaronO_> zomg: It's like that regardless of the technology
17:13 < zomg> Yeah
17:13 < rio{> AaronO_: I agree on that
17:14 < AaronO_> rio{: Coffeescript in my opinion is just Javascript with a nicer syntax
17:14 < zomg> Yeah, CS is a bit nicer to write and read 
17:14 < AaronO_> rio{: And nicer constructs
17:15 < AaronO_> rio{: Named arguments, list comprehensions, etc ...
17:15 < AaronO_> rio{: I'm a big fan of functional programming and write a fair amount of Clojure in my free time. But I don't think that it would be fair to force other devs to write Clojure
17:16 < rio{> To each it's own I guess. I don't like the syntax at all
17:16 < AaronO_> rio{: Especially knowing how many of them can't see the beauty of lisp behind the parenthesees
17:17 < AaronO_> rio{: Part of the beauty is that isn't really much of a specific syntax
17:17 < AaronO_> rio{: Anyway, I'm not here to start another language war ;)
17:18 < AaronO_> Just wondering if there are any good devs available 
17:18 < rio{> Me neither :) let's stop this quickly before the flame starts :D
17:21 < AaronO_> zomg: Do you have a github profile or a link to a portfolio ?
17:23 < RLa> AaronO_, looked at logic languages too?
17:23 < zomg> AaronO_: no node stuff on my github but here https://github.com/jhartikainen , be sure to check my site as well (linked there) =)
17:24 < RLa> they do not get mentioned at all :/
17:24 < zomg> Prolog?
17:24 < zomg> Did a bit of that out of curiosity
17:25 < crassus> why don't we all just use APL?
17:25 < RLa> i wrote a small blog engine in prolog
17:26 < yawnt> ò/
17:26 < RLa> https://github.com/rla/blog
17:26 < RLa> for some reason github thinks that .pl files are perl :/
17:27 < zomg> interesting
17:27 < zomg> seems like a bit of an odd choice for something like this though :D
17:27 < RLa> it's running quite well and is pretty fast
17:28 < AaronO_> RLa: I wrote a web framework in C with a template engine and all a while back
17:28 < AaronO_> RLa: Wrote a blog and a forum with that framework
17:28 < AaronO_> RLa: Most things I have to develop quickly these days I do in Python
17:28 < RLa> using apr style mem management?
17:29 < AaronO_> wasn't using apr
17:30 < RLa> i.e mem pool for request?
17:30 < AaronO_> the framework supported the CGI and fastCGI protocols
17:30 < RLa> i remember using cgi with turbo pascal :)
17:31 < AaronO_> RLa: No I wasn't using a memory pool
17:31 < RLa> i think web stuff in c would be suitable for embedded systems
17:31 < AaronO_> That's what I wrote it for
17:32 < RLa> like routers with web conf interface
17:32 < AaronO_> to start off with
17:34 < AaronO_> I need to get back to looking for candidates
17:34 < AaronO_> zomg: RLa I'm writing a project with a friend you might like : http://friendco.de
17:35 < AaronO_> A social network for programmers revolving around a real time collaborative web based code editor
17:36 < RLa> going to try out
17:36 < zomg> AaronO_: interesting idea
17:37 < RLa> hm, like pair programming but with separate computers?
17:37 < AaronO_> zomg: We think so too. We're currently doing a private Alpha
17:37 < AaronO_> RLa: Pair programming is one of the things you can do with it
17:38 < AaronO_> RLa: I have a background in data mining and "big data", so I'm currently working on a few interesting things
17:39 < zomg> AaronO_: one thing I've found out with remote stuff especially lacking is that you can't easily collaborate over a single computer
17:39 < zomg> Like if you are working face to face, you can easily just point on the screen like yeah I want this to be here or whatever
17:39 < zomg> Haven't seen any solutions for that which would allow you to have a more hands on experience from the remote POV
17:40 < AaronO_> The editor is collaborative and real time
17:40 < AaronO_> You can't chat with the people viewing the same file
17:40 < zomg> Yeah there seems to be a few editors which can work like that
17:40 < AaronO_> They see your cursor you see there's
17:40 < zomg> But I mean sharing the entire desktop or such in a fashion which lets the remote people interact with it in some fashion without distracting the person actually working on it
17:41 < AaronO_> so you can highlight things
17:41 < zomg> Some seem to allow the remote end to take control of the cursor but that's kinda bad, should be more like a pointer for them
17:41 < AaronO_> zomg: We're entirely web based
17:41  * rudevich requests an invite at friendco.de
17:44 < AaronO_> rudevich: Enter your email on the site
17:45 < AaronO_> And we'll send you an invite as soon as we can. We're adding users progressively we've got over a thousand or so requests for an invite
17:45 < AaronO_> rudevich: If you really want in send me your email by PM and I'll send you a code
18:03 < ctult> I can't seem to get node-static to work with Flatiron.
18:52 < ACK__> is npm is similar like rubygems?
18:53 < _ctult> Can you use Director to do recursive routing? (etc. /a/b/c and /a/d/x/h)
18:54 < Aria> Yes, but distinctly different in a lot of its design decisions
18:54 < Aria> It installs into your project by default.
19:00 < ACK__> is npm is similar like rubygems?
19:00 < ill0> yes.
19:46 < ctult> How would you use Director to do recursive searching? (ex. /a/b/c/d or /a/test/35)
19:51 < jesusabdullah> ctult: just make routes for both?
19:51 < jesusabdullah> ctult: it traverses routes "in-order"
19:52 < jesusabdullah> ctult: #nodejitsu is a pretty good place to ask these kind of questions <_<
20:36 < etcetera> anyone have a static site generator they like?
20:37 < RLa> using jade
20:38 < etcetera> yea wintersmith seems cool.
20:38 < etcetera> docpad has more github followers. but also does a lot more.
20:40 < mmalecki> etcetera: blacksmith
20:42 < etcetera> mmalecki: why?
20:43 < mmalecki> etcetera: easy to theme
20:43 < etcetera> mmalecki: are there nice pre-baked themes with blacksmith?
20:43 < gkatsev> are there many other static site generators for node?
20:45 < etcetera> wow wintersmith has an uuuugly default theme.
20:45 < mmalecki> etcetera: don't know really
20:48 < TehShrike> On *nix, is there an easy way to say "divert all incoming traffic meant for this domain to port 8080, and divert all incoming traffic meant for this other domain to port 9000"?
20:48 < mmalecki> TehShrike: not really - it would have to be based on Host header
20:49 < zomg> TehShrike: you would need to put something to proxy it on port 80. Apache can do it with mod_proxy I think, and so can applications like varnish
20:49 < mmalecki> use proxy, like node-http-proxy
20:49 < zomg> I use varnish myself to do that across several domains, works rather nicely
20:49 < TehShrike> Sweet, I'll check those things out.
20:50 < zomg> If you want to know how to do it with Varnish, I wrote about it here http://codeutopia.net/blog/2012/04/15/how-to-run-apache-and-nodejs-based-sites-on-the-same-server-with-varnish/
20:50 < TehShrike> I was wondering if there was a way to do that at the operating system level so that I wouldn't have to launch any node processes using sudo (to use port 80)
20:50 < zomg> It's more about apache/node but you can use the same approach with pretty much anything
20:50 < TehShrike> Awesome, thanks!
20:51 < TehShrike> What's Varnish's memory consumption like?
20:52 < zomg> Dunno, I'm running all this on a linode 512 MB RAM VPS
20:52 < zomg> Seems to be running fine =)
20:52 < TehShrike> Is it the only thing running on that VPS, or is it sharing with some node processes?
20:53 < zomg> Yes, the VPS runs Apache and two node applications
20:53 < TehShrike> Kick-ass.
20:53 < zomg> although they don't get that much usage, just some experiments and other small stuff
20:53 < timeturner> what's the max number of clients you've hit on that 512 MB box?
20:53 < timeturner> I'm curious because I'm still running on 256 and about to go into production...
20:53 < zomg> I had like 1200 simultaneous connections on one of my  socket.io based experiments at one point when it got a small popularity boost =)
20:54 < timeturner> whoa
20:54 < TehShrike> Sweeeeeeet
20:54 < zomg> It was a little bit laggy at that point but otherwise ran fine
20:54 < TehShrike> I love living in the future
20:54 < mmalecki> zomg: now.jit.su was having like 2000 simultaneous connections
20:55 < timeturner> what happens if you have a burst to like 4000 or something
20:55 < timeturner> just a peak
20:55 < zomg> No idea :P
20:55 < timeturner> how much memory would one need at that point though
20:55 < mmalecki> at nodejitsu we just spin up moar servers
20:56 < timeturner> well can't you add more virtual mem to that one instance?
20:56 < TehShrike> So let's just say, theoretically, that I'm not that good at linux >_< how difficult is Varnish to configure?
20:56 < timeturner> I mean if you're running it on a box with linode or something
20:57 < zomg> TehShrike: there's a bunch of guides on it, you just need to edit a couple of config files
20:57 < zomg> well maybe like one or two tops
20:58 < TehShrike> As long as it acts fairly reasonably out of the box, all I'd need to do is send traffic for one domain to one port, and traffic for another domain to a different port
20:58 < zomg> Seems to be fine
20:58 < zomg> All I changed was the backend configurations like shown in my post
21:02 < etcetera> anyone here used jekyll before then?
21:02 < etcetera> seems they have a better ecosystem of themes.
21:04 < TehShrike> Man
21:04 < TehShrike> So many people making so many cool projects
21:15 < TehShrike> lol. http://vanilla-js.com/
21:20 < gkatsev> etcetera: there's also, hyde, if you prefer python :)
21:20 < etcetera> gkatsev: I do like the language but do not enjoy the ecosystem.
21:21 < gkatsev> etcetera: you dont like python's ecosystem?
21:22 < etcetera> gkatsev: python and ruby tend to break heavily across versions.
21:22 < gkatsev> ok
21:22 < etcetera> not sure how .NET managed to get that part right and everything else wrong.
21:22 < AAA_awright> TehShrike: Fail
21:22 < gkatsev> someone should create a port of it to node but what would it be called?
21:24 < AAA_awright> require('jsdom'), require('http'), require('canvas')
21:25 < AAA_awright> The "fail" is that many of those are non-native-ES APIs
21:29 < douh> hello, i'm setting nginx with node, in a vps. i have everything installed and working. the only thing missing is to http://wellconsidered.be/post/10519707671/node-js-on-nginx . where is location of the file i have to inserted the suggested code? 
21:30 < TehShrike> AAA_awright: eh? Is that a response to the vanilla-js link?
21:30 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:31 < AAA_awright> Yeah
21:33 < TehShrike> I don't get it
21:33 < TehShrike> The page doesn't talk about any of those things
21:44 < AAA_awright> TehShrike: It's right on the page... It covers XMLHTTPRequest, DOM, etc
21:52 < etcetera> wowow.
21:52 < etcetera> docpad is super complex.
21:53 < TehShrike> AAA_awright: I think that page is talking about JavaScript in the context of browsers...
21:53 < AAA_awright> TehShrike: Still, it's not a library that works in Node.js
21:53  * TehShrike blinks
21:54 < TehShrike> The site is a joke, there's no framework called vanilla-js
21:54 < AAA_awright> Ooohhh I can troll them so hard right now
21:54 < TehShrike> It's a joke, because people use those other frameworks to do stuff that JavaScript in the browser can already do out of the box
21:54 < TehShrike> And do fairly simply, as they demonstrate there
21:55 < mmalecki> var $ = document.querySelectorAll
21:55 < TehShrike> mmalecki: :-D
21:55 < AAA_awright> @topaz2078 Vanilla JS is giving me "ReferenceError: XMLHttpRequest is not defined" on Node.js what am i doing wrong?!!!!!!1
21:56 < AAA_awright> Should I?
21:58 < mmalecki> AAA_awright: DO IT
21:59 < TehShrike> >_<
21:59 < brandon_r> hi
21:59 < brandon_r> what are some websites to keep up with realtime web development?
21:59 < mmalecki> brandon_r: twitter
21:59 < brandon_r> like the next great node library, website built using node
21:59 < AAA_awright> mmalecki: Well that just sounds like you have a grudge against @topaz2078 :p
22:00 < AAA_awright> Better:
22:00 < AAA_awright> @topaz2078 Vanilla JS is giving me "ReferenceError: XMLHttpRequest is not defined" What am i doing wrong? You support Node.js right?
22:01 < timeturner> I love how Vanilla is captalized
22:02 < timeturner> reply: Chocolate JS doesn't give me errors! The problem was the flavor of JS all along!
22:03 < AAA_awright> I added a trailing /s because I hate trolling :p
22:03 < AAA_awright> But there
22:03 < AAA_awright> Happy, mmalecki?
22:04 < mmalecki> AAA_awright: indeed I am!
22:06 < TehShrike> brandon_r: https://plus.google.com/108249232416813189685/posts/2Snx6RP4BsT
22:06 < TehShrike> But a lot of awesome people are on Twitter too.
22:07 < TehShrike> brandon_r: most of the top third of my following list is from the JS crowd https://twitter.com/i/#!/following
22:07 < AutowiredConstru> Most so-called trolls are immature boys (sometimes actual children, and sometimes just childish)
22:07 < brandon_r> Sorry, that page doesn’t exist! 
22:11 < brandon_r> omfg
22:11 < brandon_r> i've been trolled by vanilla.js
22:16 < mscdex> i wonder if node would run on a zaurus
22:16 < mmalecki> zaurus?
22:17 < AutowiredConstru> in the real world where the most advanced algorithm I seem to use is the occasional binary search...
22:17 < maxogden> you must not be doing big data
22:17 < mscdex> sharp zaurus, old clamshell handheld
22:17 < fent> how would i properly check if a variable is a stream? would `foo instanceof (require('stream'))` work? what about for modules that don't inherit Stream like request?
22:17 < mscdex> i think it's armv5 or something
22:17 < AutowiredConstru> i want, but i don't find any big data
22:21 < maxogden> fent: .writable, .readable, .pipe()
22:25 < samholmes> Is it secure enough to have a Forgot Your Password feature that just sends an email to the user with their password in the email. What are the security concerns with this solution>
22:25 < samholmes> ?
22:26 < AAA_awright> samholmes: If you're able to look up someone's password you're doing it VERY WRONG
22:27 < samholmes> AAA_awright: Oh right, I forgot that I have my passwords hashed.. :P
22:27 < SomeoneWeird> lmao
22:27 < SomeoneWeird> not using md5 and with salts i hope
22:28 < AAA_awright> samholmes: if you email someone a "reset your password" link, that's alright too... But make sure you take care of that as well as you do passwords, too. Email them a temporary password (in the form of a URL), and keep that URL hashed in the database.
22:28 < AAA_awright> *that's alright, period
22:28 < AAA_awright> Access to the database shouldn't expose password reset links or passwords, alike
22:29 < AAA_awright> samholmes: And make sure it's salted. Use pbkdf2 with 0.1s worth of iterations
22:29 < AAA_awright> Use a randomly generated salt, 128 bits at least, etc
22:30 < AAA_awright> And Node.js's crypto routine is an ugly duckling, make sure you use Buffer(value, 'binary') encoding. Explicitly specify that 'binary' encoding.
22:49 < drewp> anyone want to recommend an http client with a working timeout? shred isn't it
22:51 <@konobi> drewp: setInterval not sufficient?
22:52 < drewp> where i write the timeout and cancel the request correctly, if it's not already done or finishing? this is the *point* of an http client lib, right? :)
22:52 < drewp> https://github.com/spire-io/shred/issues/39 shred API is fine; it just doesn't work
22:53  * drewp looks at https://github.com/mikeal/request
22:55 < AvianFlu> drewp: just use request?
22:55 < AvianFlu> yeah exactly
22:57 < AAA_awright> mmalecki: @topaz2078: @awwright Make sure you choose "AJAX" in the module selector; if it still doesn't work, try turning your computer off and back on
22:58 < AAA_awright> Trolololo
22:58 < AutowiredConstru> troll is forbidden here
22:59 < mmalecki> lolololol
23:04 < xpollen8> how to properly fetch the value of x.1? var x = { 1: 'a' } console.log(x.1)
23:05 < xpollen8> x is populated by mongodb fetch which happily allows field names to be integers
23:06 < zomg> xpollen8: x[1]
23:06 < xpollen8> buh!  i was certain i had tried that already.  thanks
23:06 < zomg> yeah if that doesn't work, then x['1']
23:06 < zomg> don't see why it wouldn't though
23:08 < AAA_awright> AutowiredConstru: Trolling isn't not forbidden here
23:09 < AutowiredConstru> you get kicked for trolling i read
23:09 < AAA_awright> You must live under a bridge
23:09 < AutowiredConstru> but before you get a warning
23:10 < AAA_awright> See trolling people's sex is bad, but if you troll trolls, does the universe implode?
23:10 < AvianFlu> you get kicked for mean trolling
23:10 < AvianFlu> some trolling is gentle and funny
23:10 < AAA_awright> I think that went without saying but whatever
23:11 < AvianFlu> I THINK YOU WENT WITHOUT SAYING
23:11 < AvianFlu> XD
23:12 < AutowiredConstru> okay that is actually really nice. i will start trolling tommorrow
23:13 < AAA_awright> zomg: x[1] is by definition functionally the same as x[(1).toString()], even though there might be internal optimizations for numeric-formatted keys such they don't get stored as strings
23:13 < AAA_awright> (just accessed)
23:13 < AAA_awright> How does one troll an anti-trolling policy?
23:13 < AAA_awright> AvianFlu: YOUR MOM GOES TO COLLEGE
23:13 < Killswitch> By being a master troll.
23:16 < Killswitch> So does anyone know if Node runs any smut sites?
23:18 < zomg> Killswitch: I doubt smut sites are that bleeding edge
23:18 < zomg> lol
23:18 < Killswitch> What? Porn pioneered the internet.
23:18 < zomg> I recall hearing they did pioneer something related
23:18 < zomg> but yeah
23:18 < mmalecki> AAA_awright: yeah, there are optimizations for integer keys
23:19 < mmalecki> you get best effects when you create an array with no holes in it
23:19 < AAA_awright> Killswitch: Node.js may or may not run a personal database of artwork
23:19 < Killswitch> zomg: I don't see a reason why Node wouldn't be good for an adult site. If it can run mainstream it should be able to run smut no problem.
23:19 < mmalecki> as in, 0, 1, 2, 3, ...
23:20 < AAA_awright> Killswitch: Really the problem is that Node.js is just a library, not a website as such
23:20 < AAA_awright> or platform as such
23:20 < Killswitch> AAA_awright: I have 11 years experience working in adult building websites, I've learned Node.js and am thinking of building a pornhub.com replica system in Node.
23:21 < AAA_awright> Killswitch: What special considerations do adult websites have over others?
23:21 < Killswitch> What do you mean?
23:22 < AAA_awright> Killswitch: Is it something you particularly need experience for or can you just use any media-sharing platform?
23:22 < Killswitch> I don't know, just know that PHP dominates in the adult realm, and figure, why the hell not?
23:22 < Killswitch> In the end the language used to build the site doesn't matter as long as it works.
23:23 < Killswitch> But I thought "hey, I wonder if anyone else has had this idea yet"
23:23 < pringlescan> is there a callback for when a visitor is "done"?
23:37 < AutowiredConstru> trinkst du gerne fettarme h-milch?
23:40 < AutowiredConstru> Im Mobilmarkt entscheidet der Stromverbrauch über die Technologie! Deshalb sind technische Krücken wie Java (nicht JavaScript!), Flash, WPF, Silverlight etc. schon bald mausetod.
23:40 < AutowiredConstru> good german troll!
23:40 < AutowiredConstru> ggT
23:51 < clooth> Has anyone had problems using node-canvas, when putImageData doesn't seem to work?
23:51 < clooth> it just skips the line and makes anything after not run
23:52 < jtomasrl> is it a good choice to use public keys for encrypting HTTP request/responses when making an API?
23:52 < maxogden> use oauth or https or both
23:54 < jtomasrl> so i dont encrypt the params myself?
23:55 < AaronATX> can someone help me with this socket.io+mysql problem?  i think it has to do with scope but i'm not sure.  http://pastebin.com/z7A3SqRW
23:57 < mscdex> AaronATX: what if you use some other simple query for the one that has problems? does it work then?
23:57 < mscdex> like "SHOW DATABASES" or something
23:58 < mscdex> or "SELECT 1 AS foo"
--- Log closed Mon Aug 27 00:00:32 2012
