--- Log opened Wed Mar 20 00:00:47 2013
00:04 < jleibow> I have a passport question, if anyone has a chance to help out.
00:05 < Logicgate> ask away
00:05 < jleibow> so i keep getting an error after a user is authenticated
00:06 < jleibow> http://pastebin.com/kE16beWn
00:06 < jleibow> that's my error
00:07 < jleibow> i've got kind of a crazy hybrid of things going
00:07 < Logicgate> looks like next isn't a function
00:07 < Logicgate> need to see your code
00:07 < Logicgate> ca you paste your code
00:08 < jleibow> https://gist.github.com/joelleibow/5201284
00:09 < jleibow> that's my code
00:11 < jleibow> the account gets authenticated fine, but somehow blows up within passport before completing authentication and i can't figure out why
00:12 < jleibow> it's during the success callback that the blow up occurs
00:12 < Logicgate> have you tried dissecting your code
00:12 < Logicgate> I know you're saying it's within the callback
00:13 < Logicgate> But have you tried removing the call back function to see if the error still occurs?
00:15 < Logicgate> you don't seem to be passing anything to the authenticate function
00:18 < jleibow> i'm finding a bit more info on the passport site.
00:19 < jleibow> trying it now with disabling sessions, since i don't need them.
00:19 < Logicgate> Your code is quite messy, hard for me to follow
00:20 < jleibow> seriously?
00:21 < jleibow> i'm curious what you deem "clean"
00:22 <@Nexxy> well is it kosher?
00:24 < Logicgate> jleibow, It's well commented. It more of the synthaxing and the way it's organized that doesn't make it readble for me.
00:24 < Logicgate> We all code differently, and obviously I haven't worked on your project.
00:24 < jleibow> i'm coming from a heavy google closure world. i follow their linter.
00:25 < niggler> what's synthaxing Logicgate 
00:26 < echo> I can't find anything wrong with your codes aesthetics, jleibow. It's as I would have written it, with the exception of the included function information in the comments, which I commend you for.
00:26 < echo> code's*
00:27 < dypsilon_> suddenly nobody cares about passport issue anymore :)
00:28 < gkatsev> what issues do they care about instead?
00:28 < Logicgate> Lol
00:28 < jleibow> the issue is that i'm not using any of the built in after hooks
00:28 < jleibow> or providing my own custom ones
00:29 < jleibow> i'm figuring it out now
00:29 < jleibow> passport noob
00:29  * dypsilon_ is looking at passport right now, too
00:30 < dypsilon_> i'm wondering if it's a bad idea to use 2 legged oauth for browser <-> server auth
00:30 < s5fs> I find the code too readable. Where's the mystery? Character development? Plot twist?
00:30 < Logicgate> jleibow
00:30 < Logicgate> passport.authenticate('local')(req); -> passport.authenticate('local', req);
00:32 < Logicgate> passport.authenticate requires two parameters doesn't it?
00:32 < Logicgate> one being the destination and the other being the callback.
00:32 < Logicgate> or request I should say
00:33 < dypsilon_> https://github.com/jaredhanson/passport-local/blob/master/examples/login/app.js
00:33 < dypsilon_> first parameter is the strategy, second parameter is an object with redirects
00:34 < Logicgate> ah right, it's the redirects..
00:34 < Logicgate> :(
00:37 < MI6> joyent/node: piscisaureus created branch temp - http://git.io/ltP0dg
00:41 < MI6> joyent/node: Raymond Feng v0.10 * 25eaaca : fs: make write/appendFileSync correctly set file mode - http://git.io/-LpNXA
00:50 < andrewaclt> Anybody using node on ubuntu (and Chris Lea PPA), did you have problems with node-waf after you upgraded?
00:50 < tjfontaine> andrewaclt: file a bug with whatever module you're trying to use, they're broken
00:51 < tjfontaine> iow: node-waf is dead, long live node-gyp
00:51 < andrewaclt> node-canvas :(
00:52 < tjfontaine> something is wrong then, because node-canvas has a bindings.gyp
00:52 < tjfontaine> *binding.gyp
00:52 < tjfontaine> perhaps something is depending on a too-old version?
00:53 < andrewaclt> npm http 304 https://registry.npmjs.org/canvas/0.10.2
00:53 < andrewaclt> npm WARN engine canvas@0.10.2: wanted: {"node":">= 0.4.0 && < 0.7.0"} (current: {"node":"v0.10.0","npm":"1.2.14"})
00:53 < andrewaclt> looks like :)
01:00 < perlitch> substack: does brfs only allow for absolute paths passed to readFileSync?
01:01 < MI6> joyent/node: Ben Noordhuis master * ad819bc : src: bump NODE_MODULE_VERSION after abi change (+13 more commits) - http://git.io/DuT5HQ
01:11 < perlitch> substack: nvm it has to be absolute because the code is just a string when it goes through brfs
01:12 < seismo> o there
01:15 < seismo> https://github.com/borismus/osmus/blob/master/server/level.js this guy defines a module with a constructor and prototype and all that. and in the circle.js example here http://nodejs.org/api/modules.html that doesn't seem to be necessary. why is that?
01:15 < andrewaclt> Is there a reason a bin folder would not be created after an npm link if I have a "bin": { :myapp": "./bin/myapp"} directive?
01:17 < lovemuffin> seismo: it's two different things
01:18 < lovemuffin> preference i guess you could say
01:18 < seismo> lovemuffin: mhm ok. what's the difference?
01:19 < lovemuffin> you said it
01:19 < lovemuffin> he exports a constructor
01:20 < lovemuffin> the other one is just exporting functions
01:20 < JamesMGreene> isaacs ryah Nexxy mbalho bnoordhuis et al: Does Node core have a CI build of some nature? If so, who can tell me about it? I'm hoping that you have something setup where it is run on Linux, Mac, and Windows boxes
01:23 < seismo> lovemuffin: aaah, just looked at the require call :) now i get it. thanks very much
01:23 <@mbalho> JamesMGreene: isaacs or tootallnate would know i bet
01:25 < bnoordhuis> JamesMGreene: http://jenkins.nodejs.org/
01:27 < JamesMGreene> bnoordhuis: 404
01:27 < JamesMGreene> http://jenkins.nodejs.org:8080/
01:28 < JamesMGreene> Soooo... those build statuses are scary :-o
01:28 < JamesMGreene> Anyway, does your Jenkins setup for Node.js core somehow delegate to VMs to build on the other OS configuration? Or do you only have CI for just Linux?
01:29 < bnoordhuis> JamesMGreene: ask tjfontaine, he maintains is
01:30 < JamesMGreene> tjfontaine: How does your Jenkins setup for Node.js core delegate to build on the various OSes (Windows 32/64, MacOSX 32/64, Linux 32/64, Solaris 32/64, etc.)?
01:30 < zeromodulus> :(
01:31 < zeromodulus> I suck at asynchronous programming.
01:32 < Techie-Micheal> zeromodulus: It's a different way of thinking. It just takes time.
01:32 < zeromodulus> I'm trying to figure out how to get my app working with the npm package orm.
01:32 < zeromodulus> Yeah...
01:32 < zeromodulus> :/
01:32 < zeromodulus> I understand it, kind of.
01:33 < zeromodulus> :P
01:33 < Techie-Micheal> :P
01:33 < Techie-Micheal> Some parts I get, others make me to do that head tilt thing when it messes with my mind.
01:34  * JamesMGreene looks over his shoulder
01:34 < JamesMGreene> Have you guys tried using Promises?
01:34 < zeromodulus> I need to figure out a way to define my models, and then get the model initialization to take place after the db connects.
01:34 < JamesMGreene> Makes thinking about async programming much simpler IMHO
01:35 < zeromodulus> Nope.
01:35 < Bergle_1> promises appear to have great value to me so far, but only just getting into them.
01:36 < JamesMGreene> Check out "when" (https://github.com/cujojs/when) or "Q" (https://github.com/kriskowal/q)
01:36 < zeromodulus> I guess I should keep reading my Node.js book.
01:36 < zeromodulus> ._.
01:40 < JamesMGreene> `Q.all` is pretty much the only way I will ever attempt to handle waiting for multiple async calls to all return
01:40 < zeromodulus> I have no idea how to get the stuff in my callbacks out of my callbacks. ._.
01:42 < JamesMGreene> zeromodulus Got an example?
01:42 < zeromodulus> No. :(
01:43 < holzp> zeromodulus, try async lib
01:43 < holzp> it will help you organize them
01:43  * zeromodulus weeps.
01:44 < JamesMGreene> Well, I mean basically you either need some reference object/var that is available outside of all the callbacks you want to work with it in; OR your callbacks have to "bubble up" if they are sub-callbacks (e.g. get username -> get password -> use both to login -> pop back up to the top indentation level)
01:44 < baalexander> what's the best way to install node v0.8 on Ubuntu? the ppa:chris-lea/node.js installs v0.10
01:45 < zeromodulus> But then, it's like, how do those callbacks... I don't even know how to ask, lol.
01:45 < JamesMGreene> Oh yeah, async is a good module too
01:45 < JamesMGreene> a bit more Node-esque than the other two
01:45 < zeromodulus> I mean, like, if you visualize the callback pipeline, you have to stick your code you want run after some event after the event occurs in the callback line.
01:46 < zeromodulus> But then I need the results or whatever after that.
01:46 < zeromodulus> I want to define models after the database connects.
01:47 < zeromodulus> So, to ensure the models are defined *after* the database connects, the model definition needs to take place in the db connection callback, right?
01:47 < holzp> zeromodulus, you can make you database emit a 'ready' event then kickoff when that happens
01:47 < zeromodulus> eh, I think I should just read this book some more.
01:47 < zeromodulus> I have a couple books.
01:48 < zeromodulus> One on Node.js, and one on Async JavaScript.
01:48 < holzp> you gotta just write and write to get the hang of it
01:48 < holzp> the async lib helps!
01:48 < zeromodulus> Eh, yeah, I've been doing that for a while, just hacking and hacking until something works.
01:49 < zeromodulus> I think it might help to have some formal knowledge though.
01:51 < JohnnyL> can someone tell me how stable node.js and how many simultaneous users it can attend to?
02:03 < bingomanatee> Has anyone used the canvas rendererer with node.js ? hints?
02:07 < inspiron> is it possible to do two folders with express.static 
02:14 < gkatsev> why is the default file watching interval 5007ms?
02:15 < gkatsev> (for fs.watchFile)
02:17 < JamesMGreeneAway> EyePulp Your nick  is a bit disturbing
02:27 < EyePulp> JamesMGreene: Sorry.  =)
02:30 < samholmes> Is there a way to do a sort of sourceURL thing for css bundles with Stylus?
02:31 < samholmes> That way I can read where the declaration is in my project files vs just seeing that it's somewhere in bundles.css
02:31 < luhx> Hi!
02:32 < luhx> Any freelancer available?!
02:32 < luhx> (Brasileiro seria melhora ainda, hehe)
02:32 < JohnnyL> luhx: what'st he project
02:32 < JohnnyL> ?
02:32 < JohnnyL> luhx: what's  he project?
02:35 < bradleymeck> samholmes: http://bricss.net/post/33788072565/using-sass-source-maps-in-webkit-inspector
02:37 < b1lly> when you use npm install
02:37 < b1lly> do you have to be in a certain directory
02:37 < bradleymeck> b1lly: it will find the first module root (something that has node_modules / package.json)
02:39 < b1lly> it somehow downloaded into my cwd
02:39 < b1lly> i downloaded socket.io
02:39 < niggler> JohnnyL it's to write "what's the project?" correctly
02:39 < JohnnyL> [INFO]	You are now ignoring niggler.
02:43 -!- JohnnyL was kicked from #Node.js by Nexxy [JohnnyL]
02:44 <@mbalho> that escalated quickly
02:45 < JohnnyL> JohnnyL	too bad.
02:45 < JohnnyL> 	Nexxy	please be respectful
02:45 < JohnnyL> 	JohnnyL	stop disrespecting me. i did not allow you to message me.
02:45 < JohnnyL> 	Nexxy	you're welcome to come back when you can be respectful toward people
02:45 -!- mode/#Node.js [+b *!*chatzilla@*.dyn.optonline.net] by Nexxy
02:45 <@Nexxy> yeah that's a great way to get help
02:45 < jrajav> Durrraaaaaammmaaa
02:45 < AAA_awright> JUSTICE
02:45 < jrajav> Emphasis on the durr
02:46 < Havvy> Wow. That has to be on the top ten of dumbest knowledable people I've seen.
02:50 -!- mode/#Node.js [-b *!*chatzilla@*.dyn.optonline.net] by Nexxy
02:50 < samholmes> bradleymeck: how do I apply this to stylus?
02:51 < bradleymeck> samholmes: unsure on glance, but it has been done with sass, probably need to make stylus output the same
02:53 < b1lly> in ubuntu where does node install too?
02:53 < b1lly> what id
02:53 < b1lly> dir
02:53 < jrajav> That's not how source maps work. It's not * <-> CSS, it's SASS <-> CSS
02:54 < jrajav> Stylus would need first-class support as well for you to be able to source map it
02:55 < jrajav> Oh, ignore me completely, I don't know what I'm talking about apparently. They seem to have done it in a language-agnostic way
02:56 < deoxxa> b1lly: depends where you ask node to install to
02:56 < niggler> lol
02:56 < niggler> did ubuntu change node or is node still the older project?
02:56 < deoxxa> b1lly: if you installed it with aptitude or apt-get or one of the 9001 frontends in *ubuntu, it could be basically anywhere
02:57 < niggler> on debian, node is some really old project that predates node by decades
02:57 < echo> IIRC Fedora decided to rename the old node, which IIRC is a ham radio something or other.
02:57 < Lorentz> node - Amateur Packet Radio Node program (transitional package)
02:58 < niggler> so you are better off first looking for nodejs b1lly 
02:58 < gkatsev> just install from source
02:58 < gkatsev> on linux, much better
02:59 < deoxxa> or download the binaries for even more win
02:59 < deoxxa> http://nodejs.org/dist/v0.10.0/node-v0.10.0-linux-x86.tar.gz
02:59 < deoxxa> so, so simple
02:59 < deoxxa> download, extract, put into $PATH, call it a day
02:59 < gkatsev> I keep forgetting that binaries exist for linux
02:59 < b1lly> do i install socket.io in my web project or in my node_modules dir
03:00 < deoxxa> b1lly: i refuse to believe that there are no step-by-step tutorials out there
03:00 < gkatsev> in your project dir, `npm install socket.io`
03:01 < niggler> you know, there's a real binary mystery to me
03:01 < b1lly> ah, thought it had to go into my node_modules
03:01 < niggler> for windows, why are the x64 binaries in nodejs.org/dist/v…/x64?
03:01 < niggler> for linux, osx etc both x86 and x64 versions are in the main directory
03:02 < niggler> its just windows 64 bit that's in the x64 dir
03:02 < bradleymeck> history with the WOW64 folders in the windows dir
03:02 < niggler> even for the installer?
03:02 < niggler> i can buy node.exe being separated (same filename)
03:03 < niggler> but the msi's are different
03:03 < deoxxa> same with .lib etc
03:03 < niggler> node-v0.10.0-x86.msi versus node-v0.10.0-x64.msi 
03:03 < bradleymeck> for bundled binaries that arent going in the program files nightmare, idk why the installed does that
03:03 < bradleymeck> windows' install process makes me sad and confused and i know more about it than most
03:04 < bradleymeck> the rise of appdata gives me some comfort though
03:25 < ningu> what's the easiest way for me to run multiple upstream clones of the same node app? is there something out there to make that really simple?
03:25 < bradleymeck> cluster?
03:28 < ningu> hmm... ok
03:28 < ningu> so it does its own load balancing?
03:28 < ningu> is that better than having nginx do it?
03:31 < lovemuffin> the downside is you can only load balance for the processes on a server
03:32 < ningu> lovemuffin: I know, that's ok
03:33 < lovemuffin> oh then the kernel schedular would do a better than job than nginx
03:33 < b1lly> with node, if you are running a file.js (is there away to include other files to this)
03:35 < lovemuffin> b1lly: http://nodejs.org/docs/latest/api/modules.html#modules_modules
03:41 < ningu> lovemuffin: looks like cluster, if you mean the learnboost module, doesn't work on 0.10.
03:43 < kenperkins> there's a cluster native to nodejs
03:43 < kenperkins> and, I always recommend a hardened webserver out front 
03:43 < kenperkins> nginx, etc
03:43 < ningu> kenperkins: is there any advantage then to running multiple node processes behind nginx?
03:44 < ningu> assuming for now that it's a single core server
03:44 < kenperkins> well, node is single threaded, so if your boxes are multi-core, having cluster...
03:44 < kenperkins> nm
03:44 < kenperkins> (as you just said single core)
03:44 <@Nexxy> linode has 8 core servers for $20/mo
03:44 < ningu> Nexxy: AWS micro instance for now.
03:44 < kenperkins> so no, if they're single core boxes, just one process per box is fine
03:44 < ningu> not my choice
03:45 < lovemuffin> why do you need a load balancer for a single core server anyway?
03:45 < kenperkins> usually for HA
03:45 < ningu> lovemuffin: that was my question. I thought maybe multiple processes would allow more requests. but I guess not.
03:49 < tjfontaine> _JamesMGreene: labels
03:54 < kenperkins> my standard config is 2x boxes running node, and a load balancer of some form, Rackspace and AWS both have them, or 2x nginx instances with heartbeat
03:58 < Franz__> somebody can help with simple exame with node-mysql ?
04:02 < JamesMGreene> tjfontaine: labels?
04:02 < JamesMGreene> tjfontaine: (WAT?)
04:03 < tjfontaine> JamesMGreene: you asked how I build by platform?
04:04 <@isaacs> JamesMGreene: you get a 404 from http://jenkins.nodejs.org/?
04:04 < tjfontaine> nah, the proxy was down for a bit
04:05 < ningu> so forever doesn't really work on 0.10 yet... but someone here mentioned a decent alternative, can't remember what it was
04:05 < tjfontaine> and I hadn't been using forever after jenkins keeled over a few times
04:06 <@isaacs> oh, ok
04:06 <@isaacs> that's not a 404, technically speaking
04:07 <@isaacs> that's a ECONNREFUSED
04:07 <@isaacs> Nexxy++
04:07  * isaacs never got the "I didn't allow you to message me" thing
04:07 <@isaacs> it's not as if you're going to their house.
04:08 < Franz__> somebody can help with simple exame with node-mysql ?
04:09 < Techie-Micheal> isaacs: eh, I did that when I was actively supporting an open source project because I had several things going on at once, and having the question in public (if it wasn't sensitive) allowed the answer to be in public, helping everybody else in the channel. To each his or her own I suppose.
04:09 <@isaacs> Techie-Micheal: well, sure.  if someone asks me a question in pm, i'll usually tell them to ask in the room.
04:10 <@isaacs> Techie-Micheal: but like, an op telling you in pm to be nice is actually them trying to be respectful and not dress you down in public.
04:10 <@isaacs> and people often get upset about this.  i don't grok.
04:11 < Techie-Micheal> isaacs: This is true. I was thinking more the reverse. Being an op and getting random /msg without notice.
04:11 < Techie-Micheal> isaacs: This is true. I was thinking more the reverse. Being an op and getting random ./msg without notice.
04:11 <@isaacs> right
04:11 < Techie-Micheal> Whooops. Double post. Silly scrollback.
04:11 <@isaacs> heh :)
04:11 < bolkin> i have node 0.10.0 built from sources on linux, db-mysql module fails to install, apparently it looks and fails to find node-waf which was removed in 0.8, does it means that this module is unmaintained?
04:14 < ningu> is there any way to install node 0.8.22 from chrislea's repository? it looks like not :(
04:15 < JamesMGreene> tjfontaine: Right but what does labels have to do with it?  I'm talking more about the setup for spawning/communicating with the various OS boxes/VMs, etc.
04:21 < mscdex> ningu: no v0.10 love?
04:27 < tjfontaine> JamesMGreene: the linux/osx/smartos use ssh for spawning, I use jnlp for windows
04:29 < mscdex> bolkin: i believe it is abandoned by the looks of it
04:33 < willwh> bolkin: any reason you need to use mysql?
04:33 < willwh> just familiar with it? :]
04:33 < JamesMGreene> tjfontaine: Interesting. Is it anything reusable or all very specific to Node?
04:34 < tjfontaine> JamesMGreene: that part is all built into jenkins
04:34 < JamesMGreene> Even jnlp?
04:34 < tjfontaine> ya, that's known as "java web start"
04:34 < JamesMGreene> nice
04:35 < JamesMGreene> And then do you use real servers for the various OSes, or VMs, etc.? If VMs, what's your setup (e.g. VirtualBox, Vagrant, etc.)?
04:35 < tjfontaine> as far as one job that supports multiple platforms, that's a question of how your builds are triggered
04:35 < tjfontaine> JamesMGreene: we use the joyent public cloud of course
04:36 < JamesMGreene> Well basically where I'm coming from is that I'd like to setup a cross-platform CI build for PhantomJS as well
04:36 < tjfontaine> what's the buildsystem for it?
04:37 < tjfontaine> ah qmake
04:37 <@isaacs> ningu: he's got a "node-legacy" thingie now
04:37 <@isaacs> ningu: which will have 0.8 and be upgraded to 0.10 when 0.12 drops
04:38 < JamesMGreene> tjfontaine: Yeah, `qmake` and then `nmake`/`make`
04:39 < JamesMGreene> plus a UPX compression at the end
04:39 < JamesMGreene> nothing terribly fancy, and all cross-platform
04:39 < tjfontaine> JamesMGreene: there's a node plugin for jenkins, we use that for scripting the build, and making the proper decisions based on platform
04:40 < JamesMGreene> public repo?
04:41 < tjfontaine> no but I can do that tomorrow, it's pretty straight forward though, basically just a series of spawn()'s that check for exit codes and process.exit(exitcode) if it's non-zero
04:41 < JamesMGreene> oh ok
04:42 < tjfontaine> roughly the equivalent of ./configure && make && make install
04:42 < tjfontaine> it uses os.cpus() to know what to pass for -j and other things like taht
04:44 < JamesMGreene> Sooooo any chance a fellow cross-platform OSS JavaScript project like PhantomJS can get some free [for more than 30 days] Joyent Public Cloud machines? =)
04:44 < JamesMGreene> tjfontaine isaacs ryah ^
04:44 < ningu> mscdex: well, it's annoying that I can't use 'forever' on v0.10 yet
04:44 < tjfontaine> JamesMGreene: that's above my paygrade
04:45 < ningu> mscdex: anyway it's not that big of a deal
04:45 < JamesMGreene> isaacs ryah ^^   =)
04:45 < tjfontaine> JamesMGreene: I also need to do a plugin that only spins up/down slaves when they're needed, that would save monies
04:45 < JamesMGreene> fo sho
04:46 < tjfontaine> there are already examples for things like ec2, so if you end up somewhere else
05:02 < shmoon> what is 61 http://pastie.org/6635535 ?
05:02 < shmoon> binary representation of 'a' ?
05:02 <@Nexxy> yes
05:03 < shmoon> hm i thought binary was 0s and 1s - sorry i'm bad with low level concepts
05:03 < Havvy> It's the decimal value of the ASCII 'a'.
05:03 < shmoon> the hex value actually
05:04 < inolen> ^^ yes
05:05 <@isaacs> JamesMGreene: yeah, not really something i get too involved with
05:05 <@Nexxy> shmoon, parseInt(61, 16, 10)
05:05 <@isaacs> JamesMGreene: could ask sales@joyent.com if there's any kind of deal or something for oss
05:05 <@Nexxy> shmoon, 'a'.charCodeAt(0)
05:06 < niggler> woah woah since when Nexxy did parseint take 3 args
05:06 <@mbalho> everything takes infinite args
05:06 <@mbalho> duh
05:06 <@Nexxy> lol
05:06 < shmoon> Nexxy: um yeah i know those. basically i guess the console.log of buffer converts binaries to hex to show up ? internally they;re stored as binary, am i getting it right ?
05:06 < inolen> shmoon: I think you're being confused by the concept of encoding
05:06  * niggler slaps niggler
05:07 <@Nexxy> niggler, I think I just do that to remind me what base we're going to
05:07 <@Nexxy> shmoon, yeah, it's "binary"... you're just 'viewing' it in hex
05:07 < shmoon> yes thanks man
05:08 < zeromodulus> Ha ha! I'm using the callbacks!
05:08 < zeromodulus> :D
05:08 < Havvy> shmoon: Everything is internally stored as binary. ;)
05:08 <@mbalho> you got your code to run after your other code
05:09 < Havvy> Since it is hex... 0110 0001
05:10 < zeromodulus> I can't believe it, I think I'm getting the hang of this async thing. :O
05:10 < zeromodulus> I can believable.
05:11 < ningu> zeromodulus: yay!
05:11 < zeromodulus> n.n
05:11 < zeromodulus> actually, reading callbackhell.com really, really helped.
05:12 < inspiron> anyone know a good built script that will change all relative urls to an absolute urls (provided I give the base url to use) of css files
05:13 <@Nexxy> inspiron, path.resolve
05:14 < b1lly> how do i get node to stop printing all the data and flooding my terminal so i can read my console.logs
05:15 < ningu> b1lly: ?? depends what you're using
05:15 < zeromodulus> Anyone use UltraREPL?
05:15 < ningu> but you can set log levels on pretty much anything that logs stuff
05:16 < ningu> nah I prefer repl without a cause
05:19 < zeromodulus> UltraREPL... it's flashy and cool, but it's lacking certain features. :(
05:19 < zeromodulus> Or buggy, rather, I dunno. It sucks in certain ways, basically.
05:22 < uptownben> Hey all
05:23 < uptownben> trying to decide on a good setup for node where I push some heavy tasks off to a custom C library. Doing some video processing. Any suggestions?
05:27 < bradleymeck> uptownben: since crossing the JS/C bridge is going to cost you a memcpy id just check it against an IPC bridge
05:28 < uptownben> Would Kue be able to handle that?
05:34 < bradleymeck> uptownben: kue in npm? idk why you would need that
05:35 < shmoon> can someone help me find a tutorial that explains https://github.com/dominictarr/through better with some code that solves practical problems maybe?
05:36 < uptownben> Well, I'd want to push those calls to C to a queue, wouldn't I?
05:36 < bradleymeck> uptownben: not really, you queue stuff as callbacks on uv's event loop
05:37 < pyykkis> shmoon: i'd use stream2 api nowadays
05:37 < pyykkis> shmoon: http://nodejs.org/api/stream.html#stream_class_stream_transform
05:40 < b1lly> is there a way to avoid multiple connections from same user? different tabs in browser?
05:42 < AAA_awright> Who'd like to provide feedback on http://magnode.org/
05:42 < AAA_awright> I'd like to know what missing features people consider absolutely essential for an initial release
05:42 < AAA_awright> If you already have MongoDB at hand it should take 5-7 minutes, I hope
05:43 < shmoon> pyykkis: checking
05:44 < shmoon> man these things feel complex. the current project i am working on seems to have been writte by some mastermind involving sockets, streams and what not.
05:44 < Techie-Micheal> b1lly: I'm still trying to figure out how to do sessions sanely in Node, so I can't help you there. :(
05:45 < shmoon> pyykkis: it says unstable at top
05:49 < pyykkis> shmoon: we'll, it's better than deprecated? :]
05:49 < pyykkis> btw, here's nice examples: https://github.com/joyent/node/blob/master/test/simple/test-stream2-transform.js
05:50 < uptownben> bradleymeck: didn't follow you there.
05:50 < bewest> shmoon: apparently sockets and streams are a fundamental building block
05:50 < s3shs> I need to pick someone's brain about queues.
05:50 < pyykkis> not to say that through module would be actually deprecated, it works fine and is used in a lot of places
05:50 < s3shs> bradleymeck, you're here!
05:50 < bradleymeck> mmmm?
05:51 < uptownben> bradleymeck: your suggestion is not to use a separate queue package?
05:51 < s3shs> May I pick your brain about queues and node.js?  (For transactions.)
05:51 < bradleymeck> s3shs: i guess
05:51 < s3shs> thanks
05:51 < bradleymeck> uptownben: in general no, if you do need backpressure maybe
05:51 < pyykkis> shmoon: I find new stream api quite a bit easier and consistent, though https://github.com/isaacs/readable-stream
05:51 < s3shs> What's better, transaction objects, multiple connections?  Either way I need to pass an object with the request all the way through to the commit, right?
05:52 < s3shs> Read that as "transaction objects" or "multiple connections'.  :-)
05:53 < ahungry> hey everyone, anyone like testing early stage browser based games?
05:53 < s3shs> (Oh well?)
05:54 < bewest> link ahungry?
05:54 < bradleymeck> s3shs: well you need to have a message queue, and the queue is the authority for rollback
05:54 < s3shs> It seems a bad idea to have just one connection.
05:55 < s3shs> A pool of connections seems like a better idea.  Maybe limited to a size that keeps performance up.
05:55 < ahungry> http://tactics.ahungry.com/play/
05:55 < bradleymeck> the queue may be able to handle multiple connections (ie redis) but it is a centralized lock generally so you cannot have multiple transactions that lock things concurrently (they have to wait in turn while rows/tables/ids are locked)
05:55 < s3shs> But I still will have to pass around a connection.
05:55 < ahungry> Also source is at http://github.com/ahungry/ahungry-tactics
05:55 < ahungry> its a tactics style game with cards as the moves you can play
05:56 < ahungry> use wasd or hjkl to move target cursor (r to reset it back to your unit) mouse integratino is borked right now
05:56 < ahungry> press M on a panel to move there
05:56 < shmoon> pyykkis: ok man thanks i'll do some study on these links
05:56 < ahungry> or 1 to 4 to play corresponding card
05:56 < s3shs> I guess the part I'm uncomfortable with is passing around the connection until the commit.
05:56 < bradleymeck> s3shs: as long as you are locking resources to enforce transactions, i would just move to a central lock db using redis, leveldb, etc. doing connection pooling you still have to implement the locking logic in process
05:56 < s3shs> Passing it through dozens of functions will be hard.
05:57 < uptownben> So let's say I have an executable that I need to run via exec, to process some video, wouldn't that get crazy after a few of those processes are running?
05:58 < s3shs> bradleymeck, is there a way to have async or some library keep track of the current "thread" of computation so I don't have to pass around an object?
05:58 < bradleymeck> s3shs: domains
05:59 < s3shs> Damn.  I knew you were gonna say that!
05:59 < s3shs> So I can keep using all my async code?  Examples of domains with transactions?
06:00 < bradleymeck> s3shs: dont have any off top of my head
06:00 < s3shs> Looks like stability is "2" in the new node.js.
06:01 < s3shs> Thank you for the pointer.  This will hopefully be fun.
06:01 < bradleymeck> they havent really changed in last 12~ months except fixing nesting in 0.10
06:01 < s3shs> That's actually very good news.
06:05 < s3shs> I'll dive in.  Thanks.
06:05 < zeromodulus> I finally did it...
06:06 < zeromodulus> :D
06:06 < bradleymeck> ?
06:06 < zeromodulus> Used callbacks successfully.
06:06 < zeromodulus> :P
06:08 < mscdex> callbacks ftw!
06:11 < AAA_awright> ^5
06:11 < mscdex> and events!
06:11 < AAA_awright> ^10
06:12 < owen1> s3shs: what is the scenario you got? what kind of app r u building? 
06:13 < s3shs> A big one.  I'm reading about domains now.  Again.
06:14 < owen1> s3shs: i am curious about the queue. would u mind eloborating?
06:14 < s3shs> I guess I'm wondering, if I add req and res to my domain, and then call my cascade of functions that require them.... inside those functions, how do I get ahold of the current domain.
06:15 < s3shs> owen1, you mean transaction-queues or pools-of-connections?
06:15 < bradleymeck> s3shs: process.domain (may be null/undefined if not in a domain)
06:16 < owen1> s3shs: yeah
06:16 < bradleymeck> also require('domain').current if i remember right
06:16 < s3shs> bradleymeck, that's it?
06:16 < s3shs> bradleymeck, yeah, I"ll have to do that once.
06:16 < bradleymeck> .active
06:17 < s3shs> owen1, see transactions: https://github.com/bminer/node-mysql-queues and pools: https://groups.google.com/forum/#!topic/nodejs/0lCVApyI118
06:18 < s3shs> bradleymeck, I don't see .active in the docs at http://nodejs.org/api/domain.html
06:18 < s3shs> (bah.)
06:18 < bradleymeck> s3shs: ive used em too long without reading docs, process.domain is probably the "proper" way since you can only have 1
06:19 < bradleymeck> superimposed domains would be cool, but a nightmare
06:20 < s3shs> How were you born with this knowledge?  ;-)
06:21 < s3shs> So I get a connection from three clients.  I create a sub-domain for each of them under the process domain.  In to each I .add(req) and .add(res).  So when I call myHandler(), I can call domain.active()?  domain.current()?  Neither are in the docs.
06:21 < s3shs> They sound incredibly helpful.  Do I need to read the source?
06:23 < bradleymeck> s3shs: probably, reading source and experimenting is a good idea, module-smith has been using it for a while 
06:23 < bradleymeck> we will be adding domains to our api servers sometime soon
06:27 < zeromodulus> :(
06:27 < owen1> s3shs: thanks
06:28 < zeromodulus> How would you persist this database connection? https://gist.github.com/zeromodulus/5202714
06:28 < zeromodulus> I use this wee little module by requiring it, then calling .connect(), passing it a callback.
06:29 < zeromodulus> but... it looks like subsequent .connect() calls make a brand new connection, so all the .connect() calls I did previously, all of the callbacks I passed to those basically appear to have had no effect.
06:30 < ningu> zeromodulus: you should return a connection object
06:30 < ningu> I don't know what 'orm' is
06:30 < zeromodulus> orm is an object relational mapper.
06:30 < ningu> I know
06:30 < ningu> I mean I don't know that module
06:30 < zeromodulus> I don't think the module works like that. :/
06:30 < ningu> but generally in node db drivers, connect() is a sync method that returns an object
06:31 < zeromodulus> But it takes a callback, so doesn't that mean it's async?
06:31 < ningu> yeah.
06:31 < ningu> I'm thinking about how you could deal with that.
06:32 < zeromodulus> :)
06:32 < zeromodulus> I thought maybe if I did exports.orm = orm; the orm object would be cached.
06:33 < ningu> nah
06:33 < ningu> that won't really help
06:33 < zeromodulus> I know I'm doing it right... the first time...
06:34 < zeromodulus> the .connect method passes a db object to the callback.
06:34 < ningu> well, I'd say that based on how it works, you can't use the singleton pattern
06:34 < ningu> you need to connect once at the beginning of your app and pass the connection object down to whatever needs it
06:35 < zeromodulus> to where one can do, db.define('table_name' {attribute: value})
06:35 < zeromodulus> I thought I would need to persist the db object...
06:35 < zeromodulus> I think that's the connection object.
06:35 < zeromodulus> Pretty sure.
06:36 < ningu> right
06:36 < zeromodulus> the argument that gets passed to the callback in .connect(), that's the interface to the database.
06:36 < zeromodulus> so, maybe if I exports.client = db...?
06:36 < ningu> so you save that at the beginning and keep using it
06:36 < ningu> no, because require() is not async
06:36 < ningu> it won't work
06:36 < zeromodulus> x.x
06:38 < zeromodulus> Then, it appears, this may be impossibru.
06:39 < zeromodulus> v.v
06:40 < s3shs> bradleymeck, where's the domain source?
06:40 < zeromodulus> hmm... maybe I should choose a different module for the orm.
06:41 < zeromodulus> because, it looks like this one isn't maintained any more.
06:41 < bradleymeck> zeromodulus: node really really really will fight you if you don't do dependency inject / functional pass by arguments. shared variables and globals will prove painful (and are anyways during very complex systems)
06:41 < zeromodulus> Er, nevermind...
06:41 < zeromodulus> what's dependency inject?
06:41 < bradleymeck> s3shs: https://github.com/joyent/node/blob/master/lib/domain.js
06:41 < zeromodulus> require('foo')(some_foo)?
06:42 < bradleymeck> http://en.wikipedia.org/wiki/Dependency_injection
06:42 < s3shs> Than you!
06:43 < bradleymeck> zeromodulus: basically w/e input expects an implementation matching an interface (be it in the constructor or as an argument)
06:44 < zeromodulus> O.o
06:46 < bradleymeck> zeromodulus: for an easier explanation, w/e needs to have the state should pass in an argument for w/e reference they depend on
06:46 < zeromodulus> oh... kind of makes sense.
06:47 < s3shs> Bingo: // the active domain is always the one that we're currently in.
06:47 < s3shs> exports.active = null;
06:47 < zeromodulus> so like, require('some_module')(this_is_what_is_needed)?
06:47 < bradleymeck> zeromodulus: yes
06:49 < zeromodulus> how does that make shared variables and globals easier to work with?
06:49 < bradleymeck> you dont have them so you don't have shared cache issues
06:49 < s3shs> All of domains are implemented in 241 lines of code?  Holy crap.
06:50 < bradleymeck> s3shs: yep, just must be in core for makeCallback
06:53 < s3shs> bradleymeck, does this sound right? (1) create global domain.  (2) create subdomains for every transaction and add(req)/add(res) on each.  (3) From within whatever cascade of functions, when I need res, just call globalDomain.active().res/req?  Or will res/req just appear in my scope automatically?
06:53 < prettyrobots> Hello, noders.
06:53 < uptownben> Anyone know of any examples of setting up node to handle incoming video and do video processing via external executables (ie. ffmpeg)?
06:54 < prettyrobots> https://transloadit.com
06:54 < prettyrobots> uptownben: https://transloadit.com
06:55 < prettyrobots> That's an exmaple, I believe. 
06:55 < uptownben> coo, I'll check it out
06:56 < bradleymeck> s3shs: sounds about right
06:57 < s3shs> So which is it to get res/req?
06:57 < s3shs> .active().res or just res?
06:57 < s3shs> I guess I'll have to play.  Poke around in the debugger.
06:57 < bradleymeck> .active.res set domain.res when you enter it
06:58 < uptownben> prettyrobots: That's pretty cool, but I am looking to set up node myself, rather than using a service. So I'd be doing what transloadit does (on a small scale) on my server. Just trying to figure out the best options/setup to handle that sort of thing with node...
06:58 < prettyrobots> uptownben: I understand. I point you at it to let you know that its very much possible.
06:58 < s3shs> is .active() a global, or does something come before the dot?  :-)
06:59 < bradleymeck> its on require('domain')
06:59 < uptownben> I've been reading about people using RabbitMQ, but haven't seen any examples on setting that up to run external executables.
07:00 < s3shs> So I see in the examples they're doing .add(req), but you said domain.req = req;  Same thing?
07:01 < s3shs> (Sorry to ask so many questions.)
07:03 < bradleymeck> s3shs: i think so (thats what i have done)
07:08 < s3shs> So through a long thread of computation gDomain.active() will "just work" and tell me what particular domain I'm active in?  That is so cool.
07:09 < s3shs> Even across nextTick boundaries?
07:09 < s3shs> Wow.
07:10 < s3shs> bradleymeck, this changes everything.  Thank you.
07:13 < Sninja> nodejs odejs in Red Hat Enterprise Linux AS release 4 (Nahant Update 7) to use it?
07:13 < Sninja> Linux testserv1 2.6.9-78.ELsmp #1 SMP Wed Jul 9 15:39:47 EDT 2008 i686 i686 i386 GNU/Linux
07:36 < test> hi
07:36 < zaleb> hi
07:36 < test> its cool :)
07:57 < hello_world> hello world
07:57 < hello_world> anyone here tonight?
07:59 < hello_world> (crickets)
08:09 < wao> tonight?
08:10 < wao> morning.
08:20 < inetfuture> Could anyone tell me is it multi-threaded or not in underlying layer of node.js? tanks.
08:22 < inolen> inetfuture: yes.
08:22 < inetfuture> In all platforms?
08:23 < inolen> yes.
08:24 < inetfuture> What about windows IOCP?
08:25 < inolen> I have no idea what that is.
08:25 < inolen> I'm speaking having not worked with any of node's internals.
08:27 < inetfuture> Then why you answered yes?  Where did you learned that from, please?
08:28 < inolen> We're working in a single threaded event loop and magically accomplishing async i/o.
08:28 < inolen> That I/O has to be performed somewhere.
08:28 < inolen> e.g. a thread pool
08:29 < Bergle_1> its not threaded, its a single threaded env.
08:29 < Bergle_1> there is no set of processor threads
08:29 < Bergle_1> on an 8 core system you will use 1 core with one instances of node.js running - [thats excluding what os or other processes might use ]
08:29 < MI6> joyent/node: Fedor Indutny master * ab0cde0 : v8: unbreak build on smartos after 31af97df211f046 - http://git.io/fcN50w
08:30 < inetfuture> But pool/epoll can be non-blocking, I guess? and windows has an complete AIO mechanism: IOCP
08:30 < MI6> joyent/node: Fedor Indutny master * 40b1c9a : v8: unbreak build on smartos after 831af97df211f04 - http://git.io/GQsUaQ
08:31 < inolen> Bergie_1: Only the JS runs in a single thread.
08:32 < [AD]Turbo> hi there
08:34 < _ninja> node.js in Red Hat Enterprise Linux AS release 4 (Nahant Update 7) use it?
08:38 < inetfuture> If it's still thread-pool in underlying layer, how could it be faster that traditional one thread per connection model? thanks.
08:38 < garmur> Hey, just wondering if anyone here would know this off the top of your head... is it possible to manipulate the require.cache so that you can require a previously required module using a different name? So for example, require('./test.js'), then manipulate the cache entry to have require('test') return the cached test.js export?
08:39 < garmur> possibly ridiculous question! Some simple testing in the REPL came up with no joy :/
08:46 < inetfuture> If it's still thread-pool in underlying layer, how could it be faster that traditional one thread per connection model? thanks.
08:52 < faceleg> so
08:52 < faceleg> is node-tap the current "best" test fraemwork?
08:52 < faceleg> I'm looking to port tests from nodeunit to something else as nodeunit seems dead and won't work for me since upgrading node
08:57 < faceleg> looks like nodetap it is!
09:03 < faceleg> no comments on test frameworks!
09:03 < faceleg> ! = ?
09:04 < faceleg> omfg why are there so man ytest frameowrs?
09:04 < faceleg> frameworks
09:04 < faceleg> https://github.com/joyent/node/wiki/modules#wiki-testing
09:17 < faceleg> actually I just reinstalled nodeunit and it works
09:17  * faceleg wipes sweat from brow
09:17 < faceleg> phew
09:28 < faceleg> anyone here?
09:28 < faceleg> ?
09:37 < ExxKA> Loads of people here
09:37 < ExxKA> Like almost a thousand :)
09:37 < ExxKA> so yes, faceleg
09:38 < hello> we're here
09:39 < boffbowsh> Anyone know if the docs for 0.8.x are still available anywhere?
09:39 < ExxKA> boffbowsh, all the docs are available
09:39 < ExxKA> They are on the node website
09:39 < ExxKA> http://nodejs.org/dist/v0.8.12/docs/api/ 
09:39 < boffbowsh> Am I being blind then?
09:40 < ExxKA> Maybe just a little blind :)
09:40 < boffbowsh> Ah thanks. Where is that linked from?
09:40 < ExxKA> I just made it up
09:40 < ExxKA> It works with all the different versions
09:40 < boffbowsh> Ah ok, cheers
09:40 < boffbowsh> Perfect :)
09:43 < hello> anyone familiar with email parsing?
09:44 < hello> a la IMAP/MIME related things
09:45 < faceleg> ExxKA: yes but not when necessary
09:45 < hello> lol what does that mean exactly?
09:46 < faceleg> just being bitter
09:46 < faceleg> I'm the best at bitterness
09:46 < ExxKA> faceleg, then try another forum og do more research. People here are not forced to help  :)
09:50 < faceleg> ExxKA: I wasn't being serious I love you all as if you were my own children
09:50 < faceleg> anyway
09:51 < faceleg> can one pass flags to install scripts, e.g. npm install --debug ? Can i access said flag from inside my install.js script?
09:51 < faceleg> ExxKA: nothing worse than people who come into irc and get cranky when no-one helps them immediately
09:54 < faceleg> _really_ loving how my project's test run perfectly on my os x machine but segfault on my ubuntu box
09:56 < faceleg> you're all teasing me!
09:59 < zaleb> : >
09:59 < faceleg>  \0/
09:59 < zaleb> thats the sole purpose of this channel ofc. :D
09:59 < faceleg>   []
09:59 < faceleg>  /\
09:59 < faceleg> you ruined him.
09:59 < zaleb> soz :(
10:13 < ExxKA> faceleg: http://stackoverflow.com/questions/4351521/how-to-pass-command-line-arguments-to-node-js
10:14 < ExxKA> Please do your research next time. This took me literally 10 seconds on google
10:14 < ExxKA> Well to be fair I use duckduckgo :)
10:16 < faceleg> mmmm ExxKA I did google, honest
10:16 < faceleg> but thanks
10:17 < ExxKA> No problem :)
10:17 < ExxKA> Maybe you searched for a different thing. I searched for "node get commandline arguments"
10:18 < faceleg> I think I was searching for "pass arguments to npm install"
10:18 < faceleg> failed to generalize q to node
10:18 < ExxKA> Fair game
10:19 < faceleg> so, anyone here familiar with C++ & gdb?
10:20 < faceleg> so, anyone here familiar with C++ & gdb?
10:20 < faceleg> dammit, sorry
10:22 < ExxKA> hehehe
10:27 < marcules> Morning :)
10:27 < marcules> Or rather good afternoon
10:27 < marcules> ^^
10:28 < faceleg> marcules: hello
10:30 < faceleg> marcules: hello
10:30 < faceleg> lol again
10:38 < marcules> Any idea how i could make a virtual in mongodb/mongoose visible in the object when using "find"? So I can use it in the frontend?
10:40 < faceleg> define "use it in the frontend"
10:42 < rishabhmhjn> Question about Class: http.ClientRequest
10:42 < rishabhmhjn> http://nodejs.org/api/http.html#http_class_http_clientrequest
10:43 < molinarius> path = require('path'); path.sep='/'; console.log(path.join('a','b'));  // logs 'a\b' on Windows ... is this expected behavior ?
10:43 < marcules> faceleg, I'm passing the object into the view
10:43 < faceleg> yes
10:43 < faceleg> could you write a find method that ajaxes back to the server?
10:43 < marcules> And then I use Stringify
10:43 < rishabhmhjn> the request object we get has a method called request.abort()
10:43 < rishabhmhjn> http://nodejs.org/api/http.html#http_request_abort
10:43 < marcules> To use the Object in the frontend - but the virtual fields are not "in the object"
10:44 < rishabhmhjn> does that  explicitly calls the `end` event, or not at all?
10:44 < faceleg> does stringify strip out all functions?
10:44 < marcules> Yes
10:44 < marcules> I suppose
10:44 < marcules> I only have an array with objects afterwards
10:44 < faceleg> so it must
10:44 < faceleg> you woudn't be able to use the find method anyway, on FE
10:44 < faceleg> as FE isn't on your server, and therefore has no connection to your DB
10:45 < ExxKA> marcules, you could just add it it to the stringified object?
10:45 < faceleg> you could define in-between models
10:45 < faceleg> yeah
10:45 < faceleg> ExxKA: is quickest
10:45 < marcules> faceleg, no I mean I use find serverside - and get an array with objects returned
10:46 < marcules> On these objects I can (serverside) call .myVirtualField - but when I pass those objects into the view the functions are lost
10:46 < faceleg> stringify will be stripping them
10:46 < marcules> Right now I'm creating my own array (I'm iterating over the results and build my own array) but I thought there might be a way to make the virtual fields visible
10:46 < faceleg> you could maek your own model that adds your virt fields as real properties
10:46 < marcules> hmm
10:47 < marcules> I don't really want "lastname + username" in my Scheme
10:49 < raffer> which bugtracker do you guys prefer? tnx
10:51 < faceleg> github
10:52 < raffer> kay!
10:54 < molinarius> path = require('path'); path.sep='/'; console.log(path.join('a','b'));  // logs 'a\b' on Windows ... is this expected behavior or is it worth a bug post ?
10:54 < marcules> ExxKA, I would have to iterate over the object eigther way - so it does not matter if I "make" my own array or modify the existing object array, with "just adding it to the object"
10:54 < firedfox> it's a feature
10:55 < molinarius> thanks, this means  path.sep is read-only, right ?
10:55 < firedfox> windows uses '\' to be the path separator
10:56 < firedfox> yes. it's readonly.
10:56 < firedfox> http://nodejs.org/api/path.html#path_path_sep
10:57 < daslicht> can you craeet desktop apps with nodejs ?
10:57 < daslicht> create
10:58 < marcules> -g
10:58 < purr> marcules: No search results found.
10:58 < marcules> lol I didn't mean to trigger the bot
10:58 < molinarius> firedfox, thanks, just did not find mention about it being readonly in the doc
10:59 < firedfox> np :)
11:18 < faceleg> anyone have trouble installing node .10 in ubuntu 12.10? My ubuntu tells me 0.6 is latests, folowed instructions here: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
11:20 < JamesMGreene> daslicht: Consider using a framework like AppJS http://appjs.org/
11:20 < faceleg> never mind
11:20 < daslicht> so its possible?
11:20 < JamesMGreene> Sort of
11:21 < JamesMGreene> I mean it's USING Node.js but the UI basically browser-based (HTML5, CSS3, JS)
11:21 < JamesMGreene> Oops, sorry, I lied
11:21 < JamesMGreene> It uses Chromium, not Node
11:21 < JamesMGreene> Or it is Node, actually...?
11:21 < JamesMGreene> Confused website
11:22 < JamesMGreene> I suppose Chromium provides the browser part for display but Node is the core code running it
11:22 < JamesMGreene> Anyway, yes, AppJS.
11:31 < prop> anyone know what is going on with forever and node 0.10 ? when will it be compatible or something ? i really want to use it :) 
11:39 < daslicht> thanks
12:02 < standoo> testing how many nodejs i can launch on my server
12:02 < sheldonh> in an http server's request handler, what's the fastest way to terminate the client connection (e.g. in response to a directory traversal compromise attempt)?
12:10 < djangoobie> Hi all. I'm new to Node.js. I would like to start a webapplication using Express with an orm, but I am not sure which to pick. I tried installing JugglingDB but it fails when installing the mongodb adapter.
12:11 < djangoobie> Hope you could recommend me a stable and easy to use ORM.
12:13 < stagas> djangoobie: mongoose
12:14 < djangoobie> stagas: Is it easy to use when coming from Django/SQLAlchemy? JugglingDB for example looks very similar to Django.
12:15 < chakrit> sheldonh: req.connection.end() ?
12:15 < chakrit> not sure but you should be able to get to the underlying socket from some property
12:15 < chakrit> look it up in the docs
12:15 < chakrit> sheldonh: but why not just send back 404?
12:19 < prop> sheldonh: res.send(404, 
12:19 < prop> " ");
12:22 < sheldonh> chakrit: thanks. i don't want to tie up resources trying to send a polite HTTP response to an impolite request :)
12:22 < sheldonh> chakrit: (although the honest answer is "Because curiosity")   :)
12:33 < faceleg> if anyone has v8 / c++ skills, please have a look: http://stackoverflow.com/questions/15523582/calling-persistentfunction-segfaults-in-afterwork
12:35 < SomeoneWeird> faceleg, zip the folder up and send to me and i'll try to compile on debian, if you havn't tried
12:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:36 < faceleg> SomeoneWeird: https://github.com/tbranyen/nodegit
12:37 < faceleg> doesn't have my latest commits, but what is there runs fine on my os x machine (npm test I mean)
12:37 < faceleg> SomeoneWeird: people have been reporting the issue on OS X though, I think it is someting I'm failing at regarding memory managementy
12:39 < faceleg|sleep> SomeoneWeird: it's nearly 2am here, I have to sleep. thanks for your time
12:42 < funkbox> faceleg|sleep: sleep well 
12:43 < faceleg|sleep> funkbox: I'm sure to dream of segfaults
12:44 < funkbox> faceleg|sleep: #define while if
12:44 < funkbox> and also, #define rand() 6
12:45 < SomeoneWeird> faceleg|sleep, doesn't work here either
12:45 < SomeoneWeird> funkbox, no, #define rand() 4
12:49 < faceleg|sleep> SomeoneWeird: segfaulting?
12:50 < faceleg|sleep> I wonder why... hopefully the power of SO solves it
12:50 < faceleg|sleep> I guess I'm doing it wrong
12:50 < faceleg|sleep> I'm really good at sleeping thouhg, that's soemthing.
12:56 < mrvisser> I'm trying to figure out how to properly shut down a nodejs process. From what I read, it looks like I need to let the event queue run dry, but that's not exactly what I'm seeing
12:56 < mrvisser> https://gist.github.com/mrvisser/5204396
12:56 < mrvisser> In this example, if I hit the endpoint /marco, then CTRL+C after, the process hangs, then "polo" is output 10 seconds after, and then the process never quites
12:56 < mrvisser> quits*
12:57 < mrvisser> however, if I don't have the setTimeout or anything, the process does quit fine. does anyone know why this process would hang in the posted example?
12:57 < thomaschaaf> I need to call an interactive shell script from node. Would I do this through? http://nodejs.org/api/child_process.html 
12:58 < zaleb> mrvisser; mayb this helps: https://github.com/joyent/node/issues/1025#issuecomment-1803631
12:59 < bnoordhuis> mrvisser: how are you making the request? with curl or a browser?
12:59 < mrvisser> bnoordhuis: with a browser
12:59 < mrvisser> zaleb: having a look, does look helpful, thanks
13:00 < bnoordhuis> mrvisser: try curl. browers usually open several connections (and keep them open)
13:02 < mrvisser> bnoordhuis: interesting, it acts a bit differently now. It reports an unhandled error event. investigating...
13:02 < SomeoneWeird> thomaschaaf, it's not easy
13:02 < mrvisser> Error: write EPIPE
13:02 < SomeoneWeird> use child_process.spawn and then listen to proc.stdout for a 'data' event and use proc.stdin.write to write to strin
13:02 < SomeoneWeird> stdin*
13:02 < mrvisser> bnoordhuis: also, that console.log never gets invoked :P
13:03 < mrvisser> (the "Got kill. Processing" one)
13:03 < thomaschaaf> SomeoneWeird: okay I will try that
13:07 < bnoordhuis> mrvisser: maybe express installs its own SIGINT handler
13:07 < bnoordhuis> also, process.on('SIGINT', ...) doesn't work on windows (if that's what you're using)
13:09 < mrvisser> nah using macosx. It worked before I had that timeout
13:09 < mrvisser> clone the express code to grep for sigint
13:09 < mrvisser> cloning*
13:10 < mrvisser> can't find SIGINT anywhere in it
13:18 < derEremit> hi, is this also the right channel for questions regarding npm?
13:18 < derEremit> or is there a specific channel for that
13:20 < mrvisser> *smacks forehead*
13:20 < mrvisser> bnoordhuis: Figured out why I was getting the EPIPE error, I'm in such a habit of piping my node output through bunyan, because we use that for our app
13:21 < mrvisser> so it was because the process exited while piping :P
13:22 < derEremit> what would be a correct working way to let a dependency in npm install trigger a makefile?
13:22 < mrvisser> seems to be predictable now. I did the request through my browser and found that after I killed the browser then the app would shut down.
13:29 < mboro> I'm using fs.readFile, which can get called on the same file multiple times. often times, it returns a blank data string even though there's content. anyone experienced this behavior?
13:29 < mboro> no error either
13:30 < bnoordhuis> mboro: node version and test case?
13:31 < mboro> bnoordhuis: v0.8.22. I don't have a test case. it's pretty coupled in my repo. I'm using the connect-fs module for Express if that helps. (it's connect-fs that's buggy)
13:32 < mboro> bnoordhuis: https://github.com/tnantoka/connect-fs/blob/master/lib/connect-fs.js#L84
13:32 < bnoordhuis> mboro: oh, okay. sorry, don't know about that
13:34 < mboro> bnoordhuis: no worries. found a module that works: https://github.com/odogono/connect-session-file
13:49 < dpg> Anyone around to upvote this so we can find a venue for our next meetup? https://news.ycombinator.com/item?id=5407025
13:52 < baudehlo> bnoordhuis: anything you want me to do to debug this master/worker send rate thing?
13:52 < MI6> joyent/node: Fedor Indutny v0.10 * c6c6a87 : tls: always reset this.ssl.error after handling  Otherwise assertion may  - http://git.io/NbqU1g
13:55 < bnoordhuis> baudehlo: maybe run perf record or strace -c to find out where the bottleneck is?
13:55 < baudehlo> is perf record a linux command?
13:55 < bnoordhuis> i'm assuming it's raw read()/write() throughput that's the limiting factor
13:55 < bnoordhuis> yes
13:56 < bnoordhuis> also `perf top`
13:56 < momomomomo> Morning
13:56 < baudehlo> but I'm not trying to write() any more as I add workers.
13:56 < bnoordhuis> as a rough indicator during a benchmark
13:57 < bnoordhuis> baudehlo: to profile is to know
13:57 < baudehlo> fair point
14:02 < MI6> joyent/node: Fedor Indutny v0.10 * 34e22b8 : tls: always reset this.ssl.error after handling  Otherwise assertion may  - http://git.io/2WYCyw
14:03 < baudehlo> bnoordhuis: https://gist.github.com/baudehlo/5204847 strace -c outputs.
14:03 < baudehlo> so write() just gets slower the more workers you add.
14:04 < nesusvet> Hello everyone, I have a file with a ton of the logs, it always growing, I want to catch some line via NodeJS, can you recommend me what library of function should I use
14:04 < nesusvet> ?
14:04 < pachet> nesusvet: the question is a little ambiguous
14:05 < pachet> is node.js doing the logging?
14:05 < baudehlo> I wouldn't recommend NodeJS for that.
14:05 < baudehlo> But that's just me :)
14:05 < pachet> if so, are you looking to detect a specific entry as its being logged?
14:05 < pachet> if not, see baudehlo's answer
14:05 < baudehlo> Perl would probably be easier.
14:07 < euoia> or tail -f and grep
14:07 < baudehlo> yeah
14:07 < bnoordhuis> baudehlo: that's kind of what i expected
14:08 < bnoordhuis> there's only so many write() syscalls you can make per unit of time
14:08 < bnoordhuis> and you're dividing them over an increasing number of workers
14:08 < baudehlo> I'm only doing the write() in the master though?
14:08 < bnoordhuis> yes
14:08 < baudehlo> I'm dividing them over a number of different fds, sure, but how does that make a difference?
14:09 < nesusvet> pachet, no the some java server application do 
14:09 < bnoordhuis> baudehlo: well, those writes wake up child processes. that's not zero cost
14:09 < baudehlo> are you saying: write(fd1, data, size); write(fd1, data, size); is faster than write(fd1, data, size); write(fd2, data, size) ??
14:10 < bnoordhuis> try running `perf top` when you're benchmarking (or `perf record`)
14:10 < bnoordhuis> baudehlo: yes, quite likely. though if writes to different child processes are still close together in time it won't make much of a difference
14:11 < nesusvet> pachet,  The node JS server has to catch some line in stream and if line is true, function should call some notify about this action. 
14:11 < baudehlo> The program 'perf' can be found in the following packages:
14:11 < baudehlo>  * linux-tools-common
14:11 < baudehlo>  * linux-base
14:11 < baudehlo> do you know which one I need?
14:11 < bnoordhuis> baudehlo: i bet a bottle of beer that if you profile the master process with /usr/bin/time or perf, you'll find that >60% of cpu time is spent inside the kernel
14:11 < baudehlo> Oh I don't doubt it.
14:11 < bnoordhuis> baudehlo: i don't know which package, i always compile from source
14:12 < baudehlo> k
14:12 < nesusvet> pachet, it should look like a " tail -f file | grep "some line", but in code
14:13 < shmoon> i read i have to use `sudo apt-get -y dist-upgrade` to upgrade to 0.10
14:13 < shmoon> wont that upgrade my distro?
14:15 < baudehlo> bnoordhuis: do you just want a screenshot from perf top?
14:15 < zaleb> I always use n to upgrade my node
14:15 < zaleb> npm install -gn && n 0.10.0
14:15 < zaleb> npm install -g n && n 0.10.0
14:15 < zaleb> ;x
14:15 < shmoon> ok just executed the command
14:15 < baudehlo> https://gist.github.com/baudehlo/5204944
14:15 < shmoon> dist-upgrade one
14:16 < zaleb> : >
14:18 < shmoon> http://nodejs.org/api/stream.html#stream_compatibility - am i getting it right that pause and resume are deprecated ?
14:19 < bnoordhuis> baudehlo: try `perf record` and `perf report -stdio`. or just /usr/bin/time if you want a kernel/usermode breakdown
14:19 < bnoordhuis>  /usr/bin/time is also a good way to get a rough estimate of peak RSS
14:20 < bnoordhuis> note i consistently type /usr/bin/time and not time, that last one is the bash builtin that's not nearly as spiffy :)
14:21 < baudehlo> It's actually not as much time in the kernel as we thought.
14:21 < baudehlo> 2.10user 0.69system 0:02.82elapsed 99%CPU (0avgtext+0avgdata 187888maxresident)k
14:21 < baudehlo> 0inputs+0outputs (0major+13827minor)pagefaults 0swaps
14:21 < baudehlo> 24% of time in the kernel
14:23 < sheldonh> that's a very small period of time over which to measure relative effectiveness of different IO strategies
14:23 < sheldonh> (apologies if all you're after is non-sleep time in *one* strategy)
14:24 < baudehlo> It remains 24% no matter how long I run it for.
14:25 < baudehlo> 18% time in the kernel for 1 worker (24% was for 5 workers)
14:25 < bnoordhuis> baudehlo: okay. `node --prof --log --log-file=v8-%p.log bench.js`
14:26 < bnoordhuis> cd deps/v8 && make -j8 native
14:26 < bnoordhuis> then run the log files through deps/v8/tools/linux-tick-processor
14:26 < bnoordhuis> oh, you may need to upgrade your version of node
14:27 < bnoordhuis> i added %p in... /me looks
14:27 < bnoordhuis> oh, it's not in v0.8 - but 8b0f3ce397b473ab6c438aa9c002f38396713e44 is the commit, should be cherry-pickable
14:28 < bnoordhuis> or upgrade to v0.10 :)
14:32 < bnoordhuis> baudehlo: if you open an issue, i'll help you look into it (eventually)
14:34 < baudehlo> well I don't wanna open an issue if it's fully expected behaviour.
14:42 < sheldonh> wow, i'm confused. i think child_process.spawn's 'exit' event only emits when the child process exits. yes?
14:42 < sheldonh> (i'm confused because i seem to be getting it too soon
14:46 < baudehlo> sheldonh: yes they emit when the child process exits.
14:49 < sheldonh> baudehlo: thanks. maybe it's time for a break :)
14:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:52 < sheldonh> baudehlo: variable shadowing :)
15:31 < preyalone> Does node-persist support INNER JOINS queries?
15:45 -!- mode/#Node.js [+b *!*@ool-457a8633.dyn.optonline.net] by ChanServ
15:45 -!- JohnnyL was kicked from #Node.js by ChanServ [Banned: drama, disrespectful, pasting into channel, etc.]
16:21 < MI6> joyent/node: Ben Noordhuis v0.10 * 3dac421 : bench: add dgram send/recv benchmark - http://git.io/aNLoTA
16:37 < Stephen> hmm
16:38 < shmoon> hi i upgraded nodejs on ubuntu and my apps broke, how do i downggrade?
16:38 < shmoon> apt-get cant find 0.8.22 anymore
16:41 < jdmmmmm> shmoon: what repo are you using
16:41 < shmoon> chrislea
16:41 < jdmmmmm> I'm not using that one, but do you see 0.8.22 when you run: apt-cache showpkg nodejs
16:43 < shmoon> jdmmmmm: http://pastie.org/private/c8m5vg6ndvqjz8zzakszcg
16:44 < SomeoneWeird> shmoon, you'll have to use something like nvm
16:44 < shmoon> ?
16:45 < SomeoneWeird> ...?
16:45 < SomeoneWeird> go google "nvm", second link for me :)
16:46 < jdmmmmm> shmoon: I would recommend SomeoneWeird's suggestion over where I was going with getting a new repo. Yours had the 0.8.* removed.
16:47 < rata> Hi, using the ubuntu ppa when I run npm install I get: npm http 200 https://registry.npmjs.org/grunt-jasmine/-/grunt-jasmine-0.1.0.tgz  npm ERR! cb() never called!   npm ERR! not ok code 0   Running npm cache clean or npm cache clear as root or as the user running the npm install does not help. Does anyone knows what the problem could be ?
16:47 < shmoon> i try curl https://raw.github.com/creationix/nvm/master/install.sh | sh
16:47 < shmoon> it adds something in ~/.profile but nvm is not available as a command
16:47 < jdmmmmm> source ~/.profile
16:47 < creationix> nvm is not a bash script, it's a bash function
16:48 < SomeoneWeird> add "source ~/.nvm/nvm.sh" to ~/.bashrc
16:48 < SomeoneWeird> to the bottom of*
16:48 < creationix> (I didn't even know bash had functions till I wrote nvm)
16:48 < EyePulp> heh
16:49 < creationix> SomeoneWeird: the install script is supposed to do that
16:49 < SomeoneWeird> ah, didn't last time I tried
16:49 < SomeoneWeird> (that was quite a while ago, though)
16:51 < shmoon> so it seems to work
16:51 < shmoon> but my app still fails :O
16:52 < terietor> hello
16:52 < creationix> shmoon: do `which node` and `node -v` give the right node version?
16:52 < creationix> if so, the issue it outside nvm
16:52 < terietor> is there any forum system written in node.js?
16:53 < jdmmmmm> shmoon: or > nvm list
16:53 < Jeffail> I have a work in progress forum thats online
16:53 < terietor> Jeffail can you give me a link?
16:53 < Jeffail> http://www.creepychalk.co.uk
16:53 < shmoon> creationix: ok sorry only in the tab where i did nvm install node -v is 0.8.22
16:54 < shmoon> what do i have to do to make it 0.8.22 in all other bash instances?
16:54 < shmoon> even new instances have 0.10.0 not 0.8.22
16:54 < creationix> shmoon: restart them too
16:54 < creationix> nvm is per session
16:54 < creationix> by design
16:54 < terietor> Jeffail is it open source?
16:54 < creationix> shmoon: or source nvm manually in the other sessions if you don't want to restart them
16:54 < Jeffail> not yet but it will be as soon as I get organised
16:54 < creationix> `. ~/nvm/nvm.sh`
16:54 < creationix> (or wherever it installed nvm to)
16:55 < terietor> ty
16:55 < shmoon> i'm confused
16:55 < shmoon> will i have to do that on every reboot of machine ? everyday ?
16:55 < creationix> shmoon: nvm is a bash function that downloads stuff and mucks with your $PATH
16:55 < creationix> it never creates system-wide symlinks or anything like that
16:56 < creationix> so you can have different versions of node in different tabs at once
16:56 < creationix> shmoon: also by default it doesn't set a node version
16:56 < creationix> shmoon: you probably want to alias a default
16:56 < creationix> `nvm alias default 0.10`
16:56 < shmoon> ok so i have to do nvm use 0.8.22 all the time :S
16:57 < creationix> shmoon: no, just alias default to what you want the default to be
16:57 < creationix> the default in a fresh install is the system node
16:57 < creationix> shmoon: sounds like you have 0.10 installed at /usr/local/bin/node and want nvm to install 0.8.22 for you?
16:58 < plato> Hi guys
16:58 < shmoon> ah thansk that works. actually i upgraded to 0.10 and my apps dont work so i need to downgrade
16:58 < plato> Has anyone ever used node to run a localhost web server on their android phone
16:58 < ljharb> why downgrade, instead of fixing your apps?
16:58 < plato> Is that possible
16:58 < shmoon> all 3rd party modules i cant go and open issues for each
16:58 < creationix> ljharb: perhaps they are production apps
16:58 < shmoon> and wait for fix
16:58 < shmoon> and they're in production
16:58 < shmoon> as they're*
16:59 < ljharb> you upgraded your app in production before checking if it works in dev first??
16:59 < ljharb> that's just reckless.
16:59 < creationix> ljharb: I do it all the time
16:59 < creationix> :P
16:59 < shmoon> :D
16:59 < ljharb> that doesn't mean it's a good idea
16:59 < creationix> hence why I wrote nvm
16:59 < creationix> easy rollback to a previous node version
16:59 < ljharb> easy version switching is great
16:59 < shmoon> thanks dude for writing this
16:59 < jdmmmmm> creationix: it's a great addition. I just installed it. 
16:59 < ljharb> that still doesn't absolve you of the need to test your code before you make changes in production.
17:00 < creationix> ljharb: and yes it is reckless, but that's the tradeoff I take
17:00 < jdmmmmm> I especially like the .nvmrc file so that one can switch version of node per project.
17:00 < niggler> did npm recently start printing registry request attempts?
17:00 < creationix> ljharb: none of my apps need high availabity
17:00 < niggler> i'm seeing messages like "info trying registry request attempt 1 at 12:56:44"
17:01 < ljharb> lol then why not leave them broken til you fix them for the newest version of node
17:01 < creationix> ljharb: you know there is a continuum between all and nothing right?
17:01 < creationix> 2 minutes downtime is OK, 2 weeks is not
17:02 < ljharb> i can't imagine what would take 2 weeks to fix
17:02 < ljharb> it's node, not java
17:02 < creationix> 2 weeks is optimistic
17:02 < creationix> dependencies can take a while
17:02 < creationix> people do this stuff in their free time
17:02 < creationix> I do this in my free time
17:02 < creationix> none of my production apps are part of my job
17:02 < yawnt> sup creationix 
17:03 < creationix> yawnt: hey
17:03 < shmoon> well i need some suggestions please
17:03 < mscdex> node.js rules!
17:03 < shmoon> i'm working on a codebase written by some genius nodejs coder
17:04 < shmoon> and it maks no sense to me mostly deals with sockets and strams. and the way he wrote the client side JS is also almost like node
17:04 < creationix> shmoon: by "genius" do you mean the code is very clever? sorry if it's my code
17:04 < shmoon> understanding the entire flow and getting used to his ways and approaches will take time
17:04 < shmoon> what should be strategy be to do this project?
17:04 < plato> QFT
17:04 < plato> link us the code base, duh!
17:04 < shmoon> creationix: haha, i know you are a genius too, but this is another one
17:05 < creationix> shmoon: don't know what to tell you, I'm pretty bad at reading other people's code
17:05 < creationix> something I'm trying to work on
17:05 < shmoon> so am i :( especially this
17:05 < plato> It would be cool to look at visualizations of my application's structure over time/git commits
17:05 < plato> as i learned how to use async and callback stuff properly
17:06 < shmoon> i'm slightly disturbed at this codebase actually, the client side JS looks as if its server side node
17:06 < sorensen> whats wrong with that
17:06 < shmoon> making use if node core modules (probably with browserify via some other package called enchilda and what not)
17:06 < Gustav__> Anybody working with WebSockets in favour of HTTP?  It seems WebSockets is still too new to be supported by mobile devices?
17:06 < plato> theres a pattern to wrap client js so the same file is usable in both
17:06 < sorensen> ah
17:06 < ahungry> Gustav__: socket.io fills the gap nicely
17:06 < shmoon> i just havent codd this way i wonder how to go about doing this, understanding this codebase will take me atleast 2 weeks :S
17:07 < sorensen> shmoon: depending on the project size thats normal
17:07 < plato> well shmoon good luck hopefully we can explain any confusing patterns
17:08 < sorensen> i've been working on a project for 3 months now and still dont understand some things
17:08 < shmoon> and it uses modules like these https://github.com/vadimg/js_bintrees https://github.com/dominictarr/through https://github.com/dominictarr/split - pretty bad at such thigns myself
17:09 < Gustav__> ahungry__: but all the heartbeats issued by socket.io seems a lot of work on the server?  Perhaps websockets is for real-time apps?
17:11 < sorensen> Gustav__: it is
17:11 < sorensen> generally you use them to push updates to the client
17:11 < sorensen> if you have no need for that then you might not need websockets
17:13 < Gustav__> thanks guys - I just need confirmation that websockets isn't as profound as Node.js - to be relieved from 'ugly' PHP has been a great joy!
17:13 < euoia> I do question what websockets are the right choice for right now
17:14 < gratz> this might seem like a silly question, i haven't found the answer yet, but if you 'npm install {something}' where '{something}' is a directory where npm is being run AND is also the name of a package in the npm registry, what happens? Do directory installs take priority?
17:17 < realnick> hi guys, is anybody here a pro with node and could help me with my installation on ubuntu 12.10
17:18 < mscdex> realnick: what's the problem?
17:18 < realnick> i installed node with my packetmanager, but if i type "node" in my terminal nothing happens
17:19 < realnick> i got the same behavior with the "tsc"
17:19 < realnick> "node --version" go also no response
17:19 < mscdex> no response or an error?
17:20 < realnick> no response
17:20 < realnick> it seems that nothing happend
17:20 < mscdex> what does `which node` say?
17:20 < realnick> nodejs --version works algthoug
17:20 < mscdex> i was about to say
17:21 < mscdex> yeah some packages (especially Debian) use 'nodejs' instead of 'node'
17:21 < realnick> hmm im on ubuntu
17:21 < realnick> but anyway i can live with "nodejs" but i need the tscc
17:21 < realnick> tsc
17:21 < mscdex> i just install from source
17:21 < mscdex> it's easy enough
17:22 < realnick> yea your right
17:22 < realnick> but i would like to make update with apt-get
17:22 < realnick> its the main reason i chose the packet manager
17:22 < kenperkins> anyone using commander.js
17:22 < realnick> can it be that the tsc need "node" instad of "nodejs"
17:23 < realnick> tsc is a npm package for typescript compiling
17:23 < mscdex> realnick: the problem is node is still being released often enough that most repositories can't/don't keep up
17:23 < mscdex> even for new stable branches
17:24 < mscdex> realnick: no idea, i don't see that package on npm
17:24 < realnick> npm install -g typescript
17:25 < realnick> hmm i try to reinstall it from source
17:25 < realnick> lets see if it works
17:25 < realnick> is there a cool instruction?
17:25 < mscdex> realnick: you don't have to reinstall from source if you don't want (unless of course the package is grossly outdated)
17:26 < mscdex> realnick: you can symlink 'nodejs' to 'node'
17:26 < realnick> its 0.10
17:26 < plato> Has anyone ever used node to run a localhost web server on their android phone
17:27 < pachet> :[
17:27 < realnick> hmm but there is already a node in /usr/sbin/node
17:27 < realnick> should i overwrite it
17:27 < mscdex> realnick: i'm guessing that's the ham radio node program thing
17:28 < mscdex> realnick: where is 'nodejs' located right now?
17:29 < realnick> in /usr/bin/
17:30 < kenperkins> i hate try/catch in node :S
17:30 < mscdex> realnick: well if nothing else you could just rename /usr/sbin/node to /usr/sbin/node-blah and ln -s /usr/bin/nodejs /usr/bin/node
17:30 < mscdex> then you should be able to access node via 'node'
17:31 < mscdex> kenperkins: node or js? ;-)
17:31 < realnick> nice i solved the problem
17:31 < kenperkins> mscdex tbh I don't even know, try/catch in the same stack
17:31 < realnick> i just removed node with my packet manager
17:32 < mscdex> realnick: that works too :-)
17:32 < realnick> but now im wondering what is the difference between node and nodejs
17:32 < realnick> are this two different applications?
17:33 < mscdex> realnick: 'node' in Debian/Ubuntu is an "amateur packet radio node program"
17:33 < mscdex> realnick: there's a whole debate about this
17:33 < realnick> :) hehehe
17:33 < realnick> nice
17:34 < realnick> mscdex: dude your are awesome, thanks a lot for your help!!!!!!!!!!!!
17:34 < mscdex> np
17:34 < Kakera> mscdex, link to debate
17:35 < euoia> mscdex: there should really be FAQ for this channel
17:35 < euoia> mscdex: that issue would probably be at the top
17:35 < mscdex> Kakera: there's at least one on debian's site somewhere and one in the node mailing list
17:47 < lovemuffin> the idea of mixins in js seems nasty
17:48 < lovemuffin> thoughts? i mean there's no way else to solve a problem that requires mixins until es6 proxies
17:48 < kenperkins> hm, writing a command line util for my SDK, wondering if it should be it's own package
17:48 < kenperkins> rather than part of the SDK proper
17:48 < kenperkins> (adds a fair number of dependencies)
17:51 < bradleymeck> lovemuffin: what are you trying to do / why do you need a mixin instead of a prototype
17:51 < bradleymeck> kenperkins: just keep it separated as a bin is why i generally do, but a lot of ppl keep em separate so tests dont get confusing
17:51 < onlooker> A
17:52 < kenperkins> bradleymeck: agreed on being a separate bin from the main
17:52 < mscdex> onlooker: B
17:52 < lovemuffin> bradleymeck: for mixing two prototype chains
17:53 < kenperkins> mscdex: C
17:54 < lovemuffin> mixins arent bad i guess, just the current way to implement seems nasty
17:54 < onlooker> Oh, the strange things my phone sends when I log in to irc... 
17:54 < johnjohn101> is node.js ever going to be a 1.0 release?
17:54 <@Nexxy> never ever ever ever
17:55 < bradleymeck> lovemuffin: multiple inheritance for what purpose? if you just want to take on functionality, it should just be a mixin, if it actually needs to be of 2 interfaces from different roots, that gets more complex
17:55 < bradleymeck> Nexxy: 1.oh?
17:55 <@Nexxy> 1.OH!
17:56 <@Nexxy> 1.0? how about 1.no.
17:56 < kenperkins> don't hurt yourself Nexxy 
17:56 < bradleymeck> dont get izs started on no, he has insane plans
17:56 <@Nexxy> kenperkins, that's my prerogative
17:56 <@Nexxy> bradleymeck, I... no!
17:57 < bradleymeck> lol
17:58 < lovemuffin> bradleymeck: for instance, a inherits from eventemitter, b inherits a, b also inherits from eventemitter
18:00 < lovemuffin> only way to solve that i can think of is mixin, but yea like i said, seems nasty, blah
18:00 < bradleymeck> lovemuffin: you want to clobber a's EE? if so encapsulate dont mixin
18:00 < bradleymeck> b.my_a = an_a; // can do w/e b needs to interact with a's .on/emit from .my_a
18:02 < lovemuffin> i tried doing that at first, but thats even more nasty to me
18:02 < lovemuffin> because you'd have to write way more code to do that type of interaction
18:03 < lovemuffin> its easier to conceptualize it that way, but i think for maintainability and testing it isn't that good
18:05 < JJ> hi, anybody here? if that, Please answer my question..  I wanna RPC in node. My Project need rpc with java server. What is the best node rpc module?
18:07 < ljharb> rpc? ugh
18:07 < ljharb> http://stopsoap.com
18:08 < JJ> What is stopsoap? You can explain me?
18:10 < JJ> Anyway, I need use jasper the reporting tool in NodeJS... Is it possible?
18:11 < ljharb> it's just saying that SOAP sucks. RPC sucks too, and it's related, so i was being tongue-in-cheek.
18:11 < johnjohn101> http://zerorpc.dotcloud.com/
18:13 < johnjohn101> i've used zerorpc with python but not node (yet)
18:15 < JJ> thx johnjohn
18:18 < addisonj> trying to do some magic with NPM api, trying to install dependencies in a different directory. doing: "npm.dir = "myDir"; npm.instal(["mydeps"], cb)" doesn't work
18:20 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:20 <@Nexxy> addisonj, nope!
18:20 < addisonj> nope? not doable
18:20 < addisonj> ?
18:21 <@Nexxy> it's hard coded to install to node_modules
18:21 <@Nexxy> iirc
18:21 < addisonj> I still want it to go to node_modules, jsut a node_modules in a different place... I could just be lazy and child_process.exec... but thats no fun
18:22 <@Nexxy> addisonj, oh I misunderstood
18:26 < keyosk> Hey Noders, I'm having a peculiar issue with Redis and I was wondering if I could pick your brains ;)
18:27 < addisonj> Nexxy: think I got it, the magic all happens when you load the config
18:28 < keyosk> I'm reaching a point where my redis requests average response time is growing to abusrd values.. Like 260 seconds per request
18:28 < keyosk> Is there a possibility i'm reaching too many requests through a single redis client. Should I consider having a rotating pool of redis clients?
18:29 < keyosk> My system's sysctl is tuned, and my ulimit -n is very high right now, I don't understand what could cause an exponential growth in redis request response time
18:51 < inspiron> with var express = require('express'); what is the difference between var app = express(); and var app = express.createServer();
18:53 <@Nexxy> inspiron, .createServer is deprecated
18:53 < inspiron> k, thanks
18:59 < inspiron> to server my static files from my module I have to do: app.use("/common/images", express.static(__dirname + '/node_modules/common/images')); what is a clean way to make it so I don't have to specify 'node_modules'
19:02 < Sawbones> howdy
19:04 < bradleymeck> inspiron: require.resolve('common') + '/images' maybe?
19:05 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:19 < wesside_> sweet js implementation of web workers, https://news.ycombinator.com/item?id=5408554
19:20 < inspiron> bradleymeck: looks like that returned the location of where "main" is specified in the package.json for 'common'
19:29 < faceleg|work> anyone here with v8 skillz?
19:29 < MI6> joyent/node: Trevor Norris v0.10 * 31314b6 : bench: compare binaries equal times  The benchmark compare would drop the - http://git.io/6M-FKQ
19:29 < faceleg|work> if so peruse: http://stackoverflow.com/questions/15523582/calling-persistentfunction-callback-segfaults-in-afterwork
19:29 < inspiron> is there something like require.resolve('common') then tell it to return the directory instead of what it finds in the 'common' package.json "main"
19:32 < bnoordhuis> faceleg|work: i already commented yesterday in #v8 :)
19:32 < bnoordhuis> faceleg|work: `delete req` looks like it's wrong because req == &baton->request
19:36 < niggler> should http or https be used for the permalink for an npm package?
19:37 < faceleg|work> bnoordhuis: sorry I must have missed it, went to bed shortly after posting - was 2AM
19:37 < faceleg|work> mmm that sounds like a stupid mistake
19:38 < faceleg|work> does delete immediately free the memory or does it just queue the request to free it?
19:39 < faceleg|work> bnoordhuis: btw your suggestions regarding that big long discussion we had the other day about uv_thread_create & uv_async were spot on, I've implemented it and it works well
19:40 < ljharb> "delete" deoptimizes the object in the JS engine
19:40 < faceleg|work> ljharb: what does 'deoptimize' mean
19:41 < ljharb> it gets real slow
19:41 < ljharb> http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
19:45 < bradleymeck> ljharb: unsure if thats true for objs that are hot enough to be considered dicts by v8
19:46 < faceleg|work> ljharb: we're talking about V8, right - C++, not JS
19:46 < ljharb> "The main takeaway here is to avoid modifying the structure of hot objects at runtime. "
19:47 < ljharb> i'm describing what happens inside the c++ code in v8, yes
19:47 < faceleg|work> ljharb: ok just making sure
19:47 < ljharb> but how you write your JS is related.
19:47 < faceleg|work> delete wasn't put there byu me
19:47 < ljharb> and never using "delete" is a good way to avoid a big speed pitfall
19:47 < faceleg|work> I'll remove it when I get home
19:47 < faceleg|work> mmm thanks for that
19:47 < bradleymeck> faceleg|work: don't mess with objects property counts (add/remove props after init) unless you know whats going on
19:48 < faceleg|work> the thing being deleted is a struct
19:48 < faceleg|work> that has a reference to a JS Object
19:48 < faceleg|work> so deleteing it could be causing the segfault on certain machines?
19:48 < faceleg|work> or is this just a tangent showing a problem with the code
19:49 < faceleg|work> thanks for your patience, I do appreciate the help
19:51 < bnoordhuis> faceleg|work: re delete, it's freed immediately. e.g. use after delete is always wrong
19:52 < bnoordhuis> as is deleting the wrong pointer btw :)
19:53 < faceleg|work> bnoordhuis: honestly I did wonder, but as the code worked on my machine I worried about other things
19:53 < faceleg|work> *should* I be deleting things after I've called the callback?
19:53 < faceleg|work> or just leave it 
19:54 < bnoordhuis> faceleg|work: always delete what you new/malloc
19:54 < bnoordhuis> no, let me amend that
19:54 < bnoordhuis> delete what you new, free what you malloc
19:54 < faceleg|work> i'm not new/malloc'ing anything here
19:55 < bnoordhuis> you're doing new Baton somewhere in there
19:55 < faceleg|work> it's all either from JS or returned/input vars from funcs
19:55 < faceleg|work> mm
19:55 < faceleg|work> so deleting baton, will that flow-on to its members?
19:55 < faceleg|work> it is a struct
19:56 < MobCat> is it a better idea to build a chat system in node or use xmpp?
19:57 < bnoordhuis> faceleg|work: think of it like this: a struct is just a slab of memory with named offsets
19:57 < bnoordhuis> so yes, when you delete the embedding struct, embedded types are also deleted
19:57 < bnoordhuis> i.e. don't use them after deleting
19:57 < faceleg|work> if a new struct doesn't contain any new'd/malloc'd embedded types
19:57 < faceleg|work> should I delete hte struct?
19:58 < faceleg|work> i understand what you're saying but am unsiure how to apply it to this context
19:58 < inspiron>  i have a few versions of a static repository that contains images, fonts, css, templates that I need to serve on the express server. On the express server I put them under different version urls /common/1.2/images/ ... /common/1.1/images ... etc... What I don't know how to do is to specify my package.json so that multiple versions of the static_repo will be installed.  like: static_repo_1.1 and static_repo_1.2 directories in my no
19:58 < faceleg|work> context: not you
19:59 < atomicgarden> My npm started acting funny today. npm install seems to download wildly and then crash with ENOENT errors
19:59 < atomicgarden> Node 0.8.14, N{M 1.1.65
19:59 < bnoordhuis> faceleg|work: yes, delete the struct
19:59 < atomicgarden> NPM*
20:00 < atomicgarden> just started today, is this happening to anyone else?
20:00 < faceleg|work> bnoordhuis: but if I understand rightly, will that not delete the members? including those which are still in use?
20:00 < faceleg|work> atomicgarden: I had a few issues last night, ended up reinstalling node completely
20:00 < bnoordhuis> faceleg|work: yes. so don't delete it if you're still using it
20:00 < bnoordhuis> lifecycle management > * in c++
20:00 < atomicgarden> yeah I did that…from 0.8.22 to 0.10.0 and then back down to 0.8.14m same result
20:01 < faceleg|work> bnoordhuis: um
20:01 < faceleg|work> so if I pass a member of a struct to JS via a callback that was also a member of said struct
20:01 < faceleg|work> then immediately delete the struct
20:01 < faceleg|work> how does that affect the member htat was passed to JS?
20:01 < faceleg|work> is that GC's differently?
20:12 < bnoordhuis> faceleg|work: depends on what 'member' means here
20:12 < bnoordhuis> is it a string, pointer, int, something else?
20:16 < meekohi> In node.js, how would you handle a mapreduce problem where each map step requires some asynchronous call? How do you stall the reduce step until everything is ready?
20:18 < MobCat> when you push something to a client's browser with node.js does it send instantly? or is the client on interval with the server looking for new messages?
20:19 < addisonj> meekohi: https://github.com/caolan/async will probably help, you might look at async.waterfall and async.forEach
20:19 < meekohi> addisonj: Thanks
20:21 < EyePulp> So let's say I have a service getting hit with a bunch of bad traffic - (spam traffic from latvia) and I want to blacklist their IP… would it do more harm than good to do a long settimeout to respond to that garbage traffic to slow down the response rate?  or am I just hurting myself and should I just sever the connection as quickly as possible?
20:22 < addisonj> EyePulp: you should just block it with iptables
20:22 < addisonj> you never even bother establishing a socket for them
20:23 < EyePulp> addisonj: hmmm… I like that, other than having to maintain the iptables on each of the boxes.
20:23 < addisonj> EyePulp: or if you have a load balancer do it there, 
20:24 < addisonj> no reason to bring that ugliness up into your application code
20:24 < EyePulp> this was something I was just propagating through redis to each box.  Our load balancer is a node-balancer on linode, which doesn't have the flexibility for this issue. 
20:24 < EyePulp> each instance loads the blacklist from the master redis instance, and checks against it.
20:25 < EyePulp> but you're right - a lot of extra code in the app isn't a good thing
20:25 < addisonj> write a simple cron job that does the same thing except writes it out to iptables
20:25 < addisonj> checks for updates to the list every 5 minutes or so
20:26 < unsafe> hey all, want to share a project I've been working on: https://news.ycombinator.com/item?id=5408554
20:26 < addisonj> (the ideal solution is to have something like chef/puppet to take care of that, but if you already have the data being passed around)
20:27 < unsafe> it puts multiple apps on a browser page and uses HTTP to communicate between them, so you structure the client side like an SOA
20:29 < Brad_> I was wondering if there is different template style rather than using jade?
20:29 < lovemuffin> theres a bunch
20:30 < lovemuffin> i prefer 'mustache family' hogan, handlebars
20:30 < Brad_> I want to use like express and socket.io for a personal project but really don't like the jade templating I think it looks wierd
20:30 < EyePulp> Brad_: so use a different template language.
20:30 < Brad_> I'm new to node so I will have to do a bit more research
20:31 < EyePulp> Brad_: I've been using one that looks like django's templating.  it's been great
20:33 < mher_> hi! i'm looking for feedback to my node project. is this a right place to ask?
20:35 < addisonj> unsafe: thats pretty interesting approach, how do you implement http over postMessage?
20:36 <@mbalho> mher_: yep 
20:37 < unsafe> addisonj: pretty straight-forward. First step was https://github.com/pfraze/myhouse
20:37 < faceleg|work> bnoordhuis: sorry, in this case it is an ObjectWrapped object
20:37 < faceleg|work> that came from JS
20:37 < faceleg|work> in other cases in my code it is a string
20:37 < unsafe> myhouse uses message ids to direct replies to requests
20:38 < mher_> mbalho: ok, thanks, here is the github link https://github.com/mher/node-celery
20:38 < unsafe> so once you can reply to a message, you just have to layer HTTP semantics over it
20:39 < unsafe> it's feasible that you could monkey-patch XMLHttpRequest to do that-- and I may do that in a reference implementation-- but right now I just have an ajax library which targets the workers if you give the httpl protocol
20:40 < samholmes> I blogged a question about async error handling: http://samholmes.me/post/45855973663/error-handling-in-async-programming-help
20:41 <@mbalho> mher_: looks pretty good to me! you might add an npm test script for running the test suite
20:41 < inspiron> anyone know how to get the location of a module?
20:42 <@mbalho> mher_: also it might just be a limitation of the protocol you're using but its a little weird that there is 1 top level error handler as opposed to the error getting returned into the .call callback as the first argument
20:42 <@mbalho> inspiron: require.resolve('modulename')
20:43 < inspiron> mbalho: that give me the location of the modules package.json "main". So if "main": test/server.js then it returns /<full location>/node_modules/test/server.js
20:45 <@mbalho> inspiron: maybe https://github.com/substack/node-resolve then. you should ask more detailed questions :)
20:45 < mher_> mbalho: thanks, the top level error handler is for environment related errors like, connection loss, etc.
20:46 <@mbalho> mher_: ahh i see, do you get errors back from .call calls? the node 'pattern' is for callbacks to look like function(error, data)
20:46 < mher_> mbalho: if a job fails it returns json result similar to success 
20:46 < inspiron> k, sorry. do you know how i can get the directory path of the module
20:47 < mher_> mbalho: it also allows to subscribe error results result.on('error', function(data), callback
20:48 <@mbalho> mher_: ahha. i have heard from some module authors that they like a single callback API because it forces people to deal with errors :)
20:49 < inspiron> i'd like to get back: /<full path>/node_modules/myModule
20:49 <@mbalho> inspiron: i dont know how to do that with node core, there might be a module though
20:49 < faceleg|work> f(error, data) works well with the caolan asyn module as well
20:49 < faceleg|work> async*
20:51 < substack> inspiron: what is wrong with require.resolve()?
20:51 < inspiron> it returns a file rather than a directory
20:51 <@mbalho> substack: it returns path to main not path to module root
20:51 < substack> you just want the directory then?
20:51 < inspiron> yeah
20:51 < substack> path.dirname(require.resolve('module-name/package.json'))
20:51 <@mbalho> main might be nested
20:52 <@mbalho> so that would return node_modules/module_name/lib/
20:52 < segomos> inspiron: did the functionality of __dirname change?
20:52 <@mbalho> inspiron: you could probably just slice off everything after node_modules/module_name
20:52 <@mbalho> inspiron: the last instance of node_modules*
20:52 < substack> just do
20:52 < substack> path.dirname(require.resolve('module-name/package.json'))
20:53 < substack> like I just mentioned :p
20:53 <@mbalho> substack: ohhhh
20:53 < segomos> any idea on which regex i should use to get my xml parsed?
20:54 <@mbalho> substack: haha i didnt realize module_name pointed at the root folder, good call
20:56 < ljharb> segomos: http://stackoverflow.com/a/1732454/632724
20:56 < faceleg|work> ljharb: lol
20:57 < inspiron> i'll try that. we are running on node v0.8.12. path should be part of node.js in later versions right?
20:59 < segomos> ljharb: that answer is wrong
20:59 < ljharb> haha ok
20:59 < segomos> i had an expert tell me to use regex
20:59 < ljharb> lol
20:59 < ljharb> guess he's not an expert
20:59 < segomos> are you saying you're not as good as my expert?
21:00 < segomos> you have some good stuff i don't think that is the case
21:00 < inspiron> unfortunately path.dirname doesn't seem to be in the version of node we are running 
21:01 < segomos> ljharb: no more biting? :-(
21:01 < AAA_awright> spencera1: Ping
21:01 < ljharb> that's a pretty lame attempt to troll, if that's what you're doing :-p go build something.
21:01 < spencera1> AAA_awright: howdy :)
21:02 < AAA_awright> spencera1: My +g ate your message if you sent me one, what's up?
21:02 < spencera> hahaha, nice
21:02 < spencera> want to check out your projects
21:03 < AAA_awright> http://magnode.org/ I've been working on making this really simple to setup, if you have MongoDB this should be ~5 minutes
21:03 < segomos> ljharb: i am getting the real time point of sale data model loaded for a grocer, waiting on loads and systems to finish compiling 
21:04 < spencera> Ah, I remember you mentioning this
21:04 < spencera> I've got mongo installed, i'll give it a shot in a second
21:04 < AAA_awright> Cool
21:06 < chilts> isaacs: I can't find the argument to npm publish to tell it the package should be alpha/beta or something like that? (ie. not the default version to install)
21:06 < chilts> thanks ... in advance and sorry to trouble you
21:06 < chilts> I'll check the docs again, but can't find it (sorry) :)
21:13 -!- mode/#Node.js [-b moxie!*@*] by isaacs
21:15 < inspiron> path.dirname(require.resolve('common/package.json'));  error: path is not defined. ??? what?
21:15 < AAA_awright> Really?
21:15 < inspiron> lol, j/k nm
21:21 < ningu> I never thought I would say this, but... jesus is just what I was looking for. thanks deoxxa.
21:36 < lovemuffin> bloop
21:38 < samholmes> ningu: ?
21:39 < ningu> samholmes: https://github.com/deoxxa/jesus
21:40 < faceleg|work> ningu: !
21:40 < faceleg|work> ningu ningu
21:40 < faceleg|work> ningu ningu ningu
21:40 < faceleg|work> ningu ningu ningu !
21:40 < faceleg|work> I'm done
21:40 < niggler> faceleg|work why 1,2,3,3
21:41 < faceleg|work> b/c work
21:41 < samholmes> ningu: lol, daemonize jesus. :p
21:41 < ningu> faceleg|work: you're done with what?
21:41 < ningu> the libgit2 thing?
21:41 < faceleg|work> no I mean I'm @ work
21:41 < faceleg|work> that won't be done for ages
21:42 < faceleg|work> in fact I'm having segfault awesome 
21:42 < faceleg|work> with that
21:42 < ningu> hehe
21:42 < lovemuffin> rename the module to 'segfault'
21:42 < samholmes> `jesus daemon` :P
21:42 < lovemuffin> then you can be done
21:42 < niggler> faceleg|work are you the guy who is doing the kickstarter for js git/
21:42 < faceleg|work> no
21:42 < faceleg|work> I am the guy doing it for free
21:42 < faceleg|work> also he wants to implement git in js
21:42  * niggler high-fives faceleg|work 
21:42 < faceleg|work> I want to wrap libgit2
21:42  * faceleg|work high five
21:42 < niggler> please accept by offering of digital beer
21:43 < faceleg|work> hahaa
21:43  * faceleg|work digitally slaked
21:43 < niggler> *my offering
21:43 < samholmes> I think I'll use jesus instead of forever.
21:44 < faceleg|work> amen
21:44 < ningu> samholmes: yeah, it seems cleaner
21:44 < niggler> where's 'allah' or 'yahweh'
21:44 < ningu> and it works right now on v0.10 which forever does not
21:44 < faceleg|work> FSM
21:44 < samholmes> yeah, lighter
21:44 < samholmes> niggler: I don't think they resurrected?
21:45 < Virunga> deoxxa/jesus?
21:45 < samholmes> gots to be careful with naming a module mohammed.
21:45 < samholmes> Virunga: yupe
21:45 < samholmes> -e
21:45 < Virunga> (ji, btw :))
21:45 < Virunga> Hi*
21:45 < samholmes> Who's btw? :P
21:46 < faceleg|work> PBUH
21:46 < samholmes> jk
21:46 < Virunga> A friend of mine
21:46 < samholmes> Virunga: :o
21:46 < samholmes> rolf
21:47 < samholmes> it would be funny if the `jesus start` command was `jesus save` instead. ;P
21:47 < samholmes> but then what would `jesus stop` be?
21:47 < faceleg|work> ascend
21:47 < faceleg|work> uh
21:48 < ningu> jesus condemn?
21:48 < faceleg|work> "die for our sins"
21:48 < samholmes> lol
21:48 < ningu> he could make them aliases for those commands
21:48 < samholmes> crucify
21:48 < Virunga> jesus bless
21:49 < samholmes> jesus kill
21:49 < samholmes> jesus baptise
21:49 < ningu> this is getting worse than the android build system
21:49 < samholmes> lol
21:49  * samholmes hasn't a clue on the android build system.
21:49 < ningu> they have build commands called breakfast, brunch, lunch, dinner, dessert, tapas
21:50 < ningu> but they don't seem to do anything very logically connected to those names
21:50 < Virunga> tapas? xD
21:50 < ningu> yes, tapas I think does some optional thing you don't usually need so I guess it makes sense
21:50 < ningu> but the others are confusing... like, at one point they say "brunch runs breakfast and then lunch"
21:50  * samholmes needs to get back to work
21:51 < tobbee> exit
21:51 < samholmes> ningu: that kinda makes sense
21:51 < samholmes> brunch being breakfast/lunch
21:52 < ningu> yeah I suppose
21:52 < samholmes> what does breakfast and lunch do
21:52 < samholmes> ?
21:52 < ningu> I think breakfast is where you choose the android architecture you want to build for and it sets up the build environment for that
21:52 < ningu> and then lunch actually builds it, or something
21:53 < samholmes> ningu: That actually makes sense. It's the order of these meals which is why they chose them.
21:53 < samholmes> dinner is probably some sort of optimization or cleanup process
21:54 < samholmes> or that could even be dessert.
21:54 < ningu> samholmes: I know. but I still find it confusing for some reason.
21:54 < samholmes> meh
21:54 < ningu> samholmes: I think the issue was I was reading instructions from some modder forum where nobody knew anything
21:54 < ningu> I didn't realize at first it was an official google toolchain
21:54 < samholmes> ohs
21:54 < ningu> but instructions written by 15 year olds on how to mod your phone tend to be hard to understand
21:55 < samholmes> well, speaking of lunch
21:55 < ningu> I think the official docs are clearer
21:55 < samholmes> I have to go eat, then get back to my busy business.
21:55 < samholmes> :P
21:55 < samholmes> mobile phones. hmmpf
21:55 < ningu> hehe ok
21:55 < samholmes> later
22:01 < faceleg|work> ningu: that sounds horrible
22:01 < ningu> faceleg|work: which part?
22:02 < faceleg|work> toolchain names
22:02 < faceleg|work> ningu: in case you're really bored http://stackoverflow.com/questions/15523582/calling-persistentfunction-callback-segfaults-in-afterwork
22:02 < faceleg|work> :P
22:05 < ningu> faceleg|work: oh, I thought you were talking about actual work
22:05 < ningu> given your nick
22:05 < ningu> unfortunately I am in the middle of some actual work of my own
22:06 < faceleg|work> same
22:06 < faceleg|work> I'll badger you again in 10 hours
22:06 < ningu> hehe
22:06 < ningu> may or may not be on here
22:07 < faceleg|work> you'll love it
22:14 < AAA_awright> I think for short-hand "return cb()" we should probably be using "return void cb()"
22:14 < AAA_awright> Isn't that, like, exactly the purpose of the keyword/
22:16 < ningu> AAA_awright: void is a keyword in js?
22:16 < AAA_awright> ningu: Yes
22:16 < Fishrock123> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/void
22:16 < AAA_awright> It takes one expression as an argument, evaluates it, and then returns undefined
22:16 < ningu> hmm ok
22:16 < AAA_awright> And you're like "Well how could that possibly be useful"
22:17 < AAA_awright> Well, for this: Calling a callback, but discarding its return value
22:17 < Fishrock123> Wait, that link might not have been the right thing. ignore me. XD
22:18 < ningu> AAA_awright: no, it's obvious why it would be useful
22:18 < ningu> I just didn't know it existed
22:18 < ningu> AAA_awright: I mean, it sounds to me like it's just a minor optimization since that return value will be ignored anyway
22:18 < ningu> besides, callbacks don't usually return anything
22:18 < AAA_awright> Right
22:18 < AAA_awright> Mostly I'd use it for the benefit of the programmer
22:18 < ningu> I don't know if it will make a difference for V8 or not
22:19 < ningu> oh, for clarity, sure
22:19 < AAA_awright> Then you're like "Well is the return value useful for something?"
22:19 < ljharb> since undefined can be redefined in IE 8 and below, 'void undefined' is certainly useful.
22:19 < AAA_awright> If not, then add "void" to as not to be confusing
22:19 < ljharb> AAA_awright: if not, don't return it.
22:19 < ningu> so in javascript, null is not void
22:20 < AAA_awright> ljharb: Well you want to break out of the current function after executing the callback, right, so you can either do "cb(); return;" or my proposal, "return void cb();"
22:20 < Havvy> If  `undefined` gets redefined, who cares?
22:20 < ningu> Havvy: yeah, seriously
22:20 < AAA_awright> The latter case is a single statement, which is useful
22:20 < ljharb> Havvy: `var undefined = true;` in the global scope will break lots of things in older browsers.
22:20 < ningu> anyone who does that deserves the consequences
22:20 < ljharb> since it could be XSS, and not the user, no, they don't.
22:20 < ljharb> to not account for it is just bad programming.
22:20 < AAA_awright> Why the var?
22:20 < AAA_awright> Can't you just do `undefined=true;`
22:21 < ljharb> sure, thats not really the point
22:21 < AAA_awright> Just making sure
22:21 < spencera> (function(undef){     })()
22:21 < ljharb> thats totally a valid way to work around it. there's lots. but you can't just ignore it.
22:21 < Havvy> ljharb: You can totally ignore it.
22:21 < ljharb> lol you can, but it's a bad idea to.
22:21 < AAA_awright> Yeah, if you've got XSS problems then you have WAY bigger things to worry about
22:21 < Havvy> No. It's a bad idea to modify `undefined`.
22:22 < ljharb> AAA_awright: at any rate, i also advocate for a single exit point from functions, so then you wouldn't need "return" either
22:22 < ljharb> Havvy: i agree
22:22 < Havvy> And what AAA_awright says.
22:22 < ljharb> Havvy: but it's a good idea to recognize that it CAN be modified.
22:22 < AAA_awright> ljharb: Why? Then your function becomes a waterfall mess of if/else
22:22 < AAA_awright> I mean, REALLY
22:22 < Havvy> You can also redefine other useful things...like most of the DOM.
22:22 < ljharb> AAA_awright: if your function is that complex, split it up into multiple functions.
22:22 < Fishrock123> Just so that you don't modify it you mean?
22:22 < AAA_awright> ljharb: No, like testing for errors
22:23 < Havvy> You could detect that jQuery is there and replace it with your own library.
22:23 < AAA_awright> You want to bail from execution early
22:23 < AAA_awright> if(err){ handle(); return; }
22:23 < AAA_awright> or just if(err) return void handle();
22:23 < ljharb> AAA_awright: `if (validates(value)) { do stuff }`
22:23 < ljharb> then `validates` is a separate function
22:23 < AAA_awright> ljharb: It's a style difference, in my case you don't have almost your entire fuction body indented
22:23 < ljharb> but yeah i suppose for the node convention your first line would have a return
22:24 < ljharb> your computer is 13-17 inches wide, another level of indentation isn't going to kill you :-)
22:24 < Havvy> ljharb: I use those extra inches for other information. ;)
22:24 < AAA_awright> Ditto Havvy
22:25 < AAA_awright> I think termiating as early in the function body as possible is better for readability
22:25 < AAA_awright> Then you don't have to jump between entire blocks of if/else
22:25 < ljharb> for first-line returns, i think i might agree with that
22:25 < ljharb> but returns in the middle of the function are just weird
22:25 < AAA_awright> "Well this big long block would be false... *scroll* *scroll* now does it end here... or down here... *scroll up*"
22:26 < faceleg|work> AAA_awright: ues
22:26 < ljharb> "long block" === "too complicated a function"
22:26 < faceleg|work> AAA_awright: failfast I believe it's called?
22:26 < faceleg|work> much more readable
22:26 < AAA_awright> ljharb: Nonetheless my method still produces shorter blocks on average, and less indents
22:26 < ljharb> fair enough. i don't think less indents is worth optimizing for tho.
22:27 < Havvy> There are only two places to return with a long function:  At the beginning of a function. At the end of the function.
22:27 < Havvy> And yes, there are times when long blocks are better than refactoring into multiple methods.
22:28 < ljharb> Havvy: i agree with that generally, but i'd bet those "times" are really few and far between
22:28 < ningu> I need to convince my boss that (1) variable names should be human readable i.e. more than two characters long some of the time, (2) you don't need a comment on every line explaining what the code does; that's a sign your code is not clear.
22:28 < ljharb> Havvy: and more importantly, if one of those times exists, i'd bet i could offer a better architecture that would obviate it.
22:28 < ljharb> ningu: if thats what your boss believes, you need a new job
22:28 < ningu> (3) you should not have functions taking 11 arguments and reference them numerically
22:28 < ningu> ljharb: it's not what he believes. he just doesn't know better.
22:29 < AAA_awright> ljharb: It compiles down to largely the same code anyways, it's "GOTO (end of block)" in either case
22:29 < AAA_awright> So I don't see what you're optimizing
22:29 < Havvy> Not everybody is taught how to program properly in college.
22:29 < faceleg|work> ningu: hahaahhaha
22:29 < faceleg|work> Havvy: I wasn't
22:29 < faceleg|work> Havvy: I was taught how to write code that passes the assigment tests
22:30 < ljharb> ningu: you should not have functions with 11 arguments, period.
22:30 < ningu> ljharb: he doesn't force me to do any of this stuff. it's just what he does when he codes.
22:30 < ningu> ljharb: haha I know
22:30 < lovemuffin> ningu: to be fair, 1 is neccessary if you follow 2 & 3
22:30 < lovemuffin> err 2 if you follow 1 & 3
22:30 < Havvy> I knew how to name stuff before going in. Though I did learn one tip:  Use ix and not i for index variables.
22:30 < AAA_awright> In ECMAScript you might have a good reason
22:30 < faceleg|work> ljharb: I know you should pass an array right
22:30 < ningu> lovemuffin: yeah
22:30 < ljharb> faceleg|work: lol, no, you should make separate functions that each take a small number of inputs
22:30 < ningu> Havvy: how exactly is that helpful?
22:31 < faceleg|work> ljharb: what?!
22:31 < ningu> Havvy: both seem about the same to me
22:31 < ljharb> "ix" is just as unhelpful as "i". using Array#forEach means you don't even need an index variable tho.
22:31 < faceleg|work> Havvy: ningu ix is more extreme
22:31 < AAA_awright> Havvy: Everyone and their mother knows "i" is an iterator
22:31 < ljharb> faceleg|work: a function shouldn't *need* that many inputs. thats the sign of too complex a function.
22:31 < faceleg|work> ljharb: I'm pulling your leg
22:31 < ningu> ljharb: so what do you generally call the argument to forEach?
22:31 <@mbalho> iterator
22:31 < ningu> I sometimes call the argument to forEach i, even though I know it can be confusing
22:32 < AAA_awright> If you can't see from for(var i=0) that i is clearly going to be an iterator, then all hope is lost
22:32 < ljharb> faceleg|work: lol, touche.
22:32  * faceleg|work deducts ningu 10 points
22:32 < ningu> but I don't know what else to call it and often it's worse to give it a descriptive name since it would just be redundant
22:32 < ljharb> ningu: the arguments to the iterator method? value, index, array, sure - but you usually don't need the index.
22:32 < ningu> as in, you can tell from the name of the array what it contains
22:32 < ningu> ljharb: no, what do you call the value argument, that was my question.
22:32 < Havvy> Well, ix gives you two letters to variate depending on whether you are doing x/y/z stuff or i/j/k stuff.
22:33 < Havvy> And in one case (Minecraft modding) I've used things like 'jy'
22:33 < ningu> I have also called the value arg to forEach x sometimes, but that doesn't seem any clearer than i
22:33 < spencera> ningu: items -> (item)
22:33 < ningu> spencera: yeah, that works
22:33 < ljharb> ningu: books.forEach(function (book) {}); cars.forEach(function (car) {});
22:34 < Havvy> I use ix for the index variable.
22:34 < Havvy> Adn elem for the element variable.
22:34 < ningu> spencera: sometimes though the array doesn't have a name like that, but I agree that's clear
22:34 < Havvy> Though I usually only write *very* generic forEach methods.
22:34 < ningu> I like how perl does it where it's always $_
22:35 < ningu> the $_ stuff in perl is confusing but in *that* case it makes sense
22:35 < ningu> @foo = grep { /a/ } map { $_ . 'bar' } @bar;
22:36 < ningu> obviously doesn't work when you need to reference the iterator from other methods
22:36 < ningu> but that's a rare case
22:36 < ningu> and you'd use something else
22:37 < spencera> or coffee:  $.map books -> @.title
22:37 < spencera> or _.map
22:38 < ljharb> ugh, coffeescript.
22:38 < ljharb> also ugh underscore, but not as much ugh.
22:38 < lovemuffin> what
22:38 < lovemuffin> how is that readable heh
22:38 < spencera> titles = $.map books -> @.title
22:38 < spencera> that better? :P
22:38 < ningu> what is $.map? jquery?
22:38 < daekano> no
22:38 < Havvy> (map :title books)
22:39 < spencera> Havvy: sexy
22:39 < ningu> perl would be @titles = map { $_->{title} } $books;
22:39 < ningu> err
22:39 < ningu> @books
22:39 < lovemuffin> too many macros or sugar operators
22:39 < lovemuffin> the functional way is much better like Havvy wrote
22:40 < ningu> lovemuffin: livescript has a whole bunch of weird operators
22:40 < Havvy> map(function (book) { return book.title; }, books);
22:40 < ningu> like, 4 >? 8 = Math.max(4, 8)
22:40 < Havvy> For the JS equivalent to the Clojure I just posted.
22:41 < ljharb> or in ES5, books.map(function (book) { return book.title; })
22:41 < lovemuffin> why is map part of books?
22:42 < Havvy> Or with arrow functions:  books.map((book) => book.title)
22:42 < ningu> in livescript you can also write x |> f and f <| x instead of f(x)
22:42 < Havvy> lovemuffin: map is part of Array.prototype
22:42 < ningu> when I saw that in livescript I was just like, ok, this is too much
22:42 < lovemuffin> oh i know that, didnt realize books was an array
22:42 < lovemuffin> that stuff makes no sense to me by the way
22:42 < lovemuffin> conceptually
22:43 < ningu> what stuff?
22:43 < ljharb> what stuff
22:43 < Havvy> lovemuffin: Piping
22:43 < Havvy> x piped into f
22:43 < ljharb> livescript, ick. more js alternatives.
22:43 < ningu> yes, it makes some conceptual sense but I just think it would make code unreadable when different people use it
22:43 < Havvy> >? is "greater than or"
22:43 < ningu> it's too much to keep track of
22:44 < lovemuffin> [].map this stuff
22:44 < lovemuffin> the imperative OO way
22:44 < lovemuffin> functionally it maps a lot more sense like in clj (map fn [])
22:44 < Havvy> [].map isn't really imperative.
22:45 < lovemuffin> well basically, you're saying data has behavior
22:45 < ningu> what's bad is the situation in python
22:45 < Havvy> var out = []; for (var ix = 0; ix < in.length; ix++) { out[ix] = f(in[ix]); } return out;  << That is the imperative way.
22:45 < lovemuffin> well the OO way
22:46 < ningu> I wish there was an alternative to Object.keys(...)
22:46 < ningu> like foo.keys()
22:46 < lovemuffin> yea
22:46 < ningu> so it would at least be consistent
22:46 < Havvy> ningu: There's a reason new properties aren't being added to Object.prototype
22:46 < lovemuffin> but thats what i mean, that makes no sense :P
22:46 < lovemuffin> to do foo.keys
22:46 < ningu> Havvy: which is...?
22:46 < Havvy> Backwards compatibility.
22:47 < Havvy> There are scripts that depend on ({}).keys not being defined.
22:47 < ningu> well that's kind of unfortunate
22:48 < ningu> I guess I could always define it myself, but.. ugh.
22:48 < ljharb> no, don't do that. modifying native prototypes is bad.
22:49 < ningu> I know.
22:49 < ningu> that's why I said ugh.
22:49 < inspiron> i have a few different versions of static_files (module) which hold my images css fonts templates. one version is served by express on domain.com/co/0.2/css etc... i need to support my other versions i.e. domain.com/co/1.0/css . etc.. Is there a way that I can specify multiple versions of the same module in package.json ?
22:49 < lovemuffin> Object.keys is more readable, so why would you
22:50 < Havvy> lovemuffin: It is not more readable actually.
22:50 < lovemuffin> yea it is. because if you do foo.keys, how are you suppose to know what .keys is?
22:50 < ljharb> "readable" is subjective. but certainly Object.keys is more explicit.
22:51 < ljharb> you could say the same about any prototype method.
22:51 < lovemuffin> i do
22:51 < Havvy> lovemuffin: Given that it is part of the language spec...
22:51 < lovemuffin> i said it about maps and so on
22:51 < ljharb> but, the ones that are already built in are there, so one should use them.
22:52 < lovemuffin> yea i know, its not a big deal, but it is unfortunate in the case of arrays
22:52 < Havvy> I actually tried having it so that objects would define methods, and then interface objects would then take the object and the method and it just turned out to be a mess.
22:53 < Havvy> Specifically, using this: http://jeditoolkit.com/2012/03/21/protocol-based-polymorphism.html
22:53 < ljharb> lovemuffin: function map(arr, iterator) { return arr.map(iterator); } if it really bugs you
22:53 < samholmes> http://samholmes.me/post/45855973663/error-handling-in-async-programming-help
22:54 < samholmes> Anyone have a clue?
22:54 < lovemuffin> ljharb:x.slice()
22:54 < ljharb> samholmes: https://gist.github.com/3889970
22:54 < lovemuffin> ljharb: what is x?
22:54 < lovemuffin> you don't know
22:55 < lovemuffin> thats my point
22:55 < ljharb> lovemuffin: if you don't know then you shouldn't be touching x at all.
22:55 < lovemuffin> heh
22:56 < ljharb> also, name your variable something meaningful. if you name it "x" it's your own fault.
22:56 < faceleg|work> is there an activerecord equiv module in node?
22:56 < faceleg|work> rails activerecord I mean
22:56 < faceleg|work> colleague is asking
22:56 < lovemuffin> ljharb: k so i'll say stringx.slice() or arrayx.slice()
22:56 < ljharb> there's tons. i use mongoose for mongodb which is relationalish
22:57 < ljharb> lovemuffin: well, you don't have to resort to hungarian notation. what is in "x"? call it "books", or "name" or something.
22:57 < lovemuffin> ok is books a string or an array? is it some other object that also has a slice property function?
22:58 < ljharb> lovemuffin: plural names tend to be arrays, but of course it depends on the convention in your code as well as your local culture.
22:58 < lovemuffin> im not saying its hard to find out, but its just not as explicit as Array.slice(array) or String.slice(str)
22:58 < ljharb> then do Array.prototype.slice.call(x) if you insist
22:58 < ljharb> but i don't think that's a real problem :-)
22:58 < lovemuffin> its not really i agree
22:59 < lovemuffin> im just showing the comparison differences where in other languages its more explicit and namespacing is forced
22:59 < lovemuffin> err not forced, more like it's proper
22:59 < Havvy> What if we had Array.slice(array, other, params)?
22:59 < lovemuffin> like in clojure
23:00 < Havvy> Ah, that was already said.
23:00 < ljharb> i think that comparing to other languages has spawned some of the worst JS code out there, so i don't find it useful unless you're on TC39.
23:00 < ljharb> even then, not so much.
23:01 < lovemuffin> its mainly a rant about how OO adds complexity more than it makes things simple
23:01 < ericelliott> Hey, I have a small blob of JSON data that gets read from redis and changes infrequently. Currently, I'm doing the redis read, polling and updating periodically, and when a client makes a request to my restify service, I just dump the JSON that I have stored in memory. Is this a good strategy?
23:01 < ljharb> sounds good to me. how important is it to update it when it is infrequently stale?
23:01 < Topcat> Where's else can npm keep settings if `npm config delete <key>` and the -g doesn't remove it ?
23:02 < ericelliott> ljharb: Not critical. It's infrequently stale, and not stale very long. Everything still works -- users will just see a slightly old feature set (likely the feature set they're already familiar with) -- this is a feature-toggle configuration JSON blob.
23:03 < ljharb> then it's probably fine
23:03 < ericelliott> thanks for the feedback.
23:03 < inspiron> how can i specify my package.json so that when i npm install i can get multiple versions of the same module. (i have a good reason for this)
23:04 < ljharb> O.o what are they
23:04 < ljharb> your reasons i mean
23:05 < ningu> hehe
23:05 < perlitch> substack: spion: just published my first two packages on npm– knights-templar and knights-templar-br. for the latter i essentially used brfs as a template except that it looks for calls to the former's make method instead of fs.readFileSync. thanks for your guys' help. would love any kind of feedback
23:05 < inspiron> my module contains static files (image, css, fonts, templates). i need to support all versions on our site.  domain.com/static/<version>/images/a.png
23:06 < djangoobie> Hi I'm very new to Node.js and I'm using mongoose. When defining a schema with a field to a related schema I sometimes see people using ObjectID with a ref attribute and sometimes the related schema itself. Is there a difference between the two?
23:07 < ljharb> inspiron: why are static files an npm module?
23:07 < ljharb> djangoobie: try #mongoosejs. there is a difference.
23:07 < djangoobie> ljharb: thanks I didn't know they had a channel
23:07 < ljharb> with "ref", it treats it like a foreign DB key. with a schema, it's a subdoc
23:08 < inspiron> there are scripts in there too that are used by other modules when they access the appropriate url
23:08 < djangoobie> ljharb: a so I better stick to refs than in my case
23:08 < Spion> perlitch, do you have some kind of caching?
23:09 < perlitch> i didnt tackle that yet because i didnt really think templates would be re-used all that much
23:09 < Spion> probably not
23:09 < Spion> still, it might be a good future idea
23:09 < perlitch> definitely
23:10 < ljharb> djangoobie: yes, i love drefs. the only downside is that knowledge of what the "_id" means is stored in the app, not in the db.
23:10 < ljharb> inspiron: then i'd store those in version control.
23:12 < Topcat> I can't npm config -g delete https-proxy yet get returns witha url npmlog -> http://pastie.org/6644288
23:12 < djangoobie> ljharb: thanks I wish it was a bit more clearer in the docs/examples. Hard to dive in when you're coming from a different orm.
23:12 < inspiron> we'll i use some dependencies in it that i pull from doing an npm install
23:13 < inspiron> i should say the majority of it is static files. but there is node related stuff in it
23:15 < samholmes> Why doesn't node core use promises?
23:16 < samholmes> fs.stats('/path').then(function(stats){},function(err){})?
23:16 < samholmes> That would be cool
23:17 < samholmes> ljharb: ^
23:17 <@Nexxy> samholmes, because promises can be implemented in userland
23:17 < azylman> Core is building blocks, not buildings
23:18 < samholmes> Nexxy: I'm not talking about promises on top of these other APIs; rather, promises as the API for node core.
23:18 < inspiron> is there a way I can tell a dependency in my package.json to name its folder in node_modules to "blah"
23:18 <@Nexxy> samholmes, it was tried and deemed unsuitable
23:18 < samholmes> Nexxy: Why?
23:18 <@Nexxy> I don't know the exact reasons, I wasn't using node when this happened
23:19 < ljharb> yeah i've always wondered
23:19 <@Nexxy> I'd imagine it had something to do with being unnecessary
23:19 <@Nexxy> even with the example you give
23:19 < MI6> joyent/node: isaacs v0.10 * 008ab12 : tls: Prevent hang in readStart  This is not a great fix, and it's a bug t - http://git.io/VkfMBw
23:19 <@Nexxy> you're trading a comma for .then( )
23:19 <@Nexxy> huge win.
23:20 <@Nexxy> it's the same thing with less keystrokes
23:20 < samholmes> Nexxy: You're trading promise composition for a comma!
23:20 < ljharb> yeah it's not a huge win at that point
23:20 < samholmes> huge lose
23:20 < ljharb> but, it would make the concepts of promises more popular and widespread, which i think would be a good thing
23:20 <@Nexxy> I disagree
23:20 < ljharb> how so?
23:21 < samholmes> fn(..., cb) is prone to callback hell
23:21 <@Nexxy> I've yet to see a compelling argument for promises that couldn't be resolved just as easily with properly composed "regular" callbacks
23:21 < ljharb> samholmes: http://callbackhell.com would disagree. promises are just one way to avoid it.
23:21 < ljharb> Nexxy: i agree with that. i just think that thinking in terms of promises makes async coding much more natural
23:21 < substack> "if only everybody else would use my favorite abstraction"
23:21 <@Nexxy> which is why there are a ton of promises libs out there that people can pick from 
23:22 <@Nexxy> exactly what substack says
23:22 < substack> except that I feel that way about streams
23:22 < substack> sometimes
23:22 < samholmes> lol
23:22 < ljharb> haha
23:22 <@Nexxy> substack, streams have a lot more backing them up
23:22 < samholmes> promises seem to be "the way" to do async programming 
23:22 < samholmes> in sync, you return a value
23:22 <@Nexxy> for certain values of "the way"
23:22 < ljharb> they're not the only way. they're def just my favorite way.
23:22 < substack> samholmes: callbacks are lower-level than promises
23:22 < samholmes> in async you return something also
23:23 < substack> callbacks are sufficient
23:23 < azylman> Not really. There's also things like async: https://github.com/caolan/async
23:23 < azylman> Promises are "a way", not "the way"
23:23 < samholmes> callbacks render the return value nil
23:23 < substack> callbacks are required to implement promises but not vice-versa
23:23 < samholmes> azylman: "seem to be"
23:23 <@Nexxy> are you pro-callback or anti-callback?
23:23 < samholmes> I like callbacks.
23:24 < samholmes> But I didn't like the nesting nature.
23:24 <@Nexxy> then name them
23:24 < substack> then don't nest them
23:24 < samholmes> I also don't find naming callbacks as a solution
23:24 < samholmes> naming seems hacky
23:24 <@Nexxy> ah huh
23:24 < samholmes> I have to think of names for things that I wouldn't otherwise have to think about.
23:24 <@Nexxy> that's kind of the entire argument for promises
23:24 <@Nexxy> "they make me not have to think"
23:25 < samholmes> Nexxy: Exactly!
23:25 <@Nexxy> which is fine, but not something that needs to be part of core
23:25 < samholmes> Why think about something when you can not be thinking about it?
23:25 < masch_> hi, i got a problem with publishing an update to npm, heres the -dd log: http://pastebin.com/dMJU4LfW
23:25 <@Nexxy> samholmes, if you took the time to name your functions and compose them, it would make you think more about how you're doing things
23:25 < samholmes> Nexxy: Maybe.
23:25 <@Nexxy> I think the why is to aid in writing more efficient code with less unnecessary steps
23:26 <@Nexxy> s/less/fewer/
23:26 <@Nexxy> but that's just kind of the way I see things.
23:26 <@Nexxy> YMMV
23:26 < samholmes> My question is more about why hasn't promises been the abstraction that becomes the de facto standard? It seems like this whole async concept evolved out of the browser world and into the server world and node.js. Now, async is in this awkward place where there is no standard for doing things.
23:27 <@Nexxy> samholmes, because of these kinds of conversations
23:27 < substack> samholmes: because there isn't a natural convergent abstraction
23:27 < substack> there is diversity instead
23:27 <@Nexxy> standards are only worth anything if people can actually agree on them
23:27 < samholmes> There could still be diversity with promises.
23:27 <@Nexxy> and then actually implement them
23:28 <@Nexxy> even when we agree on standards
23:28 <@Nexxy> we never implement them properly
23:28 < substack> I hate standards.
23:28 < samholmes> substack: yes you're all for callbacks as being standard in cor?
23:28 < samholmes> core*
23:28 < substack> standards should be in the business of picking convergent abstractions that already proved themselves from real world use
23:28 < substack> instead of prescribing solutions waterfall-style with no feedback mechanism
23:28 < samholmes> There's no way of getting around the fact that Core uses the convention of a trailing callback arg.
23:28  * Nexxy &
23:28 < substack> which is how every standards body works
23:29 < substack> samholmes: you can use promise wrappers for core modules
23:29 < samholmes> What does convergent abstraction mean?
23:29 < azylman> An abstraction that people converge on
23:29 < samholmes> And, I'm curious how you wrap core with a promise wrapper?
23:30 < samholmes> azylman: the only word in that definition is converge. What does it mean to converge?
23:30 < samholmes> that puzzles me*
23:30 < substack> an abstraction that emerges naturally from multiple independent sources
23:30 < azylman> http://www.merriam-webster.com/dictionary/converge
23:31 < samholmes> Ah I see.
23:31 < substack> samholmes: https://npmjs.org/package/deferred-fs
23:31 < azylman> "http://www.merriam-webster.com/dictionary/converge"
23:31 < azylman> er
23:31 < azylman> "to tend or move toward one point or one another"
23:31 < samholmes> I see now
23:31 < samholmes> So things like jquery and other libs have the same practise.
23:32 < samholmes> practice*
23:32 < samholmes> Has promises proved themselves in real-world use?
23:32 < substack> sure
23:33 < substack> but the problem is that there are many viable alternatives to promises that are also very popular
23:33 < samholmes> So the only part missing is the fact that no other library used tehm.
23:33 < substack> the missing part is that they aren't strictly necessary to build node itself
23:33 < substack> so they belong in userland
23:34 < samholmes> I guess I get that.
23:34 < substack> and if you want to convince people to use them, you have the burden of proof to make compelling arguments
23:34 < samholmes> There could be a userland project that wraps all the core libs.
23:34 < substack> there are already lots of these
23:34 < samholmes> substack: Yeah, I assumed as much
23:34 < samholmes> substack: what other alternatives are popular
23:35 < samholmes> ?
23:35 < azylman> https://github.com/caolan/async
23:35 < azylman> That's the most popular
23:35 < samholmes> substack: hey, have you ever tried returning a stream instead of a promise? :P
23:36 < samholmes> azylman: I'm not just talking about control flow libs
23:36 < azylman> Well, that's what promises are for generally :)
23:37 < samholmes> azylman: That's what people think of, off the bat. But, I'm talking about the idea of a simple promise object that adheres to the spec by domenic, that is returned by all async functions.
23:37 < AAA_awright> How am I supposed to break out of a while(1) loop in the REPL >_<
23:38 < AAA_awright> The interrupt keys do nothing
23:38 < AAA_awright> NOTHING
23:38 < samholmes> AAA_awright: }
23:38 < samholmes> maybe?
23:38 < azylman> samholmes: Yes. That would be for helping you manage control flow.
23:39 < samholmes> azylman: It's not all about control flow. You can pass these objects around. It's not just about "how you write code", I don't think.
23:39 < samholmes> Sure you could do .then().then().then()... but you could also do var ehm = prom.then(); senditoff(ehm);
23:40 < samholmes> There's more flexibility there, from what I can see.
23:40  * samholmes is a promise noob, mind you
23:40 < samholmes> But the simple fact that you're making use of the return statement vs replacing it with a callback argument, is what's most appealing.
23:40 < azylman> What you're describing is control flow
23:41 < samholmes> Meh. I guess you're right. But, what sort of control flow is the callback argument?
23:42 < samholmes> Is it rigid? Maybe not, cause substack mentioned how you can implement promises using callbacks, but not visa versa.
23:42 < samholmes> No, I'm sure you could implement callbacks with promises, right?
23:43 < samholmes> However, why must the return value of async functions be promises? What about streams?
23:43 < ljharb> promises take callbacks.
23:44 < substack> or event emitters
23:44 < substack> or whatever you want
23:44 < samholmes> ljharb: true, but I meant callback arguments appended to the async function.
23:44 < substack> maybe your thing just returns a function
23:44 < substack> samholmes: but then you still need to pass a callback, just do a promise function instead of directly to the first function
23:44 < substack> *just to
23:45 < substack> fs.readFile(file).then(function (src) {})
23:45 < substack> vs
23:45 < substack> fs.readFile(file, function (err, src) {})
23:46 < samholmes> substack: the only thing about it being in the first function is that it's locked in the first function's call
23:46 < samholmes> you can pass it around
23:46 < samholmes> can't*
23:46 < substack> pass it around?
23:46 < samholmes> even fs.readFile(file)(cb) gives you the choice to pass the return value around.
23:46 < substack> you pass something to it
23:47 < ljharb> where Promise is a promises library, var p = new Promise(); fs.readFile(file, p.resolve); then pass around the p
23:47 < samholmes> var meh = fs.readFile(file); passaround(meh)
23:47 < samholmes> ljharb: I see what you did there.
23:47 < substack> but what does that let you do that you can't easily do before?
23:48 < samholmes> substack: passaround could tell meh what function it wants to handle meh. Idk.
23:48 < samholmes> I'm being idealistic or something.
23:48 < samholmes> I guess I'm just new to the whole promise thing, and it made my brain wonder. :P
23:48 < samholmes> anyhoot.
23:48  * samholmes must get back to work.
23:50 < samholmes> However, I have to mention. Promise implement a way to catch errors.
23:51 < spencera> samholmes: that's the best part of promises imho
23:51 < spencera> their error catching
23:51 < samholmes> righto
23:51 < samholmes> main argument there
23:51 < samholmes> anyway
23:51 < samholmes> have to get back to work. xP
23:53 < MI6> joyent/node: Fedor Indutny v0.10 * 855caa8 : crypto: initialize transform lazily - http://git.io/SIAu4A
--- Log closed Thu Mar 21 00:00:54 2013
