--- Log opened Sat Nov 10 00:00:43 2012
00:10 < ericelliott> I seem to have trouble when I depend on another module which depends on a module to do its postinstall step. For example.. I have a module that does this:
00:11 < ericelliott>   "scripts": { "postinstall": "grunt install", "test": "grunt test" },
00:12 < ericelliott> works fine stand-alone. I can start from a blank slate, git clone and npm install it.. everything is great. But if I depend on this package from another package,  I get npm ERR! Failed at the tinyapp@0.0.1 postinstall script. Further up I see: Local Npm module "grunt-browserify" not found. Is it installed?
00:13 < ericelliott> Both packages depend on grunt and grunt-browserify
00:16 < ericelliott> samholmes: Are bower modules compatible with CommonJS? I thought they were AMD-based?
00:17 < samholmes> AMD is a processor no?
00:17 < ericelliott> AMD is a module format.
00:17 < ericelliott> As is CommonJS
00:17 < nathan7> ericelliott: Most browser modules check for AMD and CommonJS and use the appropriate thing
00:17 < jden> Advanced Micro Devices?
00:19 < ericelliott> nathan7: The question was "how do I get browserify to recognize bower components?" .. which doesn't really make sense. Either the module is compatible with CommonJS, or browserify needs you to expose something on module.exports so it can use it.
00:19 < nathan7> I don't know what bower is
00:19 < ericelliott> nathan7: Bower is basically npm for front-end modules.
00:20 < ericelliott> But npm is npm for front-end modules, so I don't really see the point.
00:20 < ericelliott> I use npm for both, and I love it.
00:20 < nathan7> Yeah
00:20 < nathan7> I don't see the point of Bower
00:20 < ericelliott> still working out how to get my post-install dependent modules to play nice with npm.
00:21 < ericelliott> but that's not really front-end specific.
00:21 < ericelliott> It seems like any module that uses a dependency in post-install would be problematic. );
00:22 < ericelliott> if anybody has ideas, I'm all years. I'm stumped.
00:23 <@konobi> ericelliott: time to ping isaacs 
00:32 < niggler> wow zynga is getting buttfucked
00:33 < TooTallNate> niggler: what happened?
00:33 < niggler> 2.11
00:33 < niggler> actually it hit an intraday low of 2.06
00:34 < niggler> which is actually kinda sad because that's right around the value of its assets
00:34 < niggler> (real estate, cash on hand, etc)
00:34 < niggler> it almost makes sense for pincus to take it private
00:35 < othiym23> he would only do that if he could somehow make a big pile of money from it
00:35 < othiym23> pincus is motivated entirely by concerns about the wealth and well-being of pincus
00:36 < niggler> he could probably arrange to buy back the company with cash to spare
00:37 < EhevuTov> Groupon is below $3/share as well. Was trading $20/share last year
00:38 < niggler> the market cap still exceeds what lefkovsky(sp?) walked away with
00:38 < niggler> but the big winner is kayak
00:39 < niggler> buyout at 40, ipo at 32 only 4 months ago
00:40 < othiym23> Zynga strip-mined its future -- I'm not sure what the point would be of taking it private
00:40 < othiym23> I mean, how does it increase revenue from where it is now?
00:40 < othiym23> acquisitions? Its original IP? *rolls eyes*
00:41 < niggler> reduces costs
00:41 < niggler> slash and burn
00:41 < niggler> zynga can be a 10-man operation
00:41 < niggler> sell off some real estate
00:41 < niggler> keep in mind the stock price is just barely above liquidation value
00:42 < niggler> which is not really a good metric in general, but in this case there's value to be extracted from restructuring
00:42 < othiym23> that sounds like actual work, not an easy exit
00:42 < CoverSlide|TPFR> zynga just acquired another game dev studio today
00:43 < niggler> lol  like omgpop?
00:43 < niggler> t
00:43 < niggler> h
00:43 < MI6> joyent/libuv: Ben Noordhuis master * 96fd64d : build: fix `make test` on darwin - http://git.io/qG6yVg
00:43 < niggler> they basically wrote down half the acquisition last quarter
00:43 < othiym23> just thinking about that deal makes me tireder and older
00:44 < niggler> instagram makes me sad
00:44 < niggler> the thought that it was worth 1B
00:44 < othiym23> the best thing that could happen to Zynga right now would be getting bought out GREE or ngmoco
00:44 < niggler> ACTIVISION!
00:44 < othiym23> Activision had a better than expected quarter and somehow managed to get punished by the markets
00:45 < MI6> joyent/libuv: Ben Noordhuis master * 62332ea : build: fix `make test` on darwin and sunos - http://git.io/zM69Wg
00:46 < tnorris> mscdex: ugh, was only able to pull out 20% more performance: https://github.com/joyent/node/pull/4266
00:46 < tnorris> that thing is beastly
00:47 < EhevuTov> I remember last year people were talking about Zynga eventually buying out EA
00:47 < othiym23> tnorris: 20% seems like a pretty significant improvement to me!
00:48 < tnorris> othiym23: heh, thanks.
00:49 < EhevuTov> yeah, that's awesome
00:49 < mscdex> tnorris: cool
00:50 < samholmes> http://stackoverflow.com/questions/13318101/node-js-https-server-err-empty-response
00:52 < niggler> othiym23: the market hates activision
00:52 < niggler> the management isn't exactly â€¦ friendly to wall street
00:52 < niggler> which is really sad, because the stock price of many really solid companies are dampened by management's inability to properly communicate
00:53 < niggler> + they don't have a compelling cash cow to replace WoW
00:54 < othiym23> an endless stream of awesome add-ons to SC2 that allow the Koreans to transcend the bonds of flesh and bone
00:55 < ericelliott> @konobi When I move all my build dependencies into the post install script, it magically works. So now my postinstall looks like "npm install foo; grunt install"
00:55 < niggler> othiym23: afaict the koreans play SC brood war
00:55 < othiym23> niggler: not any more!
00:55 < othiym23> KESPA pulled its head out of its ass and now all the pro teams are moving to SC2
00:56 < ericelliott> konobi,: Trick is, the other way seemed to sometimes work, which makes me think maybe there's a race condition with postinstall. 
00:56 < niggler> oh
00:56 < niggler> oh that reminds me
00:56 < niggler> http://fortlee.patch.com/articles/primary-election-ballots-printed-in-korean-for-first-time
00:56 < ericelliott> isaacs: ^ When I move all my build dependencies into the post install script, it magically works. So now my postinstall looks like "npm install foo; grunt install"
00:56 < niggler> apparently a county in NJ is running ballots in korean
00:56 < ericelliott> isaacs:  Trick is, the other way seemed to sometimes work, which makes me think maybe there's a race condition with postinstall. Is it possible it's trying to run postinstall before all the declared dependencies are available?
00:57 < ericelliott> isaacs: I only see this symptom when I'm trying to require a module whith postinstall dependencies from another module.
01:03 < mscdex> woohoo! at long last, a partially working ssh client in node! :-D
01:03 < nlf> nice!
01:03 < ericelliott> hurray!
01:03 < drudge> unpossible
01:03 < nlf> i'd be very interested in seeing that
01:04 < ericelliott> mscdex++
01:04 < nodenoob> node.js vim plugin please
01:04 < CoverSlide|TPFR> nodenoob: umm, just use a javascript plugin
01:05 < tnorris> nodenoob: i forked vim-javascript and added node specific globals: https://github.com/trevnorris/vim-javascript
01:08 < nodenoob> pathogen vs vundle. just tell me one i dont want to make a decision.. 
01:08 < nodenoob> thank you tnorris 
01:09 < tnorris> nodenoob: np
01:09 < othiym23> nodenoob: https://github.com/othiym23/.vim
01:09 < othiym23> clone and tweak
01:09 < othiym23> it will do everything you could ever possibly want, or you can just steal ideas from it
01:09 < othiym23> I use pathogen
01:12 < lucianosousa> someone can explain how can I do a group by query using mongoose
01:12 < lucianosousa> the documentation is terrible
01:13 < lucianosousa> I tried using Model.distinct(field, [conditions], [callback]), but was impossible
01:14 < MI6> joyent/node: Trevor Norris master * 13c5db9 : buffer: remove duplicate assertion tests  Many assertion tests are duplic - http://git.io/3g_Yhg
01:15 < tnorris> whoot! my first contribution!
01:15 < tnorris> othiym23: good call. pathogen is a savior.
01:17 < othiym23> I *like* using Git to manage my bundles
01:17 < othiym23> TextMate-style bundle managers make me twitchy
01:17 < othiym23> I never really understand how they work
01:17 < othiym23> hence my antipathy to vundle
01:22 < mscdex> nlf: if you want to keep tabs on it, the project is here: https://github.com/mscdex/ssh2
01:25 < nlf> mscdex: thanks, i definitely do
01:26 < nlf> mscdex: is it semi-usable? sounds like password based auth should work
01:28 < othiym23> man, I'm reading through all the old fibers flamefests on nodejs and nodejs-dev, and that's some bitter fighting there
01:29 < mscdex> nlf: yeah right now i only have password auth working and exec working (so far)
01:29 < mscdex> nlf: i have keyboard-interactive implemented too actually, but i haven't tested it yet
01:29 < bruce> othiym23: Well as they say right on the nodejs.org/community/ page, "The mailing list is used for announcements, discussion, and flame wars about Node."
01:29 < bruce> ... so at least it's on point.
01:30 < nlf> mscdex: very very nice
01:30 < nlf> especially once you get key-based auth working, i've got several projects i'd love to use it for
01:32 < adlwalrus> is there anything wrong with declaring your vars in a for loop or if block?
01:32 < nlf> i don't do it, but it's mostly habit. i was always told it's not good
01:33 < othiym23> adlwalrus: as long as you understand that the declaration is actually hoisted to the function level, no
01:33 < othiym23> so if you're relying on the variable being reinitialized to undefined each time through the loop / conditional, you may end up unpleasantly surprised
01:34 < mscdex> nlf: yeah, once exec() seems fairly sturdy i'll be working on pubkey and hostbased auth
01:34 < warz> im trying to get this addon to work, using uv_queue_work. im trying to track down a seg fault. ive got basically everything commented out except where i execute a callback function in the uv work done method.
01:34 < warz> so i think the seg fault is because of something with my callback.
01:34 < warz> my code is here, any ideas? https://gist.github.com/4048968
01:34 < warz> line 58 is where the seg fault occurs, at least
01:35 < othiym23> warz: you may have more luck with uv questions in #libuv
01:35 < warz> ah, didn't realize there was a dedicated chan
01:35 < othiym23> it's pretty quiet, but that's a perfect question for it
01:36 < adlwalrus> othiym23: okay, I basically knew that already, anyways, so cool.
01:37 < adlwalrus> othiym23: just to confirm, redeclaring a variable without assigning it to something does absolutely nothing, right?
01:38 < nlf> adlwalrus: my understanding of what he said is that the actual declaration will be hoisted to the function context, as in it won't even be trying to redefine it in your loop
01:38 < othiym23> adlwalrus: yeah, it gets picked up by the parser, there's no semantic effect
01:39 < nlf> for (var i = 0; i < 10; i++) { var bacon = 'tasty'; } is the same thing as var bacon; for (var i = 0; i < 10; i++) { bacon = 'tasty' }
01:39 < othiym23> yep
01:42 < adlwalrus> nlf: ooh, interesting.
01:42 < adlwalrus> othiym23: is what nlf said true?
01:43 < adlwalrus> nlf: so, internally, all of our code gets interpreted by the engine as if it were written by our autistic friend douglas cockford?
01:43 < othiym23> adlwalrus: yep, that's why I said "yep" in response to him ;)
01:43 < adlwalrus> othiym23: oh, my bad, missed it. :)
01:43 < othiym23> Uncle Douglas didn't pull his recommendations out of thin air
01:44 < adlwalrus> othiym23: yeah, some of him came from his anus.
01:44 < othiym23> JS's scoping rules are seemingly designed to be unintuitive
01:44 < adlwalrus> othiym23: also, I'd like to note that he doesn't consider them recommendations.
01:44 < adlwalrus> othiym23: more like divine edicts.
01:44 < adlwalrus> I personally find his code GROSS
01:45 < adlwalrus> othiym23: I just read the book, and I'm thinking I should do a blog post or something called TGP of TGP
01:45 < nlf> he definitely does some things that irritate me
01:45 < samholmes> bouncy listens on port 80? substack
01:45 < nlf> but meh
01:45 < samholmes> I'm setting up HTTPS on one of my domains/apps.
01:45 < adlwalrus> TGP of JS: TGP
01:46 < sorensen> good luck to everyone competing in NKO
01:46 < samholmes> If bouncy is proxing all traffic coming in through port 80, wouldn't it need to listen on port 443 too?
01:46 < sorensen> except substack
01:46 < sorensen> ...
01:46 < sorensen> :)
01:46 < samholmes> NKO?
01:47 < sorensen> http://nodeknockout.com
01:47 < othiym23> adlwalrus: the simplest thing to do is just replace jslint with jshint and get over it ;)
01:47 < CoverSlide|TPFR> samholmes: the bouncy bin doesn't support https
01:47 < substack> don't use the bouncy bin anyways
01:47 < substack> just use it programmatically
01:47 < adlwalrus> othiym23: :)
01:49 < samholmes> substack: I am using it programmatically.
01:49 < CoverSlide|TPFR> in that case it listens to what you tell it to listen to
01:50 < samholmes> So, I need to make bouncy listen to HTTPS connections and redirect those connections to the other ports?
01:50 < samholmes> Also, I would need to run an SSL server or something using openssl?
01:50 < nlf> bouncy can use ssl
01:50 < nlf> it's in the docs
01:52 < nlf> samholmes: https://github.com/substack/bouncy/blob/master/example/https.js
01:52 < samholmes> nlf: But certs are domain specific.
01:53 < nlf> yup
01:53 < samholmes> nlf: If I follow that example, I could only have one cert for all my sites.
01:53 < samholmes> all my domains.
01:53 < nlf> samholmes: a quick peak in the index.js shows that he's passing the options for bouncy on to tls.createServer
01:54 < nlf> tls.createServer allows SNI
01:54 < nlf> see http://nodejs.org/api/tls.html#tls_npn_and_sni
01:54 < nlf> i'm actually planning a blog post regarding exactly that, since it doesn't seem to be documented all that clearly
01:54 < clever> samholmes: SubjectAltNames lets you put extra domains in a cert
01:55 < samholmes> nlf: I want to understand what you're saying. I'm new to SSL, bare with me please. :P
01:55 < samholmes> nlf: tls.createServer creates an SSL server?
01:55 < nlf> right, and that's what bouncy uses to listen for SSL connections
01:55 < clever> samholmes: and SNI (which nlf mentioned) lets you give a different cert, based on what domain the client wants
01:55 < samholmes> does it use openssl?
01:55 < nlf> that SSL server supports an SNICallback, which uses server name identification - an extension to SSL
01:56 < nlf> you can use that to find the appropriate certificate and pass it on to the client
01:56 <@konobi> openssl 1.0.0d onwards i think
01:56 < nlf> samholmes: i'll work on the blog post this weekend detailing exactly how it all works, if you've got time to wait
01:57 < samholmes> nlf: Well, I'm certainly looking forward to the blog post, however, I don't have the time to wait until I get SSL setup, unfortunately.
01:57 < nlf> stud is also an option, just a simple ssl endpoint
01:57 <@konobi> haproxy
01:58 < samholmes> I'm understanding that the tls module is the module that instantiates the ssl server, makes sense.
01:58 < samholmes> I'm not understanding the SNI part.
01:58 < nlf> SNI is an extension to SSL
01:58 < niggler> stud + haproxy
01:58 < niggler> or stud + nginx
01:58 < nlf> it used to be that if a client made a request to an SSL based server, it had to serve whatever certificate it had available and that was that
01:58 < clever> samholmes: with SNI, you can detect which domain the user is trying to connect to, and you can give the right cert for that domain
01:59 < nlf> SNI allows the client to tell the server what server name it's trying to connect to
01:59 < nlf> the server can then use that to make sure it's sending the appropriate certificate
01:59 <@konobi> samholmes: SSL certificates are tied to an IP address
01:59 < clever> konobi: they are rarely tied to ip, they are tied to domain
01:59 < samholmes> clever: But, how do I do this if I'm giving a cert to bouncy? Which cert is this that I'm giving to bouncY?
01:59 <@konobi> so per ip address you can only serve one certificate
01:59 < clever> but your limited to 1 listener per ip+port
02:00 < clever> samholmes: are the end users connecting to node or bouncy?
02:00 <@konobi> sni allows you to go through the handshake and then decide which certificate you want to give the client and then encrypt the session via that
02:00 < samholmes> clever: they're connecting to a node process hosted another port (of course bouncy proxies to that port)
02:01 < percival> SNI is supported in IE7 and later, so unless your supporting legacy browsers, you can have multiple certs/vhosts
02:01 < clever> samholmes: so all connections go to bouncy first?
02:01 < samholmes> percival: can? or can't?
02:01 < samholmes> percival: nvm
02:01 < nlf> samholmes: essentially, look at crypto.createCredentials, and the SNICallback option of tls.createServer
02:01 <@konobi> http://en.wikipedia.org/wiki/Server_Name_Indication#Support
02:01 < percival> can
02:01 < samholmes> clever: yes
02:01 < clever> samholmes: then bouncy needs all the cert config
02:01 < clever> samholmes: so node config depends on what bouncy is configured to do
02:02 < samholmes> clever: hmm. So, I'm going to pass ALL my certs for my domains to bouncy?
02:02 < clever> yeah
02:03 < samholmes> clever: Do I just run a regular HTTP server for each of proxied apps?
02:03 < clever> bouncy itself will decrypt things, and then somehow pass it on to node (with or without ssl, depends on the config)
02:03 < clever> depends on the config in bouncy
02:03 < samholmes> clever: or do I pass the cert to them as well?
02:03 < clever> depends on the config in bouncy
02:03 < samholmes> Ah I see
02:03 < nlf> we typically run the end apps over regular http, on ports that aren't exposed to the internet
02:04 < nlf> bouncy handles the ssl
02:04 < clever> yeah, like http://127.0.0.1:1234/
02:04 < samholmes> Okay. What I'm going to do, is read the entire documentation for the tls module. Then I'm going to look into the other links you guess sent to me. I'll be back with any questions.
02:04 < nlf> samholmes: if you stay online, i'll whip up a really fast example on how i do it
02:04 < samholmes> nlf clever: I'm beginning to understand this now. Bouncy will handle the SSL and decrypt the messages, then proxy them off to my apps.
02:05 < samholmes> nlf: I'll be online until I get SSL working or fall asleep. ;) (which it's 6 PM here)
02:05 < samholmes> too bad freenode didn't have a friending system
02:05 < clever> samholmes: some irc clients have one, try /notify <nick>
02:06 <@konobi> does bouncy do ssl session routing?
02:06 < samholmes> it tells me when a nick is online?
02:06 < clever> samholmes: yep
02:06 < samholmes> cool
02:06 < samholmes> thanks
02:08 < nlf> samholmes: https://gist.github.com/4049524
02:08 < nlf> that's roughly it, obviously that doesn't include everything but it should give you an idea of how it works
02:09 < nlf> so with that example, if you try to go to example.com you'll get the cert /path/to/cert, if you go to example.net you'll get /path/to/cert2, if you go to example.org you'll get selfsigned.crt (it's a default if there's no match)
02:12 < samholmes> nlf: Just looked at my VPS, and I realized that I'm using the CLI for bouncy.
02:12 < nlf> oh yeah, don't do that
02:13 < samholmes> nlf: It looks like you're setting each of the domains to an object instead of a port number. Couldn't I just do this in my routes.json file?
02:13 < nlf> since it doesn't use the CLI bin, but rather uses the bouncy library programmatically, you have to tell it what port to redirect to anyway
02:14 < nlf> the real key is the sni_check function
02:15 < nlf> i actually have two bouncy instances running in the same server file, one to handle actual ssl connections, one to redirect http requests to https
02:15 < nlf> works great
02:15 < nlf> anyway, i gotta run. i'll work on that article this weekend, but that example should be enough to get you on your feet
02:17 < samholmes> nlf: Cool.
02:17 < samholmes> I'll see what I can figure out with this. I'll just ask anyone else here if I have trouble. ;P Thanks for your help. :D
02:18 < samholmes> nlf: Oh wait
02:19 < samholmes> nlf: If I give bouncy a default self-signed cert like in your example, does this mean that bouncy is not longer listening on port 80 (HTTP), but is not only listening on port 443 (HTTPS)?
03:06 < fauverism> anyone working on nko3 this weekend?
03:18 < rvagg> fauverism: #nodeknockout
04:52 < samholmes> With bouncy, if I call bounce(port) will it bounce to an HTTP server or HTTPS server if the bouncy is listening on port 443?
04:56 <@konobi> samholmes: you can run SSL on any port, 80/442 are just conventions
04:56 < samholmes> konobi: Right I see. But, what I mean is, does the application that I'm bouncing to have to be an https instance?
04:56 < samholmes> Or is there not even an https instance in the http module?
04:56  * samholmes goes to check the docs
04:57 < samholmes> yeah there's an https module with an http.Server class
04:58 < samholmes> Must the app that I'm bouncing to be a https.Server type that's listening on the port that I bounce to? Or is http.Server okay?
05:02 < goku22> how to escape special characters in a string like \u
05:03 < goku22> JSON.stringify adds two " at the start and end
05:07 < samholmes> konobi: Did you get my question? If bouncy is running an HTTPS server, does it require that my applications also run an HTTPS server or will a HTTP server suffice? I'm wondering if bouncy decrypts the HTTPS requests into regular HTTP request for me or not.
05:08 < samholmes> If anyone else can also answer this question then, please feel free too.
05:14 < clever> samholmes: i'm guessing you can configure bouncy to work both ways
05:34 < gauravag> I can see a lot of people coming and leaving
05:53 < samholmes> how do I redirect to HTTPS from within the bouncy callback?
05:57 <@konobi> samholmes: i'm not sure what you mean
05:57 < samholmes> konobi: About what I said to you earlier?
05:59 <@konobi> so bouncy is your frontend and you're using https there?
06:07 < chovy> when does NKO start?
06:08 < niggler> wtf is nko
06:08 < cgcardona> node knock out
06:08 < cgcardona> right?
06:08 < niggler> http://nodeknockout.com/ ?
06:09 < cgcardona> looks like the competition is 11/10-11/12
06:09 <@konobi> UTC
06:17 < chovy> so it must have started already
06:18 < chovy> i guess there's no way to 'watch' the competition online is there?
06:18 < niggler> its like watching a math competition
06:19 < chovy> i always thought tv could use a programming reality show
06:20 < niggler> wasn't that what the bloomberg tv show on startups was supposed to be?
06:21 < chovy> the silicon valley startups tv show they just aired?
06:21 < niggler> yeah
06:26 < chovy> maybe. just added it to dvr. we'll see
06:32 < chovy> it looks pretty stupid from what i can tell.
06:42 < cgcardona> chovy: niggler i watched it, it's freaking classic
06:42 < cgcardona> best like was "silicon valley is like high school. except it's only the smart kids. and everyone has money"
06:42 < cgcardona> BOOM
06:42 < cgcardona> *best line
06:43 < chovy> that's not what silicon valley is these days.
06:43 < cgcardona> chovy: i've been thinking it would be cool to do a podcast where I take one api of some framework and test it to the extreme in some edge case.
06:43 < chovy> i'm lucky if i find another person i work with who speaks english natively.
06:43 < cgcardona> chovy: i'm in silicon valley. i speak english
06:44 < chovy> that's two of us
06:44 < cgcardona> consider yourself lucky :p
06:44 < chovy> heh
06:44 < cgcardona> i work in the financial district at trulia on the mobile web team
06:44 < chovy> i'm in santa clara
06:45 < niggler> fuck silicon valley
06:45 < cgcardona> yea I agree that programming could use some type of show or something
06:45 < cgcardona> niggler++
06:45 < cgcardona> that's why I was thinking about the api edge case thing
06:45 < cgcardona> or like a myth busters of programming - where you just take some framework and break the crap out of it
06:46 < cgcardona> i know that probably was worthy of things hacker news says
06:46 < niggler> there are a ton of entities that are part of the problem
06:46 < niggler> hacker news is one of them
06:46 < niggler> as is tech crunch
06:46 < chovy> cgcardona: yeah, although i would rather watch people create cool shit, instead of break existing stuff.
06:46 < niggler> not sure which is worse
06:47 < cgcardona> chovy: i don't mean break it in a bad way. I mean take a certain api or framework to the limit to find what it's breaking point is.
06:47 < cgcardona> niggler: techcrunch is worse
06:47 < cgcardona> e
06:47 < cgcardona> i still go to HN daily
06:47 < cgcardona> tech crunch hellz no
06:49 < boltR> TC makes silicon valley look like hollywood
06:49 < cgcardona> boltR: did you watch the bravo show mentioned above
06:49 < boltR> yes
06:49 < chovy> not exactly sure what this is, says its a live stream of NKO: http://www.ustream.tv/channel/ibdknox
06:50 < cgcardona> talk about making SV look like hollywood
06:50 < boltR> i mean no
06:50 < boltR> i saw the trailer
06:50 < cgcardona> boltR: it's free on itunes
06:50 < cgcardona> i actually watched it. 
06:50 < cgcardona> yeaâ€¦..
06:50 < boltR> how painful was it?
06:50 < cgcardona> it was deliciously painful
06:50 < boltR> hmmm
06:50 < boltR> i'm tempted to see how ridiculous it is
06:51 < chovy> looks like a bunch of wannabee entrpreneur/rockstars.
06:51 < cgcardona> i highly recommend it
06:51 < cgcardona> the Spirit of Fuck You Disruption@
06:51 < cgcardona> !
06:51 < boltR> they don't even look lie entrepreneurs
06:51 < boltR> they look like 
06:51 < cgcardona> dude it's so freaking bad
06:51 < boltR> celebrities
06:51 < cgcardona> there is one part where the pitch dave mcclure of 500 startups
06:51 < chovy> fratboys and sorority chicks
06:51 < boltR> yeah
06:52 < cgcardona> he grabs the computer out of their hands and just reads through their pitch deck
06:52 < cgcardona> it's pretty funny
06:52 < boltR> lol
06:52 < boltR> did they pitch to paul graham?
06:52 < cgcardona> not in that episode 
06:52 < boltR> and talk about how they all read hn?
06:52 < boltR> oh ok
06:52 < cgcardona> haha
06:52 < boltR> getting there
06:52 < cgcardona> i'm sure it's coming in season two!
06:52 < cgcardona> MOBILE!!!!
06:54 < boltR> someone should make a tv show called american startup
06:54 < niggler> we are the startups of america!
06:54 < visnup> boltR: there's a new bravo show
06:54 < niggler> lol its 1:53 here and I'm hacking away at some javascript
06:54 < visnup> it's horrible
06:54 < boltR> visnup: yeah we're just talking about it
06:54 < boltR> i'm gonna have to watch it now
06:55 < boltR> "being a geek.."
06:55 < boltR> "is like being the new rockstar"
06:55 < visnup> my fiance watches all bravo shows and posted "watching silicon valley startups and none of the engineers have the black screen up, instead they are surfing facebook. i doubt the validity of this show. "
06:55 < cgcardona> boltR: you gotta
06:56 < visnup> it's some pretty entertaining drama though
06:57 < boltR> i don't see it on itunes
06:58 < boltR> oh wait
06:58 < boltR> now i do
06:58 < chovy> the show was promoted by zuckerberg's sister
06:58 < cgcardona> she's the executive producer
06:58 < chovy> its probably just one big commercial for facebook
06:59 < cgcardona> not really. i didn't see it mentioned yet.
07:00 < niggler> ok this discussion is boring me lets move onto something else
07:00 < niggler> compare mongo and redis
07:01 < chovy> redis is like localStorage, mongo is like storing json.
07:01 < visnup> I say we talk about super earths
07:02 < chovy> redis is just key/value store.
07:02 < boltR> that's comparing apples and oranges
07:02 < samholmes> clever: I configured it to work both ways yes, like your mom.
07:03 < samholmes> So, how do I redirect from within bouncy, is it the same as any HTTP redirect? I need a response object, but bouncy only gives me a request object.
07:04 < samholmes> I guess i use bounce.respond() to get the typical HTTP response object?
07:10 < samholmes> But, how do I redirect from http to https on a given request?
07:10 < samholmes> "https://"+req.headers.host+req.url; ?
07:10 < samholmes> Is that all or is there more to it?
07:10 < samholmes> I'm guessing there's also the query string I have to build...
07:11 < samholmes> actually, I guess that's all there is to it, cause req.url includes a query string!
07:20 < samholmes> How does Strict-Transport-Security header help? How can I set it in my express app for all responses? If I send it on an HTTP connection will it inform the browser to redirect to HTTPS?
07:20 < chovy> do you guys do:
07:20 < chovy> var foo
07:20 < chovy> , bar
07:20 < chovy> or 
07:20 < chovy> var foo
07:20 < chovy>   , bar
07:20 < chovy> my tabbing always seemed screwed up 
07:25 < itayneeman> isaacs: got a minute for a quick question about _debugger.js? :)
07:28 < SomeoneWeird> anyone know why I might be getting
07:28 < SomeoneWeird> return this.parent.utf8Slice(start, end);
07:28 < SomeoneWeird>                          ^
07:28 < SomeoneWeird> TypeError: Bad argument.
07:31 < mdedetrich> SomeoneWeird: if you are still interested
07:31 < mdedetrich> I fixed my issue, it had nothing to do with promises or whatnot
07:31 < mdedetrich> it was domains
07:31 < SomeoneWeird> ic
07:31 < mdedetrich> SomeoneWeird: http://nodejs.org/api/domain.html
07:31 < mdedetrich> and it was added in precisely due to the reasons I said
07:31 < mdedetrich> you can't have an web app that just crashes when some error is thrown
07:32 < mdedetrich> you have to have a mechanism to catch any error, regardless of where it is in the call stack
07:32 < mdedetrich> (and thats what domains do)
07:34 < SomeoneWeird> ic
07:34 < mdedetrich> you have to have this mechanism for a reliable web server
07:34 < mdedetrich> its practically an expectation
07:35 < mdedetrich> because some odd package X down the line can throw an error, and doing so will crash your server
07:35 < SomeoneWeird> mhm
07:35 <@konobi> samholmes: if bouncy is only doing https, then you need to start another server on port 80 to serve up redirection
07:36 < mdedetrich> most sane packages wont throw errors without trying to catch them, but the one I was using didn't
07:36 < samholmes> konobi: I figured that. In my process, called bouncer, I have two bouncy() calls.
07:37 < mdedetrich> SomeoneWeird: I would also recommend you create a domain handler for every type of request if you are doing something in production
07:37 < samholmes> konobi: And for the HTTPS redirection, I just use bounce.respond() to get the response object, then I use res.statusCode, res.setHeader, etc.
07:37 < samholmes> konobi: But, I'm wondering if strict-transport-security header should be used, or how to use it.
07:41 <@konobi> samholmes: foget bouncy, just get it working with plain http
07:43 < chovy> can i use mocha to test my code?
07:43 < chovy> i don't see how it references my app.js or any other js in the examples.
07:43 < samholmes> konobi: that's what I did...
07:47 < tjmehta> anyone else doing node knockout?
07:47 < tjmehta> i cant clone my repo :(
07:48 < chovy> i'm trying to do mocha knockout right now
07:49 < tjmehta> trying to sleep after drinking a mocha?
07:50 < chovy> no. mocha tests
07:50 < tjmehta> are you having problems?
07:53 < chovy> i don't get it
07:53 < SomeoneWeird> lol
07:53 < chovy> none of the examples reference any code
07:54 < chovy> they are all in isolation
07:54 < chovy> i'm looking at the user example
07:54 < chovy> https://gist.github.com/f87dc0e818421eb9c03d
07:55 < chovy> how the f do i get my code to connect to db and user model etc.
07:55 < chovy> do i wrap this with $mocha app.js or somethign
08:04 < chovy> oh, i'm an idiot
08:04 < chovy> it would help if i included the model.
08:04 < chovy> in the old days, you didn't have to test code
08:04 < chovy> these kids are all into testing now.
08:05 < SomeoneWeird> ikr chovy 
08:06 < chovy> i find it all rather silly
08:07 < chovy> how come my mocha test worked? I mean, i didn't tell it what db to use or anything.
08:08 < chovy> oh, my model is doing that.
08:12 < slaskis> how
08:12 < slaskis> how're you people holding up? tired  yet?
08:12 < boltR> solar flares
08:12 < boltR> oh
08:12 < boltR> i thought u were referring to the net splits
08:13 < slaskis> oh my
08:21 < chovy> wrote my first mocha test, yeah
08:22 < chovy> i am now a BDD and TDD zealot
08:50 < niggler> node http how do i get the method of a request (e.g. get post)
08:55 < chovy> mocha Makefile doesn't do anything
08:55 < chovy> when i run 'make test'
08:59 < techwraith> niggler: request.method :)
08:59 < niggler> yeah its 4 in the morning and duckduckgo failed me
09:03 < nb-ben> {'command':'test'} why does JSON.parse cannot parse it?
09:04 < kaizokua_> doesnt valid json require double quote?
09:05 < SomeoneWeird> yes
09:05 < SomeoneWeird> nb-ben, it's already an object
09:06 < nb-ben> nope, it's because JSON doesn't like single-quotes
09:06 < SomeoneWeird> { 'command': 'test' } is an object
09:06 < nb-ben> :D gay st0ff, been smashing my head against the table for about 40 minutes
09:07 < nb-ben> a JSON-syntax object..... wanted to convert that into an -actual- object using JSON.parse
09:08 < SomeoneWeird> heh
09:08 < EhevuTov> typeof()
09:09 < AAA_awright> EhevuTov: Typeof isn't a function, just a keyword like instanceof
09:09 < nb-ben> must die according to crockford
09:09 < nb-ben> :D
09:10 < EhevuTov> ah, it always evaluates just fine when i use it as a function
09:10 < EhevuTov> didn't know it was an operator
09:10 < niggler> woah woah woah its unacceptable to call stuff gay
09:10 < niggler> ho
09:10 < niggler> however, homosexual is acceptable
09:10 < AAA_awright> EhevuTov: Well that's because it's the same as just enclosing the object in parenthesies
09:10 < EhevuTov> oh, so true
09:10 < EhevuTov> good call. Yeah, i don't like all these features in JS
09:10 < AAA_awright> To get proper presidence use (typeof var)
09:11 < nb-ben> objects should not be mating and there are no female objects
09:11 < AAA_awright> *precedence
09:11 < niggler> there is a single gender for objects
09:11 < niggler> rendering every object homosexual, but gay is a bit too derogatory
09:12 < niggler> i guess asexual would also be acceptable here
09:12 < nb-ben> I suppose that is right
09:12 < nb-ben> lol
09:12 < EhevuTov> I just started reading Crockford's book
09:13 < nb-ben> there's lots of philosophy he states as fact tho which kind of bothers me a little
09:13 < nb-ben> his philosophy seem sound but should still be treated as philosophy imo
09:14 < EhevuTov> yeah, it's frustrating for me. I'm a (hopeless) perfectionist, so I find it a bit daunting
09:14 < niggler> the best book to read is the specification
09:14 < niggler> it is the bearer of truths
09:14 < EhevuTov> niggler, the ECMA standard?
09:14 < niggler> yes
09:14 < niggler> the EC motherflippin A standard :)
09:14 < nb-ben> according to crockford... they didn't get it right the first time
09:14 < nb-ben> so they are doing it the second time now :D
09:14 < niggler> started to go through it and learned quite a bit
09:15 < EhevuTov> nb-ben, refering to Harmony?
09:15 < nb-ben> EhevuTov, didn't read his books just watched his lectures
09:15 < EhevuTov> are you refering to ECMA 6 though?
09:16 < nb-ben> nope, 3
09:16 < EhevuTov> I remember JS being a lot simpler, but that was a long time ago. Same with C++
09:16 < niggler> C++11 went off the deep end
09:16 < Ralt> a lot simpler = without arrays?
09:16 < nb-ben> currently I'm one of those programmers who do JavaScript who don't know how it works.. I don't even know the current version of ECMAScript
09:17 < EhevuTov> I learned C++ back in the 90's before they had a standard lib and now they have lambas...
09:17 < Ralt> C++11 is easier now than before
09:17 < niggler> even C11 bothers me
09:17 < EhevuTov> lambdas. I'm trying to get up to speed
09:17 < thealphanerd> I need to figure out what a lambda is
09:17 < Ralt> RAII has never been so simple
09:17 < thealphanerd> soon
09:17 < Ralt> you don't have to use lambdas
09:17 < EhevuTov> an anonymous function, basically
09:17 < thealphanerd> oh
09:17 < thealphanerd> I use those
09:18 < nb-ben> I used to like writing in C/C++ but lately it seem like there's just no reason to go down that road with all the high level languages... at least unless you're developing one
09:18 < Ralt> C++ is verbose. Lisp is good.
09:18 < niggler> C is good
09:18 < Ralt> meh, C is almost like using assembly these days
09:18 < niggler> although my C ends up being mostly assembly routines glued together with some C code
09:19 < EhevuTov> I jump around between C/C++ and Javascript at work. I'm getting lost knowing what my machine(at the OS and CPU level) is doing anymore
09:19 < nb-ben> or I suppose maybe unless you're writing some heavy 3D games or such
09:19 < nb-ben> where this tiniest of efficiency could end up generating a few frames more
09:19 < EhevuTov> well, I do telco stuff, so I need to make it fast
09:19 < niggler> there are lots of places where performance matters
09:20 < niggler> but basically, its either performance sensitive, in which case you go to assembly and C, or its not, in which case you use a scripting language
09:20 < nb-ben> yeah well, instead of writing something in a month you could write it in a week maybe
09:20 < nb-ben> saving this programming time might be worth buying slightly better server hardware
09:20 < niggler> C++ sits in a no-man's land 
09:20 < nb-ben> that's how it is for me in most cases
09:20 < niggler> nb-ben: or just building custom chips
09:21 < niggler> which is what i ended up doing :/
09:21 < EhevuTov> I'm currently familiarizing myself with C++11 and Boost for a project that needs to be a Windows SNMP service. I do Node.js for fun and sometimes for profit
09:21 < nb-ben> do you use Gentoo niggler ?
09:21 < nb-ben> :D
09:21 < EhevuTov> niggler, that's cool
09:21 < niggler> i use a stripped down version of debian
09:21 < EhevuTov> what kind of chips?
09:22 < nb-ben> meh, lazyness pays these days
09:22 < nb-ben> being innovative in the software world should really be a thing that's focused on things that don't already exist
09:22 < EhevuTov> we're finding that the time to market is really what will generate us more revenue and profit, but they still want to code in low-level
09:22 < niggler> i've played with a few.  the tilera chips, i played with last year, but they aren't quite up to snuff
09:23 < nb-ben> niggler, if you can make better chips then sell them
09:23 < EhevuTov> I've did some prototypes in Node, but they didn't like it since it's not an MS product, albeit supported
09:23 < niggler> its not just about making better chips
09:23 < niggler> t
09:23 < niggler> h
09:23 < nb-ben> EhevuTov, lol
09:23 < niggler> e reason to go that direction is bus latency
09:23 < nb-ben> IE6 MUST DIE
09:23 < nb-ben> did you get that in his book yet
09:24 < niggler> so if you have a server, any sort of work you can offload onto the NIC saves you bandwidth to and from the NIC
09:24 < EhevuTov> lol not that part, but I think I saw that in his video
09:24 < EhevuTov> niggler, oh that's cool. Have you heard of solarflare NIC cards?
09:24 < EhevuTov> I think they offload onto the NIC chip
09:24 < niggler> they do something different
09:24 < niggler> its kernel bypass
09:25 < niggler> so they intercept the network calls and basically read/write to/from a segment in memory
09:25 < EhevuTov> oh, I find that interesting. I'd really like to do something with that. There's use for offloading to the NIC in my company
09:25 < niggler> its faster insofar as you don't need to context-switch
09:25 < nb-ben> will array[undefined] throw an exception?
09:25 < nb-ben> or just return undefined
09:25 < EhevuTov> so, like a DMA?
09:25 < niggler> but it doesn't offload work to the nic
09:25 < niggler> yes
09:25 < niggler> its a DMA
09:25 < EhevuTov> that's not really new, is it?
09:25 < niggler> except, unlike normal DMA
09:26 < niggler> you don't even need to hit the kernel to start reading
09:26 < nb-ben> how do I run node console mode to test things?
09:26 < nb-ben> oh just node :D
09:26 < EhevuTov> nb-ben, like node?
09:26 < niggler> myricom has a similar thing
09:26 < niggler> EhevuTov: any news regarding the 100g interfaces?
09:28 < EhevuTov> There was talk about them from a high-frequency trading programmer here in Chicago. He mentioned something about them but I forget. I just know that Solar Flare is coming out with an offloading card soon, so he said
09:28 < EhevuTov> I'm personally interested in q.703 ITU cards
09:29 < EhevuTov> I'd like to get my hands on a cheap one and try and build a driver for it if necessary
09:29 < EhevuTov> ideally one that does what you describe, or more
09:29 < EhevuTov> ...would really like to create something new in my industry
09:29 < niggler> problem is that few vendors will work with you on it
09:29 < niggler> what's your industry?
09:29 < EhevuTov> Telecom
09:30 < EhevuTov> phone call correlations
09:30 < EhevuTov> basically, it's like TCP/IP for phone calls
09:30 < niggler> ah
09:31 < EhevuTov> we watch for the connects..ACKs..disconnects and make sure calls get completed where they say they're coming from, so telco's can't forge and scam other telco's
09:32 < EhevuTov> Ideally, I'd like to take the Q.703 stream of packets, seperate them, and round-robbin them in a distributed fashion to a cluster of hashing computers and then do magic
09:33 < EhevuTov> if I could do that in the NIC instead of bringing it all the way to the CPU, or maybe just a DMA, that would be good
09:33 < EhevuTov> I'd think it would be complicated with a normal Ethernet NIC let alone a Q.703 one
09:35 < nb-ben> what's socket.pipe? there's nothing written about it in the documentation
09:35 < EhevuTov> oh, that's a function from an object
09:35 < niggler> what does express do with regards to uploading files?
09:35 < EhevuTov> so, socket is actually a type 'stream' IIRC
09:36 < EhevuTov> and streams have a .pipe()
09:36 < nb-ben> hmm I see
09:36 < nb-ben> someone should really find a way to document JS properly somehow lol
09:37 < EhevuTov> nb-ben, your 'socket' is probably an instance of this type: http://nodejs.org/api/stream.html
09:37 < EhevuTov> I'd have to see the code though
09:37 < EhevuTov> nb-ben, there's a flow to the documentation. It's usually pretty clear but you have to get the hang of it I guess
09:37 < nb-ben> yeah I'm reading this right now
09:37 < nb-ben> is it some sort of "flush" command?
09:38 < EhevuTov> nb-ben, also, remember, that an instance of a stream is also an instance of EventEmitter becuase it's inhereted as well: http://nodejs.org/api/events.html#events_class_events_eventemitter
09:38 < nb-ben> ah, seem so, only you get to specify where data goes
09:39 < EhevuTov> nb-ben, I love streams and pipes. It's probably one of the best features of Node
09:39 < nb-ben> yeah I understand that, guess I'm used to the silver spoon of javadoc lol
09:40 < EhevuTov> nb-ben, and because a stream is also an EventEmitter, you can add Listeners via the .on()  like Socket.on('data', function(data) { do something});
09:41 < nb-ben> yeah I have added a few of those so far :D
09:42 < EhevuTov> awesome. Yeah, I love streams. I can do a lot of stream processing in a few hours what would take me a while to do in another lang
09:42 < niggler> apparently its node-formidable
09:42 < nb-ben> can I use require for my own .js file?
09:42 < nb-ben> so that I can space my application to more than one file
09:43 < EhevuTov> and that's just with my ignorance. A person that works in node streams everyday can do stream pipeline processing in tens of minutes
09:43 < niggler> you can use browserify to do magic
09:43 < EhevuTov> nb-ben, yes, like require ("./mynode")
09:44 < EhevuTov> there might be a better way, but I'm not sure how to do it without the './' right now
09:44 < nb-ben> if I make a file "constants.js" and use require('./constants.js'); will that include the file ?
09:44 < EhevuTov> yes
09:44 < tuhoojabotti> no
09:44 < tuhoojabotti> you dont need .js
09:44 < EhevuTov> true
09:45 < nb-ben> ah, I see
09:45 < nb-ben> thank you :)
09:45 < tuhoojabotti> and it also works for js 
09:45 < tuhoojabotti> json*
09:45 < nb-ben> oh so I can just simply require a json object
09:45 < EhevuTov> there's logic tree where it goes through some cases
09:45 < nb-ben> that's pretty awesome
09:45 < tuhoojabotti> yeah
09:45 < EhevuTov> nb-ben, yes, that's how a lot of people include config files
09:45 < tuhoojabotti> not too many people know about it 
09:46 < nb-ben> to include config.json: require('config') ?
09:46 < nb-ben> or has to be config.js
09:46 < tuhoojabotti> ./config
09:46 < EhevuTov> http://nodejs.org/api/modules.html#modules_all_together
09:47 < EhevuTov> ^ the logic flow
09:47 < nb-ben> ty :) I'll be reading it
09:49 < tuhoojabotti> it doesn't mention json files, though 
09:49 < EhevuTov> tuhoojabotti, do you know if you can require a user-defined module like nb-ben is talking about without the dir specification? for instance just a simple ("mymodule"); ?
09:49 < nb-ben> aw, can't use comments in json
09:49 < tuhoojabotti> I use require('..') in tests
09:49 < niggler> no EhevuTov 
09:50 < niggler> to use a user-defined module without the directory name theym use reside in node_modules
09:50 < tuhoojabotti> so yeah you can, kind of
09:50 < niggler> so what i'm doing
09:50 < EhevuTov> yeah, but of course that's not a good idea usually
09:50 < niggler> i hacked together a require function for the browser
09:50 < niggler> which does XHR
09:50 < niggler> and then, to ensure the configs are separate
09:50 < tuhoojabotti> oh
09:51 < niggler> i put the config script for the browser in the root directory and the config script for node in the node_modules directory
09:51 < tuhoojabotti> I misread your question
09:51 < niggler> so based on resolution order, node will pick up the one in node_modules
09:51 < niggler> while the browser XHR version will pick up the one in root
09:51 < niggler> t
09:51 < niggler> hen you can do whatever magic there
09:52 < EhevuTov> man, 4am here :-(
09:52 < niggler> 5 here :)
09:52 < tuhoojabotti> 12
09:53 < EhevuTov> Anyone have problems with their Node service dying? I'm wondering if Node is safe to use in telco
09:54 < niggler> so long as you aren't falling back to C++ extensions you should be fine
09:54 < niggler> i managed to kernel panic once doing that with a very large memory allocation
09:55 < EhevuTov> niggler, not at the moment, but what would be the issue there if I did?
09:55 < niggler> it turned out to be an issue with v8 (the javascript engine)
09:55 < EhevuTov> ah, didn't throw well on a malloc or something?
09:55 < niggler> yeah
09:55 < niggler> in particular using tcmalloc
09:55 < EhevuTov> yeah V8 uses the heap mostly, I think
09:55 < samholmes> nigger: where do you work?
09:56 < EhevuTov> hrm, good to know thank you
09:56 < niggler> malloc by itself is pretty stable but i think tcmalloc clashed with what v8 uses
09:56 < niggler> i work for myself lol
09:56 < nb-ben> I'm so loving the fact functions are objects lol
09:56 < niggler> my day job is in low latency trading
09:56 < nb-ben> feels like I'm doing legitimized evil
09:56 < samholmes> niggler: I wasn't talking to you, I was talking to that other n****r.
09:56 < EhevuTov> nb-ben, :->>
09:57 < niggler> lol
09:57 < samholmes> jk
09:57 < samholmes> what's low latency trading?
09:57 < niggler> yeah its 5 am
09:57 < niggler> its statistics, basically
09:57 < niggler> statistics + speed
09:57 < EhevuTov> niggler, I went a a C/C++ meetup here in Chicago recently about High-Frequency Trading. Very interesting.
09:57 < niggler> the exchanges (us equities) pay rebates if you "provide liquidity" 
09:58 < niggler> if your order is there and someone trades against you
09:58 < niggler> s
09:58 < niggler> and that rebate is about an order of magnitude larger than the costs of the trade
09:58 < EhevuTov> that's where I learned about the NIC offloading
09:58 < niggler> yeah its a winner-take-all game EhevuTov 
09:58 < niggler> and especially in chicago
09:58 < niggler> t
09:58 < niggler> hey mostly run a futures-equity arbitrage
09:59 < EhevuTov> it sounded brutal, actually
09:59 < niggler> which involve really fast pipes from chicago to nj (most of the exchanges are in northern nj)
09:59 < EhevuTov> I was encouraged to apply
09:59 < niggler> its not worth it
09:59 < samholmes> niggler: so like markets?
09:59 < niggler> the industry is contracting
09:59 < niggler> yeah samholmes its an artifact of some strange decisions in the past
10:00 < niggler> a strange regulation "NMS" basically created this opening
10:00 < samholmes> niggler: Would you say you make a good living off it?
10:00 < EhevuTov> they pay 100-300k here in Chicago
10:00 < niggler> its enough for me to spend my weekend hacking at some javascript :)
10:00 < niggler> which i could actually use some thoughts on
10:00 < EhevuTov> even with that, I'm not sure it's worth it. It sounds brutal
10:01 < niggler> its not worth it insofar as the peak was a few years ago
10:01 < niggler> the industry is contracting, and employees are getting squeezed just like every other industry
10:01 < niggler> i survive because my run rate is incredibly low -- i don't need any other staff
10:01 < niggler> cron jobs et al do all the leg work
10:01 < EhevuTov> niggler, are you a one man op? Are you like a market creator?
10:01 < niggler> and that's what the industry is heading towards
10:01 < EhevuTov> "market maker"
10:02 < niggler> I'm not a registered market maker, but then again you don't need to in order to benefit from rebates
10:02 < EhevuTov> are you rich?
10:02 < niggler> there are designated market makers on NYSE, for example, who are required to quote a market
10:02 < samholmes> niggler: I'm not sure exactly what you do with markets now.
10:02 < niggler> rich in this area is far different from other areas
10:02 < samholmes> Do you trade the markets yourself, or are you more of a broker?
10:02 < niggler> the former
10:03 < samholmes> Would you say day trader?
10:03 < niggler> i trade off of money i saved up a few years ago
10:03 < niggler> yes its a type of day trading
10:03 < niggler> d
10:03 < samholmes> Is it automated?
10:03 < niggler> yeah a cron job starts it in the morning and stops it at night
10:03 < EhevuTov> niggler, could I do that here at the Chicago exchange?
10:04 < samholmes> niggler: commodities or stocks?
10:04 < niggler> the problem with the chicago stock exchange (cbsx) is that it's not where the action is
10:04 < samholmes> or currencies?
10:04 < niggler> when the price of a security moves, for structural reasons NYSE/NASDAQ or BATS move first
10:04 < nb-ben> general JavaScript question.. more of a confirmation I need.. I can use an array as a hashtable too right, and iterate over its array items without interference from named keys
10:05 < niggler> chicago equities respond to new york equities
10:05 < EhevuTov> niggler, sounds like an opportunity to arbitrage
10:05 < niggler> but that's completely unrelated to node
10:05 < niggler> EhevuTov: yes and that's why you see all kinds of crazy stuff in chicago with regards to dishes and fiber
10:05 < EhevuTov> nb-ben, I think so, but I'm not sure if the JS engine treats it the same or not
10:06 < kaizokua_> in js everything is a hash under the hood.  
10:06 < niggler> a few years ago, a company named spread networks worked to get a line dug from chicago to ny to save a few milliseconds
10:06 < samholmes> niggler: Did you write the cron job and algorithm?
10:06 < niggler> and now a few others are working on wireless links
10:06 < EhevuTov> niggler, that's insane
10:06 < niggler> they tied 10 customers (mostly banks) into multimillion dollar contracts
10:06 < samholmes> I heard about that.
10:06 < niggler> the wireless links are themselves interesting because the good spectrum is taken
10:07 < samholmes> niggler: do you work with this low level of latency?
10:07 < niggler> and phil falcone was fucked over recently 
10:07 < nb-ben> like say, var v=['one','two','three']; v['one']={}; for(var i = 0; i<v.length; i++) { ... } the for loop will just go over one two three and miss the 'one' key right
10:07 < niggler> samholmes: the problem is that its a winner-take-all proposition
10:07 < EhevuTov> Falcone? From Batman?
10:07 < niggler> lol Phil Falcone of LightSquared
10:07 < niggler> he tried to be clever and get spectrum straddling the GPS range
10:07 < samholmes> niggler: Meaning, if somone has that 1 millesecond over everyone else, then they take all?
10:08 < niggler> yes samholmes 
10:08 < samholmes> niggler: So, how is it you even get a bone?
10:08 < niggler> the thing is, all of the shitty GPS modules end up depending on a far larger range
10:08 < niggler> so falcone tried to press the GPS manufacturers to change (to comply with the spectrum)
10:08 < niggler> a
10:08 < niggler> nd as you can imagine, he lost the battle
10:09 < niggler> unfortunately, most of the other parts of the spectrum are locked up
10:10 < niggler> but i suspect some of the firms doing this are doing so â€¦ out of range, so i wouldn't be surprised to hear them closing up shop
10:11 < EhevuTov> and so you're able to make money by rebates
10:11 < niggler> samholmes: its a numbers game.  my edge basically comes from the fact that I don't have a large operation
10:11 < samholmes> niggler: it mainly consists of making trades across exchanges?
10:11 < niggler> since I'm not running multiple traders, my risk checks are much faster
10:11 < niggler> so one of the slowest parts of the system, as a whole, is a unified credit check
10:12 < niggler> if you have N traders, you have to do a risk analysis on the sum of the traders' positions as well as each individual trader's position
10:12 < niggler> before every trade, to decide if sending the order would cause problems
10:12 < niggler> now, to give you an example of what happens when that fails
10:12 < niggler> look at the 6-month plot for knight capital group (NYSE:KCG)
10:12 < niggler> http://www.google.com/finance?q=KCG&ei=MSieUIiJCtSj0AG7vAE
10:13 < EhevuTov> so basically you look for large trades, from only a few traders
10:13 < niggler> EhevuTov: its statistics
10:13 < niggler> a
10:13 < niggler> t a
10:13 < niggler> ny given point on a set of tickers i quote a bid and an offer
10:13 < niggler> a
10:13 < niggler> nd
10:13 < niggler>  the sizes are controlled based on risk parameters
10:13 < sinclair_> hey all
10:13 < niggler> in the most extreme example, you can imagine a martingale
10:13 < sinclair_> is mongoose the preference for working with mongodb?
10:14 < niggler> I obviously doesn't go that far, but what many well-capitalized firms (e.g. getco) do is a form of martingale 
10:14 < samholmes> martingale?
10:14 < niggler> where you end up quoting larger sizes as the price moves away from you
10:15 < niggler> samholmes: so you bet on a coin flip.  heads says you get 1 dollar and tails says you lose a dollar
10:15 < niggler> if it ends heads you walk away
10:15 < niggler> if it ends tails, you bet again, this time 2 dollars
10:15 < samholmes> niggler: Ah right
10:15 < niggler> if it ends heads, you are net +2-1 = +1 dollars and walk away
10:15 < niggler> etc
10:15 < samholmes> third time 4 times
10:15 < niggler> exactly
10:15 < EhevuTov> that's how I trade currency, but manually
10:15 < samholmes> 8 times etc
10:15 < niggler> so mathematically, you theoretically will never lose
10:16 < niggler> of course, "gambler's ruin" kicks in
10:16 < samholmes> which is?
10:16 < EhevuTov> right, you need an infinite amount of funds to do that right? :-)
10:16 < niggler> you don't have an infinite pot
10:16 < niggler> at one point you blow up
10:16 < samholmes> Right
10:16 < samholmes> or as casinos do it, there's a limit
10:16 < niggler> so with KCG (the example i pointed to) they had at one point a position that was nearly 10 times their market cap
10:17 < samholmes> casinos prevent this sort of hack with the maximum bet
10:17 < niggler> that's ruin
10:17 < niggler> a
10:17 < niggler> n
10:17 < niggler> d t
10:17 < samholmes> why do you spell and?
10:17 < niggler> he only reason its solvent right now is because a bunch of firms stepped in and backstopped (of course at a profit)
10:17 < samholmes> like that?
10:17 < niggler> samholmes: I'm using this irc client called colloquy
10:17 < niggler> and every once in a while it lags
10:17 < niggler> its as if when i hit the enter key its firing multiple sends, so every letter gets sent
10:18 < samholmes> Ah, weird.
10:18 < niggler> i thought it was the keyboard, but i swapped it for a few others and the same behavior showed up
10:18 < samholmes> I see.
10:18 < samholmes> anyway, back to the topic
10:18 < samholmes> Would you want to PM in order to avoid flooding?
10:18 < nb-ben> should I be using delete to remove array items?
10:18 < EhevuTov> I'm interested in the convo too
10:19 < samholmes> Is there a way to group PM?
10:19 < nb-ben> or just array[key]=undefined ?
10:19 < niggler> lets just hop to another room
10:19 < EhevuTov> nb-ben,  Ithink it depends on where you delete. I thin kit's faster to just do 'undefined'
10:19 < niggler> i think jifasnif is unused
10:19 < niggler> #jifasnif
10:19 < nb-ben> effect is the same?
10:19 < samholmes> how about #nigger?
10:19 < niggler> #niggler
10:20 < EhevuTov> nb-ben, I think delete reorders, or resizes the whole array, but not sure
10:20 < samholmes> always about you isn't it..
10:20 < samholmes> xP
10:20 < nb-ben> yeah I need that
10:20  * samholmes and niggler go to niggler
10:21 < EhevuTov> nb-ben, also, for instance if you just 'undefined' it might throw off your .length, but I'm not sure
10:21 < nb-ben> looks like I should be using splice
10:23 < nb-ben> EhevuTov, looks like it should be throwing off my .length and ordering :P
10:23 < nb-ben> EhevuTov, and delete should aswell
10:25 < nathan7> Undefined keeps something in memory
10:25 < nathan7> afaik
10:25 < nathan7> (the key, that is)
10:25 < nathan7> Yep, it does
10:25 < nb-ben> yep
10:31 < EhevuTov> nb-ben, oh, so how do you solve it nathan7 ?
10:31 < franck34> hi, i've made a module and i'm using readline to simulate a shell. I'm using autocompletion. Wondering how can i make match user input and module's function name
10:32 < nathan7> >> var obj = { a: 'blah' }; obj.a = undefined; Object.keys(obj);
10:32 < purr> nathan7: (object) ['a']
10:32 < nathan7> >> var obj = { a: 'blah' }; delete obj.a; Object.keys(obj);
10:32 < purr> nathan7: (object) []
10:32 < nathan7> EhevuTov: ^
10:32 < franck34> something like if (typeof(myModule[userInput] == 'function') ...
10:35 < EhevuTov> nathan7, thank you
10:36 < franck34> how can i list module function name ?
10:37 < nathan7> franck34: Object.keys(obj).filter(function(key){ return typeof obj[key] == 'function' })
10:38 < franck34> nathan7: ok but what is "obj" ? "module" ?
10:39 < SomeoneWeird> its an object
10:39 < SomeoneWeird> ?
10:39 < franck34> of course, but what is the module object ?
10:39 < franck34> if it's "module", i can only retreieve module.exports defined function
10:40 < SomeoneWeird> huh
10:40 < SomeoneWeird> >> Object
10:40 < purr> SomeoneWeird: (function) Object
10:40 < SomeoneWeird> its a built in feature
10:41 < franck34> my goal is to pass available module function list for readline autocompletion
10:42 < Robint91> hi all
10:44 < nathan7> franck34: A module is an object, like anything else
10:44 < nathan7> franck34: to be exact it's what it sticks into module.exports
10:44 < nathan7> franck34: so it may be a function
10:44 < nathan7> franck34: (but functions, like anything else, are objects too)
10:45 < franck34> nathan7: you are right. I can only loop what's defined in module.exports
10:45 < franck34> wondering if there is a way to loop every functions, not only which are defined in module.exports
10:45 < franck34> "this" does not work
10:45 < nb-ben> EhevuTov, using .splice
10:46 < nb-ben> EhevuTov, ['one','two','three','four'].splice(2,1) removes 'three' resulting in ['one','two','four']
10:46 <@konobi> global
10:47 < franck34> global ?
10:47 < franck34> mmh :)
10:49 < nb-ben> rvagg, is there a hasKey method for node-levelup?
10:49 < rvagg> nb-ben: no, just use get() and check the `err` parameter
10:50 < rvagg> I've been thinking about a has() but it'll be mostly redundant
10:51 < nb-ben> yeah I see
10:52 < nb-ben> unless there's some efficiency-valuable method implemented in leveldb no reason to create something ontop of it
10:52 < rvagg> nb-ben: of more use perhaps is a cas() (check-and-set), and perhaps even a method that'll automatically assign a new key for you, but they may be best for a higher level lib
10:53 < nb-ben> love the json valueEncoding thing :D
10:54 < rvagg> nb-ben: there is an unnecessary memcpy of the `value` data that could be bypassed with a has() but I'm not sure it's worth it, perhaps if you needed to do it really often and your values were quite large
10:54 <@konobi> 'x' in foo
10:54  * rvagg slaps konobi 
10:55 < rvagg> we're talking native interface here
10:55 < franck34> i have no choice i think. I have to exports all functions so i can loop throught module.exports
10:56 < nb-ben> rvagg, imo it's worth an implementation for correctness/completeness if not the rest of the benefits
10:56 < rvagg> nb-ben: you're welcome to open up an issue on github for discussion at least
10:57 <@konobi> an addon?
10:57 < nb-ben> prolly will when im done with this tiny project
10:57 < nb-ben> leveldb's awesome for node imo, gonna be using it alot
10:57 < nb-ben> so ill happily contribute :)
10:57 < rvagg> cool
10:57 < _geo> helllo
10:58 < rvagg> fwiw, pouchdb is using levelup for its node version: http://pouchdb.com/
10:58 < _geo> can someone recommend a well maintained expressjs module that handles forms and file uploading?
10:59 < franck34> _geo: formidable module
10:59 < rvagg> _geo: https://github.com/felixge/node-formidable
10:59 < rvagg> deoxxa[cookies]: are you alive?
11:00 < navaru> did someone worked with mongoose index expires (TTL)? I can't manage to get it working
11:00 < _geo> well thanks franck34, rvagg , it looks up2date, i've been using express-form2 but recently needed to do file uploading and the module didn't offer functionality
11:02 < Guest____> wuu anyone seen tjhollowaychuk somewhere here?
11:03 < rvagg> he comes and goes Guest____, wrong time of day right now though I suspect
11:03 < franck34> _geo: warning btw, i don't remember exactly the date of this tip, but perhaps you will need to disable multipart parser in expressjs. I think it's for an old version. If formidable can not see your uploaded file, check in this way
11:03 < Guest____> thanks rvagg 
11:21 < slaskis> should i be using socket.io or engine.io?
11:23 < Guest____> slaskis?: good question actually i'm just reading it up, whats the difference?
11:23 < slaskis> well as i understand it engine.io is the new backend for socket.io 1.0
11:24 < slaskis> it doesnt have the rooms and it only works with simple string messages
11:24 < SomeoneWeird> use socketio
11:25 < slaskis> SomeoneWeird: any particular reason?
11:25 < SomeoneWeird> because of the reasons you just said :P
11:25 < slaskis> well if i don't need more than that?
11:25 < slaskis> i'm merely wondering if engine.io might be ready for actual use
11:27 < slaskis> oh, and can i send a socket.io socket into a fork?
11:29 < Kakera> hm, I'm going to take over `steam` on npm, but I'm not sure what to do with the version number, considering that my package is completely different from the current one
11:30 < Kakera> isaacs told me to bump the major version to indicate a 'major change', but major change would be an understatement
11:32 < nb-ben> is there a way of defining variables as transient to JSON in JS?
11:33 < nb-ben> like for example 'connection' in a User object, I wouldn't want that saved to JSON when I stringify
11:36 < Kakera> also, the current package is at 0.1.3, and I don't want to go into 0.2.x territory when the API is so unstable
11:39 < yoshbu> anybody able to PM me regarding a problem I'm having using formidable and socket.io. seems simply, it just doesn't seem to be finding the module
11:45 < yoshbu> i'm using socket.io and trying to use formidable. I used nom install formidable --save
11:45 < yoshbu> then when i use "var form = new formidable.IncomingForm();"
11:45 < yoshbu> I get Uncaught ReferenceError: formidable is not defined 
11:46 < necco> did you require it in your code?
11:46 < yoshbu> in app.js I have: // My SocketStream 0.3 app
11:46 < yoshbu> var http = require('http'),
11:46 < yoshbu> 	formidable = require('formidable'),
11:46 < yoshbu>     ss = require('socketstream');
11:47 < yoshbu> is there a different way to require something using socket stream? or does that look right
11:47 < necco> the error is coming from app.js as well?
11:48 < yoshbu> no, it's coming from a function called when a form is submitted:
11:48 < yoshbu> $('form').on('submit', function(e) {
11:48 < yoshbu> var form = new formidable.IncomingForm();
11:48 < yoshbu> that's the line that it's saying not defined
11:48 < necco> I mean the code that is causing the error is saved in app.js?
11:49 < yoshbu> it's not, but it's within the app namespace and so in this other file "upload.js" (where the last two lines came from) I have access to other vars like "ss"
11:50 < yoshbu> and sorry if I sound like a n00b, i'm a little out of my comfort zone
11:50 < necco> you have to require formidable at the top of each file you want to use it in.
11:50 < SomeoneWeird> <yoshbu> $('form').on('submit', function(e) {
11:50 < SomeoneWeird> <yoshbu> var form = new formidable.IncomingForm();
11:50 < SomeoneWeird> huh
11:50 < SomeoneWeird> is the first line clientside?
11:51 < necco> is the error being thrown client side or server?
11:51 < yoshbu> not the first line, but nothing else is really happening before it. it's client side
11:51 < necco> and its not an error being relayed from the server?
11:52 < yoshbu> nope, not logging anything to the server
11:53 < yoshbu> I might have figured it out though, does socket stream require you do something like:
11:53 < yoshbu> ss.load.code('/node_modules/formidable', function(){
11:53 < yoshbu>   var search = require('formidable');
11:53 < yoshbu> });
11:56 < necco> When you say client, do you mean the browser?  And you are referring to the npm module for processing POST data?  If so then I don't believe you can use it in a browser, only on the server.
11:56 < yoshbu> yes, the console from my browser. and I am referring to that module, yes. so that could be my issue
11:57 < necco> It should be server side only
11:57 < yoshbu> thanks necco
11:57 < SomeoneWeird> you can't use most npm packages in the browser
11:58 < yoshbu> that makes sense. i'm a super n00b
11:58 < necco> there are some that can be used on both like Dustjs, it all depends on the module, but most you can't
12:00 < Tobsn> jezz, ##javascript is full of passive aggressive people hating on everything
12:09 < Robint91> how can I stream a video device with node?
12:09 < Guest____> does anyone know an irc channel for graph databases
12:09 < Robint91> I have a /dev/video0 on my server
12:09 < Robint91> that I want to stream
12:16 < svya1991> Need help with implementing a basic functionality similar to "like button" in Node.js... I have code but I am getting an error "Cannot POST ad/like/11"
12:16 < svya1991> Any help, please?
12:18 < TheAceOfHearts> does anyone here use Sublime Text 2? Any suggested plugins?
12:19 < Benvie> https://github.com/Benvie/JavaScriptNext.tmLanguage
12:20 < TheAceOfHearts> thanks
12:21 < svya1991> Need help with implementing a basic functionality similar to "like button" in Node.js... I have code but I am getting an error "Cannot POST ad/like/11" Any help at all, please?
12:21 < TheAceOfHearts> code sample?
12:21 < TheAceOfHearts> I dunno if I can help, but I can give it a shot :D
12:22 < TheAceOfHearts> I've been using Express and whenever that happens it's because you don't have the route properly set-up
12:23 < svya1991> TheAceOfHearts: Yes, please, I'll put it up here in a minute...
12:23 < TheAceOfHearts> like I said, I don't promise I can help, I'm very new myself! but I can take a look :)
12:25 < svya1991> TheAceOfHearts: https://gist.github.com/f0901fccaa5e29686920 Here you go...
12:25 < svya1991> Many thanks for replying...
12:27 < necco> try changing app.get('ad     to        app.get('/ad
12:28 < TheAceOfHearts> yeah
12:29 < TheAceOfHearts> I can't spot anything particularly out of place, tbh. Did you try that?
12:29 < yashodhan> Hello can any one help me with jade page rendering?
12:29 < necco> same thing for post, you need a proceeding '/' on your route
12:30 < svya1991> TheAceOfHearts: Yes, these were copies taken from the code that I've been writing... Nothing was changed...
12:30 < yashodhan> anyone? I am trying to render jade page with condition using if  but it's not working can you help?  jade pages
12:30 < TheAceOfHearts> did you try adding the / ?
12:31 < TheAceOfHearts> yashodhan: are you sure you're passing the correct parameters?
12:31 < TheAceOfHearts> yashodhan: it lets you pass objects, arrays and variables
12:32 < TheAceOfHearts> but what problem are you having?
12:32 < yashodhan> yeah but it's not working
12:32 < yashodhan> I tried using if there condition ther.
12:34 < Tobsn> Guest____ neo has a channel i think
12:35 < Guest____> Tobsn I know, but its dead i'm hoping somewhere like a gathering of awesome graphers
12:35 < Tobsn> #neo4j
12:35 < Tobsn> oh ok
12:35 < Tobsn> no idea
12:35 < Tobsn> :)
12:36 < yoshbu> anybody feel like helping: https://gist.github.com/4050957
12:36 < yoshbu> I am trying to use formidable to parse a file input from a form
12:36 < nb-ben> I need some help with streams on the net package
12:36 < nb-ben> I don't understand why the following phenomenon happens: http://pastebin.com/0KtwVnhX
12:37 < nb-ben> what my client sent the server is being piped back towards it by the server
12:37 < nb-ben> as if I need to somehow clear my buffer that's being used for both recv/send operations
12:38 < Tobsn> its a rather rare topic
12:38 < Tobsn> ;)
12:38 < nb-ben> :(
12:41 < nb-ben> hmm possibly because I am using pipe
12:42 < nb-ben> yep, learned something bad from one of the examples and used pipe eventhough it's not needed
12:44 < sinclair_> hey all, does anyone here recommend static asset loading with node?
12:59 < niggler> >> 3 * .03
12:59 < purr> niggler: (number) 0.09
12:59 < niggler> >> .03 * 3
12:59 < purr> niggler: (number) 0.09
12:59 < niggler> in node REPL, i get "Invalid REPL keyword"
13:00 < Ralt> niggler indeed, weird
13:00 < niggler> you tried it in the REPL?
13:01 < Ralt> yep
13:01 < Ralt> just `.03` throws the error
13:01 < SomeoneWeird> a variable can't start with a period
13:02 < niggler> 3*3 works
13:02 < niggler> 3 works
13:02 < niggler> but .03 doesnt
13:03 < Ralt> SomeoneWeird it's not a variable, it's a literal number
13:03 < niggler> https://github.com/joyent/node/issues/4268
13:03 < Ralt> SomeoneWeird try in the browser console, it works
13:05 < Guest____> hello lets say i want to do a lot of calculations or tasks on multiiple amazon small ami's/nodes. Is there some tooling to control these workers as a network of node.js bots?
13:05 < svya1991> Issue still not resolved... I have a code that keeps giving and error "Cannot POST" in the browser... Code can be found here: https://gist.github.com/f0901fccaa5e29686920 Any help will be much appreciated...
13:07 < necco> svya1991: it looks like the root '/' is still missing from your route, it should be app.post('/ads/like/:id'
13:10 < svya1991> necco: Hi... There are mutliple folks accessing app.js right now over ssh, so I can't write to it, but as soon as I try out your suggestion, I'll let you know what happens... Thanks very much!!!
13:12 < yashodhan> Hello can anyone help with jade page rendering?
13:14 < necco> yashodhan: are you trying to resolve your if conditional? Can you post anymore details? Is there an error?
13:21 < svya1991> necco: Thank you so much... There were 2 errors, in fact... Both of them were '/' errors... https://gist.github.com/f0901fccaa5e29686920 One, as you noticed, was in the JS code (app.post statement) the 2nd was in the jade code, line 2... It should've read '/ads/likes/'+ad._id ... The 2nd '/' was missing... Thanks a lot again!!!
13:43 < larzconwell> svya1991,  Hey
13:56 < franck34> is it actualy possible to write "ping" command but using only node (no ping wrapper), using raw sockets ?
13:57 < franck34> it's seem's that is not possible, jusk asking for fresh infos ;)
13:58 < mscdex> franck34: nope, "ping" requires ICMP packets
13:59 < franck34> okey mscdex (i think i already speak to you very long time ago, perhaps related to extjs)
14:00 < mscdex> extjs? i doubt that :-)
14:00 < franck34> haha ok :)
14:00 < franck34> same nick but not the same person probably http://www.sencha.com/forum/archive/index.php/t-21474.html
14:02 < franck34> ok so no raw socket and stuff like scapy possible with nodejs atm
14:09 < necco> franck34: node.js and c++ https://github.com/wearefractal/pinger
14:18 < franck34> is it possible to use npm on demand ? example: if require('foo') return error then npm install foo and require again
14:19 < mscdex> franck34: you can probably do it programmatically
14:20 < franck34> yep, just wondering if somebody already did something in this way
14:20 < franck34> thx
14:20 < franck34> same for require('http://xxxxx/my.module.js'); i suppose
14:21 < jrajav> Anyone had experience watching arbitrarily-large directories?
14:21 < mscdex> franck34: https://github.com/isaacs/npm/blob/master/doc/api/install.md
14:21 < jrajav> Is it true that on some OSes there are limits to how many files you can watch at one time?
14:21 < jrajav> As low as 8192?
14:21 < franck34> hehe mscdex that's what i was looking for thanks a lot
14:32 < necco> jrajav:  Yes, I checked on one of my linux VMs, cat /proc/sys/fs/inotify/max_user_watches reports 8192
14:32 < jrajav> So I guess the best solution is to only watch the root directory of the tree I want to watch
14:32 < necco> if you have root access you can increase it arbitrarily 
14:32 < jrajav> And walk it on changes
14:33 < necco> probably
14:33 < jrajav> The performance of the watching isn't crucial to my application - I'm making a note-taking app that will update both ways with a directory (intended to be a Dropbox dir, but could just be a normal one)
14:34 < merpnderp> Anyone know if the VIM plugin JSLint works well? I'm having trouble keeping sequelize's syntax straight and find I spend a lot of time counting braces and brackets.
14:34 < jrajav> AFAIK, directories will fire change events when anything is changed underneath them, including arbitrarily nested subdirs, right?
14:35 < jrajav> And the stat/mtime of a dir will be different if any files under it or any of its subdirs are different? (Would make it possible to cache results for each walk)
14:37 < necco> not sure, I know there are some actions that will not update a directories mtime when modifying a child file
14:37 < necco> I think it depends on the file system
14:37 < necco> I believe apple has an event system built in
14:38 < necco> on ext4, if you modify the mtime of a file the directory mtime is not updated
14:38 < necco> The dropbox client on linux monitors all files, not just the directory
14:38 < jrajav> Hm.
14:39 < jrajav> Yeah, and I want to have a portable solution
14:39 < jrajav> Guess I'll walk it every change
14:39 < jrajav> all of it
14:39 < jrajav> Thanks for the info!
14:39 < necco> np
14:40 < jrajav> Wait, so does dropbox register monitors on every file?
14:40 < jrajav> What happens if there are more than 8192?
14:41 < necco> you can increase the number if you have root access
14:41 < necco> I have it set to 1 million
14:42 < necco> echo 1000000 > /proc/sys/fs/inotify/max_user_watches
14:42 < jrajav> But if you don't know about that, and you have lots of small files in your dropbox..?
14:42 < jrajav> I'm assuming they have a fallback method
14:42 < necco> dropbox can only monitor the first 8192, then you wonder why your files aren't syncing and have to troll the dropbox forums to figure out why
14:43 < jrajav> >_>
14:43 < jrajav> Wow
14:43 < jrajav> But wouldn't you get an error back trying to register the 8193rd?
14:44 < necco> maybe, not sure, if so dropbox fails silently
14:44 < necco> http://linux.die.net/man/7/inotify
14:45 < necco> Inotify monitoring of directories is not recursive: to monitor subdirectories under a directory, additional watches must be created. This can take a significant amount time for large directory trees.
14:47 < jrajav> I just saw that
14:47 < necco> perhaps you can just monitor each directory
14:47 < jrajav> So to watch a whole tree I actually need to register all subdirs
14:47 < jrajav> yeah
14:47 < jrajav> Well that should be a lot better, though
14:47 < necco> yeah
14:48 < jrajav> I'm definitely not going to fail silently at the limit, in any case :P
14:48 < jrajav> I still can't tell how inotify signals that you hit /proc/sys/fs/inotify/max_user_watches
14:48 < jrajav> Doesn't seem like it would be IN_Q_OVERFLOW in the mask...
15:01 < necco> It looks like it will return ENOSPC when the limit is reached
15:01 < test_> hi
15:01 < necco> hello
15:01 < test_> could you help me please?
15:02 < necco> sure
15:02 < test_> ok
15:02 < necco> do you have a question?
15:02 < test_> i want to build a chat system in php and jquery
15:02 < test_> what would be the best way to do it?
15:02 < test_> jquery ajax?
15:03 < test_> ..?
15:04 < necco> I would write it completely in Javascript using Chrome's WebRTC 
15:04 < necco> no need for PHP or a server
15:04 < test_> what's chrome's webrtc?
15:04 < test_> never heard of that
15:05 < necco> http://www.webrtc.org/
15:05 < test_> was this chat built by that?
15:07 < necco> that is rather indefinite (article)
15:09 < test_> damn. too hard for me
15:09 < test_> what about sockets?
15:11 < garren> test_: I dont think webrtc works in many browsers. Possibly only in latest dev chrome. Why dont you look at using node.js + socket.io. Plenty of chat demo apps been built like that
15:14 < franck34_> is it complicated to rewrite a coffee scipt module into a pure js one ?
15:15 < jrajav> Uh. Just compile it?
15:16 < jrajav> Coffeescript is already "binary-compatible" with pure js
15:16 < Ancien> hi, i want to fix the socket.io id because it changes every time and it's not pratic but i don't know how can i do, have you got some idea ?
15:16 < franck34_> i really don't know abou coffee script
15:17 < nathan7> Coffeescript compiles to JS.
15:17 < franck34_> i've installed this module https://github.com/wearefractal/pinger and i don't know how to use it in pure js, require('pinger') return an error, don't know if it's because of coffee script or not. In the source code, there is a "TODO" regarding the fact this module can be useable in pure js
15:22 < jrajav> franck34_: You can install the 'coffee' compiler and compile it yourself, it's very simple
15:22 < jrajav> "Compile" -> Convert the coffeescript into pure js
15:23 < franck34_> jrajav: ok, googling about that, thanks
15:32 < franck34_> jrajav: compiled, but always have error in pinger module :(
15:32 < jrajav> What error?
15:32 < franck34> not at compile time
15:32 < franck34> but when i require the module
15:33 < franck34> it's specifical to this module i think, perhaps a pbug
15:33 < jrajav> What's the error?
15:33 < franck34> Cannot find module '../pinger'
15:34 < franck34> notice that in main.js (result of coffee script compilation) there is require('../pinger') which causing this error
15:34 < franck34> i've tried to change the path without success
15:37 < jrajav> Oh. This seems to be a native add-on, actually
15:37 < franck34> ha
15:37 < jrajav> If you look at main.coffee it's doing nothing but that require
15:37 < franck34> yep
15:38 < franck34> is there any luck to use this module without coffee ?
15:39 < jrajav> Try 'node-waf configure build' in the module directory
15:42 < franck34> jrajav: done
15:43 < franck34> btw it's like when i've npm install pinger
15:45 < franck34> jrajav: must i "require" pinger module in a particular way ?
15:45 < jrajav> Nah, if there's a node addon compiled to "module.node" you should just be able to do "require('module')"
15:46 < jrajav> I'm trying it myself and getting the same problem. I'm not sure what's wrong
15:46 < jrajav> Oh. Try putting ./ at the start of the require string
15:47 < franck34> in main.js ?
15:47 < jrajav> No, where you use it
15:47 < franck34> Cannot find module './pinger'
15:47 < franck34> the module is in node_modules/pinger
15:48 < franck34> i've updated with require('./node_modules/pinger');
15:48 < jrajav> Then add that too
15:48 < franck34> now i have undefined is not a function
15:48 < jrajav> Or copy it into your directory
15:49 < jrajav> Gist your whole script
15:49 < jrajav> You're doing something odd
15:49 < franck34> wait
15:49 < jrajav> Also, you should be requiring to the pinger.node, not to the directory containing it
15:49 < SomeoneWeird> if i have the number 2, is it possible to convert it to its hex eqiv? (eg 0x02)
15:49 < jrajav> Basically, the require string should look exactly like the path to the pinger.node file, minus the .node extension
15:50 < jrajav> SomeoneWeird: You mean the string "0x02"?
15:50 < SomeoneWeird> >> 0x02
15:50 < purr> SomeoneWeird: (number) 2
15:50 < SomeoneWeird> heh
15:50 < SomeoneWeird> nevermind then
15:50 < franck34> i've cp node_modules/pinger/pinger.node .
15:50 < jtomasrl> what do you guys think about koding.com
15:51 < franck34> then i've require('./pinger'); in my main script
15:51 < franck34> ha
15:51 < franck34> wair
15:51 < franck34> the undefined error is from my code, not the module
15:51 < franck34> should be ok so
15:52 < jrajav> jtomasrl: Why would you want/need a cloud text editor or ide?
15:52 < SomeoneWeird> jtomasrl, yours?
15:52 < jtomasrl> not mine
15:52 < jtomasrl> jrajav: to work with your team
15:52 < jrajav> franck34: I got it working
15:52 < jrajav> franck34: So there shouldn't be an undefined error with the module
15:52 < franck34> undefined error is in my code
15:52 < jrajav> jtomasrl: That's what distributed version control is for
15:53 < franck34> it's working
15:53 < franck34> thanks a lot jrajav 
15:53 < SomeoneWeird> >> a = { 0x02: "lol" }; a[2]
15:53 < purr> SomeoneWeird: (string) 'lol'
15:53 < jrajav> jtomasrl: This is a heavily solved problem
15:53 < jrajav> SomeoneWeird: Also:
15:53 < jtomasrl> jrajav well this is real time
15:53 < jrajav> >> '0x' + 2.toFixed(16)
15:53 < purr> jrajav: SyntaxError: Unexpected token ILLEGAL
15:53 < jrajav> >_>
15:53 < SomeoneWeird> haha
15:53 < SomeoneWeird> (2)
15:53 < jrajav> >> '0x' + 2.toString(16)
15:53 < purr> jrajav: SyntaxError: Unexpected token ILLEGAL
15:53 < jrajav> This bot doesn't like me
15:54 < SomeoneWeird> that won't work anywhere
15:54 < SomeoneWeird> you need (2)
15:54 < SomeoneWeird> >> '0x' + (2).toFixed(16)
15:54 < purr> SomeoneWeird: (string) '0x2.0000000000000000'
15:54 < SomeoneWeird> lols
15:54 < SomeoneWeird> >> '0x' + (2).toString(16)
15:54 < purr> SomeoneWeird: (string) '0x2'
15:54 < jrajav> Yeah I was derping
15:55 < jrajav> .toString is the one that takes a radix argument; for toFixed, that's the sig digits of precision
16:08 < TheAceOfHearts> does anyone know what happens with async's forEach if you pass it an empty array? does it simply not execute anything and go directly to the callback?
16:10 < eli_> hi there, I'm on ubuntu 12.10 and I believe I have installed node from a ppa but I can't seem to get any feedback when I try to execute node in terminal.
16:11 < mnaser> eli_: define feedback?
16:11 < eli_> eli@eli-desktop:~/Projects/BrowserQuest$ node server/js/main.js eli@eli-desktop:~/Projects/BrowserQuest$ node eli@eli-desktop:~/Projects/BrowserQuest$ node help eli@eli-desktop:~/Projects/BrowserQuest$ node status
16:11 < TheAceOfHearts> nm, taking a look at the source code, it appears it goes directly to the callback
16:12 < mnaser> eli_: if you type node only, do you get something similar to a shell?
16:12 < eli_> when I type "node" and hit enter, I just get a new line in my terminal
16:13 < eli_> I get the same result as if I had just hit enter without typing "node"
16:14 < eli_> but in my project, if I execute "npm install -d" I get a line with "npm info using node@v0.8.14"
16:14 < jrajav> TheAceOfHearts: That's a pretty horrible module btw
16:14 < SomeoneWeird> jrajav, what, async?
16:14 < jrajav> Yeah
16:14 < mnaser> jrajav: why..?
16:14 < SomeoneWeird> it's pretty awesome :P
16:15 < mscdex> eli_: `node -v` outputs v0.8.14?
16:15 < jrajav> Eh. I've had issues with it, and some of its implementation is pretty kludgy
16:15 < eli_> No, it doesn't output anything.
16:16 < mnaser> it's a really nice clean way of organizing flow while maintaining nonblocking codeflow
16:16 < mscdex> eli_: what ppa was this?
16:17 < eli_> Chris Lea's: https://launchpad.net/~chris-lea/+archive/node.js/
16:18 < larzconwell> That's the same one I'm using, it works for me.
16:18 < Gabriel403> I keep having to restart my server when I change the backend code, is this normal or is it possible I'm writing my modules strangely which is causing them to be cached?
16:19 < SomeoneWeird> normal, Gabriel403 
16:20 < mscdex> eli_: dunno then, i think most people generally have good luck with that ppa. you could always try the pre-built binary tarballs from nodejs.org or build and install from source yourself
16:20 < eli_> do you think this is an issue with node or something else?
16:20 < Gabriel403> SomeoneWeird: ah cheers
16:21 < Gabriel403> SomeoneWeird: anything I can do?
16:23 < mscdex> eli_: no idea
16:24 < mscdex> eli_: if npm works, then it must work. you don't have more than one copy of node on your system do you?
16:24 < SomeoneWeird> Gabriel403, https://github.com/isaacs/node-supervisor
16:25 < eli_> mscdex: I probably do. I installed the default ubuntu node (0.6.*) and my npm wasn't working for a project. I then changed to the one on the ppa to get 0.8.14.
16:25 < Gabriel403> SomeoneWeird: kinda like forever but with file stating to check for changes?
16:25 < SomeoneWeird> yap
16:25 < eli_> mscdex: I will look at how to remove the old one. Thanks.
16:25 < Gabriel403> SomeoneWeird: sweet
16:26 < Gabriel403> SomeoneWeird: thanks
16:55 < eli_> mscdex: This issue has been fixed. Thanks a lot for your help. I believe the problem was that I installed node 0.6 and then installed node 0.8.6 from the ppa as "nodejs". This caused the command "node" to still exist but all the functionality had been moved to the command "nodejs".
16:56 < mscdex> eli_: ah ok :-)
16:57 < mscdex> eli_: debian uses `nodejs` for the executable name in their node packages too
16:58 < eli_> It makes sense that "node" is a reserved name in some systems.
16:58 < eli_> But thanks for your time. Have a nice weekend :)
16:59 < mscdex> well, it doesn't really make sense to me.... but meh ;-)
17:20 < merpnderp> Anyone know how to get jslint to stop complaining about a dangling _ in front of __dirname?
17:27 < merpnderp> nm, jslint site has it covered :0
17:27 < larzconwell> merpnderp,  /*jslint nomen: true */
17:38 < MI6> joyent/node: Ben Noordhuis master * b6e9897 : repl: don't interpret floating point numbers  Don't interpret floating po - http://git.io/px_fkA
17:54 < niggler> using node http how do i get the incoming ip address for a request/
17:57 < niggler> hmm nvm i expected console.log(request) to show the remoteAddress but it does not
17:57 < mscdex> niggler: request.connection.remoteAddress
17:57 < mscdex> :-)
17:57 < niggler> yeah i expected that to show up when i issued console.log(request)
17:58 < niggler> but when i put console.log(request.connection.remoteAddress) i got the right thing
17:58 < niggler> is it not enumerable?
17:58 < mscdex> `console.dir(request)` or `console.dir(request.connection)` ?
17:59 < niggler> no dice
17:59 < niggler> its strange
18:00 < niggler> require('http').createServer(function(req, res) { console.dir(req); }).listen(12321) 
18:00 < niggler> and i looked at the output and i see the connection key
18:00 < niggler> b
18:00 < niggler> but within that object i don't see remoteAddress
18:00 < mscdex> dunno
18:04 < logik-bomb> how do I execute a jsonp request on the server side?
18:07 <@mbalho> you dont need jsonp on the server side
18:08 < kaizokua_> json on server side is just called javascript ;p
18:08 < logik-bomb> :X
18:08 < logik-bomb> Thanks guys, you are right...
18:14 < rgb247> I have a node.js web socket server and a application written in PHP
18:14 < rgb247> I want with web socket to make some chatting options between users
18:14 < rgb247> how can I authenticate those users using web sockets?
18:15 < litenull> guys, i have a question. if i have a nodejs app, and do RPC and UDP calls to daemons, what is the best practice to secure those layers from foreign eyes ?
18:26 <@mbalho> litenull: https://github.com/substack/secure-peer
18:28 < jrajav> Why is fs.watchFile marked as unstable?
18:29 < jrajav> I understand why it would be undesirable to poll stat rather than registering a listener with the OS, but to me that isn't enough to warrant calling it "unstable."
18:29 < litenull> mbalho: thanks :)
18:45 < terrycojones> is there any consensus on what the best node virtual environment setup is?  
18:45 < terrycojones> nodeenv? nave?
19:07 < logik-bomb> is it possible to do something like this? https://gist.github.com/8826c00fb2d3115f1f19
19:08 < logik-bomb> I want to pass an object as a function argument
19:08 < slaskis> logik-bomb: yup
19:11 < logik-bomb> thanks slaskis 
19:13 < Guest____> hi
19:14 < shellokz> anyone use the pg gem here?
19:14 < shellokz> i'm not sure how to use error handling on client.connect();
19:43 < tuhoojabotti> logik-bomb: You should consider doing var song_metadata = { title: 'foo', label: 'bar' };
19:43 < logik-bomb> thanks tuhoojabotti 
19:54 < mscdex> anyone here ever do RSA and/or DSA signing via crypto.createSign? :\
19:55 < vy> Can anybody help with fs.read'ing a stream.fd http://ideone.com/Igk8J5
20:24 < niggler> is there any tool to generate a dependency digraph based on js files using require?
20:27 < warz> im not seeing how to create an return an Error from within a node C++ addon. i figured there'd be an Error class or something but i'm not seeing it. anybody know how to do this?
20:27 < AvianFlu> ThrowException(Exception::Error(String::New("OMG WTF ERROR!!!")));
20:27 < AvianFlu> I think
20:29 < warz> ah
20:34 < warz> cool yea, Exception::Error is the function, thanks. i had been looking around for that for like the past day, hah.
20:34 < warz> until it became the last thing i needed to do
20:37 < AvianFlu> warz: yeah, the v8 API is nothing if not verbose :D
20:41 < Fusl> Heho... Is there anyone who can help me with my nodejs code (read stdin like a command prompt and combine it with stdout in between with carriage return)?
20:43 < niggler> like a repl Fusl 
20:43 < Fusl> repl?
20:43 < niggler> read-eval-print loop
20:48 < Fusl> No, niggler, you got me wrong :-( ... Can i post a link here?
20:48 < niggler> yeah
20:49 < Fusl> http://dontrm.org/20352fd1940dafa2e4331f65e178d453 As you can see here, the output at "\rstats:0|500|0|0|5.042845071991906\n" overwrites my input
20:50 < barranger> anyone else having issues with npm install mongoose?
20:50 < niggler> you have code we can peek at Fusl 
20:51 < niggler> it looks like a timing issue
20:51 < niggler> you can check that if you replace \r with \n
20:51 < Fusl> @barranger: yep http://dontrm.org/49d45a9029801b2c251c790800a5b91a
20:51 < Fusl> @niggler: wait
20:52 < barranger> @Fusl, thanks, wanted to make sure it wasn't just me :)
20:52 < niggler> Fusl: this is irc -- you don't need the @ sign
20:52 < barranger> :)
20:52 < Fusl> niggler Sorry :O ... I know :-)
20:55 < Fusl> niggler: http://dontrm.org/2b0fae598ac01c7e9299ff35719f1a2b
20:56 < squeakytoy> i have an open question, i am going to create a brand new site that might be a lot of trafic. Writing the whole back-end with js/node.js a good idea? (compared to java)
20:57 < niggler> Fusl: do you want to respond to every keystroke or every time you write a line?
20:57 < niggler> you know what \r does, right?
21:00 < Fusl> niggler, yep i know.. so i thought i can buffer the entire input (character-wise) and print it out, when a new stdout was executed... BUT: this example http://stackoverflow.com/questions/8233097/detect-enter-in-keypress-event-node-js-rawmode does not work... maybe because i'm connected with ssh to the server?
21:00 < niggler> ssh shouldn't be the problem here
21:00 < niggler> are you responding to keypress?
21:00 < devatwork> Im trying to live stream a log file via nodejs. Here is what im using : http://9thport.net/2011/10/16/how-to-pipe-a-output-from-child-process-into-a-webpage/
21:00 < terrycojones> anyone using nodeenv?  i'm getting an unhelpful OSError trying to build a new env via 'nodeenv env'.  ends with
21:00 < terrycojones>   File "/usr/local/lib/python2.7/dist-packages/nodeenv.py", line 249, in callit
21:00 < terrycojones>     % (cmd_desc, proc.returncode))
21:00 < terrycojones> OSError: Command make failed with error code 2
21:00 < niggler> fusl: it looks like you are responding to data
21:00 < devatwork> However it hangs if i dont response.end. Any ideas ?
21:01 < joeferner> can you write local files on nodejisu for node knockout?
21:02 < JohnMcLear> devatworks have you seen etherstream?
21:02 < JohnMcLear> it's pretty nice.
21:03 < devatwork> JohnMcLear, hmm let me google it
21:03 < JohnMcLear> useful if you want to "stream" back your log content
21:03 < Fusl> niggler, ok wait... the current example is this here: http://dontrm.org/f834e359ddc265575c4c6d185f1cc76f ... when i type in some text/characters e.g. "lorem ipsum dolor" it does not print anything ... also ctrl+c isnt going to be executed... does this example work for you?
21:03 < devatwork> the log is on the same server btw
21:03 < devatwork> if i end the nodejs instance, it prints w/e it had buffered
21:04 < devatwork> So seems browser buffers the contents till you .end it
21:04 < devatwork> JohnMcLear, link ? I only seem to find unrelated services
21:04 < JohnMcLear> hrm maybe I got the name wrong
21:04 < JohnMcLear> sec
21:05 < JohnMcLear> http://etherpad.org/2012/09/03/from-your-cli-to-etherpad/ --> https://npmjs.org/package/etherpad-stream
21:06 < devatwork> Wait i need an etherpad server ?
21:06 < JohnMcLear> I think for etherpad-stream yea
21:06 < devatwork> oh, hmm was wishing there was an easier alternative :(
21:06 < JohnMcLear> etherpad is very easy to install...
21:07 < JohnMcLear> git clone git://github.com/Pita/etherpad-lite.git
21:07 < JohnMcLear> cd etherpad-lite
21:07 < JohnMcLear> bin\run.sh
21:07 < devatwork> i just wanted a plain verbose log output to be displayed live.
21:07 < JohnMcLear> yea, I'm overengineering ;)
21:07 < Fusl> JohnMcLear: devatwork needs etherpad to stream (tail) a logfile? O.o
21:07 < JohnMcLear> I'm just interested to see someone do that, heh
21:07 < Fusl> lawl :D
21:08 < JohnMcLear> I didn't say it was the best way by any stretch of the imagination ;)
21:09 < devatwork> Fusl, got better ideas ? :)
21:09 < Fusl> devatwork: you could try this one: https://github.com/forward/node-tail
21:10 < devatwork> Fusl, seems pretty much similar to forking a new process w/ tail -f. Issue im currently facing is, if i don't response.end, the browser never flushes its buffer
21:10 < niggler> screw etherpad
21:12 < JohnMcLear> niggler?
21:12 < niggler> oh ether pad is overkill for this
21:12 < JohnMcLear> yea massively
21:14 < JohnMcLear> but it would be kinda interesting to see how well it performed at that job (from my perspective)
21:15 < devatwork> maybe i can just have tail running on server and firing events to clients for new lines
21:15 < Fusl> devatwork: some browsers buffers the stream from the server for x bytes and then writes it into a browser window or something similar... i couldnt find out anything but you can reproduce this problem with php: http://dontrm.org/bf6859d5344715d5c5a45a21b3e803a5 ... this behaviour should speed up browsers a little bit ...
21:17 < devatwork> Fusl, something similar on js side worked
21:17 < devatwork> print blank lines 50 times :\
21:18 < squeakytoy> i have an open question, i am going to create a brand new site that might be a lot of trafic. Writing the whole back-end with js/node.js a good idea? (compared to java)
21:18 < Fusl> devatwork: in firefox you need at least 512 bytes, because firefox caches 512 bytes... i am currently looking into your problem and will inform you if i find a solution for this
21:19 < devatwork> Fusl, appreciate it. Thank you
21:21 < JohnMcLear> squeakytoy - it really depends what the back end is doing, also "a lot of traffic" is really not specific..  So the answer is, is depends.
21:22 < squeakytoy> JohnMcLear, hm, ok. where can i learn more about if its a good idea or not?
21:22 < JohnMcLear> When you learn more about the specifics of languages and the spec of the project IE what modules you will use.
21:22 < Fusl> niggler: did you find anything what could help me? :D
21:22 < JohnMcLear> NodeJS can easily handle large sites with a "lot of traffic" though, but can your devs write code that wont break when you get a lot of traffic?
21:23 < squeakytoy> its actually just me on the team right now :-)
21:23 < squeakytoy> but it sounds like its easy to screw things up
21:24 < JohnMcLear> if its just you on the team, you prolly aren't going to be handling a "lot of traffic", no offense.
21:25 < squeakytoy> doesn't that depend on the site?
21:25 < squeakytoy> and not the developer?
21:25 < squeakytoy> no offense
21:25 < JohnMcLear> Well, how many requests do you expect to serve per second?
21:26 < squeakytoy> JohnMcLear, your comment was highly personal, saying that if i was the only one working on a site it wouldn't generate traffic? geez thanks
21:26 < JohnMcLear> I kinda stick by it, I can't think of any high volume site that only has one person working on it (maybe some Yahoo services do though ;))
21:27 < squeakytoy> i am going to develop a website that has the intention to get a lot of traffic, hence my question and concernins about node.js as being the back-end solution.
21:27 < timeturner> well, initially if just one person is working on it then it's probably better
21:27 < timeturner> after that yeah you need one or two more people at least
21:27 < timeturner> to take care of the site
21:28 < squeakytoy> can we focus on node.js as a back-end choice or not, and less on me as a developer?
21:28 < JohnMcLear> Yes.
21:28 < JohnMcLear> Node.js will be fine as a back-end choice.
21:28 < JohnMcLear> Node.js can scale and can serve lots of requests.
21:29 < JohnMcLear> Node.js can handle high volumes of requests per second.
21:29 < squeakytoy> i need to learn more about this, why its scaleable, etc.
21:29 < JohnMcLear> http://venturebeat.com/2012/01/24/node-at-google-mozilla-yahoo/
21:29 < JohnMcLear> Top result when you use your favorite search engine.
21:29 < squeakytoy> JohnMcLear, if so, why aren't really big sites using node.js?
21:29 < timeturner> that sounds like the cartoon where one is talking about threads with apache and the other is talking about node scaling to thousands of connextions
21:29 < timeturner> lol
21:29  * JohnMcLear boggles.
21:30 < socketwiz> squeakytoy: if your are looking for examples, linkedin uses nodejs for their mobile backend
21:30 < JohnMcLear> squeakytoy:  At this point I'm going to assume you are trolling and ignore you
21:30 < JohnMcLear> bbiab
21:30 < timeturner> talking about how node scales is quite pointless. It's all in how it works
21:31 < squeakytoy> socketwiz, oh, cool
21:31 < timeturner> if any question should be asked about scaling for general information, it should be why not if or if not
21:34 < terrycojones> sorry to keep asking the same thing, but is anyone here using some form of virtualenv for setting up node projects? i'm curious to know if there's a generally preferred tool.
21:34 < socketwiz> terrycojones: i'm playing with smartos and the nodejs image v1.4.0
21:35 < terrycojones> socketwiz: huh, thanks - i've not heard of smartos.
21:35 < terrycojones> i've seen nave and nodeenv
21:36 < socketwiz> terrycojones: http://smartos.org
21:36 < terrycojones> socketwiz: thanks, reading...
21:41 < Fusl> devatwork: There seems to be no solution for your problem :-( See: https://en.wikipedia.org/wiki/TCP_Receive_Window#Window_size
21:44 < zell> hello, i just installed socket.io and noticed that i can use it via the urn: "/socket.io/socket.io.js", i just tryed to do the same with backbone without success, does anyone know why ?
21:45 < zell> (i did installed both backbone and socket.io from npm)
21:45 < vicapow> zell: did you setup your backbone sync function to work with socket io?
21:45 < zell> vicapow: do you mean backbone.io ?
21:46 < vicapow> zell: no
21:46 < devatwork> Fusl, oh well. Thanks !Q
21:46 < vicapow> zell: backbone isn't specific to socket.io. you'll have to configure it to play nice
21:47 < Fusl> devatwork: no problem :)
21:48 < zell> vicapow: just to be sure, you did read that i'm using backbone/socket.io and backbone.io ?
21:48 < vicapow> zell: nope. i just entered the channel
21:48 < vicapow> sorry :P
21:48 < zell> 22:44 < zell> vicapow: do you mean backbone.io ?
21:49 < vicapow> zell: yeah. i saw that comment. but i didn't mean backbone.io. i mean just backone
21:51 < zell> vicapow: what's troubles me is that my question isn't about socket io or backbone
21:51 < zell> vicapow: it's about static file inclusion
21:51 < vicapow> zell: okay. you're using express, i assume?
21:51 < zell> vicapow: yep :)
21:51 < vicapow> zell: and trying to reference the file in the browser produces a 404?
21:52 < zell> vicapow: yes
21:52 < vicapow> zell: and you're sure you have your middleware for backbone.io setup?
21:52 < zell> simply my question is: why does %script{ src : "/socket.io/socket.io.js"} works and %script{ src : "/backbone/backbone.js"} doesn't ?
21:54 < vicapow> zell: are you sure you have the middleware for backbone.io setup?
21:54 < zell> vicapow: i really think you're out of topic ><
21:55 < zell> I was using vendor directory to include client library, but recently i just saw that we could include libs from node_module (<script src="/socket.io/socket.io.js", HOWEVER, what works for socket.io doesn't for backbone, my question is why ?
21:57 < vicapow> zell: socket.io has middleware setup to server the client js code for you
21:58 < zell> vicapow: i see, thank you
21:58 < Kvisle> anyone know what I need to do to make node-gyp create a symlink to the built .node-file when installing my module with npm?
21:58 < yoshbu> anybody able to help shed some light on a file uploading issue?
21:58 < yoshbu> https://gist.github.com/4052670
22:00 < zell> vicapow: sorry to not understand earlier, but i didn't saw the connection btw client and middleware until you told me ;p
22:01 < vicapow> zell: it's all good. you were also right. i didn't quite understand your question first. i actually never used backbone.io before but i assumed it was just doing the same thing socket.io did with serving the client side js for you. i guess that's not the case and you were confused why that was so
22:02 < vicapow> yoshbu: if you don't have a specific issue, it would help if you could put together a fully working, self contained example that we could take a look at to try and help.
22:02 < zell> vicapow: also, i still can't figure out what i could do to serv the client like that
22:03 < zell>     %script{ src : "/socket.io/socket.io.js"}
22:03 < zell>     %script{ src : "/backbone/backbone-min.js"}
22:03 < zell>     %script{ src : "/socket.io/backbone.io.js"}
22:03 < zell>     %script{ src : "/js/vendor/jquery-1.8.2.min.js"}
22:03 < zell>     %script{ src : "browserify.js"}
22:03 < zell> all libs are included except backbone 
22:03 < yoshbu> specific issue: when I write that to file,it's 15 bytes and the contents are just [object Object]
22:04 < zell> to complete:
22:04 < zell>   app.use(browserify({
22:04 < zell>     require : { jquery: 'jquery-browserify', backbone: 'backbone-browserify' }
22:04 < zell>   })) 
22:04 < zell> (sorry for flood, next time i'll paste)
22:04 < substack> don't do app.use(browserify(...)) that is going away soon
22:04 < substack> like this week
22:04 < vicapow> yoshbu: maybe try calling .toString() on your 'image' object? it's really hard for me to try and help you since i'm not sure what other libraries you're using
22:05 < zell> substack: what should i do instead ?
22:05 < substack> zell: just use the command-line tool
22:06 < zell> substack: :'(
22:06 < vicapow> zell: so you're saying /socket.io/backbone.io.js returns a 404, right? so you're probably misconfigured your middleware for backbone.io
22:07 < zell> substack: ender + browserify + coffee compiler + node server ...
22:07 < squeakytoy> there is something i dont understand. Javascript itself is not event-based, right? So its thanks to node.js. For example, if you add something into the db, you can specify a callback function to get exected after its done. But this technique is node.js specific, right? not JavaScript?
22:08 < vicapow> squeakytoy: node.js is javascript
22:08 < zell> vicapow: oh you just answered my question without directly answering it XD
22:08 < vicapow> squeakytoy: javascript has an event loop built into the language
22:08 < squeakytoy> vicapow, well, node.js is platform/environment, js is a language
22:08 < zell> vicapow: it was actually the normal backbone.min.js who was not loading
22:08 < squeakytoy> how can a language have something built into it?
22:09 < vicapow> zell: lol. well, at least it's working now
22:09 < squeakytoy> a language is purely syntax?
22:09 < zell> vicapow: still not XD
22:10 < zell> vicapow: i just tried : <script src="/socket.io/backbone.js">
22:10 < vicapow> zell: well, you added backbone.min.js right? so that's loading now
22:10 < vicapow> zell: now what's the issue?
22:10 < zell> vicapow: how can i add it to socket io ?
22:11 < squeakytoy> if anyone could answer my question about node.js and javasript regarding event-based, that would be awesome :-)
22:11 < zell> vicapow: i mean, i basically had backbone in vendor, i would like to provide it through socket.io, is that possible ?
22:11 < vicapow> squeakytoy: did i alreayd?
22:11 < squeakytoy> vicapow, how?
22:11 < nathan7> squeakytoy: there is only one thread. you have setTimeout and such.
22:11 < vicapow> squeakytoy: javascript has an event loop built into the language
22:12 < squeakytoy> vicapow, how can a language have something built into it? it *has* to be the engine right?
22:12 < squeakytoy> vicapow, or do you mean, its language specific and the engines have implemented it? 
22:13 < nathan7> squeakytoy: It's necessary to implement the language
22:13 < vicapow> nathan7: exactly
22:14 < squeakytoy> nathan7, according to this, node.js is not single threaded: http://rickgaribay.net/archive/2012/01/28/node-is-not-single-threaded.aspx
22:15 < squeakytoy> i think my question might be too advanced for this crowd right now :P
22:15 < vicapow> squeakytoy: the language can be single threaded, but you can always have things outside of the language doing other things.
22:15 < squeakytoy> vicapow, did you read the article?
22:16 < vicapow> squeakytoy: as a user of the language, it's impossible to write JS code that could happen in parallel
22:16 < squeakytoy> vicapow, doesnt mean its single threaded for that..
22:16 < vicapow> squeakytoy: we're talking about the language
22:17 < squeakytoy> how can a language be single threaded?
22:17 < squeakytoy> i has to be the engine that takes care of that
22:17 < vicapow> squeakytoy: the engine has to implement the language, for it to be considered an engine for that language
22:18 < vicapow> squeakytoy: the language can effect the implementation of the language
22:20 < squeakytoy> my question is, there are examples of javascript that you can add a "callback function" argument, which gets executed if the logic requires time, right? How can you write such a function my self in JavaScript?
22:21 < vicapow> squeakytoy: setTimeout(function(){ alert('hello world!')},100)
22:21 < squeakytoy> For example, lets say i write a function that takes 10 seconds to execute, so i want to add an argument, a callback function argument, that should be executed once its done. How do I do that?
22:22 < squeakytoy> vicapow, but that doesn't solve the question. it just ads a timeout event?
22:22 < Bilge> ITT: we act as retarded as possible
22:22 < vicapow> squeakytoy: right. because the language has an event loop
22:23 < squeakytoy> vicapow, do you understand my question?
22:23 < Bilge> squeakytoy is in the lead with 1000 points
22:24 < squeakytoy> vicapow, ill show you an example with jsfiddle
22:24 < vicapow> squeakytoy: yeah. you can't. if you want to write a function that takes 10 seconds to run, it'll take 10 seconds to run because javascript is single threaded
22:25 < vicapow> squeakytoy: are you trying to illustrate some point by your example? your original argument was that a language definition can't have an event loop, right?
22:25 < squeakytoy> vicapow, http://jsfiddle.net/2QbYx/
22:26 < vicapow> squeakytoy: so what's your question?
22:26 < squeakytoy> vicapow, nope, i am trying to understand how I can write non-blocking code in JavaScript.
22:26 < squeakytoy> I dont think its possible, without node.js
22:26 < squeakytoy> I dont think its possible, without node.js and C-specific code
22:27 < vicapow> squeakytoy: you can't even do that in node.js. node.js is javascript. and javascript is single threaded.
22:27 < vicapow> squeakytoy: unless your function performs some sort of IO operation, there's no point in giving it a callback
22:27 < squeakytoy> vicapow, so, how come i  see examples of database functions in javascript that takes in a callback function as an argument?
22:27 < squeakytoy> vicapow, lets say it does some IO operations
22:27 < vicapow> squeakytoy: because there's an IO operation
22:27 < vicapow> squeakytoy: the same thing is true in the browser
22:28 < vicapow> squeakytoy: say i want to load a JSON file. i can give it callback, and the callback will be called with the result is returned
22:28 < squeakytoy> so.. i cant, as a js developer, write callback functino support?
22:28 < squeakytoy> for any given function?
22:28 < vicapow> squeakytoy: I just gave an example, didn't i?
22:28 < squeakytoy> how?
22:29 < squeakytoy> please, update my jsfiddle :-)
22:29 < vicapow> squeakytoy: if you're talking about just JS code, yes. and the same thing is true for Node. because Node.JS is javascript
22:29 < squeakytoy> so, no - you cant?
22:29 < merpnderp> Anyone know if in sequelize you can overload the save function as an instance method?
22:31 < vicapow> squeakytoy: there would be no point in adding a callback function to the code example you wrote, if it didn't perform an IO operation
22:31 < squeakytoy> vicapow, so i am right. You cant write nonblocking JS code in js *itself*. It is done via node.js
22:32 < squeakytoy> vicapow, lets say i need to append a string one billion times. Its not an IO operation, but I dont want to have it blocking the execution.
22:32 < vicapow> squeakytoy: you can't do that in node, either. there's no point
22:33 < vicapow> squeakytoy: you can't run *pure* JS code in a nonblocking way. there would be no point
22:33 < clever> squeakytoy: your only option is to append it 100 or 1000 times, then return to the event loop, and get called again when idle
22:33 < vicapow> squeakytoy: the only advantage to nonblocking is for IO operations
22:33 < squeakytoy> vicapow, well having my billion string appending non-blocking would be nice
22:33 < squeakytoy> clever, ah, ok
22:34 < clever> squeakytoy: http://nodejs.org/api/process.html#process_process_nexttick_callback
22:35 < vicapow> squeakytoy: well, what you could do, (in the browser or in node, is sort of "yield" to allow other code to run by calling setTimeout(runPartOfYOurThing,0)
22:35 < clever> process.nextTick is a faster way to do that, in node
22:35 < squeakytoy> clever, because i have seen some generic database function calls, where you can add a "callback function" argument. I was just curious, how the heck they managed to do that. But its because they are talking to node.js and have native c-code?
22:36 < clever> squeakytoy: the database lib i use is pure js, but the network calls are async, non-blocking
22:36 < vicapow> squeakytoy: it's because database access is an IO operation
22:36 < squeakytoy> vicapow, that means the db-developers or the api-developers have written c-code somehere, right?
22:36 < vicapow> squeakytoy: network access is IO
22:37 < vicapow> squeakytoy: no. it means node.js adds support for communicate over a network. which is something you're not allowed to do in the browser. but it's not an extension to the language.
22:37 < vicapow> squeakytoy: well, you're allowed to communicate over http, but not at that low level
22:37 < squeakytoy> yea, and node.js is written in c, so i am correct :-)
22:39 < vicapow> squeakytoy: what do you mean?
22:39 < vicapow> squeakytoy: browsers are written in c
22:39 < squeakytoy> some yea
22:39 < vicapow> squeakytoy: what does it matter if a language implementation is written in c or not?
22:40 < squeakytoy> my point is, writing nonblocking javascript code can only be done thanks to node.js
22:40 < vicapow> squeakytoy: nope
22:40 < squeakytoy> then, can you please write nonblockking javascript code in js-fiddle? as an example?
22:40 < clever> its mainly to do with the io lib that gets exposed to you
22:41 < vicapow> squeakytoy: better idea. can you write pure nonblocking javascript code in node.js?
22:41 < clever> browser based js simply doesnt have an io lib that can access files
22:41 < squeakytoy> vicapow, of corse i can. a for loop that loops a bazzilion times, thats blocking code
22:41 < vicapow> clever: there are IO functions on the client
22:41 < clever> very few
22:42 < clever> mostly arround hacks involving <input type=file>
22:42 < vicapow> clever: but they still exist and they're actually a decent amount
22:43 < vicapow> clever: for example. I can load an image in the browser using var image = new Image() image.onload = function(){ â€¦} image.src = "/someimage.jpg"
22:43 < squeakytoy> vicapow, do you agree that my for-loop is blocking-code?
22:43 < clever> thats not access files on the local system though
22:44 < vicapow> clever: it's still IO
22:44 < clever> its just repurposing the <img> code, its not a proper io lib
22:44 < clever> you cant read the bytes of the picture after doing that
22:45 < vicapow> clever: clever yeah you can
22:45 < clever> only the pixel values, not the actual compressed data
22:45 < vicapow> clever: how can something not be proper IO?
22:45 < clever> its not the same as require('fs') and being able to read /proc/uptime
22:45 < vicapow> clever: it's still IO
22:45 < vicapow> clever: just because you can't ready the raw bytes doesn't make it fake IO
22:46 < clever> this reminds me, there was a recent bug in socket.io dealing with this kind of thing
22:46 < clever> it inserted a <script> tag into the page for jsonp, and then set the callback function in an object
22:46 < clever> most browsers do that async
22:46 < clever> but this one browser was doing it sync, so it failed to find the callback
22:46 < vicapow> squeakytoy: write a piece of code in Node.JS that is pure JS that is non-blocking.
22:47 < squeakytoy> vicapow, why node.js and not javascript?
22:47 < vicapow> squeakytoy: because you're trying to prove that node.js does something client side js doesn't do. I don't think there is
22:47 < vicapow> squeakytoy: it's the same language
22:48 < krebipeti> hi, i want to use something like  :    var server = require('restify'); i'm trying to create plugin so that i can use it like server.use(myPlugin); so latter i can be use like server.methodInMyPlugin(); any idea to do this?
22:48 < squeakytoy> vicapow, if i make a for loop that loops a bazillion time. Is that not blocking code?
22:48 < clever> squeakytoy: thats just bad code
22:48 < squeakytoy> clever, its an example of blocking code
22:49 < squeakytoy> which vicapow says cant exist in node.js
22:49 < vicapow> squeakytoy: how does that prove node.js is doing something javascript doesn't?
22:49 < squeakytoy> vicapow, i.. am not talking about that
22:50 < vicapow> squeakytoy: that's what i thought this was all back? you're saying node.js isn't javascript, right?
22:50 < squeakytoy> vicapow, you asked for an example of blocking code in node.js, voila, here is for-loop
22:50 < vicapow> about*
22:50 < vicapow> squeakytoy: "squeakytoy: write a piece of code in Node.JS that is pure JS that is non-blocking."
22:51 < vicapow> squeakytoy: "none-blocking"
22:51 < squeakytoy> vicapow, nope, node.js is not javascript, its a platform
22:51 < vicapow> squeakytoy: nice way to qualify that argument
22:51 < squeakytoy> am i wrong?
22:51 < vicapow> squeakytoy: http://en.wikipedia.org/wiki/Scientific_burden_of_evidence
22:51 < vicapow> squeakytoy: you have to qualify your clames, dude
22:52 < vicapow> claim*
22:52 < vicapow> squeakytoy: does god exist? prove me wrong
22:52 < squeakytoy> vicapow, my claim is that you can write blocking code
22:53 < squeakytoy> vicapow, my claim is also, you can't purely write nonblocking code, unless the thanks of node.js
22:54 < squeakytoy> vicapow, its very simple question. If i have a function that takes 20 minutes to execute, how do i make it nonblocking? Meaning, add callback technique on that function?
22:55 < squeakytoy> only way to do that, is by using node.js specific techniques
22:55 < vicapow> squeakytoy: lets start with the second then? do you mind if I rewrite the claim for clarify? "you can write purely non-blocking code in Node.JS but not in Javascript"
22:56 < squeakytoy> vicapow, that statement makes no sense
22:56 < vicapow> squeakytoy: isn't that you're second claim rewritten?
22:57 < squeakytoy> vicapow, oh, ok. Then yes. That is my claim.
22:57 < squeakytoy> can you prove me wrong?
22:58 < vicapow> squeakytoy: okay. cool. yes
22:58 < squeakytoy> vicapow, really?
22:58 < vicapow> squeakytoy: node is single threaded
22:58 < squeakytoy> vicapow, leave node.js outside this.
22:59 < vicapow> squeakytoy: so no two pieces of pure js code will be running at the same time
22:59 < squeakytoy> vicapow, my claim was outside node.js
22:59 < vicapow> squeakytoy: it's the same for js
22:59 < vicapow> squeakytoy: aka, no two piece of pure JS code will ever be running at the same tim
22:59 < squeakytoy> vicapow, node.js's javascript execution is single threaded yes. But not node.js itelf
23:00 < vicapow> squeakytoy: well, do you think a browser single threaded?
23:00 < squeakytoy> vicapow, no
23:00 < vicapow> squeakytoy: exactly
23:00 < squeakytoy> so point is?
23:00 < larzconwell> A browser and Node.js are completely different things. The only relevent thing there is the fact that Chrome and Node.js use the same JavaScript engine.
23:01 < squeakytoy> larzconwell, correct
23:01 < vicapow> squeakytoy: in the browser, or in node (aka, any JS implementation) there exists functions that, when called, can take a callback. those functions can perform native IO operations, and when finished, are added to the top of the JS event loop
23:01 < vicapow> squeakytoy: the event loop is a language construct
23:02 < squeakytoy> vicapow, right. but if its IO, its you have to be using node.js (if we only talking about node.js). You telling me you can write nonblocking javascript code (that doesn't use features of node.js)
23:02 < vicapow> squeakytoy: the only difference between js code in the browser, and node, is that node adds a few extra utilities for interacting with the lower level IO operations, like reading from a file or communicating over a network connection
23:02 < squeakytoy> vicapow, i think you are soo confused and mixing things together :-)
23:03 < vicapow> squeakytoy: i think you're just trolling me, but i'lll continue if you'd like
23:03 < squeakytoy> vicapow, what abot my proof?
23:03 < squeakytoy> vicapow, just show me an example of nonblocking js code that doesn't use node.js features
23:04 < nathan7> !mdn addEventListener @ squeakytoy 
23:04 < nathan7> !xhr @ squeakytoy 
23:04 < nathan7> oh wait
23:04 < nathan7> no ##javascript bot
23:04 < vicapow> squeakytoy: i did earlier. var ing = new Image(); img.onload = function(){ /* do stuff */ } img.src = "someimage.jpg"
23:04 < nathan7> XMLHTTPRequest is async, anything event-driven is async
23:04 < squeakytoy> vicapow, thats DOM specific, not JS
23:04 < nathan7> You can't block in JS
23:04 < nathan7> squeakytoy: Well, you need something to block on
23:04 < nathan7> squeakytoy: err, wait for
23:04 < vicapow> squeakytoy: the DOM has a JS api. just like in node, the file system as a node.js AIP
23:04 < vicapow> API*
23:05 < squeakytoy> vicapow, why are you including third party things all the time? Dont include DOM, dont include node.js.
23:05 < nathan7> JS is a language lacking synchronous features
23:05 < nathan7> squeakytoy: If you have no API to interact with
23:05 < nathan7> squeakytoy: then what fucking events are you supposed to trigger on?
23:06 < nathan7> squeakytoy: there's setTimeout
23:06 < nathan7> squeakytoy: in another language you'd sleep(), synchronously
23:06 < squeakytoy> true, but settimeout only adds to the queue
23:06 < squeakytoy> but you cant write nonblocking js code with setTimeout
23:06 < nathan7> Yes. Clicking a button triggers an event. It adds to the event queue which is then used to call handlers.
23:07 < squeakytoy> dont include DOM in this discussion :-)
23:07 < nathan7> squeakytoy: If you have no API, no input, no output
23:07 < squeakytoy> or the ui threads of browsers
23:07 < nathan7> squeakytoy: then events cannot come from anywhere
23:07 < zell> how could i use jquery 1.8.2 with browserify ?
23:07 < nathan7> squeakytoy: then blocking or not blocking isn't relevant
23:07 < nathan7> squeakytoy: becaue you have no external things to wait for
23:07 < nathan7> squeakytoy: because you have no API to access them
23:07 < squeakytoy> nathan7, ok, i understand your point. But how the execution get called, doesn't realy matter.
23:08 < nathan7> The whole point of asynchronicity is adding things to a queue
23:08 -!- mode/#node.js [+o piscisaureus_] by ChanServ
23:09 < niggler> what's the best framework for unit testing
23:09 < squeakytoy> but thats not multi-threaded though? it just gives the illusion of it
23:09 < niggler> other than my ghetto shellscript+makefile
23:10 < nathan7> squeakytoy: JS is not really threadable
23:10 < squeakytoy> exactly
23:10 < squeakytoy> the js execution is single-threaded
23:10 < nathan7> squeakytoy: Asynchronicity is provided through events
23:10 < squeakytoy> nathan7, yes
23:10 < niggler> Asynchronicity is not a word
23:10 < niggler> asynchrony however is
23:10 < nathan7> stop niggling
23:11 < nathan7> Hey mikeal 
23:11 < vicapow> niggler: http://en.wiktionary.org/wiki/asynchronicity
23:11 < vicapow> niggler: if it's on wiktionary, that makes it a word, right?
23:11 < nathan7> vicapow++
23:12 < niggler> lol 
23:12 < niggler> wow this website is great
23:12 < niggler> http://en.wiktionary.org/wiki/sniggler#English
23:13 < vicapow> "one who sniggles"
23:13 < vicapow> lol
23:13 < gnarf> So, any people here from Seoul? Just curious, bunch of the jQuery team members are here for jQuery Asia - looking for a native with their finger on cool stuff to do :)
23:14 < niggler> once legitimate rape became acceptable in the political arena, rules stopped being relevant
23:15 < devatwork> so im using forever to keep my nodejs app running in background
23:16 < devatwork> However it doesnt seem to let me run more than one at a time
23:18 < squeakytoy> i think this is fascinating. If a web requests to a node.js solution requires IO-logic, its still nonblocking for the JS-thread. Node.js cheats so much :P
23:19 < niggler> vicapow: this wiktionary has blown my mind
23:19 < vicapow> niggler: :P
23:20 < niggler> its notably missing meecrob
23:20 < devatwork> wth..moment i kill one job. It then runs the next one. Why not simultaneously :'(
23:20 < squeakytoy> does anyone know if node.js creates a new thread for each IO-operation done?
23:24 < niggler> ok vicapow https://en.wiktionary.org/wiki/meecrob
23:24 < vicapow> niggler: lol. did you add that?
23:24 < dragon> https://en.wiktionary.org/w/index.php?title=meecrob&action=history
23:25 < niggler> just doing my part :)
23:25 < vicapow> niggler: urban dictionary calls the actual thai disk "mee krob"
23:25 < vicapow> niggler: http://www.urbandictionary.com/define.php?term=meecrob
23:25 < niggler> it is actually meekrob
23:25 < niggler> b
23:25 < niggler> *meekrob
23:25 < niggler> but south park used a c
23:26 < niggler> and seeing as how we can redefine the english language, i choose to make trey parker the arbiter
23:26 < vicapow> niggler: lol. nice
23:27 < niggler> https://en.wiktionary.org/wiki/JavaScript#English
23:27 < niggler> so is LiveScript actually a synonym of javascript?
23:28 < larzconwell> It used to be called that. 
23:28 < niggler> LiveScript used to refer to JavaScript or ActionScript?
23:29 < niggler> also, https://en.wiktionary.org/wiki/Java#Proper_noun i think this explains the java/javascript confusion
23:29 < larzconwell> Back in the Netscape days 
23:29 < larzconwell> JavaScript.
23:31 < squeakytoy> i have a nerd question :P
23:31 < larzconwell> That is?
23:31 < squeakytoy> node.js really doesn't run javascript right? :P
23:32 < larzconwell> I'm not sure I really understand your question, can you be more specific?
23:32 < squeakytoy> its ecmascript
23:32 < squeakytoy> to be really picky
23:33 < niggler> javascript is a blanket term afaict
23:33 < squeakytoy> yea, its used like that
23:33 < squeakytoy> but, we nerds, know the truth
23:33 < squeakytoy> node.js doesn't support "javascript"
23:33 < niggler> it supports JavaScript
23:33 < niggler> or is it Javascript?
23:34 < niggler> apparently wiktionary says all are acceptable
23:34 < squeakytoy> why does it support javascript?
23:34 < larzconwell> JavaScript is an implementation of ECMAScript.
23:35 < niggler> ECMAScript is a post-hoc standard
23:35 < squeakytoy> yea
23:35 < larzconwell> https://en.wikipedia.org/wiki/ECMAScript#Dialects
23:35 < squeakytoy> yea, i know
23:35 < squeakytoy> but to be a jerk about it, its ecmascript it supports, not javascript ;)
23:35 < niggler> typescript is a dialect of javascript?
23:36 < squeakytoy> i think typescript is a stand-alone language
23:36 < squeakytoy> that can get compiled to js
23:37 < larzconwell> TypeScript is JavaScript with some extra features.
23:37 < niggler> https://en.wikipedia.org/wiki/ECMAScript#Dialects last line in table
23:38 < squeakytoy> yea, but it isn't javascript
23:38 < larzconwell> https://en.wikipedia.org/wiki/TypeScript#Type_annotations second paragraph.
23:38 < niggler> the question is: wikipedia claims that typescript is a dialect of javascript
23:38 < squeakytoy> well, define "dialect"
23:39 < niggler> https://en.wikipedia.org/wiki/Dialect_(computing)
23:39 < niggler> so the question is: does typescript change the intrinsic nature of javascript
23:40 < squeakytoy> phuuw
23:40 < larzconwell> It's like a natural language, it's spoken differently in different parts of it's spoken area.
23:40 < larzconwell> Right?!
23:41 < squeakytoy> its hard questions :-)
23:41 < squeakytoy> according to me, typescript is a totally different language, that has same syntax as js
23:41 < larzconwell> I think that statement could work to define TypeScript compared to JavaScript.
23:42 < squeakytoy> so to a jerk about it, node.js doesn't suppor javascript, it supports ecmascript
23:42 < niggler> it supports nodescript
23:42 < squeakytoy> since it uses v8 engine, which is an ecmascript engine, not javascript engine
23:42 < larzconwell> V8 Supports ECMAScript. Node.js just happens to use it.
23:43 < niggler> or nondescript, depending on your mood
23:43 < squeakytoy> whats nodescript?
23:46 < devatwork> anyone have tips for running nodejs on a limited vps ? :)
23:56 < zell> ender seem to not work :(
23:57 < zell> whatever i do except for searching, i got: Welcome to ENDER - The no-library library
23:57 < niggler> squeakytoy: nondescript is the dialect of javascript supported by node
23:57 < squeakytoy> is it any different from ecmascript?
23:58 < niggler> there are many things considered ecmascript
23:58 < squeakytoy> what does that mean?
23:58 < niggler> there are many versions of ecmascript
23:59 < niggler> like ES3, ES5, ES-harmony
--- Log closed Sun Nov 11 00:00:06 2012
