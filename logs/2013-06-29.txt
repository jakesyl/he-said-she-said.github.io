--- Log opened Sat Jun 29 00:00:39 2013
--- Day changed Sat Jun 29 2013
00:00 < The_Fly> cant seem to convine chrome to send an Expect: header
00:02 < plops> cluster, as the size of each worker?
00:02 < plops> or size Master ?? in the process
00:03 < The_Fly> ?
00:04 < plops> if that is the size of the process in nodejs? Because if I can make fork with free memory I can use more than half of the available memory.
00:16 < The_Fly> ah, the problem im having appears to be nginx's fault
00:18 < ningu> it's never nginx's fault :P
00:50 < The_Fly> ningu: well with the Expect header it seems to be
00:50 < The_Fly> doesn't help that chrome wont sent it either
00:50 < The_Fly> on top of that, i cant respond before the response body is sent
00:50 < The_Fly> is this really the state of play today???
00:51 < ningu> The_Fly: I was just joking really
00:52 < ningu> what do you mean "I can't respond before the response body is sent"?
00:52 < ningu> I mean sure... you can't respond before you respond... very true
00:52 < The_Fly> sorry the request body
00:52 < The_Fly> lol
00:52 < plops> What do you need?
00:52 < _6a681> The_Fly: why do you need an Expect header? browsers don't support PUT and DELETE, so we overload POST. 
00:52 < The_Fly> i want to cancel an upload if some other params dont validate
00:52 < The_Fly> they are sent in one request
00:52 < ningu> The_Fly: anyway, you can definitely respond before the request body is finished sending.
00:53 < The_Fly> bunch of fields with a file
00:53 < ningu> maybe not in express/connect
00:53 < ningu> but in node in general, sure.
00:53 < The_Fly> i dont appear to be able to
00:53 <@isaacbw> hello beautiful
00:53 < plops> Hi!
00:53 < The_Fly> ningu: im trying with node in general, not much luck
00:53 < The_Fly> formidable fires events per field and file
00:53 < The_Fly> if it does so on a stream i dont see why i cant close it
00:53 < ningu> don't use formidable, use busboy
00:54 < The_Fly> will that help solve my problem?
00:54 < ningu> https://github.com/mscdex/busboy
00:54 < ningu> The_Fly: I don't know. but mscdex has claimed so in the past.
00:54 < The_Fly> id quite like this efficiency, as it seems a waste of bandwidth to just allow clients to keep uploading
00:55 < The_Fly> although in saying that, the incorrect params would be from anybody mucking with the webserver
00:56 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:57 < The_Fly> ningu: thanks, i'll try now
00:57 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:59 < plops> Hey!! I have this idea of ​​the cluster in the probe theory and works very well to say?? https://gist.github.com/alejonext/5889188
01:05 < The_Fly> hm, request has fields before files...busboy reports files first
01:05 < The_Fly> confused
01:06 < The_Fly> i do get the fields after a few chunks of file data...very odd
01:06 < The_Fly> ningu: you know what that's about?
01:07 < mscdex> The_Fly: if the fields really are first, it might be related to streams2 doing some nextTick stuff
01:08 < The_Fly> mscdex: your nick reminds me of booting up an old 386 dos box
01:08 < mscdex> The_Fly: you're welcome
01:08 < The_Fly> mscdex: the fields really are first, at least they appear to be so in chrome dev console
01:08 < The_Fly> and i cant res.end()
01:08 < The_Fly> it just keeps streaming me the file data
01:08 < The_Fly> after ive long since detected the request invalid
01:09 < mscdex> The_Fly: with node 0.10 you should be able to unpipe() if you are piping to busboy
01:09 < ningu> speaking of windows... if you want to run git + node + perl + psql etc. on windows is there any solution better than cygwin?
01:09 < ningu> I guess node doesn't run in cygwin
01:09 < The_Fly> mscdex: can you explain what i unpipe on?
01:10 < The_Fly> im not sure of request internals
01:10 < The_Fly> is there some stream object i can ref on the req object
01:10 < The_Fly> ?
01:10 < mscdex> The_Fly: assuming you did `req.pipe(busboy);`, you'd want `req.unpipe(busboy);`
01:10 < The_Fly> ok, thanks shall try
01:11 < ningu> mscdex: so was I right that he wanted busboy and not formidable for his particular case?
01:12 < The_Fly> mscdex: that almost works, now the request just hangs
01:12 < The_Fly> (ive done a res.end() before i unpipe'd)
01:12 < pawn> Is it difficult to set up an email server just for sending emails outgoing from a server?
01:12 < ningu> pawn: no
01:12 < pawn> ningu: tips on how to do that?
01:12 < The_Fly> mscdex: i guess the browser will just time out, but has the connection dropped?
01:12 < mscdex> ningu: i dunno if formidable uses streams2 yet, but busboy also has a faster multipart parser and other things too
01:12 < ningu> postfix on ubuntu for example
01:12 < The_Fly> i shall be using busboy then, i need speed
01:13 < The_Fly> but also ability to abort early, preferably gracefully
01:13 < ningu> mscdex: but it's still possible to respond with formidable before the whole upload has come through?
01:13 < pawn> I build a small website for a client and I'm using nodemailer to send emails to myself for testing (using gmail), but she would obviously need a email server of her own for her site to send emails out to herself.
01:13 < ningu> pawn: I don't know what the server is running, but I've used postfix for that before with almost no configuration
01:14 < pawn> I could ask her for her email address and password to say her gmail account and use that to send emails to her self whenever someone uses a contact form, but it would look much more profressional on my end if I can set up a contact@hersite.com email account that does the sending
01:14 < ningu> I know this is on hacker news but it's too funny for me not to relink... http://stackoverflow.com/questions/14636178/unsure-if-i-understand-transactionawarepersistencemanagerfactoryproxy/14636231#14636231
01:14 < The_Fly> mscdex: the browser keeps sending, i think the connection is held open
01:15 < ningu> pawn: so just do that. and read up on how to do it. it's really easy.
01:15 < mscdex> The_Fly: no, it's just "paused" at that point, but you probably should unpipe first. i am not so sure you can just `res.writeHead(nnn); res.end();` in that kind of state, you might have to just req.socket.destroy();
01:15 < The_Fly> if i send a large file it sits there, has stopped the stream but not sent a response 
01:15 < pawn> ningu: just use post fix?
01:15 < pawn> postfix*
01:15 < mscdex> ningu: i do not know about formidable, i've never used it
01:15 < The_Fly> mscdex: ok, i guess unpipe first then res.end... let me see
01:15 < ningu> mscdex: just curious.
01:15 < ningu> pawn: yes, I can recommend it against if you like
01:15 < pawn> ningu: what?
01:16 < pawn> ningu: you can recommend what?
01:16 < ningu> pawn: postfix. I was just being sarcatic
01:16 < pawn> idk w/e
01:16 < pawn> So postfix is a command-line tool similar to sendmail?
01:17 < mscdex> ningu: what criteria are you using in order to determine whether to allow the form data? are you just validating the user's session or something that does not require some of the form data or ?
01:17 < ningu> postfix implements a sendmail wrapper
01:17 < mscdex> er The_Fly  ^
01:17 < ningu> pawn: use google
01:17 < ningu> that's what it's there for
01:18 < The_Fly> mscdex: so i can socket.destroy, that works, but i dont see the response or status code i sent
01:18 < The_Fly> which i guess is the point, the client has already started sending the request body
01:18 < The_Fly> which the Expect header should prevent
01:18 < mscdex> The_Fly: right, killing the connection won't allow sending a response
01:19 < The_Fly> its too late to send a response
01:19 < The_Fly> (until you wait for the file to send)
01:20 < mscdex> The_Fly: right. your other option would be to `req.resume();` after unpiping and just do your writeHead, etc on `req.on('end, ...);`
01:20 < mscdex> The_Fly: the packets will just go nowhere
01:20 < The_Fly> really?
01:20 < mscdex> The_Fly: yeah
01:21 < The_Fly> so... req.unpipe(busboy)... then socket.destroy
01:21 < pawn> ningu: I can't do with sendmail what I can with postfix?
01:21 < mscdex> The_Fly: that's if you want to end things abruptly with no response
01:21 < The_Fly> i dont want to wait the full file
01:21 < The_Fly> if i get bad values
01:21 < ningu> pawn: postfix is much easier to set up and it sounds like you want something that's easy.
01:22 < The_Fly> i think as it stands im better to accept it in two posts
01:22 < The_Fly> the data first and file after if the data is ok
01:22 < pawn> ningu: okay. THanks
01:22 < mscdex> The_Fly: ok, then that's really the only way
01:22 < The_Fly> i think so... which is ok...
01:22 < The_Fly> maybe
01:22 < The_Fly> params first, send back a token, then send that back with the upload
01:22 < mscdex> The_Fly: the client should be able to tell the request failed
01:23 < The_Fly> yeah, which he can do by sending just the params first
01:24 < The_Fly> and in this app that actually works as an advantage
01:25 < pawn> ningu: http://www.youtube.com/watch?v=g2uOj3ss2dg I'm watching that. He says he recommends google apps, but is that because he's assuming that I'll be setting up the server for incoming messages? How costly is it to just be able to send emails from my server?
01:26 < ningu> pawn: you know how much bandwidth and uptime on your server costs.
01:26 < ningu> I have no idea how many emails you'll be sending
01:26 < pawn> ningu: it's just for a contact form for her site
01:26 < ningu> well then if the server is already running it should cost almost nothing in addition
01:27 < pawn> So that'll depend on how many people contact her.
01:27 < ningu> you can use the google apps thing too, I haven't done it myself
01:27 < ningu> but postfix is so easy to set up I don't see what the issue is
01:27 < pawn> ningu: right. Plus wouldn't I be using the same amount of bandwidth if I were to use google apps anyway; I'll have to send the email to google then, google would then send the email out.
01:28 < ningu> pawn: if you are paying for hosting the web site this will add almost nothing
01:28 < ningu> but do what you want, I can't answer that question for you
01:30 < pawn> If I use Nodemailer to send an email using a google apps account (or gmail), my email would first be sent to google's servers then google would send my email to whomever it's addressed to. If I set up postfix, my email will be sent directly to whom it's addressed to. Effectively, I'll be using the same amount of bandwidth in either case?
01:31 < ningu> pretty much, in the first case you use it in sending it to google, in the second case in sending it to its destination's mail server
01:32 < ningu> pawn: seriously, you need to at least run the numbers before you even start worrying about this
01:32 < ningu> my guess is you're worrying about an extra five cents a month at the absolute most
01:35 < pawn> ningu: cool
01:39 < pawn> ningu: I'm not too worried about that. What I am worried about is my server being open to incoming emails.
01:39 < ningu> so make it so that it isn't
01:39 < pawn> then if someone decides to bog my email server with spam..
01:39 < pawn> ningu: ok. So you can do that, good to know
01:39 < ningu> pawn: yes, there are these things called docs
01:40 < pawn> ningu: right, but if you keep chatting buddy, I can't get to the docs. :P
01:57 <@isaacbw> reading documentation is overrated
01:58 <@isaacbw> so is switching windows on your computer
01:58 < ericelliott> I need a decent proxy in Node.js that can rewrite urls with simple configuration. For example, route 'https://example.com/api/albums' to 'http://somedomain.com/api/v1/albums'
01:58 <@isaacbw> IF YOU TALK TO ME MY COMPUTER STOPS LETTING ME DO THINGS
01:58 < ningu> heh
01:58 < ericelliott> any idea if there's an existing module that fits this bill?
01:58 < ningu> ericelliott: bouncy, perhaps?
02:00 < ericelliott> ningu: does bouncy let you rewrite the request path?
02:01 < ningu> ericelliott: yes, afaik
02:01 < ericelliott> ningu: can I bounce ws:// connections?
02:02 < ericelliott> and wss:// connections?
02:02 < ningu> yes
02:02 < ningu> it's really simple
02:02 < ericelliott> ningu: I <3 you.
02:02 < ningu> you can do the conditional handing in code
02:02 < ningu> it takes a config file too I think
02:02 < ningu> or maybe it's all just code
02:02 < ningu> anyway, it's easy
02:02 < ericelliott> it does take a config file.
02:03 < ericelliott> looking at the doc... though I don't see any mention of base path rewriting...
02:03 < ningu> To send data to a different url path on the destination stream, you can specify opts.path.
02:04 < ericelliott> sold.
02:04 < ningu> :)
02:04 < AAA_awright> You really shouldn't be changing URLs... but...
02:04 < ericelliott> AAA_awright: it's a functional requirement.
02:04 < AAA_awright> Or including a version number in them, for that matter
02:04 < ningu> ericelliott: it's basically like nginx as if it was 10 lines of JS
02:04 < AAA_awright> Having a dedicated API namespace is an anti-pattern
02:05 < ericelliott> AAA_awright: existing APIs, again, functional requirement. I'm not making this stuff up... it just happens in the real world with large teams and organizational lock-in.
02:05 < ningu> and being JS you can just do whatever you feel like to the bits of the request before you bounce them
02:05 < ericelliott> AAA_awright: We're on the same page.
02:05 < AAA_awright> ericelliott: Personally, I'd complain
02:05 < AAA_awright> but meh
02:06 <@isaacbw> ericelliott: that isn't possible
02:06 < ningu> what isn't possible?
02:06 < ericelliott> AAA_awright: I have, and some of it is getting fixed -- a little at a time. =)
02:06 < AAA_awright> ericelliott: Or do it in the application itself, instead of before routing. Non-transparent proxies are ugh
02:08 < ericelliott> AAA_awright: Adobe has 15,000 employees, and these APIs power virtually all of our apps. Can't change it all over night... but I appreciate your input. ;)
02:09 < ericelliott> AAA_awright: Ever tried evolving an API spec that boxed software owned by millions of people rely on? Yeah....
02:09 < ningu> whee. <a href="download/queued/abk-kat-%E1%83%92%E1%83%95%E1%83%90%E1%83%9C%E1%83%AA%E1%83%94%E1%83%9A%E1%83%90%E1%83%AB%E1%83%94.zip" class="zip">
02:12 < ericelliott> AAA_awright: Do you have any particular pitfalls with non-transparent proxies that I should watch out for?
02:13 < AAA_awright> ericelliott: It depends on what you're doing really... I have gateways of my own that add functionality on top of another HTTP server, e.g. formatting JSON as HTML
02:13 < mmalecki> I'd say mainly debugging ericelliott
02:13 < mmalecki> but hard to tell without knowing what your architecture is
02:13 < AAA_awright> But what I'm mostly talking about is replacing functionality, if depening on the server you connect to, you get one response or a different one
02:14 < AAA_awright> like *needing* to use a different URL
02:15 < ericelliott> AAA_awright: Ah, yeah, this just passes the response back unaltered.. the only thing we munging is the request URL. That's transparent to the user.. the proxy target is behind a firewall... the user couldn't connect directly to it if they wanted to.
02:15 < mmalecki> ericelliott: hmm, are your clients node too?
02:15 < mmalecki> if so, you could use one of substack's modules for versioned http APIs
02:16 < ericelliott> mmalecki: some are, some are browsers,  some are mobile apps, some are desktop apps.
02:16 < mmalecki> ah, yeah, no go then
02:16 < ericelliott> I'm working on the Creative Cloud web services. Basically powers everything Adobe these days.
02:17 < mmalecki> nice, it's all node?
02:17 < ericelliott> Not all.. there's some Ruby, but we're moving swiftly to Node.
02:18 < mmalecki> that's a win!
02:18 < ericelliott> I've been doing a lot of the front end server port. Using express. =)
02:18 < ericelliott> yeah, very very early tests feel significantly snappier, even when it's not under load.. I expect the difference to be amplified when we load it up.
02:19 < mmalecki> ericelliott: it takes some OS tweaking but is pretty easy in general
02:19 < mmalecki> ericelliott: let me know if you want to chat about it, we handle huge load at nodejitsu with node :-)
02:20 < ericelliott> mmalecki: Awesome. I'll keep that in mind.. so far things are going smoothly... but I haven't seen load tests yet.
02:22 < mmalecki> ericelliott: I mean, fire them up ;)
02:23 < ericelliott> mmalecki: I'm taking a little time off, and then we'll do some load testing when we're back from vacations. ;)
02:24 < ericelliott> ningu, AAA_awright, mmalecki - thanks for your help
02:24 < mmalecki> word, have fun vacation
02:32 < jasonkuhrt> I need advice for a TCP server, wherein I want a custom instance of net.Socket to be passed in the server's 'connection' event
02:33 < jasonkuhrt> is this a misunderstanding of how I should go about it?
02:34 < jasonkuhrt> for instance should I take the connection event as-is, and pass the received socket object into a decorator?
02:34 < jasonkuhrt> my end goal is that I have a specific _read and _write implementation I want for the socket
02:35 < jasonkuhrt> any advice greatly appreciated
02:40 < mscdex> jasonkuhrt: what about writing your own Transform stream and piping the socket to that?
02:42 < jasonkuhrt> mscdex: So right now that's what I have, I also need a transformation for piping to the socket
02:42 < mscdex> jasonkuhrt: i think you can just pipe your Transform stream back to the pipe too
02:43 < jasonkuhrt> msdex: having this all out in the open is getting quite verbose, and instead what I am going to do is create a Duplex that accepts a socket and does the protocol _read and protocol _write transformations within there
02:43 < mscdex> s/back to the pipe/back to the socket/
02:43 < jasonkuhrt> msdex: I need a different transformation... i.e. deserialize and serialize
02:44 < jasonkuhrt> socket>->deserialize>->something   vs something>->serialize>->socket
02:44 < jasonkuhrt> instead of having this guts-out in the server
02:44 < jasonkuhrt> I want to encapsulate it so that I just have a socket of special type
02:44 < jasonkuhrt> that when piped to or piped from
02:45 < jasonkuhrt> has the respective transformations inherit to it
02:45 < jasonkuhrt> I feel pretty confident about this already
02:45 < jasonkuhrt> but I am wondering if I can take this a step further and instead of working with Duplex extend net.Socket instead (which is itself a Duplex)
02:45 < jasonkuhrt> because net.Socket is really what I am working with
02:46 < jasonkuhrt> but the process of inheriting from net.Socket and making a server send instances of it for the 'connection' event isn't obvious
02:47 < jasonkuhrt> in particular I want to know if its a bad idea, hard, or even not practical
03:08 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:18 < harbhub> hey fellas
03:18 < harbhub> node is messing with me
03:18 < harbhub> process.env.custom = {};
03:19 < HeartOfAce> did you try looking at it menacingly to see if it'll back off?
03:19 < harbhub> process.stdout.write(process.env.custom)
03:19 < harbhub> isn't working right lol
03:20 < harbhub> it prints [object Object]
03:20 < HeartOfAce> it's working as expected, then
03:20 < harbhub> and says it is a typeof string
03:20 < harbhub> nope
03:20 < harbhub> my console takes objects
03:20 < harbhub> and JSON stringifys them
03:20 < harbhub> i have made a custom console
03:21 < HeartOfAce> if you do object.toString it'll return [object Object] 
03:21 < HeartOfAce> try doing process.stdout.write(JSON.stringify(process.env.custom) to see if it works?
03:22 < harbhub> doesn't
03:22 < harbhub> reutnrs:
03:22 < harbhub> "[object Object]"
03:22 < harbhub> like that lmao
03:22 < harbhub> da fuck is wrong with the process.stdout...
03:22 < HeartOfAce> I think somewhere along the line something is fucking up~ 
03:23 < harbhub> yep
03:23 < harbhub> it is nodejs i say!
03:23 < harbhub> lol
03:24 < HeartOfAce> so, when you assign process.env.custom to have {}
03:24 < HeartOfAce> it's doing toString on empty object 
03:24 < HeartOfAce> and then when you try to print it, it's simply printing the string
03:25 < HeartOfAce> so I think that's your problem
03:25 < harbhub> https://gist.github.com/harbhub/5889576
03:26 < HeartOfAce> yes, that's working exactly as expected 
03:26 < HeartOfAce> when you're doing: process.env.harbachi = {};
03:26 < HeartOfAce> it's doing {}.toString()
03:26 < harbhub> o.0
03:26 < harbhub> all env is a string?
03:27 < HeartOfAce> I'd say env is a map of strings 
03:27 < HeartOfAce> I guess
03:27 < HeartOfAce> that seems to be the case
03:27 < harbhub> env is bullshit then
03:27 < harbhub> process.myenv = {}
03:27 < harbhub> i will try it that way
03:27 < harbhub> to see if this was the source of error  :)
03:27 < HeartOfAce> alright
03:28 < harbhub> yep
03:28 < harbhub> thanks so much 
03:28 < harbhub> that was the source of error
03:28 < HeartOfAce> actually, it might just be empty objects
03:28 < HeartOfAce> cuz I just tried setting another object with stuff inside it
03:28 < HeartOfAce> and it worked just fine
03:28 < harbhub> not a node error after all, just a 'me being ignorant about the functionality of process.en' error
03:28 < harbhub> :)
03:28 < harbhub> yep
03:28 < harbhub> same
03:28 < harbhub> tested and works
03:28 < harbhub> thats for helping solve that
03:28 < harbhub> you deserve the credit
03:28 < HeartOfAce> no problem
03:29 < HeartOfAce> you should try looking at it menacingly, it helps more often than not
03:29 < harbhub> :)
03:30 < harbhub> global objects are overpowered, though
03:30 < harbhub> they have no fear
03:30 < harbhub> :)
03:51 < mu> ok so I must be stupid but I can't find any actual API for the connect library... the website is just a listing of plugins, and the github doesn't offer much more
03:52 <@isaacbw> then you aren't looking very closely ;)
03:52 < mu> can I get a hint
03:52 < mu> I mean I see the example code
03:52 < mu> but I have no idea what each function is supposed to do
03:53 < mu> and I'm trying to find tutorials on the matter that are similarly as sparse
03:53 <@isaacbw> which functions
03:53 <@isaacbw> it has like two functions
03:53 <@isaacbw> use and listen
03:54 < mu> I'm finding some examples that neglect using .listen(port)
03:54 < mu> and I can't figure out why
03:54 <@isaacbw> https://github.com/senchalabs/connect/blob/master/lib/proto.js#L62
03:54 < DarcyB> does anybody have any experience with flatiron's director  for serverside ?
03:54 < mu> yeah okay I'm just now learning node so I don't know if I'm necessarily equipped to crawl through the source
03:55 < mscdex> mu: also: senchalabs.org/connect/
03:55 <@isaacbw> mu: it's iterally two functions
03:55 <@isaacbw> use and listen
03:55 < mu> right
03:55 <@isaacbw> use takes a function (req, res, next)
03:55 <@isaacbw> call next() if you want to move down the middleware stack
03:56 <@isaacbw> don't call it if you want to escape the stack
03:56 <@isaacbw> there's really not much to it at all
03:56 < mu> I've been reading documentation for hours and that is not obvious to me
03:56 < mu> that that is what next() does
03:56 < mu> I mean it makes sense and I believe you
03:57 < mu> I'm just a bit frustrated that there isn't a little more documentation
03:57 < rhalff> maybe using higher level expressjs is a bit more useful when you are learning node.
03:57 < mu> even for two functions
03:57 <@isaacbw> I don't know. I thought it used to have a short description of use
03:57 <@isaacbw> but just experiment
03:57 < mu> It has examples which if you _already knew how to use it_ would suffice, I think
03:57 <@isaacbw> if you can't find the documentation for something simple in a few minutes, just play around and figure it out
03:58 < mu> well yeah but servers are not the sort of thing I like to mess around with it until it feels right
03:58 < mu> I like to know what is happening
03:58 <@isaacbw> look at the middleware that ships with it and see how they work
03:58 < mu> mm
03:58 <@isaacbw> or look at the use function, which is like twenty lines long
03:58 < mu> I think I might re-read the http documentation for node
03:58 < ningu> reading documentation is godo
03:58 < ningu> also, good
03:59 < mu> some tutorial mentions that connect is overriding http methods
03:59 <@isaacbw> node follows the ruby pattern of writing a very small amount of code and releasing it as a library
03:59 < mu> but the fact that that _isn't mentioned_ in the connect doc is annoying
03:59 < mu> maybe I'm just thick and it was supposed to be obvious
03:59 < ningu> mu: I don't know if it overrides anything but it definitely modifies the http.* prototypes
03:59 <@isaacbw> tutorials suck
03:59 < mu> maybe I'm using the wrong terminology
03:59 < ningu> mu: override = monkey patch
03:59 < ningu> as opposed to just adding to the prototype
04:00 <@isaacbw> most people have no idea what they're talking about
04:00 < ningu> isaacbw: true, sadly
04:00 < mu> I think I've just been babied with other languages that are much more ubiquitous than node
04:00 < mu> that spell everything out
04:00 < ningu> mu: languages such as what?
04:00 < mu> oh, python, java, you know
04:00 < mu> the big ones
04:00 < ningu> I mean, there are a ton of JS tutorials
04:00 < ningu> JS in general is not underdocumented
04:00 < mu> I mean I know the basic javascript syntax
04:00 <@isaacbw> javascript is more ubiquitous than most everything else
04:00 < mu> I've been using it for webpages for years
04:00 < mu> but for node
04:01 < mu> There is less documentation I find
04:01 <@isaacbw> it's just that most people don't use javascript at any sort of advanced level
04:01 < ningu> mu: so is TransactionAwarePersistenceManagerFactoryProxy a joke or not?
04:01 < mu> Especially less official documention
04:01 < mu> except for core node I guess
04:01 <@isaacbw> node is just javascript with a network api
04:01 < mu> that seems to be pretty well doc'd
04:01 < ningu> mu: core node *is* node
04:01 < mu> yes I know ningu
04:01 < mu> what I mean is
04:01 < mu> libraries like Connect seem to have little to say about themselves
04:01 < ningu> if you mean some modules are not perfectly documented that is true
04:02 < mu> yes, yes, I demand perfection
04:02 < ningu> otoh connect is so simple that I just read the source
04:02 < ningu> but maybe I'm weird
04:02 < ningu> but yeah, I've heard your comment from others too
04:02 <@isaacbw> connect doesn't really do that much worth talking about
04:03 < ningu> mu: I think it's a difference in outlook in a way. in node people tend to assume you'll be willing to delve into the code, and the code is generally actually not hard, at all, to delve into
04:03 < ningu> whereas in java or even python that is not necessarily the case
04:03 < mu> all I'm saying is, there are two official pages for connect and not one of them does more than list some sample code. I get that for some people that is enough to spell out what the library does
04:03 <@isaacbw> that and it's much easier to generate docs for java
04:03 <@isaacbw> and python
04:03 < ningu> ok, that too
04:03 < mu> ningu: well okay
04:03 < ningu> but I've found that those auto-generated docs are often annoyingly incomplete too
04:03 < mu> java and python are self-documenting in many ways
04:04 < mu> especially verbose old java
04:04 <@isaacbw> mu, try reading through something written to heavily use events
04:04 < ningu> mu: sure, but having each method documented doesn't help when it's something like, SprocketFactory: creates a sprocket.
04:04 < Zolmeister> yeah, but who uses java?
04:04 <@isaacbw> lots of people Zolmeister 
04:04 < ningu> without telling you what a sprocket is
04:04 < Zolmeister> isaacbw: (ik, it was a comment on java)
04:05 <@isaacbw> lots of lots of lots of people
04:05 < ningu> I ran into this in the lucene javadocs. every method is documented but a lot of them don't tell you *at all* what it actaually does
04:05 <@isaacbw> too many damn people
04:05 < mu> well a good maintainer would document that SprocketFactory
04:05 <@isaacbw> switch to scala sheeples
04:05 <@isaacbw> java is an old turd
04:05 <@isaacbw> I was writing a blog post about how much of an old turd java is
04:05 < ningu> mu: of course, my point is just that bad but completely docs aren't very much better than no docs :)
04:05 < ningu> bad but complete*
04:05 < Zolmeister> java just kind of sucks.
04:05 < mu> uh
04:05 < mu> ok sure better than nothing
04:06 <@isaacbw> let's have a 'java sucks' circlejerk
04:06 < ningu> mu: if the method is called createFoo and the docs say "this creates foo" that's basically accomplishing nothing
04:06 < Zolmeister> ^
04:06 < mu> it's a strawman ningu
04:06 <@isaacbw> strawman needs a brain
04:06 <@isaacbw> poor guy
04:06 < mu> both cases are bad but that doesn't validate in anyway what this documentation is
04:06 < mu> just because java also has the potential to have poor docs
04:06 <@isaacbw> mu dude, no one is arguing against documentation
04:07 < mu> I know
04:07 <@isaacbw> node is just really young and raw and people can't be bothered to document their shit
04:07 < mu> well
04:07 < ningu> all I meant was, I have plenty of bad experience with docs in many languages
04:07 < mu> that seems like a problem to me
04:07 <@isaacbw> then write some documentation
04:07 < ningu> I didn't mean docs are bad
04:07 <@isaacbw> everything is on github and people are good about pull requests
04:07 < mu> yeah I've already contributed a bit of documentation to mean old grunt
04:07 < mu> and that was day 1 of learning node
04:08 <@isaacbw> I think grunt is a mess anyway
04:08 < ningu> everyone seems to think that
04:08 < ningu> or maybe it's just you saying it a lot
04:08 <@isaacbw> The best documentation would be "this is black magic and you're turn into a frog if you touch it"
04:08 < ningu> I haven't used it enough to have an opinion
04:08 <@isaacbw> ningu: I think it's just me and niggler :P
04:08 < mu> it's made working with static sites pretty easy but now I'm looking into a way that I can have server-sided variables in my websites
04:08 < ningu> it's definitely not the easiest thing to use
04:08 < ningu> but it does work
04:08 < Zolmeister> I wonder if you could generate docs based on static code analysis (no jsdocs)
04:09 < mu> so I want to use sockets.io or something, but to do that I have to have a node server
04:09 <@isaacbw> ningu: so do makefiles
04:09 < ningu> isaacbw: yeah, I could
04:09 < ningu> I like grunt better for what I want it for
04:09 < mu> you serious? Gruntfile makes far more sense that makefiles do
04:09 < mu> well not more or less sense
04:09 < ningu> isaacbw: if makefiles were second nature to me I might use them
04:09 < mu> but more logical to work with
04:09 < mu> yeah ^ methinks one is set in his ways
04:09 < ningu> but I can never remember perfectly how to write them
04:09 <@isaacbw> ningu: it's definitely an investment of time
04:09 <@isaacbw> well, makefiles + perl/ruby
04:09 <@isaacbw> to do everything grunt does
04:10 < ningu> perl is second nature to me
04:10 < ningu> not ruby
04:10 < ningu> perl was my first scripting language
04:10 < mu> be careful not to make the mistake of saying "____ is better" vs. "I've used _____ longer"
04:10 < ningu> mu: yeah, I agree
04:10 < ningu> mu: although it's really annoying that python has this weird mixture of OO vs functional style, I can never remember anything
04:10 < ningu> if I used python full time it would be fine
04:10 < mu> same
04:10 <@isaacbw> I'm just saying grunt is the devil's magic
04:11 <@isaacbw> not that it's not good
04:11 < mu> I use python just enough to not like it
04:11 < mu> if I used it more I'd probably learn and enjoy it
04:11 < ningu> I mean, I shouldn't defend perl
04:11 < ningu> I just know it
04:11 < mu> heh
04:11 < mu> I love perl
04:11 < mu> I picked it up recently
04:11 < mu> I like how esoteric the language is... silly little variables
04:11 < mu> but the language itself is kind of cool
04:11 < ningu> it has too many sigils and brackets for references and whatnot
04:12 < ningu> but at core it's a great language in many ways
04:12 < ningu> also, it can be a bit slow
04:12 < ningu> but you don't always need speed
04:12 < ningu> I miss lots of things from python and perl in js, like: my ($foo, $bar) = @baz;
04:13 <@isaacbw> perl and python are both dirty turds
04:13 <@isaacbw> but people like them
04:14 < mu> idk when designing a language there is always going to be odd decisions to contend with
04:14 <@isaacbw> turds can be useful 
04:14 <@isaacbw> if you're building a turd hut
04:14 < ningu> I think I would take any of perl, python, and js over ruby -- ruby just has too little explicit syntax in my experience
04:14 < mu> I don't much like python but I can see where the design is coming from most of the time
04:14 < mu> I've never used Ruby
04:15 <@isaacbw> or making turd cakes
04:15 < ningu> mu: yes, I agree, it's understandable even if I don't like something
04:15 < trvski> I'd like to see a clean turd
04:15 <@isaacbw> or using turds as fertilizer
04:15 < trvski> Or would I...
04:15 <@isaacbw> turds make good fertilizer
04:15 <@isaacbw> you can have some really nice turds, but they're still just turds
04:15 < ningu> isaacbw: so what is good?
04:15 <@isaacbw> everything is good and beautiful
04:16 < ningu> I have yet to find a language I don't object to some aspect of
04:16 < mu> I know some phd computer scientists that will only use languages like haskell or rust
04:16 < mu> but those languages scare me
04:16 < ningu> haskell seems cool but I dunno
04:16 < mu> though rust isn't that bad, the "reasons" for it coming about are over my head
04:16 <@isaacbw> haskell is very cool
04:16 < trvski> I write programs using the raw elements of nature
04:17 <@isaacbw> but it requires a pretty huge shift in cognitive patterns to build large systems with
04:17 <@isaacbw> cognitive reasoning
04:17 < ningu> trvski: can the different species of for loops that you find interbreed?
04:17 <@isaacbw> reasoning patterns
04:17 <@isaacbw> patterns
04:17 <@isaacbw> patty
04:17 <@isaacbw> turd patty
04:17 < trvski> ningu: yes, they are called for-while loops
04:18 < mu> hmm
04:18 < mu> I'm curious if anyone here devs node in a windows environment
04:18 <@isaacbw> haskell is really the only usable purely functional language
04:18 < ningu> dunno but I know they're out there
04:18 < trvski> ningu: very aggressive 
04:18 <@isaacbw> I think there's a haskell to js compiler
04:18 < mu> since I'm fairly sure node just crashed my terminal for some reason...
04:18 < gkatsev> so, what do people use for testing nowdays?
04:19 < trvski> do you think that with the advent of virtual reality that we will be able to program visually in 3 dimensional environments
04:19 < mu> something I could see becoming a real problem is
04:19 < mu> these error messages that node generates
04:20 < ningu> you'd rather have no error messages?
04:20 < mu> I just have no idea what to do with them
04:20 < ningu> read them?
04:20 < mu> Well yeah but like
04:20 < mu> oh well nevermind me
04:20 < mu> guess what? I read it
04:21 < mu> I mean I already figured out the error but if I had read past the first line...
04:21 < ningu> mu: I mean, you can log errors or whatever same as anything else
04:21 < mu> >Error: listen EADDRINUSE
04:21 < ningu> heh
04:21 < mu> so yeah haha
04:21 < trvski> lol
04:21 < mu> ok cool I can serve static pages with node
04:21 < mu> /connect
04:21 < ningu> mu: actually we've had some newbies come in and not understand that error
04:22 < mu> well I mean it was helpful that since my terminal crashed when trying to cancel the node process, it was the first place to look
04:22 < mu> to look for rouge processes
04:22 < ningu> what terminal do you use, just cmd.exe?
04:22 < mu> nah, I'm using mintty
04:22 < ningu> cygwin?
04:22 < mu> Yes
04:22 < mu> Though node was installed through Windows
04:22 < gkatsev> node isn't supported on cygwin anymore.
04:22 < mu> rather than cygwin
04:22 < mu> so yeah
04:22 < mu> it could be a reason why things are behaving oddly
04:22 < ningu> I assume though you can use cygwin to run node
04:22 < ningu> gkatsev: what do they recommend then?
04:23 < mu> mhm, I like mintty as a terminal
04:23 < ningu> powershell/cmd.exe?
04:23 < gkatsev> ningu: yeah
04:23 < mu> I think he meant that as a package...
04:23 < ningu> mu: not sure, I've heard both versions of 'not supported'
04:23 < mu> I read some compilation procedures for cygwin that were apparently depreciated once something official came out?
04:23 < ningu> and I am not enough of a windows users to know which is right
04:23 < mu> oh.
04:23 < gkatsev> it installs natively, so, you should use native tools for it
04:23 < gkatsev> cygwin works weirdly with that kind of stuff
04:23 < mu> gkatsev: Yeah I'd be inclined to agree with you if cmd.exe wasn't such shit
04:24 < gkatsev> mu: :)
04:24 < gkatsev> mu: try console2. It makes it slightly less terrible.
04:24 < mu> since I do 99% of dev on a linux box, no big deal
04:24 < ningu> so the thing is, I absolutely have to have good unicode support
04:24 < ningu> and cmd.exe is in cp437 land and only sort of has charset support
04:24 < mu> yeah
04:24 < mu> does node do unicode natively?
04:25 < ningu> yes
04:25 < ningu> sort of
04:25 < gkatsev> well, node doesn't care. JS works just fine with unicode
04:25 < mu> I see
04:25 < ningu> gkatsev: mostly but not quite true
04:25 < ningu> strings are internally utf16
04:25 < gkatsev> yeah, I'm simplifying
04:25 < Technodrome> nothing works just fine in javascript
04:25 < ningu> and .length tells you the number of 2-byte chars
04:26 < mu> okay yeah mintty crashes every time I try to ctrl+c out of node
04:26 < ningu> if the char doesn't fit in 2 bytes, i.e. it's outside the bmp, it will be 4 bytes and show up with a length of 2
04:26 < mu> so I guess that forces my hand
04:26 < gkatsev> I guess all the noders are in nodeconf :/
04:26 < ningu> and you have to use punycode in node to get the real string length
04:26 < mu> hey wait
04:27 < gkatsev> ningu: yes, but that doesn't mean it doesn't work just fine. It's working as designed.
04:27 < mu> running this doesn't capture my terminal
04:27 < gkatsev> ningu: just the design isn't that great :/
04:27 < ningu> gkatsev: fair enough
04:28 < gkatsev> or rather, the design works great for the subset of stuff covered by utf-16. But when everything else was added to unicode, it was too late to change it
04:31 < mu> so what is the difference between doing var app = connect().use(..)... and then http.createServer(app).listen(port); versus (what I'm doing now): connect().use(...).listen(port);
04:31 < niggler> isaacbw i clearly missed the opportunity to complain about grunt
04:31 < niggler> but makefile >>>>> grunt > ant
04:31 < mu> ant is the worst
04:31 < ningu> the successor to ant should be called aardvark
04:32 < mu> so yeah the two example scripts for connect are different
04:32 < mu> http://www.senchalabs.org/connect/ vs https://github.com/senchalabs/connect
04:32 < mu> why does the latter use http.createServer
04:32 < ningu> mu: probably that's what the shorter version does under the good
04:32 < mu> couldn't it have just pegged on a .listen()
04:32 < ningu> you might want direct access to the server object for some reason
04:32 < ningu> under the hood*
04:32 < mu> hmmm
04:33 < ningu> niggler: so if I want to go from a passive to an active speaker of make what should I do? :)
04:33 < mu> kill yourself.
04:34 < niggler> ningu the gnu docs are pretty good and have good examples
04:34 < ningu> ok
04:35 < niggler> https://www.gnu.org/software/make/manual/make.html
04:35 < ningu> niggler: so no more *akefiles? you wouldn't be a fan of snakefiles and drakefiles?
04:36 < niggler> I'm surprised you didn't go with rake or cake ningu 
04:36 < niggler> both of which are rea
04:36 < niggler> rake file is for ruby
04:37 < niggler> and cake file is of course for coffeescript
04:43 < jesusabdullah> gnu make 4 lyfe
04:43 < jesusabdullah> unless I finish grabthar and use it for cross-platform builds
04:43 < niggler> ++ jesseproulx_ 
04:43 < Freze> gnu cmake for life
04:43 < jesusabdullah> oh so anyone here do facebook apps?
04:44 < jesusabdullah> I want to punch facebook in the face for their auth system for FB "like" boxes
04:44 < jesusabdullah> IT IS NOT AN APP IT IS MY PARENTS' WEB SITE
04:44 < niggler> whats Facebook
04:44 < gkatsev> jesusabdullah: oauth is a huge pain in the ass
04:44 < jesusabdullah> gkatsev: I don't even NEED oauth that's why I want to punch them in the face
04:44 < jesusabdullah> gkatsev: I want to use https://developers.facebook.com/docs/reference/plugins/like-box/
04:44 < gkatsev> jesusabdullah: yeah
04:45 < jesusabdullah> gkatsev: and they want me to get API keys
04:45 < jesusabdullah> gkatsev: and their shitty api keys thing assumes I'm developing an APP
04:45 < jesusabdullah> gkatsev: which I'm *NOT*
04:45 < gkatsev> wait, what?
04:45 < jesusabdullah> yeah
04:45 < jesusabdullah> YEAH
04:45 < jesusabdullah> like, unless I'm straight missing something here
04:45 < gkatsev> jesusabdullah: did you click the 'Get Code' button?
04:45 < jesusabdullah> gkatsev: click it and you'll see what I mean
04:46 < gkatsev> jesusabdullah: I don't see the problem.
04:46 < jesusabdullah> gkatsev: You need to associate the likebox with an app
04:46 < gkatsev> jesusabdullah: maybe use the iframe embed?
04:46 < absolutezeroff> jesusabdullah, app can mean web app 
04:46 < absolutezeroff> oh
04:47 < jesusabdullah> This script uses the app ID of your app:	
04:47 < jesusabdullah> Panco Inc.
04:47 < absolutezeroff> if they need to associate the box with an app then it's mobile wow 
04:47 < veri> i installed adblock because of the like button.
04:47 < jesusabdullah> and I'm okay with generating an "app"
04:47 < niggler> veri there's a lite version
04:47 < niggler> called disconnect
04:47 < jesusabdullah> uuuugh I guess I'll fill in the boxes AS THOUGH panco-ak.com is an app
04:48 < niggler> jesusabdullah why do you need a like button?
04:48 < gkatsev> jesusabdullah: maybe I"m missing something as well. But it seems like you don't need anything but what the 'get code' thing gives you.
04:48 < jesusabdullah> UGH NO it DOES NOT INTEGRATE that way
04:48 < jesusabdullah> gkatsev: This script uses the app ID of your app:	
04:48 < jesusabdullah> Panco Inc.
04:48 < jesusabdullah> This app has Sandbox Mode set to "Enabled", which may limit its visibility.
04:48 < jesusabdullah> Sandbox Mode can be disabled in the App Dashboard.
04:49 < jesusabdullah> niggler: well, two things actually
04:49 < gkatsev> jesusabdullah: where?
04:49 < jesusabdullah> niggler: the first is, for http://panco-ak.com I want there to be content on it and my parents only understand how to use their facebook page
04:49 < gkatsev> jesusabdullah: what I got out of that page. Seems like it's all you need: https://gist.github.com/gkatsev/3bd0f7ece28b3de64d88
04:50 < gkatsev> jesusabdullah: you just change the data- attributes in the bottom div
04:50 < jesusabdullah> niggler: the second is, I'm making a web page for a local political candidate and FB pages are important there
04:50 < jesusabdullah> gkatsev: okay screenshot
04:51 < niggler> honestly jesusabdullah do likes translate to votes?
04:52 < veri> parents.. computer === facebook
04:52 < gkatsev> veri: browser === google
04:52 < jesusabdullah> gkatsev: http://imgur.com/evqFpYu
04:53 < jesusabdullah> niggler: This kid out here went from nothing to almost winning within 3 weeks as a last-minute write-in, and social media was a HUGE part of that
04:53 < jesusabdullah> niggler: for people that know how to use it, it's big
04:53 < gkatsev> jesusabdullah: I dont know what 'sandbox' mode is. But I think that's what making your life painful.
04:53 < gkatsev> jesusabdullah: I see nothing of that whole appid stuff.
04:54 < gkatsev> jesusabdullah: if you take a look at my gist, you can grab the top part and replace the bottom div with your stuff.
04:57 < jesusabdullah> gkatsev: it's when you have an app that hasn't been approved by facebook.
04:57 < gkatsev> hm...
04:57 < gkatsev> I think you can just ignore it
05:01 < veri> gkatsev: oh yes. i'm always confused when my mom tells me she closed google (browser window). regular windows are pages. and when she wants to start a locally installed application she tries to find it on facebook (really).
05:02 < gkatsev> lol
05:06 < harbhub> chat
05:06 < harbhub> i leave you with these parting words
05:06 < harbhub> fuck bitches.  get money.
05:31 < maxime_> in Express.js can I route an url that render('jadefile') and get this as an ajax response ? 
05:31 < HeartOfAce> uhhh
05:32 < HeartOfAce> you can just do res.json(object);
05:32 < maxime_> id like to pass dynamically the form the user will need to fill in html 
05:32 < HeartOfAce> I guess you might be able to just do render('jadefile') too, just by injecting the js code or something 
05:33 < maxime_> oh yeah with on click 
05:33 < maxime_> ok gotcha. 
05:33 < HeartOfAce> great lol
05:51 < Freze> hi all
05:55 < Freze> process.stdin.on('data', function(data) {
05:55 < Freze>   process.stdin.resume();
05:55 < Freze>   client.write(data);
05:55 < Freze>   process.stdin.pause();
05:55 < Freze> });
05:55 < Freze> would something like that work?
05:55 < Freze> I just want to be able to write some text in the console and have it sent after I press enter
05:59 < veri> what is resume and pause good for?
05:59 < timoxley> Freze what are you trying to build?
06:00 < timoxley> Freze perhaps you want to check out node's repl 
06:00 < Freze> timoxley: just a client to a server for playing around
06:00 < timoxley> Freze ?
06:00 < timoxley> Freze yeah check this fella out  http://nodejs.org/api/repl.html
06:01 < trvski> and probably
06:01 < trvski> http://nodejs.org/api/net.html
06:01 < timoxley> yep
06:01 < Freze> thanks
06:01 < Freze> i alread have connected and such
06:01 < Freze> but I need it to send msgs
06:01 < Freze> I already have it**
06:03 < trvski> what are you connecting to?
06:03 < Freze> IRC
06:04 < Freze> BTW I know it should probably be  client.write('PRIVMSG #freenode' +  data);
06:05 < trvski> perhaps this is what you're looking for http://nodejs.org/api/readline.html#readline_rl_prompt_preservecursor
06:05 < trvski> not sure
06:05 < timoxley> veri pause/resume not needed with node 0.10+ pull streams http://nodejs.org/api/stream.html#stream_readable_pause
06:06 < trvski> timoxley how many people are going to campjs?
06:06 < timoxley> trvski I'm hoping to get ~100
06:07 < trvski> it's a great idea
06:07 < trvski> i'm looking forward to it!
06:07 < timoxley> trvski you coming?
06:07 < trvski> definitely
06:07 < timoxley> awesome, got a ticket?
06:08 < trvski> not yet :)
06:10 < trvski> what kind of things will be going on at campjs?
06:11 < timoxley> trvski workshops, talks, and a bunch of hardware. should be a good mix of frontend and node
06:14 < timoxley> trvski the talks etc don't matter so much though, the idea is to meet people and learn shit
06:17 < trvski> timoxley very true. these days at conferences and meetups, the talks seem to really just be topic starters
06:18 < timoxley> trvski exactly
06:24 < trvski> some of the best talks are those which describe an individuals experiences rather than a description of the tools available but they seem to be somewhat rare
06:25 < trvski> web directions code seemed to be very much about the what rather than the why
06:26 < mscdex> hooray for rewrites!
06:28 < Freze> anyone host a blog using node?
06:28 < Freze> or should i stick to jekyll
06:29 < trvski> I think jekyll is a good tool for that job
06:30 < trvski> considering that you can use a commenting API, for a simple blog, most of the time it is read not written
06:30 < Freze> commenting API?
06:30 < trvski> in which case you probably don't need something like node to handle a simple read Freze
06:31 < trvski> like disqus
06:31 < trvski> of course, that is if you would like people to be able to leave their opinions
06:31 < Freze> Yeah I just wanted to play around with node and was wondering if it would be a good solution for a real blog
06:32 < trvski> its certainly capable of it
06:32 < Freze> Yeah I tested a dead simple blog using node
06:32 < Freze> but was wondering if it was worth it for a real blog site
06:33 < Freze> Because I don't know ruby so I was hesitant on Jekyll
06:33 < EhevuTov> I'd just start fresh with Node and Javascript
06:34 < EhevuTov> and use JSON as your blog database; you could use CouchDB or something for your articles
06:34 < hello_kitty> most of blog code in my exp is the db stuff
06:34 < Freze> yeah the simple blog used mongodb
06:34 < Freze> and node to display
06:34 < EhevuTov> yeah, and you have the added advantage of having your neurons only try to master one language
06:35 < Freze> do you guys host it on a VPS?
06:35 < EhevuTov> Freze, you could do anything you want. I'd use my personal dedicated server at home for something like that, but you could use Nodejitsu
06:35 < Freze> EhevuTov: lol I was looking for a quick solution
06:36 < EhevuTov> well, that's quick for me I guess
06:36 < Freze> EhevuTov: Yeah. Is it hard to maintain the VPS though?
06:36 < EhevuTov> Nope, Nodejitsu has their own command-line program that automatically loads unloads your scripts and software
06:37 < Freze> For a simple static blog I'm assuming not much should go wrong with a simple VPS like EC2
06:37 < EhevuTov> nope, you could do that too
06:37 < EhevuTov> honestly, a full OS VPS is probably a little overkill
06:37 < trvski> It would be more work for you to maintain your own server rather than deploy it to nodejitsu or something similar
06:37 < Freze> well nodejitsu is like 9$ a month at the cheapest
06:37 < EhevuTov> There are Node stack hosts you can find, similar to PHP+MySQL stacks
06:38 < EhevuTov> oh right, they raised their rates.
06:38 < Freze> And I kind find a VPS fro leasewebs for like 8$
06:38 < EhevuTov> it was just $2
06:38 < EhevuTov> $3
06:38 < EhevuTov> yeah
06:38 < Freze> from* leaseweb**
06:38 < Freze> that's why I was asking
06:39 < trvski> you can start with heroku for free
06:39 < EhevuTov> I wonder if nodester is still around
06:39 < trvski> then scale as you go
06:40 < Freze> actually 7$ bucks a month from  leaseweb
06:40 < EhevuTov> nodester, heroku and nodejitsu were the ones I use to recommend, depending on what you wanted
06:40 < Freze> with 500GB traffic
06:40 < hello_kitty> im a fan of the smallest linode package, though straying anywhere outside of their tutorials does require a whole lot of sysadmin reading
06:42 < Freze> linode is expensive
06:42 < Freze> More of a highend solution
06:43 < Freze> I just want something initially small for my blog and if it grows then move up 
06:48 < EhevuTov> Freze, I bought a .info domain from nodester for $3 a year or something crazy, free DNS through cloudflare and then $9/mo for Nodejitsu. They raised their prices, but I find it convenient for what I do
06:48 < EhevuTov> Nodejitsu use to be $3/mo for a drone
06:49 < Freze> EhuveTov: thanks
06:49 < Freze> EhuveTov: have you used a VPS?
06:50 < EhevuTov> Freze, no, but I might get a FreeBSD one. With a $20 VPS I could do a lot
06:51 < EhevuTov> I really just need a FQDN, but my current ISP is being psycho
06:51 < xuser> don't want to scroll up, digitalocean has $5 VPSs
06:52 < Freze> how did you get a domain on nodester
06:53 < EhevuTov> Freze, I dont think you can
06:54 < EhevuTov> its more for proof-of-concept and testing, really. ALthough if you're fine with the url they give you then cool
06:54 < Freze> lol did you mean something else when you said you got a domain from them?
06:54 < Freze> anyway it looks like they got bought by appfrog
06:55 < Freze> wow digitalocean is cheap even better than leaseweb
06:57 < Freze> it has 1gb traffic vs 500mb and 1gb ram and 20gb space vs 1gb ram and 40gb space
06:57 < xuser> Freze: they are the new VPS hype now
06:57 < Freze> thanks xuser 
06:57 < xuser> Freze: SSDs also
06:57 < Freze> I was looking for a vps for a while and thought that leaseweb was the one I'd go for
06:58 < EhevuTov> I wonder how digitalocean gets those prices
06:58 < macbn> which one is better for node, service like model or domain model?
06:58 < xuser> EhevuTov: economie of scale
06:58 < EhevuTov> I would think the other hosts would have just the same scale
06:59 < Freze> Their transfer bandwith doesn't include to and fro your pc?
06:59 < xuser> EhevuTov: not scale, economies of scale :)
06:59 < Freze> nvm
07:00 < Freze> EhuvuTov: that looks like good option for me instead of nodejitsu
07:02 < EhevuTov> probably
07:02 < xuser> although for high critical production stuff I would opt for linode
07:02 < EhevuTov> dunno why Nodejitsu got so expensive
07:02 < EhevuTov> obviously to pay the bills
07:02 < xuser> or AWs
07:03 < xuser> if you want free, ec2 free tier or heroku are options
07:33 < veri> i guess it is bad design to modify the exports of a required module?
07:37 < veri> like module A exports a constructor and module B extends the prototype.
07:39 < veri> so the extensions are only done if some module explicitly requires module B.
07:39 < vince_prignano> Do you have a good book to suggest for a C/Python programmer in order to start with Node.js? 
09:01 < Trudko> guys how do i use bacbkone js in nodejs if i download it as module? I am used to inlucing external js on client side, so not sure how do i include that if i downloaded it as module
09:02 < trvski> var backbone = require('backbone');
09:04 < Trudko> trvski: and i can do that on client side ? will be require available ther ealsO?
09:05 < trvski> on the client side you'll need a script tag to include backbone or use a loader like requirejs
09:05 < Trudko> ok
09:05 < Trudko> thx
09:07 < trvski> Trudko if you're trying to share your backbone models between your server and client then have a look at http://amirmalik.net/2010/11/27/how-to-share-backbonejs-models-with-nodejs
10:33 < Industrial> Can I put extra state information in seaport entries?
11:06 < cusco> hi folks
11:07 < cusco> I'm thinking in getting started on node js ... what IDE would you recommend for linux or windows?
11:12 < veri> you mean like sublime text 2?
11:12 < dooglus> cusco: I use GNU Enacs
11:13 < dooglus> (or something)
11:26 < cusco> enacs, you mean emacs
11:26 < cusco> ?
12:27 < Industrial> Is there an equivalent update command for npm init?
12:28 < Industrial> e.g. put all the libs I added as dependencies in the package.json aswell
12:41 < nathan7> Industrial: npm install -S
12:41 < nathan7> Industrial: (equivalent to --save)
13:01 < Industrial> nathan7: k
14:22 < Nokjao> Hi I'm really excited about node.
14:27 < mmalecki> Nokjao: so am I!
14:31 < The_Fly> I CANT CONTAIN MY EXCITEMENT
15:14 < pala2> What's the best way to get a list of all connected clients to a website?? Would you recommend frameworks for this?
15:35 < Industrial> Anyone have experience with https://github.com/dominictarr/reconnect ? Say I have this server code https://gist.github.com/Industrial/bd91a09d943022c5640b I'm not sure at what point reconnect comes in to play.
16:20 < fx_> Hi node people. I need some help with database connection from node, and the async way of thinking. I used to connect to mysql with a pooled connection, getting a connection from the pool for every query, but for mongo I should open just one connection and keep it. But I don't want to change my interface. Here is the new code: https://gist.github.com/yarekt/26fc6e9811559c5bbc64
16:25 < fx_> I'm having to run connect every time, which is really bad. Should i somehow store the connected collection and return it instead of connecting again? But what happens if you try to connect twice, shouldn't the second one block until it finds a connection? or should I wrap my entire application into the connect callback?
16:28 < kumavis> hows nodeconf! wish i was there
16:31 < addisonj> quiet enjoyable
16:31 < addisonj> about to play with arduino
16:41 < The_Fly> hi, asking a repeat question but want to see if there are other perspectives... on securing a fileupload endpoint
16:41 < The_Fly> i am posting images and want to load balance the upload handling scripts
16:42 < The_Fly> but they should abort the upload if some other parameters sent to the image are invalid
16:42 < haploid> my node.js script never exists.  my understanding is this is because the runtime thinks there is a chance a callback will return at some point, but I have no way of determining which callback it exiects to return.  is there any way of debugging this?
16:42 < The_Fly> also if the request body gets too large
16:42 < haploid> er, exits
16:42 < fx_> Why would you want the node process to exit?
16:42 < haploid> because it's done everything it needs to
16:43 < The_Fly> process.exit
16:43 < fx_> then call process.exit();
16:43 < haploid> it's just a DB creation script
16:43 < haploid> hm ok
16:43 < The_Fly> on callback from the db op
16:43 < The_Fly> process.exit
16:43 < The_Fly> done
16:43 < haploid> that works, thanks
16:43 < The_Fly> np
16:44 < The_Fly> anyone able to help with my issue?
16:44 < The_Fly> if i use nginx it doesnt kill the upload when it is above client_max_body_size
16:44 < The_Fly> browser continues to send the upload
16:44 < The_Fly> i noticed that curl sends an Expect: header
16:44 < fx_> nginx has some really weird buffering of requests
16:44 < The_Fly> 100-continue
16:44 < The_Fly> fx_: yep i noticed
16:44 < The_Fly> but i want to use it to load balance my file uploads
16:45 < The_Fly> unless theres another option, in node for example
16:45 < fx_> Why not use a TCP load balancer, with just node on the front end ?
16:45 < The_Fly> i could, but then my only option is to drop the connetion
16:45 < The_Fly> *connection
16:45 < The_Fly> it seems like an unclean response to an invalid request
16:45 < The_Fly> and that browsers are not using this Expect header
16:45 < The_Fly> curl does though...
16:45 < The_Fly> if request > 1k
16:46 < The_Fly> https://github.com/joyent/node/pull/316
16:47 < fx_> Looks good
16:47 < The_Fly> https://github.com/tus/tus-resumable-upload-protocol/issues/9
16:48 < The_Fly> fx_: yes but looks like browsers dont even send it anyway
16:48 < The_Fly> so im reduced to splitting my upload into two requests
16:48 < The_Fly> one to send the non-file params, if they validate then to allow the upload
16:48 < The_Fly> perhaps by sending back a token to be sent with the upload
16:48 < fx_> You want to load balance 1 request across several node servers?
16:48 < The_Fly> no, just round robin
16:49 < The_Fly> they have to accept the upload and either store to disk or place on s3
16:49 < The_Fly> depending on the status of an order/transaction
16:49 < The_Fly> if its to a complete order i can stream the upload direct to s3 without touching the disk...
16:49 < The_Fly> however actually i need to possibly pass them through imagemagick to validate them also
16:50 < fx_> Erm, load balancer with sticky sessions then, or something like vimeo do. Create and upload ticket, that gives you back an explisit server uri where to upload, do upload, ack the ticket
16:50 < The_Fly> then question is whether to compress on the client or server
16:50 < The_Fly> i ported pngcrush to js with emscripten
16:51 < The_Fly> http://richardassar.github.io/pngcrush.js/
16:51 < The_Fly> so i could use the worker i have there
16:52 < fx_> How much are you really going to gain from that?
16:53 < The_Fly> a lot
16:53 < The_Fly> well...depends actually on canvas.toDataUrl
16:53 < The_Fly> because im having users crop their images first
16:53 < The_Fly> and client renders the cropped section into a canvas, toDataUrl, then upload
16:53 < The_Fly> i guess toDataUrl passes the png image buffer through zlib
16:54 < The_Fly> but pngcrush checks different compression levels and also different prediction functions
16:54 < The_Fly> (png uses some very basic algorithm but it can give you some very large gains on some images)
16:55 < fx_> Wow, thats pretty good
16:55 < The_Fly> yeah, they use different "filters"
16:55 < fx_> Just compressed a png of chuck norris by 38%
16:55 < The_Fly> http://www.w3.org/TR/PNG-Filters.html
16:55 < The_Fly> fx_: so yeah, i think it would save me some bandwidth to use it
16:55 < The_Fly> whether that saves me any £££ or not is another question
16:56 < The_Fly> but it's fast enough i think
16:56 < The_Fly> plus i haven't built the C source in a while
16:56 < The_Fly> so more recent emscripten might give better speed
16:56 < The_Fly> especially with all the asm.js stuff that's developed since
16:56 < The_Fly> might make it faster in FF
16:57 < fx_> Yea, I wouldn't worry about it first, but its possible to do it with workers where supported, or just block the interface with a compressing message =/
16:57 < The_Fly> well im already doing it with workers
16:57 < The_Fly> i could do it on the server... 
16:57 < fx_> But then you aren't saving any bandwidth =/
16:57 < The_Fly> im still saving it from the CDN
16:58 < The_Fly> its going up to s3 and a cloudfront cdn
16:58 < The_Fly> *out through
16:58 < fx_> Ah, then process the images out of band
16:58 < fx_> have a batch process that reads of s3, crushes, and uploads back
16:58 < The_Fly> hm
16:59 < The_Fly> that involves more uploads
16:59 < The_Fly> downloads
16:59 < mbalho> chuck norris optimizations as a service
16:59 < The_Fly> oh yes
16:59 < The_Fly> chuck norris png CRUSHER!
16:59 < mbalho> my enterprise would acquihire that
17:00 < The_Fly> http://www.perlmonks.org/index.pl?node_id=702235
17:00 < The_Fly> "The best compression algorithm in existence are Chuck Norris fists."
17:00 < The_Fly> ^
17:11 < The_Fly> whats the fastest persistent session store for express?
17:11 < The_Fly> mongo/postgres?
17:12 < booyaa> riak?
17:14 < The_Fly> never used riak, looks intersting
17:14 < The_Fly> vector clocks eh
17:17 < fx_> redis, in memory store with persistance
17:18 < The_Fly> yeah could do
17:18 < fx_> but the disadvantage of that is that its in memory =)
17:18 < booyaa> dam yeah sorry thats the one not riak
17:18 < The_Fly> it will sync to disk
17:18 < The_Fly> eventually
17:18 < booyaa> nothing riak but redis is bad ass
17:18 < booyaa> -thing
17:18 < fx_> riak is ok, but its more of a database, rather than session store
17:18 < booyaa> always get those two mixed up
17:18 < The_Fly> yeah id like something fast
17:19 < fx_> Remember that you can't store data bigger than ram, The whole dataset has to stay in ram
17:19 < fx_> Also, good ol memcache
17:19 < The_Fly> http://stackoverflow.com/questions/8749907/what-is-a-good-session-store-for-a-single-host-node-js-production-app
17:19 < The_Fly> memcache cant persist to disk
17:19 < The_Fly> can it?
17:20 < fx_> Erm, there might be preload from disk, but its not what its built for
17:20 < The_Fly> im going to be using redis for socket.io scaling anyway
17:20 < fx_> You need a cluster, since it has to be redundant. Do you only have one server?
17:21 < The_Fly> no im using multiple servers
17:21 < The_Fly> i have to
17:21 < The_Fly> doing this in amazon
17:21 < fx_> Ah, well, memcache is good because its so mature. but if you are already using redis, then no reason not to stuff sessions in there too
17:22 < The_Fly> using redis for both socket.io and sessions is bad?
17:22 < The_Fly> i guess depends on load
17:22 < The_Fly> thinking how best to split it up into instances
17:22 < The_Fly> because i can attach multiple volumes to one box and have multiple node workers processing uploads
17:23 < The_Fly> i have a postgres database for a consistent view of user accounts and other states
17:23 < fx_> Why would it be bad?
17:23 < The_Fly> im not saying it would be
17:23 < The_Fly> was just figuring out what you were syaing
17:23 < The_Fly> it was ambiguous
17:24 < fx_> I can't see any reason. Sorry if I was missleading
17:24 < The_Fly> no its ok
17:26 < The_Fly> i guess redis has pubsub which is useful for socket.io
17:36 < fx_> Do you know how, in mongo, I can get a count of all records matched with find, before iterating through them
17:36 < fx_> ?
17:42 < vire> http://docs.mongodb.org/manual/reference/command/collStats/
17:42 < vire> wait
17:42 < vire> you asked with find :D
17:42 < vire> sry
17:44 < fx_> I've got a really huge collection, and I must be sure that it gets streamed back, but I need total size too before I start
17:47 < mstefanko> oh wow, and i thought #node and #nodejs are it..
17:48 < vire> afaik the .find() functions returns a set of documents wrapped as a return object, maybe you could get the size() from this obj
17:49 < fx_> I could toArray() it, but there are too many docs to fit in ram
17:49 < vire> http://stackoverflow.com/questions/6756104/get-size-of-json-object
17:50 < fx_> vire, My dataset is too big to fit into ram, I can't just ask mongo to return a billion results, and then do .length
17:50 < vire> where the keys are the documents, and values are to contents
17:50 < vire> ah
17:52 < vire> probablye there could be a walkarount to builtin an interator into the find method
17:54 < mohan> hi
17:54 < mohan> Hello every body 
17:54 < Guest12075> I am new to node js 
17:55 < Guest12075> could any body tell me the best way to lear node fast 
17:55 < Guest12075> please share some urls
17:55 < mstefanko> well better don't watch this then https://www.youtube.com/watch?v=1e1zzna-dNw
17:58 < vire> Guuest12075: http://www.nodebeginner.org/
17:59 < vire> Guest12075, and this ofc http://www.codeschool.com/courses/real-time-web-with-nodejs
18:16 <@isaacbw> that's a falsity
18:16 < hackygolucky> Hey guys, anyone know who to contact at camp about a baby fox that's been in a ditch for over an hour and isn't looking so hot?
18:16 <@isaacbw> to call it real-time
18:16 <@isaacbw> what a turd
18:16 <@isaacbw> turdnugget
18:16 <@isaacbw> did I just say that?
18:17 < squeeks> You did.
18:17 <@isaacbw> did someone hack into my account
18:17 <@isaacbw> what's going on
18:17 <@isaacbw> I'm going crazy
18:18 < Johnny-> I'm more interested in the baby fox
18:18 < mbalho> that is not the first time you have turdnuggeted this room in recent history
18:19 < mbalho> hackygolucky: really!??
18:19 < mbalho> hackygolucky: where at the camp?
18:20 < mstefanko> isaacbw the guy in the youtube vid? :)
18:22 < darkPassenger> is it possible to show a whole html page within an already existing html file's div ? 
18:22 < radu> iframe?
18:22 < hackygolucky> mbalho: on the way to building 4 and 8 there's a ditch on the right side near a truck in the shade. I don't know if it just needs water or its mom but it is super shakey and scared.
18:23 < darkPassenger> ill have to look it up 
18:23 <@isaacbw> mstefanko: no
18:23 <@isaacbw> I'm a crazy guy with the same first name
18:23 < darkPassenger> radu hehe
18:25 <@isaacbw> darkPassenger: iframe or, if you aren't a turd, sanitize it
18:25 < darkPassenger> sanitize ? 
18:26 <@isaacbw> look it up
18:26 <@isaacbw> doo the google
18:26 < darkPassenger> sure
18:26 < mstefanko> isaacbw i meant if you meant him to be a turd nugget he he
18:27 < darkPassenger> look, im a noob , but im rather polite.
18:27 <@isaacbw> oh I don't know. I really honestly don't remember writing that
18:27 < mstefanko> hehe. i've been looking into some nice node.js vids, and he came up on top
18:30 <@isaacbw> it's probably fine
18:31 < mbalho> hackygolucky: ranch employees have been notified of the fox
18:31 < hackygolucky> !m mbalho
18:32 <@isaacbw> irc is hard
18:32 < hackygolucky> No bot, eh? Bummer.
18:47 < serapath> hi
18:48 < serapath> i have build a small "dummy database" and tried to access it, but somehow it doesnt return any content from the DB
18:48 < serapath> have build a small example http://www.node-console.com/script/dummydb
18:49 < serapath> could someone tell me why it returns '[]' for db and 'undefined' for user instead of the actual db and an actual user?
18:58 < Stew-a> serapath: you're getting arrays mixed up with hashtable-style objects
18:59 < serapath> means what?
19:04 < gildean> Stew-a: you can use arrays with named indices tho'
19:04 < gildean> but it's not very optmimal usually
19:05 < Stew-a> gildean: true, but not if you're going to try and json encode an array (you'll get an array out not an object, so no non-array content will be in it) and if you try to iterate over it numerically you won't find anything useful
19:06 < gildean> as i said, it's usually not the way to go
19:07 < serapath> how would i do it?
19:10 < squeeks> carefully.
19:13 < serapath> how can i access the amount of items in my array?
19:13 < joeytwiddle_> serapath: use oD.push(user1); to add him to the array
19:13 < joeytwiddle_> array.length of course
19:13 < serapath> why doesnt oD[user1] not add +1 to length?
19:13 < joeytwiddle_> but if you are talking about an Object, then Object.keys(myObject).length
19:14 < serapath> ah, maybe because oD[user1] adds a proprety to the array object
19:14 < serapath> but not an entry to the array itself?
19:14 < joeytwiddle_> 'ronald' is not a number, so it's not a good index for an array :P
19:15 < joeytwiddle_> o you want your oD to be a hashtable or an actual list/array?
19:15 < gildean> serapath: something like this for example: http://pasted.herokuapp.com/guest/25e91897b5.js
19:15 < joeytwiddle_> *do
19:16 < gildean> in that example i gave you don't need to iterate over the whole object, just the amount that's necessary
19:16 < serapath> joeytwiddle_: hashtable
19:16 < gildean> serapath: hashtable means an object, check the example i gave you
19:17 < joeytwiddle_> http://www.node-console.com/script/sfsdf but i think you should use id's as your index, not usernames
19:18 < serapath> ur example looks better :-)
19:18 < serapath> have to wrap my mind around it, but i think i like it
19:19 < joeytwiddle_> i just saved a new copy with id as the index
19:21 < ycilluminati> what is the code?
19:22 < jden> lazyweb: best module for github api?
19:23 < gildean> serapath: in my example i made a recursive iife that returns the callback, imo that's a nicer way to check the object, but both work about the same
19:25 < Technodrome> promises better than the async module?
19:27 < gildean> Technodrome: depends on which you like more, async is way more popular tho'
19:50 <@isaacbw> peekaboo
19:52 <@isaacbw> say something clever
19:52 <@isaacbw> buy me an ice cream cone
19:54 -!- mode/#Node.js [+o isaacbw] by ChanServ
20:14 < Technodrome> gildean: isn't es6 going to have promises though?
20:15 <@isaacbw> es6 will have everything!
20:15 <@isaacbw> everythinggggggg
20:15 < shanse> will I be able to shoot myself with it?
20:15 <@isaacbw> put in a proposal and it will probably be accepted shanse 
20:17 <@isaacbw> must have moar features
20:17 < absolutezeroff> quick question: in express, when i say app.get('/path') does '/path?query=something' also get handled by that function? i'm pretty sure it does, just double-checking
20:18 <@isaacbw> noop
20:18 <@isaacbw> try it and see
20:18 <@isaacbw> you gotta you gotta
20:18 <@isaacbw>  you gotta
20:20 < ningu> absolutezeroff: yes
20:20 < absolutezeroff> thanks
20:20 <@isaacbw> wait really?
20:21 < ningu> query params end up in req.query
20:22 <@isaacbw> man, I don't even use the internet
20:25 <@isaacbw> are you sure thepath doesn't need a trailing slash?
20:25 < ningu> that's different
20:25 < ningu> it needs it if that's what you want to match
20:56 -!- mode/#Node.js [+o mbalho] by ChanServ
20:58 < randomlurker> How to check if no document matched db.collection.find(query)? I'm using mongojs
20:59 < randomlurker> say I use this db.activity.find(query, function(err, item) { somecode });
21:00 < ningu> if item is null
21:00 <@isaacbw> where did this "how to [ do something ]" pattern of question asking come from? Is it common in non-english languages to ask that way?
21:01 < ningu> isaacbw: yes
21:02 < randomlurker> ningu: I get that, but the the result of that is an object which by default has 6 keys
21:03 < ningu> randomlurker: if nothing matches the query it should be null
21:03 < randomlurker> ningu: okay..
21:14 < randomlurker> ningu: What's the best way to check whether a document exists or not?
21:15 < ningu> find() seems like as good a way as any
21:44 < alchimista> whats the problem with this code, https://gist.github.com/anonymous/c5cf17827de215adbf60
21:44 < alchimista> why I can not update the password field
21:45 < Swadq> because you're defining the update password function as if it was within an object
21:45 < alchimista> actually update password function is inside another file
21:45 < Zolmeister> no
21:45 < Zolmeister> its because of the callback
21:45 < Zolmeister> callback('ok', null)
21:45 < Zolmeister> its flipped
21:46 < Zolmeister> should be: callback(null, 'ok')
21:46 < alchimista> ah, ok, let me try
21:47 < fx_> Oh, btw, whats the correct way to ignore an arg in a callback, like, an each loop, if you want to ignore the key, do you still say function(key, value) or do you do, function(_, value) or something like that?
21:48 < Zolmeister> just don't use it
21:52 < fx_> Thats what i've been doing, but i always saw it as a waste of a variable name
21:53 < alchimista> Zolmeister: I think the update query is not working, because If I console.log it gives me 0
22:05 <@isaacbw> fx_: are you running low on variable names?
22:06 < Swadq> rofl
22:08 < adpreese> They are a precious resource
22:09  * Havvy sends fx_ a million more variable names.
22:10 < adpreese> Cause I mean seriously, I love using key while iterating through key value pairs
22:10 < adpreese> But not for the key
22:10  * fx_ breaks out the var23
22:10 < adpreese> It's really used for my passwords
22:10 < adpreese> Because they're locked away and i need the key
22:11 < Havvy> fx_: At that point I'd stop using variable names and just the arguments array. :P
22:37 < fgcgfggf> Hi, why is not a beginners guide on nodjs.org?
22:40 < ningu> fgcgfggf: there is an example application and a video introduction
22:42 < triblondon> Hi - node noob question: If I want to receive an HTTP request, kick off a load of long running async operations, respond with a page straight away and then populate it with more info as the async operations complete... how would you do that?
22:43 < fx_> triblondon, ajax
22:43 < triblondon> considered a websocket connection or ajax long-poll from the page back to the server, but it would create a different node thread
22:44 < fx_> node is single threaded
22:44 < fx_> But i assume you mean that you'll have to way to tie it back to the original request, yes, thats correct. You'd have to store the state somewhere
22:45 < triblondon> yes, so where is the nodey place to solve this?
22:45 < fx_> The solution isn't related to node
22:46 < fx_> triblondon, Your server creates a token for the long running async job, passes it to the javascript on the page, which then queries the server again async with that token, for the status of that job
22:46 < mscdex> triblondon: perhaps you could respond with a job id that you can check on in the background, whether through long polling, websockets, etc
22:46 < mscdex> heh :-)
22:47 < triblondon> yep, that's what I'm doing in the PHP app I'm trying to port to node
22:47 < triblondon> (in order to teach myself node)
23:04 < serapath> hi
23:04 < serapath> i successfully use passportjs and a login page to sign up or log in and afterwards i can go to any "guarded" page and it reveals itself
23:05 < serapath> but i cannot log out
23:05 < serapath> the session is deleted when i log out, but the cookie is not
23:06 <@isaacbw> okely dokely?
23:09 <@isaacbw> the cookie should be useless if the session id is gone
23:09 < ningu> what about the session ego and superego?
23:10 < Beg> Well this is a multichannel question but, what do you guys think about keeping node.js servers as purely a framework between db and the client when working with web? But all rendering and most of the logic on the page being dependant on the client?
23:11 < ningu> Beg: it seems to be a common way people are doing things nowadays. I don't have a particularly strong opinion on it myself, I'd mainly be concerned that the rendering wouldn't be too slow
23:11 <@isaacbw> what do *you* think about it?
23:11 < Beg> I find it a pita developing two things at the same time, but i imagine it being smoother in a team
23:11 <@isaacbw> it depends on the application
23:12 <@isaacbw> I don't think there's really much room for choosing if you actually think about the app
23:12 < Beg> Imo, everything can be achieved with both results
23:13 <@isaacbw> everything can be achieved with c and tcp sockets
23:13 < ningu> Beg: there is a difference between "can be achieved" and "can work well"
23:13 <@isaacbw> that doesn't make it any less stupid
23:13 < ningu> Beg: I like angular a lot
23:13 < ningu> but I haven't used it to do more than minimal client-side rendering
23:13 <@isaacbw> angular is great
23:14 <@isaacbw> but can be difficult to use properly
23:17 < Beg> I will check out angular, I am mostly asking because I am trying to make a platform for myself, where I easily can add small programs
23:22 < Beg> Angular seems like something that will help me achieve my goals. 
23:25 < Bit_Boy> wow guys i just found a good site to order suboxone and ghb from through i2p, http://chemhack.i2p 
23:32 < adpreese> Beg: angular is pretty neat. I might be able to answer questions if you have any
23:32 < Beg> adpreese-> thanks, but if I can'tmanage on my own whats the point :)
23:32 < absolutezeroff> angular is pretty good yeah
23:33 < absolutezeroff> you'd probably need to ask questions at least a couple times though
23:33 < adpreese> If I only ever used things I could figure out by myself, I'd be waiting tables
23:33 < adpreese> But to each their own
23:33 < Stew-a> thing that gets me about angular (and pretty much all similar client-side frameworks) is producing html snapshots for search engine crawling is a huge headache
23:34 < adpreese> There was actually a service just started for exactly that
23:34 < adpreese> Seemed a bit pricy for side projects but pretty solid for real businesses
23:35 < Beg> guys, I see alot of pages like nodejs.org are they using some opensource layout I don't know about? :s
23:35 < adpreese> What do you mean?
23:35 < Beg> alot of pages are going with this slick chick layout
23:36 < Beg> it almost seem like they all are using the same layout
23:37 < jdelgado> Whats the most popular self-hosted CI now a'days? Still travis?
23:37 < Beg> I don't ever try to make my pages pretty, but i wouldn't mind using a free template if there is any
23:38 < Skullclown> socket.io gods online?
23:39 < Skullclown> Beg: twitter bootstrap is kewl for web
23:39 < jdelgado> Skullclown: What do you need?
23:39 < Beg> Skullclown-> I knew it!
23:40 < Skullclown> Beg: google initializr
23:40 < Skullclown> jdelgado: docs only mention .emit() server-side. can I expect the same behaviour if I use .emit() on a client? or the clients don't have .emit ?
23:41 < jdelgado> Skullclown: Yeah, there is an emit on the client.
23:41 < ningu> Skullclown: socket.io is basically bidirectional
23:41 < Skullclown> jdelgado: it sends to all connected clients?
23:41 < ningu> server and client are the same
23:41 < Skullclown> ningu: aha.
23:42 < Skullclown> just wondering though, how do the clients know what clients are connected for stuff like emit()? server sends the info to every client?
23:42 < ningu> client emit goes to the server
23:42 < Beg> Skullclown-> Thanks alot mate.
23:42 < jdelgado> Server distributes
23:42 < ningu> server emit goes to the clients you specify, to one, all, or a room
23:42 < Skullclown> ningu: ah, nice. :) no massive overhead. yay.
23:42 < jdelgado> That would be nuts if clients could talk to other clients directly
23:43 < Skullclown> jdelgado: yes, that's why I asked :P
23:43 < jdelgado> lol
23:43 < Skullclown> Beg: np
23:43 <@isaacbw> Beg: a platform?
23:43 <@isaacbw> mm cinnamon
23:45 <@isaacbw> what's a platform
23:45 <@isaacbw> platfrooomrrmmrm
23:45 < jdelgado> lol
23:46 < Beg> isaacbw-> I want a coding platform, a playground, where I can just write code and my program will know what to do with the results
23:46 < Skullclown> jdelgado ningu - in an example, I see both socket.emit() and io.sockets.emit() being used.. am I wrong in assuming they both do the exact same thing?
23:46 < Stew-a> adpreese: yeah, a paid service isn't worth it for a side project, i'm currently wrestling with phantomjs for that purpose, it *seems* to be working
23:46 < ningu> io.sockets.emit goes to all connected clients
23:46 < ningu> socket.emit just to one
23:47 < jdelgado> ^
23:47 < Skullclown> ningu: that beats the purpose of emit()
23:47 < Skullclown> .send() is supposed to go to 1 client
23:47 < adpreese> Beg: What are the results?
23:47 < ningu> the purpose of emit is to emit a message
23:48 < Skullclown> emit() : Emits an event to all connected clients.
23:48 < Kessler> i'm having really bad time using forever programmatically (to deamonize a process) can anyone recommend a good example?
23:49 < Skullclown> jdelgado ningu I'll just write a test with multiple clients :) want me to report results?
23:50 < Beg> adpreese-> I wish to have as little overhead(not sure if this is the word) as possible.
23:50 < jdelgado> Kessler: Why dont you just use daemon
23:50 < jdelgado> Skullclown: Sure brah, good luck
23:51 < Kessler> jdelgado: I'm creating a module and I want it to be easily deployed once installed from npm, what do you mean "daemon" ?
23:51 < jdelgado> Kessler: It's an npm module for deamonizing a process
23:52 < Beg> adpreese-> so lets say I want to make a counter, I will do make("counter","leftpartofthescreen",function(){}); and the results of function will perhaps both write it on my homepage, and also track the counter with mongodb. I havn't came anywhere yet except having a small blogg.
23:53 < Beg> perhaps what I wanna accomplish already exist, i'm pretty sure about it :)
23:53 < Kessler> jdelgado: ill look into it, are you talking about the one made by indexzero avianflu shtylman ?
23:54 < jdelgado> yes
23:54 < jdelgado> Kessler: ^
23:55 <@isaacbw> Beg: you want to be able to tell the computer what to do and have it do it?
23:55 < Beg> isaacbw-> yes
23:55 < Kessler> jdelgado: its too bare minimum, I need it to respawn the process and have an easy mechanism to kill it surgically
23:55 <@isaacbw> man, it would be great to have a way to be able to tell computers what to do
23:55 < Kessler> isaacbw: its called voodoo :)
23:56 < Beg> isaacbw-> they already do, they just don't learn that good! :)
23:56 < Kessler> jdelgado: back to my original request, know any good example of using forever programmtically? (real one)
23:56 < jdelgado> Kessler: You code that into your application? process.kill() and process.spawn() - what am I missing?
23:57 < Kessler> jdelgado: its not that simple mate, i mean its simple to get the functionality but after that you need to address several issues which they addressed quite well with forever
23:57 < jdelgado> Forever simply isn't the correct tool for that job
23:57 < Kessler> jdelgado: respectfully i disagree
23:57 < jdelgado> What issues?
23:58 < Kessler> jdelgado: I really dont want to get into a discussion about this, simply put, I prefer to use code thats been written for this purpose and was used and tested throughly
23:58 <@isaacbw> Beg: more seriously, it sounds like you want to be able to write clientside and serverside code at the same time, which is what meteor does
23:58 <@isaacbw> or tries to do
23:58 <@isaacbw> meteor is crazy
23:59 < jdelgado> Kessler: lol I was just wondering
--- Log closed Sun Jun 30 00:00:08 2013
