--- Log opened Thu May 23 00:00:13 2013
--- Day changed Thu May 23 2013
00:00 < d4rklit3> i dunno man everything i try today doesnt work
00:00 < d4rklit3> i mean this is the simplest fucking thing... npm install...    find a way to not work
00:00 < _6a68> d4rklit3: might be mfbt, man. you seem stressed
00:00 < d4rklit3> what is mfbt?
00:01 < _6a68> http://www.urbandictionary.com/define.php?term=mfbt
00:01 < _6a68> d4rklit3: if you don't have a package.json then npm install won't nicely keep everything under node_modules in your project dir.
00:01 < d4rklit3> i do have one
00:02 < d4rklit3> do i need to put enchilada in package.json
00:02 < d4rklit3> before installation
00:03 < d4rklit3> i dont undrstand it looks for browserify twice
00:03 < _6a68> naw, but if you do npm install enchilada —save it'll auto-add it for you
00:03 < d4rklit3> well enchilada wont install properly.
00:04 < _6a68> 3 frustrated hours < 15 good minutes, maybe just take a break.
00:04 < d4rklit3> i just want this to install
00:04 < d4rklit3> i mean come on!
00:04 < d4rklit3> its not like im doing it wrong
00:05 < _6a68> but, clearly you are doing it wrong, if it works for everyone else
00:05 < _6a68> so, you must be missing something.
00:06 < _6a68> which happens when stressed/tired/etc.
00:06  * _6a68 shrugs
00:06 < d4rklit3> inpm install enchilada
00:06 < d4rklit3> thats all it says
00:06 < d4rklit3> and the error is specific
00:06 < d4rklit3> to isntallTargetError
00:06 < d4rklit3> there is nothing else i can do
00:06 < d4rklit3> like step 1 is install the package
00:07 < _6a68> well, if installing packages doesn't work, you need to debug your local setup.
00:07 < d4rklit3> how do i do that
00:07 < _6a68> failing that, maybe you need to fork and modify that package to do what you want
00:07 < d4rklit3> this is seriously fucked
00:07 < _6a68> I cannot walk you through stuff like, "is my npm up to date, is my version of node matching what this package's package.json asks for"
00:07 < d4rklit3> i just reinstaleld node
00:07 < _6a68> but, good luck :-)
00:07 < d4rklit3> 10.6  ,  came with NPM
00:08 < _6a68> maybe try 0.8.x, there are a few incompatibilities
00:08 < d4rklit3> i was using .8.x before
00:08 < _6a68> it really depends on the node versions suggested by the package.json
00:08 < d4rklit3> then this issue on github said to upgrade
00:08 < _6a68> like I said, I can't help further. but hope it works out.
00:12 < d4rklit3> this package:  "browserify": "shtylman/node-browserify#2.6.0-dz0",      does not exist on npm
00:12 < substack> ping defunctzombie
00:13 < d4rklit3> is he the author?
00:14 <@MI6> joyent/node: Ben Noordhuis v0.10 * fda2b31 : http: save roundtrips, convert buffers to strings - http://git.io/jT-B2g
00:14 < defunctzombie> d4rklit3: that is not on npm
00:14 < defunctzombie> d4rklit3: it is on github
00:15 < d4rklit3> i saw it github
00:15 < d4rklit3> in any case
00:15 < d4rklit3> are you the author?
00:15 < defunctzombie> yes
00:15 < d4rklit3> so you had this same issue 
00:15 < d4rklit3> like18 days ago
00:15 < d4rklit3> the solution was to upgrade node
00:15 < d4rklit3> i guess it has to be to 10.1 for it to work?
00:15 < defunctzombie> what version of node are you using?
00:15 < defunctzombie> no
00:15 < defunctzombie> 0.8 works
00:15 < d4rklit3> right now 10.6
00:15 < defunctzombie> just do npm install
00:15 < d4rklit3> yah man
00:15 < defunctzombie> I dunno about 10.6, I don't use any 0.10
00:15 < defunctzombie> I am still on 0.8
00:16 < d4rklit3> i was on .8
00:16 < d4rklit3> and it gave me taht error
00:16 < bnoordhuis> defunctzombie: :(
00:17 < fatblueduck> I'm unable to remove cookies with hyphens in their name
00:17 < fatblueduck> would anyone here tell me what I'm doing wrong?
00:17 < defunctzombie> bnoordhuis: :(
00:17 < d4rklit3> defunctzombie are you on windows?
00:17 < fatblueduck> I would ask #javascript, but my nick isn't registered and I can't speak there
00:17 < defunctzombie> d4rklit3: no
00:17 < d4rklit3> do you run x64 or x86 node?
00:18 < defunctzombie> d4rklit3: it doesn't matter
00:18 < defunctzombie> also, I just tried npm install enchilada and it worked for me
00:18 < d4rklit3> -g ?
00:18 < purr> d4rklit3: Question mark - Wikipedia, the free encyclopedia <http://en.wikipedia.org/wiki/Question_mark>
00:18 < d4rklit3> ok right now gonna do it
00:19 < d4rklit3> trying again
00:19 < d4rklit3> on node .8.6
00:19 < d4rklit3> same problem 
00:19 < d4rklit3> npm ERR! Error: No compatible version found: browserify@'shtylman/node-browserif
00:19 < d4rklit3> y#2.6.0-dz0'
00:20 < defunctzombie> d4rklit3: use the latest 0.8.x
00:20 < defunctzombie> 0.8.6 is old and probably won't work
00:21 < defunctzombie> bnoordhuis: one thing that makes upgrading hard is poor versioning control for core APIs/modules
00:21 < _6a68> fatblueduck: what library are you using
00:21 < defunctzombie> bnoordhuis: so if there is anything that is broken in the new version or different, then I can't upgrade any of it
00:21 < bnoordhuis> defunctzombie: you mean native code or ?
00:22 < d4rklit3> trying on .8.9 defunctzombie 
00:22 < d4rklit3> same error
00:22 < defunctzombie> bnoordhuis: things like streams/dgram/etc
00:22 < defunctzombie> d4rklit3: I said latest 0.8
00:22 < d4rklit3> 0.8.9 isn't the latest?
00:22 < defunctzombie> bnoordhuis: so if I want the http stuff but not the dgrame, etc then I am kinda stuck
00:22 < d4rklit3> o fuck
00:22 < d4rklit3> 8.23
00:23 < bnoordhuis> defunctzombie: worst case, you branch for each major version
00:23 < d4rklit3> sorry
00:23 < samholmes> ashnur: what's nib?
00:23 < bnoordhuis> defunctzombie: that is, you maintain a branch for v0.8 and one for v0.10
00:23 < defunctzombie> bnoordhuis: yea, and that won't really happen in a large project
00:23 < gabrielstuff> hello there
00:23 < bnoordhuis> why not?
00:23 < defunctzombie> I will instead just stick to 0.8 until I have a better reason to upgrade
00:24 < defunctzombie> bnoordhuis: too much work for little gain
00:24 < defunctzombie> for some things it will be worth it
00:24 < defunctzombie> but for other things it will not be.. always a tradeoff
00:24 < bnoordhuis> well, v0.8 will be eol'd soon - there's your reason to upgrade :)
00:24 < gabrielstuff> little question, how come a function with a callback called ones, could call the callback AND throw an error… cf : https://github.com/clintandrewhall/node-foursquare/blob/master/lib/node-foursquare.js#L98
00:24 < defunctzombie> bnoordhuis: sure, but there are things that do make upgrading a challenge like dgram and streams
00:25 < defunctzombie> and if I have a system running on 0.8 without issues
00:25 < defunctzombie> I don't care about EOL
00:25 < bnoordhuis> well, streams are different - but the dgram changes are pretty trivial
00:25 < defunctzombie> I would rather take stability and lack of features
00:25 < defunctzombie> bnoordhuis: trivial doesn't matter, any change is potentially annoying
00:25 < bnoordhuis> you realize EOL also means no security fixes, right?
00:25 < defunctzombie> if other things are more important at the moment
00:25 < defunctzombie> bnoordhuis: sure
00:25 < d4rklit3> same error defunctzombie 
00:26 < d4rklit3> 8.23
00:26 < defunctzombie> d4rklit3: dunno what to tell you, sorry
00:26 < d4rklit3> your telling i cant use your library
00:26 < d4rklit3> for ann apparent reason
00:26 < defunctzombie> d4rklit3: I guess not, dunno why it isn't working
00:26 < d4rklit3> whats latest version of npm?
00:26 < d4rklit3> 1.2.18 ?
00:27 < defunctzombie> yea
00:27 < defunctzombie> on 0.8
00:27 < defunctzombie> bnoordhuis: all of it is a tradeoff
00:28 < defunctzombie> if I spend my time doing upgrades, that is time I don't spend actually making things or solving my problems
00:28 < defunctzombie> bnoordhuis: and with 0.10 there was no real reason for me to upgrade to it (other than newer version) but the downsides are there
00:28 < defunctzombie> api changes
00:28 < gabrielstuff> well, how would one debug this kind of issue… the http.request return the right value
00:28 < defunctzombie> which means I have to do work, I can't just install
00:28 < gabrielstuff> but when parsing this value I get an error
00:29 < gabrielstuff> and I do not know why 
00:29 < gabrielstuff> https://github.com/clintandrewhall/node-foursquare/blob/master/lib/node-foursquare.js#L98
00:29 < gabrielstuff> i mean the first time the callback is properly called
00:29 < gabrielstuff> but suddenly
00:29 < gabrielstuff> bam throw error
00:29 < ashnur> samholmes: https://github.com/visionmedia/nib
00:30 < defunctzombie> bnoordhuis: I think the upgrade thing is a hard question to answer for everyone
00:31 < defunctzombie> each project will have a different "risk" profile at various points in its life
00:31 < d4rklit3> defunctzombie what version of npm are you on
00:31 < defunctzombie> d4rklit3: 1.2.18
00:32 < d4rklit3> i wonder if its a windows problem
00:32 < d4rklit3> has anyone ever installed it on windows?
00:33 < defunctzombie> d4rklit3: dunno.. and honestly don't care :p
00:33 < d4rklit3> well.. .windows exists
00:33 < defunctzombie> d4rklit3: I don't use windows nor do the people that use this module iirc
00:33 < defunctzombie> d4rklit3: sure.. lots of things exist
00:33 < defunctzombie> d4rklit3: doesn't meant I have to care about them :)
00:33 < d4rklit3> thats a very obtuse argument
00:33 < defunctzombie> you are saying I need to support windows cause it exists
00:33 < gabrielstuff> this try catch is really kind of intersting… no one ?
00:33 < _6a68> VAX also exists
00:33 < defunctzombie> I am saying I don't use windows and therefore don't care
00:33 < d4rklit3> windows owns the market in OS
00:34 < d4rklit3> so..
00:34 < defunctzombie> ... ok... so
00:34 < defunctzombie> d4rklit3: I am not gonna have this debate, I am sorry the module is not installing. I would suggest asking isaacbw about npm github installs on windows and if there are known issues
00:35 < defunctzombie> d4rklit3: it may be a windows related issue, if you find the fix then I will be happy to accept it
00:35 < defunctzombie> but I don't have the time nor the desire to hunt for the fix right now, sorry
00:37 < d4rklit3> ok plot thickens... unable to connect to github
00:37 < d4rklit3> u know what
00:38 < d4rklit3> if this is my works stupid ass firewall
00:39 < gabrielstuff> found it 
00:39 < gabrielstuff> thanks !
00:43 < _d4rklit3> defunctzombie 
00:43 < _d4rklit3> it was firewall
00:47 < Skaag> Hey, what's the nicest node.js tutorial that hopefully uses a framework for html pages?
00:49 < ChrisPartridge> _d4rklit3: you could also git clone it, edit package.json, change the package reference to the full github tarball URI, and run npm install - it's just the relative github path on the depedency which breaks it on windows
00:49 < _d4rklit3> yeah well
00:49 < _d4rklit3> instead of that
00:49 < Skaag> by framework I mean some kind of mvc framework
00:49 < _d4rklit3> i just tethered my phone to my work comp 
00:49 < _d4rklit3> and it was fine
00:50 < redhotsl_> calling childprocess.spawn('/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary', 'www.google.com'); only works if chrome is not already running. any idea why?
00:51 < mscdex> redhotsl_: does it just open a new tab to that site otherwise?
00:52 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:53 < redhotsl_> mscdex: no. if chrome is not running it starts chrome. but if it is already running I see a chrome Icon appear momentarily in the Mac Dock
00:53 < mscdex> dunno then
00:54 < mscdex> does it happen just with canary and not stable?
00:56 < ChrisPartridge> redhotsl_: try the --new-window switch
00:56 < redhotsl_> mscdex: yeah...not the same behaviour with stable. doing more tests
01:00 < redhotsl_> mscdex: sorry; it is the same behaviour
01:03 < redhotsl_> ChrisPartridge: it does not work eigther
01:03 < _d4rklit3> hey defunctzombie, if i have my source here:  /source/apps/boty-site/main.coffee     and the route here:   /public/js/main.js           how should src, and routes look?
01:04 < defunctzombie> _d4rklit3: I don't know anything about coffee script
01:04 < defunctzombie> _d4rklit3: and cannot help you with it
01:04 < _d4rklit3> ok fine
01:04 < _d4rklit3> source si /main.js
01:04 < _d4rklit3> instead of coffee
01:04 < _d4rklit3> doesn't matter
01:04 < defunctzombie> _d4rklit3: read the readme
01:04 < _d4rklit3> i am
01:04 < _d4rklit3> the src in the read me is the public folder
01:04 < _d4rklit3> that confuses me
01:05 < Skaag> is angular.js a safe bet or is there another rising star?
01:05 < redhotsl_> can it be that if Chrome is already running, spawn() is spanning a new process that Chrome automatically shuts down because either Chrome or Mac Os does not want the same App to run twice
01:06 < _d4rklit3> i have no idea how this come so easily to everyone here
01:06 < _d4rklit3> src = deploy path
01:06 < ChrisPartridge> redhotsl_: possibly, have you asked in #chromium ?
01:06 < _d4rklit3> that makes perfect sense... 
01:07 < redhotsl_> ChrisPartridge: I haven't...but I will. thanks
01:12 < redhotsl_> I just thought of /usr/bin/open. This works:   childprocess.spawn('/usr/bin/open', [ '-a', 'Google Chrome Canary', 'http://www.google.com']); 
01:15 < _d4rklit3> i must hae brain damage
01:15 < _d4rklit3> because when i read the readme
01:15 < _d4rklit3> it doesn't make sense
01:17 < _d4rklit3> defunctzombie, why wouldn't any sane person seperate their source from deploy
01:18 < _d4rklit3> your examples point to your deploy directory as the source
01:22 < defunctzombie> _d4rklit3: ?
01:22 < _d4rklit3> it was very confusing
01:22 < _d4rklit3> to see in the example
01:22 < defunctzombie> _d4rklit3: what source vs deploy?
01:22 < _d4rklit3> i mean im used to working with compiled code
01:22 < _d4rklit3> in other languages
01:22 < _d4rklit3> where you compile to a binary
01:23 < defunctzombie> _d4rklit3: I point it to a dir which has the client side js
01:23 < _d4rklit3> in a different folder
01:23 < defunctzombie> _d4rklit3: why? who cares?
01:23 < deoxxa> yeah i compile my javascript for extra speed
01:23 < defunctzombie> _d4rklit3: this just keeps the compiled stuff in memory
01:23 < deoxxa> wait, no
01:23 < deoxxa> that's not right
01:23 < _d4rklit3> just my source directory isn't in /public
01:23 < defunctzombie> _d4rklit3: your client side code?
01:23 < defunctzombie> _d4rklit3: ok.. so point it to some other dir
01:23 < _d4rklit3> yeah because its not client side
01:23 < _d4rklit3> until its compiled
01:24 < defunctzombie> _d4rklit3: it doesn't matter
01:24 < _d4rklit3> its all in coffee, so it useless to browsers
01:24 < _d4rklit3> yeah i figured it out now
01:24 < defunctzombie> _d4rklit3: https://gist.github.com/shtylman/4662333
01:24 < defunctzombie> _d4rklit3: that is my typical express setup
01:25 < _d4rklit3> im tryin to abstract things a bit more
01:25 < _d4rklit3> im making a server all the devs i work with can deploy without having to deal with any node.js code
01:26 < _d4rklit3> so they plug in a json that describes the app and the server just figures it out and compiles
01:29 < _d4rklit3> defunctzombie, why does enchilada make this file at the route?
01:29 < _d4rklit3> thats like > 1mb
01:30 < _d4rklit3> ok now its gone for some reason
01:37 < _d4rklit3> why would some js be readonly
01:37 < _d4rklit3> on jslint.com
01:38 < deoxxa> _d4rklit3: what
01:38 < _d4rklit3> i had browserify/enchilada make me some code
01:38 < _d4rklit3> but the browser doesnt run it
01:38 < _d4rklit3> at all
01:38 < _d4rklit3> so i ran it throught jslint
01:38 < _d4rklit3> says its readonly
01:38 < _d4rklit3> I don't know how...
01:38 < _d4rklit3> its just a string
01:39 <@isaacbw> oy, don't press enter so much
01:39 < _d4rklit3> oops sorry
01:40 < _d4rklit3> yeah i dunno whats goin on..    
01:41 < _d4rklit3> browser doesn't run the js
01:42 < _d4rklit3> well great i got it work, and it can't make a working js file
01:45 < _d4rklit3> til tomorrow
01:47 <@isaacbw> _d4rklit3: you should try to buffer your comments and minimize the newlines
01:47 <@isaacbw> you're taking up 80% of my 1080p monitor :P
01:56 < ChrisPartridge> isaacbw: you could always buy a bigger monitor :p
02:01 < zamnuts> what is the future of fs.watch (and related methods)? it is currently marked as "unstable". Is the community leaning towards a major refactor, deprecating or is it just in beta?
02:03 < ChrisPartridge> zamnuts: I think it's unstable due certain platform shortfalls in regards to file system change events, i could be wrong
02:14 < elliottcable> I'm trying to upgrade from my browserify 1.0 workflow to browserify 2.0
02:14 < elliottcable> but I'm getting this:
02:14 < elliottcable> Error: module "Source/Paws.coffee" not found in require()
02:14 < elliottcable> https://gist.github.com/elliottcable/5632377
02:15 < elliottcable> There's the browserify-compiling Cake task in question
02:15 < elliottcable> got coffeeify in there, or at least, I think I do ... no idea if I'm doing this right, at all. The documentation is pretty sparse.
02:15 < zamnuts> ChrisPartridge, thanks for the input. Does anyone else have other input since we're speculating, or is there somewhere I can look this up?
02:20 < ChrisPartridge> zamnuts: I guess you could ask isaacs when he's around, otherwise ask on google groups - https://groups.google.com/forum/?fromgroups#!forum/nodejs
02:21 < zamnuts> Thanks ChrisPartridge 
02:22 < ChrisPartridge> yw
02:27 < Tristan128> I use node-static. Is there an https alternative?
02:30 < ChrisPartridge> Tristan128: you should be able to use it with https
02:31 < Tristan128> How so? I use it via command line like "static -p 8080 ./" but I don't think there's a cli param for https. I'm open to writing it out though.
02:31 < ChrisPartridge> Tristan128: oh
02:31 < ChrisPartridge> Tristan128: look at https://github.com/cloudhead/node-static/blob/master/bin/cli.js
02:32 < Tristan128> thanks
02:32 < ChrisPartridge> you should be able to make some tweaks to accept certificate paths from the args, and setup a https server (or maybe default to looking somewhere for certs)
02:34 < niggler> anyone use the gzip npm module?
02:35 < mscdex> niggler: why not use the built-in zlib module?
02:35 < leichtgewicht> elliottcable I have been working with coffeeify recently and it worked back then: https://gist.github.com/martinheidegger/63fed98c86f14e3b96ec
02:36 < niggler> that's what i figured mscdex but i saw this gzip module that hasn't been updated in years
02:36 < elliottcable> leichtgewicht ⑊ yeah, I was missing the absence of --watch, too. Cool.
02:36 < leichtgewicht> elliottcable I started working this into a module.
02:36 < elliottcable> ugh, you're doing exactly what I did in my file
02:36 < leichtgewicht> But now project = busy.
02:36 < elliottcable> so I guess I wasn't doing it obviously-wrong, which is what I'd hoped for, an easy fix.
02:36 < elliottcable> ugh.
02:37 < leichtgewicht> Maybe its a minor version issue?
02:37 < leichtgewicht> Did you try browserify from a few days ago?
02:37 < elliottcable> nope, I might tomorrow
02:43 < ssafejava> niggler: if you're using connect or express, express/connect.compress() is by far the easiest way to enable gzip
02:44 < niggler> ssafejava: https://npmjs.org/browse/updated/302/ in terms of updates its one of the oldest
02:45 < niggler> I'm guessing zlib was added to nodejs after that was made, but I'm trying to figure out why it's still there
02:45 < ssafejava> that's a different `compress`
02:45 < ssafejava> connect's compress.js uses zlib
02:45 < progrock`> anyone know if a jsfiddle like app/site that uses sockets so multple people can edit live?
02:45 < ssafejava> niggler: https://github.com/senchalabs/connect/blob/master/lib/middleware/compress.js#L83-95
02:46 < progrock`> s/if/of
02:47 < ChrisPartridge> niggler: it's still there because it hasn't been removed by the maintainer?
02:50 < ssafejava> progrock`: There's cloud9.io, not quite as quick as jsfiddle to get started but it's a quality online ide
02:50 < mscdex> niggler: yeah zlib was added after those modules were published
02:51 < progrock`> ssafejava: it offers live collaboration?
02:51 < ssafejava> progrock`: yes
02:51 < ssafejava> http://www.leggetter.co.uk/2012/06/27/cloud9-introduce-realtime-collaborative-editing-to-their-online-ide.html
02:52 < progrock`> ssafejava: ok, figured there had to be one.  I'm building my own jsfiddle like clone that will offer it as well
02:52 < ssafejava> progrock`: Cloud9 is very full-featured. I would believe there'd be demand for something as easy/anonymous as jsfiddle with realtime collab though
02:52 < ssafejava> cloud9 is a hassle to get moving with
02:53 < progrock`> ssafejava: yeah, i plan to keep it as simple as possible... and hopefully make it embeddable into any site.  Otherwiose, not super worried about a user base... I got an Open Source project thats more directly towards what I like if I ever need to get another job... but this is mor to challenge my self
02:54 < ssafejava> Sure, and it's a good idea. E.g. I would love to be able to paste a link into IRC and work on a problem with someone
02:54 < progrock`> ssafejava: consisering doing it with angularJS... tho not 100% sure if I'll get much benefit there.. but tis slightly out ofmy realm of my usual JS stuff, and have been wanting to try it out on a serious project
02:54 < ssafejava> meteor, maybe? something with socket.io as a first-class citizen will help
02:55 < progrock`> well, socket.io is primariy backend?... besides what handles sending/receiving messages on the front end.. right?
02:56 < progrock`> I really wanna give angular a serious chance.. it seems cool, tho I just get so much mro edone with the libraries I'm more familair with (jquery, d3)... but its worth a shot i think
02:56 <@isaacbw> angular uses jquery under the hood
02:56 < progrock`> think I'm gonna go with Ace over Codemirror tho... tho tha tmay change after some testing
02:57 < progrock`> isaacbw: oh, thats actually kinda good news
02:57 < progrock`> isaacbw: I just realy need to make a real app with it to decide if I never want to use it again, or if I like it
02:58 <@isaacbw> what's stopping you
02:58 <@isaacbw> get to it
02:58 < progrock`> now, my other major decision, whil unrelated, is whether I want to use an AMD (most likely Require.js) or if I want to go without it... I generally feel I don't need it (and it may infact be a pain) considering this is more or lessa  solo project
02:58 <@isaacbw> just do something
02:59 <@isaacbw> it's easy to backtrack
02:59 < progrock`> yup
02:59 <@isaacbw> "Don't make decisions"
02:59 <@isaacbw> should be a mantra
02:59 < progrock`> thats what I'm doing now... pretty much choosing things becqause I want to try them out.. not because its definitely what i'l lbe using
02:59 < progrock`> which is why i did itin foundation, not bootstrap, which I'm much more familiar with
02:59 < Havvy> progrock`: Zurb's foundation?
03:00 < progrock`> Havvy: yeah
03:00 < Havvy> 2 or 3?
03:00 < progrock`> 4
03:00 < progrock`> tho, I don't even know if there's much of a point in using either... ui is so simple anyway, but at least the default components get me rolling quikcer
03:00 < Havvy> Err, right.
03:01 < Havvy> The rows and columns thing is nice.
03:01 < Havvy> A bit verbose, but nice.
03:01 < ssafejava> eh. for a big webapp maybe. this is a couple boxes
03:01 < progrock`> Havvy: yup... and its my first "mobile first" design... if bootstrap 3 was stable, i'dbe going with that TBH
03:02 < progrock`> ssafejava: exactly.. not sure if the grids even gonna help.. since it will definitely need to be resizable
03:02 < ssafejava> yeah. you can write a few media queries yourself, it's not difficult. you'll want the customization over something more rigid like bootstrap or foundation
03:02 < progrock`> ssafejava: but its convenient to have buttons and other shit styled slightly better than default, so i dont have to waste the time there
03:03 < progrock`> but for now, I consider it a Wireframe in foundation... probably code it myself in the end
03:04 <@isaacbw> well, angular doesn't really use jquery. It uses its own gimped subset of jquery called jqlite
03:05 < progrock`> isaacbw: interesting, is it by anychance replaceable by zepto?
03:05 <@isaacbw> I don't think so, but I don't know why you would want to do that
03:05 <@isaacbw> it will transparently use the full jquery if it's available
03:06 < progrock`> isaacbw: because foudnation by default tries to use zepto.. which if I;m not mistaken, is a smaller, quicker subset of jQuery (more or less)
03:06 <@isaacbw> which is what jqlite is
03:06 < Havvy> zepto and jqlite target the same niche.
03:06 <@isaacbw> http://docs.angularjs.org/api/angular.element
03:10 < progrock`> Havvy: yeah, I figured.. as long as one works for both Foundation and Anular, it would be nice... tho,I probably dont need it for foundation, not sur eif I have any plans of using it, or at leats usin the JS portion... tho joyride (while easy enough to imitate) could be a cool way to do a demo/doc
03:11 < Havvy> progrock`: Of their scripts, I just like the declaritive lightbox (Reveal)
03:13 < progrock`> Havvy: well, again, its by no means special... but the fact that its done and works, Joyride is cool... plannign to implement it on our platofrm at work
03:14 < Havvy> progrock`: Yes, but also being declarative, I don't have to write any JS to use it.
03:15 <@MI6> joyent/node: Timothy J Fontaine master * f8193ab : timers: use uv_now instead of Date.now - http://git.io/c2QRQA
03:15 < progrock`> yeah... I'm probably not gonna keep using foundation tho.. I liek stylus too much over Sass, on something this easy, I'll proably stick to SStylus and do the styling myself
03:16 < Havvy> I generally just write the CSS raw.
03:17 < progrock`> Havvy: I;ve been enjoting bootstrap for my lazy projetcs where I dont exactly care how te site looks (sicne if not, I would have them look beyond basic)
03:25 < progrock`> I kinda wish in JADE you could have a block inside another block with the same name (ie. block content... where there are optional layers of templates)
03:26 < progrock`> instead i have block mainConent inside of the content block of one template.. but that means I can optionally not use it
03:26 < progrock`> Hmmm... I suppose I could have it where block content defaults to only having block mainContent
03:26 < progrock`> that may actually work :)
03:27 < progrock`> in fact, thats probab;y what youre supposed to do if you want what I'm talking about
03:27 < progrock`> annoying I'll need a name for each alyer, and have it defined in every template.. but should work at least
03:27 <@MI6> joyent/node: Timothy J Fontaine master * 17e696c : systemtap: add tapset for node user probes (+1 more commits) - http://git.io/Hg-Akw
03:29 < progrock`> umm, crap.. that should have worked no prob in theory.. but for some reason failed completely
03:32 < deeprogram> hi ? can you explain me why node-gyp named node-gyp ? what's mean of gyp ?
03:33 < px31> generate your project
03:33 < niggler> generate yo' project
03:34 < deeprogram> niggler: sound right !
03:34 < deeprogram> haha
03:34 < deeprogram> right name
03:50 < progrock`> man, sass is like css with slightly less copy and pasting... Stylus is soo much nice IMO
03:56 <@isaacbw> if you do css right you shouldn't copy paste
03:56 <@isaacbw> that much
03:57 < Havvy> `that much`
03:58 < ssafejava> afaik sass/less/stylus have essentially the same syntax +- a few brackets & symbols
04:00 < progrock`> ssafejava: yes, I live the no {} : in stylus... 
04:00 < ssafejava> same in sass
04:00 < progrock`> it allows soo much more to be shown in a limited number of lines (ie. on a single screen0
04:00 < progrock`> ssafejava: old sass.. not scss style, which appears to be what i s"preferred" in librries
04:00 < ssafejava> mixins are the really big win.. if you want to see some very advanced usage of sass, see the sass used in sencha touch 2
04:01 < ssafejava> they have one that I really love that generates a button from a single line and an input color, creates gradients, hover, submit colors, and correct text color based on lightness/darkness of background
04:02 < ssafejava> & you can mix sass & scss files in a single project, np. @import will import either syntax, so use whichever you like
04:02 < progrock`> ssafejava: ahh, thats good news... tho I take it you can only have 1 syntax ina single file
04:02 < ssafejava> yeah exactly.
04:02 < progrock`> I suppose I could live with that
04:03 < ssafejava> The thing I really like about .scss though is renaming existing .css files - for example, since compass does my css combining and minification, I include straight .css files from libraries by just renaming them to .scss and @importing them
04:03 < progrock`> I just feel like theres no gain from the boiler plate
04:04 < ssafejava> it's a personal thing, some people don't like syntaxes that are so whitespace-sensitive. but for those who can deal with it, it's a big win - see related projects like HAML
04:04 < progrock`> yeah, brings me back to 10 years ago when I moved from php to python... never looked back
04:07 < ssafejava> lol that's like moving from dogmeat to steak
04:09 < Havvy> I'm going to note that whitespace sensitive languages are bad for blind developers.
04:11 < patrickv___> hi! I'm trying to find a good way to scale timeouts... I have persistent connections to a node.js server, a few thousand, and that's all good. each time they receive/send data, the timeout value can be reset to Date.now() + some value
04:11 < patrickv___> but how can I efficiently process when to timeout?
04:13 < ssafejava> clearTimeout() on the previous setTimeout(), setTimeout() with a close function and a delay e
04:13 < patrickv___> so can setTimeout scale to several thousands and is it not too costly to set/unset them each time?
04:16 < ssafejava> Should be fine, setTimeout() will not save the call stack, but if you define an anonymous function inside it, it will not GC any vars in scope
04:17 < ssafejava> best way to find out is to test
04:17 < patrickv___> I guess so haha
04:17 < patrickv___> thanks
04:17 < patrickv___> it makes things pretty simple to check I guess ha ha
04:18 < patrickv___> thanks
04:29 < sinclair|net> ok, i think im done with nodejs for a while
04:29 < sinclair|net> am i alone in thinking that the platform is just far from ready?
04:30 < sinclair|net> a conversation on what might bring it up to scratch would be good
04:31 < sinclair|net> i think the biggest issues i have are: 
04:31 < sinclair|net> JavaScript on its own is not suitable for large projects
04:31 <@Nexxy> inb4 typescript
04:31 < sinclair|net> new node processes require 10mb of memory (its actually around 7mb)
04:31 < deoxxa> ^ this
04:32  * deoxxa gets popcorn
04:32 < fiws> ^^
04:32 <@Nexxy> I need DMX lighting equipment
04:32 <@Nexxy> is anyone selling some? :D
04:32  * Nexxy hijack
04:33 < niggler> are you rapping now Nexxy ?
04:33 < ChrisPartridge> Nexxy: like this http://unveildgossip.com/wp-content/uploads/2013/04/dmx.jpg ?
04:33 < sinclair|net> i understand that node treats child_processes as completely separate instances, but im not sure they should be run as new instances
04:33  * niggler high-fives ChrisPartridge 
04:34 <@Nexxy> yes, ChrisPartridge
04:34 <@Nexxy> exactly that.
04:34 < niggler> Nexxy: did you hit up craigslist?
04:34 < sinclair|net> for example, in some environments, its not possible to execute new system processes
04:34 <@Nexxy> niggler, yeah but few hits nearby
04:34 < deoxxa> Nexxy: like a batsignal light, but for summoning the "andrew dice clay of rap"?
04:34 < sinclair|net> rather, why can't the processes be run inside the current node process ?
04:34 <@Nexxy> deoxxa, lol
04:34 < niggler> we need some tupac up in here
04:35 <@Nexxy> I just need you to check your local craigslist :D
04:35 < sinclair|net> and, why can't the v8 services be exposes to sub processes so that each time i want to sub process something, i am not firing up the entirety of v8 each time
04:35 < niggler> you can't do that search from your place Ne?
04:35 <@Nexxy> sinclair|net, because that's not how it works
04:35 < trusktr> Sam-T, WOrking on a nodejs project tonight. hyped!
04:35 <@Nexxy> niggler, but I'd still need someone nearby to pick it up and ship it to me
04:35 < deoxxa> sinclair|net: you should take a look at how v8 works
04:35 < sinclair|net> Nexxy: yes, that's not how it works, and its a problem
04:36 < niggler> hmm you wouldn't pay the other person to ship it?
04:36 <@Nexxy> only for some
04:36 <@Nexxy> of course I would
04:36 < sinclair|net> deoxxa: its not really do to with V8
04:36 < niggler> you can call up fedex and ask them to print shipping label for you
04:36 <@Nexxy> but that is, the person that goes to pick it up
04:36 <@Nexxy> most people are posting stuff on craiglist specifically to avoid shipping it somewhere
04:36 < niggler> oh right cash transaction
04:36 <@Nexxy> hence the need for a middle man
04:36 <@Nexxy> person
04:36 < deoxxa> middleperson
04:37 <@Nexxy> :D
04:37 < Havvy> sinclair|net: Blog posts are better than IRC rants.
04:37 <@Nexxy> Havvy, except you can't rewrite the same blog post every night
04:37 < niggler> i disagree Havvy 
04:37 <@Nexxy> like you can in IRC
04:37 < sinclair|net> deoxxa: for example, node obviously boots up a v8 instance each time it starts, that is fine, but a call to a child process should "not" start a completely new system process
04:37 < niggler> blog posts risk the chance of being taken seriously
04:37 <@Nexxy> I agree with the not being in quotes
04:37 < deoxxa> sinclair|net: have you developed incredibly strong wrists over the span of your life
04:38 < Havvy> Nexxy: Lol.
04:38 < deoxxa> sinclair|net: from all this hand-waving you do when explaining how you think things should work, i mean
04:38 < deoxxa> "it should work this way because *magic*"
04:38 < niggler> lol deoxxa i expected you to go in a different direction
04:38 <@Nexxy> jelly beans
04:38 <@Nexxy> fairy dust
04:38 < sinclair|net> deoxxa: its kinda frustrating tho, i mean node is very liberal with its memory
04:38 <@Nexxy> sub processes
04:38 <@Nexxy> some unicorns
04:38 <@Nexxy> and less memory usage
04:39 <@Nexxy> or something
04:39 < Havvy> niggler: Same.
04:39 <@Nexxy> more unicorn less velociraptor
04:39 < sinclair|net> deoxxa: and there is a perfectly good use cases for having node spawn new processes within its current system process
04:40 < sinclair|net> deoxxa: as it currently stands, node is faking it with completely new node instances
04:40 < fiws> sounds like you want threads
04:41 < sinclair|net> fiws: nope
04:41 < deoxxa> sinclair|net: "it makes sense in my head" isn't a valid argument - i'm 100% sure everyone would take you infinitely more seriously if you had done some research into the internals of node and v8
04:41 < niggler> … and JS for that matter
04:41 < sinclair|net> deoxxa: i have spent months looking into all these things
04:42 < niggler> what's an isolate sinclair|net 
04:42 < sinclair|net> niggler: i don't know
04:43 < sinclair|net> niggler: ok, according to the internet, a Isolate represents an isolated instance of the V8 engine. 
04:43 < sinclair|net> niggler: right, so why do i have 1 Isolate per node instance?
04:44 < sinclair|net> why can i not have multiple isolates per node instance?
04:44 < niggler> sinclair|net: http://nodejs.org/api/cluster.html 
04:45 < sinclair|net> niggler: cluster is built on child_process ?
04:45 < fiws> "The worker processes are spawned using the child_process.fork method,"
04:45 < niggler> there was a time (and isaacs can go into more detail) where it was attempted using isolates
04:46 < sinclair|net> fiws: right, well if worker processes are spawned by fork() then its creating new system processes
04:46 < sinclair|net> which is not desired 
04:47 < deoxxa> (by you)
04:47 < sinclair|net> deoxxa: in a general case, its not desired, 
04:47 < niggler> i thought (again, someone else should give more details) that a different model was attempted (not forking) and it was too messy
04:48 < deoxxa> sinclair|net: (by you)
04:48 < sinclair|net> deoxxa: there should be a distinction between creating new system processes, and creating new internal sub processes
04:49 < sinclair|net> deoxxa: i cannot spawn new system processes in many locked down environments would be the first case against the current setup
04:49 < sinclair|net> deoxxa: and you wouldn't blame the locked down environments for not being "cool" enough to run node
04:49 < sinclair|net> its just how things work
04:50 < sinclair|net> second, i get about 7mb per process, 
04:50 < sinclair|net> on windows
04:51 < sinclair|net> so, if i wanted to setup some kind of message / queue bus where each process handles one type of message, i have 7mb per message type
04:51 < sinclair|net> the docs themselves tell me i can't run thousands of these sub processes
04:51 < deoxxa> sinclair|net: i'm seeing a recurring theme here
04:51 < sinclair|net> deoxxa: what is that?
04:51 < fiws> why would you do that? one process per type of message?!
04:52 < deoxxa> sinclair|net: you don't think node.js is "ready" for production use, because you don't think javascript is suitable for "large" applications
04:52 < deoxxa> sinclair|net: the problem is that you don't seem capable of thinking in any context *but* "large" applications
04:52 < sinclair|net> fiws: well, i might want several hundred processes for 1 message
04:52 < niggler> i dunno about you fiws but when i kick ass and take names i have different notebooks for different types of people
04:52 < Havvy> If you want several hundred processes for 1 message, you should really be rethinking what you are doing.
04:53 < sinclair|net> Havvy: not really, consider a queue of messages 
04:53 < niggler> what type of messages sinclair|net 
04:54 < sinclair|net> you have 1 single threaded process picking things up from the queue, and lets assume that queue gets large, you want to spin up more processes to process queued messages faster, 
04:54 < deoxxa> sinclair|net: i've personally used node.js to implement rather complete systems with a lot of moving parts, and i've faced precisely 0 of the problems you're talking about
04:54 < deoxxa> sinclair|net: mostly because i build towards what node is good at, rather than trying to shoehorn node into some specific architecture
04:54 <@Nexxy> are you sure you don't mean 0.00000000004?
04:54 < jesusabdullah> I don't see why javascript can't do that though
04:55 < niggler> jesusabdullah: in certain applications you need C-level performance
04:55 < jesusabdullah> I mean I wouldn't write a gigantic blocking operation into my nodes I'd farm computation to environments better aimed towards that, potentially c-based servers
04:56 < niggler> certain very CPU-heavy or memory-intensive (beyond what v8 can allocate) operations just falter under node
04:56 < jesusabdullah> though I'd probably be like, "that's haaard" and play with something "fun" instead like, idk, clojure or ocaml or some shit
04:56 < niggler> but that's a case of wrong tool for the job
04:56 < niggler> jesusabdullah: are you saying C isn
04:56 < niggler> 't fun
04:56 < niggler> ?
04:56 < Zolmeister> the point is that it doesn't matter if you have a large queue, going through the queue is not the bottleneck. Its how you manage your async IO/operations that determines the performance
04:57 < sinclair|net> niggler: there is a lot about node that, on the outside atleast, makes it 100% perfect for what i describe
04:57 < sinclair|net> Zolmeister: not true
04:57 < niggler> sinclair|net: give some actual numbers
04:57 < Zolmeister> sinclair|net: so then most of your work is done using node?
04:57 < niggler> what's the desired throughput 
04:58 < jesusabdullah> if you have a large queue, there are a number of things going on. One is that you probably have that queue backed to some kind of database or queue server or something, either way there's a whole io problem that you can abstract away from the Actual Work
04:58 < jesusabdullah> second of all, if you have a Large queue you're going to have workers *anyway*
04:58 < sinclair|net> niggler: that is on a application by application basis, but lets assume you have a queue, with 1,000,000 items in it, and it takes 10ms to process each item, 
04:58 < jesusabdullah> sinclair|net: yeah you farm that out to multiple nodes
04:59 < sinclair|net> niggler: on a single thread
04:59 < niggler> I'm asking about your application sinclair|net 
04:59 < jesusabdullah> also 10ms doesn't sound like the end of the world if you spread them out properly
04:59 < jesusabdullah> you can go faster maybe by implementing your workers in not-node but node can easily handle the io juggling
04:59 < Zolmeister> again, it doesn't take node 10ms to attribute the jobs to each worker
05:00 < sinclair|net> Zolmeister: these are just numbers, people want numbers
05:00 < jesusabdullah> yeah this argument only really makes sense if it's a synchronous 10ms algorithm implemented in the same process
05:00 < Zolmeister> ^
05:01 < jesusabdullah> and you only have one server getting hammered with *all* the requests
05:01 < jesusabdullah> in which case you're fucked anyway
05:01 < jesusabdullah> so, bad example
05:01 < jesusabdullah> here's a better example, maybe
05:01 < sinclair|net> jesusabdullah: its not a bad example at all
05:01 < Zolmeister> (node cluster)
05:01 < sinclair|net> Zolmeister: node cluster creates new server processes
05:01 < jesusabdullah> I'm pretty sure I just said it was sinclair|net and I know a thing or two
05:01 < sinclair|net> i can't have that
05:02 < sinclair|net> jesusabdullah: i know a thing or two also
05:02 < jesusabdullah> then you would recognize that this is a terrible example
05:02 < sinclair|net> jesusabdullah: someone asked for numbers
05:02 < jesusabdullah> or at least be able to explain what we're missing in your "you have a lot of jobs" point
05:03 < jesusabdullah> the numbers don't matter sinclair|net the overall scenario matters
05:03 < sinclair|net> i gave arbitrary numbers so we could calculate some numbers off it.
05:03 < Zolmeister> I'm lost, what are we arguing about? what numbers?
05:03 < jesusabdullah> the scenario where you have a bunch of jobs to do and you only have one process
05:03 < jesusabdullah> for some reason
05:03 < Zolmeister> oh.... one process???
05:03 < jesusabdullah> seriously, better example: Server that takes some huge dataset input, runs a big numerical method on it, and returns another huge dataset
05:04 < jesusabdullah> with numerical methods you can take advantage of multiprocessing
05:04 < sinclair|net> jesusabdullah: fine, if you like
05:05 < jesusabdullah> and you're either using threads to manage io in an async manner, or you're using an old-school blocking architecture, which is fine because the event loop would pretty much act the same way
05:05 < jesusabdullah> given large blocking jobs
05:05 < jesusabdullah> but nobody in their right mind would implement that in javascript *anyway*
05:05 < sinclair|net> jesusabdullah: doesn't matter
05:05 < jesusabdullah> so what's your point sinclair|net ?
05:06 < sinclair|net> jesusabdullah: my point is, that node should not spawn new system processes, rather, those processes should be managed within the node process
05:06 < ningu> sinclair|net: so you want threads? or what?
05:06 < fiws> now we're at the beginning again
05:06 < sinclair|net> no, i don't want threads
05:07 < ningu> I don't see how you can have subprocesses in an OS-agnostic fashion
05:07 < ningu> maybe you can
05:07 < ningu> but windows support has been pushed heavily since 0.6
05:07 < sinclair|net> ningu: from nodes point of view, instead of creating a new system process, it would spawn a thread 
05:08 < deoxxa> > i don't want threads
05:08 < ningu> ok, but what would it actually be?
05:08 < deoxxa> > it would spawn a thread
05:08 < sinclair|net> deoxxa: these are node managed threads
05:08 < deoxxa> > wtf am i reading
05:08 < s5fs> antilogic
05:08 < ningu> at the OS level what would it be
05:08 < sinclair|net> from your point of view, everything would work exactly the same
05:08 < fiws> enjoining your popcorn deoxxa?
05:08 < ningu> imagine I am the OS
05:08 < s5fs> ningu: a unicorn
05:08 < ningu> what would it look like from my point of view :P
05:09 < ningu> I wonder what signals unicorns respond to
05:09 < sinclair|net> ningu: do you use cluster and fork() ?
05:09 < jesusabdullah> okay, a few things: One: libuv uses threads, you just don't access them from javascript. Two: Threads come with a fuckload of problems especially when you arbitrarily mix/match them with events
05:09 < deoxxa> fiws: i've run out :(
05:09 < ChrisPartridge> ningu: SIGHORN
05:09 < ningu> sinclair|net: I know what they are
05:09 < s5fs> jesusabdullah: anyone asking for threads deserves them
05:09 < ningu> although I don't actually know how cluster is implemented
05:09 < ningu> I assume as multiple OS processes
05:09 < jesusabdullah> I'm NO EXPERT but usually at the programming level you choose events or coroutines/threads/etc one or the other
05:10 < sinclair|net> ningu: do you also know that calling fork creates a new system / OS process, as in, it starts a new instance of node?
05:10 < ningu> sinclair|net: of course. fork does that everywhere.
05:10 < ningu> but fork on windows, or fork on classic MacOS, is/was not that simple of a matter, afaik.
05:10 < ningu> i.e. to keep all the semantics the same
05:11 < sinclair|net> ningu: right, well, do you also know that each new process requires a completely new instance of v8, and roughly 7 - 10 mb of memory just to run that process?
05:11 < ningu> I assume you can do a compatibility layer on windows somehow or other
05:11 < mmalecki> memory isn't that much of a concern these days
05:11 < fiws> again. why do you need more processes than cores you have?
05:11 < sinclair|net> ningu: and, can you appreciate that some environments don't let me arbitrarily start new instances of things on the OS
05:11 < ningu> I would be surprised if it did not require a new instance of v8 since it's an independent process
05:11 < mmalecki> unless you do embeeded devices, but then if you're running out of memory, you shouldn't use node
05:12 < mmalecki> sinclair|net: why do you agree to work in such environments?
05:12 < mmalecki> I mean, that's just bullshit, not allowing user to create processes
05:12 < ChrisPartridge> and what such environments are we talking about? 
05:12 < mmalecki> reminds me of old PHP hosting
05:12 < ningu> sinclair|net: sure. but node by design has chosen a very specific concurrency model. that model may not work in resource-poor environments where you want to do something cpu intensive but can't afford to spawn. those are not good environments for node.
05:12 < jesusabdullah> and that's really 100% okay
05:12 < ChrisPartridge> yeah, and if you have a "big application", surely you want control over the environment
05:13 < jesusabdullah> yeah, large "applications" don't really exist insofar as they're almost always multiple programs on some level
05:13 < ningu> weren't there a bunch of presentations with slides from a few years ago showing nginx vs. apache threaded mpm memory usage?
05:13 < sinclair|net> mmalecki: its not about the environment not being cool enough to run node
05:13 < ningu> iirc threads also have a significant memory overhead
05:14 < ningu> sinclair|net: it's not a question of cool enough, it's a question of whether the tool is a good fit for the environment
05:14 < sinclair|net> ningu: considerable less overhead than 10mb per thread
05:14 < syskk> how can i parse a string as an array of program arguments?
05:14 < ningu> if you have to make a hammer into a screwdriver in order for it to work for a particular case, then you shouldn't complain about the design of the hammer. just use a screwdriver.
05:15 < sinclair|net> ningu: its not about that either
05:15 < ningu> syskk: eh? you can do str.split(' ') I suppose
05:15 < jesusabdullah> "ugh this sawzall cuts the most crooked of lines!" "bro wat ur doin"
05:15 < ningu> syskk: not really sure what you are trying to do
05:15 < jesusabdullah> syskk: substack has a library that parses bash-style quoted commands
05:15 < syskk> ningu: this will fail for : ./program "hola world" 
05:15 < mmalecki> I would indeed not recommend using hammer instead of a screwdriver
05:15 < jesusabdullah> syskk: it's handy
05:15 < syskk> jesusabdullah: thanks
05:15 < sinclair|net> jesusabdullah: what is 100% ok?
05:15 < ningu> syskk: then use that module :)
05:16 < syskk> :)
05:16 < jesusabdullah> sinclair|net: the kind of okay that's not half-assed
05:16 < jesusabdullah> completely acceptable, not bad
05:16 < sinclair|net> jesusabdullah: seriously, what did you mean?
05:16 < ningu> jesusabdullah: I think you have confused use with mention
05:16 < syskk> actually I want to require('child_process').exec but redirect stdout to my program's stdout
05:16 < ningu> syskk: use spawn and inherit the fds
05:16 < syskk> it seems i need to use .spawn which uses argument array
05:16 < deoxxa> sinclair|net: there's been a decision made with node to support one style of concurrency and to support it well
05:17 < deoxxa> sinclair|net: that's what he was talking about
05:17 < jesusabdullah> ningu: huh?
05:17 < deoxxa> sinclair|net: instead of trying to do everything, but doing them all equally badly
05:17 < sinclair|net> deoxxa: so, it doesn't need to be bad
05:17 < ningu> jesusabdullah: he didn't mean what does "100% ok" mean ("use"); he wanted to know what thing you claimed was 100% ok ("mention")
05:17 < ningu> whoops I reversed use and mention
05:17 < jesusabdullah> ohhhhhh
05:17  * ningu gives back his degree
05:18 < deoxxa> sinclair|net: "i know you made it red, but you could instead make it blue if you went and stripped all the paint off. you could still keep part of it red as well."
05:18 < jesusabdullah> it's 100% okay that node focuses on a very specific concurrency model that may or may not suit your needs
05:18 < jesusabdullah> that's what I'm trying to say
05:18 < sinclair|net> jesusabdullah: well, it kinda makes node unsuitable in a lot of environments 
05:18 < substack> syskk: https://npmjs.org/package/shell-quote
05:19 < ningu> sinclair|net: so don't use it in those environments.
05:19 < jesusabdullah> sinclair|net: yes it does.
05:19 < jesusabdullah> sinclair|net: I'm saying that's okay.
05:19 < syskk> substack: thanks!
05:19 < deoxxa> sinclair|net: did you know that node doesn't run on symbian os?
05:19 < jesusabdullah> syskk: yeah that's the one
05:19 < jesusabdullah> but deoxa I was going 2 rite symbian app
05:19 < ningu> node was never meant to fit all use cases, although it does fit quite a few
05:19 < substack> > require('shell-quote').parse('./program "hola world"')
05:19 < deoxxa> sinclair|net: also, even more surprisingly, it's really really difficult to use it on an amstrad pc
05:19 < substack> [ './program', 'hola world' ]
05:20 < jesusabdullah> I tried to run it on FC6 once that did not work
05:20 < sinclair|net> jesusabdullah: the thing is, i don't see why it needs to be that way, when running several sub processes from a single node process would make it quite practical 
05:20 < jesusabdullah> sinclair|net: you make it sound so easy
05:20 < jesusabdullah> sinclair|net: I feel like you don't understand the ramifications of what you're suggesting, it's non-trivial stuff
05:21 < deoxxa> jesusabdullah: he's a 6 time hand-waving world champion
05:21 < sinclair|net> jesusabdullah: the things worth doing are hardly ever trivial
05:21 < jesusabdullah> but is it worth doing?
05:21 < ningu> jesusabdullah: out of curiosity what would you say are the most significant ones? it does not sound easy to me, either, but I wouldn't be able to state precisely what the challenges would be
05:21 < jesusabdullah> not everything non-trivial is worth doing
05:21 < sinclair|net> jesusabdullah: well, in this instance, i would say it is worth doing
05:22 < ningu> sinclair|net: speaking of fork, why don't you just fork node and do it then :P
05:22 < ChrisPartridge> sinclair|net: do it, and submit a pull request
05:22 < ningu> or that too
05:22 < sinclair|net> ningu: id sooner go back to .net thanks 
05:22 < jesusabdullah> ningu: well I'm far from an expert unfortunately but I do know that threads mean shared memory which means that combining an event loop, which usually runs on a single process, can lead to bad things
05:22 < ningu> jesusabdullah: so there is no in between? no spawned process that is its own process but shares something with the parent?
05:23 < s5fs> jesusabdullah: you could run a separate event loop on each thread
05:23  * sinclair|net looks at his task manager, with 100's of node processes running
05:23 < jesusabdullah> ningu: it is also my understanding that v8 always runs in a single thread, and creating a new v8 is enough of an overhead that you have to start asking if it's really worth it
05:23 < s5fs> you could roam the countryside sleeping in parks
05:23 < sinclair|net> jesusabdullah: well, it should be possible to look at this another way
05:23 < jesusabdullah> ningu: not an expert, though I believe webworkers might be a more doable api
05:23 < jesusabdullah> sinclair|net: the answer is easy. Write your thing that has this problem in not-node
05:24 < ningu> I know a place in SF where you can pick up migrant webworkers
05:24 < jesusabdullah> also sinclair|net you just said it wasn't worth it to you to implement this, why do you think it's worth other peoples' time?
05:24 < sinclair|net> jesusabdullah: i have written things of this nature in non-node platforms tho
05:24 < jesusabdullah> as it should be
05:24 < fiws> sinclair|net, do you try to do cpu intense stuff with node?
05:24 < sinclair|net> fiws: not if i can avoid it
05:25 < jesusabdullah> speaking of: Even if you got threading in node, you'd still have the v8/c boundary problem
05:25 < jesusabdullah> which I think is honestly much more significant in terms of speed blockage
05:25 < sinclair|net> fiws: the thing is, you can do heavy lifting things in node now, in child_processes
05:25 < oti8> I have a node.js/socket.io/mongo server for a multi-player game and want to add chat. Any module suggestions?
05:26 < ningu> oti8: hmm good question, I would just search npm
05:26 < sinclair|net> fiws: it makes sense to push heavy lifting out to child processes, and have a queue in front
05:26 < ningu> so many people do chat stuff there must be something
05:26 < fiws> node is not good for cpu intense stuff
05:26 < ningu> fiws: depends what you are doing, but if you spawn another process it should be ok
05:26 < ChrisPartridge> oti8: just relay the chat messages via socket.io to connected clients?
05:26 < ningu> doing it in another language would be fine too obviously
05:27 < sinclair|net> fiws: and, if you accept that "all the things" should have queues in front, then you have options in terms of processing things off that queue, in nodes case, spinning up new OS instances
05:27 < oti8> there's multiple pages of 'chat' results on npm. anyone have experience with any?
05:28 < jesusabdullah> why are you spinning up more than <# of processors> jobs?
05:28 < fiws> ^ +1
05:28 < jesusabdullah> How is this different from dispatching jobs to some other worker api?
05:28 < jesusabdullah> I mean, why not just use dnode piped over stdio for worker and child and call it a day? That's pretty easy
05:28 < jesusabdullah> round robin the requests
05:28 < jesusabdullah> not too bad
05:29 < sinclair|net> fiws: the difference is, i can spin up more processes than i have CPU's and still be fine
05:29 < sinclair|net> i could spin up several hundred processes
05:29 < fiws> u can, but it makes no sense
05:29 < sinclair|net> fiws: i run hundreds of processes on my machine, im not limited to 16
05:29 < sinclair|net> fiws: node or otherwise
05:30 < ningu> you still haven't said why this is (1) necessary or (2) advisable
05:30 < sinclair|net> fiws: i can also have more than 16 chrome browser windows open at any given time
05:31 < sinclair|net> and lets look at chrome for a second
05:31 < sinclair|net> chrome does not spin up new OS instance of chrome every time i open a tab
05:32 < sinclair|net> that would be crazy, however, in node js's case, everyone things that's fine
05:32 < sinclair|net> (thinks
05:33 < sinclair|net> for each new tab in chrome is 100k, not 10mb
05:34 < fiws> wut?
05:34 < sinclair|net> fiws: ?
05:36  * ningu would rather read about the sequencing of the Norway spruce genome
05:36 < sinclair|net> fiws: what i am trying to say is chrome is managing its processes internally, it is not creating new instances of chrome every time i open a tab
05:37 < sinclair|net> fiws: in my opinion, it would be great if node did the same on child_process.fork()
05:38 < sinclair|net> fiws: ok?
05:40 < sinclair|net> ningu: hello
05:43 < sinclair|net> ningu: in terms of this being advisable and preferable, 1) it means that i use less memory but get all the benefits of spawning new OS processes 2) system administrators can assign policies to a single node process, not several hundred in the current case were i am forking new instances. 3)  PaaS environments may not let me run new OS instances, (i think heroku is like that)
05:44 < sinclair|net> ningu: i did hear that heroku is actually charging per node instance, so you are actually paying for a feature of node that should be implicit to the platform.
05:44 < sinclair|net> that is to say, you should be able to run sub processes within the current node instance, not outside
05:46 < ningu> well, I can't speak for heroku's billing model
05:46 < ningu> the actual questions of how this would be implemented are the only way to answer the question, really
05:46 < ningu> someone who understands v8 well would be able to say
05:46 < syskk> does node use threads internally? there's something weird happening with vim
05:47 < ningu> syskk: for some things, e.g. file operations
05:47 < sinclair|net> ningu: i still think it is important to be able to spin up new OS instances, but its just as important (if not more so) to be able to spin up internal processes
05:47 < syskk> im really trying to understand what's going on … im trying to run my script from vim : !node script.js
05:47 < sinclair|net> anyway, im sure that feature will arrive, one day
05:47 < syskk> and just after i call fs.fileExistsSync(file) { console.log('test') } … there is no output in my vim window
05:48 < syskk> but it works if my console.log is before the fs.existsSync call
05:49 < syskk> it also outputs test if i run it from a shell window
05:49 < syskk> im not sure if its a problem with my program or with vim
05:50 < ChrisPartridge> syskk: it's fs.existsSync(), and it returns a value, as its synchronous, no callback
05:50 < syskk> I know… everything works fine when i use it from my bash window.. but with vim, no output is displayed
05:50 < syskk> veryyy weird
05:50 < sinclair|net> jesusabdullah: what is the v8/c boundary problem ?
05:51 < jesusabdullah> sinclair|net: It's time-consuming to change context from v8 to c, or from c to v8
05:51 < jesusabdullah> sinclair|net: because v8 made sacrifices there to be fast in pure-js land
05:52 < jesusabdullah> sinclair|net: so if you're not careful to minimize these context changes it can get bad
05:52 < sinclair|net> jesusabdullah: are you referring to context switching, marshaling ?
05:53 < ChrisPartridge> syskk: not sure, maybe related to vims environment? working directory?
05:53 < sinclair|net> jesusabdullah: context switching in a purely thread sense, or simple going from js to c and back again?
05:53 < syskk> ChrisPartridge: no… it's an absolute path
05:53 < sinclair|net> *simply
05:54 < syskk> ah shit damn it i think u are right
05:55 < ChrisPartridge> :)
05:56 < jesusabdullah> sinclair|net: the latter, simply going from js to c and back
05:56 < sinclair|net> jesusabdullah: what about things like calls made to fs, or net, surely they are jumping between JS and C
05:56 < sinclair|net> how is it any different ?
05:57 < sinclair|net> jesusabdullah: i have implemented scripting languages (including V8) on other languages, and marshaling is always going to have some cost 
05:58 < sinclair|net> its a cost i usually ignore as it is in the microseconds 
06:00 < syskk> my process.argv is [ '/usr/local/bin/node',
06:00 < syskk>   '/usr/local/bin/node-makeprg',
06:00 < syskk>   'dev/node-makeprg/cli.js' ]
06:00 < syskk> since my script is called with node
06:00 < jesusabdullah> sinclair|net: it's significantly higher for v8 than it is for, say, python, and yes if you're careful to not have a ton of them it can be well worth it
06:00 < syskk> is there a safe way to know where the actual arguments of my script start?
06:00 < syskk> considering it doesnt know how it is called
06:00 < syskk> will it always start at 2?
06:01 < sinclair|net> jesusabdullah: you are familiar fork right? 
06:01 < sinclair|net> i assume you are
06:01 < jesusabdullah> I mean
06:01 < jesusabdullah> yes
06:01 < jesusabdullah> hey harth
06:01 < ningu> I prefer spork
06:01 < jesusabdullah> I prefer plugging my ears and shouting "lalalalala I can't hear you lalalalala"
06:02 <@Nexxy> syskk, process.argv
06:02 < sinclair|net> i wonder the costs of spawning a new OS process, redirecting stdio and stout of the child process, and spawning a new process thread, and having that thread emit on the current process stdio / stout. 
06:02 < ningu> so in express I have a route with path '/foo/:param' and if I pass a colon in the param without url encoding it comes through fine.
06:03 < ningu> in restify if I do that, it doesn't even match the route. any idea what's going on there?
06:03 < syskk> Nexxy: I know.. just wondering if its safe to assume actual arguments start at process.argv[2] since 0 will be node and 1 will be the script
06:03 < harth> jesusabdullah: hello
06:03 < ningu> syskk: yes
06:03 <@Nexxy> yup
06:03 < ningu> use slice if you want just your script args
06:04 < ningu> in their own array, I mean
06:04 <@Nexxy> optimist makes things easier
06:04 < ningu> ah, right
06:04 < ningu> hmm, there's an ars technica story on asm.js speed
06:06 < ChrisPartridge> ningu: probably something to do with the regex restify uses
06:07 < ningu> ChrisPartridge: yeah, I might delve into the code
06:07 < ningu> I assume the colon comes through fine in the actual url path
06:07 < ningu> but it isn't actually a valid url, right?
06:07 < ChrisPartridge> seems plausible
06:07 < ningu> I don't know how strict one should be about what urls to accept, though
06:07 < ChrisPartridge> if its urlencoded, it works?
06:07 < ningu> yeah
06:08 < ningu> this is for an api and I don't want people to be punished for not being perfect if I can handle it on the other end
06:08 < ChrisPartridge> how many people are going to be manually typing urls with colons in it?
06:08 < ningu> maybe not manually
06:08 < ningu> but this is literally the only thing in the api that might need to be urlencoded
06:08 < ChrisPartridge> if its programattic, then they should be urlencoding anyway
06:09 < ningu> so it would add an extra programmatic step
06:09 < ningu> everything else is alphanumeric
06:09 < patrick_v_> working with setTimeout, I wonder why it returns an object
06:09 < patrick_v_> instead of the integer that the docs talk about ...
06:10 < patrick_v_> anyone knows?
06:11 < ChrisPartridge> patrick_v_: it's not an integer, it's just an object you can use to pass to clearTimeout
06:12 < ChrisPartridge> i guess its just worded poorly
06:12 < deoxxa> it doesn't say anything about integers
06:12 < deoxxa> it says "opaque value" iirc
06:12 < patrick_v_> timeoutId
06:13 < patrick_v_> I guess I wasn't expecting an ID to be an object
06:13 < someprimetime> I'm making a threaded comment system and right now I just store one level of comments. some have parent_ids referencing another comment's object Id.. those that have those are considered child comments 
06:13 < someprimetime> should I nest them in each entry in my collection?
06:14 < someprimetime> or do what I'm doing now
06:14 < syskk> in case anyone interested, here's what i was working on https://github.com/olalonde/node-makeprg seems to work now
06:14 < someprimetime> and just create a new entry for each comment
06:14 < someprimetime> be it a threaded one or not
06:14 < timoxley> someprimetime what db?
06:14 < someprimetime> timoxley: mongo w/ mongoose
06:14 < timoxley> someprimetime there's good discussion on this exact topic in "50 tips and tricks for mongodb"
06:14 < timoxley> book
06:14 < someprimetime> thanks timoxley 
06:15 < timoxley> someprimetime this fella http://shop.oreilly.com/product/0636920019893.do
06:15 < someprimetime> nice I think I have a safari books subscription
06:19 < someprimetime> timoxley: 
06:19 < someprimetime> so it appears I should store the children comments as a nested array
06:20 < someprimetime> within each parent comment
06:20 < someprimetime> easy pzy
06:21 < timoxley> someprimetime cool
06:21 < someprimetime> thanks
06:21 < someprimetime> that makes me have to do less munging when pulling in the comments and having to do an artificial "join"
06:22 < someprimetime> pretty much was using underscore's _.where to pull out all those parent comments and then append to each record from the collection
06:27 < fiws> someprimetime, why not lodash?
06:27 < someprimetime> fiws: cause I don't know what that is
06:27 < fiws> a better underscore
06:28 < fiws> http://lodash.com/
06:28 < someprimetime> ugh it's so difficult to keep up with all these libraries
06:28 < someprimetime> why should I use this over underscore?
06:28 < someprimetime> this reminds me of zepto vs. jquery
06:29 < timoxley> someprimetime it doesn't matter. just pick one.
06:29 < jesusabdullah> it's supposed to be moar fasters
06:29 < someprimetime> i've built a lot of this site using underscore so if I used something else I'd need a good reason
06:29 < jesusabdullah> other than that I believe it's compatible
06:29 < fiws> http://lodash.com/benchmarks
06:29 < someprimetime> ah well I use underscore at work so it's convenient for me to use it for my personal stuff as well
06:29 < jesusabdullah> someprimetime: it seems to have been born out of ideology to me, not the worst thing really but maybe not compelling either
06:29 < jesusabdullah> someprimetime: I think it's like 100% compatible
06:30 < someprimetime> cool well at least it's something interesting to look at if nothing else
06:30 < someprimetime> thanks 
06:31 < jesusabdullah> someprimetime: indeed
06:35 < someprimetime> bbiaf
06:36 < Havvy> Be back in a fire?
06:38 < ChrisPartridge> Havvy: come on mate, don't give him the 3rd degree ;)
06:39 < Havvy> I...I can't match the pun. :(
06:41 < ChrisPartridge> you have been exPUNged :)
07:04 < trickjay|home> anyone here who can help me with javascript?
07:04 < nightfly> probably :p
07:04 < syskk> ask your question, dont ask to ask <--- IRC's #1 rule
07:04 < trickjay|home> :)
07:05 < trickjay|home> i need help with my javascript snake game i have created two "food" pieces but now nothing shows on the screen such as this:
07:05 < trickjay|home> http://jsfiddle.net/WSy9C/14/
07:08 < fiws>  var length = 11; can u do that?
07:08 < trickjay> yes it worked
07:08 < trickjay> when i had 1 food piece
07:08 < trickjay> but now with two nothing works pretty much u can see the two blocks and the snake in the black cube
07:09 < syskk> you'll have to be more specific ;) also, since it is unrelated to Node, you might want to ask in #javascript 
07:09 < trickjay> if u hold up arrow 
07:09 < trickjay> inside the canvas box
07:09 <@Nexxy> do they answer questions in ##javascript now?
07:09 < syskk> trickjay: have you tried putting some debugger; statements and looking in chrome inspector what's going on?
07:10 < trickjay> no im using firefox so i havent tried anything with chrome
07:10 < syskk> Nexxy: I don't think :D
07:10 < syskk> there's probably a debugger in firefox.. or maybe use firebug
07:10 <@Nexxy> syskk, lol yeah I didn't think so
07:10 < fiws> for (var i = 0; i < array.length; i++)  in check_collision
07:10 < fiws> throws because array is undefined
07:11 < trickjay> ooh that should be orm_arry.length i would believe 
07:21 < trickjay> it still doesnt work when i have changed the for (var i = 0; i < orm_array.length; i++) what should i do?
07:22 < fiws> check_collision(x, y, x2, y2, array)  has 4 params
07:22 < fiws> but in line 92 you're calling it with 3
07:22 < fiws> *5
07:22 < fiws> has 5 params *self-facepalm*
07:23 < Qalqi> is there a way to change bahaviour of node_modules used by my projects without actually changing their source code?
07:23 < trickjay> hmm i see 
07:24 < trickjay> i will look into that is there anything else in it that i should change?
07:24 < fiws> don't know. i'm not doing a full code review :P
07:24 < trickjay> :(
07:25 < trickjay> just gotta hate being noob in programming
07:25 < fiws> use .forEach
07:25 < Qalqi> isaacs: can you please help me on this,please?
07:26 < trickjay> how u mean? with .forEACH
07:26 < boffbowsh> ["my", "Array"].forEach( function(item) { console.log(item) } );
07:27 < trickjay> :O
07:27 < fiws> Qalqi, maybe overwrite stuff? require('bla').gonnaChangeyou = function(). but that's a bit odd
07:30 < syskk> > Assertion failed: (!!(events & UV__IO_READ) ^ !!(events & UV__IO_WRITE)), function uv__stream_io, file ../deps/uv/src/
07:30 < syskk> unix/stream.c, line 732.
07:30 < syskk> anyone knows what this error means?
07:31 < sheldonh> where can i find documentation on the object that http receiver callbacks tend to call "req" in connect, express, http, etc?
07:32 < boffbowsh> sheldonh: http://nodejs.org/api/http.html#http_http_incomingmessage
07:35 < sheldonh> boffbowsh: amazing. i looked at it and thought "nope". as soon as someone else says so with authority, it suddenly looks like the right thing. thanks :)
07:39 < Qalqi> sheldonh: hi,sheldon cooper
07:39 < Qalqi> sheldonh: i am big fan
07:40 < sheldonh> Qalqi: thanks. whenever i get online, there are always a few anxious moments as i worry whether someone will bring up the sheldon thing. now i can relax :)
07:40 < patrick_v_> isn't sheldon just a regular first name?
07:41 < patrick_v_> though I'm not sure it's quite that common
07:42 < fiws> patrick_v_, http://www.wolframalpha.com/input/?i=sheldon
07:43 < patrick_v_> haha yeah a few every now and then
07:44 < patrick_v_> mine is more of a 60s-70s name
07:44 < patrick_v_> http://www.wolframalpha.com/input/?i=patrick
07:44 < patrick_v_> ie. swayze
07:44 < [AD]Turbo> hi there
07:44 < syskk> thats pretty cool
07:44 < syskk> is there an api for WA?
07:45 < syskk> would be cool to see the likelihood of nationality based on name
07:45 < fiws> yes there is an api
07:45 < trickjay> anyone who could bother taking something like 20min and go through my code it shouldnt be much problems in it?
07:46 < syskk> I'll do it for 1 btc :) 
07:46 < trickjay> btc?
07:46 < fiws> lol thats 120$
07:46 < syskk> haha
07:46 < trickjay> :(
07:47 < syskk> i know next to noghtin about canvas so i probably wouldn't be much help anyways
07:47 < trickjay> no need with help of canvas
07:47 < trickjay> only js
07:47 < fiws> thats 6$ per minute
07:48 < trickjay> the canvas is done what i need help with is to get my damn snake to show and not just flash when u update the game
07:48 < sheldonh> is it possible to get connect-restreamer to support both application/json and application/x-www-form-urlencoded? i'm using it to work around connect.bodyParser() middleware stealing req.body from http-proxy, but it seems to be doing a JSON.stringify on the body, when it should be doing querystring.stringify
07:48 < boffbowsh> This sounds like client side?
07:48 < boffbowsh> There's probably more relevant channels than here
07:49 < fiws> make it multiplayer and we can talk again :P
07:49 < trickjay> ye i started to learn javascript like 2-3 weeks ago
07:49 < trickjay> not gonna happen atm
07:49 < trickjay> xDD
07:50 < boffbowsh> Try ##javascript
07:50 < trickjay> cant write in there and the register bugged up for me
07:50 < trickjay> so no use there already tried
07:50 < trickjay> :(
07:50 < basss> hello, i'm trying to add a dropdown menu with numbers from 0->365 in express. I cant find a way to do it
07:51 < stagas> trickjay: where's your code
07:51 < sheldonh> hmmm, rephrase: can i make connect-restreamer to JSON.stringify when content-type is application/json, but querystring.stringify when it's application/x-www-form-urlencoded?
07:51 < trickjay> stagas: http://jsfiddle.net/WSy9C/15/
07:51 < Havvy> Complain in #freenode if your registration didn't work.
07:51 < Havvy> basss: Are you using jade templates?
07:51 < basss> Havvy: yeah
07:52 < Havvy> Then put the dropdown in there.
07:52 < basss> Havvy: u mean a "select" object ?
07:53 < Havvy> The dropdown menu is just HTML.
07:53 < Havvy> An option with a bunch of selects. Selects can be made with a for loop.
07:53 < basss> Havvy: i need to populate it with 365 elements, couldn't do a for loop in jade, i could only do (for in)
07:54 < Havvy> http://stackoverflow.com/questions/8728637/loop-in-jade-engine
07:54 < ChrisPartridge> for loop should work fine basss, perhaps gist your template
07:54 < basss> Havvy: okay ill check it out
07:55 < fiws> for 365 elements you might wanna check out http://ivaynberg.github.io/select2/
07:55 < stagas> trickjay: it's unreadable, fix the whitespace/indentations and use english :/
07:56 < basss> Havvy: works for me, thanks :)
07:56 < trickjay> define indentations
07:56 < syskk> anyone use nvm? it uses the correct node version when im in my zsh shell , but when I try :!node -v from vim, it uses my old version of node
07:57 < fiws> trickjay, still the same problem
07:58 < fiws> check_collision(x, y, x2, y2, array) takes 5 params. but in line 92 you are calling it with 3
07:58 < fiws> -> array is undefined so array[i] won't work
07:59 < trickjay> well i thought i needed 5 since i have 2 food pieces
07:59 < trickjay> also its wierd that the array[i] is undefined coz before it wasnt when i had 1 food piece ill take a look at how i wrote it then think i have a draft of it somewhere :D
07:59 < trickjay> translating it all to english
07:59 < fiws> check_collision(x, y, x2, y2, array)  --- check_collision(nx, ny, orm_array)
08:00 < trickjay> nonono i have added x2, y2
08:00 < trickjay> in it 
08:00 < trickjay> think u look in outdated version
08:00 < fiws> then 15 is not the newest version
08:00 < trickjay> sry i was wrong
08:01 < trickjay> i had added it
08:01 < trickjay> but removed it coz it didnt do anything at that moment dunno why :P
08:01 < stagas> trickjay: skapa_mat() has a function definition inside it that's completely off and in other places. treat js as strict whitespace
08:02 < trickjay> what u mean with whitespace never heard that before
08:02 < stagas> trickjay: the spaces that everything is aligned
08:02 < stagas> visually
08:02 < trickjay> aah
08:02 < trickjay> i see
08:05 < ChrisPartridge> syskk: nvm puts some stuff in your $HOME/.profile - might need to make sure vim knows about that
08:05 < ChrisPartridge> i don't use vim, so not sure how you would go about that
08:05 < syskk> ok
08:05 < syskk> since i start it from my shell i assumed it would inherit my shell's environment variables
08:06 < syskk> anyways created an issue on the tracker
08:06 < trickjay> heres the latest version still havent fixed some stuff u pointed out but maybe easier to understand now
08:06 < trickjay> http://jsfiddle.net/WSy9C/18/
08:09 < fiws> trickjay, use some sort of dev-tools.  foodh is not defined 
08:10 < trickjay> it was supposed to be food not foodh
08:11 < trickjay> changed it back :D
08:11 < fiws> firefox or chrome?
08:11 < trickjay> firefox
08:11 < fiws> ctrl +shift+k
08:11 < stagas> trickjay: create_food() is still wrong
08:12 < syskk> mmm set shell=zsh seems to be what i need
08:12 < syskk> except it doesnt execute my nvm script since its non login shell or something
08:12 < trickjay> i moved the paint_cell outside of it now but feel clueless in where to write the stuff atm
08:14 < nathanbz> whats a good way to store database connection information
08:14 < nathanbz> lke should I have a separate file called config.js
08:15 < nathanbz> and include it ?
08:16 < carlcalderon> good question
08:16 < carlcalderon> are you worried that people will get access to it?
08:16 < fiws> thats how i did it. there also is https://github.com/lorenwest/node-config
08:16 < nathanbz> I more just want to separate it from my source control
08:16 < nathanbz> so yes im worried ppl will access it
08:17 < stagas> trickjay: you need to read your code closely each line and be able to answer "what is the reason this line exists"
08:17 < carlcalderon> if people can get access to you codebase it's hard to prevent things like this to be "public"
08:17 < stagas> trickjay: everything will be solved from there on its own
08:17 < trickjay> aah ok
08:17 < trickjay> im going through it ll
08:18 < trickjay> all
08:18 < stagas> preferable on a real editor, jsfiddle sucks :P
08:18 < nathanbz> carlcalderon , i don
08:19 < carlcalderon> nathanbz: you could include the config in your .gitignore and recreate the file upon deploy
08:19 < nathanbz> d want people to access it 
08:19 < trickjay> im changin in notepad++
08:19 < nathanbz> carlcalderon thats what I was thinking
08:19 < nathanbz> of doing
08:19 < trickjay> just adding the changed into the jsfiddle 
08:19 < trickjay> so i can post an update version if i need to :D
08:20 < carlcalderon> nathanbz: then I would suggest you make a json file with the config, add the file to the .gitignore and read from it in your node code
08:20 < nathanbz> yep :)
08:20 < nathanbz> thats basically what I normally do in other languages
08:21 < carlcalderon> it's basically the best way to go
08:21 < carlcalderon> just note clearly how you structure the json so it's easy for you in the future to replicate it
08:23 < stagas> trickjay: and don't be afraid to scrap it all and refactor it instead of banging your head on the wall :) you usually know more after you've written something so it's easier to rewrite it "the right way"
08:23 < carlcalderon> stagas: amen!
08:24 < stagas> :P
08:24 < sheldonh> answering my own question re content-type-sensitive connect-restreamer: https://gist.github.com/sheldonh/5633485
08:25 < carlcalderon> off-topic: irc client for osx... and dont you dare say colloquy
08:25 < trickjay> ye prolly however it shouldnt be that difficult to get the damn food and snake to show itself again >( well im onna compare this one with my first one and make it identical with that except i add for the 2nd food piece i think xD
08:26 < deoxxa1> carlcalderon: i use adium
08:26 < deoxxa1> seems to get the job done
08:26 < boffbowsh> irssi
08:26 < deoxxa1> when my wireless isn't falling over, anyway
08:27 < carlcalderon> irssi!!! thanks!
08:30 < booyaa|foo> carlcalderon: limechat + ircrelay = crazy delicious
08:30 < booyaa|foo> ircrelay = pay for znc bouncer service
08:30 < booyaa|foo> or irssi if you're textually incline
08:30 < booyaa|foo> prefcet for travelling coders
08:31 < carlcalderon> thanks, i was looking for something like irssi, will give it a try
08:31 < booyaa|foo> bonus of limechat is that images get inlined
08:32 < booyaa|foo> this can be a blessing (kittehs) or curse (goatse)
08:32 < carlcalderon> ;)
08:32 < booyaa|foo> pretty certain i installed irssi using homebrew
08:33 < nathanbz> shouldn't this work: require('./config.js');
08:33 < carlcalderon> thanks, my mac-ports have been messed up for a while
08:33 < nathanbz> I have a file called config.js
08:33 < nathanbz> but it tries to load a module
08:33 < carlcalderon> you dont need the .js
08:33 < carlcalderon> yes, it should be a module
08:34 < trickjay> ok so all the code in put back to where it was from beginning but still doesnt work prolly coz i have forgotten to define something somewhere -.-
08:34 < trickjay> http://jsfiddle.net/WSy9C/21/
08:34 < nathanbz> I was just trying to copy and paste my config settings into a js files ;(
08:34 < carlcalderon> ;P
08:35 < carlcalderon> food.round and food.random seems off
08:35 < trickjay> how so?
08:35 < carlcalderon> trickjay: shouldn't it be Math?
08:36 < trickjay> ye it should omg
08:36 < trickjay> how could i miss that
08:37 < carlcalderon> . . .
08:37 < trickjay> shame that didnt solve my problem tho
08:37 < trickjay> :(
08:37 < trickjay> well it would've been a problem is anything showed up at all on my screen now
08:39 < carlcalderon> you are refering to x2 and y2 in pain_cell, but in some cases never proved them
08:39 < carlcalderon> line 94
08:40 < carlcalderon> maybe you should add defaults to pain_cell method?
08:40 < trickjay> how u mean defaults ?
08:40 < carlcalderon> x2 = x2 || 1.0;
08:40 < carlcalderon> or somehing smarter
08:41 < carlcalderon> because that will give 1 if you pass 0
08:41 < carlcalderon> http://stackoverflow.com/questions/6486307/default-argument-values-in-javascript-functions
08:41 < trickjay> thx
08:43 < Havvy> There's no difference between 1.0 and 1.
08:44 < sheldonh> in an http server, if you're not using sessions, but want a property available in subsequent handling of a request, what should you attach your property to? right now, i'm just doing req.user = 'foo'
08:46 < sinclair|net> Havvy: this community should be pushing for the ability to run sub node processes in proc, not as seperate instances of node.
08:46 < booyaa|foo> nathanbz: are you just trying to hide your api credentials is or is this server config stuff? if the later you might find it better to use something like nconf so you can switch confs depending on your node_env
08:47 < sinclair|net> Havvy: hows things
08:47 < sinclair|net> ?
08:47 < Havvy> sinclair|net: The community should be pushing for things it needs. Only you seem to be needing that.
08:47 < Havvy> Otherwise things are slightly better than a few hours ago.
08:48 < sinclair|net> Havvy: well, its not the only thing node needs, and i think other people need what i describe 
08:48 < sinclair|net> but whatever, node is node
08:49 < fiws> aaah not again
08:50 < sinclair|net> fiws: oh stop that, pointing out things where node could be better is not a troll on node. rather, it would be nice in progressing the technology forward
08:51 < sinclair|net> the first step is addressing there is a problem, not pretending it isn't there. 
08:51 < fiws> node is open source. implement it!
08:51 < sinclair|net> it sure is
08:52 < fiws> also because i was bored i looked up the logs and you are having this conversation ~2 per day since 3 days
08:52 < fiws> file a bug on github
08:52 < sinclair|net> fiws: well, this and varying other conversations
08:59 < Havvy> :/
08:59 < Havvy> Browsers freezing up my entire system.
09:00 < trickjay> aaah fuck it i need this to be turned in tomorrow im gonna send in with 1 food piece and send the draft on one iwth 2nd but not rly working
09:00 < ming> Havvy: chrome has a habit of freezing up on me lately 
09:02 < Havvy> So glad I saved my dwarf fort just before.
09:40 < sWORDs> nodejs.org and npmjs.org down?
09:40 < fiws> no
09:40 < sWORDs> PING nodejs.org (165.225.133.150): 56 data bytes
09:40 < sWORDs> Request timeout for icmp_seq 0
09:41 < fiws> 64 bytes from 165.225.133.150: icmp_req=2 ttl=235 time=113 ms
09:41 < sWORDs> Thanks for checking! Something wrong between here and there then.
09:45 < sWORDs> Kinda weird, each and every other site I can think off works
09:46 < whyhankee> already loved nodemon for writing servers, just found out that "nodemon --exec 'tap --tap' test/test-something.js" does what i really missed :P
09:46 < h22> sWORDs: joyent west region is down.. maybe because that?
09:47 < h22> ^ was
09:47 < whyhankee> (it reruns my tests when i save changes to source or tests)
09:48 < syskk> any recommended library for testing my REST server?
09:48 < syskk> im tempted to use vows
09:52 < sWORDs> h22: I've ssh-ed to another location (40 miles) with a different provider and there it does work. So clearly something with my provider
09:53 < substack> new stream handbook section https://github.com/substack/stream-handbook#html-streams-for-the-browser-and-the-server
09:57 < phrearch> aha nice manual
09:59 < phrearch> im still puzzled where i can use streams for in a webapp :)
10:03 < substack> phrearch: read the section I just linked
10:03 < substack> talks about exactly this
10:06 < phrearch> substack: yea, ill give that a try. can i drop and replace ws with shoe?
10:06 < substack> I'm not sure, maybe?
10:06 < substack> no, use max ogden's thing instead
10:07 < substack> this one https://npmjs.org/package/websocket-stream
10:07 < phrearch> thanks for the tip
10:09 < sbarow> substack: cool link
10:09 < phrearch> wondering how routing would work with streams
10:10 < phrearch> but ill read up first :-)
10:11 < stagas> substack: wish the streams api was more functional, like `concat(render(stream))` instead of all the .pipe() calls
10:11 < substack> stagas: var concat = require('concat-stream')
10:11 < substack> stream.pipe(concat(function (err, body) { ... }))
10:11 < substack> mbalho: why does concat-stream have an `err` param?
10:12 <@mbalho> stderr
10:12 < substack> but...
10:12 < stagas> substack: yeah but I'd like concat(stream) not stream.pipe(concat...
10:12 < substack> streams only carry 1 data channel
10:12 < substack> there is no secondary channel
10:12 <@mbalho> it does this.on('error', cb)
10:12 <@mbalho> cause streams in node emit error events
10:13 < substack> does it listen on the stream that is piped into it?
10:13 < substack> for error data
10:13 <@mbalho> it just binds an error event in case an error propagates up to it
10:13 < substack> mbalho: wait this doesn't make any sense https://github.com/maxogden/node-concat-stream/blob/master/index.js#L9
10:13 < substack> it listens on *itself*
10:14 < substack> nothing it going to emit errors on the stream itself
10:14 <@mbalho> substack: wont you get an uncaught error error if you dont bind .on('error') on a stream?
10:14 < substack> if it's going to have an err param it should this.on('pipe', function (src) { src.on('error', cb) })
10:15 < substack> but it really shouldn't even do that I think
10:15 < substack> best to handle that elsewhere
10:15 < substack> mbalho: yes but nothing is going to emit errors on the *concat* stream
10:15 < substack> the errors are emitted on like the fs.createReadStream() stream
10:15 < substack> so those errors go uncaught with what you have
10:16 <@mbalho> oh i thoguht that if you pipe A to B and A emits an error then B will receive it
10:16 < substack> I think it would be best just to drop that err thing altogether since it doesn't do anything
10:16 < substack> nope, pretty sure that is not the case
10:16 < substack> but I'll test it
10:17 < substack> yep
10:17 < substack> > require('fs').createReadStream('not_a_real_file').pipe(require('concat-stream')(function (err, src) { console.dir([ err, src ]) }))
10:17 < substack> crashes as expected without the cb firing
10:18 < substack> because pipe() doesn't handle propagating errors down a pipeline
10:18 <@mbalho> oh
10:18 < substack> so the err param is basically always superfluous
10:19 <@mbalho> substack: well alrighty then! ill take it out
10:19 <@mbalho> substack: hmm https://github.com/maxogden/node-concat-stream/commit/d48c1c3306534b34de7c9e2687753dea7fd95718
10:19 < substack> just bump the major if you do
10:20 <@mbalho> substack: i seem to remember needing it for some reason
10:20 <@mbalho> substack: but i dont remember now :(
10:20 < substack> having an empty 'error' listener wouldn't be so bad
10:21 < substack> it's just the cb(err) part
10:21 <@mbalho> yea i can just re-emit an event
10:22 < standoo> hello
10:22 < substack> why would you need to re-emit?
10:22 <@mbalho> or actually i dont need to do anything
10:22 < substack> yes
10:22 < standoo> the famous substack is here
10:22 < substack> WHERE
10:22 < standoo> you
10:22 < standoo> you have quite a few popular nodejs modules
10:23 <@mbalho> npm publish is free, anyone can do it
10:23 <@mbalho> so really substacks achievements arent that impressive
10:23 < substack> I dislike my popular modules the most.
10:23 < standoo> why so?
10:24 < substack> they are big and solve messy problems
10:24 < sWORDs> Is there a npm mirror?
10:26 <@mbalho> substack: published concat-stream 1.0.0
10:26 < substack> \o/
10:37 < stagas> substack: yup this does it https://github.com/stagas/fun-stream :)
10:39 < substack> well, I'm not going to use it
10:39 < substack> but whatevs
10:39 < stagas> hahah
10:39 < substack> I like .pipe()
10:40 <@Nexxy> that should be a t-shirt
10:40 < substack> Ceci n'est pas une .pipe()
10:40 < substack> pretty sure I've tweeted that at some point
10:41 < substack> https://twitter.com/substack/status/249564602403274752
10:42 < stagas> the cool thing is it's still compatible with the old interfaces
10:42 < stagas> it has .pipe
10:42 < stagas> but it's also functional
10:46 < fiws> how can i get the hex after piping into a sha Hash? http://hastebin.com/tihodaxolo.js
10:53 < sheldonh> i don't suppose it's a known problem that using http.request() breaks subsequent attempts to http-proxy?
11:03 < foofoobar> Is it possible to deactivate the "colors" which are outputted in the console when running an express.js app?
11:03 < foofoobar> Because my terminal has the same color for the background and the file name, so I cant see the file name ..
11:05 < fiws> foofoobar, http://www.senchalabs.org/connect/middleware-logger.html
11:12 < foofoobar> fiws: thanks, will have a look at this
11:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:35 < dch> substack: I don't think that word in french means what you think it does, unless you intend the pun.
11:36 < adrianlang> dch: http://en.wikipedia.org/wiki/The_Treachery_of_Images
11:38 < mackwic> Hello folks
11:40 < dch> adrianlang: http://www.orbilat.com/Languages/French/Vocabulary/French-Uncensored.html 99% of french people will not think of Magritte when you say this. Sadly.
11:46 < rynkan> is v0.11.2 recomended to run?
11:51 < booyaa|foo> what node?
11:51 < booyaa|foo> no that's the unstable version
11:52 < booyaa|foo> still to v0.10
11:56  * sinclair|net is in awe of the insights of Microsoft sometimes
11:58 < sinclair|net> anyone who isn't completely against .net want to talk a bit about something interesting i found in the Task<T> api, that would be ace to see in node?
11:58 < sinclair|net> something that could be done with ES6 proxies 
11:58 < sinclair|net> any takers ?
11:59 < sambarino1> i dont know what Task<T> is :P
11:59 < sambarino1> or ES6 proxies for that matter
11:59 < sambarino1> but i am looking at integrating .net and nodejs code
12:00 < sinclair|net> basically, Task<T>is just a JS Promise 
12:00 < sinclair|net> those, a lot more advanced
12:00 < sinclair|net> *tho
12:00 < sinclair|net> sambarino1: up for a chat on something neat i just discovered?
12:01 < sambarino1> yeah, i am interested :)
12:01 < sinclair|net> sambarino1: ok, here is the background...
12:02 < sinclair|net> sambarino1: i was trying to augment method calls, such that instead of calling a method and getting a result, the call would go into queue
12:02 < sinclair|net> so, var promise = process("hello world") <- "hello world" would go into a queue
12:03 < sinclair|net> sambarino1: make sense ?
12:03 < sambarino1> yeah
12:03 < sambarino1> and if the queue is empty do it right away?
12:03 < sinclair|net> right, so, lets say that process() was simply the following (non queued)
12:03 < sinclair|net> function process(message) { return message; }
12:04 < sinclair|net> sambarino1: anyway, using .net, i am pushing "message" into a queue, along with the function "process", the problem is, the return
12:05 < sinclair|net> the caller would call...
12:05 < sinclair|net> var result = await process("hello world");
12:06 < sinclair|net> so what i have is a background worker processing queue items, but again, how do i notify the caller that the queue item had been processed, and is ready to go?
12:06 < sambarino1> yeah
12:06 < sinclair|net> the answer.... http://msdn.microsoft.com/en-us/library/dd449174.aspx
12:06 < sinclair|net> sambarino1: again, Microsoft insights are astounding, its not like this is highly popularized, but it exists, which means someone thought about it
12:07 < sambarino1> yeah, that is pretty cool
12:08 < sinclair|net> sambarino1: so when pushing the message onto the queue, i create a TaskCompletionSource (basically a reference to the Task / Promise) which means i can call the task completion source to complete the task at a later time, which automatically notifies the caller
12:09 < sambarino1> yeah, i can see that being pretty useful
12:09 < cauffe> sinclair|net, so does it stick task list into an array or something?
12:09 < sinclair|net> sambarino1: so, what would be cool is, with ES6 Proxies, to completely augment a JS object, such that the proxy would push method arguments into the queue, defer the promise  and return to the caller the deffered
12:09 < sinclair|net> then, using something like yield have a caller syntax like....
12:10 < sinclair|net> var obj = new MyClass();
12:10 < sinclair|net> var proxy = new Proxy(obj); // augments all functions on obj
12:10 < sinclair|net> var result = yield proxy.process("hello world");
12:11 < sinclair|net> what would be neat, and useful in the context of node
12:12 < sinclair|net> or, perhaps just
12:12 < sinclair|net> var deffered = proxy.process("hello world");
12:12 < sinclair|net> console.log(deffered.result); 
12:13 < sinclair|net> so, with something like this, the proxy could be queuing out to redis for example, or an in memory queue, 
12:13 < sinclair|net> neato
12:13 < Havvy> JavaScript has been needing proxies for a *long* time IMO.
12:14 < sinclair|net> Havvy: among other things. am i right? 
12:14 < Havvy> No. Mostly just a syntactical cleanup.
12:14 < Havvy> Kill 'with' and 'new' for example.
12:14 < sinclair|net> Havvy: still think they shouldn't go too far with it
12:15 < Havvy> But of course, that'll never happen.
12:15 < sinclair|net> Havvy: smaller more concise syntax only really benefits browsers
12:16 < sinclair|net> Havvy: you wouldn't introduce new opcodes into a instruction set to do things that can be done already with existing opcodes
12:17 < sinclair|net> Havvy: i feel a bit that way about generators
12:17 < Havvy> That really depends.
12:17 < Havvy> Arrow functions are nice.
12:17 < sinclair|net> Havvy: you know what im going to say right? 
12:18 < sinclair|net> :)
12:18 < Havvy> Something about typescript?
12:18 < sinclair|net> haha
12:18 < sinclair|net> yup
12:18 < Havvy> Like I said...when it reaches 1.0
12:18 < sinclair|net> Havvy: i could have said CoffeeScript tho
12:18 < Havvy> But you wouldn't dare mention CoffeeScript seriously.
12:19 < sambarino1> typescript is legit :P
12:19 < sinclair|net> Havvy: oh i don't know, the more i look at JS, the more i see it as a compilation target than something i would code on directly 
12:19 < fiws> i like pure js
12:20 < sinclair|net> i mean, having class/arrow functions and all that is nice and all, but it only really benefits browser JS, i don't really think it benefits node all that much, unless you are coding in JS directly 
12:20 < Havvy> I wrote this one day while it was driving me mad: https://gist.github.com/Havvy/b703fdd21c3a8c5658db
12:21 < sinclair|net> Havvy: nice
12:22 < Havvy> Something for all the scripting languages to compile to. Minimal but expressive.
12:22 < sinclair|net> Havvy: you know, i have been able to hook up exactly what i wanted to do in .net in a few hours, where as its taken me over a month to get the same thing working on node, and it still doesn't work :(
12:23 <@Nexxy> was what you wanted to do generate a bunch of xml config files?
12:23 < Havvy> Nexxy: That's Java.
12:26 < sinclair|net> Havvy: ever think there will be an option to spawn new processes inside the current node process ?
12:26 < Havvy> Probably not.
12:26 < fiws> 3x
12:27 < nathan7> sinclair|net: It'd rock for LevelDB
12:27 < sinclair|net> Havvy: that's quite sad :(
12:27 < nathan7> sinclair|net: But no, too many static vars.
12:27 < sinclair|net> nathan7: static vars?
12:28 < nathan7> sinclair|net: variables that aren't instance-local
12:28 < sinclair|net> well, spinning up a new process should still be completely isolated from the outer most instance
12:29 < sinclair|net> ideally, it would be exactly like it is now, except the process is running inside the current process, and not outside as it is now
12:30  * sinclair|net started looking at http://izs.me/v8-docs/classv8_1_1Isolate.html
12:32 < sinclair|net> Havvy: any ideas where v8 is booted up in https://github.com/joyent/node/tree/master/src ?
12:32 < Havvy> I've never looked at Node's source.
12:32 < Havvy> Ask one of the node/npm devs.
12:33 < sinclair|net> Havvy: https://github.com/joyent/node/blob/master/src/node.cc line 1789
12:33 < sinclair|net> 178
12:33 < Havvy> There you go.
12:39 < sinclair|net> Havvy: so maybe, all that needs to happen is the entirety of that file needs to be encapsulated in a instantiatable class called V8 instance and have node instantiate one of these at boot, and provide an API to instantiate more?
12:39 < Havvy> Perhaps. If so, maybe you could write a patch and use it?
12:40 < sinclair|net> Havvy: no thanks :)
12:40 <@MI6> joyent/libuv: piscisaureus created branch reviewme - http://git.io/JhKlgw
12:41 < sinclair|net> Havvy: am looking at vert.x tho
12:43 < foofoobar> I guess mongodb-native in comparison to mongoose is a lot faster?
12:43 < sinclair|net> foofoobar: afaik, the mongoose stuff is just a abstraction on top of the native driver, offering up some modeling stuff
12:44 < foofoobar> sinclair|net: all right. Is it a big difference and worth to not use an ORM?
12:44 <@MI6> joyent/libuv: Bert Belder reviewme * a56991f : unix: fix assertion failure on signal pipe overflow - http://git.io/7FvW-w
12:44 < sinclair|net> foofoobar: if you don't care for creating models representing objects in your datastore, you could just use the native client
12:45 <@MI6> joyent/libuv: Bert Belder reviewme * c5d570d : unix: fix assert on signal pipe overflow - http://git.io/yR8unw
12:45 < sinclair|net> foofoobar: well, it depends, ORM's are a good idea, but i wasn't particularly fond of the way the mongoose api was geared up
12:46 < sinclair|net> var myclass = createClass(...) <-- i don't like this sort of thing
12:46 < sinclair|net> which is how mongoose does it classes
12:46 <@MI6> joyent/libuv: Bert Belder v0.10 * c5d570d : unix: fix assert on signal pipe overflow - http://git.io/--lzTA
12:47 < sinclair|net> foofoobar: mind you, you might get some mileage out some of its query wrappers
12:48 < foofoobar> sinclair|net: I think I'll go for the mongodb-native way
12:48 < foofoobar> then I have full control over my queries
12:49 < foofoobar> Currently looking for a good example of how to use it in express
12:50 < foofoobar> so I can share the connection to all modules
12:58 < rynkan> booyaa|foo: oh, thanks!
13:03 < mbor> hi, I use express to serve my public/ dir. how do I serve a JS file outside of public? tried something like app.get('/myfile.js', function (req, res) { res.send(__dirname + '/../myfile.js'); }); but I get "forbidden"
13:04 < mbor> nvm, had to use path.resolve
13:08 < rynkan> make doesn't joke around when its building... 100%cpu 
13:08 < sheldonh> rynkan: 100% make itself, or a child process that make is running?
13:09 < sheldonh> rynkan: it's quite unusual for make to sustain a cpu melt, even for very large dependency graphs
13:10 < vampi-the-frog> rynkan, you can use the -j flag to specify the number of threads make uses, btw, I use -j2 for example, cause I have a dual core CPU
13:11 < rynkan> cc1plus is the cause but it went down to around 30% steady now
13:11 < rynkan> vampi-the-frog: oh, thanks-j2 seams handy
13:12 < vampi-the-frog> np
13:12 < vampi-the-frog> cc1plus is obviously the C++ compiler
13:12 < rynkan> ye
13:13 < rynkan> I'm in love with the hp microserver n40l, nifty little thing
13:19  * booyaa|foo pats his raspberry pi with xbmc and his synology filer as his media centre solution
13:55 < draginx> What do you guys use to benchmark your applications? (Not a web app)
13:59 < Sven_vB> bash's "time" command
14:00 < locy> hi
14:00 < mackwic> draginx, phantomjs is quiet nice 
14:00 < draginx> mackwic: phantomjs is for web apps though?
14:01 < deoxxa> draginx: `time'
14:01 < mackwic> draginx, my bad, nevermind
14:01 < deoxxa> draginx: like `time ./benchmark-my-app.js'
14:01 < locy> how can i get everything after autocomplete/ and put in a var   www.domain.com/autocomplete/bla+bla   ?
14:02 < deoxxa> locy: you have a string that is literally, always, "www.domain.com/autocomplete/some/other-stuff.with/other.characters"?
14:08 < locy> yep
14:08 < deoxxa> locy: sounds like a job for .replace() and a regex
14:15 < mscdex> you don't need replace, just exec
14:15 < locy> i see replace takes too arguments
14:16 < locy> exec?
14:16 < mscdex> `/^www.domain.com\/autocomplete\/(.+)$/.exec(str);`
14:16 < locy> doesnt exec execute another process?
14:17 < mscdex> no, that's child_process.exec
14:17 < mscdex> this is regex.exec
14:17 < locy> ahh
14:17 < locy> thanks
14:17 < jetienne> hi
14:18 < jetienne> i would like not to crash in case of exception. any where in the code. any hint ?
14:18 < mscdex> try..catch?
14:18 < mscdex> listen on 'error' events?
14:18 < mscdex> last resort use process.on('uncaughtException') ?
14:18 < mscdex> oh, also domains :-)
14:20 < jetienne> mscdex: exclent, thanks
14:21 < Torsten> is the cluster module from learnboost something different than the cluster module integrated into node.js?
14:21 < mscdex> different
14:22 < rwilcox> jetienne: do you want the short version or the long version? The short version: use the trycatch npm package, domains -- but watch out for packages you use that don't work with domains -- and you'll also need to listen to uncaughtException
14:22 < rwilcox> jetienne: depending on your app connect-domain may also work
14:22 < jetienne> rwilcox: process.on'uncaughtException
14:22 < xecycle> Hi.  I found 3 mysql client libraries still in active development, but no comparison of them.  Did anyone wrote such a comparison, not just a benchmark?  My app will be serving very low traffic, therefore performance isn't that important.
14:23 < jetienne> rwilcox: it fit my needs without dependancy
14:23 < jetienne> rwilcox: what is 'domains'
14:23 < mscdex> xecycle: what kind of comparison?
14:23 < Torsten> fn'mscdex: which would you recommend?
14:23 < deoxxa> jetienne: process#uncaughtException kind of feels like "ON ERROR RESUME NEXT" to me
14:23 < mscdex> Torsten: i would say go with the built-in
14:24 < jetienne> deoxxa: i do agree
14:24 < xecycle> mscdex: In terms of deploying, configuring (if any), and API conventions.
14:24 < mscdex> jetienne: http://nodejs.org/docs/latest/api/domain.html
14:24 < Torsten> fn'mscdex: thank you :)
14:24 < jetienne> mscdex: looking
14:24 < rwilcox> jetienne: great if that fits your needs. Domains is a way to handle errors that also would let you keep some of the state around the program. Imagine writing a web server with node -- you'd want to tell the user something went wrong. With uncaughtException you can't do that, but domains you can
14:26 < rwilcox> if you want to go further down the rabbit hole about error handling I have some reading for you, but it sounds like you may want to start with this blog entry: http://geoff.greer.fm/2012/06/10/nodejs-dealing-with-errors/
14:27 < mscdex> xecycle: configuration-wise i think they're about the same
14:27 < mscdex> xecycle: WRT deploying, node-mysql and node-mysql2 are pure js and require no compilation, whereas mariasql does
14:28 < xecycle> mysql2?  Wasn't aware of that :(
14:29 < mscdex> xecycle: and WRT API, all 3 are more or less pretty close. i'm a bit biased, but mariasql aims for a simplified API
14:29 < mscdex> xecycle: mysql2 is a module whose goal is to be a API-compatible version of the mysql module, with optimizations and support for things like ssl and compression
14:30 < xecycle> mscdex: Hmm...  My server is running CentOS 6, which I'm afraid doesn't provide MariaDB.  I'll go check mysql2.
14:31 < mscdex> xecycle: mariasql works with both mysql and mariadb servers. you also do not need libmysqlclient or anything like that installed to use it
14:32 < xecycle> mscdex: Does it compile against maria libraries?
14:33 < mscdex> xecycle: it compiles against the bundled mariadb client library, which is binary compatible with libmysqlclient but also provides an async interface
14:33 < xecycle> mscdex: Thanks, I think I'd better go try installing them.
14:35 < Foxandxss> Uhm, hi :)
14:42 < pachet> Foxandxss hi
14:42 < Foxandxss> hi pachet
14:43 < mscdex> hi Foxandxss
14:43 < Foxandxss> pretty big channel :P. I have no idea of node.js, but seems interesting
14:44 < mscdex> node.js rules!
14:44 < Foxandxss> mscdex: I like what I saw, my friends don't like it, but I need my own opinions :P
14:46 < toulon> Going nuts over a simple render problem, probably easy fix. someone please take a quick look at this self-contained index.html https://gist.github.com/toulon/5632642
14:47 < mscdex> toulon: wrong channel
14:47 < toulon> sorry
14:47 < deoxxa> mscdex: aw, you made him leave
14:48 < mscdex> well, it's not #backbone.js :-)
14:48 < Foxandxss> yup and the people says that hell is hot this part of the year :P
15:07 < jcortes> hi all
15:09 < jcortes> I need some help for developing an addon
15:09 < jcortes> someone can help me?
15:09 < rynkan> Creating webapps with express, I'd like to have a published/unpublished/underdev-folder structure, is it just to create those folders and putt my webapps in the apropriate folder?
15:10 < rynkan> jcortes: hi, state your question and I'm sure someone will come along and help you out :)
15:10 < rynkan> ls
15:11 < rynkan> oops.. wrong screen
15:13 < howdynihao> rynkan : i'm not sure what you want exactly, why can't you use git branches for that?
15:13 < mscdex> jcortes: what's your question?
15:15 < rynkan> howdynihao: i'm using (intend to use) git for development, i'm thinking more about how to manage deployments on my server
15:16 < rynkan> everything under /home/node/pub would be finished webapps, /home/node/dev would have dev-versions of bot currently running webapps in /pub and all new webapps
15:17 < rynkan> I might be overthinking the issue tho
15:17 < howdynihao> seems silly to have 3 directories with overlapping files ??
15:18 < howdynihao> you're basically saying you want dev, testing, production? so just have 3 branches and work on dev branch and pull in to testing then to production and your deployments just follow the branches
15:19 < rynkan> howdynihao: hmm, well why didnt i think of that :)
15:19 < Qalqi> why doesnt jsdom include xmlhttprequest object?
15:19 < oreth> because you can just make a request using http?
15:20 < rynkan> howdynihao: thanks
15:20 < oreth> you don't need xmlhttprequest on the server side
15:22 < rynkan> jade... is awesome.
15:22 < mscdex> angular... is awesome.
15:22 < Qalqi> oreth: did jsdom devs really thought so?
15:22 < oreth> i can't speak for them
15:23 < howdynihao> mscdex : i thought it was always node.js rocks! :o
15:23 < Qalqi> oreth: how about replicating angular on server.
15:23 < rynkan> mscdex: I'll be playing with that soon aswell
15:23 < mscdex> footable... is awesome.
15:23 < mscdex> :-D
15:23 < oreth> Qalqi: why… would you do that?
15:23 < oreth> http://nodejs.org/api/http.html
15:23  * rynkan checking what footable is
15:23  * EyePulp swapped out angular for knockout.js =)
15:24 < EyePulp> Maybe I'll go back someday
15:24 < Qalqi> oreth: to have flexibility of switching code from server/client  which changing much of code
15:24 < mscdex> rynkan: http://themergency.com/footable/
15:24 < oreth> welll.. feel free to try to implement a node version of angular
15:24 < Qalqi> oreth: seems a reasonable requirement for me
15:24 < oreth> but i'm not going to
15:24 < Qalqi> oreth: there aint one
15:24 < oreth> for good reason
15:24 < Qalqi> oreth: why so?
15:25 < rynkan> mscdex: just found it, cool. I'll stay with bootstrap for a shile longer i think. just to learn the ins and outs of it
15:25 < Qalqi> oreth: what reasons can they be?
15:25 < Qalqi> oreth: angular is still in dev stage. mey be they havent had enough resources to port it to nodejs
15:25 < mscdex> you can use bootstrap with footable
15:26 < mscdex> and datatables for that matter. i use all 3 together
15:26 < oreth> Angular is a UI/Data bridge
15:26 < oreth> it helps you keep from storing data in the dom.
15:26 < oreth> node isn't UI at all
15:26 < oreth> it's back end
15:26 < Qalqi> oreth: thats where jsdom came in
15:27 < oreth> jsdom is good for parsing through a document.
15:27 < oreth> that's what DOM does.
15:27 < oreth> there's no UI still
15:27 < rynkan> mscdex: cool, i'll wheck it out. can i use jade with bootstrap? might be a stupid question but i've only have 15min of expreience with jade
15:27 < mscdex> rynkan: i don't see why not. bootstrap is basically just css, with some optional javascript for extra stuff
15:28 < Qalqi> oreth: well, isomorphic code is not a good idea then
15:28 < oreth> Qalqi: implementing Angular in node is like trying to implement OpenGL on a microcontroller
15:28 < oreth> it makes no sense
15:29 < mscdex> what about OpenGL on a Pi? ;-)
15:29 < oreth> that makes more sense
15:29 < oreth> but is still dumb :P
15:29 < mscdex> tell that to all the Pi owners
15:29 < EyePulp> heh
15:29 < oreth> <-- is a pi owner
15:30 < mscdex> ha
15:30 < oreth> seriously, if you try to build node from source on a pi, it takes an hour and a half (without overclocking)
15:30 < mscdex> so cross-compile
15:30 < oreth> what makes you think it's a good idea to build OGL on a pi? :P
15:30 < oreth> mscdex: there's a binary for it now
15:30 < mscdex> even easier!
15:30 < howdynihao> what happened to the official nodejs arm build :(
15:30 < Qalqi> arms were banned
15:31 < mscdex> just legs now
15:31 < oreth> howdynihao: after it took me an hour and a half to build node on my pi, i decided to make the binary
15:31 < oreth> (I'm lying… i didn't make the binary)
15:31 < [diecast1> recommendations for forward http to https with nodejs?
15:31 < mscdex> [diecast1: just use nginx?
15:32 < mscdex> or just respond with a redirect?
15:32 < [diecast1> mscdex: first thought.. but starting seeing some interesting modules
15:32 < rynkan> Tetrapak hired me to build an extension to their node-webapp, it was a fun experience as i did'nt know it was built with node at all. "Oh, this is built with nodejs, cool. Hmm whats .jade? Awesome, its identation oriented/enforced!"
15:33  * mscdex shakes a fist at Python
15:33 < oreth> i kinda love jade
15:33 < Qalqi> i want to make love to jade. provided she's female
15:33 < _6a681> o.O
15:33 < rynkan> I'm scared of jade for the time being
15:33 < oreth> please leave
15:34 < howdynihao> whats a tetrapak?
15:34 < oreth> rynkan: why?
15:34 < oreth> howdynihao: it's one more than a tripak
15:34 < rynkan> mostly because i've all ways refused to learn python (because of its identation enforcing...)
15:35 < oreth> rynkan: well that's a dumb reason
15:35 < [diecast1> best readme file ever - 注：当配置文件里有 `exports.merge` 时会接管所有请求，所以在程序逻辑里需要加入文件类型判断
15:35 < rynkan> yeh..
15:35 < rynkan> guess karma gets everyone in the end
15:35 < oreth> that's like saying "I've never tried grapes because I don't like the color purple."
15:35 < [diecast]> what about green ones
15:35 < [diecast]> or red
15:35 < rynkan> http://en.wikipedia.org/wiki/Tetra_Pak
15:35 < hamidmahmud> hey
15:36 < oreth> [diecast]: green grapes are devil fruits
15:36 < rynkan> oreth: Well, being a c/java-head for a long time, python seemed scary, I like my {}
15:37 < oreth> rynkan: i hear you.
15:37 < oreth> but python is sex.
15:37 < oreth> white space enforces good practice.
15:37 < oreth> Coffeescript is the python of javascript
15:37 < [diecast]> just follow PEP8 please
15:37 < _6a68> ugh, this room is dumb early in the morning, evidently
15:37 < [diecast]> you can still write crap code in python
15:38 < sheldonh> thanks. you people got me searching (mainly by reminding me that i hate templating), and lo! http://ajaxian.com/archives/jslt-a-javascript-alternative-to-xslt
15:38 < rynkan> oreth: I know, have a friend thats practically a wizard with python. the things she can do... (pun intended)
15:38 < oreth> [diecast]: oh that's not in debate.
15:38 < oreth> but at least it's readable bad code :P
15:39 < [diecast]> rynkan: thats not a pun... unless
15:39 < oreth> he's talking about penis.
15:39 < howdynihao> yea thats not a pun
15:39 < [diecast]> oreth: that was my next point...
15:39 < [diecast]> at least it forces code to be readable
15:39 < oreth> presumably, his own.
15:39 < astropriate> mongoose wont' let me save a document.  Right before saving it, i have it outputed using console.log()  and its ID is   "519ac493a3a9e1ae4600fef6"   but when i try to save it, it throws an error saying:  "TypeError: Object 50c5cc2f20c3bd0000000ff3 has no method 'save'"
15:39 < astropriate> what gives?
15:40 < [diecast]> ...unless  - it was subtle, but i got it at the end =P
15:40 < [diecast]> (not in*)
15:40  * [diecast] rim shot
15:40 < sheldonh> i hate you all. jslt is evapoware :(
15:40 < howdynihao> astropriate : its not a real mongoose object?
15:41 < rynkan> sheldonh: woy went from thanks to hating every one?
15:41 < rynkan> s/woy/you
15:41 < sheldonh> rynkan: easy come, easy go
15:42 < astropriate> howdynihao, i don't see how, i got it through mongoose, and haven't called toObject()  or anything on it
15:42 < astropriate> ohh
15:42 < astropriate> howdynihao, figured it out
15:42 < astropriate> god damn mongoose has the worst error and unhelpful messages I have ever seen
15:44 < rynkan> its crazy how awesome javascript has become over the last few years
15:44 < Fishrock123> ^
15:45 < rynkan> now they just need to change its name to something more appropriate
15:45 < chiper> has anyone in here used or seen code for how to use MySQL's new memcache interface in node?
15:47 < ckknight> hmm, is it possible to have a setInterval or something like it in node which allows the process to exit?
15:48 < gildean> ckknight: what do you mean?
15:49 < ckknight> say I want an interval to clear a cache at a regular period
15:49 < ckknight> but I don't want it to be the reason that the process stays alive unnecessarily
15:52 < oreth> ckknight: look into cron
15:52 < ckknight> oreth: I mean within a node process, not outside of it.
15:52 < mscdex> ckknight: use setTimeout instead?
15:52 < oreth> https://npmjs.org/package/cron 
15:52 < ckknight> mscdex: that still keeps the process alive
15:52 < oreth> it's internal cron
15:53 < oreth> not external
15:53 < mscdex> ckknight: then don't use timers
15:53 < ckknight> mscdex: right, I was trying to find a good solution, which is why I explained my problem
15:53 < ckknight> I'll check out cron, oreth
15:54 < oreth> i've used it for a few things
15:54 < oreth> it's good stuff
15:54 < addisonj> hrm... any strongloop folks around? curious if the changes for private npm repos have made it upstream
15:55 < rynkan> also "sudo chmod o+rw /dev/pts/3" is awesome
15:55 < addisonj> I am quite interested in support for private repos
15:55 < mscdex> oreth: cron uses setTimeout
15:56 < mscdex> ckknight: why do you need to clear it regularly?
15:56 < ckknight> mscdex: it could be considered a memory leak in a long-running process
15:57 < ckknight> say if you use something only once and it caches the result
15:57 < mscdex> ckknight: but it's not if it's a cache...
15:57 < ckknight> yes it is.
15:57 < ckknight> it's still wasted memory, regardless of intent
15:57 < mscdex> ckknight: how do you know you will only use it once? and if you do know that, why would you cache it?
15:57 < ckknight> I don't know that
15:58 < draginx> Does anyone in here know how ot set the timeout within a config file for busterjs?
15:58 < mscdex> ckknight: what about using something like lru-cache?
16:01 < rynkan> is nginx > httpd?
16:01 < mscdex> nginx > apache
16:01 < rynkan> guess I'll have to try it out aswell
16:02 < oreth> nginx > *
16:03 < ckknight> node > *
16:03 < ckknight> :P
16:03 < rynkan> does it do vhosts as easy or better than apache?
16:03 < ckknight> mscdex: thanks for the link
16:03 < ckknight> err, well, pointing out lru-cache
16:03 < Havvy> ckknight: False
16:03 < Havvy> Just ask sinclair. :P
16:04 < ckknight> Havvy: what about him?
16:04 < Havvy> Constantly ranting about how Node doesn't work for him.
16:05 < ckknight> Havvy: sounds like a personal problem
16:05 < rynkan> cool nginx lives in epel aswell
16:06 < mscdex> rynkan: epel probably has a really old version
16:06 < rynkan> yum list nginx
16:06 < rynkan> ...
16:06 < mscdex> i think nginx has their own repos
16:06 < rynkan> tmux is getting on my nerves
16:07 < mscdex> http://wiki.nginx.org/Install
16:07 < mscdex> 1.4.1 is latest and has websocket support and other stuff
16:08 < rynkan>  1.0.15-5.el6 seems old ye, nice of nginx to have thier own repo
16:09 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:10 < rynkan> Thanks users of #Node.js you're all very helpful and awesome!
16:18 < locy> how can i make a comma seperated list with strings enclosed in quotes for mysql queries inside a loop.    object.addthisstring ?
16:20 < mscdex> locy: wha?
16:20 < Havvy> locy: But the values in an array and join them:
16:20 < Havvy> >> ['a', 'b', 'c'].join(',')
16:20 < purr> Havvy: (string) 'a,b,c'
16:21 < Havvy> >> '`' + ['a', 'b', 'c'].join('`, `') + '`'
16:21 < purr> Havvy: (string) '`a`, `b`, `c`'
16:21 < gigawattz> Hey guys, anyone got any links to some interesting documents on Metoer.jsw, I am researching it now.
16:21 < locy> thanksd
16:21 < Havvy> Also contemplate using a mysql library that doesn't have you writing raw queries.
16:22 < locy> i see
16:22 < locy> thanks4
16:22 < mscdex> there's also a myriad of sql query generator modules out there on npm
16:30 < Qbix1> hey guys
16:30 < Qbix1> is node ever planning to implement saving of stacks which called a particular function (closure)
16:31 < Qbix1> until all references to that function or functions inside it are garbage collected
16:31 < Qbix1> that way we can debug better who actually called the function which then called a function that set a callback that we have now breakpointed in
16:31 < Qbix1> and would also let us report better errors :)
16:32 < Qbix1> I remember ryah wanted to do it 2 years ago, btu what happened? was it scrapped?
16:36 < oreth> NON-SEQUITOR: http://i.imgur.com/7OP0JE6.jpg
16:36 < oreth> ^ my cat: fat baby
16:36 < zapu> can I use self-signed certs for tls or not? I'm getting UNABLE_TO_VERIFY_LEAF_SIGNATURE on tls.connect
16:36 < mscdex> Qbix1: have you looked into domains?: http://nodejs.org/docs/latest/api/domain.html
16:36 < zapu> (i only want self-signed for my dev setup, ill make proper certs on production...)
16:36 < deoxxa> oreth: mrow
16:37 < mscdex> zapu: you can set `rejectedUnauthorized: false` in your tls.connect() options
16:37 < mscdex> er `rejectUnauthorized`
16:37 < zapu> oh, I know
16:37 < zapu> I just wanted to know if my code is broken or self-signed are just not supported
16:38 < mscdex> zapu: that's probably a valid error for a self-signed cert and node's default behavior
16:38 < mscdex> zapu: self-signed certs are supported, you just have to tell it not to reject them
16:38 < mscdex> zapu: optionally, you can set `ca` in your tls options
16:39 < zapu> I'm setting ca in options
16:39 < zapu> to something like [ fs.readFileSync('cert.pem') ]
16:40 < zapu> and the server has key set with private key and cert with the same cert
16:40 < zapu> am I doing this right?
16:40 < mscdex> zapu: what command(s) did you use to create the cert?
16:41 < foofoobar> https://github.com/rethinkdb/rethinkdb-example-nodejs-chat/blob/master/lib/db.js#L46 why is a new function called here?
16:41 < zapu> openssl x509 -req with csr for the private key and -signkey with the same key
16:42 < mscdex> foofoobar: to capture the current value of 'tbl'
16:42 < foofoobar> mscdex: but for(..) {} is a loop and tbl is avaiable in each loop
16:42 < zapu> and also with that openssl conf magic so it'll get alt names in there
16:42 < mscdex> foofoobar: it's not necessary for that code though
16:42 < mscdex> foofoobar: since 'tbl' is not used within the tableCreate() callback
16:43 < foofoobar> mscdex: its not? its used as the first argument
16:43 < foofoobar> the "tableName"
16:44 < mscdex> foofoobar: that's not within the tableCreate() callback
16:44 < mscdex> foofoobar: those variables are resolved immediately
16:45 < mscdex> foofoobar: whereas the ones within the callback are not
16:45 < mscdex> foofoobar: oh wait, i see it now
16:45 < mscdex> foofoobar: yeah it is needed as long as those debug statements are there
16:46 < jBryan> question about socket.io. on my client side I can only emit once. need to refresh the page to emit again
16:47 < foofoobar> mscdex: https://gist.github.com/anonymous/95bbcc97958bf4e6333d wouldnt this work, too ?
16:48 < mscdex> foofoobar: no
16:48 < foofoobar> mscdex: why?
16:49 < mscdex> foofoobar: because tableName will have changed to the last value in dbConfig.tables by the time the callbacks are executed
16:50 < foofoobar> ah, so its not a call by value?
16:50 < foofoobar> err, you are right, it's not passed via argument
16:50 < mscdex> foofoobar: it's a regular variable that can change
16:51 < mscdex> foofoobar: an alternative would be to do something like `dbConfig.tables.forEach(function(tableName) {});` which is basically the same thing
16:51 < foofoobar> mscdex: so the key point is that the loop is faster executed than the callbacks and so the callbacks will access the last value of the loop instead of the one which caused the error
16:51 < foofoobar> is that right?
16:52 < mscdex> foofoobar: correct, callbacks are called sometime in the future
16:52 < foofoobar> ah, okay. Thanks :)
16:52 < mscdex> foofoobar: by that time, the loop is over
16:55 < foofoobar> mscdex: https://github.com/rethinkdb/rethinkdb-example-nodejs-chat/blob/master/lib/db.js#L47 they use dbConfig.tables[tbl] there, wouldnt be dbConfig.tables[tableName] better?
16:55 < jarrodparkes> i would like to do a new web application using nodejs, but im not sure the "plumbing" will work. is it possible to create a service that can run on boot to communicate with a nodejs server?
16:55 < mscdex> foofoobar: either way works
16:56 < jarrodparkes> for instance, the nodejs application would be a webadmin tool that would allow me to poll for general diagnostic information about computers in my network
16:56 < mscdex> foofoobar: technically using tableName would be more performant since it doesn't have to look up another scope level
16:56 < Chiffon35> hi all
16:57 < foofoobar> mscdex: ok
16:58 < mscdex> jarrodparkes: yes. although if you're looking for a more complete solution, you might look into Zabbix
17:03 < jerrysv> substack: ping
17:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:05 < sc1313> hello
17:07 < sc1313> can node.js access sql: mysql,mongodb,redis, etc?
17:07 < deoxxa> sc1313: only one of those is SQL
17:07 < sc1313> i know, the rest are NoSQL
17:07 < deoxxa> anyway, the answer is yes
17:08 < deoxxa> there are high-quality libraries for all of those databases
17:08 < sc1313> need to install drivers?
17:08 < sc1313> k
17:09 < deoxxa> sc1313: well it's not built into node, if that's what you're asking. the actual node.js core is very light on features (by design), mostly providing only what's necessary for external modules to build upon to provide the rest
17:09 < sc1313> I come from php-Zend, java, python-django world, any recommendations on change of thinking when developing Node.js?
17:09 < jerrysv> sc1313: think asynchronously 
17:09 < deoxxa> sc1313: and dependencies are not a crime, i suppose
17:10 < sc1313> does node.js stateless?
17:10 < sc1313> I meant: is node.js stateless
17:10 < jerrysv> mikeal: will i see you next week in florida?
17:10 < jarrodparkes> so if i wanted a windows service to connect to nodejs service, how might that be done? im only familiar with connecting to nodejs server via websockets and a web client
17:11 < jarrodparkes> nodejs server*
17:11 < mikeal> nope
17:11 < jerrysv> mikeal: oh :(
17:11 < mikeal> jerrysv: ^
17:11 < mikeal> too busy
17:11 < mikeal> had to unfortunately decline
17:11 < jerrysv> mikeal: bummer. i could have packed whisky
17:12 < mikeal> yeah, wish i could have made it, but it's crazy at my company right now
17:12 < jerrysv> mikeal: understood, you will be missed
17:17 < oreth> everyone loves cats… here's a thousand of them: http://hash.codevinsky.com/r/cats
17:18 < oreth> built in node
17:29 < Sven_vB> jarrodparkes, i heard windows has named pipes for such stuff. also you could use network connection to localhost, but i heard windows services have restrictions on network access.
17:29 < Sven_vB> i think it was that you can access only either network or desktop
17:29 < xer0x> Sven_vB: windows? named pipes? what really?
17:30 < Sven_vB> xer0x, yeah, they look like network shares but with even more backslashes
17:31 < xer0x> Sven_vB: Ah okay, but they work like pipes? neat
17:31 < xer0x> I thought Node dropped some of its unix pipe support because windows didn't support it.
17:31 < Sven_vB> xer0x, don't get tooo warmed up before testing. even the normal pipes (sort file | sed -rf file) had strange behaviour on winxp
17:32 < d4rklit3> defunctzombie , substack ,  I got enchilada/browserify to work, I am not sure what is going on, perhaps its how defunctzombie modified browserify. So here is a very simple example: http://pastie.org/7948876      running this code in the browser does not run the whatever is inside that second closure. I am not sure how to debug this I was looking at the source of enchilada, and I don't see anything weird with how it compresses these files using browserify. I ev
17:32 < d4rklit3> en replaced the modified browserify with the 2.14.2 which basically had the same effect. 
17:32 < xer0x> Sven_vB: yaa, cool
17:32 < d4rklit3> defunctzombie , i did notice that passing debug:true/false doesn't matter it still leaves a source map of the non external code 
17:36 < defunctzombie> d4rklit3: for the debug true/false please file an issue if you can reproduce it (with a test case showing failure) note that you should not use some other version of browserify other than the one it ships with for your test case
17:37 < defunctzombie> d4rklit3: as for the other issue, I don't know what to tell you other than check your setup and how you are using it
17:37 < defunctzombie> d4rklit3: it works for me
17:37 < defunctzombie> and has been working for a long time
17:37 < d4rklit3> yeah i mean the only thing different that I am doing is my source files are not in a public directory
17:38 < d4rklit3> thats what threw me off about the examples, is that you would point it to the pub directory where the files actually exist
17:38 < d4rklit3> rather exist publically
17:39 < d4rklit3> im going try some stuff
17:39 < d4rklit3> if i get it working and the sourcemap thing still persists, i'll file an issue
17:40 < d4rklit3> btw, same issue mac and pc
17:46 < defunctzombie> d4rklit3: it doesn't matter if you point it at the "public" source dir since all js requests are intercepted so the original file is not served up
17:46 < shlevy> Hi. Can https://npmjs.org/package/ansi _remove_ ansi codes from a stream that already has them? Or is there a tool that can?
17:47 < d4rklit3> im going to pull down your examples a little later
17:47 < d4rklit3> and diff the result
17:51 < deoxxa> shlevy: i've done that with https://github.com/fknsrs/yttej
17:54 < deoxxa> shlevy: there's no docs or anything though, sorry. it takes buffers/strings as input and outputs objects that look like {type: "data", data: Buffer([...])} or {type: "sequence", char: ..., input: Buffer([...])}. you can then pipe its output through https://github.com/fknsrs/jetty (which does have docs) to turn it back into buffers
17:57 < shlevy> deoxxa: Thanks!
18:06 < jerrysv> visnup: !!!
18:14 < s5fs> jerrysv: great talk at nodepdx, are your slides posted? also, which 10dof sensor are you using?
18:15 < jerrysv> s5fs: thanks! slides were just cats so no use posting - this is the 10dof: http://www.ebay.com/itm/10DOF-9-axis-Attitude-Indicator-L3G4200D-ADXL345-HMC5883L-BMP085-Module-Arduino-/400344896529?pt=LH_DefaultDomain_0&hash=item5d366a5411
18:15 < s5fs> jerrysv: oh man those are crazy cheap, thanks for the link!
18:16 < jerrysv> s5fs: indeed! i've purchased 2, they seem to work, source for 3 of the sensors is on my github
18:16 < samholmes> I have to run sudo node app.js when developing on OS X because otherwise uploaded files cannot be accessed from the app.
18:19 < s5fs> jerrysv: super rad, i'll certainly take a look
18:23 < Peter_Shaw> is there is any node conf in Germany? (beides jsconf in Berlin)? 
18:25 < ferno> Is there any way to perform a task in a nodejs app without blocking the main thread?
18:25 < ferno> I have a pretty hefty logging module that I use with all of my projects, and it logs to multiple outputs, something that will probably take quite some time on a busy site.
18:26 < ferno> Disk/GCM/Server/Console, and I'd like to do the logging on a seperate thread if possible.
18:26 < ferno> Is that possible? :D
18:27 < mike> hm
18:27 < ferno> Disk I/O specifically is a worry.
18:28 < AAA_awright> ferno: The only thing that'd accomplish is switching between I/O tasks and calculation tasks, it wouldn't make anything actually go faster...?
18:28 < ferno> Only thing I can think of is communicating with a seperate dedicated logging node instance over redis, or something of the sort.
18:29 < ferno> Well, writing log messages to disk gets in the way of loading data requeted by clients.
18:29 < AAA_awright> Logging shouldn't be that big an issue, just write newline-seperated lines to a file pointer
18:29 < ferno> I'm thinking long term :)
18:30 < ferno> In general, it'd be great if work could be done on a different thread.
18:30 < AAA_awright> What are you thinking that would accomplish?
18:30 < ferno> I assume the seperate node instance + redis is the best approach for the time being.
18:31 < ferno> AAA_awright: ...not block the main thread?
18:31 < AAA_awright> ferno: I/O doesn't block though
18:31 < Peter_Shaw> send udp packsges to a Logserver.....?
18:31 < AAA_awright> If you're writing to the network, or any file pointer, or even the console output, that's non-blocking
18:33 < ferno> Ahh, so node can spawn mutliple threads to do async I/O, but just doesn't reveal it to the JS program?
18:34 < ferno> Did some googling, that's what I'm reading. I thought it was single threaded all the way down, hah.
18:34 < AAA_awright> If writing to a file pointer isn't sufficent (how most all software projects do it), the os logging utility can be setup to do whatever you need, my system forwards all log messages to another system for instance
18:34 < AAA_awright> ferno: Single threaded doesn't imply one active I/O operation at a time
18:34 < ferno> I'm writing to a file, shipping packets to a log server, and communicating with GCM + outputing everything to the console.
18:34 < AAA_awright> There's a whole queue of I/O tasks that a single thread processes when new events come in
18:35 < AAA_awright> It's a standard event loop
18:35 < ferno> My worry is that in the long run, when I have 1k+ active connections and am logging quite a bit, the logging will block the requests.
18:35 < AAA_awright> But again, there's no blocking I/O, so I don't see how that's possible
18:36 < ferno> I thought node was single threaded :)
18:36 < ferno> My mistake
18:36 < AAA_awright> Single threaded just means no context switching between threads
18:36 < Havvy> The JS environment is single threaded. The IO environment is multithreaded.
18:36 < ferno> Yep, that's what I just read.
18:36 < AAA_awright> Havvy: That doesn't necessarially have to be true
18:36 < ferno> It is true.
18:36 < AAA_awright> It's just to overcome certain API limitations
18:36 < Havvy> No, but it is.
18:37 < AAA_awright> It's not meaningful to point out
18:37 < ferno> Why not?
18:38 < Havvy> I mean sure....you could just tell them that it's possible to use system apis to do async file read/writes in comparison to your single thread.
18:38 < AAA_awright> ferno: Normally you spawn another process to offload intensive CPU operations, so you can continue to process quick requests while other ones are computing....
18:38 < ferno> I know that, no need to explain thngs.
18:38 < ferno> If node was single threaded all the way down, it wouldn't fork anything.
18:38 < ferno> Or so I thought.
18:38 < AAA_awright> ferno: Otherwise, you do understand that you can have multiple active I/O operations at once, right? Threads don't change the nature of that, all threads affect are the ability to run multiple, lengthy CPU tasks concurrently
18:39 < ferno> You can only write a single thing to the disk at a time in a thread...
18:39 < AAA_awright> ferno: That's if you use blocking I/O
18:39 < ferno> Do you know how I/O actually works?
18:39 < AAA_awright> Blocking I/O is standard for things like scripting because it's more natural to use
18:39 < ferno> Pretty sure a single threaded C program can only do one thing at a time.
18:40 < Havvy> ferno: It depends on the system apis.
18:40 < ferno> Or any single program, for that matter.
18:40 < AAA_awright> ferno: Not so, usually in C you write an event loop, which is non-blocking
18:40 < ferno> How is a write operation in C non blocking?!
18:41 < AAA_awright> ferno: It is if you set O_NONBLOCK
18:41 < AAA_awright> Which you're supposed to do, normally
18:41 < nathan7> err, actually
18:41 < nathan7> File operations in node are on the thread pool
18:41 < mscdex> except on Windows i think
18:42 < ferno> You aren't "supposed" to set O_NONBLOCK
18:42 < nathan7> Sockets can be nonblocking, O_NONBLOCK does nothing for files.
18:42 < ferno> Yep
18:42 < AAA_awright> ferno: Then you have a while loop that switches between incoming I/O events. You open a file pointer, then you make a read operation on it, then the program continues. When the data from that read operation is available, you get a "read" event on the switch, and you process it
18:42 < ferno> Yeah, "then" the program continues
18:42 < ferno> The program has to stop to do the read op
18:42 < ferno> You can't read two things at once in a single threaded c program
18:42 < ferno> Nor can you write two things at once.
18:42 < AAA_awright> nathan7: The aforementioned API limitations
18:42 < ferno> What API?
18:43 < AAA_awright> POSIX
18:43 < ferno> The linux kernel? xD
18:43 < Havvy> Linux Kernel is an API.
18:43 < ferno> Eh, I don't think of it that way.
18:43 < ferno> But I see the relation.
18:43 < AAA_awright> Well, the Linux kernel is a library, which implements POSIX, an API
18:43 < ferno> Anyways.
18:43 < ferno> O_NONBLOCK does nothing for files.
18:43 < nathan7> Yep
18:44 < nathan7> So that's what the threadpool handles
18:44 < ferno> + try to not be so demeaning in your answers. You sound like a douche.
18:44 < ferno> I'm off, thanks for the help.
18:44 < nathan7> It's not perfect, but it helps unify
18:45 < jndvdcn> hi, I have a question about zombie.js, anyone can help?
18:45 < AAA_awright> For someone who supposedly hadn't heard of nonblocking operations he seems to know quite a bit about O_NONBLOCK
18:45 < mscdex> nathan7: Windows uses overlapped I/O
18:46 < nathan7> mscdex: I.. don't touch windows
18:46 < mscdex> :-)
18:46 < alfonsodev> @jndvdcn I been fighting with zombies these days, I end using phantom.js
18:47 < jndvdcn> @alfonsodev : I'm just starting the fight  :)
18:47 < alfonsodev> I recommend you phantom.js is now 1.9 
18:48 < jndvdcn> @alfonsodev : thx for the recommandation
18:52 < draginx> Anyone here use fedex's API?
18:52 < draginx> and if so, is it down? :/
18:55 < rconover> Hey, when you pipe a stream should errors on the destination stream bubble up to the piped stream?
18:55 < rconover> They don't seem to do that.
19:01 < mscdex> rconover: no, because if it did you wouldn't necessarily know what stream the error originated from
19:01 < mscdex> rconover: if you have a long chain
19:01 < yorrd> this: <script src="/socket.io/socket.io.js"></script> for some reason doesn't work. It gives me a 404. I installed socket.io in the app root dir and started node app.js from there
19:02 < mscdex> rconover: and trying to handle errors that way is not very efficient
19:02 < mscdex> yorrd: i usually just serve up the file manually
19:03 < rconover> mscdex: I've written a simple Passthru type stream that counts the number of bytes sent over the stream.  I want a callback to fire when the destination stream is no longer able to be written to.  The destination stream isn't emitting any events to signal that it has been closed or had an error.
19:03 < rconover> It could be HTTP isn't a real stream.
19:04 < mscdex> rconover: WritableStreams should emit a 'finish' event IIRC
19:04 < mscdex> rconover: that's when end() is called on it and there's nothing left to write
19:05 < yorrd> mscdex I was told not to do this by pretty much every source of information I could find :P
19:05 < mscdex> yorrd: there is no compelling reason not to
19:05 < rconover> mscdex: Say I just have a server that writes a bunch of bytes, like 10 gigs, and the client closes in that write look
19:05 < rconover> mscdex: the server is just waiting for the pipe to drain, and it never drains
19:05 < rconover> mscdex: waiting for the stream to drain
19:07 < mscdex> rconover: if all you want is how many bytes are written, there is a property that already keeps track of that
19:07 < mscdex> rconover: for sockets
19:07 < rconover> do you know what it is?
19:07 < rconover> and is it part of the stable api?
19:07 < mscdex> rconover: http://nodejs.org/docs/latest/api/net.html#net_socket_byteswritten
19:07 < mscdex> rconover: same with bytesRead
19:08 < rconover> cool, so much for using a intermediate stream.
19:08 < mscdex> :-)
19:08 < rconover> do you think I could reset those numbers
19:08 < rconover> per http request since multiple requests could come in over the same socket?
19:09 < yorrd> mscdex ugh, you're probably right :D I guess it's somewhere in the module dir? Could you possibly tell me where?
19:09 < Havvy> So, theoretical conversation. If instead of 'extending' an object, we 'delegateto', would that be more understandable?
19:09 < mscdex> rconover: i would guess so
19:10 < mscdex> yorrd: it's in the socket.io-client module root
19:10 < mscdex> yorrd: socket.io-client.js
19:11 < rconover> I love node.js sometimes. 
19:11 < mscdex> i love node.js all the time.
19:12 < yorrd> me too now :) thanks mscdex
19:13 < samholmes> There are only 10 types of people in this world
19:13 < rconover> later gators
19:13 < samholmes> ...those who understand binary and who that don't.
19:13 < yorrd> samholmes nice one :D
19:14 < ferno> Back to share something. I just had too xD http://imgur.com/t4Ixorx
19:14 < samholmes> yorrd: lol. not my joke but thanks. ;P
19:14 < samholmes> Nib can generate background gradient images from the server, right?
19:14 < foofoobar> https://github.com/rethinkdb/rethinkdb-example-nodejs-chat/blob/master/lib/db.js#L128 if an error occured, callback(null, null) is called. 
19:14 < foofoobar> But then this https://github.com/rethinkdb/rethinkdb-example-nodejs-chat/blob/master/lib/db.js#L177 will never be true, right?
19:15 < syskk> let's say I use mocha for testing, what should i put in my "test" script in package.json
19:15 < syskk> without assuming mocha is globally installed
19:16 < mscdex> samholmes: css can generate background gradients client-side ;-)
19:16 < syskk> can I use ./node_modules/mocha/bin/mocha test/ ?
19:16 < syskk> is it the recommended way to do this?
19:16 < samholmes> mscdex: but as a fallback for older browser...
19:17 < mscdex> samholmes: how old?
19:17 < syskk> or maybe node_modules/.bin/mocha ?
19:17 < samholmes> mscdex: Have you heard of Nib?
19:18 < mscdex> samholmes: no
19:18 < samholmes> mscdex: http://visionmedia.github.io/nib/
19:18 < mscdex> ugh stylus
19:19 < mscdex> http://caniuse.com/#feat=css-gradients
19:19 < mscdex> you can even do gradients in old IE with filters
19:20 < samholmes> mscdex: why ugh, stylus > css
19:20 < mscdex> it's one less thing to have to deal with
19:21 < mscdex> i've never had to use something like stylus
19:21 < mscdex> i guess i'm in the minority
19:21 < foofoobar> As I understood you always pass an err as the first argument in an callback-chain
19:21 < foofoobar> How do I generate an error by myself?
19:22 < mscdex> foofoobar: new Error('foo!');
19:23 < foofoobar> mscdex: thanks
19:24 < samholmes> mscdex: idk, I just use stylus to write code faster.
19:24 < mscdex> code?
19:24 < samholmes> markup w/e
19:24 < mscdex> heh
19:24 <@isaacbw> still not there
19:24 < samholmes> for example, I knew that I could use something like nib or write my own mixins to add support for all the vendor prefixes
19:24 < mscdex> to me stylus is like the coffeescript of stylesheets
19:24 <@isaacbw> ^^
19:25 < samholmes> Or, I could create a stylesheet delcaration once, and use that everywhere.
19:25 < mscdex> and i don't care for coffeescript
19:25 < samholmes> I don't use coffeescript either
19:25 < samholmes> but stylus has been great.
19:25 < samholmes> nesting selectors is wonderful
19:25 < samholmes> For me, I find my SS more maintainable with stylus
19:26 < mscdex> too much for me, i'd rather have a static css file that non-developers could edit
19:27 < samholmes> For example, if I wanted to style a single page, specifically, all I need to do is nest my declarations in a selector like .page-about and give the about page's body that class
19:27 < samholmes> to each his own
19:55 < mrdnk> Trying to get my head around nano and couchdb; and need some help.
19:57 < mrdnk> I have doc.type == 'application' and doc.type == 'issues'. application name is equal to doc.tags && doc.type == 'application'
19:57 < mrdnk> the view works (i think).
19:57 < mrdnk> function (doc) {   if (doc.type == "application") {     emit([doc._id, 0], doc);   } else if (doc.type == 'issue') {     emit([doc.tags, 1], doc);   } }
19:58 < mrdnk> but... ditt.view ('issues', 'applicationIssues', {key: 'startKey=["webid"]&endKey;=["webid",2]'} - errors
19:59 < mrdnk> above is... var nano = require('nano')('http://127.0.0.1:5984/')  var ditt = nano.db.use('ditt')
19:59 < mrdnk> Any couchdb && nano users in here?
20:13 <@isaacbw> http://jeditoolkit.com/try-wisp/
20:13 <@isaacbw> this is actually pretty cool
20:13 < deoxxa> you're actually pretty cool
20:14 <@isaacbw> :,D
20:28 < samholmes> Using Stylus and Nib: I can use transform without vendor prefixes and the mixin will output the prefixes for me. But, what if I want to use one of these mixins in another property or mixin? For example, say I have transform: scale(.5); and then following that I have transition: transform 500ms; Would Stylus know how to give transition the appropriate arguments?
20:33 < hughfdjackson> is there a problem with npm at the moment?
20:33 < hughfdjackson> npm publish is hanging on me
20:33 < yorrd> hughfdjackson, I don't have any issues
20:34 < hughfdjackson> hrm - it seems that actually had previously succeeded, but the process was sticking around anyhow
20:34 < hughfdjackson> :) thanks
20:40 < MelkorNemesis> hey guys
20:40 < MelkorNemesis> can you join #yeoman? or is it just me, because nothing happens when I try
20:42 <@isaacbw> lern2irc
20:43 < draginx> Anyone in here know the diff between buster and mocha for testing?
20:44 <@Nexxy> draginx, one is the awkward brother, the other is great with scones
20:44 < draginx> which one is the awkward brother?
20:44 <@Nexxy> buster
20:45 < draginx> why is it awakrd? :/
20:45 <@Nexxy> you need to go watch arrested development
20:45 <@isaacbw> lol
20:45 < draginx> oiy
20:45 < draginx> new seaason soon! :D
20:45 <@Nexxy> YEP
20:46 < draginx> you expect the man with the 4 thousand dollar computer to listen to the guy with a $100 computer? C'mon!
20:46 <@Nexxy> now I'm the one missing references
20:46 <@isaacbw> the banana stand in new york was disappointing
20:46 <@Nexxy> isaacbw, were they not frozen?
20:47 <@isaacbw> they were prepackaged in little plastic bags
20:47 < draginx> lol
20:47 <@Nexxy> oh
20:47 < draginx> Nexxy: replace computer with suits ;)
20:47 < deoxxa> Nexxy: C'MON
20:47 <@Nexxy> draginx, haha
20:47 < ThePrimeMedian> Can someone help me with this mongoose?  I need to find all documents with metrics 'user.signin' and required >= 5 BUT... this it's inside Challenges array   http://pastebin.com/VKn2Q7Z3
20:48 < ThePrimeMedian> i need all quests
20:48 <@isaacbw> ThePrimeMedian: try #mongodb
20:49 < ThePrimeMedian> thanks isaacbw - i just found #mongoosejs
21:07 <@MI6> joyent/node: Timothy J Fontaine v0.10 * e238583 : v8: re-apply floating patches (+2 more commits) - http://git.io/eKkdnA
21:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:13 < yorrd> more or less random: when resizing a canvas with element.height(value); in jQuery, it doesn't seem to register mouse events anymore :S
21:13 <@isaacbw> yorrd: that's better suited to ##javascript
21:14 < s5fs> or #jquery
21:16 < Jester831> any idea why pathTo wouldn't be defined for nested resource in compound?
21:16 < Jester831> Object #<RoutesCollection> has no method 'images'
21:18 <@isaacbw> what's with all the recent hype around compound?
21:18 < Jester831> is there?
21:19 < Jester831> I'm basically building an express app on top of compound
21:19 < Jester831> it's 100% express compatible, and makes sense for organizing controllers/models/views
21:19 <@isaacbw> there's been an influx of people asking compound-related questions
21:19 <@isaacbw> or maybe it's just been you asking a lot of questions :P
21:20 < Jester831> maybe ;p
21:20 < Jester831> eh they could've just as easily been express questiosn
21:20 < Jester831> questions
21:20 < Jester831> node is hard ;x
21:20 < yorrd> isaacbw, just figured it out, but thanks, i didn't know about that channel :D
21:22 < Jester831> so isaacbw, know the magic way to make pathTo work with nested resources? ;D
21:22 <@isaacbw> nothing wrong with questions
21:22 <@isaacbw> I don't know anything about compound
21:23 < Jester831> well, pathTo's an EJS helper I thought?
21:23 <@isaacbw> I don't really know much about ejs either
21:23 <@isaacbw> server-side rendering isn't really my thing
21:24 < Jester831> yea I hear ya there
21:24 < Jester831> <3 Angular
21:35 < Jester831> yay debuggin
21:44 < eighty4> Trying to get on / removeListener to play nice. If I do an "on" I can see it adds a function to _events[key], When I do a removeListener _events[key] gives undefined. But when I run on again I get two functions in _events[key]. Is this expected? Can I somehow avoid it?
21:46 < eighty4> or… I'm just doing something wrong.
21:52 < d4rklit3> can somebody look at this and tell me why the contents of  "JWSgS0" doesnt run?   http://pastie.org/7948876 
21:54 <@isaacbw> because it was written by an insane person
21:56 < nathan7> ..I .. wt..
21:56 < nathan7> I have no words
21:56 < d4rklit3> thats generated code
21:56 < d4rklit3> apperantly thats what browserify will spit out
21:56 < nathan7> try not minifying it
21:56 < d4rklit3> yeah it is uglified
21:56 < nathan7> maybe we could read it then
21:56 < d4rklit3> there isn't much there lol
21:57 < d4rklit3> like the require = ()  stuff is pretty straightforward
21:57 < d4rklit3> it just defines require
21:57 < d4rklit3> the second closure though
21:57 < d4rklit3> taht is supposed to run , but it doesn't. i just awnt to know why
21:58 < nathan7> it won't run automagically
21:58 < d4rklit3> does something need to require JWSgS0 ?
21:58 < nathan7> require is breaking, or you're not requiring it
21:58 < nathan7> tahdah, you're not requiring it
21:59 < d4rklit3> tahts like my bootrstrap file though, which is odd. before it would run whatever was in the bootstrap. I am sure there is some misunderstanding going on
21:59 <@isaacbw> d4rklit3: why on earth would you give us uglified code to look at
22:00 < d4rklit3> im writing my own middleware to utilize browserify right now. hopefully that will shed light on wahts going on.
22:00 < d4rklit3> isaacbw , im actually not sure why that is uglfied the switch was off when i compiled it. maybe it just automatically uglifies that require definition in browserify
22:01 < substack> it sounds like you're making something overly-complicated
22:01 < substack> there are already existing well-tested modules to do this kind of thing
22:01 < d4rklit3> this is what enchilada did
22:01 < d4rklit3> what i pasted
22:01 < d4rklit3> i just set it up
22:01 <@isaacbw> dammit stop talking about enchiladas. You keep making me hungry
22:03 < d4rklit3> im making my own version of something like that, mainly to understand what is happening and to learn how to write middlewares. I understand that you ahte them for whatever reasons, and I respect that. But CLI compiling isn't exactly approachable for everyone at my work and I would rather do what I am doing to make it easier for jr devs to create applications
22:05 < d4rklit3> also dude, our clients would fire us if we started deliverying node apps to them. they are all old school entertainment clients. everything they have is on a LAMP , or Java server. Maybe .net.  I am trying to find a real-world application for using this technology, and sorry to say, CLI is not that.
22:05 <@isaacbw> oh boy
22:06 < d4rklit3> ok let the arguments begin
22:06 < d4rklit3> however i wont entertain them. i will do my best to ask better informed questions.
22:11 < _6a68> mmm enchiladas
22:12 < syncan> i would like some enchiladas
22:13 <@isaacbw> ima make a sammich
22:19 < syncan> shouldn't there be some legal limit to how many hours one can use a jackhammer in one day? i really feel like 9 hours of continuous jackhammering is a bit much
22:19 <@isaacbw> call the city and complain
22:20 < syncan> then i go from someone complaining on an IRC channel, to a citizen complaining to a city :(
22:20 <@isaacbw> I see your delima
22:20 <@isaacbw> *delimma
22:21 < syncan> you put delimma in da coconut
22:21 < d4rklit3> and throw the can away...
22:22 < syncan> (and repeat 1000x inside head)
22:25 <@MI6> joyent/node: isaacs v0.10 * a2f93cf : http: Return true on empty writes, not false - http://git.io/mj2Gzg
22:27 < awc737> is that what "make" is supposed to look like? http://d.pr/i/ogwM
22:27 < awc737> I am following these instructions
22:27 < awc737> except I never checked out into a version
22:30 < mscdex> awc737: then you're probably building master
22:30 < awc737> mscdex, yes, but why does make command create such chaos
22:30 < mscdex> awc737: it always displays that. there is a lot of files for node, mostly in openssl and v8
22:30 < awc737> oh, i should have let it keep going
22:31 < awc737> i got scurred
22:31 <@Nexxy> lol
22:31 < mscdex> :S
22:31 < deoxxa> lol
22:31 <@isaacbw> lol
22:31 <@Nexxy> awc737, that looks pretty normal
22:32 <@Nexxy> awc737, except for that funky red swirl 
22:32 <@Nexxy> you might want to get that checked out
22:32 < awc737> LOL
22:32 < awc737> that would be, the operating system of the gods
22:33 <@isaacbw> debian plebian
22:33 < mscdex> replace it with the node.js logo, that's a prerequisite for node
22:33 < mscdex> without it, node will only run in 32-bit mode
22:34 < deoxxa> i only run node in 32-bit anyway
22:34 < mscdex> well it's half of what your processor is capable of
22:34 < deoxxa> except that i have like 20 node processes running anyway
22:34 <@Nexxy> awc737, I don't see a chameleon anywhere
22:34 < deoxxa> doesn't v8 still do way better at 32 bit than 64?
22:34 <@isaacbw> arch 4 lyfe
22:34 < awc737> ew anything rhel
22:35 < mscdex> deoxxa: i don't think that's true anymore
22:35 < deoxxa> oh
22:35 <@Nexxy> excuse me, suse
22:35 < deoxxa> well that's interesting
22:35 < mscdex> deoxxa: at least i believe that's what bert said some time back
22:35 < mscdex> or ben
22:35 < deoxxa> i'll have to do some tests
22:35 < awc737> we could probably have a productive argument about operating systems now
22:35 < deoxxa> i remember last time i looked into it (like 18 months ago), 32 bit was much faster when it came to JIT'd code
22:36 < matbee> Anyone here know how to force a socket.io connection closed? socket.disconnect doesn't actually end it. socket.disconnect() doesn't actually seem to end it.
22:36 < awc737> and probably get everyone to agree on one if we argue long enough
22:36 < matbee> weird, i had a brain blurp, ha
22:36 <@Nexxy> awc737, we do already
22:36 <@Nexxy> the rest of you just don't know it yet
22:36 < deoxxa> awc737: then we just have to cover templating languages, compile-to-javascript systems and text editors, then we'll be one big happy family
22:37 <@isaacbw> desktop environments, shells, and browsers
22:38 < syncan> oh my!
22:38 < syncan> there's no place like node
22:38 < awc737> no one brought up frameworks, because thats obviously not even an argument
22:38 < mscdex> node-way
22:38 < syncan> woooade!
22:38 < awc737> everyone knows the best framework + language by now its 2013
22:38 <@isaacbw> color schemes, source code fonts
22:38 < awc737> this make command takes forever
22:39 < mscdex> let's discuss what color the bike should be
22:39 < mscdex> who cares about the shed
22:39 < syncan> the best framework is no framework. or my framework, or someone's framework.
22:40 < deoxxa> mscdex: i don't mind the colour, but can it be matte instead of gloss
22:40 < mscdex> deoxxa: it doesn't matter, it'll be HD
22:40 < awc737> css precompilers, theres only one worth using
22:40 < awc737> well i'm glad we're all on the same page here
22:48 <@isaacbw> as far as color schemes go, if you haven't tried solarized yet you should
22:49 < syncan> i always switch between light and dark solarized :)
22:49 < syncan> depending on lighting, etc
22:49 <@isaacbw> I don't really like the dark one for some reason
22:49 < Foxandxss> I used solarized light a looot of time
22:49 < Foxandxss> when doing django
22:49 < Foxandxss> oh, django, what happened to you :P
22:50 < syncan> my dark is modified a bit actually, which i guess is cheating
22:50 <@isaacbw> is python not cool anymore?
22:50 < Foxandxss> python is, django isn't
22:50 < chiper> flask is the new hotness, from what I hear
22:50 < Foxandxss> any recommended book for total newbie of node? (but experienced developer)
22:50 < Foxandxss> yup, seems so
22:51 <@isaacbw> all the scientists started using python and made it less hip
22:51 < syncan> flask is just now getting hotness?
22:51 < s5fs> Foxandxss: I recommend reading the node api and anything on advanced javascript
22:51 < Foxandxss> s5fs: I prefer books I feel more confortable :P
22:51 <@isaacbw> node is so actively developed that books get outdated pretty quickly
22:51 < syncan> i really liked Twisted until node came along 
22:51 < Foxandxss> because I'm really confused about node and what to expect
22:51 <@isaacbw> if you really want a book, just get one about javascript itself
22:51 < Foxandxss> isaacbw: yah, but works for a general idea
22:51 <@isaacbw> and node will come naturally
22:52 < syncan> i switched from twisted to node
22:52 < Foxandxss> I now javascript already :P
22:52 <@isaacbw> node is pretty idomatic
22:52 < s5fs> Foxandxss: releases are coming too quickly for books to keep up. read the api, its short and sweet (takes maybe 15min to scan, 90min to fully read imho)
22:52 < ckknight> yeah, node has all the benefits of twisted without having to do anything
22:52 <@isaacbw> Foxandxss: there's "knowing" javascript and knowing javascript
22:52 < Foxandxss> yah, of course
22:52 <@isaacbw> the short answer is no, there aren't really any good books right now
22:53 < Foxandxss> ok
22:53 < fg3> npm -g install generator-angular   # fails with:  npm ERR! Error: ENOENT, open '/Users/frankg/.nvm/v0.8.18/lib/package.json'
22:53 < chiper> there's also the question of what you want to learn to do
22:54 < Foxandxss> chiper: understand node, because I'm not sure what to expect
22:54 < chiper> expect javascript, without a browser
22:54 < syncan> fg3: check ~/.npm cache ?
22:54 < chiper> expect lots of callbacks
22:54 <@isaacbw> Foxandxss: I didn't mean to imply that you don't really know javascript. I have no idea what you know :)
22:54 < fg3> syncan: how to check?
22:55 < syncan> fg3: there are package cache folders just in that folder
22:55 < Foxandxss> isaacbw: don't worry :)
22:55 < chiper> Foxandxss:  I think what isaacbw is saying is, there's knowing how to make things dance in the browser, and then there
22:55 < syncan> it might have a root ownership
22:55 < chiper> is knowing how to actually write programs in JS
22:55 < fg3> syncan: I'll try it out - thanks
22:55 < s5fs> Foxandxss: skim the api and you'll have a better idea of what node is capable of, and from there you can more quickly evaluate if its something you wish to learn more about.
22:55  * chiper growls at his enter key
22:55 < matbee> weird, i had a brain blurp, ha
22:56 < Foxandxss> won't like, I came into javascript not long ago doing some frontend development with backbone, and since I really like javacript, I want to try node
22:56 < matbee> Anyone here know how to force a socket.io connection closed? socket.disconnect doesn't seem to _actually_ end it.
22:56 < Foxandxss> but from total ignorance
22:56 < Foxandxss> s5fs: I have a lot of free time, and learning is free, so I go ahead :P
22:57 < chiper> Foxandxss:  so what you're wanting is to learn to do backend web stuff?
22:57 < Foxandxss> not really
22:57 <@isaacbw> just think of node as cli-executable javascript with a nice network-oriented builtin api
22:57 < Foxandxss> so far I use rails, I think I have good knowledge of rails
22:57 <@isaacbw> node is more analogous to ruby
22:57 < Foxandxss> but rails is overweighted for 99% of SPA apps
22:57 < s5fs> Foxandxss: i'd recommend reading the node api, then the connect docs and then maybe express docs (if you wanna use it). i also recommend reading the 'good parts' book.
22:57 <@isaacbw> than rails
22:58 < Foxandxss> that I what I read today, that node is more like ruby and express more like sinatra
22:58 < chiper> download the full Express repo and read through the demos
22:58 < SBoudrias> Hi, I've just installed Nodejs on Ubuntu via `apt-get` (so installed as `nodejs`). And I can't get a symlink `node` working straight up the command line, I have to call directly `/usr/bin/node` to make it run (and of course this folder is in the PATH). Anyone have any idea??
22:58 <@isaacbw> express was directly inspired by sinatra irc
22:58 <@isaacbw> iirc
22:58 < syncan> yrcc
22:58 < ckknight> isaacbw: I'd say node is more analagous to Rack than to either Ruby or Rails
22:59 < chiper> lets be clear about something, express does not replace node like Sinatra replaces Rails
22:59 < Foxandxss> tl;dr; wants lightweight backends :)
22:59 < chiper> Express runs inside of node
22:59 < Foxandxss> and sinatra runs "inside" ruby
22:59 < Foxandxss> same idea
22:59 < chiper> ok, I guess I misunderstood what sinatra was
22:59 < ckknight> Foxandxss: and both Rails and Sinatra run on top of Rack
23:00 < Foxandxss> yup
23:00 < ckknight> node just has Rack's functionality built-in, basically
23:00 <@isaacbw> I know embarassingly little about the ruby ecosystem
23:01 < Foxandxss> express seems interesting, but the first thing I will do is change jade for anything else
23:01 < syncan> i think most people would forgive you
23:01 <@isaacbw> I predict we'll start seeing a few more server-side js platforms pop up
23:01 < chiper> Foxandxss:  heh, so do I
23:01 < Foxandxss> chiper: don't care what, but not jade please
23:01 < chiper> I'm using handlebars at the moment
23:01 < ckknight> you can use whatever template engine you want to
23:02 < Foxandxss> hbs is a good choice
23:02 < ckknight> isaacbw: problem is node has traction and is "good enough" for now.
23:02 <@isaacbw> can you compile handlebars templates without a dom?
23:02 < syncan> issac: smarfox server and server-side actionscript both come to mind; wouldn't be surprised if they try to reignite on the tails
23:02 < ckknight> isaacbw: yeah
23:03 < syncan> both went Java VM heavy, now time to go back to JS 
23:03 < Foxandxss> I guess that coffee is not a problem in node, right?
23:03 < ckknight> works fine
23:04 < chiper> isaacbw:  of course, it's just a parser
23:12 < fg3> syncan: I cleared out the ~/.npm folder but still cannot install that module 
23:12 < fg3> syncan: why is it trying to open - /Users/frankg/.nvm/v0.8.18/lib/package.json
23:13 <@isaacbw> all I want to do is write web applications with haskell :(
23:13 < _6a68> rofl
23:14 < _6a68> isaacbw: see http://www.haskell.org/haskellwiki/The_JavaScript_Problem
23:14 < _6a68> list of haskell -> js compilers
23:14 <@isaacbw> oh my god
23:14 <@isaacbw> that's hilarious
23:14 < _6a68> The JavaScript problem is two-fold and can be described thus:
23:14 < _6a68> 1. JavaScript sucks.
23:14 < _6a68> 2. We need JavaScript.
23:14 < _6a68> <3 those crazy algebraists
23:21 < syncan> oh my .. god .. http://ekblad.cc/hastereport.pdf
23:21 < syncan> a master thesis on "The Javascript Problem"
23:21 < syncan> I don't even
23:22 < _6a68> syncan: the secret of haskell is: infinite grad student slave labor.
23:22 < syncan> i've been enlightened
23:22 < bnoordhuis> don't forget about language hipsters
23:22 < _6a68> :-\
23:22 < bnoordhuis> hipsters || snobs
23:22 < _6a68> language hipsters get bored fast.
23:22 < _6a68> grad students are enslaved for *years*.
23:22 < fg3> syncan: I just started using a newer version of node.js and all is well 
23:23 < syncan> fg3: ah, good to hear
23:23 < mmalecki> if a college professor wants to tell me that my code is wrong, he better do it in my face than through a compiler
23:23 < bnoordhuis> that's what i mean. witness all the personal blogs that have a 3 month infatuation with haskell
23:23 < bnoordhuis> mmalecki: congrats on the takeover. do you get to boss more people around now?
23:24 < deoxxa> if a college professor wants to tell me that my code is wrong, he better shut his mouth before i make fun of him for "working" in academia for his whole life
23:24 < mmalecki> bnoordhuis: correct
23:24 < bnoordhuis> mmalecki: good :)
23:24 < mmalecki> deoxxa: that's the point why he should do it in your face
23:24 < deoxxa> mmalecki: do you call your subordinates mmalackeys?
23:24 < mmalecki> bnoordhuis: thanks, that's a big thing for us :)
23:24 < chiper> anybody in here have a puppet/chef config for getting a current or near current node install running?
23:25 < chiper> all my google results are pretty old
23:25 < deoxxa> > lackey or lacquey is a term for a uniformed manservant
23:25 < mmalecki> deoxxa: they are required to wear t-shirts with my name on them
23:25 < deoxxa> ha
23:25 < deoxxa> do they have you face on the back?
23:25 < mmalecki> and are allowed on my private jet
23:25 < deoxxa> *your
23:25 < mmalecki> so that's kind of win-win
23:26 < mmalecki> deoxxa: http://www.youtube.com/watch?v=lXGDRrkaRgU
23:27 < chilts> _6a68: I like your two points on the JS problem :)
23:27 < chilts> also, 3. JavaScript rocks! :)
23:27 < deoxxa> ha
23:28 < _6a68> chilts: I can't take credit, that's from the haskell page I linked
23:29 < _6a68> chiper: you can look at what we're using, no promises about cleanliness though: https://github.com/mozilla/identity-ops/blob/master/chef/cookbooks/persona-webhead/recipes/default.rb
23:29 < chilts> :)
23:29 < _6a68> chiper: any questions, ask gene in #identity on mozilla irc :-)
23:30 < chilts> ahah, I needed to scrollback more to see the link - ta :)
23:30 < _6a68> chilts: yeah, it's pretty awesome
23:30 < chiper> _6a68:  ty
23:31 < _6a68> chiper: I think I gave you a wildly incorrect link but hopefully something useful in that repo :)
23:31 < chiper> lol
23:32 < elliottcable> o7 all
23:33 < chiper> elliottcable:  fancy meeting you here
23:33 < mscdex> elliottcable: miss
23:35 <@MI6> joyent/node: Timothy J Fontaine v0.10 * 007e63b : buffer: special case empty string writes - http://git.io/GB2uNw
23:58 < chiper> _6a68: this one appears to be working.  https://github.com/mdxp/nodejs-cookbook got me 10.7 once I updated using the change in one of the pull requests
--- Log closed Fri May 24 00:00:56 2013
