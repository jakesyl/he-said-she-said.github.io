--- Log opened Wed Nov 28 00:00:12 2012
--- Day changed Wed Nov 28 2012
00:00 < clever> sechrist: i believe so, one min
00:00 < schofld> would you call 'text' a property of the 'parse' object ??
00:00 < nathan7> schofld: yes, that's what the REPL uses
00:00 < nathan7> schofld: util.inspect is what the REPL actually uses
00:00 < schofld> I want to be able to talk about javascript correctly 
00:01 < schofld> oh ok 
00:01 < nathan7> schofld: No, of the object that the parse function returned 
00:01 < clever> sechrist: hmmm, nope, dont actualy see it in the code
00:01 < clever> sechrist: about all i can say, make a inspect wrapper
00:01 < nathan7> sechrist: hack util.inspect
00:01 < nathan7> sechrist: abuse the fact that require() returns the same object every time
00:02 < sechrist> ah since repl uses util the overloaded function would work in the repl
00:02 < sechrist> nice
00:02 < nathan7> > require('util').inspect = function(){ return 'blah' }
00:02 < nathan7> blah
00:02 < nathan7> > 1
00:02 < nathan7> blah
00:02 < sechrist> ;D
00:02 < nathan7> oh man this'd make for grand mischief
00:02 < schofld> ok so 'text' is an object of the 'parse' object
00:02 < nathan7> ..no
00:02 < schofld> ??
00:02 < nathan7> it's a property of the object returned by the parse function
00:03 < nathan7> You are *calling* parse
00:03 < schofld> isn't the property the string it self in 'text'
00:03 < nathan7> It *returns* an object
00:03 < nathan7> schofld: the property name is text, the property value is the string inside
00:04 < schofld> yes 'parse' returns an object called 'text' in the 
00:04 < nathan7> the returned object has a text property
00:04 < nathan7> it returns an object which remains nameless
00:04 < schofld> 'text' object has the probperty 'my string
00:04  * nathan7 gives up
00:04 < schofld> ok i get it now 
00:04 < schofld> :)
00:04 < tnorris> TooTallNate: your `ref` lib is awesome.
00:05 < TooTallNate> tnorris: thanks :)
00:05 < TooTallNate> tnorris: it's the heart of node-ffi
00:05 < schofld> {} object >> has properties ex a: and b: 
00:05 < schofld> or text:
00:05 < nathan7> mhm
00:06 < schofld> if not.. fuck it :D i know how it works 
00:07 <@Nexxy> omg
00:07 <@Nexxy> this channel
00:07 <@Nexxy> it's just... so...
00:07 <@Nexxy> so friendly!
00:07 < substack> pomo
00:07 < nathan7> Hi Nexxy 
00:07 < substack> post modern
00:07 <@Nexxy> hi nathan7 
00:07 < substack> post post modern
00:07 < bnoordhuis> Nexxy: don't worry, we'll soon change that
00:07 <@Nexxy> popomo?
00:07 < substack> perhaps
00:08 <@Nexxy> bnoordhuis, nevar~!
00:08 < substack> (function post () { return post('modern') })()
00:08 < nathan7> A friend of mine uses a console font in which 'm' looks exactly like 'rn'
00:08 < bnoordhuis> oh, just wait
00:08 < mscdex> Nexxy, \o/
00:08 <@Nexxy> post('mortem')
00:08 <@Nexxy> mscdex, \o/
00:08 < nathan7> so I go 'pom pom pom' and he reads 'porn porn porn'
00:08 < schofld> :D
00:08 < nathan7> ..no wait, that can't be
00:09 < nathan7> it probably was a graphical IRC client, that'd be impossible in monospace
00:09 <@Nexxy> you've been lied to.
00:09 < CoverSlide> probably
00:09 < nathan7> No, he used to use graphical shit before I showed him the One True Wayâ„¢ q=
00:10 <@Nexxy> nathan7, irssi?
00:10 < CoverSlide> rnaybe he is just a rnoron
00:10 < niggler> what happened to good old nirc
00:10 < nathan7> Nexxy: Of course
00:10 < bnoordhuis> niggler: did you misspell irssi?
00:11 < nathan7> C=
00:11 <@Nexxy> not to change the subject entirely, but...
00:11 <@Nexxy> http://blog.voxer.com/post/35669070710/voxer-hard-ware-hack-2012
00:11 < niggler> naim/nirc is older than irssi
00:11 < substack> Nexxy: I'll be there with a paper bag full of japanese electronics components
00:11 < niggler> bnoordhuis you kids and your fancy programs
00:12 < nathan7> Nexxy: Cool.
00:12 <@Nexxy> substack, so cool!
00:12 < bnoordhuis> niggler: so is bitchx, i think. that doesn't make it better
00:12 < substack> also going to stop by allashers to source some copper-clad
00:12 < sechrist> shipping channels are older than irc
00:12 < nathan7> Shame I'm on the other end of the world
00:12 < sechrist> http://www.youtube.com/watch?v=O2rGTXHvPCQ
00:12 <@mbalho> Nexxy: just got all my components!!!
00:12 < substack> I need to etch some boards for these surface-mount chips
00:12 <@Nexxy> mbalho, \o/ ohhhh snap~!!1
00:12 < bnoordhuis> niggler: and for the record, i was around before there was irc :)
00:12 <@Nexxy> substack, I'm bringing a heat gun!
00:12 < CoverSlide> haha i remember that episode
00:12 <@mbalho> Nexxy: which include: a PID, thermocouple, water pump, relays, resistors, diodes etc
00:12 < niggler> bitchx is is younger than irssi
00:12 < substack> Nexxy: rad
00:12 <@mbalho> Nexxy: oh and more of those piezo electric transducers
00:12 <@Nexxy> ooh
00:12 < tnorris> TooTallNate: so, to store a Uint64 value, do you just pass in a string?
00:12 <@Nexxy> there might be moar piezos too
00:13 < sechrist> bitchx got like 3 of my boxes comped back in the day
00:13 < sechrist> terrible remote 0day
00:13 < nathan7> ..goddamn you and your hackdays with all my favourite things
00:13 < TooTallNate> tnorris: ya that'll work. a Number (within precision of course) or a String
00:13 < CoverSlide> 3y3 ju5+ h4xx0r3d j00r m4m4
00:13 < niggler> lol CoverSlide
00:13 <@Nexxy> nathan7, are you in SF?
00:13 < nathan7> soon you'll have hackdays with JS, electronics and with chemistry to
00:13 < nathan7> *too
00:13 < nathan7> Nexxy: No, I'm in the land of weed and hookers across the pond
00:14 < bnoordhuis> nathan7: you're in NL?
00:14 < nathan7> What other land of weed and hookers is there?
00:14 < niggler> CoverSlide i thought we got past that
00:14 < niggler> nathan7: colorado
00:14 < sechrist> sf definitely is land of weed
00:14 < TooTallNate> i thought they were cracking down on weed these days
00:14 < sechrist> or well the area
00:14 < CoverSlide> your mom would disagree
00:14 < TooTallNate> or something...
00:14 < niggler> actually we may need to hit up washington
00:14 < bnoordhuis> nathan7: where in the NL are you?
00:15 < nathan7> bnoordhuis: Hoofddorp. 30km from Amsterdam.
00:15 < nathan7> TooTallNate: Not really
00:15 < bnoordhuis> nathan7: hoofddorp... what did you do?
00:15 < CoverSlide> does anyone call it holland anymore?
00:15 < sechrist> like every dispensary I know of, even in sf, is still open
00:15 < nathan7> bnoordhuis: Hm?
00:15 < nathan7> niggler: I clarified with 'on the other end of the pond'
00:15 < bnoordhuis> nathan7: well, hoofddorp is what i always imagined hell would be like
00:15 <@mbalho> omg u gys smoke marijwana cigareretes thats illegal
00:16 < bnoordhuis> nathan7: nothing to do and not a pub in sight
00:16 < nathan7> bnoordhuis: I don't like places filled with people
00:16 < bnoordhuis> nathan7: i know the feeling. but what about pubs?
00:16 < niggler> lol mbalho s/marijwana/clove/
00:17 < nathan7> bnoordhuis: and I am in Amsterdam in less than an hour if I want to go anywhere
00:17 < bnoordhuis> nathan7: if you're in 020 (amsterdam) thursday or friday, i'll buy you a beer
00:17 < bnoordhuis> (the next rounds are on you, of course)
00:17 < nathan7> bnoordhuis: heh
00:17 < nathan7> bnoordhuis: I'm not a beer person
00:17 < Disil> http://pastebin.com/mMBwPsgE Any idea what's up with this? This error just came out of nowhere...
00:17 < nathan7> bnoordhuis: Maybe you should drop by TechInc, the Amsterdam hackerspace
00:17 < bnoordhuis> nathan7: i am. i'll drink yours
00:17 < bnoordhuis> i guess i should. people keep inviting me...
00:18 < nathan7> bnoordhuis: :>
00:18 < nathan7> Maybe I'll appear next wednesday
00:18 < bnoordhuis> aww. i'm never in 020 on wednesdays
00:18 < nathan7> bnoordhuis: Damnit
00:18 < nathan7> bnoordhuis: that's TechInc social evening
00:18 < nathan7> bnoordhuis: Where do *you* live?
00:19 < bnoordhuis> nathan7: the fair and very pitoresque city of gouda
00:19 < bnoordhuis> i guess that's spelled 'pittoresque' in your heathen tongue
00:20 < nathan7> mhm
00:21 < bnoordhuis> nathan7: are you ever in utrecht?
00:21 < bnoordhuis> (that's the other major city i frequent)
00:22 < sechrist> omg the supported php buildpack from heroku is apache running in every dyno
00:22 < nathan7> bnoordhuis: No
00:22 < sechrist> heinous
00:22 < niggler> what would you expect sechrist
00:22 < bnoordhuis> nathan7: well, that's not helping
00:23 < sechrist> I mean they already have an erlang routing mesh behind ELBs
00:23 < sechrist> I expected something lighter weight at the dyno level
00:23 <@Nexxy> php-fpm + nginx + apc?
00:23 < sechrist> that is what i am thinking yes
00:23 < niggler> most php people assume apache
00:23 < nathan7> bnoordhuis: fridays.
00:23 <@Nexxy> sechrist, I would have assumed that as well
00:23 < bnoordhuis> nathan7: fridays what?
00:24 < nathan7> bnoordhuis: I'm in Amsterdam on fridays too at times
00:25 < bnoordhuis> nathan7: ah okay. drop me a line when you feel like a beer
00:25 < bnoordhuis> can't promise i'll be around but if i am, i'll probably be up for a beer
00:25 < bnoordhuis> or two
00:25 < CoverSlide> nice, irc hookups
00:26 < bnoordhuis> CoverSlide: you should've seen me when i still idled in #teenagers
00:27 < nathan7> bnoordhuis: You're doing fine on that front. I'm 17.10.
00:28 < bnoordhuis> nathan7: is that the new a/s/l?
00:28 < nathan7> bnoordhuis: I give my age to four significant digits.
00:29 < nathan7> I consider age insignificant, so I take the precision in the absurd direction.
00:29 <@konobi> pppffttt... give it in beats
00:29 < bnoordhuis> nathan7: well, i'm with you in that age is insignificant
00:29 < niggler> nathan7 the number is meaningless without units
00:29 < bnoordhuis> i only care about the s and the l
00:29 < niggler> it could be 17.10 decades for all we know
00:29 < nathan7> Years are the standard unit for age, niggler.
00:30 < bnoordhuis> (i kid, groupies. i'm a married man)
00:30 < nathan7> niggler: Don't.. niggle q=
00:30 < niggler> that's like volume at 11
00:33 < nathan7> I wonder if I can style a bunch of radio buttons to look like a split button
00:33 < CoverSlide> sure you can
00:34 < CoverSlide> display:none and use labels
00:34 < CoverSlide> and classNames
00:34 < CoverSlide> and javascript
00:34 < nathan7> hmm
00:34 <@konobi> nathan7: there's also shadow dom
00:34 < nathan7> shadow dom?
00:35 < nathan7> hmm
00:35 <@konobi> there's a jsconf.eu video on the subject
00:35 < mscdex> shadow dom sounds like something out of a double dragon game
00:37 < nathan7> konobi: found it
00:39 < tnorris> TooTallNate: in ref-array readme, doesn't look like you mention that you can initialize with an existing buffer.
00:40 < styol> Is nodetime the go-to recommendation for profiling or are there some other options I may be missing?
00:40 < TooTallNate> tnorris: sure, just pass the Buffer in as the first argument
00:40 < TooTallNate> tnorris: i probably need to update the Readme to note that 
00:40 <@konobi> node-webkit-devclient is pretty good
00:41 < styol> konobi: I'm having a hard time finding that one, do you perhaps mean webkit-devtools-agent?
00:42 <@konobi> yup
00:42 < tnorris> TooTallNate: yeah. that's what I was noting. This thing is great. I'm going to be perf testing the crap out of it against current Buffer and TypedArray implementations.
00:42 <@konobi> the repo has a different name to the npm package, so i always mix em up
00:42 < styol> konobi: I actually wasn't able to get it to work, I'm guessing because of the internal network lockdown here at work.
00:43 < TooTallNate> tnorris: ok cool. i would expect the ref-array to be a lot slower than TypedArray, just fyi
00:43 < styol> konobi: that github hosted inspector.html is the only option for inspection?
00:43 < TooTallNate> tnorris: the little ref- family is growing too, try them all ;) https://github.com/TooTallNate/ref/wiki/Known-%22types%22
00:44 < tnorris> TooTallNate: don't be so sure. just tested instantiating a Uint32Array and yours was about 30% faster than the native.
00:45 < styol> I also evaluated node-inspector + v8-profiler but it seems to be borxzored for later versions of node
00:46 < TooTallNate> tnorris: that very much surprises me :)
00:48 < tnorris> TooTallNate: not sure it matters, but there's discussion of binary data in the es6 spec: http://wiki.ecmascript.org/doku.php?id=harmony:binary_data_discussion
00:48 < tnorris> just has a few implementation details for int64 values.
00:48 < TooTallNate> tnorris: ya i started off implementing those directly
00:49 < TooTallNate> tnorris: until i realized they're kinda incomplete
00:49 < tnorris> awesome. already way ahead of me.
00:53 < styol> konobi: just because you've used it before, you are indeed using the github hosted inspector.html and a publicly available server?
00:54 < voodootikigod> where is teh link to the logs?
00:54 < voodootikigod> !log
00:54 < voodootikigod> !logs
00:54 <@mbalho> voodootikigod: ill email em to you, one sec
00:55 < voodootikigod> the link or the resolution?
00:56 < voodootikigod> mbalho: DM me
01:03 < nathan7> konobi: this is cool shit
01:06 <@konobi> styol: been a while since i've used it, but i did get it working locally somehow
01:06 <@konobi> the script for that server is in the repo, iirc
01:08 < styol> konobi: thought I couldn't find it but I'll dig a lil deeper, thanks dood
01:09 < niggler> konobi where's purr
01:10 < nathan7> konobi: k, so shadow DOM is cool and magic and I can't use it
01:16 <@konobi> nathan7: =0)
01:19 <@konobi> nathan7: yeah, depends on the audience
01:19 < nathan7> konobi: styling radio buttons works fine by the way
01:20 < nathan7> konobi: My audience doesn't run Chrome Canary with a bunch of obscure flags
01:20 < CoverSlide> in non-ie
01:20 < nathan7> oh fuck fucking IE
01:20 <@konobi> nathan7: there's always appjs =0)
01:20 < nathan7> If you're on IE you don't deserve my code
01:20 < nathan7> konobi: true
01:21 < niggler> woah woah woah nathan7 what's with this browserism
01:21 < nathan7> oh hey, appJS is partially Benvie's fault
01:21 < niggler> browsism?
01:21 < nathan7> I was unaware of that
01:21 < nathan7> niggler: nah, shit-working-ism
01:21 < Benvie> lol
01:22 < Benvie> I have a remedy for your IE ills, although it's not production ready
01:23 < nathan7> Cool.
01:23 <@konobi> forced chrome frame?
01:23 < nathan7> heh
01:23 < Benvie> not exactly
01:23 < nathan7> A large "download Chrome" button?
01:24 < Benvie> http://benvie.github.com/continuum/ runs in ie8
01:25 < nathan7> Benvie: that doesn't help
01:25 < nathan7> Benvie: it won't let me style <input type="radio">s
01:25 < Benvie> I'm working on that too, though that's secondary
01:25 < CoverSlide> ok, now all you have to do is port css3, canvas, svg, and new browser apis to IE and we'll have fixed that IE issue
01:26 < styol> nathan7: custom cross-browser form elements can be a nightmare. If you're using jQuery, one option might be uniform http://uniformjs.com
01:26 < Benvie> well canvas and svg are already ported 
01:26 < Benvie> via flash
01:26 < Benvie> I don't need to do that work
01:26 < nathan7> styol: I am porting this shit away from goddamn jQuery :|
01:26 < CoverSlide> ok, now make border-radius work
01:26 < CoverSlide> and gradients
01:26 < CoverSlide> btw you don't need flash for canvas or svg
01:26 < Benvie> well I mean you could use csspie for that and get most of it, though I wasn't thinking of that
01:26 < styol> CoverSlide: http://css3pie.com haha
01:26 < CoverSlide> there's excanvas and raphael
01:27 < Benvie> yeah I was referring to excanvas
01:27 < Benvie> and there's a flash svg polyfill which I would use over raphael
01:27 < nathan7> But yeah, I might just overlay it like a type="file" and be done with it
01:27 < CoverSlide> true
01:27 < CoverSlide> raphael in vml mode is shit
01:28 <@konobi> there's all the Modernizr polyfill stuff
01:28 < Benvie> technically, if you have canvas you could render the DOM yourself
01:28 < CoverSlide> true
01:29 < nathan7> Benvie: heh
01:29 <@konobi> https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills
01:29 < Benvie> continuum includes typed arrays and data view
01:29 < Benvie> in ie8
01:29 < nathan7> I was unaware of type="range"
01:30 < CoverSlide> awareness is the first step
01:31 < Benvie> https://github.com/Benvie/continuum/blob/gh-pages/experimental/dom-codegen-output.js
01:32 < AAA_awright> Half of those aren't "HTML5" *cringe*
01:33 < Benvie> that's generated from the HTML5 spec and the DOM4 spec
01:33 < Benvie> oh
01:33 < Benvie> the polyfill list
01:34 < CoverSlide|Away> what do you call the new javascript apis?
01:34 < CoverSlide|Away> i have calling them "new javascript apis" around semantics nazis
01:34 < CoverSlide|Away> *hate
01:34 < Benvie> I usually just refer to specific ones and use the name of the spec they come from
01:35 < SomeoneWeird> harmony?
01:35 < fwg> CoverSlide|Away: ES.next
01:35 < Benvie> if you mean the stuff specific to js, either es6 and es-next since they're no longer the same thing
01:36 < euoia> Let's say I'm writing a library and this library has a configurable option to emit debug logging. But how do we respect the client's choice of logging module? Has anyone seen a good solution to this problem?
01:36 < fwg> Benvie: they're not? what's the difference?
01:37 < Benvie> the first proposal that will not be in es6 was accepted to be worked on
01:37 < Guest1> Q: i think i am dealing with serialized data stream of Action Script (flash) objects. Is there any javascript wrapper?
01:37 < Benvie> that being the Object.observe proposal
01:37 < xenol> Hi, I would like to ask how can I create readableStream out of multicast stream? I am writting a streaming application, however my output is not watchable (laggy screen). Doing this with files via streams works nicely.
01:37 < Benvie> so since there's now something that officially is going to be in the thing after es6, it seems approriate to refer to that thing as es-next
01:37 < xenol> any hints appreciated
01:37 < fwg> euoia: make a funtion setDebugLogger or whatever that takes a function that takes two parameters: message and severity. people can write a simple wrapper for their choice of logging
01:39 < euoia> fwg: Okay - that was my thought. Log using a defined interface and allow the client to create a wrapper.
01:42 < fwg> xenol: can you be more specific? do you mean buffering the packets in a file makes the stream non-laggy?
01:43 < xenol> fwg: I seem to have issues with buffering the multicast stream
01:43 < Guest1> looks like http://www.jamesward.com/2010/07/07/amf-js-a-pure-javascript-amf-implementation/ is the way
01:43 < xenol> I would like to see how is that solved in fs.createReadStream
01:44 <@konobi> you can read the source =0)
01:44 < xenol> might not be fun though
01:44 <@konobi> should be easy enough, it's all in javascript at that point iirc
01:45 < fwg> node's sources are very nice to read
01:45 < xenol> I prefer reading python/illumos sources :)
01:46 < xenol> I would just be interested how can I create readable stream of out dgram data
01:48 < xenol> found it
01:48 <@konobi> xenol: a socket is a readable stream
01:49 < euoia> Would it be terrible to define a make command that links directories inside my applications lib/ dir to node_modules so that I can use require without specifying a relative path?
01:49 < xenol> konobi: yes, it is, but the video is laggy
01:49 < xenol> I expect it needs to get buffered at some point
01:50 < xenol> am I wrong?
01:50 < Eiam> I'm looking for a way to generate a chart (like a flotr2.js chart) that can be emailed out, so I wouldn't be able to actually generare it by loading a 'page in a browser'.. node seems like it would be a possible solution avenue but, I've never used node 
01:50 < mscdex> Eiam: there is a canvas module for node
01:50 < mscdex> at least one
01:50 <@konobi> xenol: increase the mtu?
01:51 < xenol> konobi: it won't solve the issue
01:51 <@konobi> xenol: what's the client?
01:51 < xenol> konobi: VLC
01:52 <@konobi> is VLC doing any buffering?
01:53 < Eiam> mscdex: learnboost/node-canvas i suppose?
01:53 < mscdex> Eiam: yep
01:53 < xenol> konobi: should be doing on the client side
01:53 < radiodario> Eiam: you can use zombiejs and d3 
01:54 < radiodario> and save out the generated svg onto a file?
01:54 <@konobi> xenol: got a gist of how you're sending the data?
01:54 < Eiam> radiodario: how is that going to load in an email?
01:54 < radiodario> dunno, convert the svg to pdf
01:54 < xenol> konobi: one sec
01:54 < Eiam> radiodario: how is a server going to generate the dom on its side to email out?
01:54 < radiodario> with zombie.js
01:54 < Eiam> radiodario: without a user hitting the route
01:54 < Eiam> hmm i see
01:54 < radiodario> my friends at the guardian use that
01:55 < xenol> konobi: this is my current code: http://pastebin.com/WVJNLuUd
01:55 < radiodario> for d3 on ie
01:55 < radiodario> they run it on node.js and send a png 
01:55 < radiodario> they do it once, and cache it or whatever, but the same principle could work for you
01:55 < Eiam> radiodario: hmm, well we use flotr2.js for charting but
01:55 < Eiam> same difference i suppose
01:56 < Eiam> i mean either way it looks like we are going to have to bring up node instead of rails
01:56 < radiodario> don't know about flotr really
01:56 < mscdex> it's not flotr, but there's a module that uses node-canvas for graphs/charts: https://github.com/davidberneda/TeeChart
01:57 < misterhat> o
01:57 < radiodario> i recommend you use d3, because it's awesome and i love it and parties and unicorns
01:57 <@mbalho> radiodario: do the guardian people have a module for that workflow? sounds cool
01:57 < radiodario> i'll tweet dave, might be on his github
01:57 <@mbalho> radiodario: i know rich harris there but dont see any d3 stuff on his githubz
01:58 < radiodario> dunno i met them at strata in london and i was like ok so you use raphael for graphics right
01:58 < Eiam> radiodario: I'd like to use d3 one day but I'm pretty heavily invested in flotr2 having used it for many years with many custom modules & such. I also don't need the sort of advanced visualizations d3 is known for, I'm realy just doing almost basic charts
01:58 < radiodario> and he was like no man we use d3 but we render it on the backend for ie users
01:58 <@mbalho> cool
01:58 < Eiam> so get up to speed on d3 just to use it when i don't need its features vs implement something else is the basic barrier =)
01:58 < radiodario> mbalho: but defo i'll ask
01:59 < Eiam> radiodario: I'll stick around in the channel incase you hear back it would be cool to see if they've got something already built for that workflow
01:59 < Eiam> save me the trouble certainly
01:59 < radiodario> but it shouldnt' be that hard, i guess you could have a trigger on the client side that detects ie and sends a request to a sever that triggers the whole d3 + zombie shebang
02:00 < Eiam> radiodario: probably on this side a rake task that sends a poke to node to trigger zombie + flotr2 generation
02:00 < konobi> xenol, you only need to send to one socket, no?
02:00 < Eiam> but yeah it does't seem too tricky, appreciate the pointer to zombie & tee
02:00 < xenol> konobi: I want to send it to all subscribed clients
02:01 < konobi> xenol: isn't that the mature of the dgram socket being multicast?
02:01 < konobi> *nature
02:01 < radiodario> Eiam: http://stackoverflow.com/questions/11632748/svg-to-png-server-side-using-node-js
02:01 < xenol> konobi: one second till I check something
02:02 -!- mode/#node.js [+o konobi] by ChanServ
02:02 < radiodario> it should be easier with zombie
02:03 < xenol> konobi: first of all, I got that wrong. I thought that for every new request my machine will generate new IGMP query to join the multicast group
02:03 < xenol> but due to the asynchronous nature of node, this is wrong
02:04 < xenol> I see that message event of socket is Buffer
02:04 < xenol> doing stream out of this could solve the issue
02:05 <@konobi> xenol: create a readable stream of your file called "bleh", then just bleh.pipe(socket)
02:06 < xenol> konobi: my source is dgram socket, not file..
02:07 <@konobi> oh, you're going from dgram to tcp
02:08 < xenol> yup, mutlicast to http relay to be more precise
02:08 <@isaacs> xaka: thanks :)
02:10 <@konobi> xenol: dgram.pipe(client) ?
02:10 < hbeck> newbie question... may be more JS than node related... if I am trying to grab the value of a specific header from an http request, how would I do that? And what would the value be if the header didn't exist in the request?
02:10 < radiodario> undefined?
02:10 < radiodario> u using express?
02:11 < hbeck> not using express
02:11 < xenol> konobi: dgram doesn't pipe method according to http://nodejs.org/api/dgram.html
02:11 <@mbalho> hbeck: require('http').createServer(function(req, res){ console.log(req.headers) })
02:11 < xenol> konobi: look further at Socket object, I don't see pipe there either
02:11 < hbeck> mbalho: yeah that gets all of them, what if I want to extract one out of there?
02:11 < hbeck> saw lots of examples of the get all headers :)
02:12 <@mbalho> hbeck: req.headers['content-type']
02:12 <@mbalho> hbeck: will either be the content type or will return undefined. req.headers is just a object {}
02:13 < hbeck> mbalho: thanks I am doing it correct then. In javascript, if I test that var will the world explode if it is undefined? (null pointer type thing)
02:13 <@konobi> xenol: mmm... yeah, makes sense since you don't have a "stream" as such
02:13 < MI6> joyent/node: Ryunosuke SATO v0.8 * 8316145 : doc: Fix missing link target to 'https.request()' - http://git.io/qljz_g
02:14 <@mbalho> hbeck: if you have an object like var foo = {bar: "hello"} then foo and foo.bar or foo['bar'] and foo.bar.baz are okay but if you do foo.bar.baz.pizza it will throw an exception and the world will explode
02:14 < hbeck> mbalho: noted, thanks
02:15 <@konobi> xenol: yeah, not sure how a client like VLC deals with buffering udp multicast streams
02:16 < xenol> konobi: I think this is an issue with data I am writing to clients[i].write(data) being a buffer, not a stream
02:17 <@konobi> no, that's correct
02:18 <@konobi> since the client is the stream and you're writing a buffer to it
02:20 <@konobi> xenol: 2 secs
02:23 < MI6> joyent/node: isaacs created branch streams2-net-perf-wip - http://git.io/-vSRcQ
02:24 <@konobi> xenol: mmm... not sure
02:28 <@konobi> xenol: hhhmmm... looks like libuv doesn't has any SO_RCVBUF options
02:28 <@konobi> bnoordhuis: that sound right?
02:28 < niggler> is there a simple way to trace down what source file/line corresponds to a particular line being printed via console.log?
02:30 < xenol> konobi: I am off to bed, thanks for your time
02:31 < motaro> How do I find out what version of node I'm using?
02:31 < motaro> if its 32bit or 64bit?
02:31 < acidjazz> node -v
02:32 < motaro> no bit compilation...
02:32 < acidjazz> marienz: file /usr/bin/nodejs
02:32 < acidjazz> err motaro 
02:33 <@konobi> isaacs: ping... ^^
02:38 < bnoordhuis> konobi: SO_RCVBUF? yes, it's not configurable.
02:38 < bnoordhuis> motaro: process.arch
02:38 <@konobi> bnoordhuis: huh?
02:39 < motaro> the file command told me though
02:39 < bnoordhuis> konobi: 03:26:43 <@konobi> bnoordhuis: that sound right?
02:39 <@konobi> should be using setsockopt
02:39 < motaro> Interesting, node has python dependencies?
02:39 < bnoordhuis> motaro: only for buildin
02:40 < bnoordhuis> *building
02:40 <@konobi> same with SO_SNDBUF
02:41 < bnoordhuis> konobi: they're not tunable in libuv. it's of questionable value with non-blocking i/o
02:42 <@konobi> would depend on the size of stream i'd suppose
02:42 < bnoordhuis> with tcp you usually want TCP_CORK=0|1 - which _is_ tunable
02:43 <@konobi> oh, i mean for udp
02:43 < acidjazz> whats the phpmyadmin for nodejs+mongo ?
02:44 < misterhat> rockmongo
02:44 < misterhat> works pretty well
02:44 < misterhat> if you need it to be a php app
02:45 < misterhat> https://github.com/wearefractal/smog
02:45 < acidjazz> misterhat: nono.. nodejs' equivalent
02:45 < misterhat> yeh try that ^
02:45 < bnoordhuis> konobi: i don't know about sunos but linux usually doesn't buffer outgoing traffic
02:45 < bnoordhuis> it either sends or it doesn't (because the datagram is too large)
02:46 < bnoordhuis> there is UDP_CORK but that has the opposite effect of what i believe you guys were discussing
02:47 < bnoordhuis> i.e. it buffers until it hits the mtu
02:47 < acidjazz> thanks misterhat this is great
02:48 < misterhat> no problem acidjazz
02:51 <@konobi> bnoordhuis: i suppose the "proper" non-blocking route would be to set SO_RCVBUF to 0
02:52 < voodootikigod> bnoordhuis: fyi net.socket wont work
02:52 < voodootikigod> doesnt read off the FD
02:54 <@konobi> voodootikigod: passed with { fd: 42 } ?
02:54 < voodootikigod> correct
02:54 < voodootikigod> connect is never emitted
02:54 < voodootikigod> nor is data ever emitted
02:55 < voodootikigod> https://gist.github.com/2cedfc513026692e90b2
02:55 <@konobi> urgh
02:55 < voodootikigod> tell me about it :0
02:55 < voodootikigod> \
02:55 < acidjazz> hmm misterhat trying to install smog.. having issues
02:55 < acidjazz> misterhat: shoudl i use npm or grab the .tar.gz ?
02:56 < misterhat> i would think npm would be easier
02:56 < misterhat> what's the issue
02:56 < acidjazz> inode_modules/smog/node_modules/vein/node_modules/protosock/node_modules/engine.io/lib/engine.io.js:110
02:56 -!- mode/#node.js [+o Nexxy] by ChanServ
02:57 < acidjazz> i did npm install dmog
02:57 < acidjazz> creates a folder node_modules/ where smog lives
02:57 < acidjazz> node_modules/smog/bin/smog
02:59 < acidjazz> misterhat: shoudl i download the tar.gz and then just npm install -d
02:59 < misterhat> yeah  try that
03:00 < voodootikigod> konobi: it does end though (hurray)
03:00 < acidjazz> same error
03:00 < voodootikigod> konobi: but it doesnt read...
03:00 < voodootikigod> tradeofs
03:01 < acidjazz> misterhat http://pastebin.com/q4tM90K1
03:01 <@Nexxy> we are among royalty
03:03 < misterhat> acidjazz: could be outdated
03:03 < acidjazz> huh
03:04 < misterhat> the module
03:04 <@konobi> voodootikigod: try just a plain number instead of the { fd: ... } object
03:05 < voodootikigod> dowat
03:05 < voodootikigod> wait
03:05 < voodootikigod> i might have it
03:05 < acidjazz> misterhat: latest checkin is a month ago
03:06 < misterhat> not sure i've never used it myself
03:06 < misterhat> try googling for the error
03:12 < voodootikigod> konobi
03:12 < voodootikigod> so i got it to work properly with node-serialport (so my care is done) but still fails with "special paths" FD
03:12 < voodootikigod> so for me
03:12 <@konobi> voodootikigod: try .resume()
03:13 < voodootikigod> i dont care any more :)
03:13 < voodootikigod> when?
03:13 < voodootikigod> before destroy?
03:13 <@konobi> after the new net.Socket
03:13 < voodootikigod> oh i got it to work with createReadStream
03:13 < voodootikigod> key was, setTimeout ()
03:13 <@konobi> ah
03:13 < voodootikigod> despite createReadStream "looking" sync
03:14 < voodootikigod> its async-ish
03:14 < voodootikigod> so next time, when you run destroy, it didnt work
03:14 < voodootikigod> time/tick
03:14 < voodootikigod> destroy immediate
03:14 < voodootikigod> if you setTimeout it works
03:14 < voodootikigod> having the person who initially sent me on this goose chase test it
03:14 < voodootikigod> but i feel (for me) its good
03:15 < voodootikigod> this: https://gist.github.com/1d6832964aaf2c860a6c
03:15 < voodootikigod> still doesnt work
03:15 < voodootikigod> and i know will bite me again later
03:15 < voodootikigod> but for now
03:15 < voodootikigod> HOPPIES
03:16 < acidjazz> i cant believe theres no nodejs+mongodb like phpmyadmin
03:18 <@konobi> acidjazz: http://www.mongodb.org/display/DOCS/Admin+UIs
03:18 < acidjazz> yea man i went through teh list
03:19 < acidjazz> search or node on that page konobi 
03:19 <@konobi> so pick one and move along =0)
03:20 < acidjazz> there is none
03:20 < acidjazz> there are 0 to pick
03:20 <@konobi> there are lots to pick
03:20 < acidjazz> in order to pick 1 id need more than 0
03:20 <@konobi> just none built on node
03:20 < acidjazz> exactly
03:20 <@konobi> so...
03:21 < acidjazz> im not installing another web server+language just to admin my db
03:21 <@konobi> then write one
03:22 <@konobi> or use one of the gui apps you can download a binary for
03:24 < ReinH> Hi folks. I'm having a bit of trouble with some callback spaghetti. Would a gist be a good way to pose the question?
03:24 < misterhat> yeah
03:29 < ReinH> here: https://gist.github.com/4158865
03:29 < ReinH> thanks
03:30 < ReinH> further context is that I then want to emit the decorated messages via socket.io
03:35 < zeuslalkaka> ReinH: Async map
03:36 < fg3> does node have a code review site?
03:36 < ReinH> zeuslalkaka: seems good
03:37 < ReinH> one problem is that this library doesn't seem to abide the (err, result) contract of node callbacks
03:37 < zeuslalkaka> ReinH: https://github.com/caolan/async#map
03:37 < ReinH> which probably means I should use a different library
03:37 < ReinH> sigh
03:37 < ReinH> this is why we can't have nice things
03:37 < zeuslalkaka> ReinH: You can also probably wrap it
03:37 < zeuslalkaka> or just deal with it.. its not that big of a deal, i dont async map requires error first
03:38 < ReinH> oh, ok
03:38 < zeuslalkaka> sorry
03:38 < ReinH> zeuslalkaka: um, maybe I'm confused.
03:38 < zeuslalkaka> "iterator(item, callback) - A function to apply to each item in the array. The iterator is passed a callback which must be called once it has completed with an error (which can be null) and a transformed item"
03:38 < zeuslalkaka> i was wrong
03:39 < ReinH> :(
03:39 < misterhat> ugh vista
03:39 < zeuslalkaka> but the idea is that when you write your iterator function, make it output the error first
03:39 < zeuslalkaka> it doesnt have to use an error first api
03:39 < zeuslalkaka> your iterating function just needs to implement it
03:40 < ReinH> right, my iterator function would be a function that takes the item and a calback of (err, transformed_item)
03:42 < zeuslalkaka> ReinH: https://gist.github.com/4158886
03:43 < ReinH> that's what I was about to ask.
03:43 < ReinH> thanks
03:43 < misterhat> so are gists preferred here over pastebin?
03:43 < zeuslalkaka> meh, dont think it matters.
03:43 < misterhat> o
03:43 < misterhat> k
03:44 < zeuslalkaka> ReinH: that example uses a client that doesnt pass any error, but hopefully you get the idea of how that doesnt matter
03:45 < zeuslalkaka> also, now im curious, if the client doesnt use error first, how is it passing errors to you/
03:45 < zeuslalkaka> (or is it just error last?)
03:46 < zeuslalkaka> ReinH: Also props on the easily framed question. Thats always nice.
04:10 < acidjazz> what is this
04:10 < acidjazz> sh: 1: moc: not found
04:11 < sinclair|work> anyone here familiar with module._compile () ?
04:12 < niggler> sinclair|work: that '_' is a hint to stay away
04:12 < sinclair|work> niggler: probably
04:13 < sinclair|work> niggler: _compile() seems to dynamically add js script to the current modules exports
04:13 < sinclair|work> niggler: which seems really really useful
04:13 < acidjazz> > moc ./src/HookedPage.h  -o ./src/HookedPage.moc && node-waf configure build
04:13 < acidjazz> wtf is moc
04:14 -!- mode/#node.js [+o ryah] by ChanServ
04:14 < niggler> acidjazz mocha
04:14 < acidjazz> its listed in packages.json
04:15 < sinclair|work> niggler: for example...
04:15 < sinclair|work> module._compile('exports.foo = function(n) {return n;}', 'foo.js');
04:15 < niggler> lol nvm its from Qt
04:15 < sinclair|work> var n = module.exports.foo(123); // all good
04:15 < niggler> i thought you may have truncated mocha
04:15 < acidjazz> TypeError: Object #<Object> has no method 'listeners'
04:15 < acidjazz> what does it want w/ Qt ?
04:16 < sinclair|work> niggler: that's highly useful, if not using _compile, then what?
04:16 < acidjazz> niggler: why does smog want a qt binary
04:16 < niggler> acidjazz: smog?
04:17 < acidjazz> > pane@0.0.10 install /home/kevinolson/smog/node_modules/pane
04:17 < acidjazz> its pane thats causing this error
04:17 < acidjazz> niggler: https://github.com/wearefractal/smog
04:18 < acidjazz> deps https://npmjs.org/package/pane
04:24 < niggler> acidjazz it says there's a desktop UI
04:24 < niggler> maybe the dependencies were included
04:25 < acidjazz> how can i search in apt which package contains the binary 'moc'
04:30 <@konobi> apt-file
04:32 < acidjazz> lol that install wiped out npm
04:34 <@konobi> acidjazz: https://npmjs.org/package/pane check the readme
04:35 < acidjazz> yea i got past that
04:35 < acidjazz> back at this error
04:35 < acidjazz> TypeError: Object #<Object> has no method 'listeners'
04:37 <@konobi> doesn't mean much without a gist
04:37 < acidjazz> https://gist.github.com/4159036
04:38 < acidjazz>   var listeners = server.listeners('request')                                                                      
04:43 < acidjazz> konobi: no idae?
04:43 < acidjazz> idea*
04:46 < q88qlsd> hello, is there anyone here that has looked at the fuse4js javascript binding by the vmware team?
04:57 < mdedetrich> so guys
04:57 < mdedetrich> how is stuff
04:59 < sinclair|work> mdedetrich: alright
05:00 < mdedetrich> well thats not very uplifting!
05:00 < sinclair|work> mdedetrich: tinkering with the ts compiler agani
05:00 < sinclair|work> *again
05:02 < mdedetrich> sinclair|work: is it buggy or something?
05:02 < sinclair|work> mdedetrich: no, ive been trying to plug it into node in a 'sane' way
05:03 < fent> is there a module that can help parse a string so that it can be used for searching like how google.com works?
05:04 < sinclair|work> fent: ...... what kind of question is that
05:05 < smith_> you mean a stemmer, or some such?
05:05 < smith_> using System.Web;
05:05 < wolfes> fent: do you mean finding things like "and", "or", "not" constructs in a query string?
05:05 <@konobi> acidjazz: no idea
05:05 < smith_> https://github.com/jedp/porter-stemmer
05:05 < smith_> https://github.com/NaturalNode/natural
05:05 < fent> i didn't know how to word it
05:05 < smith_> https://encrypted.google.com/search?hl=en&q=node.js%20stemmer
05:05 < fidoto> autocomplete?
05:06 <@konobi> acidjazz: it's deep enough in dependency libraries that it'd be hard to know
05:06 < fent> wolfes: yes that's what i mean, and constructing an object based on the string. the object can be used to search like a database
05:08 <@konobi> fent: so from a string you want to build up an index?
05:10 < wolfes> fent: or do you mean given a string like: lunch "gary danko" â€”> find results that have 'lunch' or the phrase 'gary danko' 
05:10 <@konobi> fent: full text indexing is another huge topic in and of itself... i'd suggest outsourcing it to something more specific for that
05:11 < fent> konobi: i want to make a list of possible queries from a string
05:11 < wolfes> oh, more like autocomplete?
05:11 < acidjazz> konobi: :(
05:11 < wolfes> like given "rest", get a list like "restroom, restaurant, ..."
05:11 <@konobi> acidjazz: looks like it should be coming from event emitter
05:12 < fent> wolfes: no not autocomplete
05:12 <@konobi> but for whatever reason the method isn't getting inherited
05:12 <@konobi> fent: examples needed
05:12 < fent> wolfes: like the example you had, with quotations, and grouping and ORs and ANDs.
05:12 < mdedetrich> does anyone know how you can observer websockets
05:12 < mdedetrich> in nodejitsu?
05:12 < rump> https://gist.github.com/4159148  please tell me this is not normal for js control flow... how to be better alternative
05:12 < mdedetrich> sorry
05:12 < mdedetrich> I mean in chrome
05:13 < mdedetrich> rump: use async
05:13 <@konobi> mdedetrich: there's a chrome extension
05:13 < mdedetrich> @konobi: whats it called?
05:13 <@konobi> or you can use the dev panel with websockets now i think
05:13 < fent> maybe i should just use regexp
05:13 <@konobi> fent: examples
05:14 < rump> mdedetrich: ive debated but id like to learn and understand something viable before i begin to rely on it
05:14 < rump> mdedetrich: would a constructor help
05:14 < mdedetrich> rump: async is what MOST people use
05:15 < mdedetrich> to deal with callback hell
05:15 < rump> ok so its not cheating
05:15 < fent> konobi: in google you can type "(foo|bar)" and it will look for results with "foo" or "bar". you can type "-store watch" and it will look for results with "watch" but not "store"
05:15 < mdedetrich> no....
05:15 < fent> konobi: something like that, just examples doesn't have to be exactly like google. but i'm thinking now that i could just use regexp
05:15 < wolfes> fent: negation is pretty easy, just split by space and check the first character for a "-"
05:15 < rump> mdedetrich: i was looking at the doc but im concerned about how to pass (waterfall) arguments without the same signatures
05:16 <@konobi> fent: http://wiki.apache.org/solr/SolrQuerySyntax style?
05:17 < yarco> you need to distinguish search engine and auto complete, guys...
05:17 < fent> wolfes: wondering if there is already a module that does this so i dont have to
05:18  * mscdex shakes a fist at SELinux
05:18 < fent> konobi: the syntax for solr seems a bit more specific. but yes something like that
05:20 < mdedetrich> rump: what do you mean exactly
05:20 < rump> mdedetrich: i need the results of each previous function
05:20 < mdedetrich> rump: then use waterfall
05:20 < wolfes> fent: http://nodejs.org/api/querystring.html isn't exactly what you're looking for, it just stringifies and parses url query object/strings
05:21 < rump> isnt waterfalls parameter signature the same?
05:21 < rump> just tuck results in objects or what?
05:21 < wolfes> fent: I'd google for some combination of: query string syntax parser search javascript
05:22 < rump> i just wish i could somehow get back to the main flow with the values....  the functional developer in me
05:23 < wolfes> fent: http://stackoverflow.com/questions/2499158/parse-search-string may be relevant
05:25 < misterhat> express.js looks very interesting 
05:25 < misterhat> it's exactly how i thought it would look
05:25 < mdedetrich> rump:in re writing your code, hold up
05:25 < rump> mdedetrich: :)
05:27 <@konobi> fent: solr?
05:29 < fent> https://github.com/isaacs/minimatch could also work
05:31 < mdedetrich> rump: https://gist.github.com/666c78e2865c943b55f6
05:31 < mdedetrich> note that I havn't tested the code
05:31 < mdedetrich> also I don't know what if (/\.ejs$/) is meant to do
05:32 < mdedetrich> but thats how async works
05:33 < rump> mdedetrich++
05:33 < rump> ill review ty
05:33 < mdedetrich> rump: check it again
05:33 < mdedetrich> I just missed something
05:33 < rump> files.length is it?
05:34 < mdedetrich> rump: yeah I fixed it now, its in wrong spot
05:34 < rump> ok
05:34 < mdedetrich> look at last edit now
05:34 < mdedetrich> for queue you have to put in how many workers at once
05:34 < mdedetrich> putting the same number of workers as the same length of the array makes it run in parallel
05:34 < mdedetrich> https://github.com/caolan/async#queue
05:34 < rump> im boggling a bit
05:34 < mdedetrich> which is what files.length is
05:34 < _numbers> i am trying to install stylus-sprites. it wants node-gd installed as a depdency. but i am using latest node so only the git master branch of node-gd will compile successfully. how do i tell npm that when installing stylus-sprites, it should use the node-gd lib i already specified in package.json and which is already installed in the local ./node_modules/ dir?
05:36 < mdedetrich> rump: boggling
05:36 < mdedetrich> ?
05:36 < mdedetrich> the thing about async, is it prevents the pyramid problem
05:36 < mdedetrich> and makes it clear what the control flow
05:36 < mdedetrich> it wont save you from callbacks though
05:36 < rump> yes im just having to look at async api cause at first it seems complex
05:36 < rump> researching it now
05:36 < mdedetrich> trust me, its probably the simplest out there when you compare it to others
05:37 < rump> yeah but i come from php where this whole program is 10 lines and simple
05:37 < mdedetrich> yeah but in PHP, that whole script would be blocking
05:37 < mdedetrich> and run shit tons slower
05:37 < rump> im a hobbyist not brainiac gurus like you all :)
05:37 < mdedetrich> thats good, we all start somewhere
05:38 < mdedetrich> I would however study what the reactor pattern is, because that is what node.js is based off
05:38 < mdedetrich> (and javascript in general)
05:38 < rump> mdedetrich: you ever use emitted events to pass control flow?
05:38 < mdedetrich> http://en.wikipedia.org/wiki/Reactor_pattern
05:38 < mdedetrich> yes, but the thing is, in node.js
05:38 < mdedetrich> all control flow is done through callbacks, every library uses the function(err,callback) form
05:39 < mdedetrich> so there may be simpler control flow libraries out there (like q)
05:39 < rump> yeah gotta stick to convention
05:39 < mdedetrich> but you end up having to write wrapper code for everything
05:39 < rump> but i'd lie if i didnt consider going back to php or trying ruby at least 3 times haha
05:39  * mscdex shakes a fist at PHP
05:39 < rump> i mean i can always get the code to work but it just seems crutched
05:39 < rump> nothing is reusable
05:40 < rump> its like walking down a freeway... and normally i can stick my head into all the side roads and come back to the big safe freeway
05:40 < rump> but with javascript i have to go down a deep dark road
05:40 < rump> until i'm in the woods
05:40 < rump> and then it dead ends
05:40 < mscdex> nonsense!
05:40 < rump> nothing ever comes back
05:40 < rump> just continues and continues
05:40 < rump> next!
05:40 < mscdex> the javascript road is well lit at night, lots of street lamps
05:40 < rump> its keeping me awake at night
05:41 < rump> haha it reminds me of alternate universes and alternate timelines
05:41 < rump> like a scifi movie
05:41 < mscdex> like back to the future 2!
05:42 < Oddman> yeah the doc was pretty dark
05:42 < rump> if i make one call theres no going back and the entire life of the program has been modified in its alternate reality and theres never going back!
05:42 < mdedetrich> in all honesty, the only thing you have to get your head around in JS
05:42 < Oddman> rump, you might like that strategy game that spans timelines
05:42 < mdedetrich> is callbacks and control flow
05:42 < mdedetrich> once that gets into your head, it all flows into place
05:42 < Oddman> nested callbacks.... woooo!
05:42  * Oddman rolls his eyes
05:43 < mscdex> you don't have to have deeply nested callbacks
05:43 < rump> mdedetrich: i was in love when i was using all sync functions for file i/o
05:43 < rump> then i opened the closet
05:43 < rump> and was terrified haha
05:43 < Oddman> and mj popped out?
05:44 < rump> heeehoo!
05:44 < rump> i start thinking of dirty things
05:44 < rump> of how to save state without callbacking
05:45 < rump> but theres no escaping it
05:46 < rump> then i read other peoples code
05:46 < rump> guys like tj
05:46 < rump> who never have a function over 10 lines and everything is sparkling clean and shiny
05:46 < rump> without even using control flow libs etc
05:46 < rump> and theres hope
05:51 < mdedetrich> sync IO is sexy, but terrible for web servers
05:51 < mdedetrich> the one thing that JS has over any other web language, is the entire library ecosystem is async
05:52 < rump> if node.js was purely sync like php/python/ruby
05:52 < rump> it'd still be the best
05:52 < rump> and the fastest, probably
05:53 < mdedetrich> fuk no
05:53 < mdedetrich> languages like python/ruby would roughly be equal
05:53 < mdedetrich> and languages like java would easily beat it
05:54 < rump> http://shootout.alioth.debian.org/u64/which-programs-are-fastest.php
05:55 < rump> i should just write in functional c :)
06:00 < mdedetrich> rump: you have to realize that the entire reason that node.js is so popular is that its entirely non blocking
06:00 < rump> yes and i see the value
06:00 < mdedetrich> which means a single node instance handles many more web requests than any other comparable framework
06:00 < rump> i mean, i choose nginx > apache
06:00 < rump> and i believe in the model
06:01 < rump> its sayin', is all :)
06:01 < mdedetrich> there is little point in using either when you use node.js
06:01 < mdedetrich> especially when you put static files on a CDN
06:01 < rump> we have a few sites so we'll proxy to node
06:01 < sril> probably been asked a million times, but has anyone tried making some sort of realtime node.js forum?
06:01 < rump> plus serve statics with nginx
06:02 < mdedetrich> sril: im not doing something similar to forum, that is in realtime using engine.io
06:02 < mdedetrich> rump: you should put your statics in a CDN
06:02 < mdedetrich> much more effecient
06:02 < rump> mdedetrich: $
06:02 < rump> or in the case of cloudflare, latency
06:02 < mdedetrich> its not that expensive, I use rackspace
06:02 < mdedetrich> its like 5 bucks a month
06:03 < rump> how much i wonder
06:03 < rump> oh?
06:03 < mdedetrich> unless your static files are ridiculously large (I assume ur talking about css/js)
06:03 < sril> thanks mdedetrich looking into engine, haven't heard of it
06:03 < mdedetrich> sril: I use the socketstream framework though
06:03 < mdedetrich> sril: which is entirely designed for realtime apps
06:04 < mdedetrich> rump: Files - CDN Transfer	1	SERVICE	$0.18	$19.04
06:04 < mdedetrich> thats for 5 websites that are using the CDN
06:04 < mdedetrich> and one website consisted of 20 megs of images
06:05 < mdedetrich> which was a facebook application for vodafone
06:05 < mdedetrich> so its really not that expensive
06:06 < mdedetrich> rump: I would also recommend rackspace cloudfiles, it has by far the best performance CDN, and has the most servers around the world
06:06 < rump> that greatly simplifies deployment eh
06:07 < mdedetrich> it actually complicates it a bit
06:07 < mdedetrich> especially when you take into account ttl
06:19 < _numbers> is there a way to require a lib and if it fails catch and recover
06:21 < yarco> try { var a = require('a'); } catch(err) { console.log(err); } _numbers
06:22 < yarco> _numbers: btw, but i dont think it is required
06:23 < mdedetrich> _numbers: I think if you are trying to do that, something is wrong
06:23 < _numbers> i'm auto loading an optional dependency; if its there i do extra stuff, otherwise i carry on without it
06:24 < _numbers> i caught the exception, which appears to be an object, but it returns a string, and has no method. is that a normal node exception ?
06:24 < _numbers> seems like i'd have to do a regex match to verify the type of exception
06:32 < trypwire> hey all. does anyone have any good resources or advice for how to build a package manager?
06:33 < gds_> wow
06:33 <@konobi> don't
06:33 <@konobi> =0P
06:34 < trypwire> aw cmon where's the fun in that?
06:35 < jesseTaylor> An error has occurred: {"code":"ECONNREFUSED","errno":"ECONNREFUSED","syscall":"connect"
06:36 < jesseTaylor> nvm :)
06:36 <@konobi> trypwire: there's many already out there... may as well use one =0)
06:36 < trypwire> konobi: i mean this isn't a real package manager that i'm working on. it's like twitter's Bower but on a smaller scale
06:37 < sinclair|work> var express = require('express");
06:37 < sinclair|work> var app = express();
06:37 < sinclair|work> ^ retarded
06:38 < sinclair|work> that is such a dumb interface
06:38 < sinclair|work> express is a module, not a function
06:39 < sinclair|work> deprecating express.createServer() is just stupid
06:40 < mdedetrich> sinclair|work: http://i.imgur.com/8fiHV.jpg?1
06:40 < sinclair|work> mdedetrich: nice
06:41 < mdedetrich> on a more serious note
06:41 < mdedetrich> I think it does that due to middleware
06:41 < timeturner> it's more syntactically pleasing to look at express() than express.createServer()
06:41 < sinclair|work> mdedetrich: not sure how middleware leads to a module acting as a function
06:42 < timeturner> I mean think about it. the sole purpose of express is already to create a server
06:42 < timeturner> why have a method that does that
06:42 < sinclair|work> timeturner: who cares if its syntactically nicer, its dumb
06:42 < mdedetrich> timeturner: shut up, thats why!
06:42 < timeturner> ok
06:43 < timeturner> you guys talk about it while the rest of use go use it
06:43 < mdedetrich> timeturner: u have to remember, express was made by a hipster
06:43 < sinclair|work> mdedetrich: its a fail because im unable to ts declare a module as a function
06:43 < sinclair|work> mdedetrich: and, modules should not be functions
06:43 < timeturner> if that's what you think then you have a ways to go
06:44 < timeturner> i'm out
06:44 < mdedetrich> im just trolling tbh
06:45 < sinclair|work> mdedetrich: seriously tho, why the hell would they do that...it makes no sense 
06:45 < mdedetrich> sinclair|work: its not really an issue if tyou use it the way they want you to use it
06:46 <@konobi> trypwire: seems like bower is reasonable
06:48 < sinclair|work> mdedetrich: its bothersome, 
06:48 < mdedetrich> sinclair|work: what are you trying to do
06:48 < sinclair|work> mdedetrich: ive been writing ts declarations for node modules of late
06:49 < sinclair|work> mdedetrich: i tested out the express declaration, which doesn't seem to be geared at express3
06:49 < sinclair|work> so i started declaring it
06:50 < sinclair|work> only to find they have screwed the application entry point
06:50 < sinclair|work> mdedetrich: out of the dozen or so of declarations ive written, express is the only one doing this
06:50 < sinclair|work> mdedetrich: and its wrong anyway, modules should not be functions
06:50 < mdedetrich> this is kinda the point I made yesterday
06:51 < mdedetrich> about the issues with using TS in a heavy JS environment
06:51 < sinclair|work> mdedetrich: its only express
06:51 < sinclair|work> everything else has been designed reasonably 
06:51 < mdedetrich> yeah and it can also be a lot of other things
06:51 < mdedetrich> JS doesn't have any real structure
06:51 < mdedetrich> so people are free to do what they want
06:51 < sinclair|work> mdedetrich: so JS developers do stupid things
06:52 <@konobi> TS?
06:52 < sinclair|work> mdedetrich: not putting a leash on JS developers is a bad idea, bad things happen
06:52 < mdedetrich> @konobi: typescript
06:53 <@konobi> ah
06:53 < mdedetrich> its a nice language, but I wouldn't use it
06:53 < sinclair|work> mdedetrich: would amd modules support modules as functions
06:53 < mdedetrich> sinclair|work: no idea
06:53 <@konobi> never played with it
06:53 < mdedetrich> @konobi: mainly because of the pain of having to integrated a language with static benefits in an environment where everything is coded dynamically
06:54 < mdedetrich> which is what sinclair|work is doing
06:54 < sinclair|work> i think the answer is no, so, although commonjs supports it, due to it not being supported in amd would be another good reason not to do it
06:56 < sinclair|work> mdedetrich: actually, ive been about to get around it
06:56 < mdedetrich> writing declarations for everything
06:56 < mdedetrich> @konobi: its basically JS with things like mixins/classes and interfaces
06:56 < mdedetrich> @konobi: and it also adds static types through declerations
06:57 < sinclair|work> mdedetrich: ive been able to have TS define a module as a function
06:57  * sinclair|work is a little less frustrated
06:57 < sinclair|work> but the interface is still stupid
06:58 < sinclair|work> mdedetrich: for reference....
06:58 < sinclair|work> declare module "express" {
06:58 < sinclair|work> export function();
06:58 < sinclair|work> ... other declarations
06:58 < sinclair|work> }
06:58 < mdedetrich> well as I said before
06:58 < mdedetrich> this is the main reason why I am not using TS
06:58 < sinclair|work> mdedetrich: why?
06:58 < mdedetrich> it has nothing to do with the language, but the environemnt we are stuck with (JS)
06:59 < mdedetrich> *environment
06:59 < sinclair|work> mdedetrich: i've just been able to have TS treat a module as a function 
06:59  * sinclair|work spoke too soon
07:00 < sinclair|work> mdedetrich: http://pastebin.com/A846BDD3 
07:01 < sinclair|work> mdedetrich: actually... http://pastebin.com/UUB3CXbJ
07:01 <@konobi> mdedetrich: ah.. might be decent for business logic... not so much working in a DOM
07:02 < sinclair|work> konobi: works fine in the DOM
07:02 < sinclair|work> konobi: not to speak up VS too much, but its nice having an IDE provide all DOM types 
07:03 < mdedetrich> I use intellij myself, same deal
07:03 < sinclair|work> mdedetrich: there are 3000+ definitions in and around the DOM
07:03 <@konobi> which ODM?
07:03 <@konobi> um... dom
07:04 < sinclair|work> konobi: the HTML DOM
07:04 <@konobi> which version? which spec?
07:05 <@konobi> does that take xhtml dom into consideration?
07:05 < sinclair|work> konobi: the declarations cover the entirely of the html5 dom
07:05 < mdedetrich> I wouldn't mind using VS as an idea
07:05 < mdedetrich> but I hate developing on windows
07:05 < sinclair|work> konobi: including canvas, video, audio and vendor extensions 
07:05 < mdedetrich> sinclair|work: intellij has the same thing as well
07:06 < mdedetrich> it has the w3c specifications in the entire web stack
07:07 < sinclair|work> mdedetrich: its possible that the TS intellisense might work in other IDE's also. the compiler comes with a services framework which helps integrate TS intellisense into anything
07:07 < mdedetrich> sinclair|work: of course it would, im pretty sure idea will put TS into their web stack
07:07 < sinclair|work> mdedetrich: for example, its what's running on the TypeScript playground
07:07 < mdedetrich> as well
07:07 < mdedetrich> I just wish that windows was proper posix
07:07 < mdedetrich> then I wouldn't have a reason to use Mac
07:08 < sinclair|work> mdedetrich: its supported on cloud9, but don't know if that includes intellisence 
07:08 < mdedetrich> im not a fan of cloud ide's
07:08 < sinclair|work> mdedetrich: me either
07:08 < sinclair|work> mdedetrich: but i do like editing in a browser
07:10 < mdedetrich> its nice that MS is putting a lot of effort into node.js though
07:10 < sinclair|work> mdedetrich: http://pastebin.com/q4pzPbRS
07:10 < sinclair|work> mdedetrich: i am hoping MS start releasing some top notch middleware 
07:10 < matbee> Guys! I REALLY need your help! My nodejs project needs some serious votes! http://vote.groupnotes.ca --- there's an hour left in the voting round - PLEASE vote <3
07:10 < sinclair|work> mdedetrich: at this stage, they have released a lot of stuff to interop with their azure platform services, but not much else
07:11 < matbee> If theres one good thing you do this year, this should be it :P
07:11 < mdedetrich> I was considering azure, but since I develop on mac, I don't have powershell
07:11 < sinclair|work> mdedetrich: i don't think its a restriction, and you don't really need powershell to use Azure anyway
07:12 < mdedetrich> well to set up websockets you apparently do
07:12 < sinclair|work> mdedetrich: you mean, arbitrary sockets
07:12 < mdedetrich> yah
07:13 < sinclair|work> mdedetrich: https://www.windowsazure.com/en-us/manage/linux/other-resources/command-line-tools/
07:13 < sinclair|work> mdedetrich: i really like the azure service bus
07:14 < sinclair|work> mdedetrich: its a great way to pub/sub across different nodes running up on azure
07:14 < sinclair|work> its a bit propitiatory tho, but works awesome
07:17 <@konobi> matbee: tut tut
07:17 <@konobi> =0P
07:22 < sinclair|work> mdedetrich: do you use express?
07:22 < mdedetrich> yes
07:22 < sinclair|work> mdedetrich: how do i control server side caching ?
07:22 < sinclair|work> mdedetrich: of templates
07:23 < sinclair|work> for example, if im using jade or ejs, wouldn't want to reparse templates on each request
07:23 < mdedetrich> sinclair|work: I barely use express, my app is written in Socketstream and its basically all websockets
07:23 < mdedetrich> my templating is all done client side
07:24 < mdedetrich> there is an initial html that is cached
07:24 < mdedetrich> and in production its put on a CDN
07:24 < mdedetrich> (which is the result of a jade file)
07:24 < sinclair|work> mdedetrich: what about SEO ?
07:24 < mdedetrich> but the framework does all of that
07:24 < mdedetrich> SEO doesn't apply to my app, also you can do SEO along with sockets
07:24 < sinclair|work> mdedetrich: how so?
07:24 < mdedetrich> you can even do client side SEO, its detailed on google somewhere
07:25 < mdedetrich> sinclair|work: my app you have to login to use it at all
07:25 < mdedetrich> SEO doesn't apply to it whatsoever
07:25 < sinclair|work> mdedetrich: well, its been a while since i checked
07:26 < sinclair|work> mdedetrich: the approach im familar with is having html come down by default, but have json come down is x-requested-with asks for it 
07:26 < mdedetrich> yeah thats the rails approach
07:27 < sinclair|work> mdedetrich: its a nice approach
07:27 < mdedetrich> outdated severly though
07:27 < sinclair|work> mdedetrich: not really, i think the idea is perfectly reasonable 
07:27 < mdedetrich> thats my opinion
07:27 < mdedetrich> although
07:28 < sinclair|work> mdedetrich: what other alternatives are there?
07:28 < sinclair|work> mdedetrich: noting that SEO is important
07:28 < mdedetrich> you can do SEO on any framework, even mine you can do SEO with
07:28 < mdedetrich> I use sockestream, and people integrate it with express and just use express for SEO
07:28 < mdedetrich> anyways I have to go
07:28 < matbee> konobi, did youg et that vote in? :D
07:29 < matbee> 30 minutes and the contest is over
07:29 < mdedetrich> I will chat tommorow
07:29 < matbee> I'm DYING
07:29 < sinclair|work> mdedetrich: in a traditional sense, you still need 'pages' that come down with complete content
07:29 < mdedetrich> sinclair|work: yeah and nothing is stopping you from doing that
07:29 < mdedetrich> with socketstream
07:29 < sinclair|work> mdedetrich: i am interested 
07:29 < mdedetrich> its just those pages are purely for SEO
07:29 < mdedetrich> they are not used for the actual site
07:29 < sinclair|work> mdedetrich: do you have an article to this approach
07:29 < mdedetrich> i g2g, will speak tommorow
07:29 < sinclair|work> no link?
07:30 <@konobi> matbee: i didn't see anything specific to groupnotes...
07:30 < mdedetrich> you can use express to serve html pages
07:30 < mdedetrich> google socketstream
07:30 <@konobi> <-- ex-security guy... so paranoid
07:30 < mdedetrich> which is the framework I use
07:30 < mdedetrich> I really have to go, im late for something
07:30 < mdedetrich> cya
07:31 < matbee> konobi, really?
07:31 < matbee> konobi, the url is right there, click Like and then it enables the page
07:31 < matbee> its a big ass like-wall, but it's our only way to get votes </3
07:32 <@Nexxy> ew lol
07:32 <@Nexxy> so tacky
07:32 < sinclair|work> oh, hello Nexxy
07:33 <@Nexxy> oh hey sinclair|work 
07:35 <@konobi> matbee: it's just a GSB thing
07:35 <@konobi> Nexxy: hey love, how's things?
07:35 <@Nexxy> fantabulous, and yourself?
07:36 <@konobi> good good... winding down from a day of compiling software =0)
07:36 <@konobi> also... http://io9.com/5963263/how-nasa-will-build-its-very-first-warp-drive
07:36 <@Nexxy> exciting
07:37 <@konobi> matbee: so as far as i can see, i'm just liking gsb and that's it
07:37 <@Nexxy> O_O
07:38 < Doikor> i like how the link is "how nasa WILL build its..." and the actual heading is how nasa MIGHT
07:40 <@konobi> well, as far as i can tell, IF they do... it's the only approach that could make any sense
07:40 < matbee> konobi, you have to like the page and THEN it displays our video
07:40 < matbee> if it doesnt,t ry loading the url again
07:41 <@konobi> matbee: k... that worked... you're lucky you're a canuck
07:41 <@konobi> =0P
07:42 <@konobi> matbee: done
07:42 < matbee> :D
07:42 < matbee> YOU ARE A BEAUTIFUL SOUL
07:43 <@konobi> just hire me once you're huge
07:43 < matbee> done
07:43 <@konobi> mwuahahaha... i never mentioned rates... mwuahahahaha
07:43 <@konobi> you're screwed now!
07:43 <@konobi> =0P
07:44 < matbee> dude you dont even have to work
07:44 < matbee> ill just pay you to sit here
07:44 <@konobi> o.O
07:44 < matbee> haha
08:07 < khurram> hi guys
08:08 < khurram> how can i tell the express not to use any template engine because i want to use underscore template with backbone ?
08:10 < khurram> hello
08:10 <@konobi> khurram: there's an express irc channel =0)
08:12 < khurram> konobi: thanks
08:21 < sosnon> hello; i think i have a severe misunderstanding of either js/callbacks or async operations: http://jsfiddle.net/rhvhR/ accessing the outer 'list' does not work inside the callback; should i do it like that http://stackoverflow.com/a/193853 or is this a rather bad idea for an async readFile call?
08:21 < matbee> wow
08:21 < matbee> konobi, we made it to the top 15 :)
08:21 < matbee> now we wait!
08:21 < matbee> i need sleep, badly.
08:22 <@konobi> matbee: pppfffttt...
08:24 <@konobi> sosnon: this.list is different to list
08:26 < sosnon> well, in "this.list" "this" should refer to the parse function, right? then setting "parent" to "this" should, in theory, help me to make the scope of the parse function available in the callback, right?
08:27 <@konobi> sosnon: you refer to "list" that's a new variable
08:27 < sosnon> ?
08:27 <@konobi> list = {}... !== this.list
08:27 < sosnon> oh, my bad
08:28 < sosnon> rather like that then? http://pastie.org/5446708
08:29 <@konobi> sosnon: no... this.list[one] = 1
08:30 < sosnon> ok, but still, outside of the scope there is not 'two' property available for 'list'
08:30 <@konobi> sure... because it needs to read the file first
08:31 <@konobi> once it's read the file, that's when the callback is called
08:31 < sosnon> yeah, let me restructure that, maybe bind 'list' to 'Parser', then query it from a 'Parser' instance
08:31 <@konobi> regardless
08:31 < sosnon> regardless?
08:32 <@konobi> when you call an async function... the next link after that is going to be called straight away
08:32 < sosnon> you mean doing it async is a bad idea in this case anyway?
08:32 <@konobi> if it takes an hour to read your file from disk... your callback will be called an hour later
08:33 <@konobi> but your `console.log('outside: ' + JSON.stringify(list));` will be called straight away
08:33 < sosnon> sure, i get that; so it boils down to readFileSync?
08:33 < hipsterslapfight> but your list will be returned immediately 
08:33 < [AD]Turbo> hola
08:33 < sosnon> or emit an event and listen for it manually or something?
08:35 < sosnon> well, ok, doing it asynchronously is a bad idea then, i suppose
08:35 < hipsterslapfight> there's a whole bunch of other weirdness going on there too sosnon 
08:35 < sosnon> hipsterslapfight: tell me
08:35 < sosnon> all the wrapping, you mean?
08:35 < hipsterslapfight> why do you have parent.list and list?
08:35 <@konobi> sosnon: do your console.log within your callback
08:36 < hipsterslapfight> list being a global scope variable
08:36 <@konobi> hipsterslapfight: shush
08:36 < hipsterslapfight> i thought we should start on the basics :(
08:36 < sosnon> hipsterslapfight: are you refering to this http://pastie.org/5446708 ?
08:37 < hipsterslapfight> nope! missed that link thanks the the modern marvel of irc'ing on the train it seems
08:37 <@konobi> sosnon: so... in timeline... you'll get console.log(<outside>) first, then console.log(<inside>)
08:38 <@konobi> sosnon: make sense?
08:38 < sosnon> konobi: yeah, i get the concept of async function calls; i wasn't sure how i could access the parent scope 'list' inside the callback, but i guess the old 'var parent = this; ... parent.list ...'  is still the way to go
08:38 <@konobi> sosnon: "this" is in flux
08:39 <@konobi> sosnon: i suggest reading http://ejohn.org/apps/learn/
08:39 <@konobi> but yeah, parent.list should be the way
08:40 <@konobi> assuming you didn't have this.list.... just having 'var list' would also be valid
08:40 < sosnon> konobi: what i'm interested in, nevertheless, is how i could 'model' it in a way that i have a Parser 'class'/object which does an async readFile call, but then provides the file contents in an easily accessible property (like 'var parser = Parser(); parser.parse(myfile); console.log(parser.fileContent)') as soon as readFile is done reading the file
08:41 < sosnon> it may be a cruel way of laying out the whole parser, but i think it should be doable, right?
08:41 <@konobi> parser.parse(myfile, callback)
08:42 < sosnon> hmm, that's the 'usual' js way then
08:42 <@konobi> yup
08:42 <@konobi> there's other crazier ways... but that's the one that makes most snese
08:43 < sosnon> doing it any other way is nonsense then? i mean users would dig it, i guess
08:43 <@konobi> sosnon: best stick to what js folks expect
08:43 < sosnon> hmm, not being a rebel then...
08:44 < sosnon> well, if i do it like parser.parse(myfile, callback), then i just pass the callback down to the readFile call?
08:45 <@konobi> yup
08:45 <@konobi> or within another callback
08:45 < sosnon> easy as pie then; don't know why i tried to do it the 'classical' way then
08:46 < sosnon> yeah, well, i think js users actually can handle passing callbacks when using an interface function; even jQuery does it that way
08:48 < sinclair|work> swig is an awesome framework
08:48 < sinclair|work> love it, good stuff, no complains at all
08:48 < sosnon> works like a brise, but i'll consider skimmning through http://ejohn.org/apps/learn/ anyway
08:48 < sosnon> konobi: thanks for the help!
08:52 <@konobi> sosnon: np
08:52 <@konobi> sosnon: yeah... there's stuff i learnt from that too
08:57 < sosnon> konobi: and for node this http://nodemanual.org/0.8.14/nodejs_dev_guide/index.html is still the definiteive place to go?
08:57 < sosnon> 'definitive'... very relative
08:59 <@konobi> sosnon: um... nodejs.org is
08:59 <@konobi> no idea who is running nodemanual.org
09:00 < sosnon> konobi: well, nodejs.org is linking there, see here: http://nodejs.org/community/
09:01 < sosnon> well, the best way is still tinkering around with it, i guess
09:20 < Zelest> How is the support for PostgreSQL in node? Production ready?
10:31 < rvagg> Zelest: yes
10:37 <@konobi> Zelest: let us know
10:38 < sinclair|work> konobi: !!!
10:39 <@konobi> ?
10:39 < sinclair|work> nuffin
10:39 < sinclair|work> konobi: except
10:39 < sinclair|work> if you have maybe used linq.js before
10:40 <@konobi> no
10:43 < sinclair|work> konobi: you know what bothers me, the poor quality of node modules with obvious names
10:43 < sinclair|work> konobi: for example... linq 
10:44 < sinclair|work> half arse implementation, meaning it becomes different for someone looking for that implementation to find what they need..
10:45 < sinclair|work> konobi: these same authors seem to throw up way more npm projects than you would imagine them to be able to support, so getting support on a npm module is unlikely
10:46 < sinclair|work> konobi: so, if i branch a project, (or write my own) i have to call it something completely non trivial node-linq-myversion
10:47 < sinclair|work> npm authors should be responsible 
12:06 < zot> back for more!  I've got SIGINT and 'exit' handlers done as suggested.  but when running from the command line debugger, neither, hitting CTRL-d or CTRL-c (2x) leaves me in the same place â€” no exit handler gets called.  it appears that SIGINT isn't passed through, and I have no idea what happens when you hit ctrl-D from the debugger.
12:06 < zot> my problem is that I have a child process, which I don't own, but want to manually kill off, since it doesn't die nicely when its stdin disappears.
12:07 < zot> (for testing, this is extremely irritating, cuz i have to run a kill script each time.  so i'm curious if there's something better to do.)
12:28 < Leeol2> Anyone know how you end a conditional block in Jade, while keeping indentation? eg: https://gist.github.com/bb3afbec61e5fb0a0be9 You'll see that the labels need to be indented like they are, so that the `form` tag remains the parent.. but if they are indented, they get put into the `else` conditional block.. thoughts?
12:32 < yawnt> Leeol2: use a block and include it
12:32 < yawnt> but you could also do
12:33 < yawnt> form(action="#{redirect ? 'login' : 'redirect }"
12:33 < yawnt> probably
12:33 < Leeol2> yawnt: Thank you, i'll give it a look!
12:34 < yawnt> np
12:34 < Leeol2> Spent a good two hours dinking around with the syntax last night assuming i was missing something obvious :s
12:45 < stagas> yawnt: you don't need interpolation in attributes, they accept js directly, so form(action=redirect ? 'login' : 'redirect') works as well
12:45 < yawnt> stagas: that was exactly what i wasn't sure about! thanks for clarifying :)
12:48 < Leeol2> stagas: Thanks for the note! :)
12:53 < khurram> has any one used backbone with node  here ?
13:03 < bigkevmcd> I've used backbone with a node backend, but not my node app
13:16 < gildean> anyone familiar with the os-core-module online?
13:16 < gildean> i'm thinking is there a way to get os.loadaverage() to update more often?
13:16 < gildean> now it seems to hand out new data only every 5 seconds
13:16 < gildean> i'd like to get new data every second
13:26 < abrkn> i'm struggling with some concepts of using deferreds, anyone able to look at my sample code? i know what i want to do, just not doing it right
13:26 < abrkn> using Q
13:29 < nathan7> ..people and their motherfucking deferreds
13:32 < SomeoneWeird> gildean, wrap 'load' or whatever the cmd is?
13:35 < gildean> SomeoneWeird: what do you mean?
13:35 < gildean> SomeoneWeird: if i call os.loadaverage() every second, the data changes only every five times asked
13:35 < SomeoneWeird> right, so node might be caching it
13:36 < gildean> and looking at the sourcecode, the call gets passed to libuv each time
13:36 < gildean> tho i'm not sure
13:37 < mscdex> gildean: there is no caching going on internally, it's whatever the OS gives node
13:38 < gildean> mscdex: ok, so there's no simple way of getting new data more often
13:40 < mscdex> gildean: not without making changes to your kernel
13:42 < mscdex> gildean: http://en.wikipedia.org/wiki/Load_(computing)#Reckoning_CPU_load
13:43 < khurram> can some one please help me how to have backbone working inside node server 
13:44 < sgallagh> isaacs: This may have been asked before, but would it be possible to convince you to change the binary name of /usr/bin/node to /usr/bin/nodejs upstream? Multiple Linux distributions already have a /usr/bin/node from a kernel-related package.
13:44 < gildean> mscdex: thanks, i didn't even realize that the kernel didn't give out info more real time
13:45 < sgallagh> Distributions like ubuntu are already packaging it with this alternate name, but it would be best if we could have that be official and supported upstream (in part so that documentation exceptions can be avoided)
13:46 < mscdex> node is easier to type than nodejs
13:46 < mscdex> :-)
13:46 < gildean> mscdex: this is what i used the load-average for: http://julkinen.salaliitto.com/misc/serverinfo.png
13:46 < sgallagh> mscdex: Not a sufficient answer
13:47 < gildean> just a little afternoon-project to play around with websockets
13:47 < mscdex> it is for me, but i compile from source
13:47 < sgallagh> mscdex: The "node" binary has been around for a VERY long time. It has seniority in admin minds.
13:47 < sgallagh> And strictly speaking, nodejs is more descriptive.
13:47 < mscdex> i've never used the older "node" before
13:47 < sgallagh> There's nothing stopping you from using an alias or symlink on your system
13:48 < mscdex> hadn't even heard of it until the whole debian package thing happened
13:48 < gildean> the older "node" at least on ubuntu is a radio-amateur software
13:48 < mscdex> gildean: neat
13:48 < gildean> or something like that
13:49 < sgallagh> The Fedora node package is "This is a simple node frontend for Linux kernel AX.25, NETROM, ROSE and TCP."
13:50 < sgallagh> I'll admit I'm not sure what exactly it's useful for, but the fact that it's been there forever (and mentions the kernel) suggests to me that I'll have a much harder time convincing them to change.
13:50 < gildean> mscdex: it would look better if the graph was updated every second with new data, but i guess i'll need to write a function to extrapolate the data from the last two points or something to get there
13:50 < sgallagh> Fedora's official stance on conflicting binary names is to approach the upstreams and try to convince them to resolve the conflict, rather than essentially having to fork the project.
13:50 < sgallagh> http://fedoraproject.org/wiki/Packaging:Conflicts#Binary_Name_Conflicts
13:53 < mscdex> sgallagh: how many users of the old "node" are there compared to node.js users?
13:54 < sgallagh> mscdex: Honestly, I don't have that information (though I would suspect few, honestly).
13:54 < gildean> i was about to say that the size of the user-base should weigh heavily when determinig the use of conflicting binary-names
13:55 < sgallagh> gildean: While I personally agree with that statement, I didn't write the rules for Fedora.
13:56 < sgallagh> From their perspective, history rates more highly than usage
13:56 < sgallagh> And I should note that the Ubuntu and Debian package has internally renamed the binary to nodejs as well to avoid this.
13:56 < sgallagh> So I suspect they view the problem similarly.
13:57 < sgallagh> Fedora will ultimately have to follow suit with how the other Linux distros are doing it, but I was hoping we could just negotiate making this an upstream decision since so many of the downstreams are forced to behave this way.
13:59 < mscdex> history over usage in this instance seems very silly to me
14:00 < mscdex> my vote is to keep the current binary name, but i'm not isaacs :-)
14:01 < sgallagh> mscdex: My goal is more to keep every distribution using the same name.
14:01 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:01 < sgallagh> Debian, Ubuntu and (I just checked) SUSE have all changed the name in their packages to /usr/bin/nodejs
14:02 < sgallagh> I don't like diverging from upstream if it can be avoided, but this has become the de-facto standard for Node.js packaging on Linux.
14:17 < Youdaman> anyone from Sydney Australia here?
14:17 < rurufufuss> Youdaman: wassup
14:17 < bigkevmcd> sgallagh: node is node on Ubuntu that I can see, they use the alternatives mechanism
14:18 < Youdaman> rurufufuss: g'day!
14:18 < rurufufuss> so what are you doing in #node.js at 1am?
14:18 < sgallagh> bigkevmcd: Where do you see that? My google search turned up nodejs
14:18 < bigkevmcd> sgallagh: this machine...
14:18 < sgallagh> bigkevmcd: And "alternatives" is completely wrong here. That's intended for alternate implementations of the same thing.
14:18 < Youdaman> trying to make a habit of being here, and on irc in general, lurking in channels to do with tech i want to use -- you?
14:18 < sgallagh> bigkevmcd: Did you install a node package?
14:19 < bigkevmcd> sgallagh: yip
14:19 < sgallagh> hmm
14:19 < rurufufuss> Youdaman: same, me and a friend starting something and we plan to use node.js
14:19 < bigkevmcd> sgallagh: I was surprised that node was provided through /etc/alternatives
14:19 < sgallagh> bigkevmcd: http://packages.ubuntu.com/raring/amd64/nodejs/filelist
14:20 < bigkevmcd> sgallagh: I'm not on raring
14:20 < sgallagh> Same is true of Quantal
14:20 < sgallagh> Checking earlier versions now
14:20 < bigkevmcd> sgallagh: and I have /usr/bin/nodejs too
14:20 < sgallagh> Ah, precise is using /usr/bin/node
14:20 < bigkevmcd> yeah
14:20 < sgallagh> But they changed it on newer systems
14:21 < sgallagh> So I'd say they agreed with me that alternatives was wrong :)
14:21 < gildean> also iirc if you install node from ppa:chris-lea/node.js the binary name will be "node"
14:21 < gildean> on ubuntu
14:22 < sgallagh> gildean: PPAs are by definition not official
14:23 < gildean> sgallagh: true, yet i recommend using that ppa with ubuntu to anyone asking
14:24 < sgallagh> gildean: Sure, that usually means that the official package is built wrong, which is something I'm trying to avoid with my Fedora package :)
14:25 < gildean> sgallagh: not wrong, just old
14:25 < gildean> node atm updates at a rate that more static distros don't keep up
14:25 < sgallagh> Ah, well I'm building 0.9.3 for Fedora at the moment. That's fairly new :)
14:25 < gildean> more static as in not rolling
14:26 < sgallagh> Fedora is pretty accepting of high-velocity updates
14:26 < gildean> but i doubt the package in the repos is actually 0.9.3
14:27 < gildean> not that building the newest from source would be more than a few moments on modern hw
14:28 < sgallagh> gildean: What do you mean you doubt the package is actually 0.9.3?
14:29 < _smf_> Maybe because 0.9.x is the unstable development branch of node?
14:29 < _smf_> 0.8.15 is the current stable which is what should be used in production.
14:29 < sosnon> jsfiddle is down! http://www.downforeveryoneorjustme.com/http://jsfiddle.net not that it matters, but i'm the first one to mention it here; in your face! ;)
14:30 < sgallagh> _smf_: Yes, but that's expected of Fedora. It's going into Fedora "Rawhide" which is our experimental branch that will eventually become Fedora 19 in about six months
14:30 < sgallagh> Fedora is pretty much always on the bleeding edge
14:31 < gildean> sgallagh: still, 0.9 branch is unstable, all stable branches are the even ones
14:32 < gildean> sgallagh: so the node package installed from package-manager should never be version 0.9.x
14:32 < sgallagh> gildean: We don't really have a choice right now. 0.9 is the only branch that supports building against system libraries. The static linking of 0.8.x isn't acceptable in a Fedora package
14:32 < gildean> that's what i meant
14:32 < sgallagh> I'm assuming that 0.10.x will be available by the time the stable F19 actually ships (in early summer)
14:33 < sgallagh> In the meantime, pre-release Fedora can carry pre-release Node.js just fine
14:33 < gildean> sgallagh: i guessing the version would actually be 1.0.0
14:33 < sgallagh> Semantics :)
14:33 < gildean> but it might also be that the v.1 gets pushed back
14:33 < gildean> who knows
14:33 < gildean> maybe isaacs 
14:35 < sgallagh> gildean: As I said, I don't actually have a choice here (short of a massive backporting effort of the linking patches)
14:35 < sgallagh> It wouldn't be the first time Fedora shipped a "stable" release with pre-release software.
14:39 < _smf_> Yeah - anyone who uses Fedora on a production server gets what they deserve.
14:40 < sgallagh> _smf_: That's why RHEL exists :)
14:40 < sgallagh> I'm trying to lay the foundation necessary to have Node.js 1.0.x running on RHEL 7
14:41 < rump> or centos :P
14:41 < rump> but rpm is gross anyway
14:42 < _smf_> I build my own RPMs for RHEL/CentOS anyway.   I'd rather create statically linked node against V8, OpenSSSL etc. that are a known quantity and have been tested with node.
14:43 < _smf_> Especially if you read the notes regarding OpenSSL - it's contains the Chromium/Android patches to reduce the memory footprint.
14:44 < sgallagh> _smf_: Those patches should be landing upstream in OpenSSL 1.0.2.
14:44 < sgallagh> The other ones (for SPDY support) have already made it into 1.0.1
14:44 < _smf_> Ok
14:45 < sgallagh> As I said, my ultimate goal here is to be able to ship a stable, supported and tested version of Node 1.0.x. I'm doing my homework :)
14:46 < hemanth_> anyone working on tab-completions ?
14:46 < hemanth_> was looking into https://npmjs.org/package/complete
14:46 < hemanth_> and autocomplete 
14:46 < hemanth_> autocomplete works well, but does not parse the argv on tab 
14:47 < hemanth_> complete seems like an overkill
14:48 < hemanth_> better to use readline?
14:51 < hemanth_> meow?
15:01 < Ancien> hi everybody
15:02 < Ancien> i have a technical question, how can i calculate the ping in node.js ?
15:05 < bnoordhuis> Ancien: round_trip_time / 2?
15:08 < Ancien> how can i access to round_trip_time ?
15:09 < Ancien> bnoordhuis
15:10 < bnoordhuis> Ancien: you have to calculate it yourself
15:10 < Ancien> ok how?
15:10 < bnoordhuis> Ancien: if you're talking to some remote system over udp or tcp, send a packet and time how long it takes for the reply to come back
15:10 < bnoordhuis> that's your round trip time
15:11 < bnoordhuis> if you're talking about icmp ping, node doesn't support that natively
15:11 < bnoordhuis> but there's undoubtedly modules for that
15:11 < bnoordhuis> you'll need to run your application as root though
15:12 < Ancien> a ok but if i need to run as root for something it's not important i prefer no
15:19 < hemanth_> substack, is it better to use readline to implement tab completion? or would complete module help? 
15:38 < Thomas`-> Hey guys.  Could you please tell me if i have to create a new varible if i with to access this.someVariable from inside an inclosure (child context)
15:39 < Thomas`-> *closure
15:41 < context> thomas`-: try it ?
15:41 < context> try it both ways ?
15:41 < Thomas`-> didnt work via this.
15:41 < Thomas`-> want to know if theres another solution
15:44 < context> thomas`-: 'this' is not always what you think it is
15:44 < rump> hmm the express repo doesn't have the api docs or `make docs` ?
15:44 < rump> there is a manpages branch but looks outdated
15:45 < Thomas`-> i was thinking something like parent.varible
15:45 < Thomas`-> so it could rememeber the parent context
15:47 < qeok> I lost connection
15:58 < _smf_> thomas`-:  before your closure do;   var self = this;  and then use self in place of this inside the closure.
15:58 < _smf_> alternatively call .bind(this) on the closure
16:00 < qeok> Thanks _smf_
16:03 < qeok> Does anyone know the reason why function1 is undefined from function2 - http://codepaste.dev7studios.com/item/52lu5nqm7
16:04 < tracker1> because you didn't give it a direct name...
16:04 < tracker1> module.exports.function1 exists.
16:04 < hipsterslapfight> function1: function function1() {}
16:05 < tracker1> this.function1 may work, but can suffer indirection
16:06 < MI6> joyent/libuv: Ben Noordhuis master * 4a69c4b : unix: change uv_backend_timeout() prototype  * change return value to sig (+1 more commits) - http://git.io/lfEu3Q
16:06 < qeok> ahh, i see what you mean. thanks i see if i can use these fixes
16:06 < tracker1> geo, what hipsterslapfight said is a good idea... though I will usually define my functions directly below the exports, and then export references to the functions... note: functions get hoisted, so it's okay to have them below.
16:15 < qeok> tracker1, like this? http://codepaste.dev7studios.com/item/jklhw6sqs
16:16 < context> qeok: try it ... ?
16:16 < context> if it dont work WW3 wont begin just yet we promise.
16:18 < qeok> context, nah man im worried i will crash the internet because of my incorrect node coding
16:18 < tracker1> qeok, more like this... http://codepaste.dev7studios.com/item/ew9094elj
16:18 < tracker1> I usually test stuff like that either in the node console, or in the browser dev tools console...
16:19 < qeok> tracker1, i see what you mean now, thanks. yeah i need to learn how to do  the console and debugging properly. ill get on that :)
16:20 < tracker1> qeok, in the example.. it's okay to put your exports at the top, even though the function assignments are below, because the JS compiler will push the function definitions to the top before execution.
16:20 < tracker1> I tend to favor exports on top, mainly because it lets me know what the outside world should expect...
16:22 < qeok> yeah it makes sense
16:26 < gavri> is there a way to add logging as a cross-cutting concern. for example, I'd like to specify that all method invocations on this particular object needs to have its parameters logged.
16:40 < tracker1> gavri, it sounds like what you want is an aspect-oriented nature for logging... I'm not sure that is possible... you could have a common logger location, for a require statement, then pass that the arguments variable from the object in question...
16:41 < gavri> tracker1: so I'll have to add the logging statements at the beginning of all the methods that need to be logged, right?
16:42 < tracker1> if you want the function name... arguments.callee can be used, but is deprecated in strict mode.
16:42 < tracker1> gavri, yeah...
16:42 < tracker1> you could create something that wraps any public methods for you, but private is another story.
16:44 < tracker1> I kind of wish that the stack was a bit easier to get to without creating an Error object.
16:44 < jrajav> arguments.callee is not the function name
16:44 < jrajav> It's a reference to the current function
16:44 < tracker1> like a global process.stack (current location) and stack.parent
16:44 < gkatsev> arguments.callee is deprecated
16:44 < jrajav> And like you said, it's deprecated
16:44 < jrajav> Just name your function literals
16:45 < gkatsev> var foo = function bar(){ return bar(); }; foo();
16:45 < gavri> tracker1, jrajav, gkatsev, thanks
16:45 < tracker1> jrajav, .toString().match(/function\s*(\w+)\s*\(/)[1] || '_anonymous_'
16:46 < gavri> how is node.js typically instrumented though?
16:46 < jrajav> What is this eldritch abomination you just brought into the world, tracker1 
16:46 < tracker1> jrajav, lol... it isn't pretty.
16:46 < jrajav> >> (function foo() {}).name
16:47 < jrajav> Did we not have a bot in here?
16:47 < gkatsev> no bots here currently.
16:47 < jrajav> :(
16:47 < jrajav> Well it works!
16:47 < jrajav> lol
16:47 < gkatsev> yes, lol
16:47 < mscdex> node.js rules!
16:47 < tracker1> arguments.callee.name
16:47 < jrajav> We need to hijack ecmabot
16:47 < jrajav> tracker1: That's the same thing I just did
16:48 < jrajav> tracker1: Again, using the name inside a named function literal is the same thing as using arguments.callee, but better
16:48 < tracker1> jrajav, I know.. usually only do the tostring thing to inspect the argument parameters.
16:48 < mscdex> well for argument parameters, you can get the number of parameters easily: fn.length
16:48 < jcrew> tracker1: that doesn't always work, like if the function just uses argument[] to get the parameters
16:49 < tracker1> jcrew, yes, but the argument names are exposed, so you can glean intent.. depending on your objectives..
16:49 < jrajav> What exactly would that be used for
16:49 < tracker1> don't do most of this in practice anymore.. but going back 13-14 years, did some *really* ignorant stuff in some JS based frameworks
16:50 < tracker1> jrajav, bad old days (NN4/IE4)
16:51 < jcrew> tracker1: i see
16:51 < tracker1> dealing with box/drawing primatives back then wasn't fun at all.. even just boxes, for stack diagrams etc.
16:52 < Darsain> anyone experienced with twitter api 1.1?
16:52 < gkatsev> jrajav: i've asked inimino to bring it in.
16:52 < Sly> Darsain: perhaps, depending on what you're looking for.
16:53 < Darsain> Sly: is there absolutely no way how to request public data without auth?
16:53 < kusumahendra> hello, anyone know a source that explain what is event-driven? maybe better a book or journal?  thx
16:54 < Sly> Darsain: not in the streaming API. Not sure about the RESTful API.
16:54 < jrajav> http://en.wikipedia.org/wiki/Event-driven_programming @ kusumahendra 
16:54 < Sly> I usually use their streaming API if I use anything.
16:55 < kusumahendra> is there any books that explain it vs multithreading? because i need it to use it for my bachelor thesis 
16:56 <@ryah> ls
16:56 < Darsain> Sly: and how does that auth works actually? is there a way how to auth on a client side without exposing sensitive data? (like password, api key, ...)
16:56 <@ryah> oops, wrong window
16:56 < Sly> Darsain: OAuth
16:57 < Lander_> kusumahendra  : https://plus.google.com/u/0/100598160817214911030/posts/Lv12ovw3oQf
16:58 < Lander_> Which school are you writing the thesis for?
16:58 < Sly> Darsain: https://dev.twitter.com/docs/api/1.1
16:59 < Sly> Looks like you can do some public stuff with the RESTful API without having to auth.
17:00 < Sly> Well, maybe not.
17:00 < Sly> I just tried https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=twitterapi&count=2 (one of their examples) and it gave bad credentials.
17:00 < Darsain> Sly: yeah, I'm reading that, but I just can't believe there is no simple way how to pull and render X last tweets from a public account
17:00 < kusumahendra> thx @Lander @jrajav
17:01 < Sly> Just use OAuth. It expose your password or anything of that sort.
17:01 < Sly> It's just a token generated by Twitter to use in place of your username/password/etc.
17:01 < Darsain> I gues I'll have to look into it :)
17:01 < Sly> https://dev.twitter.com/docs/auth
17:02 < Sly> There's a list of things you have to be authed for.
17:02 < Sly> So, there are *SOME* RESTful commands that apparently allow unauthenticated requests.
17:03 < warz> i know you can get followers for anybody without being authed
17:05 < tracker1> oh no.. warz is running a tracking system... shame.. for shame... ;)
17:06 < warz> :(
17:06 < warz> this: https://github.com/ryancole/twitdiff
17:13 < LightWolf> Hello!
17:13 < LightWolf> ...
17:13 < LightWolf> Hello?
17:13 < LightWolf> ...
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf>  
17:15 < LightWolf> Hello?
17:19 < jrajav> inb4 kick with message "Goodbye"
17:19 < jrajav> Oh, he's already gone. That's what I get for hiding join/parts
17:20 < tracker1> jrajav, lol
17:20 <@isaacs> sgallagh: No, that will never happen.  Sorry.  Node's name is node.
17:21  * sinclair|work waits patiently for a azure web role to be configured
17:22 <@isaacs> niggler: you can track down console.logs by doing this in your program:  console.log = console.trace
17:22  * sinclair|work wants to use fibres
17:22 <@isaacs> niggler: but, it'll destroy performance a lot
17:22 < nathan7> fibres :(
17:25 < sinclair|work> SUCCESS !
17:25 < sinclair|work> http://nodets-webrole.cloudapp.net/
17:39 < sgallagh> isaacs: Not to be rude, but could you perhaps elaborate on your reasoning?
17:42 <@isaacs> sgallagh: the "node" program in most linux distros is this, yes? http://packages.ubuntu.com/lucid/hamradio/node
17:43 <@isaacs> sgallagh: that program is not actively maintained, or used much.
17:43 <@isaacs> sgallagh: there are no updates since 2009.  ham radios are not very relevant to modern programming.
17:43 < CMTegner> haha!
17:44 <@isaacs> sgallagh: and, not only no updates in 3 years, but no relevant activity or development in about 10 years.
17:44 < sgallagh> isaacs: Well, the Fedora package was updated in May 2012, but you're right. It wasn't an upstream patch
17:45 <@isaacs> sgallagh: and it was not *particularly* popular to begin with.
17:45 <@isaacs> sgallagh: don't get me wrong, ham radio is really cool
17:46 <@isaacs> and "node" is a pretty good name for a program that does stuff with ham radio, for the same distributed p2p networking ideas that it invokes which is the reason ryah chose it for node.js
17:46 < sgallagh> isaacs: I'm mostly concerned with future compatibility as well. The word "node" is pretty generic. I can easily see multiple projects deciding to use it.
17:47 <@isaacs> sgallagh: if there was a program named "ruby", written in 1993, that plugged into custom hardware that could classify gems, and was used by 100 hobbyist geologists, would you expect ruby to change its name to rubylang?
17:48 < superjoe> programming languages tend to get special privileges when it comes to names
17:48 <@isaacs> sgallagh: this is the problem with the debian and fedora style of package management.
17:48 <@isaacs> sgallagh: it is inflexible.
17:49 < sgallagh> isaacs: For the record, I'm having a very similar discussion with the ham radio side of the equation. I'm hoping to convince one of you to change. I don't really care all that much which one.
17:49 <@isaacs> sgallagh: because there is not as much of a reliance on version numbers, and version number flexibility (all packages using "node" must use the *same* "node"), there is no way for a project name to change its meaning
17:49 <@isaacs> sgallagh: i don't really care about fedora or debian, as strange as perhaps that sounds.
17:50 <@isaacs> sgallagh: the beauty fo the debian model is that you can add your own ppa.
17:50 < sgallagh> As things stand right now, since other distros are switching you to nodejs, I'm probably going to have to continue with their change for ease of compatibility
17:50 <@isaacs> sgallagh: that is their prerogative
17:50 <@isaacs> sgallagh: i encourage debian users to add https://launchpad.net/~chris-lea/+ppa-packages to their ppa list
17:50 < sgallagh> isaacs: I don't really understand your statement "because there is not as much of a reliance on version numbers, and version number flexibility (all packages using "node" must use the *same* "node"), there is no way for a project name to change its meaning"
17:50 < sgallagh> What did that mean?
17:51 <@isaacs> sgallagh: well, let's say this was an issue in npm.
17:52 <@isaacs> sgallagh: and you have a package that is not actively developed, or used by many people, named "foo", and some new thing that a lot of people are using, and it's also called "foo"
17:52 <@isaacs> sgallagh: you can just bump the major version number, and start making it be the new thing
17:52 <@isaacs> sgallagh: there's a little confusion, for a few people, sure, but much less overall than the confusion of everyone who installs "node" and ends up with a ham radio program
17:53 <@isaacs> (ham? radios? i just wanna write some javascript!)
17:53 < jrajav> I like ham
17:53 < jrajav> AND radios
17:53 < warz> i just want to dance
17:54  * isaacs picturing a bunch of people dancing while eating ham sandwiches
17:54 < warz> ^ this guy knows
17:54 <@isaacs> sgallagh: the only alternative is to add a different ppa with a "node" package that does what you want.
17:54 < sgallagh> isaacs: Well, as far as the package name, I think calling it nodejs is still reasonable. It'll show up in searches for node with our package manager. So that's less of an issue than the file conflict
17:54 <@isaacs> sgallagh: right, i mean the issue is with the binary filename.
17:55 <@isaacs> sgallagh: how many people are trying to use *both* packages together on the same machine?
17:55 < sgallagh> So, I have two options right now.
17:55 <@isaacs> sgallagh: why not just say that they conflict with one another, and go ahead and leave the binary named "node"?
17:55 < sgallagh> One is to rename the newcomer, the other is to explicitly conflict the two packages so they can never be installed simultaneously
17:55 <@isaacs> sgallagh: yeah, i think that's probably fine.
17:55 < sgallagh> The latter is a last option because it has lots of gotchas
17:56 <@isaacs> sgallagh: or make the node binary be named "nodejs", but again, that's going to make you incompatible with the majority of other node users.
17:56 < sgallagh> Maybe not applicable in this specific case, though I don't know for sure
17:56 < sgallagh> The "gotcha" here is that by conflicting with another package, I am effectively conflicting with any other package that might depend on "node" as well
17:57 <@isaacs> sgallagh: how many of those are there?
17:57 <@isaacs> sgallagh: let's not speak in principles and abstractions here.
17:57 < CoverSlide> some distros rename it to nodejs
17:57 <@isaacs> sgallagh: search google for "node".  node.js is the top hit, followed by wikipedia, and then a bunch of stuff *about* node.js
17:57 < CoverSlide> is this for debian?
17:57 <@isaacs> sgallagh: we own the name now.
17:57 < sgallagh> Well, I'm speaking of principals and abstractions mainly because those are codified into the packaging policy
17:57 < CoverSlide> isaacs: maybe that's just your results
17:57 < sgallagh> And are the stated reason why we don't do this
17:57 < sgallagh> CoverSlide: Fedora
17:57 < CoverSlide> icic
17:58 <@isaacs> sgallagh: "those are codified into the packaging policy" <-- this is a problem wiht the "packaging policy"
17:58 < CoverSlide> oh awesome, in icognito it's still tops
17:58 <@isaacs> sgallagh: it must be optimized for winning, even at the expense of consistency.
17:58 < sgallagh> isaacs: Well, it definitely makes sense in a large number of cases
17:58 < sgallagh> This is an outlier
17:59 <@isaacs> sgallagh: yes.  outliers are where codified policies fall apart.
17:59 < sgallagh> Imagine the situation if dropbear decided it was going to own /usr/sbin/sshd
17:59 <@isaacs> sgallagh: how many people use sshd?
17:59 <@isaacs> (a: "all of them")
18:00 < sgallagh> dropbear is an alternative implementation. This specific case might be solvable with "alternatives". I just pulled the example out of the air
18:00 < sgallagh> But my point was to try to explain how the rule makes sense most of the time
18:00 < CoverSlide> yeah, well dropbear and openssh would obviously conflict, you'd have to prompt the user
18:00 < CoverSlide> however yum does it
18:00 < sgallagh> In this particular case, "node" is a leaf-package. So it's probably safe to conflict
18:00 < CoverSlide> pacman does this nicely
18:01 <@isaacs> sgallagh: also, "node" is a program with no users.
18:01 <@isaacs> sgallagh: ("no" = "a rounding error away from zero")
18:01 < sgallagh> isaacs: heh
18:01 < CoverSlide> http://cdn.memegenerator.net/instances/250x250/24169848.jpg
18:02 <@isaacs> sgallagh: one day, there will probably be something else called "node" which is very different, and will only be named that because no one is around who still uses our silly server js thingie
18:02 <@isaacs> sgallagh: language must evolve, including the language of what terms mean in package registries.
18:02 < CoverSlide> what does lucilanga
18:02 < CoverSlide> say about it?
18:03 <@isaacs> sgallagh: not changing willy-nilly, of course, but it should reflect reality
18:03 < CoverSlide> does fedora have anything like popularity-contest?
18:03 < sgallagh> isaacs: Well, we *do* have codified policy for how to deal with unresolvable conflicts. It says "agree with other distros on how to do it".
18:04 < sgallagh> Since we're the last to the game, and the other players have gone to nodejs, that's probably where we'll end up
18:04 < sgallagh> At least for now
18:04 <@isaacs> sgallagh: sure.
18:04 < CoverSlide> but does yum provide that functionality to check for conflicting files before installing packages?
18:04 < sgallagh> CoverSlide: Yes
18:05 < sgallagh> isaacs: In the meantime, I'll see if I can convince the node maintainer to retire that package
18:08 < CoverSlide> ftp://ftp.hes.iki.fi/pub/ham/linux/ax25/ << node was last updated in 2003
18:10 < thealphanerd> if anyone uses ableton live
18:10 < thealphanerd> they have the live 9 beta's open
18:10 < thealphanerd> https://www.ableton.com/en/beta-signup/
18:11 < CoverSlide> https://www.ableton.com/ << my eyes! what is with that blue font? looks like the bsod color
18:11 < MLL> hello
18:12 < jrajav> It's #0046FF
18:13 < jrajav> The BSOD is #000075
18:13  * jrajav , ridiculously literal since 2012
18:14  * Pilate must try to remember that
18:17 < MLL> I am looking for some help/tutorial/article on how to organize a node multiplayer game 
18:20 < EyePulp> MLL: organize in what regard?
18:21 < JmZ> how would node compare to a web server if used as one? in terms of performance
18:21 < JmZ> assuming only basic functionality is needed
18:24 < EyePulp> JmZ: That's not really it's core competency, per-se.  It can do it, but dedicated tools, eg. nginx, apache, are better bets.
18:24 < sgallagh> isaacs: Well, I'm stunned to say this, but it looks like the Fedora Packaging Committee is actually going to be sensible about this. We're going to rename the old 'node' package to 'ham-node' and give Node.js the name.
18:24 < sgallagh> So... hooray :)
18:24 < EyePulp> JmZ: typically the node http handlers sit behind a reverse proxy (ala nginx)
18:25 <@isaacs> sgallagh: \o/
18:25 <@isaacs> sgallagh: Despite everyone's expectation, a committee does something that everyone agrees is the best thing to do!
18:25 < sgallagh> hehehe
18:26 <@isaacs> sgallagh: a landmark day for committees everywhere!
18:26 < EyePulp> Let's form a committee to determine how best to celebrate
18:26 < Tixz> Is it considered bad practise to throw errors casually in JS? Eg. in the case of validation?
18:26 < sgallagh> EyePulp: I think we should form an exploratory committee to determine if that's a good idea
18:27 < EyePulp> Tixz: It's not bad to throw them - it's bad to bury them though.
18:27 < misterhat> yeah i thought throw was fine
18:27 < misterhat> just not try catch
18:27 < misterhat> node's convention is to have error as first argument to a callback
18:28 < EyePulp> sgallagh: You're right, of course.  I'll put a pre-exploratory stand-up on our calendar for every morning over the next two months to prepare.
18:28 <@isaacs> Tixz: throwing is generally ill-advised in node unless you're using domains to provide context
18:29 < Tixz> Alright, I am writing validation code, and have a sequence of validation rules, each tried once after the other, and if the validation doesn't pass the validator throws an error to be caught by an encapsulating validation function
18:29 <@isaacs> Tixz: eg: try { setTimeout(function(){throw 'pwned'}) } catch (e) { nope }
18:29 < misterhat> yeh no
18:29 <@isaacs> Tixz: in cases like that i usually have the validator function return false.
18:29 < misterhat> yeah
18:29 <@isaacs> Tixz: the validator is answering a question: "is this valid?"
18:29 <@isaacs> Tixz: the answer in this case is "no"
18:30 < Tixz> isaacs: Yep, however the reason I use throw is that then the "user" can specify the message parsed back
18:30 <@isaacs> Tixz: var isValid = validate(someData);  if (!valid) { handle error }
18:30 <@isaacs> Tixz: why use throw, rather than return?
18:30 < Tixz> isaacs: I see your point
18:30 < Tixz> I will go with retuning the error message instead of throwing it
18:31 < management> wow
18:31 < niggler> isaacs im looking for something akin to the __FILE__ and __LINE__ macros
18:31 < management> lots of noobs here
18:32 < management> i shall leave
18:32 < management> bye misterhat
18:33 < misterhat> bye
18:34 < niggler> misterhat where's mistertwig?
18:34 < misterhat> I HATE MISTER TWIG
18:35 < dook> Does request allow editing the http request header line, and headers?  What's a good module that does?
18:35 < drudge> dook: yes you can pass headers in
18:35 < CoverSlide> ham-node !!!
18:36 < CoverSlide> maybe node-ax.25
18:36 < CoverSlide> or ax.25-node
18:36 <@isaacs> niggler: you have __FILE__, but no __LINE__
18:36 < superjoe> is streams 2 coming out with node v10 ?
18:37 <@isaacs> CoverSlide: are you worried about conflicting with all the other ham radio programs, or future node.js programs that run on pork?
18:37 <@isaacs> superjoe: yes.
18:37 < superjoe> hell yes!
18:38 < CoverSlide> i figured 'ham' was more colloquial, ax.25 would be more precise
18:39 < CoverSlide> isaacs: what's the progress on streams2?
18:39 < CoverSlide> isaacs: and anything else fun scheduled for next v0.10.x?
18:39 < mscdex> i hope it's a good sequel
18:39 <@isaacs> CoverSlide: oh :(  I got excited for a second about running node on cold cuts
18:40 < tnorris> isaacs: I can't build v0.9.3+ with clang.
18:40 <@isaacs> CoverSlide: it's coming alone
18:40 <@isaacs> *along
18:40 < mscdex> non-blocking crypto for 0.10.x! :-D
18:40 <@isaacs> mscdex: it's still blocking, actually :(
18:40 < mscdex> and a configurable thread pool!
18:40 <@isaacs> mscdex: but it's streaming, at least
18:40 < mscdex> :-)
18:41 <@isaacs> it's a bit weird that we decided that zlib was slow enough to asyncify, but crypto is done in the main thread.
18:41 <@isaacs> when crypto is like an oom more expensive than compression
18:41 <@isaacs> (or two)
18:41 < CoverSlide> does crypto implement the streams1 interface as well?
18:41 <@mbalho> but how expensive to implement
18:41 < EyePulp> pom - out of memory?
18:41 < EyePulp> er, oom?
18:41 <@isaacs> EyePulp: oom = order of magnitude
18:42 < CoverSlide> out of mana?
18:42 <@isaacs> mbalho: well, that's the rub.  it's an older module, and so was not done as smartly, and it's important, so we can't break it easily
18:42 <@isaacs> mbalho: well, actually it's quite easy to break. but we can't break it as *cheaply*
18:42 <@mbalho> haha
18:42 <@mbalho> isaacs: i have your umbrella with me today
18:43 <@mbalho> isaacs: cause i have to go to west bay and i hear the sky is falling
18:43 <@isaacs> mbalho: perfect timing!
18:43 <@isaacs> mbalho: just the wet bits are falling out
18:43 <@mbalho> ah not so bad then
18:43 <@mbalho> earth: you got my oregon in your california
18:44 < CoverSlide> what's an oregon? is that like california jr?
18:44 <@mbalho> oregon sucks dont go there
18:47 < matbee> LOL
18:48 <@isaacs> mbalho: how long have you lived in CA?
18:48 <@isaacs> CoverSlide: it's California's Canada
18:49 <@isaacs> CoverSlide: or, alternatively, Washington's Mexico
18:49 <@mbalho> 2 years
18:49 <@isaacs> mbalho: oh, right, ok.  so you've seen this before
18:50 <@isaacs> mbalho: this is the bay area's wet season.  lasts from thanksgiving to about february or so
18:50 <@mbalho> i have memories of january being weirdly warm
18:51 <@isaacs> mbalho: yeah, that's spring1
18:51 <@isaacs> mbalho: then it gets weirdly chilly again, and then you get actual spring later on
18:51 < sgallagh> I like living in New England. We have all four seasons: June, July, August and Winter
18:51 <@isaacs> the seasons here are so strange
18:51 <@isaacs> sgallagh: YES!
18:52 < gkatsev> sgallagh: lol
18:52 < tnorris> sob. have days where you hit an error, but then can't reproduce. then you start to question your sanity?
18:52 < gkatsev> sometimes all in the same day
18:52 <@isaacs> sgallagh: oh, actually, in CT, we had the 4 actual seasons, and they looked like in the books.
18:52 <@isaacs> sgallagh: hot in summer, snowy in winter, green in spring, orange in fall
18:52 < gkatsev> it was kind of snowing earlier today.
18:52  * gkatsev is in boston
18:52 < sgallagh> gkatsev: You aren't kidding. Last year we had a Halloween that started at 65 degrees and ended in two feet of snow.
18:53 < sgallagh> gkatsev: Ah, so you lived through that too then :)
18:53 < gkatsev> yep
18:53 < nathan7> Hey isaacs 
18:53  * sgallagh lives about 20 miles north of Boston
18:53 < CoverSlide> im in southern california.
18:54 < CoverSlide> i went out in shorts and t-shirt to get some ice cream last night
18:54 < gkatsev> it was snowing/raining here last night.
18:54 < CoverSlide> and sandals
18:54 < misterhat> CoverSlide: i hate you
18:54 < misterhat> it's -8 out here
18:54 < niggler> isaacs any plan on introducing __LINE__?
18:54 < gkatsev> -8 what?
18:54 < sgallagh> misterhat: Farenheit or Celsius?
18:54 < niggler> oh man you wimps
18:54 <@isaacs> niggler: no
18:55 < misterhat> Celsius 
18:55 < sgallagh> (Hopefully not Kelvin!)
18:55 <@isaacs> sgallagh: KELVIN!
18:55 < CoverSlide> well i hate my AC bill
18:55  * sgallagh grins
18:55 < gkatsev> -8 kelvin is impossible
18:55 <@isaacs> it's so cold, we invert reality!
18:55 < sgallagh> gkatsev: Yes, we know :)
18:55 <@isaacs> gkatsev: that's loser talk.
18:55 < jhsto> do you guys know how many concurrent socket.io connections can I run on a single drone on nodejitsu?
18:55 < niggler> it needs to be sub-zero fahrenheit to consider putting the top up
18:55 <@isaacs> gkatsev: when someone tells you it's impossible, you say, "Fuck that!  My particles are moving so slowly, they're going in reverse!"
18:55 < misterhat> isaacs: you're a cool guy
18:55 < CoverSlide> kelvin? you mean bitch-fahrenheit?
18:55 < niggler> jhsto i suspect 100-150
18:56 < jhsto> thanks niggler, too bad that i need a lot more
18:56 < niggler> (based on what ive read in the past -- it may have improved)
18:56 <@isaacs> niggler: doing __LINE__ would be hard.
18:56 <@isaacs> niggler: and probably expensive.
18:56 < jhsto> I think they were able to keep up 2000 connections, but I have no idea that how many drones that took.
18:57 < nathan7> isaacs: okay
18:57 < niggler> why would it be expensive?
18:57 < jhsto> Idk would it be more const efficient to buy those low-end OVH dedicated servers
18:57 < nathan7> isaacs: the culprit seems to be /usr/bin/env ZSH=$ZSH zsh $ZSH/tools/check_for_upgrade.sh
18:58 <@isaacs> nathan7: AHA!
18:58 < nathan7> isaacs: comment it out and nave works
18:58 <@isaacs> nathan7: i will unset ZDOTDIR
18:58 < nathan7> isaacs: so if you'd export DISABLE_AUTO_UPDATE=true
18:58 < nathan7> isaacs: then it magically works
18:58 <@isaacs> nathan7: oh, that would probably be a good idea anyway
18:58 <@isaacs> nathan7: after all, you're already in a shell, probably already checked for updates.
18:58 < nathan7> isaacs: mhm
18:59 < nathan7> isaacs: Yep, works perfectly now
18:59 <@mbalho> anyone know a command line node module that listens to a folder for file changes and runs a shell script on change? there are like 500 modules that kind of do this but they all seem buggy/overengineered
18:59 < CoverSlide> how much is an ovh server?
18:59 <@mbalho> like npm install -g filewatcherthing; filewatcherthing . "make"
18:59 < CoverSlide> compared to $5 per month 
18:59 < nathan7> mbalho: /usr/bin/watch
19:00 < niggler> watch just runs a command many times
19:00 < nathan7> mbalho: make is smart enough to not recompile evrything
19:00 < nathan7> niggler: Yes.
19:00 < nathan7> niggler: And that's just fine
19:00 < niggler> nathan7: " listens to a folder for file changes and runs a shell script on change? "
19:00 < niggler> unless you are suggesting watch make
19:00 <@isaacs> mbalho: that'd be tricky since "make" will cause changes
19:00 < niggler> in which case you could just do a shell loop
19:01 <@isaacs> mbalho: if your default target is a .PHONY, then it'll go forever.
19:01 <@isaacs> mbalho: so it'd have to at least wait for the child to close before running again
19:01 <@mbalho> yea
19:01 <@mbalho> so i figure someone has solved this problem
19:01 <@isaacs> mbalho: one second...
19:02 < niggler> mbalho just use a shell loop that stats and sleeps
19:03 < nathan7> make stats
19:04 <@mbalho> niggler: i cant npm install -g what you just said
19:04 < nathan7> mbalho: npm install -g 2>/dev/null && while sleep 1;do make;done
19:04 < niggler> "runs a shell script on change? " already seems somewhat specific
19:05 < niggler> im sure the behavior can be extricated from an existing module like forever
19:06 < sinclair|work> niggler: hi
19:06 < sinclair|work> niggler: do you use any of the fibre modules around, like syncronize or fibrous ?
19:08 < niggler> sinclair|work ive seen pretty good performance using 'sync'
19:08 < sinclair|work> niggler: really?
19:08 < sinclair|work> niggler: are you for or against them?
19:09 < sinclair|work> fibires i mean
19:09 < sinclair|work> *fibres
19:09 < niggler> isaacs can probably give the right answer
19:09 < sinclair|work> ah gezz
19:09 < nathan7> async <3
19:09 < nathan7> fibers aren't portable and are just re-introducing threads
19:09 < nathan7> I *like* the threadlessness of node.js
19:09 < sinclair|work> nathan7: no you are against them?
19:09 < sinclair|work> nathan7: threads are not bad
19:10 < sinclair|work> or evil
19:10  * mscdex shakes a fist at fibers
19:10 < nathan7> They're pretty bad, but a necessary evil at times.
19:10 < niggler> they do exactly what you expect
19:10 < nlf> bah, humbug
19:10 < niggler> its like eval
19:10 < nathan7> mhm
19:10 < sinclair|work> niggler: not at all
19:10 < niggler> lots of people curse eval but there are perfectly acceptable use cases with significant performance benefits
19:11 < sinclair|work> niggler: i don't know what to make of these fibre frameworks monkey patching all over the place
19:11 < nlf> so long as you're not eval-ing user input
19:11 < nlf> and you're making sure things are properly escaped
19:11 < niggler> i think node could use some sync sugar
19:11 < nlf> go nuts
19:11 < niggler> nlf that doesnt exactly sound like an endorsement
19:11 < sinclair|work> niggler: on one side, i like synchronous looking code that's actually non blocking, on the other side, i don't like the monkey patching and reliance on native modules
19:11 < nlf> although from what i hear, new Function is faster
19:12 < nlf> niggler: it's not
19:12 < niggler> new Function is a form of eval
19:12 < nlf> yeah
19:12 < nathan7> niggler: async is that sugar to me
19:12 < nathan7> https://github.com/caolan/async
19:12 < sinclair|work> nathan7: yes, ive looked at async
19:12 < matbee> async is wonderful
19:13 < matbee> but thats not fibres, right?
19:13 < sinclair|work> matbee: async is powerful, and yes, its not fibres
19:13 < nathan7> It makes fibres unnecessary to me
19:13 < matbee> exactly
19:13 < matbee> I was like whoawhoawhoa
19:14 < CoverSlide> async? you mean bitch-counters?
19:14 < nathan7> .series and .waterfall replace what I'd otherwise turn into a staggered pile of crap or fiberstuff
19:14 < superjoe> https://github.com/visionmedia/batch is cool too if you don't need the fancy stuff
19:14 < nathan7> .auto is magical but I haven't needed it yet
19:15 < CoverSlide> there are 345548973948753 different flow control libraries for node
19:15 < matbee> lol
19:15 < CoverSlide> async is probably the most popular
19:16 < sinclair|work> superjoe: sorry, i don't use tj's code
19:16 < sinclair|work> ever
19:16  * warz slow caps
19:16 < CoverSlide> um what's wrong with tj's code?
19:16  * nathan7 blinks
19:16 < CoverSlide> probably better than yours
19:17 <@isaacs> mbalho: hm... seems like fs.watch is only catching rename events...
19:17 <@isaacs> mbalho: when you watch a dir
19:17 < sinclair|work> CoverSlide: stop the idle worship, 
19:17 < superjoe> *idol
19:17 < sinclair|work> superjoe: thanks, 
19:18 < EyePulp> Internet Idle
19:18 < TooTallNate> sinclair|work: hater?
19:18 < CoverSlide> i just think it's ignorant to say "i will never use code written by X"
19:18 < warz> i on the other hand find myself using something that tj wrote in basically every project of mine
19:19 < sinclair|work> TooTallNate: no
19:19 < CoverSlide> it's not idol worship, it's anti-ignorance
19:19 < sinclair|work> CoverSlide: grow up
19:19 < TooTallNate> sinclair|work: so what do you call it then?
19:19 < warz> sinclair|work, you still have not given a reason. it was pointless to mention that without a reason.
19:19 < sinclair|work> TooTallNate: its called, 'i don't want to use tj's code'
19:19 < nathan7> sinclair|work: What's the criterium?
19:20 < sinclair|work> who cares
19:20 < nathan7> Did he hurt your feelings or something?
19:20 < nathan7> I care.
19:20 < TooTallNate> http://24.media.tumblr.com/tumblr_m73gcwkehS1qksk74o1_400.jpg
19:20 < sinclair|work> nathan7: use his code if you want, don't expect me to
19:20 < nathan7> sinclair|work: I don't expect you to
19:20 < nathan7> sinclair|work: I use his code if his code is what comes up
19:21 < warz> nobody expects you do, but im sure we all think you look foolish for stating that and not giving some sort of reason
19:21 < nathan7> sinclair|work: I will not exclude TJ's code for being TJ's code
19:21 < nathan7> I won't usually use Express because I use Flatiron these days
19:21 < sinclair|work> nathan7: you exclude .net and ts because its written by microsoft
19:21 < sinclair|work> nathan7: a lot of people here hate on microsoft
19:21 < nathan7> sinclair|work: I don't like TS as a language.
19:21 < sinclair|work> for no reason
19:21 < TooTallNate> people just usually have reasons is all
19:22 < sinclair|work> (well, no reasonable reason)
19:22 < nathan7> sinclair|work: I came to JS for the sensible typing system
19:22 < TooTallNate> like you?
19:22 < DTrejo> sinclair|work: thats sad
19:22 < jrajav> Hating Microsoft is different from hating a specific person
19:22 < warz> thats called being a hater.
19:22 < warz> haha.
19:22 < nathan7> sinclair|work: TypeScript is trying to bring typing I don't want
19:22 < tracker1> sinclair... lol @ 'I don't want to use tj's coe'
19:22 < sinclair|work> i don't hate tj ffs, i just won't use anything he's written
19:22 < nathan7> Why is the author and not the code quality the criterium?
19:22 <@isaacs> mbalho: https://github.com/isaacs/filewatcherthing
19:23 < ccowan> Wow!
19:23 < DTrejo> hey guys, guess what, i dont use modules that start with the letter "a"!
19:23 < jrajav> DTrejo: You a-hole
19:23 < CoverSlide> microsoft employees wrote parts of node and libuv :O
19:23 < DTrejo> wow i should shut up, sorry im being mean
19:23 < niggler> isaacs what's unpossible?
19:23 < tracker1> nathan, tj is not inclined to accept outside contributions?
19:23 < sinclair|work> CoverSlide: yeah
19:23 < nathan7> I don't use modules written by people whose names don't sound white enough!
19:23 < jrajav> isaacs: That is the greatest repo name + description
19:23 < tracker1> ccowan, chris?
19:23 < nathan7> nor modules from people with a q in their name
19:23 < ccowan> yup
19:23 < warz> i dont use npm to install packages because today is wednesday and i just had lunch
19:24 < CoverSlide> i would have called it filewatcherthingformax
19:24 < jrajav> I have a friend who's a Microsoft employee
19:24 < nathan7> isaacs: <3
19:24 < jrajav> He's a really cool guy
19:24 < niggler> side question: what's the best way to do CPU-intensive stuff in node
19:25 < tracker1> jrajav, I know several MS employees.. most of them are cool.. one's an arrogant ass... not sure that's relevant.
19:25 < tracker1> niggler, C module
19:25 < ccowan> I won't use anything that isaacs woteâ€¦ oh fuck! Now I'm really screwed!
19:25 < CoverSlide> niggler: fire off a separate process
19:25 < jrajav> That's relevant to the sample group being a group of coders
19:25 < jrajav> That's about all it's relevant to :P
19:25 < CoverSlide> or, yeah, a C module
19:25 < jrajav> Whether we admit it or not a lot of us are assholes
19:25 < jrajav> Or at least sociopathic
19:25 < jrajav> I 
19:25 <@isaacs> niggler: for __LINE__-ish behavior, you could look at how lib/assert.js gets the caller stack
19:26 < jrajav> 'm not sure which is better
19:38 < jtoft> I'm using express and I want to proxy a request based on some token parameter. However,  proxy.proxyRequest doesn't seem to respond when I run it inside of a redis callback: http://pastebin.com/JMYVS5xj Any ideas? Am I doing it wrong?
19:42 < acidjazz> so how do you guys generally handle your sites/etc and as far as this "node sites.js" thing
19:42 < CoverSlide> jtoft: you have to rebind the redis callback
19:42 < CoverSlide> or 'bind' it
19:42 < CoverSlide> to the 'this'
19:42 < CoverSlide> not sure how to do that in coffee script
19:42 < jtoft> that's what the double arrows does
19:42 < jtoft>  =>
19:42 < jtoft> as opposed to ->
19:43 < acidjazz> like is there some package/etc for this? what do people do in production environments?
19:43 < CoverSlide> you're sure that's how it's coming out?
19:43 < jtoft> i'll show you the gen'd js
19:43 < CoverSlide> i'd rather look at the compiled js instead of cs
19:43 < yorick> isaacs: the worst part of it is that isNaN(null) == false makes sense to me :P
19:44 < tracker1> acidjazz... not sure what you are referring to.. you mean installing a given script to run as a service, passing configuration settings???
19:44 < acidjazz> tracker1: or just a servvice thats monitored.. like apache2ctl and ubuntu's 'server'
19:44 < nathan7> yorick: null is not NaN
19:44 < jtoft> CoverSlide: in js: http://pastebin.com/2Y0HDWkX
19:44 < nathan7> yorick: simple as that
19:44 < yorick> nathan7: yep
19:44 < yorick> nathan7: https://twitter.com/izs/status/273854581123985408
19:45 < yorick> NaN should probably just have equaled itself
19:45 < tracker1> acidjazz.. my main script uses workers via cluster, that binds the exit event, so that it can log anything needed and re-spawn the worker.
19:45 < yorick> mathematical sense is overrated
19:45 < nathan7> yorick: No, that's part of some IEEE spec
19:45 < nathan7> yorick: it makes a bunch of sense
19:45 < yorick> nathan7: it does, but consistency is also important
19:45 < tracker1> acidjazz, there's also handling for uncaught errors...
19:45 < yorick> everything equals itself, except NaN
19:45 < nathan7> yorick: NaN is there for consistency reasons
19:46 < rcrowley> Hi y'all.  I'm confused by the cluster module and how it passes a newly-opened file descriptor from a parent process to a child process in a way that allows the child process to accept(2) and not get EBADF.  Is this documented anywhere?  Does it use the CLONE_FILES flag to clone(2) (on Linux)?
19:46 < nathan7> two NaNs can't meaningfully equal each other
19:46 < tracker1> I haven't worked with adding domain structures...
19:46 < CoverSlide> I like chickpeas with my NaN
19:46 < niggler> anyone use 'ab' on osx?  even simple servers like the test server slow to a crawl when using -c 2
19:46 < yorick> nathan7: true, but is that more imporant than consistency?
19:46 < acidjazz> tracker1: so you wrote all this yourself?
19:47 < nathan7> yorick: Yes, NaN is there so errors propagate correctly
19:47 < niggler> nathan7 strictly speaking there is a meaning to having specific nan values and comparing them
19:47 < tracker1> acidjazz... pretty much, it isn't too complex though
19:47 < tracker1> just a min...
19:47 < nathan7> niggler: stop being you.
19:47 < niggler> NaN is a family :)
19:47 < yorick> nathan7: the alternative would be non-silent NaNs, which throw exceptions.
19:47 < acidjazz> is there really no package out there for this?
19:48 < yorick> nathan7: which are also in the spec
19:48 < nathan7> yorick: hm
19:48 < tracker1> acidjazz, http://pastebin.com/Q5XwwqAZ line 2 is because I'm running in wondows, you can nuke it if you don't need win support
19:48 < niggler> where's purr when you need him/her/it?
19:48 < tracker1> acidjazz, so I can double-click the script in windows that is.
19:48 < acidjazz> not bad tracker1 
19:48 < niggler> tracker1 pastebin=evil
19:49 < acidjazz> but still.. arent there production sites out there running node?
19:49 < tracker1> niggler, your chosen alternative?
19:49 < niggler> gist or jsfiddle/jsbin
19:50 < niggler> pastebin had some issues with quotes inside comments (like writing "isn't" in a comment)
19:50 < ccowan> acidjazz: Yupâ€¦ we are running node in production on ubuntu
19:50 < ccowan> Using an upstart script
19:50 < tracker1> acidjazz, you could look at say nodester if you want more of a platform you can replicate internally... https://github.com/nodester
19:50 < niggler> ccowan you mean nodejs
19:50 < acidjazz> ccowan: and you'r enot just node app.js & ?
19:50 < niggler> node on ubuntu is something different
19:50 < jesusabdullah> substack: https://github.com/substack/pushover/issues/16 ;_;
19:51 < ccowan> niggler & acidjazz .. Yesâ€¦ NodeJS
19:51 < ccowan> acidjazz: Give me a second I will send you a gist of ours 
19:52 < ccowan> acidjazz: ours is something like this: https://gist.github.com/3308895
19:54  * sinclair|work returns
19:54 < ccowan> in our script we use the cluster module to spawn an instance per CPU
19:54 < ccowan> We also track when they die and restart them
19:54 < tracker1> acidjazz, currently in windows here.. using nssm to have a service that essentially runs node script.js
19:55 < sinclair|work> nathan7: there is more to TS than typing, but i really can't be bothered discussing it
19:55 < tracker1> sinclair|work, but is there any advantage if you aren't using VS for dev currently?
19:55 < CoverSlide> oh and ham-node can't be touched by jews or muslims
19:55 < sinclair|work> tracker1: of course
19:56 < CoverSlide> I just thought of that one
19:56 < tracker1> CoverSlide, I mean more than type checking..
19:56 < CoverSlide> no not that
19:56 < tracker1> sorry, sinclair|work ... my bad...
19:56 < nathan7> sinclair|work: Yes, classes
19:56 < CoverSlide> Fedora's old `node` module is being renamed to `ham-node`
19:57 < tracker1> nathan7, I don't consider classes necessarily an advantage..
19:58 < sinclair|work> tracker1: i don't really want to talk about, if you are curious, join #typescript
19:59 < CoverSlide> JAVASCRIPT AIN'T GOT NO CLASS
20:00 < tracker1> CoverSlide, and that's not a bad thing.. ;)
20:00 < sinclair|work> i will say this tho, language to js compilers are awesome in general, but could be so much more awesome if they stop trying to produce readable output.
20:00 < sinclair|work> a trade off
20:00 < CoverSlide> you can minify it
20:01 < CoverSlide> and they ain't that readable
20:01 < tracker1> sinclair|work, I think that is necessary for debugging...
20:01 < sinclair|work> CoverSlide: it's not what i mean at all
20:01 < tracker1> or any chance of...
20:01 < CoverSlide> one thing they do do is produce ES3-compatible output, which I wish was only optional
20:02 < kpwn> hi
20:02 < sinclair|work> CoverSlide: for example, Assembler cares not for classes, interfaces, lambda or anything, in compilers we trust, and we never look at compiled ASM
20:02 < sinclair|work> CoverSlide: those rules "could" apply for X to JS compilers
20:03 < sinclair|work> CoverSlide: and, if so, these X to JS compilers could do some pretty amazing things
20:03 < Benvie> how about producing bytecode
20:03 < sinclair|work> Benvie: well, that would be the obvious solution *Dart* 
20:04 < Benvie> http://benvie.github.com/continuum/
20:04 < CoverSlide> PARROT SHOULD BE THE STANDARD!! RAAAWRR!!
20:04 < sinclair|work> Benvie: nice, ill take a look later
20:05 < Benvie> it's a bytecode virtual machine that runs es6 in es3 and doesn't produce readable codegen
20:05 < Benvie> lol
20:05 < sinclair|work> Benvie: well, bytecode wasn't exactly what i mean't by non readable, but yeah 
20:05 < Benvie> it's of the same spirit
20:06 < Benvie> reducing the code down even further than just unreadable, but into its component operations
20:06 < Benvie> moving bits around
20:06 < CoverSlide> motherfuck bing maps
20:06 < sinclair|work> Benvie: you know, instead of node running JS, node should run bytecode
20:06 < ericelliott> How do I get an environment variable?
20:06 < sinclair|work> Benvie: before you know it, you have a managed runtime
20:07 < sinclair|work> Benvie: then .net
20:07 < Benvie> I'm working on making this capable of producing serializable bytecode, and serializable state as well
20:07 < sinclair|work> Benvie: oh, you wrote this ?
20:07 < CoverSlide> sinclair|work: it's called vart.x
20:07 < CoverSlide> *vert.x
20:07 < Benvie> and also doing partial evaluation of the interpreter so you can compile the interpreter into a program
20:07 < Benvie> yeah
20:07 < hbeck> anyone able to help with a libxmljs question? The docs say that the text() function returns the content of the element *including* text() of all child nodes - how can I get text() of only the current node?
20:07 < sinclair|work> Benvie: nice work
20:07 < CoverSlide> and it runs on the jvm
20:08 < nathan7> tracker1: Me neither
20:08 < Benvie> es6 in ie6
20:08 < nathan7> tracker1: JS's object model <3
20:09 < sinclair|work> Benvie: you wrote this from scratch ?
20:09 < Benvie> indeed
20:09 < Benvie> well I use esprima to parse
20:10 < Benvie> the js builtins are self-hosted and bootstrapped by the virtual machine https://github.com/Benvie/continuum/tree/gh-pages/modules
20:10 < Benvie> written in es6 style code
20:11 < sinclair|work> Benvie: pretty good mate, i like it
20:11 < Benvie> thanks =D
20:12 < ari> Does anyone know how to load submodules of a module via require('')
20:12 < ari> Like if you had your main file as main
20:12 < nathan7> ari: submodules?
20:12 < nathan7> oh
20:12 < ari> and another file that was nammed perhaps, logger
20:12 < nathan7> require('module/main')
20:12 < nathan7> require('module/logger')
20:13 < ari> right.
20:13 < ari> but let's say this is a npm package.
20:13 < ari> of some sort.
20:13 < sinclair|work> Benvie: hows the performance btw ?
20:13 < ari> and the package name is main
20:13 < ari> is it possible to do something like
20:13 < ari> require('main/logger')
20:13 < Benvie> I dunno, unmeasured as of yet. It's completely unoptimized thus far, since I'm just finishing up the runtime
20:13 < Benvie> but I think I can get it optimized well
20:13 < Benvie> I'm planning on doing some JIT-like stuff
20:13 < Benvie> tracing JIT and inline caching
20:14 < Benvie> I can do tracing JIT by tracing operations and expanding them out into functions using new Function basically and inline the operations
20:14 < Benvie> same with property access for inline caching
20:15 < Benvie> it's probably not going to be sufficient for use in production ever
20:15 < nathan7> ari: of course you can
20:15 < nathan7> ari: the npm-ness doesn't change anything
20:15 < Benvie> but the goal use is in debugging and dev environment
20:16 < Benvie> I'm working on an interface where the inspector and the code editor are the same thing. Where the code becomes real objects as you write it and you can inspect it in place
20:16 < Benvie> or snapshot execution and pause and rewind
20:17 < daRkKn1ghT0> or snapshot execution and pause and rewind
20:17 < nathan7> Benvie: that sounds almost LISP-like
20:17 < Benvie> it could be provided as an API to code running in the VM, which would make it call/cc basically
20:17 < yorick> Benvie: you do like doing weird stuff, don't you :)
20:18 < Benvie> haha I do
20:18 < Benvie> making dev tools is what I like to do most and a Continuum based editor is the ultimate realization of that
20:28 < sinclair|work> Benvie: you're doing well mate :)
20:31 < daRkKn1ghT0> hey
20:34 < Raynos> Benvie: I have a good usecase for continuum
20:34 < Raynos> Benvie: I want to parse arbitary JS and extract function signatures doctorJS style
20:35 < Benvie> if you just mean based on source then that's easy to do with just esprima
20:35 < Benvie> if you mean types then yeah continuum would be more suited to that
20:35 < MI6> joyent/libuv: Ben Noordhuis master * df1399f : Remove *.mk and *.Makefile from .gitignore list  The *.mk and *.Makefile  - http://git.io/bpLksA
20:35 < daRkKn1ghT0> hey
20:37 < Raynos> Benvie: I want type information. i.e. you do your magic JIT type interference and give me that data
20:38 < Benvie> yeah it currently doesn't do analysis of the source but that's going to happen here shortly since I need it for a bunch of things
20:39 < CoverSlide> does the bytecode map directly to javascript? can the bytecode be used to decompile to javascript?
20:39 < sinclair|work> Benvie: i'd like a VM for TS, wouldn't be too difficult to get TS up and running, the compiler outputs AST's and anything else you need to gen bytecode
20:39 < Benvie> it can't be directly converted back no
20:40 < Benvie> it can be mapped back though, currently ops have recorded in them the source location
20:40 < Benvie> if I can AST, especially if it's similar or compatible to the defacto standard
20:40 < Benvie> then that's trivial enough to plug in
20:41 < sinclair|work> Benvie: yup, totally trivial 
20:41 < Benvie> it'd just be a matter of implementing any AST structures they have that aren't standard
20:41 < sinclair|work> Benvie: i think they are closely aligned 
20:41 < CoverSlide> so this bytecode of yours, does it have a human-readable intermediate format?
20:41 < Benvie> I would imagine, or at least hope, they are. Since there's a bunch of interoperable implementations at this point of the reflect-style JS AST
20:42 < Benvie> the bytecode is inspectable yeah
20:42 < Benvie> if you look at it in node you see something like
20:42 < CoverSlide> looking through your code, trying to wrap my head around it
20:42 < sinclair|work> Benvie: i can fish up the nodes for you if you want
20:42 < Benvie> it's a lot of code
20:43 < Benvie> https://github.com/Benvie/continuum/blob/gh-pages/engine/assembler.js#L1139 that's where the AST to bytecode area begins
20:43 < CoverSlide> oh so the bytecode is human-readable? so it's more like a DSL?
20:44 < Benvie> so the bytecode itself looks like (when translates to a readable format
20:44 < Benvie> if you do continuum.createCode('var x = 10')
20:44 < Benvie> you get a Code object, and the ops it has inspect as [ LITERAL(10), GET(), VAR('x'), COMPLETE() ],
20:44 < CoverSlide> i see
20:44 < Benvie> https://github.com/Benvie/continuum/blob/gh-pages/engine/thunk.js#L170
20:45 < Benvie> there's around 70 opcodes currently and all the implementations are there
20:45 < Benvie> but a lot of logic is in the runtime itself (which I'd like to change and get more of it into bytecode form)
20:45 < Benvie> it's a stack machine currently though considering changing to a register machine
20:46 < sinclair|work> Benvie: http://typescript.codeplex.com/SourceControl/changeset/view/d65fcce29d60#src%2fcompiler%2fast.ts
20:47 < Benvie> hmm most of it is similar of course
20:47 < Benvie> would need a bit of translation since the assembler assumes that each node type has certain fields
20:48 < Benvie> but that's like spreadsheet work, not really difficult
20:48 < Benvie> https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
20:48 < Benvie> that's what esprima produces and obviously mozilla's stuff produces and what it currently consumes
20:49 < sinclair|work> Benvie: http://pastebin.com/Kbu7AQLL
20:49 < Benvie> actually this is a better example, this is actual AST output from esprima's harmony branch https://github.com/ariya/esprima/blob/harmony/test/harmonytest.js
20:50 < Benvie> the loc is used for Error information but it's not needed otherwise
20:51 < sinclair|work> Benvie: just looking through
20:51 < dook> Q:  If a prototype is defined within a module, how do I create a new instance of it in my project?  Is it "new module.prototype-name(args)"?
20:51 < sinclair|work> Benvie: a TS VM would make all my dreams come true
20:52 < Benvie> just looking at this
20:52 < Benvie> it's definitely doable
20:52 < Benvie> it'd probably be easier to just make a converter that converts TypeScript AST into Parser API AST and then implement any of the extra details
20:53 < Benvie> and then that'd be workable
20:53 < sinclair|work> Benvie: yup :)
20:53 < roark> yo. anyone know if there's a way of replacing an already-printed console.log line rather than printing a new line?
20:53 < roark> if i wanted to do a progress bar, for example
20:53 < Benvie> the type checks in TypeScript
20:54 < Benvie> are they optional on purpose or due to not wanting to load down the converted code at runtime?
20:54 < CoverSlide> roark: process.stdout.write('\r')
20:54 < Benvie> IE would that benefit from actually implementing them in the virtual machine?
20:54 < sinclair|work> Benvie: they are only relevant to the compiler, 
20:54 < Benvie> cause that'd be easy to do and interesting
20:54 < CoverSlide> you mean the editor
20:54 < roark> thanks very much cover
20:55 < Benvie> a lot of the extra features in TypeScript (as far as I understand it) are similar or the same as new features in ES6
20:55 < Benvie> like classes and super
20:55 < Benvie> so those are already a given feature, since Continuum implements that stuff
20:55 < sinclair|work> Benvie: yes
20:55 < gkatsev> isn't TS's classes just current ES6 classes? Which actually isn't that great, since ES6's classes can change...
20:55 < CoverSlide> does continuum implement guards?
20:55 < Benvie> they are unlikely to change much
20:55 < sinclair|work> Benvie: it would be a good fit, plus you get the compiler for free 
20:56 < Benvie> not guards no
20:56 < CoverSlide> I think TS's classes are based on JScript's classes
20:56 < MI6> joyent/node: Joshua Erickson v0.8 * c9f2531 : net: More accurate IP address validation and IPv6 dotted notation.  * Add - http://git.io/5zW98g
20:57 < sinclair|work> Benvie: writing lexers, is not my idea of fun, you get a lot of bang for buck with TS
20:57 < Benvie> the classes in es6 and implemented in continuum are such that are more complicated class system could be built on them easily enough
20:57 < Benvie> they're minimal and just hook up the necessities pretty much
20:58 < Benvie> probably most of the extra functionality you'd want for TypeScript wouldn't be implemented in bytecode actually
20:58 < Benvie> some of it might
20:58 < Benvie> I actually have set up Continuum to be very easy to extend with custom functionality object types, like for example ArrayBuffers have special semantics for handling indexed access
20:58 < CoverSlide> we should all just give up on javascript, and go back to writing everything in flash and AS3. 
20:58 < Benvie> and they're set up using that simple API
20:59 < CoverSlide> I personally used to love AS3, but the Steve Jobs says "I hate Flash" so now everyone hates Flash
20:59 < sinclair|work> Benvie: what extra features do you think TS offers that es6 doesn't?
20:59 < CoverSlide> bunch of conformists
20:59 < tlrobinson> how can I find out what event listeners/connections/whatever are preventing my node.js process from exiting?
20:59 < Benvie> I'm not sure, not many
20:59 < Benvie> I think it'd be trivial probably the implement TS support in Continuum
21:00 < Benvie> I'm not familiar enough with it to know exactly what extra needs to be added
21:00 < sinclair|work> Benvie: none that i know of, the interfaces perhaps, but they need not be implemented anyway
21:00 < Benvie> yeah I was going to say, one of the features of an interface is that it doesn't get to the runtime =D
21:01 < sinclair|work> Benvie: outside of those, there is not all that much going on
21:02 < tlrobinson> is there any way to inspect the event loop?
21:02 < tlrobinson> using the debugger or whatever
21:02 < sinclair|work> Benvie: if you check out the TS repo, and hook up the compiler, you can have a play around in the AST 
21:03 < Benvie> yeah I was just pulling up tthe spec for it now
21:03 < mscdex> continuum.ts
21:04 < Benvie> it seems like the big benefit would be 
21:04 < Benvie> similar to how the debugger interface I currently have shows function parameters
21:05 < Benvie> would be to have that information available extended with TypeScript's information
21:05 < Benvie> another would be runtime verification of the types
21:06 < sinclair|work> Benvie: join #typescript
21:07 < TehShrike|Work> Has anyone got globally installed packages to work on Windows (running them from the command-line, not requiring them)?
21:08 < sinclair|work> TehShrike|Work: yes
21:08 < TehShrike|Work> sinclair|work: howdja do it?
21:08 < nlf> i'm up to 37 days windows free
21:08 < sinclair|work> npm install [module] -g
21:08 < TehShrike|Work> And then how did you run that module on the command-line?
21:08 < sinclair|work> [module]
21:09 < sinclair|work> TehShrike
21:09 < TehShrike|Work> Huh.  Whenever I do "node [module]" it only looks in the current working directory.
21:09 < nathan7> The 'node' is the issue
21:09 < CoverSlide> NOT node [module]
21:09 < TehShrike|Work> Maybe I need to find the global install directory and add it to my path
21:09 < TehShrike|Work> ooh!
21:09 < CoverSlide> just [module]
21:09 < sinclair|work> TehShrike: i don't understand
21:09 < sinclair|work> what CoverSlide said
21:10 < CoverSlide> or maybe [module].cmd
21:10 < TehShrike|Work> Well, that doesn't work for me
21:10 < CoverSlide> that's how I got it to work with cygwin
21:10 < TehShrike|Work> Cygwin != Windows command line :-P
21:10 < sinclair|work> TehShrike: can you run node from the command line ?
21:10 < tracker1> TehShrike|Work, seems to work out of the box for me.. sometimes the node path environment variable needs to be quoted... also "GLOBAL" in windows for node is per-user
21:10 < CoverSlide> I know
21:10 < CoverSlide> make sure it's on the PATH
21:10 < TehShrike|Work> sinclair|work: yup, I put node's bin folder in my path
21:10 < tracker1> TehShrike|Work, so in windows, you need to do the install as the user you're going to run under.
21:11 < TehShrike|Work> tracker1: right, that's what I'm doing
21:11 < sinclair|work> what about from say :C/ ?
21:11 < TehShrike|Work> sinclair|work: no luck
21:11 < sinclair|work> TehShrike: then you need to hook up an environment variable 
21:11 < sinclair|work> where is node installed
21:12 < TehShrike|Work> C:\Program Files\nodejs
21:12 < tracker1> C:\Users\YOURUSER\AppData\Roaming\npm
21:12 < sinclair|work> Program Files or Program File (x86)
21:12 < TehShrike|Work> tracker1: ah, there it is, thanks
21:12 < tracker1> should be something like this for your user variables  PATH = %PATH%;...\npm
21:12 < sinclair|work> TehShrike: go to a command line window and type "set"
21:13 < tracker1> I find it really annoying *global* isn't say C:\ProgramData\npm
21:13 < TehShrike|Work> sinclair|work: I usually add path variables through the environment variables dialog :-x
21:13 < niggler> damn dentists
21:13 < sinclair|work> TehShrike: iirc, the installer for node has a bug in it
21:14 < sinclair|work> TehShrike: check that the env for PATH is set to Program Files, not Program Files (x86)
21:14 < TehShrike|Work> Oh, I can run node on the command-line just fine
21:14 < TehShrike|Work> It's just the global modules that it can't find
21:14 < tracker1> sinclair|work, assuming the 64-bit version on win64
21:15 < tracker1> I have x86 simlynked to the other, because the IIS-Node assumes node is in the (x86) dir..
21:15 < tracker1> though gave up on iis-node and using ARR for reverse-proxy.
21:15 < sinclair|work> TehShrike: what is the path for AppData/Roaming say .. mines C:\Users\sinclair\AppData\Roaming\npm\ (with a backslash at the end)
21:15 < tracker1> TehShrike|Work, there are definitely niggles regarding Node.js on windows.
21:16 < TehShrike|Work> sinclair|work: so far I've tried ...Roaming\npm and ...Roaming\npm\node_modules
21:16 < tracker1> sinclair|work, %APPDATA%\npm
21:17 < sinclair|work> TehShrike: with a backslash at the end ?
21:17 < TehShrike|Work> I've tried with and without the trailing backslash (pretty sure it doesn't matter for PATH)
21:17 < sinclair|work> C:\Users\sinclair\AppData\Roaming\npm\   <-- last backslash is important
21:17 < acidjazz> whats the yay/nay for mongoose? use it? no?
21:17 < tracker1> TehShrike|Work, %APPDATA%\npm for module scripts for global utils... %HOME%\node_modules is the module path
21:17 < sinclair|work> TehShrike: it does matter 
21:18 < sinclair|work> C:\Users\sinclair\AppData\Roaming\npm <---- thinks npm is a file, not a directory
21:18 < confoocious> Benvie: Very nice work.
21:18 < sinclair|work> C:\Users\sinclair\AppData\Roaming\npm\ <---- important
21:18 < Benvie> thanks =D
21:18 < sinclair|work> TehShrike: change it to its path (with the trailing backslash) then restart your computer, 
21:19 < TehShrike|Work> sinclair|work: no, most of the values in my path are directories without a trailing slash, and they work fine :-x
21:19 < TehShrike|Work> Also, you don't have to restart your computer
21:19 < sinclair|work> TehShrike: trust me
21:19 < TehShrike|Work> You just have to re-open any command prompt windows
21:19 < sinclair|work> TehShrike: no, you don't, you need to log out and back in again
21:19 < tracker1> sinclair|work, , you shouldn't need to restart, just re-open a command prompt.
21:19 < TehShrike|Work> sinclair|work: no, you really don't :-x
21:20 < TehShrike|Work> Try it
21:20 < sinclair|work> TehShrike: yes you do
21:20 < sinclair|work> TehShrike: i have tried it, windows doesn't pick up on env changes (at the command prompt) until you log out and back in again
21:20 < TehShrike|Work> Well, that's why I don't change them on the command prompt, I change them in the environment variables dialog
21:21 < sinclair|work> TehShrike: doesn't matter, that's where i normally change them too
21:21 < Jimu> Frequently I'll be in interactive mode, and after finishing a completely correct statement, hit enter and it shows '...' as if i'm not finished or still nested. Anyone else have this happen?
21:21 < TehShrike|Work> I've added a good number of directories to the PATH and then just restarted my command prompt windows (Windows 7)
21:22 < tracker1> Jimu, pebcak issue... you have something that isn't a proper end of statement
21:22 < sinclair|work> TehShrike: Paths added to the environment variables will not be looked at in the command prompt until you log out and back in again
21:22 < sinclair|work> TehShrike: true story, its bothered me for years
21:22 < tracker1> sinclair|work, funny, haven't ever had that issue.. win7 x64 for several years now...
21:22 < tracker1> just needed to close/re-open command prompts
21:23 < TehShrike|Work> srsly, I've never had to log out to get PATH variables to work
21:23 < Jimu> tracker, here's an example that's currently driving me nuts: "var o = require('./levels.json');" 
21:23 < tracker1> Jimu, weird.. not had that happen.
21:24 < tracker1> Jimu, been doing stuff like that all day today.
21:24 < Jimu> does the '/' work as directory separator on win?
21:24 < tracker1> Jimu, yes
21:25 < ReinH> So are folks actually using zappajs or is it mostly seen as a toy/experimental thing?
21:26 < sinclair|work> TehShrike: you'll be surprised, in a general case, if paths are not being picked up (and causing the problems you describe, its generally because somethings gone wrong with the WM_SETTINGCHANGE and explorer.exe has not picked it up
21:26 < prawnsalad> hey guys.. trying to publish an app to npm with a bin setting. however when i npm install from npm and try running it, it says the bin file does not exist when it (seemingly) does exist
21:26 < prawnsalad> `npm install -g kiwiirc` is the package name
21:27 < sinclair|work> TehShrike: it happens to me all the time, restarting sorts it out 95% of the time
21:27 < acidjazz> how do i point my express app toa  custom node_modules folder
21:27 < sinclair|work> TehShrike|Work: 
21:28 < ReinH> zeuslalkaka: brief follow up: that client seems to ignore error handling, which is bad and dangerous, but it also seems like the best client currently available for that API and I currently want to write an app, not an API client :)
21:35 < matbee> GOODBYE
21:35 < zea> hello there
21:36 < CoverSlide> o hai
21:40 < amunra> how can i iterate over a file for its data? like i want the file's path, name, width, height... i tried fs.readFile and it gives me some of the properties i want but not width and height
21:40 < amunra> specifically images, hence the width and height
21:41 < TehShrike|Work> file height, teehee
21:42  * TehShrike|Work stacks his files lengthwise
21:42 < TehShrike|Work> amunra: sounds like you need to find an image parsing library of some sort.  I don't believe anything in the node core is aware of image formats.
21:43 < amunra> TehShrike|Work: know of any such library? guess its time to look for one T_T
21:43 < TehShrike|Work> I do not.  You probably want to consult http://nodezoo.com/ or http://search.npmjs.org/
21:45 < acidjazz> so i created a models folder (express) and i want to keep my schema and model in its own file.. whats the ideal way to include all of these?
21:52 < sinclair|work> TehShrike|Work: well, did restarting work?
21:53 < amunra> TehShrike|Work: thanks, i think i found something that might work. it's called "gm" or "GraphicsMagick"
21:53 < TehShrike|Work> sinclair|work: I'm not going to restart, PATH doesn't work that way >_< plus, I looked farther up my PATH and it looks like node had already put that directory in my PATH, and I've restarted since then.
21:53 < TehShrike|Work> amunra: sweet, good luck!
21:54 < sinclair|work> TehShrike|Work: well, ok 
21:54 < sinclair|work> TehShrike|Work: i've never had issues with node on windows and global modules
21:54 < TehShrike|Work> You're on 7?
21:54 < sinclair|work> TehShrike|Work: yeah
21:56 < sinclair|work> TehShrike: win7 x64, but installed it on 32bit machines also and had 0 issues
21:57 < sinclair|work> TehShrike: any from memory, the installer issues only screwed up the node tooling ms put out.
21:57 < sinclair|work> TehShrike: which was why i was changing env paths in the first place.
21:58 < sinclair|work> TehShrike: what are you doing on windows anyway ?
21:59 < sinclair|work> TehShrike: wasn't something i said was it ?
21:59 < TehShrike|Work> I've been using Windows for over a decade now, I prefer it :-)
21:59 < sinclair|work> nice
22:01 < Eiam> so zombie.js doesn't support canvas
22:02 < Eiam> so looks like i'll have to get node-canvas working on OS X in order to get some canvas based charts that can render to an image without the browser
22:03 < CoverSlide> Eiam: have you looked at phantom.js
22:03 < Eiam> https://github.com/LearnBoost/node-canvas/issues/229 =/
22:03 < Eiam> CoverSlide: no, i think someone mentioend that once and it fell off my list
22:03 < Eiam> looking
22:04 < CoverSlide> basically a js runtime that runs a headless webkit browser in the background. can be used for testing but can also make screenshots of pages, and supports everything webkit supports
22:05 < CoverSlide> unlike zombie which uses jsdom, which only supports so much 
22:06 < Eiam> hmm so i could make a request into another site, load the content of that site, then snap it to a png
22:06 < Eiam> like i've already got a rails app that renders the charts i want on a specific route
22:06 < Eiam> so phantom.js could hit that route, then page.render(my.png); boom done?
22:07 < CoverSlide> yeah that's doable
22:07 < CoverSlide> it's not node though, it's a separate runtime
22:07 < matbee> yeh
22:07 < matbee> it won't work on windows
22:08 < tracker1> question.. is req.socket.remoteAddress the best way in an http/connect handler to get the ip address of the remote request (ignoring the x-forwarded-for header)
22:08 < Eiam> what do you mean its not node? you have to have the system run it then?
22:08 < Eiam> like exec/shell out?
22:08 < CoverSlide> yeah
22:08 < misterhat> hi CoverSlide
22:08 < misterhat> mr sunshine
22:08 < CoverSlide> YOU'RE DAMN RIGHT I AM
22:09 < Eiam> CoverSlide: ah, like "phantomjs rasterize.js 'http://my/route' myfile.png
22:09 < Eiam> "
22:09 < CoverSlide> Eiam: there's also this: https://github.com/sgentle/phantomjs-node
22:09 < CoverSlide> haven't tried it though
22:09 < Eiam> i almost like the shell out concept 
22:09 < Eiam> saves me having to bring up node at all
22:10 < misterhat> wat is phantomjs
22:10 < matbee> phantom is a separate process
22:10 < matbee> phantomjs hooks into the process
22:10 < tracker1> misterhat, phantomjs is essentially a headless webkit browser...
22:10 < misterhat> headless as in
22:10 < matbee> no browser window
22:10 < misterhat> oh
22:10 < CoverSlide> http://lmgtfy.com/?q=phantomjs
22:10 < misterhat> yeah i did google it
22:10 < misterhat> but i was just confused
22:10 < matbee> Yeah, you can generate screenshots and stuff with it
22:11 < matbee> pretty cool stuff
22:11 < Eiam> im doing a brew install now, see what we can do here with a few lines of code..
22:11 < tracker1> misterhat, can help with automation testing, screenshots and other stuff...
22:11 < misterhat> yeh
22:11 <@Nexxy> so it's like testling only you have to screw with it yourself
22:11 <@Nexxy> and it only works in webkit
22:11 < Eiam> thankfully I only care about webkit =p
22:11 < CoverSlide> kind of
22:12 < Eiam> also going through selenium etc sucks anyway
22:12 < Eiam> i thought the latest selenium didn't even work with IE either
22:12 < tracker1> Nexxy, well, not sure you can do headless testing for IE...
22:12 < CoverSlide> Nexxy: but free
22:12 < Jimu> tracker, problem was malformed JSON
22:13 < matbee> is there a mozilla headless browser?
22:13 < tracker1> Jimu, wild
22:14 < CoverSlide> hey it's not quite the same as running on a real browser, but it beats faking it with jsdom, or trying to work with selenium
22:14 < Zuchto> Using mongoose promises to do a query i have similar to var result = ""; Schema.find().exec().on('complete', function(s) { result = "foo"; }); console.log(result); and i except "foo" to be printed in the console but the value isn't changed. How do i get around this?
22:14 <@Nexxy> tracker1, you can test ie with testling if I'm not mistaken
22:14 < CoverSlide> and for scraping or stealing images, it's nice too
22:14 < tracker1> matbee, I think aptana had something like that... don't recall specifics
22:15 < mscdex> testling or browserling?
22:15 < Eiam> yeah, I'm liking this already as better than selenium or zombie/jsdom
22:15 < CoverSlide> mscdex: both
22:15 < Eiam> CoverSlide: thanks, waiting on brew to install it
22:15 < tracker1> main point was on a headless system... IE as part of a build system.
22:15 <@Nexxy> Zuchto, use callbacks and put the console.log inside it :D
22:16 < Eiam> hm bet it doesn't like going to sites that require auth
22:16 <@Nexxy> mscdex, browserling is just interactive, amirite?
22:16 < mscdex> a good way to test for IE on any platform is to take a good modern browser, and then expect the opposite results
22:16 < mscdex> :-)
22:16 < chovy> any kind of rake task i can do that will migrate my data in a mongodb for my node project?
22:16 < Zuchto> Nexxy: is there no other way to bind the value to result in that scope anyway? It really would hurt my brain less to do it "my" way :P
22:16 < mscdex> Nexxy: yeah browserling is interactive i think
22:17 <@Nexxy> Zuchto, in short; no
22:17 < nlf> mscdex: or better yet, just delete every 6th line of code and css
22:17 < Zuchto> Nexxy: damn, ok, thanks!
22:17 < CoverSlide> the best way to fix IE bugs is to not support IE
22:17 <@Nexxy> Zuchto, just console.log in the on complete handler
22:18 < nlf> the best way to fix IE bugs is to not be a frontend developer and make someone else do it
22:18 <@Nexxy> Zuchto, then name your callbacks, and it won't hurt your head as much :)
22:18 < Eiam> ^
22:18 < Zuchto> Nexxy: yeah, i see what you mean.
22:18 < tracker1> chovy, migrating from ms-sql to mongo for a reading data for now... using a node.js script... one gets record(s) that have a modified date, newer than the migrated date, and tosses that record id into rabbitmq... another set of listeners get a record at a time, and import/process them...  if you're staing in mongo, I have a _meta property with a schema_version property... would use a script inside mongp directly to bump that.
22:18 <@Nexxy> Zuchto, ^-^
22:19 < tracker1> Zuchto, the point of the callbacks is the request to node is asynchronous and non-blocking...
22:28 <@mbalho> Zuchto: it will hurt your brain less in the long term to go with the grain
22:28 <@mbalho> Zuchto: (based on the empirical data that i have seen)
22:28 <@mbalho> isaacs: thanks for the module! its like christmas!
22:29 < substack> npm xmas
22:30 <@mbalho> npm xmas should randomly install a package
22:30 < substack> SURPRISE
22:30 < LouisT> "SURPRISE! CoffeeScript."
22:30 < LouisT> :(
22:30 < freewil> that doesnt sound safe
22:30 <@mbalho> hahah
22:31 < freewil> execute random code on your system!
22:31 < nlf> fun isn't about safety
22:31 <@mbalho> npm is totally safe and substack totally hasnt installed a botnet on every node developers machine yet
22:31 < freewil> woohoo
22:31 <@mbalho> trust me
22:31 <@mbalho> i personally read every line of code that executes on my machine before i run it, dunno about you guys
22:31 < nlf> people with beards are trustworthy
22:31 < nlf> that's science
22:31 < gf3> The first botnet built entirely with callbacks!
22:32 < substack> nlf: only some kinds of beards
22:32 < nlf> that's true, some people with beards are nefarious
22:32 <@mbalho> gandalf beards (my category) are trustworthy
22:32 < substack> different beards styles are not uniformly trustworthy
22:33 <@Nexxy> maximum trustworthiness
22:33 < matbee> OH ITS SO PRETTY
22:33 < Zuchto> tracker1: yeah, i realized this eventually :)
22:33 < gildean> mbalho: yeah, i'm not going to go trough every line of programs like gimp or chrome, i wouldn't have time for anything else but to read the sources and the new changes coming to them
22:34 < nlf> mbalho: http://i.imgur.com/PHmF5.jpg
22:34 < nlf> according to that chart, you are only the second most trustworthy
22:34 < nlf> i, with the full beard, am supreme
22:34 <@mbalho> out of all beards that is pretty trustworthy
22:34 <@mbalho> ahhh damn, one upped again!
22:35 <@Nexxy> that seems backwards
22:35 < nlf> sshh, this is my time to shine
22:35 < gf3> Holy shit
22:36 < gf3> I have the most trustworthy beard
22:36 < gf3> YESSS
22:36 <@Nexxy> see?
22:36 <@Nexxy> totally backwards
22:36 < gf3> Nexxy: *ahem* I am the one with the beard
22:36 <@mbalho> proof https://www.google.com/search?q=serial+killer+beard&sugexp=chrome,mod%3D8&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&sa=N&tab=wi&ei=hZG2UNPXCYjo9ASn3YCYAg&biw=1309&bih=729&sei=hpG2UNrxJIqS9QSp3YCYCg
22:36 <@Nexxy> gf3, it's the beard on the inside that counts
22:36 < matbee> I approve every cpu execution before it gets executed
22:36 < gildean> no beard === always trustworthy
22:36 < matbee> it's true.
22:36 < mscdex> call a doctor if you have an inside beard
22:37 < gf3> Nexxy: Ahh, like those tumors?
22:37 < gf3> The ones with the teeth and hair?
22:37 <@Nexxy> wow
22:37 < chovy> is there anything like rake for node?
22:37 <@Nexxy> way to ruin an action hank reference
22:37 < chovy> i need to run a few db queries in prod.
22:37 <@Nexxy> chovy, jake?
22:37 <@mbalho> lol
22:37 < gf3> chovy: Grunt is similar, too
22:37 < chovy> nake
22:38 < chovy> Nexxy: node-jake or jake on github
22:40 < ericelliott> grunt++
22:40 < gf3> chovy: http://gruntjs.com
22:40 <@Nexxy> chovy, I was thinking of jake
22:40 < matbee> naked
22:40 < matbee> jakeisnaked
22:41 < matbee> @konobi, official results are in for the Global Startup Battle. We made it in 14th place, *WHEW* http://startupweekend.org/2012/11/28/votes-are-in-introducing-the-2012-gsb-finalists/?fb_comment_id=fbc_121892787970396_127736_121899401303068#f3d197748
22:41 < chovy> ok, i want to do a data migration, so i can do that with node-jake or gruntjs?
22:41 < chovy> its just a one time migration.
22:42 -!- mode/#node.js [+o piscisaureus_] by ChanServ
22:42 < misterhat> oo
22:42 < misterhat> grunt looks pretty good
22:43 < chovy> gruntjs has a shiny web site
22:43 < deoxxa> wheeee, jscamp.asia is today
22:43 < deoxxa> anyone else coming along?
22:43 < gkatsev> chovy: could be worse. At least it has a site now.
22:44 < gkatsev> #grunt for grunt stuff, if you want
22:45 < gf3> It's a trap
22:48 < gkatsev> lol
22:56 < sinclair|work> don't people here get tired of callback?
22:56 < sinclair|work> *callbacks
22:57 < deoxxa> yes
22:57 <@mbalho> i get tired of riding my bicycle sometimes but its a pretty simple way to get around town
22:57 < deoxxa> i also get tired of code, databases and RAM
22:57 < sinclair|work> deoxxa: so, why node ?
22:57 < sinclair|work> deoxxa: node would be so much better if it wasn't js
22:58 < deoxxa> sinclair|work: because node is for the discerning gentleman who can appreciate sarcasm
22:58 < sinclair|work> haha
22:58 < sinclair|work> deoxxa: i do grow tired of code gymnastics 
22:58 < deoxxa> i actually don't
22:59 < deoxxa> i find it pretty easy to write stuff in node
22:59 < deoxxa> i don't even find myself doing that many herp.derp(function() { ... }) things anymore
22:59 < TooTallNate> try callbacks in C and then complain about JS
22:59 < deoxxa> since most of my stuff is streams these days
23:00 < deoxxa> TooTallNate: bah, callbacks in c aren't that bad - i'd say they're far more painful in php
23:00 < sinclair|work> TooTallNate: callbacks in C are fine
23:02 < sinclair|work> deoxxa: i mean, im looking the mongodb api, and its a wash with unnecessary syntax
23:02 < deoxxa> sinclair|work: that's true, but the mongodb-native api is very "low level" in terms of node stuff
23:02 < gf3> Callbacks are fucking terrible things
23:02 < deoxxa> sinclair|work: there's a bunch of things that sit on top of it that make it nicer to use
23:02 < gf3> And there's no reason we should have to put up with them
23:02 < gf3> Better things exist for async IO
23:02 < sinclair|work> deoxxa: mongoose
23:02 < deoxxa> gf3: promises forever, right?
23:03 < sinclair|work> deoxxa: the aync module is nice, but ffs, its ugly 
23:03 < sinclair|work> deoxxa: fibres are nice, but hacks
23:03 < deoxxa> fibres are stupid haha
23:03 < deoxxa> </3
23:04 < deoxxa> i think callbacks are a pretty good way of expressing "when something finishes, this happens"
23:04 < deoxxa> i don't get the callback hate personally
23:04 < deoxxa> makes it really clear what's going on
23:04 < sinclair|work> deoxxa: threads are not bad you know, modern cpus are quite capable of handling them
23:04 < gf3> deoxxa: No
23:05 < sinclair|work> deoxxa: callbacks are not that clear at all
23:05 < deoxxa> they are to me *shrug*
23:05 < sinclair|work> deoxxa: you read them like a nested pile of crap
23:05 < gf3> Threads are beautifully simple and much more clear than callbacks
23:05 < TooTallNate> lol
23:06 < superjoe> gffft
23:06 < superjoe> *pffft
23:07 < superjoe> I'm pretty sure if you come into #Node.js and tout threads over callbacks, you're trolling.
23:07 < EyePulp> heh
23:07 < sinclair|work> superjoe: im pretty sure you don't have a clue about anything
23:08 < gf3> LOL
23:08 < gf3> Well that escalated quickly
23:08 < sinclair|work> deoxxa: anyway, callback syntax is nasty, everything would be so much nicer if we had C#'s async/await 
23:09 < deoxxa> sure thing
23:09 < sinclair|work> deoxxa: fibres were the closest thing ive seen
23:09 < superjoe> sinclair|work, use iced coffee script
23:09 < deoxxa> maybe typescript will support it in future
23:09 < gf3> I don't think it's node's fault
23:09 < gf3> I think it's probably JavaScript's fault
23:09 < sinclair|work> deoxxa: syntactically speaking that is
23:09 < superjoe> gives you await / defer
23:09 < sinclair|work> gf3: its 100% javascripts fault
23:10 < TooTallNate> sinclair|work: telling someone they don't have a clue about anything is blatant, please quit it
23:10 < TooTallNate> blatant trolling that is
23:10 < sinclair|work> TooTallNate: you know even less
23:10 < gf3> LOL
23:12 < TooTallNate> grow up
23:12 < EyePulp> is sinclair|work in here with a question, or just complaining?
23:13 < TooTallNate> he's just trolling
23:13 -!- mode/#node.js [+o TooTallNate] by ChanServ
23:13 <@isaacs> TooTallNate: YOU HAVE THE POWER
23:13 < EyePulp> Ah, so that's the "work" part of his nick.
23:13 < EyePulp> trolls gotta pay the bills too.
23:13 < tnorris> bnoordhuis: dude, your heapdump lib is freakin awesome.
23:13 <@TooTallNate> haha, ya i love that part
23:13 -!- sinclair|work was kicked from #node.js by TooTallNate [Your behavior is not conducive to the desired environment.]
23:13 < bnoordhuis> tnorris: glad you like it :)
23:14 < annie> LOL tx
23:14 < sinclair|work> seriously ?
23:14 -!- sinclair|work was kicked from #node.js by TooTallNate [Your behavior is not conducive to the desired environment.]
23:15 < gf3> TooTallNate, isaacs: Lame
23:15 < superjoe> this guy is trolling too. evidence: <gf3> Threads are beautifully simple and much more clear than callbacks
23:15 <@TooTallNate> gf3: some people are trying to workâ€¦ actually
23:16 < superjoe> you simply cannot start a productive conversation in this channel with that statement
23:16  * EyePulp kicks EyePulp from the chat room - Too sexy for his hair.
23:16 <@isaacs> Guys, guys, guys, NODE USES THREADS EVERY PROGRAM USES THREADS
23:16 <@isaacs> how do you think we do fs.read() in a nonblocking way?
23:16 <@isaacs> THREADS!
23:16 < bnoordhuis> pixies
23:16 < sinclair|work> TooTallNate: if the topic of threading is considered a troll in this channel, id rather not be here
23:16 <@isaacs> we have a whole POOL of threads!
23:16 < bnoordhuis> oh. or that
23:17 < EyePulp> Frank Black programs?
23:17 <@isaacs> this idea that threads are an alternative to callbacks is kind of silly
23:17 -!- sinclair|work was kicked from #node.js by TooTallNate [Your behavior is not conducive to the desired environment.]
23:17 <@isaacs> you can use threads in your program if you want.  compile an addon.  we'll even make it easy for you to do properly, with uv_work
23:17 < superjoe> isaacs, that's not what these guys were talking about. they're bitching about the callback-driven javascript style
23:17 < gf3> superjoe: I'm not even
23:18 < superjoe> but anyway, this is getting way too meta
23:18 <@isaacs> superjoe: well, that's what i'm saying is silly
23:18 < gf3> superjoe: Perhaps they're not easy in JS
23:18 <@isaacs> Callbacks are easy.  You just write some JavaScript to do what you want it to do, and it does that.
23:18 <@isaacs> anyone who says otherwise needs to grow up and just use the language, imo.
23:18 < gf3> TooTallNate: This is IRC, you should expect a certain amount of SASS and light-hearted arguing /cc isaacs 
23:18 <@isaacs> they probably don't have enough real problems to solve.
23:19 <@TooTallNate> ya the guy is just bored obviously
23:19 < lohkey> imo, the best part of node cleverly hide callbacks, hence the stream interface
23:20 < sinclair|work> TooTallNate: i was having a conversation
23:20 < lohkey> people who complain about callbacks need to be introduced to streams
23:20 < sinclair|work> TooTallNate: and that conversation was not with you
23:20 < lohkey> sure, they use callbacks to get work done, but the abstraction is gold
23:21 -!- isaacs changed the topic of #Node.js to: Node.js - It's easy. You just write some JavaScript to do what you want it to do, and it does that.
23:21 < EyePulp> gf3: as it's IRC, one also has to learn the fine line between amusing snark versus combative annoyance, and take one's lumps when you misread the channel and its ops.
23:21 < lohkey> if you're writing any code without abstractions, your not really writing any form of good code
23:21 <@isaacs> lohkey: if you're writing code without abstractions YOU ARE PUSHING ELECTRONS WITH YOUR FINGERS
23:21 < lohkey> exactly
23:21 <@isaacs> lohkey: transistors are an abstraction
23:22 < sinclair|work> EyePulp: incorrect, a mention of something that is considered non node (threading for example) is considered a troll in this channel. 
23:22 < lohkey> well, thats a bit meta
23:22 < gf3> EyePulp: I guessâ€¦
23:22 < sinclair|work> EyePulp: so, you mention it, people jump on you for it, and call you a troll. its frustrating as hell
23:22 < EyePulp> sinclair|work: I think you took it beyond a mere mention, and made it a statement of fact rather than simple discussion.  but hey, feel free to feel hurt.
23:23 < sinclair|work> EyePulp: the topic of callbacks, fibres, threads and overall syntax is highly relevant
23:24  * isaacs away for food, please be nice, folks
23:25 < EyePulp> sinclair|work: all that to say, I've found the attitudes in this channel to be pretty accepting of alternative views (classic ASP really kicks node in the teeth).  But yes, it's not a democracy, and yes, you can be kicked when you cross what you might feel to be nonsensical lines.  Isn't that how IRC operates in general?
23:25  * EyePulp also doesn't speak for the channel
23:25 < EyePulp> so freely ignore me.  I do.
23:26 < acidjazz> do i really have to restart node to see my code change
23:26 < sinclair|work> EyePulp: "However, persistent trolling ruins communities. No good can come of tolerating it. In the node community, we are not afraid of losing a few kids who canâ€™t manage to behave in a grown-up manner. Weâ€™re more concerned with losing the people that those kids chase away."
23:27 < sinclair|work> 1) i do not appreciate being called a troll
23:27 < EyePulp> acidjazz: yes
23:27 < acidjazz> EyePulp: theres noway around this?
23:27 < EyePulp> acidjazz: there are tools to make that more pleasant
23:27 < acidjazz> like what
23:27 < EyePulp> acidjazz: is this for dev purposes?
23:28 < acidjazz> yup
23:28 < EyePulp> look for nodemon
23:28 < EyePulp> I think you can npm install it
23:28 < troy---> has anyone experienced issues where clearCookie doesn't actually clear the cookie in express?
23:31 < EyePulp> sinclair|work: I've long since forgotten the source of your beef, but as I said, the channel is pretty lightly moderated and fairly accepting of dissension.  Lousy attitudes get kicked, lousy opinions rarely do.
23:31 < tnorris> bnoordhuis: What is a SlabBuffer? They're showing up in the profile.
23:31 < gf3> People with lice are generally kicked
23:32 < EyePulp> acidjazz: https://github.com/remy/nodemon
23:32 < bnoordhuis> tnorris: it's a big parent buffer that other buffers are split off from
23:32 < bnoordhuis> tnorris: it's to cut down on the number of malloc/mmap calls
23:33 < tnorris> bnoordhuis: ah, knew that existed, but didn't know what it has it's own name. cool.
23:33 <@konobi> huh... http://code.google.com/p/blockly/ looks cute
23:33 < sinclair|work> EyePulp: there was no source of my beef
23:33 < styol> acidjazz: forever is another decent option (http://github.com/nodejitsu/forever) and here is a list of more https://github.com/joyent/node/wiki/modules#wiki-build-and-deployment
23:33 < EyePulp> sinclair|work: ok
23:34 < bnoordhuis> konobi: oh dear. if this goes on, we'll all be out of a job
23:34 < tnorris> bnoordhuis: ok, I allocated the old-heap-size to 35, but it's growing far beyond that. only way that could happen would be from Buffers, right?
23:35 < bnoordhuis> tnorris: yes. --max_old_space_size controls the v8 heap only, not stuff that's allocated outside of that (like buffers)
23:35 < tnorris> erm. meant max-old-space-size
23:35 <@konobi> bnoordhuis: might be cute for UI and custom polcy/workflow creation
23:39 < hbeck> anyone familiar with libxmljs ?
23:43 < CoverSlide> noone uses libxmljs
23:44 < CoverSlide> the only advantage i can think of for visual programming is tablets
23:44 < CoverSlide> but otherwise it's been around for a long time, and there's never been a viable solution for real use
23:45 < superjoe> acidjazz, for development I suggest node-dev
23:46 < troy---> nm
23:46 < natrixnatrix89> Guys. can someone with experience in postgresql give me advice?
23:46 < natrixnatrix89> When I was using mysql, I was always having an open connection to mysql.. so node could do inserts and selects whenever needed..
23:46 < natrixnatrix89> But how does this work on pg? Can I have an open connection all the time.. or do I connect on every insert?
23:47 < deoxxa> natrixnatrix89: postgres supports multiple queries on the same connection, so you can usually get by with just one
23:47 < freewil> natrixnatrix89, if you use pg.connect() then there is a connection pool of 10 connections by default
23:47 < deoxxa> (in contrast to mysql, which doesn't)
23:47 < freewil> and after you do a query the connection is returned to the  pool
23:48 < natrixnatrix89> so it's better to do pg.connect() on every insert?
23:48 < natrixnatrix89> for example if I had a chat app..
23:48 < natrixnatrix89> and I wanted to log chat messages
23:49 < freewil> yeah, if you have a request that does an insert then just do pg.connect(function(err, client) { client.query() } )
23:50 < freewil> actually its pg.connect(config, function(err, client) {})
23:50 < natrixnatrix89> awesome.. thanks..
23:50 < hbeck> CoverSlide: I'd like to take a HTTP POST request that contains an xml document in the data, and parse it... what would you suggest?
23:50 < gf3> natrixnatrix89: It'll really only start to matter if you have many concurrently open connections
23:51 < CoverSlide> sax-js
23:51 < gf3> natrixnatrix89: As DBs support a finite amount of connections
23:51 < gf3> natrixnatrix89: In which case a connection pool is probably a good idea
23:52 < natrixnatrix89> btw.. is there any useful tool for pg administration and scaffolding? Is it pgadmin3?
23:52 < natrixnatrix89> I'm basically very new to pg..
23:53 < gf3> natrixnatrix89: I don't know, I've always been a CLI sorta guy
23:54 < natrixnatrix89> heheh.. right.. yeah cli is good.. Although in mysql I was used to the simplicity of pma :D
23:54 < freewil> http://www.pgadmin.org/
23:54 < freewil> that's pretty much the standard
23:55 < natrixnatrix89> can I connect it to heroku pg?
23:55 < natrixnatrix89> I have it installed, but I failed to connect to my heroku pg..
23:55 < freewil> i dont know, if heroku allows it
23:55 < tnorris> is rss the actual memory being used by the process?
23:56 < natrixnatrix89> I see.. ok. then let's stick with CLI.. thanks again..
23:57 <@Nexxy> lol
23:57 <@Nexxy> YOU ARE PUSHING ELECTRONS WITH YOUR FINGERS
23:58 <@Nexxy> isaacs, fingers are an abstraction.
23:58 < tnorris> bnoordhuis: sorry to keep bugging you, but I'm seriously confused. The sum of Retained Size in the profile is remaining constant, but it's grown from 15MB to 50MB (and I only alloted the process 35MB of memory)
23:58 < tnorris> (the script is measuring RSS usage)
--- Log closed Thu Nov 29 00:00:04 2012
