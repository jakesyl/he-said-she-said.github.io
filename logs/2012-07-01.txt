--- Log opened Sun Jul 01 00:00:10 2012
00:02 < Astro-> Sun Jul 01 2012 01:59:59 GMT+0200 (CEST) has been a pretty long second for node :)
00:12 < deoxxa> so
00:12 < Killswitch> so
00:12 < deoxxa> how do i hire people who do node stuff?
00:12 < deoxxa> where should i be advertising?
00:13 < deoxxa> i've been tasked with expanding our current staff (which consists of... me) by a full 100%
00:13 < Killswitch> jobs.37signals.com
00:14 < deoxxa> i should mention that i'm in australia, and sponsoring working visas and stuff probably isn't an option
00:14 < substack> deoxxa: that's actually better probably, expands your pool greatly if people can work remotely
00:15 < substack> deoxxa: you could sponsor nodeup
00:15 < Killswitch> deoxxa: any decent job boards in AU?
00:15 < deoxxa> i'm not sure if remote work is an option either - my boss kind of likes having people in the office
00:15 < substack> so only australians? sounds tricky
00:16 < deoxxa> yeah...
00:16 < Killswitch> deoxxa: talk your boss into relocating me and I'll node hack it up with you like true bosses
00:16 < deoxxa> i know he's willing to transport people if necessary (he flew me down from qld)
00:16 < Killswitch> We'll do some srsfkn.biz
00:16 < deoxxa> fknsrs.biz, plz
00:16 < Killswitch> DAMNT
00:16 < kylemcgill> Whats happening in aussie?
00:17 < Lorentz> deoxxa: inter-country moves are very different to doing employer sponsoring from workforce from overseas
00:17 < Lorentz> inter? intra?
00:18 < Lorentz> so yeah, forget about the working visa, unlss he's really keen on someone specific
00:18 < Lorentz> if sydney, there's sydjs where people there work with js, and some do node
00:19 < kylemcgill> Anything in Melbourne?
00:19 < deoxxa> kylemcgill: i'm in melbourne, and i'm trying to hire someone :)
00:20 < kylemcgill> i see, unfortuantly, i dont move to Melbourne until 4th of August
00:20 < kylemcgill> unfortunately**
00:20 < deoxxa> well, the position doesn't really urgently need to be filled
00:21 < kylemcgill> specifically, do you mind running through what you are looking for? Im sorry if i missed it before :)
00:21 < deoxxa> of course, my bad
00:21 < deoxxa> we have a lot of backend stuff written in node, and are developing a few front end applications using it as well
00:22 < deoxxa> we have some legacy php shit that can die in a fire for all i care, but i suppose the ability to fix php is a plus
00:22 < kylemcgill> Application as a Service? (your new stuff)
00:23 < deoxxa> sort of - we're developing it for internal use at the moment, but we do plan to offer it to the public if/when it becomes easy enough to use
00:23 < Killswitch> AaaS? Never heard of that.
00:23 < Killswitch> Same as SaaS?
00:23 < deoxxa> we've got some embedded devices that run some c code (based on libuv) as well, but it's relatively low maintenance
00:24 < deoxxa> kylemcgill: if you're interested, i can write this up as something a bit more coherent and email it to you :P
00:25 < kylemcgill> deoxxa: i will priv message you 
00:25 < deoxxa> cool
00:27 < Killswitch> I love happy endings.
00:27 < Killswitch> They hit me in my feelers.
00:28  * deoxxa hits Killswitch in the feelers
00:29  * deoxxa washes his hands
00:29 < Killswitch> You always get me in my feelers.
00:41 < deanm55_> anyone here knowledgeable about node-gyp wrt makefile generation?  I'm not sure how to generate a proper gyp file that puts -Wl,--whole-archive for both LD_INPUTS and LIBS
00:43 < deanm55_> at the moment, I have to copy my own Makefile instead of using the one generated by node-gyp
01:01 < razzam21> is there anyone here to answer a question for me?
01:01 < bradleymeck> ?
01:02 < razzam21> i am using node-smpp
01:02 < razzam21> to write an smpp server
01:02 < razzam21> trying to add a custom tlv to the code
01:02 < razzam21> but when i do isn't isn;t being converted properly
01:02 < razzam21> how am i suppose to add them so that i will work properly
01:02 < razzam21> ?
01:04 < razzam21> i take the silence as a no one can help
01:08 < tbranyen> silence of the lambs
01:08 < bradleymeck> i dont know it so idk
01:32 < razzam21> anyone know anything about node-smpp
01:47 < perezd> anyone recommend a google protobuf  module?
01:47 < perezd> already found this: https://github.com/chrisdew/protobuf
01:47 < perezd> wondering if there are alternatives
01:49 < chapel> perezd: nope
01:58 < joelverhagen> What is the v0.8.1 equivalent of the "keypress" event on stdin?
01:59 < joelverhagen> I have the data event with single keystrokes, but the keypress event had more meta data about the key pressed, which was extremely useful.
02:04 < Killswitch> deoxxa: 
02:05 < deoxxa> hey that's my name
02:05 < Killswitch> Anyone here toy with http:///appjs.org 
02:05 < Killswitch> http://appjs.org 
02:05 < deoxxa> saw it, tried it, didn't love it
02:05 < deoxxa> oh wait
02:05 < deoxxa> no that's something else
02:06 < Killswitch> Using Node to build desktop apps.
02:06 <@Nexxy> deoxxa, down boy
02:06  * deoxxa notices that hipsters have left #node.js
02:06 <@Nexxy> they're just en route to Portland
02:07 < deoxxa> (that's not possible, everyone in #node.js is a hipster)
02:07 < deoxxa> actually Killswitch that looks really cool
02:07 < deoxxa> i remember milani talking about it a while back, when he was just playing with the idea
02:08 < Killswitch> I'm gonna keep an eye on it.
02:08 < Killswitch> So many cool things coming out allowing you to use HTML/CSS/JS to build native things.
02:08 < deoxxa> yeah
02:08 < Killswitch> Trigger.io for mobile, this for desktop
02:08 < deoxxa> yeah it uses CEF, so it's a winner
02:08 < Killswitch> CEF?
02:08 < deoxxa> chromium embedded framework
02:09 < deoxxa> basically webkit + chrome internals - an interface
02:10 < Killswitch> Nice
02:12 < innociv> Gah no gcore in ubuntu repo I Guess.
02:13 < deoxxa> appjs + cappucino would be neat
02:13 < chapel> Nexxy: anything new with riakstar?
02:19 <@Nexxy> chapel, not a whole lot; waiting to hear more from basho on the tombstone bug first
02:20 <@Nexxy> chapel, going to nodeconf?
02:22 < gblock> I am not going to nodeconf, but wish I was
02:23 < chapel> tombstone?
02:23 < chapel> no to nodeconf :(
02:23 < chapel> hola gblock
02:24 < gblock> chapel: hola
02:24 < chapel> how goes it?
02:24 < gblock> good good and you?
02:24 < chapel> Nexxy: sad news, Im dropping riak for the project Im on :(
02:24 < chapel> good, just taking it easy doing a personal project
02:25 <@Nexxy> chapel, riak 500's when you try to access a key that's been deleted too soon
02:25 < chapel> :(
02:25 < chapel> Nexxy: its just been a pain, more than it should be for me
02:25 <@Nexxy> but only because of JSON parsing errors
02:26 < chapel> not exactly one thing, and more due to trying to make it work a way its not really good at
02:26 <@Nexxy> chapel, it's ok there are a lot of people working on better node clients for riak
02:26 < chapel> its not a client issue though
02:26 < chapel> but not really riaks fault either, just doesn't fit the problem, I tried
02:27 <@Nexxy> hard times!
02:27 < gblock> chapel: what kind of project?
02:28 < chapel> well, I have an old vbulletin forum that is used, but just sitting there
02:28 < chapel> hate vbulletin
02:29 < chapel> so why not throw a high powered missile its way (node) and make something new and awesome :P
02:29 < innociv> I have a runnaway node.js process. It's using 100% of cpu.  How can I see why it's using up all that cpu at this moment?
02:29 < innociv> I know there are profiling things, that run all the time, but I just need it running now while this is happening
02:30 < Aria> Send it SIGUSR1 and attach a debugger?
02:30 < gblock> innociv: https://github.com/bnoordhuis/node-profiler
02:31 < innociv> But it's already using 100% of cpu.  If I stop it and add that it won't be.
02:31 < innociv> That was to gblock
02:32 < gblock> innociv: true you can't use it if the app is already running. You can do what Aria recommended though and connect to the running instance.
02:35 < Daegalus> ugh, why does Trigger IO have to have the 1 feature i actually want only in its pro mode, and the rest is in free
02:36 < chapel> what feature is that?
02:36 < Daegalus> wp7 support, ios and android are free, but if i want WP7, i have to fork over 200$ a month
02:37 < chapel> damn
02:37 < chapel> thats odd
02:37 < Daegalus> err correction $300
02:37 < chapel> id have android be free
02:37 < chapel> ios/wp7 be paid
02:37 < chapel> or ios paid only
02:37 < innociv> How do I do what Aria said when I've started the node.js process with forever?
02:37 < chapel> idk
02:37 < Daegalus> I would have them all free, and just charge for support, like they are now
02:38 < gblock> @innociv find out the process id 
02:38 < Daegalus> its odd to have 2 full platforms free, and 1 paid, when the support would be the same for all 3
02:38 < gblock> innociv: even if you use forever it is still launching a process I am assuming is it not?
02:38 < innociv>  I can do that, it's 1327.
02:38 < innociv> Yes.
02:39 < gblock> @innociv: if not just send it to the forever process. You can tell by looking in the process list if you see node running
02:39 < Daegalus> chapel: sigh, and it looked SOOOOOO much better than Phonegap too
02:39 < Aria> Daegalus: It's a lot more expensive per customer to support a rare OS.
02:39 < gblock> innociv: ps -A | grep node
02:39 < innociv> I have the process, but I don't follow how I'm supposed to attach a debugger to it, even after googlign node SIGUSR1 debugger.
02:40 < Daegalus> Aria: but why force the support when your support plan is already a paid tier? they wont support iOS or Android unless you pay, so whats the difference if WP7 is in teh free tier, and you still have to pay $300 for the support tier
02:40 < Aria> 'cause development costs? 
02:41 < Daegalus> what development costs? its cheaper to program for WP7 than iOS
02:41 < Daegalus> its pretyt much free
02:41 < Aria> 'cept for the whole 'developer' part.
02:41 < Aria> How many WP7 developers do YOU know? Competent ones?
02:42 < Daegalus> many actually, but that might be because I am one too, so I know quite a few 
02:42 < Daegalus> WP7 developers is any .NET developer. 
02:42 < gblock> innociv: the debugger listens on a remote port
02:42 < Daegalus> and i know many that specifically work on WP7 too
02:42 < gblock> innociv: 5858
02:43 <@Nexxy> so people actually use windows phones?
02:43 < innociv> What am I missing? Like I don't see how to attach it.  When I googled, I only found things that are set up before the process has started.
02:44 < innociv> http://nodemanual.org/0.6.9/nodejs_ref_guide/debugging.node.js.html I think I found it
02:44 < Daegalus> Nexxy: actually, yes, quite a few. At least I see a lot of people buying my app, and i see plenty walking around
02:44 < innociv> Erm can I node debug on port?
02:44 < Daegalus> I was even in seattle, and I heard the distinct WP7 sounds at multiple occasions
02:44 < gblock> innociv: you send the signal to put it in debug mode
02:44 <@Nexxy> Daegalus, crazy!
02:45 < gblock> innociv: you can also use node-inspector to attach to it.
02:45 < innociv> How? Sorry, I'm not finding this.
02:45 < gblock> @innociv: try using node-inspector
02:45 < Aria> innociv: kill -USR1 pid
02:45 < gblock> innociv: npm install node-inspector -g
02:45 < gblock> innociv: send the signal to the process to put it in debug mode
02:45 < Daegalus> Nexxy: yup, but anyways, i just wont use Trigger, but I've been looking for so long for a good JS layer for all 3 platforms. Phonegap is nice, but it doesnt have UI translation to creative native UIs like Trigger.io does
02:45 < gblock> innociv: then run inspector....
02:46 < gblock> innociv: read here: https://github.com/dannycoates/node-inspector/
02:47 < gblock> innociv: you can also use the debug client to connect if you don't want to use inspector, but it is pretty sweet.
02:47 < innociv> Okay, thanks
02:51 < gblock> innociv: The other option is to try an IDE like Webstorm which has a nice debugger. I believe it can attach to an existing node process though you'd need to run it on the server.
02:51 < s5fs> Nexxy: good evening
02:52 < gblock> innociv: I've had a lot of success with inspector though it has some annoyances.
02:53 < gblock> innociv: which really stem from the webkit ui not from limits in inspector itself
02:53 <@Nexxy> s5fs, hey! did you get my txt?
02:54 < s5fs> Nexxy: apparently not, haha!
02:55 < s5fs> Nexxy: oh yes, just did. no worries, thx for asking, it is appreciated!
02:55 <@Nexxy> jah ._.
02:55 < s5fs> i'll just have to present next year, haha!  ;-)
02:55 <@Nexxy> ya!
02:56 < wavded> anyone have experience with working with bits in a byte in a buffer?
02:59 < innociv> gblock, this doesn't seem to work
02:59 < innociv> Why can't I just debug it through my servers console?
03:00 < innociv> "   warn  - error raised: Error: listen EADDRINUSE"
03:00 < innociv> That's what I get when I follow the node-inspector instructions
03:05 < innociv> er
03:05 < innociv> It says debug mode has to be enabled
03:05 < innociv> Also, hwo do I run it on a port other than 8080?
03:05 < innociv> how*
03:05 < tos9> Cheers. I have root = /home/me/.local/lib/node_modules in my ~/.npmrc, but npm still seems to want root, and still seems to be trying to install into /usr/lib. Anything I could have missed? Paste incoming of npm output if necessary.
03:05 < innociv> --web-port= i guess
03:06 < tos9> (Same result for passing root on the cli)
03:07 < human39> I'm hoping somebody can clear up some confusion with the event queue for me.  If there is a queue, I've read that you cannot guarantee the execution order of the queued callbacks.  The app I'm working on needs to know the phone state of a person.. so theoretically, I might report that a person got a new call, before I reported they completed a call (simple race condition).  Any tips on how to correctly handle this?
03:08 < Aria> human39: Would you queue those callbacks? If so, why?
03:09 < innociv> gblock, alright I got it running on another port but I get a lot o f errors in console and nothing shows
03:09 < innociv> Protocol Error: the message is for non-existing domain 'Debugger' devtools.js:4117
03:09 < human39> Well there might be my mis understanding.. i don't want them to be queued.  But what if something happens that they are?
03:10 < Aria> What 'something'?
03:10 < Aria> There's an event queue for events coming from the outside system. What events are you actually waiting on?
03:11 < tos9> Ah I see, the config key seems to be prefix, not root like the tut I was reading had it. Never mind.
03:12 < innociv> Is that log because debugging isn't enabled on the script?
03:13 < human39> Aria: I'm getting events from an asterisk server (via nami), then I'm writing those events to my clients.
03:13 < human39> I'm trying to come up with a good example of what I could possibly be waiting on.
03:13 < Aria> Ah, okay. so socket events.
03:13 < Aria> Right?
03:13 < Aria> (I don't know NAMI yet)
03:14 < human39> if you are referring to socket.io, that is how I'm communicating to my clients (reporting purposes)
03:15 < Aria> Do all the requests for a user come in via a single network connection?
03:15 < Aria> No, I'm talking 'network connection'
03:15 < Aria> And yeah, refreshing my memory, that's how AMI works.
03:16 < human39> yes. single network connection to the phone server.
03:16 < Aria> So you're going to get an ordered sequence of events. You're not dealing with the threadpool here.
03:16 < human39> yes.
03:16 < human39> ok, threadpool where?
03:16 < Aria> so, yes, if there's latency between you and the client, the client could get a lie in that the phone could be off the hook again before they got the notiec.
03:17 < Aria> Node defers reads and writes to a thread pool. And so you can't really rely on order between different low level file or socket handles.
03:17 < Aria> You may ask node to read two files, and have them come in "Open A" "Open B" "Read B" "Close B" "Read A" "Close A"
03:17 < human39> latency is fine... I'm not totally worried about that... I'm more worried about reporting incorrect state.
03:18 < innociv> ... Okay when I do forevre --debug start script.js it is outputting to console. When I ctrl+x out of it, I see TWO processes running for the script.
03:18 < Aria> But that's at the file or socket level. What you're getting is going to be in order.
03:18 < innociv> How am I supposed to enable debug mode so I can, at a later point, attach a debugger?
03:20 < innociv> Wait wtf it says "Or you can enable debugging on a node that is already running by sending it a signal:"
03:20 < innociv> but that wasn't working
03:20 < innociv> sigh..
03:20 < human39> ok, so my theoretical examples are a non-issue?  The events will be trigger in the order I get the events from NAMI?
03:25 < innociv> Uhh I guess this is running but how am I supposed to see what is using up so much cpu?
03:28 < Aria> human39: Yeah. Only things actually deferred are subject to pooling.
03:30 < gblock> innociv: sending the signal did not work?
03:31 < innociv> It did. It appears it's attached.
03:31 < innociv> But then what? I can't just look at what is using up all the cpu. It looks like the normal debugger for a client script
03:31 < innociv>  i see a console, and can set break points.
03:33 < innociv> I see a list of all the scripts, but doesn't seem like I can commit changes to them.  Like I tried adding a console.log() on socket.io new connection.
03:35 < perezd> anyone in here good with protobufs?
03:36 < gblock> innociv: http://docs.nodejitsu.com/articles/getting-started/how-to-debug-nodejs-applications
03:36 < gblock> innociv: you can install the V8 profiler and then see the profiler tab
03:39 < innociv> So I want a heap snapshot
03:44 < innociv> Uh weird. I added the require v8-profile but i'm not seeing it in the debugger after restarting node
03:45 < innociv> Oh oops
03:47 < innociv> "var snapshot = profiler.takeSnapshot(name);" what is name?
03:47 < jamescarr> is there any reason to use node-sandbox instead of just the vm module? 
03:47 < jamescarr> https://github.com/gf3/sandbox
03:47 < innociv> Oh nvm
03:47 < innociv> Uh 
03:47 < jamescarr> Got a friend trying to use node in their app to allow users to write custom scripts that run in a sandbox, says they've hit performance problems
03:47 < innociv> It just returns and empty Snapshot object
03:49 < innociv> Uhh yeah using startProfiling() and stopProfiling() I get empty CpuProfiles too.
03:50 < innociv> I also don't see a "Profiles tab"  I see Scripts and Console.
04:09 < innociv> Someone says it has "livecoding"
04:09 < innociv> I don't see it.
04:13 < innociv> ...
04:14 < innociv> This thing seems incrediably broken. If I all one of my functions that returns an object, it returns an empty object.
04:14 < blakmatrix> isaacs: https://gist.github.com/3026789
04:18 < innociv> And the "pause script execution" button immediately replays after I pause.
04:19 < innociv> console.log({'foo':'bar'});
04:19 < innociv> undefined
04:21 < innociv> node-inspector --web-port=8095 info  - socket.io started
04:21 < innociv> .  Why would it say socket.io started when socket.io has already started long ago when the script was started?
04:23 < myndzi> hey, does anybody know if there's a game-focused web framework around that'll play with socket.io and a node backend?
04:23 < myndzi> kinda like twitter bootstrap, but with webgame-oriented features
04:27 < williamcotton> hey guys, I'm using formidable and dealing with a multipart upload
04:27 < williamcotton> I'me getting a Buffer object of the file parts
04:27 < williamcotton> and then trying to write it to redis
04:28 < williamcotton> but I'm having trouble writing the binary data to redis
04:28 < williamcotton> like, if I loop through the parts, adding up the buffer.size, the final tally is correct
04:29 < williamcotton> but the redis lib calls buffer.toString()
04:31 < substack> quick somebody write a module and put the keywords ["tea","earl","grey","hot"] in it
04:34 < innociv> Okay so.. I'm trying to debug/profile my node.js application that runs through forever to see why it seemingly randomly uses 100% cpu. It'll be fine for a long time, days or weeks, just using a normal small amount.  Then it will suddenly jump to using all available CPU.  I need something I can run when that happens, not constantly from the start..
04:37 < myndzi> run it in debugger mode, connect a browser?
04:37 < myndzi> when problem > click pause
04:37 < myndzi> maybe a process.nextTick loop?
04:39 < williamcotton> ah, I had to do this: buffer.toString('binary');
04:46 < innociv> myndzi, well I tried node-debugger.
04:46 < innociv> And it doesn't seem to work
04:46 < innociv> If I call a function that returns an object, the object is empty
04:46 < innociv> console.log({'foo':'bar'}); returns undefined
04:56 < innociv> I started it with forever --debug but that has stuff outputting to console instead of a log...
04:57 < gblock> innociv: console.log is void so that is a bad examle.
04:57 < gblock> .
04:58 < gblock> innociv: it always returns undefined in the REPL as it is void.
04:58 < innociv> Well, all other functions that should return objects return completely empty objects
04:58 < innociv> It has >Objectname.  If I click the > it's completely empty.
05:00 < gblock> innociv: I wonder if it could be forever. I have heard of some spikes happening. Did you try the #nodejitsu room?
05:00 < innociv> If i look in processes, for forever, I see the process with --debug-brk already.
05:00 < innociv> But I see two processees
05:01 < innociv> I haven't
05:17 < williamcotton> hmm
05:20 < williamcotton> ok, so I've got a jpg
05:21 < williamcotton> and it's header looks like this: ????)bExifMMV(?if?HH?0221??0100??d?d?:HH????C
05:21 < williamcotton> I save it to redis via node and then get it back
05:21 < williamcotton> and it looks like this
05:21 < williamcotton> ÿØÿá)bExifMMV(ifÀHH0221 0100  d d¤:HHÿØÿ
05:21 < williamcotton> does anyone know what's going on?
05:21 < br0gr4mm3rdud3> I see node people fart.
05:22 < williamcotton> I'm doing bugger.toString('binary') on the way in to redis
05:22 < williamcotton> er, buffer
05:33 < gblock> Anyone hear using Azure Websites and wanna run 0.8.1?
05:33 < gblock> that's "here"
05:35 < gblock> and one more question, any nodesters in Shanghai?
06:01 < thealphanerd> anyone here familliar with writing code with "use strict"...
06:01 < thealphanerd> having some weird errors raised with a for loop
06:04 < williamcotton> alright, so I'm struggling with some encoding issues, and I can't tell where the issue is
06:04 < williamcotton> https://gist.github.com/1ddd1fc1008ffa5116a5
06:05 < williamcotton> basically, I'm trying to write a multipart file upload to redis and then read from it
06:05 < chapel> thealphanerd: gist?
06:06 < thealphanerd> just throwing an error for "for" loops
06:06 < gkatsev> https://github.com/substack/earl-grey
06:06 < thealphanerd> "for (i = 0; i < " whatever
06:06 < gblock> @williamcotton what are you using to do the multipart upload? formidable?
06:06 < williamcotton> gblock: yeah
06:06 < thealphanerd> throwing that I is not defined
06:07 < bazookatooth1> why can i not do pattern.test(string) ?
06:07 < bazookatooth1> where pattern is just a string regex
06:07 < williamcotton> gblock: another interesting thing is that the file sizes match up between going in and going out, just the encodings are all whack
06:07 < chapel> thealphanerd: did you var i = 0 somewhere?
06:07 < chapel> or var i?
06:07 < chapel> above?
06:07 < thealphanerd> var i
06:07 < thealphanerd> I mean just i
06:07 < thealphanerd> do I need to var i?
06:08 < chapel> for (i = 0… without var means its global
06:08 < chapel> use strict doesn't allow globals
06:08 < thealphanerd> should I be declaring i at the top of my function?
06:08 < chapel> well
06:08 < chapel> you can do it anywhere before
06:08 < chapel> or inline
06:08 < chapel> for (var i = 0...
06:08 < thealphanerd> it'll be pulled up either way
06:08 < chapel> yep
06:09 < gblock> williamcotton: you are pushing and popping at the same time?
06:09 < gblock> williamcotton: shouldn't your pop be in the callback for push?
06:09 < williamcotton> no
06:09 < williamcotton> those snippets of JS are actually in different services
06:10 < gblock> williamcotton: aaah so this is just a snippet showing syntax
06:10 < williamcotton> I didn't want to paste the whole things because, well, it would be harder to explain
06:10 < williamcotton> yeah
06:10 < gblock> williamcotton: never mind then
06:10 < gblock> williamcotton: so what happens?
06:10 < gblock> williamcotton: does the upload succeed?
06:10 < williamcotton> the encodings are messed up
06:10 < williamcotton> yeah
06:10 < williamcotton> the upload succeeds
06:11 < williamcotton> the file in question is 107766 bytes
06:11 < gblock> williamcotton: why do a to-string? is that because you have to send strings to Redis?
06:11 < williamcotton> and redis ends up with 107766 bytes
06:11 < gblock> williamcotton: tostring I mean
06:11 < williamcotton> and the file downloaded is 107766 bytes
06:11 < eboy> What is this `npm install earl-grey && node -e 'require("earl-grey").hot().pipe(process.stdout)'` nonsense?
06:11 < gblock> eboy: it's an ansi cup of tea
06:11 < gblock> eboy: something every node app needs
06:12 < williamcotton> gblock: yeah, if I didn't do the toString('binary') on the way in in, redis seems to do a toString()… and not of binary
06:12 < eboy> Well, it is relaxing... but I wouldn't have expected it as an npm package.
06:12 < williamcotton> er, the node_redis lib does that, I should say
06:12 < eboy> .cold() doesn't work for me.
06:13 < eboy> substack: ^
06:13 < williamcotton> so I have no idea :)
06:13 < williamcotton> although I'm guessing there are some issues with the node-redis lib
06:13 < gblock> williamcotton: that's dshaw's lib?
06:14 < williamcotton> this one, I think https://github.com/mranney/node_redis
06:14 < williamcotton> yeah, that's the one I'm using
06:14 < williamcotton> should I be using something else?
06:14 < gblock> williamcotton: I am not the redis expert for sure. 
06:14 < gblock> williamcotton: as a matter of fact I am not even the redis novice :-)
06:15 < Qbix1> hey guys
06:15 < williamcotton> ha
06:15 < gblock> williamcotton: but I am sure you have some here
06:15 < Qbix1> how come when I select a date with mysql in node.js
06:15 < Qbix1> it doesn't come back like this: 
06:15 < Qbix1> 2012-06-30
06:15 < chapel> williamcotton: why not just send the buffer?
06:15 < Qbix1> it comes back like this:
06:15 < chapel> node_redis supports buffers
06:15 < Qbix1> 2012-06-30T00:00:00Z
06:15 < Qbix1> it seems to be a Date or something?
06:15 < Qbix1> I had to do this: SELECT UPPER(CURRENT_DATE) created_date
06:15 < williamcotton> chapel: when I do that it seems to encode it as a string anyways
06:15 < Qbix1> to avoid it
06:16 < chapel> does it come back right?
06:16 < Qbix1> how do I transform a date into just the string that is in the mysql?
06:16 < williamcotton> chapel: like if I do this
06:16 < williamcotton>  client.lpush(key + "-data", buffer, function(err, reply) {
06:17 < Qbix1> aha .toString('yyyy-MM-dd')
06:17 < Qbix1> I think this will work in node.js
06:17 < Qbix1> yay
06:17 < chapel> Qbix1: what library?
06:17 < williamcotton> chapel: yeah, it only stores 103609 bytes in redis
06:18 < williamcotton> and the file is 107766 bytes
06:18 < williamcotton> so it doesn't look like it is handling the buffer properly
06:18 < gblock> williamcotton: sounds like the buffer is not getting flushed
06:18 < substack> eboy: cold tea isn't very appetizing, why would you want to do that?
06:18 < gblock> substack: iced chai tea latte :-)
06:18 < williamcotton> gblock: I'm sorry, I don't follow
06:19 < gblock> williamcotton: you are saying the number of bytes in the download doesn't match what was uploaded
06:19 < williamcotton> how would I go about flushing said buffer?
06:19 < gblock> williamcotton: right?
06:19 < eboy> I was expecting consendation to appear or something. :]
06:19 < gblock> williamcotton: and you can see the data is in redis
06:19 < Qbix1> chapel I don't know man
06:19 < williamcotton> I am saying that when I DON'T do toString("binary"), then yes, the bytes are off
06:19 < Qbix1> I just want the date as it was in the mysql
06:19 < Qbix1> it's difficult lol
06:19 < chapel> Qbix1: what mysql library
06:19 < Qbix1> "node-mysql"
06:21 < chapel> Qbix1: there is a typeCast option
06:21 < chapel> which by default converts field values to js values
06:21 < chapel> so the mysql date gets converted to a js date
06:21 < gblock> williamcotton: I see now (looking at your gist)
06:22 < Qbix1> how do I turn it off
06:22 < Qbix1> aha I see ok
06:23 < williamcotton> I think the issue is with the toString('binary')
06:23 < Qbix1> whew fixed it yay
06:23 < williamcotton> and the fact that node-redis doesn't seem to handle buffers properly
06:24 < gblock> williamcotton: seems like it would be a common scenario
06:26 < gblock> williamcotton: I am not familiar with using 'binary' and 'ascii' with toString
06:27 < williamcotton> me neither
06:27 < williamcotton> but it was the only way I can get the file sizes to match up
06:27 < williamcotton> I guess I could base64 encode the chunks
06:27 < williamcotton> and then base64 decode them
06:27 < williamcotton> but that's such a waste
06:28 < gblock> williamcotton: yeah that wouldn't perform well
06:29 < gblock> williamcotton: Oh I see it's off of Buffers
06:29 < gblock> http://stackoverflow.com/questions/6182315/how-to-do-base64-encoding-in-node-js
06:29 < chapel> williamcotton: you need to set the buffer option
06:29 < williamcotton> chapel: what do you mean?
06:29 < gblock> williamcotton: what about "utf8'
06:30 < chapel> return_buffers: defaults to false. If set to true, then all replies will be sent to callbacks as node Buffer objects instead of JavaScript Strings.
06:30 < gblock> williamcotton: actually forget that
06:30 < williamcotton> chapel yeah, this is how i'm doing it
06:30 < williamcotton> var client = redis.createClient(null, null, {return_buffers: true});
06:30 < chapel> okay hmm
06:31 < chapel> then console.log(reply) should be a buffer object
06:31 < gblock> williamcotton: what about just writing the buffer?
06:31 < williamcotton> writing which buffer, in or out?
06:31 < gblock> williamcotton: can you work directly with the buffers both ways?
06:31 < gblock> williamcotton: why do you have to do any conversion?
06:32 < williamcotton> I'm writing it to redis
06:32 < williamcotton> if I don't do any conversion
06:32 < williamcotton> the node redis lib converts it to a string
06:32 < williamcotton> and results in a smaller filesize
06:33 < gblock> williamcotton: can you just use 'request' and make an http call?
06:33 < williamcotton> if I convert to utf8 on the way out of redis, it results in a bigger filesize
06:33 < williamcotton> make an http call from where?
06:33 < gblock> williamcotton: I mean just don't use the redis client and call redis directly
06:33 < chapel> williamcotton: just tested it myself
06:33 < chapel> when console.log(reply) is is a native buffer
06:34 < chapel> williamcotton: did you set return_buffers on the one you are doing rpop?
06:34 < williamcotton> yes
06:34 < chapel> cause I just tested it
06:34 < chapel> goes in a buffer, comes out a buffer
06:34 < williamcotton> can you show me the code you used?
06:34 < gblock> chapel: ha!
06:35 < williamcotton> and maybe this is an issue with formidable
06:35 < williamcotton> because that's where the buffers are coming from
06:36 < chapel> https://gist.github.com/3027170
06:36 < gblock> chapel: that's kinda what I was trying to say
06:36 < chapel> did it in repl
06:36 < williamcotton> ok, I think there are other issues
06:37 < williamcotton> I mean, I'm not making a buffer out of a string
06:37 < chapel> sure
06:37 < williamcotton> I'm making it out of uploaded binary data
06:37 < chapel> but a buffer is a buffer
06:37 < chapel> its just binary data
06:37 < williamcotton> ok
06:37 < chapel> redis is binary safe strings
06:37 < williamcotton> hold on a sec
06:37 < gblock> chapel: was just about to say the same
06:37 < chapel> and node_redis handles buffers natively
06:38 < williamcotton> chapel: https://gist.github.com/029207d0a9952629c760
06:38 < williamcotton> that's all the code I'm working from
06:38 < williamcotton> if you run both of those, and then head to localhost:8887, you should be able to get it going
06:39 < williamcotton> blah
06:39 < williamcotton> I am so freaking confused by all of this
06:39 < williamcotton> here's the thing
06:39 < williamcotton> when I put just buffers in to Redis
06:40 < williamcotton> the data in Redis is less than the filesize
06:40 < chapel> what size are you reading?
06:40 < gblock> williamcotton: you are pushing multiple times though if the callback is invoked twice right?
06:40 < r46> q: any variable substitution module? or still using + "" +?
06:41 < gblock> williamcotton: if you are buffering than the callback will be called for each chunk
06:41 < williamcotton> chapel: what size? what do you mean?
06:41 < chapel> is this what you are comparing? console.log(counter + s.length);
06:41 < williamcotton> gblock: I don't follow
06:41 < gblock> williamcotton: your part.on('data')….is that firing multiple times?
06:41 < williamcotton> gblock: yes
06:42 < chapel> r46: in what context
06:42 < chapel> like var x = 'asdf' + foo ?
06:42 < gblock> williamcotton: so that means you are pushing to redis multiple times
06:42 < williamcotton> yes, that is correct
06:42 < gblock> williamcotton: wouldn't that create multiple records in redis?
06:42 < williamcotton> I am pushing on to a redis list
06:42 < williamcotton> and the popping off of that list
06:42 < gblock> williamcotton: but you said the size in redis is wrong?
06:42 < r46> chapel: html printing
06:42 < williamcotton> IF I just push a buffer
06:43 < gblock> williamcotton: what happens if you do that?
06:43 < williamcotton> then YES, the size is off
06:43 < chapel> r46: printing where, straight js?
06:43 < williamcotton> because something is converting the buffer to a string
06:43 < williamcotton> I'm assuming the redis node lib
06:43 < chapel> williamcotton: where are you comparing the size
06:43 < chapel> thats what Im trying to find
06:43 < jonaslund> hrrrm
06:43 < gblock> williamcotton: that's why I was saying use either http direct to talk to redis
06:43 < williamcotton> comparing what sizes?
06:43 < gblock> williamcotton: or use another lib
06:43 < jonaslund> anyone knows if there is a good IRC channel about win32 ?
06:43 < chapel> how do you know its not the right size?
06:44  * jonaslund has a standard io pipe dying on him! :P
06:44 < williamcotton> t = 0; REDIS.lrange("/user12832/williamcotton.jpg-data", 0, -1).each {|p| t = t + p.size; puts p.size }; t
06:44 < williamcotton> in Ruby
06:44 < williamcotton> ALSO
06:44 < gblock> williamcotton: forget that, looks like only node-redis is recommended
06:45 < williamcotton> with this guy
06:45 < williamcotton>       var s = buffer.toString();
06:45 < williamcotton>       
06:45 < williamcotton>       s_size += s.length;
06:45 < williamcotton> in upload.js
06:46 < chapel> williamcotton: string.length is characters
06:46 < williamcotton> yeah
06:46 < gblock> williamcotton: ok I see redis uses native TCP/IP
06:46 < chapel> http://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding
06:47 < gblock> williamcotton: doesn't look so bad to implement: http://redis.io/topics/protocol
06:47 < williamcotton> if I use buffer.toString('binary') then all 107766 bytes of the image file I'm uploading are in that redis list
06:47 < williamcotton> I'm testing that in ruby
06:47 < williamcotton> if I just use buffer
06:47 < chapel> williamcotton: you are converting it to a string in node
06:47 < williamcotton> there are only 103609 bytes in the redis list
06:48 < williamcotton> if I don't convert it to a string in node
06:48 < williamcotton> lient.lpush(key + "-data", buffer, function(err, reply) {
06:48 < gblock> williamcotton: that's why I am wondering the buffer is not flushing
06:48 < williamcotton> and just do that
06:48 < williamcotton> then only 103609 bytes in the redis list
06:48 < gblock> williamcotton: can you see where it ends?
06:48 < williamcotton> which is the same as if I convert it to a string
06:48 < gblock> williamcotton: and compare it to the same file you have
06:48 < gblock> williamcotton: see if it is just chopped?
06:48 < gblock> williamcotton: that will determine whether or not the buffer is getting flushed properly
06:48 < williamcotton> it's not just chopped
06:49 < gblock> williamcotton: if you don't convert?
06:49 < williamcotton> if I don't convert
06:49 < gblock> williamcotton: so what happens?
06:49 < gblock> williamcotton: is the beginning chopped off?
06:50 < gblock> williamcotton: does the data at least match for what is there?
06:50 < williamcotton> no
06:50 < williamcotton> because it's a string and not binary
06:50 < gblock> williamcotton: sounds like it is the client
06:50 < gblock> williamcotton: did you look at the code?
06:50 < williamcotton> probably, yeah
06:50 < chapel> gblock: the redis client is reliable
06:50 < gblock> williamcotton: or try using node-inspector?
06:50 < chapel> I doubt its that
06:50 < gblock> chapel: I am not saying it's not reliable
06:50 < williamcotton> chapel
06:51 < gblock> chapel: not at all
06:51 < williamcotton> do you think it is formidable?
06:51 < williamcotton> did you try running those scripts?
06:51 < chapel> it is really simple to compare, pull the data out somewhere else and compare
06:51 < chapel> no not yet
06:51 < gblock> chapel: right
06:51 < gblock> williamcotton: did you try just uploading the file direct?
06:51 < williamcotton> I am comparing
06:51 < williamcotton> in a Ruby REPL (IRB)
06:51 < gblock> williamcotton: in node, just read the file and upload it
06:52 < williamcotton> and loading the file in Ruby and looking at the bytes
06:53 < chapel> why are you using redis for this? curious mostly
06:54 < chapel> williamcotton: for the file size, are you comparing the content length given to you to the returned buffers from redis?
06:54 < chapel> or the buffers being sent to redis vs the buffers out?
06:54 < gblock> williamcotton: on ruby it works?
06:54 < gblock> williamcotton: why not just isolate it by using fs to load the file in node and upload it
06:54 < gblock> williamcotton: ?
06:55 < bazookatooth1> i'm trying to capture strings that begin with "." then have some text… an OPTIONAL space.. and more text (or not).    i'm using pattern = /^\.(.+)\s?(.*)$/  and that's broken. i suck at regex. please help.
06:55 < williamcotton> ok
06:55 < williamcotton> chapel
06:55 < williamcotton> so if I go with lient.lpush(key + "-data", buffer, function(err, reply) {
06:55 < williamcotton> er, client
06:55 < williamcotton> and then check in redis
06:55 < williamcotton> REDIS.lrange("/user12832/williamcotton.jpg-data", 0, -1).each {|p| t = t + p.size; puts p.size }
06:56 < williamcotton> so this is just straight up using the buffer
06:56 < williamcotton> no string encodings, no nothing
06:56 < williamcotton> then in redis, I'm at 103609 bytes
06:56 < williamcotton> and again
06:56 < williamcotton> if I do client.lpush(key + "-data", buffer.toString(), function(err, reply) {
06:57 < perezd> protocol buffer support in nodejs is shit
06:57 < gblock> williamcotton: so you are seeing the same result in ruby is what you are saying?
06:57 < williamcotton> ah, I don't get the same thing from buffer.toString()
06:58 < williamcotton> in that case it is 103531 bytes
06:58 < williamcotton> so gblock, you mentioned something about flushing the buffer?
06:58 < williamcotton> what do you mean by that and how would I do that in my case?
06:59 < gblock> williamcotton: somewhere there must be a stream
07:00 < gblock> williamcotton: if the stream is closed prematurely then there might still be bytes in the buffer
07:00 < williamcotton> gblock: here's the whole shebang https://gist.github.com/029207d0a9952629c760
07:00 < gblock> williamcotton: that did not get written
07:02 < chapel> williamcotton: one thing I tend to do is actually look at the library code
07:02 < chapel> and see whats going on there
07:02 < gblock> williamcotton: you can use node-inspector to step through
07:03 < gblock> williamcotton: ok going to try your code
07:03 < chapel> using your code, I got smaller file size
07:03 < williamcotton> yeah
07:03 < williamcotton> when just using buffers?
07:04 < chapel> just your code, no change
07:05 < williamcotton> ok, i might have pasted it in a weird state
07:05 < williamcotton> ugh
07:05 < williamcotton> yeah
07:05 < williamcotton> upload.js line 90
07:06 < williamcotton> I'm just using the buffer
07:06 < williamcotton> if you change that from "buffer" to "s"
07:06 < williamcotton> then it'll use the binary encoding
07:06 < williamcotton> and the file sizes will be correct
07:06 < williamcotton> but the data will be messed up
07:06 < williamcotton> and the file won't open, if it was say, a jpeg
07:11 < chapel> williamcotton
07:11 < williamcotton> yo
07:11 < chapel> so yeah, I changed the download to just output buffer
07:11 < gblock> williamcotton: mine doubled in size
07:11 < chapel> get same file size
07:11 < chapel> its formidable
07:12 < williamcotton> that's the culprit?
07:12 < chapel> and the filesize from content-length didn't match what formidable output
07:12 < chapel> on one of my tests
07:13 < williamcotton> yeah, I noticed that
07:13 < williamcotton> but honestly, I couldn't remember if content-length was supposed to match up
07:13 < williamcotton> doesn't that come from the browser?
07:14 < gblock> williamcotton: content-length is the http header sent with the request
07:14 < williamcotton> bytesReceived matches the file size
07:14 < gblock> williamcotton: yes the browser should set it
07:14 < williamcotton> I remember testing that a few hours ago
07:14 < williamcotton> yeah, I need to figure out why that Content-Length header and the file size are different
07:14 < williamcotton> but that's step 3, or 4
07:15 < williamcotton> haha
07:16 < Karmaon> I'm having a really weird issue of express not allowing the root directory to be viewed
07:17 < williamcotton> well
07:17 < williamcotton> I got it working, but I had to go to base64
07:17 < williamcotton> upload.js I do a buffer.toString('base64');
07:18 < williamcotton> download.js I do a var s = new Buffer(reply, 'base64');
07:19 < chapel> williamcotton: really odd :(
07:19 < chapel> Id possibly file an issue on node_redis
07:19 < chapel> just in case there is a bug
07:20 < chapel> if there was, it might be in hiredis
07:20 < gblock> chapel: impossible!
07:20 < chapel> gblock: I said I doubt it
07:20 < gblock> chapel: just giving you a hard time
07:20 < williamcotton> ok, yeah, I'll write something up
07:20 < chapel> Im not 100% to be able to really debug
07:20 < chapel> got a headache
07:20 < Karmaon> ugh just stupid chrome cache
07:23 < jamescarr> anyone remember the "trick" to update a number in place in the console?
07:23 < williamcotton> now to figure out why a file with 107766 bytes in it has an HTTP Content-Length of 107964
07:28 < gblock> williamcotton: so summary is using base64 encoding worked
07:29 < gblock> williamcotton: but without it did not work
07:29 < williamcotton> yeah
07:29 < williamcotton> yes, that's the case
07:29 < gblock> williamcotton: seems like that should not be necessary at all
07:29 < williamcotton> base64 is a good go-to with these issues
07:29 < williamcotton> but it's bulky
07:29 < gblock> williamcotton: especially since redis is pure tcp
07:29 < williamcotton> yeah, redis can handle binary values just fine
07:29 < gblock> williamcotton: if you want you could try just implementing it at the tcp level
07:30 < gblock> ;-)
07:30 < gblock> williamcotton: the protocol doesn't look so bad
07:30 < williamcotton> it looks like the node client can't
07:30 < gblock> williamcotton: or do a P/R
07:30 < gblock> williamcotton: I sent you the link before…it looks like a really simple wire protocol
07:31 < williamcotton> yeah, it does look pretty straight forward!
07:31 < williamcotton> I'm gonna focus on this content-length issue, though
07:32 < gblock> williamcotton: you mean why the content-length is not matching the file size?
07:32 < williamcotton> yeah
07:32 < chapel> williamcotton: there is node-redis
07:32 < chapel> tim_smart made it
07:32 < chapel> its more basic, but its fast
07:32 < chapel> could see if you still have the issues
07:32 < chapel> though I don't know if it does buffers or not
07:35 < gblock> williamcotton: you could also try hiredis directly
07:36 < williamcotton> directly?
07:36 < gblock> williamcotton: which is wrapping the hiredis C library
07:36 < gblock> williamcotton: npm install hiredis
07:36 < williamcotton> yeah, I use the hiredis lib in C a lot, it's great
07:36 < gblock> williamcotton: there's a npm wrapper to the native lib
07:36 < williamcotton> yeah, I think I installed that
07:37 < williamcotton> yup, I did
07:37 < gblock> williamcotton: you can try just going around redis and using it directly
07:37 < gblock> williamcotton: see if that works
07:37 < gblock> williamcotton: node_redis uses it if it is installed but....
07:38 < gblock> williamcotton: that would quickly allow you to at least nail down if it is node_redis or not
07:39 < gblock> williamcotton: and if it works, then you are at least unblocked
08:01 < perezd> anyone in here dealt with floats/protobufs in nodejs?
08:02 < ljharb> floats! but only cause thats the only number javascript has.
08:12 < perezd> fuck protocol buffers
08:12 < perezd> node has no support here...
08:14 < utu> anybody who reads node's error traces actually understands them? they seem useless 95% of time
08:14 < utu> stuff scares me
08:16 < utu> had errors such 'express.router' instead of 'app.router', took 1h to catch, I wonder if there's a way to do static analysis on a code or something
08:23 < ljharb> jslint.
08:36 < Daegalus> I wonder if I can compile V8 to pure CLR, then I can put V8 Anywhere
08:37 < ljharb> wtf is clr?
08:44 < Daegalus> ljharb: Common Language Runtime. its the .Net VM. Its possible to compile C/C++ into CLR bytecode that can run on anything that CLR can run on, which can help with running V8 on WP7 and PS Vita
08:44 < jesusabdullah> ljharb: c# runtime
08:45 < ljharb> ugh
08:45 < ljharb> if you want to put v8 anywhere, put v8 anywhere.
08:45 < ljharb> don't compile it to something else
08:45 < Daegalus> ljharb: cant, wp7 doesnt allow c++
08:46 < Daegalus> plus .NET has no decent JS 
08:46 < ljharb> well youre using windows, thats your real problem
08:46 < Daegalus> no, its not a problem at all, and windows is not the only ting I use
08:46 < ljharb> "mom, this toxic sludge tastes bad!"
08:47 < Daegalus> honestly, all this anti-windows shit is getting old, and lame, so just shutup about it, its not going to change anything except make you sound like a wanker
08:48 < ljharb> hey youre the one using a suboptimal tool. if you don't want to hear about how your tools suck, don't associate with programmers.
08:48 < Daegalus> i like how you automatically assume thats all I use, just because I want to support all platforms, and not lock myself in, and be all elitist
08:49 <@Nexxy> mentlegen...
08:49 < ljharb> if you're talking about .net, you can only be talking about windows, so in the context of that conversation, you can't be using anything else. if you use other things for other use cases, rock on, but thats not what you were talking about.
08:49 < Daegalus> ljharb: Mono
08:50 < Daegalus> http://mono-project.com/Main_Page <--- this is what im talking about, and it works nicely
08:51 < ljharb> on first glance, it's a tool so windows devs don't have to learn how to use other platforms or languages. but i'll read more, maybe it's actually worth looking at.
08:51 < Daegalus> but im not a windows dev, but i like C# as a language, why do i have to lock myself into Windows just because I enjoy programming in it.
08:52 < stride> I want a java wrapper around mono wrapped around node.
08:52 < ljharb> haha
08:52 < ljharb> i assume thats a troll
08:52 < Daegalus> stride: actually. IKVM
08:52 < stride> indeed
08:53 < Daegalus> Java Bytecode -> CLR Bytecode
08:53 < Daegalus> https://en.wikipedia.org/wiki/IKVM.NET
08:53 < ljharb> if it has java in it, i fire you.
08:54 < ljharb> nobody's yet convinced me that mono/c# isn't a hire disqualifier, but since i haven't endured it i can't say it is a disqualifier.
08:55 < Daegalus> why would it be a hire disqualifier to begin with/
08:55 <@Nexxy> ljharb, dude
08:55 <@Nexxy> have you used VS2010?!
08:56 < ljharb> well, just having used a thing isn't a disqualifier. but if java is the thing youre excited about, i doubt you'd be able to think in terms of patterns that are necessary for non-classical-inheritance-non-eclipse development
08:56 < ljharb> lol no, the last visual studio i used was 2002 i think?
08:56 < Daegalus> ljharb: no i hate java, i went to C# because I hate java
08:56 < ljharb> hating java is admirable. going to c# is an odd choice
08:56 < Daegalus> i was just taking Stride's troll, and actually showing you its already done
08:57 < Daegalus> ljharb: well the CLR VM is far mroe performant than Java's VM, and C# can be used functionally, has tonse more features than Java as a language, and just overall more enjoyable to use
08:58 < deoxxa> hold on a moment
08:58 < gblock> ljharb: you must have mistaken this as the MS bash list. 
08:58 < deoxxa> i somehow doubt that the CLR VM is faster than the JVM
08:58 < ljharb> lol
08:58 < ljharb> i haven't used it Daegalus, so maybe it is. but it's invented by microsoft, so my first reaction is not to think it enjoyable.
08:58 < deoxxa> the JVM is amazing - it's just burdened with running a lot of crappy enterprisey code
08:59 < gblock> ljharb: Microsoft helped build libuv. Does that mean node is not enjoyable as well?
08:59 < ljharb> scala doesn't make me want to puke
08:59 < sriley> ljharb: but let me guess youll hump anything thats made by apple?
08:59 < ljharb> lol
08:59 <@Nexxy> you guys should just cut to the chase and start calling each other names right now
08:59 < ljharb> the last programming language apple made is applescript. which is awesome because its like smalltalk, but awful none the less.
09:00 < deoxxa> Nexxy: you're a fuzzwallop
09:00 <@Nexxy> a what?
09:00 < ljharb> I FART IN YOUR GENERAL DIRECTION
09:00 < deoxxa> i'm not sure
09:00 < deoxxa> but now you get to invent a meaning for it
09:00 < Daegalus> deoxxa: im not denying JVM is amazing, but so far ive found the CLR VM more performant, and others have too, im sure you can find articles about it. Even Xamarin ported Android to CLR 1:1 and it runs better
09:01 < Daegalus> plus C# is an open standard same with CLR, unlike the JVM bytecode unless i missed somethng recent
09:01 < deoxxa> yeah
09:01 < deoxxa> that's interesting
09:01 < Xedecimal> Coming from php I just learned some nifty command line arguments to fix up my stdout and stdin when spawning child processes... Running executable 2>&1. To replicate this functionality I would use something like spawn('executable', ['2>&1']); right ? This is just making node mad at me
09:02 < deoxxa> Xedecimal: you don't need to - you get both streams anyway
09:02 < deoxxa> Xedecimal: all that does is redirects stderr to stdout, and you get handles to both of them when you do child_process.spawn
09:03 < Xedecimal> I get both streams in php too, and an input stream, however I can't do anything with them and they output nothing and it's just a stupid stalemate, say running something like ffmpeg and collecting realtime output. Yet when I do that in php magically all my output comes out even though I was already specifying all these, this is also a windows envirionment so I'm sure it's all hacked up and half broken because windows is pretty 
09:03 < Xedecimal> slow when it comes to pipes
09:03 < Xedecimal> "specifying all these" I meant specifying stdin, stdout and stderr
09:03 < Daegalus> deoxxa: http://blog.xamarin.com/2012/05/01/android-in-c-sharp/ they have some benchmakrs further down, and other info about the VMs
09:04 < deoxxa> Xedecimal: it might be that the application you're running is expecting a real terminal
09:05 < Daegalus> well i have to make a correction i guess, so I could be wrong about JVM performance, but I forgot Android was Dalvik
09:05 < Xedecimal> I wanted to try this because my biggest problem ever was doing something like shutting down a mongod process. I could close the streams, I could send a sigint I could sigkill, I could ctrl+c out of node and then the processes would still be running, until I totally closed the dos box holding them open
09:06 < Xedecimal> right now I have to connect to mongod, and send an admin command to tell it to turn the server off from the inside out, apache is even harder, I have to bundle a pskill executable from msinternals to force the tree to be killed because it'll just respawn itself
09:06 < deoxxa> dos... box...
09:06 < Xedecimal> ok, command prompt, command window, black box, cmd, terminal
09:06 < deoxxa> lol
09:07 < deoxxa> well that depends on how the application you're running behaves
09:07 < deoxxa> sometimes you have to tell it to stay in the foreground
09:07 < Xedecimal> something tells me the reason these daemons will not terminate, is because their streams are still being held open. However I'm terminating them is not terminating them enough to release them and let them go
09:08 < Xedecimal> I think they both actually drop to the background, lemme see...
09:08 < deoxxa> actually it's the opposite i'd say - they're forking another process and closing their std{in,out,err} streams on their own
09:09 < deoxxa> this can happen for a few different reasons
09:09 < deoxxa> like if they detect that they're running in a real terminal, they might not automatically fork
09:09 < Xedecimal> mongo does not. Ctrl+c closes it properly. httpd not either, ctrl+c will also close it
09:09 < deoxxa> but if they detect that they're not connected to a real terminal, they might fork away because they think they're being run from a script
09:09 < Xedecimal> is there any sure fire way to run anything and keep it with us so we can communicate with it to terminate afterwards ?
09:10 < deoxxa> not really
09:10 < Xedecimal> I think I've read countless stackexchange questions and answers on these issues and none of them ever seemed to do it right and consistently across all processes
09:10 < Xedecimal> I don't mind terminating mongod from inside, but bundling pskill.exe is just retarded
09:10 < Xedecimal> embarrassing even
09:11 < deoxxa> well, you have to start apache in a way that stops it from forking i guess
09:11 < Xedecimal> I'm gonna read over some command line args
09:11 < deoxxa> there'd have to be an argument for it
09:29 < tim_smart> quit
09:30 <@Nexxy> tim_smart|away, never.
09:38 < tim_smart> Nexxy: Always / both ways.
09:43 <@Nexxy> tim_smart, I refuse!
09:57 < lpin> hello guys, can't compile node 0.8.1 on fedora 14
09:58 < lpin> if i use configure with default options i get an error during compilation
09:58 < lpin> so i ran ./configure --without-snapshot
09:59 < lpin> compilation works, but when i do make install it fails
09:59 < SomeoneWeird> would help if you pasted the error
09:59 < lpin> will do
10:00 < lpin> https://gist.github.com/3027773
10:06 < lpin> this is what i get with configure with snapshot enabled
10:06 < lpin> https://gist.github.com/3027786
10:25 < jhsto> how can i bind a socket.io function to a button onclick?
10:54 < tim_smart> lpin: `uname -a` ?
10:55 < lpin> Linux fedora 2.6.35.14-106.fc14.x86_64 #1 SMP Wed Nov 23 13:07:52 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux
10:56 < lpin> there was an issue for the same error on github
10:56 < lpin> closed yesterday
10:56 < lpin> https://github.com/joyent/node/issues/3538#issuecomment-6692533
10:57 < lpin> but i still get it
11:27 < indutny> hey, any NYC people here?
11:28 < Bennit> nowjs channel is so passive :(
11:46 < jamescarr> What's goin down at nodeconf?
11:47 < Cheery> hi
11:49 < Cheery> I'm looking for ideas on this: http://www.raspberrypi.org/phpBB3/download/file.php?id=377
11:50 < Cheery> right now it's quite displeasing to use, but I think about redesigning the document model like this: http://bpaste.net/show/CfaoTIza8iiwKWpo2IBp/
12:11 < tim_smart> Cheery: What is 'this'?
13:11 < sdfg> как скачать v8.0 stable for windows
13:23 < Guest76052> Hello, I'm very new to web development, do you have any documentation to understand the basics of how server/client works? I mean I want to understand what happens when I'm surfing on facebook and updating my status, to understand how this interaction (with php) works to better understand node later
13:26 < RLa> well, there is RFC 2616
13:27 < Guest76052> as I learn programming without studying computer science, can you generally recommand some basic docs to understand how hardware works? (processor, net connections, servers,..)
13:28 < bwen> unfortunately for you its not knowledge you can just download to your brain. You'll have to learn and research it... Its many concepts tied in together. 
13:32 < bwen> Guest76052: I guess the RFC mentionned above is a good start to understand the web and client/server concepts. Good luck
13:32 < Guest76052> thanks
13:34 < RLa> you could start from wikipedia too, it explains some general concepts quite well
13:34 < mikeywaites> hey guys im using vagrant with puppet and stumbled across the Puppet Node.Js module, it seems it installs node.js via apt (on ubuntu) i thught it was recommended that you dont install via apt??
13:34 < RLa> the rfc might be a bit too verbose
13:35 < RLa> any idea if node binary name clash has been already solved?
13:35 < RLa> i think that was problem why it cannot become stable package
13:35 < bwen> RLa: its a great discouragement when you want to know EVERYTHING all at once I think. heck he wants to know programming, networking, hardware, etc.... :P
13:36 < RLa> hm, indeed :)
13:36 < Guest76052> well as I'm curious it sucks writing code and not really knowing what's happening behind ;)
13:37 < SomeoneWeird> http://www.ni.com/white-paper/4431/en
13:37 < SomeoneWeird> Guest76052, ^
13:38 < Guest76052> SomeoneWeird: thanks I'll read this
13:38 < Guest76052> the rfc looks heavy...^^
13:40 < SomeoneWeird> always ate
13:40 < SomeoneWeird> are*
14:17 < Jan-> hihi
14:17 < Jan-> I assume fs.existsSync() returns true or false? It doesn't take a callback and there is no other documentation, so I *assume* it does, but we all know about assumptions...
14:18 < joeytwiddle> you can test it pretty quick in the node console
14:18 < Jan-> I installed node ten minutes ago, bear with me
14:19 < Jan-> er, "fs is not defined", that's not a global, oK...
14:20 < joeytwiddle> fs = require("fs");
14:20 < dilvie> Jan, did you remember var fs = require('fs');
14:20 < dilvie> ?
14:20 < Jan-> yaya I got that
14:20 < Jan-> Does the console not echo the return value of the last statement
14:20 < joeytwiddle> oh it even does Tab-completion <3
14:20 < joeytwiddle> mine does echo
14:21 < Jan-> fs = require('fs'); fs.exists("c:\\gcc.exe") echoes "undefined"
14:21 < Jan-> whereas the file does exist
14:22 < Jan-> oh
14:22 < Jan-> sync :)
14:22 < zomg> It would probably return a boolean if it was a synchronous call and not just undefined
14:22 < zomg> You can usually spot that sort of stuff easily by being smart about the return types =)
14:22 < Jan-> what would be a good way of detecting if the fs stuff is available, in the context of a portability layer?
14:23 < Jan-> I can check if require() is a function, but require is a common name in JS libs.
14:23 < Jan-> I suppose I can check if require('fs') returns something useful
14:23 < Jan-> but that might throw
14:23 < zomg> I haven't actually seen any JS libs besides requirejs or whatever it was which would use 'require' as a function name
14:24 < Jan-> I've written code myself that uses require() to dynamically load js files.
14:24 < zomg> But yeah if you really want to be safe you would need to figure out somehow that the require is the require you want
14:24 < zomg> but that can prove to be tricky so you probably should just set some expectations that if require exists, it's the correct one
14:25 < Jan-> Okay, I'll throw in a try/catch and test to see if fs.whatever exists
14:25 < zomg> You don't really need a try-catch if you just check that everything exists before trying to call it. I think it's a better approach than relying on try-catch for something you could check
14:25 < Jan-> By the way, would I be right in thinking that node doesn't allow automatic global definitions inside functions?
14:26 < zomg> Yeah it needs to be explicitly added to exports and even then it won't be a global but in the module itself
14:26 < Jan-> Hrm.
14:26 < zomg> I forgot if there was a 'global' object though.. maybe there was
14:26 < zomg> But yeah would need to be explicit for that too iirc
14:26 < Jan-> Does this mean that I need to be careful when I'm defining things that I *want* to be global?
14:26 < Jan-> I mean, right now, I'm working on a node version of my portable.File constructor, so I need portable to be globally-available.
14:26 < zomg> Well the thing is you probably shouldn't have globals which are used across modules
14:27 < zomg> If you need portable to be available in some module you would typically just require it
14:27 < Jan-> define "module"
14:27 < Jan-> one JS codefile
14:27 < zomg> Yeah module as in one JS file
14:27 < Jan-> Euuhhh. So how the hell do you communicate between files.
14:28  * Jan- scratches her head
14:28 < zomg> You could for example have a function which is used to initialize things
14:28 < zomg> for example if you consider express, it does not assume you have global variable port
14:28 < zomg> but instead you call express.createServer(portNumber)
14:28 < zomg> which returns an object which you can mess with some more
14:29 < Jan-> let's make it more simple than that
14:29 < Jan-> I define an object foo in one file
14:29 < Jan-> how do I access foo from code in another file
14:29 < zomg> You would just use var foo = require('./foo'); assuming it's in a file called foo.js in the current dir
14:29 < Jan-> Because that's, like, basic to Javascript, that's fundamental, that's how you actually build Javascript applications, isn't it?
14:30 < Jan-> Well hang on, how does that work? 
14:30 < Jan-> what if I've defined more than one object in the file
14:30 < zomg> Anything you want to become accessible in a file must go into the exports object
14:31 < Jan-> Euh.
14:31 < Jan-> So basically Node isn't actually Javascript.
14:31 < Jan-> It's a javascript-like language that they've screwed with quite significantly.
14:31 < zomg> How does that make it not actually javascript?
14:31 < zomg> You're just thinking of browsers
14:31 < Jan-> Because the concept of all the code files in a project sharing and communicating via a global namespace has been fundamental to Javascript since its inception.
14:32 < zomg> No, it's been what browsers do and it has nothing to do with the language itself
14:32 < Jan-> Browsers, and jscript as a scripting language, and the jslibs project, etc.
14:32 < Jan-> The problem is that this forces me to make my code non-portable between those environments.
14:32 < zomg> You can use require in a browser too, it just requires some setup for the files. There is nothing special to it
14:33 < zomg> You can even make it so that in browser it doesn't need require
14:33 < Jan-> well, I don't particularly want to run it in a browser.
14:34 < Jan-> Sorry, guys, this is ass. Who decided they were going to rewrite javascript for their own ends?
14:34 < Jan-> I'd have to completely rework my entire codebase to make it operable in Node.
14:35 < zomg> Then perhaps node is not for you
14:35 < Jan-> Perhaps not.
14:35 < Jan-> I was just trying to get away from jscript (which is dog slow) and jslibs, which is a bit, eh, flaky.
14:35 < Jan-> Are there any other independent JS interpreters out there?
14:36 < Jan-> and I mean an actual javascript interpreter like jscript or jslibs, not "javascript with weird node changes"
14:36 < zomg> haha
14:36 < zomg> sure
14:36 < zomg> you could get just pure V8, or Spidermonkey or whatever
14:36 < zomg> or RingoJS, Rhino, etc.
14:36 < Jan-> I wasn't aware you could.
14:36 < zomg> Now whether or not they are "javascript with weird node changes" 
14:36 < zomg> That I do not know since I'm not very familiar with them
14:37 < Jan-> Sorry guys
14:37 < Jan-> I'm just not going to completely rewrite the entire object structure of my code so it works in Node.
14:37 < zomg> That's fine, you can probably find more alternatives than what I mentioned from google if necessary
14:38 < Jan-> Did nobody think it would be a bit problematic to create a "javascript" (or rather sort of javascript-based) interpreter that wouldn't be able to use any preexisting library code at all?
14:38 < mmalecki> uhm, why isn't it able to use it?
14:39 < Jan-> because weird lack of global namespace?
14:39 < Jan-> because odd "require()" structure?
14:39 < Jan-> because strangeness with "exports"
14:39 < zomg> Who knows
14:40 < Sembiance> Jan-: heh, it's widely viewed that the single global namespace that browser-side javascript development has is a pretty huge mess and is nothing something one would want on the server side
14:42 < Jan-> Sembiance: yes, but you're creating a situation where node's "javascript" is completely non-interopable with anyone else's
14:43 < zomg> It's your javascript which is completely non-interoperable though...
14:43 < zomg> Node code is easy to use in any other application ;)
14:43 < Sembiance> Jan-: I believe the goal for node was to be 'better' rather than 'compatible' 
14:43 < zomg> And if you really wanted to, you could probably build some custom loader to load stuff which doesn't conform to node style
14:43 < zomg> But considering you're complaining about this on two channels at the same time, I'm not entirely sure if you're even looking for an actual solution
14:44 < zomg> and are rather just ranting and/or trolling/flaming
14:44 < zomg> especially after I gave you viable alternatives to node, and you just kept on going
14:45 < Jan-> well it's a bit difficult to find a standalone V8 interpreter
14:45 < joeytwiddle> there's Narwhal too, whatever it is
14:46 < Jan-> so basically, to make what I have work now, I'd have to require every file in every other file, and export every global object from every file.
14:46 < Jan-> And you're telling me that's "better".
14:46 < joeytwiddle> you don't have to use require at all for your own stuff
14:46 < zomg> Yeah because it's hard to put "V8 js engine" or whatever into google
14:46 < Jan-> and every time I added a new code file to the project, I'd have to add that file to every other file.
14:46 < zomg> I'm not even going to bother with you anymore
14:46 < zomg> It's pretty obvious that you're just raging about this now =)
14:46 < Jan-> that's just... demented...
14:46 < joeytwiddle> Node is a JS interpreter, so cat your files together and run them
14:46 < Cheery> is there people here who are interested about structured programming
14:46 < Cheery> ?
14:47 < joeytwiddle> run it*
14:47 < Jan-> joeytwiddle: I object to the idea that it's a Javascript interpreter.
14:47 < Jan-> If they wanted to invent their own scripting language they could have just called it NodeScript or whatever.
14:48 < Cheery> I've been trying to design an editor that would let you write programs into abstract syntax trees
14:49 < Cheery> the data model has changed over time, and I'm wondering for change again
14:49 < joeytwiddle> sounds interesting.  are you doing it in JS?
14:50 < Cheery> joeytwiddle: the current source code is python, but that's irrelevant as I'll eventually write more and more in it itself.
14:50 < joeytwiddle> nice :)
14:50 < Cheery> the editor itself I'm trying to make generic as possible
14:50 < joeytwiddle> i made a Java program once that let you drag variables onto methods, to run the method
14:50 < Cheery> it gives the supported languages some interesting properties.
14:51 < Cheery> for example.. I could stack GLSL-like semantics and host language into same file, without the usual troubles.
14:52 < Cheery> might be able to implement languages into languages.. that sort of things.
14:52 < Cheery> language 'macros' actually become new semantics.
14:52 < Cheery> I'm trying to get it look like coffeescript, with something under that's as flexible as lisp.
14:53 < itom07> how do you update node.js with npm? npm update node doesn't work
14:53 < joeytwiddle> Cheery: it sounds great.  can i help?!
14:54 < Cheery> joeytwiddle: yes!
14:54 < Cheery> https://github.com/cheery/essence
14:54 < joeytwiddle> i've been dreaming of similar projects
14:54 < joeytwiddle> i think once you have your own simple language, you can export to a lot of other languages
14:54 < itom07> node update?
14:54 < Cheery> joeytwiddle: that too.
14:55 < Cheery> I've thought about something like coffeescript -thing.. that would work for writing web apps.
14:55 < Cheery> might also help porting the editor to the web.
14:55 < Cheery> joeytwiddle: you could start by trying the editor as it is now.
14:55 < Cheery> I'm in the end of a sort of cycle again.
14:56 < Cheery> I've got a working editor, which isn't that nice to use really.
14:56 < Cheery> but which shows what problems there are.
14:56 < joeytwiddle> ImportError: No module named casuarius
14:56 < Cheery> so I'm plotting a improvement.
14:57 < Cheery> joeytwiddle: casuarius is a layout constraint solving kit.. it's bit outdated project.
14:57 < Cheery> but you should be able to get it through pip.
14:57 < joeytwiddle> ok
14:58 < Cheery> it also needs pygame, but that you probably have
14:58 < deoxxa> itom07: that's not how you do that
14:59 < deoxxa> itom07: npm lives on top of node, it can't replace node itself
14:59 < deoxxa> itom07: install a newer version in the same way you installed your current version
15:02 < itom07> @deoxxa thanks that worked
15:03 < Cheery> joeytwiddle: how's it going? oh btw. thank you from trying it out.
15:03 < joeytwiddle> Cheery: i'm sorry to say pip isn't working well either ;)
15:03 < Cheery> I should probably get rid of the casuarius dependency
15:03 < joeytwiddle> fine by me :)
15:03 < Cheery> did you get it running?
15:04 < joeytwiddle> "ImportError: No module named Cython.Distutils" during the post-install of casuarius
15:04 < Cheery> -_-
15:04 < purr> Cheery: ಠ_ಠ is an IRC client/IRC client framework.
15:07 < Cheery> joeytwiddle: chromium handles typed arrays so well I've started to consider whether I'd reimplement that thing in node.js
15:07 < joeytwiddle> :O
15:07 < joeytwiddle> types in Javascript?!
15:07 < Cheery> well it does memoryview pretty well too
15:08 < Cheery> the extra work would come from redesigning the layouter and writing the new document model in node.js.. but I start to feel that would pay out.
15:08 < Cheery> esp. if I find webgl for node.js and if node.js has some good stuff for bytes
15:09 < joeytwiddle> does your language have types?
15:09 < Cheery> joeytwiddle: not yet
15:10 < Cheery> joeytwiddle: I think I'll add some type inference for optimization somewhere later.
15:12 < joeytwiddle> i like parametrized types in C++ and Java.  i don't know if we need a better type system in future though
15:13 < chanced> is jsdom still the defacto dom builder?
15:13 < chanced> or has something "better" come along?
15:13 < Cheery> joeytwiddle: maybe I'll instead try get the interpreter up.. that's probably faster at this point.
15:14 < Cheery> looks like there's node-webgl.. but it doesn't look like exactly ready yet
15:15 < joeytwiddle> you can use webGL in the browser until then ;)
15:15 < Cheery> yeah I could.
15:15 < Cheery> I have somewhat nice idea of how to do that.
15:16 < Cheery> I'm considering the webGL/browser port anyway.):
15:16 < Cheery> :)
15:16 < TomWij> chanced: Have only heard about jsdom, search.npmjs.org shows some others when looking for DOM, but I don't see what would be wrong with using jsdom.
15:17 < Cheery> joeytwiddle: anyway, you likely want to know what kind of design requirements I've had with this thing
15:17 < TomWij> Better to use something that's known to do its job than something new that breaks half of the time...
15:17 < joeytwiddle> Cheery: my goal was to be able to write a program using only the mouse ;)
15:18 < Cheery> well I try to get away from text representation entirely because parsing puts up awkward requirements on programming languages
15:18 < Cheery> but.. I know this kind of project cannot succeed if it's overly complex.
15:19 < joeytwiddle> agree about parsing!
15:19 < Cheery> fortunately parsers and text editors - what it is supposed to replace - are rather complex. :)
15:19 < joeytwiddle> it's faster if it's already in a tree :D
15:19 < Cheery> that too
15:19 < staar2> HELLO
15:20 < joeytwiddle> editing yeah ...
15:20 < joeytwiddle> my goal was to allow drag-and-drop execution, and then let them delete from history
15:20 < Cheery> but one thing I've trying to keep priority is that the editor itself shouldn't be complex.
15:20 < Cheery> and it seems to work well.
15:21 < Cheery> after all, if structural editing could be solved by manhours.. it'd have been done already
15:21 < Cheery> so we can assume it's a design problem primarily
15:21 < joeytwiddle> i have seen languages these days which plug code statements together like jigsaw puzzles
15:21 < Cheery> puzzle
15:21 < Cheery> yeah. :)
15:21 < Cheery> I'm going for the same design
15:22 < Cheery> although the puzzle look is not necessary
15:22 < joeytwiddle> i don't need images, just a tree will do
15:22 < joeytwiddle> agree :D
15:25 < Cheery> I'm bit surprised I've managed to keep it simple
15:26 < Cheery> I have a wrapper over pygame.. it makes the drawing bit simpler
15:26 < Cheery> that's the essence.ui  essentially
15:26 < Cheery> then there's essence.layout
15:27 < joeytwiddle> Cheery: you can try my thing here: javaws 'http://hwi.ath.cx/code/java/VisualJava/VisualJava.jnlp'
15:27 < Cheery> the layouting model is a sort of leaf-glue-enclosingbox
15:27 < joeytwiddle> if you are lucky it will parse your classpath
15:28 < Cheery> net.sourceforge.jnlp.LaunchException: Fatal: Application Error: Cannot grant permissions to unsigned jars. Application requested security permissions, but jars are not signed.
15:28 < Cheery> apparently
15:28 < joeytwiddle> dang!
15:28 < Cheery> anyway that layouting model loosely binds into the selection and document model.
15:28 < Cheery> it's bit like how html is rendered.
15:29 < Cheery> except that everything stays together by glue :)
15:29 < joeytwiddle> :)
15:29 < Cheery> it's more latexy approach you see.
15:30 < Cheery> well..
15:30 < Cheery> another thing there's the plugin system
15:31 < Cheery> it loads scripts from directory and calls the defined hooks, when a handler is called.
15:31 < Cheery> if the hook returns something, the hook terminates
15:32 < Cheery> editor.py contains the core layouting -pieces.. plugins contain the rest of layouting. :)
15:32 < Cheery> it's separate of the layout.py, which is just a tool to do layouting.
15:33 < Cheery> now there's the document model
15:33 < Cheery> the current document model I have is nested lists, with attribute dictionary accompaniying them
15:34 < Cheery> attribute['name'] tells what kind of element the list represents for
15:34 < Cheery> there's operations into this model, splice, build, collapse, modify. they provide undo operation when applied.
15:35 < Cheery> these are wrapped by Selection and Buffer -objects.
15:36 < Cheery> Buffer associates document with their views and other information.
15:36 < Cheery> bit similar how it does that in text editors
15:36 < Cheery> Selection is a combination of buffer, path and range
15:36 < Cheery> it's used for modifying the documents
15:36 < Cheery> joeytwiddle: that's in short how it functions.
15:38 < joeytwiddle> wow!
15:39 < Cheery> yep. I think I've gotten lots of it correct.
15:39 < Cheery> but it looks like I'm spending yet couple months in this project :D
15:40 < Cheery> I could show at the metacircular interpreter I've done today.
15:42 < Cheery> https://raw.github.com/cheery/essence/master/coffeesipper.py
15:42 < Cheery> it's here
15:42 < Cheery> it lets you extend itself from within the coffeesipper
15:52 < Cheery> joeytwiddle: anyway, if you look around on it.. you can see what the evaluator wants from the AST
15:52 < Cheery> list_of_values(exp, env)
15:52 < Cheery> this is one thing
15:52 < Cheery> although not very common
15:52 < Cheery> callee, arguments = exp.array
15:52 < Cheery> assert arguments.get('name') == 'arguments'
15:53 < Cheery> arguments = list_of_values(arguments, env)
15:53 < Cheery> there you can see another common pattern.
15:53 < Cheery>     return exp.string
15:53 < Cheery> yet one way how it wants the data :)
15:54 < Cheery> it's clear there's sort of lists that are interesting only because they contain many somes.
15:55 < Cheery> but they wouldn't need anything other special.
15:56 < joeytwiddle> oh noes python has yield also!
15:57 < Cheery> of course it has >:)
15:58 < Cheery> it's one of the things where python shines actually
15:58 < Cheery> yield is very pleasant to use
15:59 < yangchenyun> Hi, I stumbled upon an intriguing question about the global object in a nodejs module.
15:59 < yangchenyun> https://gist.github.com/3028821
16:00 < Cheery> interesting!
16:05 < chanced> hmph
16:05 < chanced> is there a more elegant way of determining when all event listeners have finished other than throwing one at the end of the list?
16:06 < mmalecki> chanced: event listeners are invoked synchronously
16:06 < chanced> and without using a middleware style approach with done() being called
16:06 < chanced> really? ah
16:06 < joeytwiddle> echo "console.log(this);" | node   # Prints: {}
16:06 < chanced> i thought they were asynch
16:06 < chanced> thanks man
16:07 < mmalecki> chanced: pleasure :)
16:07 < chanced> makes my life a lot easier ;)
16:07 < joeytwiddle> yangchenyun: when running node as REPL, i think you are in eval context
16:08 < yangchenyun> joeytwiddle: what do you mean by the 'eval context'. I run the above code with `node test.js`  
16:09 < yangchenyun> What get me confused is the self-invoking function. 
16:09 < yangchenyun> Within it, `this` should refer to the object invokes this function and in the context should be the same as `this` in external context
16:14 < joeytwiddle> ah i see it yangchenyun, but i don't know why :)
16:19 < Cheery> joeytwiddle: are you still interested about essence, or EERP like there reads in the license? :)
16:21 < joeytwiddle> Cheery: please let me know if you ever remove casuarius!
16:21 < Cheery> joeytwiddle: I plan to remove it within this month
16:22 < Cheery> it's too much of a roadblock
16:25 < Cheery> joeytwiddle: but before that I think I'll implement yet one version about the document model
16:25 < Cheery> joeytwiddle: the current model places editing points into places where they simply don't make any sense
16:27 < Cheery> I call it semantic abstraction
16:28 < Cheery> basicly it's a document model where an element is a composite structure of one identifier and zero or more holes
16:49 < R3v1L> hi all
16:50 < joeytwiddle> that sounds graspable Cheery
16:51 < joeytwiddle> an "identifier" could well have a namespace tacked on i guess
16:51 < Cheery> yeah. it might make sense to replace identifier with structure too.
16:53 < R3v1L> I'm trying to figure how to develop an app with node.js and I can't understand a thing: There is a main thread that is executing all node.js application, but IO is made under other threads to not blocking main app. So, If I access the server and request a dabase register and another person access nearly same time as me (but later), updating that register, is there a posibility that I get the updated register?
16:55 < RLa> yeah, why not
16:56 < gildean> if the update is processed before your query, then yes
16:56 < gildean> i have no idea how nodejs queues different functions
16:57 < gildean> maybe someone can shed some light on that
16:58 < R3v1L> ok, so if I want to make a persistent world for a simple mmo
16:58 < R3v1L> I've to create a mechanism to sync database updates
17:00 < RLa> hm, without sync, what specific problems you could have?
17:00 < R3v1L> ie. I'm a player that killed a mob. That mob has a sword in it's bag
17:01 < R3v1L> there are 2 players next to mob, and the 1st one sends command to get sword
17:01 < R3v1L> second one is opening the bag in that same moment
17:02 < R3v1L> the second player could see or not the sword depending on server load and not on the order of the requests
17:02 < R3v1L> so I've to make a queue for syncing all previous requests if I want to avoid that situations
17:05 < R3v1L> basic world state can be got using app variables
17:05 < R3v1L> but complex queries had to be synced because of deferred nature of io in node
17:06 < dsirijus> what's the line to install all the dependencies (presumably specified by 'require''s) into local?
17:08 < jamescarr> anyway to get npm to dump the contents of the npm-debug.log when install fails?
17:08 < jamescarr> running in travis ci, can't get the log
17:10 < tankpilot> hi all. is there any functional MVC library for nodejs?
17:25 < bnoordhuis> tankpilot: 'functional' as in functional or as in functioning?
17:31 < Sorella> tankpilot, hm, do MVC patterns even fit the FP paradigm?
17:32 < Sorella> Haskell seems to not have any, so I'm assuming it doesn't =/
17:36 < tankpilot> Sorella: thanks for answer. I actually meant ORM. After 2 hours of sleep, I woke up with MVC keyword instead of ORM :) 
17:36 < RLa> don't mvc assume and usually describe mvc components as objects?
17:36 < RLa> well, javascript has objects so it could fit
17:37 < RLa> haskell does not so maybe that explains why it doesn't have
17:37 < tankpilot> sorry guys, I actually meant a basic ORM library
17:37 < tankpilot> not an MVC. no idea why I said MVC. lack of sleep must be the reason. 
17:37 < RLa> there are some orm libs like sequlize
17:38 < Sorella> tankpilot, hm, I'm pretty sure there are several. Have you tried searching `search.npmjs.org` and the Node Modules page on the wiki yet? :3
17:38 < RLa> i find orms less useful in dynamic languages than in static languages
17:38 < RLa> most, if not all node db drivers already give you objects
17:39 < RLa> unlike stuff in static langs where you get some weird stuff where you have to extract data yourself
17:44 < tankpilot> I recently figured out that we need a basic ORM abstractions if we don't code any classes in our code.
17:46 < tankpilot> to have functions constructing schemas that come with DB interaction and validation facilities
17:46 < tankpilot> Sorella: checked out the existing ones, thanks. 
17:48 < tankpilot> and I'm very curious about using fp utilities like composition, map & reduce on my data models
17:51 < RLa> data == objects, fp concepts == functions
17:52 < RLa> these two might not get along very well
17:52 < Sorella> tankpilot, your data models are just data, they can be processed by functions just fine.
17:52 < Sorella> tankpilot, if you have a potentially infinite number of elements, you can use streams, and compose functions that work on streams.
17:53 < Sorella> At the very end, objects are just special types of data. It helps if they have a well defined interface too.
17:54 < Sorella> btw: compose(pluck('name'), invoke('toUpperCase'), shorten_name)(ModelStream) would be one of such constructs.
17:55 < Sorella> Which would take the `name` property of each object, invoke `toUpperCase` on that value, then call a shorten_name function which would prolly abbreviate some stuff.
17:56 < dsirijus> anyone has a clue why i'm getting this error http://pastie.org/4183077
17:57 < dsirijus> it's super short app, not much reading, everything is pastie
17:57 < adamramadhan> hello
17:57 < adamramadhan> why is there is no method for toLocaleFormat in nodejs?
17:58 < RLa> dsirijus, the error message is obvious
17:59 < RLa> dsirijus, you set whole exports not temp_rewrite on it
18:01 < adamramadhan> anyone about toLocaleFormat?
18:02 < dsirijus> RLa, not really following
18:02 < RLa> dsirijus, module.exports = function temp_rewrite()
18:03 < RLa> dsirijus, app.use(require('./rewriter.js').temp_rewrite());
18:03 < RLa> just look at these little closer :)
18:04 -!- isaacs changed the topic of #Node.js to: Try it! You might like it! https://new.npmjs.org/
18:04 < dsirijus> RLa, then, just "app.use(require('./rewriter.js'));" ?
18:05 < RLa> no, because that would be the function not its invocation
18:05 < dsirijus> ()?
18:05 < RLa> yeah, add those there
18:08 < adamramadhan> isaacs: https://new.npmjs.org/profile/_edit 500 not found ?
18:09 < dsirijus> RLa, though now it works, it doesn't work as advertised... this should rewrite /pantene in url, and it doesn't, lookie see test.kation.hr/pantene
18:09 <@isaacs> adamramadhan: are you logged in?
18:09 <@isaacs> oh, nvm, i see it :)
18:09 <@isaacs> heh
18:09 <@isaacs> wonder why it's doing that.
18:10 <@isaacs> adamramadhan: i kicked the server and now it works.
18:10 < CIA-93> node: Ben Noordhuis v0.8 * rb53cd97 / doc/api/globals.markdown : doc: document setTimeout / setInterval behavior - http://git.io/sSgqlA
18:10 <@isaacs> adamramadhan: i think it might be that the router gets confused sometimes.  it should be a whole different top-level route
18:11 <@isaacs> adamramadhan: it was trying to look up the profile named "_edit", which is wrong
18:11 < RLa> dsirijus, you rewrite url as /pantene + url, /pantene ends up /pantene/pantene
18:11 < RLa> dsirijus, and you only have handler for /
18:11 < dsirijus> i was meaning to remove /pantene from requests
18:12 < dsirijus> this answer sucks http://stackoverflow.com/questions/8121676/running-nodejs-under-nginx
18:12 < dsirijus> :D
18:12 < adamramadhan> issacs: yeah 
18:12 < dsirijus> or the guy is having exactly opposite problem D:
18:13 < adamramadhan> testing out some things and learning the code.
18:13 < RLa> dsirijus, i would avoid that config as much as possible
18:14 < RLa> dsirijus, use subdomains instead if you run multiple apps on same domain
18:14 < dsirijus> RLa, not an option (certificates)
18:14 < RLa> then get cert for the subdomain too :)
18:15 < RLa> because there will always be something that gets the url wrong
18:15 < RLa> i think you can get cheap certs for subdomains too (does not have to be wildcard cert)
18:16 < dsirijus> RLa, i'd rather not get into why i need it like this, it's quite a debate then
18:17 < dsirijus> or, we can :)
18:18 < dsirijus> here's the thing, this is development server (lucifer)... kation.hr is on another server's (satan) dns, i'd have to make a A entry for every app i want then
18:18 < dsirijus> ssl cert is actually not a problem since it's self-signed on test.kation.hr (on 'lucifer')
18:19 < dsirijus> and i could make a self signed wild card cert there
18:19 < RLa> A entry for each app doesn't look like a lot
18:19 < dsirijus> but it would be a pita to add A dns entry to 'satan' each time i want to get app runnning here
18:19 < dsirijus> hm
18:19 < dsirijus> ok
18:19 < dsirijus> it would cut me this shit out though
18:20 < dsirijus> AND, i'd get to deploy it without changes to this rewriter or removing it
18:20 < dsirijus> hm
18:20 < RLa> anyway, you can remove /pantene by using substring
18:21 < dsirijus> RLa, how to run node app.js to get console logs out?
18:21 < dsirijus> so i can debug it or something
18:21 < RLa> '/pantene/'.substring('/pantent'.length);
18:21 < RLa> i just run node app.js
18:22 < RLa> in production i just redirect io to a file
18:22 < dsirijus> RLa, that impervious to something/pantene/panteneblabla?
18:22 < RLa> no, it assumes string starts with it
18:23 < dsirijus> doesn't matter, i'll just go with subdomain thingie
18:23 < RLa> you can also use '/pantene/'.replace(/^\/pantene/, '');
18:23 < RLa> or remove ^ to replace from anywhere of the string
18:24 < RLa> but yeah, subdomains looks bit saner solution
18:24 < dsirijus> yeh, and i get free ssl with gandi for production anyways
18:25 < dsirijus> btw, i'm not affiliate or anything... gandi is a big recommend
18:25 < RLa> using linode here :)
18:25 < RLa> gandi support sucks, never got feedback from them during test period
18:26 < RLa> but they do everything, register domains for you etc
18:26 < RLa> i guess that's good
18:26 < dsirijus> yeh, kinda slow support
18:41 < stan_man_can> Someone was showing me a thirdparty pubsub site the other day, anyone know what it might be?
18:49 < Fabryz> last time I spam it here for the match http://tweet-a-table.nodejitsu.com/ :3
18:54 < mmalecki> Fabryz: nice! love the design!
18:55 < Fabryz> mmalecki thanks
19:05 < Fabryz> at least 70 tweets/second about #euro2012 http://backtime.nodejitsu.com/
19:06 < Fabryz> and images http://tweemages.nodejitsu.com/
19:17 < RLa> who heck is supposed to read all that
19:18 < qubit[01]> whats the easiest way to create images of text in node ?
19:19 < Fabryz> qubit[01] iirc there was a canvas module, so you could create it in there and then export/save
19:20 < Fabryz> qubit[01] or give a look here https://github.com/joyent/node/wiki/modules#wiki-graphics
19:20 < qubit[01]> ahh perfect
19:26 < qubit[01]> node-canvas not in npm ?
19:26 < qubit[01]> wait nm
19:33 < AndreasMadsen> is there a way to configure npm so it resolves dependencies in module directories and not node_module directories
19:57 < magnusmafn> hi people
20:10 < Hoverbear> Ugh. D: 500 errors.
20:11 < Hoverbear> Anyone have any experience trying to get express and connect-assets to link in raw .less files from twitter's bootstrap?
20:17 < owen1> nodeconf starts tomorrow. anyone know if they plan to stream it live or if the videos will be available or what topics are presenteod?
20:22 < bwen> anyone familiar with the "Range" header and streaming files with nodejs? I seems to be working but i'm having a hard time getting the browser to put the "Range" header in its request... seems inconsistent... any ideas?
20:26 < bazookatooth> which in-memory database solution plays the friendliest w/ node?
20:26 < substack> redis
20:33 < alex4nder> hey
21:05 < stan_man_can> is there any sort of pre-packaged node solutions? I need a live push/pull solution but don't have time to learn node
21:05 < stan_man_can> it's just for a beta then I can hire someone :)
21:22 < nlogax> Attempting to fix some stuff, but tests failed, so I checked out master and got the same failure: https://paste.lugons.org/show/LOhSDsPFKWcMlp4dWZxo/
21:23 < nlogax> Any ideas what I might have missed? (cloned repo, configured, make && make install)
21:29 < bnoordhuis> nlogax: you probably need to up `ulimit -n`
21:34 < nlogax> bnoordhuis: That did the trick, thank you!
21:58 < williamcotton> whats with the "export JOBS=2" in all the "how to install node" tutorials?
21:58 < chapel> williamcotton: compiler thing
21:58 < chapel> tells it to use two cores to compile
21:59 < williamcotton> ah, ok
21:59 < williamcotton> chapel: thanks for digging in to that weird buffer stuff with me last night!
22:00 < chapel> you figure anything out?
22:00 < octane--> ahh i installed node from source (0.7.0) and node-waf is still not anywhere to be found. any ideas?
22:00 < williamcotton> only that it works with base64 and nothing else, hah
22:02 < williamcotton> but it is sort of serendipitous, because I was going to use File/FileReader on the client side as the next step, and that needs base64
22:02 < bnoordhuis> octane--: 0.7.0?
22:02 < octane--> bnoordhuis: yeah
22:03 < bnoordhuis> octane--: try 0.8.1
22:03 < chapel> williamcotton: well there you go, saved you a step
22:03 < chapel> :P
22:03 < bnoordhuis> octane--: also, what do you need node-waf for?
22:03 < octane--> bnoordhuis: installing hrtime
22:03 < octane--> and just being generally badass with dev utils
22:03 < octane--> I'm scared of upgrading to .8.1
22:03 < octane--> i am moving from .6.0 slowly
22:03 < bnoordhuis> octane--: you don't need hrtime, it's built-in in 0.8
22:04 < octane--> so I'm taking baby steps
22:04 < octane--> oh really
22:04 < williamcotton> does node use libevent or libev or does it hook in to poll/epoll/kqueue on it's own?
22:04 < bnoordhuis> octane--: re node-waf, it's installed to $PREFIX/bin
22:04 < octane--> bnoordhuis: not for me, at lead in 0.7.1
22:04 < bnoordhuis> williamcotton: libev for now. that will change soon though
22:05 < Daegalus> bnoordhuis: whats it changing to?
22:05 < williamcotton> so so modern, hah
22:05 < bnoordhuis> Daegalus: to pure libuv
22:05 < Daegalus> ah, figured, just wanted to make sure
22:06 < bnoordhuis> octane--: well, one more reason to upgrade to 0.8.1 -- it installs node-waf :)
22:06 < tbranyen> node-waffles
22:06 < octane--> bnoordhuis: okay i guess you're right. i have to tackle these sys/util issues anyway
22:07 < CIA-93> libuv: Ben Noordhuis v0.8 * r889ab21 / src/unix/core.c : unix: fix 'zero handles, one request' busy loop - http://git.io/SBz4LQ
22:07 < CIA-93> libuv: Ben Noordhuis v0.8 * rcc1b3de / (src/unix/internal.h src/unix/stream.c src/unix/tcp.c): unix: revert 0971598, obsoleted by 889ab21 - http://git.io/_btu1w
22:07 < mmalecki> wait, wasn't node-waf going to be removed?
22:07 < mmalecki> bnoordhuis: ^ ?
22:07 < CIA-93> node: Ben Noordhuis v0.8 * ra25a278 / (4 files): deps: upgrade libuv to cc1b3de - http://git.io/LMwODQ
22:07 < bnoordhuis> mmalecki: yes, eventually
22:07 < mmalecki> bnoordhuis: no, I mean, in 0.8?
22:07 < mmalecki> I think it was
22:07 < bnoordhuis> mmalecki: no
22:07 < mmalecki> oh, well, lame
22:08 < bnoordhuis> patience, young grashopper
22:08 < Daegalus> Im still debating if I should fork IronJS and update it ot Ecma 5
22:08 < mmalecki> lol
22:25 < CIA-93> libuv: Ben Noordhuis travis-debug * rd4c859a / test/test-gethostbyname.c : travis: debug gethostbyname test - http://git.io/Z7aVaA
22:29 < octane--> does anyone know why connect.router worked in .6.9 and doesn't work in .8.1?
22:35 < CIA-93> libuv: Ben Noordhuis travis-debug * r0f7cb61 / test/test-gethostbyname.c : travis: debug gethostbyname test, take 2 - http://git.io/G6YPuw
22:36 < perezd> [ANN]: riemann client for node.js: https://github.com/perezd/riemann-nodejs-client
22:38 < CIA-93> libuv: Ben Noordhuis travis-debug * r4b2e7c7 / test/test-gethostbyname.c : travis: debug gethostbyname test, take 3 - http://git.io/7uCe0Q
22:41 < mehemoho> hi there
22:41 < mehemoho> anyone knows a c00l chart generator module ?
22:41 < octane--> raphael.js
22:42 < mehemoho> wow, thank you ;) 
22:42 < Spion> d3.js (d3js.org)
22:42 < Spion> for simple charts, flot is also great.
22:45 < Astro-> d3 left the impression I'd have to do units, axes, labels and all that stuff myself, so I went for flot
22:48 < Spion> sort off. d3 provides labelled axes itself but you have to rotate the axes to the desired location
22:49 < Spion> of
22:49 < octane--> is slot sag as well?
22:49 < octane--> flot*
22:49 < octane--> svg
22:49 < Spion> no, canvas
22:49 < octane--> damn you autocorrect
22:49 < octane--> oic
22:50 < Spion> the best thing about flot is that its ultra-simple
22:50 < mehemoho> thank you very much dudes!
22:51 < mehemoho> lets try all of them ;)
22:53 < kmiyashiro> d3 has frameworks now
22:53 < kmiyashiro> look em up
22:56 < tbranyen> stuck trying to read out post data from express
22:56 < tbranyen> http://pastie.org/private/mdfaameou1rd3jojupg
22:56 < tbranyen> client/server
22:56 < tbranyen> not sure why this wouldn't work...
22:56 < tbranyen> req.body is always an empty object
22:56 < tbranyen> been googling around and i can't see whats wrong with mah source
22:58 < octane--> is connect.router deprecated in the latest node?
22:59 < nody> hi, does anybody know why latest nodejs 8.1 and latest socket.io 0.9 clean install don't work ? I tried all the simplest official examples, but it seems that the websocket connect from the client (chrome) to my server (everything local debug port 8111) fails : Cannot GET /socket.io/1/?t=1341182498702
23:09 < octane--> bnoordhuis: what's the hrtime module name?
23:09 < bnoordhuis> octane--: process.hrtime()
23:09 < octane--> bnoordhuis: awesome th
23:09 < octane--> x
23:32 < charlesPz> asdfafd
--- Log closed Mon Jul 02 00:00:15 2012
