--- Log opened Mon Mar 25 00:00:17 2013
00:01 < elfette> RLa, no but I'd prefer it in stylus considering that's what I'll be using
00:01 <@Nexxy> deathgaze, it's an object
00:01 < elfette> I don't know if they play well together
00:01 <@Nexxy> objects are objects
00:01 < deathgaze> nexxy: how would I go about probing it further to find out what else is attached to it?
00:01 < deathgaze> nexxy: uber beginner, here. :)
00:02 <@Nexxy> deathgaze, you could console.log it if you want to see its properties
00:02 <@Nexxy> deathgaze, you will have fun
00:02 <@Nexxy> deathgaze, objects can be just about anything, but usually the context of how you created it (or where you "got" it) will help you understand what to expect from it
00:03 <@Nexxy> objects are basically just collections of properties and/or functions (methods)
00:03 < gluxon> mscdex: Hm.. I'm bugging you again. How do I stop setInterval after the client has disconnected? http://pastebin.com/SMLjdp0H
00:03 < mscdex> gluxon: clearInterval
00:04 < gluxon> ..
00:04 < gluxon> dude, you're magical.
00:04 < deathgaze> nexxy: In this case, I got it from fs.readfile. I was expecting a buffer, but it doesn't respond to buffer properties...
00:04 < mscdex> it's plain javascript :-)
00:04 < mscdex> deathgaze: readFile does not return a buffer because it's async
00:05 < RLa> deathgaze, what do doc say about the return type?
00:05 < deathgaze> RLa: it says it's a raw buffer if you don't specify an encoding (which i did)
00:05 < mscdex> deathgaze: http://nodejs.org/docs/latest/api/fs.html#fs_fs_readfile_filename_options_callback
00:05 < ningu> yes, readFile returns a Buffer (with a capital b)
00:05 < RLa> nice, yahoo thinks my password is very strong
00:06 < mscdex> ningu: readFile _passes_ a Buffer to the _callback_, readFileSync _returns_ a Buffer
00:06 < ningu> mscdex: ok, yes. by return I meant pass to the callback, which is obviously different. :)
00:07 < ningu> but functionality similar in node
00:07 < ningu> functionally*
00:07 < deathgaze> ningu: The buffer that I have isn't responding to buffer propertie names
00:08 < mscdex> deathgaze: where is your code?
00:08 < ningu> deathgaze: and the buffer is coming from the callback?
00:08 < deathgaze> ya
00:08 < deathgaze> One sec
00:08 < elfette> RLa, so.... ? :)
00:09 < deathgaze> ningu: https://gist.github.com/deathgaze/5234156
00:10 < matbee> Any ideas how to render an EJS view within an EJS view w/ express?
00:10 < mscdex> deathgaze: what node version?
00:10 < mscdex> deathgaze: if you specify an encoding, you're going to get a string, not a Buffer
00:11 < deathgaze> mscdex: how do I find my node version?
00:11 < deathgaze> nm, 0.8.21
00:12 < mscdex> deathgaze: 0.8 has a slightly different signature for readFile: http://nodejs.org/docs/v0.8.21/api/fs.html#fs_fs_readfile_filename_encoding_callback
00:13 < mscdex> do 'enable1.txt', 'utf8', function(err, data) {
00:20 < deathgaze> mscdex: Thanks! Obvious object is obvious. :P
00:23 < zemonk_> i am curious on the experience of people using node in production
00:23 < zemonk_> what is the largest node project you have worked on? how many lines of code was it?
00:24 < zemonk_> and how do you find the manageability of the code?
00:26 < zemonk_> it feels like node is great for single purpose tasks, but when i want to build out something more complex (like an app) things get harder
00:27 < deathgaze> That would make sense to me. JS is a scripting language. I think it still remains to be seen how well it maps to large projects.
00:27 < deathgaze> Then again, aren't all large projects hard?
00:28 < zemonk_> haha, i guess, but the point at which it gets harder is different here
00:28 < ningu> zemonk_: a lot has been written on how to properly manage large js projects -- consistent methods of prototype inheritance and so on
00:29 < zemonk_> ningu: is there a good read you would recommend
00:29 < ningu> I don't know offhand -- people always recommend crockford (js: the good parts) and js: the definitive guide
00:29 < ningu> I haven't read either
00:30 < ningu> zemonk_: you could also look at how coffee-script implements classes. I'm sure that's considered one of the 'proper' ways to do it (whether you use coffee-script or not)
00:30 < deathgaze> Piggy backing on what ningu said, it's an incredibly mutable language. Look at JQuery - the way JQuery is used completely upends the language for the casual web programmer
00:30 < deathgaze> It seems like the enforcement of rigorous coding standards would be the ticket to keepng large projects managable, code wise
00:31 < ningu> deathgaze: jquery doesn't change any standard prototypes, it just provides a bunch of new methods under $
00:31 < ljharb> javascript does not have classes. faking it will only lead you to design problems.
00:31 < deathgaze> ningu: Wasn't claiming that. But the syntax required is... odd.
00:31 < zemonk_> yea, i am comfortable with the core of javascript, node introduces a bit more trickery because of its async nature
00:31 < deathgaze> When anyone on a project can do things like assign methods to $
00:31 < deathgaze> Things can get messy
00:31 < ningu> ljharb: that's far from obvious to me (that it will lead to design problems)
00:32 < ljharb> ningu: javascript doesn't have classical inheritance, and pre-es6, it *cant* be properly faked.
00:32 < ljharb> ningu: if you design your structures with a more functional approach, or using prototypes as they are, you'll have a much easier time.
00:32 < zemonk_> let me explain with an example, ii wanted to build a module that checks if an email address exists
00:33 < zemonk_> seemed simple enough
00:33 < ningu> ljharb: I wonder what you'd make of the design of https://github.com/BetSmartMedia/gesundheit then
00:33 < faceleg|work> ljharb: i've done projects where we used "classes" with proto-inheritance
00:33 < zemonk_> now i need to do the following: from the email address, extract the domain and then resolve the mx entry in the dns
00:33 < faceleg|work> what problems should I have expected?
00:33 < zemonk_> and then talk to that server
00:33 < zemonk_> and check with it if the email exists
00:33 < ljharb> faceleg|work: if they're not using classical inheritance, "class" isn't the right word for them - and i'd say none
00:33 < aMoniker> zemonk_: why?
00:33 < zemonk_> its easy to build too
00:34 < faceleg|work> ljharb: oh
00:34 < tjfontaine> "check if email exists" is non-deterministic
00:34 < zemonk_> aMoniker: why "why?"
00:34 < aMoniker> zemonk_: why 'why "why"'?
00:34 < zemonk_> i am doing this
00:34 < zemonk_> www.labnol.org/software/verify-email-address/18220/
00:34 < zemonk_> i can build a module that does this
00:34 < ljharb> ningu: coffeescript makes my eyes bleed, i can't read that.
00:35 < zemonk_> but, now i wanted to write a test for it
00:35 < aMoniker> zemonk_: yes, but why do you need to check?
00:35 < zemonk_> i guess, validate an email is real
00:35 < tjfontaine> zemonk_: some MX's are simply frontends that will accept the initial RCPTO, but later fail with a bounce
00:35 < ningu> ljharb: I don't do coffeescript either, but it's a well designed module
00:35 < aMoniker> zemonk_: for a user's account?
00:35 < ljharb> zemonk_: just *send* them an email. that's how you know.
00:35 < aMoniker> ^
00:35 < aMoniker> right, that's what I was getting to
00:35 < aMoniker> send an email with a verification link
00:36 < zemonk_> yea, i could do that, but let me explain the programming problem first :P
00:36 < zemonk_> so i write the module, that uses dns and net
00:36 < zemonk_> internally
00:37 < zemonk_> now i want to test it
00:37 < zemonk_> how do i test it, without actually resolving dns and communicating
00:37 < aMoniker> zemonk_: solve the right problem.
00:37 < zemonk_> haha
00:38 < aMoniker> move on to the next task
00:38 < zemonk_> alright, fair enough, but as a generic problem, how do people deal with testing something that uses multiple services
00:38 < gaf> hi, I'm setting a router for a about page, but something goes wrong. http://pastebin.com/Fxf8FTMa  Cannot GET /about . ideas?
00:40 < aMoniker> zemonk_: you could fake pass/fail data for each step between services
00:40 < zemonk_> so taking the above example, the module might expose just 1 function
00:41 < zemonk_> but internally uses "dns" and "net"
00:41 < zemonk_> how would that work in that case
00:41 < aMoniker> write a test for both dns and net separately?
00:41 < zemonk_> dns and net are core modules in node
00:42 < zemonk_> i could probably monkeypatch the 2 during the test
00:42 < zemonk_> but that feels bad, because i am testing knowing the implementation
00:42 < tjfontaine> zemonk_: you're probably not testing the right thing
00:42 < tjfontaine> zemonk_: what about dns and net do you think you need to test?
00:43 < zemonk_> given an email, the module needs to use those 2 services to give its output
00:43 < zemonk_> i don't need to test dns and net
00:44 < zemonk_> i just need to test the module that uses those two
00:45 < zemonk_> so lets call the module mailcheck
00:45 < zemonk_> mailcheck uses dns and net internally
00:45 < zemonk_> i want to test mailcheck
00:45 < zemonk_> i could write a bunch of tests and it will work
00:45 < youjelly> hi guys, I wanted to know what would be the best way to read/write on named pipes in linux
00:45 < zemonk_> but it will go against real network
00:45 < zemonk_> and that will be slow
00:46 < gaf> if i have Cannot GET /about in a express app, where could be the error comming from?
00:46 < zemonk_> i can monkeypatch dns and net, so that test will be fast
00:46 < youjelly> through node
00:46 < zemonk_> but that feels wrong
00:46 < tjfontaine> zemonk_: why not just provide the DNS server and TCP server it expects? then its self contained
00:46 < zemonk_> since i am testing the implementation rather than the interface
00:47 < ChrisPartridge> zemonk_: mock it!
00:47 < tjfontaine> zemonk_: net.createServer is trivial, and there are a couple of dns implementation sout there, including one I did
00:47 < youjelly> can we squelch joins and leaves on the channel?
00:47 < tjfontaine> youjelly: your client can
00:47 < gkatsev> youjelly: most clients can ignore those things
00:48 < zemonk_> haha, i want to mock it, i am just not sure how/where
00:48 < zemonk_> it can be passed in to the mailcheck module
00:48 < zemonk_> but it feels unnecessary
00:48 < zemonk_> net and dns are core modules
00:48 < zemonk_> why am i passing them in? just to allow testing? is that a good enough reason to make the interface more complex?
00:49 < ljharb> you can't just mock them with their require path?
00:49 < zemonk_> i guess i could take in a dns and net module, and if one isn't provided, use the core ones?
00:49 < zemonk_> can you?
00:49 < youjelly> so I want to do something like this, specify a named pipe through a browser (a process is writing to the pipe) and display its contents in real time on the webpage, how would I dynamically be opening new pipes with each client request?
00:49 < ljharb> sure, in the require cache
00:49 < zemonk_> hmm, interesting
00:50 < youjelly> so client A requests to listen on pipe1, client B on pipe 1 and client C on pipe 2
00:50 < ljharb> just make sure to delete your stub out of the cache when youre done
00:50 < zemonk_> out of curiousity what would the people here do? which approach would you take
00:50 < youjelly> and I'm dynamically opening those pipes on the server side
00:50 < zemonk_> so there is the pass it in vs the changing require cache
00:51 < zemonk_> the nice thing about the require cache is you don't change the implementation to accomodate the test
00:51 < ljharb> also you could fake the network conditions required
00:51 < zemonk_> yea, that sounds good
00:52 < gaf> hey, can you tell me what is wrong with my code? I can't get the about router :/ http://pastebin.com/Fxf8FTMa
00:53 < ChrisPartridge> gaf: try "/about" in your app.get
00:53 < mscdex> gaf: '/about' instead of 'about' ?
00:53 < mscdex> :-)
00:54 < zemonk_> thanks guys, related testing question - what do people usally use for testing here?
00:54 < zemonk_> i am using mocha now, sinon.js looks very useful
00:54 < mscdex> assert.js ftw!
00:54 <@Nexxy> zemonk_, tap is also popular
00:55 < zemonk_> haha
00:55 < zemonk_> oh cool
00:55 < zemonk_> also what ide do most people use?
00:55 < zemonk_> mscdex, i am going to guess notepad :P
00:56 < gaf> mscdex, i tried /about, still not working
00:56 < ChrisPartridge> zemonk_: sublime text ftw
00:56 < gaf> i mean '/about'
00:56 < mscdex> zemonk_: Notepad++ on Windows and gedit/nano on anything else
00:56 < mscdex> for me anyway
00:56 < gaf> oh, it does work now
00:56 < gaf> :D yay
00:56 < zemonk_> cool, do you miss the debugging tool integration?
00:57 < ChrisPartridge> who needs to debug when you write perfect code, every time ;)
00:57 < zemonk_> haha
00:57 < zemonk_> what is the secret to getting there :P
00:58 < ChrisPartridge> writing a lot of bad code :)
00:58 < zemonk_> lol
00:58 < mscdex> or become an apprentice of Linus
00:58 <@Nexxy> amphetamines
00:59 < mscdex> zemonk_: i don't miss debugging integration
00:59 < ChrisPartridge> Nexxy: doesn't that just give the illusion of good code? :)
00:59 <@Nexxy> ChrisPartridge, not if you keep it up!
00:59 <@Nexxy> lol
01:00 < mscdex> zemonk_: although you can easily set up a shortcut within the editor to compile a binary addon with '-d' and run within gdb
01:00 < mscdex> or run js source through jshint
01:01 < zemonk_> yea, jshint definitely helps
01:01 < zemonk_> but wouldn't you have to run it outside notepad++?
01:01 < zemonk_> it could be a lot of work to constantly run jshint and check
01:01 < ChrisPartridge> just use st2 with jshint on save
01:01 < zemonk_> and gdb? thats too intense
01:02 < zemonk_> isn't that just command line
01:02 < zemonk_> for debugging
01:02 < zemonk_> ChrisPatridge: thats cool, i tried sublime long ago, got confused setting up builders..i should give it a try again
01:03 < mscdex> zemonk_: yes, they run in a separate process
01:03 < mscdex> zemonk_: real developers use gdb!
01:03 < mscdex> and valgrind!
01:03 < mscdex> and strace!
01:03 < zemonk_> haha, i would have to train for a few more years to get there
01:04 <@Nexxy> mscdex, !
01:04 < youjelly> lol
01:04 < zemonk_> ahh, interesting convo, have to leave for a bit
01:04 < mscdex> that interesting eh? :-)
01:04 < zemonk_> yea, learning the ways of node from the pros, right :P
01:11 < sshaginyan> Guys does express send a default message if nothing is responded?
01:34 < ChrisPartridge> sshaginyan: you should always respond
01:36 < sshaginyan> ty
01:45 < sshaginyan> Do you guys know how the timeout works in node.js express?
01:46 < sshaginyan> I didn't see any docs on it but is it like this? request.connection.setTimeout(1, function()
01:46 < sshaginyan> I want to set a timeout if the server is taking too long
01:48 < ChrisPartridge> sshaginyan: timeouts are not applied to specific object per se, just like client side
01:48 < ChrisPartridge> sshaginyan: http://nodejs.org/api/timers.html
01:48 < sshaginyan> I truly didn't understand what you said
01:51 < sshaginyan> ChrisPartridge: Say I don't get a response form the server within 10 seconds, how can I send a message saying connection was lost it took too long.
01:51 < ChrisPartridge> sshaginyan: oops, didn't realise your question was express specific - but yeah, you probably want to handle that in some middleware - which I'm sure already exists
01:52 < sshaginyan> ChrisPartridge: By middleware you mean a library?
01:54 < ChrisPartridge> sshaginyan: yep, search in NPM - there's probably several packages you could try/use as inspiration
01:55 < sshaginyan> ChrisPartridge: But this works for express response.connection.setTimeout(1);
01:55 < sshaginyan> Is this something special that express did?
01:56 < sshaginyan> http://nodejs.org/api/timers.html and the one express provides me aren't the same
01:56 < sshaginyan> I'm guess express is doing something is and wrapping it with setTimeout
01:57 < ChrisPartridge> yeah, ignore timers section - it relates more to: http://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback
01:59 < sshaginyan> ChrisPartridge: Can you explain to me request and response…. How does a request have a setTimeout ?
01:59 < sshaginyan> What is the request time?
02:01 < ChrisPartridge> sshaginyan: all this stuff comes straight from the http implementation in node
02:01 < ChrisPartridge> sshaginyan: http://nodejs.org/api/http.htm
02:02 < sshaginyan> 404 nodet found
02:02 < sshaginyan> k
02:02 < sshaginyan> k
02:02 < sshaginyan> nm
02:12 < zemonk_> back, so going back to an older question .. what is the largest node app anyone here has worked on
02:12 < sshaginyan> ChrisPartridge: Can you check this http://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback page out and tell me how to use the destroy function
02:13 <@Nexxy> zemonk_, I worked on a point of sale app that was pretty 'large'
02:13 < jesusabdullah> sup Nexxy 
02:14 <@Nexxy> jesusabdullah, o u no, hacks
02:14 < zemonk_> oh awesome
02:14 < jesusabdullah> it's snowing like crazy
02:14 < zemonk_> how many lines of code was that
02:14 < jesusabdullah> I'd say it's pouring except snow doesn't pour
02:14 < zemonk_> was it a web app?
02:14 < AAA_awright> zemonk_: My app and modules written for it total 7088 lines of code
02:14 <@Nexxy> zemonk_, in the sense that it worked in a browser, yes
02:14 <@Nexxy> but it wasn't a traditional web app
02:14 < zemonk_> lol ic, cool
02:14 < zemonk_> how was it different?
02:15 < zemonk_> AAA: awesome, was that a web app?
02:15 <@Nexxy> it only ran in chromium
02:15 < zemonk_> oh neat, so something like appjs?
02:15 < AAA_awright> zemonk_: http://magnode.org/
02:15 <@Nexxy> a little bit, this was before appjs was a thing
02:15 < AAA_awright> Open source at that
02:15 <@Nexxy> and only for embedded use
02:15 <@Nexxy> rather than desktop deployment
02:16 < AAA_awright> Almost to be released, I'm looking for people to test it, anyone want to help me do that?
02:16 < zemonk_> AAA: neat, that sounds interesting
02:16 < zemonk_> Nexxy: did you use something like express?
02:17 <@Nexxy> yep!
02:17 < zemonk_> did you write tests for the app?
02:17 <@Nexxy> lolno
02:18 < zemonk_> thats another thing i have been wondering, if you write an mvc app, is it really worth it to write tests for it
02:18 < zemonk_> i am sure its good
02:18 < zemonk_> but yea, it slows you down
02:19 <@Nexxy> tests are great when you know how your software is supposed to behave
02:19 < ChrisPartridge> not if you write tests first :P
02:19 <@Nexxy> when everything is still up in the air it's just a hassle
02:19 < ChrisPartridge> Nexxy is just naughty
02:19 < zemonk_> haha
02:19 < zemonk_> so Chris, how about you any tests for apps?
02:19 < zemonk_> in node
02:19 < Aria> I do avoid tests when I'm really truly experimenting. I really like them when there's something I want to rely on.
02:19 <@Nexxy> writing tests first is just baking your assumptions into your project from the very beginning
02:19 < zemonk_> Aria: thats a good point
02:19 < Aria> MVC (at least some versions of the pattern) hopefully breaks your app up into testable pieces.
02:19 < jesusabdullah> I feel that Nexxy 
02:20 < Aria> Though WHAT people mean by 'mvc' varies a lot.
02:20 < zemonk_> i find MVC testing tough, especially testing Controllers
02:20 < Aria> In a GUI app sense?
02:20 < zemonk_> do i mock models and views?
02:20 < zemonk_> a web app
02:20 < Aria> Yes. If you want actual unit tests, only test one unit: that means the controller in isolation
02:20 < Aria> Client side or server-side?
02:20 < zemonk_> server side
02:21 < Aria> "Controller" on the server side is an ill-fitting concept, I find. Square peg, round hole.
02:21 < Aria> Less so in node where things can be persistent, but usually it's some part of request processing, and views end up being 'presenters' of sorts. Or templates.
02:21 < zemonk_> i understand theoretically i should mock models and views when testing controllers, but thats a hassle
02:21 < zemonk_> and feels very unnatural
02:21 < Aria> (MVC originated in smalltalk, very CAD-style apps -- controllers made a lot of sense there)
02:22 < Aria> What is a controller to you?
02:22 < Aria> What's it actually doing?
02:22 < zemonk_> Controller in something like locomotivejs
02:22 < zemonk_> so processes a request
02:22 < zemonk_> makes appropriate model calls
02:22 < zemonk_> and renders a view
02:23 < zemonk_> http://locomotivejs.org/
02:23 < zemonk_> http://locomotivejs.org/guide/controllers/
02:23 < zemonk_> i really like the concepts here, but i find it hard to picture how i would test the pieces when using something like this
02:24 < zemonk_> AAA_awright: http://magnode.org/user-create gives 404
02:25 < AAA_awright> zemonk_: Eh I should probably remove those, just exploring?
02:26 < AAA_awright> User accounts do work though
02:26 < zemonk_> yea, just exploring
02:26 < AAA_awright> Maybe you want to try it out, if you have MongoDB running
02:26 < zemonk_> cool, are you open sourcing this? looking forward to that
02:26 < AAA_awright> Yeah you can clone a Git repo
02:27 < AAA_awright> Click "Get Started"
02:27 < zemonk_> oh nice
02:27 < Aria> Yeah, that's hard to isolate, because it's not injecting dependencies, and is a very coupled model.
02:27 < AAA_awright> What is injecting dependencies
02:28 < Aria> AAA_awright: Where you pass in the parts that code needs, rather than having it instantiate it itself.
02:28 < zemonk_> for e.g. you pass in the model and the view to the controller
02:28 < Aria> Yeah. 
02:28 < zemonk_> instead of "requiring" them
02:28 < Aria> It really depends on where your business logic lives. IF it's in the model, your controllers will be light, and there's not much to test.
02:29 < Aria> If the business logic ends up in the "controllers" (these really aren't classic MVC controllers... these are request handlers), then mocking the models and views is smart and they bear some testing
02:30 < zemonk_> yea, what a controller has to do isn't well defined (at least in my mind)
02:30 < zemonk_> when you have interactions between models
02:31 < zemonk_> do you make the models aware of each other or let the controllers do the wiring?
02:33 < zemonk_> i am beginning to think, locomotivejs may be a bad choice to build an app if you want parts to be testable
02:33 < zemonk_> may be i should just email the developer xD
02:33 < Aria> I tend to have models be aware of each other, but not instantiate each other. But it really depends on what the specifics of the app are.
02:33 < Aria> Yeah. Some things are hard to test!
02:35 < Aria> That's why dependency injection is such a thing. Though in a language like JS, it doesn't have to be heavy-weight.
02:36 < zemonk_> ahh, testing is this thing, which sounds so good, but is difficult to use in practice
02:36 < Aria> Yep.
02:37 < zemonk_> if you leave the tests when you are experimenting, you might end up just building on top of the experiement and it would be too late to add the tests in
02:37 < Aria> This bites every framework. People complain of trying to test Rails controllers too.
02:37 < zemonk_> at least thats my fear
02:37 < Aria> Yeah. That's where ruthless refactoring comes in.
02:37 < zemonk_> lol ic, thats somewhat of a consolation
02:38 < zemonk_> when it comes to refactoring, how i wish js was a static language
02:38 < Aria> Hehe. I love that it's not, for refactoring.
02:38 < zemonk_> i use java at work, and refactoring is just so beautiful in eclipse
02:38 < Aria> Heh. For some kinds of refactor!
02:38 < Aria> And horrible for others.
02:38 < zemonk_> lol really?
02:39 < Aria> Yeah. Javascript just has different idioms.
02:39 < Aria> You don't get "wrap in function" in Java.
02:39 < Aria> or "extract this as a module"
02:41 < zemonk_> do you use any tools for refactoring?
02:41 < Aria> I don't, but I'm a pretty extreme minimalist when it comes to tools. 
02:41 < Aria> my text editor and git. That's about it.
02:42 < zemonk_> which editor do you use?
02:42 < Aria> I do tend to be kinda substackish with making new modules though. 
02:42 < Aria> vi.
02:42 < zemonk_> any plugins with it?
02:42 < zemonk_> oh
02:42 < zemonk_> lol
02:42  * Aria grins.
02:42 < zemonk_> haha, no further comments on that :P
02:43 < AAA_awright> zemonk_: Did you end up trying that Get Started page?
02:43 < zemonk_> nope, still haven't followed the instructions
02:45 < AAA_awright> Well I'd really enjoy some feedback, it shouldn't take longer than 5 minutes... http://magnode.org/download
02:45 < zemonk_> lol, alright, let me give it a shot
02:48 < Aria> http://www.dadhacker.com/blog/?p=1976 is brilliant.
02:54 < zemonk_> AAA_awright: where is server.json?
02:54 < AAA_awright> zemonk_: You have to create it, do you see a URL to start setup?
02:55 < zemonk_> oh, i skipped to the last section on git development
02:56 < zemonk_> sorry AAA, i'll try this later ... feeling tired to go through software setup :)
02:57 < s3shs-> Hello!  Wow, do I have a question for you.  What debugger bridges do you use besides node-inspector?  (This is for Mac.)
02:57 < Aria> That and node debug foo
02:58 < s3shs-> node-inspector may be having problems with nextTick and domians.
02:58 < Aria> Fun! Not too surprised.
02:58 < bradleymeck> s3shs-: try node-webkit-agent
02:58 < s3shs-> bradleymeck, you are a font of information.  Thank you.
02:58 < s3shs-> I'll check it out.
02:59 < TehShrike1> A veritable FOUNT!
02:59 < s3shs-> My theory is my crash is being caused by node-inspector, which looks to be dead.  (!?!?!)
02:59 < s3shs-> Yes, TehShrike1
02:59 < AAA_awright> zemonk_: That's supposed to be the 5-minute part, oh well... did you see a URL or not?
02:59 < s3shs-> :-)
02:59 < zemonk_> where would i see a url?
02:59 < AAA_awright> When you run ./app.js
03:00 < Aria> s3shs-: Dead?
03:02 < s3shs-> It hasn't been updated in a very long time.
03:02 < s3shs-> And the bugs reported are no longer addressed.
03:02 < s3shs-> I wonder if node-inspector is messing with nextTick and breaking domains.
03:04 < s3shs-> Aria: https://github.com/dannycoates/node-inspector/issues
03:04 < Aria> Fun!
03:05 < Aria> https://github.com/dannycoates/node-inspector/pulls is the more important measure.
03:09 < s3shs-> Nevermind.  It's crashing in the exact same place with the node debugger.
03:18 < s3shs-> Debugger Bug: https://github.com/joyent/node/issues/5131
03:22 < zemonk_> AAA: chrome says "this site's certificate is not trusted" when i click the tgz link
03:25 < s3shs-> github?
03:51 < duko> does anyone here know how unit-testing works with a github project? I'd like to have the 'build : passing' logo on a project page
03:51 < duko> I don't have unit tests for the project yet
03:52 < duko> could I use any unit testing framework for this? how would I get github to run the tests?
03:52 < st_luke_> duko: github doesn't have anything to do with that other than hosting the stuff, most people these days prefer travis-ci to run the tests on their open source project
03:52 < Voting> what should I call the arg that is the function that is going to get called once my function gets its own work done? the resultHandler? 
03:53 < st_luke_> Voting: the callback
03:53 < tboyt> what determines the buffer size in a process.stdin "data" event? is it just random or is there a specific size node uses?
03:53 < Voting> st_luke_: ah! tx!
03:53 < substack> stdin is line-buffered when it comes from a tty
03:53 < st_luke_> tboyt: the OS
04:19 < duko> does anyone know how to remove an npm module from npmjs?
04:19 < duko> I've tried npm unpublish project@version
04:19 < duko> but the project is still there on npmjs
04:19 < AAA_awright> Changes have to propogate
04:19 < AAA_awright> So, time
04:21 < duko> AAA_awright -I unpublished it a few days ago :S
04:21 < AAA_awright> Oh.
04:21 < AAA_awright> Yeah that would be a problem.
04:24 < tensor_> anyone around?
04:24 < duko> a lesson to everyone: don't publish a module if you might want to remove it later
04:25 < tensor_> you can't unpub a module?
04:25 < tensor_> ouch
04:25 < CPartridge> just ask isaac - i'm sure it can be sorted out
04:26 < tensor_> just starting with Node but it seems pretty sweet so far
04:27 < tensor_> the one thing I wish they did have is a list of actively developed modules
04:27 < tensor_> there are tons of DB connectors...really hard to tell which ones are being continually developed
04:28 < CPartridge> tensor_: npm search shows the last updated date, otherwise npm info and hit their github repo
04:28 < duko> I want to share my npm module and its github page with this channel
04:29 < duko> for the purpose of getting advice
04:29 < duko> https://npmjs.org/package/scroungejs
04:30 < stagas> duko: there's an lru cache in npmjs.org so if you keep visiting the deleted one it won't expire
04:30 < cliffano> JasonSmith: what admin setting do you use for isaacs.iriscouch.com ? i have a private npm registry running, and if i set admin user in couch.ini, it always prompts for authentication on any read/write operation
04:31 < duko> I would like for the module to be useful to other people. I want to tell people about it but I'm not sure if its ready for that
04:31 < duko> it hasn't been peer reviewed and I'm not sure what other people will think about it
04:32 < duko> CPartridge: the module is gone now, thanks
04:32 < duko> I deleted all versions of it
04:32 < duko> and I left the npm project page in my browser. Its gone now.
04:33 < duko> I can still npm install the module which is unfortunate but I don't see it in npmjs anymore
04:33 < bradleymeck> cliffano: validate_doc_update
04:34 < CPartridge> duko: it doesn't need to be peer reviewed to go into npm, if that's what you were worried about
04:34 < bradleymeck> cliffano: https://github.com/isaacs/npmjs.org for all the info
04:37 < duko> I want my module to be 'acceptable' to people who know more about public projects and node.js than I do
04:38 < CPartridge> duko: considering you've done a great job with the README (which most people dont), just publish it :P
04:39 < duko> CPartridge: ok thanks
04:40 < cliffano> bradleymeck: that documentation only has an example where couch does not require username and password, my private npm registry always returns 401 in that case... and npm config https://github.com/isaacs/npm-registry-client does not have any field for couchdb admin username/password setup
04:41 < CPartridge> duko: pretty sweet graphics too
04:42 < bradleymeck> cliffano: its not in config, its a document update handler
04:43 < bradleymeck> search for validate_doc_update in that repo and compare with  http://isaacs.iriscouch.com/registry/_all_docs?startkey=%22_design/%22&endkey=%22_design0%22&include_docs=true 
04:44 < duko> CPartridge: I want to promote this module. Do you have ideas for how I should go about that?
04:46 < bradleymeck> google groups, talk to tech blogs trying to get on them
04:46 < duko> bradleymeck: which tech blog is best for this? I can only think of news.ycombinator...
04:47 < bradleymeck> dailyjs is pretty high up on my list
04:47 < Voting> wow... I have four queries I want to do in a row and I'm finding this syntactically really annoying to try to do everything w/ call back functions. Suggestions? 
04:47 < CPartridge> duko: write a compelling blog post about why you should use it over all the other possible solutions :)
04:47 < bradleymeck> Voting: async.waterfall or async.series from npm's async module
04:47 < CPartridge> if you get on djs, or upvoted on HN - you'll probably get some followers
04:48 < Voting> bradleymeck: wow.... cool... you going to be around for a while? 
04:48 < bradleymeck> about to go on shift so maybe
04:49 < Voting> bradleymeck: what shift is that?
04:49 < bradleymeck> work
04:49 < hackedy> Array.shift, of course
04:50 < cliffano> bradleymeck: they are identical 
04:50 < hackedy> well. Array.prototype.shift
04:50 < bradleymeck> cliffano: and that validate_doc_update is how you can restrict individual writes, you cannot limit reads in a single db
04:50 < cliffano> bradleymeck: i'm not sure how it's related to the database... because even if i try to use futon, it gives 401 for admin authentication
04:51 < bradleymeck> yep, couch reads can only be limited on the DB level, updates only using an update handler. a book or blog post on couchdb security might be more apt than little tidbits from me
04:53 < cliffano> bradleymeck: here's the workaround that i put in npm https://github.com/isaacs/npm/pull/3202 , i have to pass the authentication to fetch URLs
04:54 < bradleymeck> cliffano: use --always-auth true when working with a locked down registry
04:54 < bradleymeck> so that it always sends auth
04:54 < cliffano> bradleymeck: yup, i do that... but the problem is, the auth is lost in fetch URL
04:55 < bradleymeck> that and be sure your couchdb users on the private registry is setup
04:55 < cliffano> bradleymeck: your hint on validate_doc_update is related to the registry user i believe... the problem i'm facing is with overall couch admin user
04:56 < cliffano> bradleymeck: i have the couchdb user setup properly, i can publish etc just fine with that patch #3202
04:56 < bradleymeck> im unsure what you are trying to do cause we have multiple priv registries that just use a named replication and --always-auth + locked down config
04:57 < CPartridge> duko: perhaps refactor the parameter names, e.g. --input=/in --output=/out --timestamp --compress --concat
04:58 < cliffano> bradleymeck: if i visit http://isaacs.iriscouch.com/_utils/ i don't have to provide admin auth... my private registry immediately prompts for auth ... so i was wondering if there's specific admin setting on isaacs.iriscouch.org that's different to my admin setting
05:01 < bradleymeck> cliffano: http://wiki.apache.org/couchdb/Security_Features_Overview require_valid_user
05:02 < bradleymeck> for priv repos I would generally not turn that off, but now you know
05:03 < cliffano> bradleymeck: thanks, i think that is it... my couch.ini has that set to true
05:04 < cliffano> bradleymeck: in that case, what's a good way for npm to support couch which require_valid_user is set to true? do you think this change is not the right way to go? https://github.com/cliffano/npm/commit/8f290572845b6eb33ce2e3129dc3f3e012134acb
05:05 < bradleymeck> nope, i am more interested in why `npm pack` step fails with --always-auth true
05:06 < someprimetime> I'm trying to make my code async with callbacks but I'm stuck on a certain point
05:06 < Voting> bradleymeck: Hmmm... so, say that function 1 might compute some some values that might be used by function 2 and 3 and function 5 also... is it going to work to use, say, have these vars be defined in an outer scope and set and used by functions in the waterfall? 
05:06 < someprimetime> Would someone mind checking out my fiddle?
05:06 < cliffano> bradleymeck: even npm install xyz fails with 401 when require_valid_user is true... so there must be a way to pass couchdb admin auth
05:07 < bradleymeck> Voting: you could use outer scope closure sure, but most fns in async have a results object so you dont need to save em generally
05:09 < bradleymeck> cliffano: w/e the npm user on your priv registry it needs read access on the db, if admin != npm user and npm user is not on the priv couch or does not have read privileges you should not be giving access to stuff
05:09 < bradleymeck> well, couchdb should not
05:10 < one> how do i download the modules
05:11 < one> how do i download the modules
05:11 < bradleymeck> `npm pack modulename` if you want a tarball, `npm i` to install
05:11 < bradleymeck> `npm i modulename`*
05:11 < one> nero product managment
05:11 < one> where is rhyan
05:11 < cliffano> bradleymeck: ok. that makes sense. i'll close the pull request with the explanation that non-npm couch admin should not be set in npm specific setting... btw, yep in my case admin != npm user... thanks for the feedback :)
05:12 < bradleymeck> one: those are words
05:12 < one> let me talk to rhyan
05:12 < bradleymeck> which rhyan
05:13 < one> the one that made this
05:13 < bradleymeck> hes not in here
05:13 < one> where is he
05:13 < bradleymeck> asleep
05:14 < Voting> bradleymeck:   results object? Not finding that... 
05:14 < one> where does he sleep?
05:14 < bradleymeck> one: in his bed? what do you want
05:15 < bradleymeck> Voting: https://github.com/caolan/async#series , see function(err, results) in the example
05:15 < one> i want to end it
05:15 < bradleymeck> creepy
05:16 < Voting> bradleymeck: I've been looking at https://github.com/caolan/async#waterfall - is that the wrong stuff?
05:16 < one> the crypto
05:16 < one> i hate the crypto
05:16 < bradleymeck> Voting: waterfall is for passing by arguments its fine, just doesn't have a results obj since results are passed by args
05:17 < bradleymeck> one, open an issue on github
05:17 < one> what should i issue
05:18 < bradleymeck> the complaints about crypto
05:23 < one> bradleymeck: why do you want everything to go to github
05:23 < bradleymeck> paper trail, time differences, centralized place for project work, etc.
05:49 -!- mode/#Node.js [+o xyxne] by ChanServ
05:49 < bradleymeck> Domenic_: yep a flame war is coming
05:50 < Domenic_> bradleymeck: we'll see.
05:50 < bradleymeck> hopefully we can agree to at least getting a commonjs npm module set
05:50 < Domenic_> Not that much more than the usual mailing list kerfluffle I'd imagine. Ended with a few paragraphs by Isaacs.
05:50 < bradleymeck> cause you can reimpl it all in user space
05:50 < ningu> bradleymeck: flamewar to do with what?
05:50 < bradleymeck> commonjs issue
05:52 < ningu> bradleymeck: what's the threa?
05:52 < ningu> d
05:52 < bradleymeck> https://github.com/joyent/node/issues/5132
05:52 < st_luke> uhm
05:53 < s3shs-> But what about 5131? ;-)
05:53 < Voting> bradleymeck: so, to install async I just type npm async ? 
05:53 < st_luke> this is a dumb argument
05:54 < s3shs-> 'npm install async'
05:54 < s3shs-> (That was for Voting.)
05:54 < Voting> s3shs-: tx!!!
05:55 < s3shs-> Voting, Read through the async examples thoroughly.  The paradigm may be very different from what you're used to.  Good luck!
05:55 < bradleymeck> s3shs-: no idea, but i am very interested in the crazy domains stuff
05:55 < s3shs-> https://github.com/joyent/node/issues/5131
05:56 < s3shs-> Bug is confirmed on in 0.10.1 on another machine.
05:56 < s3shs-> Something about the debugger.
05:56 < s3shs-> Given how much my own app was leaning on async, it was hard for me to narrow down the problem.
05:56 < st_luke> Domenic_: i bet that thread dies quickly, people care way less about commonjs than they do about stuff like semicolons
05:57 < ningu> what about semi-caolans?
05:57 < ChrisPartridge> hah
05:57 < s3shs-> st_luke, I, for one, have a number of modules that run both server and client side.  It would be sad if things digressed enough to kill that.
05:58 < s3shs-> digressed->diverged.
05:58 < ningu> s3shs-: well, there are things like browserify...
05:58 < ningu> it's a problem that can be solved multiple ways and it hasn't really settled down yet
05:58 < st_luke> s3shs-: http://nodejs.org/docs/latest/api/modules.html
05:58 < st_luke> locked
05:59 < s3shs-> Others have written similar modules, ningu.  For now most of my work are global utilities.
05:59 < st_luke> oh nice, my api stability colors are finally in the docs
05:59 < s3shs-> :-)
05:59 < s3shs-> Yeah, I've seen the require paradigm implemented for users in Ember.js.
06:00 < s3shs-> Shouldn't 5 be green as in "good to go"?
06:00 < st_luke> so pretty - http://nodejs.org/docs/latest/api/documentation.html
06:00 < st_luke> s3shs-: no
06:00 < s3shs-> What are those, homeland security colors?  Just kidding.  Colors are good.
06:00 < st_luke> http://www.nealacarter.com/cms/images/color_chart-enagic-4.jpg
06:01 < s3shs-> Are you a pool guy by day?
06:01 < ningu> in general I've found the node docs to be quite good. every once in a while slightly lacking in detail
06:01 < st_luke> s3shs-: idk
06:01 < ningu> transparency about experimental status is unusual in docs in my experience
06:01 < s3shs-> I was kidding.  Thank you for your efforts.
06:02 < s3shs-> ningu, the domain docs need to be twice as long.
06:02 < ningu> the whole scale from experimental to frozen I mean
06:02 < ningu> s3shs-: that's probably true. I haven't used domains yet.
06:02 < ningu> and not cause of the docs -- I just haven't looked.
06:02 < s3shs-> They'll be great.
06:02 < ningu> the docs, or domains?
06:04 < s3shs-> domains need better docs.
06:09 < ChrisPartridge> I wish the docs had a "This page in other versions" option like the postgre docs for example
06:40 <@mbalho> you just change the url
06:47 < ChrisPartridge> mbalho: i'm lazy :)
06:56 < someprimetime> anyone bored and want to look @ some of my code to help me figure out how to fire my callback at the right time so my app stops hanging? 
06:58 < ningu> I fired all of my callbacks, saves overhead that I don't have to pay them now
07:03 < someprimetime> huh?
07:03 < someprimetime> what you mean?
07:03 < ChrisPartridge> someprimetime: paste the code
07:03 < ChrisPartridge> not in here
07:03 < ChrisPartridge> gist/pastebin
07:04 < someprimetime> ChrisPartridge: https://gist.github.com/pruhstal/5235370
07:04 < someprimetime> if you look @ the very bottom i've commented my issue
07:04 < someprimetime> essentially it's trying to call addView() because the submission hasn't been viewed yet, but that actual operation takes too long, so the execution context continues past it
07:05 < someprimetime> https://gist.github.com/pruhstal/5235375 javascript syntax although that didn't really do much
07:07 < ChrisPartridge> are you sure it's not hanging because you aren't doing anything in addView callback?
07:08 < ningu> also, you shouldn't do anything in the "hangs here" part
07:08 < ningu> I don't know if your actual code has anything there but you don't want to return from the request yet by calling res.render() or whatever
07:08 < ningu> you want to do that when addView returns
07:09 < ningu> as for why/if addView is coming back I have no idea from what I can see here
07:09 < ChrisPartridge> someprimetime: is this an express project?
07:09 < someprimetime> ChrisPartridge: it is
07:09 < ChrisPartridge> someprimetime: i'd suggest breaking this stuff out into middleware, and attaching things to req so its available "down stream" so to speak
07:11 < someprimetime> ChrisPartridge: it references Submission which is my Submission model
07:11 < someprimetime> https://gist.github.com/pruhstal/5235393
07:11 < someprimetime> those are the methods the controller calls
07:11 < someprimetime> within those function expressions
07:12 < someprimetime> addView definitely is saving an entry
07:12 < someprimetime> but it doesn't ever return to my caller
07:12 < ChrisPartridge> someprimetime: so essentially, if someone visits a "submission", and their IP hasn't been 
07:13 < ChrisPartridge> tracked as a view, you add a view, then you want to continue rendering the submission?
07:13 < ChrisPartridge> right?
07:13 < someprimetime> ChrisPartridge: correct
07:13 < ChrisPartridge> someprimetime: as I said before, this is a prime example of what you should be breaking out into middleware
07:13 < someprimetime> ChrisPartridge: got an intro/tutorial?
07:13 < someprimetime> i'm a n00b at all this
07:13 < someprimetime> async is owning me right now
07:18 < ChrisPartridge> someprimetime: function(req, res, next) { Submission.trackView(req.ip, next); } for example - where trackView takes care of checking and adding the submission, it then fires a callback to "next" - which if passed an error, will go to your error handler, otherwise it will go down the callstack to your route
07:18 < ChrisPartridge> you can add middleware into your app chain (so it happens on all), or even per route - e.g. app.get('/submission/:id', trackViewsMiddleware, function(req,res) {});
07:19 < someprimetime> ChrisPartridge: ah interesting this is going to take some getting used to
07:19 < someprimetime> thanks i'll look into middleware more
07:20 < ChrisPartridge> someprimetime: yeah, i just did a google search - not many very informative guides on structuring larger express apps
07:20 < ChrisPartridge> maybe i can show an example from an app here, two secs
07:20 < someprimetime> ah ok thanks
07:25 < angelazou> hi, I'm getting this message for every module I'm trying to install
07:26 < ChrisPartridge> someprimetime: https://gist.github.com/cjpartridgeb/5235434
07:26 < angelazou> ws@0.4.25 install ...PATH (node-gyp rebuild 2> builderror.log) || (exit 0)
07:26 < ningu> someprimetime: once you understand how express works it becomes pretty clear usually how to structure the app
07:26 < angelazou> I'm running npm version 1.1.4
07:26 < ningu> too bad there aren't more examples
07:27 < someprimetime> ChrisPartridge: thanks
07:27 < ChrisPartridge> ningu: yeah, thinking about writing an article up
07:27 < angelazou> and 0.6.19 node
07:27 < ChrisPartridge> someprimetime: understand how that works?
07:27 < someprimetime> ningu: yeah most stuff i find isn't about express 3 either
07:28 < ningu> ChrisPartridge: I've also found chains of actions useful in routes -- sometimes I do things like var fooChain = [a,b,c]; app.get('/blah', fooChain, someRoute);
07:28 < ningu> since I want to reuse that logic for a few routes
07:28 < ChrisPartridge> ningu: yeah, i included an example of that in my gist 
07:28 < ningu> well, that was just for a single middleware but same idea
07:28 < ChrisPartridge> yeah, its just a big stack in the end
07:29 < someprimetime> ChrisPartridge: so you say // mw.authorizePrincipal and then in your route you pass mw.authorizePrincipal in.. but where is that function actually defined?
07:29 < someprimetime> did you leave something out?
07:29 < ChrisPartridge> someprimetime: its defined in a seperate file, inside a middleware folder - the function just exports itself
07:29 < ningu> I also use middleware constructors, like var auth = require('./auth'); and then auth.min(2) means "deny if user has level less than 2" (you could use something more sensible than numbers obviously)
07:29 < ningu> where auth.min(2) constructs a middleware function
07:29 < ChrisPartridge> ningu: yeah, currying
07:30 < ningu> yes :)
07:30 < ChrisPartridge> this is my I love express
07:30 < ChrisPartridge> my routes are lean as
07:30 < someprimetime> chicken
07:30 < someprimetime> man i feel so noobish now
07:30 < someprimetime> time to learn more stuff
07:30 < ChrisPartridge> someprimetime: If i wasn't being paid to write this code, I'd OS the whole lot :P
07:30 < someprimetime> OS?
07:31 < ChrisPartridge> open source
07:31 < someprimetime> ah hah that'd be useful 
07:31 < ningu> someprimetime: basically it's just a question of what level of generality you want to use bits of code at -- the whole app, various routes in arbitrary places in your app, etc.
07:31 < someprimetime> ningu: i feel like for the most part my app is clean. i separated out my routes into one file, i've got my models in a folder and controllers in another folder
07:31 < someprimetime> it all works nicely, but i'm running into issues with making calls to my db with mongoose
07:31 < ningu> your routes are not your controllers?
07:32 < someprimetime> ningu: no they are separated into their own file
07:32 < someprimetime> routes.js
07:32 < ningu> ah ok
07:32 < chakrit> npm slow?
07:32 < ningu> I tend to define my routes and controllers together
07:32 < chakrit> or just my internet?
07:32 < ningu> like, all the controllers + routes for /foo in foo.js
07:32 < someprimetime> ningu: https://gist.github.com/pruhstal/5235455
07:32 < someprimetime> they look like that
07:33 < ningu> that works too, I've seen other apps that do it that way
07:33 < ningu> for me it works better to keep the routes and controllers in one file since I typically change both at once
07:34 < someprimetime> ah yeah i think if i use ChrisPartridge's suggestion of middleware it'd make sense to od it like that
07:34 < someprimetime> s/od/do although sometimes i feel like od'ing with this stuff
07:36 < ningu> someprimetime: anyway in principle this is all separate from your callback issue
07:36 < ChrisPartridge> someprimetime: another thing you can do, is in your "addView" middleware, fire the code to save the 'view', but call next() immediately, that way the user gets served ASAP, and then you can capture/log errors in the save callback if something went wrong 
07:36 < ningu> it's just that cleaner design helps you see what's going on more easily
07:37 < someprimetime> ChrisPartridge: interesting i'll try that
07:40 < ChrisPartridge> im out - catchas later
07:50 < angelazou> hi, how do I update node on ubuntu?
07:51 < angelazou> I add the universe components and when I try install, it tells me that that it's already installed
07:51 < angelazou> in addition, if I do apt-get upgrade, I don't see nodejs in there
07:51 < angelazou> i'm using nodejs 0.6.19 and npm 1.1.14
07:53 < nathan7> angelazou: Use the PPA
07:53 < nathan7> angelazou: 0.6 is distant past
07:53 < angelazou> I added ppa already
07:53 < angelazou> but install won't allow me to install nodejs
07:53 < nathan7> angelazou: https://launchpad.net/~chris-lea/+archive/node.js/
07:54 < nathan7> angelazou: you did an apt-get update?
07:54 < angelazou> yes
07:54 < ink_> ah
07:54 < ink_> life
07:54 < ink_> anybody around?
07:58 < nathan7> ink_: Yes
07:58 < nathan7> ink_: Plenty of people around
07:58 < nathan7> ink_: But maybe you have a more interesting question
07:58 < triptec_> I'm trying to install on a ubuntu 12.10, and got some error so I tried to update npm and it seemed to work but npm just returns no error no nothing
07:58 < ink_> klkl
07:58 < triptec_> 1.2.15
07:59 < ink_> ive been pure python for a while now
07:59 < ink_> something about it brings out the snob in people, and you get addicted to the syntax, ANYWAY
07:59 < nathan7> triptec_: worst-case, get rid of npm stuff and apt-get install --reinstall nodejs
07:59 < nathan7> ink_: I came from python
08:00 < nathan7> I find myself hating it more every time I use it
08:00 < ink_> as i busily monkey patched some thread code
08:00 < nathan7> I carefully format my code, every formatting choice is one consciously made
08:00 < ink_> so it would play nice with the way my task queue handled subprocesses
08:01 < angelazou> woo...finally got nodejs installed
08:01 < ink_> before going back to the message queue stuff
08:01 < angelazou> but now npm is not coorperating
08:01 < nathan7> Python is fairly prescriptivist, it's useful but not as fun and sometimes rather inefficient
08:01 < ink_> it dawned on me
08:01 < angelazou> with a ton of node-x package but it is not going to be installed
08:01 < angelazou> what does that mean?
08:02 < ink_> that as lovely as python is, and as much as i agree whole heartedly with the pythonic mode of thinking
08:02 < ink_> doing more than one thing at a time
08:03 < nathan7> Doing more than one thing at a time?
08:03 < ink_> should not require a PHD, 2 daemons, and software based on architectures designed for finding primes or forcasting the weather
08:03 < nathan7> As in the GIL? Or as in the giant standard library?
08:03 < angelazou> that'd be joke for python
08:04 < ink_> see i love python
08:04 < angelazou> it can't even do if(true) print("hello");
08:04 < angelazou> but other than that, I like python
08:04 < nathan7> if True: print "hello"
08:04 < nathan7> or in Python3, if True: print("hello")
08:04 < ink_> but there's touch of fail where package managements is concerned
08:04 < nathan7> Yeah, that's a pretty giant fail
08:05 < nathan7> node isn't highly revolutionary
08:05 < nathan7> npm is.
08:05 < angelazou> how is npm different from PEAR
08:05 < ink_> naming schemes etc, prolific numbers modules failing to do the same thing badly
08:05 < ink_> the letters
08:05 < ink_> also npm has more green
08:06 < nathan7> angelazou: does PEAR have localised deps?
08:06 < angelazou> ehh...nope I don't think so
08:06 < nathan7> angelazou: with npm, I can have module A depend on C1.0
08:06 < nathan7> angelazou: and module B on C2.0
08:06 < nathan7> angelazou: and they don't need to care about each other - after all, they are independent modules
08:06 < ink_> so yah finally decided to do what ive been meaning to for a while and have a play with one of the 6000 languages that the internet makes me feel vaguely uncool for not using
08:06 < angelazou> different version dependency?
08:07 < nathan7> angelazou: with Ruby Gems, Python's PIP, etc
08:07 < nathan7> angelazou: you have system-wide deps
08:07 < ink_> the little ive used it npm seems to do things really rather nicely
08:07 < ink_> yep
08:07 < ink_> global/local
08:07 < ink_> ive not looked @ how this is handled in any detail]
08:07 < nathan7> angelazou: and there are various scripts to have separate systems so you can run multiple apps
08:07 < ink_> which usually means, its working nice
08:07 < nathan7> ink_: if you require('x')
08:08 < nathan7> ink_: node looks in node_modules/x, ../node_modules/x, etc
08:08 < nathan7> ink_: until it finds it
08:08 < ink_> yah i know
08:08 < nathan7> ink_: npm just installs the deps of a module in its node_modules
08:08 < ink_> relax
08:08 < ink_> what i mean is
08:08 < nathan7> there's nothing magical beyond that, really
08:08 < angelazou> so, ehm...requirejs integrated into npm
08:08 < nathan7> ?
08:09 < ink_> python - pip is ok, but it's a frontend to a mishmash of optional, non-standard setupy type helper frameworks
08:09 < ink_> virtualenv, which could be so fucking simple
08:09 < nathan7> virtualenv is a solution to a problem that needn't exist
08:09 < ink_> i disagree
08:09 < ink_> uhhhh
08:09 < ink_> well, having said thaty
08:09 < nathan7> but everyone is too hopelessly invested in the problem
08:10 < nathan7> it's too late to solve it
08:10 < ink_> haha
08:10 < ink_> i wouldn't say invested
08:10 < nathan7> node was a blank slate, and we did a bunch of things really right
08:10 < ink_> yes
08:10 < ink_> you did
08:10 < AAA_awright> Different version dependencies should be considered a bad thing
08:10 < nathan7> ink_: Imagine converting all of the Cheese Shop to work properly with a new dep system
08:10 < ink_> and while tbh
08:10 < nathan7> AAA_awright: Why?
08:10 < ink_> JS has always made me a sad panda
08:10 < ink_> cos it's dead awesome
08:11 < AAA_awright> You have the same library, with different ways of handling data, running in the same process?
08:11 < ink_> and people do really pointless sexy things with it
08:11 < AAA_awright> That doesn't raise any flags?
08:11 < nathan7> AAA_awright: I want to traverse an object
08:11 < nathan7> AAA_awright: I grab the traverse lib from npm
08:11 < nathan7> AAA_awright: I depend on it
08:11 < ink_> and the lang aint bad, little chewy in places
08:11 < nathan7> AAA_awright: The author changes the API
08:11 < ink_> but generally ok
08:11 < nathan7> AAA_awright: There's now a 2.0
08:11 < ink_> yet TRY AS I MIGHT
08:11 < nathan7> AAA_awright: Someone builds another module
08:11 < nathan7> AAA_awright: and depends on 2.0
08:11 < ink_> i never found a sane way 
08:11 < AAA_awright> It also breaks the object model... It could be the case that getConnection() is not an instanceof require('database').Connection
08:12 < nathan7> AAA_awright: should I change all my modules to use 2.0 just because the API changed
08:12 < ink_> of organizing bigger projects
08:12 < ink_> web ones
08:12 < ink_> now im aware there are now some pretty clean libs
08:12 < ink_> that make this a LOT easier
08:12 < AAA_awright> nathan7: Uh what/
08:12 < AAA_awright> nathan7: Fact is
08:12 < ink_> funnily enough
08:12 < AAA_awright> nathan7: It breaks
08:12 < nathan7> AAA_awright: It breaks how?
08:12 < ink_> most of em seem to have come out of node ;)
08:12 < AAA_awright> nathan7: The ECMAScript object model
08:12 < nathan7> AAA_awright: Pick an OO language and go complain about it
08:13 < nathan7> AAA_awright: The object model works fine, it just breaks classical inheritance in the way you care about
08:13 < AAA_awright> Imagine if it were not the case that
08:13 < AAA_awright> >> [] instanceof Array
08:13 < nathan7> AAA_awright: and this is a clear case for peerDependencies
08:13 < purr> AAA_awright: (boolean) true
08:13 < AAA_awright> But that's what multiple versions do to your objects
08:13 < ink_> meh
08:13 < ink_> it was specced out in a night
08:13 < ink_> on the back of a fag packet
08:13 < nathan7> AAA_awright: since you're not just using the lib
08:13 < nathan7> AAA_awright: you're exposing the lib
08:13 < AAA_awright> It's actually possible, in ECMAScript, for ([] instanceof Array) === false
08:13 < ink_> by  bloke @ Netscape in the mid 90s with bad breath and not enough sleep
08:14 < nathan7> AAA_awright: If I have library A, exposing library B
08:14 < nathan7> AAA_awright: Then my app doesn't just depend on library A
08:14 < nathan7> AAA_awright: because changes in library B would break my app
08:14 < nathan7> AAA_awright: therefore my app depends on A and B
08:14 < nathan7> AAA_awright: and A should have a peerDependency
08:14 < AAA_awright> nathan7: You don't need to ping me on literally every line, once every minute or so is good enough
08:16 < AAA_awright> Anyways there's lots of reasons I refuse to use npm, that's like #5 on my list
08:16 < AAA_awright> You don't get any guarentees of anything
08:17 < ink_> and thats cool
08:17 < ink_> the closer you get to live services
08:18 < nathan7> AAA_awright: Feel free not to use it
08:18 < ink_> and people who enjoy mathematics and think documentation is the single most important thing on the plant
08:18 < AAA_awright> Well not for people who actually try to build their software the correct way... We have this fantastic shiny new dependency system that runs circles around everyone else, but then a package manager built for COBOL, what the hell crap is this
08:18 < nathan7> JS will rarely make you happy if you wish for classical OO
08:18 < ink_> the more you see package management stuff like this shunned
08:19 < ink_> no
08:19 < ink_> but frankly
08:19 < ink_> if you 
08:19 < AAA_awright> nathan7: ECMAScript doesn't do OO
08:19 < nathan7> Exactly.
08:19 < ink_> get your lisp t-shirt on
08:19 < AAA_awright> It uses prototypes, big difference
08:19 < AAA_awright> Well then why bring up OO
08:19 < ink_> start talking in an excited voice about prototyping
08:20 < nathan7> You're complaining that we're "breaking" the object model
08:20 < ink_> it still wont make oraganizing a biggish web project any easier
08:20 < AAA_awright> Yes, it breaks the object model. Literally everything in ES is an Object
08:20 < AAA_awright> Heck, Functions are Objects
08:20 < ink_> how does that break the object model?
08:20 < nathan7> but you have two clearly non-independent modules and you complain when they turn out to be dependent
08:20 < AAA_awright> >> function(){} instanceof Object
08:20 < purr> AAA_awright: SyntaxError: Unexpected token (
08:21 < ink_> where is this object modal spec anyways
08:21 < nathan7> >> (function(){}) instanceof Object
08:21 < purr> nathan7: (boolean) true
08:21 < AAA_awright> >> (function(){} instanceof Object)
08:21 < purr> AAA_awright: (boolean) true
08:22 < AAA_awright> ink_: It breaks the object model when you get Arrays that aren't really Arrays, or Objects that aren't really Objects
08:22 < ink_> but they are arent they
08:22 < AAA_awright> If you try to catch an Exception... except it's an instance of a different Exception, so you never catch it
08:22 < ink_> what
08:22 < ink_> sorry sorry 
08:22 < ink_> i need to go to work
08:23 < ink_> but run that past me again
08:23 < ink_> and imo
08:23 < nathan7> ink_: ES spec, http://ecmascript.org/
08:23 < AAA_awright> hm?
08:23 < ink_> JS isn't suited to exceptions
08:23 < ink_> they dont fit so neatly into async code
08:23 < nathan7> sure they do
08:24 < nathan7> when you pass an err, for fuck's sake do new Error()
08:24 < AAA_awright> I should say, Error
08:24 < nathan7> >> Object.create(null) instanceof Object
08:24 < purr> nathan7: (boolean) false
08:24 < AAA_awright> ink_: Yeah, you should be using e.g. return void callback(new Error('blah'));
08:25 < nathan7> +1 on return void
08:25 < AAA_awright> nathan7: Aha, there is someone who has heard of that
08:25 < AAA_awright> I came up with that pattern in a stroke of brilliance a week ago and no one had heard of it
08:26 < ink_> lol
08:26 < ink_> i gtg 2 work
08:26 < ink_> you lot are funny
08:26 < ink_> tbh
08:26 < ink_> you're all idiots
08:26 < ink_> should have done it in C
08:26 < ink_> or ASM
08:26 < ink_> that way it'd be way faster
08:26 < AAA_awright> :>
08:27 < ink_> oh
08:27 < ink_> and just b4 i go get dressed
08:27 < ink_> Google Go
08:27 < ink_> what a bitter bitter disappointment
08:28 < ink_> on paper
08:28 < ink_> it looks fucking snazzy as fuck
08:29 < ningu> well they couldn't call it Google Stop now could they
08:29 < ink_> when u read about the syntax you think
08:29 < ink_> "meh, can't really take issue with that"
08:29 < ink_> the channels stuff
08:29 < ink_> bit different
08:30 < ink_> but really makes sense imo when you're juggling concurrent stuff
08:30 < ink_> just going back to the exception thing
08:30 < ink_> on paper, dead good
08:31 < ink_> tick all me boxes
08:31 < AAA_awright> And One More Rant: TABS TO INDENT, SPACES TO ALIGN, NOT THAT HARD PEOPLE
08:31 < ink_> i even get a little giddy thrill
08:31 < ink_> everytime i type except
08:31 < ink_> but of the HLL langs around atm
08:32 < ink_> Python and Ruby are often praised for going the exception route
08:32 < ink_> fits in nicely with the languages
08:33 < ink_> but damnit
08:33 < ink_> out to the real world it goes
08:38 -!- mode/#Node.js [+o xyxne] by ChanServ
08:43 < sshaginyan_> What's the difference between hasownprperty and in
08:43 < ink_> and few people/projects ACTUALLY use exceptions properly
08:43 < ink_> and even the ones who ok, aren't using try...except:pass
08:43 < ink_> like a closure
08:43 < ink_> "look ma no problems!"
08:43 < ink_> they'll patch up the bits they see break, pretty retroactively
08:43 < ink_> but it's not what could be considered really robust code
08:43 -!- mode/#Node.js [+o xyxne] by ChanServ
08:50 < one> ignore
08:59 < one> glip
08:59 < BombStrike> anyone here had to deal with load balancing socket.io instances?
09:00 < BombStrike> got a bit of an issue with xhr-polling
09:01 < one> BombStrike: what is the issue
09:01 < [AD]Turbo> hola
09:02 < BombStrike> well we use Amazon ELB, and we have no way to make it so that a specific user will always hit the same server
09:02 < one> BombStrike: use a workaround
09:04 < one> where is murderer_killah ?
09:06 < bigkevmcd> BombStrike: https://groups.google.com/d/msg/nodejs/202v7KPVG7s/eEK6RsWBCkoJ
09:06 < one> where is murderer_killah ?
09:07 < one> I can feeeeeeeeeeeeeeeeeell it coming in the air tonight
09:07 < one> cold cold air
09:07 < one> Ive ben waiting for this moment all my liiiiiiiiiiiiiiiife
09:07 < AAA_awright> >> (function(){})+1
09:07 < purr> AAA_awright: (string) 'function (){}1'
09:08 < AAA_awright> Huh
09:08 < one> cold front coming in
09:08 < one> I can feeeeeeeeeeell it coming in the air tonight
09:10 < one> how is the wheather?
09:11 < one> how is the wheather?
09:30 < marcules> hi there
09:30 < ink_> eze na
09:34 < marcules> How would I reference an Array of Schemata in mongoose? I mean SchemaB: { user: [SchemaA] } does embedd SchemaA but not reference it like SchemaB: { user: { type: Schema.ObjectId, ref: 'SchemaA' }}
09:43 < shmoon> when i do new Date() what timezone is considered? and  can it be changed?
09:46 < nathan7> shmoon: none at all
09:47 < nathan7> shmoon: there's setHours, there's setUTCHours
09:47 < nathan7> shmoon: etc
09:47 < shmoon> so what timezone does nodejs considers?
09:47 < shmoon> it cant be none at all has to be soemthing
09:48 < nathan7> shmoon: UTC and local time.
09:49 < shmoon> on my dev box it considers my timezone while on server which is in US it considers UTC so i am confused
09:49 < nathan7> servers tend to be set to UTC
09:49 < nathan7> run 'date', see what it says
09:49 < shmoon> how can that be changed?
09:50 < shmoon> yes it is UTC
09:50 < nathan7> /etc/localtime afaik
09:50 < shmoon> so it takes server's timezone
09:50 < nathan7>  ~ ⮀ ls -l /etc/localtime 
09:50 < nathan7> lrwxrwxrwx 1 root root 36 Feb 24 18:50 /etc/localtime -> /usr/share/zoneinfo/Europe/Amsterdam
09:51 < shmoon> for me its not a symlink
09:51 < shmoon> just a file wit some weird binary data
10:14 < petrol91> Hi, I'm trying to start with Node.js and websockets, but i have a problem. I've created "websocket-node" server ( http://pastie.org/private/qdmublgxxcyrwzno06ata ), but it wont work, cause of:Sec-WebSocket-Accept header from server didn't match expected value of. I would be gratefull if you tell me what could be wrong.
10:22 < icebox> petrol91: it seems to me it is an http server
10:24 < petrol91> icebox: are you sure?
10:24 < icebox> petrol91, there is an example at module homepage: https://github.com/Worlize/WebSocket-Node
10:25 < petrol91> icebox: there is also documentation, which allows me to catch upgrade event, and create websocketrequest at my own.
10:25 < petrol91> but I've screwed something
10:30 < petrol91> Sec-WebSocket-Accept header from server didn't match expected value of TyJRwCmA3AwWE0+Wz3t2BcmywVA= Sec-WebSocket-Accept: gH2cR3x4MfGXKljgIwL3fMYv0sY=
10:31 < petrol91> server always send same: gH2cR3x4MfGXKljgIwL3fMYv0sY= header
10:34 < ink_> where did u get this code?
10:34 < ink_> ur best bet
10:34 < ink_> is c+p example from the lib 
10:35 < ink_> and adapting it at a walking pace
10:37 < icebox> petrol91: the doc says: the constructor (WebSocketRequest) will immediately parse and validate the handshake from the client and will throw an error if the handshake from the client is invalid or if an error is encountered, so it must always be wrapped in a try/catch block.
10:38 < icebox> petrol91, the relevant part is "try/catch block"
10:40 < petrol91> icebox: nope.
10:40 < petrol91> there is porblem with this constructor whih didnt do his work properly
10:40 < d2dchat> Is there a good library out there for help with object bulk object conversions? I know it sounds generic but
10:40 < d2dchat> it would be cool :)
10:40 < ink_> how do u mean?
10:41 < d2dchat> ink_: one example might be a function that could detect unique objects within an array
10:41 < icebox> petrol91: well... a reason to use a try/catch :)
10:41 < icebox> d2dchat: lodash
10:42 < d2dchat> icebox: interesting
10:42 < ink_> https://github.com/Worlize/WebSocket-Node/wiki/Documentation#websocketrequest
10:43 < ink_> seems to suggest that the only time you should be creaing these yourself 
10:44 < ink_> is when you're doing something custom enough that it's not something their lib handles
10:45 < d2dchat> icebox: which function in lo dash were you referring to that has this functionality?
10:46 < icebox> d2dchat: http://lodash.com/docs#uniq
10:51 < petrol91> funny thing, something must be wrong with this Constructor.
10:51 < petrol91> it works when i've do it with WebSocketServer
10:53 < ink_> fancy that
10:53 < ink_> what were you aiming to do?
10:55 < ink_> hehe, this wont be a popular question ;)
10:55 < ink_> but nm eh
10:55 < ink_> last time i was workign with JS
10:56 < ink_> i got all trendy
10:56 < ink_> and did the thing out in CoffeeScript
10:56 < ink_> on the grounds that they were doing the right thing
10:57 < ink_> and trying to make everything use python syntax
10:57 < ink_> sure, they fucked it up
10:57 < ink_> but they tried
11:01 < petrol91> There is error in domumentation
11:01 < petrol91> Request constructor do nothing
11:02 < ink_> documentation is unhealthy anyway
11:02 < ink_> also everythnig should be written in C/"shellcode"
11:16 < petrol91> thx for help. It works now
11:19 < s0urce> hi
11:20 < s0urce> does any1 got a hint for me, how to get a basic auth window working with http.createServer?
11:58 < ink_> s0urce: at a glance
11:58 < ink_> there are a number of librarys
11:58 < ink_> that do what you want
11:58 < ink_> alternatively
11:58 < ink_> do it yourself
11:59 < one> My iobalancer is off
11:59 < ink_> turn it back on.
11:59 < one> how to turn it back on?
12:00 < ink_> what is it?
12:00 < s0urce> ink_: i wanted to do it my self, and i found a solution now, just was not sure, how to get browser to ask for
12:00 < one> iobalancer
12:00 < ink_> oh sorry misunderstood
12:01 < one> i dont think it will turn on maybe its broke
12:01 < ink_> ok god it solved tho ok
12:01 < ink_> good*
12:01 < one> just let it all issue out
12:05 < one> speed it up
12:08 < ink_> ooooo
12:09 < one> drugs are bad
12:10 < one> they put them in the water
12:10 < one> floride etc
12:10 < one> its all crypto
12:11 < one> drugs
12:11 < ink_> what u need is Tor mate
12:11 < ink_> and drugs obv
12:11 < one> no ubuntu package
12:11 < one> i dont like crypto
12:11 < ink_> all my communication is done through a third party
12:11 < ink_> you know when you fill out a captcha?
12:12 < Ax_SeS> ... so... i dunno why i used node for this.
12:12 < one> freenode is a third party
12:12 < ink_> freenode is a bad party.
12:12 < ink_> totally unsecure
12:12 < Ax_SeS> But i made a GPA calculator
12:12 < one> captcha gets read on brainscans
12:12 < ink_> not with 7 pass wipe
12:12 < ink_> using organic, fair trade random numbers
12:12 < ink_> you type in a captcha
12:12 < ink_> bam
12:12 < ink_> you dont know it
12:13 < one> dont know what
12:13 < ink_> but you just resolved a domain for nme
12:13 < ink_> NEXT packet goin out
12:14 < one> ink_: resolved a domain for you?
12:15 < ink_> i pwn'd your microwave boss
12:16 < ink_> i proxy my shit out thru ur kithen appliances
12:16 < one> i dont have anything that cn do that
12:16 < s0urce> only got one prob, after one time sending header code 403 for wrong auth, i have no way to refresh and try it again
12:17 < ink_> you said you're doing this to learn
12:18 < ink_> that it's a contrived problem
12:18 < ink_> imo, pick a slightly different exercise
12:18 < ink_> personally, fuckin about with HTTP auth and building bare bones servers
12:19 < ink_> i'd find a pain in the arse
12:19 < one> what u need to do is compile from scratch
12:19 < ink_> lol u mug
12:20 < ink_> i'm compiling you now
12:20 < ink_> in the nick of time
12:21 < one> JUDGMENT day is coming soon
12:21 < one> and you will find out most of the wemon have been cracked
12:21 < one> they are like a nasty dud in a womans body
12:22 < one> u been sleeping with the devil
12:22 < ink_> you say these things to me
12:22 < ink_> but you have become everything you hate
12:23 < one> no im not the devil
12:23 < one> and im not gay
12:23 < ink_> Now i am become death, the destroyer of worlds.
12:23 < Sven_vB> s0urce, what do you mean by refreshing? do you want the browser to retry after a wron auth?
12:23 < ink_> get your shit together son
12:23 < ink_> you wouldn't see a bee
12:24 < ink_> slippin
12:24 < ink_> like you are
12:24 < s0urce> Sven_vB: i wanna show: "access denied" or "forbidden" or something like this after entered wrong code, but give a chance to try again after "f5" page
12:24 < ink_> clued up things bees. got their shit together
12:25 < s0urce> Sven_vB: but it seems, like the browser saves the state and i come to "denied" each time i refresh page
12:25 < ink_> s0urce: http://www.ietf.org/rfc/rfc2617.txt
12:26 < Sven_vB> s0urce, that won't work with 403, because 403 is a kind-of permanent type of "access denied". could you accept letting the user decide how often he wants to retry?
12:26 < Sven_vB> (before showing an error message)
12:26 < ink_> http://www.httpwatch.com/httpgallery/authentication/
12:26 < one> well im not allergic to bees ink_ 
12:26 < s0urce> Sven_vB: but when showing the error then? it will never appear, if the user don't cancle
12:28 < Sven_vB> s0urce, yes, exactly that. only when a user cancels will he see your message. if you need to show if earlier, you need another aufh mechanism. or do crazy stuff with timestamps in URLs.
12:28 < one> aint no point in looking for one small bee
12:28 < Sven_vB> *it *auth
12:28 < s0urce> hm.. ok thx Sven_vB and ink_ 
12:28 < one> i could step on a bee
12:29 < one> by accident
12:30 < Sven_vB> s0urce, you could even abuse E-Tag or Last-Modified (even vs. odd seconds) to have at least some browsers tell you if they have seen the first phase (403) yet and should therefor get the second phase (401) next.
12:31 < s0urce> hm.. mb another time, i think i will keep it the way it works for now, but ty ;)
12:32 < MI6> joyent/node: Ben Noordhuis v0.10 * 44843a6 : child_process: fix sending utf-8 to child process  In process#send() and  (+1 more commits) - http://git.io/o12PCg
12:34 < one> i become all that i love
12:35 < one> heyahyah yeah hey!
12:35 < one> after u are done being used up ink_ 
12:35 < one> no more ink left
12:36 < one> wile the outer temple is yet standing
12:36 < one> see
12:37 < one> it all eventually comes to an end
12:37 < Sven_vB> __EOF__
12:37 < one> there is no mote in GOD's eye
12:39 < one> faith in GOD leads to eternal life
12:39 < one> ask yourself how would I know that
12:40 < bnoordhuis> is it time to get the ban hammer?
12:40 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
12:40 < Sven_vB> nah, afais he's not distracting on-topic questions
12:40 < chty> bnoordhuis: :)
12:40 < ink_> one
12:41 < aMoniker> Why is it a ban hammer anyway? Seems like it should be a Ban Trebuchet
12:41 < ink_> what?
12:41 < ink_> dont be ridiculous
12:41 < Sven_vB> aMoniker, to send people flying? ;)
12:41 < aMoniker> Sven_vB: Precisely.
12:41 < ink_> somebody always has to ruin it.
12:41 < ink_> for one thing
12:41 < ink_> can you have a bag of trebuchets?
12:42 <@bnoordhuis> aMoniker: i'm more of a close contact kind of guy. trebuchets are so impersonal
12:42 < ink_> i think not
12:42 < ink_> whereas a bag of hammers
12:42 < aMoniker> ink_: Yes, if it is a very large bag.
12:42 < Sven_vB> aMoniker, you can do that with a hammer as well, swing part-circle and then bottom-up
12:42 < ink_> amusing and useful.
12:43 < aMoniker> Sven_vB: Good point, though in that situation I think a boot might be more comical.
12:43 < MI6> joyent/node: Ben Noordhuis v0.8 * 84bb0ec : child_process: fix sending utf-8 to child process  In process#send() and  - http://git.io/H6XTzg
12:43 < Sven_vB> maybe we could shoot banhammers with small trebuchets
12:44 < one> Did you hear a digital signature on that Christina Augulera cd
12:44 < aMoniker> This is getting complicated. Let's just ask people to stand on that trapdoor over there...
12:44 < one> Genie in a bottle
12:44 < Sven_vB> aMoniker, the one in front of the stereo?
12:45 < aMoniker> Sven_vB: Is that how you deal with interlopers at parties?
12:46 < Sven_vB> one, i for one didn't hear it. could you play it for us?
12:46 < one> i got rid of all my junk
12:46 < aMoniker> two, pull the lever..
12:47 < one> but im just remembering all of the math 
12:48 < ink_> its a long shot
12:48 < ink_> but i dont suppose anybody in here
12:48 < ink_> knows anything about Node?
12:49 < one> thats why i know all nodejs has crypto in it
12:49 < deepy> I have used the software
12:49 < ink_> used JSDOM?
12:49 < deepy> Nope
12:49 < one> rhimdal
12:49 < deepy> Never heard of that either
12:50 < one> he is the crypto
12:51 < ink_> previously i was working in python
12:51 < ink_> + v8
12:51 < ink_> + python DOM implementation
12:51 < one> stuff shouldnt even be used
12:52 < one> python just makes some configs
12:52 < one> then remove it
12:52 < bradleymeck> one, crypto is about tradeoffs not absolutes, everything is crackable giving enough CPU hours
12:52 < ink_> not with YAML
12:52 < ink_> (12:48:36) bradleymeck: one, crypto is about tradeoffs not absolutes, everything is crackable giving enough CPU hours
12:52 < angelazou> hello, I was wondering how can I build a node.js javascript evaluator
12:52 < ink_> lol
12:52 < guor> angelazou, use eval?
12:53 < bradleymeck> angelazou: can you clarify what you mean
12:53 < ink_> odd cos i was just attempting to talk about the same thing
12:53 < angelazou> basically, I want to use it for benchmark purpose, where user submits a script and I will call the script
12:53 < one> ink_: its comeing from quantum encryption
12:53 < one> not crackble
12:53 < guor> ugh. benchmarking...
12:53 < one> after a connection is made if its attacked it destroys message
12:53 < bradleymeck> one, current quantum is crackable
12:53 < bradleymeck> theoretical is not
12:54  * bradleymeck digs
12:54 < guor> V8::Script::New and then Script::Run
12:54 < angelazou> along with some other JS code. So I got myself a nodejs app started using express, but I'm not sure how to accept requests using express
12:54 < one> its a theory only becaus ethey dont know it
12:54 < roel_> does anybody know any more alternatives for socket.io and sockJS? or are these two the major choices when researching after websocket-like functionality?
12:54 < bradleymeck> weak measurements
12:54 < ink_> guor: presumably you'll want to sandbox it in some way
12:54 < `3rdEden> roel_: faye
12:55 < guor> ink_, then you would have to create a new context for each benchmark, I guess
12:55 < one> why is evrybody full of doubt
12:55 < `3rdEden> roel_: engine.io
12:55 < roel_> ah k
12:55 < ink_> guor: its not for me, but i reckon he'll want something lke this
12:55 < roel_> what would you recommend?
12:55 < bradleymeck> one: because quantum computers are rare at best, limited to 7 qubits commercial (at least thats the highest I have seen available) and quantum entanglement is more complex than a mere hamiltonian equation
12:56 < `3rdEden> roel_: i'm biased because I worked on socket.io and engine.io
12:56 < ink_> bradleymeck: paper.
12:56 < bradleymeck> ink_: on?
12:56 < guor> I know.... angelazou: create a new context for each source you want to benchmark, and use V8::Script::New and V8::Script::Run
12:56 < `3rdEden> engine.io is the new transport layer of socket.io, which is much more low level
12:56 < roel_> and what does socket.io bring on top of that?
12:56 < angelazou> guor: well, not sure if V8 is installed on the server though
12:57 < guor> o.o
12:57 < `3rdEden> faye, is okay it's based on the bayeux protocol so if you have a server use that already, it would be an obvious choice
12:57 < bradleymeck> ink_: http://www.techrepublic.com/blog/security/how-quantum-cryptography-works-and-by-the-way-its-breakable/7762 and google similar terms, but following all of those were a good start
12:57 < angelazou> plus, I'm trying to get it automated
12:57 < one> bradleymeck: its all been done before
12:57 < guor> angelazou, do you want the source to run on client or server?
12:57 < one> nothing new under the sun
12:57 < angelazou> server
12:57 < `3rdEden> roel_: engine.io is missing all the fancyness from socket.io like automatic jSON encoding, rooms, namespaces, reconnect, emitting events etc
12:57 < angelazou> it's just an evaluator
12:57 < guor> but you don't know whether there is v8 on the server?
12:57 < angelazou> but of course I have to prevent malicious script, but that's another thing
12:57 < iksik_> does anyone using node-http-proxy from nodejitsu?
12:58 < roel_> actually never heard of bayeux so pretty sure we don't have server that uses that :D
12:58 < roel_> ah k
12:58 < `3rdEden> http://svn.cometd.com/trunk/bayeux/bayeux.html
12:58 < one> I am making split pea soup.
12:58 < iksik_> i'm wondering, how can i get information about currently used port and ip by proxy server, to manage failures
12:58 < guor> so, basically, a server-side jsperf...
12:58 < MI6> joyent/node: Mathias Bynens v0.10 * 488b74d : doc: mention `process.*.isTTY` under `process` - http://git.io/pd34mQ
12:59 < one> bradleymeck: Do you want to be my friend?
12:59 < roel_> thnx, will start the reading!
12:59 < bradleymeck> angelazou: http://benchmarkjs.com/ + child process bootstrap
13:01 < bradleymeck> one: dunno
13:01 < one> bradleymeck: where are you at?
13:01 < bradleymeck> according to my IP im in austin texas
13:01 < bradleymeck> so, austin since im not spoofing
13:02 < one> bradleymeck: oh but you dont know where you are at?
13:02 < one> bradleymeck: if I can get out of the matrix do you want me to come get you?
13:03 < bradleymeck> im good where i am at
13:04 < one> ok, did your eye twitch when i asked you?
13:04 < one> bradleymeck
13:04 < bradleymeck> nope
13:04 < one> ok
13:04 < one> just checking
13:05 < one> bradleymeck: do you have a wifee?
13:05 < bradleymeck> nope
13:05 < bradleymeck> take off topic stuff out of this room though
13:05 < one> prob better thisaway theres not worldy cares
13:06 < one> why is there a pimp in here that thinks he is going to smack me?
13:06 < one> is your pimp watching?
13:07 < one> if i want to make u my friend i will make it so i dont care about pimps
13:07 < one> this what you call a ground for technical recruiters to open up insurance polices on you
13:07 < one> they dont care what you code
13:07 < one> its all about insurance policy
13:07 -!- one was kicked from #Node.js by bnoordhuis [one]
13:08 <@bnoordhuis> let's start with a friendly kick
13:08 <@bnoordhuis> next time it's /kickban
13:14 < aMoniker> It's just a little kick in the bum.
13:16 < AAA_awright> Not that there's anything wrong with offtopic
13:17 < ink_> when it's original
13:17 < ink_> or interestingf
13:17 < ink_> one: amphetamine.
13:17 < ink_> the desire to do ALL THE THINGS
13:18 < ink_> yet the wherewithal to achieve nothing
13:18 < ink_> result
13:18 < ink_> IRC waffle
13:18 < dch> I'm doing var d = new Date(); d.toTimeString() after that. Is there a way to drop the intermediate var assignment? Date().toTimeString() obv doesn't work.
13:20 < davidrlee> new Date().toTimeString()
13:21 < dch> davidrlee: nice, didn't think I could assign from new. doh.
13:21 < dch> tv
13:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:44 < roel_> `3rdEden: sorry to bother you. Do you know if socket.io is still active (since you worked on this project)? Because the graphs in github are telling me that the project is dropped.
13:44 < bradleymeck> roel_: most of the dev is done on engine.io for internals socket.io is mostly a wrapper now
13:45 < bradleymeck> so it may be good to compare both
13:45 < ink_> let me look at thiese..
13:45 < roel_> ah so socket.io is already using engine.io?
13:48 < bradleymeck> roel_: unsure on stable but i know `3rdEden was using engine
13:48 < bradleymeck> and socket was talked about
13:50 < roel_> ok thnx 4 the information!
13:54 < MI6> joyent/libuv: piscisaureus created branch version - http://git.io/6kfO7Q
13:55 < MI6> joyent/libuv: Bert Belder version * eb40c44 : Prepare for release versioning - http://git.io/B1Ie4g
13:56 < euoia> roel_: Guillermo Rauch has been saying for a while now that version 1.0 of socket.io will be out soon
13:56 < roel_> saying for a while that it will be out soon :D
13:56 < roel_> nice
13:57 < euoia> roel_: well, I was told on March 12 that it would be less than a week
13:57 < L3monPi3> I have a very simple rest app(Im using express), it has a POST method that I end with this:   
13:57 < L3monPi3> ...
13:57 < L3monPi3> res.writeHead(201, {'Content-Type': 'text/plain'});
13:57 < L3monPi3> res.end('thanks');
13:57 < L3monPi3> when I do post the response is "...gracias%"
13:57 < L3monPi3> Why is the "%" on the output?  
13:57 < euoia> so I am not holding my breath
13:57 < euoia> L3monPi3: is that using cUrl?
13:57 < L3monPi3> yes
13:57 < euoia> L3monPi3: I've always assumed that's just cUrl telling you there's no newline at the end
13:58 < L3monPi3> ahh ok, perfect the, thanks!
13:58 < roel_> ok thnx euoia maybe some late bugs. We'll get it when it's ready I guess. But this means that it isn't death i guess.
14:01 < bradleymeck> need to figure out non-sucky way to test against windows for node apps
14:02 < ink_> u mean testing on windows?
14:02 < bradleymeck> yep
14:03 < bradleymeck> spawning a vm is annoying
14:03 < ink_> ah ok
14:03 < bradleymeck> could do it in the cloud but thats $$
14:03 < ink_> is it?
14:03 < ink_> lol
14:03 < ink_> hardware and rackspace
14:03 < ink_> insanely cheap nowdays
14:04 < bradleymeck> any money is money when i am doing personal projects that wont be making money
14:04 < ink_> hah
14:04 < ink_> i get that sure
14:04 < ink_> but personally
14:04 < ink_> having boxes knockin about
14:04 < Sly> Okay. This is too good not to share with everyone.
14:04 < Sly> https://lh3.googleusercontent.com/-3tE5N22Ak8w/UVBWWfkVp3I/AAAAAAAAwm8/fjo3uvYyM-I/w497-h373/photo.jpg
14:04 < ink_> without em it's like im missin a limb
14:05 < ink_> LOL
14:05 < ink_> https://lh3.googleusercontent.com/-3tE5N22Ak8w/UVBWWfkVp3I/AAAAAAAAwm8/fjo3uvYyM-I/w497-h373/photo.jpg
14:05 < ink_> http://imgs.xkcd.com/comics/bumblebees.png
14:05 < aMoniker> Sly: nice to see a judge with a sense of humor
14:06 < aMoniker> ink_: if you link to xkcd, you have to link to the comic page and not the image, so people get the hover-text ;)
14:06 < mscdex> node.js rules!
14:08 < ink_> aMoniker: thats fair ;)
14:08 < ink_> mscdex: you kno what
14:08 < ink_> been putting it off for a while now, python zealotry
14:08 < ink_> but yesterday went to work with it for the first time
14:08 < ink_> and i gotta say
14:08 < ink_> im liking this
14:08 < ink_> a lot
14:09 < Sly> Wow, I've got to get a new computer chair.
14:10 < ink_> Golang was a bitter disappointment
14:10 < ink_> all the bits were so so right
14:10 < ink_> but when assembled
14:10 < ink_> ANGST
14:10 < ink_> but node
14:11 < ink_> ive been secretly jealous of the rate it was growing, some of the libs available
14:11 < deepy> Didn't you mention having a python background?
14:11 < ink_> well
14:11 < ink_> yes
14:12 < ink_> my current weapon of choice
14:12 < deepy> have you seen the amount of libs available for python?
14:12 < ink_> yes
14:12 < deepy> I'm not trying to discredit node, but I've spent 3 days trying to get things working here :p
14:12 < ink_> python is more than a language, it teaches you far more than code
14:12 < ink_> lol
14:12 < ink_> thus far
14:12 < ink_> node has done some very very important things right
14:12 < deepy> I've reached the point where I can't install node3-sqlite because it doesn't compile on BSD
14:12 < ink_> freebsd?
14:12 < deepy> netbsd
14:13 < ink_> node-sqlite?
14:13 < deepy> that's the one
14:13 < ink_> well no
14:13 < ink_> lookin
14:13 < ink_> u got
14:13 < ink_> node-sqlite
14:13 < ink_> sqlite3
14:13 < deepy> that's the ones
14:13 < ink_> https://github.com/developmentseed/node-sqlite3 == sqlite3
14:13 < deepy> They're all pulled in by spatialite anyways
14:13 < ink_> why are you using netbsd
14:14 < ink_> what possible justification do you have for this
14:14 < deepy> performance
14:14 < ink_> oh yeah
14:14 < deepy> Why are you not using netbsd?
14:14 < ink_> sounds like its performing brilliantly
14:14 < deepy> It's a quite nice operating system
14:14 < deepy> Yeah sure, it's the operating system's fault when a library doesn't have portability
14:15 < deepy> the same thing segfaults on Linux and doesn't compile on Windows
14:15 < ink_> "At the source code level, NetBSD is very nearly entirely compliant with POSIX.1 (IEEE 1003.1-1990) standard and mostly compliant with POSIX.2 (IEEE 1003.2-1992)."
14:15 < deepy> The problem is with flock
14:15 < bradleymeck> unfortunately posix 2008 is the more current standard
14:16 < bradleymeck> but subtleties etc
14:16 < ink_> and i have every faith that netbsd will damn nearly support thaty
14:16 < ink_> within the next 4-8 years
14:17 < ink_> you with your hipster OS
14:17 < ink_> i'm dull
14:17 < deepy> I'm still not seeing the problem here, my operating system works.
14:17 < bradleymeck> modern.ie asking for my product key is a bad sign
14:18 < ink_> deepy: did u say the lib
14:18 < ink_> also fails on Linux and Windows.
14:18 < deepy> no it segfaults on linux and won't compile for me in Windows
14:19 < ink_> i see
14:19 < ink_> well on the bright side
14:19 < ink_> i think you're rightr
14:19 < ink_> netbsd isn't the issue here
14:19 < deepy> The fun part is that everything works flawlessly on Linux, except that after everything is done it segfaults
14:20 < ink_> go on
14:20 < ink_> i have to know
14:20 < ink_> what backward shit are you doing
14:20 < ink_> to make this happen
14:21 < deepy> There's nothing backward about it. I'm making a query on a sqlite database. It returns the result and then segfaults
14:21 < ink_> so 100% the issue isn't with the OS
14:21 < ink_> and you're not doing anything daft
14:21 < ink_> node-sqlite3
14:21 < ink_> are basically fucking you and everybody else over
14:22 < deepy> I think the segfault might be because of spatialite. but I don't have debugging symbols or knowledge
14:23 < ink_> lol
14:23 < ink_> so what u didn't mention
14:23 < ink_> is you're patching this lib?
14:23 < ink_> with this
14:23 < ink_> http://upload.wikimedia.org/wikipedia/en/f/f1/SpatiaLite_logo.png
14:23 < deepy> Oh no, I'm not patching it at all
14:31 < pats_Toms> how to use socket.io client with different port than 80?
14:32 < aMoniker> pats_Toms: var socket = io.connect('http://localhost:1234');
14:32 < bradleymeck> listen to a server thats not listening on port 80
14:35 < ink_> i haven't been keeping up with this websockets thing
14:35 < ink_> because im busy enough
14:35 < ink_> and from what i can see
14:38 < ink_> it's a weird hack that gives means your browser can create proper stateful TCP connections
14:38 < ink_> but not 
14:38 < ink_> because you have to go via a websockets server
14:38 < ink_> which then basically acts as a proxy
14:38 < ink_> or a REST interface
14:38 < ink_> or Redis
14:38 < ink_> or a Message Queue
14:38 < ink_> or Ruby
14:39 < deepy> are you just spouting words hoping that one will be applicable?
14:39 < AAA_awright> >> ([]+!0)[2]+([]+1/0)[1]+([]+!1)[4]+([]+!1)[3]+([]+/!/[([]+!0)[0]+([]+!0)[3]+([]+!1)[3]+([]+!0)[0]])[3]+([]+!1)[1]+([]+/!/[([]+/!/[([]+!0)[0]+([]+!1)[4]+([]+!1)[3]+([]+!0)[0]])[3]+([]+/!/[([]+!0)[0]+([]+!1)[4]+([]+!1)[3]+([]+!0)[0]])[6]+([]+[].$)[1]+([]+!1)[3]+([]+!0)[0]+([]+!0)[1]+([]+[].$)[0]+([]+/!/[([]+!0)[0]+([]+!1)[4]+([]+!1)[3]+([]+!0)[0]])[3]+([]+!0)[0]+([]+/!/[([]+!0)[0]+([]+!1)[4]+([]+!1)[3]+([]+!0)[0]])[6]+([]+!0)[1]])[14]+([]+!1)[4]
14:39 < purr> AAA_awright: (string) 'unescape'
14:39 < AAA_awright> Huh
14:40 < aMoniker> AAA_awright: You're fired.
14:40 < AAA_awright> But I made that
14:40 < aMoniker> AAA_awright: That's why.
14:40 < pachet> this is how you use company time
14:41 < AAA_awright> No, really https://github.com/rvagg/CAPSLOCKSCRIPT/blame/master/INDEX.JS#L3
14:41 < pachet> see me in my office
14:41 < AAA_awright> But
14:42 < AAA_awright> How can we overthrow the tyranny of lower-case method names _then_?
14:45 < MI6> joyent/libuv: Bert Belder version * d5f8c1a : Now working on v0.10.3 (+3 more commits) - http://git.io/7400Zg
14:46 < pachet> you're right
14:46 < pachet> you're hired back, effectively immediately, 50% raise
14:46 < pachet> get to work
14:46 < pachet> s/effectively/effective, even
15:04 < pachet> here's a control flow lib i wrote if anyone's in need of such a thing:
15:04 < pachet> https://github.com/reflex/promix
15:04 < pachet> </selfbump>
15:09  * mscdex shakes a fist at the cipher doc
15:10 < Industrial> pachet: I woyuldnt mail the mailinglist about it
15:11 < Industrial> youll be scolded and referred to 20 other works before anyone makes a helpful contribution to the thread
15:11 < Industrial> in my experience, anyway.
15:12 < pachet> nah i dont care enough to
15:12 < pachet> its just something i wrote for work, take it or leave it
15:13 < erwin_s_> Hello everyone.
15:13 < creationix> Industrial: is the mailing list that bad?
15:17 < Industrial> creationix: https://groups.google.com/d/topic/nodejs/X6v4lW1JGTM/discussion i thought this was pretty bad
15:18 < nathan7> Hey creationix 
15:18 < nathan7> creationix: How's your git stuff?
15:19 < nathan7> Industrial: I am reminded of async's auto, though this sounds more complex
15:19 < nathan7> Industrial: and beyond the range of things I'd want to have to understand to grasp my programming
15:20 < creationix> Industrial: heh, sorry you felt like your thread was hijacked
15:20 < creationix> Industrial: but it looks like people were giving you feedback, just not in the form you had hoped for
15:21 < creationix> nathan7: haven't started yet, I'm still busy with client work
15:22 < Industrial> might have been me but if I sweat over a project on a weekend, however little minded to the big guys, I don't expect my first reply to be 'hah I did that years ago, look at my stuff it's better' :-p
15:22 < creationix> Industrial: since I am one of those "big guys" who responded to you, let me clear up my intentions
15:22 < creationix> I never said my stuff is better or there is anything wrong with your project
15:23 < creationix> you asked for feedback and I shared my experience that it was too complex for actual usage when I tried it
15:27 < Industrial> creationix: no worries, all in good fun. I've since abandoned the project. It was a nice little idea :)
15:27 < sha0coder> hi
15:27 < sha0coder> any working websocket server module?
15:28 < creationix> Industrial: indeed, but don't loose faith in the mailing list.  yes people are sometimes rude, but there are lots of smart nice people there too
15:28 < creationix> you just happened upon a topic that's been explored a *lot* before
15:31 < nathan7> Industrial: The best way to prove that something is a bad idea
15:31 < nathan7> Industrial: is to implement it really well
15:31 < creationix> sha0coder: I like the "ws" module on npm
15:32 < creationix> sha0coder: http://einaros.github.com/ws/
15:33 < sha0coder> creationix: thnx i have tried 4 diferent modules and nothing works with chrome
15:33 < creationix> ws works fine with chrome
15:33 < creationix> I use it all the time
15:34 < creationix> it's also what socket.io uses internally
15:34 < sha0coder> ok, socket.io also works but i was avoding use heavy client
15:34 < creationix> same here.  I use ws directly for most my projects
15:35 -!- mode/#Node.js [+o isaacs] by ChanServ
15:36 < owen1> anyone have a way to view markdown localy? https://github.com/ypocat/gfms stopped working
15:40 < MI6> joyent/libuv: Bert Belder v0.10 * d5f8c1a : Now working on v0.10.3 (+3 more commits) - http://git.io/e24sXw
15:40 < MI6> joyent/libuv: piscisaureus created tag v0.10.3 - http://git.io/Qsjs3w
15:40 < bradleymeck> owen1: Mou on mac is pretty decent
15:41 < MI6> joyent/libuv: piscisaureus created tag v0.10.2 - http://git.io/fVKqkA
15:42 < owen1> bradleymeck: thanks! is there a linux alternative?
15:43 < bradleymeck> owen1 https://github.com/joemccann/dillinger may work depending on what you want
15:43 < bradleymeck> dont know of a good one for linux thats a standalone
15:44 < owen1> bradleymeck: nice, i'll try dillinger as well
15:48 < sha0coder> creationix: thnx :* it works an is a lightweight server
15:48 < creationix> :)
15:48 < frdmn> hey
15:49 < yawnt> sup creationix 
15:50 < drudge> isaacs: does nave support http proxies?
15:50 < creationix> yawnt: hi
15:51 <@isaacs> drudge: if you set the HTTP_PROXY env, I believe that curl will dtrt
15:51 < yawnt> creationix: y u no in #luna-lang :(
15:51 <@isaacs> drudge: nave is just a bash script
15:53 < drudge> isaacs: i knew it was bash but curl must not be picking up on it
15:53 <@isaacs> hrm.  weird?
15:53 <@isaacs> try man curl and see what it responds to
15:53 <@isaacs> drudge: it might be http_proxy lowercase
15:54 < drudge> yes i'm using http_proxy, apt and other apps pick it up, i'll checkout curl
15:54 < bradleymeck> Industrial: waiting on post mortem compiler (still unsure what it would do), too many ppl talking about jits/vms
15:54 < creationix> yawnt: because I'm in #jack-lang :P
15:55 < mystiiq> hey, I am using express and I was wondering how can I extract remote IP and port of the request?
15:56 < creationix> mynameis: req.socket._socket.remote{Address|Port} I think
15:56 < creationix> err, mystiiq ^^
15:56 < frdmn> can someone take a look at this: http://stackoverflow.com/questions/15617332/tcp-socket-callback-termination
15:57 < frdmn> i need some help with tcp sockets :/
15:57 < creationix> mystiiq: or wherever express stashes the actual net socket http://nodejs.org/api/net.html#net_socket_remoteaddress
15:59 < mystiiq> creationix: ah ok, thanks, I did not see  req.socket in the express docs
15:59 < ink_> frdmn: can you give me something to try it on
16:00 < owen1> bradleymeck: how do u have syntax highlight for code? ```js doens't work
16:00 < jez0990> Hey, this isn't a Node specific thing.... but I'm trying to inline the README.md text into the package.json and am stumped on how to easily parse the text to insert \n   any pointers?
16:01 < drudge> isaacs: nevermind, my fault entirely
16:01 < creationix> jez0990: JSON.stringify maybe?
16:02 < bradleymeck> owen1: github's syntax highlighting is complex idk 
16:02 < owen1> bradleymeck: ok
16:02 <@isaacs> drudge: no problem :)
16:02 < owen1> creationix: can i think of ws as shoe without streaming?
16:02 < pachet> creationix: oh i just realized you're the step author
16:03 < creationix> owen1: dunno, never used shoe
16:03 < pachet> used it for a good while
16:03 < creationix> pachet: cool
16:03 < jez0990> creationix: so in terms of workflow, is there a simple way of doing with that with the REPL?
16:03 < owen1> creationix: shoe is streams on top of sock.js
16:03 < creationix> owen1: I guess, ws is pretty close to the web socket API in the browser
16:04 < creationix> you .send messages and get message evenst
16:04 < creationix> *events
16:04 < owen1> so it's socket.io without the fallbacks?
16:04 < creationix> jez0990: I don't understand the problem, but JSON.stringify will escape any invalid characters into a properly quoted JSON string
16:04 < creationix> owen1: more like socket.io is web socket with fallbacks added
16:06 < jez0990> creationix: sure, I appreciate the help so far. The problem is my lack of understanding on how to move text around between vim, the clipboard, and something capable of escaping - which is surely something I can just do in vim :S
16:07 < frdmn> ink_: what do you need in special?
16:07 < frdmn> a working/responing api?
16:07 < ink_> no like
16:07 < ink_> and IP+port
16:08 < ink_> to try it on
16:08 < ink_> ah 
16:08 < ink_> yes an api ;)
16:08 < linq> jez0990: Which OS are you using? On OSX you can use pbcopy, or on linux you can use xsel to copy from stdin to clipboard
16:08 < creationix> jez0990, well use the system clipboard, or node.s fs.* functions to read the README into a string
16:08 < creationix> 
16:08 < linq> jez0990: of course, I missed your earlier discussion so I could be completely off the mark :)
16:10 < frdmn> wait a sec
16:11 < jez0990> linq: Ubuntu - xsel looks no simpler than messing around with fs :P
16:11 < frdmn> i will change the credentials, ink_
16:12 < jez0990> creationix: linq: thanks for your advice. I'll give it a go with fs on the REPL - useful practice!
16:12 -!- mode/#Node.js [+o sblom] by ChanServ
16:12 < linq> jez0990: should you need them, the aliases I use in .bashrc are these:
16:12 < linq> alias pbcopy='xsel --clipboard --input'  
16:12 < linq> alias pbpaste='xsel --clipboard --output'
16:12 < linq> so I can do something like this:
16:12 < linq> cat foo | pbcopy
16:12 < creationix> jez0990: and there is nothing wrong with using fs.readFileSync('readme.md', 'utf8')
16:13 < linq> or pbpaste > bar
16:14 < frdmn> ink_: i've sent you the infos via query
16:16 < linq> I am a Python programmer learning node, and I have a question regarding debugging:
16:16 < linq> In Python, there is a builtin debugger (pdb) has a method called set_trace().
16:16 < linq> So I can call pdb.set_trace() anywhere in a program, and then when I run the program from command line the shell will drop me into an interactive REPL which has access to the local variable context at that point in the program.
16:16 < linq> Is it possible to do something similar in node.js? That is, invoking a REPL at an arbitrary point in a program?
16:16 < creationix> linq: V8 has a debug protocol that you enable on the command-line
16:17 < creationix> there is a "debugger" statement that triggers a breakpoint
16:17 < creationix> also node has it's own CLI debug mode
16:17 < linq> Does either of those give me a full repl at any given point in a program?
16:18 < jez0990> creationix: linq: mission aborted - I didn't realise npm automatically built the readme field in package.json
16:18 < linq> creationix ^^
16:19 < ink_> linq: i'm interested to know this as well
16:19 < nathan7> get node-inspector or something, run your node with --debug
16:19 < nathan7> and toss a 'debugger' statement in
16:19 < ink_> not touched Node until last night
16:19 < ink_> been pure python for some time
16:20 < ink_> anyways, moment
16:20 < ink_> i was reading up on debugging earlier
16:20 < creationix> linq: the V8 debug protocol is what web inspector in webkit uses
16:20 < creationix> you get a full repl there with a client that speaks the protocol
16:20 < creationix> like node-inspector
16:20 < linq> nathan7: It's the "or something" that I'm interested in. I'd rather have a debugger available in the commandline than via http
16:20 < ink_> is it a special v8 debug protocol?
16:20 < creationix> I don't remember what the node debug interface provides
16:20 < ink_> or is is just another dbg type protocol
16:20 < creationix> it's more GDB like
16:20 < linq> Hmm
16:21 < creationix> the v8 protocol is specific to v8, it's JSON over TCP
16:21 <@sblom> linq: You pretty much get a full repl. There's a surprising v8 limitation that gets in the way, though. http://code.google.com/p/v8/issues/detail?id=212
16:21 < ink_> well isn't v8 JIT'd?
16:22 < ink_> maybe im imagining it
16:22 <@sblom> ink_: yes--it is.
16:22 < ink_> and i know its been done countless times
16:22 < ink_> but dunno, 
16:22 < ink_> strike that, im probably overcomplicating
16:23 < linq> Very interesting sblom.
16:24 < guor> sblom, as the issue tells you, it's fixed
16:24 < creationix> ink_: node --debug myscript.js vs node debug myscript
16:25 < linq> guor: Just 4 days ago, it seems. Probably not landed in any releases yet.
16:25 < ink_> that ticket
16:25 < ink_> really highlights quite how much of a black box v8 is ;)
16:25 < ink_> writing interpreters is tricky
16:25 < ink_> writing compilers is hard
16:25 < guor> it's in bleeding_edge, not node, but then again node is more than just a few days behind v8
16:25 < ink_> writing JIT compilers takes a little more ;)
16:26 <@sblom> guor: Neat--that changed since the last time I looked at it late last week. :)
16:26 < creationix> guor: actually, node doesn't follow v8 that closely anymore, node needs stability
16:26 <@sblom> guor: I'll be really excited when it trickles down into Node someday. :)
16:26 < creationix> guor: but you can usually drop in your own version of v8 and build node from source
16:26 < guor> the issue with the compiler is that evaluating code in the same stack frame and one where you just stopped in is not trivial
16:26 < guor> *with the debugger
16:27 < guor> i thought the main issue with newer v8 is string API performance, not stability
16:27 < creationix> guor: right, performance stability
16:28 < creationix> people don't like it when their node servers are suddenly slower
16:28 < aMoniker> creationix: unless it's due to lots of traffic :)
16:29 < linq> sblom, creationix: Do you have any idea generally of how long it takes for v8 changes to make their way into a node release?
16:29 < linq> 3mo? 6mo?
16:29 < guor> i guess the answer would be "it depends"
16:29 < guor> :)
16:29 < linq> Figures
16:30 < guor> for chrome stable channel it's roughly 3 months
16:36 < ink_> correct me if im wrong
16:37 < ink_> but the local scope bug 
16:37 < ink_> isn't present in Chrome
16:43 < JohnMcLear> Anyone done a node 0.8 to 0.10 migration?  I'm stuck w/ something prolly tiny https://github.com/ether/etherpad-lite/pull/1623  -- Thanks!
16:46 < linq> creationix: perhaps I'm missing something. When I place a "debugger;" statement within my code, and run node --debug mycode.js, it runs the program without breaking at the debugger statement.
16:46 < creationix> I think you have to have a debug client attached for it to actually break
16:46 < linq> Whereas, if I run node --debug-brk mycode.js, it just breaks at the first line of mycode.js rather than my debugger statement.
16:46 < creationix> right, use --debug-brk so you have time to attach a debugger
16:47 < creationix> (also I'm not expert at this stuff, I usually console.log everywhere)
16:47 < linq> creationix: that's all good and well, but then how can I have it execute up until my debugger statemnt and break again?
16:47 < linq> When I ran the code using the inspector, it ran the entire script
16:47 < creationix> continue from the first break right?
16:48 < creationix> linq: btw, docs for the node specific debugger http://nodejs.org/api/debugger.html
16:48 < creationix> may be more what you're looking for anyway
16:48 < creationix> ahh, the node debugger is a client to the v8 protocol built into node
16:48 < creationix> now that's cool
16:49 < linq> creationix: at this rate I may end up writing my own tool that uses the protocol
16:50 < linq> provided the protocol is capable of entering the debugger at the point when a breakpoint is called, which seems fairly simple
16:51 < sha0coder> i have to stringify to pass a json via websocket?
16:51 < ink_> yah im googling this atm
16:51 < ink_> cos debugging generally
16:51 < ink_> not exactly unexplored terrritory
16:51 < linq> ink_: pdb.set_trace() is one of my best friends in Python :)
16:51 < sha0coder> node debugger?
16:51 < creationix> sha0coder: right, it's just raw messages
16:51 < sha0coder> ok
16:51 < creationix> sha0coder: the default is unicode, but it also supports binary
16:51 < sha0coder> thnx
16:52 < sha0coder> is there a debugger for node?
16:52 < ink_> sha0coder: 
16:52 < creationix> linq: you did read the link I posted right, it really looks exactly like what you want
16:52 < linq> creationix: I tried using that debugger as well. Same problem. Either runs the entire script, or breaks at the beginning, but can't seem to jump right into the place where the deugger statement is called
16:52 < ink_> hah i know that name from a site not unlike github
16:52 < ink_> only bluer
16:52 < ink_> and better imo
16:52 < creationix> linq: you might not be able to break in the first tick
16:53 < ink_> this is ridiculous
16:53 < linq> creationix: I don't understand what you mean, can you explain a bit more?
16:53 < ink_> debugging javascript is not this difficult
16:53 < ink_> whats apparent is there seems to be a certain lack of crossover
16:53 < creationix> linq: the debug client appears to connect over tcp, that means there is a small race condition
16:53 < ink_> between v8 and node devs
16:54 < ink_> reading some of the v8 related tickets 
16:54 < ink_> there's a slight touch of the black box about it
16:54 < sha0coder> can you pass the link of the node debugger?
16:54 < linq> sha0coder: this is the one creationix is referring to: http://nodejs.org/api/debugger.html
16:55 < linq> creationix: so how can I get around that restriction? What triggers the next "tick"?
16:55 < ink_> "Node's debugger client doesn't support the full range of commands"
16:55 < ink_> ok
16:55 < creationix> the two workarounds I've seen is to: 1. put your logic in the body of a settimeout
16:56 < creationix> 2. use --debug-brk to pause the program so the client has time to connect
16:57 < creationix> ink_: linq: seems to be working for me https://gist.github.com/creationix/a53ce5d0df2ea61f9e7e
16:58 < creationix> updated my gist to show me stepping through
16:58 < creationix> linq: what version of node and what OS are you on?
17:00 < linq> creationix: 0.8.9 on linux
17:00 < creationix> try node 0.10.x
17:00 < creationix> maybe the race condition was fixed
17:00 < creationix> works fine for me using v0.10.0 on osx
17:02 < linq> creationix: was having some troubles with some npm packages on 0.10.x. They may have been fixed. I'll try again
17:03 < creationix> sorry I'm not more help.  When I started node years ago none of this existed and I never changed my habits to use them.
17:03 < creationix> I guess I've become that grumpy old man :P
17:04 < linq> creationix: I appreciate your efforts anyway. I'll try the latest node and see if I can get the built-in debugger to work. Otherwise I'll dive into the v8 protocol to see if I can use it for my needs
17:05 < pachet> creationix: get some cats and separate galoshes for days when it doesn't rain
17:05 < pachet> and your transformation to the dark side will be complete
17:22 < s3shs> So what's up with node-mysql failing up on github.  Is it still under active maintenance?
17:23 < s3shs> (It's been in that mode for a while.)
17:23 < AdamMagaluk> When publishing a module with native code that has to be built, should you use node-gyp build or node-gyp rebuild?
17:26 < perlitch> chrisdickinson: did you JUST make beefy? i was about to start using browservefy and i found it...
17:28 < AdamMagaluk_> When publishing a module with native code that has to be built, should you use node-gyp build or node-gyp rebuild for package.json's script.install
17:30 < chrisdickinson> perlitch: beefy is browservefy -- just with a much, much, much more pronounceable name
17:30 < chrisdickinson> plan is to do new development on beefy, and add a postinstall on browservefy that just echos "browservefy is now beefy! please to install!"
17:30 < bnoordhuis> AdamMagaluk_: node-gyp rebuild, runs configure and build
17:31 < chrisdickinson> sorry for the confusion!
17:31 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:31 < perlitch> bahaha ok cool no problem! thanks for the great tool!
17:31 < chrisdickinson> :D no problem
17:31 < chrisdickinson> lemme know if you think of ways to make it better!
17:31 < perlitch> will do
17:33 < AdamMagaluk_> bnoordhuis: Correct but wouldn't that slow down consecutive npm install for cleaning and rebuilding a module already installed?
17:38 < bnoordhuis> AdamMagaluk_: yes. that's the price you pay if you want it to just work
17:39 < AdamMagaluk_> bnoordhuis: What would be the pit fall of only running "node-gyp configure && node-gyp build"?
17:39 <@TooTallNate> AdamMagaluk_: what's up?
17:40 < AdamMagaluk_> TooTallNate:When publishing a module with native code that has to be built, should you use node-gyp build or node-gyp rebuild for package.json's script.install
17:40 <@TooTallNate> AdamMagaluk_: don't have anything actually ideally
17:40 < nathan7> AdamMagaluk_: npm handles this
17:40 < nathan7> AdamMagaluk_: if a binding.gyp exists
17:40 <@TooTallNate> AdamMagaluk_: npm "does the right thing" if you simply have a binding.gyp file in the root
17:41 <@TooTallNate> AdamMagaluk_: it simply does "node-gyp rebuild" to answer your question though
17:44 < seismo> did anybody else notice that google implemented a feature to turn of your info-bubble?
17:44 < nathan7> seismo: Linky?
17:45 < AdamMagaluk_> TooTallNate:So regardless npm rebuilds the native code or each call to 'npm install' in your package with a dependency that has native code.
17:45 < seismo> nathan7: when you search for something, a toggle button between a world symbol and a person symbol appears. then you can switch between global and personalized results.
17:45 < seismo> never noticed that bevore
17:45 < seismo> *before
17:46 < seismo> can't be too old
17:46 <@TooTallNate> AdamMagaluk_: not usually, if you want to rebuild all the dependencies you do `npm rebuild`
17:46 <@TooTallNate> AdamMagaluk_: just `npm install` will compile just the root project afaik
17:48 < AdamMagaluk_> TooTallNate: Thanks that clears it up.
17:48 < MI6> joyent/node: Ben Noordhuis v0.10 * cfd0dca : crypto: make getCiphers() return non-SSL ciphers  Commit f53441a added cr - http://git.io/iFiHww
18:26 < mokush> did anybody use the watchIgnorePatterns param, in forever-monitor?
18:26 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:38 < niggler> in http://nodejs.org/api/child_process.html in the example of running ls -lh /usr, why is stderr being printed to stdout?
18:39 < nathan7> niggler: because console.error is not the point of it
18:40 < jayk> niggler: It's showing you that the stderr and stdout of the command are being captured.
18:40 < jayk> every process has a stdin, stderr and stdout.  the ls -lh command's stdin, stderr and stdout are separate from nodes.  
18:41 < jayk> so in that example, stderr and stdout on the ls command are being captured… and both are being then output to node's stdout (using console.log)
18:41 < niggler> that's understood from the words, but you can't inspect the output to verify that they are indeed separate
18:41 < jayk> niggler: Not sure what you mean?
18:42 < niggler> this demo wouldn't let you distinguish between the case of "all data being handled by stdout event" and "some data sent to stdout and some data to stderr"
18:43 < jayk> Sure.. the two on('data') calls are on the two different streams. the prefix in the console.log would indicate the difference.  
18:43 < jayk> you could log stderr on ls to stderr on node… and then pipe them to different places from the node command line, but not sure that would give you anything more useful
18:44 < niggler> it also masks the fact that data is a buffer, although you probably can guess that from the fact that stdout and stderr are buffers
18:44 < sha0coder> http.get is deprecated, but what about https.get ?
18:44 < jayk> stdout and stderr are streams… or filehandles on the underlying resource.  
18:45 < context> the docs dont say http.get is deprecated
18:45 < jayk> you can pump the data a buffer contains into a stream, but they are not the same thing.
18:47 < jayk> technically, these docs are out of date - because this is forcing the old stream api… but that's another discussion altogether
18:47 < niggler> well we are discussing documentation right now
18:48 < jayk> ah.  Well, in that case… these docs are out of date… because this forces the old stream api. ;-)
18:53 < niggler> is there a way to force 'require' to use the .json logic for specific dotfiles?
18:57 < zenetik> hi all
18:57 < zenetik> does anybody played a lot with node-ncurses ?
18:59 < niggler> zenetik there's a nonzero chance mscdex is awake
19:00 < zenetik> mscdex: ping :)
19:00 < zenetik> mscdex: regarding nodencruses, i'm ready to contrib for "more examples" but i'd like some help first :)
19:03 < perlitch> chrisdickinson: i think i love beefy as much as it loves me, as per the readme
19:04 < mscdex> zenetik: lolwut
19:04 < mscdex> zenetik: be my guest
19:06 < zenetik> mscdex: i'm looking to make a ncurses ui having 2 parts in the same screen: a list having 50chars at the left of the screen, and the rest for another widget
19:07 < zenetik> mscdex: is it possible using actual version of node ncurses ?
19:09 < mscdex> zenetik: sure
19:11 < zenetik> mscdex: in actual samples, can i find a way to do that ? notice i never used ncurses. Long time ago i've played with pecl php dialog module only
19:12 < zenetik> mscdex: can you open wiki area on node-ncurses github, i'll put my littles learning step by step ?
19:13 < zenetik> mscdex: i'm franck34 on github, i've contribute a lot to appjs wiki
19:13 < zenetik> (btw i've switched to nodewebkit ..)
19:20 < zenetik> mscdex: it would be really cool if you help me to start, i don't find the starting point with actual samples of node ncurses. But i really dont' want to disturb you i think you are a busy man :)
19:21 < zenetik> mscdex: just give me some keywords i'll google, links are welcome. I've read ncurses tutorial already but it's far away of nodejs module implementation
19:33 < heroicamit> Hi!
19:33 < heroicamit> how do i get the adler32 checksum in nodejs?
19:37 < mscdex> zenetik: wiki enabled, have at it!
19:38 < mscdex> heroicamit: for what? you'd have to implement it yourself
19:38 < mscdex> heroicamit: there are no modules currently on npm that do that
19:38 < heroicamit> heroux there is a payment gateway and it is using that to calculate checksum
19:39 < heroicamit> oops mscdex
19:39 < zenetik> mscdex: thanks mscdex. is it possible for you to give me some keywords about spliting screen using node ncurses ?
19:40 < zenetik> a starting point ?
19:47 < ink_> ok
20:23 < draginx> maxFieldsSize exceeded, received 2129211 bytes of field data <-- in express/formidable anyway to increase this limit within express? :/
20:27 < zenetik> draginx: google is your friend
20:27 < zenetik> draginx: http://stackoverflow.com/questions/11148086/node-js-maxfieldsize-exceeded
20:27 < zenetik> but google is not my friend for node ncurses :(
20:28 < draginx> i dont think thats relevant anymore..?
20:28 < draginx> 2012 != Express 3
20:29 < sorensen> i feel google is more like that smart aleck person you know that has all the answers
20:29 < draginx> but i guess it would still work
20:29 < zenetik> draginx: did you try ?
20:29 < draginx> no id tather look at code first
20:29 < draginx> https://github.com/senchalabs/connect/blob/master/lib/middleware/limit.js#L31
20:29 < draginx> so it seems like itll work but no way to gracefully throw this error though
20:41 < faceleg|work> how impolite is it to suggest that one's own project replace another as "the suggested wrapper for C library X"?
20:41 < nathan7> Make it better
20:41 < nathan7> And make sure the world knows it exists.
20:41 < nathan7> And make sure the world knows why it kicks more ass.
20:42 < ningu> especially if the one it's replacing is no longer maintained
20:42 < faceleg|work> yeah
20:42 < faceleg|work> I'm not sure how to define "not maintained"
20:42 < faceleg|work> hypothetical: is this "not maintained"?
20:42 < faceleg|work> https://github.com/libgit2/node-gitteh
20:42 < faceleg|work> compared to say, this? https://github.com/tbranyen/nodegit
20:43 < faceleg|work> I'm just randomly throwing these out there, no relation to my question :P
20:44 < lovemuffin> yea but node gitteh is up to version 0.17!
20:45 < pachet> its like, if it was pokemon
20:45 < faceleg|work> lovemuffin: the libgit2 version mean nothing
20:46 < pachet> that bulbasaur would already be ivysaur nasain?
20:46 < faceleg|work> from the devs themselves, the versions mean nothing. nodegit is on a very recent lg2 dev commit
20:46 < faceleg|work> 0.17 has serious bugs in it
20:46 < faceleg|work> which is why I tried to take out references to which version lg2 is on
20:46 < faceleg|work> pachet: I don't pokemon
20:47 < pachet> faceleg|work: there's always saturdays
20:50 < ningu> gitteh also seems somewhat... unserious as a name :)
20:50 < ningu> like the ORM for node called ORMnomnom
20:51 < ljharb> a rose by any other name
20:51 < ljharb> serious names indicate unimaginative developers. which can mean bad code :-)
20:51 < ningu> it's a one-way correlation
20:51 < ningu> you can't go from serious name => good code
20:52 < ningu> but I've rarely found things with unserious names that have good code
20:52 < ningu> depending how you define unserious I suppose
20:52 < faceleg|work> gitteh is ok
20:52 < faceleg|work> I found nodegit clearer
20:52 < faceleg|work> and less like it was trying to be magic
20:52 < faceleg|work> which meant I could jump in and start helping
20:52 < faceleg|work> instead of thinking screw this crap
20:52 < ljharb> cleverness is an antipattern
20:53 < faceleg|work> indeed
20:53 < faceleg|work> "if debugging is twice as difficult as programming, then by definition your cleverest code is impossible to debug"
20:53 < ningu> ljharb: yeah, I think that's what I'm picking up on with clever names... to the extent it indicates they contain too clever designs
20:53 < ningu> obviously you have to look at the code
20:53 < ljharb> i wouldn't say that correlates.
20:53 < ljharb> i make a clever name so i don't feel the need to be clever in the codebase :-)
20:54 < ningu> hehe
20:54 < pachet> just make clever code that never ever breaks
20:54 < pachet> easy
20:54 < billy> anyone know if it's possible to access sourcemaps via code instead of the browser?
20:55 < ningu> ok. whoever thought it was reasonable to make an i18n file contain one string per line and refer to those by index...
20:55 < ljharb> the browser just gets them from http requests. you could do that too.
20:55 < ljharb> ningu: most i18n impls use the english string as the key
20:56 < ningu> ljharb: I know.
20:56 < ningu> using str[13] is just silly
20:57 < ljharb> yeah thats ridiculous
21:00 < MaximAndreev> Hi all, somebody work with dnode ?
21:00 < MaximAndreev> https://github.com/substack/dnode
21:00 < substack> MaximAndreev: ask a specific question instead and you'll get help much faster
21:00 < substack> popularity contests are a really latency-heavy way to ask a question
21:02 < Krinkle> http://nodejs.org/api/process.html#process_process_getuid says "This is the numerical userid, not the username."
21:02 < Krinkle> http://nodejs.org/api/process.html#process_process_setuid_id says "If a username is specified, this method blocks while resolving it to a numerical ID."
21:02 < Krinkle> So, how do I get the username / resolve the uid? 
21:03 < MaximAndreev> Im need help with solve problem of reusing of Socket's
21:03 < MaximAndreev> I'm use client-server model with queue
21:03 < MaximAndreev> queue size is 100 unit
21:04 < MaximAndreev> now Im have error ECONNRESET after 25k requests
21:04 < MaximAndreev> client code is clear - socket manually closed by connection.end and .destory but on server...
21:04 < MaximAndreev> not working.... :(
21:05 < MaximAndreev> I can provide source code, if somebody can help me.
21:06 < ink_> MaximAndreev: have you tried running this from another DC
21:07 < context> any new browser should have Array#reduce
21:07 < MaximAndreev> it's work on loopback if (localhost) - connection between DC don't required
21:07 < MaximAndreev> if work properly
21:08 < faceleg|work> so ningu should I petition the libgit2 peeps for a revolution
21:08 < faceleg|work> or quietly work in obscurity some more
21:10 < MaximAndreev> https://gist.github.com/anonymous/5240755
21:13 < fayimora> Hey guys I'm looking for a good twitter package..Which do people use?
21:14 < willwh> ntwitter
21:14 < fayimora> I'm currently looking at twitter but it hasn't been maintained in 6months
21:14 < fayimora> willwh: 
21:14 < fayimora> **ntwitter
21:15 < willwh> it works
21:15 < fayimora> willwh: does it have some docs somewhere?
21:15 < willwh> https://github.com/AvianFlu/ntwitter
21:21 < fayimora> willwh: I'm guessing everything on the README is all i will need?
21:21 < willwh> should be
21:22 < fayimora> kk thanks
21:22 < fayimora> do people use 'mogodb' or 'mongoose' more
21:24 < othiym23> fayimora: mongoose is a layer on top of node-mongodb-native, so everyone using mongoose is also using node-mongodb-native
21:24 < othiym23> some people find mongoose a valuable convenience layer on top of nod-mongodb-native, which has a lot of quirks and warts, other people find it just makes the whole thing that much more confusing
21:25 < othiym23> if you want ORM-like things (schemas, high-level CRUD DAL methods), you might like Mongoose
21:25 < othiym23> if you're just doing operations on collections and are fine with using cursors or callbacks, mongodb is probably just fine
21:25 < fayimora> othiym23: definitely going for mongoose..thanks for the explanation
21:28 < willwh> fayimora: yo
21:28 < willwh> you want to see nwtitter in use?
21:28 < fayimora> willwh: yes please
21:28 < willwh> I am just messing with it really... http://www.willwh.com/stream
21:28 < willwh> :)
21:29 < willwh> tracking: #yyj, #victoriabc, #nice
21:29 < Zarel> so certain non-ASCII characters seem to crash child_process in Node 0.10
21:29 < willwh> the #nice is just to make sure I get enough tweets while playing around ;]
21:29 < fayimora> willwh: cool..i've to one tracking some trending topics now but on my terminal lol
21:30 < fayimora> willwh: using socket.io?
21:30 < willwh> yes
21:30 < willwh> just view source you'll see ;)
21:30 < willwh> it's dirt simple - I'm just playing around
21:31 < fayimora> willwh: lol thanks.. i always forget js is open-source
21:35 < Zarel> okay
21:35 < Zarel> I've devised a testcase
21:35 < Zarel> http://hastebin.com/vuyaqefepi.js
21:35 < Zarel> this crashes Node 0.10.1 but works fine in Node 0.8.22
21:37 < ink_> similar name
21:38 < ink_> before yesterday
21:38 < ink_> i was working with v8 only with Python
21:38 < glitching> Perhaps a stupid question, but I am exporting a model class that should read a file in the directory of the file that represents the model, but I want to package the base model as a node package. I then want to do something like this: https://gist.github.com/rschmukler/5241007
21:38 < glitching> view class*
21:39 < glitching> Problem is that it resolves the file relative to the Base.js instead of the file that requires('Base'); is there anyway to do this without having to pass in the __dirname every time I instantiate?
21:48 < zenetik> mscdex: understood how node ncurses work, will go step by step into the wiki
21:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:00 < othiym23> so I've got some custom domain-handler logic that overrides 0.10's process._fatalException by looking for marked errors and / or marked domains
22:00 < s3shs> glitching, you may not like this solution, but I have some global helpers to do require() that know how to handle different paths.
22:00 < s3shs> It's cleaned up lots of code where I was previously dealing with paths.
22:00 < othiym23> if it sees the mark, it emits an uncaughtException event on process
22:01 < othiym23> if that returns false, it rethrows the exception and lets the world burn
22:01 < glitching> @s3shs The problem with that is that I am trying to unify stuff between component.js and node.js and extending globals w/ component seems like extra brittleness introduced. But it sounds like there's not really a better way?
22:01 < othiym23> the tricky thing is figuring out where the branding of the errors or domains go
22:01 < othiym23> does this sound like something that would make those of you using domains and / or exception trappers like Airbrake uneasy?
22:02 < tjholowaychuk> glitching globals?
22:02 < tjholowaychuk> why globals
22:02 < glitching> @tjholowaychuk I don't want globals. That's what I was saying.
22:02 < s3shs> glitching was responding to my experience.
22:03 < zenetik> mscdex: node-ncurses: input isKey value is false rather than true for ESC key using node 0.10 (debian 64)
22:04 < glitching> @tjholowaychuk I'm trying to have views evaluate paths relative to a file that instantiates the view rather than the base file. Right now I'm working on the node side but ultimately I'll extend component to use jade-runtime and have the views render the right thing (either full out jade reading the full path or just a helper function + jade runtime packaged with component client side)
22:05 < glitching> @tjholowaychuk https://gist.github.com/rschmukler/5241007, trying to avoid passing in __dirname when I instantiate a view
22:05 < heath> looking for some bugs to work on
22:05 < heath> suggestions welcome
22:05 < heath> got a few hours to spend
22:08 < faceleg|work> heath: on what repo?
22:10 < heath> faceleg|work: i don't have a particular preference, just looking to help out on a few small issues
22:11 < heath> kind of difficult to wade through https://github.com/joyent/node/issues
22:11 < faceleg|work> damn
22:11 < faceleg|work> no idea what they want done next
22:11 < faceleg|work> pick one you can solve in a few hours?
22:11 < faceleg|work> otherwise I have some incredibly awesome work to do
22:11 < MI6> joyent/node: Ben Noordhuis tjfontaine-review-this * 9352c19 : child_process: don't emit same handle twice  It's possible to read multip - http://git.io/A4N3aw
22:13 < zivester> anyone know why this code doesn't work when 1 client is connected, but works fine when >1 are connected? https://gist.github.com/zivester/5233347
22:13 < bnoordhuis> heath: there's always stuff that need documenting, pull requests that need reviewing, etc.
22:13 < faceleg|work> all hail bnoordhuis 
22:13 < Monkeytoe> hello
22:13 < heath> bnoordhuis: pull request reviews, i can try that, seems simple enough
22:14 < heath> i didn't see any 'documentation' labels
22:14 < heath> i'm good at documenting stuff :)
22:15 < bnoordhuis> heath: https://github.com/joyent/node/issues/5130 for example. feel free to steal it
22:16 < MI6> joyent/node: Ben Noordhuis v0.10 * 9352c19 : child_process: don't emit same handle twice  It's possible to read multip - http://git.io/N_W9Kw
22:17 < heath> bnoordhuis: you got it
22:18  * heath makes sure pizza is on its way before getting to work
22:18 < damarusama> where can I find the nodejs documentation in markdown ?
22:20 < lovemuffin> in the repo
22:20 < damarusama> thanks
22:21 < damarusama> hum, it's all separated files, I guess I can concat them all in one file
22:22 < gmunk> hey
22:26 < lovemuffin> if a inherits from eventemitter, and b inherits from a, but also needs its own eventemitter, best way to solve?
22:26 < othiym23> lovemuffin: delegation
22:27 < tjholowaychuk> emitter should have been a mixin
22:27 < tjholowaychuk> of sorts
22:27 < tjholowaychuk> inheriting from an event emitter makes little sense
22:27 < othiym23> stick the second EE on a property, expose an interface to it a different way
22:27 < othiym23> tjholowaychuk: half of Node core util.inherits from EventEmitter, whachu talkin bout
22:27 < tjholowaychuk> that doesn't mean it's good
22:28 < tjholowaychuk> even require('events').EventEmitter is lame but it's legacy
22:29 < lovemuffin> othiym23: ideally i'm trying to find a way to not expose b's ee differently
22:29 < lovemuffin> basically a's ee should still work, but thats not exposed , b is exposed
22:30 < lovemuffin> basically i want the inheritance, but the ee is messing me up as i want both to be intact, but b's should be the one that gets exposed
22:30 < othiym23> sounds like B should inherit from EE directly and should delegate to A, then
22:30 < othiym23> why do the two EEs need to be separated?
22:30 < othiym23> couldn't you partition on the events, rather the emitters?
22:31 < lovemuffin> delegate all of A's properties? yea im doing something like that, but its extreme to me
22:32 < lovemuffin> othiym23: what do you mean by partition?
22:32 < othiym23> I'm trying to figure out why you need two distinct EEs
22:32 < othiym23> when you could have events with names like a:thing, a:anotherthing, b:thing, b:anotherthing, etc
22:33 < lovemuffin> mainly i guess because a's EE should be 'private' 
22:33 < lovemuffin> othiym23: i can't remap a's events, because i don't "control" a
22:33 < lovemuffin> it's a node object
22:34 < lovemuffin> i guess the thing is really trying to wrap a's eventemitter so everything goes through b
22:35 < lovemuffin> if there was ES6 proxies i could do this easily, you know, method missing on b goes to a and be done with it hehe
22:36 < othiym23> I thought you solved this problem with your own proxies module ;)
22:36 < tjholowaychuk> i think someone wrote a module for that, fwd-something
22:36 < tjholowaychuk> fwd  Forward one (emitter|stream)'s events to another  =juliangruber  2012-10-15 18:43  forward emitter event eventemitter stream glue
22:36 < lovemuffin> no doing method missing has a lot of internal stuff that is required
22:38 < lovemuffin> othiym23: so all my proxy module does differently from other modules is just be unobstrusive about how you do 'proxies' currently
22:38 < othiym23> yeah, I know
22:38 < othiym23> just giving you a hard time
22:39 < lovemuffin> oh haha
22:39 < lovemuffin> tjholowaychuk: that won't work if b needs to inherit a also
22:39 < othiym23> lovemuffin: have you seen Angus Crolls stuff on doing mixins in JS?
22:40 < othiym23> because I think trying to follow a classical inheritance pattern here is only going to frustrate you
22:41 <@Nexxy> like this... (╯°□°）╯︵ ┻━┻
22:42 < othiym23> you could also do something like function B() { A.call(this); this._oldOn = this.on; this._oldEmit = this.emit; this.__oldEvents = this._events; EventEmitter.call(this); }
22:42 < lovemuffin> othiym23: i'll double check how he does it
22:42 < othiym23> but that's likely to explode in unlovely ways any time anybody changes the internals of EventEmitter
22:42 < faceleg|work> Nexxy: wtf
22:42 < lovemuffin> othiym23: i'm not even sure that will work remapping the properties
22:43 < context> remapping properties will not work
22:43 < lovemuffin> because i wouldn't be able to change all of A's internally emit's
22:43 < context> you'd have to rewrite the functions hitting them
22:44 < othiym23> if that's not what you want, I think delegation + explicit proxying are your best bets, then
22:44 < othiym23> you want a has-a instead of an is-a
22:45 < lovemuffin> yea i have some sort of delegation thing going on, but its really ugly because A has a ton of properties, and then inherits from a ton of properties, and that inherits from another thing
22:45 < lovemuffin> but its ok
22:46 < lovemuffin> it works, its just very ugly to look at
22:46 < othiym23> so is one of the desiderata that B duck type to A in code using B?
22:46 < othiym23> so B is just a drop in for A?
22:46 < lovemuffin> for everything except A's EE
22:47 < lovemuffin> mostly
22:49 < othiym23> lovemuffin: what exactly are you trying to do?
22:50 < lovemuffin> oh yea also, so it works the delegation , but b is not an instance of a, which sucks, but can't have it all since this seems like the only way to do it
22:51 < lovemuffin> othiym23: basically if there's ES6 proxies, i can mimic inheritance like so, b.property, if it doesn't exist on b, goto a.property. and b has its own EE, a maintains its own EE
22:52 < othiym23> right, but what are you trying to *do*?
22:52 < othiym23> what is the change you want to see in the world, lovemuffin?
22:54 < lovemuffin> othiym23: world peace, but basically i want to pass around A but it's really B, (proxying it)
22:55 < lovemuffin> which is why the current way where b isn't really an instance of a bugs me because it might break someones code if they rely on that stuff
22:55 < lovemuffin> but i need b's EE to work because thats where im doing my own thing instead of just basically giving them a
22:56 < ljharb> can you use english instead of letters?
22:58 <@Nexxy> ljharb, .
22:58 < othiym23> lovemuffin: too techincal, what's the high level use case here?
22:58 < ljharb> Nexxy: lol i needed to tweet for some contest thing.
22:58 <@Nexxy> nerd!
22:58 < othiym23> like, are you trying to write a new kind of handler? stream a CSS+JS bundle? control a Predator drone hovering over Islamibad?
22:59 < EyePulp> othiym23: that last one.  
22:59 < EyePulp> via an iOS app
23:00 < ljharb> Nexxy: on facebook, for things that require autoshares, i just set it to "only me" and then delete it after.
23:00 < lovemuffin> othiym23: there's no really no high level use case, or well specific use case, its really just i'm going to proxy your Stream or something like that
23:00 < othiym23> but whyyyyyyyyyy
23:00 < othiym23> so far it mostly seems like you're making a shitton of gratuitous work for yourself
23:00 < lovemuffin> API compatibility , no code breakage, plug and go
23:01 < othiym23> and creating yet another edge case forest
23:01 < cTIDE> fucking love gratuitous work
23:01 <@Nexxy> ljharb, on facebok, for things that require autoshares, i just tell the author to get bent
23:01 <@Nexxy> facebok.
23:01 < lovemuffin> othiym23: its fun to at least try
23:01 < othiym23> I like facebok way more than Facebook
23:02 < othiym23> sure, not discouraging you per se, but it seems like the complications you're encountering are inevitable
23:02 < lovemuffin> oh i know, i just wanted to get others take on it if they could find a different solution
23:04 < lovemuffin> a lot of it has to do with the way EE works though
23:05 < lovemuffin> with regard with tjholowaychuk said
23:05 < lovemuffin> what*
23:05 < lovemuffin> to what* err
23:06 < othiym23> in retrospect, it's probably not a great design decision to use EEs primarily via inheritance, but it's pretty entrenched at this point
23:06 < othiym23> and now ES6 is going to have "proper" calls to super
23:07 < tjholowaychuk> anyone know of gm bindings that is not
23:07 < tjholowaychuk> graphicsmagick        Bindings to the graphicsmagick library.                       =izaakschroeder  2012-02-02 02:44
23:07 < othiym23> which makes me sigh every time I see it, but what can you do, ES6 is a monster that will devour us all
23:07 < tjholowaychuk> not that one
23:07 < othiym23> tjholowaychuk: child_process calls to the gm binary?
23:07 < tjholowaychuk> othiym23 or that :D
23:07 < tjholowaychuk> lots of those
23:07 < lovemuffin> othiym23: you always have something sunny to say about ES6
23:08 < othiym23> tjholowaychuk: when I had to do graphicsmagick stuff, that pretty much was the quickest path to victory for me
23:08 < ningu> tjholowaychuk: hey, I was trying component the other day but something about it seems very strange... if you do component install foo it installs all of foo's dependencies in their own dir under components/ but then if you do component build components/foo, it gets them *again* under components/foo
23:08 < othiym23> if you're doing a ton of graphics processing, it's inefficient, but you should probably be using canvas or whatever at that point anyway
23:08 < ningu> is that intended?
23:09 < othiym23> lovemuffin: there are things I really like about ES6, but it's going to hurt everybody's brain and I'm not sure it's worth it
23:09 < tjholowaychuk> ningu it shouldn't find "foo" on its own
23:09 < ningu> tjholowaychuk: well, I mean where foo is the correctly qualified github user + repo
23:10 < juanlargo> anyone mind if I toss out a broad, noob-ish async question for the group?
23:10 < Tacker_> Hey. I am trying to chain multiple requests from a httpServer with node, could somebody help me ?? I can't really warp my head around node.
23:11 < ningu> tjholowaychuk: anyway, I can't really tell from the docs (or lack thereof) how component is meant to be used to install and build components -- but it isn't very obvious and when I tried it, behaved oddly as I said
23:11 < ningu> Tacker_: there's your problem your head is warped
23:11 < ningu> or rather, maybe the problem is that it's not?
23:11 < tjholowaychuk> ningu component-build produces a build of the things you have installed, you dont need to pass a name to it
23:12 < juanlargo> I'm writing an module using a class pattern, and one of the methods relies on an MPC client connection
23:12 < Tacker_> Nice try ningu. As if you've never had a typo before
23:12 < ningu> tjholowaychuk: oh, right. sorry, that's what I did.
23:12 < lovemuffin> othiym23: privmsg
23:12 < ningu> tjholowaychuk: anyway it still downloads dependencies twice, in two places
23:13 < tjholowaychuk> ningu hm i dont know then, I haven't seen that
23:13 < ningu> once for install, once for build
23:13 < tjholowaychuk> component-build defintely doesn't install them
23:13 < juanlargo> it makes sense to me to want to initialize this connection outside of this class, in a different module entirely, and then simply use that active connection
23:13 < ningu> ok well if I can't figure it out I'll create an issue
23:13 < monokrome> gerard0: Are you by any chance gerardobort on github?
23:13 < tjholowaychuk> ningu sounds good, there's also #components, less clutter in here
23:14 < monokrome> Oh, don't think so.
23:14 < juanlargo> if i wanted to do that, a) does that make sense, and b) what method would you use to make sure you're not accessing the connection before it's ready
23:15 < juanlargo> i am trying to keep everything async—in my mind it makes sense to have this be blocking, but I want to avoid that if it's not the suggested pattern
23:15 < dejanr> hi, anyone being using derbyjs for real :D
23:16 < Tacker_> Is there a good way to chain http requests ?? I just don't get it on node.js
23:16 < dejanr> trying to wrap my mind arround it
23:16 < juanlargo> does subscribing to events across modules make sense?
23:17 < Tacker_> I want to send a request from an app, relay that request to another server and send that response as the response for the first request. 
23:20 < ljharb> nexxy: daemon face bok
23:21 < Tacker_> Anyone ??
23:23 < jayk> Tacker - pretty straightforward
23:24 < jayk> You have to create something to interpret the original request… and then make the request of the secondary server.
23:25 < Tacker_> I already have the request.url but I don't know how to make the second request before sending back the response for the first request. Im new to this callback paradigm so I'm not sure where to put it. 
23:26 < MI6> joyent/node: Timothy J Fontaine v0.10 * fb6dd0c : test: test name is the last elem, not second  When a test requires node t - http://git.io/HlHg0w
23:26 < jayk> No response will be sent to the original until you call response.end();
23:27 < adammw111> I'm trying to make a module that talks some obscure proprietary binary protocol, what other examples are there that I could look at for structure and which underlying modules to use?
23:28 < Tacker_> I'm inside function(request,response). What would I have to call to make the request inside that ?
23:29 < Tacker_> Thanks a lot I did not know that it would be held off until that call
23:29 < heath> so has anyone ever worked on a node repl issue where the reported issue crashes the node repl?
23:29 < heath> any suggestions for putting myself into a debugger?
23:29 < jayk> in the function passed to http.createServer(function(req, res) { …. }); , use the req to figure out what you want to relay.  Then make the http client request.. http.request(options, function(response) { … }
23:30 < Tacker_> So I have create a seperate client and use that?
23:30 < ljharb> separate
23:30 < jayk> yes.  to do what you want.  
23:30 < Tacker_> Yeah I have the request.url. That's the one I want to request
23:30 < jayk> in the function passed to request, you can pipe the response into the original res…
23:30 < jayk> just remember to relay the headers, or nothing will work.
23:30 < Tacker_> Thanks I'll try that out
23:31 < jayk> no prob.
23:31 < Tacker_> What do you mean by that?
23:31 < Tacker_> Im not native english sorry
23:31 < MI6> joyent/node: Ben Noordhuis master * 1a65154 : Merge remote-tracking branch 'origin/v0.10'  Conflicts: 	deps/v8/src/obje (+17 more commits) - http://git.io/by0nWA
23:32 < jayk> in the response to your http request - you will have http headers.  response.headers
23:33 < jayk> you need to call res.setHeader() for everything in the response.headers 
23:33 < Tacker_> Send the header from the request inside the first request as the response ?
23:33 < jayk> the browser depends greatly on what is in the headers.  If you don't relay those as well as the raw content, you will have problems.
23:33 < jayk> yes.  Assuming you are just proxying the request and not doing something to the data in the process.
23:34 < Tacker_> No im not doing anything. Just relay it. Send a request from iphone to node on heroku. Relay that request to a different server. That will produce a json, send that to node and then send the json to the app. 
23:35 < jayk> well - that might be different.  If you know it's just json, you can just treat it as json and treat the response as a JSON response generated anywhere else.
23:49 < heath> anyone ever worked on a node issue where the repl just crashes... any helpful tools to use in debugging this?
23:49 < lbod> this'll be stupid but http://pastebin.com/X0vHRu7r  the table tag terminates before the iterator
23:50 < lbod> maybe a jade question
23:50 < bnoordhuis> heath: define 'crashes'? throws an exception or segfaults?
23:51 < deepy> is there any postgresql library that compiles under bsd?
23:53 < jayk> deepy: http://www.freebsd.org/ports/databases.html#postgresql-client-9.0.11 ?
23:53 < deepy> I have the literal client installed and working, but I want to access it from Node.js
23:53 < RLa> how stable is the node's master branch?
23:54 < RLa> what is literal client?
23:54 < deepy> postgresql-client
23:55 < jayk> deepy: I misunderstood.  https://npmjs.org/package/orm ?
23:56 < deepy> I don't want an orm, I want to speak SQL
23:57 < jayk> *shrug* 
23:58 < jayk> sorry.  Don't use it on node atm.
23:58 < deepy> huh?
23:58 < ningu> deepy: gesundheit
23:58 < ningu> deepy: that's an sql generator for node
23:58 < ningu> and it works well in my experience
23:58 < ningu> if you just want to write your own sql you don't need it
23:58 < jayk> deepy: I don't use postgres on node.  Just saw the orm thing the other day and thought it might help
23:59 < deepy> ningu: it depends on pg which fails to compile for me
23:59 < deepy> gmake: flock: Command not found
23:59 < deepy> D:
--- Log closed Tue Mar 26 00:00:23 2013
