--- Log opened Sat Sep 15 00:00:19 2012
00:03 < Orbitrix> https://github.com/videlalvaro/gifsockets ROFL
00:03 < Orbitrix> screw node, gif sockets are the future
00:04 < freewil> lol wtf
00:05 < freewil> is it actually possible to stream data is this way
00:05 < Orbitrix> yep, all the way back to Ie6
00:05 < freewil> KISS - gifsockets!
00:06 < freewil> bonus - the loading bar never finishes!
00:07 < Tobsn> what?
00:07 < Tobsn> a gif is a solid image until the browser renders it as animated gif
00:07 < Tobsn> you cant just send data as frame - its not send per frame its send as one data block
00:09 < Tobsn> ah that thing is just long polling the same gif
00:09 < Tobsn> thats why it works
00:09 < Tobsn> meh...
00:11 < freewil> pretty amazing technology
00:11 < freewil> now we've got these hipsters with websockets and all this hippity-hoppity
00:16 < nohu> id say that the gif from gifsockets front page
00:16 < nohu> adds so much value
00:17 < freewil> nohu, yeah without that it wouldnt be nearly as interesting
00:43 < othiym23> why are so many people stuck on Node 0.6?
00:43 < othiym23> so frustrating
00:43 < othiym23> so many huge improvements I could make to my code if I could force people to upgrade
00:51 < ang3lfir3> you can always force people to upgrade ... but that only works if the desire for what you offer is high enough 
00:51 < ang3lfir3> unless you are talking about PaaS vendors .... 
00:56 < AAA_awright> othiym23: Well then force people to upgrade
00:56 < AAA_awright> You think 0.8 is good? I work on master
01:00 < othiym23> AAA_awright: I'm a tooling vendor, I can't force anybody to do anything
01:00 < othiym23> fortunately, it took me all of 15 minutes to move my code over to 0.6
01:00 < AAA_awright> Well not literally
01:00 < othiym23> I'll miss you, process.hrtime
01:00 < othiym23> you're a good friend
01:00 < AAA_awright> But there's nothing stopping you from dropping support
01:01 < AAA_awright> (as you should)
01:01 < othiym23> AAA_awright: yeah, but Node support is trying to establish a toehold at New Relic
01:01 < othiym23> our customers are bigger than I am, in effect
01:01 < othiym23> we support a crazy-long list of old versions of Ruby and PHP, too
01:02 < AAA_awright> Clinging to Old Versions is a Bad Thing for the Ecosystem, guys
01:02 < othiym23> I agree!
01:02 < othiym23> OTOH, Voxer hasn't been able to get on 0.8 yet either
01:03 < othiym23> and some of my testers only upgrade on need, which is not a crazy ops strategy
01:04 < AAA_awright> What's stopping you from saying "Hey, you're using a version of Node that's three months old, we're not supporting this version anymore"
01:04 < AAA_awright> "It's not complex to upgrade, etc"
01:04 < othiym23> they won't pay us to use our product?
01:05 < othiym23> and in a former life, it took a team I was on several months to make the cut over from 0.4 to 0.6
01:05 < othiym23> shipping features took priority over being on the latest and greatest version of Node
01:05 < othiym23> it happens!
01:06 < AAA_awright> If you can't keep up for even three months perhaps Node.js isn't the platform for you? I mean really, what's the excuse >_<
01:06 < AAA_awright> ("you" in general)
01:06 < othiym23> again, I'm sympathetic to your line of reasoning, but y'know
01:06 < othiym23> The Enterprise
01:07 < othiym23> also, 0.6.21 came out like, what, 3 days ago?
01:07 < taky> lol
01:07 < AAA_awright> And on that line of reasoning... ryah, what's holding up version 1.0.0? Keeping on version 0 while so many people are actively depending on something semantically meaningful isn't very nice
01:08 < taky> i love javascript right now because its like the wild wild west
01:08 < othiym23> ryah's too busy riding bikes and growing his sideburns in Greenpoint or whatever to care
01:08 < taky> everyones trying to develop a standard
01:08 < othiym23> isaacs is just waiting for libuv to settle down before 1.0
01:08 < AAA_awright> I don't see Node.js going very adventurous places because of the stupid design stuff that's been going on since 0.4
01:09 < othiym23> does it need to?
01:09 < AAA_awright> Well if you want adoption of any sort, yeah
01:09 < othiym23> I mean, I'm regularly blowing my coworkers' minds with how much throughput I can get out of Node
01:09 < othiym23> the architecture is what it is
01:09 < AAA_awright> It's as if the developers want Node.js to have a hard ceiling on the number of users
01:10 < othiym23> for a certain subset of problems, it's a really sweet solution
01:10 < othiym23> you want more, use Go or Erlang or something
01:10 < taky> you know what i was doing before node? making perl daemons
01:10 < taky> fuck that
01:10 < AAA_awright> Also, waiting around for a certain library is no excuse to not release a 1.0
01:10 < AAA_awright> If you have to break reverse compatability, no problem, just don't forget to increment the revision number
01:11 < AAA_awright> Node.js to this point has no problem with the former, but it's the latter requirement that's the problem
01:12 < othiym23> libuv isn't "a certain library"
01:12 < othiym23> it's the beating heart of Node, and it's still changing a lot
01:12 < othiym23> and it's improving!
01:12 < othiym23> luvit and similar things show how much more powerful it's getting
01:12 < AAA_awright> It doesn't matter if it's zlib or glibc, it's a library
01:12 < othiym23> and I'm fully sympathetic with the idea of wresting it free from libeio and whatever other dependencies they're trying to remove from it
01:13 < othiym23> yeah, and so's V8, but without libuv and V8, Node ENOEXIST
01:13 < AAA_awright> And actually the core libraries shouldn't matter too much to the public API. If you replace out libeio and other OS-specific libs with libuv, great, release 1.1
01:13 < othiym23> and isaacs and mikeal et al are pretty serious about freezing the Node API at 1.0, which I think is a laudable goal
01:14 < AAA_awright> Freezing in what manner?
01:14 < AAA_awright> Saying you're never going to change the API ever again is an outright declaration of abandonment
01:15 < AAA_awright> You can and should change the API if it makes sense, that's why we have version numbers, my point is unfortunately Node.js makes no use of this
01:15 < AAA_awright> I've had to deal with two reverse-incompatible changes in the supposedly "stable" v0.8 branch alone
01:16 < AAA_awright> Not bugs, actual feature changes
01:16 < AAA_awright> (technically they should be bugs, because it wasn't accompanied by a major revision bump.)
01:17 < othiym23> yeah, that's cuz it's not at 1.0 yet
01:17 < othiym23> the basic idea is that if there need to be backwards incompatible changes to the core platform post 1.0, call it Node2 or Node++ or luvit or Node.scm or whatever
01:17 < othiym23> let a million forks bloom!
01:18 < othiym23> I think it's a sound strategy, and it puts the emphasis on the ecosystem, where it belongs
01:18 < othiym23> you want a fork that uses promises instead of callbacks, go to town
01:18 < othiym23> you want evented I/O on top of Dart, start Node.dart and have a ball
01:18 < AAA_awright> Well I'm not talking about forks, I'm talking about official development
01:19 < AAA_awright> The idea is you're supposed to release versions, and indicate when you break them
01:19 < othiym23> sure, but there's room for performance improvements even once the new core API is frozen
01:19 < othiym23> like, say, speeding up SSL transaction handshakes by an order of magnitude or two
01:19 < AAA_awright> isaacs cheerfully talks good things about this, even writing the semver module, but then they completely fail to actually implement it. Like, what?
01:20 < othiym23> also, I think your beef is with isaacs and mikeal and bnoordhuis, not me ;)
01:20 < ang3lfir3> are you guys arguing about version numbers? 
01:20 < othiym23> I think somebody is, but not me
01:21 < othiym23> meanwhile, I got my stuff working under 0.6 while we were having this fascinating discussion
01:21 < ang3lfir3> surprised to see teachers taking kids on field trips already
01:21 < AAA_awright> othiym23: You seem to be arguing in favor of a frozen-at-a-point-in-time model of development, which I loathe
01:21 < AAA_awright> Right?
01:22 < AAA_awright> Take Ubuntu. They say, let's randomly freeze any changes to the UI that we'll call the next version/release.
01:23 < AAA_awright> The releases are completely time based without any meaning whatsoever. Seems to be the same thing for Chromium and Mozilla now, too
01:25 < ang3lfir3> see this kinda crap is why we use iso 8601 like dates for our version numbers .... 
01:25 < ang3lfir3> we release when ever we want ... and its because we release new features ... 
01:25 < ang3lfir3> patches and bug fixes..... rev version
01:25 < ang3lfir3> because its a diff day
01:25 < AAA_awright> ang3lfir3: Right, that's exactly the sort of thing that is the bane of software releases
01:26 < ang3lfir3> false
01:26 < AAA_awright> Oh wait, you're using that?
01:27 < ang3lfir3> we do that for a private product
01:27 < AAA_awright> ang3lfir3: Dates don't tell you anything about the release, except to ID it from the other releases. That's rather useless as a version number.
01:28 < ang3lfir3> maybe for dev tools.... but for products .... it tells the customers the one thing they care about .... its not the same as the old version
01:28 < ang3lfir3> i am talking about a product that business users use ..... you guys build stuff like that right.... things ppl pay for?
01:28 < othiym23> for my private stuff, I call the first version I release 1
01:28 < othiym23> the next release is 2
01:28 < othiym23> etc
01:28 < othiym23> try to write a decent changelog
01:29 < othiym23> not get bogged down in Talmudic parsing of the deontological ramifications of versioning schemes
01:29 < ang3lfir3> changelog > version number ..... at least via importance ... 
01:29 < othiym23> plus every piece of software I've written for the last 5 years has been managed by either hg or git, in which case there's more detail about what I've been doing should anyone care
01:30 < AAA_awright> The point of a version number is you want to see at a glance, is there anything that changed that I might care about? Is it a reverse-incompatible change, or just a bugfix?
01:31 < ang3lfir3> thats the point of a change log .... because numbers are just numbers and guaranteed some asshat will do it wrong.... so prefer the changelog over the version number ...  
01:31 < luite> is it possible to enumerate all global variables (inside a module) in node?
01:32 < AAA_awright> Maybe you as a person can look up the changelog, but what about a dynamically linked library? Is libstdc++.so.6 the same as libstdc++.so.5?
01:33 < AAA_awright> Can my program built against libstdc++.so.5 work when I load libstdc++.so.6? (yes)
01:33 < AAA_awright> (But not necessarially, actually)
01:34 < AAA_awright> luite: You shouldn't need to do that in production, but try Object.keys(this)
01:35 < luite> AAA_awright: yeah it's a bit of a hack for debugging :)
01:35 < AAA_awright> Which is slightly different than the global variable
01:35 < othiym23> APIs and shared objects and other systems with software-enforced semantics for versions can and should have higher standards for versioning
01:35 < othiym23> for everything else, a version is a string
01:35 < othiym23> and not a particularly interesting one, at that
01:36 < AAA_awright> othiym23: And Node.js is included
01:36 < AAA_awright> Is Node.js not a library?
01:36 < luite> AAA_awright: hm, that's an empty array
01:36 < AAA_awright> It's loaded on top of ECMAScript
01:36 < othiym23> Node.js is definitely NOT included
01:36 < othiym23> it's a platform for writing apps
01:37 < AAA_awright> luite: Hmm, global or GLOBAL or one of a number of other variables should list all the globally defined stuff, including Array and family
01:37 < othiym23> whatever versioning it has associated with it is a community convention, even if you're not / following semver
01:38 < AAA_awright> othiym23: Node.js is most definitely a library, plus a simple application to initially load the first module
01:38 < othiym23> there's a metric hojillion pieces of software I can't get to install on my laptop because they don't compile with clang and / or llvm and need a "real" GCC 4.2 front end
01:38 < othiym23> I definitely consider that situation to be analogous
01:39 < AAA_awright> Well because they don't really use C++ then, they use GCC's special dialect of it
01:39 < othiym23> I think considering the Node platform a library is forcibly shoving a semantic category onto an object it doesn't fit except for twisty rhetorical purposes on the internet
01:39 < AAA_awright> I compile with icc, I have the same problem
01:40 < luite> AAA_awright: oh i only want the global things declared inside the module
01:40 < othiym23> it's not just C++, there are features in regular ol' C (pragmas, semantics, etc) that clange doesn't or won't handle
01:40 < othiym23> luite: you're screwed, that's not how JavaScript works
01:40 < AAA_awright> luite: `this`, if not bound to anything else, should refer to the global context
01:40 < AAA_awright> I mean, the variables which exist
01:40 < othiym23> AAA_awright: depends on whether you're using strict or not
01:40 < luite> yeah but it's also still empty
01:41 < AAA_awright> I was going to say, that changes in strict mode
01:41 < othiym23> and the global "this" doesn't discriminate between scopes -- a variable is global or it isn't
01:42 < othiym23> them's the breaks, in JavaScript's crazy mixed-up world of scoping
01:45 < Havvy> Has anybody made a Node.js library for the MediaWiki API?
01:45 < luite> AAA_awright: hm, ok it looks like it's not straightforward, i guess i'll just collect all global variables from the AST and export them
01:47 < Havvy> I can't find any in npm, and all of the js libs linked to by the MediaWiki API page are for the web.
01:58 <@ryah> AAA_awright: talk to isaacs about 1.0
02:01 < AAA_awright> I'm guessing it doesn't have too much to do with libuv
02:01 < AAA_awright> Havvy: Node.js is for the Web, too, you know :)
02:02 < Havvy> Well, it's not a browser environment, is what I meant.
02:04 < AAA_awright> Havvy: What features are you looking for in particular? The Mediawiki API is mostly HTTP based?
02:05 < Havvy> Well, a simple JS wrapper would do well.  I need to find all pages in a wiki in [[Category:3.5e]], and then add {{Navboxes}} at the end of the page.
02:13 < termite> I am having an issue with the mongodb driver.  I am trying to do a search by "_id" in a list and I can't seem to get it to work
02:14 < termite> anyone familiar with the mongo driver on?
02:17 < termite> nvm got it
02:19 < pyrotechnick> guybrush: are you still using nexus?
02:26 < AAA_awright> Havvy: That sounds like a better job for PHP. I remember doing something similar a while ago, but that was a LONG while ago
02:26 < AAA_awright> I mean, with PHP
02:27 < Havvy> The only way I can find to run PHP is via a web server...
02:27 < AAA_awright> Unless your bot is going to be running a server it's probably easier to get a PHP script to do it
02:27 < AAA_awright> No? I run PHP without a web server
02:27 < AAA_awright> I was writing servers in PHP that way, actually
02:27 < Havvy> Also, learning all the idosyncracies of PHP...
02:27 < AAA_awright> Not something I ever want to do again
02:32 < draginx> http://reddit.com/r/lolphp
02:32 < jocafa> http://www.phpsadness.com/
02:35 < guybrush> pyrotechnick: yes, but i am working on a complete new version - since the current 0.0.49 has too much limitations
02:35 < pyrotechnick> it looks really badass
02:35 < pyrotechnick> my project is similar and i was looking for a name when i found yours :P
02:36 < guybrush> its pretty cool, you might want to take a look into fleet though
02:36 < guybrush> haha :D
02:36 < pyrotechnick> yeah i see fleet as just a component to something like nexus though
02:36 < guybrush> the thing with fleet is, it runs all on one process - when that dies its over
02:36 < guybrush> at least you cant reattach the old child-processes
02:37 < guybrush> with nexus it just can everything die
02:37 < guybrush> also it has reboot-option, which saved my life a view times now
02:51 < mscdex> node.js rules!
02:54 < AAA_awright> draginx: Why the hate for PHP
02:54 < draginx> AAA_awright: because I code in it for 8 hours a day at work :)
02:55 < draginx> But I convinced the boss to let me use NodeJS for the new project
02:55 < draginx> and so far I'm using sequelizejs... it's pretty decent but there ar esome architectural flaws, I'm keeping my eyes on Iron
02:55 < draginx> Why are you up so late AAA_awright? :)
02:56 < AAA_awright> draginx: It's only just sunset
02:56 < draginx> ah
02:58 < AAA_awright> Also, someone has way too much time on their hands: http://phpjs.hertzen.com/
02:58 < AAA_awright> Here, let me take some of that excess time from you
03:00 < mscdex> someone compile php with emscripten!
03:00 < mscdex> or better yet, Go!
03:00 < mscdex> then we can appease everyone!
03:01 < AAA_awright> I think I want to use that to create a template library for Node.js
03:02 < mscdex> uh oh, i think npmjs.org is down
03:03 < draginx> lol @ this phpjs thing
03:31 < draginx> does anyone know if bcrypt.hash on the last option (the callback) I can just do "cb(res)" or do I need to do "cb(err, res)" ?
03:33 < draginx> https://github.com/ncb000gt/node.bcrypt.js/blob/master/src/bcrypt_node.cc#L386 im guessing from this line that its a no
03:42 < othiym23> AAA_awright: I heard that Node.js 1.0 is waiting on libuv stabiling from isaacs, in fact
03:42 < othiym23> last week, even!
03:42 < othiym23> at camp!
03:42 < AAA_awright> As that may be that's not a very good reason >_>
03:43 < AAA_awright> If you have public software other people are depending on, there's no good reason for major version zero
03:43 < othiym23> there is absolutely nothing stopping you from making your own fork and running it however you like
03:44 < AAA_awright> I've been working with ECMAScript engines long before Node.js
03:44 < AAA_awright> It's not something I particularly enjoy
03:44 < draginx> no good reason for major version zero? O_o
03:44 < draginx> so u want it to start at 1.1? :D
03:44 < AAA_awright> But then again, it was Spidermonkey
03:45 < AAA_awright> draginx: There's no good reason for releasing major version zero. I have a few projects in development without revision numbers, for instance.
03:45 < AAA_awright> No one uses them so it's not an issue.
03:46 < AAA_awright> When I do release software, take my rdf module, I released 1.0 as quickly as possible. When I made bugfixes or changes, I updated the appropriate revision number.
03:46 < AAA_awright> It's really not that hard to do, guys
03:46 < chapel> AAA_awright: lol
03:46 <@Nexxy> OH MY GOD YOUR 0 SHOULD BE A 1
03:46 <@Nexxy> RAAAAGGEEEEE
03:46 < chapel> changing the number isn't going to change anything
03:47 <@Nexxy> I don't think I can count the number of times I've seen you bitching about versioning, AAA_awright 
03:47 <@Nexxy> lol
03:47 < draginx> lol
03:47 <@Nexxy> pick a new gripe ;P
03:47 < chapel> if it were exactly as it is now (code wise) but version > 1, would you be more happy?
03:47 < draginx> but seriously there are no good nodejs orms for pgsql :P
03:47 < draginx> sequel is decent but meh
03:47 < chapel> draginx: make one
03:47 < chapel> :)
03:47 < othiym23> draginx: what do you want from an ORM in Node?
03:48 <@Nexxy> that's because the people that actually use pgsql know better than to work with ORMs
03:48 < draginx> othiym23: pgsql support and the ability to create validations and hooks before_save, before_delete, etc.
03:48 < othiym23> I wasn't going to say it, Nexxy
03:48 < othiym23> thank you
03:48 < draginx> Nexxy: it's very true :)
03:48 < draginx> But I do like the thought of being able to use an ORM
03:48 < othiym23> does Geddy have Railsy validators in it?
03:49 < draginx> I dont mind the ORM as long as I can degrade down to raw SQL
03:49 < chapel> draginx: you don't need an orm for those things
03:49 < draginx> which sequelize allows
03:49 < draginx> chapel: troof
03:49 < chapel> there are a few options I believe that provide that
03:49 < AAA_awright> Nexxy: Really? I've complained about it, but for particular reasons, and not very often
03:49 < draginx> chapel: que?
03:49 <@Nexxy> did I mention that I'm not that great with numbers?
03:49 < chapel> draginx: the hook/before/after stuff
03:49 < draginx> F activerecord though, id love to see a straight port of datamapper to node
03:49 < chapel> similar to mongoose hooks/before/after
03:50 < draginx> chapel: u mean like... validating the info before I do an INSERT query? xD
03:50 < othiym23> it takes like five minutes to write a set of proxy methods to add your own hooks to a callback
03:50 < chapel> well
03:50 < draginx> idk.. i think its kind of silly trying to move to an MVC structure without doing the models :P
03:50 < chapel> draginx: purely just hooks
03:50 < draginx> right
03:50 < othiym23> probably another couple hours to wrap it up in some kinda middleware
03:50 < chapel> ways to do functions before/after
03:51 < draginx> with sequeljs or pure js?
03:51 < chapel> just js, its not related to an orm
03:51 < othiym23> pure JS
03:51 < chapel> my point I guess
03:51 < chapel> othiym23: yeah
03:52 < othiym23> Angus Croll has written about that stuff a bunch
03:55 < othiym23> draginx: take a look at this gist: https://gist.github.com/2864853
03:55 < othiym23> Angus gave a pretty great talk on this at Fluent, but I guess the video is only available to people who paid to go
03:55 < draginx> eh
03:55 < draginx> doesnt seem like a good solution
03:56 < draginx> i thought u meant I can extend this functionality
03:56 < nmartin> anyone have any example code of using ffi with a library with pointers and structs?  I'm lost trying to wrap pamauth with ffi in node.js
03:56 < draginx> by this I mean sequelizejs's
03:56 < nmartin> i got the simpel examples working, but get gobs of segfaults trying to call pamauth.so
03:57 < nmartin> s/simpel/simple/
03:57 < othiym23> I don't think you need much but the raw DB driver and that advice code to give yourself a little AOP for database access
03:57 < othiym23> ORMs don't make much sense to me in monotyped languages
03:57 < chapel> draginx: you could extend sequelize, but it wouldn't be straightforward
03:58 < draginx> right
03:58 < draginx> hmm
03:58 < chapel> draginx: for instance, you could take the save function
03:58 < chapel> and extend it with before/after
03:58 < draginx> but how?
03:59 < draginx> I would have to wrap the entire thing in another function right?
03:59 < chapel> well effectively
03:59 < draginx> right
04:00 < draginx> kind of defeats the purpose
04:00 < chapel> well not really, thats how its done, just with a nicer api
04:00 < draginx> although I do like the idea of being able to patch work within the framework to extend helpers/plugins
04:00 < draginx> right
04:00 < draginx> btw sequeljs doesnt have a real before/after hook
04:00 < draginx> which is meh
04:01 < chapel> thats why you would add it yourself
04:02 < chapel> bah he left
04:02 < chapel> https://github.com/bnoguchi/hooks-js
04:02 < chapel> draginx: https://github.com/bnoguchi/hooks-js
04:03 < draginx> thats very cool
04:03 < draginx> but in all seriousness why is it such a bad idea to use an ORM?
04:04 < draginx> I mean, if you can map out data and have pgsql, mysql, redis, and riak all interact with one another using the same model mechanism (see DataMapper 2.0 and relational algebra) why is it such a bad idea?
04:04 < chapel> draginx: its only bad if you don't know how or why not to use one :)
04:04 < draginx> pre-defined constraints to ensure data is cleansed before inserting into the db, etc.
04:04 < othiym23> it's not bad, it's just overkill most of the time
04:04 < draginx> ahh i see now
04:05 < draginx> I mean sure if you're just making a simple API
04:05 < othiym23> my experience with heavyweight ORMs, of which I've used about a million, is that sooner or later the promise of abstract object models transparently getting persisted to non-object stores proves to be a toxic chimera
04:05 < draginx> right
04:05 < chapel> other problems are lock in and problems debugging issues
04:05 < othiym23> I have lots of scars from trying to figure out why the hell Hibernate does anything
04:06 < draginx> I think thats more of a .. flaw in the ORM's architecture itself than ORM itself u know?
04:06 < othiym23> it's inherent
04:06 < othiym23> the object-relational divide is real
04:06 < draginx> mm I dont think so
04:06 < othiym23> it's less of a problem with document stores or kv stores, but then you also get less value out of having an ORM
04:06 < draginx> Just because an ideal one hasn't been made doesn't mean it cannot
04:06 < draginx> right
04:06 < chapel> so is mongoose an orm, since its more object-object ?
04:06 < chapel> and less object relational
04:07 < othiym23> look at a solution like single-table inheritance vs one like multiple relations for individual subclasses
04:07 < othiym23> it's always going to be a judgment call to figure out which is more appropriate to solve a given problem
04:07 < othiym23> that's not something you can push off to tooling
04:07 < othiym23> chapel: better question: is MongoDB relational? ;)
04:08 < chapel> heh
04:08 < othiym23> you can argue either way at this point
04:08 < chapel> it has relational like features
04:08 < othiym23> it has most of the operators of the relational algebra, implemented in an unfriendly way
04:08 < chapel> its almost like a built in orm on top of a document/kv db
04:09 < othiym23> there's nothing stopping you from storing relations in relations in the relational model, which is sorta like putting documents in collections inasmuch as you can make a document look like a collection
04:09 < timeturner> mongodb is a very versatile database
04:09 < timeturner> I realized that when i started using redis from mongo
04:09 < othiym23> that's actually my main problem with MongoDB, aside from its resource hogginess
04:10 < timeturner> redis is the best representation of the "ideal" nosql database
04:11 < othiym23> timeturner: you think?
04:11 < othiym23> I think there's any number of data stores that could make that claim, depending on what you're looking for
04:11 < othiym23> Riak's got a lot of interesting things going on, memcached has simplicity on its side, Neo4J is a pretty OK graph store, etc
04:13 < draginx> redis :D
04:13 < othiym23> don't get me wrong, I like Redis a lot, I jut have a hard time calling anything "ideal"
04:14 < othiym23> I find the number of "ORMs" for Redis kind of disturbing, though
04:14 < chapel> everything has trade offs
04:14 < timeturner> ok ideal is the bad word
04:15 < timeturner> more like, closest to the definition
04:15 < timeturner> of nosql
04:15 < timeturner> i dunno
04:15 < othiym23> sorry, didn't mean to put you on the spot
04:15 < timeturner> nosql doesn't really have a concrete definition
04:15 < timeturner> haha, yeah I know
04:15 < timeturner> but you're right
04:16 < ccowan_> I would say the definition of NoSQL is a Database or Store that you access without using SQL.
04:16 < timeturner> Not Only SQL
04:16 < timeturner> without sql is a misconception
04:16 < timeturner> but without the query language itself, yes
04:17 < timeturner> concept-wise, some concepts of SQL may be used
04:17 < timeturner> kind of like in mongo
04:17 < othiym23> all I know is that I will never get used to Mongo's query syntax
04:23 < mscdex> NeinSQL
05:00 < ccowan_> I have an ExpressJS app with some web servcies and I'm making a call to the same app using the mikeal/request library and I'm getting this error: http://www.evernote.com/shard/s3/sh/1a4c882c-ca64-48a9-86e5-0f0bc090216a/2e232ea8cf7fcf1d06541017fd807cc2
05:00 < ccowan_> anyone see that before?
05:08 < aarobc> Greetings!
05:09 < aarobc> Is there a way to like do a get request to nodejs?
05:10 < SomeoneWeird> aarobc, have a look at 'restler'
05:10 < SomeoneWeird> easiest way todo basic requests
05:13 < aarobc> SomeoneWeird: so, like I'm wanting to recieve the GET, like how in php you can do that with $var1 = $_GET['paramName'];
05:13 < other_guy> Alright, I'm dying here.  There has to be a better way to deal with optional function arguments.
05:13 < SomeoneWeird> oh, have a look at express and bodyparser aarobc 
05:14 < SomeoneWeird> other_guy, function a(cb) { if(cb) { cb(); } }; a(); a(function() { console.log('lol'); });
05:14 < owen1> is there any way to view my markdown files before pushing them to github?
05:14 < other_guy> SomeoneWeird, yeah… I'm currently doing it like this...
05:15 < other_guy> http://pastebin.com/4bvhsXuz
05:15 < other_guy> Which is a version of that.
05:16 < other_guy> The problem is that now I want another optional parameter between arg[1] and arg[arg.length-2]
05:17 < evitable> anyone know of a client side router that makes use of history but has a fallback to hash-based addresses?
05:18 < evitable> or am i looking for the wrong thing?
05:18 < evitable> i'd like to be able to provide direct links to different games, but the app itself is just one page
05:19 < evitable> i've been looking at backbone but i don't want the other stuff from it
05:19 < evitable> (or underscore)
05:20 < other_guy> I need some kind of useful repeatable pattern for handling optional arguments, dependencies on those arguments, and gaps in optional arguments.
05:20 < evitable> pass an object?
05:20 < other_guy> Params objects… no way
05:20 < evitable> when my params get complex that's what i wind up doing, it's just much simpler
05:21 <@Nexxy> other_guy, optimist ;o
05:21 <@Nexxy> https://github.com/substack/node-optimist
05:21 < evitable> oh, you mean command line arguments?
05:21 < evitable> optimist is cool
05:21 < gkatsev> is there a node-pessimist?
05:22 < evitable> i believe so :)
05:22 < other_guy> Nexxy, not CLI
05:22 <@Nexxy> other_guy, well then
05:22 < other_guy> :-)
05:22 <@Nexxy> :P
05:23 < other_guy> But optimist for function arguments would be nice.
05:23 < evitable> why would you choose that over passing an object?
05:23 < evitable> it'd be way more complex than necessary
05:23 < other_guy> Because I seriously seriously hate API's that present params objects to me.
05:23 <@Nexxy> I like using optional arguments
05:23 < evitable> well you asked for a pattern. it's both a common and useful one, heh
05:24 < other_guy> I constantly have to refer to the documentation to remember what all the keys are called
05:24 < evitable> it's much better than juggling parameters and trying to infer what's what by their types
05:24 < evitable> but you can do that too if you want *shrug*
05:24 < other_guy> well it's much better for me the developer of the API, but much worse for the people who matter, the people who have to use my API :-)
05:24 < evitable> i'd rather remember what a key is called than try to remember the order of parameters ;)
05:25 < other_guy> yeah, there's an 'argument' to be made for that.
05:25 < evitable> passing a command-line string like optimist would take would be worse than passing json-encoded strings of objects though
05:25 < other_guy> Hey OH!
05:25 < other_guy> Pun!
05:25 <@Nexxy> ._.
05:25 < evitable> badum-tsk
05:25 < other_guy> lol
05:26 < other_guy> I'm sadly very proud of myself for that :-)
05:26 < evitable> right so... routers? :P
05:30 < other_guy> evitable, I think the Ember.js router will do that for you.
05:31 < evitable> i was looking at ember, is the router separate or something?
05:32 < other_guy> It's separable
05:32 < evitable> ah, hmmm
05:32 < evitable> i'll check it out
05:33 < other_guy> We're using Ember here at Coradine, and with exception of the asstastic documentation, it's been a real treat of a framework to work with.
05:33 < evitable> ember looked pretty neat, but in the end i didn't need most of what it offers
05:33 < other_guy> Very Cocoa-esque
05:33 < evitable> i'm trying not to get bogged down in endless libraries, you know?
05:34 < other_guy> I know exactly what you mean
05:34 < other_guy> That's why we ended up on it.
05:34 < evitable> yeah, even trying to pick and choose certain minimal things it's coming close to ember's size anyway
05:35 < evitable> well, i guess not
05:35 < evitable> socket.io isn't minified here
05:35 < other_guy> It's really been the perfect blend of doesn't do too much (like its predecessor) and doesn't do too little (requiring you to piecemeal shit together).
05:35 < evitable> i confess part of my aversion was having difficulty figuring it out
05:35 < evitable> or rather
05:35 < evitable> figuring out how to accomplish my goals with it
05:36 < other_guy> Yeah, it's a PITA to figure out at first.  Mostly for two major reasons… first, the documentation is weak.  Second, there's no standardized packager/bootstrapper… though the Iridium project seems to be taking care of #2
05:37 < other_guy> That said, you could accomplish your task as noted earlier by using Ember's controllers and routers, and just not use its models.
05:37 < evitable> yeah, i guess so
05:37 < evitable> i just don't like having a big chunk of code that i don't use ;)
05:37 < evitable> sacrifices must be made!
05:38 < other_guy> Well you don't have to load the models module at all
05:38 < other_guy> When you bootstrap it just jettison the pieces of Ember you're not using
05:38 < evitable> ah, right. modularized things
05:38 < other_guy> they're all pretty loosely coupled
05:39 < evitable> ahh, i realize what happened now
05:39 < evitable> i started looking for persistence stuff and wound up finding meteor and derby
05:40 < evitable> but it turns out that doing things that way isn't that great ;0
05:41 < evitable> do you happen to know of a blog or something i could read that'd help me get up to speed with how to use ember?
05:41 < other_guy> hmmmm
05:42 < other_guy> yeah… our Coradine internal engineering blog :-)  Where we've documented all our growing pains, but I can't get you access to that sadly.
05:42 < evitable> ha
05:42 < evitable> ah well :)
05:42 < other_guy> I can tell you that there's a really good series on the structure of an ember app, and the IRC channel is a good place to loiter
05:42 < other_guy> they're really enthusiastic about helping people get going… they want you to use their stuff.
05:43 < other_guy> http://code418.com/blog/2012/07/21/github-dashboard-number-1/
05:43 < other_guy> it's a 4 part series
05:43 < evitable> will definitely read, thanks :)
05:44 < other_guy> http://www.lukemelia.com/blog/archives/2012/08/23/architecting-ember-js-apps/
05:44 < other_guy> That series and that webinar were hugely helpful to the dev team here after weeks of poking and prodding.
05:45 < other_guy> evitable, gotta run, but I hope that helps.
05:45 < evitable> me too!
06:06 < cryptopsy> did node.natie merge into node.js ?.
06:12 < ccowan_> any one having issues with http.client?
06:12 < ccowan_> I'm on v0.8.8
06:16 < mansoor-s> cryptopsy, what is node.natie?
06:20 < othiym23> so sad that other_guy left
06:20 < othiym23> I could have pointed him at request
06:20 < othiym23> mikeal does all kinds of crazy stuff with optional parameters in there
06:20 < othiym23> it's gross as hell to look at the source, tho
06:21 < othiym23> also there's a bunch of crazy stuff at github.com/Gozala other_guy could have played around with
06:23 < ccowan_> I'm having issues with http.get too
06:26 < ccowan_> weird... it just cleared up without changing anything
06:37 < roland> hello guys! I need a little bit help with a node.js simple app. I have 2 servers running 1. socket.io web 2. tcp server. I want to be able to send a message to tcp server and broadcast this message to socket.io server. I have no idee if is possible or not, but if you can PLEASE help me. I can reward with a beer :) http://pastebin.com/MKVwKpb1 THANKS
06:52 < roland> hello guys! I need a little bit help with a node.js simple app. I have 2 servers running 1. socket.io web 2. tcp server. I want to be able to send a message to tcp server and broadcast this message to socket.io server. I have no idee if is possible or not, but if you can PLEASE help me. I can reward with a beer :) http://pastebin.com/MKVwKpb1 THANKS
06:53 < freewil> mmm beer
06:54 < freewil> roland, so you want to send a message from one node server to another then broadcast it?
07:13 < roland> <freewil> sorry for delay, yes that's what i want to do
07:13 < roland> i want to use php to send socket message to tcp server and nodejs to broadcast to connected users / rooms
07:14 < roland> i have my application writen in php, can't switch to express now ...
07:14 < roland> + i don;t have enough experience with node.js
07:19 < Fofr_> Hey, what's wrong with my package.json? When I run "npm install" I am receiving this error https://gist.github.com/3042f246c0c77d9794ec (my package.json and npm-debug.log included in that gist)
07:24 < roland> hello guys! I need a little bit help with a node.js simple app. I have 2 servers running 1. socket.io web 2. tcp server. I want to be able to send a message to tcp server and broadcast this message to socket.io server. I have no idee if is possible or not, but if you can PLEASE help me. I can reward with a beer :) http://pastebin.com/MKVwKpb1 THANKS
07:24 < gildean> roland: you could just make the php app just make a websocket connection to the node.js server and send the messages with some extra data or something
07:26 < roland> gildean i found http://code.google.com/p/phpws/
07:26 < roland> but i'm wondering if is fast enough
07:27 < gildean> why wouldn't it be?
07:27 < gildean> and what does the speed matter when you're sending it to another server to be broadcasted?
07:28 < roland> i want to use this for notifications
07:28 < roland> i have like 1400 rooms
07:29 < roland> i'll test it, but i found another way ... using redis subscribe / post..
07:29 < roland> wondering if is not better to use redis for this, anyway i have the sessions in redis
07:32 < dragon> it's better not to use redis unless you must.
07:33 < roland> why? bad exprience?
07:33 < Fofr_> I am using this example but maybe something has changed in the latest npm https://devcenter.heroku.com/articles/nodejs :/ Thanks for any hints
07:33 < roland> or just because is something that is not 100% needed
07:34 < nohu> A question about express. Is there a clever way to dynamically add locations to views? 
07:35 < nohu> or is it wiser to just add symlinks to /views folder?
07:45 < bradleymeck> ryah: you mentioned a long time ago about wanting to do and os and a tcp stack, did you ever do that / is there a place i can follow that
07:59 < mbalho> bradleymeck: last i heard ryan got bored with that and was trying to write a database instead
08:01 < bradleymeck> mbalho: interesting
08:06 < mbalho> bradleymeck: yea i think he said the project he found that does tcp -> kernel with a single copy was too experimental or something
08:06 < mbalho> err ethernet -> userland
08:11 < Fofr_> aaaaaaa, got it, version number must be 1.0.0 not just 1.0
09:10 < deoxxa> so i think i'm going to use upnode for a project i'm working on, anyone here played with it before?
09:11 < deoxxa> substack: if you have any tips for getting started with it, that would be awesome
09:11 < deoxxa> (i'm already r-t-ing the f-ing m)
10:41 < tonist>  @isaacs is it my password reset query that is bringing npmjs.org down? or am I just imagining stuff
11:02 < roland> guys, is there anyone here who sent php socket to socket.io?
11:03 < roland> using sockets or curl ?
11:03 < deoxxa> "sent php socket to socket.io"
11:03 < deoxxa> what
11:03 < roland> send request trough php sockets
11:03 < deoxxa> hold on aren't you the guy who i wrote an entire example for once
11:03 < deoxxa> on exactly how to do this
11:03 < roland> hm?
11:04 < roland> i didn't asked before ...
11:04 < roland> if u can give me the example, is great :)
11:04 < deoxxa> short version is "don't do it from php because that makes no sense"
11:04 < roland> why? i need to make it from php because my app is in php
11:04 < deoxxa> i'd bet good money that your php code isn't structured properly to do socket.io natively
11:05 < deoxxa> what you want is a node application with a REST-ish interface that you talk to from php
11:05 < roland> i just want 1 function to broadcast a message, json one
11:05 < deoxxa> yes
11:06 < deoxxa> but you clearly have no idea how socket.io actually works
11:06 < roland> yes, i agree with you on this :)
11:06 < deoxxa> use http://pusher.com/ and be happy
11:06 < roland> ... i want to learn
11:07 < roland> and if i make a rest app using express
11:07 < roland> how i will query from php?
11:07 < roland> using get / post
11:07 < roland> right?
11:07 < deoxxa> ##php is over there ->
11:07 < deoxxa> but yes, that's kind of it
11:07 < roland> ok, thanks a lot
11:08 < roland> can't understand why u are so nervous .. :) nwm
11:08 < roland> have a good day
11:54 < evelyette> hi
11:55 < evelyette> can anybody tell me what's the best implementation of Socket.IO that I can use on Android (in application that is not working in a browser) ?
12:05 < nathan7> evelyette: a mixture of GCM and REST magic?
12:05 < evelyette> as I said I will use the socket.io, which seems perfect for this
12:05 < evelyette> just don't know which implementation is the best + works on android
12:06 < nathan7> Do you want your app to be purely user-interaction
12:06 < nathan7> or do you want it to run in the background too?
12:06 < nathan7> because if your app is running in the background - socket.io style things are gonna eat battery
12:07 < nathan7> if you want to push things in the background, use Google Cloud Messaging
12:17 < evelyette> no I don't want to use GCM, because it's not enough, it doesn't provide enough functionality
12:17 < evelyette> I want socket.io, which uses full-duplex connection
12:17 < evelyette> nathan7, ^
12:17 < nathan7> evelyette: mhm
12:17 < evelyette> also: reference me if you want me to answer you in a timely fashion (I don't look at the irc window all the time)
12:17 < nathan7> evelyette: I'm asking you if you want to push in the background
12:17 < evelyette> yes of course, it has to be asynchronous
12:18 < nathan7> evelyette: 'in the background' as in when the app is not the thing on the screen
12:18 < evelyette> no, not as service 
12:19 < nathan7> if you're only communicating when the user is actually using your app 
12:19 < nathan7> then I'd say opening a socket is ideal
12:20 < evelyette> yup
12:20 < evelyette> I already know that
12:20 < evelyette> I just want to find a working implementation on android
12:20 < evelyette> for socket.io
12:22 < nathan7> evelyette: I'd say just open a socket
12:22 < nathan7> I was thinking about playing with dnode + dnode-java for Android things
12:24 < nathan7> evelyette: open a socket and send JSON over it or play with dnode because it's really awesome
12:26 < evelyette> nathan7, does dnode also support pubsub ?
12:26 < nathan7> evelyette: Not really
12:27 < evelyette> well I need that because I need to implement game rooms ... everything send into the room, should also be sent to other connections binded to that room == which is pubsub
12:31 < nathan7> hmm
12:31 < nathan7> Does socket.io even do pubsub?
12:31 < nathan7> I'd hook something light onto redis's pubsub
12:58 < cryptok> hi what all can be done with Node.js??
12:58 < cryptok> what makes it special?
12:58 < cryptok> what kind of apps can i make?
12:59 < termite> it's really good at making apps that have allot of IO 
13:00 < termite> a great example is a chat server where you need to scale to hundreds of people can handle variable IO from users
13:01 < cryptok> termite: thanks. i'll start by making a chat server on nodejitsu
13:01 < cryptok> any good tuts??
13:02 < termite> the intro video to node shows how to create a chat server with 50 lines of code
13:02 < cryptok> ok
13:02 < hemanth2> clean way of deleting last two elements in an object?
13:03 < deoxxa> hemanth2: the "correct" answer is that there's no such thing as the last two elements - objects are unordered
13:03 < termite> del obeject.poperty
13:03 < hemanth2> as of now i'm doing Object.keys(myObj).length…and then deleting 
13:03 < Reko> is there any way to get jade to ascend variables set in a extending template to the extendee?
13:03 < hemanth2> deoxxa: oh hmm, yeah! maps
13:04 < termite> yeah they are unordered
13:04 < hemanth2> Object.keys wont give keys in order ?
13:04 < deoxxa> hemanth2: the "i don't know how you got yourself into this mess but lol ok" answer is Object.keys(obj).slice(-2, 2).forEach(function(e) { delete obj[e]; }) or something
13:04 < deoxxa> hemanth2: in v8, at least, Object.keys returns the keys in the order they were -originally- created
13:05 < hemanth2> heh heh 
13:05 < deoxxa> hemanth2: so if you do `x.a = 1; x.b = 2; delete x.a; x.a = 1;', Object.keys(x) will probably be ["a", "b"]
13:05 < deoxxa> or it might not be
13:05 < deoxxa> who knows!
13:05 < hemanth2> deoxxa:  I'm rewritting a install.sh in shelljs :) 
13:05 < deoxxa> there's no guarantees on ordering, so you're lucky if it works at all
13:06 < hemanth2> thanks guys!
13:07 < hemanth2> deoxxa: to be specific i'm filtering OS based install deps 
13:07 < deoxxa> heh, crazy
13:10 < hemanth2> deoxxa: https://github.com/arturadib/shelljs/issues/27 some more crazy/dumb question :D
14:03 < Hoppertje> is there anyway to determine the bytes sent with tcp (with socket.io)
14:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:16 < fabienf> has anyone experienced ultra low speeds when benchmarking Express 3 on a Mac (SL)?
14:17 < fabienf> even the basic HTTPServer example is barely over 2 req/sec, at NO concurrency on my machine - must be something wrong with it
14:41 < cartela> i need some help for http://pastebin.com/rNx8ichh, i'm not getting socket.io.js anyone ?!
14:43 < nkuttler> cartela: couldn't get that to work either.. i'm just serving the client lib through a httpd..
14:44 < cartela> is some kind of bug?
14:44 < nkuttler> didn't care enough to look
14:44 < cartela> anyone? :)
14:45 < nkuttler> intesting.. right now it works..
14:46 < cartela> well, how? ahahaha for me is not working
14:47 < xial-> is it possible to write an app that performs like this
14:47 < xial-> start the app, then you can type commands via terminal to interact with the running app?
14:48 < cartela> you can make a tcp socket server :)
14:48 < draginx> is it a bad idea to use vm.runInNewContext?
14:48 < draginx> like bad as in using eval?
14:49 < cartela> so guys, anyone has any ideea why i can't serve socket.io.js like this? http://pastebin.com/rNx8ichh
14:51 < xial-> <script src="http://192.168.0.13:8080/socket.io/socket.io.js"></script> should just be <script src="socket.io/socket.io.js"></script> .. i think
14:51 < draginx> yeah
14:51 < xial-> oh nvm
14:51 < cartela> no
14:51 < cartela> is php webserver running on :80
14:51 < xial-> you running it on a different server
14:51 < xial-> got ya
14:51 < draginx> nginx cant do websockets btw O-o
14:51 < draginx> unless im mistaken and a new version came out
14:51 < cartela> who cares about nginx
14:51 < draginx> well u do since ur using it ya?
14:51 < nkuttler> draginx: there's already a module floating around you can compile
14:51 < cartela> is between clinet browser and 192.168.0.13:8080
14:52 < draginx> nkuttler: very true but the odds of the person installing that are very low
14:52 < draginx> besides haproxy is better :D
14:52 < cartela> why do i care about nginx? i don't think has any immportance in my case
14:52 < cartela> is just static content
14:52 < nkuttler> cartela: what do you get at 192.168.0.13:8080 btw?
14:52 < draginx> cartela: are you using express 3 or 2?
14:53 < cartela> express 3
14:53 < draginx> cartela: it IS important if u CANT handshake
14:53 < cartela> man, i'm not handshaking with nginx :)
14:53 < cartela> i use 2 ports
14:53 < draginx> so ur not upstreaming with nginx?
14:53 < cartela> 80 for nginx, 8080 for nodejs express socket.io
14:53 < draginx> ah ok
14:53 < draginx> just making sure before we begin :D
14:53 < cartela> :)
14:54 < cartela> check http://pastebin.com/rNx8ichh
14:54 < cartela> i wrote some comments in there ... rly have 0 clue what is happening, beside i'm a node.js beginner :D
14:55 < draginx> what happens when u go to http://192.168.0.13:8080/socket.io/socket.io.js
14:55 < draginx> like directly
14:55 < cartela> error: Cannot GET /socket.io/socket.io.js
14:55 < cartela> i get this from express i think
14:56 < draginx> yeah
14:56 < draginx> why are u using express btw..?
14:57 < addisonj> hrm... anyone use node-memcached?
14:58 < noordung> Is latest stable node hashdos-proof?
15:04 < deoxxa> noordung: define "hashdos"
15:04 < noordung> deoxxa, the DDoS attack exploiting the hash table implementations... 
15:04 < Bonuspunk> deoxxa http://www.youtube.com/watch?v=R2Cq3CLI6H8
15:05 < Bonuspunk> yes afaik it has been fixed
15:05 < deoxxa> ah
15:05 < deoxxa> well, kind of
15:05 < deoxxa> if by "fixed" you mean "never existed really"
15:05 < addisonj> was fixed a few days after node was found to be susceptible
15:06 < deoxxa> you'd need to exploit the behaviour of v8, not node
15:06 < Bonuspunk> v8 fixed it
15:06 < noordung> alright, cool! :)
15:09 < evelyette> hi, where can I get a list of ALL modules ... I remember seeing that on the official webpage, but can't find it ... any ideas ?
15:10 < draginx> What are the alternatives to using vm, require, or eval?
15:11 < deoxxa> evelyette: `$ npm search'
15:13 < evelyette> deoxxa, no I want the documentation of ALL Modules (on website) rather than just installed ones
15:13 < deoxxa> yes
15:13 < deoxxa> that's what that does
15:13 < deoxxa> but don't take my word for it, go ahead and try it out yourself
15:14 < deoxxa> if i'm wrong, you can keep being bitchy about it
15:14 < draginx> I noticed railwayjs uses require('vm') which is said to be slow and hogs up a lot of memory.. are there better alternatives to giving a file context without exports/module = function(argments) { .. } ?
15:17 < alanristic> what's the argument to automagically write to pasckage.js when using 'npm install <package-name>'? 
15:17 < chakrit> --save
15:17 < alanristic> tnx
15:23 < spion_> substack, do you have that cyclic object serializer as a module?
15:23 < spion_> as far as I can see its part of dnode-protocol somewhere (still haven't looked at the source more throughly)
15:25 < spion_> it would be really nice to have it as a module
15:25 < spion_> to be able to transfer cycling object over non-dnode connections
15:25 < spion_> to save them and load to a database, and so on
15:25 < spion_> :)
15:26 < spion_> save them to and load from*
15:32 < deoxxa> is there a way (in node) to create a sparse file?
15:37 < diversario_> Is there a way to stub-out what module requires when testing? E.g., module1 requires module2, and module2 requires some module3. I need to make module3 a noop when testing to avoid dealing with network, db and stuff.
15:45 < ddod> Question for anyone: What's the best way to escape/unescape text so that it looks exactly as it was input (for example, in a chatroom so that html can be written but rendered as text and not html)?
15:46 < deoxxa> ddod: `npm show ent'
15:48 < ddod> deoxxa: will that be enough to catch all xss vectors?
15:48 < deoxxa> yes
15:48 < deoxxa> probably a good idea to read up on how xss works though
15:49 < ddod> all right, thanks!
16:12 < evelyette> hi, I have a question about createServer;http://nodejs.org/api/http.html#http_http_createserver_requestlistener
16:12 < evelyette> the page says the following: The requestListener is a function which is automatically added to the 'request' event.
16:12 < evelyette> is the word 'added' correct, would it be better to use 'called'
16:13 < evelyette> so when a request is made to the http server, that function is automatically called because the request event has been emitted ?
16:14 < rambo> who know why i can't get cookies from data.headers / socket.io | io.set('authorization', function(data, accept){ console.log(data);});
16:14 < rambo> i can see the cookies in developer toolbar in firefox ... but i can't see them in nodejs
16:15 < plato> is it io.on('authorization')?
16:16 < rambo> i think is in set
16:16 < rambo> because i can get all headers except cookies
16:23 < rambo> so i get only this http://pastebin.com/CtNPZHJJ
16:23 < rambo> i developer toollbar i see 2 cookies, but not in here
16:24 < plato> some various stuff here http://stackoverflow.com/questions/4754232/can-i-access-a-cookie-from-socket-io
16:29 < rambo> <plato> using sio.sockets.on('connection', function(socket) { console.log(socket.handshake.headers); i get same result like i pasted in pastebin
16:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:47 < x12> I have a problem with using the serialport module on my Raspberry Pi
16:48 < x12> I'm using node-gyp configure build, but make fails with an exit code of 2
16:48 < alfredogon82> hello?
16:49 < x12> alfredogon82: Hi
16:49 < hemanth2> R.E is ok for extracting version number from a string?
16:49 < alfredogon82> im new into nodejs, i have to build an app using cloud9 with express and jade using the oauth from twitter, i already installed the express and im messing around with jade already but i have no idea where to start with the oauth thing, can someone please point me into the right direction?
16:49 < hemanth2> say : 'ruby 1.8.7 (2010-01-10 patchlevel 249) [universal-darwin10.0]\n' need to extract 1.8.7
16:50 < hemanth2> R.E is better is in't?
16:50 < x12> http://paste.debian.net/189916
16:50 < x12> That's the full error I get
16:51 < alfredogon82> hello?
16:51 < x12> alfredogon82: Hello
16:52 < alfredogon82> hi <x12> did u read what i said about the help that im looking on here?
16:52 < tcial> alek_b: I didn't see it, nop
16:53 < insin> alfredogon82: any help? https://github.com/insin/twitter-searchite/blob/master/server.js#L274-307
16:54 < tcial> Any ideas on compiling the serialport library to work on an ARM processor?
16:54 < alfredogon82> thanks insin. The thing is that im kinda confused since im not sure if i have to create the form first using jade and how then send the info... and caught it with a app.post
16:55 < alfredogon82> sorry if im too lost!
16:55 < xial-> is it possible to make a node app that once started you can type commands via your terminal to interact with it?
16:56 < tcial> xial-: http://stackoverflow.com/questions/5006821/nodejs-how-to-read-keystrokes-from-stdin
16:56 < insin> All you need to send is the token in the redirect, you don't necessarily need a form
16:56 < alfredogon82> well xial, actually im not sure, i think i have setted up everything ok since i can see the express screen and what i basically want to do is just to put two text inputs, a send button and receive that to use the twitter oauth thing
16:57 < alfredogon82> here is all i've got http://admiosexam.alfredogon82.c9.io/
16:58 < tcial> Hooray, fixed my problem with https://github.com/voodootikigod/node-serialport/issues/79#issuecomment-8215513
16:59 < tcial> nope, still broken
16:59 < tcial> Any ideas on installing libuv?>
16:59 < tcial> Any ideas on installing libuv?
17:02 < bnoordhuis> tcial: what do you mean?
17:03 < tcial> bnoordhuis: Well, I am having a problem with getting the serialport 'library' to work on a Raspberry Pi (arm). I get errors when making about 'uv_mutex_t does not name a type'. I thought this meant libuv wasn't working or installed.
17:03 < tcial> bnoordhuis: The full error is http://paste.debian.net/189916
17:04 < bnoordhuis> tcial: you need to upgrade to node 0.8, 0.6 doesn't have uv_mutex_t and friends
17:04 < jergason> hello node friends
17:04 < Hoppertje> http://pastebin.com/in6eFTNe    is this valid code... my problem is that my clients are not  being served with the socket.io file (it works locally)
17:04 < jergason> doing some express stuff, and routes are getting ugly with lots of route-specific middleware
17:05 < tcial> bnoordhuis: Ah, how do I upgrade?
17:05 < jergason> is there a clean way to wrap all the route specific middleware up in oen function or something?
17:05 < bnoordhuis> tcial: download the tarball or clone the repo, run ./configure && make install, wait a long time, done
17:05 < tcial> xD Is the long time due to the arm processor?
17:05 < bnoordhuis> yep
17:05 < jergason> so instead of app.get('/foo', hurp, durp, bar, qux), i can do app.get('/foo', fooSpecificMiddleWare()) or something?
17:06 < bnoordhuis> tcial: compilation is agonizing but it gets there, eventually
17:06 < bnoordhuis> jergason: express has its own channel, #express - you may have more luck there
17:07 < jergason> bnoordhuis: thanks, i'll check there
17:07 < tcial> bnoordhuis: Thanks :)
17:07 < CIA-118> node: Ben Noordhuis master * r35607f3 / (38 files in 5 dirs): tls, https: validate server certificate by default - http://git.io/1mp19A
17:07 < CIA-118> node: Ben Noordhuis master * r3806cf0 / (31 files in 3 dirs): test: set rejectUnauthorized in tls/https tests - http://git.io/sCyT0A
17:08 < plato> Hoppertje: possibly you need to do server.listen(3333) instead of app.listen?
17:08 < Hoppertje> hmm
17:08 < Hoppertje> ok ill try, but as i said, it works locally
17:08 < plato> since the socket.io is using server, not app
17:09 < Hoppertje> ok
17:09 < plato> the other thing, you should be doing <script src="/socket.io/socket.io.js"></script> and it should just find it 
17:10 < plato> when you hit F12 in browser, you don't see the socket.io script anywhere?
17:10 < Hoppertje> nope, it says it failed finding it
17:10 < Hoppertje> when i use an IP
17:11 < plato> http://stackoverflow.com/questions/8970880/cross-domain-socket-io ?
17:12 < Hoppertje> doesnt mention anywhere ifyou have to manually serve the socket.js file
17:12 < plato> node should figure it out
17:16 < CIA-118> libuv: Ben Noordhuis v0.8 * r9a48381 / src/unix/linux/linux-core.c : linux: improve /proc/cpuinfo parser - http://git.io/b6trDQ
17:20 < Hoppertje> plato: that was it, thanks a lot! :)
17:41 < mscdex> http://i27.tinypic.com/2yzn2u8.jpg
17:44 < plato> hooray homingli 
17:44 < plato> hoppertje*
17:45 < todd_> finally built node js under solaris 10, by change python sub process shell, remove dtrace provider, and define a condition MACRO inside sunos.c
17:46 < hemanth2> here is lol issue from me https://github.com/arturadib/shelljs/issues/27 
17:51 < bnoordhuis> todd_: what kind of issues did you run into?
17:51 < bnoordhuis> solaris (or smartos at least) is a supported platform and we test on it regularly
18:23 < todd_> <<bnoordhuis> solaris (or smartos at least) is a supported platform and we test on it regularly
18:23 < todd_> so why there is so many build troubles and almost no document at all.
18:24 < plato> 3/win 24
18:24 < nkuttler> my gosh, writing a real time in-browser app turns out to be a bigger effort than i had thought..
18:25 < todd_> hmm... do we have a similar options like SpiderMonkey's -C compile only option? 
18:25 < DeathRayDragonLu> nkuttler — whatcha using?
18:26 < nkuttler> DeathRayDragonLu: well that's the thing.. i went through several libs.. right now mongoose and socket.io.. will probably add backbone next
18:27 < DeathRayDragonLu> cool
18:27 < DeathRayDragonLu> might want to check out socketstream
18:27 < totallymike> For example, the AIX machine my software runs on has 250G of RAM
18:27 < nkuttler> DeathRayDragonLu: will do. 
18:27 < DeathRayDragonLu> lifts socket.io
18:28 < DeathRayDragonLu> and does more magi
18:28 < DeathRayDragonLu> *magic
18:28 < DeathRayDragonLu> kind of like derby.js or meteor.js, but gives you greater control
18:28 < DeathRayDragonLu> http://www.socketstream.org/
18:28 < DeathRayDragonLu> https://github.com/socketstream/socketstream
18:29 < nkuttler> yeah, didn't want to use derby or meteor because i wanted something a little more stable
18:29 < DeathRayDragonLu> I'm currently using it for an RPG w/ Redis, MongoDB, sockets, and *maybe* angular (that parts still hasn't been ironed out)
18:29 < DeathRayDragonLu> I would say sockets is more stable, though it's definitely undergoing changes
18:29 < nkuttler> socketjs?
18:29 < DeathRayDragonLu> sorry socketstream
18:30 < nkuttler> nice
18:30 < nkuttler> yeah.. ended up rolling my own auth.. not a bad experience but i'd rather not :P
18:30 < DeathRayDragonLu> ah right
18:30 < totallymike> Yep.  16 Power 7 CPUs running at 3.8 GHz, 250G of ram
18:31 < totallymike> Power 7 is modern server-level PowerPC-style architecture
18:31 < totallymike> Snazzy as all get out.  And I get to write code that runs on it.
18:31 < totallymike> However, I have to use Lotus Notes :P
18:31 < RLa> haha
18:31 < mscdex> nkuttler: there are some backbone + socket.io bridge modules out there
18:33 < mscdex> lotus! http://www.youtube.com/watch?v=8uy7micFCcA
18:36 < nkuttler> mscdex: care to recommend one?
18:50 < mscdex> nkuttler: i haven't used any of them yet, but i will be sometime soon
19:01 < mscdex> nkuttler: here's a couple i found: https://github.com/logicalparadox/backbone.iobind  https://github.com/scttnlsn/backbone.io
19:05 < draginx> I noticed railwayjs uses require('vm') which is said to be slow and hogs up a lot of memory.. are there better alternatives to giving a file context without exports.module = function(argments) { .. } ?
19:06 < diversario_> in require.extensions['.ext'] = function(module, filepath) - is 'module' here the module require was called from or what?
19:07 < mmalecki> if my framework was using `vm`... well, it wouldn't be my framework
19:07 < draginx> mmalecki: huh?
19:07 < mmalecki> I mean, require('vm')? why would a framework need it?
19:08 < draginx> to make their own context calls and to enable better functions
19:08 < draginx> u ever wonder how railwayjs can just do action('index', function(){ hello});
19:08 < draginx> without doing module.exports, etc.
19:10 < mmalecki> that's not how node works, really...
19:10 < mmalecki> I mean, okay
19:10 < draginx> *shrugs*
19:10 < draginx> im no tthe author of railwayjs :P
19:11 < mmalecki> yup :)
19:12 < diversario_> mmalecki, could you help me with node's require?
19:13 < mmalecki> diversario_: most likely, what's your question?
19:14 < jjjjohnny> does anybody know what constitutes a tick, a la process.nextTick?
19:15 < diversario_> mmalecki, I'm looking at how require works and here - Module._extensions['.js'] = function(module, filename) - what is module argument?
19:15 < mmalecki> one event loop tick
19:15 < mmalecki> diversario_: it's a Module object
19:15 < jjjjohnny> mmalecki: what all can get stuffed into an event loop
19:15 < jjjjohnny> ?
19:15 < diversario_> mmalecki, it's not the module require was called from?
19:15 < mmalecki> jjjjohnny: I/O and timers
19:15 < mmalecki> diversario_: nope
19:15 < mmalecki> diversario_: you can set module.exports on it
19:15 < mmalecki> let me show ya
19:15 < jjjjohnny> mmalecki: see https://gist.github.com/3729357
19:16 < diversario_> i'm actually doing just that
19:16 < diversario_> i'm doing some stubbing of selective require calls
19:16 < jjjjohnny> is a function call a single tick?
19:17 < diversario_> mmalecki, like this - http://stackoverflow.com/a/7037187/591427
19:18 < diversario_> mmalecki, and my confusion is - what exactly is `module`? Is it the module that will be returned from require call?
19:18 < mmalecki> diversario_: https://gist.github.com/3729371
19:18 < mmalecki> yeah
19:18 < mmalecki> it is
19:18 < diversario_> ah, so it's basically module being constructed, so to say. In progress.
19:19 < mmalecki> jjjjohnny: no, it's not a single tick
19:19 < mmalecki> I mean, function call is not a single tick
19:20 < diversario_> awesome, thank you, mmalecki 
19:21 < mmalecki> diversario_: pleasure :)
19:58 < owen1> what is the markdown for gist?
20:03 < badem4o1> More of  a general question. Hosting?
20:03 < yawnt> badem4o1: ?
20:04 < badem4o1> any recomendations
20:04 < yawnt> badem4o1: nodejitsu.com
20:05 < badem4o1> thanks
20:05 < mmalecki> +1 for nodejitsu :)
20:05 < yawnt> lol
20:06 < yawnt> by the way mmalecki 
20:06 < yawnt> wanted to ask you
20:06 < mmalecki> (agreed, I'm a bit biased)
20:06 < mmalecki> yawnt: ask away
20:06 < yawnt> you did a talk on node internals didn't you
20:06 < yawnt> ?
20:06 < yawnt> or am i mistaking with someone else :\
20:06 < mmalecki> I in fact did
20:06 < mmalecki> on webclusters sometimes ago
20:06 < yawnt> is there a video? audio? paper? pidgeon?
20:06 < mmalecki> didn't work out too well, I was sick and hangover
20:06 < yawnt> lol
20:06 < mmalecki> no, no video unfortunately
20:07 < yawnt> :( okay
20:07 < yawnt> i was in the mood for some low level stuff
20:07 < mmalecki> yawnt: I'll do one more tho
20:07 < yawnt> where?
20:08 < mmalecki> well, you'll see it
20:08 < yawnt> lol
20:08 < mmalecki> but shh
20:08 < yawnt> ok
20:08 < mmalecki> I didn't tell ya
20:08 < yawnt> ofc
20:09 < yawnt> lol found feedback on your talk on webclusters mmalecki 
20:09 < yawnt> no slides either... too bad.. i'll wait for the next one
20:10 < mmalecki> yawnt: oh? show me the feedback
20:10 < mmalecki> I never got to reading it
20:10 < yawnt> http://joind.in/talk/view/6474/
20:10 < mmalecki> I spent the next day in bad
20:10 < mmalecki> interesting, since there was one slide mentioning nodejitsu
20:10 < mmalecki> showcasing some of our projects, obviously
20:11 < mmalecki> and I *did* show how cluster module
20:11 < mmalecki> * works
20:11 < yawnt> bah
20:11 < yawnt> every feedback should be taken carefully
20:11 < yawnt> you get a lot of good stuff but there're also tons of haters for the lulz
20:12 < mmalecki> the thing is, that conference was like 30 people at max
20:12 < mmalecki> mostly php folks
20:12 < yawnt> kinda like when i did js performance tricks
20:12 < yawnt> they were most ruby people though
20:12 < yawnt> *mostly
20:12 < yawnt> s/ruby/rails/
20:12 < mmalecki> but yeah, as I said, it didn't go too well, try speaking with a fever and terrible headache
20:13 < yawnt> i had a flight once
20:13 < yawnt> where i had 38.5 °C
20:13 < mmalecki> oh man...
20:13 < yawnt> and it was a nightmare just sitting still
20:13 < yawnt> so yeah i can imagine what it's like to have to speak lol 
20:13 < yawnt> 8.30h long flight
20:13 < mmalecki> I once had a 40 degree fever
20:13 < yawnt> i was taking aspirines like peppermints
20:13 < mmalecki> that was like
20:13 < mmalecki> half real
20:14 < yawnt> woah
20:14 < mmalecki> we go to the doctor and I have to walk down the stairs
20:14 < yawnt> you get cooled down with ice 
20:14 < mmalecki> I was 15 or so, mind you
20:14 < yawnt> at least so i've heard
20:14 < yawnt> when you are > 40
20:14 < yawnt> i don't usually take aspirines and pills until i have 39
20:14 < mmalecki> and I told my mom to hold my arm since that slide is pretty dangerous
20:15 < yawnt> but i didn't want the fever to raise while i was at 10k feet lol
20:15 < yawnt> mmalecki: did you fall? :O
20:15 < mmalecki> yeah, bad thing to do
20:16 < mmalecki> yawnt: managed to get down the stairs, with help of two people
20:16 < mmalecki> I didn't really get what's going on
20:16 < yawnt> i see
20:16 < yawnt> nah thanks god highest fever i ever had was like 39.6
20:16 < yawnt> *5
20:16 < yawnt> and i felt pretty bad back then
20:16 < mmalecki> I wonder what they'd do if you straight away passed out
20:17 < yawnt> so i really can't imagine how 40 must be
20:17 < yawnt> my mom got to 42 once.. and they cooled her down with ice
20:17 < yawnt> when she was a kid though
20:17 < yawnt> no wait.. 41.. my uncle got to 42
20:17 < mmalecki> yeah, what you should do is put person in a water of body temperature
20:17 < mmalecki> and then add cold water
20:17 < mmalecki> just like, slow cool down
20:18 < yawnt> it was a bad virus that was spreading in north italy in the mid 70s
20:18 < yawnt> it wasn't lethal, but you got really really high fever
20:18 < yawnt> they never really understood what it was
20:18 < yawnt> after one week or so it was gone
20:18 < mmalecki> ah, that's very lame
20:19 < yawnt> well it depends
20:19 < yawnt> i mean.. if it was lethal
20:19 < yawnt> it'd have been really worse
20:19 < mmalecki> yeah, def
20:20 < mmalecki> in Poland, in mid 90s I think, there was an epidemy. whole city got locked down
20:20 < yawnt> really?
20:20 < mmalecki> nah, 1963
20:20 < mmalecki> yeah
20:21 < yawnt> woah
20:21 < yawnt> the last epidemy we had
20:21 < yawnt> was during WW I
20:21 < mmalecki> the thing is
20:21 < yawnt> killed 20 millions of peopl
20:21 < yawnt> *people
20:21 < mmalecki> it was an intelligence agent coming back from India
20:21 < mmalecki> it was smallpox
20:22 < noordung> Can different private npm packages depend on each other?
20:22 < noordung> And how do I specify the dependency?
20:22 < yawnt> technically yes
20:22 < yawnt> if you use for example a git repository
20:23 < yawnt> or a tarball
20:23 < yawnt> (i'm guessing)
20:23 < mmalecki> or a private npm registry
20:23 < yawnt> ^
20:23 < mmalecki> we do that, it's easy actually
20:24 < noordung> This is what I want to do: have a directory which is a package, and inside it I want to have another directory which is a package. It would be far more convenient to have that directory exposed through npm rather than an ugly path require...
20:24 < yawnt> mmalecki: really? you have your own npm registry?
20:24 < yawnt> cool
20:24 < noordung> It would also be far more simple to modify that to another type of storage...
20:25 < ahbritto_> Why does node-inspector say: unknown option: --start-brk ?
20:26 < noordung> http://nodejs.org/api/modules.html#modules_folders_as_modules
20:26 < noordung> :D ^^ that is what I want :D
20:26 < noordung> But, instead of a path, I just want to say require('some-library')
20:27 < yawnt> noordung: yeah what we said
20:27 < yawnt> either you use a tarball
20:27 < yawnt> a private npm registry
20:27 < yawnt> or a github repo
20:28 < yawnt> private npm registry would be best
20:28 < mmalecki> I wouldn't recommend putting ssh keys on machines you deploy to tho
20:28 < noordung> Right...
20:28 < yawnt> mmalecki: that'd only work if he's using something like gitlab
20:28 < yawnt> when i said github i meant.. some sort of git hosting
20:28 < mmalecki> yeah, same applies
20:28 < yawnt> my bad :(
20:29 < mmalecki> I mean, you don't want ssh keys on public-facing machines
20:29 < yawnt> sure
20:29 < yawnt> but you can like clone from the repo, and no one would know you're hosting the package there
20:29 < yawnt> except if they get their hands on the package.json
20:30 < mmalecki> yeah
20:30 < yawnt> which is not this case
20:30 < yawnt> that's what i was trying to say :P
20:30 < mmalecki> deployment is complicated :)
20:30 < rounce> why not private repo?
20:30 < yawnt> because 
20:30 < yawnt> you'd need the ssh-key to be able to pull from it
20:30 < yawnt> also i don't think npm supports other than git://
20:31 < mmalecki> it does
20:31 < rounce> it does
20:31 < yawnt> really?
20:31 < yawnt> cool
20:31 < rounce> lol
20:31 < mmalecki> git+ssh://github.com:...
20:31 < rounce> beat me to it
20:31 < yawnt> well you'd still need the ssh-key
20:31 < yawnt> :D
20:31 < mmalecki> yeah lol
20:32 < rounce> register the key with ssh-agent
20:32 < rounce> et voila
20:32 < mmalecki> OR
20:32 < rounce> then one line deployment from a private repo is your oyster
20:32 < mmalecki> ssh key forwarding
20:33 < rounce> better option infact
20:33 < yawnt> lol
20:35 < noordung> And how do I tell npm to get the package from a tarball?
20:35 < mmalecki> noordung: specify http url as a dep
20:36 < noordung> Alright...
20:37 < noordung> What if I just symlink the working dir into node_modules?
20:38 < noordung> That should work... :)
20:39 < rounce> its alot easier than running '$ npm install' every time you make a change to a dependency
20:39 < rounce> ;)
20:39 < mmalecki> that's a pretty bad idea
20:40 < rounce> why so?
20:40 < mmalecki> that's not explicit really
20:41 < rounce> I mean for development purposes
20:41 < mmalecki> btw, why don't you want a path require?
20:41 < mmalecki> oh, dev, sure
20:41 < noordung> mmalecki, because you get into path-require-hell like '../../../../../../' ... it's pointless
20:42 < mmalecki> well, not really, this is how node require system works
20:42 < mmalecki> there are patterns to deal with that tho
20:42 < yawnt> well if you're doing ../../../
20:43 < yawnt> you're obviously doing that wrong
20:43 < noordung> are you telling me that node will go through the tree and find what I'm looking for?
20:43 < yawnt> yes it will
20:43 < noordung> the docs don't really say that...
20:44 < mmalecki> no, it won't
20:44 < yawnt> wat?
20:44 < mmalecki> you have to specify the path explicitely
20:44 < yawnt> maybe i didn't grasb the question then
20:44 < mmalecki> I mean, it'll do that when you require a module
20:44 < mmalecki> but not a file
20:44 < noordung> exactly...
20:44 < yawnt> but i mean
20:45 < noordung> and if I so happen to move the working dir, I need to go through every single file and redo the path...
20:45 < yawnt> if you have file.js in Code/
20:45 < yawnt> and module.js in /
20:45 < yawnt> and you put in file.js require('../module')
20:45 < yawnt> it'll work
20:45 < yawnt> :|
20:46 < noordung> So, anyhow... I'll probably include a script that for dev purposes symlinks the dir into node_modules, and for production, copies it there.
20:46 < noordung> Much simpler than setting up a private repo...
21:13 < testingb0t> I want to use cluster to take advantage of the multiple cpus. However, they need to share some data. I tried Redis, but there's a chance of locking issues/race condition. Would it be a good idea to store some memory in the cluster's master and use messaging? So that the workers can access the data without having to worry about locking issues?
21:27 < euoia_> could someone point me to a nice, small, reasonably well coded express application on github preferably using mongoose that I might be able to get some style pointers from?
21:29 < astropirate> euoia_, https://github.com/LearnBoost/mongoose/blob/master/examples/schema.js
21:30 < euoia_> astropirate: that specific file?
21:30 < euoia_> I was more thinking of an application which does a few things
21:32 < rounce> have a flick through the examples in the express github repo
21:33 < euoia_> ok, cheers
21:33 < rounce> there's lots of nuances to be picked up from in there
21:33 < rounce> Sam-T == elguapo99 ??
21:34 < euoia_> the require(…) pattern that's used in nodejs, what's that called? If I want to use some JavaScript I wrote for the web browser in node.js will I have to convert it to that format?
21:35 < rounce> if you mean, will it have to be commonjs/amd compliant?
21:35 < rounce> yes
21:35 < euoia_> ok, it's called the CommonJS module systemm
21:35 < euoia_> ok - I will need to read about CommonJS and rewrite some of my front-end stuff to use that
21:35 < rounce> http://requirejs.com
21:36 < rounce> err I mean: http://requirejs.org/
21:36 < rounce> module format is different
21:37 < rounce> but modules can be loaded into node with the help of https://github.com/jrburke/amdefine
21:37 < rounce> that is - if you're writing code to be utilized in the client and on the server
21:38 < euoia_> thanks rounce
21:38 < rounce> np
21:46 < othiym23> does anybody have a a package they like to use to bring up / down external services for the lifetime of their Node app?
21:47 < othiym23> e.g. if I want my Node app to manage its own Redis instance, is there a handy lil helper to manage that for me?
21:47 < othiym23> it's not that tough to roll something of my own using architect and carrier, but it would be cool to have all in one place
21:48 <@Nexxy> othiym23, I use something that I wrote but it's little more than just a child_process spawn wrapper
21:49 <@Nexxy> I use it to keep a redis instance up
21:49 < othiym23> yeah, it's not a lot of code to do
21:49 <@Nexxy> I just check for things like address already in use
21:49 <@Nexxy> and restart when the proc dies
21:49 < othiym23> just something to spawn the child process and do whatever watching it needs to do to make sure it's up and notify the main bootstrapper that the daemon is ready
21:50 < othiym23> I'm writing a test app that starts MongoDB, Redis, memcached and MySQL at startup and then brings up an Express app after all of the daemons are ready
21:51 < othiym23> and probably more random services later
21:51 < othiym23> it's only ~20 lines per service, but it seems like something that substack would have banged out in his sleep at some point or whatever
21:53 < euoia_> so I am used to creating JavaScript "classes" using something like function ClassName { … } - then ClassName.prototype.methodName = function () { … }  - then "instantiating" with c = new ClassName(); - how does this convert to the CommonJS system of doing things?
21:55 < othiym23> euoia_: really straightforwardly
21:56 < othiym23> the only thing you add to your class to make it play nicely in CommonJS is a line at the end of the module like 'module.exports = ClassName'
21:56 < othiym23> as long as you only define one class per module, it's a really straightforward way to develop
21:56 < euoia_> ok, great
21:56 < euoia_> I'll try that
21:56 < othiym23> so wherever you want to use ClassName, you just do 'var ClassName = require('path/to/classname/module')'
21:57 < euoia_> aha
21:57 < euoia_> it makes sense
21:57 < othiym23> and then just instantiate normally
21:58 < euoia_> it works!
21:58 < euoia_> thanks
21:58 < othiym23> yr welcome
21:58 < euoia_> that's awesome
21:59 < othiym23> the other nice thing about that pattern is that you can create "class variables" (i.e. state shared across instances) by just defining variables in the module but outside the class, and they're local to the module
22:00 < othiym23> because the module is actually just a function created by the Node / CommonJS runtime
22:04 < gorillatron> could someone review https://gist.github.com/3730014 I would be very glad :) Cluster vhost setup.
22:50 < No9> Hey anybody have access to npm while isaacs is away?
22:50 < No9> I have been CASED
22:56 < vrlogrs> hey guys
22:56 < vrlogrs> like to introduce a new game on my site -- again, all node.js :) http://www.funnode.com/battleship
22:57 < vrlogrs> if anyone has a few minutes to test it out -- will appreciate it
23:01 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:08 < ctult> Does the javascript 'const' statement work in older browsers?
23:08 < ctult> It would make my code much faster
23:10 < ctult> And, also, would Typed Arrays work in IE6?
23:11 < zomg> ctult: typed arrays don't even work in most modern browsers
23:11 < zomg> well, depends, but if you have to ask, it most definitely won't work in IE6...
23:11 < zomg> ;)
23:12 < astropirate> why do people still support that crap of a browser
23:14 < zomg> usually forced by some stupid enterprise shit
23:16 < slmr> not a programming question, but linux noob here - installing node on fedora 15, compiled 0.8.9 from source, went without problems but cant run nodejs due to a conflict with another package called node - I'm forced to type in the full path to the nodejs bin dir.. what is the cleanest way to resolve this?
23:16 < ctult> slmr, alias
23:17 < slmr> so thats the right thing to do? 10x ctult 
23:18 < slmr> (there is a fedora rpm package for nodejs that is resolving this but the latest stable version is 0.6 :/ )
23:18 < othiym23> wow, architect is cool, but it really enforces a loosely coupled style on your code
23:19 < othiym23> billions of tiny little plugins everywhere!
23:22 < bnoordhuis> othiym23: c9 architect?
23:23 < alfredogon82> hello! im trying to send a form via post and im getting this error 500 TypeError: Cannot read property 'user' of undefined
23:24 < othiym23> bnoordhuis: yeah
23:24 < bnoordhuis> othiym23: yes, it's nice :)
23:24 < othiym23> bnoordhuis: the only thing I don't like about it is that it wants your entire app to be a big pile of plugins
23:25 < othiym23> it's very Spring-like in that way
23:25 < alfredogon82> someone who can help me pointng into the right direction?
23:25 < bnoordhuis> othiym23: well, it fits in the overall architecture of c9, that's why it works like that
23:26 < othiym23> bnoordhuis: yeah, I heard one of the C9 devs talking about it at Fluent, and then creationix and a couple others were talking about it in terms of npm and plugin architectures at NodeConf SummerCamp, and it's exactly what I needed for my current project
23:26 < othiym23> alfredogon82: sounds like your handler is trying to pull the user object off something that doesn't exist and is barfing
23:26 < othiym23> alfredogon82: check your session configuration
23:50 < euoia_> I have been using step to manage my callbacks a bit more effectively - anyone have any thoughts on whether it's good/bad/average or if something better exists?
23:50 < euoia_> I haven't had any problems so far
23:50 < rounce> euoia_: step?
23:50 < euoia_> http://thechangelog.com/post/516202796/step-control-flow-the-node-js-way
23:52 < rounce> connect?
23:52 < rounce> or am I misunderstanding?
--- Log closed Sun Sep 16 00:00:24 2012
