--- Log opened Thu Jul 11 00:00:39 2013
00:20 <@nexxy> isaacs, I haven't been able to stop thinking about party pants
00:21 < Sly> nexxy: <3
00:21 <@nexxy> and party paint
00:21 <@nexxy> Sly, <3
00:21 <@isaacs> nexxy: i prefer my parties to be pantsless, personally
00:21 <@nexxy> oh, agreed
00:21 <@nexxy> which is why I keep asking myself
00:21 <@nexxy> just what *is* a party pant?
00:21  * isaacs heh heh heh heh
00:22 <@isaacs> ^ party pants
00:22 <@nexxy> hahaha
00:22  * isaacs is out of breath from the partying
00:22 <@nexxy> indeed
00:23 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:29 < serapath> can i define eventhandling twice for the same event?
00:29 < serapath> or will it override the first definition?
00:33 < liamk15> would there be anything wrong with running a http server and a socket serverin the same file?
01:11 < davidbanham> I've got a process that leaks a bit of memory, but steadily increases its CPU usage over time. I'm running out of ideas for debugging. Anyone got a suggestion for good profiling tools other than --prof and look?
01:12 < davidbanham> Currently downloading a SmartOS VM.
01:26 < liamk15> trying to install express and its saying its not compatible with my version of node /nom
01:27 < liamk15> how i update?
01:31 < mhic> Hi, I know this is not the right place, however, can't find any info anywhere.  HHave Mongo db version v2.0.4, pdfile version 4.5, Node.js v0.10.13, and db version v2.0.4, pdfile version 4.5 installed in Linux Mint 13 Maya Ubuntu Precise 32bit.  When i try to compile a sample program in Opa with "opa hello.opa --" it compiles, but I can't access anything with localhost:8080.  Any ideas...
01:31 < mhic> ...what's wrong?
01:34 < MitchW> mhic: this assumes we can somehow telepathically read your log files to look at any runtime errors occuring, and we know what 'Opa' is
01:36 < mhic> Hmm, you have a point.  Problem is I don't see any errors generated. 
01:36 < mhic> Opa = opalang.org framework. 
01:37 < MitchW> mhic: you said you don't see errors when you 'compile' your program, but when you run it there must be some sort of runtime logs of stdout/stderr - which I susepct probably have useful information in them
01:37 < MitchW> suspect*
01:37 < mhic> I see.  I'll try to see if I can find out how to find those logs, and try to figure it out. 
01:37 < mhic> thanks for the help...
01:38 < mhic> Have a good night :)
01:38 < MitchW> if that's not the case, I'm not sure how anyone can help - no errors, nothing to diagnose/fix.  unless it's not actually trying to host a server on localhost, or port 8080
01:38 < mhic> I would tend to agree with you, however, default docs say that opa uses node.js to putsh it onto 8080.
01:39 < mhic> in any case, thanks for the input.  Good night.
02:01 < ForSpareParts_> I have an object hierarchy I want to serve over an API, but it's got some parent references (which give JSON.stringify trouble) and a bunch of functions attached -- I really just want to send the hard data. Is there some kind of automatic way to do that? Or is it best to rebuild the objects by hand?
02:10 < das3in> Hi everyone! I have a pretty basic / newbie question.  I'm using Mongoose/Express for my backend.  Instead of setting up my Mongoose Schema in the same file as my api, I'd like to split them up into a /Models folder and a /api folder. How can i include the models in the api.js file and how can I initialize both in the server.js file?
02:11 < neeky> das3in, I do it in a pretty neat way, I have a gist of it, hang on
02:11 < neeky> i use a 'model loader'
02:12 < das3in> i'd love to see a gist of that
02:13 < das3in> I feel like I have a decent understanding of the individual stack components I want to use, but gluing them together is proving difficult
02:15 < neeky> das3in, https://gist.github.com/nikmartin/a9b2663550c91f3ab0ba
02:15 < neeky> das3in, wait, i forgot to add a snippet from my app.js, hang on a sec
02:18 < neeky> das3in, ok, check it now - that's the cleanest model loader you will see all week
02:19 < neeky> a bit of explanation: - if you require('folder'), node automatically tries to load index.js if it exists
02:20 < neeky> in this case, models/index.does exist, and it loads all the models yo specify in the array at line 12, in the order listed
02:21 < neeky> then the model is attached to the mongoose connection at line 19, so whenever you access the mongoose connection, you have a copy of the model as well
02:21 < neeky> so, in a route, when I want to access a model, I just say 'var myModel = mongoose.model('MyModel');
02:22 < neeky> if you look at model1.js - see the entire thing is in a closure
02:22 < das3in> @neeky interesting. so in a file structure that has /models (models obviously), and /api (routes that serve data to angular app) where does the index.js file go that's where i'm confused
02:23 < das3in> or is the index.js the top of what would be my "api.js" (stuff like, app.post('/todo/:id') and stuff like that
02:23 < neeky> so the 'model loader' in my case goes in the same folder as my model.js files
02:24 < neeky> and by doing: require('./models')();, node loads models.index.js, which in turn loads all my models, and attaches them back to mongoose
02:25 < das3in> got it
02:25 < das3in> that makes a ton of sense
02:25 < das3in> wow that's brilliant actually thank you
02:25 < neeky> well, my root app folder just has 'app.js', and models are in ./models, and routes in ./routes
02:25 < neeky> I also have a very slick route loader
02:25 < neeky> I'll post it too, hang on
02:26 < neeky> so, in ./routes, I also have index.js, which loads any and all routes
02:26 < neeky> but it's slicker, since loads everyrhing in the folder that has a .js extension
02:29 < durango> do you guys compress your css/js before you deploy or after?
02:29 < neeky> well it seems github just went down for me
02:33 < ChrisPartridge> durango: generally before, in production
02:34 < durango> wait how are u in production before deployment?
02:34 < ChrisPartridge> neeky: working fine here
02:34 < durango> unless u  mean a staging env?
02:39 -!- Topic for #Node.js: node.js - important announcement: http://bit.ly/14H8Ncf - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
02:39 -!- Topic set by mbalho [~max@ve.5bpbxlsy.vesrv.com] [Wed Jul 10 03:26:20 2013]
02:39 [Users #Node.js]
02:39 [@isaacbw         ] [ cronopio_     ] [ Guest64595      ] [ krnflake_     ] [ paulkon        ] [ stef            ] 
02:39 [@isaacs          ] [ Crystalvoid   ] [ Guest73696      ] [ krunc         ] [ pboos          ] [ StephenS        ] 
02:39 [@mbalho          ] [ csavard       ] [ Guest78216      ] [ Kruppe        ] [ Pengoo         ] [ Steve^          ] 
02:39 [@nexxy           ] [ cTIDE_        ] [ Guest78936      ] [ Kudos         ] [ percival       ] [ stevegill       ] 
02:39 [@tjfontaine      ] [ ctorp         ] [ Guest87326      ] [ kuja          ] [ petschm        ] [ stevenbenner    ] 
02:39 [@trevnorris      ] [ culturelabs   ] [ Guest92743      ] [ kuranai|bnc   ] [ ph8            ] [ Stew-a          ] 
02:39 [@trevnorris_     ] [ cvo           ] [ Guest93816      ] [ kuuranne      ] [ PhanLord       ] [ stonecobra      ] 
02:39 [ [[zzz]]         ] [ cxreg         ] [ guilleiguaran_  ] [ kzrl_         ] [ PhilK          ] [ Stoob_          ] 
02:39 [ [Frost]         ] [ D4RK-PH0ENiX  ] [ guybrush        ] [ L_star___     ] [ philmod        ] [ Str1ngS         ] 
02:39 [ [Fudge]         ] [ dagerik       ] [ Gwl             ] [ lamella       ] [ phI||Ip        ] [ stride_         ] 
02:39 [ \mSg            ] [ daleee        ] [ gwoo`           ] [ lance|afk     ] [ phoenixlzx     ] [ strmpnk         ] 
02:39 [ ^esc_           ] [ daleharvey_   ] [ gyaresu         ] [ LanyonM       ] [ phukt          ] [ Stumbler_       ] 
02:39 [ ^o-_-o^         ] [ dan_johnsin   ] [ hackygolucky_   ] [ ldDark        ] [ piggybox       ] [ stutter         ] 
02:39 [ __sri           ] [ danmactough   ] [ Hadaka          ] [ lea           ] [ piklu          ] [ stylus          ] 
02:39 [ _br_            ] [ darkpassenger ] [ haidz           ] [ Leeol2        ] [ pksunkara      ] [ styol           ] 
02:39 [ _janne          ] [ das3in        ] [ hakunin         ] [ LeftWing      ] [ poorman        ] [ styol_          ] 
02:39 [ _jimvideo       ] [ davad         ] [ halfhalo        ] [ leichtgewicht ] [ PotatoLatke    ] [ subbyyy_        ] 
02:39 [ _main_          ] [ davidbanham   ] [ happyface       ] [ lempa         ] [ pquerna        ] [ substack        ] 
02:39 [ _Renegade       ] [ davidjackson__] [ harrisonm       ] [ leoalves      ] [ prawnsalad     ] [ supersym        ] 
02:39 [ _Steve_         ] [ dawolf        ] [ harth           ] [ leoalves_     ] [ prismatictrail ] [ sveisvei        ] 
02:39 [ _th_n_          ] [ dazoe         ] [ hatch           ] [ leonardo      ] [ Probeus        ] [ SvenDowideit    ] 
02:39 [ `3rdEden        ] [ DeanH         ] [ Havvy           ] [ leptonix_     ] [ Proditor_      ] [ svnlto          ] 
02:39 [ `MArceLL`       ] [ dec           ] [ HeartOfAce      ] [ lmatteis      ] [ prophile       ] [ swaagie         ] 
02:39 [ a_suenami       ] [ dec_          ] [ heath           ] [ LocalPCG-     ] [ przemoc        ] [ swaj            ] 
02:39 [ AAA_awright     ] [ deetb         ] [ heidar          ] [ lohkey        ] [ psino          ] [ Swizec          ] 
02:39 [ aandy           ] [ defunctzombie ] [ HeN             ] [ looper        ] [ psychouroboros ] [ sxpert2         ] 
02:39 [ aboudreault     ] [ demio         ] [ heroux          ] [ Lorentz       ] [ purr           ] [ syntax          ] 
02:39 [ abraxas         ] [ Denmad        ] [ hichaelmart     ] [ lotyrin       ] [ pyykkis        ] [ szop_ninja      ] 
02:39 [ absolutezeroff  ] [ denysonique   ] [ hij1nx          ] [ lukebrooker   ] [ qbit           ] [ taaz            ] 
02:39 [ abstractj       ] [ dephex        ] [ hipsterslapfight] [ lulzbane      ] [ qrada          ] [ tahu            ] 
02:39 [ Adawerk_        ] [ Derander      ] [ howdynihao      ] [ Lulzon        ] [ quuxman        ] [ tandoori        ] 
02:39 [ aeberlin        ] [ dested        ] [ HSL_            ] [ Lunar_Lamp    ] [ r04r|away      ] [ tanepiper       ] 
02:39 [ aep             ] [ devdazed      ] [ hueniverse      ] [ lunarjar      ] [ r0tha          ] [ tankbusta_      ] 
02:39 [ agustinf        ] [ DeVito_       ] [ hydrawat        ] [ m0_           ] [ radiodario     ] [ tassmjau        ] 
02:39 [ aidanie__       ] [ diffalot      ] [ hyperboloid     ] [ M28           ] [ ralphhol1      ] [ taternuts       ] 
02:39 [ Aikar           ] [ digiwano_     ] [ iain__          ] [ M2Ys4U        ] [ ralphholzmann  ] [ tboyt           ] 
02:39 [ airportyh       ] [ dimadima      ] [ iaincarsberg_   ] [ m3pow         ] [ ralphtheninja  ] [ tbrelet         ] 
02:39 [ airtonix        ] [ diminoten     ] [ ian_            ] [ maaarghk-     ] [ Ralt           ] [ teadict_        ] 
02:39 [ ajpiano         ] [ dinosaur_     ] [ ianjm           ] [ Mack          ] [ randallagordon ] [ tec27           ] 
02:39 [ akiress         ] [ dipser        ] [ ibrahim         ] [ madscientist_ ] [ Rantanen-      ] [ Techie-Micheal  ] 
02:39 [ akshayms        ] [ djoot         ] [ ibrahim_        ] [ Maerten       ] [ rawtaz         ] [ TechnoCat       ] 
02:39 [ alanmeira       ] [ dleonard1     ] [ ickyb0d         ] [ majek_        ] [ rax0           ] [ TehShrike1      ] 
02:39 [ alekibango_     ] [ dmilith       ] [ iiie2           ] [ manacit       ] [ Raynos         ] [ tellnes         ] 
02:39 [ alexgo          ] [ dmz           ] [ iksik           ] [ mandric       ] [ rblackwe       ] [ terietor        ] 
02:39 [ alexwhitman     ] [ dnyy          ] [ ilteris         ] [ ManneW        ] [ rcombs         ] [ terinjokes      ] 
02:39 [ algesten`       ] [ Domenic_      ] [ imarcusthis-    ] [ mape_         ] [ rcs            ] [ tg              ] 
02:39 [ AllStruck       ] [ dominictarr   ] [ ImBcmDth        ] [ mappum        ] [ recidive       ] [ The_Ball        ] 
02:39 [ Almindor        ] [ don_jones_    ] [ IncipLTN        ] [ marienz       ] [ redhotsl_      ] [ The_Fly         ] 
02:39 [ alvaro_o        ] [ DonRichie     ] [ Industrial      ] [ marlun_       ] [ redir          ] [ thedaywi1lcome  ] 
02:39 [ andr0m3da       ] [ dooglus       ] [ InezK_away      ] [ Marsup        ] [ ree            ] [ TheDeveloper___ ] 
02:39 [ andrefs         ] [ Draggor       ] [ inimino         ] [ maru_cc_      ] [ reid           ] [ TheJH           ] 
02:39 [ andrew12        ] [ drano_        ] [ innociv         ] [ mashlol       ] [ ReinH_         ] [ thelamest       ] 
02:39 [ andrewaclt      ] [ drean_        ] [ instence        ] [ master5o1|work] [ remysharp      ] [ TheLink         ] 
02:39 [ AntelopeSalad   ] [ drey          ] [ Internet13      ] [ matjas        ] [ rgmarcha_      ] [ TheMoonMaster   ] 
02:39 [ arduix          ] [ drodger       ] [ InvidFlower     ] [ matkl         ] [ rhalff_tc      ] [ TheNumb_        ] 
02:39 [ arielserafini   ] [ DrShoggoth    ] [ ips|malc_       ] [ matt_c        ] [ rho__          ] [ thread          ] 
02:39 [ arnorhs_        ] [ drudge        ] [ irclogger_com   ] [ mattdawson    ] [ rhodesjason    ] [ threesome       ] 
02:39 [ asherkin        ] [ durango       ] [ ircretary       ] [ max_weller    ] [ RichardBronosky] [ tim_smart       ] 
02:39 [ asrail          ] [ durnik        ] [ ironfroggy      ] [ mbor          ] [ Ricki`         ] [ timkuijsten     ] 
02:39 [ asterick        ] [ eataix        ] [ isaacs_         ] [ Mchl          ] [ riku           ] [ timmywil        ] 
02:39 [ atatsu          ] [ ec            ] [ Iskarlar        ] [ mclee         ] [ rksm_          ] [ timoxley        ] 
02:39 [ athenot         ] [ ec_           ] [ isomorph1smes   ] [ McMAGIC--Copy ] [ rkusa          ] [ TimTim`         ] 
02:39 [ atomless        ] [ edude03       ] [ itsnotlupus     ] [ mdedetrich    ] [ rmill          ] [ tjb1982         ] 
02:39 [ automata        ] [ eighteen      ] [ itsrachelfish   ] [ mdel          ] [ rnowak         ] [ tklun_          ] 
02:39 [ average         ] [ eighty4       ] [ ivan\           ] [ mdevolving    ] [ robb1e_        ] [ tkuchiki        ] 
02:39 [ AvianFlu        ] [ eins78        ] [ ivan\_          ] [ medice        ] [ Robbilie       ] [ tlync           ] 
02:39 [ avital          ] [ ejnahc        ] [ ivan_the_monkey ] [ medoix        ] [ robertkowalski ] [ tmpvar          ] 
02:39 [ awc737_         ] [ elijah-mbp    ] [ ivan`           ] [ meizaps       ] [ roger_rabbit   ] [ tokuhirom_      ] 
02:39 [ axsuul          ] [ elliotf       ] [ j0ni            ] [ mekwall       ] [ roger_raymond  ] [ tomaw           ] 
02:39 [ azbyin          ] [ emilsedgh     ] [ jabberwo_       ] [ melter        ] [ Rolken         ] [ tomb_           ] 
02:39 [ azend           ] [ emptynine     ] [ jackyyll        ] [ MerlinDMC     ] [ rolleiflex     ] [ tomshreds       ] 
02:39 [ azend_          ] [ EnosFeedler   ] [ jalcine         ] [ Merminghi     ] [ rom1504_       ] [ tomtomaso       ] 
02:39 [ azhwkd          ] [ Eomar         ] [ jan____         ] [ mertimor-     ] [ RORgasm        ] [ toothrot        ] 
02:39 [ b0c1            ] [ epa_          ] [ jaredrhine_     ] [ meso_         ] [ rphillips      ] [ topaxi_         ] 
02:39 [ balgarath_      ] [ Epelii        ] [ jareiko         ] [ metellus      ] [ rtgibbons      ] [ topek           ] 
02:39 [ balkian         ] [ epiloque      ] [ jasonkuhrt      ] [ mferranti     ] [ Rubennn_       ] [ topek_          ] 
02:39 [ bandroidx       ] [ ePirat        ] [ JasonSmith      ] [ mfrauenh1ltz  ] [ rudolfrck      ] [ topherbullock   ] 
02:39 [ banzounet       ] [ epochwolf     ] [ Jaylee__        ] [ mh0           ] [ runningsm      ] [ torgeir         ] 
02:39 [ barneybook      ] [ er1c_         ] [ jayne           ] [ MI61          ] [ RushPL         ] [ Torsten         ] 
02:39 [ Bass10          ] [ Erakso        ] [ jb__            ] [ mikegerwitz   ] [ russfran1      ] [ totemizer       ] 
02:39 [ bbloom          ] [ ereslibre     ] [ jbolie          ] [ miql_         ] [ rvagg          ] [ trepatudo       ] 
02:39 [ bear            ] [ Erriond__     ] [ jbowes          ] [ MiracleBlue   ] [ rwaldron       ] [ trodrigues      ] 
02:39 [ beardtree       ] [ estebist_     ] [ JBreit          ] [ mirkok        ] [ rworth         ] [ TTilus          ] 
02:39 [ beawesomeinstead] [ estebistec    ] [ jcamins         ] [ MitchW        ] [ ryanseddon     ] [ ttt             ] 
02:39 [ Beg             ] [ EToS          ] [ jcastelli1      ] [ MitchyNuts1   ] [ s00pcan_       ] [ tuhoojabotti    ] 
02:39 [ ben_alman       ] [ eugenewa_     ] [ jcrugzz         ] [ mitzip_       ] [ s2g_           ] [ txdv            ] 
02:39 [ benatkin        ] [ EvilJStoker_  ] [ jden            ] [ mjr841        ] [ s4muel_        ] [ txdv_           ] 
02:39 [ bencevans       ] [ EvilPacket    ] [ jergason        ] [ mlocher       ] [ s5fs           ] [ Typo            ] 
02:39 [ bengl_          ] [ EvilTownCat   ] [ jesseproulx     ] [ mmalecki      ] [ s_e            ] [ Tyrantelf       ] 
02:39 [ bentruyman      ] [ EvRide1       ] [ jesster7        ] [ mnaser        ] [ saintcajetan_  ] [ ub|k            ] 
02:39 [ Benvie_         ] [ execut3       ] [ Jester831       ] [ moazam        ] [ salazr__       ] [ upgrayeddd      ] 
02:39 [ bergquist       ] [ exos_         ] [ jesusabdullah   ] [ monokrome     ] [ Sam-T          ] [ uxtx_           ] 
02:39 [ beuk_           ] [ Ezku_         ] [ jetienne        ] [ morficus      ] [ samholmes      ] [ Validatorian    ] 
02:39 [ bigkevmcd       ] [ Fabryz        ] [ jez0990         ] [ MoRn          ] [ SargoDarya_    ] [ varmais         ] 
02:39 [ Bilge           ] [ faern         ] [ jgjeong         ] [ Motu          ] [ savardc        ] [ verysoftoiletppr] 
02:39 [ billy           ] [ Fantoccini    ] [ jgornick        ] [ Motu1         ] [ sawrubh_       ] [ VesQ            ] 
02:39 [ blissdev        ] [ fastman       ] [ jhalickman      ] [ MrDHat|afk    ] [ sboudrias1     ] [ vwoo            ] 
02:39 [ Blkt            ] [ faulkner      ] [ jimmyff         ] [ mreeder       ] [ schmidi        ] [ vychlastok      ] 
02:39 [ Blorb           ] [ faulkner-     ] [ jjore_          ] [ mreeder_      ] [ schredder      ] [ Wa              ] 
02:39 [ bmac            ] [ fayimora      ] [ jkarsrud        ] [ mrkurt        ] [ SchwarzeLocke  ] [ wadey           ] 
02:39 [ boaz            ] [ fdc_          ] [ jkn             ] [ MrMaksimize   ] [ sCoRpi         ] [ wagtag          ] 
02:39 [ bobbylaporte    ] [ fearh         ] [ jlord_          ] [ mrmoneyc      ] [ scott_gonzalez ] [ wang            ] 
02:39 [ bodisjw         ] [ felixge       ] [ jmanoto         ] [ MrNibbles     ] [ sdboyer        ] [ wavded          ] 
02:39 [ bombsite        ] [ fikst         ] [ jmaugue         ] [ mrpibb        ] [ SDr__          ] [ wcwrel          ] 
02:39 [ BombStrike      ] [ filleokus     ] [ jmfcool         ] [ mstefanko     ] [ seantimm_      ] [ wedgeV          ] 
02:39 [ booo            ] [ fivethre1o    ] [ jmonay          ] [ multiply      ] [ SebastianFlyte ] [ wereHams1er     ] 
02:39 [ booyaa          ] [ fiwsi         ] [ JmZ_            ] [ munro         ] [ sebv           ] [ whirlibulf      ] 
02:39 [ Brad__          ] [ fix2fax       ] [ jn              ] [ mven_         ] [ Secutor        ] [ whitglint       ] 
02:39 [ bradgignac      ] [ fkm           ] [ jocafa          ] [ myf           ] [ Segrel         ] [ whyhankee       ] 
02:39 [ bradleymeck     ] [ flagg0204     ] [ jocafa1         ] [ myf_          ] [ seich          ] [ willwh          ] 
02:39 [ brainproxy      ] [ flazz_gone    ] [ johnkpaul       ] [ myndzi        ] [ sente          ] [ willwhite       ] 
02:39 [ brettlangdon    ] [ Fli-c         ] [ Johnny-         ] [ n0cturnal     ] [ serdem         ] [ Will|           ] 
02:39 [ brianleroux     ] [ FMJaggy       ] [ jol02           ] [ n0n_          ] [ Seventoes      ] [ winni_          ] 
02:39 [ brianloveswords ] [ FooBarWidget  ] [ JonathanMcClare ] [ nackjicholson ] [ sf             ] [ wizonesolutions ] 
02:39 [ brimstone       ] [ ForSpareParts ] [ josephg         ] [ nail_         ] [ sfurnival      ] [ wolfeidau       ] 
02:39 [ brycebaril      ] [ ForSpareParts_] [ joshfinnie      ] [ nanashiRei    ] [ sg             ] [ wookiehangover  ] 
02:39 [ Bubo            ] [ Franz__       ] [ joshie          ] [ nathanbzz     ] [ Shadda         ] [ WorkingClassDev ] 
02:39 [ buckstabu       ] [ frdmn         ] [ joshskidmore    ] [ nathanbzzz    ] [ Shadowized     ] [ wpreul          ] 
02:39 [ bwall           ] [ freewil       ] [ joshthecoder_   ] [ Ned_          ] [ shama          ] [ wwwq            ] 
02:39 [ Bwild           ] [ fu9ar         ] [ joshuawscott    ] [ neoesque      ] [ shanlar        ] [ wyan            ] 
02:39 [ C0deMaver1ck    ] [ Furai         ] [ joukokar        ] [ neshmi        ] [ shanse         ] [ wycats_         ] 
02:39 [ c4milo          ] [ futuredale    ] [ joukokar_       ] [ netj          ] [ shoky          ] [ wyled           ] 
02:39 [ candlejackson   ] [ Fuu           ] [ JPT             ] [ netShadow     ] [ silvers        ] [ xangelo         ] 
02:39 [ caolanm         ] [ fwg_          ] [ jrdn            ] [ neverendingo  ] [ simius_        ] [ XBOCT           ] 
02:39 [ carif           ] [ Gabriel403    ] [ jso             ] [ nicholasf     ] [ simon^^        ] [ xdissent        ] 
02:39 [ cce             ] [ gabriel_      ] [ juho            ] [ niclone       ] [ sinclair|net   ] [ xerora          ] 
02:39 [ celogeek`       ] [ garann        ] [ juliangruber_   ] [ niftylettuce  ] [ sindresorhus   ] [ xk_id           ] 
02:39 [ cha0s           ] [ garren        ] [ jvolkman        ] [ niggler       ] [ SinnerNyx      ] [ xorox90_        ] 
02:39 [ chapel          ] [ Garrick       ] [ jwm             ] [ NimeshNeema   ] [ siong1987      ] [ xSmurf          ] 
02:39 [ charuru         ] [ garthk        ] [ k1ng            ] [ ninegrid      ] [ sir_tyri1n     ] [ xxblakefailxx   ] 
02:39 [ chayin_         ] [ gdbz          ] [ k308            ] [ nlf           ] [ sirecote       ] [ xxtjaxx_        ] 
02:39 [ Cheery          ] [ geb_          ] [ ka2n            ] [ no9           ] [ SirFunk_       ] [ y3k             ] 
02:39 [ cheese1756      ] [ geekles       ] [ kafitz_         ] [ NoFaTe        ] [ sirkitree      ] [ Yaakov_         ] 
02:39 [ chiel           ] [ gf3           ] [ kai             ] [ Nothing4You   ] [ sitapati       ] [ yano            ] 
02:39 [ Chiffon35       ] [ ghostbar      ] [ Kaijo           ] [ nsm           ] [ six            ] [ yawnt           ] 
02:39 [ chjj_           ] [ ghoti         ] [ kaimei_         ] [ nsno_         ] [ skebcio        ] [ yhpark_talk____ ] 
02:39 [ chomwitt_       ] [ gildean       ] [ Kai|            ] [ ntus1017      ] [ skoude         ] [ yjmsf20         ] 
02:39 [ chrisbuchholz   ] [ gildo_        ] [ Kaltiz          ] [ nuba          ] [ skunkwerks     ] [ yogurt_truck    ] 
02:39 [ chrisdickinson  ] [ gkatsev       ] [ kangeroni_      ] [ nuck          ] [ slacko_        ] [ YoY             ] 
02:39 [ ChrisPartridge  ] [ gli           ] [ kanzure         ] [ nutcase       ] [ slajax         ] [ yuwang          ] 
02:39 [ chxane          ] [ GlitchMr      ] [ Katafalkas      ] [ nyuszika7h_   ] [ Slashbunny     ] [ yuya            ] 
02:39 [ ClamShell       ] [ gluxon        ] [ kazupon         ] [ odyniec       ] [ slickyy        ] [ zackiv31        ] 
02:39 [ clarkbox        ] [ gnarf         ] [ kborchers       ] [ ofan          ] [ slurp          ] [ zaheera         ] 
02:39 [ clarkk          ] [ GnarlinBrando ] [ kc8qvp          ] [ ohcibi        ] [ Sly            ] [ Zak_            ] 
02:39 [ ClaudioAlbertin ] [ GoddeR        ] [ kenperkins      ] [ Okt           ] [ smlgs          ] [ zanea           ] 
02:39 [ clone1018       ] [ golgi         ] [ kenperkins_     ] [ ootje         ] [ snappy         ] [ zaphod1984      ] 
02:39 [ clone1018_      ] [ gorillatron   ] [ Kester          ] [ optixx        ] [ sneakyness     ] [ zapu            ] 
02:39 [ coaster         ] [ Gottox        ] [ kevinfagan      ] [ Orbitrix      ] [ snet_          ] [ Zauberfisch^idle] 
02:39 [ codelahoma      ] [ gozala        ] [ kickandrew      ] [ orospakr      ] [ Snow-          ] [ zavier          ] 
02:39 [ codingkevin     ] [ gozala_       ] [ killfill        ] [ othiym23      ] [ Snugug         ] [ zedas_          ] 
02:39 [ Codynyx_        ] [ gquental_     ] [ kinabalu        ] [ Outsider_     ] [ Snugug_        ] [ zeekay          ] 
02:39 [ Connorhd_       ] [ greeno        ] [ Kingdutch       ] [ over_         ] [ SoF_           ] [ zemm            ] 
02:39 [ conradev        ] [ Grephix       ] [ KiNgMaR         ] [ overra        ] [ SomeoneWeird   ] [ zenodub         ] 
02:39 [ context         ] [ groundwa_     ] [ Kjerski         ] [ ovidiu-florin ] [ sonicblud      ] [ Zerot           ] 
02:39 [ CookieNinja     ] [ groundwater   ] [ klobucar        ] [ owen1         ] [ sordina1       ] [ zhware          ] 
02:39 [ CookieNomster   ] [ gsf_          ] [ kmiyashiro      ] [ owenb__       ] [ Sorella        ] [ zivester        ] 
02:39 [ coolnalu1       ] [ gshipley      ] [ knksmith57      ] [ oz            ] [ sorensen       ] [ zodiak          ] 
02:39 [ Couto           ] [ Guest13582    ] [ koalallama      ] [ p_l_a_y       ] [ SpearThruster  ] [ zomg            ] 
02:39 [ cramrod         ] [ Guest36906    ] [ konobi          ] [ Pagan         ] [ SpNg_          ] [ zorzar          ] 
02:39 [ Crawford        ] [ Guest38561    ] [ kppullin_       ] [ pandark_      ] [ spresser       ] [ zrated          ] 
02:39 [ creationix      ] [ Guest42634    ] [ kraft           ] [ passcod       ] [ spudly         ] [ |Gobo|          ] 
02:39 [ crescend1       ] [ Guest48148    ] [ krill           ] [ patrickod     ] [ sriley         ] 
02:39 [ crodas          ] [ Guest52672    ] [ krishagel       ] [ patsToms      ] [ stack_         ] 
02:39 [ Cronoh          ] [ Guest57220    ] [ krishna         ] [ Paul__        ] [ stbuehle1      ] 
02:39 -!- Irssi: #Node.js: Total of 981 nicks [7 ops, 0 halfops, 0 voices, 974 normal]
02:39 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
02:39 -!- Home page for #node.js: http://nodejs.org/
02:40 -!- Irssi: Join to #Node.js was synced in 27 secs
02:53 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:18 < ninegrid> Why is there a _extend function in util but it is not documented?
03:26 < ChrisPartridge> ninegrid: used internally perhaps?
03:36 < kayo> hello, how could I 'freezes' the flow from my NodeJS app to 'wait' the callback return? http://ideone.com/EfU87j
04:05 < garthk> LESS, SASS, Compass, or drink a couple of six-packs and give up?
04:05 < azbyin> lol garann 
04:05 < azbyin> garthk, grr
04:06 < garthk> For a phone-first web app: which front-end frameworks least offend you?
04:07 < garthk> I figure I'll ask in a room of people whose choice of framework at least hint that they like well structured, maintainable code. Please don't pop *that* illusion. I just spent half a day fighting C#'s type system, again. 
04:07 < MitchW> garthk: ask in #phonegap - devgeeks would have a few opinnions on that
04:07 < azbyin> phonegap and cordova.. they confuse the hell out of me.. which one is it?
04:07 < garthk> Yeah, but they'd want me to use PhoneGap. :)
04:08 < garthk> (Seriously, I'll check. Thanks.)
04:08 < MitchW> i tend to roll my own CSS though (based on some lower level combination of frameworks like backbone+<insert templating engine here>+underscore+zepto, or angular)
04:08 < azbyin> last i heard was: cordova is like the linux kernel while phonegap is like a linux distro
04:08 < azbyin> dunno how true that is
04:08 < MitchW> azbyin: tis not true, cordova is the apache project name for it - phonegap is the branded release of cordova by Adobe (which is literally just a build of cordova currently, with no other changes what so ever)
04:09 < azbyin> what the heck.. its bloody confusing, especially given that phonegap is the one that appeared first on the scene!
04:09 < MitchW> adobe has 'plans' to make non-breaking additions in the future, but they've been saying that for years - it's still just a branded cordova build :)
04:09 < MitchW> yeah, it's a confusing history that's for sure :)
05:09 < solidus-lake> hey all, where is the best place to get an overview tutorial on node.js?
05:13 < solidus-lake> no good tutorial resources out there?
05:17 < beardtree> I am using Q. Is it possible to sequentally fcall?
05:18 < beardtree> I have a bunch of promises that I want executed sequentially depending on the previous promises.
05:19 -!- mode/#Node.js [+o isaacs] by ChanServ
05:26 < euphrate> hi friends
05:26 < euphrate> hi niggler 
05:29 -!- mode/#Node.js [+o konobi] by ChanServ
05:29 < beardtree> Anyone good with promises?
05:42 < owen1> beardtree: just use callbacks and happiness will come upon u
06:03 <@mbalho> +1 i have a beard and i use callbacks
06:10 < beardtree> I'm using Q. I want to do something like promise1().then(promise2(arg)) but I only want to call promise2(arg) when promise1 is done.
06:11 < beardtree> Any thoughts?
06:15 < execut3> bear, promise1().then(promise2.bind(null, arg))  ?
06:15 < execut3> is promise2 actually a promise, or just some function you want to call?
06:16 < beardtree> It's a function that returns a promise.
06:17 < shesek> ah, I see. so you want to run the second action only after the first one finishes?
06:17 < beardtree> Yep.
06:18 < beardtree> I am not sure why but .bind is not working.
06:18 < beardtree> I don't think the function uses this.
06:18 < shesek> yeah, it shouldn't work
06:18 < shesek> I thought you meant something else
06:19 < beardtree> shesek: you're saying .bind is not supposed to work?
06:20 < darkpassenger> Is there anything I can do to save each element of a .each in an array and return this array without it being empty (due to async) --> http://pastebin.com/5gNXEGz6
06:20 < darkpassenger> sorry its coffee...
06:20 < shesek> beardtree, its not supposed to do what you're asking for
06:20 < beardtree> shesek: OK, what do I do?
06:21 < shesek> how about promise1.then(function(data) { return promise2(arg, data); })?
06:21 < beardtree> Actually the second promise doesn't care about the result of the first, just that it's done.
06:21 < owen1> http://substack.net/shared_rendering_in_node_and_the_browser
06:22 < owen1> just wanted to share this helpul guide. not sure if it works with jade (which i currently using)
06:22 < beardtree> shesek: so theoretically .bind is supposed to work, based on what you just showed me, but it's not.
06:22 < owen1> for the 'holy grail' - sharning client/server code for render html
06:23 < owen1> i don't have a beard and i use callbacks
06:30 < beardtree> Anyone? :/
06:30 < darkpassenger> Is there anything I can do to save each element of a .each in an array and return this array without it being empty (due to async) --> http://pastebin.com/5gNXEGz6
06:30 < darkpassenger> heh damn
06:52 < pirho> darkpassenger: did you get your answer?
06:56 < darkpassenger> nope.
06:56 < darkpassenger> are you interested ? 
06:56 < darkpassenger> :P
06:57 < darkpassenger> pirho:  ? 
06:58 < pirho> is it https://github.com/mongodb/node-mongodb-native ?
06:58 < darkpassenger> yes
06:58 < pirho> you want toArray
06:58 < pirho> instead of each
06:58 < pirho> https://github.com/mongodb/node-mongodb-native#find
06:59 < pirho> that pulls them all into memory
06:59 < pirho> you can indeed use each and stream the results but that's probably not worth it / what you want
07:00 < darkpassenger> yeah
07:00 < darkpassenger> well , I'm trying to search keywords and get the mongodb output for those keywords
07:00 < pirho> just use toArray
07:01 < darkpassenger> and then compare with the element in the array
07:01 < darkpassenger> hm
07:01 < darkpassenger> oh man 3 already
07:01 < darkpassenger> i have to go 
07:01 < darkpassenger> thanks man 
07:01 < pirho> peace
07:38 < [AD]Turbo> hi there
07:45 < foofoobar> Does someone know a good npm for syntax highlighting (javascript) which has a support for line numbers/highlighting?
07:58 < aezrteyrt> Hello world
07:59 < aezrteyrt> I would like use the function curl with nodejs, somebody know how to?
08:00 < ningu> you probably want https://github.com/mikeal/request instead
08:00 < aezrteyrt> I would like use the function curl with nodejs, somebody know how to?
08:01 < aezrteyrt> I would like use the function curl with nodejs, somebody know how to?
08:02 < mscdex> i wish github would say what the size of each branch is
08:02 < ningu> it might help to follow my link instead of repeating yourself
08:02 < r04r> aezrteyrt: you probably don't
08:03 < aezrteyrt> can not?
08:04 < r04r> aezrteyrt: nope, there is no curl
08:04 < ningu> is this like the matrix
08:06 < aezrteyrt> I would like user this command on nodejs
08:06 < ningu> aezrteyrt: I already told you, use mikeal's request module instead
08:07 < r04r> aezrteyrt: i would like to user commands as well but we can't all have what we want =(
08:16 < wockan> question is it okey to use Return when you only work with text manipulation, no IO 
08:17 < leichtge_> foofoobar: syntax highlighting + npm? isn't easier to just render it on client?
08:24 < ningu> wockan: should be fine
08:25 < wockan> i thought so. Just wanted confirmation :) thanks
09:06 < jameshowe> would core accept a v8 patch to enable remote debugging?
09:07 <@konobi> no, you'd have to go via the v8 gang
09:07 <@konobi> and remote debugging works
09:08 < jameshowe> I had to patch it so the socket bound to 0.0.0.0 instead of 127.0.0.1
09:08 < jameshowe> maybe they changed that already...
09:08 < SSim> Node.js is soooo peculiar then other Language[Server Side]
09:08 <@konobi> there's other ways to deal with that... a default of reasonable security is fine
09:09 < wockan> SSim, it's really nice
09:10 < SSim> wockan .. I need require() more then i code
09:10 < wockan> you can do a  var App = { all require} 
09:10 < wockan> and then ship it to all the places you want it
09:11 < wockan> like Common = {util:require('util'),something:require('something')}
09:12 < SSim> Lately i went to express.js , since i cant solve certain problem (which other server side languages gives) in Node.js
09:13 < wockan> at the company i work for now we do entire rest interface with express
09:13 < krainboltgreene> HAPI.
09:13 < wockan> it's really nice
09:14 <@konobi> wockan: and why not restify?
09:14 <@konobi> =0P
09:14 < SSim> error pages , file upload etc must be given by the  sever side language .... I guess i came very early for node
09:17 < wockan> konobi, what benefits do you get from restify
09:17 < wockan> ?
09:17 <@konobi> lots
09:17 < wockan> like?
09:17 < jesusabdullah> read the docs bro, they have a faq I'm pretty sure
09:17 <@konobi> read the docs
09:17 < jesusabdullah> it's just targeted more towards apis is all
09:18 <@konobi> though there's lots of side benefits too
09:18 < SSim> I cant believe error pages handling is not given by Node.js in other language it was given in basic versions.
09:20 <@konobi> why should it? node is for network apps, of which http is only one protocol
09:21 < SSim> I'm sorry it's completely my fault for choosing Node.js for the project :(  
09:25 <@konobi> SSim: check out some of the tutorials for express, a lot of that stuff is built in, you just need to use() it
09:26 < SSim> I cant use framework
09:26 < jameshowe> can I get node-gyp to use a different version of node to the one that's installed
09:26 < jameshowe> i.e. from a git clone I have elsewhere
09:26 < juho> i think you might have to fiddle with symlinks james
09:27 < juho> that's how usually different versions are handled
09:28 < jameshowe> /usr/local/include/node isn't a symlink though
09:28 < jameshowe> ah well, this is going to get messy
09:31 < serapath> hi there, could someone help me out on the following? i use this short script to test my module:  http://pastebin.com/MCNFahS8
09:31 < serapath> it logs 'undefined' to the console twice (try1 and try2)
09:31 < serapath> this is the module: http://pastebin.com/3AfnjvSX
09:31 < serapath> i think i got the caching thing with require wrong
09:32 < serapath> the initialization of my module correctly logs the calculated variable 'redis_output' to the console during initialization itself
09:32 < serapath> but after initialization is done,  its not exported
09:32 < serapath> why?
09:34 < mAritz> serapath: you're exporting redis_output at a time at which redis_output is still undefined
09:36 < jameshowe> that's not working :(
09:38 < serapath> mAritz: ok, so init resets the value, but its not exported again
09:38 < serapath> mAritz: how could i change the behavior? any suggestions?
09:38 < mAritz> serapath: just as an aside: try to boil problems down to as little code as possible when posting them like this. there's a lot of stuff in there that has nothing to do with the problem :)
09:39 < jameshowe> aha, Error: "pre" versions of node cannot be installed, use the --nodedir flag instead, so I'll investigate that
09:39 < serapath> mAritz: yes you are right, but on the other hand, i somehow was blind to this relatively trivial solution and didnt know what causes the problem, but i'll try harder next time
09:40 < serapath> mAritz: is there a way to give parameters to the module to initialize it once? or how would i do it?
09:41 < Shems> Hi everbody :)
09:41 < serapath> hi
09:42 < Shems> I'm a new in this technology :)
09:42 < Shems> I would make a multiplayer game with construct2
09:42 <@konobi> SSim: o.O
09:43 < Shems> And I would ask about Nodejs
09:44 < Shems> is there any specification for the server 
09:44 < Shems> or I can install it in any windows server?
09:46 < mAritz> serapath: sorry, was afk. sure there is. and you're not really wrong in the way you did it. there is just too much stuff in there for me to actually see what the problem is. 1 moment, i'll give you a very condensed short working example.
09:47 < serapath> thx :-) ... now that i know what the problem is, i could remove some clutter
09:48 < serapath> http://pastebin.com/SyL5JX4Z
09:49 < serapath> think this example includes the problem
09:49 < SSim> IT's all MY MISTAKE....konobi
09:49 < Siyfion> isaacs, I just got the latest version of NPM (v1.3.2) and my `npm pack` no longer works... ensureValidName errors, this new?
09:50 < Siyfion> isaacs, full console output is in the GitHub issue: https://github.com/isaacs/npm/issues/3649
09:52 < SSim> I agree Node.js is great for you guys , for me not .. Sorry... I need to finish this project.I'll be sticking on to IRC :)
09:54 < mAritz> serapath: https://gist.github.com/anonymous/ab9f5c354acf59fbc172
09:54 < serapath> mAritz: improved the boilerplate and have included 'the problem' as an example
09:54 < serapath> http://pastebin.com/YhRYKN0J
09:54 < serapath> ah ok
09:55 < mAritz> serapath: if you call index.js a couple of times in my example you'll see the problem of relying on settimeout. sometimes it logs "timeout world", sometimes "timeout universe". but the callback is always "callback universe"
09:56 < jetienne> hi
09:58 < serapath> mAritz: ah ok, i need to init api.test and not test and then later on set api.test = test, because that part will not get executed when init() is called
09:58 < serapath> thx :-)
09:59 < mAritz> yes. but please do use a callback. that's the more important point i wanted to make with my example. but i'm glad it helped you identify the real problem you had as well ;)
10:00 < SSim> NIO
10:02 < mAritz> SSim: it's a philosophical question really. do you want to have a fat base that does everything but does everything only on an okay level or do you want a lean base that does the things it does very well.
10:02 < mAritz> node.js tries the latter approach
10:02 < mAritz> while languages like php lean more towards the former
10:03 < jameshowe> php leans so far it tripped and landed in an industrial shredder
10:03 < SSim> mAritz have you used Java ? like Servlet
10:04 < jameshowe> Java = NodeJS, Servlet = express
10:04 < SSim> It's a class based language
10:04 < SSim> then JS ? jameshowe
10:04 < jameshowe> have you tried writing a webserver in Java using only the core libraries
10:04 < jameshowe> sorry, Java -> JS
10:04 < SSim> I asked js = ?
10:05 < jameshowe> JRE -> NodeJS
10:05 < SSim> :D
10:05 < SSim> I'm not in the mood of FUN
10:06 < mAritz> SSim: i have very little experience with java. but if i understand it correctly servlets are part of java EE, not the base language itself. anyways. java is rather on the fat side as well. which is fine because it has over a decade an thousands of developers working on it and entire teams take care of different parts of it.
10:07 < SSim> mAritz yes .. I work on java as well as Node.js in daily basis
10:07 < jameshowe> JEE has loads of stuff: templating, databases, transactions, ORM, servlets, security
10:07 < jesusabdullah> I mean
10:07 < jameshowe> all of which can be found in NodeJS modules
10:07 < jesusabdullah> php is the templating language that accidentally a general purpose language
10:07 < SSim> ORM is not in JEE part wrong jameshowe
10:07 < mAritz> SSim: the question i find interesting is: why can't you use express or other frameworks!?
10:08 <@konobi> NIH
10:08 < jameshowe> JPA is an ORM system
10:08 < jameshowe> jesusabdullah: http://www.flickr.com/photos/raindrift/sets/72157629492908038/
10:08 < SSim> jameshowe i worked on JPA as well still not in JEE
10:09 < jameshowe> well it's not in core, that's my point
10:09 < SSim> As mAritz pointed
10:10 < SSim> Servlet is a fat side... I agree and disagree
10:10 < Siyfion> Can anyone tell me what the `strict` option is in NPM and why it was added in the latest release?
10:11 < SSim> They do give minimum requirements to help developers out.
10:11 < mAritz> SSim: so what exactly is the issue? ^^
10:12 < SSim> again i need to move out learning a new framework Express bad ASS
10:12 < SSim> Just for Error page
10:14 <@konobi> along wth all of these... https://github.com/senchalabs/connect/wiki
10:14 < mAritz> you'd need to learn about error page classes or whatever in any other language as well?!
10:14 < SSim> mAritz Nope
10:15 < SSim> I have deployment descriptor
10:15 < SSim> makes me easy
10:16 <@konobi> SSim: you still have not described why you are unable to use npm modules
10:16 < SSim> konobi my app is large [size]
10:16 <@konobi> so?
10:17 < SSim> And ther is no internet :P so i can google out
10:18 <@konobi> i call bullshit
10:18 < SSim> ?
10:18 < SSim> Your OFF ?
10:19 <@konobi> you're on IRC... so obviously you have internets
10:20 < SSim> konobi ..... OMG leave it . I cant explain the whole thing here on IRC
10:21 < SSim> The internet is damn slow....
10:22 <@konobi> SSim: download once using npm, then check your dependencies in... done
10:22 < Siyfion> SSim, what's "damn slow" in this day & age I wonder...?
10:23 < SSim> :D Siyfion 
10:24 < mAritz> SSim: i have no idea what a deployment descriptor is, so i'd have to learn about it the same way you'd have to learn about express error pages
10:25 < mAritz> my point is: that's not a property of a language/framework. it's a natural process that comes with doing things in an environment you're not used to.
10:26 < Siyfion> Can you use Express Error pages to catch all uncaught errors?
10:26 < SSim> mAritz I should agree with this
10:26 < Siyfion> An display them in a meaningful manner?
10:27 < SSim> mAritz In Node.js is a burden if you compare with Java
10:27 <@konobi> roflcopters
10:28 < mAritz> SSim: why is it a burden?
10:29 < SSim> Since it's not equal to Java and never will be
10:29 <@konobi> it's not equal to fotran or cobol either
10:30 < mAritz> Siyfion: app.use(function (error, req, res, next) { res.send("Error: " + error.toString()); });
10:30 < mAritz> Siyfion: http://expressjs.com/guide.html#error-handling
10:30 < mAritz> (actual meaningfulness of that example is rather debatable ... :D )
10:31 < Siyfion> mAritz, cheers ;)
10:32 <@konobi> and of course there's error middleware already existing
10:33 < SSim> brb
10:36 < SSim> Node.js is dim boring .... It's an Alernative
10:36 < Siyfion> so effectively, with the error handler in express, node.js should never crash? :\
10:37 < Siyfion> unless it's something that isn't thrown (memory exceptions, etc.)
10:38 < mAritz> Siyfion: sorry, misunderstood your question.
10:38 < mAritz> uncaught errors are not handled by that
10:38 < Siyfion> mAritz, I was going to say.. 
10:38 < mAritz> there is (or was) process.on("uncaughtExceptio") or something
10:38 < mAritz> but it's not recommended.
10:38 < Siyfion> mAritz, ah, that sounds more familiar
10:38 < mAritz> besides, that would be outside of requests
10:39 < Siyfion> mAritz, agreed... hence why I was wondering if it did... 
10:39 < mAritz> the proper way to deal with unhandled exceptions in express routes is to use domains
10:39 < Siyfion> mAritz, domains aren't something I've even looked at
10:39 < mAritz> you should ;)
10:39 < Siyfion> mAritz, this is the problem with node.js... Too much stuff to look at!
10:40 < Siyfion> mAritz, if I spent all day looking into things I'd never get any work done, lol
10:40 < SSim> :D
10:40 < SSim> If you need to complete a project by weekend .. you will be in research mode
10:40 < Siyfion> mAritz, promises vs callbacks vs event emitters, domains, coffeescript vs typescript vs js, etc..
10:41 < mAritz> however you should always very carefully decide which uncaught exceptions may be "ok" for your application to continue on. in 99% of the cases you should either have caught it or not let the process continue because it's hard/impossible to know if it's still in a workable state.
10:41 < Siyfion> may be a stupid question, but is there an easy way of knowing if a function call *can* throw an exception?
10:41 < mAritz> SSim: if you need to complete a project by weekend, don't use technology you don't know or accept or carefully evaluate learning time in your estimate.
10:42 < r04r> Siyfion: Sure, the answer is yes
10:42 < Siyfion> mAritz, ie. in C# the compiler will warn you if there is an uncaught exception; obviously in js, no such luck, but... is there no hints at all?
10:42 < mAritz> you could also eval() it with all possible inputs and break if it ever throws. that way you'll know approximately right after the universe dies of heat death.
10:42 < Siyfion> r04r, lol so catch **everything**
10:43 <@konobi> it's the whole halting problem in general =0)
10:43 < mAritz> *erm.. no need for eval()... just call in a try catch, i meant
10:43 < r04r> Siyfion: javascript does not define exceptions beforehand, so they all can
10:44 < Siyfion> so is it just a case of catching the "most-likely" places it'll break?
10:44 < SSim> Hmmm mAritz your right ... I must have evaluated this bad ass server side lang... But most people feel this is Superb for server side which peaked my interest not anymore.
10:44 < mAritz> Oo
10:45 < mAritz> SSim: at this point you just seem like a troll. sorry, i'd like to understand your issues but you keep piling on illogical arguments.
10:45 < wockan> i call troll!
10:45 < wockan> :)
10:45 < wockan> ive been working with java for many years
10:46 < SSim> mAritiz YEAH you think in Node.js way
10:46 < SSim> woxkan so what you feel ?
10:46 < SSim> wockan, 
10:46 < wockan> i really like it
10:46 < wockan> no need for all the "overhead" code
10:47 < SSim> A good example would be better
10:47 < juho> are you still feeding that troll :)
10:47 < mAritz> Siyfion: domains let you catch everything inside a route (for example). you can then handle the exception in whatever way you want. for example if it's an exception by your application where you have information inside the error object that tells your domain handler whether the state of your application is still ok, you can just continue on. if however the exception is for example from a third party module, you pretty much have to end the
10:47 < mAritz>  process imho.
10:48 < wockan> SSim, you have more controll over the code. No need to recompile to test stuff
10:48 < wockan> as everything is more "open" 
10:49 < wockan> you can easily change for your fit
10:49 < mAritz> of course before ending the process you can send a response, do some clean up or whatever. but you should assume the worst.
10:49 < wockan> in java you are very strict (which is nice sometimes).
10:50 < SSim> WE can use design patterns to reduce the dependency
10:50 < SSim> Being strict really helps a lot
10:50 < mAritz> juho: there's a fine line between people who geniunely have interest but trouble understanding the principles or even use-cases of node (like my father who is an embedded C veteran) and people who troll the node.js community for the lulz by playing stupid. hard to tell for me which is which. sometimes i even think my father is just trolling me.
10:51 < wockan> SSim it depence on what you are building
10:51 <@konobi> mAritz: i'd have to agree
10:51 < juho> fair enough maritz :)
10:52 < wockan> look at play for instance
10:52 < wockan> for doing async stuff
10:52 < Tarraq> mAritz: being trolled by your own dad. Ouch, just ouch ;)
10:52 < wockan> you have to write a lot of boiler code
10:53 < wockan> doing async stuff with normal java isnt fun
10:53 < mAritz> Tarraq: well... he kinda trolls everyone. it's just when it's about business stuff where it gets difficult :D
10:53 < SSim> But you might have used Spring
10:53 < wockan> there are no (well almost none) modules that are true async
10:53 < mAritz> SSim: really? your argument is that learning additional frameworks on top of node is bad and then you bring up spring? :D
10:53 < wockan> and well yeah servlet has support for async (the latest)
10:54 < wockan> but then again all the libs are sync
10:54 < SSim> mAritz FU!
10:54 <@konobi> SSim: strike 1
10:54 < jameshowe> can we kick this guy?
10:54 < wockan> SSim you for real?
10:55 < wockan> do you even lift?
10:55 < Tarraq> mAritz: well embedded C is just as much voodoo as the eventloop is. I'm just starting with node.js. But did javascript in the browser and actionscript for a decade. So most things are pretty understandable to me :)
10:55 < Qalqi> lift what? javascript? wockan
10:55 < wockan> life
10:55 < SSim> All this not needed to be async
10:55 < Sean3z> is there anyway to have a synchronous http.request?
10:55 < SSim> things*
10:55 < Qalqi> it seems npm site is down
10:56 <@konobi> Qalqi: works here
10:56 < r04r> looks fine for me
10:56 <@konobi> Sean3z: nope
10:56 < SSim> I use Async  wockan in java
10:56 < wockan> good i have also done and do it
10:56 <@konobi> Sean3z: mikeal's "request" module might help a bit though
10:57 < Sean3z> konobi: thanks!
10:57 < SSim> we have NIO too .. So why people go to Node ? wockan
10:57 < bnoordhuis> wockan?
10:58 < jameshowe> NodeJs is sooooooo much easier to use than NIO
10:58 < wockan> SSim java nio isnt nice
10:58 < wockan> even with AKKA
10:58 < jameshowe> having built very large projects with both
10:58 < SSim> I feel pretty comfortable wockan
10:59 < wockan> i mean i did feel comfortable with mysql
10:59 < wockan> dosnt mean its the best
10:59 < wockan> right tool for the right project
10:59 < SSim> How about Oracle :)
10:59 < SSim> yes
11:00 < r04r> its very clear that mssql won that battle years ago
11:00 < jameshowe> and postgreq for the free battle
11:00 < wockan> i have to work
11:00 < wockan> nice chatting and behave :)
11:01 < SSim> me too see u then
11:01 < r04r> Does anyone have any experience with http://ejdb.org/?
11:02 < Qalqi> nio
11:03 < Sean3z> konobi: https://npmjs.org/package/httpsync :)
11:04 <@konobi> Sean3z: you know that you'll block all other connections until the request is finished, right?
11:04 < Sean3z> konobi: yes, that's desired for my particular project
11:05 <@konobi> *shrug* i'd just use async tbh
11:05 < mAritz> Sean3z: i hope you're doing that in either a subprocess or during initialization :D
11:05 < Sean3z> during init :)
11:06 < mAritz> you could still just wrap your route listeners in a function and call that once your init is done.
11:06 < Tarraq> Sean3z: If it's because the user has to wait for a particular thing to finish before doing anything else, I'd still do it async and then let the frontend know when the call is done, via a websocket or similar.
11:06 < serapath> mAritz: thx, have modeled your improvements into how i use the module pattern now http://pastebin.com/Exa4mxXW
11:06 < mAritz> Tarraq: no need for that. just wait for the async call to finish before res.send()ing?!
11:07 < Tarraq> mAritz: Yes. but that still leaves the user waiting. :) 
11:08 < mAritz> serapath: good :). of course in your real module the callback should be inside your redis callbacks and also forward any possible redis errors (unless it can handle them properly).
11:08 < mAritz> Tarraq: of course it does, that's what he's supposed to do, i thought?!
11:08 < jetienne> q. i would like to be warned when somebody read a property which doesnt exist. like "var foo = {}; console.log(foo.bar);" i would like to trigger an error when  foo.bar is read. 'bar' or any property name. i looked at the Object API but i failed to find something. any hint ? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
11:09 < bsnote> bnoordhuis: Hi Ben
11:09 < Sean3z> problem is, the user sends multiple commands on login. one of which requires request information before any others can be processed
11:09 < Tarraq> mAritz: yes. just thinking that when we're async anyway, might as well notify user async too. Depends of course on the usecase :
11:09 < timoxley> Sean3z: no need to block to get that
11:09 < Tarraq> Sean3z: then you can just let the callback from that first function call the other two.
11:10 < Sean3z> good point.
11:10 < Sean3z> thanks guys :)
11:11 < SSim> People are super genius here that's for sure ... JUST FAME :D 
11:11 < Tarraq> Sean3z: the only use case I can think of where you'd need a synchronous http call would be some some of weird audit scenario where you must be 100% certain some information is logged before the entire thread can continue 
11:12 < r04r> jetienne: I think use strict does that
11:12 < Tarraq> thread = process..
11:12 < Tarraq> switching languages.. getting terms confused :)
11:13 < mAritz> jetienne: i don't think that's possible currently. you mean something like phps magic getter, right?
11:13 < serapath> mAritz: ah, thx, yes you are right :-)
11:14 < mAritz> Tarraq: the correct way would then be to notify the user that the server is processing by sending a websocket notification and not respond to the actual request before it is processed, imo.
11:15 < jetienne> r04r: 	(function(){ "use strict"; var foo = {}; console.log('value', foo.bar) })() <- i tested with that. it print undefined :(
11:15 < jetienne> mAritz: i dunno php magic getter so i can't say
11:15 < jetienne> mAritz: this is to detect typo error when people read property
11:15 < mAritz> jetienne: it's basically a function you define that gets called as a getter for properties that aren't defined.
11:16 < jetienne> mAritz: ah yeah there is something like that in ruby too… 
11:16 < Tarraq> mAritz: Sure :) 
11:16 < Sean3z> mAritz: Sadly, I have no control of the client. It's a game built in '99 lol
11:16 < jetienne> mAritz: hmm ok too bad then :)
11:16 < r04r> jetienne: :( I don't know then
11:17 < mAritz> jetienne: if i remember correctly there is/was some discussion on the haromny getters/setters and even an implementation that included something like that, but it was abandoned, i think.
11:17 < mAritz> can't say for sure though
11:17 < jetienne> mAritz:i see
11:17 < mAritz> Sean3z: but surely your server should already be initalized when clients start connecting?!
11:18 < fkm> Do you guys have a preferred pastebin?
11:20 < jameshowe> everyone likes gist, right
11:20 < mAritz> jetienne: actually, take a look at proxies, that might include what you need. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Very_simple_example
11:21 < fkm> Ok. Thank you jameshowe!
11:22 < mAritz> jetienne: the problem is obviously that you have to have initial control over the objects because as is stated at the top somewhere: proxying an object creates a new object and does not modify the existing one.
11:23 < jetienne> mAritz: thanks! looking
11:23 < roelmonnens> I have a little nodejs-app with socket.io to get some realtime updates on my website. Since a few days I'm getting constant requests for switching protocols. Anybody got an idea in what direction I should start looking????
11:23 < r04r> mAritz: Node has proxies? I can't seem to instantiate them
11:24 < mAritz> node --harmony-proxies
11:24 < r04r> mAritz: Also see the 'non-standard' banner
11:24 < r04r> i see
11:24 < mAritz> non-standard because it's still being worked on under ES6
11:24 < r04r> makes sense, thanks
11:24 < jetienne> mAritz: it seems firefox only, but i will dig deeper :)
11:24 < mAritz> http://wiki.ecmascript.org/doku.php?id=harmony:proxies
11:25 < mAritz> jetienne: node --haromny-proxies
11:25 < mAritz> * --harmony-proxies
11:25 < jetienne> mAritz: oh and i believe i can even run chrome with similar flags… if so I'm in good shape :)
11:26 < jameshowe> getting your users to do the same is a tall order
11:26 < mAritz> meh... just include a popover that has instructions on how to set launch aruguments and set experimental flags. :DDD
11:27 < fkm> Does anyone see, what the problem with my script is? Somehow Node cannot rename the files I try to upload. Could this be a permission problem? https://gist.github.com/anonymous/5974625
11:27 < mAritz> "Your browser is not from the future so we do not support it. To make magic happen please do this: yadda yadda yadda."
11:28 < mAritz> seems completely acceptable to me.
11:28 < jameshowe> ENOENT - file not found
11:28 < jameshowe> @ fkm
11:29 < mAritz> does the upload folder exist?
11:29 < jetienne> mAritz: yeah especially because this is in a debug situation. so the devs are the only one to use it. 'you are supposed to know what you are doing' kinda :)
11:29 < fkm> jameshowe: Does that mean, that the problem lies with the temporary path?
11:29 < mAritz> fkm: also: do you use domains?
11:29 < fkm> mAritz: At this point; no. But when the site goes into production; yes.
11:30 < fkm> mAritz: Does this have an effect on the file-uploads?
11:31 < mAritz> fkm: just asking because you are throwing errors in callbacks...
11:31 < mAritz> which is kind of bad
11:33 < fkm> mAritz: I'm just getting started with Node but unfortunately I got a deadline approaching as I haven't had a lot of time these past months. So, at the moment I'm trying to get the thing running so that I can present the page and revisit the code later without the customer knowing -.-
11:33 < mAritz> fkm: does the upload folder exist?
11:33 < fkm> Yes. The folder exists and the files get stored there. The problem seems to be the renaming/moving.
11:33 < mAritz> fkm in that case delay using domains (especially because their api is not yet marked as stable) and instead of throwing call your callbacks with the error.
11:34 < mAritz> oh, haha. you're trying to unlink the file that you renamed
11:34 < mAritz> fkm: that's not going to work for hopefully obvious reasons ;D
11:34 < fkm> AAaaaahhh xD
11:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:35 < fkm> Yes. That sounds plausible ;-)
11:35 < fkm> Thank you!
11:36 < juho> so is cluster usable yet?
11:36 < fkm> Hmmm... Changing the unlink to the target_path doesn't work either :-(
11:36 < juho> i'm a little iffy on picking up anything in an experimental state
11:36 < fkm> Should I just skip the unlinking?
11:37 < fesener_> Hi everyone, I'm planning to use tab system in my node chat application so when a user joins a room it'll create a new tab that shows messages from only that channel, is it possible to have user in more than 1 channel using socket.rooms system ?
11:37 < mAritz> fkm: why would you want to delete the file right after renaming it?
11:37 < mAritz> juho: what exactly do you mean by usable? why wasn't it usable before?
11:38 < juho> oh, i haven't touched it before :)
11:38 < juho> just seeing the docs say its experimental
11:38 < juho> wondering if it's working at all like expected or should i wait 
11:39 < jameshowe> it seems to work
11:39 < jameshowe> people are using it
11:39 < juho> alrighty
11:39 < jameshowe> but it might get completely rewritten and you'd have to change how you use it
11:39 < fkm> mAritz: I got this from a tutorial. But anyways. I just removed the unlink and got the same error. I'll try with an absolute path :-\
11:39 < juho> yeah, that's the iffy bit :)
11:39 < jameshowe> *might*
11:40 < jameshowe> it's up to you
11:40 < juho> sure
11:42 < mAritz> fkm: what line is the error occuring in anyways?
11:43 < mAritz> fkm: because the error in the output says line 98 while your gist only has 45. :P
11:44 < fkm> mAritz: Sorry! My bad. It's line 15 in the gist. Just below the rename.
11:45 < mAritz> do a console.log(tmp_path, target_path); before your rename call and check that your paths are correct
11:45 < mAritz> i have a suspicion that your usage of './' might end up different than what you intend.
11:46 < mAritz> fkm: if you want to use a path relative to wher the script is located use __dirname + "/subpath"
11:47 < fkm> OMG xD
11:47 < fkm> I just found the error thanks to the output. How embarrassing -.-
11:48 < fkm> The target-directory didn't exist. Not the original file -.-
11:48 < fkm> Finally something to go on. Thank you very much! :-D You saved my day!
11:50 < mAritz> when in doubt console.log everything :D
11:50 < mAritz> (or use a debugger)
11:53 < fkm> I will from now on :-)
12:04 < serapath> mAritz: http://pastebin.com/zxU8X9j5 (to use "_return(err callback)" to finish initialization
12:11 < mAritz> serapath: if you don't actually do anything asnc you don't really need to do it that way. but in your first example you did some redis calls (which are async) and only edited the info in there afaict
12:14 < serapath> yes, i'm now going to use this pattern with my redis problem
12:14 < serapath> and it will hopefully solve it and i wont run into similar problems in the future
12:14 < Amy> Hello Guys.. I'm new to Node.js
12:15 < Amy> Where to start
12:15 < Amy> Any books preferred ?
12:16 < mAritz> serapath: if you want you can send me an example/github link when you're done and i'll have a look :)
12:16 < mAritz> Amy: I personally liked the official docs. But there are tonnes of other resources
12:17 < mAritz> Amy: for example http://www.nodebeginner.org/ http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/ http://nodeguide.com/beginner.html
12:17 < mAritz> just some google results ;)
12:17 < Amy> I'm starter please let me know any books are available .
12:17 < SomeoneWeird> physical books? not many
12:17 < SomeoneWeird> have you programmed before?
12:17 < Amy> No
12:18 < mAritz> i know for a fact that the guy behind nodeguide.com (feilx geisendorfer) is a node.js god
12:18 < mAritz> Oh, in that case starting with basic javascript would be better
12:18 < Amy> I know JS 
12:18 < Amy> It's a scripting
12:18 < mAritz> do you know what an async function is?
12:19 < Amy> ?? Are you interviewing me :P
12:19 < Amy> Yes Ofcourse
12:19 < mAritz> just testing how much you know to decide what kind of resources may be best for you :)
12:20 < mAritz> ok, then i think the links i posted above are okay for you :)
12:21 < Amy> By learning it can create an awesome app :?
12:23 < MI61> joyent/node: Ben Noordhuis master * 6acde21 : src: remove unnecessary calls to Local<T>::New() (+2 more commits) - http://git.io/vAtpLg
12:25 < Amy> Hey isaacbw
12:25 < Amy> Let me see you in noon :P
12:27 < sandro_> does fs.write fire its callback prior to flushing the system buffers, or after?
12:39 < jmmy> hi
12:45 < jmmy> I am confused about: checkinstall #(remove the "v" in front of the version number in the dialog)
12:45 < jmmy> dialog or directory?  I'm gonna assume its directory
12:46 < jmmy> I did these instructions for debian stable all as root https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
12:47 < jmmy> Installation failed
12:47 < jameshowe> checkinstall isn't that great, but you can fix stuff with dpkg-edit afterwards
12:48 < jameshowe> which you can probably find with your favourive web search engine
12:49 < jmmy> jameshowe, thx
12:50 < jameshowe> but it's "dialog", not "directory"
12:50 < jameshowe> the version number of the package must not have a "v" in it
12:50 < jameshowe> when checkinstall prompts you
12:51 < jmmy> jameshowe, hmm, ok let me try again
12:51 < jmmy> what does cd $_ do?
12:56 < jmmy> no I can't find this dialog
12:56 < jmmy> vcbuild.bat?
12:59 < jmmy> can I install the wheezy/lmde version on squeeze, well I guess I'll know soon enough
13:09 < jameshowe> jmmy: it's only if you're making the package yourself
13:09 < jameshowe> jmmy: it's not clear why you'd be doing that if trying to install from an existing repo
13:10 < jmmy> jameshowe, no, I am not installing from repo
13:11 < jmmy> https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
13:11 < jmmy> I downloading the package using wget
13:11 < jmmy> but it says: checkinstall #(remove the "v" in front of the version number in the dialog)
13:12 < r04r> jmmy: just run the checkinstall command and you should get a dialog
13:14 < jameshowe> you're not downloading the package, you're dwonloading the source and building it
13:14 < jameshowe> checkinstall makes the package
13:14 < jmmy> r00tb0y, oh I see
13:15 < jmmy> jameshowe, I see, and then I change item 3 and remove the v eh
13:15 < jameshowe> yes
13:15 < jmmy> ok I changed it this time
13:16 < jmmy> hopefully it installed, cause I have squeeze and this package is for wheezy
13:16 < jmmy> can you use node.js with mysql?
13:16 < jmmy> or do you have to buy could db
13:17 < crowster> jmmy i think you can
13:19 < jmmy> ok ok, I got it installed
13:19 < jmmy> r04r, thx, I wouldn't have got it installed if not for you
13:20 < jmmy> trust the cloud?
13:41 < kvk> can anyone tell me where to start for a beginner to enter node.js freshly?
13:42 < kvk> can anyone tell me where to start for a beginner to enter node.js freshly?
13:42 < r04r> kvk: Do you knwo javascript? And repeating your message every minute won't help
13:43 < kvk> yeah little bit..
13:43 < jdelgado> kvk: Google is a thing
13:44 < kvk> yeah ggogle is th thing,but as you people are already in to the node.js, so if u can refer  mesome starting stuff, it would be helpful
13:45 < mAritz> nodebeginner.com
13:45 < mAritz> kvk: for example http://www.nodebeginner.org/ http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/ http://nodeguide.com/beginner.html
13:45 < lhk> hi
13:45 < MI61> joyent/node: Ben Noordhuis master * c679ac8 : build: fix windows build - http://git.io/QOVZVQ
13:45 < jdelgado> http://nodejs.org/
13:45 < lhk> are there stable and secure payment modules for nodejs ?
13:45 < mAritz> (copypasted my message from 2 hours ago ;D )
13:46 < jdelgado> lhk: Define secure payment modules
13:46 < kvk> thanks a lot..
13:47 < lhk> jdelgado: a nodejs module for amazon payments and paypal would be great. with secure i mean that they are widely accepted and have been tested thoroughly
13:48 < mAritz> lhk: define thoroughly :D
13:48 < jdelgado> lhk: Why do you need a module for that? Both are offsite...
13:48 < mAritz> by some security standards node.js isn't even around long enough to be anywhere near thorough testing.
13:48 < jdelgado> Unless you are talking about remote processing?
13:48 < jmmy> do I need to learn backbone too?
13:48 < mAritz> jmmy: what for?
13:48 < jdelgado> mAritz: We're PCI compliant on Node. :)
13:49 < jmmy> mAritz, not sure, I want to learn to make real-time webapps
13:50 < mAritz> jdelgado: well, that doesn't mean your app and modules are thoroughly tested. that just means you comply with a whole host of sensible and not-so-sensible rules. there can still be lots of bugs in your system.
13:50 < mAritz> jmmy: it wouldn't hurt. but any other framework (angular, ember, meteor...) would do as well. or just go without anything to learn the bare bone stuff
13:50 < lhk> jdelgado, im sorry if this question was stupid. i would like to sell something online. server is nodejs. and the payment would have to be reported to the server. i thought maybe there would be modules for both server and client side. like a paypal module that generates some html for the client and sets up its own port for encrypted feedback on the payment success
13:50 < jdelgado> mAritz: Since PCI 2.0, everything has to be tested, you have to provide TDD to your auditor and the entire thing.
13:51 < mAritz> oh fuck, did not know that. thanks :)
13:51 < jdelgado> :P
13:51 < jameshowe> lhk: i beleive you have the client talk to amazon/paypal's servers, not yours
13:51 < jdelgado> lhk: That sounds like something you will need to do client-side on your own.
13:52 < r04r> lhk: paypal pings your server on payment success, you dont need to do that yourself
13:52 < mAritz> i only once read pci 1.x completely and was tasked to evaluate whether the company i worked for complied. i got to like page 5 before i knew they didn't. and after reading the entire thing i went into the code just for fun to see if i could find security holes that wouldn't cause a pci inspector to kill someone... i did. plenty.
13:52 < r04r> lhk: All you need to do, for paypal, is send your user towards paypal in the client and then paypal will ping your server with a yes/no/maybe and send user back to your site
13:52 < jmmy> mAritz, but I'll definitely need node
13:53 < lhk> r04r, thats perfect
13:53 < lhk> exactly what i need
13:53 < lhk> how does amazon payment work ?
13:53 < jdelgado> mAritz: lol, yeah PCI is nuts. We spend at least 5x more a month for technology we don't even need, just to comply.
13:53 < r04r> lhk: I do not know. I assume they have a similar process, since it is pretty common. But, I do not know.
13:53 < mAritz> jmmy: well, strictly speaking you can make real-time apps with other languages/frameworks as well. but node.js is very good at it. :)
13:54 < lhk> jameshowe, jdelgado, r04r, thanks for the input. paypal sounds great. ill read up on amazon payments
13:54 < neeky> i like payment gateways that also have 'secure vault' or whatever their term is for secure storage,  lowers your pci compliance level way down to the lowest level
13:54 < r04r> PCI is an american thing, yes?
13:54 < jmmy> mAritz, you can with php? I thought you cant "push" data but node can
13:55 < jdelgado> neeky: I wish I could do that! We have to store data to go cross-merchant :(
13:55 < mAritz> lhk: there are several downsides to paypal (and probably amazon) though. there are numerous accounts of paypal fucking over people and businesses big time and then not reacting at all. (i'm saying this as someone who still uses paypal as a client because i usually don't have many alternatives :( )
13:55 < r04r> jmmy: php can do realtime, it'll just be a headache and kill your server
13:55 < jdelgado> lol php and realtime in the same sentence'
13:56 < mAritz> jdelgado: were you ever actually inspected? cause i know some companies who never were so far and it's making me kind of nervous every time i'm asked to enter credit card data anywhere. :/
13:56 < lhk> mAritz, yeah ive heard of that, too
13:56 < lhk> but what can one do ?
13:56 < jmmy> r04r, yes. because you cant push, no liteners, eh?
13:56 < r04r> mAritz: lhk: paypal once shut down my personal account after I received a $100 donation for a community site I was running. 
13:56 < neeky> r04r, PCI applies to ALL organizations or merchants, regardless of size or number of transactions, that accepts, transmits or stores any cardholder data, using Visa, MasterCard, American Express, Discover and JCB 
13:57 < jdelgado> mAritz: You either do a QSA, which is on your own, if you are doing under a million transactions a year, anything past that you are declared level one, then you must be audited every year.
13:57 < mAritz> r04r: PCI is a global thing.
13:57 < lhk> r04r, what ? that's a scandal. how did they justify this ?
13:57 < neeky> so it's world wide
13:57 < r04r> neeky: mAritz ok I see, never did any payment processing outside of hobbyism
13:57 < jmmy> r04r, why? they charged $4?
13:57 < neeky> 'they' are the CC companies, they established pci
13:57 < mAritz> lhk: they usually don't justify their account shutdowns...
13:58 < mAritz> r04r: PCI is only relevant if you deal with credit card data.
13:58 < r04r> jmmy: They justified it by claiming it was fraud. I could appeal after submitting my ID and a whole host of other paperwork for my business. I had no business, since it was a non-profit community site, and it was a personal account, so... Account still locked.
13:58 < r04r> mAritz: Ok good to know
13:58 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:59 < neeky> my main problem is if I'm using a system where the user never enters his CC on my site, and my employees never see or touch the card, i still have some level of compliance
13:59 < jmmy> r04r, where is te $100, refunded?
13:59 < neeky> even though a 3rd party is acting on my behalf for 100% of the transaction
13:59 < r04r> jmmy: Still in the locked account
13:59 < r04r> In paypal's pockets most likely
14:00 < jasonkuhrt> sails seems good
14:00 < jmmy> r04r, do you know donator? you could do e-transfer only $1
14:00 < neeky> sails could be good, if it's docs didnt suck
14:00 < jasonkuhrt> does anyone have an informed opinion about it?
14:01 < neeky> that was mine ;)
14:01 < jasonkuhrt> neeky: docs suck?
14:01 < r04r> jmmy: It's been years. I'm not sure what an e-transfer is, but the donator just tried to paypal me the $$ then my account was immediately suspended with no access to the received money
14:01 < neeky> it's currently at the 'it could be really really cool' stage, but if you get stuck, good luck
14:02 < mAritz> jmmy: and that's not even really extraordinary or a large amount. there were cases where thousands of dollars were locked up from charity events because somehow paypal got the idea that someone might be running a fraud. so they seize the account and the money is gone. which in paypals world isn't fraud at all - and because you agreed to their bullshit terms you'll have to go through quite some court trouble to get anywhere.
14:02 < b3tamax> Did you want to transact in bitcoin instead?
14:02 < jdelgado> lol bitcoin
14:02 < r04r> mAritz: paypal is good paypal is grand :)
14:02 < neeky> jasonkuhrt, they are very sparse
14:02 < b3tamax> XD
14:02 < jasonkuhrt> neeky: is this about it https://github.com/balderdashy/sails/wiki/_pages ?
14:02 < jmmy> r04r, mAritz wow, thats terrible
14:03 < r04r> b3tamax: i am since using bitcoin actually, donations dropped significantly though in my case it's no matter because it never averaged above 50/year anyway
14:03 < neeky> jasonkuhrt, here's the "lets get started" page: http://sailsjs.org/#getStarted
14:03 < jmmy> I received $5, $10 payments a few times no problem
14:03 < neeky> notice at the bottom: "Now, let's get Sails to do cool stuff." << this is not a link
14:04 < jmmy> And my customer sells frames and photos online no problem
14:05 < r04r> jmmy:  Yeah I have another personal account which gets a ton of money going in/out but each transaction is under €20 and no problems so far
14:05 < jmmy> I setup www.earn165.com but he never sold the file yet.  But I hope it works for him
14:05 < r04r> But I would never build a business on paypal
14:05 < jasonkuhrt> neeky: http://sailsjs.org/#documentation/new-to-nodejs so once I actually start to use this you're saying its going to come up short-handed for now?
14:05 < jmmy> r04r, yeah, the 4% is too large anyway
14:06 < r04r> jmmy: You can actually apply for lower rates if all transactions you process are below €10
14:06 < jmmy> This new trend to SaaS is expensive too
14:06 < neeky> jasonkuhrt, it did for me.  I did the quick start, and got the helloworld app up and running, then was "now what"
14:07 < neeky> and when I tried to extend the example, hit a brick wall
14:07 < jmmy> I don't know why it isn't easy to just process credit cards online, like how it is easy over the phone or in person.  You just need the number.  Why can't you just colect the number online too?
14:07 < neeky> like looking for the REST interface specs, etc
14:07 < neeky> it came up short
14:07 < neeky> but if they keep going, it will be a sweet platform
14:08 < neeky> a good example is users, policies, etc
14:08 < neeky> i need to store much more stuff about a user, and users in my system are members of companies, so there is an organizational heirarchy
14:09 < neeky> in sails there is 0 mention of that outside of a small section on policies
14:09 < serapath> is it ok to replace ajax with socketIO?
14:10 < r04r> serapath: you may stub your toe a few times but sure why not?
14:10 < coderbuzz> Hello, I come from Python. Anyone can guide me which good sequelize or jugglingdb for ORM?
14:10 < serapath> are there any pros/cons?
14:10 < neeky> this is funny though: http://nodejsreactions.tumblr.com/post/53120218827/response-to-suggestions-of-putting-promises-back-in
14:11 < r04r> serapath: that depends entirely on what you want to dow ith it
14:11 < serapath> like, would i loose some capabilities if i'd replace ajax with socketIO? would it be faster/slower performancewise? etc...
14:12 < neeky> coderbuzz, if you use github's stars and forks count as a metric of popularity, sequalize has many more
14:12 < r04r> serapath: AJAX = page pulling data from server, socketIO = sockets. Page can ping the server whenever, server can ping the page whenever
14:12 < neeky> and that's usually a pretty good metric of how much support you can expect when you get stuck
14:13 < r04r> Dutch: You are from spain, not holland. :(
14:14 < serapath> r04r: with my limited current knowledge, i guess its possible, probably easy, to always use socketIO where i would/could use ajax, but its not possible the other way round. socketIO is faster too. so i could implement "page pulling data from server" with socketIO
14:14 < serapath> so why use ajax at all?
14:14 < serapath> (thats my current thinking)
14:14 < r04r> serapath: That seems about right. And because socket.io is a fancier technology than ajax, lots more that can go wrong too. May be overkill if ajax will just suffice
14:15 < r04r> serapath: Fun fact, socketIO uses ajax (and a few other methods) if websockets are not supported
14:15 < serapath> ok :-) but then i'll try to go down that road and dismiss ajax alltogether
14:16 < serapath> currently i'm updating slickgrid through socketIO, not ajax. (page pulls all the rows through socketIO and when users add new rows or modify/delete existing ones, informs the server)
14:16 < coderbuzz> neeky, thanks
14:16 < neeky> np
14:18 < coderbuzz> neeky, may i know what frameworks you choose for your project / daily usage?
14:19 < neeky> coderbuzz, im currently using mongodb + mongoose
14:19 < neeky> but mongodb is not the most popular nosql around here
14:19 < neeky> couch is i think
14:20 < neeky> and lots of people tend to think the rdbms should handle the schema, or they write it themselves
14:21 < neeky> but i'm a DRY/DRO guy, so I use mongoose for my schema needs
14:22 < neeky> coderbuzz, take my advice with a grain of salt though, I'm about 1 IQ point above needing to be placed in a special facility
14:26 < jdelgado> I'd recommend against MongoDB in production
14:27 < neeky> ^^^^ see ^^^^
14:27 < b3tamax> me tooooo
14:27 < brimstone> jdelgado: what would you recommend in production?
14:27 < b3tamax> a real database.
14:27 < jdelgado> Most people use it because it is easy... I really don't feel it is a production worthy database for many reasons.
14:27 < b3tamax> postrgresql
14:27 < jdelgado> I personally use CouchBase, which is extremely stable, but their node drivers suck.
14:27 < coderbuzz> neeky, mongodb also my choice. but currently just for trying something new
14:28 < jdelgado> Yeah, postgres/mysql are good if you don't need any major replication going on.
14:28 < neeky> no one ever seems to progress past conjecture why couch db is bad though
14:28 < coderbuzz> you know, most of us come from RDMS stuff
14:28 < neeky> sorry, why mongodb is bad
14:28 < b3tamax> jdelgado: Postgres scales well. Never as easily as mongo shards but still.
14:28 < jdelgado> neeky: Oh man, I could give you horror stories
14:28 < neeky> i was an oracle DBA for a few years - never again
14:28 < jdelgado> HAH
14:29 < jdelgado> not as bad as oracle :P
14:29 < brimstone> jdelgado: thanks!
14:29 < b3tamax> the global write lock? bad memory management?
14:29 < coderbuzz> so, can we use mongodb to replace our transactional RDMS based?
14:30 < jdelgado> Yeah besides the write-lock that will guarantee you switch after you get a large volume of transactions, it's really unsable.'
14:30 < jdelgado> Two years ago, we had two production clusters of MongoDB running, one day the replication from the mater to only one node stopped, all the others ones worked fine. Assumed it was something wrong with the node and reimaged the bad one, right?
14:31 < jdelgado> So ended up doing that, putting it back in the cluster, the thing wouldn't replicate. This is a completely new instance, new IP and everything.
14:31 < jdelgado> Did some troubleshooting, it could connect, the master saw it, it was in the cluster, but the replication was stalled.
14:32 < jdelgado> Literally nothing from stats was pointing out an issue, I ended up killing the cluster entierly and bringing it over to a new one, thank god for EBS
14:32 < jdelgado> Once it was on a new cluster, everything worked perfectly. Just random failure.
14:32 < b3tamax> :S
14:33 < jdelgado> Yeah
14:34 < jdelgado> Don't even get me started about upgrading it
14:34 < jdelgado> If you want front-row tickets to a comedy show, watch someone upgrade MongoDB in production
14:34 < jdelgado> </rant>
14:34 < coderbuzz> :D
14:34 < merpnderp> With all the buzz about javascript and memory management, can't that be mitigated by just being more careful about memory allocation? If you have a tight loop creating lots of objects, just reuse the minimal amount necessary?
14:35 < b3tamax> merpnderp: I don't really want to have to start tuning my database in the application layer from day 0. Just read some books on SQL and do it right.
14:36 < neeky> merpnderp, isnt that a general rule, and not specific to a GCd language?
14:36 < jdelgado> merpnderp: Most of the people that complain about memory management don't know how to manage memory. If you have ever written a C program, you understand that you shoouldn't declare everything as a variable.
14:36 < fesener_> would someone tell me why my server crash when I add:  "return io.sockets.clients(room);"
14:36 < fesener_> /home/rls/node_modules/socket.io/lib/parser.js:75
14:36 < fesener_>       data = JSON.stringify(ev);
14:36 < fesener_>                   ^
14:36 < fesener_> TypeError: Converting circular structure to JSON
14:37 < fesener_> this is the error
14:38 < jdelgado> fesener_: http://lmgtfy.com/?q=TypeError%3A+Converting+circular+structure+to+JSON
14:38 < merpnderp> neeky: exactly. But the "you can only forget about memory if you have 10x the amount required to spare" seems like it should be obvious. 
14:39 < jdelgado> merpnderp: If you don't have a crazy amount of stuff you are trying to actively store, the GC does a pretty good job - as long as you are using it.
14:40 < merpnderp> jdelgado: I had a planet terrain generator where I generated the heightmaps on the CPU. I was getting horrible GC spikes even though I was reusing all the objects. Not sure what was going on, but I didn't try to fix it very hard, I just ported that bit to the GPU. Problem solved.
14:41 < jdelgado> merpnderp: I would have created a new object and unset the old one - that is how the GC is supposed to work
14:43 < merpnderp> jdelgado: that seems counter-intuitive. 
14:43 < merpnderp> how could that be more efficient that reusing the object?
14:44 < jdelgado> merpnderp: You're absolutely right, but otherwise, objects start building up chunks of memory, the GC sees it is still in-use and ignores it, and you start having issues.
14:46 < merpnderp> jdelgado: so if my objects have a fixed size it makes sense to reuse them, but if they are variable, like an array, or objects of objects, then call delete?
14:47 < jdelgado> merpnderp: Somewhat true. If you are cycling data through - do a prototype, create the object, get rid of it when you are done, and repeat.
14:53 < neeky> merpnderp, i use the lazy programmer process of "i'll worry about memory when i run out of memory"
14:54 < neeky> it has worked for me well - and I have programmed all the way down to msp430s, which have 128 BYTES of RAM
14:54 < neeky> in fact, I wrote a PID controller that fits on an MSP430 - the only one of its kind :)
14:56 < mscdex> 128 bytes is enough for anyone
14:57 < neeky> yeah, and who needs floating point math?
14:58 < mscdex> nobody, keep that point fixed
15:00 < kenperkins_> anyone have a good alternative to google hangouts for more than 10 people
15:01 < kenperkins_> (video/screenshare)
15:01 < mscdex> a physical location? :-D
15:02 < jmmy> kenperkins_, irc
15:02 < jmmy> hehe
15:02 < kenperkins_> :P
15:02 < sCoRpi> yeah, starbucks
15:02 < r04r> mscdex: You mean... actually being physically near people? Preposterous
15:03 < kenperkins> hangout UX is awesome
15:03 < sCoRpi> oooor kenperkins_: write your own small hangout tool using node :D
15:03 < kenperkins> but they limit the thing to 10 ppl :(
15:03 < neeky> kenperkins, with 2 way video?
15:03 < kenperkins> neeky: yep
15:04 < neeky> ahev everyone sign up for justin.tv
15:05 < neeky> s/ahev/have/
15:05 < neeky> and create a page that embeds everyone's feed
15:05 < r04r> how does hangouts share the screen anyway? native plugin?
15:06 < neeky> maybe a node.js app that adds people's feeds when they join an irc channel
15:06 < kenperkins> r04r: I guess yea
15:07 < neeky> skype premium allows a bunch of people
15:07 < kenperkins> I think I'll follow sCoRpi's advice and write my own
15:09 < merpnderp> neeky: hah, that's awesome
15:10 < merpnderp> surely someone has written some memory tests and run a profiler against them and there is a definitive pattern for managing memory in JS?
15:22 < beardtree> Is there a better way to write this? https://gist.github.com/beardtree/f89e907019077b2ba9c7
15:22 < beardtree> (8 lines, Q-heavy)
15:23 < beardtree> Q.denodeify actually passes the args as an array instead of applying.
15:26 < spion> won't Q.ncall work in this case?
15:29 < beardtree> spion: there is no Q.ncall?
15:29 < spion> oh its nfcall
15:29 < spion> sorry. I think it used to be ncall
15:30 < neeky> merpnderp, someone did some array operations with strings yesterday on here, and found each character was consuming 6 bytes of ram
15:30 < mAritz> merpnderp: memory management isn't easy. I'm having some issues myself where i have a frontend canvas app that has a sawtooth memory profile even though i'm preeetty sure i'm not allocating anything. so i did a bunch of minimizing my code to find what's going on and i have not had much success... :/
15:30 < Trangar> I'm trying to get into making big javascript applications and I have some experience with Knockoutjs. What libraries are there to load and save data easily? I've looked into Breezejs so far
15:30 < neeky> strings are UTF-8 in V8
15:30 < kenperkins> I'm so out of it on the whole promises callbacks thing
15:30 < kenperkins> what's the latest
15:30 < kenperkins> (I love callbacks)
15:31 < beardtree> Actually it looks like none of the Q functions work since they all depend on Q.makeNodeResolver.
15:31 < beardtree> Err, dfd.makeNodeResolver.
15:31 < beardtree> And that always has one argument, but it's a list if the callback was called with more than 1 argument.
15:31 < neeky> kenperkins, evidently promises are polarizing the node community 
15:31 < kenperkins> Well I knew THAT much :)
15:31 < neeky> thats the extent of what i know
15:32 < kenperkins> the thing I love about callbacks is the explicit scope
15:32 < kenperkins> it's very easy to read :P
15:32 < poincare101> Hi guys. I'm working with express, ejs and couchdb to create a simple login system. The problem is that all of my views need to know whether or not the user is signed in; does that mean I have to pass in this value to every single view? Is there some way to DRY this?
15:32 < neeky> in my brain, an event emitter is the same thing, but  guess not?
15:32 < kenperkins> poincare101: app.locals? 
15:33 < neeky> so foo.on('done', doFoo);
15:33 < beardtree> poincare101: you should set a session cookie.
15:33 < poincare101> kenperkins: but, how would I set the session variable through that?
15:33 < poincare101> beardtree: how would I get that in ejs? I'm using sessions obviously to set the login...
15:33 < neeky> poincare101, look at sessions in express
15:33 < kenperkins> poincare101: in your middle ware, you'd crack the request headers and set a cookie, or set an app.locals for server side templating
15:34 < kenperkins> what neeky 
15:34 < kenperkins> check out sessions in express
15:34 < neeky> it does it for you - but you need a session store - express uses memory store, which is not for production
15:34 < spion> beardtree, sounds like reason enough for a pull request :)
15:34 < poincare101> kenperkins: I'm using sessions. The only problem is I can't access the session store in my views, it seems like
15:35 < kenperkins> poincare101: isn't it just req.session when rendering a view?
15:35 < poincare101> kenperkins: I'm not sure if I even have the req object by default. I'll check on that.
15:35 < beardtree> spion: https://github.com/kriskowal/q/issues/243
15:35 < beardtree> I don't get the logic.
15:35 < kenperkins> poincare101: if you're using express, you better have the req :D
15:36 < neeky> poincare101, you can implement your view as middlewarem you tou'll get the req and res objects passed to you
15:36 < poincare101> kenperkins: if I do, then the problem is solved
15:36 < poincare101> neeky: I'm just using res.render, not sure if that's what you mean
15:36 < neeky> if you have res, you have req
15:36 < kenperkins> but you're doing res.render inside of an app.get('/foo', function(req, res) { … })  right?
15:37 < spion> beardtree, oh so they return an array. whats the problem with using the array?
15:38 < kenperkins> who writes q? the readme has such a contrived example
15:38 < poincare101> Okay, I can't get to req in my view. It is telling me req is not defined...
15:38 < spion> if you want to change the way that .then behaves you will have to change the official promises spec.
15:38 < beardtree> spion: nothing, it's just unintuitive, and you can't name args like regular.
15:38 < neeky> the session object is attached to the request object, so you can then attach anything to the session object. i attach the entire user model to my session object 
15:38 < kenperkins> it compares 4 anonymous functions using callbacks to 4 named functions
15:38 < kenperkins> poincare101: gist please
15:39 < neeky> poincare101, can you hastebin a sample of how you render a view?
15:39 < poincare101> neeky: yes, sure
15:39 < beardtree> Domenic_: are you there?
15:39 < Domenic_> beardtree: ya what's up
15:39 < spion> beardtree, that may be true but the Promises spec is what it is, and all promise libraries strive to be compatible
15:40 < beardtree> spion: I have no problem with .then but I have a problem with .makeNodeResolver.
15:41 < beardtree> Domenic_: https://github.com/kriskowal/q/issues/243 -- that's you/
15:41 < beardtree> *you?
15:41 < spion> beardtree, but the proposal you linked to will create a resolver that calls .then with multiple arguments, correct?
15:41 < Domenic_> beardtree: yes.
15:42 < poincare101> neeky: this: http://pastie.org/8131552 and this: http://pastie.org/8131550
15:42 < Trangar> Any suggestions for a library to sync live changing data between server and client?
15:42 < beardtree> OK, I guess I get the idea.
15:42 < beardtree> Domenic_: nevermind, thanks. :)
15:42 < kenperkins> poincare101: and req is null on http://pastie.org/8131552?
15:43 < kenperkins> poincare101: oh I see.
15:43 < kenperkins> easy fix.
15:43 < kenperkins> lemme show you
15:43 < poincare101> kenperkins: no, on the view
15:43 < neeky> poincare101, you can pass the session to the render
15:43 < kenperkins> you have to pass it.
15:43 < Domenic_> kenperkins: the functions being compared are `stepN` and `promisedStepN`; both are named.
15:43 < neeky> since it's 'just json'
15:43 < poincare101> I understand that I have to pass it, but, the problem is, I'd have to do that for *all* of my renders/views.
15:44 < poincare101> The question is, can I avoid this repetition throughout the codebase?
15:44 < kenperkins> poincare101: https://gist.github.com/kenperkins/5976604
15:44 < kenperkins> poincare101: that's where app.locals comes in
15:44 < beardtree> Trangar: Socket.IO
15:44 < kenperkins> add a custom middleware after sessions that puts session.whatever into app.locals
15:44 < poincare101> kenperkins: not sure how to use that in this case. could you help?
15:45 < Domenic_> beardtree: i assume you know about `.spread`?
15:45 < kenperkins> http://expressjs.com/api.html#app.locals
15:45 < kenperkins> poincare101 ^
15:45 < poincare101> kenperkins: okay, let me try and figure that out.
15:45 < kenperkins> Domenic_: I guess where the example seems contrived is rarely do I only check err in a callback before the next function/callback step
15:45 < Trangar> beardtree, does Socket.IO automatically synchronise data objects between clients?
15:45 < kenperkins> i.e. lots of work often happens
15:46 < kenperkins> Domenic_: do you have a more real world example I can see?
15:46 < beardtree> Domenic_: I don't understand it yet.
15:46 < kenperkins> poincare101: show me where you configure your middleware
15:46 < kenperkins> I'll give you an example setting app.locals
15:46 < poincare101> kenperkins: I'm not doing any middleware yet.
15:46 < spion> hmm
15:47 < kenperkins> well, you must be if you're using sessions
15:47 < kenperkins> show me all your app.configure stuff
15:47 < poincare101> kenperkins: oh, just the configurations
15:47 < Domenic_> beardtree: instead of `.then(function (arr) { var x = arr[0]; var y = arr[1]; ... })` you can do `.spread(function (x, y) { ... })`. Just syntax sugar.
15:47 < poincare101> kenperkins: http://pastie.org/8131571
15:47 < Domenic_> (In ES6 you can do `.then(([x, y]) => { ... })`, that'll be the day.)
15:48 < spion> right, spread.
15:48 < spion> :D
15:48 < poincare101> kenperkins: http://pastie.org/8131571
15:49  * spion forgot about it
15:49 < kenperkins> poincare101: https://gist.github.com/kenperkins/5976604
15:49 < Domenic_> kenperkins: not sure how up to date all of these are, or how compelling they are, but they're pretty real-world: https://github.com/kriskowal/q/wiki/Examples-Gallery
15:49 < beardtree> Domenic_: whoa, neat! :)
15:50 < poincare101> kenperkins: let me check that...
15:50 < beardtree> Promises are definitely the way to go.
15:51 < kenperkins> subjective!
15:51 < Domenic_> kenperkins: this one is pretty real-world actually. My coding style is a bit crusty, e.g. this is from my AMD days, but the concepts are sound. https://gist.github.com/domenic/1604916
15:51 < neeky> poincare101, middleware is trivial.  here is the pattern: https://gist.github.com/nikmartin/5976680
15:52 < Domenic_> re: subjective. Sure, in the same sense gotos vs. function calls is a subjective decision.
15:52 < poincare101> kenperkins: thanks, I'm quite sure it is working (I'm still getting undefined on some session value)
15:52 < neeky> then you can 'use' that middleware with app.use
15:52 < kenperkins> req.session or session in your ejs template
15:53 < dimadima> where is EJS best documented? i can't figure out where the most complete, most "official" docs are to be found. https://github.com/visionmedia/ejs has the longest docs, but doesn't mention partials. are partials not part of EJS, but implemented elsewhere?
15:53 < poincare101> kenperkins: does not seem to be working. the session variabel turns out to be this: {"cookie":{"originalMaxAge":null,"expires":null,"httpOnly":true,"path":"/"}}
15:53 < poincare101> kenperkins: I'll double check, but, I'm fairly certain I'm setting session variables
15:53 < neeky> poincare101, you have to attach stuff to it
15:53 < kenperkins> poincare101: start by getting your sessions setup :D
15:54 < neeky> on successfull login: req.session.user = oserObj;
15:54 < kenperkins> Domenic_: I think I know why I have a natural aversion to Promises. It feels like Syntactic sugar
15:55 < neeky> then to check if a user is logged in, check to see if req.session.user != null
15:55 < kenperkins> poincare101: what neeky said. I had assumed you'd set the session up already :)
15:55 < merpnderp> mAritz: did you run a profiler on it?
15:55 < poincare101> kenperkins: I do have it setup
15:55 < poincare101> kenperkins: I think there might be a bug with some of the setting though, which might be causing this
15:55 < dimadima> kenperkins: what do you use instead of Promises?
15:55 < dimadima> on the front end
15:55 < neeky> poincare101, a session just hold 'stuff' it it doesnt know if a user is logged in
15:55 < poincare101> kenperkins: there, just got it. nasty "if" statement
15:56 < neeky> unless you tell the session something
15:56 < neeky> its just a bucket of stuff that tags along on the session
15:56 < poincare101> neeky: I know that - the only problem I was having was getting the middleware setup (turns out the session wasn't setting because of a totally different problem). thansk a lot
15:56 < poincare101> kenperkins: thank you.
15:56 < neeky> no problem
15:56 < kenperkins> dimadima: don't really do much front end 
15:57 < kenperkins> but when I did pretty sure it was just callbacks :P
15:57 < neeky> poincare101, be aware that sessions out of the box are not suitable for production -you need to implement a store
15:57 < poincare101> neeky: docs on that? I have never used stores before.
15:58 < kenperkins> google redis for express sessions
15:58 < kenperkins> among any number of viable session stores
15:58 < neeky> the session object in connect exposes 'store' and you can pass it a store object - it expectws the store to implement create, get, set, and destroy
15:58 < dimadima> kenperkins: gotcha :) i'm sort of a noob, but after swimming in callback soup for a while, i found the promises/deferred APIs a godsend
15:58 < kenperkins> dimadima: i found almost all cases of callback soup were due to bad factoring of the code in the first place
15:58 < poincare101> neeky: ah, so that the session is stored for the next time the user gets to the website?
15:58 < neeky> the redis store is a good templte to build your own store if you are not using redis
15:59 < kenperkins> dimadima: that said, there certainly was a window where I didn't really "get" it and my code was plauged with it 
15:59 < neeky> i just use a mongo collection and each session is a doc in the session collection
15:59 < kenperkins> so I understand the need to not have awful code
15:59 < kenperkins> poincare101: just do it in memory for starters
15:59 < kenperkins> you'll lose your sessions on a restart
15:59 < dimadima> kenperkins: yeah, most certainly, of course. i just wanted to spend time architecteching my app and not architecting/homing my knowledge of how to best structure async UI 
16:00 < poincare101> kenperkins: okay. got it. thank you again. Do you have any idea if Rails does session stores by default?
16:00 < kenperkins> I don't know jack about rails
16:00 < dimadima> kenperkins: this all plays into the fact that i'm kind of a patterns n00b. but i like to pick/choose which patterns i spend time learning/working with 
16:00 < kenperkins> dimadima: I've always fallen back to code that is explicit and simple over clever
16:01 < dimadima> kenperkins: that's what i like about node the most. 
16:02 < mAritz> merpnderp: i used the chrome devtools stuff. but not the new tracing crazy shit that no one understands :D
16:03 < neeky> poincare101, the in memory store is fine for development for sure. just make a todo to implement something like this using whatever database you have handy in your app: https://github.com/visionmedia/connect-redis/blob/master/lib/connect-redis.js
16:04 < poincare101> neeky: got it. Redis is in memory too for the most part...
16:04 < neeky> you jus need to expose .get. .set, and .destroy methods
16:04 < neeky> yeah
16:04 < neeky> thats why I use a db, so sessions can be persistent across servers
16:06 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:07 < poincare101> neeky: so, could I store the sessions in couchdb or something so I don't have to run a Redis instance?
16:08 < kenperkins> yep
16:09 < kenperkins> any db you want really
16:09 < FunnyLookinHat> Is there a way to get the model name of a Sequelize object that's been returned from the DB ? 
16:10 < FunnyLookinHat> I'm seeing .seq - not sure if that's appropriate though
16:10 < poincare101> kenperkins: thanks.
16:14 < neeky> poincare101, sorry, was on another channel yeah, the redis is really just a templet to show you how to implement your own
16:14 < poincare101> neeky: ok, got it.
16:14 < neeky> you just have to pass a 'store' object to the session. liek I said, I use a simple json document for session storage
16:15 < neeky> and the .get .set methods just look up that doc in my db using sid as the key
16:15 < neeky> trivial
16:24 < dimadima> substack: hey, question for ya about brfs. i'm trying to use it in conjunction with findit, like in http://pastebin.com/Z7pha2Ht. i was guessing this wouldn't work, and indeed, i get a referencefile error, i'm guessing because the finder is async. all brfs use has to be sync?
16:25 < somesync> Hi. I'm using express and need to make two calls to a defence from within the app.get function. How can I set data from within a callback to a variable in the calling scope?
16:25 < somesync> *database
16:26 < neeky> declare the variable at the module level?
16:26 < neeky> vs inside the app.* function?
16:27 < somesync> Neeky, I declared it in the app.get function. I want this variable to hold both db results
16:28 < somesync> Not good?
16:28 < neeky> and then access it outside the app.get?
16:28 < neeky> maybe hastebin some code?
16:28 < jasonkuhrt> anyone used/using swagger?
16:28 < somesync> No, within. Not calls to the db are within the get
16:28 < neeky> jasonkuhrt, I HAVE swagger, does that count?
16:29 < jasonkuhrt> neeky: noop
16:29 < neeky> somesync, can you hastebin a sample of the code?
16:29 < somesync> Neeky, can't post code atm, am on my phone :(
16:30 < neeky> somesync, ok. so, the calls to the db are in the app.get, and yopu need to access the results of these calls in the app.get as well, or outside the app.get?
16:31 < somesync> Inside. I declared a variable to hold both results before the calls. 
16:33 < neeky> and it's not working? declare var inside app.get, do db call (with callback i assume), set var inside db callback, then when you return from callback, var should have your data
16:34 < somesync> In nodejs fashion, I'm not returning data. The db result is handled in Callback. It's within the callback that I'm trying to set to my previously declared variable.
16:35 < somesync> Yep, that's what I'm doing. Do you think the result is rendering before the data is set?
16:36 < neeky> one liner: app.get('/', function req, res) { var foo; db.call('select * from table', function (error, results) { return (foo = results) } console.log(foo) }); });
16:36 < neeky> yes, you'll need to render inside the db callabck
16:36 < neeky> so ignore that on liner
16:36 < neeky> you are entering 'the pyramid of doom' :)
16:37 < neeky> app.get(callback(callback(callback{res.render()} )));
16:37 < serapath> thats a pretty flat pyramid
16:38 < neeky> you cant return from the db callback and render, you'll need to render inside the innermost callback
16:38 < neeky> serapath, i refuse to allow callback depth > 2
16:39 < somesync> Yep. That's what's happening. I have render() outside of the callbacks and so they're firing before the result gets set. 
16:39 < neeky> yep
16:40 < neeky> somesync, if it gets to deep for you, you can use something like: https://github.com/caolan/async
16:40 < somesync> That's kinda gross. I need both db results before I can render.. how to deal with that?
16:41 < neeky> inside db callback 1, do db call2, inside db callback2, do render
16:41 < neeky> Or use https://github.com/caolan/async
16:42 < neeky> thats the only way to 'wait' on your data to be available
16:42 < somesync> Hmm ok. What if I just "return" :) I don't need async for this any way..
16:45 < neeky> somesync, I guess that depends on your db driver
16:45 < neeky> if you don't pass a callback, it may become synchronous
16:45 < neeky> and hand you back a promise 
16:45 < r04r> neeky: and then it will block and That Is Bad™
16:45 < somesync> Hmm I guess I'll just nest the functions. Thanks for the help, neeky!
16:46 < neeky> somesync, that is best
16:46 < r04r> somesync: I recommend looking into async, it's rad and designed to help with this
16:46 < r04r> You can have both db queries run in parallel, and your render be called when they are both finished
16:46 < neeky> unless your queries depend on the results of each other
16:46 < neeky> like a join might do
16:47 < r04r> well that part seems obvious
16:47 < neeky> one might think...
16:47 < r04r> one does
16:51 < somesync> Queries are not related, but I need both results before I can render. 
16:52 < nathan7> neeky: ..a promise isn't synchronous
16:52 < nathan7> neeky: and node doesn't even allow sync network IO
16:52 < neeky> i meant or, not and
16:52 < nathan7> Words mean things, dear
16:52 < neeky> yeah
16:56 -!- mode/#Node.js [+o ryah] by ChanServ
16:57 < sekyms> is it possible to use the chrome script debugger on a node file?
16:58 < jameshowe> sekyms: yes
16:58 < jameshowe> https://github.com/dannycoates/node-inspector
17:01 < neeky> but not that one. This one: https://github.com/strongloop/node-inspector
17:01 < neeky> the origianl one is dead and wont work on recent versions of node very well
17:02 < neeky> strongloop forked it and fixed and improved it
17:02 < sekyms> yeah i can't get it to install via npm
17:03 < jameshowe> that's the problem when people with npm modules disappear and the forkers can't replace it
17:04 < neeky> yeah, i ranted on that several times recently
17:04 < sekyms> i just get a bunch of warnings
17:04 < sekyms> not sure if i can still use it
17:04 < neeky> sekyms, uninstall it and install the one I linked
17:04 < sekyms> not using npm?
17:04 < neeky> npm install https://github.com/strongloop/node-inspector
17:05 < neeky> you can install via npm
17:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:05 < neeky> install globally npm -g install ...
17:05 < jameshowe> nudge nudge isaacs
17:05 < mikolalysenko> I got a question about npm scripts
17:06 < mikolalysenko> do they look in node_modules/ to find path values?
17:06 < mikolalysenko> this would make a lot of sense, and also simplify distribution
17:06 < sekyms> is it just npm remove?
17:06 < neeky> sekyms, yes
17:06 < mikolalysenko> like if I add browserify as a devdependency, and put in a call to browserify in npm build will it work?
17:06 < nathan7> mikolalysenko: hm?
17:07 < nathan7> YES
17:07 < mikolalysenko> GREAT
17:07 < nathan7> It traverses the node_modules chain and adds the .bin dirs to the PATH
17:07 < mikolalysenko> fantastic.  that is obviously how it should work
17:07 < statu> hi all!
17:07 < nathan7> Yep [=
17:08 < statu> I'm trying to connect to a MongoDB but I'm a little bit confused
17:08 < statu> I see in all the documentation that the method to connect (using mongoose) is mongoose.connect(options)
17:08 < statu> but it doesn't have callback!!
17:09 < nathan7> ..it'll queue DB transactions until you have a connection
17:10 < nathan7> You can probably pass it a callback if you want too
17:10 < statu> nathan7, thanks! But in the doc doesn't say anything:(
17:11 < statu> http://mongoosejs.com/docs/api.html#index_Mongoose-connect
17:11 < Segrel> it seems it has a callback: http://stackoverflow.com/questions/6676499/is-there-a-mongoose-connect-error-callback
17:11 < nathan7> It'll emit an error event if it fails prolly
17:14 < Ehow> hello
17:14 < sekyms> neeky: Failed to open socket on port 5858, waiting 1000 ms before retrying
17:15 < nathan7> Ehow needs some help with installing native modules on Windows
17:15 < nathan7> Anyone care to assist?
17:15 < Ehow> thanks nathan :)
17:16 < statu> nathan7, thanks !! :D
17:52 < evil_andy> I am trying to serve a node application via a reverse proxy, the app is located at http://server/app and it redirects to http://someotherserver:9999/  This works fine using reverseproxypass and whatnot, until the angular bits start doing their own redirects (and they don't include the /app in front of the path)
17:53 < evil_andy> how can I make node (with express on the back-end) prepend all links with a sub-path when it's running in a certain environment?
17:54 < nathan7> evil_andy: that'd involve parsing all the HTML and stuff
17:55 < nathan7> evil_andy: and hoping the clientside JS does nothing with URLs
17:55 < spasquali> does fs.write call back before system buffers are flushed to disk, or after?
17:57 < serapath> hi neeky , if u refuse to allow callback depth > 2, how do u do it if it seems to be needed?
18:00 < gagle> hello
18:01 < apipkin> Is it possible to get the current branch you are in with node.js? i was thinking something along the lines of a exec command to run, but i wasn't sure if there was a better way
18:03 <@nexxy> apipkin, git branch?
18:03 < evil_andy> nathan7, sorry, was afk. Hmmm... any suggestions for this specific issue?
18:04 < serapath> is there a best practice pattern to 'wait' for several async calls to return before i continue with something?
18:04 <@nexxy> serapath, callbacks
18:04 < serapath> i have two functions which use callbacks and a third which should execute after both of those callbacks have returned
18:04 < serapath> i could nest them
18:04 <@nexxy> you could name them 
18:04 < serapath> but that would start the second call after the first has returned
18:05 < jmar777> serapath: check out https://github.com/caolan/async
18:05 < serapath> but i want to execute them in paralel
18:05 < awaterma> searpath, the Q promises framework might help you.
18:05 < beardtree> serapath: see _.after.
18:05 < serapath> oh, ok :-) i'll take a look
18:05 < serapath> thx
18:05 < jmar777> serapath: specifically, https://github.com/caolan/async#paralleltasks-callback
18:05 <@nexxy> serapath, async is probably the easiest and most standard way
18:05 <@nexxy> serapath, (other than doing it w/o a library)
18:06 <@nexxy> promises considered harmful
18:06 < awaterma> Serapath, this is nice too: https://github.com/kriskowal/q#sequences
18:06 < serapath> i havent used async module yet, but i heard lot of people talk about it, so this immediately makes me wonder if "promises" would be an alternative
18:06  * beardtree reiterates _.after
18:06 < serapath> is there a good comparison of how best practices or code with promises looks like and how async code looks like?
18:07 <@mbalho> node core is best practices for callback code, look at any of the examples in the readme
18:07 <@mbalho> err docs
18:07 <@nexxy> MBALHO IS RIGHT
18:07 <@nexxy> READ THE DOCS
18:07 < jmar777> serapath: here's a good rundown: http://tech.pro/blog/1402/five-patterns-to-help-you-tame-asynchronous-javascript
18:07 < serapath> mbalho: yes i know, callback style is node and async is wide spread, but afaik promises seems to be an alternative, although i never used any of them
18:08 <@mbalho> there are like 800 ways to write async js, node uses callbacks cause its the least abstract
18:08 < awaterma> Nexxy, any links on bad practices with promises? Like why you consider them harmful? I'm currently playing with both modes in my little projects (straight callbacks and promises)
18:08 < serapath> have no opinion on this issue yet, because everything i read about both approaches seemed pretty convincing
18:08 <@mbalho> but you can spend months looking at async helpers on npm
18:08 <@nexxy> awaterma, I consider them harmful cuz I get to watch all the confusion and bugs and problems they cause for people all day :)
18:09 < nathan7> nexxy: what kind of bugs?
18:09 < beardtree> serapath: yes, see https://github.com/kriskowal/q#readme
18:09 <@nexxy> I don't get involved enough to know
18:09 < beardtree> Callbacks are great but can get ugly.
18:09 < serapath> what about performance?
18:09 < nathan7> callbacks shine in implementation simplicity
18:09 < awaterma> I read that promises were from the 70s. I'll have to do an ACM search at some point for the paper, it would be cool to see where they come from.
18:10 < nathan7> thus speed and minimal abstraction
18:10 < serapath> is there a difference performancewise? do promises have a lot of overhead?
18:10 < nathan7> serapath: a bunch, yeah, but not a shitton
18:10 < jmar777> but we all know the future of async is generators, right? :)
18:10 <@nexxy> yes
18:10 <@nexxy> of course
18:10 < serapath> what is generators?
18:10 < awaterma> Yes, generators are super cool!
18:10 <@nexxy> amazingsauce
18:10 < jmar777> serapath: http://devsmash.com/blog/whats-the-big-deal-with-generators
18:10 < nathan7> generators work with either callbacks or promises
18:10 < jmar777> also https://github.com/jmar777/suspend
18:11 < nathan7> well, with callbacks and some hackery or curried callback functions (continuables)
18:11 <@nexxy> actual promises + generators would be nice
18:11 <@nexxy> will*
18:11 < jmar777> nexxy: check https://github.com/jmar777/suspend#promises out :)
18:11 < jmar777> `var user = yield UserModel.find({ username: 'jmar777' }).exec();`
18:11 <@nexxy> this looks familiar
18:11 <@nexxy> I think someone showed this to me once
18:12 < nathan7> Yeah, a promises generator thing is crazy simple
18:12 < nathan7> promises shine in conceptual simplicity
18:12 < serapath> does expressjs use it for middleware?
18:12 <@nexxy> why oh why do generators have to be *
18:12 <@nexxy> that has to be the worst choice ever
18:12 < nathan7> what would you pick?
18:12 <@nexxy> something a little more obvious
18:12 < nathan7> dunno
18:13 < nathan7> I think 'sprinkled with yields' is pretty obvious
18:13 < distilledchaos> i wrote a little stream wrapper around dgram, but i feel like i did it wrong: https://gist.github.com/skeggse/5977764
18:13 < jmar777> promises strike me as having the academic elagance of monads, but are still at the mercy of needing to use a (rebranded) callback somewhere in the mix
18:13 < awaterma> FYI, here's the earliest cite I can find for promises, 1989 is not the 70s. :) http://dl.acm.org/citation.cfm?id=76326
18:13 < distilledchaos> thumbs.twiddle()?
18:13 < jmar777> generators are the *only* language construct in JavaScript that enable async to be accomplished w/out using a callback (if you don't count the generator itself as one)
18:13 <@konobi> promises tend to fall down when you have to handle failure scenarios, iirc
18:14 < jmar777> konobi: I think they can be handled correctly (e.g., Q does a good job). we used a different promises library awhile back that silently swallowed errors if you didn't explicitly handle them.
18:14 < nathan7> jmar777: of course, callbacks are an implementation mechanism
18:14 < jmar777> konobi: there may not be a "right" way to do that, but that's definitely the "wrong" way
18:14 < awaterma> Anyone tried promises with domains?
18:15 < nathan7> You pretty much don't need domains except for the node eventemitter case with promises
18:15 < distilledchaos> how should i implement the _read method of the Readable stream class if the underlying resource can't pause or resume?
18:15 < jmar777> nathan7: which was necessitated by JavaScript (prior to generators). not the fault of promises, but IMO it somewhat tarnished their conceptual beauty when it came to actual application
18:15 < serapath> do all yield statements execute in parallel?
18:15 < nathan7> no
18:15 < nathan7> sequential
18:15 < nathan7> serapath: 12µs to create a promise
18:16 < serapath> how many to create a callback?
18:16 < nathan7> serapath: (you can make 85149 of them a second)
18:16 < jmar777> serapath: nathan7 is correct. right now (with suspend, anyway) the recommended approach is to actually combine it with a library like async
18:16 < nathan7> serapath: practically none
18:16 < jmar777> serapath: see https://github.com/jmar777/suspend#what-about-parallel-execution-mapping-etc
18:16 < beardtree> jmar777: well duh. :P
18:16 < beardtree> konobi: no, that's what promises were made for.
18:16 < nathan7> I mean, creating a promise already involves having a callback
18:16 < Domenic_> plugging the #promises channel for promises discussions
18:16  * Domenic_ scrolls up to read what i missed
18:16 <@konobi> beardtree: loss of context
18:16 < serapath> i dont get what i would use generators for
18:16 <@nexxy> lol
18:16 < beardtree> Talking about performance is so stupid.
18:16 < beardtree> When your application is slow, then you talk about performance.
18:16 < beardtree> And you definitely don't listen to some guy say "12us".
18:17 < nathan7> ^
18:17 < nathan7> beardtree: Absolutely
18:17 < serapath> looks interesting, but which kind of situation does it simplify?
18:17 < beardtree> You freaking profile.
18:17 < nathan7> beardtree: But the overhead to creating a promise is fairly constant
18:17 < nathan7> beardtree: And people claim it's humongous
18:17 < jmar777> serapath: heard of the "pyramid of doom"?
18:17 < serapath> yes
18:17 < nathan7> beardtree: My point is, whatever you do with the promise is gonna take all your time
18:18 <@nexxy> everybody get serious
18:18 < jmar777> serapath: basically, it avoids that.
18:18 < distilledchaos> :/
18:18 < beardtree> Don't talk about speed.
18:18 < serapath> but async does it too and if i name my functions, i could already avoid it
18:18 < serapath> so whats special?
18:18 < jmar777> serapath: e.g., suspend(function*() {yield foo(); yield bar(); yield baz(); })();
18:18 < nathan7> It's about much more than that, damnit
18:18 <@nexxy> beardtree, there's no need to go and use punctuation on us
18:18 < jmar777> serapath: those can all be async operations, but you only need one level of nesting (from the generator itself), rather than a level of nesting for each and every async operation
18:18 < nathan7> It's about having a handle on async results
18:19 < jmar777> serapath: promises also avoid that nesting (as do libraries like async), but generators provide (IMO) a cleaner syntax
18:19 < beardtree> nathan7: yep. Talking about speed without even knowing your application isn't fast enough is absolutely inane.
18:19 < serapath> but promises have it, right?
18:19 < nathan7> a handle that is just as reusable as a synchronous result
18:19 < topherbullock> is it caremad about promises time?
18:19 < nathan7> beardtree: [=
18:19 < serapath> nathan7: i thought thats what promises already have, havent they?
18:19 < nathan7> serapath: that's what a promise is
18:19 < nathan7> a handle on an async result that you can reuse as much as you want
18:20 < serapath> so generators are promises?
18:20 < nathan7> no
18:20 < iksik> any nvm and csh users around? :)
18:20 < jmar777> promises are awesome - they encapsulate a (potentially) future result, whether there is an error or not. i just don't use that because in practice i like code implemented with async (and more recently, suspend) better
18:20 < iksik> i'm wondering how can i make it works with csh ;-/
18:20 < nathan7> function* range(start, end) { var i = start; while (i < end) yield i++ }
18:20 < serapath> is suspend another async library?
18:20 < jmar777> serapath: no. and apologies for repeatedly tooting my own horn, but i would definitely recommend reading http://devsmash.com/blog/whats-the-big-deal-with-generators if you aren't familiar with them
18:21 < jmar777> serapath: yes, suspend is an async library based on generators
18:21 <@nexxy> E_TOO_MANY_TOOTS
18:21 < jmar777> serapath: there are some others as well, such as co / genny / gen-run
18:21 < beardtree> Also, you can perform an action on an already-resolved promise.
18:21 < nathan7> In future JS: for (let i of range(1, 10)) console.log(i) // prints 1 to 10
18:21 < nathan7> Yeah
18:21 <@mbalho> nexxy: ETOOTBUFFEROVERFLOW
18:21 < nathan7> Being able to not care if someone already happened or not ftw
18:21 <@nexxy> hahaha
18:21 < jmar777> nexxy++
18:21 < serapath> jmar777: i have read it, and seen the code example with yield and next() and done() which reminded me of passportjs and expressjs
18:21 < beardtree> Which is more difficult using callbacks.
18:21 < beardtree> That's why promises are awesome. Resolved? No problem, just execute synchronously.
18:21 < serapath> but i dont really get it
18:21 <@konobi> nexxy: EIVEGOTTOOTSCOMINGOUTMYASS
18:21 < topherbullock> Promises let you treat async like sync
18:22 <@mbalho> ETOOMUCHINFORMATION
18:22 < serapath> it looks like syntactic sugar for what u could already do with promises, but probably i'm wrong.
18:22 <@konobi> mbalho: =0P
18:22 < nathan7> generators are sugar, yeah
18:22 < Domenic_> promises presentations etc.: see https://news.ycombinator.com/item?id=6009059
18:22 < nathan7> what a generator gives you is a function that suspends when you yield
18:22 < serapath> nathan7: so generators are sugar for promises?
18:22 < nathan7> and that can be continued
18:22 < nathan7> serapath: they can be used as such
18:23 < topherbullock> generators yield promises...
18:23 < nathan7> not necessarily
18:23 < nathan7> serapath: if you take the range generator I posted up there
18:23 < Domenic_> generator functions are most obviously used for lazy sequences
18:23 < nathan7> serapath: you can call it with var r = range(1, 10)
18:23 < nathan7> serapath: r.next() // 1
18:23 < nathan7> serapath: r.next() // 2
18:23 < topherbullock> well, for coroutines generators yield promises
18:23 < Domenic_> but it turns out that you can kind of twist them to create a really nice async syntax where "yield" is kind of like C#'s "await".
18:23 < nathan7> serapath: the yield statement will return the argument to next
18:24 < nathan7> serapath: https://github.com/nathan7/concur/blob/master/index.js this is a really bare-bones generator+promise thing
18:24 < Domenic_> topherbullock: generators are always (shallow) coroutines. 
18:24 < nathan7> serapath: er
18:24 < jmar777> serapath: sort of like sugar, but language level instead of library level. and library level MUST rely on functions/callbacks, whereas generators don't require that
18:24 < nathan7> serapath: r.next() // { value: 1, done: false }
18:24 < nathan7> serapath: r.next() // { value: 2, done: false }
18:25 < nathan7> serapath: 'yield' gives a result with done=false and returns the value passed to the next .next call
18:25 < topherbullock> Domenic: yeah, and you'd want a promise from a coroutine.
18:25 < nathan7> serapath: return gives a result with done=true
18:25 < jmar777> topherbullock: how does that follow?
18:26 < jmar777> topherbullock: i don't think promises and coroutines should be conflated. they can play nicely together, but are fundamentally different things and neither depends on the other
18:26 < nathan7> jmar777++
18:26 < serapath> i really like it when the core language doesnt have many keywords. javascript has quite a few, but i can ignore most of them. normally i only use 'var' and 'function' an operators
18:26 < nathan7> (are you jmar778 now?)
18:26 < serapath> this is why i'm sceptical to function* and yield
18:26 < nathan7> yield is pretty generic
18:27 < serapath> ok i also use 'return'
18:27 < nathan7> serapath: yield is 'return for now'
18:27 < jmar778> nathan7: :)
18:27 < serapath> but whats possible with generators thats not without?
18:27 < nathan7> serapath: it's very powerful, very general
18:27 < nathan7> serapath: lazy sequences!
18:27 < jmar778> serapath: async w/out callbacks
18:27 < serapath> but promises have lazy sequences
18:27 < NotMyself> lazy sequences are really nice until they are not...
18:27 < serapath> and even with async callback, i could somehow count the returns and get somesthing similar or so
18:27 < Domenic_> serapath: everything is possible with goto but we still use functions and loops
18:28 < nathan7> if and goto is all you need
18:28 < serapath> actually i rarely use loops, i often try to use tail recursion instead
18:28 < nathan7> ..we don't have tail recursion in JS, dear
18:28 < Domenic_> serapath: well JS doesn't have tail recursion so.....
18:28 < nathan7> you'll just smash the stack rather quickly
18:28 < serapath> nathan7: ok, then something that feels like tail recursion
18:29 < nathan7> .map and friends ftw
18:29 < serapath> u mean v8 doesnt optimize tail recursion?
18:29 < nathan7> yep
18:29 < nathan7> no engine does
18:29 < serapath> ah damn
18:29 < serapath> ok
18:29 < serapath> why?
18:29 < jmar778> serapath: lazy sequences as in: `for (var x of generator()) { ... }`, where the iteraterated list is built lazily
18:29 < nathan7> shit you can do with promises: filenames.map(readFile) // you now have an array of promises for file contents
18:29 < nathan7> Promise.all(fileNames.map(readFile)) // you now have a promise for an array of file contents
18:30 < jmar778> serapath, nathan7: es6 specifies tail recursion :)
18:30 < nathan7> you can suddenly apply a lot of map/reduce/filter magic to async shit
18:30 < nathan7> you bring the power of functional programming to async
18:30 < nathan7> jmar778: Sure
18:30 < nathan7> jmar778: the distant future
18:30 < jmar778> serapath, nathan7: http://bbenvie.com/articles/2013-01-06/JavaScript-ES6-Has-Tail-Call-Optimization
18:30 < nathan7> jmar778: (the year two thousand)
18:30 < jmar778> nathan7: not so distant for node.js though
18:31 < nathan7> jmar778: mkay
18:31 < jmar778> browsers, yes
18:31 < nathan7> yes, and that kind amatter
18:31 < nathan7> *kinda matters
18:31 < nathan7> I figure you could do a trampoline in a transpiler
18:31 < serapath> ok, so if es6 will come, and specifies tail recursion (actually doable right now, but as u point out, not optimized so i better not use it), ...and with promises... i still dont get why i would need "generators" on a language level
18:31 < nathan7> but it's ugly
18:31 < nathan7> serapath: scoping
18:31 < serapath> why not just have a library or a short pattern for it?
18:31 < nathan7> serapath: instead of creating a zillion callbacks
18:31 < nathan7> serapath: and juggling scope
18:31 < nathan7> serapath: just have one continuous function
18:32 < serapath> whats with the scope thing? dont understand
18:32 < nathan7> Otherwise, you either need to endlessly nest functions to retain access to your variables
18:32 < serapath> i pass a config object or something
18:32 < nathan7> or you need to do a bunch of magic for more global vars
18:32 < jmar778> serapath: `var x = yield foo();` vs. `foo(function(err, res) { if (err) throw err; var x = res; }`
18:32 < nathan7> we have goddamn variable scoping
18:32 < nathan7> also, try/catch work for async shit with generators
18:33 < serapath> instead of try-catch, i like the promise approach, doesnt it do something like try-catch?
18:33 < jmar778> serapath: or... `foo().then(function(data) { var x = data; }, function(err) { throw err; })`
18:33 < nathan7> serapath: Yeah, you have that
18:33 < nathan7> jmar778: that does nothing new in the error case
18:34 < nathan7> jmar778: that's equivalent to passing no error function
18:34 < jmar778> nathan7: true, but you wouldn't really throw an error asynchronously like that anyway
18:34 < nathan7> jmar778: the error is caught and passes onto the next promise
18:34 < nathan7> throw works normally in .then
18:34 < nathan7> .then(success, failure)
18:35 < nathan7> serapath: but with generators you can throw those errors into the generator
18:35 < jmar778> nathan7: so even if you reduce it to `foo().then(function(data) { var x = data; });`, that's still uglier than `var x = yield foo();`
18:35 < serapath> ok, maybe i just sit and wait and hope that generators are widely usable and not just special syntax for use cases that occur once in a while
18:35 < nathan7> jmar778: yep
18:35 < nathan7> serapath: https://github.com/nathan7/concur/blob/master/index.js seriously, read that shit
18:35 < serapath> ok i'll do
18:35 < serapath> thx
18:35 < serapath> :-)
18:35 < nathan7> it's the most minimal implementation of the promise+generator bridge I could think of
18:36 < nathan7> I should probably comment it a bunch, I intended it mainly as a demonstration of how simple it is
18:37 < jmar778> nathan7: nice, hadn't seen concur yet
18:38 < nathan7> jmar777: I wrote it a few days back, intending to figure out how simple I could make it
18:38 < nathan7> jmar777: the other equivalent things I've seen so far try to handle callbacks too
18:38 < nathan7> jmar777: and I wanted to demonstrate how simple it is in a promise world
18:39 < jmar777> nathan7: ya - it's definitely a lot easier to work with just promises and generators... the main issue is that all the core (and most userland) modules use the error-first callbacks
18:40 < nathan7> jmar777: Promise.denodeify(fn)
18:40 < jmar777> nathan7: on everything... :\
18:41 < nathan7> jmar777: var blah = objmap(require('blah'), Promise.denodify)
18:41 < nathan7> jmar777: but yes, certainly a pain
18:41 < jmar777> nathan7: var data = yield fs.readFile(__filename, resume);
18:42 < jmar777> nathan7: denodify works, but I really wanted to avoid wrapping if at all possible
18:42 < nathan7> jmar777: mhm
18:42 < nathan7> jmar777: you don't handle double-cb there though
18:42 < nathan7> jmar777: creationix's thing handle that
18:42 < jmar777> nathan7: ya... i can handle that if i just change the signature to `resume()`, but i think that' inconsequential
18:43 < nathan7> jmar777: mhm
18:43 < jmar777> nathan7: it's not a feature to stop double callbacks... it's a bug and should raise a loud exception
18:43 < nathan7> jmar777: that's what creationix's thing does afaik
18:43 < jmar777> nathan7: suspend will detect too many calls to `resume` and tell you to check for double callbacks
18:43 < jmar777> nathan7: it just can't tell you which callbacks it was :p lol
18:43 < serapath> sometimes i have nesting of functions in the browser too. is there a library that works both, in node and browsers?
18:44 < nathan7> Promise libs work in the browser
18:44 < nathan7> generators aren't there yet in browserland though
18:44 < serapath> and async lib?
18:44 < nathan7> same thing
18:45 < nathan7> Browserland will soon become promiseland
18:45 < jmar777> nathan7: and gen-run doesn't throw an error, it ignores it.
18:45 < serapath> ok so i could use async in browser and promises. which promise library should i use. guess there is many
18:45 < nathan7> jmar777: mhm
18:45 < nathan7> serapath: I'm a fan of then/promise
18:45 < nathan7> serapath: https://github.com/then/promise
18:45 < niggler> hey euphrate 
18:45 < nathan7> serapath: but hey, I mostly wrote the code of that
18:46 < nathan7> (the core shit, that is)
18:46 < serapath> is it possible to use it in node and browsers?
18:46 < niggler> is free node on the fritz?
18:46 < jmar777> serapath: if you're already using jquery, you can use the built-in deffereds
18:46 < serapath> i dont
18:46 < nathan7> NOOO
18:46 < serapath> and i dont want to
18:46 < nathan7> or are jQuery deferreds fixed now
18:46 < niggler> deferreds jmar777 
18:46 < nathan7> they used to broken-as-fuck promises
18:46 < jmar777> niggler: heh, thx
18:46 < serapath> is there a library that doesnt come with all the bells and whistles of jquery but allows access to the DOM in the same way?
18:46 < jmar777> nathan7: haven't used them for anything robust, so can't comment
18:46 < nathan7> but Domenic_ knows more about that
18:46 < beardtree> niggler: not currently, but it has been. DoS.
18:47 < nathan7> jmar777: basically they didn't hold the immutability
18:47 < nathan7> jmar777: chaining them wouldn't return a new promise
18:47 < niggler> beardtree sounds like an excuse
18:48 < jschall> npm is giving me "Error: name field must be a string." every time i try to install anything
18:48 < nathan7> node -v, npm -v
18:49 < jschall> npm -v: 1.3.2
18:49 < jschall> node -v: v0.10.13
18:49 < beardtree> niggler: it most definitely is. Freenode is not doing what it should be doing.
18:49 < nathan7> what module are you trying to install?
18:49 < jschall> any module. testing with mysql
18:50 < jschall> same with async
18:50 < nathan7> ..hmm, odd
18:50 < jschall> same with underscore
18:50 < jmar777> jschall: what does your package.json look like?
18:50 < nathan7> Can you post full logs?
18:50 < topherbullock> check your package.json
18:50 < topherbullock> ^^^
18:50 < jschall> https://gist.github.com/jschall/73c8375f219f33072c0b
18:51 < nathan7> jmar777: can you do npm cache clear?
18:51 < nathan7> er
18:51 < nathan7> npm cache clean
18:51 < topherbullock> https://npmjs.org/package/normalize-package-data
18:51 < nathan7> or... actually
18:51 < nathan7> it could be reading your local package.json
18:51 < jschall> cache clean didn't work
18:51 < jschall> where would it be looking for this local package.json?
18:51 < nathan7> Is there a package.json in /home/jschall or /home/dusttest?
18:52 < jschall> yes
18:52 < jschall> fixed
18:52 < jschall> thanks
18:52 < nathan7> [=
18:53 < jschall> anyone know a lot about dust.js?
18:53 < nathan7> besides that the original author abandoned it, no
18:53 < nathan7> LinkedIn picked it up and.. dusted it off q=
18:54 < serapath> do promises offer a solution for parallel execution? or is the core concept, that everything happens in a serial way, and the execution catches up later on and until then, stuff exists as a promise?
18:54 < nathan7> serapath: nono
18:54 < nathan7> serapath: Promise.all()
18:54 < nathan7> serapath: and various other things
18:54 < nathan7> serapath: parallelisation is way easy with promises
18:55 < jschall> parallelisation is such a pita...
18:55 < nathan7> serapath: I generally do all the things at once and then have a when-everything-is-done
18:55 < nathan7> serapath: https://npmjs.org/package/when-every-key
18:55 < blueskies7> does anybody know how to make an event emitter instance available across files? when I use module.exports and require it in file B, calling emit gives TypeError: Object #<Object> has no method 'emit'
18:55 < nathan7> serapath: that lets you do whenEveryKey({ a: promiseForA, b: promiseForB }) and get a promise for {a, b}
18:56 < nathan7> blueskies7: that should just work
18:56 < nathan7> blueskies7: you're probably exporting the wrong thing
18:56 < blueskies7> nathan7: let me show you what ive got, one sec
18:56 < nathan7> serapath: you can do Promise.all(a, b, c) or Promise.all(array)
18:56 < nathan7> serapath: Promise.all(fileNames.map(readFile))
18:56 < jschall> i don't like async's parallel() function because it calls back early if one of the functions has an error. is there something better?
18:57 < nathan7> everything does that
18:57 < serapath> nathan7: ok, i just read the readme of Q, and it sounds nice, but i dislike the syntax
18:57 < nathan7> it's the most sensible approach
18:57 < jschall> it's not always the desired behavior
18:57 < serapath> so many special words for stuff
18:57 < nathan7> serapath: Q has a lot of special syntax
18:57 < nathan7> serapath: .then() and .done() is what then/promise provides on the promise
18:58 < blueskies7> nathan7: http://pastie.org/8132272
18:58 < nathan7> serapath: .done is like .then but it doesn't return a new promise and it'll throw an error (crashing your app) if there's still an erroor
18:58 < nathan7> *error
18:58 < serapath> btw, i also read ur generator thing, but its too mindbending to grasp quickly and understand implications, i would have to think about that code snippet for hours
18:58 < nathan7> blueskies7: Look again.
18:58 < blueskies7> nathan7: sorry, line 18 is Hub.emit("hello");
18:58 < nathan7> blueskies7: You're not putting it in module.exports
18:58 < jschall> nathan7: i have found calling back immediately on error to be desirable a minority of the time.
18:58 < nathan7> blueskies7: require('./hub') is { hub: eventEmitter }
18:58 < nathan7> blueskies7: require('./hub').hub is the eventEmitter
18:59 < nathan7> blueskies7: put it in module.exports and all will be fine
18:59 < nathan7> jschall: mkay
18:59 < serapath> i just started to completely get rid of ajax in favour of sockeIO, which uses events. what do u think of that?
18:59 < nathan7> serapath: with generators you can just use normal syntax
18:59 < serapath> is that ok, or dumb?
18:59 < nathan7> whatever works for you
19:00 < nathan7> I'm toying with a DB-centric app
19:00 < serapath> ok, so its a matter of taste, but not obvious downside u could think of, right?
19:00 < nathan7> it's purely data-driven (it's an IRC client) - there's no real communication client-server besides database access
19:00 < nathan7> server writes to the DB, clients follow the DB changes
19:01 < blueskies7> nathan7: bingo, thanks a lot
19:01 < nathan7> it's a way cool approach but it only works for a limited set of use cases
19:01 < nathan7> when it works it's pure bliss
19:02 < beardtree> serapath: not a good idea.
19:02 < beardtree> There's a reason HTTP exists.
19:02 < beardtree> When you want to CRUD, use HTTP.
19:02 < beardtree> serapath: you can cache HTTP GET.
19:02 < beardtree> Many other HTTP features.
19:02 < beardtree> Websockets are great but not for everything.
19:03 < nathan7> yeah
19:03 < serapath> but to replace ajax?
19:03 < nathan7> I see people doing CRUD-over-websockets
19:03 < serapath> why not?
19:03 < nathan7> It saves you the overhead of building up and tearing down a TCP connection
19:03 < ningu> if websockets are using socket.io's fallback to long polling xhr they are very similar to ajax
19:03 < nathan7> but hm
19:03 < ningu> s/websockets are/serapath is/
19:03 < serapath> sure, socketIO uses ajax as fallback, but i dont care. if it does, then so be it
19:04 < ningu> serapath: right, the programming interface is the same for you
19:04 < serapath> lol @ ningu 
19:05 < piklu> People looking for work can msg me
19:05 < serapath> beardtree: using websockets to replace ajax is fine or not? havent really understood ur point
19:05 < beardtree> Modern HTTP does not require creating new TCP connections.
19:05 < beardtree> Everyone uses keep-alive.
19:05 < beardtree> AJAX is just HTTP.
19:07 < beardtree> Use tools for what they were designed.
19:07 < beardtree> That is my point.
19:07 < beardtree> Websockets can do what HTTP can do, but HTTP can't do what websockets can do, so in that way, websockets are more flexible.
19:07 < b3tamax> Headers are awsum.
19:07 < beardtree> But flexibility means less predictability.
19:07 < beardtree> Web servers are damn good at handling HTTP.
19:08 < brainproxy> beardtree: the other issue is that websockets are inherently stateful
19:08 < nathan7> brainproxy: so is a TCP connection
19:08 < brainproxy> nathan7: yes, but not at the application layer
19:08 < nathan7> brainproxy: sure
19:08 < nathan7> brainproxy: but if you're doing CRUD-over-websockets that should be far from your app logic anyway
19:09 < ningu> sometimes stateful is what you want
19:09 < brainproxy> nathan7: okay, i guess I jumped in late
19:09 < _6a68> running into path.join errors when using __dirname with express 2 on node 0.10. can this be solved without upgrading to express 3?
19:09 < nathan7> brainproxy: serapath is moving some form of AJAX stuff into socket.io
19:09 < beardtree> brainproxy: that's true.
19:09 < beardtree> serapath: HTTP is stateless, which is amazing.
19:10 < serapath> nathan7: actually i wonder if there is examples where websockets wouldnt be a good idea to replace ajax
19:10 < ningu> it can also be annoying
19:10 < serapath> cant think of one, but then, i lack experience
19:10 < nathan7> serapath: well, browser gives you all the HTTP caching magic for free
19:10 < _6a68> ah, answered my own question, SO workaround: http://stackoverflow.com/questions/15557480/node-js-typeerror-with-path-join-when-serving-webpage-with-express
19:18 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
19:25 < indstry> is there a way to package a node webservice as a single windows EXE?
19:25 < b3tamax> indstry: http://stackoverflow.com/questions/8173232/make-exe-from-node-js-app
19:31 < iksik_> https://gist.github.com/anonymous/cf77f4469f610574129d - any way to get more detailed stack trace? since i have more than one 'spawn' this one does not helps at all
19:31 < alexcb> hello, please I need to know how to send several variables by url to a service rest
19:31 < alexcb> I have this
19:31 < iksik_> these are not even from my file ;/
19:31 < alexcb> app.get('/announcement/:search', announce.findAllBysearch);
19:32 < alexcb> hello
19:32 < merpnderp> Is there something a little better than this for learning how to minimize memory usage in JS? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management
19:33 -!- mode/#Node.js [+o konobi] by ChanServ
19:35 <@trevnorris> merpnderp: sure, there's a lot. here are a couple: http://floitsch.blogspot.com/2012/03/optimizing-for-v8-introduction.html
19:35 < nathan7> merpnderp: what exactly is your reason for worrying about this?
19:35 <@trevnorris> merpnderp: https://mkw.st/p/gdd11-berlin-v8-performance-tuning-tricks/#1
19:36 <@trevnorris> merpnderp: and here's an in depth one http://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html
19:37 < ningu> also, the nodeup on performance
19:38 < merpnderp> trevnorris: woah, thanks :)
19:38 < merpnderp> nathan7: all the fud about js mobile. Just wanted to make sure I was following best practices. 
19:39 <@trevnorris> oh, for that. that's a completely different beast, since they don't use v8. sorry
19:39 < merpnderp> trevnorris: But don't all the modern GC's work basically the same?
19:40 <@konobi> nope
19:40 <@trevnorris> eh. sort of. when you're stressing it out it depends.
19:40 < RLa> so npmjs displays user emails?
19:40 < RLa> and i wonder why i have started to get so much spam lately :/
19:43 <@isaacbw> the only spam I get is chinese manufacturers trying to sell me LEDs
19:43 <@isaacbw> and sinks
19:43 <@isaacbw> dammit alibaba
19:44 < RLa> i get same
19:44 < RLa> some send me to get quotes of my own products
19:44 < RLa> not getting that scheme
19:45 < RLa> getting offered weight lose products too
19:46 <@isaacbw> are you calling me fat
19:47 < RLa> changed email but oh crap now it displays wrong gravatar
19:48 <@konobi> email aliases ftw
19:51 -!- mode/#Node.js [+o xyxne] by ChanServ
19:52 < RLa> wtf, since when gravatar requires wordpress.com account
19:53 < dimadima> anyone ever tried using swig w/ browserify
19:54 < Gabriel403> "oops"
19:54 < neeky> freenode must be getting ddosd again
19:56 < serapath> short question about node 'domains' :-) i just read about promises, where i could chain a final .then(undefined, handleError) and as far as i understand, domains instead create a 'domain'
19:56 < serapath> that feels very similar to me
19:56 < RLa> damn, why say "mail sent" when it's not
19:56 < RLa> it's still in internal queues somewhere
19:57 < serapath> with promises i put my "domain" to the end of the .then-chain, while i dont know yet where i would declare my domain
19:58 < RLa> i though domains are only useful when you throw
19:58 < serapath> yes, and as far as i understand, the .then(undefined, handleError) with promises at the end of the chain is useful for the same thing
19:59 < serapath> with promises its always handled directly by the .then() method and it passes it down the chain until a handleError method is defined. if u chain one to the end of your .then-chain, then its effectively like a domain
19:59 < serapath> for the .then-chain
19:59 < serapath> i guess
20:00 <@konobi> RLa: any eventemitter that emits error
20:00 < serapath> ok, but maybe with promises you could define other error handlers along the way, but on the other hand, maybe its possible to use errorhandlers along the chain before u reach the end
20:00 < serapath> maybe thats not possible with domains, but havent read about domains yet
20:09 < RLa> github shows c++ as red, is that some kind of a warning or so?
20:10 < ningu> RLa: irssi shows your nick as red
20:12 < s5fs> ningu: same here, irssi and nickcolor
20:12 < RLa> uh
20:14 < tuhoojabotti> For me, green.
20:15 < gilaniali> Hi, i am trying to read data from an html file and print to console. However I am getting the error unknown encoding. Isnt utf8 the default when nothing is specified? http://pastebin.com/RGFGXiDp
20:22 < Ry0_> does anyone know why http://pastebin.com/WJJ3SLVU throws me an error?
20:24 < werle1> trevnorris: do you know the alternative to `v8::FunctionTemplate::New()` ? I get deprecation errors when I build v8 3.20.5
20:40 < neeky> Ry0_, take the \n off at line 18
20:40 < piklu> i am bored
20:41 < Ry0_> neeky: do you mean line 14?
20:41 < neeky> yeah 14
20:41 < Ry0_> neeky: yea that probably the error. forgot it. thank you.
20:41 < neeky> np
20:45 < neeky> Ry0_, also, this site is pretty cool for testing code: http://www.node-console.com/script/foo-1373575413482
20:46 <@trevnorris> werle1: you're probably using the old FunctionTemplate::New(InvocationCallback,... instead of FunctionTemplate::New(FunctionCallback,...
20:46 < Ry0_> neeky: cool, thx. i've never seen that before.
20:46 < werle1> trevnorris: you're absolutely right
20:46 < werle1> trevnorris: thanks
20:46 <@trevnorris> np :)
20:48 < neeky> I saw it a while back. the only downside is it requires too much info to save code
20:53 < durango> Any reason why domains wont work / catch an exception?
20:55 < werle1> trevnorris: how do I go about making a `FunctionCallback` ?
20:56 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
20:57 < jasonkuhrt> what is a mqtt broker?
21:03 < werle1> `v8::FunctionTemplate::New((v8::FunctionCallback) cb);` works
21:08 <@trevnorris> werle1: it's all in the declaration of the function. from include/v8.h:
21:08 < jareddlc> hello
21:08 <@trevnorris> typedef Handle<Value> (*InvocationCallback)(const Arguments& args);
21:08 <@trevnorris> typedef void (*FunctionCallback)(const FunctionCallbackInfo<Value>& info);
21:09 < werle1> trevnorris: sweet thanks 
21:09 <@trevnorris> np
21:09 < durango> Any reason why domains.on('error') is being executed, and catching the error but is not preventing the app from crashing? :/
21:12 < serapath> could someone help me on how to improve this module stylewise? http://pastebin.com/1e3yNgE9
21:12 < serapath> before initialization finishes, there is 2 to 3 async function calls which should return before initialization finishes
21:13 < serapath> whether its 2 or 3 depends on whether the redisDB needs a password or not
21:13 < serapath> currently it works, but i think with promises or async it could be improved, but eventually without using additional libraries, too
21:13 < serapath> its my first "real world use case"
21:14 < nathan7> serapath: ..lol, why the giant closure
21:14 < nathan7> serapath: you realise a module already *is* wrapped in a closure?
21:15 < topherbullock> CLOSURE ALL THE THINGS
21:16 < jalcine_> lol
21:16 < topherbullock> also, why bother with the __init var
21:16 < topherbullock> when you just assign it to api.init
21:19 < topherbullock> why _* in general ... everything except your module.exports is local in the scope of the module def.
21:19 < serapath> nathan7: i wanted to initialize my module
21:19 < nathan7> serapath: so..?
21:19 < serapath> nathan7: so require only caches the return object with its properties
21:19 < nathan7> serapath: ..
21:19 < serapath> mh.. maybe i dont know what u mean
21:19 < nathan7> serapath: the module code is run only once
21:21 < serapath> nathan7: i just did what came to my mind, i dont know how i else would do it, so thats why i was asking if i did a horrible thing or at least how to improve it
21:21 < russfrank> serapath: relink plox
21:22 < topherbullock> http://pastebin.com/1e3yNgE9
21:22 < topherbullock> * serapath's module ^^
21:22 < russfrank> im not a big comma first guy personally 
21:23 < russfrank> i gots my jshint vim integration, finds all comma mistakes
21:23 < russfrank> also lots of other mistakes 
21:23 < topherbullock> in b4 comma bikeshed
21:24 < russfrank> lot of underscores on variable names
21:25 < topherbullock> yeah.. I get what @serapath is trying to do with that, but modules don't need patterns like that
21:26 < alexstrat> Hi someone, I would like help on writable stream: I got an underlying socket (in a C++ addon) that has a method ".write" which returns false if it can't handle more data. How do I wrap this in a writable stram ? How to implement "Stream#_write" method given the returned value by "write" ?
21:26 < serapath> i first startet with module.exports = function(..)
21:26 < serapath> then i tried different approaches, but the current one is the only that came to my mind, when i wanted to pass initialization parameters but only want the stuff to evaluate once
21:27 < topherbullock> I don't get what you mean by evaluate once.. if you require it again it runs again...
21:27 < serapath> no, it just will give me the return object: api
21:27 < serapath> with its properties
21:27 < serapath> its the only thing cached
21:28 < ningu> topherbullock: no, require is cached
21:28 < topherbullock> ah, I misread that.
21:28 < ningu> require returns a function it will be the same function but when you run it it will, of course, run again
21:28 < serapath> but with module.export = function(...) it will run the function again
21:28 < russfrank> serapath: you'd have to run the function again to reinitialize
21:28 < serapath> and without an __init property (a method), i dont know how else to initialize the module
21:29 < serapath> i dont want to re-initialize it
21:29 < russfrank> just have a var instance; 
21:29 < serapath> it should only be initialized once, at startup time
21:29 < russfrank> then you call the function and in the future when it's required and called again it just returns instance 
21:29 < serapath> russfrank: not sure what u mean
21:29 < russfrank> ie, the same way youo'd do a singleton anywhere else
21:30 < russfrank> var instance; module.exports = function (params) { if (instance) return instance; var thing = {}; thing.param = params.foo; instance = thing; return thing; } 
21:30 < topherbullock> russfrank: nailed it ... "the same way youo'd do a singleton anywhere else"
21:30 < serapath> i dont know how to normaly do it
21:31 < serapath> ah ok
21:31 < topherbullock> http://addyosmani.com/resources/essentialjsdesignpatterns/book/#singletonpatternjavascript
21:31 < serapath> how much stuff would be cached with the version u proposed?
21:32 < serapath> because the majority of stuff happens in my __init method, to which no reference will exist after initialization finished
21:32 < russfrank> you could even go full java retard mode serapath  https://gist.github.com/russfrank/a4df8debc65ef0640f59 
21:32 < serapath> so i guess its garbagecollected
21:32 < russfrank> well not if its closed over by some function, of course
21:33 < serapath> like which?
21:34 < serapath> the IIFE only contains little stuff, the stuff in the __init function will be gone after it finished
21:34 < russfrank> yeah
21:35 < russfrank> well, you have a ready handler on _redis_client 
21:35 < serapath> and i would prefer to not use 'this'
21:35 < russfrank> why not
21:35 < serapath> its just an additional unreliable parameter to every function call
21:35 < serapath> which can be set explicitly through apply or call
21:35 < serapath> if i understand it right
21:35 < serapath> so why use it at all?
21:36 < serapath> if i require additional parameters, i just give the function another parameter
21:36 < russfrank> because its what the language provides
21:36 < serapath> i dont care
21:36 < russfrank> prototypes are very optimized, and more people will be able to understand your code 
21:36 < russfrank> it also makes testing easier imo if you don't keep everything in a closure 
21:37 < russfrank> thats my main reason for not using module pattern
21:37 < russfrank> makes introspection and testing hard
21:37 < serapath> i dont like prototypes
21:38 < topherbullock> :|
21:38 < serapath> i will use them if its needed, but i rather dont
21:38 < russfrank> why not?
21:38 < serapath> i hate implicit stuff
21:38 < russfrank> well then I guess you're not a fan of OO at all, then
21:38 < topherbullock> if you don't like prototypes you're going to hate JavaScript...
21:38 < serapath> i really tried to wrap my head around what happens when i use prototypical inheritance, but ... yeah, why bother
21:38 < topherbullock> WAT
21:39 < russfrank> because its javascript
21:39 < serapath> if i need to use some thing that uses it, i will, but i like to avoid it
21:39 < topherbullock> w a t
21:39 < serapath> i'm not so the oo guy
21:39 < russfrank> I can try to help you understand it if you'd like
21:39 < russfrank> its not as complicated as you think
21:39 < serapath> actually, javascript is oo retreat for me. the only language i used until a couple of months ago was java
21:39 < topherbullock> yah. its pretty simple to understand prototype chains.
21:39 < serapath> inheritance feels totally unnatural to me
21:40 < serapath> but its not explicit
21:40 < serapath> and i forget all stuff that is not explicit
21:40 < serapath> i understood it 3 or more times already
21:40 < serapath> and forget it every time i use it
21:40 < serapath> like "ah how did that work again?"
21:40 < serapath> the module pattern is cool, because everything is explicit
21:40 < russfrank> there are lots of things in programming languages that aren't explicit
21:40 < serapath> no magic
21:41 < serapath> yes, and i hate those things
21:41 < topherbullock> okay. I'm not sure how to help.
21:41 < serapath> :-)
21:41 < topherbullock> Write machine code?
21:41 < russfrank> serapath: those things aren't always bad
21:41 < serapath> i think they are
21:41 < russfrank> there are some implied semantics which are necessary 
21:41 < Ry0_> hey, i hae a question. before I learn any framework (sailsjs, meteor etc), what should I know in proper nodejs?
21:42 < topherbullock> implicitness is 100% of JS's power
21:42 < serapath> i mean, its not cool if u get a lot of boilerplate to make it all explicit. i beleive its a hard thing to make something explicit, but not pollute the syntax
21:42 < topherbullock> well.. 99
21:42 < russfrank> serapath: yes, most definitely
21:42 < russfrank> arguably, language design is a balance between implied and explicit semantics
21:42 < russfrank> but, in particular, it's a balance between them; not one extreme or the other
21:43 < raphie> hey guys, I'm looking to do some custom authentication. I've looked at a couple frameworks (passport, everyauth) and they seem great if you want to use an existing strategy, but undocumented if you want to create your own. can anyone recommend a good, easily-extensible auth framework (preferably with express middleware)?
21:43 < serapath> i want it all to be explicit. the biggest sacrifice for me was to loose static typing
21:43 < serapath> but well, u cant have it all i guess
21:43 < serapath> raphie try DRYWALL
21:43 < serapath> :-) i player around with passportjs and connect-roles a lot, but with drywall it just works
21:43 < serapath> i think drywall uses passportjs
21:44 < serapath> russfrank: ur gist uses this
21:44 < serapath> russfrank: and NEW
21:44 < raphie> serapath: maybe I phrased it wrong. I'm looking to define a weird, custom authentication flow. like, a client has to GET /nonce/:username and then POST signed ciphertext to /login, etc
21:44 < russfrank> yep
21:45 < serapath> when i "learned" something yet, ...maybe its taste..., then i'd rather use Object.create instead of 'new'
21:45 < serapath> ...less implicit stuff going on
21:45 < raphie> so what I'm looking for, serapath, is a framework where creating your own strategy is well-documented. passport has zero docs for making your own
21:45 < alexstrat> Is https://gist.github.com/alexstrat/c6e31e6d96ee96a467f4 a correct implementation of a writable stream ?
21:45 < Spion> serapath, fully agree
21:46 -!- mode/#Node.js [+o MI6] by ChanServ
21:46 < Spion> raphie, how about just oauth-flow? http://npmjs.org/package/oauth-flow
21:46 < Spion> other authentication methods are easy
21:46 < raphie> Spion: this isn't oauth, it's an auth method of my own devising
21:46 < Spion> and oauth-flow should fill the oauth gap
21:46 < Spion> ah.
21:46 < Spion> nevermind then
21:47 < serapath> nathan7: u asked 'why the big closure'... answer: i dont know :-) how would i do it without?
21:47 < serapath> the thought behind the module i wrote is: do an IIFE, so only the returned api object is cached with an init method attached.
21:48 < serapath> next: when u call init with initialization arguments, populate the api object with everything it should have, then delete the init property from it
21:48 < russfrank> serapath: http://pastebin.com/40551B02 
21:48 < eaglerockla> can someone help me with my configuration of node.js?
21:48 < serapath> so: the only cached thing will be the api object with the useful properties attached to it, the rest will get garbage collected
21:48 < nathan7> ..dude
21:49 < nathan7> it is already in a closure
21:49 < nathan7> deal with it
21:49 < russfrank> haha
21:51 < serapath> nathan7: ah, makes sense, thats why russfranks example is fine too
21:51 < serapath> but on the other hand, with a closure, i might be able to have the export statement and if i tune it further, the api.prop's that will be initialized to it, at the top of the file
21:52 < serapath> so when i open my editor, i see them first and dont have to care about the rest of the stuff thats going on in the file
21:52 < eaglerockla> http://pastebin.com/b2ecmQZZ This is my config file and what the server says when i type node server.js
21:55 < r04r> does anyone know of an openid provider library for node?
21:56 < sinclair|net> dont you hate it when spend a few hours on something, only to realize you have been doing it all wrong?
21:56 < LoneSoldier728> Hey
21:57 < serapath> var fn5 = (function(){ var a = 5; var b =7; return function() { return b; }; })(); will the reference 'var a = 5;' be garbage collected?
21:57 < topherbullock_> yes
21:58 < serapath> ok nice :-)
21:58 < LoneSoldier728> anyone from NY?
21:58 < nathan7> garbage collection just traces if shit is reachable
21:58 < beardtree> LoneSoldier728: I am.
21:59 < LoneSoldier728> nice, this is my first time ever using an IRC, trying to make friends with some tech ppl
22:00 < LoneSoldier728> Idk if anyone would know without looking at a file that I have up, but if I am creating a backbone view with a model in it that has defaults: what could be the reason why the defaults do not show when I render the view in a jade file?
22:00 < LoneSoldier728> through a template
22:01 < sinclair|net> LoneSoldier728: from NZ, close enough
22:01 < Sose> ??frameworks
22:01 < LoneSoldier728> sinclair|net: NZ = New Zealand lol?
22:02 < sinclair|net> LoneSoldier728: the distance from NY to NZ is literally like 1 letter
22:02 < LoneSoldier728> Sose: was that question directed to me?
22:02 < sinclair|net> true bro
22:02 < Sose> LoneSoldier728: no.
22:02 < Abraxsi> Can anyone tell me why it is recommended to build node from source?
22:03 < LoneSoldier728> sinclair|ne: Yeah it is, but not in travel distance
22:03 < Sose> I've made a simple canvas game prototype in coffeescript.. now for practice purposes, I'm trying to add some socket.io online capabilities with node backend. I'm trying to use node+express+socket.io. do I need to add handlers for every JS file I try to use on the client? now I get errors like "NetworkError: 404 Not Found - http://localhost:8080/jquery-2.0.2.js"
22:03 < serapath> nathan7: var a = 7; is not reachable, but its in the scope of the returned closure function, thats why i was asking
22:03 < LoneSoldier728> sinclair|ne: so how old are you?
22:04 < serapath> nathan7: will the garbage collector examine if the its actually used? (maybe there is ways in javascript to eventually use it in the future...
22:04 < freewil> Sose, there is a static middleware for express, you just need to specify a directory and everything in it will be accessible
22:04 < LoneSoldier728> Are we allowed to paste stackoverflow questions we have?
22:05 < beardtree> Sose: you need to add express.static handling.
22:05 < Abraxsi> Sose, I believe the common practice is to create a 'handler' for a public folder where you can keep your static resources like javascript files and images
22:05 < diminoten> bah, I'm stuck in a trap
22:06 < beardtree> Sose: http://expressjs.com/api.html#app.use
22:06 < Sose> ahh, ok, thanks
22:06 < piklu> YOUTUBE GOT HACKED I GUESSS !!!!
22:06 < piklu> check out guys !!!
22:07 < jalcine> piklu: what are you talking about?
22:07 < piklu> yeah
22:07 < piklu> open it
22:07 < LoneSoldier728> It works fine for me...
22:07 < piklu> mine doesnt
22:07 < piklu> says a funny thing
22:07 < jalcine> so you got hacked
22:07 < nathan7> serapath: the garbage collector knows that, yes
22:07 < LoneSoldier728> ya
22:07 < r04r> piklu: what does it say?
22:07 < piklu> 500 internal error
22:07 < LoneSoldier728> gj piklu
22:07 < piklu> A team of highly trained monkeys has been dispatched to deal with this situation.
22:07 < nathan7> serapath: there's eval() which disables a million optimisation
22:07 < nathan7> serapath: s
22:07 < r04r> lol
22:07 < LoneSoldier728> lol
22:07 < r04r> that is nromal
22:07 < nathan7> serapath: which is why it is fucking evil
22:07 < r04r> well "normal"
22:07 < beardtree> LoneSoldier728: yes
22:07 < LoneSoldier728> Anyone use backbone.js?
22:07 < piklu> beyond that - is a public key
22:08 < nathan7> ..no, it's a bunch of info
22:08 < r04r> no its a base64 encoded blog
22:08 < nathan7> and a public key is public information, fyi
22:08 < LoneSoldier728> Youtube welcomes me
22:08 < piklu> can others also see this ?
22:08 < beardtree> piklu: that's called a bug
22:08 < LoneSoldier728> and they recommend a video of highlly trained monkeys going to space
22:08 < LoneSoldier728> you think that is the team they are sending for the internal error
22:08 < beardtree> I cannot reproduce.
22:09 < diminoten> is there a way to get a callback to trigger once a forEach has completed on an array?
22:09 < nathan7> async.each
22:09 < nathan7> https://github.com/caolan/async#each
22:10 < diminoten> async huh...
22:10 < LoneSoldier728> var user = new App.Views.User({model: new App.Models.User()});
22:10 < LoneSoldier728> 	user.render();
22:10 < LoneSoldier728> Should that be rendering the default model details...
22:10 < LoneSoldier728> or am I missing something?
22:11 < disorder_> hi
22:11 < disorder_> someone has ever used oauth2orize?
22:11 < beardtree> diminoten: .forEach is sync.
22:11 < LoneSoldier728> because when I call the model to i.e var user = App.Models.User(); it shows up as a function if I then do user.defaults then it shows the info
22:11 < LoneSoldier728> how do i extract the defaults in the step above anyone
22:11 < piklu> http://i.imgur.com/yTszvqN.png
22:12 < serapath> if i call redis_client.on('ready', myFunction); and then later redis_client.on('ready', myOtherFunction); , will it replace the old one?
22:12 < piklu> this is what it looks like
22:12 < serapath> or does it queue handlers for an event?
22:13 < neeky> LoneSoldier728, #documentcloud may be better for backbone questions
22:14 < Sose> aargh, I got express serving the static files now. but now I get "ReferenceError: io is not defined" on 
22:14 < Sose> socket = io.connect('localhost:8080');
22:15 < Sose> on the client side. server side seems to work fine
22:15 < ningu> did you load socket.io.js with a script tag?
22:15 < olalonde> probably you are including the js file after doing your io call
22:15 < ningu> that too
22:15 < Sose> I did.. umm something is terribly wrong
22:16 < olalonde> while () { console.log(io); } 
22:16 < olalonde> hihi
22:16 < piklu> it is still down :) quite long
22:16 < Sose> it served the "socket.io.js" file as "Welcome to socket.io.", lol
22:16 < olalonde> or simply type io in your console
22:16 < Sose> wth
22:16 < olalonde> lol
22:18 < Sose> https://gist.github.com/anonymous/064198cfde1f1a6b5116 this is my app
22:18 < Sose> web directory has all the js files
22:19 < Sose> it servers jquery and my main.js file just fine but socket.io comes up with just that string :D
22:19 < olalonde> what if you open the file in your editor?
22:19 < r04r> what are you using for socket.io.js url
22:20 < Sose> the file in my editor is the correct one.
22:20 < r04r> <script src="/socket.io/socket.io.js"></script>?
22:20 < Sose> <script type="text/javascript" src="socket.io-client.js"></script>
22:20 < Sose> I changed the name to include -client because I was confused
22:20 < r04r> try what i did
22:20 < olalonde> maybe web/socket.io-client.js
22:20 < r04r> just do <script src="/socket.io/socket.io.js"></script> and socket.io should intercept it
22:20 < r04r> and serve the file
22:21 < Sose> ohhh, okay, thanks!
22:21 < olalonde> oh
22:21 < Sose> didn't know that
22:21 < olalonde> neat
22:21 < Sose> yup it works now! thanks
22:22 < olalonde> might want to express.static(__dirname + '/web')
22:22 < Sose> what does that do?
22:22 < olalonde> uses the absolute path to your static directory
22:23 < olalonde> i think otherwise it will be relative from where you launched your server
22:23 <@konobi> mmm... enodominictarr
22:23 < Sose> okay, thanks, good tip
22:23 < olalonde> welcome
22:25 < Abraxsi> what exactly is __dirname
22:26 < Abraxsi> is it a variable within node referencing the folder the porject is in?
22:26 <@tjfontaine> Abraxsi: http://nodejs.org/api/all.html#all_dirname
22:27 < Abraxsi> ah ta. missed that the first time through ;-)
22:27 < briefcaseofguts> what
22:27 < briefcaseofguts> where can i get help for php
22:28 < ningu> not here
22:28 < briefcaseofguts> have you guys even tried php its so much better and faster than javascript
22:29 < ningu> briefcaseofguts: we don't really appreciate trolling here
22:29 < st_luke> ningu: lmao
22:30 < qard> I used php for years. It was horrible.
22:30 <@tjfontaine> briefcaseofguts: I use PersonalHomePage in all my enterprise projects
22:30 < Esya> Hi guys
22:30 < bnoordhuis> ningu: i can live with inspired, clever trolling
22:30 < ningu> bnoordhuis: :)
22:31 < bnoordhuis> but that's sadly not what this is :(
22:31 < Esya> I have a question about the node_modules folder and the require function. I have a test folder, which runs my busterjs tests
22:31 < briefcaseofguts> lol
22:31 < briefcaseofguts> bnoordhuis: i see what you are saying man
22:31 <@konobi> KONOBI MAD... KONOBI SMASH
22:31 < Esya> It loads my main file, but the thing is.. this file is in the root of the project
22:31 < Esya> So when that module requires files, when ran at the root, its fine
22:31 < qard> unexpected T_PAAMAYIM_NEKUDOTAYIM
22:31 < Esya> But when the tests require it, then all the paths are wrong
22:31 < Esya> I have no idea how to deal with that
22:32 < ningu> Esya: run the tests from the root directory
22:32 < Esya> I searched a way to change the working directory, and I'm supposed to gitignore node_modules so I cannot put my module there
22:32 < Esya> ningu: But my .js files are in test/ and spec/
22:32 < Esya> And when I use buster test, or mocha -R spec
22:32 < Esya> It just fails for that
22:32 < ningu> Esya: do you require('foo')? i.e. without a relative path?
22:33 < Esya> It has a relative path
22:33 < ningu> you shouldn't have a relative path into your node_modules directory
22:33 < Esya> Oh no, it's not
22:33 < Esya> I mean, it's
22:33 < Esya> require('./lib/server.js'); and that server requires other stuff
22:33 < Esya> But this server does relative so that's just fine
22:33 < Esya> But requiring the server from the test folder just fails
22:33 < ningu> ok, so from the test thing require('../lib/server.js') or whatever
22:34 < Esya> I thought so, it works fine for "normal" execution
22:34 < qard> mocha runs at the root, so cwd is not ./test
22:34 < Esya> But during the test, when the server does require('./otherfile.js') that is in the same lib/ folder
22:34 < ningu> qard: ah ok, I couldn't remember
22:34 < Esya> It fails
22:34 < Esya> ningu, qard it's with busterjs right now :(
22:35 < ningu> is there an error it fails with?
22:36 < Esya> Just Error: cannot find module
22:36 < serapath> if i execute 2 functions in parallel with the async library and give it a callback which is called when all functions have completed. how do i have access to those functions return values?
22:36 < serapath> ... or callback, or whatever
22:37 < ningu> serapath: use something other than each
22:37 < ningu> map, for example
22:37 < briefcaseofguts> serapath: nobody uses return values in javascript, obviously you wanted to return the object that the method is called on
22:37 < ningu> briefcaseofguts: huh?
22:38 < briefcaseofguts> ningu: for obj chaining obv
22:38 < ningu> briefcaseofguts: his issue is specific to the async module
22:38 < serapath> async.parallel([     function(){ ... },     function(){ ... } ], callback);
22:38 < briefcaseofguts> ningu: ya
22:38 < ningu> serapath: use async.map
22:39 < serapath> ok, there is two functions, if they do not return something, then maybe they have callbacks themselve
22:39 < ningu> serapath: each of the functions takes a callback and you do cb(null, foo) where foo is the "return" value
22:39 < serapath> ningu: if i use map, i guess there is no guarantees of ordering
22:39 < ningu> serapath: there is no guarantee of ordering with parallel either
22:40 < ningu> I have no idea what you are actually trying to do
22:40 < serapath> so if i want to execute 3 functions which are totally unrelated, which means, they do very different tasks and they could be run in parallel and i need all of their 'return values' (dont care whether callbacks or real returns), how would i do that?
22:41 < darkpassenger> I'm trying to modify a mongo document in javascript http://pastebin.com/gLje7nwi but the PUT request hangs, 
22:41 < serapath> maybe i have functions a,b,c and all of them return/callback something which function d depends on
22:41 < ningu> I suppose you could just create var returns = {}; and modify returns.foo = bar
22:41 < serapath> but a,b,c are independent of each other
22:42 < ningu> serapath: actually though I'm pretty sure there is an async method to do it
22:42 < ningu> I just can't remember right now
22:42 < serapath> where do i put those? i only need it temporarily until the 'summary callback' (in case of the async.parallel) executes
22:42 < piklu> Youtube is still down
22:42 < piklu> thats a lot of downtime today
22:43 < serapath> not down for me
22:44 < Abraxsi> i've been streaming youtube happily over the last hour
22:44 < piklu> still down for me
22:44 < ningu> serapath: just put it in the closure where you call async
22:45 < darkpassenger> youtube is up here 
22:45 < euphrate> niggler hello friend
22:46 < piklu> async.js is best to get away from call back hell, anything else is good enough ?
22:46 < ningu> piklu: some people use promises
22:46 < briefcaseofguts> serapath: the 2nd arg passed to the parallel() callback is supposed to be 'results'
22:46 < piklu> which would the community recommend?
22:46 < euphrate> i prefer async.js over promises 
22:46 < serapath> so essentially the 'var result_gatherer' will be a counter to check if all parallel functions have been executed and a results gatherer too, or maybe i need an additional counter in my closure 
22:46 < euphrate> soon you'll be able to use generators piklu 
22:47 < piklu> generators? w
22:47 < euphrate> https://github.com/jmar777/suspend
22:47 < briefcaseofguts> serapath: async.parallel([ f1, f2 ], function(err, results){ dosomething; });
22:47 < serapath> briefcaseofguts: so the final callback of async.parallel gets an argument which contains all the results of all the parallel functions that have been executed?
22:47 < euphrate> and also co 
22:47 < euphrate> https://github.com/visionmedia/co
22:47 < serapath> what will be in results?
22:47 < briefcaseofguts> well theres only one callback
22:47 < briefcaseofguts> i think??
22:47 < euphrate> serapath: whatever was passed into the callback
22:47 < darkpassenger> msan
22:48 < euphrate> it's optional
22:48 < briefcaseofguts> so i guess its like a defered, but yea
22:48 < euphrate> it's also used for error handling
22:48 < serapath> briefcaseofguts: but all of the functions f1, f2, ...fn, 'return' some kind of result
22:48 < ningu> briefcaseofguts: oh you're right.
22:48 < ningu> serapath: it's an array of the results
22:48 < ningu> in the order you specified the tasks in
22:48 < briefcaseofguts> yea i would guess results would be an array in that snippet i posted
22:49 < briefcaseofguts> total mindfuck if not
22:49 < serapath> ningu: so the order in which i specify them will be the order of the 'results', regardless of that all my functions were executed in parallel? so is the 'results' thing an array of callbacks?
22:49 < ningu> yes
22:49 < serapath> or an array of 'returns'?
22:50 < ningu> yes to the first question
22:50 < ningu> no to the second
22:50 < briefcaseofguts> no its an array of returns
22:50 < ningu> it's an array of arguments returns in the callbacks
22:50 < ningu> serapath: it's in the docs
22:50 < briefcaseofguts> serapath: what are you making?
22:51 < serapath> a small module to initialize my redis db
22:51 < serapath> there is 2 to 3 parallel functions that should be executed and must return before i can finish initialization
22:51 < serapath> 2 if the redis doesnt need a password, three if it does
22:51 < briefcaseofguts> coolio
22:52 < serapath> and i want to gather the results, but all of those functions have nestings in them
22:52 < serapath> so they wont return something useful, but only their callbacks eventually will
22:52 < serapath> so actually, right now, i'm a bit confused :P
22:52 < briefcaseofguts> no worries man
22:52 < briefcaseofguts> were professionals!
22:53 < serapath> many ways to do it, but i want to take the opportunity and understand how to do it in a good way, because those situations will arise again, i think
22:53 < serapath> actually, i have a pastbin
22:54 < serapath> http://pastebin.com/1e3yNgE9
22:54 < briefcaseofguts> http://www.youtube.com/watch?v=O8pITBwUwP0
22:55 < serapath> there is 3 functions. 1.redis.client.info(), 2. redis.client.on(), 3.__authCalback()
22:55 <@konobi> mscdex: voila!
22:56 < ningu> konobi: viola! cello!
22:58 < briefcaseofguts> serapath: looks good
22:58 < serapath> briefcaseofguts: but those 3 functions execute in parallel
22:59 < serapath> and i just "assume", that the  redis_client.on('ready', ..) will return last and finalize everything
22:59 < serapath> but eventually, the others have not finished their jobs
23:00 < serapath> maybe its not such a big deal with redis_client.info(..) because it will write to the value that will go to the final 'api' object and thus will be available, but its a problem for __authCallback
23:00 < serapath> because, it might not have written its statusmessage yet
23:02 < serapath> i took the opportunity to digg more into the question of how to write code for parallel stuff on which other stuff depends,  (a,b,c,d,e,f,g) -> (abc|h, a|i, afg|j) -> ...
23:02 < serapath> i'd like to have a pattern to deal with this in arbitrary complexity
23:03 < serapath> that would be nice
23:03 < Abraxsi> hmm i'm learning express but i'm confused about error handling. inside a app.get i do a mysql query, and in that response can i throw a 404 if the entity doesn't exist in the db referenced by the request. or is that a 500 error? (that's two questions :-) )
23:04 < serapath> maybe additionally, f and g functions are optionally, thus j might sometimes be able to execute after a and f have finished and doesnt need to wait for g
23:04 < Abraxsi> connection.query('SELECT * FROM ship WHERE name = ?', [request.params.name], function(err, results) {........... if (!results.length) throw 404??
23:05 < briefcaseofguts> yep
23:08 < Abraxsi> so to split that up.... if a user calls /ship/123, and 123 deosn't exist in the db, should that be a 404 or 500 error conventionally speaking?
23:09 < regorianer> hey, is there any possiblity to do a form/post and not have to redirect or render?
23:10 < regorianer> its just ... i want to click on a button, do some database change and only change the value of a div field corresponding to the new database entry
23:11 < darkpassenger> is there anyway to loop on each of req.body field ? 
23:12 < darkpassenger> to have to .toArray the body ? 
23:13 < sorensen> time for the random
23:13 < briefcaseofguts> Abraxsi: idk, 500 technically, but for seo, if someone googles and gets an old link, i would think showing 404 is more appropriate
23:13 < ningu> darkpassenger: for (var i in req.body) { ... }
23:13 < Abraxsi> ok no answer to convention of 404 vs 500 for restful access to something that doesn't exist in db. so I'm going to guess at 404. problem is i don't know how to invoke a 404 from inside my connection.query callback...
23:13 < sorensen> if any of you want some electronic coding jams, spotify:user:beausorensen:playlist:3lQalkEDf7vLsrNP8G7Vzr
23:14 < sorensen> rather: http://open.spotify.com/user/beausorensen/playlist/3lQalkEDf7vLsrNP8G7Vzr
23:14 < Abraxsi> breifcaseofguts, ok i'll go with 404... but still having trouble working out how to invoke the 404
23:14 < sorensen> Abraxsi: i think 404 is apropriate
23:14 < Abraxsi> ok thanks
23:15 < sorensen> 500 implies that the resource existed and there was an error retrieving it, or the app had an error in general
23:15 < sorensen> 404 is more like, "i dunno wtf you were looking for mang"
23:15 < Abraxsi> heh
23:15 < briefcaseofguts> regorianer: you want to create an ajax call on the client side, and it should be returned as little data as possible, on the server side you want to create a new route for /myajaxcall or whatever, and just run your db query and output some html, use jQuery and its pretty ez ;/
23:17 < Abraxsi> ok so here's my situation in code form: http://pastebin.com/LAXpiNFK if anyone can help... my bed is calling and I'd love to solve this tonight :-)
23:18 < regorianer> briefcaseofguts: yes on the server side thats exactly what i have done. and of course i can do some jquery on the client side to update the div, but i have some problems with the server side. if i dont send redirect or render i have the sandclock, if i send end() i get directed to the form/post link
23:19 < hallas> anyone knows how PTR works on amazon route 53?
23:19 < hallas> i wonna use it to do a www to non-www redirect
23:19 <@tjfontaine> huh?
23:19 < regorianer> briefcaseofguts: i just want the server to do nothing after receiving the post and having performed the db update
23:19 < briefcaseofguts> ah ok
23:20 < briefcaseofguts> exit()
23:20 < sorensen> Abraxsi: looking
23:20 < briefcaseofguts> no?
23:20 < sorensen> what is your main issue
23:20 < sorensen> ah
23:20 < sorensen> comments
23:20 < sorensen> its more like...
23:20 < Abraxsi> ;-)
23:20 < sorensen> response.render(404)
23:20 < sorensen> of course more than that
23:20 < briefcaseofguts> regorianer: what stack are you using?
23:20 < sorensen> but that would be the gist
23:21 < briefcaseofguts> word
23:21 < briefcaseofguts> i always build a custom handler ;/
23:21 < sorensen> return response.render('404.jade', {reason: 'shit not found'})
23:21 < briefcaseofguts> i swear ive written more 404 and error handlers than i have all app code together
23:21 < regorianer> briefcaseofguts:  there is no exit function on this object, only these: http://pastebin.com/19fpFhc6
23:21 < Abraxsi> oh right. I just render 404 at that point.ok i'd seen stuff that implied the error went back up the call stack
23:21 < sorensen> Abraxsi: side note, i dont think you really want to be opening / closing a db connection on each request
23:21 < regorianer> briefcaseofguts: express
23:22 < briefcaseofguts> ah k
23:22 < sorensen> also, you could return a 400
23:22 < sorensen> since technically the resource exists, but because of user params nothing was found
23:22 < Abraxsi> i see.. that sounds pretty accurate
23:22 < sorensen> which *could* signal the user that they are just looking for something wrong
23:23 < sorensen> but, thats really up to you
23:23 < Abraxsi> ok so db connection once for the app? 
23:23 < sorensen> both would be correct
23:23 < sorensen> thats what i do
23:23 < Abraxsi> i see
23:23 < sorensen> i have a single file that creates the connection and exports it as a singleton
23:23 < Abraxsi> i usually Ctrl C to close my app
23:23 < Abraxsi> won't that leave the connection open
23:23 < sorensen> dunno
23:23 < sorensen> probably not
23:24 < sorensen> would say most definatly not
23:24  * sorensen cant spell
23:24 < cramrod> Can someone offer some streams advice?  Im piping a live video stream to file so I can then set up a read stream that pipes the video feed elsewhere.  Its for psuedo live streaming so I don't need to save the feed.  How do I regulate the size of the file generated by the write stream and keep it overwriting itself as opposed to getting infinitely larger?
23:24 < sorensen> Abraxsi: the main reason is that you want those routes served asap
23:24 < Abraxsi> oh so.. should the connection.connect() and connection.end() be in my request
23:24 < sorensen> no
23:25 < sorensen> you should make your connection to the db on app load
23:25 < briefcaseofguts> regorianer: can you unset the redirect value on the object, im not sure
23:25 < sorensen> and use that connection for the app
23:25 < Abraxsi> so you don't include the line connection.end() in your app at all
23:25 < sorensen> i may be wrong on this, depending on the driver implementation for the given db
23:25 < sorensen> no
23:25 < regorianer> briefcaseofguts: if so, then how ? :)
23:25 < briefcaseofguts> regorianer: my insticnts say you need to create a custom route if the framework doesnt have like a view.norender() method like most modern frameworks have
23:25 < regorianer> briefcaseofguts:  wait, i prepare u some better pastebin, okay ?
23:25 < Abraxsi> i see.. ok well it makes sense. just scared about opening connections I don't close 
23:26 < briefcaseofguts> sure
23:26 < sorensen> well
23:26 < sorensen> its only one
23:26 < sorensen> and likely the driver implementation is going to close the connection for you on process exit
23:27 < sorensen> for sql i have a file called query.js
23:27 < sorensen> which i require around the app, but since its cached the connection is only made once
23:27 < sorensen> new Query('select * from foo').exec()
23:27 < sorensen> ect...
23:27 < sorensen> just a random abstraction
23:27 < Abraxsi> when you do require('mysql') doesn't node cache that from then on anyway?
23:28 < sorensen> yes
23:28 < Abraxsi> so if you call it again it doesn't reload the module
23:28 < sorensen> but not the connection
23:28 < sorensen> module only
23:28 < Abraxsi> oh right
23:28 < Abraxsi> so the connect bit...
23:28 < sorensen> so you can create another file/module that creates/exports the connection
23:28 < sorensen> based on config / ect
23:28 < sorensen> which is good no matter if you use a single connection or multiple
23:28 < Abraxsi> right. i've seen you can create connection pools.. wouldn't that be similar
23:29 < sorensen> abstract it to a single file that knows how to find the information on how to connect to the db
23:29 < sorensen> depends on the driver
23:29 < sorensen> i've yet to run into an issue
23:29 < sorensen> without using connection pools
23:29 < regorianer> briefcaseofguts: http://pastebin.com/uD4eUAJu
23:29 < regorianer> briefcaseofguts: thats all i have with this function
23:29 < sorensen> it depends a bit on if the driver is multiplexing or not
23:29 < Abraxsi> what exactly do you mean by 'knows how to find the information on how to connect to the db'
23:30 < sorensen> well
23:30 < sorensen> we have a config file
23:30 < beardtree> sorensen: have you seen sequelize?
23:30 < sorensen> beardtree: pshh
23:30 < sorensen> http://bookshelfjs.org/
23:30 < sorensen> http://knexjs.org/
23:30 < sorensen> much better imo
23:30  * sorensen is a backbone guy
23:30 < bombsite> hey
23:31 < bombsite> does anybody know if js has native support for stacks of objects?
23:31 < sorensen> Abraxsi: we have a config that defines where the db lives and what port / settings
23:31 < bombsite> or do I need to make it myself?
23:31 < sorensen> which may change per environment
23:31 < sorensen> so rather than define that per db connect there is a single file that does it
23:31 < sorensen> which is the joys of abstraction
23:31 < beardtree> sorensen: this is pretty sweet.
23:31  * beardtree likes promises
23:32 < beardtree> bombsite: you mean the stack ADT?
23:32 < beardtree> bombsite: arrays are stacks.
23:32 < briefcaseofguts> regorianer: i think its the webbrowser causing the redirect, form.submit() reloads the page, no?
23:33 < regorianer> i think so, in jquery i would use a preventfromdefault
23:33 < regorianer> but this i cannot with node
23:33 < Abraxsi> sorensen, yes that makes sense. so you're saying you have a config text file, and you've got another node.js file that you export a connection
23:34 < regorianer> or can I ?
23:34 < sorensen> right
23:34 < sorensen> config json file really
23:34 < regorianer> i am kinda new to node
23:34 < sorensen> since... node
23:34 < sorensen> :D
23:34 < Abraxsi> :)
23:34 < sorensen> arent they all .txt files?
23:34 < sorensen> :P
23:35 < briefcaseofguts> no.
23:35 < briefcaseofguts> you would have to make it a ajax request if you did
23:35 < briefcaseofguts> which is probably what you have to do anyway
23:36 < sorensen> beardtree: glad you like it
23:36 < sorensen> i was damn excited when i saw the post on HN
23:36 < sorensen> node.js seems to have a hatred for SQL
23:36 < sorensen> i think because its missing 2 letters in front of it
23:36  * sorensen shrugs
23:37 < briefcaseofguts> regorianer: commenting out the redirect() should have worked, and so should just returning nothing (aka exit())
23:37 < regorianer> briefcaseofguts: thats totally true, but i have the sandclock
23:38 < briefcaseofguts> oh yea
23:39 < beardtree> The concepts behind SQL are awesome but SQL itself is fucking shitty.
23:39 < sorensen> well
23:39 < sorensen> eye of the beholder my friend
23:39 < sorensen> i find key val to be shitty
23:39 < sorensen> :)
23:39 < sorensen> or using couchbase for psuedo-relational data
23:40 < sorensen> because i love writing a map reduce method for every possible query i  need beyond key val
23:40 < beardtree> At least it's consistent.
23:40 < regorianer> lets say, okay, its working, but i cannot let the user have a sandclock (which on ubuntu is a wheel) until the next active click
23:40 < sorensen> so is sql
23:41 < sorensen> or rather, sql db's
23:41 < sorensen> since sql is just a spec
23:41 < sorensen> much like js :D
23:41 < sorensen> lil diff of course
23:41  * beardtree uses couchDB
23:41 < beardtree> sorensen: yes, I do.
23:41 < regorianer> briefcaseofguts: also the page is "loading"
23:41 < sorensen> yes you do what?
23:42 < beardtree> Views are beautiful.
23:42 < beardtree> COUNT(*) v. *, what's the deal with that?
23:42 < beardtree> Rows v. columns?
23:42 < sorensen> :(
23:42 < regorianer> briefcaseofguts: and this is of course the pending /deal/:id post 
23:43  * sorensen wrong channel
23:43 < jcrugzz> beardtree++. I love me some btrees
23:43 < sorensen> cant really tell if you making a pro or con for sql
23:43 < beardtree> sorensen: sorry, lots of lag.
23:43 < sorensen> no worries
23:44 < sorensen> for me i feel the community dislikes SQL db implemenations because of speed
23:44 < Abraxsi> cheers for the help chaps! good night
23:44 < sorensen> and so a great sacrafice occurs in order to keep the speed in regards to data and the ability to access data
23:44 < sorensen> Abraxsi: cheers :P
23:45 < beardtree> sorensen: a con. * is inconsistent in that case.
23:46 < sorensen> so the solution is to not have such capabilities in the first place?
23:46 < sorensen> you can abuse anything
23:46 < sorensen> or do things wrong
23:46 < sorensen> hell, we all work in JS
23:46 < sorensen> we should know :P
23:47 < sorensen> really i'm going to use the best tool for the job
23:47 < sorensen> which for me normally falls between the redis / sql space
23:48 < sorensen> either relational or key val
23:49 < sorensen> i can't shake the feeling though that the node community hates sql
23:49 <@isaacbw> the rails community hates sql
23:49 < sorensen> i've never known the reasons or understood them
23:49 < sorensen> isaacbw: node does too
23:50 <@isaacbw> node users are a bit more pragmatic than rails developers
23:50 < sorensen> perhaps hate is a strong word... ignores maybe?
23:51 <@isaacbw> a lot of frontend developers just don't know sql very well
23:51 <@isaacbw> which makes it hard to use an rdbms
23:51 < sorensen> hmm
23:51 < sorensen> i see where that can cross territories into node
23:51 < sorensen> since js
23:51 < sorensen> but this is a server language
23:51 < sorensen> how do front ends come into play other than just JS?
23:52 <@isaacbw> server-side rendering counts as frontend development
23:52 < sorensen> i suppose
23:52 < sorensen> i'm not sold however
23:52 < sorensen> writing html is one thing
23:53 < beardtree> isaacbw: it's not frontend developers' faults.
23:53 < sorensen> making assets / css / design is another
23:53 < sorensen> in a perfect world my job would be to write the html my designer desired to drive the front end
23:53 <@isaacbw> that wouldn't be very exciting
23:53 < sorensen> why should it be
23:53 <@isaacbw> just writing html all day
23:54 <@isaacbw> because it would be a perfect world
23:54 < sorensen> not sure were all day was extracted from that
23:54 < durango> Any idea why https://gist.github.com/durango/53aa6e87009d308b5058 outputs "{}" ?
23:54 < sorensen> its an interesting concept though
23:55 < beardtree> It's a matter of perspective.
23:55 < sorensen> i dont want my designer / UI/UX guy doing antyhing on the server
23:55 < sorensen> at the same time i dont want to write sass/less/html for them
23:55 < sorensen> but...
23:55 < sorensen> id rather have a great UI/UX guy that couldnt write whatever micro templating system we used and made great designs
23:56 < sorensen> the html is easy, design is hard
23:56 < sorensen> let me make the app run, you design how it looks, and lets meet in the middle
23:56  * sorensen perfect world
23:58 < sorensen> durango: because you are passing in an empty value to function test()?
23:58 < durango> sorensen: uuhhhh what?
23:58 < durango> {hello: 'world'} != {}
23:58 < sorensen> i get back an object
23:59 < durango> mmm
23:59 < durango> im using 0.8.25
23:59 < sorensen> is that really the only code you have running?
23:59 <@isaacbw> durango: that's pretty old
23:59 < durango> isaacbw: not really
23:59 <@isaacbw> it is in node land
23:59 < durango> 0.10 isnt considered fairly stable by a lot of people
23:59 < sorensen> i just pasted it into chrome
23:59 < sorensen> works fine
--- Log closed Fri Jul 12 00:00:45 2013
