--- Log opened Wed Feb 13 00:00:23 2013
00:01 < samholmes> TooTallNate: There is no req object in websockets, in case you forgotten.
00:01 < denom> samholmes, can you show me your websocket code?
00:03 < samholmes> https://github.com/visionmedia/connect-redis/issues/69
00:03 < samholmes> denom: ^
00:03 < samholmes> The sock.js file exposes the authenticate method to dnode clients
00:03 <@TooTallNate> samholmes: so i think you should be using https://npmjs.org/package/cookie-signature
00:04 <@TooTallNate> so unsign the cookie manually
00:05 < tjgillies> are there any other popular languages based on v8 other than node?
00:06 < systemfault> v8 is the javascript VM
00:06 < nathan7> tjgillies: node is not a language, JavaScript is
00:06 <@TooTallNate> tjgillies: node is a framework, not a language
00:06 < nathan7> I'd say a platform
00:06 <@TooTallNate> triple-slam
00:07 < tjgillies> any other platforms/frameworks/whatever marketing term yo want to call it hosted on v8 besides node? you know what i mean pedants ;)
00:07 < nathan7> Chrom(e|ium)? q=
00:09 < samholmes> tjgillies: There's Chrome
00:10 < tjgillies> i'll take that as a no then :)
00:11 < Pavi> Hi
00:11 < asdf12> man is there a zeromq guide that is condensed? i don't care to know all the network nic nacs about it 
00:11 < Pavi> I am having trouble in reading binary file and send it in my http request body
00:11 < Pavi> can ny one help
00:14 < mamadero> I need some help with NPM. Is there a cross platform way to get to the node_modules path reliably? 
00:14 < RSA_> Thanks for the suggestions!
00:14 <@isaacs> mamadero: which node_modules path, exactly?
00:15 <@TooTallNate> mamadero: what are you trying to do?
00:15 <@isaacs> mamadero: you can do `require.resolve('some-module')` to see wehre it's loading from
00:15 <@isaacs> mamadero: or `npm root` to have it output the place where it's trying to put stuff.
00:15 < mamadero> On linux /usr/local/lib/node_modules/ (depending on how you installed it), on windows is c:\Program Files (x86)\nodejs\node_modules
00:16 < amurdaca> anyone know how to run npm commands directly in phpstorm?
00:16 < mamadero> @TooTallNate I'm adding custom template support to geddy and wanted to point to a module and use those file instead of the default ones 
00:16 <@isaacs> mamadero: on the command line, run `npm root -g` (for global) or `npm root` (for local)
00:17 <@isaacs> mamadero: but probably, you're doing it wrong if you're needing this info
00:17 < mamadero> @isaacs: I'll try require.resolve
00:21 < mamadero> isaacs: what's wrong with it? sounds like I might be missing something... 
00:22 < Pavi> any one can help
00:28 < Pavi> hey issacs
00:28 < Pavi> i have some doubt in http request body sent binary
00:33 < jschall> i am new to node, a little confused. say a user wants to authenticate - i have to run a hash that takes 500ms. i obviously want to do this asynchronously - do i spawn a process that does it or is there a way to make a nodejs function run in a separate thread?
00:33 < MI61> joyent/node: isaacs v0.8 * 82ad5fb : blog: Forgot slug on peer-dependencies article - http://git.io/tyc1Cg
00:36 < jschall> *crickets*
00:36 < jschall> 950 users and all of them are crickets! if you're on the user list, i'm imagining you as a giant cricket right now :)
00:41 < tongcx> hi, i'm reading doc for "request" package
00:41 < tongcx> what does the following do?
00:41 < tongcx> req.pipe(request.put('http://mysite.com/doodle.png'))
00:42 < tongcx> especially the put part, what does it mean to put to a static file?
00:43 < spion> tongcx, it means whatever mysite.com implements it to mean.
00:43 < spion> it may or may not be a static file
00:44 < tongcx> spion: typically, does that means mysite.com will handle the upload of this doodle.png?
00:45 < spion> it means you are piping (I assume) the request to your HTTP server toa  put request send to the url mysite.com/doodle.png
00:45 < spion> err
00:45 < spion> piping the request sent to your HTTP server.
00:46 < tongcx> spion, sure, thanks
00:46 < spion> what that other server (mysite.com) does is unknown
00:47 < spion> in theory it could do anything - save a file, ignore the PUT and serve a static file...
00:47 < spion> or respond with an error
00:48 < AviMarcus> I KNOW I asked this before, but I can't remember nor find it in google. When I do a for loop, and then have an async function inside, how can I get the value of the original loop iteration? I always get i+1! http://pastebin.com/1rGrrGir
00:50 <@TooTallNate> AviMarcus: you need to use a "closure"
00:50 <@TooTallNate> AviMarcus: i.e define a function that gets executed that gets the "i" variable passed in to it
00:50 < pachet> AviMarcus : var i = 10; while ( i -- ) { ( function ( index ) { someAsyncFunc(index, callback); } ) ( i ); }
00:51 < AviMarcus> hmm. that sounds simple.
00:52 < AviMarcus> ooh (function(index)) cool.
00:52 < MI61> joyent/node: isaacs master * 2789323 : net: Respect the 'readable' flag on sockets  Previously, we were only des - http://git.io/bI2dKA
01:05 < d4rklit3> hey
01:05 < d4rklit3> in express i am trying to do this:  app.get('/:page/:action', function(req, res) {   res.sendfile(path.join(__dirname, "/public/index.html")); });
01:05 < d4rklit3> when i have that it works as expected but now it doesn't pick up /scripts/mdetect.js
01:08 < pachet> you want that route to catch static files?
01:08 < d4rklit3> yeah
01:09 < pachet> are other static files getting routed to that fn?
01:09 < d4rklit3> no :(
01:09 < d4rklit3> i have an images folder
01:09 < d4rklit3> but it has subfolders
01:09 < d4rklit3> so those get picked up
01:09 < d4rklit3> but anything static that is /route/action doesn't get picked up
01:09 < d4rklit3> kind of weird
01:10 < d4rklit3> one thing i do like about apache is that rewrites seem to work a bit better
01:10 < pachet> are you using express.static elsewhere?
01:10 < d4rklit3> yeah
01:10 < d4rklit3> above that
01:11 < pachet> is /scripts being thrown to the static middleware?
01:11 < d4rklit3> no
01:11 < d4rklit3> well
01:11 < d4rklit3> kinda
01:12 < d4rklit3> there is a file in scripts that gets generated if the server is in dev/staging mode
01:12 < d4rklit3> if you go to scripts/main.js in dev mode it builds scripts.js and serves that. if you go to in production mode it jsut serves the last buid
01:14 < pachet> i guess i'd need to see the relevant routes
01:14 < pachet> i'd guess that the static middleware is eating that req
01:15 < pachet> but i dont really know; i'm not even sure what you're trying to do
01:15 < d4rklit3> http://pastie.org/6146167
01:15 < d4rklit3> i just want it to go index.html unless its a static route
01:15 < breck> anyone know if having 10,000 running processes on a single ubuntu server is a problem?
01:16 < breck> i have close to 1,000 running now, and wondering if this could scale another 10x
01:19 < iwalkbarefoot> breck: the question your asking is probably unanswerable.  Having 10,000 processes that aren't really doing much is probably possible
01:20 < breck> iwalkbarefoot: true. i guess i'll figure it out when i get there. just trying to plan for the next few months
01:20 < iwalkbarefoot> breck: it's a good problem to have :)
01:20 < breck> i'm just wondering if there is some critical overhead i should be aware of
01:20 < breck> most of the processes to very little
01:21 < breck> do*
01:21 < MI61> joyent/node: Ben Noordhuis master * 3f7e88a : buffer: accept negative indices in Buffer#slice()  A negative start or en - http://git.io/nIqyKg
01:22 < iwalkbarefoot> breck: this might be of use to you: http://stackoverflow.com/questions/9361816/maximum-number-of-processes-in-linux
01:25 < breck> iwalkbarefoot: thanks! exactly the type of thing i was looking for. its all in the phrasing
01:25 < iwalkbarefoot> breck: no problem
01:26 < brycebaril> breck I'd suggest trying it in a non-production environment, I imagine you'll hit problems well below pid_max
01:28 < breck> brycebaril: good point. at the current rate we'll run out of memory long before then. what i was thinking was if i improved mem consumption a lot, we might be able to squeeze more processes on one box
01:28 < pachet> d4rklit3: sorry for the delay
01:28 < pachet> i just ran your script locally - works fine for me
01:28 < d4rklit3> heh weird
01:29 < d4rklit3> node version?
01:29 < d4rklit3> express version?
01:30 < styol> Has anyone heard of / would recommend / not recommend asyncGate.js? https://github.com/getify/asyncGate.js -- I just came across a client project that is using it extensively and it seems like just another control flow library
01:31 < pachet> d4rklit3: node 0.8.18, express 3.0.0
01:31 < d4rklit3> i dunno
01:31 < d4rklit3> not taht important
01:31 < d4rklit3> thanks for your help though
01:31 < denom> styol, looks like an analogue to a promise
01:34 < styol> denom: I see. Perhaps I am just too used to simple callbacks ;)
01:34 < pachet> d4rklit3: sorry :[
01:34 < pachet> styol: it's just a callback aggregator
01:37 < pachet> looks awkward insofar as you can't specify args :[
01:37 < styol> pachet: one thing that seems to be lacking is robust error handling
01:38 < styol> I read quite an in depth array of code utilizing it and was like, "holy shit"
01:40 < styol> "…I have almost no idea what this is doing"
01:40 < pachet> i guess i just prefer having a little more sugar in the promise affix method
01:48 < _pash> does anyone have a codeschool account here?
01:55 < holzp> do I have my Node history correct? Node has promises, then dropped them in favor of the callback(err, ...) style of async? 
01:55 < echo1> _pash: I do, what's up?
01:58 < _pash> echo1: i'd love if you could help me get the real time node scripting chajjenges
01:58 < _pash> challenges*
01:58 < penzur> good morning!
01:59 < draginx> holzp: im not sure but promises is still live and well in the nodejs community
01:59 < draginx> if ur talking about internals idk though
01:59 < holzp> yeah internals
02:00 < systemfault> I can't understand why...
02:00 < _pash> echo1: i've watched all the 7 videos, but i dont have any way to practice ;(
02:04 < echo1> _pash: I'm not sure I understand how I can help. 
02:05 < _pash> echo1: if you could provide the practice tasks that would be very useful, even for screenshots i woulod be greatful
02:10 < styol> Any recommendations for multiple server code deployment / continuous integration / remote control / hulahoophandstands?
02:11 < opus_> Hey after installing Postman, how do I launch it?
02:11 < echo1> _pash: I can't really copy and paste them, you can get a free 48 hour pass here: http://geekli.st/yevgenko/links/12931
02:12 < asdf12> holzp: that's what i heard
02:12 < asdf12> that it existed in 0.1.x or something and was dropped quickly
02:12 < _pash> echo1: thanks for the tip!!
02:27 < trex005> Hello everyone.  I was hoping that someone could help me call another function that is in the same method I'm in.
02:28 < trex005> I tried using this.
02:28 < trex005> but that failed
02:28 < trex005> tried using the method directly but that failed as well
02:34 < holzp> trex005, we're gonna need a gist or hastebin
02:34 < trex005> holzp: just a moment
02:35 < tongcx> hi guys, in npm, if i installed both express and connect, then seems there are two copies of connect
02:36 < tongcx> is this duplicate?
02:36 <@Nexxy> correct!
02:36 <@Nexxy> now express has its own copy of connect
02:36 <@Nexxy> and your app has one too
02:36 < tongcx> so every package will get a full dependence tree?
02:36 < tongcx> seems not efficient
02:36 <@Nexxy> every package gets its own dependencies satisfied by npm
02:37 <@Nexxy> the alternative is making sure that every package you install relies on the same version of whatever other packages you have
02:37 <@Nexxy> so really, it's quite efficient
02:37 < trex005> holzp: http://pastebin.com/qsJkJvMN  line 11 is where I'm trying to call the other funciton.  When I call it, no matter how I do it, it says undefined.
02:37 < tongcx> but you can treat different versions of same package as different packages
02:37 < tongcx> then it would be a flatten approach
02:38 < holzp> you can define them up top seperately then export them
02:39 < holzp> like define login, define setkey then m.exports={ Login : Login, SetKey : SetKey}
02:39 < trex005> Thank you!  I think that is what I needed!
02:40 < holzp> :)
02:43 < styol> trex005: it werx for me as is
02:43 < styol> minus the var database line
02:44 < trex005> holzp: worked like a charm.  styol: hmmm not for me.  wonder if context made the difference
02:45 < styol> trex005: *shrugs* in a separate file i just did `var test = require('./test.js'); test.Login({}, {});` and added some console logs and it was fine
02:49 < trex005> styol: do you have a fast place to test code, or did you load up a node server somewhere?
02:50 < styol> trex005: yeah just created test.js, pasted your code, removed the database line, added console log inside SetKey, created test1.js with the previous code described, and just did `node test1.js` and got the console log
02:51 < trex005> thanks.... I was hoping you had some faster method :)
02:51 < trex005> alright... that bug is squashed.  Time for rest.  Thanks guys
02:51 < styol> well, aside from having used that pattern before and thinking that it worked, i wanted to make sure module.exports wasn't somehow different
03:01 < groundwater> is there any way in node-core to only run a a subset of the tests?
03:06 < opus_> hey guys, how do I automatically re-load pages in chrome when I make changes in sublime?
03:06 < opus_> thanks
03:08 <@Nexxy> opus_, ST2 plugins, or fs.watch in node
03:08 < opus_> What does ST2 stand for, thanks
03:09 <@Nexxy> sublime text 2
03:13 < opus_> which plugin is the best? thanks
03:27 < cloudbender> someone keeps trying to bust my chops
03:27 < carranca> Hi, im using node with express, and have some doubts with the require and paths. If im inside a module called controller/user_crud, and want to access the model/user, I should do something like require("../model/user"). Isn't there a way to define a path relative to the base module?
03:28 < SomeoneWeird> require(__dirname + "/path/to/model")
03:28 < SomeoneWeird> ?
03:29 < carranca> but if im in the file base_path/controller/user_controller.js, wont __dirname point to base_path/controller?
03:29 < denom> carranca, relative import is the way to go
03:30 < carranca> denom: why?
03:30 < denom> carranca, that is the node style (as far as I can tell)
03:30 < denom> are you coming from a python background? some other language?
03:30 < carranca> denom: seems really complicate to refactor :P
03:31 < carranca> denom: c, c++, java, php
03:31 < denom> hmm, I would say that if you are concerned about this, you could create a central script to import all the dependencies, then import that central script 
03:31 < carranca> last year and a half in php
03:32 < carranca> mhmh, what you mean central script? i have the app.js
03:32 < tongcx> hi, in express, how do I server file.html with url '/'?
03:33 < tongcx> do i first use fs to read the file and then use res.end with the file?
03:33 < denom> carranca, make a script called `models.js` that builds up a namespace, that populates an object with all your models and then exports that namespace
03:33 < greg5green> in express?
03:33 < tongcx> yes
03:33 < carranca> denom: and that is the part I dont quite like, if im in there I would require('model/user.js') but if im in other directory that would change
03:33 < denom> carranca, you misunderstand me
03:34 < carranca> denom: probably, im new to node :P
03:34 < denom> you would `require('./models.js')` or `require('../models.js')` or something along those lines
03:34 < xdomox> okay so sockets again
03:34 < greg5green> tongcx: app.get('/', function(req, res) { res.sendfile('file.html'); });
03:35 < xdomox> do i use the socket authorization stuff to assign a user logon to the socket.io session 
03:35 < denom> carranca, the only other option I can see is to package your dependencies into a npm dependency
03:35 < carranca> and in that models i would require all my models, so the idea would be to later on call model.user model.whatever ?
03:36 < xdomox> for example: user logs in, add their id to the socket.io auth, use it to identify them later
03:36 < carranca> denom: I did that for a helper tool that I made for sharing precompiled view code between node and the server, and I liked that because of node nature, that seems more likely like a tool I can share in the future... but this doesnt make sense to put in npm
03:37 < carranca> denom: between node and the browser
03:37 < denom> carranca, typically for this kind of situation I export a function from "models/user.js" that a lets me pass in a namespace
03:38 < greg5green> tongcx, also, come join us in the express channel, #express :D
03:38 < carranca> denom: not sure what namespace is in this context, is that a node thing? plain js?
03:39 < carranca> denom: my ideal would be to have something like Java or kind of php namespaces class loader. Where I define the class loader paths once, and then get it by full name
03:40 < denom> carranca, a namespace in this case is a javascript object with all my models
03:41 < carranca> denom: got ya, so its the "central script" that you talked about
03:41 < denom> carranca, http://stackoverflow.com/questions/10860244/how-to-make-the-require-in-node-js-to-be-always-relative-to-the-root-folder-of-t
03:42 < denom> carranca, the method I have described is in the "Other workarounds"
03:42 < denom> (a common file that re-exports)
03:42 < carranca> denom: reading
03:44 < carranca> denom: I think I understood your technique better, jaajaja
03:46 < carranca> denom: so you normally create a central model npm package and put the different models in? or just include relative the central model?
03:48 < denom> carranca, I just cluster all my various require's into a central file usually called models.py or `models/index.py`
03:48 < carranca> py? 
03:48 < denom> sorry, finger slip
03:48 < denom> js
03:49 < carranca> :P
03:49 < denom> I use the `module.exports = function(namespace){ return namespace }`  to pass the namespace around
03:49 < denom> so like `my_namespace = require('models/user.js')(my_namespace)`
03:50 < ProLoser> how do i update a package in my project to it's latest version?
03:51 < denom> ProLoser, does `npm update` work?
03:51 < ProLoser> doesn't that go to the latest one defined in package.json?
03:51 < denom> ahh, there is a nuance there ;)
03:52 < denom> try `npm install <package name>@<version>` ?
03:52 < ProLoser> hmm
03:52 < ProLoser> i found out the latest version
03:52 < ProLoser> better question
03:52 < ProLoser> "~0.5.x"
03:52 < ProLoser> will that give me the latest version under 0.5?
03:53 < tongcx> greg5green, thanks a lot
03:53 < denom> ProLoser, not sure
03:54 < carranca> denom: the namespace thing is optional there, right? I just did an example where model/index.js has a exports.user = require("./user.js") then I can call in my controller model = require("../model") and it works... and at least I only have to move one reference around
03:54 < SomeoneWeird> npm install package@latest
03:54 < tongcx> do we still have 'sys.p'?
03:55 < denom> carranca, that is the way I like to do things, build up a namespace consistently--in one place
03:55 < carranca> not sure if I follow what the passing of the namespace does in this example
03:56 < denom> other people believe that each component (model) should be able to stand on its own merit,
03:56 < denom> carranca, you can modify, add to the namespace with each invocation of `require`
03:57 < carranca> but couldn;t i make that without passing it as an argument? aka namespace1 = require('../model'); namespace2 = require('../model')?
03:59 < denom> carranca, here is an example model file https://gist.github.com/anonymous/4942134
04:00 < denom> carranca, here is the "central" model file https://gist.github.com/anonymous/4942143
04:01 < denom> whoops, make that https://gist.github.com/anonymous/4942148
04:02 < carranca> denom: you are rewriting the my_namespace and also giving it as an argument... confusing to say the least :P
04:03 < denom> I prefer to be explicit that when I pass the namespace in, it is being modified....is it weird?
04:03 < carranca> denom: let me analyze again
04:04 < carranca> ok, got ya
04:04 < carranca> it is a little weird, ajaja
04:05 < groundwater> carranca: denom: i'm a bit late in the convo, but it looks like you might be talking about dependency injection
04:06 < carranca> groundwater: I was wondering if node.js had dependency injection as well...
04:06 < groundwater> carranca: there is not real framework
04:06 < groundwater> carranca: i used this model to a lot of success in my most recent project https://github.com/jacobgroundwater/federation/blob/master/lib/README.md
04:06 < carranca> groundwater: denom: but im kind of making my head that node is meant for being used more as a functional language than an OOP
04:07 < groundwater> carranca: the attached project uses that model, and i think it worked quite well
04:08 < asdf12> oh you changed your nick
04:08 < asdf12> hotornot guy
04:08 < groundwater> asdf12: ya
04:08 < groundwater> asdf12: wanted people to know it's me on irc
04:09 < groundwater> cuz i chat here, then i post on their github.. figure it's less confusing this way
04:11 < asdf12> it confused me
04:11 < asdf12> does that count
04:11 < groundwater> asdf12: you're always confused =p
04:12 < denom> groundwater, I see the pattern, but what I'm striving for disregards the "app" and focuses on a cohesive collection of functionality. e.g models have no notion of a controller
04:12 < neilk_> My app does a complicated calculation that, for pathological inputs, might take 10 seconds to return. It seems to me what I want is to communicate with a worker pool of some kind, so the app doesn't block for everyone. Recommendations on the best way? There seem to be many half-baked options.
04:12 < denom> carranca, javascript is an OO language (though I'm not sure what I've outlined is strictly OO)
04:13 < groundwater> denom: the app container is not retained by any models, they "pick off" which dependencies they need, which for a model only needs to be a "Database" object
04:13 < groundwater> denom: the single app container is just used to keep the pattern uniform
04:13 < groundwater> denom: most modules should pick off at most 3 dependencies, most will be 0-2 however
04:14 < cloudbender> I'm designing a 'blame-thrower' in node.js
04:14 < cloudbender> lol
04:14 < denom> groundwater, ahh I see. Then it is very similar to my approach. Except I pass the dependencies as explicit params
04:14 < neilk_> cloudbender: my friend used to joke that many big corporations work on BTP - blame transfer protocol
04:14 < cloudbender> A job manager that can assign jobs to other job managers
04:14 < cloudbender> lol BTP that's awesome
04:15 < carranca> denom: groundwater: my head hurts, jajaja
04:15 < groundwater> denom: i tried that at first, but i actually found the single app container felt a little nicer. i make up for it by 'plucking' from the container, and never retaining the entire app
04:15 < groundwater> denom: i wrap each pluck in an assert() so that it fails early if deps are out of order
04:15 < jaw187> anyone out there using the MongoDB client and connecting to a cloud database service?
04:15 < denom> groundwater, hmm...thinking about it now. It makes sense..
04:16 < groundwater> denom: the forge pattern also keeps a lot of details private, tucked away in the module. easy to refactor without breaking things
04:17 < asdf12> groundwater do you know about zeromq? is that a good solution for getting multiple workers to 'talk' to each other? or is that better suited for just having redis?
04:17 < denom> cool beans!
04:17 < groundwater> asdf12: we used axon instead of zmq, but zmq is cool.
04:18 < OTBS4Life> Can anyone explain Buffer/SlowBuffer?  http://stackoverflow.com/q/14009048/362536
04:18 < asdf12> its based on zmq so i guess its fine?
04:18 < groundwater> asdf12: redis also works well, unfortunately it all depends on specific use cases
04:18 < asdf12> i mean the guide is huge, so i couldn't figure out if my zmq server went down does that make my entire app go down?
04:18 < asdf12> does it have redunancy ?
04:18 < groundwater> asdf12: zmq has no servers, it's just a beefy socket, it's peer-to-peer
04:19 < asdf12> oh
04:19 < groundwater> asdf12: what is your use case?
04:19 < asdf12> so i'd have to keep a list of workers on my own
04:19 < asdf12> or else it'll never know who to connect to?
04:20 < asdf12> workers need to relay information back to my http server, a lot of information
04:20 < asdf12> kind of streaming information
04:20 < groundwater> no, you can do N-1 connections
04:21 < neilk_> I don't suppose anyone here has tried fibers? It seems to have gone 1.0.0 last month
04:21 < asdf12> yea but if i deploy a new worker, it'll have to know where to connect to it? because it wasn't there before
04:21 < groundwater> asdf12: does the worker need to respond during an HTTP request?
04:22 < groundwater> asdf12: the worker connects to the web server, the webserver has a single zmq socket that ALL workers conenct to
04:22 < asdf12> oh right but if i deploy another web server
04:22 < asdf12> then i'd still have to manage that yea? heh
04:22 < groundwater> asdf12: yes
04:22 < asdf12> i actually want to do 1-1
04:22 < groundwater> asdf12: there are ways to go N-N but it involes a central server
04:23 < groundwater> asdf12: actually same project, i tried to build a higher-level network on top of axon
04:23 < groundwater> http://underflow.ca/federation/
04:23 < groundwater> asdf12: haven't gotten it into production yet tho, so it's untested!
04:24 < asdf12> i was thinking this request comes in, it finds the worker that is designated, attaches event listener on the socket, which just relays the worker info to socket.io
04:24 < groundwater> asdf12: so each client has a persistent connection with 1 back end worker?
04:24 < asdf12> its pretty simple i think, i just never used zeromq
04:24 < asdf12> groundwater yea
04:25 < asdf12> well it wouldn't be a direct connection
04:25 < asdf12> client <-> server <-> worker
04:25 < groundwater> asdf12: right, but why not just let it load balance each 'emit'
04:25 < asdf12> hmm? load balance each emit?
04:26 < groundwater> each time the client emits a message, just shove the message into the socket. ANY worker can respond
04:26 < asdf12> oh no won't work for my case
04:26 < asdf12> i could forgo the whole zeromq thing and just run socket.io server on the worker but idk
04:27 < asdf12> and have the http server assign it which socket.io server to connect to on page load
04:27 < groundwater> asdf12: i generally avoid stateful data on servers.. is there a reason each worker needs to maintain its state with the client?
04:28 < groundwater> asdf12: usually you can move stateful data to redis, sql, mongo, etc
04:28 < groundwater> then it doesn't matter which worker responds
04:28 < asdf12> i feel like it'll be a waste of memory
04:29 < groundwater> well not on the workers, since they have no state between connections... do you mean on redis?
04:29 < asdf12> yes
04:29 < asdf12> well on the servers that will have to run redis
04:29 < groundwater> what kind of data are you working with?
04:30 < asdf12> the unimportant kind
04:30 < xdomox> so does anyone have any good articles/advice on socket.io and user login
04:31 < groundwater> asdf12: well, your call, but keeping server processes state-free can save you a lot of pain
04:31 < groundwater> asdf12: works better with load-balancing obviously, but also fault-tolerance
04:32 < groundwater> asdf12: there's less of an issue when a server process dies, most times it goes unnoticed
04:38 -!- mode/#Node.js [+o TooTallNate] by ChanServ
05:02 < tpayne> I'm detecting when Facebook hits my site to read its meta data, and I want to bypass my built in auth by just rendering some html.
05:02 < tpayne> How can I do this?
05:10 < mscdex> tpayne: put middleware higher up in the stack?
05:10 < tpayne> i'm going to do res.partial
05:13 < tpayne> excellent, thanks
05:32 < carranca> Im using ect for templating, and I dont seem to be able to reference a local package. My view is in base_path/views/some_view.ect, and in there I try to do a require ('../some_module') but its telling me it cant load :(
05:32 < carranca> If i do it from a controller in the same hierarchy i dont have a problem
05:38 < TJ-> I'm trying to fix a problem in the test suite: test-cluster-http-pipe.js is leaving the common.PIPE socket behind when the process and workers exit. Subsequent tests that also use common.PIPE then fail with EADDRINUSE because "test/tmp/test.sock" still exists. I 'assume' that process.exit() ought to cause objects to clean up after themselves.. in other words server.listen(common.PIPE, ...) should be closed cleanly. Anyone know if that is the case?
06:04 < harrisonm> What's the purpose of using !!?  Seems to me it just makes a useless cast to the boolean interpretation of whatever it's prefixing
06:07 <@Nexxy> harrisonm, with falsey values it can be a bit more than useless
06:11 < SomeoneWeird> [ '1', '', '2', 3 ].filter(function(i) { return !!i; });
06:11 < SomeoneWeird> only thing I use it for
06:12 < cloudbender> while being wonderful, callbacks present a challenge, in that somehow you need to be sure a thing is finished working before you proceed to another thing.
06:12 < SomeoneWeird> wat
06:24 < harrisonm> Ah, okay, I think I see the utility
06:24 < harrisonm> Got confused because I just saw it for the first time, and it's in a place where it's not really necessary
07:22 < asdf12> how do you guys usually test to see if a worker/server is heavily loaded and spawn a new worker/server ?
07:24 < asdf12> im sure it depend on each of your use cases but just interested to see if you guys do anything interesting
07:52 < jiang-plus> 
08:20 < asdf12> groundwater: ping
08:30 < sshaginyan> Has anyone install nginx with node.js?
08:31 < Ralt> yep, it works wonderfully.
08:31 < sshaginyan> Ralt: I'm trying to install it in os x
08:32 < sshaginyan> but I this file was never created for me /etc/nginx/sites-available/yourdomain
08:32 < SomeoneWeird> create it then
08:32 < sshaginyan> really nginx will know where to look for it?
08:32 < GreenDog> hmm, that reminds me of a ? I had today
08:32 < sshaginyan> DOn't I have to config something?
08:33 < GreenDog> I have an express app. Anyone know if it can forward requests to Apache if express 404s
08:34 < gildean> GreenDog: sure, create a route that does the redirect and put it below your valid routes
08:34 < GreenDog> i should say, forwards if route not found
08:34 < GreenDog> ahh redirect isn't what i'm looking for
08:35 < GreenDog> looking more for working like a proxy
08:38 < asdf12> do you guys ever find it weird
08:38 < asdf12> that you find yourself reading a blog post about someone else blog post who may or may not be writing about someone elses blog post
08:39 < asdf12> it is the circle of life
08:39 < [AD]Turbo> hi there
08:40 < asdf12> GreenDog: i believe the way to do is to do an http request to apache and respond with the response
08:41 < nb-ben> what do you do with sessions when the user does not accept cookies?
08:41 < nb-ben> just create a session for every request?
08:41 <@Nexxy> GreenDog, use mikeal's request module
08:41 < GreenDog> thanks asdf12, that was my best way to do it as well.
08:42 < asdf12> you tell them they suck, everyone likes cookies
08:42 < SomeoneWeird> nb-ben, res.end("you need cookies omnomnom")
08:42 < SomeoneWeird> lol
08:42 < CookieMonster> Cookies!
08:42 < asdf12> no you be quiet
08:42 < asdf12> SETTLE DOWN
08:42 < GreenDog> LOOKs interesting
08:43 < asdf12> i like cookie monster, but kids seem to prefer elmo
08:44 < asdf12> how come i dont have a blog?
08:45 < SomeoneWeird> dunno, i'll ask
08:45 < SomeoneWeird> asdf12, why don't you have a blog?
08:46 < asdf12> that'll be my first blog post, how come i dont have a blog
08:46 < asdf12> and i'll go through the possibilities
08:47 < nb-ben> SomeoneWeird, how do you know if a user has cookies?
09:16 < serdem> hey guys. there was another library like socket.io and faye. i forget. :S what was it?? :)
09:17 < GreenDog> sockjs
09:26 < unr3al011> hello
09:46 < josefrichter> guys, need help with install please. installed via brew, but hode --version still shows an older one, and 'which node' points to /usr/local/bin/node instead of the brew one. I'm not very familiar with this symlinking. can you help me please?
09:50 < aandy> josefrichter: do you have the location of the brew node? # ln -fs <path/to/brews/node> /usr/local/bin/node
09:56 < josefrichter> aandy Josef-MacBook-Pro:angular_test josefrichter2$ ln -fs /usr/local/Cellar/node/0.8.19 /usr/local/bin/node
09:56 < josefrichter> Josef-MacBook-Pro:angular_test josefrichter2$ node --version
09:56 < josefrichter> -bash: /usr/local/bin/node: is a directory
09:57 < Aartsie> Hi all
10:07 < shmoon> helo
10:07 < shmoon> node redis beginner here
10:20 < shmoon1> hi
10:29 < Sven_vB> hi
10:37 < bcave> hello. wanted to bounce an idea off everyone here. i have a webapp that I want to add in a URL shortening service to 
10:38 < bcave> its only for internal use. when a user visits www.mysite.com/adf2 it redirects to www.mysite.com/some-long-page-name
10:39 < bcave> i want to make it easy to manage and dynamic (not requiring node code changes). my initial thinking is to create a creation endpoint to add shortcuts that creates a lookup, and thinking either a database or distributed cache...
10:40 < bcave> what are your thoughts on persisting short urls outside of the nodejs codebase?
10:40 <@Nexxy> it sounds amazing and suddenly I want to buy 3 of them
10:40 < bcave> (i want to build this in a way that I can deploy my nodejs app to multiple servers in a cluster, so the lookup / redirect shouldn't be stored locally)
10:41 < bcave> AWS dynamoDB  maybe?
10:42 <@Nexxy> bcave, how many short urls are you planning on storing?
10:42 < bcave> not a large amount
10:42 < bcave> under 1000
10:43 <@Nexxy> why not use something like scuttlebutt
10:43 < bcave> dynamo is probably a bit overkill
10:45 < bcave> reading up on it now Nexxy, thanks
10:47 < bcave> just one thing i can't see from the docs (squizzing through the PDF now) is what protocols are used for replication
10:48 < Sven_vB> in the modules overview, I found modules to run NodeJS scripts in CGIs. are there also ones the other ways around, for serving CGIs from http.Server?
10:48 <@Nexxy> bcave, "gossip" protocol
10:49 < bcave> ah, ok
10:49 < bcave> thanks. so could use S3 ping for node discovery then
10:50 <@Nexxy> or even just mdns if you really want discoverability
10:51 < kakkeeee> i am getting the error how could i remove that   Error: .post() requires callback functions but got a [object Undefined]
10:52 < bcave> cool. thank you
10:53 < Sven_vB> oh, found one. it's a pity that node-cgi and node-cgi have the same name and only the first is listed in the modules overview. =)
10:53 <@Nexxy> Sven_vB, you could add it
10:53 < Aartsie> anyone knows if there is a jade channel ?
10:53 < Sven_vB> Nexxy, i'll go read the instructions how
10:53 < bcave> i think jjade is part of express
10:54 < bcave> Aartsie: try #express
10:54 < Aartsie> bcave: thank you :)
10:55 < Sven_vB> Nexxy, ok the instructions were not _that_ helpful. i think i'd have to register with and login to Github first?
10:55 <@Nexxy> yes
10:55 < Sven_vB> then it's not time yet for node-cgi to be added.
10:57 < kakkeeee> anybody foe my above error
10:58 < Sven_vB> kakkeeee, a good first step would be to paste your code on http://paste.ohai.su/ and share a link to it
10:59 < kakkeeee> Sven_vB: actually i am working on ecommerce ,so lots of file.when i run app.js show the following error
11:02 < Sven_vB> another way to start would be to iterate over all pseudoclass definitions and add a more informative toString method to their prototype, in order to make the above error message include hints towards its origin
11:03 <@Nexxy> if only errors came with some sort of... I don't know
11:03 <@Nexxy> stack trace?
11:04 < Sven_vB> Nexxy, with lots of "[object Undefined]", "anonymous function" and "<eval> line 1" ;D
11:05 <@Nexxy> lol
11:05 < TJ-> Any ideas? test suite TLS tests are asserting because they aren't getting as many errors as they expect!
11:14 < kakkeeee> Sven_vB:http://paste.ohai.su/1987/
11:17 < Sven_vB> kakkeeee, we'll need to see /node_modules/express/lib/router/index.js
11:22 <@Nexxy> akasha, I like your name
11:24  * pachet pretends they never made the movie version
11:25 <@Nexxy> what!
11:26 < pachet> it was like
11:26 < pachet> a series of music videos
11:31 < kakkeeee> Sven   :    http://paste.ohai.su/1988/
11:51 < shmoon> when user signs up, i store INCR id in user:id and then hset user:4 username foo, user:4:email foo@bar.com
11:52 < shmoon> my question is, if i want to find a user by username 'foo' how will i search ? or I want to find email of 'foo' username
11:52 < josefrichter> if I install node via home-brew, where should be npm located please? do I have to install it manually?
11:57 < Sven_vB> kakkeeee, looks like i'd need to dive even deeper, this time into /node_modules/express/lib/application.js
11:57 < Sven_vB> however... this will probably only leed to app.js
11:58 < Sven_vB> then in app.js there's probably the offending .post(), and we'd need to also see the requested URL to find out which of them it is
11:59 < Sven_vB> i wonder why express wouldn't tell more specifically which .post() leads to the error
12:01 <@Nexxy> Sven_vB, are you using the error handler?
12:01 < Sven_vB> Nexxy, no, i'm using kakkeeee's pasted snippeds to try and help him track a missing callback
12:02 < Sven_vB> Nexxy, would that imply that Express would help him track the error if he had set up an error handler? :)
12:03 <@Nexxy> well possibly
12:03 < Sven_vB> kakkeeee, then setting up an error handler might be the more effective way.
12:04 < gildean> doesn't the errormessage say that the problem is on application.js line 412
12:04 < Sven_vB> gildean, yes, but the path there suggests that application.js is a lib that ships with express and is probably well tested
12:06 < gildean> ah, so it is, didn't read carefully enough
12:06 <@Nexxy> if you app.use(function(err, req, res, next) { console.log(err); }); at the end of your routes
12:06 <@Nexxy> you might get some more information out of the app
12:07 < gildean> i'd imagine the problem is that there's an app.post('/something', notFunction); where the notFunction isn't actually a function
12:07 < Sven_vB> if i had github i'd file a feature request to Express to check .post()'s callback for this
12:07 <@Nexxy> Sven_vB, why don't you?
12:08 < Sven_vB> it looks to me as if the error is delayed by testing for it too late. if it was tested that early, chances seem that the offending .post() call would be at the end of the trace.
12:09 < Sven_vB> sorry, misread the "don't". my password manager is down for maintainance
12:09 <@Nexxy> lol
12:09 <@Nexxy> password manager?
12:09 <@Nexxy> you mean your mind?
12:10 < Sven_vB> nope, my mind only stores the master passwords
12:10 <@Nexxy> how many of those do you remember?
12:11 < Sven_vB> dunno... i don't have a full list, it's more like my fingers know them when i need them
12:11 <@Nexxy> I am reminded of http://xkcd.com/936/
12:12 <@Nexxy> "through 20 years of effort, we've successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."
12:15 < Sven_vB> well in github's case, they'll probably sometime make an API where my bot signs a challenge with my secret SSH key, sends the response to my browser and github checks against the public SSH key they have anyway. or they add another supported command to whatever handles my git's SSH connections that sends me a one-time login token via SSH.
12:17 < Sven_vB> the latter one sounds so cool i'll have to add that to some websites right now.
12:17 < SomeoneWeird> lmao
12:39 < shmoon> anyone ?
12:41 < shmoon> user sign up i create id with INCR add it to a set - sadd user:id 4 - then save username and email like - hset user:4:username foo, hset user:4:email foo@bar.com - how can i get the email of 'foo' username now ?
12:42 < SomeoneWeird> you're using redis like mysql
12:42 < SomeoneWeird> you shouldn't
12:51 < Morkel> Does anyone know who i can find the docs for JSON.parse ?
12:53 < gildean> Morkel: for example: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse
12:53 < Morkel> gildean: Thx
12:53 < xdomox> fucking hell
12:53 < xdomox> I'm still stuck on socket.io user authentication
12:55 < gildean> xdomox: https://github.com/LearnBoost/socket.io/wiki/Authorizing
12:56 < xdomox> yeah i know, but i just don't get it
12:56 < xdomox> like
12:56 < xdomox> when a user logs in and it auths with MySQL all i need to do is attach their id to the socket right?
13:11 < aandy> or to the handshakeData? (socket.handshake)
13:15 < Sembiance> wow. Was surprised to read this morning that Opera is switching to Webkit!
13:16 < DoNcK> hello
13:24 <@Nexxy> \o/
13:26 < Sembiance> jackyalcine: you've got some sort of bug, your nick is changing ever couple minutes
13:27 <@Nexxy> Sembiance, maybe they just have a very unique sleep schedule
13:28 < Sembiance> hehehe
13:28 < Sembiance> I just set irssi to ignore nick changes ;)
13:28 <@Nexxy> Sembiance, oh cool
13:28 <@Nexxy> I didn't even notice with all the connect/join/part spam
13:28 <@Nexxy> but maybe you already have that off
13:28 < leehambley> hi all, can anyone levy a reason why assert.equal(typeof(thing.function), 'function') would cause mocha to timeout when thing has no property `function` ?
13:29 < leehambley> I'm sure there's a reason, but this is nodejs day one for me
13:29 <@Nexxy> leehambley, welcome and congratulations
13:29 < leehambley> thanks Nexxy
13:29 <@Nexxy> is typeof a function?
13:29 <@Nexxy> try it w/o the parentheses?
13:29 < leehambley> do I mean kindof ?
13:29 <@Nexxy> try
13:30 < Sembiance> Nexxy: yah, already had joins, parts and quits off. So nick change spam was the only thing still missing ;)
13:30 <@Nexxy> assert.equal(typeof thing.function, 'function')
13:30 <@Nexxy> Sembiance, haha yeah
13:30 < leehambley> seems like it can be used with parens, even though it's an operator
13:30 < leehambley> (we're in coffeescript for better or worse)
13:30 <@Nexxy> I would turn them off myself but then I wouldn't be able to make a bit deal out of mikeal joining the channel
13:30 < leehambley> even with Chai's assert.typeOf() it still hits the timeout if the object passed doesn't have that property
13:31 <@Nexxy> leehambley, interesting
13:31 < leehambley> I wondered if there was some built-in waiting in assert, incase the object might *get* that property that I was missing
13:31 < leehambley> (in a way that some functional testing tools wait for ajax elements to appear)
13:31 < Sembiance> leehambley: tests eh? hehe  I tried doing tests for my javascript once (used vows)... it was fun for a bit, but honestly didn't see much point in it. I guess if I had absolutely critical code, or had test coverage over almost everything, but I guess I'm still in the "Tests are more trouble than they are worth" camp ;)
13:31 <@Nexxy> I doubt it but I don't have any experience with mocha/chai
13:32 < leehambley> Sembiance, Nexxy: thanks
13:32 < leehambley> this is sortof critical :-)
13:32 <@Nexxy> Sembiance, it's nice for when there are lots of people working on something
13:32 < leehambley> and I'm from the "test all the things" (aka Ruby) camp
13:32 < Sembiance> Nexxy: ahh yes, I would agree with you there
13:32 <@Nexxy> leehambley, I'm sure someone here knows if you stick around
13:32  * Sembiance is all alone with his coding projects.
13:32 < leehambley> cheers, I'll keep digging until my pairing partner gets back, and see what's up
13:33 <@Nexxy> oh pair partner
13:33 <@Nexxy> you're deep in the camp too!
13:33 <@Nexxy> way in the back where they just rail the koolaid granules directly ;P
13:33 <@Nexxy> ... get it?
13:33 <@Nexxy> rail?
13:34 < leehambley> :-)
13:36 <@Nexxy> http://i.qkme.me/3sz2jv.jpg
13:37 < DarkArgon> haha
13:37 < SomeoneWeird> haha
13:42 < TJ-> leehambley: I don't see any waiting going on. lib/assert.js is pretty simple.
13:42 < leehambley> yeah, it's just weird - if the oject has a property, matching or refuting the assertion, it works fine
13:42 < leehambley> if the object doesn't have that property, then it hits the mocha timeout
13:43 < leehambley> I can't be the first person to make a typo, and wonder why his test is suddenly taking 9,000x longer to run to an error :-)
13:43 < zdwolfe> Working on a website using express.  I'm wondering what the best method to start a processing 'thread' in Node is. For instance, hitting a URL will run a function that may very well not complete for a few hours, but I want to respond to the user that his request was handled
13:44 <@Nexxy> zdwolfe, child_process.fork perhaps?
13:44 < gildean> zdwolfe: spawn a separate process to handle the thing and just answer normally? or something like that
13:45 < zdwolfe> Nexxy: Good idea. I was wondering if there was a way to avoid spawning a new process
13:45 < TJ-> zdwolfe: use a worker - see http://nodejs.org/api/cluster.html
13:45 <@Nexxy> zdwolfe, spawn a fixed # upon app initialization
13:47 < TJ-> There is - somewhere on the wiki or blog - a great discussion on how to deal with long-running, blocking, functions
13:47 < zdwolfe> Sweet, thanks
13:51 < tongcx> do we still have 'sys.p'?
13:52 < tongcx> second question: what does "methodOverride" do?
13:52 < TJ-> zdwolfe: This talks about the issue: http://blog.nodejs.org/2011/10/04/an-easy-way-to-build-scalable-network-programs/
13:55 < zdwolfe> TJ-: thanks. 
13:55 < zdwolfe> I ran across the webworker library (https://github.com/pgriess/node-webworker). Do any of you have experience with this?
13:55 < zdwolfe> I think it might be the solution I'm looking for
13:57 < AviMarcus> TJ-, are there docs about the --balance thing it mentioned?
14:10 < TJ-> AviMarcus: It's really weird! There's nothing in the source-code and running "node --balance" says unknown option
14:11 < AviMarcus> TJ-, perhaps that evolved into the cluster unstable module
14:12 < TJ-> I think so, but surprised there's no mention in source ("this feature replaces the --balance command-line option")
14:13 < TJ-> I've been having a fight with the cluster unit tests earlier so I've got pretty friendly with it :p
14:14 < rdpanek> Hi, I have a problem with the API
14:14 < rdpanek> when you request a PUT
14:14 < rdpanek> Can not get PUT
14:15 < rdpanek> Cannot PUT
14:15 < rdpanek> use express, express-resource
14:15 < rdpanek> What could it be?
14:15 < rdpanek> specifically Cannot PUT /users
14:18 -!- mode/#Node.js [+o isaacbw] by ChanServ
14:18 < AAA_awright> TJ-: I'm pretty sure there never *was* a --balance option
14:18 < rdpanek> tak za hoďku by jsme vyjeli od kanclu, zaparkujem ve foru a sli by jsme ke slonovi?
14:18 <@isaacbw> rdpanek, english, please
14:18 < rdpanek> sorry
14:19 <@isaacbw> np
14:19 < rdpanek> another window
14:20 <@isaacbw> ah
14:21 < rdpanek> example https://gist.github.com/Radim-Daniel-Panek/4944919
14:24 < conne> rdpanek: Do you have the methodOverride middleware enabled ?
14:24 < rdpanek> GET and POST requests pass, but not PUT and DELETE
14:25 < conne> Yeah because get and post work out of the box.
14:25 < conne> The RESTfulness is optional.
14:25 < rdpanek> how?
14:25 < tongcx> is it possible to make a connection with socket.io with curl or telnet?
14:26 < rdpanek> is it possible to make a connection with socket.io with curl or telnet?
14:26 < rdpanek> ou
14:26 < rdpanek> curl
14:26 < tongcx> plainly curl will only give me "welcome to socket.io", and on server side, no connection is established
14:26 < tongcx> so how?
14:27 <@Nexxy> tongcx, no
14:27 < tongcx> Nexxy, what do you mean?
14:27 < rdpanek> I do not understand what to do. I am a beginner in nodejs
14:27 <@Nexxy> I mean you can't use socket.io with curl
14:28 < tongcx> Nexxy, how about telnet and netcat?
14:28 < `3rdEden> while(true) curl the shit
14:28 < `3rdEden> Nexxy: it's possible to use curl
14:28 < `3rdEden> handshaking in a HTTP requests
14:28 < `3rdEden> and if you just connect using HTTP polling after the handshake
14:28 < `3rdEden> it could work
14:28 <@Nexxy> lol 
14:28 < `3rdEden> but it's pointless
14:29 < `3rdEden> and not adviced..
14:29 <@Nexxy> leonardo, having trouble with your nickname? 
14:29 < `3rdEden> but definitely possible
14:29 < tongcx> i just tries "while true", it doesn't work
14:29 < `3rdEden> netcat and telnet would also work if you can type in binary and create websocket frames from scratch
14:29 <@Nexxy> rofl
14:29 <@Nexxy> just stop
14:29 < leonardo> Nexxy: yes, hoping i've solved now
14:30 <@Nexxy> leonardo, \o/
14:30 < tongcx> 3rdEden, could you show me some code to make curl work?
14:30 < rdpanek> and how can I solve my problem?
14:30 < tongcx> is your nick 3rdEden or `3rdRden?
14:30 < mscdex> node.js rules!
14:31 < rdpanek> https://github.com/visionmedia/express-resource
14:31 <@Nexxy> mscdex, do you have \o/ on hilight or something?
14:31 < mscdex> no
14:31 <@Nexxy> oh ;x
14:31 < mscdex> i probably should though
14:31 <@Nexxy> lol ya
14:32 < freewil> im working on a module for express (peer dependency) and would like to run tests against both express 2.x and 3.x - should i create a different version number for 2.x or is there a way to juggle between 2.x and 3.x and run tests easily?
14:32 < mscdex> anyone here use node on a digitalocean vps?
14:33 < `3rdEden> tongcx: the spec is described in github
14:33 < `3rdEden> and you can find out how curl works on gooogle
14:33 < `3rdEden> https://github.com/learnboost/socket.io-spec
14:33 < tongcx> `3rdEden, aha, thanks
14:40 < cloudbender> When I use process.nextTick, is my event placed last in order versus what is already scheduled on the loop ?
14:41 <@isaacbw> any experience here with node-cassandra-client?
14:43 < cloudbender> I'm thinking maybe I can't be guaranteed of a firing order.
14:43 < mscdex> cloudbender: iirc nextTick items are placed in their own queue which gets executed after any I/O events, timers, etc. at the end of the current tick
14:43 < cloudbender> I asked a bad question.
14:44 < cloudbender> What I meant was: of I place 2 or more events on the loop will THEY fire in order.
14:44 < cloudbender> ... if I ...
14:45 < cloudbender> But I should not code that way anyway.  Loop's business is it's own.
14:46 < tongcx> `3rdEden, could i query you?
14:46 < mscdex> cloudbender: events? like EventEmitter events or nextTick?
14:47 < cloudbender> process.nextTick
14:48 < cloudbender> which brings up another question.
14:48 < cloudbender> when I 'emit
14:48 < mscdex> cloudbender: when you do process.nextTick() it appends the function to an array
14:48 < cloudbender> OK
14:49 < mscdex> then at the end of the tick, after any I/O happens, those functions are executed in order
14:49 < cloudbender> when I emit, is it the same case ?
14:49 < mscdex> emit happens immediately
14:49 < mscdex> but yes, the event handlers are called in order
14:49 < cloudbender> so emits are not scheduled onto the loop, they are a direct call ?
14:49 < mscdex> correct
14:49 < cloudbender> ah.
14:50 < cloudbender> so then they have a return
14:50 < cloudbender> to OZ I guess ...
14:53 < ahungry> hi all
14:54 < DarkArgon> hi
14:56 < sshaginyan_> Guys how is node.js considered light weight if a new process is created for every request/response?
14:56 < sshaginyan_> is the process lived shorter than the thread on average?
14:57 < crabtree> sshaginya_: where'd you get that idea
14:57 < shapeshed> node runs on a single process
14:57 < mmalecki> sshaginyan_: node.js doesn't create a new process
14:57 < sshaginyan_> mmalecki: cluster module 
14:57 < mmalecki> nope
14:57 < mmalecki> it only creates few processes
14:58 < sshaginyan_> ….. cluster.fork() starts a new process doesn't it?
14:58 < sshaginyan_> I have control of that
14:58 < mmalecki> it does. but you're not supposed to do it on each request
14:58 < mmalecki> you only do that once, during startup
14:58 < sshaginyan_> mmalecki: Yes I understand
14:59 < sshaginyan_> but even then
14:59 < bnoordhuis> ...
14:59 < sshaginyan_> lets say I created a 1000 processes
14:59 < sshaginyan_> how would this be better then threads in jboss/tomcat?
14:59 < mmalecki> you are not supposed to create 1000 processes.
14:59 < DarkArgon> u don't create 1000
14:59 < shapeshed> node is single threaded
14:59 < bnoordhuis> unless you have a 1000 cpus
14:59 < mmalecki> create as many processes as CPUs you have
15:00 < shapeshed> instead of a new thread it uses an event loop
15:00 < cloudbender> aha! I can have the emitted event use process.nextTick to place it's work back onto the loop, and go away.
15:00 < sshaginyan_> …. what about context switching?
15:00 < sshaginyan_> what if there are more connections then cores?
15:00 < sshaginyan_> at once
15:00 < DarkArgon> no blocking
15:01 < shapeshed> for fast operations node is a good fit
15:01 < shapeshed> as it processes operations one at a time
15:01 < sshaginyan_> if it's non blocking then why even create process 
15:01 < sshaginyan_> processes*
15:01 < DarkArgon> to not only use 1 core
15:02 < sshaginyan_> DarkArgon: Lets go over the though process. Lets say there are 100 people trying to concurrently request something from the server.
15:02 < sshaginyan_> I have 8 cores lets say
15:03 < sshaginyan_> Does the operating system queue the other 92 people?
15:03 < cloudbender> ? Assertion : node may not utilize cpu cores, but V8 does.  check yes[ ] or no [ ].
15:03 < spion> sshaginyan, as soon as the first request encounters the first I/O operation, the server will continue with the second person.
15:03 < bnoordhuis> sshaginyan_: you spawn ~8 worker processes. node / the os divides the load over those 8 processes
15:04 < guor> each v8 isolate lives on a single thread
15:04 < guor> but that may change
15:04 < nv-ben> nay, node may utilize one thread of one core
15:04 -!- mode/#Node.js [+o isaacbw] by ChanServ
15:04 < nv-ben> that is, with today's common hyperthreading, usually one half of a core
15:04 < guor> there are experiments with parallel gc and parallel compiling
15:05 < guor> so don't count on v8 being single threaded
15:05 < bnoordhuis> there's also v8's profiler thread but it doesn't really matter in the grand scheme of things
15:06 < guor> ah yes, but it doesn't really do much except for sending periodic SIGPROF
15:06 < shapeshed> sshaginyan: are you getting at the difference between event loops and threads 
15:07 < shapeshed> or do you want to understand what node/V8 does under the hood?
15:07 < sshaginyan_> So the operating system will distribute the load amongst the 8 cores? But v8 holds a queue of all the requests and as soon as a single I/O operation occurs on a thread another request id popped from the queue?
15:07 < sshaginyan_> shapeshed: yes
15:08 < ckknight> sshaginyan_: it'll only distribute to other cores if you're running in a cluster (which is pretty easy to do in node)
15:08 < sshaginyan_> what node/v8 does under the hood
15:08 < guor> there is no multithreading with v8.
15:08 < guor> javascript is inherently single threaded
15:08 < sshaginyan_> yes I uderstand....
15:08 < sshaginyan_> single threaded got it
15:08 < sshaginyan_> but........
15:08 < sshaginyan_> it's not just magic
15:08 < guor> you can choose to have node run multiple independend threads/processes, I guess, but I have no idea about that
15:09 < bnoordhuis> sshaginyan_: is to. libuv magic
15:09 < bnoordhuis> what happens is that the processes are waiting for incoming connections on a shared socket
15:09 < sshaginyan_> I just need a simple explanation of how node.js handles many many requests. I understand it's single threaded.
15:09 < bnoordhuis> when a new connection comes in, one of the processes wakes up and accepts it
15:10 < DarkArgon> http://howtonode.org/understanding-process-next-tick maybe this?
15:10 < sshaginyan_> okay what if there are more requests than cores
15:10 < bnoordhuis> if all the processes are busy, the connections queue up
15:10 < sshaginyan_> are the requests queued somewhere?
15:10 < bnoordhuis> that's what the backlog is for
15:10 < sshaginyan_> wow thank you
15:10 < cloudbender> tasks are queued I think
15:10 < bnoordhuis> connections, not tasks
15:12 < Voting> I am at a company which has started to use node.js and express. I am good with javascript but am new to node. Advice on what materials (tutorials, etc.) I should be using to come up to speed would be great. Thanks! 
15:12 < cloudbender> I need to read more before I flap my cake-eating pie hole.
15:12 < DarkArgon> i want express.session only for authenticated users. any advice?
15:13 < amurdaca> what's the difference between setting a secret string in express.cookieparser and in express.session?
15:13 < sshaginyan_> what are v8 isolates again?
15:13 < cloudbender> Voting, start with the node.js API docs, which have a refreshingly absolute lack of bullshit.
15:13 < sshaginyan_> If I use cluster will each process have it's own v8 isolate?
15:13 <@isaacbw> each process will be completely separate
15:14 <@isaacbw> as far as v8 is concerned
15:14 < amurdaca> isaacbw do you know the difference between setting a string key for express.sessions and another one in express.cookieparser?
15:14 < Voting> cloudbender: thanks! Any other advice? 
15:14 < sshaginyan_> that's by doing cluster? Each process will have a v8 instance?
15:15 <@Nexxy> othiym23, ping!
15:15 < bnoordhuis> sshaginyan_: yes. an isolate is a complete, independent v8 vm, more or less
15:15 < sshaginyan_> k
15:15 <@isaacbw> amurdaca, I don't really know express
15:15 < amurdaca> thanks though :)
15:16 < cloudbender> oting Watch out for outdated references and examples on the internet.  Some are old, buggy, entirely false, or the result of a late night assumption-fest.
15:16 <@isaacbw> :(
15:16 < amurdaca> does someone know the difference betweeb setting a key in express.sessions and another in express.cookieparser?
15:16 < MI61> joyent/node: Ben Noordhuis master * 7bdd05b : stream_wrap, udp_wrap: add read-only fd property  Expose the file descrip (+2 more commits) - http://git.io/E5tYqg
15:18 < owen1> after i make async call to my db my program crashes (in the main thread). is the async operation dies immediatly when the main thread dies?
15:19 < mscdex> owen1: crashes how? segfault? exception?
15:19 < sshaginyan_> isaacbw: Lets say I have an application where I'm it's getting a json from another service parsing/cleaning it and then serving it
15:19 < owen1> mscdex: exception
15:19 < sshaginyan_> wouldn't the getting of that json object from another server be a blocking operation?
15:20 <@isaacbw> sshaginyan, why do you think that
15:20 < sshaginyan_> isaacbw: Because I need the full json to do any operation on it
15:21 < sshaginyan_> so I have to wait for response.on('data') to finish before I can start using my json
15:21 < sshaginyan_> isn't this considered blocking?
15:23 < sshaginyan_> ?
15:24 <@isaacbw> no it isn't
15:24 < gildean> you actually need to wait for the 'end' event, and no, that's not blocking, the cpu can do other things between the data-events
15:24 < sshaginyan_> k
15:27 < pachet> amurdaca: for the purposes of collating a client cookie with a connect SID, they are equivalent
15:28 < amurdaca> pachet
15:28 < amurdaca> so if i use cookiparser
15:28 < amurdaca> wait
15:29 < spion> sshaginyan_,  so basically you eliminate the need for threads when doing I/O. But you're still using some CPU (e.g. to serialize to JSON or call template rendering functions) so multiple processes are still beneficial (although you don't need as many as you need threads with blocking I/O)
15:30 < sshaginyan_> spion: But the number of process is not a variable from what I understand you have to use os.cpus().length
15:31 < spion> i... wouldn't quite say that.
15:31 <@Nexxy> you don't have to
15:31 < sshaginyan_> I mean not have to but it's best practice?
15:31 <@Nexxy> not necessarily
15:31 < sshaginyan_> How fast is context switching?
15:32 < sshaginyan_> Is that variable should I play around with my application to get best results?
15:32 < spion> there are benefits to running more processes than cores. if for some reason you start having many blocking CPU operations even though your CPU is maxed out you would still be able to take care of requests that can be quickly handled with less CPU.
15:32 <@Nexxy> sshaginyan_, most likely
15:32 < spion> although if you get  to the point you will most certainly need more machines soon
15:32 < sshaginyan_> k
15:33 < sshaginyan_> spion: Are you in SF?
15:33 < spion> no
15:34 < spion> (Europe :)
15:34 <@isaacbw> do you guys know any patterns for combining RESTful requests into a single HTTP request to avoid lots of requests when requesting a handful of resources?
15:34 <@isaacbw> the alternative is to depart from RESTful patterns and have something like a list in a POST body
15:34 < spion> isaacbw, no, but SOAP has that
15:34 <@isaacbw> or query string
15:34 < spion> :D
15:34 < sshaginyan_> spion: Close enough
15:34 <@isaacbw> spion, xml :C
15:34 < spion> yeah I know.
15:35 < gildean> isaacbw: it's not like restful actually means something, just do what you need to do
15:35 <@isaacbw> but it does appeal to my primitive need for simplicity
15:35 <@isaacbw> it *feels* good
15:35 <@isaacbw> mmmmm
15:35 <@isaacbw> that's right
15:35 <@isaacbw> PUT request?
15:35 <@isaacbw> yea, you can PUT that right here
15:36 <@isaacbw> though honestly rest does seem a bit gimmicky
15:36 < gildean> well have a different route for '/multi' that takes an array of objects instead of just one object
15:37 <@isaacbw> I might just throw up my hands and have a single http entry point and use json for everything
15:37 <@isaacbw> rfc
15:37 <@isaacbw> er
15:38 < pachet> oh you want a restful api? GETtfo
15:39 < pachet> ^ internal monologue
15:39 <@isaacbw> rpc
15:40 < bradleymeck> isaacbw: depends on what kind of requests, http multipart will ruin most batching stuff
15:40 <@isaacbw> hmm
15:41 <@isaacbw> maybe I could have REST-ish urls inside a json rpc sort of message
15:42 <@isaacbw> so have both proper http restful urls and an rpc entry point for batch calls
15:42 <@isaacbw> *uris
15:43 <@isaacbw> I'm not sure what the REST would get me except web hipster cred
15:43 < MI61> joyent/node: Dan Kohn v0.8 * 2e1ebbf : doc: add prompt to fix repl_test.js example  Running repl.start without t - http://git.io/WCT0kQ
15:44 < bradleymeck> isaacbw: my recommendation: /batch , accepts JSON matching: [{method:…,headers:…,body:…}], attached files MUST be names request[i] where i matches the [] index of the request, returns : [{statusCode:…,headers:…,body:…}], but this means you will have to buffer ALL the requests before sending it back
15:44 < bradleymeck> all rest gets is me reading your API and not vomitting as a dev or consumer of the API
15:45 < brycebaril> isaacbw: the same thing any standard API style gets you -- an easier ability for other people to use it.
15:46 <@isaacbw> so I found a service that basically does exactly what the tech I've been developing does
15:46 <@isaacbw> and I'm really fighting the urge to use it, because I know in the long run I won't have the flexibility I need
15:46 <@isaacbw> but man, is it difficult
15:46 < brycebaril> If your use case really is anyone with any language, you'll want to pick a standard
15:46  * bradleymeck wishes AJAX could actually fill out files back to IE 6
15:47 < yuho> isaacbw: it's an odd feeling when you work on something and discover it's made by someone else
15:48 < yuho> i've had it happen a few times, usually the other project has started when i've started, i just get more distracted :)
15:48 < yuho> but i figure it's a load off my back
15:48 <@isaacbw> well, I've been developing both a frontend and a backend, and this service (context.io) can basically be a plug-in replacement for my backend
15:48 <@isaacbw> so I still have a product
15:49 < yuho> and competition isn't bad
15:49 <@isaacbw> but if I ever want to change that backend, I'll be sol
15:49 <@isaacbw> that's true yuho
15:50 < pachet> unless the competition beats you
15:50 < yuho> well then you pivot ;)
15:52 <@isaacbw> I'll probably finish this project and then realize I'll be better off being a resource provider than a saas and throw out all the frontend work I've been doing for the last half year
15:53 <@isaacbw> or decide I don't care about my soul very much and turn it into a crm product
15:54 <@isaacbw> we need another *aaS term for data/resource providers
15:54 <@isaacbw> which offer an API, but no client
15:56 <@isaacs> ircretary: tell mamadero Yeah. That's not a security problem unless you leak the .npmrc file somewhere. So don't do that. npm needs that info to log in. It also stores a session cookie there.
15:56 < ircretary> isaacs: I'll be sure to tell mamadero
15:57 < yuho> what a good little bot
16:01 < Voting> I see that node says "debugger listening on port 5858" when I start with --debug mode on but do I connect to that port with telnet? A browser or what? (Clearly I'm new here...) 
16:03 <@isaacbw> how do you usually tie push updates in cleanly with a RESTful API? Long polling on a resource URI?
16:03 <@isaacbw> you as in you
16:04 < AAA_awright> isaacbw: You don't
16:04 < AAA_awright> Well
16:04 < AAA_awright> isaacbw: You register a URL to be pinged when the status of something changes, and you have an HTTP server to listen for it
16:04 < C0deMaver1ck> anybody had issues with web sockets in Chrome? I've been reading this article which seems to be exactly what I'm experiencing
16:04 < C0deMaver1ck> http://www.joezimjs.com/javascript/are-websockets-slow-on-chrome/
16:04 <@isaacbw> I mean for a client
16:05 < AAA_awright> And when you get that ping, then you make a new GET request to confirm the details of that status change
16:05 < bradleymeck> isaacbw: don't try do a webhook or websocket
16:05 < AAA_awright> For a web browser?
16:05 <@isaacbw> mhm
16:05 <@isaacbw> well, no
16:05 < bradleymeck> socket.io emulation is enough and will deal with all the nasty
16:05 <@isaacbw> but for a client
16:05 < bradleymeck> also websocket clients are available for the cli
16:05 < AAA_awright> Well that is a client
16:05 <@isaacbw> any client
16:05 < AAA_awright> That's the strictly stateless, REST way to do it
16:05 <@isaacbw> bradleymeck, alright
16:05 < Voting> why would node.js feature DNS stuff so highly in the docs? 
16:06 < SomeoneWeird> ?
16:06 < AAA_awright> isaacbw: For web browsers just use a technology for pushes like Websockets (Socket.io for instance)
16:06 < SomeoneWeird> alphabetically... Voting ?
16:06 < AAA_awright> isaacbw: Though there is browserver, for HTTP servers in the web browser
16:06 < AAA_awright> Check it out
16:06 <@isaacbw> oh neat
16:07 < AAA_awright> That's probably more work than you want
16:07 <@isaacbw> I probably don't want that though
16:07 < bradleymeck> C0deMaver1ck: be sure w/e proxy you are behind actually supports it, be sure socket.io is not falling back for some obscure reason, be sure chrome is not doing som evil bundling before transmission
16:08 < bradleymeck> and no I personally have not seen issues
16:08 < bradleymeck> we get upset if we break 20ms delay at work
16:10  * SocketLover hi
16:14 < bradleymeck> whats the curl syntax to change the name of a file… uggg
16:14 < bradleymeck> as you post*
16:18 < cloudbender> (require('unfuglify')).unpugfugly(this);
16:21 <@isaacbw> unpugfugly
16:22 < gkatsev> puglify
16:23 < gkatsev> turn code into a pug.
16:23 < gkatsev> that needs to happen now.
16:23 < pachet> !g compile to php
16:24 < pachet> the last p is for pug, i'm pretty sure
16:24 < C0deMaver1ck> thanks bradleymeck
16:24 < strk> is there a way to "attach" a running node.js application and take a look at variables without stopping the service ?
16:24 <@isaacbw> does a length of zero in fs.write use the whole buffer?
16:25 < gkatsev> strk: http://stackoverflow.com/questions/13052548/node-js-how-to-attach-to-a-running-process-and-to-debug-the-server-with-a-conso
16:25 < tongcx> in javascript, can i omit the first arg and specify the second?
16:26 < SomeoneWeird> of course
16:26 < gkatsev> tongcx: you'll need to pass in some value for the first argument, `null` for example.
16:26 < brycebaril> function(undefined, secondArg); ?
16:26 < daekano> tongcx: or use an options array
16:26 < SomeoneWeird> fn(null, 'something')
16:26 < SomeoneWeird> use null, not undefined
16:26 < daekano> or even false and check its type for boolean 
16:26 < daekano> up to you
16:26 < SomeoneWeird> anything that's not 'undefined'
16:27 < brycebaril> SomeoneWeird: why no undefined?
16:27 < SomeoneWeird> because passing "null" or something else means you explicitly ment to leave the first options blank
16:28 < pachet> i think null is the idiomatic choice
16:28 < mscdex> i use undefined :-D
16:28 < SomeoneWeird> >.<
16:28 < pachet> sounds like a pain to debug
16:28 < mscdex> not really
16:29 < SomeoneWeird> http://stackoverflow.com/questions/6604749/what-reason-is-there-to-use-null-instead-of-undefined-in-javascript
16:29 < bradleymeck> null == painful when using typeof == object
16:29 < mscdex> you shouldn't be doing type checking on the error argument anyway
16:29 < bradleymeck> but useful to see if it was explicit
16:29 < mscdex> just do if (err) { }
16:29 < SomeoneWeird> and you shouldn't be using == either
16:30 < brycebaril> Yes, I agree with the top answer there -- if I'm going to make it a property of an object where I don't want the key to go away, sure I like null better
16:30 < bradleymeck> i should be using == against null
16:30 < bradleymeck> if you === null i cut you
16:32 < tongcx> there is json doc on nodejs, can vim use that?
16:34 < tongcx> or do you know any ide use that?
16:34 < bradleymeck> tongcx: http://nodejs.org/docs/latest/api/index.json from the docs page, "view as json"
16:35 < bradleymeck> tongcx: cloud9 works pretty well, as does eclipse with plugin, or komodo
16:35 < tongcx> bradleymeck, nice, do you know any vim plugin to use that?
16:35 < bradleymeck> no
16:36 < tongcx> thanks
16:41 < pachet> using express, is there a way to render a specific template without a layout, even if i'm using layout for the majority of .render() calls?
16:42 < pachet> basically it'd be as if i'd passed layout:false to the configuration, but only for that specific call to .render()
16:42 < pachet> i know i can pipe stuff to the template in question manually and just res.send it off when done
16:43 < pachet> i was just wondering if there's a way to not have to give up the consistency of res.render() being my point of exit :[
16:43 < DarkArgon> express itself has no layout support
16:43 < DarkArgon> you template engine has
16:43 < brycebaril> Your templating engine probably has a flag that will say 'no layout please'
16:43 < aandy> any of you superstitious? like adding a require('doomsday') at end of main js files? exports = function() { return if (true === false) { throw new Error('The Machines have risen'); }
16:43 < cellvia> lol
16:44 < aandy> pachet: can't you run a "null" layout and have a "psuedo layout". the former to default to no layout, the latter to be "extend"'ed in your templates that actually needs it?
16:44 < brycebaril> aandy you should make an api that the doomsday module checks periodically. if the api returns true it is activated... but then how will you know that they haven't compromised your api?
16:44 < cellvia> what is the best way to build a dependency tree
16:44 < cellvia> is there a library for such a thing
16:45 < aandy> brycebaril: i would assume they had. i was thinking more in terms of realtime notification of "end is near", before it hits twitter and local newsstations
16:45 < DarkArgon> npm list?
16:47 < aandy> https://npmjs.org/doc/json.html#dependencies
16:47 < pachet> DarkArgon: oh i see, was removed from express in 3.x
16:47 < pachet> ho hum
16:48 < DarkArgon> what templating engine do you use?
16:48 < pachet> handlebars
16:48 < DarkArgon> u use hbs?
16:48 < pachet> yeah
16:49 < cellvia> thanks thing is though im building dfependency tree out of something other than package.json
16:49 < cellvia> its a custom thing
16:49 < cellvia> and i just need to create a flat array that is ordered properly for execution based on dependencies
16:50 < cellvia> i will look closer at npm
16:50 < cellvia> how they do it
16:50 < bradleymeck> cellvia: sec
16:50 < brycebaril> I think with hbs you can just specify layout = false in your render options
16:50 <@isaacbw> that's called
16:50 <@isaacbw> topological sorting
16:50 < cellvia> sec?
16:50 < cellvia> yeah there we go
16:50 < cellvia> any easy node module for that
16:50 <@isaacbw> it's just an algorithm
16:50 <@isaacbw> I don't know if there would be a generic module that does it
16:51 <@isaacbw> you want to watch out for circular dependencies as well, which require() does a pretty good job of dealing with
16:51 < DarkArgon> pachet, have you tried layout: false ?
16:51 <@isaacbw> it's not actually an algorithm
16:51 <@isaacbw> it's a class of algorithms
16:51 < bradleymeck> where the heck did i have that...
16:53 < pachet> DarkArgon, brycebaril: yeah, passing {layout:false} works perfectly
16:53 < pachet> thanks
16:55 < h0rnet> hello!
16:58 < cellvia> im seeing a few modules to do it
16:59 < h0rnet> Is there an rss feed or something for node releases?
16:59 < bradleymeck> cellvia: mines tied to npm apparently
16:59 < bradleymeck> and the nice one is not open but i know indexzero wrote a very thorough one
17:00 < tongcx> in cloud9, why i cannot open terminal
17:00 < tongcx> if i open one, it immediately close
17:01 < cellvia> indexzero, ok i will look for him
17:06 < cellvia> bradleymeck i didnt see anything under npmjs.org when i look at indexzero
17:06 < cellvia> for sorting
17:06 < bradleymeck> cellvia: probably didn't open it, i know we use it in our internal tooling
17:06 < bradleymeck> but bother him and he probably would
17:07 < cellvia> https://github.com/nodejitsu/require-analyzer
17:07 < cellvia> maybe that?
17:07 < bradleymeck> no
17:14 < dshap> hey all, i'm trying to install node-canvas and i'm running into some issues.  npm is telling me "Perhaps you should add the directory containing `fontconfig.pc' to the PKG_CONFIG_PATH environment variable".   the thing is, if i do "ls $PKG_CONFIG_PATH | grep font" then i see fontconfig.pc right there!  Any ideas?
17:15 < bradleymeck> export PKG_CONFIG_PATH
17:15 < groundwater> isaacbw: you got me curious what would happen if i had two modules, a and b. where 'a' looked lik "module.exports = require('./b')" and 'b' looked like "module.exports = require('./a')"
17:15 < dshap> bradleymeck: what does that do?
17:15 < groundwater> did not explode...
17:16 < bradleymeck> dshap: makes sure the variable is used in child processes of the shell
17:16 < creationix> groundwater, but I'll bet your export object is empty
17:16 < creationix> require does allow recursive dependencies
17:16 < bradleymeck> groundwater: you get a circular dep as stated in the docs, read up on it
17:16 < bradleymeck> should be a {}
17:17 < creationix> right s/recursive/circular/
17:18 < groundwater> yah, from reading through the module code, it looks like the exported object is created first, then populated by each module
17:18 < groundwater> so at the very least, you're exporting an empty object
17:19 <@isaacbw> require is smart
17:19 < dshap> bradleymeck: still getting the same error after typing "export PKG_CONFIG_PATH" and retrying to npm install
17:20 < bradleymeck> dshap: `command -v python`?
17:20 < groundwater> isaacbw: smarter than anyone dumb enough to do what i just did 
17:20 <@isaacbw> hehe
17:21 < dshap> bradleymeck: /Users/dshap/.virtualenvs/ycharts/bin/python
17:21 < dshap> bradleymeck: what does python have to do with anything?
17:21 < bradleymeck> gyp is used for canvas building
17:21 < bradleymeck> gyp is python based
17:21 < dshap> ah
17:21 < dshap> so, i had canvas working fine with 0.13, but now i need the new font support in 1.0.0 so i'm trying to upgrade
17:22 <@isaacbw> it's not good that my favorite thing to do is make new project folders and write elaborate READMEs
17:22 < bradleymeck> why is it not picking up the library path...
17:23 < dshap> bradleymeck: btw, i never had the PKG_CONFIG_PATH variable defined before trying to upgrade canvas.  (at least i don't remember defining it when i installed 0.13 - is that possible?)
17:24 < bradleymeck> dshap: http://askubuntu.com/questions/210210/pkg-config-path-environment-variable is all i got left
17:24 < dshap> bradleymeck: okay - i tried "brew link fontconfig --force" and now it doesn't complain about fontconfig.pc anymore, but it complains about freetype2.pc =\
17:26 < chakrit> isaacbw: you're not the only one
17:28 < big10> hi, this isa newbie question but is node.js similar to javascript?
17:28 < DarkArgon> u write in javascript
17:28 < big10> oh ok. if i want to build web application is node.js a good start?
17:29 < chakrit> big10: what's your background?
17:29 < big10> i have basic programming background but im trying to take it seriously
17:29 <@isaacbw> big10, node.js is a platform for executing javascript outside of the browser
17:29 < big10> oh
17:30 < groundwater> big10: node is like a php or ruby replacement; it runs on the server
17:30 < big10> oh ok
17:30 < big10> can it work alongside php? 
17:30 < chakrit> yes it does.
17:30 < chakrit> and much more.
17:30 < groundwater> big10: it can work alongside anything
17:31 < groundwater> big10: what do you want to build?
17:31 < big10> wait.. nodejs is for linux/osx? 
17:31 < DarkArgon> and windows
17:31 <@isaacbw> it might be able to work alongside php, depending on what you mean by that
17:31 < chakrit> i wouldn't recommend it to start web programming tho, but that's just me
17:31 < bradleymeck> good lord does it work on windows compared to other stuff
17:31 < big10> i know php decently
17:31 < DarkArgon> i prefer linux :P
17:31  * bradleymeck cries at native modules from other languages on windows
17:31 < g0z> some modules don't work in windows though (or is this not true anymore)
17:31 < g0z> ^^
17:31 < groundwater> i think the node team deserves a lot of credit for getting it working so well on each platform
17:31 < bradleymeck> g0z: most work
17:32 < big10> i tried learning rails but its so damn hard to get it working on windows
17:32 <@isaacbw> if you're using windows to develop, you probably don't like productivity anyway
17:32 < chakrit> here we goes... haha
17:32 < g0z> or you're being paid :/
17:33 < groundwater> big10: windows azure is also aggressive in supporting node, so it's a good language if you'er in  windows
17:33 < chakrit> big10: you'll get much better support on *nix systems. i.e. everything just works. stuff in READMEs works.
17:33 < jesusabdullah> i feel like windows could almost be reasonable to work with, if the right toolchain was developed
17:33 < big10> i see
17:33 <@isaacbw> node development would be much nicer on windows than c development though, because of npm
17:33 <@isaacbw> c++
17:34 < bradleymeck> jesusabdullah: until runas /profile is not hell security scares me
17:34 < big10> my goal is to build basic versions of my ideas out.. 
17:34 <@isaacbw> I couldn't live without my repos
17:34 < bradleymeck> file perms on windows are tricky
17:35 < gildean> big10: go for it, node is pretty easy to grasp if you know some javascript
17:35 < jesusabdullah> bradleymeck: yeah I *do* feel that
17:35 < alexhancock> A package manager tightly coupled with a language/env does make ease of development with it less dependent on OS.
17:35 < chakrit> also local modules ftw!
17:35 < bradleymeck> jesusabdullah: I really want to make suspawn support windows but getting user profiles just write to drop perms on windows without polluting the pool is just too hard
17:36 < bradleymeck> s/write/right/
17:44 < tongcx> technically, what's the difference between ServerResponse and ClientResponse?
17:45 < Paul_> Good afternoon everyone!  I have a question about getting a CLI to a running node script, similar to script/console in ruby.  I know I can just do node, but I'd like to run in the context of my currently running script/server...
17:45 < Paul_> any ideas?
17:45 < bradleymeck> tongcx: Server is being sent by a server, client is being recieved by a client
17:46 < tongcx> so any diff between ServerResponse and ClientRequest?
17:46 < bradleymeck> yes, API lists them
17:46 < bradleymeck> Paul_: define context
17:47 < tongcx> bradleymeck, but i feel they are just unidirectional channel, that's all
17:48 < Paul_> Brandleymeck - for example, I start up my server with: node app.js it's got models like users, articles, etc.  I'd like to then run in an interactive shell with that same environment
17:49 < Paul_> meaning, I can instantiate users based on what's pulled in from app.js
17:49 < Paul_> similar to running script/console in ruby
17:51 < Paul_> in ruby, being able to have a shell into the running production or development is super useful... I'd hope something like that exists for node... 
17:51 < bradleymeck> Paul_: dont know ruby enough, do you mean a repl?
17:52 < Paul_> bradleymeck_: a repl?
17:53 < systemfault> He probably means a way to modify settings of a running application with the command line
17:53 < Paul_> yes
17:54 < baudehlo> You can launch the current repl given a stream (e.g. a socket).
17:54 < baudehlo> so your users can telnet to a particular port and begin prodding around.
17:54 < baudehlo> See the docs for repl
17:54 < Paul_> I suppose there is some way to do it from chrome dev console... though I was hoping for some easy CLI way similar to ruby
17:55 < bradleymeck> Paul_: you can do things like repls easy, also look at flatiron-repl for a more generic example
17:55 < Paul_> ok, i'll look at repl
17:58 < gaf> there's a nice repl for node
17:58 < gaf> benvie made it, i can't remember the name... :/
17:59 < gaf> Paul_ https://github.com/Benvie/Node.js-Ultra-REPL
18:00 < Paul_> @gaf: thanks, I'm looking it into now
18:00 < gaf> ok
18:08 < paultman> MongoDB question, any idea when doing a find for everything in my users table the password field doesn't show up (using mongo cli)
18:09 < paultman> IE: > db.users.find({}); { "username" : "sdf", "name" : "sdf", "_id" : ObjectId("511903be4c14d0d30b000001"), "__v" : 0 }
18:10 <@isaacbw> it looks like it doesn't have a password field
18:10 < DarkArgon> because it does not exists?
18:10 < paultman> is mongodb smart and treats "password" fields differently?  
18:10 < paultman> but it does in my schema/model...
18:10 <@isaacbw> no
18:11 < paultman> hmmm... i didn't think so... hence my confusion...
18:12 < paultman> maybe I'm not setting it properly... just checking if I was missing some mongodb thing... 
18:12 < paultman> thanks isaacbw
18:13 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:17 < paultman> @isaacbw lol, passworld != password :p
18:17 <@isaacbw> :( what
18:17 <@isaacbw> oh
18:17 <@isaacbw> :P
18:17 < paultman>  ;)
18:20 < othiym23> Nexxy: what's up?
18:28 < context> hmmm reading api change
18:28 < context> => process.nextTick happens at the end of the current tick
18:28 < context> shouldn't that be 'process.currentTick' ...
18:28 < kam187-rMBP_> hi guys
18:29 < benthor> is there a mirror of nodemanual.org around?
18:34 <@isaacbw> seems a bit premature for a book
18:34 <@isaacbw> er
18:34 <@isaacbw> wrong channel
18:37 < ckknight> context: people are used to process.nextTick, and as long as it occurs as soon as possible but in an async fashion, that's what people care about.
18:38 < groundwater> context: it just means stuffed queued by nextTick happens before any callbacks from the C++ layer
18:38 < context> ahh
18:39 < context> doesn't that introduce a infinite recursion that didnt exist before
18:39 < context> an*
18:39 < groundwater> context: yes, there is a warning after 10k consecutive nextTicks
18:40 < groundwater> context: isaacs talks about it at the end of this talk https://www.youtube.com/watch?feature=player_embedded&v=zM-gUM9C5SA
18:40 < asdf12> groundwater
18:41 < groundwater> context: i think after 10k consecutive nextTicks they run the queued c++ layer once
18:41 < mscdex> didn't nodejs.org have a file that contained the version of the latest stable release?
18:44 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:48 < nb-ben> stylus does not do on-the-fly compilation? it actually writes to HD?
18:48 < nb-ben> I'd think it would load the code, process it and cache to memory and then serve that
18:49 < nb-ben> but apparently it just generates a new .css file
18:50 < CoverSlide> that is massively inefficient
18:50 < CoverSlide> although if it generates text it should be able to put that into a stream or something instead
18:50 < nb-ben> I think it should work the same way Jade does it
18:51 < strk> I've sent a SIGUSR1 to a running process and can connect to port 5858 where V8-Version: 3.11.10.25 answers me
18:51 < nb-ben> only it's even cheaper because you don't even take parameters and do any dynamic work with it
18:51 < strk> but now ? what commands to I have ? is there a command line utility to hook there ?
18:52 < CoverSlide> the difference is that with jade the context needs to be evaluated on each request
18:52 < CoverSlide> with stylus it only needs to be evaluated on each document change
18:52 < nb-ben> yeah well there's no actual need for the files there
18:53 < CoverSlide> mscdex: just /dist/latest which i think just symlinks to the latest
18:53 < nb-ben> I'd just rather manually compiling them instead of having some daemon auto-compile it for me
18:54 < CoverSlide> you can do that
18:54 < CoverSlide> stylus has an executable
18:54 < CoverSlide> you don't need to use the middleware
18:55 < nb-ben> yes but I'd much rather it just compile from my source directory and cache it :(
18:55 < onr> stylus -w -c ./
18:57 < tpayne> anyone here create alpha ids?
18:57 < tpayne> Right now i'm using id #'s and i don't want people incrementing them
18:58 < ckknight> tpayne: alpha ids?
18:58 < tpayne> like mysite.com/adfewx
18:59 < tpayne> that are unique
18:59 < asturel> there is no forum software for nodejs?:D
18:59 < mscdex> CoverSlide: yeah i saw that
18:59 < samholmes> Is there a way to do a block of JS in Jade?
19:00 < chapel> samholmes: yeah
19:00 < chapel> put the js under a script tag
19:00 < samholmes> how?
19:00 < samholmes> I mean embeded and run on the server side
19:01 < chapel> well, that would just be template logic
19:01 < chapel> like if (foo === 'bar')
19:02 < cellvia> hi if i have a node app with a package.json, and then in a  subfolder within that app i have another package.json ( NOT in node_modules folder )   is there a way to make sure npm install on the root folder will also include those subfolder dependencies?
19:03 < chapel> samholmes: https://github.com/visionmedia/jade#a8
19:03 < samholmes> Is there a way to do this without needed to prefix every line with a -?
19:03 < groundwater> tpayne: just create a random id each time?
19:04 < tpayne> i thought there was maybe some silly algorithm or encryption to turn a number into a id
19:04 < tpayne> then it would be really easy
19:04 < chapel> samholmes: Likewise Jade has first-class if, else if, else, until, while, unless among others, however you must remember that the expressions are still regular javascript:
19:04 < chapel> samholmes: if you read the rest of the section, it says that
19:04 < chapel> samholmes: those are your options
19:04 < samholmes> I've read it
19:04 < ckknight> tpayne: you could make one reasonably easily. Making a random ID and then checking for uniqueness would be my suggestion.
19:05 < groundwater> tpayne: sha1 hash gives uniformly distributed hashes
19:05 < tpayne> i'll check into sha1, thanks!
19:05 < chapel> samholmes: the only other option is to create mixins https://github.com/visionmedia/jade#a14
19:05 < groundwater> tpayne: but a random base64 encoded number is prob best
19:05 < chapel> which act like code
19:05 < chapel> if using express you can also use locals
19:05 < chapel> or pass in functions directly
19:05 < groundwater> tpayne: yah, check to see if it's duplicate like ckknight says
19:05 < samholmes> chapel: So to answer my original question (which you're confusing), then no, there isn't a way to embed a block of complete JS without prefixing each line with a -.
19:06 < chapel> app.locals.fooFunction = function() { doSomething() }
19:06 < ckknight> tpayne: there are a bunch of hashing algorithms out there. You'd still need to check for duplicates if you use something like sha or md5.
19:06 < tpayne> why?
19:06 < chapel> samholmes: you didn't ask about not using - originally
19:06 < tpayne> if the underlining content is unique
19:06 < tpayne> shouldn't the hash be unique as well?
19:06 < ckknight> tpayne: because due to the nature of hashing algorithms, there are overlaps by definition
19:06 < samholmes> chapel: Not originally, no.
19:06 < tpayne> crazy
19:06 < tpayne> but ok thanks
19:07 < chapel> samholmes: for code executed in the template while it is rendered you can use - or use the code elsewhere
19:07 < groundwater> tpayne: statistically unique, but it doesn't hurt to check
19:07 < chapel> samholmes: as in using locals or similar
19:07 < ckknight> nah, just imagine any blob that has more information than the hash can convey, the hash is smaller than that, so it's sort of a one-way compression. You could have hash collisions.
19:07 < chapel> though, using variables like locals with functions won't translate to client side versions of jade templates
19:07 < ckknight> ideally you won't, but you still have to check.
19:08 < tpayne> thanks guys, later
19:08 < samholmes> chapel: The only thing that sucks about that is if I have a set of data, I have to run two loops on it instead of one. The first loop would be to add prepare the data, and the second loop would be to render the data (in jade).
19:08 < chapel> samholmes: that is outside the scope of jade
19:09 < samholmes> chapel: I suppose so.
19:09 < chapel> samholmes: programming is about finding solutions to problems
19:09 < chapel> samholmes: there are a lot of ways to avoid multiple loops
19:10 < samholmes> But, wouldn't my application be faster if I could just pass some data to the local and the local was able to handle it from there (running loops and generating the output)?
19:10 < mappum> is there an efficient way to watch an object for changes (that isn't polling with setInterval)?
19:11 < chapel> mappum: in node, sure
19:11 < samholmes> For example, I could loop through a set in jade and then while on a specific element, loop though each element of a subset, and then generate the output while figuring out other logic.
19:11 < CoverSlide> samholmes: perhaps, problem is most templating engines are synchronous
19:12 < samholmes> But instead, I have to loop through each element and element subset at the controller and then do one second loop at the view level.
19:12 < mappum> chapel: and what is that?
19:12 < CoverSlide> and I don't know of any that allow you to run asynchronous code within a template
19:12 < samholmes> CoverSlide: Are for..each loops sync anyay?
19:12 < CoverSlide> those are
19:12 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:13 < chapel> mappum: http://stackoverflow.com/questions/1269633/watch-for-object-properties-changes-in-javascript
19:13 < samholmes> CoverSlide: That would be cool, an async template engine.
19:13 < othiym23> mappum: you might want to take a look at https://npmjs.org/package/ak47
19:13 < ckknight> I should write my own templating language with async and hookers
19:13 < asdf12> WHAT
19:13 < mappum> ah thanks, i had looked through a bunch of stack overflows that said it wasn't possible :P
19:13 < othiym23> although the github repo disappeared, so maybe he decided it wasn't a good idea
19:13 < asdf12> you can do that???
19:13 < asdf12> write code with hookers??
19:13 < chapel> samholmes: can you give a code example of what you're trying to do?
19:14 < mappum> and blackjack
19:15 < chapel> mappum: there is also this https://github.com/melanke/Watch.JS
19:15 < samholmes> http://pastebin.com/fzEUFw8h
19:15 < chapel> no experience with it though
19:15 < mappum> is there one in an npm package?
19:16 < chapel> samholmes: first of all, its very common to do that manipulation in a controller or outside of the view
19:16 < othiym23> mappum: see the link I pasted :)
19:16 < chapel> since it then requires less places to make changes as data changes
19:16 < mappum> othiym23: oh, missed that, thanks
19:17 < samholmes> chapel: I'm sure it's fine to do it the standard way
19:17 < chapel> also, seems like you are doing a map and filter for no reason
19:17 < samholmes> chapel: Nothing needs fixing, and there are probably reasons not to put logic in templates that people smarter than me have already figured out
19:18 < chapel> samholmes: its usually because its conflating things
19:18 < chapel> its like putting javascript in your html (on the client side)
19:18 < chapel> not entirely optimal
19:18 < samholmes> Right
19:18 < chapel> mostly because you have to search and dig into a bunch of files/areas to make changes
19:18 < samholmes> what did you say about my map and filter?
19:18 < chapel> well, let me whip up a quick example
19:19 < CoverSlide> you got chocolate on my peanut butter!
19:19 < samholmes> CoverSlide: TMI
19:19 < cellvia> sorry to ask again, hoping someone has an idea, how can i ensure subdirs in my project that have their own package.json  get their dependencies also installed?
19:19 < mappum> lolwut i just found this: http://www.youtube.com/watch?v=1e1zzna-dNw
19:19 < mappum> he's trolling, right?
19:20 < chapel> he is a troll
19:20 < CoverSlide> he's just an uninformed idiot
19:20 < chapel> but from what I know he believes that
19:21 < othiym23> I like the part where he suggests the LinkedIn password hash disclosure was Node's fault
19:21 < othiym23> that suggests active trolling more than cluelessness
19:21 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:21 < mappum> he says that saying it is non-blocking is a lie because the CPU has to block to do calculations, but it's non blocking IO
19:21 < CoverSlide> right because java/.net systems have never leaked password
19:22 < mappum> cpu isn't io
19:22 < CoverSlide> cpu always blocks on the same thread
19:22 < CoverSlide> there's a reason people call event-based io non-blocking, this isn't a term coined by the node community
19:23 < mappum> the funny thing is that i know someone exactly like this
19:23 < mikolalysenko> what is the best package for tokenizing streams?
19:23 < samholmes> chapel: What am I don't that's redundant in my code, concerning the map and filter?
19:23 < CoverSlide> there's plenty of those people who stroll in here from time to time
19:23 < chapel> samholmes: https://gist.github.com/chapel/4947289
19:23 < mappum> and he refuses to use node because he says "if node is good, why do they use nginx for their website?!"
19:24 < CoverSlide> mikolalysenko: tokenize as in like strtok?
19:25 < chapel> samholmes: you were using filter incorrectly there
19:25 < mikolalysenko> I tried tokenize, but I must be using it wrong since it keeps crashing internally
19:25 < chapel> samholmes: filter is meant to filter an array (though thinking about it, you might have been trying to keep away from duplicates)
19:25 < samholmes> chapel: That would leave empty elements within the array if photo.albumId and photo.albumTitle were both undefined.
19:26 < chapel> if thats the case you weren't wrong, but it could be done in one loop still
19:26 < samholmes> duplicates as well!
19:26 < samholmes> :P
19:27 < mikolalysenko> CoverSlide:  Basically I want to take a stream and split it into tokens, then handle each token separately
19:28 < CoverSlide> hmm
19:28 < mikolalysenko> kind of like Java's StreamTokenizer class
19:28 < mikolalysenko> this library:  https://npmjs.org/package/tokenizer
19:28 < mikolalysenko> basically does what I want, except it seems buggy
19:28 < mikolalysenko> or I may just be calling it incorrectly...
19:30 < chapel> samholmes: https://gist.github.com/chapel/4947289
19:30 < isaacbw_> damn
19:30 < isaacbw_> I found a service to replace my shitty backend and I started getting really excited
19:30 < isaacbw_> but it turns out the service is lacking a few key features that are absolutely vital to my application
19:30 < isaacbw_> :(
19:30 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:30 < CoverSlide> what service? what application?
19:30 < samholmes> CoverSlide: cool, thanks!
19:31 <@isaacbw> context.io
19:31 <@isaacbw> an unannounced application
19:31 <@isaacbw> http://cuttlefi.sh/
19:31  * jrajav promptly posts to HN
19:31 < jrajav> jk :P
19:31 < mikolalysenko> in fact, digging around in the source I think I figured out the problem...
19:31 < mikolalysenko> tokenizer doesn't correctly handle buffer underruns
19:31 < mikolalysenko> :'(
19:31 < HankHendrix> good evening
19:32 < DarkArgon> inline style
19:32 < bradleymeck> anyone have a good form encoder for multipart that handles files well
19:32 < chapel> samholmes: did you mean me and not CoverSlide ?
19:32 < CoverSlide> i haven't seen any, i was in the process of hand-rolling one a while ago
19:34 < bradleymeck> CoverSlide its not hard to write except the mime headers bit needs to be awesome
19:34 < bradleymeck> content-encoding etc
19:34 < mikolalysenko> are there other good stream tokenizers for node?
19:35 <@isaacbw> CoverSlide, pingyping
19:35 <@isaacbw> nvm
19:35 < CoverSlide> isaacbw: pongypong?
19:35 <@isaacbw> :D
19:35 <@isaacbw> I guess I'm going to have to hunker down and write my own email caching service
19:35 <@isaacbw> bugger
19:36 < samholmes> Why does it seem like people prefer double space over tab?
19:36 <@isaacbw> tabs get messy
19:37 < bradleymeck> cause tab looks hideous 
19:37 < CoverSlide> because tabs are evil
19:37 < CoverSlide> sent by the devil himself
19:37 < CoverSlide> out of the firey pit of hell
19:37 < bradleymeck> for someone who tabs at sw=2 and then sees my webbrowser format it diff I want to cry
19:37 <@isaacbw> because tabs invariably mix with spaces and bad things happen
19:38 < CoverSlide> oh yeah and tabs suck when using cat or grep
19:38 < bradleymeck> https://developer.mozilla.org/en-US/docs/CSS/tab-size + CSS transition to see what i see
19:38 <@isaacbw> just get a good text editor that makes it transparent
19:38 <@isaacbw> emacs tab yay
19:40 < samholmes> sw=2?
19:40 < chapel> tabs aren't consistent
19:40 <@isaacbw> I spent a while polluting the gimp codebase with tabs in emacs
19:40 < bradleymeck> vim talk for how big tabs are
19:40 <@isaacbw> until I remembered (setq-default indent-tabs-mode nil)
19:41 < chapel> samholmes: spaces are consistent, a space is a space
19:41 < CoverSlide> o noez
19:41 < CoverSlide> teh lisp
19:41 < chapel> a tab could be one space, two, 10
19:41 < samholmes> chapel: and a tab is a tab.
19:41 <@isaacbw> it's how much it's rendered
19:41 < CoverSlide> for source code tabs aren't needed
19:41 <@isaacbw> and if you're mixing tabs and spaces
19:41 < CoverSlide> except make
19:41 <@isaacbw> which will happen even if you don't mean to
19:41 < chapel> samholmes: I just dislike tabs in code
19:42 < samholmes> isaacbw: I've never had it happen, because I have a great code editor I guess.
19:42 < CoverSlide> and the fact that you are probably going to be using spaces within your code instead of tabs
19:42 < CoverSlide> might as well use tabs for indenting too
19:42 <@isaacbw> lol
19:42 <@isaacbw> you run into trouble when you collaborate
19:42 < CoverSlide> if you code editor was great it would convert tabs to spaces
19:42 <@isaacbw> M-x untabify
19:42 < chapel> CoverSlide: +1
19:42 < samholmes> CoverSlide: What's so great about having 4 characters represent one?
19:42 < groundwater> you can also run a git post-receive hook to reject pushes with tabs
19:42 < jrajav> That's why you should always have style-checking build hooks.
19:43 < samholmes> 1 tab is 1 tab, but 4 spaces is 4 spaces
19:43 < samholmes> If you want to indent once, should a tab be that 1 character to do the job?
19:43 < CoverSlide> except in a console, 1 tab is 8 spaces
19:43 < samholmes> CoverSlide: It's not 8 spaces, it's just rendered larger
19:44 < samholmes> CoverSlide: I know what you mean, but it's still one single character
19:44 < chapel> samholmes: what if someone likes 4 space tabs, but sets it to be 2 spaces per tab, so essentially they are doing two tabs to indent?
19:44 < CoverSlide> samholmes: i always indent with the tab key, my text editor will convert the tab to 2 spaces
19:44 < jrajav> For hard tabs, you can only depend on correct display in the main tools you're using and configuring. For soft tabs it will always be consistent.
19:44 < jrajav> chapel: That hurts my brain
19:44 < samholmes> chapel: That doesn't even make any sense
19:44 < chapel> lol
19:44 < samholmes> chapel: repeat yourself with more clarity
19:45 < samholmes> :P
19:45 < samholmes> 4 space indents?
19:45 < samholmes> but 2 space tabs?
19:45 < samholmes> Then they're retarded
19:45 < chapel> using two tabs with a visual width of two spaces, but indenting to 4 visual spaces width (which equals 2 tabs)
19:45 < chapel> samholmes: Ive seen it happen
19:45 < groundwater> i like to line things up with spaces, if i use tabs and someone changes the width of the tab, my pretty code looks ugly
19:46 < chapel> samholmes: ultimately its a personal preference, but you will find most node.js devs tend to use spaces
19:46 < samholmes> chapel: That's still not an argument againsts tabs imo
19:46 < chapel> samholmes: never said it wasn't
19:46 < samholmes> but I don't want to argue tabs vs spaces, should of never brought it up
19:46 < chapel> err, was
19:47 < chapel> samholmes: how about ASI?
19:47 < chapel> :P
19:47 <@isaacbw> you asked why people don't like tabs. we gave you reasons
19:47 <@isaacbw> you don't have to agree
19:47 < JT_> Hi guys, newbie question: how can I export a variable from app.js? adding exports.foo = function(){return foo} (to the bottom of app.js) and then trying to access this variable on other js file via: app = require('./app'); app.foo(); doesn't seem to work. Any tips/hints?
19:47 < samholmes> isaacbw: I know. soz. :P
19:48 <@isaacbw> JT_, that should be working
19:48 < groundwater> shouldn't it be module.exports?
19:48 <@isaacbw> it doesn't have to be
19:48 < groundwater> i never understood the difference
19:48 < groundwater> but i always use the latter
19:48 <@isaacbw> you have to use module.exports if you want to reassign exports
19:48 <@isaacbw> otherwise it doesn't matter
19:48 < groundwater> ahh makes sense
19:49 < JT_> ok thanks
19:50 <@isaacbw> JT_, maybe post the whole code in a gist or something
19:50 < groundwater> isaacbw: i thought you were anti-gist man
19:50 < groundwater> jk
19:50 < JT_> ok will do thanks!
19:50 <@isaacbw> I was :(
19:50 < bradleymeck> http://jsfiddle.net/jqUsM/13/ tabs when my eyes see them using a diff editor than normal
19:50 <@isaacbw> then I decided I wanted to be cool like you guys
19:51 < groundwater> isaacbw: okay guys, he's cool.. let him in the club
19:51 <@isaacbw> :D
19:53 < jrajav> bradleymeck: I think that is the very first "jsfiddle meme" I've seen
19:56 <@isaacbw> does someone want to draw me a fish
19:56 <@isaacbw> for an awesome open source project that I just thought of today
19:56 <@isaacbw> it has a README and everything
19:56 < asdf12> what is it
19:56 < JT_> ok @isaacbw here is the gist: https://gist.github.com/anonymous/d94b1099d960a860c95d (I tried to remove irrelevant stuff) thanks!
19:57 <@isaacbw> that mail caching thing I was talking about
19:57 <@isaacbw> I need it for my application and I figure, what the hell
19:57 <@isaacbw> let other people use it too
19:57 < asdf12> when
19:57 < asdf12> what
19:58 <@isaacbw> JT_, what's the error?
19:58 <@isaacbw> btw, io = io.listen(server) is very questionable
19:59 < JT_> @isaacbw the error is: var io = app.io(); TypeError: Object #<Object> has no method 'foo'
19:59 <@isaacbw> :) there's your answer
19:59 <@isaacbw> read the error
19:59 <@isaacbw> from start to finish
19:59 < owen1> what termintion signal will do -9 +
19:59 < owen1> ?
20:00 < owen1> SIGKILL ? 
20:00 < bradleymeck> yep
20:00 < owen1> bradleymeck: thanks
20:00 <@isaacbw> JT_, wiat
20:00 <@isaacbw> I'm confused by your error
20:00 < JT_> @isaacbw I got that code from : http://socket.io/#how-to-use but if you have a suggestion how I should improve it I'm happy to change it
20:00 <@isaacbw> someone tell me I'm not crazy
20:01 < JT_> as I said I'm a newbie I am most likely doing something stupid
20:01 <@isaacbw> where is app.io()
20:01 < JT_> oh sorry --------- was meant to signify a new file
20:01 < JT_> it's in deploy.js
20:02 <@isaacbw> I don't see that call anywhere
20:02 < JT_> line 53
20:02 < groundwater> JT_: that's app.foo
20:02 < JT_> that's being exported on line 40 in app.js
20:03 < groundwater> JT_: put console.log(app) there; what does it say
20:03 < groundwater> actually taht might just say [object]
20:04 < groundwater> console.log(util.inspect(app,true,null,true));
20:04 < phrearch> hi
20:04 < phrearch> i wonder what os.loadavg() numbers should be interpreted
20:04 <@isaacbw> no, it would inspect it automatically
20:04 < phrearch> "Returns an array containing the 1, 5, and 15 minute load averages"
20:05 < JT_> in line 50 (deploy.js) app = require('./app'); followed by line 53 (var io = app.foo(); ) where it says app doesn't have foo
20:05 < phrearch> what does it say exactly? it returns arrays like [0.34326171875, 0.57275390625, 0.73095703125] 
20:05 < groundwater> JT_: ahh i see it
20:05 < groundwater> you're requireing deploy.js in app.js
20:05 < groundwater> app.js hasn't exported foo before deploy is run
20:05 < JT_> oh I see
20:05 < JT_> shall I just move it to the top?
20:06 < bradleymeck> phrearch: can you rephrase that also http://linux.die.net/man/5/proc (ctrl+f loadavg)
20:06 < LowValueTarget> I'm having a dumb issue... trying to break out my rendering per page in different modules -- app.get '/', routes.index
20:06 < groundwater> JT_: well that kind of design is prob. bad, you should avoid cyclic requires when possible
20:06 < LowValueTarget> Having an issue passing variables to it
20:06 < phrearch> bradleymeck: ah thanks!
20:06 < LowValueTarget> to use in the jade template
20:06 < JT_> or is there a pattern for this situation... basically I just want access to the socket.io (IO) instance on another file
20:07 < phrearch> i didnt know it was based on proc
20:07 < groundwater> JT_: just see if you can elminiate one of the requires
20:08 < groundwater> isaacs: ahh, i was thinking of console.log("%s",ob) which prints a nice useless [object]
20:08 < mikolalysenko> ok, I still can't find a working stream tokenizer for node.js
20:09 < JT_> will try Thanks! @groundwater && @iaacbw
20:09 -!- mode/#Node.js [+o isaacbw] by ChanServ
20:10 < groundwater> isaacs: sorry you get auto-completed sometimes when i mean isaacbw
20:10 <@isaacbw> I was disconnected
20:10 <@isaacbw> otherwise the autocomplete problem is solved ;)
20:10 < groundwater> isaacbw: yes, mis-fire
20:11 < mikolalysenko> fuck it.  writing my own
20:11 < CoverSlide> mikolalysenko: that seems to be what people usually do
20:12 < CoverSlide> mikolalysenko: look at how sax-js does it
20:12 < groundwater> http://xkcd.com/927/
20:12 < s3shs> Damn missed it.  Oh, the drama!
20:12 < mikolalysenko> yeah, I am basically going to do the stream tokenization inline
20:13 <@isaacs> groundwater: i solved the problem by opping isaacbw 
20:14 <@isaacbw> the only logical solution
20:14 < s3shs> So I've wrapped up require in a global function that adjusts relative paths correctly.  I was tired of reorganizing my files and paths in every .js file.  Will this screw things up when I go to deploy this app and merge all JS in to one file?
20:14 < CoverSlide> depends on how you deploy it
20:14 < Gabriel403> If I legally change my name to isaacls will you op me too?
20:15 < s3shs> Hmm.  CoverSlide, I take it there are a lot of options there, huh?
20:15 <@isaacbw> I keep rethinking how I want to design this API and it keeps getting more convolution
20:15 < s3shs> I guess server side stuff doesn't really need everything in one minimized js file.
20:15 <@isaacbw> *convoluted
20:16 < CoverSlide> it doesn't
20:16 < s3shs> isaacbw, never be afraid to throw away 2000 lines of code and start over if it will simplify everything else.
20:16 < s3shs> CoverSlide, thanks.
20:16 < asdf12> thats crazy
20:16 < asdf12> yes you should be afraid
20:17 -!- mode/#Node.js [+o isaacbw] by ChanServ
20:17 < s3shs> asdf12, my past experiences disagree.  But to each their own.
20:18 < bradleymeck> asdf12: depends on how many tests are around the pre/post conditions of that code i would say
20:22 < pototo> I'm having problems with my simple Node server that listens for data over TCP and sends it to the browser for graphing via socket.io. Can someone please take a look? http://cl.ly/image/1q3A3z182G3y
20:22 < pototo> And the code is here: https://gist.github.com/Pinkerton/4947821
20:28 < gildean> pototo: you can't listen on the express app, as version 3 doesn't return a http-server anymore
20:29 < pototo> I'm using 2.5
20:29 < pototo> to get around that
20:29 < cloudbender> Array.every is stable ?
20:29 < cloudbender> and array.some ?
20:29 < gildean> pototo: so instead do: var app = express(); var server = require('http').createServer(app).listen(port); var io = require('socket-io').listen(server);
20:30 < CoverSlide> cloudbender: should be, why?
20:31 < CoverSlide> I use Array.every / Array.some all the time as forEach loops that need to break at some point
20:31 < bradleymeck> cloudbender: yes in node it is very past stable, into frozen
20:31 < fwg> lol
20:31  * bradleymeck wants builtin prototypes to be sealed/frozen anyway
20:31 < cloudbender> CoverSlide the genral consensus seems to be that the array methods are a bit schizophrenic
20:32 < CoverSlide> what consensus?
20:32 < CoverSlide> who said that?
20:32  * CoverSlide cracks his knuckles
20:32 < cloudbender> lol
20:32 < cloudbender> more with the 'each,in,and of' constructs I guess
20:33 < mappum> i'm trying to add an owner to an npm module (`npm add owner user`) but it just hangs, any ideas?
20:33 < CoverSlide> right, well you never use `in` with an Array
20:33 < CoverSlide> of is not standardized yet
20:33 < cloudbender> I do. it seems to work OK for me
20:35 < cloudbender> I use it to iterate method calls on arrays of objects that have methods
20:35 < CoverSlide> right, well that's fine
20:36 < cloudbender> for (var i in objects[]) {object[i].method()}
20:36 < phrearch> hm, is there a simple way to get the available diskspace in node?
20:36 < cloudbender> But it gets scary if an element is set to null
20:36 < CoverSlide> child_process.spawn('df')
20:37 < cloudbender> What would be great is if they would make 'in' a set operator
20:37 -!- mode/#Node.js [+o isaacbw] by ChanServ
20:37 < cloudbender> for (var i in objects) {i.method}
20:38 <@isaacbw> that won't work
20:38 < cloudbender> not in javascript it won't
20:38 <@isaacbw> that's what foreach is for
20:39 < cloudbender> I will look at foreach again
20:42 < cloudbender> for each that need to break is exactly what I was getting at
20:42 < ngl> if a package.json has a url... and I need to force these to be installed locally... would setting the url to point locally do the trick ya think?
20:42 < bradleymeck> cloudbender: .some instead of .forEach
20:42 < ngl> (npm question)
20:43 < bradleymeck> ngl: clarify? it should work from your local machine just like curl
20:43 < cloudbender> tnx all
20:44 < pototo> @gildean I added your suggestion for Express 3, but am having errors calling .use (I've tried to call it on express, server, and app): https://gist.github.com/Pinkerton/4947821
20:44 < ngl> I have a software using several node modules. The software gets packed-up and needs to install without access to the interwebz.
20:45 < ngl> But, so far it always freezes-up trying to get to the outside.
20:45 < ngl> ...well, timesout anyway
20:45 < bradleymeck> ngl… are you not using bundledDependencies?
20:45 < CoverSlide> .use hasn't really changed between express 2 and 3
20:46 < CoverSlide> pototo: var app = express(); app.use(....
20:46 < ngl> well, bradlymeck, I don't think I am. I guess that is something to look-up in documentation? 
20:47 < bradleymeck> ngl use that when you pack it and never call npm install, only call npm rebuild
20:47 < bradleymeck> combines with shrinkwrap now if i remember right
20:47 < pototo> @CoverSlide that works, but there is still a lot of delay between sending data with my Python script and receiving it with the Node server
20:47 < ngl> WOW! Too cool. Thanks a zillion. I've been banging my head for two days on this problem.
20:48 < ngl> Thanks bradleymeck. Off to try new things :0)
20:48 < pototo> @CoverSlide The app is still unusable in the browser because the Node server flips out and spits out tons of random data in the console and takes forever to server the static content
20:49 < Aartsie> How can i use sessions in Node ? 
20:49 < bradleymeck> isaacs: does npm shrinkwrap not have and option to --save everything thats extraneous?
20:49 < CoverSlide> Aartsie: yes
20:49 < CoverSlide> oh
20:49 < CoverSlide> how
20:49 < CoverSlide> connect.session i think
20:49 < bradleymeck> Aartsie: connect sessionstore or various other session stores
20:50 < CoverSlide> Aartsie: https://npmjs.org/package/connect
20:50 < gildean> pototo: maybe you should put your css, js etc. dirs under one dir like 'static' and only call express.static once on that dir, then remove the app.get for the index-file which is also static
20:50 <@isaacs> bradleymeck: no, it does not
20:50  * bradleymeck off to PR
20:50 <@isaacs> bradleymeck: there's a pull req to add a `npm save` command, but it's got some isseus
20:50 < bradleymeck> will look at that then
20:50 <@isaacs> bradleymeck: you could probably get it over the finish line.
20:51 < Aartsie> bradleymeck: Now i'm using express and i read about it is possible with express ?
20:51 < bradleymeck> Aartsie: http://expressjs.com/api.html#cookieSession
20:52 < pototo> @gildean I don't think that's the problem though. As soon as I open the page in a browser, the terminal looks like this: http://cl.ly/image/2x1K3U3R2K15
20:53 < pototo> And the browser doesn't receive any of the data that the server receives over TCP
20:54 < bradleymeck> isaacs: dont see the PR in github?
20:55 < gildean> pototo: what does your clientside look like?
20:55 < bradleymeck> at least not by "save"
20:55 <@isaacs> bradleymeck: i think it's something like "Backfill" or something
20:55 < bradleymeck> ah nm https://github.com/isaacs/npm/pull/2999
20:57 < pototo> @gildean I added the client code here: https://gist.github.com/Pinkerton/4947821 . The relevant JS is near the bottom of the file.
20:57 < ricardo_> say I have a module Y that exports .method - is there any way to call require('Y').method() in /root/main.js and have method get main's __dirname without giving it as an argument? module.parent is not giving the correct path
20:58 < bradleymeck> ricardo, pass it as an argument, module.parent is shifty for things
21:01 < gildean> pototo: you're running the server on port 8081, so you should do var socket = io.connect('http://localhost:8081'); or better yet: var socket = io.connect(window.location.href);
21:03 < eighty4> I so want named subpatterns in javascript ><
21:03 < eighty4> stupid
21:03 < pototo> @gildean Where do you suggest I put that code?
21:04 < gildean> pototo: ? in the bottom of the clientside script, where you connect to the io-server, replace what you have there now
21:04 < gildean> pototo: instead of: var socket = io.connect('http://localhost'); put in: var socket = io.connect(window.location.href);
21:05 < gildean> that way you'll connect to the right address even if you change servers
21:05 < pototo> @gildean I see. I thought you were talking about server-side.
21:06 < pototo> @gildean The Node server can successfully serve the static content, but it still flips out when it tries to send data over socket.io
21:06 < pototo> Do I have to clear a buffer or something?
21:09 < gildean> pototo: i don't think so, but one thing you could do is move the broadcast function out of the callback of the tcp-server, no need to redefine the function on each connection
21:13 < Aartsie> bradleymeck: If i'm right i have to install connect ?
21:15 < bradleymeck> Aartsie: dont think so
21:17 < catgen> Whats a decent book for learning nodejs?
21:18 < pototo> @gildean That helps a bit, but it's still quite slow
21:18 < pototo> @gildean And the page loads almost instantly when I'm not sending TCP data with the Python script
21:21 < Aartsie> bradleymeck: now i have this: app.use(express.cookieSession({ secret: config.sessionsecret, cookie: { maxAge: 60 * 60 * 1000 }})); and get the TypeError: Cannot read property 'connect.sess' of undefined so it looks like it needs connect ?
21:22 < bradleymeck> dunno would need to look more, wouldnt hurt to npm i connect
21:22 < r00723r0> Is there a system which takes a file with AMD define() calls and creates a single concatenated minified JS file that has no dependencies?
21:28 < systemfault> Anyone uses q.js here? :P
21:28 <@isaacbw> q's the shiznit
21:28 <@isaacbw> we say Q though, not q.js
21:29 < asdf12> and they call themselves 'we'
21:29 <@isaacbw> it's a royal we
21:30 < asdf12> your secret club has too many rules
21:31 < systemfault> Ok, then .fail vs second argument of then… is it normal that they don't behave the same?
21:31 < bradleymeck_> someone with ubuntu x64 handy and their own code that uses a native module want test something for me?
21:31 <@isaacbw> systemfault, erm, no
21:31 < systemfault> With .fail, even though I can do something when there's a failure (Like console.log'ing it).. the exception still propagates and the program dies
21:32 < systemfault> With the second argument of .then, I can stop the propagation
21:32 <@isaacbw> and if you do it with .then(null, func) it's fine?
21:32 <@isaacbw> weeiirrdd
21:32 < systemfault> Right
21:32 <@isaacbw> because it's a straight alias. From the source: function fail(promise, rejected) {
21:32 <@isaacbw>     return when(promise, void 0, rejected);
21:32 <@isaacbw> }
21:32 <@isaacbw> *up
21:33 <@isaacbw> are you sure that's all you're changing between the then and fail?
21:34 < culp> former PHP dev here, whats the best way to start using nodejs and something like express? i have a little bit of knowledge about js in general
21:34 < systemfault> isaacbw: I got it to work, I did something stupid, sorry
21:34 <@isaacbw> :P
21:34 < profumo> culp: same boat here pretty much, been doing my best to dive in and read as much as i can online
21:35 < othiym23> systemfault: it has to do with when in the promise chain you're catching the exception
21:35 < profumo> definitely different tho
21:35 < othiym23> it can be opaque when you're looking at it from your code, but when you figure it out, it generally makes sense
21:35 < culp> profumo: any useful links
21:35 <@isaacbw> mdn
21:35 < othiym23> I had something like that chomping on my ass last week, and I still don't really understand why my solution works, but it does
21:35 < profumo> not at all express focused
21:35 < profumo> http://www.nodebeginner.org
21:35 < profumo> but thats great
21:35 < othiym23> so I'm trying not to worry about it too much ;)
21:36 < profumo> good stuff here too http://theholmesoffice.com/category/knowing-node/
21:36 < profumo> but im still looking too
21:36 < profumo> just started recently and not done much other than read and test
21:36 <@isaacbw> can I get a sanity check: https://github.com/isaacbwagner/marlin
21:36 < tklun> I haven't read this book, but maybe it's what you're looking for: http://shop.oreilly.com/product/0636920026013.do
21:38 < systemfault> othiym23: It's really because I did something stupid.. For some reason, I mixed up Q.js with jQuery.Deferred.. and use .done as a success handler :(
21:39 < systemfault> othiym23: But .done has a totally different meaning in Q.js
21:39 < profumo> let me know if you find anything culp
21:39 < culp> profumo: sure thing
21:39 < systemfault> jQuery corrupted me… I beg pardon to the gods of promises
21:45 <@isaacbw> I added some stuff about copying and moving messages: https://github.com/isaacbwagner/marlin
21:45 <@isaacbw> sanity check
21:45 <@isaacbw> :(
21:46 < TehShrike|Work> isaacs: your trolling entertains me
21:47 <@isaacbw> wrong isaac
21:48 < TehShrike|Work> isaacbw: nope https://twitter.com/izs
21:48 <@isaacbw> oh:P
21:48 <@isaacbw> I thought you were talking about my beautiful API design and I was hurt 
21:48 < TehShrike|Work> I would never!
22:00 < Aartsie> Why is it when i do req.session.email = "foo bar" and do console.log(req.session.email) it will display foo bar but when i refresh the page it won't display ?
22:02 < owen1> any idea why kill -9 28247 is not killing it's forked process? http://pastebin.ca/2313587
22:05 < othiym23> owen1: if you kill a process with -9, it doesn't have a chance to clean up after itself
22:05 < othiym23> including any forked child processes
22:09 < superjoe> substack, this seems relevant to your interests: http://howtodrawreallygood.tumblr.com/
22:11 < owen1> othiym23: interesting
22:11 < othiym23> owen1: you should only use -9 to nuke a hung process
22:11 < crabtree> hi friends
22:11 < othiym23> -15 (-TERM) is what I use most of the time
22:11 < nb-ben> hi friend
22:11 < othiym23> hi crabtree
22:15 < cloudbender> noop: wakawaka ... it's a good thing.
22:20 < owen1> othiym23: -9 works on the child, but when doing it on it's dad, the child is still alive. it might be something specific to rackup
22:20 < owen1> (ruby)
22:23 < LowValueTarget> Is there a jade channel?
22:26 < nb-ben> watching directories with node.js is kind of broken I think
22:26 < nb-ben> or I just don't understand how to use it
22:28 < cloudbender> nb-ben does it trigger events on changes ?
22:29 < nb-ben> just triggers rename pretty much
22:29 < nb-ben> only rename and change, but rarely do I ever see change. if I save a file it normally just shows rename
22:29 < nb-ben> I couldn't really understand the behavior
22:30 < cloudbender> what about deletions and adds ?
22:30 < nb-ben> rename
22:30 < nb-ben> is what it pops
22:30 < cloudbender> hmmm
22:31 < nb-ben> and if I rename the directory that's being watched, I don't get the new name of it
22:31 < nb-ben> like, if I have directory a which contains a/a.js and a/b.js
22:31 < nb-ben> if I rename a/b.js to a/c.js
22:31 < cloudbender> is there a way you can try triggering the changes from a different shell ?
22:31 < nb-ben> I get 2 events, rename a/b.js and rename a/c.js
22:31 < nb-ben> what do you mean
22:32 < cloudbender> maybe try having a second shell process be the'changer' and see if that makes a difference.
22:32 < cloudbender> ... to the watcher in the first shell
22:32 < nb-ben> oh, I am doing that manually
22:32 < cloudbender> k
22:32 < nb-ben> opening up nano and sublime and editing stuff
22:33 < nb-ben> I guess I'll just have a complete reload of whatever is being notified instead of actually trying to figure out what changed I'll just take that as a more specific change
22:38 -!- mode/#Node.js [+o isaacbw] by ChanServ
22:40  * cloudbender has encountered the small-mound-of-not-really-doom-but-it-still-sux-anyway
22:43 < Gambit--> damn, neither of the two strongloop guys I know are on.
22:43 < Gambit--> any other node.js internals guys awake?
22:47 < cloudbender> nb-ben is this somehow based on an XML tree ?
22:50 < Gambit--> well that's a huge frickin' race condition.
22:50 < Gambit--> Any joyent guys around?
22:50 < cloudbender> ok array.foreach has solved some problems by way if the (e,i,a) arguments it supplies.
22:51 < nb-ben> cloudbender,  what do you mean ? :P
22:51 < nb-ben> cloudbender, by XML tree
22:51 < cloudbender> becuase it give me an e reference to the actual element, and hence the elements methods where each element is an object
22:52 < cloudbender> oh xml tree, as opposed to a json object
22:53 < zackiv31> anyone seen this error with node.js and trying to make an HTTP request to a secure server: SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error: │../deps/openssl/openssl/ssl/s23_clnt.c:741:
22:54 < cloudbender> nb-ben which module are you working from ? I'll have a look.
22:54 < cloudbender> If I have it.
22:54 < nb-ben> fs.watch
22:54 < cloudbender> k
22:58 < nb-ben> ok lol found a way that works
22:58 < nb-ben> it's kind of stupid but it's better than not using watch
23:01 < cloudbender> were you using watchFile or Watch
23:02 < othiym23> owen1: you can still kill the child process separately, but calling -9 on the parent won't give the parent the opportunity to shut down any child processes it may have
23:03 < cloudbender> I'll play with it (.watch)
23:05 < samholmes> Hello!
23:06 < nb-ben> cloudbender, .watch
23:06 < cloudbender> k
23:06 < nb-ben> hi samholmes 
23:06 < samholmes> nb-ben: how are you?
23:06 < nb-ben> cloudbender, it doesn't seem like .watch is implementing all of inotify's wonderful set of features
23:07 < nb-ben> samholmes, I'm wonderful, how are you? :)
23:07 < cloudbender> ok
23:08 < samholmes> I write a lot of code, but I'd probably be better off building open source github projects of my code. But I find it so tedious when writing code to create a whole new project just to solve the problems I'm facing within a project. For example, I wrote a dynamic photo resizing script that caches resized photos on the request, taking the request parameters into consideration when rendering the photo. Building 
23:08 < samholmes> this took some time, but if I were to create a whole npm module just for this it'd be very frustrating because I'd need to go into module making mode instead of hackathon mode.
23:08 < samholmes> nb-ben: Wonderfully wonderful!
23:08 < samholmes> :)
23:08  * samholmes needs a bloc
23:08 < samholmes> blog
23:11  * CoverSlide needs a glock
23:13 < nb-ben> samholmes, the geniusness is making hackathon mode output module making stuff
23:13 < nb-ben> takes practice :P
23:14 < samholmes> I see.
23:15 < samholmes> Another thing is about intel. prop.
23:15 < samholmes> If I am making something and getting paid to make it, should I still be able to open source it?
23:15 < samholmes> That is parts of it.
23:16 < nb-ben> unless specified otherwise, yes
23:16 < nb-ben> but normally they do specify
23:17 < nb-ben> that the rights to your produce are theirs
23:19 < amurdaca> seeking help about express/connect session stuff storing with mongodb
23:21 < nb-ben> amurdaca if you like I could give you the module I made
23:21 < amurdaca> sure :)
23:22 < amurdaca> what is about?
23:22 < nb-ben> though I'm not sure how stable it is since it's not tested "D
23:22 < samholmes> nb-ben: So how do I write a module that I would use in my code without the IP issues?
23:22 < samholmes> I would have to not log the hours I spend putting into the module?
23:23 < nb-ben> samholmes, you should ask your supervisor
23:23 < samholmes> nb-ben: I suppose I should. Maybe they would sponsor some open source projects. Twitter Bootstrap is open source, yet paid by twitter.
23:23 < nb-ben> amurdaca, it's sessions for mongodb, though I wrote it for use within my distributed network
23:24 < nb-ben> amurdaca, so it is probably not as efficient as it could be in case you are running single-server
23:24 < amurdaca> i see
23:24 < nb-ben> let's see if there's something that already exists
23:24 < nb-ben> if not I'll share my wealth
23:26 < nb-ben> amurdaca, http://stackoverflow.com/questions/6819911/nodejs-expressjs-session-handling-with-mongodb-mongoose
23:29 < Raynos> Anyone have a TTL array of things?
23:31 < othiym23> Raynos: your question intrigues me, but I regret to inform you that I cannot provide you with satisfaction
23:31 < Raynos> I want a queue that preserves insertion order
23:31 < Raynos> and drops the tail if it exceeds the time to live for that value
23:31 < othiym23> TTL in terms of number of insertion operations?
23:31 < Raynos> time to live in terms of time
23:31 < Raynos> each item has a timestamp
23:32 < othiym23> ah
23:33 < chovy> is it possible to run two commands? { node app.js & python api } 
23:33 < othiym23> Raynos: is it anything more complex than having insert() / push() / unshift() check the tail value's TTL as part of adding the new value?
23:33 < chovy> the python won't run until i kill the node
23:35 < brycebaril> Raynos I have something similar
23:35 < Raynos> othiym23: all it needs is `insert` and `toArray` where `toArray` filters out anything too old
23:35 < Raynos> this may be to trivial and specific to my usecase to be worth grabbing a module for :p
23:35 < othiym23> Raynos: it seems to me like you want to reify the TTL at insert time, not use time, don't you?
23:36 < Raynos> Actually I'm wrong
23:36 < Raynos> it's not TTL per item
23:36 < othiym23> guess I don't know enough of the context to figure that out
23:36 < Raynos> it's a windowed approach
23:36 < Raynos> I'm writing an event log for an event source style database
23:36 < Raynos> this thing i'm building is way too specific to my use case
23:36 < brycebaril> I'd suggest looking at 0mq docs or something like that.
23:37 < Raynos> Yeah I dont need 0mq :D
23:37 < Raynos> just hand roll a database in node.js, super easy
23:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:38 < daekano> simple
23:47 -!- mode/#Node.js [+o isaacbw] by ChanServ
23:51 < CoverSlide> chsssh
23:51 < CoverSlide> oops
23:56 < sayd> how would i output version of current package?
23:56 < sayd> npm version shows me more than i need. i just want the current package's ver
--- Log closed Thu Feb 14 00:00:07 2013
