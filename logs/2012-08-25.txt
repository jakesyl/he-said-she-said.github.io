--- Log opened Sat Aug 25 00:00:08 2012
--- Day changed Sat Aug 25 2012
00:00 < deoxxa> you've already told the operating system to bind it to x port
00:00 < timeturner> and the os doesn't question the authorization to bind to the port /after/ dropping privileges?
00:01 < timeturner> or to remain bound
00:01 < timeturner> ^
00:01 < deoxxa> it's already bound to the port
00:01 < deoxxa> nope
00:01 < timeturner> ah I see
00:01 < deoxxa> lemme find some codez
00:01 < timeturner> well that's a neat feature then I guess
00:02 < timeturner> or I guess the os was designed that way otherwise it would be wasting resources on monitoring privilege level all the time
00:03 < deoxxa> oh, i seem to have lost my socket code
00:04 < deoxxa> but yeah the gist of it is that you ask for a socket descriptor from the operating system (which is an unprivileged action), then ask it to bind to a specific port (which is a privileged action if port < 1024), then drop privileges
00:05 < othiym23> Mocha really isn't coded to support users who are wantonly abusing the call stack
00:05 < othiym23> go figure
00:08 < etcetera> anyone using docpad?
00:10 < douh> omg, is just so funy the size of the article to do this node server working without nginx, an npm package must be done for that x.x
00:19 < etcetera> anyone on docpad?
00:19 < ccowan> What are most teams development enviroments like? Do you have an integration enviroment you push your changes to or do you just pass pull requsets around?
00:24 < douh> k, people, i do understand the issue now to drop privileges for the root user in the app. in the end of the article, there's a resume of the code. question, if i was to implement that code in a express app, would i have to modify that code? how complex would be? i'm just starting with networking programming, so i'm not into use my time so much with configuration. 
00:25 < bakadesu> looks like I missed the trollfest
00:26 < douh> lol, it must be all the python and ruby devs with envy that came around,lol
00:27 < bakadesu> ccowan: we using a local, dev, and production environment, with everyone getting their own subdomain  (name.dev.domain) on the dev server
00:28 < bakadesu> we as in the company I work with (not speaking behalf of #Node.js
00:28 < ccowan> bakadesu: That's kind of how I'm doing it right now by myself
00:29 < ccowan> Do you have a seperate database for each dev too?
00:29 < ccowan> like ccowan.dev.domain and then the database would be development_ccowan or something like that
00:30 < ccowan> or ccowan_dev_dbname
00:30 < douh> can i make http serve in another port,other than 80, like port 1025 as default for the server?
00:30 < ccowan> sure
00:30 < ccowan> douh: With node you can pretty much do whatever.
00:31 < ccowan> just change the listen(port)
00:31 < bakadesu> actually working on the database part right now
00:31 < douh> ccowan, what's the unix command for that?
00:31 < ccowan> for node?
00:31 < bakadesu> just working off the live db (yea, I know - it was like that before I got here)
00:31 < ccowan> bakadesu: ha ha
00:32 < cjblomqvist> no unix command, it just works ;)
00:32 < ccowan> douh: there's not unix command. The node application determins the port
00:32 < douh> ccowan i know that
00:33 < douh> ccowan, i want that my server to run in another port, not 80, as it is the default for the fqdn
00:33 < bakadesu> douh: did you mean be able to change ports via command line?
00:34 < ccowan> douh: I guess I'm confused what you're asking? Do you have a node application serving HTTP?
00:34 < bakadesu> douh: or are you already running a webserver on 80
00:35 < douh> the webserver is running at www.mydomain.com:3000/
00:35 < douh> i want it to run at www.mydomain.com
00:35 < bakadesu> what webserver you running?  or are you using node?
00:35 < sx> anyone know how efficient JSON.parse() is?  
00:35 < douh> an express app
00:35 < sx> is it very fast even for objects with 1000 attrs
00:35 < hatch> if I have a node project is there a way that I can document in some sort of file the dependencies of that project then npm that file to download those deps?
00:36 < Dragonblade> Hey guys so Im so close to getting the loop system to work on the player.
00:36 < bakadesu> if I remember correctly, there's a place you specify the port you want to listen to, change that to 80
00:36 < ccowan> douh: so in app.js there should be a line that says something like app.listen(3000);
00:36 < Dragonblade> Just this one error
00:36 < Dragonblade> I need help on XD
00:36 < sx> I'm debating converting my mongodb objects into redis string. 
00:36 < ccowan> douh: change that to app.listen(80);
00:36 < douh> ccowan, yeap, that is right
00:36 < sx> The redis string can be retrieved much faster, but the JSON.parse() may offset the advantage?
00:37 < Dragonblade> Ill put it on my google doc then link it
00:37 < douh> ccowan, that is what i don't want. i want to bind to a port above 1024, to not have issues with root access
00:37 < abc> dv
00:37 < ccowan> ok
00:37 < Guest76106> haha
00:37 < ccowan> so then change it to app.listen(1024);
00:37 < Guest76106>  what?
00:37 < zomg> douh: you're not going to be able to put it on domain.com unless it's on port 80 (or something else on port 80 is proxying it)
00:38 < Guest76106> qua lau
00:38 < Guest76106> vietname
00:38 < zomg> If it's on a port other than 80, it will require domain.com:1234
00:38 < Guest76106> vietnames
00:38 < Guest76106> scs
00:38 < Guest76106> dsd
00:38 < Guest76106> fsfs
00:38 < Guest76106> dsd
00:38 < bakadesu> douh: try sudo node yourapp.js
00:38 < Guest76106> sdsds
00:38 < douh> zomg, care to explain why? that is the exact what i want
00:38 < Guest76106> sds
00:38 < Guest76106> dsd
00:38 < Guest76106> dsd
00:38 < Guest76106> sds
00:38 < Guest76106> sds
00:38 < Guest76106> ds
00:38 < Guest76106> ds
00:38 < Guest76106> d
00:38 < Guest76106> sd
00:38 < Guest76106> s
00:38 < Dragonblade> if this inet will let me....cause apparently my carrier hates when I tether :P
00:38 < Guest76106> dssao do
00:38 < ccowan> ops! Please Kick Guest76106 !
00:38 < maxogden> hah
00:39 < maxogden> i should be opped but im not
00:39 < sx> So I guess my question is: Would it be faster to store JSON as redis (in-memory) strings and then parse into JSON (either server or client) OR store the JSON in mongo (disk) and send raw to server
00:39 < maxogden> Nexxy: OFF WITH HIS HEAD!
00:39 < Guest76106> why?
00:39 < bakadesu> I used to be an OPâ€¦ *coughs*
00:39 < zomg> douh: browsers assume the web server is on port 80 when the port is not specified in the URL. Thus, domain.com is the same as domain.com:80. If the server is on other port than 80, the browser does not know which port it is in, thus you need domain.com:12345
00:39 < Guest76106> s
00:39 < Guest76106> sd
00:39 < Guest76106> ds
00:39 < Guest76106> ds
00:39 < Guest76106> lo
00:39 < Guest76106> lol
00:39 < Guest76106> vd
00:39 < Guest76106> df
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> df
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < Guest76106> fd
00:39 < douh> zomg, great, all i needed to know
00:40 < douh> so i'm bound to 80
00:40 < bakadesu> if you want without :port
00:41 < Dragonblade> https://docs.google.com/document/d/1hc6TRKy9_knyOHzA9cp1Ps61Dr-VtI0JlgNakKs73GU/edit
00:41 < douh> <AAA_awright> Or just setup iptables to route 80 -> 8080 , i think i go for that
00:41 < zomg> douh: yes. One approach you could use is put something like varnish on port 80, and have it forward any connections to whatever port node is running on
00:41 < Dragonblade> so there is my problem
00:41 < zomg> or if you can do it via iptables, then good =) Not familiar with that myself
00:41 < Dragonblade> I search the Priority-Queue.js and can't find it
00:41 < Dragonblade> PriorityQueue.js
00:41 < douh> iptables is a piece of cake
00:42 < douh> i guess i will use it
00:42 < ccowan> Guest79806: Seriously? 
00:42 < douh> AAA_awright, so should i be routing :3000 to :80?
00:43 < bakadesu> ...
00:43 < bakadesu> port 80 requests go to 3000
00:43 < douh> ops, yes, the other way around of what i said
00:43 < ccowan> http://stackoverflow.com/questions/6004657/configuring-ubuntu-server-so-node-js-app-port-3000-is-served-at-a-particular-d
00:44 < ccowan> douh: ^^^^
00:44 < AAA_awright> I'm not actually sure how to pull it off, I think I've tried it before, but normally I just use Nginx as a load-balancer to four Node.js instances
00:44 < AAA_awright> And if you're using a Node.js-based load balancer, it should have an option to change user after binding on port 80
00:44 < ccowan> you can also forward ports via iptables (I saw an example earlier this week)
00:44 < bakadesu> I'm using nginx as a load balancer as well, works well
00:45 < douh> ok, i go with iptables for now and nginx second step
00:45 < ccowan> douh: v
00:45 < ccowan> douh: http://www.cyberciti.biz/faq/linux-port-redirection-with-iptables/
00:45 < AAA_awright> isaacs: Am I the only one who found the nodejs-dev mailing list useful? You should really probably open that up to discussion before you... shut it down for discussion
00:46 < Dragonblade> I give up x.x
00:47 < Dragonblade> Ill just wait till my friend gets online for this issue
00:53 < douh> ccowan, thanks for the link. would you have also a good link regarding the nginx settings for node? i got this one http://wellconsidered.be/post/10519707671/node-js-on-nginx  but not sure if is good, so many times there is misleading info
00:55 < douh> this one looks good also http://shapeshed.com/running-nginx-and-node-in-parallel-on-ubuntu/
00:58 < ccowan> My Nginx server is setup like the first one
00:59 < ccowan> They only reason I'm using nginx is because I'm incrementally moving from PHP to Node.js. I route all the dynamic page request through node then fallback to PHP for anything node can't handel.
00:59 < ccowan> handle
01:00 < ccowan> Nginx is serving all my static content (but that's because I haven't moved it to a CDN yet)
01:01 < ccowan> douh: use the first one
01:02 < douh> ccowan, cool, will do
01:05 < douh> actually, the second link is not for me anyway. i'm not running paralell node is king in my server
01:10 < bakadesu> ccowan: are you serving php through nginx or through node?
01:10 < ccowan> Nginx
01:10 < ccowan> nginx + php-fpm
01:10 < bakadesu> doing any node to php communication?
01:11 < ccowan> yeah... The sessions are shared via Redis
01:11 < ccowan> and PHP hits a bunch of web services on node
01:11 < bakadesu> what about like node calling/running some php functions?
01:12 < ccowan> Nope... PHP is on the way out for us
01:12 < ccowan> our next release will get rid of most of the major parts of PHP
01:12 < ccowan> we will just have a few more sections to purge
01:14 < ccowan> I was hoping to get our site to the point we could serve out of Nodejitsu or soemthing like that but we have one part of the site that uses a java cli app to convert some GPS data.
01:14 < bakadesu> what host are you using now?
01:15 < ccowan> Rackspace
01:15 < ccowan> I'm getting sick of doing dev-ops
01:16 < douh> i got 3 months free with linode.com, pretty fast
01:18 < douh> but that because i was an ex customer, and they wanted me to go back, not a normal promotion
01:18 < douh> i think you can still get 1 year of basic traffic with amazon ec
01:18 < douh> for free
01:18 < Ziggy`> Are there any modules out there for making a realtime activity feed? (posts, comments..)
01:19 < douh> a drupaler?
01:19 < douh> lol
01:20 < Ziggy`> Me?
01:20 < douh> yes, it sounded like a drupal module request somehow
01:20 < Ziggy`> I'm proud to say I've never laid my hands on drupal.
01:20 < douh> ugh, thanks god
01:21 < douh> you should be very proud. i was forced
01:21 < douh> job
01:21 < AAA_awright> It's better than anything else in PHP
01:21 < AAA_awright> ... that doesn't say much
01:21 < AAA_awright> It's still awful
01:22 < douh> drupal is just a piece of junk, i hate it. it brain damages young developers
01:22 < AAA_awright> I started off cloning Drupal
01:22 < AAA_awright> ... BAD IDEA
01:22 < AAA_awright> It set me back by about 6 months heh
01:22 < douh> i'm a drupaler
01:23 < douh> as i said, i was forced, because of the work
01:23 < douh> i also was forced to learn joomla
01:23 < douh> os commerce
01:23 < AAA_awright> Mambo?
01:23 < douh> wp
01:23 < douh> blablabla
01:23 < douh> no, no mambo, just joomla, the son of mambo
01:24 < AAA_awright> Ah alright, Mambo
01:24 < Ziggy`> So, anywho..
01:24 < AAA_awright> Their GPL-only policy can die in a fire. All of them. Especially Wordpress.
01:25 < Ziggy`> Any suggestions, any modules made for social activity streams?
01:25 < douh> AAA_awright, but i don't feel ashamed. i think it made me strong. it made me give real value for clean, pure code
01:26 < douh> Ziggy, i do not know, i'm a beginner with node
01:26 < douh> but, i'm sure that you are looking for websockets, as you want live data, right?
01:27 < douh> socketIO, sockjS
01:27 < douh> maybe i'm saying wrong things, it was a guess x,x
01:28 < Ziggy`> Of course. 
01:29 < Ziggy`> Although, I'm a bit worried about disconnects/connects, but I guess a simple interval with "ping - pong" could solve that. 
01:29 < douh> https://encrypted.google.com/search?q=node.js++social+activity+streams&ie=utf-8&oe=utf-8&client=ubuntu&channel=fs
01:29 < douh> it has some good results there
01:29 < substack> Ziggy`: socket.io already has a heartbeat mechanism
01:29 < Ziggy`> However, is it normal to have a bunch of events?
01:29 < substack> (which is really annoying to turn off)
01:30 < Ziggy`> substack: Oh? In this case that's good then.
01:30 < LordThumper> Is socket.io used in all node.js chat implementations?
01:30 < lohkey> i wish upnode was usable with sockjs
01:30 < lohkey> or is it?
01:30 < Ziggy`> LordThumper: Pretty sure it is, at least the examples I've seen.
01:30 < LordThumper> Ah I see
01:30 < substack> lohkey: you can use shoe with dnode
01:31 < LordThumper> Yeah I used socket.io, pretty easy to use
01:31 < lohkey> oh yeah, forgot about that
01:31 < LordThumper> Will maintain the tunnel and even restore it if you restart server
01:32 < lohkey> LordThumper: i worry about people who are actually storing that much state associated with their websocket connections though in such a closely bound manner
01:33 < LordThumper> lohkey: What do you mean?
01:33 < Ziggy`> Would it be considered alright keeping over 20-30 listeners at a time?
01:34 < LordThumper> Don't see why not
01:34 < Ziggy`> For instance, one listener for new feeds, and a listener for each comment section for a feed.
01:35 < LordThumper> To be honest, I only used a couple
01:36 < LordThumper> But I don't think the number of listeners would effect the overhead
01:36 < LordThumper> As long as the tunnel is kept alive I mean
01:37 < LordThumper> But don't take my word, I am just getting started with node
01:37 < Ziggy`> I'll do some researching.
01:38 < Ziggy`> But I'm thinking if it could add up to too many listeners, Let's say if there appears 20 feed items on page load, and when you scroll down. You load another 20, we're then up to 40 listeners.. and every time you keep scrolling, more listeners..
01:39 < lohkey> Ziggy`: wrong approach
01:39 < lohkey> have more general listeners
01:39 < Ziggy`> Yeah, I thought so.
01:39 < lohkey> think along the lines of how delegated events work with even propagation in the DOM
01:40 < lohkey> s/with even/withing/
01:40 < lohkey> -g
01:40 < purr> lohkey: No search results found.
01:40 < Ziggy`> Mmh, could you put up an example?
01:41 < LordThumper> Put a listener on the parent div
01:41 < lohkey> to busy atm, but you really only need one listener per message type
01:41 < LordThumper> Then add children items .on('feed')
01:44 < douh> should i set folder and file permissions to 755/644 in my express/node app?
01:44 < LordThumper> socket.on('feed', function (data) { $("<span/>").text(data).appendTo("div.feed"); })
01:44 < LordThumper> Something like that with jQuery
01:45 < LordThumper> Not sure if that is what you meant...
01:45 < Ziggy`> LordThumper: Nah, not like that.
01:45 < Ziggy`> LordThumper: It's quite more complex.
01:45 < LordThumper> Oh ok
01:45 < lohkey> i think he was talking about listeners on the actual socket
01:45 < lohkey> actually, no you covered that
01:46 < Ziggy`> He covered that, although I was more thinking of seperately appending data (only updated data) to specific sections.
01:47 < LordThumper> Well if I understand well, you are going to emit several data from the server
01:47 < Ziggy`> LordThumper: Something more like if someone commented on #feed_2741, it would append to the comment section of #feed_2471, And for new items, I could have a general socket for "feed".
01:47 < Ziggy`> socket/listener.
01:47 < LordThumper> Yeah you could
01:48 < LordThumper> socket.on("newfeed", handler
01:48 < LordThumper> socket.on("chatitem", handler
01:48 < LordThumper> socket.on("userjoinedroom", handler
01:48 < lohkey> Ziggy`: you just return the feed/comment number to append the rest of the payload to
01:48 < Ziggy`> That's a suggestion. 
01:48 < Ziggy`> Of course! Why didn't I think of that
01:49 < Ziggy`> I just keep a handler for that, and have a listener for feed-comment.
01:49 < Ziggy`> Then I go through the data to see what was updated, and append that to the right container.
01:49 < LordThumper> You can emit objects too if you want from server-side
01:49 < LordThumper> It serializes/de-serializes everything for you
01:49 < Ziggy`> LordThumper: Yeah, makes sense, I would emit the latest updated feed-comment, or feed.
01:50 < LordThumper> Yeah, think of every action the users make as an event
01:50 < LordThumper> Listen for them on server side
01:50 < LordThumper> Then broadcast/emit updates/changes to the clients
01:52 < LordThumper> Let me copy some of my code to pastebin
01:52 < Ziggy`> LordThumper: Thanks..
01:53 < Ziggy`> Although, I'm thinking this could get more complex, if it's user specific? For instance if the feed would only be showing your friends feeds. Then I couldn't emit a general "feed" listener.
01:54 < LordThumper> You can emit a message to a client
01:54 < LordThumper> Or to everyone connected
01:54 < mscdex> node.js rules!
01:55 < Ziggy`> LordThumper: So I could emit to specific clients.
01:55 < LordThumper> Yeah
01:56 < LordThumper> But you might need to use another node.js module to manage clients
01:56 < LordThumper> I was suggested Passport, but I haven't tried it yet
01:56 < Ziggy`> I see..
01:57 < Ziggy`> Well, I've got a "general" feed, then a "friends" feed.. so things could get more complex because of that, but as you said it's possible to manage this.
01:59 < Ziggy`> I'd just have to have 2 listeners then "general-feed" and "friends-feed", and emit to the friends-feed based on client. And emit everything to the general feed.
01:59 < LordThumper> http://pastebin.com/CDCZnsKs
02:00 < LordThumper> Just try code something out, it is pretty easy
02:00 < LordThumper> The hard part is getting used to async code and all those callbacks
02:00 < Ziggy`> Yeah
02:00 < Ziggy`> Yeah, That's a nice example you gave me.
02:00 < Ziggy`> I'd just emit "userFeed" then when someone inserts something.
02:01 < LordThumper> Yeah
02:01 < Ziggy`> I'll try this out ;-)
02:01 < LordThumper> Yeah gl :)
02:05 < mscdex> anyone know if ArrayBuffers are available in node in c++ land?
02:16 < mscdex> oh wow.... using Array->Set() is signficantly faster than Object->Set()... at least for arrays with a preset length :O
02:17 < mscdex> either that or it's all the String::New() calls for the object keys that is slowing things down
02:17 < mscdex> :S
02:17 < monad> :S
02:22 < mscdex> with plain arrays with non-binary data, i can meet or beat libmysql in this select query benchmark :D
03:06 < AnonymousFunctio> 'evevning everyone.  Does anyone know of a JavaScript HTTP client?
03:06 < Ziggy`> Can I somehow retrieve what's in the session using Express, inside a socket listener?
03:07 < AnonymousFunctio> I need to make a client to some servers that are not fully HTTP compatible.
03:07 < Aria> AnonymousFunctio: require('http') ?
03:07 < AnonymousFunctio> Node's built-in client fails
03:07 < Aria> Ah, interesting. In what way?
03:07 < coderarity> AnonymousFunctio, request
03:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:07 < AnonymousFunctio> Node's http.request() does not work for SHOUTcast servers, as they return ICY 200 OK instead of HTTP 200 OK on their status line.
03:07 < AnonymousFunctio> That's the only difference
03:08 < coderarity> then it's not really HTTP
03:08 < AnonymousFunctio> Yes, yes, I know that.
03:08 < coderarity> gonna have to parse that yourself it sounds like
03:08 < Aria> Or just edit the node parser to tolerate that.
03:08 < coderarity> Aria, I think the node parser is in C++
03:08 < AnonymousFunctio> Exactly!  Here's what I've done so far...
03:08 < AnonymousFunctio> I looked into modifying the built-in HTTP stuff, but it is in fact compiled into Node, and not JS.
03:08 < Aria> Indeed.
03:08 < Aria> But not that comple.
03:09 < AnonymousFunctio> therefore, I'd have to release a custom copy of Node, which isn't going to work for me, unfortunately.
03:09 < Aria> Not for that small a change.
03:09 < AnonymousFunctio> So what I've done is create a mini-proxy built in.
03:09 < Aria> Aaaah. Or a module that did the parsing.
03:09 < coderarity> i think someone from a nodeup wrote a javascript parser
03:09 < AnonymousFunctio> There is a socket server that connects to the remote server, and then the app connects to itself.
03:09 < AnonymousFunctio> When the status line comes in, I re-write it, and then let Node's HTTP client to the rest.
03:10 < AnonymousFunctio> However... it is a bit buggy.  It's hard to synchronize the states of both sockets, error messages are lost, etc.  I'd rather simplify the process by swapping out the HTTP client in the first place, if possible.
03:11 < AnonymousFunctio> coderarity: Do you remember the name?
03:11 < coderarity> AnonymousFunctio, https://github.com/substack/node-parsleyhttps://github.com/substack/node-parsley
03:11 < coderarity> https://github.com/substack/node-parsley
03:11 < AnonymousFunctio> coderarity: I looked at that today... it's for the server end only, not client side.
03:12 < maslo> hi guys I'm pretty new to ubuntu ;x I'd appreciate it if anyone could help me out, I installed nodejs by getting the source code and using make and it works fine but I'm trying to install ws and websocket using npm install websocket but it doesn't seem to work it says I need a native code compiler..?
03:12 < AnonymousFunctio> Otherwise, it's exactly what I need.
03:12 < AnonymousFunctio> Ideally, there would be a standard component with hooks for pre-parsing of data or something.  That would be the cleanest implementation.
03:14 < coderarity> maslo, maybe `npm install gyp`, but if you could gist the errors that'd help, gist.github.com
03:14 < coderarity> AnonymousFunctio, oh, you're sending an HTTP request?
03:14 < AnonymousFunctio> coderarity: Yes, I need to be the client to a broken server.
03:15 < AnonymousFunctio> coderarity: My application will be the HTTP client, connecting to the sort-of-HTTP server.
03:17 < coderarity> AnonymousFunctio, that's easy, just like `var client = net.connect({host: "whatever.com", port: 80}, function () { client.write('GET /ipath ICY\r\nHost: www.whatever.com\r\n\r\n'); });`
03:18 < AnonymousFunctio> coderarity: That's my next step if I can't find where someone has already made something a bit more robust.  I'd rather not re-invent the wheel if I can help it.  (Transfer encodings, following redirects, etc.)
03:19 < coderarity> AnonymousFunctio, just read node-parsley's code
03:19 < coderarity> just write node-parsley-client real quick :P
03:19 < AnonymousFunctio> coderarity: Node-parsley is for the server-side, and doesn't have code for the client.
03:19 < AnonymousFunctio> Ha, yeah
03:19 < AnonymousFunctio> Maybe that will be my project for the evening.
03:19 < AnonymousFunctio> I just figured I'd ask around to see if it already existed first.  :-D
03:20 < coderarity> AnonymousFunctio, it reads the request and returns a response - you just need to write a request and read a response instead :D
03:20 < coderarity> AnonymousFunctio, can search npm to double check
03:20 < AnonymousFunctio> This afternoon, I read through the source code of 80 or so http clients on NPM.  All used Node's http.request.
03:21 < coderarity> AnonymousFunctio, yeah, it's apparently way faster than a javascript one
03:21 < AnonymousFunctio> No doubt.
03:21 < AnonymousFunctio> Fortunately for me, I'm only making a handful of requests.
03:21 < AnonymousFunctio> I will still be using the native stuff for serving, which is where I really need that compiled code performance.
03:22 < maslo> installed gyp and tried again but it says the same error
03:22 < maslo> [websocket v1.0.7] Attempting to compile native extensions. [websocket v1.0.7]     Native code compile failed!!
03:23 < coderarity> maslo, i think it still works after thatâ€¦ is that the only error?
03:24 < maslo> yeah it's the only error
03:26 < AnonymousFunctio> Ok, work has begun on HttpClient compatible with the native http.request API
03:27 < AnonymousFunctio> I feel like such a bum, ha, I'm sitting on my roof, surrounded by neighbors partying it up, writing JavaScript.  :-D
03:27 < coderarity> maslo, just to clarify, `npm i node-gyp -g`?
03:27 < coderarity> AnonymousFunctio, get some vodka or something and it'll seem way more fun
03:27 < coderarity> ;P
03:28 < AnonymousFunctio> coderarity: Normally I would, but I already took some sleep medication, so that would not be a good combination, ha.
03:28 < coderarity> oh yeah, probably shouldn't kill yourself
03:28 < AnonymousFunctio> The Ballmer Peak is real... or so I've convinced myself on several occasions.
03:28 < coderarity> i always seem to go past it REALLY fast
03:28 < maslo> did npm i node-gyp -g and lots of gets and what not popped up but i still get the same error
03:29 < TehShrike> What's the maximum call stack size for node.js?  And can I increase it? :-P
03:29 < coderarity> maslo, okay, well, can you paste all of that stuff you get now to gist.github.com?
03:30 < maslo> when i do npm i node-gyp -g or when i do npm install websocket?
03:31 < coderarity> npm install websocket, assuming it changed
03:31 < coderarity> but if npm i node-gyp -g failed then send that
03:32 < maslo> https://gist.github.com/bc8b16842b0211b816c8
03:33 < coderarity> maslo, what system are you on?
03:33 < maslo> ubuntu11
03:33 < maslo> sorry if it's something silly I'm pretty new to linux in general
03:33 < coderarity> maslo, sudo apt-get install build-essential
03:33 < maslo> I got the vps recently and yeah
03:33 < maslo> I think I did that earlier let me check
03:34 < coderarity> alright, you probably did
03:34 < maslo> yeah already installed
03:34 < maslo> it
03:34 < maslo> ;x
03:35 < coderarity> maslo, `npm install websocket --websocket:verbose`
03:35 < coderarity> maslo, and then paste the output to that
03:36 < coderarity> to gist.github.com of course
03:36 < maslo> https://gist.github.com/3de2a13823e894cb5382
03:37 < coderarity> maslo, what's your python --version?
03:37 < maslo> Python 2.7.1+
03:37 < coderarity> maslo, no, like, run `python --version`
03:38 < coderarity> wait, is that it? really?
03:38 < coderarity> i've never seen that O_o
03:39 < maslo> that's what it says
03:39 < maslo> Python 2.7.1+
03:41 < maslo> and i dunno I didn't installed it myself the vps came with lots of stuff pre-installed and im not too good with ubuntu to know what is neccesary and what isnt
03:43 < coderarity> maybe just `sudo apt-get upgrade`
03:43 < Jay__> what? this many ppl?
03:43 < Jay__> it cannot be
03:44 < coderarity> maslo, but sudo apt-get update first
03:44 < maslo> ok well it's upgrading lots of stuff
03:44 < coderarity> yeah
03:45 < maslo> ill retry to get websocket after, just want you to know im thankful for helping me btw
03:45 < coderarity> i don't know how to just upgrade python, lol
03:45 < coderarity> i use a mac :P
03:45 < Jay__> ok, so guys, anyone familiar with pubnub?
03:46 < coderarity> maslo, it's np, i'm used to helping people :D
03:46 < Jay__> is regular pubnub a polling service, as oposeded to socket.io?
03:46 < maslo> ok well lots of stuff upgraded but I still get the same error ;x 
03:46 < Ziggy`> Is it possible for nodejs to get session info that was stored on another http server? I'm thinking not?
03:47 < Ziggy`> On the same machine of course.
03:47 < Aria> Depends on where it's stored.
03:47 < Aria> The answer is 'yes', but the effort involved varies greatly.
03:47 < Ziggy`> I see.
03:48 < coderarity> maslo, it's the dumb python version, i wonder if we can override it in node-gyp somewhere
03:49 < Ziggy`> Since in my app (PHP) I store the ID of a user, to use later on with inserts, perhaps I should stick to letting PHP just do the inserts to the db as it was (using ajax), and just using socket io to emit ajax success.
03:49 < Ziggy`> Would that be considered bad practice?
03:50 < Ziggy`> to emit on*
03:50 < Aria> It works, but it's a complex architecture.
03:50 < Aria> If you're talking PHP sessions, they're relatively readable files in /tmp by default
03:54 < Ziggy`> Aria: Okay, do you have any tips how I would read the current session?
03:54 < Aria> Well, given the id, read /tmp/sess_thesessionid
03:54 < Aria> What information do you want out of it?
03:54 < Aria> PHP Serialize format is not that far from JSON in concept, though it has length tags embedded in the data.
03:55 < Aria> So things like s:5:hello means "string, 5 bytes, 'hello'"
03:55 < maslo> coderarity: you still looking into it ? :X
03:55 < Ziggy`> But how would I read the session from nodejs?
03:56 < Ziggy`> from socket io
03:56 < coderarity> maslo, yeah
03:57 < Aria> open the file, read it, parse it, use it.
03:57 < Ziggy`> Aria: Yeah, but I'd need the session id to be able to locate it right?
03:57 < Aria> Yep.
03:57 < Aria> Which should be in a cookie if it's the same origin
03:58 < Jay__> ok, let me try again
03:58 < Jay__> anyone using PubNub?
04:00 < Ziggy`> Aria: How do I retrieve the cookie from within socket io?
04:00 < Ziggy`> client.request.?
04:00 < Aria> Not actually sure, but I think so
04:00 < coderarity> maslo, you should just build python manually, whatever man. basically this curl -so python.tgz http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tgz &&  tar -xzf python.tgz && cd Python-2.7.2/ && ./configure && make install
04:00 < coderarity> huge command took a while to put together :P
04:01 < coderarity> that's gonna take a while btw
04:02 < substack> wow meteor isn't even on npm anymore
04:03 < maslo> doing it, ill tell you how it goes after~
04:04 < Ziggy`> aria: Thanks, its client.handshake.headers.cookie
04:04 < Aria> Awesome!
04:04 < coderarity> *facepalm*
04:05 < coderarity> it saved it as python.exe even though it's a unix file
04:06 < coderarity> make install will name it as the right thing tho
04:06 < maslo> ls
04:07 < maslo> oops
04:07 < maslo> same error :/
04:08 < Ziggy`> Aria: However, I'm thinking, how will I parse the cookie? I've tried using connect's util, but it seems it's been removed in the version I'm using of nodejs
04:08 < coderarity> maslo, oh, i wasn't done
04:08 < coderarity> maslo, after that, you need to make sure /usr/local/bin comes before /usr/bin in your $PATH
04:08 < maslo> how ;x
04:09 < coderarity> maslo, or you can just do `PYTHON=/usr/local/bin/python npm install websocket`, that's probably easier
04:09 < Aria> Ziggy`: `npm search cookie`
04:09 < maslo> same error :X
04:09 < coderarity> maslo, `/usr/local/bin/python --version`?
04:10 < maslo> 2.7.2
04:10 < coderarity> maslo, well, at least that's right...
04:10 < coderarity> maslo, like `npm install websocket --python /usr/local/bin/python` maybe?
04:11 < coderarity> PYTHON= should workâ€¦ but I suppose it didn't?
04:15 < maslo> https://gist.github.com/22ba746f49819ab935f8
04:16 < coderarity>  i guess i did that command wrong
04:16 < coderarity> sec
04:16 < coderarity> maslo, yeah, like this `npm install websocket --python=/usr/local/bin/python`
04:18 < maslo> save error :/
04:18 < maslo> the native code compile failed
04:18 < Aria> That's it? No more detail?
04:19 < Aria> What's in that npm-debug.log?
04:19 < coderarity> maslo, D:< alright let's see it then, `npm install websocket --websocket:verbose --python=/usr/local/bin/python`
04:19 < coderarity> Aria, it's cuz he's gotta add --websocket:verbose
04:19 < Aria> Ah, yeah
04:19 < coderarity> Aria, kinda stupid, should just show that by default IMO
04:19 < maslo> https://gist.github.com/933e1c385fc46ddbbbbf
04:20 < coderarity> maslo, yeah, like it says, you're using a development version of node
04:20 < maslo> ah? like I said I downloaded the source ont he website
04:20 < maslo> and used "make" 
04:21 < coderarity> maslo, hmmm, not sure where you got that source, should have been http://nodejs.org/dist/v0.8.8/node-v0.8.8.tar.gz
04:21 < maslo> am I suppose to get it another way?
04:21 < maslo> http://nodejs.org/dist/v0.8.8/node-v0.8.8.tar.gz
04:21 < maslo> yeah
04:21 < maslo> that's where I got it
04:22 < coderarity> maslo, i suggest `git clone https://github.com/joyent/node && cd node/ && git checkout v0.8.8 && ./configure && make install`
04:22 < coderarity> maslo, way easier to update that way
04:23 < coderarity> lemme check this out though, that may be a mistake
04:24 < coderarity> maslo, i swear this doesn't usually take this long :P
04:24 < maslo> doing it as we speak ill let you know
04:24 < maslo> I don't doubt it lol
04:24 < coderarity> maslo, seems like you've just hit some bad luck
04:24 < coderarity> with that python version problem and now node
04:24 < maslo> while you're at it you mind if I ask other ubuntu11-related questions?
04:24 < maslo> while it's making
04:24 < coderarity> maslo, i might not know, but you can try
04:25 < crassus> what is maslo trying to do?
04:26 < coderarity> crassus, `npm install websocket` that uses native extensions
04:27 < maslo> same error coderarity :X
04:27 < coderarity> maslo, `node -v`?
04:27 < crassus> to use websockets with python or it uses python to install websockets for node?
04:27 < maslo> v.0.9.1-pre
04:28 < coderarity> maslo, that should not be.
04:28 < coderarity> maslo, `/usr/local/bin/node -v`? and then `/usr/bin/node -v`?
04:28 < maslo> first one is the pre one
04:28 < maslo> second one says no such file
04:29 < coderarity> maslo, so you know that node directory that you `git cloned` and went into? can you go there and show me the output of `git branch`?
04:30 < coderarity> maslo, maybe we better move into PM? this is a lot of spam :P
04:30 < crassus> coderarity: ^
04:30 < maslo> well no one else is really talking but ok
04:31 < SomeoneWeird> keep talking here
04:31 < coderarity> maslo, well, people like me have noises when people talk in a channel :P
04:31 < SomeoneWeird> then somebody else can help too
04:31 < crassus> I'm just a little intrigued by that --python=/usr/local/bin/python bit
04:31 < coderarity> crassus, so his version of ubuntu is weird
04:32 < coderarity> and the python version actually ended up being Python 2.7.1+ which isn't a valid semver
04:32 < coderarity> that made node-gyp mad
04:33 < coderarity> this has happened before, I guess python does not like having reasonable or predictable version numbers
04:33 < crassus> yeah, i'm wondering what exactly npm's websocket package and python have to do with each other ^_^
04:35 < coderarity> maslo, i think you need libssl-devel
04:35 < coderarity> maslo, sudo apt-get install openssl-devel
04:36 < coderarity> i actually don't know, i just guessed, it's either openssl-devel or libssl-dev
04:36 < coderarity> maslo, it's sudo apt-get install libssl-dev
04:36 < SomeoneWeird> libssl-dev for ubuntu
04:36 < maslo> already have it
04:37 < maslo> at the newest version
04:38 < coderarity> why does your python not have bz2â€¦ lawl
04:38 < coderarity> maslo, okay, so this fails. you need to `sudo apt-get install libbz2`
04:39 < coderarity> maslo, and then you have to go back to your Python-2.7.2 directory and `./configure && make && make install`
04:39 < SomeoneWeird> install the dev package too
04:39 < coderarity> maslo, oh, and do `sudo apt-get install libbz2-dev` before doing the python thing
04:41 < coderarity> maslo, and then `make install` in the node directory after you've done all that
04:41 < coderarity> we're having fun tonight, just problem after problem. lololol
04:42 < SomeoneWeird> he's gunna have to recompile node
04:42 < SomeoneWeird> make clean && make && make install
04:42 < coderarity> SomeoneWeird, `make install` does that
04:42 < coderarity> SomeoneWeird, didn't complete successfully anyways, whatever`
04:42 < SomeoneWeird> it shouldn't..
04:44 < SomeoneWeird> to run 'make install' you need to have node compiled
04:44 < SomeoneWeird> so it doesn't compile it.
04:44 < coderarity> it's a makefile
04:44 < SomeoneWeird> no shit, and look what 'make install' does
04:44 < coderarity> it built node for me
04:45 < SomeoneWeird> heh
04:46 < coderarity> and if he doesn't make clean first he won't have to rebuild all that other stuff
04:46 < SomeoneWeird> if you run compiles over multiple cores it barely takes any time
04:47 < coderarity> SomeoneWeird, sounds like a VPS, probably isn't that fast or multicore
04:47 < coderarity> SomeoneWeird, actually, he said it's a VPS
04:47 < maslo> thank you so much coderarity it works i installed websocket & ws without any problems they compiled!! :)
04:47 < SomeoneWeird> and the reason he's not using binaries is?
04:47 < coderarity> maslo, no way man
04:47 < coderarity> maslo, NO WAY
04:48 < coderarity> SomeoneWeird, because this is the *right* way to do it
04:48 < SomeoneWeird> mmmmmk
04:48 < coderarity> SomeoneWeird, ;P
04:50 < Jay__> Hi
04:50 < Jay__> question about game develoment!!
04:50 < coderarity> Jay__, sup?
04:50 < coderarity> Jay__, omg!
04:50 < Jay__> sorry
04:50 < Jay__> anyway, do you think socket.io would be a good/acceptable choice as a backend for a game such as FarmVille or The Sims Social or Mafia Wars (Facebook)  ?
04:51 < Jay__> or long polling would be a better fit, due to it scalling much easier than websockets?
04:52 < coderarity> Jay__, DEFINITELY socket.io
04:53 < etcetera> anyone have a static site generator they like?
04:54 < coderarity> etcetera, you could check out https://github.com/flatiron/blacksmith - we use it at the nodejitsu.com blog
04:55 < etcetera> coderarity: nice. any reason to use it over the others?
04:56 < etcetera> I'd like to see a nice ecosystem of themes as well.
04:57 < coderarity> etcetera, there's not really a bunch of themes, so maybe it's not for you
04:57 < coderarity> pretty straightforward piece of code though
04:57 < etcetera> coderarity: tried docpad?
04:57 < etcetera> seems to have a larger following?
04:57 < coderarity> i have not
04:57 < Jay__> coderarity, but.... these games are not really multiplayer ... :(
04:58 < coderarity> Jay__, if the server is sending stuff to the client, it's probably better to just use socket.io
04:58 < coderarity> Jay__, socket.io will use long polling if it needs to
04:59 < etcetera> coderarity: just need something like jekyll with some themeing.
04:59 < etcetera> just need a cheap way to write up a blog without github.
05:00 < Jay__> coderarity, what about vanilla  pubnub connection, as oposed to socket.io?
05:01 < CIA-1> libuv: Shigeki Ohtsu master * r343be71 / src/win/signal.c : windows: remove superfluous uv__handle_start - http://git.io/SrfrEg
05:04 < Jay__> coderarity, I've heard of tests where  a single socket.io instalation will be able to send not much more a few thousand msgs per second, depending on server CPU
05:05 < coderarity> Jay__, long polling is slower than socket.io
05:05 < Jay__> yes, I know it's slower
05:05 < Jay__> my point is scalability
05:06 < Jay__> a few thousands message per second for a facebook game that gets featured in big portal... is just not enough
05:06 < coderarity> Jay__, about scale, we have "this is now" running at nodejitsu with like 524 users on 2 256 MB drones
05:06 < Jay__> (my guess)
05:06 < anandhegde> hello, i am a beginner and I dont know node.js, this is my project requirement - I should be able to embed a google docs presentation on a page and the forward and backward buttons control for this page will be on another page, i.e, buttons on another page should control the presentation in the first page, can this be done using node.js ?
05:07 < timeturner> anything can be done with node.js
05:07 < coderarity> Jay__, it's just a TCP socket, if you're sending too many messages you probably need to rethink the way your app works
05:07 < timeturner> the question is, "can you do it"
05:07 < anandhegde> oh ok, do you have any inputs on how to proceed?
05:07 < coderarity> anandhegde, just as well as anything else, this stuff you're talking about is mostly client-side anyways
05:07 < anandhegde> timeturner
05:08 < Jay__> coderarity, in theory yes, but what I see in the market right now is that current commercial socket server offerings using TCP have to go quite a distance to optmise and be able to handle +10,000 simultaneus connections smoothly
05:09 < anandhegde> coderarity: any tutorials or guides which help me do what I want?
05:11 < anandhegde> any hints on how i should proceed would be great! :( coderarity timeturner
05:11 < coderarity> anandhegde, not that i know of, but maybe check out https://developers.google.com/google-apps/documents-list/
05:14 < sk8ball> is nodejs+express+mongodb+mongoose appropriate for storing and serving 150+ records up via a web api?
05:14 < anandhegde> coderarity: ok, suppose i have an API which will give me a particular slide of a presentation, how would i go about handling the "control one page from another page" part? coderarity
05:14 < sk8ball> very small recordset i know
05:14 < coderarity> anandhegde, javascript + XMLHttpRequest
05:15 < sk8ball> oh and a another 50 or so records in another table
05:15 < coderarity> anandhegde, https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest
05:15 < sk8ball> or collection rather
05:20 < acak> @sk8ball can the records be written to or do they hold static values?
05:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
05:30 < Ziggy`> so I'm working with node, I've got the http client set up, listening on "app.local", - However when I print out "hostname" in nodejs, I always see host:'localhost:1337', and referer/origin http://app.local:1337/, I need to have the nodejs app run on app.local, what shall I do?
07:10 < maxogden> Ziggy`: host is set by the client not the server
07:18 < Jay__> coderarity, in this post from zinga you can deduce that their games don't use traditionally use websockets at all.
07:18 < Jay__> http://code.zynga.com/2011/10/going-all-in-on-zynga-poker-html5-2/
07:19 < Jay__> poker seems to be an exception, due to the nature of the game that requires really fast interactivity
07:25 < wookiehangover> show and tell time: http://b.gif.ly/
07:29 -!- mode/#Node.js [+b *!*@gateway/web/freenode/ip.98.154.231.236] by ChanServ
07:29 -!- TheEmpath was kicked from #Node.js by ChanServ [User is banned from this channel]
07:54 <@konobi> morning all
08:11 < thomasfr> good morning
09:34 < thanpolas> anyone with everyauth expertise ?
10:00 -!- mode/#Node.js [+o konobi] by ChanServ
10:33 < diverdude> How do you guys handles parts in js files which should only be allowed for users which are logged in? (browser side)
10:34 < gblock> #shamelessplug We're planning a JS conf style event in Shanghai, HuJS. Sept 14 to 16th. More detail here: http://hujsconf.ap01.aws.af.cm
10:34 < maxogden> FEATURING SUBSTACK!
10:36 < gblock> yup!
10:37 < TheMKay> Hi, I'm using http with zlib to request compressed data from an http-server and then decompress the data. First I need the raw-bytes to determine if the download-limit was exceeded and then convert the data to a utf8 string (buffer.toString). The goal is that the user can process each text-chunk of data separately. However utf8 supports multi-byte characters. So if the first data-chunk contains the first byte of the character and the second ch
10:37 < TheMKay> unk contains the second byte, then the character is "damaged". How can I achieve that the user gets only the real characters?
10:46 < rvagg> j
10:47 < rvagg> err..... stray finger, sorry
10:47 < maxogden> not cool man
10:47  * rvagg hides
11:02 < niloy> how do I upgrade node on ubuntu?
11:03 < milani> hi. npm publish returns unauthorized access even I'm the author.
11:03 < milani> npm whoami returns milani, and package author is milani too.
11:05 < rvagg> niloy: see the Ubuntu section here, https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
11:06 < niloy> rvagg, thanks
11:06 < rvagg> niloy: the packages are kept very up to date by Chris Lea
11:19 < elegos> hello! I've got some problems running the h5bp's grunt script... i.e. the resulting pages are not the same as the original work... may anyone please help me troubleshooting it? Thanks
11:20 < elegos> i.e. original work: http://wgm.elegosproject.org/ built work: http://wgm-publish.elegosproject.org
11:22 < milani> there is something wrong in npm
11:22 < milani> for each package I want to publish I should reset my password
11:22 < milani> I reset I can publish a module. for the second one I receive unauthorized access.
11:23 < freewil> milani, how many packages are you publishing?
11:24 < freewil> i wonder if it's an antispam protection you're butting up against?
11:24 < milani> npm has antispam?!
11:24 < milani> it is the 4th
11:24 < freewil> hmm maybe
11:24 < freewil> there was a recent incident where someone was publishing spam packages
11:26 < milani> ok then I wait for some hours.
11:33 < milani> isaacs, plz check npm authentication
11:46 < elegos> where should I ask about grunt.js?
11:58 < israel> can anyome help me a bit with a strange problem with S3 ? I tryed knox and awssum, and still the same
12:08 < israel> anyone?
12:08 < RLa> got an error?
12:10 < israel> for awsum I get "Your socket connection to the server was not read from or written to within the timeout period. Idle connections will be closed"
12:10 < israel> for some files
12:11 < RLa> hm weird
12:11 < israel> I think id depends on the file size
12:12 < RLa> hm, haven't used s3 myself
12:13 < RLa> your program hangs before that message appears?
12:13 < israel> no
12:13 < RLa> you upload multiple files at once?
12:13 < israel> this message is from a node script I wrote to migrate actual files
12:13 < ACK__> hi the latest version od node is 0.8.8 but my Ubuntu 12.04 shows v0.6.12 => Why?
12:14 < RLa> maybe ubuntu has old version as package?
12:14 < ACK__> i use sudo apt-get install nodejs => terminal command
12:14 < israel> no, I uploaded more than once before and that went bad, so I'm uploading once at the time
12:15 < RLa> can you paste your code somewhere
12:15 < RLa> the part that sends files
12:15 < ACK__> node 0.6.12 does not contain npm
12:15 < ACK__> how to install node 0.8.8 on ubuntu 12.04
12:16 < RLa> i would install from source
12:16 < RLa> you need build-essential for that
12:16 < ACK__> can you give link of any blog
12:16 < israel> check it out http://paste.bradleygill.com/index.php?paste_id=390793
12:17 < RLa> ACK__, first link from google: http://www.hacksparrow.com/how-to-install-node-js-on-ubuntu-linux.html
12:18 < gildean> just do sudo add-apt-repository ppa:chris-lea/node.js and then sudo apt-get update && sudo apt-get install nodejs npm
12:21 < RLa> israel, what is var i = 0; if(i < files.length ) pushFile(files[i], i, files); supposed to do?
12:22 < RLa> ah, i see, just clever code
12:22 < israel> yeah
12:22 < deltab> clever how?
12:23 < Ards> Good Morning guys
12:23 < RLa> deltab, non-clever code would use 0 in place of i
12:23 < deltab> to get  if (files.length > 0) pushFile(files[0], 0, files);
12:23 < RLa> anyway, code seems fine
12:24 < Ards> Getting this error : TypeError: Object #<IncomingMessage> has no method 'flash' when using the following req.flash('info', "You're logged in as #{req.session.currentUser}");. Any idea why?
12:24 < SomeoneWeird> express3 doesn't have flash anymore ards
12:24 < Ards> oh
12:24 < Ards> is there a replacement ?
12:24 < Ards> or something else I can use?
12:24 < gildean> connect.flash
12:24 < SomeoneWeird> nah
12:24 < SomeoneWeird> use
12:25 < israel> I see nothing like this problem on knox or awssum issues, or in any place
12:25 < SomeoneWeird> https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x
12:25 < israel> :S
12:25 < SomeoneWeird> ards ^
12:25 < Ards> oh man, the PeepCode video tutorial is so outdated
12:25 < Ards> thanks alot!
12:25 < SomeoneWeird> :)
12:25 < Ards> req.flash() (just use sessions: req.session.messages = ['foo'] or similar)
12:26 < Ards> here we go
12:26 < SomeoneWeird> or if you really need flash, use connect-flash like gildean said
12:26 < israel> has anyone here pushed files to s3 ?
12:26 < Ards> well, I was using flash because the PeepCode video was showing it. I don't really need it but I'll use connect-flash.
12:26 < Ards> thanks for your help
12:28 < Ards> is there a reason why they removed it ?
12:30 < Ards> is there a difference between ' and " in node.js?
12:31 < anandhegde> http://stackoverflow.com/questions/12119394/embed-google-docs-node-js
12:33 < Ards> it answers my question
12:33 < Ards> http://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript
12:50 < mscdex> Ards: yep, it's not like PHP where one style has different behavior
12:50 < Ards> exactly, I'm coming from this background :)
12:52 < mscdex> i always use single quotes in js, unless i've got a string with single quotes
12:53 < SomeoneWeird> i use both
12:53 < SomeoneWeird> lol
12:53 < SomeoneWeird> :x
12:54 < mscdex> that's just weird
12:54 < mscdex> :-D
12:56 < SomeoneWeird> ;)
12:57 < elegos> do you have any idea on why I'm getting this executing grunt+h5bp? "TypeError: path must be a string"
12:57 < SomeoneWeird> (grunt+h5bp).toString()?
12:58 < elegos> SomeoneWeird: grunt.js via h5bp module
12:58 < elegos> btw it was a weird apic missing
12:58 < elegos> but still I don't understand this path, what does it mean? '**/*.php'... the first two **
12:59 < SomeoneWeird> match anything before /*.php
12:59 < SomeoneWeird> could be /tmp/*.php
12:59 < elegos> SomeoneWeird: recursively?
12:59 < SomeoneWeird> or /tmp/1/2/3/4/5/lol/blah/lol/*.php
13:00 < SomeoneWeird> kinda, yeah
13:00 < elegos> thanks
13:15 < anandhegde> please someone help me with this - http://stackoverflow.com/questions/12119394/embed-google-docs-node-js
13:16 < mscdex> that sounds like it's a frontend question, not one about node..
13:16 < thanpolas> anyone with experience on everyauth ?/
13:39 < anandhegde> mscdex: my question is how do i control buttons on one page from another page?
13:39 < anandhegde> can it be done using node.js? do i need to write a browser plugin?
13:40 < timeturner> bootstrap css question. anyone up to answer?
13:40 < timeturner> it's about the @media query
13:41 < gildean> timeturner: you don't know unless you ask
13:41 < timeturner> css @media question for iphone 4. when viewing bootstrap's site's "responsive section" it shows that the "phone" viewport is showing in mobile safari on iphone 4. My question is that the device-width is 980px of "physical pixels" as sent to device-width in the meta tag. how does bootstrap's css determine that it is in the "phone visibility" class still?
13:42 < gildean> timeturner: what's 980px?
13:45 < timeturner> the number of pixels across the width of an iphone 4 in landscape orientation
13:45 < timeturner> ahh wait
13:45 < timeturner> figured it out
13:46 < timeturner> lol your question helped me realize that the full 980px isn't assigned to device-pixels
13:46 < timeturner> since obviously the browser's viewport isn't the entire screen width
13:46 < timeturner> :)
13:46 < timeturner> it assigns 960px
13:47 < timeturner> wait wait
13:47 < timeturner> it assigns 480px apparently
13:47 < timeturner> strange
13:47 < sadtaco> Can I not have 2 websocket connections open for port 80 on the same page?
13:47 < SomeoneWeird> 480x960
13:47 < SomeoneWeird> screen res timeturner 
13:47 < timeturner> http://www.engadgeted.net/2010/07/08/viewports-and-pixels-on-iphone-4/
13:47 < SomeoneWeird> sadtaco, why would you want that?
13:48 < timeturner> it reports device-width as 480px in landscape orientation
13:48 < sadtaco> Two different servers.
13:48 < sadtaco> Fragmentation of services.
13:48 < timeturner> where the physical number of pixels is 960px
13:48 < timeturner> basically that means that device-pixels property is an eyewash
13:48 < SomeoneWeird> sadtaco, i don't see why not,have you tried it?
13:48 < timeturner> and that mobile safari still reports the "CSS pixels"
13:48 < sadtaco> Yeah.
13:48 < sadtaco> Only one of them remains open
13:49 < SomeoneWeird> socketio?
13:49 < sadtaco> When both work seperately
13:49 < sadtaco> Yes, two seperate socket.io servers.
13:49 < mmalecki> hey
13:49 < mmalecki> uhm
13:49 < sadtaco> Maybe I just need to change the namespacing
13:49 < mmalecki> someone seen a video of a guy drinking from 2 shots at once?
13:50 < SomeoneWeird> -..-
13:50 < mmalecki> one was higher than the other one
13:50 < mmalecki> and they were flowing
13:50 < mmalecki> somehow
13:50 < mmalecki> I mean
13:50 < mmalecki> I really need it
14:00 < SomeoneWeird> im bored
14:00 < SomeoneWeird> somebody give me ideas 
14:01 < mmalecki> SomeoneWeird: make a video of you drinking out of 2 shot glasses at once
14:01 < SomeoneWeird> sadly, i don't drink
14:01 < SomeoneWeird> seeing as i'm underage lol
14:02 < mmalecki> SomeoneWeird: how old are you?
14:02 < SomeoneWeird> 16
14:03 < mmalecki> SomeoneWeird: nice! I'm 18
14:03 < SomeoneWeird> :p
14:03 < mmalecki> SomeoneWeird: congrats for being 16 and hanging out in the irc
14:03 < SomeoneWeird> haha
14:03 < SomeoneWeird> i've been on irc since I was 9
14:03 < SomeoneWeird> or something
14:04 < SomeoneWeird> only place where I can talk to people that actually understand what i'm on about
14:04 < mmalecki> I wish I knew about IRC when I was9
14:05 < SomeoneWeird> yeah, had some fun times
14:05 < SomeoneWeird> met some great people :)
14:05 < yawnt> yo, im back
14:14 < aldipower_> hey, I want to make a sessionhandling over websockets without necessarily using cookies and avoiding express.js, because there are also clients not running in a browser environment. somebody did this already or got some experience with a proof of concept?
14:15 < kuya> hi, im try to install browserify via npm but its saying Error: No compatible version found: optimist@'>=0.3.4- <0.4.0-'
14:37 < SomeoneWeird> <SomeoneWeird> somebody give me ideas 
14:39 < yawnt> yeah, welcome to the club
14:40 < SomeoneWeird> x.X
14:40 < SomeoneWeird> i have something i SHOULD be working on but I want a break for a bit lol
14:44 < yawnt> SomeoneWeird: me too
14:44 < SomeoneWeird> y u copy me
14:55 < Ards> Question
14:55 < Ards> I have Jade. I'm coming from PHP with a light Rails experience. Can I use EJS with Node.js? The answer is yes, for sure. But why do Node.js needs a template engine?
14:55 < Ards> I hate Jade
14:56 < Ards> CoffeeSript + Jade = No thanks.
14:56 < Ards> I prefer using JS + EJS
14:56 < Ards> What do you guys think ?
15:07 < RLa> Ards, you can
15:35 < anandhegde> http://stackoverflow.com/questions/12123298/jquery-click-element-in-iframe
15:35 < bradleymeck> isaacs: whats is missing from read on 0.6? anything i might be able to tackle?
15:53 < bernaman> hi, i am new to node, is it a good strategy to npminstall packages globally in the first place and only have them projectlocal if dependancies need several versions?
16:02 < pace_t_zulu> hey guys ... i'm struggling to figure out why my event listener is not modifying a variable ... it is using its own variable instead
16:02 < pace_t_zulu> using 'http' and 'mysql-native' the event binding is to mysql-native
16:02 < SomeoneWeird> paste some code
16:04 < pace_t_zulu> SomeoneWeird: http://pastebin.com/sU4LtNZD
16:05 < brianc> dang those are some big shiftwidths
16:05 < brianc> i don't always indent, but when i do it's 8 spaces
16:05 < pace_t_zulu> SomeoneWeird: the 'messages' variable should be modified in the anonymous function bound to the 'row' event ... right?
16:05 < pace_t_zulu> SomeoneWeird: i write a lot of javascript ... so it is surprising to me that it isn't functioning correctly
16:05 < brianc> pace_t_zulu: yeah you should modify it in the function
16:06 < brianc> pace_t_zulu: but you need to do the console.log at the end
16:06 < brianc> queryResult.on('end', console.log your result)
16:06 < brianc> also you have some pretty nasty sql injection vulnerability there
16:07 < SomeoneWeird> yeah, your not using callbacks properly
16:07 < SomeoneWeird> do what brianc said
16:07 < SomeoneWeird> it's running the non-working console.log before the row event is even fired
16:07 < brianc> pace_t_zulu: which database driver are you using?
16:09 < pace_t_zulu> yea ... not worried about the sql injection yet ... this is not production code
16:10 < pace_t_zulu> brianc: mysql-native
16:10 < brianc> pace_t_zulu: it probably has a higher level abstraction than just handling each row event one at a time, but if it doesn't i suggest you build one so you can run the whole query and get a single callback with all the rows
16:10 < SomeoneWeird> use 'row'
16:10 < SomeoneWeird> er, 'mysql'
16:10 < brianc> pace_t_zulu: node-postgres emits a row event for each row but also provides a callback returning you all the rows when the query completes
16:11 < brianc> pace_t_zulu: 99% of the time you want that over streaming 1 row at a time
16:11 < pace_t_zulu> brianc: its a mysql db
16:11 < pace_t_zulu> brianc: agreed ... the documentation is poor
16:11 < brianc> especially since if you're running a query to return enough results that you need to stream them somewhere else and you're not writing an ETL application you might have fucked up
16:12 < brianc> pace_t_zulu: if you're newish to node I would suggest doing what SomeoneWeird said and use the node-mysql module. better docs there and friendlier to debug since it's entirely in javascript. the performance is still extremely high
16:12 < brianc> http://github.com/felixge/node-mysql
16:12 < thanpolas> anyone familiar with everyauth codebase?
16:13 < brianc> thanpolas: only that I switch to using authome
16:13 < thanpolas> brianc why?
16:13 < brianc> https://github.com/jed/authom
16:13 < brianc> the everyauth api is a nightmare
16:13 < thanpolas> YES!
16:14 < thanpolas> i am looking at the code 4 hours now and feel like an idiot
16:14 < brianc> if code makes you feel dumb and javascript code the code itself is probably the dumb thing
16:14 < brianc> *and it's javascript code
16:15 < brianc> seriously though i used to use everyauth and i was in the same boat
16:15 < brianc> just an endless amount of "wtf is going on"
16:15 < thanpolas> brianc thanks for the tip, switching now, you helped a man retain his sanity
16:15 < brianc> thanpolas: *thumbs up*
16:21 < pace_t_zulu> sorry ... was afk for a min
16:22 < pace_t_zulu> i'll switch to node-mysql
16:28 < brianc> there's something wrong with travis-ci
16:29 < thanpolas> it's a spambot
16:29 < brianc> no
16:29 < thanpolas> bombarded all node repos
16:29 < brianc> i have a pullrequest
16:29 < brianc> that the test had failed
16:29 < thanpolas> everyone does
16:29 < brianc> someone else submitted it
16:29 < brianc> and so their pull fails
16:29 < brianc> and now my main icon says failing
16:29 < brianc> though the actual repo is passing
16:30 < thanpolas> what repo?
16:31 < brianc> brianc/node-postgres
16:31 < brianc> i'm running it again to make it pass now
16:32 < mscdex> what's the proper process for using valgrind to check for binding leaks? just `valgrind node foo.js` with a debug build of the binding?
16:32 < brianc> weirdness
16:32 < thanpolas> i see... not the pull req troll...
16:33 < mscdex> or is node_g needed also?
16:56 < bernaman_> hi, do you recommend using npminstall -g whenever possible?
17:00 < RLa> bernaman_, no
17:00 < RLa> use -g for comman-line utilities
17:01 < RLa> for projects, create package.json and specify dependencies there, then run npm install
17:02 < bernaman_> RLa, so for a given project always have any nonstandard package locally under ./node_modules?
17:03 < RLa> nonstandard?
17:03 < RLa> any npm package it needs
17:03 < bernaman_> RLa, say e.g. express, mongoose, they are no part of the standard lib
17:03 < RLa> yeah
17:04 < bernaman_> RLa, if i need them regularly, should i install them globally?
17:06 < bernaman_> so the general scheme is, that every package comes along with their dependanciese locally
17:07 < bernaman_> thus multiple versions of one package may be existent
17:07 < RLa> yes
17:07 < bernaman_> npm ls shows them indented multiply under different requiring packages right?
17:07 < RLa> hm, i guess so
17:08 < bernaman_> RLa, thx
17:10 < pace_t_zulu> brianc:, SomeoneWeird: thanks for your help ... solved my problem :)
17:10 < pace_t_zulu> so i have another question ... a bit naive here ...
17:11 < pace_t_zulu> here is the pastebin http://pastebin.com/aUwFytDh
17:11 < pace_t_zulu> i want the http response to come from the requestFunction() method ...
17:12 < pace_t_zulu> only after the sql query has ended ...
17:13 < pace_t_zulu> how do i make the response in the requestFunction method generate only when the _getMessagesForChapter has finished
17:15 < pace_t_zulu> or in other words ... how do i block the _getMessagesForChapter from returning until the query has ended ...
17:15 < pace_t_zulu> again ... here is the pastebin ... http://pastebin.com/aUwFytDh
17:16 < timoxley> pace_t_zulu you want to give _getMessagesForChapter a callback
17:17 < pace_t_zulu> timoxley: could you elaborate? i know what a callback is ... but how do you use it in this scenario
17:17 < timoxley> pace_t_zulu have the getMessages simply get the messages
17:19 < pace_t_zulu> timoxley: yes... that's what i want ... i want getMessages to return the jsonResult ... but not until the jsonResult exists
17:19 < timoxley> then do something like getMessagesForChapter(1, function(err, messages) { if (err) return next(err); res.send(messages) })
17:19 < timoxley> pace_t_zulu when you're dealing with async, you 'return' stuff with a callback
17:20 < pace_t_zulu> timoxley: in that snippet ... you aren't returning the messages ... you appear to be doing the same thing i'm already doing
17:20 < timoxley> pace_t_zulu as in, you can't 'block' it, just pass a "Do this when you're done" function 
17:20 < pace_t_zulu> timoxley: yea ... i realize its async
17:21 < rovar> you could emit an event on the object 
17:21 < pace_t_zulu> timoxley: so there is no way to block the continuation of the requestFunction() method until the getMessagesForChapter method has completed (and returning the messages) ?
17:22 < rovar> pace_t_zulu, not without fibers or Continuations
17:22 < rovar> which you probably don't want :)
17:22 < pace_t_zulu> rovar: that's a good idea
17:22 < timoxley> pace_t_zulu no, that's not how javascript works, you have to "block" with a callback
17:22 < timoxley> rovar don't suggest that
17:22 < timoxley> he needs to understand using async with callbacks first
17:23 < rovar> timoxley, fair enough :)
17:24 < pace_t_zulu> timoxley: you know of a good link where i can read up on it?
17:25 < timoxley> pace_t_zulu http://pastebin.com/2WHQNN4P
17:25 < rovar> pace_t_zulu,  in the function that you want to 'block'   set a callback on an event on your jsonResult
17:25 < rovar> http://howtonode.org/demystifying-events-in-node
17:26 < timoxley> important info, though he's not firing any events AFAIK, just straight callbacks
17:27 < rovar> right.. now that I look at the details, you can piggyback on the existing db fetch callback
17:27 < rovar> much simpler.. i thought he needed to generate his own event on the completion of multiple jobs..
17:28 < timoxley> yeah, he probably doesn't need the second method at all
17:29 < timoxley> pace_t_zulu you should probably start looking into using something like connect/express or flatiron, some of this would be easier
17:29 < rovar> either way, its probably good to know that those event subscription/calls are happening under the hood. 
17:29 < timoxley> for sure
17:30 < pace_t_zulu> so i'll explain the ultimate goal of what i'm coding ...
17:30 < timoxley> pace_t_zulu also, you need to handle errors better: console.log('ghjk)
17:30 < timoxley> is not error handling
17:30 < pace_t_zulu> a long polling server that only responds when messages have changed
17:30 < timoxley> pace_t_zulu cool.
17:30 < pace_t_zulu> so it's going to get the messages once ... hash it ... and then continue to get messages until the hash changes
17:30 < pace_t_zulu> pretty simple
17:31 < rovar> pace_t_zulu,  in old fashioned ( ;) ) servers, that call to startHttpServer would block until a request is made.. whereas in NodeJs, that passes straight through,  but the key piece of information is that he's subscribing to an event, the request event on line 18
17:31 < rovar> so when the 'request' event is fired on the server object,  it calls the callback self.requestFunction
17:33 < rovar> then that function invokes another asyncronous call down at line 43.. and passes a callback, which gets executed when data comes back from the database. 
17:33 < rovar> wow.. i lagged past like 8 messages
17:33 < rovar> meh
17:35 < rovar> pace_t_zulu, so if its a long polling server, you will want to have a copy of that  'res' object from line 35... but instead of calling res.end, you'd call res.write, and write to res every time you get an event with new messages, as long as they've changed. 
17:36 < timoxley> rovar are you confusing long polling with streaming?
17:36 < timoxley> or something
17:37 < timoxley> oh
17:37 < rovar> well res.end will flush the stream to the client and close the connection, won't it? 
17:37 < timoxley> rovar in long polling the closed connection will be immediately reopened by the client
17:38 < rovar> still seems like a bad practice, forcing the client to reestablish a tcp connection has some overhead
17:38 < timoxley> that's what long polling is
17:39 < rovar> yea.. but the connection stays open as long as possible, preferably for as many 'events' to be pushed down as possible before the connection is closed. 
17:39 < rovar> at least that's the way I've done it..
17:40 < timoxley> yeah I don't think that's actually long polling
17:41 < rovar> sounds like it to me :) 
17:41 < rovar> i guess in practice the only distinction between your approach and my approach is I want to send more than one response per request
17:42 < rovar> i guess in your approach, you would queue up 'events' and send them down in a single response when the client makes the next request.. 
17:42 < rovar> which is probably more portable..
17:43 < rovar> but socket.io seems to support my approach just fine.. 
17:44 < timoxley> rovar nothing wrong with 'your approach' it's justâ€¦ not long polling.
17:46 < rovar> fair enough :)
17:46 < timoxley> rovar it's called 'Pushlet' according to http://en.wikipedia.org/wiki/Push_technology
17:46 < rovar> my background is in large scale distributed systems (video game servers in C/C++) 
17:47 < rovar> Yea.. i think people like to call it server sent events as well.. 
17:47 < rovar> I call it common sense :P
17:53 < rovar> vim seems to choke when you paste in a single line that is 6k in size.. 
17:54 < timoxley> yeah vim doesn't like long lines
17:54 < timoxley> I think it's the syntax highlighting
17:55 < rovar> hmm
17:56 < timoxley> rovar the initial reason I got into writing build scripts was because vim would slow to a crawl if I accidentally opened any minified file
17:57 < rovar> :) 
17:58 < rovar> you know.. a 'json' encoding would be nice option to have for setEncoding
17:59 < rovar> I get a utf8 string from a server and immediately call JSON.parse..
17:59 < rovar> and when I forget its annoying as hell..
18:03 < Jhsto> I have this website widget which I've made on node, but I would like to make it so that it could be implemented to other websites as well. Any idea how I can make it work?
18:05 < Jhsto> Would it work if the website owner would just request the page from me? Is there a possibility to determine where the request have been made?
18:08 < rovar> Jhsto, can you be more specific about your widget?
18:08 < elegos|BNC> Error: EPERM, operation not permitted 'publish/thumbs/1.png' <-- this is given when I start a grunt.js build... I've tried setting clean: ['css', 'img', 'js'], but it doesn't seem to evaluate it
18:08 < pace_t_zulu> ok ... this feels like a dumb question ... but can i clearinterval inside set interval?
18:08 < pace_t_zulu> like so ...
18:09 < elegos|BNC> btw I don't want to delete the thumbs directory
18:09 < trodrigues> pace_t_zulu: yes
18:09 < pace_t_zulu> var myInterval = setInterval( function() { if (something) clearInterval(myInterval); },1000)
18:09 < rovar> Jhsto, I think what you'd probably want to do with your widget is have it listen on a port,  you could do filtering either at your Reverse proxy if you have one, or in a config inside of node.. 
18:09 < pace_t_zulu> trodrigues: i would think so ... but it's not working atm
18:10 < trodrigues> are you sure the condition on which you clear it is working properly?
18:10 < trodrigues> just try to set a breakpoint on the clearInterval and see if it ever gets fired
18:10 < rovar> jhsto,     request.connection.remoteAddres
18:12 < rovar> pace_t_zulu, isn't there a oneShot option for intervals? if so, you don't need to clear it..
18:12 < pace_t_zulu> https://gist.github.com/f11b338accc88486eba3
18:12 < pace_t_zulu> rovar and timoxley: y'all may hate what i did
18:12 < trodrigues> rovar: you're probably thinking of events. and in that case he'd use a setTimeout anyway
18:12 < rovar> pace_t_zulu, actually.. i think your problem is that myInterval may not be in scope.. try making it   var myInterval;  myInterval = setInterval ...
18:14 < trodrigues> pace_t_zulu: where are you defining self?
18:15 < trodrigues> I'm thinking your context might be getting overwitten at some point.
18:15 < trodrigues> *overwritten
18:15 < pace_t_zulu> trodrigues: here is the full file ... http://pastebin.com/5mLhd9eW
18:15 < pace_t_zulu> i modified it just now per rovar's suggestion
18:16 < trodrigues> well when different requests come in your self is probably being overwritten
18:16 < rovar> pace_t_zulu, I see what you're going for, and it almost works.. however, you are not guaranteed that 'res' will be in scope when you fire your interval
18:16 < rovar> well. i guess if it only fires once, you are.. 
18:16 < pace_t_zulu> rovar: the response happens ... its just that the polling doesn't stop
18:16 < rovar> but I guess I don't see the point of only firing this once.. 
18:17 < rovar> i see
18:17 < trodrigues> if you're only firing it once you should use setTimeout anyway
18:17 < trodrigues> well
18:17 < trodrigues> er
18:17 < trodrigues> nevermind
18:17 < trodrigues> i'm saying silly things
18:17 < rovar> huh.. that actually works.. 
18:17 < elegos> trodrigues: back. I run the script correctly, but it will fail trying to delete a file of another user - which is indeed the www user with web-generated data. how can I set a clearInterval?
18:18 < pace_t_zulu> rovar: :/ ... i'm sure there's a better way
18:18 < trodrigues> elegos: huh? are you sure you were talking to me before?
18:18 < rovar> pace_t_zulu,  not a bad way to go, for what you need.. I'd rearrange things to make it more flexible and robust.. 
18:18 < bingomanatee> Is there an API / documentation on the error object for node.js?
18:18 < timoxley> pace_t_zulu is another system involved here? why don't you detect the "change" when the new data comes in, as opposed to polling the database
18:18 < elegos> <trodrigues> are you sure the condition on which you clear it is working properly?
18:18 < elegos> thought you were writing to me :)
18:18 < timoxley> bingomanatee it's just normal javascript error object
18:18 < trodrigues> pace_t_zulu: if you use a variable in that closure to store your interval and make sure that the context is passed properly to that callback on the interval, your problems should be fixed
18:19 < pace_t_zulu> elegos: yes... it returns data
18:19 < timoxley> bingomanatee https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error
18:19 < elegos> pace_t_zulu: ?
18:19 < trodrigues> take a look at bind> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind
18:19 < TehShrike> anyone here write for node.js in Diet Coda?
18:19 < rovar> make setInterval work outside of  requestFunction and even the http server..  and when you get a NEW message, add it to a list of messages in self..  then when you get a serverRequest, send down the list of messages then clear it
18:20 < rovar> so you're decoupling the message arrival 'stream' from the http request stream..
18:20 < pace_t_zulu> timoxley: the database is being modified by a php app on an apache server
18:20 < timoxley> ahhh
18:20 < pace_t_zulu> timoxley: this long polling is actually already coded and working in php
18:20 < pace_t_zulu> timoxley: i'm just coding it in node to develop my node skills
18:21 < timoxley> pace_t_zulu fair enough, yeah you should decouple the change detection from anything to do with the response handling
18:21 < timoxley> as in
18:21 < timoxley> polling the db is ugly, sweep it under the covers
18:22 < rovar> TehShrike, looks neat. try it and tell us how it goes :)
18:22 < TehShrike> rovar: :-)
18:22 < pace_t_zulu> timoxley: so i'll move change detection into its own method
18:22 < TehShrike> I'm just spinning it up, was just wondering if there were some shortcuts
18:22 < timoxley> pace_t_zulu I'd make it it's own object
18:22 < timoxley> get it out of there
18:22 < timoxley> but yeah
18:22 < TehShrike> For example, I'm wondering if I can get the "view this file" thing to start running the script and show me the output, instead of rendering it as HTML...
18:22 < rovar> i'm with timoxley
18:23 < timoxley> just have your 'change detector' that sets some flag and emits events if it detects a change
18:23 < timoxley> pace_t_zulu then when a new request comes in, you can just check the flag
18:25 < timoxley> if 'isChanged' is false, listen once for 'change' and trigger sendChanges() when it firesâ€¦ and if the flag is true, just sendChanges() immediately
18:25 < timoxley> change variable names to taste
18:26 < timoxley> pace_t_zulu or you could use socketio and a lot of these problems disappear, though the solution is a bit different.
18:28 < pace_t_zulu> timoxley: so i pulled the change detector out to its own method (i will make it its own class like you suggested) but here it is ... http://pastebin.com/SixJqenm
18:29 < timoxley> pace_t_zulu alsoâ€¦ while we're at it
18:29 < timoxley> this._functionName
18:30 < pace_t_zulu> timoxley: ... ?
18:30 < timoxley> probably go with this.functionName or just declare the function inside the module scope
18:30 < timoxley> pace_t_zulu i.e. you don't need to attach every functions to an object 
18:31 < pace_t_zulu> timoxley: yea ... i know i can get better at js oop
18:31 < timoxley> pace_t_zulu generally, don't add the function to 'this' unless you actually need to use 'this' in the function
18:32 < pace_t_zulu> ok
18:32 < timoxley> pace_t_zulu an in fact, you don't need to make the whole thing a class anyway
18:32 < timoxley> just export the functions you need externally
18:33 < timoxley> but back to the topic
18:33 < pace_t_zulu> timoxley: ty ... i'll keep that in mind
18:33 < pace_t_zulu> timoxley: but back to the current problem ... can you see why the polling interval is not cleared?
18:34 < pace_t_zulu> timoxley: i see no reason why it wouldn't be
18:34 < timoxley> pace_t_zulu firstly, the moment you know you need to clear the interval, you should do that
18:34 < pace_t_zulu> so before the response
18:35 < timoxley> yep, it's just good practice
18:36 < pace_t_zulu> timoxley: yea i realized that .. already done
18:37 < pace_t_zulu> this is where its at right now ... and it returns correctly ... the polling just doesn't stop ... http://pastebin.com/B9QZUgtk
18:37 < timoxley> pace_t_zulu what's the bad behaviour you're seeing?
18:38 < timoxley> pace_t_zulu not sure, perhaps you've actually got two requests?
18:38 < pace_t_zulu> oh ... that does happen actually
18:38 < pace_t_zulu> how would i work around that?
18:38 < timoxley> probably browser looking for favicon
18:39 < timoxley> pace_t_zulu the polling should probably be done outside the request handling
18:39 < timoxley> secondly
18:39 < pace_t_zulu> so i need to check the request url
18:40 < pace_t_zulu> timoxley: thank you for all your help :)
18:41 < timoxley> pace_t_zulu yep. will this thing have to respond to multiple different urls?
18:41 < pace_t_zulu> timoxley: yea ... the chapter number is in the url
18:41 < pace_t_zulu> i was going to get to that after i sorted the polling out
18:43 < timoxley> pace_t_zulu k cool. yeah I'd start looking into a routing solution.
18:43 < timoxley> connect/express or flatiron or whatever
18:43 < timoxley> you just write your route like: server.get('chapter/:id', function(req, res){}) and you're done
18:44 < timoxley> then you can get at the id via req.id
18:45 < gnoirzox> hello
18:48 < RLa> who is horse js?
18:48 < RLa> or what it is?
18:48 < RLa> is it also behind travis4all thing?
18:51 < bingomanatee> whats the most efficient way of introspecting whether an emitter has listeners for a given event? target.listeners('event').length?
18:58 < klawd_prime> hi!
18:59 < klawd_prime> test.ifError({}); should throw an exception and testing should be aborted, no?
18:59 < pace_t_zulu> so this again is naive ... why doesn't the http server deal with concurrent connections ... why can it not process the favicon request until the messages request is finished
19:04 < dhpe> pace_t_zulu: node has synchronous execution model. one request is served at a time. it is a design decision.
19:05 < rovar> hrrm.. actually it should be able to process a favicon request while you're processing a messages request..
19:06 < rovar> it is single threaded, but while one request is waiting for another event, it should process other events..
19:09 < klawd_prime> can i make nodeunit abort if an assertion is not met?
19:09 < rovar> e.g. after you register your callback for messages, the processor isn't doing anything, so it will handle incoming requests..
19:09 < klawd_prime> its pretty meh that it keeps running
19:10 < niloy> what is the recommended way to use hashbang in nodejs? #!/usr/bin/nodejs ?
19:11 < rovar> #!/usr/bin/env node
19:11 < rovar> if its supported
19:11 < rovar> works on ubuntu and fedora for sure
19:12 < rovar> if you have a local/home install of node, then use that :)
19:12 < niloy> rovar, isnt there some kind of variable?
19:12 < klawd_prime> does nobody here use nodeunit?
19:12 < niloy> rovar, thanks got it
19:15 < pace_t_zulu> dhpe: so to get concurrent processing of request i'd have to start the server on multiple ports?
19:16 < pace_t_zulu> keeping in mind that i'm just passing the json data back based on a number in a url segment
19:17 < RLa> pace_t_zulu, usually not
19:17 < RLa> dhpe, i think that is not true
19:17 < RLa> you can server multiple requests at once
19:17 < RLa> serve*
19:17 < pace_t_zulu> rla how?
19:18 <@konobi> http requests are served once per TCP connection
19:18 < RLa> well, io is evented and when request comes in it does not block events serving other requests
19:19 < RLa> tho only one event can be handled at a time
19:19 < klawd_prime> guys, please help me, guys, please.
19:19 < RLa> konobi, what does that mean?
19:19 <@konobi> klawd_prime: throw a new Error
19:20 < klawd_prime> konobi: as far as i understand, test.ifError throws the error if its true
19:20 < klawd_prime> but it doesn't or it doesn't abort or something
19:20 <@konobi> klawd_prime: throw one manually
19:20 <@konobi> who's asking the concurrent question?
19:21 < RLa> pace_t_zulu is asking
19:22 <@konobi> pace_t_zulu: node will give you evented concurrent http processing.
19:27 <@konobi> pace_t_zulu: so i'm not sure why you'd be seeing such behaviour
19:28 < pace_t_zulu> konobi: i'm looking into it
19:31 <@konobi> pace_t_zulu: time to get wireshark out!
19:31 < pace_t_zulu> dude ... neil armstrong has died
19:31 < pace_t_zulu> damn
20:05 < AnonymousFunctio> I don't remember the names of who was in here chatting with me last night, but if you are here, and were curious, I found a way to hook into the HTTP client...
20:06 < AnonymousFunctio> It turns out that it is possible to replace the socket used by http.request with your own.
20:06 < AnonymousFunctio> Basically, req.on('socket' function (socket) { req.socket = new MySocketClass })
20:07 < AnonymousFunctio> The MySocketClass just grabs all of the properties of the real socket, but overrides the .ondata with its own fuction that modifies data.
20:12 < AviMarcus> AnonymousFunctio, there's a test-suite called nock that lets you overwrite them with specific stuff, but that's meant for testing.
20:14 < AnonymousFunctio> AviMarcus, Interesting.  I'll check it out, thanks!
20:15 < AnonymousFunctio> Here's the source for what I did for now:  http://stackoverflow.com/a/12119765/362536
20:15 < AnonymousFunctio> Now, I just have to hope that the internal API of Node doesn't change.  :-/
20:16 < AviMarcus> AnonymousFunctio, "HTTP -- Stability: 3 - Stable"
20:16 < AviMarcus> not frozen, though.
20:17 < AnonymousFunctio> AviMarcus, The .ondata property is undocumented, and internal only.  I found it by rummaging through http.js.
20:17 < AviMarcus> lol. Well check what nock does, might show you something.
20:18 < AnonymousFunctio> https://github.com/joyent/node/blob/master/lib/http.js#L1691
20:18 < AnonymousFunctio> Yep, I plan to.  Sounds promising!
20:24 < RLa> damn google has changed its favicon
20:27 < AnonymousFunctio> RLa, What was it before?
20:27 < RLa> can't remember, but something different
20:28 < RLa> now it's white g on blue background
20:31 < CIA-1> libuv: Ben Noordhuis v0.8 * rad7b48a / src/unix/udp.c : unix: fix memory leak in udp.c - http://git.io/uar3_A
20:35 < CIA-1> libuv: Ben Noordhuis master * r0ac2fdc / (include/uv.h src/unix/error.c): unix: map errno ESPIPE - http://git.io/KyOROw
20:35 < CIA-1> libuv: Ben Noordhuis master * rad7b48a / src/unix/udp.c : unix: fix memory leak in udp.c - http://git.io/uar3_A
20:35 < CIA-1> libuv: Ben Noordhuis master * ra3c6a48 / (include/uv.h src/unix/error.c src/unix/udp.c): Merge branch 'v0.8' - http://git.io/l84T4A
20:36 < RLa> http://googlesystem.blogspot.com/2012/08/googles-new-favicon.html
20:37 < AnonymousFunctio> I like the old one much better.
20:39 < CIA-1> libuv: Ben Noordhuis master * rc77d08e / (4 files in 2 dirs): bench: add timed and non-timed udp pummel benchmarks - http://git.io/TmmkVQ
20:40 < mscdex> high performance mysql ftw!
20:41 < AnonymousFunctio> Hear hear!
20:44 < mscdex> https://github.com/mscdex/node-mysql-bindings-benchmarks/wiki
20:44 < mscdex> :-D
20:46 < AnonymousFunctio> mscdex++
20:49 < mscdex> mariasql is even signficantly faster than that if you have the query use arrays instead of objects when emitting rows
20:49 < mscdex> woo
21:18 < roiecohen> Anyone for quick tip on node.js in production?
21:19 < mscdex> roiecohen: do it
21:20 < roiecohen> No caveats?
21:20 < mscdex> never! :-D
21:20 < bernaman> hi, why doesnt the following mongoose var userModel query not work:
21:20 < bernaman> userModel.find({name: 'Harry'}, function(err, d){
21:20 < bernaman>     console.log(d.length, d, err);
21:20 < bernaman> });
21:20 < roiecohen> mscdx: express?
21:20 < bernaman> it hangs
21:21 < zivester> if i `npm publish` my github module (from local)... do I have to npm publish it everytime or does it update itself from github?
21:21 < mscdex> roiecohen: express is good
21:21 < mscdex> zivester: you have to publish every time you want to update the latest on npm
21:22 < zivester> so just make it a habit of npm publishing anytime i push to my master.. kool, tx mscdex
21:22 < mscdex> well, i don't know about _that_ often
21:22 < mscdex> just publish every time you tag a release
21:23 < zivester> yah... what does npm publish actually do?
21:23 < mscdex> takes your module and stores a tarball of it in its couch instance
21:23 < zivester> does it upload everything from a directory? like I have some untracked files i dont want to be published
21:24 < mscdex> if you have stuff you don't want to include, fill out an .npmignore file, like .gitignore
21:24 < mscdex> i have heard npm will use .gitignore if there is no .gitignore
21:24 < mscdex> er if there is no .npmignore
21:25 < mscdex> zivester: you can also publish a url to a tarball: `npm publish https://github.com/zivester/foo/tarball/mytag`
21:27 < bernaman> any clue for mongoose?
21:27 < mscdex> i haven't used nosql stuff
21:28 < roiecohen> query looks fine
21:28 < bernaman> it returns back all existing records then hangs, roiecohen
21:28 < roiecohen> what's in the db?
21:29 < bernaman> if i leave out the query alltogether and have  a disconnect() it returns
21:29 < appinsanity-mike> i'm looking to write from a file stream to a response stream but I need to write x bytes from an offset and then call another write on the same response with some text to be injected into the stream and so onâ€¦ looking for something like response.write(buffer, offset, length); 
21:29 < zivester> sweet, i like publishing the tarball directory.. thats nice
21:29 < bernaman> 11 [ { name: 'Harry', _id: 5033a290bcd9b1d256000001 },
21:29 < bernaman>   { name: 'Harry', _id: 5033a459b257806057000001 },
21:29 < bernaman>   { name: 'Harry', _id: 5034b4c9b7d993872e000001 },
21:29 < bernaman> ...
21:29 < bernaman>   { name: 'Harry', _id: 5034bc853bb559992f000001 },
21:29 < bernaman>   { name: 'Harry', _id: 5034bf7a4b0a85ff2f000001 } ] null
21:29 < zivester> directly*
21:30 < mscdex> appinsanity-mike: one solution is to use buffer.slice(offset, length)
21:30 < appinsanity-mike> so create a new buffer using slice, does this perform an extra copy?
21:30 < roiecohen> bernaman: find{name: 'Harry'} should return all "harry"s
21:30 < mscdex> it creates a new Buffer, but it references the same memory
21:31 < roiecohen> looks to me like you have lots of them in your db
21:31 < appinsanity-mike> oh sweet, good to know, thanks! if you know a better way let me know but that sounds top notch
21:31 < bernaman> right, 11 of them, roiecohen
21:32 < bernaman> mongo localhost:3500/app
21:32 < bernaman> MongoDB shell version: 2.0.7
21:32 < bernaman> connecting to: localhost:3500/app
21:32 < bernaman> > db.users.find()
21:32 < bernaman> { "name" : "Harry", "_id" : ObjectId("5033a290bcd9b1d256000001") }
21:32 < bernaman> { "name" : "Harry", "_id" : ObjectId("5033a459b257806057000001") } ...
21:32 < bernaman> also works
21:32 < roiecohen> what doesn't work?
21:33 < bernaman> in node, it hangs after the query, roiecohen
21:33 < roiecohen> ah
21:33 < mscdex> appinsanity-mike: another solution might be to use fs.open/fs.read/fs.close, there is also a binding someone wrote so you can use fseek if you have a very large file
21:34 < mscdex> er not fseek, but lseek: https://github.com/baudehlo/node-fs-ext
21:35 < appinsanity-mike> good point, if i am reading from a file and I can feed the offsets there
21:35 < appinsanity-mike> just wan't to avoid a memcopy and sounds like buffer works well for that
21:37 < appinsanity-mike> it's just html templating, so in the first pass I cache the offsets and lengths around the data to be written, and next pass I just write from those offsets
21:37 < zivester> mscdex: so I published my github repo, which is node-quickthumb.. but I would like for it to be called "quickthumb"... how can i do that? I'm guessing that pulled from the "name" in package.json ?
21:40 <@konobi> zivester: yup
21:40 < mscdex> zivester: yep
21:40 < mscdex> :-)
21:42 < bernaman> hi, a simple helloworld mongoose query hangs after callback: http://pastebin.com/CZfFRYvk anyone?
22:03 < iggyziggy> hi people
22:03 < iggyziggy> got major problem with nodjs
22:03 < iggyziggy> is there any kind of mutex lock in nodejs?
22:03 < iggyziggy> just got this error
22:03 < russfrank> iggyziggy: no, could you explain your problem?
22:03 < iggyziggy> Room.js:184 				this.players[p].peonID = p;
22:04 < iggyziggy> and this part of code
22:04 < iggyziggy> this.players[p].inGame = p+1; 				this.players[p].write("startGame|"+p+"\0"); 				this.players[p].peonID = p;
22:05 < mscdex> that's not an error
22:05 < mscdex> that's a reference to a line of code
22:05 < iggyziggy> ok, sec
22:05 < iggyziggy> xxx/xxx/xxx/Room.js:184 				this.players[p].peonID = p;                            ^ TypeError: Cannot set property 'peonID' of null     at Room.startGame (/home/coece/src/node_cnljs/Room.js:184:28)     at GameEngine.userInput (/home/coece/src/node_cnljs/GameEngine.js:256:15)     at Socket.<anonymous> (/home/coece/src/node_cnljs/testjs.js:417:28)     at Socket.emit (events.js:67:17)     at TCP.onread (net.js:362:31)
22:05 < russfrank> iggyziggy: use gist.github.com if you need to paste a large amount of stuff please
22:05 < iggyziggy> how about this?
22:06 < kuja> iggyziggy: this.players[p] is null
22:06 < iggyziggy> i tried to keep it short
22:06 < russfrank> ok, so then this.players[p] is null
22:06 < iggyziggy> yes
22:06 < iggyziggy> but it does not make sense
22:06 < russfrank> well, you have a logic error somewhere
22:06 < mscdex> ^
22:06 < kuja> Well really, the key information you omitted from us was "TypeError: Cannot set property 'peonID' of null"
22:06 < iggyziggy> error would show up few lines earlier
22:06 < russfrank> if this.players[p] is undefined, its value would be undefined, not null
22:06 < russfrank> (which are two different things, not sure if you know that)
22:07 < iggyziggy> ok... i guess i need to paste more code :)
22:07 < russfrank> which means that you set it to null somewhere
22:07 < iggyziggy> if(this.players[p]!=null){ 				this.players[p].inGame = p+1; 				this.players[p].write("startGame|"+p+"\0"); 				this.players[p].peonID = p;
22:07 < mscdex> iggyziggy: use gist.github.com if you paste more code
22:07 < kuja> yeah, this.players[p] is being explicitly set to null somewhere
22:07 < iggyziggy> it is, when player disconnects
22:07 < iggyziggy> but how it bypasses the condition?
22:08 < iggyziggy> there is this "if(this.players[p]!=null){"
22:08 < iggyziggy> just before
22:08 < iggyziggy> and also
22:08 < mscdex> hard to tell without more code
22:08 < iggyziggy> few lines of setting some other variables to the same object
22:09 < iggyziggy> it looks like an error when using threads and not locking the mutex
22:09 <@konobi> enothread
22:09 < mscdex> there are no threads
22:09 < iggyziggy> i thought nodejs has it's way around this
22:09 < mscdex> just 1 thread for js
22:09 < iggyziggy> ok, i just said it looks like that
22:09 < mscdex> iggyziggy: post the complete code on gist.github.com
22:09 < othiym23> gotta question about setTimeout
22:09 < iggyziggy> it's a bit larger project :)
22:10 < mscdex> unless it's available elsewhere already
22:10 < russfrank> othiym23: go
22:10 < iggyziggy> can't post all of it
22:10 < russfrank> iggyziggy: post the 100 lines around that section of that file then
22:10 < mscdex> alright, well it's hard to offer a solution when the problem lies elsewhere
22:10 < othiym23> if I use a high-precision timer (process.hrtime), set a setTimeout call for 5ms, and then measure the results on the other side, they will be < 5ms an appreciable chunk of the time
22:10 < othiym23> why is this?
22:10 < kuja> welp, unless you can reproduce your problem into a single paste...
22:10 < othiym23> everything I've dug up online indicates it should go long, not short
22:10 < kuja> I've got no reference to start offering help
22:11 < iggyziggy> it happend when 100+ clients got on server
22:11 < iggyziggy> didn't happen before
22:11 < mscdex> probably coincidence
22:11 < russfrank> iggyziggy: again -- this is a logic error, so we'll need to see the code to help you debug it
22:11 < mscdex> or got lucky :-)
22:11 < iggyziggy> one client started the game and that's when it fires this part of code: 			if(this.players[p]!=null){ 				this.players[p].inGame = p+1; 				this.players[p].write("startGame|"+p+"\0"); 				this.players[p].peonID = p;...
22:12 <@konobi> iggyziggy: pastebin
22:12 < othiym23> I know that expecting high precision with a duration that short is unreasonable (and I'm only using this in test code), but it struck me as curious
22:12 < iggyziggy> aww
22:12 < iggyziggy> ok ok
22:12 < iggyziggy> dammit :)
22:13 < othiym23> process.hrtime on OSX should be returning pretty accurate timings, too, and I'm not doing anything in my tests that would cause the event loop to block
22:13 < bernaman> hi, is there a log of this channnel somewhere?
22:13 < othiym23> anybody?
22:15 < regality> othiym23: gist?
22:16 < mscdex> bernaman: http://piscisaureus.no.de/node.js/
22:17 < bernaman> ah great thx mscdex
22:21 < iggyziggy> ok
22:21 < iggyziggy> i'm back :)
22:21 < iggyziggy> http://pastebin.com/sGCbrZvC
22:22 < iggyziggy> now can someone please help me out how to lock one part of the code while other part is executing
22:23 < russfrank> iggyziggy: there's only a single thread, only 1 thing is ever executing at one time
22:23 < othiym23> regality: brutally simplified gist at https://gist.github.com/3471556
22:24 < othiym23> run that code in a tight loop, and the assertion will fail a fair chunk of the time
22:24 < russfrank> iggyziggy: you also forgot to xxx out the path in the rest of the stack trace so now we all know your username and the name of your project (oh no)
22:24 < iggyziggy> yeah i failed there :)
22:24 < iggyziggy> noticed it just now
22:24 < othiym23> sometimes it'll be ~4.5, sometimes it'll be closer to 5, but I've seen it go as low as 3.7
22:25 < iggyziggy> but it's nice that you noticed, now i know you're trying to help out :)
22:26 < iggyziggy> so if it is single thread, how did that error happend on that line of code and not 1 or 2 lines before?
22:27 < iggyziggy> and better question, how can i fix it so it stops crashing?
22:28 < regality> othiym23: I'm getting as low as 4994 millis
22:28 < regality> but nothing crazy
22:29 <@konobi> iggyziggy: just because it's not threaded doesn't mean you're not liable for race conditions
22:30 <@konobi> iggyziggy: better scoping of your variables would probably help
22:30 < othiym23> regality: the parameter to setTimeout is in millis, not seconds, so that value is for 5ms, not 5s
22:31 < regality> rite, I set it to 5 seconds
22:31 < iggyziggy> i can add more code if you need
22:31 < othiym23> I would expect the imprecision to be lower at higher waits
22:31 < regality> I dropped it back to 5ms
22:31 < regality> and I'm seeing some issues now
22:31 < iggyziggy> or even better, tell me how to deal with race conditions in nodejs, some article or anything that might help
22:31 < othiym23> I'm just curious because everything online says that setTimeout will wait too *long*, not too *short*
22:32 < regality> that is strange
22:33 < regality> if I iterate 1000 times, the first one gives me 1 or 2 millis
22:33 < regality> the rest are fine
22:33 < othiym23> iggyziggy: it sounds like your race condition is caused by high concurrency / lots of overlapping request handlers firing
22:33 < othiym23> this is more an issue of how you're handling state than a race condition per se
22:34 < othiym23> like, you don't really need semaphores or mutexes in a single-threaded async environment in node, you just need to use the share-nothing architecture at a smaller scale
22:35 < othiym23> so, like, closure-specific variables, only writing to shared state with finished results, like pushing results onto an array that gets printed all at once
22:35 < othiym23> having concurrent requests constantly mutating the same state is going to cause you problems because it's hard to visualize how the flow of execution is going to be blocking when service handlers and the like are at various stages of execution
22:36 < othiym23> but in general, Node's single-threaded concurrency is far more deterministic than a multi-threaded environment like .NET or the JVM
22:36 < iggyziggy> i'm not really sure how to fix it :)
22:37 < iggyziggy> probably need some how-to's to handle shared memory correctly
22:38 <@konobi> share nothing
22:38 < othiym23> what konobi said
22:38 < iggyziggy> i have no idea how to make it work without sharing
22:38 < othiym23> just make sure that you're doing all the updates you need to do in a single function
22:39 < othiym23> only one function is ever executing at a time in Node
22:39 < iggyziggy> that's gonna be some ugly code...
22:39 < othiym23> not necessarily
22:40 <@konobi> same could be argued for any code
22:40 <@konobi> =0)
22:40 < iggyziggy> :)
22:40 < iggyziggy> true
22:40 < othiym23> in your case, you just need to put the logic for handling the player data in the same place
22:41 < othiym23> like in its own class or something
22:41 < othiym23> and make sure that class handles adding / removing players and doesn't allow the various bits of client code to directly write to the underlying dictionary
22:41 < iggyziggy> i used that in my c version of server 2 years ago while it was also single threaded
22:42 < iggyziggy> and it got really laggy after 150 users
22:42 <@konobi> 'seperation-of-concerns'
22:42 <@konobi> mvc and all that
22:42 < othiym23> f'rinstance, you should probably be storing the next ID in an attribute, and make sure that only one function is generating IDs so you can't get a collision
22:43 < othiym23> that's true of any concurrent code, and isn't anything special to Node at all
22:43 < iggyziggy> looks like i got some reading to do
22:44 < othiym23> or random screwing around with your code until it works ;)
22:44 < iggyziggy> yup, that's how i got here :)
22:44 < othiym23> if you got it to work in single-threaded C, you can get it to work in Node, no problem
22:44 < iggyziggy> yeah but in c it had limit of 150 users before it got laggy
22:45 < iggyziggy> then i did it with threads, and after some time due to lack of oop i had no idea where anything was anymore, got really hard to expand the code
22:46 < othiym23> I'd look at using EventEmitters and Streams for what you're trying to do
22:46 < iggyziggy> with nodejs it was from start pretty much a joke, all going well untill this :)
22:46 <@konobi> start from scratch
22:46 < othiym23> it could actually make a lot of that code a lot simpler
22:46 < regality> othiym23: I was playing with that timer issue, it looks like scoping things fixes it, strangely enough
22:46 < regality> https://gist.github.com/3471720
22:46 < regality> I dunno what the deal is
22:46 < regality> rill strange
22:47 < iggyziggy> ok, i'll try to do single function for dependant parts of code
22:51 < mscdex> regality: yep, you have to use an extra scope inside a for loop like that to make sure the `i` variable is what you expect it to be and where
22:51 < mscdex> or any other variable that changes inside the loop
22:52 < regality> rite, that part still works with the broken code
22:52 < regality> passing it into setTimeout scopes it just fine
22:52 < regality> it's the timer that breaks without scoping
22:53 < regality> with makes no sense
22:54 < othiym23> guess I'm gonna have to look at the source to figure out what's up
22:54 < regality> ya, I started digging in there, but nothing obvious
22:54 < regality> it just calls uv_hrtime
22:54 < regality> which is calling mach_absolute_time
22:55 < regality> which appears to be part of osx core
22:55 < regality> but something strange is going on
22:55 < othiym23> no, the hrtime part I get
22:55 < othiym23> it's the setTimeout part that's mystifying
22:56 < regality> oh, I was assuming that hrtime is returning the wrong time
22:56 < othiym23> I believe that process.hrtime is accurate on OS X
22:56 < regality> I guess it could be that setTimeout is acting up
22:57 < othiym23> my read of the underlying Darwin code is that it's gettng a sanitized version of the CPU's tick counter, which should be extremely accurate
22:57 < othiym23> (I had to do some research on how hrtime works for something unrelated)
22:57 < regality> I was guessing that uv wasn't updating the timer for some reason
22:58 < iggyziggy> konobi, othiym23, thanks for help :)
23:08 < iggyziggy> konobi: i got one more question for you
23:08 < iggyziggy> if you have time :)
23:08 < d4rklit3> substack, you around ?
--- Log closed Sun Aug 26 00:00:26 2012
