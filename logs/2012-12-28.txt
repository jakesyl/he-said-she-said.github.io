--- Log opened Fri Dec 28 00:00:39 2012
00:03 < isaacbw> are there any curated lists of modules? Just searching through npm gives a lot of false positives. Lots of vaporware
00:08 < EyePulp> isaacbw:  I'm not aware of anything more curated.  Generally I find myself asking here for recommendations to specific problems, then googling for articles that might discuss that module as well as competitors.  it could be better, but I suspect it's not a simple solution. 
00:08 <@konobi> nodezoo.com
00:08 < isaacbw> I've been asking here, but I always feel a bit lazy :P
00:09 < EyePulp> konobi: cool - i'd never heard of that - how does it decide to rank things?
00:10 < EyePulp> ah - I see the github repo
00:10 < isaacbw> ping pong
00:14 < isaacbw_test> ping pong
00:20 < isaacbw> boogaloo
00:31 < asdf12> so if a = 4, b = a, b = 5 then a = 5 right?
00:32 < isaacbw> no
00:32 < isaacbw> a = 4
00:32 < asdf12> dang it
00:32 < isaacbw> if a = {value: 4}, b = a, b.value = 5, then a.value = 5
00:32 < isaacbw> but numbers are just copied
00:32 < isaacbw> a.value == 5
00:32 < asdf12> oh? so it's not a pointer to a.value
00:32 < asdf12> ok
00:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:33 < asdf12> is there a way to store pointers to objects?
00:33 < isaacbw> I don't knwo what you mean by that
00:33 < isaacbw> the first thing
00:33 < isaacbw> or the second thing really
00:33 < isaacbw> javascript doesn't deal with pointers
00:33 < dankohn> Hi, can someone please help me with mismatched parentheses hell
00:33 < isaacbw> all objects are references
00:33 < mchammer> no one in #mongodb seems to be awake.. maybe someone here can help me:
00:33 < dankohn> https://gist.github.com/c6d5aecfd5caf093fe32
00:33 < mchammer> hi! i am new to mongodb and have a question about storing large amounts of data via a nodejs-shell-script. on the client i have a data-scructure that looks like this: i've got a 2d-array of chunks (100x100) each chunk containing another 2d-array of  64 * 16 "tiles" and in each of tile some strings and numbers. what would be the best way to save this in mongodb?
00:34 < mchammer> my (noobish) try was to use mongoose, create some schemes and save it in this exact format into mongo but it runs out of memory and / or exceeds the maximum bson-size
00:34 < dankohn> What do tools helps me fix the parentheses?
00:34 < isaacbw> you want as much in a single document as makes sense mchammer
00:34 < isaacbw> you don't really want to build data structures between documents. That defeats the purpose of nosql
00:34 < isaacbw> dankohn, a good syntax highlighter
00:34 < arnorhs> dankohn: looks like you're missing a closing curly brace
00:35 < arnorhs> the indentation at least indicates so.. i haven't counted your parenths
00:35 < arnorhs> oh, maybe it's all foo bared.. there's some weird indentation
00:35 < isaacbw> asdf12, maybe if you explain a bit more I can help you understand
00:35 < asdf12> well i have say a.b.c.d.e, i want to be able to refer to it, so if i did ee = a.b.c.d.e, then if i change ee, a.b.c.d.e also changes
00:36 < mchammer> okay isaacbw, but that's what i am doing right now? :o
00:36 < asdf12> i don't want to make a copy
00:36 < dankohn> arnorhs, how do I go about fixing it?
00:36 < asdf12> or copy over
00:36 < isaacbw> asdf12, if you're dealing with numbers, you'll have to wrap them in an object
00:36 < isaacbw> like I did
00:36 < isaacbw> mchammer, is it not working well?
00:36 < arnorhs> dankohn: i'd start by making the spacing consistent..
00:37 < isaacbw> you can't make pointers to numbers like you would in C
00:37 < mchammer> it runs out of memory and / or exceeds the maximum bson-size
00:37 < arnorhs> dankohn but usually vim helps me :)
00:37 < isaacbw> javascript doesn't think that way
00:37 < isaacbw> you should also ask yourself why you need two different variables working on the same data. You might be able to scope things differently
00:37 < asdf12> ok
00:37 < arnorhs> dankohn: but i suspect this line is your culprit:                 }},{
00:37 < isaacbw> javascript has beautiful scoping
00:38 < arnorhs> at least the first one
00:39 < asdf12> isaacbw: i'm trying to loop through an object's properties, and would like to know where i am within the loop, as a object literal can have objects within objects within objects etc.
00:39 < asdf12> recursive loop
00:39 < asdf12> i was thinking if i had a pointer i could pass along, i would know where i am within the loop
00:39 < isaacbw> and you're storing depth or something?
00:39 < isaacbw> ah
00:40 < isaacbw> that's C thinking
00:40 < asdf12> yea, i'm trying to think how to do this
00:40 < isaacbw> you should put the recursive functions inside a shared scope, then have a variable which is within that scope (so visible to all the recursion functions) and just increment it
00:41 < asdf12> i don't understand , what would the variable hold?
00:42 < isaacbw> what is it holding now?
00:42 < asdf12> nothing because i can't make a pointer to where i am within a object heirchy
00:42 < aroman> anything like sprockets for express/node?
00:44 < isaacbw> asdf12, you're not making a huge amount of sense. Maybe post the recursion code?
00:44 < asdf12> isaacbw: haha i'm probably not, i don't know the technical terms for things so... yea let me paste it somewhere
00:44 < asdf12> btw are you isaacs?
00:48 <@konobi> nope
00:48 <@konobi> isaacs is isaacs 
00:48  * isaacs is isaacs!
00:49 <@isaacs> though isaacs is not always me
00:49 < asdf12> http://pastie.org/5586529
00:49 < mmwwww> Hi, I'd like to build a webapp with the same path for both a full desktop and mobile site with a rest backend so I'll just render the response into handlebars or some other templating and use pushstate to change the urls. But I also want to support downlevel mobile browsers [AND CRAWLERS!] so that really means I also need to render the templates serverside too. I guess this is a common pattern at this stage so are there any good frameworks that handl
00:50 < asdf12> so say object a.b.c.d.e, if i add some code to find something special about a.b.c.d.e, there's no way i can refer to it outside the loop later on?
00:51 < asdf12> so if i do var special = a.b.c.d.e to make a reference, it's not actually pointing to a.b.c.d.e, right?
00:51 < mmwwww> even something that's smart enough to be able to do pushstate for modern browers and wire up templates locally, and do server side wiring up of templates for rendering when the url is called manually? Hopefully this framework already exists?
00:52 < asdf12> mmwwww think most of what you said is done by responsive design
00:53 < asdf12> well how most people would do it
00:54 < isaacbw> asdf12, d = a.b.c.d; a.b.c.d.e == d.e
00:55 < isaacbw> e and if e is actually an object,  e = a.b.c.d.e. e.f == a.b.c.d.e.f
00:55 < isaacbw> I think I get what you're saying now
00:55 < asdf12> well do you mean == or do you mean === ?
00:56 < asdf12> because i think what i want is === i don't want a new object
00:56 < isaacbw> ===
00:56 < isaacbw> == would mean the same thing in this case
00:57 < isaacbw> but ===
00:57 < mistertwig> >>> '0' == 0
00:57 < purr> mistertwig: (boolean) true
00:57 < mistertwig> >>> '0' === 0
00:57 < purr> mistertwig: (boolean) false
00:57 < isaacbw> objects in javascript are all passed around by reference
00:57 < isaacbw> you have to explicitly make a copy if that's what you want to do
00:58 < isaacbw> primitive types, on the other hand, are all copied (strings, numbers) and if you want to give them pointer-like behavior, you have to wrap them in an object
00:58 < asdf12> ah ok
00:58 < asdf12> by the way how to test if an object is an object literal?
00:59 < isaacbw> it's also worth noting that b in a.b has no idea what a is or that a is holding a reference to it
01:00 < isaacbw> I don't think you can asdf12 
01:00 < isaacbw> https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals
01:00 < isaacbw> literals are just in the syntax
01:00 < mistertwig> yeah
01:00 < isaacbw> but anyway, read up on that
01:00 < isaacbw> mdn is awesome
01:01 < mistertwig> you can check for certain properties
01:01 < mistertwig> sort of like ducktyping i guess
01:01 < r00723r0> isaacbw: yes it is.
01:02 < r00723r0> MDN is the bomb.
01:02 < mistertwig> na guys
01:02 < mistertwig> i use w3schools exclusively 
01:02 < mistertwig> http://w3schools.com/jsref/
01:02 < mistertwig> great extensive resources right there
01:03 < r00723r0> mistertwig: I'm pretty sure you're trolling.
01:03 < isaacbw> :P
01:03 < mistertwig> r00723r0: not trolling, just sarcasm 
01:03 < mistertwig> :p
01:03 < r00723r0> *whew*
01:03 < mistertwig> oh my god.
01:03 < mistertwig> https://www.facebook.com/w3schoolscom
01:03 < mistertwig> they have a facebook with 25k likes
01:04 < LouisT> HEY! I use w3schools all the time! :'(
01:04 < mistertwig> https://www.facebook.com/mozilla?ref=ts&fref=ts
01:04 < r00723r0> LouisT: you shouldn't. http://w3fools.com
01:04 < Raydiation> any idea why im getting Error: Cannot find module 'coffee-script'
01:04 < LouisT> r00723r0: i don't, i never have
01:05 < Raydiation> this is in my Cakefile
01:05 < isaacbw> make sure it's installed 
01:05 < isaacbw> and in the right place
01:06 < mistertwig> !w3schools
01:06 < mistertwig> !w3fools
01:06 < mistertwig> !learn w3schools = W3Schools is not related to the W3C and has many problems: http://w3fools.com/
01:06 < mistertwig> nope
01:06 < mistertwig> this bot isn't as cool as ecmabot
01:06 < mistertwig> purr: i hate you
01:07 < LouisT> mistertwig: make a better one then!?
01:07 < mistertwig> ecmabot is better
01:07 < asdf12> isaacs: where can i found the node streams talk you gave as mentioned in the update streams announcement? i googled, found 1 you gave in japanese, but it's not that great quality
01:07 < Raydiation> ok, installed it globally but now im getting http://dpaste.org/gznPz/
01:07 < Raydiation> when doing cake watch
01:08 < Raydiation> $ npm list -g | grep coff
01:08 < Raydiation> â”œâ”€â”€ coffee-script@1.4.0
01:09 < Raydiation> same error when running: node
01:09 < Raydiation> hm, ok works now
01:10 < Raydiation> im still getting the error though Error: Cannot find module 'coffee-script'
01:16 < rudiX> how to serve buffer of png image as actual image with express
01:16 < rudiX> tryed -  res.setHeader('Content-Type', 'image/png');   res.end(buf.toString('base64'))
01:16 < rudiX> no luck
01:16 < mistertwig> ahhhh i think i remember
01:16 < mistertwig> why are you encoding it as base64?
01:17 < rudiX> http://global3.memecdn.com/I-Have-No-Idea-What-Im-Doing_o_99475.jpg
01:17 < mistertwig> rudiX: try just sending the buffer
01:17 < mistertwig> remove the .toString('base64')
01:17 <@mbalho> anyone know how to upload a binary attachment to a gist?
01:18 < rudiX> mistertwig: thankses :D
01:19 < Raydiation> i dont need to npm link coffeescript into my folder right?
01:28 <@isaacs> mbalho: i always just use the gist rubygem
01:29 < r00723r0> What has Ryan Dahl contributed other than Node.js itself?
01:29 <@mbalho> philsophical ramblings on twitter
01:30 <@mbalho> isaacs: tried that, it messes up binary attachment encoding
01:30 <@isaacs> mbalho: he deprecated those
01:30 <@mbalho> bah humbug
01:31 < Raydiation> any idea why this is empty: echo $NODE_PATH
01:33 < Aria> Because you didn't set any?
01:34 < othiym23> mbalho: you seen this yet? http://techcrunch.com/2012/01/22/post-mortem-for-plancast/
01:34 <@mbalho> othiym23: yep
01:34 < othiym23> cool
01:34 <@mbalho> super good writeup
01:35 < othiym23> seemed like something you and mikeal could learn useful things from
01:41 < Raydiation> Aria: shouldnt this be set by default?
01:41 < Aria> In your shell?
01:42 < Aria> Only if you configure it
01:43 < Aria> Node doesn't change your system configuration
01:47 < mikeal> othiym23: i read that when it was published
01:47 < mikeal> it actually made us pretty sure we were on the right track, we avoided most of the pitfalls 
01:47 < mikeal> but there was always a concern that the entire class of app might just not have a stickiness to it the way we all think it does
01:48 < mikeal> you can tell that, regardless of what happened with plancast, Mark still believes it can be done
01:48 < MI6> joyent/node: Ryunosuke SATO master * 697484d : domain: speed up domain.create  Use `EventEmitter.call` instead of `Event - http://git.io/8L5UQw
01:49 < MI6> joyent/node: Ryunosuke SATO master * fde338b : stream: speed up instantiation of readable stream  - Stream.apply -> Stre - http://git.io/Q0lRXw
01:50 < bradleymeck> mikeal, isaacs any chance net streams2 will be ported back to readable-stream?
01:51 < isaacbw> is there a way to close everything running in a vm instance? I've got a client streaming stuff to stdout and I want to be able to close it (and everything else) down from the host
01:52 < isaacbw> it's not in the context though
01:52 < isaacbw> maybe a sandbox?
01:52 < mikeal> that's all isaacs, i just talk about streams2 enough that i get some kind of credit for them even though i didn't do any real work :P
01:52 < bradleymeck> isaacbw: use a process? 
01:53 < bradleymeck> mikeal ive been using it a bunch to make a tar parser, its interesting, has some odd things that bother me still, but getting the hang of it
01:53 < isaacbw> you mean not use vm? I've got to stick with vm 
01:53 < LouisT> speaking of sandbox, are there any good ones?
01:53 < bradleymeck> i have one but don't maintain it any more
01:54 < mikeal> bradleymeck: why not use node-tar?
01:54 < bradleymeck> the reference wrapping is insane if you want to do it right
01:54 < tjfontaine> isaacbw: the easiest way to keep it in a separate context and then stop it at your whim is to use a child process
01:54 < bradleymeck> mikeal: need some lower level functionality, learning experience
01:54 < LouisT> i use the one by gf3, but i'm just wondering if there are any better ones?
01:54 < isaacbw> I guess I could start a child process and then vm inside of that
01:55 < bradleymeck> mikeal i can recreate node-tar on top of this but its hard to mess with actual headers in node-tar / do things in memory alone due to fstream
01:55 < mikeal> hrm....
01:55 < mikeal> i wonder if you should swap out fstream instead
01:56 < bradleymeck> its tied in pretty tight
01:56 < mikeal> yeah, i haven't looked that closely
01:56 < mikeal> it just sucks to rewrite the parser
01:56 < isaacbw> thanks guys
01:56 < bradleymeck> thats done at least
01:56 < mikeal> cause tar is full of insane inconsistencies 
01:56 < mikeal> which is why isaacs wrote node-tar in the first place
01:56 < bradleymeck> need some compatiblity stuff that node-tar has and I do not involving bsd star
01:57 < mikeal> crazy
01:57 < bradleymeck> mikeal its inconsistent but somewhat predictable
01:57 < bradleymeck> mac tar is fin terrible
01:58 < tjfontaine> heh bsd tar :)
02:00 < bradleymeck> tjfontaine: at least its well documented?
02:00 < bradleymeck> even if it kinda breaks spec
02:01 < tjfontaine> indeed
02:18 < isaacbw> so I'm spawning a child process and trying to write to its stdin, but I get an EPIPE error: http://pastebin.com/hYWjYJSV
02:18 < isaacbw> Error: Write EPIPE
02:23 < isaacbw> maybe I'm writing to it too soon after spawning it?
02:24 < MI6> joyent/node: bentaber master * e576208 : net: socket.readyState corrections  socket.readyState, .readable, and .wr - http://git.io/emrW4A
02:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:39 < harbhub> hey
02:41 < harbhub> who is here?
02:42 < TehShrike> 818 people
02:42 < TehShrike> All waiting for you to ask a question!
02:42 < MI6> joyent/node: Luke Arduini master * 192192a : Colorize API stabilitity index headers in docs  Noted in @shtylman's #389 - http://git.io/7wmCkw
02:42 < rknLA> harbhub: TehShrike is correct.
02:43 < st_luke> w00t
02:43 < TehShrike> Oh hey there st_luke
02:43 <@isaacs> st_luke: oh, you are here
02:43 <@isaacs> kewl
02:43 <@isaacs> thanks :)
02:44 < TehShrike> st_luke: love the new stability headers, btw
02:44 < harbhub> my question is about game development
02:44 < harbhub> what is the best engine for making a browser game that is 3d and uses nodejs for the server?
02:45 < TehShrike> harbhub: an engine with good options for talking to servers via HTTP maybe?
02:45 < isaacbw> oh, I was being stupid and passing the arguments in the argument array, but in the command string
02:48 < mmalecki> st_luke++
02:52 < isaacbw> I wouldn't use node.js for a game server though unless it's a game like tribal wars
02:52 < isaacbw> but a real time game server shouldn't be written in node
02:53 < TehShrike> isaacbw: how do you think node.js would fail as a real-time game server?
02:53 < TehShrike> I've never tried to write one, I don't know what the usual architecture is
02:53 < harbhub> isaacbw what would you use, then?
02:53 < harbhub> i'm talking 3d action rpg
02:53 < harbhub> with multiplayer
02:54 < mmalecki> if running on blizzard scale I'd go with C
02:54 < isaacbw> game servers are usually designed with threads and node.js's asynchronous structure doesn't fit well with the usual way of doing things
02:54 < isaacbw> erlang is popular too
02:54 < harbhub> why C?
02:54 < isaacbw> C, C++
02:54 < TehShrike> I'll bet node.js would be great for a turn-based game
02:54 < isaacbw> you want to keep latency down
02:54 < isaacbw> yea totally
02:55 < TehShrike> But I suppose yeah, for a real-time game you'd want a thread-per-player probably
02:55 < isaacbw> but a multiplayer FPS should be written in C++
02:55 < harbhub> well
02:55 < harbhub> what if i used websockets per player
02:55 < isaacbw> or you could use js for scripting, but would want to write your own host for v8
02:55 < harbhub> and had the server in node?
02:55 < mmalecki> TehShrike: well, scaled across few machines
02:55 < mmalecki> harbhub: this is hardly the same
02:55 < isaacbw> you could totally try it harbhub and prove me wrong
02:55 < mmalecki> thread is a computational unit
02:55 < mmalecki> you can run stuff in them
02:56 < harbhub> what is a computational unit?
02:56 < harbhub> i thought a websocket is like a thread
02:56 < mmalecki> try running computations on websockets :)
02:56 < harbhub> well
02:56 < harbhub> the websocket sends the data
02:56 < harbhub> the server solves it
02:56 < harbhub> the server sends it back across the websocket
02:56 < harbhub> the client uses it
02:56 < harbhub> ?
02:57 < isaacbw> just node is designed like request->response->repeat while a game server will be doing constant computation
02:57 < harbhub> oh
02:57 < isaacbw> you would be going around node so much it wouldn't seem worth it
02:57 < harbhub> i see
02:58 < isaacbw> that and you might start running into speed trouble
02:58 < harbhub> should i make games for a living?
02:58 < isaacbw> haha
02:58 < isaacbw> if you can make a living doing it
02:58 < bradleymeck> isaacbw: well on decently large scaled systems it does not really matter, overall data sync infrastructure is king over computational units
02:59 < isaacbw> I guess it depends on if it's a game like wow or a game like counterstrike
02:59 < harbhub> bradleymeck, what do you do for a living?
02:59 < bradleymeck> work on PaaS
02:59 < harbhub> what platform?
02:59 < bradleymeck> Nodejitsu, some contract work doing similar when i find a bit of time
03:00 < harbhub> would nodejitsu hire me as an intern?
03:00 < isaacbw> harbhub, have you made games before?
03:00 < harbhub> no
03:00 < harbhub> i started one with canvas 2d
03:00 < bradleymeck> maybe if you show open source work relevant to us / become involved but its not just a one off thing
03:00 < harbhub> i had stuff like collision detection  :)
03:00 < isaacbw> a 3D multiplayer roleplaying game is pretty ambitious
03:00 < harbhub> yes, it is
03:01 < harbhub> it is also what i'd like to do
03:01 < isaacbw> well, if you find that you can't tackle it all until you've got some more skills, don't let it break your motivation
03:01 < isaacbw> a lot of people try to start with exactly that and burn out
03:01 < mmalecki> yeah, gotta agree with bradleymeck 
03:02 < mmalecki> if your infrastructure is shitty you're going nowhere
03:02 < harbhub> what infrastructure are you referring to?
03:02 < bradleymeck> overall, systems talking to other systems
03:03 < isaacbw> node could definitely be a part of it
03:04 < someprimetime> for people who use require.js.. is it necessary to use when you end up concatenating everything together for production?
03:04 < isaacbw> possibly the glue between the core system and a faster native system in charge of game calculations
03:04 < someprimetime> or is it a strictly for development tool (just started to play around with it today)
03:04 < isaacbw> you mean using require.js's compiler?
03:04 < isaacbw> it combines and minifies everything when you're ready for production
03:05 < someprimetime> oh i did not know thatâ€¦ i guess that's what i was trying to figure out
03:05 < someprimetime> good times thanks
03:05 < someprimetime> i thought it was either you use the require.js way or you use a standard concatenation way (like i've always done) which is to just combine all files into one and minify it
03:05 < isaacbw> :)
03:05 < isaacbw> you're doing this on clientside right?
03:06 < someprimetime> isaacbw: yep
03:06 < RLa> someprimetime, we use browserify here, in dev it watches files and rebundles when they change
03:06 < RLa> i guess require.js can do same
03:07 < isaacbw> weird,  my process.stdin listener isn't keeping the process open
03:07 < isaacbw> am I missing something?
03:07 < someprimetime> oh nice browserify looks to be from the dude from catonmat.com's company
03:07 < someprimetime> s/company//
03:07 < isaacbw> RLa, require.js pulls files in dynamically until you're ready to compile, so it doesn't do any bundling until the very end
03:08 < isaacbw> I'm not sure if it checks for changes
03:08 < isaacbw> oh I see, I had to do process.stdin.resume()
03:09 < isaacbw> I didn't realize it was paused be default
03:22 < isaacbw> if I spawn a child process with more than 3 stdio pipes, how do I read/write to them from inside the process?
03:47 < isaacbw> woo
03:57 < airandfingers> i'm curious as to why Nodejitsu is listed under "DIY Platforms" on https://github.com/joyent/node/wiki/Node-Hosting.. I'm under the impression that Nodejitsu only provides managed hosting.
04:03 <@Nexxy> airandfingers, that is listing the tools nodejitsu has open sourced that help someone host their own apps
04:04 <@Nexxy> airandfingers, the nodejitsu platform is listed under managed offerings
04:05 < Sly> airandfingers: yeah, what Nexxy said.
04:05 < Sly> Nodejitsu is based on open source products, which we release to you guys.
04:05 < Sly> However, we have proprietary stuff too.
04:05 < Sly> But we provide the basis for you to be able to run your own apps with very little to setup.
04:05 <@Nexxy> Sly, you work for nodejitsu?
04:05 < Sly> Nexxy: yup.
04:05 <@Nexxy> cool! :D
04:05 < Sly> I thought you knew?
04:06 < Sly> lolol
04:06 <@Nexxy> nope!
04:06 < airandfingers> @Nexxy, Sly: thanks, I got my answer from #nodejitsu.. apparently Nodejitsu offers private clouds for businesses, and it's listed mostly as a category for all the components it provides that are useful in any DIY setup
04:06 < airandfingers> (it's listed both under "Managed" and "DIY")
04:07 <@Nexxy> the listings under DIY are actually the OSS tools
04:07 < mmwwww> Is the oss nodejitsu stuff a good fit for easy CI with node apps?
04:08 < isaacbw> hobaloo
04:08 < airandfingers> mmwww: i've used forever, and it's definitely useful for daemonizing a node app
04:09 < mmwwww> ah I mean more like when I push a change to github, I'd have something on my server that would pull, build, test, and if OK push it to live and run that
04:10 < mmwwww> like a selfhosted heroku
04:27 < airandfingers> mmwwww: ah, CI = continuous integration. i wouldn't know about that, i'm only just starting my node.js deployment research
04:28 < isaacbw>  ping pong
04:28 <@Nexxy> it's generally a good idea to test bots in your own channel ;3
04:28 < isaacbw> oh, no bots :)
04:29 <@Nexxy> quiet bots are fine, but we've already disallowed testing of other people's bots
04:29 <@Nexxy> maybe once it's functional you can introduce it?
04:29 < isaacbw> I'm not playing with a bot
04:29 < isaacbw> dont' worry
04:29 <@Nexxy> oh ok :)
04:39 < pau111> hello node community
05:07 < yarco> how to add two login pages to do oauth with passport?
05:08 < yarco> two url
05:08 < yarco> https://github.com/jaredhanson/passport-github/blob/master/examples/login/app.js    seems we can only use one. 
05:08 < yarco> cause of https://github.com/jaredhanson/passport-github/blob/master/examples/login/app.js
05:08 < utf1000> so... is tchol.org permanently down? 
05:08 < yarco> sorry . cause of callbackURL
05:09 < utf1000> i'm a bit new to node.js - is that repo community based or some random dude? 
05:11 < arnorhs> utf1000: what is a repo community?
05:15 < utf1000> arnorhs: er I think tchol.org provides npm an an RPM for CentOS 6
05:15 < utf1000> there's this thing I want to install and the script hardcodes itself to that RPM repository
05:16 < arnorhs> ah, right
05:16 < arnorhs> i just couldn't parse that question
05:17 < arnorhs> nm :)
05:20 < utf1000> is it not common to expect npm and nodejs already packaged for your linux distro? 
05:20 < utf1000> i guess I could bite the bullet and figure out how to package npm as a rpm. but would be nice to just steal it .
05:22 < Aria> Node's moved much faster than distros lately.
05:22 < Aria> Good with backward compatibility, but distros suck with moving targets, sadly.
05:22 < bradleymeck> substack: why /(\W)/g '\\$1' instead of /\W/g, '\\$&'
05:28 < substack> bradleymeck: in perl $& turns on "slow mode" and is avoided
05:29 < bradleymeck> PCRE is vastly different, ill run a bench then
05:31 < bradleymeck> substack: seems to vary a little http://jsperf.com/captured-vs-not
05:36 <@mbalho> someone should print these and make node.js cookies http://www.thingiverse.com/image:107263
05:39 < asterick> mbalho: I do like baking, and own a replicator 2.
05:39 <@mbalho> well now you are definitely obligated!
05:39 < asterick> hahaha
06:02 < TehShrike> heh http://www.codeschool.com/jingles/
06:03 < cxreg> othiym23: want to be a maintainer?
06:03 < cxreg> https://github.com/mranney/node_redis/issues/358
06:05 < cxreg> othiym23: a few friends of mine and I are considering making a group to maintain it
06:06 < TehShrike> node_redis doesn't have a current maintainer?
06:08 < cxreg> no.  ranney hasn't pushed a commit in 2 months
06:11 < TehShrike> It's a pretty high-profile project
06:11 < TehShrike> Have you talked to mranney?
06:12 < TehShrike> It would be nice to add contributors as opposed to straight-up forking
06:15 < cxreg> read the link above
06:15 < cxreg> also, https://twitter.com/cxreg/status/282001273262321664
06:20 < kenperkins> mscdex ever in here
06:33 <@konobi> kenperkins: sometimes
06:33 < kenperkins> ty
06:35 < samholmes> Where do you guys like to put redis after making it?
06:35 < TehShrike> cxreg: quite an opportunity, to take over a project like that.  It would be a ton of work I imagine
06:36 < TehShrike> cxreg: I'm not sure I'd like a project like that on my back.  It would probably be a good idea to canvas the projects using that module, and find the ones written by the biggest open source contributors
06:36 < TehShrike> A project like that needs someone used to dealing with pull requests
06:42 < joe-node0> Quiet night
06:59 < jden> joe-node0: indeed
07:41 < mistertwig> t this 1 
08:14 < TehShrike> f this c
08:17 < someprimetime> yeah f it! in the b!
08:20 < TehShrike> that stupid s l!
08:22 < TehShrike> s that l b in the a until he f o!
08:23 < TehShrike> And whatever you do, DON'T SWEAR!
08:28 < fotoflo> so i have this long standing question, when I'm writing code inside an ejs file, is it possible to but a breakpoint in there?
09:17 < yarco> always get "db object already connecting, open cannot be called multi"â€¦when using nodejs with mongodb
09:23 < meckanism> ls
09:23 < meckanism> oops
10:22 < test_> I am trying to use express.js. I want to send a value to index.js only if its a number, else I want to send 0. How to do this? because I am unable to use *if* statement inside app.render
10:24 < test_> something like this ca1 : (if (typeof result3[1]=="number") retrun result3[1] else retrun 0;),
10:25 < test_> but its not working, and I am sure, I am taking this wrong, in app.render()
10:27 < skope> hello. i don't get how regex searching works in nodejs. any advices?
10:27 < skope> google didn't find anything useful
10:32 < SomeoneWeird> skope, just like normal javascript
10:33 < skope> SomeoneWeird: okay. thank you
10:33 < test_> I am trying to use express.js. I want to send a value to index.js only if its a number, else I want to send 0. How to do this? because I am unable to use *if* statement inside app.render
10:33 < SomeoneWeird> test_, ca1: (typeof result3[1] == "number" ? result[1] : 0)
10:33 < test_> Sorry, thats res.render()
10:34 < test_> SomeoneWeird: Thank-You so much.. how could I not think of it... me gusta :)
10:38 < dscape> this might be useful for some node devs out there: https://twitter.com/dscape/status/284607623695839233
10:38 < fotoflo> test_: btw, i usually do this kind of logic prior to calling render()
10:38 < test_> fotoflo: I know,. this was so obvious.. nd god knows, what was I thinking
11:10 < busata> http://pastie.org/private/y4ryhry1rwtto7comkkh5w is there a common way on how to rewrite this into something not clutterish? (aka, get rid of the callback indentations?)
11:16 < zomg> busata: you could use a library like async
11:16 < zomg> it lets you write it more like a chain of functions so it doesn't do the callback pyramid you'd otherwise get
11:17 < mistertwig> yeah async is great
11:17 < mistertwig> recommended
11:19 < busata> mm, I'll see if that "waterfall" method from async does the trick, thanks
11:19 < EriksLV> Hi!
11:20 < EriksLV> quick question: does request module supports downloading only first megabyte of given url?
11:20 < EriksLV> or until some data is found
11:21 < EriksLV> for example </head>
11:29 < dscape> EriksLV: yes, stream it buffer until you wish and be done with it
11:30 < EriksLV> just as I thought
11:30 < EriksLV> thanks dscape
11:31 < busata> http://pastie.org/private/qutyfxzyvewwtvsskerhlg much better, thanks zomg!
11:31 < zomg> np
11:42 < drook> guys, I have a stupid question. what does mean 'invalid' in 'npm list' and how can I fix this module ?
11:44 < stephan_> hello there - is this a good place to advertise jobs / co-founding opportunities?
11:45 < RLa> stephan_, why not :)
11:45 < stephan_> thank you RLa. 
11:46 < stephan_> Well in a nutshell I have built a static prototype for an app, and am looking to meet a like-minded cofounder in London. If not interested, we can also have beers. That's fine too. PS: I have run 3 companies in the past and occupied Board positions at two others. 
11:50 < MI6> joyent/libuv: Ben Noordhuis master * 69ab328 : sunos: fix !defined(PORT_SOURCE_FILE) build - http://git.io/ekE1hA
11:54 < stephan_> allright, no joy on the co-founder thing then. I also have a role in a full time position at an analytics company where i'm currently CTO. Would be node, mongo and d3. msg me if interested
11:57 < RLa> i just wish i could move to London :)
12:00 < terietor> hello
12:00 < terietor> i want to make an authenticated request with node, this is my code http://paste.kde.org/632654/
12:01 < terietor> i think that I write everything correct, but i receive a reply from the server that my request is unauthorized
12:17 < Furai> Hey, I'm going to start programming simple IRC Bot (I know it's boring but I need it for my stuff) in node.js.
12:17 < Furai> Anything I should know before doing it? Any tips?
12:17 < Furai> Thanks for answers in advance.
12:20 < test__> I am getting an object in datetime object from SQL. Now I want to pass it to jade and fetch a google chart. so how should I transform it toString() or something else.
12:22 < zomg> Furai: unless you want to implement the protocol parsing etc. yourself, check out a library called node-irc
12:23 < MI6> joyent/node: Ben Noordhuis master * a329729 : buffer: speed up base64 encoding by 20%  Remove a lot of branches from th - http://git.io/owwLxw
12:23 < Furai> zomg, thx.
12:25 < test__> I am getting an object in datetime object from SQL. Now I want to pass it to jade and fetch a google chart. so how should I transform it toString() or something else.
12:40 < mmwwww> What tools would I need to put together on a machine to have my own kind of heroku so I can push code to github and when there's a change, pull it in, build it, run my tests against it and then push it live?
12:51 < daedeloth> what's the easiest way to host a nodejs application? I don't need database or anything, just "running the code" :) Oh, and it would be great if I coudl just magically upload it with ftp and the application restarts
12:56 < Shinster> daedeloth: I use something called nodemon which restarts your app when it sees files have changed
12:56 < daedeloth> cool, looking into that
12:56 < Shinster> a combination of that running on start up and sftp (never use ftp) you could do something like that
12:57 < Doikor> daedeloth: or you could just use something like heroku
12:57 < Doikor> for a single web worker its free anyway
12:57 < Shinster> MS are practically begging people to use asure for node apps, I think they've some fairly competetive packages for hosting things on their cloud
12:57 < daedeloth> well I have a dedicated server doing nothing all day, so actually it wouldn't be bad to just use supervisor and do ftp uploads
12:58 < Shinster> not ftp, never ftp :P
12:58 < daedeloth> only problem I can think of is: ftp uploads 20 new files, supervisor is going to restart 20 times
12:58 < Doikor> and in herokus case you just push the application (or make heroku watch your git repo) and it should reload automatically.
12:58 < Doikor> but yeah if you have your own dedicated server already just use that.
12:59 < Doikor> i would still use git to put the code in place though. make some kind of a hook to reload it on changes in your release/default branch
12:59 < daedeloth> yea, I have an account on springloops because I mainly did/do php development
12:59 < daedeloth> so on commit springloops does an (s)ftp upload
13:58 < Kakera> is it okay to use cookieParser when all I need to store is a single ID?
13:59 < Kakera> sorry, I meant cookieSession
14:03 < daurnimator> *new to npm/node*
14:04 < daurnimator> just instaled a package, and I see harmony-collections@0.3.8 /usr/lib/node_modules/harmony-collections
14:04 < daurnimator> yet node -e "require('harmony-collections')" doesn't seem to look in that location?
14:04 < Kakera> because you installed it globally
14:05 < daurnimator> Kakera: yep. but require doesn't search in global dir?
14:06 < daurnimator> I can see it looking for /usr/lib/node/harmony-collections
14:06 < Kakera> no
14:06 < daurnimator> and /node_modules/harmony-collections
14:08 < Kakera> don't install modules globally unless they have command-line tools
14:08 < daurnimator> I want to be able to just start up the node interpreter for demos; and be able to use that library
14:08 < daurnimator> i.e. from any dir; and I'm not working on a project
14:09 < Kakera> why do you want to use it from any dir?
14:09 < daurnimator> I suppose I can NODE_PATH='/usr/lib/node_modules'
14:09 < daurnimator> Kakera: cause I want to type in 'node' and mess around
14:10 < daurnimator> i.e. I want a javascript repl available at any given time
14:10 < Kakera> pick a directory (e.g. your home directory) and launch it from there
14:19 < urbann> hi all
14:19 < urbann> this might be a really stupid question but I am not able to find any answers anywhere. 
14:19 < urbann> I building a rails site where users can select their own themes.
14:19 < urbann> Lately I have thought about the possibility to provide a separate tool that generate html/css "on the fly" (WYSIWYG) using javascript.
14:19 < urbann> The users can then click on a button and this will overide the theme/html/css file they currently have directly on the server.  
14:19 < urbann> Is this possible ?  and  if so is it some huge drawbacks using node to generate files on the server?
14:21 < urbann> (some huge drawbacks using this approach ?)
14:21 < andu> urbann, will node be generating static files for each user
14:21 < andu> and then your rails stack serves it?
14:21 < urbann> andu: yes that is the idea
14:21 < andu> that should be fine
14:22 < urbann> andu: yes
14:22 < andu> its just another file, right
14:22 < andu> :)
14:23 < urbann> andu: yes, but I find it strange that I haven't seen any usage of this approach
14:23 < andu> we skip the rails thing
14:23 < andu> or the static thing
14:23 < andu> ;P
14:24 < urbann> we skip the rails thing / or the static thing, sorry I don't understand what you mean?
14:26 < andu> urbann, okay how many users do you have/expect?
14:27 < urbann> andu: not many maybe 100 
14:28 < andu> so, what if you have it in memory?
14:29 < andu> say bunch of css selectors and the overriding color hex code.. maybe how many changes? make it 50.. so thats 5000 data entries, each taking how ever big that is in js objects. its still under 5MB of ram
14:29 < urbann> andu: you mean serve it from memory and store it in the database?
14:30 < andu> just dump it to disc as JSON, even easier
14:31 < urbann> andu: yes that is true
14:31 < andu> and you have the advantage of not needing to read off disc for every .css
14:32 < andu> so response time goes up
14:32 < andu> down* i mean :)
14:32 < andu> cpu is way fast
14:33 < urbann> yes that is also true
14:35 < urbann> still I like the idea to just generate a singel file, no database and cache overhead
14:36 < urbann> is it really and drawbacks to that approach comparing to your solution?
14:36 < mmmmm> hey
14:37 < andu> urbann, in my stack I dont use a database server at all. All data is always in ram. Just media/images/blobs are off disc
14:38 < andu> sure its not the usual way, and its experimental.. but damn it feels nice
14:38 < urbann> andu: cool!
14:39 < jngleWarrior> Listen up
14:39 < urbann> I been playing a bit with meteor JS and if feels nice for sure
14:40 < jngleWarrior> in the long run I'm gonna live in the jungle of hawaii and there might be some php work out there but my heart is telling me to learn node... if I become a node ninja can I find nieche clients online?
14:40 < andu> jngleWarrior, php is going the way of the dodo
14:41 < jngleWarrior> DODO! YES!
14:41 < jngleWarrior> what's the time frame like?
14:41 < urbann> andu: how du you store your data then? only using json strings in js files ?
14:41 < andu> urbann, one long array of objects.     var database = []
14:42 < jngleWarrior> andu: what's the time frame for the php doo doo... how quickle are pre developed node tools for basic deployments catching up to php tools?
14:42 < urbann> andu: yes, why not? I like the idea!
14:42 < andu> then database.push({type: "user", name: "whatever"})
14:42 < andu> soo simple
14:44 < andu> urbann, the only reason not to do it is if you are going to deal with too much data for your RAM, so you'll need to swap out to disc.. SSD is nice for this. or multiple node machines that share the load
14:46 < andu> jngleWarrior, with expressjs you're up and running quite fast
14:48 < urbann> andu: thanks, I will read up a bit on SSD 
14:48 < andu> not much to read. its just bigger slower ram
14:48 < andu> but way faster than spinning platters that have seek time
14:49 < jngleWarrior> expressjs hmmm
14:49 < jngleWarrior> hehehe *giggle like litte girl*
14:49 < jngleWarrior> I like functional programming
14:49 < jngleWarrior> whatch you things about under score andu 
14:49 < andu> jngleWarrior, yes!
14:50 < andu> havent used it
14:50 < jngleWarrior> can u give me an idea of the purpose of some basic frameworks
14:50 < jngleWarrior> eg. backbon epress etc.
14:51 < jngleWarrior> i'm nub... but I've always suspected javascript is gods language and finally I'm here
14:51 < andu> I prefer socket.io for that
14:51 < urbann> andu: I know very little about deployment, scaling and so on using node
14:51 < jngleWarrior> bcakbone* express*
14:52 < andu> well, express gives your simpler file serving, routing, cookies etc
14:52 < andu> instead of building all that from scratch.. not recommended to do that, world of pain
14:54 < andu> urbann, me too.. I'm more into electronics, hardware, robots and then 3D/visual processing on the software side
14:54 < txdv> does this stuff make you hard?
14:54 < andu> it does
14:56 < Sembiance> muhahaha!
14:58 < urbann> andu: anyway thanks a lot for your thoughts, this all in memory approach are something I will look into more!
14:58 < urbann> andu: see you
14:58 < andu> urbann, cool :)
15:01 < txdv> ALL IN MEMORY
15:01 < txdv> try all in L1 cache
15:02 < andu> txdv, thats loops :P
15:02 < txdv> libuv is an event loop
15:04 < MI6> joyent/libuv: SaÃºl Ibarra CorretgÃ© master * 9614d51 : unix: reset errno when using sendfile emulation  A common way to check if - http://git.io/QWUStQ
15:18 < stongo> is there any down side to using express.methodOverride for a restful service? wondering if there is a real need to use restify or hapi for example instead of methodOverride
15:47 < MI6> joyent/node: Ryunosuke SATO master * c4fc0fe : https: optimize https.createConnection()  Stop using `arguments` for perf - http://git.io/oZS1gg
15:49 < knolan> anyone have any suggestions on how to easily unit test my connect middleware? I was thinking of mocking req & res objects but wondered if there is a library that does this for me that I havent found?
16:04 < brianc> knolan: if you wanna do higher-level tests (end-to-end) check out https://github.com/brianc/node-omf
16:05 < knolan> brianc: tx :) ill check it out
16:05 < knolan> at this point i'd like to just directly test the handler
16:06 < knolan> to be thorough I was going to do both
16:06 < brianc> i don't know a mocking framework. tbh I just roll my own fakes when I need them
16:08 < ralphholzmann> is there any other props on node.js error objects besdies err.message and err.stack?
16:08 < ralphholzmann> s/is/are/
16:09 < knolan> brianc: tx :) I'll be rolling my own for now as well. 
16:44 < nodiot> gentleman.. i require assistance in a matter of mongoose
16:44 < nodiot> might there be anyone here?
16:47 < nodiot> anyone here?? or is it dead?
16:48 < tjfontaine> patience is a virtue
16:49 < tjfontaine> also, it's easier to ask, than it is to ask to ask
17:01 < Kakera> when a socket is closed, do all its listeners get automatically garbage collected?
17:12 < MI6> joyent/libuv: Ben Noordhuis master * 92a19a1 : unix: ensure done_cb gets called after uv_cancel()  Wake up the event loo - http://git.io/OTgZdg
17:17 < bnoordhuis> Kakera: if there are no other references to the socket object, yes
17:17 < Kakera> good to know
17:17 < Industrial> async; this was not the order I was expecting it to be in .. anyone know why? https://gist.github.com/54da1ca8d5196d0b6824
17:27 < MI6> joyent/node: Ben Noordhuis master * 910e24b : fs: remove fs.sendfile()  Said function has been broken (and useless) sin - http://git.io/UW6cAg
17:29 < CoffaBun33h> Industrial, your inner parallel() will run both of the inner calls async so you will get unexpected results there
17:37 < MI6> joyent/node: Ben Noordhuis master * c6e958d : fs: make 'end' work with ReadStream without 'start'  Make `fs.createReadS - http://git.io/lqhVXw
18:06 < mpfundstein> do u guys think coffeescript can becomr as elegant as ruby?
18:13 <@konobi> no
18:18 <@mbalho> no
18:37 < othiym23> no
18:39 < vicky> can any body guide me i have windows 2003 old version can it run nodejs ??? 
18:40 < vicky> can any body guide me i have windows 2003 old version can it run nodejs ???
18:41 < vicky> can any body guide me i have windows 2003 old version can it run nodejs ??? any one seems no body interested
18:41 <@konobi> vicky: impatient much?
18:41 <@konobi> vicky: try it and see
18:42 < vicky> i have option to buy hosting with windows server 2003 i cant try its cheap then server 2008 thats why asking if it can run nodejs aap 
18:43 <@konobi> try an hour by hour option
19:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:06 < thomas___> Anyone know of any other continuous deployment servers like https://github.com/arunoda/nariya?
19:08 < jcrew> thomas___: i was looking at building something like that - what is your issue with that one?
19:09 < thomas___> jcrew: Just wanted to see if there where any alternatives
19:09 < thomas___> jcrew: hasn't really been maintained / gained any traction
19:10 < jcrew> thomas___: does this fit your needs?: https://github.com/substack/fleet
19:13 < thomas___> jcrew: fleet looks interesting. but I don't think it updates the code and restarts the server based on git "post-recieve" web hook.
19:13 < kenperkins> say I'm installing an npm package with -g, and I have a bin that's linked into {prefix}/bin
19:13 < kenperkins> what's the right way to get a config file to such a package?
19:13 < kenperkins> i.e. config.json
19:15 < jcrew> thomas___: what kind of features would you build into it?
19:15 < jcrew> or want to use
19:16 < thomas___> jcrew: into fleet?
19:17 < jcrew> thomas___: blog.nodejs.org/2012/05/02/multi-server-continuous-deployment-with-fleet/
19:17 < djazz> how can I disable print of user input in node?
19:18 < jcrew> djazz: for masking passwords?
19:18 < djazz> I'm starting a child process and want to send keystrokes to it only
19:19 < thomas___> jcrew: this is great I'll have to read it over and come back if I have any further questions, thanks a bunch
19:19 < djazz> hm, yea maybe
19:20 < jcrew> thomas___: yea i just thought "substack already did all this", no reason i should.  probably same reason nariya hasn't taken off
19:21 < jcrew> djazz: stdin is a writable stream you can 'write' data to
19:21 < djazz> jcrew: yes, and pressing a key sends it to both stdin and stdout?
19:22 < djazz> I'm piping process.stdin to child.stdin
19:22 < jcrew> and you want to hide the process.stdin ?
19:22 < djazz> yeah
19:22 < jcrew> do you have sample code?
19:23 < djazz> hold on
19:23 < jcrew> substack: i love the artwork on your blog.
19:25 < djazz> jcrew: http://pastebin.com/U3PeeHJP
19:25 < djazz> piping line 26
19:32 < jcrew> taking a look
19:40 < jcrew> djazz: have you tried overriding process.stdout ?
19:40 < jcrew> or hijacking it
19:41 < jcrew> just a thought, i'm not sure the right way to do it
19:46 < cnd> Hi all, I want to be able to verify that a server's cert that I connect to using https.request() is a specific cert, but I don't want it to do any other validation like checking that the IP or hostname matches what's in the cert
19:47 < cnd> I can't seem to find any other validation mechanism than https.request option 'rejectUnauthorized', but that will check whether the ip or hostname matches
19:47 < cnd> I need some finer grained mechanism that *only* checks if the certificate matches a known certificate
19:54 < evanc_> Hey there, looking for some insight on a tracking app i'm trying to develop in node. The key piece I need to understand is the best approach for connecting a 3rd party site to the Node app. Here is the general app flow: http://www.lucidchart.com/invitations/accept/50ddf7b6-b7a4-4ef9-99a0-2a2b0ac1cb0f
20:15 < ifnspifn> Hiya. So I've got a very simple node server running, and I'm attempting to implement an oauth2 client flow in it. I've gotten to the point where I'm routing calls to http://localhost:8888/oauth2callback{etc}, but how would I persistently store the access token from that callback?
20:16 < ifnspifn> (when I say I'm routing calls, I'm using this tutorial for a request handler: http://www.nodebeginner.org/#continuereading)
20:20 <@mbalho> ifnspifn: usually you put the token in a database and then give the user a cookie
20:22 < ifnspifn> mbalho: alright, I'll check that out. thanks
20:22 <@mbalho> ifnspifn: here is a super simple example (no frameworks) https://github.com/maxogden/github-oauth
20:29 < evanc_> Hey there, looking for some insight on a tracking app i'm trying to develop in node. The key piece I need to understand is the best approach for connecting a 3rd party site to the Node app. Here is the general app flow: http://www.lucidchart.com/invitations/accept/50ddf7b6-b7a4-4ef9-99a0-2a2b0ac1cb0f
20:30 <@konobi> evanc_: passport
20:34 < Cronoh> hi all, launching my first test node app on my server, im a noob to linux and node somewhat but getting it all working... how do i get my node to run as a background process basically? it works fine executing inside my shell right now but i don't want to have to have a shell window open for it to be alive obviously
20:35 < evanc_> konobi: that looks like it will do the trick, many thanks!
20:36 < meckanism> Cronoh: take a look at http://blog.nodejitsu.com/keep-a-nodejs-server-up-with-forever
20:42 < kenperkins> isaacs: does npm update <packagename> apply to global packages?
20:44 < Draggor> Anyone here use api-easy to do restful api testing?  Is there something like that but better?
20:45 <@konobi> restify has some testing stuff, iirc
20:53 < Industrial> meh async.auto works a little weird, if you have three functions A B and C and you list A as a dependency of B and C, A will get called twice ..
20:54 < Industrial> but what I really want is to pass scope from one A call to one B and one C call
20:57 < Industrial> in my case, A is trying to make a directory twice which yields an error...
20:59 < jt416> Anyone here have knowledge of soap module?
20:59 < jt416> or perhaps workflow?
21:00 < mpfundstein_home> do you want to know how to code a soap application? do you know what it means?
21:00 < jt416> I am trying to figure out if complex types from schema are translated to js objects when parsing WSDL url
21:00 < mpfundstein_home> ok ill have to pass on this
21:02 < jcrew> anyone tried 'nide' ?
21:02 < jcrew> jt416: i wasn't able to find a good SOAP module that works for a lot of different kinds of WSDLs
21:03 < jcrew> i looked 4 or 5 months ago though, NPM's site may be able to help you out
21:10 < busata> http://pastie.org/private/bscwuuqrrfspg1gblziirw hmm, how would I access the buffer & encoding values within the read_file function? as-is it doesn't work
21:20 < MI6> joyent/libuv: Ben Noordhuis master * 546387f : include: add note about SIGRT0 and SIGRT1 on linux - http://git.io/M5zpSw
21:24 < gorillatron> Anyone know of a js lib for displaying object trees like in the console?
21:24 < gorillatron> Anyone know of a js lib for displaying object trees like in the console?
21:24 < tjfontaine> repeating yourself won't get you a faster answer
21:26 < gorillatron> lol im sorry irssi bugged
21:26 < arnorhs> gorillatron: you mean as text?
21:27 < jt416> thanks jcrew
21:28 < gorillatron> nah, I mean a more like a widget that is similar to what console.log outputs in the console
21:28 < jt416> it seems the soap module is parsing the wsdl, but i am having trouble figuring out how to call a method that has a complex type parameter
21:29 < tjfontaine> gorillatron: you mean a lib that for a given object will generate a treeview
21:30 < arnorhs> gorillatron: i don't know of a lib that does that, sorry
21:30 < arnorhs> it should be pretty simple to iterate through an object like that yourself
21:30 < arnorhs> but i guess you don't want to do all the styling / interactions etc
21:31 < chovy> geekli.st is down
21:32 < gorillatron> anorhs: yeah it wouldnt be hard to do. Its just not the fun part of the project im working on ^^
21:33 < arnorhs> yeah :/
21:35 < arnorhs> hm, i did find this: http://codeonfire.cthru.biz/?p=79
21:35 < arnorhs> cc gorillatron 
21:35 < arnorhs> but it might suck, who knows
21:38 < gorillatron> anorhs: yeah I saw that too, just looks a bit bloated
21:38 < jocafa> didn't someone around here work on ifttt.com?
21:39 < busata> hmm, I read a file into a buffer with utf8 encoding, but it keeps adding "\u0000" in replacement for spaces, how could I get rid of those?
21:42 < busata> wups, nvm
22:07 < geNAZt> hi. i want to ab benchmark an expressjs app. but ab tells me that i am using a incorrect protocol for the connection. cmd is ab.exe -n 1500 -c 20 http://192.168.1.106/. Error Code is 730047. Microsoft itself says its cause of IPV6. I complete disabled it but it didnt work even now.
22:53 < sk8ball> so is .10 considered a stable release or like a release canidadate
22:53 < sk8ball> and for someone just getting into nodejs should i be using it
22:54 < sk8ball> or should i stick with 0.8.16 for now?
23:05 < FunnyLookinHat> sk8ball, 0.8.16 should do fine... 
23:06 < FunnyLookinHat> sk8ball, basically, whatever is easiest for you to install - for most of us that's 0.8.16 - 0.10 just has some new things added - nothing detrimentally removed or anything 
23:19 < substack> isaacs: npmjs.org is down
23:23 < arnorhs> npmjs.org dang
23:25 < ruff> uh oh, someone created an account named __proto__
23:26 < jcrew> lol
23:28 < arnorhs> hah
23:49 < wolfeidau> Gday is the npm site misbehaving for anyone else ? http://npmjs.org/package/connect-winston times out loading
23:50 < tnorris> not just you
23:50 < jrajav> The internet lies: http://www.downforeveryoneorjustme.com/npmjs.org
23:52 < tnorris> well, it's reachable. just takes forever to get anything back.
23:52 < wolfeidau> Site is fine, navigating to the projects is the bit that is timing out
23:53 < houssem> hey guys, how do you get around illegal origin for socket.io testing locally ? i tried io.set("origins","*:*"); .. 
23:53 < wolfeidau> tnorris: thanks will try again later or try google cache :)
23:53 < tnorris> jrajav: that might be failing since http://npmjs.org/ does return something. it's just a redirect.
23:53 < tnorris> `curl npmjs.org`
23:56 < wolfeidau> yeah try curl https://npmjs.org/package/connect-winston
23:57 < wolfeidau> times out for me
--- Log closed Sat Dec 29 00:00:45 2012
