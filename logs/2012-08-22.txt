--- Log opened Wed Aug 22 00:00:02 2012
00:11 < rioter> rvagg: we tested the released version. Shrug not to fussed :P Shut up and enjoy free beer :D
00:14 < rvagg> rioter: fair enough! webkit snob
00:14 < rioter> I did not build the site. But i did test it in firefox
00:15 < rvagg> ok, not a big deal of course, just wanted to make you aware in case you cared
00:15 < rioter> I will get craig to look at it :)
00:15 < rvagg> good work though
00:15 < rioter> Thanks.
00:31 < djMax> I have an absolutely baffling issue. Stock node.js, 0.8.7, listening on a port. Works fine from a browser, hangs when called from iOS
00:31 < AAA_awright> astropirate: ?
00:33 < djMax> but if I take down the server, it errors right away. So it's as if node is listening, but just sitting on it
00:34 < TooTallNate> djMax: are you running over https?
00:34 < djMax> so in the form of a question, what is the earliest thing I can do to log an incoming request in node?
00:34 < djMax> I am, but I confirmed it happens over http too
00:34 < TooTallNate> djMax: server.on('connection')
00:35 < djMax> It's like it's needing a header I don't have
00:35 < TooTallNate> djMax: by "on iOS" you mean mobile safari?
00:35 < djMax> No, NSURLRequest
00:35 < therealkoopa> Suddenly npm install foo --save isn't saving the module in package.json -- Any idea why that would stop working?
00:35 < djMax> so naked-ish
00:36 < TooTallNate> djMax: you might want to reduce down to a net.Server and take a look at the raw data
00:36 < TooTallNate> see if there's anything eye-popping
00:36 < TooTallNate> djMax: and you *are* using the NSURLRequest correctly right?
00:37 < TooTallNate> just have to check :p
00:37 < djMax> Well it used to work, so one can only suppose. And it works for google.com
00:38 < djMax> I'm using express, so looks like connect event is taken over or something
00:38 < CIA-88> node: isaacs v0.8 * r2f1985c / (101 files in 7 dirs): npm: Upgrade to 1.1.57 - http://git.io/ODzHdQ
00:40 < djMax> bah, of course upgrading to 0.8.7 just to be sure has broken something else.
00:40 < djMax> c.context.loadPKCS12(options.pfx, options.passphrase) "not enough data"
00:40 < apipkin> is there a module that allows you to interact with git repos in node.js. for instance, if there was a .md file, that i wanted to display as content for a site?
00:42 < djMax> ok, have it logging now.
00:46 < duko> hi i'm looking for some javascript advice
00:46 < duko> i'm working with code where someone added properties to the global Object
00:47 < duko> they use the properties on defined functions
00:47 < duko> and so i've created a wrapper to add the properties to an object
00:48 < duko> and when i add properties to a defined functions prototype
00:48 < duko> these do not appear callable without first prefixing them with prototype.
00:48 < duko> for example
00:48 < duko> n = function () {}
00:48 < duko> n.prototype.cow = 4
00:49 < duko> n.cow is not available
00:49 < duko> but n.prototype.cow is
00:49 <@Nexxy> duko, var x = new n();
00:49 <@Nexxy> x.cow will be defined
00:49 <@Nexxy> you have to instantiate an object that has n's prototypes before they will be available
00:49 < apipkin> prototypes are only available on instantiated objects
00:49 < apipkin> new n() !== n 
00:50 < Uncle_Sam> prototype is a field that all objects contain containing a link to an object containing a constructor field on which getter function and iterators fallback on to look for properties
00:50 < duko> this persons code uses these properties on uninstantiated objects and instantiated ones
00:50 <@isaacs> therealkoopa: npm -v == ?
00:50 < djMax> top request works, bottom doesn't: http://pastebin.com/Lng0mD2e
00:50 <@Nexxy> duko, you shouldn't be adding stuff to global anyway
00:50 < therealkoopa> 1.1.57
00:50 < djMax> Which implies it's not the headers anyways
00:50 < therealkoopa> isaacs: ^
00:50 <@isaacs> therealkoopa: weird.  i just did that.
00:51 < duko> i wrote this wrapper function to remove these properies from the global Object
00:51 <@isaacs> therealkoopa: do you have a package.json?  what did you actually install?
00:51 < duko> i'm trying to isolate this code
00:51 < duko> but i'm not sure how to handle this
00:51 < duko> the code is unwieldly.
00:51 < duko> making it hard to remove this situation
00:51 < therealkoopa> I have a package.json.  I'm trying a bunch of things and none are working --save-dev isn't working either.  I'm sure it's not an issue w/ npm itself, but something screwy on my end.  Just cna't figure out what changed.
00:52 < therealkoopa> isaacs: In fact, it works in one project, and doens't work in this brand new project.  I ran npm init in the new project, so it created the package.json
00:55 < djMax> so it's not the headers, request is getting fired appropriately... what now?
00:55 <@isaacs> therealkoopa: strange.
00:55 <@isaacs> therealkoopa: it's dinner time here, though.  post an issue if you can figure out how to reproduce it
00:56 <@isaacs> therealkoopa: is it actually installing anything?  maybe run with -ddd to dump triple debug levels
00:56 <@isaacs> if you can reproduce it with an empty folder and *just* a package.json file, then that's usually awesome for tracking it down, so share that in the bug report.
00:58 < djMax> I'm starting to suspect express
01:03 < djMax> farkin' express body parser
01:04 <@Nexxy> djMax, http://youtu.be/rX7wtNOkuHo
01:04 < djMax> heh. Is bodyParser known to suck?
01:04 < TooTallNate> djMax: it just expects a content-type
01:06 < djMax> Hmm. So my stuff is passing a content-type but there is no body, so I guess that's confusing it.
01:06 < TooTallNate> djMax: that shouldn't be a problem, but maybe set content-length as well
01:06 < TooTallNate> to 0 in your case
01:07 < ttilley> is there a node.js equivalent of boto for python or fog for ruby?
01:07 < ttilley> if not, i am SO writing one and calling it "nog"
01:11 < jesusabdullah> ttilley: Yeah, there should be tools like that around :)
01:11 < djMax> This does appear to be a bug in express actually.
01:13 < timeturner> how do you insert a dependency into the package.json from npm?
01:13 < rvagg> npm install <dependency> --save will do it for you
01:13 < zipp> npm install --save
01:13 < zipp> ^
01:14 < TooTallNate> djMax: doubtfulâ€¦ to be honest
01:14 < timeturner> what if I already have the package installed
01:14 < timeturner> and just want to add it
01:14 < djMax> Content-Type header is valid in a GET. So why would it be ok to just "not respond" if that's present
01:14 < timeturner> without fetching
01:14 < djMax> because that's what it does, just sits until a timeout
01:14 < djMax> Even with Content-Length: 0
01:14 < rvagg> timeturner: run npm install again with --save
01:15 < rvagg> timeturner: or edit package.json yourself
01:15 < rvagg> add: dependencies: { "foo": "version" }
01:15 < rvagg> pretty simple
01:16 < rvagg> timeturner: read up here:
01:16 < rvagg> https://npmjs.org/doc/json.html
01:16 < timeturner> yep edited it directly
01:16 < timeturner> works
01:16 < timeturner> thanks
01:21 < TooTallNate> djMax: it would be easier to tell you what's wrong if you had a tcp dump of the GET request
01:21 < TooTallNate> but it seems like the request isn't getting the "end" event for some reason
01:21 < djMax> Sure, understood. And I've fixed with removing the content-type header.
01:22 < TooTallNate> well then that sounds like misuse of NSURLConnection to me
01:22 < djMax> Huh? Content-Type is legal header
01:22 < TooTallNate> of course it is
01:22 < djMax> I get that it's "weird" and superfluous, but doesn't seem like express should sit there hanging onto the connection waiting for nothing
01:22 < TooTallNate> i'm saying that you're not calling some "end of request" function of NSURLConnection
01:23 < djMax> No, nothing to do with that. There's no such thing in the underlying protocol.
01:23 < djMax> if the request is well formed and "complete," server should respond
01:23 < TooTallNate> djMax: are you hand-crafting this request manually?
01:23 < timeturner> are you sending a GET request to bodyParser?
01:23 < djMax> No
01:23 < djMax> I'm sending a GET request to the server. It has a Content-Type header in it (superfluous, agreed) that says the body is JSON, but there is no body.
01:24 < djMax> And that hangs express
01:24 < djMax> it shouldn't
01:26 < TooTallNate> djMax: can you show us the ObjC code?
01:26 < djMax> It would basically be meaningless because it's buried under lots of abstractions. But I can probably reproduce with javascript or curl or something.
01:28 < TooTallNate> djMax: well ya i'd be interested
01:28 < djMax> yep
01:28 < djMax> curl -H "Content-Type: application/json; charset=UTF-8" http://localhost:8080
01:29 < djMax> put an express app on that port with bodyParser and it will hang.
01:29 < djMax> Take it out, and it won't.
01:30 < TooTallNate> djMax: gives me a "Bad request" error immediately
01:30 < TooTallNate> djMax: what version of express/connect?
01:31 < djMax> what's the npmfu to get that?
01:32 < TooTallNate> npm ls
01:32 < djMax> I think 3.0.0rc2
01:33 < djMax> just updated to rc3, same diff
01:34 < Init--WithStyle-> Good mongodb driver for node.js is...?
01:34 < TooTallNate> djMax: it's something on your end than man, bodyParser() works as expected for me
01:35 < djMax> http://pastebin.com/arNJYRNm
01:35 < djMax> not that I don't believe you're right
01:36 < AAA_awright> Init--WithStyle-: A good MongoDB driver? Mongolian.
01:36 < Init--WithStyle-> cool
01:37 < djMax> is it something else in that app?
01:38 < djMax> ooh, express.static seems to have something to do with it
01:39 < djMax> yep, only when both are in it fails.
01:40 < djMax> gotta run, will try to file an issue
01:40 < rodd> is node suitable for mobile apps?
01:40 < djMax> rodd, yes
01:41 < rodd> I ask cause I'm getting acquainted to mobile dev with html5, css and so on. Was wondering if Node wouldnt be too much
01:41 < djMax> well, I'm not sure HTML5 is suited to mobile apps, but node is certainly suited to serving it
01:41 < rodd> I see
01:41 < rodd> Do you know any examples of mobile app built with node?
01:42 < rodd> that uses node, somehow
01:45 <@maxogden> @voxer, @gather
01:45 <@maxogden> node doesnt run on the phone though
01:45 <@maxogden> (in those cases)
01:46 < gkatsev> unless you have a webos phone in which case it's an old version. Or unless you feel like hacking it onto iOS or android
01:49 < rodd> right
01:49 < rodd> yeah
01:49 < rodd> in my case it would serve a mobile app
02:07 < zipp> Isaacs: Do you recommend util.inherits or your own inherits module? o.O;;
02:08 < gkatsev> i've heard that basically no one uses util.inherits
02:08 < gkatsev> there is no need for an inherits module, javascript has built-in inheritence
02:08 < zipp> Seems this.super.call is technically easier than InheritedClass.call
02:08 < zipp> Orly? 
02:09 < zipp> To the googles, I suppose.
02:09 < gkatsev> -g killdream oop
02:09 < purr> gkatsev: Understanding JavaScript OOP â€” Sorella's Basement <http://killdream.github.com/blog/2011/10/understanding-javascript-oop/>
02:09 <@Nexxy> lolwat
02:09 < gkatsev> zipp: read that.
02:09 < gkatsev> zipp: and you shall be enlightened
02:09 < AAA_awright> then just specify: Function.prototype.super = upperClass
02:09 < AAA_awright> or something
02:09 < zipp> gkatsev: thanks :)
02:09 < AAA_awright> Actually, you know what works 100%?
02:09 < zipp> What's that?
02:09 < gkatsev> getPrototypeOf?
02:09 < AAA_awright> function.prototype = new TheSuperClass;
02:10 < AAA_awright> Like, that's it
02:10 < AAA_awright> You get inheritance of all TheSuperClass's methods
02:10 < zipp> hmm o.o /trying-it
02:10 < AAA_awright> Also, Javascript is NOT OO
02:11 < AAA_awright> >_<
02:11 < AAA_awright> And that's a feature!
02:11 < rvagg> AAA_awright: it can be if you push hard enough
02:11 < AAA_awright> Meaning, OO shares some of the features of prototypes if you ask for it in your prototype language
02:12 < gkatsev> AAA_awright: except with that, you want to set the constructor back to your function.
02:12 < zipp> AAA_awright: And a good way, using the above method, of making sure the superclass gets args passed to the subclass?
02:12 < AAA_awright> gkatsev: Uh, what do you mean?
02:13 < gkatsev> AAA_awright: when you do Bar.prototype = new Foo(); Bar.prototype.constructor gets set to Foo, you want to change it back to Bar
02:13 < gkatsev> zipp: all this get's discussed in the article I linked you, if you want something a bit shorter, I have one like that as well
02:13 < AAA_awright> Bar is the constructor
02:14 < AAA_awright> you go new Bar();
02:14 < gkatsev> AAA_awright: the construcotr property on the prototype get's changed
02:14 < gkatsev> the constructor is still Bar, yes
02:14 < zipp> Ah, kk, I'll just have to knock out the reading, thanks :P
02:14 < gkatsev> but Bar.prototype.constructor will change to point to Foo
02:14 < gkatsev> most times it's not needed but better to do it anyway
02:15 < abahkaiyisah> hi all goodmorning
02:15 <@Nexxy> util.inherits(..., event.EventEmitter); seems to be pretty common
02:16 < gkatsev> ok, it's possible I was mis-remembering or that the guy didn't know what he was talking about it.
02:16 <@maxogden> modules are overrated, just write everything by hand
02:16 <@maxogden> artisant handcrafted bespoke javascript
02:16 <@Nexxy> vintage
02:17 <@Nexxy> artisanal
02:17 <@Nexxy> hyperlocal
02:17 <@Nexxy> fairtrade
02:17 < zipp> It's like that bread at that place. I feel like a hipster already.
02:17 <@Nexxy> javascript
02:17 < gkatsev> lol
02:17 < zipp> (You haven't heard of it)
02:17 <@Nexxy> please, I was over that place before it became popular
02:17 <@Nexxy> just like shell art
02:17 < zipp> haha
02:18 < Daegalus> i was over that place before it even existed
02:18 <@Nexxy> anywhere that would actually let me in in the first place...
02:18 <@Nexxy> is just too mainstream
02:18 < gkatsev> how did the hipster burn his tongue?
02:19 < gkatsev> he ate the bread before it was cool.
02:19 < gkatsev> http://www.instantrimshot.com
02:21 < Daegalus> Nexxy: does that mean, if I throw you through the places window, it would work?
02:21 < gkatsev> I guess using the window rather than the door is hipsterish
02:54 < holzp> geroninoob: unsure if you will see this but I did try my hand at writing that resizer: (I used GraphicsMagick): http://pastebin.com/Zm2yimjK
02:54 < holzp> I think that is a little nodier
02:56 <@Nexxy> could use a little less callback hell
02:56 < holzp> prob, but i was trying to show callbacks like crazy
02:56 <@Nexxy> you should name them 
02:56 <@Nexxy> instead of declaring them all inline
02:58 < substack> node: the stack that calls you back
02:58 <@Nexxy> you're also littering your global namespace by forgetting 'var's
02:59 <@Nexxy> which could lead to unexpected results
02:59 <@maxogden> holzp: protip callbackhell.com
03:00 <@Nexxy> substack, that sounds like it should be sung to the tune of the goldfish commercials
03:00 <@Nexxy> THE STACK... that calls back, Node-jay-ess~!
03:00 <@maxogden> haha
03:00 < holzp> is there a better way to pass the gm object to the widths.forEach function besides bind?
03:01 < holzp> or is that just totally unnecessary?
03:01 <@Nexxy> unnecessary
03:01 <@Nexxy> you're binding this context with foreach
03:01 <@Nexxy> (as widthIndex)
03:01 <@Nexxy> and then never using it
03:01 <@Nexxy> so the bind is kind of pointless
03:01 <@Nexxy> or vice versa
03:01 < holzp> i thought arg 2 in forEach was the iterator?
03:01 <@Nexxy> no it's the thisArg
03:01 < holzp> the iterator index
03:02 <@Nexxy> there is none
03:02 <@Nexxy> if you want an index just use a for loop ;P
03:02 < holzp> isnt that array.foreach?
03:03 <@Nexxy> lol
03:03 <@Nexxy> what do you think widths is?
03:03 <@Nexxy> var widths = [270, 590, 910, 1230];
03:03 <@Nexxy> an array.
03:03 < holzp> right
03:03 <@Nexxy> so, yes
03:03 <@Nexxy> ;P
03:03 < holzp> google is less than helpful in looking this up
03:03 <@Nexxy> just put "MDN" in the keywords
03:04 <@Nexxy> holzp, also just a suggestion for readability
03:04 < holzp> i pulled this out of a tutorial: array.forEach(function (item, index) 
03:05 <@Nexxy> console.log supports printf style arguments
03:05 < holzp> guess thats not index
03:05 < substack> alias gogogadget='npm install'
03:05 <@Nexxy> so instead of doing all that messy string concatenation you can just do
03:05 < holzp> ah didnt know that
03:05 < holzp> so that index is really just the calling context? its not really an index at all
03:05 <@Nexxy> console.log('Resizing from %s to %s for widths: %s', source, destination, ... );
03:06 <@Nexxy> holzp, correct
03:06 < holzp> well hell that would have saved me some time
03:06 <@Nexxy> lol
03:06 <@Nexxy> yeah
03:07 < holzp> I was trying to rewrite this to be more nodely: http://pastebin.com/svnCQ5ps
03:20 < deoxxa> anyone on app.net?
03:20 < rvagg> you! sucker
03:20 < deoxxa> :<
03:20 < deoxxa> apparently
03:20 < deoxxa> https://alpha.app.net/deoxxa << plz2b follow
03:20 < joshthecoder> deoxxa: is that the twitter replacement kickstarter?
03:21 < deoxxa> yeah
03:21 < rvagg> give me $50 and I'll get on there straight away deoxxa 
03:21 < deoxxa> ha
03:21  * joshthecoder hands rvagg $100 bills
03:21  * rvagg snatches at thin air
03:21 < csquared> so, any reason why upgrading npm to 1.1.25 and node to 0.8.7 limit my available version of express to the 1.x line ?
03:22 < csquared> i'm on os x, macbook air
03:22 < csquared> and apologeis ahead of time for n00b questions, but i'm really scratching my head here
03:25 < csquared> npm ERR! message No compatible version found: express@'3.0alpha'
03:25 < csquared> npm ERR! message Valid install targets:
03:25 < csquared> npm ERR! message ["0.14.0","0.14.1","1.0.0beta","1.0.0beta2","1.0.0rc","1.0.0rc2","1.0.0rc3","1.0.0rc4","1.0.0","1.0.1","1.0.2","1.0.3","1.0.4","1.0.5","1.0.6","1.0.7"]
03:26 < joshthecoder> csquared: is something depending on this install (npm install in another node project)?
03:27 < csquared> joshthecoder:  no, its a new project
03:27 < csquared> just have a packages.json
03:27 < csquared> http://pastebin.com/Z14wYWdf
03:28 < csquared> if i do "*" for the version npm is installing 1.0.7
03:28 < csquared> when i push this to heroku i get 3.0.0alpha
03:28 < csquared> so i wanted to lock the versions
03:28 < csquared> now, the thing that changed was i upgraded my node installation
03:28 < csquared> via homebrew
03:29 < csquared> but i thought that would have made *more* versions of express available (ie: the 3.x line)
03:30 < joshthecoder> csquared hmm strange
03:30 < csquared> ikr
03:31 < csquared> so i moved my package.json to a new dir and did an npm install there
03:31 < csquared> this time with teh 2.x.x constraints for express
03:31 < csquared> still getting the:
03:31 < csquared> npm ERR! Error: No compatible version found: express@'>=2.0.0- <3.0.0-'
03:31 < csquared> npm ERR! Valid install targets:
03:31 < csquared> npm ERR! ["0.14.0","0.14.1","1.0.0beta","1.0.0beta2","1.0.0rc","1.0.0rc2","1.0.0rc3","1.0.0rc4","1.0.0","1.0.1","1.0.2","1.0.3","1.0.4","1.0.5","1.0.6","1.0.7"]
03:31 < csquared> sigh
03:31 < csquared> its most likely an env issue
03:32 < csquared> clean bash shell doesn't change things
03:34 < csquared> here's the relevant sections of npm_debug.log
03:34 < csquared> http://pastebin.com/SqUhGypR
03:34 < jkevinburton> if express 3.0 stopped doing layouts and partials, and is dependant of the template library, has ejs have a solution for loading a partial on render?
03:35 -!- mode/#Node.js [+o ryah] by ChanServ
03:36 < csquared> ah ha
03:37 < csquared> "engines":{"node":">= 0.4.1 < 0.7.0"}
03:37 < csquared> thats for express 2.5.7
03:37 < csquared> 2.5.9
03:37 < csquared> (i'm just looking through https://registry.npmjs.org/express)
03:38 < csquared> HA!
03:38 < csquared> so i had to specify 3.0.0rc3
03:39 < csquared> not just 3.x.x
04:01 -!- mode/#Node.js [+o ryah] by ChanServ
04:28 < TehShrike|Work> felixge: you around to talk about node-mysql?
05:06 < H4ns> hi - is there a way for an npm package to depend on a non-npm resource at all?  my module needs a c library from github, but i can't figure out how to pull it in it other than using a preinstall script
05:13 < xaxxon> anything on how to integrate a node.js server with a more traditional environment like rails?  I want to have both a traditional heavyweight app with asynchronous updates to clients as well
05:13 <@Nexxy> use EventMachine
05:14 < xaxxon> yeah, I was also thinking about that
05:14 <@Nexxy> come talk to us when you're ready for the real thing
05:14 < framlin> ;)
05:14 < xaxxon> even if I use eventmachine, I still have to tie the two together.. the rails server isn't going to be able to handle the connections itself.. I don't think
05:15 <@Nexxy> then why use it at all?
05:15 <@Nexxy> (other than familiarity)
05:20 < thealphanerd> Nexxy: got a minute?
05:20 <@Nexxy> thealphanerd, sure :)
05:20 < thealphanerd> so I did some more research
05:20 < thealphanerd> and I'm thinkin i2c-tools
05:21 < thealphanerd> http://www.lm-sensors.org/wiki/I2CTools
05:21 < thealphanerd> now if I wanted to write bindings for this
05:21 < thealphanerd> I would need to write the functions / objects in a c application?
05:21 < thealphanerd> c++
05:22 < thealphanerd> (I'm sorry if I am totally missing something here)
05:22 <@Nexxy> I think you should start with perusing the i2c-tools source
05:22 <@Nexxy> I think you'd find that it's not as complicated as you think
05:22 <@Nexxy> and can probably be recreated at least partially with pure JS
05:23 < thealphanerd> Nexxy: http://www.esacademy.com/en/library/technical-articles-and-documents/miscellaneous/i2c-bus/general-introduction/clock-synchronization.html
05:23 < thealphanerd> I don't want to have to code the clock synchronization myself
05:23 < thealphanerd> that would be maddening
05:23 <@Nexxy> yeah I recently looked through the spec
05:23 < thealphanerd> so I need to use some sort of library
05:23 < thealphanerd> or I will go mad :D
05:24 <@Nexxy> lol
05:24 <@Nexxy> if you say so
05:24 < DTrejo> libraries shmibraries
05:24 < thealphanerd> DTrejo: oh reary...
05:25 < DTrejo> onry ronery programmers need to keep their code company with other peoprles code
05:26 < thealphanerd> DTrejo: I gracefully dissagree with you
05:26 < dr0id> I want to win with node, how?
05:27 < thealphanerd> I enjoy my bazaar
05:38 < thealphanerd> http://nodejs.org/api/child_process.html#child_process_child_process
05:38 < thealphanerd> maybe this is all I need to do
05:38 < thealphanerd> with i2c tools
05:46 < niloy> can someone suggest static site generator in nodejs, intended to be used with github?
05:46 < thealphanerd> rather than github pages?
05:46 < niloy> yeh github pages
05:47 < niloy> something similar to jekyll
05:47 < thealphanerd> I don;t know of anythingâ€¦ but would love to hear if you find anything :D
05:48 < niloy> okay
05:48 < niloy> I found DocPad on google
05:50 < thealphanerd> word
06:36 <@Nexxy> if you believe in yourself you will know how to ride a bike
06:37 < substack> is it possible to have a proper belief in your own non-existence?
06:38 < freewil> no
06:39 < substack> freewil: like you would know
06:39 < substack> no wait that's the other thing
06:39 < freewil> what
06:39 < substack> determinism
06:39 < freewil> hehe
06:40 <@Nexxy> substack, yes
06:40 < freewil> i think therefore i am
06:40 < AAA_awright> I think I am not, therefore I'm not
06:40 <@Nexxy> if there's anything humans have taught me
06:40 <@Nexxy> it's that they are capable of believing anything
06:40 <@Nexxy> no matter how ridiculous it is
06:40 < AAA_awright> ... That logically follows, right?
06:40 <@Nexxy> religion still exists.
06:41 < AAA_awright> What of it?
06:56 < jQuy> I'm looking for the best node.js package for gzipping. Any suggestions?
06:57 < MerlinDMC> jQuy, http://nodejs.org/api/zlib.html
06:59 < jQuy> MerlinDMC: Thanks for a link. That seems to be quite complicated solution...
07:02 <@maxogden> jQuy: what is complicated about it?
07:03 < jQuy> @maxogden: Do you know this https://npmjs.org/package/gzippo ? 
07:05 < jQuy> Yslow on Firefox says that "F Compress components with gzip". 
07:05 < jQuy> And that's why I'm looking for the best solution for doing that.
07:06 < jQuy> Another issue is "F Add Expires headers"
07:11 <@maxogden> jQuy: why cant you use the one that comes with node
07:11 < jQuy> @maxogden: I think you are right. I should use that
07:13 < timoxley> let's say you had a constructor which initialized a http server
07:13 < timoxley> and you want to know when that server is 'listening'
07:14 < timoxley> you could simply expose the http server as a property on the new object, and listen for 'listening' directly on it
07:14 < timoxley> butâ€¦ it'd be nice not to have to necessarily expose the http server
07:15 < sahat> Are there notable alternatives to Express framework?
07:15 < timoxley> so the obvious thing to do would be to simply forward the 'listening' event onto the new object (which is an event listener)
07:16 < timoxley> BUT in this case, we can't do that because the object uses custom named events for another purpose (not by my design)
07:17 < timoxley> so what would be the most ok way to have a handler for "listening"? callback to the constructor seems bad practice. adding a function called 'onListening' seems too jquery. 
07:18 <@maxogden> why is callback to the constructor bad?
07:19 < timoxley> maxogden doesn't seem very idomatic to start a code block like:
07:19 < timoxley> new MyServer(function() {
07:19 <@maxogden> its your own choice to use anonymous functions :)
07:20 < timoxley> maxogden good point.
07:20 <@maxogden> i think of callbacks as event emitters with 1:1 relationships
07:20 <@maxogden> event emitters are good for 1:many
07:20 <@maxogden> but same principle
07:21 <@maxogden> so yea having 'onListening' would be silly if you only are using it for one type of event and the event only gets listened to in one place
07:21 < timoxley> maxogden 1:1 relationships, as in if it only (should) ever call the thing once
07:21 < timoxley> per object
07:21 < timoxley> ?
07:25 < AAA_awright> timoxley: Callbacks are guarenteed to be called exactly once
07:25 < timoxley> sahat restify is pretty cool if you just need an API, there's also socketstream, strata, geddy, zappajs, flatiron's union+director, and other stuff like railwayjs, towerjs
07:25 < timoxley> etc
07:25 < timoxley> i.e. google
07:25 < AAA_awright> I wouldn't say callbacks are like eventemitters, they arne't
07:26 < timoxley> AAA_awright that's not really guaranteed
07:26 < AAA_awright> What do you mean?
07:26 < SomeoneWeird> <timoxley> AAA_awright that's not really guaranteed< +1
07:26 < sahat> timoxley thanks, I am pretty new to node.js and haven't heard of any of those besides railwayjs and flatiron
07:26 < AAA_awright> Yeah, it's guarenteed, not more, not less
07:26 < SomeoneWeird> no, it's not
07:26 < AAA_awright> Um, counter example pleasE?
07:26 < AAA_awright> That's by definition
07:27 < SomeoneWeird> function a(cb) { cb(); cb(); } a(function(b) { console.log("lol") });
07:27 < SomeoneWeird> will print lol twice.
07:27 < AAA_awright> That's not a callback, in Node.js terminology
07:27 < timoxley> AAA_awright for example, dnode takes a callback which is fired whenever there's a new connection start
07:27 < AAA_awright> That's an EventEmitter, timoxley
07:27 < SomeoneWeird> then wtf is a callback?
07:28 < AAA_awright> A function reference that will be called after the current tick, and called exactly once
07:28 < AAA_awright> That's a callback
07:28 < substack> somewhat
07:28 < substack> callbacks can be called more than once
07:28 < substack> callbacks can be called as many times as you want
07:28 < AAA_awright> Functions can be called more than once, but they're not callbacks
07:28 < substack> arguing definitions is silly
07:28 < SomeoneWeird> :)
07:29 < kuja> This is more of a semantic argument
07:29 < AAA_awright> I think you're mixing up callbacks <-> closures
07:29 < kuja> But I think that in Node it is considered best practice for callbacks to be invoked only once
07:29 < rvagg> and once more for good luck
07:30 < SomeoneWeird> lol
07:30 < AAA_awright> a(function(b) { console.log("lol") }); // is an example of a function closure
07:30 < SomeoneWeird> heh
07:30 < timoxley> yeah AAA_awright I think we're arguing semantics, since you can't know the difference between the two from outside
07:31 < timoxley> "event emitter" shoudl probably be reserved for using the event api  
07:31 < AAA_awright> But the semantics are the important part >_<
07:32 < AAA_awright> timoxley: That's exactly what I'm talking about. When you go http.createServer(handleRequest), you're passing a function to be added to an EventEmitter
07:34 < AAA_awright> http://magnode.org/nodejs-design-demantics
07:34 < Nuck> AAA_awright: "demantics"
07:34 < AAA_awright> I think I'll steal that title
07:35 < AAA_awright> Wait, what?
07:35 < AAA_awright> Oohhhhhhh
07:35 < AAA_awright> Nuck: It's intentional. Retroactive continuity.
07:35 < CIA-88> node: Ron Korving v0.8 * r2e1f2b5 / doc/api/cluster.markdown : doc: fix typo in cluster example code - http://git.io/_WW-5w
07:36 < Nuck> AAA_awright: Meaning he typo'd first
07:36 < Nuck> Also, when did CIA come back?
07:36 < AAA_awright> About two hours after I finished my CIA bot replacement
07:36 < AAA_awright> >:(
07:37 < Nuck> lmao
07:37 < Nuck> Didn't whiskers also do a replacement?
07:37 < [AD]Turbo> hola
07:37 < kuja> I'd personally trust CIA.vc's stability :p
07:38 < kuja> Just from the sheer number of projects that use their bots. Their stuff must already be insanely stable
07:38 < AAA_awright> [21 02:18:37] [lRCBot_Master] Austin Wright master (1 files): Fix the Turtle parser to stop outputting IRI instances - https://github.com/Acubed/node-rdf/commit/02219fa0ad28bf5a0bcf8a35e2bda31390d29225
07:38 < AAA_awright> [21 03:51:15] <CIA-118> node: Ben Noordhuis master * r2cdf427 / src/signal_wrap.cc : signal_wrap: fix unused variable compiler warning - http://git.io/shNTCg
07:40 < AAA_awright> Nuck: Tried, idk how successful. LRC bot was mine, just to mess with him. Heheh.
07:40 < Nuck> kuja: Tumblr has lots of users, didn't stop them from going down all the fucking time.  Same goes for AWS
07:41 < AAA_awright> kuja: I'm not crazy about the global namespace that it uses, i'm suprised it's scaled at all
07:42 < AAA_awright> I never got a follow-up about that sticker...
07:42 < hoodoos> hello guys! is there any good lib to work with process.argv?
07:43 < AAA_awright> Personally I just use var arguments = process.argv.slice(2); and for() loop through that
07:43 < AAA_awright> I haven't found anything more concice than that
07:43 < timoxley> hoodoos commander or optimist
07:44 < kuja> Nuck: I've used cia.vc successfully for about 5 years now, there's been downtime yeah but I'd say it's been up 98% of the time
07:44 < kuja> for a moderately sized project
07:45 < kuja> Hm, probably more like 4 years, whoops
07:45 < hoodoos> AAA_awright: well, it's annoying to do it allover again for every small utility i write
07:46 < AAA_awright> Even if there were something short and sweet, I don't think it's worth the extra depencency
07:46 < AAA_awright> Modularization is good, abstraction isn't I think
07:47 < AAA_awright> i.e. use modules for the sake of modularization, but reducing two lines of code down to one makes the inner workings of your code opaque
07:48 < CIA-88> libuv: Ben Noordhuis master * r29eb460 / src/unix/linux/linux-core.c : linux: fix fscanf() -Wunused-result warning - http://git.io/e4NMzw
07:48 < bnoordhuis> hoodoos: optimize?
07:49 < hoodoos> timoxley: bnoordhuis optimist is what i need exactly :)
07:49 < bnoordhuis> err, optimist indeed
08:21 < gorillatron> Im using imagemagick to resize images. Is it a good approach to spawn a childprocess for the conversion, then T-pipe the output both to the browser and to a serverside resize cache. Then next time if it is cached then stream the cached picture instead?
08:24 < CIA-88> node: isaacs v0.8.8-release * r85161a8 / (101 files in 6 dirs): npm: upgrade to 1.1.58 - http://git.io/iObRZA
08:24 < CIA-88> node: isaacs v0.8.8-release * rb8fcde4 / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/8-2Shg
08:34 < xico> How can I get the lastest commited code from github, using npm, in windows?
08:36 < jetienne> npmjs.org database is corrupted on my name, where can i report ?
08:40 < CIA-88> node: Ben Noordhuis master * r1867511 / common.gypi : build: compile with -Wextra -Wno-unused-parameter - http://git.io/BIVIAw
08:47 < xico> How can I get the lastest commited code from github, using npm, in windows?
09:02 < chilts> xico: npm install --help
09:02 < chilts> that shows you a few options you could use
09:02 < chilts> npm can install from a URL of a tarball etc
09:02 < xico> chilts: even in windows?
09:02 < chilts> oh, erm, dunno - sorry
09:02 < chilts> worth a try though :)
09:02 < xico> I think I already tried giving npm the url, but it failed :\
09:02 < chilts> what was the failure?
09:02 < xico> thanks anyway ;) I'm gonna try again
09:03 < chilts> cool
09:03 < xico> I can't remember now
09:03 < chilts> :)
09:03 < xico> I might find something new
09:14 < framlin> does anybody know about more nodejs or javascript-stuff on campus party berlin besides "The Zen of Node.js" ? 
09:17 < kiwi> hi there :)
09:18 < kiwi> speaking of modularization, I would like to make something "intelligent".
09:18 < AAA_awright> xico: Just use git...
09:18 < AAA_awright> npm's just a package manager, you know?
09:18 < AAA_awright> (meh, I'm just this guy, you know?)
09:18 < kiwi> eg I have several functions to make and I would like just index the module to find if they are here or not ?
09:19 < kiwi> (I am a bit newbie do node, I used before Pike ....)
09:20 < AAA_awright> kiwi: I'm not sure what "intelligent" is supposed to mean with respect to a module, what are you trying to get done, fundementally?
09:20 < kiwi> in previous experiences I dit
09:20 < kiwi> did
09:20 < kiwi> function stuff_toto1()
09:21 < kiwi> function stuff_toto2()
09:21 < kiwi> etc...
09:21 < kiwi> and instead of doing a single switch()
09:21 < kiwi> I just did index(this_object());
09:22 < AAA_awright> And what's that do?
09:22 < kiwi> search if there a function named stuff_(variable)
09:22 < kiwi> and throw an execption / error if the function is not here
09:22 < kiwi> this is idea in "one file" code
09:22 < AAA_awright> You probably just want to assign the functions to an Object:
09:23 < AAA_awright> var stuff = { todo1: function(){}, todo2: function(){} }
09:23 < Mallo> Morning everyone ! I have a web page that needs basic authentication (used a .htaccess file for it). What is the "proper" way to authenticate with node ? I tried sending authentication headers but it doesn't seem to work...
09:23 < AAA_awright> or with the existing function definitions:
09:23 < kiwi> now I think it not a good idea, I want to do : one .js file per function and find them on demand
09:23 < AAA_awright> var stuff = { toto1: stuff_toto1, toto2: stuff_toto2 }
09:24 < kiwi> AAA_awright: seems to be a way to do that
09:24 < kiwi> AAA_awright: is there any good way to have 
09:25 < kiwi> var stuff = { toto1: ..., toto2: ...} being automagicaly done by scanning a directory ?
09:25 < AAA_awright> Mallo: What are you expecting to happen when you send Authenticate? Your code has to handle that
09:25 < AAA_awright> Mallo: Generally, for an API, best practice is OAuth or Basic authentication, over HTTPS
09:25 < The_Fly> hello, using node for a project, need help concerning frontend development. quite enjoying using browserify, but want to avoid a large monolithic jslib like jquery... quite like how ender solves the problem, but not sure how to bridge the gap between browserify and ender
09:25 < AAA_awright> (Reject all traffic over unencrypted channels!)
09:25 < The_Fly> they seem not to be interoperable, i think
09:26 < The_Fly> i can still use domready, bonzo, qwery etc, but ender provides a nice way of agregating them all
09:26 < Mallo> AAA_awright: I'm using Basic authentication, but I always get the "please login" page as a response
09:27 < Mallo> so I'm looking for the roght way to authenticate myself
09:27 < The_Fly> anyone able to help?
09:27 < lulzilla> Node 0.8.6 has broken my https app. anyone else experiencing it?
09:28 < AAA_awright> lulzilla: What's the symptom/error?
09:28 < AAA_awright> Mallo: Uh, what "please login" page?
09:29 < Mallo> AAA_awright: this one : http://pastebin.com/N6ZAFknQ
09:30 < AAA_awright> Mallo: Your application is serving that?
09:30 < AAA_awright> Node.js doesn't print out any HTML like that...
09:30 < Mallo> I'm using node to send a query to a http server
09:31 < Mallo> so I need to authenticate to this http server to get the answer I need
09:31 < AAA_awright> Mallo: Oh, and you're sending an Authenticate: Basic header?
09:31 < Mallo> yep
09:31 < AAA_awright> Mallo: Actually, what's the server asking for
09:32 < AAA_awright> It might be asking for something other than WWW-Authenticate: Basic realm="blah"
09:32 < AAA_awright> Like, say, OAuth
09:33 < Mallo> nope, the authentication type is set to Basic with an .htaccess file
09:34 < The_Fly> looking for an alternative to ender to compose microlibraries together, for use with browserify, anyone with any thoughts on the subject?
09:34 < AAA_awright> Mallo: How would you know how the remote server is operating? YOu should be looking at the headers it's sending you...
09:35 < AAA_awright> The_Fly: Not me, what's the difference between the two?
09:35 < The_Fly> browserify allows you to bundle node code for running in the browser, i quite like it because i can write mocha unit tests and keep things moduler
09:35 < The_Fly> *modular
09:35 < Mallo> AAA_awright: I actually own the http server, so I kind of know what it is supposed to need ^^
09:36 < The_Fly> ender will let you compose micro libraries (they must be ender-aware) and attaches them to the $ var
09:36 < The_Fly> i can probably roll my own solution, with a bit of investigation
09:37 < AAA_awright> Mallo: idk what to say except be sure you're implementing the header correctly, including the base64 encoding and the realm
09:37  * AAA_awright gnight
09:38 < Mallo> I think I miss the realm, I'll give it a try, thanks
09:42 < The_Fly> or maybe i should drop microframeworks and just stick with jquery
09:42 < The_Fly> it is well tested and currently the best cross-browser dom lib
09:42 < The_Fly> *arguably
10:09 < gorillatron> isnt connect respecting re.statusCode ?
10:09 < gorillatron> res.
10:09 < gorillatron> im setting it to 304 and calling res.end imediatly but it gets 200
10:10 < gorillatron> ghad forget i said that :P
10:34 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:41 < mmalecki> anyone knows how to use blowfish in node?
11:00 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
11:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:27 < bright_day> hello i have app runnig on host/subdir/. and in jade files i have includes like /css/style.css and it trys to get style.css from /host/css/style.css is there any why to tell node or jade to use base url /host/subdir?
12:30 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:31 < bright_day> can anyone help?
12:34 < thatguydan> bright_day: http://www.senchalabs.org/connect/static.html
12:39 < Aight> d
12:40 < bright_day> thatguydan: thanks : )  but i have another problem with links they go to /host/link/ instead of /host/subdir/link/
12:45 < bright_day> i need to find a way to change base url for links. any ideas?
12:46 < thatguydan> from memory there was a way to change the mount point
12:46 < CIA-88> node: Bert Belder openshift * rcd23e6d / (10 files in 6 dirs): Make node work on Openshift - http://git.io/GM3IZQ
12:47 < CIA-88> node: Bert Belder openshift * r00cbcfc / (lib/dgram.js lib/net.js): openshift: listen on internal IP when no IP is specified - http://git.io/QqfiQw
12:47 < CIA-88> node: Bert Belder openshift * r5be1814 / (470 files in 62 dirs): Merge commit 'v0.6.21' into openshift - http://git.io/AQfZ4g
12:47 < CIA-88> node: Bert Belder openshift * rd7429dd / lib/readline.js : readline: make --interactive work when stdin is a pipe and stdout is a TTY - http://git.io/65dUOA
12:47 < CIA-88> node: Nathan Rajlich openshift * r2040ca9 / (src/node.cc src/node.js test/simple/test-force-repl.js): cmd: add a -i / --interactive flag to force the REPL - http://git.io/X1QXZQ
13:01 < jQuy> What is the best database driver for MongoDB? I'm using AngularJS and Express with node.
13:02 < CIA-88> libuv: Fedor Indutny master * r8969df6 / src/unix/thread.c : darwin: handle KERN_ABORTED in uv_sem_wait() - http://git.io/q9lLRg
13:04 < CIA-88> libuv: Ben Noordhuis master * r120e2c1 / src/unix/thread.c : darwin: fix return value of uv_sem_init() - http://git.io/VwoAFw
13:11 < jmar777> jQuy: depends what level of abstraction you want. node-mongodb-native is the officially supported one
13:12 < jQuy> jmar777: ok, I'll check that out
13:13 < jmar777> jQuy: but it leaves a fair bit of the work with queuing during disconnects and such up to you. if you want connect/reconnect/queuing/etc type of stuff handled for you, but still a minimal api, i would go with monk or mongoskin
13:14 < jmar777> jQuy: (i'd go with monk out of those two, but just preferential there).  if you want some ORM-type functionality, Mongoose is pretty good (what i'm currently using on most of my projects)
13:14 < jQuy> jmar777: I have to get familiar with those solutions
13:15 < jmar777> jQuy: if you're just getting your feet wet, I would steer you towards Mongoose. well supported, and I haven't had any major issues with it
13:16 < jQuy> jmar777: I am a newbie
13:16 < jQuy> I have tried mongoose and I got it working
13:17 < jQuy> I just want to be sure that I'm in the right path
13:26 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
13:27 < jmar777> jQuy: mongoose is pretty newbie friendly. it honestly does a little too much for my taste, but i'd rather live with the extra features than reinvent the wheel on most of it. it gives you access to the raw driver if you ever need it too
13:28 < jQuy> jmar777: :) ok, I may use that
13:29 < jt2190> Good morning all
13:30 < jQuy> jt2190: it's afternoon here
13:30 < jt2190> jQuy: Based on the evidence I have at hand, you must be incorrect. ;)
13:31 < jQuy> jt2190: what evidence?
13:31 < jt2190> jQuy: j/k
13:31 < jt2190> jQuy: My clock
13:31 < jQuy> jt2190: my clock says that it's afternoon
13:32 < jt2190> jQuy: We'll have to agree to disagree :)
13:32 < jQuy> jt2190: 16:31
13:32 < jt2190> jQuy: 16? Is that even a real time?
13:33 < jQuy> jt2190: here where I live it is. We have 24-hour clock in use.
13:33 < jQuy> jt2190: 4:33 pm
13:33 < jt2190> jQuy: Just to be clear, I was joking around with you.
13:34 < jQuy> jt2190: I was serious
13:34 < jt2190> jQuy: I can tell
13:34 < jQuy> jt2190: :D
13:35 < jt2190> Connect Middlewear practice question...
13:36 < jt2190> Since I can chain middlewear, should I assign properties to the request or response for further processing by subsequent middlewear?
13:38 < jt2190> for example, let's say that I have a function that takes HTTP POST data, and validates it
13:38 < jt2190> would it then be reasonable to assign a validatedData property to the request?
13:39 < jt2190> or is assigning properties to the request a bad idea?
13:44 < jmar777> jt2190: i do it like it's no one's business
13:45 < jt2190> jmar777: I guess I'm worried about two things
13:45 < jmar777> jt2190: a design consideration i use though is only access expando'd properties though a getter/setter method
13:45 < jmar777> jt2190: it breaks encapsulation, which is kind of bad, but sometimes it's still the cleanest solution. by using getter/setter methods, you get a runtime error if you've removed/renamed/etc. the property
13:46 < jmar777> jt2190: rather than a logical error resulting from a falsey check or something that will always fail, but doesn't actually throw an error
13:46 < jt2190> jmar777: Ah yes, that was one concern
13:47 < jmar777> jt2190: cool. i also try to only ever expand the request object in a "request-context" module - i have it in every one of my express apps. that way i always know where that's happening
13:47 < jt2190> jmar777: interesting
13:47 < jmar777> jt2190: i usually export several different middleware components from that module (e.g., loadTenant(), loadUser(), loadGiraffes(), etc.)
13:48 < jmar777> jt2190: i then couple that with a "gateways" module, so a route can basically do something like app.get('/secured
13:49 < jt2190> jmar777: I assume that those method signatures match middlewear, i.e. loadTennant(req, res, next)
13:49 < jmar777> jt2190: oops.  `app.get('/secured', requestContext.loadUser(), gateways.requireRoles(['admin']), function(req, res, next) { ... })`
13:50 < jmar777> jt2190: express also lets you "chain" an array of middleware, so you can do, e.g.,...
13:51 < jmar777> jt2190: var userStuff = [/* load user middleware */, /* authorization middleware */ ];
13:51 < jt2190> jmar777: I'd probably write: 'app.get('/secured', [requestContext.loadUser, gateways.requireRoles], function(req, res, next) {... });'
13:51 < jmar777> jt2190: and then: `app.get('/secured', userStuff, /* handler */ `
13:52 < jt2190> jmar777: That seems like a sensible approach, I agree
13:52 < jmar777> jt2190: ya :) i just typically assign all that to a reusable variable since more often than not i have several routes that require the same combination of middleware
13:53 < jmar777> jt2190: what was your other concern?
13:54 < jt2190> jmar777: Mainly fear, uncertainty, doubt about the request
13:54 < jt2190> jmar777: making it too big by adding extra properties
13:55 < jt2190> jmar777: accidentially blocking it
13:55 < jmar777> jt2190: it's never getting serialized or IPC'd or anything like that, so i wouldn't worry about it. within reason, anyway
13:56 < jmar777> jt2190: the main thing i struggle with regarding this pattern is breaking the encapsulation, so i just try to be diligent about only accessing that stuff through a single point of entry
13:57 < jmar777> jt2190: i guess if you think of middleware in the traditional sense, though, proxies and gateways and such are allowed to mess with requests. we're just kind of doing that at a micro level
13:57 < jt2190> jmar777: The encapsulation of what exactly?
13:57 < ansolas> What is the scope of modules when using require to create them ?
13:57 < jt2190> jmar777: Yes, at the macro level you're thinking about the domain
13:57 < jQuy> socket.io - require is not defined (front end) ... what is wrong... wrong file maybe?
13:57 < jmar777> jQuy: sounds like it
13:58 < ansolas> lets say i do a requite of my model in the app.js and now i do a require in another sub model which was required in the app.jhs 
13:58 < jt2190> jmar777: it's an interesting problem
13:58 < jQuy> jmar777: I have to find the right file...
13:58 < jmar777> jt2190: i don't like the idea of one middleware component setting a value on a request, and a downstream middleware depending on that. sets up dependencies that don't feel 100% right
13:58 < mscdex> is there a simple module out there that has a method for generating the oauth parameter string for oauth 1.0 2-legged and 3-legged ?
13:58 < jmar777> jt2190: i just haven't found a better approach
13:58 < jt2190> jmar777: As the application gets larger those abstractions tend to be very helpful
13:59 < jt2190> jmar777: That was exactly my thought... However it's easy enough to "mock" a request if you think of it as just scope
14:00 < jt2190> jmar777: if some middlewear function is expecting a req.user property, for example
14:00 < jmar777> jt2190: true. kind of like a "memoization cache". include the `loadUser` middleware as many times as you want, rather than assuming someone already did that for you
14:00 < jt2190> jmar777: and you want to call it outside of the context of an http request
14:00 < jmar777> jt2190: and then let `loadUser` handle the efficiency concerns through caching against a request-level scope. sort of makes sense
14:00 < jt2190> jmar777: just 'wrap' it in another scope
14:01 < jt2190> jmar777: I'd also thought of defining my own middlewear method signature, that was domain-specific
14:03 < jt2190> jmar777: But as I think it through, you're really in an asynchronous request/response paradigm
14:04 < jt2190> jmar777: So really, as long as data in wrapped in a request, or a response, it doesn't really add domain specifics to the request
14:04 < jt2190> jmar777: domain specific behavior I mean
14:05 < jt2190> jmar777: domain specific data would be there of course
14:05 < jt2190> jmar777: the domain specific behavior is in the middlewear functions
14:05 < robinduckett> wassup wassup
14:06 < jt2190> jmar777: This conversation is helping me solidify an approach... Thanks for your input
14:09 < jmar777> jt2190: likewise. i've been sketching together a blog post on the topic to try and reason it out. need to finish the blog itself though first :)
14:10 < robinduckett> Anyone familiar with buster.js?
14:10 < Kazeshini> Hi this it probably a very stupid question but when i try run the example server on node.js site i get "..." what does this mean
14:11 < jmar777> Kazeshini: where are you seeing the '...'?
14:11 < jmar777> Kazeshini: are you running it in the REPL?
14:11 < Kazeshini> in the node.js console
14:11 < Kazeshini> REPL?
14:11 < jmar777> Kazeshini: read-evaluate-print-loop
14:11 < robinduckett> Kazeshini: you're running node
14:11 < robinduckett> the command
14:11 < robinduckett> then pasting it in
14:11 < robinduckett> you need to paste it into a file
14:11 < jmar777> Kazeshini: you should put the sample server in a script (e.g., test.js), and then run `node test.js`
14:11 < robinduckett> then run the file
14:11 < robinduckett> ^
14:12 < jmar777> ^^
14:12 < Kazeshini> i run node example.js and get "..."
14:12 < Kazeshini> the example.js is in the same directory asthe node.exe
14:12 < jQuy> I don't get this. 
14:13 < jmar777> Kazeshini: is that also your current working directory?
14:13 < jQuy> I have a problem with socket.io
14:13 < robinduckett> jQuy: there's your problem
14:13 < robinduckett> ;)
14:13 < robinduckett> Srsly though, what's up?
14:14 < jQuy> robinduckett: I try to follow the documentation here https://github.com/LearnBoost/socket.io 
14:14 < jQuy> It tells me to put this tag: <script src="/socket.io/socket.io.js"></script> into my client side index.html
14:14 < robinduckett> Yes
14:14 < jQuy> But i don't have that file
14:15 < robinduckett> No you don't
14:15 < Kazeshini> yes the node.exe and the example.js are in my working directory
14:15 < robinduckett> it's served by the socket.io http middleware
14:15 < robinduckett> so it's in socket.io's own directory
14:15 < jQuy> I see it there
14:15 < robinduckett> if you look in node_modules/socket.io/ it's probably in there somewhere
14:15 < robinduckett> the file structure of resources on the server endpoint doesn't reflect the physical file structure
14:15 < jQuy> Yes, it is but my browser don't find that
14:16 < robinduckett> then you haven't attached it properly
14:16 < robinduckett> http://socket.io/#how-to-use
14:16 < jQuy>   script(src='/socket.io/socket.io.js') <-- that's how I have attached it
14:16 < jQuy> I use Jade btw.
14:16 < robinduckett> No
14:17 < robinduckett> you haven't attached it on the server properly
14:17 < robinduckett> if /socket.io/socket.io.js is returning a 404
14:17 < robinduckett> then you haven't done this part
14:17 < robinduckett> var app = require('express').createServer() , io = require('socket.io').listen(app);
14:17 < jQuy> My browser tries to find that file from location "http://localhost:3000/socket.io/socket.io.js"
14:17 < robinduckett> Read this page: http://socket.io/#how-to-use
14:18 < jQuy> I have done that 
14:18 < jQuy> server side is ok
14:18 < robinduckett> Sure about that?
14:18 < jQuy> Express 3 in use
14:18 < robinduckett> ah
14:18 < jQuy> "info - socket.io started" 
14:18 < robinduckett> with THREE seconds of googling
14:19 < robinduckett> I have found the answer to your problem
14:19 < jQuy> oh
14:19 < robinduckett> so please go to the google
14:19 < robinduckett> and try and find the answer there
14:19 < robinduckett> I'll even give you the search query
14:19 < robinduckett> http://lmgtfy.com/?q=socket.io+express+3
14:20 < robinduckett> I'm nice like that
14:20 < jQuy> you are very helpful
14:21 < robinduckett> Years of asking and never getting any help
14:21 < robinduckett> Have made me cold, bitter and patronising
14:21 < Kazeshini> what would be the reason the node.exe doesnt fing the js file?
14:22 < robinduckett> Kazeshini: are you running it: node.exe example.js
14:22 < jQuy> socket.io doesn't work with express 3 :(
14:22 < baudehlo> funny it works here just fine.
14:22 < robinduckett> and is example.js in the same folder as node.exe or is node.exe in your PATH?
14:22 < robinduckett> jQuy: lol
14:22 < Kazeshini> no  run it node example.js
14:22 < Kazeshini> then i get "..."
14:23 < Kazeshini> right after
14:23 < Kazeshini> they in the same folder
14:23 < robinduckett> Kazeshini: why don't you see what happens
14:23 < robinduckett> when you run it like I put
14:23 < robinduckett> jQuy: 
14:23 < robinduckett> first result on the google
14:23 < robinduckett> scroll to the bottom
14:23 < robinduckett> workaround found
14:23 < robinduckett> do not make me come over there and fucking move your mouse for you
14:24 < Kazeshini> i get the same result
14:24 < robinduckett> Kazeshini: I'm not seeing that result, does the example.js file contain any code?
14:25 < Kazeshini> has the example code from "http://nodejs.org/api/synopsis.html"
14:25 < jQuy> robinduckett: I don't know about your google but first result might be different here
14:26 < robinduckett> jQuy: https://github.com/LearnBoost/socket.io/issues/843
14:26 < robinduckett> jQuy: 
14:26 < robinduckett> express = require 'express'
14:26 < robinduckett> app = express()
14:26 < robinduckett> server = app.listen 3000
14:26 < robinduckett> io = require('socket.io').listen server
14:26 < robinduckett> that's coffeescript
14:26 < jQuy> that wasn't the first result
14:26 < robinduckett> but you can easily convert it into javascript as so
14:27 < jQuy> I have done that already
14:28 < robinduckett> jQuy: first result on google when I'm logged in, logged out and first result when I switched computers
14:28 < robinduckett> and incognito mode
14:29 < robinduckett> you've done that already and it doesn't work? So reopen that ticket and tell it to tim oxley
14:29 < robinduckett> or you can read with your eyes, the two working examples at the bottom of the page
14:29 < milani> has anyone issue with npmjs.org? invalid ssl
14:29 < robinduckett> because I can already tell that clicking the mouse is a bit too strenuous for you, here are the links
14:30 < robinduckett> http://binarymechanism.blogspot.in/2012/08/express-30-socketio-working-example.html
14:30 < robinduckett> https://github.com/sreekumar-kr/Expree3.0---Socket.IO
14:30 < robinduckett> milani: yeah I've had that error for a while now
14:30 < milani> it was ok last time I checked, I think yesterday.
14:30 < robinduckett> Hasn't been right for a long time for me
14:30 < jmar777> jQuy: can you do a pastie of your app.js file (at least the express/socket.io relevant parts)?
14:31 < robinduckett> jmar777: I fear that may be outside of his abilities
14:31 < jQuy> robinduckett: that latter example is for Express 2
14:31 < robinduckett> jQuy: really? looks like it says "3.0" to me
14:32 < jQuy> timeout
14:32 < robinduckett> I may of course be wrong, where was the mathematics journal where they reevaluated the number 3 to the number 2?
14:32 < jmar777> robinduckett: i can appreciate your humor, but let's be a little more welcoming for newbies. stuff that's obvious for us old hats is pretty opaque when you don't have it under your belt yet
14:32 < robinduckett> milani: Chrome says the cert was issued by RapidSSL and isn't trusted by Google
14:33 < robinduckett> jmar777: Googling and reading an article should not be something that is not under any developer's belt
14:33 < jmar777> robinduckett: and he's stated multiple times that he's attempted that
14:35 < robinduckett> No, he hasn't. He's told me that the page I mentioned didn't come up on google which is complete fallacy, followed by the further fallacy that a link I posted for him because he was too bone idle to read the previous link I sent him referenced a previous version of express when it clearly didn't
14:35 < robinduckett> If he isn't willing to do the work, I'm not willing to take him seriously
14:36 < robinduckett> brb
14:36 < buttdong> robinduckett: Quit being a helpless dick.
14:36 < robinduckett> buttdong: coming from the guy called buttdong, maturity levels in here have certainly increased since my last visit
14:36 < robinduckett> are we channeling Marak Squires today?
14:37  * jmar777 sighs
14:38 < jQuy> robinduckett: I think that express.createServer(); is Express 2 code
14:38 < codepython777> When I do "node make web",  I get -- Please remove carriage return's from ... lots of files. How do i fix this?
14:39 < jmar777> we're well past the eye sore state on this. jQuy: let's move your question to the #express channel
14:39 < ansolas> is there a jade-lang irc channel ?
14:39 < jQuy> jmar777: ok
14:39 < jmar777> ansolas: i don't think so, but here or #express should be good for that
14:39 < ansolas> ok thanks
14:39 < Kazeshini> robinduckett: i've tried allowing the node.exe to run with admin right and still get the same result
14:42 < milani> robinduckett, it's intermediate certificates that are lost.
14:42 < milani> robinduckett, the main ssl file is right there but the chain is broken I guess.
14:42 < merpnderp> Is express accepting pulls for /examples being updated to 3?
14:43 < Kazeshini> Does anyone know why the node.exe would display "..." when i run the node example.js 
14:44 < Kazeshini> i pretty much just copied http://nodejs.org/api/synopsis.html
14:44 < Kazeshini> to start following the documentation to get a hang of node.js
14:47 < flexd> Uh, I've forgotten again. Updating my module with npm is just a matter of making changes, increasing the version in package.json and do a npm publish ?
14:47 < SomeoneWeird> mhm
14:48 < jt2190> robinduckett: jQuy is running google from Europe or Africa, I'm guessing it weighs results differently by language
14:50 < milani> Kazeshini, isn't it running REPL ?
14:51 < milani> flexd, yeah just increase the version on package.json
14:51 < milani> flexd, actually it doesn't matter to increase or not, just change it;)
14:51 < Kazeshini> cool i figured it out .. seems like a stupid mistake on my side
14:51 < Kazeshini> i use cmd now instead on the node.exe and worked
14:51 < Kazeshini>  :)
14:52 < flexd> milani: Starting at 1.0.0 and going down would be a nifty way of breaking everything I suppose :p
14:52 < SomeoneWeird> would be funny
14:52 < flexd> aight, 0.0.3 is out :D
14:52 < milani> flexd, :D but it's possible!
14:52 < flexd> I had no error handling on authentication.. figured I would add something since it broke when someone removed my user here :(
14:53 < milani> and it doesn't break npm at least.
14:53 < jQuy> jt2190: europe
14:53 < jQuy> jt2190: No errors anymore.
14:59 < robinduckett> jtAlso in europe here.
15:05 < Dragonblade> I got an interesting question. My next project is to create a GUI for the music server so listeners have an easier time adjusting the volume, etc. Does anyone have any sources on the coding or examples?
15:05 < Dragonblade> I mainly see them in a different coding tht doesn't work with node.js
15:07 < milani> Drager, http://appjs.org
15:07 < milani> it only creates gui for setting volumes etc. you should add c++ bindings.
15:10 < Dragonblade> Ah thanks alot. This will help alot
15:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:22 < Drager> milani: ?
15:23 < milani> ?
15:24 < draginx> Whats a good setup for deploying/production on nodejs/express app?
15:24 < draginx> And for dev.. so for dev may be like a watch system that reloads everytime something is updated?
15:24 < RLa> forever maybe
15:25 < RLa> for production
15:25 < RLa> and supervisor for dev
15:25 < draginx> thanks :)
15:27 < draginx> And does someone have a nice little nginx snippet for nodejs / serving static content instead of express?
15:32 < Taar779_w> Does anyone know how to check if an item is in an Array with the Jade templating langauge? When I use 'item in array' I get the following error: "Cannot use 'in' operator to search for '1' in 5,6,8,9,2"
15:33 < draginx> can jade use underscore? O-o
15:33 < jcrew> Taar779_w: probably not proper solution but ("::"+array.join("::")+"::").indexOf("::1::")
15:34 < jcrew> Taar779_w: array.indexOf may also just work
15:35 < context> you /could/ do for i in arr ; if i == 1
15:37 < jcrew> array.indexOf will work if you're just doing with node, it doesn't work in ie anything less than 9
15:38 < context> jcrew: he said in jade.
15:38 < Taar779_w> jcrew: awesome thanks
15:39 < context> oh yeah that does work with if :x
15:40 < dr0id> you can execute any JS code in jade, just prefix with -
15:40 < dr0id> might want to check the interactive tuts at https://github.com/visionmedia/jade#tutorials
15:41 < Taar779_w> Yes you can however for some odd reason jade doesn't like you using 'item in array'
15:42 < dr0id> the question is, is that a valid way to search for an item in an array in JS ? or is that even a jade construct ?
15:42 < TehShrike|Work> Hey cainus, you around?
15:43 < dr0id> I don't think it is, the only cool way to find an item in array is indexOf
15:43 < dr0id> wazzup TehShrike
15:43 < dr0id> @work
15:43 < TehShrike|Work> Hullo there dr0id!
15:44 < TehShrike|Work> I started using cainus' "detour" routing library last night and had a question
15:44 < dr0id> oh ok
15:44 < TehShrike|Work> Mostly about whether or not something was a bug, or if I was just doing something I wasn't supposed to be doing :-P
15:44 < TehShrike|Work> It seems pretty reasonable for the most part though https://github.com/cainus/detour
15:45 < Taar779_w> dr0id: it works in the interpreter so I assume it's ok to use.
15:51 < vp_> Hello
16:01 < spionL> Are there any two-way RPC libraries for node? by two-way I mean that the client can send requests and get responses but also subscribe to requests sent from the server
16:06 < caaakeeey> im looking to test an express app - should i do full end to end testing by firing up the server, or just 'unit test' the handler functions
16:09 < TehShrike|Work> spionL: perhaps you're looking for https://github.com/substack/dnode ?
16:10 < spionL> not really. I cant subscribe to server events with dnode, only call server commands.
16:11 < wlaurance> caaakeeey, full end to end is always better unless its a pretty simple app
16:14 < caaakeeey> wlaurance, whats the best way of tearing down the server at the end?
16:18 < wlaurance> caaakeeey, you can send a kill signal to your server when the tests are finished
16:22 < wlaurance> caaakeeey, but generally when you spawn a child process, your server, when the parent process is done it will try to kill its children
16:22 < wlaurance> caaakeeey, I develop with express-coffee and it fires up a server instance and closes it when mocha is finished
16:23 < wlaurance> caaakeeey, https://github.com/twilson63/express-coffee
16:30 < ben_alman> I'm having a really weird problem capturing a child process stdio in Windows, can anyone help me debug this? https://gist.github.com/3427148
16:32 < mmalecki> ben_alman: only 'exit' event gets the exit code I think
16:33 < ben_alman> i get the exit code
16:33 < ben_alman> i'm not getting stderr and stdout
16:33 < ben_alman> and i've tried with both "close" and "Exit"
16:33 < ben_alman> er "exit"
16:33 < mmalecki> oh, wait, it works for you, weird
16:33 < ben_alman> everything works in os x
16:33 < ben_alman> just not at all in windows
16:33 < merpnderp> I wonder if node.js is gaining much traction in the corporate world. Any jobs out there for node? 
16:33 < ben_alman> i've heard from someone else that it's intermittent in windows
16:34 < SomeoneWeird> use spawn ben_alman 
16:34 < ben_alman> i am using spawn
16:35 < SomeoneWeird> try exec then
16:35 < ben_alman> ...
16:36 < ben_alman> i don' have a command string, i have a command and an array of args, each of which may contain spaces or quotes
16:36 < ben_alman> so exec won't work for me, afaik
16:40 < SomeoneWeird> wat
16:42 < surjikal> Hey guys, I have a project with some deep folder nesting. Is there a better than to "require('../../../stuff_in_project_root')"?
16:46 < wlaurance> surjikal, maybe require ( someFunctionToGetRoot() + '/stuff_in_project_root');
16:46 < CIA-88> node: isaacs v0.8.8-release * r513a397 / lib/tls.js : lint - http://git.io/sKT1GQ
16:46 < CIA-88> node: isaacs v0.8.8-release * r0ddc566 / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/BTMY7w
16:53 < Dragonblade> so after many attempts to installing appjs on the linux server so far no prevail Dx
16:53 < Dragonblade> so....many....errors...
16:53 < milani> Dragonblade, what was the issue? using npm?
16:53 < Dragonblade> yes
16:54 < milani> errors when installing or running?
16:54 < Dragonblade> I got the node-gyp -g
16:54 < Dragonblade> installing
16:55 < milani> hmmm installation should not have problem. may you paste the npm output somewhere?
16:55 < Dragonblade> I can pm you the list of no longer long errors
16:56 < milani> Dragonblade, also try http://dists.appjs.org/0.0.18
16:56 < Dragonblade> I did
16:56 < Dragonblade> I think it's trying to get 0.0.13
16:56 < milani> what! which? npm?
16:59 < zipp> isaacs: 0.8.8 today?
16:59 < zipp> Or is that just libuv?
17:00 < shlevy> If stream.write returns false, is it expected that you need to resend on drain, or that you just shouldn't send any more?
17:03 < Dragonblade> Shlevy you are streaming what exactly? o.o
17:17 <@isaacs> zipp: yes
17:17 <@isaacs> that's node
17:18 < zipp> isaacs: ooh nifty.
17:23 <@isaacs> zipp: re: inherit
17:23 <@isaacs> zipp: honestly, I usually just do Child.prototype=Object.create(Parent.prototype, {constructor:{value:Child, enumerable: true}}) these days
17:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:24 <@isaacs> oops, need a configurable: true in there
17:24 <@isaacs> zipp: but util.inherits is fine.  so is my inherits module.
17:24 < zipp> isaacs: I've been using your inherits module. Just curious as to standard convention :3
17:26 < timeturner> child.prototype.__proto__ = parent.prototype
17:26 < draginx> ok so express-flash doesnt work on express v3 anymore
17:26 < draginx> Anyone know of any good alternatives?
17:26 < timeturner> flash is opinionated
17:26 < tjholowaychuk> draginx there's a thing called connect-flash
17:26 < tjholowaychuk> that adds it back if you really want it
17:26 < draginx> tjholowaychuk: i might talking about that actually
17:27 < draginx> well are there alternatives to session messages?
17:27 < draginx> tjholowaychuk: also do u have an article on how u setup ur terminal? :D
17:27 < draginx> ur screenshots always look so nice
17:27 < tjholowaychuk> white
17:27 < tjholowaychuk> haha
17:27 < tjholowaychuk> nothing fancy, it's just the regular white Terminal one
17:27 < draginx> white? O_o nah u had black background with the half-life symbol
17:27 < tjholowaychuk> lots of cyan and you're good to go
17:39 -!- ServerMode/#Node.js [+o Nexxy] by pratchett.freenode.net
17:39 -!- ServerMode/#Node.js [+oo tomaw marienz] by pratchett.freenode.net
17:39 < draginx> tjholowaychuk: sorry about that net split
17:39 < draginx> ok so tjholowaychuk u had a terminal with ah alf-life logo, black screen,s mall font, etc. no?
17:40 < tjholowaychuk> draginx https://gist.github.com/7480a553647de1ab4a42
17:40 -!- ServerMode/#Node.js [+o jayne] by pratchett.freenode.net
17:40 < draginx> 1. is there an alternative to the flash concept?
17:40 < draginx> 2. is there a way to execute code after res.render?
17:40 < tjholowaychuk> draginx depends, lots of apps don't need that at all, but it's nothing fancy just stuff some strings in the session
17:41 < draginx> tjholowaychuk: thats in ur bash_profile?
17:41 < tjholowaychuk> can be as basic as req.session.messages.push('something')
17:41 < tjholowaychuk> damnit
17:41 < tjholowaychuk> haha
17:42 < ngoldman> the system sploded
17:42 < zipp> Freenode accidentally the whole thing
17:43 < diverdude> Hello. Is there any Mysql ORM lib for node.js which works with an existing database?
17:44 < draginx> right, yeah my biggest problem is clearing the sessions after the user has been to the page.. is there a way to render code after res.render?
17:44 < draginx> diverdude: sequelize :)
17:53 < CIA-1> node: isaacs v0.8.8-release * r3c89964 / (102 files in 7 dirs): npm: Upgrade to 1.1.59 - http://git.io/t9xo5Q
17:53 < CIA-1> node: isaacs v0.8.8-release * r2fe8613 / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/3sXPsQ
17:59 < therealkoopa> Is npm link the right tool for the job if I have a project that depends on another project, but of which are private.  An example: Web app that depends on a module that has workers.
18:03 < CIA-1> node: isaacs v0.8.8-release * ra299c97 / (AUTHORS ChangeLog src/node_version.h): 2012.08.22, Version 0.8.8 (Stable) - http://git.io/rFUufQ
18:04 < CIA-1> node: isaacs v0.8.8-release * ree20094 / lib/tls.js : lint - http://git.io/Yr_gsA
18:04 < CIA-1> node: isaacs v0.8.8-release * rc259499 / (103 files in 7 dirs): npm: Upgrade to 1.1.59 - http://git.io/T0DONA
18:08 < therealkoopa> Or how about this, I did a npm link in one module, and then: npm link foo in the othe rmodule.  I see it's now linked in node_modules, but when I do a require('foo'), it can't find it.
18:13 < sadtaco> Where is that test page for websockets that tries connecting on multiple ports and reports back what works or not?
18:31 < dominictarr> mmalecki, you should watch this kent beck talk, http://www.infoq.com/presentations/responsive-design
18:31 < dominictarr> especially around 36:00
18:31 < mmalecki> dominictarr: I shall!
18:31 < mmalecki> dominictarr: also, shots?
18:32 < dominictarr> he describes a quite-interesting method to refactor complicated projects while keeping it working.
18:32 < dominictarr> shots++
18:32 < mmalecki> I SHALL GET SOME THEN
18:33 < mkrecny> nodelings, good sup to you
18:40 < solidoodlesuppor> While(not drunk){ Drink;}
18:41 < mmalecki> solidoodlesuppor: that ended up bad last time me and dominictarr tried
18:41 < CIA-1> libuv: Bert Belder v0.8 * ra787a16 / src/unix/async.c : unix: fix uv_async_send not working with Sun Studio (+108 more commits...) - http://git.io/QcM_Ow
18:41 < timeturner> any cli tool for uglifying a js file?
18:41 < dominictarr> solidoodlesuppor, already one weeks worth of hang over this week.
18:42 < dominictarr> timeturner, npm install uglifyjs -g
18:42 < timeturner> thanks
18:42 < solidoodlesuppor> mmalecki:  You mean the installer? 
18:42 < solidoodlesuppor> ah hah
18:42 < solidoodlesuppor> the joke yes
18:42 < dominictarr> (or something like that)
18:42 < CIA-1> libuv: Bert Belder master * ra787a16 / src/unix/async.c : unix: fix uv_async_send not working with Sun Studio - http://git.io/QcM_Ow
18:42 < timeturner> no package with name uglifyjs
18:42 < solidoodlesuppor> if(hung over){ Throw puke}
18:43 < timeturner> :/
18:48 < dominictarr> timeturner, oops, it's uglify-js
18:49 < timeturner> is it a cli tool though
18:51 < dominictarr> timeturner, it is indeed.
18:51 <@Nexxy> oh my god, no chanserv. we're all going to die.
18:52 < mmalecki> Nexxy: I don't want to die young!
18:53 <@Nexxy> is that why you drink so much?!
18:53 < mmalecki> Nexxy: I don't drink THAT much!
18:53 <@Nexxy> lol ;P
18:54 <@Nexxy> in other news; I'm going to JSConfEU
18:54 <@Nexxy> \o/
18:54 < mmalecki> I feel betrayed.
18:54 <@Nexxy> why?!
18:55 < mmalecki> you lol'd at me!
18:55 <@Nexxy> mmalecki, lol = lots of love
18:55 < mmalecki> aaaawwww <3
18:55 <@Nexxy> <3
18:57 < timeturner> sweetness it worked
18:57 < timeturner> cli tool is uglifyjs(1)
18:57 < timeturner> require is uglify-js
18:58 < Dragonblade> I need to quit adding projects to the music player....I haven't even fixed the undefined crash near the end of the playlist yet
18:58 < Dragonblade> really readUInt8 to be specific
19:02 < Domenic> CHALLENGE: make this cleverer/less stupid. [f, g].forEach(Function.prototype.call.bind(Function.prototype.call))
19:02 <@Nexxy> more meaningful variable names would make it less stupid :)
19:03 < Domenic> I mean I have a dynamic array of functions, and I want to call all of them, and there should be something cooler than [f, g].forEach(function (x) { x(); })
19:03 <@Nexxy> var caller = function(fn) { return fn(); }
19:04 <@Nexxy> [..].map(caller);
19:04 < Domenic> yeah, i guess. just not sure it's worth it to write that function instead of inlining it.
19:04 <@Nexxy> OH WOW
19:04 <@Nexxy> okay.
19:04 < Domenic> (this is obviously a stupid challenge :P)
19:05 <@Nexxy> inline all the things!
19:08 < timeturner> [f, g].forEach(function (x) { x(); }) is pretty cool already lol
19:08 < Domenic> I was hoping underscore had something, [f, g].forEach(_.invoke) or something. But no.
19:09 < jcrew> what if f and g are arrays too, then the function won't work, this thing needs to solve all problems
19:09 <@Nexxy> I like how you're perfectly willing to use someone else's abstraction
19:09 <@Nexxy> but damned if you'll write your own ;P
19:10 < Domenic> haha @jcrew
19:10 < Domenic> Yeah Nexxy I mean where would I put it? "utils.js"? then someone looks at that file and laughs at me.
19:10 <@Nexxy> O_o
19:10 < Domenic> And my delicate feelings would get hurt.
19:10 < Domenic> So that would be sad.
19:11 <@Nexxy> I don't think I've seen this argument before lol
19:11 < jcrew> hide your little feelings and put it at the top of utils.js 
19:11 < Domenic> I don't have a utils.js, is the thing
19:11 <@Nexxy> "I use modules as a way to safeguard myself against a blow to my ego"
19:11 < Domenic> ^_^
19:11 < jcrew> make a utils1.js that references a bunch of other utils files
19:12 < jcrew> and then you can abstract it enough that people will give up looking for the function
19:12 <@Nexxy> jcrew, var caller = function(f) { typeof f == "object" ? caller(f) : return f(); }
19:12 <@Nexxy> solved
19:12 < jcrew> ikr, now make it so that i can control robots with it
19:13 <@Nexxy> I believe that's beyond the scope of this discussion.
19:13 < Domenic> i hear that feature is coming in underscore 1.4
19:13 < jcrew> robots are never out of scope
19:29 < tbrock> hey guys, trying to learn about express 3.0, are there any guides out there that go into a little more depth
19:30 < tbrock> tutorial wise
19:30 < tbrock> the api is useful, but knowing what app.set() does isn't helpful without knowing what options you can or should set
19:32 < hydrozen> What's the best way to list the available versions of a npm package?
19:32 <@Nexxy> tbrock, you can app.set anything
19:33 < hydrozen> anythign else other than 'npm info <package>' ?
19:34 <@Nexxy> tbrock, the inverse of that is (of course) app.get
19:34 < tbrock> Nexxy, this is all obvious
19:34 < tbrock> Nexxy, but what should I set?
19:35 < tbrock> Nexxy, there must be more examples out there where one actually renders a template or something
19:35 < tbrock> Such as, how do you set up a templating engine
19:39 < CIA-1> node: Ryan Dahl v0.8 * rf90c9ce / (24 files in 5 dirs): Upgrade GYP to r1477 - http://git.io/o9G0hQ
19:43 <@Nexxy> tbrock, that would be app.engine
19:50 < merpnderp> If you're running something like Buffet for your static files, is there any point in fronting your server with nginx or could you run node on port 80?
19:51 < astropirate> merpnderp, nginx is generally a faster file server. You can server with node.js and use nginx as load balancer. because you want to run a Node instance on every core of your cpu
19:53 <@Nexxy> merpnderp, not really
19:53 < merpnderp> astropirate: But if I'm running on virtuals with a single core is there still a point for having nginx? I'm sure nginx is faster at static file serving probably because it can stream cached files faster, but is it enough faster than Buffet to be worth the extra config trouble?
19:54 < CIA-1> node: isaacs v0.8 * r0407ecf / doc/blog/release/v0.8.8.md : blog: v0.8.8 release (+5 more commits...) - http://git.io/FUYC7w
19:54 < astropirate> merpnderp, I think not. Go with what ever is easier. If you are having scaling issues. congrats. you made it XD
19:54 < merpnderp> Thats what I was thinking Nexxy, but wanted to sanity check it.
19:54 < merpnderp> hahaha, great point astropirate
19:55 < merpnderp> although nginx is ridiculously simple to configure......But I love the idea of a pure node/mongo stack.
19:56 < astropirate> I, personally, dont even bother with a node.js static file server
19:56 < astropirate> what would be the point of duplicating effort in my opinion
19:56 < astropirate> given nginx is so easy to setup and configure
19:56 < sWORDs> Are the linux binary builds still for the brave? Or did most users find no errors?
19:57 < draginx> haproxy + varnish + nginx + nodejs for the win
19:57 < merpnderp> well it isn't quite as easy as npm install bugget then in your connect configure add app.use(buffet.I can't recall);
19:57 < merpnderp> s/bugget/buffet/
19:58 < astropirate> I dont use connect :p
19:58 < astropirate> *hipster alert
19:59 <@isaacs> v0.8.8 is out.  come and get it :)
19:59 < merpnderp> Buffet supports flatiron :P
19:59 < sWORDs> Isaacs: already got it ;)
20:00 < merpnderp> egads, it takes me 45 minutes to build node on my virtuals. At this rate the release cycle will be faster than I can build :P
20:01 < tlack> buffet seems interesting. any big sites using it?
20:01 < merpnderp> tlack: I just heard about it on dailyjs. Seems pretty new.
20:09 < spionL> Is there a stream multiplexer/demultiplexer for node?
20:11 < spionL> something like var mux = multiplexer.create(outputStream); var s1 = mux.createWriteableStream('s1'), s2 = mux.createWriteableStream('s2'); s1.write or s2.write ...
20:12 < spionL> var demux = demultiplexer.create(inputStream); var s1 = demux.getReadableStream('s1'), s2 = demux.getReadableStream('s2'); s1.on('data' and s2.on('data'
20:13 < spionL> basically to have multiple virtual streams over a single (TCP) connection.
20:13 < qbit> https://lobste.rs/ <---- pm if if anyone wants an invite :D 
20:13 < myndzi> raage.
20:13 < Dragonblade> multiple streams on a single TCP?
20:13 < spionL> yeah.
20:13 < myndzi> i've got a problem that seems like an async problem
20:14 < myndzi> in chrome
20:14 < Dragonblade> what exactly are you streaming? XD
20:14 < myndzi> but there is no async (??)
20:14 < Dragonblade> cause I have a music streamer going right now with node.js
20:14 < myndzi> an array value is being set directly, the appropriate function is called when it's done, the array shows the correct data, and then after THAT it calls code to do something with it
20:14 < myndzi> and some of the array entries return empty
20:14 < spionL> Dragonblade, audio + events + dnode
20:14 < myndzi> then after the code is done, i get the correct array in the console
20:15 < myndzi> and can even run the exact same function successfully
20:15 < myndzi> any idea what i could possibly be missing?
20:15 < Dragonblade> I just have a queue playlist on the .js for the http page
20:15 < Dragonblade> all on one port
20:15 < Dragonblade> for a second I would create a second page for the next port
20:16 < Dragonblade> I've actually grown to like the server more than my media player for some reason
20:16 < spionL> I'd have a tcp connection overload very soon as every client will maintain at least 3 nodejs-web - to - nodejs-channelserver connections.
20:17 < Dragonblade> The only thing I need to fix is the readUInt8 undefined issue
20:17 < Dragonblade> cause it does that near the end of the playlist
20:18 < spionL> I think I'll make a general mux/demux
20:18 < spionL> :D
20:18 < Dragonblade> want some music while your at it? XD I got the server goin? :P
20:18 < spionL> no, not on these tiny laptop speakers :P
20:18 < Dragonblade> XDDD
20:18 < Dragonblade> alright
20:19 < spionL> hey, lobste.rs
20:19 < spionL> looks inspired by hackernews
20:20 < spionL> and/or reddit
20:20 < spionL> qbit, is it perhaps different?
20:20 < bhamrick> is this on github?
20:22 < holzp> i just want the old slashdot back :(
20:22 < holzp> like from 1996
20:22 < qbit> spionL: it is a bit different 
20:22 < qbit> spionL: https://lobste.rs/s/bkeYe9/about_lobsters 
20:23 < jocafa> nice domain though
20:23 < spionL> I see
20:23 < holzp> yeah im suprised it wasnt bought up yet
20:23 < holzp> spion you have invites?
20:23  * jocafa pets his fig.gy
20:23 < spionL> neat, I'm going to be reading it
20:24 < holzp> I like this trend towards simplicity
20:24 < spionL> I posted a story, fixing hackernews: a mathematical approach - and for a brief moment, I thought that someone actually went ahead and implemented it :D 
20:25 < bhamrick> qbit: is this built on node?
20:25 < qbit> bhamrick: no.. but i think it woudl be a good place to talk about node related stuffs
20:26 < qbit> right now it's lots of openbsd nerds and me :D ( openbsd / node nerd )
20:26 < gildean> has anyone made a reverse-proxy-websocket type deal or do i have to write my own?
20:27 < qbit> gildean: nginx and haproxy can both do reverse websocketproxy 
20:27 < gildean> like a client connects to a websocket server which then opens a new port and forwards traffic from it back to the client which then can forward it to a port or use it up or anything
20:28 < gildean> qbit: i meant with nodejs
20:28 < qbit> gildean: me too
20:28 < gildean> qbit: i meant using only nodejs in all stages
20:29 < qbit> ohlol
20:29 < qbit> gildean: i confused yoru question with bhamrick's :P 
20:30 < Dragonblade> This error....oh lord
20:31 < gildean> anyone hasnt made a reverse-proxy-tunnel with websockets and nodejs?
20:31 < qbit> gildean: node-reverse-proxy    A reverse proxy in node.js for HTTP and Websockets            =pouyajoon            2012-03-05 20:53
20:32 < gildean> qbit: that's not what i meant
20:33 < gildean> qbit: i meant i want to connect with a client to a server, at the server a new port is assigned and opened and traffic to that port gets forwarded back to the client which it's assigned to
20:34 < gildean> like an ssh-reverse-tunnel but within a websocket connection
20:35 < qbit> gildean: so... not a proxy at all.. :P
20:35 < gildean> qbit: it's a proxy at the servers end where the port is open
20:36 < gildean> forwarding proxy but it forwards the traffic to the tunnel that's created by the client connecting
20:36 < qbit> client -> server -> back to client 
20:36 < qbit> right? 
20:36 < gildean> baiscally
20:37 < gildean> but at the server, open up a port and listen on it, send traffic to that port to the tunnel
20:37 < qbit> the second connection is going right back to the first client? 
20:37 < qbit> or a different server on the same network as the server? 
20:38 < gildean> let try to explain a little more clearly
20:39 < gildean> a drone connects to a server, a server opens a port on itself and listens to it, all connections made to that port are forwarded back to the "drone"
20:39 < Dragonblade> who wants to help me with this error?
20:39 < Dragonblade> /music/nortims.js:57
20:39 < Dragonblade>         b1 = this.currentSong.readUInt8(p);
20:39 < Dragonblade>                               ^
20:39 < Dragonblade> TypeError: Cannot call method 'readUInt8' of undefined
20:39 < Dragonblade>     at NortimStreamer.<anonymous> (/music/nortims.js:57:31)
20:39 < Dragonblade>     at NortimStreamer.handleFrame (/music/nortims.js:4:61)
20:39 < Dragonblade>     at NortimStreamer.<anonymous> (/music/nortims.js:67:14)
20:39 < Dragonblade>     at NortimStreamer.handleFrame (/music/nortims.js:4:61)
20:39 < Dragonblade>     at NortimStreamer.<anonymous> (/music/nortims.js:67:14)
20:39 < Dragonblade>     at Timer.<anonymous> (/music/nortims.js:4:61)
20:39 < mmalecki> stop
20:40 < Dragonblade> sorry Dx was just asking for the error :c
20:40 <@isaacs> Dragonblade: upload the javascript to gist or something
20:42 < qbit> gildean: don't think it exists :P 
20:42 < gildean> so drone->websock server(open port) -- user connects to--> new port on websocket server->forwards to the drone, which then possibly just streams it to a local port or uses the data in the process itself
20:42 < gildean> qbit: then i'll need to write it
20:42 < Dragonblade> http://63.246.136.84/nortims.js
20:42 < Dragonblade> theres the script
20:43 < qbit> god speed sir! 
20:43 < qbit> :D
20:43 < gildean> i want to have a centralized system where some dumb linux-drones etc. connect and then i can send a "command" type messgae to make the drone open up the tunnel for a new port
20:44 < Dragonblade> With Linux damn near anything like that is possible XD
20:44 < gildean> i already have it working up to the point where clients connect, they have unique identifiers and data is collected etc. and i can send commands back
20:44 < gildean> but now i need to make the tunnelier-server-client stack
20:44 < Dragonblade> nice :3
20:45 < Dragonblade> I don't exactly have such knowledge in programming but I am learning x.x
20:57 < joshwnj> Dragonblade: can you also please show us a gist of the code that's calling this function (and getting the error)?
20:59 < timeturner> with require()ing on the client side via require.js or anything like that how do you mix libraries that don't expose via require()?
21:00 <@Nexxy> wrap them in an export?
21:01 < timeturner> so module.exports = windows.someLib?
21:01 < Dragonblade> I can see about trying o.o
21:01 < Dragonblade> or do you want me to private copy paste the error?
21:01 < timeturner> from within someLib.js?
21:02 < timeturner> basically I'm trying to to figure out if attaching the export with the object property on the window is the cleanest way to go
21:02 < Dragonblade> From what I see in the error stack is most of it is in nortims.js
21:03 < Dragonblade> the last 2 I think are internal module based
21:04 < Dragonblade> or I can send you the whole player XD
21:04 < Dragonblade> just so you see what Im working with
21:04 < draginx> Anyone have examples of using express and having middleware being used through another file? (where I would have to export.modules?)
21:04 < joshwnj> lol it'd be better just to start with something small :)
21:04 < draginx> basically, if I do module.exports = function(app){ /* app is express */ app.set('hello!','world!'); } would that pass on or no?
21:04 < Dragonblade> alright what exactly do you need?
21:04 < timeturner> draginx: middleware are just functions which take req, res, next
21:05 < joshwnj> Dragonblade: let's start with this: is anything queued up in the song queue when you start this up?
21:05 < Dragonblade> yes
21:05 < Dragonblade> it starts auto
21:05 < holzp> draginx, there is a section on it in the upcoming Learning Node book from ORA
21:05 < Dragonblade> but it crashes near the end and ONLY near the end
21:05 < timeturner> so you can just do: module.exports = function(req, res, next) { ... next() }
21:05 < timeturner> very simple
21:05 < Dragonblade> oh that playlist XD
21:05 < draginx> timeturner: I need to app.set()
21:05 < Dragonblade> of*
21:06 < draginx> holzp: interesting, link?
21:06 < timeturner> app.set inside the middleware function?
21:06 < draginx> timeturner: yeah
21:07 <@Nexxy> draginx, it should work
21:07 < timeturner> then you have to pass the app as well
21:07 < draginx> hmm
21:07 < draginx> let me try :)
21:07 < timeturner> so you can do: module.exports = app; inside app.js and then var app = require('app'); inside of the middleware file
21:07 <@Nexxy> draginx, you have to pass your app when you instantiate it though
21:07 < draginx> yyup
21:08 <@Nexxy> lol
21:08 < timeturner> once you've required the app you don't need to export any of the middleware functions
21:08 < joshwnj> so Dragonblade is anything calling queueSong() in this case? 
21:08 < joshwnj>  
21:08 <@Nexxy> Error: Cannot find module 'app'
21:08 <@Nexxy> inb4
21:08 < holzp> draginx, its only available on Safari in rough cuts
21:08 < holzp> no idea when it will be out
21:08 < Dragonblade> meaning is the startup script calling queue at startup?
21:09 < timeturner> actually you do need to export
21:09 < timeturner> scratch that
21:09 < timeturner> export to your routes
21:09 < timeturner> unless you just need to stuff them in app.configure
21:09 <@Nexxy> just instantiate your routes with your app 
21:09 <@Nexxy> var routes = require('routes')(app)
21:10 < timeturner> passing the app around is kind of scary for me though
21:10 < timeturner> not scary, unclean
21:10 < timeturner> imo
21:10 <@Nexxy> lol
21:10 < timeturner> lol maybe I'm paranoid
21:10 < joshwnj> Dragonblade: yep - what I'm interested to know is, when we go into handleFrame (as I saw in your stack trace) what's in this.songQueue at that point?
21:10 <@Nexxy> s/paranoid/silly/
21:10 < timeturner> haha
21:11 < Dragonblade> yeah
21:11 < Dragonblade> the second the server starts it plays immediately
21:11 < jcrew> do you have somewhere i can see this music player?
21:11 < Dragonblade> mainly because we dont have any way to tell the erver to start yet
21:11 < Dragonblade> and you mean what songs?
21:11 < Dragonblade> jcrew I can zip the whole player and upload it for you
21:12 < joshwnj> i mean what does console.log(this.songQueue) look like when handleFrame() runs
21:12 < Dragonblade> gimme a sec on tht josh
21:12 < jcrew> Dragonblade: cool
21:13 < joshwnj> all of the logic here is controlled by state, so we need to know what the state is
21:13 < draginx> ahh i got it working! :) thanks guys
21:14 < Dragonblade> josh: Alright so I searched the folders and I dont really see a console log nor does the server display a console log yet (friend never implemented that)
21:14 < Dragonblade> jcrew: on it now
21:14 < joshwnj> can you find the line of code that calls `new NortimStreamer` ?
21:15 < Dragonblade> oh yeah hold on
21:16 < Dragonblade> var myStream = new NortimStreamer();
21:16 < Dragonblade> that?
21:17 < joshwnj> yep - and anything after that calling myStream.queueSong() ?
21:17 < joshwnj> or myStream.* for that matter...
21:17 < Dragonblade> lol theres a list :P
21:17 < Dragonblade> like
21:17 < Dragonblade> at least a nice hours worth
21:17 < Dragonblade> but that doesn't matter its always near the end of the list it crashes
21:18 < joshwnj> ok
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Undone.mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Skyrim Metal.mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Under and Over It.mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Funbagz.mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Bad Company (Bad Company cover).mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Mass Erection.mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("Bulletproof.mp3") );
21:18 < Dragonblade> myStream.queueSong( fs.readFileSync("War Is The Answer.mp3") );
21:18 <@maxogden> nice song titles
21:18 < Dragonblade> thats just about near half of the list
21:18 < Dragonblade> why thank ya :3
21:18 < Dragonblade> in fact Im listening to the server now
21:18 < Dragonblade> http://63.246.136.84:8080/
21:18 < Dragonblade> ^listen XD
21:19 < tbrock> hey guys are there any good docs out there for node and express 3?
21:19 < tbrock> I'm trying to get something deeper than the initial very brief intro they have on the site
21:19 < Dragonblade> I usually check nodejs.org
21:20 < joshwnj> so Dragonblade just lookin... at the point when it dies, this.currentSong === undefined
21:20 < joshwnj> we know that from the stack trace
21:20 < joshwnj> could be from calling this.next(), with an empty songQueue,
21:21 < Dragonblade> ah
21:21 < Dragonblade> could that be because I dont have a loop set?
21:21 < joshwnj> but there is a this.currentSongLength left over from the previous song that wasn't cleared out
21:21 < joshwnj> so then it does this:
21:21 < joshwnj> // Generated by CoffeeScript 1.3.3
21:21 < joshwnj> (function() {
21:21 < joshwnj>   var NortimStreamer, Queue, events,
21:21 < joshwnj>     __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
21:21 < joshwnj>     __hasProp = {}.hasOwnProperty,
21:21 < joshwnj>     __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
21:21 < joshwnj>   Queue = require('priority-queue');
21:21 < joshwnj>   events = require('events');
21:21 < shlevy> Is there a good way to check if a file supports seeking (or, really, supports createReadStream with start and end values)?
21:21 < joshwnj>   NortimStreamer = (function(_super) {
21:21 < joshwnj>     __extends(NortimStreamer, _super);
21:21 < joshwnj>     function NortimStreamer() {
21:21 < joshwnj>       this.handleFrame = __bind(this.handleFrame, this);
21:22 < joshwnj>       this.songQueue = new Queue();
21:22 < joshwnj>       this.interval = 0;
21:22 <@maxogden> joshwnj: protip: gist.github.com
21:22 < joshwnj>       this.currentSong = new Buffer(0);
21:22 < joshwnj>       this.currentSongLength = 0;
21:22 < joshwnj>       this.songPointer = 0;
21:22 < joshwnj>     }
21:22 < joshwnj>     NortimStreamer.prototype.start = function() {
21:22 < joshwnj>       return this.interval = setInterval(this.handleFrame, 26);
21:22 < joshwnj>     };
21:22 < joshwnj>     NortimStreamer.prototype.stop = function() {
21:22 < joshwnj>       return clearInterval(this.interval);
21:22 < joshwnj>     };
21:22 < joshwnj>     NortimStreamer.prototype.next = function() {
21:22 < joshwnj>       this.currentSong = this.songQueue.pop();
21:22 < billy> ...
21:22 < joshwnj>       this.songPointer = 0;
21:22 < joshwnj>       if (this.currentSong == null) {
21:22 < joshwnj>         return;
21:22 < billy> it's 2012 and people are still pasting code into irc
21:22 < joshwnj>       }
21:22 < joshwnj>       this.currentSongLength = this.currentSong.length;
21:22 < billy> jesus
21:22 < joshwnj>       return this.emit('changetracks');
21:22 < joshwnj>     };
21:23 < joshwnj>     NortimStreamer.prototype.queueSong = function(buf) {
21:23 < joshwnj>       return this.songQueue.push(buf);
21:23 < Dragonblade> billy its for my music player
21:23 < joshwnj>     };
21:23 < joshwnj>     NortimStreamer.prototype.handleFrame = function() {
21:23 < AviMarcus_> this is where the noble in this generation commit suicide
21:23 < joshwnj>       var b1, b2, outBuf, p, songOnFirstFrame, songOnLastFrame;
21:23 < joshwnj>       songOnFirstFrame = this.songPointer === 0;
21:23 < joshwnj>       songOnLastFrame = true;
21:23 < joshwnj>       if (this.currentSongLength <= this.songPointer) {
21:23 < joshwnj>         this.next();
21:23 < joshwnj>       }
21:23 < AviMarcus_> by that I mean, disconnecting themselves from IRC if that's their only option to stop the paste.
21:23 < joshwnj>       p = this.songPointer + 2;
21:23 < joshwnj>       while (this.currentSongLength > p + 1) { 
21:23 < joshwnj>         b1 = this.currentSong.readUInt8(p);
21:23 < joshwnj>         b2 = this.currentSong.readUInt8(p + 1);
21:23 < joshwnj>         if (b1 === 255 && Math.floor(b2 / 16) === 15 && b2 % 16 === 11) {
21:23 < zykes-> joshwnj: heard of pastebin ?!?
21:23 < joshwnj>           songOnLastFrame = false;
21:23 < joshwnj>           break;
21:23 < joshwnj>         }
21:23 < joshwnj>         p++;
21:24 < joshwnj>       }
21:24 < joshwnj>       if (songOnLastFrame || songOnFirstFrame) {
21:24 < joshwnj>         this.songPointer = p;
21:24 < joshwnj>         this.handleFrame();
21:24 < joshwnj>         return;
21:24 < joshwnj>       }
21:24 < joshwnj>       outBuf = new Buffer(p - this.songPointer);
21:24 < joshwnj>       this.currentSong.copy(outBuf, 0, this.songPointer, p);
21:24 < Dragonblade> yeah pstebin would prolly be a better option
21:24 < joshwnj>       this.emit('data', outBuf);
21:24 < joshwnj>       return this.songPointer = p;
21:24 < shlevy> Just a bit
21:24 < Dragonblade> or start a doc on my google docs XD
21:24 < joshwnj>     };
21:24 < joshwnj>     return NortimStreamer;
21:24 < xat-> :D
21:24 < joshwnj>   })(events.EventEmitter);
21:24 < joshwnj>   module.exports = NortimStreamer;
21:24 < joshwnj> }).call(this);
21:24 < joshwnj> crap
21:24 < shlevy> Yay!
21:24 < joshwnj> sorry
21:24 < xat-> :D
21:24 < Dragonblade> lol alright
21:24 < joshwnj> :P
21:24 < joshwnj> massive fail :P
21:24 < yawnt> :|
21:24 < Dragonblade> Ill get a Google Doc going for ya XD
21:25 < joshwnj> thanks maxogden :P
21:25 < yawnt> lol
21:25 < joshwnj> i acidentally hit paste and there was a newline there :(
21:25 < shlevy> joshwnj: By the way, you have a bit of a lag :)
21:25 < joshwnj> so Dragonblade check lines 55-57
21:25 < yawnt> that was terrible lol
21:25 < joshwnj> yeah sorry zykes- it was an unintentional paste to begin with
21:25 < ccowan> yeah
21:25 < shlevy> Is there a good way to check if a file supports seeking (or, really, supports createReadStream with start and end values)?
21:25 < joshwnj> i'll be more careful *promise*
21:25 <@maxogden> i enjoy being immersed in node code... its refreshing
21:25 <@maxogden> like a hot shower
21:25 < joshwnj> Dragonblade: line 55, you're checking whether this.currentSongLength has a length - i think this is your issue, try clearing that out at the top of your `next()` function
21:25 < joshwnj> lol
21:25 < Dragonblade> Yeah Ill make a group Google Doc for this for us all XD
21:25 < ccowan> maxogden: I was licking the screen it was so yummy!
21:26 <@Nexxy> > // Generated by CoffeeScript 1.3.3
21:26 <@Nexxy> there's your problem
21:26  * maxogden <rimshot>
21:26 < joshwnj> lol
21:26 <@Nexxy> thank you, thank you
21:26 < joshwnj> Nexxy: you prefer a different version? ;)
21:26 < Dragonblade> LOL out of date Nexxy?
21:26 < ccowan> Nexxy: FTW!
21:26 < jcrew> why would you bastardize nice looking javascript with cofeescript ?
21:27 < jcrew> that's like using ruby
21:27 < Dragonblade> I didnt write the player itself ._ .
21:27 < Dragonblade> My friend did
21:27 < Dragonblade> I just wanted to fix it
21:27 < Dragonblade> and use it to my gaming servers
21:27 <@maxogden> tell your friend he is wrong and should feel bad
21:27 < Dragonblade> XD
21:27 < Dragonblade> Ill just upload the fixed one to my github
21:27 < jcrew> tell him php is real man's language
21:27 < Dragonblade> he can use his coffeescript one XD
21:27 < Dragonblade> oh he knows php
21:28 < Dragonblade> I thinkk he just threw it together because he is always busy
21:28 < Dragonblade> but yeah first things first
21:28 < ccowan> Dragonblade: you should convert it BACK to Javascript and then make a pull request
21:28  * Dragonblade creates a group Google Doc for everyone
21:28 < Dragonblade> ccowan Ill need to learn that first ._ .
21:29 < Dragonblade> I did just dive head first into node.js after all
21:29 <@Nexxy> node-first into javascript
21:29 <@Nexxy> you mean
21:29 < Dragonblade> yeah
21:29 < Dragonblade> nicely said
21:29  * Dragonblade gives a google +1
21:29 <@Nexxy> lol
21:31 < Dragonblade> alright so Im setting up a google doc for everyone
21:31 < Dragonblade> https://docs.google.com/document/d/1hc6TRKy9_knyOHzA9cp1Ps61Dr-VtI0JlgNakKs73GU/edit
21:31 < Dragonblade> theres the doc
21:31 < Dragonblade> enjoy
21:34 < joshwnj> so Dragonblade i would try chucking a `this.currentSongLength = 0` at the top of the `next()` function
21:34 < joshwnj> and see if you still get that same error
21:37 < mscdex> node.js rules!
21:37 < mscdex> and PHP doesn't!
21:37 < Dragonblade> lol well if you look at the doc
21:37 < Dragonblade> I converted coffee to js
21:39 < Dragonblade> you mean the this.next() fuction?
21:39 < joshwnj> at the top of NortimStreamer.prototype.next
21:40 < Dragonblade> ah gotcha
21:40 < joshwnj> because you've got a potential situation where this.currentSong === undefined, but this.currentSongLength > 0
21:40 < joshwnj> which might not be the exact cause of your bug here but it's def not right
21:42 < Dragonblade> alright Imma restart the server.
21:44 < Dragonblade> brb gotta disappear for a bit
21:44 < Dragonblade> Ill be back with results
21:49 < Taar779_w> Could anyone example how to use a future from the Futures module? Or at least help me understand the concept?
21:52 < martyl> any ideas how  where to look to encrypt javascript files read into node?
21:53 < martyl> actually, where to hack the node/v8 code to decrypt  source files (I know how to encrypt/decrypt)
22:02 < CIA-1> node: Bert Belder v0.8 * r99ad52e / (3 files): doc: remote the "recommended modules" section - http://git.io/m5FD2w
22:09 < Orbitrix> so
22:09 < Orbitrix> nodes pretty sweet huh guys?
22:12 < CIA-1> node: isaacs v0.8 * r1597ce0 / doc/index.html : website: Fix download link on win, un-break industry section - http://git.io/sNgkAQ
22:13 < shlevy> I'm getting an errno of -1 from a read... I actually expected an error, but it should be ESPIPE. Any ideas?
22:16 < TooTallNate> Orbitrix: sweet ass sweet
22:17 < Dragonblade> back and running test to the change. If that don't work Ill let my friend know Im converting his code to js instead of using Coffee
22:19 < Dragonblade> ok new crash code error
22:19 < Dragonblade> still near the end of the playlist
22:19 < Dragonblade> /music/node_modules/priority-queue/src/PriorityQueue.js:0
22:19 < Dragonblade> (function (exports, require, module, __filename, __dirname) { /**
22:19 < Dragonblade> ^
22:19 < Dragonblade> RangeError: Maximum call stack size exceeded
22:20 < joshwnj> Dragonblade: right, i was wondering if we were going to see that :P
22:20 < joshwnj> you've got a recursion loop inside handleFrame()
22:20 < joshwnj> line 66
22:23 < Dragonblade> the 'this.songPointer = p;' ?
22:23 < joshwnj> after that - this.handleFrame() called inside NortinStreamer.prototype.handleFrame
22:25  * joshwnj back in a bit
22:27 < shlevy> Doing a read with an offset shows an ESPIPE in strace but in the exception errno is set to -1
22:27 < shlevy> When reading from a pipe, of course
22:28 < Dragonblade> wow I actually hit a blank and am now having a hard time understanding tht one
22:28 < bnoordhuis_> shlevy: what exactly is the problem? you can't do positional reads on pipes
22:28 < shlevy> bnoordhuis_: Right, but the errno isn't set right
22:28 < bnoordhuis_> shlevy: that's because there's no mapping for ESPIPE currently
22:28 < shlevy> I see in strace that it's ESPIPE, but in the exception passed to the callback errno is set to -1
22:29 < shlevy> So when there's no mapping the real errno isn't passed?
22:29 < bnoordhuis_> no
22:29 < shlevy> I don't get why a mapping should even be needed. strerror should be enough, right?
22:30 < Dragonblade> That actually sparks a thought
22:30 < Dragonblade> after adding that next function
22:31 < Dragonblade> that basically pointed to what the real issue was didn't it?
22:31 < bnoordhuis_> shlevy: no. look at libuv if you want to know why
22:32 < shlevy> bnoordhuis_: Where in libuv?
22:32 < bnoordhuis_> shlevy: src/{unix,win}/error.c and include/uv.h
22:32 < shlevy> bnoordhuis_: Thanks
22:33 < shlevy> OK, I see that UV defines its own error codes, just don't see why
22:33 < CIA-1> libuv: Ben Noordhuis v0.8 * r0ac2fdc / (include/uv.h src/unix/error.c): unix: map errno ESPIPE - http://git.io/KyOROw
22:34 < shlevy> Heh, thanks :D
22:34 < bnoordhuis_> shlevy: because that's the only way to do sane cross-platform error reporting
22:34 < shlevy> Couldn't you keep the original errno around and fallback to strerror in the unknown case?
22:37 < bnoordhuis_> shlevy: libuv does but the problem is that strerror() in older versions of glibc leaks memory
22:39 < shlevy> bnoordhuis_: OK. Well your fix works for my particular issue, so I'm happy, but IMO providing some way to access the underlying system error code/string would be a big plus
23:05 < Dragonblade> quick question
23:06 < Dragonblade> so instead of a .coffee file how would you go aabout a js file for the javascript version
23:06 < Dragonblade> would it be .js like the other files?
23:07 < Dragonblade> Cause I wanna swap out the .coffee with the js version to test it XD
23:11 < joshwnj> not sure i understand the question mate
23:11 < joshwnj> don't you already have a .js file that was the generated output of the coffescript file?
23:14 < Arro> how would i do provide the equivalent of a curl -u myusername in a nodejs http.get( call?
23:15 < Arro> nevermind, mightve figured it out
23:16 < joshwnj> Arro: github.com/mikeal/request gives you a nice thin wrapper around that 
23:16 < Arro> @joshwnj thx!
23:16 < _johnny> hi, i've made a small "service" to unzip some files that we internally upload. it works, but i think i'm misunderstanding how fs.link works. here's my code: http://pastebin.com/zVyxrCX9 . the commented code is where i pipe the linked reader to the unzip reader (or rather, parser for debug, but that's besides the point). my "problem" is that i use pause/resume to keep the unzip reader from quitting prematurely, _but_ this also makes
23:18 < _johnny> whoops.. which is why i commented it out: speed is fine as expected with it commented out, but slow when not, that is, the "req" reader is limited, which is not what i wanted to do :)
23:19 < Dragonblade> Well I thought of an idea
23:19 < Dragonblade> I wanna run a console.log() on that section to see what its doing
23:19 < Dragonblade> Not sure how I would add that to the startup.js
23:27 < Dragonblade> Dx still can't get the console.log to work correctly
23:39 < ccowan> What are most people doign for their config? I have mine as an object that's exported in a javascript file. But I kind of hate it.
23:39 < holzp> json no?
23:39 < holzp>  
23:39 < holzp>  
23:40 < ccowan> I was thinkig of moving it to Redis
23:40 < joshwnj> ccowan: what's wrong with it?
23:41 < holzp> moving your config to redis?
23:42 <@maxogden> i use environment variables
23:42 < holzp> how does one convfig the redis access then?
23:42 < ccowan> I kind of want a admin tool to manage the configurations per enviroments (we have different settings for development, staging, beta and production)
23:42 < Dragonblade> josh quick question. how do I tell console.log() to monitor that section?
23:42 < Dragonblade> I just remembered that command and never figured out exactly how to tell it to display data
23:42 < ccowan> maxogden: where are you setting those?
23:43 <@maxogden> in unix
23:43 <@maxogden> and then accessing them through process.env
23:44 < ccowan> maxogden: /etc/enviroment?
23:44 < joshwnj> Dragonblade: are you running the node in a repl? or is this live on a server and you're trying to trace stuff on there?
23:44 < ccowan> maxogden: are you self hosted? or using an Saas
23:44 < Dragonblade> Its on my dedi Im renting XD
23:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:45 <@maxogden> ccowan: look up "environment variables" on google + http://nodejs.org/api/process.html#process_process_env
23:45 < Leeol> When you specify a dependancy, is there anything that could ensure `"foo": "0.0.x"` is downloaded from npmjs.org, and not used locally? 
23:45 < joshwnj> Dragonblade: i think the absolute best thing you can do is get this script running locally, in a test environment
23:45 < Dragonblade> hmmm
23:45  * Dragonblade thinks on how tht is done
23:45 < joshwnj> node myfile.js
23:46 < Dragonblade> oh well yeah
23:46 < Dragonblade> I do that XD
23:46 < joshwnj> :)
23:46 < ccowan> maxogden: I know how to set them like > FOO=bar node app.js
23:46 < Dragonblade> Im just trying to get the console.log to tell what exactly is hppening to that section
23:46 < ccowan> as well  as /etc/enviroment but I was just curious which method are you using
23:46 < Dragonblade> unless thats about as far as we can get XD
23:46 < Leeol> For example, if i am working on project `foo` and it installs a dependancy it has (call it `bar`), but Bar *also* depends on `foo`, bar won't actually install npmjs.com/package/foo, Bar will simply use the local version of Foo. 
23:47 < Leeol> The only workaround i can find is for project "Bar" to explicitly define a Foo version, and *not* use any form of wildcard
23:48 < Leeol> (It's a confusing question heh)
23:48 < joshwnj> Dragonblade: you might consider using the debugger too - then you can step through the code as it runs and inspect the value of different variables
23:48 < Dragonblade> alright
23:49 < Dragonblade> I should have thought of that before. I do that for my game servers all the time x.x
23:55 < Dragonblade> debug> http-example.js
23:55 < Dragonblade> ReferenceError: http is not defined
23:55 < Dragonblade>     at repl:1:2
23:55 < Dragonblade>     at Interface.controlEval (_debugger.js:930:21)
23:55 < Dragonblade>     at Interface.<anonymous> (repl.js:182:12)
23:55 < Dragonblade>     at Interface.emit (events.js:67:17)
23:55 < Dragonblade>     at Interface._onLine (readline.js:162:10)
23:55 < Dragonblade>     at Interface._line (readline.js:426:8)
23:55 < Dragonblade>     at Interface._ttyWrite (readline.js:603:14)
23:55 < Dragonblade>     at ReadStream.<anonymous> (readline.js:82:12)
23:55 < Dragonblade> o.o
23:55 < Dragonblade> if I did it right
23:55 <@maxogden> dont post long code snippets in irc please, use gist.github.com and link to it
23:55 < ccowan> GIST!!!! or PASTEBIN!!!!
23:55 < gkatsev> gist
23:55 < Dragonblade> or google doc I made for the whole IRC *just remembered*
23:58 < Dragonblade> anywho it's in the Google Doc
23:59 < Dragonblade> eh anywho the debugger gives the exact same error
23:59 < Dragonblade> readUInt8 undefined
--- Log closed Thu Aug 23 00:00:08 2012
