--- Log opened Mon May 20 00:00:09 2013
--- Day changed Mon May 20 2013
00:00 < cleos_frey> hi, anyone here use NodObjC module?
00:00 < cleos_frey> I'm stumped how I'd use a callback with a NSEvent object...
00:03 < DarkArgon> window.location?
00:08 < ljharb> window.location.href, and no, that won't force a download, that will just navigate the browser somewhere
00:09 < ljharb> the new location would have to force it serverside
00:11 < Aria> cleos_frey: What about them? You don't generally use callbacks in Cocoa land -- usually you make a delegate.
00:11 < DarkArgon> ah. i misunderstood ya
00:12 < hashset> gah
00:13 < fomatin> hey i have some pretty basic/simple-minded questions. i'm making a portion of my app (this is the real bulk processing) a REST api that has NLP being done in the background in addition to a recommendation algorithm for some specific content which is pre-loaded on new content input rather than on new request. I've seen a lot about Go concurrency but I don't know anything about Go and project structures seem weird to me.
00:14 < fomatin> Will node fit the role for this?
00:15 < cleos_frey> Aria: I'm looking to capture key events globally using the method in this question: http://stackoverflow.com/questions/9345494/register-a-global-hotkey-without-support-for-assistive-devices-enabled
00:15 < fomatin> i'm already using node for the user-facing app. this part is an api that powers a portion of the other app in addition to something for developers/companies - 1 source of data
00:15 < cleos_frey> Aria: it looks like it uses a callback for the 'handler' argument
00:17 < fomatin> any thoughts?
00:18 < deoxxa> sometimes i think about how many cookies i could eat in one sitting
00:20 < nathan7> fomatin: Node is not too optimal for CPU-bound stuff
00:20 < fomatin> hmm ok
00:20 < nathan7> fomatin: What you want to do is spawn a bunch of workers for the CPU heavy shit
00:20 < ningu> for cpu-bound stuff you can spawn processes
00:20 < ningu> yeah
00:21 < fomatin> nathan7: again with the basic questions, what are the best use cases for node?
00:21 < nathan7> fomatin: I/O-bound stuff is what it's built for
00:21 < nathan7> fomatin: but hey, I do literally everything in node
00:21 < fomatin> wait so i could still use node but just in worker processes?
00:21 < ningu> yes, using node worker processes is easy
00:22 < nathan7> fomatin: mhm
00:22 < fomatin> yeah i've used them but only for splitting rest handling loads
00:22 < nathan7> fomatin: it's more about the event loop being blocked for extended amounts of time
00:22 < fomatin> nathan7: but will it be painful at some point
00:22 < fomatin> where i'll regret it
00:24 < nathan7> fomatin: meh, you'll figure out if it works well
00:24 < nathan7> fomatin: I work for Nodejitsu
00:24 < nathan7> fomatin: we do literally everything in node
00:25 < nathan7> fomatin: if it turns out it doesn't work well in node, we write it with something else
00:25 < fomatin> but this is like a huge project
00:25 < fomatin> the main part of the business
00:26 < fomatin> and it's one massive piece
00:26 < nathan7> fomatin: Then figure out what you care about
00:26 < fomatin> so i feel like getting it right from the beginning is best
00:26 < nathan7> fomatin: Speed of some specific piece of code? Benchmark it.
00:26 < nathan7> haha
00:26 < nathan7> Getting shit right from the beginning for *scale*.. that's impossible, imho
00:27 < fomatin> haha ya know what fuck it
00:27 < fomatin> go projects make little sense to me
00:27 < fomatin> i think i'll just go with node
00:28 < deoxxa> get it
00:28 < deoxxa> go with node
00:28 < deoxxa> ha ha.
00:29 < nathan7> I ought to learn Go
00:29 < nathan7> I don't really like it
00:29 < nathan7> but it seems usable
00:29 < nathan7> (Rust is <3 but not mature)
00:29 < fomatin> haha yeah deoxxa was just laughing at it as i read it
00:30 < fomatin> i've been trying to figure out this go project structure
00:30 < fomatin> and also imports and everything
00:30 < nathan7> It's rather crazy
00:30 < nathan7> No dep version management
00:31 < Aria> Just like C. If you want versions, put 'em in the module name.
00:31 < Aria> foo-1, foo-2.
00:31 < nathan7> Yeah.. fuck that noise.
00:31 < deoxxa> ^ this
00:31 < fomatin> well honestly i dont even get file structure
00:31 < nathan7> It leads to large monolithic deps.
00:32 < nathan7> Every dependency becomes a liability
00:32 < deoxxa> just like children
00:32 < nathan7> yup.
00:32  * nathan7 -> zZzZ
00:32 < deoxxa> later!
00:32 < nathan7> tomorrow I will kick ass with fuse4js and dnode
00:32 < deoxxa> oh
00:32 < deoxxa> no
00:32 < deoxxa> man
00:32 < deoxxa> no.
00:32 < ningu> fuse4js??
00:33 < nathan7> also, damn, receiving payments is a pain
00:33 < deoxxa> i implore you, at least take a look at https://github.com/deoxxa/pillion first
00:33 < ningu> as in, like, file systems in js?
00:33 < deoxxa> (instead of dnode)
00:33 < ningu> what's wrong with dnode? :)
00:33 < nathan7> deoxxa: dnode works
00:33 < deoxxa> have you ever tried to read the implementation?
00:34 < nathan7> no
00:34 < nathan7> don't care right now
00:34 < deoxxa> lol
00:34 < nathan7> I need to call methods of 'fs' remotely.
00:34 < nathan7> That's all, really
00:35 < nathan7> deoxxa: if I can expose a bag of methods to a remote, I'm happy
00:35 < s3shs> I have a question about domains.  I'd like to add an accessor to domain.  Would it be bad to assign it to the domain's prototype manually?  How would I inject a function there?
00:35 < ningu> just don't be left holding the bag
00:37  * nathan7 disappears
00:38 < ningu> poof
00:44 < hashset> ningu: well, I appreciate the help and certainly learned a few things.  unfortunately this ajax problem is a real blocker and since I'm downloading images via blob urls copping-out with a window.location.href in the jquery at least gets me a single image
00:46 < ningu> yeah, the window.location.href might be your best bet. do you want your users to download the images or you want to render them on the page?
00:46 < Shayanjm> Does anyone have any experience using Natural?
00:47 < hashset> download them.  right now window.location.href does exactly that, which wasn't expected but it's working
00:48 < owen1> let's say i have an http endpoint /cats that should return json or html, depend if it's an ajax call or not. what the way to do that?
00:48 < owen1> use /cats for html and /cats.json ?
00:48 < ningu> you can do that
00:48 < ningu> or
00:48 < ningu> https://en.wikipedia.org/wiki/Content_negotiation
00:52 < ChrisPartridge> owen1: x-requested-with header
00:52 < owen1> ningu: if i understood that link, i can use the content-type header?
00:53 < AAA_awright> ChrisPartridge: That's not an appropriate header to use for determining what to send in response
00:53 < ericelliott> I released a new version of qconf -- like nconf, only you don't have to think about it. http://ericleads.com/2013/05/qconf-0-1-2-released/
00:53 < cce> owen1: also make sure to include content type requested in "Vary"
00:53 < AAA_awright> It's strictly for logging, maybe security auditing
00:53 < cce> owen1: or, all downstream caches will be messed up badly
00:55 < cce> A downside is that you end up having lots and lots of copies of the page cached, since each variant of the headers a browser sets would be sent to a different cache point
00:55 < AAA_awright> If the cache and server are appropriately programmed, not so
00:55 < owen1> cce: are u talking to me or to AAA_awright 
00:55 < AAA_awright> A client should send Accept and the server should respond with Vary and Content-Location
00:56 < AAA_awright> The Content-Location header says "Hey I'll send you a different resource than what you asked for" and so can be cached accordingly
00:56 < AAA_awright> You might ask for e.g. /image and be sent back /image.jpg or /image.png depending on the Accept header
00:56  * cce thinks ^ is a solid approach.
00:57 < AAA_awright> </image> would be the abstract resource representing a particular image, and the /image.(jpg|png) URLs would represent particular encodings
00:57 < ningu> owen1: you use the Accept: header
00:57 < ningu> Content-type is set in the response
00:57 < ningu> owen1: http://programmers.stackexchange.com/questions/139654/rest-tradeoffs-between-content-negotiation-via-accept-header-versus-extensions
00:58 < owen1> ningu: reading it. thanks!
00:58 < AAA_awright> ningu owen1: That link is somewhat misleading because you use both, it's not a "versus" thing as if you pick one or the other
00:59 < ningu> you don't have to use both
00:59 < AAA_awright> If you have multiple representations they should get different URIs which should be indicated with the Content-Location header
00:59 < AAA_awright> It's not a requirement but neither is Content-Negoation so that's moot
00:59 < ningu> AAA_awright: not everyone does it that way, sometimes you only get the response you want if you set Accept
00:59 < AAA_awright> *Content-Type negotiation
01:00 < ningu> and it's the same url
01:00  * cce pretty much gave up on negotiation
01:00 < cce> due to complications with caching, browser variations, etc.
01:01 < AAA_awright> ningu: ok? We're talking about the way to do it correctly, though
01:04 < owen1> ningu: after reading the stackoverflow thread, it looks like /cats.json or /cats Accept:  application/json both are acceptable.
01:04 < owen1> Accept header might be better, but both are good
01:07 < AAA_awright> owen1: You're supposed to use both
01:08 < owen1> AAA_awright: really?
01:08 < AAA_awright> owen1: Like how I described above, you use Content-Location
01:09 < AAA_awright> You make a request for /cats with an Accept header, and it sends back the resource, with a Content-Location describing where that particular format can be found in the future, e.g. Content-Location: http://example.com/cats.json
01:09 < AAA_awright> Or how I do it, http://example.com/cats?format=application/json
01:10 < AAA_awright> URIs are opaque so there's no 'correct' way to do the URI, except to make them different when they identify different resources, and the same when it identifies the same resource. D'oh. (You'd think that's obvious but sometimes people stick API version numbers in their URIs)
01:13 < AAA_awright> owen1: You might find this useful https://magnode.org/2012/jsonschema-for-updating-content
01:13 < owen1> thanks! reading it
01:26 < donCams> hello
01:27 < donCams> so I have this http://pastebin.com/nZn31SEK
01:28 < donCams> see if strawberry part is not running, everything is ok, but when strawbery is running, it becomes sort of a blocker. what do you think is wrong?
01:32 < Zolmeister> donCams: 10000000000 is too big
01:33 < donCams> i'm trying to replicate queries to mysql table. some tables will have large datasets
01:33 < Zolmeister> donCams: its too big
01:34 < donCams> even if i set the cron interval for those queries to longer, the other jobs are still affected
01:34 < Zolmeister> donCams: my cpu is peged at 100% for the last  minute
01:34 < donCams> so it is hardware-related?
01:34 < donCams> hmmm...
01:37 < cleos_frey> anyone here use 'nodobjc', I asked this before but got disconnected
01:38 < cleos_frey> I'm trying to use a block with NSEvent (to capture keypresses)
01:38 < mscdex> donCams: why are you using this setup to "replicate" queries to a mysql table?
01:39 < cleos_frey> I have: $.NSEvent('addGlobalMonitorForEventsMatchingMask', $.NSKeyDownMask, 'handler', <<< what is my handler, ahh! >>>)
01:48 < Mikicacarica> http://beac9b24.theseblogs.com
01:51 < jdelgado> Thoughts on riak vs mongodb for a large scale, high performance, and ditributed database?
01:52 < brycebaril> jdelgado: use neither? :)
01:53 < hashset> jdelgado: have you looked at Cassanda?
01:54 < brycebaril> riak and mongo are *very* different in terms of core features, I'd suggest stepping back to look at what you need from your storage solution, then choose from the more comparable ones that do what you need.
01:55 < jdelgado> hashset: I'm consider that as well. :)
01:55 < mbecroft> Hi sinclair|nz, nice to meet a fellow kiwi here. I'm in Auckland also. Just playing around with node
01:56 < jdelgado> brycebaril: I absolutely agree, I was just looking to see if anyone had any strong opinions. :)
01:59 < brycebaril> jdelgado: When I've used riak it's been dog slow. Mongo is fast, but has a dark cloud of distrust around it these days.
02:00 < jdelgado> brycebaril: Yeah, i've come to the same conclusion. I think hashset had a good suggestion with cassandra.
02:01  * MitchW uses mongo, can't complain - though my deployment isn't amazingly large
02:02 < jdelgado> MitchW: Yeah, I love using mongo on small stuff, but when things start getting large, sharding, balanacing and redundancy becomes a headache.
02:03 < brycebaril> jdelgado: couchbase is another option you could consider
02:05 < jdelgado> brycebaril: I'll check them out too! Thanks!
02:16 < sinclair|nz> mbecroft: just back online
02:22 < LLckfan> Does any1 know how to stop Shockwave flash from crashing? I have uninstalled both Flash and my browser (Chrome), installed both from a fresh download, and scanned my computer (come up clean). Everything is updated
02:27 <@isaacbw> please stop asking that
02:37 < wtmr> can I update npm itself from a commit?
02:37 < LLckfan> Does any1 know how to stop Shockwave flash from crashing? I have uninstalled both Flash and my browser (Chrome), installed both from a fresh download, and scanned my computer (come up clean). Everything is updated
02:38 <@isaacbw> LLckfan: stop
02:38 <@isaacbw> this isn't a shockwave flash support channel
02:41 < wtmr> isaacbw: is it possible t update npm from the latest commit on github?
02:53 < deoxxa> multi-tenant passport.js - how best do i approach this?
03:26 < merpnderp> If I wanted to submit a patch to connect-mysql to take advantage of a mysql pooling connection instead of a regular mysql connection, would I just add an if test to see if it was a pooling connection and then grab a new connection and free it for every query? https://github.com/nlf/connect-mysql/blob/master/lib/connect-mysql.js
04:08 < Stumbler> when a spawned node process returns, it gets garbage collected automatically right?
04:29 < jazzolina> why the cloud of distrust for Mongo these days?
04:30 < Lorentz> read that as "what's colour of mongo"
04:33 < Lorentz> there was a nice blog post on why to avoid mongodb
04:36 < donCams> there's also a nice blogpost that tells us how to avoid these gotchas and if you actually read mongodb docs you'd know about these gotchas :3
04:40 < jazzolina> Lorentz: any idea where I could find that post?
04:40 < Lorentz> jazzolina: nooooo idea
04:41 < Lorentz> I looked for 5 minutes in my history, can't find it, sorry
04:41 < Lorentz> maybe on my laptop at home...
04:42 < jazzolina> well, thanks anyway -- I appreciate it, I'll keep my eyes open, and google it a bit
04:43 <@konobi> Stumbler: default mode means your data can get corrupted easily
04:44 < deoxxa> lol yeah, the default mode used to be YOLO_FIREANDFORGET
04:44 < deoxxa> these days it's a bit more sane
04:44 < deoxxa> drivers warn you if you don't explicitly tell it what mode to work in
04:44 < deoxxa> (mostly)
04:46 < Stumbler> konobi: I'm just wondering if I should take extra care to free the rather large data objects in my spawned process-  it has the potential to grow exponentially if the objects hang around in memory after the process returns.   Looks like its working okay as is, just a little concerning since I wasn't sure.
05:21 < davidbanham> I'm having exceptions swallowed any time I bind to an event emitted out of propagit. Anyone run into something like this? - https://github.com/davidbanham/swallowed/blob/master/wtf.js
05:24 < Wraithan> Is there something like python's dict.update() in node? 
05:24 < Wraithan> (Or rather, JS) 
05:26 < zomg> Wraithan: what exactly does that do?
05:27 < davidbanham> Wraithan: I'd generally just for-loop if I needed something that did that.
05:27 < Wraithan> davidbanham: right, it isn't hard but it is also something that adds extra code
05:27 < Wraithan> zomg: http://docs.python.org/2/library/stdtypes.html#dict.update
05:27 < Wraithan> dict == associative array
05:28 < zomg> Ah so it replaces certain key values with values from another dict?
05:28 < zomg> There isn't anything for that built in to JS
05:29 < davidbanham> Wraithan: True. There are implementations of things that will do that in libs like underscore, lodash, etc etc. If you wanted to pull in one of those you'd get a handy convenience method for it. You could also just write your own and tack it onto the prototype or access it as a global or something. The code would still be there, but it would make your source prettier.
05:29 < Wraithan> :/
05:29 < mae> yo
05:29 < zomg> Yeah I'd consider using underscore or something like that, it brings quite many convenient functions over
05:29 < zomg> I think you can use _.extend to achieve the same result
05:29 < mae> anyone else use livescript? @zomg adopt livescript and the prelude will give you all that your wildest dreams desires ; )
05:29 < Wraithan> davidbanham: yeah, I tend to avoid super generic toolkits liek underscore et al.
05:30 < mae> <<< builtin to livescript
05:30 < mae> (merge)
05:30 < mae> same as extend
05:30 < davidbanham> A handy rule when coming from languages like Python, Ruby etc is when you ask the question "Is there a method/helper function for this?" The answer is often "No, just write some code."
05:30 < zomg> mae: if I had to use something that compiles into JS I'd rather use ghcjs or fay =)
05:31 < Wraithan> davidbanham: silly rule, rather take the 10 minutes to search, and 5 mins to ask then I know for sure I am not wasting my time and adding extra code
05:31 < zomg> that livescript looks awfully lot like haskell from some parts of it though
05:31 < Wraithan> davidbanham: I catch your drift though. Thanks for answering.
05:31 < davidbanham> Wraithan: Not saying you shouldn't ask, just letting you know that that will often be the answer. I've seen Ruby guys get really frustrated by it in the past until they accept that it's just a different way of doing things.
05:32 < zomg> Yeah the JS core language doesn't have much extras
05:32 < Wraithan> davidbanham: I find neat things sometimes when I ask, which is why I do. I have all sorts of convenience things I like from multiple languages
05:32 < zomg> You would pretty much want to bring in some other lib to add your favorite sugar to it =)
05:33 < davidbanham> Wraithan: Yeah by all means keep asking and exploring, that's the right thing to do.
05:37 < progrock`> man, I wish I could figure a way to get Jekyll templates done in JADE to work, so i can use the same JADE I'm using with express to work on static pages
05:39 < davidbanham> progrock`: Not Jekyll, but Wintersmith is a static blog generator that speaks Jade.
05:39 < mae> @zomg fay is ok and so is ghcjs dont get me wrong i actually contributed some to haskell for a bit.. haskell is a great language.. but livescript retains many of its great features (i.e. partial application, albeit no strong type system)…. why use something inferior to haskell? because well i donno in the web most shit is already written in js and the semantics of js so its nice to be able to reason in the same semantics but just 
05:39 < mae> a higher level language (ie.. livescript is imperative at heart whereas haskell is lazy at heart)
05:39 < progrock`> davidbanham: oh, interesting... Im guessing they are pretty similar?
05:39 < davidbanham> progrock`: I
05:40 < davidbanham> progrock`: I haven't spent enough time with Jekyll to really compare, but I've used Wintersmith on a blog and found it acceptable.
05:40 < mae> time to smoke a GIANT bowl.
05:40 < progrock`> davidbanham: I couldnt imagine them being too different.   Does winersmoth have Stylus support built in.. or do I just gotta 'compile' my stylus to css first/
05:41 < davidbanham> progrock`: Honestly, I run screaming from pretty much all styling tasks, so someone else did the CSS work on that blog.
05:41 < davidbanham> progrock`: Not sure what it does/doesn't support
05:42 < progrock`> davidbanham: dont see it mentioned.. but no biggie... I dont do inline css anyway... and I can make a makefile to do everythign in one shit anyway
05:42 < progrock`> davidbanham: I shall check it out.
05:42 < progrock`> davidbanham: tho, I have an easy enough workaround in Jekyll (just splitting my pages that use tempates into the template code and the actual content in jade
05:45 < progrock`> davidbanham: apparently there is a stylus plugin.. well, I'm sold
05:46 < mae> progrock`: stylus is the shit, i also recommend jade
05:46  * MitchW is a jade fan
05:46 < progrock`> mae: I 100% agree... and am extremely pissed off that both bootstrap and foundation are not in stylus....
05:47 < progrock`> well not pissed off.. just sad
05:47 < mae> yeah
05:47 < mae> not everyone can be enlightened
05:47 < mae> ;)
05:47 < mae> i mean who needs all those curlies
05:47 < mae> (not me)
05:47 < progrock`> I really want to stiuck to stylus.. but it just feels wrong if I;m going to use bootstrap (LESS) or Foundation (SASS)
05:47 < mae> use both
05:47 < mae> for shit you don't write use css
05:47 < mae> for shit you want to modify use stylus
05:48 < mae> you know you can paste css into stylus right?
05:48 < mae> and shorten the format later
05:48 < progrock`> ehhh... the mixins in foundation for example make you want to use all the same
05:48 < mae> true
05:48 < mae> but i'm just saying
05:48 < progrock`> and bootstrap should be getting bettr with their mixins as well
05:48 < mae> its backwards compatible AFAIK
05:48 < mae> you can literally start from raw css
05:48 < mae> and work back
05:48 < progrock`> again, its the mixins primarily
05:48 < progrock`> thats where all the poweris
05:49 < progrock`> otherwise, I agree completely
05:49 < mae> so why don't u start github/progrock/bootstrap-viva-la-stylus
05:49 < mae> ; )
05:49 < mae> j/k i know thats a huge undertaking
05:49 < zomg> You could just write a less -> stylus converter!
05:49 < zomg> ez!
05:49 < progrock`> mae: first off, yeah proobably dont have time.. second bootstrap3 is SOOO different, its not worth it right now
05:50 < mae> zomg: css -> stylus? then we can automate progrocks github contribution lol
05:50 < progrock`> even tho I have never used foudnation, and have used bootstrap quite a bit.. I'm liking foundation... really think I would go with it next round... BUT, again, I want stylus
05:50 < progrock`> tho I suppose SASS has a stylus like syntax (tho thats the "OLD" syntax, which foundation is not written in/... tho I suppose my code could be)
05:50 < mae> ok sharing time, what is the most provocative/interesting programming job you have had so far?
05:51 < owen1> AAA_awright: curl 0.0.0.0:3000/cat-videos?format=application/json  =>  Content-Location: 0.0.0.0:3000/cats.json    I am not sure what I should do now (:
05:51 < progrock`> data visualization engineer :)
05:51 < progrock`> mae, that was to your question
05:51 < mae> progrock`: system architect / nodejs programmer for weedmaps.com
05:51 < mae> medicla marijuana baby!
05:52 < mae> omg typo alert
05:52 < progrock`> mae: mines with novus partners, novus.com .... tho you can see my work at http://nvd3.org
05:52 < mae> thats cool
05:52 < FoxDiller> progrock`: My ISP is called Novus. lol
05:53 < mae> i have heard alot about d3 my colleague won't stf about it
05:53 < mae> i need to learn it ; )
05:53 < progrock`> its amazing
05:53 < progrock`> the creator, Mike Bostock, writes te cleanest JS I;ve eever read in my life.. he'sa  genious
05:53 < mae> cool.
05:54 < mae> this one looks super familiar (bigdesk uses it i think.. open source analytics panel for elasticsearch): http://mbostock.github.io/d3/talk/20111116/pack-hierarchy.html
05:54 < mae> nice tool.
05:55 < mae> has anyone messed around with shadow dom or polymer yet?
05:55 < mae> i really love the concept of shadow dom but i wish jquery would create a backwards-compat shim or something so we could have it in all browsers (i'm sure it will come with time)
05:56 < mae> keep your markup super clean and if you have complex dom structure for an interactive widget, you can hide those implementation details away
06:06 < mae> progrock`: thanks for showing me http://nvd3.org , very cool, maybe we will use it at work
06:20 < w0otness> hi all
06:23 < w0otness> q: using cloud9 ide, if i put my require('express') in a separate common.js and reference them in the main js with var express = common.express then var app = express() doesnt work. 
06:25 < deoxxa> w0otness: that's not a question
06:26 < w0otness> do the require statements have to be in the main.js and not referenced from a common.js?
06:26 < Omid> Hi
06:26 < deoxxa> w0otness: see http://nodejs.org/docs/latest/api/modules.html
06:28 < Omid> is it better to use 'response.writeHead(301, {"Location": "/login/index.html"});'  or 'readstream.pipe(response)' ?
06:28 < Omid> does the first one blocks the event loop when the client is slow?
06:34 < wilmoore-js> w0otness: a simple way to think about it is to realize that when you `require('something')`, you put it into a variable which is "local" to the module. The only way to see that reference in yet another module is to export it.
06:35 < wilmoore-js> w0otness: based on what you wrote, it looks like you should export "express" from your "common.js" module.
06:38 < w0otness> thank you. the uni assignment this is for seems to be having an identity crisis, half the tut is in js, half is in coffeescript.
06:50 -!- mode/#Node.js [+o trevnorris] by ChanServ
06:52 < owen1> i have groups and topics. which url is better?  /group-name/topic-name  or  /group-name?topic=topic-name
06:53 < arnorhs> owen1: which definition of better are you using?
06:54 < owen1> arnorhs: common/conventional
06:54 < arnorhs> owen1: I think for all normal permanent URLs you'll not include a query string
06:55 < nightfly> I prefer the first in almost all cases
06:55 < arnorhs> query string is mostly appropriate when you are doing a search, filtering, ordering etc
06:57 < owen1> nightfly: what if i have / in the group or topic name?
06:58 < nightfly> I'd probably encode it or have a manually chosen url-safe version of the name
07:01 < owen1> nightfly: cool. thanks
07:13 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
07:16 < booyaa> any iisnode users around?
07:23 < [AD]Turbo> hola
07:24 < leichtgewicht> s
07:46 < sambarino> booyaa
07:46 < sambarino>  i am
08:00 < ePirat> Hello, why does req.destroy(); on a http request only on mac os will emit the res.on('end', … event?!
08:01 < ePirat> it doesnt seem to happen on any other os
08:05 < timoxley> ePirat what version of node
08:05 < timoxley> doesn't seem to happen to me
08:05 < ePirat> on linux the latest version from nodejs.org and on mac v0.8.16
08:06 < timoxley> ePirat probably there's why
08:06 < timoxley> you're comparing two different versions of node
08:06 < timoxley> let me try 0.8.16, hang on
08:06 < ePirat> anyway it should be noted anywhere in the docs :P
08:07 < ePirat> req.destroy doesnt seem to be documented at all or I am too stupid to find it
08:07 < timoxley> ePirat it's probably in some change log between 0.8.16 and 0.10.x
08:08 < timoxley> 0.8.16 is quite old
08:39 < brainproxy> stressing setImmediate in various ways, it always seems to "cap out" at ~1000 callbacks per second, then callbacks start stacking up on the event loop, i.e. memory consumption grows continuously
08:40 < brainproxy> does that sound right?
08:46 < swaagie> ok looking for some additional pointer to check, fetching a tarball from the github API with a simple get request
08:47 < swaagie> inside the callback I do a simple writeFile , but buffer content is never written to File
08:48 < swaagie> hell the file is not even created, now my first suspicion was access rights etc 
08:50 < swaagie> but the program is running as root and the tmp module that is used elsewhere in the program is creating files at the same location
09:04 < marlun> We've got a live socket.io server which for some reason fails when there is a burst in visitors. It sits with about 70 visitors and everything is fine but then (because of a newsletter) the visitor count goes up to around 300 and the server just stops responding. We've got it running under 'forever' but forever don't do anything because it does not seem to crash, it just stops doing anything. The socket.io log (set on warnings) only shows: "warn: webso
09:05 < marlun> When we restart the socket.io server it handles the 300 visitors without problem so it seems to be when because of the burst not because it can't handle 300 visitors.
09:12 < testet> aser
09:12 < testet> aser
09:12 < testet> ser
09:13 < testet> awer
09:13 < testet> 32wr
09:13 < testet> 3r
09:13 < testet> 232wr
09:13 -!- testet was kicked from #Node.js by Nexxy [testet]
09:14 < karan> Hi guys, how can I secure(unreadable format) my nodejs code from others?
09:14 < SomeoneWeird> do people not realize they can create channels themselves?
09:14 < SomeoneWeird> you can't
09:14 <@Nexxy> karan, you can't
09:14 < SomeoneWeird> unfortunately 
09:15 < sambarino> karan: port it to c# then use the dll's on your server
09:15 < SomeoneWeird> wat
09:15 < karan> oh.! then anyone can use our code 
09:16 <@Nexxy> exactly!
09:16 < SomeoneWeird> if you are going to give it to people, yes
09:16 < brainproxy> karan: depending on scenario, you could license your code in a way other than MIT
09:16 < brainproxy> or other similar license
09:17 < brainproxy> you could put it under GPLv3 for instance, and have a dual licensing clause that says someone can buy a commercial license from you if they don't want to GPL any derivates they write
09:17 < SomeoneWeird> that's just a bandaid, but you can't do much more than that
09:17 < brainproxy> *derivatives
09:18 < karan> I am impressed by Nodejs, but not this one
09:19 < aandy> karan: it's not a compiled language, no 
09:20 < karan> but I thought, we can have chance to encode kind of things
09:20 < aandy> you can obfuscate
09:21 < sinclair|nz> Nexxy: i have a problem
09:21 < sinclair|nz> Nexxy: why is writing node software so difficult :(
09:21 <@Nexxy> sinclair|nz, it's not
09:22 < sinclair|nz> it is tho
09:22 < brainproxy> karan: you could easily use uglify-js to obfuscate
09:22 <@Nexxy> sinclair|nz, I see
09:22 < brainproxy> but keep in mind that someone can always just prettify it and figure it out if they have enough motivation
09:22 < aandy> karan: if this is what you want, http://www.google-analytics.com/analytics.js you can do that. it can make your code very un-readable, but it's basically still there. it'll remove variable names and such though
09:22 < sinclair|nz> Nexxy: do you really?
09:22 < aandy> what brainproxy said
09:23 <@Nexxy> sinclair|nz, I see what you're saying
09:23 < sinclair|nz> Nexxy: so, i am writing some socket code, that handles messages between a client and a server
09:24 < AAA_awright> owen1: Uhhhhhh
09:24 < karan> by using uglify-js, we can hide few things atleast .! isn't it ?
09:24 < arnorhs> how do you manage which users can publish a package in npm?
09:24 < waseen> HI
09:24 < arnorhs> the author field is just decorative, right?
09:24 < aandy> karan: is it browser code or server side code?
09:24 < sinclair|nz> so, it should be fairly trivial, but once i have the code doing what i want it to do, i then want to drop in some exception handling, which is fine, and then i run some units on the code, and it fails various edge cases
09:24 < AAA_awright> owen1: I'm not sure what you're doing
09:24 <@Nexxy> arnorhs, https://npmjs.org/doc/owner.html
09:25 < aandy> you can obfuscate both, but do realize that a node server isn't visible unless you publish your code somewhere
09:25 < sinclair|nz> Nexxy: then i cater to these edge cases, and you know what, i can't read my code anymore
09:25 < karan> <@aandy> server side code
09:25 < sinclair|nz> the units says it works, but looking at the code i just wrote, i can't see the forest for the trees
09:25 < aandy> okay, how do you imagine people get access to it then?
09:25 <@Nexxy> sinclair|nz, perhaps you should use domains and decouple your lib from the socket
09:25 < sinclair|nz> um, domains?
09:25 < arnorhs> Nexxy: thanks. so the author part has nothign to do with it, right?
09:25 <@Nexxy> arnorhs, right!
09:26 < waseen> Hi all
09:27 < waseen> Am getting this error while i load the page which is running on node
09:27 < waseen> Uncaught Exception  TypeError Not a string or buffer
09:27 < sinclair|nz> Nexxy: you mean, forking the process and running code in a separate application domain?
09:27 <@Nexxy> sinclair|nz, no I mean the domain module
09:27 < sinclair|nz> that's what im looking at, i think
09:27 < waseen> any one can tell mw how this can be resolved
09:27 < waseen> ?
09:27 <@Nexxy> http://nodejs.org/api/domain.html
09:27 < sinclair|nz> http://nodejs.org/api/domain.html
09:27 < sinclair|nz> yes, im looking at this
09:27 <@Nexxy> i win!
09:28 < aandy> karan: client side code will be visible - as in, browser <script /> include of some source, to be run in the users browser. code which runs on your server and produces html/json/etc output, sending it to the client - will not be "visible" (unless you publish your server code on github or something)
09:28 < sinclair|nz> Nexxy: so it runs code in a child_process, and if that process dies, the outer most app doman can handle the process accordingly 
09:29 < sinclair|nz> Nexxy: i get the concept, but it doesn't help me understand the code i have just written
09:29 < aandy> it will be visible to the server, if you log into that. is that what you're worrying about?
09:29 < sinclair|nz> i just endlessly find myself refactoring it in order to make sense of it
09:29 < karan> aandy: If I host my application on client machine, the client can easly understand our software, 
09:29 < sinclair|nz> Nexxy: writing good node software is hard
09:29 <@Nexxy> I don't feel that way at all
09:30 < aandy> karan: i don't follow
09:30 <@Nexxy> but there are a lot of things out there to help
09:30 < sinclair|nz> Nexxy: its harder than i am used to
09:30 < waseen> "Uncaught Exception  TypeError Not a string or buffer " wat might be the probable solution to fix this
09:30 < waseen> ?
09:30 < sinclair|nz> Nexxy: well, i have looked at some options out there, like most things i find, they only solve half a problem
09:30 <@Nexxy> so use more than one thing
09:31 < sinclair|nz> Nexxy: not really a fan of doing that
09:31 <@Nexxy> lol
09:31 < waseen> hi __sri
09:31 < sinclair|nz> i think at the root of my issues is I havent really identified all the things i need
09:31 <@Nexxy> well I'm not sure what else I could offer as help w/o you being a little less vague
09:31 < AAA_awright> I'm trying to figure out what version of v8 Node.js requres
09:32 < sinclair|nz> Nexxy: i drew a picture, can i show you?
09:32 <@Nexxy> sure
09:32  * sinclair|nz likes drawing pictures
09:32 < sinclair|nz> 1 sec
09:32 < karan> aandy: sorry for the confusion, In Java we have "jar", in .Net "DLL" kind of things. Likewise can we do in NodeJs?
09:33 < sinclair|nz> Nexxy: http://imgur.com/NVjkDCC
09:33 <@Nexxy> I uhh...
09:33 < sinclair|nz> i want this, where each action is a promise / task
09:33 < aandy> karan: no. think of your use case instead. users can't see server side code unless you give it to them. you can obfuscate as per what i and brainproxy said earlier
09:33 < sinclair|nz> and the output from one action is the input to another, 
09:34 <@Nexxy> sinclair|nz, sounds like you want streams
09:34 < sinclair|nz> where i can orchestrate the async operations in a fashion similar to this
09:34 < aandy> and jar is a bad example. i've decompiled quite a few in my day :)
09:34 < sinclair|nz> Nexxy: well, not really, each Action is asynchronous 
09:34 <@Nexxy> so are streams usually
09:34 < karan> aandy: thanks for your suggestion, I'll try this.
09:34 < waseen> Uncaught Exception: TypeError: Object #<Obje ct> has no method 'castArray'
09:34 < sinclair|nz> Nexxy: and im really piping messages, not raw data
09:35 < aandy> .net is an even worse example as that is "scripted". it's actually IL, which is even easier to "decompile" than jar
09:35 < sinclair|nz> which im sure is possible
09:35 < aandy> inheritly nothing is safe. compiled languages are more difficult, java and .net are way less
09:35 < Ritzton> I am sorry would you know how with ejs to escape html but to replace \n by <br /> ?
09:36 < sinclair|nz> Nexxy: most async libraries i find give me a bit of sugar in terms of composition operations, but lack at helping me make decisions post async operation
09:36 < zomg> karan: you just put a clause in your contract with the client that any misuse of your code will result in you suing them for everything they own ;)
09:36 < sinclair|nz> Nexxy: i mean, in principle, this should be easy, but you wouldn't know it looking at my code :(
09:37 < karan> Thanks guys.
09:37 < sinclair|nz> Nexxy: im such a nodejs noob :(
09:37  * sinclair|nz goes and cries in the corner
09:38 <@Nexxy> sinclair|net, it's ok it will get easier
09:38 <@Nexxy> sinclair|net, http://www.youtube.com/watch?v=CmyUkm2qlhA
09:40 < sinclair|net> Nexxy: perhaps as the platform matures, and i get a clear mental picture of all the common async ops i am likely to encounter, and can plan for them, rather than fumble around adjusting my code to each edge case i discover. 
09:40 < sinclair|net> oh its not that bad
09:40 < sinclair|net> Nexxy: at least i have TypeScript
09:41  * Nexxy back to work
09:41 < sinclair|net> bye
09:43 < Ritzton> nobody is using EJS here ?
09:45 < SomeoneWeird> i am
09:46 < sinclair|net> Nexxy: https://www.youtube.com/watch?v=LRkLQw5rLy8
09:46 < Ritzton> someoneWeird> how do you deal when you have a text with "\n" inside and you wanna display the text with new line ?
09:47 < SomeoneWeird> <%= variable.replace('\n', '<br>'); %> ?
09:47 < Ritzton> someweird> this is working for you ?
09:47 < SomeoneWeird> why wouldn't it?
09:50 < Ritzton> someweird> because ok it converting \n to <br> inside the text but after <br> tag is converted also to 
09:50 < Ritzton> &lt;br /&gt; so it does not work
09:50 < SomeoneWeird> <%- variable.replace('\n', '<br>'); %> ?
09:50 < SomeoneWeird> <%- instead of <%=
09:51 < Ritzton> I could do <%- variable.replace('\n', '<br>'); %> but now it is not escaping anymore so xss injection possible...
10:00 < Ritzton> nobody would have any solution to escape html with EJS but not <br> tags ???
10:08 < aandy> well, uh.. iterate over your variable split at '\n', write with <%= %> and put <br /> at the end of every iteration?
10:09 < aandy> var lines = variable.split('\n'); for (var i = 0, l = lines.length; i < l; i++) { <%= line[i] %> <%- <br> %> } (substitute with actual ejs syntax, i'm not familiar with it)
10:10 < aandy> but it sounds like your issue should be solved some place else. this is not a nice solution
10:11 < aandy> store the escaped html in your db, or replace \n with <br> when you save the data?
10:18 < AAA_awright> `make install` isn't installing /usr/local/include, anyone know what's going on here?
10:21 < nathan7> aandy: ffs, don't store HTML in DBs unless it's your actual goal to store HTML
10:23 < ckknight> databases should handle data, html is markup which is a representation of data
10:23 < ckknight> the only good time to store HTML in a DB would be for user-generated content, imo
10:24 < Industrial> ckknight: hey :D
10:24 < ckknight> hey indy
10:24 < ckknight> how're you?
10:25 < Industrial> pretty good, you?
10:25 < ckknight> quite well
10:25 < ckknight> Industrial: this is what I've been working on: http://ckknight.github.com/gorillascript/
10:26 < nathan7> Holy shit, that's you?
10:26 < nathan7> I've been looking at GorillaScript
10:26 < nathan7> Interesting experiment
10:26  * ckknight waves at nathan7
10:27 < ckknight> nathan7: feel free to chat me up about it.
10:31 < aandy> nathan7: i'm not
10:31 < Ritzton> aandy> store html data in the db isnot a nice solution too, replace \n when data saving is not a solution because using <%= %> will still transform it, your first solution will work I think, but I dont know too if it is the best solution
10:31 < aandy> personally i escape the other way around, never using html from users
10:31 < aandy> i was commenting on his problem
10:32 < Ritzton> aandy> how do you know when your user is making a new line ?
10:33 < Ritzton> I dont want to use html from user, just to turn \n into <br /> and not espace this tag
10:34 < nathan7> Ritzton: Loop through the split string
10:34 < sinclair|net> Nexxy: if you get a chance, watch that vid i sent you, its worth a watch, its interesting their explanation of the xrootd distributed stuff, very cool
10:34 < aandy> nathan7: you mean what i said ? ;)
10:34 < nathan7> aandy: Yep!
10:34 < nathan7> aandy: It's a brilliant solution
10:34 < aandy> Ritzton: i don't know about ejs, as i'm not familiar with it. personally i use markdown
10:35 < aandy> for comments
10:35 < nathan7> EJS is a templating, Markdown is a markup format
10:35 < nathan7> *a templating lang
10:35 < nathan7> But yeah, Markdown would nicely solve this too
10:36 < aandy> i mean i generate the html from markdown, i don't do .replace('\n', '<br>'). i store markdown, as per your worry earlier :)
10:36 < Industrial> ckknight: I'm using libescript mosly these days
10:36 < ckknight> Industrial: livescript?
10:36 < Industrial> livescript even, yeah
10:36 < ckknight> okay
10:37 < ckknight> well, take a look at GorillaScript, at least
10:37 < Industrial> yea will do :D
10:37 < Ritzton> aandy> finaly I dont know how to make your first solution working => % var lines = variable.split('\n'); for (var i = 0, l = lines.length; i < l; i++) { <%= line[i] %><%- <br /> %> } %> ???
10:38 < aandy> me neither, the idea being to loop through your '\n' splitted input, and write your data html escaped, and append a nonescaped BR tag at the end. how you do that in ejs i wouldn't know
10:47 < Ritzton> aandy> alright thank's I manage to solve the problem this way => <% partenaire.description.split('\n').forEach(function(line){ %><%= line %><br /><% }) %>
10:48 < Ritzton> I think there is no better way
10:59 < ome> With https, how can I pass a query string? I know that the post data should be written to to the body of request.
11:06 < sinclair|net> oh god, i hate coding nodejs
11:06 < sinclair|net> oh god, i hate coding nodejs
11:06 < sinclair|net> ^ was me trying to rerun a node prog
11:07 < booyaa|foo> sinclair|net: lolwut?
11:07 < sinclair|net> ah this is just crazy, 
11:07 < sinclair|net> trying to do something that would otherwise be trivial and efficient in another language, is making me want to throw my computer out the window in nodejs
11:08 < sinclair|net> i havent been this frustrated coding in a long time
11:08 < Havvy> What are you trying to do?
11:08 < FoxDiller> sinclair|net: I'm having that issue right now with trying to store sockets in an array.
11:08 < sinclair|net> FoxDiller: im doing sockets also
11:08 < sinclair|net> nodejs is "not" for beginners
11:09 < FoxDiller> Nope.
11:09 < FoxDiller> I <3 nodejs.
11:09 < FoxDiller> Just sometimes blown away how something so simple can go so wrong.
11:09 < FoxDiller> lol
11:09 < sinclair|net> and it should be kept away from people who have not had at least 10 years of software under their belt
11:09 < ome> Are you guys using socket.io by any chance?
11:09 < booyaa|foo> heh
11:09 < FoxDiller> Nope.
11:09 < sinclair|net> ome: no
11:09 < Havvy> sinclair|net: I haven't had 10 years of software under my belt.
11:09 < ome> Good.
11:09 < ome> Cause that is one miss of an undocumented code.
11:10 < sinclair|net> Havvy: i have been developing software since 1994 professionally, and unprofessionally since 1984
11:10 < FoxDiller> I'm just trying to accurately keep track of my sockets on my server; and failing horribly.
11:10 < sinclair|net> and i am having a hell of a time getting node to work
11:10 < sinclair|net> it is not simple
11:10 < Havvy> I picked up my first programming book seven or eight years ago.
11:11 < Havvy> Granted, it was a book on JS.
11:11 < sinclair|net> i do not care what anyone here says, node is the absolute WORST thing to code on
11:11 < Havvy> Then quit programming in Node.
11:11 < sinclair|net> WORST
11:11 < sinclair|net> Havvy: im not one to give up
11:11 < SomeoneWeird> then go code in something else
11:11 < sinclair|net> but i am having a small rant
11:11 < Havvy> Not all programming environments are good for all purposes.
11:12 < sinclair|net> Havvy: i am trying to get node doing what it was designed to do
11:12 < SomeoneWeird> which was?
11:12 < sinclair|net> scriptiable network services
11:12 < sinclair|net> and it f**king sucks
11:12 < sinclair|net> literally, it sucks
11:12 < sinclair|net> painful
11:12 < sinclair|net> just painful
11:13 < ome> 'scriptable'.
11:13 < sinclair|net> ome: whatever
11:13 < sinclair|net> still sucks
11:13 < ome> Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
11:14 < sinclair|net> ome: its a lie
11:14 < FoxDiller> I'm happy with NodeJS personally, I just think I am missing something with socket storage.
11:15 < sinclair|net> i dont know what everyone else is writing, but this rough as guts platform does not make writing robust software easy at all
11:15 < ome> Nothing 'scriptable' there. I think if you want to write a scriptable network service, you are better off with something that comes with an inbult scripting engine. Qt is a good choice.
11:16 < booyaa|foo> sinclair|net: maybe it's time to go find another language? if this one's not working out. seriously if i got this angry about a language i would find soething else
11:16 < sinclair|net> booyaa|foo: nah, i don't give up
11:16 < Havvy> To be honest, I'm not seeing the 'robust' either.
11:16 < booyaa|foo> then dude, internalize
11:16  * sinclair|net gets angry
11:16 < Havvy> But then, making something robust in any language is 'hard'.
11:17 < sinclair|net> well why are people actually praising nodejs? i admit it has a lot of promise, but at this stage, its making my eyes bleed
11:17 < ome> One thing Node.js is not built for is, copy-paste, and I love that.
11:19 < sinclair|net> ome: that is a terrible reason to like it
11:19 < sinclair|net> i have such a conflicted love hate relationship with node
11:20 < Havvy> "it has a lot of promise" --- is that an intended pun?
11:20 < sinclair|net> maybe
11:20 < ome> sinclair|net: You would say, but truth is no-one likes to work with spaggathymess of others.
11:20 < sinclair|net> ome: what?
11:21 < ome> s/spaggathy/spaghetti/g
11:21 < Havvy> sinclair|net: Maybe you could use Vert.x?
11:21 < sinclair|net> calling javascript on node anything other than spaghetti is crazy
11:21 < ome> Javascript on Node is incorrect. Node is Javascript.
11:22 < sinclair|net> ome: getting pretty close to ignore mate
11:22 < ome> or a JavaScript Engine, to be more accurate.
11:22 < sinclair|net> pretty damn close
11:22  * sinclair|net inches closer to that ignore button
11:22  * ome shrugs
11:22 < Havvy> It's a button on your computer?
11:22 < leichtge_> sinclair: where is that ignore button?
11:23 < Havvy> leichtge_: /ignore nick  and|or /silence nick
11:23 < sinclair|net> ^
11:23 < leichtge_> Oh! awesome os /ignore sinclair|net will stop the TS talk?
11:23 < leichtge_> Lets try it out.
11:23 < sinclair|net> feel free
11:23 < Havvy> Unless there's a flooder and I have voice or lower, I never use /ignore
11:23 < sinclair|net> TypeScript is the only thing preventing me from throwing node in the trash
11:24 < leichtge_> Is silence better?
11:24 < sinclair|net> Havvy: vert.x looks interesting
11:24 < Havvy> leichtge_: It really depends on the client. I can never keep track of which one is client based and which one is server based.
11:24 < Vbitz> what's the best way to handle 64bit int's in nodejs
11:24 < leichtge_> :D
11:25 < ome> There is a few type of ignorance, one is as a result of fanboism. I am pretty sure if microsoft was to realse brainfuck.net, there would be a lot people adovacting that how a pragmatic solution it is.
11:25 < Havvy> Vbitz: A quick search gives me https://github.com/broofa/node-int64
11:25 < sinclair|net> ome: nothing to do with it
11:25 < sinclair|net> ome: if there was a better open source solution, i would use that instead
11:26 < Havvy> sinclair|net: Use Vert.x. If you are running into the same issues, your problem is with the environmental model.
11:26 < sinclair|net> ome: and i do not want this to turn into another TS argument, its boring and dumb
11:27 < Havvy> And yeah, the issue is not at the level language.
11:27 < sinclair|net> Havvy: well, what i really really wish i had, was a IL compilation target
11:27 < sinclair|net> Havvy: and i had Roslyn
11:27 < Havvy> IL?
11:27 < sinclair|net> Havvy: and i could write C# and compile it to a nodejs profile
11:27 < sinclair|net> that would be sweet
11:28 < sinclair|net> Havvy: the problem i have with node is that you have to be a rocket scientist to use it safely
11:28 < FoxDiller> I just wish I had breakpoints in NodeJS with hover varible inspect.
11:28 < ome> sinclair|net: The only reason that you need TypeScript is because you're not thinking in Node.js and trying to use a chainsaw like a bowsaw isn't going to be any helpful at all.
11:28 < sinclair|net> ome: please get a clue
11:28 < sinclair|net> please?
11:29 < Vbitz> Havvy: useful thanks 
11:29 < Havvy> ome: Once again, this isn't at the language level -- oh which typescript and javascript are pretty much equivalent -- it's at the environmental level.
11:30 < sinclair|net> ome: i am incredibly tired of explaining why i use TS, if nothing i have said in the past has given you insights into why i use it over javascript, nothing i can say now will get you understanding why someone would opt for it. so please just go away
11:30 < sinclair|net> just utter fail
11:31 < sinclair|net> ffs, 
11:31  * sinclair|net does grow tired of JS idiots
11:31 < zomg> YOU MUST BE AN IDIOT BECAUSE YOU LIKE SOME OTHER LANGUAGE THAN JAVASCRIPT!
11:31 < zomg> ;>
11:32 < sinclair|net> zomg: there are some really smart people using JS
11:32 < sinclair|net> and then there are people like ome
11:32 < zomg> hehe
11:32 < Havvy> There are also really smart people using Java, C++, and PHP.
11:33 < ome> sinclair|net: When I joind the room, you were just talking shit about JS and didn't mention a single reason why you're using TS. Don't make assumptions idiot.
11:33 < sinclair|net> Havvy: anyway, i think ive had my rant, 
11:33 < sinclair|net> ome: ignored
11:33 < ome> As if I care.
11:33 < sinclair|net> Havvy: back to node i guess
11:34 < Havvy> G'luck.
11:34 < FoxDiller> Oh, I figured out one of my socket storage problems, you can't return from inside a forEach(function() {}), ha, that's a duh.
11:35 < FoxDiller> Onward.
11:36 < sinclair|net> Havvy: how do you manage complex callback logic?
11:36 < Havvy> By putting them in promies or events.
11:36 < sinclair|net> Havvy: everything?
11:36 < Havvy> Anything that's more than two levels deep.
11:36 < leichtgewicht> ome: /ignore is very effective!
11:37 < Havvy> Your mongo example, would be better done as promises.
11:37 < sinclair|net> Havvy: my mongo example?
11:37 < Havvy> Or was that somebody else's mongo example?
11:37 < sinclair|net> there is another sinclair floating around
11:38 < sinclair|net> Havvy: i guess what i was is dynamic async orchestration (if that is the correct term)
11:38 < sinclair|net> *want
11:38 < Havvy> Yeah...that phrase means nothing to me.
11:39 < sinclair|net> Havvy: you know in code, you manually write callbacks and use things like async etc
11:39 < sinclair|net> Havvy: that would be "static orchestration" as it is unchanging
11:39 < arsdmthe> ???
11:40 < sinclair|net> so, a dynamic orchestration would allow you shuffle things around at runtime
11:40 < sinclair|net> Havvy: a picture http://imgur.com/NVjkDCC
11:41 < sinclair|net> Havvy: in this diagram, there are two primitives, a Action, and Condition 
11:41 < Havvy> Yeah, each 'condition' would be an event for me.
11:41 < sinclair|net> right, and from that event, you may invoke additional Actions / Operations
11:41 < sinclair|net> Action -> Asynchronous Operation
11:42 < sinclair|net> Condition -> An event callback
11:42 < arsdmthe> event == zction change
11:42 < arsdmthe> *action
11:43 < sinclair|net> Havvy: anyway, i am working against protocol X, and it requires i send the server data, and it response 
11:43 < sinclair|net> *responds
11:43 < sinclair|net> based on the response i get, i then need to issue varying other requests back to the server
11:43 < Havvy> Do you know the IRC spec?
11:43 < sinclair|net> Havvy: yes
11:44 < Havvy> Can we use that as the protocol then?
11:44 < sinclair|net> something like this would be idea for modelling some automated bot responder
11:44 < sinclair|net> sure
11:45 < Havvy> You send a JOIN event, let's say, and it sends back a response of who is in the room and the topic in various messages.
11:45 < sinclair|net> Havvy: the innards of the IRC protocol are pretty much taken care of in this particular example, and we are a abstraction level up where we want to model interactions between client and server
11:45 < sinclair|net> the industry term for this is "workflow"
11:46 < sinclair|net> so, i am trying to write something like this
11:47 < arsdmthe> i love bots : what protocol sinclair|net  ?
11:47 < sinclair|net> ideally, you could dynamically swap in workflow nodes at run time to get varying behaviour
11:47 < sinclair|net> arsdmthe: im not writing a bot, rather i am trying to automate OS tasks remotely
11:48 < sinclair|net> arsdmthe: i send commands to a server, it does a job, it returns information about the operation
11:48 < Havvy> sinclair|net: Such as having the ability to add and remove a factoid system?
11:48 < sinclair|net> Havvy: sure
11:49 < arsdmthe> i know you are not a bot sinclair|net ;) 
11:49 < sinclair|net> Havvy: the idea tho would be to be able to declarative model workflow (in xml or json), just that i can pass the thing this model and have it do work
11:50 < sinclair|net> Havvy: i've written such things in other languages, but in node, i struggle getting to place where i feel comfortable moving up an abstraction
11:51 < Havvy> Given a suitable event system, you could have an object that adds a workflow by adding the necessary event listeners, and give it a tearDown method that then removes the event listeners when the workflow is no longer needed.
11:51 < sinclair|net> workflow is just a name
11:51 < sinclair|net> actions would have names - "action a", "action b"
11:51 < sinclair|net> and the declarative model would be something like...
11:52 < sinclair|net> action a -> action b -> condition a -> action c -> action d and so one (encoded in json most likely)
11:53 < sinclair|net> Havvy: where an action might look like...
11:53 < sinclair|net> var action = {
11:53 < sinclair|net> name : "action a",
11:53 < nathan7> ..are you defining a programming language in JSON?
11:53 < sinclair|net> delegate : function() {} 
11:53 < sinclair|net> }
11:53 < sinclair|net> nathan7: no, i wouldn't say that
11:54 < arsdmthe> you waste time with this model of workflow sinclair|net do  it functional
11:54 < nathan7> sinclair|net: http://www.defmacro.org/ramblings/lisp.html
11:55 < sinclair|net> nathan7: different concept
11:56 < nathan7> sinclair|net: see the XML Reloaded section
11:56 < sinclair|net> yeah, i see it
11:56 < sinclair|net> nathan7: this has more to do with process orchestration and modelling than what this article describes
11:56 < nathan7> mkay
11:57 < sinclair|net> nathan7: i suppose another way to put it is, making the system do all the callback dirty work so i can focus on real work (like writing actual software)
11:57 < Havvy> sinclair|net: I think I'm out of my depth here. Sorry.
11:59 < sinclair|net> Havvy: well, everyone gets Input and Output right?
12:00 < sinclair|net> Input goes in, and you get Output out the other side
12:00 < Havvy> Yes.
12:00 < sinclair|net> so....
12:00 < sinclair|net> [input] - [action] - [output]
12:00 < sinclair|net> in js terms, input is function arguments, and output is passed back in the callback
12:01 < sinclair|net> (in other languages, output would be the return statement)
12:01 < sinclair|net> Havvy: cool ?
12:01 < Havvy> Yes.
12:02 < sinclair|net> so..... in a orchestration setup, you would have some orchestrator that automatically passing the [output] from one action into the [input] of another
12:02 < sinclair|net> so....
12:02 < sinclair|net> [input] - [action] - [output]  -[orchestrator] -  [input] - [action] - [output]
12:03 < sinclair|net> and so forth
12:03 < arsdmthe> functional ..
12:03 < sinclair|net> Havvy: note that you are manually doing this when you write code
12:04 < sinclair|net> Havvy: a workflow / orchestration tech would basically model "the process" and automatically call the functions for you
12:05 < sinclair|net> the benefit here is that you get the ability to dynamically swap in [actions] at runtime, as well as have a declarative model for what your program is actually doing
12:05 < arsdmthe> add more steps  is wrong
12:06 < sinclair|net> from the programmers perspective, they spend their time writing in the context of an action, and only that action
12:06 < sinclair|net> and actions "should not know about other actions"
12:07 < sinclair|net> all a action knows is the data is has been passed, and the type of thing it should return
12:07 < Havvy> Sounds like a library that needs to be written at this point.
12:08 < sinclair|net> there is one more thing
12:08 < sinclair|net> [input:type] -> [action] -> [output:type]
12:08 < sinclair|net> so, the orchestrator should be able to validate a model to ensure this is not allowed
12:09 < arsdmthe> you talk about abstraction but refuse to use it sinclair|net funny
12:09 < robertkowalski> hi
12:09 < Havvy> sinclair|net: You have a well defined language. Write a language that implements it.
12:09 < Havvy> Err, library
12:09 < sinclair|net> [input:string] -> [action] -> [output:string] -> [o] -> [input:number] -> [action] -> [output:number] ---- this would be invalid
12:09 < Havvy> library that implements it.
12:10 < sinclair|net> Havvy: this is where TS comes in
12:10 < sinclair|net> with TS, i can annotate input and output types, and use that to validate a model
12:10 < sinclair|net> Havvy: im not writing a language tho
12:10 < sinclair|net> this is not a language
12:11 < Havvy> It has all the trappings of a language.
12:11 < sinclair|net> Havvy: it has all the trappings of http://en.wikipedia.org/wiki/Workflow_engine
12:11 < sinclair|net> well, excluding the document related stuff
12:12 < FoxDiller> Opinion Request: Is it better to send a broadcast message to all clients, letting that update the senders client -or- broadcast to all clients EXCEPT the sender and have the senders client update from the sending of a command?
12:12 < arsdmthe> state machine is enough more is bloat
12:13 < sinclair|net> Havvy: if anything tho, this is a implementation (clone) of the largely ignored windows workflow foundation
12:13 < mscdex> state machine needs moar megahurtz
12:13 < sinclair|net> Havvy: it was so ignored, i didn't use it
12:13 < arsdmthe> no mscdex 
12:14 < sinclair|net> Havvy: however, if you think about synchronous operations, workflow makes no sense, but in a asynchronous node like setup...it makes perfect sense 
12:14 < sinclair|net> Havvy: anyway, ill stop ranting
12:15 < sinclair|net> Havvy: good reading http://en.wikipedia.org/wiki/Orchestration_%28computing%29
12:15 < sinclair|net> Havvy: in some respects, it would be nice to write entire node programs in each action
12:16 < Havvy> Make a module an action and that part is done. ;)
12:16 < sinclair|net> Havvy: you know, express() middleware is basically a linear version of this concept
12:17 < sinclair|net> Havvy: but with express() you have the middleware working out if it should call next() or not
12:17 < sinclair|net> Havvy: in a "good" design, express() itself should be doing the orchestration 
12:17 < sinclair|net> just another reason i care not for express
12:18 < sinclair|net> but anyway, back to node
12:18 < bubo> What is the best or a good module for running cron jobs.. or just calling function every xx minutes
12:19 < sinclair|net> bubo: setInterval () ?
12:19 < bubo> that will restart when I restart the app
12:19 < sinclair|net> setTimeout(function() {} , delta) 
12:20 < sinclair|net> where delta is computed from a cron expression?
12:20 < sinclair|net> Havvy: also good reading http://en.wikipedia.org/wiki/Control_theory
12:27 < sinclair|net> Havvy: at my last job, i was building something similar
12:28 < sinclair|net> Havvy: in that scenario, it was C#, and relied heavily on being able to run distributed transactions across many Actions
12:29 < sinclair|net> so, when a orchestration process started, it would start a distributed transaction scope, for which all actions called there after would being part of that scope
12:30 < sinclair|net> any data modifications, i was able to have the orchestrator "rollback" changes
12:30 < sinclair|net> Havvy: many benefits to such a setup
12:31 < Havvy> Yeah. I know nothing like that in JS or Node.
12:32 < sinclair|net> Havvy: well, in C#, you have .net, and .net handles all the complex infrastructural stuff like distributed transactions
12:32 < sinclair|net> so is really wasn't that bad to write
12:37 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * a1cb52a : darwin: task_info() cannot fail - http://git.io/HoU2Kw
12:46 < gabrielstuff> hello there
12:46 < guest915> greetings.
12:46 < gabrielstuff> anyone got experiences with req.headers['x-hub-signature'] signature verification ?
12:46 < gabrielstuff> I'm getting crazy :)
12:47 < gabrielstuff> using the Facebook push API.
12:47 < guest915> gabrielstuff: what seems to be the difficulty?
12:47 < gabrielstuff> nothing
12:47 < gabrielstuff> apparently
12:47 < gabrielstuff> taking a body post hmac it, and compared
12:47 < gabrielstuff> but it fails
12:47 < gabrielstuff> ... and I'm wondering how to find out
12:47 < gabrielstuff> where the hcmac could failed
12:51 < gabrielstuff> the code is quiet straight forward : https://gist.github.com/gabrielstuff/5612023
12:51 < gabrielstuff> but it fail…
12:52 < r1card> Is there a convention for naming classes when instead of one mutable class I have Foo, FooReader and FooBuilder
12:53 < Vbitz> r1card are you a java programmer by chance
12:53 < r1card> Vbitz, from time to time
12:53 < aandy> gabrielstuff: link doesn't work
12:53 < gabrielstuff> sorry wrong link : https://gist.github.com/gabrielstuff/5612030
12:54 < aandy> isn't it just oauth?
12:54 < aandy> or something else?
12:54 < Vbitz> r1card I kind of guessed, but there's no real convention in js aside from caps first letters and camalCase. if you need more guidance then alot of companies put out there style guides
12:55 < _noskill> btw thanks isasha, your dll are working ~o~
12:55 < r1card> Vbitz, thanks
12:55 < _noskill> wrong channel o/
12:56 < gabrielstuff> nothing to do with oAuth
12:56 < gabrielstuff> it is bare basic sting comparison
12:56 < gabrielstuff> no Oauth involved
12:57 < aandy> from other google hits it seems the key is derived from the json
12:57 < aandy> that seems rather odd
13:00 < gabrielstuff> ?
13:00 < gabrielstuff> sandy what do you mean 
13:00 < gabrielstuff> ?
13:01 < aandy> i'm just trying to figure out what protocol it is. pubsub apparently. your sig should be correct. hex of sha1 hmac of body, so dunno
13:02 < aandy> not sure if you need to do the json part
13:02 < aandy> try to do it on just the data
13:03 < aandy> "The signature MUST be computed using the HMAC algorithm [RFC2104] with the request body as the data"
13:25 < gabrielstuff> sandy, the data is a json object
13:25 < gabrielstuff> so I need to stringify
13:25 < gabrielstuff> I think
13:27 < meatshake> hey! I've got a quick question about require(), that i've been trying to wrap my head arround..
13:27 < meatshake> when I try something like var foo =  require('./foo')(bar),  node says foo is undefined
13:27 < meatshake> anyone know why?
13:28 < meatshake> it works when i omit the (bar) part
13:31 < cyberalien> probably you didn't export it as function correctly. type node, then require('./foo') and see what it shows
13:31 < cyberalien> if it shows "function" (without quotes) then it should work
13:35 < meatshake> ok thanks, ill try and see what it says
13:36 < aandy> gabrielstuff: that's not visibly from your gist. have you tried just passing req.body?
13:38 <@MI6> joyent/node: Ben Noordhuis master * d820b64 : tls: add localAddress and localPort properties - http://git.io/O2wIOQ
13:38 < gabrielstuff> http://nodejs.org/api/crypto.html#crypto_hash_update_data_input_encoding
13:38 < gabrielstuff> data is a string, not an object
13:38 < aandy> mm? and req.body is an object or?
13:38 < FoxDiller> omg! Thank you Ben Noordhuis!!
13:41 < aandy> gabrielstuff: try to swap your app.use(express.bodyParser()); for this: http://pastie.org/private/fkbsxsk6ku6hidcd4t4jxq
13:41 < aandy> and remove the JSON.stringify in your gist
13:42 < gabrielstuff> hey thanks ! sandy. I'm using bodyParser… and thus I'm not able to get any req.on event…. but I try this one right now
13:42 < gabrielstuff> as your solution is a bit different
13:43 < aandy> gabrielstuff: the difference is you're reading it yourself. what i suspect is that the json.stringify gives a different output than your (text data) input was
13:43 < gabrielstuff> yup
13:43 < aandy> here's a simple example of what i mean: JSON.stringify(JSON.parse('{"herp": "derp"}'))
13:43 < aandy> which yields '{"herp":"derp"}'
13:43 < aandy> which isn't the same
13:43 < gabrielstuff> yup
13:43 < gabrielstuff> i'm testing in 3 sec
13:46 < meatshake> cyberalian: node does say it's a function when i don't pass the argument
13:50 < cyberalien> meatshake: that's strange. can you post your foo.js to gist?
13:51 < meatshake> yeah, let me isolate some code
13:59 < meatshake> cyberalien: https://gist.github.com/anonymous/5612393
14:00 < Ritzton> I am sorry there is something I dont understand, when I am trying to get the timestamp of '2013/05/19 06:54' with node js, I am getting 1368939240 and then when I reconverting it with php I am getting 2013/05/19 04:54, two hours less ! do you know where this problem come from ?
14:00 < cyberalien> meatshake: your code works fine
14:01 < meatshake> typeof foo is undefined for me
14:01 < cyberalien> because that's result of your function. it doesn't return anything
14:03 < cyberalien> meatshake: https://gist.github.com/cyberalien/5612419
14:04 < squijew> hello
14:05 < squijew> question about noejs and using express
14:05 < meatshake> cyberalien: ah, so it only returns the module itself if it has a return statement (even though you return a boolean, you get the object)?
14:06 < cyberalien> meatshake: you are executing a function, therefore foo becomes result of that function
14:06 < squijew> i have a form and on button click, it will post an action. in my server code i take the data and save to database. how can i return a boolean back to the html side on whether it was a success or not?
14:08 < meatshake> cyberalien: ah yes, you are right, I fiddled a bit with the code myself, that's why it returned something else
14:08 < meatshake> but now i understand, thanks! :D
14:10 < aandy> gabrielstuff: don't leave us hanging! :)
14:10 < gabrielstuff> i'm here...
14:10 < gabrielstuff> reading
14:10 < gabrielstuff> http://stackoverflow.com/questions/11295554/how-to-disable-express-bodyparser-for-file-uploads-node-js
14:11 < boffbowsh> What's the current package-du-jour for speaking SMTP to a relay server?
14:11 < aandy> squijew: which db module do you use? use the result of your insert as a true/false, and res.write(your_bool.toString())
14:11 < squijew> mongojs
14:12 < aandy> gabrielstuff: just remove the bodyParser line for and test it out
14:12 < gabrielstuff> well… it is a full
14:12 < gabrielstuff> app
14:12 < gabrielstuff> I do not want to break everything :)
14:12 < gabrielstuff> i'll put it aside
14:12 < gabrielstuff> few sec
14:13 < aandy> unless you use req.body as an object other places, it shouldn't break anything, but yeah
14:14 < RLa> gabrielstuff, 1st answer is pretty good
14:15 < RLa> and the 2nd one too
14:15 < ckknight> What's the best way to track down a RangeError: Maximum call stack size exceeded?
14:15 < RLa> look for infinite recursion
14:15 < gabrielstuff> hum… yup
14:15 < gabrielstuff> checking that
14:16 < ckknight> RLa: that's obvious
14:16 < ckknight> how do I track it down?
14:16 < ckknight> since there's no stack trace
14:16 < ckknight> or anything
14:16 < RLa> through debugger maybe?
14:17 < squijew> @aandy, how would i capture the response on the client side? the button click is nested in a form (method = post  action=/save).. should i use an ajax post in stead of the form post so that I can get the response?
14:19 < aandy> it'll be the data (body) of your response. so if it's a regular form, the user will see a white (text/plain) page with either text: true or false
14:20 < aandy> if it's just to let the client know if it's ok or not (with ajax), i'd go by http codes. so 200 = ok, 404 (or similar, whichever fits you best) = error
14:20 < gabrielstuff> same :(
14:20 < gabrielstuff> https://gist.github.com/gabrielstuff/5612030#file-facebook-ondata-js
14:20 < aandy> squijew: jquery's ajax will trigger the error functions on those codes, and success function on e.g. 200
14:22 < arsdmthe> is there a bot here (to test code) ?
14:22 < aandy> gabrielstuff: not knowing what the data looks like, it's hard to tell. is there any developer tools from facebook available? showing which basestring it is signing with what key (secret)?
14:22 < gabrielstuff> nop
14:22 < oliveiraev> arsdmthe: just tipe with >> on the beginning
14:22 < gabrielstuff> not for this part...
14:23 < gabrielstuff> it :(
14:23 < oliveiraev> >> console.log('hello, world');
14:23 < purr> oliveiraev: undefined; Console: 'hello, world'
14:23 < oliveiraev> arsdmthe: but is an one-liner
14:23 < gabrielstuff> data is clean...
14:23 < gabrielstuff> see here
14:23 < ckknight> I cannot for the life of me figure out how `node --debug` and `node debug` are supposed to work.
14:23 < arsdmthe> thanks oliveiraev 
14:23 < ckknight> I'm doing `node --debug` in one console, it appears to open up a repl and says "debugger listening on port 5858"
14:24 < gabrielstuff> see comment : https://gist.github.com/gabrielstuff/5612030
14:24 < ckknight> but when I do `node debug script.js` in another console, it is unable to connect
14:24 < arsdmthe> >> source
14:24 < purr> arsdmthe: ReferenceError: source is not defined
14:25 < arsdmthe> >> purr
14:25 < purr> arsdmthe: ReferenceError: purr is not defined
14:25 < FoxDiller> >> var fox = 'Fox';
14:25 < purr> FoxDiller: undefined
14:25 < aandy> gabrielstuff: without the sig and key (no, you shouldn't paste them) it's impossible to guess. with/without newline? :P
14:26 < gabrielstuff> ho !
14:26 < gabrielstuff> line / new line
14:26 < gabrielstuff> did check that :)
14:26 < gabrielstuff> let me check
14:29 < gabrielstuff> maybe it is not hex...
14:29 < aandy> maybe it's upper case hex?
14:29 < aandy> ;)
14:29 < gabrielstuff> nop, it is not that, same output
14:31 < squijew> thanks aandy, how can i get the response return to the same page without reloading it? the goal is that when the data is saved, it will trigger an event on the page (ie a message box appears)
14:34 < aandy> i'd use ajax, e.g. something like.. hold on, i have an example from a few days ago that i think you can use
14:37 < aandy> squijew: basic template: http://pastie.org/private/yncbds5a16w1llgd5iyxhq#10,18,21
14:38 < squijew> would that URL be just the "action"
14:38 < aandy> yes
14:39 < squijew> i see, thanks for the template, ill implement it and get back to u
14:39 < gabrielstuff> hum… tried with several hash, command line php...
14:39 < gabrielstuff> and it fails...
14:39 < gabrielstuff> I get same result as my node server
14:40 < gabrielstuff> can't get the Facebook hash
14:40 < aandy> gabrielstuff: do you have a link for fb docs on the service you're using?
14:40 < gabrielstuff> aahah
14:40 < gabrielstuff> I do not know how to read :)
14:40 < gabrielstuff> find my mistake
14:41 < gabrielstuff> confusing token
14:41 < gabrielstuff> and app secret : /
14:41 < aandy> \o/
14:44 < aandy> gabrielstuff: just revisited some old pubsub code i toyed with a while back. nice to see it catch on. blogger still sucks at it though
14:44 < gabrielstuff> finishing the conf… should work :)
14:44 < aandy> i get 5 notifications from some blog. i check every piece of data - no changes. no new comments or anything. and the notification tells nothing about what has changed. perfect
14:45 < kenperkins> what happens when node runs out of available connections?
14:45 < kenperkins> how does it handle it
14:45 < pquerna> you mean out of file handles?
14:47 < kenperkins> yea, shoiuldn't it start throwing ECONN errors of some sort
14:47 < kenperkins> morning btw
14:50 < gabrielstuff> it works !
14:50 < gabrielstuff> thanks :)
14:50 < aandy> gabrielstuff: hehe, nice
14:50 < gabrielstuff> and it works perfect with bodyparser
14:50 < gabrielstuff> damn
14:50 < gabrielstuff> tired… app secret / secret token
14:50 < gabrielstuff> big fail this ones
14:52 < oakaz> hi all. I've been working on a cron-job replacement; https://github.com/azer/shell-jobs
14:53 < aandy> gabrielstuff: which service is it btw? pubsub of user updates or?
14:53 < oakaz> if you like it, you can help it make it to HN frontpage: https://news.ycombinator.com/item?id=5737948
14:57 < gabrielstuff> Facebook page update
14:57 < gabrielstuff> @aandy
15:01 < AAA_awright> oakaz: What's wrong with cron?
15:03 < jBryan> hi how can I iterate array  inside nodejs?
15:04 < pachet> kenperkins late response but https://github.com/joyent/node/blob/master/deps/uv/src/unix/stream.c#L442
15:04 < JakeLeBoeuf> trying to set up express and I keep getting this warning: "npm WARN package.json cookie-signature@1.0.1 No repository field."
15:05 < JakeLeBoeuf> How do I add a repository field?
15:05 < InconceivableB> jBryan [].forEach(function(item) {  })
15:08 < pachet> JakeLeBoeuf: by being the module author
15:08 < pachet> otherwise just ignore it
15:08 < JakeLeBoeuf> Ooooohhhhhohhhoo
15:08 < paulfryzel> JakeLeBoeuf: that's just a soft warning b/c the cookie-signature package definition (node_modules/express/node_modules/cookie-signature/package.json) doesn't have a repository field
15:08 < paulfryzel> if you look it up on https://npmjs.org/package/cookie-signature, you'll see there's no repository listed there either
15:08 < paulfryzel> safe to ignore that
15:09 < JakeLeBoeuf> Assuming the same goes for all the other "No repository field" errors. Thanks guys
15:10 < jklb>  /msg NickServ identify superjake
15:10 < jklb> ha
15:12 < hermanjunge> Hi
15:12 < hermanjunge> crazy question
15:12 < hermanjunge> I want to spawn a child process
15:13 < hermanjunge> get its pid, but "pause it"
15:13 < budz> jklb: gave me a laugh. I'm guilty of doing that
15:13 < hermanjunge> then, once I do something with its pid, "resume" this child process
15:14 < hermanjunge> possible? impossible? GTFO?
15:16 < jklb> @budz yea, I'm smart
15:17 < aandy> impossible i think. pretty sure it's spawned off to bash (and similar), so you wouldn't have that control at that point. what are you trying to accomplish? is it vital for the childs ability to continue that you do this "works" first?
15:18 < hermanjunge> I want to test an executable
15:19 < hermanjunge> this executable at some point calls another executable
15:19 < jklb> budz still not sure how to avoid that next time. IRC, I'm not smart enough for you.
15:19 < aandy> hermanjunge: trying to use node as a debugger? may i suggest gdb? :D
15:19 < hermanjunge> so my test is: 1) Spawn the process 2) get its pid 3) write the fake 2nd executable with a "kill -s SIGUSR <pid>" 4) check the result
15:20 < hermanjunge> I wanted to make it perfect by "pausing" the process in order to prepare my 2nd fake excutable
15:20 < hermanjunge> LOL aandy, I'm unit testing a file
15:21 < aandy> well, i was only half joking. pause with gdb. afaik you can't pause from the child_process types
15:21 < hermanjunge> good
15:22 < hermanjunge> well, that's the funny thing about "crazy ideas", sometimes they could work
15:29 < Karliky> I've created an in game map editor for World Of Wacraft with Node.js http://www.youtube.com/watch?v=2fklKtVjfPw
15:30 < zomg> Karliky: wait, you can edit maps in wow? :P
15:30 < zomg> Karliky: btw you have spam comments there you might wanna get rid of
15:31 < zomg> well, one
15:31 < niggler> lol joyent/node has 22222 stars
15:31 < zomg> that motion controller thingy is interesting
15:32 < Karliky> you can edit the map by doing reverse engineering over the game :P
15:32 < zomg> So basically.. cheating?
15:32 < zomg> Doesn't the server stop you from doing that? =)
15:32 < zomg> I remember back in Diablo 2 some guy figured out the entire damn game so deep that he could literally do pretty much whatever he pleased even in battle.net games..
15:34 < Karliky> what I do is to edit the memory, so it's hard to the server to detect this...
15:35 < ckknight> um, Warden's going to detect you.
15:36 < ckknight> unless you're running on a private server
15:36 < aandy> having never played world of warcraft.. remember that you're editing *memory*, so it's probably not persistant in any way
15:36 < zomg> Karliky: ah, well that wouldn't get reflected on other players I guess
15:36 < aandy> e.g., i can write window.Money = 1000000; in my browser, but the server will always return the actual amount
15:37 < aandy> s/will/should
15:37 < Karliky> Warden's doesn't scan for these addresses
15:37 < Karliky> you are right aandy
15:44 < arnex> hey
15:51 < Stephen> hey
15:55 < gbit86> can anyone suggest how I might add ciphers = 'rc4-sha' to request by mikeal?
15:55 < gbit86> https://github.com/mikeal/request/blob/master/index.js
15:55 < gbit86> I have been trying to insert that into the js for the last couple of hours, but it is clearly not working
15:56 < gbit86> wireshark indicates that all the ciphers are still available
15:57 < gbit86> I can successfully add it when I program in just nodejs but when I add request it refuses to work, even though when I output the entire contents of the response I can see that ciphers are set to rc4-sha.. so I find it really odd that the digest handshake is offering all 80 ciphers
16:09 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:23 < drudge> hello fellow brogrammers
16:23 < brianseeders> any ideas what kind of resource issue could cause Error: getaddrinfo ENOTFOUND when using http.request?
16:23 < brianseeders> I'm making lots of HTTP requests to various hosts
16:24 < brianseeders> and I start getting that on every request, after about 1300 requests, and it seems to be independent of how quickly I make the requests
16:24 < ckknight> drudge: what of the ladygrammers?
16:25 < drudge> ckknight: they also appear to be brogrammers http://osrc.dfm.io/nexxy
16:25 < pachet> careful
16:26 < Fuzzyma> hey iam using express/compound. Is there a way to get the current action which is executed?
16:26 < ckknight> oh yeah, gotta be careful, everyone's got the PC stick lodged firmly in their behinds
16:26 < drudge> pachet: i just meant according to the open source report card
16:27 < drudge> if you do any javascript you are a brogrammer
16:27 < ckknight> I disagree with that
16:27 < drudge> so do i ;)
16:27 < ckknight> there are some javascript hackers that I would not consider part of that subculture
16:27 < njrD> I thought that was ruby
16:28 < Havvy> drudge: I completely disagree with that.
16:28 < Havvy> My gender has nothing to do with being a programmer.
16:28 < drudge> Havvy: i know
16:29 < drudge> should have figured the guy who wrote this was a pythonista ;) https://github.com/dfm
16:29 < ckknight> and I don't think being a "bro" is something to aspire to, anyway
16:29 < pachet> why arent you taking shots, bro
16:30 < ckknight> I just pounded that Jaegermeister, man
16:30 < drudge> jaegerbombs bro
16:32 < ckknight> drudge: aw, that site's down now, just after I looked myself up
16:33 < drudge> Cameron is an awesome brogrammer who loves pushing code. Cameron is a hump day hero who seems to work best in the late evening.
16:33 < jtomasrl> i have a client that ask for content to the server and saves it locally, how can i manage updates and new insertions on that data on the server side to be pulled to the client?
16:35 < ckknight> drudge: hump day hero!
16:36 < drudge> ckknight: Cameron seems to speak only one programming language: JavaScript. Maybe it's about time to branch out a bit.
16:36 < ckknight> I actually know like 25 languages
16:36 < ckknight> I just only started using github extensively since I switched primarily to JS
16:58 < arnex> Maybe someone here can help. I'm trying to convert a curl statement into a http.request(). To no avail.
16:58 < arnex> Here is code http://pastebin.com/DqE1suei.
17:03 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:07 < keyosk|away> arenx : try requiring https instead
17:09 < arnex> let me see.
17:10 < keyosk> Also check your auth string, maybe this will serve you better :
17:10 < keyosk> 'Basic ' + new Buffer(username + ':' + password).toString('base64');
17:10 < arnex> require('https') worked. :)
17:10 < arnex> Thanks
17:11 < keyosk> No problem :)
17:12 < Vibhoo> path.existsSync is now called `fs.existsSync`.
17:12 < Vibhoo> path.existsSync is now called `fs.existsSync`. facing this error anybody can help me
17:13 < keyosk> Replace your path.existsSync with fs.existsSync..
17:13 < Vibhoo> in which file dude
17:13 < keyosk> You tell me, dude..
17:13 < keyosk> Use a search editor with a directory find?
17:13 < Vibhoo> while i am running cloud9 locally i am getting this error
17:22 < othiym23> cd <root of project>; find . -type f -name "*.js" -print0 | xargs -0 grep existsSync
17:23 < othiym23> replace path.existsSync with var fs = require('fs'), path = require('path'), existsSync = (path.existsSync || fs.existsSync);
17:24 < keyosk> lol that is a terrible idea
17:55 < bmatusiak_> anybody here use node-promise?
17:58 < TheAceOfHearts> node is a liar D: , it doesn't keep its promises </3. IT SAID IT WOULD CALL ME BACK, BUT IT NEVER CALLED.
17:58 < bmatusiak_> ill take that TheAceOfHearts doesn't use it
17:59 < TheAceOfHearts> nope, but it looks cool, so I'm probably gonna be checking it out now :P, so thanks
17:59 < Havvy> bmatusiak_: There's async and there's Q.
18:00 < TheAceOfHearts> I've used async; and I've heard about Q a lot. Is there any big reason to pick one over the other? 
18:01 < keyosk> Pick the one with the most active development and the least amount of issues
18:01 < tpayne> I need to make a remote call + session set a value... before I handle any route. Any suggestions on how to do that?
18:01 < TheAceOfHearts> good advice
18:01 < keyosk> A glance at github should make you feel more comfortable with one over the other
18:02 < tpayne> nm
18:03 < tpayne> in node, what do you call functions that you pass to routes in express
18:03 < keyosk> I call them functions o_O
18:03 < tpayne> heh
18:03 < dypsilon> handlers
18:04 < dypsilon> route handlers
18:04 < tpayne> dypsilon: do you stick them inside of your routes.js file assuming that you have one?
18:04 < keyosk> I call a variable referencing a file or network descriptor a handler
18:04 < dypsilon> tpayne, i don't use express
18:04 < tpayne> cool
18:06 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * 739a5b2 : unix: add mapping for ENETDOWN - http://git.io/BriB2A
18:29 < gbit86> can someone please point me to a code example of someone using node js as an https digest authentication client?
18:30 < gbit86> And using the POST request, not get
18:30 < gbit86> I can get it to work with GET just fine, but POST is no bueno
18:30 < dypsilon> gbit86, there should be no difference between get and post
18:31 < dypsilon> http auth is transmitted in the authorization header
18:31 < gbit86> the difference from what I can tell is that post can carry a body of encapsulated data, GET does not
18:31 < gbit86> and I need to transmit some json on over
18:32 < dypsilon> gbit86, so how does it affect the headers?
18:33 < gbit86> well it simply does not appear like I can manage to write the json into the response packet using the write function as documented on nodejs's website
18:34 < gbit86> I see the header information looks good, the same as GET, it just says POST for the method instead and fails to authenticate
18:34 < gbit86> and the json data for the body is missing
18:34 < gbit86> so actually I have 2 issues
18:34 < gbit86> it will not authenticate and it will not transmute the request body
18:37 < gbit86> transmit*
18:44 < willwhite> has anyone ever seen inconsistencies in the npm registry? the "version" flips back and forth between 1.1.1 and 1.1.2 if you refresh a few times: https://npmjs.org/package/backbone-couch
18:44 < willwhite> perhaps there is a couch replication problem?
18:47 <@isaacbw> isaacs ^^
18:51 < saschagehlich> hey, what's the most common way to escape shell arguments when using child_process.exec?
18:51 < saschagehlich> and will `spawn` automatically do that?
18:54 < willwhite> isaacbw: do you think it's best to open an npm issue on github regarding that inconsistency?
18:57 < nerph> any non-native mssql driver for node (not msnodesql)???
19:02 <@isaacbw> willwhite: for some reason I get a 404 with 'npm info backbone-couch'
19:02 < willwhite> isaacbw: hm that's not good
19:04 < willwhite> my `npm info` output doesn't shift like the website but we are occasionally seeing some suspicious messages during `npm install` where npm gets a 404 for the backbone-couch tarball. I was thinking the tarball is just missing from one/some of the servers when I noticed this.
19:05 <@isaacbw> rather, 401
19:05 <@isaacbw> oh wait, I think I may have just changed my npm password
19:05 <@isaacbw> lol
19:05 < willwhite> heh that would do it :)
19:06 <@Nexxy> drudge, wat?
19:06 <@isaacbw> willwhite: if you hassle him here he'll probably get back to you
19:06 < drudge> Nexxy: nothing, was just complaining about that website
19:06 <@Nexxy> oh
19:07 < willwhite> isaacbw: ok thanks
19:07 < drudge> Nexxy: they were using the term "brogrammer" to refer to all javascript devs
19:07 <@Nexxy> oh wow
19:07 < drudge> they changed it to "Javascripter" http://osrc.dfm.io/nexxy
19:07 <@Nexxy> oh ok
19:08 <@Nexxy> I was confused cuz I went there and there was no mention of bros
19:08 < willwh> argh
19:08 < willwh> willwhite: wtf :| boo @ my hilight.
19:08 < willwhite> lol
19:09 < drudge> Nexxy: heh https://github.com/dfm/osrc/commit/78b3898b52a8ff9fbad0c9e9821fca5bfd6400ba
19:09 < nathanpeck> Do any of you guys know of a good package like node-formidable but for outgoing forms instead of incoming forms? Trying to get progress events for multipart form data going out from my server and having a hard time finding any packages that do that
19:10 < nerph> any non-native mssql driver for node (not msnodesql)???
19:23 < gbit86> so I am using https.request to send a POST with json and I am also authenticating correctly with the digest authentication server while it is set for GET, but it does not appear to work with POST. What gives?
19:23 < gbit86> I have the header information from POST and GET in node, and a POST from firefox
19:23 < gbit86> so a detailed analysis and comparison can be made
19:24 < gbit86> http://pastebin.com/wpiVyfiW GET using nodejs (authentication works, sending json body fails, although it is in the body)
19:24 < AAA_awright> gbit86: Why Digest? That's inherently insecure
19:24 < gbit86> http://pastebin.com/0hTr3bRe POST using nodejs (Authentication fails straight up, so the json may or may not be fine in the body)
19:24 < gbit86> because we have a horrible phone system and it is not my choice
19:25 < gbit86> http://pastebin.com/98mss9DX POST using firefox, authentication works and the json body is accepted just fine
19:25 < AAA_awright> What's your phone have to do with it
19:25 < gbit86> I am communicating to a phone server
19:25 < gbit86> digest authentication is the only means to do so
19:26 < AAA_awright> POST ... Content-Type: text/plain; charset=UTF-8
19:26 < AAA_awright> But you're sending JSON?
19:26 < gbit86> yes
19:26 < AAA_awright> As text/plain
19:26 < gbit86> ok I will try setting that
19:27 < AAA_awright> gbit86: Try setting what
19:27 < AAA_awright> It should be application/json
19:27 < gbit86> content type.. in the header
19:27 < AAA_awright> gbit86: And I'd see right away about getting that fixed, you should be using Basic authentication over TLS
19:27 < gbit86> technically firefox used "Content-Type: text/plain; charset=UTF-8" and it was fine
19:27 < gbit86> my nodejs does not have content-type set at all
19:28 < AAA_awright> JSON, despite its looks, isn't text (in the meaning it's used in media types)
19:28 < AAA_awright> *as used in media types
19:28 < gbit86> technically I am not supposed to have root access to the phone server to be able to make any changes like that, this is a closed system and they have the right to drop support if I do.
19:28 < drudge> nerph: i'm using tedious
19:28 < ningu> a drudge using tedious... seems about right
19:29 < drudge> heyo
19:29 < gbit86> this is digest authentication over tls/ssl so I think it is secure
19:29 < gbit86> although I managed to grab the private key from the phone server and I can pretty well decrypt whatever I damn well please
19:29 < AAA_awright> What do you mean phone server?
19:29 < gbit86> this is a phone server based on asterisk
19:31 < AAA_awright> http://www.kapejod.org/2013/02/reversing-sip-digest-authentication-in-javascript-node-js/ Huh there's even an article about (appearently) your specific server
19:32 < AAA_awright> There's actually more powerful programs for cracking Digest passwords, but point is it's easy
19:42 < gbit86> not trying to crack digest password, I had to crack SSL encryption
19:45 < AAA_awright> gbit86: Eh?
19:45 < gbit86> what's up?
19:46 < AAA_awright> You don't just crack SSL encryption... Or if you can, there's far more serious problems
19:46 < AAA_awright> (formally called TLS)
19:46 < gbit86> if you obtain the private key from the server you can
19:47 < DaMorpheuS> and if you know the password you can log in as root ;)
19:48 < AAA_awright> There's no reason you should need to get the private key, unless you have an exceptionally good reason to impersonate the server (a reason of which I am unaware)
19:49 < gbit86> recovering the root password is tricky, at least if I do not want to overwrite it and leave a trace.. I just created a secondary root user instead
19:49 < gbit86> I do, I needed to read the header information to understand why my digest authentication was failing
19:50 < gbit86> and i pretty well figured out why, but then once I switched it to POST from GET new issues came up, but they all have to do with nodejs this time
19:50 < gbit86> and being able to see what happens to header and the packet data in real time is invaluable to me
19:50 < AAA_awright> secondary... root... user?
19:50 < AAA_awright> That's what sudo is for
19:50 < diffalot>  /join #archlinux
19:51 < diffalot> ahem...
19:51 < AAA_awright> diffalot: lol
19:51 <@isaacbw> don't tell me how to live my life
19:51 < gbit86> sudo does not give you ssh access
19:51 < sambarino> lol
19:52 < AAA_awright> Also be aware the semantics for submitting an entity body with a GET request are undefined
19:52 < AAA_awright> Why are you even doing that?
19:52 < gbit86> because I am new to nodejs lol and it worked for initial testing
19:52 < diffalot> sorry bout that... sneaky space character  #bandname
19:53 < AAA_awright> We probably SHOULD be using GET for posting operations that are safe, e.g. performing calculations without modifying the server
19:53 < AAA_awright> But it's not really laid out in the RFC
19:54 < AAA_awright> gbit86: Normally you log in as a normal user, then use sudo -- you should never, ever log in as root, the account shouldn't even have a password
19:55 < AAA_awright> `sudo -s` for a root shell
19:55 < AAA_awright> Or my favorite, `sudo screen`
20:03 < runvnc> so I guess there is no way to install only dev dependencies right, or get it to instlal the dev dependencies first?
20:09 < gbit86> well I have matched the header exactly
20:09 < gbit86> it still fails
20:10 < gbit86> has anyone here out of a 1000+ people actually accomplished HTTPS Digest Authentication with TSL/SSL  client (nodejs) -> Server (Digest Auth/TLS/SSL) ??
20:10 < gbit86> I am beginning to think this is just a framework that still have bugs in it
20:10 < gbit86> the packets looks kosher I do not see the inconsistency
20:11 < ningu> gbit86: I have not done it but I know that a number of people on this channel have done so. it definitely works.
20:11 < yorick> isaacs: why oh why do you want us to use streams2 (which is not as great as the original one, IMHO), and then not use it yourself in the http module, but instead use stream.ondata on the stream which completely breaks things? :(
20:12 < gbit86> well I will pay anyone $100 directly to their paypal account if they will just log in and take a look at about 130 lines of code and tell me where I went wrong.
20:12 <@isaacs> willwhite: probably there are two workers with disagreeing caches.  give it a few minutes.  it'll be fine.
20:12 < ningu> yorick: isaacs posted to the mailing list a few weeks pack saying that streams2 gives you the option of listening to 'data' or 'readable' as they see fit.
20:12 < yorick> ningu: I know that
20:13 < willwhite> isaacs: seems to have resolved. thanks.
20:13 <@isaacs> yorick: you can still use the old interface.  the hazard is that it works now.
20:13 < ningu> oh, isaacs is here. well he can speak for himself then obviously. :)
20:13 <@isaacs> ningu:  :)
20:13 < yorick> isaacs: but the http server module doesn't use any kind of stream api
20:13 <@isaacs> yorick: the reasons for the http fuckupery are long and sordid.  it is a problem.  we're fixing it.
20:13 < ningu> isaacs: is what I said accurate? that's how I interpreted it but I'm curious. I don't get the sense that "don't use 'data'" is actually official policy (to the extent there is such a thing).
20:13 <@isaacs> yorick: the pressing need was to make http actually work, and present a streams2-compliant API to the http end user.
20:13 <@isaacs> ningu: yes, that's correct.
20:14 < yorick> isaacs: I spent all day yesterday trying to get the raw http data out of the server because you can't use .pipe from the stream :(
20:14 <@isaacs> ningu: if we dind't wnat you to use the 'data' event, we would have deprecated it.
20:14 <@isaacs> it's fine
20:14 <@isaacs> yorick: yeah, it sucks.
20:14 <@isaacs> yorick: even if you DO get at the socket, though, and it is, let's say, 100% streamy end to end, you're going to have an odd time getting data out of the socket since it's piping into a parser etc.
20:14 < yorick> isaacs: will you break my .ondata = function(){oldondata() /* intercept stuff */} hackery?
20:14 <@isaacs> yorick: most likely.
20:14 <@isaacs> yorick: socket.ondata is internal.  don't touch that, or the machine will eat your fingers
20:15 <@isaacs> yorick: it's a remnant of a day long past when node didn't have EventEmitters
20:15 < yorick> isaacs: how do you suggest we extract the raw http data?
20:15 <@isaacs> yorick: write a tcp server, listen on :80
20:15 < ningu> isaacs: btw, someone on here the other day determined that one of bnoorhuis's 0.9 changes made sockets not emit 'connect' consistently... but I think they were filing an issue about it.
20:15 < yorick> isaacs: how do we feed that into an http server?
20:16 <@isaacs> yorick: qv lib/http.js
20:16 <@isaacs> ningu: emitting 'connect' on server sockets was always a mistake.
20:16 < kenperkins> trying to figure out why I'm seeing a node app just exit with no exceptions when going from 1 concurrent streaming http to 10
20:16 <@isaacs> ningu: and fake.
20:16 < kenperkins> how do I get debugging working on core node
20:16 < nerph> drudge: thanks!
20:16 <@isaacs> kenperkins: node debug file.js
20:16 <@isaacs> kenperkins: and put a 'debugger' line in there somewhere
20:16 < ningu> isaacs: hmm. well they were experiencing inconsistent behavior iirc, which is a problem regardless.
20:17 <@isaacs> ningu: without an issue, i cannot say.
20:17 < ningu> actually, maybe it was just a difference between 0.8 and 0.10
20:17 < ningu> so nm
20:17 < kenperkins> isaac: sorry, I meant, how do I get core node debug statements, like http.js stuff
20:17 <@isaacs> ningu: "bnoordhuis's 0.9 connect event change" == "don't artificially emit 'connect' for server sockets"
20:17 < yorick> isaacs: also, what saddens me is bad documentation (no real examples of streams2 usage in the docs!) and that basically the only failure mode is data somehow not flowing
20:17 <@isaacs> kenperkins: NODE_DEBUG=http node server.js
20:17 <@isaacs> kenperkins: NODE_DEBUG=http,net,etc node server.js
20:17 < kenperkins> that work for outbound as well? http.createRequest?
20:18 <@isaacs> yorick: no examples of streams2 usage?  are you kidding?
20:18 <@isaacs> yorick: have you seen http://api.nodejs.org/stream.html?
20:18 < yorick> yes
20:18 <@isaacs> yorick: there's like a whole parser thing in there.
20:18 < kenperkins> isaacs: awesome, exactly what I needed
20:18 < ningu> isaacs: ah, ok.
20:19 <@isaacs> yorick: there are examples of almost every part of the API in that file.
20:19 < yorick> isaacs: great, now I know how transform streams work.
20:19 <@isaacs> yorick: also, there's examples all throughout the docs of other streams.
20:19 <@isaacs> yorick: most of them haven't changed much
20:19 < ningu> the other day substack was being grumpy about 0.10 api changes
20:20 < ningu> I'm not surprised it broke a lot of his modules
20:20 < yorick> ningu: and I disagreed, then I tried using the new streams.
20:20 < kenperkins> what's the consensus on caolyn/async? buggy or rock solid
20:20 < yorick> (fixing his modules :()
20:20 < ningu> kenperkins: I don't think anyone thinks it's buggy, they just disagree on whether it's the 'right' solution
20:21 < yorick> isaacs: there's no example on .read!
20:21 <@isaacs> yorick: patch welcome.  see the mailing list.  there's tons of examples.
20:21 < brainproxy> is setImmediate / the event loop backed by an internal timer w/in NodeJS (seems like it would be); if so, what is the nature of that timer? what's its resolution?
20:21 < ningu> mailing lists are not the best place for examples perhaps
20:22 < yorick> the node source is mostly a bigger help than the documentation. things are wrong then
20:22 < ningu> isaacs: btw, is there a discussion somewhere on why setImmediate was necessary instead of process.nextTick, and how to write code that works on both 0.8 and 0.10?
20:22 < kenperkins> ningu: trying to get to the bottom of a case where forEachLimit (concurrency 1) works perfectly, but if I bump it up to 10, my app just exists after some number of iterations, without any of my callbacks firing
20:22 < ningu> I've seen code that tests for whether setImmediate exists and uses it in preference to process.nextTick, not sure if that's actally 'right'
20:22 <@isaacs> ningu: yes, many.
20:23 <@isaacs> look, here's the thing:
20:23 <@isaacs> if you want a vote, use the unstable versions.
20:23 <@isaacs> use them early, use them often.
20:23 <@isaacs> don't wait until it's "stable" to start testing with it.
20:23 <@isaacs> or you'll be surprised.
20:23 <@isaacs> and newcomers, who start out on that version, will say, "Jeez, these modules don't work"
20:23 < ningu> I don't want a vote. it's just not obvious to me what's different since setImmediate on the surface appears the same as process.nextTick
20:23 < LLckfan> Does any1 know how to stop Shockwave flash from crashing? I have uninstalled both Flash and my browser (Chrome), installed both from a fresh download, and scanned my computer (come up clean). Everything is updated
20:24 <@isaacs> ningu: nextTick happens before any IO or other "real" event loop stuff.
20:24 <@isaacs> ningu: unless you do nextTick 1000 times recursively.
20:24 <@isaacs> ningu: because that's effectively an infinite loop: (function F(){ process.nextTick(F)})()
20:24 < ningu> kenperkins: that's kind of strange.
20:24 < kenperkins> I'm super baffled
20:25 < yorick> isaacs: there's not even a 'see setImmidiate' on the process.nextTick docs
20:25 <@isaacs> yorick: patch welcome.
20:25 <@isaacs> yorick: i can't say that enough.
20:25 < yorick> isaacs: you get paid for this
20:25 < kenperkins> i have a plain ol "console.log" in the forEachLimit's callback handler, (not the iterator function) and it never fires unless I set concurrency low
20:25 < kenperkins> no errors, exceptions, etc
20:25 <@isaacs> yorick: i get paid for about 3 people's worth of tasks.
20:25 <@isaacs> yorick: i have to prioritize.
20:25 < ningu> kenperkins: you mean the final callback?
20:25 <@isaacbw> oh boy
20:25 < kenperkins> ningu: yes, the final callback
20:25 <@isaacs> yorick: "not enough crosslinking in the docs" is something you can fix about as easily as you can complain about it.
20:26 < ningu> kenperkins: and is the iterator actually async, or what?
20:26 < kenperkins> yea
20:26 < kenperkins> 1 sec
20:27 <@isaacs> yorick: i'm not saying that to pass off responsibility, only to say that if you want it fixed today, fix it.  if oyu don't want to fix it, ok, someone else will get to it eventually, but that's how open source works.
20:27 < kenperkins> ningu: https://gist.github.com/kenperkins/5613950#file-sync-buckets-js-L59
20:27 <@isaacs> yorick: if you think i'm not doing enough work, tell bcantrill that joyent shouldn't be paying me so much ;)
20:28 < yorick> isaacs: I can tell him to pay you more, will you do more?
20:28 < kenperkins> sometimes the app just exits after L56, and I never see the log statement on L59
20:29 <@isaacs> yorick: no, i'm working more than i ought to already.  i appreciate where you'er going with this though.  getting paid more sounds like fun :)
20:29 <@isaacs> yorick: maybe i could get paid more AND do less :)
20:29 < yorick> isaacs: get paid more and use it to buy a slave and have him make node
20:29  * isaacs looks at tjfontaine 
20:29 <@isaacs> ;)
20:30 <@tjfontaine> what did I do?
20:30 <@isaacs> tjfontaine: scroll up a few lines :)
20:30 < ningu> I really liked the quote on planetnode: "These machine learning jokes write themselves. Eventually."
20:31 <@tjfontaine> isaacs: I'm a slave, for you</washed up pop star>
20:31 <@isaacs> tjfontaine: except for the part where you get a paycheck, and can leave
20:31 <@tjfontaine> true
20:33 < yorick> isaacs: anyways, I appreciate the work you do, but do it more and don't break my stuff :P
20:35 <@isaacs> yorick: this frustrated feeling you're having is *exactly* why we try so hard to maintain backwards compatibility, and to make it very visible when something is deprecated/internal/"a bad idea"
20:35 < Industrial> Say I have lots of little services that do one thing
20:35 < Industrial> authentication, sessions, caching, proxying, websites that consume these services etc
20:35 < JohnMcLear> heh isaacs, fighting a losing battle ;)
20:35 < yorick> isaacs: labeling the things I'm doing as "a bad idea" and not providing any alternatives is "a bad idea"
20:36 < Industrial> what if a service breaks? Can I do something other then show temporary error messages to users while a dependency is brought up again?
20:36 < yorick> isaacs: yes, you get a 502 error mostly :)
20:36 < JohnMcLear> yorick, whenever you depend on your parents, you are taking a risk
20:36 < Industrial> it seems to me, every new dep is a new potential for failure
20:36 < yorick> isaacs: .pipe(Industrial)
20:36 < yorick> Industrial: yes, that's when you see 502 errors
20:36 < pinja> Industrial: run more than 1
20:36 < JohnMcLear> Imho Joyent (isaacs et al) are being good stewards of Node compared to a lot of other project stewards
20:36 < JohnMcLear> Not perfect, but good.
20:37 < Industrial> yorick: wouldn't it be a wast to users if a stupid logging server that broke would mean errors on 10-20-over9000 sites?
20:37 < Industrial> waste*
20:37 < Industrial> so just run more?
20:37 < pinja> Yep
20:37 < yorick> Industrial: you could buffer the things you want to do with your modules and do them when they're back
20:38 < ningu> btw I was showing someone node recently and they said the docs assumed they knew a bunch of stuff -- how js works for example. are there any books out there that teach you all of the various things you need to know step by step?
20:38 < Industrial> that would hang the requests, right?
20:38 < Industrial> er, eep them loading forever (e.g. 10 secs)
20:38 < pinja> Industrial: no. process can idle on an operation long after the client gets it's response
20:39 < Domenic_> How can I explain to people that a request can both give 'error' and 'response' events?
20:39 < Domenic_> It's counterintuitive and I don't quite have the right examples/words.
20:39 <@isaacs> yorick: that's also why we are working to push innovation away from the node/userland interface.  lock down the public node apis, but innovate in libuv/v8/internals
20:40 <@isaacs> yorick: my hope is that 0.12 will be the last node version that introduces any significant semantic changes for node programs.
20:41 < jjore_> ningu, the ECMAScript spec.
20:41 < pinja> i run this exact topology in production, lots of single purpose "nodes", typically run any one type of node on multiple pieces of hardware, sometimes multiple copies on same hardware - can achieve both redundancy and scale in same manner
20:42 <@isaacs> Domenic_: context?
20:42 <@isaacs> Domenic_: pretty much *everything* in Node can emit 'error' events.
20:43 < ningu> jjore_: sure, but that isn't exactly a tutorial.
20:43 < ningu> also, I doubt the ECMAScript spec tells you how web technologies fit together and how you'd use them from node.
20:43 < jjore_> Tutorial? I have no idea. As near as I can tell this language has nasty angles and stuff all over it so I recommend starting by reading the reference manual.
20:44 < jjore_> Friendlier than C++, I guess.
20:44 < jjore_> Actually, wait, that's unfair. It's way friendlier than C++.
20:45 < Domenic_> isaacs: we're doing a HTTP request to AWS on their behalf, and giving them back a request object. They're attaching 'error' and 'response' listeners and are surprised when both listeners are called.
20:48 < Domenic_> isaacs: https://github.com/LearnBoost/knox/issues/179 in particular
20:54 <@MI6> joyent/node: Trevor Norris v0.10 * d5d5170 : string_bytes: strip padding from base64 strings - http://git.io/KhBMUg
20:57 < frk141> i try to extend but i have a segfault here: https://gist.github.com/anonymous/3b5b9db88eb760e244f5#file-gistfile1-cpp-L67 any ideas? how to debug this?
21:01 <@isaacbw> yesterday I was asking about a simple static file server utility and I ended up making one myself: https://github.com/isaacbwagner/marmalade
21:01 < Atlantic777> I have node 0.10.7 on archlinux and I have troubless with serialport module. 
21:01 < Atlantic777> I got this message:
21:01 < Atlantic777> gyp ERR! stack     at F (/usr/lib/node_modules/npm/node_modules/which/which.js:43:28)
21:01 < Atlantic777> gyp ERR! stack     at E (/usr/lib/node_modules/npm/node_modules/which/which.js:46:29)
21:01 < Atlantic777> gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/which.js:57:16
21:01 < Atlantic777> gyp ERR! stack     at Object.oncomplete (fs.js:107:15)
21:01 < ningu> isaacbw: oh, you wanted one that didn't use express, or something?
21:01 < ningu> Atlantic777: don't paste into the channel, use pastebin.com or gist.github.com
21:01 < Atlantic777> on the other machine I have node 0.10.5 and I did manage to install serialport with npm
21:01 < Atlantic777> ningu: it was just 4 lines, I thought it's ok up to 5 lines... :)
21:02 < Atlantic777> sorry
21:02 < ningu> Atlantic777: yeah, it's borderline :)
21:02 < ningu> I usually keep it to 2
21:02 <@TooTallNate> Atlantic777: in any case, you're not pasting the relevant part of the stack
21:02 <@isaacbw> ningu: well, I didn't really care what it used
21:03 < Atlantic777> TooTallNate: ok, I'll post on pastebin other messages, too. :)
21:05 < frk141> any ideas why i just end up in a segfault? https://gist.github.com/anonymous/3b5b9db88eb760e244f5#file-gistfile1-cpp-L67
21:05 <@isaacbw> ningu: the main feature that I wanted was to run a makefile for the file being requested
21:06 < Atlantic777> https://paste.lugons.org/show/muG9aYA5RJDdAW4lhzEx/
21:06 < Atlantic777> for that serialport error ^
21:06 <@isaacbw> ningu: and easily moving around between root directories. what I had been doing is setting up symlinks to for nginx
21:07 < ningu> run a makefile for the file being requested? every time?
21:07 <@isaacs> Domenic_: ohhh, i see.
21:07 <@isaacbw> that's right
21:07 <@isaacs> Domenic_: yeah, the socket error might happen mid-response
21:07 <@isaacbw> ningu: you wouldn't use it for serving anything publicly
21:08 < ningu> Atlantic777: ahem: gyp ERR! stack Error: not found: make
21:08 <@isaacs> Domenic_: maybe we should put the error event on the resp object, in that case?  i thinkw e just only proxy to the req
21:08 < Atlantic777> ningu: oh, maybe. It's a fresh arch installation.
21:09 < ningu> isaacs: what would it mean exactly to get a response but have an error on it?
21:09 <@TooTallNate> Atlantic777: ya so install `make` and the rest of your C++ toolchain
21:10 < Domenic_> isaacs: that sounds like it would be lovely. Shall I file an issue?
21:10 <@isaacs> ningu: net.createServer(function(socket) { socket.write(firstHalfOfResponse); socket.destroy() })
21:10 < ningu> ah, ok
21:10 <@isaacs> Domenic_: sure, but theremight be other unanticipated side effects.
21:11 < ningu> but if the connection fails it would emit an error on the request object?
21:11 < Domenic_> isaacs: fair, yeah. i suppose the proper thing to do is file an issue, try making the change myself, and seeing how many tests break.
21:11 < ningu> I suppose that makes sense
21:11 <@isaacs> Domenic_: sure :)
21:11 <@isaacs> Domenic_: the tricky thing is that a lot of times, people JUST put a error handler on the req object.
21:11 <@isaacs> Domenic_: so now, those errors would be unhandled.
21:11 <@isaacs> Domenic_: and for safety, you'd have to listen on both
21:11 < ningu> isn't there a way to pass up errors iff they're unhandled?
21:12 < ningu> maybe that's a bad idea, but I've seen it done
21:12 < kenperkins> man, this is so confusing
21:17 < kenperkins> there must be a callback not being fired somewhere :S
21:19 < ningu> how many times does a callback have to not show up for work before it's fired?
21:19 <@isaacbw> we welcome working from home
21:19 < kenperkins> not sure i understand that question ningu 
21:25 <@isaacbw> (it was a joke)
21:25 < ningu> indeed
21:26 < frk141> i try to extend node but i have a segfault here: https://gist.github.com/anonymous/3b5b9db88eb760e244f5#file-gistfile1-cpp-L67 any ideas? how to debug this?
21:28 <@MI6> joyent/node: isaacs v0.10 * 3a2b503 : crypto: Clear error after DiffieHellman key errors - http://git.io/xD3YlQ
21:29 < jeffwhelpley> I was trying to find node.js based tools for doing mongo schema migrations similar to how rails schema migrations work. I understand I could use a Grails/Rails tool for something like this, but ideally would like to find something in node.js. Any suggestions?
21:39 < kenperkins> sometimes, I just feel stupid :( ningu: concurrency 6, and all my callbacks work, 7? nope
21:39 < kenperkins> off the shelf async and request :(
21:44 <@MI6> joyent/node: isaacs master * 0fefcc1 : Merge remote-tracking branch ry/v0.10 into master (+9 more commits) - http://git.io/cqDKJg
21:45 < uwotm8> What's the "right" way to do something like this in node? http://pastebin.com/LAqCu4TS
21:46 < FoxDiller> I wish the opposite of JSON.stringify(); was STRING.jsonify();.
21:47 < Industrial> Anyone know if https://github.com/jakesgordon hangs on IRC?
21:47 <@isaacs> uwotm8: one sec, gisting
21:48 < uwotm8> appreciate it, isaacs 
21:48 < frk141> any ideas why i just end up in a segfault? https://gist.github.com/anonymous/3b5b9db88eb760e244f5#file-gistfile1-cpp-L67
21:49 < pachet> uwotm8: https://gist.github.com/pachet/5615853
21:49 < uwotm8> ahhhh
21:49 < uwotm8> that's cool
21:50 < uwotm8> thanks pachet 
21:50 < kenperkins> probably needs a null check, and setTimeout :)
21:51 < kenperkins> isaacs: how would I go about trying to find a case where stream.pipe isn't calling the callback? I seem to have a (very complex) repeatable test
21:51 <@isaacbw> what's that word that means how important or 'near the front' something is
21:51 <@isaacbw> so you process objects with a higher _____ before ones with a lower ______
21:51 < pachet> priority
21:51 < kenperkins> priorpity
21:51 < kenperkins> derp
21:51 < pachet> pity the fool
21:51 <@isaacbw> woo, thanks
21:52 < Industrial> Can anyone recommend an async js state machine lib? I'm trying jakesgordon/javascript-state-machines but it seems to be broken atm :\
21:52 < Industrial> ( https://github.com/jakesgordon/javascript-state-machine/issues/49 )
21:54 <@isaacs> uwotm8: https://gist.github.com/isaacs/5615882
21:54 < uwotm8> isaacs: pretty
21:55 < uwotm8> thank you
21:55 <@isaacs> np
21:55 <@isaacbw> my native language is english, in case that was in question
21:55 <@isaacbw> words are hard
21:55 < uwotm8> :P
21:55 < kenperkins> isaacbw: just lacking a complete vocab eh
21:56 <@isaacbw> or rather, my vocabulary has some pretty large leaks
21:56 < kenperkins> so, stream.pipe, anyone?
21:56 <@isaacbw> and the lookup function is asymmetric
21:56 < kenperkins> asymmetric or async
21:57 <@isaacbw> both
21:57 <@isaacbw> I had one word on the tip of my tongue for about six months before I finally remembered it
21:58 < frk141> i try to extend node but i have a segfault here: https://gist.github.com/anonymous/3b5b9db88eb760e244f5#file-gistfile1-cpp-L67 any ideas? how to debug this?
22:04 < robertkowalski> hi
22:05 < LLckfan> Hello
22:05 < LLckfan> Does any1 know how to stop Shockwave flash from crashing? I have uninstalled both Flash and my browser (Chrome), installed both from a fresh download, and scanned my computer (come up clean). Everything is updated
22:06 < kenperkins> LLckfan: Maybe ask in the ##flash channel?
22:06 < LLckfan> No help
22:08 < william-wallace> Hello, wondering what the right channel is to get help on a simple HTTPS GET.  Starting with Node JS 0.9.2 HTTPS GET fails with error UNABLE_TO_VERIFY_LEAF_SIGNATURE.  Same code works as expected with 0.9.1 and under
22:11 <@isaacbw> LLckfan: you need to stop asking that here
22:12 < kenperkins> william-wallace: you asked that question on my npm package issue page
22:12 < kenperkins> pretty sure node 9/10 became more strict by default about SSL certs/chains
22:13 <@isaacs> william-wallace: yep
22:13 <@isaacs> kenperkins: <-- is correct
22:13 <@isaacs> set rejectUnauthorized:false in teh req opts, i believe
22:13 <@isaacs> defaults to true
22:14 < kenperkins> william-wallace: sorry I didn't answer on the issue page, but it a) had nothing to do with my bug and b) I didn't know the exact commit that changed it so I didn't want to speak from a position of no knowledge
22:15 < william-wallace> kenperkins: thank you, no problem.  I was just hoping that the fix for your bug would essentially fix this issue as well
22:15 < kenperkins> no, mine was an artifact of the service I talk to didn't have their intermediate chains set correctly
22:15 < kenperkins> so technically, it wasn't even my bug, just node v0.10 exposed their incorrectly configured certs
22:16 < kenperkins> which, I'm sure isaacs will back me up here, is a "Good thing"
22:16 < kenperkins> (enforcing people to configure certs correctly by default)
22:16 < william-wallace> @isaacs: Tried rejectUnauthorized and that works, but SSL certificate on server is production level, issued by GeoTrust Global CA, and accepting all unauthorized certs is not an option for me
22:16 < kenperkins> william-wallace: it's your intermediates most likely
22:17 < kenperkins> make sure you concat your intermediate CA certs onto the end of your production certs
22:17 < kenperkins> I'll be $3.50 that's what's wrong
22:17 < kenperkins> (bet)
22:19 < william-wallace> kenperkins: You mean the SSL cert on the web server, correct?  Meaning the web server's sysadmin needs to fix this
22:19 < kenperkins> william-wallace: yep
22:19 < kenperkins> for example, if you take your standard cert from geotrust, the .crt file doesn't include the intermediate certs by default. That's your job to concat those together before you deploy
22:20 < kenperkins> or else you have incorrectly configured certs for most SSL clients
22:20 < william-wallace> kenperkins: that is good information and a good starting pont for me, thank you!
22:21 < kenperkins> anytime
22:23 < qbit> anyone had http.request mangle pdfs? 
22:24 < qbit> not sure if i have to set encoding somewhere.. but defaults aren't working for sure
22:30 < kenperkins> isaacs: when piping a readable stream to http.request, when should you call req.end?
22:30 < kenperkins> when the readable stream is done?
22:31 <@isaacs> kenperkins: pipe() calls end on readable.on('end')
22:31 <@isaacs> kenperkins: you don't have to call end() yourself
22:31 < kenperkins> so if I'm using pipe, I shouldn't have to worrry
22:43 < quangle> hi guys
22:49 < gabrielstuff> hello
22:50 < kenperkins> if you have a stream open and receiving data, in what circumstances will it not fire end or error
22:53 < gabrielstuff> if the stream is still open, like the twitter stream
22:53 < gabrielstuff> I never get error
22:53 < gabrielstuff> and sometime it close
22:54 < astropriate> any CSU students here?
23:01 <@konobi> astropriate: that stands for a lot of places =0
23:09 < meekohi> Is there a node.js framework/generator for user auth/login/registration? Something a little more heavyweight than passportjs that actually creates users on the backend?
23:14 < mikeal> in 0.10 writeHead doesn't appear to force write the headers
23:14 < mikeal> is there a method to do that?
23:16 < chilts> mikeal: res.writeHead() will flush them
23:17 < mikeal> doesn't
23:17 < mikeal> used to
23:17 < mikeal> but isn't on 0.10
23:17 < mikeal> i have to write something to the body before they get flushed
23:17 < chilts> http://nodejs.org/api/http.html#http_response_writehead_statuscode_reasonphrase_headers <- that's the latest .. looks like it does
23:17 < chilts> so that's wrong?
23:20 < mikeal> i know what the docs say :)
23:20 < mikeal> yeah, looks like it
23:23 < jstream> I have some node.js code that's creating JSON and sending it to a client written in processing
23:24 < jstream> the JSON is an object containing an array
23:24 < jstream> in the JSON produced by the node.js code, that array is enclosed in quotes, e.g., "[[0,0,0],[0,0,0]]"
23:24 < jstream> but, processing cannot read that array when it is enclosed in quotes
23:25 < jstream> so, should Processing be able to read the quote-enclosed array?
23:25 < ljharb> jstream: JSON is never an object. it's a string.
23:25 < ljharb> and the enclosing quotes make it invalid JSON, so those shouldn't be sent over the wire in the first place.
23:26 < jstream> ljharb: Yes, I should have said the JSON represents an object containing an array
23:26 < jstream> ljharb: So, is there some formatting I should do between .stringify and client.write ?
23:26 < ljharb> no, JSON.stringify doesn't include wrapping quotes.
23:26 < ljharb> if you console.log the string, it will print it with wrapping quotes. perhaps that's the confusion?
23:28 < jstream> Here's the string that's being sent over the wire, it is produced directly from a call to stringify: {"type":"grid","griddata":"[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]"}
23:28 < ljharb> right. so if you parse that to foo, and do foo.griddata, it will be a string.
23:28 < ljharb> are you doing two stringifys?
23:28 < shesek> jstream, the griddata property is already a string
23:29 < shesek> ah, ljharb was faster :)
23:29 < mscdex> anyone know what the url is for module tarballs in npm offhand?
23:29 < jstream> :forehead slap:
23:29 < jstream> yes, I am doing two stringifys
23:29 < jstream> durr, thanks for pointing that out
23:30 < ljharb> np
23:30 < jstream> I had throught I fixxed that, apparently now
23:30 < jstream> not*
23:30 < shesek> mscdex, http://registry.npmjs.org/NAME/-/NAME-VER.tgz
23:31 < mscdex> shesek: thanks
23:31 < shesek> you welcome
23:47 < jtomasrl> in mongo is it possible to have { "one": {}, "two": {} } and to insert "three": {}
23:47 < dypsilon> jtomasrl, use $set operator
23:48 < DarkArgon> {$set: {"three": value}}
23:48 < DarkArgon> (i think)
23:48 < dypsilon> correct
23:49 <@isaacbw> jtomasrl: there is a #mongodb channel
23:50 < jtomasrl> #mongodb is like a ghost town
23:50 < jtomasrl> ty guys
23:55 < DarkArgon> i want node streams in the browser!
23:57 <@Nexxy> DarkArgon, browserify them?
23:57 < s5fs> Nexxy: hai!
23:57 <@Nexxy> s5fs, o hey!
23:58 < DarkArgon> nah i want to download/stream a file
23:58 < s5fs> Nexxy: I created a debian vm with a private npm repo on it, it's prob 30gig. while i was initially excited to stuff this onto a rpi or something it prob makes more sense to just give a VM to each of the diff groups who may need one at the conf. thoughts?
--- Log closed Tue May 21 00:00:02 2013
