--- Log opened Sat May 18 00:00:15 2013
00:02 < Jester831> Anyone know what ./application refers to when crud scaffolding with compoundjs/
00:06 < DonVitoCorleone> .mass POPUNI ZA TENKOVE http://tinyurl.com/upitnik-za-tenkove I CIM DOBIJES UDARAJ PO DO
00:07 < DonVitoCorleone> .mass POPUNI ZA TENKOVE http://tinyurl.com/upitnik-za-tenkove I CIM DOBIJES UDARAJ PO DO
00:07 <@isaacbw> >> 300/4
00:07 < purr> isaacbw: (number) 75
00:08 < keyosk> What exactly can we make that bot do?
00:10 < FoxDiller> Wish me luck, I'm switching from net.Server to tls.Server. ;)
00:11 < passcod> keyosk, I think webworkers (read: threads with string-only comms) have their utility, esp. if one wants to avoid an entire class of threading problems.
00:23 < Nika_> >> 45 * 25
00:23 < purr> Nika_: (number) 1125
00:24 < keyosk> Really though, what exactly can we make purr do?
00:24 < Kenta> >> 0/(0^0)/0/0
00:24 < purr> Kenta: (number) NaN
00:25 < keyosk> >> [1,2].reduce(function(a,b) { return a + b; });
00:25 < purr> keyosk: (number) 3
00:25 < keyosk> Oh neato.
00:25 < keyosk> >> help
00:25 < purr> keyosk: ReferenceError: help is not defined
00:25 < keyosk> lol... worth a shot
00:26 < Nika_> >> define help
00:26 < purr> Nika_: SyntaxError: Unexpected identifier
00:29 < bnoordhuis> >> for (;;) String.fromCharCode(Math.random() * 26 + 0xffffffff | 0)
00:29 < purr> bnoordhuis: Timeout Error: Execution time exceeded 2 seconds
00:29 < bnoordhuis> >> for (;;) String.fromCharCode(Math.random() * 26 + 0xffffffff | 0)
00:29 < purr> bnoordhuis: Timeout Error: Execution time exceeded 2 seconds
00:29 < bnoordhuis> one more try
00:29 < bnoordhuis> >> for (;;) String.fromCharCode(Math.random() * 26 + 0xffffffff | 0)
00:29 < purr> bnoordhuis: Timeout Error: Execution time exceeded 2 seconds
00:29 < bnoordhuis> purr is probably not x64 v8
00:29 < keyosk> You really wanted to break it :D
00:29 < Nika_> >>
00:30 < Nika_> >> while(true)
00:30 < purr> Nika_: SyntaxError: Unexpected end of input
00:30 < Nika_> >> while(true){}
00:30 < purr> Nika_: Timeout Error: Execution time exceeded 2 seconds
00:31 < keyosk> >> process.pid
00:31 < purr> keyosk: ReferenceError: process is not defined
00:31 < keyosk> o_O
00:31 < keyosk> I'm guessing purr is simply a REPL with some closures
00:31 < bnoordhuis> probably just v8, not node
00:32 < keyosk> Any idea who's maintaining it?
00:32 < bnoordhuis> elliottcable: you're behind purr right?
00:49 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:55 <@isaacbw> hello beautiful
01:09 < elliottcable> Anybody know, off the top of their head, a list of the available “compile all this code into one file”-type projects?
01:09 < elliottcable> I know there's browserify, and then there's just, like, using CoffeeScript's --join ...
01:10 <@isaacbw> cat
01:10 < elliottcable> isaacbw ⑊ 'course, but I'm looking into alternatives.
01:10 < elliottcable> Preferably something supporting require().
01:11 <@isaacbw> for clientside? browserify will be your best bet
01:14 < wet> Hi
01:14 < zamnuts> question: using fs.mkdir('C:\\path\\exists\\newdir',...) returns error EEXIST on windows when C:\path\exists is valid and newdir does not exist. help?
01:21 < ayjayz> Hi, I am having problems with my nodeunit test when I use hash streams
01:21 < ayjayz> http://pastebin.com/D5sqr3Wr
01:21 < zamnuts> I was able to successfully fs.mkdir C:\\path\\exists with nodejs, but cannot make any sub directories~ mode is 0666
01:21 < ayjayz> Is the what I've narrowed it down to
01:22 < ayjayz> I was wondering if anyone with a bit more nodejs experience than I could have a look if I'm doing anything stupid
01:23 < ayjayz> The presence of a call to read from the hash stream seems to somehow change the way that nodeunit runs the test?!
01:39 < ningu> nodus iavascriptiensis: the Roman version of node.js
01:42 < zamnuts> well in the event anyone checks the logs or wonders about an answer to my question, i removed a fs.exists call that was being made before the fs.mkdir call.
01:42 < ningu> zamnuts: not sure what you are doing but you could use the mkdirp module
01:43 < zamnuts> ningu, ty, but i was using mkdirp module and it wasn't working either (wasn't throwing any errors what-so-ever), so i switch to fs.mkdir to weed out the problem
01:44 < ningu> ah, ok
01:45 < zamnuts> but if you can shed some light as to why a fs.exists(path,function(exists){fs.mkdir(path..);}); would throw EEXIST i'd love to konw
01:48 <@isaacbw> zamnuts: search for 'EEXIST'
01:50 < zamnuts> isaacbw, "Easier to Ask Forgiveness than Permission" - in other words, i don't need the fs.exists to begin with.
01:51 < elliottcable> bnoordhuis ⑊ well, ish, yes
01:52 <@isaacbw> zamnuts: it seems like what you were doing is saying, 'if directory d exists, create it'
01:52 <@isaacbw> which is strange
01:52 < elliottcable> bnoordhuis ⑊ I suppose I'm responsible for him, though he's developed primarily by devyn, micahjohnston and (originally) eboyjr
01:53 < zamnuts> isaacbw, sorry, i left out the `if ( !exists )` in my message
01:53 < elliottcable> keyosk, bnoordhuis ⑊ it's actually both Node *and* V8. There's a shim providing a new V8 context which is used for the evaluation of untrusted user's code, or something like that. it's all a little messy, and I didn't write it, so I can't give you specifics.
01:54 < elliottcable> it *is* node, though:
01:54 < elliottcable> process.pid
01:54 < purr> elliottcable: 21905
01:54 <@isaacbw> zamnuts: that makes more sense
01:54 < elliottcable> just not for any random user.
01:55 < zamnuts> isaacbw, i did a search for EEXIST (earlier i did one with a mkdir and nodejs keywords) and didn't find much
01:55 < FoxDiller> elliottcable: Does it parse every line in this chat?
01:55 < zamnuts> isaacbw, no worries, I removed the fs.exists check and just got straight to the point.
01:55 < zamnuts> thanks
01:56 < elliottcable> FoxDiller ⑊ that line of mine had two invisible characters before it, equivalent to >> (^O^O)
01:56 < elliottcable> keyosk ⑊ also, >> is far from his only feature ... but most of them are banal or offensive, and are disabled in large channels like this one. You're welcome to join #purr and play with him there, where he's a little more unfettered.
01:56 < elliottcable> or #elliottcable.
01:57 < elliottcable> as for help, you wanted this, I believe:
01:57 < elliottcable> -commands
01:57 < purr> elliottcable: Valid commands are: --, -best, -commands, -countdown, -dequeue, -dick, -factoid, -find, -forget, -g, -hates, -learn, -loves, -purr, -queue, -sol, -start, -stop, -topic, -twister, -what, -whohates, -wholoves
01:57 <@isaacbw> zamnuts: it means the file already exists
01:57 < keyosk> Yes! cool thank you :D
01:57 < elliottcable> (although that list is years out of date, and he's got a metric fuckton of undocumented/unlisted commands and hacks.)
01:58 < elliottcable> he also tracks loves and hates, although nobody ever notices.
01:58 < zamnuts> isaacbw, fs.exists' callback's first argument is a boolean, true if exists, false if not exists, correct? i verify the boolean is false before attempting to create the dir
01:58 < elliottcable> i.e., /lastlog says 42 ſ 100 18   CharlesV: <3 them nodes
01:58 < elliottcable> -wholoves them nodes
01:58 < purr> elliottcable: them nodes is loved by CharlesV.
01:58 < elliottcable> -wholoves node
01:58 < purr> elliottcable: node is loved by yeshi and LuckyBurger.
01:58 < elliottcable> etc, etc, etc.
01:58 < elliottcable> -loves keyosk
01:58 < purr> elliottcable: keyosk doesn't love anything :(
01:59 < elliottcable> what a curmudgeon. ;)
01:59 <@isaacbw> zamnuts: yea, something else must have been going on. But if it works now, great
02:00 < keyosk> -loves purr
02:00 < purr> keyosk: purr loves everybody.
02:00 < zamnuts> isaacbw, yes i'm sure, very weird, there aren't locks on dirs? i don't have to .close right (then again there isn't even a handle TO close).
02:00 < keyosk> What a free spirit that one is
02:00 < keyosk> -wholoves purr
02:00 < purr> keyosk: purr is loved by devyn, Nuck, elliottcable, gqbrielle, darkf, IamTash, Navarr, sechrist, jeannicolas, special-agent-A, special-agent-B, SphereCat1, isaacs, chapel, tees, FireFly, mix, sanitypassing, vil, mscdex, elliottcabl3, brr, Nuuuuuuuuck, micahjohnston_, and whitequark.
02:01 <@isaacbw> zamnuts: not afaik
02:01 < zamnuts> isaacbw, anyways, case closed (for now), thanks for the input
02:02 < elliottcable> keyosk ⑊ My only request is that you don't get purr banned from here by playing with him here and making a lot of noise ... that's what #purr is for. (=
02:02 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:02 < keyosk> elliottcable : No worries, I'll keep my bugging of purr to the absolute bare minimum =)
02:03 < FoxDiller> elliottcable: Wicked!
02:05 < keyosk> elliottcable : Does it support interactions of whispers?
02:06 < keyosk> Oi, we both have 919 cell phones :D
02:09 < elliottcable> keyosk ⑊ interactions of whispers?
02:10 < keyosk> If I were to whisper him, would he whisper back?
02:11 < elliottcable> yep!
02:12 < elliottcable> I believe some functions don't work in whispers, though.
02:12 < elliottcable> It's pretty limited. He's designed to be controlled from a channel.
02:13 < keyosk> Alright, if I get bored later and want to run him through some loops I'll be sure to check it out in his channel or yours :)
02:15  * elliottcable laughs
02:15 < elliottcable> 'ta
02:17 < elliottcable> ericelliott ⑊ two T's! Don't see that very often.
02:17 < elliottcable> much less both.
02:18 < elliottcable> ericelliott ⑊ I'm obligated to offer: If you want an http://ell.io/ redirect, or eric@ell.io e-mail, it's yours.
02:27 < ericelliott> elliottcable: Thanks for the offer. Highlander.
02:28 < ningu> 919 cellphones is too many
02:28 < ningu> which highlands are we talking about?
02:33 < ericelliott> ningu: my ancestors are from Scottland
02:33 < ericelliott> Scotland, even
02:34 < ningu> you just have this urge to double letters I guess
02:34 < ericelliott> but as elliottcable says, two t's are better.
02:34 < ericelliott> ;)
02:34 < ningu> the scottish highlands are quite different from the new guinea highlands
02:34 < ericelliott> I'm sure. =)
02:35 < ericelliott> I figured an elliott would get the reference. =)
02:35 < ningu> for the sake of health and culinary variety, I think someone in the uk needs to set up a no-fry zone
02:42 < myndzi> i'm getting an error "Object #<IncomingMessage> has no method 'unpipe'"
02:43 < myndzi> but i don't see why that should be?
02:43 < myndzi> it is a readable stream, and the pipe command worked
03:21 < Nika_> if anyone interested what I have been working today http://youtubespotifynodejs.eu01.aws.af.cm/ sourcecode in the footer
03:32 < AAA_awright> Oh hello socket.unref()
03:32 < AAA_awright> When were you added
03:32 < nog> hello
03:37 < elliottcable> nog ⑊ hello
03:38 < nog> elliottcable: nice to meet you!
03:40 < nog> im new to node and doing what i can to learn it (awesome btw.. been able to write some REST services in no time.. love it)
03:40 < elliottcable> nog ⑊ You too!
03:40 < nog> anyone in here ever messed with ranviermud? 
03:56 < nog> btw, writing a REST service that could handle 10K transactions per second.. on my workstation.. rocked.. (using mongodb) 
03:56 < ningu> nog: have you seen restify btw? that's the de facto standard framework for providing web services
03:57 < ningu> and nodeup 44 is all about APIs
03:58 < nog> i am trying to remember if it was restify or not that i played with at work (would have to log into my system there)
03:59 < nog> the 10k tps was done with node+express
03:59 < ningu> express is fine, restify has some additional stuff that's useful for APIs
04:00 < nog> ill check out restify
04:00 < nog> giong from work experience to a personal project.. i am an old school MUDder and coder for MUD's trying to figure out if its even possible to do a hot reboot with node...
04:01 < nog> keep all the sockets open but reload the running code
04:01 < ningu> hmmm
04:01 < ningu> maybe, I dunno
04:02 < nog> im still very new and have only done a small amount of googling.. figured i would pop in here to possibly save some trouble.. haha
04:03 < DarkArgon> its possible.. but dangerous
04:04 < nog> DarkArgon: can you elaborate?
04:04 < DarkArgon> a better way to do it to have multiple cluster workers
04:04 < DarkArgon> let them die gracefully and spawn new ones
04:04 < ningu> DarkArgon: will that keep the sockets open?
04:04 < nog> DarkArgon: but actually keeping the sockets open and connected?
04:05 < DarkArgon> http?
04:05 < nog> DarkArgon: ohh, no.. not http... let me dig into ranviermud to see what library is being used for sockets
04:05 < ningu> probably just net.socket
04:05 < DarkArgon> socket.io?
04:05 < ningu> oh, maybe
04:06 < nog> ohh wow.. looks like its using express
04:06 < nog> nope.. nm
04:06 < nog> :q
04:06 < nog> doh
04:06 < nog> telnet.js by wez furlong
04:06 < nog> (digging more)
04:07 < nog> https://github.com/wez/telnetjs
04:08 < DarkArgon> i think this is using nodes net
04:08 < nog> i think that is the key to what i am wanting to do... i guess i need to read more into it
04:09 < DarkArgon> just try server.close() and see if it works
04:10 < nog> naw, i dont want to kick off connected clients
04:10 < nog> want to keep them connected but reload the working code
04:10 < nog> i could show C examples ;)
04:11 < DarkArgon> close will stop to accept new connections
04:11 < DarkArgon> it won't dc old ones
04:12 < nog> but can the old ones call newly reloaded code? thats the thing, i can understand new connections running on new code.. i cant grasp in the node world how i can save a state of a connection but then load it into newly running code
04:12 < DarkArgon> if you really wan't to hotswap code you probably should modularize the code you want to swap
04:13 < DarkArgon> and then do var name = require.resolve("./modulename");
04:13 < DarkArgon> delete require.cache[name];
04:13 < DarkArgon> after that require it again
04:13 < nog> ohh, that makes sense
04:14 < nog> but will that change the code that a listener is using? as in, it loads the code for the listener.. but i want to replace the code that listener will run..
04:15 < DarkArgon> idk
04:17 < nog> i guess thats really the key here..
04:17 < nog> being able to replace the running code of a specific listener..
04:18 < DarkArgon> i guess there always is some hacky solution.
04:19 < s5fs> ship it!!
04:19  * nog hates hacky solutions..
04:19 < nog> haha
04:20 < nog> but it may be the only way.. 
04:20 < nog> this is just a personal project/idea.. but
04:20 < DarkArgon> lol delete require.cache[name]; already is somehow hacky
04:20 < nog> true
04:21 < DarkArgon> also u always can eval() xD
04:21 < AAA_awright> NO
04:21  * nog cringes
04:22 < nog> the past year i have been caught up maintaining a php codebase that the original writer used eval() like it was candy..
04:22 < nog> its been a joke for about 8 months that i am going to write a framework that the actual code is eval(somesqlstatement) and thats it
04:23 < nog> all the actual code of the framework lies in the sql
04:24 < jcrugzz> nog: that sounds terrible to read through, the pain..
04:24 < nog> jcrugzz: you have NO idea
04:24 < nog> sql statements to be run stored in a row of a table..
04:25 < DarkArgon> wtf... thats just pervert
04:27 < nog> yea, its insane.. luckily we are getting the chance to replace it.. its an uphill battle though
04:28 < nog> and with our plans so far.. node is integal..
04:28 < DarkArgon> i have another more cleaner approach. put your code to replace in a child process. let the master process talk to it and kill it & respawn it after code changes
04:29 < nog> ohh, i like that.. 
04:29 < AAA_awright> Your process should be able to survive restarts anyways
04:30 < AAA_awright> It doesn't have to be cheap, just survivable
04:30 < nog> AAA_awright: yea, survivable.. because this isnt something that is going to happen anywhere near frequently..
04:30 < nog> so it can be very clostly to run.. as long as everyone survives it
04:31 < nog> kind of an interesting approach to use the master process as a director to a child process.. the master holds the connections but the child runs everything recieved from the master..... 
04:32 < DarkArgon> doesn't sound to uncommon
04:32 < nog> yea...
04:33 < AAA_awright> That's your standard gateway setup,
04:33 < AAA_awright> I just use Nginx and a process pool
04:33 < ningu> gateway 2000?
04:33 < AAA_awright> Send INT or TERM to the processes one at a time, let them finish their current requests, they'll shut down and restart with new code
04:34 < nog> right.. but this is a completely different approach than http... 
04:34 < ningu> why have more than one child process? unless you have more than one core
04:34 < AAA_awright> Practically, there's still I/O overhead in Node.js
04:34 < AAA_awright> Using (cores+1) processes is a good idea
04:35 < AAA_awright> But also, you can take down one process and leave the other running to handle incoming requests, so there's always something running
04:35 < nog> ohh yes, absolutely
04:35 < ningu> I just realize... my macbook pro is an apple with two cores
04:35 < ningu> realized*
04:35 < jcrugzz> this sounds like what cluster is for
04:35 < AAA_awright> And most cores nowadays are also multithreaded, so it's more like cores*2+1
04:35 < nog> but eventually all connections have to move over to the new processes
04:36 < AAA_awright> Though that should show up as a seperate CPU anyways...
04:36 < AAA_awright> cat /proc/cpuinfo
04:36 < nog> most of the time we think of connections as something that starts and ends quickly..
04:36 < AAA_awright> This poor, single-core p4 shows two CPUs because hyperthreading
04:36 < AAA_awright> My servers show 4-8 CPUs
04:36 < nog> but in my scenerio.. a connection could persist for hours...
04:36 < AAA_awright> Doing what?
04:37 < ningu> that's how MUDs work
04:37 < ningu> we're on IRC, think of IRC
04:37 < AAA_awright> IRC servers, etc
04:37 < nog> AAA_awright: telnet connection.... for a MUD... im trying to expand on https://github.com/shawncplus/ranviermud
04:37 < AAA_awright> You *don't* restart the server in those cases
04:38 < AAA_awright> Or you have a network of them, and the restarts take 24 hours or more
04:38  * nog shakes head
04:38 < AAA_awright> I also run Icecast for instance, for streaming media, where 10% connections run >2hours and can go indefinitely, 24 hours or more
04:38 < nog> if you are familiar with MUDS... and their implementations in C
04:38 < AAA_awright> I have two servers that take the load, and they get upgraded days apart from each other
04:38 < nog> (and what i am talking about could be impossible in node.js ... )
04:38 < nog> you can do a hot reboot.. or copyover..
04:39 < nog> actually able to keep the process running and all connections open..
04:39 < nog> but actually reload the running application
04:39 < AAA_awright> That's risky
04:39 < AAA_awright> And possibly not even possible with ECMAScript
04:39 < AAA_awright> nog: The solution is just two systems, networkable, shift the load to one when the other needs to be restarted
04:39 < AAA_awright> That's how most long-running stuff works
04:40 < nog> ohh, i am not under the impression that what i am talking about is possible... 
04:40 < nog> i understand that node is created more for web/http type transactions..
04:41 < ningu> nog: I would probably write a front-end server that would proxy everything to a back end
04:41 < ningu> the same as the parent/child process idea but in separate processes
04:41 < AAA_awright> There's existing systems that do that though
04:41 < ningu> in that case I'd use those :)
04:41 < ningu> what systems?
04:41 < AAA_awright> Nginx does IMAP, HTTP, and TCP
04:41 < nog> just in my digging around and seeing that the dude wrote a MUD in node, it got my geek juices flowing
04:42 < ningu> AAA_awright: but could nginx handle the case of a long running connection where the backend restarts?
04:42 < ningu> I forgot that nginx could do tcp reverse proxying
04:42 < AAA_awright> No, you'd have to kill new connections and wait for the existing ones to finish
04:42 < AAA_awright> er, *close the listener to new connections
04:43 < ningu> so there are not existing systems that do it...
04:43 < nog> AAA_awright: thats the point..being able to keep existing connections alive but use new code
04:43 < ningu> nog: how much state is there to preserve from the old to the new code?
04:43 < DarkArgon> nog. just don't restart your master server
04:43 < DarkArgon> let it handle the connections
04:43 < DarkArgon> problem solved
04:43 < AAA_awright> nog: So what's wrong with my system then? You bring up a new instance, new connections get handled by that, and old connections remain on the old instance until they're all closed
04:43 < ningu> because he wants old connections to use new code
04:44 < AAA_awright> nog: You sure that's actually necessary?
04:44 < nog> AAA_awright: have you ever played a MUD?
04:45 < ningu> I can see how the master server would maintain all the connections but if it was just a passthrough I don't know how the servers it proxies to would maintain continuity after restarting them with new code
04:45 < AAA_awright> I know of them
04:45 < nog> idealy, the system would keep all connections open.. save each connection state to a hash ring maybe? reload the code.. load up each connections state from the hash ring, and continue
04:45 < ningu> maybe the master server would have to maintain both the connection and any shared state, or that could be on a redis instance perhaps
04:45 < ningu> nog: that sounds pretty reasonable and more of a node-ish way of doing it
04:45 < AAA_awright> I've tried doing systems like that and it requires a LOT of effort
04:46 < AAA_awright> Doing it without bugs is hard and there's a ton of edge cases
04:46 < DarkArgon> do the sockets need to talk to each other in any way?
04:46 < ningu> AAA_awright: well, that's his use case, it isn't really a choice
04:46 < ningu> the only question is how best to acheive it
04:46 < nog> AAA_awright: ohh yea, i agree... this is a personal project.. just screwing around.. i have built C based MUDS (well i didnt write the underlying base framework code myself though)
04:46 < nog> DarkArgon: yes, the sockets are always talking to each other
04:47 < ningu> nog: node is not just designed for http btw, it's good at network stuff in general
04:47 < nog> DarkArgon: as in.. what i do on my socket /could/ be viewed by your socked
04:47 < nog> socket*
04:48 < nog> ningu: ohh yea.. it just seems that most everything that has been written for it so far is very much http inclined
04:48 < ningu> I think you could come up with an architecture to make this work if you split it into a connection manager and handler
04:48 < nog> which is no big deal..
04:48 < ningu> socket.io is not http
04:48 < ningu> and is one of the most popular node modules
04:48 < nog> yea
04:49 < AAA_awright> nog: Specifically, I tried doing something like that for an ircd, and your gateway has to keep the tcp connections alive, and store the IRC connection state, including channels the user is in, users on the channel, modes, which involves storing the IRCd initial connection settings, etc
04:49 < AAA_awright> More often than not the bug is in THAT than in the end program
04:49 < ningu> well that's why I suggested using redis to track state
04:49 < nog> i like the idea of using cluster and the master is the connection manager and all the forks handle the acual workings of the app.. and you can replace the forks with new running code
04:49 < ningu> don't keep it in either the connection manager or handler
04:50 < nog> a redis hash ring seems to be key too
04:51 < nog> btw, i love this 
04:51 < AAA_awright> nog: Really, just design the program to be modular and load as much from the database as possible. Look at the ircd, it doesn't do authentication or anything, there's a seperate daemon that provides user authentication. The IRCD just passes off the user credentials, and reads back user id information.
04:51 < nog> brainstorming is awesome
04:52 < AAA_awright> If the authentication daemon goes down, users stay authenticated, but new users can't log in until it comes back up, right
04:52 < nog> ya
04:52 < ningu> are you nog from ds9?
04:52 < nog> ningu: great guess!
04:52 < AAA_awright> Be like that, but write a network of HTTP services
04:53 < nog> a lot of people dont get it first try somehow
04:53 < ningu> hehe
04:53 < AAA_awright> My services communicate with each other over HTTP
04:53 < FoxDiller> I <3 nog.
04:53 < ningu> anyway, I'm out, good luck
04:53 < nog> first ferengi admitted to starfleet!
04:53 < nog> thanks ningu 
04:54 < nog> have a good one
04:54 < FoxDiller> nod: exactly!
04:54 < FoxDiller> I just switched my game server from net.server to tls.server, and I got a stream! W00t.
04:55 < nog> AAA_awright: yea, i see what you mean... i am not sure for something like this there is a need to break things out like that.. causes overhead that isnt needed
04:55 < nog> AAA_awright: i think i needs to be an all emcompassing application... if that makes sense
04:56 < AAA_awright> HTTP doesn't have that much overhead, after you consider how much semantics are packed into it
04:56 < AAA_awright> If you had to implement those in your application the difference isn't much
04:56  * nog personally thinks its amazing he even got nog registered with freenode.. 
04:56 < FoxDiller> Agreed
04:56 < ningu> ferengi means foreigner in Persian, literally Frank
04:56 < FoxDiller> nog, almost as awesome if I could get Fox.
04:57 < nog> haha
04:57 < nog> granted it was around a decade ago i registered nog
04:57 < ningu> it's also apparently the category that eggnog belongs to, but I am not aware of any other nog of that sort
04:57 < nog> most people refer to eggnog with my nick before they say anything of DS9
04:58 < FoxDiller> lol
04:58 < FoxDiller> eggmilk
04:58  * nog likes eggnog too
04:58 < FoxDiller> Cognac.
04:58 < nog> burbon!
04:59 < FoxDiller> I had this crush on Rom like Leeta did.
05:00 < nog> AAA_awright: i see using http style api's as a way to break out the code.. a way to allow for expansion server wise... so i think of it as high traffic architecture.. (wow i butchered that word)
05:00 < nog> i just wonder if it applies for something that is very small scale..
05:00 < nog> FoxDiller: i had a crush on leeta myself.. she had some serious knockers
05:00 < AAA_awright> nog: HTTP is a protocol that transfers resources or representations of resources
05:00 < FoxDiller> So I was using prototype on net.Sockets to extend functionality, but that's not what tls's secureConnection gives me. Any quick idea of what is send along?
05:00 < FoxDiller> nog: She did.
05:01 < nog> FoxDiller: probably still does.. haha
05:01 < AAA_awright> It's a database protocol, pretty much, except highly extensible, and supports any format and code-on-demand
05:01 < FoxDiller> nog: They don't fall off hopefully.
05:01 < AAA_awright> If you find yourself making a request for information, make it an HTTP request
05:01 < nog> AAA_awright: i get what you are saying.. completely.. 
05:02 < nog> AAA_awright: and you know what.. the more i think about it.. 
05:02 < nog> AAA_awright: could be interesting to change up the standard MUD thinking to something like that
05:02 < FoxDiller> I wonder if tls.CleartextStream is what I'm looking for...
05:02 < AAA_awright> I gave a whole talk on HTTP APIs, especially for internal use, I should write it up and post it
05:02 < AAA_awright> But I also want to write it into a book so idk
05:03 < DarkArgon> y no child.send() ?
05:03 < AAA_awright> I mean, I've given a number of talks on HTTP APIs, but specifically on internal ones recently... EC2 came out of an internal effort to turn all of Amazon's APIs into HTTP APIs (not very good ones, but HTTP nonetheless)
05:05 < DarkArgon> AAA_awright, what module do you recommend for internal pure http apis?
05:05 < nog> could be interesting from the MUD end.. to have one process being the connection handler.. ie... client... and then have another process that does all the api calls
05:05 < AAA_awright> DarkArgon: require('http')
05:05 < FoxDiller> Ohhh, tls gives out a Stream inherited object, but Stream is considered Unstable?!
05:06 < DarkArgon> ..awesome
05:06 < AAA_awright> If you're passing around JSON, use my jsonschema module to write schemas and parse them against that
05:06 < AAA_awright> I have a contenttype module for parsing the Content-Type of requests, so you can do Content-Type: application/json;profile="http://example.com/v1/schema.json"
05:06 < AAA_awright> And you know which schema, including API version, the request uses
05:07 < nog> really, its a complete change of thought when it comes to a MUD... but...
05:07 < nog> it handles growth well..
05:07 < AAA_awright> DarkArgon nog: http://magnode.org/2012/jsonschema-for-updating-content
05:08 < nog> normal MUD thought is one process to rule them all
05:09 < DarkArgon> i guess mongoose does this for me
05:09 < FoxDiller> Okay, I'm confused. Does tls actually ever emit a Socket object somewhere?
05:09 < FoxDiller> Nope, doesn't look like it.
05:10 < nog> DarkArgon: yea, i was about to mention mongoose... 
05:10 < AAA_awright> DarkArgon: jsonschema is more powerful, it allows recursion, and expecially, it allows re-use of schemas, and IDing them in your Content-Type header so people know *which* schema is being used
05:12 < nog> and probably just because i havent had anyone knowledgable enough to explain it to me... aside from the speed enhancements (which i assume are the only reason to do so) why apply on a code level a schema to a schemaless backend?
05:15 < AAA_awright> For instance, I have a single repository that stores all my JSON Schemas
05:16 < AAA_awright> So all of my HTTP servers and clients know exactly what the schema looks like
05:16 < AAA_awright> And anyone else can downlad them at the URL and see too
05:16 < AAA_awright> It's extremely powerful
05:17 < nog> yea, i get it.. a portable schema... one definition across all levels... i guess i am just weary of it being a code defined schema
05:18 < Stumbler> __dirname seems to be lowercasing the 'D' on my 'Desktop' folder, is that normal behavior?   (I'll move my project folder closer to root to avoid my problem, but it seems odd)
05:18 < Stumbler> osx
05:22 < DarkArgon> not happening here (linux)
05:26 < Stumbler> weird..  I'm doing a lot of exec stuff, and I had been fighting with errors all night, until I realized that it was all because of that single case problem
05:27 < AAA_awright> nog: code-defined schema?
05:27 < AAA_awright> JSON Schema is a draft RFC btw
05:27 < nog> AAA_awright: mongoose enforces a data type schema in the code... 
05:28 < nog> well that was wrong.. not data type..
05:28 < AAA_awright> That's what this does?
05:29 < DarkArgon> Stumbler, is everything lowercased in __dirname?
05:29 < Stumbler> not for me?
05:30 < DarkArgon> so just the D is Desktop?
05:31 < nog> im just stating that if the code enforces the schema of an object to be persisted... and the backend db doesnt care about schema... you will eventually have creep on the backend data schema... 
05:31 < Stumbler> yup.  console.log(__dirname)   produces "/Users/jonathan/desktop/node/batchScanner"
05:31 < Stumbler> where it should be /Users/jonathan/Desktop/node/batchScanner
05:31 < nog> so you have to convert all your backend data at the time of a schema change in the code..
05:32 < DarkArgon> lol...and you're sure you can't cd /Users/jonathan/desktop ?
05:32 < Stumbler> I'm guessing its a special folder thing..  moving it back in the chain
05:32 < nog> (i am just challenging the concept.. not disagreeing with it)
05:33 < Stumbler> I actually can cd there, I don't think the shell is case sensitive, but the exec'ed program I'm using is
05:34 < DarkArgon> workaround symlink desktop to Dekstop
05:34 < nog> HACK
05:34 < nog> ;) but yea
05:35 < DarkArgon> or rename Desktop to desktop xD see if something breaks
05:35 < nog> its a guarantee that something would break renaming Desktop to desktop
05:35 < DarkArgon> i know..
05:36 < Stumbler> lmao
05:36 < nog> symlink would be the best bet.. to get it working asap
05:36 < FoxDiller> Goodbye net.Server.prototype.broadcastPacket, *tear*
05:36 < nog> ln -s ~/Desktop ~/desktop 
05:36 < nog> if you dont know the command
05:37 < Stumbler> *shrug* I don't know, I think it's bad practice to keep source on the desktop anyway, so I'm moving it to /dev
05:40 < DarkArgon> is this another joke or is /dev something else in osx
05:42 < nog> haha
05:42 < nog> i am not sure
05:42 < Stumbler> That was a moment of stupid, don't mind me
05:43 < nog> been at least 6 years since i have used bsd
05:43 < DarkArgon> LOL
05:43 < DarkArgon> just move everything to /dev/null you will be fine
05:43 < nog> i am out for the night, been great folks.. 
05:43 < DarkArgon> bye
05:43 < nog> later DarkArgon 
05:44  * nog goes away without a /part or /away... fyi
05:44 < Stumbler> *waves*
05:46 < jesusabdullah> ~/dev maybe?
05:46 < Stumbler> I'll just use /node, lmao
05:46 < Stumbler> Technology hard, Jon ANGRY!  JON SMASH!   
05:56 < scrollback> Hello there
05:56 < scrollback> what's up?
05:57 < scrollback> Hi FredC
05:59 < DarkArgon> see what i have done with my raspberry pi + node http://pi.rinic.de/urandom
06:00 < FoxDiller> Petabytes?
06:01 < granjef3> I am making an omegle clone as a project
06:01 < granjef3> in socket.io, i have a room, with all the users who are not connected to another user
06:02 < granjef3> How can I make a function to run through this room every few seconds, and look to see if another free user was found
06:03 <@konobi> setInterval
06:03 < DarkArgon> just the finest urandom FoxDiller. get it while its hot
06:03 < DarkArgon> you can never have enough urandom
06:04 < Zolmeister> granjef3: just have an event that triggers when someone changes 'free' status
06:04 < Zolmeister> DarkArgon: How many clients till the pi gives you think?
06:04 < granjef3> well, thats what im doing now, when you click 'new chat' it adds you to the free room, and does a check for other users
06:04 < granjef3> the thing is, it only runs once
06:05 < FoxDiller> DarkArgon: I was just pleased you were kind enough to send me a Content-Length header. <3
06:05 < Zolmeister> granjef3: instead of adding them to an empty room, maybe just add them to a queue
06:05 < DarkArgon> Zolmeister, its at 100% cpu piping /dev/urandom for a single client :D
06:06 < granjef3> Zolmeister: so just add them to an array? or is there a better way to do it
06:07 < Zolmeister> granjef3: an array is fine (I would just have an array of socket connection objects)
07:10 < tom_> Is there any new book about node? 
07:11 < FoxDiller> Crap! I wanted to buy a node book today.
07:12 < ningu> what are these "books" of which you speak
07:15 < tom_> What book do you recommend? 
07:15 < whiskers75> superjoe: Are you the creator of minecraft_protocol?
07:44 < Stumbler> woohoo!  Im starting to really dig async design patterns :3   Finally got a real world (non-networking) problem solved more efficiently than I ever could have with sync patterns.
07:45 < ckknight> Stumbler: yeah, they can be nice :)
07:45 < Stumbler> Its a good feeling, getting over that hump :)
08:02 < syskk> what's the state of Node.js ORMs?
08:03 < syskk> is there any model abstraction I can use with many different persistence layer? 
08:03 < syskk> something like Rails' ActiveRecord
08:09 < minibn> mongoose
08:15  * zHalite chicken brkeh
08:23 < deoxxa> is there any way to use arbitrary http methods with node's http server?
08:24 < deoxxa> like, i can see in http_parser it checks for specific methods
08:24 < deoxxa> but i don't get why
08:25 < yawnt> deoxxa: :>
08:25 < deoxxa> :>
08:38 < gildean> deoxxa: that's a different protocol then, maybe copy the parts of http that you need and glue them to a raw tcp-server?
08:41 < deoxxa> rfc2616 says (on page 50) that the methods supported by a specific implementation aren't fixed
08:42 < deoxxa> "The set of common methods for HTTP/1.1 is defined below. Although this set can be expanded, additional methods cannot be assumed to share the same semantics for separately extended clients and servers."
08:43 < deoxxa> so it's not technically *wrong* for node's http parser to not support arbitrary methods, but it also wouldn't be *wrong* for it to not support custom headers
08:43 < deoxxa> (since they have the same kind of description in the rfc)
08:44 < geNAZt> well not supporting custom headers is wrong
08:44 < geNAZt> supporting custom methods isnt
08:45 < deoxxa> geNAZt: neither are technically wrong
08:45 < deoxxa> geNAZt: there's a set of defined headers in the RFC, and they come with the same disclaimer (i.e. implementations are free to support more headers or arbitrary headers)
08:45 < geNAZt> does the rfc say: A HTTP Server can decide if they allow Custom Headers or not ?
08:46 < geNAZt> what a rfc standart :D
08:46 < beeant> i have a question about codes organization
08:46 < beeant> im using git
08:46 < beeant> is it a good idea to separate public repo and server repo, and use git submodules?
08:47 < beeant> so /public will be submodules
08:47 < beeant> submodule
08:48 < deoxxa> geNAZt: in those exact words? no.
08:49 < sinclair|nz> so...after much fluffing around, i have settled on this.. http://pastebin.com/666fuRas as being the most appropriate means of extending nodejs types in Typescript. 
08:50 < sinclair|nz> what TypeScript really needs is a full fledged Node SDK that wraps up all this junk
08:51  * sinclair|nz adds that to the list of things to do
08:53 < vramana> tom_ : Have you seen this http://book.mixu.net/??
08:55 < dominictarr> isaacs: if I do new.pipe(old).pipe(new2)
08:55 < dominictarr> will that turn new2 into 'old mode?'
08:56 < geNAZt> dominictarr, it should make the new into old mode
08:57 < dominictarr> geNAZt: only when you do new.on('data'...)
08:57 < dominictarr> but not pipe?
08:57 < geNAZt> what a pipe from stream1 api does
08:59 < geNAZt> a piped stream will start emitting data events, acording to this code
08:59 < geNAZt> https://github.com/joyent/node/blob/master/lib/_stream_readable.js#L586
09:00 < geNAZt> so the new stream would emit data events
09:00 < geNAZt> and the new2 stream stays untouched
09:45 < othiym23> Nexxy: http://www.seeedstudio.com/depot/crazyflie-nano-quadcopter-kit-6dof-with-crazyradio-bccfk01a-p-1364.html is the tiny little drone I was talking about
09:45 < othiym23> I think I'm gonna get me one
09:46 < othiym23> 3-axis gyros + accelerometer, auto-leveling, 19 grams, not much to not like
09:46 < othiym23> now to bed
09:55 < devnull_> Aloha
09:55 < devnull_> Any one want to help me test my first deployed node.js app?
09:55 < geNAZt> devnull_, yes
09:55 < devnull_> Cool!
10:00 < yawnt> deoxxa: SILLY AUSSIES
10:01 < deoxxa> yawnt: STUPIDO ITALIANS
10:01 < yawnt> ok ,_,
10:01 < deoxxa> lol
10:16 < geNAZt> did someone in here build angularjs applications ?
10:16 < geNAZt> whats the best nodejs framework for handling with angularjs applications ?
10:18 < syskk> express
10:19 < geNAZt> so you would stick with "plain" express ?
10:19 < geNAZt> not sailjs or something ?
10:23 < maaarghk> i want my next project to be on angularjs too
10:23 < maaarghk> itd be my first node project and it makes a lot of sense
10:23 < maaarghk> angularjs just looks great
10:24 < geNAZt> well i dont need to look on seo for my next project
10:24 < geNAZt> so i want to use angularjs, but i need a model server which is want to write in nodejs
10:30 < maaarghk> a brief google found me a nice tutorial with angularjs / express / jade and it looks nifty
10:30 < maaarghk> the live demo is b0rk which is a shame but here you go anyway
10:30 < maaarghk> http://briantford.com/blog/angular-express.html
10:30 < geNAZt> well i dont like jade but due to expressjs i can use another template engine
10:31 < geNAZt> i also found this, but this doesnt have support for socket.io which i want to use
10:31 < maaarghk> haha, same :P
10:32 < maaarghk> I guess you could put the two together, instead of the call to /posts pu your socketio code there
10:33 < geNAZt> http://www.html5rocks.com/en/tutorials/frameworks/angular-websockets/
10:34 < maaarghk> same guy also has this http://briantford.com/blog/angular-socket-io.html
10:34 < maaarghk> ah those are the same thing :)
10:34 < geNAZt> yes but this doesnt merge expressjs routes in socket.io
10:34 < dhzr> you may not like jade much now, but if you're using express you'll like it later on... which can suck going from hndlbrs or mustche/ejs just my opinion
10:35 < geNAZt> dhzr, i dont like it and i developed expressjs apps before and i dont like it now :D after 3 expressjs apps :D
10:36 < maaarghk> Something I wonder about nodejs
10:36 < maaarghk> Having neever actually written a nodejs app
10:36 < maaarghk> In a production environment, how do you push updates?
10:36 < geNAZt> well i have a deployer for this
10:36 < geNAZt> you can use grunt or something
10:36 < dhzr> if you have a paas service like nodejitsu it would be a deployment/update scenario
10:37 < dhzr> similar to git cmds
10:38 < sinclair|nz> node 0.10.7 has bugs
10:38 < geNAZt> you dont say :D
10:38 < deoxxa> cool story, bro
10:39 < zapu> how are people managing bigger node projects? i have some apps that depends on one another and I dont want to dump everything into one big git repo. should I use submodules?
10:39 < sinclair|nz> deoxxa: what?
10:39 < deoxxa> sinclair|nz: your story was cool
10:39 < sinclair|nz> zapu: *cough* typescript
10:39 < geNAZt> what does typescript has todo with it oO
10:40 < deoxxa> zapu: submodules are probably a bad idea - you can set up your own NPM registry fairly easily though, which is what i have set up at work
10:40 < sinclair|nz> deoxxa: i get an empty buffer returned intermittently from a socket
10:40 < zapu> using npm was what I was going to do first
10:40 < deoxxa> zapu: or you can use git urls in package.json
10:40 < zapu> even without my own registry
10:40 < zapu> yeah, this exactly
10:41 < sinclair|nz> zapu: TypeScript is a great tool to use to manage large projects
10:41 < deoxxa> sinclair|nz: awesome! what features does typescript have to help with managing dependencies like zapu is asking about?
10:41 < zapu> stuff works with what we have now, but it should be easily installable on new machines
10:42 < zapu> so people dont have to manually clone every "subproject" and do npm install on them
10:42 < sinclair|nz> deoxxa: TS supports referencing, meaning you can have code share a common source base, and have the compiler link it all up
10:42 < deoxxa> sinclair|nz: what do you mean "returned" from a socket? are you using new streams or old streams? are you doing .read() or .read(some_number)? or are you just listening on the "data" event?
10:43 < sinclair|nz> deoxxa: honestly, i don't know what its using
10:43 < dhzr> zapu, deoxxa probably gave you the best idea private npm + git urls -- alternatively you could use irisnpm if you don't want to set it up yourself.
10:43 < deoxxa> well maybe you should understand how your code works before you point the finger at someone else's :>
10:43 < sinclair|nz> deoxxa: socket.on('data', function(buffer:NodeBuffer) {}); 
10:44 < sinclair|nz> deoxxa: i get intermittent null buffers passed in since upgrading to 0.10.7
10:44 < deoxxa> sinclair|nz: and it's a bug to get an empty buffer? is it documented that a "data" even will always return a buffer with a non-zero length?
10:44 < deoxxa> null or empty?
10:44 < nathan7> HEY HUMANS
10:44 < zapu> ill look into these, thanks, #node.js :)
10:44 < nathan7> 'sup, deoxxa 
10:44 < ckknight> nathan7: it's pretty chauvanistic to assume we're all human
10:44 < nathan7> ckknight: everyone else is implicitly greeted
10:44 < ckknight> best I can tell, I'm either a sophisticated robot or several monkeys banging away on typewriters
10:44 < deoxxa> nathan7: not much! just finished dinner, reading around various thingies
10:45 < sinclair|nz> deoxxa: null
10:45 < sinclair|nz> deoxxa: not zero length, just null
10:45 < nathan7> deoxxa: irc.log(variousThingies)
10:45 < dhzr> heh, ckk, if you're anything like me id be leaning more towards the primates
10:45 < sinclair|nz> deoxxa: if i meant to say zero length, i would have said 'zero length'
10:45 < deoxxa> <sinclair|nz> deoxxa: i get an empty buffer returned intermittently from a socket
10:46 < deoxxa> so is it an empty buffer? or is it null?
10:46 < sinclair|nz> its null
10:46 < deoxxa> get your story straight, man!
10:46 < sinclair|nz> deoxxa: in anycase, it should return something on a on('data') event, surely?
10:46 < deoxxa> well, i kind of have an idea where that could be coming from
10:47 < deoxxa> with streams2, when you .read() you can sometimes get null
10:47 < ckknight> dhzr: bah, primates are old-hat
10:47 < sinclair|nz> oh?
10:47 < deoxxa> that might have leaked into the legacy interface
10:47 < deoxxa> if it is, as you say, actually `null', and not just an empty buffer
10:48 < sinclair|nz> deoxxa: im fine with it returning null, if i know that at some point it will pass valid data
10:48 < sinclair|nz> deoxxa: at this point tho, i don't know if its going to do that or not,
10:48 < dhzr> pass it some dummy ctx?
10:48 < deoxxa> well when you .read() from a streams2 stream.Readable, it'll return null if there's nothing to return
10:49 < deoxxa> then you listen for the "readable" event and try again when it fires
10:49 < deoxxa> listening to the "data" event is a bit hacky - would it not be practical to implement a writable stream to consume the data instead (so you can do .pipe())?
10:50 < deoxxa> but as for why it's actually emitting a data event with null as the argument, i'm not sure
10:50 < sinclair|nz> deoxxa: im a bit lost in the stream interfaces, do you have a good reference i can read?
10:50 < sinclair|nz> deoxxa: noting that the docs on the topic are not very helpful
10:50 < deoxxa> yeah the docs are quite confusing
10:51 < deoxxa> i'm not sure of any up-to-date guides for streams2
10:51 < sinclair|nz> deoxxa: i think im a bit lost on how to correctly implement all this, i don't really know what level of abstraction i am at
10:51 < sinclair|nz> deoxxa: also, is streams2 a requirement?
10:51 < sinclair|nz> deoxxa: it would be nice to have code work on 0.6
10:51 < deoxxa> well, it's a much nicer interface, and if you're targeting 0.10- ah
10:52 < deoxxa> well there's the readable-stream package as well - it works on 0.8 for sure, not sure about 0.6
10:52 < sinclair|nz> well, 0.8 at a minimum
10:52 < deoxxa> (the readable-stream package is where the streams2 interface was born)
10:52 < deoxxa> sinclair|nz: if you can make do with example code to learn from, i have plenty of that sitting around
10:52 < sinclair|nz> deoxxa: are you refering to var readable = new stream.Readable(); readable._read(123) {} ?
10:53 < deoxxa> like
10:53 < nathan7> sinclair|nz: _read is an internal interface
10:53 < sinclair|nz> nathan7: im told i need to override it
10:53 < nathan7> sinclair|nz: yes
10:53 < sinclair|nz> nathan7: so i am doing so.. http://pastebin.com/666fuRas
10:53 < nathan7> sinclair|nz: Unless you're node core's lib/stream.js, you shouldn't be calling it
10:53 < deoxxa> `var stream = net.connect(1234); var bytes = stream.read(100); // bytes is now either null, or a buffer of <= 100 length'
10:54 < nathan7> sinclair|nz: .read is what you should be calling
10:54 < nathan7> sinclair|nz: ._read shouldn't be returning things
10:54 < nathan7> sinclair|nz: ._read uses .push
10:54 < deoxxa> class?
10:54 < deoxxa> this isn't javascript
10:54 < nathan7> typescript
10:54 < sinclair|nz> nathan7: ok, again, i am unclear on the interface (been looking at this thing for all about 1 hour)
10:55 < dhzr> weird stuff, that typescript
10:55 < nathan7> sinclair|nz: _read(size) { this.push(crypto.randomBytes(size)) }
10:55 < nathan7> sinclair|nz: http://nodejs.org/api/stream.html#stream_readable_read_size
10:56 < sinclair|nz> nathan7: yeah, thanks, i think i read that bit
10:56 < deoxxa> sinclair|nz: there's actually a way easier way to do most (nearly all) userland stream things - stream.Transform - take a look at https://github.com/naomik/burro/blob/master/lib/framer.js for a pretty simple example of how that works
10:56 < sinclair|nz> nathan7: one thing im not sure is reading from a socket
10:56 < nathan7> sinclair|nz: an actual socket
10:56 < nathan7> sinclair|nz: or a net.Socket?
10:56 < sinclair|nz> nathan7: yes
10:57 < nathan7> sinclair|nz: as in, is it an actual node stream
10:57 < nathan7> sinclair|nz: or is it something funky from C++land
10:57 < sinclair|nz> nathan7: no no, all node
10:57 < sinclair|nz> nathan7: let me check something quick
10:57 < nathan7> sinclair|nz: well, then you probably want a transformstream or something
10:57 < deoxxa> stream.Transform <3
10:57 < nathan7> sinclair|nz: streams2 is pull streams
10:57 < nathan7> sinclair|nz: not push streams
10:58 < deoxxa> sinclair|nz: another example of a Transform stream - https://gist.github.com/deoxxa/5295806
10:58 < nathan7> sinclair|nz: .read() on a TransformStream will .read() on what is piped to it, etc
10:58 < sinclair|nz> deoxxa: export interface NodeSocket extends stream.ReadWriteStream 
10:58 < nathan7> sinclair|nz: so the read drives things
10:58 < nathan7> sinclair|nz: the data sink is driving everything
10:58 < sinclair|nz> nathan7: i will get to all these
10:58 < nathan7> sinclair|nz: instead of streams1, where the source drives everything
10:58 < deoxxa> ok, i have no idea what NodeSocket is, nor what stream.ReadWriteStream is
10:58 < nathan7> DuplexStream
10:58 < deoxxa> both of them seem to be some custom stuff
10:58 < deoxxa> :>
10:59 < nathan7> sinclair|nz: (you just emit data, no idea if anyone's listening or anyone needs it)
10:59 < sinclair|nz> deoxxa: they are just TS interfaces into the NodeObjects
10:59 < dhzr> thats a neat little gist you got there deoxxa
11:00 < sinclair|nz> nathan7: i think a picture would help
11:00 < deoxxa> sinclair|nz: it's going to be a lot easier to talk about internal node.javascript interfaces in terms of javascript. since they are javascript. talking about them in terms of your typescript wrappers will involve a lot of guessing on both sides.
11:00 < deoxxa> well thanks, dhzr :>
11:01 < sinclair|nz> deoxxa: i am happy for you to refer to them as Readable, Writeable, Duplex and Transform, 
11:01 < sinclair|nz> deoxxa: i only just learnt these objects could be instantiated 
11:01  * sinclair|nz notes thats more TS's fault
11:02 < deoxxa> dhzr: if you can correctly figure out (without running it) what this code will output, you understand streams: https://gist.github.com/deoxxa/d92803d070722b201e5e
11:02 < deoxxa> lol
11:03 < sinclair|nz> deoxxa: i do wish someone would put out a complete nodejs type library / object facade 
11:03 < sinclair|nz> for TS, it is a chore to stumble across X and Y and then implement typings, then learn about the stuff i just typed
11:04 < sinclair|nz> its all a little backwards, but would be amazing if all that work was already done
11:04 < deoxxa> i wonder how you could avoid that
11:04 < nathan7> type inference is hard
11:04 < deoxxa> let's go shopping!
11:04 < nathan7> Types are useful as fuck though
11:04 < nathan7> for reasoning about things
11:04 < sinclair|nz> nathan7: they sure are
11:04 < nathan7> knowing Haskell ftw
11:05 < dhzr> woof... im going to have to run this just so i can trace through that, pretty cool concept to handle that flow from what my brain compiler can tell
11:05 < maaarghk> my compsci friends are always going on about haskell
11:05 < ckknight> maaarghk: Haskell is interesting.
11:06 < maaarghk> any reason why I should learn it if I have some free time for a few months?
11:06 < nathan7> maaarghk: It's not a practical language IMHO
11:06 < nathan7> maaarghk: But the concepts are very useful
11:06 < ckknight> maaarghk: learning it will help you understand type theory better
11:06 < ckknight> yeah, conceptually it's fascinating
11:06 < ckknight> in real-world use, not as productive
11:07 < deoxxa> http://www.reddit.com/r/programming/user/consultant_barbie/ lol
11:08 < sinclair|nz> nathan7: deoxxa sorry, just catching up on what you said regarding streams, i am still unclear how i would read from a net.Socket 
11:09 < sinclair|nz> i need a picture :(
11:09 < nathan7> sinclair|nz: You probably don't want to
11:09 < nathan7> sinclair|nz: what is your use case?
11:09 < deoxxa> ^ this
11:09 < sinclair|nz> nathan7: FTP client, the socket connects to a PASV endpoint and reads data from it
11:09 < deoxxa> sinclair|nz: i do a ton of stuff with streams at work, and i nearly never have to think about .read() - transform streams are where it's at
11:10 < sinclair|nz> i wish to return to the caller the same interface as one would get for a fs.createReadStream() 
11:10 < sinclair|nz> except, it would be socket.createReadStream()
11:10 < deoxxa> sinclair|nz: mainly because what you usually want to do isn't actually "read from this stream", it's "get some data from this stream into this other one, doing some stuff along the way", which is exactly what transform streams were designed for
11:10 < sinclair|nz> this way, i could pipe the output from the socket into a file for example
11:11 < nathan7> sinclair|nz: aha
11:11 < sinclair|nz> nathan7: given the stream2 stuff, vs the old stuff, i am really confused on how i would go about this
11:12  * sinclair|nz is lost in abstraction
11:12 < nathan7> sinclair|nz: TransformStream. You have some data, you want to turn it into this other data.
11:13 < deoxxa> nathan7: have you played candy box yet
11:13 < sinclair|nz> nathan7: its not really a Transform matter i am struggling with tho
11:13 < nathan7> deoxxa: candy box?
11:13 < deoxxa> nathan7: http://candies.aniwey.net/ - say goodbye to the next week of your life
11:13 < nathan7> deoxxa: ..wtf?
11:14 < sinclair|nz> its how to have a socket.createReadStream() or socket.createWriteStream() interface
11:14 < deoxxa> sinclair|nz: you probably still want a transform stream, just used in a different way
11:14 < sinclair|nz> the data doesn't need transforming, rather, just passed around in whatever form it arrives in
11:15 < deoxxa> sinclair|nz: you could use a PassThrough stream if you literally just need to push it from a to b via something else
11:15 < sinclair|nz> deoxxa: well, i appreciate i might want to flick endian values or something, but not at this time, im only dealing in FTP for now
11:15 < sinclair|nz> deoxxa: do you have an example of how that works over a socket?
11:16 < dhzr> seriously deoxxa, what have you done to one of my tabs and who is this creep ascii lollipop dealer?
11:17 < deoxxa> sinclair|nz: `function createReadStream() { var returnToCaller = new stream.PassThrough(); setImmediate(function() { var socket = net.connect(12345); socket.pipe(returnToCaller); }); return returnToCaller; }' - something like that... maybe
11:17 < deoxxa> dhzr: touch his hat
11:17 < sinclair|nz> deoxxa: note, im using var socket = new net.Socket()
11:17 < dhzr> haha sweet, i got a sword now
11:18 < deoxxa> dhzr: go chop some trees!
11:18 < deoxxa> sinclair|nz: hmm, i've never actually instantiated a socket that way i don't think
11:18 < sinclair|nz> deoxxa: is there any reason to use var socket = new net.Socket() vs net.connect() ?
11:19 < sinclair|nz> or vice versa, 
11:19 < sinclair|nz> i don't expect i want to extend the socket
11:19 < sinclair|nz> so i am fine with net.connect() i guess
11:20 < deoxxa> sinclair|nz: they're probably almost exactly the same, but don't quote me on that, because i might be completely wrong
11:20 < sinclair|nz> deoxxa: in your example, you already have socket.pipe()
11:20 < sinclair|nz> so, i can simply connect to the endpoint, and pipe() ?
11:21 < sinclair|nz> surely, that solves all problems, 
11:22 < deoxxa> sinclair|nz: correct
11:22 < deoxxa> sinclair|nz: in fact, you could probably just `return net.connect(port, host);'
11:22 < sinclair|nz> deoxxa: yeah
11:22 < sinclair|nz> heh
11:22 < deoxxa> yay! streams!
11:22 < nathan7> streams :D
11:23 < deoxxa> dhzr: i've eaten about 3.3 million candies so far
11:23 < ckknight> that seems excessive
11:23 < dhzr> hahaha
11:23 < dhzr> im about to get dead by some GOB
11:23 < deoxxa> ckknight: i'm going for the world record for diabetes
11:24 < deoxxa> haha
11:24 < deoxxa> yeah
11:24 < deoxxa> they'll kick your butt at first
11:24 < deoxxa> gonna need to grind that forest for a while i reckon :P
11:24 < dhzr> haha, i feel like im back in wow all over again, just with better graphics.
11:25 < Qalqi> is there a pragmas framework for javascript?
11:25 < sinclair|nz> deoxxa: what does net.connect() return?
11:25 < dhzr> console.log?
11:26 < deoxxa> sinclair|nz: probably a net.Socket
11:26 < sinclair|nz> deoxxa: the TS decl stuff says no :(
11:26 < geNAZt> why ts
11:26  * sinclair|nz makes it say yes
11:26 < deoxxa> dhzr: ha, i think this is way more fun than WoW would be (but i've never played WoW before)
11:26 < geNAZt> use js in node JS
11:27 < sinclair|nz> geNAZt: why?
11:27 < geNAZt> because anything other sucks balls
11:27 < geNAZt> and adds a layer of magic weirdom and shit
11:27 < Qalqi> is concept of pragmas not necessary in javascript?
11:27 < sinclair|nz> geNAZt: you are so wrong, but whatever
11:28 < geNAZt> yes using a third party script language in a system which is built on js makes sense
11:28 < dhzr> i like coffee-script... but i guess it's all personal preference as long as you're productive 
11:28 < sinclair|nz> geNAZt: im not getting into a JS vs TS debate, its pointless, 
11:29 < geNAZt> you dont need to, 
11:29 < sinclair|nz> all i can say is, i use TS as a tool to write better JS
11:29 < geNAZt> the ecosystem on node is built in js
11:29 < geNAZt> and if you built in in "whatever" language it is your problem :D
11:29 < sinclair|nz> and i expect coffeescripters do the same
11:29 < rendar> TS is?
11:29 < Qalqi> TS? Does that meanTeaScript?
11:29 < deoxxa> mmmm
11:29 < deoxxa> tea
11:30 < sinclair|nz> geNAZt: "all i can say is, i use TS as a tool to write better JS" what is wrong with that?
11:30 < Qalqi> will someone help me with my question please
11:30 < geNAZt> sinclair|nz, there is nothing wrong if it would work in any case
11:31 < dhzr> Qalqi, I'm not sure if i can help you bud 
11:31 < sinclair|nz> geNAZt: it works in every case
11:31 < geNAZt> look into coffeescript for example, who says that the "compiled" js out of it is bug free ?
11:31 < geNAZt> and who says its the best js ?
11:32 < sinclair|nz> geNAZt: i happen to trust Microsoft compiler technology
11:32 < rendar> msvc is a quite good compiler
11:32 < geNAZt> trust and microsoft in one sentence
11:32 < geNAZt> yes :D
11:32 < nathan7> geNAZt: They claim it passes jslint
11:32 < nathan7> geNAZt: It doesn't.
11:33 < sinclair|nz> nathan7: what version?
11:33 < nathan7> sinclair|nz: Latest too, afaik
11:33 < geNAZt> who says that coffee scripts will run in further nodeJS versions ?
11:33 < dhzr> what doesn't? cs?
11:33 < geNAZt> noone
11:33 < sinclair|nz> nathan7: 0.9 is still in alpha
11:33 < nathan7> How so, geNAZt?
11:33 < nathan7> It's pure JS
11:33 < dhzr> lol
11:34 < geNAZt> the compiled js
11:34 < nathan7> sinclair|nz: I'm talking about coffeescript
11:34 < sinclair|nz> oh
11:34 < dhzr> JS will always work as JS... 
11:34 < nathan7> The compiled JS is ES3
11:34 < geNAZt> yes and the api will always behave the same
11:34 < dhzr> compiled or not, it's JS at the end of the day
11:34 < nathan7> It works in fucking IE6
11:34 < dhzr> im confused here... how can js not work in node.js
11:35 < dhzr> i mean, maybe i haven't played this candybox game enough, but i dont see it
11:35 < geNAZt> if the api breaks
11:35  * sinclair|nz notes TS has both ES3 and ES6,  compiler options, as well as commonjs and amd module compilation options too
11:35 < sinclair|nz> but whatever right?
11:35 < nathan7> geNAZt: If we were to make ES3 not run in node
11:35 < dhzr> what api are you talking about?
11:35 < geNAZt> nodeJS api
11:35 < nathan7> but that means breaking JS
11:35 < nathan7> if we break JS, then JS is broken, compiled or otherwise
11:36 < geNAZt> well if you use net sockets and want to add a old mode stream (which complier x does) and you run into a event handling error in nodeJS (which can be caused by not calling stream.read())
11:36 < geNAZt> and then ?
11:36 < nathan7> ..what
11:36 < nathan7> that's not part of CS
11:36 < dhzr> whoa...
11:36 < geNAZt> well thats part of nodejs
11:36 < nathan7> Everything CS implements is pretty much a shorthand for JS
11:37 < dhzr> http://coffeescript.org/
11:37 < geNAZt> and noone knows how cs would behave in this case
11:37 < sinclair|nz> geNAZt: i think you are confused between the difference between nodes core and what compilers do
11:37 < dhzr> just go there, read one paragraph
11:37 < nathan7> just the same as the equivalent JS, geNAZt 
11:37 < nathan7> CS does nothing node-specific
11:37 < nathan7> The compiler happens to run on node
11:37 < sinclair|nz> geNAZt: how that is possible to confuse the two is beyond me
11:37 < geNAZt> how is what possible ?
11:37 < nathan7> (a) -> b compiles to function(a) { return b }
11:37 < nathan7> that kind of stuff
11:38 < nathan7> CoffeeScript is an alternate syntax for JS
11:38 < sinclair|nz> geNAZt: if anything, compilers would allow you to link in the appropriate code for a given node target version
11:38 < nathan7> f x for x in arr
11:38 < nathan7> that's for (var i = 0, len = arr.length; i < len; i++) { var x = arr[i]; f(x) }
11:39 < sinclair|nz> nathan7: sometimes i wonder what the CS ecosystem is like on node
11:39 < dhzr> amazing...
11:39 < dhzr> flowers, sunshine, and a lot of bubblegum
11:39 < sinclair|nz> nathan7: there are a lot of CS'ers out there,  (contrasted with the 8 regulars i know of on IRC using TS)
11:40 < geNAZt> well it often leads to "how can i write case xyz in cs"
11:40 < geNAZt> its like jade
11:40 < dhzr> just think of it as a preprocessor for a second, maybe soemthing will click for you
11:41 < geNAZt> why do i learn an sytax for anything i cant benefit from ?
11:41 < sinclair|nz> nathan7: in general tho, compiling on node is kinda crap without the right tooling behind it, i've had to write a lot of stuff to get TS doing what i needed it to do to get a semi reasonable workflow happening on node 
11:41 < dhzr> https://github.com/raganwald/homoiconic/blob/master/2011/12/jargon.md
11:41 < sinclair|nz> nathan7: it has me thinking quite a lot about appropriate JS compiler workflows of late
11:42 < Ritzton> is someone using winston here ? how is it possible to have the dates inside the logs in a different format 2013-05-18T11:38:55.816Z, I dont understand why this T and Z ?
11:42 < sinclair|nz> geNAZt: there are absolutely no benefits to using compilers over raw JavaScript, none, nothing, not worth your time, right?
11:42 < geNAZt> no thats not true
11:43 < sinclair|nz> sure it is, why learn a new language when it offers nothing
11:43 < geNAZt> but why should i use a coffeescript in a javascript ecosystem ?
11:43 < ckknight> Ritzton: that's the standard way of printing a UTC date
11:43 < geNAZt> you can write coffeescript if you want or typescript
11:43 < dhzr> coffeescript === javascript
11:43 < sinclair|nz> geNAZt: who to some people use C over C++ ?
11:43 < sinclair|nz> *why
11:43 < dhzr> ~_~
11:43 < ckknight> C is a far superior language to C++ in a lot of ways
11:43 < geNAZt> why do some people code vb.net ?
11:43 < geNAZt> oO
11:43 < sinclair|nz> its all a machine code ecosystem, why would i code anything other than raw ASM
11:43 < sinclair|nz> geNAZt: makes no sense to me
11:43 < Ritzton> ckknight> how to change this way ? I would like the time of my server with space ?
11:44 < ckknight> sinclair|nz: screw that, just give me NAND gates!
11:44 < ckknight> Ritzton: why's that?
11:44 < sinclair|nz> NAND gates ftw
11:44 < dhzr> id rather play with soap
11:44 < geNAZt> sinclair|nz, if you argument so why dont you use vertx ?
11:44 < dhzr> lol
11:45 < Ritzton> ckknight> I dont know, I think this format is not easy to read or to search
11:45 < ckknight> it should be just as easy to search
11:46 < Ritzton> if a customer told me I have a problem at this time and the time of my server is the one of my customers...
11:47 < dhzr> you can use moment or some other time module to manipulate the timestamp
11:49 < sinclair|nz> geNAZt: in all tho, i don't see why don't see JS compilers as a exciting technology, one to be embraced, not rubbished 
11:50 < sinclair|nz> er, i don't see why people don't view JS compilers as a exciting new technology
11:51 < sinclair|nz> geNAZt: i also don't see JS compilers as a passing fad either, i only see them getting more advanced
11:51 < dhzr> I can see both sides, but at some point it just made the most sense for me, and writing coffeescript oneliners has become almost a competition amongst colleagues haha
11:53 < sinclair|nz> dhzr: you know, when all the best practice stuff is worked out, and we finally have consensus on the best ways of structuring JS, compilers can take advantage of that and provide syntactic constructs to do the work for you
11:55 < sinclair|nz> dhzr: for the most part, i think a lot of that raw "best way to code X" is already done, and we are moving into higher level things, like Promises / Tasks, if we all agree that is the best way to compose asynchronous operations, then compilers can work their magic and give us constructs like C#'s async/await
11:55 < geNAZt> sinclair|nz, yes JS compiler can do more advanced things. But on the other hand they require workaround for a handful of things which are off from javascript. And thats the point why i dont like it. Far off from the syntax which is the second thing i dont like about those compiler to js things.
11:55 < dhzr> yep, which is nice in js land... things get big and not so fun to manage especially among team members who don't say have the same style as you in code
11:56 < sinclair|nz> dhzr: i also think it would be possible to generate expression trees from compiled TS code
11:56 < sinclair|nz> dhzr: so, you could have a LINQ syntax available 
11:56 < sinclair|nz> language integrated query in JS would be insane
11:56 < dhzr> haha yeah, i'd hate to write that in native js hahaha
11:57 < dhzr> you'd see me, pale -- like a vampire with tears coming down my face
11:57 < dhzr> comparative to writing vb6 again
11:57 < ckknight> it actually should be pretty easy to add into GorillaScript
11:57 < ckknight> I've just been focused on other things
11:59 < dhzr> not seen this gorillascript, nicely done sir
11:59 < ckknight> I'm looking for feedback: http://ckknight.github.io/gorillascript/
11:59 < ckknight> ideally in the form of github issues :P
11:59 < ckknight> but you can just chat me up
12:00 < dhzr> im reading now, ill send issues your way via teh githubz
12:02 < diav> any suggestion for MVC frameworks but for web site not web app? Found compound.js and geddy but was wondering if there are any other mature enough
12:05 < dhzr> haha wow, pretty cool little gorilla you got there bud
12:06 < ckknight> :)
12:46 < adrivanrex> hi
12:46 < adrivanrex> joyent
12:46 < Qalqi> propose some cool names for npm modules....
12:47 < ckknight> Qalqi: for what?
12:47 < Qalqi> to name my first npm module
12:47 < adrivanrex> anybody knows the owner of cube-space.net
12:47 < deoxxa> Qalqi: what's it do?
12:48  * deoxxa has a couple of modules - https://npmjs.org/~deoxxa
12:49 < adrivanrex> ohgod
12:50 <@konobi> bnoordhuis: have you tried compiling node on osx using clang along with -stdlib=libc++ ?
12:53 < brianng> hi express channel is dead
12:54 < brianng> i need some help with bodyparser middleware
12:54 < brianng>  how do i use the bodyparser middleware but exlude certain URLs from the body parser so i can get a raw body?
12:55 < bnoordhuis> konobi: you mean with llvm's libc++?
12:56 < bnoordhuis> err, libstdc++
12:57 < niggler> anyone awake and familiar with github organizations?
12:59 < brianng> can anyone help pls
12:59 < niggler> sup brianng 
12:59 < brianng> hey niggler
12:59 < geNAZt> ask, just ask :D
12:59 < brianng> how do i use the bodyparser middleware but exlude certain URLs from the body parser so i can get a raw body?
12:59 < brianng> in expressjss
12:59 < bnoordhuis> niggler: i'm a member of around 10 organizations or thereabouts. what do you want to know?
13:00 < niggler> bnoordhuis what is the easiest way to set up a repo and grant multiple people commit access?
13:01 < niggler> is it easiest to set up a repo, or use a shared user account, or is there some other sorcery?
13:01 < bnoordhuis> niggler: just add them as contributors
13:01 < geNAZt> set up a repo and add them into it
13:01 < bnoordhuis> collaborators, sorry
13:02 < niggler> is the joyent account an organization or user account?
13:02 < bnoordhuis> it's an organization
13:03 < bnoordhuis> but that's because it has ~50 members, all with different access rights
13:03 < bnoordhuis> if you have a single, simple project you're working on with a few friends, a repo + collaborators is easiest
13:05 < bnoordhuis> then again, an organization is not hard to set up either
13:06 < niggler> well, for any nontrivial access control requirement, it sounds like org is better
13:06 < niggler> thx bnoordhuis 
13:06 < adrivanrex> Hey genazt I almost forgot your nick >.<
13:07 < adrivanrex> what happened to this http://nodecms.cube-space.net/
13:07 < adrivanrex> error
13:07 < geNAZt> well i says you are missing a template
13:07 < geNAZt> it*
13:07 < adrivanrex> No, the github is working fine
13:07 < geNAZt> i play my round of dota2 and will look into it
13:07 < adrivanrex> it's not updating
13:07 < adrivanrex> Cool hehe ok
13:08 < adrivanrex> something wrong with the updater I guess
13:09 < Bubo> geNAZt: we should play dota2 together
13:12 < adrivanrex> you guys should try google hangout
13:14 < Bubo> adrivanrex: I want to, but nobody I know uses google hangout
13:15 < adrivanrex> haha indeed.. It's really cool but no ones using it >.<
13:15 < adrivanrex> I'll make a public hangout :D
13:16 < Bubo> for node?>
13:17 < maaarghk> The internet is too suck in the UK for it to be useful
13:17 < maaarghk> very small % of people have decent upload speeds
13:17 < maaarghk> You can also take that into account the next time you design an app to be used here :P
13:20 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:23 < adrivanrex> Hey you havent tried it yet.. it's fast
13:28 < adrivanrex> https://plus.google.com/102411657013010188177/posts/57B9Ep1iGC1
13:28 <@konobi> bnoordhuis: yup
13:28 < adrivanrex> try this guys it's very fast
13:28 < adrivanrex> google public hangout
13:28 < maaarghk> We use it all the time at uni, on extremely fast internet
13:28 < maaarghk> and it still seems slow :P
13:29 < adrivanrex> ahh I see
13:30 < adrivanrex> who's ibrahim salem hehe
13:31 < bnoordhuis> konobi: no, never. what about it?
13:32 < adrivanrex> https://plus.google.com/102411657013010188177/posts/57B9Ep1iGC1
13:33 < maksim_> Hi, I have this npm package, when its installing one of its dependencies is in a private repo and it is installed as git+ssh://repo path,  I have the https credentials but do not have the ssh ones.. Is there a way to trick it to look into the https one instead of trying the ssh one and failing?
13:33 <@konobi> bnoordhuis: supposedly it's faster and less memory hungry that stdc++, but only available from 10.7 onwards
13:34 <@konobi> just built it and ran it through the testsuite... seems good
13:35 < bnoordhuis> os x and fast. words not commonly associated with each other
13:36 < bnoordhuis> have you run the benchmarks?
13:36 <@konobi> nope
13:37 < Bubo> adrivanrex: do you have to have camera opened to be in a google hangout?
13:37 <@konobi> machine is currently in use for other stuff for the meantime
13:37 < adrivanrex> nope
13:38 < Bubo> well I joined
13:39 < adrivanrex> LOL where's the other one
13:39 < adrivanrex> show your faces! :))
13:40 < adrivanrex> I see
13:41 < Bubo> ill be back
13:43 < adrivanrex> ok, let's see everybody's faces haha
13:46 < adrivanrex> guys join google hangout
13:46 < adrivanrex> https://plus.google.com/102411657013010188177/posts/57B9Ep1iGC1
13:50 < scrollback> hi attr_tra
14:14 < sinclair|nz> deoxxa: hey mate, are you still floating around?
14:14 < deoxxa> yep
14:14 < sinclair|nz> deoxxa: ok, so net.socket is actually a DuplexStream (as well as being a socket)
14:14 < sinclair|nz> i guess
14:14 < sinclair|nz> which means i can ....
14:15 < sinclair|nz> var socket = net.connect(options, function() {
14:15 < adrivanrex> hey geNAZt you know milw0rm? hehe
14:15 < geNAZt> ?
14:15 < sinclair|nz> socket.pipe(outpit);
14:15 < sinclair|nz> *output
14:15 < geNAZt> what do i have todo with exploits ?
14:16 < sinclair|nz> deoxxa: i suppose the request i have is, 1) is using the on() events a good idea, or should i be using a transform?
14:16 < adrivanrex> nothing just askin :D
14:16 < adrivanrex> never thought you know milw0rm :D
14:16 < sinclair|nz> deoxxa: so, in this particular scenario, i have the stream, and i can pipe it around no problem, but i want to just read the data from the stream into a string
14:17 < sinclair|nz> deoxxa: now, i can use the on events to do this, but you mention there are better alternitives
14:17 < geNAZt> well its down
14:17 < sinclair|nz> and personally, im not really all that fond of the event stuff
14:17 < deoxxa> sinclair|nz: listening to the data event isn't *bad* per se, but it strikes me as a bit hacky
14:17 < adrivanrex> yeah :( also darkc0de.com don't know what happened
14:18 < sinclair|nz> me also, so, what is the best way to read the stream into a string?
14:18 < sinclair|nz> a transform ?
14:18 < geNAZt> well it is illegal what they do, so i think they got trapped
14:18 < geNAZt> sinclair|nz, set the encoding to the readstream
14:18 < geNAZt> and listen to the readable event
14:18 < geNAZt> and read() all data till a null comes
14:19 < sinclair|nz> geNAZt: its a network stream
14:19 < deoxxa> sinclair|nz: with new streams, you could do something like `var data = []; stream.on("readable", function() { var chunk; while ((chunk = stream.read()) !== null) { data.push(chunk); } }); stream.on("end", function() { do_something_with(Buffer.concat(data)); });'
14:19 < geNAZt> yes it also work on network streams
14:19 < geNAZt> since they are duplex streams
14:20 < geNAZt> deoxxa, this destroyes the ides behind streams :D
14:20 < geNAZt> ideas*
14:20 < deoxxa> geNAZt: it does
14:20 < sinclair|nz> deoxxa: so, instead of on("data", function() {}) event, i read on the "readable" event instead
14:21 < deoxxa> sinclair|nz: well "readable" tells you "hey i have some data here that you can come get if you want"
14:21 < deoxxa> geNAZt: but if it's the very end of a stream thing, i don't think it's too bad. i do that kind of thing a lot when i'm parsing JSON responses or whatever
14:21 < sinclair|nz> deoxxa: how does it behave if i haven't received all the data?
14:22 < sinclair|nz> deoxxa: does the readable event get called more than once?
14:22 < deoxxa> sinclair|nz: it'll be buffered inside the stream
14:22 < deoxxa> sinclair|nz: it can, but don't rely on it
14:22 < geNAZt> deoxxa, its not bad if you have an nearly end
14:22 < sinclair|nz> deoxxa: not sure i follow
14:22 < geNAZt> but this is a network stream which would live longer as 1-2 seconds
14:23 < sinclair|nz> deoxxa: if the stream is in a readable state, and i read all the data currently buffered in the stream, what happens?
14:23 < geNAZt> sinclair|nz, if you dont read() the stream will stop
14:23 < geNAZt> you get excactly one readable event
14:24 < geNAZt> sinclair|nz, the stream will emit a new readable event if there is new data
14:24 < deoxxa> sinclair|nz: the readable event has to fire when two conditions are met: 1) the stream had previously returned `null' from a read() call, and 2) some new data has come in. it might also be fired at other, arbitrary times when there is data to be read (i.e. not necessarily only after `null' had been returned)
14:25 < deoxxa> sinclair|nz: so basically when the stream moves to a "something to read" state, that event will fire. some streams will only fire if it was previously in a "nothing to read" state, but some will fire it every time there's new data to be read, regardless of whether there was something there to read before or not
14:26 < deoxxa> sinclair|nz: but basically, it's a good idea to read the stream until it returns null if you want to rely on the "readable" event to tell you when there's new data there
14:27 < geNAZt> deoxxa, the stream also fires a new readable event if you leave the readable event and there is data left in the buffer
14:27 < sinclair|nz> deoxxa: yeah, i think that is what i want
14:27 < deoxxa> geNAZt: always?
14:27 < geNAZt> yes always
14:27 < sinclair|nz> deoxxa: alright, let me have a play :)
14:28 < geNAZt> and read() === null is normaly the end of the stream
14:28 < deoxxa> geNAZt: interesting! i didn't know that, but that's really useful
14:31 < sinclair|nz> deoxxa: i do wonder if streams could have been implemented another way in nodejs, they are awfully confusing trying to understand the appropriate implementation of them
14:31 < deoxxa> sinclair|nz: they're deceptively complex
14:31 < deoxxa> hey thanhdungtruong! you from melbourne?
14:31 < sinclair|nz> deoxxa: i do fine it odd that a socket is also a stream
14:31 < sinclair|nz> *find
14:31 < sinclair|nz> deoxxa: i find it both convenient and strange
14:31 < deoxxa> sinclair|nz: a socket is like the perfect example of a stream :P
14:32 < deoxxa> i burnt my last cookie :/
14:32  * deoxxa eats it anyway
14:32 < sinclair|nz> deoxxa: but a socket is not a stream, 
14:32 < deoxxa> is so!
14:33 < deoxxa> tcp, yo
14:33 < deoxxa> that's what it's all about
14:33 < sinclair|nz> not in other languages it isn't
14:33 < geNAZt> in all languages it is a stream
14:33 < geNAZt> even in c it is
14:33 < deoxxa> yeah... it totally is
14:33 < sinclair|nz> hang on
14:34 < geNAZt> you have a handle which holds data fifo
14:34 < geNAZt> which is a stream
14:34 < deoxxa> the mechanism might look different, but it's the same concept
14:36 < sinclair|nz> i accept that TCP / UDP are both streaming "things", but in terms of library implementation, they tend to distinguish between socket and stream
14:36 < geNAZt> first UDP is not a stream
14:36 < geNAZt> tcp is one
14:37 < deoxxa> well most languages don't have an actual "stream" type
14:37 < sinclair|nz> UDP doesn't garentee ordering
14:37 < deoxxa> some languages have iterators
14:37 < geNAZt> UDP doesnt support queue or buffering
14:37 < deoxxa> that's kind of the closest thing i can think of
14:37 < geNAZt> so it has none of the features of a stream
14:37 < sinclair|nz> geNAZt: in UDP, data arrives, the implementer has to deal with ordering packets, its still streaming 
14:38 < sinclair|nz> deoxxa: *cough* .net
14:38 < geNAZt> loool
14:38 < geNAZt> UDP doesnt garant for anything
14:38 < sinclair|nz> geNAZt: so?
14:38 < geNAZt> you can drop out 5 of 7 packages and the client doesnt know that
14:39 < geNAZt> the server doesnt either
14:39 < sinclair|nz> geNAZt: are you arguing that a UDP socket does not recv a stream of bytes over a network?
14:39 < geNAZt> in tcp the stream is broken if a package doesnt come
14:39 < geNAZt> it guaranteed that all packages come
14:39 < sinclair|nz> geNAZt: are you arguing that a UDP socket does not recv a stream of bytes over a network?
14:39 < geNAZt> it does
14:39 < sinclair|nz> so, its a stream like anything else
14:39 < geNAZt> but its one package
14:40 < geNAZt> and a stream is multiple packages in order
14:40 < sinclair|nz> no, its not one package
14:40 < geNAZt> which udp doesnt have
14:40 < rendar> udp socket receives datagrams, its not a stream
14:40 < Bubo> geNAZt: did you see what I said to you?
14:40 < geNAZt> udp emits one package after another
14:40 < geNAZt> and it doesnt garant for anything
14:40 < geNAZt> if someones are missing
14:40 < geNAZt> or out of order
14:40 < sinclair|nz> geNAZt: so, that doesn't mean it isn't streaming, 
14:40 < rendar> you could implement a reliable stream like tcp on top of an udp socket, but you have to code that by yourself
14:41 < geNAZt> udp itself isnt streaming.
14:41 < geNAZt> tcp itself is.
14:41 < rendar> sinclair|nz: a stream != a bunch of _unreliable_ and _out of order_ datagrams
14:41 < sinclair|nz> rendar: id argue a stream is a stream irrespective of order
14:42 < sinclair|nz> rendar: find me a definition that says otherwise and ill conceed
14:42 < rendar> sinclair|nz: a stream has a precise order, or its not a stream
14:42 < sinclair|nz> rendar: the precise order is the order in which packets arrive
14:42 < sinclair|nz> which may or may not be in order
14:43 < sinclair|nz> doesn't change the fact they arrived  in "
14:43 < sinclair|nz> some order"
14:43 < rendar> lol
14:43 < rendar> sinclair|nz: are you kidding? http://en.wikipedia.org/wiki/Stream_(computing)
14:43 < geNAZt> "in all cases referring to a sequence of data elements made available over time. A"
14:44 < rendar> sinclair|nz: in computing a stream is a reliable and _ordered_ stream of data since the 1960, or even before! the concept of datagrams and unreliable and out of order datagrams has been introduced with IP
14:44 < sinclair|nz> geNAZt: sounds like UDP packets arriving over time to me
14:44 < geNAZt> yes but not in order
14:44 < geNAZt> so its not a sequence
14:45 < sinclair|nz> rendar: not sold, you are selecting one definition of a stream, there the term "stream" is broad, and not inclusive or ordering
14:46 < geNAZt> also the nodejs api doesnt stream udp data
14:46 < geNAZt> http://nodejs.org/api/dgram.html
14:47 < geNAZt> but udp doesnt have ends, it doesnt know starts, it doesnt know sequence numbers
14:47 < geNAZt> so you cant stream an udp
14:47 < sinclair|nz> geNAZt: ok back up a bit, back to node treating Sockets as Streams, wouldn't it make sense to treat UDP sockets as streams also, as you require a socket for UDP?
14:47 < geNAZt> no it doesnt
14:47 < geNAZt> since udp isnt streaming data
14:51 < sinclair|nz> geNAZt: its only not streaming based on lack of garenteed order tho, i will accept nodes definition of a stream, but you wont change my mind that a stream is a stream irrespective of order, 
14:52 < geNAZt> well i know 3 other things why udp isnt streaming
14:52 < sinclair|nz> geNAZt: if it wasn't a stream, the only other thing to call it is "random"
14:52 < geNAZt> 1.) It has no start
14:52 < geNAZt> 2.) It has no end
14:52 < geNAZt> 3.) It has no sequence numbers
14:52 < geNAZt> udp messages are random oO
14:53 < sinclair|nz> does a stream require the properties of start, end and ordinal ?
14:53 < sinclair|nz> i dont think it does, 
14:53 < geNAZt> start yes
14:53 < geNAZt> end also
14:53 < sinclair|nz> streams may not have "ends"
14:53 < geNAZt> streams always have ends
14:53 < nathan7> a node stream is ordinal
14:53 < geNAZt> but you cant predict them
14:54 < nathan7> if you care about whole packages as a unit
14:54 < nathan7> if you care about single bytes.. hm
14:55 < geNAZt> well little example: 
14:55 < sinclair|nz> this is really a silly conversation, i don't think the definition of "stream" really matters, so long as we all agree on nodes definition of a stream, with maybe you could prefix with network stream to give the stream a bit of context
14:55 < geNAZt> i can write intoa udp message "1", send another message "2", and also a third "3"
14:55 < nathan7> but hey, framing UDP is easy
14:55 < geNAZt> and then the transaction is over
14:55 < geNAZt> how should the server know that after three messages received the transaction is over ?
14:56 < sinclair|nz> geNAZt: streams are more than "network streams"
14:56 < sinclair|nz> they are one type of stream
14:56 < geNAZt> yes streams can also be a bottle of water
14:56 < geNAZt> or a train
14:56 < geNAZt> or a book
14:56 < geNAZt> if you want to extend it
14:56 < nathan7> a book is not a stream, but you can make a readstream from it
14:57 < geNAZt> a book has a start, an end and you can consume it via chunks
14:57 < geNAZt> so i think its a stream :D
14:57 < nathan7> and it's ordinal
14:57 < geNAZt> y :D
14:57 < deoxxa> nathan7: it is if you write it on a river!
14:58 < sinclair|nz> geNAZt: anyway, you won't change my mind on this one, a stream can be a stream irrespective or order, if you want to put extra requirments on a stream being ordered, call it a Ordered TCP Network Stream, then we ALL agree
14:58 < geNAZt> well a stream does need more than just order
14:58 < geNAZt> but i said it 
14:58 < mscdex> stream all the things!
14:58 < geNAZt> and if you say a stream can be the god and world, it is okay
14:58 < geNAZt> but it is wrong
14:59 < mscdex> stream your udp packets!
14:59 < geNAZt> well the world could be a stream :D
14:59 < geNAZt> but okay :D
14:59 < mscdex> it is!
14:59 < mscdex> life is a stream
14:59 < geNAZt> (if we had time travel)
14:59 < geNAZt> :D
14:59 < geNAZt> mscdex, true !
15:00 < deoxxa> mscdex: but it's old-style - if you don't take the time to consume it, it's gone forever!
15:00 < sinclair|nz> mscdex: are you saying your life is a stream or ordered or unordered events ?
15:00 < geNAZt> well i knew where i began
15:00 < mscdex> this channel just got deep
15:00 < sinclair|nz> mscdex: do you buffer unordered events for later processing ?
15:00 < geNAZt> and i know it will end
15:02 < levilewis> Depending on its locale or certain characteristics, a stream may be referred to as a branch, brook, beck, burn, creek, "crick", gill (occasionally ghyll), kill, lick, mill race, rill, river, syke, bayou, rivulet, streamage, wash, run or runnel.
15:02 < geNAZt> lol :D
15:03 < mscdex> bayous2
15:06 < sinclair|nz> anyway, i still find it odd and somewhat convenient that nodejs sockets are also streams, as opposed to having stream.getReadStream() or similar
15:07 < Venemo_N9> how can I write a node buffer to a stream?
15:07 < Venemo_N9> let's say the buffer contains a byte array
15:07 < geNAZt> Venemo_N9, stream.write() ?
15:08 < deoxxa> lol
15:08 < AAA_awright> sinclair|nz: How so
15:08 < geNAZt> what ? :D
15:08 < AAA_awright> sinclair|nz: A stream is just a series of events, so I don't know how else you would do it
15:09 < AAA_awright> At least in ECMAScript
15:09 < nathan7> it's a monad!
15:09 < sinclair|nz> AAA_awright: yeah, i don't know, i am just used to having a distinction between socket and stream, its not a big deal, in fact, i think i kind of like it
15:09 < AAA_awright> But I'm not sure what that's even supposed to _mean_
15:10 < deoxxa> sinclair|nz: node.js also behaves differently to skateboards, for the most part
15:10 < geNAZt> deoxxa, :D
15:10 < nathan7> skateboards just end up hurting me
15:10 < nathan7> I am happy about the difference in behaviour
15:10 < geNAZt> but care of it ! nodejs can also drive skateboards !
15:10 < Venemo_N9> geNAZt, ah, thanks! I never knew it had an overload that takes a buffer too
15:10 < deoxxa> well i guess they both make you pretty cool
15:11 < sinclair|nz> AAA_awright: it doesn't mean anything, 
15:11 < geNAZt> Venemo_N9, JS doesnt have overoads but yes it does take buffers
15:11 < geNAZt> overloads*
15:11 < AAA_awright> I mean like, what you have in mind, I can't imagine it
15:11 < AAA_awright> In any API you have a socket; and you read() data from it
15:11 < AAA_awright> Or specifically, you have a file pointer
15:11 < geNAZt> AAA_awright, its more about the definition of a stream, why tcp is one and udp isnt
15:11 < sinclair|nz> AAA_awright: sure you do
15:11 < geNAZt> and he thinks that a UDP could also be streamed
15:12 < geNAZt> ahhhh
15:12 < geNAZt> :D
15:12 < AAA_awright> Well, anything can be turned into a stream, UDP just exposes something lower-level
15:12 < geNAZt> UDP without any extension cant be put into a stream
15:12 < geNAZt> :D
15:12 < AAA_awright> What's :D
15:13 < geNAZt> some kind of emotions
15:13 < AAA_awright> Of course UDP can, you just add a counter to each packet and bam, stream
15:13 < deoxxa> AAA_awright: interesting concept - i'm thinking of a boolean stream right now where you write true/false values to it and it just spits out whatever the last thing was that was written to it
15:13 < geNAZt> yes you have to do that
15:13 < geNAZt> so udp doesnt
15:13 < geNAZt> and pure udp isnt streamable
15:13 < deoxxa> AAA_awright: just a silly example of "anything can be made into a stream"
15:13 < AAA_awright> geNAZt: I just proved otherwise...
15:13 < Venemo_N9> geNAZt, right, thank you! :)
15:14 < sinclair|nz> AAA_awright: the topic was about whether or not a stream has to be meaningfully ordered in order to be considered a stream
15:14 < AAA_awright> Which it does, by definition, a stream is a *sequence*
15:14 < sinclair|nz> AAA_awright: sequence doesn't suggest order 
15:15 < geNAZt> inside a sequence ofc
15:15 < sinclair|nz> you can have either ordered or unordered sequences afterall
15:15 < AAA_awright> Um, a sequence BY DEFINITION means ordered, you know, sequential?
15:15 < AAA_awright> An unordered sequence is a contradiction of terms, perhaps you mean set
15:16 < sinclair|nz> perhaps
15:19 < sinclair|nz> AAA_awright: the definition i think is highly contextual, as random data arriving over a stream may or  may not be meaningful, if it is meaningful, its a stream, if its not meaningful, its not. for example, you may be interested in the order in which things arrive, chances are you are not, but if you were, the sequence in which things arrive would matter. 
15:20 < sinclair|nz> so its rather a pointless conversation, fun tho
15:20 < AAA_awright> What does "meaningful" have to do with it?
15:20 < sinclair|nz> everything
15:21 < sinclair|nz> EVERYTHING
15:21 < AAA_awright> Meaning is something that us humans have to read in
15:21 < deoxxa> all the things
15:21 < AAA_awright> (I'm literally writing a book on this topic as we discuss)
15:21 < geNAZt> about stream ?
15:21 < geNAZt> or about meaning ?
15:21 < geNAZt> :D
15:21 < AAA_awright> About meaning, semantics, etc
15:22 < sinclair|nz> AAA_awright: so, a stream must be ordered to qualify as being a stream ?
15:23 < AAA_awright> For any possible event in the stream, you have to determinististically be able to say it comes before or after another event
15:23 < AAA_awright> For every event in it
15:24 < AAA_awright> If two events in the "stream" are read in different orders, then you don't actually have a stream, or at least not the same stream
15:25 < sinclair|nz> AAA_awright: so, in order for it to be a stream, the data on the stream should be temporally ordered? 
15:25 < AAA_awright> In VoIP UDP is used to stream voice data, not because no stream properties are desired, but because the buffer is read at a constant rate, even if starved of data (which is not possible in TCP)
15:26 < AAA_awright> Usually it's talked of in terms of time but not necessarially
15:26 < sinclair|nz> AAA_awright: i would expect them to be handling packet ordering on their own, so irrelevant 
15:26 < Fusl> [ { 'http://www.heise.de/': 'test new Array()' } ]   <- how to get the value out of the array? variable["http://www.heise.de/"]; doesn't work for me (brings undefined)
15:27 < AAA_awright> sinclair|nz: "on their own"?
15:27 < sinclair|nz> just because its UDP, they would still be framing the packets coming in is what i am saying
15:27 < AAA_awright> Demonstrating forming a stream out of events
15:28 < AAA_awright> The incoming packets contain ordering information, and therefore form a stream
15:28 < AAA_awright> One can objectively place one packet of data before or after another, which satisfies the requirement of calling something a stream
15:29 < sinclair|nz> what if you simply didn't care about order, what if the order in which the packets are recv'ed over UDP were desired, is it a stream then?
15:29 < AAA_awright> I don't follow?
15:30 < sinclair|nz> well, if you simple read the data in one byte at a time, and cared not for the order in which bytes were received 
15:30 < sinclair|nz> is it a stream?
15:30 < AAA_awright> It would be a stream within the application, since you could order the packets, but it's not the same stream as the stream that sent them, because the orders wouldn't necessarially be the same
15:31 < AAA_awright> It also wouldn't be a stream of bytes, but a stream of packets
15:31 < sinclair|nz> so, is a requirement of a stream be that, if data is piped from one stream to another, the recipient stream gets the data in the same order in which it was sent?
15:32 < AAA_awright> Yes
15:32 < sinclair|nz> AAA_awright: "It would be a stream within the application" i did say the definition was highly contextual 
15:33 < sinclair|nz> ill accept that definition 
15:33 < sinclair|nz> (mainly because im bored of this conversation)
15:33 < AAA_awright> You were talking about from one application, over the network, to another
15:33 < sinclair|nz> but its a good definition none the less
15:33 < AAA_awright> Which isn't one stream, it's not
15:33 < sinclair|nz> AAA_awright: nope, i talking streams in the most general sense 
15:34 < sinclair|nz> AAA_awright: over a network, in memory, from disk, whatever
15:34 < AAA_awright> Right, there's no stream over the network
15:34 < AAA_awright> Not without some form of ordering, like TCP or a sequence stamp in UDP messages
15:34 < Chiffon> hi all
15:35 < sinclair|nz> AAA_awright: i still argue that the order in which things arrive is a "order" regardless
15:35 < AAA_awright> It's *an* order, not *the* order
15:37 < sinclair|nz> whatever kind of order it is, its still "a order" which qualifies raw UDP data recved over a socket as being "stream like"
15:39 < AAA_awright> When we're talking of streams it's probably because there's something that's a not-stream that we want to distinguish it from
15:40 < AAA_awright> If all channels of communication were a stream then we wouldn't need the word, really
15:40 < sinclair|nz> AAA_awright: agreed, but i said that half an hour ago
15:41 < Chiffon> if i want a web application with 100 guys using it, and a lot of informations modified in real time by users on their profile and visible by all users in realtime without reloading page, is node.js a good choice ?
15:42 < AAA_awright> Chiffon: That's kind of the quintessential use-case
15:42 < dhzr> sockets... woohoo... just dont forget ssl
15:43 < Chiffon> and if i want a lot of logs and archives
15:43 < Chiffon> do i use mysql ? mongodb ?
15:43 < geNAZt> mongodb
15:44 < dhzr> you could go native sql, but that's no fun -- mongo is way fun.
15:44 < sinclair|nz> dhzr: its not really that fun
15:44 < geNAZt> well blob or large text in sql isnt that much fun :D
15:45 < Aartsie> Hi all i got a question does Node.js take the server time as timestamp ? or the time - the local timezone 
15:45 < Chiffon> i try to resume the process : user 1 change is profile to "away", the data is writing on mongo db, all users query mongo db every 5 sec, and knows user 1 is away
15:45 < Chiffon> is that the good shema ?
15:46 < geNAZt> no
15:46 < geNAZt> :D
15:46 < geNAZt> use pub/sub
15:46 < Chiffon> oops 
15:46 < dhzr> you could use socket.io, pass event to socket with on your save/update event
15:46 < dhzr> something like that
15:46 < dhzr> why not..
15:47 < sinclair|nz> Aartsie: the server time is the local time
15:48 < geNAZt> http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/
15:48 < Chiffon> ok thank u, i will lear a little about that
15:48 < Chiffon> learn
15:48 < sinclair|nz> Aartsie: you should set your server to UTC-0, then it becomes trivial to transform date times into the time of your users
15:49 < Aartsie> sinclair|nz: yes i know but when i do d = new date() and then d.getTime() does it save the time then with + 2 + GTM ?
15:49 < sinclair|nz> no idea
15:50 < sinclair|nz> i imagine it would be UTC-0
15:50 < sinclair|nz> as it would be impossible to turn a timestamp back into a time if the timestamp was UTC+X
15:52 < sinclair|nz> Aartsie: in other words, a server and client could pass that timestamp around, and turn it into the appropriate time for their respective locale if everyone agrees that the timestamp is UTC-0, so, based on this alone, i would say, yes, it is UTC-0, but dont quote me
15:52 < Aartsie> but is there an option to set an timezone ? i can't find it with google
15:53 < sinclair|nz> Aartsie: as an rule of thumb, you only want to pass UTC-0 around, 
15:53 < sinclair|nz> for the very reason i mentioned above
15:54 < Aartsie> yes ok but when i have that how can i set it + 0200 for the dutch timezone ?
15:55 < sinclair|nz> Aartsie: i can claim to be a JS Date() expert, but i would assume it happens automatically?
15:55 < sinclair|nz> *can't
15:56 < sinclair|nz> try it, get a timestamp, set your local computers timezone to somewhere else, when try and load the Date() with the timestamp, if the time is different, you know it automagically adjusts
15:57 < Venemo_N9> Aartsie, check out moment js
15:57 < Venemo_N9> it is a nice lib for working with dates
15:58 < deoxxa> Aartsie: time in javascript is measured as milliseconds since unix epoch in UTC. the only "time zone" stuff is on output, when you create some kind of text representation of a time value.
15:58 < Aartsie> ok but i save the time on the server side and calculate it on the client side when i display it
15:58 < Aartsie> deoxxa: How can i do that on the client side ? is there a function like set GMT + 2 ? 
15:58 < deoxxa> >> var d = new Date(); [d.valueOf(), d.toISOString(), d.toString()]
15:58 < purr> deoxxa: (object) [1368892715279, '2013-05-18T15:58:35.279Z', 'Sat May 18 2013 15:58:35 GMT+0000 (UTC)']
15:59 < deoxxa> Aartsie: not that i know of - the .toString() method usually just renders the time in whatever the correct locale is
16:26 < beeant> which one is better browserify or requirejs?
16:26 < spion> browserify
16:28 < beeant> ok nice
16:30 < beeant> browserify === comonjs?
16:33 < beeant> i think ill just stick with requirejs
16:45 < sashman_> could sb teach me how to best work with model/views/controller and routing like to make it restful im really strugglin, dont know where to what to 'require' and where to exports modules and such thuv
16:48 < geNAZt> sashman_, this git repo example makes it right, https://github.com/btford/angular-socket-io-seed
16:50 < foofoobar> Hi. I was asking yesterday here about replacing rendering via EJS+Partials on the server to just send the data by JSON and let the client render it. What is a good way to "render" it on the client then? Include EJS there ?
16:53 < Venemo_N9> foofoobar, there are lots of templating engines which can run in the browser
16:54 < foofoobar> Venemo_N9, so sending the data via JSON + rendering via a template engine is all in all faster than rendering on the server+ sending to the client?
16:54 < geNAZt> depends on client + server
16:54 < geNAZt> my server does it in 6-7 ms with all
16:54 < geNAZt> i dont think the client can make it faster
16:55 < Venemo_N9> foofoobar, not always, but it saves your server some CPU usage
16:55 < foofoobar> geNAZt, 6-7ms?wow.. What template engine do you use?
16:55 < geNAZt> swig
16:55 < geNAZt> but 56ms isnt normal
16:55 < geNAZt> if i remember right
16:55 < foofoobar> geNAZt, I got it down to 27ms
16:56 < geNAZt> what have you done ?
16:56 < foofoobar> I remember I had some wrong template loaded which was not needed
16:56 < geNAZt> it took ~30ms to render one partial ?
16:56 < geNAZt> oO
16:56 < foofoobar> geNAZt, yes..
16:57 < Alz> hi
16:57 < geNAZt> then the template engine is slow
16:57 < foofoobar> now I have a layout.ejs which includes an index.ejs and one partial is included. All together 27ms
16:57 < geNAZt> or you are doing something wrong
16:57 < foofoobar> geNAZt, should I post some code?
16:57 < geNAZt> do you have the sources opened ?
16:58 < foofoobar> not yet
16:58 < geNAZt> well i can help you if i can read them :D
16:58 < wumbei> Is it a good idea to keep a connection to my database alive whilst the server is responding to requests?
16:58 < wumbei> or open connection for each request
16:58 < geNAZt> wumbei, dont open connections per request
16:58 < geNAZt> it costs to much time
16:58 < geNAZt> and res :D
16:58 < foofoobar> geNAZt, it's a project which is not public yet, can I send you a link over private message? THe project is very small until now
16:58 < geNAZt> y ofc
16:59 < wumbei> ok. so when I start my http server, I should open a connection to the DB once, and leave it open?
16:59 < geNAZt> wumbei, yes
16:59 < wumbei> ok thank you! 
16:59 < geNAZt> you can use pooling (which is supported by much drivers) to gain performance
16:59 < geNAZt> if you see that querytimes go up, add more connections to the pool
17:00 < wumbei> ok thx
17:01 < Venemo_N9> wumbei, usually the database connector should handle that for you
17:01 < levilewis> Anywhere here have experience sending apple push notifications from node to iOS devices? Have a question about device tokens...
17:01 < wumbei> so is there a http server onClose event or something where I can close the database connection?
17:01 < geNAZt> Venemo_N9, yes normally but only until a limit is reached
17:01 < levilewis> Anyone* sorry
17:02 < Venemo_N9> geNAZt, indeed
17:21 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:21 < Industrial> What if I have two nodejs servers, one needing or using the other. How do I make the one be aware of when the other fails/is down and react to it?
17:22 < geNAZt> well you can use "is-running" which tells you if a pid is alive or not
17:23 < Industrial> say I have a separate logging server, if I have some website servers and a prixy server that log to this servers, they are all depending on it. Should I check wether it is there every call to log, and drop the message if its not there? or can I buffer the messages somehow until its back up again?
17:23 < Industrial> I'd love to not have to start them in order, too :)
17:24 < Industrial> s/prixy/proxy/
17:24 < geNAZt> well you should buffer them
17:24 < geNAZt> and write them every 2-3 seconds
17:25 < geNAZt> buffer 2 seconds, check if online, write
17:25 < geNAZt> thats how i would make it
17:26 < Industrial> https://gist.github.com/Industrial/fa477e039d1435aba2e7
17:26 < Industrial> scuse my terseness, it's livescript output.
17:27 < geNAZt> well you get a disconnected event or not ?
17:27 < geNAZt> so you know if its down
17:28 < Industrial> hm right. seems like I'm doing a lot of the same work, would it be worth it to abstract this into a Service which has Client's and Server's so I can manage dependencies and disconnects between Services?
17:36 < Industrial> https://github.com/dominictarr/scuttlebutt events class can persist :)
17:39 < geNAZt> can a socket.io server listen to a expressjs app ?
17:42 < foofoobar> geNAZt, yes
17:42 < geNAZt> wie ?
17:42 < foofoobar> geNAZt, one moment I'll look for the example I made
17:43 < foofoobar> geNAZt, wrong computer, example is on the other
17:44 < foofoobar> but I remember that it worked
17:44 < foofoobar> http://socket.io/#how-to-use there is an example for express+socket.io
17:44 < geNAZt> yes but this only works for one webserver
17:45 < geNAZt> i have 3 ips (each one as a single webserver) plugged into one expressjs app
17:45 < foofoobar> then I'm out, sorry :)
17:45 < geNAZt> and i want socket.io to listen to all 3 webservers without having to touch the webservers
17:49 < geNAZt> well i think i got it :D
17:49 < mscdex> i was about to say...
17:50 < mscdex> just supply the same app to all 3 servers
17:50 < mscdex> or middleware or whatever
17:50 < geNAZt> mscdex: https://gist.github.com/geNAZt/5605267
17:50 < geNAZt> and now i can setup the socket.io servers and append them to each server
17:51 < geNAZt> i didnt know that net.listen returns the server, it isnt documented
17:54 < mscdex> gah
17:55 < mscdex> writing python is worse than writing php
17:55 < geNAZt> yes 
17:55 < geNAZt> you indented wrong ?
17:57 < mscdex> no, just having to constantly look up api ref
17:58 < Stumbler> node-canvas  anyone experienced enough with it to give me an impression of what gotchas to expect?
17:58 < mscdex> but the indention rules are annoying as well
18:03 < beeant> jade made me dont want to see HTML anymore
18:03 < beeant> now i have to deal with underscore template
18:03 <@isaacbw> html 4 lyfe
18:04 < mscdex> angular ftw!
18:05 < geNAZt> angular !
18:06 < robertkowalski> hi
18:06 < geNAZt> hi
18:07 < arsdmthe> make a webgl  ui beeant
18:07 < geNAZt> writen in shaders or what ? :D
18:08 < maaarghk>  so, socket
18:08 < maaarghk> if I have a website with three features, like... if i take facebook as an example, it has ...
18:08 < maaarghk> news feed, chat and notifications
18:09 < geNAZt> yes
18:09 < maaarghk> does it make sense from a scalability point of view for each client to have three connections to three separate load balancers
18:09 < geNAZt> no
18:10 < maaarghk> i'm trying to understand scalability and realising it isnt coming very naturally.
18:10 < sorella> beeant, are underscore templates like Handlebars/Moustache? Because those are overtly terrible: you're basically hacking structured data together with Perl/sed/awk, without any regards for the semantics of the format you're dealing with =/
18:10 < geNAZt> well it depends on how the data needs to be delivered
18:10 < geNAZt> maaarghk, for the most cases you have the application installed on x servers and you balance between them
18:11 < geNAZt> if you have a serverfarm big enought to have lets say 2 news feed, 1 chat and 1 notification server
18:11 < maaarghk> so like, 500 servers run the same app, and 500 different clients are connected to a server each?
18:11 < geNAZt> + static fileserver + database server
18:11 < maaarghk> and the app has all 3 of the server functionalities?
18:11 < maaarghk> yeah of course
18:11 < geNAZt> no if you have 500 servers i would make it a bit different
18:12 < geNAZt> but it depends on how "heavy" the features are used
18:12 < geNAZt> so you can balance them right
18:13 < geNAZt> and it also depends on which dbms you are using, redis / memcached
18:13 < geNAZt> or something like this
18:16 < maaarghk> Is there a good book on this? :P
18:17 < geNAZt> balancing big server farms ?
18:17 < geNAZt> you can come to our company, we give you a talk :D
18:17 < maaarghk> Nah I'm just curious
18:17 < beeant> sorella mustache is better than underscore template in my opinion
18:18 < maaarghk> I read a lot about nodejs and etc being "scalable" and realised I only have a qualitative understanding of what that means
18:18 < beeant> but i like jade the best cos it gets rid large parts of html which makes the code looks meesy
18:18 < beeant> messy
18:19 < beeant> but you gotta get used to the grammar though, its kind of confusing too
18:19 < beeant> what i like about jade is that it looks really clean
18:21 < geNAZt> maaarghk, well nodejs is easy to scale because it can run everywhere without a big setup
18:22 < geNAZt> i can spawn up 150 instances of an application and load balance between them and i wont get any failures
18:29 <@isaacbw> geNAZt: are you at a consulting firm?
18:29 < geNAZt> nope
18:30 < mmalecki> geNAZt: what kind of scale are you running at?
18:30 < geNAZt> in our company ?
18:30 < mmalecki> yeah
18:30 < geNAZt> you mean employees ?
18:31 < mmalecki> geNAZt: I mean concurrent connections and such. like, why do you need 150 instances :-)
18:31 < geNAZt> well i dont know how much connections
18:31 < geNAZt> billions ?
18:31 < geNAZt> (i work at Telekom :D)
18:31 < mmalecki> nice
18:31 < mmalecki> oh, sweet, you guys rock node.js in production?
18:31 < geNAZt> well no :D
18:32 < geNAZt> web use ruby or java
18:32 < geNAZt> we*
18:33 < geNAZt> it depends on the dev team in our company
18:33 < geNAZt> some use java, some ruby, some php
18:48 <@MI6> joyent/libuv: Bert Belder v0.10 * db7dc68 : win: fix UV_EALREADY incorrectly set - http://git.io/9RGJYg
18:52 <@MI6> joyent/libuv: Bert Belder master * 7dbb974 : Merge branch 'v0.10' (+3 more commits) - http://git.io/PMrrUQ
18:59 < beeant> anybody using http://mattbradley.github.io/livestampjs/
19:00 < beeant> or knows any alternative to this something to compare
19:02 <@isaacbw> it doesn't do a whole lot that moment.js doesn't do on its own
19:02 <@isaacbw> I've never seen such a large promo page for 100 loc
19:03 < beeant> momentjs do auto update? like live?
19:03 <@isaacbw> no, but all you need is a setInterval
19:04 < beeant> it will take some space to type the codes to operate the DOMS
19:04 <@isaacbw> will it?
19:04 < beeant> ya maybe about 3-5 lines
19:05 <@isaacbw> span.textContent = moment(...).fromNow();
19:06 < lbod> hi guys, im having real problems handling uncaught exceptions with express and node. Are there any recent recommended docs on this? My code needs a serious refactor soon which ive been delaying, async and sync calls need to refactored and thats probably my problem at the moment. However I'm using the default error handling via express however some exceptions im only able to catch via process
19:06 < beeant> and the setInterval
19:07 < beeant> but ya it would be about the same if i use livestamp
19:07 < beeant> ill just use momentjs
19:07 < Venemo_N9> is there a lucene-like indexing engine for node.js?
19:10 < beeant> i dont know
19:10 < gkatsev> does lunrjs count?
19:13 < Venemo_N9> gkatsev, lunrjs?
19:13 < gkatsev> http://lunrjs.com/
19:14 <@isaacbw> how to search interwebs
19:14 < Venemo_N9> let me check
19:15 < Venemo_N9> gkatsev, does this run in node?
19:15 < gkatsev> haven't tried it but I would think so
19:16 < Venemo_N9> the site says it's for browsers
19:16 < gkatsev> yes, but I dont think it's doing anything specific. Since it's just javascript, it should run whereever javascript runs
19:17 < gkatsev> in fact, it already does `module.exports = lunr` if module.exports exists, so, you should be good
19:17 < Venemo_N9> gkatsev, and where does it store the index?
19:18 < gkatsev> in itself
19:18 < chaitime> hello, is anyone here learning programming and node.js at the same time? I have some basic questions and would like some advice on how to start as I am not finding current material that will suffice to get me going....or at least I Dont feel comfortable. I can paypal $ if needed but I would like to start ASAP and I have alrready started learning some basic things that may help pursue this
19:19 < Venemo_N9> gkatsev, in memory?
19:19 < gkatsev> yeah
19:19 < gluxon> chaitime: I can answer a few questions need be. You don't have to bring up money here, people will help without it.
19:19 < Venemo_N9> gkatsev, is there any way to save it?
19:20 < chaitime> thanks gluxon 
19:20 < gkatsev> um... I dont think that's the point of it, though
19:20 < beeant> anybody knows the best time format for SEO? or does it matter?
19:22 < arsdmthe> chaitime, http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js?rq=1 ???
19:23 < chaitime> I am familiar with basics of programming, I started with PHP, then made simple CRUD web apps w/o any OO. I then wanted to learn a language that wasnt web focused and tried many until I found one I like, and that was Ruby, and I learned basic stuff, strings, vars, flow control, classes and then tried using an SDL lib to make a basic mini 2D game. I am a fan of web work at the moment and I now basic js and jquery and I want to make s
19:23 < chaitime> A couple suggest seem to be RoR but it seems overkill and at times I feel there are new tools out that are as good or better. I wanted to know if node.js would fit my goal as far as making web apps that can do CRUD and help with things such as not having to write a user management part all by myself. I want to develop web apps quickly.
19:23 < chaitime> thanks arsdmthe 
19:24 <@isaacbw> that sounds like the exact use case for RoR (i.e. 'I want all the hard stuff to be done for me')
19:25 < gluxon> Yeah, for web apps specifically, go with RoR.
19:25 < gluxon> Node.js is for more flexibility and networking in general.
19:25 < gluxon> Not to say that you couldn't do it in Node.js.
19:26 < gluxon> Dare I say, you could even stick with PHP and learn from there. Then advance to RoR.
19:26 < chaitime> thanks isaacbw and gluxon 
19:26 <@isaacbw> blasphemy
19:26 < johnrlive> My two favorite languages are ruby and javascript
19:26 <@isaacbw> I only have room for one scripting language in my ylife
19:26 <@isaacbw> *life
19:26 < gluxon> johnrlive: No C++ love? :(
19:27 < johnrlive> I am not that nerdy :(
19:27 <@isaacbw> C 4 lyfe
19:27 < gluxon> How about Assembly?
19:27 < mmalecki> C <3
19:27 < gluxon> I am trying to learn that :D
19:27 < gluxon> Assembly is fun.
19:27 < johnrlive> no C or Assembly
19:27 < johnrlive> :(
19:28 < paul_uk> hey guys, anyone know of a package that can read in a file and then stream it to a browser?  I'm trying to do this but keep on getting length extends beyond buffer.  http://pastie.org/7926914  want something that manages the process itself ideally.
19:28 < johnrlive> My first language was VB so I came from microsoft camp then got into webapps went right into ruby and javascript
19:28 < arsdmthe> chaitime, http://greweb.me/glsl.js/examples/snake/ ???
19:28 < Venemo_N9> gkatsev, their docs say how to. thanks for pointing me to lunrjs! it might be what I'm looking for
19:28 < johnrlive> although I think I would want to learn Java over C
19:28 < paul_uk> eww java
19:29 < gkatsev> Venemo_N9: np
19:29 < aet> can anybody recommend a good auth module that includes facebook, twitter, openauth etc?
19:29 < gkatsev> passport? is that still maintained?
19:29 < johnrlive> @gluxon I would choose ruby/padrino or nodejs/express.js
19:30 < geNAZt> yes, passport
19:30 < chaitime> arsdmthe: wow this was sweet!
19:30 < aet> looks to be, great thanks
19:30 < arsdmthe> ;)
19:31 < gluxon> johnrlive: I would have just gone with Padrino or Rails to learn the architecture of a web app. You know, MVC stuff.
19:35 <@isaacbw> I write all my web applications in shell scripts
19:36 < DarkArgon> paul_uk can't u just do readstream.pipe(res) ?
19:36 <@isaacbw> or if I'm in a hurry, awk
19:36 < paul_uk> DarkArgon: ok let me try that
19:38 < DarkArgon> but if you only pipe you won't get base64
19:42 < paul_uk> DarkArgon, actually don't want it in base64, was just trying to display the image any way.  Ok, i've got pipe to work, but it just outputs it in one shot rather than doing it in chunks.
19:42 < paul_uk> thats what i have: http://pastie.org/7926970
19:45 < s-p-n> from docs: "options can include start and end values to read a range of bytes from the file instead of the entire file. Both start and end are inclusive and start at 0. The encoding can be 'utf8', 'ascii', or 'base64'."  - http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options
19:45 < s-p-n> it doesn
19:45 < s-p-n> *doesn't say anything about manually chunking the image
19:48 < paul_uk> s-p-n: yeah i saw that.  i wasn't using createreadstream for my first attempt however
19:49 < paul_uk> this is my chunking version:  although I'm not currently able to work out the length is greater than the buffer issue: http://pastie.org/7926914 
19:50 < DarkArgon> by "one shot" u mean that it loads the whole file into ram and than outputs it?
19:51 < geNAZt> no
19:51 < geNAZt> he wants to output a file x over 5 seconds
19:51 < geNAZt> not as fast as possible
19:51 < DarkArgon> ahh.. ok
19:52 < paul_uk> geNazt: pretty much yeah, actually its a 5MB file and 129k segments lol.  there is logic to it, as to why I'm attempting this.
19:52 < geNAZt> well you can stat the file before
19:52 < geNAZt> and create a readstream which has the highWaterMark set to the filesize / 5
19:53 < paul_uk> geNAZt: how do you mean stat the file ?
19:53 < geNAZt> and then on every readable event you make a queue which gets iterated every second
19:53 < geNAZt> fs.stat(file, function(err, stats) {});
19:53 < geNAZt> so you know how big it is
19:54 < geNAZt> well you already did that
19:54 < geNAZt> can you output the stats.size
19:54 < geNAZt> and the chunk variable pls ?
19:54 < paul_uk> geNAZt: ah yeah.  sorry just getting back into nodes and will take a while before i learn the api again lol
19:55 < paul_uk> the chunk size will always be static so I'm not outputting it
19:56 < geNAZt> well i think chukn * 10 is greater then the filesize
19:56 < geNAZt> which doesnt work
19:57 < paul_uk> geNAZt: I'm doing Math.round(filesize / 10)
19:57 < geNAZt> yes
19:57 < geNAZt> 9.5 in round is 10
19:58 < geNAZt> so round(95/10) * 10 == 100
19:58 < geNAZt> and not 95
19:58 < paul_uk> so what do you recommend?  i was attempting to catch right at the end the correct chunk to use, but thats obviously failing
19:59 < geNAZt> well you can subtract the chunksize from the filesize
19:59 < geNAZt> var restToRead = stats.size;
19:59 < geNAZt> and every iteration
19:59 < geNAZt> restToRead -= chunk;
20:00 < geNAZt> and if (restToRead < chunk) chunk = restToRead;
20:01 < Industrial> How do people usually connect Node.JS servers with eachother in a network? Or do they hardwire the ports?
20:01 < geNAZt> well i hardcode them
20:01 < paul_uk> geNAZt: thanks will try that
20:02 < mmalecki> Industrial: at nodejitsu we use both service registry and discovery using our server db
20:03 < geNAZt> mmalecki, but this implies you have some sort of "dns" for this
20:04 < mmalecki> geNAZt: we don't actually. there's a centralized storage of servers tho
20:04 < Industrial> mmalecki: does information flor in a dependency style? e.g. my website wants to log thus connects to the logger and emits/calls to it? or is it the other way around (logger is up, whenever a new service spawns, connect to it, wait for log events and handle them)
20:05 < mmalecki> Industrial: services connect to services they depend on. so website calls out to logger, not other way
20:05 < Industrial> right
20:05 < Industrial> what happens when a dependency goes down?
20:06 < mmalecki> Industrial: fallback to a failover
20:06 < Industrial> if it connects TO the depencency, how does it know when its up again
20:06 < Industrial> ok
20:06 < geNAZt> well you can use redis queues for this
20:06 < geNAZt> or not ?
20:08 < Industrial> maybe
20:11 < filipminev> guys, wanna give a hand in stress testing a nodejs service of ours? ;)
20:11 < filipminev> it's a music service where people can listen together to music
20:11 < geNAZt> filipminev, guide me !
20:11 < filipminev> we are throwing a virtual "party" right now
20:11 < filipminev> feel free to check it out http://earport.fm/party :) and click around
20:13 < paul_uk> blare, i can't get this thing to work.  I'm surprised there are no answers in SO about streaming per byte
20:16 < daniel_z> hey, how should I install node.js on ubuntu 13.04 ? any thing special ?
20:20 < SDr> filipminev, strongly recommend doing client-side error logging (via eg window.onerror ), because that page is non-functional
20:21 < gluxon> daniel_z: Chris Lea's ppa packages.
20:22 < gluxon> daniel_z: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint
20:23 < daniel_z> gluxon: I can see there a note for 12.10, is it still true for 13.04 ? thanks.
20:23 < daniel_z> "Ubuntu. Quantal (12.10) users may need to install the software-properties-common package ..."
20:23 < gluxon> daniel_z: It should.
20:23 < gluxon> Although I think you should already have it in 13.04
20:24 < daniel_z> gluxon, i'll try without it first and see.
20:24 < daniel_z> i'm only a week with ubuntu, trying stuff slowly ...
20:29 < daniel_z> v.0.10.7 installed thanks
20:32 < paul_uk> hey guys, if i read in an image and display it and don't do a res.end.  will the connection be effectively open?  or will some browsers/devices close it?
20:34 < gluxon> It's always safe to do it. My guess would be the browser would continue waiting for more content/
20:34 < Alz> hi
20:35 < Alz> i search a node app to control raspberry pi (GPIO) pins
20:36 < paul_uk> gluxon: actually it does close the connection after a bit
20:37 < gluxon> Alz: There are tons. pi-gpio for one in npm.
20:37 < gluxon> Heh, gpio, pi-gpio, rpi-gpio
20:38 < Alz> nice thx a lot
20:49  * mscdex shakes a fist at CentOS
20:58 < beeant> dont you think coding while sleepy can be as dangerous as driving while sleepy?
20:59 < gluxon> beeant: No.
21:02 < johnrlive> I like NVM
21:07 <@isaacbw> I sometimes solve problems best when I need sleep
21:15 < medice> or so you think
21:24 < paul_uk> is there a way of exiting an async loop when res.on("close"  gets fired?
21:32 < paul_uk> nm
22:10 < gyrboy88> http://xbrazilbrazilx.blogspot.com/2013/05/brazilian-girls-hot-collection.html
22:10 < Willox> thanks
22:13 <@isaacbw> my automatic response was to click the link :/
22:13 < Willox> hopefully you are not scarred
22:13 <@isaacbw> I even followed it through a few links in before realizing what was going on
22:13 < Stumbler> *hangs head in shame*
22:14 < Stumbler> I too
22:14 < Stumbler> It was supposed to be a break from studying barcode formats
22:14 < Stumbler> but alas
22:14 < Willox> what
22:14 < Willox> What did you discover of barcodes?
22:14 <@isaacbw> Stumbler: what are you working on
22:15 < Stumbler> I was given the task of writing a document scanner utility.  Part of it is to automatically find and read barcodes on scanned documents.
22:15 < Stumbler> so I'm brushing up on my formats
22:16 < Willox> That sounds quite cool
22:16 < Stumbler> yea, it did to me at first too. XD
22:16 <@isaacbw> do you know your way around machine vision?
22:16 < Stumbler> enough to get by
22:16 <@isaacbw> sounds like fun
22:17 < Stumbler> Yeah, the first half of the utility watches network folders for new scans, pacifies pdfs, converts each page to an image format.  That was an interesting exercise.
22:17 < Stumbler> pagifies*
22:22 < lacrymology> I've got a problem with callbacks within a loop. An iteration variable doesn't change between closures. http://pastebin.com/M2gm1aix << see the `playlist` at L2, I need to update it in L24., but the last one in the array gets to all callbacks
22:23 < lacrymology> the only thing I can think of right now is calling the insert() from another function and passing the playlist as a parameter
22:24 < jarofghosts> hey has anyone here used felix-couchdb?
22:24 < jarofghosts> and might be able to answer a quick question about
22:24 < jarofghosts> it
22:25 < rcs> lacrymology: Right. You're lying to yourself and readers by having the "var" statement inside the for loop.
22:27 < rcs> lacrymology: You can either keep referencing them by index, or do a (function(playlist) { listcol.insert.... } )(playlist) kind of thing.
22:47 <@isaacbw> woo javascript
22:48 < mscdex> lacrymology: or you can use .forEach()
22:48 <@isaacbw> or use a self calling function
22:48 < mscdex> or use a module that just does async loops
22:48 <@isaacbw> I do that sometimes if I want a new scope and don't want to fuss too much
22:49 < mscdex> someone write a module that does a for loop!
22:49 <@isaacbw> (function() { //lol })()
22:49 < mscdex> syntax error!
22:49 <@isaacbw> :(
22:49 <@isaacbw> (function() { /* lol */})()
22:49 < mscdex> you got it!
22:51 <@isaacbw> I've taken to solving problems in terrible ways as long as I make fun of myself in the comments
22:52 < mscdex> we need a module that generates humorous code comments that are then injected into source files
22:53 < mscdex> in random places
22:55 < mscdex> and then sends pull requests on github
22:58 <@isaacbw> that would be glorious
22:59 < mscdex> and the pull request message would contain text thanking the repo owner for using github and not bitbucket
23:02 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:07 < nog> just have it run everything through this. https://github.com/DanielRapp/twss.js
23:18 < DarkArgon> hi nog :)
23:21 < paul_uk> hey guys, wrote a script to act like a bug for email opens.  to track when a user spends time viewing an email.  http://pastie.org/private/tdwnqlkaxfsmnxmo9s5pq  any suggestions on how i could do this better?
23:23 < zomg> Looks ok to me, just one minor thing.. you probably should stick to the standard naming conventions with function names
23:23 < zomg> As in, use getStart rather than get_start
23:24 < zomg> Also some people don't like messing around with prototypes for builtins but that seems to be somewhat divided lately
23:24 < gkatsev> zomg: I think it's mostly against. What's really still divided is shimming.
23:25 < gkatsev> also, those functions do not belong on the array prototype.
23:25 < paul_uk> zomg: thanks for that.  I'm used to not doing that.. that being camel case or pascal case?  i always get confused lol.
23:26 < zomg> function and variable names lowerCamelCase, object constructor names UpperCamelCase (eg. String, MyFoo)
23:26 < paul_uk> gkatsev: how do you mean?  i modified that from somewhere on on SO.  do you mean, it shouldn't be used for node?
23:27 < gkatsev> based on what those functions do, it doesn't make sense for them to be on the array prototype.
23:27 < gkatsev> and SO has a lot of terrible javascript :(
23:28 < paul_uk> gkatsev: yeah i agree there elol.
23:28 < gkatsev> you should instead just have 3 functions, say, has, getStart, remove, that each take an array, x, and y and then work on it.
23:28 <@Nexxy> substack, affirmative
23:28 <@Nexxy> oh, wrong channel
23:29 < gkatsev> Nexxy: never the wrong channel. Only the wrong time.
23:29 < paul_uk> gkatsev: not used functions before, will check it out
23:29 < zomg> paul_uk: yeah those functions are quite specific to your exact use case with this type of object.. Since array is generic, as in you can put anything in it, you probably should avoid putting functions of such specific behavior into its prototype
23:32 < nog> hello DarkArgon 
23:38 < othiym23> my laptop looks pretty boss with its NodePDX unicorn sticker on it
23:39 < nog> DarkArgon: so after looking through the code some more, does look like there is already what i was wanting to do written in the code.. i figured it wasnt there because it wasnt listen in commands :P
23:39 < othiym23> and the Geoloqi sticker, and Cascadia JS sticker, and the npm sticker I won from mbalho last year, and I guess the New Relic sticker is cool too I guess
23:40 < othiym23> Nexxy: did you see the CrazyFlie link I pasted in last night?
23:40 <@Nexxy> othiym23, wat no
23:41 < DarkArgon> any1 ever piped into a crypto hash stream?
23:42 < nathan7> mbalho: How do I acquire an npm sticker?
23:43 < nathan7> Also, hey gkatsev
23:44 < DarkArgon> nog, still talking about the hotcode problem?
23:44 < nog> DarkArgon: yea.. appears i was wrong in having to actually write it myself.. heh
23:45 < DarkArgon> so whats your solution now? reload the module, child process, or cluster of child processes talking over a http api using json schemas bla bla bla?
23:46 < nog> reloads all the modules.. no child processes at all
23:47 < nog> somthing that is probably worth putting in though.. to be able to better handle load
23:47 < DarkArgon> that was my first suggestion. you delete the module cache?
23:48 < nog> still digging into the specifics of how it does it
23:48 < yanush> hello folks, anyone can point me to a good visual studio node native extension tutorial on the net? (something updated)   thanks :)
23:48 < DarkArgon> oh you're letting a module do it for you nog?
23:50 < nog> ack, im wrong.. its just reloading the files, not reloading the code.. a restart which reloads the code kicks all connections
23:50 < DarkArgon> sounds like forever
23:51 < othiym23> Nexxy: http://www.seeedstudio.com/depot/crazyflie-nano-quadcopter-kit-6dof-with-crazyradio-bccfk01a-p-1364.html
23:51 < nog> comm
23:51 < othiym23> nathan7: I got my npm sticker by correctly identifying the correct API call to get accurate timing information in Node 0.8, dunno how you could get yours
23:52 < nathan7> I HAVE A SPACE ON MY LAPTOP
23:52 < othiym23> nathan7: I bet isaacs still has a few knocking around somewhere
23:52 < nathan7> RESERVED FOR AN NPM STICKER
23:52 < nathan7> I was trying to get isaacs to send me an npm sticker
23:52 < nathan7> I'm terrible at convincing people
23:52 < othiym23> nathan7: you gonna be at NodeConf?
23:52 < nathan7> All the confs are outside my holidays pretty much
23:52 < othiym23> dang
23:53 < bubo> I want a Node.js sticker
23:53 < bubo> :\
23:53 < ningu> yeah, I want to go to nodeconf but the timing is terrible for me
23:53 < othiym23> the easiest way to squeeze that kind of stuff out of people is to hassle them in person
23:53 < nathan7> mhm
23:53 < othiym23> I want some transparent stickers that just have the hexagon + js part of the logo in some kind of day-glo color
23:54 < othiym23> maybe I'll make some
23:55 < ningu> is there a cafepress for stickers?
23:55 < nathan7> Yeah, several
23:56 < nathan7> zazzle
23:56 < nathan7> hm, they won't cut 'em in custom shapes though
23:56 < nathan7> I should fire up the Fablab's vinyl cutter and get some green vinyl
23:56 < nathan7> just make green hexagons
23:57 < nathan7> and mail them around the world :D
23:57 < mscdex> bubo: shirt not sticker!
23:57 < bubo> why not both?!?!
23:58 < othiym23> when I finally get 1.0 of the New Relic Node.js agent out, I'm going to get custom stickers made to commemorate the event
23:58 < othiym23> because why not
23:58 < othiym23> also because it has been sooo loooong since I started work on that thing
--- Log closed Sun May 19 00:00:21 2013
