--- Log opened Fri Apr 05 00:00:22 2013
00:06 <@isaacbw> from RFC 2822 (email): "
00:07 <@isaacbw> For example, some sites may choose to print mail on a printer and deliver the output to the addressee's desk."
00:07 <@isaacbw> I really want to know if anyone ever did this
00:07 <@isaacbw> I would subscribe to a service that printed and mailed all my emails, just because it would be awesome
00:08 <@isaacbw> but someone somewhere must have built a mail system that had email delivered internally
00:08 <@Nexxy> > 2001
00:10 <@isaacbw> Oh, I just remembered that Steve Jobs is dead. That makes me sad
00:12 <@isaacbw> this is the future yo
00:14 < tjfontaine> isaacbw: I know for a fact that people still do that, though no longer on serial printers
00:14 < ljharb_work> isaacbw: check out outbox - they pick up your mail, scan it, and you can access it on their website.
00:14 <@isaacbw> ljharb_work: what if you get a magazine
00:14 < ljharb_work> who gets magazines
00:15 <@isaacbw> I like magazines
00:15 < ljharb_work> lol i'm sure they've come up with something for mags
00:15 <@isaacbw> Wired is getting harder and harder to read though because of all the ads
00:15 < ljharb_work> also all the stale content that was on their website weeks earlier?
00:15 <@isaacbw> sshh
00:16 < MI6> joyent/node: Fedor Indutny v0.10 * 58f93ff : crypto: use better memory BIO implementation - http://git.io/ClrCjQ
00:16 <@isaacbw> actually I don't read them anymore
00:16 <@isaacbw> I just like getting them
00:16 < ljharb_work> :-p
00:17 <@Nexxy> I think isaacbw is just into wasting paper
00:17 <@isaacbw> that sounds about right
00:17 <@isaacbw> fuck trees
00:17 < syncan> they make make like themselves and get out of here
00:18 < ChrisPartridge> maybe you were a lumberjack in a past life isaacbw
00:18 < syncan> all past lumberjacks are now trees
00:18 <@isaacbw> that's terrifying
00:19 <@isaacbw> lumberjacking these days is all automated anyway
00:19 <@isaacbw> they have huge machines do all the hard work
00:19 < syncan> i'm going to have nightmares about trees chasing people with axes tonight
00:19 < syncan> in flannels
00:29 < faceleg|work> adblock+
00:29 < faceleg|work> oh right REAL LIFE reading
00:29 < faceleg|work> in my country these "machines" are known as poor prople
00:29 < faceleg|work> people
00:30 < faceleg|work> I had a dream I was stuck in north korea for some reason, with my baby who had a bell tied to her foot. made stealthy escapes from the military very challenging
00:32 < syncan> was it Kim Jong or Kim Yong?
00:33 < syncan> or Kim Fields?
00:33 < samholmes> what's faster than nodemon?
00:35 < samholmes> what do you use?
00:36 <@isaacbw> faceleg|work: which country
00:37 <@isaacbw> I just cooked a flawlessly tender sirloin steak
00:38 < syncan> i use node-supervisor
00:38 < sbarcteam> hi. I'm trying to write tests for module's private methods.
00:39 < sbarcteam> somebody suggested to use a special variable, and set module.exprots.priv_method = priv_method
00:40 < sbarcteam> what annoys me is that I'm adding a check if (TESTING) { module.exports.m = m} for each .
00:40 < sbarcteam> this is a bit annoying, and this would go to the user.
00:40 <@isaacbw> seared at very high eat each side with olive oil in a cast iron skillet
00:41 <@isaacbw> lightly seasoned 20 minutes before with salt, pepper, and a sprinkling of paprika
00:41 <@isaacbw> *for 3 minutes
00:41 < sbarcteam> hmm.... wtf...
00:41 <@isaacbw> *heat
00:41 < syncan> i saw a picture of a steak in a magazine about 5 minutes ago and i really wanted one
00:41 < jesperado> â€¦and I'm hungry
00:42 < sbarcteam> anyway,  is there a "best practice" in writing unit tests (with nodeunit) without making the module being tested dirty with testing code ?
00:43 <@isaacbw> there aren't many best practices in node right now
00:43 < ljharb_work> sbarcteam: what would you need testing code for in the module?
00:43 <@isaacbw> it's basically do what works and will continue to work
00:43 < ljharb_work> sbarcteam: don't test private things. if you want to test it, move it out into a separate module.
00:43 < ljharb_work> that applies in most every language.
00:43 < syncan> couple the components as tightly as possible, that's all i keep hearing
00:43 <@isaacbw> yea, and don't get caught up with over-engineering
00:43 < samholmes> haha, google is not working for me right now, so all ya who say "google is your friend" or "just google it" can suck my b***s!
00:44 <@isaacbw> node is meant to be a rapid development platform
00:44 < sbarcteam> ljharb_work: the code: if (TESTING) { // expose private method code } IS TESTING CODE in the module.
00:44 < ljharb_work> syncan: lol
00:44 < faceleg|work> isaacbw: new Zealand
00:44 < ljharb_work> sbarcteam: right - don't do that. if it's private, you do not test it. if you want to test it, separate it so it's not private.
00:44 < samholmes> LOL! HAHA! OMFG! ROLFMAO!!...
00:44 < samholmes> ...wait.
00:44 < faceleg|work> syncan: YES
00:44 < samholmes> Google is not working for me..
00:44 < samholmes> D:>
00:44 <@isaacbw> faceleg|work: New Zealand's major export is Flight of the Conchords
00:45 < faceleg|work> isaacbw: I thought it was dissatisfied young professionals
00:45 < ljharb_work> isaacbw++
00:45 < ljharb_work> they also make wine. also lord of the rings
00:45 <@isaacbw> oh yea, lord of the rings
00:45 < faceleg|work> omg shutup
00:46 < ChrisPartridge> don't forget the sheep
00:46 < syncan> and Lucy Lawless
00:46 < faceleg|work> only a matter of time
00:46 < sbarcteam> not hobbitses ?
00:46 < faceleg|work> nah they arent real things
00:46 < sbarcteam> who ? sheep ?
00:46 < ljharb_work> lucy lawless! good call
00:46 < syncan> Lucy Lawless'?
00:47 < sbarcteam> Lucy Lawnless?
00:47 < ljharb_work> xena, warrior princess
00:47 < ljharb_work> who are you people
00:47 < sbarcteam> anyone saw Paula Thomson ?
00:47 < syncan> my question was rhetorical
00:49 < samholmes> didn't new zealand export mary mother of jesus too?
00:49 < faceleg|work> I make es
00:49 < faceleg|work> also she was in BSG
00:49 < faceleg|work> man sometimes I don't even know what I type
00:49 < syncan> yeah i already mentioned Lucy Lawless
00:50 < sbarcteam> ljharb_work: I agree with your approach, still it'd be nice to have something that parses js files, and say replaces some of the methods (vars pointing to functions ), on the fly, compiles it, and then tries to run'em .... is there something like this already (probably not nodeunit)
00:50 < sbarcteam> ?
00:50 < syncan> She was in Spartacus as well
00:50 < syncan> i saw her in that .. and then saw it again. And again
00:51 < ChrisPartridge> sbarcteam: sounds like more trouble than it's worth
00:51 < ljharb_work> sbarcteam: no, and that wouldn't be nice - you'd be testing code that isn't what's really running
00:51 < ljharb_work> that means you're not testing anything at all
00:52 < sbarcteam> ljharb_work: I'm probably confused. but I imagine: the module has some basic functionalities (private), and higher complexity "exposed" functionalities.
00:52 < faceleg|work> does this pic send the wrong message? http://www.iitp.org.nz/membership/students
00:53 < syncan> hahaha
00:53 < ljharb_work> sbarcteam: right. you're only supposed to test the exposed functionality.
00:53 < samholmes> What if async worked like this: var foo = async(); useFooSoWillBeInvokedFirst(foo); wontUseFooSoWillBeInvokedSecond();
00:53 < sbarcteam> are you saying "unit testing" would be then to test only high level exposed part ?
00:53 < ljharb_work> yes
00:53 < sbarcteam> hm... 
00:53 < sbarcteam> I probably need to read something about this. do you have any pointers ?
00:53 < ChrisPartridge> sbarcteam: test the public interface, and move along 
00:54 < ljharb_work> ^ that.
00:54 < samholmes> async(){ setTimeout(f(){ return 23 }, 1000); }
00:54 < sbarcteam> that was short :)
00:54 < ljharb_work> sbarcteam: i'd add, if you want to test something private, then move the private part to its own module (ie, giving it a public interface) and test that too.
00:55 < ChrisPartridge> and from that, you create modules that do one thing, and do one thing well
00:55 <@isaacbw> unit testing is generally geared towards a public interface
00:55 < sbarcteam> ljharb_work, ChrisPartridge I think I understand you.
00:55 < syncan> and that stuff should be fail fast asserts
00:55 < sbarcteam> Thanks a bunch.
00:55 < syncan> not unit tests
00:55 < ljharb_work> np
00:55 < syncan> generally
00:55 <@isaacbw> Thanks a brunch.
00:55 <@isaacbw> Eggs and sausage and gravy-doused biscuits
00:56 < sbarcteam> is isaacbw a bot ?
00:56 <@isaacbw> and orange juice and bad coffee
00:56 < ChrisPartridge> isaacbw: seriously, stop making me hungry
00:56 <@isaacbw> sbarcteam: yes?
00:56 <@isaacbw> maybe?
00:56 < syncan> how about a greasy pork sandwich, served in a dirty ashtray?
00:57 <@isaacbw> hah, I would go to a place that served that just for the hipster cred
00:58 < ChrisPartridge> syncan: i'll take one, minus the sandwich
00:58 < syncan> interesting choice
00:59 < sbarcteam> my take: big avocado sliced into big slices, salted, peppered and sprinkled with lemon juice.
00:59 < syncan> that loses you about 70% hipster
01:00 <@isaacbw> damn, that's almost all the hipster
01:01 < ChrisPartridge> i've been trying to cut down on my hipster intake anyway
01:01 < syncan> yeah, there's just a soul patch left
01:03 < syncan> for some reason, the "N" program .. it caused NPM to make a /user/local/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/bin/ folder
01:04 < ChrisPartridge> binception
01:05 < syncan> every day you wake up, it's just a symlink to the last
01:06 < faceleg|work> man I want chocolate
01:06 < faceleg|work> so bad
01:06 < faceleg|work> it's tough
01:06 < faceleg|work> being away from my pantry
01:06 < syncan> i first read "party", and then "panty"
01:06 < zivester> anyone see any issue with this function generating a random 'length' based url safe string?
01:06 < zivester> require('crypto').randomBytes(length).toString('base64').replace(/\//g,'_').replace(/\+/g,'-').slice(0, length);
01:07 < syncan> pantry, i don't think i like that word
01:07 < sbarcteam> ok. g'nightie.
01:07 < zivester> the "slice" seems like a bit of a hack.. just not sure how to generate one properly without it
01:07 < syncan> night
01:08 < samholmes> http://samholmes.me/post/47152840100/natural-async-programming
01:08 < samholmes> Please read my thoughts. :)
01:08 < samholmes> Read my mind.. o.O
01:12 < ningu> substack: hey you around? I'm trying to use your gutter module on v0.10 but it's not working, apparently because pause-stream/through does not implement the 'readable' event.
01:12 < ningu> I was wondering if there's a way to fix it in my code or if you'd have to update the module.
01:13 < ningu> code here: http://pastebin.com/cmkAXVfn
01:14 < substack> ningu: it needs to be updated to use the through module
01:14 < ljharb_work> samholmes: i don't think it can be done easily, nor do i think it should
01:14 < ningu> substack: but pause-stream currently (0.0.9) *is* the through module.
01:14 < ljharb_work> samholmes: promises make your code *look* synchronous, but it's not actually sync. your suggestion makes it work synchronously, which is broken
01:15 < ningu> substack: but pause-stream uses through 2.1... maybe it has to be 2.2?
01:15 < faceleg|work> promises are made to be broken
01:15 < ningu> anyway I created a github issue
01:15 < samholmes> ljharb_work: why is that brokeN/
01:15 < syncan> samholmes: my thoughts are this .. to me i feel that just scratches the surface of the problem. because that sounds like the last 10 years of any AS3 or AS2 I have done. And it always ended with assertions in the callback handlers
01:15 < samholmes> ?
01:16 < samholmes> actionscript?
01:16 < ningu> lights... camera... actionscript
01:16 < ningu> yes that was an entirely pointless comment
01:16 < samholmes> What are assertions again?
01:17 < syncan> samholmes: what i think is a greater challenge is what comes with the more truly async problems we start to face. and that's the fact that CPUs are pinning, we're working with cores and concurrency. so we're going from functional and procedural programming and testing - how are brain sees things - to captures of states in time
01:17 < ningu> substack: anyway sounds like it's a pretty simple fix (for you :P), would be awesome if you get a chance to do it
01:18 < syncan> every distribution, agent, etc not only has a concept of its data, but it's all slices of immutable data along a timeline
01:18 < samholmes> syncan: wtf are you saying
01:18 < syncan> you take a language like LISP
01:19 < syncan> it's functional
01:19 < syncan> and in technology, we're now circling back 
01:20 < ryanaz> which would be faster for scale?  using sequelize or using node-validator && node-mysql ? 
01:20 < syncan> we've built up constructs in programming that match how we perceive things. even callbacks, async; once you do it for a while, it becomes something you can grasp
01:20 < syncan> but take 50 agents / async processes, models of data that need to actually sync state together, distributed
01:21 < syncan> and test that
01:22 < samholmes> syncan: these are problems in async.
01:23 < syncan> indeed
01:23 < samholmes> syncan: but I'm just talking about syntax
01:23 < rcombs> another docs thing: I don't think it's specified anywhere that Buffers aren't guaranteed to be empty at creation, and it's reasonable to assume that they would be if not told that they aren't
01:24 < syncan> i guess my point is, the single callback is comprehensible to me
01:24 < samholmes> syncan: sure, but my point is, it could be better.
01:24 < syncan> my multi-agent concurrency testing with states, that's scary
01:24 < samholmes> a callback is basically saying "Here's input so I can get output"
01:24 < syncan> oh i know
01:24 < samholmes> that's backwards IMO
01:25 < samholmes> A promise is better, cause it's output from the async function.
01:25 < samholmes> But the output needs inputs in order to access the output.
01:25 < syncan> just like a method with parameters
01:25 < samholmes> So I figured, what if the output could just be used and the language implements this into place.
01:26 < syncan> you pass it values, it does something intrinsic, and you expect a certain result
01:26 < samholmes> syncan: I'm not following?
01:27 < syncan> the different in my mind being really, instead of your result being on the left side of the equal sign operator. it's moved positionally 
01:27 < samholmes> where is it moved?
01:27 < syncan> that's how my brain sees callbacks
01:27 < syncan> it's later in the linear story of code
01:27 < syncan> it's in chapter two
01:28 < samholmes> which is vague
01:28 < samholmes> idk
01:28 < samholmes> I see it as this: return is for output, arguments are for input.
01:28 < syncan> it has a recognizable patter though
01:28 < syncan> very consistent
01:28 < samholmes> return is being rendered unnecessary because we're just using inputs.
01:29 < syncan> so much so, that IDE's can create callbacks for you, with the type of event coming into the method
01:29 < syncan> i'm not trivializing it
01:29 < samholmes> Well, in a way, I'm proposing that the pattern for async is that of sync.
01:29 < trusktr> ^ makes no sense?
01:29 < samholmes> I'm pondering*
01:30 < syncan> but i do view callbacks as a recognizable pattern, with coordinates in space
01:30 < samholmes> trusktr: the pattern for writing "looks" the same
01:30 < trusktr> Yeah.... But they finish are different time.
01:30 < trusktr> :D
01:30 < samholmes> True
01:31 < samholmes> I guess it'll make things very strange if what looks linear (up and down) is in fact scatterred.
01:31 < samholmes> but this is up to how you organize and callbacks to solve this either.
01:32 < syncan> what you're saying is actually quite in-line with my thinking :)
01:32 < samholmes> doSomething(async()); doSomethingElse(async());
01:32 < samholmes> syncan: In what way?
01:33 < syncan> your proposing the pattern of async is sync
01:33 < syncan> in the context of what you wrote, and the kind of event driven programming i've done for a long time
01:34 < syncan> i was pushing the question towards multi-agent concurrency problems
01:34 < samholmes> var s = sleep(2000); alert("I don't wait!"); when(s) { alert("I do wait"); }
01:34 < syncan> because that's a very real problem we're facing
01:34 < syncan> problem, adventure ...
01:36 < syncan> that's interesting
01:36 < syncan> that has a semantic / tuple pattern to it
01:38 < samholmes> tuple?
01:38 < samholmes> what's the multi-agent concurrency problem?
01:39 < syncan> what you just laid out
01:39 < syncan> think of it like
01:39 < syncan> object action/event subject/result
01:40 < syncan> the multi-agent concurrency problem
01:40 < syncan> to answer that..
01:41 < syncan> it's that we've pretty much hit our wall on cpu processing speed, limited by bandwidth in memory
01:41 < syncan> so we're solving it by adding cores, horizontally scaling
01:41 < syncan> working in concurrency
01:42 < syncan> so in the early ages of computer programming
01:42 < syncan> things were very straight forward functional
01:43 < syncan> and we began designing abstractions around that, so that our brains could build systems
01:43 < ningu> unfortunately our brains have certain design limitations
01:44 < syncan> no longer did it come down to registers, having an immutable value at some time .. we constructed relationships and systems around (eg OOP, frameworks)
01:45 < syncan> yeah exactly, more of a schema than limitation
01:45 < syncan> well except that we can't be in 50 places at one time
01:46 < ningu> we got rid of our pointers and got setters... but what is the dog breed of the future?
01:46 < syncan> and we don't tend to think of values of things as an infinite number of immutable data slices
01:47 < syncan> what's the most sociable dog in the world?
01:48 <@mbalho> snoop
01:48 < syncan> snoop dogg and snoopy
01:48 < syncan> that's not enough dogs
01:48 < ningu> infinite number of immutable data slices... are you talking about pure functional approaches?
01:48 < draginx> if i need to write a password to stdin (specifically "cryptmount") how would I pass the password to it?
01:49 < ningu> draginx: from node? stdin is a stream, just write to it
01:49 < samholmes> I've updated my post http://samholmes.me/post/47152840100/natural-async-programming
01:49 < syncan> i wouldn't say end-game purely functional, but definitely in that space
01:49 < samholmes> There are examples of parallel and serial async control flow that is completely transparent.
01:49 < syncan> that Erlang is so hot right not
01:49 < syncan> now
01:50 < ningu> yeah I've noticed. I don't know erlang at all.
01:50 < samholmes> I think this will have less of a learning curve and less of a distraction for solving other problems.
01:50 < ningu> haskell seems to have never quite made it to the mainstream
01:50 < syncan> looked at Play?
01:50 < draginx> basically i need a way to write to stderr in a non interactive shell
01:50 < ningu> but monads and currying in some fashion or other seem to be possible in js
01:51 < syncan> Scala/Java/Akka
01:51 < ningu> I don't know what Play is so I guess I haven't looked at it.
01:51 < syncan> that's actually a really good example of Futures/Deferred
01:51 < syncan> Actor based
01:51 < ningu> are we finally read to answer the question, what happens to a dream deferred?
01:51 < ningu> ready*
01:53 < samholmes> I'm thinking that foo(callback) is incorrect. callback(foo()); is better because now everything conforms to this idea that function return a value at some point (with immediate or later). I'll ponder this idea more, later.
01:53 < chilts> ningu: got here fine earlier this afternoon :)
01:53 < chilts> just been out walking
01:53 < ningu> chilts: cool
01:53 < chilts> might have a lie down though, thought I was feeling ok, but a bit of tiredness is kicking in
01:54 < syncan> samholmes: that looks familiar .. like https://github.com/caolan/async :)
01:54 < ningu> yeah, the jetlag is kind of inevitable going across the pacific
01:54 < samholmes> syncan: how does that look familiar?
01:54 < ningu> chilts and I are meeting up tomorrow evening if any other noders in the bay area want to hang out
01:54 < chilts> yeah, and I don't sleep on planes much
01:54 < chilts> yeah, come and join us if anyone is around :)
01:54 < syncan> async
01:54 < ningu> ah, see, I am able to sleep on planes really well for some reason
01:54 < ningu> no idea how
01:55 < chilts> I don't get the opportunity to come here very often (last time was 15 year ago) :D
01:55 < syncan> the module, that is
01:55 < samholmes> syncan: don't get async in my examples confused with the lib
01:55 < chilts> it was a different world back then
01:55 < ningu> where have you been walking around?
01:55 < chilts> went up Howard (I think) to 11th and met my mate who works at Heroku
01:55 < chilts> then back down to the waterfront
01:55 < ningu> in soma?
01:55 < chilts> not into the centre yet
01:56 < chilts> soma?
01:56 < ningu> soma = south of market st downtown
01:56 < ningu> it's a neighborhood
01:56 < chilts> yeah, south of market
01:56 < ningu> lots of startups there cause office space is relatively cheaper
01:56 < chilts> I was going to walk down market but did howard instead
01:57 < ningu> downtown is pretty commercial so there isn't necessarily a lot to do besides shop
01:57 < chilts> ah, maybe I'll just wander more on the waterfront later
01:57 < ningu> anyway I know there are a lot of folks around, I guess they're all just being shy
01:57 < chilts> :)
01:57 < chilts> no worries
01:57 < chilts> you're still keen?
01:57 < ningu> sure
01:58 < chilts> :)
01:58 < ningu> you just have email? I guess for 3 days it isn't worth getting a sim
01:59 < syncan> samholmes: https://github.com/matthoffman/akka-task-manager/blob/master/src/test/scala/unit/org/mhoffman/TaskSpec.scala
01:59 < syncan> or anyone really
01:59 < syncan> https://github.com/matthoffman/akka-task-manager/blob/master/src/test/scala/unit/org/mhoffman/TaskSpec.scala
01:59 < samholmes> syncan: I don't know that language.
01:59 < syncan> check out that unit test, scala akka
01:59 < syncan> i don't either
02:00 < syncan> that's what the future looks like, IMO
02:00 < syncan> Â describe("A Task") {
02:00 < syncan> Â Â Â Â describe("when it is first started ") {
02:00 < syncan> Â Â Â Â Â Â it("should start successfully") {
02:00 < syncan> Â it("should be able to be checked back in again, going back to READY") {
02:00 < syncan> Â Â Â Â Â Â Â Â val actorRef = checkoutTask
02:00 < syncan> Â Â Â Â Â Â Â Â actorRef ! Checkin("myNode", ExecutionAborted())
02:00 < ljharb_work> syncan: please don't paste code
02:01 < syncan> sorry
02:01 < syncan> it looked smaller in my clipboard
02:02 < ChrisPartridge> thats what she said?
02:02 < ningu> syncan: that's scala? it looks rather familiar :)
02:02 < syncan> aye :)
02:02 < ningu> so why is scala better than... well, whatever?
02:03 < ljharb_work> it's better than java, cause it's not java
02:03 < syncan> i wouldn't say better
02:03 < syncan> it fits the concurrency requirements
02:04 < ljharb_work> it's not java. that makes it better.
02:04 < syncan> until someone invents something else
02:04 < ningu> syncan: ok, but what distinguishes scala from anything else? it looks very similar to js, ruby, etc.
02:05 < syncan> well
02:05 < syncan> it's very concentric to actors, units of work
02:06 < syncan> pulling off of Java locking / syncronize, etc
02:06 < syncan> instead of a method, you have a task, which is taken by an actor
02:07 < syncan> they have an initial state, and they can have a graph in themselves, with children 
02:08 < ningu> hmm
02:08 < syncan> the children have states and pass/fail cases, as well as either running in parallel, or in sequence
02:08 < syncan> and then there's business logic for each of those brady bunches "does one failing mean they all fail?"
02:08 < syncan> sometimes yes, sometimes no
02:09 < ningu> cool, well that sounds very useful especially if it's built in or if the language makes it easy
02:09 < syncan> yeah
02:09 < syncan> also, another spin on that
02:10 < syncan> quite in a literal sense. you aren't always conducting the actors, like a page of code or a script
02:11 < syncan> actors have roles they play, and based on their state, what they've finished - they come back and and make judgements on what to take 
02:11 < syncan> so it's like a bunch of intelligent instance objects working together in realtime deciding how to execute the overall user story / functionality / etc
02:13 < syncan> "intelligent" might be overly flattering a term, though
02:16 < trippeh> Heh. First attempt of binary parsing in node.js = 950MB/s per process, fed over TCP :)
02:16 < trippeh> Proabably "fast enough" :)
02:17 < ningu> hehe
02:18 < draginx> any of u guys know how to code for a non interactive shell?
02:18 < ningu> trippeh: where is the data coming from?
02:19 < ningu> draginx: do you need to run multiple commands or just one?
02:19 < draginx> just one
02:19 < draginx> but i need to enter in a field / "password"
02:19 < ningu> then just use child_process.spawn
02:19 < ningu> oh
02:19 < draginx> right
02:19 < draginx> ;)
02:19 < ningu> there might be some expect library
02:19 < deoxxa> trippeh: https://github.com/deoxxa/dissolve << i use this for binary stuff :>
02:19 < trippeh> ningu: A perl-script on the same puter
02:19 < ningu> I haven't looked
02:19 < ningu> trippeh: right but is it reading from disk or what?
02:20 < trippeh> ningu: Nah. Its a 64k buffer in memory the perl script sends over and over.
02:20 < ningu> I see
02:20 < draginx> ningu: there is
02:20 < draginx> but i think it still needs an interactive shell
02:20 < draginx> meaning running through node app.js
02:20 < chilts> deoxxa: I got burro working the other day ... so might try your pillion on top of that :D
02:21 < deoxxa> chilts: awesome!
02:21 < draginx> rather than mon app.js, or naught start app.js or forever app.js
02:21 < ningu> draginx: no, you're confused, you would just spawn it
02:21 < chilts> ... and I finally figured out how to make a stream2 Transform stream! :)
02:21 < chilts> it's quite easy
02:21 < draginx>     cryptmount = spawn('cryptmount', ['-w', 3, '-m', mountPoint], {stdio: ['pipe', 'pipe', 'pipe', 'pipe'] }); <-- I do ningu :)
02:22 < ningu> draginx: ok, so then you should be able to hook that up to expect
02:22 < draginx> expect expects something, the only thing returned is a newline :P but yeha well see
02:22 < draginx> i get this stderr: e2fsck: need terminal for interactive repairs
02:22 < draginx> which doesnt help
02:23 < draginx> now i get stderr: Bad file-descriptor (3) :D hoorah
02:41 < copongcopong> .join #manila.js
02:57 < shanebo> hey guys, what's the command to install all node_modules from package.json into a project folder?
02:59 < ChrisPartridge> shanebo: npm install
03:01 < shanebo> ChrisPartridge I tried that but it through an error that the "name" field wasn't valid.Problem is the project isn't a node_module itself, I'm just needing npm to install all dependencies. Does that make sense?
03:01 < shanebo> through = threw
03:04 < ningu> shanebo: well, package.json has to be valid, maybe you should edit it
03:05 < shanebo> ningu, my package.json resides in the root of a website project. It is structurally valid but npm is acting like this package.json needs to be a reference for a node_module itself.
03:06 < ningu> if it was structurally valid npm install would work
03:06 < faceleg|work> https://pbs.twimg.com/media/BG_d4pDCQAAc14m.png
03:06 < shanebo> ningu, the string under name doesn't exist in the registry, I don't want my app in the registry
03:07 < syncan> hah wow
03:07 < ningu> shanebo: that doesn't matter
03:07 < ningu> you still have to give it a name
03:07 < shanebo> ningu it has a name
03:08 < ningu> shanebo: and is there a space in it?
03:08 < shanebo> ningu yes
03:08 < ningu> then take it out
03:09 < shanebo> ningu all better now, thank you. Didn't know spaces were a no no in the name property
03:15 < perlitch> anyone using the timeline tab in devtools know what the outlined bars are in the frames view?
03:18 < garthk> Problem with LevelUP: TypeError: Cannot read property 'put' of null
03:19 < garthk> node_modules/levelup/lib/levelup.js:128  this._db[name].apply(this._db, args) (arrow pointing to [ after this._db)
03:19 < ningu> this._db is set to null
03:20 < garthk> ningu: Yep. Got that much. So, what about my very basic example results in this._db = deferred (a few lines down) being skipped? 
03:21 < ningu> err... if it isn't set for a few lines down then why would you expect it to be available earlier?
03:22 < garthk> ningu: LevelUp is a Node module. This isn't my code. I just expect to be able to follow the example code and get something working. It isn't.
03:22 < howdynihao> file an issue
03:23 < garthk> Roger that.
03:27 < [Fudge]> TypeError: Unknown encoding: my.test.server.net
03:27 < [Fudge]> this doesn't make any sense to me
03:27 < ningu> well that certainly isn't a valid encoding
03:27 < [Fudge]> oh, oops. tell you what I did, mindlessly changed the function that I'm using
03:28 < [Fudge]> I need sleep
03:28 < [Fudge]> The date & time is currently: Friday 5 April 2013 04:24:07
03:28 < [Fudge]> lol
03:36 < dazoe_> Anyone have any ideas on how to convert Date.now() to and from a Buffer?
03:37 < howdynihao> new Buffer(Date.now()) then buf.toString() ?
03:38 < howdynihao> oh you probably have to do new Buffer(Date.now().toString())
03:39 < dazoe_> howdynihao: i dont want the string of the int in the buffer
03:40 < dazoe_> ahh, new Buffer(Date.now().toString(16), 'hex');
03:40 < dazoe_> but how to convert it back
03:41 < dazoe_> UGH: Invalid hex string
03:41 < rvagg> dazoe_: does it need to be hex?
03:42 < rvagg> dazoe_: new Buffer(String(Date.now()) will be fine
03:42 < rvagg> then new Date(+buffer.toString())
03:42 < dazoe_> Basically i want to have the bytes to the interger
03:44 < rvagg> dazoe_: if you really want it to be hex then: var buf = new Buffer(Date.now().toString(16)); var date = new Date(parseInt(buf.toString(), 16))
03:44 < rvagg> i.e. toString(16) and parseInt(s, 16), same radix for both
03:44 < dazoe_> ah, but the Invalid hex string, toString(16) doesn't left pad 0
03:45 < rvagg> I guess you can do that manually if you really need it
03:46 < ryanaz> I'm trying to use node-mysql but I'm confused as to how to use the objects.  I'm trying to return() them and they keep saying 'undefined' 
03:47 < ryanaz> someone mentioned to me I shouldn't be "returning" objects and should be creating a DAO, but I'm lost....
03:51 < syncan> hey ryanaz, are you trying to get a result directly?
03:51 < syncan> var object = conn.query(...
03:51 < syncan> object == null ?
03:53 < syncan> if you can link me to a gist or something, i'll take a look
03:55 < ryanaz> syncan: using the node-mysql â€¦ let me show youâ€¦ 
03:56 < ryanaz> http://pastebin.com/djyEbpSC
03:57 < ryanaz> and I'm calling getUserIdByEmail in my script, but i keep getting undefined in (userid) â€¦ but console.log(rows) shows the object.
03:57 < syncan> aha
03:57 < ryanaz> I am told this is the wrong way to get data.. :) 
03:57 < ryanaz> I should be doing some sort of DAO ? 
03:57 < ryanaz> making an object that I query? 
03:58 < ryanaz> DAO/Repository 
03:58 < syncan> it looks like you're evaluating the wrong callback
03:58 < ryanaz> well, i'm actually trying to do it without the callback
03:58 < syncan> callback in your variable coming in
03:58 < ryanaz> var userid = getData doesn't use the callback
03:59 < syncan> you are passing rows
03:59 < ryanaz> line #20
03:59 < dazoe> getData({query...}, function(err, data) { ..do stuff.. });
03:59 <@mbalho> use the callbacks, luke
03:59 < ryanaz> but what if I want to pass data into lots of functions, can't live in callback -> callback -> callback â€¦ 
03:59 < ryanaz> that would be hell
04:00 < ryanaz> i need the data into an object that I can call 
04:00 < syncan> sec i'll modify
04:01 < syncan> well, you will be, sort of
04:01 < syncan> but hopefully not, if you do it right ;)
04:01 < syncan> you potentially could though, yes
04:03 < ryanaz> k
04:03 < syncan> just realized you had a pool
04:03 < ryanaz> ya
04:03 < syncan> that actually makes more sense now :)
04:03 < syncan> heh
04:07 < syncan> are you going createPool?
04:07 < ryanaz> syncan, it's actually all working except for the return() 
04:07 < ryanaz> that's when I get undef.
04:08 < ryanaz> if I console.log(rows) I see the data just fine
04:08 < ryanaz> but when I return(rows) to the variable, it's undefined
04:10 < mscdex> dazoe: you can use the writeUint32*() buffer methods
04:10 < syncan> yeah something definitely doesn't make sense there
04:10 < mscdex> dazoe: for writing a 32-bit timestamp
04:10 < ryanaz> http://pastebin.com/9E2VWSjW
04:11 < ryanaz> here's my whole thing
04:11 < ryanaz> lines #57 - #60 return the object just fine (because I'm using the call back) 
04:11 < dazoe> mscdex: Date.now() is 64-biot
04:11 < dazoe> bit*
04:11 < ryanaz> but why does line #35 return undefined ? 
04:11 < ryanaz> Does nobody know what it means to make a DAO/Repository ? 
04:12 < ryanaz> i'm told by a friend that I should be calling objects with a DAO/Repository instead of returning objects
04:12 < ryanaz> but I don't know what that means or where to look for an explanation 
04:12 < syncan> i know what a DAO is, but that sounds a bit out of the realm here
04:13 < ryanaz> syncan:   Well, this code I have pasted is just my early trial/error stuff to learn this.. but I need to have an object to query like :  userRepository.findByEmail(theEmail);
04:13 < ryanaz> but I don't know how to set that up
04:14 < syncan> however, i haven't seen  or used the setup and convention here
04:14 < syncan> it looks off to me; but that doesn't mean it is 
04:14 < ryanaz> hmm.
04:15 < bmanatwork> hey guys, how would i call a external node script with cli args from within another node script?
04:16 < mscdex> dazoe: can't be, there are no 64-bit integers in Javascript
04:16 < mscdex> dazoe: at least with full precision
04:16 < ryanaz> syncan: thanks for trying to help me.. i need to go for a bit.. i'll be back later.
04:16  * ryanaz is out
04:17 < syncan> sure, i'd suggest looking through the node-mysql tests
04:18 < dazoe> max int32 = 2,147,483,647 Date.now() = 1,365,135,219,166
04:20 < dazoe> mscdex: you are right, i read that javascript only has 32bit intergers. But Number.MAX_VALUE = 1.7976931348623157e+308 and that is a lot more than 32 bits
04:20 < deoxxa> javascript doesn't have integers
04:20 < deoxxa> at all
04:20 < bmanatwork> i am ttrying to call a script i would usually call like "node /bin/myscript arg1 arg2" and I want to call that from within my other node script
04:20 < deoxxa> it has double-precision floating point numbers
04:20 < bmanatwork> i thought require might be right
04:21 < bmanatwork> but i dont really see now to use arguments
04:21 < bmanatwork> how
04:21 < deoxxa> bmanatwork: have you looked at http://nodejs.org/docs/latest/api/all.html ?
04:22 < dazoe> deoxxa: so 64bit numbers then.
04:22 < bmanatwork> well yeah
04:22 < deoxxa> dazoe: 64-bit floating point numbers to be precise
04:22 < bmanatwork> but im not sure what would work or be the best way, exec or require or something else
04:22 < deoxxa> dazoe: which in practice means 53 bits of integer precision, for the most part
04:23 < deoxxa> bmanatwork: well require doesn't mention anything about spawning other processes, so that's probably out
04:23 < dazoe> that makes sense... so how to convert Numbers to bytes
04:23 < deoxxa> bmanatwork: what are the other options you've considered?
04:23 < bmanatwork> exec
04:24 < bmanatwork> child_process.exec to be exact
04:24 < deoxxa> bmanatwork: that sounds like more on the right track
04:24 < bmanatwork> sorry i wasnt verbose
04:24 < deoxxa> bmanatwork: just have to make sure we're on the same page :>
04:24 < bmanatwork> well when calling node from node is that the best way?
04:24 < deoxxa> bmanatwork: the child_process.fork function is kind of perfect for that
04:25 < bmanatwork> k thats what i was looking at
04:25 < bmanatwork> for some reason require seemed like it would work
04:25 < bmanatwork> brain fart
04:25 < deoxxa> whee
04:25 < bmanatwork> thx much
04:28 < inspiron> do you guys surround your app.js source in an anonymous function or anything else for namespacing?
04:29 < darjeeling> which is better way to make it sequence execution of query? Step or Conductor? or any recommend module?
04:33 < ChrisPartridge> darjeeling: async from caolan is my preferred module
04:33 < darjeeling> hmm ok I'll try :)
04:34 < darjeeling> thx
05:34 < howdynihao> why doesnt this work
05:34 < howdynihao> >> ['r', 'a', 'c', 'e', 'c', 'a', 'r'].reverse();
05:34 < purr> howdynihao: (object) ['r', 'a', 'c', 'e', 'c', 'a', 'r']
05:34 < howdynihao> it gives the same array back!
05:34 < ChrisPartridge> :|
05:34 < howdynihao> haha
05:34 < tjfontaine> you love your palindromes
05:35 < ChrisPartridge> i can't wait until you can slap people through the internet, it will be grand
05:35 < ChrisPartridge> for now, howdynihao, slap yourself!
05:35 < howdynihao> well i wanted to see if anyone would fall for it
05:35 < howdynihao> i shouldve picked a non obvious palindrome!!!
05:37 < ningu> A man, a plan, a cat, a canal -- Panama.
05:38 < ningu> was just reading meteor.com... it makes you think: gee, I must be missing out on something cool.
05:38 < ningu> but not: I understand what this will do for me. :P
05:39 < howdynihao> cool factor wins
05:39 < ningu> ok but all the people using it must be getting something out of it... what is it?
05:40 < ningu> it seems like they are basically doing what nodejitsu has been doing/trying to do with a lot more marketing
05:52 < chrisdickinson> as a heads up for anyone going to nodepdx, we're actually all in #nodepdx
05:53 < ningu> this is kind of amusing: http://thebigdb.com/
05:54 < ningu> they really mean it when they say "very loosely structured"
05:54 < Oddman> hehe
05:54 < Oddman> like mongo ;)
06:01 < ningu> the competitor to meteor should be named meatier
06:07 < jden> ningu: I would use that
06:09 < garthk> After its enthusiastic coverage on nodeup, I was expecting leveldb/levelup to be fast. 
06:10 < garthk> For ~500,000 items, though, it spends ages in db.close(), dropping effective throughput to ~1MB/s. I can pipe JSON through sort into a file at about 10X the rate. 
06:12 < garthk> Perhaps my workload/data is odd.
06:44 <@mbalho> garthk: you should open an issue on the repo, that is the sort of feedback that rvagg loves to hear
06:49 < ningu> leveldb looks interesting but I think I need some of redis's features for my use cases
07:01 < jhgaylor> I have an array of mongo queries I want to apply simultaneously in a single find.  is there a good way to do it?  all I can think of is the extend pattern, but that seems possibly bad.
07:02 < ningu> can you actually send multiple queries to mongo in one find?
07:02 < ningu> you can always do async.each() but it sounds like you have something else in mind.
07:05 < jhgaylor> ningu: i want to build a set of filters w/ my application.  the languages come from settings, the text search term comes from another place, limits and paging from other.   i have build each part to return a mongo query.  i just tried doing .find([q1, q2]) to no avail.  next is .find().find() :D
07:06 < ningu> oh... I see.
07:06 < ningu> I've used mongoose for that in the past.
07:06 < ningu> with the regular driver I'm not sure.
07:08 < jhgaylor> I think i read some code where someone did that, but no telling where. oh well
07:20 < AAA_awright> jhgaylor: like... $and ?
07:20 < jhgaylor> AAA_awright: like $and :D
07:20 < jhgaylor> thanks
07:21 < AAA_awright> It sounds like you want a standard query building function... one field comes from one argument, another field comes from another argument, and paging is something else entirely
07:21 < AAA_awright> You don't need anything special
07:26 < jden> jhgaylor: there's http://npm.im/minq
07:26 < jhgaylor> thanks, but that's overkill.  i just somehow missed the $AND docs
07:27 < jhgaylor> I'm trying to learn node, meteor, mongo, and javascript all at once.  it's getting wild
07:27 < jhgaylor> js is my first functional language.  my mind gets blown by cool tricks every 30 seconds
07:28 < Imre_> Hello guys, we are wondering at T-systems to use nodejs but of course it can be introduced only of some commercial support is awailable for it. Does anyone know about such thing? Not hosting but sopporting our servers and production environment ...
07:28 <@Nexxy> Imre_, you mean like an IT department?
07:29 < Imre_> yep
07:30 < Imre_> a company who provides supporting our efforts and operating services in production. If something goes wrong we can call them as contract partners ...
07:31 < yogurt_truck> jhgaylor: JS is very _very_ poor as a functional language
07:31 < jhgaylor> yogurt_truck: but i have closures !
07:31 < ljharb> what? it's not very very poor
07:31 < jhgaylor> Imre_: https://www.nodejitsu.com/enterprise/professional-services/
07:31 < ljharb> it's more functional than most nonfunctional languages.
07:32 < yogurt_truck> jhgaylor: that's good. and higher order functions. but it's missing so much functional goodies as a language is not even funny
07:32 < jhgaylor> id have gotten scolded harder if i called it an object oriented language :D
07:32 < yogurt_truck> ljharb: yeah no shit it's more functional than definitely-not-functional languages. obviously.
07:33 < ljharb> sure, it's not haskell or erlang or something, but it's pretty functional.
07:33 < ljharb> what's the top couple things it's missing?
07:33 < syncan> you forgot about procedural
07:34 < Imre_> jhgaylor_: thank you
07:35 < yogurt_truck> jhgaylor: if JS' functional stuff blew your mind, check out livescript for an example of a language than comes with plenty of goodies for functional coding (built in operators for composing functions, pattern matching, terse syntax for function literals, etc)
07:39 < [AD]Turbo> hi there
07:42 < gildean> wasn't livescript the original name of javascript
07:43 < yogurt_truck> gildean: yes
07:43 < yogurt_truck> or at least one of the first names
08:03 < aaaaaa_> hnthnt
08:03 < aaaaaa_> kfdhkh
08:05 < boof> Hey guys
08:06 < boof> anyone active?
08:06 < carlcalderon> yes
08:06 < zaleb> sort-of
08:06 < boof> nice
08:07 < boof> are you guys well-versed in node?
08:07 < ningu> sort-of ;)
08:07 < carlcalderon> we hang out here, soooooo
08:07 < ningu> boof: the channel is called #node.js
08:07 < zaleb> we're al lurkers here
08:07 < ningu> so it might help if you got to the point :)
08:08 < boof> lol
08:08 < boof> nah I'm just working on a project so, thought i'd use node.js
08:08 < boof> pretty nifty I must say
08:08 < Nodon> lurkers of life :)
08:09 < ningu> what node is good at, it's very good at
08:09 < ningu> the other stuff it can still usually do
08:09 < zaleb> node can do everything but it does nothing
08:09 < ningu> node the zen master?
08:09 < boof> huh?
08:10 < carlcalderon> boof: you have any concerns about node for your project?
08:10 < boof> I mean
08:10 < boof> I'm working on this really cool website
08:10 < boof> that I'm sure is going to take off
08:10 < boof> but idk if node is the right platform
08:11 < boof> I've tried rails and Google App engine before this
08:12 < carlcalderon> are you looking for some kind of framework or ss-tech?
08:12 < boof> I bought the book "Smashing Node" and I was able to build a basic chat server and irc bot using that
08:12 < boof> well let me first explain what I'm trying to do
08:12 < carlcalderon> please
08:13 < boof> so basically I am trying to create a product review website where
08:13 < boof> users can rate different aspects of a product (like battery life, longetivity, value for money etc)
08:13 < boof> and those can be aggregated
08:13 < boof> with a more effective review ranking system
08:14 < boof> than ie, amazon's
08:14 < carlcalderon> alright
08:14 < boof> and those things will also be 1-5 ranking, so it can be numerically manipulated
08:14 < ningu> I don't know if amazon's system is meant to be sophisticated, it seems basically dumb but adequate
08:14 < boof> exactly
08:15 < carlcalderon> it sounds to me that you want Laravel for php
08:15 < boof> why do you say that?
08:15 < boof> never heard of it honestly
08:18 < boof> could you explain more?
08:18 < boof> I'm looking at it right now....is it meant to be placed on top of node?
08:20 < ningu> boof: no, he's saying to use php instead of node. not sure if I agree. :) but from your description of the app it doesn't sound like node would be particularly better or worse than anything else. however, node is good at handling large numbers of requests concurrently so I guess that's useful for everyone
08:21 < carlcalderon> ningu: agree
08:23 < garthk> mbalho: OK.
08:25 < garthk> ningu: I'd use Redis, but I'm going to end up with ~50TB of data. :)
08:25 < ningu> hehe
08:30 < dim_> Hello. Does anyone have an idea why starting from version 1.* of node sudo apt-get update does not want to update it in Ubuntu 12.04?
08:31 < dim_> worked perfectly until v0.8.20
08:31 < boof> yea ningu that's exactly what
08:31 < boof> I was thinking
08:32 < garthk> dim_: which repo? Might be the refactoring that took the node-dev and npm packages out. Try apt-get remove node node-dev npm; apt-get install node
08:32 < ningu> dim_: I believe it holds back on major updates unless you explicitly say you want to update it
08:32 < dim_> It's Chris Lea's PPA
08:33 < dim_> and it says current version available is 1.0.3
08:33 <@Nexxy> 0.10.3*
08:33 < dim_> sorry 0.10.3
08:33 < ningu> dim_: apt-get install nodejs
08:33 < ningu> or apt-get update nodejs
08:34 < garthk> Try an explicit 'apt-get install', then. But, this barrier was exactly what I got across the 8-10 divide. Might be deliberate because of the new streams edge case.
08:34 < ningu> yes, it's very common for ubuntu to not automatically do a major upgrade and break everything in the process
08:34 < ningu> I appreciate it :)
08:36 < dim_> garthk thanks a lot
08:36 < dim_> it woked
08:36 < dim_> worked
08:36 < garthk> dim_: no worries. 
08:38 < jmartinez> hi there
08:38 < jmartinez> does anybody anything about hubot? i am always getting http://paste.laravel.com/mJE
08:38 < ningu> jmartinez: I think you accidentally a word
08:39 <@Nexxy> ningu, are you telling me you've never anythinged?
08:39 < jmartinez> know*
08:39 < jmartinez> hahha
08:39 < jmartinez> sorry :)
08:39 < ningu> Nexxy: I don't anything this late at night
08:39 < dim_> ningu: thank you too :)
08:40 <@Nexxy> ningu, you're missing out
08:40 <@Nexxy> the night time is the right time for anythinging
08:40 < ningu> jmartinez: strange, it looks like it wants async 0.1.22 but for some reason is loading 0.2.6
08:41 < ningu> I don't really know how to interpret that "unmet dependency" message, I haven't seen it
08:41 < jmartinez> yeah...
08:41 < jmartinez> i alread have "async":    "0.1.22" in packages.json
08:41 <@Nexxy> just ignore it and hope for the best :D
08:41 < ningu> jmartinez: well you know the modules are stored in each module's own directory, so it needs to be in the right place
08:44 < jmartinez> ningu ok, i get it :)
08:44 < jmartinez> it did the trick
08:44 < jmartinez> thanks you
08:44 < ningu> cool
08:54 < ningu> http://software-gunslinger.tumblr.com/post/47131406821/php-is-meant-to-die
08:56 < ningu> not as ranty as the title might suggest
08:58 < WorkingClassDev> actually a pretty good article
09:03 < ningu> php doesn't free unused memory? wtf? I mean I see the logic but...
09:08 < zaleb> the article is the reason why we use python/node next to our php app
09:10 < ningu> haha first comment at https://news.ycombinator.com/item?id=5495214 "Do you really want to spend time making a giant object oriented representation of your relational database, when you're just going to throw it away in 50 ms; wouldn't you rather spend more time with your kids?"
09:11 < WorkingClassDev> hah
09:19 < Vill> hello friends, does anyone of you have experience about setting NODE behid NAT, which he could share with me?
09:19 < gildean> Vill: how is that different than setting anything behind nat?
09:21 < Vill> Hello gildean, nice to meet you. 1. Node process.env.PORT set, 2. Port Forwarding enabled 3. Local firewall rule -  allow node.exe And while pinging from outside NAT the node process is stealth (no response), is it NAT's fault?
09:22 < ningu> Vill: you can't ping a port
09:22 < ningu> just try connecting on that port
09:22 < Vill> It was wrong expression from me, https://www.grc.com/x/ne.dll?bh0bkyd2 <-- they do this for me
09:23 < ningu> ok
09:23 < ningu> well, anyway, this isn't really a node question
09:24 < Vill> okay, ningu, where should I look for some answers?
09:24 < ningu> well, I'm sure there are plenty of guides for NAT and port forwarding online. other than that I don't know, sorry
09:24 < ningu> can you connect to your node app from the computer it's running on?
09:25 < Vill> yes, http://192.168.16.3:8081/ works perfect
09:25 < Vill> router is forwarded to this ^ address
09:25 < ningu> well, then it must be the nat/port forwarding
09:25 < ningu> but like I said that isn't anything to do with node, it depends on your setup
09:26 < Vill> is there a slight chance, that this connection could work only with https:// from "outside internet" ?
09:26 < ningu> well, I assume you are forwarding port 80 on your router to port 8081 on your LAN, right?
09:26 < ningu> http is port 80, https is 443
09:27 < ningu> and https won't work unless you have ssl setup
09:28 < Vill> i tried to forward muliiple ports, 80, while setting process.env.PORT to 80, I also tried 8000, 8080, 8081, 4321, but none of them was passing throu the NAT, that's why I was asking
09:28 < ningu> Vill: you need to forward the public port 80 to your local port 8081
09:29 < Vill> ningu, I've read about SSL setup in node, but does it increase chance to establish connection?
09:29 < ningu> it doesn't matter what local port you're running on
09:29 < ningu> no, it won't help
09:29 < Vill> thank you for your advice
09:29 <@Nexxy> Vill, https://pagekite.net/
09:29 < ningu> anyway, port forwarding settings have *two* ports, the public one and the local one :)
09:30 < Vill> why it would be only 80? by setting it to 8081, can't i visit my website like: "my.domain.com:8081" ?
09:30 < ningu> Vill: only if you set the port forwarding up that way.
09:30 < ningu> but yes, you can.
09:30 < Vill> yes, I was setting public port to the same as local, and then adjusting my local node port
09:30 < ningu> ok
09:30 < ningu> in general it's best to use port 80 because people connecting to your site may be behind firewalls
09:31 < Vill> woohoo, Nexxy, thank you for your help
09:31 < ningu> but, if we assume that isn't an issue, then you can do whatever you want
09:31 <@Nexxy> :)
09:31 < ningu> I just use a VPS for this sort of thing
09:32 <@Nexxy> aren't you fancy
09:32 < Vill> is pagekite a kind of proxy service?
09:32 <@Nexxy> yeah
09:32 <@Nexxy> localhost tunneling
09:32 <@Nexxy> so you can be like
09:32 < Vill> this might work, bare with me a second
09:32 < ningu> for really advanced tunneling you have to go to switzerland
09:32 <@Nexxy> vill.pagekite.me:3000
09:32 <@Nexxy> and it will go to your computer
09:32 <@Nexxy> just running a python script
09:33 < ningu> I tried to get a python to read from a script once
09:33 <@Nexxy> you have to charm it with a ruby first
09:35 < Vill> Nexxy, thanks for the link, I remember I was hesitating for installing Python, and now I'm kinda forced to do it =P
09:36 <@Nexxy> Vill, it's an easy fix :)
09:36 <@Nexxy> yw!
09:36 <@Nexxy> I learned of it from ninjablocks
09:37 <@Nexxy> we used it to get me ssh'd into a beagle bone on an office network in australia
09:37 < Vill> it reminds me of setting game servers with friends on hamachi xD, 
09:37 <@Nexxy> worked very well
09:37 < ningu> a beagle bone?
09:37 < Vill> in old times
09:37 < Vill> Nexxy, guys, you would be proud of me
09:38 <@Nexxy> ningu, tiny arm computer
09:39 < Vill> 2 months ago I just discovered Nodejs, it was to help me managing some database over the network (currently, there was nasty MS Access linked database, which was corrupting like, every week), and now, MongoDB with stable Node, and now the boss wants a preview demo page, to access it from outside... 
09:39 < ningu> well beagles do have tiny arms... so to speak
09:39 <@Nexxy> lol
09:39 <@Nexxy> http://ninjablocks.com/
09:39 < ningu> Vill: cool, well it sounds like nexxy's suggestion will help you
09:52 < Vill> Nexxy, this pagekite, basically, wherever I will run pagekite, and connect to my account I can have single DNS forwarding to http://vill.pagekite.me/ and It will be run from different servers, right?
09:53 <@Nexxy> Vill, if I understand you correctly; yes
09:53 <@Nexxy> anywhere you run the pagekite script will become vill.pagekite.me
09:53 < Vill> oh lord, serving Jquery from the node js was a terrible idea
09:53 < ningu> Vill: it's running really slowly so I don't now
09:54 < ningu> it does seem to be working
09:54 < ningu> in the sense that I can reach the site
09:54 < Vill> i shut it down, it's not really optimized, thank you for your test
09:54 < ningu> Vill: use grunt to concat/minify/etc.
09:54 < ningu> or a CDN
09:54 < Vill> I will use CDN, but I'm still in development stage
09:54 < Vill> thank you for your advice ningu and Nexxy
09:54 < ningu> you should still minify your js
09:55 < Vill> I will use minifier, no worries
09:56 < Vill> does anyone know where I can get TShirts with "Node <3"? xD
09:59 < Vill> ok, thank you again for your assistance, time to get back to work
11:06 < RLa> anyone tried Gandi's new nodejs hosting?
11:08 < RLa> http://wiki.gandi.net/en/simple/instance/nodejs
11:08 < RLa> no word about such hosting prices
11:08 < `3rdEden> We don't support websockets, Sime Hosting aimes to be a HTTP(S) service.
11:09 < `3rdEden> XD
11:09 < `3rdEden> How can you NOT support WebSockets as a hosting provider
11:09 < `3rdEden> this is not 1995 anymore
11:09 < syncan> Heroku is the same 
11:11 < RLa> Heroku has no websocket support?
11:11 < RLa> really?
11:11 < `3rdEden> Nope
11:11 < syncan> aye
11:11 < RLa> huh
11:11 < `3rdEden> most hosters don't
11:11 < `3rdEden> god knows why
11:12 < RLa> Heroku has its super complex routing system i guess that's why
11:12 < trodrigues> I wouldn't be so surprised at a service not supporting websockets a couple of years ago due to lack of support from stuff they use as proxy and caching servers and such
11:12 < `3rdEden> trodrigues: that just expresses their lazyness
11:12 < trodrigues> but things have evolved since then. a node.js hosting service launching today without websockets support is indeed a bit useless
11:13 < `3rdEden> you can just have websockets go around that
11:13 < trodrigues> `3rdEden: true
11:13 < `3rdEden> for example, only allow websocket connections on port whatever
11:13 < `3rdEden> or just a different subdomain or so
11:13 < `3rdEden> something like that*
11:13 < trodrigues> `3rdEden: I'd assume some of them just want to deploy some out of the box software and be done with it (yes, lazyness)
11:14 < trodrigues> I do use gandi for domains, they're pretty good for that, but their hosting services never looked so professional and appealing
11:14 < `3rdEden> I always stop trusting companies when they start to focus on to much side services
11:15 < faceleg> passcod: there?
11:15 < passcod> yes
11:15 < faceleg> pm?
11:15 < `3rdEden> you can only fully focus on one service, that's why nodejitsu is only doing nodejs hosting and not PHP, and Ruby, and erlang etc
11:16 < faceleg> did you get my pm?
11:16 < faceleg> also php sucks
11:16 < faceleg> @ `3rdEden 
11:16 < `3rdEden> XD
11:16 < trodrigues> `3rdEden: agreed. of course a lot of these companies will try to branch out and support as much as they can with minimal effort
11:16 < trodrigues> and end up providing a subpar service
11:20 < Jamy> Hey guys, I need to implement a cache for my mongoDB database, any ideas on how to handle it?
11:28 < unr3al011> syncan: hey
11:28 < unr3al011> i created 3 vm'n now and ran 3 node instances
11:28 < unr3al011> but i could not increase my performance
11:28 < unr3al011> -vm's
11:29 < anupam> does any one has used connection pooling with mysql and sequelize or can point me to the direction which can be useful?
11:33 < ryanaz> i can't find any examples on the web anywhere that show an end to end example of how to use mysql in a "real world" type scenario â€¦  they're all examples of how to pull data, but don't show how to do anything useful with it
11:34 < ryanaz> anupam: I 'm asking the same question I think .
11:34 < ryanaz> anupam:  Can't find anything useful that shows how to retrieve data and use it cohesively 
11:57 < roel_> I have a web socket connection to nodejs-socket.io and I'm using the authorisation to check if the connection is legit. After checking this I put in the handShakeData a userID
11:58 < roel_> now when I open a second tab in the browser, it creates a new socket-connection but doesn't go through the authorization. And doesn't have the userID on socket.handshake.userID
11:59 < roel_> anybody any idea about how this can be fixed?
12:08 < MiracleBlue> Ahoy :D
12:11 < anupam> ryanaz: Thats sad, i came across something which allows to do connection pooling on node-mysql
12:12 < anupam> but can't find anything for sequelize though
12:31 < tornad1> hi
12:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:41 < MiracleBlue> yo
12:52 < MiracleBlue> Sup guys?
12:53 < mscdex> node is up!
12:53 < MiracleBlue> :D
12:53 < MiracleBlue> Excellent
12:59 < roel_> I want to fill in my package.json. How do I find the version numbers of my dependency-modules like (socket.io, express and request)?
13:03 < ibash> roel_: http://stackoverflow.com/questions/11840341/npm-equivalent-of-pip-install-r-requirements-txt
13:03 < ibash> roel_: or this, but I haven't tried it: https://gist.github.com/ChimeraCoder/3152820
13:04 < roel_> k thnx!
13:04 < eljojo> hello, anyone here?
13:05 < zaleb> cant say that I see someone
13:05 < eljojo> ha, this is funny
13:06 < eljojo> do you happen to know a way to extract content of a web page without accessing the DOM?
13:06 < booyaa> roel npm ls should suffice
13:07 < booyaa> ah yes shrink wrap is nice thought would be for module creators only should give a go
13:12 < mickhansen> eljojo: DOM is your best bet, i suppose you could use regexp, but .. *shudder*
13:13 < eljojo> mickhansen: the thing is, I'm extracting content out of e-mails (sent from stores), and they basically do whatever they want (tables inside tables that make no sense), so DOM is not an alternative.
13:14 < mickhansen> DOM works even on crazy markup though :)
13:14 < mickhansen> but i see your point
13:14 < eljojo> yeah yeah, we're extracting the text and everything (I'm using nokogiri), but yeah, you get my point
13:15 < DaMorpheuS> I have a question can i declare a object that will act on changes (like a sort of observer)
13:16 < mickhansen> eljojo: well, i guess your only other option is regex. And i've done a lot of regex parsing on shitty html, i tell you, it's no fun - I prefer DOM any day. Maybe you could run the dom through a webkit environment (ala PhantomJS) and let that clean it up and then parse the dom after that?
13:17 < mickhansen> eljojo: nokogiri doesnt do the trick for you?
13:17 < eljojo> mickhansen: i'm also doing regex parsing, but on the text extracted. the problem here is that sometimes the html makes no sense, let me prepare an example
13:17 < mickhansen> eljojo: aite, do that, might give some more insight :)
13:18 < innociv_> How much memory does a string use?  4+length bytes or bits, or what?
13:19 < mickhansen> innociv_: this is just a guess, but considering multibyte character sets it might not be that simple
13:20 < mickhansen> but i really dont know a lot about that part :D
13:20 < innociv_> You think it reverses 4 bytes per character for such high byte characters even when they're all 1 or 2 byte ones?
13:22 < mickhansen> yea, now we're out of my comfort zone, i'll let someone more knowledgeable field that :)
13:23 < eljojo> mickhansen: here you go. what I want to do is map each line in the first td to each line in the second td: https://gist.github.com/eljojo/d58d5279d9a15d86021c
13:24 < mickhansen> eljojo: alright, well, for this specific problem, i'd get td's content, strip all html from that, and then split on linebreaks, and match indexes
13:24 < eljojo> true, that's no problem
13:24 < eljojo> the main problem I'm facing here is that I need to do this for possibly thousands of different e-mails (which I don't know the structure)
13:25 < mickhansen> eljojo: yea, i dont think there's going to be one magic way to do that :)
13:25 < eljojo> so I'm in the quest for an automated system that helps me to get content out of the "rendered" version of a webpage, not the dom
13:25 < mickhansen> eljojo: maybe machine learning
13:25 < eljojo> is really crazy, but I thought on rendering the page with phantomjs and then putting the png to an OCR
13:25 < mickhansen> eljojo: but honestly an automated system would be quite magic, and properly proprietary :D
13:26 < mickhansen> haha, that might be an idea :)
13:26 < eljojo> well, it works, but it's real hacky and not a true solution to this problem
13:27 < mickhansen> well let me know if you find that magic bullet, cause i know i could use that sort of thing in the future :D
13:27 < eljojo> i will, thanks for your help
13:32 < djcoin> Damn I'm hating a few node stuff here. It's all side effect or not properly commented T_T
13:41 < sfoster> is there some way to tell node or the path module to always use '/' for windows paths? 
13:42 < sfoster> or, does anyone know how of a fix for the connect/directory middleware on windows? It produces links like <a href="\subdirectory">
13:52 < jfroma> sfoster: you should not use path for urls.. If you are want to join urls parts you can use a module I created https://github.com/jfromaniello/url-join
13:53 < sfoster> jfroma, agreed, its not my code - this is connect's directory module. I can fork it though I spose. 
13:53 < jfroma> sfoster: never heard of connect-directory, link?
13:54 < jfroma> sfoster: is this one http://www.senchalabs.org/connect/directory.html >
13:54 < jfroma> ?
13:55 < sfoster> yes
13:55 < sfoster> the normalize( .. ) call there uses '\' on windows as the delimiter as I understand it. 
13:59 < jfroma> yes, I guess you will have to fork 
14:08 < leichtgewicht> Hey there, I am wondering if it would be cool to extend the require syntax with a "*" at the end, meaning: all files in that folder will be packed to one object. "a.js", "b.js" -> require(".*") {a:<content of a.js>, b:<content of b.js>}
14:09 < thomblake> leichtgewicht: The Node module system is frozen.
14:09 < leichtgewicht> thomblake: how sad ;) 
14:10 < leichtgewicht> no place for dreams and wonders.
14:11 < spencera> leichtgewicht:  Would be really easy to do with a module (and probably has been)
14:11 < JoshLeaves> leichtgewicht: You can write your own
14:11 < JoshLeaves> Make a binding to glob(2)
14:11 < JoshLeaves> (Or was it glob(7)?)
14:11 < JoshLeaves> (Been a long time since I last wrote a shell...)
14:12 < leichtgewicht> It might be easy to do but its a good piece of work to test it thoroughly
14:13 < leichtgewicht> Ah, I keep it in the backside of my head.
14:13 < leichtgewicht> thx guys
14:23 < torarne> Q: Why does the OSX installer say that "there was no software found to install"?
14:23 < rcombs> I'm having trouble installing node-serialport:
14:23 < rcombs> cc1plus: error: /mnt/user/user/root/.node-gyp/0.10.3/src: Value too large for defined data type
14:23 < rcombs> (and a couple similar errors)
14:34 < NoFaTe> Hey folks. Any idea on why doing 'return new Buffer(0);' could make my app hang and use 100% CPU (not always, only in some instances)
14:48 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:11 < qjcg> i want to store the output of "npm config get prefix" as a variable in a node script... can anyone suggest a simple way to do this?
15:29 < wesside> Can I get some support from the js community? https://news.ycombinator.com/item?id=5498900
15:31 < wesside> thanks guys
15:33 < booboo> hi guys
15:34 < medice> how finished is this webrtc draft thing
15:34 < booboo> I am looking for a good editor for node.js in windows 7
15:34 < nathan7> medice: it's working
15:34 < booboo> does anybidy has idea, any good editor
15:34 < arek_deepinit> booboo: there is actually one from ms
15:35 < booboo> Name?
15:35 < booboo> u mean microsoft?
15:35 < arek_deepinit> booboo: yeah
15:35 < arek_deepinit> http://www.microsoft.com/web/webmatrix/node.aspx
15:35 < DTrejo> any contributors to visionmedia/rework up in here?
15:35 < booboo> does it have intelligence and good debugging options
15:36 < booboo> I am looking into it now.
15:36 < arek_deepinit> booboo: intelligence? :D
15:36 < booboo> Thanks for sending.
15:36 < medice> i didn't know webmatrix was also an ide?
15:36 < arek_deepinit> medice: it is afaik
15:36 < booboo> i mean intellisense :-)
15:36 < medice> well, i have to test that out later
15:37 < arek_deepinit> booboo: it does, as u can see from pics
15:37 < arek_deepinit> never used it, dont use windows
15:37 < booboo> arek_deepinit, and good books for referencing node.js . I m starting to learn
15:38 < nathan7> wesside: are pages supposed to show up in the sidebar?
15:38 < medice> well, microsoft does do some good ide's so i'm looking forward to trying it out
15:38 < booboo> there is something call nide for mac users
15:38 < booboo> if anyone is interested to llok into
15:38 < thetristan> i find it hard to go back to IDEs after getting used to vim
15:39  * jocafa pets vim
15:39 < webdesserts> ^
15:39 < arek_deepinit> booboo: i'd say "Professional Node.js"
15:39 < booboo> arek_deepinit , alrighty 
15:40 < booboo> Thanks.deep
15:41 < arek_deepinit> booboo: np
15:41 < ArxPoetica> Anyone ever wrestled w/ 206 http partial responses on large files? (I'm running Express.js)
15:41 < webdesserts> although it's still very alpha http://brackets.io is looking like it will have some good node.js support once it's done
15:41 < ArxPoetica> Specifically of the .mp4 variety.
15:41 < arek_deepinit> ArxPoetica: streaming files?
15:41 < ArxPoetica> uh â€” I don't *think* they're streamingâ€¦ these files are just served up as is.
15:41 < ArxPoetica> Pre recorded.
15:42 < ArxPoetica> My first thought was, something's wrong w/ the file, since OTHER video files play fine.
15:42 < ArxPoetica> It's only a couple that are bad.
15:43 < ArxPoetica> Course, in the end, they'll all be served via AWS S3 â€” so it might be a moot point trying to chase down some Node.js thingâ€¦honestly, the more I think about it, it's probably just a bad file.
15:44 < wesside> nathan7, pardon?
15:45 < nathan7> wesside: click the local.js release notes in the sidebar
15:46 < wesside> ya, not working for you?
15:46 < nathan7> wesside: it loads in the sidebar.
15:46 < wesside> what browser are yo uin/
15:46 < wesside> you in*
15:47 < webdesserts> wesside: nathan7: It's working for me in the latest of chrome
15:47 < wesside> ya same
15:48 < nathan7> wesside: Chromium 26.0.1410.43
15:49 < webdesserts> nathan7: Linux?
15:49 < nathan7> webdesserts: Yes.
15:50 < wesside> hrm cool
15:50 < wesside> I put a bug in
15:50 < wesside> its my buddy's site
15:50 < wesside> that we are working on a project in
15:50 < wesside> backend is node.js
15:50 < wesside> node & redis
15:50 < nathan7> don't quite have time to write up an issue atm
15:51 < webdesserts> I don't think he wanted you to?
15:52 < wesside> nathan7, unsafe, its his site
15:52 < wesside> loading in the sidebar
15:52 < wesside> what v of linux?
15:52 < ed8_> hi, is there. I'm having errors when running:  npm -q search "yeoman"
15:52 < wesside> distro/ver
15:52 < ed8_> see: https://gist.github.com/edouard-lopez/4a047d5fd503e6b980ca#file-gistfile1-txt
15:55 < nathan7> wesside: Arch l. The chPreEverything in Arch is as vanillas ass it can be.
15:55 < nathan7> ..derp
15:55 < wesside> heh
15:55 < nathan7> wesside: I'm on Arch Linux, everything on Arch is as vanill as possible
15:55 < wesside> got it 
15:55 < nathan7> mobile connection was derping
15:55 < wesside> we'll get it fixed, thanks for the bug report
15:55 < nathan7> [=
15:56 < nathan7> ed8_: ..okay, that's crazy
15:57 < ed8_> nathan7: why that ?
15:58 < nathan7> ed8_: am investigating
16:00 < nathan7> hrm
16:00 < nathan7> ed8_: could you please file an npm issue about this?
16:02 < ed8_> nathan7: where is the bug tracker ?
16:02 < nathan7> ed8_: https://github.com/isaacs/npm/issues
16:05 < ed8_> https://github.com/isaacs/npm/issues/3318
16:08 < MI6> joyent/node: isaacs master * 2c9a38d : Merge remote-tracking branch 'ry/v0.10'  Conflicts: 	AUTHORS 	ChangeLog 	 (+27 more commits) - http://git.io/RXimCQ
16:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:30 < SNE> I'm building a browser extension and I face a problem of emitting requests to the server without sending the cookie along... I can get the cookie data and then send those as values but I dont know how to create a session from them at the server.... anyone got an idea how can I take the cookie id and find its session at the browser?
16:32 < SNE> oops, I wrote "find its session at the browser" when I meant "at the server"
16:35 < deoxxa> SNE: sessions aren't inseparably tied to cookies
16:35 < deoxxa> SNE: the cookie serves the purpose of identifying the session, so just change whatever logic looks up the session from reading a cookie to reading <something else>
16:37 < SNE> deoxxa: I already got the cookie data and I can send it to the server (just not in the porper way... currently send it as a value of socket.emit), can I use that data to get the session of the user?
16:38 < deoxxa> SNE: oh, in that case, no. it's impossible.
16:38 < deoxxa> (sarcasm, in case it's not obvious)
16:38 < SNE> deoxxa: like I tried session = req.sessions[cookie.value]
16:38 < SNE> deoxxa: ah damn...
16:39 < SNE> deoxxa: damn u I read only the first line :)
16:39 < yawnt> yo deoxxa D:
16:39 < SNE> deoxxa: so how can I do it? is there something like req.sessions? 
16:39 < deoxxa> SNE: i'm looking into my crystal ball right now and it tells me you're using express - is this the case?
16:40 < deoxxa> sup yawnt! how's school little budy?
16:40 < deoxxa> *buddy
16:40 < yawnt> deoxxa: I HAVE EXAMS
16:40 < yawnt> IN 4 DAYS
16:40 < yawnt> HALP
16:40 < SNE> deoxxa: express.io... ur crystal ball was quite correct but maybe need just a little more polish
16:41 < deoxxa> SNE: check out http://www.senchalabs.org/connect/session.html
16:41 < SNE> deoxxa: ok thx
16:41 < deoxxa> SNE: the short version is that you're going to want to have unadulterated access to the session store
16:42 < deoxxa> SNE: so you're probably going to need to construct it yourself
16:42 < SNE> deoxxa: oh the joy of first projects and a new env... yey 
16:42 < SNE> at a new
16:43 < deoxxa> whee
16:43 < deoxxa> yawnt: here's my advice: quit school and become a shoe shiner
16:44 < yawnt> i hate shoes
16:44 < yawnt> i love donuts
16:44 < deoxxa> ok, become a donut shiner
16:44 < deoxxa> your choice
16:44 < yawnt> sounds tasty :O
16:48 < lacrymology> sorry about the noob question, but what if I want to export just a function as the module? can I do exports = function(foo){}?
16:49 < inspiron> hello
16:49 < perlitch> lacrymology: yea, also there is reason to do exports = module.exports = function(){}â€¦ off the top of my head i dont know why but somebody else or google could answer that
16:50 < inspiron> I'm looking for good examples / docs on best practices for configurations and process.env loading in node.js
16:52 < inspiron_> I got disconnected.... I'm looking for good examples / docs on best practices for configurations and process.env loading in node.js
16:52 < yawnt> deoxxa: what you doing in these troubled times anyway?
16:53 < deoxxa> yawnt: well i have work today (a saturday, ugh), then i'm going interstate on tuesday, then i'm back to melbourne wednesday or thursday, then i'm packing all my things into boxes on friday, then i'm moving on saturday, so it's looking like a busy week for me
17:06 < StephenS> what does this guy says http://www.youtube.com/watch?v=1e1zzna-dNw ? and why
17:09  * rihnapstor nickserv idenitfy ortho!0276_doxs
17:09 < tjfontaine> rihnapstor: feel free to change your password sooner than later
17:09 < ThePrimeMedian> Topic: ExpressJS 3.0 Jade Templates: Can I set the layout file (extends....) from the route and not inside the jade template?
17:09 < rihnapstor> tjfontaine: :P
17:10 < ThePrimeMedian> i guess I would have to pre-compile the template first then.... nevermind.
17:13 < pachet> every time i see someone bleed their pw i die a little bit
17:13 < s5fs> speakign of templates, using express can I store a rendered template somehow? i'd like to do something like 'var blah = res.render('template', foo)' or something, then I can write blah to file
17:13 < pachet> rihnapstor: most clients allow you to autosend your reg msg :[
17:13 < s5fs> pachet: yeah but it's not the worst password in the world
17:14 < pachet> that depends on where else he's using it
17:14 < s5fs> one password to rule them all
17:14 < Pent> it looks like a password you'd use more than irc
17:14 < s5fs> all my passwords are one-time use
17:15 < s5fs> like this:  "one-time use"
17:15 < Pent> lo
17:15 < s5fs> oh man, just read the express api docs, i guess app.render is what i wanted.
17:17 < rihnapstor> pachet: i  use xchat ,you know to configure it for ausending ?
17:17 < rihnapstor> *autosending
17:21 < pachet> rihnapstor: http://forum.xchat.org/viewtopic.php?t=2660
17:21 < rihnapstor> pachet: thanks :)
17:27 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:28 < jaha> Im getting this error now: An error has occurred: {"bytesParsed":0,"code":"HPE_INVALID_CONSTANT"}
17:29 < jaha> nvm i think its a problem with socket.io flash fallback
17:50 < Honus_js> hi all. having an issue building from source:
17:50 < Honus_js> make-3.79.1-p7[1]: *** No rule to make target `|', needed by `/tmp/node-v0.10.3/out/Release/obj.target/deps/v8/tools/gyp/js2c.stamp'.  Stop.
17:50 < Honus_js> when I issue "make"
17:50 < Honus_js> after ./configure
17:51 < Honus_js> anyone out there?
18:29 < MI6> joyent/node: isaacs v0.10 * aeef951 : doc: Correct caveats for http Readables - http://git.io/FDmSlw
18:36 < MI6> joyent/node: isaacs master * 1fd95b5 : test: Fix message/error_exit - http://git.io/MV4TLQ
18:37 < jmstout_> Has anyone tried working with web sockets + node-http-proxy with some of the latest releases? .10.0+ ?
18:40 < lastk> hi guys, i have this piece of code here: http://pastie.org/7331143 just to call a api get and retrieve the response, I'll need this response to make a redirect, but the only way to get the response was doing a process.stdout.write on ondata event,there is other way i can do that?
18:56 <@mbalho> lastk: https://github.com/substack/stream-handbook
18:58 < lastk> mbalho, so I need read the response like a stream ?
18:59 < lastk> actually I'll read this response to make the redirect
19:10 < MI6> joyent/node: Rafael Garcia v0.10 * bd0d458 : stream: unused variable (+1 more commits) - http://git.io/kZQX6A
19:17 < lacrymology> what's the difference between bar and baz here? `function foo() { this.bar = "bar"; foo.prototype.baz = function() { return 'baz'};}`
19:19 < gluxon> lacrymology: I don't see how they could be similar.
19:19 < gluxon> And pastebin it next time.
19:19 < gluxon> It's hard to read that.
19:19 < lacrymology> gluxon: sorry, didn't pastebin because it was so short, but you're right
19:20 < superjoe> lacrymology, you could put the "foo.prototype.baz = ..." outside the foo function
19:20 < pachet> lacrymology: one's a string and one's a function; one's assigned to the object instance and one to the prototype; one's performant and one's not
19:20 < lacrymology> gluxon: I just don't understand *what*'s the difference, I can see that they must clearly be different. Besides the fact that one's a function and the other's a string
19:21 < lacrymology> pachet: I don't understand the implications of assigning it to the prototype as opposed to the instance
19:22 < pachet> if it's assigned to the prototype all objects created with that constructor will share it, barring they haven't been assigned their own property at that key
19:22 < gluxon> lacrymology: If you're from the Java world, one is a property and one is a method.
19:23 < lacrymology> I'm not, I'm.. widespread. But you could say I come from python, I guess. At least it's my favorite, and I think the only dynamic language I really handle
19:24 < pachet> >>function Foo(){Foo.prototype.i = ( Foo.prototype.i || 0 ) + 1;} var a = new Foo(), b = new Foo(); [a.i, b.i]
19:24 < purr> pachet: (object) [2, 2]
19:24 < lacrymology> gluxon: ok,but what if bar was a function too, the example was poorly designed. what's the difference between doing this.bar = function() { return 'bar'} and <constructor>.prototype.bar = function() { return 'bar'}
19:24 < gluxon> lacrymology: When you say instance, you meant assigning it to the "this" variable, right?
19:24 < gluxon> Ah.
19:24 < gluxon> lacrymology: Functionality, same.
19:24 < lacrymology> gluxon: I didn't say instance, pachet did
19:25 < gluxon> lacrymology: However, using prototypes saves memory.
19:25 < gluxon> lacrymology: When you create a new instance of that class, the function prototypes are already there and a new copy is not created.
19:25 < lacrymology> ah
19:25 < pachet> lacrymology: http://hughfdjackson.com/javascript/2012/01/05/prototypes:-the-short%28est-possible%29-story/
19:25 < pachet> that will help^
19:26 < gluxon> lacrymology: If you assign a function to "this", JavaScript will copy the function in memory each time you create a new instance of the class.
19:26 < gluxon> lacrymology: I had that same question when I started out. :)
19:26 < lacrymology> ok
19:26 < draginx> * http: Remove legacy ECONNRESET workaround code (isaacs) WHY
19:26 < lacrymology> that was perfectly clear
19:26 < draginx> WHY WHY WHYW HY was this removed? :(
19:26 < draginx> im getting this error again like crazy
19:32 < aslant> draginx: https://github.com/joyent/node/commit/88686aa4106499a603365b887e2381b55c61c027
19:33 < draginx> aslant: what does this mean to me though? Im listening to .on('close')
19:33 < draginx> on the socket, but its not going anywhere
19:34 < draginx> https://gist.github.com/durango/f030921afa8901a3e951 see?
19:34 < superjoe> this looks like a great commit
19:36 < aslant> draginx: the code was removed from http.js  -- are you using http?
19:37 < draginx> im using express
19:37 < aslant> draginx: or is it a separate issue?
19:37 < draginx> im assuming express uses http
19:37 < aslant> draginx: yep
19:37 < draginx> so express is the culprit?
19:38 < aslant> draginx: nope
19:38 < draginx> so what are u saying? xD
19:38 < aslant> draginx: that gist you posted a moment ago is unrelated?
19:38 < therealkoopa> Can anyone recommend  module for transforming JSON? For instance, if I'm fetching a JSON document, and want to transform it into some new JSON Structure?
19:38 < gluxon> draginx: What's up with line 38?
19:38 < therealkoopa> I'd prefer to use streams, since I'm using request to fetch the original JSON.
19:38 < draginx> aslant: its 110% related
19:39 < gluxon> if (!!msg) return res.json({error: msg});
19:39 < gluxon> ..
19:39 < aslant> draginx: 110%?
19:39 < gluxon> Why not "if (msg)" ...
19:39 < aslant> draginx: is that possible?
19:39 < draginx> aslant: ofc ;)
19:39 < draginx> u can gain more than 100% in profits cant u? when theres a comparison :P percentages dont have to stop at 100 ;)
19:39 < aslant> draginx: of course
19:40 < aslant> draginx: but 100% related is totally related
19:40 < draginx> gluxon: idk i kind of adapted the trusy !! from sequelizejs
19:40 < draginx> aslant: so this is even more related than related
19:40 < aslant> draginx: which makes no sense
19:40 < draginx> not sure if ur taking this to seriously or being freindly :P
19:40 < gluxon> draginx: I think I'll adopt !!!!!!
19:40 < aslant> draginx: it's just a bete noire of mine. 
19:41 < aslant> ;)
19:41 < aslant> draginx: anyways - this gist of yours...
19:41 < draginx> gluxon: haha i think if () and if (!!) mean different things but i could be wrong
19:41 < draginx> i was told that a long time ago but idk how correct the source is
19:42 < samholmes> Is this browserijade's fault or jade's fault? https://github.com/edmellum/browserijade/issues/12
19:42 < draginx> aslant: - mm?
19:42 < aslant> draginx: 1 sec
19:42 < aslant> therealkoopa: in answer to your question..
19:42 < jfroma> !! convert a falsy to falsE and anything else to true. booleans means, useful sometimes
19:42 < aslant> therealkoopa: you could use JSON.stringify? http://msdn.microsoft.com/en-us/library/ie/cc836459(v=vs.94).aspx
19:43 < aslant> therealkoopa: see the replacer parameter
19:43 < aslant> therealkoopa: here too: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify
19:43 < therealkoopa> aslant: I'll look into that. Going to try substack transfuse first
19:43 < aslant> draginx: cool
19:44 < aslant> draginx: what is cryptmount?
19:44 < draginx> aslant: dm-crypt
19:44 < draginx> it works in v0.8.18 btw
19:45 < draginx> the script is fine in that bu tit breaks in v0.10.3
19:45 < aslant> draginx: that doesn't look like http to me though?
19:45 < draginx> nope its not
19:46 < aslant> draginx: so the change by isaacs that you're referencing is not the culprit then
19:46 < aslant> draginx: although it may be a related issue with streams of course
19:46 < aslant> draginx: have you tried 0.10.2 ?
19:47 < draginx> i have not
19:47 < aslant> draginx: you could do this:
19:47 < draginx> do u guys recommend nave..?
19:47 < aslant> draginx: npm install -g n
19:47 < draginx> or nvm?
19:47 < draginx> ahh u use n
19:47 < draginx> ok
19:47 < drudge> mscdex: hey, does node-ftp work on 0.10.x?
19:47 < context> try it ?
19:47 < drudge> mscdex: i keep getting { [Error: connect ECONNREFUSED]
19:48 < context> conn is short for connection
19:48 < context> and refused is short for refused
19:48 < draginx> aslant:   Error: invalid version 0.10.2
19:48 < aslant> draginx: well that's not very helpful
19:48 < drudge> context: thanks super helpful
19:48 < context> drudge: this means the server is not listening. 
19:48 < draginx> lol it cant install 0.10.2 even though it lists it in n ls
19:48 < context> or refused your connection
19:48 < drudge> context: ftp works outside of node-ftp to those servers from that box
19:48 < context> drudge: are you sure you have the right hostname / port 
19:48 < drudge> positive
19:49 < aslant> draginx: I just tried n 0.10.2
19:49 < context> try editing the package to print out the hostname/port its attempting to connect to?
19:49 < nodenoob> hello, how bad is this design? http://hastebin.com/yimamagixo.scala
19:49 < aslant> draginx: and it worketh
19:49 < aslant> draginx: or at least it started downloading
19:49 < aslant> draginx: then I cancelled
19:49 < draginx> wtf
19:49 < draginx> o wait i dont have curl installed on this machine.. wow
19:50 < draginx> hate my co-worker --_
19:51 < context> draginx: we're looking at starting to use boxen at work so everyones machine is the same
19:51 < context> or very similar
19:51 < draginx> context: yeah I thought about that but right now our company only has like.. two machines to worry about
19:51 < draginx> stil a pita
19:51 < nodenoob> during app startup module A fetch some never changing data from db and put it in S
19:52 < draginx> aslant: still fails in v0.10.2
19:52 < nodenoob> then B fetch from S to bypass the db
19:53 < aslant> draginx: ok so it's not that change that was the issue. Forgive me, I haven't read your gist in full - going to look at it again now...
19:54 < nodenoob> no answers, i bet it's not clear or it sucks and i don't deserve an answer :)
19:55 < drudge> context: found the issue, looks like an update changed around passing params to the connect method rather than constructor
19:55 < context> cool
19:56 < aslant> draginx: is cryptmount using the old streams api and if so have you tried wrapping it and seeing if it makes a difference?
19:58 < draginx> aslant: still fails in v0.10.2 <-- not sure if u got this message
19:58 < aslant> draginx: is cryptmount using the old streams api and if so have you tried wrapping it and seeing if it makes a difference?
19:58 < draginx> aslant: im using spawn for it tbh
19:59 < draginx> its just a command line
20:00 < aslant> draginx: ahh, helps if I read your gist properly
20:00 < draginx> :)
20:00 < aslant> draginx: I tried to javascript style it to make it prettier but I don't think I can as it's not my gist ;)
20:01 < draginx> :P
20:01 < aslant> draginx: anyways - you're using the old streams api. In theory nothing wrong with that, but maybe try the new one?
20:02 < draginx> what is the new one?
20:02 < draginx> im pretty sure this is the new one O_o the old one was marked as deprecated in the docs
20:02 < aslant> draginx: oh wait, you attach a listener to 'data' events on cryptmount.stder
20:02 < aslant> draginx: which will transform cryptmount's stderr into old stream
20:03 < draginx> yeah
20:03 < draginx> oooo
20:03 < draginx> hmm
20:03 < aslant> draginx: but that's not the stream that's causing the issue is it?
20:04 < draginx> i mean that entire gist is the action that causes that problem
20:04 < draginx> so yeah
20:04 < draginx> its osmething in there
20:04 < draginx> so the weirder part is...
20:04 < draginx> it works perfectly fine on my dev box
20:05 < draginx> but not on the production box :/
20:06 < aslant> draginx: do you have cryptmount.on('data' anywhere? or cryptmount.pause() or cryptmount.resume() ?
20:07 < draginx> no sir
20:07 < draginx> but i may have fixed it
20:07 < aslant> draginx: if answer to any of those is yes then you've converted it into an old-style stram
20:07 < draginx> hold on
20:07 < draginx> need to confirm
20:07 < aslant> draginx: ok
20:08 < aslant> draginx: brb, nature calls
20:08 < draginx> that bi*@$ calls u too? :P
20:08 < draginx> nope not fixed, works fine on 0.8.18 though
20:08 < draginx> not in .10.x
20:10 < aslant> draginx: back
20:10 < draginx> ok :)
20:10 < aslant> draginx: so you could try converting the stream into an old-style stream and see if that makes a difference
20:11 < draginx> how would I do that?
20:11 < aslant> draginx: never tried it but from memory to do that insert cryptmount.resume()
20:11 < aslant> draginx: I'll check docs...
20:12 < aslant> draginx: http://nodejs.org/docs/latest/api/stream.html#stream_readable_resume
20:13 < NoFaTe> Guys, is Buffer stable?
20:14 < NoFaTe> Because it's causing my apps to freeze and go into 100% cpu usage after a couple of hours of usage
20:14 < draginx> aslant: so what would I .resume?
20:14 < draginx> all of the stdin's?
20:15 < deoxxa> NoFaTe: oh dear, yes, it is stable
20:15 < NoFaTe> weird
20:15 < NoFaTe> as after using it for several hours for socket ops
20:15 < deoxxa> NoFaTe: what makes you think Buffer is causing the freezes?
20:16 < NoFaTe> I have the debugger attached to it
20:16 < NoFaTe> and as soon as my app becomes unresponsive
20:16 < NoFaTe> I pause
20:16 < NoFaTe> and look at the stack
20:16 < NoFaTe> and the last call will always be in Buffers.js
20:16 < NoFaTe> And it's either going to be in the constructor
20:16 < NoFaTe> or in slice
20:16 < deoxxa> and the calls up from that?
20:17 < NoFaTe> nothing that would cause invalid arguments to be passed
20:17 < deoxxa> could be that something is stuck in a loop allocating buffers
20:17 < NoFaTe> there are no loops in my code
20:17 < deoxxa> well ok
20:17 < deoxxa> must be buffer then
20:17 < NoFaTe> :P
20:17 < deoxxa> since there are no loops in node core either...
20:17 < deoxxa> unless
20:18 < NoFaTe> unless?
20:20 < aslant> draginx: err...
20:21 < aslant> draginx: so cryptmount is a ChildProcess object which is an event emitter not a stream. Your problem is that your ChildProcess object is not emitting the close event?
20:22 < draginx> i think so
20:23 < aslant> draginx: you could try cryptmount.srdout.resume() ?
20:23 < aslant> draginx: s/srdout/stdout obv
20:24 < draginx> right
20:24 < aslant> draginx: is cryptmount.std piped to res ?
20:24 < draginx> no
20:24 < aslant> draginx: is it piped to anything?
20:24 < draginx> nope
20:24 < draginx> what u see is wha i have
20:26 <@isaacs> `3rdEden: lol "can't do process on numbers"
20:27 < rcombs> anyone up for helping me figure out a weird build issue with node-serialport?
20:27 < rcombs> I'm getting errors on npm install serialport: cc1plus: error: /mnt/user/user/root/.node-gyp/0.10.3/src: Value too large for defined data type
20:27 < aslant> draginx: there's someone so much better qualified than me to help you here ;)
20:28 < draginx> lol
20:28 < draginx> i think the problem is cryptmount is looking for an interactive shell
20:28 < draginx> even when im screen'ing
20:28 < draginx> fschk is at least when cryptmounting so im just goingt o disable that and we should be good
20:29 < gbit86> hello community! I have what I hope is a relatively simple question. My target server is Ubuntu 12.10. I've compiled and installed nodejs to location /usr/local/bin/node and ran a couple of hello world tests on my test website in apache & php, just a basic lamp install. So the question I have now is in regards to gevorg's "http-auth" project on github. I want to install it, but the instructions are not very clear on how to do this, or more specifically where 
20:29 < gbit86> these files belong? I guess the entire "http-auth" folder that is copied from github belongs inside my nodejs application folder as well and that require('http-auth') does not reference an actual binary installed, but a folder?
20:30 < rcombs> gbit86: just cd to your app's dir and run `npm install http-auth`
20:30 < rcombs> gbit86: npm will handle it for you
20:30 < aslant> gbit86: https://npmjs.org/package/http-auth
20:30 < gbit86> at the moment I prefer not to install the npm as I want to learn where everything is and how it is connected..
20:31 < aslant> gbit86: npm will put it in the node_modules directory of your app
20:31 < rcombs> gbit86: apppath/node_modules/http-auth/
20:32 < gbit86> ah, thanks
20:33 < draginx> aslant: thanks for ur patience and help dude, i disabled fschk on the 64mb folder :P so it shouldnt be a problem
20:33 < thomblake> I read in magazine that you cannot process numbers if you are a poop yes?
20:33 < aslant> draginx: but did it work?
20:33 < draginx> yup
20:33 < aslant> draginx: woohoo
20:33 < `3rdEden> isaacs: i'm sorry, I just had to post that ;)
20:33 < draginx> e2fsk looks for a non interactive shell
20:33 <@isaacs> `3rdEden: i was kind of thinking the same thing
20:33 < draginx> so it kept piping that message to me and my script wouldnt close it because.. well.. its not a close / return
20:33 <@isaacs> "Well, if you can't process the numbers... then... um...."
20:34 < draginx> so the event would hang
20:34 < webdesserts> thomblake: um... ?
20:34 <@isaacs> thomblake: !
20:34 <@isaacs> thomblake: sup, homes.
20:34 < thomblake> What's the metal gear solid alert for?
20:34 <@isaacs> thomblake: not used to seeing you in irc
20:34 < thomblake> isaacs: I'm actually almost always logged in.
20:35 <@isaacs> it's like worlds are colliding
20:35 < thomblake> isaacs: at work that is.
20:35 <@isaacs> i see
20:35 < rcombs> anyone up to help with that build issue?
20:35 <@isaacs> you should irssi and screen to be online all the time, even when you're not around
20:35 <@isaacs> it's great.
20:35 <@isaacs> like being a ghost.  no one knows when you're going to start talking, or if you're even really there, or just a camera trick.
20:36  * rcombs has znc
20:36 < StephenS> did I get it wrong, or facebook chat is based on node.js /socket.io module?
20:36 < rcombs> StephenS: if Facebook uses Node now, that's news to me
20:37 < StephenS> I can't recall, but I read it somewhere
20:37 < thomblake> isaacs: I'm missing something in that description.
20:37 < draginx> aslant: fuck i need to enable fschk otherwise shit could get corrupted
20:37 < draginx> any idea on how to fake a shell interactive process?
20:38 < joel_> hey guys i got a simple chat server i'm using with my coworkers, the history is just in variable in memory, 'var history = []', is there a way to get that data out so i can move to redis or something without losing current history?
20:39 < rcombs> draginx: `script -c "shell string" /dev/null`
20:39 < joel_> i understand it would be some unix voodoo and likely impossible
20:39 < rcombs> draginx: or you could use a PTY
20:39 < draginx> rcombs: I need to be able to read the return code as well input a password/string
20:39 < draginx> in a node script?
20:40 < rcombs> draginx: script is a unix until; I'm not sure. read the man page
20:40 < thomblake> isaacs: nevermind, I got it
20:40 <@isaacs> thomblake: spoooooky.
20:40 < rcombs> joel_: honestly, your best bet is probably to fetch the history from whatever API you've got setup
20:41 <@isaacs> it says i'm away, but i've only been idle for 4 seconds, and i've been online for AGES!
20:41 < rcombs> joel_: I'm assuming the history is sent to the browser on login?
20:41 < rcombs> joel_: just grab it from that?
20:41 < jaya> Matches the preceding element at least m and not more than n times. For example, a{3,5} matches only "aaa", "aaaa", and "aaaaa".  How to implement this in Regex anyone Help ?!
20:41 < jaya> {M,N}
20:41 < rcombs> jaya: you just told us how <_<
20:41 < draginx> is there a to just manually close an event?
20:42 < rcombs> regex: /a{3,5}/
20:42 < rcombs> draginx: what do you mean by "manually close an event"?
20:42 < jaya> but /a{3,5}/g doesn't work
20:42 < rcombs> draginx: AFAIK, events don't open or close, they fire
20:42 < draginx> o wait nvm
20:42 < AAA_awright> >> 'aa'.match(/a{3,5}/)
20:42 < purr> AAA_awright: (object) null
20:42 < AAA_awright> >> 'aaa'.match(/a{3,5}/)
20:42 < purr> AAA_awright: (object) ['aaa']
20:42 < jaya> rcombs: but /a{3,5}/g doesn't work
20:42 < AAA_awright> Yeah it does
20:42 < rcombs> jaya: yes, it does
20:42 < rcombs> jaya: as AAA and purr have demonstrated
20:43 <@isaacs> jaya: are you saying that /a{3,5}/g.test() is different from /a{3,5}/.test()?
20:43 < aslant> joel_: this any good for you? http://offthelip.org/?p=206
20:44 <@isaacs> >> var re = /a{3,5}/g; var s1 = 'aaa', s2 = 'aaaaa'; [ re.test(s1), re.test(s2) ]
20:44 < purr> isaacs: (object) [true, false]
20:44 <@isaacs> ^ SPOOKY!
20:44 <@isaacs> becuase .test() uses the offset each time
20:45 < draginx> rcombs: is there an alternative to screen and script to run an interactive terminal through node?
20:45 <@isaacs> >> var re = /a{3,5}/; var s1 = 'aaa', s2 = 'aaaaa'; [ re.test(s1), re.test(s2) ]
20:45 < purr> isaacs: (object) [true, true]
20:45 <@isaacs> without the /g, it's just like string.match(re)
20:45 < rcombs> draginx: make a pty
20:46 < draginx> rcombs: any recommendations besides https://github.com/chjj/pty.js/? :)
20:46 < rcombs> draginx: I've never had to do this, so no clue
20:46 < rcombs> draginx: but that looks workable
20:46 < jaya> thank you issacs
20:47 < rcombs> anyone up to help with my build issue?
20:47 < rcombs> I'm getting errors on npm install serialport: cc1plus: error: /mnt/user/user/root/.node-gyp/0.10.3/src: Value too large for defined data type
20:48 < rcombs> this is on unRAID (a modified Slackware 13.1) with gcc 4.4.4
20:48 <@isaacs> thomblake: i was sure i'd heard that "if you are a poop" line before.  eventually google found me http://blog.izs.me/post/190346445/run-if-you-are-a-poop
20:49 < thomblake> isaacs: Yeah, depend on what magazine say.
20:49 <@isaacs> i miss aardvark so much
20:49 < rcombs> isaacs: the name there is eerie
20:50 <@isaacs> rcombs: it was just some random question on aardvark
20:50 < rcombs> I see that
20:50 < rcombs> but still
20:50 < rcombs> oooOOOOooooOOOOooooOOOooooo
21:11 < howdynihao> how can i delete an npm account (no modules associated with it) ?
21:12 < slicky> is a writable fileStream from an http.get safe to call fileStream.end(); on the 'end' event of the response on the http request? Or is there a possibilty that calling fileStream.end() could abort the write before it drains?
21:12 < ljharb_> howdynihao: not sure you can. why would you need to?
21:13 < deoxxa> slicky: better option is to http_response.pipe(file_writable_stream)
21:13 < slicky> So for example, fileStream.write(data); in the 'data' event of the request, then fileStream.end() on the 'end' event of the request.
21:13 < slicky> deoxxa, Thanks! I keep forgetting that exists. :X
21:14 < deoxxa> .pipe is <3
21:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:14 < slicky> Do I need to still write fileStream.end() on the 'end' event on the request?
21:15 < slicky> if I'm res.pipe(fileStream);'ing it
21:15 < slicky> https://github.com/substack/stream-handbook
21:15 < slicky> Here .pipe() takes care of listening for 'data' and 'end' events from the fs.createReadStream()
21:15 < slicky> :D
21:15 < slicky> <4 substack sometimes
21:18 < tracker1> I'm embarking on a larger projects... I'm wanting to use requirejs, coffeescript, and grunt as a build tool... does anyone have any links to prujects using these tools for client & server code?  just wanting something I can look at using them together...
21:18 < tracker1> projects.. github would be fine...
21:19 < ed8> hi, is there a place on my system where npm cache the list of available package ?
21:20 < ed8> Previously I add some directories in ~/.npm/: npm config get cache
21:20 < ed8> but now I only have: ~/.npm/-/all/ which is empty
22:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:01 < asadpakistani2> i have a feature request
22:01 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:01 < asadpakistani2> can you guys show the v8 version when doing "node --version"
22:02 < asadpakistani2> Also does "npm -g update" update all global modules?
22:02 < tjfontaine> node -pe process.versions.v8
22:02 < tjfontaine> 3.14.5.8
22:02 < asadpakistani2> thankss tjfontaine, coundnt find tht on google
22:03 < asadpakistani2> tijofontaine: -pe executes javascript inline?
22:03 <@mbalho> 'print' 'execute'
22:03 < tjfontaine> -e evalutes, -p prints the results
22:03 < asadpakistani2> tjfontaine: so just shows the outut of a global object
22:03 <@mbalho> oh i guess its eval not execute, i just like words that sound like death
22:04 < asadpakistani2> mbalho: u cant give it statemnets...jsut expressions i guess...right
22:04 <@mbalho> any js code you can fit in one line
22:04 < asadpakistani2> node -pe 2+2 shows 4...
22:04 < asadpakistani2> mbalho: but console.log doesnt work
22:04 < tjfontaine> doesn't need to be one line, <<EOF
22:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:05 < tjfontaine> node -pe 'console.log(1234)'
22:05 < tjfontaine> 1234
22:05 < tjfontaine> undefined
22:05 < asadpakistani2> tjfontaine, mbalho: node -pe console.log("asad") ... this doesnt work why
22:05 < s5fs> using Express, is it possible to create a "master page" or similar template so I don't have to add common elements repeatedly (like headers/footers/etc)? or is this what view helpers are for?
22:05 <@mbalho> asadpakistani2: console.log returns 'undefined'
22:05 < tjfontaine> asadpakistani2: your shell is getting in the way
22:05 <@mbalho> asadpakistani2: so just return what you want p to print
22:05 < s5fs> sorry, express with ejs templates, not jade
22:06 < tjfontaine> mbalho: on the contrary, p isn't necessary with console.log
22:06 < asadpakistani2> mbalho:Ltjfontaine: i have to put it in quotes...its like the google chrome console...i get tht
22:06 < asadpakistani2> tjfontaine, mbalho: u guys were really helpfull...thank you
22:06 < drudge> s5fs: ejs-locals pacakge has layout and block support
22:06 <@mbalho> tjfontaine: oh nice
22:06 < s5fs> drudge: many thanks!
22:07 < asadpakistani2> tjfontaine: yeah shell was messing witht eh brackets...super cool feature i learned today :D
22:16 < bmanatwork> hey guys, the docs say child_process.spawn should wait until exiting before continuing, but if I have 2 child_process.spawn in the same function they are running at the same time instead of one after another
22:16 < bmanatwork> i noticed the same behavior with child_process.execFile
22:17 < igl> it parent wont exit, before the child exits
22:17 < igl> does not mean that 2 child procs will wait for each other
22:17 < bmanatwork> wwhats the best way to make one wait on the next one?
22:18 < bmanatwork> i have 2 scripts i need to call, and the second depends on the output from the first
22:18 < tjfontaine> start B from A's exit event
22:18 < bmanatwork> oh shit
22:18 < igl> your prob is fixed with: control flow -> npm install async
22:18 < bmanatwork> thats a good ideal tjfontaine 
22:18 < bmanatwork> really igl 
22:18 < bmanatwork> hrmm
22:18 < tjfontaine> when you say it depends on the output, do you mean like `cat foo | somecmd`
22:20 < bmanatwork> tjfontaine: 
22:21 < bmanatwork> like the first script writes files out to the fs
22:21 < tjfontaine> ok
22:21 < bmanatwork> the second one uploads those files 
22:21 <@mbalho> bmanatwork: do you know about callbacks
22:21 < bmanatwork> i am very new to node, wrote a api in it and thats been my first thing
22:22 <@mbalho> bmanatwork: this might help explain it https://github.com/maxogden/art-of-node#callbacks
22:22 < bmanatwork> reading something similar
22:22 < bmanatwork> i think this would help for sure
22:29 < howdynihao> so node.js style require for the browser (without bundling)
22:29 < howdynihao> would anyone find that cool?
22:30 <@mbalho> what problem does that solve?
22:32 < CoverSlide> it doesn't solve any problems, only create new ones
22:32 < howdynihao> how so
22:32 < CoverSlide> fact: require is blocking synchronous call
22:33 < CoverSlide> this is fine when you're reading from disk
22:33 < CoverSlide> not so much when you're reading from a remote web server
22:33 < howdynihao> seems fine to me
22:34 < CoverSlide> the solution would be to have an asynchronous module loading mechanism, which people already have, unfortunately that still sucks
22:34 < howdynihao> well, i can make it async without the ugly of amd
22:34 < CoverSlide> howdynihao: right, you want your users to have a frozen browser for 10 seconds while you're loading all the modules as a separate call
22:34 < howdynihao> oh first load without caching, that seems ok
22:35 < CoverSlide> howdynihao: and how do you propose you do that? you need to block the return value of require
22:35 < howdynihao> however it does require.cache like nodejs
22:35 < howdynihao> i have a working implementation
22:35 < howdynihao> its like 50 LOC w/o requiring you to run everything through a bundler like browserify
22:35 < howdynihao> you just include my script, and start coding!
22:35 < CoverSlide> and how well does it perform ?
22:35 < CoverSlide> after 40 modules
22:36 < howdynihao> right now its more proof of concept
22:36 < CoverSlide> right
22:36 < howdynihao> this is more to stop using amd stuff like require.js
22:37 < howdynihao> i was just wondering if anyone thought that was cool, not so much if theyll use it in production
22:37 < CoverSlide> yeah i can figure out how to write something like that easy enough, problem is when you put it on a server, it's worthless
22:37 < ningu> how much adoption does amd actually have?
22:37 < paulkon> https://github.com/component/component
22:37 < CoverSlide> more than it deserves, actually
22:37 < paulkon> the solution is already available
22:38 < howdynihao> CoverSlide: so when you put it into production, you will have to bundle, thats just the way it is 
22:38 < howdynihao> amd requires it too, well recommends
22:38 < howdynihao> or well you should
22:38 < howdynihao> paulkon: thats a package manager
22:39 < howdynihao>  / bundler
22:39 < CoverSlide> ok, so your idea is just so you can skip the bundle step in development
22:40 < CoverSlide> when you can have a watch script call browserify take care of that for you
22:40 < howdynihao> well.
22:41 < howdynihao> if thats all there is i guess problem solved yea?
22:41 < CoverSlide> exactly
22:41 < howdynihao> all the work thats gone into commonjs and amd was useless
22:41 < howdynihao> just have a automated bundler!
22:42 < CoverSlide> < howdynihao> all the work thats gone into commonjs and amd was useless << truth
22:43 < howdynihao> i dont agree, i mean, just because theres no real solution that comes from it doesnt mean there isnt a problem
22:43 < Domeni___> this is the usual XHR + eval solution?
22:43 < W4RH4WK> hello, i have been wondering: if i execute another program using child_process.exec is their a way to retrieve the return value of the program?
22:44 < howdynihao> domeni: that would not do very well performance wise
22:44 < CoverSlide> howdynihao: how are you doing it then?
22:45 < Domeni___> howdynihao: it actually does just fine, it's the same as what the browser does: network request + parse and evaluate scripts
22:45 < howdynihao> domeni, the browser has the ability to cache scripts
22:46 < CoverSlide> howdynihao: also, how do you plan on making your client script aware of modules in the node_modules tree?
22:46 < Domeni___> howdynihao: yes, and xhr's are cached too
22:46 < howdynihao> oh really? did not know that
22:46 < Domeni___> it's just HTTP
22:46 < CoverSlide> they are
22:46 < howdynihao> i would think they'd still do the request
22:46 < howdynihao> to make sure their copy is up to date
22:47 < howdynihao> thats still a round trip
22:47 < Domeni___> that's not how HTTP works
22:47 < Domeni___> if there's caching headers set on the .js file, it doesn't matter if it's <script src> or XHR
22:47 < Domeni___> if there are *no* caching headers, then it'll re-download for <script src> too.
22:47 < howdynihao> oh right
22:49 < yogurt_truck> how is "ll the work thats gone into commonjs" useless?
22:49 < yogurt_truck> all*
22:50 < yogurt_truck> silliness
22:52 < mscdex> node.js rules!
22:52 < acidjazz> mscdex: at first..
22:52 < mscdex> all the time!
22:53 < asterick> Goddamn I hate how hard it is to read web standard documents. :/
22:53 < mscdex> what standard?
22:53 < asterick> WebRTC protocol
22:54 < asterick> trying to establish how hard it would be to implement a peer connection handler in node
22:54 < asterick> (not the broker, but be able to send / receive peer data in node through webRTC)
22:59 < Dennis> anyone available to help a newb with some installation help/advice?
22:59 < asterick> Dennis: what do you need?
22:59 < tjfontaine> Dennis: it's easier to ask than it is to ask to ask
23:00 < asterick> tjfontaine: he's xhibit in disguise.  He knows we like questions so he put a question in his question.
23:00 < tjfontaine> clearly
23:00 < Dennis> so is that saracsm?
23:01 < asterick> Dennis: yea, I'm just joking with you.  Seriously though, what do you need?
23:02 < Dennis> I'm running brew link --overwrite formula_name
23:03 < Dennis> to link my installation of node but I get No such keg: /usr/local/Cellar/formula_name
23:03 < ningu> Dennis: brew install node
23:03 < ningu> that should be all you need
23:03 < ningu> you have to replace formula_name with the name of the formula :P
23:03 < Dennis> Warning: node-0.10.3 already installed, it's just not linked
23:03 < ningu> then do, brew link node
23:04 < Dennis> Could not symlink file: /usr/local/Cellar/node/0.10.3/lib/dtrace/node.d Target /usr/local/lib/dtrace/node.d already exists. You may need to delete it.
23:04 < asterick> Dennis: you should also periodically "brew doctor"
23:04 < Dennis> it says raring to brew
23:04 < ningu> brew link --overwrite node
23:04 < ningu> :)
23:04 < Dennis> Linking /usr/local/Cellar/node/0.10.3... Warning: Could not link node. Unlinking...  Error: Permission denied - /usr/local/lib/dtrace/node.d
23:05 < ningu> sudo brew link --overwrite node
23:05 < passcod> sudo?!
23:05 < passcod> with brew?
23:05 < ningu> I dunno what he did to his /usr/local permissions
23:06 < Dennis> Error: Cowardly refusing to `sudo brew link'
23:06 < ningu> anyway I gotta go
23:06 < ningu> good luck
23:19 < jesusabdullah> does teej ever come here anymore?
23:26  * abcd http://goo.bot.nu/ -==Goo Bot == IRC bot==--Give a try-
23:29 < zivester> whats the preferred way of dealing with production vs development configs?  if it matters, using express 3.0
23:31 < ccowan> I'm not sure what the preferred way is but what I do is I have a config file that has module.exports = { â€¦ }
23:31 < ccowan> which as all my configs
23:32 < Bob_> Hello?
23:32 < passcod> yeah, thought so. Dennis: you might need to change the permissions on /usr/local and subdirs so you can write to there, like Homebrew recommends
23:39 < deoxxa> zivester: i make sure the environment looks the same for both
23:40 < deoxxa> zivester: in production, i have /etc/resolv.conf set up with a search domain so i can use "mongo" and have it resolve to "mongo.internal.env.example.com" for example
23:40 < deoxxa> zivester: and on my laptop i have a "mongo" entry in /etc/hosts which points to 127.0.0.1
23:40 < asadpakistani2> will webrtc work on most NATs?
23:42 < zivester> deoxxa, so always assume production... i think thats the way im going to go... and if i want to do something specific in dev, set NODE_ENV or something
23:42 < deoxxa> zivester: yeah, pretty much
23:43 < Dennis> brand new machine
23:43 < Bob_> I'm trying to get into node.js and I'm still a noob. Is this some sort of technology that allows you to write JavaScript for server side?
23:44 < Zolmeister> Bob_: yes
23:49 < Bob_> Oh that's great! Thanks @Zolmeister. Does that mean I can ditch PHP totally or should I incorporate both?
23:51 < Dennis> @passcod so do you suggest I adjust the permission of the local dir?
23:53 < Zolmeister> Bob_: ditch PHP
23:53 < deoxxa> Bob_: node is a very different platform than php
23:53 < Havvy> Bob_: Keep what is in PHP in PHP, but write new projects using Node.js
23:54 < deoxxa> ^^ this
23:58 < passcod> Dennis: the /usr/local dir, yeah. And you probably should adjust the ownership instead. Given you can run sudo, try changing the group to wheel (recursively, ofc)
--- Log closed Sat Apr 06 00:00:28 2013
