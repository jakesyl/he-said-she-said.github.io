--- Log opened Sun Jul 08 00:00:04 2012
--- Day changed Sun Jul 08 2012
00:00 < Hotroot> I'm using ascii, so again much easier
00:00 < jesusabdullah> Hotroot: http://docs.jit.su/articles/advanced/buffers/how-to-use-buffers
00:00 < Hotroot> So in my case, buffer.fill(0) is basically pointless, right?
00:00 < jesusabdullah> Not sure, depends on what you're trying to do
00:00 < jesusabdullah> like, if you don't care about the last l-n-1 characters, why bother zeroing them out?
00:01 < Hotroot> Well, I assume the basic way to do this is to manage the buffer like the stack in assembly
00:01 < jesusabdullah> otoh, if you do screw up null bytes are mostly harmless
00:01 < Hotroot> It doesn't really matter what's there, because you're always managing it
00:01 < jesusabdullah> Hotroot: Yeah, that's probably a good attitude to have
00:01 < DTrejo> Nexxy: I wrote the author listing module: cd node_redis; npm -g install authors; authors
00:01 < Hotroot> Unless I wanted to do something more advanced with 0's, like stripping them lazily
00:01 < jesusabdullah> Hotroot: Do you also, like, shuffle things around so that you leave the stack more or less the same way you found it?
00:01 < DTrejo> in markdown
00:02 < jesusabdullah> Hotroot: I had to do that with, umm, nsis
00:02 < jesusabdullah> the nullsoft installation system
00:02 < Hotroot> Yeah, I like stack perfection
00:02 < jesusabdullah> you ever look at factor?
00:02 < Hotroot> I prefer to allow only the registers to change
00:02 < jesusabdullah> It's a stack-based thinger
00:02 < jesusabdullah> but it's like really poorly documented
00:02 < jesusabdullah> interesting stuff but not really worth a new language imo
00:02 < Hotroot> I've only really done stack stuff in DCPU16 for Notch's new game
00:03 < Hotroot> It's a "dumbed down" assembly language
00:03 < jesusabdullah> I didn't know he had a new game
00:03 < Hotroot> Pre-alpha
00:03 < jesusabdullah> word
00:03 < jesusabdullah> where's minecraft at these days?
00:03 < Hotroot> But we have specs on the CPU ingame
00:03 < jesusabdullah> I play it casually but don't really follow the dev blog or anything
00:03 < Hotroot> He handed MC dev over to Jeb
00:03 < Hotroot> Jeb is a better coder AFAIK
00:03 < jesusabdullah> I see
00:04 < jesusabdullah> It could be nice to see minecraft get some cleanup
00:04 < jesusabdullah> it sounded like notch was a visionary but one of those guys that made up for lack of natural talent by sheer will, y'know what I mean?
00:04 < jesusabdullah> I actually really admire that
00:05 < Hotroot> Yeah, really shows that love of game dev matters more than anything
00:05 < Hotroot> Java isn't too common for PC games either, it's just what he knew
00:05 < Hotroot> Well, as far as I know, never seen another "real" PC game in Java
00:06 < jesusabdullah> Yeah, now that I think about it
00:06 < Hotroot> So if I buffer.write("string", "ascii"); do I still have to buffer.toString, or can I just do mystring = buffer or something like that?
00:06 < jesusabdullah> Hotroot: You shouldn't have to .toString your buffer unless you wish you had a string
00:07 < Hotroot> I want a string out of it
00:07 < Hotroot> But I'm already writing it in as ascii
00:07 < jesusabdullah> cause you can do var str = buffer.toString('utf-8') or whatever and then just work with a string
00:07 < Hotroot> I assumed that was slower though, than if I could just grab it directly
00:07 < jesusabdullah> yeah, probably
00:07 < jesusabdullah> depends on what you want to do with it later
00:07 < Hotroot> So is there a more direct way?
00:08 < jesusabdullah> you can also new Buffer(myString) I believe
00:08 < Hotroot> Also, can JS handle ascii, or do I have to convert to unicode? I know uni should be compatable with ascii
00:08 < jesusabdullah> ie, get your full string and then just convert to a Buffer
00:08 < jesusabdullah> utf-8 is backwards compatible, but not vice versa
00:08 < Hotroot> I only need the buffer for reading in a stream
00:08 < jesusabdullah> In that case you should probably just toString it and move on
00:09 < Hotroot> Well, I need to write in as ascii so it strips null, I guess I can just toString(unicode) when I need it back
00:09 < Hotroot> I'll optimize if it's ever a real slowdown
00:12 < Hotroot> Oh garbage collection, you sexy bastard
00:19 < Hotroot> Blarghhg
00:19 < Hotroot> I think I got a very wrong impression of what end is 
00:19 < Hotroot> In a telnet or SSH stream, would end go off after each line sent, or only when the connection ends?
00:20 < Hotroot> I thought it meant the EOF of the group of chunks being sent, not the end of the connection
00:24 <@Nexxy> DTrejo, woah! are you under time?
00:24 <@Nexxy> if so that's a gold star for sure
00:26 < DTrejo> Nexxy: probably not, i didn't try to rush at all
00:26 <@Nexxy> oh well, gold star
00:26 <@Nexxy> DTrejo, link?
00:26 < DTrejo> https://github.com/DTrejo/node-authors
00:27 < DTrejo> and npm -g install authors
00:27 < DTrejo> then run `authors` in your git repo
00:27 <@Nexxy> can you like
00:27 <@Nexxy> authors >> readme.md?
00:27 <@Nexxy> that'd be neat
00:28 <@Nexxy> DTrejo, https://github.com/DTrejo/node-authors/blob/master/authors.js#L75 does that work w/ the .map on another line? I thought ASI screwed with stuff like that
00:28 < DTrejo> Nexxy: I leave that to the person, it prints to stdout so you can just copy paste it yourself
00:29 <@Nexxy> DTrejo, oh, yeah... perfect!
00:29 < DTrejo> Nexxy: it would screw up if i did this
00:29 < DTrejo> return
00:29 < DTrejo> thing.map...
00:29 < DTrejo> maxogden: next up is npmbro
00:29 < chrisdickinson> i think ASI only messes with return if it doesn't encounter an expression immediately following `return`.
00:29 <@Nexxy> oh oki, just curious
00:29 <@Nexxy> chrisdickinson, that makes sense
00:29 < DTrejo> ^ right
00:31 < chrisdickinson> (shameless plug #2 for the day: http://github.com/chrisdickinson/redispump)
00:31 < chrisdickinson> (mostly because dominictarr's JSONStream module is too cool not to find every excuse to use it.)
00:32 < DTrejo> Nexxy: you are free to retweet me ;) https://twitter.com/ddtrejo/status/221760167732191232
00:32 <@Nexxy> oh man my resolution is way too large for your twitter background
00:32 <@Nexxy> lol
00:33 < DTrejo> yesss
00:33 <@Nexxy> I talked to you @ holocene didn't I?
00:33 <@Nexxy> or teh tent
00:33 < DTrejo> at nodeconf, dunno where we talked
00:33 <@Nexxy> one of the two
00:33 <@Nexxy> yeah lol
00:33 < DTrejo> probably the tent
00:33 < DTrejo> I dunno
00:33 <@Nexxy> I remember! (mostly)
00:33 < DTrejo> I asked the only question in your presentation
00:33 < DTrejo> i felt special
00:33 <@Nexxy> I couldn't actually see anyone ._.
00:33 < DTrejo> one of the few questions at the whole conference
00:34 < Hotroot> jesusabdullah: I think buffer.fill(0) /is/ necessary, because how else does it know what to toString?
00:34 <@Nexxy> DTrejo, \o/
00:36 < xdamman> Having trouble installing node 0.8 with nâ€¦ anyone else?
00:38 < Hotroot> Fack, "end" does do what I thought it was supposed to, got misled =/
00:45 < chrisdickinson> so, it looks like these are the steps (by and large) to make a compiled module domain-ready: https://github.com/developmentseed/node-sqlite3/pull/81
00:46 < chrisdickinson> basically: call EventEmitter on your constructor functions, use MakeCallback if available, and attach the current domain to any object that will be calling into javascript.
00:46 < chrisdickinson> also, expresso really, really doesn't like domains.
00:49 < owen1> i created an ignite style (5 min, 20 slides, 15 sec each) presentation about node.js - http://www.youtube.com/watch?v=CKx3W-vTkOw&feature=youtu.be  any feedback is welcome!
01:00 < chrisdickinson> out of curiosity, is there an easy way to detect whether stdin is a pipe?
01:01 < ljharb> why would there be a difference?
01:07 < kukkelundin> i'm looking so much forward to the new npmjs.org.. damn
01:09 < kukkelundin> but i absolutely don't understand how that public_users database is working.. anybody know?
01:09 < owen1> kukkelundin: https://new.npmjs.org/
01:10 < kukkelundin> is it replicated, are there som 3rd party stuff involved?
01:11 < kukkelundin> i guess the person to ask would be isaacs
01:12 < Hotroot> Is this the standard mongodb node module? https://github.com/mongodb/node-mongodb-native/
01:13 < Hotroot> Because holy shit that guide at the bottom is unintuitive
01:13 <@Nexxy> there is no standard!
01:13 < Hotroot> Is that the one most use
01:13 <@Nexxy> no clue :D
01:14 < Hotroot> Hmm, nevermind, not too horrible
01:15 < Hotroot> I assume   var collection = new mongodb.Collection(client, 'test_collection'); just opens a collection ,and does not delete my old one?
01:15 < owen1> Hotroot: sounds right
01:16 < Hotroot> I just find that method odd
01:16 < Hotroot> Their examples are all over the place. Think I got it now though
01:17 < owen1> Hotroot: yeah, not the best readme in the world
01:17 < kukkelundin> I can't sleep because of that public_users database.. damn it
01:31 < Hotroot> owen1: What's becoming a real pain in the ass is they've now used 4? methods to connect to a db
01:32 < Hotroot> I mean damn, we don't need more than one way to do the same /exact/ thing
01:32 < owen1> Hotroot: why 4?
01:32 < Hotroot> ?
01:32 < Hotroot> I don't know, I've just noticed that many ways they've shown
01:32 < Hotroot> Think I'm getting it though
01:37 < fosstux> Hi! I'm trying to follow this tutorial: http://net.tutsplus.com/tutorials/javascript-ajax/creating-a-to-do-list-app-with-node-js-and-geddy/
01:37 < fosstux> I have geddy and jake installed via npm. But when I try to run geddy, it cannot find the command jake.
01:38 < fosstux> What am I missing?
01:39 < fosstux> okay. the error with jake has gone....
01:39 < fosstux> I reinstalled it with -g as parameter
01:58 < Spion_> Whenever I see this when people talk about node.js - "callback spaghetti" i ask myself what the hell are they talking about
01:59 < Spion_> are people actually doing things like var myNamedFunction = function() { ... }; <more named functions here> something.doAsync(myNamedFunction)
02:00 < Spion_> if yes, why. if no, where is the spaghetti 
02:00 < ljharb> usually they mean declaring anonymous functions inline
02:01 < Spion_> but thats not spaghetti 
02:01 < Spion_> clearly, spaghetti is goto-like code
02:03 < ljharb> clearly "spaghetti" is an opinionated word that doesn't have a specific definition, so it's clearly not just "goto-like code"
02:07 < marcello3d> how do I force install npm libraries that require 0.6?
02:08 < owen1> Spion_: i heard the words 'christmas tree' as well
02:08 < Spion_> thats more appropriate.
02:09 < owen1> Spion_: and named functions is a nice approach to solve it.
02:09 < owen1> Spion_: Y U NOT LIKE NAMED FUNCTIONS
02:09 < Spion_> because people can add stuff inbetween your funciton definition and function usage.
02:10 < owen1> Spion_: like what?
02:10 < Spion_> evil, evil people who don't understand the concept of reading from top to bottom
02:10 < owen1> Spion_: the main thing we need to be aware of is the lack of hoisting
02:10 < owen1> but other than that?
02:11 < Spion_> function bar() { ... } ... other code added by that damn intern ... somethingAsync(bar);
02:11 < Spion_> :D
02:12 < Spion_> first you see the function and think - the hell is this?
02:12 < ljharb> you can avoid hoisting by assigning your named function to a variable.
02:12 < ljharb> var bar = function bar() {};
02:12 < ljharb> hoisting is bad.
02:12 < Spion_> ... then you notice somethingAsync(bar); - Oh. okay, lets go back to re-read bar again.
02:13 < Spion_> now multiply this by 5 and start jumping around for every single async call
02:14 < Spion_> you have spaghetti now.
02:14  * AlbireoX_ wishes Coffeescript had named functions
02:14 < Spion_> its just like goto
02:14 < Spion_> imho its better to have a christmas tree
02:14 < owen1> Spion_: so u prefer ananymous.
02:15 < ljharb> ew, coffeescript
02:15 < ljharb> Spion_: it's not like goto because you don't have to go read "bar" again in your example. when you get to where it's a callback, youve already memorized what "bar" does.
02:15 < ljharb> if not you have a reading comprehension issue
02:15 < AlbireoX> Coffeescript is nice
02:15 < ljharb> or the code is badly written which is the real problem :-p
02:15 < ljharb> ew, it is not nice
02:15 < AlbireoX> why not?
02:16 < Spion_> ljharb, at the point where I'm reading bar, I have no idea what its parameters are
02:17 < ljharb> sure you do. they're in bar's signature
02:17 < ljharb> and if thats unclear, bar was written poorly
02:17 < owen1> Spion_: i agree with u, but the solution is to have the function right before the usage
02:18 < Spion_> yeah and you can also write really clear code using goto.
02:42 < Daegalus> Nexxy: hey look, more shim languages: http://eerolanguage.org/
02:59 < pawn> how does express process the post body if two values have the same key?
03:00 < pawn> i.e. multiple checkboxes with the same name
03:01 < kukkelundin> creates an array
03:01 < ljharb> even if the name doesn't have "[]" on the end?
03:01 < kukkelundin> yup, I think so
03:02 < kukkelundin> at least some[stuff] = 1 and some[stuff] = 2
03:02 < kukkelundin> becomes [1, 2]
03:02 < ljharb> but then some[stuff] = 1 becomes just "1"
03:03 < ljharb> so then you have three states to worry about - null, string, and array
03:03 < kukkelundin> yup
03:03 < kukkelundin> i'm pretty certain
03:04 < kukkelundin> at least in 3.0
03:04 < kukkelundin> although the body parser is a part of connect 2.0
03:04 < benatkin> it uses qs
03:06 < benatkin> https://github.com/visionmedia/node-querystring/blob/master/test/parse.js#L103
03:30 < Leemp2> Anyone ever gotten "CreateProcessW: Access is denied." on windows? I'm not sure what it means
03:31 < airportyh> Leemp2: no, but have your read this? https://github.com/joeferner/node-serialport2/issues/7
03:32 < airportyh> Question to all: is it possible to use browserify with Mocha?
03:34 < Leemp2> airportyh: Yea i read that, seems oddly unrelated
03:35 < Leemp2> airportyh: Also, in regards to Browserify.. i think i tried, and ran into issues
03:35 < airportyh> Leemp2: ok thanks
03:35 < Leemp2> iirc, Mocha is one of many libraries that try to detect the run environment, which conflicts with Browserify
03:35 < airportyh> ever get the same mocha tests to run on browser and node?
03:36 < Leemp2> Since browserify uses "node code", and a lot of the libraries (mocha/etc) try to use "browser code" switch to
03:36 < Leemp2> .. -"switch to"
03:36 < airportyh> ah, ok
03:36 < Leemp2> airportyh: Funny enough, i stopped using Mocha for a similar issue
03:36 < Leemp2> I wanted a framework that fit into my pipeline a bit better
03:36 < airportyh> mm, I see
03:36 < airportyh> what did you end up with?
03:36 < Leemp2> For very similar reasons
03:37 < Leemp2> Decided to make my own lol. 
03:37 < airportyh> lol indeed.
03:37 < airportyh> look at buster at all?
03:38 < Leemp2> It's not something i wanted to do, but with the applications i needed to fit Mocha/etc into, it was just a pain trying to get them to play nice in all the possible environments since they did so much "magic", and a lot of them had a very limited API
03:38 < Leemp2> airportyh: Not at all, actually
03:39 < airportyh> yup, it makes sense
03:39 < airportyh> Joshua from this post also attempted it https://groups.google.com/forum/?fromgroups#!topic/mochajs/uV2GMgoncQ0
03:40 < SubStack> Leemp2: overly clever libraries are annoying like that
03:41 < SubStack> if they just do it the node way, even for servery-y thing it's usually fine
03:41 < Leemp2> SubStack: I love overly clever.. but for gods sake, make the clever stuff compartmentalized and at the core, have a solid api
03:41 < SubStack> the problem is also that browserify is trying to out-clever the libs
03:41 < Leemp2> yea
03:41 < SubStack> but if the libs start being clever themselves you get into a cleverness arms race
03:42 < wookiehangover> SubStack: now you're just quoting the lyrics of "separate the concerns"
03:42 < SubStack> SPEAKING OF
03:42 < airportyh> :)
03:42 < SubStack> I've started to jot down some MUSICAL NOTATION
03:42 < SubStack> and I have a file on my disk with lyrics in it
03:42 < Leemp2> airportyh: Thanks for the headsup about Buster.js, never heard of it. It's always nice to hear of other projects out there.. for inspiration at the very least
03:42 < SubStack> in a form that will be easy to throw into node-sox once I have it working
03:43 < SubStack> automating away the rest of the band so I can give performances in their absense
03:43 < airportyh> Leemp2: glad to help
03:44 < wookiehangover> cat lyrics.txt | say
04:06 < TehShrike> Anyone in the node community use Careers.StackOverflow?
04:06 < owen1> what is the official name for an npm package? a package or a module?
04:08 < TonkaTruck> Can anyone suggest a place to find mocha examples using the tdd interface?  I'm experiencing some unexpected behavior with nested suites.  I also don't see any tests using suite() in the mocha tests.
04:08 < enkindle> I would think package as they can contain more than a module
04:09 < trave> "node package manager" implies package too.
04:09 < owen1> ok. just wanted to make sure when i talk to my co workers about node
04:31 < willium> hey guys, any comments on using screen vs forever with node?
04:31 < Aria> Screen is terrible for integrating with system startup routines.
04:31 < jesusabdullah> forever is nice for running lots of things that don't need human interaction
04:32 < jesusabdullah> and, as aria said
04:32 < jesusabdullah> screen is nice for things that require user input, like some terminals or an irc client, things you regularly want to dump your stdin to, etc
04:35 < Aria> Yeah. I keep it strictly as a user-level tool.
04:35 < Aria> I prefer my server processes to be managed by the system. And have full logging. 
04:35 < willium> thanks for the input
04:38 < Aria> (I'm actually a fan of daemontools)
04:46 < willium> exit
04:46 < willium> lol woops
04:50 < Leemp2> Does nodejs have any Cross-OS API to find the users home directory?
04:51 < airportyh> Leemp2: I am using var userHomeDir = process.env.HOME || process.env.USERPROFILE
04:52 < Leemp2> airportyh: Any idea about OS compatibility with USERPROFILE? (is it the same for xp, etc?)
04:52 < airportyh> I've tested it XP and Win 7
04:52 < airportyh> This post says the same http://stackoverflow.com/questions/9080085/node-js-find-home-directory-in-platform-agnostic-way
04:53 < Leemp2> k, ty :)
05:27 < kilian_> Hi everyone ;)
05:29 < kilian_> can someone explain me the purpose of this https://gist.github.com/1373622 instead of using tls.CleartextStream ?
06:04 < standoo> hi
06:04 < Stephen> hi
06:04 < standoo> stephen blum?
06:04 < trave> unfortunately not high
06:06 < Stephen> nope, not blum.
06:08 < standoo> i' seeing how many instances of nodejs i can run on my machine
06:09 < Stephen> standoo: What method are you having it run?
06:09 < Stephen> nodejs itself is pretty lightweight
06:10 < standoo> bash script 
06:11 < standoo> repeat symstem calls
06:13 < standoo> with a js script which launches a http server on a different port
06:19 < TimeTurner> standoo: as many as memory permits
06:19 < TimeTurner> but to run a webscale project people usually start with one machine at least
06:21 < Stephen> How the hell is a "demo only" project the most popular thing on github
06:22 < TimeTurner> ?
06:22 < TimeTurner> link
06:22 < Stephen> https://github.com/octocat/Spoon-Knife
06:23 < TimeTurner> oh that's octocat
06:24 < TimeTurner> probably a big joke that everyone played lol
06:24 < TimeTurner> watch and fork competition
06:25 < standoo> TimeTurner: One machine?
06:26 < TimeTurner> well you can have a socket.io/websocket server running on it as well
06:26 < TimeTurner> but generally speaking most people allocate at least one machine to the main http server plus a socket.io server if needed
06:27 < TimeTurner> how many node.js processes you can run is a very arbitrary question
06:27 < TimeTurner> if you really want to know then just spawn one after another
06:27 < standoo> TimeTurner: yeah, but most of them will be idle anyway most of the time
06:28 < TimeTurner> what kind of traffic are you expecting?
06:28 < standoo> TimeTurner: No idea
06:28 < TimeTurner> reqs/s and bandwidth are the primary concerns for this type of stuff
06:28 < standoo> TimeTurner: Wanting to make a development server for node
06:29 < TimeTurner> well if you don't need load testing on that machine then you can probably spawn a bunch
06:29 < standoo> TimeTurner: maximum i could go was 200 for now
06:30 < TimeTurner> I assume you would want to end the processes after a certain amount of time
06:30 < standoo> TimeTurner: yeah, planning to do that too
06:30 < TimeTurner> it would actually be better to spawn on demand
06:30 < TimeTurner> you can create a module which monitors the load and spawns or closes processes as needed
06:31 < TimeTurner> logical load balancer with automatic spawn and destroy
06:31 < standoo> TimeTurner: that was what i was trying to do
06:31 < standoo> TimeTurner: with a reverse proxy in front
06:32 < TimeTurner> the thing is that the only reason why you would want to spawn a new process on the same machine is for CPU power
06:32 < TimeTurner> utilizing multiple cores
06:33 < TimeTurner> and on that note the maximum useful number of node processes that should be run on a machine == number of cores
06:33 < standoo> TimeTurner: wouldn't multiple projects be also a reason to have multiple processes?
06:33 < TimeTurner> because that won't help in anything other than pure computational power. no increase in reqs/s or bandwidth or I/O speeds
06:33 < TimeTurner> not necessarily
06:34 < TimeTurner> you can run multiple http servers within a single node process
06:34 < TimeTurner> but I haven't actually worked with multiple projects before so it would be difficult to say what would work better in your case
06:35 < standoo> TimeTurner: At the same time, I am also trying to sandbox each project
06:35 < TimeTurner> then multiple processes definitely
06:35 < standoo> TimeTurner: been looking into runInNewContext
06:35 < standoo> TimeTurner: they don't really apply to what I am trying to do
06:36 < TimeTurner> if you say that these processes are not reqs/s or bandwidth intensive at the same time and don't have a lot of computational stuff going on then it might be possible for you to max out on as many processes as you need
06:36 < TimeTurner> so yeah the load balancer would work best
06:37 < standoo> TimeTurner: I had to modify some of the source code of node.js to limit ports and filesystem access
06:38 < TimeTurner> well you can change user and group level permissions on a per process basis so that's not an issue at all
06:38 < TimeTurner> http://nodejs.org/api/process.html#process_process_setgid_id
06:38 < TimeTurner> easiest way to sandbox
06:39 < TimeTurner> then just set all permissions and whatever else directly on the group or user level within linux
06:39 < standoo> TimeTurner: how about knowing when a process has been initialized? I don't think node.js has a callback for that
06:39 < TimeTurner> you mean like an event?
06:40 < standoo> TimeTurner: yeah, like the child_process.spawn only returns when the process has finished
06:42 < standoo> TimeTurner: but at certain points during the init proces/ or when the process starts listening on a port, there is no way my main app can know about it
06:42 <@isaacs> standoo: just have the child proc write to stdout or something
06:42 <@isaacs> standoo: or send an IPC message
06:43 < TimeTurner> but he's talking about initialization
06:44 < TimeTurner> standoo: you want to know when the process has started the process of spawning?
06:44 < TimeTurner> or after it's done?
06:44 < standoo> TimeTurner: after its done
06:44 < standoo> isaacs: IPC messages is one of the strategies i'm considering
06:44 < TimeTurner> yeah that you can just have it talk
06:45 < TimeTurner> ipc is the way to go
06:45 < TimeTurner> but you have to realize that there are already battle-tested solutions to these problems that you're describing
06:45 < standoo> TimeTurner: examples?
06:46 < standoo> TimeTurner: i know of nodester
06:46 < TimeTurner> well you could use redis to propagate stuff but node's ipc might be well offf at this stage. dunno about that though.
06:47 < TimeTurner> actually I can't find a process level load balancer
06:47 < TimeTurner> wait cluster
06:48 < TimeTurner> it would be pretty easy to whip up something with cluster and have it check CPU times/usage and adjust accordingly
07:06 < standoo> TimeTurner: hmmm, not sure if cluster suits my needs
07:07 < standoo> TimeTurner: because I would rather have the child to talk to parent automatically
07:08 < standoo> TimeTurner: asking people to add code just to make it work with a development server is just extra work for them
07:35 < owen1> cluster is used when u got multicores. but what if i have 1 cpu. can i run multiple instances of my app on the same port and somehow load balance between them?
07:48 < jesusabdullah> technically owen, but it's not very useful
07:48 < jesusabdullah> owen1: ^^
08:02 < owen1> jesusabdullah: we are taking about each app in it's own process, right? if that's the case, does it matter if it's 1 core of multi?
08:03 < owen1> another question - is there any advantage of using nginx (apart from serving static files)? maybe security? load balancing?
08:12 < AAA_awright> owen1: Static files and load balancing
08:21 < owen1> AAA_awright: so i can use nginx to load balance, regardless if it's single or multicore, right?
08:21 < jesusabdullah> owen1: no advantage if you only have one core
08:21 < AAA_awright> Yeah, what's the point of load balancing across a single instance :p
08:22 < jesusabdullah> owen1: nginx can load balance to m n instances but with only a single core machine the gains are questionable at best
08:22 < AAA_awright> It might even add to the average response time
08:22 < jesusabdullah> Yes, performance-boning at worst
08:40 < owen1> jesusabdullah: i guess i don't understand something here. in ruby i have multiple instances of my app by running a few thin/unicorn servers. and it doesn't matter if i am on single or multicore.
08:41 < owen1> is it any different in node?
08:41 < owen1> AAA_awright: what do u mean by 'single instance'. i am talking of many instances of my app. each instance on it's own process.
08:42 < AAA_awright> u = you?
08:43 < AAA_awright> owen1: Node.js will use 100% CPU if it can, there's no benefit to having multiple instances
08:44 < AAA_awright> And in fact it can hurt average response times because the OS will context-switch between the two, dragging out the run time
08:50 < jesusabdullah> why would you run multiple instances of your app on a single core machine? Even with ruby?
08:50 < jesusabdullah> Just because you can doesn't mean it's useful.
08:51 < stride> "Roll your own private cloud with Node.js cluster on a single raspberry pi under the kitchen sink"
08:56 < owen1> AAA_awright: so if my servers only have 2 cores, i am limited to 2 node instances. i don't know why but it feels like a waste. maybe i just don't understand how things work
08:56 < jesusabdullah> why would it be?
08:57 < AAA_awright> owen1: What's being wasted? Node.js will use 100% of the CPU if possible. More processes than you have cores uses up resources without adding any benefit.
08:57 < AAA_awright> *if necessary
08:58 < AAA_awright> stride: Link or it didn't happen
08:58 < owen1> AAA_awright: ok. so the %100 usage is not specific to node but to any app on a machine?
08:59 < AAA_awright> owen1: Many processes will do nothing while waiting on a response from I/O, so you need more processes if you want to be able to use 100% CPU. Read up on blocking vs. non-blocking operations.
09:02 < owen1> AAA_awright: oh. so u'r saying that since node scales thanks to it's evented i/o nature and it doesn't need many processes as in a blocking approach.
09:05 < AAA_awright> Right
09:10 < nooga> hey
09:10 < nooga> I'm trying to start repl with following configuration: repl.start({prompt: '>' ,useGlobal: true, tty: true});
09:11 < nooga> and I get an exception: readline.js:121 var lines = prompt.split(/[\r\n]/);
09:11 < nooga> TypeError: Object #<Object> has no method 'split'
09:11 < nooga> if I remove options in repl.start() everything runs smoothly
09:12 < nooga> what may be the problem?
09:18 < shanse> try "> "
09:48 < Keverw> Hey. Has anyone here used bcrypt to do password hashing? I'm not sure how I should get started. I currently use MD5, and the product hasn't been shipped. So a change in password hashing isn't a big deal as no accounts to really be upgraded other than mine and a few test ones.
09:48 < Keverw> Is there like a module or something for bcrypt? Not really sure where to start.
09:49 < jesusabdullah> there are modules
09:49 < jesusabdullah> I know this because apparently it's an issue on smartos
09:50 < Keverw> Yeah. I found this doing some Googling. https://github.com/ncb000gt/node.bcrypt.js I don't understand it fully, but I guess it's a start.
10:03 < DamnYankee> Hi guys, could anybody tell me how to give an object a custom string representation? (similar to overwriting the toString method in Java)
10:04 < DamnYankee> Small code example:
10:04 < DamnYankee> https://gist.github.com/3070309
10:13 < mAritz> what do the kids these days use to automatically restart their apps in dev environments on a file change?
10:13 < timoxley> DamnYankee just override the toString method
10:13 < timoxley> mAritz nodemon or supervisor
10:13 < mAritz> (i know, easy enough to implement, but why bother if there are 10m already :D )
10:13 < mAritz> timoxley: thank you! :)
10:14 < mAritz> hm, i tried nodemon a year ago, i think. if i remember correctly it sucked. :/
10:14 < timoxley> mAritz never had a problem with it.
10:15 < mAritz> supervisor is by ics, MUST BE AWESOME! :D
10:16 < standoo> nodemon?
10:16 < DamnYankee> tmoxley it still doesn't seem to be working :( I updated the gist, could you give it another look please?
10:17 < mAritz> hm, supervisor has no way to define folders to watch afaict. trying nodemon :)  (standoo: https://github.com/remy/nodemon/ )
10:18 < timoxley> DamnYankee ahh sorry didn't look at it. override the inspect method. also the way you're setting prototype is wrong
10:19 < timoxley> DamnYankee https://gist.github.com/3070374
10:20 < timoxley> DamnYankee FYI prototypes are object instances, not constructors
10:20 < DamnYankee> you are my hero!
10:21 < timoxley> DamnYankee e.g. var MyThing = function() {}; MyThing.prototype = {toString: function() {}};
10:21 < DamnYankee> the big internet told me to do some prototype magic, so that's what I tried...
10:21 < jesusabdullah> YOU're a prototype!
10:21 < DamnYankee> the whole javascript vs java way of viewing at objects takes a bit of getting used to :)
10:22 < DamnYankee> thanks for showing me the way to do it
10:23 < timoxley> DamnYankee np, these are good resources: http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/ and http://howtonode.org/object-graphs
10:24 < timoxley> DamnYankee also might want to take a look at util.inherits http://nodejs.org/docs/latest/api/all.html#all_util_inherits_constructor_superconstructor
11:03 < mAritz> uhm... here's a new one: socket.io suddenly doesn't serve the client anymore. just responds with code 200 but no content oO
11:05 < mAritz> and now it's magically back. what the hell?
12:15 < bwen> I cant seem to figure out how to retrieve the port from the object returned by http.createServer(). Any ideas?
12:17 < mAritz> anyone here know why fs.watchFile seems to take somewhere between 1 and 4 seconds until it notices that i touched a file?
12:18 < mmalecki> bwen: .address().port
12:18 < mmalecki> bwen: but make sure you do it in .on('listening') callback
12:18 < dsirijus> anyone knows of any nice templating library for node.js frameworks? something non-jade, since i hate how indent error prone it is
12:18 < mAritz> bwen: just doing createServer doesn't listen on any ports though. ;)
12:18 < mAritz> need to call .listen() on that object
12:19 < bwen> thx guys :)
12:20 < mAritz> solution to my watchfile problem: tune the interval :)
12:20 < mAritz> (options object as 2nd argument)
12:59 < Dofs> Hi all, I am pretty new to Node.js. I am thinking of making a WebCrawler in Node.js, but is this a wrong tool for the job. Would node.js be bad, since I need to crunch the results from the crawler?
13:00 < Dofs> *the wrong tool
13:00 < dsirijus> Dofs, check out phantomjs and its binding to nodejs
13:01 < Dofs> dsirijus, wow thanks I think this is what I have been looking for
13:02 < dsirijus> Dofs, i've just been checking it out last few days, so i cannot comment on how good it is
13:07 < TehShrike> dsirijus: I was thinking of using https://github.com/tautologistics/node-htmlparser for a scraper, but I haven't yet
13:09 < dsirijus> TehShrike, cool thing about phantom is that it's plain ole webkit, just headless
13:15 < Dofs> Would like to create a gui for the webscraping - think firebug or alike
13:34 < ansolas> is it possible to stream audio to a html5 client ? with note js only , (without icecast etc.)?
13:37 < milani> ansolas, why not. you can stream anything.
13:38 < CIA-93> node: Ben Noordhuis v0.8 * r26f1bc8 / src/node_crypto.cc : crypto: fix DecipherUpdate() memory leak - http://git.io/8NCHmQ
13:38 < ansolas> I have no expereicne with node js yet 
13:38 < ansolas> thats why i ask :)
13:39 < milani> ansolas, :) let me show you an example
13:40 < ansolas> nice thank you
13:40 < milani> ansolas, https://gist.github.com/b28771bb56dbc347680c
13:40 < ansolas> hui thats small very nice !
13:41 < ansolas> do you have an iudea how i could handle metadata ?
13:41 < milani> ansolas, no I think it depends on audio format.
13:41 < ansolas> i like to stream prerecorded DJs mixes which are essential just big audio files which consists of several songs
13:41 < dominictarr> milani, don't pipe manually
13:41 < milani> ansolas, I'm not an expert in audio 
13:42 < ansolas> ok maybe i can store the metadata somewhere else and can push them to the client 
13:42 < ansolas> thats possible with node no?
13:42 < milani> dominictarr, :) you r right
13:43 < dominictarr> https://gist.github.com/d3e0eaf3ffa7ef51e857
13:43 < ansolas> ok i see i have to get my hands on node , therer is no way around
13:43 < milani> dominictarr, thx! its now better. /cc ansolas 
13:44 < ansolas> thanks!
13:44 < ansolas> i am going to setup node now
13:49 < milani> ansolas, https://github.com/lucasa/node-streamer
13:49 < ansolas> nice
13:50 < ansolas> thank you !
15:03 < Glenjamin> does "npm outdated" still work for anyone?
15:04 < ansolas> is therer a way to get the length in bytes of a ogg file ? so that i can start the stream at a specific position?
15:04 < bnoordhuis> ansolas: fs.stat?
15:04 < ansolas> ok i look for it
15:04 < ansolas> thansk
15:05 < Glenjamin> in fact, "npm outdated" and "npm update" both seem to die silently midway through
15:09 < ansolas> should this work ? fs.stat('wonderland_-_steve_oood.ogg')
15:09 < ansolas> ?
15:09 < ansolas> thank you for the stream example !!! it works nice
15:09 < ansolas> :)
15:11 < ansolas> oops that was a ff crash
15:14 < ansolas> if i do fs.stat('wonderland_-_steve_oood.ogg') i get undefined returned
15:15 < Stephen> ansolas: Give it the full path
15:15 < bnoordhuis> ansolas: you need to pass it a callback
15:15 < Stephen> Node is likely installed in /usr/local/bin
15:15 < bnoordhuis> ansolas: node's async, remember?
15:15 < ansolas> i have it on a *cough* windows machine here
15:16 < Stephen> That's fine and dandy
15:16 < ansolas> can i use path like c:\ ? or is that solved ?
15:34 < wookiehangover> can someone set the topic to JIFASNIF pls??? cc/ isaacs maxogden Nexxy
15:39 <@Nexxy> lol wookiehangover
15:40 < deoxxa> lol
15:40 <@Nexxy> i was going to do that the other day, but I wasnt sure if I'd get yelled at :P
15:40 < wookiehangover> for some reason I had the on my mind first thing this morning
15:40 < wookiehangover> Nexxy: its true, isaacs yells a lot
15:40 <@Nexxy> "I just JIFASNIF'd"
15:41 <@Nexxy> mostly about how awesome his kangaroo skin vibrams are.
15:41 < wookiehangover> gesundheit?
15:42 <@Nexxy> I am on my phone or i would attempt to get away with it
15:42 <@Nexxy> ... in the delivery room
15:44 < wookiehangover> oh, ya saw that on the twitters
15:44 < wookiehangover> you've been there for a while now, yes?
16:33 <@isaacs> Someone should do this for the images on the Node.js site: http://f.cl.ly/items/012n0O023v2S2N1m3Q1t/How%20to%20Retinafy%20your%20Website.pdf
16:35 <@isaacs> I don't agree with the super complicated media query though.
16:36 <@isaacs> <img width={half} height={half} src={big img}> is fine
16:37 < TrahDivad_> Can people give me their constructive opinion of CoffeeScript?
16:38 <@isaacs> TrahDivad_: The value it adds is not worth the cost it adds.  I recommend just using JavaScript.  You may need to write a few thousand lines of each in production to fully  understand that, though.
16:38 <@isaacs> TrahDivad_: i'm not a "no compilation" domatic type, though.  <3 stylus and ejs
16:39 < llrcombs> isaacs: I'll agree with you on that one
16:39 <@isaacs> but stylus is much much > than css
16:39 < TrahDivad_> isaacs: I'm starting to grasp the value it adds. Could you describe in one or two sentences the main costs it adds?
16:39 <@isaacs> enough that it's worth doing the compilation step
16:39 <@isaacs> TrahDivad_: debugging, context-switching, confusing behavior around var scope, and if you use any non-trivial features, the JS it generates is unintelligible and strange.
16:40 < TrahDivad_> What do you mean by context-switching?
16:44 < kilian_> can someone explain me why I should need this tsl hack? https://gist.github.com/848444
16:45 < kilian_> tls*
16:45 < wookiehangover> TrahDivad_: IMO its a nice crutch to use in the browser if you don't know how to right valid javascript (that JScript interpreters respect) without it
16:46 < wookiehangover> but, live jshint'ing in your editor makes that pretty easy
16:47 < kilian_>  if you don't know how to right valid javascript, learn it.
16:47 < kilian_> :)
16:47 < wookiehangover> kilian_: fwiw valid es5 (that works in node) can break the fuck out of old ie
16:47 < benatkin> wookiehangover: the people who come from python and ruby don't need help, they should just learn to write it
16:48 < kilian_> old ie?
16:48 < wookiehangover> ie6,7,8
16:49 < kilian_> oh gosh, we can not talk about javascript and ie < 9 in the same context :
16:49 < benatkin> wookiehangover: the people who come from front end dev could use help, but the compilation step and smaller community is a deal-breaker, not to mention the quirks
16:49 < kilian_> it is not a matter of js, that is front developent skills.
16:50 < llrcombs> kilian_: please learn to write valid English :P
16:50 < kilian_> hahahaha
16:50 < wookiehangover> benatkin: oh I was just saying it can be helpful in the browser
16:50 < kilian_> it would be great :D
16:50 < benatkin> wookiehangover: isn't underscore more useful for helping people who are used to es5 than coffeescript?
16:50 < llrcombs> that just made itself
16:51 < wookiehangover> benatkin: if you ignore the things that underscore implements differently in its shims
16:51 < benatkin> wookiehangover: or don't happen to trip over them :)
16:51 < Glenjamin> benatkin: i'd go with es5 shims over underscore if you like es5 stuff
16:52 < wookiehangover> ya cause modifying natives is good advice
16:52 < wookiehangover> ...
16:52 < llrcombs> wookiehangover: I'll call that debatable
16:52 < Glenjamin> why do you recommend against it?
16:52 < Glenjamin> i bet every argument you have doesn't hold up against shimming es5 stuff
16:53 < wookiehangover> modifying native is ok if ONLY 1 library is allowed to do it
16:53 < benatkin> wookiehangover: like ember.js? :p
16:53 < wookiehangover> so things are usually fine until multiple parties start modifying natives in disparate ways
16:53 < llrcombs> wookiehangover: OK, I'll agree on that one
16:54 < wookiehangover> benatkin: appropriately enough, that's an argument taken directly from yehuda >_<
16:54 < benatkin> wookiehangover: haha I wondered how he justified that
16:54 < llrcombs> but then again, using 2 libraries that do similar things is usually a very bad idea
16:54 < wookiehangover> plus there's like 5 years of history of browser frameworks finding out that its a terrible idea
16:55 < llrcombs> i.e. I once ran Prototype and JQuery at the same time (gimme a break, I was 13!). I could never predict what $ would do.
16:55 < wookiehangover> llrcombs: what if its included by a 3rd party plugin
16:56 < thanpolas> Shameless plug... just published ready.js to help you monitor multiple async operations and trigger listeners when they are all complete: https://github.com/thanpolas/ready.js#readme
16:56 < llrcombs> wookiehangover: is everything it does included in its own object? If so, fine. Otherwise, you get loads of global vars and break ALL THE THINGS
16:56 < thanpolas> would love some feedback
16:56 < llrcombs> thanpolas: ooh, that sounds very helpful actually
16:57 < llrcombs> thanpolas: powerfull isn't a word
16:57 < thanpolas> auch
16:57 < llrcombs> also, space between a number and a unit
16:58 < llrcombs> and why do I need an "ss" object? Why not just say "var ready = require('ready');"?
16:59 < benatkin> I like es5shim
16:59 < thanpolas> not required... just so there's some consistency as all examples use ss.ready
16:59 < thanpolas> but changed it anyway, i guess more will get confused
17:00 < llrcombs> also, defining ms wait times to avoid race conditions is a bad idea
17:00 < llrcombs> you haven't removed the race condition, you've just made it trigger less often
17:00 < benatkin> it was something jQuery seized upon, but now a lot of people use hasOwnProperty or Object.keys
17:00 < thanpolas> avoid race conditions? that wasn't my intend 
17:02 < llrcombs> then what's the reason for loading things a number of ms after everything's ready, rather than immediately?
17:02 < thanpolas> lazyLoading... i explain it in detail both with an example and in text...
17:02 < iapain> thanpolas: lazy load should be truly lazy
17:03 < thanpolas> iapain please explain
17:03 < wookiehangover> benatkin: I just rarely have a frontend project that needs to support < ie9 AND doesn't include underscore or lodash
17:03 < llrcombs> waiting 2000ms != lazy loading
17:03 < thanpolas> (text explanation> https://github.com/thanpolas/ready.js#why-have-a-delay)
17:04 < thanpolas> why not llrcombs?
17:04 < thanpolas> it's just a very lazy loading =)
17:04 < llrcombs> all it says is "gives you the power to control execution flow", which isn't what time-based delays do
17:05 < wookiehangover> thanpolas: eh, just use deferreds
17:05 < llrcombs> lazy loading = loading something only when it's needed
17:05 < iapain> thanpolas: stuff should be loaded when it's required instead a time-based constraint
17:05 < thanpolas> i agree
17:06 < thanpolas> let me change the wording
17:06 < benatkin> wookiehangover: yeah underscore has more than 7 times as many watchers on github as es5shim
17:06 < llrcombs> the list of times when you should use setTimeout is rather short
17:07 < thanpolas> hmmm
17:07 < llrcombs> remind me, do FS watchers work on Windows yet? I wrote a script several months back using them, found they didn't work on Windows, and just read the file on a setInterval (a valid reason to use that, except when there's a better way [FS watchers])
17:07 < thanpolas> maybe i should remove the delay parameter alltogether
17:07 < llrcombs> yeah, I can't see a single good reason to have it, thanpolas
17:08 < thanpolas> doing it now... will reduce the size even more
17:16 < pickelss> I am trying to read a file and post it to a server over http. I guess I have to use createReadStream and pipe it into http.request? Anybody got maybe a small snippet that does this?
17:24 < ansolas> why is this not valid : http://pastebin.ca/2168797
17:26 < arcatan> ansolas: what do you mean by not valid?
17:27 < ansolas> looks like that i have some other things wrong here
17:27 < ansolas>  throw arguments[1]; // Unhandled 'error' event
17:27 < ansolas>                        ^
17:27 < llrcombs> pickelss: I recommend using the "request" module. It makes multiparty so much easier.
17:27 < ansolas> i have to find out what its going on here
17:27 < llrcombs> *multiparts
17:27 < thanpolas> llrcombs pushed, saved 61 bytes, now at 825 =) thank you :)
17:28 < jrajav> ansolas: Did you do var fs = require('fs');?
17:28 < kilian_> ansolas: https://gist.github.com/3edb90ae245b40f3d443
17:28 < ansolas> jup
17:28 < llrcombs> thanpolas: when your script weighs < 1KB, I think you can stop worrying about filesize
17:28 < ansolas> https://gist.github.com/d3e0eaf3ffa7ef51e857
17:28 < ralphholzmann> how can I check if an incoming request is http or https (I'm using the express framework)
17:28 < ansolas> i ahve this example here and like to find out the file size so that i can start in the middle of the song
17:29 < ansolas> thats my intention :)
17:31 < ansolas> hm when i try to run this script i get:http://pastebin.com/xyt8rHH4
17:31 < ansolas> strange a few hours ago it worked 
17:33 < ansolas> ok i see , the old processs was still running 
17:33 < ansolas> therefore i coundt start a new :)
17:42 < ansolas> ok reading that file with fs.readFile is working , but fstat isnt i just get: fs.js:504
17:42 < ansolas>   binding.fstat(fd, makeCallback(callback));
17:42 < ansolas>           ^
17:42 < ansolas> TypeError: Bad argument
17:42 < ansolas> fd should be the path or not ?
17:43 < ansolas> or what stands fd for?
17:45 < ansolas> aha  fs.stat works
17:45 < ansolas> so fd != the file path 
17:45 < ansolas> is there a documentation of the documentation ?
17:46 < brianloveswords> fd is file descriptor.
17:47 < brianloveswords> You would get the file descriptor from something like `fs.open`
17:48 < ansolas> ok that makes sense
17:48 < ansolas> tahnk you
17:48 < brianloveswords> No problem
17:49 < ansolas> just started with node
17:49 < ansolas> is there any othet documentation than this http://nodejs.org/api/all.html#all_about_this_documentation
17:49 < ansolas> ?
17:51 < ansolas> for example i like to know all aotions of : fs.createReadStream
17:52 < ansolas> i saw in a example someone posted here atht he used paused:true, bufferSize
17:52 < brianloveswords> ansolas: http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options
17:52 < ansolas> but i cant find such things in teh docu ?!
17:53 < ansolas> or what am i missing ?
17:53 < brianloveswords> ansolas: http://nodejs.org/api/ contains all of the official docs for the core modules, beyond that reading the source (it's quite readable) is another good way to learn.
17:54 < ansolas> puh ok 
17:54 < ansolas> i find it quite less detailed
17:54 < brianloveswords> `paused: true` seems to be undocumented.
17:55 < brianloveswords> But it's in the source
17:55 < ansolas> i tried starting a stream of an oogg file in the middle like this:var stream = fs.createReadStream('wonderland_-_steve_oood.ogg',{start:7633, paused:true,bufferSize:1024});
17:55 < ansolas> but that wont stream :(
17:55 < brianloveswords> ansolas: https://github.com/joyent/node/blob/master/lib/fs.js#L1220
17:56 < ansolas> ok super :)
17:56 < brianloveswords> What's happening, are you making sure to capture the data events from `stream`?
17:56 < brianloveswords> stream.on('data', function(chunk){â€¦})
17:57 < ansolas> https://gist.github.com/d3e0eaf3ffa7ef51e857
17:57 < ansolas> i hve gut this example 
17:57 < brianloveswords> Ahhh, did you try without the `pause` and `resume`?
17:58 < ansolas> hm no
17:58 < ansolas> let me try
17:58 < brianloveswords> It's not going to emit a data event before the event loop finishes it's current pass, so you don't have to worry about it emitting before you bind.
17:58 < brianloveswords> *its current pass
17:58 < ansolas> when i try to open it in firefox i get that the file is corrupt
17:59 < ansolas> if i do not specify a start it is working
18:00 < ansolas> so how do i find out why defining a start is not working?
18:00 < ansolas> http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options
18:00 < brianloveswords> ansolas: oh yeah, you can't start streaming from the middle if you're trying to actually get the file to be listenable because you need the headers of the file (or at least firefox does).
18:02 < ansolas> ok 
18:02 < brianloveswords> So node is working perfectly fine in this example and starting from the middle but firefox can't understand that it's an ogg file since it doesn't have the bytes in the beginning saying "this is an ogg file" with all of the information about the file.
18:02 < ansolas> okay so i would have to send the headers ?
18:04 < brianloveswords> What are you trying to do, just send half (or some other portion that isn't 100%) of the file?
18:04 < brianloveswords> And also have it play in the browser
18:05 < ansolas> ok my goal is to create a radio station which supports the listener mit song specific infos 
18:05 < ansolas> such as song name etc amd song id so that listeners can add songs to their favourite list
18:05 < dshaw_> #nodeup will be recorded live in about an hour.
18:05 < brianloveswords> Ah so you're going to need to be able to read and decode metadata from files.
18:06 < brianloveswords> I'd search npm to see if there's an appropriate module for that already written.
18:06 < ansolas> essentially i liek to craete a fake live radio :)
18:06 < ansolas> i just want one big nonstop dj mix and a timer on the server which represents the current playback position
18:06 < ansolas> or if there is any other solution ?
18:07 < ansolas> the metadat could also be stored in a kind of cuesheet
18:07 < ansolas> and than we could push the data to the client :)
18:07 < ansolas> that would be sexy 
18:07 < ansolas> much smarter than polling like all those shoutcast stations do
18:09 < brianloveswords> ansolas: ahh okay
18:09 < ansolas> any help is welcome
18:09 < ansolas> :)
18:10 < brianloveswords> I don't know enough about streaming media, I'd have to read up on those specs, but I think you're sort of on the right track.
18:10 < octane--> this error is killing me â€¦ anyone know how to catch it? http://pastebin.com/xvYcdN44
18:10 < brianloveswords> Unfortunately you can't just arbitrarily pick a spot in the middle to stream from because of the way that the files are encoded, so you're going to need to figure out how to decode them (or find a module on npm that does it for you!)
18:11 < ansolas> hm maybe i can start playback initiated from the browser from a specific point of time
18:12 < ansolas> haha that could work
18:13 < rodyhaddad> Hello awesome people, I'm trying to write a small script in node.js, but I encountered a problem. I need to post some data to some php on the same server, but it doesn't seem to work. I'm using http.request (should I be using it for that?). The node.js script and the php is running on the same server. If I make the post to another server, it works, but if it is the same server, it doesn't. What should I be doing to make a request 
18:13 < rodyhaddad> to the same server?
18:13 < ansolas> but for that i woudl need somkind of range 
18:13 < Glenjamin> rodyhaddad: we'd need to see a code sample
18:13 < Glenjamin> pastebin/gist etc
18:16 < ansolas> ok enough for today cyalater
18:16 < brianloveswords> ansolas later!
18:16 < brianloveswords> octane-- what are you trying to do when you get that error?
18:16 < ansolas> now i nned a beer and relax
18:17 < octane--> brianloveswords: just catch it and console log it instead of the server peaking out on me 
18:17 < owen1> how come that setTimeout doesn't block the request? is libuv treat it similar to i/o call and add the function to some queue?
18:18 < owen1> or is it using a thread pool like a file sysem i/o?
18:18 < brianloveswords> octane-- I mean what are you doing right before that happens, do you know what (roughly) you're doing to cause it?
18:18 < rodyhaddad> Glenjamin, http://pastebin.com/wpJc1YQf
18:18 < octane--> brianloveswords: thats a good question - i don't have a clue! it seems to happen when the server is idle
18:19 < brianloveswords> octane-- It's originating from net.js, TCP.onread so it seems to be timing out when trying to read data from a socket.
18:20 < octane--> brianloveswords: websocket perhaps?
18:22 < rodyhaddad> Glenjamin, did you check out the code?
18:23 < brianloveswords> octane-- perhaps, but I can't say for sure. In general, you can catch uncaughtExceptions by doing process.on('uncaughtException', function(err){â€¦}) but it's not good practice to catch uncaughtErrors without then taking some action to fix the state of the application.
18:24 < octane--> brianloveswords: got it. thank y
18:24 < octane--> you
18:24 < brianloveswords> You can also probably do something with the fancy new Domain stuff: http://nodejs.org/api/domain.html but I haven't played around with that yet!
18:26 < brianloveswords> rodyhaddad: do you also control the php server?
18:26 < rodyhaddad> brianloveswords, yes
18:26 < brianloveswords> Can you check if it's receiving the request and inspect the contents of the request?
18:27 < brianloveswords> rodyhaddad also you should add a listener for req.on('error', function(err){â€¦}) and see if you're getting anything there.
18:28 < brianloveswords> Or rather, res.on('error')
18:28 < octane--> cheers dude
18:32 < rodyhaddad> brianloveswords, I added the listener to errors on res, and it's not being triggered. It's not about php. If I request a static css(js, whatever) file from the same server, I'm getting nothing. If I request it from another server, I get a response.
18:47 < brianloveswords> rodyhaddad hmm I have no problem making same-server requests using localhost
18:48 < brianloveswords> rodyhaddad are you referencing the server by hostname or ip address?
18:49 < brianloveswords> It's a longshot, but I've had problems in the past with same-server requests using hostname where it ends up trying to call out and it gets trapped in the load balancer.
19:19 < owen1> is it accurate to say that whenever i use http.request the data will be streamed? or is it depending on the way the server implements it?
19:20 < Glenjamin> owen1: you'll always get 1 or more data events and 1 end event on a successful connection
19:25 < rodyhaddad> brianloveswords, lol, it was a DNS error. Finaly fixed it! thx for your help though :)
19:25 < brianloveswords> rodyhaddad ah ha! No problem, glad you got it settled.
19:26 < dstaubsauger> hi, i tried googleing, but i couldn't find a way to run a shell command, save the output to a variable and continue the script afterwards (aka blocking child process). is there a way to do this in node?
19:26 < pickelss> Why do I get am empty file.txt when I do this? https://friendpaste.com/7VIjGAB93kLzq1T8U1MQvr
19:27 < jrajav> dstaubsauger: http://nodejs.org/api/child_process.html
19:27 < pickelss> It works if I pipe outside the mkdir callback.
19:28 < dstaubsauger> jrajav: yup, that page describes how to start a child process without waiting for it to finish
19:29 < dekroning> does Node also uses multiple processors ?
19:29 < jrajav> dstaubsauger: Yes, it's asynchronous, like just about everything in node
19:29 < jrajav> dstaubsauger: If you *need* it to be synchronous you're probably doing it wrong
19:30 < jrajav> dekroning: Short answer: no
19:30 < owen1> Glenjamin: so the answer is yes, http.request returns an event emitter with data and end events. 
19:30 < jrajav> dekroning: http://stackoverflow.com/questions/2387724/node-js-on-multi-core-machines
19:30 < dekroning> jrajav: thanks
19:31 < owen1> Glenjamin: actually the docs say it returns ClientRequest which is writable stream
19:31 < dstaubsauger> jrajav: i need an external program to initialise a configuration file that shall be created at startup in case it's not already there. There's a function for synchronous file reading, which is there for reading config files at startup. What am i "doing wrong" if i want to create that file?
19:32 < jrajav> Put the main code you want to run after making that check - call it init() - in a separate function
19:32 < jrajav> Call that function in the exec callback
19:33 < Glenjamin> owen1: ah, sorry, thought you were talking about the http server - my bad
19:34 < jrajav> If you only call exec in one branch, then go straight to init() in the other one
19:34 < jrajav> There are other ways to do it but it's certainly not impossible
19:34 < owen1> Glenjamin: but i think your reply was accurate since a writable stream will emit the data and the end events
19:34 < Glenjamin> the response object does data and end
19:35 < Glenjamin> the request you want to call .write() 0 or more times, and then .end()
19:35 < dstaubsauger> thanks... i might as well create init1(), init2(), init3() and init9442() for every time node lacks the functionality to do someone synchronously... https://github.com/joyent/node/issues/1167
19:49 < jrajav> Asynchronous programming is frustrating to get a handle on, at first
19:54 < dstaubsauger> and some things are better left synchronously. dont tell me you write object orientated shell scripts just because it's the better way to do things...
19:55 < jesusabdullah> I write synchronous but object-oriented code with some regularity
19:55 < jesusabdullah> I also write async, not-so-object-oriented code with some regularity
19:55 < jesusabdullah> truth be told, I see async calls relatively often in my node scripts
19:56 < jesusabdullah> note I say "scripts" and not "programs"---scripts are only meant to run once and then they're done
19:56 < pickelss> Anybody want some SO rep? http://stackoverflow.com/questions/11386133/why-doesnt-piping-work-inside-a-callback
19:56 < jrajav> Asynchronous has nothing to do with OO
19:56 < whitman> I'm using socketio and the with the following code: http://pastebin.com/1VhhaeqA - 'connected' is echoed to the client console as well as the value of $('#key') but the following emit doesn't appear to do anything.  Suggestions?
19:56 < jrajav> I actually do write a lot of my "scripts" in node.js
19:57 < jesusabdullah> jrajav: Glad to see we're on the same page sir and/or madame!
19:57 < dstaubsauger> jrajav: that was just an example to illustrate that one way of programming does not need to be the best way to do everything, be it oop/asynchrousness/whatever
19:58 < jrajav> I don't remember saying that
19:58 < jrajav> I said "it's asynchronous, like almost everything in node"
19:58 < jesusabdullah> WELL SOMEBODY DID
19:58 < jrajav> Node is not always the best tool for the job, but it has a specific design
19:58 < jrajav> So when you ARE working with it, it's generally a good idea to work with that design, not against it
19:59 < jesusabdullah> interestingly enough, I really like node for data munging
19:59 < jesusabdullah> because, like
19:59 < jesusabdullah> to get data from something you just put some request on dat shit
19:59 < jesusabdullah> to save as something reasonable, fs.writeSync to a json file (or not-so-sync, depends)
19:59 < jesusabdullah> writeFileSync? Whatevers
20:00 < jrajav> I'm writing something right now that works with a JSON flatfile db
20:01 < jrajav> Loaded on start, saved on exit
20:02 < jrajav> It also has a command-line interface
20:02 < jesusabdullah> oh also Object.keys and Array.prototype.forEach
20:02 < jmibanez> i'm interested in hacking on node. what's the best place to start? :)
20:02 < jesusabdullah> with those you can do damned near anything
20:02 < jesusabdullah> jmibanez: The beginning!
20:03 < jesusabdullah> jmibanez: But seriously, I'd say just choose a small fun hack project and just get messy/make mistakes/mrs.frizzzle
20:03 < jmibanez> jes
20:03 < jmibanez> lol
20:03 < jmibanez> jesusabdullah: lol
20:03 < jmibanez> jesusabdullah: that's what i mean. i'm looking for a project, or at least an open issue that i can take a look at
20:12 < ForSpareParts> quick question: What editors or IDEs do you guys recommend for Node development? In particular, do you know of any that provide really good contextual documentation? 
20:12 < ForSpareParts> I'm just learning, but since the libraries are such a big part of what I have to know, I thought it'd be nice if I had an editor that gave me a sense of what I had available to use.
20:13 < Ezku> sublime text is the new black
20:14 < Ezku> and I don't think there are any noteworthy IDEs around, with js lacking the type info they'd need
20:14 < Ezku> the great thing is javascript isn't that large of a language
20:14 < Ezku> and the libraries in node aren't huge either
20:15 < ForSpareParts> Ezku, fair enough. I guess I'm just used to jumping into stuff that's really massive. I sometimes freak out a little when I start going through a tutorial and I wonder what I'm *not* seeing.
20:16 < Glenjamin> komodo ide/edit has reasonable node support
20:17 < alex4nder> ForSpareParts: emacs and read the documentation
20:17 < alex4nder> the thing with node is you'll want to install a bunch of NPM-packaged pieces to make your life easier (e.g. connect) .. and no editor is going to help you find that.
20:19 < jmibanez> on second thought: what's the fastest way to dive into the deep end of node? :D
20:19 < jmibanez> <i'm a masochist that way>
20:20 < mmalecki> jmibanez: start a projec
20:20 < mmalecki> *project
20:20 < jmibanez> i'm reading from the top to the bottom, and i need a crazy project/hack/whatever. suggestions?
20:20 < jmibanez> mmalecki: i'm in search of a project, rather :D
20:24 < owen1> i copy-paste the http.get from the docs - http.get("http://www.google.com/index.html", function(res)    and i get: Error: connect EADDRNOTAVAIL
20:26 < mmalecki> jmibanez: yeah, that's pretty hard
20:28 < owen1> ping to google works, btw
20:31 < jesusabdullah> jmibanez: Well like, what's something you wish existed that sounds like it wouldn't take incredibly long?
20:35 < jmibanez> jesusabdullah: honestly, i have no concrete ideas, or at least, some ideas won't work (e.g. threading)
20:40 < jesusabdullah> I mean at the app level, jmibanez 
20:40 < jesusabdullah> like, a thinger that does a whatever
20:40 < jmibanez> jesusabdullah: oh, i'm not interested at that level, at the moment.
20:40 < jmibanez> jesusabdullah: fwiw, i've been writing node apps (both in javascript and via coffeescript) for some months now
20:41 < jmibanez> jesusabdullah: on a whim, i've decided to take a look at the guts (core-level, not userland)
20:41 < jmibanez> jesusabdullah: hence my interest in a way to contribute to node (or at least for a crazy project). i'm currently out of ideas :D
20:42 < jmibanez> (fwiw, most of my projects have been work-related)
20:42 < jesusabdullah> I see
20:42 < jesusabdullah> i'd just start reading /lib/*.js
20:42 < jesusabdullah> it'll be both enlightening and disillusioning
20:43 < jesusabdullah> and you'll probably find stuff to fix
20:44 < jmibanez> jesusabdullah: ahh, sounds like a plan :) i'll start there then
20:47 < jesusabdullah> jmibanez: fs is a fun one
20:48  * jmibanez scurries off to take a look at lib/fs.js in Emacs... 
20:49 < jmibanez> HOLY SHIT. 1600 lines of code?
20:50 < jmibanez> (not that that's bad or anything. it's just, 1600 lines of code is kinda surprising for one module. at least for me.)
20:51 < jmibanez> then again, i'm new to this :D
20:59 < vicapow> anyone know how I can find out if the current hook is the master/server ?
20:59 < vicapow> (in hook.io)
21:08 < felixge> ircretary: watch mysql
21:09 < felixge> mysql
21:09 < felixge> can somebody say mysql
21:09 < eO_Ae> mysql
21:09 < felixge> want to test my message highlighting :)
21:09 <@maxogden> i hate mysql
21:09 <@maxogden> just kidding, its okay
21:09 < felixge> *g*
21:09 < felixge> didn't work, keep saying it
21:10 <@maxogden> mysql lets you do queries
21:10 < felixge> ok
21:10 < felixge> working now
21:10 < eO_Ae> I used node-mysql
21:10 < felixge> and formidable ?
21:10 <@maxogden> mysql is a formidable database
21:10 < felixge> formidable by itself plz
21:10 < felixge> :P
21:10 < whitman> I'm using formidable in a project right now.
21:10 < felixge> whitman: thanks
21:10 < felixge> ok, all working now
21:10 < felixge> whooot
21:10 < felixge> now I'll be IRC-ing like a pro
21:10 < felixge> :)
21:11 < whitman> express is working fine, formidable is working fine, but I can't get socket io to emit a message from client to server :(
21:11 < felixge> whitman: :(
21:12 < eO_Ae> What client do you guys use for IRC?
21:12 < whitman> mIRC
21:12 < eO_Ae> is it good?
21:12 < gkatsev> irssi!
21:12 < gkatsev> or weechat
21:12 < gkatsev> if you want a graphical interface x-chat 2
21:12 < whitman> I like it, but it's Windows only.
21:12 < eO_Ae> I'm using colloquy and feel I may have made a huge mistake
21:13 < riven> --- mIRC hate below this line ---
21:13 < gkatsev> eO_Ae: eh, it's probably one of the better graphical clients on osx
21:13 < ccowan> I'm using Admium
21:13 < ccowan> Adium
21:13 < ccowan> works great for IRC
21:13 < ljharb> colloquy here
21:13 < eO_Ae> what are the good non graphical ones on os x?
21:14 < gkatsev> eO_Ae: weechat, irssi?
21:14 < ljharb> it's irc. theyre all non-graphical :-p
21:14 < ccowan> I liked BitchX before I used Adium
21:14 < gkatsev> they probably work on osx
21:14 < gkatsev> not a fan of how adium/pidgin handle IRC
21:14 < yawnt> there's irssi for mac
21:14 < gkatsev> I also have irssi on a server running under screen
21:14 < ljharb> thats because theyre IM clients, and IRC isn't IM.
21:15 < gkatsev> lol, yes
21:15 < ccowan> Humâ€¦ am I missing something Adium seems to handle IRC just fine
21:16 < gkatsev> ccowan: I'm not saying it doesn't work just saying I dont like how it works
21:16 < ccowan> oh
21:16 < ccowan> yeah
21:17 < ccowan> I've been wanting to use a terminal based IRC but I want one that also integrates with Growl since I don't always have my terminal up front
21:17 < alex4nder> better drink your own piss
21:17 < gkatsev> ccowan: https://github.com/kfdm/irssi-growl
21:18 < gkatsev> also, i've been using irssi notifier app for android
21:18 < Zarel> I have a question about Node HTTP requests: is there a guaranteed minimum size for the 'data' event on a response?
21:18 < mmalecki> Zarel: no
21:19 < mmalecki> Zarel: why care tho?
21:21 < Zarel> mmalecki, not even one byte?
21:21 < mmalecki> Zarel: oh, well, one byte is guaranteed
21:22 < Zarel> Would be nice if I didn't have to keep track of a buffer myself
21:22 < Zarel> All I really needed is four bytes :/
21:23 < mmalecki> Zarel: why?
21:25 < Zarel> mmalecki, I was previously using a library to get the HTTP request and send the callback the entire response.
21:25 < Zarel> It's been having some performance issues so I've been considering just bypassing the buffering step
21:26 < mmalecki> I see. your usecase seems pretty specific...
21:27 < Zarel> mmalecki, I'm surprised Node doesn't have built-in tools to do this.
21:28 < Zarel> I'd assume there are a lot of HTTP responses for which streaming doesn't make sense (JSON, for instance)
21:30 < mmalecki> Zarel: there are user-space modules, I'm sure
21:30 < mmalecki> also, you can just concat chunks
21:31 < ccowan> Zarel: have you looked at https://github.com/mikeal/request
21:31 < Zarel> ccowan, that's the library that I'm having trouble with, yes
21:31 < ccowan> oh
21:32 < Zarel> I just made a request a few minutes ago, I'll tell you when I get the response. :P
21:34 < ccowan> Zarel: Are you just trying to proxy a stream?
21:34 < Zarel> no, I'm trying to make an HTTP request for some JSON data, parse that data, and then do stuff with it
21:35 < ccowan> I do that all the time with requestâ€¦ 
21:36 < ccowan> Zarel:  Do you have a gist with some code that's giving you issues I could look at?
21:36 < owen1> i copy-paste the http.get from the docs - http.get("http://www.google.com/index.html", function(res)    and i get: Error: connect EADDRNOTAVAIL
21:36 < mikeal> request(url, {json:true}, function (e, resp, obj) {})
21:36 < CIA-93> libuv: Fedor Indutny v0.8 * r3a54805 / (include/uv-private/uv-unix.h src/unix/thread.c): unix: thread: use mach semaphores on osx - http://git.io/X6y6DQ
21:37 < Zarel> ccowan, well, the issue is performance, and recent research is showing it might not be a problem with request
21:38 < ccowan> Zarel: mikeal just respondedâ€¦ he's the man! 
21:38 < mmalecki> Zarel: use core if you're having problems with request performance
21:39 < mmalecki> also, I bet it's not your bottleneck
21:39 < Zarel> Yeah, I figured
22:26 < dmilith> I have strange issue with runjs, nodemon and similar when launching some of my code
22:26 < dmilith> it uses 100% of cpu
22:26 < dmilith> when I start my app (express web app) with coffee myserver.coffee
22:27 < dmilith> it uses cpu normally
22:27 < dmilith> but when runjs myserver.coffee it hogs my cpu badly
22:29 < dmilith> isaacs: it's reproductible on all macs I have (imac 27", OSX Lion latest patch)
22:29 < dmilith> and mbp with same os, and imac 24" with sl
22:29 < chapel> dmilith: you sure its not just crashing
22:29 < dmilith> no
22:29 < chapel> and continually being restarted?
22:30 < dmilith> no
22:30 < chapel> you're not sure, or you are sure its not that?
22:30 < dmilith> it answers each request 
22:30 < chapel> are you changing any files?
22:30 < dmilith> no
22:30 < dmilith> doing nothing
22:31 < chapel> well you shouldn't use nodemon for deploying your server
22:31 < dmilith> I may get some more info by sampling node prodcess
22:31 < chapel> forever most likely
22:31 < dmilith> will try forever on my box, give me a while
22:32 < dmilith> omg lots of dependencies
22:32 < chapel> if you want simple and clean
22:32 < chapel> use tj's mon
22:32 < chapel> its written in c
22:33 < dmilith> mon?
22:33 < chapel> yes mon
22:33 < dmilith> forever isn't working well wirh bsd
22:33 < dmilith> with*
22:33 < chapel> https://github.com/visionmedia/mon
22:37 < substans> Hey! is it impossible now to get waf and npm working at the same time on windows/cygwin?
22:41 <@isaacs> dmilith: i have no idea what runjs is.
22:42 <@isaacs> dmilith: sorry.
22:42 < dmilith> npm install -g run
22:42 < dmilith> runjs somescript.js / coffee
22:42 < dmilith> same like nodemon
22:42 <@isaacs> dmilith: if you can remove some of the dependencies and show it's a node problem, i'll happily dig into it
22:42 < dmilith> or similar
22:42 <@isaacs> dmilith: but i haven't seen that behavior before.
22:42 <@isaacs> my first guess is "a bug in either runjs or your program"
22:42 < owen1> i copy-paste the http.get from the docs - http.get("http://www.google.com/index.html", function(res)    and i get: Error: connect EADDRNOTAVAIL  can someone try it as well?
22:43 < dmilith> isaacs: it's started to happen after upgrade from 0.6 to 0.8
22:43 < dmilith> same app same conf
22:43 < dmilith> same machine
22:43 <@isaacs> dmilith: sure, i believe you
22:43 <@isaacs> dmilith: maybe it's the exit/close event stuff?
22:43 < dmilith> https://github.com/remy/nodemon
22:43 <@isaacs> is it listening on exit and it should be listening on close?
22:43 < dmilith> hmm
22:43 <@isaacs> i hope you understand, i can't track down every bug in every node program.
22:44 < dmilith> yes, I understand, I'll hunt in the deeper forest then. bbl
22:44 <@isaacs> if you can reproduce it a little, you'll probably either find that it's a node bug, or find where the bug lives.
22:44 < dmilith> how about this fs.symlink bug?
22:44 <@isaacs> if something in node is busted, i'd love to hear about it and get it fixed.
22:44 <@isaacs> ?
22:44 <@isaacs> fs.symlink bug?
22:44 < dmilith> yes
22:44 < dmilith> it's broken on 0.8.1
22:45 < dmilith> reproductible 100% here
22:45 < dmilith> let me explain, 
22:45 <@isaacs> dmilith: fs.symlink is not completely broken on 0.8.1, I'm pretty sure
22:45 < dmilith> https://gist.github.com/3073291
22:45 <@isaacs> maybe gist some code that does the wrong thing?
22:45 < dmilith> this simple code
22:45 <@isaacs> ah, perfect :)
22:45 < dmilith> change path
22:46 < dmilith> anyway it yields:
22:46 <@isaacs> and does /etc/hosts exist already?
22:46 < dmilith> deldagorin:[dmilith:~/Projects/Web ]:ï£¿ (0:45) â†’ coffee symlink.coffee 
22:46 < dmilith> { [Error: EEXIST, symlink '/Users/dmilith/Projects/Web/dupa']
22:46 < dmilith>   errno: 47,
22:46 < dmilith>   code: 'EEXIST',
22:46 < dmilith>   path: '/Users/dmilith/Projects/Web/dupa' }
22:46 <@isaacs> and do you have permission to write to /etc/?
22:46 < dmilith> â†’ file /etc/hosts
22:46 <@isaacs> yes, there's already something at /etc/hosts
22:46 < dmilith>  /etc/hosts: UTF-8 Unicode English text
22:46 < dmilith> ;] stupid slash
22:46 < dmilith> hmm
22:47 <@isaacs> yeah
22:47 <@isaacs> you can't symlink over something
22:47 < dmilith> gosh
22:47 <@isaacs> move it aside
22:47 < dmilith> ok, forget it
22:47 < dmilith> going to dig through that cpu hog
22:47 <@isaacs> it is a bit confusing that the path is reported oddly
22:47 <@isaacs> same wiht fs.rename
22:47 <@isaacs> it's hard to know WHICH thing it's complaining about existing
22:48 <@isaacs> at least, just from the error
22:48 < dmilith> yea, sorry for false alarm..
22:48 <@isaacs> it's also odd with fs.link, since you might get an EEXIST *or* a ENOENT, which are opposites.
22:48 <@isaacs> but they'll both report the same path
22:50 < dmilith> ok
22:50 < dmilith> I did:
22:50 < dmilith> npm install express@2.5.9
22:50 < dmilith> express -s testapp
22:50 < dmilith> cd testapp && npm install
22:50 < dmilith> runjs ./app.js
22:50 < dmilith> same hog
22:51 < dmilith> node ./app.js - and app is working flawlessly ;p
22:51 < dmilith> crazy shit
22:51 <@isaacs> dmilith: time to start digging into runjs, it sounds like :)
22:51 < dmilith> same with nodemon
22:52 < dmilith> oh!
22:52 < dmilith> not exactly the same
23:07 < jnpetersen> hello everyone
23:08 < jnpetersen> I'm working on a mobile application that I want to be able to handle audio broadcasting.  Basically like a group chat session similar to voxer
23:08 < jnpetersen> anyone have any pointers on how to handle audio with node?
23:11 < testmaniac> if i tail-f /proc/kmsg
23:11 < testmaniac> nothing comes out
23:11 < testmaniac> does kmsg only log real time kernel messages
23:11 < testmaniac> and not anything from the past
23:13 < bnoordhuis> testmaniac: yes
23:13 < bnoordhuis> testmaniac: you probably want /var/log/kern.log
23:13 < bnoordhuis> testmaniac: or `dmesg` of course :)
23:13 < testmaniac> bnoordhuis: how does this work, the kernel sends messages to kmsg in real time?
23:13 < testmaniac> and then deletes it?
23:13 < testmaniac> why would it do that
23:14 < bnoordhuis> testmaniac: because memory is a finite quantity
23:14 < testmaniac> syslog wouldn't do that...
23:15 < bnoordhuis> testmaniac: and neither does klogd - which writes the log files you should be using
23:16 < testmaniac> yeah but
23:17 < testmaniac> this means i can't create a daemon that intercept the kernel messages before it gets to syslog
23:17 < testmaniac> if kmsg is blank'
23:17 < testmaniac> i mean
23:17 < testmaniac> i could just monitor kern.log
23:17 < rwaldron> bnoordhuis I've been struggling to find a "polite" way to respond to your last email to me on the ML
23:17 < testmaniac> but i don't want to do that i want to get it straight from the kernel into node
23:19 < rwaldron> How do you resolve Vyacheslav Egorov's statement about "--harmony" options being stable when they include features that are no longer part of ES6?
23:19 < bnoordhuis> rwaldron: no need for politeness, i've a thick skin
23:19 < rwaldron> typeof null === "null" <-- axed.
23:19 < rwaldron> but still available
23:20 < rwaldron> All I was trying to say is that it's not wise to recommend --harmony features as though they are "stable"
23:21 < bnoordhuis> rwaldron: if there's anyone who's supremely qualified to speak on v8 features and the stability thereof, it's vyacheslav
23:22 < rwaldron> bnoordhuis That doesn't answer my question
23:23 < bnoordhuis> rwaldron: that's because - with all due respect - i'm not that interested in this discussion
23:23 < rwaldron> then why did you involve yourself?
23:25 < bnoordhuis> rwaldron: because your email came across as arguing for the sake of arguing
23:25 < rwaldron> Im having a hardtime with this "blind faith" attitude. Strings don't hold references to eachother - but because vyacheslav said they do, should we now also believe that?
23:25 < rwaldron> Definitely not
23:25  * mmalecki gets a popcorn
23:25 < rwaldron> I was noting that there was an interesting pattern
23:25 < bnoordhuis> that's why i suggested you phrase your emails differently in the future :)
23:25 < rwaldron> and pointed that out
23:25 < rwaldron> and vyacheslav is the one that instigated an argument
23:26 < bnoordhuis> duly noted
23:26 < bnoordhuis> are we done now?
23:26 < rwaldron> by trying to state that Map/Set/WeakMap should be ok to use because they've been there for some time
23:26 < rwaldron> Map and Set are incomplete APIs
23:26 < rwaldron> how is this stable?
23:26 < bnoordhuis> did i mention i'm not all that interested in this discussion? :)
23:29 < testmaniac> how can i force a kernel event to see if cat kmsg does anything
23:36 < bnoordhuis> rwaldron: rereading that thread, you may be right in that you were not overly argumentative - it's the telling the v8 guy he doesn't know what he's talking about thing that set me off
23:36 < bnoordhuis> but i probably misread that so my apologies
--- Log closed Mon Jul 09 00:00:39 2012
