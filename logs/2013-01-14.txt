--- Log opened Mon Jan 14 00:00:18 2013
00:00 < rknLA> is `node-gyp rebuild` supposed to take forever?
00:13 < amagee> hey i'm using the node debugger (http://nodejs.org/api/debugger.html) and i've stepped into a file which it's just calling "events.js" (no full path as it has for the other files).. how can I find which events.js file this is actually referring to?
00:24 < drug_motor> http://tinysong.com/qVud
00:26 < cxreg> amagee: it's in the node source
00:26 < cxreg> lib/events.js
00:27 < amagee> cxreg: where is "the node source"?
00:27 < cxreg> ...
00:27 < cxreg> https://github.com/joyent/node
00:27 < amagee> i mean, where is it on my system if i installed node.js via apt
00:27 < cxreg> it's not
00:27 < cxreg> the core libraries are compiled down to C code
00:27 < amagee> oh, ok
00:27 < amagee> so if i want to fiddle around with it i need to compile node.js from source?
00:28 < cxreg> yes
00:28 < amagee> ok cool
00:28 < amagee> thanks
00:28 < cxreg> no problem
00:40 < v_y> on macosx when i do fs.ReadStream(?) on an alias file, node crashes with 'Error: ENOENT'    - how do i make node follow an alias, or how do i detect that a file cannot be opened?
01:00 < munro> /w 9
01:01 < ljharb> v_y: i suspect that instead of an alias, you should be using a symlink
01:10 < vincentmac> Quick question. I'm trying to work around IE's lack of CORS support by proxying what would be CORS requests through my node app.  I'm using express to resolve my routes and have figured out what i need on the front end for this to work. How can I make a request to another domain and pass that response to the client?
01:23 < superjoe> when I do child_process.fork, does it get a copy of the parent process's memory?
01:24 < isaacbw> how would that work
01:24 < superjoe> I'm pretty sure that's how it works already; I think the node api simply does not expose it
01:25 < superjoe> http://en.wikipedia.org/wiki/Fork_(operating_system)
01:26 < superjoe> anyway what I would like to do, is fork a child process, do some CPU intensive things using the copied memory from the parent, send the results back to the parent, and then exit
01:26 < superjoe> is this possible in node?
01:26 < isaacbw> I'm pretty sure it doesn't use the system's fork()
01:26 < isaacbw> so no
01:26 < isaacbw> you would have to send the new process all the information it needs via stdio
01:26 < superjoe> there's simply too much
01:27 < isaacbw> how much would that be
01:28 < superjoe> I guess only 20 MB
01:29 < isaacbw> why do you need to start a new process for that
01:30 < superjoe> because I have some code that runs on a 20ms interval, and it gets glitchy if the interval goes too high above 20ms
01:30 < superjoe> CPU intensive task causes that interval to go higher
01:30 < superjoe> sometimes for up to 10 seconds
01:59 < shesek> how should one read an entire file into a variable using fs.read()? should I stat() first and the get the size?
02:01 < shesek> I know about fs.readFile, but I'm using fs.read() because I need to open the file with some specific flags (more specifically, in exclusive mode)
02:03 < isaacbw> why should you care about the size before reading it
02:04 < rknLA> isaacbw: speed and memory?
02:05 < isaacbw> so you would refuse a file that's too big?
02:05 < tippenein> http://hastebin.com/voraletoxi.js  <-- Object function setup(app) ... has function setup    Is there a way to allow app.js to get the setup function from require('controllers/pages') 
02:06 < rknLA> can't imagine why else it'd be a consideration.
02:07 < shesek> isaacbw, well, fs.read requires the offset and length you want to read
02:07 < isaacbw> that's what exports is for tippenein 
02:08 < isaacbw> why not just use readFile shesek 
02:08 < shesek> isaacbw, as I said, I need to set flags, which can't be done with readFile
02:10 < tippenein> isaacbw: I use module.exports.setup = setup
02:11 < tippenein> setup is the function that I need to use within app.js
02:11 < isaacbw> then what's your problem
02:12 < tippenein> I was using module.exports.setup = setup rather than exports.setup = setup
02:12 < tippenein> didn't know there was a difference
02:12 < isaacbw> nope
02:12 < isaacbw> it's just easier to write exports
02:13 < isaacbw> and if you want to assign exports to a new object, you have to use module.exports
02:13 < isaacbw> I think
02:29 < jwm> I'm trying to plan my first big project and kind of wondering what most people use for planning
02:29 < jwm> right now my best tool is vi heh
02:29 < jwm> writing my ideas/specs out
02:29 < rknLA> jwm: paper and pen is a good tool.
02:29 < rknLA> or vim
02:29 < Lorentz> whiteboard + pens for it
02:30 < rknLA> block diagrams in vim are harder than on paper though.
02:30 < rknLA> whiteboard is good too, albeit less persistent than paper + pen
02:30 < jwm> yeah
02:30 < jwm> I've never successfully completed a project before
02:30 < jwm> which is a real pita
02:30 < rootcoma> for flowcharts I use lucidcharts
02:30 < jwm> since I love coding and developing and designing heh
02:30 < rknLA> start small.
02:30 < isaacbw> pita with falafel and hummus
02:30 < rknLA> i have so many unfinished projects, it's ridiculous
02:30 < rootcoma> I use a pen and paper for myself, to track idea, and make flowcharts for anyone I want to impress
02:31 < jwm> nodejs definitely needs flow chart worthy stuff
02:31 < rknLA> mmmm hummus.
02:31 < jwm> I had gyros tonight
02:31 < jwm> feta ftw
02:31 < rknLA> mmmmmmm fettttaaaa
02:31 < jwm> I've been in computers 17 years and javascript like 11 of those years
02:31 < jwm> and still complete zero things
02:31 < kmiyashiro> Is there an official way to mark an npm package as deprecated?
02:31 < zomg> rknLA: don't we all have those? Start doing something 'cause it seems interesting right now, then it stops being interesting at some point so you start doing something else =)
02:32 < jwm> yeah I've got tons of those projects
02:32 < rknLA> yeah, that's... exactly how it goes actually
02:32 < jwm> my problem is I don't even usually get to something working
02:32 < jwm> but this time it is different since I am doing it for work
02:32 < zomg> I usually get to a point where it at least half-works, or works but looks ugly as fuck
02:33 < jwm> so you guys suggest vi still
02:33 < jwm> but also some flowchart stuff on top
02:33 < zomg> and that's when I declare it's done, I put it to github or write to my blog about it, and proceed to forget about it
02:33 < dnz-> yeah blogs are cool
02:33 < jwm> node.js seems like a management experience
02:33 < jwm> I got into node for this project and quickly went into like 13 different npm modules heh
02:34 < jwm> I stepped away for a month and now I feel like I am relearning
02:35 < rknLA> lol.
02:35 < jwm> smog is pretty cool design but mongo express is more stable
02:35 < rknLA> node moves fast, mostly cause it's still so young.
02:35 < rknLA> i don't like mongo.
02:35 < jwm> you don't?
02:36 < jwm> I picked mongo to go along with ms sql
02:36 < jwm> heh
02:36 < zomg> One of these days I need to try a graph database
02:36 < rknLA> .... ms sql??
02:36 < jwm> yeah
02:37 < rknLA> i think mongo might be the lesser of those two evils...
02:37 < zomg> mssql has good tooling at least
02:37 < zomg> the profiler for it is rather nice
02:37 < rknLA> and requires windoze...
02:37 < jwm> I have to integrate it with mssql because of the project
02:37 < zomg> it requires your non-favorite OS
02:37 < zomg> yay.
02:37 < rknLA> jwm: hate it when that happens.
02:38 < jwm> yeah believe me.. I've been a unix admin for 17 years heh
02:38 < jwm> I had to learn windows admin in a month heh
02:38 < zomg> I still haven't seen a profiling tool for mysql that lets you see queries live as they happen
02:38 < jwm> I am actually pleasantly surprised how well node and npm packages work on windows
02:38 < jwm> this module I use the performance actually beats nginx 
02:39 < rknLA> zomg: that sounds ineffective if you're serving multiple requests per second.
02:39 < zomg> not if you have filters to filter out only the ones you're interested in :)
02:40 < cxreg> postgres ftw
02:41 < rknLA> cxreg: i like postgres too, but does it do that sort of profiling?
02:47 < jwm> anyone play with tilemill at all
02:50 < rknLA> jwm: mapbox?
02:52 < cxreg> which sort of profiling?
02:54 < jwm> rknLA: yeah
02:54 < rknLA> i've used mapbox before, but not tile mill.  they usually hang out in #mapbox, but it's sunday night, so they might not be there right now.
02:55 < jwm> I work for a cable company and my dream project for them is to get our plant schematics overlayed on top of tilemill
02:56 < jwm> so we can do a bunch of other overlays of data on the plant / map
02:56 < jwm> it'd be fun
03:02 < rremer> my http server is terminating immediately (unexpectedly).  I call http.createServer().listen() inside an exported function in an imported module, if that makes a difference.
03:02 < rremer> from docs it appears the .listen should keep the process running.
03:03 < jwm> I like that unicorn admin interface
03:03 < jwm> on wrapbootstrap
03:10 < Guest80130> Hi I have a question if anyone can help me with?
03:10 <@Nexxy> Guest80130, you'll never know until you ask :)
03:11 < Guest80130> Ok.. I have written a node js app that uses net module to connect to a tcp server.. and i see the memory footprint increasing
03:11 < Guest80130> not sure how to profile it or fix it
03:11 < Guest80130> any help appreciated
03:12 < dnz-> basically what you want to do is lof ur memory every 2 seconds on an interval bro
03:12 < dnz-> log it
03:12 < dnz-> then u wanna see where its doing it
03:12 < dnz-> then u wanna clean up your poop
03:12 < dnz-> with a towel
03:12 -!- dnz- was kicked from #Node.js by Nexxy [dnz-]
03:12 < dnz-> ^_~
03:12 < dnz-> that was fantastic advice nex, come on
03:13 <@Nexxy> simmer
03:13 < Guest80130> sorry i am new to node js.. how do i log memory? 
03:14 < dnz-> im like a monkey in a coat in ikea, you seen me round the net confused and in fear
03:14 <@Nexxy> lol
03:15 < Guest80130> as far as i can see client.on('data', function(data) {	 }) - where I assume data is of type buffer.. which is not being garbage collected 
03:15 <@Nexxy> Guest80130, you might find some insight from running node with --prof
03:15 <@Nexxy> it will dump a v8.log
03:25 < groundup> I am using CentOS 6 and https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager is of no help.
03:27 < Guest80130> @Nexxy: net module.. on('data',function(data)) is the new "data" object created everytime the data event occurs?
03:28 < isaacbw> yea
03:29 < Guest80130> net module.. on('data',function(data)) is the new "data" object created everytime the data event occurs? I see the memory footprint increasing as the app continuous to run
03:34 < Guest80130> can any one help me? please
03:34 < Guest80130> net module.. on('data',function(data)) is the new "data" object created everytime the data event occurs? I see the memory footprint increasing as the app continuous to run
03:34 < dnz-> okokokoko but if u live like that do u know what people think about you?
03:34 < dnz-> cos i am a wery good bad boy
03:41 < SomeoneWeird> yes, Guest80130 
03:45 < dnz-> it aint a thang hoe
03:45 < isaacbw> Guest80130, your question was answered twice
03:46 < dnz-> console.log 4 lyf bra
03:47 <@mbalho> dont bro me if you dont know me
03:48 < dnz-> dunt frunt 2 me if u cant stunt like me
03:49 <@mbalho> word
03:50 < Guest80130> @isaacbw: I did see you say a yep.. but was not sure if that was for me.. ok if a new instance is created.. is there a way to deallocate its memory in the on('data') as I can see the memory footprint increasing
03:50 < dnz-> @thisisnttwitter u mad?
03:52 < Guest80130> also when i am trying to install nodetime using npm on node-gyp I get - Command failed: CreateProcessW: Access is denied any clue? I am running node on a win server 2008
03:53 < isaacbw> Guest80130, you shouldn't worry about memory with javascript
03:53 < isaacbw> v8 is very clever
03:54 < isaacbw> the answer to your question is no
03:54 < dnz-> LOL
03:54 < dnz-> dont worry about your memory footprint, just put more ram in ur box noob
03:54 < dnz-> ^ gr8 advice
03:54 < isaacbw> haha
03:55 < isaacbw> you will have trouble getting help with node on win server 2008
03:55 < dnz-> whatever man, its webscale
03:55 < Guest80130> I do understand v8 has gc.. but my app's memory footprint keeps increasing.. looks like the data received by net module's on('data') has a strong reference somewhere and is not being garbage collected
03:55 < dnz-> Guest80130: clean it up yourself
03:55 < isaacbw> oy man
03:55 < dnz-> set a useless refence then unset it
03:55 < isaacbw> that's not how it works
03:55 < dnz-> ^ more gr8 advice
03:56 < dnz-> hahah
03:56 < mscdex> groundup: you can install from source or use one of the binary tarball
03:56 < dnz-> where is garbagecollectio 
03:56 < dnz-> he rages hard
03:56 < groundup> This is true. I just wanted to use yum so I didn't have to track updates
03:57 < mscdex> groundup: there used to be one for rpms somewhere, but i don't know who maintains it or if it's still around
03:57 < v_y> is there a way to JSON.stringify asynchronously?
03:57 < isaacbw> switch to arch
03:57 < isaacbw> and always have the cutting edge
03:57 < isaacbw> arch 4 lyfe
03:57 < groundup> lol
03:58 < isaacbw> that wouldn't make much sense v_y
03:58 < isaacbw> it's very fast
03:59 < v_y> i'm stringifying a huge object. i want to pass the object to a function and then get the JSON string through a callback when it's done
03:59 < v_y> as it it it causes a 3 second hang
03:59 < mscdex> groundup: one-liner for v0.8.17 for x64: curl http://nodejs.org/dist/latest/node-v0.8.17-linux-x64.tar.gz | tar zx --strip=1 -C /usr/local
04:00 < isaacbw> I don't think there is v_y
04:01 < groundup> ok
04:01 < mscdex> groundup: for 32-bit, use replace x64 with x86 in the url
04:05 < ljharb> v_y: window.setTimeout(function () { var obj = JSON.parse(data); callback(obj); }, 0) ?
04:07 < v_y> ljharb: what? that still happens in my thread
04:07 < ljharb> of course, javascript is single threaded
04:07 < ljharb> what's the huge object? ie, why is it so huge?
04:07 < v_y> yeah but nodejs lib functions often go off into other threads to do stuff and then call back
04:08 < v_y> it's a representation directory structures 
04:08 < ljharb> you could certainly build yourself a native c module to do that
04:08 < v_y> for about 40,000 files
04:08 < ljharb> you have 40,000 files, and they're not in a formulaic directory structure?
04:08 < v_y> yes that's the situation
04:09 < ljharb> and properly organizing the files first is out of the question?
04:09 < v_y> uh, this is just a test case
04:09 < v_y> the utility needs to record the hash of every file under a directory
04:10 < v_y> so the organization is irrelivant
04:10 < ljharb> and it all needs to be contained in a single json object?
04:11 < v_y> it all needs to be serialized into a single file
04:11 < ljharb> why?
04:12 < v_y> erm, because the end user should only have to deal with a single file when they want ot "save"?
04:15 < ljharb> v_y: i'd bet you could stream the file's contents (reading and writing) such that each chunk is a separate json object
04:15 < ljharb> there might be a module for it
04:19 < v_y> ljharb: yeah, that sound plausible. or maybe something like message pack will do it
04:19 < v_y> *shrug*
04:19 < v_y> ok thanks
04:20 < zmisc> Node.js is only available under Linux
04:20 < zmisc> ?
04:20 < ljharb> also mac and windows
04:29 < zmisc> But not BSD or various other Unix and Unix-like systems? Windows is supported? But not BSD?
04:29 < zmisc> crazy!
04:33 < zmisc> Apparently it is in ports whew, sorry about that :(
04:34 < drug_motor> http://tinysong.com/a0JV
04:47 < gluxon> Is it possible to remove a module from the npm repository? I accidentally published one under the wrong name.
05:46 < segomos> unpublish
06:05 < owen1> i am trying to follow the second example in https://github.com/dominictarr/JSONStream but don't understand where is the http request there? do i need to use the pipe somehow?
06:06 < owen1> i assume i need to use req = request("bla"), but not sure how to pipe it into the stream object.
06:17 < segomos> owen1: i only see one example @ https://github.com/dominictarr/JSONStream/blob/master/examples/all_docs.js
06:19 < owen1> segomos: this one works. can u look at the one below the JSONStream.parse(path) - https://github.com/dominictarr/JSONStream
06:19 < owen1> segomos: i don't see a request there
06:21 < segomos> owen1: if you look at the link i sent you, you will see how to pipe a request through the JSON stream parser
06:23 < owen1> segomos: got it. so i don't need to pipe it into logger. thanks
07:03 < mscdex> is it possible to unlock node's isolate?
07:03 < mscdex> (from an addon)?
07:08 < st_luke> or a powerup
07:12 < Raynos> owen1: that's a writable stream there. You pipe anything you want into it
07:12 < Raynos> probably a request to couchdb 
07:14 < phonebook_> im having trouble getting node-inspector to debug inside safari. it stops in the console and when i go to localhost:5858 there is a message but it never pulls up the script so you can step through it
07:56 < wiseguysonly> clear
07:56 < etcetera> what's the value in using jekyll vs a node.js static site generator
07:56 < etcetera> ?
08:12 <@mbalho> about $3
08:13 <@Nexxy> ilol'd
08:17 < etcetera> /s/value/virtue
08:18 < etcetera> jekyll is obviously more popular, but something like wintersmith seems pretty darn good.
08:36 <@konobi> etcetera: docpad is another somewhat popular
08:37 < stephank> I've been doing my best to maintain this pull, and I think all it needs is some decision making now. Any chance for some love? https://github.com/joyent/node/pull/3036 (Response object for HTTP Upgrade/CONNECT)
08:39 < [AD]Turbo> hi there
08:43 < etcetera> konobi: somewhat popular?
08:43 < segomos> practically legendary
08:47 < _ior> although i do find it amusing that the docpad intro page still suggests word as a code editor :)
10:11 < Sanctumed> What is Express? What does it do?
10:11 < Sanctumed> Does it replace http servers?
10:12 < Doikor> http://expressjs.com/
10:12 < Doikor> express3.0.0
10:12 < Doikor> web application framework for node
10:13 < Doikor> i guess that pretty much sums it up.
10:25 < Industrial> Has anyone worked with browserify?
10:25 < Industrial> I can't get the watch functionality to work
10:25 < Industrial> at least, not together with other tools that watch and write files, like CoffeeScript or LiveScript
10:25 < kozero_> anyone knows about jade? how does it convert to html ?
10:26 < Industrial> kozero_: how do you mean how? it's a template language.
10:27 < simenbrekken> Industrial: What's the problem with watch? It doesn't pick up changes?
10:28 < Industrial> yes.
10:28 < Industrial> the file gets written by livescript (.ls to .js) then I want that .js to be bundled by browserify, but it doesn'tpick up the write to the .js file.
10:29 < kozero_> industrial : what is template language ?
10:31 < Industrial> kozero_: that's really a question for google, not for someone else to spend time explaining you.
10:31 < Sanctumed> :: Express :: Listening on port 4004
10:31 < Sanctumed> Socket.IO's `listen()` method expects an `http.Server` instance
10:31 < Sanctumed> as its first parameter.
10:31 < purr> Sanctumed: you're a fucking retard.
10:31 < Sanctumed> lol
10:31 < Industrial> owned by the bot :X
10:32 < Industrial> simenbrekken: any idea?
10:32 < Sanctumed> Anyway that error I'm getting: dafuq :/
10:33 < Industrial> Sanctumed: start here;   colorscheme base16-eighties
10:33 < Industrial> erm
10:33 < substack> Industrial: I get that bug sometimes when upgrading modules
10:34 < substack> the watcher isn't good at handling lots of updates at once
10:34 < Industrial> Sanctumed: https://www.google.com/&q=socket.io+listen()+method+expects+an+http.server+instance+as+its+first+parameter < there
10:34 < Industrial> substack: okay, I'm writing a custom watcher script to do both actions at once :)
10:36 < MI6> joyent/libuv: Ben Noordhuis master * c931e31 : unix: make assertion message more descriptive - http://git.io/lSET-w
10:41 < Sanctumed> Keep getting this error on clientside: GET http://****.nl/socket.io/socket.io.js 404 (Not Found)
10:41 < Sanctumed> :/
10:48 < SomeoneWeird> Sanctumed, http://codehenge.net/blog/2012/08/using-socket-io-with-express-3-x/
11:24 -!- mode/#Node.js [+o Nexxy] by ChanServ
11:42 < ogny> windowz da misin abi
11:45 < ogny> sorry
11:47 < simenbrekken> Industrial: Sorry, was out for lunch. In my experience the file system changes in OSX are quite flakey at times and I basically gave up on a watch based work flow. If I can recommend anything it's good old Makefile + watch, never trips up and caches
11:51 < funkbox> i'm looking for something like performance counters on windows. basically something that can keep track of metrics like req/s across a cluster with a way to put it all together and make sense of it 
11:53 < emkei> Hello. have a quick question I'm currently writting an api for my angular app, and most of the stuff except admin will be admin accessible
11:54 < emkei> i read that rest apis should hold no state, but I still would like to check whether the requests are comming from my app is there any techniques I could look into
11:54 < emkei> ?
11:55 < jhnns> Not 100% reliable. But cookies should be your choice :)
11:57 < emkei> yeah I just want to make life a little bit harder to access directly to an api, and I realise that it wont stop skilled indviduals from doing that :)
11:57 < simenbrekken> emkei: all that stuff is incredibly easy to spoof
11:57 < emkei> yes I know
11:58 < emkei> but most of the self called hackers will choose easier target to get LOLED on
11:58 < emkei> for admin section I will check for propper auth for each request
11:59 < simenbrekken> emkei: then you can do something like add a header to the outgoing XHR: $.ajaxSetup({headers: {derp: 'foo'}})
11:59 < emkei> simenbrekken: what would you suggest
11:59 < emkei> simenbrekken: I was thinkinh adding unique stuff for each request
11:59 < emkei> like csrf protection stuff does
12:00 < emkei> and then check against it, it's still not foolproof I believe
12:00 < simenbrekken> emkei: anything that's client server is easy to circumvent.
12:01 < simenbrekken> emkei: especially since you're trusting the client by default without asking it for anything
12:01 < emkei> for skilled person, not for a guy who found that tools like firebug exists only today
12:02 < emkei> so basically if I do so I'm leaving api to the wild :)
12:07 < emkei> simenbrekken: is there any solution to make spoofing less easy
12:07 < emkei> I realize there is no 100% way to secure api if it's being used with frontend libs like angular.
12:07 < emkei> without authorization
12:09 < MI6> joyent/node: Ben Noordhuis master * e4598aa : gitignore: ignore perf data files - http://git.io/sqK43g
12:10 < jhnns> Why is it a problem if anyone sends an HTTP request without using a browser? :)
12:10 < Industrial> simenbrekken: I'm on debian wheezy in a vm, though. I created a script to watch for changes now.
12:11 < Industrial> (that applies livescript + browserify)
12:11 < emkei> because scrappers may want to scrape away, there is many people who would do it just for the sake of doing
12:12 < emkei> I think I will need to consider throtling or something similar later.
12:12 < simenbrekken> if you're worried about scraping adding some small obfuscation won't stop those people
12:12 < simenbrekken> emkei: you could require an api key per client and have limits
12:14 < emkei> i think I will opt for X-requested-by which does not allow cross site requests for non-authorized users and some other mumbo jumbo
12:15 < emkei> like coookies or sessions, which is totally not an rest way but who cares :)
12:16 < emkei> simenbrekken: api key per client you mean assign random key to each visitor and give reasonable limit for a REAL person to consume
12:16 < emkei> ?
12:16 < simenbrekken> I guess you could do that yes :)
12:17 < simenbrekken> I wouldn't worry about this kind of security before you have an actual scraping problem
12:17 < simenbrekken> and you could easily do this limiting in front of your app in something like ngnix
12:18 < emkei> I have huge tendency of overthinking, and also got a merit badge for http://en.wikipedia.org/wiki/Rubber_duck_debugging while trying to solve problems with some another project
12:18 < simenbrekken> emkei: http://wiki.nginx.org/HttpLimitReqModule
12:18 < emkei> :D
12:19 < simenbrekken> emkei: don't do that, make something that works and handle problems as they arrive or you'll just have nothing to worry about nothing :)
12:20 < emkei> simenbrekken: I think I just leave it alone for now? until the problem arises and then will try to cope with it when it's already there
12:20 < simenbrekken> yes.
12:21 < emkei> that's why you have logs and keep usage patterns
12:21 < simenbrekken> or just notice someone is stealing your shit and act accordingly ;)
12:21 < emkei> :)
12:22 < emkei> yup thanks for helping me out. I think this is the problem of solo programming, as you do not have second voice when you are stallinng at curently non existing problems :)
12:22 < Industrial> emkei: Rubber Duck Debugging :p
12:27 < emkei> Industrial: never heard about it before, I heard people solved hard problems while consulting with their baby kids :D
12:33 < simenbrekken> I feel most people getting into new tech create a whole load of imaginary worst-case scenario problems that probably never will happen
12:35 < _ior> realistic worst-case scenario for using node: the api changes again and deprecates key functionality of your server that's in production on customer sites, and their engineering team rigorously maintains software stack update schedules
12:36 < emkei> simenbrekken: I hope the worst case scenarios wont happen :) on the other hand if you somehow secure your api there is bunch of tools to do the same from html a little bit more overhead,
12:36 <@Nexxy> luckily enough you defined your package.json properly, so the app refuses to even start without a compatible node version
12:36 < _ior> ... package?
12:36 < _ior> :)
12:37 <@Nexxy> .json
12:37 < simenbrekken> npm shrinkwrap that shieeet
12:37 <@Nexxy> http://package.json.jit.su/
12:38 < _ior> well, though it was said tongue-in-cheek, i do appreciate that this channel is eager to contribute knowledge. that's very different from many other channels on this irc network
12:38 <@Nexxy> node is so different it even has a semi-helpful support channel!
12:38 < _ior> indeed!
12:39 <@Nexxy> I mean where else on freenode are you going to get free hugs
12:39 < _ior> certainly not in, uh, #mysql
12:40 < SomeoneWeird> lol'd
12:40 <@Nexxy> I hear a guy got kickbanned for typing 'lol' in #python once!
12:40 < SomeoneWeird> lol
12:40 < SomeoneWeird> >.>
12:40 < SomeoneWeird> <.<
12:41 < simenbrekken> I remember when I was young and had my first good cry in #linux
12:42 < SomeoneWeird> heh
12:42 < _ior> i remember when i was young and someone xdcc sent me coderz.irc
12:43 < medice> never been to #linux but i imagine it's not a friendly place
12:43 < _ior> pdp c supporter?
12:43 < _ior> there's a c compiler for a pdp11?
12:44 < SomeoneWeird> lol
12:57 < simenbrekken> Anyone here managed to get node.canvas >= 0.13 up and running on Heroku?
13:34 < msasdasd> sup? 
13:34 < SCHAPPI> not much
13:37 < jvanveen> hi
13:37 < jvanveen> is there an easy way to get the directory of a node package from code easily?
13:38 < SomeoneWeird> __dirname
13:38 < jvanveen> SomeoneWeird: isnt that only for the current executing script?
13:39 < SomeoneWeird> oh
13:39 < SomeoneWeird> hm, yeah
13:39 < SomeoneWeird> misread your question 
13:39 < SomeoneWeird> why do you need to get it?
13:40 < jvanveen> ehm, i want to make some media directories from multiple npm modules public with express
13:40 < jvanveen> im looping over an array of packages, and need to find out the absolute path of it
13:40 < Shinister> Is there a good example of a large application written in node, with unit tests?
13:41 < Shinister> I'm interested in how a large app would be engineered
13:41 < SomeoneWeird> have a look at express
13:41 < SomeoneWeird> not sure, sorry jvanveen 
13:42 < jvanveen> thanks, np :)
13:42 < PapaSierra_> i tried installing npm via chef on ubuntu. it failed. now i'm trying to remove it using: https://npmjs.org/doc/removing-npm.html but it says "npm WARN Not installed in /usr/local/lib/node_modules npm"
13:43 < bluntworks> just tested __dirname in a submodule its returning the directory of the module for me not the running process dir
13:43 < SomeoneWeird> that's what it's supposed todo
13:45 < bluntworks> yup, thought that was contradicted above --  isnt that only for the current executing script?
13:45 < SomeoneWeird> afaik
13:45 < SomeoneWeird> and I misread his question
13:47 < jvanveen> ill use __dirname to set the paths of the packages from the modules themselves
13:52 < jvanveen> still struggling a bit with setting up a good project structure for a cms
13:54 < clondon> I <3 Node.js :)
13:55 < SomeoneWeird> I don't suppose anyone has a working msgpack rpc client ?
13:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:05 < mansoor-s> clondon, give it time
14:08 < stafamus> hi. I've been playing with node/express in the last couple of days. To learn, I want to write a small app locally that pulls data through API of a web service provider.  Is there such an example anywhere?
14:13 < Industrial> meh, handlebars.js doesn't work with browserify :( I need it for Ember.JS ..
14:14 < medikoo> Industrial, it's handlebars fault, they're module that's hosted on npm, assumes only server-side usage and it's not useful if packed for client-side
14:15 < medikoo> Industrial: best is to go handlebars maintainers and open issue about that (or +1 already existing)
14:15 < Industrial> right
14:16 < Industrial> ( https://github.com/wycats/handlebars.js/issues/303 )
15:11 < skope> im trying to write to fifo file and it gives me this error http://pastie.org/5683190
15:11 < skope> chmodded file to 777 and still the same
15:17 < Sicp> I'm having problems with Socket IO
15:17 < bnoordhuis> skope: use fs.write instead of fs.writeFile, the latter uses positional writes
15:17 < Sicp> I keep getting this GET http://127.0.0.1:8080/socket.io/1/?t=1358176468429 404 (Not Found) when trying to run an HTML file that links to the socketIO.js fil
15:17 < Sicp> +e
15:17 < flexd> Hm, does anyone have any experience using node-soap as a client? Having some difficulty getting data out
15:17 < bnoordhuis> skope: oh, and use position=-1
15:17 < Sicp> I don't understand the solutions on SO
15:18 < Sanctumed> Sicp i am having the same error as you
15:18 < skope> bnoordhuis: thanks, i will try it
15:18 < Sicp> since when?
15:19 < Sanctumed> Since I am trying some code haha :p
15:19 < Sicp> yea yea but I mean how long have you been trying to fix it?
15:19 < Sanctumed> Few hours
15:19 < Sanctumed> :p
15:20 < Sicp> the thing is, I am following a tutorial that does exactly what I did, without even installing SocketIO module
15:20 < Sicp> or starting any SocketIO server
15:20 < Sanctumed> lol well in your case you probably need to start a socket server then
15:20 < Sanctumed> ;)
15:20 < Sicp> I have, that's the only case that I get that error
15:21 < Sicp> but he did it without any of the stuff I mentioned
15:21 < flexd> Socket.io normally serves out socket.io.js through express
15:21 < flexd> As far as I know
15:22 < Sicp> yea, seems like it
15:22 < Sicp> cause I have express and the server is running just fine
15:22 < Sanctumed> Not in my case, I have the socket.io.js file (and all other client files) just stored in my public_html/js/
15:23 < Sicp> socketIO will automatically add it for you when you do src="/socket.io/socket.io.js"
15:23 < Sicp> at the top
15:23 < Sanctumed> Nope cause I am using Apache, which makes nodejs server pretty much useless
15:24 < flexd> It will automatically serve it regardless :-)
15:24 < flexd> Sanctumed: You still need a socket.io server though
15:24 < Sanctumed> I know 
15:24 < flexd> It's not like the client lib will magically work without the server bit
15:24 < Sanctumed> And I am running the socket.io server
15:24 < Sanctumed> The server is not the problem
15:24 < Sanctumed> The client is the problem
15:28 < Sicp> WAIT A GOD DAMN MINUTE!
15:29 < Sicp> nevermnd
15:29 < Sanctumed> lol
15:31 < Sicp> I don't understand how he can do what he did without starting any server
15:31 < Sicp> he just started the server.js file (express server) and did NOT have any line like `var io = require('socket.io').listen(8000);`
15:31 < Sicp> nothing..
15:32 < Sicp> yet his HTML file had `var socket = io.connect('http://127.0.0.1:8080');`  and    `src="/socket.io/socket.io.js"`
15:37 < emkei> is there any mongoose users here, as official channel seems quite dead
15:37 < emkei> ?
15:40 < MI6> joyent/node: bnoordhuis created branch issue4586 - http://git.io/cvG-HQ
15:44 < randomblue> I am having issues installing packages on Windows with npm that require a "node-gyp rebuild". Please see example output error on this pastebin:http://pastebin.com/B3XTLBdh
16:05 < randomblue> I am having issues installing packages on Windows with npm that require a "node-gyp rebuild". Please see example output error on this pastebin:http://pastebin.com/B3XTLBdh
16:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:17 < skope> somehow i'm unable to open fifo file with fs.open. it doesn't give any error, just tries to open it
16:18 < MI6> joyent/node: Ben Noordhuis master * c3642aa : http: fix "Cannot call method 'emit' of null"  Fix the following exceptio - http://git.io/mYs5xw
16:19 < bnoordhuis> skope: is there anything reading from the other end of the fifo?
16:20 < skope> bnoordhuis: what do you mean by "from the other end"?
16:20 < captain> Hi everyone !
16:20 < bnoordhuis> skope: you know what a fifo is, right?
16:21 < skope> bnoordhuis: well, not really :p
16:21 < bnoordhuis> skope: heh, okay. it's a special file (file-like, really) that's a kind of file system pipe between two processes
16:21 < skope> i'm making an api for controlling mplayer and it needs fifo 
16:22 < bnoordhuis> when you try to open it for writing, there needs to be a process on the other end that reads from it
16:22 < skope> bnoordhuis: oh now i see. if i dont have mplayer running before i open it for writing, it doesnt respond
16:22 < bnoordhuis> exactly
16:22 < skope> thank you. now i got it
16:22 < bnoordhuis> skope: fun fact, i can tell by that you're not on a linux system
16:23 < bnoordhuis> because on linux opening the fifo _will_ work but it's kind of non-standard behavior
16:23 < skope> bnoordhuis: arch linux
16:23 < bnoordhuis> really?
16:23 < skope> yes
16:23 < bnoordhuis> hah, guess i learned something new today :)
16:24 < skope> or then im doing something horribly wrong
16:25 < urbann> hi all
16:25 < bnoordhuis> skope: just make sure mplayer is running or you'll run into issues on other platforms
16:25 < urbann> I have a multi domain rails app there each user can select there own theme.  Now I want my users to be able to change there theme and css files. 
16:25 < skope> bnoordhuis: okay
16:25 < urbann> As I see it the easiest approach should be to write directly to the template files and not deal with the overhead of loading the design elements from a database.   
16:25 < urbann>  My question is if this should be possible to accomplish with node I/O and if so is it some drawbacks doing this?
16:25 < skope> but then again, im trying to make that api available for omxplayer too, and it doesnt support fifo. maybe i have to echo to pts then
16:29 < MI6> joyent/node: Ben Noordhuis master * 2dbd5a3 : http: fix "Cannot call method 'emit' of null"  Fix the following exceptio - http://git.io/Al6WVA
16:31 < randomblue> I am having issues installing packages on Windows with npm that require a "node-gyp rebuild". Please see example output error on this pastebin:http://pastebin.com/B3XTLBdh
16:34 < MI6> joyent/node: Ben Noordhuis v0.8 * f3e78bd : http: fix "Cannot call method 'emit' of null"  Fix the following exceptio - http://git.io/x-X7jA
16:35 < MI6> joyent/node: Ben Noordhuis master * e4598aa : gitignore: ignore perf data files - http://git.io/VJPcAw
16:36 < superjoe> bnoordhuis, may I rudely snipe you for a question that I feel you are best qualified to answer? https://gist.github.com/4531314
16:37 < bnoordhuis> superjoe: yes, child_process.fork is the way to go
16:37 < bnoordhuis> superjoe: what do you mean with "However it looks like this is not how node.js API works." ?
16:38 < superjoe> bnoordhuis, because with the child process I need access to the same memory
16:38 < superjoe> I was hoping I would have copy-on-write access to the same memory
16:38 < tjfontaine> you can .send the object to the child?
16:39 < superjoe> so I'd have to serialize 30MB of data?
16:41 < bnoordhuis> superjoe: yes. threads wouldn't have helped you here, you can't move objects from one vm to another
16:41 < superjoe> ok thanks for the help
16:42 < superjoe> the best solution I can think of is that the child process will query the parent process for the data it needs
16:42 < tjfontaine> I suppose you could work up a small addon that does a shared memory, but that way is fraught with other errors
16:42 < superjoe> slow, but better than blocking the event loop
16:42 < superjoe> agreed
16:45 < trevnorris> bnoordhuis: fyi: I filed two v8 bugs about isolates and now it looks like isolate arguments will become explicit: http://code.google.com/p/v8/issues/detail?id=2487
16:46 < guor> yup. due to performance considerations v8 is moving to a new API that requires explicit isolate arguments
16:46 < guor> the old API will become deprecated
16:46 < bnoordhuis> trevnorris: ah, good
16:47 < trevnorris> guor: yeah, they said it will be removed probably by 3.17
16:48 < guor> there are also on-going works on moving from ascii/utf16 strings to latin1/utf16 strings
16:48 < guor> so some parts of the API will change with that regard as well
17:33 < MI6> joyent/node: Fedor Indutny master * 4dd70bb : tls: allow wildcards in common name  see #4592 - http://git.io/P6ytEQ
17:34 < MI6> joyent/node: Fedor Indutny v0.8 * 45024e7 : tls: allow wildcards in common name  see #4592 - http://git.io/dKZApQ
17:36 < owen1> i have an http call that return a big json file. it's slow at the http call and in the parsing phase, so JSONStream is not very helpful. is my only option is change the server that return that api and make sure it streams this json instead of sending it back in 1 chunk?
17:36 < owen1> and in = and not in
17:37 < owen1> (the http call takes 20 seconds. the pharsing takes 1 sec)
17:38 < TheUser> Hi guys, maybe sm1 here could help me with my lil prob http://stackoverflow.com/questions/14323247/running-node-js-server-on-linux-centos
17:47 < owen1> TheUser: is there a reason u'r using apache?
17:48 < TheUser> it comes with vps, probably a just a standard package
17:48 < TheUser> but no I don't need it
17:48 < owen1> just use node without anything.
17:48 < TheUser> shouldn't I do some extra configurations ?
17:49 < owen1> no
17:49 < TheUser> alright thx gonna try that later
17:49 < owen1> TheUser: np
18:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:07 < perlitch> i just installed the "n" npm package and ran `sudo n latest` to update node on my machine and it took about 5 minutes and outputted around 2000 lines. is this normal?
18:13 < klaemo> perlitch: yes, afaik it compiles node from source. that's the output from the compiler
18:14 < jamescarr> any idea why an npm install would start failing all in the sudden? https://gist.github.com/4531992
18:14 < perlitch> klaemo: ok thanks for that
18:15 < thomasreggi> Anyone have any idea why this wont work? https://gist.github.com/4532024
18:15 < jamescarr> Pelase if anyone knows, let me know what is up… this is for an app we have deployed to production for ages
18:15 < jamescarr> and I need to get this out
18:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:17 < Sicp> http://i.ole.im/gprtl1 , line 7, content.toString() etc...
18:17 < Sicp> it isn't replacing the text I have in the <ul></ul> in the HTML file I'm working on 
18:18 < Sicp> line 9 works just fine, I can see the ul and its contents and it is valid and it is what I want to be replacing...but it just won't replace
18:24 < klaemo> Sicp: is the output of content.toString("utf8") correct?
18:25 < Sicp> yes it is, I just logged it
18:27 < Sicp> and "ul" is also correct content
18:27 < Sicp> it was a tweet
18:27 < Sicp> I try replacing with "asdasda" but still nothing
18:28 < Sicp> I should be using jQuery for this
18:29 < klaemo> Sicp: try passing the encoding to fs.readFileSync, so you'll get back a string
18:29 < klaemo> you shouldn't be using the sync version of readfile anyway, btw
18:30 < Sicp> it's a tutorial that I'm following, but I still don't see any harm in that in this case
18:30 < Sicp> there *are* cases when you want synchronous
18:30 < klaemo> Sicp: not in that case, though
18:30 < Sicp> why? you've only got 1 paragraph of the code, you don't know what I'm trying to do
18:30 < Sicp> you don't know me!
18:30 < EhevuTov> anyone know if there will be paleo options at the Nodeconf this year?
18:30 < Sicp> lol
18:31 < ruff> synchronous code? lol go back 2 php bro
18:31 < klaemo> haha :D well, but it'll block the entire server on every request to "/" for the time it takes to read the file
18:31 < Sicp> this is how I passed the encoding to readFileSync, "var content = fs.readFileSync("template.html", "utf8");"
18:31 < Sicp> and below I just did content.replace("{{INITIAL_TWEETS}}", "text");
18:31 < klaemo> Sicp: yep, now try content.replace(foo, bar)
18:32 < Sicp> nothing
18:32 < Sicp> won't even replace with the word "text"
18:32 < Sicp> this is either baffling or extremely stupid
18:32 < Sicp> I am betting on the latter
18:32 < klaemo> maybe just a typo?
18:33 < Sicp> nice, I just changed the HTML file and I don't see its reflection on the server
18:33 < Sicp> :)
18:33 < Sicp> still loads what I had previously
18:33 < klaemo> did you restart the server in between changes?
18:34 < Sicp> it's on node-dev
18:34 < Sicp> but I just did now, and still no reflection of what I've changed
18:34 < Sicp> one second
18:34 < Sicp> well now it shows, but still doesn't replace
18:35 < Sicp> here's all of the code for the server, http://i.ole.im/fyoecl
18:36 < klaemo> oh, that is bad node code :(
18:36 < Sicp> well I am a beginner
18:37 < klaemo> Sicp: sorry, didn't wanna diss you. i was assuming you took this from a tutorial and it would be bad if someone taught node like that
18:37 < Sicp> yep
18:37 < Sicp> right from the tutorial, but still, didn't try to fix anything
18:37 < Sicp> because I'm a beginner
18:37 < Sicp> that's what I meant
18:38 < Sicp> but I do sense that he is doing it wrong
18:39 < klaemo> so, just some basics again: you're sure content gets the right file? and after every change to your server code you restart it?
18:39 < Sicp> yes, I am seeing content's content
18:40 < Sicp> and I am seeing the ul element, the one I fill up and finally pass to replace()
18:40 < Sicp> both correct
18:43 < klaemo> Sicp: just for the heck of it, try this http://pastebin.com/vr9zYf7B
18:44 < Sicp> I wanted to try async but didn't
18:44 < Sicp> ok I will try now
18:46 < Sicp> same
18:46 < Sicp> motherfucker, what are happon
18:48 < klaemo> well, the code seems to be correct. the error has to be somewhere else
18:50 < klaemo> and getTweets() should be more like this, to stick to node's conventions: http://pastebin.com/W50N0kCr deal with errors in your route handler function
18:50 < Sicp> why do I have to do "return" 
18:50 < Sicp> just, callback(error)
18:51 < klaemo> updated: http://pastebin.com/Mq9hcSxZ
18:51 < klaemo> that saves from an else {} block. less indentation
18:51 < Sicp> right
18:51 < Sicp> right
18:56 < Sicp> do you think it has something to do with something loading before something?
18:58 < klaemo> doesn't look like it to me
18:59 < klaemo> i bet it's some really, really stupid thing :D
18:59 < Sicp> of course
19:00 < Sicp> I can smell those
19:21 < shadej> hello
19:29 < samholmes> How do I install chained certs? I'm using bouncy as a proxy to my servers.
19:30 < C0deMaver1ck> does anyone else see this as a problem?
19:30 < C0deMaver1ck> [1, 2, 3, 11, 22].sort();
19:31 < C0deMaver1ck> [ 1, 11, 2, 22, 3 ]
19:32 < semarjt> just setting up a small WS app, chrome dev tools shows my {"name":"news","args":[{"hello":"world"}]} (from the socket.io docs) in the "Websocket Frames" tab, but the `socket.on('news', function(data){console.log(data)}) never fires
19:34 < CoverSlide> C0deMaver1ck: just fyi: .sort(function(a,b){return a-b}) is what you want
19:34 < CoverSlide> C0deMaver1ck: brush up on your javascript
19:35 < C0deMaver1ck> CoverSlide: I already knew how to do that. I just thought Node.js should be able to see that they're all integers.
19:35 < tjfontaine> itym v8
19:35 < CoverSlide> Node.js is JavaScript
19:36 < erineh_> If compareFunction is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic ("dictionary" or "telephone book," not numerical) order.
19:36 < erineh_> -- mdn
19:36 < CoverSlide> .sort works the same on node is on JavaScript
19:36 < CoverSlide> why would it be any different?
19:37 < livinded> guess I missed first round of nodeconf tickets
19:39 < lemonodor> if you want to laugh/cry at some other javascript oddities: http://www.youtube.com/watch?v=kXEgk1Hdze0#t=1m20s
19:40 < C0deMaver1ck> lol, I've watched that video at least 5 times
19:41 < trevnorris> isaacs: have your Doxyfile laying around? been playing with this for a while and cant get a few key things looking right.
19:42 < jamesBond007-act> hi guys
19:43 < jamesBond007-act> is there a resource I can use to get ready for a node.js position technical interview?
19:45 < superjoe> I want to use __nodeValue on a node in jsdom. but I see that it has the double underscores of shame. what am I supposed to do to get the node value?
19:46 < superjoe> ah, data.
19:53 < klaemo> lemonodor: that video is legendary :D
19:59 < Virunga> Is the author of the irc packaged here?
20:00 < segomos> who is the irc packaged author
20:00 < CoverSlide> martynsmith
20:01 < Virunga> That's his nick?
20:02 < CoverSlide> that's his github handle
20:02 < CoverSlide> so far i can't see anyone by that nick on freenode
20:03 < Virunga> I tried to change the connection encoding from utf8 to utf16le but the bot isn't connecting any more
20:04 < CoverSlide> yeah that's probably an issue. does anyone actually use utf16?
20:05 < ckknight> Hmm, I'm trying to save a "settings" file for the current user, so I'd like to stick it somewhere like ~/.some-path/blah, but have it be cross-compatible. Any thoughts on where to start for determining such a path in a cross-compat manner?
20:05 < CoverSlide> well process.env.HOME for unix
20:05 < CoverSlide> %USERPROFILE% is windows
20:05 < Virunga> I wouldn't know. I did it because some people don't use utf8 but iso-8859-1, and the bot doesn't reed the accent letters
20:06 < CoverSlide> i don't know if that means process.env.USERPROFILE
20:07 < ckknight> CoverSlide: and then for Mac it'd be something like ~/Library/Application Support/
20:07 < ckknight> but I don't want to have to write in if statements for each
20:07 < CoverSlide> o really?
20:07 < ckknight> generally, yes.
20:08 < ckknight> that seems like it's not future-proof at all
20:08 < ckknight> what if one of them were to change the path in the next OS or something?
20:08  * ckknight shudders
20:08 < CoverSlide> well if you're gonna put it behind a dot-file
20:08 < CoverSlide> you might as well go the standard unix route
20:08 < ckknight> I'm surprised something like this isn't in fs
20:08 < CoverSlide> i mean if it's a node app, most likely it's a commandline, right
20:08 < samholmes> Is substack around, this is am emergency!
20:09 < samholmes> I need help with bouncy
20:09 < ckknight> CoverSlide: really, I just need to stick it somewhere that the user has access to that isn't going to change (like tmp files) or be fiddled with (generally)
20:09 < CoverSlide> samholmes: it probably doesn't support it, probably read up on tls/SNI
20:09 < ckknight> CoverSlide: it's command-line or to be used as a library
20:10 < Felix_> Hi all.
20:10 < CoverSlide> Felix_: hi you
20:10 < Felix_> somebody known how-to in express detect call of function ".end" - connection close ?
20:11 < samholmes> CoverSlide: The support guy I talk to said, I could concatenate the chained cert with the other cert file I have and use that. But, the issue I'm also having is that my selfsigned certificate that I'm using to initiate bouncy() is being used instead of the certificate I purchased from a cert authority.
20:11 < CoverSlide> Felix_: maybe try if(res.writable)
20:11 < mehwork> is there a good reason to use express if you're already using backbone on the front end? iow, can you just use backbone on the back end as well for rest stuff?
20:12 < Felix_> CoverSlide: thx, Im try now
20:12 < CoverSlide> mehwork: express has nothing to do with backbone, they serve 2 separate purposes
20:13 < CoverSlide> mehwork: you can use both or one or none, whatever you feel more comfortable with
20:13 < mehwork> CoverSlide: right but i'm trying to understand what reasons one would have for using both 
20:15 < Felix_> Im find a property finished.
20:15 < CoverSlide> express you can use for defining routes easily and do other web frameworky stuff like sessions, cookies, other things
20:16 < mehwork> backbone does routes and persistency handling too though
20:16 < mehwork> so i maybe i don't need it
20:16 < CoverSlide> not sure if it does it on the backend though
20:18 < CoverSlide> been looking on google for node backbone routing
20:18 < CoverSlide> most examples use express for the backend
20:19 < addisonj> anyone having trouble with nodeconf tickets? I got in the queue, saw tickets unlocked, but haven't seen any emails... :\
20:25 < samholmes> CoverSlide: Don't I need to provide a passphrase for the crypto.createCredentials function? I believe I missed that.
20:27 <@mbalho> isaacs: wanna eat tacos
20:29 < ckknight> I wanna eat tacos
20:30 < samholmes> substack: Yo, what's the selfsigned certificate for provided to bouncy({key:.., cert:..})?
20:30 < samholmes> It looks like this certificate and key is used over the one I provided to the SNICallback
20:30 < jack150> I'm experimenting with the ws package (https://github.com/einaros/ws) There is a "server example" on the frontpage and I can't get a connected clients IP (ws.remoteAddress returns undefined) 
20:31 < jack150> wss.on('connection', function(ws) { console.log(ws.remoteAddress) });
20:33 <@mbalho> jack150: is it supposed to be there?
20:35 < jack150> mbalho: honestly, I have no clue, I still find the docs a bit confusing, I had a look at the sockets api of node.js
20:35 < CoverSlide> mbalho: i think he said we was at yoga
20:36 < CoverSlide> damn hippies and their yoga
20:36 < ajoslin103> I'm sure a biiiiiiiiiiillion people ask this, but I'm trying to convince management & can't find it anywhere else -- does anyone know when Node.js is expected to reach 1.0 /
20:36 < CoverSlide> ajoslin103: i think the goal is this week
20:36 < ckknight> I'm surprised its not 1.0 already
20:36 < ckknight> it's felt like a 1.0 for a while
20:36 < CoverSlide> ajoslin103: oh 1.0?
20:36 < CoverSlide> i though i read 0.10.0
20:37 < CoverSlide> 1.0 is just  a number
20:37 < ckknight> yeah, but it's a helpful marketing number
20:37 < CoverSlide> if your management is stuck on a number
20:37 < CoverSlide> then get a new job
20:37 < CoverSlide> srsly
20:37 < ajoslin103> yes, I saw from the blog that 0.10.0 is expected soon 
20:37 < ajoslin103> took me a long time to find this on
20:37 < CoverSlide> just do a fork
20:37 < CoverSlide> call it node.ecmascript
20:37 < CoverSlide> and release it as 1.0
20:38 < ajoslin103> one cannot convince someone who will not open their eyes
20:38 < ajoslin103> but ok, I get it -- no one really knows
20:38 < ajoslin103> I was afraid that was the case
20:38 < ajoslin103> thanks
20:39 < ckknight> ajoslin103: yeah, you totally got the wrong message from that
20:39 < mehwork> What are the benefits of using node to make your own little web server - rather than using an existing lighthttpd type server?
20:40 < CoverSlide> well node is more for just web, it's great for networking stuff
20:40 < CoverSlide> and binding all that networking stuff up with your websever is pretty easy if you're using node all the way down
20:40 < niggler> mehwork for a static site there are a billion different solutions
20:40 < mehwork> CoverSlide: I assume you meant more than just for web
20:41 < niggler> i like python -msimplehttpserver
20:41 < CoverSlide> yes, but you have to hook it up to a database, right, probably some other services
20:41 < mehwork> niggler: true, just wondering if node has any advantages there
20:41 < CoverSlide> well for a static site, no, node isn't the best options
20:42 < mehwork> i also feel racist addressing your nickname :(
20:42 < niggler> no advantage
20:42 < ajoslin103> well I understand the frustration that anyone might have trying to convince management - but we are starting a whole new architecture after being stuck with the same old apache-java-oracle for the last 12 years.  I'm pushing for Nginx, Node.js, Mongoose, & MongoDB -- but management is convinced that I'm too bleeding edge.  I may sell them on Mongo & Nginx -- but would love some more ammo other than "everyone's doing it" (even t
20:42 < CoverSlide> but if your site for example has websockets
20:42 < niggler> how about going into the requirements a bit
20:42 < mehwork> ajoslin103: tell them it's not bleeding edge -- it's current
20:43 < mehwork> and that they're too dinosaur
20:43 < CoverSlide> writing for websockets in node is much easier than in most other languages
20:43 < mehwork> CoverSlide: i see
20:43 < niggler> to be fair for a simple site there's nothing wrong with php
20:43 < CoverSlide> mehwork: and if you like the language, and it is great to use once you really know it, not just wrote a few things in jquery with it
20:43 < ajoslin103> all of the arguments that makes sense to anyone whose interested in it are not the arguments I need 
20:44 < CoverSlide> ajoslin103: the best way to convince management to use it is to write something nontrivial in it
20:44 < CoverSlide> like write some internal app
20:45 < CoverSlide> s/nontrivial/trivial
20:45 < ajoslin103> we ave new management who just doesn't work that way
20:45 < CoverSlide> then write it in your spare time
20:45 < mehwork> the best way to convince management is to quit and go work for a competing company that uses those things
20:45 < mehwork> mangement never listens
20:45 < mehwork> at least not at large companies
20:46 < CoverSlide> get a list of companies, high-profile companies, that use it
20:46 < CoverSlide> for example, linkedin uses it for their mobile app
20:47 < niggler> ajoslin103 either the problem is trivial, and you might as well just use php or whatever makes sense
20:47 < mehwork> never be a 'yes' man. If they're doing something wrong it's youre responsiblity to right it. Even the president of the usa has advisors
20:47 < niggler> or its nontrivial, in which case you need to give more info to make an informed decision
20:47 < mehwork> php never makes sense
20:47 < mehwork> unless your employees only know php and you dont have time to train them
20:48 < lohkey> php isn't that bad for stuff you just want to get done and never care about again
20:48 < mehwork> php hasn't made sense in over 4 or 5 years
20:48 < mehwork> php isn't bad for stuff you never cared about in the first place
20:48 < CoverSlide> unfortunately, php has dominated the market for the past 4 or 5 years
20:48 < mehwork> CoverSlide: only because of its momentum from the previous years
20:48 < mehwork> not because it still makes sense. Same goes for java
20:49 < mehwork> no use perpetuating it
20:49 < ajoslin103> thanks, I've already created a presentation that convinces everyone but the one guy who matters
20:49 < niggler> php makes perfect sense
20:49 < niggler> its a small language, there's a ton of market competency
20:49 < ajoslin103> so I just will not give in and he can _order_ me to use something ese
20:49 < niggler> and hosting is easy
20:49 < ajoslin103> but I won't agree that it's better
20:49 < CoverSlide> it makes sense for management
20:49 < niggler> ajoslin103 can you give more details
20:49 < ajoslin103> I've used nearly all the alternatives of the years
20:49 < CoverSlide> not for engineers
20:49 < niggler> on what exactly you are doing
20:50 < mehwork> doing php properly requires real engineers and if you have real engineers they are competent enough to use something smarter
20:50 < mehwork> thus it doesn't make sense
20:50 < mehwork> unless you have some hackety website that you couldn't care less about the quality of and even then you'll want it to be maintainable
20:51 < mehwork> that's all i wanna say about that though. Back to node
20:51 < CoverSlide> yay node!
20:52 < ajoslin103> niggler - sorry but that doesn't matter.   we are rebuilding our flagship product, it's monolithic and unwieldy (pre-web 2.0 -- no ajax) and serves about a gigabit/sec 24x7 -- I want rebuild it as a collection of services that can can be used from a modern web front end that will be release as a suite of products.  
20:54 < CoverSlide> my advice
20:54 < ajoslin103> let alone across multiple data centers with no single points of failure (80% of the current product is a SPO)
20:54 < CoverSlide> get a new job
20:54 < mehwork> ajoslin103: why not just branch and make a prototype in you spare time. Then show it to them and tell them how much more money it could make them
20:54 < niggler> node isn't the right tool for that
20:54 < mehwork> ajoslin103: the last thing you want is to convince them and then go start doing it and realize it was a bad idea 
20:55 < ajoslin103> I disagree, I think that the product can be reborn as a suite of 
20:55 < mehwork> that happens more often than you think because everything sounds ideal until you start doing it and running into obstacles
20:55 < justinfr> that's right, node is a square peg
20:56 < mehwork> people shouldn't listen to other people about this, nor even listen to yourself (youre a person). Instead, listen to the implementation, which means making prototypes
20:56 < ajoslin103> I don't see why I can't build something large with it as long as I keep to a services based model and avoid blocking io
20:56 < mehwork> if i listened to people only, instead of prototypes jsperf, etc, i'd have one broken piece of crap 
20:57 < ajoslin103> anyway, my current plan is to focus instead on getting Nginx & MongoDB approved -- then I
20:57 < niggler> justinfr its foolish to suggest that node is a panacea
20:57 < mehwork> new doesn't always mean better: just look at windows8 
20:57 < ajoslin103> will have everything I need to skunkworks in a smaple
20:58 < ajoslin103> sample/protoype
20:58 < mehwork> you don't wanna be as stubborn and wrong as they are do you
20:59 < ajoslin103> I don't think it's better because it's new -- I believe it's better based on 30+ years of writing code
20:59 < mehwork> ajoslin103: have you written something similar or made a prototype yet
20:59 < ajoslin103> thanks for the opinions - I'll be back at some point when I have how-do-I-do-it questions :)
21:00 < mehwork> ajoslin103: if that was your reasoning you'd use twisted python which is more mature and imo more robust
21:01 < mehwork> the problem is both old management AND the new guy are wrong
21:01 < mehwork> oh well
21:02 < mehwork> can't convince people who think that 'years of experience' means much
21:02 < mehwork> i know lots of people with 10+ years of doing things incorrectly
21:03 < mehwork> just look at all the long time programmers who still don't use TDD and other best practices
21:03 < mehwork> they're the majority
21:04 < CoverSlide> well TDD is debatable
21:06 < rwaldron> Are there any Debian users around?
21:07 < tjfontaine> it's easier to ask than it is to ask to ask
21:07 < mehwork> tdd is debatable like evolution is debatable
21:07 < mehwork> you can try but you'll only sound stupid
21:07 < rwaldron> hahaha
21:08 < mehwork> i havent' used debian since woody but i use ubuntu everyday
21:10 < exit2> socket.io is that jam
21:12 < mehwork> seedless fresh jam
21:14 < qballer> Hey Guys, Does node have a mentoring program?
21:14 < mehwork> stackexchange should create a mentoring program
21:15 < mehwork> they can call it big-brogrammers
21:16 < qballer> lol
21:16 < qballer> It's more like, I want to start to submit patches. I wonder which doc\stuff should i read\do firts?
21:16 < qballer> first*
21:17 < foxjazz> hi
21:18 < foxjazz> I am new to node, and seem to be having an issue. I can npm install stuff, however when running node.js and putting in the require, it doesn't find the installed packages
21:20 < superjoe> is there a node module that, given an href, attempts to download it for you?
21:20 < superjoe> it should recognize, for example, http: https: file: ftp:
21:21 < chilts> superagent?
21:21 < superjoe> superagent supports file:// ?
21:21 < chilts> not sure if it does ftp though
21:21 < Virunga> foxjazz: have the file you're running and the location where you have installed packages a common ancestor ? Are the packages globally installed?
21:21 < chilts> ah, or file :)
21:21 < superjoe> file: is the important one
21:22 < chilts> just convert it to a file path and open the file :D
21:22 < MI6> joyent/node: Bert Belder master * e501ce4 : buffer: zero-length buffers shouldn't be slab-backed - http://git.io/zYZf3Q
21:22 < superjoe> chilts, I understand the "just make it work" option. I like to first try for "find an elegant way to make it work"
21:23 < MI6> joyent/node: Bert Belder v0.8 * a6b8f63 : buffer: zero-length buffers shouldn't be slab-backed - http://git.io/Sn3LDQ
21:26 < foxjazz> Virunga: not sure what you mean. I just went to the site, installed node. Ran the node cmd line icon to install packages. ran the node.js to run node
21:29 < Virunga> foxjazz: read the doc about how require works http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders
21:35 < foxjazz> var irc = require("irc"); ror: Cannot find module 'irc'   at Function.Module._resolveFilename (module.js:338:15   at Function.Module._load (module.js:280:25)   at Module.require (module.js:362:17)   at require (module.js:378:17)   at repl:1:11   at REPLServer.self.eval (repl.js:109:21)   at rli.on.self.bufferedCmd (repl.js:258:20)   at REPLServer.self.eval (repl.js:116:5)   at Interface.<anonymous> (repl.js:248:12)   at Interface.E
21:35 < skope> foxjazz: npm install irc
21:35 < foxjazz> skope: did that
21:36 < skope> in the same directory where your files are?
21:37 < chapel> foxjazz: make sure you have a node_modules folder in the base directory of your project
21:37 < skope> and in there should be folder named irc
21:37 < chapel> that and there isn't one above it if there isn't
21:37 < skope> if not, something is wrong
21:37 < chapel> skope: it could be a module folder higher up that is being installed into
21:37 < skope> chapel: might be 
21:38 < chapel> Ive had it happen before, without knowing whats going on, can be frustrating
21:44 < foxjazz> thanks for the help. so I am running things from d:\node however the packages get installed and I see them in the folder
21:45 < foxjazz> however I can't seem to get the node.js to run from that location
21:45 < skope> no idea about windows 
21:47 < CoverSlide> noone knows about windows
21:48 < chapel> I know nothing about running node in windows lol
21:49 < Sicp> I will just say "Fuck Windows in this case"
21:49 < Sicp> all the "I don't know"s are taken
21:49 < skope> remove "in this case" for that sentence
21:50 < skope> from
21:50 < Sicp> I will just say "Fuck Windows"
21:50 < CoverSlide> foxjazz: is D:\Node in your %PATH%?
22:02 < mehwork> is it normal for npm install to require sudo access? Is there a way to get it to install dependencies locally in my home dir rvm style?
22:02 < CoverSlide> mehwork: echo prefix=$HOME >> ~?.npmrc
22:02 < CoverSlide> oops
22:02 < CoverSlide> mehwork: echo prefix=$HOME >> ~/.npmrc
22:02 < CoverSlide> that's what I use
22:03 < CoverSlide> there's also nvm or nave which do that I think
22:03 < chilts> and 'n'
22:04 < CoverSlide> although they don't do the whole gemsets thing which with node isn't necessary since libraries are all local
22:04 < CoverSlide> Yeah I tried n, didn't like it. maybe it's better now
22:06 < mehwork> thanks
22:07 <@konobi> mbalho: cinder baby
22:07 <@mbalho> konobi: wat
22:08 <@konobi> mbalho: heh, trying to see if folks have played with libcinder
22:08 <@mbalho> i have not
22:08 <@mbalho> though it looks cool
22:08 < CoverSlide> is it like boost, but less suck?
22:11 <@konobi> it's for visualizations
22:12 < CoverSlide> "Cinder is free, open-source and available for Mac OS X, iOS and Windows."
22:12 < CoverSlide> do they not support linux?
22:13 < CoverSlide> oh wow, it really looks like they don't
22:13 < CoverSlide> not even a Makefile
22:13 < CoverSlide> ok fuck them
22:13 < CoverSlide> interest dropped to 0
22:14 < mehwork> lame
22:17 <@konobi> there's linux branch out there
22:20 < CoverSlide> google gives me this: https://github.com/arturoc/Cinder ... 3 years old
22:20 <@konobi> https://github.com/gaborpapp/Cinder
22:20 < CoverSlide> oh alright
22:23 < Ziggy`> Anyone had the issue with RequireJS (r.js in npm), that when you run it it opens up the r.js file in your text editor ?
22:23 < Ziggy`> I'm on Windows 7
22:24 < CoverSlide> ... ? wha ... ?
22:24 < CoverSlide> i dont even ...
22:25 < Ziggy`> You don't get the question, or what is it that you don't get?
22:25 < CoverSlide> well you're lucky it doesn't try to run it in Windows Script Host
22:25 < Ziggy`> I don't think you are aware of what r.js is.
22:26 < Ziggy`> I'm assuming you haven't used requirejs
22:26 <@konobi> i know what it is
22:26 <@konobi> seems like you've got .js mapped to be opended by a text editor
22:27 < Ziggy`> Yep, that's what it is, of course. But how would I go about unmapping that specific file?
22:27 < CoverSlide> bizarre that npm would try to open the file
22:27 < squeakytoy> okay, i seems stupid that i have to write: var MIME = require( "./../util/MIME.js" ); <-- with ./../ depending where I am. What options do I have, so I dont need to fiddle with correct path depending on where my modudle is? Or is this a good practice?
22:27 < CoverSlide> maybe there's some postinstall script thing
22:27 < CoverSlide> but I don't see why it would need to
22:28 <@konobi> CoverSlide: that's not what he said (though it's unclear)
22:28 <@konobi> Ziggy`: run it with node `node r.js ...`
22:28 < Ziggy`> @konobi: "Cannot find module .... "
22:28 < CoverSlide> oh yeah
22:30 <@konobi> Ziggy`: did you `npm install -g requirejs` ?
22:31 < Ziggy`> @konobi: Yep, it exists in the folder it says it doesn't find the module.
22:31 < Ziggy`> When I run r.js.cmd it works.
22:31 < Ziggy`> But I'd like to be able to run simply r.js
22:31 <@konobi> well, there you go
22:32 < Ziggy`> But I guess it doesn't really matter, I guess I can stick with r.js.cmd instead of r.js
22:32 < CoverSlide> yeah I've had trouble with npm global modules in windows, usually the fix has been to run the .cmd version
22:32 <@konobi> or alias it somehow
22:32 <@konobi> windows and commandline stuff is always a pain
22:44 < squeakytoy> mm all
22:46 < Sicp> for whoever was having the SocketIO reference not found error, you need to have the src set to 127.0.0.1:<port you set IO to listen to>
22:46 < Sicp> var socket = io.connect('http://127.0.0.1:<that same port>');
22:47 < Sicp> ^ for when you want to use it
22:51 < __yh> i was reading airbnb  js guide on github
22:51 < __yh> it says don't use a = { class: 'blah', array: '..' }
22:51 < __yh> they're keywords, class makes sense, but array isn't a keyword?
22:52 < Sicp> why're you reading that anyways?
22:52 < __yh> i was just browsing
22:52 < Sicp> cool
22:58 < __yh> i dont like where javascript is heading with purposed harmony changes
23:11 < jwm> anyone else have problems figuring out good directory layouts for their projects
23:11 < jwm> heh
23:11 < __yh> no not really
23:12 < jwm> I've got mongo express wondering where to put that
23:12 < jwm> if I should put it outside the tree or in my project tree
23:13 < jwm> I guess I'm just a noob
23:13 < jwm> always a noob 
23:13 < __yh> whats mongo express? mongoose?
23:13 < jwm> no its like smog
23:13 < jwm> db frontend for mongo done in express
23:13 < jwm> lot more stable than smog
23:14 < jwm> smog crashes if I use it twice
23:15 < jwm> on windoughs of course
23:15 < __yh> oh so its a webui to mongodb
23:15 < jwm> yeah
23:15 < __yh> i mean idk, does it really matter where you put it?
23:15 < jwm> nah not really
23:16 < __yh> if it's important to your project, include it
23:16 < jwm> well I've already got stuff so splattered everywhere
23:16 < jwm> I put it in a top level directory 
23:16 < jwm> under my main project
23:16 < jwm> instead of under the web directory in the main project
23:17 < jwm> made its own web project since it is its own app
23:17 < jwm> I've always had problems getting projects done so I am trying anything I can to get this one done
23:17 < jwm> I bought the cool admin interface on wrapbootstrap.com
23:18 < jwm> I need to build my own mongo express type thing 
23:19 < jwm> unicorn admin
23:24 < __yh> who else can't wait for node.jar
23:24 < jwm> node.jar?
23:24 < C0deMaver1ck> hmm V8 ported to the JVM
23:24 < livinded> __yh: um, isn't that called rhino?
23:24 < C0deMaver1ck> ^
23:24 < jwm> heh
23:24 < jwm> ew
23:25 < __yh> rhino is old and sucks
23:25 < livinded> so is/does the jvm
23:25 < Daegalus> I think it might be Project Nashorn
23:25 < C0deMaver1ck> I like JRuby alot, but it's not something I would want to make
23:25 < livinded> what's the benefit of porting to the jvm?
23:26 < C0deMaver1ck> I would say the obvious one is threading
23:26 < ckknight> what's wrong with V8's runtime?
23:26 < livinded> seriously doubt it's going to be any faster than compiling to bative
23:26 < __yh> more opportunity, enterprise, java libs
23:26 < jwm> enterprise geek speak
23:26 < Daegalus> probably threading and access to Java libraries
23:26 < ckknight> C0deMaver1ck: Javascript is single-threaded. If you want more threads, use processes.
23:26 < jwm> OMGOSH ITS ENTERPRISE READY
23:26 < livinded> C0deMaver1ck: you can't introduce threads into it
23:26 < jwm> heh
23:26 < torvalamo> more room for less clean code
23:26 < torvalamo> = enterprise
23:26 < C0deMaver1ck> livinded: ckknight I didn't say it would be good or work XD
23:26 < ckknight> Javascript will never have threads
23:26 < jwm> more processes
23:26 < jwm> workers
23:26 < torvalamo> more classes!
23:27 < livinded> v8 compiles to native x86
23:27 < torvalamo> more files!
23:27 < Daegalus> https://blogs.oracle.com/nashorn/
23:27 < torvalamo> more bugs!
23:27 < __yh> yea threads, and java runs in way more placessss than building node on some arch
23:27 < livinded> the jvm likely wont be any faster
23:27 < jwm> if it is I'll use it
23:27 < __yh> i bet it'll be close if jruby is any indication
23:27 < jwm> it will use 10x more memory
23:27 < C0deMaver1ck> JRuby is considerably faster than MRI/C Ruby
23:27 < jwm> for sure
23:27 < C0deMaver1ck> so for speculation's sake, I'd say faster
23:28 < C0deMaver1ck> but who knows
23:28 < livinded> ya, but MRI doesn't compile to native instructions
23:28 < livinded> it uses an intermediary
23:28 < jwm> are there any good project planner softwares written in node?
23:29 < C0deMaver1ck> V8 compiles JavaScript to native instructions before execution?
23:29 < C0deMaver1ck> like bytecode?
23:29 < blazes816> and jruby is only faster than mri after about 10k hits to a  codepath
23:29 < livinded> C0deMaver1ck: no, like machine code from what I understand
23:29 < C0deMaver1ck> interesting
23:29 < C0deMaver1ck> blazes816: recursion is faster in JRuby
23:29 < livinded> maybe I'm wrong but I was under the impression that v8 didn't compiler to an intermediary byte code
23:30 < jwm> scrumblr
23:30 < livinded> C0deMaver1ck: does mri use tail end recursion?
23:30 < Daegalus> http://en.wikipedia.org/wiki/V8_(JavaScript_engine) wikipedia says amchine code
23:30 < __yh> yea but whocares about speed, threads, java libs, java runs everywhere
23:30 < MI6> joyent/node: isaacs master * 27fafd4 : stream: Do not call endReadable on a non-empty stream  Say that a stream' - http://git.io/n21QAw
23:30 < livinded> the jvm does
23:30 < blazes816> livinded: you have to enable it manually
23:31 < C0deMaver1ck> somebody needs to get headius in here :P
23:31 < livinded> Daegalus: thanks for the link
23:31 < __yh> i mean writing gui apps with swing or whatever using javascript, c'mon
23:31 < C0deMaver1ck> __yh: sounds like hell
23:31 < __yh> it's better than what you have now, which is nothing
23:31 < Daegalus> Imagine all the people that will combo lwjgl with javascript to make games on the JVM
23:31 < C0deMaver1ck> I've written swing apps in Ruby and Java. I think if I had to do it in JavaScript I'd die
23:32 < CoverSlide> there's always vert.x
23:32 < Daegalus> Minecraft in JS on the JVM
23:32 < CoverSlide> which used to be node.x
23:32 <@konobi> appjs
23:32 < CoverSlide> which now who knows what is gonna happen to it
23:32 < __yh> appjs is too early
23:32 < __yh> too beta
23:32 < jwm> http://www.youtube.com/watch?v=gAKxyOh1zPk
23:33 < jwm> interesting
23:33 < __yh> also using node on app engine , that would be nice
23:34 < CoverSlide> meh
23:34 < CoverSlide> all they need is to use rhino, and add some commonjs wrapper
23:35 < livinded> __yh: why? there's nodejitsu and heroku
23:35 < CoverSlide> competition is always good
23:35 < CoverSlide> i don't know if google really cares or uses node at all
23:36 < Daegalus> Google is going to probably focus on Dart
23:36 < Daegalus> if anything
23:36 < CoverSlide> the v8 dudes do work with the core team from time to time, but I don't know if anyone in google is actually doing anything with it
23:36 < ckknight> CoverSlide: I bet they're interested in it.
23:36 < ckknight> but not overtly
23:37 < __yh> dart is dead
23:37 < ckknight> is it?
23:37 < __yh> i mean, there's no traction as far as i can see
23:38 < Daegalus> I don't think its dead at all. I personally like it more than Node and JS
23:38 < livinded> Dart isn't going anywhere
23:38 < __yh> none of the other browser vendors are ok with it, so it's done
23:38 < Daegalus> and there is plenty of traction,  lots more people show interest in it everyday on the mailing list, irc, and more libraries are showing up
23:38 < livinded> statically typed languages are going to win out in the end
23:38 < livinded> it's too bad Mozilla fucked up so badly with rust
23:39 < Daegalus> well Dart is dynamically typed with optional static typing
23:39 < livinded> after all we've learned from ruby, python, and coffeescript about nice sytax they just throw THAT together
23:39 < livinded> Daegalus: it still compiles to javascript which isn't
23:40 < jwm> you guys recommend coffeescript?
23:40 < jwm> I've been putting it off
23:40 < CoverSlide> jwm: no
23:40 < __yh> i dont like it
23:40 < __yh> either
23:40 < jwm> I like straightforward
23:40 < Daegalus> livinded, i know, but thats only because browsers don't have the dartvm embedded yet. Works great in Dartium, or if you use it server side with the dartvm directly
23:40 < jwm> it definitely looks cleaner though
23:40 < livinded> jwm: no
23:40 < __yh> Daegalus: yea and no browsers ever will besides chrome
23:40 < livinded> the language isn't bad but the people behind it are fucking retarded
23:40 < CoverSlide> yeah none of the other browsers will ever enable dartvm
23:41 < CoverSlide> the people behind dart are the same people who were behind v8
23:41 < jwm> I want native client to make it
23:41 < __yh> i heard the dart to js compiler sucked too, so
23:41 < livinded> there are so many incompatible forks of coffeescript that refuse to work together that it's just awful
23:41 < CoverSlide> the dart to js compiler is horrible
23:41 < livinded> and the main one doesn't support sourcemaps which makes debugging a pain in the ass
23:41 < Daegalus> dart2js has gotten amazingly better. Produces pretty good js.
23:41 < CoverSlide> well coco was made to be more like python
23:41 < CoverSlide> s/pythonperl/
23:41 < livinded> you're literally looking at the code side by side trying to line stuff up
23:41 < CoverSlide> whatever
23:41 < CoverSlide> and livescript is a bit more like haskell
23:42 < livinded> livescript is still javascript though
23:42 < CoverSlide> right
23:42 < CoverSlide> all the to-js languages are tertible
23:42 < livinded> people just need to accept that we'll have a few shitty years and move on to putting a better language in the browser
23:42 < Daegalus> and i understand dart probably won't get into any other browsers, but then again, I use dart server-side or general purpose command-line stuff.
23:42 < Daegalus> LISPYSCRIPT! :P
23:42 < CoverSlide> or clojurescript
23:43 < CoverSlide> but that gets compiled in clojure, not js
23:43 < livinded> if you really can't be bothered to learn a new language go maintain the crappy code that everyone else doesn't want to
23:44 < __yh> i dont think anything will ever replace javascript
23:44 < CoverSlide> for server-side, aside from node, I probably would choose go over dart
23:44 < livinded> __yh: it will eventually, just not for a long time
23:44 < CoverSlide> of course there's always the compile step
23:44 < __yh> i mean, it means all browser vendors have to come to an agreement on the new language design
23:44 < Daegalus> i sure hope it does. I would hate to have to use JS for my lifetime
23:44 < livinded> the barrier to entry is too low and there's too many retards who wont let it die
23:44 < Daegalus> CoverSlide: go is nice, but i prefer dart over it
23:44 < Virunga> In a talk about dart, they was saying the generated code is faster, and uglier, than the one we write
23:45 < Virunga> Showing the stats
23:45 < Daegalus> brb, start bucks run
23:45 < __yh> i like js i don't know why everyone hates it lol
23:45 < jwm> hehe
23:45 < jwm> I'm in the same boat
23:45 < Daegalus> i don't, i like the prototypes, but not rest
23:45 < jwm> my favorite programming language before javascript was assembly language
23:45 < Virunga> :|
23:45 < __yh> js is so stupidly simple yet powerful
23:46 < jwm> I also do powershell scripting
23:46 < Virunga> That says all 
23:46 < Virunga> ahhahah
23:46 < jwm> I like simple/straightforward
23:46 < __yh> they just need to do something about spaghetti async code, and errors
23:46 < jwm> get the job done crap
23:46 < livinded> I use C and assembly a lot, but I wouldn't ever want to use them for a large project
23:46 < zomg> Haskell \o/
23:46 < jwm> yeah I am trying to venture into the big project world
23:46 < zomg> Just have to mention that every time people talk about programming languages
23:46 < Virunga> I like Scala
23:46 < zomg> =)
23:46 < Lorentz> php
23:47 < jwm> I've got my Project PLanning for Dummies book here
23:47 < jwm> I don't know how you guys do it
23:47 < jwm> how do you plan and accomplish big projects
23:47 < zomg> Lorentz: I wrote a php parser / evaluator in haskell
23:47 < jwm> heh
23:47 < zomg> :P
23:47 < CoverSlide> javascript is powerful, unfortunately its design is governed by a committee and a bunch of browser makers, and has a shitton of legacy crap in it as well
23:47 < Nicholas> php all the way
23:47 < livinded> jwm: don't plan, just do
23:47 <@konobi> out
23:47 < jwm> I can't just do it falls apart
23:47 < CoverSlide> zomg: source?
23:47 < Lorentz> sometimes though
23:47 < Lorentz> I just miss C
23:47 < livinded> at least not until you get to the point where you have to plan
23:47 < livinded> Lorentz: it hasn't gone anywhere
23:48 < zomg> CoverSlide: it's not 100% compatible though, http://github.com/jhartikainen/hs-language-php
23:48 < Lorentz> C is always there for you, even when you leave it for some other language
23:48 < jwm> I'm days into using node and I'm already using 16 modules
23:48 < jwm> 16 different systems to learn
23:48 < jwm> heh
23:48 < __yh> that seems like a lot of dependencies
23:48 < CoverSlide> i'm just trying to get into haskell, so i'm trying to find source i can actually grok a little but
23:48 < __yh> thats a pretty big project
23:49 < zomg> CoverSlide: I have some material you might be interested in if you're from a web dev background :)
23:49 < CoverSlide> oh yeah?
23:49 < jwm> I have to interface with mssql, mongo, and I am using express, jade, bootstrap
23:49  * CoverSlide interested
23:49 < zomg> CoverSlide: PMd you
23:49 < __yh> i think im going to go learn go
23:50 < jwm> I tried to do this project in python and php first heh
23:50 < jwm> the funny thing is node works better on windows
23:50 < jwm> than any of the other platforms
23:52 < CoverSlide> haha
23:52 < CoverSlide> well node is pretty slim compared to those
23:53 < CoverSlide> so fewer stdlibs to fuck up
23:59 < othiym23> also MS Open Tech put a significant amount of effort into getting Node to work well on Windows, and the Node team was receptive to making it happen (mostly through abstracting the eventing layer out into libuv)
--- Log closed Tue Jan 15 00:00:24 2013
