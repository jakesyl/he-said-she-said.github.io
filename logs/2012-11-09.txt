--- Log opened Fri Nov 09 00:00:09 2012
--- Day changed Fri Nov 09 2012
00:00 < TooTallNate> Pavi: have you read http://n8.io/cross-compiling-nodejs-v0.8/?
00:00 < TooTallNate> Pavi: it's about node itself, but i was able to cross-compile with node-gyp following those directions before iirc
00:01 < nlf> tnorris: no
00:01 < nlf> not worth it
00:01 < tnorris> bugger. my hopes of combining Buffer and ArrayBuffer are being killed.
00:02 < nlf> why do you want to, exactly?
00:02 < TooTallNate> tnorris: hmmm, i wonder if ArrayBuffer creation time really matters in the end, compared to what you end up doing with the array in the end
00:02 < chovy> jshint doesn't like my use of 'new' here: app.get('/foo/new')
00:03 < tnorris> nlf: ArrayBuffer is part of the es6 spec, and isaacs mentioned in a blog post about moving from buffers to typed arrays and array buffers in the future.
00:03 < tnorris> so I'm doing some exploring on the subject.
00:03 < nlf> ah, gotcha
00:03 < Pavi> Hi TooTalNate
00:03 < coderarity> isaacs: seems to work, thanks!
00:05 <@isaacs> sweet
00:08 < tnorris> TooTallNate: yeah... think we could add some documentation to the Buffer API page with a brief note that they can be used for Typed Arrays?
00:08 < TooTallNate> tnorris: ya i think that would be fine
00:13 < tnorris> cool. thanks nlf, TooTallNate for helping me reconcile this.
00:14 < tnorris> TooTallNate: special thanks for helping me realize that ArrayBuffer's aren't a native v8 data type. that was hanging me up.
00:14 < TooTallNate> tnorris: np :)
00:14 < nlf> you bet
00:19 < Leo_> If i wanted to get the Set-cookie or cookies from the response headers. Should i use res.getHeader('Set-cookie'); or res.headers['Set-cookie'] ?
00:20 < tnorris> isaacs: so, fwiw, don't think that moving to typed arrays in place of buffers should happen. the spec states that they need to be zero filled when instantiated, and that is a major performance hit over the current buffer implementation.
00:25 <@isaacs> tnorris: ok.  i'm convinced :)
00:25 <@isaacs> tnorris: or we should change the spec :)
00:26 < TooTallNate> +1 for changing the spec
00:26 < tnorris> isaacs: I would like that the most, but i'm sure (and I'm sure you realize) that the zero fill is to prevent a malicious page from poking around ram.
00:27 <@isaacs> yeah
00:27 < p3sho> Hey folks! I'm trying to use the crypto module to verify the authenticity of some signed data using the signature and RSA public key, however I get the following error: pem_lib.c:696:Expecting: CERTIFICATE
00:27 < tnorris> isaacs: but I do have to say, the fact that Buffers work with Typed Array views is freakin awesome.
00:27 < tnorris> it's made streaming data between processes so much faster.
00:39 < p3sho> so, the bug I'm getting is this one https://groups.google.com/forum/?fromgroups=#!topic/nodejs/LBiYHD_i-4M but it's supposed to have been fixed over an year ago
00:56 < DTrejo> the NKO3 site auto converts to my time zone??
00:56 < DTrejo> dont want to start at the wrong time or end at the wrong time
01:00 < MI6> joyent/libuv: Ben Noordhuis master * 2d1f17f : test: work around valgrind bug - http://git.io/VxafrQ
01:20 < MI6> joyent/libuv: Ben Noordhuis master * 2a38b66 : build: link test runner with -rpath  Compile the test runner with -rpath= - http://git.io/lJQf8g
01:20 < MI6> joyent/libuv: Ben Noordhuis master * 20eaa84 : build: link test runner with -rpath  Link the test runner with -rpath=/pa - http://git.io/OmBJ-A
01:29 < nlf> man, this socket is killing me
01:45 -!- mode/#node.js [+o piscisaureus_] by ChanServ
01:46 < chovy> what is NKO?
01:52 < warz> how do i get node-gyp? been awhile since i wrote an addon, but i recall it just being available after compiling from source awhile back
01:53 < TooTallNate> warz: just type `npm install` in your module dir
01:53 < TooTallNate> npm bundles it
01:53 < warz> ah, ok
01:53 < TooTallNate> warz: alternatively you can `npm install -g node-gyp`
01:53 < TooTallNate> if you want a separate copy in your $PATH
01:54 < warz> no worries. npm install is easy enough.
01:55 < bartek> Anyone use express.js here? If I have two app.get(..) requests that do the same thing, but have different paths, what's the right way to write this in my routing?
01:56 < MCR2D> bartek: define "the same thing" as a function and pass that to the app.get(,) function
01:56 < MCR2D> parameter
01:56 < warz> so there much be some newer package.json properties for building c++ addons then, TooTallNate?
01:56 < warz> npm init didn't seem to add them
01:57 < TooTallNate> warz: nope, just have a binding.gyp file in the root
01:57 < TooTallNate> npm auto-detects it
01:57 < bartek> MCR2D: Cool, that's what I had in mind, but wasn't sure if it followed convention
01:57 < TooTallNate> warz: you don't need to have a "scripts.install" section
01:57 < warz> hm ok maybe i didn't give it a chance
01:57 < sinclair__> TooTallNate: hi
01:57 < warz> ok
01:57 < sinclair__> TooTallNate: what's your involvement in nodejs?
01:58 < TooTallNate> sinclair__: i'm one of the core comitters
01:58 < sinclair__> TooTallNate: what part do you work on?
01:59 < warz> TooTallNate: there it goes, cool :)
01:59 < TooTallNate> sinclair__: i wrote node-gyp, and various parts of core, mostly JS stuff
01:59 < sinclair__> TooTallNate: do you work for joyent ?
01:59 < TooTallNate> sinclair__: nope, LearnBoost
02:01 < warz> <3 LearnBoost
02:08 < ack006> TooTallNate, or anyone else who would like to help me with https://github.com/joyent/node/issues/4244 ?
02:08 < ack006> it's driving me so nuts i'm willing to write an ustack helper for systemtap, go figure...
02:09 < TooTallNate> ack006: ya i'm really not sure about that one. you want to talk to indutny
02:09 < ack006> anyone willing to try the test on illumos / macos or anything else with dtrace greatly supported
02:09 < ack006> TooTallNate: thanks!
02:24 < MI6> joyent/libuv: Ben Noordhuis master * d6b7fe0 : unix: squelch -Wunused-but-set-variable warnings - http://git.io/XPNp-A
02:32 < MI6> joyent/node: isaacs streams2-net * 99c3616 : test: temporarily disable simple/test-tls-over-http-tunnel (+3 more commits) - http://git.io/IGrPfg
02:34 < bartek> How come when I compileAndRender my moustache template it turns a JSON.stringify'ed variables "'s into &quot; ? Is there a filter I need to apply so it knows its "safe" ?
02:47 < chilts> bartek: firstly, make sure it would be safe (since JSON.stringified() variables could contain <script> tags, etc)? To disable escaping use the triple staches {{{ ... }}}
02:54 < MI6> joyent/libuv: Ben Noordhuis master * bef3ea4 : bench: squelch -Wstrict-aliasing warnings - http://git.io/4C2V_Q
02:58 < MI6> joyent/node: isaacs streams2-net * 649cb2b : net: Start the stream reading for IPC-passed sockets - http://git.io/YHZ2SQ
02:59 < niftylettuce> send pins as postcards https://pinpigeon.com/
02:59 < niftylettuce> built w/node.js .. would love the upvotes on HN http://news.ycombinator.com/newest > "Show HN: PinPigeon"
03:10 < mscdex> niftylettuce: i see something wrong on the website
03:10 < niftylettuce> mscdex: yeah? whats that
03:11 < mscdex> niftylettuce: justin bieber is under the "popular pins" section
03:11 < niftylettuce> mscdex: lol, u dont think hes popular?
03:12 < mscdex> not in my book ;-)
03:12 < mscdex> the site is a cool idea though
03:13 < niftylettuce> mscdex: :) lol who else would u recommend there then? who is cool in ur book? what topics/pins would u send as a postcard from pinterest?
03:14 < blazes816> i'm gonna buy a bieb postcard for my dad for his birthday
03:15 < niftylettuce> blazes816: hahaha
03:16 < MI6> joyent/node: isaacs streams2-net * 9e0ec8a : fs: Default to higher water marks for fs streams - http://git.io/GVok0w
03:22 < niftylettuce> mscdex blazes816 can u upvote on HN ? http://news.ycombinator.com/item?id=4761002
03:28 < blazes816> niftylettuce: donzo
03:57 < dnz-> deoxxa[cookies]: hey fuckhead
03:57 < dnz-> get trolling
03:57 < dnz-> i bet hes not even attached
03:57 < dnz-> :( :( :(
04:01 < SomeoneWeird> dnz-, ...?
04:02 < dnz-> SomeoneWeird: what
04:02 < dnz-> what you want son
04:02 < dnz-> this aint your bidniz
04:02 < SomeoneWeird> whats with the swearing?
04:02 < dnz-> iunno
04:02 < dnz-> whats not with it
04:02 < dnz-> you like
04:02 < dnz-> the fuckin swear police ?
04:03 < rvagg> no, but he'll tell your mother if you don't calm down dnz- 
04:03 < dnz-> calm the fuck down?
04:03 < dnz-> no really, i was just looking for deoxxa alright
04:03 < dnz-> hes really bad at programming
04:03 < rvagg> heh
04:03 < rvagg> true dat
04:03 < SomeoneWeird> lols
04:04 < rvagg> he's in europe somewhere with mmalecki
04:04 < dnz-> yeah i know
04:04 < SomeoneWeird> italy iirc
04:04 < dnz-> hes my irl bro
04:04 < dnz-> i know where he is
04:04 < dnz-> i was just seeing  if he was around
04:04 < SomeoneWeird> heh
04:05 < dnz-> if hes ever mentioned a cunt he used to work with
04:05 < dnz-> that was me
04:06 < dnz-> since there was only 2 devs there
04:07 < SomeoneWeird> lmao
04:16 < Lorentz> >used to work with
04:18 < SomeoneWeird> Lorentz, exactly :P
04:18 < matbee> Hey guys, I'm having some trouble. I'm executing a shell script via nodejs. with child_process.exec.. However, when I ctrl+c my node app, it also kills any child process.
04:18 < SomeoneWeird> use spawn
04:18 < matbee> spawn does the exact same thing
04:19 < SomeoneWeird> will, your node app will be the parent proc, so when that dies the child proc will die too
04:19 < matbee> When I kill the server it kills the child
04:19 < matbee> I simply want to execute a shell script, get the output until the script is done, and then leave it. Is there a way to make the exec/spawn run as NOT a child?
04:19 < mscdex> matbee: that's the way it works by default
04:20 < mscdex> matbee: there is a `detached` option you can set to true with spawn
04:20 < SomeoneWeird> :)
04:20 < mscdex> matbee: http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
04:21 < matbee> How did I miss that?
04:21 < mscdex> matbee: it's 11:20pm ? :-)
04:23 < matbee> Thank you, mscdex, I really don't see how i missed that.
04:39 < TehShrike> st_luke: do you use a feed reader to follow blogs?
04:41 < shripadk> anyone know how to write custom commands in a gyp file? ex: i want to configure & build a 3rd party lib on which my C++ add-on depends on.
04:43 < st_luke> TehShrike: no, I'm going to set one up
04:44 < TehShrike> That's where most of my useful content comes in
04:44 < TehShrike> I've curated it pretty critically over the years, but I've still been wondering if I should narrow the scope of what I follow even further
04:53 < st_luke> TehShrike: my problem in the past with RSS was all the sites I would end up subscribing to sites with content that I didn't give a shit about and the entire thing felt like a chore.
04:54 < st_luke> so I will probably limit it this time to 5-10 sites at the very most
04:54 < TehShrike> Before I add a new feed to my reader, I go back over the last 10 posts and verify that I would have been glad to see at least 9 of them pop up in my feed reader
04:55 < TehShrike> I also check their average posts-per-day
04:55 < TehShrike> I only follow a couple feeds that have more than one post a day
04:58 < st_luke> I'm only adding sites with articles that I've felt compelled to finish reading on more than one occasion. Probably only JS or Unix related.
04:58 < TehShrike> Even if a blog has really posts, if they're interspersed with worthless content then I don't bother with it
04:58 < TehShrike> *really good posts
05:31 < mscdex> shripadk: what's the 3rd party lib?
05:45 < chovy> if i update my readme file, do i need to re-publish my npm package?
05:47 < kaizokuace> who is getting ready for node knockout!
05:48 < chovy> what is that?
05:49 < Aria> Small apps competition. Awesome stuff.
05:49 < chovy> 24 hours time limit?
05:49 < kaizokuace> yea its gonna be rad
05:49 < kaizokuace> 48hrs
05:49 < kaizokuace> starts midnight tomorrow 
05:49 < kaizokuace> so all of saturday and all of sunday
05:50 < kaizokuace> there is liek 430 registered teams!
05:53 < chovy> oh wow
05:53 < shripadk> mscdex: i got it working :) however...
05:53 < shripadk> mscdex: i'm having other troubles.. 
05:55 < shripadk> mscdex: sudo node-gyp configure works
05:55 < shripadk> mscdex: sudo node-gyp build fails with g++: error: unrecognized command line option '-Wnewline-eof'
05:55 < shripadk> if I remove Wnewline-eof from the generated Makefile, it builds properly
05:55 < shripadk> encountered something like this before?
05:56 < chovy> i'm trying to use middleware with app.use(foo); but it doesn't work, unless I use app.all('*', foo);
05:56 < shripadk> mscdex: the 3rd party lib is hyperic sigar.. 
05:57 < Aria> chovy: move that middleware above the router.
05:57 < chovy> i'm returning function(res, req, next)
05:57 < shripadk> here is the gist of my gyp file: https://gist.github.com/4043961
05:57 < chovy> Aria: thanks, that was it
05:57 < Aria> sure thing
05:58 < chovy> what are people doing for NKO3?
05:58 < kaizokuace> i dunno, im doing a lame web app
05:59 < shripadk> mscdex: never mind… fixed :P
05:59 < shripadk> i'm using gnu g++ on osx
05:59 < shripadk> switched to clang and it builds just fine
05:59 < shripadk> sudo CXX=clang node-gyp configure && node-gyp build
06:07 < chovy> i'm just going to plug away on my app
06:11 < chovy> i think i will need admin interface for my app soon. Got my first spammer today.
06:13 < shripadk> mscdex: ping :)
06:14 < shripadk> how do you set compiler env variables (CXX etc) in a gyp file so i can choose the compiler (ex: clang/g++)? 
06:15 < mscdex> shripadk: i imagine you'd take care of that in your own shell environment
06:17 < shripadk> mscdex: but if one has a gnu-g++ as default compiler and npm install fails (because that particular module can't build without clang) then what should one do?
06:20 < mscdex> shripadk: put a note in your readme's requirements section ? :-)
06:21 < shripadk> :) i guess thats the only way… this issue has been raised already: https://github.com/TooTallNate/node-gyp/issues/63
06:26 < deoxxa[cookies]> dnz-: ur shit
06:27 < dnz-> deoxxa[cookies]: eat a fat cock
06:27 < dnz-> speaking of eating
06:27 < deoxxa[cookies]> :<
06:27 < dnz-> im gonna go try see luke
06:27 < deoxxa[cookies]> so mean
06:27 < dnz-> cos theres no good food near new office
06:27 < deoxxa[cookies]> what time is it there
06:28 < dnz-> 5:30pm
06:28 < dnz-> i gotta get a train to ktown from here
06:28 < dnz-> but im near nth melb station
06:28 < deoxxa[cookies]> true
06:28 < dnz-> same line etc
06:29 < dnz-> waht time in .it deoxxa[cookies] 
06:29 < deoxxa[cookies]> 7:30 am
06:29 < dnz-> you should be good crossover with FrozenFire
06:29 < dnz-> i highly suggest you troll him
06:29 < deoxxa[cookies]> lol
06:31 < dnz-> oh and lol deoxxa[cookies] i got a mail back from ytc about that job lol
06:31 < dnz-> ill pm
06:31 < chakrit> whats the new way to get keypresses from stdin?
06:31 < chovy> chapel: u there?
06:31 < chovy> or anyone really...should I be indexing my sub-document collections?
06:32 < chovy> i'm using mongoose
06:32 < chovy> like item.comments is a collection of sub-documents
06:32 < chovy> i'm not sure i can index that actually. I think i can only index a reference
06:33 < samg_> Node n00b here. In a project with server-side and client-side javascript, I would ideally want to test code in both places the same way, but it seems like server-side code uses CommonJS, and client-side code uses AMD. Is that my misconception? What do people here do?
06:33 < SomeoneWeird> <dnz-> but im near nth melb station < im punching u if i see u
06:33 < SomeoneWeird> k
06:33 < chovy> samg_: you can use jasmine on both
06:33 < dnz-> SomeoneWeird: i punch back, and push people infront of trains
06:33 < SomeoneWeird> :c
06:34 < SomeoneWeird> assulting a minor
06:34 < SomeoneWeird> i goto goal
06:34 < dnz-> wtf a minor
06:34 < SomeoneWeird> gaol
06:34 < SomeoneWeird> ?
06:34 < SomeoneWeird> lol
06:34 < SomeoneWeird> wot
06:34 < deoxxa[cookies]> mate the only time you punch is when you see alf
06:35 < SomeoneWeird> lol
06:35 < dnz-> ITS FUCKIN ALF STEWART, PUNC HIT
06:35 < rump> https://gist.github.com/4044013
06:35 < dnz-> SomeoneWeird: i can be spooted cos i pretty much always wear this or similar hoodie http://i.haymarket.net.au/Galleries/20121020052735_IMG_3018.JPG
06:35 < rump> how do people do require(blah)(app); ?
06:35 < dnz-> thats not me tho, thats thoth, with his thick rimmed glasses and hipster samurai haircut
06:35 < SomeoneWeird> haha
06:36 < SomeoneWeird> rump, module.exports = function(app) { return <what you want to export> }
06:36 < dnz-> return null
06:36 < SomeoneWeird> k
06:36 < dnz-> tho if i cna import
06:36 < dnz-> id like to import cocaine
06:36 < dnz-> not for the profit margins
06:36 < dnz-> but for how much coaine i would get
06:37 < rump> ah!, SomeoneWeird, i wasnt returning it
06:37 < rump> ty
06:37 < SomeoneWeird> <dnz-> wtf a minor< no u
06:41 < dnz--> what 
06:41 < samholmes> I'm generating my a private key for ssl on startssl.com. It's asking me to choose between SHA1 and SHA2, but it says XP doesn't support this function. Wha? 
06:41 < dnz--> what
06:41 < dnz--> IT SAYS
06:41 < dnz--> INTERNET
06:41 < dnz--> DOESNT SUPPORT THE FUNCTION
06:41 < rump> SomeoneWeird: hmm, what do i want to export? :)
06:41 < dnz--> READ THE DESCRIPTION.
06:41 < SomeoneWeird> samholmes, -> microsoft
06:42 < samholmes> But, it's XP. Isn't that still important? :P
06:42 < SomeoneWeird> no.
06:42 < SomeoneWeird> :P
06:42 < dnz--> if you dont xp
06:42 < dnz--> then only windows 7 and above clients
06:42 < dnz--> can connect to your internet
06:42 < dnz--> some linux 
06:42 < dnz--> and mac less than os classic
06:43 < samholmes> SomeoneWeird: What sort of experience would they have with my certificate?
06:43 < samholmes> Would they get a warning?
06:43 < samholmes> http://www.netmarketshare.com/operating-system-market-share.aspx?qprid=10
06:43 < dnz--> no
06:43 < samholmes> over a 3rd of the population
06:43 < dnz--> it will just stop working
06:43 < dnz--> and their browser may or may not lock up
06:43 < samholmes> So, should I just choose SHA1? :D
06:44 < SomeoneWeird> heh'
06:44 < dnz--> you should choose md5
06:44  * SomeoneWeird slaps dnz-- 
06:44 < samholmes> Does the key size have any effect on the system support; 2048 vs 4096?
06:44 < dnz--> SomeoneWeird: are you really in nth melb /
06:45 < dnz--> samholmes: you want as low as possible
06:45 < dnz--> it puts less load on the device
06:45 < SomeoneWeird> southeast, actually
06:45 < dnz--> so people cna still look at it on shit nokia phones
06:45 < dnz--> with wap
06:45 < SomeoneWeird> dnz--, stop trolling him noob
06:45 < dnz--> SomeoneWeird: do you go to those nodejs meetups ?
06:45 < SomeoneWeird> samholmes, higher
06:45 < SomeoneWeird> nop
06:45 < dnz--> yeah neither, but i went once with deoxxa[cookies]  ;p
06:46 < deoxxa[cookies]> the node meetup doesn't exist anymore
06:46 < deoxxa[cookies]> lol
06:46 < samholmes> so sha1 4096
06:46 < dnz--> why not ?/
06:46 < SomeoneWeird> ya its polyhack now
06:46 < dnz--> not enough fags ?
06:46 < dnz--> POLY AS IN MULTIPLE RELATIONSHIPS ?
06:46 < dnz--> thats gay
06:46 < SomeoneWeird> no u
06:47 < SomeoneWeird> why didn't you go?
06:47 < dnz--> i went once, and it was too gay
06:47 < dnz--> so iwas like
06:47 < dnz--> fuck this
06:47 < dnz--> deoxxa[cookies]: took some guy back to his apartment and probably slept with him
06:47 < SomeoneWeird> >.>
06:47  * dnz-- is NOT trolling
06:47 < dnz--> at ALL
06:48 < dnz--> ctcp dnz- PING
06:48 < SomeoneWeird> ur weird
06:48  * SomeoneWeird hides
06:48 < dnz--> yes, i am
06:49 < dnz--> BUT YOU CAN CALL ME KEV COS IM A SICKO
06:49 < SomeoneWeird> wat
06:49 < dnz--> kev, hes a sicko
06:49 < dnz--> kevs got a big dicko
06:49 < dnz--> hes got a hot bird, loves smashing it
06:49 < SomeoneWeird> keep it g rated
06:49 < SomeoneWeird> MATE
06:50 < dnz--> the g is for gangsta son
06:50 < dnz--> G rated like OG bitch
06:53 < SomeoneWeird> okay then m8
06:54 < dnz--> SomeoneWeird: you seem like you drink wine and eat it with cheese, appreciate good crackers, and clean code, that you write on a macbook
06:54 < dnz--> i dont like that
06:54 < dnz--> you gotta get raw, get a tooth punched out and get srayed with someone elses blood
06:54 < SomeoneWeird> i dont drink
06:54 < dnz--> oh well
06:54 < dnz--> there we go
06:54 < SomeoneWeird> and fuck macs
06:54 < SomeoneWeird> lol
06:54 < dnz--> dont drink
06:55 < dnz--> instant fuckwit
06:55 < SomeoneWeird> but hay
06:55 < SomeoneWeird> i cant even buy shit
06:55 < SomeoneWeird> if i wanted too
06:55 < SomeoneWeird> to*
06:55 < dnz--> because you're 12? 
06:55 < SomeoneWeird> yeah, not that young.
06:55 < dnz--> 13.5
06:55 < SomeoneWeird> nar
06:55 < dnz--> you jut go into the bottlo
06:56 < dnz--> look at the guy right in the eyes
06:56 < dnz--> and say
06:56 < dnz--> 'cunt, i want a bottle of bundy'
06:56 < dnz--> no one will q your age
06:56 < SomeoneWeird> lols
06:57 < azbyin> hi all..
06:57 < dnz--> sup dickhead
06:57 < dnz--> welcome to node.js
06:57 < azbyin> does anyone know if deployd has an irc channel somewhere?
06:57 < SomeoneWeird> dnz--, seriously though, stop with the swearing
06:57 < SomeoneWeird> >.<
06:57 < dnz--> DOES IT OFFEND YOU?
06:58 < SomeoneWeird> no but might others
06:58 < dnz--> bro, kids dont know how to code
06:58 < dnz--> so g rated is for pussies
06:58 < samholmes> Do I need to buy a SSL certificate or get a free one from startssl in order to just simply encrypt my browser's data?
06:58 < SomeoneWeird> define kid
06:58 < samholmes> my browser's connection to my site*
06:58 < SomeoneWeird> startssl's will work fine samholmes 
06:58 < dnz--> someone young enough to be corrupted
06:58 < dnz--> i already jabbed you with a heroin filled syringe
06:59 < dnz--> so you will be ok
06:59 < samholmes> SomeoneWeird: Their site is confusing and I can't seem to generate a cert
06:59 < SomeoneWeird> oh.
06:59 < SomeoneWeird> samholmes, what do you need it for?
06:59 < SomeoneWeird> a public site/service?
06:59 < samholmes> A public site/service
06:59 < dnz--> why do you come here
06:59 < dnz--> for fuckin, ssl support
06:59 < dnz--> clearly you dont know enough about technology to start
06:59 < dnz--> so stop
06:59 < dnz--> before you break the internet
06:59 < SomeoneWeird> ...
06:59  * SomeoneWeird kicks dnz-- 
07:00 < dnz--> listen mate
07:00 < dnz--> the internet isnt for everyone
07:00 < samholmes> dnz--: Neither is IRC, apparently. Yes I come here for help, not to troll like yourself.
07:01 < dnz--> i dont need to troll
07:01 < dnz--> i am troll
07:02 < samholmes> dnz--: I really don't care.
07:03 < dnz--> ok bro, well should probably learn about ssl, before attempting to deploy it
07:03 < dnz--> not from irc
07:03 < dnz--> but from reference websites
07:03 < dnz--> and rfc's
07:03 < dnz--> just sayin'
07:04 < dnz--> pretty good rule to not deploy things you dont understand to some extend
07:04 < samholmes> Right
07:04 < samholmes> Where do I start?
07:04 < samholmes> ...that you'd suggest
07:04 < dnz--> http://www.instantssl.com/ssl-certificate-products/https.html
07:04 < dnz--> i didint even read that
07:04 < dnz--> its just the first hit for https and ssl
07:05 < dnz--> from google
07:05 < dnz--> google is always good place to s tart
07:06 < dnz--> anyway
07:06 < dnz--> 6pm == pub time
07:08 < samholmes> I know that HTTPS encrypts the communication between my server and it's clients. That's all I'm after. AFAIK all I need is to set the node.js HTTPS module's options for key and cert to some keys in some files. Where do I get the files, and how, I'm not sure.
07:08 < ChrisPartridge> samholmes
07:08 < ChrisPartridge> you need to generate a key, then a csr, apply for a cert with the csr, and then you will get a cert and possible a ca cert from the authority
07:09 < samholmes> So how do I do this?
07:10 < ChrisPartridge> samholmes: openssl binary
07:10 < ChrisPartridge> e.g. openssl genrsa -out your-domain.key 2048
07:11 < ChrisPartridge> then create a CSR, openssl req -new -key your-domain.key -out your-domain.csr
07:11 < JasonSmith> What is a good module to dig information out of an XML blob?
07:12 < ChrisPartridge> JasonSmith: try npm search xml
07:12 < ChrisPartridge> xpath might be your best bet
07:12 < JasonSmith> Dude, I run npm. I know all about npm
07:12 < SomeoneWeird> use xml2json
07:12 < JasonSmith> I feel the pain more than most that it is a PITA to search
07:13 < JasonSmith> The big thing is maintained packages which is a hard thing to search for
07:13 < JasonSmith> I will try xpath, thanks ChrisPartridge!
07:14 < ChrisPartridge> JasonSmith: npm info <package name>, either that or check their github page
07:14 < JasonSmith> Yes thank you
07:17 < SoulRaven> heloo
07:17 < ChrisPartridge> heelo
07:17 < SoulRaven> i have a question regarding Date
07:18 < SoulRaven> way new Date.toLocaleString() return Fri Nov 09 2012 09:13:05 GMT+0200 (EET) and not returning 11/9/2012 9:13:53 AM
07:18 < abrkn> has anyone tried a decimal type module? i see a few on npm
07:19 < JasonSmith> ChrisPartridge: Yes, xpath is perfect
07:20 < JasonSmith> abrkn: Apparently I wrote the bigdecimal package
07:21 < JasonSmith> https://github.com/iriscouch/bigdecimal.js
07:23 < abrkn> hmm, your module is huge
07:24 < ChrisPartridge> SoulRaven: take a look at momentjs (whether you use the package, or just ref the code), it's pretty robust
07:25 < SoulRaven> i don't want any special module, i want only to format a simple Date object for winston module
07:26 < nodejsuser> Hi does anybody help with nodejs and upstart on ubuntu?
07:29 < dragon> nodejsuser: depends. If I were you, I'd ask the question in first place.
07:31 < shripadk> okay this is weird. when i do npm install . in my module, npm ignores the binding.gyp file altogether and never executes node-gyp rebuild.. any idea why?
07:33 < shripadk> isaacs: help!
07:34 < nodejsuser> I want to use upstart for funning nodejs applications. Can you show me your upstart script?
07:34 < JasonSmith> abrkn: Yes it is compiled from Java
07:34 < JasonSmith> via GWT
07:35 < JasonSmith> OTOH the implementation is very well tested
07:39 < SoulRaven> in node the Date object has not toLocaleString() ??
07:40 < sinclair__> hey guys
07:41 < sinclair__> i have a node-ish/javascript question
07:41 < deoxxa[cookies]> SoulRaven: yes, it's there
07:41 < deoxxa[cookies]> > (new Date()).toLocaleString()
07:41 < deoxxa[cookies]> 'Fri Nov 09 2012 08:40:06 GMT+0100 (CET)'
07:42 < SoulRaven> yes, but in chrome is returned 11/9/2012 9:13:53 AM
07:43 < deoxxa[cookies]> SoulRaven: that... doesn't mean that it doesn't exist in node
07:43 < SomeoneWeird> >> (new Date()).toLocaleString()
07:43 < purr> SomeoneWeird: (string) 'Fri Nov 09 2012 07:42:20 GMT+0000 (UTC)'
07:44 < jtmitch> is rwaldron watchin'?
07:44 < chovy> how should i store price?
07:44 < SomeoneWeird> returns what node returns for me SoulRaven 
07:44 < deoxxa[cookies]> and for me, it's the same in chrome, SoulRaven. the same as in node, i mean.
07:44 < SoulRaven> in chrome: (new Date()).toLocaleString()
07:44 < SoulRaven> "11/9/2012 9:42:26 AM"
07:44 < deoxxa[cookies]> SoulRaven: what's your locale?
07:45 < SoulRaven> in node return : Fri Nov 09 2012 09:43:10 GMT+0200 (EET)
07:45 < deoxxa[cookies]> yes
07:45 < deoxxa[cookies]> what is your locale
07:45 < SoulRaven> LANG=en_US.UTF-8
07:46 < deoxxa[cookies]> SoulRaven: and your chrome locale?
07:47 < SoulRaven> how i find this?
07:48 < deoxxa[cookies]> not sure, perhaps google can help
07:52 < jtmitch> anyone else play with johnny-five by chance?
07:53 < deoxxa[cookies]> best module name ever
08:07 < jtmitch> yeah - well I'm not able to get it to work just yet
08:07 < jtmitch> bu tit is a pretty slick name
08:07 < jtmitch> *tit :(
08:07 < jtmitch> but it
08:19 < oal> This isn't strictly a Node question, but let me try: In Stylus, can I negate a variable? I have "grid-padding = 0 20px", and I'd like to do something like "negate(grid-padding)" to get "0 -20px". Ideas?
08:20 < vicapow> oal: use a variable
08:20 < vicapow> maybe i dont understand the problem
08:20 < vicapow> oh wait. i see
08:21 < vicapow> oal: you could just target the individual attributes
08:21 < vicapow> oal: like "margin-left" instead of setting "margin"
08:22 < oal> I tried with grid-padding-top etc, and then saying "grid-padding-negative = -(grid-padding-top) ...", but that only summed all the paddings to one value.
08:22 < oal> vicapow: hmm, I guess I could. Would be neat if there was a function for it though :)
08:23 < vicapow> oal: maybe you could also achieve this using sprintf
08:24 < vicapow> oal: http://learnboost.github.com/stylus/docs/operators.html
08:24 < jtmitch> johnny-five keeps getting stuck on me
08:24 < jtmitch> pretty sure I have firmata 2.2 on the board, though I'm uploading that from a different machine before reconnecting to a pi
08:24 < oal> vicapow: I'll try, thanks
08:25 < jtmitch> but it hangs - which rwaldron notes in his git hub page to make sure to use Firmata 2.2 - 
08:25 < jtmitch> but mind never goes through
08:25 < jtmitch> but I don't see anywhere in his code where it's only for an Uno versus a Mega2560 versus blah
08:25 < oal> vicapow: yes, it works. Great! :-)
08:30 < sinclair__> hey guys
08:31 < sinclair__> i have a question, which is both OOP related, node related, and has some bearing on some of the TS stuff im working on now
08:32 < sinclair__> in TS, i can have inheritance, for example, class A, B, C, where B extends A and C extends B
08:33 < sinclair__> each class (A, B, C) exists in different files
08:33 < sinclair__> so, in order for B to exist, it needs to have a dependency on A
08:33 < sinclair__> i have 2 options for compilation
08:34 < sinclair__> 1) i can compile each file individually
08:34 < sinclair__> 2) i can compile them seperately
08:34 < sinclair__> er, 2) i can compile them into one JS file
08:34 < sinclair__> anyone paying attention ?
08:35 < kaizokuace> by TS u mean typescript yes?
08:35 < sinclair__> kaizokuace: yeah, but this isn't necessarily a TS question
08:36 < kaizokuace> anyway, keep it separate
08:36 < kaizokuace> its nicer that way
08:36 < sinclair__> kaizokuace: compile classes to separate JS files, and require on each file?
08:37 < kaizokuace> sinclair__: cant you keep the classes for dev separate in TS but then let it compile in one file?
08:38 < kaizokuace> as long as you dont plan on touching the JS files 
08:38 < sinclair__> kaizokuace: i can, however the compiler currently has issues with cyclic referencing between files
08:38 < kaizokuace> hmmm
08:38 < kaizokuace> What does TS spit out when you make classes inherit from one another?
08:38 < sinclair__> kaizokuace: its a little hard to explain, but each class could reference any other class (or file), so, the order in while i submit each file to the TS compiler matters
08:39 < sinclair__> kaizokuace: the TS compiler has a utility to iron out referencing, but its not perfect
08:39 < kaizokuace> shouldnt you only need to feed it one file and it figures out the dependent files in the current path?
08:40 < [AD]Turbo> hi there
08:40 < kaizokuace> howdy
08:41 < kaizokuace> sinclair__: what does TS do if you use require IN the TS code?
08:42 < sinclair__> kaizokuace: it can't figure them out 100% in cyclic referencing scenarios
08:42 < sinclair__> kaizokuace: TS can require fine, it also have both AMD and commonjs module loading syntax
08:42 < sinclair__> kaizokuace: but, thats not what im doing exactly
08:43 < kaizokuace> hmmm
08:43 < sinclair__> kaizokuace: this is more referencing for compilation than module loading
08:43 < kaizokuace> what are you doing exactly?
08:43 < sinclair__> kaizokuace: ive plugged the TS compiler into node, and can compile from node
08:44 < sinclair__> kaizokuace: it does everything the CLI compiler can do
08:44 < sinclair__> kaizokuace: anyway, back to the matter at hand
08:44 < sinclair__> kaizokuace: knowing TS compilation breaks with cyclic referencing, (which JS code should it emit first for example)
08:45 < sinclair__> kaizokuace: the only other alternative is compilation (1xJS for each TS file)
08:45 < sinclair__> ok?
08:45 < sinclair__> kaizokuace: so this is where my question comes in :)
08:45 < jtmitch> is voodootikigod on?
08:46 < sinclair__> in the class example i mentioned before, class A, class B extends A, class C extends B....
08:47 < sinclair__> when i compile class C, i also need to compile class A and B first, 
08:47 < kaizokuace> sinclair__: yea thats a straight forward inheritance chain
08:47 < sinclair__> when i compile class B, i also need to compile class A
08:47 < sinclair__> and so fourth
08:47 < kaizokuace> hmmmmm
08:48 < sinclair__> classA.js has 1 class, classB.js has two classes (A, B), class C has three classes (A, B, C), do you follow?
08:48 < kaizokuace> so its generating B in classC.js for example 
08:48 < sinclair__> A and B
08:49 < kaizokuace> they arent actually connected 
08:49 < sinclair__> for C to exist, it needs to compile B, and for B to exist, it needs to compile A
08:49 < kaizokuace> why not externally reference the other compiled class files?
08:50 < sinclair__> var class_a = require("classa.js");
08:50 < sinclair__> var class_b = require("classb.js");
08:50 < kaizokuace> yea 
08:50 < kaizokuace> use require 
08:50 < kaizokuace> why does TS not do that!
08:51 < sinclair__> kaizokuace: have a think about it
08:51 < sinclair__> there are many interpretations of how one might link multiple files together, both with compilation and module requireing
08:51 < kaizokuace> yea i know require is just a library, but it has become an integral part of using js 
08:51 < sinclair__> kaizokuace: and TS supports require
08:52 < sinclair__> kaizokuace: it supports both AMD and commonjs
08:52 < kaizokuace> so then why not use that in this case?
08:53 < sinclair__> kaizokuace: its something i would rather not have to think about
08:53 < kaizokuace> yea, i would like the TS to just handle it 
08:53 < sinclair__> kaizokuace: TS can handle it, but it requires implementing it yourself
08:53 < kaizokuace> that is by definition not handling it 
08:53 < kaizokuace> ahhaa
08:54 < kaizokuace> will they ever have like an #include in the JS spec?
08:55 < sinclair__> kaizokuace: anyway, with classC.js (having definitions for both A and B) i can work with that
08:55 < sinclair__> kaizokuace: but, is it normal to do things that way
08:55 < kaizokuace> yea if that file has defs for A and B why do u even need the other files then?
08:56 < sinclair__> var classc = require("classC"); 
08:56 < sinclair__> brings class A and B into scope
08:56 < sinclair__> as well as C
08:56 < sinclair__> however, var classa = require("classA") only bring class A into scope
08:56 < kaizokuace> i see
08:57 < sinclair__> so i guess i just answered my own question
08:57 < kaizokuace> yes
08:57 < kaizokuace> hmmm
08:57 < kaizokuace> inheritance in JS is weird 
08:58 < substack> inheritance should feel a little awkward so people don't do it as much
08:58 < sinclair__> kaizokuace: im just trying to rationalize all this
08:58 < kaizokuace> like i feel like its wrong to push the OOP models of languages like c#, java etc unto js
08:58 < substack> occasionally applicable but often overused
09:00 < kaizokuace> also no need to rationalize it, js is an irrational language that was originally spec'd in like 3 weeks. eheh
09:00 < sinclair__> kaizokuace: also, another aspect to this is, lets say i have 600 class files
09:00 < kaizokuace> yea if you got 600 class files then you have other problems
09:00 < sinclair__> irrelevant 
09:00 < SomeoneWeird> lmao
09:00 < kaizokuace> hehe
09:00 < SomeoneWeird> too true
09:02 < sinclair__> exports = { classA : require("classA"), classB :require("classB"), classC: require("classC") }
09:02 < sinclair__> this way, i could automate my entire build, and still have a large code base underneath
09:02 < sinclair__> however, it would be importing a lot of the same old code
09:03 < kaizokuace> yea that sounds messy
09:03 < sinclair__> kaizokuace: it would be automated
09:03 < sinclair__> for example
09:03 < sinclair__> 1) compile each file one by one
09:04 < sinclair__> 2) generate a exports js file with just exports = { classA : require("classA"), classB :require("classB"), classC: require("classC") }
09:04 < sinclair__> done
09:04 < kaizokuace> ok 
09:04 < SomeoneWeird> yuk
09:04 < kaizokuace> try it 
09:04 < kaizokuace> and post the gist
09:04 < sinclair__> SomeoneWeird: good, what are your thoughts on this?
09:05  * sinclair__ is really looking for suggestions on this approach
09:06 < sinclair__> SomeoneWeird: how is this yuk?
09:06 < sinclair__> SomeoneWeird: from a implementation perspective, it would be quite tidy.
09:07 < sinclair__> SomeoneWeird: for example
09:07 < SomeoneWeird> heh,
09:07 < sinclair__> var my_module = require("my_module");
09:07 < sinclair__> var obj = new my_module.ClassA()
09:08 < sinclair__> SomeoneWeird: how is this yuk? or do you really have nothing constructive to say?
09:08 < SomeoneWeird> well, massive exports are a nono for me
09:09 < SomeoneWeird> but, if it works :)
09:09 < sinclair__> why are they a nono?
09:09 < sinclair__> performance?
09:09 < SomeoneWeird> not that i know of
09:09 < kaizokuace> doesnt typescript compile it in order if u give files in order as arguments?
09:10 < sinclair__> kaizokuace: yes, but breaks in instances where there are cyclic references
09:10 < sinclair__> (at least it does currently)
09:10 < sinclair__> maybe in the next version, they can resolve this by adding forward declarations to the compiled output
09:11 < sinclair__> SomeoneWeird: i think i might try this approach, it seems to make the most sense 
09:11  * sinclair__ was hoping someone in here could tell him otherwise
09:12 < kaizokuace> what about having like a project.ts that references everything in other files?
09:13 < sinclair__> kaizokuace: im not sure thats any different from supplying all those files as command line arguments
09:13 < sinclair__> kaizokuace: and still wouldn't resolve cyclic referencing
09:13 < kaizokuace> yea but its in the ts file and might just make for a cleaner project structure?
09:14 < sinclair__> kaizokuace: i want to avoid having to type things like this out if i can, id rather have the system reflect on itself
09:15  * sinclair__ is a advocate for code generation
09:15 < kaizokuace> are u using current version of ts?
09:16 < sinclair__> 0.0.8.0
09:20 < kaizokuace> hmmmmmmmmmmmm
09:22 < adlwalrus> what does 'v' stand for in "argv"?
09:22 < sinclair__> vector
09:23 < kaizokuace> sinclair__: man now you got me thinking about this situation with TS project structures
09:23 < sinclair__> kaizokuace: help me solve it :)
09:23 < kaizokuace> trying!
09:24 < kaizokuace> tho it is 4:30am so my brain might just be useless 
09:24 < sinclair__> kaizokuace: the only TS projects on npm are half arsed ones
09:24 < sinclair__> (as usual)
09:24 < sinclair__> typescript-require for example
09:25 < sinclair__> (a copy and paste from the tsc code)
09:25 < miths1108> hello everyone...i want to integrate a collaborative editor(implementing sharejs) with a web application. i want to know how can i integrate it...i am a beginner
09:25 < sinclair__> miths1108: have you tried mmorpg?
09:26 < miths1108> sinclair__: no...whats dat?
09:27 < kaizokuace> haha
09:27 < SomeoneWeird> lol
09:31 < adlwalrus> sinclair__: what does "vector" refer to?
09:31 < sinclair__> adlwalrus: an array
09:31 < kaizokuace> miths1108: sorry, I think your question is way too broad
09:32 < adlwalrus> sinclair__: what's the difference between an "array" and a "vector"?
09:32 < sinclair__> adlwalrus: nothing really
09:32 < kaizokuace> adlwalrus: no difference in javascript
09:33 < kaizokuace> in C++ its different 
09:33 < kaizokuace> in C++ array is fixed length, vector expands nicely when you add to it 
09:34 < adlwalrus> kaizokuace: thanks.
09:34 < kaizokuace> but everything in js is a hash under the hood so the vector in argv is just a name coming from history
09:35 < sinclair__> adlwalrus: i believe the 'v' was added to signify the array being passed in is of variable length
09:35 < kaizokuace> oh that sounds more reasonable 
09:37 < adlwalrus> sinclair__: hrpmh
09:37 < adlwalrus> thanks agn, all. my battery's dyin'.
09:37 < adlwalrus> bye
09:37 < kaizokuace> laters
09:39 < simong> When you pipe a readable stream to a writeable one, is there a need to close/destroy either of them?
09:39 < simong> ah nvm
09:39 < kaizokuace> sinclair__: hey, what happens when you feed tsc --out files.ts ....
09:40 < sinclair__> kaizokuace: compiles all the files into one file
09:40 < sinclair__> kaizokuace: ive already been able to break it
09:40 < sinclair__> (with cyclic referencing)
09:40 < kaizokuace> stop breaking things!
09:42 < sinclair__> kaizokuace: sometimes it compiles fine, but the JS is corrupt as thing which should be defined at given points in the code are not
09:42 < kaizokuace> can u post some code that does this?
09:43 < sinclair__> kaizokuace: not at this moment, i can't remember what i was doing to get it doing that (should really implement such things as unit tests)
09:43 < sinclair__> kaizokuace: i can send you the code and compiler flags if you want to see a broken compile
09:43 < kaizokuace> yea, unit testing.... so much typing 
09:44 < kaizokuace> yea send me that if you can
09:44 < sinclair__> id have to send it as a .zip
09:44 < sinclair__> got somewhere for me to upload to?
09:44 < kaizokuace> email?
09:45 < sinclair__> kaizokuace: hang on, ill bang it up on my web server
09:45 < kaizokuace> k
09:46 < kaizokuace> or dropbox
09:47 < senglish> Hi. I'm connected to node (0.8.4) in the debugger. Can I halt it whereever it is in the code?
09:49 < kaizokuace> senglish: have u used this https://github.com/dannycoates/node-inspector
09:49 < Wizek> Can I install nib globally in a way that allows me to write "require nib" in my .styl files?
09:50 < senglish> kaizokuace: At the moment I'm connected on the console. This is on a production server (where a nodejs app has seized up), I'm pained to install any other software.
09:50 < senglish> kaizokuace: Does node-inspector allow you to hit pause on a running node app?
09:50 < Wizek> I guess it has to do with now npm handles paths
09:50 < Wizek> s/now/how/
09:50 < kaizokuace> it has a break point thingy
09:51 < senglish> Does it allow you to pause on the next line (whereever that may be?)
09:51 < kaizokuace> not sure.  havent used it that much yet ehhe
09:51 < senglish> OK, thanks
09:52 < kaizokuace> sry
09:52 < sinclair__> kaizokuace: http://sinclair.azurewebsites.net/build.zip
09:52 < sinclair__> kaizokuace: 1 million points if you can work out why this doesn't build :)
09:53 < kaizokuace> i like points
09:53 < a_meteorite> prizes in internets are way better
09:53 < kaizokuace> its cuz its more realer
09:54 < a_meteorite> yeah points are so fake. internets is the real deal.
09:54 < a_meteorite> :P
09:54 < kaizokuace> points are for hipsters
09:56 < sinclair__> kaizokuace: let me know how you get on with this, i may actually end up submitting it as a bug
09:56 < aandy> and karma is for wh- ah, okay :)
10:00 < sinclair__> kaizokuace: in this example, there is nothing cyclic about it
10:01 < sinclair__> kaizokuace: but, there is a general inability for it to handle cross file class inheritance 
10:01 < sinclair__> kaizokuace: reading the spec, i think its a bug
10:15 < _fr_> Pour les francophones, toute la communauté node est désormais ici --> #node.js-fr. Les modules des auteurs francophones publiés sur npm, et tous les meilleurs articles de blogs vous sont notifiés automatiquement! Bonnes discussions.
10:15 < sinclair__> kaizokuace: here is the compiled output... http://pastebin.com/4z8VLxeu
10:16 < kaizokuace> sinclair__: yea i got that from compiling those ts files 
10:17 < sinclair__> kaizokuace: try run it in node, TypeError: Cannot read property 'prototype' of undefined :(
10:18 < thealphanerd> .join #askreddit
10:18 < sinclair__> kaizokuace: im pretty sure its a bug
10:18 < thealphanerd> ooops
10:18 < thealphanerd> epcot fail
10:22 < kaizokuace> hmm
10:22 < kaizokuace> it could be a bug
10:22 < sinclair__> kaizokuace: just trying to work out what i need to do to the source to fix it
10:22 < kaizokuace> the generated code looks like a pile of crap
10:23 < kaizokuace> like root is defined all over town
10:23 < sinclair__> kaizokuace: thats JS for you
10:24 < sinclair__> kaizokuace: its supposed to be idiomatic JS, but, no one really uses OOP in JS to bother using these conventions. 
10:25 < kaizokuace> well its cuz i wouldnt do "classes" like this if i hand coded the js
10:27 < sinclair__> kaizokuace: note, that "root" is something i added in the code tho
10:29 < Wizek> Anyone using Stylus? It seems when I do "stylus -w style.styl" and I save a file with a change, stylus will compile it multiple times. Is this a known bug on their part, or do I do somwthing wrong?
10:30 < Wizek> I get "compiled style.css" multiple times
10:33 < kaizokuace> sinclair__: ugh, i need to mull this over more.  im gonna knock out tho.  I'll hit you up later about it 
10:33 < sinclair__> kaizokuace: yeah, all good mate
10:33 < sinclair__> kaizokuace: before you go tho
10:34 < kaizokuace> yea
10:34 < sinclair__> kaizokuace: as a thing to try, remove the module root {} from around each class, and the extends stuff, and try compile
10:34 < sinclair__> kaizokuace: then you get compilation errors
10:35 < sinclair__> kaizokuace: its very random behaviour
10:35 < kaizokuace> removing all extends?
10:35 < sinclair__> nope, keep extending, 
10:35 < kaizokuace> oh
10:35 < sinclair__> (all the extends are prefixed with root.)
10:36 < kaizokuace> yea
10:37 < sinclair__> kaizokuace: i think i will continue to figure out what i need to do to the compiled output to make it work, then submit it as a bug
10:37 < Kakera> if I assign a new socket to the old variable, will the old one self-destruct or keep emitting events to the old event handlers?
10:39 < kaizokuace> sinclair__: ok, i just want to figure out a way to make it work!
10:39 < kaizokuace> sinclair__: i'll catch u next time
10:39 < sinclair__> see ya mate
10:43 < kaizokuace> oi
10:43 < kaizokuace> i removed exports from everythng
10:44 < sinclair__> var root = root || {};
10:44 < sinclair__> root.UnitA = root.UnitA || {};
10:44 < sinclair__> at the top?
10:44 < kaizokuace> it compiles 
10:44 < sinclair__> yeah, i got that far :)
10:44 < sinclair__> have you tried running it in node tho ?
10:44 < kaizokuace> yea 
10:44 < kaizokuace> no errors
10:45 < sinclair__> kaizokuace: i kinda need to exports tho, they are resolved as commonjs exports
10:46 < kaizokuace> oh
10:46 < kaizokuace> http://pastebin.com/ykhv0QR9
10:46 < kaizokuace> that was the output i got
10:46 < kaizokuace> anyway i will look over more
10:46 < kaizokuace> night night for real this time!
10:47 < AAA_awright> Remind me to ping TooTallNate when he gets in
10:48 < AAA_awright> Or whoever works on the Node build
10:48 < AAA_awright> I guess that would be bnoordhis
10:48 < AAA_awright> How would I go about sticking a build instruction into a Makefile
10:49 < AAA_awright> *bnoordhuis
11:06 < pixie79> hi - is there an unless operator? currently i have a 'if (pathArray[i].match('done')) {' but i really want unless the match do
11:07 < RLa> pixie79, there is not
11:08 < RLa> use !
11:08 < pixie79> so 'if !(pathArray[i[.match('done'))' ?
11:10 < RLa> no
11:10 < RLa> if (!condition)
11:10 < pixie79> ok thanks
11:11 < RLa> if you want unless and all that maybe look at coffeescript
11:11 < RLa> tho i would learn js first
11:26 < AAA_awright> I assumed Node.js could parse / slashes on Windows?
11:42 < Wizek> Is there anyone here using stylus?
11:42 < tornad> I have an old Espon Stylus Color... it works ? :)
11:43 <@mbalho> get a wacom
11:43 <@mbalho> enter the 21st century
11:43 <@mbalho> oh wait epson stylus was a printer
11:43 < SomeoneWeird> lol
11:48 < phrearch> hi
11:48 < phrearch> is there a library that takes care of handling console command arguments>
11:48 < phrearch> ?
11:49 < Kakera> phrearch, https://github.com/substack/node-optimist
11:49 < phrearch> like i want to do something like ./myapp command param1 param2 in a streamlined manner
11:49 < phrearch> Kakera: thanks!
11:49 < ivasilov_> Wizek: what was your question about stylus?
11:50 < Wizek> ivasilov_, It seems when I do "stylus -w style.styl" and I save a file with a change, stylus will compile it multiple times. Is this a known bug on their part, or do I do somwthing wrong?
11:50 < Wizek> ivasilov_, I get "compiled style.css" multiple times
11:52 < ivasilov_> Wizek: no idea.
11:52 < Wizek> ivasilov_, Do you use --watch?
11:59 < rgb247> anyone can help me to setup socket.io on a client-side?
12:00 < ivasilov_> Wizek: I stopped using stylus 6-7 months ago.
12:00 < Wizek> ivasilov_, In favor of?
12:00 < ivasilov_> Wizek: SCSS
12:01 < rgb247> I've installed socket.io using npm and I've created a client.php where I've put a: <script src="/socket.io/socket.io.js"></script>
12:01 < Wizek> ivasilov_, I myself use that as well. What's the reason you prefer scss over stylus?
12:01 < rgb247> but there is no /socket.io/socket.io.js
12:02 < rgb247> there is a only folder: node_modules
12:02 < Gottox> rgb247: in order to use socket.io, you have to point the socket.io.js to the node-server.
12:02 < Gottox> not to the server running php.
12:03 < Gottox> -socket.io.js+script tag.
12:03 < rgb247> Gottox: and how can I combine PHP with the client side?
12:03 < rgb247> Gottox: I know that I can start the node.js server with socket io and browse through to it.. but that isn't what I want
12:04 < Gottox> bidirectional connections are hard todo in php.
12:04 < Gottox> but there's something on stackoverflow about this topic
12:04 < Gottox> http://stackoverflow.com/questions/6398887/using-php-with-socket-io
12:05 < rgb247> Gottox: I want to make a chat user-to-user
12:05 < rgb247> Gottox: what technologies you suggest me to use
12:06 < Gottox> If you like to stick with PHP, I would suggest to poll the server every x-seconds for new messages.
12:07 < Gottox> or use this php-websocket implementation.
12:07 < Gottox> but I never used websockets on php.
12:07 < rgb247> Gottox: can't I use websocket from HTML5 to do that?
12:08 < Gottox> yea, but the serverside must support them.
12:08 < rgb247> yes, there is a node.js module for websocket
12:09 < rgb247> but I don't know how to get sessions
12:10 < zonetti> how do you guys watch node's memory usage?
12:10 < Gottox> either you talk directly from node to the database or you write a bus between PHP and node.
12:10 < Gottox> using the httpclient of node.
12:33 < path[l]> hi, if I use a git url in my package.json, shrinkwrap seems to fail, any idea why?
12:46 < phrearch> hm, anyone knows how to initiate winston logging without any transport?
12:46 < phrearch> i would like to add transports based on conditions
12:47 < phrearch> but have the logger available at any time
12:48 < pixie79> hi all, i have just put a package on npm but it seem to be failing to install with a perms error but i am not sure why or where - https://gist.github.com/4045510
13:02 < phrearch> hm when making an app executable, how can i still use --debug ?
13:02 < phrearch> im using #!/usr/bin/env node
13:05 < onr> add --debug
13:05 < deoxxa[cookies]> or just do it the exact same way you normally would
13:06 < deoxxa[cookies]> $ node --debug some-silly-thing.js
13:08 < phrearch> hm yea 
13:08 < phrearch> good idea
13:09 < phrearch> cant be set while running the app?
13:09 < phrearch> like ./myapp.js --debug, and then switch on the debugger within the code 
13:20 < phrearch> ehm, settings process.title should change the process name shown in ps -A|grep myappname ?
13:20 < phrearch> the process is still 
13:20 < phrearch> 'node'
13:21 < xcat> So I was hoping I could just dump an object to the HTTP response and it would be json
13:21 < xcat> But it's not
13:21 < xcat> It's an exception
13:21 < xcat> So how do I output json?
13:23 < phrearch> ehm, json encode it?
13:23 < phrearch> with express, i think you can use something like res.json({})
13:23 < phrearch> JSON.stringify?
13:23 < aandy> if you don't use a library which supports it, then JSON.stringify(obj), and set response content-type to application/json or similar
13:23 < xcat> I'm not using any extensions
13:24 < syskk> has anyone ported Node.js to Android/iOS?
13:24 < SomeoneWeird> <phrearch> ehm, settings process.title should change the process name shown in ps -A|grep myappname ? < huh
13:25 < phrearch> SomeoneWeird: shouldnt it?
13:25 < SomeoneWeird> it should
13:25 < SomeoneWeird> and it works fo rme
13:25 < phrearch> http://paste.kde.org/600704/
13:26 < phrearch> this code doesnt for me. am i doing something wrong?
13:26 < SomeoneWeird> it changed the actual process name
13:26 < SomeoneWeird> not the title
13:28 < phrearch> ehm, ps -A doesnt show process names?
13:28 < phrearch> sorry, im a noob :)
13:28 < CestSebastian> hey guys, process.title doesn't always set the process title. I'm using htop to see the processes.
13:29 < phrearch> same here
13:31 < phrearch> ah works here
13:31 < phrearch> ok, ps -A shows then process titles
13:31 < phrearch> i should have the process name i suppose
13:32 < phrearch> ps -Aef|grep myappname
13:32 < phrearch> :)
13:32 < SomeoneWeird> :)
13:41 < phrearch> is there an easy-to-use console input handler for node? or should i just use process.openStdin
13:44 < Kakera> should I end() a socket before destroy()ing it?
13:44 < Kakera> considering that I expect the server to end it from their side within the next second
13:45 < xcat> How do I split up my project and include other files?
13:56 < SomeoneWeird> xcat, however you want, and require()
13:57 < xcat> Does it have to be a module?
13:57 < SomeoneWeird> ?
13:58 < ivasilov_> xcat: what do you mean "a module"?
13:58 < xcat> Does it have to be code exported with module.exports?
13:58 < SomeoneWeird> yes
13:58 < ivasilov_> xcat: yes
14:17 < HardFu> I have a question regarding approach
14:17 < HardFu> we're doing push notifications shrough faye (websockets)
14:17 < HardFu> now a user might get notified, but in the event that he's right at doing a page refresh (DOM not loaded yet)
14:18 < HardFu> how can we make sure that message gets delivered after he connects
14:34 < superjoe> HardFu, can't you handle that the same way you handle the client not being connected at all?
14:34 < HardFu> yes, in that case the message is ditched
14:34 < superjoe> so what's wrong with ditching the message when the dom is not ready?
14:34 < HardFu> I'd like to show it after dom is ready
14:34 < superjoe> why
14:35 < HardFu> because otherwise it's lost
14:35 < HardFu> I want to send a notification to a logged in user
14:35 < superjoe> same as if the client had connected milliseconds later
14:35 < superjoe> anyway I don't think this is a node.js question
14:35 < HardFu> it's not, but it's built on node.js so it is relevant
14:47 < bingomanatee> morning node
15:11 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:11 < vicapow> so guyes
15:11 < vicapow> guys
15:12 < vicapow> nm
15:15 < bigkevmcd> HardFu: you need to ack your messages from the browser, and if you don't get an ack, you need to resend, gets complex...
15:17 < HardFu> hm yeah
15:18 < niggler> what's the node way of passing callbacks to and from a module?
15:18 < niggler> meaning, do i just expose the callback as an export and let clients set it
15:18 < niggler> or do i write a get/set for that callback
15:22 < RLa> niggler, i expose here an event emitter instance, as mymodule.events
15:22 < niggler> how does browserify handle it
15:22 < RLa> no idea
15:22 < RLa> 'events' module itself should be broseryfiable
15:23 < RLa> so i guess it just works
15:34 < peterrs> so.. i've been working on getting pseudo terminals (pty) going on windows.. it now works with xterm, cygwin, win32 console & friends.. everything is working great now, besides i cannot get node.js to connect to my full duplex pipes
15:35 < peterrs> testing the terminals natively (with libuv works fine) but when connecting via net.connect() it goes fubar and times out..
15:36 < bradleymeck> peterrs: net.connect on windows had something about this i remember
15:36 < bradleymeck> piscisaureus_: ^
15:44 < peterrs> bradleymeck, hm.. from what i can tell, there has to be security issue.. because if you create a named pipe via net.createServer() and then connect to it later via net.connect() it works great, but when connecting to pipes created by another process, its broken.
15:45 < bradleymeck> peterrs: i know wsduplicatesocket requires some back and forth on both sides
15:45 < bradleymeck> im guessing its because they are considered to be in different jobs
15:45 < bradleymeck> it's*
15:48 < niggler> is there anyway with NPM to specify a read me in a format that's *not* markdown?
15:48 <@piscisaureus_> peters: fubar? how?
15:48 <@piscisaureus_> peters: does it work if you run as admin?
15:50 < bradleymeck> niggler: it wants markdown
15:50 < bingomanatee> Hey node, is it fair to say that setInterval 10 pushes its callback using process.nextTick onto the event loop every 10 milliseconds (that its callback is not executing)? 
15:50 < bradleymeck> bingomanatee: not exactly
15:50 < bradleymeck> but close enough for most ppl
15:50 < bingomanatee> I'm all for precision. How would you put it?
15:51 < peterrs> piscisaureus_, fubar = connect ETIMEDOUT
15:52 < peterrs> piscisaureus_, same issue when i tried running as administrator
15:52 <@piscisaureus_> peterss: can you share some code?
15:53 <@piscisaureus_> peterss: ETIMEDOUT should only happen if your pipe "server" fails to accept the connection (e.g. it doesn not call ConnectNamedPipe in time)
15:58 < peterrs> piscisaureus, sure, i'll push the changes to github.. 
16:08 < Ancien> hi 
16:08 < Ancien> i'm using node.js and i have a trouble with the handshack id of socket.io
16:09 < Ancien> but i don't want it to change
16:09 < Ancien> shit
16:10 < Ancien> *i don't want the id to change
16:11 <@isaacs> ircretary: tell shripadk I'm typically sleeping at 07:33 UTC.  Maybe post an issue on the npm repo.
16:11 < ircretary> isaacs: I'll be sure to tell shripadk
16:11 <@isaacs> ircretary: thanks
16:11 < ircretary> isaacs: You're welcome :)
16:14 < niggler> is there a way to indicate in package.json that a global version of a dependency is acceptable?
16:21 < mscdex> niggler: global?
16:21 < niggler> mscdex: so suppose i already have a global version of a module (using npm install -g).  
16:22 < niggler> i want to be able to specify in the package.json that it is acceptable to use that version
16:22 < niggler> but i think in this case it might be easier to make that a dev dependency
16:22 < mscdex> not that i'm aware of
16:27 < Tobsn> someone here using mongoose? their channel is pretty dead
16:27 < kevBook> Has anyone deployed on Heroku?
16:27 < generalissimo> not in a while, but yes
16:27 < sea6ear> I've played with mongoose a little
16:27 < Tobsn> everyone here i guess ;)
16:28 < Tobsn> sea6ear, any idea how i define an unknown number of children but within the children a specific schema?
16:28 < kevBook> An array
16:28 < generalissimo> kevBook: only thing i'd say is tricky about it is if you use socket.io anywhere, you have to configure it to do long-polling
16:28 < generalissimo> or just deploy to nodejitsu instead
16:28 < kevBook> I want a custom library installed 
16:28 < Tobsn> its kinda like { parent: { n: [ n: [ name: String, id: Int ] ] } }
16:29 < generalissimo> kevBook: how do you mean?
16:29 < kevBook> they have something called buildpacks, cant fingure out how to do that
16:29 < sea6ear> oops, maybe the wrong mongoose, I've used the mongoose embedded web server, is that what you meant?
16:29 < Tobsn> nah i meant the mongodb ORM lib
16:29 < kevBook> http://fukuchi.org/works/qrencode/index.html.en
16:29 < Tobsn> :)
16:29 < kevBook> i want to install this
16:29 < sea6ear> ah, heh - sorry then
16:29 < Tobsn> :/
16:31 < generalissimo> kevBook: i'm guessing you've got some speed concerns? otherwise there's this: https://github.com/soldair/node-qrcode
16:31 < generalissimo> doesn't seem to need the C lib
16:33 < kevBook> This does requrie C lib
16:33 < kevBook> If you goto Install section
16:33 < kevBook> this is what i am using 
16:33 < kevBook> its just node.js api that that C lib
16:34 < kevBook> ahh it requires   sudo apt-get install libpixman-1-dev libcairo2-dev 
16:34 < generalissimo> bahhh, yeah, sorry
16:35 < generalissimo> does heroku do node-gyp native extension builds?
16:35 < exit2> How do you guys feel about geddy?  I'm new to Node.js and I'm looking at the different web frameworks
16:35 < generalissimo> exit2: i'm partial to express
16:36 < generalissimo> it just feels more natural than anything else in node
16:36 < generalissimo> but then i prefer sinatra to rails in ruby
16:36 < generalissimo> so it's clear i have a bias toward small and simple
16:36 < generalissimo> over swiss-army-knife frameworks
16:41 <@isaacs> generalissimo: i agree with your sentiment, but not your conclusion
16:41 <@isaacs> generalissimo: express is pretty swiss in its army of knives
16:41 < exit2> I tend to like swiss army style stuff for beginner things
16:41 <@isaacs> exit2: don't use frameworks.  just use a router and a template engine and maybe some model thingies
16:41 < generalissimo> isaacs: i agree with your disagreement with my conclusion
16:41 <@isaacs> generalissimo: :)
16:41 < generalissimo> after i said it i was like
16:41 <@isaacs> exit2: express is very handy, for sure.
16:42 < generalissimo> "hmmm, that's a super-subjective term"
16:42 < exit2> isaacs: I mean mostly I would something like connect
16:43 <@isaacs> the thing about express is that it's basically a pretty nice router, a decent controller-stacking pattern, and a good template engine.
16:43 < exit2> I'm trying to get away from my Django/Python world and be full stack with JS
16:43 <@isaacs> but these things interact by decorating objects, rather than by existing in isolation and just doing their jobs
16:43 <@isaacs> also, there's a bunch of decorator methods and stuff like res.json(obj) that should really just be either part of node's http lib, or a standalone sendJson(res, obj) method
16:43 < exit2> isaacs: and there website sure it's puuurty..
16:44 < exit2> *is
16:44 <@isaacs> exit2: well, tjholowaychuk has a keen eye for design, for sure.
16:44 <@isaacs> always has, that i've seen
16:44 < exit2> agreed
16:44 < generalissimo> i need to update my express boilerplate project
16:44 <@isaacs> i've kind of gone back and forth, so i might change this opinion eventually, but i've found that decorating shared objects is kind of brittel.
16:44 < exit2> I strive to be a JS ninja and get away from my dependency on ruby or python
16:44 < generalissimo> it's still using mongoose-auth instead of passport
16:44 <@isaacs> exit2: that is a worthwhile goal
16:45 < exit2> isaacs: I feel like I would just be a better person in life if that was the case :D
16:45 <@isaacs> exit2: so... i'm totally not saying this in a gfy kind of way... but you should take a weekend and read the EcmaScript spec
16:45 < generalissimo> O_o
16:45 < generalissimo> ...really?
16:45 < exit2> isaacs: I don't take it in a gfy kind of way and I will do so
16:46 <@isaacs> exit2: it's dense.  but even if you don't actually remember or unerstand all of it, just sprnkling it on your brain will make it SOOOO much easier to learn js
16:46 <@isaacs> if only to remember "Wait.. that reminds me of that thing I read... lemme look that up again"
16:46 <@isaacs> when you see some odd pattern or something
16:46 <@isaacs> generalissimo: absolutely
16:46 <@isaacs> i mean, reading the ES spec shoudln't be the *first* thing you do to learn js
16:46 < exit2> isaacs: at this point I'm the guy who has just had to use JS here and there for quick solutions in web apps while I want to be the guy who uses it for everything I can
16:47 <@isaacs> but once you're writing programs and they kinda work, yeah, definitely do it
16:47 < generalissimo> isaacs: i think the thing people who've got the syntax down have the most trouble with is closures
16:47 <@isaacs> exit2: advice #2: be aware that everyone has dogma, and you will have dogma, and then you will realize that that dogma was wrong, and replace it with new dogma, which you will eventually realize was also wrong.  be compassionate with yourself through this process.
16:48 <@isaacs> generalissimo: and closures are *only* explained properly in the spec, in my experience
16:48 <@isaacs> exit2: that dogma-switching thing happens in all langauges, but for some reason, it's so much worse in js than in most.  maybe because there's so many ways to do things.
16:48 < exit2> isaacs: very Buddhist approach, I've always kind of been that way with programming though.  I feel like it's a continual learning process and should always be expecting a challenge 
16:49 <@isaacs> exit2: yeah.
16:49 < exit2> namaste ahah
16:49 < exit2> isaacs: http://www.ecma-international.org/publications/standards/Ecma-262.htm - this right? :|
16:49 < generalissimo> isn't that a hindu term? :p
16:49 < exit2> generalissimo: I have no clue haha
16:50 < generalissimo> i think the buddhists mostly say "shanti"
16:50 < exit2> generalissimo: ohm shanti
16:50 <@isaacs> Lokah Samasta Sukhino Bhavantu
16:50 < exit2> my wife is a yoga teacher so I'm just ripping off things she says haha
16:50 <@isaacs> offer the benefit of your practice to all beings
16:51 <@isaacs> programming and yoga are so very similar.
16:51 < exit2> isaacs: it's true
16:51 < generalissimo> i studied a lot of eastern religion for distribution requirements when i was in college
16:51 <@isaacs> all about managing frustration, pushign forward, breathing, etc.
16:52 < generalissimo> my philosophy when doing something new is: stop trying to be clever and write the boilerplate
16:52 <@isaacs> you ever notice that whenever they show a yoga class in a tv show or movie, a) people talk to each other a lot, and b) it's "relaxing"
16:52 < generalissimo> writing a lot of boilerplate in a new language makes you learn what kind of patterns emerge
16:52 < generalissimo> and *then* you can start trying to find ways to make those patterns more concise
16:53 <@isaacs> generalissimo: i kind of agree, but i think i'ts important to realize that the boilerplate is not the goal, it's the tool.
16:53 <@isaacs> generalissimo: there was a thread recently on the node list about class lib thingies
16:53 <@isaacs> generalissimo: newcomer comes to the list, all happy, "Hey, check out this class thing I wrote to do OOP in JS!"
16:53 < generalissimo> isaacs: well i even have experienced devs sometimes asking me about this or that design pattern they're trying to do
16:54 <@isaacs> which is great... that he's happy about it... but... eventually he'll realize that it's not helpful, in the end.
16:54 < exit2> Do you guys have any book recommendations?
16:54 < generalissimo> and usually the best solution is to start writing boilerplate and figure out what is becoming repetitive
16:54 < exit2> as side from the general crockford stuff
16:54 <@isaacs> exit2: you should read Javascript: The Good Parts, not because it's a good book, but for the same reason that you should read the bible, just to know what the ideology is.
16:54 <@isaacs> exit2: and the ES spec
16:55 < generalissimo> otherwise you're just sort of making a solution based on a mere guess about the problem
16:55 <@isaacs> exit2: and JavaScript The Definitive Guide is, well, definitive.  but a lot of it is just a reference for the DOM and such
16:55 <@isaacs> exit2: i've always found that reading code is better than reading books about code.
16:55 <@isaacs> exit2: read through node's lib/ folder.
16:55 < exit2> isaacs: how about the secrets of the javascript ninja?
16:55 <@isaacs> exit2: or, actually, start with src/node.js
16:55 <@isaacs> exit2: i haven't read it
16:56 <@isaacs> exit2: i figure that a true ninja wouldn't share their real secrets.
16:56 < exit2> isaacs: ah..
16:56 < exit2> haha
16:57 < exit2> isaacs: I have always found that jumping in a trying to accomplish a project you've done in another language helps learn things quickly
16:57 < exit2> because you know what you want to accomplish, just need to find a way to do it in the new language
16:57 < generalissimo> exit2: make a todo list app (jk)
16:58 < exit2> generalissimo: haha
16:58 < generalissimo> i could write 10 pages on why i hate todo list examples...
16:58 < exit2> generalissimo: write a tutorial on why you should not make a todo list app
16:58 <@isaacs> exit2: the best way you can learn js, and node, is by fixing node bugs.
16:58 < exit2> isaacs: example?
16:59 <@isaacs> exit2: https://github.com/joyent/node/issues
16:59 < exit2> oh that :)
16:59 < niggler> oh isaacs issue with npm
16:59 < tiagoa> there's a way to measure websocket latency?
17:00 < niggler> when used in a program, what's the opposite of "npm install"
17:01 < shripadk> someone here experienced this weird issue: when building a C++ add-on, "node-gyp rebuild" fails while "node-gyp configure && node-gyp build" works. Any idea what might be causing this issue?
17:01 < generalissimo> tiagoa: i just throw a couple messages back and forth and have the client and server both stamping them
17:01 <@isaacs> niggler: is this a trick question? :)
17:01 < niggler> generalissimo: you should be comparing the times
17:02 <@isaacs> niggler: npm rm
17:02 < niggler> *on the same server
17:02 < tiagoa> generalissimo: br?
17:02 < shripadk> isaacs: help! :)
17:02 < generalissimo> tiagoa: ??
17:02 < niggler> isaacs: but if you are using this for a program, it gives an error "not installed"
17:02 < tiagoa> generalissimo: are you brazilian?
17:02 < niggler> not for a module
17:02 <@isaacs> niggler: ok, well... it's not installed
17:02 < generalissimo> niggler: i guess it depends on the goal. i'm usually trying to get the client to match the server time.
17:02 <@isaacs> niggler: i don't get it
17:02 < niggler> isaacs: what i want to do is remove the dependencies
17:03 < generalissimo> tiagoa: no, american
17:03 <@isaacs> niggler: oh, so, it's not installed at the top level, then?
17:03 < shripadk> isaacs: how do i configure npm (via package.json) to run "node-gyp configure && node-gyp build" instead of "node-gyp rebuild" ?
17:03 <@isaacs> niggler: what's your actual goal?
17:03 < niggler> so the default behavior of npm install is to read the package.json and install the dependencies
17:03 <@isaacs> shripadk: don't do that.  use rebuild.  what npm version are you using?
17:03 < niggler> i want to do the opposite of that: read the package.json and remove the dependencies
17:03 <@isaacs> niggler: oh, well, there's no way to do that
17:03 < niggler> oh ok
17:03 <@isaacs> niggler: i see, you mean the opposite of npm install <noargs>
17:03 <@isaacs> got it
17:03 < shripadk> npm -v: 1.1.65
17:03 <@isaacs> niggler: rm -rf node_modules?
17:03 <@isaacs> shripadk: gist your output
17:03 < shripadk> node -v: v0.8.14
17:04 < shripadk> okay jas
17:04 < niggler> that does work but i was hoping there was a way within npm to do it 
17:04 < generalissimo> niggler: nope
17:04 <@isaacs> niggler: nah.  not any real use for it usually
17:04 < niggler> for git :/
17:04 < niggler> should i just add node_modules to gitignore
17:04 < tiagoa> generalissimo: your solution use timestamp with new Date().getTime() ?
17:04 <@isaacs> niggler: yes, that's the way to do that
17:04 < generalissimo> niggler: .gitignore
17:04 <@isaacs> niggler: echo node_modules/ > .gitignore
17:05 < niggler> isaacs you mean >> :)
17:05 < generalissimo> tiagoa: are you looking to get the client's time offset from the server?
17:05 < niggler> generalissimo: you have the server send a message with its timestamp and have the client send a message with the original timestamp from server
17:06 < tiagoa> yes 
17:06 < generalissimo> tiagoa: yeah what niggler said
17:06 < tiagoa> niggler: thanks I'll try it
17:06 < shripadk> isaacs: output from npm: https://gist.github.com/4046882
17:07 < shripadk> isaacs: binding.gyp : https://gist.github.com/4046878
17:16 < tnorris> isaacs: been running some perf tests, and was thinking that it may be useful to back a Buffer with a DataView. All the DataView `set` methods are about 2xs as fast as the current Buffer `write` methods.
17:19 < shripadk> isaacs: the same with "node-gyp configure && node-gyp build" (works): https://gist.github.com/4046940
17:22 < tnorris> bnoordhuis: you wrote the current DataView implementation. have a moment to chat about it?
17:22 <@isaacs> shripadk: 
17:22 <@isaacs> cpuinfo.c: In function 'main':
17:22 <@isaacs> cpuinfo.c:33:9: warning: incompatible implicit declaration of built-in function 'exit' [enabled by default]
17:22 <@isaacs> sigar_ps.c: In function 'main':
17:22 <@isaacs> sigar_ps.c:33:9: warning: incompatible implicit declaration of built-in function 'exit' [enabled by default]
17:22 <@isaacs> shripadk: ^ what's that all about?
17:23 < shripadk> its part of the hyperic sigar build process
17:23 < shripadk> https://github.com/hyperic/sigar
17:23 < shripadk> but it doesn't show up when i do node-gyp configure && node-gyp build
17:27 < shripadk> isaacs: i'll include stdlib.h and see if it builds.
17:27 < shripadk> its a warning
17:28 < shripadk> so i don't think that might be the cause
17:35 <@isaacs> shripadk: hm.  i dunno
17:35 <@isaacs> shripadk: maybe bug TooTallNate
17:35 <@isaacs> shripadk: looks like something with node-gyp or the compilation of that thing
17:36 < shripadk> isaacs: true. i tested it with node-waf and it works perfectly fine.
17:36 < shripadk> i'll bug TooTallNate
17:36 < shripadk> thanks a lot :)
17:43 <@isaacs> shripadk: in the meantime, though this is NOT the ideal approach, you can explicitly set the "scripts":{"install":"blahblahblah"}
17:43 <@isaacs> shripadk: in package.json
17:43 < shripadk> yes i'm doing that
17:43 <@isaacs> shripadk: but some day in the future, that will stop working, and it's not very portable.
17:44 < shripadk> but what i'm worried is
17:44 < shripadk> how will it work on systems which don't have node-gyp
17:44 < shripadk> and instead have node-waf?
17:44 < shripadk> isaacs: true.
17:46 < shripadk> isaacs: funnily.. node-gyp configure && node-gyp build failed too (via NPM's scripts: {preinstall: "node-gyp configure", install: "node-gyp build"} )
17:47 < shripadk> it works locally though
17:48 < rump> ive tried a dozen variations but i cant require all the in-directory .js files and pass them server..  edu me plz! https://gist.github.com/4046722
17:49 < codeThatThinks> trying to build on debian 64-bit, but I'm getting "make: *** [node] Error 2"
17:53 < kirkstrobeck> i don't understand the example on the homepage
17:53 < kirkstrobeck> Here is an example of a simple TCP server which listens on port 1337 and echoes whatever you send it:
17:53 < kirkstrobeck> how can you send it something?
17:54 < visnup> kirkstrobeck: nc or telnet
17:55 < visnup> or bash's /dev/tcp/host/port device
17:57 < vicapow> any recommendations on the best static site generator in node? i'd prefer anything that offers a jade/less setup
17:57 < tiagoa> niggler: using your solution I get 1463 of latency in my test with 1000 connections to my WS server. It's correct?
17:57 <@isaacs> shripadk: probably something to do with running as root vs nobody?
17:58 <@isaacs> shripadk: i see a notice in there about switching from uid=0 to uid=501
17:58 <@isaacs> shripadk: er, root vs your-username
17:59 < niggler> 1463 nsec or usec or msec or sec?
17:59 < shripadk> isaacs: i see the same for node-waf too: "npm verb set uid from=0 to=501" but it builds just fine
17:59 <@isaacs> shripadk: ok
18:00 < shripadk> isaacs: i also have multiple c/c++ compilers (gnu c++ and clang) maybe a conflict somewhere?
18:01 < shripadk> it was conflicting when i used 0.6.6
18:01 < shripadk> i had to do: sudo CXX=clang node-waf configure build / node-gyp configure build
18:01 < shripadk> with 0.8.14 it doesn't complain anymore
18:01 < shripadk> (node-waf that is)
18:02 < kirkstrobeck> what is nc or telnet?
18:02 < shripadk> isaacs: which version of node is node-waf deprecated?
18:04 <@isaacs> shripadk: 0.9
18:04 < shripadk> okay thanks :)
18:05 < tnorris> shripadk: so that's how you do it correctly. I just symlinked clang to gcc and it worked great...
18:05 < exit2> isaacs: I'm reading through the ECMA spec o_0
18:06 < kirkstrobeck> i am a noob as far as node goes
18:06 < CoverSlide|TPFR> we're all noobs at some point
18:06 < shripadk> tnorris: true. but it works without npm for me. the moment i publish to npm and install from npm it fails :(
18:06 < tnorris> kirkstrobeck: nc is useful when you want to connect to a socket file (e.g. `nc -U <path_to_socket>`)
18:06 < kirkstrobeck> so how do i send it something with telnet/
18:06 < kirkstrobeck> ?
18:07 < visnup> kirkstrobeck: telnet localhost 1337
18:07 < tnorris> kirkstrobeck: well, first you need to open a net socket on a port, or socket file, then connect using telnet/nc respectively. then just typed something and hit return
18:07 < visnup> kirkstrobeck: and then type at it
18:08 < kirkstrobeck> http://see.kirkstrobeck.com/KnuB
18:08 < tnorris> shripadk: hm, strange. haven't tried publishing a package to npm that requires building.
18:08 < kirkstrobeck> so i'm using the second example from the node homepage
18:09 < kirkstrobeck> what exactly do i type in terminal?
18:09 < tnorris> kirkstrobeck: anything you want. it just echos whatever you type in.
18:09 < shripadk> tnorris: node-waf is my savior for now :) spent an entire day getting node-gyp to work :(
18:09 < kirkstrobeck> no, it doesnt
18:09 < kirkstrobeck> http://see.kirkstrobeck.com/KnvB
18:11 < tnorris> kirkstrobeck: I don't see you having typed anything in on your screenshot.
18:11 < kirkstrobeck> ?
18:11 < tnorris> kirkstrobeck: type "hello world" and hit enter after you connect w/ telnet.
18:11 < tnorris> you should see a duplicate of your message appear in the screen.
18:12 < kirkstrobeck> i should, but i dont
18:12 < kirkstrobeck> i run http://127.0.0.1:1337/
18:12 < kirkstrobeck> is it because its running in chrome?
18:13 < tnorris> shripadk: so you're migrating from waf to gyp?
18:13 < kirkstrobeck> http://see.kirkstrobeck.com/Knrj
18:13 < kirkstrobeck> it just spins
18:13 < shripadk> tnorris: wanting to so i can support windows too
18:14 < tnorris> kirkstrobeck: yeah, it's a net socket that doesn't return anything. your browser is spinning because it's waiting for a http header response.
18:15 < kirkstrobeck> then I'm very confused
18:15 < tnorris> shripadk: now I feel lucky I didn't get into building my own addons until after gyp was being used.
18:15 < kirkstrobeck> where do i see it echo?
18:15 < shripadk> tnorris: this is the first time i actually had difficulty doing something in Node :P
18:15 < shripadk> never thought i would say that
18:16 < tnorris> heh, that's good to hear.
18:16 < tnorris> kirkstrobeck: connect using `telnet 127.0.0.1 1337`. after you see the "Echo Server" message type anything into the console and hit [Enter]. what do you see?
18:17 < kirkstrobeck> http://see.kirkstrobeck.com/Kngh
18:17 < shripadk> eyes burning… coffee time
18:17 < kirkstrobeck> http://see.kirkstrobeck.com/Knqk
18:18 < kirkstrobeck> what is telnet?
18:18 < kirkstrobeck> a way of looking at the raw console, like tail on a log?
18:18 < tnorris> kirkstrobeck: um.... do you know what ssh is?
18:18 < kirkstrobeck> yah
18:18 < kirkstrobeck> is it the same?
18:18 < tnorris> telnet is basically ssh without encryption.
18:19 < kirkstrobeck> okay cool
18:19 < kirkstrobeck> these questions are never answered anywhere
18:19 < kirkstrobeck> thx
18:19 < tnorris> np
18:20 < visnup> kirkstrobeck: wikipedia's entry on telnet is pretty good
18:20 < visnup> telnet: sending you bytes since 1969!
18:21 < tnorris> lol
18:21 < denysonique> fs.watch only seems to stop watching my file...
18:21 < denysonique> e.g. once the callback gets called with the 'change' event the callback never gets called on any further events
18:22 < denysonique> code: https://gist.github.com/1042395a4bef436e7d95
18:23 -!- mode/#node.js [+o ryah] by ChanServ
18:25 < denysonique> heh
18:25 < denysonique> that seems to be bug
18:25 < denysonique> in fs.watch
18:25 < denysonique> https://github.com/joyent/node/issues/3172
18:27 < TooTallNate> shripadk: did you have any questions?
18:27 < tiagoa> niggler: msec 
18:31 < tnorris> TooTallNate: I've noticed that the DataView `get`/`set` methods are about 2x's as fast as Buffer's current `read`/`write` methods. you think it would be worth investigating reimplementing them with DataView's methods?
18:35 < jtane> hello. never used irc before - forgive any etiquette faux pas
18:35 < jtane> question for anyone: if i do something like
18:35 < jtane> require('child_process').exec("ssh user@host 'ls'")
18:35 < jtane> and the host is not in my known_hosts
18:35 < jtane> i get the interactive stdio action happening in my terminal:
18:36 < jtane> "Are you sure you want to continue connecting (yes/no)?"
18:36 < jtane> even though i haven't done anything with the exec'd process's stdio...
18:36 < jtane> anyone know why/how that works?
18:37 < jtane> or can explain it to me
18:39 < tnorris> jtane: first curios, is it not functioning how you expected?
18:40 < jtane> i would not have expected exec to output to my terminal unless i connected the child's stdout to process.stdout
18:41 < tnorris> jtane: can you post your code?
18:41 < jtane> tnorris: sure, what's the best way to do that here?
18:41 < tnorris> pastebin, gist, ....
18:43 < jtane> tnorris: ok, imean the line i already posted will do it
18:43 < jtane> require('child_process').exec("ssh user@host 'ls'")
18:45 < gavri> the apply function seems to work when an arguments object is passed in instead of an array. is there any reason I shouldn't do this?
18:45 < tnorris> gavri: nope. works fine.
18:45 < TooTallNate> tnorris: compare to the [] operator of Buffer; the read/write methods will always be slower
18:47 < CoverSlide|TPFR> either way, at some point you need to coerce to another datatype
18:47 < jocafa> "When we kiss, girl, it's like magic… the gathering."
18:48 < jtane> tnorris: the user and host have to be real though - i am just testing it with me@localhost
18:49 < tnorris> TooTallNate: So you think it would be worth implementing DataView's methods for in the increased performance?
18:49 < tnorris> jtane: yeah. i'm doing some tests right now.
18:50 < jtane> tnorris: also, it has to be in a script - the repl doesn't do it
18:50 < TooTallNate> tnorris: i'm not sure really the historical reasons for making the Buffer read/write methods be JS-based /cc isaacs 
18:51 < gavri> tnorris: thanks
18:51 < TooTallNate> tnorris: but one advantage of the current impl over DataView methods is that they can read/write from unaligned offsets
18:52 < tnorris> TooTallNate: what do you mean by unaligned?
18:53 < CoverSlide|TPFR> perhaps it was simply easier to maintain. who put those methods in initially? I'm sure someone could patch and banchmark
18:53 < TooTallNate> tnorris: in C, the compiler will usually only read/write an "int" for example from a memory address aligned to sizeof(int)
18:53 < CoverSlide|TPFR> *benchmark
18:53 < CoverSlide|TPFR> but you know, someone would have to care enough to do it
18:54 < wankdanker> jtane: if you don't specify the stdio array on in the exec options object, it will deffault to piping fds 0,1 and 2
18:54 < tnorris> TooTallNate: I think bnoordhuis implementation allows (src/v8_typed_array.cc; ln730; setGeneric)
18:55 < q_no> what's the best (common) approach to "connect" 2 node processes in a LAN ? I want them to share some data 
18:56 < wankdanker> jtane: require('child_process').exec({stdio : ['ignore','ignore','ignore']},'ssh me@localhost ls'); // will cause the prompt to not be displayed
18:56 < tnorris> CoverSlide|TPFR: is what Brian White, back in 09.
18:56 < jtane> wankdanker: how come if i try to exec this: https://gist.github.com/4047501
18:56 < jtane> wankdanker: nothing happens by default?
18:56 < TooTallNate> tnorris: new Int16Array(Buffer(8).slice(1));
18:56 < TooTallNate> RangeError: Byte offset / length is not aligned.
18:57 < jtane> wankdanker: or nothing happens on my main process's stdio
18:57 < tnorris> TooTallNate: i'm not talking about typed arrays, i'm talking about a dataview.
18:57 < tnorris>  new DataView(new Buffer(<any_size>))
18:59 < tnorris> the DataView object returns with methods essentially the same as the read/write methods on Buffer. except they're twice as fast.
19:00 < tnorris> ah, ok mscdex created the current implementation of read/write on buffer. didn't recognize him by his name.
19:00 < dscape> isaacs: using node-tap, i have something where all asserts are finished but the program doesnt exit
19:00 < dscape> rings a bell?
19:01 < mmalecki> dscape: do you .plan or .done()?
19:01 < dscape> I plan
19:01 < dscape> but dont do done
19:01 < TooTallNate> tnorris: ya you're right, seems like it works, even unaligned
19:01 < dscape> mmalecki: problem is i have an open server
19:02 < dscape> and need to close it
19:02 < mmalecki> dscape: .close it
19:02 < dscape> when? :)
19:02 < wankdanker> jtane: good question. i see what you are saying and do not have a good answer for you. :-/
19:02 < tnorris> TooTallNate: issue is that initializing a DataView takes about 10x's longer than a Buffer. So I'd like to expose DataView's methods for Buffers to use.
19:03 < jtane> wankdanker: yeah, just trying to understand the difference between that and what ssh is doing!
19:03 < mmalecki> dscape: when... it should be closed? when tests are done?
19:03 < jtane> wankdanker: thanks though
19:03 < dscape> got it
19:03 < dscape> sily question
19:03 < TooTallNate> tnorris: doesn't look like they implement both BE and LE versions though
19:03 < dscape> mmalecki: thanks
19:03 < dscape> i was being dumb
19:04 < dscape> (the usual)
19:04 < wankdanker> jtane: yeah, i would have expected the bevior to be the same. good luck. :)
19:04 < mmalecki> dscape: yeah, yeah, I know :)
19:04 < tnorris> TooTallNate: yeah, it's BE by default. but if you pass "true" as the third argument then it switches to LE.
19:04 < TooTallNate> tnorris: oh i see
19:06 < tnorris> TooTallNate: mscdex did the initial implementation back in '09, but bnoordhuis didn't implement typed arrays or dataviews until '11
19:06 < dscape> mmalecki: at least i dont do cowboy devops :\
19:06 < dscape> damn wrong #
19:06 < TooTallNate> bnoordhuis: mscdex: well weigh in guys
19:07 < bnoordhuis> tnorris: i didn't implement anything really, i just stole the code from someone else
19:07 < tnorris> lol. well, it's fast and works well.
19:08 < bnoordhuis> TooTallNate, tnorris: i haven't been following the discussion. what's it about?
19:08 < tnorris> bnoordhuis: but even d8 doesn't have DataView implemented yet. remember where you got it?
19:08 < mscdex> eh?
19:09 < mscdex> ^ what ben said
19:09 < tnorris> bnoordhuis: the DataView methods are essentially the same as the current Buffer read/write methods, but twice as fast. I think we should leverage them.
19:09 < bnoordhuis> tnorris: from plask -> https://github.com/deanm/plask
19:09 < bnoordhuis> tnorris: you mean the Buffer.readUint32 etc. methods?
19:10 < tnorris> bnoordhuis: yeah.
19:10 < bnoordhuis> yeah, they're not fast - known issue
19:10 < tnorris> bnoordhuis: but your DataView implementation is. and if they were exposed to Buffer, it would be an easy fix.
19:11 < tnorris> (easy is completely subjective here)
19:11 < mscdex> well, I guess the DataView stuff is all in C++, whereas the Buffer read/write methods are in js
19:11 < mscdex> not sure how much of a difference that makes
19:12 < bnoordhuis> tnorris, mscdex: part of it is that the .read*() methods have too much conditional logic
19:12 < warz> i wrote a simple node addon last night that uses a third party library. ive got it "working", but i do know the library im using performs disk io, and i'm not doing anything special in my addon to account for that. i seem to recall seeing that you're supposed to perform io in a special way, with v8.
19:12 < warz> does anybody know of another node addon that uses a lib that does disk io
19:12 < bnoordhuis> v8 doesn't really know how to optimize or inline them
19:12 < warz> that i could reference?
19:13 < mscdex> warz: use a thread for the part that does i/o ?
19:13 < warz> is that the v8 way? i was thinking i saw something about batons, or something (thats just one of the terms i remember seeing)
19:13 < warz> maybe it wasnt pertaining to v8, then
19:14 < bnoordhuis> warz: not really v8, but node/libuv
19:14 < tnorris> bnoordhuis: the noAssert check shouldn't add much time to execution. was thinking after those expose the DataView methods and have the operation done in c.
19:14 < bnoordhuis> warz: you use uv_queue_work(req, work_cb, done_cb)
19:14 < warz> bnoorduis, ah ok cool thanks. i'll look up that.
19:15 < mscdex> tnorris: iirc performing assertions does slow things down
19:15 < kirkstrobeck> where is the best starter guide to node?
19:15 < kirkstrobeck> i still need to grasp some core concepts
19:15 < tnorris> mscdex: but only if the assertion is present. by default it's not so all the assertions are skipped.
19:15 < bnoordhuis> tnorris: no, it doesn't quite work like that
19:15 < bnoordhuis> tnorris: trace it with --trace-bailout, --trace-deopt, etc.
19:16 < bnoordhuis> tnorris: v8 doesn't handle those methods well
19:16 < bnoordhuis> so yes, there's room for improvement
19:16 < kirkstrobeck> v8 handles tomatoes better
19:17 < mscdex> tnorris: it does do assertion testing by default...
19:18 <@isaacs> dscape: did you call t.end()?
19:18 < tnorris> mscdex: mother @#$. my hopeful optimism must have switched that in my mind.
19:18 <@isaacs> dscape: tap.tearDown(function() { server.close() })
19:19 <@isaacs> dscape: or sometimes i do test('teardown', function(t) { server.close(function() { t.pass('closed'); t.end() }) })
19:19 < Industrial> >> function b(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)} b()
19:19 < purr> Industrial: (string) '6a2da61d-40c8-4300-9df6-783a2f6ec81c'
19:19 <@isaacs> dscape: just for a bit more visibility, and to get an extra point :)
19:19 < Industrial> people are awesome.
19:20 <@isaacs> Industrial: beware that Math.random() is not cryptographically secure.
19:21 <@isaacs> Industrial: you should use crypto.randomBytes() as a source of randomness isntead.
19:21 < tnorris> mscdex: well dammit. setting noAssert to true makes them twice as fast as the DataView methods. well, guess that dream has been crushed.
19:22 < mscdex> tnorris: :-)
19:23 <@isaacs> > crypto.randomBytes(16).toString('hex').replace(/(.{8})(.{4})(.{4})(.{4})(.*)/,'$1-$2-$3-$4-$5')
19:23 <@isaacs> 'e1e0d153-ad60-1969-88b0-e9f30042f1d3'
19:23 <@isaacs> Industrial: ^
19:24 < tnorris> mscdex: only thing that might save time is if noAssert is false, then call the DataView methods. it looks like setGeneric and getGeneric also have the checks built in.
19:26 < tnorris> but how the %$# could the js implementation be twice as fast as c?
19:26 < othiym23> tnorris: the C++ / JS serialization gap?
19:27 < tnorris> othiym23: not familiar with it.
19:27 < othiym23> tnorris: in a lot of situations, all-JS code is going to be faster than C++ because it doesn't have to go through the translation from C++ representations to JS
19:28 < bnoordhuis> tnorris: v8 can't optimize across js -> c++ calls
19:28 < bnoordhuis> tnorris: it's kind of a dead stop for the optimizer
19:28 < bnoordhuis> tnorris: also, marshalling arguments from and to c++ is expensive
19:30 < CoverSlide|TPFR> so what's DataView doing better?
19:30 < tnorris> ok, it's sinking in. thanks.
19:31 < tnorris> CoverSlide|TPFR: well, nothing apparently. It's just that DataView is part of the es6 spec.
19:31 < CoverSlide|TPFR> you were talking about a 2x speed improvement
19:32 < tnorris> CoverSlide|TPFR: yeah, but that's before mscdex pointed out that the assertion tests are on by default.
19:32 < tnorris> for some reason I thought they were off.
19:32 < CoverSlide|TPFR> hmm
19:32 < CoverSlide|TPFR> oh ok
19:32 < tnorris> once I disabled them, the js implementation was twice as fast.
19:32 < CoverSlide|TPFR> yeah i just jumped back into the conversation a minute ago, didn't read that part
19:34 < tnorris> TooTallNate, bnoordhuis, mscdex, othiym23: thanks all for your help and patience.
19:35 < kirkstrobeck> where is the best starter guide to node? I still need to grasp some core concepts
19:36 < bnoordhuis> tnorris: pro tip, you can squeeze out some more performance if you write your own read*() functions
19:36 < bnoordhuis> ones that do simple ors and shifts
19:36 < tnorris> kirkstrobeck: nodejs.org/api/. read from top to bottom.
19:36 < othiym23> kirkstrobeck: the Smashing guide to Node, Tom Croucher's Up and Running with Node
19:37 < Olav__> Anyone know why npm only finds old packages?
19:37 < CoverSlide|TPFR> Olav__: what node version are you on?
19:37 < Olav__> 1.0.106
19:38 < tnorris> bnoordhuis: ah, ok. thanks. and to think I've been serializing arrays of numbers for process to process communication. i'm such a newb.
19:40 < CoverSlide|TPFR> by the way, buffertools is kickass. I'd love the indexOf boyer-moore search to go into core.
19:40 < tnorris> mscdex: so the assertion testing is making the read/write methods 4x's slower. you think the tests could be more concise, or make assert faster?
19:41 < tnorris> CoverSlide|TPFR: ooh, that's pretty.
19:41 < othiym23> why do the assertions need to be enabled by default in production code, anyway?
19:41 < othiym23> is that code still considered experimental?
19:42 < tnorris> othiym23: that's a good point. guess that's why I assumed they were disabled by default.
19:42 < chovy> howdy
19:42 < CoverSlide|TPFR> howdy
19:42 < Olav__> CoverSlide|TPFR: Thanks! I Just downloaded node.js with npm bundeled a few days ago so I thought it would be up to date. New node had a newer version of npm bundeled and it worked perfectly
19:45 < MI6> joyent/libuv: Ben Noordhuis master * f352e40 : Merge branch 'v0.8'  Conflicts: 	test/test-spawn.c 	uv.gyp (+5 more commits) - http://git.io/QhQMlA
19:45 < MI6> joyent/libuv: Ben Noordhuis v0.8 * deeec42 : build: use link_settings, fix typo  * Use link_settings instead of direct - http://git.io/qmejmA
19:54 < GodGinrai> I've searched Google for this and not found very encouraging results, but I thought I'd ask here to make sure
19:55 < FunnyLookinHat> With Socket.IO - is it possible to send data directly from one client to another?
19:55 < GodGinrai> Has anyone gotten node.js and V8 working on SPARC?
19:55 < CoverSlide|TPFR> FunnyLookinHat: the clients are not connected to eachother, only to your server
19:55 < exit2> how does node redis work?  Can I simply npm install redis and go or do I need to also install redis?
19:55 < FunnyLookinHat> CoverSlide|TPFR, that's what I thought - ok thanks for confirming  :)
19:55 < mscdex> GodGinrai: time to upgrade ;-)
19:55 < FunnyLookinHat> exit2, install redis as well
19:55 < CoverSlide|TPFR> exit2: yes, you need redis
19:56 < mscdex> tnorris: dunno
19:56 < exit2> ok sweet thanks
19:56 < GodGinrai> mscdex: Can't.  Enterprise boxes
19:56 < CoverSlide|TPFR> exit2: you can install nedis, but it's not really maintained
19:56 < CoverSlide|TPFR> It's not a supported architecture
19:57 < CoverSlide|TPFR> but I'm sure patches are welcome if you can figure it out
19:57 < CoverSlide|TPFR> not sure it's a supported architecture for v8 as well. that would probably be the biggest hurdle
19:57 < mscdex> GodGinrai: then your best bet is probably some emulation layer, which'll be slow
19:58 < CoverSlide|TPFR> GodGinrai: have you tried just compiling v8?
19:58 < mmalecki> or working for a sane company?
19:58 < CoverSlide|TPFR> haha
19:58 < mmalecki> it's pretty cool, would recommend
19:59 < samholmes> niftylettuce: 
19:59 < samholmes> I need a talk with you
20:00 < tnorris> mscdex: ok. one last question, then my brain will need to recover. what is the reason assertion checks are enabled by default?
20:01 < samholmes> I need to have a talk with niftylettuce.
20:02 < CoverSlide|TPFR> hmm what happens if you do invalidy stuff with noAssert off?
20:02 < samholmes> Basically, I need to figure out how to get both email-templates and email-templates-windows into my project and use the appropriate one.
20:02 < tnorris> CoverSlide|TPFR: one sec, I'll test it out.
20:02 < CoverSlide|TPFR> if you try to read beyond buffer length, could it possibly segfault?
20:02 < GodGinrai> CoverSlide|TPFR: Nah, I haven't gotten that far yet.  Was working through the build process when I found topics talking about V8 not supporting SPARC
20:03 < CoverSlide|TPFR> or fail quietly?
20:04 < CoverSlide|TPFR> hmm i guess it would just fail quietly
20:04 < tracker1> Is there a way to get the script name for a calling function?
20:05 < tracker1> arguments.callee.caller.???
20:05 < nb-ben> any recommended simple sql database for nodejs? im newbie :D
20:05 < nb-ben> maybe there's something builtin to use?
20:05 < tracker1> I can get the main script via process.argv[1] ... but that may not be the one I'm looking for...
20:06 < CoverSlide|TPFR> I guess it's good to fail loudly than expect it to go through and find out it doesn't
20:07 < nb-ben> die before confusion like crockford says :P
20:07 < samholmes> How do I require the right module, niftylettuce. I helped you a while back with windows installation, and what happened that you were able to create a windows version of email-templates. All I did was install the windows version and then renamed the folder and I was able to use require('email-templates') for both windows and linux environments. However, now that my app is more npm-y, with package.json and shiz, I need to
20:07 < samholmes>  include both modules in my dependencies, and I need to require the appropriate module depending on environment.
20:07 < samholmes> How can I quickly tell if the environment is a windows environment or other?
20:07 < niftylettuce> samholmes: hey hey
20:08 < niftylettuce> samholmes: var emailTemplates = require('email-templates-windows')
20:08 < samholmes> niftylettuce: Hey. Sorry for all the annoyance. ;D
20:08 < CoverSlide|TPFR> If you're doing your length checks and all before the read/write* call then you can take advantage of the speed
20:08 < niftylettuce> samholmes: you need to tell which OS you simply use os module
20:08 < samholmes> niftylettuce: Right. But I need this script to work on both linux and windows.
20:08 < samholmes> hmm
20:08 < timeturne> os module
20:08 < tracker1> samholmes, process.arch, process.platform
20:08 < samholmes> I need to write out the dependency in the package.json
20:08 < tracker1> win32, and either x64 or x86 I believe
20:09  * nb-ben is looking for a small embeddable database for node.js, is there any?
20:09 < tracker1> samholmes, if it's binary, you'll probably want to package x64 and x86.
20:09 < niftylettuce> samholmes: http://nodejs.org/api/os.html#os_os_type
20:09 < niftylettuce> samholmes: then switch os.type() like here https://github.com/niftylettuce/node-growl/blob/master/lib/growl.js
20:09 < tnorris> CoverSlide|TPFR: yeah, your correct. it fails silently.
20:09 < tracker1> nb-ben, you could write out json data.. if you don't mind keeping it in memory mostly.... sqlite and firebird both work well.
20:10 < CoverSlide|TPFR> nb-ben: there's tiny, dirty, and nstore, but noone really uses those
20:10 < nb-ben> yeah I was thinking about just saving and loading json files if I couldn't find any
20:10 < nb-ben> like there's this websql thing thought it might be implemented
20:10 < tnorris> CoverSlide|TPFR: though I'm wondering if the assertion test can be made any faster. It's making the call 4x's as slow.
20:10 < niftylettuce> samholmes: so you'd have var emailTemplates; leave it undefined at top of your script, and then in switch statement have emailTemplates = require('email-templates-windows') or emailTemplates = require('email-templates')
20:10 < tracker1> nb-ben, if it isn't a lot of data, json persistance may be your best bet.. or use an sqlite/firebird module if you want it more performant and disk based.
20:11 < samholmes> niftylettuce: Right. Or a one-liner:...
20:11 < niftylettuce> samholmes: email niftylettuce@gmail.com if u have more ?'s
20:11 < niftylettuce> samholmes: yea 1liner is nice
20:11 < CoverSlide|TPFR> tnorris: maybe use if statements instead of function calls
20:11 < nb-ben> meh, suppose JS hashing is good enough, all I need to do is pretty much just store user records and look them up by name
20:11 < samholmes> var emailTemplates = process.platform === 'win32' ? require('email...') : require...;
20:11 < CoverSlide|TPFR> just if's and do away with assert altogether
20:11 < tnorris> CoverSlide|TPFR: yeah. I'm going to change that and see how much per diff it makes.
20:11 < samholmes> niftylettuce: Got it. Thanks to you and tnorris! :D
20:11 < CoverSlide|TPFR> not sure how much of a gain to expect from that
20:11 < nb-ben> and I also suppose I didn't think about that there's no concurrency using JavaScript so that's a non-issue
20:12 < tracker1> nb-ben, only suggestion, use a gz stream to same a little disk space, and separate into sub folders based on id's to prevent too many documents in a directory.
20:12 < samholmes> niftylettuce: btw, you should consider a cross-platform module. ;)
20:12 < samholmes> I can't remember what it was that made it not cross-plat compat
20:12 < nb-ben> disk space +memory got in abundance, only care about performance
20:12 < niftylettuce> samholmes: it was dependency i think jsdom or something
20:12 < Bilge> Am I right in thinking node is for hipsters?
20:12 < tracker1> nb-ben, I'm using data files like that for individual records in my migration now... and using elasticsearch as a search system for them.
20:12 < CoverSlide|TPFR> for performance, you can write to an appendable fileStream
20:12 < nb-ben> for all I care I'll save it to a single huge file as JSON
20:13 < niftylettuce> samholmes: look in windows branch package.json file vs normal branch
20:13 < CoverSlide|TPFR> that's how redis does it
20:13 < tnorris> samholmes: hm?
20:13 < niftylettuce> id love a pull request fix
20:13 < samholmes> niftylettuce: I was going to fork your project awhile back. We should remain in touch and prossibly make something better.
20:13 < niftylettuce> if posisble
20:13 < niftylettuce> samholmes: yeah there needs to be much cleanup
20:13 < tracker1> nb-ben, how many records/documents?
20:13 < samholmes> niftylettuce: Oh right, it was a third party mod that you needed to recompile
20:13 < niftylettuce> samholmes: toss me an email niftylettuce@gmail.com
20:13 < mscdex> tnorris: i don't know, i didn't have a hand in most of that, the only things i really did were changing the function signature for read/write* and add double/float read/write functions
20:13 < niftylettuce> samholmes: just a reminder 4 me 
20:13 < nb-ben> few thousand, though I suppose the problem would be updating to disk every time
20:13 < nb-ben> should check if RADs are supported
20:14 < samholmes> reminder to make it cross-compatible?
20:14 < nb-ben> nope doesn't look like there's RAD support
20:14 < nb-ben> ;(
20:14 < tnorris> mscdex: cool. thanks again.
20:15 < CoverSlide|TPFR> RAD support?
20:15 < nb-ben> Random Access File
20:15 < nb-ben> like, you keep it open and navigate through it, instead of rewriting the same huge file every time you change bits in it
20:15 < nb-ben> you see, updating a huge json file every time there's a change is too resource consuming and if I update every now and then I have data integrity problem
20:16 < CoverSlide|TPFR> well it supports standard posix file handles
20:16 < vy> How can I run unit tests of this project: github.com/nickewing/line-reader
20:17 < samholmes> what does the ~ mean in the dep version number?
20:18 < CoverSlide|TPFR> samholmes: match the same major and minor version, but get the latest patch version
20:18 < brianc1> samholmes: http://semver.org/ https://github.com/isaacs/node-semver
20:19 < samholmes> CoverSlide|TPFR: major vs minor?
20:19 < samholmes> vs patch?
20:19 < samholmes> 1.2.3
20:19 < samholmes> 1 = major
20:19 < drudge> x.y.z
20:19 < samholmes> 2 = minor, 3 = patch?
20:19 < CoverSlide|TPFR> yeah
20:19 < samholmes> kk got it
20:19 < samholmes> I see
20:20 < CoverSlide|TPFR> samholmes: https://github.com/isaacs/node-semver#ranges
20:20 < samholmes> thanks so much
20:21 < exit2> I'm working through this tutorial here http://expressjs.com/guide.html#users-online and I have everything working and my redis server running but it doesn't seem to be updating the users online count - will it not change if I load a new window?
20:21 < tnorris> CoverSlide|TPFR: Ahh... each call to a read/write has 8 assertion tests.
20:21 < samholmes> is it good to use these ranges or is it better to just state explicitly which version is developed with?
20:23 < samholmes> Is there a way to make a platform specific dep?
20:24 < tnorris> CoverSlide|TPFR: nm, there's 12 assertion tests. let's see if these can be paired down at the least.
20:26 < tnorris> CoverSlide|TPFR: holy crap. keep finding more in a single call. `writeInt32` has 16 assertion tests before the operation is performed.
20:26 < CoverSlide|TPFR> holy cow
20:27 < CoverSlide|TPFR> seems a bit excessive
20:27 < vy> Under test directory I have files using functions like it(), describe(), etc. How am I supposed to run the tests? (package.json contains no information.)
20:28 < tnorris> CoverSlide|TPFR: yeah. a lot of them are duplicates too. Like `writeInt32` calls `writeUInt32`, which make all the same assertions.
20:28 < CoverSlide|TPFR> vy: there's no devDependencies?
20:28 < samholmes> when I run `npm install` with both email-templates and email-templates-windows in my package.json's deps, I get a compile error, as expected, but the windows module isn't installed because of the error.
20:28 < vy> CoverSlide|TPFR: See github.com/nickewing/line-reader
20:30 < CoverSlide|TPFR> could be using jasmine, or mocha
20:30 < CoverSlide|TPFR> not sure
20:30 < nb-ben> is there a good file-based node.js KEV store engine?
20:30 < nb-ben> need something that requires no server
20:32 < IdeaEmitter> haha, i just wrote a php session handler that stores sessions in a node.js object
20:33 < CoverSlide|TPFR> IdeaEmitter: ... why?
20:33 < nb-ben> is leveldb for node.js serverless? if anyone has experience with it
20:33 < IdeaEmitter> because storing them on the disk is sluggish
20:34 < EhevuTov> Nexxy, Shabbat Shalom
20:35 < CoverSlide|TPFR> nb-ben: yeah it should be serverless
20:35 < tnorris> CoverSlide|TPFR: just built/ran with extra checks removed. now twice as fast. though still 3x's slower than when noAssert === true.
20:35 < nb-ben> looks like an awesome solution then
20:36 < CoverSlide|TPFR> oh wow, over a year old
20:37 < ppppaul> dependency injection in nodejs anyone?
20:37 < CoverSlide|TPFR> nb-ben: you may want to look at: https://github.com/my8bird/node-leveldb
20:38 < nb-ben> ty CoverSlide|TPFR  :)
20:39 < brianc1> ppppaul: overkill
20:39 < nb-ben> CoverSlide|TPFR,  you've been awesome nice while I'm completely new to node, would like to give you a big fat thank you for helping me :)
20:52 < CoverSlide|TPFR> I'm the one you're looking for. Cause I'm a big attention whore!
20:52 < CoverSlide|TPFR> I'm the one that you adore!
20:53 < nb-ben> anyone here using nodeclipse?
20:53 < nb-ben> for some reason intellisense really sucks, I think it's kinda broken
20:53 < CoverSlide|TPFR> Intellisense has always been bad with javascript
20:54  * CoverSlide|TPFR mostly just uses vim or Sublime when available
20:54 < nb-ben> heh, I see
20:54 < nb-ben> this will take a little while to get used to
20:54 < jtane> wankdanker: i was trying the stdio option you mentioned with child_process.exec and noticing it didn't seem to work
20:54 < FunnyLookinHat> ST2 ftw.
20:54 < jtane> wankdanker: could this be the issue - https://github.com/joyent/node/blob/master/lib/child_process.js#L513-525 ?
20:54 < nb-ben> I just keep finding myself tracing object keys before I write any code
20:55 < nb-ben> figuring out it's a retarded way to do things
20:58 < samholmes> When does npm add the -x to my package.json version? It's at -5 right now.
21:04 < tnorris> bnoordhuis: freakin yeah. your dataview `setFloat32` implementation is 10x's faster than the buffer_ieee754 implementation. that would be perfect.
21:08 < drudge> mikeal: hey
21:09 < mikeal> hey
21:09 < cellvia> hello quick newb question,  does   __function  work in node
21:09 < cellvia> or is there an equivalent  if not
21:10 < CoverSlide|TPFR> there's arguements.callee
21:10 < mikeal> arguments.callee is going away
21:10 < CoverSlide|TPFR> true
21:10 < mikeal> cause it's a gapping security hole
21:11 < cellvia> i figured it might cause of __dirname seem to work
21:11 < mikeal> and if you're going to access stuff like that, prepare to get opted out of vm optimizations
21:11 < drudge> mikeal: question regarding request. for twitter reverse auth i need to x_auth_mode in the auth header, the lib currently prepends oauth_ to it. anyway around that?
21:11 < mikeal> __dirname works
21:11 < cellvia> will __dirname be going away also
21:11 < rvagg> nb-ben: https://github.com/rvagg/node-levelup is better!
21:11 < CoverSlide|TPFR> __function would be a feature of the language, __dirname and __filename are a feature of node
21:11 < drudge> need to add*
21:12 < mikeal> __dirname is a node feature, it'll be around forever
21:12 < cellvia> so basically by using something like __function theres no way around ruining VM optimization
21:12 < CoverSlide|TPFR> well, if you use a named function, you can use the function name
21:13 < CoverSlide|TPFR> inside itself
21:13 < cellvia> ok good call
21:13 < mikeal> drudge: you're passing that option to oauth?
21:13 < cellvia> right
21:13 < mikeal> it should only prefix headers you pass to it
21:13 < cellvia> ti'll do that
21:13 < cellvia> thanks!!!
21:13 < drudge> yeah i need it as a header in the auth https://dev.twitter.com/docs/ios/using-reverse-auth
21:13 < nb-ben> ty rvagg , i saw the dude didn't implement async for I/O operations so I was looking for other databases lol
21:13 < nb-ben> I thought about redis but it's so overkill for what I need
21:13 < drudge> "In addition to the conventional oauth_* signing parameters, you must also include x_auth_mode set to the value reverse_auth."
21:14 < mikeal> right, but it's not included in signing?
21:14 < nb-ben> I just need like a hashmap that automatically updates to disk
21:14 < drudge> right
21:14 < drudge> it looks like it is being removed here https://github.com/mikeal/request/blob/master/main.js#L886
21:14 < mikeal> then it shouldn't be passed to oauth :)
21:15 < mikeal> only pass options to oauth that need to be included in signing
21:15 < rvagg> nb-ben: levelup has no sync operations
21:15 < mikeal> should look something like
21:16 < wankdanker> jtane: not sure; it sure seems like the options objects is not being passed to spawn. the master branch may not be the version of node you are running though.
21:16 < nb-ben> rvagg, node-leveldb blocks in i/o
21:16 < lucianosousa> anyone try use this: https://gist.github.com/912688
21:16 < nb-ben> on i/o *
21:16 < mikeal> request(url).qs({x_auth_mode:'asdfasd'}).oauth(auth_options)
21:16 < lucianosousa> I wanna do a query like group_by
21:16 < CoverSlide|TPFR> rvagg: seriously, some of these packages need more advertising, because anyone looking for leveldb will usually end up with node-leveldb
21:16 < nb-ben> rvagg, levelup seem to fix it
21:16 < lucianosousa> using mongoose
21:17 < nb-ben> CoverSlide|TPFR, yeah, it being installed when you just type "npm install leveldb"
21:17 < nb-ben> seem like the default leveldb package
21:17 < wankdanker> jtane: although it looks the same in v0.8 - https://github.com/joyent/node/blob/v0.8/lib/child_process.js#L502-514; it did work for me with ssh though, when I set stdio : ['ingnore','ingore','ignore']
21:17 < mikeal> i'm pretty sure this is out of spec
21:17 < mikeal> fucking twitter
21:17 < CoverSlide|TPFR> it's unfortunate when someone takes the name then stops maintaining it
21:17 < wankdanker> jtane: there must  be some magic in there
21:18 < mikeal> twitter loves to just make shit up :)
21:18 < mikeal> drudge: actually, that was wrong
21:18 < drudge> yeah definitely out of spec, but they swear "it is just oauth"
21:18 < mikeal> request(url).form({x_auth_mode:'asdfasd'}).oauth(auth_options)
21:19 < mikeal> form, not qs
21:19 < rvagg> CoverSlide|TPFR, nb-ben, you should do keyword searches on npm: https://npmjs.org/browse/keyword/leveldb
21:19 < drudge> i tried form before, was not making it in due to the line i posted
21:19 < mikeal> "just oauth" but requires you signing something that isn't an oauth property and isn't prefixed :)
21:19 < rvagg> there was another leveldb wrapper that showed up the other day, very basic and it's not in that keyword list yet
21:19 < rvagg> level<something>
21:19 < CoverSlide|TPFR> rvagg: I starred your package, just based on the merit that yours is maintained
21:19 < mikeal> dammit
21:20 < mikeal> yeah, cause you aren't suppose to sign shit that isn't refixed :)
21:20 < CoverSlide|TPFR> noone is starring packages anymore *sniff*
21:20 < nb-ben> rvagg, "npm install levelup" or  "npm install node-levelup" ?
21:20 < nb-ben> and why is it installing in a directory relative to workdir
21:20 < rvagg> here you go, this is new and he's kindly implemented sync operations if you want your apps to suck: https://github.com/juliangruber/node-leveled
21:20 < nb-ben> lol
21:20 < jtane> wankdanker: it worked for you? just for kicks can you try require("child_process").exec("ls", { stdio: "inherit" });
21:20 < rvagg> nb-ben: `npm install levelup`
21:20 < jtane> wankdander: that doesn't work for me
21:20 < CoverSlide|TPFR> nb-ben: npm uses local installs, not global like other package managers
21:20 < nb-ben> CoverSlide|TPFR, how should I be installing application-specific modules? like, what's the best practice to do those installations
21:21 < mikeal> drudge: is that suppose to be in the header or just in the signature?
21:21 < mikeal> drudge: also, comment on this change 
21:21 < styol> Anyone aware of an awesome example method for function argument validation? I've been finding myself repeating the same sanity checks at the beginning of functions and I'd like to turn it into a function or otherwise that is less duplicatey. If not, perhaps any recommendations on things to test for? Right now I mostly just utilize (typeof foo === 'undefined') but I suspect I'm missing some things. Perhaps even just common keywords or phrases for this notion?
21:21 < mikeal> https://github.com/mikeal/request/commit/23ae7d576cc63d645eecf057112b71d6cb73e7b1
21:21 < jtane> wankdanker: perhaps it doesn't even make sense for exec to be able to accept the stdio option... though it is in the docs
21:21 < wankdanker> jtane: stdio has to be an array where the index of the element refers to the fd
21:21 < CoverSlide|TPFR> nb-ben: https://npmjs.org/doc/faq.html#I-installed-something-globally-but-I-can-t-require-it
21:22 < CoverSlide|TPFR> nb-ben: what do you mean application-specific? 
21:22 < wankdanker> jtane:  require("child_process").exec("ls", { stdio: ["inherit"] });
21:22 < wankdanker> jtane: even though that still doesn't work :-/
21:22 < drudge> mikeal: pretty sure it is needed in the header, if I remove the line it works as expected
21:22 < jtane> wankdanker: i think the docs say it can be a String too
21:22 < wankdanker> jtane: oh, ok.
21:23 < jtane> wankdanker: bit yeah
21:23 < nb-ben> CoverSlide|TPFR, I've been seeing people require('blabla.node'), is there a way to like, require a file containing the package?
21:23 < mikeal> so, send me a pull request that checks specifically for this property 
21:23 < mikeal> and doesn't delete it
21:23 < nb-ben> CoverSlide|TPFR, instead of "installing" it
21:23 < drudge> mikeal: ok cool, thanks
21:24 < CoverSlide|TPFR> nb-ben: http://nodejs.org/api/modules.html#modules_file_modules 
21:24 < CoverSlide|TPFR> local file modules need an absolute path or relative path beginning with dots
21:24 < nb-ben> this looks a lot more elegant
21:24 < wankdanker> jtane: yeah, its weird because the only thing that seems to react as i would expect is ssh
21:25 < nb-ben> CoverSlide|TPFR, how do I for example get node-levelup.node ?
21:25 < rvagg> nb-ben: require('levelup')
21:25 < wankdanker> jtane: well at least, i thought it worked before. not working for me now...
21:26 < rvagg> node-levelup is just my github name, it's in npm as levelup
21:26 < nb-ben> rvagg, I wanna get it as a node file instead of installing it
21:26 < nb-ben> and just require the nodefile
21:26 < CoverSlide|TPFR> if it's in your dependencies (node_modules/<modulename>) just do require('<modulename>')
21:27 < CoverSlide|TPFR> nb-ben: you should be able to require the folder
21:27 < jtane> wankdanker: i think it might just be a docs mistake - exec needs stdio to be setup a specific way i think
21:27 < CoverSlide|TPFR> but if you have it as a dependency ... no reason not to use the standard way
21:28 < jtane> wankdanker: everything seems to work fine with spawn
21:28 < nb-ben> when i put it on production requiring "./lib/mylibfiles.node" instead of installing them via npm would make things a little simpler though
21:29 < nb-ben> esp when dealing with retarded sysadmins
21:29 < rvagg> hm
21:29 < nb-ben> I assume, idk
21:29 < rvagg> foo.node is the name used for compiled, native add-ons
21:30 < CoverSlide|TPFR> well you can still use the node_modules directory
21:30 < rvagg> like foo.dll, or foo.so, but it's foo.node, it's native code
21:30 < nb-ben> ah so I can't package an addon into a single file I see
21:30 < CoverSlide|TPFR> nope
21:30 < rvagg> you could do that and have node unpackage it for you I guess
21:30 < nb-ben> aww that would be awesome if they had that feature
21:31 < wankdanker> jtane: I agree
21:31 < samholmes> Why would I want to change my application's version number in the package.json file? That's like changing Google's version number. What version is google.com at?
21:32 < nb-ben> rvagg, your package is just what I wanted lol. well documented too <3
21:32 < CoverSlide|TPFR> hmm that would make for an interesting project
21:32 < samholmes> Is there a way to use the build number only in my package.json?
21:33 < samholmes> Right now it's at 0.0.0-5. Is there a way to use only the 5 part and have that automatically increase as I commit changes via git? Or does this not really matter. I guess it doesn't really matter. xP
21:33 < CoverSlide|TPFR> correct
21:33 < rvagg> samholmes: you could mess with a git hook for that
21:33 < substack> samholmes: being explicit about versioning can be really good for reverting regressions or for running split tests
21:34 < substack> but yeah how nodejitsu does the -V thing is kind of annoying
21:34 < samholmes> substack: I didn't mention nodejitsu. Npm seems to be doing it.
21:34 < rvagg> but if you're explicit substack then nodejitsu won't -V for you
21:34 < substack> oh?
21:34 < samholmes> or maybe it was nodejitsu.
21:34 < samholmes> so nvm
21:34 < substack> rvagg: oh sweet how do I turn that off?
21:35 < drudge> sorry mikeal :)
21:35 < samholmes> substack: I think he means to just change the patch number in the version and nodejitsu wouldn't do that.
21:35 < rvagg> substack: you don't, you just explicitly version your package.json yourself and if it doesn't need to increment then it won't
21:35 < nb-ben> aww rvagg can't install cause my npm version 1.2 but required version is 0.8
21:35 < substack> rvagg: but coupling deploys to version numbers sucks
21:36 < substack> sometimes you just want to push out new code but that doesn't map to a version change
21:36 < rvagg> nb-ben: npm version doesn't matter, node version does, what node -v do you have?
21:36 < substack> it's really frustrating to have that prescribed on you
21:36 < nb-ben> ah, my node is .6
21:36 < rvagg> substack: ya, a --force would be nice
21:36 < q_no> can someone help me with installing canvas on centos? make: *** [Release/obj.target/canvas.node] Error 71
21:36 < mikeal> its all good
21:36 < substack> jitsu should just generate hashes itself
21:36 < substack> and not touch the package.json at all
21:36 < rvagg> nb-ben: ya, you'll need to upgrade to 0.8
21:36 < nb-ben> meh, apt-get only has 0.6
21:36 < rvagg> can't you moan to jesusabdullah about this?
21:36 < substack> hopefully the new git stuff hijinx is working on will fix that
21:37 < rvagg> nb-ben: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
21:37 < rvagg> if you're on Ubuntu then Chris Lea's ppa's are great
21:37 < nb-ben> ic, ty rvagg 
21:37 < zell> Hello, i'm starting a game dev with node/backbone, what kind of require should i use ?
21:38 < zell> i just browse a bit of google, and found tons of them ...
21:38 < zell> require.js (i already know), browserdify, onejs, and others ....
21:38 < DallonF> So I'm having an issue with child_process.exec() - it works perfectly, except the stderr buffer (and presumably the stdout) only gives me about a third of the output I'm expecting
21:38 < DallonF> (I'm on Windows 8 64-bit)
21:39 < rvagg> eeek
21:39 < zell> (if you have any good article about the requires, i'll be happy to read it :))
21:39 < CoverSlide|TPFR> browserify is a favorite here
21:39 < rvagg> DallonF: try using .spawn() directly and collect stdout & stderr yourself and see if that helps
21:39 < CoverSlide|TPFR> zell: require is cool if you want amd, but there's mixed opinions about amd here
21:40 < rvagg> DallonF: http://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_spawn_command_args_options <- .on('data'... append to a string or buffer, then .on('exit'.. you should hopefully have what you need
21:40 < substack> zell: if you use browserify you can just use node-style require()s in browser code
21:40 < samholmes> var app = module.exports = express.createServer({key: fs.readFileSync('server.key'), cert: fs.readFileSync('server.cert')}); HTTP no data received is what I get when I do this.
21:40 < substack> just write your code and then do browserify main.js -o bundle.js
21:40 < DallonF> zell, browserify is nice because you can use the same scripts on in Node on the browser - I've just never used it seriously because A. last time I tried it had weird path issues on Windows and B. in very few cases do I actually want to use the same modules on both the client and server
21:40 < substack> then <script src="bundle.js"></script>
21:40 < rvagg> Ender is a good option too!
21:41 < substack> DallonF: people fixed most of those path issues
21:41 < DallonF> I usually use require.js myself, but I use the CommonJS-style sugar syntax instead of pure AMD
21:41 < rvagg> and TJ's 'component' stuff is starting to look interesting
21:41 < substack> (people who are not me)
21:41 < substack> I really like using modules from npm in browser code
21:41 < substack> so nice
21:41 < substack> stream libs all pretty much work in browser code for instance
21:42 < substack> great for using with shoe
21:42 < DallonF> I hate it when you're talking bad about a framework and the person who wrote it happens to be in the chat :P
21:42 < zell> DallonF: ^^
21:42 < substack> browserify is not a framework
21:42 < DallonF> substack: kind of a... module... library... thing
21:43 < rvagg> lets just call it a framework, for fun
21:43 < substack> DallonF: anyways folks like domenic are using browserify to build windows native apps
21:43 < substack> so they send me lots of windows fixes
21:43 < DallonF> Oh, cool
21:43 < DallonF> I'll have to give it another try then
21:43 < substack> travis-ci really just needs windows servers already
21:43 < substack> I've been trying to get microsoft to donate them some
21:43 < jocafa> nothing needs windows servers ever. ¬¬
21:44 < s5fs> jocafa: good luck running sharepoint on linux ;-)
21:44 < zell> aynchronous module definition, i hate accronym, for me amd sounds like cpu.
21:44 < substack> jocafa: I want my tests to run on platforms besides linux
21:44 < jocafa> why would i want to run sharepoint? hehe
21:44 < jocafa> i was just trolling :)
21:44 < substack> I might just build this multi-platform test ci system thing
21:44 < jocafa> <3
21:44 < substack> I pretty much already wrote everything necessary to make it
21:45 < s5fs> jocafa: i was trolling your troll with arguably one of the worst windows server apps to date haha
21:45 < rvagg> substack: I'm surprised you haven't already, travis needs some competition
21:45  * jocafa = pwnt
21:45 < substack> rvagg: I really like travis though
21:45 < substack> except the web ui is pretty terrible
21:45 < substack> but otherwise it's pretty solid for what it does
21:46 < brianc1> rvagg: they have competition already
21:46 < rvagg> and the private pricing is kind of ... pricey
21:46 < substack> I have 95 repos in travis
21:46 < q_no> can someone help me with installing canvas on centos 6? make: I'm stuck at  *** [Release/obj.target/canvas.node] Error 71
21:46 < zell> brunch seemds to support more things
21:46 < samholmes> I had the idea of forking browserify or starting a new project entirely that does the require-y stuff, but wrap a package manager/registry around the project directly solely at providing a collaborative framework for front-end code. Firstly, I'd include a lot of the jQuery kinds of native stuff such as domready and selector tools etc, but doing it all in a require-y way. I'd call it the phi project or possibly tau.
21:46 < CoverSlide|TPFR> substack: how do you handle your windows instances? do you have like a bajillion licenses?
21:46 < zell> what do you think about brunch ?
21:46 < CoverSlide|TPFR> zell: i like 3 meals per day, not two
21:47 < nb-ben> is there like an exit command for nodejs, a command that terminates the application?
21:47 < substack> CoverSlide|TPFR: if you get instances from a cloud provider you don't need to worry about licensing
21:47 < CoverSlide|TPFR> ah true
21:47 < othiym23> nb-ben: process.exit()
21:47 < nb-ben> ty othiym23 
21:47 < CoverSlide|TPFR> but usually at a higher price than linuxes
21:47 < s5fs> CoverSlide|TPFR: datacenter edition license covers all windows vm licenses you run on it, too.
21:47 < othiym23> nb-ben: you shouldn't use it unless you really need it, though, because you don't get any guarantees about clean shutdown of any pending handles or streams or whatnot
21:47 < substack> samholmes: why would you do that? browserify just does bundling to make node-style require()s work and not other things
21:47 < substack> doing one thing is good
21:48 < DallonF> nb-ben: If you're in the terminal you can also use ".exit"
21:48 < DallonF> (Probably not what you're looking for, but it's a handy trick for something that should really be more intuitive)
21:48 < samholmes> substack: one thing is good. Another thing on top of one thing is good too?
21:49 < samholmes> the idea is to put this registry of front-end libs on top of the one thing.
21:49 < samholmes> sorta like npm for front-end libs
21:49 < brianc1> samholmes: like "component"?
21:49 < substack> samholmes: you can just use npm for front-end libs
21:49 < substack> that's the point of browserify
21:49 < substack> you can already just do that
21:49 < zell> CoverSlide|TPFR: https://github.com/brunch/brunch
21:49 < samholmes> haven't ever heard of component.
21:50 < brianc1> http://github.com/component
21:50 < brianc1> samholmes: https://github.com/component/component
21:50 < samholmes> substack: I suppose you're right. However, what about an exclusive registry for front-end libs or directory so that front-end libs can be more priority and noticable to the developer.
21:51 < zell> does anyone heard of brunch ? (https://github.com/brunch/brunch) ?
21:51 < rvagg> samholmes: that exists, bower
21:51 < nb-ben> othiym23, just exitting if cannot open data store
21:51 < rvagg> ... but, npm is just fine! for Ender we ask that packages put "ender" in their keyword so `ender search foo` prioritises those packages in the results
21:52  * CoverSlide|TPFR is of the opinion that ender should have its own repo and not pollute npm
21:53 < samholmes> why ./components?
21:54 < CoverSlide|TPFR> trying to enforce a specific structure
21:54 < CoverSlide|TPFR> which isn't a bad thing
21:54 < DallonF> rvagg: Finally got around to trying your suggestion; it's still an incomplete output
21:54 < samholmes> CoverSlide|TPFR: what do you mean. I thought node_modules was that specific structure?
21:54 < DallonF> It's like it's emitting 'end' too early
21:55 < rvagg> DallonF: what version of Node?
21:55 < CoverSlide|TPFR> node_modules is for node stuff, server-side only stuff
21:55 < CoverSlide|TPFR> components is all client-side stuff
21:55 < DallonF> 0.8.14
21:55 < CoverSlide|TPFR> most likely nothing in node_modules will get exposed to the client
21:55 < DallonF> rvagg (in case you're using a chat client that lights up your name like mine does)
21:55 < rvagg> CoverSlide|TPFR: too late! that horse has bolted, npm is a fine registry and it'll be used for whatever people find use for... one day we may even see perl or ruby libs in there... that'd be fun eh?
21:56 < DallonF> Npm is a great package manager; why can't it be decoupled from the repository?
21:56 < CoverSlide|TPFR> well there's nothing preventing it
21:56 < rvagg> DallonF: that sounds like an issue you may want to file a bug about on the node repo
21:56 < samholmes> CoverSlide|TPFR: tj's page module is in node_modules in my project and is being exposed to the client.
21:56 < rvagg> TooTallNate: are you responsible for windows node-core dev at all?
21:57 < TooTallNate> rvagg: not really, except for native addon stuff
21:57 < rvagg> k, DallonF has an interesting windows issue with stdout, should just file a bug eh?
21:57 < TooTallNate> rvagg: piscisaureus is who you want to talk to
21:57 < CoverSlide|TPFR> samholmes: there are a few exceptions
21:57 < DallonF> I'll have to put together a repro project or something
21:57 < CoverSlide|TPFR> samholmes: but those are the exceptions not the rule
21:57 < DallonF> (If I can repro it outside  of this real-world case)
21:58 < samholmes> When did bower come out..procrastination kills me yet again..
21:58 < rvagg> DallonF: also might be worth putting a delay in your callback after 'exit', just in case there is a weird timing issue
21:58 < rvagg> samholmes: only a couple of months ago
21:58 < rvagg> samholmes: it's main use at the moment is a backend for Yeoman
21:58 < samholmes> damn
21:58 < samholmes> yeoman?
21:58 < rvagg> not a whole lot of traction beyond that
21:58 < rvagg> google it
21:59 < CoverSlide|TPFR> I thought bower was made by twitter
21:59 < CoverSlide|TPFR> and yeoman .. someone else
21:59 < zell> Onejs or brunch ? :P
22:00 < rvagg> CoverSlide|TPFR: bower was made by @fat (twitter) and @maccman (not twitter), but @fat is no longer at twitter
22:00 < rvagg> yeoman is google / addy osmani
22:00 < CoverSlide|TPFR> ic ic
22:01 < rvagg> but, they are all just open source, for the good of the community and all that
22:01 < rvagg> I'm pretty sure bower doesn't have any use inside of twitter, it's just under their banner, like bootstrap
22:01 < CoverSlide|TPFR> i see
22:02 < s5fs> anyone as cascadiajs right now? feed is laggy and unusable and i wanna see nexxy present, please fix!
22:02 < phpnode> hey, i'd like to use node as a front end to control access to a back end video stream, basically if the client is authenticated i want to send them a live video stream, otherwise i want to deny their connection. if i just use util.pump() for this am i going to have horrible performance issues?
22:03 < Leo> Should i have any problem when using proxy's to send post request?
22:04 < othiym23> phpnode: util.pump() is deprecated, but you should just be able to pipe() the video stream to the response (when authenticated) and it shouldn't impose a performance burden
22:04 < Turquesa> Hi all, I'm trying to connect to two different nodejs servers located in the same local ip address (different ports). The first one succeeds, the other one fails. I'm using the 'force new connection' option in the second io.connect(), but without much success. Any suggestion?
22:05 < phpnode> othiym23: thanks
22:05 < othiym23> phpnode: np
22:07 < zell> this community seem very messy ^^
22:08 < zell> anyway, as long as i don't have enough time to look into sources, i'm the only one to blame here.
22:09 < zell> still it would be nice to create a nice community website, that settle some things, if that does not already exists
22:09 < rvagg> zell perhaps try the google group, it's a bit more focused
22:09 < substack> defunctzombie: browserify@2.0.0 will make heavy use of node-required
22:09 < substack> jotting down some ideas right now for how all the pieces can fit together
22:10 < defunctzombie> substack: woooo!!!
22:10 < substack> defunctzombie: /join #stackvm
22:10 < defunctzombie> I used browserify for a chrome app recently :)
22:10 < defunctzombie> and streams ;)
22:10 < substack> sweet
22:10 < rvagg> zell: core is the only place for things to be "settled", many of us value the anarchy that happens around the outside
22:11 < zell> rvagg: ^^
22:12 < CoverSlide|TPFR> although stuff changes in core all the time
22:12 < rvagg> that's the nature of <1.0
22:12 < rvagg> it'll settle down
22:12 < rvagg> some of it has
22:12 < rvagg> crypto hasn't! that's going to be a bumpy ride for the next stable
22:12 < CoverSlide|TPFR> well all streamy things will get rewritten as well
22:13 < CoverSlide|TPFR> although it will continue to support legacy
22:22 < jtane> anyone else have an idea why/how the following does stuff on the parent's stdio:
22:22 < jtane> require('child_process').spawn('ssh', [ 'user@nodejs.org', 'ls' ], { stdio: [ 'ignore', 'ignore', 'ignore' ] });
22:23 < rvagg> heh, where's that from jtane ?
22:23 < jtane> just in a file
22:23 < rvagg> see http://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_spawn_command_args_options
22:23 < rvagg> you can send in a configuration for stdin handling
22:23 < jtane> yeah, i tried that
22:24 < jtane> the 'ignore' flag
22:24 < jtane> but it doesn't seem to work
22:24 < jtane> only for ssh though...
22:25 < jtane> basically i don't want the "Are you sure you want to continue connecting (yes/no)?" to show up in my terminal
22:25 < rvagg> that may be stderr, I'm not sure tho
22:27 < jtane> rvagg: sure, but this should prevent that, right? https://gist.github.com/4048713
22:28 < rvagg> actually, ssh might be writing that direct to the tty to make sure you get it
22:28 < rvagg> there's probably an arg you can use to skip it, -y perhaps
22:28 < jtane> yeah, imean i could do -o StrictHostKeychecking=no
22:29 < rvagg> you'll probably have the same effect if you tried to redirect stdout on the commandline
22:29 < rvagg> ssh foo@bar.org > /dev/null
22:29 < samholmes> var app = module.exports = express.createServer({key: fs.readFileSync('server.key'), cert: fs.readFileSync('server.cert')}); HTTP no data received is what I get when I do this.
22:31 < jtane> rvagg: true - same with ssh user@nodejs.org > /dev/null 2>&1
22:31 < jtane> rvagg: i guess i'm just curious how that works!
22:31 < rvagg> I think it's a direct write to the current tty
22:34 < jtane> rvagg: so basically that means, no way to avoid it from node
22:34 < jtane> rvagg: except for the ssh flag
22:34 < rvagg> I think so
22:35 < jtane> rvagg: thanks for the explanation
22:37 < cellvia> anyone doing midi processing with node yet?
22:38 < Kakera> >Joe emails Bob, explaining the situation as respecfully as possible
22:38 < Kakera> how do I explain respectfully that my module is better? :(
22:40 < rvagg> substack: were you playing with midi processing?
22:41 < tnorris> Kakera: you shouldn't. they need to come to that conclusion themselves. just objectively explain the pros/cons and if they see a real advantage (and not completely prideful) it should come naturally.
22:41 < substack> rvagg: haven't gotten into midi yet
22:41 < substack> one of my housemates has a midi keyboard though
22:41 < substack> I've mostly been messing with computer-generated music
22:42 < Kakera> yeah it's hard to not sound prideful in this case
22:42 < substack> stuff like function (t) { return Math.sin(t * Math.PI * 2 * 500) }
22:42 < rvagg> cellvia: https://npmjs.org/browse/keyword/midi is probably your best bet as a starting point unless you want to make crazy substack-type noises
22:43 < cellvia> rvagg:  oh yum
22:43 < cellvia> thank you
22:43 < cellvia> this is so exciting
22:44 < Kakera> jesus there is a module for everything
22:44 < rvagg> I think substack has a dub-step function tho if that's all you wanted... heh
22:44 < tnorris> Kakera: you'll be lucky if you only find one module for something. usually I'll find between 3 to a dozen.
22:45 < cellvia> LOL
22:45 < Kakera> I had that problem when I had to extract a file from a zip archive
22:45 < Kakera> I found about 4 or 5 different modules, but all but one of them worked for me
22:45 < cellvia> but at the same time that theres modules for everything theres still so much fertile ground for new dev
22:46 < Kakera> *none but one
22:47 < tnorris> cellvia: completely. the node ecosystem still has a lot of growing to do. that's been the biggest reason I've had a hard time convincing co-workers to use node.js for some projects.
22:47 < jden> a modules that addresses multiple robots as a cohesive swarm, where members can join or leave whenver and the algorithms figure it out, analogous to sharding over a replica set.
22:53 < mscdex> /topic node.js rules!
22:55 < s5fs> great, more rules
22:55 < tnorris> mscdex: your buffer_ieee754 implementation is intense.
22:56 < mscdex> tnorris: it's not mine :-)
22:56 < tnorris> mscdex: really? pull it from somewhere else?
22:56 < mscdex> tnorris: yep
22:56 < tnorris> lol. so you won't mind if I do some optimizations on it?
22:57 < mscdex> nope, as long as it doesn't break things ;-)
22:57 < CoverSlide|TPFR> who the fuck are fair oaks labs?
22:58 < tnorris> mscdex: will do. =)
22:59 < mscdex> CoverSlide|TPFR: if i still had the original URL, i'd post it here :-)
23:02 < mscdex> CoverSlide|TPFR: there's a similar version in jspack
23:02 < mscdex> probably came from there originally
23:04 < ericelliott> How do I specify a package dependency for a github repo instead of an npm-registered package?
23:04 < ericelliott> in package.json...
23:05 < ericelliott> I think I'm screwing up the dependency declaration.
23:05 < ericelliott> npm ERR! not a package
23:06 < ericelliott> nevermind, I think I figured it out..
23:19 < ericelliott> ok.. I'm obviously not getting it. =)
23:19 < ericelliott> npm ERR! git clone git://github.com/dilvie/tinyapp.git@*
23:19 < Sly> What's the @* at the end for?
23:20 < ericelliott> good question.
23:21 < ericelliott> I think I got it. =)
23:23 < mscdex> ericelliott: you can also point to github's tarball urls
23:25 < ryancnelson> hi, folks: is there a special channel for node-knockout chatter?
23:26 < CoverSlide|TPFR> ryancnelson: #nodeknockout ??
23:27 < ryancnelson> CoverSlide|TPFR: that'd be it.
23:27 < ryancnelson> thx
23:33 < AAA_awright> ericelliott: You use Git submodules.
23:33 < DTrejo> ericelliott: and also xml
23:44 < ericelliott> AAA_awright, DTrejo, thanks for your valuable input.
23:45 < ericelliott> I think I'll also introduce a step where the developer has to have two terminals open, and view the code in one terminal, while they enter it manually in the other.
23:45 < ericelliott> So much better than just declaring a dependency in package.json.
23:49 <@konobi> for those of a cute animal disposition... http://getfile0.posterous.com/getfile/files.posterous.com/worldofkitsch/mUVlC0RHBndyxfZZCwdkYwSJwQOGLVG0XUcmNHZI6RkK2GZ0mqhn792PcKzo/photo_1.jpg.scaled.1000.jpg
23:49 < EhevuTov> probably rabbid
23:53 < bh> nlnk
23:53 < bh> lds;l;l;sds;d
23:58 < samholmes> How do I get browserify to recognize bower compenents then?
--- Log closed Sat Nov 10 00:00:43 2012
