--- Log opened Thu Apr 11 00:00:01 2013
--- Day changed Thu Apr 11 2013
00:00 < Urbanizator> anyway I'm gonna have some redesigning to do
00:00 < asterick> even then that seems suspect
00:00 < Urbanizator> this was rather dissapointing :(
00:00 <@isaacbw> what
00:00 < asterick> Competitve minecraft seems like it is a hard concept to do right
00:00 < asterick> isaacbw: Urbanizator's game he linked earlier
00:00 < Urbanizator> Luckly I was planning on some other gamemodes
00:00 <@mbalho> Urbanizator: you should use voxel.js and go 3D :D
00:00 < Urbanizator> maybe they will fail less
00:00 <@isaacbw> I mean what was disappointing
00:00 <@isaacbw> also I don't see the game
00:01 < Urbanizator> mbalho haha, this already took me 2 months
00:01 <@isaacbw> I mean, I don't see how it's a game
00:01 < Urbanizator> isaacbw tnx for the compliment, not like it hurts :(
00:01 <@isaacbw> aw, I didn't mean it like that
00:01 < faceleg|work> Urbanizator: can't hurt as much as when he talks about steak when you don't have any
00:01 < Urbanizator> :p
00:02 <@isaacbw> I mean, can you do anything but dig and build ladders? That's not much of a game. You need a reason to dig and build ladders
00:02 <@isaacbw> once you add a reason it's a game!
00:02 < Urbanizator> It should be easier to kill the others
00:02 < Urbanizator> isaacbw read the wiki first :p
00:03 <@isaacbw> oh silly me
00:03 < faceleg|work> the reason is to save the princess
00:03 < faceleg|work> from a fat dinosaur thing
00:03 < Urbanizator> CTC - Capture the Castle
00:03 < Urbanizator> Each team has to try to capture the castle of the other team. This is done by standing in the others team castle for 20 seconds.
00:03 <@isaacbw> have you seen King Arthur's Gold?
00:03 < Urbanizator> Next one is probably capture the flag, then protect the king or something
00:04 < Urbanizator> but I'll first make capture the castle more fun
00:04 < Urbanizator> it is too easy
00:04 < Urbanizator> you can't really kill the enemy once he is in your castle if he jumps a lot
00:04 <@isaacbw> this is similar: http://kag2d.com/en/
00:04 < Urbanizator> Either I'll make the player bigger or allow them to fight from a distance
00:05 < Urbanizator> noo, that looks way too good :(
00:05 < Urbanizator> ;(
00:05 < asterick> faceleg|work: http://hima.gptouch.com/games/jurassic_heart/ ?
00:05 <@isaacbw> gee, I'm sorry
00:05 <@isaacbw> I'm just ruining the good mood 
00:05 < ChrisPartridge> Urbanizator: i kept getting stuck on the edges of the ditches i was digging
00:06 < ChrisPartridge> maybe add that to the todo :P
00:06 < Urbanizator> It's already on it :p
00:07 < asterick> I also don't feel like websockets work well for action-based gaming
00:07 <@isaacbw> he's been working on kag for a year or two if that helps
00:07 <@isaacbw> I actually think it started as a zombie defense game
00:08 < Urbanizator> That helps :D
00:08 < ChrisPartridge> kags graphics look preeetty
00:08 < Urbanizator> Strange that this is the first time I hear about it
00:08 < Urbanizator> :o
00:08 <@isaacbw> yup, more than two years
00:08 <@isaacbw> it's a hipster game
00:08 <@isaacbw> I used to be a video game hipster
00:09 < ChrisPartridge> do i need to put my scarf on to play it? 
00:09 <@isaacbw> it helps
00:11 <@isaacbw> this guy's name is cactus: http://quickman.gameological.com/wp-content/uploads/2012/06/120625_dossier_cactus_featured-600x333.jpg
00:11 <@isaacbw> he makes the hipsteriest video games in the world
00:11 <@isaacbw> they look like this http://blogs.guardian.co.uk/games/screen12.gif
00:12 <@isaacbw> and this http://cactusquid.com/thumbs/hotthrottle.png
00:12 < ChrisPartridge> WOW, is that a scarf.. made of plastic?
00:12 <@isaacbw> I think the indie video game community and the web hacker community have a lot in common
00:12 <@isaacbw> haha, yea it is
00:12 < ChrisPartridge> he just won hipster of the year award in my books
00:12 <@isaacbw> and those glasses have no lenses
00:13 <@isaacbw> oh, here's some of his finest graphics work: http://oi40.tinypic.com/dff052.jpg
00:13 <@isaacbw> did I mention he's basically famous in the indie (aka video game hipsters) community?
00:14 <@isaacbw> people are weird
00:14 < ChrisPartridge> ^
00:14 < asterick> I'm pretty sure i'm making something similar to the grumpycat face.
00:16 <@isaacbw> I kind of miss game development actually
00:16 <@isaacbw> but spending more than a year on a project that gets tossed in the dumpster can be a spirit killer
00:17 < ChrisPartridge> yep
00:17 < ChrisPartridge> although i really want to play around with outerra when the SDK is available
00:17 < ChrisPartridge> all the scripting is jS
00:17 <@isaacbw> oh wow that looks nice
00:17 <@isaacbw> make a noctis clone
00:17 <@isaacbw> you wouldn't even have to do anything
00:17 < ChrisPartridge> never heard of noctis
00:18 <@isaacbw> http://upload.wikimedia.org/wikipedia/commons/f/f9/Noctis_Screenshot.png
00:18 <@isaacbw> you fly around in a spaceship and explore planets
00:18 < ChrisPartridge> ah sweet
00:18 < ChrisPartridge> have you seen kerbal space programme?
00:18 <@isaacbw> it's all procedurally generated and every player shares the same universe, so it's cool to discover things and share the coordinates with other people
00:19 <@isaacbw> nope
00:19 < ChrisPartridge> yeah that sounds cool
00:19 <@isaacbw> but I think the latest version was for DOS, so...
00:19 < ChrisPartridge> KSP is pretty much a rocket builder/launcher - quite fun
00:19 <@isaacbw> last I heard the author was developing his own assembly language for version 5
00:19 < ChrisPartridge> :|
00:19 < ChrisPartridge> that's a bit intense
00:20 <@isaacbw> video games are serious business
00:20 <@isaacbw> ksp looks pretty awesome
00:21 <@isaacbw> I may have seen some screenshots of ships people have replicated in it
00:21 < ChrisPartridge> yeah, its weirdly addictive - i've got two space stations in orbit now, built piece by piece
00:21 <@isaacbw> is it a money management game?
00:22 < ChrisPartridge> not really, it's still being developed so it's pretty much sandboxy atm
00:22 <@isaacbw> oh look, paint chips in my coffee
00:22 <@isaacbw> that's weird
00:23 < ChrisPartridge> start a new hipster trend
00:23 < tmpvar> they is good fer you
00:23 < Urbanizator> so can anyone of you help me again
00:23 < Urbanizator> kinda wanna test if the attacking works smoother now
00:25 < windsurf_> trying to get upstart working.. reading this howto: http://howtonode.org/deploying-node-upstart-monit
00:25 < windsurf_> what does he mean by replacing "/var/run/yourprogram.pid with your program's pid file and /var/log/yourprogram.sys.log with the location of your log file."
00:25 < windsurf_> i don't think my express node app has a pid or sys log
00:28 < mclenithan> ps aux | grep node
00:28 < asterick> mclenithan: he said pid file, not a process ID.
00:28 < mclenithan> yea just noticed whoops
00:28 < asterick> hehe
00:29 < mclenithan> saw pid and got excited
00:29 <@isaacbw> that's probably one of the most useful batch tricks you can learn
00:30 <@isaacbw> *bash
00:31 < windsurf_> so… pid file?
00:32 < windsurf_> ok maybe i don't need one, i found a script that seems to create one if it doesn't exist.
00:34 < Urbanizator> asterick
00:34 < Urbanizator> Can you help me for a sec?
00:35 < asterick> maybe?
00:35 <@isaacbw> windsurf_: https://npmjs.org/package/npid
00:35 < windsurf_> isaacbw: that's interesting, thanks
00:36 <@isaacbw> wait, this looks better: https://github.com/daviderwin/piddler
00:37 < asterick> Isn't that basically just require("fs").writeFileSync("/tmp/session.pid",require("process").pid) ?
00:37 < windsurf_> isaacbw: not sure if I need it, this script seems to use touch to create the pid file 
00:37 < windsurf_> http://www.exratione.com/2011/07/running-a-nodejs-server-as-a-service-using-forever/
00:37 < windsurf_> just changing its my application name fields with my own so far
00:37 <@isaacbw> piddler has like six lines of code
00:38 < asterick> yep, I wasn't far off
00:52 < evanmoran> In node the 'require' method acts synchronously. Is there any special magic in node that makes it actually async behind the scenes?
00:52 < asterick> evanmoran: no?
00:52 < asterick> require is blocking.
00:53 < evanmoran> Cool just wanted to be sure=)
00:54 < asterick> as a general rule, if you don't see a callback function, execution will always be syncronous
00:58 <@isaacbw> evanmoran: it can behave kind of like an async function if you have circular dependencies
00:58 <@isaacbw> if that's what you mean
00:58 <@isaacbw> in that case, there is a bit of clever magic going on
00:59 < evanmoran> Yeah I was wondering if you hit a really big require inside of an express request if it blocks the future connections
00:59 <@isaacbw> no, don't think like that
01:00 <@isaacbw> are you coming from a systems language?
01:01 < evanmoran> I'm writing a unified tempting engine (html, css, javascript) that uses require to deep traverse include structures 
01:02 <@isaacbw> you probably shouldn't be doing runtime requires
01:02 < evanmoran> It is amazing for static tempting because require itself caches the result. Now I'm thinking about generalizing it to on demand / express like ways of thinking about it
01:02 < evanmoran> *templating 
01:03 <@isaacbw> I would recommend implementing your own require-like function
01:04 < evanmoran> that makes sense
01:05 <@isaacbw> it probably wouldn't hurt anything, but require is going to be doing a lot of logic that you don't need
01:05 <@isaacbw> and caching isn't too hard to implement yourself
01:06 < evanmoran> my tool also does what browserify does. So the require traversal helped me pull in modules from node_modules, or local paths
01:06 < evanmoran> Basically anything you ran into would be automatically minified and put in a single .html file
01:07 <@isaacbw> I'm having a bit of trouble imagining how you would requires js files for templating
01:07 <@isaacbw> rather, how the two would work together
01:17 < Mitar> i have a buffer with tar contents and I would like to parse this with tar node.js package, but all examples of use of this package are using .pipe() and streams - how can I pass buffer to tar package?
01:27 < rcnyc> Hi guys, is there a way to tell libuv not to buffer a zlib stream?
01:28 < rcnyc> I'm writing 64, 1000 byte buffers, but it never seems to produce any output until I call end on the stream.
01:56 < dgupta> Is there a way to disable garbage collection in nodejs
01:56 < dgupta> through some flag while running node
02:02 < mmalecki> dgupta: no, and this is a terrible idea
02:03 < dgupta> How do I profile code then and not worry about gc 
02:07 < vkozyrev> any one here uses swagger?
02:25 < dested> so i posted in here about a week ago about receiving a nodejs position because I put some github shit on my resume 
02:25 < dested> i just wanted to follow up that now having it on my resume I get about 3 a week 
02:25 < dested> if you love this thing, please post it on your resume. the jobs are there and more are coming :-)
02:30 < ningu> I have finally made the leap from big data to little data
02:40 < ChrisPartridge> ningu: big to little?
02:43 < Houtt> Hello. I have an issue when a client is connected to the server. If the server restarts, the client reconnects with a new id, but starts processing messages twice, seemingly once per id, even though the server is only sending it a single message. how do I fix this?
02:44 < Houtt> sorry, i'm using socket.io for these connections
02:46 < hackedy> I've got a file of postgres statements that I run before my test suite. Right now I'm shelling out to psql -f file.sql in a pretest npm hook. Is that the best way to do this? I would rather have some kind of interface so only my test file is executing things.
02:47 < hackedy> I tried fs.readFile -> pgclient.query() but it doesn't seem to be working :(
02:47 < ljharb> hackedy: why do you need a real database for your test suite? can't you mock it somehow?
02:47 < hackedy> ljharb: I dunno. I'm not using an ORM right now either...
02:47 < ljharb> also are you testing that your database is connected?
02:48 < hackedy> it's definitely connected. oh you know what the problem was?
02:48 < hackedy> I was passing a Buffer as a query.
02:48 < chilts> ljharb: if he is testing his database, then he might require it rather than mock it :)
02:49 < hackedy> don't mock what you don't own, etc.
02:50 < ljharb> i'd say don't test what you're not testing
02:50 < ljharb> if you have a test that ensures the database works, then you just need to test that your models issue the right queries, not that they actually talk to a database.
02:50 < ljharb> * a real one, i mean
02:51 < hackedy> I don't have models. I'm not using an ORM. I'm basically writing a bug-ridden ad-hoc implementation of half of an ORM.
02:51 < hackedy> I'm just trying to get more familiar with Postgres
02:58 < ningu> hackedy: I've been using gesundheit of late to generate sql queries. I like it.
02:58 < ningu> ChrisPartridge: yes, I have like a whole 2mb of highly interconnected data :)
02:59 < ningu> has anyone ever coined the term bit-wise, byte foolish? they must have.
03:02 <@isaacbw> I'm not quite sure what that means
03:02 < ningu> it means saving storage by using bitwise operators to store booleans is silly
03:03 < ningu> among other possible interpretations
03:03 < ljharb> O.o
03:03 < tjfontaine> ningu: http://dreaminginjavascript.wordpress.com/2009/02/09/bitwise-byte-foolish/
03:03 <@isaacbw> hah okay
03:04 < ningu> if there were beet operators I would use them cause beets are awesome
03:04 <@isaacbw> now I want to watch Logan's Run again
03:05 <@isaacbw> I like it as a metaphor for some development mysticism
03:05 < ljharb> i agree with the comments on that
03:06 < ljharb> bitwise ops are usually used to be clever. cleverness is an antipattern.
03:06 <@Nexxy> WRONG
03:06 <@Nexxy> WRONG WRONG WRONG
03:06 <@Nexxy> wrong.
03:06 <@Nexxy> that is all.
03:07 < Zagnaut> i came into this conversation late, who/what's wrong?
03:07 < chapel> Nexxy: whats up?
03:08 < hackedy> ningu said bitwise storage of booleans is clever but bad. Nexxy disagreed forcefully
03:08 < ningu> actually i'm not sure what he disagreed with
03:09 < hackedy> she
03:09 < Zagnaut> Nexxy: Were you referring to "cleverness is an anti pattern" or bitwise ops usually being used to be clever?
03:10 <@Nexxy> the second one
03:10 < hackedy> wait ningu are you talking about javascript or C
03:10 < inolen> I agree with Nexxy
03:10 < inolen> I work with bitwise ops all the time in JS :|
03:10 <@Nexxy> the basic foundation of computing is not "clever"
03:10 <@Nexxy> it's something we should all understand
03:11 < leichtgewicht> Hello There!
03:11 < hackedy> bitfields \o/
03:11 < Zagnaut> leichtgewicht: o/
03:11 < leichtgewicht> I got a little question about child-processes: 
03:11 < tjfontaine> I agree, but their use has to have a purpose beyond showing off on one line
03:11 < leichtgewicht> How can I find out if a child-process is still running. (Preferably without using listeners)
03:11 < leichtgewicht> ?
03:12 < tjfontaine> like the pythonistas that insist on overusing list and dict comps
03:12 < inolen> as long as you're not modding with & val-1 and silly stuff
03:12 < hackedy> tjfontaine: well that's because list comps are faster in python than the equivalent map() filter() etc calls
03:12 < hackedy> or you could just write a for loop
03:12 < ningu> my point was not whether you should understand bitwise ops
03:12 <@Nexxy> leichtgewicht, you can listen for it's exit event
03:13 <@Nexxy> its*
03:13 < ningu> it was specifically whether it's worth it to get the savings for storing bools in individual bytes and afaik it usually isn't worth it at least for modern architecture
03:13 < tjfontaine> hackedy: more often it's more maintainable to have the for loop
03:14 < hackedy> tjfontaine: yep. sorry for noise
03:14 < ningu> meanwhile, having spent the whole day joining tables I guess I can see why people get sick of it
03:14 < leichtgewicht> Nexxy: Is exit called in any case? including kill etc.?
03:15 < Mitar> i have a buffer with tar contents and I would like to parse this with tar node.js package, but all examples of use of this package are using .pipe() and streams - how can I pass buffer to tar package?
03:15 < leichtgewicht> .oO( A ChildProcess.isAlive() might be handy?! )
03:17 < hackedy> Mitar: why can't you use pipe()?
03:17 < Mitar> because i have Buffer
03:17 < Mitar> how I pass that to pipe? :-)
03:17 < hackedy> well, how did you get the buffer?
03:17 < Mitar> I used a library which gives me a buffer, AWS SDK
03:17 < Mitar> sadly they provide only a buffer
03:17 < hackedy> ah :(
03:17 < Mitar> https://aws.amazon.com/sdkfornodejs/
03:17 < Mitar> yes :-(
03:18 < ningu> a buffer with tar... sounds messy
03:18 < Mitar> especially because they are 100 MB+
03:19 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:20 < hackedy> Mitar: maybe .write()?
03:21 < hackedy> wait no use .end()
03:21 < Mitar> hm, how? just tar().end(buffer)?
03:21 < hackedy> so tar.Extract('./directory-to-use').end(buf)
03:26 < ningu> wtf. why is it possible for JSON.parse to have an unexpected token... is 0x09 not a legal character?
03:26 < ljharb> ningu: where, inside a string?
03:27 < ljharb> Nexxy: i didn't mean you shouldn't understand bitwise ops. i meant that using them to eke out performance usually results in more confusing code.
03:28 < ningu> ljharb: yes
03:28 < ningu> it's messing up my postgres hstore parser
03:29 < ljharb> ningu: 0x09 is just "9"
03:29 < ningu> well yes
03:29 < ningu> but it isn't the character 9
03:29 < ljharb> i found "All Unicode characters may be placed within the quotation marks except for the characters that must be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F)"
03:29 < ningu> it's just equal to decimal 9
03:29 < ningu> ljharb: so this must be a node bug
03:29 < ningu> ah
03:29 < ningu> no, it's a control char
03:30 < ningu> I get: SyntaxError: Unexpected token 
03:30 < hackedy> 0x09 is a tab...
03:30 < ningu> really?
03:30 < hackedy> man ascii is your friend :D
03:30 < ningu> so it is
03:30 <@isaacbw> Using bitwise ops in javascript for anything but building/parsing binary data is silly
03:30 < ningu> so a silly little tab is crashing mthis thing
03:31 < ljharb> isaacbw: i agree
03:31 < ljharb> ningu: tabs must be "\t"
03:31 < ljharb> that quote was from the json rfc
03:32 <@isaacbw> hah. hah hah. http://arstechnica.com/business/2013/04/bitcoin-crashes-losing-nearly-half-of-its-value-in-six-hours/
03:32 <@isaacbw> all you need to read is the title
03:33 < ningu> bytecoins all the way
03:33 < hackedy> hahahah. make it rain. burst the bubble
03:33 <@isaacbw> the bubble grew when everyone talked about bitcoins, and burst when everyone talked about the bitcoin bubble
03:34 < hackedy> /r/bitcoin was nuts all day
03:34 <@isaacbw> gotta love speculative commodities
03:34 <@isaacbw> bitcoins are a speculative commidity in their purest form
03:34 <@isaacbw> literally zero inherent value
03:34 < hackedy> IT IS A CURRENCY. YOU CAN BUY DOMAIN NAMES WITH THEM. THEY'RE TOTALLY STABLE
03:35 <@isaacbw> I wonder how all this affected silk road
03:35 < hackedy> yeah how are people buying their designer drugs now
03:36 < zomg> When bitcoins sink even further I'm just going to grab a bunch
03:36 <@isaacbw> the humanity
03:36 < zomg> 'cause it'll probably go up one day
03:36 < zomg> and then I can cash it in
03:36 < zomg> I'm sure the story with bitcoin isn't over yet
03:36 <@isaacbw> the first comment on that article was pretty good: "Though it wasn't the original intent, BTC is now a commodity. People don't spend; they hoard, hoping to cash in. Well, it looks like they cashed in."
03:36 < hackedy> exactly
03:37 < zomg> Yep :P
03:37 < zomg> The fact this would happen should've been pretty obvious from the point where the prices started inflating
03:37 <@isaacbw> when you can use bitcoins at the corner store, it'll be a currency
03:37 < hackedy> zomg: deflation. it's deflation
03:37 < zomg> Right =)
03:38 < zomg> There's actually a company here who has started paying employees in bitcoins
03:38 <@isaacbw> actually, someone could probably do well to make a bitcoin cellphone hardware/app pairing
03:38 < hackedy> isaacbw: well, I only purchase extremely rare and expensive drugs, so,
03:38 < zomg> Completely optional of course
03:38 < zomg> you could cash some of your salary as btc if you wanted
03:38 < hackedy> huh.
03:38 < hackedy> I wouldn't do that :/
03:39 <@isaacbw> "oh, the price halved on pay day? that sucks"
03:39 <@isaacbw> https://mtgox.com/ the quote on their front page is from wikipedia
03:43 < hackedy> isaacbw: what's the bw in your nick stand for
03:43 < hackedy> ?
03:44 < ChrisPartridge> bigwig
03:44 <@isaacbw> my middle and last name
03:44 < hackedy> isaac b wleuter
03:45 < hackedy> isaac B wlueter.
03:45 < ljharb> k i have a node question. if i want to require a module that modifies the global object, is there any way to capture that besides running it in a vm.createContext()?
03:45 < hackedy> ljharb: ;_;
03:45 < ljharb> i know :-/
03:46 < niggler> runInNewContexxt
03:46 < ljharb> i'm looking at https://npmjs.org/package/setimmediate
03:46 < niggler> err one x, not 2
03:46 < zomg> Contexxxt
03:47 < zomg> Ohhh babe
03:47 < zomg> *cough*
03:47 < niggler> where's Nexxy when you need her
03:47 < mscdex> on twitter!
03:47 < hackedy> zomg: ಠ_ಠ
03:48 < hackedy> ljharb: why don't you want it to be global?
03:49 < ljharb> cause touching globals is bad news bears
03:49 < hackedy> ljharb: you could always edit the source!
03:50 < ljharb> the author's already closed an issue on it
03:50 < ljharb> and i also don't like forks without the possibility of a PR
03:50 < hackedy> the whole module appears to be wrapped in a (function(global, undefined) {...}(global))
03:51 < hackedy> it's literally a one-line change!
03:51 < ljharb> yeah, but forks :-(
03:51 < hackedy> yeah it would be a headache to keep up to date I guess
03:53 < hackedy> I would argue that vm.runInNewContext hackery is worse than 1 new global.
03:56 < ljharb> i agree
03:56 < ljharb> but both are bad
03:56 < ljharb> and this is in a reusable module, so i don't want to modify other people's globals
03:59 <@Nexxy> niggler, hmm?
03:59 < hackedy> oh, good point. Wait. Is this only on node.js, because you can just use process.nextTick in that case. or setImmediate. I dunno.
04:00 < hackedy> if it's only node.js you could write the shim yourself in like 10 lines!
04:00 < niggler> Nexxy i accidentally added an extra x
04:00 < hackedy> ??? https://github.com/NobleJS/setImmediate/blob/master/setImmediate.js#L67 ???
04:00 <@Nexxy> niggler, that's okay
04:00 <@Nexxy> <6 is acceptable
04:00 <@Nexxy> anything more is just excessive
04:01 < hackedy> a module that collapses repeated xs in source code
04:01 < niggler> .replace(/x+/,"x")
04:02 <@Nexxy> that's hateful!
04:02 < ljharb> hackedy: it should work in all browsers and nodes
04:03 < niggler> is x-ist even a thing?
04:04 <@Nexxy> letterism
04:04 < niggler> the sad part is that its a real thing
04:06 < hackedy> ljharb: ;_;
04:19 < Mitar> hackedy: thanks, it works!
04:21 < niftylettuce> anyone familiar with the crypto lib can help out with http-proxy on 0.10.x? it's broken for SNICallback usage with multiple domains https://github.com/nodejitsu/node-http-proxy/issues/399#issuecomment-16216048
04:22 < niftylettuce> here is commit log for crypto lib, im wondering if one of these changes caused a break https://github.com/joyent/node/commits/v0.10.2-release/lib/crypto.js
04:30 < hackedy> Mitar: (:
04:37 < hackedy> XXXTREME 
04:37 < hackedy> https://github.com/hackedy/node-xxxtreme
04:37 < ChrisPartridge> hackedy: http://i.qkme.me/3ohcro.jpg
04:38 < niggler> hackedy that doesn't change "XxXxXxXxXxXxXxXxXx"
04:40 < niftylettuce> http://i.qkme.me/3tuepo.jpg /cc ChrisPartridge hackedy niggler 
04:41 < hackedy> niggler: I know
04:41 < hackedy> intended behavior
04:43 <@Nexxy> https://twitter.com/nodenpm/status/322204665846591488
04:43 <@Nexxy> lol
04:43 < niggler>  woah woah woah hackedy its 1.0.0 ?
04:44 < hackedy> API IS STABLE
04:45 < niggler> what about case sensitivity?
04:45 < hackedy> it isn't xXxXx_scene.js_xXxXx
04:46 < niggler> I'm gonna file an issue
04:46 < hackedy> is the readme misleading
04:46 < hackedy> niggler: now I see why they call you niggler 
04:46 < niggler> you can use as many [Xx]s in your source code as you want.
04:46 < niggler> that's not clear
04:48 < hackedy> ugh fine
04:48 < niggler> also, strictly speaking, shouldn't the module be NODE-XTREME?
04:48 < niggler> what would happen if you ran it on itself
04:51 < hackedy> niggler: well the capslock bit is stylistic flair
04:52 < mscdex> niftylettuce: looks like he's missing the server's key and cert
04:52 < niftylettuce> no
04:53 < niftylettuce> mscdex: its the object returning {} for some reason i believe
04:53 < niftylettuce> .context
04:53 < mscdex> ?
04:53 < niftylettuce> from 0.8.x to 0.10.x something changed to cause this not to work
04:53 < niftylettuce> crypto, https, or tls or something
04:54 < mscdex> SecureContext is a C++ thing
04:54 < niftylettuce> works fine in 0.8.8
04:54 < mscdex> niftylettuce: look at tests/test-tls-sni-server-client.js
04:55 < niftylettuce> mscdex: link?
04:55 < mscdex> https://github.com/joyent/node/blob/v0.10/test/simple/test-tls-sni-server-client.js
04:56 < niftylettuce> mscdex: we're using SNICallback
04:56 < niftylettuce> mscdex: works fine for everything else but multiple domains with SNICallback
04:56 < niftylettuce> like single domain/usage works fine
04:56 < niftylettuce> w/o SNICallback
04:58 < JamesS237> Quick question. Is there anything I have to watch out for, or make sure I do when using Node,js in production?
04:59 < niggler> JamesS237 make sure to have fun
04:59 < niggler> if you aren't having a good time, you are doing it wrong
05:00 < niftylettuce> mscdex: maybe our usage needs to change...? see https://github.com/nodejitsu/node-http-proxy#using-two-certificates
05:00 < JamesS237> niggler: I sure am having a great time using Node.js. Best framework I've ever used for writing apps :D
05:01 < niftylettuce> mscdex: could you show me a better way to implement that then with 0.10.x please?
05:10 < mscdex> niftylettuce: SNICallback works for me.... they're just missing the server's key and cert
05:11 < niftylettuce> mscdex: we pass them and it doesn't work
05:11 < mscdex> niftylettuce: he's not passing the server key and cert in the second example, just SNICallback
05:11 < mscdex> in the https object
05:12 < niftylettuce> mscdex: then we have to pass an array ?
05:12 < niftylettuce> mscdex: for each domain/port?
05:12 < niftylettuce> mscdex: afaik you didn't have to pass the server key and cert in the second example
05:12 < niftylettuce> mscdex: at least in previous versions of node
05:12 < niftylettuce> 0.8.x
05:13 < mscdex> niftylettuce: *shrug* maybe it's the default key and cert if the client doesn't support SNI
05:15 < niftylettuce> mscdex: there is no default key/cert, each one is specific per domain
05:16 < mscdex> niftylettuce: but SNI is not a requirement
05:16 < mscdex> not all clients support it
05:17 < mscdex> so if the client doesn't send the server name, you have to use some default key and cert
05:17 < niftylettuce> mscdex: so how do you mod this example to support this with 0.10.x? snicall
05:18 < niftylettuce> mscdex: https://github.com/nodejitsu/node-http-proxy#using-two-certificates **
05:18 < niggler> haha hackedy Fixxxxxxxxxxxxxxxxxxed
05:23 < mscdex> niftylettuce: if my assumption is correct, then all you need to do is make sure you have `key` and `cert` set as your default key and cert for non-SNI clients and an `SNICallback` for SNI-capable clients
05:23 < mscdex> niftylettuce: i'm not sure what node was using before for non-SNI clients, some internal cert and key? i don't know
05:24 < mscdex> niftylettuce: but anyway, that's what i get out of it
05:24 < niftylettuce> mscdex: ill give it a shot, thank you very much
05:34 < h22> is it requirejs 2.0 that we're using in node 0.10?
05:36 < ljharb> it's not requirejs at all
05:36 < ljharb> it's commonjs
05:36 < h22> ljharb: just realised.
05:36 < h22> ljharb: thanks :)
05:36 < ljharb> np
05:43 < sinclair-work> does anyone here have any recommendations for http performance benchmarks from the command line, i.e ab, or curl etc?
05:43 < niftylettuce> mscdex: i added a default ssl and it seems to work
05:50 < h22> If I choose to use sugar.js instead of underscore.js from the next time I write something, What will I miss? performance?
05:51 < mscdex> niftylettuce: vool
05:51 < mscdex> *cool
05:51 < mscdex> ljharb: it's not even commonjs really anymore
05:52 < ljharb> h22: sugar extends native objects, and it's not a shim. avoid it.
06:11 < phrearch> hello
06:12 < phrearch> does anyone know of a tree library for nodejs/mongodb like django-mptt for python/django?
06:12 < phrearch> i would like to make a cms plugin that has pages and subpages
06:13 < phrearch> needs some child/parent referencing i suppose
06:13 < phrearch> hm, think i got something :-)
06:13 < phrearch> https://github.com/briankircho/mongoose-tree
06:14 < AAA_awright> Pages and subpages?
06:15 < AAA_awright> phrearch: A cms plugin to what?
06:16 < AAA_awright> phrearch: Take a look how my CMS does that (if this is what you mean) http://magnode.org/doc
06:16 < AAA_awright> And append ?edit to any of those URLs if you want to see the underlying data
06:16 < AAA_awright> bbl
06:19 < phrearch> AAA_awright: aha nice, checking
06:19 < phrearch> im trying to create a single page cms using websockets
06:20 < phrearch> https://github.com/l3mon
06:24 < h22> phrearch: Checked the Readme. It's awesome!
06:24 < phrearch> h22: yea i like the rdf part
06:24 < phrearch> not sure if i fully understand it, but nice to see something new :)
06:26 < h22> phrearch: mainstream CMSs should start using websockets..
06:26 < phrearch> h22: ah, yea i think so as well
06:26 < phrearch> it's pretty fast and have easy two-way comms
06:27 < phrearch> it requires a single page app though to be efficient
06:27 < passcod> phrearch: this is really cool
06:28 < h22> phrearch: came across this video yesterday.. http://www.youtube.com/watch?v=smHGXJ0HiU8
06:28 < phrearch> passcod: needs a lot of work to become useful 
06:29 < h22> Joomla and node, but TL;dr Did anyone check it out already?
06:29 < phrearch> h22: aha interesting. joomla and node? joomla is pretty much php right?
06:30 < h22> The last time I checked, it was.. 
06:30 < phrearch> h22: aha, seems like the presenter suggests using node for realtime stuff like chat
06:30 < h22> phrearch: They can't port all the plugins to *another language*
06:31 < phrearch> h22: yea that would be crazy :)
06:31 < h22> phrearch: But joomla had been breaking their APIs so many times that the plugin devs either left to somewhere else or adapted to changing APIs anyway.. 
06:32 < h22> So, I wouldn't be surprised if they actually come up with Joomla on node. lol
06:32 < phrearch> h22: yea thats always a dilemma
06:32 < phrearch> well, probably not a bad idea
06:32 < phrearch> but they'll loose much of the community i suppose
06:33 < h22> Do they have a philosophy to carry? 
06:34 < phrearch> " It is the anglicised spelling of the Swahili word jumla meaning "all together"
06:34 < phrearch> that's pretty much included in the logo as well
06:34 < phrearch> jump over the ridge all together...
06:34 < h22> phrearch: That's their philosophy about who owns the code..
06:35 < phrearch> well, i would be interested to see where it ends when they adopted node :)
06:35 < h22> phrearch: They don't have a different idea about content management anyway.. 
06:35 < phrearch> h22: yea nothing really revolutionary
06:36 < phrearch> what i really liked about joomla was the amount of plugins, and the ease to install them
06:37 < phrearch> and i like the placeholder system from django-cms :-)
06:44 < phrearch> i wonder if mongodb can store trees otherwise than using materialized paths
06:44 < phrearch> https://github.com/briankircho/mongoose-tree seems to use the latter approach
06:46 < garthk> BWA HA HA. You may quake in your boots at my stream-handling sk— well, except that I can't release the bloody code without Legal approving, so it's not like I can prove anything. Bugger.
06:47 < phrearch> licensing... :)
06:50 < ChrisPartridge> garthk: is this your URL, stream eating machine?
06:58 < garthk> ChrisPartridge: yep! Though, I wrote a more generic 'catstream'. It takes an input array (sorry, not a stream) and a function, runs each input through the function to get streams, and pipes each stream in turn to an output stream. Half the code handles errors and edge cases, e.g. not being able to get an input stream, one of the inputs emitting an error, etc. 
06:59 < garthk> Oh, and it pre-opens at most N streams at a time, where you get to choose N, and only has one in the attempting-to-open state so variable latency on the stream-making function doesn't result in ordering problems. Pant. Wheeze.
07:00 < garthk> Came out at ~400 LOC, ~50% tests. :)
07:03 < baam> Hi all, i want to use my own controller written in c++ in nodejs. do i have to port them into a nodejs-module or is there a other way to bind those header and cpp files?
07:03 < garthk> baam: check out node-gyp and protobuf.
07:05 < baam> i know node-gyp.. wrote already my first little module. this controller is over 1000 lines of code. to port this would be hard work ;)
07:06 < baam> i will look into protobuf. thanks for the hint :)
07:07 < echo|> I'm looking for a suggestion for a queue-ing module, any opinions? I see there's quite a lot of them in npm, and a lot are outdated.
07:10 < LuckyBurger> echo| queuing? i wonder if you mean something liek async ?
07:11 < echo|> LuckyBurger: No, I'm looking for something more like redisq or kue or rescue, a persistent processing queue.
07:14 < LuckyBurger> ah
08:18 < elliottcable> o7 all.
08:19 < elliottcable> I'm building something for which I need something like, er, an “events” system, between clients and the server.
08:19 < elliottcable> If that makes a whole lotta sense.
08:19 < LuckyBurger> yes. it does
08:19 < LuckyBurger> there isnt anything that I know of though.
08:19 < elliottcable> I basically want to be able to `emit('event', data)` server-side, and have client(s) running the same codebase listening for that event
08:19 < LuckyBurger> maybe Socket.IO ?
08:20 < elliottcable> (all of my code is written to run in both node.js and the browser, with extremely small “loaders” to load it as a CommonJS module node-side into the server, and throw it onto a global object client-side)
08:20 < LuckyBurger> its websockets tho
08:20 < elliottcable> yes, definitely going to do something with socket.IO
08:20 < elliottcable> just wondering if there's some sort of ... project that provides EventEmitter-like semantics with socket.io, across multiple platforms? or something?
08:20 < elliottcable> I'm grasping here. I'm not even sure how to ask for what I want.
08:20 < elliottcable> I can obviously roll my own in a heartbeat ... just sounds like something that's probably been Solved™. This *is* Node, after all.
08:21 < LuckyBurger> its probably solved privately
08:21 < LuckyBurger> everyone seems to have their own implementation
08:21 < elliottcable> ick. 'kay.
08:21 < LuckyBurger> at least as far as i know
08:21 < elliottcable> thanks, LuckyBurger.
08:21 < LuckyBurger> but if you find something let me know
08:22 < claudio> gues, I can't sleep. I need to be asssured about a stupid thing. Node is single-threaded, so can I be sure that if I have a (quite) complex global structure to update on every socket connection, every connection will find that structure as it was left by the socket before it?
08:23 < claudio> (even if updating that structure would take - say - 1 second?)
08:24 < LuckyBurger> well if you have lots of sockets, you might want to have 1 process per socket.
08:24 < claudio> I'm stressing test my app and I see weird behvioud that MIGHT ahve something to do with that issue
08:25 < claudio> (of course, it's not 1 sec... but you get the idea)
08:25 < LuckyBurger> yeah each node process is 1 thread. the common way around that is to spawn multiple procs
08:25 < LuckyBurger> iirc multiple procs can work even on the same socket
08:25 < claudio> urgh. Process like process.spawn ?
08:26 < LuckyBurger> http://nodejs.org/api/child_process.html
08:26 < LuckyBurger> i think ? :x
08:26 < claudio> yeah, that. mmmh
08:26 < ChrisPartridge> LuckyBurger is probably talking about cluster
08:28 < LuckyBurger> %
08:28 < LuckyBurger> thanks
08:28 < LuckyBurger> its late :D
08:28 < claudio> so what you're telling me is that the global data structure could be not safe in that context
08:28 < ChrisPartridge> claudio: gist/pastebin some code might help better explain the trouble you are having
08:29 < claudio> this might help (it's mine) http://stackoverflow.com/questions/15936462/how-to-reliably-maintain-an-array-of-connected-sockets-in-nodejs/15937829
08:30 < LuckyBurger> yeah that looks like it could have performance issues. id spawn a child proc for each socket...that way theres a thread per socket. but i havent reallllllllly looked at the cluster stuff yet.
08:37 < claudio> let's simplify: if each socket connection would take one synchronous operation which lasts 1 second... the next connection (which is immediately following) what will do? Wait to enter the main node loop?
08:38 < claudio> queued?
08:40 < ChrisPartridge> claudio: if it's doing something synchronous, every else is waiting
08:41 < claudio> that's good
08:42 < claudio> at the moment I'm not interested in pure performances, but on stability and reliabiltiy
08:42 < claudio> thanks
08:42 < ChrisPartridge> claudio: i've done similar things in simple projects, to store details about currently connected sockets - works fine for small scale stuff
08:43 < ChrisPartridge> and from the look of your SO article, you're already using redis - so if you wanted to scale, move that data to redis, and use cluster to manage many processes
08:43 < claudio> cool. We just need to be sure that the strucutre is updated asynchronously or else... chaos.
08:43 < claudio> yeah
08:44 < claudio> the sockets themselves cannot be stored in Redis, unfortunately :)
08:44 < claudio> but a global array is fine (which need to be maintained, but OK)
08:49 < _ior> hi! i'm using http.request to construct a POST to a RESTful API. the API itself calls a time-consuming database query. i am passing 'Connection': 'keep-alive' headers in the options to the http.request, but i still regularly get this: Error: socket hang up
08:49 < _ior> all tips appreciated!
08:49 < jetienne> hi
08:49 < _ior> node 0.8.9 for what it's worth
08:52 < _ior> here's a gist: https://gist.github.com/anonymous/8aeea876e43f6aca74a0
08:52 < bioshox> when using forever-monitor, should i use forever to run the forever-monitor script?
08:52 < imx`-> hi I am trying to run a json server with code I got from this site: http://www.logemann.org/2010/07/quickly-hacking-prototype-json-server.html
08:52 < imx`-> but I get the error unexpected token :
08:53 < imx`-> do you know what could cause this ?
08:53 < _ior> imx, sounds like a syntax error
08:54 < bioshox> go through the code, make sure that there are no stray :
08:54 < imx`-> yes I know. But I cant spot a syntax errir. it looks coreect. I checked it
08:54 < imx`-> error that is
08:56 < sambarino> you could try jslint or something maybe...
09:08 < imx`-> sambarino i'll try it out
09:13 < imx`-> bioshox there are no stray :  and the code seems correct
09:14 < Lucas__> hello
09:15 < Lucas__> I want to use statiic public htmls, but modify ONE with node.js express
09:15 < Lucas__> what i mean is i have an html site at /public, and just want to modify index.html when it's requested, and send a slightly different one
09:16 < Lucas__> what's the best way to achieve this?
09:16 < imx`-> i have it . there was a return {}; missing inside of getStatsInfoJson()
09:18 < imx`-> whats the usecase ? i dont get what you want to achieve
09:20 < imx`-> https://gist.github.com/aih/961523 - something like this ?
09:27 < RLa> Lucas__, create GET handler for / and /index.html, when static middleware is below router then your handler gets executed instead
09:39 < DaMorpheuS> anyone knows ember data???
09:41 < bioshox_> when using forever-monitor, should i launch it with a forever cli?
09:42 < bioshox_> I need it to run as a deamon in the background
09:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
09:57 < bioshox_> when using forever-monitor, should i launch it with a forever cli? I need it to run as a deamon in the background
09:58 < mmalecki> bioshox_: forever start runs as a daemon
09:58 < bioshox_> yeah I know but I need to spawn daemons programatically
09:59 < bioshox_> actually
09:59 < mmalecki> bioshox_: look at forever's code, then :)
09:59 < bioshox_> that process is flawe
09:59 < bioshox_> flawd
09:59 < bioshox_> hmm
10:00 < bioshox_> If I had entires within a database, and Node.js worked on these entires and more entries were added after the script had started, how would I go about achwknloedging the new database additions?
10:49 < radiodario> do you guys know, if i have set forever to output logging of a process to some file, and that process dies, when it gets restarted, do the logs go to the same file as specified when first ran with forever?
10:49 < radiodario> also i see winston looks a bit out of maintenance, what do you guys use for logging?
10:55 < bioshox> Anybody know if it's possible to return the PID of a daemon started with forever?
11:13 < MI6> joyent/node: Trevor Norris master * f83afd3 : src: get rid of compiler warning  Removed the following compiler warning  (+4 more commits) - http://git.io/3kIxcQ
11:46 < substack> what's a good example of a file or block device on any linux system that will slowly grow with readable newlines?
11:46 < substack> thinking syslog stuff but that's all gzipped on my system
11:46 < substack> and the events aren't frequent enough
11:47 < MI6> joyent/node: Ben Noordhuis v0.10 * dbbfbe7 : cluster: fix O(n*m) scan of cmd string  Don't scan the whole string for a - http://git.io/5FRgfw
11:48 < substack> aha /var/mail/$USER will work well
11:58 < MI6> joyent/node: Ben Noordhuis v0.10 * 212eb8a : child_process: fix O(n*m) scan of cmd string  Don't scan the whole string - http://git.io/FxRHMQ
12:03 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:38 < OliverJAsh> i need a way of "parsing" urls so that if i type in, for example, "google.com", it resolves to a fully qualified URL of "http://google.com". would it be safe to presume that it will always be http and just modify the string, or do i need a lib for this?
12:40 < benjaminbenben> the node url module might be useful - http://nodejs.org/api/url.html
12:41 < OliverJAsh> i did have a look at that but it doesn't seem to resolve URLs like i want it to
12:49 < benjaminbenben> ah, I think I get what you mean..  Perhaps using you could use it to check if there is already a protocol? `if(URL.parse('google.com').protocol){ // prepend the http }`  - maybe there's a nicer way.
12:51 < OliverJAsh> benjaminbenben: i think that will be good enough for now. if there's no protocol i just prepend "http". i don't see a better way of doing it
12:53 < OliverJAsh> this is the best i can think of:
12:53 < OliverJAsh> var websiteUrl = req.query.url; if (!url.parse(websiteUrl).protocol) websiteUrl = 'http://' + websiteUrl
12:54 < OliverJAsh> my only worry is if the string that is parsed is somehing like "//google.com". it won't be able to resolve that. would be nice if there was a node module that could do that.
13:06 < Aartsie> Hi all 
13:06 < niix> How would I call to a function from an EJS template?  I have the issue where my async function is taking longer than the page to load and will not render the results
13:16 < sshr> hello everyone!
13:21 < MiracleBlue> sup all
13:23 < Aartsie> is it possible that when i have a socket with on('data', function(){ ... }) and the next connection is incoming that it will replace the data value ?
13:29 < roxlu> hi guys, I'm looking for a way to download a webpage and get the html title value for a couple of URLs. Any advise on what I can use for this? 
13:30 < st_luke> jsdom
13:30 < roxlu> st_luke: awesome!
13:31 < st_luke> or just download the file and parse it if you only need a single value
13:31 < roxlu> st_luke: that might be faster indeed
13:34 < st_luke> page.split('<title>')[1].split('</title>')[0]
13:34 < st_luke> where page is a string containing the html source
13:37 < Aartsie> no body who knows my issue ? 
13:38 < bnoordhuis> Aartsie: i think the answer is 'no'
13:38 < bnoordhuis> as in 'no, that's not possible'
13:39 < Aartsie> hmm thats weird because it will overwrite the data on 50% of the function but it is not frequently 
13:39 < sambarino> Aartsie: i don't actually know the answer, but, my guess is that the new connection would just cause a new instance of your callback to be called
13:40 < Aartsie> sambarino: Yes that is what i thought to 
13:40 < sambarino> hmm... any global variables?
13:41 < Aartsie> Not in that function :( 
14:00 < pixie79> hi all. I am using net.connect to connect to a remote server by ip address, what is the best way to add a second ip address as a choice for connecting to should the first one be unavaliable ?
14:07 < standoo> hello
14:08 < cdauth> hey there
14:09 < cdauth> where can i find documentation about at what point the node vm exits? i am running a test, but somehow after finishing, the node process does not exit
14:11 < preyalone> Is there a .mocha file where I can specify defaults such as --no-colors ?
14:11 < bnoordhuis> cdauth: it exits when there is nothing left to do
14:11 < bnoordhuis> cdauth: more specifically, when there are no more open connections / child processes / etc.
14:12 < happyface> what's the best to track connected clients (in an object of some sort)? I want to basically send the same SSE data to each client with the same GET parameters
14:13 < _ior> just add this line to root's crontab: * * * * * killall node
14:13 < _ior> you'll never have to worry about node not exiting again.
14:14 < SargoDarya> lol
14:14 < SargoDarya> _ior: We actually have trouble with foreman not killing all node processes. We're using something like that
14:15 < _ior> oh my hahaha i didn't think i'd actually be solving someone's problem with that
14:23 < cdauth> bnoordhuis: thanks, indeed i had a connection left open
14:36 < luminous> when trying to send messages to a node app over ZeroMQ, i am getting: node: symbol lookup error: /var/www/simple_stream/node_modules/zmq/build/Release/binding.node: undefined symbol: zmq_recvmsg
14:37 < luminous> this is on ubuntut 12.04 with node.js v0.10.3
14:43 < LordDoskias> hello, what do i need to change so that node.js and all installed components with npm use a proxy server?
14:43 < LordDoskias> is there an environment variable or something (i'm running on windows so setting http_proxy is not an option ) 
14:52 < AAA_awright> LordDoskias: You, um, I don't think you do?
14:52 < AAA_awright> Do you mean all packages?
14:58 < phrearch> s
15:08 < rustc> What would be the best way to run multiple long running commands like mocha --watch, node app.js, etc in one go?
15:08 < niggler> rustc use a shell script
15:09 < rustc> niggler: I want the output of all the commands combined and printed into one shell. I don't think that's straightforward in bash or anything?
15:12 < Mortchek> rustc, well, you could background them: mocha --watch &
15:12 < Mortchek> You could also run them in GNU screen
15:13 < Mortchek> or tmux, which I think might be more scriptable
15:14 < niggler> screen is sufficient here
15:15 < niggler> screen -m do_something; screen -m do_something_else
15:15 < niggler> both are now running and are on independent screens (without the -m both would be in the "same" screen instance)
15:19 < radiodario> rustc: or forever-monitor
15:24 < oreth> what's the best relational db to use with node?
15:25 < der_On> is there a node.js module ta
15:26 < Aartsie> i think there is no best...
15:26 < st_luke> oreth: that depends on what you're most comfortable with
15:26 < der_On> is there a node.js module for deployment
15:26 < der_On> one which can automaticly install missing system packages, create missing folders, databases, etc.?
15:26 < oreth> st_luke: i'm comfortable with MySQL and SQLITE, but i'm working with a -huge- amount of data...
15:26 < oreth> trying to insert 500k+ rows
15:27 < creationix> oreth, postgres maybe?
15:27 < claudio> 500k+ is not even "medium" :)
15:28 < oreth> sqlite is taking -hours- to insert that data
15:28 < st_luke> both mysql and postgres can handle that kind of volume
15:28 < oreth> i'm using sqlite because the original challenge was to have a disk-based database/file
15:28 < st_luke> but there are other factors
15:28 < oreth> but to be honest, that's kind of a dumb requirement for this kind of data
15:29 < st_luke> oreth: leveldb fits that use case quite well but it's not relational
15:29 < oreth> st_luke: i've never used a non-relational db. how easy/quick is it to search?
15:30 < st_luke> oreth: you can namespace your keys and search very quickly with a rangequery
15:30 < st_luke> oreth: github.com/rvagg/node-levelup
15:31 < oreth> st_luke: http://pastebin.com/rnfSp9FS
15:31 < oreth> it's a very simple db structure
15:32 < oreth> but i need to be able to search for keywords and return related users
15:32 < st_luke> oreth: you can do that with level, it would be pretty straightforward to implement
15:33 < texinwien> is it normal to end up with a 200MB+ node_modules directory after running npm install in a newly cloned project?
15:33 < st_luke> texinwien: sure
15:33 < nathan7> npm dedupe, yo
15:33 < nathan7> Hey st_luke 
15:33 < oreth> st_luke: thanks for the info.. i'll check it out
15:34 < st_luke> oreth: if you have questions/trouble jump into ##leveldb, it's an unofficial leveldb channel we have going for node people
15:41 < luminous> when trying to send messages to a node app over ZeroMQ, i am getting: node: symbol lookup error: /var/www/simple_stream/node_modules/zmq/build/Release/binding.node: undefined symbol: zmq_recvmsg - anyone using node + zmq?
15:46 < happyface> what's the best to track connected clients (in an object of some sort)? I want to basically send the same SSE data to each client with the same GET parameters
15:51 < nathan7> happyface: just keep an array of them..?
16:05 < MI6> joyent/libuv: isaacs created tag v0.10.4 - http://git.io/bzEOXg
16:05 < MI6> joyent/libuv: isaacs v0.10 * 5ed1d02 : Now working on v0.10.5 (+1 more commits) - http://git.io/jaiDtQ
16:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:11 < MI6> joyent/node: isaacs v0.10 * e5fdc4d : uv: Upgrade to v0.10.4 - http://git.io/YuACfA
16:12 < gravel> If starting node, would anyone recommend using socket.io right away?
16:20 < kenperkins> anyone heard if mikeal is working on a streams2 update to request? 
16:22 < MI6> joyent/node: isaacs v0.10 * 1ccae9c : npm: Upgrade to 1.2.18 - http://git.io/jIBOog
16:24 < kenperkins> I see: https://github.com/mikeal/request/pull/399 but no news in a month :D
16:35 < sshaginyan> How do I change the current working directory?
16:36 < sshaginyan> This is for testing purposes
16:36 < sshaginyan> got it nm
16:43 < MI6> joyent/node: isaacs created branch v0.10.4-release - http://git.io/7O5nXw
16:48 < booyaa> are there any modules that can sniff out more info about http client connections?
16:48 < booyaa> i suspect this is done by clever frontend js, i'm already looking at req.header, req.url, req.connection.remoteAddress
16:50 < _marvin_> hi
16:51 < booyaa> i'd like to work out things like screen res and operating system
18:05 < MI6> joyent/node: isaacs created tag v0.10.4 - http://git.io/OCGCbQ
18:05 < asterick> Who wants to help me implement webRTC's session management protocol in node! \o/
18:05 < asterick> Come on, it will be fun!  -_-;
18:08 < gebi> hi all :)
18:10 < MI6> joyent/node: isaacs v0.10 * 22c7d13 : lint (+1 more commits) - http://git.io/JYeYtg
18:11 < MI6> joyent/node: isaacs v0.10 * 440bc06 : Now working on v0.10.5 (+2 more commits) - http://git.io/z8OeXA
18:41 < Industrial> What do I do with a TypeError: Property 'end' of object #<FilterStream> is not a function ?
18:41 < Industrial> I thought I only had to define a _transform on a Transform subclass
18:52 < Industrial> say I pipe a 500MB text file to nodejs. Howmany events will I get in process.stdin? How big is one data event/buffer ?
18:53 <@isaacbw> you shouldn't make any assumptions
18:54 < Industrial> isaacbw: well, i want to test with multiple events, so far what I'm throwing in is generating only one call to _transform.
18:54 < asterick> Industrial: you can always fake it by making something chunt the data through a shadow stream or something.
18:55 <@isaacbw> a shadow stream
18:55 <@isaacbw> that sounds neat
18:55 < asterick> mysteriousssss
18:58 < Industrial> :p
18:58 < Industrial> https://gist.github.com/Industrial/d2b7893dff3e2ce5827c
18:58 < Industrial> input/output is there :_
19:00 <@isaacbw> .ls ?
19:00 < Industrial> livescrip[t
19:00 <@isaacbw> oh, you're one of *those* people
19:00 <@isaacbw> :P
19:02 < LuckyBurger> rofl
19:02 < Industrial> I'm not sure what's happening here. I probably shouldn't try to edit code by chopping off anything between # and \n anyway (comments) but I do want to understand this error :)
19:03 < boutell> Hi. I'm trying to attach the debugger to a running process with 100% CPU. I started that process with node debug in the first place. I'm attaching with the -p option. It connects, but when I type bt, I always get "can't request backtrace now." Any ideas?
19:04 < boutell> the only occurrences of this error in google are the source code heh
19:05 < alefteris> to npm install a package from the head of a github branch, I just get the tarball link for latest commit and npm install url or there is a better way?
19:10 <@mbalho> alefteris: put the git:// url in the value of your dependencies in package.json
19:11 < alefteris> thanks
19:24 < AAA_awright> Perhaps a better callback system would be something like:
19:24 < AAA_awright> require('fs').readFile('filename', 'utf8')(function(err, contents){ /* ... */ });
19:24 < nathan7> AAA_awright: that's what Raynos came up with
19:24 < nathan7> AAA_awright: https://github.com/raynos/continuable
19:25 < AAA_awright> I'm also thinking being able to assign the callback handler afterwards:
19:25 < AAA_awright> var res = fs.readFile('filename', 'utf8');
19:25 < AAA_awright> res(callback);
19:25 < AAA_awright> res.onsuccess = function(contents){ /*...*/ } // or this
19:26 < nathan7> a lazy promise is sort of like that
19:26 < adrianlang> AAA_awright: nathan7: That's basically a bind
19:27 < AAA_awright> adrianlang: bind?
19:27 < nathan7> AAA_awright: that'd have to be before the next ticka
19:27 < nathan7> *tick
19:27 < nathan7> AAA_awright: are you familiar with promises?
19:28 < AAA_awright> nathan7: I'm not familiar with the word
19:28 < AAA_awright> It's a really poor choice of term
19:28 < pachet> AAA_awright: why
19:28 <@isaacbw> AAA_awright is a contrarian
19:29 < AAA_awright> nathan7: A callback has to be defined before the next tick anyways
19:30 < aslant> I really want to fully understand substack's "abandon web frameworks" prescription but even after reading his blog, watching his videos, checking out his github repos, and plenty of thought, I'm still unsure on the strategy...
19:30 < aslant> Is the idea that instead of middleware within a single process, you pipe requests through a number of services (auth etc.) using a service registry such as seaport?
19:31 < nathan7> AAA_awright: a promise is a placeholder for a future value
19:31 < nathan7> AAA_awright: so, var fileContent = fs.readFile('filename' , 'utf8')
19:32 < nathan7> AAA_awright: var parsedFile = fileContent.then(JSON.parse)
19:32 < AAA_awright> In the Web world those are called Events
19:33 < pachet> lol
19:33 <@mbalho> aslant: what are you trying to build? its easier to explain in the context of a specific problem
19:34 < nathan7> AAA_awright: ...no
19:34 < pachet> aslant: jump through substack's comments in this thread
19:34 < nathan7> AAA_awright: a promise is a deferred value
19:34 < pachet> aslant: https://github.com/substack/node-mkdirp/issues/17
19:34 < Industrial> What do I do in a _transform when I want to drop the entire buffer and not send it? call callback with null, null ?
19:34 < AAA_awright> nathan7: I guess I don't follow then, where are you registering a callback function?
19:34 < aslant> pachet: thanks - much appreicated, will do in a mo
19:35 < AAA_awright> i.e. How does the control flow resume
19:36 < pachet> AAA_awright: var promise = somePromiseFn(param1, param2); promise.then(function(result){}, function(error){})
19:36 < aslant> mbalho: I'm more interested in understing the approach rather than seeking an answer to a "how do I something" kind of question at the moment
19:37 < aslant> mbalho: s/understing/understanding
19:37 < AAA_awright> pachet: Is "then" defined somewhere?
19:38 < pachet> AAA_awright: in the commonjs promises spec?
19:38 < pachet> it's up to the implementors to write their services so that they return promises that expose that method
19:39 -!- isaacbw changed the topic of #Node.js to: Control flow? What's that? - http://blog.nodejs.org/ - http://logs.nodejs.org -  http://stackoverflow.com/questions/tagged/node.js
19:40 < dukedave> Anyone using the mongojs module, can you check this for me: https://gist.github.com/dukedave/5366519
19:40 < dukedave> (before I put an issue in)
19:44 < `ph8> hi all, node.js noob here - i fancy writing some stuff in Azure with Node - sql server looks like a ball ache to use to query, get results from etc - i'd have to make loads of utility functions. That aside, what happens when there's a sql error, how does node respond? Is there a node try { } catch { }?
19:45 <@isaacbw> there are try/catch errors in javascript, though async functions (e.g. database requests) wouldn't use them
19:46 < `ph8> so how do i know if they've failed?
19:46 <@isaacbw> node has no concept of sql
19:46 < aslant> pachet: that discussion was both interesting and irrelevant to my question. Perhaps that says more about how I phrased my question than anything else...
19:46 <@isaacbw> how errors are handled depends on the driver you use
19:47 < `ph8> i'm trying to convince myself to design a new startup idea in Node, instead of C#/MVC4 where i'm in my happy place - but node just looks too verbose, i can make intellisense work and things in visual studio which might help - but still it'll cause me more pain
19:47 < pachet> aslant: you know what, it's at least half my fault ;]
19:47 < pachet> i missed the second post in your question
19:47 < aslant> pachet: :)
19:48 < aslant> `ph8: I used to spend most of most of my days inside visual studio coding c#. I now spend most of most of my days writing js inside vim and can't say that I've ever yearned for intellisense
19:49 <@isaacbw> `ph8: node is just an event platform. It uses javascript.
19:49 <@isaacbw> saying that node is verbose makes no sense.
19:49 < `ph8> let me clarify, using sql azure in node looks verbose
19:49 < `ph8> and if node's meant to be good for writing json apis in front of databases or the like... why is using a database so difficult?
19:49 <@isaacbw> I don't know why you would ever want to do that anyway
19:50 <@isaacbw> node is wonderful for writing json apis
19:50 < `ph8> what do i use node for, if there's no data behind it?
19:50 < `ph8> I'm not trying to troll btw, just understand
19:50 <@Nexxy> `ph8, there are a lot of modules for databasing
19:50 < aslant> `ph8: .net's abstractions keep you from learning anything much about http, sockets, etc. Node doesn't require you to know much but definitely makes it easy to learn
19:51 < `ph8> lets assume i don't need to learn about http or sockets
19:51 < Industrial> What do I do in a _transform when I want to drop the entire buffer and not send it? call callback with null, null ?
19:51 <@isaacbw> for example, using node with mongodb is quite pleasent because the mongo drivers are written well
19:51 < `ph8> i can see it's advantage for.. a high volume chat app for example
19:51 < aslant> `ph8: I don't need to assume - you just told me ;)
19:51 < sambarino> `ph8: using some db's in node are ridiculously easy like monogdb/couchdb
19:51 < `ph8> which is what a lot of db's use
19:51 < `ph8> i can only see myself using NoSQL for caching - integrity of business data pretty much knackers it for (most) other uses - but that might be a conversation for another day
19:51 <@isaacbw> if you want to use node, you have to get wet. You can't just hang out in the wading pool. In other words, use the right technologies and don't try mixing node with azure anything
19:52 < `ph8> ignore azure and say sql server then
19:52 < `ph8> or <insert relational database here>
19:52 <@isaacbw> anyway, there are plenty of "nosql" databases driving massive business applications
19:52 <@isaacbw> like cassandra
19:53 < `ph8> big data and stuff sure
19:53 < sambarino> relational db's are outdated, node is new. use a new db with it :)
19:53 <@isaacbw> it sounds to me like you don't really grasp what node is and what the ecosystem offers, so you're making assumptions about what it can be used for and what it can't
19:53 < `ph8> sambarino, that's just completely inaccurate
19:53 < sambarino> not completely
19:53 < CoverSlide> yes, writing a series of queries will be different and more difficuly in node
19:53 < `ph8> isaacbw: ok, so i know i can use it for a chat app - anything with high i/o JS transactions
19:53 < Industrial> How do I drop data in a Transform Stream? Or should I use a Duplex Stream ?
19:54 < `ph8> i don't really jknow what else has high i/o
19:54 < `ph8> * know
19:54 < `ph8> apart from data (backed by a database) queries
19:54 < `ph8> and then i guess you're saying i should use a nosql cache
19:54 < `ph8> if i have to store my core data in a proper related way
19:54 < CoverSlide> the easy way is to write a series of callbacks, but that puts you into what's mostly referred to as "callback hell"
19:54 < `ph8> which of course i do, using NoSQL as a core business data store is lunacy
19:54 <@Nexxy> `ph8, IMHO you should ignore most of what's being said right now :)
19:54 <@isaacbw> if you can't find an rmdb abstraction package in node, that's a shortcoming of node's relative novelty, not the platform itself
19:55 < nathan7> Industrial: push an empty string
19:55 <@isaacbw> *that you like
19:55 < nathan7> Industrial: if you just want to transform to nothing
19:55 < CoverSlide> there's lots of people using rdbms' with node
19:55 < Industrial> nathan7: ok, cheers
19:55 < sambarino> `ph8: "using NoSQL as a core business data store is lunacy"... that's completely innacurate
19:55 < nathan7> Industrial: [=
19:56 <@isaacbw> what I was saying about mongo wasn't really a discussion on nosql vs relational, but that 10gen did a good job with the drivers
19:56 < nathan7> sambarino: Nodejitsu's entire infrastructure is CouchDB-driven
19:57 < sambarino> yeah, and i'm pretty sure fb's data counts as "core business data" so yeah
19:57 <@isaacbw> so if you look at node and say, "there aren't enough battleworn packages doing what I want to do and I can't commit the time to building them myself" then fine. But don't look at node and say "gee, node.js doesn't do a good job with sql" because that's just a silly thing to say
19:57 < CoverSlide> rdbms are great for relational data, something that nosql databases tend to have difficulty with
19:58 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:58 < nathan7> noSQL ≠ nonrelational
19:58 < aslant> nathan7: ++
19:58 <@Nexxy> so much spider experting
19:58 < nathan7> Nexxy: What's that supposed to mean?
19:58 < nathan7> That it doesn't have a PoS query language doesn't mean it isn't relational
19:58 < Raynos> AAA_awright: this already exists
19:58 <@Nexxy> nathan7, http://www.urbandictionary.com/define.php?term=Spider%20Expert
19:58 < Raynos> its called partial function application
19:58 < nathan7> Raynos: I libked him to continuable
19:59 <@isaacbw> hehe
19:59 < Raynos> you need zero new libraries or specs or community effort or changes to node. just `require("ap").partial` 
19:59 < AAA_awright> Raynos: Who implements it
19:59 < nathan7> AAA_awright: Function.
20:00 < AAA_awright> No, like, who implements that event handling style
20:00 < nathan7> AAA_awright: fs.readFile.bind(null, 'file', 'utf8')
20:00 <@isaacbw> node isn't really analogous to .net, which is probably where you're getting confused `ph8 
20:00 < `ph8> sure it's non relational, which is why i can only see it as being good for data that doesn't change much - or is dealt with in whole units.
20:00 < Raynos> AAA_awright: ?
20:00 < `ph8> Sure, i feel like it's cool and i want to get into it, i just don't know what i'd use it for
20:00 < Raynos> whats your question
20:00 < `ph8> what do you guys use it for?
20:00 <@isaacbw> mostly agile non-enterprise applications
20:00 < Raynos> nathan7: also promise are a terrible idea
20:01 < aslant> `ph8: you started your questioning by saying that there was no data behind node - are you talking about a store / structure for your application data?
20:01 < samholmes> Raynos: nooooooooooooooooooooooooooooooooooooooooooooo, why are they?
20:01 < AAA_awright> nathan7: That doesn't satisfy the latter criteria that I'm able to do fs.readFile('file', 'utf8').onsuccess = function(){/*..*/}
20:01 < `ph8> yes aslant 
20:01 < Raynos> They are a local maximum
20:01 < `ph8> aslant: say i'm making an app where users edit CRM data, names/emails, adding sales, times of contact etc
20:01 < samholmes> What's a local maximum?
20:01 < `ph8> node and NoSQL aren't very useful to me, apart from for caching for display - i think?
20:02 <@isaacbw> `ph8: you probably wouldn't replace a java or .net application with node, but you could certainly replace a php or rails application
20:02 < `ph8> I could write a node wordpress?
20:02 <@isaacbw> sure
20:02 < Raynos> samholmes: http://sethgodin.typepad.com/seths_blog/images/localmax2_3.jpg
20:02 <@Nexxy> `ph8, it's useful if you're willing to learn a new approach
20:02 < aslant> `ph8: so you want a data model in memory that is also persisted beyond the lifetime of the application
20:02 < `ph8> sure i'm willing to learn - i just need an idea of what it's used for to create something in my mind
20:02 < AAA_awright> Raynos: You have a specification, or library, or something, which specifies something like fs.readFile('filename')(callback);
20:02 < `ph8> sure aslant 
20:02 <@Nexxy> `ph8, you can do anything you can with RDBMS
20:02 <@Nexxy> in a very different way
20:03 < Raynos> AAA_awright: it's so trivial there's almost no point ( https://github.com/Raynos/continuable/blob/master/spec.md )
20:03 < samholmes> Raynos: What does that mean exactly? Do you mean to say that promises just don't solve the bigger problem?
20:03 < AAA_awright> I'd like to add the ability to do var res = fs.readFile('filename'); res.onsuccess = function(){}; or res.addEventHandler('success', function(){/*...*/});
20:03 < `ph8> it seems like i have to deal with foreign keys etc in code, which is work the RDBMS was doing for me before, which just == more work
20:03 <@Nexxy> but I would suggest learning more about what people are using Node for
20:03 < sambarino> it can be used for anything, it's just that some things are easier than others to implement, because they have had modules worked on to make those things easier to implement
20:03 <@Nexxy> and coming to it with a problem that is well suited
20:03 < `ph8> Yes, i'd love examples of what you use node for, if you have any
20:03 <@Nexxy> rather than trying to figure out what you can use it for
20:03 < nathan7> Raynos: You say that but I don't think you grasp them
20:03 < AAA_awright> Raynos: Does that make sense?
20:03 < Raynos> samholmes: It means promises in the short term are a pragmatic solution to a problem and in the long term stiffle innovation
20:03 < nathan7> Raynos: I just don't think promises are the One True Abstraction™
20:03 < Raynos> AAA_awright: your success handler is complexity
20:03 <@Nexxy> `ph8, e.g., almost all of the ninjablocks.com infrastructure is done with node
20:04 < samholmes> I'm all for FRP
20:04 < AAA_awright> Raynos: That's how DOM specifies it
20:04 <@Nexxy> i.e.*
20:04 < sambarino> `ph8: well we are going to be using it for a meme gen internal app here, so there's one example
20:04 < aslant> `ph8: so you've got two separate issues - 1 data persistence. I wouldn't worry about that immediately. It sounds like the other / primary issue is that you don't have an out-of-the-box application object that hosts your model
20:04 < Raynos> nathan7: https://github.com/promises-aplus/promises-spec/issues/94 promises are harmful to solving real problems
20:04 < AAA_awright> http://www.w3.org/TR/DOM-Level-3-Events/ that's used for, like, everything
20:04 < nathan7> AAA_awright: modern DOM is .addEventListener('success', )
20:04 < AAA_awright> nathan7: What I just said a few lines up
20:05 < Raynos> samholmes: pragmatically you should use promises if they are good for your usecase
20:05 < samholmes> I'm building a simple page by page type of site. Rather than use Express, maybe I could get my teeth wet in another framework. Suggestions?
20:05 < `ph8> Ok so ninjablocks is very fast
20:05 < `ph8> what's coming from node?
20:05 < `ph8> each page?
20:05 < samholmes> Raynos: I guess. Promises are just this idea that you use the return value instead of the arguments
20:05 < `ph8> Page HTML from a NoSQL database of sorts?
20:05 <@isaacbw> Nexxy: are you one of the people behind ninjablocks?
20:06 < `ph8> via node?
20:06 <@Nexxy> isaacbw, ya
20:06 <@isaacbw> very cool
20:06 < nathan7> samholmes: No, that's not the relevant part
20:06 <@Nexxy> `ph8, ninjablocks is a platform 
20:06 < samholmes> However, you still need to use the arguments of a method on the promise.
20:06 < nathan7> samholmes: it's an implementation detail
20:06 < `ph8> oh i see the platform is built in node, not the site
20:06 < `ph8> so node talks to the devices
20:06 < Raynos> samholmes: the idea of returning a value is a good idea. The implementation of promises is messy and aimed at solving the cross-promise interop problem
20:06 < nathan7> samholmes: It's about having a handle on a value that isn't there yet
20:06 <@Nexxy> node is on both sides
20:06 < pachet> the demigods of confusion are at large today :[
20:06 <@Nexxy> client & server
20:06 < `ph8> what are the ways of handling an error then, like my database question, if a device isn't available?
20:06 < samholmes> nathan7: Right.
20:06 < `ph8> does the server just crash/log an error?
20:07 <@Nexxy> no
20:07 < nathan7> samholmes: it's about being able to do things with values that aren't there yet in the same way as ones that are
20:07 <@Nexxy> `ph8, I'm not sure what you mean exactly
20:07 <@isaacbw> node is just a great way to develop for the web in an agile and flexible way
20:07 < CoverSlide> `ph8: usually there is a callback, or emitting an error event
20:07 < samholmes> I still think that FRP is the future. But getting behaviors in JS would require an update to JS itself or a DSL
20:07 < `ph8> isaacbw, I think i've heard most of the platitudes.. :)
20:07 <@isaacbw> agile agile agile
20:07 < `ph8> ah error events
20:07 < `ph8> i get it
20:07 <@isaacbw> if that's how you see it then you aren't grasping the point
20:07 < `ph8> ok so you can trap errors in errors events
20:08 < samholmes> isaacbw: what is this agile I keep hearing?
20:08 < nathan7> samholmes: like xhr(url).then(JSON.parse).map(Number).then(err, errCb)
20:08 < CoverSlide> `ph8: if an actual real error is encountered, yes, the app crashes. that's why it's a good idea to not have code that throws errors
20:08 <@Nexxy> there are several ways to handle errors
20:08 <@Nexxy> `ph8, 'idiomatic' way is to use callbacks that accept an error object as the first argument
20:08 < `ph8> i see
20:08 <@Nexxy> some people like to throw errors
20:08 <@Nexxy> but they're incorrect
20:08 <@Nexxy> and bad people
20:08 <@Nexxy> in general
20:08 < samholmes> nathan7: I see. 
20:08 < sambarino> lol
20:08 < sambarino> +1
20:08 < aslant> `ph8: say you were trying to connect to a couch database and were using the request module as many do: request('http://mycouch:5984/mydatabase', function(error, response , body) { .... })   <--- you have a callback in which you can check whether there's an error, check the response status code
20:08 < CoverSlide> yes, never ever ever throw errors in node
20:09 < samholmes> What's everyone opinion on FRP?
20:09 <@isaacbw> I like how these two conversations are converging
20:09 < `ph8> aslant, i see
20:09 < pachet> throw all errors
20:09 < pachet> cull the weak
20:09 < `ph8> so, i wouldn't use .NET Web API for this, because node is fast
20:09 <@Nexxy> `ph8, whereas a sucessful call has an error value of null
20:09 < `ph8> what's this single thread stuff about? can only one request be getting processed at a time?
20:09 < nathan7> samholmes: a module loader that solves arbitrary acyclic dependency graphs: https://gist.github.com/nathan7/5279497#file-readme-md
20:09 < nathan7> `ph8: No, you don't block your threads
20:10 < nathan7> well, your one thread
20:10 < `ph8> so i don't block while a query is returning
20:10 <@Nexxy> `ph8, node has a single event loop, and farms IO out to workers
20:10 < `ph8> i see
20:10 <@Nexxy> (single event loop per node process)
20:10 < `ph8> i see i see
20:10 < `ph8> well it's growing on me
20:10 <@Nexxy> (you should generally be writing apps intended to run on multiple processes concurrently)
20:10 < nathan7> samholmes: There's a load of problems that are really awesome to solve with promises, but they're not the one true abstraction
20:10 < `ph8> As Azure integrate it more i'm contemplating it as a Web API replacement 
20:11 < nathan7> samholmes: callbacks are the lowest level primitive, and that's what should be in core
20:11 < `ph8> i do miss some things though, i'd love an Entity Framework node implementation
20:11 < CoverSlide> there are ORM's for node
20:12 < CoverSlide> jugglingdb, sequelizer
20:12 <@Nexxy> `ph8, one thing you may notice is the abundance of highly granular modules that you can compose in various useful ways
20:12 < samholmes> What about this map(JSON.parse(xhr(url)), Number);
20:12 < nathan7> samholmes: I can solve that in 10 lines of actual business code because promises mean I don't have to worry about whether a value is already there or not
20:12 <@isaacbw> Why can't Node.js be more like .NET? 
20:12 < nathan7> samholmes: if JSON.parse were to take promises and return them, yeah, sure
20:12 < pachet> `ph8: it's known colloquially as the `substack effect`
20:13 < pachet> isaacbw: i think that every day
20:13 < pachet> every minute
20:13 -!- isaacbw changed the topic of #Node.js to: Why can't Node.js be more like .NET? - http://blog.nodejs.org/ - http://logs.nodejs.org -  http://stackoverflow.com/questions/tagged/node.js
20:13 <@Nexxy> also unixyness
20:13 < nathan7> samholmes: .then() is asynchronous fmap
20:13 < `ph8> ha
20:13 < nathan7> samholmes: (and it collapses nested promises because things would get silly otherwise)
20:13 < `ph8> i feel like you're mocking my love of .net
20:13 < pachet> the dream of the unix is alive in substack
20:13 <@isaacbw> no, no
20:13 < pachet> i was
20:13 <@Nexxy> matt matt matt matt, you're glib
20:14 < samholmes> nathan7: what I'm talking about are behaviors. var signal = asyncFun(args); if (signal) { valueReturned(); }
20:14 <@isaacbw> I'm always on the lookout for a nice topic ;) Only people who are here now will get the reference
20:14 < aslant> isaacbw: the rest of them will guess the context 
20:14 < samholmes> nathan7: read this please http://samholmes.me/post/47447673428/natural-async-programming-contd-signal-oriented :)
20:14 < nathan7> samholmes: Yeah
20:15 < nathan7> samholmes: Signals are the promise equivalent of streams
20:15 < `ph8> I suppose if node had an entire army of Microsoft Drones working on it, it would be more like .net
20:15 <@isaacbw> those would be the days
20:15 <@isaacbw> that would be the day?
20:15 <@isaacbw> how do people make words
20:15 < nathan7> with letters
20:15  * samholmes came here for a framework suggestion and should be working, but got caught up in interesting discussion instead. Usual #node.js
20:15 < nathan7> characters in strings
20:15 < nathan7> [rant about unicode]
20:15 < `ph8> bytes
20:15 < `ph8> nibbles in words
20:16 < nathan7> words in memory pages
20:16 < samholmes> I make words!
20:16 < samholmes> I frabrocate them all the time!
20:16 < nathan7> samholmes: I haven't played with signal-y stuff a lot
20:16 < Industrial> nathan7: what if I want to emit more or less data events then come in? I'm implementing a Split and Join Stream ..
20:17 < samholmes> nathan7: I haven't either, cause I don't like Elm. I'd like to see a DSL for JS that just adds signals to everything.
20:17 <@isaacbw> but if you really want a simple to answer to "why node?" then the answer is "it's agile" and that isn't a platitude
20:17 < nathan7> samholmes: promises are this but for one signal firing only
20:17 < samholmes> I coined SOP as signal-oriented programming in hopes of getting other people to be like "Oh yeah, SOP, SOP, SOP this, and that."
20:17 < CoverSlide> there's one Microsoft drone working on node
20:18 < samholmes> nathan7: Right, promises only occur once. Which is what I thought about signals at first. Then, boom it hit me that a signal could be more than just a single firing callback. Then my world opened up and flowers blooms and unicorns and shit.
20:18  * samholmes should take so much DMT
20:18 < CoverSlide> the answer to why node is JIFASNIF
20:18 <@isaacbw> because node is single-threaded (conceptually at least) and event-driven, you work at a more abstract level than you would with .net or java
20:19 <@isaacbw> oh right
20:19 < nathan7> samholmes: ahaha
20:19 <@Nexxy> samholmes, "SOP" is just "inside-out EE"
20:19 < nathan7> samholmes: machineElves.pause() // jesus christ this is overwhelming
20:19 <@Nexxy> which seems a lot more ad-hoc and confusing
20:19 <@Nexxy> than just using EEs
20:20 < nathan7> streams for events
20:20 < nathan7> object streams seem suitable
20:21 < samholmes> EE?
20:21 <@Nexxy> event emitter
20:21 < samholmes> oh
20:21 < samholmes> well, define inside-out and I'll understand
20:21 < samholmes> I just see SOP as EE at a lower level
20:22 < samholmes> that is, a single piece of EE
20:22 <@Nexxy> if 'lower' meant 'strewn about' I'd agree
20:22 < samholmes> EE can be made up of multiple signals
20:22 < nathan7> an EE is an object of signals
20:22 < nathan7> well
20:22 < samholmes> nathan7: Right. But with signals you don't use callback functions
20:22 < nathan7> EEs are unbuffered, streams are buffered
20:22 < samholmes> EE.signal1, EE.signal2, etc
20:23 < samholmes> each property returns a potential value.
20:23 < nathan7> should signals be buffered? I'm not sure
20:23 < nathan7> if a signal is emitted and nobody's around to receive it, does it make a sound
20:24 < samholmes> nathan7: well, if you did this setTimeout(funblabla(){ mySignal = Math.random(); }); then mySignal is an unbuffered stream of random numbers?
20:24 < samholmes> nathan7: haha
20:24  * samholmes forgot the interval integer for setTimeout
20:24 < samholmes> also I forgot that I meant setInterval*
20:24 < samholmes> FML
20:24 < nathan7> samholmes: yeah
20:25 < nathan7> samholmes: but if you do signal ← Math.random()
20:25 < aslant> I want to share middleware across web apps - i.e. route http requests/responses through a number of services running in separate services. First question - am I misguided in wanting to do this?
20:25 < samholmes> nathan7: in other words, the thing I like about signals, it gets rid of the function(){ } part of my code. Which is really what makes async programming "hard" by those whinies out there.
20:25 < gluxon> aslant: Well, why would you want to?
20:26 < nathan7> samholmes: signals are for a continuous stream of things
20:26 <@Nexxy> aslant, you should do it
20:26 < gluxon> aslant: As in, what goal are you trying to accomplish?
20:26 < nathan7> samholmes: but, the does-it-make-a-sound
20:26 < samholmes> nathan7: not always. A signal could single fire. Depends on the API you're using.
20:26 < aslant> gluxon: we've got a number of sites running internally, a lot of things are common between them - including e.g. auth
20:26 < nathan7> samholmes: if a signal fires and nobody's listening
20:27 < nathan7> samholmes: does it just fizzle or do I get it when I bind a function to it?
20:27 < samholmes> nathan7: the answer, it's up to the runtime on whether it wants it to make a sound or not.
20:27 < nathan7> samholmes: if the former and it fires once, it's a promise
20:27 <@Nexxy> aslant, you could also just put the shared middleware infront of your apps
20:27 <@mbalho> did someone say signal fire? http://bit.ly/ZPMZoO
20:27 < nathan7> samholmes: er
20:27 < samholmes> nathan7: oh I see. You're asking if a signal buffers until someone uses it.
20:27 < nathan7> samholmes: Yeah
20:28 < nathan7> samholmes: like .on('data') with streams2
20:28 < nathan7> samholmes: it doesn't start spewing data events until someone listens for them
20:28 < samholmes> Hmm, well, sense there is no set implementation to reference, we could decide on what would be best.
20:28 < samholmes> nathan7: but does it buffer the data?
20:28 < aslant> Nexxy: thanks, that's a decision in itself
20:28 < nathan7> samholmes: Yes
20:29 < nathan7> samholmes: though streams2 is a pull model
20:29 < samholmes> so what if we forgot to listen to a stream, it'll explode the app?
20:29 < nathan7> samholmes: well, if you have var stream4 = stream1.pipe(stream2).pipe(stream3)
20:29 < CoverSlide> hopefully it just gets gc'd
20:29 < samholmes> I think it would be better if signals didn't buffer. Because we can add buffering to signals, but we can't remove them if we don't have them.
20:29 < nathan7> samholmes: no read() happens on stream1 until you touch stream4
20:29 < nathan7> samholmes: mhm
20:30 < nathan7> samholmes: also, what about failure
20:30 < samholmes> I think it'll be easier for the programming environment if the sig just was gc'd
20:30 <@isaacbw> does anyone know how to open a marine band harmonica
20:30 <@isaacbw> these screws don't look like real screws
20:30 < nathan7> samholmes: the promise model of just falling through works
20:31 < aslant> Nexxy: do you have a recommendation as to how to pipe requests through the various components? 
20:31 <@mbalho> isaacbw: is there a module on npm for that?
20:31 < samholmes> nathan7: signal === error object on failure
20:31 <@isaacbw> mbalho: I'll check
20:31 < nathan7> samholmes: so if a -> b -> c and a signals an error and c has an error handler then that's called
20:31 <@mbalho> isaacbw: npm install harmonica-mvc you just need to validate your schema and then install postgres and some other step i forgot
20:31 <@isaacbw> oh awesome, thanks
20:31 < nathan7> samholmes: if b were to have an error handler that returns a non-error signal that's cool too
20:31 <@Nexxy> aslant, take a look at substack's bouncy
20:32 < samholmes> nathan7: yeah, promises are nice like that.
20:32 < samholmes> But why would it be different with signals? It'll just look like good ol' sync programming:
20:32 < nathan7> samholmes: Exactly
20:32 < aslant> Nexxy: I have done - been wanting to use it for a while. Sadly its github page says it's only working on 0.8 atm
20:32 < nathan7> samholmes: You'd have a .through analogous to .then
20:32 < samholmes> var a = getSig(); if (typeof a === 'error') { handle error };
20:33 < nathan7> samholmes: there's no error type
20:33 <@isaacbw> promises let you pretend you're using a cool language like haskell
20:33 < aslant> Nexxy: I'm quite attached to the stuff I've done with streams2
20:33 < samholmes> nathan7: well however you want to detect if it's an error object.
20:33 <@isaacbw> when really you're just using boring old javascript
20:33 < nathan7> samholmes: the promise fulfillment/rejection thing seems suitable
20:33 < nathan7> isaacbw: haskell is a cool toy for me so far
20:34 < nathan7> isaacbw: want to get anything practical done "oh I just store it on my object here and th-fuckit"
20:34 < nathan7> isaacbw: all my freedoms gooone
20:34 <@isaacbw> hehe
20:34 < samholmes> idk
20:34 < samholmes> I have to use the restroom
20:34 <@isaacbw> what's that
20:35 < nathan7> a toilet
20:35 <@isaacbw> huh
20:35 < samholmes> I'm working on a little project/website. Static stuff and what not. Is there something other than Express, that I could try?
20:35 <@isaacbw> oh wait no, I remember that
20:35 <@isaacbw> I do that sometimes
20:35 < nathan7> samholmes: there's Flatiron
20:35 < samholmes> I have this bad habit of flushing these things mid-peeing.
20:35 <@isaacbw> it's a race
20:35 <@isaacbw> can you finish before the water stops?
20:35 < samholmes> I can't pee fast enough you see
20:36 < samholmes> sometimes
20:36 < aslant> Nexxy: But I think you've answered my question insofar as the pattern to follow
20:36 < samholmes> But most of the time I'm like, "Damnit why do I keep doing this." then flush again
20:36 < aslant> Nexxy: thanks
20:36 < aslant> Nexxy: There's nodejitsu's node-http-proxy too of course - would you recommend it?
20:36 <@Nexxy> https://twitter.com/nexxylove/status/322447049624797184
20:36 <@Nexxy> aslant, I couldn't personally recommend it as I've never used it
20:36 < nathan7> aslant: Well, it runs our production services [=
20:37 <@Nexxy> aslant, but they generally do good work!
20:38 <@isaacbw> node-http-proxy is pleasant to use
20:39 < aslant> Nexxy: nathan7: isaacbw: thanks all 
20:41 <@Nexxy> :)
20:42 < mscdex> it's amazing how sysadmins can screw up ssh servers
20:43 < dukedave> Anyone using the mongojs module, can you check this for me: https://gist.github.com/dukedave/5366519
20:43 < dukedave> (before I put an issue in)
20:47 < samholmes> nathan7: Ah! A signal should buffer only the latest value.
20:48 < nathan7> samholmes: what about, say, a clock signal
20:48 < samholmes> nathan7: explain clock signal
20:48 < nathan7> samholmes: clock(1000) // emits undefined every 1000ms
20:48 < samholmes> nathan7: it should emit true, but yes!
20:48 < samholmes> sleep is setTimeout
20:48 < samholmes> clock is setInterval
20:48 < samholmes> I like these naming conventions.
20:49 < samholmes> They should both return true, so that you can do: if (clock(1000){ ... }
20:50 < samholmes> also, var globalVar = sleep(10000); ...more than ten seconds later: checkIfTrue(globalVar)
20:50 < samholmes> if the signal's last value wasn't buffered, I could use it later on.
20:50 < nathan7> samholmes: you can't quite if(signal) though
20:51 < capelio> I'd like to stream all files in a directory from one node http server to another. I've had limited success using fs and request readable/writable streams. Can anyone point me in the right direction, perhaps some libs I should look at or blogs/guides? I'm working my way through the API docs as well, but just started with node.
20:51 < samholmes> nathan7: why couldn't I?
20:52 <@isaacs> .. NaN === NaN
20:52 <@isaacs> oh?
20:53 <@isaacs> purr: still with us?
20:53 < samholmes> js> test
20:53 < purr> samholmes: ReferenceError: test is not defined
20:53 < samholmes> js> NaN == NaN
20:53 < purr> samholmes: (boolean) false
20:53 < samholmes> you cutie purr
20:53 < samholmes> js> NaN =+= NaN
20:53 < purr> samholmes: SyntaxError: Unexpected token +=
20:53 < samholmes> js> NaN === NaN
20:53 < purr> samholmes: (boolean) false
20:54 < samholmes> =+= would be a cool operator though
20:54 < pachet> purr was scratching the couch
20:54 < pachet> >:[
20:54 <@mbalho> samholmes: looks too biblical for me
20:54 < pachet> samholmes: 'tie fighter'
20:54 < pachet> might be more like |+| though :'[
20:55 < CoverSlide> js> NaN = + NaN
20:55 < purr> CoverSlide: (number) NaN
20:55 < CoverSlide> js> NaN = 1;NaN
20:55 < purr> CoverSlide: (number) NaN
20:56 < CoverSlide> js> 'use strict';NaN = 1;NaN
20:56 < purr> CoverSlide: TypeError: Cannot assign to read only property 'NaN' of #<Object>
20:56 < aslant> js> ~NaN
20:56 < purr> aslant: (number) -1
20:56  * CoverSlide mind blown
20:57 < nathan7> samholmes: because they're not synchronous
20:57 < samholmes> mustaches ={ Sad :'[ so sad. Or happy? :'}
20:57 < nathan7> samholmes: hrm
20:57 < samholmes> Valid JS code that looks like a sentence FT!
20:57 < samholmes> FTW*
20:57 < nathan7> samholmes: terms are tricky
20:57 < nathan7> samholmes: signal = like promise, long-lived object
20:58 < nathan7> samholmes: value = emitted, what goes through a signal
20:58 < samholmes> nathan7: haha, this whole time you didn't get the fact that signals were able to do this? signal = createSignal(); doStuffWithSignal(blabla); alert(signal); ...
20:58 < samholmes> nathan7: not at all. Signals were an idea that would be implemented at the runtime level.
20:59 < samholmes> the runtime would create an execution path based on the variables defined in the code.
20:59 < nathan7> samholmes: Yeah, that's a bit hypothetical for me
20:59 < aslant> js> (function() { arguments.callee() })()
20:59 < purr> aslant: RangeError: Maximum call stack size exceeded
21:00 < samholmes> nathan7: the whole point of signals was to be hypothetical. :P
21:00 < TehShrike|Work> Recursion!
21:00 < nathan7> aslant: arguments.callee ftl
21:00 < nathan7> aslant: (function f() { f() })()
21:00 < CoverSlide> js> 'use strict';(function() { arguments.callee() })()
21:00 < purr> CoverSlide: TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them
21:00 < samholmes> js> setTimeout
21:00 < purr> samholmes: ReferenceError: setTimeout is not defined
21:00 < CoverSlide> js> Object.keys(this)
21:00 < purr> CoverSlide: (object) ['console', 'alert', 'print', 'version', 'constant_multiply', 'constant_divide', 'numbers_that_add_and_subtract_to', 'numbers_that_add_and_multiply_to', 'obfuscate', 'strip_color', 'braille', 'Sol']
21:00 < Cheery> how to convert Undefined() to Local<Value> ?
21:01 < CoverSlide> wtf
21:01 < Industrial> I think the Node.JS manual would be a lot better if it included canonical/minimal use example cases with each method :)
21:01 < CoverSlide> js> braille('hello world')
21:01 < purr> CoverSlide: (string) '⠓⠑⠇⠇⠕ ⠺⠕⠗⠇⠙'
21:02 < samholmes> js> var unleashhell = ''; for (var i=0; i < 100; ++i) { unleashhell += 'russell crowe '; }; unleashhell;
21:02 < purr> samholmes: (string) 'russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell cr…
21:02 < samholmes> wasn't as much hell as I was expecting, but ok.
21:02 < samholmes> js> var unleashhell = ''; for (var i=0; i < 1000; ++i) { unleashhell += 'russell crowe '; }; unleashhell;
21:02 < purr> samholmes: (string) 'russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell crowe russell cr…
21:02 < CoverSlide> js> braille(braille('hello world'))
21:02 < purr> CoverSlide: (string) ' '; Console: 'Could not convert: ⠓⠑⠇⠇⠕⠺⠕⠗⠇⠙'
21:02 < CoverSlide> aww
21:02 < samholmes> O.o
21:02 < samholmes> morse('eat this')
21:02 < samholmes> js> morse('eat this')
21:02 < purr> samholmes: ReferenceError: morse is not defined
21:02 < samholmes> damnit
21:03 < Industrial> js> braille(english(braille('what')))
21:03 < purr> Industrial: ReferenceError: english is not defined
21:03 < samholmes> how did braille get in there?
21:03 < pachet> don't pester the cat kids
21:03 < samholmes> is the cat blind?
21:03 < CoverSlide> who the fuck owns purr?
21:03 < samholmes> how does the cat know braille?! :o
21:03 < sambarino> it's a nyan cat
21:04 < sambarino> it knows everything
21:04 < aslant> js> braille.toString()
21:04 < purr> aslant: (string) 'function braille(text) {\n\t"use strict";\n\t\n\ttext = String(text);\n\tvar i = 0,\n\t\tresult = [],\n\t\terr = [],\n\t\tlen = text.length,\n\t\tch,\n\t\talphanum = "⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵";\n\t\t\n\twhile (i < len) {\n\t\tch = text.charCodeAt(i++);\n\t\tif (ch >= 65 && ch <= 90) {\n\t\t\tresult.push("⠠" + alphanum[ch - 65]);\n\t\t} else if (ch >= 97 && ch…
21:04 < Industrial> braille killed the cat
21:04 < samholmes> is it grumpy?
21:04 < sambarino> what if grumpy cat is just a nyan cat who lost his pop tart shell
21:04 < samholmes> sambarino: that could make sense.
21:06 < samholmes> shower time
21:06 < aslant> hammer time
21:06 < chilts> happy time
21:06 < aslant> space time
21:06 < CoverSlide> http://donkeogh.com/wp/wp-content/uploads/2013/02/Hammerzeit.jpg
21:06 < samholmes> peanut. butter...jelly time?
21:06 < chilts> heh
21:09 < sambarino> http://i.qkme.me/3tuwmt.jpg
21:12 < s5fs> haha, who set the topic? I just threw up a little in my mouf.
21:12 < sambarino> lol
21:13 < sambarino> that would be isaacbw :P
21:13 <@isaacbw> haha
21:13 < s5fs> savage!
21:14 < nathan7> js> this.silly = function() { return 'yes, this is silly' }
21:14 < purr> nathan7: function () { return 'yes, this is silly' }
21:14 < nathan7> js> this.silly
21:14 < purr> nathan7: undefined
21:15 < nathan7> CoverSlide: now I have can't touch this stuck in my brain
21:17 < s5fs> nathan7: you can spin that into "super freak" pretty easily
21:18 < onlywei> hey guys, I just published my very first npm package, but I'm running into a problem. My package uses express and stylus, and when it is installed globally, stylus does not have permissions to compile css files in the /usr/lib/node_modules/ directory
21:19 < onlywei> is there any way I can change permissions of the stylesheets folder during npm install time?
21:19 < chilts> onlywei: it's usual to install your package locally rather than globally
21:19 < nathan7> s5fs: ++
21:19 < chilts> unless it's a command line program, which is usually ok to install globaly (and requires only read permissions)
21:19 < nathan7> onlywei: prepublish
21:20 < onlywei> so, programs that use stylus should never be installed globally?
21:20 < nathan7> onlywei: you don't actually need this to happen on install
21:20 < nathan7> onlywei: you the CSS to be part of the published package
21:20 < nathan7> onlywei: *you want
21:20 < onlywei> ah
21:20 < onlywei> that makes sense!
21:21 < nathan7> [=
21:21 < onlywei> so I should just remove the part of my express program that tries to compile the CSS
21:21 < nathan7> yeah
21:21 < onlywei> alright throwing stylus in the trash can
21:22 < nathan7> Stylus is pretty awesome
21:22 < nathan7> but unless the goal of your program is to compile stylus shit on the user's machine, it probably shouldn't
21:25 < onlywei> I'm trying to find the documentation to write a script to compile a .styl file manually, so I can run it before I publish
21:25 < onlywei> i don't know how to use it without express
21:26 < mscdex> >> ''+{toString:function(){return 'node.js rules!'}}
21:26 < purr> mscdex: (string) 'node.js rules!'
21:32 < samholmes> onlywei: can't you use the stylus module?
21:32 < onlywei> I finally found the API for that
21:33 < samholmes> kk
21:33 < onlywei> so i'm supposed to write:
21:33 < onlywei> stylus(str, { filename: 'something.css' }, function (err, css) {});
21:33 < samholmes> Y can I NO set topic?
21:33 < onlywei> what is str and filename?
21:33 < onlywei> is filename the output file?
21:33 < samholmes> ouput
21:34 < onlywei> and I have to fs.readFile('style.styl') to get the input str?
21:34  * samholmes thinks
21:34 < samholmes> readFileSync even
21:35 < samholmes> theres a command line version of stylus too
21:35 < samholmes>  Ithink
21:35 < onlywei> yeah but I don't want to use that because I want to register this as my pre-publish
21:36 < nathan7> onlywei: ..prepublish can run arbitrary commands
21:36 < nathan7> onlywei: "scripts": { "prepublish": "find -name '*.stylus' -exec stylus {} \;" }
21:36 < onlywei> !
21:36 < nathan7> or use a makefile
21:36 < samholmes> what's a pre-publish dad?
21:37 < nathan7> whatever you want
21:37 < nathan7> onlywei: add stylus as a devDependency (npm install -D stylus)
21:37 < nathan7> onlywei: when npm runs scripts it adds node_modules/.bin to the PATH
21:37 < nathan7> samholmes: a script that is run before npm publish
21:37 < nathan7> samholmes: to prepare a package for, well, publishing
21:38 < nathan7> samholmes: compile your coffeescript, compile your stylus, etc
21:38 < nathan7> samholmes: pull in non-npm deps
21:38 < onlywei> just doing "stylus": "*" in my devDependencies will allow command line stylus to work?
21:38 < faceleg|work> probably have to do npm install -g stylus for that
21:39 < samholmes> isn't the source code stylus though?
21:39 < samholmes> Why would you publish non-source code?
21:40 < onlywei> I'm not really sure when a Makefile gets called in this publish/install lifecycle
21:40 < Domeni___> samholmes: there's a large difference between "publish to npm" and "push to github"
21:40 < onlywei> I see it in a lot of people's packages, but I don't know when it gets run
21:40 < samholmes> Domeni___: indeed, but they both share the word "to"
21:40 < Domeni___> faceleg|work: onlywei: no global install is needed for that; if it's in your dev-dependencies, then you can put `stylus whatever` in the prepublish script and it'll work.
21:40 < faceleg|work> Domeni___: good to know
21:41 < Domeni___> onlywei: Makefiles are not integrated into npm in any way. If you want to use "make" as your prepublish command though, go ahead (although this will make it very hard for Windows users to submit pull requests, if you're building a library)
21:41 < nathan7> samholmes: the npm registry is not a source code repository
21:41 < nathan7> samholmes: it is an executable code repository
21:41 < samholmes> nathan7: oh
21:41 < samholmes> oh
21:42 < nathan7> samholmes: it's where npm install gets shit
21:42 < samholmes> oh
21:42 < onlywei> ah
21:42 < onlywei> I'm starting to get the picture
21:42 < nathan7> onlywei: npm install -D will install it and add to devDependencies in your package.json
21:42 < nathan7> onlywei: npm install -S will install stuff and add it to dependencies
21:42 < nathan7> depending on a * version will break things unexpectedly in the future
21:43 < onlywei> so, making a .js script as my prepublish script seems to be compatible with windows
21:43 < onlywei> ?
21:43 < nathan7> node blah.js
21:44 < nathan7> npm defaults to ~1.2.3 style for versions, which is shorthand for >=1.2.3 <1.3.0
21:44 < nathan7> it's a best practice
21:44 < onlywei> awesome
21:44 <@mbalho> http://semver-ftw.org/
21:44 < nathan7> [=
21:44 < inspiron> if I call require('path').resolve('node_modules'); then does 'node_modules' need to be in the current directory that that code is run from?
21:44 < nathan7> 'sup, beardy one?
21:45 < nathan7> inspiron: what are you trying to do?
21:45 < inspiron> or can 'node_modules' be one directory up from where it was called and still resolve
21:45 < Domeni___> onlywei: yes, js script is awesome
21:45 < inspiron> I'm reading the grunt source code to see if what I want to do is possible
21:45 < inspiron> and that is a line in their source code
21:45 < Domeni___> inspiron: that will resolve node_modules relative to process.cwd()
21:45 < nathan7> http://nodejs.org/api/path.html#path_path_resolve_from_to
21:47 < inspiron> okay, tanks
21:47 < inspiron> thanks
21:49 < onlywei> alright this stylus API seems to have thrown me for a loop
21:49 < onlywei> do I have to fs.writeFile myself
21:51 < onlywei> what's the point of the filename option in the stylus render method
21:51 < onlywei> http://learnboost.github.io/stylus/docs/js.html
21:51 < onlywei> just error reporting?
21:51 < nathan7> Probably
21:51 < nathan7> use The Source, Luke
21:52 < nooga> I'm writing a simple module that's meant to be installed globally. I've specified "bin": { "foo": "./bin/foo" } in package.json. How do I require other files from ./bin/foo.js ?
21:52 < richcollins> Is there any way to specify an nom dependency as a path?
21:52 < nooga> I mean what is '.' when the "binary" is called
21:53 < nathan7> richcollins: './x'
21:53 < richcollins> nathan7: So that works?  Didn't' see it in the docs
21:53 < nathan7> and .. works of course
21:53 < nathan7> it's in the docs
21:53 < richcollins> https://npmjs.org/doc/json.html
21:53 < richcollins> I see version numbers, http and git
21:54 < nathan7> http://nodejs.org/api/modules.html
21:54 < nathan7> richcollins: npm is a package manager
21:54 < nathan7> richcollins: require() is node core
21:54 < richcollins> ah ok right I can just require
21:56 < Almindor> I get a node crash in node-code when doing a simple http.get: http://pastebin.com/HxWyWUE3
21:56 < Almindor> the url it's trying to get is fine, works nicely in browsers
21:56 < nooga> nathan7: this ./x was an answer to my question ;) ?
21:57 < Almindor> any ideas what it might be?
21:57 < nooga> so what's . then? bin directory or package root? 
21:57 < Almindor> it also shouldn't be a header problem, since just changing one small param of the url to generate slightly different response doesn't crash it anymore, but I compared those two urls and the headers are 100% same
21:58 < Almindor> note that the server it gets from is a windows IIS
21:58 < nathan7> nooga: yes
21:58 < nathan7> nooga: . is bin
21:58 < nathan7> nooga: . is where your current file is
22:01 < CoverSlide> js> JSON.parse('')
22:01 < purr> CoverSlide: SyntaxError: Unexpected end of input
22:22 < MrDHat> What are the best practices to develop a plugin friendly Node.js library? Any recommended design patterns?
22:23 < ashnur> morning
22:24 < Mortchek> MrDHat, well written modules are "plugin-friendly"
22:24 < MrDHat> Mortchek: How will you define well written modules?
22:24 < nathan7> MrDHat: They do one thing well.
22:25 < Mortchek> MrDHat, I think, among other things, the Unix Philosophy applies
22:25 < nathan7> MrDHat: If your module is a 'framework', fuck that shit generally
22:25 < Mortchek> https://en.wikipedia.org/wiki/Unix_philosophy
22:25 < nathan7> MrDHat: if your module is one thing I can combine with other modules, then it's awesome
22:25 < Mortchek> Some of the rules are nonsensical regarding JS (e.g., string interfaces), but for the most part these rules are great guidelines
22:26 < Mortchek> s/string/text/
22:27 < MrDHat> I get it. Thanks Mortchek, nathan7 :)
22:28 < MrDHat> One more thing.
22:28 < MrDHat> Is there a way i can use "Actual" OOP in Node?
22:29 < Mortchek> If by "actual" you mean "classical", then not really, and I'd suggest not trying.
22:29 < Mortchek> JavaScript does have moderately good tools for prototypal inheritance.
22:30 < Mortchek> Or you could think in terms of object composition, which is pretty much always an option.
22:30 < Mortchek> MrDHat, this article might interest you: http://killdream.github.io/blog/2011/10/understanding-javascript-oop/
22:31 < MrDHat> Thanks. Will give it a reding!
22:33 < qbit> grr.. gyp is assuming cp -af will work on every system
22:34 < qbit> hurts
22:34 < qbit> stab deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/make.py
22:35 < malkomalko> what is the proper way to close a stream? I have a csv stream on 0.10.x where I only want to take a look at the first X lines and then not process anymore
22:35 < malkomalko> I've read the docs and tried unpipe but that doesn't seem to do the trick
22:47 < malkomalko> nm.. unpipe worked it's just that it cleared the remaining items in the buffer
22:49 < lacrymology> if I do self = this in the constructor, and then I use self in prototype functions, I'm asking for trouble,right?
22:49 < lacrymology> I mean, self will be always the last instance, right?
22:50 <@Nexxy> self will be undefined
22:50 < lacrymology> Nexxy: that doesn't seem to be true. This is in practice pretty much a singleton, but the code is working right now
22:51 < lacrymology> Nexxy: it's not inforced as a singleton, what I mean is that I have only one instance created in my program
22:52 <@Nexxy> lacrymology, then you may be doing your prototypes wrong
22:52 < lacrymology> Nexxy: I'm defining the prototypes *inside* the constructor
22:52 <@Nexxy> yeah
22:52 <@Nexxy> move them out
22:53 < lacrymology> Nexxy: ugly, but it works, I don't know, someone saw it somewhere and repeated code
22:53 < lacrymology> Nexxy: ok, but why?
22:53 < lacrymology> Nexxy: is there no danger of stuff being called with the wrong `this`? I don't completely understand the `this` behavior in JS yet
22:54 <@Nexxy> lacrymology, a lot of reasons I believe
22:54 <@Nexxy> someone else may care to explain it
22:54 <@Nexxy> but yeah, this context is fucked up
22:55 <@Nexxy> as well as teh prototype chain
22:55 <@Nexxy> for all instances
23:09 < s5fs> I'm trying to replace a string within a file. I'm using readFile, but when I run "data.replace('one','two')" and then console.log(data) I don't see anything change.
23:09 < s5fs> This is too silly to not work, so I'm clearly borking something up haha! Thoughts?
23:09 < Remy> data = data.replace() ?
23:10 < s5fs> Remy: haha! maybe!
23:10 < Remy> :p
23:10 < Remy> just confirmed on my console i think.
23:10 < s5fs> Remy: you get the golden star of achievement today, that was 100% the issue. i am shamed, haha!
23:10 < Remy> i think we all do this once or twice a day
23:11 < Remy> :)
23:11 < s5fs> my tummy hurts and it's sunny out and my PM isn't here, so i'm kinda unfocused anyways
23:12 < s5fs> </excuses>
23:12 < Remy> blaming it on the sun, classic.
23:12 < Ritzton> Hi everybody
23:12 < s5fs> Remy: i'm in portland, we don't see "yellow face" very often 
23:13 < s5fs> Ritzton: hi!
23:13 < Havvy> s5fs: You can see it today.
23:13 < Ritzton> I can't install https://github.com/LearnBoost/node-canvas, it is saying I am missing cairo.h, I have download cairo dev package and insert in my environement variable the include path, but still doesnt work, I have windows 7, any idea please ?
23:14 < Havvy> Gorgeous blue skies and clouds only taking up 50% of the sky.
23:14 < s5fs> Havvy: indeed, it's absolutely beautiful today
23:14 < Remy> wth is a yellow face ?
23:14 < Havvy> Remy: The sun.
23:14 < s5fs> Remy: gollum (lord of the rings) refers to the sun as "yellow face" and the moon as "white face"
23:14 < s5fs> Shouts to my peeps in middle earth!
23:14 < Remy> ohhhhhh
23:15 < Remy> i was googling Yellow Face and was getting other results... i was like, wtf are these guys talking about...
23:15 <@isaacbw> I occasionally get a sudden urge to pack up and move to seattle
23:15  * chilts is in Middle Earth
23:15 < redleaves> Next up in job offer: "Looking for a javascript hobbit, a ruby ranger or a clojure dwarf"
23:15 < s5fs> isaacbw: not sure what to tell you. i would pick the bay area over seattle if you're thinking about switching coasts
23:15 < Remy> I'm in Santa Barbara, right now.  doesnt make me any happier.. Maybe i need to move up north.
23:16 < Ritzton> nobody know what I should do to be able to install node canvas ?
23:16 < Havvy> Ritzton: npm install node-canvas    ???
23:16 < redleaves> Related: "Looking for a lot of Java orcs" and "Wanna work for our dark lord Sauron?"
23:17 < Havvy> redleaves: MicroSauron ;)
23:17 < s5fs> Remy: surf more, code less
23:17 < s5fs> ORCacle software
23:17 < redleaves> Havvy: Don't you mean FourSauron?
23:17 < Ritzton> havvy> after npm install canvas, during the building I got an error, it is saying I am missing cairo.h
23:17 < redleaves> They got 41M funding today, maybe they'll stop looking for that one ring...
23:18 < Remy> yeah... with the price of housing in the area i think surfing instead of working isn't an option :)
23:18 < Havvy> Ritzton: Then install cairo.
23:18 < s5fs> Remy: haha! hard to get broadband in a surf van too
23:18 < Havvy> It should be in your package manager.
23:18 < Havvy> your Linux distro's package manager **
23:18 < Remy> :)
23:19 < Ritzton> havvy> what do you mean by install cairo ? I have download the dev package and insert the include path in my environment variable ? isnt it what I should do ?
23:19 < Ritzton> Havvy> I am using windows 7
23:19 < listochkin> how do I know if my current callback is running in a domain?
23:20 < Havvy> Eh, my Windows-fu for development is zero.
23:20 < Remy> listochkin: can you clarify ?
23:21 < berkbozkurt> hello everyone
23:22 < Ritzton> any idea please ? I can't understand how to install canvas on windows 7
23:23 < listochkin> Remy: I mean, suppose I have a module A that does something potentially dangerous. I want to wrap a function in that module in a domain dA. Now suppose I require that module A from module B. And inside that module I've already created a domain dB. What I want is to use dB inside of A instead of creating an extra domain dA since my code is now protected by that external domain. Is it possible and is it a good idea?
23:26 < s5fs> Ritzton: Are you following the install instructions for windows?
23:26 < s5fs> Ritzton: If so, where are you getting hung up in the process?
23:27 < listochkin> Ritzton: Install Python 2.7.3, Visual Studio Express 2012 with ALL updates. Install Github for Windows, it comes with GitBash. Open GitBash, go to your node project and try installing that module again. Little known fact: using bash on Windows increases your chances to build Node modules by 200% or even more.
23:28 < s5fs> listochkin: those are good odds!
23:29 < ChrisPartridge> listochkin: then don't put the domain in module A, just have it in module B
23:29 < listochkin> s5fs: I build jsdom and its contextify module that way, like a boss :)
23:29 < Ritzton> I mean maybe I didnt get the right dev package that's why, I am going to try again I did everything here : https://github.com/LearnBoost/node-canvas/wiki/Installation---Windows
23:30 < s5fs> listochkin: I find it pretty interesting that you're running node on windows, you doing a lot of c# work as well or just enjoy the platform?
23:31 < listochkin> ChrisPartridge: what if A is my module and B is someone else's app?
23:33 < listochkin> s5fs: Windows 7 sits in my Parallels, but I test things to make sure they work from time to time. Most devs in my part of the world are on Windows so to get them to use Node I have to make sure that it works for them, too.
23:33 < listochkin> s5fs: C# and F# are quite nice actually
23:34 < s5fs> listochkin: gotcha, that makes more sense. I'm only working in c# maybe 20% time now, but it really varies by project. I haven't done anything with F# but Hanselman makes it look awesome.
23:35 < jackcviers> So I am a mostly client-side dev and scala-dev. I'm used to using spray, an actor-based nio framework for scala, and/or netty. How does nodejs compare for concurrent web apps?
23:35 < qq99> so.. I've got some common objects for both client&server, is there a recommended pattern for managing dependencies?  main.js requires underscore, myobj.js also needs to use underscore, and I want main.js to load myobj.js (but myobj.js complains _ is not defined)
23:36 < listochkin> s5fs: we have a Windows native client for our service in addition to web, so three people in our company actually write both F# and C#. I think they use F# for networking protocol stuff but I'm not sure.
23:37 < listochkin> Remy, ChrisPartridge: so, guys any ideas about my nested domains question?
23:37 < ChrisPartridge> listochkin: in that case I'm not too sure, I think domains should be used in the application context, not so much in every module - I could be wrong
23:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:38 < s5fs> listochkin: thanks for sharing about your environment, always curious to hear how others work :)
23:38 < listochkin> ChrisPartridge: ok then, perhaps, a note in a docs with a domain usage sample would work fine. Thank you!
23:39 < ChrisPartridge> listochkin: keep in mind, I've only played with domains - maybe get one of the node guys opinions before committing to memory :)
23:40 < ChrisPartridge> qq99: check out browserify
23:41 < listochkin> ChrisPartridge: yeah, probably. I tried googling through NodeJS mailing list but with no luck. I'm pretty sure I'm not the first person to ask that question. But I looked at Node-MySQL by felixge and he doesn't use domains in it.
23:42 < garthk> MongoDB with 1TB data behind ~50 million keys. Am I insane?
23:43 < ChrisPartridge> garthk: yes :)
23:43 < ChrisPartridge> what's performance like, and hardware?
23:43 < garthk> qq99: just require('underscore') in each module that needs it.
23:44 < qq99> ChrisPartridge, thanks, looks interesting
23:44 < qq99> garthk, I'm also sharing these same files with the browser
23:44 < qq99> I guess I could stub up the require to be a noop
23:44 < s5fs> listochkin: if you're looking for examples on how to use domains, i see there's a video up on nodetuts
23:44 < s5fs> listochkin: i personally know nothing of domains (yet) but am happy about that video haha
23:45 < garthk> ChrisPartridge: well, I get to dictate some of that. I can throw a few dozen GB RAM at the problem, and plenty of storage performance. My worst case solution will be a bushy looking directory tree. It's not a bad worst case: I'll only have to seek a few times before I start streaming one of the 2-20MB values. 
23:46 < listochkin> s5fs: thanks, I'll take a look, I liked the example on API page
23:50 < garthk> ChrisPartridge: hmm. LevelDB failed when I tried to get it to store each of the half-million rows per blob, but might work fine when I chunk up the values to that 2-20MB size…
23:53 < s5fs> listochkin: best of luck. videos rarely work for me, I go into "tv mode" and drift away
23:53 < garthk> Couchbase Server max value size is 20MB. I'd have to gzip my JSON documents and store them as opaque blobs. Dang.
23:54 < ChrisPartridge> garthk: Yeah, I've yet to play with LevelDB - but my experience with mongo wasn't too pleasant, I just keep crawling back to postgres :)
23:54 < garthk> ChrisPartridge: would you deploy a PostgreSQL table with a column of 20MB JSON documents?
23:55 < wookiehangover> Domenic__: piiiinnnng
23:58 < samholmes> how do I do a markdown filter in jade?
23:59 < samholmes> When I try to do :markdown I get an unknown filter error
23:59 < samholmes> How does jade know which markdown module to use?
23:59 < asterick> Do you have markdown-js installed?
23:59 < asterick> https://github.com/evilstreak/markdown-js
23:59 < asterick> ":markdown must have markdown-js, node-discount, or marked installed"
--- Log closed Fri Apr 12 00:00:07 2013
