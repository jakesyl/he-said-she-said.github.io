--- Log opened Wed Apr 03 00:00:10 2013
00:16 < ningu> it's always nice when a module you want to use has been fixed to work an hour before you decide to use it
00:44 < zarac>  jjjkj
00:44 < zarac> oops
00:49 < kuty> If you are a senior Node guy, and even more if you have experience in Angular/Backbone, If you enjoy working remotely, then we have a position for you at Clevertech.biz
00:49 < ningu> an angular backbone sounds painful
00:50 < kuty> Here is our job post for those that are qualified and interested http://clevertech.theresumator.com/apply/xWaZRh/Remote-Rockstar-Developer.html
00:52 < ljharb> kuty: please don't post jobs here. that's what linkedin is for.
00:53 < ChrisPartridge> linkedin? hah
00:53 < chilts> anything with rockstar in it gets looked over these days, especially by rockstars :)
00:54 < kuty> I haven't participated in IRC in a long time. Are there some rules I should be aware of?
00:54 <@Nexxy> it's generally considered bad form to just come in and start advertising 
00:54 <@Nexxy> whereas if you participate and contribute first, it may not be as frowned upon
00:54 < chilts> sometimes it's best just to say "ping me if you're interested in work), at least it's not as intrusive anyway
00:55 < chilts> however, I don't think there are any rules about it anywhere ... I guess it's all implied :)
00:55 < howdynihao_> ping me, theres a african prince looking to offload some money
00:55 < chilts> or here -> http://jobs.nodejs.org/
00:55 < kuty> Just to put a good foot forward, we have contributed to open source projects all the time (YiiBooster, if you are interested) and prefer to give back to the community
00:56 < kuty> We hope to do something similar for Node + Relational Databases -- something we have some background with
00:57 < kuty> And I just recently discovered that this channel existed :)
00:58 < kuty> sorry for the bad form, hope those who are serious themselves avail themselves to take a closer look at us
00:58 < ningu> kuty: in my opinion there is somewhat of a shortage of mature node modules for relational databases
00:58 < ningu> there are good database drivers, there are pretty good SQL generators
00:58 < ningu> but the node world is somewhat focused on NoSQL so there's not quite as good support overall
00:59 < kuty> ningu, that's the exact space we'd like to make a contribution. Relational databases have their uses too :)
00:59 < ningu> ultimately I am not sure if ORMs are the way to go
00:59 < ningu> but relational databases, yes, absolutely have their uses
00:59 < ChrisPartridge> ningu: yeah, use more views/procedures
01:00 < ningu> ChrisPartridge: yes, I am coming along to that view
01:00 < ningu> so to speak
01:00 < ChrisPartridge> hence why i started postgres-cabinet and then dumped it when i actually learned how powerful postgres was
01:00 < ningu> ChrisPartridge: so how do you generate your SQL? by hand?
01:01 < ningu> as in concating strings or whatever
01:01 < ningu> or do you just make it so you never need to generate anything very complex in the client?
01:01 < kuty> So we have a senior group that includes guys that have worked on production Node system for top iphone games data accumulation .... and looking to expand the team
01:01 < ChrisPartridge> ningu: essentially make it so its a SELECT * FROM <view> or SELECT someFunc(input,input2); etc
01:02 < ningu> yeah
01:02 < ningu> but what if you have complicated WHERE clause conditions that you need to mix and match for example?
01:02 < ChrisPartridge> but, postgres-cabinet generates queries with joins, aggregates etc via string concats
01:05 < ningu> "Now I hope you did not get too much carried away with marketing speak because I certainly were. Unfortunately it seems like there is something terribly wrong with these general pattern." I can haz english?
01:07 < howdynihao_> wait
01:07 < howdynihao_> what are other ways people usually generate their sql?
01:07 < ningu> howdynihao_: ways other than what?
01:07 < reid> Is the source for logs.nodejs.org open?
01:08 < howdynihao_> using a string concat
01:08 < ningu> ultimately yes it's string concats, the question is whether you generate them from an AST or something more adhoc
01:08 < howdynihao_> show me a module for AST
01:08 < ningu> howdynihao_: gesundheit
01:09 < ningu> it's the first sql generator for node that I consider worth the trouble
01:09 < howdynihao_> most people agree?
01:09 < ningu> howdynihao_: no idea
01:09 < howdynihao_> with you on that i mean?
01:09 < howdynihao_> ok because i dont like the sugar api they used
01:10 < ningu> it helps when you have a lot of stuff to all get together in one query with various conditions
01:10 < ningu> will pastebin an example, one sec
01:11 < ningu> http://pastebin.com/b06hAseQ
01:12 < ningu> howdynihao_: so I can reuse the same code for generating queries for one record (mnOne / loadMn), lots of records (mn), or a count of records (also mn)
01:15 < ningu> and I share the same code for the whole app for limit, offset, and order by
01:15 < ningu> that's applyGlobalParams, in a different file
01:18 < cloudbender> Busy place tonight
01:19 < ningu> howdynihao_: I don't have a very strong opinion about exactly what the api looks like, I might have done it differently, but the underlying model for representing queries and generating the sql is very well thought out
01:19 < ningu> what the api should look like*
01:19 < ningu> the author is also very responsive, he's already put in several fixes and new features I asked for
01:24 < cloudbender> Anyone still using Wordperfect ?
01:26 < cloudbender> Considering the Corel tools for web layout.  Adobe is to much to deal with.
01:26 < ChrisPartridge> cloudbender: :|
01:26 < trusktr> cloudbender, All you need is a text editor. ;)
01:26 < trusktr> cloudbender, And perhaps codeacademy.com.
01:27 < cloudbender> My designer person is not a coder.  She needs 'training wheels' on her bike.
01:27 < trusktr> cloudbender, oh. lol
01:27 < cloudbender> yeah
01:27 < ningu> so why is wordperfect the answer?
01:27 < trusktr> cloudbender, there are plenty of free tools out there you can try.
01:28 < ningu> woid poifect
01:28 < cloudbender> Well, adobe has made the process of subscribing to their 'cloud' offering as distasteful as possible.  We cancelled our order, and are considering our options.
01:29 < ningu> that's what they call it in new york
01:29 < ningu> cloudbender: ok but I fail to see why wordperfect is relevant here
01:29 < ningu> what are you trying to do?
01:29 < samholmes> Node.js is a language.
01:29 < ningu> english is a language too
01:29 < cloudbender> I need a robust set of tools packaged and maintainable.
01:29 < cloudbender> for windows.
01:29 < ningu> tools to do *what*?
01:30 < trusktr> cloudbender, If she's just a designer, perhaps it'd be better if she does it in Gimp (or photoshop, or Illustrator, or Inkscape) and another coder chops it into HTML.
01:30 < ningu> you can get a robust set of tools at a hardware store
01:30 < samholmes> I didn't know Node.js was a language.
01:30 < ningu> samholmes: ah we're being all technical ;)
01:30 < trusktr> samholmes, Node.js isn't a language... JavaScript is a language.
01:30 < samholmes> trusktr: Then why does Joyent call Node.js a language? http://joyent.com/technology 
01:30 < cloudbender> she does the layout, and forwards it on to a finisher
01:31 < ningu> cloudbender: is this for a web site? a pamphlet? a building facade?
01:31 < trusktr> samholmes, Because they felt like it.
01:31 < trusktr> lol
01:31  * samholmes was just waiting for someone to say it wasn't so that way he could make a point.
01:31 < samholmes> lol
01:31 < cloudbender> ningu it's for a website.
01:31 < trusktr> It's definitely javascript though.
01:31 < trusktr> It's similar to saying that jQuery is a language.
01:31 < trusktr> but it's not.
01:32 < ningu> cloudbender: so why not use something wysiwyg like dreamweaver?
01:32 < ningu> in any case node.js is not relevant, it sounds like
01:32 < cloudbender> dreamweaver is an adonbe product
01:32 < cloudbender> adobe
01:32 < ningu> so use someone else's proudct
01:32 < ningu> product, even
01:32 < cloudbender> right ........
01:32 < ningu> but wordperfect isn't going to help you
01:33 < ningu> it doesn't make web pages
01:33 < cloudbender> Corel has a number of tools
01:33 < ningu> and we don't make web pages in that way either
01:33 < ningu> so we aren't the people to ask
01:33 < mscdex> lotus notes!
01:33 < ningu> MacPaint
01:33 < cloudbender> lol
01:34 < ningu> cloudbender: or use some online thing for designing a site, there are various ones
01:35 < cloudbender> WordPerfect is still a superior word-processor, was hoping someone here had dabbled with their design tools, no big deal.
01:35 < mscdex> http://www.youtube.com/watch?v=8uy7micFCcA
01:35 < ningu> cloudbender: you are in the wrong place.
01:36 < cloudbender> I am in the right place.
01:36 < ningu> cloudbender: this irc channel is the wrong place. believe me. :P
01:37 < ningu> we do web apps here not page design
01:37 < cloudbender> ningu thanks for your comments.
01:43 < cloudbender> So.  Have not had time to work with 0.10. yet.  Is it absolutely wonderful and incredible ?
01:45 < dukedave> What's a good reference for functions? In this case I'd like to know if an array contains a value.
01:46 < ningu> dukedave: you mean core javascript methods? MDN
01:46 < dukedave> ningu, well, what would a node dev use? (I'm on day two)
01:46 < dukedave> (of learning node)
01:46 < ningu> if it's node specific use the api docs at nodejs.org
01:46 < cloudbender> Duke learn the array methods.
01:47 < ningu> if it's just javascript go to MDN
01:47 < ningu> https://developer.mozilla.org/en/JavaScript/Reference
01:47 < cloudbender> MDN is a good suggestion, but beware some references are dated.
01:48 < msucci> is there anything like async (or a feature in async) that will run multiple functions and not call the callback until all the functions are complete?
01:48 < msucci> *multiple functions asynchronously
01:48 < ningu> async.parallel?
01:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:49 < msucci> the problem with parallel is that once an error is thrown, the callback will be called immediately
01:49 < CoverSlide> Are they? It's a wiki, and usually it's kept pretty up-to-date
01:49 < msucci> in this case I'm validating multiple mongoose schemas and want to collect all the errors
01:49 < ningu> msucci: oh... well you can always just wrap the callback to do something different with errors
01:50 < CoverSlide> cloudbender: in fact, usually I find them TOO up-to-date, containing JavaScript 1.8.7 features that aren't in ES5
01:50 < cloudbender> CoverSlide that too
01:50 < cloudbender> I know they are working hard
01:51 < cloudbender> msucci maybe you could push each error onto an array and process the list after your last callback.
01:52 < msucci> ningu: I had thought about that, but was curious to see if there was anything built into an existing package
01:52 < msucci> cloudbender: yeah I thought about that as well, it seems like I will have to do something along those lines vs finding a package that does it for me
01:53 < msucci> I was also looking at async.compose
01:53 < cloudbender> Some people use 'promises.
01:53 < msucci> yeah I was looking at promises too actually but I don't think that mongoose.validate returns a promise
01:53 < cloudbender> I wrote a 'task scheduler' for a similar problem.
01:53 < msucci> I tried it using _.when but no cigar
01:54 < msucci> did you solve the problem by just creating an array of errors and handling those after all functions are complete?
01:56 < cloudbender> I pushed a stack of functions with associated completion and error flags onto an object array, then launched each function
01:57 < cloudbender> excuse me.  a group of functions.
01:57 < msucci> gotcha, hmm
01:57 < cloudbender> the word 'Stack' is a hot-button in node.
01:59 < cloudbender> The thing is, I'm used to threading, which one cannot do in node.
01:59 < LuckyBurger> u can spawn processes iirc
01:59 < cloudbender> yes but processes cannot share memory
02:00 < LuckyBurger> well there are ways to have IPC
02:00 < cloudbender> Oh yes.
02:00 < cloudbender> And nicely.
02:00 < cloudbender> But no shared memory.
02:01 < LuckyBurger> idunno maybe look at fibers?
02:02 < cloudbender> I have not looked at fibers yet.
02:02 < LuckyBurger> https://github.com/laverdet/node-fibers
02:02 < cloudbender> I am about 120 days into my node education.
02:02 < LuckyBurger> ah
02:02 < LuckyBurger> well node isnt all that old. so things change quickly ;)
02:02 < LuckyBurger> Fibers introduce yeilding
02:03 <@Nexxy> fibers is still a thing?
02:03 < LuckyBurger> is it?
02:03 < LuckyBurger> i dunno
02:03 < LuckyBurger> looks like some sorta control lib
02:03 < ChrisPartridge> fibers smibers
02:03 < LuckyBurger> if you just need sync control use async or one of the others
02:04 < cloudbender> I embraced node style IPC and it's not too bad all in all.
02:04 <@Nexxy> or callbacks ;)
02:04 < LuckyBurger> ugh. sometimes thats just a pita :P
02:05 < msucci> I think I'm just going to use async.parallel and then hold off on processing the errors until the callback is called after all functions are complete
02:06 < cloudbender> lemme see ... brb
02:08 < cloudbender> where is your reference for async.parallel ?
02:08 < msucci> sorry, I don't follow, what do you mean?
02:09 < cloudbender> async.parallel  is that node ?
02:09 < LuckyBurger> its a library
02:09 < cloudbender> ah
02:09 < msucci> oh, it's a node package, here: https://github.com/caolan/async#parallel
02:09 < cloudbender> I see.
02:10 < LuckyBurger> sometimes you want to run 4 things, then once they are all complete do something else
02:10 < msucci> for control flow, useful for avoiding the callback pyramid of doom 
02:10 < LuckyBurger> so u run them in parralel
02:10 < LuckyBurger> yar ^ ^ ^
02:11 < cloudbender> Definitely worth a look, but I avoid leaving 'strict' mode.
02:11 < cloudbender> Not sure why.
02:11 < cloudbender> Feel the need to confine myself maybe.
02:12 < cloudbender> I do that sometimes.
02:16 < cloudbender> What language is 'async.js' written in ?
02:18 <@Nexxy> cloudbender, javascript
02:18 < cloudbender> doh!
02:19 < cloudbender> So, then it can't actually be running parallels ? 
02:20 < nkohari> the idea of async is that somewhere in the process you're doing something that will yield control
02:20 < nkohari> for example, if you needed to call out to 10 remote machines
02:20 < nkohari> async.parallel would let you make all 10 calls "at once"
02:20 < cloudbender> gotcha
02:26 < TheEmpath> ClassMetadataInfo->isSingleValuedAssociation() does what exactly?
02:27 < TheEmpath> if i had a oneToMany relationship that was created via a manyToMany association (with unique set to true on the non-owner) then is that a single value association?
02:29 < prettyrobots> Is there a way to get require like relative path lookups without using `require`?
02:29 < prettyrobots> I want to load SQL.
02:29 < prettyrobots> It would be easy for me to say `myobject.loadSQL('./foo.sql')`.
02:29 < substack> __dirname + '/foo.sq'
02:29 < substack> l
02:29 < prettyrobots> `myobject` would know the source directory.
02:29 < TheEmpath> woah... wrong channel
02:30 < TheEmpath> my fault
02:30 < prettyrobots> substack: Yeah?
02:30 < prettyrobots> substack: That's how you'd do it?
02:31 < prettyrobots> substack: Wouldn't `path.join(__dirname, 'foo.sql')` be the nerd perfect way to do it?
02:31 < prettyrobots> Or are forward slashes cannonical in Node.js?
02:33 < zivester> are the socket.io server and client separate beasts?   does socket.io-client automatically reconnect on the 'disconnect' event?
02:40 < dorner> zivester, ya they are different.. socket.io-client should auto reconnect
02:40 < dorner> there's a bunch of settings you can configure
02:40 < dorner> max retries, reconnect timeout, etc
02:41 < dorner> but ya by default it auto-reconnects immediately on 'disconnect'
02:42 < zivester> dorner, thanks... just saw the big disclaimer on the github module about the 1.0.0 documentation, and I'm using 0.9.11 ... switching to that tag I know see all these options... i wish i saw this a couple days ago
02:42 < dorner> cool
02:51 < prettyrobots> Thank you substack for permission to make it not very complicated at all.
03:12 < willwh> 8
03:17 < mscdex> 7
03:19 < AAA_awright> 6
03:41 < TehShrike> 5.66666
03:41 < bvalosek> repeating of course
03:41 < TehShrike> ^
03:43 < cloudbender> too late to join the puzzle.  dammit.
03:44 < cloudbender> gnite.
04:07 < substack> prettyrobots: forgiveness, not permission!
04:08 < substack> freedom isn't free so steal it
04:11 < prettyrobots> substack: Noted. Thank you.
04:13 < pana> Hello
04:13 < ChrisPartridge> hai/bai
04:19 < Incip> boooo my node.js client isn't connecting :<
04:21 < Incip> There it is :D
04:23 < chilts> mscdex: what is your twitter handle? I tweeted it and /cc'd it to someone random the other day thinking it might have been you (though I didn't check the name close enough and got it completely wrong) :)
04:24 < chilts> mscdex: Node.js rules!
04:24 < JamesMGreene> When using `fs.readFileSync`, do I need to do something special to make it read absolute file paths?  It's working fine for relative paths but doesn't seem to be working for an absolute path
04:28 < JamesMGreene> ^ isaacs mbalho Nexxy substack dscape et al <3
04:30 <@Nexxy> JamesMGreene, try path.resolve() and process.cwd()
04:30 <@Nexxy> or __dirname
04:30 <@Nexxy> path.resolve(__dirname, './relative/from/current/script');
04:31 < JamesMGreene> Oh, good call
04:31 < JamesMGreene> Though wouldn't I actually want `path.relative`?
04:31 <@Nexxy> well you can read from absolute paths
04:31 < JamesMGreene> I have an absolute path already but it's not working
04:32 <@Nexxy> hmm, are you sure it's valid?
04:32 <@Nexxy> it should just work
04:32 < JamesMGreene> yup, it's
04:32 < JamesMGreene> require('os').tmpDir()  <--
04:32 < JamesMGreene> + a subdir
04:32 < JamesMGreene> Already verified the files are all there
04:32 < JamesMGreene> I am curious if it is a Windows bug since the absolute paths doesn't start with "/"?
04:33 < JamesMGreene> don't*
04:33 <@Nexxy> hmm
04:33 <@Nexxy> well that's why I use path.resolve
04:33 <@Nexxy> instead of putting the separators in myself
04:37 < JamesMGreene> Well
04:37 < JamesMGreene> `fs.existsSync` returns true
04:39 < JamesMGreene> but the `fs.readFileSync` on the same path returns an empty Buffer
04:39 < JamesMGreene> ^ Nexxy
04:40 <@Nexxy> JamesMGreene, that is odd indeed
04:40 < ill0> hi node
04:40 <@Nexxy> I went ahead and tried it out here
04:40 <@Nexxy> it works for me but I'm on OSX
04:40 < ChrisPartridge> JamesMGreene: console log the path output, is it the right path?
04:41 < ChrisPartridge> I've sometimes had it return a dir, instead of a file path on windows
04:41 < JamesMGreene> Depends on what you'd qualify as "right" :)
04:41 < JamesMGreene> About to read file: C:/Users/JAMESM~1.GRE/AppData/Local/Temp/dos2unix_test/dos.sh
04:41 <@Nexxy> could it be the ~1 thing?
04:42 < JamesMGreene> Granted, it has the forward-slashes instead of the Windows backslashes... but again, it works fine for `fs.existsSync`
04:42 <@Nexxy> is that with path.resolve() ?
04:42 < JamesMGreene> no, not yet
04:42 <@Nexxy> mm or maybe just use
04:42 <@Nexxy> path.normalize()
04:43 <@Nexxy> I *think* that will convert the slashes on windows
04:43 <@Nexxy> not sure
04:43 < ChrisPartridge> resolve should normalize anyway
04:44 < JamesMGreene> About to read file: C:/Users/JAMESM~1.GRE/AppData/Local/Temp/dos2unix_test/dos.sh
04:44 < JamesMGreene> path.resolve: C:\Users\JAMESM~1.GRE\AppData\Local\Temp\dos2unix_test\dos.sh
04:44 < JamesMGreene> So perhaps that's it?
04:44 < JamesMGreene> Weird that `fs.existsSync` works but not `fs.readFileSync`
04:44 <@Nexxy> it's possible
04:46 < andrew12> it probably is a windows issue
04:46 < andrew12> if it ever had the \ as /
04:50 < JamesMGreene> %^&*
04:51 < JamesMGreene> Nexxy ChrisPartridge: Nope, still didn't work
04:51 < mscdex> chilts: i don't use twitter, so it most definitely was the wrong person :-)
04:52 < ChrisPartridge> JamesMGreene: give me a sec, i'll try on a windows boxen
04:52 < mscdex> JamesMGreene: is it the ~1 that's problematic?
04:54 < JamesMGreene> mscdex: Dunno... again, it's a dir given to me BY Node.js core (`require('os').tmpDir()`), and it is a valid [short name] path on Windows, and `fs.existsSync` returns `true` for it
04:54 < mscdex> JamesMGreene: try readFileSync with the expanded version and see if that works
04:55 < JamesMGreene> I also can't turn it into a relative path because it's on a different drive (and Windows doesn't support pathing between them with a relative path)
04:57 < chilts> mscdex: :)
04:57 < ChrisPartridge> JamesMGreene: working fine here, although I don't have a short name style path
04:58 < JamesMGreene> path.resolve: C:\Users\James M. Greene\AppData\Local\Temp\dos2unix_test\dos.sh
04:58 < JamesMGreene> Does it exist? true
04:58 < JamesMGreene> actualBuffer.length = 0
04:58 < ChrisPartridge> JamesMGreene: is there something in the file? :P
04:58 < JamesMGreene> Yup
04:58 < JamesMGreene> 27 bytes
04:59 < JamesMGreene> This is on Node 0.8.18, btw
05:00 < ChrisPartridge> I'm on 0.8.x also
05:00 < JamesMGreene> But yeah... for extra weird bonus points, I am actually writing that file in the same Node process run and it writes fine
05:00 < ChrisPartridge> let me try change my temp path to something whacky
05:00 < JamesMGreene> Maybe it's not closing before the read starts?
05:00 < milani> is there any db out there with pubsub? after each insertion, the app should be notified.
05:00 < ChrisPartridge> JamesMGreene: well, separate it out and run the read on its own
05:01 < ChrisPartridge> milani: postgres, LISTEN/NOTIFY.. it's the bomb.. b
05:01 < mscdex> milani: redis?
05:02 < mscdex> mysql with a server plugin? ;-)
05:02 < ChrisPartridge> come on mscdex, now you're just being silly
05:03 < ChrisPartridge> :P
05:03 < JamesMGreene> path.resolve: C:\Users\James M. Greene\AppData\Local\Temp\dos2unix_test\dos.sh
05:03 < JamesMGreene> Does it exist? true
05:03 < JamesMGreene> actualBuffer.length = 26
05:03 < JamesMGreene> There we go...
05:03 < milani> mscdex, redis? u sure?
05:03 < JamesMGreene> Yeah, must be that the write isn't closing the file before the read starts...?
05:03 < ChrisPartridge> JamesMGreene: must be
05:03 < JamesMGreene> What's the proper way to close up?
05:04 < milani> ChrisPartridge, hmmm, anything more lightweight?
05:04 < JamesMGreene> I did `.end()` and `.destroySoon()`... perhaps I need to do `.destroy()` instead?
05:04 < JamesMGreene> (This is with a WritableStream)
05:04 < ChrisPartridge> milani: as mscdex mentioned, redis has pub/sub
05:05 < mscdex> ChrisPartridge: i'm serious. i actually did write a mysql plugin that would send udp packets to a node process :-)
05:05 < mscdex> via unix socket
05:06 < ChrisPartridge> mscdex: http://sphotos-a.xx.fbcdn.net/hphotos-ash3/c0.0.250.250/p403x403/548578_475539705813737_585211469_n.jpg
05:06 < mscdex> worked pretty good for what i needed it for
05:07 < milani> mscdex, is it public?
05:07 < mscdex> not currently
05:07 < ChrisPartridge> JamesMGreene: when you end, a close even should be fired when it's actually done, or use the callback on .end
05:07 < mscdex> but it's pretty simple though
05:07 < JamesMGreene> Yeah, just noticed that
05:07 < JamesMGreene> I switched it over and it seems to work now
05:07 < ChrisPartridge> ^5
05:08 < mscdex> there are some good examples of mysql server plugins out there
05:08 < JamesMGreene> (Switched it over such that I invoke the `done` call in the 'close' listener instead of immediately after calling `destroySoon`)
05:08 < mscdex> then it's just a matter of using the *nix syscalls
05:08 < ChrisPartridge> JamesMGreene: probably a good idea
05:08 < howdynihao_> lets see how long it takes mongodb to write 12e5 documents
05:08 < JamesMGreene> ChrisPartridge: Apparently more of a requirement than just a good idea. :)
05:09 < JamesMGreene> Thanks for your help!
05:09 < ChrisPartridge> no worries, I'll change my temp path back now :p
05:14 < xxblakefailxx> screen -d
05:14 < jhgaylor> howdynihao: not as long as it would take you to read them :)
05:16 < howdynihao_> it looks like its 1,000 writes per second
05:17 < jhgaylor> howdynihao: are those actual writes?  mongo likes to pretend like it's writing but really do it later
05:18 < howdynihao_> yea its fire and forget
05:18 < howdynihao_> its just a single mongodb server, i'm just filling in some junk data
05:19 < jrdn> I have a REST api and a mobile app.. what is the best way to provide authentication?  I'm looking at oauth2's Resource Owner Password Credentials Grant ("password" grant_type) [http://tools.ietf.org/html/draft-ietf-oauth-v2-27#section-4.3], however, no libraries seem to have support for this.. am i looking in the wrong place or thinking of this wrong?
05:19 < jrdn> anyone have ideas?
05:20 < howdynihao_> jhgaylor: actually no, its 1,000 of whatever the database is reporting back to me, i'm assuming it's actually written this stuff
05:20 < howdynihao_> since i can see the db growing as well as the document count
05:20 < jhgaylor> jrdn: oauth doesn't sound bad to me.  
05:20 < jhgaylor> https://github.com/Mashape/mashape-oauth/blob/master/FLOWS.md
05:21 < jrdn> i read that today :P
05:21 < jhgaylor> jrdn: https://github.com/litl/rauth
05:21 < jhgaylor> I've never used that module, just had it starred
05:21 < jrdn> python?
05:21 < jhgaylor> yes
05:21 < jrdn> let me plug this into my python to node.js converter
05:22 < jrdn> ;p
05:22 < jhgaylor> oh.  i thought i was in #django
05:22 < jhgaylor> hahahaha
05:22 < jhgaylor> my bad
05:22 < jrdn> ahhahahaha
05:22 < jrdn> you confused me since i'm in python ;)
05:22 < dorner> win 2
05:23 < jrdn> i was looking at passport but i can't find anything that supports the password grant type
05:24 < jrdn> i may be wrong, but i was thinking i'd have an oauth server and an oauth client which authenticates using http://tools.ietf.org/html/draft-ietf-oauth-v2-27#section-4.3
05:24 < jrdn> just would suck having to build this all myself
05:24 < jhgaylor> i don't know that this will help you, it was written for a tent.io app https://github.com/jeena/Bungloo/blob/master/WebKit/scripts/controller/Oauth.js
05:25 < jhgaylor> the author hangs out in #tent if you find it useful
05:25 < JamesMGreene> w00t, finally, all tests passed!
05:26 < xxblakefailxx> exit
05:28 < jrdn> thanks jhgaylor 
05:28 < jrdn> i'll check it out.
05:28 < jhgaylor> jrdn sorry i couldn't be more help
05:28 < jrdn> np :)
05:28 < jhgaylor> I'm knew to node, and pretty new to js in general
05:28 < jhgaylor> new*
05:28 < jrdn> you did it i was doing this in python ;)
05:28 < jrdn> haha
05:28 < jhgaylor> in js, is a function a value or an expression or neither?
05:30 < xxblakefailxx> it's an object
05:30 < xxblakefailxx> : P
05:30 < xxblakefailxx> in JS everything is basically a function
05:31 < jhgaylor> one page says its a value, one page says its an expression, one irc channel says function is function and another says its an object
05:31 < jhgaylor> can i get a little consistency please universe
05:31 < nightfly__> it's a value/object
05:32 < hackedy> well it's both? "5" is a value AND an expression
05:33 < xxblakefailxx> so basicallyt here are primitives and objects
05:33 < xxblakefailxx> functions are of type object, but there is known thing with the higher order function that is where you get everyone telling you that in essence eerything is reall just a function
05:34 < jhgaylor> hackedy: my understanding is 5 is a value, 5+5 is an expression, and 10 is a value
05:34 < nightfly__> and some objects are callable (functions and native functions)
05:34 < jhgaylor> and all values are expressions
05:35 < jhgaylor> i feel like i should read more of my book and just be confused for a little while :)
05:35 < hackedy> jhgaylor: the important distinction is between expressions and statements, I think
05:36 < JamesMGreene> Any recommendations for the best way to deal with feedback from a module that does a lot of filesystem work, i.e. transforming files?
05:36 < xxblakefailxx> ageed with hackedy
05:37 < JamesMGreene> Right now it's just a lot of `console.log` calls, no fatal errors (all just dumped to `console.error` and then ignored, no actual "result" to the final/done callback
05:37 < JamesMGreene> https://npmjs.org/package/dos2unix
05:38 < nightfly__> say, does each require of the same module create a new set of objects for it or are they shared?
05:38 < JamesMGreene> shared
05:38 < JamesMGreene> IIRC
05:39 < JamesMGreene> isaacs Any input on that filesystem feedback questions above? ^
05:39 < JamesMGreene> *question
05:59 < ChrisPartridge> nightfly__: shared, based on the path of the module afaik
06:01 < ChrisPartridge> JamesMGreene: your question is pretty vague, what feedback do you want?
06:02 < JamesMGreene> Just curious on patterns, I guess
06:02 < JamesMGreene> e.g. do I leave all the `console.log`/`console.error` calls or mask them behind a "debug" options flag (probably wise)?
06:02 < JamesMGreene> do I return a list of files that were transformed and/or a list of ALL files that were inspected and a status indicator of what was done to them if anything
06:03 < JamesMGreene> etc.
06:03 < JamesMGreene> Does anything warrant a fatal error being passed to the `done` callback? I don't allow any of those right now since the assumption is it will be operating over many files
06:05 < JamesMGreene> ChrisPartridge: Those kinds of things
06:09 < ChrisPartridge> JamesMGreene: i'd probably callback and error, if the paths couldn't be found, otherwise an object detailing changed/scanned files would be probably be ideal
06:09 < ChrisPartridge> possibly a 'scanned/evaulated' event, and a 'converted' event
06:13 < duko> I'm looking for javascript regular expressions that I might use to remove console.log from files
06:14 < duko> I think this should be possible
06:14 < duko> does anyone know where I might find something like this?
06:18 < jhgaylor> duko: i have 99 problems that i tried to solve w/ regular expressions.  now i have 100 problems
06:18 < JamesMGreene> ChrisPartridge: Oh yeah, good idea on the event emissions, though I guess I'll have to require they make an object to attach them to?
06:19 < JamesMGreene> jhgaylor: You need to up your RegExp skills :)
06:20 < ChrisPartridge> duko: google fu
06:21 < ChrisPartridge> JamesMGreene: just make dos2unix return an event emitter
06:22 < venkateshy> Hi All,If node.js is single threaded, Does it follow any time slicing method allocated to each event?
06:22 < ChrisPartridge> that way you could listen to 'error' and 'converted' events without having to wait for the whole lot to finish
06:23 < ChrisPartridge> duko: http://stackoverflow.com/a/6598788
06:23 < JamesMGreene> duko: If you happen to use Grunt as your build system, then you can use this Grunt plugin task: https://npmjs.org/package/grunt-remove-logging
06:24 < venkateshy> I mean if there are 1000 requests at a time on my http server, given the scenario that it is unithreaded, how much time will it allocate for each request?
06:25 < howdynihao_> >> console                 .               log     (   ' ? '                                               )
06:25 < purr> howdynihao_: undefined; Console: ' ? '
06:26 < howdynihao_> all those white space can be new lines
06:26 < howdynihao_> so its complicated
06:27 < JamesMGreene> ChrisPartridge: So something like:  `var d2u = require('dos2unix').dos2unix('*.js', {}); d2u.on('convert', announceConversion); d2u.on('end', allDoneMoveOn);`?
06:28 < JonathanNeal> Can node validate input against a schema, like an xsd/xml?
06:28 < howdynihao_> venkateshy: as much time as the request needs?
06:29 < ChrisPartridge> JamesMGreene: yep, looks good
06:29 < ChrisPartridge> and IF a fn has been passed to the callback, collect and fire that at the end as well
06:30 < JamesMGreene> ChrisPartridge: Now you're just gettin' fancy
06:30 < nathan7> JonathanNeal: If you find a lib for it, sure
06:31 < ChrisPartridge> fancy is my middle name
06:31 < nathan7> JonathanNeal: That's certainly not something that should be in core
06:31 < venkateshy> howdynihao_:  so , If my request is not dealing with i/o or database query results, my single thread should stick with that request alone?
06:31 < venkateshy> until it is completed
06:32 < nathan7> if you're doing just processing, yes
06:32 < nathan7> if you do http.createServer(function(req, res) { res.end('hello, world') })
06:32 < nathan7> then yes, it's not going to hop into the event loop in the middle of shit because that's by definition impossible
06:35 < trippeh> Hrm. Is the size paramter for .read method on a net.Socket is supposed to work?
06:35 < trippeh> it beeing a stream and all
06:36 < trippeh> I get fewer bytes than I ask for
06:37 < bigx> hi there! i'm wondering what's the most suitable build tool for node.js? make, jake, grunt, something else? after trying grunt for node.js I'm wondering if make is a more pragmatic choice
06:37 < trippeh> "If there is no data to consume, or if there are fewer bytes in the internal buffer than the size argument, then null is returned" - says the docs.
06:37 < bigx> what's your opinion?
06:37 < ningu> bigx: what exactly will the build do?
06:39 < bigx> on server side : mostly run tests, generate reports files (jshint/checkstyle, tests results/xunit, tests coverage/cobertura) and generate docs
06:39 < ningu> yeah, sounds like more of a make job
06:39 < ningu> that isn't really what grunt is designed for
06:39 < bigx> with jenkins as CI
06:40 < bigx> yes for now it's kinda ok with grunt, but soo much tools, plugins and hacks
06:40 < ningu> bigx: well I'm not really the person to ask since I work on projects with only a couple developers
06:41 < ningu> some other folks here, I'm sure, have faced the same issue
06:41 < zaleb> we use teamcity
06:41 < zaleb> for server side
06:41 < bigx> thx ningu! figuring out the best practices on that subject is hard
06:42 < zaleb> currently does jshint/jslint/checkstyle and nodeunit
06:42 < ningu> bigx: yeah, I'm also scratching my head a bit -- I know of lots of testing frameworks but not a lot for managing the stuff you mentioned
06:42 < bigx> i've got the same with jenkins+grunt
06:42 < JamesMGreene> I'd use Grunt, personally
06:42 < ningu> you want something to pull it all together basically it sounds like. and my first step would basically be to write a little shell script or node script to do it, but that's kind of ad hoc
06:42 < JamesMGreene> make is a mess, and not cross-platform either
06:43 < shapeshed> +1 for grunt 
06:43 < ningu> JamesMGreene: so you make your own plugins/tasks? or what?
06:43 < shapeshed> slower than make but cross-platform
06:43 < JamesMGreene> ningu: When needed, yeah
06:43 < JamesMGreene> It's super easy
06:43 < ningu> I've never done that with grunt so I don't really know how flexible it is
06:44 < ningu> I figure it isn't that hard, was more conerned with it imposing too much on you
06:44 < substack> I just use `npm run`
06:44 < bigx> here is a project i started to explore the industrialization stuff
06:44 < substack> and put stuff in the scripts field
06:44 < bigx> here is the gruntfile : https://github.com/xseignard/rss-unify/blob/master/server/Gruntfile.js
06:44 < ningu> substack: hey btw, you might want to document in dnode that only dnode.connect() creates the d.id attribute
06:45 < bigx> as you see I rely on make commands for some stuff, i'm not satisfied
06:45 < substack> ningu: what do you need .id for?
06:45 < ningu> I'm wrapping it with shoe and it wasn't obvious to me that the id wouldn't be there
06:45 < substack> ids aren't actually useful anymore really
06:45 < substack> since you setup the streams from the outside
06:46 < ningu> substack: basically I'm trying to port my socket.io code to experiment with dnode -- it's a very small bit of code and all it does it broadcast. basically X number of users on the site and it broadcasts to all of them
06:46 < ningu> right now I just generate a random id on the server end to track the connections
06:47 < ningu> and do for (var i in connections) essentially
06:47 < ningu> but maybe there's a more sensible way
06:49 < ningu> substack: I got a couple pointers from your old pub/sub example but this is simpler obviously
06:51 < JamesMGreene> ChrisPartridge: So with a shift to an EventEmitter-style util, would you recommend also replacing the `console.log` calls with an event emission (e.g. `this.emit('debug', msg);`)?
06:51 < ningu> oh, duh. shoe provides an id. 
06:52 < ningu> also undocumented however :P
06:57 < ningu> well, it makes sense, all shoes should have a uuid
06:57 < bigx> so, according to substack, npm run-script is also an option
07:07 < ChrisPartridge> JamesMGreene: yep, could call it "information" event or something, or have a debug: true option
07:07 < bigx> what I see is some people rely on makefiles : see mocha or socket.io as examples
07:09 < bigx> I like the way you can get a clear snapshot of the project health on jenkins : https://dl.dropbox.com/u/17657227/jenkinsjs.png
07:10 < chakrit> wondering if there has been any effort to port http://slim-lang.com/ to node.js yet?
07:11 < ningu> chakrit: looks an awful lot like jade.
07:11 < ningu> but not identical ...
07:11 < ChrisPartridge> very similar
07:12 < chakrit> yeah it is heavily influenced by jade and haml.
07:12 < ningu> random comment: I have now concluded that inheritance is a really necessary feature of a template language
07:13 < ChrisPartridge> ningu: how so?
07:15 < ningu> ChrisPartridge: it strikes me as the most sensible way of creating layouts -- you can have as many as you like, each template declares which one it uses
07:16 < ningu> and it lets you rework the layout without necessarily rewriting the templates that depend on it
07:20 < howdynihao_> im so confused, why isn't the httpAgent releasing a connection back into the pool when a request is done :(
07:20 < bigx> i think grunt is overengineered for a node.js build, i'll give a try to a plain makefile, "npm install;make build" seems easy enough
07:20 < ningu> have you gone around the pool with a filter?
07:21 < howdynihao_> im making multiple http requests to the same host, so i keep it at the default 5, it does 5 requests and pauses... im guessing waiting for the 5 requests to close/time out
07:21 < howdynihao_> it should be reusing the connections
07:21 < howdynihao_> but i dont know how else to free it? i mean i do my request, i get a response... i would think it would free it by then 
07:24 < howdynihao_> ah i know whyyyyyyyyyyy
07:25 < howdynihao_> its not being freed because im not grabbing the data res.on('data') so it sits there.. doh i only cared about the statusCode
07:25 < howdynihao_> and headers
07:28 < chakrit> bigx: makefiles are actually pretty simple to write once you understand some of the basic concepts.
07:30 < JamesMGreene> The next minor release of Grunt will reduce some of the "overengineering" you referred to, bigx
07:30 < JamesMGreene> Basically it will go after a generic "Node task" concept instead of specifically requiring "Grunt tasks"
07:32 < [AD]Turbo> hi there
07:32 < timoxley> JamesMGreene +1
07:32 < chakrit> bigx: plus you get huge speed boost from all the optimizations and most of the shell for free.
07:33 < ningu> I just wish grunt wouldn't redesign itself entirely every release so that old grunt stuff doesn't work
07:33 < JamesMGreene> ningu: +1
07:33 < JamesMGreene> But I would also say that its overall design has improved with every redesign
07:33 < ningu> yes, it has
07:34 < JamesMGreene> So at least it's headed in the right direction
07:38 < bigx> JamesMGreene : good to know, thx! what I liked in the first place with grunt, was to have the same build tool for client and server side
07:38 < bigx> but, with grunt 0.4 and node 0.10 I faced some compatibility issues
07:38 < ningu> I always imagine it grunting when I run it
07:39 < substack> what do people even use grunt for I have no idea
07:39 < ningu> substack: automating things like concating files, minify etc. it's not really that amazing
07:40 < JamesMGreene> No, it's nothing crazy awesome
07:40 < JamesMGreene> It's just a great centralized tool to replace all the one-offs that so many of us have been building for years
07:40 < samholmes> Are there any projects out there like: A module/process that can be instantiated to receive incoming image files and store them and accept requests of the image under certain scale and crop dimensions (caching these transformed images into a file system)?
07:40 < JamesMGreene> Ant, make, jake, etc
07:40 < substack> ningu: oh that's lame
07:41 < substack> just use shell scripts or the scripts field in the package.json + npm
07:41 < ningu> substack: anyway for my shoe/sock question not sure if you saw my thing about mimicing socket.io broadcast, but I realized shoe's streams have an id so I just changed my code to use that
07:41 < samholmes> substack: how did you become an unix philosopher?
07:41 < bigx> on client side, grunt is a must have I think. It's questionable on server side
07:42 < JamesMGreene> substack: Shell scripts, eh? Thank goodness no Node devs work on Windows, right? Oh wait.... :(
07:42 < ningu> and store the dnode streams in a hash keyed by the stream id
07:42 < jrdn> hmm, what are some good ways of generating a token in oauth2?
07:42 < bigx> but having the same build tool on both, AND letting people with poor OS build their projects is appealing
07:43 < samholmes> ningu: I did something horrible and I exposed a event emitter through dnode/shoe, eek. I need to fix this, so let me know what you come up with on rolling a pubsub on top of shoe, mmk?
07:43 < ningu> samholmes: substack's old pubsub example is perfectly adequate, just use shoe instead 
07:44 < samholmes> shoe is a stream for sockjs
07:44 < ningu> http://hastebin.com/meveyumugi.js
07:44 < ningu> I know what shoe is
07:44 < chakrit> samholmes: maybe you can find something useful from the transload.it folks?
07:44 < substack> samholmes: https://github.com/dominictarr/mux-demux + https://github.com/substack/emit-stream
07:44 < ningu> I just mean use it instead of his socket.io wrapper
07:44 < bigx> JamesMGreene : do you have any link explaining what the new minor version of grunt will bring?
07:45 < JamesMGreene> bigx: https://github.com/gruntjs/grunt/wiki/Roadmap
07:45 < samholmes> substack: I thought streams where event emitters?
07:45 < substack> samholmes: category error
07:45 < chilts> any people in San Francisco wanna meet up on Friday evening? I'm coming over for just a few days from Wellington, NZ - wouldn't mind meeting up with like-minded peoples :)
07:46  * samholmes wishes he could go to SF, but hasn't the cash.
07:46 < ningu> chilts: sure, but I'm not the sort of person you probably mean :)
07:46 < ChrisPartridge> samholmes: re image processing, if you end up rolling something yourself - check out the netpbm module
07:47 < chilts> ningu: are you not like-minded? :)
07:47 < ningu> chilts: haha no, that's not what I meant -- I meant I'm not some major figure in node land
07:48 < ningu> nor do I have my own startup etc.
07:48 < samholmes> substack: explain? :D
07:48 < chilts> I don't know anyone personally there, except lots of people via the Node.js mailing list or this channel
07:48 < chilts> so I'm happy to meet with anyone who fancies it :)
07:49 < chilts> I was in SF 15 years ago for 3 days, so it's not like I know much around there :)
07:49 < ningu> I also haven't met any node developers although I did meet john resig before jquery was cool :P
07:49 < samholmes> ningu: so hipster
07:50 < dorner> n e node hipsters near miami
07:50 < chilts> heh
07:50 < chilts> nice
07:50 < ningu> samholmes: one thing I want to know, does anyone actually identify as a hipster seriously? or is it always an insult?
07:51 < ningu> that is actually a serious question
07:51 < samholmes> ningu: well, yes they do. But they're not hipsters.
07:51 < bigx> ningu : here's my opinion on this really important subject http://www.youtube.com/watch?v=lVmmYMwFj1I :)
07:53 < ningu> bigx: haha nice
07:55 < samholmes> hipsters can't identify, like anarchists can't assemble.
07:59 < samholmes> I don't understand how you can convert emitters to streams and visa versa
07:59 < samholmes> they're both objects with similar properties/methods
07:59 < someprimetime_> has anyone been in #bitcoin lately?
07:59 < samholmes> but one emits events, and the other streams data through events
07:59 < someprimetime_> woops wrong channel
07:59 < samholmes> someprimetime_: yes
08:00 < zaleb> All streams are instances of EventEmitter
08:00 < samholmes> just said something a few minutes ago
08:00 < samholmes> bitcoin is crazy high!
08:00 < someprimetime_> samholmes: offtopic, but those people are ridiculous in there
08:00 < someprimetime_> yeah it rose like 40 bucks almost today
08:00 < someprimetime_> it's stupid.
08:00 < samholmes> it'll crash soon
08:00 < samholmes> why they crazy?
08:00 < someprimetime_> yep. pump and dump
08:01 < someprimetime_> people who are using async in here… what would be the use case of using parallel vs queue?
08:01 < ningu> I don't really understand the obsession with bitcoins
08:01 < someprimetime_> would it just be for retrieving say a bunch of collections from mongo and then passing them to waterfall?
08:01 < ningu> someprimetime_: you can add to queue at any time
08:01 < ningu> as opposed to knowing in advance for parallel
08:02 < ningu> that's one reason anyway
08:02 < ningu> also... this is less obvious but I found that parallel choked on a huge set of tasks but queue did not
08:02 < someprimetime_> ah ok… i seem to only keep using waterfall but was wondering if i'm doing something wrong
08:02 < someprimetime_> or if there are better methods i should be using
08:02 < samholmes> ningu: bitcoins are cool well cause..umm...eh
08:02 < ningu> waterfall is for one specific workflow
08:02 < someprimetime_> it seems like there is a bunch of shit in it
08:02 < samholmes> well..umm..
08:02 < samholmes> I luv bitcoinz :D
08:02 < ningu> samholmes: I can think of reasons why they're cool in theory but still don't quite get it
08:03 < someprimetime_> i'm using waterfall but my callback argument list is getting progressively larger
08:03 < howdynihao_> how much is 1 bitcoin worth?
08:03 < ningu> the hwole thing just seems unrealistic to me at least based on what I know of it... in principle maybe one day it will work
08:03 < someprimetime_> bitcoins remind me of aim screen names
08:03 < someprimetime_> i used to sell those back in the day
08:03 < someprimetime_> 180 bucks for like a word based 3 char
08:03 < Incip> https://dl.dropbox.com/u/1783826/priiide.png I'm proud of my first little project :< Even if it's probably newbieashell to all of you!
08:03 < someprimetime_> .png? is it worksafe?
08:04 < dorner> afraid2click 8|
08:04 < Incip> yus
08:04 < someprimetime_> something tells me it's not with the evil face
08:04 < howdynihao_> yea but the thing about bitcoins is its a bubble
08:04 < Incip> it's a screenshot of this IRC channel in a command prompt + some newbie code that might be painful on the eyes :<
08:05 < someprimetime_> i'm worried about the people who hoarde (sp?) them
08:05 < howdynihao_> well the thing about bubbles is...
08:05 < howdynihao_> everyone thinks theyre smarter than the next guy
08:05 < howdynihao_> so they think they can sell just right before it bursts
08:05 < howdynihao_> at its peak
08:06 < someprimetime_> yep
08:06 < ningu> the thing about bubbles is it's really fun to blow them
08:06 < someprimetime_> the activity in the room is ridiculous i feel like the topic is #ADHD show and tell
08:07 < someprimetime_> everyone is triggering their bots with ticker prices
08:07 < someprimetime_> and calling other people newbs since they didn't get in a month ago
08:07 < someprimetime_>  i'm audi5000
08:09 < trippeh> Aha, the size-parameter to the read method is ignored while the socket is closing.
08:09 < trippeh> I wonder if that is a bug
08:12 < s2g>  a bug
08:13 < trippeh> Yeah. Will file bug later.
08:14 < ningu> trippeh: what module?
08:14 < trippeh> ningu: net.Socket I suppose (from net.createServer callback)
08:17 < ningu> trippeh: ah ok wasn't sure if you meant core
08:20 < howdynihao_> https://twitter.com/MileyCyrus/status/319170556937256960
08:25 < zaleb> : >
09:04 < faceleg> wow new jsdoc is really great
09:04 < faceleg> can't wait until more than one template is available
09:44 < Andrei__> Hi, Guys. Has anybody experienced "spawn ENOENT" issue when executing "npm install && bower install --dev"?
09:46 < unflores> I had an issue recently with installing from npm with ENOENT.  I don't know what the source of it was but when I installed it globally with -g i didnt get the same problem
09:57 < niftylettuce> https://github.com/teelaunch/npm-version-badge
10:18 < lethalduck> Who's used what from this list to keep their apps running and how have you found it? https://github.com/joyent/node/wiki/modules#wiki-restarting
10:18 < ningu> I found jesus on this channel
10:18 < lethalduck> Where?
10:18 < ningu> https://github.com/deoxxa/jesus
10:19 < unflores> seems legit
10:19 < lethalduck> I see the light!
10:19 < ningu> be careful, this jesus is also a daemon
10:20 < lethalduck> devil in sheeps clothing?
10:20 < lethalduck> come to deceive the nations... Hmm, could it be the anti christ?
10:22 < lethalduck> Did Jesus deliver you from your sins (of creating a buggy app that keeps falling over) though ningu?
10:23 < ningu> actually I mostly use it just to keep everything running in the background and restart when necessary
10:23 < ningu> but the auto-restart is also very handy
10:23 < lethalduck> Where is deoxxa any way?
10:24 < ningu> what right now?
10:24 < ningu> I am not my brother's keeper
10:24 < lethalduck> Yeah, well you mention his creation...
10:24 < lethalduck> Node has tools for every dam thing.
10:25 < ningu> deoxxa is in australia
10:25 < ningu> dams? wait that's one thing we haven't done yet
10:25 < lethalduck> I'm sure everything has been done. There's nothing new under the sun.
10:25 < ningu> but with streams that can be paused now in v0.10 that seems more possible
10:25 < lethalduck> Oh. Aussie
10:26 < lethalduck> Yes, but you should love your neighbour as your brother.
10:26 < lethalduck> That's what jesus said
10:26 < lethalduck> :-)
10:27 < ningu> actually I thought it was love your neighbor as yourself
10:27 < faceleg> goddamn broke my glasses today
10:27 < ningu> but I'm just a jew
10:27 < faceleg> 600$ replacements
10:27 < ningu> cheaper than google glass
10:27 < lethalduck> mm, I think you're right
10:27 < faceleg> lol v8 so ridiculous
10:28 < faceleg> how to convert Local<Object> to a bool
10:28 < lethalduck> Just a jew eh? So you know your old testament inside and out.
10:28 < faceleg> lol lol lol all the geese chasing me
10:28 < ningu> so I was looking into msgpack today wondering if it might be more efficient than json
10:28 < lethalduck> faceleg: lead it to jesus?
10:28 < ningu> but it turns out v8's json stringify/parse is currently wayyyy faster than any msgpack in node
10:28 < faceleg> ? I would have assumed it to be faster
10:29 < faceleg> because google
10:29 < ningu> faceleg: yeah, but msgpack is smaller, so reading it could be faster maybe...
10:29 < faceleg> forget reading v8 code
10:29 < faceleg> too many   baton->entryCallback = Persistent<Function>::New(Local<Function>::Cast(args[1]));
10:29 < ningu> faceleg: have you ever used any *mq whether rabbit, zero or otherwise?
10:29 < faceleg> no
10:30 < ningu> me neither
10:30  * faceleg high five
10:30 < ningu> I'm just getting curious what the whole big deal is
10:30 < faceleg> I have absolutely no idea
10:30 < faceleg> what are they supposed to do
10:31 < faceleg> things have so many other things related to them
10:32 < faceleg> who knew that git_tree_walk would throw out trees as well as blobs
10:32 < faceleg> herp derp, now I do.
10:32 < ningu> basically provide an abstraction of sockets -- as in tcp/ip sockets -- that can map to large scale distributed setups
10:32 < faceleg> also lg2 differentiates between blobs and executable blobs
10:32 < faceleg> ningu: that increases my understanding not at all
10:33 < ningu> faceleg: so you open a socket but instead of it going to one ip it goes simultaneously to 10,000
10:33 < ningu> or whatever
10:33 < faceleg> oh wow
10:33 < faceleg> that has no relevance to anything I do
10:33 < faceleg> I guess i'd love it if I had a cluster to play with
10:34 < ningu> yeah... I'm just curious about how you could actually make something with it that would make sense to make
10:34 < faceleg> do you have a cluster to play with?
10:34 < ningu> nope
10:34 < faceleg> side note: duplo is great
10:34 < ningu> what is duplo?
10:34 < faceleg> I guess it's what the super mega marketing speak product website uses
10:34 < ningu> google just gives lego hits
10:34 < faceleg> that one that serves millions of requests a nanosecond
10:34 < faceleg> lego for toddlers
10:34 < faceleg> http://duplo.lego.com/en-us/
10:35 < ningu> oh and here I thought you meant something relevant to web apps
10:35 < ningu> or clusters
10:35 < faceleg> no no, side note
10:35 < sinclair|work> faceleg
10:35 < faceleg> sinclair|work
10:35 < sinclair|work> :you mean nodejs is for toddlers right?
10:36 < faceleg> it isn't?
10:36 < faceleg> my daughter loves it, going to be tough breaking her heart like this
10:36 < bigx> hi again :) how do you deploy your app? let's say I've a rest API + some frontend. They are 2 separate projects (on the same repo though). So my build consists on concat+minify on client side, keeping only the server code (i.e. not the tests and useless stuff) and zipping all of that and pushing it to my server
10:36 < lethalduck> "forever" seems very popular
10:36 < ningu> forever doesn't work on v0.10 yet afaik
10:37 < faceleg> forever alone
10:37 < ningu> that's why I found jesus
10:37 < faceleg> see ningu that's how you humour
10:37 < ningu> and?
10:37 < faceleg> nah try again
10:37 < faceleg> lol jesus jokes are great though
10:37 < faceleg> I wonder if he could be refactored to do the whole resurrection bit async
10:38 < ningu> maybe the mystery of the trinity is resolved if you think of it as a three-threaded process
10:38 < lethalduck> jesus working with 0.10.2?
10:38 < bigx> :D
10:38 < ningu> lethalduck: yes in fact it requires 0.9 or greater
10:38 < lethalduck> Ok
10:38 < ningu> bigx: anyway I don't know, I've used post-receive hooks before
10:39 < ningu> and I have something like forever or jesus to keep the app running
10:39 < faceleg> I wonder if he could be refactored to do the whole resurrection bit async
10:39 < faceleg> damn up+enter
10:39 < tuhoojabotti> Why
10:39 < bigx> yup, when I was working with heroku, i had something similar
10:39 < ningu> why not?
10:40 < tuhoojabotti> Because.
10:40 < ningu> bigx: plus there's always puppet which some people seem to use for this stuff but I never have
10:40 < ningu> but I guess that would be more for deploying to many servers
10:41 < bigx> but now, i want to push only the needed code (i.e. not the tests, and other stuff) + minified client stuff on my server from my CI server
10:41 < ningu> I've never used CI
10:41 < ningu> I'm not a "real" developer :P
10:41 < faceleg> 57344 as an octal go
10:41 < ningu> >> 57344.toString(8)
10:41 < purr> ningu: SyntaxError: Unexpected token ILLEGAL
10:41 < bigx> me neither! i'm unemployed and proud to be!
10:42 < ningu> >> Number(57344).toString(8)
10:42 < purr> ningu: (string) '160000'
10:42 < faceleg> excellent
10:42 < faceleg> GIT_FILEMODE_COMMIT
10:42 < faceleg> who knows why that is a file mode
10:42 < ningu> bigx: I'm not unemployed. I just work only with one or two other people and generally not all at once on the same project so there's not much point
10:43 < bigx> so packing that in a zip seems to be a good idea, then i push that zip, unpack and forever or whatever or jesus will take care of my app
10:44 < ningu> sure although I don't know why pushing the repo is a problem really but whatever
10:44 < faceleg> jesus *does* care
10:44 < lethalduck> Hehe
10:44 < ningu> I realize you don't need it all on the server but what harm does it do?
10:45 < bigx> lets say the stack I use (cloudbees) is not "heroku/git" styled
10:46 < ningu> ok, I don't know what that is so it isn't helping
10:46 < ningu> anyway nothing stopping you from writing your own script to push a zip however you want
10:47 < bigx> yes, that's the point. i was checking if some tools were living in the world wide web
10:47 < bigx> some shell magic would do the trick
10:48 < ningu> and don't forget to npm install on the other end
10:48 < ningu> in case you added a dependency
10:48 < ningu> you can push node_modules I suppose if it's all pure-js or all the same architecture on dev & production
10:49 < ningu> but I always just npm install separately
10:49 < bigx> that's what i had in mind
10:50 < bigx> and is concatening (is it the right spelling??) a good practice for nodejs code?
10:50 < ningu> err... for the server code? why?
10:51 < lethalduck> To deploy it?
10:51 < ningu> seems pointless to me and probably would lead to unexpected bugs
10:52 < ningu> unless every file is wrapped in its own closure
10:52 < ningu> but there's still no reason to do it
10:53 < bigx> i think it's pointless too, but since i saw some tools achieving that for nodejs code i was wondering if i was missing some points
10:53 < ningu> well in that case I'm in the dark too
10:55 < bigx> it's kinda hard to find best practices about industrialization of nodejs codebase
10:55 < bigx> (CI, continuous deployment, reporting, etc.)
10:58 < bigx> but I feel it's coming. I see a lot of stuff (feature requests, some experiments, etc.) about producing report files (unit tests, coverage, coding style) for CI integration
11:03 < lethalduck> jesus is coming
11:09 < bigx> an interesting video about ci by angular team : http://www.youtube.com/watch?v=BNpV7npURhE
11:09 < bigx> maybe you'll see jesus in it :)
11:15 < lethalduck> ningu: forever is fixed now on 0.10.x
11:15 < ningu> ah ok
11:16 < lethalduck> https://github.com/nodejitsu/forever/issues/400
11:17 < ningu> lethalduck: still no new release
11:20 < lethalduck> ningu: I think the problem was with lazy
11:20 < ningu> ah ok
11:27 < unr3al011> hey
11:29 < unr3al011> iam running http requests in a loop with 500 iterations. how can it "stuck" on slow responses? it should be async and not stucking or?
11:37 < lethalduck> unr3al011: 500 iterations per?
11:38 < unr3al011> at all
11:38 < lethalduck> Ok.
11:38 < unr3al011> the loop processes 500 times and then its finished
11:39 < lethalduck> I had a similar problem. using ab. my limit was around 900. It wasn't node that was shitting itself, but something else. Just trying to remember what it was.
11:39 < unr3al011> do you mean sysctl config?
11:39 < unr3al011> or ulimit?
11:40 < unr3al011> i think i already have correct settings, but maybe i am wrong
11:40 < lethalduck> what's ulimit on?
11:40 < unr3al011> http://pastie.org/7299433
11:42 < unr3al011> i am monitoring network speed and it is very slow
11:43 < raffer> hi there, I test my express app with a mocha suite that does a series of http requests. I do checks of the output (statusCode, body, ...). But I would want to enable jscoverage from my client test suite on my app.\ 
11:44 < raffer> Anyone already done this?
11:44 < lethalduck> unr3al011: I'm not sure. You've done more than I did.
11:44 < unr3al011> can you provide your /etc/sysctl.conf?
11:46 < unr3al011> i nearly stuck since 7 days on this damn problem
11:46 < unr3al011> my throughput is so damn low :| 
11:46 < lethalduck> unr3al011: mines all commented out.
11:47 < unr3al011> mhhh
11:47 < lethalduck> Have you asked before on this channel?
11:47 < unr3al011> yes
11:47 < unr3al011> but nobody could "really help" me
11:47 < lethalduck> at different times?
11:47 < unr3al011> can you post "ulimit -a"
11:47 < unr3al011> yesterday i was here
11:49 < lethalduck> Only differences: pending signals                 (-i) 128060    max user processes              (-u) 128060
11:50 < unr3al011> mhhh
11:51 < unr3al011> yeah but i think that doesnt make any difference since it is > 100k
11:51 < unr3al011> could you run my code and tell me what network throughput you get?
11:53 < lethalduck> I've got to get up in 5 hours. I'll be on channel 3+ hours before this time tomorrow.
11:55 < unr3al011> okay
11:56 < unr3al011> but you still have 5 hours time? :D
11:56 < unr3al011> oh or do you mean sleeping? ^^
11:57 < der_On> hi. anyone using forever to run his apps? I'm still getting the "require.paths is removed" error using node 0.8 and recent forever version from npm
12:02 < toms_> you can add app path in forever parameters
12:03 < der_On> sorry my fault. I'm having an old forever version lying around in my home directory it seems
12:04 < der_On> well not actually I had old forever executables in my home/user/bin folder
12:11 < prettyrobots> Does an error, result signature function, does that pattern have a name?
12:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:06 < youjelly> im tryingt o implement tail like functionality using node, I installed tihs module called livefile using npm and I was trying to add a feature to it
13:06 < youjelly> basically I want to specify the filename through url
13:06 < youjelly> is that possible?
13:08 < youjelly> http://pastebin.com/ZrK3cDR8
13:09 < youjelly> that's my code, the only change I've made is basically overwritten the filename variable on connecton before serving index.html
13:09 < youjelly> but it doesn't work
13:16 < youjelly> im tryingt o implement tail like functionality using node, I installed tihs module called livefile using npm and I was trying to add a feature to it
13:16 < youjelly> basically I want to specify the filename through url
13:16 < youjelly> http://pastebin.com/ZrK3cDR8
13:18 < zaleb> watchfile is initiated on server startup
13:19 < zaleb> so you overwriting it on connection doesnt do anything..
13:20 < zaleb> and its scary what you are trying to do. Like you would make / your documentroot in  apache :s
13:22 < zaleb> anyway, you should start a watch on connection, based on the filename given
13:22 < zaleb> not on construct
13:24 < youjelly> so I call fs.watchFile on connection
13:24 < youjelly> right before I serve a file
13:24 < youjelly> ??
13:42 < youjelly> zaleb, I partially got what I wanted, I'm able to specify the filename through the URL but now if I open 2 client connections and specify abc in the first client and xyz in the second
13:42 < youjelly> as soon as the second client connects they both start listening to file xyz
13:45 < robscott_> hi everyone, I'm new to node and am looking to send emails from a http contact form
13:45 < robscott_> iv been reading about emailjs and nodemailer
13:46 < robscott_> I have written it in PHP but have been told to convert to node
13:46 < zaleb> youjelly, the whole livefile app is build to support a single file, you need to edit some things to make it work
13:46 < zaleb> for starters, the changed data is emitted on all sockets
13:47 < zaleb> you only want to emit the data to clients who registered to a particular file
13:47 < youjelly> yes
13:47 < zaleb> you could try to do this with the built-in rooms for socket.io
13:47 < zaleb> https://github.com/LearnBoost/socket.io/wiki/Rooms
13:48 < youjelly> thanks, let me have a look at that, I'm ttally new to node, so idk the best way to solve this.
13:49 < pachet> robscott_: having problems?
13:51 < youjelly> socket.join would be called on client side right
13:51 < youjelly> ??
13:51 < zaleb> no
13:52 < zaleb> when the connect event is fired on the server side
13:53 < zaleb> to make it a bit more difficult
13:54 < zaleb> create a socket.io event like 'startReadingFile'
13:54 < zaleb> with the file name
13:54 < zaleb> and start watching that
13:54 < zaleb> so instead of watching on httpserver connect, you start watching on socket.io connect
13:57 < youjelly> ok
13:57 < youjelly> what would the client side look like
14:01 < youjelly> 2nd day doing node.js its awesome btw
14:02 < youjelly> I need to see some basic tutorials on socket.io first
14:02 < zaleb> yes
14:02 < zaleb> that seems like a good idea
14:02 < zaleb> first make a basic chat with channels/rooms with socket.io
14:02 < zaleb> after that it should be fairly easy to do the file read
14:12 < lrvick> Anyone have any ideas on a fix for this ? https://github.com/astro/node-expat/issues/39
14:23 < basss> hello, i'm new to node, is there a plugin where i can send emails using node  
14:24 < unr3al011> basss: http://blog.nodeknockout.com/post/34641712180/sending-email-from-node-js
14:24 < basss> unr3al011: thanks !
14:24 < unr3al011> 5 seconds googling^^
14:25 < basss> unr3al011: lol
14:29 < shmoon> http://i.imgur.com/PKu5qnA.png
14:29 < shmoon> how do i solve that problem
14:31 < Epeli> shmoon:  not too easy. I can try calculating it in "integers" like this (25.58*100 - 0.01*100) / 100
14:31 < Epeli> s/I/you/
14:31 < pachet> >>true
14:31 < purr> pachet: (boolean) true
14:32 < pachet> >>+ 25.56999999.toFixed(2)
14:32 < purr> pachet: (number) 25.57
14:32 < shmoon> pachet: is that safe?
14:32 < pachet> qualify safe
14:33 < pachet> while you're thinking about that
14:33 < pachet> dear node:
14:33 < shmoon> like will i always get the proper value everytime in any case for example in this case its 25.57
14:33 < pachet> thank you for keeping a lot of your api methods context-inspecific
14:34 < pachet> shmoon: it's a deterministic fn, if that's what you mean
14:36 < pachet> does anyone know of a library for promises that like
14:36 < pachet> exposes methods emulating the behavior of host objects that you expect the promise to return
14:36 < pachet> so something to the effect of
14:37 < pachet> promiseStringify(someStringReturningPromise).replace('foo', 'bar')
14:37 < pachet> which returns a promise to replace that on the string you expect someStringReturningPromise to return
14:37 < pachet> am i crazy
14:38 < unr3al011> :D
14:38 < mscdex> you are crazy
14:38 < unr3al011> i do not even understand^
14:38 < trygve> ahoy! I'm having some npm problems where "npm install" gives me an CERT_UNTRUSTED
14:40 < trygve> This happens with node 0.10.x against a inhouse version of npm. And setting strict-ssl to false does not help.
14:40 < trygve> Anyone experiensed the same problem?
14:42 < pachet> mscdex: :[
14:43 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:47 < unr3al011> pretty quiet here
14:47 < mscdex> we're all busy creating the next big thing
14:47 < unflores> right
14:48 < pachet> its like pokemon in space
14:48 < pachet> you'll love it
14:48 < unflores> I'm making a real awesome rube goldberg machine
14:48 < mscdex> s/rube/ruby/
14:48 < unflores> it's going to be even better than the pokemans
14:49 < unflores> nah man, it is what you make it
14:50 < Dinesh_> how to use this chat
14:51 < Dinesh_> hi nay one
14:51 < unflores> it was working just fine
14:52 <@isaacbw> someone should host a ruby vs javascript developer tug of war 
14:53 < unflores> that's stupid, we should have a pissing contest
14:53 < unr3al011> we should solve my problem :D
14:54 < unflores> :(
14:54 < unr3al011> i'm going crazy. no solution.. i am trying for days to fix that damn thing but nothing i try works :D pretty frustrating
14:54 < pachet> isaacbw: js devs would win obviously
14:54 < pachet> what with all the hoisting
14:55 < unflores> teehee
14:55 <@isaacbw> hah
15:02 < masch> Buffer.toString('utf8',..)  seems to be slighly faster then .toString('ascii', ..). Is there a reason for this or is it just my benchmark that lies?
15:03 <@isaacbw> how much faster is slightly faster
15:04 < masch> 3.9 Million ops vs. 3.6 Million
15:05 < context> masch: its making up for streams2 being slower than streams1
15:06 < asturel> app.listen(8888,'127.0.0.1'); app.listen(8888,'::1'); could work?
15:06 < masch> isaacbw: it varys but utf8 seems to be always faster. (last result was 4.1 vs 3.5)
15:06 < unr3al011> somebody? http://stackoverflow.com/questions/15786668/low-bandwith-usage-low-throughput-on-multiple-http-requests-in-a-loop
15:06 < unr3al011> i would be so happy :D
15:08 < asturel> its listen some odd ipv6 address
15:08 < asturel> do i need to put the whole addr?
15:08 < asturel> i mean 0:0:0:1 instead of ::1
15:09 < Nevan> ok, first of all i am bloody new to node.js so some questions would sound dump, forgive me that... can i run cron jobs on certian urls to do some tasks, or is there some cmd line tool which i should use?
15:11 < Nevan> i would like to replace my php tool. with node.js , and before i start, i wanna make sure i can solve every bit i need, like getting an url, read the recieverd xml and save the content in a database like style
15:12 < masch> Nevan: you should be able to do everything in node that you can do in php 
15:12 < pachet> Nevan: you can definitely do that^
15:13 < masch> With node, you can store the first entry in your database even before the server has send the last line of xml ;)
15:14 < Nevan> ok, so what do you suggest, for storing xml files in a database, i want to be able to query this as well , like the "normal" sql syntax with sum up some values etc..
15:14 < masch> asturel: 0:0:0:1 isnt "the whole addr" in v6
15:14 < asturel> masch whatever but how do i listen both ipv4 and ipv6 in express?
15:14 < masch> Nevan: use postrgesql or mysql or whatever dbms you like
15:14 < asturel> do i need 2 express instance?
15:15 < Nevan> oh mysql is supported? i didn't know that, since when ?
15:15 < masch> Nevan: there are serveral modules for mysql 
15:15 < Nevan> great, so i don't need to take care of getting the data , nice
15:16 < Nevan> so i just need , querying and sorting that stuff in the right order, great... :-)
15:18 < masch> Nevan: request is nice for simple http requests, after that take a simple xml parser/xpath lib to parse your data and after that move the whole thing to your database. Shouldn't be that hard
15:18 < syncan> there's kind of a ton of people in here. that's impressive!
15:19 < Nevan> thx @masch , i will make some tutorials to see how it works, and then figure out how to use it with jquery..
15:19 < Nevan> for displaying some nice graphs and tables
15:19 < masch> asturel: you should be able to call listen multiple times.
15:19 < asturel> ::1 will listen only at localhost?
15:20 < asturel> coz when i passed 2a01:270:dd00:1200::1 it listened at 2a01:270:dd00:1200:8888
15:20 < asturel> tcp6 0 0 2a01:270:dd00:1200:8888 :::* LISTEN 15475/node
15:20 < asturel> ah.. it just stripped the ends
15:22 < syncan>  i have a completely non-technical question, but I'm sure there's experts in the matter: I've haven't slept in ~24 hrs, and I have an important meeting. in 5 hours. Sleep or no sleep?
15:23 <@isaacbw> your meeting is gonna suck if you don't sleep
15:23 < syncan> i have problems waking up
15:23 <@isaacbw> after 24 hours or so you can't fix it with caffeine
15:23 < zaleb> I usually get suckier if I sleep for such a short time
15:23 < syncan> no there's a chance it could suck worse
15:23 < zaleb> also problems waking up :)
15:23 <@isaacbw> I do too, so I get where you're coming from
15:24 < syncan> :)
15:24 < NuZZ> stab yourself in the leg when you wake up
15:24 < NuZZ> the adrenaline will keep you up
15:24 < NuZZ> wake up via alarm clock
15:24 < NuZZ> problem solved.
15:24 < syncan> what movie was that where the kid electrified his bed? I need that
15:25 < NuZZ> rings a bell in my mind
15:25 < NuZZ> but id just recommend you alarm clock + ENGAGE WILLPOWER.
15:25 < JoshLeaves> syncan: Call now to warn you're sick, don't go to that meeting, then don't do that kind of stuff again
15:26 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:26 < Nevan> @masch one more questiion about the mysql, what about new database entries, will the pages update themselfs as well ? Like it is in the mongodb tutorial with the colour count or what ever it was ?
15:27 <@isaacbw> that has nothing to do with your choice of database
15:27 < masch> the master has spoken
15:27 < syncan> josh: probably a good call  .. i'll have to work on the "never do it again" angle
15:27 < Nevan> so node.js will periodicaly check every db source i have , and send the update call it self
15:28 < NuZZ> if you make it
15:28 < syncan> i've been working on it for a couple decades, so it should come soon
15:28 < masch> Nevan: if you tell him to do so. Its a programming framework/runtime/something. Not your butler ;)
15:28 < NuZZ> you could use something like socket.io to send/recieve events though
15:29 < Nevan> oh, ok .... so i need to find that "butler" line in the mongodb example ;-)
15:29 < syncan> Nuzz: oh but alarm clock wise, SleepCycle have saved my life
15:30 < masch> Nevan: maybe you could give us the link to "the mongodb example" so we can understand what you are talking about
15:30 < NuZZ> googled it
15:30 < NuZZ> heh thats kinda cute
15:30 < NuZZ> it detects movement, hah
15:30 < syncan> hah
15:30 < NuZZ> hey, if you say it works
15:31 < syncan> it actually does a good job
15:33 < syncan> this was a bad time to install 'n'
15:33 < NuZZ> n?
15:33 < JoshLeaves> syncan: Pretty hard habit to change I know, but I've fallen victim to it too many times and lost girlfriends and jobs because of it =/
15:33 <@isaacbw> that ninja game?
15:34 < syncan> quick-switching between node vers.
15:34 < syncan> ninja sounds more fun
15:35 < syncan> Josh: Same here. :/
15:35 < NuZZ> I wonder what will end up being the best way to handle errors in node
15:35 < draginx> wwhats the difference between promise and promise b / d?
15:36 < syncan> Josh: should probably learn by now, huh?  
15:37 < JoshLeaves> syncan: Depends, how old are you? :D
15:38 < NuZZ> i mean, im just looking around for "how to error", seeing what people think is legit. comes down to "dont ever have uncaught exceptions", "you will have uncaught, capture em and restart worker" - the last being attatched to the new domain module in the official dox
15:40 < syncan> Josh: Heh, I'm 36 :)
15:41 < Nevan> ah crap, i did a mistake, i mixed node.js with meteor
15:41 < Nevan> :-(
15:41 < NuZZ> was going to suggest meteor
15:41 < NuZZ> makes sense
15:42 < syncan> Josh: it's not really mistakes, per se… i's my constant need for the flow .. autotelic 
15:42 < syncan> at least that's what I've credited it to
15:43 < JoshLeaves> I know that feel syncan
15:43 < Nevan> but metoer still does not support mysql as far i can see
15:44 < syncan> josh: I'm sure you do, since it sounds like you've been there
15:44 < NuZZ> methinks you could use like, the event emitting in meteor to hijack a database call and just throw it into mysql instead with a node mysql module. then reply to the web users with the updated value
15:45 < NuZZ> surely someone has done that
15:45 < Nevan> hmm
15:45 < Nevan> sounds possible
15:46 < syncan> josh: i was chatting with a guy who's been in games for a long while, not too long ago. he wrote a book called Theory of Fun. If you ever get a chance, you should read it.
15:46 < FellowMD> I've heard of that, and had it recommended before
15:46 < syncan> it's awesome. as well as Reality is Broken
15:47 < syncan> i think about my best moments coding, designing, anything .. it hits home
16:00 < gond> anyone using node-webkit here?
16:01 < unr3al011> what could slow down many http.requests in a loop?
16:01 < syncan> a million things? :/
16:01 < unflores> heh
16:02 < unr3al011> mhhh
16:02 < unflores> maybe you're being throttled?
16:02 < unr3al011> from?
16:02 < unflores> magic?
16:02 < unr3al011> maybe :D
16:02 < unflores> hey man, I'm just brainstorming here
16:03 < syncan> not sure how rhetorical the question is 
16:03 < syncan> and i have no context
16:03 < unr3al011> u can have :D mom
16:08 < mscdex> gond: yes
16:09 < syncan> unr3al: so you're just using node server?
16:09 < syncan> just a single process?
16:09 < syncan> 500 in the loop?
16:10 < unr3al011> yes
16:11 < syncan> well first it looks like you've maxed out your files
16:11 < syncan> 99999
16:11 < unr3al011> this limit is exceeded?
16:11 < syncan> yeah, you'll need to rethink your strategy
16:12 < syncan> what's it for?
16:12 < euoia> how does one check if something is a reserved word?
16:12 < syncan> you don't want to hammer all connections out on node
16:12 < context> you google 'javascript reserved words'
16:12 < unr3al011> i want to attach it to an database or queue server(activemq) and want to download websites
16:13 < euoia> context: I meant programmatically - is there not a function for it?
16:13 < syncan> you mean like a spider? 
16:13 < unr3al011> yes kind of that
16:13 < context> they are reserved. you cant just use a reserved word anywhere you want
16:13 < context> no. there is no way to go is_reserved(if)
16:14 < unr3al011> and i thought it would be a good idea to use atleast 80+% of my bandwith for downloading
16:14 < euoia> context: would probably be useful
16:14 < syncan> okay, so i haven't seen any code to it; but you're going to want to have some logic 
16:14 < unr3al011> code is in the link i posted
16:14 < syncan> multiple workers
16:15 < unr3al011> check the 1st grey box "node server.js" 
16:15 < syncan> so if you have 3 workers (which you could get rolling with unicorn on a heroku node, etc..) 
16:15 < syncan> you'll want to have them run right off the loop, and do their work
16:16 < syncan> preferably message another service off the nodes, even
16:16 < unr3al011> what do you mean with "run off the loop"?
16:18 < syncan> let me take a look at your code; again i'm going under the assumption you're just on a direct incoming i.o loop
16:18 < unr3al011> http://pastie.org/private/bgx7xc7qsxv0mohrczsm7q
16:18 < syncan> got it
16:19 < syncan> so yeah, from what i can see here; there's just a single loop, no constraints. that correct?
16:19 < unr3al011> yes
16:20 < syncan> your using the http service though
16:20 < unr3al011> sure
16:20 < unr3al011> how else should i fetch the site?
16:20 < syncan> ok
16:20 < syncan> just confirming
16:20 < syncan> :)
16:21 < unr3al011> are there faster alternatives? ah okay :D
16:21 < syncan> for sure
16:21 < unr3al011> for example?
16:22 < syncan> there's certainly a few ways to attack the strategy; but i'd start with thinking about discretely managing these workers (or "spiders")
16:22 < syncan> making sure you have full insight into their request and response times
16:22 < syncan> so that you can marshal them around properly
16:22 < unr3al011> okay so i need benchmarks?
16:22 < superjoe> it would be pretty cool to be able to apply a regexp to a stream
16:22 < syncan> without any idea of what kind of latency they are hitting themselves
16:23 < syncan> you're pretty much at everyone else's mercy
16:24 < syncan> from your logs, it sounds like you get a bunch of leaches though :)
16:24 < syncan> so yeah, benchmarks
16:24 < syncan> lots and lots of benchmarks and insight
16:24 < unr3al011> okay , i do benchmarks then and notice everything is pretty slow :D
16:25 < syncan> every worker that goes off should have a "mission plan" of sorts. and you can get those stats; perhaps he has a TTL acceptance threshold
16:25 < unr3al011> what ammount of workers you think would fit?
16:26 < unr3al011> and each worker runs a loop downloading websites? like my code?
16:26 < webdesserts> superjoe: I saw someone throw this in chat yesterday https://gist.github.com/deoxxa/5295806
16:26 < syncan> and again, if you could reposition your architecture a bit, that'd be better too, IMO. have your main thread cast off work to agents more discretely
16:26 < webdesserts> it splits a stream by it's lines, I'm sure it wouldn't be hard to adjust this to do a regex match
16:26 < webdesserts> and turn it into a module
16:27 < unr3al011> what do you mean?
16:27 < syncan> you running this from a self-hosted box?
16:27 < unr3al011> dedicated server
16:28 < syncan> so for amount of workers
16:28 < syncan> here's what i would do
16:28 < syncan> i would start super small
16:28 < syncan> just start with a few
16:28 < syncan> build some intelligence and reporting into a worker
16:29 < syncan> and your logic for messaging back status, benchmarking
16:29 < unr3al011> so my main js file is just handling / spawning workers and i build a cluster of them?
16:29 < syncan> once you have that set, then you'll have better metrics to work with on scaling up
16:29 < unr3al011> worker = module or worker in a cluster?
16:29 < superjoe> webdesserts, I think it would be pretty hard. Consider a large regex which cannot be completed until all of a large stream has been read in, but each match should be a stream
16:30 < syncan> in my mind, that's definitely the end-game
16:30 < superjoe> not a large regex, but rather a regex which matches a large string
16:30 < syncan> and i think that'd be the best way to architect it from the start
16:30 < syncan> it'll be easier to construct
16:30 < unr3al011> yes but what are these workers exactly?
16:31 < unr3al011> i read about workers in cluster applications
16:31 < unr3al011> master / slaves
16:31 < syncan> well, you only told me a little bit about your use case
16:31 < unr3al011> or do you mean a simple "module" as a worker?
16:31 < syncan> sorta spiders :)
16:31 < syncan> can you go into more detail?
16:31 < unr3al011> you talked about workers
16:32 < unr3al011> what, programmatically, is a worker in your opinion?
16:32 < syncan> worker/agents, yeah
16:32 < webdesserts> superjoe: ya, in that case it would be a different story, that link would probably only apply to regexing a few lines at a time
16:33 < unr3al011> you mean these workers? http://nodejs.org/api/cluster.html#cluster_class_worker
16:33 < syncan> it can be many things, but at the super base lever, it's an "Actor" that has some basic goal/intellegence; not AI, but it has a goal ("pull this page down", if that's what you're doing)
16:33 < syncan> as well as a method for communicating progress/status/metrics
16:34 < syncan> yes and no
16:34 < unr3al011> :D
16:34 < syncan> :)
16:34 < syncan> possibly yes :)
16:35 < syncan> but i'm 26 hrs in and i have a meeting soon
16:38 < webdesserts> superjoe: I would imagine the best way to approach that is to create a "backreference" of say... 50 lines, run the regex, remove a few bytes, read a few bytes and so on
16:39 < webdesserts> although if the document isn't extremely large, it would probably be more efficant to simply read the entire document and run the regex on it once
16:39 < webdesserts> efficient*
16:41 < superjoe> webdesserts, unfortunately, this use case is precisely the case where the document can and will be extremely large
16:42 < Scrat> will I run into a recursion limit if I setTimeout inside a setTimeout indefinitely?
16:42 < superjoe> Scrat, no
16:42 < superjoe> but you might consider using setInterval for that
16:43 < Scrat> superjoe: won't do, I'm doing async stuff and I don't want them to overlap
16:43 < Scrat> might use async.whilst() with a minimum delay
16:44 < superjoe> Scrat, that comment makes me think that your understanding of node.js's async/threading model is incorrect
16:44 < superjoe> perhaps a gist is in order?
16:44 < Scrat> superjoe: you'd be wrong
16:46 < Scrat> lets say you have setInterval databasestuff, 1000 and you dont want to be running databasestuff concurrently
16:46 < Scrat> if databasestuff takes more than 1000 ms then it will happen
16:46 < Scrat> that's what i meant
16:47 < superjoe> and how exactly does setTimeout help in that regard?
16:47 < Scrat> an easy fix would be to have dbStuffRunning = true in the beginning (and set it to false when it's done)
16:48 < Scrat> superjoe: you setTimeout when your dbstuff is done. you can naively set it to 1000, or 1000 - delta
16:49 < superjoe> ok. I'm going to stop now. this all sounds very suspicious, but it's impossible to give good advice without seeing some code
16:49 < Scrat> suspicious why?
16:50 < Scrat> I explained it in detail, please scroll up
16:50 < howdynihao_> and it doesnt make sense
16:50 < webdesserts> Scrat, why wouldnt' a callback work in this case? I'm not sure I quite understand.
16:51 < Scrat> webdesserts: because you'd hammer the database if you called it immediately
16:51 < webdesserts> Scrat, callbacks are anything but immediate
16:52 < howdynihao_> why is there a settimeout within a settimeout?
16:52 < webdesserts> or are you wanting to wait 1 second after databasestuffis "done"?
16:52 < strk> EISDIR, read <-- WTF could throw that ?
16:53 < Scrat> webdesserts: yes
16:53 < webdesserts> then why not set the callback to not be called until after a 1s timeout?
16:54 < tjfontaine> strk: an fs operation on soemthing you thought was a file but really is a directory
16:54 < Scrat> webdesserts: thats what I did?
16:55 < webdesserts> Ok, well the way you were describing it, it sounded like you were setting mutiple timeouts with different times hoping they won't overlap
16:56 < howdynihao_> i still dont get why theres a settimeout within a settimeout
16:56 < howdynihao_> just use setimmediate
16:57 < MI6> joyent/node: Timothy J Fontaine v0.10 * 9f65b1e : etw: update prototypes to match dtrace provider  The DTrace probes were u (+4 more commits) - http://git.io/p2-6AQ
16:57 < webdesserts> Scrat, It sounds like you're waiting for multiple "events" before you take an action
16:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:58 < webdesserts> in which case either a callback or an EventEmitter would seem to make sense
16:58 < Scrat> superjoe, webdesserts, howdynihao_: https://gist.github.com/anonymous/5303040
16:58 < Scrat> 1000 is arbitrary and not strict
16:59 < howdynihao_> scrat, why cant you just use setimmediate
16:59 < superjoe> Scrat, so your goal is to call slowDbFunction every 1000 ms?
17:00 < howdynihao_> why the heck does the first route call get a settimeout haha
17:00 < superjoe> Scrat, ok this code looks fine, no problems here
17:00 < superjoe> yeah except perhaps the first settimeout like howdynihao_  said
17:00 < Scrat> superjoe: no, to call slowdbfunction 1000 ms _after_ it finishes
17:01 < superjoe> Scrat, yes, I realized my poor wording right after I sent it
17:01 < Scrat> this is sort of a monitoring function
17:01 < Scrat> it's not a web request
17:02 < superjoe> Scrat, however, if the db call is really taking that much time, you may consider storing data in a more efficient manner for quicker access
17:02 < superjoe> since you're going to be calling it frequently
17:02 < Scrat> it was just an example
17:02 < superjoe> ok
17:02 < Scrat> my main question was Re: recursion limit
17:03 < webdesserts> Scrat, no there is no recursion limit.
17:04 < howdynihao_> webdesserts: there is
17:04 < webdesserts> howdynihao_: how so? and if so, what is it?
17:05 < superjoe> there is a recursion limit, but setTimeout is not using recursion.
17:05 < superjoe> it's queuing an event
17:06 < JoshLeaves> superjoe: Is there a difference betweent setTimeout and process.nextTick()?
17:07 < JoshLeaves> (Except for the "timeout" part)
17:07 < Scrat> superjoe: you're right, but I figured there could be some funny business with the closures
17:07 < Scrat> as in memory "leaking"
17:08 < syncan> setTimeout isn't guaranteed to me on the next frame i believe, right?
17:08 < webdesserts> superjoe: do y'all have any reference on this recursion limit?
17:08 < superjoe> JoshLeaves, http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback
17:10 < superjoe> webdesserts, sure: https://gist.github.com/superjoe30/5303128
17:11 < MI6> joyent/node: isaacs v0.10 * 4716dc6 : assert: Simplify AssertError creation - http://git.io/vaRRsg
17:12 < webdesserts> superjoe, you're right, I guess I've never had anything reach that without an exit before
17:12 < MI6> joyent/node: isaacs v0.10 * b319264 : test: fork-getconnections stricter, less chatty (+1 more commits) - http://git.io/CCXSVw
17:12 < syncan> implement a custom stack-based recursive flood fill  :)
17:13 < syncan> and keep making the image larger and larger until you hit it
17:13 < deoxxa> i prefer caramel fills myself
17:16 < Kakera> how do you guys feel about chaining methods?
17:17 < superjoe> Kakera, some people like it a lot, some people don't
17:17 < superjoe> I fall into the latter camp
17:17 < Kakera> me too
17:18 < syncan>  i think it can be very useful, but like most patterns, it's overused and often inappropriately used
17:18 < Kakera> I think it makes sense when either the object returned by the method is not equal to this (like with most jQuery methods), or that this has been modified (like with the rest of jQuery methods)
17:19 < JoshLeaves> Thanks superjoe =)
17:19 < syncan> i've used chaining when implementing a graph node, and some minor decorator stuff
17:19 < JoshLeaves> But then is there a method to add a call...to the end of the ticks?
17:20 < superjoe> JoshLeaves, yes
17:20 < superjoe> it seems to be missing from the docs
17:21 < MI6> joyent/node: isaacs v0.10 * d46ebff : npm: Upgrade to 1.2.17 - http://git.io/ToKTTQ
17:21 < superjoe> JoshLeaves,  look up setImmediate
17:21 < superjoe> only docs I can find are here: http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/
17:23 < MI6> joyent/node: isaacs v0.10 * 88686aa : http: Remove legacy ECONNRESET workaround code  Fix #5179 - http://git.io/OfccEw
17:23 < JoshLeaves> Thx superjoe
17:24 < syncan> that's a great update
17:24 < superjoe> no kidding
17:24 < superjoe> I'm in the middle of rewriting formidable to use the new streams
17:25 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:28 < shmoon> i am using nvm, but i have to source ~/.profile every day how do i get rid of this process?
17:28 < Kakera> why is your nickname red
17:29 < shmoon> what?
17:30 < alphaomega28> hello all
17:30 < alphaomega28> has anyone here ever used winston for logging?
17:30 < rossk> yes alphaomega28
17:30 < alphaomega28> sweet
17:30 < alphaomega28> i am trying to use logroate with it
17:30 < alphaomega28> that doesn't seem to play nice
17:31 < shmoon> creationix: there?
17:31 < alphaomega28> i was reading on line that sending a sighup to your node process
17:31 < alphaomega28> and capturing that to trigger a rotate would work
17:31 < rossk> got a gist?
17:32 < alphaomega28> i have been attempting to edit the transport but it drain event it is expecting to fire doesn't
17:32 < alphaomega28> and gets stuck in an infinite buffer mode
17:32 < alphaomega28> gist?
17:32 < rom1504> is there terminal recursion in js ?
17:32 < rossk> https://gist.github.com/
17:33 < alphaomega28> ah one sec
17:35 < MI6> joyent/node: isaacs created branch v0.10.3-release - http://git.io/ynNEdw
17:35 < alphaomega28> https://gist.github.com/anonymous/738c85d719543d749bd3
17:38 < rossk> alphaomega28, I believe winston has support for a maxsize for file logging
17:39 < alphaomega28> i was hoping to use logrotate though
17:39 < alphaomega28> for cleaner names and no overridiing
17:39 < alphaomega28> the drain on like 459
17:39 < alphaomega28> that never seems to be called
17:39 < alphaomega28> sorrt the flush on like 504
17:40 < alphaomega28> which leaves self.open is true
17:40 < alphaomega28> and causes everything to be buffered
17:40 < syncan> on the createOnFlush right?
17:40 < syncan> createAndFlush
17:41 < syncan> just looking at it, it smells funny there
17:41 < alphaomega28> lol
17:41 < alphaomega28> yes
17:41 < alphaomega28> it seems that this file thing needs some help :-/
17:41 < syncan> heh, yeah :)
17:41 < alphaomega28> one hack that i did get seem to make it work
17:42 < alphaomega28> was catching the hup
17:42 < alphaomega28> and setting a flag in the area that does the size check
17:42 < alphaomega28> to trigger a new file
17:42 < alphaomega28> but i am worried that might have some unexpected side effects if a rotate happens
17:42 < alphaomega28> which is why i figured it would be better to explicitly trigger a new file to be created
17:43 < alphaomega28> on line 459
17:43 < alphaomega28> that drain is never called
17:43 < alphaomega28> which intern doesn't file the flush
17:44 < syncan> what about the createAndFlush(0) on 526?
17:45 < alphaomega28> uhm i am not sure i made it into that section
17:45 < syncan> pushing through 0, but how's that going to be handled coming through; don't see a check; there's a reassign and then another create
17:45 < syncan> with size 0
17:46 < alphaomega28> that size thing i just some wacky internal counter i think
17:46 < alphaomega28> to trigger the sized based flip
17:46 < alphaomega28> i think what might be happening is rotate is based on a log request
17:46 < alphaomega28> which means the stream will always have crap in it
17:46 < alphaomega28> and as such the drain should always fire
17:47 < alphaomega28> in my case the hup is coming out of band and the stream is empty already
17:47 < syncan> i'm just looking though it, but it's already empty
17:47 < alphaomega28> and the drain has either already fired
17:47 < syncan> then a flash on the empty, for the once fired
17:47 < syncan> flush
17:47 < alphaomega28> but that flush comes from self.flush()
17:47 < alphaomega28> not the streams flush
17:48 < alphaomega28> 459
17:48 < alphaomega28> catches the drain
17:48 < alphaomega28> and emits a flush
17:48 < syncan> that comes back up on 504 like you mentioned
17:48 < alphaomega28> yea
17:49 < alphaomega28> you know
17:49 < alphaomega28> line 483
17:49 < alphaomega28> why is that not in the flush?
17:49 < syncan> that's my "at-a-glance" 
17:49 < alphaomega28> 483 - 485
17:49 < syncan> exactly
17:49 < syncan> that's what i meant by the check coming back through
17:49 < alphaomega28> ah
17:49 < cxreg> it would be nice if there was a version of assert.deepEqual that allowed non-existing object keys to equal undefined ones
17:49 < alphaomega28> i think that should be moved to line 453ish
17:50 < alphaomega28> flush the internal buffer
17:50 < syncan> yup
17:50 < alphaomega28> reset the buffer
17:50 < alphaomega28> clean it up and fire
17:50 < syncan> i think so too
17:50 < alphaomega28> okay, changing up the code, ill let you know shortly
17:50 < alphaomega28> thanks for the second set of eyes!
17:51 < syncan> no prob! that's what they're grown for
17:52 < alphaomega28> :-)
17:53 < thisissami> hey guys - i've got a quick question
17:53 < thisissami> i've been writing servers using nodejs for almost 2 years at this point, and i just ran into a bizarre bug on a server that's been running without issue for several months now
17:53 < thisissami> for some reason, i'm getting a whole bunch of requests that don't have any information stored in them - the domain name is undefined, hostname is undefined, etc. etc.
17:54 < thisissami> this wasn't an issue yesterday (i was working extensively with said server) but just started now for some odd reason
17:54 < syncan> did you update to newest stable?
17:54 < thisissami> has anybody seen this issue before?
17:54 < thisissami> no i'm still running on 8.14
17:54 < thisissami> i've been running on 8.14 since it's release
17:55 < thisissami> i'll give the newest stable a try - that's a good suggestion. though it is a little weird that this would start up out of the blue...
17:56 < syncan> running nginx or whatnot?
17:56 < syncan> something in between the requests
17:56 < thisissami> nope it's straight nodejs
17:56 < thisissami> i am using connect though
17:56 < thisissami> have been using connect for the entire time - haven't changed the version there for many months either
17:57 < thisissami> here's the output of console.log(request): http://pastebin.com/nFDjcvdL
17:58 < alphaomega28> by george i think that worked
17:58 < syncan> alpha: awesome!
17:58 < alphaomega28> let me repost
17:59 < alphaomega28> https://gist.github.com/anonymous/41fa2cb7067d227b218b
17:59 < alphaomega28> updated create and flush 486 - 520
17:59 < alphaomega28> and flush
18:00 < alphaomega28> 458 - 467
18:02 < syncan> looks much saner 
18:02 < syncan> :)
18:04 < syncan> hey thisissami: were you able to confirm contents outside of the log?
18:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:04 < thisissami> @syncan - what do you mean?
18:04 < alphaomega28> cool
18:05 < syncan> ie from the requester
18:05 < thisissami> i am the requester
18:05 < syncan> just a sanity check
18:05 < thisissami> this is a private server that only i (and 2 other people) have access to
18:05 < syncan> what's it look like from the other end?
18:06 < thisissami> and it's giving me issues with my own requests, so yes - definitely requests coming through
18:06 < syncan> is it on the page? i didn't see it
18:07 < thisissami> so when i make a request for particular pages, they seem to come through, with a couple random requests being ignored. but then when i try to connect my server to facebook through passport-js, i get nothing but these empty requests, followed by an internal server error on my front end
18:07 < syncan> i usually like to look at it from both sides; otherwise hard to say in this case :)
18:08 -!- mode/#Node.js [+o sblom] by ChanServ
18:08 < thisissami> the internal server error is because i assume that req.host.hostname exists, when it doesn't in this particular case
18:08 < syncan> ah ok
18:08 < thisissami> whoops other way around - req.hostname.host
18:08 < thisissami> no
18:08 < thisissami> req.headers.host
18:08 < thisissami> got it right that last time :P
18:08 < syncan> so there is an intermediate
18:09 < syncan> as far as "what's different"
18:09 < thisissami> the same exact function works fine on 2 other servers running the same code
18:10 < thisissami> but technically i guess you're right, though i get domain-less requests BEFORE doing that particular request
18:10 < syncan> through the passport-js or no?
18:10 < syncan> aye
18:10 < thisissami> what confuses me is why this would happen all of a sudden
18:10 < thisissami> my server logic hasn't changed in almost 4 months
18:10 < syncan> sounds like the weak link is in there, then; not server
18:11 < syncan> getting stripped
18:11 < thisissami> so how can a request come through and not have a host or ip address associated with it?
18:11 < thisissami> i'm currently installing 10.02 on the server
18:11 < thisissami> just to see if the issue persists on the latest stable
18:11 < syncan> make a backup haha
18:12 < syncan> i doubt that's the problem
18:12 < thisissami> and the passportJS logic takes place AFTER the issue that's taking place
18:12 < alphaomega28> seems to be working. i created my log rotate conf
18:12 < alphaomega28> and upped my logging to one per 100ms
18:12 < alphaomega28> and did a few calls to logrotate
18:12 < alphaomega28> worked like a charm
18:13 < thisissami> to be specific, i put in a new function that tests to see what the req is BEFORE anything else happens. pasportjs related things get called 3 or 4 functions later.
18:13 < syncan> alpha: sweet
18:14 < syncan> thisissami: so that's before anything else happens, you're saying?
18:14 < thisissami> except for any logic that connect has
18:15 < thisissami> essentially it's the first function running within the connect flow
18:15 < syncan> hmmm
18:15 < thisissami> 10.02 just finished installing - i will try restarting the server running on 10.02 and see if anything happens
18:16 < syncan> you have connect doing an authenticate?
18:16 < MI6> joyent/node: Fedor Indutny v0.10 * 55d058e : v8: cherry-pick 75311294 from upstream  Quote from commit message:      C - http://git.io/1MSUHg
18:16 < thisissami> nope
18:18 < syncan> is it hitting authenticate.js at all though?
18:18 < syncan> in passport?
18:20 < auser> hey all
18:21 < syncan> thisissami: it looks like passport will do some filtering
18:21 < syncan> regardless of your setup, and if you aren't doing an authenticate or redirect
18:21 < syncan> it's setting content-length to 0
18:22 < auser> curious thing happening with the node_redis npm… anytime the redis server cuts off a connection, it tries to reconnect and fails to do so (I'm assuming AUTH'ing has something to do with it), more sockets keep opening up and try to connect to the redis server until I have hundreds of sockets opened per the process
18:22 < syncan> check out actions in passport
18:22 < auser> curious if anyone has seen that before
18:23 < syncan> if you don't do anything, it decides you play with the response data on its own
18:23 < syncan> you=too
18:24 < syncan> one more typo try: you = too = to
18:24 < syncan> heh
18:24 < auser> details: using `kue`, redis with auth, up/cluster, all sharing similar redis connections (I also suspect that the redis connections sharing a file descriptor has something to do with it)
18:24 < auser> as in multiple processes sharing the same fd
18:26 < mutices> is there a "spidermonkey nodejs" implementation?
18:27 < deoxxa> mutices: no
18:27 < mutices> any particular reason?
18:27 < mutices> or is it because the internals are too dependent on v8
18:27 < deoxxa> well for the same reason there's no .net CLR version
18:28 < syncan> auser: that does sound familiar
18:28 < deoxxa> the internals are necessarily dependant on v8
18:28 < mutices> wait those are different issues
18:28 < syncan> auser: what version?
18:28 < mutices> if you could build v8 on clr
18:28 < auser> of node syncan ?
18:28 < mutices> then wouldnt you be able to build node as well?
18:28 < auser> 0.10.0
18:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:29 < syncan> how quickly is it reconnecting? and it's on the same port or?
18:29 < thisissami> syncan - thanks for that
18:29 < auser> in the meantime, I'm recycling the processes by sending a SIGKILL to the process (again, using `up`) when the redis connection closes, which "should" kill the fd
18:29 < auser> local or remote port syncan?
18:29 < syncan> thisissami: that work out at all?
18:29 < auser> and it's fast reconnection
18:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:29 < thisissami> it goes back to being confused as to why this is only just starting to happen, and why this hasn't been an issue for the past several months
18:29 < MI6> joyent/node: isaacs created tag v0.10.3 - http://git.io/31OTGQ
18:29 < auser> but it never actually reconnects, just fails a bunch until the process restarts syncan 
18:30 < thisissami> no i haven't looked into it - my code need to be changed a little bit before 10.2 works so i just switched back to 8.14 - gonna look into passport now and see what i can do
18:30 < syncan> auser: have a log?
18:30 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:30 < auser> sure syncan, but it's just filled with socket hang up
18:30 < auser> s
18:30 < syncan> thisissami: cool; good luck .. it sounds like that could be the issue
18:31 < thisissami> syncan: i will report back here either way :)
18:31 < windsurf_> how can I get the ip address of my computer on the LAN? 
18:31 < syncan> cool :)
18:31 < syncan> auser: if i can look at that, and even your handling code actually..
18:31 < syncan> for disconnects
18:32 < auser> I can't share with you the code (it's a client code)… I can share a snippet of the redis handling part
18:32 < auser> and the log
18:32 < windsurf_> nevermind, got it :)
18:32 < syncan> yeah, just a snip
18:32 < MI6> joyent/node: isaacs v0.10 * 0f460b0 : blog: Post about 0.10.3 (+3 more commits) - http://git.io/8GzW-Q
18:32 < syncan> whatever you can
18:32 < windsurf_> os.networkInterfaces
18:36 < owen1> i have a script that saves million of records to mongo. how to throttle it? there is no sleep method i believe
18:39 < syncan> owen1: do you sent a limit/page on them?
18:39 < auser> syncan, can I DM you with the link?
18:39 < owen1> syncan: is it a mongo feature?
18:40 < syncan> one sec owen
18:43 < thisissami> syncan: where did you see passport setting content-length to 0?
18:43 < thisissami> i can't find that anywhere within the module
18:44 < webdesserts> syncan needs backup! haha
18:45 < thisissami> :P 
18:57 < syncan> thisissami: in action.js i believe 
18:57 < syncan> i think
18:57 < syncan> handling authentication/redirects, or just passing the response through
18:57 < thisissami> hmm there's nothing in there in my version of passport. i'm also not using the latest version - i'm going through and updating all my various node modules
18:57 < thisissami> i have actions.js - it just doesn't do that
18:58 < syncan> which vers?
18:58 < thisissami> 0.1.12 is what i have
18:58 < thisissami> as opposed to 0.1.16 
18:58 < thisissami> similarly my connect is 2.3.1 instead of 2.7.something
18:59 < thisissami> those are the two modules that i think could be problematic here
19:01 < samholmes> I need to solve something to do with errors. When a module errors, and crashes my server, I catch it with uncaughtException event, but it doesn't tell me from where that module was called.
19:01 < samholmes> called meaning being used
19:02 < samholmes> How do I solve this problem?
19:02 < ljharb_> samholmes: what type of exception?
19:03 < samholmes> ljharb_: well, depends on the module. But lately it's been node-mysql giving me an error "Too many connections"
19:03 < syncan> thisissami: i think there's a fix for the problem you're having
19:03 < syncan> in the newer version
19:04 < ljharb_> samholmes: is it possible node-mysql is throwing a string, instead of a new Error object?
19:04 < syncan> * Pass without making a success or fail decision.
19:04 < syncan>  *
19:04 < syncan>  * Under most circumstances, Strategies should not need to call this function.
19:04 < syncan>  * It exists primarily to allow previous authentication state to be restored,
19:04 < syncan>  * for example from an HTTP session.
19:04 < syncan>  *
19:04 < alexvolk1> Good evening! I have a small question regarding converting unknown characters to UTF8 with iconv.
19:05 < samholmes> ljharb_: No. the module is throwing an error object with a stack track trace.
19:05 < syncan> actually, sorry that comment's in 0.12.0, but there's changes to how it passes on content
19:05 < samholmes> ljharb_: the issue is that the stack says nothing about where the module's methods were invoked in my code base
19:05 < alexvolk1> how to convert unknown characthers to utf8 with iconv ?
19:05 < syncan> there was some similar reports between 0.12.0 and 0.16.0
19:06 < ljharb_> samholmes: ah, there's really no way to do that since the error obj is created in an async callback
19:07 < samholmes> ljharb_: This is the problem with async, yes. But we must solve this problem. Large applications or network of apps will be increasingly difficult to fix if async callbacks don't have their lineage remembered.
19:07 < thisissami> syncan: hmm excuse my ignorance but how is that function altering the state of the request? i guess i need to understand the logic flow of passport far better in order to figure out what exactly is going on...
19:07 < samholmes> Is there anything I could do? :(
19:07 < ljharb_> samholmes: you could use promises instead of callbacks? :-po
19:07 < ljharb_> :-p
19:08 < samholmes> ljharb_: That wouldn't work though because I didn't write the module
19:08 < samholmes> the module would need to implement promises
19:08 < samholmes> no?
19:08 < ljharb_> samholmes: try passing promise.resolve in as your callback
19:08 < samholmes> ljharb_: not sure what promise.resolve does
19:08 < samholmes> isn't it just a callback?
19:09 < samholmes> I still don't see how that would work. The callback isn't called.
19:09 < ljharb_> it's a callback that resolves the promise
19:09 < unr3al011> syncan: u there?
19:09 < samholmes> The error happens within the module, not the callback
19:09 < ljharb_> samholmes: ah, right, i see
19:09 < samholmes> yeah
19:09 < ljharb_> the module should be calling your callback with the error instead of throwing it.
19:09 < samholmes> I have two types of errors. "Critical" and well, non-critical.
19:10 < samholmes> the critical ones I get emails of. They crash the app
19:10 < samholmes> it's usually a syntax error or something I can fix on my part. But sometimes it could be me misusing the module.
19:10 < samholmes> But the module would just choke, instead of tell me the error.
19:11 < samholmes> It would seem, sense async is very difficult to debug, that it should be mandated (by suggestion) that all modules should handle error reporting.,
19:11 < ljharb_> it is indeed a convention that async methods should call callbacks with errors instead of throwing.
19:12 < deoxxa> throwing errors in async methods isn't nice
19:13 < unr3al011> why do i get "unhandled error event" on http request when i have request.on('error', function (err) handler?
19:14 < deoxxa> unr3al011: perhaps the error doesn't come from the request, but rather the response or the server
19:14 < deoxxa> (assuming you're talking about an http.ServerRequest or http.IncomingMessage from an http.Server)
19:14 < unr3al011> Error: getaddrinfo ENOTFOUND
19:14 < unr3al011>     at errnoException (dns.js:37:11) is the error
19:14 < unr3al011> no
19:15 < unr3al011> http request(client=
19:15 < unr3al011> )
19:18 < unr3al011> fixed it
19:18 < unr3al011> was a client error
19:18 < unr3al011> i added error handler on callback but not on client
19:25 < thisissami_> hey all - anybody ever dealt with this error: throw errnoException(process._errno, 'uv_signal_start');
19:25 < thisissami_> i just upgraded to 10.x and can't find any info about what's going on online
19:25 < unr3al011> is there any way to measure latency on a http.request?
19:26 < thisissami_> nvm figured it out
19:26 < thisissami_> nodejs didn't like that i was watching for SIGKILL signals anymore
19:36 < thisissami_> syncan: updating everything took care of my issue
19:37 < thisissami_> i updated connect, passport, nodejs, and some other things too and now it's all working with no issue
19:37 < thisissami_> at some point in the future i'll have to take a deeper look into this to make sure nothing will scrow up when that'll cause a much bigger issue, but for now - whatever the bug was isn't happening anymore
19:38 < pachet> whatever you do, dont scrow it up
19:42 < windsurf_> anyone had luck getting the serialport module working on raspberry pi?
19:46 < syncan> thisissami: great!
19:47 < syncan> thisisammi: glad the reset fixed it, i blame passport, but maybe the world will never know
19:48 < AviMarcus> Hello all. I wrote a really clean, modular app in node.js. Incoming requests come in via one of several endpoints, it goes through a central library, and then that endpoint return the data. In testing, though, I see it hiccupps every so often, seemingly during garbage collection - with --trace-gc during some Mark-sweeps my testing script sees a 150-500ms delay in responses. I have ~2gb of ram to spare and this happens when node is onl
19:48 < AviMarcus> y using 100mb... is there anything I can do? I tried setting --max-new-space-size and --max-old-space-size but they didnt' seem to help...
19:51 < euoia> windsurf_: I used an adafruit breakout cable
19:51 < windsurf_> euoia: cool. i'll look that up
19:51 < euoia> windsurf_: http://www.adafruit.com/products/914
19:57 < windsurf_> euoia: for that do you need a breadboard? I want to tether my Pi to my full ardunio not just the atmega328
19:57 < pachet> breadboard, adafruit
19:57 < pachet> ... :
19:58 < pachet> hunger strikes from the shadows
19:58 < euoia> windsurf_: Well it plugs into a breadboard - I'm not sure how you would tether to an arduino... I have seen it done though
19:59 < windsurf_> k
20:08 < sastrone> Maybe this is more of a javascript question, but in the node console: "{1; 2; 3; 4}" returns 4, but when I try to capture it: "var x = {1; 2; 3; 4}" it errors 
20:09 < sastrone> is there a way to get the desired value?
20:12 < deoxxa> sastrone: what's the desired value?
20:13 < sastrone> I would like to get the last computed value in a sequence of computations 
20:13 < saebekassebil> sastrone: When using {} in a definition statement "var x = ..." tries to interpret the curly braces as an object literal
20:13 < saebekassebil> You should use parenthesis for that
20:13 < deoxxa> sastrone: you're combining a few different confusions
20:13 < saebekassebil> var x = (1, 2, 3, 4)
20:14 < saebekassebil> Or well, you shouldn't but you can.
20:14 < deoxxa> sastrone: the node repl doesn't just print out the value of whatever you type in - it prints out the return value of the last evaluated statement
20:14 < xk_id> ^
20:14 < sastrone> deoxxa: damn, I was hoping that wasn't it 
20:14 < sastrone> is there any way of doing this without throwing it all in an array?
20:15 < xk_id> can you not compute the last value directly?
20:15 < sastrone> (throwing it all in an array and taking the last element)
20:15 < sastrone> xk_id: not really.  I'm making a lisp->javascript compiler, and am trying to emulate "begin"
20:16 < sastrone> I mean, I could tweak my compiler to allow for oddly shaped rules, but I'd rather not :P
20:17 < saebekassebil> sastrone: What specifically are you trying to acheive?
20:18 < sastrone> saebekassebil: I'm looking for a single expression that computes a variable amount of expressions and has the return type of the last one 
20:18 < sastrone> but the amount of expressions is known at compile-time 
20:18 < sastrone> but all the expressions are treated exactly the same (no "just return the last one")
20:18 < ricket|work> why not use the (1, 2, 3, 4) syntax then?
20:19 < ricket|work> (foo(), bar()) will execute foo and bar and then return the value returned by bar
20:19 < deoxxa> yeah
20:19 < deoxxa> that seems like the winner here
20:19 < sastrone> oh, I didn't see that, that's just what I was looking for!
20:19 < deoxxa> \o/
20:19 < saebekassebil> great :)
20:19 < sastrone> thanks everyone!
20:19 < deoxxa> another happy customer
20:19 < sastrone> haha
20:19 < ricket|work> make sure to think of error handling, of course
20:20 < sastrone> ricket|work: anything special that is outside the obvious that I'd have to deal with in this kind of expression?
20:21 < saebekassebil> Every "element" in the list (which it is not), is evaluated as an expression. That is, no statements!
20:22 < saebekassebil> (statement1, statement2, ...)
20:22 < sastrone> ok, that should be fine, everything in my language has to boil down to an expression anyway 
20:23 < AAA_awright> >> console.log( (1;2;3;4) )
20:23 < purr> AAA_awright: SyntaxError: Unexpected token ;
20:23 < AAA_awright> >> console.log( (1, 2, 3, 4) )
20:23 < purr> AAA_awright: undefined; Console: 4
20:23 < deoxxa> >> (1,2,3,4)
20:23 < purr> deoxxa: (number) 4
20:23 < deoxxa> \o/
20:23 < AAA_awright> >> ( void 1 && void 2 && void 3 && 4 )
20:23 < purr> AAA_awright: undefined
20:23 < AAA_awright> hmm
20:23 < AAA_awright> Oh
20:23 < ricket|work> >> (x=1, 2, 3, 4); x;
20:23 < purr> ricket|work: (number) 1
20:23 < AAA_awright> >> ( void 1 || void 2 || void 3 || 4 )
20:24 < purr> AAA_awright: (number) 4
20:24 < AAA_awright> derp
20:24 < AAA_awright> sastrone: That would also work
20:24 < deoxxa> (void 1, void 2, void 3, 4)
20:24 < deoxxa> \o/
20:24 < AAA_awright> >> ( void 1 || void 2 || void 3 || 0 )
20:24 < purr> AAA_awright: (number) 0
20:24 < ljharb_> ugh, the comma operator, and using booleans for flow control.
20:24 < sastrone> huh, that's an interesting way of doing it 
20:24 < sastrone> I think that the (1,3,4,5) is cleaner right?
20:25 < saebekassebil> yea, why whould you void already ignored expression-results?
20:25 < ljharb_> sastrone: why do you think you need the comma operator?
20:25 < AAA_awright> sastrone: Yeah, but it could be confused for a function argument list
20:25 < AAA_awright> But yeah
20:26 < sastrone> ljharb: It isn't that I "need the comma operator", but that I need to get the last computed value in a predefined list, so it seems to work the best 
20:26 < sastrone> could I do it with semicolons?
20:26 < sastrone> >> (1;2;3;4)
20:26 < purr> sastrone: SyntaxError: Unexpected token ;
20:26 < sastrone> nope, apparently not 
20:26 < ljharb_> sastrone: why wouldn't you just have an array, and do arr[arr.length - 1] ?
20:27 < vertago1> Is it just me or is pcap broken for node 0.10.3?
20:27 < ljharb_> >> var arr = [1, 2, 3, 4]; arr[arr.length - 1] @sastrone 
20:27 < purr> sastrone: (number) 4
20:27 < AAA_awright> >> [1, 2, 3, 4][4-1]
20:27 < purr> AAA_awright: (number) 4
20:27 < AAA_awright> Same thing
20:27 < ljharb_> not the same thing
20:27 < ljharb_> using an array means you have all the values
20:28 < ljharb_> using the comma operator means you're executing useless code
20:28 < sastrone> ljharb_: a few reasons.  1. It doesn't make sense to store everything if I only need the last one.  2. I don't have a scope to compute arr and then ask for it's last value
20:28 < saebekassebil> ljharb_: He's writing a Lisp -> JavaScript transpiler. Therefore it makes sense. It's not an array of values, it's an array of expressions
20:28 < ljharb_> sastrone: then why return anything but the last value in your computation?
20:28 < AAA_awright> If you're declaring the Array then you have to evaluate the expressions to create it
20:28 < AAA_awright> It's not useless code, it's executing code whose return value doesn't matter
20:29 < ricket|work> >> (x=0, x++, x++, x)
20:29 < sastrone> ljharb_: I need the initial expressions to be evaluated for side effects.  The last one is the return value
20:29 < purr> ricket|work: (number) 2
20:29 < ljharb_> sastrone: if the expressions are hardcoded values, just omit them. if they're actual statements, then put them in composed functions
20:29 < AAA_awright> ljharb_: That completely defeats the point of what we're doing
20:29 < ljharb_> lol ok
20:29 < sastrone> ljharb_: the initial expressions aren't values, they are going to be calls to functions 
20:30 < webdesserts> lijharb_: obviously you have a vendetta against commas
20:30 < ljharb_> just against bad code. a transpiler doesn't excuse you from producing good JS.
20:30 < AAA_awright> >> /* but will nonetheless happily use */ var x=1, y=2, z=3, o=4;
20:30 < purr> AAA_awright: undefined
20:30 < AAA_awright> >> var a, b, c, d; a=1, b=2, c=3, d=4;
20:30 < purr> AAA_awright: (number) 4
20:31 < saebekassebil> ljharb_: The comma operator isn't much used, but does that mean that it's bad?
20:31 < AAA_awright> Ta-da
20:31 < sastrone> ljharb: assuming you know lisp, how would you translate the expression (begin (print "hello world") (+ 1 2))
20:31 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:31 < webdesserts> "bad code" is relative to opinion
20:32 < sastrone> because translating it to (print("hello world"), 1+2) looks like a pretty good option
20:32 < AAA_awright> That's certainly prettier than
20:32 < AAA_awright> >> (function(){ console.log("hello world"); return 1+2; })()
20:32 < purr> AAA_awright: (number) 3; Console: 'hello world'
20:33 < AAA_awright> Is it not?
20:33 < sastrone> that's my thought at least 
20:33 < AAA_awright> >> Object.keys(console)
20:33 < purr> AAA_awright: (object) ['log', 'time', 'timeEnd']
20:34 < AAA_awright> >> console.time()
20:34 < purr> AAA_awright: undefined
20:34 < AAA_awright> >> console.time(); console.timeEnd()
20:34 < purr> AAA_awright: undefined; Console: 'default: 0ms'
20:37 < superjoe> is it possible to use pipe and also know the progress?
20:37 < superjoe> e.g. how can I pipe and also count how many bytes are transferred?
20:37 < AAA_awright> superjoe: Attach your own data event
20:38 < AAA_awright> In addition to the pipe
20:38 < superjoe> AAA_awright, so the 'data' event works with streams2?
20:38 < AAA_awright> Um
20:38 < superjoe> I thought data triggered legacy streams
20:38 < superjoe> http://nodejs.org/api/stream.html#stream_event_data
20:38 < AAA_awright> There's some way to do it
20:38 < AAA_awright> I still haven't moved to readable streams
20:38 < AAA_awright> Instead of event streams
20:38 < AAA_awright> All it really does is move an internal buffer from the application into Node.js
20:39 < AAA_awright> So it's nice but it doesn't really accomplish anything new
20:39 < syncan> I can't believe I made it to meeting time. I shall sleep some day. Seeyas
20:39 < superjoe> AAA_awright, you could say the same thing about node.js itself
20:43 < AAA_awright> superjoe: What do you mean?
20:44 < superjoe> node.js is nice, but doesn't really accomplish anything new
20:44 < superjoe> I guess I'm just saying don't underestimate "nice" :)
20:44 < webdesserts> AAA_awright: Technically you could accomplish everything you want with Assembly
20:44 < webdesserts> but that would suck
20:45 < AAA_awright> webdesserts: No, Node.js doesn't have that functionality
20:45 <@Nexxy> has anyone used node-firmata w/ i2c?
20:45 < superjoe> but seriously, I can't figure out how to monitor progress on pipe :(
20:45 < AAA_awright> I'm talking about my application, using Node.js
20:47 < samholmes> Does transloadit open source a lot of the technology behind their service?
20:47 < superjoe> https://github.com/joyent/node/issues/5212
20:47 < samholmes> Could I set up my own transloadit servers?
20:48 < superjoe> samholmes, maybe you want something like this: https://github.com/superjoe30/mediablast
20:49 < samholmes> superjoe: I don't understand this.
20:49 < samholmes> I'm looking for a way to store images on a server and request resized/cropped versions of that image
20:50 < webdesserts> samholes, http://aheckmann.github.com/gm/
20:51 < samholmes> webdesserts: I'm using gm atm
20:52 < samholmes> webdesserts: My code is in the app though. I want to maybe build a image server that is separate from the app.
20:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:52 < samholmes> I was just wondering if transloadit service has open sourced their code so I can just set it up on my own systems and get the same benefits. If not, I'll just build my own service and open source it.
20:53 < samholmes> I'm looking for a simple dynamic image processing and storage server/db.
20:53 < webdesserts> ahh, sorry, I'm not sure about that.
20:53 < samholmes> Okay.
20:54 < webdesserts> https://github.com/transloadit
20:54 < webdesserts> there's their github if you haven't found it already
20:55 < samholmes> I was thinking of making a very straight forward system that works like this: 1. You send a file to the server. 2. It stores it and returns a unique resource ID (hash). 3. You can store this resource ID in what ever database system your app is configured to use. 4. your app can request that image in different dimensions (resized/cropped)
20:56 < samholmes> the system will cache the versions
20:56 < Venom_X> samholmes: kinda like imgix.com?
21:07 < Raynos> `var isHTTPs = ("authorized" in req)
21:07 < Raynos> is that a correct thing I can do?
21:15 < superjoe> if you don't reference an outer variable in a nested function, that variable is excluded from the closure, correct?
21:16 < FellowMD> superjoe: correct
21:16 < superjoe> thansk
21:19 < pachet> Raynos: var isHTTPS = typeof request.connection.encrypted !== 'undefined'
21:19 <@isaacbw> superjoe: why would you need to answer that question, if you don't mind me asking?
21:19 < Raynos> Why is that better?
21:19 < owen1> i have a node script that stop running after a few minutes. when it dies i want to rerun it with an argument that it outputed to stdout. i was thinking of using child_process.spawn. is it a good approach?
21:19 < Raynos> oh wait
21:20 < Raynos> req is not a socket >_<
21:20 < superjoe> isaacbw, making sure I'm not accidentally keeping around a reference to an object which might be associated with a lot of memory
21:21 <@isaacbw> ah okay, that makes sense. I was trying to think of some crazy scenario where you would want to access a variable without having a reference to it
21:21 < superjoe> haha
21:21 < deoxxa> isaacbw: that's easy! make it global!
21:21  * deoxxa watches everyone cringe
21:21 < pachet> make them all global
21:22 < superjoe> global.global = global
21:22 < deoxxa> scoping is hard
21:22 < deoxxa> let's just use globals
21:22 < yawnt> tuna too
21:22 < pachet> may the best reference win
21:22 < yawnt> when it's not fresh
21:22 < yawnt> it's hard
21:22 < pachet> s/best/last
21:22 < yawnt> : (
21:22 < deoxxa> lol
21:23 < pachet> owen1: sure
21:25 <@isaacbw> depending on how many times it's going to happen
21:25 <@isaacbw> or do you mean to have a simple container program do the spawning
21:25 <@isaacbw> doing it recursively could be bad if you did it enough times
21:26 <@isaacbw> don't listen to me, I'm crazy
21:26 <@isaacbw> avert your eyes
21:26 < owen1> pachet: isaacbw : thanks guys
21:27 < owen1> the contained app is doing console.log(x,y). i am not sure how to detect that it's not running anymore. maybe setInterval and see if the process is still running?
21:27 < owen1> i am suppose to call it again with x,y as arguments
21:28 < pachet> child = process.spawn(whatever); child.on('close', function(){ //it's closed })
21:28 < owen1> yeah. i hope that the close event will be called.
21:28 < pachet> so i guess if x,y is going to the child's stdout you'd just take the last newline-delimited bit from that
21:33 < owen1> pachet: yeah. i'll try that. thanks!
21:35 < unsafe> so when I set username/password on $.ajax, it's filling the data into the url auth (http://username:password@host/path...)
21:35 < unsafe> so I'm trying to support that along with the authorization header -- my server's built on express -- and I cant seem to find the creds from the url anywhere in the req object
21:35 < unsafe> anybody know where I can find that?
21:36 <@isaacbw> http://en.wikipedia.org/wiki/Basic_access_authentication
21:37 < fabio1> hello, im just installed chris lea package from ppa, its 0.10.x
21:37 < fabio1> but no node-waf command
21:38 < youjelly> hi, http://pastebin.com/PCYDrXLg
21:38 < fabio1> I read in github is only necesary the nodejs package to get nodejs-dev 
21:38 < fabio1> but im not sure..
21:38 < youjelly> I'm trying to implement tail like functionality per client using socket.io 
21:38 < unsafe> isaacbw: what should I be looking for in there?
21:38 < fabio1> no node-waf in source install neither
21:39 < fabio1> any way to get node-waf in ubuntu?
21:39 < youjelly> what I've done so far is that I'm subscribing to a custom socket event on each client connection, the event name is governed by specifying the filename in the querystring
21:39 <@isaacbw> unsafe: https://github.com/senchalabs/connect/blob/master/lib/middleware/basicAuth.js
21:40 < youjelly> can anyone guide me how I should proceed ahead with this
21:40 < youjelly> I'm new to nodejs
21:40 < unsafe> isaacbw: yeah, I was just looking at that -- it only pulls from the authorization header, which isnt getting filled for me
21:40 < unsafe> let me double check that, 1 sec
21:40 <@isaacbw> oh, reallu
21:40 <@isaacbw> *y
21:41 < AviMarcus> Has anyone else had V8 stall their node process for 200-500ms for GC cleanup? I have 2gb of ram node can chew, but as low as 100mb of usage it's introducing delays...
21:41 < unsafe> yeah
21:41 < youjelly> http://pastebin.com/PCYDrXLg my code so far
21:41 <@isaacbw> unsafe: then something is wrong with how it's getting sent
21:41 <@isaacbw> which browser are you using?
21:41 < AviMarcus> ooh isaacbw is here. He knows stuff :P
21:41 <@isaacbw> nope, I know nothing
21:42 <@isaacbw> isaac/s knows things
21:42 < unsafe> hmm. I'm on chrome, the server's running localhost on port 8005
21:42 < unsafe> curl "http://root:password@localhost:8005/people" -H "Pragma: no-cache" -H "Accept-Encoding: gzip,deflate,sdch" -H "Host: localhost:8005" -H "Accept-Language: en-US,en;q=0.8" -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/27.0.1443.2 Safari/537.35" -H "Accept: */*" -H "Referer: http://localhost:8005/people" -H "X-Requested-With: XMLHttpRequest" -H "Cookie: connect.sid=s%3A
21:42 < chilts> AviMarcus: see point #2 here : http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/
21:42 < unsafe> that's the "copy as curl"
21:42 < chilts> that's probably the same issue you're seeing
21:42 < AviMarcus> oh :(
21:42 < AviMarcus> thanks chilts I'll take a look
21:42 <@isaacbw> unsafe: did you run that curl command?
21:43 < youjelly> hey AviMarcus 
21:43 < unsafe> I'm trying that now
21:43 < unsafe> and yeah, it works there
21:43 < AviMarcus> hi youjelly. your nick looks slightly familiar.
21:43 < unsafe> I wonder if this is a CORS thing
21:43 < youjelly> lol, just trying to learn nodejs :)
21:44 < AviMarcus> just --nouse-idle-notification ? I thought I tried that. let me try again..
21:44 < unsafe> isaacbw: ok, well it's a browser issue anyway, so thanks
21:45 <@isaacbw> unsafe: no problem. The http://user:pass@foo.bar syntax is just fluff
21:45 <@isaacbw> a CORS issue sounds more than possible
21:45 < unsafe> yeah
21:45 < trippeh> AviMarcus: node 0.10 is supposed to be a little better on GC.
21:45 < AviMarcus> I think it turned off idle-notifications by default..
21:46 <@isaacbw> firefox seems to be more lax about cors, so maybe try it there to see if it's an issue with your code or with chrome
21:49 < TechnoCat> you can run chrome with --disable-web-security to disable CORS for testing purposes
21:50 < cxreg> how do I convert a Buffer to a uri-encoded string?
21:50 < ningu> encodeURI?
21:50 < ningu> encodeURI(buf.toString())
21:51 < ningu> eet's just javascript
21:52 < cxreg> that's giving me the wrong output
21:52 < ningu> is your buffer encoding set correctly?
21:52 < cxreg> > encodeURI(new Buffer([0xFF, 0xF8]))
21:52 < cxreg> '%EF%BF%BD%EF%BF%BD'
21:52 < cxreg> i want to see "%FF%F8", for example
21:53 < ningu> >> encodeURI(new Buffer([0xFF, 0xF8], 'binary'))
21:53 < purr> ningu: ReferenceError: Buffer is not defined
21:53 < ningu> blah
21:53 < AviMarcus> chilts, didn't particularly help, I still get e.g.: 118053 ms: Mark-sweep 49.9 (100.0) -> 31.7 (87.0) MB, 15 ms (+ 152 ms in 615 steps since start of marking, biggest step 0.668945 ms) [StackGuard GC request] [GC in old space requested].
21:53 < AviMarcus> which actually I don't know what that +152ms means
21:53 < cxreg> buffers dont have encoding, afaik
21:54 < AviMarcus> but I got several 200-400ms delayed responses
21:54 < ningu> I thought chilts was on a plane
21:57 < chilts> ningu: almost, going to the airport in a few hours :)
21:57 < chilts> AviMarcus: ah ok, that's not good :/
21:57 < ningu> cxreg: anyway new Buffer([...]).toString('hex') will give you the hex string and then you can do .toUpperCase() and add the % I suppose :P
21:58 < AviMarcus> chilts, I saw other flags for --max-new-space-size=1024 and max-old-space-size=1024 but those similarly didn't seem to have an effect. Any other ideas? Or did I somehow create my vars/objects poorly?
21:58 < AviMarcus> basically a request comes in and 2ms later it's "done"
22:04 < cxreg> ningu: lol
22:04 < pachet> AviMarcus: is this running locally
22:05 < AviMarcus> pachet, I'm testing it locally on my machine now but similar delays of some kind were noticed in production. Why? my desktop is an i7
22:06 < pachet> just means less factors to troubleshoot
22:07 < pachet> and you've confirmed this is due to GC?
22:07 < pachet> (i havent been following closely)
22:09 < AviMarcus> hah. sec.
22:11 < AviMarcus> pachet, doh! I was benchmarking from another node script and THAT one was doing GC too!
22:11 < pachet> ruh roh
22:12 < AviMarcus> OK so maybe --nouse-idle-notification is good enough
22:13 < AviMarcus> yep, every long delay is from an idle notification...
22:13 < AviMarcus> geez.
22:14 < AviMarcus> pachet, thanks :)
22:15 < bnoordhuis> AviMarcus: what node version?
22:16 < bnoordhuis> --nouse-idle-notification is a no-op in v0.10
22:16 < AviMarcus> v0.8.6
22:16 < AviMarcus> no-op means default?
22:16 < ningu> no-op means it does nothing
22:17 < pachet> saved by the bell....kinda?
22:18 < pachet> i dont know your use case, but --expose-gc and gc() smartly to keep from ooming if needed :[
22:18 < pachet> here be dragons etc
22:18 < AviMarcus> ah well it's the default in v0.10
22:20 < AviMarcus> pachet, the incremental GC seems decent..
22:21 < AviMarcus> yeah, I'll watch it. when it goes off-peak the GC might catch up.
22:21 < ningu> now if only we could get more efficient GC in real life
22:21 < AviMarcus> or we'll kill it every night at 3am.
22:21 < AviMarcus> :)
22:21 < pachet> ningu: lol
22:22 < ningu> automatically recognizing recycling vs. compost etc.
22:22 < pachet> finding that <valuable object> you didnt mean to throw away
22:22 < ningu> yeah, why can't I grep my garbage dammit
22:22 <@isaacbw> take a lesson from hoarders and don't throw anything away
22:22 <@isaacbw> you can never lose things!
22:23 < ningu> but then you oom
22:23 <@isaacbw> buy a bigger house
22:23 < TheJH> is it normal that node has like 30MB resident size although it basically just has one http connection open, nothing else going on?
22:23 < ningu> isaacbw: most houses are still only 32bit
22:23 <@isaacbw> damn lazy contractors
22:24 < faceleg|bah> if only one could use git in real life
22:25 < faceleg|bah> then i'd NEVER have to throw anything out
22:25 < pachet> version control your children
22:25 < faceleg|bah> after an especially bad tantrum
22:25 <@isaacbw> I get into weird thought spirals where I think I can revert my life
22:25 < faceleg|bah> git reset --hard HEAD~2
22:25 <@isaacbw> and I can't
22:25 < faceleg|bah> I used to convince myself that I didn't need sleep
22:25 <@isaacbw> "now would be a great time to fork"
22:25 < faceleg|bah> but that was on mushrooms and over a decade ago
22:25 < faceleg|bah> and I was wrong
22:26 < pachet> should've done acid
22:26 < thealphanerd> Nexxy: are you in the bay area this weekend?
22:26 < pachet> you wouldn't have needed convincing
22:26 < faceleg|bah> just before a big trip that could result in melt downs
22:26 <@isaacbw> dugs are a hell of a drug
22:26 < faceleg|bah> git commit -m 'About to travel 12 hours on a plane'
22:26 <@isaacbw> *drugs
22:26 < faceleg|bah> I liked dugs
22:26 < pachet> yeah i was wondering what the hell dugs could be
22:26 < pachet> and why i havent abused them
22:27 <@isaacbw> hah
22:27 < faceleg|work> ningu: my house is 8 bit, first homes are like that
22:27 < samholmes> is imgix on node?
22:27 < thomasreggi> Anyone know how to <%= %> in ejs without html encoding?
22:27 <@isaacbw> move to new york where you can't find an apartment bigger than 7 bit. Where the fuck did they get 7 bit from
22:28 < faceleg|work> mushrooms
22:28 < faceleg|work> thomasreggi: &lt;...
22:28 < pachet> faceleg|work: i dont mow my lawn, i blit a fresh one from the backbuffer
22:28 < faceleg|work> pachet: I haven't mown my lawn in months
22:28 < faceleg|work> as I was reminded by wife recently
22:29 < faceleg|work> "I thought you wanted our daughter to experience nature"
22:29 < pachet> no comeback
22:29 < thomasreggi> faceleg|work: for example var x = 'value="hello"'; with <%= %> will output value=&quot;hello&quot;
22:29 < ningu> I think the 8th bit was used for something else wasn't it? but I can't remember what...
22:30 < ningu> thomasreggi: hrm... it isn't in the docs? there must be a way to do it. have you tried <% %> without the =?
22:30 < ningu> I know it's possible
22:30 < faceleg|work> thomasreggi: I BELIEVE
22:30 < faceleg|work> pachet: wife doesn't need a comeback
22:30 < faceleg|work> just a flat stare
22:31 < faceleg|work> OBEY, her body language screams. And I obey.
22:33 < youjelly> http://pastebin.com/B41w86Z3
22:33 < youjelly> ok I'm ALMOST there just need some help now
22:33 < youjelly> I'm trying to implement tail like functionality using node and web sockets
22:33 < youjelly> I specify the filename through the querystring filename=somefilename
22:34 < youjelly> I'm able to track if the file gets changed/modified
22:34 < youjelly> I just need the actual contents of the file
22:34 < thomasreggi> ningu: yeah, nothing is outputted =[
22:34 < pachet> outpat
22:34 < youjelly> if anyone can help with that?
22:34 <@isaacbw> did you ask nicely?
22:35 <@isaacbw> I keep cat treats around. They usually do the job
22:35 < ningu> thomasreggi: oh, right, cause that's just code to execute... hrm
22:35 < thomasreggi> ningu: got it it's <%- %>
22:36 < thomasreggi> ningu: thanks
22:36 < ningu> aha
22:36 < ningu> cool
22:36 < thomasreggi> faceleg|work: thanks
22:36 < youjelly> '-'
22:36 < ningu> youjelly: just use fs.read
22:37 < ningu> fs.read(filename, function (err, contents) { ... });
22:37 < howdynihao_> use createreadstream
22:37 < ningu> oh
22:37 < ningu> yeah, good point
22:37 < ningu> ignore what I said :)
22:37 < youjelly> I need to display only the portion that is changed
22:37 < ningu> oh
22:37 < ningu> well you can filter the stream
22:37 < youjelly> like in tail -f
22:37 < TheJH> I'll reword my question from earlier: What is a normal resident size of a mostly idle node program?
22:37 < ningu> actually no, that seems pointless
22:37 < howdynihao_> no its fine
22:38 < TheJH> I think that 30MB for one HTTP connection is way too much
22:38 < howdynihao_> you create 1 read stream, cache the last 5 lines or so always
22:38 < ningu> howdynihao_: but how do you know how big the file is? oh... hmm
22:38 < howdynihao_> each time a new websocket connects, attach a listener on that stream
22:38 < howdynihao_> so they get the new data
22:38 < howdynihao_> also throw out the last 5 lines that you are caching since that mimics tail
22:39 < ningu> yeah, that makes sense I suppose, but would the stream be constantly emitting or what? I don't get that part
22:39 < howdynihao_> yes
22:39 < youjelly> http://pastebin.com/B41w86Z3 can you have a look at that
22:39 < howdynihao_> though, you could just cache the last position - 5 and always open a new stream to that file
22:39 < howdynihao_> but that seems expensive
22:40 < youjelly> I have the fs.watch function called right after I'm serving the http request
22:40 < howdynihao_> youjelly: i think the way you're thinking is more expensive to do it that way
22:41 < youjelly> its my 2nd day at nodejs
22:41 < youjelly> lol
22:41 < howdynihao_> its only my first hour!
22:41 < howdynihao_> no im jk :P
22:41 < willwh> howdynihao_: not possible :)
22:41 < willwh> was going to say - you've been in this channel a suspiciously long time to say that :P
22:42 < youjelly> I was thinking too, I shouldn't open a fs for each connection
22:42 < youjelly> but what could be the optimum alternate
22:42 < ningu> I think howdynihao_'s stream idea is a good one
22:42 < ningu> but how will it handle cases where a socket connects and nothing has changed? 
22:43 < youjelly> I'm calling fs.watch and then on the change event I will read from file and emit on the socket/room
22:43 < howdynihao_> it throws out the cached last 5 lines
22:43 < howdynihao_> and will sit there till new data comes in
22:43 < ningu> howdynihao_: right but how does it know there's anything to read?
22:43 < howdynihao_> like tail -f
22:43 < ningu> because you call read() on it?
22:43 < howdynihao_> ningu: because of the event listener
22:43 < youjelly> can I advance the file pointer and read ahead of the last position
22:43 < youjelly> and emit that
22:44 < ningu> I've never written my own stream so I shouldn't talk about this :)
22:44 < youjelly> I'm getting the file change events each time I echo something to the file
22:44 < ningu> what I meant was, how will the file stream that you've wrapped (or whatever) know that a socket has connected and wants to read from it?
22:44 < howdynihao_> youjelly: the fs.watch is pointless
22:44 < ningu> what would that code look like to be sure to always output the last 5 lines?
22:45 < howdynihao_> ningu: on websocket connection, attach a listener to the stream, on disconnect, remove it (mem leak) and thats it
22:45 < youjelly> howdynihao_, why? I'm using that to see if the file gets updated
22:45 < ningu> also won't fs.createReadStream stop when it reaches the current end of file?
22:46 < ningu> howdynihao_: right but how will the stream know to emit? or is there some sort of infinite loop of setImmediate?
22:46 < howdynihao_> ningu, theres an option to keep it open
22:46 < ningu> ah ok
22:46 < ningu> fs.createReadStream(filename, { autoClose: false });
22:47 < ningu> but it still emits 'end' so you know when it's at its current end
22:47 < ningu> that's pretty cool actually
22:47 < youjelly> what lol
22:47 < youjelly> :|
22:47 < ningu> youjelly: just a set I'll code up an example
22:47 < ningu> without the sockets
22:47 < ningu> sec8
22:48 < ningu> and I'll probably screw it up but that's ok
22:48 < youjelly> without the sockets ??
22:48 < ningu> yes, just to demonstrate the stream part
22:49 < howdynihao_> ningu: no. you know whats cool?
22:49 < youjelly> ok and then I'll just call that function on socket connect event?
22:49 < howdynihao_> ningu: that @_ or @____ are valid twitter handles
22:49 < ningu> hehe
22:50 < howdynihao_> i did not know that
22:50 < ningu> @_ should be a perl coder
22:51 < youjelly> howdynihao_, and I don't need to use rooms I guess, if I'm writing directly on the socket, write?
22:51 < youjelly> right*
22:52 < howdynihao_> thats whatever you want to do, thats just up to you
22:53 < youjelly> I was using rooms cuz I was getting file updates on the http connection handler and not the socket handler
22:53 < youjelly> io.sockets.in(filename).emit(filename, 'file changed')
22:53 < ningu> howdynihao_: autoClose: false doesn't keep it open it seems
22:53 < ningu> it keeps the fd open but not the stream
22:55 < howdynihao_> oh
22:55 < howdynihao_> WELL THEN NEVER MIND
22:55 < ningu> youjelly: https://github.com/forward/node-tail
22:56 < youjelly> ningu, thanks, I'll use that
22:56 < Leeol2> If you had to choose a protocol to upload largeish(<50mb) files to a remote server from a nodejs webapp, what would you use? (eg: a Node ftp implementation, http upload, etc)
22:57 < AviMarcus> youjelly, why are you watching a file at all? aren't you getting event socket?
22:57 < AviMarcus> Leeol2, rsync!
22:57 < AviMarcus> (over ssh)
22:58 < howdynihao_> ningu: were you using old streams or new streams?
22:58 < Leeol2> AviMarcus: Hmm, not sure if that is available on all platforms, what would your 2nd pick be?
22:58 < AviMarcus> there's also an rsync daemon with  an access list so you won't need SSH actually...
22:58 < AviMarcus> afaik rsync is available on nearly everything, you just need to configure it.
22:58 < ningu> howdynihao_: old streams, because I was using the byline module and that uses old streams, but let me try it without it
22:58 < AviMarcus> well, not windows maybe.
22:58 < ningu> cygwin!
22:59 < AviMarcus> yeah but wouldn't ship with rsync
22:59 < mscdex> sftp!
22:59 < mscdex> :-D
22:59 < AviMarcus> if I launch a nodejs script with --nouse-idle-notification so it will spawn children with that too?
23:00 < ningu> howdynihao_: same for new streams
23:00 < AviMarcus> erm I mean fork
23:00 < howdynihao_> ningu: it shouldn't be
23:00 < Leeol2> AviMarcus: Do most distributed hosts expose common linux programs like that? (nodejitsu, heroku, etc)
23:00 < AviMarcus> oh. No. :(
23:01 < Leeol2> I mean, i know they have them, they have to haha. I just assume some/most/all don't expose certain linux tools
23:01 < timw255> I'm looking for a way to, nicely, report back that bad JSON was submitted in a request body. I'm using express and the bodyParser; it keeps bombing out with "Unexpected token..." and a 500 response. Can anyone shed some light on it?
23:01 < mscdex> Leeol2: you can do sftp in javascript
23:02 < tjholowaychuk> timw255: http://expressjs.com/guide.html#error-handling
23:02 < mscdex> if you need/want to do it programmatically
23:02 < ningu> howdynihao_: that doesn't seem to be how it works
23:03 < Leeol2> mscdex: Know of any good libraries for this?
23:03 < mscdex> Leeol2: 'ssh2' on npm :-)
23:03 < Leeol2> Ajaxorg has one, but it looks like they haven't touched it in close to a year. xD https://github.com/ajaxorg/node-sftp
23:03 < Leeol2> mscdex: I'll give it a go, ty :)
23:04 < Leeol2> mscdex: github.com/mscdex/ssh2 you sneaky devil you 
23:04 < Leeol2> ;)
23:04 < timw255> tjholowaychuk: yeah, I ran across that a couple of times but I'm a little confused by it. It shows the error handling stuff at the bottom of the app.use stuff...by the time the error gets handled, won't my code have already had a fit?
23:04 < mscdex> :-D
23:04 < tjholowaychuk> timw255 nope it gets passed down
23:05 < tjholowaychuk> timw255 node doesn't really let you use the typical error propagation you're used to
23:05 < mscdex> Leeol2: i'm working on adding a fast disk->network upload method at the moment
23:05 < timw255> hmm...
23:05 < ningu> tjholowaychuk: btw I've been throwing exceptions in my express apps in certain places rather than next(err) because next wasn't available... it seems to work ok though
23:05 < AviMarcus> yes, looks like it, forks inherit the node args
23:06 < tjholowaychuk> ningu only if it's catchable
23:06 < Leeol2> mscdex: I just noticed that the ftp lib i was looking at is also yours, xD
23:06 < ningu> well it's being caught
23:06 < ningu> I'm just doing throw 'blah';
23:06 < mscdex> Leeol2: i'm a protocol nerd, what can i say
23:08 < timw255> tjholowaychuk: Thanks for the info. I guess I should have tried it before well...not. :D
23:10 < youjelly> thanks guys, that worked
23:10 < ningu> cool
23:11 < youjelly> I'm getting the value twice on the client side though
23:11 < youjelly> every time I append to the file 
23:13 < ningu> youjelly: you should figure out if the 'line' event is being emitted multiple times or if the bug is in your socket code
23:14 < youjelly> lemme pastebin it
23:14 < AviMarcus> thanks for the help with noidle. 'night
23:16 < youjelly> http://pastebin.com/RLPVpuDH
23:17 < youjelly> ningu, its actually the tail module code, cuz I'm writing to console as well and it prints twice each time I concatenate
23:19 < ningu> hmm strange
23:20 < zivester> for making a client connection from my app, to a websocket... should I be using socket.io or something lighter?
23:21 < ningu> zivester: you can use sockjs (with or without shoe) if you want something lighter
23:22 < tracker1> zivester, socket.io has a lot of fallback mechanisms worked out for you.. like supporting IE5+ etc...
23:22 < tracker1> zivester, there are alternatives... but you will limit yourself to certain browsers...
23:23 < ningu> youjelly: the node-tail code is very short, I would just try to debug it
23:24 < youjelly> I was getting 2 events even when I was using fs.watch
23:24 < zivester> tracker1, this is for a *client* not a server
23:24 < ningu> zivester: that's exactly the point he was addressing
23:25 < youjelly> ningu, just curious, can this be done on named pipes instead of files
23:25 < ningu> don't know
23:26 < tracker1> zivester, exactly... the client browser needs to connect to the server... websockets is supported by like 50-60% of the browsers on most sites... leaving 4050% unsupported... socket.io as a framework has other connection mechanisms
23:26 < tracker1> 40-50
23:26 < tracker1> not to mention hosting, reverse proxy/load balancer support..
23:27 < zivester> ningu, tracker1 ... my apologies... I'm not explaining this right.. I'm connecting from a node.js server to a websocket (some external websocket)... there is no browser at all in this situation
23:27 < tracker1> zivester, gotcha...
23:27 < tracker1> in that case, why not raw sockets?
23:27 < tracker1> tcp listener service..
23:28 < ningu> you could use one of the *mqs ;)
23:28 < tracker1> ningu, that too...
23:28 < zivester> tracker1, I pretty much picked up websockets this past week.. and just started using socket.io.. then realized socket.io-client is overkill on my server
23:28 < tracker1> zivester, ningu .. like http://learnboost.github.com/kue/
23:29 < tracker1> zivester, nod...
23:29 < zivester> do raw sockets have all the events and listeners and whatnot?
23:29  * zivester looks for documentation
23:29 < ningu> zivester: should be very similar, yes
23:29 < tracker1> zivester, depends on how much data you need to transmit...
23:29 < tracker1> and should be a bit lighter than websockets.. you could use json or msgpack as a message format.
23:30 < ningu> zivester: you can also use dnode to manage control flow
23:30 < zivester> i literally just need to connect, and consume... very minimal back and forth... not sure what that kue thing is, if its related
23:31 < ningu> zivester: well I would just use a plain old socket possibly wrapped in dnode or similar to make rpc easy
23:31 < tracker1> ningu, yeah.. dnode is probably his best bet, depending on what he's trying to do.
23:32 < ningu> there is also emit-stream also from substack land
23:32 < tracker1> zivester ... https://github.com/substack/dnode
23:32 < ningu> emit-stream and dnode seem to be different sides of the same coin in a way
23:33 < ningu> well they solve different problems but within the same domain
23:33 < ningu> zivester: this is assuming you control both sides of the socket connection
23:33 < zivester> thank you both.. ill check out dnode... i like a little bit higher level than raw sockets.. so this may work
23:33 < zivester> ningu, i do not... lol
23:33 < ningu> oh
23:33 < ningu> well then why is socket vs. websocket even an alternative?
23:33 < zivester> glad you said something :)
23:35 < ningu> if you are trying to connect to something that already specifies how you have to connect then you have to do it that way... unless I'm missing something
23:35 < ningu> tracker1: btw what is your experience with msgpack? I just discovered it yesterday. smaller in size but the serialize/deserialize speed in node is slower than json by an order of magnitude it seems
23:36 < zivester> ningu, so you're saying that socket.io-client and sockjs-client are could not work to connect to the same stream?  I assumed it was the same format?
23:36 <@isaacbw> hey mscdex, did you work out all the problems that 0.10 created for your imap driver?
23:36 < tracker1> ningu, really?  haven't tried it in node.. used it for a message router a few years ago in .Net land... today, would probably favor json/bson depending on constraints.
23:37 <@isaacbw> I saw the bit about crypto that needed a quickfix :P
23:37 < ningu> zivester: no. there are implementations in different languages but each has their own format
23:38 < ningu> protocol, not format
23:38 < ningu> tracker1: so there is a bson serialization format? I just know mongo uses it... seems like json with a somewhat richer type system
23:39 < tracker1> ningu, exactly... mongo uses bson.. but no reason you couldn't use it for your own communications channel.
23:39 < ChrisPartridge> ningu: i thought msgpack was faster than json, to pack/unpack?
23:39 < mscdex> isaacbw: i don't think there were any issues i had to fix crypto-wise?
23:39 < tracker1> ChrisPartridge, depends on the language/implementation...
23:39 <@isaacbw> no no, I just think I saw another issue you said you had to fix introduced by 0.10
23:39 < ningu> ChrisPartridge: maybe in theory but in practice v8's json impl is faster than the node modules
23:39 < tracker1> ChrisPartridge, since node is JS, I could see it being slower.
23:40 <@isaacbw> I was being a bit of a github stalker
23:40 < zivester> ok ill just poke around.. there seem to be a ton... ws, websocket-client, sockjs-client, socket.io-client... ill try to pick the lightest
23:40 < tracker1> zivester, is the server using socket-io?
23:40 < ChrisPartridge> tracker1: yeah, but using a native binding it should be pretty quick
23:40 < ningu> ChrisPartridge: https://gist.github.com/nathanaschbacher/2946474
23:40 < zivester> tracker1, how can i tell?
23:41 < ningu> zivester: right but why is it even a choice if you don't control the server?
23:41 < tracker1> zivester, is there another client example for the server you're trying to connect to?
23:41 < zivester> i'm having issues with socket.io.. is kind of why i started on this whole path... 0.9.11 is not very consistent with its failures/disconnects
23:42 < zivester> https://en.bitcoin.it/wiki/MtGox/API/Streaming
23:42 < zivester> maybe that'll make it easier...
23:42 < zivester> i have it working with socket.io, a couple clients use websocket-client
23:43 < ningu> zivester: you can probably use sockjs too, if you limit it to using websockets only
23:43 < syncan> what kind of issues?
23:43 < brutalhonesty> Hoping someone can tell me why my global scoped object is undefined: http://jsfiddle.net/NKceB/
23:43 < tracker1> zivester, have you looked at... https://github.com/programmarchy/node-mtgox-websocket-client
23:44 < samholmes> Is akamai the best bet for CDN?
23:44 < syncan> nay. just hit the Wiki
23:45 < syncan> Akamai has been the most consistently consistent in my experience with them, versus the competitors
23:45 < zivester> syncan, connect_failed not being thrown, or reconnect_failed not being thrown after max reconnects are exhausted
23:45 < ningu> brutalhonesty: there are no global scoped objects in that code
23:45 < brutalhonesty> ningu: sorry, local scope to the function, but still cannot populate it
23:45 < syncan> Generally good, and have been always transparent during availability issues
23:45 < ningu> brutalhonesty: which variable?
23:46 < syncan> and good on their SLA 
23:46 < brutalhonesty> ninguL train_samples
23:46 < ningu> "consistently consistent" I like that
23:46 < brutalhonesty> ningu: train_samples
23:46 < tracker1> samholmes, depends on what your needs are.. akamai is basically a global high end provider... it's the "best" but for a price...
23:46 < ningu> brutalhonesty: you are using async callbacks wrong
23:47 < syncan> syncan: do you just get a dead line?
23:47 < syncan> hey i'm talking to myself
23:47 < brutalhonesty> ningu: what can i do to fix it?
23:47 < ningu> async methods pass their return values in the callback, not via return;
23:47 < syncan> zivester, i mean
23:47 < samholmes> tracker1: I'm not high-end yet. So in the meantime what would be good to start with?
23:47 < samholmes> Is a CDN just a caching service?
23:47 < ningu> you need to do train_samples['pos'].push(...) from inside the callback, since that's when the data is available
23:47 < ningu> and getTrainedSamples will have to take a callback argument to be called when both db queries are done
23:48 < tracker1> samholmes, images/video?  user content?
23:48 < ningu> you will probably want to use the async module and do the queries in async.parallel(...)
23:48 < brutalhonesty> ningu: ah ok, thanks so much
23:48 < ningu> brutalhonesty: also why use two connections?
23:48 < ningu> I would get a connection once, then do the async.parallel(...) on the two queries
23:49 < tracker1> samholmes, pretty much.. usually you setup your real host  image-source.yourdomain.net  and you have the CDN use image.yourdomain.net which requests from images-source
23:49 < brutalhonesty> ningu: I was trying to get a parallel system going using the pooled connections via the README file
23:49 < brutalhonesty> but i can try it out your way, thanks
23:49 < ningu> brutalhonesty: hmmm
23:49 < samholmes> tracker1: you pick a domain and change the IP pointer in the DNS
23:49 < tracker1> samholmes, I know a few people like http://www.maxcdn.com/ ... amazon offers cloudfront, and there is google's offering.
23:50 < ningu> brutalhonesty: what are you using for the database?
23:50 < brutalhonesty> mysq
23:50 < brutalhonesty> l
23:50 < ningu> brutalhonesty: I use any-db and it manages the pool automatically
23:50 < ningu> so you just have one connection object for the whole app
23:50 < ningu> but it transparently connects to the pool
23:50 < brutalhonesty> yeah, so far
23:50 < ningu> any-db works with mysql just fine
23:51 < brutalhonesty> hehe, first time using node today so i appreciate the gentle replies
23:51 < ChrisPartridge> ningu: interesting, suprisingly msgpack3 is slower yet
23:51 < ningu> ChrisPartridge: really? huh
23:51 < tracker1> brutalhonesty, you may want to look into node-async... https://github.com/caolan/async
23:51 < ningu> ChrisPartridge: I haven't seriously looked at competing msgpack implementations in node but it seems like something that should be fixed
23:51 < brutalhonesty> tracker1: will do, thanks
23:51 < MI6> joyent/node: Paddy Byers master * d8852aa : build: depend on v8 postmortem-metadata if enabled - http://git.io/zwmkZw
23:51 < ningu> fixed as in: someone should write a module with proper native bindings
23:52 < ChrisPartridge> ningu: yeah i just added the "msgpack" and "msgpack3" to the benchmark
23:52 < ningu> someone not being me however since I don't need it badly enough
23:52 < ningu> but I assume there are perfectly adequate/fast implementations in C
23:53 < ningu> making good use of the msgpack typeset might be a bit of a challenge
23:53 < howdynihao_> THere is a module for that
23:53 < howdynihao_> its written by this guy named ningu
23:54 < ningu> howdynihao_: when I need this for my job it shall be written :)
23:54 < ningu> right now I'm just using gzipped json
23:55 <@Nexxy> thealphanerd, nope! :(
23:57 < thealphanerd> Nexxy: to bad… I'm performing / showing some art this weekend
23:57 < thealphanerd> https://ccrma.stanford.edu/events/modulations/
23:57 <@Nexxy> bah!
23:57 < thealphanerd> indeed
23:58 < syncan> hey zivester, can you send your link again .. sorry
23:59 < thealphanerd> I gotta run
--- Log closed Thu Apr 04 00:00:16 2013
