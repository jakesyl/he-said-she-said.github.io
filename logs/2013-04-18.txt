--- Log opened Thu Apr 18 00:00:42 2013
00:06 < GaryOak_> Has anyone had much experience using the cluster or the child process modules, or know of any good examples?
00:07 < tmpvar> GaryOak_: there are some pretty decent examples in the docs..
00:08 < GaryOak_> I guess there are, RTFM right...
00:08 < mscdex> RyanNielson: well no, you can still separate the twitter stream broadcasting like i suggested, you just have to keep the 'connection' listener if you need access to individual sockets for example
00:09 < mscdex> d'oh
00:12 < ImpGuard> .
00:12 < ImpGuard> .
00:12 < mscdex> ..
00:13 < George_> .
00:13 < George_> .
00:19 < George_> VERSION
00:20 < George_> VERSION irc.freenode.net
00:21 < George_> .
00:21 <@isaacbw> George_: what are you doing?
00:22 < George_> .
00:23 -!- mode/#Node.js [+o isaacbw] by ChanServ
00:30 <@isaacbw> ping?
00:30 < AAA_awright> Sometimes I report a bug and it's like maintainers hate me for the most inexplicable reasons
00:30 < fomatin> hey, is there a recommended way for zero downtime deployments?
00:30 < AAA_awright> "DAMNIT why'd you send me that pull request, how dare you fix my library"
00:30 < fomatin> for what it's worth, i'm using express+cluster
00:31 < ryanaz> is there a module that uploads directly into amazon S3 ? 
00:32 < ryanaz> The way it's working right now it stores into /tmp first then uploads it…   for files that are larger than a few MB this is a problem.
00:32 < fomatin> you could just use filerpicker.io
00:32 < superjoe> ryanaz, https://github.com/superjoe30/node-multiparty
00:33 < ryanaz> formation, superjoe: thank you
00:33 < ryanaz> formatin: thank you
00:33 < superjoe> ryanaz, there's an example in the examples/ folder there of streaming to s3
00:45 < zivester> if I'm saving thousands of documents to a mongodb... using mongoose.. is it best to save them in parallel, or in series?
00:47 <@isaacbw> if you mean open up thousands of connections to mongo at once from your application, that's probably not a great idea
00:48 < fomatin> zivester: how/when are you saving them?
00:48 < fomatin> like POST req w/ data -> save
00:48 < zivester> fomatin, in a background job most likely
00:48 < fomatin> or just like a cron job that keeps incrementing some value
00:49 < Bergle_2> might someone explain to me what side effects doing     "_ = new require('lodash')"  notice the extra 'new' in there - the 'new' appeases webstorm for code completion and warnings ... but i dont quite understand what side effects it may have.
00:50 <@isaacbw> does lodash export a contructor function?
00:50 < zivester> not sure whether to use async each, eachSeries, or eachLimit.. for the fastest possible saves
00:50 < gnarf> don't think so, it exports _
00:50 < fomatin> zivester: what are you updating them with
00:51 < fomatin> you could just use the update command w/ multi: true option
00:51 < zivester> fomatin, I'm creating new documents
00:51 < Bergle_2> lodash is an eample - add new to any require() fixes it for webstorm warnings...  but im curious what its doing
00:51 < fomatin> zivester: http://mongoosejs.com/docs/api.html#model_Model.update
00:51 < fomatin> oh you're creating new ones?
00:51 < zivester> yes
00:51 <@isaacbw> does any of that actually work?
00:51 < fomatin> let's go private and tell me a few more details. k?
00:51 <@isaacbw> require is in node core, so webstorm wouldn't know how to handle it
00:51 <@isaacbw> don't just do stuff to try to fix a syntax highlighter
00:52 <@isaacbw> if you don't know what 'new' does, this explains it pretty well: http://trephine.org/t/index.php?title=Understanding_the_JavaScript_new_keyword
00:53 < mscdex> var new = require('new');
00:53 <@isaacbw> bastard
00:53 < mscdex> :-D
00:54 <@isaacbw> there's actually a package called 'new'
00:55 < superjoe> var new = require('new'); new = new new; 
00:55 < superjoe> 10 internet points to anyone who can say what that does
00:56 < ChrisPartridge> superjoe: the internet points aren't worth it
00:56 < gnarf> Bergle_2: the "new" keyword shouldn't just be thrown about anywhere... It does a specific thing, it executes the function, within the context of a newly created object with a __proto equal to the functions prototype
00:57 < superjoe> ChrisPartridge, what if I told you it would increase the size of your e-peen?
00:57 < gnarf> Bergle_2: don't do that... underscore itself is a function, but "new _(whatever).uniq()" does something different than _.uniq() for instance
00:59 < ChrisPartridge> superjoe: i'm listening..
00:59 < ChrisPartridge> :p
01:00 < MI6> joyent/libuv: Bert Belder v0.10 * a396388 : windows: remove superfluous assert statement - http://git.io/RY1fzQ
01:03 < MI6> joyent/libuv: Bert Belder master * 79f9629 : Merge branch 'v0.10' (+3 more commits) - http://git.io/QNSmnw
01:04 < MI6> joyent/libuv: piscisaureus created branch reviewme - http://git.io/C3Rljg
01:04 < Bergle_2> gnarf i am askgn cause i do have somewhat understanding what new does - and wanted to know what my risk was gogin to be, btw the code does seem to run and using the new htat way fixes the webstorm autocompletion and warnign stuff 
01:04 < gnarf> Bergle_2: so, "new require()" might protect against it
01:05 < gnarf> but like
01:05 < gnarf> it's not needed
01:05 < gnarf> screw web storm
01:05 < gnarf> it's going to confuse everyone who looks at it later
01:05 < gnarf> it's not like its new (require())
01:05 < gnarf> which is completely different
01:06 < gnarf> tell them to fix their stuff to work with bare require
01:06 < Bergle_2> and thats why im not just doing it, im trying to understand what its doing, id like to understand why it lets webstorm recognise the var and know methods are availabgle as well...
01:06 < Bergle_2> im not suggesting anwyay does it, and i have a query in with where i read about it - but it does one useful thing :) 
01:06 < gnarf> Bergle_2: who knows, $20 says you only find like two people who use editors with autocomplete/method completion in this channel
01:07 < gnarf> and you're one of em
01:07 < gnarf> does it pass jshint ?
01:07 < gnarf> if it passes jshint, i could care less ;)
01:07 < gnarf> that's my rule
01:08 < gnarf> units + jshint, if it works, it works, move on
01:09 < gnarf> new require( 'anything' ) probably isn't dangerous, since require() will return the module.exports anyway
01:09 < gnarf> but the "new" is just wasted
01:09 < Bergle_2> jshint doesnt squeal aobut it
01:09 < Bergle_2> oh hangon. yes it does lol
01:10 < Bergle_2> not use to getting earlyer lines later in the report hehe
01:10 < gnarf> IMHO - jshint suggestions > webstorm completions
01:10 < gnarf> but
01:10 < gnarf> just my $0.02
01:10 < Bergle_2> thats a fair point.
01:10 < gnarf> do what you like
01:11 < Bergle_2> i just wanted to understand whats going on in node.js from doing that.
01:11 < gnarf> nothing different than any other funciton
01:11 < gnarf> it's basically require.call( Object.create(require), 'lodash' )
01:12 < gnarf> with the implicit return this;
01:12 < larzconwell> Has anyone noticed Node or NPM creating a directory ~/tmp?
01:12 < gnarf> larzconwell: nope, but maybe one of the packages you're installing is
01:13 < larzconwell> gnarf: I don't have any modules installed currently.
01:13  * gnarf shrugs
01:14 < master5o1|work> .markov say
01:14 < Bunge_> in it, now i can erase the old site is likely to be expected :)
01:14 < gnarf> larzconwell: echo $TMPDIR ?
01:15 < gnarf> plane landing, gotta jet
01:16 < Bergle_2> thanks for your input ;) i have learned more again.
01:16 < gnarf> though it should have been Object.create(require.prototype)
01:16 < gnarf> i apologize ;)
01:16 < larzconwell> gnarf: Nothing, but there is a "tmp" config option for NPM. https://github.com/isaacs/npm/issues/2936
01:18 < larzconwell> gnarf: Oh yeah that's what you were already saying about TMPDIR env var. For some reason it's still going to ~/tmp even though I don't have it set.
01:23 <@isaacbw> something's been making a tmp directory in my home but I never cared enough to figure out what
01:24 < larzconwell> Same here, had the free time so I figure I'd check it out.
01:24 < larzconwell> isaacbw: Do you have TMPDIR set?
01:24 <@isaacbw> ah, it was set to my home dir
01:24 <@isaacbw> interesting
01:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:29 < boutell> Hi. I have a question about pipes. I understand I can detect an error with .on('error'). If I am detecting errors on my write stream, is that good enough - does a read error trigger a write error too - or should I monitor both the read stream and the write stream for errors? 
01:30 < boutell> also, I assume I need to call out.end() on a write error if I'm giving up on the stream. But will that trigger an 'end' event? If so I need to set a flag to track that I did this in response to an error so I don't call my completion callback in my 'end' handler.
01:32 < gluxon> calling .end should emit an 'end' event last time I checked.
01:32 < gluxon> boutell: Are these standard core streams?
01:34 < samholmes> parris?
01:35 < boutell> gluxon: the output stream is. The input stream is an s3 http stream from knox, which I believe is a standard http stream that some work has already been done with.
01:35 < boutell> this is what I just wrote. How much of this is unnecessary I wonder:
01:35 < wookiehangover> boutell: as long as you're using the latest knox you should be fine
01:35 < wookiehangover> (with them being standard streams, I mean)
01:36 < gluxon> boutell: If you're piping them to each other, they should handle each other's errors, no?
01:36 < boutell> https://gist.github.com/boutell/5409228
01:36 < samholmes> Does node-mysql convert Date objects into date mysql values?
01:36 < boutell> in that gist I check for errors in either stream, watch out for having already closed stuff due to an error on the other stream, and take care not to double-invoke my callbacks generally
01:36 < samholmes> sql values*
01:36 < boutell> it seems like it's all probably necessary
01:38 < boutell> does a stream error also trigger end and/or clean up the stream in whatever way is necessary?
01:38 < boutell> if so I'm doing that twice, if not I'm doing something necessary
01:39 < gluxon> boutell: It looks like you're just closing the stream and terminating the program an error.
01:39 < gluxon> If that is the behavior you want, you don't have to handle the errors.
01:39 < gluxon> That will automatically be done.
01:40 < boutell> gluxon: no, I'm invoking a callback. I'm writing a function which copies a file out of s3 and into the local fs, in its entirety, and invokes a callback with an error if any.
01:41 < boutell> I need to know when it ends, whether it ends well or badly, make sure that the one stream doesn't hang around after the other has an error, etc. Or maybe I'm not responsible for the latter, but I sure can't tell from the docs (:
01:43 < gluxon> Gotcha.
01:44 < gluxon> boutell: Then I'll tell you this. If you want to catch errors for both file system and s3, go ahead and do it. But if it were me, I would not bother catching fs errors since it is very rare. I'd rather let it crash the program with a stack trace.
01:46 < boutell> there is that, although out of disk space is not wildly unusual
01:47 < boutell> but will there actually be any crash and stack trace?
01:47 < boutell> is that what pipe() does if an error occurs and is not caught?
01:48 <@isaacbw> it *should* be unusual to run out of disk space
01:50 < gluxon> boutell: pipe doesn't do anything special with errors.
01:50 < boutell> gluxon: so I'm just going to have half a file and not know it and fail later and wonder why (:
01:50 < boutell> anyway, this is an npm module, so I'd rather report errors faithfully and not be halfassed
01:50 < gluxon> Right.
01:50 < gluxon> boutell: You'll have the log of the Node application right?
01:51 < gluxon> Not catching errors will have it display in the console.
01:52 < boutell> nah, I'm saying that if I write a module that takes a standard node callback, there is an expectation that I will detect and report errors to that callback, and I want to meet that standard
01:52 < boutell> this is a nice module, it has unit tests that pass and everything (:
01:55 < gluxon> Well, if you're writing a module, it will usually return a stream or a callback.
01:55 < gluxon> The convention for callbacks is to pass "err" as the first argument of the callback.
01:55 < gluxon> callback(err, data); 
01:55 < gluxon> Streams will have the .on('error'  ...
01:56 < gluxon> If you're talking about reporting an error to a module maintainer, what's in the console should be enough. It will contain the error message that's passed to the error event handler in it as well.
02:03 < boutell> gluxon: no, I *am* the module maintainer, and I want the people using my module to get an honest response
02:03 < boutell> looks like I have to watch for 'close' events, not 'end' events, on an output stream
02:04 < gluxon> Ahh.. ok. That makes a bit more sense.
02:21 < EPIK> i'm sure node users hate this question but i have a client legitimately asking for this feature and am considering node for the job... has anyone implemented node as a chat room server successfully in production? i see plenty of tutorials on the subject but i'm curious if it's a good idea or just a good intro to node project.
02:22 < boutell> huh, seeing some REALLY slow s3 deletes, but that's off-topic
02:22 < boutell> I thought my tests were failing
02:23 < boutell> EPIK: it's highly suited to the job, it works hand in glove with websockets (and you can support legacy clients transparently if you use socket.io). Good support for low latency, a high rate of requests and web sockets are all points in its favor when it comes to chat.
02:25 < boutell> EPIK: we built one recently. Not in production at the moment, but that's not due to node.
02:26 < boutell> of course you can build an adequate chat server with php and mysql if you're not trying to scale particularly, but node sure does it better
02:27 < EPIK> boutell: I'm interested in using node as it seems more fit for the job. just wondering how it performs in production. adding another piece of software to my stack is a big decisions imho. especially being that it's so public facing
02:28 < EPIK> *decision. goodness i can't type well tonight
02:28 < boutell> EPIK: what scale are we talking about? (I haven't run node at crazy webscale.)
02:29 < boutell> (my work usually winds up running at "big local institution" scale.)
02:29 < EPIK> well, this client is merely a start-up at the moment.
02:30 < EPIK> it's definitely aimed at "web scale" though
02:31 < billycravens> Twitter Bootstrap + Express? has a particular module emerged?
02:37 < ChrisPartridge> billycravens: a module that does what exactly?
02:42 <@isaacbw> everything!
02:45 < master5o1|work> .markov say
02:45 < Bunge_> divided by 8, equals 16961.
02:51 < master5o1|work> so... 16961 * 8 :O
03:10 -!- mode/#Node.js [+o isaacbw] by ChanServ
03:13 <@Nexxy> PSA: add a README.md before publishing your shiny new module to NPM
03:14 < mscdex> Nexxy: after naming a module, writing READMEs is the biggest pain
03:14 < mscdex> ;-)
03:14 <@Nexxy> definitely
03:14 <@Nexxy> but even if its just the github default one
03:14 < substack> I have a system.
03:14 < ljharb> i wish there was an "npm readme" command that would read your main file and test scripts and make one for you
03:14 < ljharb> substack, you must have made a module for that.
03:15 < mscdex> ^
03:15 <@Nexxy> it's better than ERROR: No README.md file found!
03:15 < substack> ljharb: modules aren't necessary
03:15 < mscdex> Nexxy: i dunno about that
03:16 < substack> readmes are the easy part for me
03:16 < mscdex> i've seen a lot of readmes that contained pretty much nothing
03:16 < mscdex> except the name of the module, the author, the version, and a license
03:16 < mscdex> :S
03:16 < mscdex> that's what irks me
03:16 < substack> just copy an example from example/, copy the description from the package.json, document the methods, add install instructions and a license name
03:17 < ljharb> it'd be awesome if something could take your main export, and just look at the function names, toString them and grab the sigs, and make api docs :-)
03:17 < substack> there shouldn't be very many methods
03:17 < ljharb> butttt you're right, it's not that hard.
03:17 < ljharb> i'm just lazy.
03:17 < mscdex> ^
03:17 < mscdex> :-D
03:17 < substack> ljharb: that's a really bad way to do it
03:17 < substack> rdoc does it that way
03:17 < substack> the docs are really bad
03:17 < ljharb> true
03:17 < substack> it's much better if a person writes them
03:17 < ljharb> what's your system?
03:17 < substack> go look at any one of my modules
03:18 < substack> here's a good example https://github.com/substack/defined
03:18 < ljharb> pretty simple
03:18 < ljharb> so far i just made one, and have been copying it across to others
03:18 < substack> I think it's best to start from scratch every time.
03:19 < substack> so you don't accumulate cruft
03:19 < substack> there isn't anything to copy over anyways
03:19 < lyaunzbe> Hey guys, I'm running into an interesting problem. I am assigning a bunch of variables to process.env, like so process.env['field_name'] = item; Sometimes item is string boolean, so I convert it to a true boolean before assigning it. For some reason though, when i access the field after assignment it is still a string. Why could this be?
03:19 < lyaunzbe> by true boolean i mean false instead of 'false'
03:19 < ljharb> markdown doesn't come naturally to me yet :-) i have to look up syntax all the time
03:20 < ljharb> lyaunzbe: env can only contain strings
03:20 < lyaunzbe> why in the world is that? seems like a strange decision...
03:21 < ljharb> that's not part of node. that's how linux works.
03:21 < ljharb> *nix i suppose
03:21 < chilts> all environment vars are strings
03:21 <@Nexxy> mscdex, I think that's better than an error
03:21 < lyaunzbe> oh, very well, that makes sense.
03:27 < ljharb> Nexxy: https://npmjs.org/package/jsconfeu-demo is one of yours isn't it :-p
03:28 <@Nexxy> hey
03:28 <@Nexxy> lol
03:29 <@Nexxy> oh wow people actually download that?!
03:29 <@Nexxy> ljharb, HEY!
03:30 <@Nexxy> it has a readme!
03:30 < ljharb> i just saw the description :-p
03:30 <@Nexxy> it's not an error ;
03:30 <@Nexxy> ;P
03:30 < ljharb> lol oh
03:30 < ljharb> well there you go, nicely done
03:30 < ljharb> a+ irc-to-npm-module troll
03:48 < hackedy|zzz> speaking of irc-to-npm-module trolls
03:48 < hackedy|zzz> let us not forget https://github.com/hackedy/node-xxxtreme
03:53 < hackedy> is node.js considering doing GSoC in the future? isaacs?
04:31 < JamesMGreene> isaacs konobi mbalho Nexxy: Any chance we can get merlin83 banned temporarily...? This is getting annoying
04:32 <@isaacbw> what's happening
04:32 < JamesMGreene> isaacbw: joining, quitting due to "Excess Flood" and/or "Changing host" every few seconds
04:34 < HeartOfAce> yeah..
04:34 < HeartOfAce> http://cl.ly/image/1n3S3i3X1K2f pic 
04:34 < JamesMGreene> ironic
04:35 <@isaacbw> yo merlin83 
04:36 <@isaacbw> I just have irssi ignore joins and parts
04:36 < JamesMGreene> isaacbw: Understood, I prefer to see them in the room myself
04:36 <@isaacbw> this channel has an insane join/part to chat ratio
04:36 < JamesMGreene> (for logging purposes)
04:38 < JamesMGreene> Anyway, seems like merlin83 is stable now
04:38 < JamesMGreene> Must've been a ISP/FreeNode freakout
04:39 <@isaacbw> oh okay
04:39 <@isaacbw> I remember that happening a few days ago as well
04:39 < JamesMGreene> Thanks anyway, isaacbw
04:41 < trusktr> Sam-T, 
04:42 < trusktr> Sam-T, I'll be on here more too when I get some time to continue my app. :D
04:44 <@isaacbw> JamesMGreene: say something if it starts happening again. I can't see it myself
04:44 < JamesMGreene> isaacbw: Will do. All good for now.
04:44 < JamesMGreene> isaccbw: So what's the bw vs s?
04:44 <@isaacbw> different people :P
04:45 < JamesMGreene> For real? o_O
04:45 <@isaacbw> I'm a master of disguise
04:45 < JamesMGreene> I figured it was isaacs on 2 computers, or a bot or something :-P
04:45 <@isaacbw> maybe it's time for another topic
04:46 < kenperkins> JamesMGreene: pretty much everyone at one point confused isaacbw and isaacs
04:47 < JamesMGreene> So now that that's under control again....
04:47 <@isaacbw> isaacbw is not isaacs. Don't listen to isaacbw - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
04:47 < JamesMGreene> Legit Node.js question!
04:47 <@isaacbw> er
04:47 -!- isaacbw changed the topic of #Node.js to: isaacbw is not isaacs. Don't listen to isaacbw - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
04:49 <@isaacbw> oh man, I'm looking at the logs now and that merlin83 business was excessive
04:49 < JamesMGreene> If I am using the new ReadableStream interfaces and I want to read X bytes manually at first but then want to read everything else, what's the best way to do that?  I'm thinking start off with a `reader.pause().read(X)` and then switch over to `reader.on('data', fn).resume()`. Sound about right?
04:50 < JamesMGreene> isaacbw: Yeah I dunno what was happening with his connection. I saw other people's connections dying in other rooms but nothing crazy like merlin83's
04:51 <@isaacbw> he's probably testing a bot or client or something like that
04:51  * JamesMGreene shrugs
04:51 < JamesMGreene> isaacbw: Any opinion on my question a few lines up?
04:54 < JamesMGreene> kenperkins Thanks for the empathy :-P
04:55 <@isaacbw> JamesMGreene: can stream functions be chained like that?
04:55 <@isaacbw> either way you would want to resume within the on('data') callback
04:56 < JamesMGreene> Why's that?
04:56 < JamesMGreene> Does it auto-pause?
04:56 <@isaacbw> no? what do you mean
04:58 < JamesMGreene> I mean why would I call `resume` in the `data` handler?
04:58 <@isaacbw> if it's paused you would be consuming data with the 'data' event
04:58 < JamesMGreene> Don't I have to call it BEFORE then to even get the `data` handler to execute?
04:58 <@isaacbw> don't pause it
04:58 < JamesMGreene> Well, that's kinda my question though
04:58 <@isaacbw> why do you want to pause it
04:59 <@isaacbw> why do you want to mix the old and new methods
04:59 < JamesMGreene> If I want to manually read the first few bytes with `.read(x)` first, it seems like I should be pausing it to prevent the 'data' events from firing
04:59 < JamesMGreene> Well I'd be fine with using just `read` but it seems to be synchronous
04:59 < JamesMGreene> Right?
05:00 < JamesMGreene> So won't that block up the I/O?
05:00 <@isaacbw> well you would wait for a readable event
05:00 < JamesMGreene> Yup, I do that either way
05:01 < JamesMGreene> Or are you saying that the 'readable' event fires repeatedly?
05:01 <@isaacbw> if you wait for a readable event then you know there is data ready for the read() function
05:01 <@isaacbw> so there's not really anything to block
05:01 < JamesMGreene> Oh gotcha
05:01 < JamesMGreene> I thought 'readable' was more like a one-time only even of "hey, the stream is open now"
05:02 < JamesMGreene> event*
05:02 <@isaacbw> nope, it just fires when the buffer is ready for consumption, which could be multiple times
05:02 <@isaacbw> or infinite times
05:02 < JamesMGreene> Do the 'error' and 'end' events still fire even if I don't have a 'data' handler?
05:03 <@isaacbw> they should
05:03 <@isaacbw> well, I don't know about end
05:03 <@isaacbw> probably
05:04 < JamesMGreene> I'd assume so
05:04 < JamesMGreene> Doesn't seem like there would be any other way to know
05:05 <@isaacbw> anyway, I'm off to bed
05:05 <@isaacbw> good luck
05:06 < JamesMGreene> thanks, isaacbw
05:12 < zivester> anyone know of some quick and dirty reading for how to properly create modules that I can use on the frontend and backend?
05:13 < ljharb> zivester: node modules, plus browserify
05:51 < niftylettuce> anyone need country codes? https://github.com/getprove/node-country-codes
05:52 < duko> how should one uninstall or update a module that was installed with `npm install -g`?
05:53 < ljharb> duko: to update it, just `npm install -g` it again
05:53 < ljharb> there's also "npm uninstall -g"
05:57 < duko> ljharb: thanks
06:04 < ChrisPartridge> niftylettuce: your github image rocks
06:06 < substack> ChrisPartridge: I drew it!
06:07 < ChrisPartridge> substack: hah! I knew it looked "substacky"
06:09 < ryanaz> is there a way to use both express and node-multiparty together?  I need to stream the files to S3 instead of /tmp first. 
06:14 < howdynihao> that new github logo is fugly
06:14 < ChrisPartridge> ryanaz: whos version of node-multiparty are you using?
06:15 < ChrisPartridge> ryanaz: https://github.com/superjoe30/node-multiparty will probably do what you want 
06:15 < ChrisPartridge> ryanaz: or even https://github.com/superjoe30/connect-multiparty
06:15 < ChrisPartridge> howdynihao: yeah, it's a bit... boring
06:16 < ryanaz> ChrisPartridge: nice.. 
06:16 < ChrisPartridge> substack: your new site has one little annoyance
06:16 < ryanaz> Someone mentioned node-multiparty earlier, but didn't look like it plugged into express nicely.
06:16 < ryanaz> ChrisPartridge: It looks like connect-multiparty will do it
06:17 < ChrisPartridge> ryanaz: yeah, looks like the original author was always persisting to disk, but superjoe sorted it out
06:17 < niftylettuce> ChrisPartridge: <3 substack made it for me
06:17 < howdynihao> so is there (i dont think there is) is a universal image blacklist ?
06:18 < howdynihao> pretty much a public api to a db full of file sha hashes or something
06:18 < howdynihao> im surprised there isn't one, i would think all them copyright holders would be all rushing to set one up
06:20 < ryanaz> howdynihao:  You'd have to come up with a 'watermark' technology first to discern the hashes for images of all filetypes.. you can't just use a hash, someone could re-encode it with a different compression and get a different hash, or use png instead of jpeg, or gif, or whatever.  Seems sketchy 
06:20 < substack> ChrisPartridge: I want to make the articles load faster and also have it so that descriptions show up correctly
06:21 < howdynihao> ryanaz: no the point isn't to make it foolproof, its just to lessen the load of 'reporting' 
06:21 < ChrisPartridge> substack: it loads pretty quick for me, sometimes scrolls to the lower part of the article though
06:21 < ChrisPartridge> but the one annoyance, if I hold ctrl and press a link on the index - it doesn't open in a new tab
06:21 < ryanaz> howdynihao:  i've never thought about it, that was my $0.02 
06:22 < howdynihao> i think the problem is mainly the major user submitted content sites won't make the effort unless required to
06:23 < Saleem> node
06:23 < ChrisPartridge> Saleem: yes, that is why we are here :-)
06:25 < howdynihao> i bring it up because it would help smaller sites
06:29 < ryanaz> ChrisPartridge: I'm confused by connect-multiparty … there isn't much meat there as far as usage examples and options.
06:29 < ryanaz> ChrisPartridge: Can I assume the same options as node-multiparty as for connect-multiparty?  
06:30 < ChrisPartridge> ryanaz: I've not used it, so I wouldnt know - but I would assume so
06:31 < ChrisPartridge> ryanaz: did you see the S3 example?
06:31 < ryanaz> I see the s3 example in node-multiparty 
06:31 < ryanaz> but it looks like the other one has better integration into express
06:40 < ryanaz> !seen superjoe30
06:40 < ryanaz> no bots here? 
06:40 < ljharb> not that one.
06:40 < ryanaz> hmm
06:48 < goodtimes> anyone familiar with node.js and email servers?
06:48 < goodtimes> (IMAP)
06:49 < substack> goodtimes: ask a more specific question
06:49 < substack> asking if anyone is familiar with something is going to incur a large number of transations
06:49 < goodtimes> ok...
06:49 < substack> latency on irc is very high
06:49 < goodtimes> has anyone used this module: https://github.com/mscdex/node-imap
06:49 < substack> mscdex is on irc
06:50 < goodtimes> yes but he isn't presently here i dont believe
06:50 < substack> he last spoke 3 hours ago
06:51 < goodtimes> i PM'd him, so i'm crossing my fingers 
06:51 < pats_Toms> hi, is there someone who have any idea how to implement socket.io if I want to use it in multiple files?
06:51 < goodtimes> in the meantime, have you seen/used the imap module, substack?
06:55 < goodtimes> substack: my apologies i'm rather new to irc....i always thought github should implement a chat feature
06:57 < ChrisPartridge> goodtimes: if you are having a specific problem, just state the problem clearly and someone might be able to help
06:58 < substack> PLEASE STATE THE NATURE OF THE MEDICAL EMERGENCY
06:58 < goodtimes> fair enough
07:01 < goodtimes> i'm attempting to fetch and parse Gmail messages, and doing so through the aforementioned node imap module. The problem i'm running into is searching/fetching a single email for further parsing of its actual contents. I'm attempting to use the message's 'UID' but for some reason I get nothing back when I search via the UID
07:02  * Kuntau slaps isaacs around a bit with a large trout
07:02 < goodtimes> Basically, I do an initial search based on user determined criteria (sender's email, date, message flag, etc...) to return a list of email 'stubs' i.e. just their headers which contain to, from, date, and subject 
07:03 < goodtimes> when if the user is interested in any particular email they can just 
07:03 < goodtimes> then if the user is interested in any particular email they can 'click' to get the full message
07:04 < goodtimes> but when i try to refetch the email they want more of, I get nothing when I do so via the message's UID
07:04 < ChrisPartridge> goodtimes: are you using the fetch method?
07:06 < goodtimes> ChrisPartridge: yes, fetch has a structure of fetch(< mixed >source, [< object >options, ] < mixed >request, < function >callback)    where 'source' can be a message UID
07:07 < goodtimes> ChrisPartridge: "source can be a message UID, a message UID range (e.g. '2504:2507' or '*' or '2504:*'), or an array of message UIDs and/or message UID ranges." To be exact...the problem is that when I search for a single UID i.e. '30945' (aka the UID of the message I want) I get nothing 
07:08 < ChrisPartridge> goodtimes: can you gist/pastebin the code you are using to do the search
07:25 < howdynihao> i think thats a gmail quirk, not 100%
07:30 < goodtimes> ChrisPartridge: did you get the link I sent?
07:33 < ChrisPartridge> goodtimes: yep, so everything works except the fetch near the bottom?
07:36 < [AD]Turbo> ciao
07:37 < goodtimes> ChrisPartridge: yes that's correct. FYI the syntax for the parameters of that fetch (aka id: 1.1) are used to just get the plaintext of the email message. I'll consider parsing out attachments and multithreads, but for now I just want the plaintext
07:38 < goodtimes> ChrisPartridge: The whole fetching of just the 1.1 part of the message structure (aka the plaintext) was itself a source of pain, as can be seen per this issue thread on the imap module github: https://github.com/mscdex/node-imap/issues/184
07:40 < ChrisPartridge> goodtimes: Yeah, seems a bit strange on the gmail side of things - I would probably query mscdex when he's around and see what he has to say
07:40 < ChrisPartridge> goodtimes: perhaps setup an imap instance locally and see what success you have
07:41 < goodtimes> ChrisPartridge: yeah i've done that a bunch just to mess around with the syntax...I was gonna run it quick and give you the error message I got 
07:43 < ChrisPartridge> yeah sure
07:52 < goodtimes> ChrisPartridge: so yeah when I call the second function "parseEmail" using say UID = '30976' the response I get is { "Email:" [] }
07:53 < goodtimes> ChrisPartridge: However, when I use something like UID = '30976:30990' I get a few messages but certainly not the one I was looking for
08:14 <@Nexxy> lol @ topic
08:15 < ChrisPartridge> topic has been like a talk show lately :p
08:16 <@Nexxy> just liek old tiems
08:16 <@Nexxy> the best part is that isaacbw set the topic
08:16 <@Nexxy> so it becomes a logical impossibility!
08:18 < ChrisPartridge> Nexxy, we have a conundrum
08:19 <@Nexxy> nyess, so it would seem
08:24 < ChrisPartridge> breaking news on HN: http://www.georgehart.com/bagel/bagel.html
08:28 < Chiffon> hi all
08:30 < Chiffon> does anyone know a simple solution to pass a variable from Node into a Stylus file (.styl) ?
08:34 < Chiffon> i'm working on a site with two languages available  and i've few images different for each version ; i want to find my variable current-lang in my file style.styl
08:35 < Chiffon> (so i use express, jade, i18next and stylus
08:35 < Chiffon> )
08:37 < Chiffon> i found this : http://stackoverflow.com/questions/12573897/node-app-variables-passed-into-stylus-file but it seems not very well formed
08:38 < kokotron> im reading up on stylus files right now, i'll help if i can- but im newb
08:40 < Chiffon> thx koko !
08:40 < kokotron> :)
09:06 < m0> Hey, what is the recommended way to serve js/css crunched files for production and js/css uncrunched for development? (using grunt)
09:09 < m0> I was thinking of creating a folder called "build" that has two subfolders "dev" and "prod". And express would serve either one depeneding on NODE_ENV
09:11 < spion> m0, sounds good
09:13 < spion> personally I use less and browserify and have "src", "prod" and "dev" (browserify always needs a build). I also use shelljs (in coffeescrpit) for the build file.
09:14 < substack> I've been using the scripts.postinstall field of package.json
09:15 < substack> with http://github.com/substack/ploy
09:28 < Chiffon> sry but a retry with my question
09:28 < Chiffon> does anyone know a simple solution to pass a variable from Node into a Stylus file (.styl) ?
09:29 < Chiffon> i'm working on a site with two languages available  and i've few images different for each version ; i want to find my variable current-lang in my file style.styl
09:29 < Chiffon> (so i use express, jade, i18next and stylus)
09:37 < Robert_Larsen> Hey. I'm trying to get a URL based dependency to work but it fails.
09:37 < Robert_Larsen> This works: npm install http://localhost/CegoXMPP.tar.gz
09:37 < Robert_Larsen> But this doesn't:
09:37 < Robert_Larsen> $ tail -n 4 package.json 
09:37 < Robert_Larsen>   "dependencies" : {
09:37 < Robert_Larsen>       "CegoXMPP" : "http://localhost/CegoXMPP.tar.gz"
09:37 < Robert_Larsen>   }
09:37 < Robert_Larsen> }
09:37 < Robert_Larsen> $ npm update
09:37 < Robert_Larsen> npm http GET http://localhost/CegoXMPP.tar.gz
09:37 < Robert_Larsen> npm http 200 http://localhost/CegoXMPP.tar.gz
09:37 < Robert_Larsen> npm http GET https://registry.npmjs.org/CegoXMPP/0.0.1
09:37 < Robert_Larsen> npm http 404 https://registry.npmjs.org/CegoXMPP/0.0.1
09:37 < Robert_Larsen> npm ERR! 404 'CegoXMPP' is not in the npm registry.
09:37 <@Nexxy> Robert_Larsen, please use a paste service
09:37 < Robert_Larsen> npm ERR! 404 You should bug the author to publish it
09:37 < Robert_Larsen> Any ideas?
09:37 <@Nexxy> like gisthub.com
09:37 < Robert_Larsen> Alright, sorry
09:38 <@Nexxy> no worries :)
09:38 <@Nexxy> Robert_Larsen, if you publish it to npm it should work!
09:39 < ProXy> Hi guys, I am searching for a reliable keyboard event listener module. I did not found any good. Can you help me?
09:39 <@Nexxy> ProXy, I made one with node-hid
09:39 <@Nexxy> ProXy, do you mean keyboard input?
09:39 < ProXy> yes
09:39 < Unknown__> Why not use node-webkit ? ^^
09:39 < ProXy> NExxy, that exactly what i mean
09:40 <@Nexxy> https://npmjs.org/package/hidstream
09:40 < Robert_Larsen> Nexxy: But it is private, commercial and contains stuff that is very specific to my company
09:40 <@Nexxy> it's super basic but it might give you an idea
09:40 <@Nexxy> Robert_Larsen, you could set up a private repository
09:41 < ProXy> Nexxy, that's exactly what i need. Thank you very much. :)
09:41 <@Nexxy> ProXy, np!
09:41 <@Nexxy> ProXy, keep in mind that if you bind to the keyboard this way
09:41 <@Nexxy> it won't work with anything else
09:41 < Robert_Larsen> Nexxy, k...had hoped it could be a little easier since installing directly from the url worked
09:41 <@Nexxy> (you probably already know that but just in case)
09:42 <@Nexxy> Robert_Larsen, yeah you would think so... I don't have any experienc with that but someone else might have more info
09:43 < ProXy> Nexxy, ok. thank you
09:44 <@Nexxy> ProXy, good luck! and please feel free to fork/contribute
09:47 < ProXy> Nexxy, offcourse
09:53 < Aartsie> Hi all
09:54 < Leonvv> hi
09:58 < Chiffon> so i just found few solutions to my problem (pass a variable JS to a stylus file) there : https://github.com/LearnBoost/stylus/issues/927 - not perfect but it works ! thx all
10:26 < MI6> joyent/node: Ben Noordhuis master * 8e190bf : Merge remote-tracking branch 'origin/v0.10'  Conflicts: 	src/node_os.cc (+11 more commits) - http://git.io/cOsaLQ
11:02 < mainiak> Hi. Has npm checking for unknown options? If yes, why I could use: 'npm install --dev'
11:03 < mainiak> Story behind this - is about try to install dependencies (no dev) and all dependencies (dev included) with npm.
11:26 < Steve____> Wondering if anyone has found a good tutorial on using Passport with Restify?
11:37 < genazt> hi
12:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:54 < yug> hi all. 
12:54 < yug> quick Q regarding socket.io and express
12:55 < yug> I want the socket.io server to listen on a different port then express (express listens on 80) 
12:56 < yug> but socketio.listen gets server as a parameter 
12:56 < yug> anyone knows how to seperate these two?
12:58 < zaleb> sio.listen can also take a port
12:58 < zaleb> socketio.listen(port, function () {
12:58 < zaleb>             logger.info("Socket listening on port " + port);
12:58 < zaleb>         });
13:13 < meiwes> hello
13:19 < Topcat> hello, is there a nodejs.org/dist/latest/stable.tar.gz type url? http://nodejs.org/dist/latest/ is there but I'd still have to know the package version to download the file.
13:21 < ryanaz> Topcat:  From what i understand is the even versions of the software are "stable"  v0.10.x is a fairly recent stable release that had some major changes that modules are still uplifting to.  It was recommended to me to go with v0.8.23 during this uplift.  I am fairly new here though.
13:22 < ryanaz> http://nodejs.org/dist/
13:23 < Topcat> aye, in particular I'm looking at a chef cookbook that grabs the "latest" node unless a version is specified. but they've only set the most recent version number as a default so I'd have to update this cookbook each release.
13:31 < ryanaz> topcat: Try this … might work for you?  curl http://nodejs.org/dist/latest/ | grep '\.tar\.gz' | tail -1 | awk -F\" '{print $2}' | sed 's/^node-//' | sed 's/\.tar\.gz$//'
13:32 < ryanaz> Topcat:  curl http://nodejs.org/dist/latest/ | grep '\.tar\.gz' | tail -1 | awk -F\" '{print $2}' | sed 's/^node-//' | sed 's/\.tar\.gz$//'
13:32 < Topcat> hm, yeah something like that, I can work with that. thanks ryanaz 
13:32 < ryanaz> Topcat: sure, if they change their structure or whatever, it might stop working….  but it might work for a "while" 
13:33 < Topcat> well assuming /latest/ is kept as the latest stable as it looks like it is now I imagine its ok
13:36 < ryanaz> Topcat: this might work a little more consistently … looking for specific files with "node-v" at the beginning, and sorting, and pulling the last one… 
13:36 < ryanaz> Topcat:  curl http://nodejs.org/dist/latest/ | awk -F\" '{print $2}' | grep '^node-v' | sort | tail -1 | sed 's/^node-//' | sed 's/\.tar\.gz$//'
13:37 < ryanaz> Topcat: that should work more consistently 
13:47 < vivekagr> How can I serve the static files with node? I'm trying to make a chat app with socket.io but can't figure out about serving static files properly. Tried `node-static` but it isn't responding to the requests.
13:49 < SomeoneWeird> vivekagr, express.static(dir)
13:50 < vivekagr> @SomeoneWeird: Thanks, I'll check that out.
13:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:56 < vivekagr> SomeoneWeird, thanks again! It worked.
13:57 < boutell> Is there a way to set what the default exit code of a node process is going to be? Rather than forcing it to exit right now with a given code via process.exit? I would like to let other callbacks do their magic, but still flag that there's a problem.
13:58 < boutell> I'm in this position because I'm responding to an event, and events don't have callbacks or a sense of when all event handlers are "really done"
13:58 < boutell> as far as I can tell
14:02 < boutell> I guess I could pass a callback when emitting events. But that doesn't really help me because it tells me *something* finished but I have no idea when *everybody* is done.
14:04 < thomblake> boutell: if you know what all the events are in advance, you can just have everybody increment a counter or set flags in the event handler, and then bail when everybody is done.
14:04 < boutell> thomblake: I don't even know when everybody is through getting started.
14:04 < boutell> oh wait, I do, yes.
14:04 < boutell> I see what you mean.
14:04 < boutell> that is a way to do it, yes.
14:04 < boutell> I can pass an object on which there is a counter, etc.
14:07 < boutell> I want to make my object an EventEmitter. I thought this was a simple way to do it, but it doesn't seem to work, as noted in the gist. Ideas? https://gist.github.com/boutell/5412937
14:11 < brianc> boutell: you're 1/2 way there
14:11 < boutell> it looks like I have to also use util.inherits.
14:11 < domp5678> hey all, is there a way to get the latest version of nodejs to work with cygwin? (windows 7 x64)
14:11 < brianc> you also need to use require('util').inherits(Thing, require('events').EventEmitter);
14:11 < boutell> I'm not sure why exactly… OH. It's because EventEmitter doesn't attach properties directly to the object in the constructor, it uses prototypal inheritance. Which I usually avoid. OK. Thanks brianc!
14:11 < brianc> boutell: https://github.com/brianc/node-make-emitter/blob/master/index.js
14:19 < unijad> anyone here is expreianced with express.js and passport.js ?
14:34 < whatadewitt> hi, if i'm publishing a package to npm, will it ignore my .git files automatically?
14:34 < whatadewitt> or is there a certain way i should prepare my folder before pushing?
14:43 < boutell> Is there a variation of EventEmitter that is better suited to situations where event handlers should run sequentially, each one not being called until the previous one invokes its callback?
14:44 < leonvv> I don't think so, but you could write on yourself.
14:49 < boutell> leonvv: yeah, think I'll need to. These are migration handlers for a database, it's probably not great to have a dozen of them firing at once. 
14:49 < boutell> right now I'm at least tracking whether they are all finished which will do for now
15:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:07 < meiwes> Anyone using node-pq 
15:07 -!- mode/#Node.js [+o isaacs] by ChanServ
15:07 < pwaleczek> is faceplate ok??
15:08 < pwaleczek> or can anyone recommend any other facebook frameworks?
15:08 -!- mode/#Node.js [+o gnarf] by ChanServ
15:08 < leonvv> meiwes: what's that ?
15:09 < meiwes> Its actually a nodejs package called pq,used in job queuing
15:09 < meiwes> leonv:https://github.com/amazingsyco/node-pq
15:10 < leonvv> Ahh
15:11 < meiwes> leonvv:Must any decent job queueing package have a polling mechanism to lookup new jobs,i am not so good at producer-consumer pattern?
15:11 < leonvv> Me neither, sorry :(
15:13 < meiwes> This place is turning into a hard place,where the hell drudge
15:13 < meiwes> :)
15:13 < leonvv> ^^
15:33 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:43 < vekexasia> hello all, i'm seeking for a node.js developer experienced with expressjs and that has knowledge of python in order to convert a python websesrver to a nodejs express webserver. python webserver is 500line long and I 'll pay for it.  
15:43 < s5fs> vekexasia: feel free to pm me
15:47 < niggler> anyone use visual studio?
15:49 < s3shs> Why don't I see a lot of switch statements in Javascript code?  Why do programmers avoid them?
15:49 < s3shs> riggler, for what?  I use it for C++.
15:49 < s3shs> But I've never built node with it.
15:49 < radiodario> s3shs: i use them, but sometimes you forget a break; and it's like super hell on earth
15:49 < vekexasia> same for me . 
15:49 < niggler> s3shs I'm trying to use it as an IDE for JS development
15:50 < niggler> radiodario jshint will warn you about it
15:50 < s3shs> Ahh.  Ok.  I come from a C background so I've got some extra neurons around that.  :-)
15:50 < vekexasia> speaking about Java development you can convert a switch to if in 2 clicks using eclipse
15:50 < niggler> in fact radiodario  you have to explicitly give a /* falls through */ when you want it to fall through 
15:50 < leonvv> niggler, use sublime text 2 , it is awesome
15:51 < niggler> s3shs i use switches :) i count 29 here: https://github.com/Niggler/js-xls/blob/master/xls.js
15:51 < s3shs> :-)
15:51 < niggler> but to be fair I come from C
15:52 < niggler> s3shs leonvv this exists but is outdated: https://github.com/ishisaka/nodeintellisense
15:52 < s3shs> Niggler, these words like readIEEE754... in javascript... you must like punishment.  Impressive.
15:52 < niggler> s3shs so the way to describe how xls stores numbers is "lets just make shit up as we go along"
15:53 < niggler> in some places, it literally says "the next 30 bits are the leading 30 bits of an IEEE754 float
15:53 < niggler> and the last two bits are 0"
15:53 < niggler> so you need some magic to get it right
15:53 < lugzer> hi
15:54 < s3shs> sounds evil, niggler.
15:56 < vekexasia> isaacbw: you here ?
15:58 < vekexasia> hello all, i'm seeking for a node.js developer experienced with expressjs and that has knowledge of python in order to convert a python websesrver to a nodejs express webserver. python webserver is 500line long and I 'll pay for it.  
15:59 < leonvv> What does the server do ?
15:59 < vekexasia> it's basically a proxy
15:59 < leonvv> Any complicated tasks ?
15:59 < vekexasia> just translate python into nodejs+express
15:59 < CoverSlide> I had a friend who was a carpenter. He was trying very hard to make this stool, but just couldn't.
15:59 < CoverSlide> Turned out, he was constipated
16:00 < s5fs> CoverSlide: booooooo
16:00 < CoverSlide> :D
16:01 < s5fs> CoverSlide: ;-)
16:02 < leonvv> vekexasia, what's your budget ?
16:02 < vekexasia> leonvv: just look at the pm :)
16:26 < alex_____> hi, i can t install node.js installer for win7 (http://nodejs.org/dist/v0.10.4/node-v0.10.4-x86.msi)
16:26 < alex_____> i use win7 with sp1
16:27 < alex_____> im waiting on the installing status minutes and nothing
16:31 < TheAceOfHearts> are you sure you have a 32 bit system and not a 64 bit system?
16:31 < rmill> isaacs: Nice post http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js
16:32 <@isaacs> rmill: thanks
16:32 < context> need a nice way to design html layouts for printing that actually work
16:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:33 < rmill> isaacs: “Every program is a proxy.” really resonates. I feel like the same philosophy applies to UI/UX even.
16:34 <@isaacs> rmill: that was something ryah said a lot
16:34 < TheAceOfHearts> rmill: thanks for linking to that, it was a cool read
16:34 <@isaacs> rmill: like, you proxy a database data through a template, and send html to the browser, in most web apps, for example
16:34 <@isaacs> rmill: and the database is proxying from its query layer to the fs implementation
16:35 <@isaacs> and the fs is proxying from the sys calls to the hardware.
16:35 <@isaacs> it goes all the way down
16:35 < rmg> ooh, I like that
16:37 < rmill> TheAceOfHearts, you should thank isaacs ;)
16:37 < rmill> He wrote it.
16:38 < TheAceOfHearts> aye, I've heard isaacs in a few podcasts, have enjoyed em all so far
16:40 < meiwes> I need a little help with job queueing.My issue is on polling.
16:41 < sandfox> If you a mad proponent of unix/node philosophy look at substack and his github repo… turtles all the way down with his modules
16:41 <@mbalho> isaacs: makes me sad to admit but getting trolled by bascule actually resulted in a good blog post
16:41 < sandfox> dammit, meant if you want A mad
16:41 <@isaacs> mbalho: yeah, it really did.
16:41 < TheAceOfHearts> who's bascule? 
16:41 <@isaacs> mbalho: although, i think at some point, i was trolling him, or maybe we were trolling each other
16:42 <@isaacs> mbalho: i think he has a crush on me.  not my type, though.
16:42 <@isaacs> mbalho: it's like the 2nd-grade "boys throwing sticks at girls" style of courtship
16:42 <@mbalho> isaacs: you are his actor model and he is sending signals to you
16:43 <@isaacs> mbalho: ok, that IS pretty romantic.
16:43 <@isaacs> maybe i'm just to hard hearted.
16:43 <@mbalho> 'we are so compatible the haskell type system doesnt even throw errors when we merge into the same functor'
16:44 <@isaacs> 'let's make some dependent types together'
16:44 <@isaacs> i think there's a 'monad' reference in there somewhere, but i'm afraid if i make it, i'll get /kick'ed
16:44 <@mbalho> yea
16:44 <@isaacs> (inappropriate for the channel)
16:44 <@mbalho> crockford did it
16:44 <@mbalho> http://www.youtube.com/watch?v=b0EF0VTs9Dc
16:45 <@mbalho> </relevantcrockford>
16:49 < jcollum> hey, does it seem weird to you guys that a colon in a string causes node repl to go into '. . .' mode? 
16:50 < jcollum> code: parser.parse("5+2+x5:x8")
16:50 < jcollum> then repl is in triple dot mode (I dunno what it is doing) 
16:52 < jcollum> parser.parse("5+2+x1-x6") ---> no triple dot
16:52 < jcollum> parser.parse("5+2+x1:x6") -----> triple dot
16:57 <@isaacs> mbalho: i like jedschmidt's `Mo Money Monads` reference from TxJS
16:58 < rendar> isaacs: whats that?
16:58 <@isaacs> rendar: best to wait for the video :)
16:58 <@isaacs> rendar: you'll like it.  it's about an app called rndr
16:58 <@isaacs> :)
17:00 < pats_Toms> I got something really big from Date().getTime()
17:00 < pats_Toms> really miliseconds?
17:02 < jjore> Too bad it's not in nanos?
17:02 < pats_Toms> haha :D
17:03 < jjore> FWIW, it does often seem pretty ridiculous how many logging formats truncate to second precision.
17:04 < CoverSlide> logging formats should be a mix of machine parseable and human readable
17:04 < jjore> .oO( I want my logging form in the "begats" style? )
17:05 < CoverSlide> begats?
17:07 < jjore> It's a stilted form of language used in the Hebrew scriptures to note lineage and is used by people as a crude form of time-measure for events described elsewhere in the text.
17:07 < jjore> You get a bit of a Lamport clock out of it.
17:13 < pats_Toms> I really don't know whats going on...
17:14 < leonvv> What's up ?
17:17 < pats_Toms> seems like there is something wrong in my code... http://jsfiddle.net/WUwbW/
17:17 < pats_Toms> there is all right with Date() 
17:22 < jcollum> @pats_Toms I'm not seeing what you don't like about that code
17:23 < jcollum> i'm getting a diff of 7 
17:24 < jcollum> hey how do I turn off all these "has joined" messages etc? 
17:25 < pats_Toms> what irc client are you useing?
17:25 < leonvv> Search for preferences
17:25 < pats_Toms> you need to "disable join/leave messages"
17:25 < pats_Toms> tb hide ... messages
17:31 < genazt> hi, are process.send and the ipc behind them safe ? or can another process hock into them and send messages on them ?
17:32 < jcollum> thanks, I saw it in options was just looking for the wrong thing
17:33 -!- mode/#Node.js [+o sblom] by ChanServ
17:41 < dan_johnsin> Anyone use redis with a unix socket?
17:41 < CoverSlide> genazt: they're just file descriptors from the parent process
17:41 < dan_johnsin> having trouble connecting to it
17:45 < genazt> CoverSlide, so i could be able to open the fd and listen to it
17:47  * CoverSlide shrugs
17:47 < s3shs-> So underscore doesn't work as well with strings  as I'd like.  e.g.: contains.  Any ideas?
17:48 < s3shs-> Recommendations for alternative libraries?
17:48 < genazt> s3shs-, you use it only for contains ?
17:49 < s3shs-> No, I use quite a few goodies in underscore.  I see "lodash". That looks pretty comprehensive.
17:49 < ejnahc> can i access a cookie from socket.io without express? i couldn't see cookie parameter in handshakeData
17:50 < genazt> ejnahc, you can but you need to parse the HTTP headers
17:55 < SrPx> How do you extend a library such as lodash or underscore? I wrote a file which called lodash.mixin to add some methods, but this won't work: _ = require("lodash"); require("extend_lodash.js")
17:56 < leonvv> try
17:57 < leonvv> _.prototype.newMethod = function(){alert("You called the new method.");};
17:58 < CoverSlide> genazt: i'm not entirely familiar with fd's and all sort of unixy stuff, but apparently you can't listen on an fd unless you (a) fork the process or (b) send the fd over a pipe or unix socket
17:58 < CoverSlide> that is what the googles tell me
17:59 < genazt> ah okay, so it is restricted to the parent and its childs
18:00 < genazt> so it should be safe
18:00 < genazt> thanks :D
18:01 < riku> Is there a solution to kill a child process on windows? It gets killed if I try to kill it right after spawning but otherwise it just keeps on running. http://pastebin.com/RjZrPBfD
18:01 < rendar> isaacs: cool :) where i can see it? is that not ready yet?
18:01 < ljharb> SrPx: your mixin shouldn't modify a global. it should return a function, that takes a lodash instance, and modifies it.
18:01 <@isaacs> rendar: no, the conference was just this Monday, so it'll probably be a while before all the vids are up.
18:01 <@isaacs> rendar: follow @txjs or @slexaxton, I'm sure they'll tweet it up
18:02 < SrPx> ljharb: that makes some sense, but how should I actually do it? _ = require("extend_lodash.js")(require("lodash")); ?
18:02 < ljharb> sure, if you hate intermediate variables and readability :-)
18:03 < ljharb> SrPx: var originalLodash = require('lodash'); var extendLodash = require('extend_lodash.js'); ver lodash = extendLodash(originalLodash);
18:03 < ljharb> SrPx: of course a better question is, why do you need to modify a third-party library? O.o just require in your extra methods only when you need them
18:03 < SrPx> ljharb: I wanted to add some methods, what do you mean?
18:03 < genazt> is the process.send() function gone ? it is not in the docs anymore oO
18:04 <@isaacs> genazt: it's still there.  that's how you talk from forked child to the parent
18:04 <@isaacs> genazt: maybe the docs are lacking
18:04 < RobW> Is there a node way to get username and email from a global gitconfig?
18:04 < genazt> y i know but why isnt it documented ?
18:04 < ljharb> SrPx: i mean, don't add methods to _. if you want a new method called "srpxMethod" then put it in a module by itself, and do var srpxMethod = require('srpxMethod')
18:04 < genazt> and the tls options also arent
18:04 <@isaacs> genazt: bug?  i dunno.
18:04 <@isaacs> genazt: where are you looking?
18:04 < genazt> and the createCipher third parameter is also not documented
18:05 < genazt> well i build a "guarded" system
18:05 <@isaacs> genazt: http://nodejs.org/docs/latest/api/tls.html#tls_tls_createserver_options_secureconnectionlistener
18:05 < genazt> the guard builds up a tls socket to the update server and i want to tell the app it should update its modules
18:05 < genazt> yes on createServer
18:05 <@isaacs> genazt: doc patches are always welcome.
18:05 < genazt> but not on tls.Server
18:05 <@isaacs> genazt: please help
18:06 <@isaacs> genazt: oh, ok, sur.
18:06 <@isaacs> genazt: but all createServer does is call new Server
18:06 <@isaacs> genazt: maybe they should move tothere?  i dunno.
18:06 <@isaacs> patch welcome
18:06 < genazt> yes i know, but it isnt documented
18:06 < genazt> i must look into the code :D
18:06 < genazt> so why do i read the docs :D
18:07 < genazt> for the crypto thing i opened a bugreport
18:08 < genazt> https://github.com/joyent/node/issues/5316
18:08 < SrPx> ljharb: but then I wouldn't be able to use it with lodash
18:08 < SrPx> ljharb: as in _(obj).map(fn).asHash() // asHash is my method
18:08 < ljharb> SrPx: of course you could
18:08 < ljharb> SrPx: ah, you want all the chaining
18:08 < SrPx> yea
18:08 < ljharb> SrPx: submit a pull request to lodash then :-p
18:08 < ljharb> SrPx: or just do .map(asHash) instead
18:08 < ljharb> or whatever makes sense
18:09 < ljharb> chaining is overrated when it means you have to modify a third party library
18:09 < CoverSlide> anyone else have a bug with the node process not responding to C-c or C-z at all when using the cluster module?
18:09 < SrPx> ljharb: .map(asHash) wouldn't work... they wouldn't accept my useless stuff
18:09 < ljharb> if it's useless why do you need it? :-)
18:09 < SrPx> ljharb: I don't think so, it's much more elegant than not chaining in some cases
18:09 < SrPx> ljharb: useful for my particular project, not too generic to add some kbs to everyone's lodash.js
18:10 < therealkoopa> niftylettuce: Is there a recommended way to store each template in node-email templates It seems like if everytime I sent email I have to do emailTemplates(dir, function ()) .. then get my template it's a lot of overhead
18:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:10 < niftylettuce> therealkoopa: you could do something like app.settings.templateOne = emailTemplates(dir) ....
18:10 < niftylettuce> therealkoopa: then when you want to call it, just do app.settings.templateOne() ...
18:10 < ljharb> SrPx: gotcha. i gave you my tiers of advice :-) good luck
18:11 < SrPx> ljharb: yea thanks! You solved my problem (:
18:11 < niftylettuce> therealkoopa: the module needs a little bit cleaner rewrite and a more modular API
18:11 < therealkoopa> niftylettuce: Yea, the emailTemplates(dir, ) call is tripping me up
18:11 < niftylettuce> therealkoopa: in combination with something like a CRON node script and TJ's kue (visionmedia/kue) it can be dangerous :)
18:11 < genazt> isaacs, is there a other repo for documentation ? or should i change the html output ?
18:11 < therealkoopa> I'm actually using kue to pick up email jobs.
18:11 < niftylettuce> therealkoopa: baller.
18:11 < niftylettuce> therealkoopa: kudos bro
18:12 < therealkoopa> And when I process an email job, I'd like to not do emailTemplates(dir) each tie
18:12 < therealkoopa> time
18:12 < niftylettuce> yea just have a more global type of helper function or something, you can file an issue on node-email-templates on github and ill get to it
18:12 < niftylettuce> that's something i want to do is make it more modular
18:12 < niftylettuce> e.g. like cache all the templates or something
18:12 <@isaacs> genazt: doc/api/*.markdown
18:12 < niftylettuce> similar to view caching
18:12 <@isaacs> genazt: in node
18:12 < genazt> kk thx
18:13 <@isaacs> genazt: sign the cla, etc.  thank you very much :)
18:13 <@isaacs> genazt: (ie, docs are the same as code.  follow contributing.md
18:14 < therealkoopa> niftylettuce: So it should save in some init code to load the emailTemplate obj, and store it
18:14 < dan_johnsin> Anyone use the redis module?
18:14 < niftylettuce> dan_johnsin: yea whatsup
18:14 < CoverSlide> don_jones_: shoot
18:14 < niftylettuce> dan_johnsin: connect-redis or other?
18:14 < CoverSlide> oops
18:14 < niftylettuce> therealkoopa: yea, just file an issue with that comment u just made :) <3
18:14 < genazt> well i see all classes that have a create* wrapper arent documented. is this intended ?
18:14 < berkbozkurt> asdsadasd
18:14 < CoverSlide> i meant dan_johnsin
18:14 < berkbozkurt> hi
18:14 < niftylettuce> DON JONES
18:14 < berkbozkurt> Anyone using azure?
18:14 < CoverSlide> noone uses azure
18:15 < berkbozkurt> =)
18:15 < berkbozkurt> why
18:15 < genazt> its windows :D
18:15 < CoverSlide> msft
18:15 < berkbozkurt> ahhah
18:15 < niftylettuce> micro$ux
18:15 < dan_johnsin> When I try to pass a unix socket path to createClient, it looks like it attempts to set that path as the port to connect to. Any thoughts?
18:15 < berkbozkurt> I hate windows also
18:15 < berkbozkurt> but its free for 90 days
18:15 < genazt> that makes it awesome :D:D
18:15 < SrPx> Hey guys, about browserify, as you guys are all using it. How do I use libs like processing.js or three.js, that are made for the browser, on browserify? 
18:15 < CoverSlide> also i think people have done benchmarks, and the windows port was significantly slower
18:16 < berkbozkurt> Im havinig an error
18:16 < berkbozkurt> can we share a link herE?
18:16 < CoverSlide> SrPx: you can "browserifyify" them by adding module.exports, etc
18:16 < genazt> berkbozkurt, a paste yes
18:16 < CoverSlide> SrPx: also, there's a three module in NPM just for that purpose
18:16 < berkbozkurt> http://stackoverflow.com/questions/16084338/npm-uninstall-doesnt-really-uninstall-on-azure
18:16 < berkbozkurt> windows ....
18:16 < leonvv> SrPX: Use them with node-webkit, you will have the power of a browser and of node
18:16 < berkbozkurt> or my fault I dont know. its very nooby question sorry 
18:16 < rmg> Azure has Linux VMs too
18:17 < genazt> 0.6.20 ?
18:17 < genazt> node-waf
18:17 < genazt> wtf :D
18:17 < dan_johnsin> example here:     http://pastebin.com/J7Dewm24
18:17 < CoverSlide> dan_johnsin: yeah, i've tried that. it sucks. someone needs to fix it. you need to create a net connection, then call new RedisClient manually
18:17 < niftylettuce> therealkoopa: thx nathan
18:17 < therealkoopa> np
18:17 < niftylettuce> therealkoopa: what're you working on?
18:17 < genazt> well node-waf isnt supported anymore
18:17 < dan_johnsin> CoverSlide: damn =/
18:18 < berkbozkurt> how can I delete that package
18:18 < berkbozkurt> npm uninstall
18:18 < berkbozkurt> doesnt work
18:18 < therealkoopa> niftylettuce: Writing a new project in node for my company. The project hasn't yet been released.
18:18 < berkbozkurt> I deleted locally but cant push to branch
18:18 < CoverSlide> deltree node_modules/package-name
18:18 < CoverSlide> or something
18:18  * CoverSlide shrugs
18:18 < genazt> well if a module cant be installed, you only can remove the dir to uninstall it
18:18 < dan_johnsin> CoverSlide: Do you know of an example on how to do that?
18:18 < berkbozkurt> locally its deleted
18:19 < berkbozkurt> but when I push it finds it from somewhere
18:19 < niftylettuce> therealkoopa: did you star email-templates module?
18:19 < niftylettuce> therealkoopa: im going to blast a stargazer update soon ;)
18:19 < berkbozkurt> it deleted from packages.json
18:19 < therealkoopa> niftylettuce: Define soon :)
18:19 < genazt> well if you delete a entry in package.json it doesnt uninstall it
18:19 < niftylettuce> therealkoopa: within a week or less
18:19 < therealkoopa> niftylettuce: Meaning, should I waste my time hacking something ugly so I don't have to call emailTemplates each time.
18:19 < therealkoopa> Oh ok, cool
18:20 < berkbozkurt> really need help
18:20 < genazt> you push it into the azure ?
18:20 < genazt> or onto a vcs ?
18:20 < CoverSlide> dan_johnsin: var net_client = net.createConnection(socket_path)
18:20 < CoverSlide> dan_johnsin: var redis = new redis.RedisClient(net_client)
18:20 < berkbozkurt> yea
18:21 < berkbozkurt> azure website
18:21 < genazt> can you access the node_modules dir on the azure ?
18:21 < berkbozkurt> git push azure master =)
18:21 < berkbozkurt> from ftp yes
18:21 < berkbozkurt> I deleted from there
18:21 < genazt> if you push what exact error do you get ?
18:22 < berkbozkurt> it tries to install db-mysql
18:22 < berkbozkurt> http://stackoverflow.com/questions/16084338/npm-uninstall-doesnt-really-uninstall-on-azure
18:22 < genazt> well can you try to look into the package.json on the azure
18:23 < genazt> maybe it isnt updated
18:23 < berkbozkurt> ok lookin now
18:24 < dan_johnsin> CoverSlide: get connection to undefined:undefined failed
18:27 < mscdex> why are people still passing strings for the Error parameter of callbacks?
18:27 < mscdex> this saddens me :(
18:28 < leonvv> mscdex, why is that bad ?
18:29 < mscdex> same reason why throwing strings is wrong
18:30 < leonvv> And that is ?
18:31 < genazt> because you have to care of what is thrown
18:32 < genazt> if the only type that is thrown would be an object (error) you can handle them all the same way
18:33 < vekexasia> asd
18:34 < ryanaz> does superjoe30 hang out in here?
18:37 < berkbozkurt> same error
18:37 < berkbozkurt> cant delete it
18:37 < ryanaz> Does anybody know the difference between connect-multiparty and node-multiparty ?
18:41 < kenperkins> mikeal how about I give a talk about talks to not suggest at your favorite conference
18:45 < Rhainur> hey guys, I'm trying to find out whether node.js is the right solution for a problem I have. Basically I want to keep a telnet connection open, and HTTP requests would trigger a telnet command and the response would be sent back
18:45 < mscdex> ryanaz: connect-multiparty is a middleware module that uses node-multiparty?
18:45 < Rhainur> this can't be done in PHP due to the inability to keep a connection open
18:45 < Rhainur> is such a thing possible using node.js?
18:45 < mscdex> Rhainur: sure
18:45 < Rhainur> mscdex:  can you give me some terms to google?
18:46 < Rhainur> node,js "persistent connections" returns a lot of stuff about websockets
18:46 < mscdex> Rhainur: do you mean actual telnet or just a barebones tcp connection?
18:46 < Rhainur> mscdex:  it's just a tcp connection that I write ascii too
18:46 < Rhainur> and read from
18:46 < mscdex> ok
18:47 < mikeal> kenperkins: haha, you can call it "conference proposal anti-patterns"
18:47 < rom1504> ryanaz: yes : superjoe
18:47 < Rhainur> all I want is that there should be one telnet connection that is kept alive and is used to supply data for any HTTP requests.
18:47 < Rhainur> there will only be one user so I don't need to worry about 2 commands being sent out at the same time or whatever
18:47 < mscdex> Rhainur: pretty simple really, just connect a plain socket on startup and keep it around. then just write to the socket on incoming http requests
18:48 < Rhainur> yeah while reading the tutorial that's the idea that I had
18:48 < mscdex> Rhainur: you can have as many users as you want and it won't matter. JS is single threaded
18:48 < berkbozkurt> which service do u prefer, nodejitsu or redhat openshift?
18:48 < Rhainur> but I wanted to ensure it was possible
18:48 < Rhainur> and I wasn't misunderstanding
18:49 < mscdex> yep easily possible :-)
18:49 < kenperkins> mikeal: consider it done ;)
18:49 < heath> substack: why you!
18:49 < heath> :P
18:49 < heath> https://npmjs.org/package/meteor isn't maintained anymore :(
18:50 < berkbozkurt> nodejitsu or redhat ?
18:50 < berkbozkurt> or another service?
18:51 < mscdex> heath: that's confusing... two meteor js projects ;-)
18:51 < heath> berkbozkurt: add heroku into the mix!
18:51 < mscdex> or maybe they are the same
18:51 < mscdex> :S
18:51 < heath> not to confuse you, but mainly to confuse you
18:51 < CoverSlide> um what? substack is maintaining it?
18:51 < mscdex> nobody uses meteor anyway :p
18:51 < heath> hey!
18:51  * heath uses meteor
18:52 < CoverSlide> then you must be a nobody
18:52 < mscdex> ok, it has been said there was one meteor user 
18:52 < heath> to the heart
18:52 < mscdex> :-D
18:52 < heath> there's a meteor meetup in zurich
18:52 < heath> so there's at least more of us nobodies
18:54 < heath> meteor has more likes and forks than yeoman on github
18:54 < heath> so there's that
18:54 < jeffstieler> is there anything like middleware for making http requests, rather than serving responses?
18:54  * heath stops being defensive for a second and plays with new toys that arrived
18:54 < jeffstieler> right now i just have a helper method wrapping a request() call to handle gzipped requests/responses
18:55 < petecoop> jeffstieler, superagent maybe
18:55 < tjholowaychuk> superagent doesn't have any plugin stuff but it handles gzipping
18:56 < stongo> has anyone used Hapi much?
18:56 < CoverSlide> hapi?
18:56 < CoverSlide> oh from walmart?
18:57 < ThePrimeMedian> anyone run into this.  I am trying to load /socket.io/socket.io.js in my layout file, but instead the content of the script is my 404 page
18:58 < berkbozkurt> heat im lookin heroku now thanks!
18:58 < mscdex> walmart.js
18:59 < jeffstieler> petecoop, tjholowaychuk: thanks, i'll check that out
18:59 < mscdex> require('walmart').cleanup({ aisle: 9 });
19:00 <@mbalho> require('china')().pipe(require('walmart')()).pipe(require('usa')())
19:00 <@mbalho> require('socialcommentary.js')
19:02 < niftylettuce> anyone want to rewrite this so it's pure javascript, no jQuery requirement? https://github.com/LearnBoost/antiscroll/blob/master/antiscroll.js
19:02 < master5o1> cleanup.on('aisle', ...)
19:03 < master5o1> why spaces instead of tabs?
19:03 < SargoDarya> hey guys, short question. Is there any way to change the current session? Let's say… I retrieve a page and give an URL parameter and then it should retrieve that session.
19:04 <@mbalho> SargoDarya: are you talking about cookies?
19:04 < mscdex> master5o1: because then you can have indentation that looks the same everywhere!
19:05 < stongo> CoverSlide: yeah, the hapi framework from walmart labs
19:05 < SargoDarya> mbalho: kind of. I want to be able to change the session id of the user based on the route /u/:sessionId/:secretSauce
19:06 < stongo> hapi seems quite promising. started playing around with it, and wondering if anyone else has
19:06 < SargoDarya> Flow is the following: User visits the site for the first time and gets redirected to /u/:sessId/:secretForSessId
19:08 < d2dchat> What is the best way to merge objects?
19:09 < SargoDarya> nah my approach is stupid. I guess I can do it another way
19:09 < superjoe> hi ryanaz 
19:10 < ljharb> d2dchat: Object.keys(toMergeFrom).forEach(function (key) { toMergeInto[key] = toMergeFrom[key]; })
19:11 < d2dchat> ljharb: do you typically put that in a lib or something?
19:11 < ljharb> d2dchat: sure, you could make an "extend" function
19:11 < ljharb> d2dchat: or use https://npmjs.org/package/node.extend
19:11 < ryanaz> superjoe: YO!! :) 
19:12 < d2dchat> ljharb: ah the latter is much preferred! Thx
19:12 < ljharb> ignore the browser test failures, testling's having problems
19:12 < d2dchat> ljharb: I just need it for server side anyway
19:12 < d2dchat> :
19:12 < d2dchat> :)
19:12 < ljharb> cool. it works in all those browsers :-p
19:13 < ryanaz> superjoe:  I "THINK" what I want is to use node-connect, I am using express and want to upload direct into s3 
19:13 < ryanaz> superjoe: I mean connect-multiparty
19:14 < superjoe> ryanaz, if you want to upload direct to s3, try following this example: https://github.com/superjoe30/node-multiparty/blob/master/examples/s3.js
19:14 < ryanaz> superjoe:  Right on, i just wasn't sure if connect-multiparty was better?  Couldn't tell the difference
19:15 < ryanaz> superjoe:  And also how does that play with express, because I'm already using express to do the bodyParser..
19:15 < superjoe> I don't like express bodyParser because it depends on formidable, which makes temp files whether you like it or not
19:15 < kenperkins> so theory question
19:16 < kenperkins> tests involving timeouts are susceptible to system load making them non-deterministic
19:16 < kenperkins> how do folks deal with that
19:16 < ryanaz> superjoe: I agree 100% … so does node-multiparty replace my need to bodyParser?  
19:16 < superjoe> ryanaz, yes, for multipart requests
19:17 < ryanaz> suerjoe: but I still need bodyParser for others?
19:17 < superjoe> bodyParser just merges formidable, json, and urlencoded
19:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:18 < ryanaz> superjoe:  so I can just call the json and urlencoded separately ? 
19:18 < superjoe> ryanaz, for this particular endpoint, you only expect multipart POST requests right? no other types of requests?
19:18 < kenperkins> mikeal: any reason you haven't hooked up travis for request?
19:19 < ryanaz> superjoe:  need all type
19:19 < GOMADWarrior> why sometimes an image doesn't load?
19:20 < superjoe> ryanaz, in this case you probably want something like this: app.post('/foo', [express.json(), express.urlencoded()], function(){} )
19:20 < superjoe> and then in the handler, follow the example I linked earlier
19:21 < ryanaz> superjoe:   I will give it a shot.. i saw some examples that can just replace the multipart piece of body parser to use a different handler.. 
19:21 < ryanaz> superjoe:   Can yours do that? 
19:23 < superjoe> sure. it just gives you the raw data which you can do whatever you want with
19:23 < ryanaz> superjoe:  I can use this:    app.use(express.json()).use(express.urlencoded())   and then still use your function.
19:23 < superjoe> sure that should work too
19:24 < ryanaz> cool, i'll give it a shot, thanks.
19:26 < ryanaz> superjoe:  I see a post somewhere without a complete example, what does he mean by this:   You can define your own bodyParser for multipart by doing:   require('express').bodyParser.parse['multipart/form-data'] = function yourHandler(req, options, next)...
19:29 < CoverSlide> ryanaz: exactly what it says
19:29 < CoverSlide> express.bodyParser.parse[mimeType] = handler
19:29 < ryanaz> CoverSlide: Right, but if I want to plugin node-multiparty .. how do I do that? 
19:30 < CoverSlide> ryanaz: you have to write the handler yourself
19:31 < CoverSlide> probably have to attach the streams back to the "req" object
19:31 < superjoe> ryanaz, I want to help, but it feels like you're asking me to basically write the code for you
19:32 < superjoe> that's $200/hour
19:33 < ryanaz> superjoe:  Ya I guess I assumed that you had written some modules and wanted others to use them.. so wanted some clarification of how to plug in your module into express..
19:33 < ryanaz> superjoe: ya I'm a newbie to javascript… giving it a shot..
19:34 < superjoe> ryanaz, I wish you well, I really do. But I'm gonna need you to try a little bit more before asking for help
19:34 < tjholowaychuk> CoverSlide express.bodyParser.parse was removed quite a while back i think
19:34 < tjholowaychuk> cant remember now
19:34 < tjholowaychuk> yu
19:34 < tjholowaychuk> p
19:35 < CoverSlide> oh ok
19:35 < CoverSlide> so no custom parsing?
19:35 < ryanaz> superjoe:   i understand.. no worries..   I have uploads right now working with bodyParser and uploading into amazon s3 .. and it works, I just don't like that it writes to /tmp first.
19:35 < tjholowaychuk> well just write some middleware
19:35 < berkbozkurt> node-waf error help :S
19:35 < superjoe> understood
19:35 < tjholowaychuk> same thing, that "feature" didn't make sense
19:35 < CoverSlide> right
19:36 < superjoe> ryanaz, feel free to open an issue on multiparty asking for an example for streaming directly to s3 with express. I may provide one
19:36 < ryanaz> superjoe:  cool, i'll chew on this for a bit and see if I can get it all to work.   thank you.
19:36 < tjholowaychuk> ryanaz if it works for your app you can also transfer right to s3 from the browser
19:37 < tjholowaychuk> it's a lot faster than going through node
19:37 < superjoe> does that compromise your s3 credentials?
19:37 < ryanaz> tjholowaychuk:  True, but how does that work to assign keys to users to upload stuff without giving them full credentials? 
19:37 < tjholowaychuk> superjoe nope you can sign on the server
19:38 < superjoe> interesting, that seems like maybe the best way to go
19:38 < tjholowaychuk> muuuuch faster, we used to proxy through node
19:38 < ryanaz> tjholowaychuk:  Is there an article somewhere to show how to assign keys to user / credentials? 
19:39 < tjholowaychuk> google "s3 cors" you'll have to add some config to your s3 bucket for the origin
19:40 < tjholowaychuk> http://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html
19:40 < ryanaz> tjholowaychuk:  thank you
19:40 < CoverSlide> does knox have a method to generate the signed params?
19:41 < superjoe> CoverSlide, I believe so
19:42 < kenperkins> both s3 and cloud files support direct form posting
19:42 < CoverSlide> ah i founds it https://github.com/LearnBoost/knox/blob/master/lib/client.js#L755
19:42 < tjholowaychuk> that stuff could be abstracted out i just ended up rolling one for our stuff
19:42 < kenperkins> tjholowaychuk: I'd amend, it's not about proxying through node being slow, it's about direct post scaling horizontally by the capacity of S3/CloudFiles load balancer
19:43 < kenperkins> as opposed to your apps
19:43 < tjholowaychuk> that too
19:43 < tjholowaychuk> it is also quite slow
19:43 < tjholowaychuk> through node
19:43 < kenperkins> and you don't pay double for bandwidth
19:43 < tjholowaychuk> in our exprience at least
19:43 < kenperkins> tjholowaychuk: agreed
19:43 < mscdex> use a faster multipart parser! ;-)
19:44 < CoverSlide> such as one that doesn't write to disk
19:44 < ryanaz> hah
19:44 < mscdex> like dicer!
19:44 < CoverSlide> mscdex: have you benched it compared to multiparty?
19:44 < tjholowaychuk> if node backpressure was working better that'd be fine this is 0.8.x still
19:44 < mscdex> yeah
19:45 < mscdex> https://github.com/mscdex/dicer/wiki/Benchmarks
19:45 < superjoe> backpressure works in multiparty
19:45 < tjholowaychuk> superjoe I saw your PR for that a while ago I think
19:45 < tjholowaychuk> still need to check that out
19:45 < tjholowaychuk> been super busy sorry!
19:46 < tjholowaychuk> but it looked good
19:46 < superjoe> cool, yeah take your time
19:46 < superjoe> there's a module people can use in the meantime if they want to try it
19:47 < superjoe> mscdex, wtf! if I knew this existed I wouldn't have had to waste all that time forking formidable
19:47  * superjoe stabs himself in the eye
19:47 < mscdex> :S
19:47 < ryanaz> superjoe: talking about dicer ?
19:47 < superjoe> yes
19:47 < ryanaz> lol
19:48 < superjoe> mscdex, does it do backpressure correctly?
19:48 < ryanaz> now we should do a benchmark comparison of dicer vs multiparty 
19:48 < superjoe> multiparty has the same performance of formidable. according to mscdex 's bench dicer is 2x fast
19:49 < mscdex> superjoe: i'm going to fix it up to use readable-stream
19:50 < mscdex> which should take care of all that
19:50 < CoverSlide> oh it's a fork of formidable
19:50 < CoverSlide> i see
19:51 < superjoe> CoverSlide, it's like -2,000 lines of code
19:51 < superjoe> many of which contained bugs
19:52 < ryanaz> so until I figure out the whole "upload directly into S3", is there any examples of using Dicer to upload directly into S3 instead of writing to /tmp first? 
19:52 < jeffwhelpley> I am trying to use http-proxy with restify for certain urls (i.e. something like server.get('/blah/:xyz', function(req, res) { proxy.request... })) and the problem I am having is that the server gets to the proxy.request() statement, but then it just hangs (or rather the client hangs and thus the server doesn't send back a response). I tried to listen to certain proxy events to no avail. Any 
19:52 < jeffwhelpley> suggestions on how to figure out where the http-proxy is failing?
19:54 < jeffwhelpley> @ryanaz, I am not sure about Dicer and I didn't see the beginning of your question, but I was able to stream images through a node server without saving to the file system using knox-mpu
19:57 < ryanaz> jeffwhelpley:  I'll check that out as well
20:00 < MI6> joyent/libuv: Ben Noordhuis master * 7f8130a : unix: remove src/unix/cygwin.c  The cygwin build has been broken for a lo - http://git.io/4NmHHg
20:01 < bnoordhuis> goodnight cygwin, we hardly knew ye
20:02 < DTrejo> i started on cygwin :)
20:02 < DTrejo> back in 0.1.8+
20:03 < berkbozkurt> can anyone help me about npm?
20:03 < jeffwhelpley> @ryanaz, jsfiddle isn't really appropriate for node, but just to show some example code of using knox-mpu (just copied the key piece of code): http://jsfiddle.net/7rA7y/
20:03 < superjoe> good riddance
20:03 < superjoe> @ cygwin
20:04 < superjoe> cygwin is nothing but trouble
20:04 < DTrejo> i dont miss it, just sayin
20:04 < superjoe> right-o
20:04 < ryanaz> jeffwhelpley: wow, thank you
20:05 < berkbozkurt> 37 verbose rebuild bundle /tmp/build_2pm25ui43nege/node_modules/db-mysql
20:05 < berkbozkurt> where does this path came from
20:05 < berkbozkurt> package.json doesnt include db-mysql but it installs 
20:05 < CoverSlide> it did work with cygwin in the 4.x days, although there were unofficial builds for it
20:05 < superjoe> is there anything else built on libuv besides node.js ?
20:05 < DTrejo> luvit
20:05 < CoverSlide> superjoe: luvit
20:06 < CoverSlide> plus there's tons of people who want to use it as a replacement for libev
20:06 < berkbozkurt> built on libuv?
20:06 < superjoe> with/on/whatever
20:06 < CoverSlide> there's also that msft fork of redis
20:06 < superjoe> in other words, is libuv useful for anything besides node
20:06 < CoverSlide> yeah
20:06 < jeffstieler> tjholowaychuk: looks like i'd only get the deflate for free using superagent, thanks for the heads up though!
20:07 < CoverSlide> it's a C library for doing async IO
20:07 < CoverSlide> so anytime you want async IO and you have access to C code, it would be a good choice
20:08 < superjoe> interesting
20:08 < jeffstieler> s/deflate/unzip whoops
20:10 < MI6> joyent/node: bnoordhuis created branch isaacs-review-this - http://git.io/CBkpSw
20:11 < bnoordhuis> superjoe: rust and julia use libuv
20:12 < superjoe> ah very interesting
20:14 < dimitri> Hi
20:15 < CoverSlide> hmm i need to learn me some rust
20:15 < CoverSlide> but then again, that begs the question
20:15 < CoverSlide> is rust useful for anything besides rust
20:21 < jeffwhelpley> is there any way to listen to all events on a given object?
20:22 < CoverSlide> jeffwhelpley: monkeypatch emit
20:22 < superjoe> also take a moment to reflect on whether this is really the best way to solve the problem
20:22 < jeffwhelpley> yeah...I thought about that, but not ideal...was hoping there was some other way I wasn't aware of
20:22 < jeffwhelpley> oh, it is not something I would put in prod...just something to help me debug
20:23 < superjoe> ah.
20:23 < CoverSlide> if you want to do some eventemitter gymnastics, try eventemitter2
20:23 < superjoe> maybe a conditional debugger statement
20:23 < berkbozkurt> how can npm installs a package from cache?
20:23 < jeffwhelpley> hmm, some good suggestions. I will try it out. thanks!
20:23 < zamnuts> hey there nodejs community, i could use some help isolating memory leaks in nodejs. i can't seem to find any decent tools that work with v 0.10
20:26 < bnoordhuis> zamnuts: have you tried https://github.com/bnoordhuis/node-heapdump ?
20:26 < bnoordhuis> it's what all the cool kids use
20:26 < zamnuts> yes, and I'm loading the heap snapshot in chrome devtools profiler, but the comparison option isn't working
20:27 < bnoordhuis> oh, no surprise. the chrome devtools are frequently broken
20:27 < bnoordhuis> up- or downgrading usually helps
20:27 < zamnuts> is there a specific version of chrome or any webkit devtools that will work/
20:28 < bnoordhuis> 24 worked okay for me. haven't tried it with 25 or 26, truth be told
20:28 < zamnuts> yea i'm on 26 right now
20:29 < zamnuts> i'll give 24 a shot, thanks much. i'll report back
20:29 < bnoordhuis> good luck :)
20:29 < berkbozkurt> how can npm installs a package from cache?
20:31 < zamnuts> @berkbozkurt, try using the --no-registry switch: npm install package --no-registry
20:32 < zamnuts> I haven't used it, but it sounds like it should work
20:34 < toad-br> some one have mongoosejs pre save example to detect save if is create or update?
20:34 < superjoe> I'm porting mutagen to node if anyone wants to join the effort: https://github.com/superjoe30/nodagen
20:34 < superjoe> it's at a point where all tests are either pending or passing and there's enough framework that you can jump in
20:34 < berkbozkurt> @zamnuts im trying to uninstall
20:35 < berkbozkurt> @zamnuts when I push to heroku it says node-waf failed. db-mysql packages uses it and I need to remove it. 
20:36 < zamnuts> @berkbozkurt, just making sure: node-waf is not available on windows, you're not on windows, right?
20:36 < berkbozkurt> right
20:37 < zamnuts> @berkbozkurt, and npm uninstall node-waf doesn't work?
20:37 < zamnuts> or, what are you trying to remove, b/c your previous question talked about installing frome cache (as opposed over HTTP)
20:37 < berkbozkurt> @zamnuts name of the package is db-mysql
20:38 < berkbozkurt> when I push to heroku it tries to install db-mysql
20:38 < berkbozkurt> I deleted it from both node-modules and package.json
20:38 < berkbozkurt> But it finds it from cache
20:39 < zamnuts> and you want to remove it from cache?
20:39 < berkbozkurt> yes
20:39 < zamnuts> what OS?
20:39 < berkbozkurt> local:Macos
20:40 < zamnuts> did you try "npm cache clean" ?
20:40 < berkbozkurt> using heroku
20:40 < berkbozkurt> no 
20:40 < berkbozkurt> im trying
20:41 < dypsilon> Hi! What library/framework would you recommend for testing REST apis? Also I have Hapi, so I'm able to "inject" a request directly, minding HTTP.
20:41 < zamnuts> @berkbozkurt, you can see what directory your local cache uses with the ls option: "npm cache ls"
20:41 < zamnuts> or simply "npm help cache" would give you a man page
20:42 < nickplee> Trying to research the best way to hit a 3rd party API with node.  I've decided the general flow should be hit my server->check db->return if found, otherwise hit api->store in db->return what was found
20:42 < nickplee> Would a simple callback make sense for such a scenario?
20:42 < nickplee> or would websockets make more sense?
20:42 < zamnuts> @dypsilon, what about the "Advanced REST client" extension for chrome?
20:43 < dypsilon> zamnuts, thank you, I mean automated tests.
20:43 < zamnuts> @dypsilon, as in unit testing? node-unit
20:44 < berkbozkurt> @zamnuts now it tries to install from 'verbose rebuild bundle '
20:44 < dypsilon> zamnuts, not really unit testing, more integration testing, since I want to test the whole api including database and other "units".
20:44 < berkbozkurt> @zamnuts then gives the path '/tmp/build_33f9fzhx16k0v/node_modules/db-mysql' but I cant go into it
20:44 < berkbozkurt> @zamnuts npm cache ls directory is clean
20:44 < zamnuts> @dypsilon, so closer to continuous integration; I've always used jenkins, but that's for java and php, haven't tried for nodejs yet, sorry :(
20:45 < dypsilon> zamnuts, thank you anyway, will ask later again..
20:48 < zamnuts> @berkbozkurt the /tmp/build_* is left over from a failed build that usually gets cleaned up, that dir won't do you any good anyway
20:50 < zamnuts> @berkbozkurt, does the app you're deploying require db-mysql?
20:51 < zamnuts> it really wants to install it lol
20:51 < berkbozkurt> @zamnuts thanks anyway this db-mysql get stucked on
20:51 < DaMorpheuS> question : can i send a session cookie cross domain?!? it's seems not working
20:51 < berkbozkurt> @zamnuts no Im trying to survive from that
20:52 < zamnuts> @DaMorpheus, you can share the "cookie" resource from server to server if it is set up for resource pooling/sharing, but on the client side, forget it: http://stackoverflow.com/questions/3342140/cross-domain-cookies
20:54 < kenperkins> isaacs: have a minute for a wierdness I'm seeing with mikeal's request?
20:54 < zamnuts> @berkbozkurt, sorry, i'm not on a mac, but try "stat /tmp/build_33f9fzhx16k0v/node_modules/db-mysql" to see if you can access it, then with an escalated CLI you should be able to "rm -fr /tmp/build_33f9fzhx16k0v/node_modules/db-mysql"
20:55 < zamnuts> @berkbozkurt, if i'm way off base, tell me to shut up :)
20:56 < berkbozkurt> @zamnuts no you are really close to topic
20:56 < berkbozkurt> @zamnuts thanks for your help again and again =)
20:58 < zamnuts> @berkbozkurt, I guess mac os uses "sudo" just like any other *nix os for root escalation, just be careful ;)
20:59 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:03 < berkbozkurt> @zamnuts I made it D:
21:03 < berkbozkurt> @zamnuts rm -rf .git then created again thats all thanks to this community
21:10 < superjoe> kenperkins, why would you ask someone unrelated about someone else's module?
21:10 < kenperkins> superjoe: was trying to figure out some of the semantics inside of pausing and resuming streams in the 0.8 world
21:11 < kenperkins> was seeing inconsistent results when posting fs.createReadStreams to a webserver
21:11 < kenperkins> problem disappeared with 0.10 :S
21:11 < zamnuts> @bnoordhuis, tried chrome version 23.0.1271.91 and 24.0.1312.52 - no dice on heapdump comparison.
21:14 < zamnuts> @berkbozkurt, sorry dropped off for a minute, everything cool?
21:18 <@isaacs> kenperkins: so what you're saying is that I fixed your bug?  you're welcome :)
21:18 < kenperkins> ha
21:18 <@isaacs> kenperkins: what's up?
21:19 < kenperkins> isaacs: trying to figure out of there's some kind of race condition on 0.8 streams, but I'm struggling to figure out how to narrow it down
21:19 <@isaacs> superjoe: i've actually written a bunch of patches for request, and use it pretty deeply, and have for a long time, and i'm all over the http code.
21:19 <@isaacs> superjoe: so it's a fair request :)
21:19 < superjoe> fair enough
21:20 < kenperkins> isaacs: I'm getting inconsistent test results with this line: https://github.com/mikeal/request/blob/master/tests/test-form.js#L13
21:20 < kenperkins> sometimes the file is posted to the request, sometimes not
21:20 < kenperkins> the data of the file never comes through the req.on('data') handler
21:21 < kenperkins> v0.10 doesn't manifest
21:23 < berkbozkurt> @zamnuts everything cool
21:24 <@isaacs> kenperkins: that's weird.  i'd suggest posting a bug to mikeal/request/issues
21:25 < kenperkins> :)
21:26 < kenperkins> I'll try to factor it out
21:41 < Domenic_> Does anyone know what tap means when it says "~"??
21:42 < nooga> are EventEmitter listeners bound to the emitter?
21:43 < nooga> i mean ob.on('event', function() { this /* <-- what's this? */ })
21:43 < MI6> joyent/libuv: Bert Belder master * ffe2ef0 : windows: deal with the fact that GetTickCount might lag  We use GetQueued - http://git.io/5rHZAQ
21:45 < howdynihao> nooga: it's null
21:46 < howdynihao> if i remember correctly
21:46 < howdynihao> wait wait no thats not right
21:47 < howdynihao> nooga: it's the event emitter itself
21:47 < howdynihao> or, the object that inherits it
21:48 < MI6> joyent/node: Ben Noordhuis v0.10 * a835a2f : website: add link to nightlies on download page - http://git.io/msj7Zg
21:59 -!- mode/#Node.js [+o sblom] by ChanServ
22:01 < CoverSlide> js> ,function(){console.log(this)}.call(null)
22:01 < purr> CoverSlide: SyntaxError: Unexpected token ,
22:01 < CoverSlide> js> 0,function(){console.log(this)}.call(null)
22:01 < purr> CoverSlide: undefined; Console: {}
22:02 < CoverSlide> js> 0,function(){console.log(this == global)}.call(null)
22:02 < purr> CoverSlide: ReferenceError: global is not defined
22:02 < CoverSlide> hmm
22:02 < othiym23> purr is sandboxed
22:02 < CoverSlide> js> var global = function(){return this}();0,function(){console.log(this == global)}.call(null)
22:02 < purr> CoverSlide: undefined; Console: true
22:02 < CoverSlide> yeah i know
22:03 < CoverSlide> just showing that this can never be null
22:03 < othiym23> it can be if 'use strict' is in effect
22:03 < CoverSlide> true
22:03 < CoverSlide> i hardly think in strict mode
22:04 < zamnuts> @nooga, try this.__proto__ or this.prototype to see what it is, a simple console.log will reveeal it
22:04 < Bubo> Hi
22:04 < othiym23> I write all my code in strict mode, but that's because it spends all its time running other people's code, so I really can't be monkeying with their environments too much
22:05 < zamnuts> @nooga, alternatively console.log(this.constructor == EventEmitter); should help
22:05 < CoverSlide> oh i put 'use strict' in all my scripts, i just don't really know all the things that it does
22:08 < ryanaz> CoverSlide: perl? 
22:08 < ryanaz> Does javascipt have strict mode? 
22:10 <@isaacbw> it sure does
22:10 < ryanaz> nice.
22:11 < ryanaz> I'm guessing it works the same as perl, it makes you define a variable before you can use it? 
22:11 < zamnuts> @ryanaz https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode
22:16 < stagas> it should be named: "save me from myself"
22:17 < hackedy> https://github.com/joyent/node/pulse :O
22:18 < zamnuts> ok, i'm querying again about heap profiling. what tools are out there that work with v 0.10. currently I'm using node-heapdump, but cannot get comparisons to work in chrome (tried with v 23, 24 and 25).
22:23 < MI6> joyent/node: Ryan Doenges v0.10 * 6101eb1 : assert: put info in err.message, not err.name  4716dc6 made assert.equal( - http://git.io/BT0V5w
22:26 <@mbalho> hackedy: WOOT
22:26 <@mbalho> hackedy: Your Skill In Contributing To Node.js Has Increased To 1
22:32 < s3shs-> If I have an object with a bunch of functions in it, and I "extend" another structure with it, it's just copying function pointers, right?  Not the whole string of the function, right?
22:32 < s3shs-> (Is it zippy or slow?(
22:32 < s3shs-> ))
22:32 < faceleg|work> any vim minibuffexplorer people here?
22:32 < faceleg|work> how the hell do I change windows ...
22:33 < othiym23> s3shs-: yeah, it copies references to the functions, and doesn't clone the text of the functions
22:33 < s3shs-> Thank you for the sanity check.  :-)
22:33 < mscdex> faceleg|work: try WindowBlinds? ;-)
22:35 < zamnuts> @s3shs-: jQuery's extend allows for a deep copy.
22:35 < zamnuts> which will not copy the pointers
22:35 < s3shs-> I was actually hoping for a reference copy only, but thank you.
22:35 < zamnuts> mkay, np
22:35 < othiym23> zamnuts: URL?
22:35 < zamnuts> http://api.jquery.com/jQuery.extend/
22:35 < s3shs-> I also saw recently that lodash has a deep copy.
22:36 < othiym23> zamnuts: you actually have it backwards: deep copy will recursively copy the properties of the objects, which will definitely also copy references to functions
22:36 < othiym23> I can think of only very weird edge case situations where you'd want to make textual copies of functions instead of references to closures
22:38 < mscdex> CoverSlide: Dicer now uses streams2 streams!
22:41 < zamnuts> othiym23, it copies the function: http://jsfiddle.net/nkFDZ/
22:43 < zamnuts> removing the first arg (true) of jQuery.extend produces 2 "b" lines in the console, showing that it is referencing the function of the original object, while mantaining true as the first arg ouputs a and b in the console
22:43 < mscdex> zamnuts: it doesn't copy the text of the function, just copies the reference
22:46 < zamnuts> perhaps I don't understand the difference between "text of a function" and "copies of a reference" - a true reference will change the value in all cases where there is a pointer
22:46 < d2dchat> what is the most widely used aws or s3 library?
22:47 < d2dchat> aws-sdk?
22:47 < hackedy> mbalho: LEVEL UP
22:48 < d2dchat> looks like it https://github.com/aws/aws-sdk-js
22:49 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:49 < othiym23> zamnuts: reading the documentation, I don't think that call to extend is doing what you think it's doing ;)
22:50 < s3shs-> So what Chrome debugging/node related plug-ins do you guys like?  (I'd love something that would refresh the node-inspector tab when I restart node.)
22:51 < othiym23> s3shs-: I don't even use node-inspector anymore
22:51 < othiym23> it's actually faster for me to just use node debug most of the time now
22:52 < othiym23> I tend to keep longjohn handy, and trycatch can be useful when domains aren't doing the trick for me
22:52 < zamnuts> s3shs: i use eclipse IDE for debugging node, stepping, inspector, expressions, interactive console
22:53 < mscdex> zamnuts: the jquery extend without deep copy does not bother copying object properties of child objects. with deep copy, it will recursively go through child objects and copy object properties
22:54 < mscdex> zamnuts: so if a particular property value is a function, a reference is always copied when using the assignment operator
22:54 < zamnuts> othiym23: i need to settle this deep extend conversation for own sanity, i have put together a jsfiddle showing that a deep extend works? what am I missing?
22:55 < mscdex> zamnuts: a function can have properties too, and those will be copied, but the body of the function is shared
22:55 < othiym23> zamnuts: if you only provide the deep argument and one additional argument, it copies the properties from the argument onto jQuery itself
22:55 < othiym23> zamnuts: "If only one argument is supplied to $.extend(), this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, you can add new functions to the jQuery namespace. This can be useful for plugin authors wishing to add new methods to JQuery."
22:55 < mscdex> zamnuts: so the only way you do a true copy of a function is using the likes of eval() or `new Function(args, body);`
22:56 < mscdex> zamnuts: doing one of those two will ensure that `origFn !== newFn`
22:57 < othiym23> mscdex: thank you, you did a much better job of explaining what I was getting at than I did
22:57 < zamnuts> mscdex: that makes more sense, got a boolean true when comparing
22:57 < zamnuts> i feel let down :(
22:57 < mscdex> heh
22:58 < mscdex> sharing is caring!
23:00 < aleksandar> Hey guys, I got the wierdest error ever.
23:00 < RyanNielson> Is there a way to get server variables in your client side javascript? Basically I want socket.io to connect to a different port when it's deployed versus locally. I have var socket = io.connect('http://localhost:3000'); right now.
23:00 < mscdex> aleksandar: i dunno, i've seen some pretty weird errors in my time ;-)
23:00 < aleksandar> I can do x(10); but if i do for(i=0;i<10;i++) { x(10) } it bugs the crap out, is anyone familiar with a similar problem?
23:00 < aleksandar> I will link it in a moment
23:00 < mscdex> RyanNielson: serve up your html using a template?
23:01 < RyanNielson> mscdex: Any resources out there for doing that in express? You thinking just make that javascript inline in the template itself and server it that way?
23:02 < mscdex> RyanNielson: use a templating language like ejs or some such, render the result, send the result to the client in the response
23:03 < aleksandar> mscdex, please ignore any comments, bad code. http://ideone.com/eFa6aG
23:04 < RyanNielson> mscdex: Cool, I'll give that a shot. Thanks
23:04 < aleksandar> mscdex, if you put decToBase(10); in the for-loop it will just break the whole program
23:04 < aleksandar> but if you write decToBase(10);decToBase(10);decToBase(10);decToBase(10);decToBase(10); it doesnt
23:04 < aleksandar> (outside the loop)
23:05 < zamnuts> RyanNielson, you could set the environment variable (NODE_ENV) when starting node, this can be read within process.env.NODE_ENV
23:05 < aleksandar> decToBase(10); leads to a recursive function, do you think that would be it?
23:06 <@mbalho> every time I use Math.abs() I think "bro, do you even lift?"
23:06 < mscdex> aleksandar: this is unrelated, but you can rewrite your retVal function to be a lot smaller :-)
23:06 < othiym23> mbalho: not everyone has a ripped 10-pack like you
23:06 <@mbalho> math abs are the new beer belly
23:07 < aleksandar> Yes i know, but I am in a hurry kinda and I couldn't figure out how to at first.. Also I think I did have a short version of it that also bugged out
23:07 < RyanNielson> zamnuts: Cool, I'll look into that. Thanks
23:07 < aleksandar> thats why i hardcoded
23:08 < aleksandar> mscdex, you can see below, I wrote /* Detta buggar för nån orsak.
23:08 < aleksandar> function retVal(str) {
23:08 < aleksandar> "this is bugging out"
23:09 < aleksandar> this happends, when you put the decToBase(10) in the forloop
23:09 < aleksandar> http://ideone.com/NqaDEQ
23:09 < aleksandar> I recreated this on my computer and on Ideone.
23:09 < aleksandar> so I'm either doing something wrong or I found a bug
23:10 < aleksandar> http://ideone.com/7XcYac I added this to prove my point.
23:11 < othiym23> aleksandar: on line 3, change it to for (var i = 5; i < 10; i++)
23:11 < othiym23> you're leaking i into the global context
23:11 < mscdex> yeah ^
23:11 < aleksandar> where? >.<
23:11 < aleksandar> i mean i know where the error is at
23:11 < mscdex> aleksandar: you're not defining i in test()
23:12 < zamnuts> line 3, is missing the "var" keyword
23:12 < othiym23> run that bad boy through jslint or jshint
23:12 < mscdex> so it's assuming you want to assine to a global i
23:12 < aleksandar> oh!
23:12 < mscdex> and you use the same i in other functions
23:12 < othiym23> http://ideone.com/WHgTRz
23:12 < aleksandar> thanks.
23:12 < mscdex> :-)
23:12 < aleksandar> you are right
23:12 < aleksandar> meh, i screwed up on this one, I had a feelin i had to write "var"
23:12 < mscdex> yeah jshint to the rescue!
23:12 < aleksandar> but i didn't for some reason, and just continued on..
23:14 < aleksandar> i luv u
23:14 < aleksandar> and the error is not at "that" location, it's deeper down, but it helped me alot
23:25 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:26 < MI6> joyent/node: isaacs master * 0bccb34 : Merge remote-tracking branch 'ry/v0.10' (+2 more commits) - http://git.io/zsCiJg
23:30 < GOMADWarrior> are there websites for hosting node.js?
23:31 < aleksandar> servers?
23:31 < GaryOak_> haha
23:31 < GOMADWarrior> like this nodester
23:31 < GOMADWarrior> has anyone used it?
23:32 < CoverSlide> nodester got bought forever ago
23:32 < CoverSlide> they're not dotcloud i think
23:32 < CoverSlide> *now
23:32 < substack> appfog
23:32 < CoverSlide> er no, appfog
23:32 < CoverSlide> right
23:33 < tds5016> hey. I was wondering if someone could help me. I am sending a base64 encoded ur to the server.
23:33 < aleksandar> mscdex, othiym23, thanks alot again, you can recheck http://ideone.com/7XcYac#view_edit_box and you'll see what the purpose of the project is. I am making a algoritm where I can control what the maximum value of each digit. I can basically make 100000 - 1 turn into hello, or any other X length letter combination
23:33 < CoverSlide> some type of water vapor
23:33 < tds5016> can someone help me figure out how to write the uri as a pdf file, and then to send the pdf back out?
23:33 < GOMADWarrior> nodester.com is up
23:33 < CoverSlide> GOMADWarrior: "We now support Node.JS versions 0.4.12, 0.6.12, and 0.6.17"
23:34 < GOMADWarrior> oh it redirect to appfog
23:34 < GOMADWarrior> is appfog gratis?
23:35 < CoverSlide> there's a free tier
23:35 < CoverSlide> go read their page
23:45 < GOMADWarrior> what is cloud computing?
23:47 < bnoordhuis> harnessing the entropy in water vapour for calculations?
23:47 < GOMADWarrior> LOL
23:52 < tds5016> is it possible to send a datauri as a file with node?
23:52 < tds5016> for example... res.sendFile(dataURI);
23:52 < tds5016> (ps. I'm using express)
23:53 < GOMADWarrior> whats better, appfog or nodejitsu?
23:55 < GOMADWarrior> oops, nodejitsu isn't free
23:55 < GOMADWarrior> only 30 days trial
--- Log closed Fri Apr 19 00:00:48 2013
