--- Log opened Sat Mar 16 00:00:22 2013
00:03 < jonaslund> haha
00:03 < jonaslund> you guys saw this?
00:04 < jonaslund> ogs2013.jlongster.com/
00:04 < jonaslund> http://ogs2013.jlongster.com/
00:04 < othiym23> so has anyone here played with Sails yet?
00:04 < othiym23> it sounds like it could be cool, could be hella lame
00:04 < othiym23> been too busy to take a look at it yet, though
00:04 < azylman_> Looks interesting, has too much magic for me
00:05 < kenperkins> cTIDE_: it seems that nock is pretty awesome
00:05 < kenperkins> not sure it's worth updating fakeweb
00:05 < kenperkins> (from my perspective)
00:08 < cTIDE_> yeah, it's def much more full featured
00:08 < kenperkins> fastest unfollow ever: @npmupdates
00:09 < othiym23> DRINK FROM THE FIREHOSE
00:13 < Havvy> So, I'm thinking of making a function 'wire' that takes an object and a method/method-name-on-object, and returns an EventEmitter that emits 'data' events with the return value of the method. Does this sound anything at all like a good idea?
00:14 < othiym23> so, sort of an observer?
00:14 < Havvy> Yeah.
00:14 < othiym23> sounds a little heavyweight
00:14 < othiym23> what's the use case?
00:15 < Havvy> Making it so that not all my objects are event emitters.
00:16 < Havvy> I could also mutate the object too...
00:16 < othiym23> it also sorta sounds like you've got the seed of an object stream in there
00:17 < othiym23> your idea doesn't sound terrible, but it doesn't sound super idiomatic, either
00:17 < Havvy> Yeah. I've got six or so Event Emitters that feed into each other.
00:17 < Havvy> But half of those really do not need to be event emitters.
00:18 < Havvy> They are just event emitters because I'm wiring them together through event passing.
00:29 < kenperkins> the users "so" and "also" can't be real unless they have alerts turned off
00:29 < kenperkins> otherwise you'd go bonkers
00:42 < sinclair> hi everyone
00:42 < sinclair> what is that half-life symbol prompt i see in some tutorials?
00:43 < absolutezeroff> lambda?
00:43 < sinclair> yeah?
00:43 < absolutezeroff> just joined not sure what tutorials you mean
00:43 < sinclair> doesn't matter 
00:43 < sinclair> what makes the lambda show up and why?
00:44 < sinclair> is it just a customized prompt or what?
00:47 < niggler> its in readline
00:49 < Havvy> The lambda is there because it signifies programming power. ;)
00:49 < niggler> λ
00:49 < niggler> there we go
00:49 < sinclair> hehe
00:49 < Havvy> λx.xxλx.xx
00:49 < sinclair> so no real reason for it?
00:50 < niggler> sinclair require("repl").start({  prompt: "λ ",  input: process.stdin,  output: process.stdout});
00:50 < niggler> save that in a file and run it with node
00:50 < korilo> is visionmedia/n for macos too?
00:50 < niggler> did you try korilo ?
00:51 < korilo> nha lol i'm on ubuntu since a while now but will switch to osx soon
00:51 < korilo> just asking
00:51 < niggler> id imagine so, given they are similar
00:52 < korilo> all right thanks (don't know why i wasn't sure it would work)
00:56 < Havvy> sinclair: Google "Lambda Calculus" at some point.
00:57 < Virunga> Hi korilo
00:57 < sinclair> Havvy: ok still can't understand the connection to node.js though
00:57 < Virunga> >> o = {}; Object.getOwnPropertyDescriptor(o, 'constructor')
00:57 < purr> Virunga: undefined
00:58 < Virunga> Could anyone tell me why undefined?
00:58 < Havvy> The lambda calculus is the foundation of scheme/lisp -- the language which Brenden Eich grabbed anonymous functions from.
00:58 < Havvy> o.constructor
00:58 < Havvy> >> o.constructor
00:58 < purr> Havvy: ReferenceError: o is not defined
00:58 < Havvy> ...
00:58 < Havvy> >> ({}).constructor
00:58 < purr> Havvy: (function) Object
00:59 < Havvy> Ah. Because it's not a property on o.
00:59 < Havvy> It's a property on o.prototype (which happens to be Object.prototype)
00:59 < Havvy> Object.getOwnPropertyDescriptor(o.prototype, 'constructor')
00:59 < Havvy> >> Object.getOwnPropertyDescriptor(o.prototype, 'constructor')
00:59 < purr> Havvy: ReferenceError: o is not defined
00:59 < Havvy> >> Object.getOwnPropertyDescriptor(Object.prototype, 'constructor')
00:59 < purr> Havvy: (object) {configurable: true, enumerable: false, value: (function) Object, writable: true}
01:00 < Virunga> Logic. Thanks :)
01:01 < sinclair> so would everyone call me a nutty if i wrote a webcrawler in node? :P
01:01 < Havvy> sinclair: You wouldn't be the first or the last.
01:02 < kornnflake> any idea how to ping ips?
01:04 < sinclair> kornnflake: http://stackoverflow.com/questions/4737130/how-to-ping-from-a-node-js-app
01:07 < ningu> hmm. ST2 seems pretty awesome
01:11 < sinclair> good night everyone
01:19 < Jmaster> what I do in ubuntu?
01:24 < ningu> Jmaster: ?
01:39 < willwh> install debian :P
01:39 < willwh> lol
01:39 < willwh> I don't like the ubuntu has gone at all :/
01:39 < willwh> way*
01:39 < willwh> ningu: I did a /lastlog - maybe a mis tell?
01:39 < niggler> debian is awesome
01:40  * niggler <3 debian
01:40 < willwh> yes it is
01:40 < willwh> all my vps' are debian :D
01:49 < ningu> what don't you like about ubuntu?
01:56 < jrajav> Too mainstream.
01:56 < korilo> ningu and with Ternjs plugin ST2 will be awesome
01:57 < ningu> korilo: what does that do?
01:57 < korilo> ningu, ternjs.net
01:57 < korilo> take a look
01:57 < korilo> ;)
01:57 < ningu> ok
01:59 < ningu> korilo: can't really tell what the status is from that page.
01:59 < ningu> as in, how soon it might be ready
02:00 < korilo> i think another month or 2...don't know 
02:01 < korilo> someone asked the author (somewhere) and he said that (prolly 1 month, i hope)
02:01 < ningu> cool
02:01 < korilo> he's coding the emacs plugin now, then vim, then ST2/ST3 and maybe webstorm
02:02 < deoxxa> creationix: MAKE THAT GIT THING
02:02 < owen1> installing node from source. do checkout the tag or the branch?
02:04 < korilo> owen1, checkout if you're updating
02:04 < owen1> korilo: first install on my debian
02:05 < owen1> korilo: i don't see a tag 0.10 but i do see a branch
02:05 < korilo> then git clone nodeblabla && cd node && ./configure && make install
02:05 < owen1> actualy i see origin/v0.10.0-release
02:05 < korilo> when you cloned the repo?
02:05 < owen1> korilo: ho. so install from master?
02:06 < korilo> sure
02:06 < owen1> i cloned it a minute ago
02:06 < owen1> cool
02:06 < korilo> master is 0.10.0 (unless i missed how git really works)
02:07 < owen1> i don't underastnd why every project don't have VERSION file
02:07 < owen1> so i can cat VERSION
02:08 < ningu> cat version: canhascheezburger 2.1
02:08 < korilo> when you'll need to upgrade node (from source) just do: git fetch && git checkout v0.12.0 && configuremakeandtherest
02:15 < owen1> korilo: got it. thanks
02:20 < cloudbender> Hello from the great white north. made it across the ice.
02:26 < MI6> joyent/node: Nao Iizuka master * 94284e7 : readline: handle wide characters properly  Handle wide characters (such a - http://git.io/0fdydw
02:27 < azylman> cloudbender: Stay away from the great white north, it is a silly place
02:28 < cloudbender> This is us blasting for our new airstrip.  Pretty cool.
02:28 < cloudbender> http://www.facebook.com/photo.php?v=10200879094567994&set=vb.158067797540894&type=2&theater
02:29 < cloudbender> Not spamming promise.
02:29 < azylman> Oh, man, that's REALLY great white north
02:29 < azylman> Canada!
02:29 < niggler> why is there no js version of pygments
02:34 < samholmes> I'm asking here because I know some of the folks at browserling.com came upon this issue (*cough cough* substack *cough cough*): Anyone know how to optimize a windows 7 installation to use the least amount of resources in a VM?
02:35 < cloudbender> Snow bath tomorrow noon -20C forecasted.  I'm gonna have some frosty taters.
02:35 < samholmes> I'm running Win7 in VirtualBox in OSX, but I only has 4GB of memory. Which is an issue when developing and testing.
02:36 < niggler> samholmes have you tried fusion?
02:36 < samholmes> niggler: Doesn't VMWare?
02:36 < samholmes> -Doesn't
02:37 < samholmes> Doesn't VMWare cost greenbacks?
02:37 < niggler> i meant that have you tried it with 1GB
02:37 < niggler> heh good point
02:37 < ningu> I know so many people who use parallels or vmware and are surprised when I ask why not use virtualbox?
02:37 < ningu> for some reason no one has heard of it
02:38 < niggler> forgot that I got this from a vmware event
02:40 < samholmes> Is vmware faster than VB?
02:40 < niggler> in my experience yes
02:41 < niggler> ymmv
02:41 < samholmes> ymmv/
02:41 < samholmes> ?
02:41 < niggler> your mileage may vary
02:41 < niggler> also, why not get a new mac?
02:42 < willwh> ningu: seriously? (re: cbox)
02:42 < willwh> vbox*
02:42 < niggler> its a tax deductible expense, and in NY you can use ST121.3 for sales tax exemption
02:42 < willwh> I'm surprised - I use it on a lot of systems <3
02:44 < samholmes> eventually a new mac
02:44 < samholmes> I did this http://osxdaily.com/2011/09/04/internet-explorer-for-mac-ie7-ie8-ie-9-free/
02:44 < niggler> they fixed the fan issue with a firmware push
02:45 < niggler> wow that sucks
02:45 < samholmes> niggler: Fan issue?
02:45 < niggler> i just use windows xp mode in windows 7 for IE 6-8
02:45 < samholmes> what sucks?
02:45 < niggler> samholmes there was a problem where the fan would go off on the 15" retina MBPs
02:45 < niggler> no temperature issue, nothing
02:45 < niggler> it would howl
02:45 < samholmes> ah
02:45 < samholmes> cool
02:45 < samholmes> I don't have a retina
02:45 < niggler> but it was fixed yesterday with an SMC update
02:46 < niggler> oh man its beautiful
02:46 < samholmes> But isn't the Pixel more ppi?
02:46 < niggler> running at 3840x2400
02:46 < owen1> korilo: master branch installed v0.11.0-pre
02:47 < samholmes> niggler: What sucks tho?
02:47 < niggler> oh that solution sucks
02:47 < niggler> just set up xp mode
02:48 < samholmes> niggler: is it cause I have xp and win7 snapshots?
02:48 < niggler> what i meant was, in windows 7 you can run a thing called xp mode http://windows.microsoft.com/en-ID/windows7/products/features/windows-xp-mode
02:51 < samholmes> What's so much better about tis?
02:52 < samholmes> I already have XP
02:52 < niggler> no 30 day limit
02:53 < samholmes> I don't have windows 7 either
02:53 < niggler> bizspark
02:54 < niggler> http://www.microsoft.com/bizspark/
02:58 < samholmes> so by signing up to this I get a free copy of windows 7?
02:58 < niggler> you get a free copy of a ton of stuff
03:00 < ningu> willwh: yes, generally people who aren't programmers but are technical enough to try to install windows on their mac
03:00 < samholmes> niggler: so you just run vmware fusion with windows 7?
03:00 < samholmes> which you got from microsoft for free..
03:00 < niggler> yeah samholmes 
03:00 < samholmes> what about windows 8?
03:01 < samholmes> IE 10
03:01 < niggler> they also offer windows 8 pro
03:01 < niggler> and i have a separate vm of windows 8 with IE10
03:01 < samholmes> Does that run in VMWare?
03:01 < niggler> yeah
03:01 < samholmes> That's cool
03:01 < niggler> though now i think it also runs in bootcamp
03:01 < samholmes> how many GB of RAM your Mac have?
03:01 < niggler> seriously?  also is logged in?
03:01 < niggler> 4GB
03:02 < samholmes> Ah, so no different from me.
03:02 < samholmes> Does your mac ever get bogged down?
03:02 < niggler> it gets bogged down by other stuff
03:02 < niggler> thousands of chrome tabs
03:02 < samholmes> Mine gets warm and the fan goes nucking futs!
03:02 < niggler> that happens at time
03:02 < niggler> *times
03:03 < niggler> have you considered just upgrading the memory if its a problem?
03:03 < samholmes> yes
03:03 < samholmes> I will do that eventually cause me likes ram
03:03 < niggler> http://www.macsales.com/ is pretty good
03:03 < ningu> I wonder why they top out at 8gb
03:04 < ningu> hardware issue maybe
03:04 < niggler> ? the rMBP I'm using now has 16
03:04 < ningu> oh, there's a 15-inch one with 16
03:05 < niggler> the $2800 one has 16 out of the box
03:05 < samholmes> niggler: How far back do you test IE?
03:06 < niggler> samholmes IE6 (which is a bit masochistic for JS stuff but it keeps me more honest than using chrome or safari)
03:07 < samholmes> o.o
03:07 < ningu> what sort of stuff do you have to do in JS for it to work in IE6?
03:07 < samholmes> not to mention all of the CSS hacks
03:07 < samholmes> ugh
03:07 < niggler> well I do very little CSS stuff
03:07 < niggler> its mostly JS
03:07 < ningu> I prefer to run my browser in quarks mode
03:08 < samholmes> I'd gladly display a big FUCK YOU message to anyone who is using IE6 still.
03:08 < ningu> it can't be a large percentage of users
03:08 < niggler> for example, http://niggler.github.com/js-xlsx/ works in IE6 if you paste a base64-encoded file there (the file API doesn't work in IE6)
03:08 < samholmes> ningu: therefore not a large percentage of messages. :)
03:13 < niggler> css and html are horrendous, but pure JS is fairly standard
03:13 < ningu> ah ok
03:14 < ningu> I was curious cause I hadn't heard anything special about it
03:14 < ningu> but I use jquery to paper over implementation differences anyway
03:17 < ningu> uh oh. my git is in detached head state... this feels disturbing.
03:17 < niggler> if you had to choose something to have a detached head, I'm sure you'd prefer git over the alternatives lol
03:18 < deoxxa> ningu: quick! attach it again! `got checkout -b new-head'
03:18 < deoxxa> *git
03:18 < ningu> hehe
03:18 < ningu> it was actually intentional, following the angular tutorial
03:18 < ningu> but I had never seen that msg before
03:18 < deoxxa> lol
03:18 < deoxxa> yeah
03:23 < ningu> hrm... so according to this: http://www.w3.org/TR/html-markup/syntax.html#syntax-attr-empty
03:23 < ningu> in html5 you can have attributes with no = or value
03:23 < ningu> equivalent to =""
03:23 < ningu> but I'm not sure that's valid xml
03:23 < ningu> apparently it is not
03:24 < ningu> so does that mean html5 is not meant to be xml-compliant? that's hard to believe
03:24 < niggler> why ningu?
03:24 < niggler> I'm pretty sure there's an xhtml5
03:24 < ningu> niggler: it came up because I saw attributes like that in angular, but I'm just curious
03:24 < niggler> !g xhtml5
03:25 < niggler> look at that https://en.wikipedia.org/wiki/HTML5#XHTML5
03:25 < ningu> oh, I'm surprised they still permit a non-xml version of html
03:26 < ningu> several years ago at least the plan was for newer html standards to be fully xml
03:26 < niggler> 'checked' is very common
03:26 < ningu> hence the term "transitional"
03:26 < niggler> transitions can take generations
03:26 < ningu> yeah, well it's not even clear to me that it's intended to happen
03:26 < koston_> Hey would anyone be willing to help me out? I got an issue of events repeating themselves.
03:26 < niggler> the united states is still transitioning to metric
03:26 < ningu> there just seem to be two html5 variants
03:26 < ningu> koston_: code or it didn't happen
03:28 < ningu> koston_: gist.github.com to paste
03:28 < ningu> or wherever
03:28 < ningu> but not here :)
03:32 < zeromodulus> v.v
03:32 < zeromodulus> No KineticJS IRC rooms.
03:33 < zeromodulus> I need a good UI room. Canvas, HTML5, KineticJS, ThreeJS, etc.
03:34 < ningu> the first rule about UI club is you don't talk about UI club
03:34 < zeromodulus> Aw man...
03:34 < ningu> koston_: paste the link here not in a /msg
03:36 < koston_> Hey would someone be willing to help me out with some repeating events? I put the listeners code here: http://pastebin.com/wykCHurG and I put the logs here http://pastebin.com/e7U40Tbj I can't figure out why it would be repeating...
03:38 < ningu> what is repeating, the join group thing?
03:38 < koston_> the chat after they find a group 
03:39 < koston_> I remove all "chat" events when "join" is called then it adds in a new one after
03:40 < ningu> this is just one side of the code
03:41 < koston_> also the (the most odd part) "join" event is being repeated from one call
03:41 < ningu> I don't know what the invalid messages are from but you should log those
03:41 < ningu> well presumaby it's because the other side is sending the message more than once
03:41 < koston_> yeah, the rest is mostly working with their account
03:42 < ningu> I mean if the join listener is triggered twice the obvious thing to check is the code that emits join
03:43 < koston_> join is a listener though, the client side doesn't repeat unless you click it multiple times
03:43 < ningu> you just said it does
03:43 < ningu> anyway you are debugging the wrong side of the code
03:44 < ningu> I don't see why the listener would be triggered more than once unless the client emits those messages more than once
03:45 < niggler> substack are you really saying that something can be too magical?
03:45 < ningu> wait substack said that??
03:45 < ningu> I want evidence
03:45 < niggler> sup https://github.com/substack/node-mkdirp/issues/28#issuecomment-14998703
03:45 < substack> that behavior would be too unexpected
03:46 < ningu> ah, unexpected != magical
03:46 < substack> this is a case where being too friendly can be dangerous
03:46 < niggler> what's not clear to me, in general
03:46 < koston_> Well, I'll see what the client is doing but I haven't even touched the client in a while. Not sure why it would be doing that
03:46 < niggler> is why the default behavior when no callback is passed should be async
03:47 < niggler> not just for mkdirp but in general
03:47 < niggler> it seems like you are expressing your intent by not giving a callback
03:47 < ningu> niggler: I'm somewhat uneasy about not passing callbacks to async methods
03:47 < ningu> unless you actually don't need to do anything when it's done
03:47 < niggler> i mean, one would think that by not passing a callback, one is expressing a desire for sync behavior
03:47 < gianfryfs> hi
03:47 < ningu> but then I just pass a function () {}
03:47 < ningu> niggler: oh. no, I wouldn't expect that at all
03:47 < niggler> right ningu  but that's different from omitting a callback
03:48 < niggler> prima facie what would you expect
03:48 < ningu> everything like that in node is async unless it has sync in the name
03:48 < substack> niggler: I would expect that if I don't pass a callback I don't care to be notified of the response but it should still go and do the mkdir asynchronously
03:48 < ningu> yes, I agree
03:48 < ningu> this is only obvious in the sense that it follows node conventions
03:48 < substack> and that pull request violates that expectation
03:48 < ningu> not some objective thing
03:48 < substack> node conventions are the context under which node modules are embedded
03:49 < ningu> :)
03:49 < substack> there is a cultural superstructure at play
03:49 < niggler> is mkdir on the shell async?
03:49 < substack> that's not relevant
03:50 < ningu> nothing in the shell is async
03:50 < substack> the shell has its own job-control semantics that are separate from how node works
03:50 < substack> node works a particular way and it has good reasons
03:50 < ningu> in node the default for expensive operations is always async
03:50 < substack> it's wise to use the way that node works as a starting point and only deviate when you have a very good reason
03:50 < ningu> and everything in the standard modules that violates that has sync in the name
03:50 < substack> yep!
03:51 < substack> that's why mkdirp.sync() has a separate name
03:51 < gianfryfs> !list
03:51 < GreyWolf001au> need some help with node-mysql
03:51 < koston_> ningu, I'm a fucken retard. It was the client ... thank you sir
03:51 < gianfryfs> !addon
03:51 < ningu> koston_: np :P
03:52 < ningu> substack: btw you're in oakland right?
03:52 < substack> yep
03:52 < substack> between fruitvale and dimond
03:52 < ningu> I was in my old neighborhood today, 49th & telegraph
03:52 < ningu> ah ok
03:52 < substack> I used to live on macarthur and west
03:52 < ningu> I'm in SF but lived in temescal for a while
03:52 < substack> right around the corner
03:53 < ningu> and getting back into js stuff now, so just working out what's going on around here
03:53 < gianfryfs> !list
03:54 < GreyWolf001au> anyone have experience using node-mysql
03:54 < ningu> GreyWolf001au: probably someone here does but it's best just to ask your question
03:55 < ningu> in fact that the two main rules of irc are: (1) don't ask to ask, (2) ask something concrete
03:56 < ningu> preferably something you've already tried to figure out
03:57 < GreyWolf001au> I am having trouble with node-mysql using query insert, it throws a bad field error, I am wondering why this is happening
03:57 < ningu> the error is from mysql, not the node driver?
03:59 < GreyWolf001au> ER_BAD_FIELD_ERROR: Unknown column 'VALUE I AM INSERTING' in 'field list' may be from mysql but is not a query error, the field should not exist as I am inserting it, it does not make much sense
03:59 < ningu> GreyWolf001au: well it sounds like it's interpreting the value you're inserting as a column... not surprising it doesn't exist
04:00 < ningu> sounds like a badly written query
04:04 < GreyWolf001au> i changed the example code from readme on github, it seems to be correct and should give back a query error if it was a badly written query, I will attempt to resolve it
04:05 < ningu> GreyWolf001au: well try the same query from the mysql shell
04:06 < GreyWolf001au> ok I am gathering the insert code in the readme is wrong then as it does not look like a proper mysql query
04:07 < ningu> *shrug* I dunno without seeing it
04:09 < GreyWolf001au> np thanks for your help, I think I can get it to work now, it basically gives the query as a comma delimited set of key=value without any quotes
05:22 < noway421> Hi guys. I added score and levels to my terminal arkanoid. Check out: https://gist.github.com/noway421/5140455
05:50 < owen1> what is a good POST API for mark post as read or unread? /feedUrl/postUrl?action=unread or /unread and in the body of the post have the url of the feed etc?
05:56 < noway421> Choose the simplest way.
05:59 < owen1> noway421: ok. so both options are valid?
06:02 < noway421> owen1, yep, why not?
06:02 < owen1> noway421: i wasn't sure if it's valid to pass querystring arguments in a POST
06:02 < noway421> See what more suitable in your architecture
06:03 < noway421> Oh, you want make POST request with postUrl in postdata?
06:03 < ningu> there is no "valid" really, it will work
06:04 < noway421> Yep, in this way better use first variant.
06:05 < owen1> noway421: so the body can stay empty. interesting
06:06 < noway421> request body?
06:06 < owen1> noway421: it's a POST
06:07 < owen1> most times when i POST something, the body is not empty.
06:07 < noway421> set it to null, everyone do this. its 'good enough'
06:07 < owen1> ok
06:18 < owen1> noway421: the problem i see with /feedUrl/postUrl approach is it might create some conflict with other apis of this service
06:19 < owen1> let's say i want to have an endpoint that adds new feed to a reader - /POST /feedUrl
06:19 < owen1> how will i know the different between /feedUrl/postUrl and /feedUrl ? it might can confusing 
06:21 < willwh> owen1: draw it out on a whiteboard
06:21 < willwh> check on it and go to bed
06:21 < willwh> chew* on it
06:21 < owen1> maybe i need to start the endpoint with something more distinct? /unread /read etc
06:21 < willwh> feed/status ?
06:21 < willwh> post/status
06:21 < willwh> ?
06:21 < willwh> idk
06:22 < owen1> not bad
06:22 < willwh> it is up to you how you design it
06:22 < owen1> maybe i'll look at twitter or facebook
06:22 < willwh> hmm
06:22 < owen1> to get some insights about good api design
06:22 < willwh> you probably want to look at node examples I'd suggest
06:22 < willwh> there are about 7bazillion node rest examples
06:23 < owen1> willwh: can u send me a link?
06:23 < sheldonh> willwh: you a believer in shower time? :)
06:23 < willwh> owen1: sure: www.google.com
06:23 < willwh> sheldonh: you the what now?
06:23 < willwh> I hope you don't think I'm Wil Wheaton
06:23 < owen1> what should i google for? node api design example?
06:23 < willwh> you're clearly a terrible sheldon
06:23 < willwh> he spells it with one L
06:23 < sheldonh> willwh: i uh... don't know who wil wheaton is?
06:24 < willwh> ah ok
06:24 < willwh> sheldon is your real name?
06:24 < owen1> it's not node question. it's api design
06:24 < sheldonh> willwh: well since i hatched, the additional elle seems... pretentious
06:24 < willwh> not some reference to big bang
06:24  * sheldonh lets out a sad little sigh
06:24 < sheldonh> i fucking hate that show. it ruined my experience of irc :)
06:24 < willwh> Wil Wheaton = that kid from star trek
06:24 < willwh> and funnily enough - a lot of people think I am masquerading as him
06:25 < willwh> owen1: well no really, that's where you're wrong
06:25 < willwh> there are lots of ways to do it
06:25 < sheldonh> willwh: despite the extraneous elle. fools!
06:25 < willwh> hence my question, so my sincere apologies
06:25 < willwh> also, woot irc ;)
06:26  * sheldonh am so out of love with resourceful, cruddy, rails-like REST APIs. RPC over HTTP, thanks
06:26 < willwh> is it bad that I run irssi-notifier and connectbot-irssi on my droid? :DD
06:26 < owen1> willwh: so u'r saying it is node question? do u mind elaborating?
06:26 < willwh> no I'm not saying it's a node question
06:26 < willwh> and no
06:27 < owen1> oh
06:27 < willwh> I am saying it's not really a question of your endpoints so much
06:27 < owen1> i guessed i missed something in our conversation
06:27 < willwh> sheldonh: I still like crud, kinda
06:27 < willwh> :p
06:28 < willwh> owen1: I only mean looking at twitter and facebook
06:28 < willwh> for ideas on your api endpoints
06:28 < willwh> is 
06:28 < willwh> uh
06:28 < willwh> perhaps not that helpful :)
06:28 < sheldonh> willwh: i don't like the rampant over exposure of internals. such apis demand that the caller understand the logic required to manipulate a resource's internals. yuk
06:29 < willwh> sheldonh: that is quite true
06:29 < willwh> I don't work with many open ended systems like that
06:29 < willwh> iptables, iptables, iptables -> and closed environments :D
06:29 < sheldonh> owen1: i cam in late, but if i understood your "how will i distinguish /feedUrl from /feedUrl/postUrl?" i think the answer is to include the http verb in your routing decision
06:29 < willwh> i.e. I am not slginging some terrible hipster app to the masses
06:30 < willwh> owen1: this might help a little
06:30 < willwh> http://www.openlogic.com/wazi/bid/267042/Using-Node-js-to-write-RESTful-web-services
06:30 < willwh> not with your actual enpoints
06:31 < willwh> but ye sorry if I was rude, Friday night, beer etc, been a crazy week
06:31 < sheldonh> willwh: you said iptables. therefore http://rackerhacker.com/2010/04/12/best-practices-iptables/#comment-16152
06:34 < owen1> sheldonh: willwh thanks. looking at that link
06:36 < sheldonh> owen1: my link won't be useful to you. wil "extra elle" wh's link will (if you're into that sort of thing)
06:36 < sheldonh> meh. please let this airbrake not be from my code...
06:36 < sheldonh> yes! a type 2 bug :)
06:39  * sheldonh tears his hair out trying to explain minecraft version numbers to his 6 year old
06:39 < willwh> sheldonh: hardware in front
06:39 < willwh> but yes
06:40 < willwh> and why would you ever use a wrapper
06:40 < willwh> it's so simple ;/
06:40 < sheldonh> now if only simple were easy :P
06:40 < willwh> no
06:40 < willwh> because they anyone could do it
06:40 < willwh> the fact it's simple... and terribly easy to pwn yourself, or entire system
06:40 < willwh> is just awesome
06:41 < sheldonh> i would be fine with that. i would give up being special to live in a sane world
06:41 < willwh> I sense a but..?
06:41  * sheldonh tries to rack up a but
06:41 < willwh> sorry I re-read
06:41 < willwh> I get you
06:42 < sheldonh> willwh: i am still boggling after watching rich hickey's "Simple Made Easy" last year
06:42 < willwh> hormones mean no sane world :)
06:42 < sheldonh> point. and i wouldn't give up my hormones to live in a sane world
07:10 < faceleg> anyone familiar with libuv
07:10 < faceleg> how do I uv_async_init when I'm not using uv_queue_work?
07:10 < faceleg> I'm using uv_thread_create instead of queue
07:12 < faceleg> I guess uv_default_loop as first arg to uv_async_init?
07:13 < sheldonh> wow. libuv is an ambitious project!
07:13 < sheldonh> cross platform filesystem event support. nyomnyomnyom
07:14 < faceleg> I thought it was just threading helpers?
07:14  * faceleg shows his noobness
07:14 < sheldonh> faceleg: i'm looking at https://github.com/joyent/libuv ... looks like threading helpers is just one feature
07:15 < faceleg> sheldonh: ah right
07:19 < sheldonh> socket.io really kitchen sinks dependencies eh?
07:20 < faceleg> word
07:20 < projectskillz> yo peeps
07:20 < projectskillz> anybody fooling with sailsjs?
07:20 < faceleg> word
07:20 < projectskillz> do i need to make a table with the same name as a model in order to get it to save data?
07:28 < faceleg> sounds like it
07:29 < RandomCitizen> can someone write my ring i changed my notification settings for irc
07:32 < sheldonh> RandomCitizen: no
07:33 < sheldonh> cake launch. it just doesn't sound right
07:34 < RandomCitizen> thanks
07:47 < projectskillz> yo got it
07:47 < projectskillz> needed to download the adapter from npm
07:47 < projectskillz> jesus
07:47 < projectskillz> always something stupid like that
07:47 < projectskillz> so people has node taken over the world yet muwahahaha
07:47 < projectskillz> my work got me working on magento
07:48 < projectskillz> rolling my eyes in the back of my head boring but gotta make that money
07:48 < projectskillz> maybe its time we tackle commerce with some node ???
07:59 < genazt> projectskillz, maybe not :D
08:00 < projectskillz> genazt:  ;(  why not
08:00 < genazt> cause node is not stable enough
08:06 < projectskillz> yeah
08:06 < projectskillz> genazt: have you put any node apps in production yet?
08:07 < genazt> yes one
08:07 < projectskillz> so far so good?
08:07 < genazt> well no :D
08:07 < projectskillz> uh oh ;(
08:07 < genazt> the first thing node doesnt do is load chaping
08:07 < genazt> you can overload node as hard as you can
08:07 < genazt> till it collapses
08:08 < genazt> also i can be sync and connectionflooded
08:08 < genazt> so i have a proxy infront of it
08:09 < projectskillz> but isn't php or anything else the same … when they are overloaded they crash just as hard don't they?
08:09 < projectskillz> what is different?
08:09 < genazt> php can recover on its own
08:09 < genazt> in node you must be aware of it
08:10 < projectskillz> oh ok .. well is that in the dev roadmap
08:10 < projectskillz> load chaping?
08:10 < genazt> if a webserver with php gets overloaded maybe the php processes die, but the webserver (cgi) or fpm (fastcgi) starts new ones
08:10 < genazt> and the service is running again
08:10 < projectskillz> oh ok i c
08:10 < genazt> so if a node app crashes it is down till someone restarts it (or you use third party tools like nodemon or forever)
08:11 < genazt> even if you overload nodejs you have no chance to send a response
08:12 < genazt> so if you have a node app running and it hits its limits and you get requests further above the limit you cannot send a error text
08:12 < genazt> or cancel the connection
08:12 < genazt> the request hangs till the timeout comes
08:13  * RandomCitizen WwW.Daniela.Kurdlander.com  For Dawnloding «Daniela Script»
08:27 < sheldonh> genazt: funny thing about limits
08:35 < samholmes> What sort of things are there to think about when making an app that scales?
08:40 < sheldonh> samholmes: a good thing to think about is that software doesn't scale. it is either too expensive and complicated for today's requirements or it is too inflexible and naive for tomorrow's. agile software development recognises that you are much smarter about today's requirements than you are about tomorrow's
08:41 < projectskillz> genzt: yeah a bit of a problem
08:41 < samholmes> sheldonh: I'm not sure if I knwo what that means exactly
08:42 < projectskillz> but if your reaching your limits … you have already got big problems anyways
08:42 < projectskillz> need more servers
08:42 < projectskillz> or more instances
08:44 < samholmes> I'm not trying to go beyond what's already been done
08:44 < sheldonh> samholmes: it means that it often makes sense to focus on today's requirements, keeping your customers realistically informed about the design trade offs you are making that will demand attention later when things change (instead of building today for a scale of demand you might not reach tomorrow, and probably don't understand today)
08:44 < samholmes> I'm just wondering about scaling
08:46 < sheldonh> samholmes: i think scaling is just another expression of the more general art form of adapting to change. largely, that's about modularity of design and communication of humans
08:47 < samholmes> sheldonh: So in other words, if I don't need to scale don't scale?
08:47 < sheldonh> samholmes: mostly, when people say scaling, they're not talking about scaling. they're talking about the already-known limits of a component or configuration of components
08:47 < samholmes> right
08:49 < sheldonh> samholmes: sadly, it's not quite as simple as "completely ignore the issue of scale" because today's design decisions give you systems that are easier or harder to move in a particular direction later. so we hedge our bets by favouring things like encapsulation and decoupling
08:49 < samholmes> sheldonh: I have a single VPS server at intovps.com for 20 bucks a month. How far can this get me?
08:49 < sheldonh> samholmes: but even there, you can go too far and not far enough :)
08:49 < samholmes> sheldonh: Where do you worK?
08:50 < sheldonh> samholmes: ah, now that's a great question. impossible for me to answer, but great for you to be exploring. how could you push your app on that instance to see what it's capable of?
08:50 < sheldonh> samholmes: i work for a web hosting company. most of my job is about dealing with horrible decisions that have made it hard for us to respond to scaling demand :)
08:50 < samholmes> I'm not sure.
08:51 < sheldonh> samholmes: maybe you could temporarily rent another one to simulate client traffic for a while
08:52 < sheldonh> samholmes: or figure out what load you'd have to cope with to cover your 20 bucks, and then just test that *that* load is catered for
08:52 < samholmes> Well, isn't it about measuring bandwidth usage?
08:53 < samholmes> What is scaling all about?
08:53 < sheldonh> samholmes: harr! the meat. for me, scaling is the human discipline of responding to changes in demand
08:54 < samholmes> sheldonh: How much to hire you?
08:55 < samholmes> lol
08:55 < sheldonh> samholmes: i guess for where you're at, scaling would be about "how will i know when i need another instance, and when i get there, what changes am i likely to have to make to the software i have right now?"
08:56 < samholmes> sheldonh: Exactly! You're spot on
08:56 < sheldonh> hehe. my employer is incredibly hard to leave. nice people with lots of money :)
08:56 < samholmes> I couldn't of said it better my self
08:56 < samholmes> ah
08:56 < sheldonh> samholmes: so a classic example is "what will i have to change when i can't make one database server handle all my needs?"
08:57 < samholmes> yes
08:58 < sheldonh> samholmes: that one's hard, and there are lots of directions you can go in, and many of them involve the design of your application itself. how well did you encapsulate the specifics of your existing database? how much work would be involves in slotting in a new one? can you shard it without major ripples through the code base?
08:59 < samholmes> sheldonh: Firstly, it's a mysql database.
08:59 < samholmes> I've always know that mysql scales up, not so much out.
08:59 < samholmes> How would I go about scaling out on a mysql database?
09:00 < sheldonh> samholmes: so there's the kneejerk reaction, which is master-master replication
09:00 < sheldonh> samholmes: which demands a design decision -- that your application leaves identity assignment up to the storage engine
09:01 < samholmes> what is identity assignment?
09:01 < sheldonh> samholmes: like, who decides what the surrogate key of this row is? :)
09:01 < samholmes> surrogate key..
09:01 < samholmes> not familiar with that term
09:01 < sheldonh> samholmes: like, the ID column
09:02 < samholmes> oh so the primary key as it's known in mysql terms. :P
09:02 < sheldonh> samholmes: so even for the simplest of responses to increases in demand, you get these design constraints that can be very expensive to pivot
09:03 < sheldonh> samholmes: if your primary key is always a surrogate key, you are a very well behaved mysql person :)
09:04 < sheldonh> samholmes: but that's not your only option, master-master... you could have identified cohesive aggregates and separated them out onto their own database instances
09:05 < samholmes> surrogate key is a key that uniquely defines a piece of data more so than a primary key?
09:05 < sheldonh> samholmes: this approach demands certain things of your transaction strategy and forces you to have very strong opinions about your aggregates. so the decisions you made about these things early on may make this approach prohibitively expensive, or support it really well
09:05 < samholmes> a PK could be duplicated across multiple database instances?
09:05 < sheldonh> samholmes: surrogate key is just synthetic  or artificial-- it is not part of the meaning of the data
09:07 < projectskillz> anybody using sails.js
09:07 < projectskillz> what the word on the stret about that
09:07 < projectskillz> there irc room is like tumbleweeds
09:08 < projectskillz> but they got like 1000 stars on the github repo
09:08 < sheldonh> samholmes: yet another approach would be to identify tables in which you don't need immediate consistency, at which point you could be using something like mongo or riak to get huge performance bonuses. but how and where does your existing design support eventual consistency?\
09:08 < projectskillz> i am using it now its seems cool
09:08 < projectskillz> anybody else got opinions on what could be THE MVC framework of node
09:08 < samholmes> sheldonh: I have a lot to learn. These terminologies you are using I am unfamiliar with, so I'm guessing it would take me some time, studying, before I could keep up with the conversation.
09:08 < sheldonh> samholmes: so i hope i'm explaining by example what i was trying to say initially, which is that scaling is about way more than "use node.js instead of perl". it's about design
09:08 < samholmes> Also, it's getting late. xP
09:09 < sheldonh> samholmes: that never helps ;)
09:09 < genazt> projectskillz, another question why mvc ?
09:09 < samholmes> yeah
09:09 < Havvy> Does Node.js need an MVC framework?
09:09 < genazt> no
09:09 < projectskillz> hmmm
09:09 < samholmes> Though, I'm glad I had this talk, because it made me realize a few things which gave me some peace of mind.
09:09 < projectskillz> ok why not…. if it gives you a free api built off of your model
09:09 < samholmes> sheldonh: would you be down for keeping in contact?
09:09 < projectskillz> for doing web apps
09:10  * samholmes needs more contacts that know their game
09:10 < sheldonh> samholmes: TL;DR: keep it simple, and focus on today. the more complex it is, the harder it will be to change direction to meet tomorrow's demands. (and note that simple != easy)
09:10 < genazt> projectskillz, backbone.js ?
09:10 < genazt> it is an mvp pattern
09:10 < Havvy> backbone.js is clientside, no?
09:10 < genazt> MVP :D
09:10 < projectskillz> genazt: yes but we are talking backend here
09:10 < samholmes> sheldonh: ah. Thanks for that synopsis. ;)
09:10 < projectskillz> lol
09:10 < projectskillz> yeah MVP FTW
09:10 < genazt> yes i know
09:10 < Havvy> Model View (Predicate?)
09:10 < genazt> backbone.js is backend
09:10 < sheldonh> knockout.js
09:10 < genazt> Projector
09:10 < genazt> :D
09:11 < sheldonh> that is all
09:11 < projectskillz> you just blew me mind
09:11 < genazt> so your browser renders the views
09:11 < genazt> you only have a api for models which can be called via rest or sockets or something
09:11 < genazt> the prestener can also do the routing between pages
09:12 < Havvy> Hmm, interesting way of wiring.
09:12 < projectskillz> yes well I use angularjs which works well and in my first app I built for fun
09:12 < genazt> you only ask the server for the templates (which can be sotred a the client) and the data you need
09:12 < genazt> so the most things are made on the client side
09:12 < projectskillz> having to add the code to get the data i need for every route was a little time consuming
09:13 < Havvy> genazt: Can the templates be Jade?
09:13 < genazt> why jade :(
09:13 < Havvy> Because template inheritance.
09:13 < genazt> its the shittiest template engine i have ever seen
09:14 < Havvy> It looks nice to me.
09:14 < genazt> you need to learn a "new" syntax
09:14 < Havvy> Syntax is easy.
09:14 < genazt> which is crap cause if you want to build something that the syntax doesnt give you you must write html
09:14 < projectskillz> genazt:  i am understanding you
09:14 < genazt> so why should i use jade ?
09:15 < Havvy> Name something the syntax doesn't give.
09:15 < projectskillz> genazt: could you look at my approach here and tell me what you see wrong ?
09:15 < projectskillz> https://github.com/ray-garner/Blogular   
09:15 < genazt> html conditional switches
09:15 < projectskillz> its a silly blog app i built with nodejs and angular but has good security… no seo yet though
09:16 < genazt> then you can build emails, pdfs, excel, texts, xml with it
09:16 < sheldonh> genazt: what's the most awesome template engine you have ever seen?
09:16 < genazt> so it is a html only template engine
09:16 < genazt> swig
09:16 < genazt> twig / swig :D
09:17 < genazt> or ejs
09:17 < genazt> everything that doesnt use any own syntax
09:17 < genazt> so you can build anything with it
09:17 < Havvy> genazt: PHP?
09:17 < genazt> twig is php, swig is the nodejs port
09:18 < sheldonh> swig was a terrible choice of name
09:18 < sheldonh> the name already belongs to some horrible, horrible software :)
09:18 < sheldonh> cool. it looks familiar... like... liquid?
09:19 < genazt> sheldonh, yes
09:19 < Havvy> genazt: See...if a template engine can build both PDF and HTML, then it doesn't really care about what it is working with...and probably doesn't have any domain specific tools to support the writer.
09:20 < genazt> lol, what if a template engine has helper for more than one domain ?
09:20 < genazt> if it has helpers which you can dynamicly can define ?
09:21 < sheldonh> genazt: religiously, i don't like templating engines that support code. but in practice, i've only ever seen that devolve into an engine-specific programming language :)
09:21 < Havvy> Then you have a general purpose template language with libraries.
09:21 < genazt> yes welcome to swig, ejs
09:21 < paultman> Hello, any where use node-http-proxy on Heroku?
09:21 < Havvy> PHP is also such a general purpose template language.
09:22 < paultman> or multiple ports on Heroku?
09:22 < genazt> yes and its meant to be
09:22 < genazt> php is a hypertext preprocessor
09:22 < genazt> so nothing else than a big template engine :D
09:22 < Havvy> And I find that writing in those sucks.
09:23 < Havvy> Jade is a language that does one thing and does it well.
09:23 < genazt> well i hate writting in 150 template engines cause they a only do what they need to
09:23 < genazt> why should i use jade for html ? when swig,ejs can do much more ?
09:23 < genazt> when i can create svg or something with it
09:23 < genazt> or xml, json templates
09:24 < sheldonh> genazt: come along, you can't seriously be wanting him to justify the use of specialized tools :)
09:24 < genazt> no, thats not what i want
09:24 < genazt> its the jade can do anything thing
09:24 < genazt> which is bullshit
09:24 < sheldonh> Havvy: for me, the problem with jade is that it's too different but not different enough
09:25 < genazt> and its _the_ best template engine
09:25 < Havvy> I didn't say Jade can do everything. And I never said it was the best.
09:25 < projectskillz> why is having a MVC node not going to save you time?? like sailsjs… it has scaffolding as well
09:25 < sheldonh> ugh
09:25 < genazt> becuase mvc is not always the best
09:26 < projectskillz> ok not always but in some cases you would want use it … 
09:26 < Havvy> Twig and EJS are really good. But I don't want to use them for HTML.
09:26 < sheldonh> people building frameworks that work like rails are... jumping on a bandwagon that's on fire
09:26 < genazt> yes in some cases
09:26 < projectskillz> you think so?  why do you think that?
09:26 < genazt> it depends on the use case
09:27 < projectskillz> sheldonh: I want to agree with you but I just wonder if you could share your thoughts on why this is perhaps an article of opinion of this?
09:29 < genazt> i have a question about node: do you think that node.js can be a really alternative for php or asp.net or java ? in professional cases ( that much hoster support it, you can get good managed hosting for node, that banks would use it, big companies would use it) ?
09:30 < sheldonh> projectskillz: i've used rails since before version 1. i was a fanboy. and now i'm massively disillusioned with it. because ActiveRecord
09:31 < sheldonh> projectskillz: i am the guy who got our company to all but standardize on rails, and i'm currently campaigning very hard to have us all but stop using it :(
09:31 < paultman> I could really use some Heroku advice regarding multiple ports....  anyone?
09:31 < medice> all but stop using it?
09:32 < Havvy> Big companies: Yes.
09:32 < Havvy> Banks:  Who knows?
09:32 < vwoo> paultman: generally the answer is "you can't"
09:32 < medice> you use but in rather strange ways
09:32 < projectskillz> sheldonh:  I feel like I am the guy you were back then except with nodejs
09:32 < medice> all but
09:32 < projectskillz> i want to use it for everything
09:32 < Havvy> managed hosting support: Probably not.
09:32 < genazt> Havvy, i think the system around php is to big
09:32 < projectskillz> but uhh thats not going so well
09:32 < genazt> so nodejs wouldnt make it on the hoster side
09:33 < paultman> vwoo:  i've been thinking that.  they want me to pull from an env var, and when I set more then one, i get an error :(
09:33 < Havvy> Seeing that Python/Ruby/et. all don't make it with hosting companies either.
09:33 < paultman> I'm trying to setup http-proxy there, 
09:33 < vwoo> paultman: the env var is set by their build pack, and they dont open more than one port to your dyno at the network layer
09:33 < Havvy> 99% of hosting companies are setup by people trying to profit from programming newbies.
09:33 < genazt> Havvy, right so nodejs would always be a little language ?
09:33 < projectskillz> sheldonh:  I still don't get why you say MVC framework bandwagon is on fire???
09:34 < genazt> or do you think it is the way to get ?
09:34 < Havvy> It's JavaScript. Which is not a little language.
09:34 < sheldonh> projectskillz: hehe. i am trying to not be that guy about anything. i am finding it very uncomfortable. dogma is comforting
09:34 < Havvy> As a platform, it'll grow.
09:34 < paultman> and I've heard of others doing it, however I suppose they are somehow routing w/o using diff ports
09:34 < genazt> yes the language itself not but the concept behind nodejs
09:34 < genazt> like vert.x, go
09:34 < paultman> vwoo: thanks so much, I can get outta that rathole
09:34 < sheldonh> projectskillz: oh well... i'm not talking about MVC. i'm talking about "the rails way", which is to couple the very top to the very bottom using ActiveRecord (now ActiveModel) as the crazy glue
09:35 < vwoo> paultman, i have not heard of anyone listening on more than one port on heroku. the only class of heroku ps that is allowed to listen at all is "web"
09:35 < sheldonh> projectskillz: with bonus points for then coupling all your API clients to that through completely decapsulated CRUD REST
09:35 < Havvy> The concept (nonblocking event driven) is important.
09:36 < Havvy> libuv is at the core of that.
09:36 < paultman> vwoo:  ok, that makes sense based on my experience...  just need to figure out how I can support two domains on my single heroku instance
09:36 < genazt> yes everyone who uses it loves it, but why doesnt i come to the big side ? why not as hosting service along managed hosters ? 
09:36 < genazt> and will it change in about 5-10 years ?
09:36 < vwoo> you can easily support two domains (at least with http requests) by examining the host header
09:36 < genazt> i dont think so
09:36 < paultman> vwoo:  was hoping to use http-proxy which worked like a charm on my local instance (3 ports, the proxy and each of the two websites)
09:37 < Havvy> genazt: Because managed hosters can't 'manage' Node like they manage PHP. There's things like Heroku, but you actually have to somewhat know what you are doing to use it.
09:37 < Havvy> You can't just plop down a CPanel and call it good.
09:37 < projectskillz> sheldonh: ok so rails is couple everything together… so your saying thats no good.  keep your rest calls separated from the bottom??  So  your saying that they are trying to make everything into that model but you don't like it cuz its too fixed
09:38 < genazt> no
09:38 < projectskillz> is that what you are saying?
09:38 < paultman> vwoo:  sure, I can do that, but how do I route them to an app server w/o sending it to a port which it's listening on?
09:38 < genazt> but do you think nodejs would be an alternative among the php hosters ?
09:38 < genazt> so will the nodejs managed hosting become as big as the php one does ?
09:38 < greg5green> php hosts host php because it is easy
09:38 < genazt> greg5green, no its not easy :D
09:39 < Havvy> Yes, it actually is easy.
09:39 < greg5green> in comparison? yes
09:39 < genazt> if you want a good php server, its harder to setup then nodejs
09:39 < vwoo> paultman: it depends on your setup. its harder if the app servers are externalm but presumably you have app servers on the same box as the router? if so, you MIGHT be able to listen to local ports on loopback, or use some sort of unix socket descriptor
09:39 < Havvy> genazt: From the perspective of the user.
09:40 < Havvy> From the perspective of the hoster, securing Node is hard.
09:40 < greg5green> genazt, i think you also are misunderstanding the complexities of setting up a great setup for node
09:40 < genazt> yes
09:40 < genazt> greg5green, its easy, you can bring up a node cluster on every machine, a load balancer in front of it
09:40 < sheldonh> projectskillz: in rails, your view templates are coupled to the database structure that you use to persist your models. it's pathalogical layering violation and coupling
09:40 < genazt> and you can spawn up more servers if you need to
09:41 < paultman> vwoo:  all the app servers are in Heroku, in the same web.js, just call 3 createServers with .listen to each port
09:41 < vwoo> i would just set separate env vars for each of the three server ports, see if that works
09:41 < sheldonh> projectskillz: over and over again, i've seen a productivity drop off with rails that is devastating. i don't have proven answers. i haven't seen alternatives work out. i just know that the rails way is not the way for me
09:41 < vwoo> good luck
09:42 < greg5green> genazt, if you know all this knowledge about setting up great servers, why are you asking about managed hosting? (this sounds mean and like I'm being a dick -- sorry in advance -- not trying to be)
09:42 < genazt> i am not asking for managed hosting
09:42 < paultman> vwoo: but wait, u said i'm limited to a single port, but you suggest 3 env vars for 3 ports?
09:42 < genazt> i ask for the way of node
09:42 < vwoo> you are limited to one port only for external listen access
09:42 < genazt> if you think node can be an alternative to php hosting
09:42 < vwoo> you may be able to listen to local loopback
09:42 < genazt> in the future
09:42 < paultman> vwoo: OH ok...
09:43 < greg5green> something is being "lost in translation"
09:44 < paultman> vwoo: ok, back to square 1 :p  thanks for the insight however
09:44 < genazt> greg5green, what do you mean ?
09:45 < greg5green> I think what you are asking in English isn't what you mean to really ask.
09:45 < sheldonh> is node.js cluster all that? i read the explanation, and apart from it depending on an operating system quirk that i'm nervous to bank on, it looks hot
09:46 < genazt> well its easy to explain what i want
09:46 < sheldonh> all i want is everything
09:46 < sheldonh> am i asking too much?
09:46 < genazt> if i type in "php managed hosting" in google
09:47 < genazt> and if i type in "nodejs managed hosting" in google
09:47 < greg5green> you just said you werent looking for managed hosting
09:47 < genazt> php would hit far more good results
09:47 < sheldonh> genazt: isn't heroku where it's at for node hosting?
09:47 < genazt> and i want to know if you think this can be changed in the future
09:47 < greg5green> ah
09:47 < genazt> its about the meta
09:47 < genazt> would node become as big as php ?
09:47 < greg5green> No one can answer that
09:47 < sheldonh> if heroku's node is like their ruby, it'll be hot
09:48 < genazt> would it be an alternative in the future ?
09:48 < greg5green> and if anyone thinks they can, they're full of shit
09:48 <@Nexxy> yes, the answer is yes.
09:48 < genazt> or will it go away like ror ?
09:48 < sheldonh> nothing will ever become as big as php, because bell curve
09:48 < tdignan> genazt: that's like asking if a highly specialied quantum super laser will ever be a good alternative to a sledgehammer
09:48 < genazt> that is why it is a "your oppinion" question D
09:49 < tdignan> http://farm8.staticflickr.com/7082/7175095797_84d6c0e5b3_m.jpg
09:49 < sheldonh> genazt: probably better to ask "will it go away like rack?". and rack hasn't gone away, and doesn't look set to
09:49 < tdignan> genazt: i know, and I'm giving you my opinion
09:49 <@Nexxy> https://www.youtube.com/watch?v=pWdd6_ZxX8c
09:49 < tdignan> my opinion is that your thinking could incorporate the idea of specialization versus generality
09:49 < sheldonh> ^^^
09:50 < genazt> well it isnt that big :D
09:50 < greg5green> genazt, it really is though
09:50 < greg5green> (your question anyways)
09:51 <@Nexxy> tonight is a night of broken analogies
09:52 < greg5green> square:rectangle::circle:wheel
09:52 < greg5green> like dat?
09:53 < genazt> no
09:54 < genazt> if i want to build a open source forum in nodejs, it will never get the community than if i had built it in php 
09:54 < genazt> because no one can use node on servers
09:54 <@Nexxy> lol what
09:54 < sheldonh> genazt: why do you care? (genuine interest)
09:54 < tdignan> genazt: the 90s called, they want your project idea back
09:55 < genazt> because i want to build software thought in a new way
09:55 < sheldonh> genazt: i mean, why do you care about attracting a community that would otherwise have centered around some unspeakably shit software?
09:55 < genazt> because building a open source software without a community is boring
09:55 < tdignan> i think we are being successfully trolled
09:56 < sheldonh> genazt: yes. "it will never get the community than if i had built it in php" != "it will never enjoy a community"
09:56 < tdignan> genazt: a very popular forum is written in lisp
09:56 < tdignan> HN
09:56 < sheldonh> not to mention that linux isn't written in php
09:57 < tdignan> ^ ++ haha
09:58 < sheldonh> i feel like such a tool, tinkering with this chat app
09:58 < sheldonh> the sooner i get my team to buy the idea of an event logger for our ecosystem of apps, the better
09:59 < sheldonh> or i could just start building it now. but that would be like... doing my dayjob on a saturday
09:59 < sheldonh> whereas this is just being a tool
09:59 <@Nexxy> if you don't have enough passion to do your job on the weekends, you should find a new job :P
10:01 < sheldonh> Nexxy: hehehe, i remember being like that
10:01 < tdignan> do i dare ask what broke your spirits
10:01 < sheldonh> Nexxy: and now i believe in rest, and contrast, and balance
10:02 < tdignan> kids?
10:02 < sheldonh> age. kids. a sense of mortality. who knows :)
10:03 < sheldonh> i love doing my job. at the office. for a few hours a day, five days a week
10:03 < tdignan> ideally I'd have my weekend time blocked away for my own projects.
10:03 < tdignan> currently i have 4 others that seep into it, though.
10:03 < sheldonh> at home, i like to nerd on whatever the fuck i feel like :)
10:04 <@Nexxy> lol
10:04 <@Nexxy> all I hear is
10:04 <@Nexxy> "now I'm old"
10:04 < sheldonh> Nexxy: oh, btw... here's a real test of passion. take a few week-ends off work
10:04 < sheldonh> Nexxy: if you can't do it, it's not passion. you're a slave to the grind and you're kidding yourself
10:05 < sheldonh> and yeah, i often think it's really just "i'm old"
10:05 <@Nexxy> that's what you get for not refusing to grow up
10:06 < sheldonh> i remember when my best mate and i hit our mid thirties, and we couldn't decide which was more scary: that we weren't going out on saturday nights, or that we were fine with it :)
10:07 <@Nexxy> if you blur your eyes just right, the / key looks just like George Washington
10:07 < sheldonh> anyhoo. i shouldn't presume to lecture people on passion just because they choose to balance their priorities differently from the way i do
10:07 < Dirkos> Where is the best spot to install node.js on Debian? All tuts only do an install but they dont tell me where on the filesystem
10:08 < genazt> Dirkos, /usr/bin ?
10:08 < tdignan> Nexxy: if you press firmly on your eyes, you can see fractal like hallucinations
10:08 < tdignan> just don't blame me if you ruin your eyes
10:08 < Dirkos> genazt: i have no idea? When im installing npm he is lookingin /usr/local/bin ?
10:08 <@Nexxy> lol
10:08 < sheldonh> Dirkos: if you're striving for correctness, you ought to be installing into /usr/local/
10:08 <@Nexxy> sounds like a painful alternative to LSD
10:09 < Dirkos> sheldonh: so just install that git checkout and thats it?
10:09 < sheldonh> Dirkos: if this host lives long enough to see node.js hit the stable package archive, you'll be sad that you put your hand-rolled one in /usr. otherwise, do whatever you want on your own damn box :)
10:10 < Dirkos> sheldonh: thnx, running make :-)
10:10 < sheldonh> Dirkos: depends. on work, i don't allow node in production on debian. we've been there, hand-compiled software all over the network, and it just doesn't work for us. but on a developer workstation, go nuts!
10:10 < Dirkos> sheldonh: what do u use instead in production?
10:11 < sheldonh> Dirkos: ah, great question. it's up in the air. currently, lack of platform support is a show stopper in the way of using node in production :)
10:11 < sheldonh> Dirkos: so for now, the two apps we're using it for are in beta
10:12 < Dirkos> yeah i wanna try stuff out with socket.io so
10:12 < sheldonh> Dirkos: these are just labels, but the labels drive expectations
10:12 < sheldonh> Dirkos: cool, so just let node install where it wants and be happy :)
10:12 < Dirkos> sheldonh: thnx :) first has to go wrong anyway haha
10:13 < sheldonh> Dirkos: if you plan to target debian later, do note that debian will probably install it as node.js, not node
10:13 < AAA_awright> Nexxy: I'll never look at the / key the same way again
10:13 < AAA_awright> No, really, cannot unsee
10:13 <@Nexxy> AAA_awright, IT'S TRUE ISN'T IT?!
10:13 <@Nexxy> yep!
10:13 < Dirkos> sheldonh: well a reinstall isnt that special so
10:14 < sheldonh> Dirkos: i just mean, don't invest a shitload in cron jobs and shebangs and what have you that hardcode the node binary's name :)
10:15 < Dirkos> sheldonh: ah no thnx :) was just planning to try out some basic stuff like a chat service etc
10:15 < sheldonh> Dirkos: it's addictive. i can't stop fiddling with this bloody chat service :)
10:16 < sheldonh> for an example of how maddening the Debian project can be, here's the reason debian hasn't had node for so long (and yes, it comes down to the name of the binary): http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=611698
10:16 <@Nexxy> but I mean
10:16 < faceleg> I'm making a C++ extension that will do some async FS traversal
10:16 < Dirkos> sheldonh: yeah read it before :) well its time that they fix it and ship it with apt
10:17 < faceleg> should I make my C++ class handle the event emissions
10:17 <@Nexxy> there could be a lot of angry HAM radio enthusiasts 
10:17 < faceleg> or wrap callbacks with JS?
10:17 <@Nexxy> if node took the package namespace
10:17 < sheldonh> Dirkos: it's in unstable now. miiiiight even make it into testing in time for wheezy :)
10:17 <@Nexxy> all...6 of them
10:17 <@Nexxy> absolutely livid!
10:17 < Dirkos> sheldonh: yeah but it will take ages before its on stable though
10:17 < sheldonh> Nexxy: so you appreciate the sensitivity with which the issue needed to be handled :)
10:18 < sheldonh> Dirkos: ehm.... wheezy's the next stable, expected late 2013 / early 2014
10:18 < sheldonh> is that ages?
10:18 < Dirkos> if you'd rather use it now, yes :) but nah i agree
10:18 < sheldonh> oh. haha, got it
10:19 < faceleg> is this https://github.com/bnoordhuis/node-event-emitter/blob/master/event-emitter.cc
10:19 < faceleg> still the way one should implement an event emitter on C++ side?
10:21 < jishnu7> hi
10:22 < jishnu7> can someone tell me what npm link --local does ?
10:23 < faceleg> is MakeCallback still valid?
10:27 < jhsto> In an if statement, if both values, separated with or, are true, will the statement be run?
10:27 < slmr> should be
10:28 < jhsto> slmr, thanks, I'll count on that
10:29 < sheldonh> jhsto: the second expression (after "or") won't be evaluated though
10:29 < jhsto> sheldonh: well that's even better, thanks
10:33 < Dirkos> if i start node from the command line, how can i kill it again after making changes?
10:35 < sheldonh> Dirkos: ctrl-c?
10:35 < Dirkos> nope wont work
10:35 < sheldonh> hectic. works for me
10:35 < Dirkos> ah wait, got some tracking tool enabled in my OS lol
10:35 < sheldonh> i wonder what it's stuck doing
10:36 < Dirkos> not it works :) sorry for asking
10:36 < Dirkos> now*
10:36 < sheldonh> omg, it works. i really hope this whole event-driven idea works in the large, because in the small, it is fucking awesome
10:40 < Dirkos> sheldonh: woehoe got my chat running! thnx for the help man
10:41 < sheldonh> hey, any time you need a ctrl-c, you know who to call ;)
10:41 < Dirkos> haha
10:41 < sheldonh> Dirkos: what made it mask out SIGINT, by the way? not strace, surely?
10:42 < Dirkos> yeah some kind of plugin which cancelled the ctrl key event due some odd reason
10:49 < sheldonh> Dirkos: wow, talk about giving up control ;)
10:57 < [jasper]> hej guys, is anybody here using mongodb with node?
10:57 < deoxxa> never heard of anyone doing that with node
10:57 < [jasper]> I'm trying to figure out how I can get the _id of an insert I did....I gather it's generated client side...so should I generate it myself, instead of the server?
10:57 < deoxxa> sounds advanced
10:58 < [jasper]> you're a funny guy deoxxa ...
10:59 < deoxxa> you should mention a) what module you're using b) what you're currently doing c) what you want to be doing
10:59 < gildean> [jasper]: it's generated on the clientside, and actually injected into the object you save
10:59 < [jasper]> yeah, that's what I figured gildean...I'm just wondering if it's generated client side...how will it always be unique then?
11:00 < deoxxa> mysteries of the universe
11:00 < gildean> [jasper]: so for example: var obj = { value: 'key' }; collection.save(obj, function (err) { if (!err) { console.log(obj._id); });
11:01 < gildean> [jasper]: idk, haven't looked that one up, prolly the driver holds the index for all the id's?
11:01 < [jasper]> yes, I would be using the ObjectId object for this
11:01 < nanashiRei> Hey guys
11:02 < gildean> [jasper]: you don't need to create the id yourself, it's done automagically
11:02 < [jasper]> hmm, rather strange though...I get that to use it async you would need this...but it could cause problems if not generated server side one would think
11:02 < nanashiRei> Say, is there a way to default-configure node to bind to a specific interface / ip?
11:02 < gildean> nanashiRei: when doing a .listen, you can pass in the port and the ip on which to listen on
11:03 < nanashiRei> I've got a kind of cloud system here with 4 eth* and eth2 and eth3 are internet cloud network
11:03 < [jasper]> gildean I see...but that would cause a problem if I did it like this...collection.insert({user_id: user_id, time: time}, {safe:true}, function(error, result) {
11:03 < nanashiRei> gildean: i know this much, i was asking for a default global method
11:03 < [jasper]> for example...because then I wouldn't be able to reach the object.. :P
11:03 < gildean> [jasper]: so, first decalre the object then
11:03 < [jasper]> yeah...that's probably the only way
11:04 < [jasper]> so gildean....just wondering...if the _id is automatically generated...it will never fail on duplicate id I hope?
11:04 < gildean> [jasper]: tho' i'm pretty sure you could call arguments[0]._id in the anon function to get to the object
11:05 < gildean> [jasper]: it shouldn't, i bet all the _id's are saved in some form in a local cache so there no dupes
11:06 < gildean> but as i said, i have no idea how they're doing that, i just know that it's generated clientside and should always be unique
11:06 < nanashiRei> [jasper]: they won't fail on that. please go read about UUIDs
11:06 < Dirkos> When im routing / to my index.php my browser is downloading a file? How come that it just doesnt render it?
11:06 < [jasper]> gildean that arguments[0] is undefined when I check it
11:06 < nanashiRei> The way they are generated depend on machine state, hardware and time
11:06 < nanashiRei> there is NO WAY they are duplicate
11:07 < [jasper]> ok, that's good to hear nanashiRei, because my issue was mainly if I had multiple machines doing inserts in the same database...if there  would be a chance to have duplicate id's...
11:07 < [jasper]> but good to hear that this aint possible
11:07 < nanashiRei> :)
11:09 < gildean> [jasper]: ah yeah, the arguments would be the empty error object, you'd need to get to the arguments of the .insert, but imo it's just easier to create the object first
11:10 < [jasper]> gildean...I could just use the return of the insert
11:10 < [jasper]> it returns the objects...so that's perfect
11:10 < [jasper]> thanks a lot for the help people!
11:14 < sheldonh> nanashiRei: the one glaring hole in that assertion is the case where a machine can generate multiple UUIDs in a single of its most granular time ticks
11:26 < Dirkos> sheldonh: can i ask u another thing about the ports etc? I have a webpage at this moment: /test/foo.php. But it seems it cant find the socket.io lib if i connect everything together
11:27 < Dirkos> my index.php: http://pastebin.com/zAprRXfZ
11:28 < Dirkos> server: http://pastebin.com/0PeHjjYU
11:30 < sheldonh> Dirkos: try this first: <script src="/socket.io/socket.io.js"></script>
11:30 < Dirkos> ah yeah its in the script already, forgot to mention
11:31 < sheldonh> Dirkos: i'm talking about index.php
11:31 < Dirkos> and i start the php page just from port 80 but that should be the problem? Yeah that index.php has the load of the lib already
11:31 < sheldonh> Dirkos: you have code in index.php that refers to a global called io. that has to come from somewhere
11:31 < gildean> is the server running the php on some other port than 8080?
11:32 < Dirkos> yeah just port 80
11:32 < gildean> if so, you can't point to '/socket.io/socket.io.js' but you need the full url insted with the port
11:35 < Dirkos> ah like: http://localhost/test/node_modules/socket.io/node_modules/socket.io-client/dist/socket.io.min.js
11:35 < Dirkos> this one?
11:35 < sheldonh> Dirkos: just go crazy in your web browser until you find it. the point is to load it before you refer to io in index.php :)
11:36 < Dirkos> sheldonh: but i need the dist one right? because there are more versions haha
11:36 < [jasper]> hej guys, I have another small question...I must be doing something wrong here..
11:36 < [jasper]> my code is at http://www.hastebin.com/xehohebequ.coffee
11:37 < [jasper]> I want to make the function send and the object socket available in the included /listeners/index.js file
11:37 < [jasper]> therefor I supply this....but I guess that aint the right way to do it. anybody got some advice?
11:37 < damarusama> i need to convert a .json file to some sort of wether html table or better a markdown document - is there a node package that could help with that
11:38 < sheldonh> Dirkos: yeah. i meant go mad until you find the one your node instance is serving up :)
11:38 < Dirkos> yeah thnx, its working now :)
11:41 < sheldonh> Dirkos: kiss all your free tiume goodbye :)
11:41 < Dirkos> yeah :(
11:42 < [jasper]> is there anybody that can tell me what I'm doing wrong here?
11:43 < korilo> damarusama, how is the json structured exactly? html: p: etc etc ?
11:45 < sheldonh> [jasper]: that looks a lot more like javascript than coffeescript
11:48 < [jasper]> it is javascript...it's just a pasty
11:48 < [jasper]> sheldonh I thought I could pass 'this' and I would then pass the object
11:48 < [jasper]> but I think it's passing something a lot different
11:51 < Havvy> [jasper]: `this` is determined by the calling context.
11:52 < sheldonh> [jasper]: if you'll avoid the pun, this is why i stayed away from javascript until coffeescript came around :)
11:52 < sheldonh> s/avoid/pardon/
11:53 < Havvy> >> var o = {f : function () { return this; } }; f2 = o.f;  [o.f(), f2()]
11:53 < purr> Havvy: (object) [{f: function () { return this; }}, {}]
11:53 < nanashiRei> sheldonh: nope, you are wrong. Since it's bound to machine state aswell. And this changes with each generation of a uuid, since the other one used memory to be generated :)
11:54 < sheldonh> nanashiRei: i will have to go read. thanks :)
11:54 < nanashiRei> Not possible on a single machine*
11:55 < nanashiRei> if you had two 100% equal machines (not possible xD) then it might work
11:58 < sheldonh> nanashiRei: i am suspicious of the scope of "machine state". it's quite trivial for two machines to have identical state if you limit the scope of state that you consider
11:58 < damarusama> korilo: yeah it's a json containing html content
11:58 < damarusama> it's a scrap from mnd css information
11:58 < sheldonh> nanashiRei: but you sound very convinced, so i would like to go read, rather than carry on participating in a conversation where i have an increasing sense of not knowing what i'm talking about :)
11:59 < nanashiRei> sheldonh: well it's bound to a lot of things it's quite unique alright
11:59 < nanashiRei> There is duplication possibility, as there is with sha1 but it's far lower
12:01 < sheldonh> nanashiRei: anyway, i don't know why i want to argue. i already buy that feedback can guarantee uniqueness within a single tick, and we both went in knowing duplication was possible so... erm... thanks for making me think :)
12:01 < nanashiRei> ^^
12:01 < nanashiRei> Just trying be of help, don't worry
12:02 < sheldonh> it was helpful. we use uuids at work a lot, and they worry me
12:02 < sheldonh> good to have to think
12:02 < nanashiRei> Maybe this will lighten up your mood:
12:03 < nanashiRei> I'm currently working a multi backend api that takes in 1milion requests a day, these are marked... with uuids. It has been running for 8 month now
12:03 < nanashiRei> The collumn that stores the uuid is set to unique
12:03 < nanashiRei> There wasn't an error once :D
12:03 < sheldonh> am i being grumpy? gosh, sorry. i'm actually having a really nice saaturday morning. wife got back to relieve me from 5 days of single parenting, and i've been spazzing out over a for-fun chat client since then :)
12:03 < nanashiRei> Naw, not saying that D:
12:04 < nanashiRei> you missunderstood sorry.
12:04 < nanashiRei> I'm not trying to be a jerk :x
12:04  * nanashiRei better shuts up
12:04 < sheldonh> nanashiRei: indeed. when i first objected to UUIDs, the answer i got was great: "collision is so unlikely that it would be more efficient for you to fix other bugs... forever"
12:04 < nanashiRei> :D
12:04 < nanashiRei> that!
12:04 < nanashiRei> xD
12:04 < nanashiRei> stick to that xD
12:05 < nanashiRei> it's good
12:05 < sheldonh> well, something like that. we need a new form of quotation marks for paraphrasing
12:05 < mberends> so have duplicate UUIDs ever been detected and/or documented?  Were they due to bad implementations?
12:06 < nanashiRei> mberends: as for me...i've been using them since V2 and have never read about such a case :D
12:07 < sheldonh> here's the case for just not bothering, and using random ones instead: http://en.wikipedia.org/wiki/Universally_unique_identifier#Random_UUID_probability_of_duplicates   :)
12:10 < mberends> sheldonh: nice one.  Now we just have to rely on theory and practice being the same.  In theory, they are.  In practice, they aren't always. ;)
12:11 < sheldonh> man, i can't wait for CM system written in javascript. coffeescript manifests would kick the shit out of puppet :)
12:14 < [jasper]> Havvy, so this is determined by the calling context you mean?
12:14 < [jasper]> I thought it was determined by the function it was in?
12:15 < Havvy> Every other variable is determined lexically. `this` is dynamically scoped, changing with each function call.
12:15 < Havvy> If you call a function without an object attached `f()`, `this` is either the global object or null (with strict mode).
12:16 < [jasper]> so in my example Havvy how can I make sure it works?
12:16 < [jasper]> http://www.hastebin.com/xehohebequ.coffee
12:16 < Havvy> If you call a function with an object attached, `o.f()`, `this` is the object `o`
12:16 < [jasper]> or is this just not possible?
12:16 < Havvy> Are you trying to pass the function?
12:16 < [jasper]> I'm trying to have the function send available in the listener/index.js file
12:17 < [jasper]> so I can call that function
12:18 < Havvy> I don't know enough about your libraries...and I should actually be sleeping to know what that means at the moment. :/
12:20 < sheldonh> Havvy: that was beautiful. poetry, the way the sentence structure expresses the contents of the sentence :)
12:22 < Havvy> sheldonh: The sad part is that another ... would have fixed it.
12:26 < [jasper]> yeah that's quite sad Havvy :?
12:28 < noway421> Try to use call or apply. Maybe it will help you.
12:29 < noway421> function.call(context, args)
12:29 < noway421> function.apply(context, [args])
12:32 < [jasper]> hmm noway421 I'm trying to figure out how I would use that here..
12:33 < noway421> o.f() is equivalent to f.call(o), or f.apply(o)
12:34 < [jasper]> ok noway421...but how could I use that in my example? maybe I misunderstand it
12:34 < [jasper]> but I guess I have to use 'this' somewhere
12:34 < [jasper]> to indicate I want to pass along the current context...because I want to make the function send available 
12:34 < noway421> in fact it not, but it simplest way to explain
12:35 < noway421> try f.call(this)
12:35 < [jasper]> where should I put that noway421 ?
12:36 < noway421> Emm, dont know. Where you need exec that function?
12:36 < [jasper]> noway421...http://www.hastebin.com/xehohebequ.coffee
12:36 < [jasper]> in my listeners/index.js I have some other functions...which try to use it's parent's send fuction
12:37 < [jasper]> but the parent isn't given correctly with 'this'
12:38 < noway421> where i can see index.js code?
12:39 < noway421> oh, look, you transfer `self` in args
12:39 < noway421>         require('./listeners/index.js')(socket, self, mysqlFunctions, redisFunctions, mongodbFunctions);
12:40 < noway421> but what you want? self.parent?
12:40 < sheldonh> easy now
12:40 < sheldonh> this isn't just a massive build-up to a your.mother joke, is it?
12:41 < [jasper]> noway421.... but self isn't self?
12:41 < [jasper]> noway421 I'll paste the index.js code 
12:41 < noway421> self is this in this context
12:41 < [jasper]> yeah,, but the issue is...this is incorrect
12:42 < noway421> self == this
12:42 < noway421> even `self === this`
12:42 < noway421> you pass self to your index.js
12:42 < noway421> and what you want next? self parent?
12:43 < [jasper]> all I want to do is pass the object that is returned there to the listeners/index.js file I include
12:43 < noway421> mmm
12:43 < [jasper]> so in listeners/index.js I can use the functions which get created in the return
12:43 < noway421> ohh
12:44 < [jasper]> so how can I get send and socket to be available as functions / objects in the listeners/index.js file
12:44 < [jasper]> it obviously doens't work when I put 'this' in the require call
12:44 < noway421> lol, you want to make some sort of "cross-calling"
12:45 < noway421> Okay, you need to exec this function. 
12:46 < noway421> Why not call it from index.js?
12:46 < [jasper]> noway421 ?
12:46 < [jasper]> how would I call it from index.js ?
12:47 < [jasper]> if I can't get it passed along
12:47 < noway421> something like require('xehohebequ.coffee')
12:47 < noway421> xehohebequ.coffee calls index.js in your code?
12:48 < [jasper]> this isn't really going anywhere I guess noway421
12:49 < sheldonh> right. finally, this project wants knockout.js. yay
12:50 < noway421> i dont understand what you try make :(
12:51 < noway421> But i think you need create some `helper.js`, which would exec xehohebequ.coffee and pass it to index.js
12:53 < noway421> Also, guys, check out my terminal arkanoid on node.js and coffeescript: https://gist.github.com/noway421/5140455 I added score to it.
12:55 < [jasper]> sheldonh, you want to contribute?
12:56 < sheldonh> [jasper]: i don't understand what you want to happen. i think you might have better luck if you could boil this down to a much smaller example of just the problem you're trying to solve
12:56 < [jasper]> ok, I'll just set it up differenlty
12:57 < [jasper]> because it's starting to irritate me that I can't get it solved :)
13:00 < sheldonh> [jasper]: that's why i'm not saying anything. i just think i would irritate you more :)
13:14 < mmoomm> hello
13:15 < mmoomm> can node.js recive sockets from SWF file?
13:18 < BimboO> Hello guys, I have one question for you. Can you suggest me good book for learning node.js? From scratch?
13:18 < korilo> Professional Node BimboO 
13:18 < tuhoojabotti> JavaScript the good parts
13:18 < [jasper]> got it working sheldonh
13:19 < korilo> a bit outdated now becouse we have 0.10.0
13:19 < korilo> but it should teach you the basics
13:19 < BimboO> Thank you for your response. Is node js 0.10.0 very different from other versions?
13:19 < korilo> of course giving you have the basic of JS
13:20 < korilo> in something it is (like stream)
13:20 < BimboO> Interesting, so is there any up to date book about it? 
13:21 < korilo> don't think so..the api manual and some talk/blog post maybe
13:21 < BimboO> I'm shocked how great and helpful community there is. Thank you a lot. I
13:21 < korilo> you're welcome!
13:22 < tuhoojabotti> BimboO: The streams api was just updated to be much better and easier to use.
13:22 < tuhoojabotti> But I for one haven't needed any book to get into node, all I did was learn js and read node api docs.
13:23 < tuhoojabotti> Node.js is really really simple compared to some big frameworks I have tried to use before.
13:25 < BimboO> tuhoojabotti thank you for your advice. Maybe I just need to do simple, read the api docs like you.
13:25 < tuhoojabotti> They have nice examples
13:26 < tuhoojabotti> And speaking of node, I got myself a Node.js job yesterday. As a student I'm happy. :)
13:27 < BimboO> Congratulation to you! Well done tuhoojabotti :-)
13:28 < tuhoojabotti> I hope it works out
13:34 < jsmonkey> Hi, I am new to node. I have passport wich has some helper methods such as authenticate etc. I was to make a simple api for my client side script to check for auth etc. the problem is that when I do app.get... and check for authenticate and error and all that
13:34 < jsmonkey> my route just keep spinning
13:34 < jsmonkey> it's like authenticate times out, but it works for login etc (the routes I got from passport example)
13:34 < jsmonkey> any idea?
13:35 < jsmonkey> it looks like this http://pastebin.com/nFRTvdxL
13:36 < jsmonkey> do I block or something? do I need process.nextTick and wrap the code I got in the url inside a function?
13:36 < jsmonkey> Ah, I think I need post right?
13:37 < jsmonkey> no difference..
13:57  * RandomCitizen WwW.Daniela.Kurdlander.com  For Dawnloding «Daniela Script»
14:18 < analphabet> Hey there, I'm just dropping by from #etherpad-lite-dev and wanted to ask you all to do us a little favor :)
14:18 < analphabet> Please get on http://beta.etherpad.org/p/test and type some stuff for a while (spam is highly appreciated), to help us load test our latest release v1.2.9: http://etherpad.org
14:22 < JohnMcLear> I second that motion
14:22 < JohnMcLear> Please help break it
14:22 < JohnMcLear> We have loadTesting clients n stuff but they can't break it any more..
14:24 < sheldonh> analphabet: mine said an error had occurred for a moment, and then that went away and was replaced with "screw you world", etc.
14:24 < analphabet> ah, okay
14:24 < sheldonh> i'm impressed with how it copes with cltr-x, ctrl-v on the entire document
14:27 < JohnMcLear> Slideshow view seems to work pretty well too
14:31 < TheBrayn> hi
14:33 < TheBrayn> I'm trying to compile nodejs on archlinux to put it on a ubuntu 12.04 vserver: http://codepad.org/ybQ5qNZu
14:36 < sheldonh> TheBrayn: is that really the simplest thing you could do? cross-compiling is rarely fun
14:37 < TheBrayn> I'm not crosscompiling it
14:37 < TheBrayn> it's the same architecture
14:37 < sheldonh> TheBrayn: fair enough. but presumably, targetting different versions of supporting libraries
14:38 < TheBrayn> hm maybe
14:38 < sheldonh> TheBrayn: is this a managed server where the managers are dicks?
14:38 < AlainODea> How do you use node-restify clients through a HTTP forward proxy like Squid? http://stackoverflow.com/q/15228333/154527
14:38 < TheBrayn> sheldonh: no but it's a server which I got for free from the company I work for and I don't want to cause unnecessary load
14:38 < refack> does anyone else have an issue with modules loading EXTREMELY slow in debug mode?
14:39 < sheldonh> TheBrayn: fair enough. still, if you could wait until off-peak, you could save yourself a world of pain
14:46 < JohnMcLear> Please help us break http://beta.etherpad.org/p/test by writing random crap
14:50 < zeromodulus> :/
14:51  * zeromodulus that moment when you realize redis doesn't support what you're trying to do.
14:51 < zeromodulus> that moment when I emoted something I didn't mean to emote.
14:52  * zeromodulus is having fail after fail.
14:53 < zeromodulus> so, it looks as though since Redis doesn't support JSON objects like CouchDB does...
14:53 < zeromodulus> I might have to use something like CouchDB.
14:54 < zeromodulus> MongoDB or CouchDB?
14:55 < xexe> q
14:55 < JohnMcLear> Use datababies -- UeberDB
14:56 < analphabet> erm, don't.
14:56 < JohnMcLear> Honestly though, don't ;)
14:56 < zeromodulus> oh, derp.
14:56 < zeromodulus> hset and hget are the commands I need to use. :)
14:57 < zeromodulus> yay.
14:58 < refack> do you need to index on the json properties?
14:59 < zeromodulus> probably.
15:02 < zeromodulus> It looks like Redis is pretty simplistic...
15:03 < zeromodulus> I might want to use MongoDB instead... since it has indexes.
15:04 < Aria> Redis is simplistic. Though its priority queues (sorted sets) can be used as indexes.
15:04 < zeromodulus> hrm...
15:04 < Aria> (Redis gives you the tools to create things like indexes; Mongodb hides that. Sometimes the control is nice.)
15:05 < zeromodulus> intriguing...
15:05 < Aria> It's a whole level lower in the stack. Sometimes that's win. Sometimes not.
15:05 < zeromodulus> Sounds like a win.
15:05 < zeromodulus> :D
15:05 < Aria> Depends on your use case!
15:05 < Aria> Mongo's also a great DB.
15:05 < zeromodulus> x.x
15:05 < zeromodulus> Hrm...
15:05 < Aria> We use Redis at work for queues of work.
15:06 < Aria> (The durable ones -- we use gearman for non-durable queues)
15:06 < zeromodulus> I was looking at MongoDB and CouchDB just a minute ago... but then I learned about Redis' hset and hget.
15:06 < Aria> hset and hget are awesome if what you need is key-value lookup. 
15:06 < Aria> And you can use zset to be an index for that.
15:07 < zeromodulus> I'd probably want to be able to do queries like, {key: fookey, value: foovalue}
15:07 < zeromodulus> Think that's possible with Redis?
15:07 < zeromodulus> er...
15:07 < zeromodulus> well
15:08 < zeromodulus> {type: footype, value: foovalue}
15:08 < Aria> Yes, but not in a single command. You'd have an index for fookey, you'd use that to find the "real" key to look up to get the data.
15:08 < zeromodulus> Interesting.
15:09 < zeromodulus> It sounds like a tad bit more complexity, but, is it faster that way?
15:09 < Aria> It can be.
15:09 < Aria> You can choose to sacrifice atomicity a bit that way.
15:09 < Aria> So what you'd do is put the items into a hash with a key being an integer, and the value being the stuff to store.
15:10 < Aria> Then you insert into a sorted set with key = the field to index on, member name = the value to index, rank = the key to the document.
15:10 < Aria> Then to query the index, you ZRANK fieldname fieldvalue
15:10 < Aria> That gives you the key to HGET
15:11 < Aria> ZRANK is O(log(n)), what you'd expect from an index on simple keys.
15:11 < Aria> You can also do range queries on it.
15:11 < Aria> (like an SQL BETWEEN)
15:12 < zeromodulus> O.o
15:12 < Aria> Now that said, even SQL is going to be pretty damn fast for these use cases.
15:12 < Aria> This is the kind of basic data access that a lot of people get right. But it lets you make up indexes on any ol' property of the data, because the operators are in the client code, not the database.
15:12 < zeromodulus> O(log(n)) is good right?
15:12 < kenperkins> not as good n :D
15:13 < Aria> log(n) is better than n.
15:13 < kenperkins> rather, I meant not as good as c
15:13 < kenperkins> lol
15:13 < kenperkins> not awake
15:13 < zeromodulus> O.o
15:13 < Aria> Well, depends on the constant of c and the size of your workload ;-)
15:13 < kenperkins> ok i bow to your superiority :D
15:13 < kenperkins> need coffee desperatley
15:13 < Aria> Sorted set access is O(log(n)) with O(n) space, generally.
15:14 < Aria> Hashes are O(1) with a little more than O(n) space, or so.
15:14 < zeromodulus> O.o
15:14 < niggler> kenperkins the real question is whether you need coffee script alongside that coffee
15:14 < zeromodulus> o.O
15:14 < niggler> what's a sorted set arduix 
15:14 < niggler> *Aria ^
15:15 < Aria> niggler: A priority queue. In Redis terms, the Z* commands.
15:15 < niggler> that's tragic nomenclature
15:15 < Aria> Yeah?
15:15 < kenperkins> I'm mixed on coffee. From a personal development standpoint coffee seems really interesting
15:15 < Aria> It works for me. 
15:15 < kenperkins> but it does introduce a facet to the community, which I'm not sure about
15:16 < niggler> there's a Queue ADT and a Set ADT but no Sorted Set
15:16 < zeromodulus> so, redis is like, kind of a bare bones kind of thing, where a lot of the niceties of databases like MongoDB and CouchDB are considered convenience layers that the programmer needs to create should one want them?
15:16  * Aria nods at kenperkins. I don't particularly care for it. I find that it increases my cognitive load, and syntax of JS is not where I find that people stumble or go slow.
15:16 < Aria> zeromodulus: That's one way to look at it, sure!
15:16 < niggler> and there's a PQ ADT if i haven't forgotten my theory
15:16 < zeromodulus> hmm, well, sounds cool.
15:17 < zeromodulus> certainly doesn't deter me from trying Redis.
15:17 < niggler> kenperkins coffee script is a nice honeypot
15:17 < zeromodulus> flexibility is cool and awesome.
15:17 < niggler> what are you trying to do zeromodulus 
15:17 < kenperkins> I ran redis for 2 years at my last job
15:17 < kenperkins> with nodejs no less
15:17 < Aria> Spiffy. 
15:18 < niggler> I'm surprise redis didn't shoot for the url red.is
15:18 < niggler> which incidentally is not taken
15:18 < sheldonh> as someone who hated javascript for a long time, i find coffeescript HUGELY beneficial
15:19 < Industrial> What's the best way to to request/reply between a (tcp) server and client? Say I want two services, one using the other. How do I make a round trip for each request?
15:19 < sheldonh> i'm pretty sure i wouldn't have tried node if coffee hadn't made it so accessible to me
15:19 < niggler> the problem with coffee script is that its quick to write but very slow to read
15:19 < genazt> Industrial, you dont request a tcp server. a tcp server is a stream of data
15:20 < genazt> in HTTP you request
15:20 < Aria> Industrial: Is there a protocol on top of this? (If not, you may have to invent some framing, to punctuate the requests)
15:20 < kenperkins> the problem is that you can't read coffee unless you write coffee
15:20 < kenperkins> and translating it on the fly is a pita
15:20 < Aria> Industrial: HTTP might be a good choice for that framing ;-)
15:20 < Industrial> well, say it doesn't have to be HTTP. How do I do request/reply of JSON between 2 different node processes?
15:20 < genazt> with a send 
15:20 < Aria> Industrial: for JSON, it's common to punctuate with newlines. So you read until newline, instantiate your request, do stuff, then have it reply.
15:21 < genazt> tcpsconnection.send(JSON.stringify({test: 1}));
15:21 < Aria> genazt: With "\n" at the end. So you know where to stop reading and start passing to JSON.parse
15:21 < genazt> it could break
15:21 < Aria> (Or you prefix with length.)
15:21 < Aria> What could break?
15:22 < genazt> on things like this: {"k": 'Text with a \n in it'}
15:22 < sheldonh> kenperkins: but... erm... i figured coffee would be immune from such criticisms, 'cause if i wanted you to look at my code, i would show you the compiled javascript
15:22 < Aria> genazt: No, because \n inside the data is \n not a newline
15:22 < Aria> (Or you use a streaming jSON parser that yields control back when it ends a document, rather than raising an error when it gets unexpected data after the end.)
15:22 < Industrial> right so, that's what I don't understand about streams, if theres one stream between one client and one server, on the server side when something happens for A client, how do you know which client?
15:22 < genazt> if you do data.indexOf("\n") it also catches the wirtten one
15:22 < Aria> Industrial: You pay attention to which socket it came from.
15:23 < Industrial> so you keep a list of sockets, or?
15:23 < Aria> USually you use a closure.
15:23 < genazt> well there are frameworks for this
15:23 < Aria> socket.on('connection', function(c) { ... in here, c is a single client. })
15:23 < Industrial> oh it just gets passed by the API then
15:23 < Aria> genazt: Not so. JSON.stringify doesn't emit newlines.
15:23 < Industrial> right
15:23 < genazt> that can handle streaming and sending data / json through tcp streams
15:24 < Aria> > JSON.stringify("hello\nworld").indexOf("\n");
15:24 < Aria> -1
15:24 < Aria> Yeah, though I'm not sure a framework is needed. It's pretty simple.
15:24 < Aria> Read. Buffer. Parse. Dispatch.
15:24 < genazt> >> JSON.stringify( {test: "\n\n"} )
15:24 < purr> genazt: (string) '{"test":"\\n\\n"}'
15:24 < genazt> and .indexOf("\n") would catch it
15:24 < genazt> https://npmjs.org/package/tcp-stream-muxer
15:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:25 < niggler> >> JSON.stringify({test:"חישוב_נקודות_זיכוי"})
15:25 < purr> niggler: (string) '{"test":"חישוב_נקודות_זיכוי"}'
15:25 < Aria> >> JSON.stringify({test: "\n\n" }).indexOf("\n")
15:25 < purr> Aria: (number) -1
15:25 < genazt> >> JSON.stringify( {test: "\n\n"} ).indexOf("\n");
15:25 < purr> genazt: (number) -1
15:25 < Aria> See? Doesn't find it.
15:25 < genazt> >> JSON.stringify( {test: "\n\n"} ).indexOf('\n');
15:25 < purr> genazt: (number) -1
15:25 < genazt> then its a bug
15:25 < Aria> How so?
15:25 < niggler> that's retarded
15:25 < Aria> JSON strings can't contain newlines.
15:25 < genazt> "\n" should match the newlines
15:26 < Aria> There are no newlines.
15:26 < niggler> you need to find \\n
15:26 < genazt> '\n' should match the chars \n
15:26 < Aria> JSON.stringify NEVER emits newlines.
15:26 < Aria> genazt: No, JS strings don't have an unescaped mode.
15:26 < Aria> ' and " are the SAME
15:26 < genazt> loooool
15:26 < niggler> >>> 'abc' === "abc"
15:26 < purr> niggler: (boolean) true
15:26 < Aria> If you want to match the two characters \n, take indexOf ("\\n")
15:26 < genazt> >> '\n' === "\n"
15:26 < purr> genazt: (boolean) true
15:27 < niggler> this aint C genazt 
15:27 < niggler> nor is this D, incidentally
15:27 < genazt> yes i came from c :D sry :(
15:27  * niggler pets genazt 
15:28  * genazt meow
15:28 < Aria> >> "\n".length
15:28 < purr> Aria: (number) 1
15:28 < genazt> yes ofc :D
15:28 < Aria> >> JSON.stringify("\n").length
15:28 < genazt> its one ascii char :D
15:28 < purr> Aria: (number) 4
15:28 < niggler> also one utf8 char
15:29 < Aria> ALso one char in every character set, since it's by definition a single character.
15:29 < genazt> yes but a 1 byte long one :D
15:29 < Aria> ++
15:29 < Aria> Now that's specific ;-)
15:29 < Industrial> What I'd like to do is take a big chunk of independent logic and move it to a (new) service, so I can talk to it from app/website servers instead of each including one. Say I have one service for static files, one for authentication, cache, accounts, sessions etc. Is this a good/bad idea? I'm not sure how to think about scaling, and for now it is just going to all run on one server anyway, but it has 8 cores
15:29 < Industrial> that i'd like to use. Do I spawn 8 processes/workers for each service?
15:29 < Industrial> sorry wall-of-text :X
15:29 < genazt> its bad
15:30 < genazt> cause you have to invent something that is called a ipc message system
15:30 < Industrial> (dnode)
15:30 < Aria> Industrial: That doesn't sound necessarily smart -- networking adds latency, so you have to get something for it.
15:30 < genazt> which is slower then having the same software running in 8 cores
15:30 < niggler> anyone familiar with licenses/
15:30 < Aria> What /is/ an account? 
15:30 < Aria> Sessions are hot data, and shared among processes possibly -- that makes good sense to make into a service.
15:31 < Aria> (though that service could be "a database")
15:31 < Industrial> a user
15:31 < genazt> redis :D
15:31 < genazt> database ? or do you want to have it all in memory ?
15:31 < Aria> No, a user is a body in a chair. An account is. .. . what?
15:31 < Aria> all in memory is a database. 
15:31 < genazt> wrong
15:31 < Aria> (redis = database, mongo = database, object[key] = value is a database)
15:32 < Aria> (Not a very good one, perhaps, but it's a database)
15:32 < Industrial> yes, a database powers the service, but I guess the account service would be the only thing accessing the account database.
15:32 < genazt> Definition: A database is an application that manages data and allows fast storage and retrieval of that data.
15:32 < Aria> If you need processing on top of the database, sure. And if that processing needs to track state, it's especially nice to have live code attached to it.
15:32 < Aria> But often that can live in-process.
15:32 < Aria> genazt: Whose definition is that?
15:32 < swaj> Industrial: then why not use something like LDAP?  seems like you're re-inventing the wheel :)
15:33 < Aria> Oh god. LDAP.
15:33 < Industrial> it would allow for accounts over multiple sites and also customization of the format per site, so that each site can store different data (yay mongodb)
15:33 < genazt> the c one :D
15:33 < Aria> "Problem: I need an account database." "Solution: LDAP" "Now I have two problems"
15:33 < swaj> there's nothing wrong with LDAP
15:33 < genazt> whats wrong with ldap ?
15:33 < Aria> THe horrible protocol, the amazingly bad query language, the crappy schemata.
15:34 < Aria> The annoying implementations.
15:34 < genazt> name one better auth service ?
15:34 < genazt> oauth ? lol
15:34 < genazt> openid ? more lol
15:34 < Aria> LDAP isn't an auth service.
15:34 < genazt> ldap can be an auth serivce
15:34 < Aria> That's also a problem. It's just a part of an auth service.
15:34 < genazt> ldap can be used for more
15:34 < Aria> LDAP is just a data access protocol.
15:35 < genazt> and its a good one
15:35 < sheldonh> i'm also keen to hear about the better alternative
15:35 < Aria> I'm aware. It's just a crappy database written for corporate directory sysadmins rather than ... well, sane people.
15:35 < zeromodulus> I like my sugar with coffee and cream.
15:35 < Aria> mongodb. Couchdb. Both excellent.
15:35 < Industrial> swaj: I'm getting constricted into youtube videos of service oriented architecture and what I'm really trying to do is lay the groundworks for a playform so I can easily manage and spawn nodejs servers in environments (live, acc, test, dev). Chopping everything up into their own logic(al) parts seemed like a good idea.
15:35 < sheldonh> Aria: those aren't authentication services either
15:35 < Aria> Exactly.
15:35 < sheldonh> Aria: it sounds like your advice is "write your own authentication service"
15:35 < Aria> (Good authentication services: Kerberos.)
15:35 < Aria> (I do believe there are no others out of the box.)
15:36 < Industrial> swaj: http://images.gammatester.com/pics/266480b9ed3b8a104aadb8c1dbaee20a.png
15:37 < sheldonh> Aria: back here on planet earth kerberos support is quite hard to build into webapps and ldap's authentication model is actually quite nice
15:37 < Aria> Industrial: Making an authentication service is a good start -- but that's not necessarily an account service. A service that gives auth tokens, and gives you the ability to validate them -- that makes a good service. Just a proxy for a database server? That's a crappy service.
15:37 < sheldonh> Aria: sounds like you just hate the query language. and that's fine. the query language sucks. but you learn it and then there you are
15:37 < Aria> Got a good LDAP library for Node?
15:37 < swaj> Aria: LDAP is much, much easier to use and understand than kerberos
15:37 < Industrial> Aria: what? no. That's exactly what I'm planning to do for the Session service (the auth tokens)
15:38 < Aria> swaj: Well, sure. Databases are easier to understand than authentication services. 
15:38 < swaj> Aria: http://ldapjs.org/
15:38 < Aria> Industrial: That makes sense. THAT makes sense to offload.
15:38 < Industrial> Aria: did you check the pic :)?
15:38 < Aria> swaj: And how is this categorically any better than mongo? That's not an auth service. That's a database query.
15:38 < sheldonh> Aria: the only real beef i have with ldap is that it encourages you to centralize authorization
15:39 < swaj> Mongo sucks?
15:39 < Aria> Industrial: I did. There's no real detail on there.
15:39 < Aria> swaj: citation needed?
15:39 < sheldonh> Aria: it sounds to me like you've only seen one of ldap's two available authentication models
15:39 < genazt> mongo doesnt suck
15:39 < Aria> sheldonh: Nope. I'm pretty deeply familiar with it.
15:39 < swaj> Aria: http://www.youtube.com/watch?v=b2F-DItXtZs
15:39 < Aria> sheldonh: It's still just a database.
15:40 < Aria> swaj: I'm aware of that video. So?
15:40 < Aria> (s/mongo/ldap/; s/webscale/enterprise scale/)
15:40 < genazt> :D
15:40 < Aria> (they're more similar than different. Except LDAP has some really arbitrary and annoying limits)
15:40 < sheldonh> smells like uninformed bigotry to me, i'm out
15:40 < Aria> Cheers!
15:42 < swaj> Aria: not being ACID compliant is a big weakness, imo
15:42 < Industrial> Aria: No i guess not, I could add some .. I'm wondering if there's any good material on this, and on what specifically I should search. I'm fine implementing the parts with Node.JS myself (eventually). I just don't understand the architecture :(
15:43 < Aria> swaj: Sometimes. Sometimes it's not important. (We run MySQL without ACID most of the time at work... Too slow to go transactional, so we designed around it)
15:43 < remysharp> I have node-gyp 0.9.x installed, but when I run npm (from 0.10.0 release) it's using node-gyp 0.8.5 (causing modules to fail to build). Any tips on what I can do to fix that?
15:44 < Aria> Industrial: Look for computation you can either offline or parallelize. Make those services. Caching account credentials into tokens is a win.
15:45 < swaj> Aria: not having transactions kinda stinks too.  They sorta take this "roll-your-own" approach.
15:45 < Aria> swaj: Yup! Not perfect for everyone. Though most of their updates ARE transactional.
15:45 < Aria> (Small changes are atomic, large ones not.)
15:45 < swaj> Aria: yeah <3 postgresql
15:46 < Aria> Amen to that.
15:46 < Aria> It's my go-to database in general.
15:46 < swaj> same
15:46 < Aria> MySQL at work also ain't bad.
15:46 < Aria> We do good stuff with it. It's got lots of options for turning off transactionality, and it's very optimizable.
15:46 < swaj> MySQL/MariaDB/insert-fork-here is too prone to fucking up your data unless you're careful.
15:47 < Industrial> Aria: I was thinking of having the reverse proxy talk to the cache and the cache doing the actual requests to the websites, caching the results, so the websites become services to the cache and all the proxy does is deal cached results.
15:47 < swaj> I just prefer Postgres style of "You try to give me data that doesn't fit the schema, I'll tell you to go away" instead of inserting crap blindly using some weird defaults.
15:47 < genazt> Industrial, varnish ?
15:48 < Industrial> I have no idea yet what to cache and what not :)
15:48 < Aria> Industrial: If your architecture makes cache invalidation easy when you need it, that sounds like win. Not all systems are easy to do that with.
15:48 < swaj> Industrial: I guess my point to you would be that there are 1000 open-source projects out there that do all of the things in your diagram, without having to re-invent the wheel in node :)
15:48 < Aria> swaj: Going schemaless at work would be win. It's SO expensive to do the schema changes online (since we have hot tables and a large userbase)
15:48 < Industrial> swaj: I'm doing this for fun, though.
15:49 < Industrial> to learn how it is done
15:49 < genazt> you mean cloud like services ?
15:49 < Industrial> yes
15:49 < sheldonh> funny how things have changed. that now, it's cheaper to cope with schema change in the code
15:49 < swaj> Aria: we actually did that -- a developer at work created a "metabase" system for having schemaless storage on top of Oracle.  It's actually really, really fast.  He's one of those crazy talented DB gurus.
15:49 < genazt> to access part of your software over the net
15:50 < Aria> sheldonh: Yeah, for sure.
15:50 < sheldonh> once upon a time, you'd have been laughed out of town for that idea :)
15:50 < Aria> swaj: Yeah. We did similar. (We = I, I suppose). We use stored procedures as a barrier to the schema, and we can have multiple versions of the procs in play, and they can handle the interface.
15:50 < Aria> It's weird but works.
15:50 < swaj> Aria: and the metabase caches the *entire* DB in memory.  It's sitting on a webserver with 128 GB RAM :)
15:51 < Aria> swaj: Wow. Our MySQL server is about half that big, and has most of the DB in RAM, so I get the idea.
15:54 < swaj> Aria: well.. Java... so yeah.... memory whore :)
15:54 < Aria> Hehe.
15:55 < swaj> funny is the guy built this "metabase" with a restful API like 6-7 years ago
15:55 < swaj> before it was all the rage
15:55 < swaj> the DBA's looked at him like he was smoking crack
15:58 < zeromodulus> how do I get node to run the REPL when calling it from a shell script?
15:58 < zeromodulus> I tried the --interactive flag.
15:58 < zeromodulus> I'm using a script because I want to source some environment variables.
15:59 < zeromodulus> then start up the REPL.
15:59 < zeromodulus> but I also want to pass it a little --eval script to initialize some libraries.
15:59 < zeromodulus> calling this in a script seems to work, node --interactive --eval 'console.log(process.env.REDISURL);'
15:59 < zeromodulus> but if I try to do...
16:00 < niggler> zeromodulus are you trying to do something like `python -i`?
16:00 < zeromodulus> DBLOAD="var db = require('./lib/db');"; node --eval "$DBLOAD" it just hangs.
16:00 < zeromodulus> yeah, I think so.
16:00 < niggler> have you tried .load?
16:00 < niggler> so run node 
16:00 < niggler> and then .load your_file.js
16:01 < genazt> http://nodejs.org/api/repl.html ?
16:01 < AlainODea_> If you want a good picture of where and when caching makes sense and a generally good understanding of scalability it is worth reading Art of Scalability.
16:01 < niggler> no that's for running a repo in your script geb 
16:01 < Industrial> Can I bounce HTTP Requests between servers? e.g. I make one server that only routes requests based on hostname and which app servers are registered to it
16:01 < niggler> * genazt 
16:02 < genazt> so you set your env up and then start a repl server
16:02 < genazt> to interact with node
16:02 < Industrial> and maybe before that a service that adds/checks for a session token
16:02 < tjfontaine> Industrial: https://github.com/nodejitsu/node-http-proxy
16:02 < AlainODea_> Anyone have a sense of how to run restify through a web proxy like Squid?
16:03 < genazt> Industrial, yes that is called load balancing or proxy
16:03 < tjfontaine> AlainODea_: what's not working?
16:03 < Industrial> So how do I pass on the HTTP traffic between servers?
16:03 < Industrial> I can't send/serialize a req/res object
16:04 < AlainODea_> I'm not exactly certain since it's deep inside Joyent's imgadm, but it looks like restify is attempting direct connections instead of using the http(s)_proxy environment vars.
16:04 < genazt> you send the data that comes from the client and send it via a tcp stream to the other server
16:04 < Aria> Industrial: Proxying. You actually have to start a new request and pass it through -- use something like node-http-proxy or substack's modules.
16:04 < genazt> maybe you repack some things (like new headers or so)
16:04 < tjfontaine> Industrial: you need to take your req and fake it to the dest, then pipe the req to it, and then pipe the response from it to the client
16:04 < Industrial> do I open a client from server to server for each request?
16:05 < genazt> yno :D
16:05 < genazt> http has keep alive
16:06 < Industrial> then on the 'second' server, how do I know which data is from which request? if the socket represents one connection to one other server, all i know from the data coming in is that its coming from over there, right?
16:06 < genazt> and its better to route the tcp streams instead of sending the req/res objects
16:06 < genazt> well the proxy must handle that
16:06 < genazt> you calc your response and sent it back to the proxy
16:07 < genazt> the proxy must know to which client it must sent it
16:07 < tjfontaine> AlainODea_: it would seem like from the issue you commented on there is work underway to support it, but not yet, https://github.com/joyent/smartos-live/pull/142
16:07 < Industrial> internet <-> proxy <-> server1 <-> server2
16:07 < genazt> why do you want to proxy it twice ?
16:07 < Industrial> say I have N servers :)
16:07 < sheldonh> or internet <-> proxy <-> [server1, server2] ?
16:08 < genazt> ah that makes more sense :D
16:08 < arlolra> einaros: any reason ws doesn't support bufferedAmount?
16:08 < tjfontaine> AlainODea_: fwiw that patch seems wrong, as I think the `request` module can support proxy which would be a better mechanism
16:08 < genazt> yes and then ?
16:08 < Industrial> no, server 1 uses server 2? say server 1 only checks each request coming in for an auth token and adds one if its not there
16:08 < Industrial> cant it just pass on each request when its done with it to another server?
16:08 < genazt> you want to build a roundtrip for a request ?
16:08 < Industrial> yes :)
16:09 < AlainODea_> tjfontaine: Trent is looking for some contributions to support that.  MerlinDMC had a patch for imgadm v1 using cURL.  I was hoping I could provide a patch for imgadm v2 or restify that uses Node.js directly.
16:09 < genazt> client -> proxy -> auth -> controller -> generator -> cache -> client
16:09 < genazt> and each step would be a different server ?
16:09 < ashnur> morning
16:09 < Industrial> not each, some of the logic would be in an 'app' server (express)
16:10 < Industrial> which would often be the final destination before the response gets sent
16:10 < sheldonh> Industrial: is it http from the internet to the proxy?
16:10 < tjfontaine> AlainODea_: right, such a patch would change any use of http(s).get with something like https://github.com/mikeal/request where you can `var r = request.defaults({'proxy': process.env.http_proxy})`
16:10 < genazt> yes but the idea behind it is to build the response via a roundtrip through more than one server
16:10 < Industrial> sheldonh: yes and I'm trying to decide what to do with it further :)
16:11 < Industrial> genazt: right so say the app node finally forms a response, on the proxy which holds the client connection, how do I know which response is for which client?
16:11 < Industrial> again as easy as a closure?
16:11 < sheldonh> Industrial: so you're building a service stack. make the proxy responsible for stripping all the headers any of your services might add. then have your service add http headers to describe their opinions as they pass the request on
16:12 < genazt> normaly a proxy either adds a identifier or it opens a new connection to the backend
16:12 < AlainODea_> tjfontaine: I like that solution.  I am glad I asked.  I will give that a try.  Thank you :)
16:12 < Industrial> sheldonh: sounds cool, how do I actually pass the request on?
16:13 < sheldonh> Industrial: you don't really. you establish a new request, copying the properties of the incoming request that you care about (e.g. headers, body, url) into it
16:13 < tjfontaine> AlainODea_: the api is not 1:1 though, so it's not a simple rip and run solution :)
16:13 < Industrial> nvm that, I guess my problem is solved if they all have an identifier from the start ..
16:13 < Industrial> sheldonh: ah.
16:13 < genazt> which would lead in a new connection
16:13 < Industrial> so, a new .connect() ?
16:14 < genazt> no
16:14 < sheldonh> Industrial: the disadvantage is that each service in the stack must know which service comes next. that's distributed synchronisation, which i hate
16:14 < genazt> http.request(....
16:14 < AlainODea_> tjfontaine: I'll consider myself forearmed with that caveat. Good to know.
16:14 < Industrial> ah.
16:14 < sheldonh> Industrial: but your alternative is to have the proxy coordinate the requests, and that might overburdern your proxy. you'd need to play around with it
16:14 < genazt> if you build it all by yourself i would try to avoid the http stack
16:15 < Industrial> sheldonh: I was planning to make it all very configurable so I can spawn nodes from JSOn configurations (ultimately from an admin with a db) that wire them up.
16:15 < Industrial> they register by name and have dependencies
16:16 < sheldonh> Industrial: that would be my preference, to have a central coordinator :)
16:20 < Industrial> genazt: so the options argument for http.request(); is all I need to get out of a request to 'copy' it over from one service to another? I guess I would have to manage/serialize the http.ServerResponse API in order to e.g. set a header in a 3rd-4th server (but actually send the response back from the proxy)
16:21 < genazt> yes you could do that so
16:21 < genazt> but i wouldnt choose http for the inner network communication
16:22 < Industrial> what would you do? ZeroMQ with REQ/RES and DEALER/ROUTER pairs?
16:22 < genazt> no i would parse the request once (at the proxy) and then start the roundtrip with pure tcp sockets
16:22 < genazt> sending json or buffers
16:23 < genazt> which strips the http packing and http parsing which you would have if you use http
16:23 < Industrial> right
16:23 < tjfontaine> are we only talking simple GET's here?
16:23 < genazt> i dont think so
16:24 < Industrial> no
16:24 < genazt> the proxy can communicate with a file system to store post data (files)
16:24 < tjfontaine> ya if you're planning on not re-using http for internal transport, intermediate storage or huge memory will be required
16:24 < genazt> or you end up sending the complete files over the inner net :D
16:25 < tjfontaine> though I guess if you're waiting in between for reqs, then storage is always better than buffering it
16:25 < Industrial> no i'm just very unexperienced with this and I want to look beyond having one proxy and many app nodes that each have their own db and do their own thing.
16:26 < Industrial> I'd like it really easy (+ button) to pop an app node, and have it powered (optionally) by all these services :)
16:27 < genazt> well as long as the other services dont need to talk to the outer net (internet) i would not choose http for communication
16:29 < Aria> I like HTTP because caching is often something you want to grow, and its caching semantics are very good.
16:30 < genazt> yes but if you have to pass it around through more servers it adds a time (for parsing/packing) if you choose http for inner communication
16:30 < arlolra> are there any websocket clients for node that support bufferedAmount?
16:31 < Aria> There's always some parsing. I suspect that if that's a huge overhead, you're doing it wrong.
16:31 < genazt> well json parsing is faster then parsing http requests or ?
16:32 < Aria> Not that significantly.
16:32 < Aria> Some, sure. But metadata separation is nice.
16:37  * Aria goes about trying to figure out leveldb-scuttlebutt
16:47 < Industrial> https://gist.github.com/Industrial/9e29548f7b4457127e72#file-server-js-L19 How do I know when to remove that object?
16:48 < Industrial> (I guess I'm putting it into redis or something)
16:48 < Aria> There are only two hard problems in computer science. Naming things and cache invalidation.
16:50 < zeromodulus> hrm...
16:50 < zeromodulus> do --eval scripts have a problem with requiring stuff or something?
16:50 < zeromodulus> I remember in Ruby I could do something like... -r 'lib_name'
16:50 < zeromodulus> I want to do something similar with node.
16:52 < zeromodulus> hrm... looks like I'll have to make a REPL script.
17:11 < zeromodulus> why does `node -e "require('./lib/foo')"` not work?
17:11 < zeromodulus> with v0.8.20
17:12 < zeromodulus> hrm...
17:12 < zeromodulus> I think I know why.
17:17 < niggler> zeromodulus i can't seem to replicate the issue.  you have a sample?
17:17 < niggler> i tested with a script that requires another, and it works fine ...
17:45 < oxigen8> morning
17:47  * niggler pets oxigen8 
17:52 < erichocean_> grr, anyone know how to fix node-gyp on mac os x? https://gist.github.com/erichocean/a0c2f4ca0757f6085e5d
17:52 < niggler> compile from source
17:52 < niggler> or hack gyp
17:52 < niggler> lol nvm wrong error
17:52 < niggler> i thought it was a fat binary ssue
17:53 < erichocean_> it'd be nice if it said what file execvp was looking for... 
17:53 < niggler> wheres the repo
17:53 < erichocean_> https://github.com/developmentseed/node-sqlite3
17:53 < erichocean_> is what I'm trying to build
17:55 < niggler> hmm not getting the same error
17:55 < niggler> what version of osx
17:55 < erichocean_> 10.7.5
17:55 < niggler> and did you `npm install` first?
17:55 < erichocean_> that failed
17:55 < erichocean_> same error
17:56 < niggler> from the node-sqlite3 directory?
17:56 < erichocean_> oh, no, I just did npm install sqlite3
17:56 < niggler> clone the repo
17:56 < niggler> go in
17:56 < niggler> and then `npm install` and `./configure`
17:56 < niggler> make sure that works first
17:57 < erichocean_> gah, same error o_0
17:58 < niggler> did the npm install fail or the configure fail
17:59 < niggler> and did you install the command line utils from xcode?
17:59 < ashnur> :D
18:00 < erichocean_> niggler: yup
18:00 < erichocean_> I compile all sorts of stuff
18:00 < fusiongrokker> are there any better caching options out there than this one? https://github.com/ptarjan/node-cache -- not that there's anything wrong with it, just curious if there's anything "smarter", maybe with LRU/LFU/etc options for cache item removal... ?
18:01 < niggler> erichocean did you mess with python at all?
18:02 < erichocean_> I hate python
18:02 < erichocean_> I'm sure it's python
18:02 < erichocean_> I can run python fine from the command line
18:02 < niggler> i meant did you try to override the existing python on osx?
18:03 < erichocean_> how would I do that?
18:03 < niggler> $ defaults read com.apple.versioner.python
18:03 < erichocean_> for all I know, brew or macports installed it
18:03 < SomeoneWeird> https://fbcdn-sphotos-a-a.akamaihd.net/hphotos-ak-prn1/65540_487196038003697_1542462425_n.jpg
18:03 < niggler> $ which python
18:03 < erichocean_> defaults read com.apple.versioner.python
18:03 < erichocean_> 2013-03-16 10:59:57.543 defaults[73212:707] 
18:03 < erichocean_> Domain com.apple.versioner.python does not exist
18:03 < niggler> lol SomeoneWeird 
18:04 < erichocean_> it's /usr/local/bin/python
18:04 < niggler> yeah its not the default
18:04 < erichocean_> and it points to: lrwxr-xr-x  1 root  admin  71 Mar 16 10:47 /usr/local/bin/python -> /System/Library/Frameworks/Python.framework/Versions/Current/bin/python
18:04 < erichocean_> well, I can rm it
18:04 < niggler> why isn't it just /usr/bin/python
18:05 < erichocean_> okay, now it is
18:05 < niggler> not on 10.7.5 but I see /usr/bin/python is a binary on 10.8.3
18:05 < erichocean_> a binary? or a symlink
18:05 < niggler> its a real binary 
18:06 < niggler> anyway, try again
18:06 < erichocean_> same error
18:07 < erichocean_> what's your PYTHONPATH ?
18:07 < niggler> unset at the moment
18:07 < niggler> wipe PYTHONPATH, PYTHONHOME and PYTHON
18:08 < erichocean_> heh, echo $PYTHON is /opt/local/bin/python
18:08 < erichocean_> which doesn't even exist, that must be the problem
18:09 < niggler> that looks like a brew or macports vestige
18:09 < erichocean_> booyeah
18:09 < erichocean_> success, thanks a ton
18:10 < niggler> now its time to write a blogpost about it
18:10 < niggler> so that no one else struggles with this
18:10 < erichocean_> haha, it looks like macports appended it to my .profile
18:10 < niggler> try this
18:10 < niggler> put back the symlink
18:11 < niggler> nvm 
18:11 < niggler> what's your $PATH?
18:11 < niggler> does /usr/bin show up first or /usr/local/bin
18:12 < erichocean_> local/bin
18:14 < niggler> i wonder what happens if you restore the symlink (so the default python would be the f'd up one) but set the PYTHON variable to the original /usr/bin/python
18:15 < niggler> (basically, does it look at $PYTHON or use $PATH resolution)
18:15 < erichocean_> it looks at $PYTHON AFAICT
18:16 < erichocean_> well, I did the write up here: https://gist.github.com/erichocean/5177582  Thanks again.
18:22 < Slade-> is anyone aware of a node.js project that throws up a website you can use as a SQL IDE?  (least where you can run queries and get results)
18:26 < bencevans> Slade- if you're using sequlize you can use https://github.com/sequelize/sequelize-admin
18:26 < Slade-> i'm not using anything. i just wanted to see what was out there ;)
18:27  * Slade- wonders what sequelize is
18:28 < bencevans> "Sequelize is an easy-to-use multi sql dialect object-relationship-mapper for node.js. It currently supports MySQL, SQLite and PostgreSQL" ;)
18:28 < Slade-> snazzy
18:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:42 < zeromodulus> welp... ditching redis.
18:43 < zeromodulus> in favor of... MongoDB!
18:45 < Slade-> hate that mongodb license. other than that it seems awesome
18:46 < zeromodulus> where's there to hate about the license?
18:47 < niggler> What's the advantage of AGPL over GPL
18:47 < zeromodulus> I dunno...
18:47 < zeromodulus> O.o
18:48 < niggler> we are used to standard stuff like GPL or MIT or Apache
18:48 < niggler> but you always have to be careful
18:49 < joelmob> someone knows of a IDE that can start processes in tty mode? other than tmux + vim etc
18:49 < zeromodulus> So is using MongoDB going to bite me later on?
18:49 < zeromodulus> Due to some licensing concern?
18:49 < niggler> none of the licensing concerns are relevant for a small startup
18:49 < niggler> for google?  most likely it'll be a big issue
18:50 < zeromodulus> Oh, but noncommercial modifications only means companies can't use modifications?
18:50 < zeromodulus> modified versions.
18:50 < zeromodulus> rmh..
18:50 < zeromodulus> Maybe I'll use CouchDB. o.o
18:50 < asdf12> premature problems
18:50 < zeromodulus> I used CouchDB before, and it was pretty awesome.
18:50 < niggler> I'm pretty sure it makes no business sense to use something whose licensing terms aren't absolutely clear
18:51 < niggler> asdf12 nows the time to figure it out though
18:51 < niggler> its much harder to fix problems later, as shown in the controversy in the oracle-google java case
18:52 < asdf12> nah thats more of a hey we DO have a problem right now that they chose to ignore
18:52 < asdf12> given by the internal memos that were released
18:53 < niggler> here, if you know that mongo has a strange-ass licensing setup, its easier to just choose something else than to hope it won't be a problem later on
18:53 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:54 < asdf12> yea but you're trying to fix problems that may or may not be a problem, that's weird
18:54 < peterschmidler> Helli everyone. What's the best practice for placing the client side js in a node app? 
18:56 < asdf12> besides if your start up grows, you can afford to pay for the proper licensing anyway
18:57 < niggler> asdf12 https://github.com/stephen-hardy/xlsx.js/issues/8
18:57 < niggler> sometimes crap like that happens
19:00 < zeromodulus> lol... niggler.
19:00 < zeromodulus> funny names are funny.
19:00 < niggler> its apt, given the conversation
19:01 < zeromodulus> eh?
19:01 < zeromodulus> lol @ "stephen-hardy: Hello Niggler,"
19:01 < niggler> http://www.merriam-webster.com/dictionary/niggler
19:02 < zeromodulus> I see.
19:03 < niggler> actually, https://github.com/niggler/js-xlsx was born out of that frustration
19:03 < niggler> so in some strange sense the licensing issue was a good thing
19:34 < bencevans> €
19:34 < bencevans> oops sorry :/
19:44 < zeromodulus> is there a way to alias gcc-4.2=gcc and have ./configure scripts pick up on it?
19:44 < zeromodulus> or am I better off creating symbolic links?
19:46 < zeromodulus> symlinks it is.
19:51 < Industrial> https://gist.github.com/Industrial/85d9111e2d24a425ee85 Will this (using Q promises) call sadd and sort in series, and hmset and sadd&sort in parallel?
19:56 < pyykkis> Industrial: yap
20:02 < zeromodulus> yay... couchdb.
20:02 < Industrial> pyykkis: good. nice terse format :)
20:03 < Industrial> I'm not sure to what extent I should provide promises to other services
20:03 < Industrial> err, other code>
20:03 < Industrial> should set return a promise?
20:11 < samholmes> I was thinking of connecting to peeps here to create a team. However, my major concern is mutiny. How do I prevent mutiny?
20:12 < yawnt> samholmes: kidnap their families and threaten them
20:12 < niggler> create a team of 1 samholmes 
20:12 < yawnt> or just put everyone on a boat with you being the single one with the key to food supplies
20:12 < samholmes> yawnt: I know that. I was asking how. ;)
20:12 < yawnt> samholmes: it's a way to prevent mutiny
20:12 < niggler> this is the internet -- its always a coalition of the willing
20:12 < yawnt> just buy some "Kidnapper 101" dammit, i don't know
20:12 < samholmes> niggler: Haha. I've been doing that for many years, however, I'm not productive enough on my own.
20:13 < samholmes> yawnt: You're nick is kinda like the word yawt.
20:13 < niggler> or yawn
20:14 < samholmes> niggler: do you ride solo?
20:14 < yawnt> my nick was yawn
20:14  * samholmes yawns
20:14 < yawnt> then some german dude from berlin decided it was cool to register it on both github and irc
20:14 < yawnt> so i had to improvise
20:14 < niggler> i have a few employees now, but for a long time I worked solo
20:14 < niggler> people can't keep up with my hours :/
20:14 < samholmes> niggler: what do you mean about that?
20:14 < niggler> but honestly, its easiest to put first iterations together yourself
20:15 < niggler> if you imagine a development cycle involving an initial version and a rapid set of iterations
20:15 < niggler> its hard to get people involved in the initial version
20:15 < samholmes> As Denzel once said, Well alright!
20:16 < niggler> its easy to get people involved in iterations and your risk is mitigated by the fact that you still retain the core
20:16 < niggler> so i have a large system with many moving parts, and different people work on different parts, but so long as I retain the secret sauce I still retain control
20:17 < samholmes> Do you keep a portion of the code base private?
20:17 < niggler> that was the lesson i learned from http://tom.preston-werner.com/2011/11/22/open-source-everything.html :)
20:17 < niggler> samholmes yeah there are 9 different repos that come together in the production servers
20:18 < asdf12> free work what
20:18 < niggler> two of which i keep to myself because those are the secret sauce
20:18 < ningu> samholmes: what project?
20:18 < niggler> but definitely read that article
20:18 < asdf12> judging by the title it says everything
20:18 < asdf12> withholding some repos isn't everything
20:19 < ningu> beware of the repo man
20:19 < niggler> it also depends on context
20:19 < niggler> for a web app, rarely is the code the key asset
20:20 < ningu> niggler: so what is the key asset then, in your opinion?
20:20 < niggler> github could release all of its code and still retain a strong following of paying users
20:20 < asdf12> user base
20:20 < asdf12> most of the time
20:20 < niggler> trust
20:20 < niggler> its not just having a user base
20:20 < asdf12> yea
20:21 < ningu> well, I don't trust google to host my app (google app engine and whatnot). but they seem to be doing fine.
20:21 < asdf12> you do to some degree if you're using it
20:21 < niggler> I've completely switched to duckduckgo, for example
20:21 < ningu> yeah, I don't mind using google search or gmail.
20:22 < ningu> I'm not talking about privacy concerns for personal information (obviously a real issue). just dependencies for web apps.
20:22 < ningu> if google changes terms or I don't like how their search works I can just use something else. but if my app depends on google's servers and they make a change I'm fairly screwed.
20:23 < niggler> also why i remain wary of AWS (and, by extension, heroku and other services)
20:23 < ningu> it's different from, say, mongodb ceasing development or whatever because I can still use old versions. that may not be ultimately sustainable but at least it will work for the short term.
20:24 < ningu> niggler: yes, but it's not that hard to move your server from AWS to elsewhere.
20:24 < ningu> annoying but not difficult.
20:24 < niggler> the calculus changes when every hour of downtime costs 10K or 100K or 1M
20:24 < ningu> ok, fair enough
20:24 < ningu> that's not my situation.
20:25 < asdf12> isn't that completely an issue with decentralizing your app?
20:25 < asdf12> for scalability 
20:25 < niggler> even when you use a cloud solution like AWS, a good portion of your codebase will involve techniques designed to scale to the specific provider
20:25 < peterschmidler> What's the best practice organizing my client side code. E.g. minifying building etc....
20:25 < niggler> so the AWS scaling techniques will differ from Azure scaling etc
20:26 < ningu> peterschmidler: grunt?
20:26 < niggler> peterschmidler cat :)
20:26 < ningu> grunt > cat
20:26 < ningu> although cat works :)
20:26 < niggler> >>> "grunt" > "cat"
20:26 < purr> niggler: (boolean) true
20:26 < GoddeR> Hello I'm pretty new the node, I am getting this error with appendFile when doing many calls
20:26 < peterschmidler> niggler: ningu: What about require?
20:26 < niggler> lol
20:26 < GoddeR> { [Error: EMFILE, open 'data.txt'] errno: 20, code: 'EMFILE', path: 'data.txt' }
20:26 < asdf12> does it? i dont have the experience, but i would imagine a lot of the app should be platform/provider independent
20:26 < GoddeR> My understanding is that is error has to do with to many open files
20:26 < asdf12> then as you say, the core wouldn't be
20:26 < ningu> peterschmidler: well, sure. but that's a different kind of organization. I thought you meant optimizing delivery to the client.
20:26 < asdf12> but it means less moving parts when you need to move
20:27 < niggler> peterschmidler you'd need to have something that implements require on the client
20:27 < peterschmidler> ningu: Also organizing my client side code into smaller modules...
20:27 < ningu> peterschmidler: well, yes, for that require should work fine.
20:27 < asdf12> EMFILE means the os fd limit is being hit
20:27 < niggler> you can increase that limit GoddeR 
20:28 < niggler> ulimit -n iirc
20:28 < peterschmidler> ningu: I'm having a hard time setting it up the 'Right' way...
20:28 < ningu> peterschmidler: you need to decide if you want to maintain the files separately in modules and then cat them all together in one blob for the client, or implement some sort of client-side require (there are various attempts to do that)
20:28 < niggler> peterschmidler depends on the "type" of project you are doing
20:28 < ningu> for example browserify, I think, does client-side require.
20:28 < niggler> are you trying to write a pure-client or pure-server or hybrid?
20:28 < samholmes> niggler: what hosting do you use then if not aws or gae?
20:28 < GoddeR> any common file for this issue? 
20:28 < peterschmidler> niggler: hybrid
20:29 < niggler> samholmes i like self-hosting :)
20:29 < ningu> GoddeR: I think there is a commandline option to change the max number of file descriptors
20:29 < niggler> its a bit more expensive, but its far better than trying to explain that a service is down because of a third party provider
20:29 < GoddeR> but is this the proper solution? should i que it somehow ?
20:29 < GoddeR> queue
20:29 < ningu> GoddeR: well, sure. you can do that too.
20:30 < GoddeR> hmm
20:30 < genazt> GoddeR, if your os can do more you could raise that limit
20:30 < ningu> there isn't an obvious right answer there, it depends on your hardware and other requirements
20:30 < genazt> the default value of this isnt that high
20:30 < ningu> yes and OS too
20:30 < GoddeR> im using aws ec2 micro
20:30 < GoddeR> so im just at the default limit i guess
20:30 < genazt> yes (it should be 1024 open files)
20:30 < samholmes> niggler: VPS?
20:31 < ningu> I would probably not open more files than that on ec2 micro
20:31 < ningu> but test it and see what happens
20:31 < niggler> i already colocate servers at a few places so I just use those
20:31 < Industrial> https://gist.github.com/Industrial/48c37e81df1c9d36fd9d/61ae8ad2d4d2860ddd7f367cb037f4b9ab45081c#file-index-js-L47 Say I would use 'just' TCP to speak stuff between my servers, and I have these add/del/get functions I want other services to be able to call and get results from, how would that work?
20:31 < GoddeR> hmmm ok thanks :)
20:31 < niggler> but starting from a blank slate VPS is ok
20:31 < ningu> GoddeR: with ec2 micro you also have to be careful not to overuse the cpu or you will get throttled
20:32 < ningu> anyway I would just experiment with either raising the limit or queueing
20:32 < asdf12> i would queue
20:32 < genazt> i would raise
20:32 < samholmes> niggler: I think I find AWS S3 to be slower than if I hosted the photos on my VPS myself. :\
20:33 < asdf12> if your app is using 1,000 fds to open files what the ...
20:33 < samholmes> fds?'
20:33 < genazt> well the ulimit isnt only for your app
20:33 < genazt> it is os wide
20:33 < peterschmidler> I am using hot node and whenever I change something in ap.'s I get 'Service Temporarily Unavailable' ... I am writing in Coffeescript so on save the JS gets built and a fear it interferes with hot node somehow... Any idea anyone?
20:33 < ningu> my lowest level vps on 6sync is wayyyyy faster than ec2 small
20:33 < asdf12> there's very little in a server os that will want to fds
20:34 < genazt> what is hot node ? oO
20:34 < genazt> asdf12, maybe he runs a ftp ? or an email server ? how do you know how much fds are opened by other applications ?
20:35 < asdf12> why would any of those require that many fds?
20:35 < genazt> why not ?
20:35 < genazt> there if for sure a reason that so many fds are open
20:36 < asdf12> i guess maybe for a really busy ftp
20:36 < asdf12> for the read/writing files
20:36 < GoddeR> I'm bad at linux as well.. anyways when i run cat /proc/sys/fs/file-max i get 58,150
20:36 < genazt> fds get used even in sockets
20:36 < GoddeR> thats the max it can handle i guess?
20:37 < asdf12> genazt: i know
20:37 < ningu> well I certainly wouldn't recommend opening more files than that
20:37 < genazt> GoddeR, no
20:37 < genazt> type in ulimit -n
20:37 < genazt> to see your fd handle limit
20:38 < GoddeR> ah
20:38 < genazt> its 1024 ?
20:38 < GoddeR> yes
20:38 < genazt> add 512 
20:38 < niggler> you need to do it as rouot
20:38 < niggler> *root
20:38 < genazt> and set them via ulimit -n 1536
20:38 < genazt> yes
20:39 < genazt> but on a aws you are root or ?
20:40 < niggler> you don;t get sudo access?
20:40 < GoddeR> you do
20:40 < genazt> so you can set it
20:40 < GoddeR> ahh
20:40 < GoddeR> i can only set it without sudo
20:43 < asdf12> industrial: come again? what are you trying to do?
20:44 < asdf12> not just for the specific issue, but overall? 
20:46 < Industrial> rpc i guess
20:47 < asdf12> yea i caught a little bit of what you were saying earlier, why not use something like 0mq?
20:48 < Industrial> asdf12: I've looked at it but I wouldn't be exactly sure on which ends to use to achieve having 2 async servers talk to eachother
20:48 < asdf12> ah, well you can use something higher level instead of reinventing the wheel per se
20:48 < asdf12> check out https://github.com/jacobgroundwater/federation
20:49 < asdf12> dont worry about the actor model haha, its basically a rpc or networked ipc
20:50 < Industrial> ok so, that covers abstracting ports to names through a service entirely I see?
20:50 < asdf12> yea it handles the routing and all that
20:51 < GoddeR> so im using apache jmeter to test my aws instance with this whole append file thing
20:51 < GoddeR> it just crashed my internet haha
20:51 < Industrial> nice. Does it use ZeroMQ under the hood?
20:51 < asdf12> no it uses axion which is similar to 0mq (you don't need to set that up) think that lib does it for you, you just need to write a short config
20:51 < GoddeR> anyone have any better ideas for testing the limits of appendFile on my setup?
20:52 < asdf12> it has a fall back for using http protocol
21:10 < Industrial> asdf12: https://gist.github.com/Industrial/fa84b7ecc4183c841499
21:10 < Industrial> I'm getting EADDRINUSE on the second one I start, what am I doing wrong?
21:11 < niggler> did you kill all instances Industrial ?
21:11 < Industrial> yes
21:11 < genazt> you try to bind to port 0 ?
21:12 < Industrial> I was told that it lets the OS choose
21:12 < Industrial> { address: '0.0.0.0', family: 'IPv4', port: 41521 }
21:12 < genazt> ah ok didnt know that
21:12 < Industrial> seems like it does :)
21:13 < genazt> do you run the two files on the same computer ?
21:13 < Industrial> yes
21:13 < asdf12> industrial: whats your route.json look like?
21:14 < genazt> maybe it is the ipc that tries to bind to the same port for the instances
21:14 < Industrial> asdf12: eh I have none :X
21:14 < genazt> ofc you have
21:15 < genazt> federation is your network rpc/ipc framework or ?
21:15 < asdf12> https://github.com/jacobgroundwater/federation/blob/master/examples/forward/routes-proxy.json
21:15 < GoddeR> to avoid this fd problem can't i just open the file once and constently append to it?
21:15 < genazt> GoddeR, yes you can
21:15 < Industrial> genazt: easy man I'm just trying this stuff out :|
21:15 < asdf12> industrial: set them on different ports basically
21:16 < genazt> Industrial, no offense i didnt know this module, but how you set it up looks like an ipc or rpc
21:17 < GoddeR> genazt, is fs.writeStream what i should be looking into?
21:17 < asdf12> what
21:17 < asdf12> you really wanted append?
21:17 < asdf12> then yes
21:17 < genazt> fs.writeStream overwrites the file
21:18 < GoddeR> what do you mean overwrites the file?
21:18 < GoddeR> i only need to add a new line to it
21:18 < asdf12> you want fs.appendFile
21:18 < GoddeR> hmm
21:18 < GoddeR> when using appendFIle I'm running into linux file descriptor limit
21:19 < asdf12> you have to not close the stream
21:19 < genazt> then use the basic fs calls ? fs.open
21:19 < genazt> and fs.write
21:19 < asdf12> writestream should work fine, check the flags
21:19 < genazt> the docs says it doesnt append
21:19 < genazt> and it has no options for this
21:20 < Industrial> asdf12: meh I was under the impression that I wouldn't have to save host and port numbers myself anymore, favoring names and versions instead. That's why I was building the service. so the host/port of that service would be the only one I would have to hardcode (or configure) in all the other servers
21:20 < GoddeR> hmm
21:20 < GoddeR> so just write
21:21 < GoddeR> Note that it is unsafe to use fs.write multiple times on the same file without waiting for the callback.
21:21 < GoddeR> :(
21:22 < genazt> you shouldnt spam it
21:22 < asdf12> i just tried createWriteStream you can append
21:22 < asdf12> use flag r+
21:22 < asdf12> and actually you're right appendFile doesn't return a stream, oops, so yea use writestream
21:23 < genazt> that should be okay on unix / linux systems
21:24 < asdf12> industrial: mmm there's no way for your app to know who 'log' is if you don't tell it where it can reach log
21:24 < asdf12> industrial: you could just make your apps on startup pull the routes.json file from a central source
21:24 < asdf12> so you update it in one place
21:25 < genazt> Industrial, maybe you can build an automatic configurator
21:25 < qubit01> how would I go about making something like mongodb non asynchronous ?
21:25 < genazt> so everytime a actor goes up it writes itself into the routes
21:25 < qubit01> the driver I mean
21:25 < genazt> qubit01, bad idea
21:26 < qubit01> I want a wrapper around it , so I have a choice
21:26 < GoddeR> thanks asdf12 i will try it
21:26 < qubit01> there are many of my functions that simply cannot continue unless I have data present, etc
21:27 < genazt> qubit01, then wait for the callback ?
21:27 < qubit01> yeah I dont want that.  Anyway, anyone ... ideas ?
21:27 < Leeol> Is there any type of npm convention to force a package (not yours) to use a specific version of a library? (i understand it may not be stable)
21:27 < genazt> well you must
21:34 < asdf12> industrial: are you sure you need it to be async? bidirectional? because following your example if it's log and a server who tells log i'm assuming to log stuff
21:34 < asdf12> then you could write log as a restful web service (use http)
21:41 < Industrial> asdf12: it's just an example. it would encompass x hosts and y servers
21:42 < GoddeR> quick question when using fs.createWriteStream() there is an options object that can be passed. How do i define the encoding to be UTF-8? I have not found it in the docs
21:43 < asdf12> you do it with write()
21:43 < asdf12> it defaults to utf8 though
21:44 < GoddeR> hmm when according to docs in the options obj i can pass encoding: null
21:44 < danheberden> http://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1
21:44 < danheberden> GoddeR: what docs? http://nodejs.org/api/stream.html#stream_new_stream_writable_options
21:45 < GoddeR> ah okhttp://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options
21:45 < GoddeR> so i guess its just 'utf8'
21:45 < asdf12> oh, well actually it says if its a string then it defaults to utf8
21:55 < Guest14767> hi
21:56 -!- mode/#Node.js [+o piscisaureus] by ChanServ
21:56 < GoddeR> yey just appended to file 30k times from 30k request and no crash
21:56 < GoddeR> writestream ftw
21:58 < GoddeR> i noticed that the writestream was delayed while it was handling the request... thats normal ? 
22:00 < Guest14767> türk var mı burada
22:03 < lacrymology> is there a way to put breakpoints on the server side?
22:03 < ningu> lacrymology: node-inspector?
22:04 < lacrymology> ningu: I'll check that
22:04 < lacrymology> ningu: what about just "debugger;"?
22:04 < ningu> lacrymology: don't know, never heard of that.
22:05 < lacrymology> ningu: it works on server-side js, looks like it doesn't work on node, tho
22:13 < Leeol> Is there any type of npm convention to force a package (not yours) to use a specific version of a library? (i understand it may not be stable) - If not i'll simply fork it.. but i hope not to heh
22:14 < Aria> Not that I'm aware of.
22:15 < Leeol> Aria: Okay, ty
22:21 < Virunga> Hi Aria
22:24 < nathan7> Leeol: You can bundle the dependency
22:24 < Leeol> nathan7: Pardon?
22:24 < Aria> 'eya
22:24 < nathan7> Leeol: bundleDependencies
22:24 < Leeol> nathan7: https://npmjs.org/doc/bundle.html ?
22:25 < Leeol> hmm
22:27 < MI6> joyent/node: Ben Noordhuis v0.10 * 2b5bc8e : install: don't install man page twice  Looks like a merge conflict in 77e - http://git.io/C17NCg
22:29 < Leeol> nathan7: I'm not sure if that solves my problem. For example, i use LibraryA. LibraryA uses LibraryB, and i want to use a newer version of LibraryB for some additional features it offers. Currently, the only thing i can think of is to fork LibraryA and set the package to use the version i want. 
22:29 < nathan7> Leeol: Forking is generally the best approach though
22:29 < Leeol> nathan7: Note that this is all for experimenting/testing purposes, nothing production, so i can accept instability heh
22:29 < Leeol> nathan7: Okay
22:30 < nathan7> Leeol: https://npmjs.org/doc/json.html#bundledDependencies
22:32 < Leeol> nathan7: Yea, i looked at that, i'm confused as to what purpose it has :s
22:33 < nathan7> Leeol: A bundled dependency is not touched by npm
22:33 < nathan7> Leeol: it'll be included in the package
22:33 < Leeol> nathan7: Are you just saying, if i want to push my package, with my custom modifications to my subpackage, that bundledDependancies is what i should use?
22:33 < Leeol> So this is more of a side-note to the issue? 
22:33 < nathan7> Leeol: It's what you could do
22:34 < nathan7> Leeol: I generally prefer the forking approach
22:34 < nathan7> Leeol: fork-and-pullreq
22:34 < Leeol> Ah, okay. Well, this is all for my testing/dev, so i won't be publishing this anywhere anyway
22:35 < Leeol> The library i am modifying is in beta, so it wouldn't be accepted for a pull request (and probably shouldn't be used in production haha)
22:35 < Leeol> nathan7: But anyway, ty :)
22:35 < nathan7> Leeol: You're welcome [=
22:35 < nathan7> Leeol: Which package is this, anyway?
22:37 < Leeol> nathan7: less.js is update with a feature that i've been updated with a feature that has been driving me nuts, so i need to use the updated version. On the flipside, grunt-contrib-less is how i am using less.js, so i need grunt-contrib-less to *use* the beta version (via github)
22:37 < nathan7> Leeol: aha
22:37 < Leeol> nathan7: So i'm going to fork & change the package, then link it. Not a big problem :)
22:37 < nathan7> Leeol: grunt-contrib-less should probably peerDepend on less
22:37 < Leeol> I'm not familiar with peerDepend, but i've seen it recently. Let me look it up
22:38 < nathan7> a peerDependency is when you expect something to be provided by the parent package
22:38 < nathan7> For example, grunt-contrib-less peerDepends on grunt
22:38 < nathan7> It expects grunt to be installed next to it
22:38 < Leeol> nathan7: Hmm, interesting. Do peerdepends get installed automatically?
22:39 < MI6> joyent/libuv: Fedor Indutny v0.10 * b45a74f : stream: run try_select only for pipes and ttys  Its not necesary for TCP  - http://git.io/OWOkhg
22:39 < nathan7> Leeol: Not entirely certain on that
22:39 < nathan7> and I should know this, damnit
22:39 < Leeol> haha
22:39 < MI6> joyent/node: Ben Noordhuis v0.10 * f5a337e : deps: upgrade libuv to b45a74f - http://git.io/XDusqw
22:40 < Leeol> That sounds amazing, but it also makes me feel like i should be using peerdepends for most of my libraries.. assuming i don't need any specific version/use case. Eg, it would be cool to allow users of libraries to override versions, within reason
22:40 < Leeol> Like, using newer versions of less, or coffee, or whatever.
22:41 < Leeol> I'm not really sure where i'd draw the line though.
22:41 < Aria> So use ~ revisions.
22:41 < Aria> And follow semver.
22:41 < nathan7> Leeol: if you're exposing a library to the user through your library, you want to peerDepend
22:41 < Aria> "foo": "~1.2"
22:41 < nathan7> Leeol: if I'm using grunt-contrib-less, I'm not using it because I want to use grunt-contrib-less
22:41 < Leeol> nathan7: Ah hah, so grunt-contrib-less is more of a grunt & less interface, and thus fits peer
22:42 < nathan7> Leeol: I want to use less
22:42 < nathan7> Leeol: and I want to use grunt
22:42 < Leeol> Gotcha
22:42 < nathan7> For plugins and wrappers, basically
22:42 < Leeol> Aria: Funny, i was told in here that i *shouldn't* use ~ lol. Instead, X (1.2.x)
22:42 < nathan7> Leeol: ~1.2.3 means >=1.2.3 <1.3.0
22:42 < Aria> Similar things. ~ lets you set a minimum.
22:43 < Leeol> nathan7: Yea
22:43 < Aria> (like key fix is in 1.2.3, but any 1.2.x > 1.2.3 will work -- ~1.2.3)
22:43 < nathan7> Leeol: So it's preferable to 1.2.x
22:43 < Aria> Where 1.2.x means "any 1.2.x" -- including 1.2.2 and 1.2.0, which don't have your key fix.
22:43 < Aria> Otherwise they're equivalent.
22:43 < Leeol> Oh i am familiar with the differences, i just mean that i was told not to use it
22:43 < nathan7> Leeol: If you just do npm install -S package, it'll add "package": "~x.y.z" to your dependencies magically
22:44 < Leeol> nathan7: That is magic. Noted
22:44 < nathan7> Leeol: -S is an alias for --save (there's also --save-dev for devDependencies, which you'd want to do for, say, less and grunt and grunt-contrib-less)
22:45 < nathan7> Leeol: -D is an alias for --save-dev
22:47 < worldhack> Hi guys, is it possible to hook into an event that fires when a node server is shutting down- for instance when Nodemon restarts the server- so that I can back up any data on mongodb?
22:47 < worldhack> it's for a chat application, and I don't want to do a write to mongo for every new message
22:48 < nathan7> process.on('exit'
22:48 < worldhack> I would rather push an array on server shutdown and retrieve it on server connection
22:48 < substack> worldhack: you can process.on('exit', fn) but you can't do any more async io
22:48 < substack> so you would need to do a synchronous save
22:49 < worldhack> Thanks, although I figured it wasn't working because I couldn't get it to console.log anything
22:49 < nathan7> worldhack: http://nodejs.org/api/process.html#process_signal_events
22:49 < nathan7> worldhack: You probably want to listen for SIGTERM
22:49 < worldhack> I tried that also, with console.log, and I got nothing in the console
22:51 < nathan7> > void process.on('SIGTERM', function() { console.log('SIGTERM'); setTimeout(function() { console.log('post') }, 0) ; return false })
22:51 < nathan7> undefined
22:51 < nathan7> worldhack: ^
22:51 < nathan7> > SIGTERM
22:51 < nathan7> post
22:51 < worldhack> will try
22:51 < nathan7> worldhack: seems the return false isn't even necessary
22:55 < worldhack> nathan7: will it effect the event if I close the server with ctrl+c?
22:55 < nathan7> worldhack: that's SIGINT
22:55 < nathan7> worldhack: not SIGTERM
22:55 < worldhack> because neither SIGTERM or exit are working
22:55 < worldhack> ah
22:55 < worldhack> nope
22:55 < worldhack> nothing there
22:56 < MI6> joyent/node: Yi EungJun v0.10 * 852444a : doc: https: Fix the link to tls.connect - http://git.io/F0tJHg
22:56 < worldhack> process.on('SIGINT', function() { 	console.log('SIGINT'); 	setTimeout(function() { 		console.log('post') 	}, 0);  })
22:57 < worldhack> not working nathan7
22:57 < nathan7> worldhack: it should
22:57 < nathan7> worldhack: process.version?
22:58 < worldhack> nathan7: v0.8.22
22:58 < nathan7> worldhack: odd
22:59 < worldhack> natahn7: I am running the server in cmd on windows, and ctrl_c exiting, if that helps
23:00 <@Nexxy> does windows handle signals like that?
23:00 <@Nexxy> SIGINT is kinda a POSIX thing, isn't it?
23:01 < imsky> oh yeah
23:01 <@Nexxy> works for me on OSX
23:01 < Aria> Yeah, SIGINT is specified by posix.
23:01 < Aria> It's older than POSIX by far though
23:02 <@Nexxy> hi Aria :)
23:02 < Aria> Hey, Nexxy
23:02 < Aria> Windows does have an equivalent; I don't know how Node exposes it.
23:03 < Virunga> worldhack: http://stackoverflow.com/questions/10021373/what-is-the-windows-equivalent-of-process-onsigint-in-node-js
23:03 <@Nexxy> oh that's hacky
23:04 < worldhack> ah, hang on
23:04 < worldhack> thanks
23:04 < worldhack> will take a look
23:04 < Aria> Windows is just pretty different
23:04 < bengalikid> where can i go to ask a quick noob question
23:04 < Aria> And node doesn't use any posix-compatibility layer on it
23:04 < worldhack> Virunga: haha, very hacky. I like it
23:04 < Virunga> :)
23:05 < Virunga> Hi Nexxy
23:06 <@Nexxy> Virunga, hey!
23:10 < worldhack> Hey it worked, thanks nathan7 and Virunga for the help. Much appreciated
23:10 < Virunga> Cool
23:12 <@Nexxy> so I bought an AR drone a mere days after Apple pulled the control app from the itunes store
23:12 < korilo> hey all
23:12 < korilo> hey Virunga :)
23:13 < Virunga> Hi korilo.
23:16 < asdf12> mindstorm would be more fun!
23:17 < Virunga> Nexxy: will you do something special with you drone or you just flying? :)
23:18 < Virunga> your
23:18 < peterschmidler> My local node server gives me random "Service Temporarily Unavailable" messages. What could it be?
23:20 < Aria> Do you have something between you and your node server?
23:20 < Virunga> I saw a fantastic ar drone for shooting
23:20 < MI6> joyent/libuv: Ben Noordhuis master * a9740c9 : build: rename OS to PLATFORM  Rename the OS make variable to PLATFORM, it (+3 more commits) - http://git.io/eG_QaA
23:20 < MI6> joyent/libuv: Ben Noordhuis v0.10 * a9740c9 : build: rename OS to PLATFORM  Rename the OS make variable to PLATFORM, it - http://git.io/NT23HQ
23:23 <@Nexxy> Virunga, I have a few plans :D using https://github.com/felixge/node-ar-drone of course
23:24 <@Nexxy> first up: duct taping a taser to it
23:26 <@mbalho> creationix: congrats on the jsgit funding! i believe chrisdickinson is hacking on modules for js git already
23:26 < Virunga> Nexxy: so awesome. Double fun :)
23:26 <@Nexxy> mbalho, creationix successful already? awesome!
23:26 <@Nexxy> creationix, congrats for sure :D
23:26 <@mbalho> http://www.kickstarter.com/projects/creationix/js-git
23:27 <@mbalho> creationix: i wanna get npm install working in the browser
23:27 < Virunga> two days for raising all the money!
23:30 < devongovett> hey noders, if you're interested in helping out a project to clone the google reader api using Node check out https://github.com/devongovett/reader and #reader. I'm working on it in my spare time :)
23:30 < Virunga> :D
23:30 <@mbalho> devongovett: is there a client for it?
23:31 < Virunga> korilo: http://www.beachhousebaltimore.com/ do you like it?
23:32 < devongovett> mbalho: hoping to convince clients to add a hostname field so users can switch from google reader. I'm not aware of one yet, but with google reader closing down I'm sure they'll do something like that :)
23:32 < devongovett> it's very early days anyway
23:35 < chrisdickinson> creationix: congrats!
23:35 < harrisonm> Nexxy: awesome, looking to get one of those in April
23:35 < chrisdickinson> so tempisfugit still works (with some tweaking)
23:35 < chrisdickinson> i'm ripping it apart into small modules
23:35 < chrisdickinson> i should have a readonly js git working soon
23:36 < deepy> I'm making this twitter using app thing, so I'm checking twitter every hour to see if there's any new updates and I store the last ID I processed. Now with scoping and what not, where would I actually store that?
23:37 < niggler> bnoordhuis I'm not sure what types of tests to setup
23:37 < niggler> it does pass the default tests though (except for linting)
23:38 < ningu> is bnoordhuis dutch or does he just have a dutch name?
23:39 < kenperkins> ningu: he's dutch
23:39 < jn> if i create a fs.readStream and dont use it do i have to do some cleanup?
23:39 < ningu> kenperkins: cool just curious :)
23:43 < GoddeR> I'm using writeStream to append to a single file, I'm wondering if anything thinks that saving it to DynamoDB would be faster.
--- Log closed Sun Mar 17 00:00:28 2013
