--- Log opened Tue Jan 15 00:00:24 2013
00:02 < CoverSlide> yeah, they seemed very interesting in getting node to work on windows. probably because of azure
00:02 < othiym23> I've heard from MSOT people that there was also a pretty extreme level of disinterest on the part of the Ruby and Python communities in engaging with MS, too
00:03 < min|dvir|us> Is Node.js a runtime or is V8?
00:03 < othiym23> bridging the Windows-POSIX gap is a pain in the ass, but I think it's ultimately made Node stronger
00:03 < othiym23> min|dvir|us: Node.js is a runtime with V8 embedded within it
00:04 < CoverSlide> yeah, ruby on windows sucks balls
00:04 < CoverSlide> although i think jruby doesn't have much of a problem
00:04 < min|dvir|us> othiym23: what is V8 then? A VM?
00:04 < CoverSlide> python's not horrible though, but still pretty bad
00:04 < othiym23> min|dvir|us: V8 is an interpreter that also includes a JITting compiler
00:05 < CoverSlide> http://lmgtfy.com?q=v8+javascript
00:06 < othiym23> CoverSlide: this is a dimly-remembered conversation with Matthew Podwysocki from MSOT, but I guess it was more about getting Ruby and Python to play well in a Windows service environment than how well the language worked as a programming environment on Windows
00:06 < othiym23> if you see the distinction
00:06 < min|dvir|us> othiym23: but Node.js is an interpreter too?
00:06 < min|dvir|us> Are interpreters always runtimse?
00:06 < min|dvir|us> *runtimes
00:07 < MI6> joyent/node: isaacs master * 20a3c5d : streams2: Do not allow hwm < lwm  There was previously an assert() in the - http://git.io/qgHUPQ
00:07 < superjoe30> min|dvir|us, sounds like you need to read a few wikipedia articles
00:07 < othiym23> min|dvir|us: you seem confused ;)
00:07 < min|dvir|us> Clearly. I'm asking a question.
00:08 < othiym23> Node.js is a runtime that combines a JavaScript interperter / compiler, a low-level evented platform abstraction layer (libuv), and some other statically-linked libraries that it needs to have a complete standard distribution (most notably OpenSSL)
00:08 < min|dvir|us> My question is less about Node.js than it is about runtimes.
00:09 < superjoe30> then you're in the  wrong channel
00:09 < othiym23> I don't really think "runtime" is a standardized term of art
00:09 < othiym23> dag a mellow has been harshed
00:10 < othiym23> CoverSlide: if you find a good Haskell project to play with, let me know
00:11 < othiym23> I've written a nontrivial amount of Haskell, but I have this guilty feeling that my systesms Haskell is pretty terrible, mostly because it feels so much more awkward than all the Haskell I see in books and articles and stuff
00:11 < othiym23> but then when I look at other large Haskell projects with lots of IO monad use in them, they look just as halfassed as my stuff
00:12 < othiym23> reading research.microsoft.com/~simonpj/papers/marktoberdorf/mark.pdf.gz has sorta helped in that it makes clear I'm not alone, but... 
00:13 < othiym23>  /end of non javascript content
00:14 < zomg> othiym23: of course your haskell will be terrible if you aren't an experienced haskell programmer :)
00:14 < zomg> well, maybe not terrible, but at least not "ideal"
00:14 < superjoe30> is haskell code ever "ideal"?
00:14 < othiym23> zomg: I'd put myself as somewhere between not-experienced and experienced
00:15 < zomg> superjoe30: dunno, that language lets you do so many neat tricks...
00:15 < zomg> :P
00:15 < superjoe30> zomg, that's my point. you never know if you're utilizing *all* the neat tricks you could be
00:15 < zomg> heh, yeah I suppose that's true
00:15 < skope> lol zomg
00:16 < skope> shouldnt you be asleep
00:16 < othiym23> like, I can use monad transformers without getting more than a couple headaches, and I can sometimes intuit when it might make sense to use fmap and not a full monad, but writing whole apps with it is still a real stretch
00:16 < zomg> skope: nah I don't have a job so it doesn't matter =)
00:16 < skope> werent you employed few years ago?
00:16 < zomg> well, I am freelancing for a friend's startup, but it doesn't require me to be anywhere at any certain time
00:16 < zomg> yeah I was laid off in december because the company I was working for ran out of money :D
00:16 < skope> haha
00:17 < superjoe30> sweet gig
00:17 < skope> i have been unemployed for ten months
00:17 < superjoe30> is it everything you dreamed it would be?
00:17 < skope> luckily i am now, because i'm at the hospital and dad's time is about to end
00:17 < othiym23> :(
00:17 < zomg> oh, that sucks
00:18 < woopwoop> how do I background a node process in aws? everytime I log out of ssh it kills the process even when I do node app.js &
00:19 < skope> zomg: it really does
00:19 < skope> i have been snapping benzos like candy and no help
00:19 < skope> anxious as hell
00:19 < othiym23> woopwoop: use nohup or a tool like nodemon to control your Node processes
00:19 < woopwoop> cool thx
00:20 < othiym23> woopwoop: or if your AMIs are Ubuntu, check out writing an upstart job for your app(s)
00:20 < woopwoop> i am using an ubuntu ami where can i find some documentation on upstarts?
00:21 < woopwoop> is this something that needs to be done on other node.js hosters like joyent and heroku?
00:23 < xp_prg> ok wow, I would never have guessed that node js would delete a variable that still has a reference to it in a callback
00:23 < xp_prg> but it did
00:23 < othiym23> woopwoop: if you're going to be deploying onto PaaS, def. look into nodemon or forever
00:23 < othiym23> upstart is a system-level tool (and 'man upstart' should give you enough info to write a simple upstart script for your app)
00:24 < woopwoop> thanks
00:25 < superjoe30> xp_prg, can you prove it?
00:26 < xp_prg> ya I just did
00:26 < superjoe30> can I see?
00:27 < xp_prg> https://github.com/wheath/jsrule-engine
00:29 < xp_prg> superjoe30 call Util.input that invokes the handleAsyncInput and you will find that this.body_rule_firing is not defined unless it is static
00:30 < airandfingers> jsdoc-toolkit (node-jsdoc-toolkit) question: why do my instance methods get labeled "static" if i've marked them with "@lends ClassName#"?
00:31 < CoverSlide> airandfingers: open a github issue
00:33 < airandfingers> CoverSlide: sounds about right
00:34 < foxjazz> I still can't get require to work on windows. Running node works, npm seems to work but geting node to see the packages doesn't work
00:36 < othiym23> foxjazz: where are you installing modules, and where are you running Node from?
00:37 < foxjazz> I have it on d:\node
00:37 < foxjazz> and I have set the path to include d:\node
00:37 < Omega_> Hey all, quick question about aggregating middleware. 
00:37 < Omega_> Rather than spam channel, I'll just link my SO post: http://goo.gl/brKfz
00:37 < othiym23> I mean, where are you when you start up your application>
00:38 < foxjazz> I goto file manager
00:38 < CoverSlide> ication>
00:38 < foxjazz> and right click onthe commandline
00:38 < foxjazz> hmmm
00:38 < skope> what
00:38 < othiym23> foxjazz: have you read http://nodejs.org/api/modules.html yet?
00:39 < othiym23> it's painfully detailed, but it will tell you exactly how modules are loaded in your app
00:39 < CoverSlide> foxjazz: https://npmjs.org/doc/faq.html#I-installed-something-globally-but-I-can-t-require-it
00:41 < xp_prg> superjoe30 did I prove it to you?
00:42 < superjoe30> xp_prg, when I learned that I had to read a nontrivial example I lost interest
00:43 < xp_prg> well I don't have time to shrink it down, but it is yet another example of why I hate javascript and it is mostly garbage
00:43 < othiym23> xp_prg: I took a look at it too, and the size and the fact that it's in TypeScript led me to conclude I didn't have time to dig in enough to help
00:43 < superjoe30> xp_prg, this isn't even javascript, it's typescript
00:44 < othiym23> xp_prg: all variables in closures are references, even if they contain primitive types
00:44 < xp_prg> it compiles to javascript don't dismiss it so easily
00:44 < superjoe30> for all you know the type script compiler could be producing incorrect code
00:44 < othiym23> so if you have a var declared in function scope, wrap it up in a closure via a nested function, and then return the closure while the same scope changes the varialbe, it will change in the closure as well
00:44 < xp_prg> anyway, I am frustrated and this has put me in a bad mood, don't listen to me for a while as I am pissed
00:45 < xp_prg> its just such a bitch to be asynchronous
00:45 < othiym23> and if your variable contains an object, that object is of course a reference, so calling 'delete object.foo' will delete foo from the object in the closure as well as outside it
00:47 < niggler> xp_prg is your mother asynchronous?
00:47 < niggler> superjoe30 what's typescript
00:48 < xp_prg> ya
00:48 < othiym23> niggler awakens from his slumber to do some Monday evening trolling
00:48 < superjoe30> haha
00:48 < niggler> othiym23 i brought sexy back today
00:49 < superjoe30> niggler, typescript is this new game from EA
00:49 < xp_prg> niggler put it back on the shelf, it is not as sexy as we thought
00:49 < Omega_> Is there a facility within node for me to aggregate middleware I create?
00:50 < niggler> lol superjoe30 i wonder why EA is hated even more than the now-bankrupt THQ
00:50 < superjoe30> Omega_, that question is way too abstract to have a good answer here
00:50 < niggler> Omega_ you mean ... a middleware for your middleware?
00:50 < Omega_> niggler: Hey bro! ;)
00:50 < Omega_> lol
00:50 < niggler> i think a yo-dawg meme is needed here
00:50 < othiym23> wasn't there just a thread about this on the google group?
00:50 < Omega_> Yeah, yo dawg
00:50 < Omega_> that's it!
00:51 < Omega_> Yes, a middleware for my middleware.  I have async.js in my project.  But I wanted to make sure node didn't have some nice facility it'd prefer me to use.
00:51 < othiym23> Node has jack and shit out of the box for middleware
00:51 < othiym23> it disdains your need for hand holding
00:51 < othiym23> write function expressions, pal
00:51 < othiym23> that's what Node says
00:51 < niggler> xp_prg im playing with php.js
00:51 < Exnor|mobile> I'm a newbie to node and christ it's infuriating
00:51 < superjoe30> Exnor|mobile, you must be kidding
00:52 < CoverSlide> connect is just flow control for http
00:52 < Exnor|mobile> I can't even run a module
00:52 < superjoe30> Exnor|mobile, have you tried using the "node" binary?
00:52 < zomg> niggler: I can't appreciate that project besides some of the more special functions like md5 or sha1 implementations in JS
00:52 < Exnor|mobile> installed npm ok, installed a module ok (clean-css) and I can't figure out how to run the damn thing
00:52 < niggler> it is absolutely useless zomg
00:52 < zomg> otherwise it's kinda like.. "hey I don't want to learn JS so I'll just use this"
00:52 < niggler> every function is either "trivially implemented in JS" or "incorrectly implemented"
00:53 < zomg> haha, figures
00:53 < CoverSlide> npm -g install clean-css
00:53 < niggler> its almost as useless as the npm module `math`
00:53 < CoverSlide> cleancess
00:53 < niggler> i was hoping `math` would be libm or something useful
00:53 < Exnor|mobile> CoverSlide: did that, although I did 'npm install --global clean-css'
00:54 < Exnor|mobile> installed it into /usr/local/lib/node_modules
00:54 < CoverSlide> and it shows up with npm ls -g
00:54 < othiym23> niggler: the problem is that math is too complicated
00:54 < CoverSlide> so cleancss doesn't run?
00:54 < superjoe30> niggler, lolwat, you don't find Math.add(a, b) useful?
00:54 < othiym23> niggler: all it really needs is math.identity, math.add, math.multiply and math.unit
00:54 < niggler> do something useful with math.add!
00:54 < othiym23> then you're set
00:54 < Omega_> So I take it for my middleware I can just use async.js to pull it all together...
00:54 < niggler> math.add should use correction factors or something marginally useful
00:54 < othiym23> groups fields manifolds are all right there, just gotta do a little assmebly
00:54 < Omega_> There's nothing connect or express would likely want me to use instead.
00:55 < CoverSlide> [1,2,3,4].map(math.add)
00:55 < niggler> you mean reduce CoverSlide
00:55 < CoverSlide> er right
00:55 < othiym23> Omega_: the only issue you're likely to run into is that connect's notion of a middleware chain already has a notion of control flow built in that may or may not jibe with what you're trying to do with async
00:55 < Exnor|mobile> CoverSlide: http://pastebin.com/uJcn6b3j
00:55 < Exnor|mobile> it's there
00:55 < othiym23> try it and see what happens
00:55 < niggler> >>> [1,2,3,4].reduce(function f(x,y) { return x+y; }, 0)
00:55 < purr> niggler: (number) 10
00:56 < Exnor|mobile> I run 'node cleancss'  or 'node clean-css', and I get not found
00:56 < CoverSlide> yeah, math.add is easier
00:56 < CoverSlide> problem solved
00:56 < CoverSlide> Exnor|mobile: 
00:56 < Exnor|mobile> if I cd to the node module dir, it seems to run with no output 
00:56 < superjoe30> Exnor|mobile, try cleancss by itself
00:56 < CoverSlide> just do cleancss
00:56 < CoverSlide> right
00:56 < niggler> >>> Math.add = function(x,y) { return x+y; }; Math.add(.1,.2)
00:56 < purr> niggler: (number) 0.30000000000000004
00:56 < superjoe30> Exnor|mobile, npm install -g puts it in your path
00:56 < Omega_> othiym23: So I'll have to make sure to continue playing by those rules unless for some reason I want to abort my own chain prematurely?
00:56 < CoverSlide> cleancss is an exdecutable
00:56 < niggler> see, my math.add does something a bit more intelligent
00:56 < Exnor|mobile> ah
00:57 < Exnor|mobile> I could have sworn I tried that
00:57 < Exnor|mobile> ;)
00:57 < othiym23> Omega_: I think you should be OK as long as you make sure you're only aborting by passing errors to connect's provided next callback
00:57 < Exnor|mobile> CoverSlide: thanks, seems to work as desired now
00:57 < othiym23> Omega_: but it can be tricky to reason about composed control flow strategies like that
00:57 < niggler> zomg i wanted to experiment with dom manipulation, so i tried putting together a simple php-in-browser demo and was surprised that it didnt break horribly
00:58 < Omega_> othiym23: The main reason why I thought to do this was to spare the loop all the middleware I make when the data isn't there in the first place.
00:59 < Omega_> othiym23: I figured it made more sense to just return out and skip a bunch of them instead of forcing each one to go "is the data I needa in request/response?"
00:59 < othiym23> Omega_: you can abort out of a middleware chain with next -- it's more or less intended to give you control over the flow of the middleware stack's execution
00:59 < Omega_> othiym23: I actually want to skip, not abort.
01:00 < Omega_> othiym23: Say "skip all middlewares until after (or including) [this-one]"
01:00 < othiym23> Omega_: you should be able to do both, although it's not immediately clear how all that interacts
01:01 < Omega_> othiym23: Hm, yeah.  That ends up being my core question I guess..
01:01 < othiym23> connect's documentation is unhelpful
01:02 < CoverSlide> that's why with node stuff I usually RTFS
01:02 < othiym23> CoverSlide: have you ever read the source of a visionmedia module?
01:02 < othiym23> budget some time
01:02 < CoverSlide> I have actually
01:02 < CoverSlide> not all of it
01:03 < CoverSlide> but i jump down the chain of what I'm looking for
01:03 < zomg> oh goddamnit I finally got my map projection code working
01:03 < zomg> BUT now I don't remember how I arrived at the value 0.3125 used in some scaling code...
01:03 < othiym23> Omega_: here's where the sausage gets made: https://github.com/senchalabs/connect/blob/master/lib/proto.js#L102
01:03 < zomg> a value which I would need to recalculate using whatever formula I used in case certain things change...
01:03 < zomg> fffuuu
01:03 < othiym23> figure out what's going on there, and you'll know whether you need to graft async onto connect
01:04 < Omega_> othiym23: *tips hat*
01:04 < niggler> that's 5/16 zomg
01:04 < zomg> niggler: yeah I know but I'm pretty sure that wasn't the algorithm =)
01:05 < zomg> oh wait...
01:05 < othiym23> apropos of nothing, I spent my weekend converting a bunch of chained operation garbage I wrote a while ago to use Q, and while the process was not as clean as I would have liked, I am now sold on the benefits of promises
01:06 < zomg> it wasn't that, but thanks to you mentioning that I actually was able to figure out what the numbers I used were
01:06 < zomg> :D
01:06 < niggler> having contributed something useful today zomg and othiym23 i feel it is only appropriate to troll from here on out :)
01:06 < zomg> lol
01:06 < Omega_> othiym23: How easy was it to convert things?
01:07 < Sicp> GUYS!! http://i.imgur.com/t0jiM.jpg
01:07 < othiym23> Omega_: it took the better part of an afternoon but it was a purely mechanical refactoring process once I figured out how Q wanted me to deal with converting async Node calls into promises
01:07 < Omega_> othiym23: Nice, so once you got the rubric down it was more or less cathartic ;)
01:08 < Omega_> othiym23: I wonder how long it is before the rest of the community goes for this?
01:09 < othiym23> Omega_: they had their chance, and despite domenic's heartfelt entreaties, I think promises are just going to have to remain one control flow strategy of many
01:09 < xp_prg> niggler what is php.js?
01:09 < CoverSlide> that cat has a lot of dandruff
01:09 < niggler> someone took the name php.js already
01:09 < niggler> but ive been playing with writing php in browser
01:09 < othiym23> and I will say that while I like Q better than async for what I'm doing, using it with typical node code still requires more boilerplate than I would like
01:10 < niggler> mostly because i realized i didn't know php as well as I would have liked
01:10 < CoverSlide> well the whole promise thing ...
01:10 < niggler> but this is definitely a lulzy project
01:10 < Omega_> othiym23: It looks like it just creates a fluent call structure out of the crazy nestig
01:10 < CoverSlide> you kind of have to swallow the hold glass of koolaid for that
01:10 < Omega_> *nesting
01:11 < CoverSlide> i prefer using named functions to nesting, async, or promises
01:12 < othiym23> Omega_: yeah, and that is g-r-o-s-s if you have a long execution chain, so you end up doing things like [promisedFunc1, promisedFunc2, promisedFunc3].reduce(function (last, next) { return last.then(next); }, Q.resolve(initialValue))
01:12 < othiym23> which isn't terrible but is also sorta quirky to anyone who wants to know wtf your code is doing later
01:12 < Omega_> othiym23: I guess I'm happy enough working diligently to keep all my files small.
01:13 < Omega_> othiym23: I'm still learning how to write good node modules, but I feel like things are going okay
01:13 < rootcoma> othiym23, I have no idea what that code does
01:13 < Omega_> othiym23: The nesting only gets bad if you try to do it all in one place
01:13 < Omega_> othiym23: So I've got all my functionality as middleware that prepares data and then backs out for the next piece of middleware to work with it.  (hence my desire to control blocks of middleware as single units)
01:14 < othiym23> CoverSlide: it's not either / or https://gist.github.com/2cb00575a869e157130c
01:14 < Omega_> othiym23: If that's an anti-pattern, it's somewhat organically evolved out of the advice I've read so far
01:14 < foxjazz> > var irc = require('irc'); undefined
01:14 < othiym23> it's not an anti-pattern, it's just not idiomatic Node, IMO
01:14 < foxjazz> is this the correct response?
01:14 < foxjazz> > var irc = require('irc'); undefined
01:15 < Omega_> othiym23: idiomatic node?
01:15 < othiym23> foxjazz: what does 'var ir = require('irc'); irc' at the REPL give you?
01:15 < othiym23> declarations don't return values
01:16 < othiym23> Omega_: that's handwavy as hell, but it's not the sort of code I see when I look at a substack / isaacs module, is what I mean
01:16 < niggler> middleware will be an enterprise word in 2013
01:16 < foxjazz> othiym23: a bunch of color codes
01:16 < niggler> actually it already is an enterprise word, i take that back
01:17 < Omega_> othiym23: What's significant about a substack/isaacs module?
01:17 < niggler> othiym23 you mean "var ir = require('irc'); ir"
01:17 < othiym23> foxjazz: then you successfully required IRC
01:17 < foxjazz> othiym23: thanks, then it really was working all along
01:18 < othiym23> Omega_: they write pretty much in pretty much paradigmatic Node style, not least because isaacs is the lead maintainer of Node ;)
01:19 < Omega_> niggler: Re: middleware - I see it.
01:19 < othiym23> niggler: yeah whatever, Node is smart enough to figure out what I mean
01:22 < Omega_> I guess I won't know for a bit if the node code I'm writing is structured in bad way :'(
01:23 < Omega_> There needs to be a node antipatterns book for paranoid perfectionists like me ;)
01:24 < superjoe30> listing all patterns is a lost cause
01:24 < superjoe30> better of listing good patterns
01:24 <@isaacs> Omega_: If I'm understnading correctly, I think it's not an antipattern, but definitely a smell.
01:24 < superjoe30> *antipatterns
01:24 <@isaacs> Omega_: the smell being "inappropriate intimacy", the most common of all code smells.
01:24 <@isaacs> Omega_: because middleware A needs to be intimately aware of how middleware B works, if you do A to prepare data, and then B to use it
01:25 < superjoe30> maybe that should just be 1 middleware
01:25 <@isaacs> Omega_: 01:17 < Omega_> othiym23: What's significant about a substack/isaacs module?
01:25 <@isaacs> Omega_: very handome support staff. ^
01:25 < Omega_> isaacs: Yeah, I don't desire them to be modular necessarily
01:25 <@isaacs> Omega_: other than that, i dunno.  probably just that they're really buggy.
01:25 <@isaacs> s/handome/handsome/
01:26 <@konobi> isaacs: so that's the rest of the channel? =0P
01:26 < Omega_> isaacs: I just want to make sure the code doesn't get too big and I end up going cross eyed with nesting and callbacks in one file
01:26 <@isaacs> Omega_: i think aboutthe time that you start to need a control flow utility, that's the time you should be cutting up functionality into separate pieces.
01:26 <@isaacs> Omega_: it usually means that you're doing too much (the second most popular code smell ;)
01:27 < Omega_> isaacs: That one I know! ;)
01:27 < Omega_> isaacs: The question for me now is did I blow it up into too many bits?  lol
01:27 <@isaacs> Omega_: that's the challenge.
01:27 <@isaacs> Omega_: also, did you blow it up into the *correct* bits?
01:27 <@isaacs> Omega_: carving problems at the joints is very tricky.
01:28 < Omega_> isaacs: I came up with a mental process which was that each piece of middleware I wrote interacted with one external library
01:28 < Omega_> isaacs: So they worked on a specific operation of fetching or modifying data
01:28 <@isaacs> Omega_: usually you have to do it wrong at least once to know how it should have been done, which is why i like keeping programs small emough to easily rewrite, if possible.
01:28 < Omega_> isaacs: So if I had something pulling from the database and opening a file, I split it into two.
01:29 < Omega_> isaacs: One interacts with the database and leaves the data for the next one to pick up and work with
01:29 < Omega_> isaacs: Kind of a whittling
01:30 < CoverSlide> substack's philosophy seems to be, if it deserves to be in a second file, it deserves to be its own package
01:30 <@isaacs> Omega_: it's good to pursue this course.  that is the only way that you'll learn the problems it causes.
01:30 <@isaacs> CoverSlide: substack's philosophy is a bit more nuanced than that, but yes, that's close to it.
01:30 <@isaacs> of it's a separate "thing", it should be a separate package.
01:30 <@isaacs> some people shove a bunch of general purpose util functions into one file, when they should be separate files, and separate package.
01:31 < Omega_> isaacs: Yeah and I can accept either all in one, or all broken up.  But it's like there's no middle ground.
01:31 < CoverSlide> i agree
01:31 <@isaacs> i believe, if you'd write a test for it, it should be a module.
01:31 < substack> CoverSlide: many of my modules span multiple files so I think it's more about independent utility
01:31 < substack> if a module can stand on its own two feet it can be spun out
01:31 <@isaacs> Omega_: the middle ground is where you will find enlightenment.
01:31 <@isaacs> Omega_: or maybe it's the other way around.
01:32 < MI6> joyent/node: Fedor Indutny master * b4b750b : tls: follow RFC6125 more stricly  * Allow wildcards only in left-most par - http://git.io/8vfwxQ
01:32 < CoverSlide> the problem is if we are to share these individual packages with a common package repository, and there are 1300 opinions on how to clone an object, then we have 1300 object cloning packages
01:32 < Omega_> substack, isaacs: Right, in *theory* the bits of functionality I'm breaking out could be used with other things.
01:32 <@isaacs> CoverSlide: that's fine.  if there are actually 1300 options, then what's wrong with having 1300 options?
01:33 < Omega_> So if I want to change my database, I'm not reaching into a file that also contains a template loader.
01:33 <@isaacs> CoverSlide: that'd be like 5% of the package registry, if in fact there were that many
01:33 <@isaacs> CoverSlide: in practice, i think there's really just a few hundred.
01:33 <@isaacs> Omega_: sure.
01:33 <@isaacs> Omega_: so, since i don't know your app, or the problem it's trying to solve, i can't really give you much specific advice there.
01:34 < Omega_> isaacs: That's okay, it's ultimately for me to apply.
01:34 <@isaacs> Omega_: the trick is just to think about where the weak narrow bits of your solution are, and see if you can carve it there.
01:34 < CoverSlide> well there's discovery of these modules, or else noone reuses any of them, and every new user writes their own object cloning thing cause they have no way of knowing which one works out best
01:34 <@isaacs> Omega_: it's software, so you can definitely explore and mess around with it
01:34 < Omega_> isaacs: I can usually learn enough with discussions like these.  And at least I know I'm within an acceptable margin of good practice perhaps...
01:35 <@isaacs> Omega_: i advocate being ok with doing things a little wrong when you're starting out with something.
01:35 < Omega_> Shifting around to find the perfect spot within that shouldn't be too traumatic
01:35 < CoverSlide> i'm not compaining, i actually like it this way, but i would like a better way of discovering packages
01:35 < Omega_> isaacs: That's something I have to constantly remind myself, yeah.
01:35 <@isaacs> Omega_: but be open to the fact that it might be wrong, and willing to learn when it seems uncomfortable, rather than assume that the discomfort is inherent.
01:35 <@isaacs> CoverSlide: ++
01:35 < Omega_> isaacs: Truth be told, I like how I have things now.  Perhaps I'm just being unreasonably doubtful of the simplicity I've encountered.
01:36 <@isaacs> Omega_: sounds like you don't need much help then :)
01:36 < Omega_> isaacs: I'll stop myself now from this crusade of premature code optimization! ;)
01:36 <@isaacs> heh
01:36 <@isaacs> good plan :)
01:37 < Omega_> isaacs: Thanks for stepping into the discussion  :)
01:37 <@isaacs> np
01:37 <@konobi> huh, didn't realize there were webcl bindings
01:37 < CoverSlide> oh nice! i get to power my bitcoin farm with other people's browsers!
01:38 < Bergle_1> lol
01:38 < Omega_> lol
01:57 < niggler> CoverSlide you need far more than a package repositry
01:57 < niggler> *repository
01:58 < niggler> you need a standardized interface / function methodology
01:58 < CoverSlide> i need monkey slaves
01:59 < niggler> you know, for all the talk about "blue-collar coding" and "bitchwork", it takes a competent person to put those together
02:00 < superjoe30> competent people do everything better
02:00 < superjoe30> including mundane things
02:00 < superjoe30> I hate ordering food from incompetent people
02:01 < foxjazz> how do you peek at variables during js
02:01 < CoverSlide> like console.log?
02:02 < foxjazz> not sure. I tried search, but it was wrong type
02:02 < foxjazz> message.search("asfd")
02:02 < foxjazz> so do I console.log it?
02:02 < niggler> superjoe30 there's a hope that maybe, just maybe, there are people who aren't rockstars that could do the "blue-collar work"
02:03 < niggler> as it turns out, they dont exist
02:03 < othiym23> foxjazz: console.log, logging library (like winston or bunyan), debugger (like "node debug" or node-inspector)
02:04 < niggler> >>> console.log("use console.log, foxjazz") @ foxjazz
02:04 < purr> foxjazz: undefined; Console: 'use console.log, foxjazz'
02:33 < jwm> anyone else use webstorm?
02:34 < spudnik867> I do
02:35 < jwm> cool
02:38 < jwm> its pretty nice
02:38 < jwm> especially with the vi plugin
02:39 < spudnik867> I like it. I'd like to see them add typescript support
02:39 < niggler> lol typescript
02:41 < jwm> I am adding user handling code to my web app
02:41 < jwm> I was using passport
02:41 < jwm> is that the most recommended module?
02:45 < CoverSlide> currently seems the most popular
02:48 < jwm> cially with the vi plugin
02:48 < jwm> oops
02:48 < jwm> exports.techs = require("./techs")(mongoose).model;
02:48 < aandy> hey guys, this isn't a node question, more of a C problem with a meta question, i wanted to pick your brains about: C languages and the like with "seek" and "write" api's make it troublesome to INSERT/DELETE in a file (without rewriting the ending). can anyone think of a language which can do this (if at all possible)? illustration: http://pastebin.com/mBnefFaK
02:50 < CoverSlide> that's just how filesystems work
02:50 < CoverSlide> it's not a language thing
02:50 < aandy> damn, i was afraid of that
02:51 < aandy> thanks for clearing it up :)
02:51 < niggler> you are opening the file a+
02:51 < aandy> niggler: yeah the last part is just for "show", i know that's not how it works
02:51 < CoverSlide> because on the disk, you can't just insert some stuff, and move the rest down, the disk has to rewrite that section and everything after it
02:57 < jwm> you guys like restful urls?
02:57 < jwm> express seems natural for using it to make them
02:57 < jwm> heh
03:07 < CoverSlide> i'd rather use just the router portion
03:07 < CoverSlide> but alas
03:10 < CoverSlide> https://npmjs.org/package/apiserver-router
03:10 < CoverSlide> i kind of like this one
03:10 < CoverSlide> but not really
03:11 < Zak> CoverSlide: I kind of like you; but not really
03:11 < Zak> :P
03:12 < Zak> you sound like me when giving advice!
03:12 < Zak> <gives advice> <quick disclaimer revoking responsibility>
03:33 < superjoe30> Zak, I can rearrange the words in your sentence to say "me like you when giving sound advice"
03:37 < jtomasrl> if i need to send/receive JSON objects between client and server using Oauth, can i use a TCP server without http?
03:49 < superjoe30> https://github.com/superjoe30/boost
05:13 < Daegalus> so whats everyones thoughts on Rust in this channel?
05:14 < Sly> Nexxy: I'm pinging you because I know you're around. :3
05:15 < Sly> But you apparently have sound off. MISSION FAILED! :(
05:17 < Zak> Sly: Insert more coins to continue
05:17 < dnz-> Daegalus: its just oxidation assshole
05:17 < Zak> Daegalus: I prefer watching paint dry. at least I can smell it and get high
05:17 < Daegalus> I mean the programming language, wise guys
05:18 < dnz-> hahah aprogramming advice from node hipsters
05:18 < dnz-> hahahaha
05:18 < dnz-> h
05:18 < dnz-> a
05:18 < dnz-> hah
05:18 < dnz-> a
05:18 < dnz-> hah
05:18 < dnz-> a
05:18 < dnz-> hah
05:18  * dnz- dies of laughter
05:18 < Zak> does it have an alert function?
05:18 < dnz-> can it do xss javascript hackers?
05:19 < dnz-> how can you code execution rmemote
05:19 < Zak> Daegalus: i had a quick look. Rust looks okay. I don't know why you're asking about Rust in a nodejs channel though :P
05:19 < Zak> unless there is a large group of people using some rust->nodejs compiler
05:20 -!- mode/#Node.js [+b *!*darknoise@*.masturb8.in] by konobi
05:20 -!- dnz- was kicked from #Node.js by konobi [dnz-]
05:20 < Zak> rust->JS (for nodejs) compiler anyway
05:20 < Daegalus> Zak; I'm asking here because if I ask in the Rust channel, I will get a bunch of biased answers for rust. Here i get a bunch of node hipsters that are hyped up on Node to no end, and might point out a bunch of flaws in Rust that the Rust fanboys might overlook
05:21 < Zak> I see. Yeah, the problem is, i doubt anybody in here would even know about rust
05:21 <@Nexxy> lol
05:21 < Daegalus> ya, i know, thought I'd take the chance though.
05:21 < Zak> fair call
05:21 <@Nexxy> Sly, I was in the car :P
05:21 < Zak> Daegalus: my advice, just give it a go yourself
05:21 <@Nexxy> konobi is on the job!
05:22 < trevnorris> for any committers out there, I'm creating a bunch of additional benchmarks for Buffers with some recent PR
05:22 < trevnorris> 's, and want to make it a small lib that can be included with other benchmarks. ideas on the file name?
05:22 < Daegalus> Zak: oh i have, i just don't know what to use it for, so I thought id ask to see someone that might have more use with it
05:22 <@konobi> Nexxy: i'm a twitchy mo-fo with a loaded boot
05:25 < Zak> Daegalus: seems like there is a big emphasis on concurrency
05:25 < Zak> tbh, i think that's one thing that many languages are crap at
05:25 < Zak> concurrency in the local environment and also concurrency of processes across many computers
05:25 < henry_> Can someone help me with installing nodefront or roots?
05:25 < henry_> i'm getting errors with both installs
05:25 < henry_> http://pastebin.com/8gJLFi2D (this is my error output from npm)
05:26 < henry_> I've tried manually installing js-yaml(no luck), and i even did a fresh install of Ubuntu 12.10
05:26 < henry_> same errors both times
05:26 < Zak> henry_: do you have permission to change in that /usr/local/lib directory?
05:27 < Zak> oh, i see you're doing it as sudo
05:27 < Zak> my bad
05:27 < Zak> henry_: what version is your npm
05:28 <@Nexxy> lol
05:29 < henry_> npm -v
05:29 < henry_> >> 1.1.4
05:29 < purr> henry_: SyntaxError: Unexpected number
05:29 < henry_> npm is version 1.1.4
05:31 < itsnotlupus> is there a way to access a module scope object M so that if a module contains "var a =0;" within the same module M.a = 0 ?
05:31 < Zak> itsnotlupus: export it
05:33 < itsnotlupus> Zak: I'm all within one module here. no exports in play.  I'm looking for something like `global` but scoped to the current module only, never to escape.
05:34 < Zak> itsnotlupus: http://pastebin.com/wtwW2GsT
05:35 < Zak> if you're doing it in the same module, why not rely on regular scope access?
05:35 < Zak> you could always define some object at the top of your module, which would be in scope for the rest of the module
05:35 < Zak> e.g. var myGlobalModuleObject = {};
05:35 < itsnotlupus> because I'm doing funky things that involve creating members on the module scope dynamically
05:36 < itsnotlupus> yes. I could always explicitely refer to an object. I was hoping I could just reuse the module scope.
05:36 < itsnotlupus> an earlier version was using `global` for that purpose, but things on global are just a bit too collision-prone.
05:36 < Zak> I'm confused. If it's dynamic, why can't you just keep track of it dynamically then?
05:37 < Zak> can you explain your problem in more detail?
05:37 < Zak> can you explain your problem in more detail?
05:37 < itsnotlupus> I have a little library that creates types from some JSON description.
05:37 < Zak> my bad, that wasn't meant to be a repeat
05:38 < Zak> right
05:38 < itsnotlupus> well, it's not exactly JSON.
05:38 < Zak> that's okay. go on
05:38 < itsnotlupus> hold on. pastebin to the rescate.
05:39 < henry_> Zak: any ideas?
05:41 < Zak> sorry henry_. I think its a very generic error message. Try searching github for any existing issues.
05:41 < itsnotlupus> Zak: take something like http://pastebin.com/0WFGSbmp
05:41 < henry_> Zak: are none :( any other suggestions?
05:42 < itsnotlupus> where typing is a module that creates javascript constructors (and mostly prototypes) based on the data structures given.
05:42 < Zak> henry_: no sorry
05:42 < henry_> ok
05:43 < itsnotlupus> the typing.declareTypes() bit creates a few objects in the scope. (ideally module scope, currently global scope)
05:43 < Zak> itsnotlupus: okay. I understand so far
05:43 < itsnotlupus> then the structure that follows refers to those objects.
05:43 < itsnotlupus> and typing.defineTypes() actually flesh out the prototypes of each object, mostly with a bunch of accessors for respective fields.
05:44 < Zak> itsnotlupus: just one sec... why don't you use TypeScript for this?
05:44 < Zak> this is basically exactly why they made TypeScript
05:44 < itsnotlupus> so using `global` as the place to stash those objects worked great, except of course given a big enough codebase, collision will occur on it.
05:44 < itsnotlupus> hmm. never really looked at TypeScript.
05:45 < Zak> you should. If you're after typing in JS, it would be one of the recommended solutions
05:45 < Zak> and as far as i'm aware, you can integrate it with normal JS code too
05:45 < itsnotlupus> one of the impetus for this was to be able to assign types to documents returned by MongoDB without messing with them beyond setting their __proto__ property.
05:45 < Zak> i'm not entirely sure if you can create types on the fly though
05:46 < Zak> itsnotlupus: why not have another object to provide scope?
05:46 < Zak> e.g. Something akin to a data dictionary
05:46 < itsnotlupus> Zak: I could. if there's no way to explicitly address the module scope, I'll have to, I think.
05:47 < Zak> it's probably a much better solution tbh
05:47 < Zak> then when you're converting crap from MongoDB, you'll just call your converter class
05:47 < Zak> much easier to test too
05:47 < Zak> spin up an instance and run tests against it
05:47 < Zak> its only going to add one layer of abstraction
05:48 < Zak> rather than relying on exposing through a scope
05:48 < itsnotlupus> well yes.. the converting bit is almost a no-op with this though, which is nice..   mongoresult.__proto__ = Title, and boom, instant accessors with validation and whatever else without copying data around.
05:48 < Zak> it would be just as fast though
05:48 < itsnotlupus> well, __proto__ = Title.prototype, sorry. 
05:48 < Zak> i guess there's some language overheads
05:49 < Zak> but tbh, you should be worrying about those sorts of optimizations later
05:49 < Zak> better to go with a nice solution
05:49 < itsnotlupus> yeah.. it's not a huge deal ultimately. I was just hoping I had missed something.
05:49 < Zak> i think i'm doing a similar thing to you in some code I wrote
05:49 < Zak> except in my case, i'm consuming JSON through REST
05:49 < itsnotlupus> it's a bit funny I can do things by trashing the global object I can't do by trying to stay within a module.
05:50 < Zak> however...
05:50 < Zak> you should be able to export all of these things dynamically too
05:51 < itsnotlupus> yes, the exporting bit can be dynamic.
05:51 < Zak> types.forEach(function(type) { module.exports[type] = type })
05:51 < Zak> something like that i think
05:51 < Zak> don't quote me on that though. my brain is dead.. almost the end of the day
05:51 < Zak> wouldn't that sort of solve your problem then?
05:51 < itsnotlupus> nah, your stuff looks fine.
05:51 < jwm> speaking of brain dead..
05:52 < jwm> anyone explain the module.exports crap to me
05:52 < jwm> trying to figure out my own mongoose code
05:52 < jwm> heh
05:52 < itsnotlupus> kinda. ultimately I just need to use an explicit object rather than relying on scopes, global or otherwise.
05:52 < Zak> because then in your module you could do M.Asset
05:52 < Zak> that's probably fine tbh
05:53 < jwm> in web.app I have models.web = require ('./models/web'); 
05:53 < Zak> Another object might be cleaner in some ways
05:53 < jwm> in models/web/index.js I have exports.techs = require("./techs")(mongoose).model;
05:54 < jwm> I was wondering about the (mongoose).model
05:54 < jwm> I export a function(mongoose) out of techs.js
05:54 < jwm> mongoose is a global though
05:54 < jwm> I was wondering if there was a cleaner way of writing that
05:55 < itsnotlupus> module.exports = (function(mongoose){ ...))(mongoose) in techs.js, maybe?
05:55 < itsnotlupus> then require("./techs").model directly?
05:56 < itsnotlupus> (the two "mongoose" in techs.js being somewhat optional, although it's nice to list your expectations somewhere, even if they're global.)
05:56 < jwm> yeah
05:56 < jwm> I was just wondering about the thing I was doing with the require line
05:57 < jwm> require("./techs")(mongoose).model;
06:30 < bubbles10101> its a bit subjective, but which user or repo has a good code style as determined by the community?
06:31 <@mbalho> github.com/felixge github.com/substack
06:31 < superjoe30> I disagree with felixge
06:31 <@mbalho> also https://github.com/felixge/node-style-guide
06:31 < superjoe30> he takes OOP overboard
06:32 < bubbles10101> mbalho: ta, yeah ive read felix's style guide before
06:32 < superjoe30> bubbles10101, you can pretty much look at any of these guys: https://npmjs.org/recent-authors
06:32 < bubbles10101> superjoe30: there does seem to be a trend away from oop in some circles. what's the feeling around here?
06:33 < superjoe30> oop is fine
06:33 < superjoe30> don't abuse it
06:33 < superjoe30> well I guess I should say, *Objects* are fine. don't abuse them
06:33 < bubbles10101> ok
06:33 <@mbalho> my opinion is require('inherits')
06:34 < superjoe30> I'll have to side with Jacob Gabrielson in saying that "object oriented programming" is like "pants oriented clothing"
06:34 < othiym23> or, y'know, use util.inherits(), which is basically the same thing, only not living in a parallel, browserified universe
06:35 < othiym23> bubbles10101: I like rwaldron's Idiomatic.js Style Guide: https://github.com/rwldrn/idiomatic.js
06:36 < othiym23> although I don't follow a lot of his recommendations ;)
06:36 < othiym23> the spaces between parens and keywords in if statements just kills me
06:40 < bubbles10101> othiym23: hmm thats interesting.. could be wrong but there seems to be a split in style/philosophy between front end and back end heavy devs?
06:41 < superjoe30> most of us are both
06:41 < bubbles10101> both sure. but 80/20 rule would likely apply
06:42 < superjoe30> perhaps
06:44 < bubbles10101> notice a distinct difference in the idiomatic signees - it seems many notables have not signed on
06:45 < bubbles10101> but whatever.. thats not the place for an outsider noob to comment on right ? ;)
06:46 < superjoe30> "idiomatic signees"?
06:46 < bubbles10101> tjholowaychuk, substack, isaacs should be enough to get going. thanks for the help
06:46 < superjoe30> what does that mean?
06:47 < bubbles10101> superjoe30: those that publicly endorse idiomatic.js https://github.com/rwldrn/idiomatic.js
06:48 < superjoe30> this is the first time I've seen that
06:48 < superjoe30> certainly do not endorse it
06:48 < bubbles10101> that is my point - duh
06:48 < bubbles10101> :p
06:49 < xer0x> That's a lot of stars for a project I haven't seen either
06:49 < bubbles10101> othiym23 was recommending it, and hence my comment about frontend devs, as a quick scan seemed that may explain the large amount of stars
06:49 < bubbles10101> i wasnt trying to say some devs only code back or only code frontend. 
06:49 < superjoe30> bubbles10101, I always strive for excellent code and I have published about 30 npm modules. I'd be honored if you took inspiration from me
06:51 < bubbles10101> superjoe30: sure, /me takes a look
06:52 < bubbles10101> ahh i see you like coffee. heretic! ;)
06:53 < bubbles10101> i do too, although it doesn't have much love with the core node guys it seems
06:53 < superjoe30> bubbles10101, I switched to coffee, then to coco, then back to pure js.
06:54 < bubbles10101> ok
06:55 < bubbles10101> yeah actually that's why im asking about JS style. im just going to stick with it
06:56 < bubbles10101> technical arguments aside, CS is tempting but if its failed to capture enough mindshare...
06:56 < phun-ky> Quick question: how to I recuce node cpu and memory usage. I'm running a node app (grunt) which has a CPU load on 50-90% and it increases it memory usage continously. It's currently on whopping 1.5 GIG of used memory.. what gives?
06:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:58 < superjoe30> sounds like a leak
06:59 < phun-ky> superjoe30: yep. trying to figure this one out.. i run two other node applications (one more instance of grunt itself) and they look fine :/
07:15 < phun-ky> superjoe30: just to sum up/close "issue", i watched over 5000 files and 1200 directories, when I removed the watch, everything looks fine ( https://github.com/gruntjs/grunt-contrib-watch/issues/36 <- if interested )
07:36 < mscdex> gotta love vs express... can't debug 64-bit processes
07:38 < Bergle_1> not surprising for free.
07:42 < superjoe30> https://github.com/superjoe30/swig-email-templates
07:43 < phun-ky> superjoe30: nice one ;)
07:44 < segomos> phun-ky: what os are you having the memory issues with on the watch
07:45 < phun-ky> segomos: windows 7 32 bit on a 64 bit arch
08:05 < jawsome1> Having a difficulty locating this. Does anyone know of a module/library that can manipulate images from either a binary buffer or a base64 encoded image?
08:09 < SomeoneWeird> jawsome1, well there is canvas bindings
08:13 < jawsome1> SomeoneWeird: Thanks for the direction, I haven't tried Canvas yet. :) Looking now.
08:17 < timoxley> jawsome1 imagemagick?
08:18 < timoxley> jawsome1 e.g. https://github.com/aheckmann/gm/issues
08:19 < jawsome1> timoxley: Since it's a CLI-Wrapper, it doesn't accept the buffer directly, I could easily give it a file however, my goal is to eliminate all I/O unless it's being used for the database. Rendering an image(1024x768) -> Making a thumbnail of sorts and compressing for easy delivery -> storing both in a Riak bucket.
08:20 < timoxley> jawsome1 best solution is one that requires no code
08:20 < timoxley> jawsome1 perhaps consider a service
08:20 < timoxley> e.g. https://transloadit.com/
08:22 < jawsome1> timoxley: I had tried gm with streams as my original implementation used gm, to no avail. While I can see where that's a benefit, this is done server side and during load time so, network latency to go to that service is most likely going to be more costly in response time than my current implementation of writing both to disk, sucking their values into Riak and then throwing away the files on disk.
08:22 < gmg85> hi guys
08:23 < gmg85> am trying to load handlebars template text from my nodejs server
08:23 < gmg85> how can i acheive this
08:23 < gmg85> ?
08:23 < timoxley> gmg85 what do you mean
08:23 < timoxley> as in you want to apply a handlebars template?
08:23 < timoxley> on the serverside
08:23 < timoxley> or on the clientside?
08:26 < gmg85> timoxley, i have handlebars installed using npm
08:26 < gmg85> the compile method is called with the template string and data to merge into the template string right?
08:27 < gmg85> was asking how to load the template content/string from an external html file on nodejs
08:28 < SomeoneWeird> fs.readFile
08:29 < gmg85> SomeoneWeird, the answer was staring at me all along...
08:29 < gmg85> SomeoneWeird, thanks...
08:32 < yarco> why json format doest support comment ?
08:34 < SomeoneWeird> yarco, why should it?
08:35 < yarco> SomeoneWeird: certainly for add comment or temporary disable a field
08:36 < thealphanerd> Nexxy: you around>?
08:36 <@Nexxy> thealphanerd, always lurking
08:36 < thealphanerd> ha
08:37 < thealphanerd> I figured out that problem with socket finally
08:37 <@Nexxy> hey that was good time
08:37 < thealphanerd> for six months I've been banging my head
08:37 <@Nexxy> oh?
08:38 < MI6> joyent/node: Chris Dent v0.8 * 6b4a935 : install: add simplejson fallback  Make tools/install.py work with python  - http://git.io/EYAWfw
08:38 < thealphanerd> I was always specififying an ip on socket.connect();
08:38 < thealphanerd> and this entire time I could have just left it blank
08:38 < thealphanerd> to get the functionality I wanted 
08:39 < [AD]Turbo> hi there
08:39 <@Nexxy> thealphanerd, lol
08:39 < thealphanerd> sigh
08:39 < thealphanerd> I kept thinking up hair brained schemes
08:39 < thealphanerd> I though the function required the IP
08:40 <@Nexxy> :x
08:40 < thealphanerd> never once though to check the documentation on it
08:40 < thealphanerd> all the documentation for socket.io calls on lcoalhost
08:40 < thealphanerd> and a port
08:42 < thealphanerd> sigh
08:50 < Sico> I am hoping somebody can help me, I am try to getting with my first node project, and I am wanting to use the express framework. I run npm install -g express, I then try to run express however in my terminal I get express command not found. What am I doing wrong>
08:51 < skope> Sico: how exactly did you run express?
08:53 < Sico> I have site folder that contains a package.json - I then CD to that folder run npm install. And then run express to run the node server. and get express command not found
08:53 < listochkin> Sico: make sure that your npm bin folder is in your PATH
08:54 < skope> stupid question: how do i escape ' in string?
08:54 < Sico> export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local:/usr/local/bin:/usr/local/sbin:/usr/X11/bin:/opt/X11/bin" this is my current path
08:54 < skope> "'" or '\'' doesnt seem to wokgr
08:54 < skope> work*
08:54 < listochkin> Sico: I suggest you installing it locally and adding ./node_modules/.bin/ to your path
08:55 < listochkin> that way you won't ever need to install something globally
08:56 < listochkin> or add /usr/local/share/npm/bin
08:58 < Sico> @listochkin THANKS!
08:59 < listochkin> Sico: :)
08:59 < mscdex> hrmm... i think i'm gonna write an exchange client for node
09:00 < mscdex> activestynk!
09:00 < mscdex> i mean activesync!
09:05 <@konobi> mscdex: for P-IMAP ?
09:09 < mscdex> no, mostly for activesync
09:10 < mscdex> just for fun
09:16 < Industrial> http://cloud.github.com/downloads/wycats/handlebars.js/handlebars-1.0.rc.1.js this includes nodejs code that makes it unable to be used with browserify. Does anyone have a solution for this?
09:16 < Industrial> specifically, the require() code.
09:17 < medikoo> Industrial: post an issue on handlebars, and prepare own version that's correct
09:18 < medikoo> Industrial: I'm doing that, and name such packages as name-x (x for cross-environment), so you may come up with handlebars-x cross-environment npm package
09:20 < Industrial> medikoo: actually I see a handlebars-browserify package
09:21 < medikoo> Industrial but browserify is just one of the bundlers, there are others
09:21 < medikoo> and they can make use of that package as well.. it's not browserify specific problem
09:22 < medikoo> the problem is that package maintainer assumes that npm is strictly for server-side packages, while it's not true anymore
09:23 < medikoo> so it's rather about providing cross-environment version, you may name it as well handlebars-cross-env, it will fit better the case ;-)
09:27 < medikoo> Industrial: ah.. you meant that you already found one, that's the solution then
09:28 < Industrial> yep
09:28 < Industrial> but I'm not really set on using Ember.JS either, I'm still looking around. AngularJS is also a contestant :)
09:29 < Industrial> and I really dig AgilityJS's concept
09:29 < dominictarr> hey, what is the best minifier?
09:29 < medikoo> Industrial: I take AngularJS as great solution if backend is not JS, if backend is JS I would try something that would allow to share my codebase across client and server
09:30 < Industrial> dominictarr: uglifyjs
09:31 < medikoo> uglifyjs is buggy and slow, if there is one based on esprima I would go with that one
09:31 < stagas> Industrial: you should also try component
09:31 < dominictarr> right, what is the esprima one called?
09:32 < medikoo> dominictarr: Looks as Escodegen does that: http://esprima.org/demo/minify.html 
09:33 < listochkin> mscdex: why not LDAP?
09:33 < mscdex> listochkin: LDAP is already done
09:33 < mscdex> client and server
09:34 < dominictarr> medikoo: it doesn't mention minifying in the readme
09:34 < dominictarr> I need a cli tool that I can put into a script
09:37 < listochkin> mscdex: yep, just found. Another suggestion: WS-* There's a project already but it doesn't do much: https://npmjs.org/package/ws.js
09:38 < listochkin> mscdex: although dealing with WS-* and XML in general is far from *fun*
09:39 <@konobi> mscdex: you know what i'll suggest =0P
09:55 < jack150> I've got a basic question about listeners: server.on('connection', function(stream) ... 1. on = addListener 2. 'connection' is the name of the eventHandler 3. stream is an object but of what type? how can I access 'stream'?
09:56 < SomeoneWeird> stream is a stream
09:58 < jack150> that's very philosophical ;)
09:58 < jack150> is stream a listener object?
09:59 < SomeoneWeird> a stream is a stream...
09:59 < SomeoneWeird> http://nodejs.org/docs/latest/api/stream.html
10:00 < _ior> http://nodejs.org/api/process.html#process_event_uncaughtexception this saddens me
10:01 < _ior> i fully understand why it's a bad solution, but i don't like that the solution we're pointed to instead is experimental
10:01 < _ior> then again, i guess that's what we get for using a pre1.0 api :)
10:29 < mscdex> listochkin: the less XML the better ;-)
10:29 < mscdex> konobi: .doc file parsing? :-D
10:36 < mansoor-s> OMG OMG OMG
10:36 < mansoor-s> wtf is this
10:37 < mansoor-s> some ass hat API provider returns a list in XML format, instead of <Items> <Item><Item><Item><Item></Items>   they have <Items> <Item1><Item1><Item2><Item2></Items>
10:37 < mansoor-s> seriously... wtf?
10:40 < chovy> anyone use jake?
10:41 < chovy> i'm wondering if i can run a task on the production server remotely.
10:41 < chovy> and also, which 'jake' project should i be using, there seem to be several on github
10:41 < charliesome> chovy: check out capistrano
10:44 < chovy> is there anything like capistrano for node? I need to use my mongoose schemas in the rake task.
10:58 < mscdex> aw, gimap stopped sending unilateral updates to message flags to imap clients :-\
10:58  * mscdex shakes a fist at the IMAP RFC for not being specific enough
11:05 < reuf> hello - have a span tag: <span style="font-size: medium; color: #ff0000" id="sugesstion"></span> - which should display messages after i call $('#sugesstion').html("Thank you for your suggestion.").fadeOut(2000); - however it only works the first time i call it - on consequent calls nothing is shown - what am i doing wrong?
11:07 < _ior> reuf without seeing anything else, my first guess is that you never set the div to visible again with a $('#suggestion').show
11:08 < _ior> but i am very far from a jquery expert
11:10 < reuf> _ior: no i dont
11:11 < reuf> _ior: thanks
11:11 < _ior> only thank me if that's actually the problem :) i have no idea if $().fadeOut() sets the element to invisible or not
11:29 < jvanveen> hey
11:29 < jvanveen> is it possible with npm to install from github?
11:29 < Gottox> jvanveen: yes, it is
11:29 < jvanveen> Gottox: ok great :D
11:32 < jvanveen> that just worked out of the box :D
11:33 < phun-ky> is there a smooth way with http.request to figure out the response encoding and contenttype? 
11:34 < phun-ky> i can't figure out to do this, seems options only allow to set encoding /contenttype but i want the app to figure this out automatically..
11:53 < _ior> free cats 17 hours ago?
11:56 <@konobi> mscdex: boo!
12:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:18 < bid> hi, what should i use for copying folder from a\ to b\ ? i saw that there is fs-extra and also wrench my question is what is recommended (just for copy/delete folder) also if i will use fs-extra is that means i have to require both fs and fs-extra?  
13:11 < phun-ky> does node have something similar to: proxy_ssl_session_reuse as nginx does?
13:15 < mansoor-s> phun-ky, take a look at https://github.com/nodejitsu/node-http-proxy
13:20 < phun-ky> mansoor-s: im trying to create a proxy that allows me to enter http://localhost/bootstrap/ and that will direct me to https://www.domain.com/bootstrap/ without the use of certificates. nginx apparently does not use certificates. will node-http-proxy do this?
13:20 < mansoor-s> hmm
13:20 < mansoor-s> honestly not sure
13:21 < mansoor-s> how dows it doe that?
13:21 < mansoor-s> 301 or something of that nature?
13:22 < phun-ky> two secs
13:25 < phun-ky> mansoor-s: yeah, with a 301
13:28 < phun-ky> pershaps I could just do the same
13:29 < mansoor-s> phun-ky, https://github.com/nodejitsu/node-http-proxy#options
13:31 < ins0mnia> phun-ky: https://github.com/substack/bouncy will do the job for you
13:32 < mansoor-s> ins0mnia, is that different from http-proxy?
13:34 < ins0mnia> mansoor-s: It's faster ;) that's my own experience anyway
13:35 < mansoor-s> ins0mnia, huu.. i'll have to take a look
13:39 < nurettin> hi, I have a project that needs a relational database, email sending, email signup, ldap authentication, wcf (windows communication foundation) client and html templating. Is node.js suitable for this ?
13:40 < nurettin> I've seen various libraries online but thought it would be better to just come here and ask for an opinion before testing them all
13:53 < gildean> nurettin: afaik all those should be completely doable
14:00 <@konobi> mscdex: rarinfo! or mediainfo!
14:00 < exit2> anyone have any experience with any of the mssql node modules?
14:23 < motaro> anybody has any experience with sqlite3?
14:25 < Sicp> Im having a problem deploying
14:26 < Sicp> that Twitter app from yesterday is working just fine now (the one that uses SocketIO), but the problem is when I want to deploy this app. I've linked a couple of things locally (127.0.0.1) and that of course will not make sense when deploying...so..
14:27 < Sicp> here's the tweetServer.js http://i.ole.im/q9syi0 and here's the template.html file http://i.ole.im/uge0fw
14:28 < Sicp> what I suspect is host and port from tweetServer.js, script src and io.connect() from template.html, but I don't know how to remedy this
14:35 < boya> Anything compatible to Devise (rails) for node.js?  Devise is authentication / user management if you don't know what it is.
14:35 <@konobi> boya: passport?
14:36 < boya> Is that the recommended user authentication npm?
14:36 < boya> I'm new to node so using this as the get my feet wet
14:37 <@konobi> boya: try it and see
14:37 < boya> thanks
14:40 < exit2> boya: I asked the same question a few months ago and went with Passport from the beginning.  I have had no issues with it and all-in-all it's super easy to use
14:42 < boya> I was looking at it … would only really used the username password auth portion of it.  I don't see where it does any hashing / salting / db store though.  Am I missing that or is that something I need to write in.
14:43 < exit2> boya: I used it for the oauth sort of stuff
14:43 < exit2> twitter and github auth
14:43 < boya> fair enough thanks exit2 
14:44 < zot> I have code like this:  event.on('asdf', self._handler.bind(self)) … where I later want to remove the listener.  The obvious and ugly mechanism is to do:  self._bound_handler = self._handler.bind(self); event.on('asdf', self._bound_handler);, and then later event.removeListener(self._bound_handler);  because it's on a member func, I use bind, and because bind calls aren't cached, it must be stored.  is there a more elegant way?
14:47 < jmar777> zot: just hide that in a cleaner looking method call :). i mean, you're going to have to retain the reference somewhere, so pretty much any solution will amount to something like that
14:48 < zot> jmar777: that was my fear, but now that i've used tihs mechanism in 3 different places, i thought it time to ask if there's something i've missed in node.js.
14:49 < zot> the actual code does in fact do something slightly cleaner :)
14:49 < mansoor-s> damn it appfog...
14:49 < mansoor-s> given me and my clients nothing but trouble ;(
15:09 < jtomasrl> I have a 3 layer architecture for managing orders in a store, mobile app, server, database. For the mobile app to login using username/password i should use oauth or there's a simpler way or doing it?
15:10 < isaacbw> jtomasrl, if you are in control of all the layers, there's no reason to use oauth
15:11 < isaacbw> oauth is if you are opening your API to third party apps
15:11 < exit2> although, it would be simple
15:11 < isaacbw> it would be more complicated to use oauth if you don't have to
15:11 < jtomasrl> im in control of all the layers, it's not an open API
15:12 < isaacbw> then you would probably be wasting your time with oauth
15:13 < jtomasrl> but how do i authorize the right app to login, for example someone doing curl requests into my server
15:13 <@konobi> jtomasrl: seen http-signature?
15:14 < jtomasrl> konobi: nope, i will. ty
15:15 < isaacbw> it wouldn't be a problem if someone did that as long as you authenticate properly
15:15 < isaacbw> and you can't really avoid it
15:15 < isaacbw> if someone wants to pretend to be your app, they're going to do it
15:16 < jtomasrl> well that's what happend to whatsapp
15:16 < isaacbw> just make sure they can't do anything malicious even if they do
15:16 < isaacbw> you just have to make things safe on the server-side, not the client-side
15:17 < jtomasrl> right
15:17 < isaacbw> if you design eveything pretending that you will release your API publicly, you'll be safe
15:17 < isaacbw> just don't rely on the client to block malicious behavior, that should all be on the server
15:17 < jtomasrl> btw, do mobile apps manage cookies or something like that to store sessions?
15:17 <@konobi> jtomasrl: assuming a rest api... restiy has a bunch of safety plugins that you can enable
15:17 < qbit> anyone know if there was a cve for the 32 bit size/index overflow ? 
15:18 < jtomasrl> konobi: restify?
15:18 <@konobi> yup
15:18 < jtomasrl> yeah im using it right now
15:19 < jtomasrl> do u know where can i browse those plugins?
15:19 <@konobi> check the docs
15:19 < jtomasrl> ok
15:20 <@konobi> jtomasrl: http://mcavage.github.com/node-restify/#Bundled-Plugins
15:21 < jtomasrl> thanks
15:22 < jtomasrl> does node come with CSRF protection?
15:23 <@konobi> no
15:24 < tgriesser> jtomasrl: http://www.senchalabs.org/connect/csrf.html
15:24 <@konobi> node is a runtime environment, not a web framework =0)
15:24 < isaacbw> jtomasrl, there are lots of modules that will do it though
15:24 < jtomasrl> right
15:25 < isaacbw> https://github.com/hanssonlarsson/express-csrf
15:25 < klaemo> isaacbw: that one is deprecated
15:25 < exit2> klaemo: http://expressjs.com/api.html#csrf
15:25 < jtomasrl> damn no one working for restify modules xd
15:25 < exit2> it comes with express now
15:25 < isaacbw> hah
15:26 < isaacbw> I just googled express csrf and linked the first result
15:26 < isaacbw> node is plagued by vaporware
15:26 < exit2> isaacbw: I did the same thing awhile back and came up with the same answer until someone pointed out that express has it as a middleware now
15:26 < klaemo> exit2: i know :) 
15:26 < exit2> go figure ;)
15:27 < klaemo> it's actually a connect middlewar as pointed out by tgriesser
15:27 < exit2> I meant to direct that at jtomasrl, not you klaemo :P
15:27 < exit2> not enough coffee
15:27 < klaemo> ^^
15:27 < jtomasrl> :P
15:28 <@konobi> jtomasrl: api's shouldn't be susceptible in the same way
15:28 < jtomasrl> why not
15:29 < klaemo> i actually just dropped in for a tiny question and already i'm in the middle of a conversation that's not concerning me at all. boy, that escalated quickly ;)
15:29 < isaacbw> it's a way to protect form input
15:30 < TechnoCat> cronopio: just setup my node-http-proxy, worked wonderfully first try. :)
15:30 < exit2> I'm creating an app that tracks the users location, I have everything working right now through socket.io where I'm sending their lati and long on 'connect' to the server side.  What would be an elegant way to have it send every minute or so without slowing things down?
15:30 < cronopio> TechnoCat very cool!
15:31 < klaemo> how do y'all handle the case where your client side js is on a cdn or subdomain and has to make requests to yourdomain.com? CORS? JSONP? some kind of domain routing magic?
15:32 < jtomasrl> klaemo: does res.header("Access-Control-Allow-Origin", "*"); works?
15:33 < exit2> never mind I guess I could just use setInterval for now
15:33 < klaemo> jtomasrl: i haven't tried anything yet. wanted to discuss best practices first. also, "*" is kinda excessive, isn't it?
15:34 < jtomasrl> klaemo: even tho it doesnt seems to work for me, but i've read posts that worked for some ppl
15:35 < klaemo> yeah, there's a little more to CORS then just setting the header
15:36 < jtomasrl> klaemo: i also setup an OPTIONS request method path
15:36 < klaemo> jtomasrl: http://cuppster.com/2012/04/10/cors-middleware-for-node-js-and-express/
15:36 < jtomasrl> that's exactly what i did
15:36 < klaemo> i see
15:38 < klaemo> so. all the big sites out there that host their assets on seperate domains use CORS?
15:38 < klaemo> aren't there issues with IE?
15:38 < jtomasrl> https://gist.github.com/4539494, i added some cache stuff bc my free server host uses varnish
15:40 < klaemo> looks legit
15:40 <@konobi> o.O
15:46 < klaemo> what's wrong, konobi?
16:10 < stephank> I'd like to try and bump this PR again. I believe all it needs is some decision making. https://github.com/joyent/node/pull/3036 (Response object for HTTP Upgrade/CONNECT)
16:12 < stephank> I was a tad late back when 0.8 was in development, and think it'd be a shame to let another release slide without trying.
16:15 < Sicp> fuck SocketIO, ok?
16:15 < Sicp> ok
16:16 < Sicp> finally, it's up!
16:16 < Sicp> but with no socketIO
16:17 < superjoe> any LearnBoost guys in here?
16:17 < superjoe> look what I did :) https://github.com/superjoe30/boost
16:18 < KamikazeKnutter> where's my free hug?
16:18  * superjoe hugs KamikazeKnutter 
16:18  * KamikazeKnutter feels tingly
16:22 < bnoordhuis> Sicp: https://github.com/c9/smith.io <- socket.io replacement
16:22 < bnoordhuis> cloud9 had all kinds of issues with socket.io too
16:22 < Sicp> it isn't an error, it's just something that I think is missing from my side
16:22 < Sicp> http://stackoverflow.com/questions/13406124/node-js-cant-get-socket-io-to-work-with-express-getting-404s-on-script-file
16:22 < bnoordhuis> oh, okay. prepare for errors then :)
16:22 < Sicp> that bad?
16:22 < Sicp> <-- new to Node
16:23 < bnoordhuis> well... the failure cases can be pretty bad
16:23 < bnoordhuis> and hard to debug
16:27 < foobar321> Hi. How to find last uppercase character in a given string ?
16:28 < foobar321> Should I use regex for that ?
16:28 <@konobi> foobar321: check MDN
16:29 < Sicp> http://i.ole.im/pefqof is this valid code?
16:30 < Sicp> it works fine on localhost; on deployment I get that the app crashed
16:30 < Gottox> Sicp: yes
16:30 < isaacbw> foobar321, you can
16:30 < Gottox> Sicp: what's the error message?
16:31 < Sicp> one moment
16:38 < Sicp> this is the error message, http://i.ole.im/fy51en
16:39 < Sicp> this is the entry point of the app, http://i.ole.im/yaf8mv and this is the HTML file that it works on http://i.ole.im/14v9h0
16:39 < Sicp> I don't see any syntax errors in the code, the error points to line 31
16:40 < Sicp> the app is running just fine locally
16:54 <@konobi> Sicp: "var socket = io.connect('http://localhost');"
16:54 < Sicp> yea, what's up with that?
16:55 < Sicp> oh, you mean the localhost issue, well yes I know that this doesn't make sense, but I wanted to wait for the other more sensible error concerning that to pop up
16:55 < Sicp> I know that it should be something else, but I don't know what
16:55 < Sicp> I'm just going to put '/
16:55 < Sicp> '
16:57 < Sicp> fucking finally, that worked, thanks konobi 
16:57 < Sicp> I don't know if it was also you helping me out the other day
16:57 < Sicp> but thanks anyways
17:08 < kamoricks> There is an extenral resource which supports a fixed number of connections. I would like to limit how many simultanious threads access it. My first thought: Blocking semaphore with permit count = access limit. How would I implement this in node?
17:15 < clondon> Anybody here use the npm module `unzip` ?
17:16 < niggler> clondon use zip.js
17:16 < niggler> err jszip
17:16 < clondon> thanks niggler
17:17 < niggler> https://github.com/Stuk/jszip
17:17 < niggler> nice thing is that it's pure js
17:17 < clondon> wow really? cool
17:17 < clondon> niggler: have you used it?
17:17 < Kakera> don't use jszip
17:17 < Kakera> it doesn't work with buffers
17:17 < clondon> haha
17:17 < Kakera> use adm-zip
17:18 < clondon> k, I'll look into that one too
17:19 < niggler> doesnt jszip use typed arrays?
17:20 < Sicp> I think the app is up for now, http://cryptic-woodland-8693.herokuapp.com/
17:20 < Sicp> yea.......just crashed
17:20 < Sicp> lol
17:20 < Sicp> fuck my code
17:21 < niggler> you might need some more lisp Sicp
17:21 < Sicp> real funny
17:21 < Sicp> :P
17:25 < clondon> Kakera: is it possible to open a remote zip file?
17:25 < clondon> (with adm-zip)
17:31 <@konobi> a remote zip is only a zip file that isn't yet local
17:31 < scott_gonzalez> isaacs: I've got a developer installing node-syslog via npm, but gyp is building a Debug target instead of a Release target. Do you know what would cause that? It's working properly for me with the same version of node/npm/node-syslog.
17:32 < tjfontaine> he built a debug node
17:33 < scott_gonzalez> tjfontaine: Ok, we'll look into that. Thanks.
17:36 < ajpiano> tjfontaine: i just use nave to install node(s), i didn't *attempt* to build a debug node
17:37 < ajpiano> ( i am the developer )
17:37 < boya> Ordering a couple books at the moment.  Any recommendations for a node book?
17:40 < ToBago70>  Ciao a tutti :) un click grazie sul video di Monica Bellucci  http://youtu.be/EZuWHms7N64 
17:41 < tjfontaine> ajpiano: and you don't have anything in $NAVE_CONFIG that looks like --debug do you?
17:42 < ajpiano> hm, i don't have a $NAVE_CONFIG
17:42 < ajpiano> i tried 'cat $NAVE_CONFIG' and nothing happens
17:42 < ajpiano> loooking at my ~/.nave/naverc though,, there's no --debug stuff
17:43 < Sicp> here's the final fucking product
17:43 < Sicp> http://bieber.rs.af.cm/
17:44 < ajpiano> i think i might have a REALLY old version of nave
17:44 < ajpiano> :/
17:44 < kamoricks> Sicp: You have content encoding issues.
17:45 < Sicp> it is shit, kamoricks 
17:45 < Sicp> but the idea is what I wanted to establish
17:45 < Sicp> as for what you're seeing? utter shit
17:45 < tjfontaine> ajpiano: when inside the node repl what does process.features.debug say?
17:45 < draginx> Sicp: how did u make that? socketio?
17:45 < ajpiano> tjfontaine: false
17:45 < kamoricks> It's a webpage. Look at the source.
17:45 < Sicp> yes draginx 
17:46 < draginx> nice :)
17:46 < Sicp> no idea why it won't run for longer than 10 seconds on Heroku though, I had to go back to AppFog (had given up on it yesterday)
17:46 < Sicp> of course it's a webpage, kamoricks, but the backend (and entry point for the app) is a tweetServer.js
17:57 < isaacbw> stop being so quiet, I need to test something with IRC
17:58 < zomg> isaacbw: just start more clients of your own! ;)
17:58 < isaacbw> :O
17:58 < isaacbw> SPAM ALL THE CHANNELS
17:58 < isaacbw> but you won't know, because I'll be having real conversations with myself
17:58 < isaacbw> maybe zomg is me
17:59 < isaacbw> are you me, zomg?
17:59 < zomg> Yes
17:59 < zomg> /nick isaacbw2
18:00 < isaacbw> how did you manage that
18:00 < FunnyLookinHat> You can change your nick to whatever you want...
18:01 < isaacbw> haha, I mean how did he manage to type and send '/nick' without a space before it. What client are you using zomg?
18:01 < whateveryouwant> hey, no 8 char limit!
18:01 < FunnyLookinHat> lol.
18:01 < _ior> /nick hawhaw
18:01 < isaacbw> I have a huge crush on Captain Picard
18:01 < zomg> isaacbw: irssi
18:01 < isaacbw> mm
18:01 < _ior> any non-printing character inserted before the leading / will break the irc command
18:01 < zomg> most clients either let you do / /foo
18:01 < _ior> i use ctrl-b ctrl-b
18:01 < isaacbw> I'm watching next generation for the first time
18:01 < zomg> or ctrl+/foo
18:10 < TonkaTruck> I'm working on a fairly simple iOS app that requires a bit of a "gaming" server for realtime play.  I'm just sending x-y coords over sockets and managing user info and sessions in Redis.  Is there any reason net.Socket wouldn't be right for this?  It's going to be running on was ec2.
18:11 < TonkaTruck> I mean net.Server
18:13 < daanavitch> Does anyone here have experience with creating a native desktop application with HTML technologies?
18:13 < isaacbw> why would you want to do that
18:14 < daanavitch> with wrappers like Appjs or chromiumembedded?
18:14 < daanavitch> To create a normal application, without learning a language like C++
18:15 < daanavitch> and because HTML works on all platforms
18:15 < igl> CEF comes with bindings for C, C++, Delphi, Java, .NET, Python
18:15 < isaacbw> then why not make it a web app
18:16 < igl> appjs is easy but not perfect
18:16 < daanavitch> because it needs to be used offline primarily
18:16 < daanavitch> I can't seem to compile an actual Mac OS X application with appjs
18:16 < isaacbw> if you're going to restrict yourself to the desktop, you could save a lot of time by using a library designed for desktop apps
18:16 < igl> adobe has this its CEF wrapper for brackets in a repo
18:16 < TonkaTruck> daanavitch: I'd imagine you just need to bridge js to a web view in whatever native framework you're using.  Just like all Cordova.
18:16 < daanavitch> I only got a .sh file I had to launch from terminal
18:17 < isaacbw> and they will run on any program you would be using appjs on 
18:17 < isaacbw> gtk and qt are the main ones
18:17 < isaacbw> and they are very enjoyable to use
18:19 < isaacbw> and you can use a library like clutter if you're looking to create a unique UI
18:22 < isaacbw> you could also design for the future with html5's offline application APIs
18:22 < booyaa> TooTallNate: you there?
18:22 < igl> or you can make a node app and just spawn a chrome instance on "localhost:3000" and have them talk over http
18:22 < TooTallNate> booyaa: yessir
18:23 < booyaa> TooTallNate: got a bit of a newbish question to ask regarding node-plist. i think i've found a bug, would like to try and fix it
18:23 < igl> but needs some hackery like syncronous ajax call on window.onclose to have node know when the window closes
18:23 < booyaa> TooTallNate: i've forked it on github, done npm link, but i can't get any of the tests to run.
18:23 < daanavitch> @igl it needs to work offline too
18:23 < booyaa> TooTallNate: i tried npm test, but i think that has to be defined in package.json right?
18:23 < igl> it does work offline 
18:24 < igl> localhost
18:24 < igl> ;)
18:24 < TooTallNate> booyaa: ya it's in there… it runs "nodeunit test"
18:24 < isaacbw> but anyway daanavitch I think a few people here use appjs so you could try asking a question
18:24 < booyaa> ah okay duh
18:24 < TooTallNate> "tests" rather
18:24 < TooTallNate> booyaa: maybe you need to `npm install` to get nodeunit?
18:25 < daanavitch> @isaacbw My only issue with appjs is that it easily gives away the source code
18:25 < booyaa> TooTallNate: prolly i've just done an npm install -g nodeunit
18:25 < daanavitch> is there a way to develop a closed source app with html tech?
18:25 <@isaacs> daanavitch: no, there is not really
18:25 < TooTallNate> booyaa: that should be good enough
18:25 < booyaa> heh just jumping off the really deep end :D
18:25 <@isaacs> daanavitch: but it doesn't matter, irl
18:26 < booyaa> TooTallNate: win! cheers man, now gonna see if i can fix this. i have horrid feeling it's dayone using a custom version of the plist
18:28 < daanavitch> What about Adobe AIR?
18:28 < daanavitch> Seems reasonable, just create a Captive runtime
18:35 < CoverSlide> you can unzip adobe AIR files
18:35 < CoverSlide> the source will be in another language
18:35 < CoverSlide> and its compiled, but you can disassemble
18:35 < CoverSlide> but the html i think will be plaintext
18:36 < CoverSlide> i hadn't done this in a while, so I can't remember
18:52 < segomos> this is like that hacker game that surfaced in the mid 90s where it had stages and one of them was to decompile a flash file to get the username / password or somethng
18:52 < isaacbw> "hacker"
18:52 < Omega_Work> Any mongoose experts around? :)
18:52 < CoverSlide> there are million of hacker games around
18:52 < segomos> isaacbw: yea
18:53 < zomg> Uplink = the hacker game
18:53 < zomg> such fun game and rather unique as well =)
18:53 < CoverSlide> Omega_Work: you might try #express, or #socket.io
18:53 < CoverSlide> but here is good too
18:53 < Omega_Work> It's a simple schema setup question.
18:53 < Omega_Work> https://groups.google.com/forum/?fromgroups=#!topic/mongoose-orm/Sw7OBRacyR8ff
18:53 < Omega_Work> That's basically the long and short of it.
18:54 < segomos> topic id invalid
18:55 < Omega_Work> Oh?
18:55 < Omega_Work> https://groups.google.com/d/msg/mongoose-orm/Sw7OBRacyR8/jzjrTtX6N0wJ
18:55 < Omega_Work> Try that, that's the google-generated link.
18:55 < Omega_Work> (canonical)
18:56 < segomos> are you trying to store references to other mongoose items?
18:56 < segomos> other mongo items^
18:56 < Omega_Work> segomos: Yes
18:56 < segomos> is there a reason you're not using a relational DB for it?
18:57 < Omega_Work> segomos: The rest of the model worked well with a document structure and supported my desired polymorphism with less fighting.
18:57 < Omega_Work> segomos: I just have this particular situation where I'd like to have some reusable data that's independent of the example document there
18:58 < segomos> you have a few options, to answer your specific question.  you can store objectIDs for the other blocks, you can embed documents (less reusable)
18:58 < Omega_Work> Storing an array of the objectids is basically what I'm after, but I'd like that collection to be keyed
18:58 < Omega_Work> I guess in relational terms it would be like putting a string column on the join table
18:59 < Omega_Work> (and the including it as part of the key)
18:59 < Omega_Work> (many to many)
18:59 < segomos> with OIDs you have to implement your own JOIN ON or you can use Mongoose's functionality
19:00 < Omega_Work> segomos: And mongoose won't let me key the related OIDs by string, eh?
19:00 < segomos> what do you mean 'key them by string'? you can insert strings into the ID if you'd like
19:00 < Omega_Work> segomos: It's like a slot system.
19:01 < segomos> but you can't store more than one of the ID
19:01 < Omega_Work> segomos: I would have "top" and "bottom" in that example, and they're pointers to OIDs.
19:01 < segomos> so store an array of IDs in the blocks
19:01 < segomos> and query for them 
19:01 < Omega_Work> segomos: The ID is specific to the example document, not the block
19:01 < Omega_Work> segomos: One document might call the related object "top" another might call it "side".
19:02 < segomos> i understand that, so if you store the object ID in top on one and in side on another then it isn't really a concern
19:03 < Omega_Work> segomos: Would that not mean that I've got two separate related documents then?
19:03 < segomos> it would mean that
19:03 < Omega_Work> segomos: I suppose I could amend my example to include fake OIDs
19:03 < segomos> let me make a gist
19:03 < Omega_Work> segomos: But that's basically not what I'm intending at that point then.
19:03 < Omega_Work> segomos: kk
19:05 < segomos> wtf, gist is putting '21' in place all of spaces
19:06 < Omega_Work> weird
19:08 < Omega_Work> try a pastebin/pastie maybe?
19:09 < CoverSlide> shame, gist is one of the good ones
19:09 < CoverSlide> oh well let's hope they fix it
19:10 < segomos> Omega_Work: http://pastebin.com/GVJYQbg9
19:11 < hendore> segomos, Been doing it for a few days now :(
19:11 < Omega_Work> segomos: I think that looks good :)
19:12 < chovy> for some reason when my app reboots, the .less stylesheet doesn't get compiled.
19:12 < Omega_Work> segomos: You've improved it slightly to support multiple per section so you definitely get what I"m after ;)
19:12 < Omega_Work> segomos: I guess the question is really how do I tell mongoose that's what I want?
19:14 < segomos> iirc mongoose doesn't handle the joins for you
19:14 < segomos> so you need to write them in like what i did in the function at the bottom
19:14 < Omega_Work> segomos: So I'd just be creating an array and smashing whatever I want in.
19:15 < Omega_Work> segomos: Which I guess is part of the beauty of the whole thing.
19:15 < chovy> the server rather.
19:15 < segomos> yea, you don't want to embed docs because you can't guarantee order without rewriting array functionality
19:16 < Omega_Work> segomos: I also don't want to embed because these "blocks" will end up belonging to multiple pages (as you indicated)
19:16 < segomos> that's still doable but way more complicated than needed
19:16 < segomos> it'd require you looking in all pages for blocks matching an id
19:16 < segomos> which, frankly, sucks
19:17 < Omega_Work> segomos: Right, I don't want that.  I want the blocks to stand on their own.  LOL
19:17 < Omega_Work> I'll know every block I want to work with because it's either individual blocks, or collections of them based on a current page.
19:18 < Omega_Work> So the graph is never in doubt.
19:19 < rakmenon> which is the best node package to create an API service?
19:19 < isaacbw> many people use restify
19:19 < isaacbw> there is rarely a 'best' though
19:20 < CoverSlide> i hear the http module is best for this
19:20 < CoverSlide> i personally know noone using restify
19:20 < rakmenon> im new to this and was working with express till now
19:21 < CoverSlide> not sure what if any advantages there are to using restify over express
19:21 < isaacbw> restify is a lot like express but with fewer facilities for web applications
19:21 < isaacbw> it's more oriented to APIs
19:22 < isaacbw> http://mcavage.github.com/node-restify/
19:22 < isaacbw> the second paragraph is about restify vs express
19:22 < CoverSlide> ok so if you don't have dtrace ... 
19:23 < CoverSlide> although lately i've been using http-server over express
19:24 < rakmenon> yeah restify is lightweight and is made just for APIs - need to dig into it // thx
19:24 < othiym23> Restify is a *lot* simpler internally than Express
19:24 < othiym23> and uses significantly less magic
19:25 < isaacbw> so if you aren't serving html to a browser, you probably don't need to be using express
19:25 < CoverSlide> i do agree on that point
19:27 < rakmenon> isaacbw: agree
19:28 < Omega_Work> What's the feel of using node for serving HTML and other stuff most people just prefer to have rails for?  Is it gaining in popularity?
19:29 < isaacbw> yes
19:29 < isaacbw> node+modules is an alternative to rails
19:29 < Omega_Work> Rails and Symfony (two I'm most familiar with) have very long render pipelines with lots of moving parts.
19:29 < Omega_Work> Oftentimes you can get mired in sorting it all out.
19:29 < Omega_Work> Node seems more like "build your own stack"
19:30 < rakmenon> it's definitely gaining popularity - best option for a javascript programmer
19:30 < CoverSlide> node isn't along the same lines as rails or symfony
19:30 < Omega_Work> CoverSlide: not initially, no
19:30 < CoverSlide> node is more comparable to ruby or php
19:30 < Omega_Work> CoverSlide: But someone could build it up to offer similar conveniences
19:30 < CoverSlide> in either of those you can build your own stack
19:30 < CoverSlide> yes, just like you could with ruby or php
19:31 < CoverSlide> the main difference is that there is an http server built into node, it's easy to use, and not shitty
19:31 < isaacbw> I said node+modules
19:31 < Omega_Work> CoverSlide: Right, I get it's not a logical comparison initially
19:31 < rakmenon> yeah its more like lego blocks
19:31 < isaacbw> there are several modules that attempt to appeal to the same userbase as rails
19:31 < Omega_Work> CoverSlide: But the ease of which you can combine node modules means you can get to the same places
19:31 < isaacbw> we all know what we're talking about :) no need to be pedantic
19:32 < Omega_Work> Yah! :)
19:32 < othiym23> I would say that if you want a full-service, full-stack web app, Rails remains a much easier and friendlier framework than Node
19:32 < othiym23> or at least moves out of Node's sweet spot a fair distance
19:32 < isaacbw> tower.js seems to be attempting to be something like rails
19:33 < isaacbw> they actually say so directly: "Built on top of Node's Connect and Express, modeled after Ruby on Rails."
19:33 < Omega_Work> othiym23: To get started no questions asked, for sure.
19:33 < CoverSlide> tower, geddy, locomotive all are attempting the same goal
19:33 < Omega_Work> flatiron?
19:33 < CoverSlide> flatiron has a different goal
19:33 < othiym23> even when the missing pieces all come together (asset pipelines, good high-level data access patterns encoded as modules), Node is more comfortable operating at a lower level
19:33 < othiym23> anywayz bbiab
19:33 < CoverSlide> bai!
19:34 < Omega_Work> My thought is that you could just put pieces together to make your own framework and implementation workflow for sites.
19:34 < Omega_Work> And still retain control throughout.
19:35 < Omega_Work> Or dare I even say -- try new ideas ;)
19:36 < isaacbw> grocery shopping time
19:36 < isaacbw> >:C
19:38 < kamoricks> I'm using libxmljs. It has issues with namespaces: I'm trying "node.find('//kml:Document/kml:Folder', { kml: KML_URL })" as per their documentation, but that says I have an unregistered namespace "kml". Is there an XML parsing lib less picky about its namespaces?
19:39 < CoverSlide> maybe look into sax-js
19:40 < _6a68> hey all. any good node profilers other than nodetime and dtrace on an illumos VM?
19:42 < phun-ky> i am clueless, can I set up a reverse proxy with node-http-proxy?
19:43 < CoverSlide> phun-ky: yes, that is exactly what node-http-proxy does
19:45 < phun-ky> i'm trying to achieve this: route localhost/apI/customer to www.domain.com/api/customer, i cant seem to find an example that covers that, i might be to blind and overworked to find it
19:47 < scott_gonzalez> Does anyone know why I would get this error (node 0.8.17): TypeError: Object #<ChildProcess> has no method 'disconnect'
19:47 < scott_gonzalez> I assume this isn't a documentation error: http://nodejs.org/api/child_process.html#child_process_child_disconnect
19:48 <@konobi> depends where you're calling it from
19:52 < scott_gonzalez> konobi: I'm calling it directly after spawning.
19:52 < scott_gonzalez> var newManager = spawn( process.argv[ 0 ], process.argv.slice( 1 ) );
19:52 < scott_gonzalez> newManager.disconnect();
19:53 < TooTallNate> scott_gonzalez: that function is for the result of child_process.fork()
19:53 < TooTallNate> not spawn()
19:54 < TooTallNate> scott_gonzalez: i think you want the "detached" option, which is only in v0.9.x
19:55 < scott_gonzalez> TooTallNate: Hmm...ok
19:57 < scott_gonzalez> So if I want to spawn a process and let the current script end, how do I accomplish that with 0.8?
19:57 < TooTallNate> scott_gonzalez: a workaround could be to spawn an "sh" child process that launches another process with &
19:58 < CoverSlide> #child_process_child_disconnect
19:58 < CoverSlide> oops
20:28 < brianc> I AM GOING TO NODECONF AND I AM SO EXCITED
20:28 < drudge> nice
20:28 < klaemo> nice
20:29 < brianc> these articles are awesoooome: https://hacks.mozilla.org/category/a-node-js-holiday-season/
20:31 < Musk> brainc ima jelly >:3
20:31 < brianc> I just got a camping ticket
20:31 < scott_gonzalez> TooTallNate: detached is in 0.8.x and solved my problem. Thanks.
20:31 < brianc> but i'm coming from tax
20:32 < brianc> atx
20:32 < brianc> so I gotta fly w/ my tent
20:32 < othiym23> YAY FOR NODECONF
20:32 < brianc> YAY!
20:32 < othiym23> brianc: I thought the camping tickets were sold out
20:32 < othiym23> they sold out yesterday, at least
20:32 < brianc> yeah
20:32 < othiym23> maybe mikeal's releasing them in batches
20:32 < brianc> by "just" i mean "merely" not "only just now"
20:33 < othiym23> ahhh gotcha
20:33 < othiym23> I got ticket #10
20:33 < brianc> dang!
20:33 < brianc> you fast clicker you!
20:33 < othiym23> well, somehow I got ticket #1 to RealTime Conf last year, so I have a reputation to uphold or something
20:34 < brianc> I've been using this for a while - comes in super super handy for quickly testing APIs: https://github.com/brianc/node-omf
20:34 < othiym23> also there was no way I was going to miss the opportunity to camp out again
20:34 < brianc> i hope weather at end of june isn't hot
20:34 < brianc> sleeping when it's hot is terrible
20:34 < othiym23> brianc: "hot" is relative
20:34 < brianc> but i checked and it seems average temp during june is like 68 or something
20:34 < brianc> I live in texas
20:34 < othiym23> this is Northern California we're talking about here
20:34 < brianc> hot is an absolute here
20:34 < othiym23> I'm saying that relative to Texas it's gonna seem fucking cold ;)
20:34 < brianc> haha awesome
20:35 < kamoricks> It actually snowed in Dallas today.
20:35 < brianc> yeah it's like low 30s in ATX at night tonight
20:35 < othiym23> it was foggy a couple nights at summer camp last year
20:35 < othiym23> granted that was much later in the summer
20:36 < othiym23> and Walker Valley is not nearly as foggy / cold as San Francisco cuz it's further north
20:36 < othiym23> but I wouldnt' be too worried about it being hot at night
20:36 < brianc> awesome
20:44 < bitmage> anyone have a node-inspector successfully running with the heap profiler?
20:45 < othiym23> bitmage: known limitation, use https://github.com/c4milo/node-webkit-agent for heap examination
20:47 < bitmage> othiym23: I'll try that, thanks!
20:49 < emkei> Hello, has anyone did passport with permissions, strugling to add them at the moment.
20:49 < emkei> and I hate passport docs
20:50 < dgs> i'm trying to write a small multiplayer (card) game as a bit of an intro to node + sockets.io. I'm wondering what the best/easiest method of sharing the game world between players? i'm thinking mongdb, but not sure if there is a better way?
20:51 < Shinister> waaait
20:51 < manuelbieh> anyone here who can tell me how i can use promises/Q in combination with node mongojs?
20:51 < Shinister> webos had nodejs built into it?
20:51 < manuelbieh> wat?
20:51 <@mbalho> dgs: do it in memory
20:51 < Shinister> seems so, damn HP
20:51 <@mbalho> dgs: here is a server im working on that is still in memory https://github.com/maxogden/voxel-server/blob/master/server.js
20:52 <@mbalho> dgs: also i only use websockets because the game is webgl
20:52 < dgs> mbalho: that would have been my preference, but not sure how - is there some sort of global session that all requests can access?
20:52 < dgs> k. I'll check it out
20:52 < othiym23> manuelbieh: read up on Q.ninvoke, it's the cleanest / most direct way to map async mongodb-native calls into promises
20:52 <@mbalho> dgs: node is single threaded so you can share variables by scoping them outside your http server
20:53 < dgs> hmm
20:53 < dgs> that seems to make sense...
20:53 < othiym23> dgs: you could create a little session manager module that creates a session dictionary
20:53 < dgs> i'll give that a try =)
20:53 < othiym23> anything requiring the module will get the same instance of the module and thus the same session store
20:54 < othiym23> and once you want something a little more persistent, you could use the same module as your entry point to Mongo or Redis or whatever
20:54 < mehwork> anyone know how to do an &nbsp; in jade?
20:55 < othiym23> mehwork: #\no-break-space
20:55 < othiym23> oops wait wrooong framework
20:57 < Sgeo> So, my current language of interest is Smalltalk. Currently reading about amber-lang, which apparently can run on node.js. My questions are: Does anyone have experience with that, and does amber-lang have continuations so that CPS doesn't have to be done manually?
20:57 < manuelbieh> othiym23 i'm currently using mongojs (a mongodb-native) wrapper and i'm wondering if i can use Q with mongojs
20:57 < othiym23> mehwork: does putting "| &nbsp;" on a line on its own in the template do what you want?
20:57 < manuelbieh> i have not yet fully understood how promises work
20:58 < othiym23> manuelbieh: hold on, lemme take a look at mongojs
20:58 < manuelbieh> can i use promises whenever i'm doing something with async callbacks?!
20:58 < manuelbieh> in my understanding that should be possible
20:59 < othiym23> manuelbieh: you'd want something like 'var promised = Q.ninvoke(db.mycollection, 'find')'
20:59 < othiym23> and then 'promised.then(function (docs) { /* use the docs here, error will be intercepted by ninvoke and passed to Q.reject */ }'
20:59 < manuelbieh> db.collection.update({userid: 1}, {$set: {name: "manuel"}}, function(err, result) { if(err) return Q.reject(); else Q.fulfill(); }); or something like that
21:00 < othiym23> so in that case it would be Q.ninvoke(db.collection, 'update', {userid : 1}, {$set : {name : "manuel"}})
21:00 < manuelbieh> are there any good tutorials about the details of working with promises?
21:01 < othiym23> manuelbieh: not to be an ass, but have you gone through all of the Q docs?
21:01 < othiym23> down towards the bottom there's a concise but pretty good section on using Q with Node
21:01 < othiym23> although I'll admit I had to spend some time with the source to really get what was going on
21:02 < manuelbieh> not yet. i first wanted to evaluate if it's actually possible what i try to do before i read all the docs tbh ;)
21:02 < othiym23> if you need more control (like if you're trying to bold together two, different async APIs, you'll want to know how to use Q.defer()
21:02 < othiym23> tsk tsk that's lazy
21:02 < othiym23> but yeah, it's totally doable
21:02 < manuelbieh> yes. that sounds like what i'm trying to do
21:03 < manuelbieh> to be concise, i have a user profile edit form
21:03 < manuelbieh> and i want to check the users current password when the user wants to change the password
21:04 < manuelbieh> currently i am doing db.users.find() and within the success callback i check the password and, if password is correct, i do an db.users.update()
21:05 < manuelbieh> but when the user isnt changing his password i dont need to to the db.users.find() part
21:05 < manuelbieh> so i'd have a redundant db.users.update()
21:05 < manuelbieh> and my thought was: promises/deferreds to the rescue
21:05 < manuelbieh> ;)
21:05 < kamoricks> I'd just extract the "update" bit to a function, and then if/else it.
21:06 < manuelbieh> yep
21:06 < manuelbieh> that's the alternative i considered
21:10 < nicholasf> anyone using jade with email?
21:12 < foxjazz> hi... I am trying to play with irc node and when I add a listener it logs in 3 times as 3 names. Why would that be?
21:14 < foxjazz> is there a place to paste script code?
21:16 < othiym23> foxjazz: gist.github.com / pastie.org
21:17 < foxjazz> http://pastebin.com/3PXgSrFj
21:21 < foxjazz_> damn
21:21 < foxjazz_> disconnected
21:22 < othiym23> foxjazz_: you should add an error listener to the client and see if there's something weird going on around the connection that causes it to connect and then immediately reconnect
21:23 < foxjazz_> so basically its a faulty IRC implementation.
21:23 < othiym23> maybe!
21:23 < othiym23> or maybe the IRC server is doing something wacky
21:23 < othiym23> your test username has a registered nick or something
21:23 < othiym23> could be a lot of things
21:23 < othiym23> adding error-handling can't hurt either way
21:24 < foxjazz_> no, test username appears as 3 usernames in the user list
21:24 < foxjazz_> it logs in 3 times
21:25 < foxjazz_> I will debug the IRC implementation 
21:25 < foxjazz_> but how do you access items within the instantiated object
21:26 < othiym23> console.dir(object) is a good place to start
21:28 < medikoo> manuelbieh: check this http://stackoverflow.com/questions/11912573/node-js-deferred-promisify-mongoose/11931908#11931908 and this http://stackoverflow.com/questions/10545087/how-to-use-module-q-to-refactoring-mongoose-code/10554943#10554943
21:30 < manuelbieh> medikoo thanks! i'll have a look :)
21:33 < WarheadsSE> Anyone in Boston ? have a lead in for experience node'rs in boston MA
21:36 < foxjazz_> how do you exit node?
21:37 < tjfontaine> ^d (ctrl-d)
21:37 < tjfontaine> assuming you mean the repl
21:37 < foxjazz_> yes repl
21:37 < booyaa> you can never leave node.js
21:37 < foxjazz_> ourch
21:38 < foxjazz_> I am stuck :(
21:38 < foxjazz_> is there an exit node?
21:38 < tjfontaine> you can also do ^c (ctrl-c) it's a bit of a harsher exit
21:39 < othiym23> or you can rip the battery out of your laptop and hurl it out the window
21:39 < othiym23> that will take care of it for sure
21:39 < booyaa> killall node
21:39 < booyaa> or you could nuke it from the sky
21:39 < guy> What is the current way to install nodejs on Centos machine?
21:39 < booyaa> to be sure
21:40 < CoverSlide> guy: what version of python you got?
21:41 < guy> 2.6.6-29
21:42 < bnoordhuis> guy: download tarball, run configure (maybe add --prefix), make -j32, make install
21:42 < bnoordhuis> replace -j32 with the actual number of cores
21:42 < guy> yeah.. I rather not.
21:42 < guy> I mean, isn't there repo for this?
21:42 < booyaa> bnoordhuis: show off
21:42 < bnoordhuis> :)
21:42 < bnoordhuis> guy: there's a fedora package but that probably doesn't help you if you're on centos
21:43 < TooTallNate> guy: you can try the precompiled binary tarball for linux
21:43 < TooTallNate> should work
21:43 < bnoordhuis> there's that
21:43 < brettlangdon> guy: or there is always n, https://npmjs.org/package/n
21:44 < othiym23> n / nave / nvm
21:45 < guy> how does one use npm without node?
21:45 < guy> I thought that two are directly related?
21:45 < othiym23> nvm, not npm
21:46 < othiym23> all of n / nave / nvm are version managers for Node akin to rbenv or rvm
21:46 < brettlangdon> are they worth while? I've only ever installed from source
21:47 < tjfontaine> I also like give
21:48 < CoverSlide> use give if you want to install from source
21:48 < CoverSlide> you can also use give for master
21:48 < othiym23> brettlangdon: I use both nvm and nave and find them both useful
21:49 < tjfontaine> I also tweaked give so I don't have to watch node-gyp redownload headers
21:49 < othiym23> nvm is how I maintain my main Node distribution, and nave is great (thanks to its use of subshells) for testing code across a wide number of Node versions
21:49 < brettlangdon> othiym23, thanks, I should probably try one out for the hell of it at some point
21:49 < CoverSlide> but give and nave use subshells which is nice, I think nvm uses environment variables
21:49 < othiym23> CoverSlide: that's correct
21:52 < mikola> Hi
21:53 < Anton_> can i profile forked node?
21:53 < Anton_> with node --prof
21:54 < Anton_> it seems profile log goes to parent v8.log file, but after analysis there's a lot (>90%) of unknown code ticks
21:55 < Anton_> is it possible to use separate log for forked node?
21:55 < guy> bnoordhuis: what is the point of mentioning the cores during the compile?
21:55 < bnoordhuis> guy: -j32 is roughly 32x faster than -j1
21:55 < bnoordhuis> provided you have 32 cores, of course
21:56 < tjfontaine> and no filesystem bottlenecks
21:56 < guy> faster at configuration?
21:56 < bnoordhuis> compiling
21:56 < guy> yeah, that's what I meant. Well, I have only 4 cores.
21:57 < Anton_> bnoordhuis: node-profiler works only when 'node --prof' used?
21:58 < bnoordhuis> Anton_: do you want to profile the entire program or specific sections?
21:58 < guy> What is the prefix for exactly?
21:58 < bnoordhuis> Anton_: because --prof runs the profiler from start to exit
21:58 < inolen1>  bnoordhuis: I'll ping you in another 2 weeks perhaps :) Still chugging along with random other work.
21:58 < dschatz> Hi, are there any standard webapp benchmarks written for nodejs?
21:58 < Anton_> bnoordhuis: i want profile forked node 
21:58 < bnoordhuis> guy: installl prefix, default is /usr/local
21:58 < bnoordhuis> inolen1: ah okay :)
21:59 < guy> default is Okay.
21:59 < Anton_> bnoordhuis: and I thought maybe i can switch on profiler with node-profiler
21:59 < inolen1> just wanted to see if you'd be moderately interested :)
21:59 < Anton_> or somehow...
21:59 < bnoordhuis> inolen1: can't promise anything but i'll try to help
21:59 < bnoordhuis> Anton_: okay, try --prof and run the v8.log through nprotf
21:59 < bnoordhuis> *nprof
22:00 < inolen1> for sure, to be fair, v8 is dumb fast and almost all slowdowns stem from webgl API calls.
22:00 < inolen1> but still, i'd like to put out a great example
22:03 < danmactough> TooTallNate: (or anyone else who may know) I'm having an issue where logging into a running app via the REPL seems to kill the require cache.
22:03 < Anton_> bnoordhuis: i tried that
22:03 < Anton_> [21:51:28] <Anton_> it seems profile log goes to parent v8.log file, but after analysis there's a lot (>90%) of unknown code ticks
22:04 < TooTallNate> danmactough: known issue
22:04 < TooTallNate> danmactough: fixed in master i believe already
22:05 < TooTallNate> danmactough: https://github.com/joyent/node/commit/837df70b7576089f808ab3acf626cb06e430f4f6
22:05 < danmactough> TooTallNate: Oh! Didn't see that. Thanks. Going into v0.8.18?
22:05 < TooTallNate> danmactough: nope
22:05 < TooTallNate> danmactough: it's arguable a "behavior change" that some people might depend on
22:06 < danmactough> TooTallNate: OTOH, REPL is not safe to use on a production server.
22:07 < dschatz> has any web benchmark like specweb been ported to nodejs?
22:07 < guy> I feel like I am overpaying for this thing. http://www.ovh.co.uk/dedicated_servers/eg_64g_ssd.xml
22:07 < guy> what do you guys think?
22:07 < TooTallNate> danmactough: i'm not totally against backporting it… but convince isaacs ;)
22:08 < danmactough> TooTallNate: Could add an option to ONLY v0.8.x that would enable the v0.9.x behavior.  
22:10 < TooTallNate> danmactough: that's an API change, can't do that on stable branch
22:10 < mscdex> danmactough: v0.10 is coming out soon from what i hear too
22:12 < draginx> Has anyone here successfully sent a binary file with superagent?
22:14 < danmactough> TooTallNate: Yeah, of course. :P BTW, it looks like that code should run when the repl server is created, not on connection. What am I missing?
22:14 < TooTallNate> danmactough: the REPLServer instance is usually created upon connection
22:14 < v_y> is there some popular option for parsing commandline arguments?
22:15 < danmactough> mscdex: That's great.
22:17 < danmactough> TooTallNate: Huh? exports.start() don't actually create the REPLServer instance?
22:17 < TooTallNate> danmactough: start() does indeed create a ReplServer instance
22:19 < danmactough> TooTallNate: So ... oh, let me look at net.createServer ...
22:20 < danmactough> TooTallNate: Ah, I see. Thanks for the help.
22:23 < danmactough> TooTallNate: And since REPLServer is exposed I can actually override that method, so no need to carp about not backporting it. Sweeeet!
22:23 < TooTallNate> danmactough: nice :)
22:23 < squeakytoy> Is it a good practice to throw your own (new) objects when using "throw"?
22:25 < ckknight> squeakytoy: sure, I'd just recommend you have them inherit from Error
22:25 < ckknight> squeakytoy: though that's not explicitly necessary
22:25 < squeakytoy> feels like, if you do, you can control errors like in Java
22:25 < ckknight> squeakytoy: having specific types of errors can be handy for debugging, the clearer you make them, the easier it is to debug.
22:26 < ckknight> I don't recommend using errors as a general purpose mechanism for control flow, since they'd just act as complex goto statements at that point.
22:26 < squeakytoy> you can only have one catch, right?
22:26 < ckknight> squeakytoy: correct, but you could have instanceof checks in the catch.
22:26 < squeakytoy> didnt know instanceof existed in js
22:27 < squeakytoy> thanks
22:27 < squeakytoy> so basically, you can create a structure that captures certain errors and bubbles up rest
22:27 < othiym23> be aware that throw is almost completely useless in async functions
22:27 < othiym23> there are much better conventions for handling errors thre
22:27 < squeakytoy> such as?
22:28 < othiym23> callback(error, returned) is the most common
22:28 < othiym23> this.emit('error', error) is another common one when working with EventEmitters
22:28 < squeakytoy> defining error-functions
22:28 < danmactough> mjr_: Thanks, Matt Ranney for adding REPLServer to module.exports https://github.com/joyent/node/commit/b7441040f87ff5e0e7b4575852996b6a64e0ea8f
22:28 < squeakytoy> error callback functions
22:29 < othiym23> no, having a single callback that takes both an error (if it exists) and the data
22:29 < squeakytoy> but then you need if-statements, to see if the single callbackfunction is an "error" or a "success" call?
22:29 < v_y> what promises library should i use for node?
22:29 < othiym23> v_y: Q is probably the most Node-friendly
22:30 < othiym23> squeakytoy: the convention is to have the first line of the callback be "if (error) return /* error-handler here */"
22:30 < v_y> othiym23: thanks!
22:30 < squeakytoy> othiym23, ouch, thats a lot of boilerplate code, isnt?
22:31 < othiym23> squeakytoy: either you hand off the error to the next callback in the continuation chain, or you log it, or whatever
22:31 < aroman> hi, I'm using Mongoose for models in my web app. Naturally, I would like the models and schemas in their own module(s). However, I'm not sure whether i should be connecting to mongodb in the models module itself or in the context that I'm going to be using the module. (i.e, do I call mongoose.connect in app.js or in models.js?) What is the common practice for this?
22:31 < aroman> (the same question really applies to any model system, I just happen to be using mongoose)
22:31 < othiym23> squeakytoy: the alternative is to look into domains (http://nodejs.org/api/domain.html), which will adapt exception-throwing code into an evented paradigm, and also provides helper functions like domain.intercept to DRY up boilerplate
22:32 < zomg> aroman: in general the application should probably initialize things like that
22:32 < zomg> however you can put a function for doing this initialization into your models.js file, as long as simply require'ing the file itself does not have the side-effect of causing a database connection
22:32 < aroman> yeah that's what I was wondering about
22:32 < othiym23> aroman: inject the database connection into your data access layer, either directly or using a plugin manager like architect or broadway
22:33 < aroman> othiym23: can you elaborate on what you mean?
22:33 < aroman> i'm not sure what you mean by "data access layer"
22:33 < squeakytoy> imo, its a lot of boilerplate code to constantly write: if( error ) all the time.. then it seems better to provide a errorcallbackfunction.. but then again, there are pretty much no tools today that helps developers maintain function signatures.. so, i kinda think... throwing errors is probably a good pattern
22:34 < aroman> zomg: yeah I wouldn't feel comfortable having a require() itself cause a db connection. I think something like models = require("./models"); models.connect() makes the most sense.
22:35 < zomg> aroman: yep
22:35 < aroman> because I need to connect/access the models both in my main web app process and in child process spawned by the main app process 
22:35 < aroman> (to do some CPU-bound work and not clog up express's eventloop)
22:36 < othiym23> aroman: var client = /* init code */; var Dal = require('./dal'); var dal = new Dal(client); var user = dal.getUser(userId, function (err, user) {});
22:36 < othiym23> like that
22:37 < brettlangdon> squeakytoy, I think othiym23 means exceptions are difficult to manage in async situations like: https://gist.github.com/4542809
22:37 < othiym23> squeakytoy: the problem is when you have an asynchronous call, exceptions will be thrown completely divorced from the context in which the function was originally invoked
22:38 < brettlangdon> othiym23, exactly what I meant to say
22:38 < shama> Go fly a voxel ar drone: http://shama.github.com/voxel-drone/ :D 
22:38 < othiym23> i.e. exceptions start breaking your app, because either you define an extremely unsafe uncaughtException handler, or exceptions cause your app to halt with a completely unedifying stacktrace
22:39 < squeakytoy> othiym23, in async situations i can understand
22:39 < othiym23> squeakytoy: you're on #Node.js, pretty much most of the useful code you write in Node is async
22:39 < squeakytoy> othiym23, well, only the IO code is async though?
22:40 < othiym23> a *lot* of Node code is IO of one kind or another
22:40 < othiym23> form handling, database access, configuration management, process management, HTML serving
22:41 < othiym23> the rule of thumb is that exceptions should be reserved for clearcut developer errors, i.e. validating the parameters passed to a function
22:41 < othiym23> and to never throw within a function that's going to be called asynchronously (i.e. within process.nextTick, or passed as a callback to an async function)
22:41 < squeakytoy> brettlangdon, how would you rewerite your example using "node.js conventions"?
22:42 < othiym23> squeakytoy: this issue has a conversation / argument between a bunch of Node smartypantses about where the line is drawn: https://github.com/joyent/node/issues/4583
22:43 < __yh> hey guys, im running the profiler and when i make pretty the log file, its a ton of "unknown code state: undefined"
22:43 < __yh> google doesn't give me much
22:43 < draginx> is there a way to create a buffer from a ReadStream?
22:44 < __yh> glancing at the lines it's throwing that unkown code state stuff, it has something to do with 'native runtime.js'
22:44 < othiym23> draginx: not sure what you mean
22:44 < draginx> othiym23: basically im trying to do this https://gist.github.com/34b1d0c5813e7b316d1d
22:45 < draginx> the req.field() is *not* working it says it needs a string or a buffer
22:45 < mehwork> How come in Jade if you do: input(name="foo" action="" onSubmit="foo(); return false;")  it ignores the return false and actuall posts the form instead of calling foo() ?
22:45 < draginx> when i pass a string like '@/path/to/fie.jpg' it literally sends '@/path/to/file.jog' etc.
22:46 < foxjazz_> how would I use require to include xxx.js code?
22:46 < foxjazz_> or how would I use npm link?
22:46 < brettlangdon> squeakytoy I updated the gist with the "more conventional" way, at the very least it is good to get used to this style of writing code because you will see it everywhere and will probably have to write some code this way at some point or another
22:46 < othiym23> draginx: the easiest way to to what you're trying to do is just to use fs.readFileSync
22:47 < othiym23> draginx: that sucks for a variety of reasons, so the next thing to think about doing is creating a little "stream sink" that reads in the chunks of the file and appends them to a buffer in-memory
22:48 < draginx> right hmm
22:48 < othiym23> draginx: the actual ideal solution is to get to a state where you can pipe the readable stream onto the request directly
22:48 < draginx> i guess my original question should be.. "How the heck can I send a local file with superagent?" :P
22:48 < othiym23> you can do that with the request itself, but not the field method
22:48 < draginx> right because it acxtually tries to send <Buffer>
22:48 < othiym23> heh
22:48 < draginx> which is wrong
22:48 < squeakytoy> brettlangdon, wow, thats a lot of code
22:49 < squeakytoy> brettlangdon, even though it might be node.js convention, i dont like it :-)
22:49 < brettlangdon> ok, good luck trying to get by using a lot of the modules out there without coming across it
22:49 < draginx> nvm! I found out how to do it in superagent
22:49 < brettlangdon> I know this is how any of the mongodb modules I've come across do it
22:49 < brettlangdon> just to name one I know of off the top of my head
22:49 < othiym23> draginx: my feeling is that request makes this substantially easier than superagent, but that could just be because I'm a lot more familiar with request and know that it's good for streaming
22:50 < squeakytoy> brettlangdon, i am not saying that. But this basically means that each function you create, should have an "err" parameter?
22:50 < draginx> othiym23: its a basic layer on top of it me believes :)
22:50 < MI6> joyent/node: Ben Noordhuis master * 9668df8 : v8: work around String::WriteAscii segfault  See http://code.google.com/p - http://git.io/xQQ5bw
22:50 < othiym23> squeakytoy: that's why a lot of Node developers like using a promises library to hide the verbosity of CPS
22:51 < mscdex> a lot?
22:51 < mscdex> :S
22:51 < othiym23> mscdex: domenic counts for many all by himself ;)
22:51 < mscdex> i'd say promise use is a minority
22:51 < brettlangdon> squeakytoy, well it depends, do you mean the function you create that calls the callback or the function you pass as the callback?
22:51 < mscdex> for node
22:51 < squeakytoy> whats CPS?
22:51 < othiym23> squeakytoy: but in general, it's really not that much boilerplate
22:52 < brettlangdon> plus squeakytoy, you have to remember my first example was very very trivial
22:52 < othiym23> squeakytoy: Continuation Passing Style -- execution through executing a chain of callbacks that represent the context of the computation
22:52 < othiym23> mscdex: for sure, but the specific reason promises users like them is that they reduce the amount of boilerplate you have to write
22:52 < othiym23> and more consistent error handling
22:52 < squeakytoy> othiym23, i mean.. that convention is not really javascript convention, right? more as in node.js
22:53 < mscdex> boilerplate?
22:53 < othiym23> in my experience, dealing with errors and exceptions in Node is a mess no matter how you do it, but I'm a cynic
22:53 < mscdex> hmm... i never have an issue with it
22:54 < othiym23> I spend all my time trying to write code that watches other people's code without getting in the way itself
22:54 < othiym23> I spend a lot of time dealing with edge cases ;)
22:54 < othiym23> squeakytoy: no, even when you're using a larger JS library like jQuery, you're either dealing with errors as events, errorbacks, or promises
22:54 < squeakytoy> i think the problem is that js lacks the tools to give warnings if function signatures are changed
22:55 < squeakytoy> in development phase
22:55 < foxjazz_> othiym23: that is cool, I submitted udp monitor to codeproject that works pretty well
22:55 < othiym23> given that so much of jQuery's add-on functionality is around XHR, which is itself best handled asynchronously, you're still going to not be using try / catch a lot
22:55 < kamoricks> squeakytoy: IDEA can do that.
22:55 < othiym23> squeakytoy: it's a very small, very dynamic language
22:55 < mscdex> problemEmitter.emit('solution');
22:56 < othiym23> so like most dynamic languages, if you want enforcement of API contracts, you gotta write some tests
22:56 < kamoricks> Look, to provide introspection, all you need is a complete database of every function signature in every file, transitively.
22:56 < squeakytoy> othiym23, doesnt really matter. If one changes a function signature, you kinda need the tools to spot the references
22:56 < foxjazz_> othiym23: basically it takes messages sent to an IP in udp protocol. And will colorize them depending on certain words.
22:56 < squeakytoy> othiym23, ++ tests will solve this yea
22:57 < kamoricks> squeakytoy: IntelliJ PhpStorm. Or IDEA, if you also do non-web languages.
22:57 < foxjazz_> if your going out of network, it isn't as useful
22:57 < squeakytoy> kamoricks, i use eclipse :S
22:57 < othiym23> squeakytoy: yeah, I just use vim + Ack and am obsessively BDD in my development style
22:57 < kamoricks> squeakytoy: Right. It's not that the tools don't exist, it's that they're obscure and expensive. (And amazing!)
22:57 < brettlangdon> squeakytoy, tests are the best way to catch these errors
22:58 < brettlangdon> "best"
22:58 < brettlangdon> imho
22:58 < squeakytoy> brettlangdon, so basically, you mean that you have written tests for all imported modules?
22:58 < squeakytoy> brettlangdon, you have written own tests for the http-module?
22:58 < othiym23> you're not going to get the static guarantees about your code that a more rigorous type system like SML's (or even Java's), and an IDE can only help so much
22:59 < brettlangdon> squeakytoy, no if you have tests for your code, if an imported module changes most likely your code will break, so you run tests before deploying code to make sure nothing breaks
23:00 < squeakytoy> you get so much free with java, i am spoiled ;)
23:01 < blazes816> need to control your server remotely?  baked in
23:01 < othiym23> they're just completely differently paradigms
23:01 < othiym23> I wrote Java for a living for 15 years and I don't miss it at all, tbh
23:02 < squeakytoy> kamoricks, how are debugging? is it possible to put breakpoins in the editor with any of those editors?
23:02 < kamoricks> squeakytoy: It's the same IDE, PhpStorm just has all the non-PHP/HTML/JS stuff stripped out.
23:02 < kamoricks> squeakytoy: And yes, you can breakpoint javascript and it'll debug in the browser or the server.
23:03 < squeakytoy> kamoricks, via the debugger; syntax, right?
23:03 < othiym23> draginx: did you just end up piping the ReadableStream onto res? That seems to be what superagent wants you to do, looking at the source
23:03 < kamoricks> squeakytoy: No, using its in-built debugger.
23:03 < draginx> im trying to figure it out othiym23 :/
23:03 < kamoricks> squeakytoy: It was built for Java, so it's pretty nice.
23:03 < othiym23> PHPStorm / WebStorm -> a cut-down version of IntelliJ IDEA
23:04 < othiym23> it's a super nice IDE, don't get me wrong
23:04 < draginx> https://gist.github.com/25571bd91c6937bee5c0 othiym23 i got this far but no luck
23:04 < othiym23> it just feels like using a 20-pound sledge to me most of the time
23:04 < MI6> joyent/libuv: Ben Noordhuis master * 768b524 : unix: make stream.c more DRY - http://git.io/dQ_Vtw
23:05 < squeakytoy> i am maybe just very new to node.js, but i really think its the future, just like js
23:06 < othiym23> draginx: what about https://gist.github.com/876c9f01380a28d9d59a ?
23:07 < kamoricks> Once hosts figure out a nodejs distribution that can be suitably locked down, I see it being popular in the PHP market share, but I doubt it'll penetrate what's currently ASP.NET or JEE.
23:07 < draginx> othiym23: that might be better, i just need to figure out an alternative to chunk for transfer-encoding
23:08 < draginx> becuase nginx does not support it :/
23:09 < MI6> joyent/libuv: bnoordhuis created branch travis-fixes - http://git.io/cV1TAQ
23:10 < kamoricks> draginx: A fixed Content-Length on the server and a Range on the client.
23:10 < draginx> kamoricks: huh?
23:10 < kamoricks> Alternative to Transfer-Encoding: chunked.
23:10 < tpayne> guys, what's a good way to set the active li in navigation bar?
23:10 < tpayne> based on route
23:11 < draginx> yeah I keep getting text: '<html>\r\n<head><title>411 Length Required</title></head>\r\n<body bgcolor="white">\r\n<center><h1>411 Length Required</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n',
23:11 < kamoricks> draginx: Send the length, then.
23:12 < othiym23> draginx: draginx set a Content-Length header, you can use fs.statSync to get the length of the file (or fs.stat if you want to be completely async)
23:13 < mikola> Question: what is the best/most standard way to use npm modules in browser applications?
23:13 < mikola> I put together this thing, but I am now wondering if I am reinventing the wheel:  https://github.com/mikolalysenko/Serverify
23:15 < draginx> othiym23: wouldn't it be slightly more than that though?
23:15 < othiym23> mikola: man, you got *so* close ;)
23:15 < othiym23> mikola: https://github.com/substack/node-browserify
23:15 < mikola> no, I know about browserify
23:16 < mikola> but it doesn't host files, which makes it annoying for testing
23:16 < othiym23> draginx: so what do you want to do differently from browserify?
23:16 < mikola> basically, I wanted something like what I wrote
23:16 < mikola> but I am now wondering if it is already done elsewhere
23:16 < draginx> othiym23: uhh how are they the same?
23:16 < mikola> I know about browserify-server, but it doesn't really work so well
23:16 < othiym23> draginx: sorry misfire, not meant for you
23:16 < draginx> :P
23:16 < MI6> joyent/libuv: Ben Noordhuis travis-fixes * ae2180c : debug travis test failure - http://git.io/UdXLGQ
23:17 < othiym23> mikola: I'd look at what substack's doing for testling, because it seems like he has very similar needs
23:17 < mikola> ok
23:17 < othiym23> draginx: try it, and see what happens
23:17 < draginx> was this another misfire? :P
23:17 < othiym23> if you're just sending the file, the lengths should match up
23:17 < mikola> othiym23:  I don't think I want testling actually...
23:17 < squeakytoy> nn all
23:18 < mikola> I want a way to do local development and debugging
23:18 < mikola> anyway, I was just wondering if there was anything other than browserify-server
23:18 < mikola> (excluding of course the thing I just wrote)
23:18 < kamoricks> mikola: You could just install nodejs locally.
23:18 < mikola> kamoricks: I do have it installed
23:19 < mikola> look, what I am asking is if this library I wrote was redundant
23:19 < draginx> othiym23: yeah now the next weird thing is.. i get no errors but no response either :/
23:19 < othiym23> mikola: I guess my feeling is that substack has probably written something that does what you're looking for, but I don't even know where I'd start looking in his big wad of stuff aside from testling / browserling
23:19 < draginx> and I have reason to believe nginx cares about case sensitivty in nginx
23:19 < mikola> https://github.com/mikolalysenko/Serverify
23:20 < othiym23> and no, I'm not aware of anything that exactly duplicates what you're trying to do
23:20 < othiym23> draginx: nothing showing up in the nginx logs?
23:20 < draginx> nope
23:20 < mikola> ok
23:20 < mikola> or if there is anything similar?
23:21 < MI6> joyent/libuv: Ben Noordhuis travis-fixes * 86021e9 : debug travis test failure - http://git.io/QEC6qQ
23:21 < othiym23> I know of a bunch of people who have similarish setups for running tests both in the browser and the server, but most of those are one-off frameworks they built to run their own tests
23:21 < draginx> right
23:22 < othiym23> and unfortunately, the ones I know about aren't on GitHub :/
23:22 < draginx> :(
23:22 < mikola> yeah, I've written a few one-off apps that do basically the same thing as serverify (since it is a pretty obvious solution)
23:23 < othiym23> draginx: I'd try adding a data listener to the request (req.on('data', ...)) to see if the data is actually getting streamed to nginx in the first place
23:23 < mikola> however, I was a bit surprised to see that there isn't really anything in npm that already does the same thing...
23:28 < p_l_a_y> anyone got got experience communincating to an arduino from node.js through ethernet
23:29 < othiym23> p_l_a_y: do you have Firmata talking over the ethernet shield?
23:30 < othiym23> if so, it should be a relatively straightforward process to adapt node-firmata to use a socket instead of a serial connection
23:30 < othiym23> that said, I've never tried it, because I'm too cheap to get an ethernet shield for my Arduino
23:30 < draginx> othiym23: nothing :| grrrrr
23:31 < p_l_a_y> thats what I'd like to do but I'm new to node.js
23:31 < othiym23> draginx: why not juse use request.attach()?
23:32 < draginx> othiym23: im trying that as well
23:32 < draginx> thats when it doesnt add the content-length i think lol
23:34 < draginx> but then when I specify content-length
23:34 < draginx> it doesnt work lol
23:34 < draginx> hmm i wonder if ican just use node-curl
23:34 < MI6> joyent/libuv: Ben Noordhuis master * 4cbd5c7 : test: remove bad tcp_write_error test  It makes the assumption that if yo - http://git.io/BolJhg
23:35 < othiym23> draginx: seriously, at least check out mikeal/request
23:35 < othiym23> I have used it for this exact application a number of times
23:35 < draginx> i tried that earlier
23:35 < draginx> same problem
23:35 < draginx> even tried using the form-data thing
23:37 < draginx> othiym23: do u have a quick gist that I could look at for request? and have u tested with nginx or just apache? O-o
23:38 < othiym23> to the best of my knowledge, I've never used Node with Apache, only other Node servers or nginx
23:38 < othiym23> but no, all my usages of that are in other peoples' code bases
23:38 < draginx> :/ k thanks
23:41 < aroman> othiym23: hi, sorry for the delay, but in response to your comment about ` var client = /* init code */; var Dal = require('./dal'); var dal = new Dal(client); var user = dal.getUser(userId, function (err, user) {});`, what did you envision the `var dal = new Dal(client)` bit doing? Specifically, what is 'client'?
23:42 < othiym23> aroman: "client" is the collection or db or whatever object that holds the connection to the database inside it that the DAL wrapper uses to make lower-level calls
23:44 < aroman> othiym23: oh I see. so basically you're taking the actual connection-establishing code out of the DAL, and having the calling context of the DAL be responsible for it, right?
23:46 < othiym23> aroman: yeah, that's the pattern I follow
23:46 < othiym23> otherwise the async bits of it just get to be too much of a headfuck
23:46 < aroman> othiym23: yep that's what I'm dealing with right now
23:47 < aroman> i've got a sort of DAL but it's one module with model definitions, DB operations on those models, as well as connection establishing stuff.
23:47 < aroman> that's why i was trying to factor some stuff out into more logical and modular components 
23:47 < aroman> do you keep the models themselves in your DAL module? or simply require that through the DAL module?
23:48 < draginx> othiym23: also getting 411! yay
23:48 < draginx> (with request)
23:49 < othiym23> aroman: I don't use models ;)
23:50 < aroman> aha, well there you go.
23:50 < othiym23> but if I did, I'd probably have them factored out separately
23:50 < aroman> yeah. well thanks for your thoughts. I've got some refactoring to do :)
23:50 < othiym23> draginx: the only way to get around that is to make sure content-length is set explicitly
23:50 < othiym23> draginx: just to double-check, you're using nginx as a reverse proxy, right?
23:53 < draginx> othiym23: yes
23:53 < PrgmrBill> how can I debug this? http://pastebin.com/imEz9mSU
23:53 < othiym23> draginx: so yeah, whatever solution you come up with is going to involve setting an explicit content-length, because if you don't, Node's always going to set the transfer-encoding to chunked
23:54 < draginx> gah
23:55 < draginx> but if i specify content-length then transfer-encoding goes away? O-o
23:55 < draginx> thats weird..
23:56 < othiym23> that's HTTP
23:59 < Andy1991> Anyone know of an alternative to instanceof for when you use return { ... } for private methods
--- Log closed Wed Jan 16 00:00:13 2013
