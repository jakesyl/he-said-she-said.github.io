--- Log opened Wed Mar 13 00:00:05 2013
00:00 < sayd> anyone familiar with testacular know how i'd run some arbitrary code without using the files array?
00:04 < ningu> is there any truly mature ORM for SQL databases in node? or is it reasonable to say that if an app needs significant logic of that sort it should be written in something else?
00:05 < ningu> by mature I mean: support for hooks and support for joins
00:06 < janmower> this sounds like a jerky answer, but it's not really.  try to write a orm, see how ridiculously hard it is, give up, and then just choose one like everyone else
00:06 < ningu> janmower: I don't want to write one, but I have before.
00:06 < janmower> it's quicker to just choose a database than to support orm
00:06 < ningu> huh?
00:07 < ningu> I've seen it done right.
00:07 < ningu> but it seems like no one in the node world has done so yet.
00:08 < janmower> what's orm done right?  i'd really like to hear about it.
00:08 < ningu> janmower: as far as I'm concerned, http://search.cpan.org/~abraxxa/DBIx-Class-0.08209/lib/DBIx/Class.pm
00:08 < korilo> ningu, something like doctrine2 would be amazing for node :3
00:10 < substack> Codynyx: localhost:9999 vs localhost:9999:9999
00:10 < substack> try giving it the host explicitly
00:10 < ningu> I am currently using mongodb and mongoose because it's pretty decent.
00:10 < ningu> but mongodb makes me nervous...
00:10 < ningu> and I don't have huge amounts of data anyway
00:11 < korilo> indeed that's my choice too
00:11 < korilo> i sometime use pg too but of course, no ORM
00:11 < ningu> yeah
00:12 < korilo> everyone screaming: come on ningu port Doctrine2 to node
00:12 < ningu> blah
00:12 < ningu> I have enough other stuff to do
00:12 < korilo> was funny
00:13 < OliverJAsh> what if i want the index number when iterating using async.each?
00:13 < OliverJAsh> do I have to find it manually?
00:15  * AviMarcus wishes there was real multi-line support in nodejs.
00:16 < LuckyBurger> AviMarcus ?
00:16 < AviMarcus> LuckyBurger, for strings
00:16 < mikenstein> congrats to the node team for their recent release!
00:16 < LuckyBurger> ah
00:16 < mikenstein> 0.10.0 is baller
00:16 < LuckyBurger> is it?
00:16 < LuckyBurger> im compiling it now :)
00:16 <@mbalho> streams, dawg. they all up in your data
00:16 < systemovich> When will it be on github?
00:17 < LuckyBurger> they changed streams?
00:17 < LuckyBurger> :X
00:17 < ningu> it's always on github
00:17 < LuckyBurger> rut roh
00:17 < systemovich> Maybe they have not tagged it then.
00:18 < systemovich> I jsut cloned it. No v.0.10.0 tag.
00:18 < mikenstein> LuckyBurger: yes, for the better. The new streams implementation is going to clean up some serious module kludge :)
00:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:19 < LuckyBurger> orly
00:19 < LuckyBurger> well ill have to have a look. hopefully it doesnt break my stuff rofl
00:19 < mikenstein> isaacs wrote a great article on it: http://blog.nodejs.org/2012/12/20/streams2/
00:20 < LuckyBurger> thanks mike
00:20 < M2Ys4U> hmm, anybody having issues with process.stdin on cygwin?
00:20 <@mbalho> systemovich: yer doin it wrong. git checkout v0.10.0
00:20 < mikenstein> streams2 has also been published as a separate module so you can test your existing code against it and use the interface in 0 <= 0.8
00:20 < worldhacker> hi guys, I am trying to run nodemon for the first time, but I am getting "Cannot find module" after installing it globally
00:21 < ningu> worldhacker: NODE_PATH is set correctly?
00:22 < zeromodulus> So, I kinda figured out how I'm going to finish this app, I'm going to forget about complex organizational stuff, and just write everything out as simply as possible, organizing things kind of old school, and if need be later on, find out how to structure things in a more organized matter, only if need be.
00:22 < M2Ys4U> hmm, yeah, process.stdin.resume() on cygwin throws a ENOTCONN error (while running node from cmd rather than bash works as expected)
00:22 < zeromodulus> Seems like a good way to make progress.
00:22 < worldhacker> ningu: I will check
00:22 < zeromodulus> Then I don't have to read a lot of material just to finish my simple little app.
00:24 < worldhacker> ningu: do I need to edit a bashrc file?
00:24 < ningu> worldhacker: sure, that's one way to do it
00:25 < worldhacker> ningu: what is a better way?
00:25 < zeromodulus> I will use organizational features on a file/module level though.
00:25 < ningu> worldhacker: that's the normal way, you just asked if you *need* to do it that way :)
00:25 < korilo> zeromodulus, it's good to read book and tutorial AND it's good to code too so when possible you should really read somthing
00:25 < worldhacker> ningu: I see. I am currently trying to find the file
00:26 < korilo> you'll miss many things (hope not) without reading somthing
00:26 < zeromodulus> eh, I prefer to just have references handy.
00:26 < zeromodulus> I find I get more done that way.
00:26 < echo> I read lots of things, I just don't prefer reading books.
00:27 < korilo> that means you already know howthe language behaves ;)
00:27 < zeromodulus> and reading a lot of material up front kind of complicates things for me.
00:27 < korilo> whatever :)
00:27 < zeromodulus> 'cause then I'm like, whoa, what should I do? what's the best practice?
00:27 < korilo> reading code?
00:27 < korilo> -> reading 
00:28 < echo> I don't possess the need to understand all the tiny inner-workings of every possible thing related to a subject.
00:28 < zeromodulus> echo: yeah, same here.
00:28 < zeromodulus> I mostly care about finishing something.
00:28 < korilo> echo for me is different i do..
00:29 < korilo> everythingi come up with i would know all possible shit
00:29 < worldhacker> ningu: I have found .bashrc, but there is no NODE_PATH variable set. How should I proceed?
00:29 < echo> I kind of approach it the opposite way, I like to get something up and running first (usually by means of getting my feet wet) trial and error style and then go down one thread at a time and find out where and how it can be optimized. Instead of going low->high level, I prefer high->low level.
00:30 < ningu> worldhacker: set it?
00:30 < ningu> worldhacker: just google setting NODE_PATH
00:30 < worldhacker> ok, thanks
00:30 < zeromodulus> I do have a question about libraries communicating with one another though, if I have a database handler, what's the best way to make sure it's available to my other library files?
00:31 < korilo> echo, i do the same but While getting my feet wet i also read manual above manual
00:31 < korilo> and then optimize
00:31 < zeromodulus> My first guess is to put the database handling/init stuff in its own file, and just require it.
00:31 < korilo> it's like low-high  (without the > lol)
00:31 < zeromodulus> At the moment I'm initializing it in my app.js file.
00:32 < zeromodulus> I'm kind of used to mega-frameworks like Rails making the db stuff omnipresent though.
00:33 < zeromodulus> I guess I would need to learn about the singleton pattern in this case?
00:33 < zeromodulus> One instance to rule them all?
00:33 < korilo> if you want to share db connection to your routes just init db in app.js or whereever, require it in app.js, require your router module, inject your app and you are good to go
00:33 < zeromodulus> I'm not sure what that means.
00:34 < zeromodulus> I made a lib folder where I'm putting most of my code.
00:34 < korilo> soz it's almost 2 am here lol
00:34 < zeromodulus> I want the files in lib to be able to connect to a database.
00:35 < zeromodulus> eh, s'alright.
00:35 < Text> exit
00:35 < Text> oops
00:35 < Text> well lets not make this awkward now..
00:35 < korilo> init your db in app.js -> require your lib and you should be good.......i have app.js with db connection, then i do: require('./routes')(app) from app.js and all my routes/lib share the db connection
00:36 < zeromodulus> so would I have to do require('lib/foo')(app)?
00:36 < korilo> are your lib express routes?
00:36 < zeromodulus> seems kinda funky.
00:36 < zeromodulus> no.
00:37 < zeromodulus> just plain constructor functions and regular functions.
00:37 < echo> Essentially, your libraries would accept an additional parameter which would be the passing of the database connection.
00:37 < korilo> don't know if you "should" i did that and it worked perfectly :)
00:37 < zeromodulus> okay, that seems like a good way to go, because I have no idea how I'd instantiate a db connection in its own file and then make it available elsewhere.
00:37 < zeromodulus> without re-instantiating it every time its required.
00:38 < korilo> mmm I have seen a github repo about passportjs that does what you need (i think) 
00:39 < korilo> he basically put all db stuff in a db.js
00:39 < korilo> then in app.js he does require('./db.js').AccessDb()
00:39 < zeromodulus> eh, well, I guess it's a bit more complicated than I thought.
00:39 < korilo> will look to find this and link you
00:39 < zeromodulus> awesome, thanks.
00:40 < zeromodulus> I think I would prefer a solution where its in its own file, because I'll be using it in lib/foo.js and routes/foo.js
00:41 < zeromodulus> It would be cool I guess if I could just require once, and if there's not an instance already, initialize one.
00:41 < echo> The require system also caches the requires, so AFAIK it wouldn't incur any additional fs requests .
00:41 < azylman_> zeromodulus: You can, that's how modules work :)
00:41 < zeromodulus> maybe if I do exports.dbhandle = dbInit(); it would persist?
00:41 < azylman_> It's what we do
00:42 < azylman_> Yeah, we have like "module.exports = connect_to_the_database()"
00:42 < azylman_> Then we just require that everywhere
00:42 < zeromodulus> so since those are cached, it'll only initialize onc?
00:42 < zeromodulus> once*
00:42 < azylman_> See: http://nodejs.org/api/modules.html#modules_caching
00:42 < azylman_> Yeah
00:42 < zeromodulus> I suppose I could run a little test, and do a console.log and see if it's initializing more than once.
00:43 < worldhacker> cygwin is trying to run global modules from "'C:\cygdrive\c\Users\..." and failing
00:43 < azylman_> lol @ cygwin
00:43 < worldhacker> the directory is my home directory (~)
00:44 < worldhacker> any clues?
00:44 < samholmes> Browserify is good, but the main issue is when you use a module that wasn't built with client-side use in mind.
00:45 < samholmes> Simple things like forEach or map() on Arrays, break my application
00:45 < samholmes> And they break the "whole" browserify bundle
00:45 < ningu> samholmes: aren't there modules to implement those methods if your browser doesn't support them?
00:45 < samholmes> ningu: I'm not sure.
00:46 < samholmes> If there are, that would be superb!
00:46 < ningu> I'm pretty sure there are. not sure if they will actually work for your case.
00:46 < samholmes> polyfills, I'm guessing.
00:46 < azylman_> I believe prototype.js does that
00:46 < azylman_> Don't quote me on that, though
00:46 < samholmes> these modules would extend the Array prototype.
00:46 < substack> samholmes: https://github.com/kriskowal/es5-shim
00:49 < rvagg> Nexxy: you don't happen to have any inside information on the specs of the new beaglebone coming "soon"?
00:53 < ningu> substack: you forgot to mention another feature of npm which is either a downside or awesome -- it's frequently mistyped as nom
00:53 < worldhacker> never use cywin
00:54 < worldhacker> cygwin
00:54 < worldhacker> it wrecks things
00:54 < Havvy> ningu: alias 'nom' = 'npm'
00:54 < ningu> cygwin is fine
00:54 < ningu> Havvy: :)
00:55 < worldhacker> it keeps prepending cygdrive\ to all global module requires, so I can't run any moduels from it
00:55 < worldhacker> in that regards it's not fine
00:55 < ningu> worldhacker: like I said you have to set NODE_PATH
00:55 < worldhacker> I have
00:55 < worldhacker> no luck
00:55 < ningu> what do you get for echo $NODE_PATH?
00:55 < worldhacker> nothing changed
00:56  * zeromodulus just found out about supervisor.
00:58 < worldhacker> ningu: 
00:58 < worldhacker> $ echo $NODE_PATH
00:58 < worldhacker> C:/cygwin/usr/local/lib/node
00:58 < worldhacker> which is a valid path
00:59 < ningu> hmm
00:59 < worldhacker> ningu: but when I try to run it-
00:59 < worldhacker> "Error: Cannot find module 'C:\cygdrive\c\Users\..."
00:59 < worldhacker> ningu: cygwin just slips it in there
00:59 < ningu> worldhacker: you want to set NODE_PATH to the node_modules directory
01:00 < ningu> is there a /usr/local/lib/node/node_modules?
01:00 < ningu> or are they really in /node?
01:00 < worldhacker> ningu: no
01:00 < worldhacker> ningu: should i make one?
01:00 < ningu> I would just do export NODE_PATH=/usr/local/lib/node
01:00 < ningu> is there anything in the node dir?
01:00 < worldhacker> nothing at all, I had to make it
01:00 < ningu> ok, well that should be fine
01:01 < worldhacker> this [http://shapeshed.com/setting-up-nodejs-and-npm-on-mac-osx/] was the only instruction I could find that was relatively helpful
01:01 < ningu> anyway this sounds more like an npm issue than a cygwin issue
01:01 < worldhacker> hmm
01:01 < ningu> or rather, an npm-on-cygwin issue
01:01 < worldhacker> yes
01:01 < ningu> worldhacker: you have to install the module first, anyway
01:01 < ningu> npm install -g foo
01:01 < worldhacker> see, it runs fine in windows natice cmd
01:02 < ningu> see if that puts it in your NODE_PATH location
01:02 < ningu> well if it's already installed, why didn't you set NODE_PATH to wherever it is?
01:02 < ningu> that's the whole point
01:02 < worldhacker> $ npm install -g foo
01:02 < worldhacker> npm http GET https://registry.npmjs.org/foo
01:02 < worldhacker> npm http 200 https://registry.npmjs.org/foo
01:02 < worldhacker> npm http GET https://registry.npmjs.org/foo/-/foo-1.0.0.tgz
01:02 < worldhacker> npm http 200 https://registry.npmjs.org/foo/-/foo-1.0.0.tgz
01:02 < worldhacker> foo@1.0.0 C:\Users\Eeasy Bake Oven\AppData\Roaming\npm\node_modules\foo
01:03 < worldhacker> it's putting it in my appdata for some reaso
01:03 < worldhacker> n
01:03 < worldhacker> ignore the computer name, the previous owner set it
01:03 < ningu> right so you want export NODE_PATH='/cygdrive/Users/Eeasy Bake Oven/AppData/Roaming/npm/node_modules'
01:03 < ningu> or you can make it somewhere else like you did
01:03 < ningu> and re-install
01:04 < ningu> re-install the modules that is
01:05 < worldhacker> Eeasy Bake Oven@EeasyBakeOven ~
01:05 < worldhacker> $ nodemon
01:05 < worldhacker> module.js:340
01:05 < worldhacker>     throw err;
01:05 < worldhacker>           ^
01:05 < worldhacker> Error: Cannot find module 'C:\cygdrive\c\Users\Eeasy Bake Oven\AppData\Roaming\npm\node_modules\nodemon\nodemon.js'
01:05 < worldhacker>     at Function.Module._resolveFilename (module.js:338:15)
01:05 < worldhacker>     at Function.Module._load (module.js:280:25)
01:05 < worldhacker>     at Module.runMain (module.js:492:10)
01:05 < worldhacker>     at process.startup.processNextTick.process._tickCallback (node.js:244:9)
01:05 < azylman> Don't do that
01:05 < worldhacker> Eeasy Bake Oven@EeasyBakeOven ~
01:05 < worldhacker> $ echo $NODE_PATH
01:05 < worldhacker> /cygdrive/Users/Eeasy Bake Oven/AppData/Roaming/npm/node_modules
01:05 < worldhacker> sorry about the text dump
01:05 < worldhacker> I apologise
01:07 < danheberden> worldhacker: you redid the `npm install nodemon` step, ya?
01:07 < danheberden> or `npm install`, depending on what the hell you're doing
01:07 < worldhacker> danheberden: hi dan, yes I did
01:08 < worldhacker> danheberden: "$ npm install -g nodemon"
01:10 <@Nexxy> rvagg, sadly I do not ._.
01:10 < rvagg> Nexxy: np, just thought that if someone did it'd probably be you!
01:11 <@Nexxy> rvagg, hah
01:12 < samholmes> substack: would you recommend I use this es5-shim in browserify? I'm looking into Modernizr as well for HTML5 elements, but I'm wondering if Modernizr will provide me a way to load in shims like es5-shim.
01:32 < ericelliott> Anybody hanging around in San Francisco tonight? I'm kickin' it at a coffee shop in SoMa - third aniversary party at Radius - free wifi.
01:33 < ericelliott> I'll be here hacking on Node until ~8:00pm
01:33 < zeromodulus> so many JSON libraries... x.x
01:33 < antonio__> do you guys prefer 2 or 3 spaces indentation?
01:33 < azylman> I've never even heard of 3 space indentation
01:33 < zeromodulus> is there a standard JSON library?
01:33 < antonio__> 4 sorry
01:33 < antonio__> mistyped
01:33 < ericelliott> antonio__: Generally two. Sometimes 4 if the library / codebase is already using it. Never three.
01:34 < antonio__> 3 was a typo :D
01:34 < azylman> Yeah, I had to use four spaces today because I was making a PR to someone who used four
01:34 < azylman> It hurt my eyees
01:34 < ericelliott> Two is especially useful in Node because everything is async.
01:34 < azylman> Didn't help that it was javascript instead of coffeescript :p
01:34 < zeromodulus> oh, nvm.
01:35 < antonio__> i always coded in php (actually at work too) so im with 4 spaces in mind
01:35 < antonio__> but well will use 2 from now on for js
01:35 < ericelliott> azylman: CoffeeScript is nice, but JS is still dominating the landscape, so the ability to context switch between the syntax is a good thing to maintain.
01:35 < azylman> zeromodulus: Built in to node. JSON.parse and JSON.stringify
01:35 < azylman> ericelliott: I didn't have any trouble understanding it, I just don't like the way it looks
01:35 < antonio__> note JSON.parse is blocking
01:36 < azylman> understanding/writing it
01:36 < antonio__> use something like JSONstreamparse
01:36 < ericelliott> antonio__: Note that you should use camelCase instead of underscore_separators, too.
01:36 < antonio__> ericelliott, where?
01:36 < ericelliott> antonio__: Everwhere.
01:36 < antonio__> more than 1 word var you mean?
01:36 < ericelliott> Yes.
01:36 < antonio__> knew that :P
01:37 < antonio__> Class
01:37 < antonio__> then?
01:37 < ericelliott> And the curly braces go on the right of the beginning line: function foo {
01:37 < azylman> There's not a whole lot of point to using a non-blocking JSON.parse unless you plan on parsing 15 mb json blobs routinely...
01:37 < ericelliott> not function foo () 
01:37 < ericelliott> {
01:37 < azylman> You should use what's built in to node instead
01:37 < antonio__> https://code.google.com/p/soc/wiki/JavascriptStyleGuide
01:37 < antonio__> this is a good resource
01:37 < ericelliott> but don't forget the parens like I just did.
01:37 < ericelliott> ;)
01:37 < antonio__> azylman, indeed i just warned zeromodulus 
01:38 < antonio__> but forgot to mention what you said about big json files
01:38 < azylman> No, I'm saying you SHOULDN't use something like JSONstreamparse
01:38 < azylman> You should use JSON.parse
01:38 < antonio__> why not?
01:39 < azylman> The whole point of making things non-blocking is for things like I/O where you're waiting on something external
01:39 < zeromodulus> hmm... getting some weird results with JSON.stringify in a constructor function.
01:39 < azylman> So instead of waiting while doing nothing, you do something else in the meantime
01:39 < antonio__> if you expect thousand of 15mb json you would use bloking json.parse?
01:39 < zeromodulus> outside of the constructor function, it looks like typical JSON, inside the constructor function, I get [object Object].
01:39 < worldhacker> RE: my earlier problems with running global modules via Cygwin terminal: https://github.com/isaacs/npm/issues/2465
01:39 < azylman> I believe I explicitly said unless you plan on having lots of 15 mgbjson files :)
01:40 < antonio__> ok we are really saying the same thing man :)
01:40 < worldhacker> it turns out not to be a good idea
01:40 < ericelliott> zeromodulus: sounds like it's not stringified inside.
01:40 < zeromodulus> hm, nevermind...
01:40 < zeromodulus> console log gives me what I expect...
01:40 < azylman> console.log stringifies things
01:40 < zeromodulus> yeah, but I'm passing JSON.stringify'd stuff to console.log
01:41 < zeromodulus> and I get a serialized object.
01:41 < azylman> Yes
01:41 < azylman> What's the unexpected part of that?
01:41 < zeromodulus> but when I do JSON.stringify and pass it to redis, I seem to be getting... [object Object]
01:41 < antonio__> ericelliott, is node using 2 spaces indent too?
01:41 < zeromodulus> oh, nevermind.
01:41 < ericelliott> antonio__: Yes.
01:41 < zeromodulus> I think I was looking at stale data.
01:42 < ericelliott> antonio__: http://nodeguide.com/style.html#tabs-vs-spaces
01:42 < zeromodulus> Now the question is... how to go from deserialized data -> object.
01:42 < antonio__> (i would never use tabs ericelliott ;)
01:42 < ericelliott> zeromodulus: JSON.parse()
01:42 < azylman_> Not sure what you mean, deserialized data is an object
01:42 < azylman_> Do you mean serialized data?
01:42 < ericelliott> antonio__: That also covers 2 vs 4
01:43 < zeromodulus> well, yes, it's an "object"
01:43 < zeromodulus> but, don't I need it to be a specific object?
01:43 < zeromodulus> I think so.
01:43 < azylman_> I don't know, do you?
01:43 < zeromodulus> O.o
01:43 < azylman_> I'm not sure what you're doing
01:43 < azylman_> JSON.stringify takes an object and returns a string
01:43 < zeromodulus> Maybe, I don't know.
01:43 < azylman_> JSON.parse takes a string and returns an object
01:43 < zeromodulus> I'm serializing an instance of an object.
01:44 < azylman_> By "instance of an object", is it an instance of a class?
01:44 < zeromodulus> so is the deserialized object pretty much the same as the object instance?
01:44 < azylman_> And you want to turn it back into another instance of that class?
01:44 < zeromodulus> yes.
01:44 < azylman_> It's going to have more or less the same fields, but not necessarily the same prototype
01:44 < zeromodulus> yeah, that's what I might need.
01:44 < zeromodulus> the same prototype
01:45 < azylman_> So you'd need to write your own function that took in something like {field1: 'val1', field2: 'val2'} and return an instance of a class
01:45 < zeromodulus> I might need it to behave as an actual instance of the object it was serialized from.
01:45 < azylman_> then yes, you'll need to do that
01:45 < zeromodulus> hmm... okay.
01:46 < zeromodulus> seems like this might complicate things slightly, but that's okay.
01:46 < ericelliott> zeromodulus: Check out stampit... you can easily feed it your state (the object data you're serializing / deserializing) to hydrate new instances. http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/
01:46 < ericelliott> bonus - that article gives a pretty thorough lesson on exactly what's going on under the hood.
01:47 < zeromodulus> okay, cool, thanks.
01:47 < ericelliott> npm install --save stampit
01:55 < zeromodulus> eh, I think I'll just stick with a good old trusty for...in loop. :P
01:56 < zeromodulus> then I can keep out stuff that need not be serialized, like `var _this = this;`
01:56 < zeromodulus> hmm, but I just realized, I'm not setting it as a property, so it wouldn't be serialized anyway...
01:56 < zeromodulus> nonetheless, I prefer to keep the code lean for now.
01:57 < zeromodulus> it's redundant, but it works. :P
02:02 < zeromodulus> huh... the redis npm module does not seem to function the same as the Redis CLI.
02:04 < MI6> joyent/node: Nathan Rajlich v0.10 * 598b5e4 : blog: fix small typo in v0.10.0 release article - http://git.io/_z-5dg
02:08 < AAA_awright> WHY ARE BLOG POSTS IN THE GIT REPOSITORY
02:08 < AAA_awright> Get that crap out of there
02:08 < zeromodulus> hmm... redis module seems to like returning just true and not the data I'm looking for
02:09 < zeromodulus> that, or I need to read the manual...
02:10 < LuckyBurger> how do I install node modules that are available for all users?
02:10 < LuckyBurger> im on linux :x
02:11 < Havvy> sudo npm install -g module
02:11 < zeromodulus> uh, huh... the redis module... it just returns true for pretty much everything. O.o
02:11 < zeromodulus> even db.redis.keys("*")
02:11 <@Nexxy> zeromodulus, callbacks?
02:12 < zeromodulus> eh?
02:12 < zeromodulus> oh.
02:12 < zeromodulus> is that how it works?
02:12 <@Nexxy> it's not sync
02:12 <@Nexxy> that's how everything works :)
02:12 <@Nexxy> .keys("*", function(err, res) { // do something with res })
02:12 < zeromodulus> oh. ._.
02:13 < LuckyBurger> still says cannot find module :X
02:13 < zeromodulus> brilliant!
02:13 < LuckyBurger> i dont need to specify the path to the node_modules dir ?
02:13 < AAA_awright> That still doesn't explain why it's returning true, when it should be returning undefined
02:14 <@Nexxy> return true when there isn't an error with the call
02:14 <@Nexxy> something else when there is
02:15 < AAA_awright> If there's an error with the call you send that to the callback
02:19 < azylman> AAA_awright: I'm pretty sure there's no convention for what async functions return, because you shouldn't be checking them
02:19 < AAA_awright> azylman: That's my whole point
02:20 < azylman> you're saying there should be a convention?
02:20 < zeromodulus> Hmm... okay...
02:20 < azylman> And it's that you should return undefined all the time?
02:20 <@Nexxy> return w/e you want
02:20 < azylman> I agree
02:21 < AAA_awright> azylman: What you just said, why is there a return value on functions if you're not supposed to check them
02:21 < azylman> Because it doesn't matter
02:21 < AAA_awright> Exactly! So why is there a return value?
02:21 < azylman> So if you want to do it for some internal reason, go right ahead
02:21 <@Nexxy> because sometimes people like to use shorthand
02:21 < azylman> Why not?
02:21 <@Nexxy> return cb(...)
02:21 <@Nexxy> etc
02:21 < azylman> Yeah
02:21 < AAA_awright> Because normally when you return something, it has a meaning
02:21 <@Nexxy> so let's try not to get too bent out of shape about it
02:22 < azylman> There's no real reason to have one if you shouldn't be checking it, but by the same token there's no reason not to :)
02:22 < AAA_awright> That's not too big an intellectual hurdle, is it?
02:22 < AAA_awright> Nexxy: That should still return undefined
02:22 < azylman> Anyway, I believe in redis's case they return something to do with if the command is buffered
02:22 <@Nexxy> AAA_awright, not if the callback returns
02:22 < AAA_awright> Which an async-callback has no reason to do
02:23 <@Nexxy> azylman, that's another good example of useful return value from async functions
02:23 < azylman> Yeah, I agree
02:23 < zeromodulus> Should I just get an ORM-style library for Node and Redis? :P
02:23 <@Nexxy> I also have used it in the past to know if my call will even fire a callback
02:23 <@Nexxy> e.g. bad parameters, etc
02:23 < zeromodulus> I really didn't want to, but, looks like I might have to.
02:24 < zeromodulus> I'm able to create records of my Object instances in Redis, but, loading them into an instance, not so much.
02:24 < AAA_awright> Nexxy: You should always be calling an async function callback, exactly once
02:24 <@Nexxy> NO EXCEPTIONS
02:24 < coderarity> asynchronously
02:24  * Nexxy stomps a foot
02:25 < AAA_awright> Right
02:25 < coderarity> you should process.nextTick to simulate asynchronously if you must
02:25 <@Nexxy> nop
02:25 <@Nexxy> do not buy it!
02:25 < AAA_awright> *maybe* a thrown Error stops that from ever happening (but it otherwise would). I'm not so sure if this is a good idea or not.
02:25 < coderarity> consistency > special conditions
02:25 < coderarity> but, do what you want
02:26 < zeromodulus> I tried a conditional constructor function, where if a JSON string argument is present, it loads all of the data as the instances properties, i.e. `for (property in json) { this[property] = json[property]; }` but if I do this it seems I don't actually get an instance back, just undefined.
02:26 < zeromodulus> so, maybe I could just `return this;`... maybe in this case that statement would be necessary.
02:26 < AAA_awright> zeromodulus: What are you trying to do
02:27 < Havvy> zeromodulus: if json is an object, then that loop should work as a shallow copy.
02:27 < zeromodulus> setting properties in a constructor function from a JSON string.
02:27 < zeromodulus> er
02:27 < zeromodulus> I mean
02:27 < zeromodulus> deserialized object.
02:27 < ericelliott> zeromodulus: That would happen if you forgot to JSON.parse your JSON response.
02:28 < Havvy> ^^
02:28 < ericelliott> log right before that assignment and make sure you've got an object, and not a string. =)
02:29 < zeromodulus> yeah, I actually logged the results of this[property] and got exactly what I expected.
02:29 < zeromodulus> after the this[property] assignment.
02:30 < zeromodulus> I'm moving the JSON.parse out of the constructor function and into the calling function, even though it's kind of a trivial change... we'll see what happens, also, going to try a `return this;`
02:30 < shucks> hey all. I'm having a difficult time with Async lib
02:30 < shucks> async.each
02:30 < shucks> for some reason my callback never gets there
02:30 < shucks> never gets called
02:30 < zeromodulus> ooooh, oh, ooooh, derp.
02:30 < azylman> shucks: You're probably not calling the callback to your iterator function at some point
02:30 < zeromodulus> maybe I should use the local _this I created.
02:30 < zeromodulus> within if statements.
02:30 < shucks> azylman: how do you mean?
02:31 < ericelliott> if statements don't have a different scope
02:31 < zeromodulus> what about for loops?
02:31 < ericelliott> JavaScript has function scope - not block scope.
02:31 < echo> shucks: I just battled .each the other day, got a gist?
02:31 < ericelliott> for loops do not create a new scope.
02:31 < shucks> echo: I'll make one right now
02:31 < azylman> shucks: So the iterator function you pass it has two parameters, 'item' and 'callback'
02:32 < zeromodulus> ericelliott: I have tested your statement and have found it to be true.
02:32 < azylman> If any of your iterator functions don't execute that callback, YOUR callback will never get called because async doesn't know you're done
02:32 < zeromodulus> why then do I not get an instance returned, but instead, undefined?
02:33  * zeromodulus tries an explicit `return this;`
02:34 < shucks> here's my gist
02:34 < shucks> https://gist.github.com/anonymous/5148930
02:34 < zeromodulus> yeah... still getting undefined.
02:34 < zeromodulus> O.o
02:34 < shucks> azylman and echo
02:34 < azylman> shucks: your iterator actually has two arguments, not just one
02:35 < azylman> function(currId, cb_fe)
02:35 < zeromodulus> console.log(this) at the top level of the constructor shows me all of the properties I expect, but I am just not getting the instance outside of the constructor function.
02:35 < azylman> Thne at the end of the function you need to call cb_fe
02:35 < shucks> azylman: so after container.items.push(item) I should put cb_fe()
02:35 < shucks> ?
02:35 < zeromodulus> woo, it's working.
02:35 < azylman> Anyway, train just got in, need to shut down
02:35 < zeromodulus> miraculously, somehow...
02:36 < azylman> You should do that after you change the signature of your method, yes
02:36 < zeromodulus> maybe `return new Foo()` is bad?
02:36 < shucks> let's try!
02:36 < shucks> but hold on -- how does it know to wait for the cb until all my items are pushed?
02:36 < zeromodulus> I changed `return new Foo();` to `foo = new Foo(); return foo;` and I now get an instance.
02:36 < zeromodulus> strange...
02:37 < zeromodulus> but, okay...
02:39 < raphie> can anyone recommend a simple framework to build a simple CRUD api? I tried writing my app with express, but it got pretty messy. preferably said framework would be opinionated
02:40 < zeromodulus> okie dokie, I now have serialized Redis records loading and writing perfectly.
02:41 < zeromodulus> without any ORMy stuff.
02:41 < zeromodulus> well, it's like, my own kind of mini-OM (that is, Object Mapper, since Redis isn't exactly relational.)
02:42 < zeromodulus> huzzah.
02:42 < zeromodulus> Now for the fun part... introducing more than one object to be serialized.
02:43 < zeromodulus> >.<
02:44 < LuckyBurger> Q - releating to mongo... I have a DB initialization script. I am having timing issues. what I would like to create/use is some way to have a set of DB ops report that they are finished and then continue execution.
02:44 < LuckyBurger> Normally I would spawn threads and wait for them to finish
02:44 < echo> shucks: Sorry I got pulled away, I see your issue was explained though :P
02:44 < LuckyBurger> but I dont know what the best approach in Node is for that behaviour
02:45 < ericelliott> raphie: You could try geddy. I prefer restify, but it's a lot like express... less opinionated (I like that about it).
02:46 < raphie> ericelliott: it's a client-side app, so I don't need views. will geddy be good for just the API?
02:46 < Eigen_> is there a way to pass a boolean
02:46 < Eigen_> to jade
02:46 < Eigen_> or do all the locals have to be strings
02:46 < shucks> echo: yes. thank you, though
02:46 < Eigen_> or is thaht a stupid question
02:46 < ericelliott> raphie: I don't see why not. Just don't create any client-side views.
02:46 < raphie> okay, cool. thanks ericelliott!
02:47 < Eigen_> actually
02:47 < Eigen_> nvm
02:52 < Eigen_> for ssl
02:52 < Eigen_> do my keys
02:52 < Eigen_> *my key file
02:53 < Eigen_> need to have the correct hostname?
02:55 < LuckyBurger> whats everyones favourite flow-control library? :D
02:55 < abraxas> async
02:55 < abraxas> it's the 2nd most depended upon npm module in existance
02:55 < LuckyBurger> ill give it a shot
02:55 < LuckyBurger> cool
02:56 < LuckyBurger> im just worried that it wont do exactly what i want. but ill give it a shot shouldnt take long to do
02:56 <@Nexxy> control flow*
02:56 < abraxas> it does a lot and it does it quite well
02:56 <@Nexxy> not to be pedantic or anything ;P
02:56 < Eigen_> what is a challenge password?
02:56 < LuckyBurger> ha. funny comment.
02:56 < LuckyBurger> :P
02:56 <@Nexxy> flow control = streams
03:05 < hij1nx> creationix: yt?
03:05 < creationix> yep
03:07 < hij1nx> creationix: send you a msg
03:15 < zeromodulus> hmm... if I return something with a callback, then, the containing function isn't going to return it...
03:16 < zeromodulus> but then the question is, how do I return the returned object...
03:16 < zeromodulus> er, within a callback.
03:16 < zeromodulus> hmm...
03:16 < tjfontaine> zeromodulus: hm?
03:17 < zeromodulus> I have `db.redis.get(id, callback)`
03:17 < zeromodulus> callback returns an object instance.
03:17 < zeromodulus> maybe `obj = db.redis.get(id, callback)` will do the trick.
03:18 < tjfontaine> you mean callback() returns something and you want it in the outer scope?
03:18 < zeromodulus> it seems db.redis.get(id, callback) only returns true on success.
03:18 < zeromodulus> yes.
03:18 < tjfontaine> zeromodulus: anyway, you're probably approaching this wrong, the data is an argument to callback
03:18 < zeromodulus> yes.
03:19 < LuckyBurger> holy carp. async is amazing rofl
03:19 < tjfontaine> the function you supply for that callback can return something, but .get() probably won't care if you do
03:19 < Eigen_> what exactly does mixin do?
03:19 < Eigen_> in jade?
03:19 < zeromodulus> I want the function containing the .get() call to be able to return what is returned in callback.
03:20 < tjfontaine> zeromodulus: if the action is async you can't
03:20 < zeromodulus> >.<
03:20 < zeromodulus> hmm, well, okay.
03:20 < zeromodulus> I think I know how I can fix this.
03:20 < tjfontaine> you use callbacks to pass the state change
03:23 < zeromodulus> hooray!
03:24 < zeromodulus> it... kind of works now.
03:25 < AAA_awright> LuckyBurger: I avoid unnecessary abstraction like async, it's almost always something you can do yourself in 3-4 lines o code
03:26 < zeromodulus> not really.
03:26 < zeromodulus> haha.
03:26 < zeromodulus> when I console.log() the object it just says [object Object]
03:26 < zeromodulus> so the properties aren't being set. :|
03:27 < zeromodulus> oh, dang, it's suddenly working.
03:27 < AAA_awright> zeromodulus: What are you doing
03:27 < Havvy> zeromodulus: [object Object] is the generic toString of an object.
03:27 < zeromodulus> oh, it's because it's async. -_-
03:28 < zeromodulus> I'm initializing the properties of a new instance from values from a DB, within a callback passed to .get()
03:28 < zeromodulus> with Redis.
03:28 < zeromodulus> so, sometimes the values show up, sometimes they don't, depending on whether the callback is executed before the page finishes loading.
03:29 < AAA_awright> The callback is getting called before the callback gets called?
03:29 < AAA_awright> What?
03:29 < AAA_awright> My coder senses are telling me something is horribly wrong
03:30 < Eigen_> how do you pass an id
03:30 < Eigen_> into jade
03:30 < zeromodulus> I have a pretty basic template that loads properties of an instance passed to it.
03:30 < Eigen_> like
03:30 < Eigen_> not as a string
03:30 < AAA_awright> zeromodulus: How is the page allowed to load before you've gotten the value back from the database
03:30 < AAA_awright> Like, that shouldn't even be possible
03:30 < zeromodulus> The instance gets its attributes from Redis.
03:30 < AAA_awright> Alright, then what
03:31 < zeromodulus> Then the instance sent to the template.
03:31 < zeromodulus> +gets
03:31 < AAA_awright> Paste some code, zeromodulus
03:32 < zeromodulus> `db.redis.get(id, function(err, res) { obj = JSON.parse(res); for (property in obj) { _this[property] = obj[property]; }});`
03:32 < AAA_awright> zeromodulus: Where's your `var` keyword on the `obj` variable?
03:32 < zeromodulus> there isn't one.
03:32 < AAA_awright> WELL PUT ONE IN
03:33 < zeromodulus> BUT THAT'S MY PREFERENCE.
03:33 < zeromodulus> isn't it?
03:33 < AAA_awright> You know what that means, right?
03:33 < zeromodulus> no.
03:33 < zeromodulus> yes, but no.
03:33 < coderarity> it's global
03:33 < Eigen_> .....
03:33 < zeromodulus> ooooooh.... whaaaaat?
03:33 < zeromodulus> fooey.
03:33 < AAA_awright> ECMAScript goes up the scopes looking for a `obj` variable, and when it hits the global scope, it creates a global variable
03:34 < AAA_awright> Oops.
03:34 < coderarity> zeromodulus: also, don't return anything from that function
03:34 < coderarity> it's probably discarded
03:34 < AAA_awright> zeromodulus: And what is _this
03:34 < zeromodulus> yeah, I'm not.
03:34 < zeromodulus> lmao
03:34 < zeromodulus> I'm only 12 years old and what is _this?
03:35 < coderarity> zeromodulus: it's in the code you pasted
03:35 < zeromodulus> `var _this = this;` is just before the .get() call.
03:35 < AAA_awright> O_o
03:35 < zeromodulus> reference to outer level scope.
03:35 < Havvy> zeromodulus: We call the reference to the outer scope 'that' usually.
03:35 < AAA_awright> Actually, self
03:35 < zeromodulus> :|
03:35 < coderarity> self is the greatest
03:36 < AAA_awright> I've also seen thiz
03:36 < zeromodulus> but... how can that be within a callback.
03:36 < AAA_awright> thiz [sic]
03:36 < Havvy> AAA_awright: `self` isn't good because of window.self and accidentally forgetting a `var`.
03:37 < zeromodulus> see, the way I'm doing it works, but only sometimes.
03:37 < AAA_awright> Havvy: That's a DOM thing, not an ECMAScript consern
03:37 < zeromodulus> Perhaps this is a job for... WebSockets!
03:37 < AAA_awright> zeromodulus: So when this callback is called, how does execution continue?
03:37 < Havvy> Yes...but consistency between browser code and Node.js code is good.
03:37 < AAA_awright> Havvy: Right, so use self
03:38 < zeromodulus> that code is within a constructor function.
03:38 < zeromodulus> so, ideally, the instance returned should have all of its properties populated.
03:38 < zeromodulus> from the .get() call.
03:38 < AAA_awright> zeromodulus: No, like, if your entire function body is " obj = JSON.parse(res); for (property in obj) { _this[property] = obj[property]; }", then how does Node.js know to continue output?
03:38 < zeromodulus> it's like a mini-ORM, without the R.
03:39 < AAA_awright> Where is a function to say "continue processing this template with this new data"
03:39 < zeromodulus> eh, what?
03:39 < zeromodulus> that's in a route.
03:39 < zeromodulus> I'm using express by the way.
03:39 < AAA_awright> That shouldn't matter?
03:39 < AAA_awright> You have an incoming request
03:39 < zeromodulus> I basically have this lib, we'll call it, foo.
03:39 < AAA_awright> You need a value from a database
03:39 < zeromodulus> foo has a constructor function called bar.
03:39 < AAA_awright> So you make this redis.get call
03:40 < AAA_awright> And it's provided a callback to be called once you have the value
03:40 < zeromodulus> so I can do, foo.bar() to get a fresh bar, or foo.bar(id) to instantiate a bar using properties in my database.
03:40 < AAA_awright> ...
03:40 < zeromodulus> :D
03:40 < AAA_awright> zeromodulus: How are you rendering this template with the value from the database?
03:41 < zeromodulus> after the constructor function is done, I have a bar instance.
03:41 < AAA_awright> Where is the template passed the value of the get() callback?
03:41 < zeromodulus> in a route.
03:41 < AAA_awright> Paste some code
03:41 < zeromodulus> it works! okay! only sometimes the values aren't populated because the callback hasn't been executed in time.
03:42 < AAA_awright> zeromodulus: How does the template know that the database results are in, to start displaying output?
03:42 < zeromodulus> it doesn't, that's my problem.
03:42 < AAA_awright> Then how is the template displaying at all?
03:42 < AAA_awright> That completely boggles the mind
03:42 < zeromodulus> it just renders the template whether or not it has any properties.
03:42 < AAA_awright> O_o
03:42 < shucks> anybody ever created a 'method' in mongoose?
03:42 < zeromodulus> lmao
03:43 < zeromodulus> the properties will simply render as `undefined`.
03:43 < AAA_awright> zeromodulus: How about not sending output until you have ALL your database responses in, yes?
03:43 < AAA_awright> Goodness
03:43 < zeromodulus> how do I do that?
03:43 < zeromodulus> :D
03:43 < zeromodulus> haha
03:43 < AAA_awright> Someone help me out here
03:43 < AAA_awright> Please
03:43 < AAA_awright> zeromodulus: You need to continue execution inside your get() callback
03:44 < zeromodulus> :|
03:44 < zeromodulus> but...
03:44 < AAA_awright> NO
03:44 < zeromodulus> uh...
03:44 < zeromodulus> how?
03:44 < zeromodulus> lmao
03:44 < AAA_awright> zeromodulus: http://callbackhell.com/
03:44 < zeromodulus> I don't get how that's supposed to work.
03:45 < AAA_awright> Just read it
03:45 < zeromodulus> d'oh.
03:45 < zeromodulus> okay.
03:46 < zeromodulus> am I in callback hell? :(
03:47 < zeromodulus> Where should I put my callbacks? lol.
03:47 < zeromodulus> Okay, okay, I'm sorry.
03:48 < AAA_awright> zeromodulus: Callback hell is far superior to the situation you're in
03:48 < zeromodulus> :(
03:48 < AAA_awright> You're rendering things without even having received the response from the database yet
03:48 < zeromodulus> I'm not even cool enough to be in callback hell?
03:49 < AAA_awright> You're queueing up database queries and not ever using their results
03:49 < AAA_awright> Continue rendering your webpage INSIDE the callback
03:49 < AAA_awright> Actually
03:49 < AAA_awright> zeromodulus: Everything after your redis.get call, put inside a function
03:50 < AAA_awright> With me so far?
03:50 < AAA_awright> Name it like `function haveResults(){`
03:50 < AAA_awright> zeromodulus: Then when the callback is called, at the end, make a call to haveResults(), or better yet, use:
03:51 < zeromodulus> okay, I think I figured this out, maybe.
03:51 < AAA_awright> redis.get("etc...", haveResults)
03:51 < zeromodulus> actually, no, probably not.
03:51 < AAA_awright> zeromodulus: Paste your code in pastebin
03:51 < zeromodulus> I dun wanna.
03:52 < zeromodulus> It's super secret.
03:52 <@Nexxy> lol
03:52 < AAA_awright> Kill me now
03:52 < zeromodulus> :)
03:52 < zeromodulus> okay, okay...
03:52 < zeromodulus> I'll just foobar it up.
03:52 <@Nexxy> does that mean something?
03:53 < zeromodulus> my ideas are valuable, mkay?
03:53 < AAA_awright> You shouldn't have any secrets in your code... Especially not passwords
03:53 < zeromodulus> yeah, I'm probably screwing this up.
03:53 < zeromodulus> but, maybe not...
03:54 < AAA_awright> And the generalization of schneier's law, everyone is so clever they can make up an idea they can't imagine anyone else having come up with
03:54 < zeromodulus> I think I need to pass the function containing my callback, a callback.
03:55 < zeromodulus> Yes, I need to pass a callback to the functioning performing the .get() call.
03:55 < zeromodulus> Right?
03:55 < zeromodulus> So when it's done, it can call the callback.
03:55 < ChrisPartridge> zeromodulus: how does anyone know if we can't see your code?
03:55 < ChrisPartridge> but that sounds right..
03:55 < zeromodulus> huzzah.
03:55 <@Nexxy>  ¯\(°_o)/¯
03:55 < ChrisPartridge> s/right/logical
03:59 < zeromodulus> so, in my `done` callback, it can be like, empty?
03:59 < zeromodulus> it's only to like mark a continuation of execution, right?
04:00 <@Nexxy> wouldn't it be wonderful if we had some sort of context to go along with your questions?
04:00 < zeromodulus> okay, fine.
04:00 <@Nexxy> DON'T WORRY GUYS, I'VE ALMOST GOT ZEROMODULUS TO REVEAL THE SECRET IP WE'RE ALL PINING OVER
04:01 <@Nexxy> woops... wrong channel
04:02 < Zak> Nexxy: WE GOT HIM.. SPAM 127.0.0.1
04:02 < zeromodulus> nooooo...
04:02 < zeromodulus> :'(
04:02 < zeromodulus> https://gist.github.com/zeromodulus/5149283
04:03 <@Nexxy> Zak, lol I meant intellectual property, but yes; i'ma firin mah lazor
04:03 < Zak> i misread that as the secret ip we're all pinging over
04:04 <@Nexxy> ahaha
04:04 < Zak> my bad
04:05 < zeromodulus> mah codez... now everyone knows my secrets.
04:05 < zeromodulus> T.T
04:06 < shucks> Anyobdy here using Mongoose?
04:07 < coderarity> zeromodulus: oh no
04:07 < coderarity> zeromodulus: ima steal all your ideas
04:08  * zeromodulus sad puppy eyes coderarity.
04:08 < JohnONolan> coderarity: zeromodulus: too late, I've been lurking for months waiting for this moment. They're all mine!
04:08 < coderarity> JohnONolan: nope already submitting a patent
04:08 < zeromodulus> nuuu...
04:09 < coderarity> zeromodulus: you can't use this code anymore I copyrighted it https://gist.github.com/coderarity/5149306
04:09 < zeromodulus> zeromodulus' super duper mini-ORM (without the R)™.
04:09 < zeromodulus> Ha!
04:09 < zeromodulus> beat you to it.
04:09 < zeromodulus> NOOOOO
04:09  * zeromodulus sobs.
04:09 < coderarity> nope
04:10 < coderarity> sending a cease and desist letter
04:10 < zeromodulus> T.T
04:10 < JohnONolan> DMCA that shit
04:10 < zeromodulus> rofl
04:10 <@Nexxy> filing a DMCA notice is surprisingly satisfying
04:11 < zeromodulus> what should I call my redis get callback?
04:11 < coderarity> zeromodulus: oh, yeah, so like, there's a ton of problems here
04:11 < zeromodulus> coderarity_redis_callback.
04:12 < zeromodulus> see, it's legit if I give credit.
04:12 < JohnONolan> haha
04:12 < coderarity> zeromodulus: only for fair use
04:12 < zeromodulus> redis_callback_inspired_by_code_coderarity_stole_from_me
04:13 < zeromodulus> coderarity_is_a_stinky_doo_doo_head
04:13 < coderarity> zeromodulus: anyways, are you using this function as a constructor?
04:13 < zeromodulus> yes.
04:13 < coderarity> okay
04:13 < coderarity> well, right after your constructor, none of those properties will be assigned
04:14 < zeromodulus> right.
04:14 < coderarity> because the asynchronous code won't run right away
04:14 < zeromodulus> k.
04:14 < zeromodulus> so, what if I have a function... like a factory function?
04:15 < zeromodulus> that gives me instances of Foo.
04:15 < zeromodulus> and then within that factory function, I can like, determine whether or not the .get() call has returned?
04:16 < zeromodulus> then like, instead of doing the property initializing within my .get() callback...
04:16 < zeromodulus> I can do it outside of the callback, after .get() has returned?
04:16 < zeromodulus> but then, have another callback that passes the data from .get()?
04:17 < zeromodulus> so the property initialization should wait on the done callback?
04:18 < zeromodulus> I think I might be able to make a generic find(key) function.
04:18 < coderarity> you could do like a factory function like Foo.create(id, function (err, foo) { /* foo is available here */ })
04:18 < zarac> coderarity is a brony. : )
04:18 < zeromodulus> aha, his patent is null and void.
04:18 < zarac> No worries coderarity, I'm not stalking you. I thought it was a word and googled it. ; )
04:18 < zeromodulus> patents aren't available to ponies.
04:19 < zarac> OK, guess i stalked you a bit. But i'm done now. :) 
04:19 < coderarity> zarac: i just watch the show, i don't do the whole brony community thing
04:19 < coderarity> also, i don't care if you stalk me
04:19 < coderarity> in fact, i'd be honored
04:19 < zarac> heh =D
04:19 < zeromodulus> huh... okay...
04:19 < coderarity> if you find an inconsistency in my internet presence, feel free to notify me
04:20 < zarac> : )
04:21 < coderarity> i'm actually pretty good about finding things out about people on the internet
04:22 < zeromodulus> I think this is starting to make sense.
04:22 < zeromodulus> I'm making a callback chain.
04:22 < zeromodulus> of finding, then loading.
04:22 < coderarity> kinda, yeah
04:25 < zeromodulus> so, I shouldn't have to poll anything, right?
04:25 < zeromodulus> I don't get how I'm supposed to make a continuation point.
04:26 < zeromodulus> to complete the callback chain.
04:26 < slajax> If I use http.get to grab a file from a remote server and that files content-length = 0, will I get a body from the response?
04:26 < coderarity> zeromodulus: no, you shouldn't poll things
04:26 < coderarity> zeromodulus: you pass a callback into the function, which gets called later
04:26 < zeromodulus> okay, I'll have a new gist in a sec.
04:28 < zeromodulus> https://gist.github.com/zeromodulus/5149367
04:29 < zeromodulus> oops.
04:29 < zeromodulus> hang on.
04:30 < zeromodulus> okay, https://gist.github.com/zeromodulus/5149367
04:32 < coderarity> yeah, but how is the person who uses this function going to know when the properties are ready/
04:32 < coderarity> you have to actually pass a callback into foo
04:32 < coderarity> or create an event listener
04:32 < zeromodulus> oh. ._.
04:32 < zeromodulus> bleh.
04:33 < coderarity> you might be better emitting an event, you can just have Foo subclass eventemitter
04:33 < zeromodulus> sounds like something I don't want to do.
04:33 < zeromodulus> is this(id) taboo?
04:33 < zeromodulus> what's that called...
04:34 < zeromodulus> uhh...
04:34 < coderarity> also you switched the JSON.parse and obj in your callback
04:34 < zeromodulus> functions that call themselves?
04:34 < coderarity> recursive
04:34 < zeromodulus> yeah, that's it.
04:34 < zeromodulus> could I do that? lmao.
04:34 < coderarity> no
04:34 < coderarity> you really should subclass eventemitter and emit an event
04:35 < zeromodulus> O.o
04:37 < coderarity> if you call an asynchronous function, you should use a callback, basically
04:37 < coderarity> but since you're creating an object, an eventemitter 'ready' event might be better
04:37 < coderarity> but there's no way to make asynchronous just go away
04:37 < coderarity> i mean, there is, but don't do that
04:38 < zeromodulus> okay... I'll take a look at it. :|
04:41 < zeromodulus> even though I'm waiting for a response from Redis, it's still cool 'cause it's still asynchronous, right?
04:41 < zeromodulus> like, I'm not defeating the purpose by waiting for a result, right?
04:41 < coderarity> no
04:41 < coderarity> because it's asynchronously waiting
04:42 < coderarity> it's not actually sitting there doing nothing, node will find other things to do if it can
04:42 < zeromodulus> oh, okay, neat.
04:42 < echo> Unless you write it to be blocking, anything that doesn't require the result can be executed and being worked on while redis responds.
04:43 < zeromodulus> oh, so like, other requests will be handled and whatnot?
04:43 < zeromodulus> by the same node instance?
04:44 < zeromodulus> so it's like, node is keeping track of all the requests awaiting a database response? but still be free to accept other requests?
04:45 < coderarity> yes
04:45 < coderarity> and no
04:45 < zeromodulus> so, what do I make an Emitter?
04:45 < SecretAgentX9> Node is the ron popeil rotisserie  of the web. Just set it and forget it 
04:45 < zeromodulus> my Foo thing?
04:46 < echo> I was referring to the way you can execute code in parallel. function 1 { function2(); function3(); function4(); } Function's 2-4 will begin asynchronously, even if function2 is a 30 second db query.
04:46 < zeromodulus> Or is my Foo a listener?
04:46 < coderarity> node keeps track of the requests, and then idles if there's nothing to do, and the kernel tells it when the requests are done
04:46 < coderarity> it doesn't sit there wasting CPU cycles if there's nothing to do
04:46 < coderarity> zeromodulus: yeah, the fFoo thing
04:46 < coderarity> Foo*
04:47 < zeromodulus> So Foo should be a listener?
04:47 < coderarity> no
04:47 < coderarity> Foo should be an emitter
04:48 < zeromodulus> O.o
04:49 < coderarity> Foo emits an ready event, your client adds a listener for the ready event
04:50 < zeromodulus> What's my client?
04:51 < coderarity> anything that uses the Foo class
04:51 < coderarity> you are your client
04:51 < coderarity> people who use your code are your client
04:51 < zeromodulus> O.o
04:51 < zeromodulus> But... my Foo class is using itself, so, it's its own client?
04:51 < coderarity> wait
04:51 < coderarity> your Foo class is using itself?
04:51 < coderarity> also, it would be
04:52 < zeromodulus> yeah, because I'm initializing the properties of Foo.
04:52 < zeromodulus> using a .get() call.
04:52 < coderarity> no, it's not really in that case
04:52 < zeromodulus> and it's Foo that should know when the .get() call is done, right?
04:52 < coderarity> Foo knows when the .get call is done
04:52 < coderarity> and when it is done, it'll emit an event
04:53 < coderarity> like, _this.emit('ready')
04:53 < coderarity> and your clients: `var foo = new Foo(id); foo.on('ready', function () { /* use properties of foo */ })`
04:54 < zeromodulus> oh... O.o
04:55 < zeromodulus> I guess I'll figure a more succinct way to write that later... x.x
04:56 < coderarity> the other option is that factory function from before
04:56 < timeturner> what's the difference between socket.io and browserchannel?
04:56 < zeromodulus> I don't think that'll work honestly.
04:56 < coderarity> which would look like `Foo.create(function (err, foo) { /* use properties of foo */ });`
04:56 < zeromodulus> well, actually, maybe it will.
04:57 < coderarity> zeromodulus: anything else really isn't a good idea
04:57 < coderarity> zeromodulus: there's other things like promises, but it's just not standard
04:57 < zeromodulus> so, I shouldn't resort to events unless it's really necessary?
04:57 < coderarity> if you really want, go look up promises
04:57 < coderarity> zeromodulus: do whichever style you want, it's not gonna matter that much
04:58 < zeromodulus> well, the coffee is starting to wear off, so, I think I might tackle this beast tomorrow.
04:58 < coderarity> zeromodulus: good luck
04:58 < zeromodulus> thanks, I appreciate the help, night everyone.
04:59 < zeromodulus> eh, well, I'm going to have trouble sleeping until I figure this one out...
04:59 < zeromodulus> it's going to bother me while I'm trying to sleep. :P
05:03 < zeromodulus> arg, but then I think the problem repeats itself with a constructor function.
05:03 < zeromodulus> because all I can think of doing is new Game(load(id))
05:03 < zeromodulus> oh noes
05:03 < zeromodulus> the secret's out.
05:03 < zeromodulus> I'm making a game. :P
05:05 < owen1> mikeal: can i bring wife+dog to nodeconf? the dog is super calm and friendly.
05:05 < penzur> what secret? what out?
05:05 < owen1> MI6: (CampOut)
05:05 < owen1> mikeal: (CampOut)
05:05 < echo> penzur: SHHHHHHHH
05:06 < Havvy> You have a class called Game?  o.0
05:06 < penzur> i see dead modules
05:06 < Eigen_> I'm not even using the sys model and I'm getting this The "sys" module is now called "util". It should have a similar interface.
05:08 < Eigen_> ....
05:08 < Eigen> no
05:08 < Eigen> no answers?
05:08 < Tully> You using a old module that uses sys?
05:08 < Eigen> I'm using fs
05:09 < Eigen> and https
05:09 < echo> Maybe a dependency of a require you're using is calling it.
05:09 < mikeal> owen1: can't bring dogs, sorry :(
05:09 < mikeal> i can't bring mine either
05:09 < mikeal> the ranch doesn't allow it
05:10 < mikeal> wife for sure though
05:10 < Tully> Eigen what version of Node are you running?
05:10 < mikeal> we have a significant others track
05:10 < zeromodulus> oh, oh, oh, I think I'm on to something.
05:10 < mikeal> theres a link to buy it in your registration email after you get a ticket
05:10 < owen1> mikeal: sad ): thanks though
05:11 < mikeal> yeah, its a bummer
05:11 < mikeal> but there are just too many wild animals running around
05:11 < owen1> mikeal: i can leash her
05:12 < mikeal> i know, its not my policy tho, it's walker creek ranch
05:12 < zeromodulus> so, there's no way to pull data out of a callback?
05:12 < owen1> mikeal: yeah. thanks
05:13 < zeromodulus> like, couldn't I do `handleResults(createFoo)`
05:14 < zeromodulus> and pass it an extra parameter?
05:14 < zeromodulus> pass another parameter to handleResults?
05:14 < zeromodulus> eh, I think I'm doing this wrong.
05:15 < lejden> hello - quick question for someone who encyclopedic knowledge of ECMA-262:
05:15 < lejden> is there a way to create a function with a prototype that will evaluate typeof == 'function'
05:15 < lejden> who has*
05:16 < lejden> I'm using Object.create(proto, function () {}), but the result is typeof == 'object'
05:16 < zeromodulus> I think I have a kind of hacky solution, but, it would technically work...
05:17 < zeromodulus> lol, I'm making a function waitForResults.
05:19 < zeromodulus> but this seems like the equivalent of polling.
05:19 < lejden> I guess `var f = function () {}; f.__proto__ = proto; typeof f // => 'function'` works, but any way without using __proto__?
05:19 < zeromodulus> `while (!results) { if (results) { return results; } }`
05:19 < coderarity> zeromodulus: i was making a game first
05:19 < coderarity> zeromodulus: sending a cease and desist letter
05:19 < zeromodulus> :|
05:20 < zeromodulus> yeah, this feels real hacky.
05:20 < coderarity> that thing
05:20 < coderarity> the while loop
05:21 < coderarity> it's wrong
05:22 < coderarity> it's exactly what node does not want you to do
05:22 < coderarity> if you're using node, you should get on board with the whole asynchronous idea
05:23 < coderarity> event emitters, callbacks
05:26 < zeromodulus> it seems like I have no choice but to use the events module.
05:26 < zeromodulus> otherwise I'm going to be constantly checking to see if my results have returned.
05:26 < coderarity> like I said, you could use callbacks to
05:26 < zeromodulus> I made a huge callback chain and it's like...
05:26 < coderarity> too*
05:26 < zeromodulus> that's not gonna work.
05:26 < coderarity> you don't have to
05:26 < coderarity> use lambdas
05:27 < zeromodulus> how is a callback chain going to work?
05:27 < zeromodulus> er, how are callbacks going to help in this case?
05:27 < coderarity> like, call(function () { call2(function () { call3(function () { }) }) })
05:27 < teadict> Vagrant is freaking awesome... Does anyone know if there is Chef cookbooks for node?
05:27 < zeromodulus> I don't get it. x.x
05:28 < coderarity> and if you need to, take out a few layers, like `function cb3 () {} call(function () { call2(function () { call3(cb3) }) })`
05:28 < teadict> wat
05:28 < coderarity> zeromodulus: what do you mean?
05:29 < coderarity> zeromodulus: i meant, you don't have to do it like what you were doing it before
05:29 < teadict> coderarity: you do honors to your name alright
05:29 < zeromodulus> I still don't get it. x.x
05:29 < coderarity> use a mix of lambdas and named functions
05:29 < coderarity> this is probably the only time i will say anything that isn't consistent
05:29 < teadict> what are you two trying to solve?
05:30 < segomos> the prisoneers dillema once and for all
05:31 < coderarity> teadict: he's got an object that calls an asynchronous function in its constructor, but he doesn't really want to use eventemitters or callbacks
05:31 < coderarity> but there's not much choice, other than synchronous
05:31 < teadict> why is that async call in the freaking constructor?
05:31 < segomos> async and not eventemitters and callbacks are kind of opposites
05:31 < teadict> that sounds bad
05:32 < coderarity> segomos: yes
05:32 < segomos> what i'd do is just return some bullshit and hope for the best, if it isn't the best situation then they should have waited longer
05:32 < coderarity> teadict: well, look at the code https://gist.github.com/zeromodulus/5149367
05:33 < coderarity> teadict: that's what I thought at first, then I thought about how node_redis does stuff and then emits a ready event
05:33 < segomos> yup set and forget and hope
05:34 < coderarity> so I suggested that he do the same
05:34 < segomos> or just conform to node or just use a non async language like gayhp
05:34 < coderarity> that's about where we are right now
05:34 < teadict> I lost interest already
05:34 < segomos> later skaters
05:34 < teadict> probably because of the time, so long
05:35 < coderarity> teadict: yeah, it's not a matter of what the solution is
05:35 < teadict> it's a matter of national security
05:36 < coderarity> my nation is insecure. it thinks it might look fat, maybe it should drop a california or a new york
05:37 < coderarity> some cardio and salads might help
05:37 < teadict> yes, also getting rid of imperialism
05:37 < coderarity> yeah, sure
05:37 < teadict> and evil repitilian leaders
05:37 < someprimetime_> anyone using solr with mongodb/mongoose in here?
05:38 < zeromodulus> Is it just me or is code generated by coffeescript cringeworthy?
05:38 < coderarity> zeromodulus: it's not great
05:38 < teadict> ain't bad either..
05:38 < teadict> could be worse
05:38 < coderarity> it's good enough
05:38 < zeromodulus> huh... I think if I draw this out...
05:38 < coderarity> but it's really a preference, whether you can deal with that or not
05:38 < coderarity> some people can't
05:39 < zeromodulus> I'll be able to figure out how to nail this down.
05:39 < coderarity> zeromodulus: if you come up with some brilliant alternative to the patterns for asynchronous code that exist today, let me know
05:42 < ForSpareParts> Has anyone here used node-webkit? I had an idea for a project I wanted to do in it, and I was wondering if I should look into some kind of framework to run on top of it -- something like backbone, say -- or if it makes more sense to just build from the ground up.
05:42 < ChrisPartridge> ForSpareParts: I'm using backbone in appjs (similar to node-webkit) and it works well
05:43 < zeromodulus> lmao... yes...
05:43 < zeromodulus> I am definitely going to need to use 'events'.
05:43 < zeromodulus> the way I drew this... hahahaha.
05:44 < coderarity> a blog about this is happening
05:44 < coderarity> today
05:44 < coderarity> and by today i mean, it's not happening today
05:44 < zeromodulus> Game is a square with an arm, tossing a query to Redis, and then Redis frisbees the results back to Game, and Game is like, "thx."
05:44 < ForSpareParts> ChrisPartridge: Cool, thanks!
05:44 < coderarity> and your Game is just like Redis too
05:45 < zeromodulus> So, yeah, I think I'm definitely going to have to use the 'events' library.
05:45 < zeromodulus> I found an article that "demystifies" it, so, maybe that'll help.
05:46 < coderarity> that's good
05:46 < Hari_> hhhhhhhhh
05:46 < Hari_> hyr
05:46 < Hari_> hye
05:46 < ningu> events are not difficult
05:46 < Hari_> how r u all
05:47 < Hari_> anyone der
05:47 < ningu> no
05:47 < coderarity> bored and slightly entertained at the same time
05:47 < Hari_> hellooooooo
05:47 < Hari_> hello ningu
05:48 < echo> This is going to be rough, I can sense it.
05:48 < Hari_> helli
05:48 < Hari_> o
05:48 < Hari_> i
05:48 < Hari_> u
05:48 < Hari_> y
05:48 < echo> And painful.
05:48 < Hari_> what painful
05:49 < Hari_> helli
05:49 < Hari_> hello
05:49 < Hari_> hye
05:49 < Hari_> u der
05:50 < coderarity> echo: yep
05:50 < echo> coderarity: More motivation for your blog post :3
05:52 < coderarity> at this point, it's going to be a fairly interesting description of a fairly boring night
05:59 < ningu> vwoo: did you see?
05:59 < vwoo> see what?
06:00 < ningu> SELECT DISTINCT ap.ap,ap.tt,ap.ti,aped.cx FROM ap JOIN aped USING (ap) JOIN av USING (ap) JOIN noexlv USING (lv) WHERE aped.im = TRUE AND aped.cx < 5 ORDER BY aped.cx;
06:00 < ningu> gah
06:00 < ningu> not that
06:00 < ningu> http://krugman.blogs.nytimes.com/2013/03/12/all-me-all-the-time/
06:00 < coderarity> oh man
06:00 < vwoo> krugman reblogging me?
06:00 < vwoo> yes
06:00 < vwoo> definitely very satisfying
06:00 < ningu> :)
06:00 < ningu> coderarity: what, brings back memories?
06:01 < coderarity> ningu: nope, I'm young enough that I haven't really touched SQL that much
06:01 < coderarity> thankfully
06:01 < coderarity> more like, "who writes that?"
06:02 < ningu> coderarity: that query is not particularly complicated for SQL
06:02 < coderarity> far more complicated than anything i've used
06:03 < ForSpareParts> Is there somewhere I can go to see an example of a well-organized Node project so that I get off on the right foot? Or just a list of best practices?
06:03 < vwoo> ForSpareParts, express generates certain template projects
06:03 < coderarity> ForSpareParts: github.com has a lot of node projects, just check out some from popular people
06:03 < ForSpareParts> thanks!
06:03 < vwoo> http://expressjs.com/guide.html#executable
06:04 < ningu> yeah, a new express app is a good place to start
06:04 < ningu> ForSpareParts: are you trying to build a site, or what?
06:04 < ForSpareParts> ningu: I want to try my hand at using node-webkit to build an IRC client on top of one of the node IRC libraries.
06:05 < SecretAgentX9> yes the Ronco cooker
06:06 < SecretAgentX9> oop, wrong channel
06:07 < ningu> ForSpareParts: I see. well, you might want just read the source for existing irc libraries
06:08 < ningu> vwoo: I hope your site can handle the increase in traffic :)
06:09 < vwoo> ningu: held up all day. one free nodejs instance on heroku
06:09 < ningu> cool
06:09 < vwoo> probably past my traffic peak already 
06:09 < vwoo> 28k pageviews today
06:10 < ForSpareParts> ningu: Yeah, that's a good idea. I just wanted to make sure I didn't do anything really dumb when I start writing my own code -- mishandle my package management somehow, or use a conventionally reserved directory name for something else random. I always read up on this stuff when I start with a new stack.
06:11 < ningu> there aren't really any conventionally reserved names... well, there is lib/
06:11 < ForSpareParts> OK.
06:11 < ningu> often a package will be loaded from index.js which just pulls in something from lib/
06:11 < ningu> there is no single pattern though
06:11 < ningu> if it's a small module you don't need several files
06:11 < vwoo> ForSpareParts, i always start with a single file and make more only grudgingly
06:12 < ningu> ForSpareParts: I think tj's modules are generally well laid out and the code is easy to read
06:12 < ForSpareParts> ningu: Cool, I'll look into them.
06:14 < zeromodulus> Ha ha! I'm using the Event Emitters!
06:15 < zeromodulus> And the listeners.
06:15 < ningu> zeromodulus: do you have the right antenna to receive them?
06:15 < zeromodulus> Eh, sure.
06:15 < ningu> zeromodulus: anyway, this is basically the whole point of node -- to be able to declare your control flow that way
06:15 < ningu> that's what lets it be single-threaded
06:16 < mscdex> node.js rules!
06:16 < vwoo> i disagree that being in node-land means you should write an app in a pub/sub fashion
06:17 < vwoo> i do agree that that is what makes the freamwork so fast
06:17 < SomeoneWeird> i agree
06:17 < ningu> vwoo: well, it's the reason for node's invention, even if there are other uses for it
06:17 < vwoo> fwiw i use deferreds/icedCS to avoid having to write pub/sub or callback style code whenver i can
06:18 < ningu> icedCS?
06:18 < vwoo> http://maxtaco.github.com/coffee-script/
06:19 < ningu> hmm
06:20 < zeromodulus> can a prototype method of an object be called within that object's constructor?
06:21 < zeromodulus> and `var self = this;` is apparently cooler than `var _this = this;`?
06:22 < kuja> yes
06:22 < echo> I also seen `var that = this;` used.
06:22 < ningu> zeromodulus: just personal preference
06:22 < ningu> zeromodulus: as for your first question, yes, I think so
06:23 < ningu> this.foo()
06:23 < SomeoneWeird> .bind(this) > var [_?self|that] =ths;
06:23 < SomeoneWeird> lol
06:23 < ningu> as long as the object is in a state where foo() would work
06:31 < zeromodulus> are listeners async too? :(
06:31 < ningu> of course
06:31 < zeromodulus> as in, once a listener statement is made, execution just keeps on keepin' on?
06:31 < ningu> yes
06:31 < ningu> you can also remove listeners later
06:31  * zeromodulus facepalms.
06:32 < zeromodulus> maybe the listener should be on the client side?
06:32 < ningu> huh?
06:32 < ningu> any side receiving a message needs a listener
06:33 < zeromodulus> I basically implemented a emitter/listener solution because my page kept loading before Redis had a chance to return any results.
06:33 < ningu> err... so why not make the page not load until then?
06:33 < zeromodulus> causing all of the values in my template to be undefined at times.
06:34 < zeromodulus> that's what I've been wondering what to do this whole time.
06:34 < ningu> don't send a response until the redis callback fires
06:34 < zeromodulus> I thought defining a listener would like, stop execution and wait until the event fires.
06:34 < ningu> no
06:34 < ningu> nothing blocks in node
06:34  * zeromodulus facepalms.
06:35 < zeromodulus> so then...
06:35 < zeromodulus> maybe add a listener to the rendering code?
06:35 < vwoo> ningu: the stuff that blocks, blocks
06:35 < ningu> you don't need a listener
06:35 <@mbalho> zeromodulus: you should buy a book
06:35 < ningu> vwoo: yes, but I'm giving him the platonic ideal
06:35 < vwoo> hah
06:35 < ningu> zeromodulus: you said you're waiting for a response from redis. well, that response comes in a callback, right?
06:36 < zeromodulus> I can't buy any books until my apps start making money.
06:36 < ningu> zeromodulus: so you send a response in the code for that callback
06:36 < ningu> since that's when you want the response
06:36 < zeromodulus> uh, k, how do I do that?
06:36 < ningu> the same way you're sending the response now
06:36 < zeromodulus> wouldn't that like, spaghetti up my code?
06:36 < ningu> just put the code there
06:37 < zeromodulus> what code? where?
06:37 < zeromodulus> lmao
06:37 < ningu> whatever the code for sending hte response is, you've already written it
06:37 < ningu> it's just in the wrong place
06:37 < zeromodulus> oh, oh oh oh ooooh
06:37 < zeromodulus> so my res.render statement.
06:37 < ningu> as long as all the vars it needs are in the same closure it's find
06:37 < zeromodulus> that should be wrapped in a callback?
06:37 < ChrisPartridge> yeah, inside the callback..
06:37 < ningu> yes, exactly. I didnt know you were using express
06:37 < ningu> s/find/fine/
06:38 < zeromodulus> well, this simplifies matters greatly.
06:38 < zeromodulus> but first, I'm hungry.
06:38 <@mbalho> "I can't buy any books until my apps start making money." means you should /join meteor.js and /leave node.js probably
06:38 < ChrisPartridge> haha
06:39 < zeromodulus> but... you all are so helpful. t.t
06:39 < ningu> I wonder if the meteor in russia made money
06:41 < zeromodulus> meteor.js sounds like the frontpage of node.js. :|
06:41 < zeromodulus> er, I mean, Microsoft ™FrontPage™.
06:43 < TheAceOfHearts> did something change in package.json from version 0.8 to 0.10?
06:43 < someprimetime_> zeromodulus: meteor is a joke
06:43 < someprimetime_> imo
06:43 < someprimetime_> at first i was pumped for it
06:44 < someprimetime_> then as I heard about how they secured funding it just reeks for corporate try-hardness
06:44 < zeromodulus> So it is the Microsoft FrontPage of Node.js?
06:44 < coderarity> zeromodulus: more like the oppposite
06:44 < coderarity> someprimetime_: i am not impressed at all
06:44 < coderarity> someprimetime_: i hear they have a lot of money and they don't use it very well
06:45 < coderarity> i dislike people who are like that
06:45 < someprimetime_> it's just more of a testament to the amount of dumb money in the silicon valley investing in the wrong stuff
06:46 < coderarity> please invest in my stuff, i'll use your money better companies :D
06:46 < someprimetime_> s/silicon/silly
06:46 < someprimetime_> no one will be using meteor.js in 5 years
06:46 < someprimetime_> that's apparently what they secured funding for
06:46 < coderarity> hopefully sooner
06:47 < coderarity> i don't get how they got investments anyways
06:47 < coderarity> how do they make money?
06:47 < coderarity> consulting or something?
06:48 < jesusabdullah> /!\ Attention /!\ Mitch Seavey won the Iditarod sled dog race
06:49 < coderarity> jesusabdullah: no, his dogs did
06:49 < deoxxa> yeah but who built the dogs
06:49 < ningu> how do you know that wasn't the name of the dog?
06:49 < deoxxa> huh
06:49 < deoxxa> the robot dogs
06:50 < zeromodulus> Okay, I will shit a brick if this works.
06:50 < deoxxa> be careful, that sounds painful
06:50 < ningu> good coding isn't always pleasant
06:51 < zeromodulus> Seems like I finally got it right.
06:53 < jesusabdullah> coderarity: Mitch Seavey is the abstract representation of Mitch Seavey the person and his dogs
06:53 < ningu> how many dogs?
06:53 < jesusabdullah> unsure probably about a dozen
06:54 < deoxxa> takes a lot of dogs to power a steam engine
06:54 < fusiongrokker> I'm seeing what I think is a difference in crypto.pbkdf2 between node 0.8 and 0.10... is there any known difference?
06:54 < jesusabdullah> okay based on pictures, 8 of them
06:54 < coderarity> i bet that could actually work too
06:54 < coderarity> suddenly, i want to live on a snow planet
06:54 < deoxxa> fusiongrokker: compare docs?
06:54 < fusiongrokker> deoxxa: that was my first thought but I don't see a way to pull the old docs up on nodejs.org
06:55 < ningu> deoxxa: no dingo races in oz/
06:55 < ningu> ?
06:55 < jesusabdullah> http://www.adn.com/2013/03/12/2822951/seaveys-lead-grows-as-he-nears.html
06:55 < jesusabdullah> why have a snow planet when you can just have a POLAR REGION
06:55 < deoxxa> fusiongrokker: nodejs.org/docs/v0.8.12/api/all.html
06:55 < fusiongrokker> thanks
06:55 < fusiongrokker> deoxxa: more importantly, is that link listed somewhere?
06:56 < coderarity> jesusabdullah: universal steam engine travel
06:56 < coderarity> i mean, all the snow is water
06:56 < deoxxa> fusiongrokker: http://nodejs.org/docs/
06:56 < fusiongrokker> ah, thanks
06:56 < coderarity> also, never be thirsty again
06:57 < jesusabdullah> coderarity have you ever tried to melt snow it takes a lot of heat
06:57 < jesusabdullah> coderarity: phase changes in general take a lot of energy, and starting with a solid requires twice as many as starting with a liquid
06:57 < jesusabdullah> coderarity: brohonestly petroleum fuels get you the farthest
06:57 < coderarity> we'll just reuse the heat from the friction of the vehicle
06:57 < deoxxa> jesusabdullah: only requires 1 degree of heat, you silly poop
06:58 < fusiongrokker> deoxxa: looks like pbkdf2Sync was added but the docs for the crypto.pbkdf2 method itself don't appear to have changed at all...
06:58 < ningu> jesusabdullah: you forgot about the downside, http://www.youtube.com/watch?v=rbn5rQVKj1Y
06:58 < coderarity> jesusabdullah: we still need fuel to melt the water, you see
06:58 < jesusabdullah> -_-;
06:58 < jesusabdullah> Who has expertise in arctic engineering here you or me
06:58 < coderarity> i mean
06:58 < coderarity> steamify the water
06:58 < jesusabdullah> XD
06:58 < Havvy> 1 degree of heat doesn't exist.
06:58 < coderarity> jesusabdullah: i took a chemistry class in high school
06:58 < jesusabdullah> heat comes in joules guys
06:59 < jesusabdullah> Joules*
06:59 < deoxxa> jewels
06:59 < jesusabdullah> incorrect
06:59 < ningu> be sure to protect the family joules
06:59 < jesusabdullah> haha
06:59 < deoxxa> rubies == hottest
06:59 < Havvy> It takes 2.134J (or is it Mj) to increase 1cm^3 of snow to water.
06:59 < Havvy> No wait, that's regular water..
06:59 < ningu> that youtube I posted up there is a guy falling off his snowmobile and sliding way down a mountain in greenland
07:00 < coderarity> jesusabdullah: also, we could generate the energy to melt the snow and boil it into steam from hampsters
07:00 < coderarity> jesusabdullah: tons of them, running as fast as they can
07:00 < Havvy> I'll just link to hyperphysics: http://hyperphysics.phy-astr.gsu.edu/hbase/thermo/phase.html
07:00 < jesusabdullah> https://en.wikipedia.org/wiki/Latent_heat#Table_of_latent_heats
07:00 < fusiongrokker> because of this difference, accounts created on node 0.8 can't be logged into when running node 0.10... :o\
07:00 < ningu> hamsters are desert animals, I don't think they'd appreciate snow
07:00 < jesusabdullah> this is what you want
07:00 < coderarity> i don't think several hampsters could make a car drive
07:00 < coderarity> ningu: snow hampsters
07:01 < Havvy> What's the conversion for Snow Hampster Power to Horse Power?
07:01 < jesusabdullah> you can see the Lf for water is a fraction of the Lv but it's non-negligible :)
07:01 < zeromodulus> How do I access prototype methods from within a constructor function?
07:01 < coderarity> jesusabdullah: yeah
07:01 < jesusabdullah> oh also if your steam engine freezes you're fucked XD
07:01 < zeromodulus> I'm beginning to think it's not possible.
07:01 < coderarity> jesusabdullah: but it's totally worth it
07:01 < coderarity> jesusabdullah: because you don't have to carry water around
07:01 < jesusabdullah> zeromodulus: this.method ?
07:01 < zeromodulus> jesusabdullah: it's you...
07:01 < zeromodulus> dun dun dunnn......
07:01 < coderarity> zeromodulus: this.prototype
07:02 < ningu> zeromodulus: as long as they've been defined you can access them
07:02 < zeromodulus> do they have to be defined before the constructor? :|
07:02 < ningu> jesusabdullah: no, frozen steam still works fine
07:02 < zeromodulus> 'cause I've tried those.
07:02 < zeromodulus> and I just moved the functions above the constructor, and still getting "no method 'foo'"
07:03 < coderarity> jesusabdullah: how would it freeze?
07:03 < coderarity> jesusabdullah: there's got to be some source of heat
07:03 < jesusabdullah> coderarity: you turn the engine off
07:03 < coderarity> jesusabdullah: oh, right
07:03 < coderarity> don't do that
07:03 < coderarity> or, make sure there's no water in there when you turn it off
07:03 < jesusabdullah> coderarity: seriously though: Yes you have frozen water around on the ground, but in general you're going to have not-so-frozen water kicking around in other environments too
07:03 < coderarity> drainage valves could be implemented
07:03 < zeromodulus> (within the constructor) neither self.foo, self.prototype.foo, or just foo() resolve to a method call.
07:04 < coderarity> jesusabdullah: but the not-so-frozen water has to be stored
07:04 < jesusabdullah> coderarity: oh yes, if you shut down a steam engine long-term you often want to drain it even in above-zero weather
07:04 < coderarity> that's a lot of weightr
07:04 < coderarity> like, a LOT of weight
07:04 < zeromodulus> and I do have `var self = this;` statements in all functions, constructor included.
07:04 < coderarity> water is dang heavy
07:05 < coderarity> zeromodulus: gist.github.com, yo
07:05 < zeromodulus> eh...
07:05 < jesusabdullah> well like, in order for that to work you would have to scoop ice off the ground in front of you, heat it up to stream and then shoot it out the back
07:05 < coderarity> zeromodulus: i already copyrighted your code it's basically mine anyways
07:05 < coderarity> jesusabdullah: YEP
07:05 < jesusabdullah> but you can't really extract any work out of that melting process, not like with water/stream
07:05 < zeromodulus> you're a pony, your copyright is null and void.
07:05 < zeromodulus> brony.
07:06 < zeromodulus> the taint of ponyism is upon you.
07:06 < jesusabdullah> coderarity: did you know that old school steam trains jet the used stream out the stack? It turns out it's better to use it to force the draft than it is to try and condense/recycle it
07:06 < jesusabdullah> coderarity: that's why old-school railroads had water tanks nearby, so they could refill the boilers on the locomotives
07:07 < zeromodulus> I think I can google this one
07:07 < jesusabdullah> coderarity: exceptions included certain lines running through the deserts of the SW US due to low water availability
07:08 < coderarity> jesusabdullah: no, i didn't know that
07:08 < coderarity> jesusabdullah: but here's another benefit to snow planets: there's no need for boats
07:09 < coderarity> everything is solid and stuff
07:09 < mscdex> matlab.js
07:09 < jesusabdullah> boats are actually really gangster
07:09 < jesusabdullah> not having boats sucks
07:09 < ashnur> wtf
07:09 < coderarity> we could just slide things instead
07:09 < ashnur> boats are really gangster? is this node.js? or am I lost? :)
07:10 < coderarity> ashnur: this is a discussion between a thermal engineer and someone who likes penguins too much
07:10 < ashnur> :))))
07:10 < jesusabdullah> coderarity: https://en.wikipedia.org/wiki/Gas_turbine#Industrial_gas_turbines_for_power_generation These are common on the natural gas platforms in Cook Inlet, since they already have the natural gas kicking around
07:10 < ashnur> i have to read back
07:11 < jesusabdullah> oh yeah but coderarity think about the sizes of very large boats and the importance of ports and canals for world shipping/trade, versus air/road/rail/sled
07:11 < jesusabdullah> Ships are the only way you can move so much freight so cheaply
07:12 < zeromodulus> so, `this` inside of a prototype function, refers to an instance, right?
07:12 < zeromodulus> the same instances made by the constructor function?
07:12 < jesusabdullah> zeromodulus: indeed
07:12 < jesusabdullah> coderarity: http://www.autoblog.com/2011/07/22/worlds-largest-diesel-engine-makes-109-000-horsepower/ to give you an idea of how big these ships can be
07:13 < ningu> zeromodulus: http://pastebin.com/0cj9AAmB
07:13 < ningu> zeromodulus: it works fine.
07:13 < vwoo> zeromodulus, they are the object the function was invoked with as its context object. i can call any function and make any arbitrary object the "this" object. by convention what you have said is true
07:13 < zeromodulus> weird...
07:13 < zeromodulus> it's not working for me. x.x
07:13 < ningu> zeromodulus: you can't create the new object until you've change Foo's prototype, in the example I pasted.
07:13 < coderarity> jesusabdullah: since the world has a uniform environment, we could distribute stuff evenly
07:13 < ningu> but that just stands to reason, in a functional language :P
07:13 < coderarity> jesusabdullah: like, there'd be no benefit in being in one part of the world vs the other
07:14 < coderarity> jesusabdullah: so there would be no need to ship stuff so far
07:14 < coderarity> you'd just evenly distribute factories across the world
07:14 < jesusabdullah> I mean, I guess on a snow planet there wouldn't be a whole Hell of a lot to ship anyway
07:14 < zeromodulus> ah crap.
07:14 < ningu> jesusabdullah: what about a sheep on a ship?
07:14 < ashnur> so coderarity wan't to move to either europa or titan
07:14 < ashnur> wants*
07:14 < zeromodulus> well, no, it should be fine then.
07:14 < coderarity> jesusabdullah: also, this wikipedia article gives me an idea
07:15 < zeromodulus> I think... O.o
07:15 < jesusabdullah> coderarity: Interestingly enough, something like 90% of goods in Alaska pass through the port of Anchorage
07:15 < ningu> zeromodulus: *shrug* can't tell without the code
07:15 < ningu> are there gnomes in Nome?
07:15 < coderarity> jesusabdullah: well, it's not exactly connected to the rest of america, or anything in canada that's important
07:15 < jesusabdullah> coderarity: without goods from Outside AK would be kinda fucked, at least if one ignores subsistence lifestyles (collect wood, hunt/fish/gather)
07:16 < coderarity> jesusabdullah: also, there's a lot of oil in alaska right? so there must be a TON of oil on a snow planet
07:16 < jesusabdullah> I mean
07:16 < coderarity> jesusabdullah: they could have gas powered engines that use the snow to reuse the heat and increase efficiency
07:16 < ashnur> what i like that people want to talk about node.js in the meantime. hopeless, really.
07:16 < jesusabdullah> the reason there's oil is because the techtonic plates were elsewhere during the carboniferous period
07:16 < coderarity> ashnur: they can, i'll even help
07:16 < zeromodulus> https://gist.github.com/zeromodulus/5149920
07:16 < jesusabdullah> elsewhere meaning, much warmer
07:16 < ningu> I'm not sure if a snow planet would have had a carboniferous period
07:17 < jesusabdullah> ^^^^
07:17 < ashnur> jesusabdullah: another reason is that fungi weren't as evolved as today
07:17 < ashnur> and earth had full ice coverage, i think 
07:17 < coderarity> okay, what about whale oil
07:17 < vwoo> zeromodulus, the callback passed to a constructor seems superfluous there
07:18 < coderarity> whales are in alaska, right?
07:18 < ashnur> :D
07:18 < zeromodulus> vwoo: it's needed.
07:18 < vwoo> why?
07:18 < penzur> hey
07:18 < penzur> hoh
07:18 < ashnur> no. whales are everywhere. don't forget that they talk to each other from immense distances
07:18 < zeromodulus> I pass the constructor a callback which does page rendering.
07:18 < jesusabdullah> yes there are whales but they're endangered
07:18 < penzur> ai oh
07:18 < coderarity> zeromodulus: good enough
07:18 < jesusabdullah> because of hunting
07:18 < ningu> zeromodulus: shouldn't you wait till redis sets whatever to call the callback?
07:18 < jesusabdullah> luckily nobody was using whale oil for running equipment
07:19 < zeromodulus> If I don't, then the page will go on rendering even though the constructor might not have any properties loaded.
07:19 < ashnur> jesusabdullah: you don't know what :)
07:19 < vwoo> zeromodulus, thats not true
07:19 < coderarity> ningu: he doesn't have to, really
07:19 < vwoo> the constructor is synchronous here
07:19 < vwoo> it doesn't make any async calls
07:19 < coderarity> yeah it does
07:19 < ningu> zeromodulus: ok, but I don't see why the constructor of this obect should be passed the callback at all
07:19 < vwoo> you could just invoke whatever you pass in as "done" after newing up the object
07:19 < ningu> coderarity: I know, it depends on whether the results matter I guess
07:19 < coderarity> vwoo: https://gist.github.com/zeromodulus/5149920#file-foo-js-L18
07:19 < vwoo> oh the find call
07:19 < coderarity> yeah
07:19 < vwoo> whoops
07:20 < vwoo> ignore everything i said
07:20 < zeromodulus> the done callback looks like this...
07:20 < vwoo> goodnight
07:20 < coderarity> jesusabdullah: what's wrong with whale oil?
07:20 < jesusabdullah> ashnur: okay, at scale then. Point is, whale oil is not a very sustainable resource
07:20 < zeromodulus> `function (foo) { res.render({foo: foo}); }`
07:20 < jesusabdullah> coderarity: it's not the whale oil, it's the fact that whales don't regenerate fast enough to meet demand
07:20 < ningu> zeromodulus: so why not just do var foo = new Foo(); done();
07:20 < coderarity> okay
07:20 < coderarity> okay
07:20 < coderarity> so if the snow planet
07:21 < coderarity> was also an ocean
07:21 < ningu> zeromodulus: the way you've written it that would be the same
07:21 < coderarity> everywhere
07:21 < zeromodulus> so in that case, the page will render only when the chain of callback execution gets to it.
07:21 < ningu> zeromodulus: no.
07:21 < ningu> self.find() returns immediately.
07:21 < ashnur> jesusabdullah: maybe if the planet has much more oceans and whales, and much less people. :D
07:21  * zeromodulus facepalms.
07:21 < ashnur> but it's not sustainable anyway. 
07:21 < ningu> zeromodulus: you should assume that *all* node calls return immediately.
07:22 < ningu> callbacks are invoked in the distant future.
07:22 < zeromodulus> but the done() callback in the immediate future?
07:22 < jesusabdullah> ashnur: exactly. whale hunting was sustainable at the scale required for native subsistence back in the day
07:22 < ningu> yes, because you call it in the normal order of execution, not inside a callback.
07:22 < jesusabdullah> ashnur: but not sustainable enough to support an industrial revolution, say
07:23 < coderarity> zeromodulus: you need to call the callback after set too, otherwise it'll only get called sometimes (and you'll probably have stuff you need to run in there too)
07:23 < zeromodulus> ningu: you're the one who told me I should wrap my rendering code in a callback!
07:23 < coderarity> zeromodulus: also, he's right, i missed that
07:23 < coderarity> zeromodulus: put the done call at the end of the load function and inside the else clause, not after that
07:23 < ningu> coderarity: why would it only be called sometimes?
07:23 < ashnur> jesusabdullah: but the sun could give enough energy if you have some good ways to store it 
07:23 < coderarity> ningu: if (id) {} else {} statement
07:24 < coderarity> ningu: also, i misread it the first time
07:24 < ningu> coderarity: well yes, I'm assuming he has a reason for only calling redis.set in the else
07:24 < ashnur> like fluid metal batteries(accumulators) or graphene based capacitors 
07:24 < coderarity> ningu: i thought he had it in his load callback and that was it, but that was incorrect
07:24 < ashnur> i really really hope that we can move on from oil, as we moved on from wood and coal.
07:25 < coderarity> ashnur: nuclear energy!
07:25 < ningu> the way he's written it, it looks like he'd want to call done() right away in the else clause, and for the if clause it would go in/after self.load
07:25 < zeromodulus> so I'm still rendering my friggin' page even though self.find isn't done?
07:25 < coderarity> ningu: yes, that's true
07:25 < coderarity> zeromodulus: yes, do what ningu just said
07:25 < jesusabdullah> ashnur: yeah, that's technologically feasible though difficult in a polar region
07:25 < zeromodulus> okay.
07:26 < zeromodulus> that makes sense.
07:26 < zeromodulus> kinda...
07:26 < jesusabdullah> ashnur: the sun's always low on the horizon, often obscured by clouds, and winter days are stupid short
07:26 < ningu> zeromodulus: you can either save the done value and call it in self.load, or just rewrite self.find's callback, so: function(properties) { self.load(properties); done(self) }
07:27 < coderarity> jesusabdullah: that wouldn't be true on a snow planet
07:27 < coderarity> jesusabdullah: only around the north and south pole
07:27 < zeromodulus> I think I'll save the value in done.
07:27 < zeromodulus> then self.done(self);
07:27 < ningu> btw, it's in a callback that you really need var self = this; -- in Foo.prototype.load it's pointless
07:27 < coderarity> jesusabdullah: the equator still gets lots of sunlight, the planet just has to be farther from the sun than earth is
07:27 < ningu> I mean, it doesn't hurt, it's just redundant
07:27 < ashnur> jesusabdullah: well, we could use space mirrors :D 
07:28 < ashnur> or just build cables to move the power up there
07:28 < zeromodulus> uh, k.
07:28 < coderarity> ashnur: also, that might melt things, right?
07:28 < ningu> the callback function will be invoked with a different 'this' value so you have to save the old one if you want to access it from the callback
07:28 < jesusabdullah> coderarity: yes that's true, you would still have a weak signal obviously but at least you can expect equal cycles of day/night with the sun being more or less overhead
07:28 < ningu> but in load, there is no other closure to worry about
07:28 < ningu> so self and this are always identical
07:29 < zeromodulus> okay... looks as though I don't need the self declaration.
07:30 < ningu> zeromodulus: I didn't just say that for no reason :P but you do need it *anytime* you have an async method with a callback 
07:30 < zeromodulus> O.o
07:30 < coderarity> jesusabdullah: you could use magnifying glasses to melt the snow
07:30 < zeromodulus> o.O
07:30 < zeromodulus> what?
07:30 < coderarity> jesusabdullah: but like, really big ones, so that it makes water boil
07:30 < ningu> zeromodulus: read up on how 'this' works in js
07:30 < coderarity> jesusabdullah: and then you could have solar powered steam engines
07:31 < ningu> could you have steam powered air conditioning?
07:31 < ningu> that would be pretty awesome.
07:31 < zeromodulus> I don't think I need a self = this.
07:31 < zeromodulus> O.o
07:31 < jesusabdullah> coderarity: think about this: we're basically talking about Mars here.
07:31 < zeromodulus> because my methods are prototype methods, right?
07:31 < ningu> zeromodulus: it has nothing to do with that
07:31 < jesusabdullah> coderarity: The only real issue is that Mars is dry
07:31 < coderarity> jesusabdullah: except tons of water
07:31 < jesusabdullah> coderarity: but the temperatures are right
07:32 < ningu> zeromodulus: it has to do with how 'this' works
07:32 < zeromodulus> but...
07:32 < ashnur> we just have to bring one of the ice moons over there
07:32 < zeromodulus> this is still this, where it is.
07:32 < jesusabdullah> coderarity: and there's probably enough water somewhere that you could, say, make the assumption that it's available
07:32 < ashnur> it's really not that big of a deal
07:32 < zeromodulus> self = this and this = this, so why not just use this?
07:32 < ningu> zeromodulus: yes, but if you invoke an async method, it *won't* be in the callback
07:33 < ningu> that's what I'm trying to tell you
07:33 < zeromodulus> seems like an extra layer to the onion.
07:33 < AAA_awright> zeromodulus: while(!results)
07:33 < zeromodulus> what?
07:33 < AAA_awright> What. The. Hell.
07:33 < jesusabdullah> zeromodulus: each function scopes 'this' differently
07:33 < AAA_awright> That's an infinite loop
07:33 < coderarity> jesusabdullah: but even if it's available, it still has to be carried around
07:33 < jesusabdullah> ashnur: only if results is never defined
07:33 < jesusabdullah> coderarity: realistically you'd carry it around *anyway*
07:34 < coderarity> jesusabdullah: also, there's not that much friction on snow either, so you don't lose that energy
07:34 < ashnur> jesusabdullah: you mean AAA_awright 
07:34 < zeromodulus> so then shouldn't I do this.self = this?
07:34 < coderarity> that much*
07:34 < jesusabdullah> ashnur: yes, I do
07:34 < ashnur> kewl
07:34 < jesusabdullah> this.self ?
07:34 < AAA_awright> ?
07:34 < zeromodulus> lmao
07:34 < zeromodulus> I dunno
07:34 < Cogito_Ergo_Sum> hey guys
07:34 < jesusabdullah> AAA_awright: while (!results) { results = true; } isn't an infinite loop right?
07:34 < AAA_awright> jesusabdullah: It's either not going to loop ever, or it's going to infinite loop
07:34 < AAA_awright> So there's really no point of it at all
07:34 < zeromodulus> I don't see how the original reference to this is being preserved.
07:34 < ningu> zeromodulus: that won't help if you can't access this.
07:34 < zeromodulus> Even in the context of a callback.
07:34 < Cogito_Ergo_Sum> wasn't it supposed that after version 0.8 comes version 1.0 ?
07:34 < ningu> zeromodulus: IT ISN'T
07:35 < ningu> that's why you need to save it
07:35 < ningu> you can access variables defined outside the callback as long as they're in the same closure
07:35 < jesusabdullah> AAA_awright: disagree. while (!results) { results = Math.floor(2 * Math.random()); } will run an indeterminate number of times
07:35 < coderarity> jesusabdullah: we have to solve these problems before the next ice age
07:35 < AAA_awright> jesusabdullah: while (!results) { if (results) { return results; } }
07:35 < AAA_awright> jesusabdullah: That's the code in question
07:35 < zeromodulus> So, to sum it up, this refers to what when the function is being used as a callback?
07:36 < ningu> zeromodulus: depends how the callback was called. that's why I keep saying you should read up on the semantics of 'this'
07:36 < ningu> but you certainly can't assume it will be the same as in the context where you passed the callback
07:36 < jesusabdullah> zeromodulus: Each function (including callbacks) has "this" scoped differently
07:36 < ningu> so in general you just save the value first
07:36 < zeromodulus> I don't really expect it to be, I think...
07:36 < jesusabdullah> zeromodulus: by default, 'this' scopes to the global namespace, but
07:36 < coderarity> jesusabdullah: so you're saying the energy to move that water around is less than the energy needed to melt that much snow into water?
07:37 < zeromodulus> I'm just wondering why my methods aren't being found.
07:37 < jesusabdullah> zeromodulus: you can set it explicitly with fxn.call, fxn.apply and fxn.bind
07:37 < ningu> zeromodulus: your load method is called as a callback. it references this.
07:37 < ningu> zeromodulus: if you want that to be the same object as the one that passed load as a callback, you need to do the sort of thing I described.
07:37 < jesusabdullah> zeromodulus: and if the function is attached to an object, then this is scoped to that object (unless you used fxn.call, fxn.apply or fxn.bind)
07:37 < jesusabdullah> zeromodulus: that's the short version
07:37 < AAA_awright> I have an idea
07:37 < zeromodulus> so do I need to pass self as an argument to load?
07:37 < AAA_awright> zeromodulus: Read the Node.js documentation
07:38 < AAA_awright> zeromodulus: But before that, read the ECMAScript specification
07:38 < ningu> zeromodulus: I already showed you how to do it a bunch of screens ago
07:38 < zeromodulus> Fine... I'll read up on 'this'.
07:38 < zeromodulus> -.-
07:39 < ningu> var self = this; blarg(foo, bar, function () { self.load() })
07:39 < zeromodulus> actually, I'll do that as a last resort.
07:39 < jesusabdullah> zeromodulus: so, (function () { assert(this.foo == 'foo'); (function () { /* this refers to the global namespace here */ })(); }).bind({ foo: 'foo' })
07:39 < jesusabdullah> blegh that took a lot of effort to type
07:39 < jesusabdullah> what ningu said is correct
07:39 < AAA_awright> Don't use 'this' to refer to a 'global namespace'
07:39 < AAA_awright> That's not correct behavior
07:39 < AAA_awright> Don't rely on it
07:39 < zeromodulus> ningu: oh, yeah, makes sense now.
07:39 < jesusabdullah> yes you should avoid that situation at ALL COSTS
07:40 < jesusabdullah> to be clear
07:40 < zeromodulus> ningu: I'm not doing that though.
07:40 < ningu> zeromodulus: so, just using 'this' is fine outside the callback, it will be what you expect. but not in the callback
07:40 < ningu> zeromodulus: wanna bet?
07:40 < zeromodulus> I am not using an outer 'this' in any callback definitions.
07:40 < jesusabdullah> definitions? what are you talking about?
07:41 < ningu> zeromodulus: and you're still wondering why your functions aren't being found?
07:41 < zeromodulus> declarations?
07:41 < zeromodulus> function foo () {}?
07:41 < jesusabdullah> look
07:41 < jesusabdullah> *sigh*
07:41 < coderarity> he means he's not using anything like var self = this
07:41 < jesusabdullah> but he should be
07:41  * ningu would place a bet on intrade if it still existed
07:41 < AAA_awright> What
07:41 < Cogito_Ergo_Sum> guys anyone has any idea why this stupid dnaming of the new version? shouldn't it be 1.0 now afteer 0.8?
07:41 < AAA_awright> What's wrong with Intrade?
07:42 < zeromodulus> coderarity: yes, that is correct.
07:42 < jesusabdullah> coderarity: no?
07:42 < jesusabdullah> er
07:42 < jesusabdullah> Cogito_Ergo_Sum: no?
07:42 < ningu> AAA_awright: it's closed/closing down immediately
07:42 < AAA_awright> Eh?
07:42 < zeromodulus> I thought scope didn't change block level.
07:42 < coderarity> Cogito_Ergo_Sum: look at glibc, it's at like 2.17
07:42 < jesusabdullah> Cogito_Ergo_Sum: semver, 1.0 means "going gold" not "two more after 0.8"
07:42 < zeromodulus> I'm calling the method that can't be found at block level.
07:42 < zeromodulus> Not in nested function scope.
07:42 < ningu> zeromodulus: gist your code again
07:43 < jesusabdullah> ^^^
07:43 < Cogito_Ergo_Sum> so after 0.10 will be 0.11 ... 0.12 up to 0.99 ?
07:43 < jesusabdullah> yes
07:43 < ningu> Cogito_Ergo_Sum: there is a roadmap
07:43 < ningu> 1.0 is after 0.12 iirc
07:43 < jesusabdullah> until, at least, someone decides that node.js is "ready" to "go gold"
07:43 < coderarity> Cogito_Ergo_Sum: up to 0.infinity
07:43 < AAA_awright> ningu: When was this
07:43 < ningu> AAA_awright: like two days ago or something
07:43 < zeromodulus> https://gist.github.com/zeromodulus/5150029
07:43 < ningu> AAA_awright: just load the homepage
07:44 < ningu> they have a notice up
07:44 < ningu> and there is various news coverage
07:44 < ningu> details are still unclear, however
07:44 < coderarity> zeromodulus: that's fine
07:44 < ningu> zeromodulus: right, so this[property] is not going to work
07:45 < AAA_awright> ningu: Yeah I see
07:45 < coderarity> zeromodulus: it works because you're using properties
07:45 < coderarity> ningu: no, it's in the prototype
07:45 < ningu> coderarity: yes, but it's also a callback
07:45 < ningu> in the constructor
07:45 < coderarity> do callbacks do .bind(null) or something?
07:46 < coderarity> i may have seen that but i'm fairly sure most people don't do that
07:46 < ningu> they certainly don't automatically bind the same 'this'
07:46 < ningu> unless you call bind
07:46 < coderarity> ohhh, right
07:47 < coderarity> this is beside the point, by any means
07:47 < zeromodulus> so then to avoid confusion, why don't I just make load accept an obj?
07:47 < coderarity> zeromodulus: you shouldn't put the callback in this anywayns
07:47 < coderarity> anyways*
07:47 < zeromodulus> and pass this
07:47 < jesusabdullah> I see it
07:47 < coderarity> and you should make things lambdas instead of creating named functions
07:47 < ningu> zeromodulus: if you change it to, this.load.bind(this)
07:47 < ningu> zeromodulus: that will work
07:47 < jesusabdullah> yes, ningu is right
07:47 < ningu> irrespective of whether this is a good design
07:48 < coderarity> yeah
07:48 < coderarity> ningu has the easy solution
07:48 < coderarity> i still suggest you use lambdas var self = this; stuff
07:48 < zeromodulus> this.load is undefined
07:48 < zeromodulus> how can that be?
07:49 < jesusabdullah> did you try console.logging this y/n
07:49 < zeromodulus> and find is undefined.
07:49 < zeromodulus> y.
07:49 < zeromodulus> undefined.
07:49 < zeromodulus> er
07:50 < ningu> zeromodulus: and you're calling new Foo() *after* defining the prototype, right?
07:50 < zeromodulus> No.
07:50 < ningu> well, then the prototype methods don't exist
07:50 < zeromodulus> maybe that's my problem.
07:50 < ningu> yeah, I said that like half an hour ago :P
07:50 < zeromodulus> But I thought I could call prototype methods from within a constructor!
07:51 < ningu> you can
07:51 < ningu> but the new Foo() has to be after those methods are defined
07:51 < ningu> not your function Foo() {} 
07:51 < zeromodulus> I just realized, I'm not even using the new keyword
07:51 < ningu> yeah, that might be an issue too :P
07:52 < zeromodulus> well, jeez...
07:52 < zeromodulus> uh...
07:52 < zeromodulus> oh wait.
07:52  * zeromodulus shits a brick.
07:53 < zeromodulus> hooray!
07:53 < AAA_awright> ...
07:53 < zeromodulus> all I needed to do was add a new keyword.
07:53 < AAA_awright> zeromodulus.
07:53 < AAA_awright> Just.
07:53 < AAA_awright> For our sanity.
07:53 < AAA_awright> Read the ECMAScript specification.
07:53 < ningu> haha
07:53 < ningu> or some tutorial on the js object model at least
07:54 < zeromodulus> oh wait, and the .bind(this)
07:54 < ningu> AAA_awright: do you know if there's anything else remotely like intrade?
07:54 < zeromodulus> needed that too.
07:54 < jesusabdullah> zeromodulus: https://gist.github.com/jesusabdullah/5150060 ftfy
07:54 < AAA_awright> ningu: Maybe something on Bitcoin, but idk
07:54 < ningu> yeah, I figured it might be bitcoin
07:54 < coderarity> zeromodulus: btw, look how easy it is to do if you just use lambdas: https://gist.github.com/anonymous/0de9001e936f4b749aee
07:54 < jesusabdullah> zeromodulus: stop fucking around with prototypes and just use closures, you're making this way way more complicated than it needs to be
07:54 < AAA_awright> ningu: If one doesn't exist, wanna make one?
07:55 < ningu> it seems to be a legally murky enterprise
07:55 < AAA_awright> Murky?
07:55 < jesusabdullah> zeromodulus: see how "this" is completely gone in this code? PROBLEM SOLVED
07:55 < ningu> well, my employer actually already has something like it
07:55 < AAA_awright> I... don't see... then why do you ask?
07:55 < jesusabdullah> also zeromodulus callbacks always have "err" as the first param by convention, everyone will dislike your code if you don't follow that convention
07:56 < ningu> AAA_awright: it's pretty different from intrade
07:56 < AAA_awright> How so?
07:56 < AAA_awright> ningu: I'm asking, want to make something like InTrade
07:56 < AAA_awright> But you know, better
07:56 < ningu> but similar enough that I wouldn't want to make another thing like it :)
07:56 < jesusabdullah> zeromodulus: you follow?
07:56 < ningu> AAA_awright: http://longbets.org/
07:56 < zeromodulus> jesusabdullah: eh, yeah.
07:57 < zeromodulus> so are those kind of methods called privileged methods?
07:57 < jesusabdullah> no, they're called functions
07:57 < zeromodulus> @jesusabdullah 
07:57 < ningu> they are just functions defined within the scope of another function
07:57 < ningu> hence the talk of lambdas
07:57 < zeromodulus> eh...
07:57 < coderarity> did you read crockford's stuff?
07:57 < ningu> there should be an intro to this called mary had a little lambda
07:58 < jesusabdullah> only consider constructors and prototypes if there's a strong sense of "instances" of a "Thing"
07:58 < zeromodulus> I tried something like what you pasted jesusabdullah, didn't work :P
07:58 < ningu> zeromodulus: then you wrote it wrong.
07:58 < jesusabdullah> One day zeromodulus ran into a problem and though, "I know I'll use prototypes"
07:58 < jesusabdullah> then zeromodulus had two problems.
07:58 < AAA_awright> ningu: That's not anything like a prediction market
07:59 < ningu> AAA_awright: there is a family resemblance
07:59 < ningu> but yeah
07:59 < zeromodulus> but I thought prototypes were cool. :(
07:59 < AAA_awright> That's a public bet... thing
07:59 < coderarity> i'm officially mad at javascript
07:59 < AAA_awright> coderarity: Try ECMAScript instead
07:59 < ningu> zeromodulus: they are cool. but you use the right tool for the job.
07:59 < jesusabdullah> They have their uses zeromodulus but only those uses
08:00 < coderarity> AAA_awright: i'll probably still be mad
08:00 < jesusabdullah> zeromodulus: in this case it was adding useless clutter to what you were doing
08:00 < zeromodulus> okay, well, jeez, I had a feeling I could do it like this all along.
08:00 < coderarity> i'm going back to the safety of lisps
08:00 < ningu> AAA_awright: yeah, but it has a similar idea to people being held to their predictions and there being real-world consequences
08:00 < zeromodulus> :|
08:00 < jesusabdullah> zeromodulus: constructors/prototypes only really make sense if you're doing something like
08:00 < zeromodulus> just stuffing the methods I need right in my constructor.
08:00 < ningu> zeromodulus: you *can*, doesn't mean you should
08:00  * coderarity goes to #scheme
08:00 < jesusabdullah> var pony = new Pony(); pony.prance(); /* and pony.prance modifies the state of pony in-place */
08:00 < zeromodulus> jesusabdullah: yeah, that's what I thought, useless clutter, until someone convinced me they were cool and awesome.
08:01 < ningu> prototypes are very useful
08:01 < ningu> for what they're useful for
08:01 < zeromodulus> so, as a rule of thumb, only if I'm modifying state with a method, should it be considered to be a prototype method?
08:02 < jesusabdullah> okay zeromodulus what other languages have you worked with? Have you done OOP elsewhere?
08:02 < zeromodulus> Ruby.
08:02 < AAA_awright> http://ecma-international.org/ecma-262/5.1/
08:02 < AAA_awright> Before the channel explodes
08:02 < jesusabdullah> Okay, so ruby has classes yes?
08:02 < AAA_awright> Read it
08:02 < zeromodulus> jesusabdullah: yes.
08:03 < jesusabdullah> lol^^
08:03 < ningu> jesusabdullah: I think there may have been a divide by zero exception when he tried his zeromodulus that interrupted the learning process
08:03 < jesusabdullah> okay, so, presumably ruby classes are fairly sweet
08:03 < zeromodulus> eh, sure.
08:03 < jesusabdullah> but you wouldn't use ruby classes where straight functions would suffice
08:04 < zeromodulus> eh, okay.
08:04 < zeromodulus> sure.
08:04 < zeromodulus> AAA_awright: but it's so dense... t.t
08:04 < jesusabdullah> prototypes are "cool" in that their semantics are considered more fashionable than those of classes
08:05 < jesusabdullah> but at the end of the day they're solving a very similar problem
08:05 < AAA_awright> zeromodulus: It has literally everything you could ever want to know
08:05 < AAA_awright> Literally
08:05 < zeromodulus> fashionable = cool?
08:05 < chaobin> no
08:05 < ningu> prototypes are just another way to solve the same problem that classes solve
08:05 < zeromodulus> yeah, that's what I thought.
08:05 < ningu> but your gist was not an instance of that sort of problem, as far as we can tell
08:06 < jesusabdullah> zeromodulus: at the end of the day, you need to either read that spec or learn what's in it through other means. It's fairly complex and there's no way around that.
08:06 < jesusabdullah> zeromodulus: so it's either read the spec, or read and write a bunch of code and trial/error it
08:06 < zeromodulus> So this is the latest and greatest JavaScript manual?
08:06 < jesusabdullah> zeromodulus: either way, it's on you
08:07 < zeromodulus> Even cooler than the MDN JavaScript reference?
08:07 < jesusabdullah> zeromodulus: it's the spec, the place where they wrote down what ecmascript *is*
08:07 < ningu> it's the language spec
08:07 < jesusabdullah> if your implementation of ecmascript doesn't act the same as that spec, it's not ecmascript
08:07 < ningu> unlike ruby there are many implementations of ecmascript/javascript
08:07 < jesusabdullah> or, at least, it's a broken implementation
08:08 < Pitel_IPEX> http://pastebin.com/7AXD08Ai why is npm from git master failing?
08:08 < jesusabdullah> ningu: there are a few implementations of ruby yes? The basic c ruby, the one that runs on the jvm, possibly others?
08:08 < ningu> jesusabdullah: yeah, that's true actually. I only know of the jvm one
08:08 < jesusabdullah> ningu: python at least has cpython, jython, stackless, pypi, possibly others
08:08 < ningu> you mean pypy
08:08 < jesusabdullah> yes, pypy
08:08 < zeromodulus> phusion passenger is another ruby one
08:08 < ningu> pypi is the package repository
08:08 < jesusabdullah> pypi is the cheeseshop
08:09 < jesusabdullah> oh yeah, I hear calling it the cheeseshop in #python is a good way to troll them
08:09 < ningu> anyway, I think when most people think of ruby they think of the original C one
08:09 < jesusabdullah> SO I'VE HEARD I avoid that place like the plague
08:09 < AAA_awright> Really?
08:09 < AAA_awright> So what do I have to say?
08:09 < DeathByDoubleDip> i think there's a Ruby implementation in PyPy as well. Topaz, unless i'm screwing up the name
08:09 < ningu> but presumably there is also a ruby spec of some sort
08:10 < AAA_awright> "Why does this package suck so much, is there another cheeseshop?"
08:10 < jesusabdullah> naw, in the case of ruby cruby "is the spec"
08:10 < jesusabdullah> AAA_awright: "the cheeseshop" was the old name for pypi, or "PYthon Package Index"
08:10 < jesusabdullah> AAA_awright: at some point they decided that "the cheeseshop" was too silly and did a rebrand
08:10 < ningu> I think ruby, python, and perl all have reference implementations rather than specs
08:10 < ningu> I suppose there's a perl6 spec now
08:10 < jesusabdullah> Yeah, that's definitely the case for python
08:11 < ningu> I don't know why it took python so long to get package management remotely usable
08:11 < jesusabdullah> wait
08:11 < jesusabdullah> they got package management usable?
08:11 < jesusabdullah> o__o
08:11 < ningu> I said remotely
08:11 < jesusabdullah> *rimshot*
08:12 < ningu> pip install/uninstall, and it takes care of dependencies
08:12 < ningu> that's kind of the bare minimum
08:12 < ningu> but it used to be worse
08:12 < jesusabdullah> yeah, except pip was a third party thing to bring some sense make to the scene
08:12 < penzur> jesusabdullah: python will bite you
08:12 < jesusabdullah> last I heard distutils2 was still being written
08:12 < jesusabdullah> last I heard the distutils2 team was even more hated than tc39
08:13 < ningu> python has some nice language constructs actually, but the whole language feels a bit... cobbled together to me
08:13 < jesusabdullah> I read an article a few weeks ago about how shitty python's docs are
08:13 < AAA_awright> Half our functionality will be functions, the other half will be methods
08:13 < penzur> so node.js > python?
08:13 < jesusabdullah> and about the "head in the sand culture" that the help channels have
08:13 < ningu> was that the reddit stack overflow link?
08:14 < AAA_awright> penzur: If you mean ECMAScript, leaps and bounds
08:14 < jesusabdullah> the thing is, I think the "head in the sand culture" applies to the language design too imo
08:14 < AAA_awright> It happens here too...
08:14 < ningu> a study of developers getting their docs from stack overflow 
08:14 < jesusabdullah> just look at all the effort put into justifying broken inline functions
08:14 < jesusabdullah> ningu: naw it was a blog post
08:14 < jesusabdullah> ningu: http://joepie91.wordpress.com/2013/02/19/the-python-documentation-is-bad-and-you-should-feel-bad/
08:15 < jesusabdullah> seriously though, rather than fix inline functions guido spent years of his life defending his decision
08:15 < ningu> there was one guy in particular on #python who was very unhelpful
08:15 < jesusabdullah> and then they added decorators
08:15 < ningu> otherwise people helped some
08:15 < jesusabdullah> was that the bong hits guy ningu ?
08:15 < ningu> eh? no idea
08:16 < kuja> #python has strict rules about a lot of what goes on in there, so don't be too surprised
08:16 < jesusabdullah> this one really unhelpful dude always referred to bong hits in his broken examples
08:16 < jesusabdullah> kuja: I was on topic that time
08:17 < ningu> jesusabdullah: he rarely gave examples, he just said pissy things to people
08:17 < jesusabdullah> kuja: I remember what I was doing, I wanted to do the python equivalent of x[y] where x is an instance (so, objects not dicts)
08:17 < ningu> oh, wait... I'm confusing channels
08:17 < ningu> this was a different channel
08:17 < jesusabdullah> kuja: I had to spend 5 minutes explaining to the guy that, yes, I really really did want to do that
08:17 < ningu> same time I was doing python though
08:17 < jesusabdullah> kuja: and that no, "but that's not pythonic" was not a valid answer
08:17 < kuja> jesusabdullah: yeah, being "on topic" isn't enough, you do often have to justify what you're trying to accomplish.
08:18 < AAA_awright> I haven't been to python, but #ubuntu and #mongo are particularly cesspools of idioticy
08:18 < jesusabdullah> I shouldn't have to justify something like that
08:18 < ningu> I had some people help me on #mongo
08:18 < kuja> jesusabdullah: reason being, they are really serious about enforcing best practices. if they think what you're trying to do is abnormal or unpython-like, they'll often question your approach
08:18 < strk> how do I access docs for a specific version of nodejs ? can't find links to version-specific ones
08:18 < jesusabdullah> yes, which is a terrible attitude
08:18 < jesusabdullah> just terrible
08:18 < kuja> that's the way that channel operates
08:18 < ningu> kuja: right... for example, the ternary operator is evil
08:18 < kuja> not just one guy, but the whole channel
08:18 < jesusabdullah> I agree with what you're saying, I'm just saying it's a really really shitty attitude
08:19 < jesusabdullah> naw, the one guy in particular just had the crappy "bong_hits" snippets that didn't answer any questions
08:19 < kuja> haha
08:19 < jesusabdullah> It's like
08:19 < ningu> jesusabdullah: he should hang out on snack overload
08:19 < jesusabdullah> bro, I like bong hits as much as the next guy
08:19 < jesusabdullah> but c'mon
08:20 < jesusabdullah> snack overload?
08:20 < ningu> jesusabdullah: I just like imagining what that site would be
08:20 < ningu> strk: http://nodejs.org/docs/v0.8.12/api/index.html
08:20 < ningu> for example
08:20 < jesusabdullah> oh so someone was asking earlier if javascript > python and honestly I would say, "not always"
08:20 < AAA_awright> Nonsense
08:20 < jesusabdullah> javascript has its own warts, they're just different is all
08:20 < AAA_awright> What warts
08:20 < ningu> it depends on what you are doing and what libraries you need
08:21 < ningu> many things that python has don't exist or only exist in much poorer form in npm
08:21 < AAA_awright> The only time I've come across a problem, I looked into why, and it's like "Oh, that makes sense"
08:21 < ningu> AAA_awright: yes, but it's not just about language design
08:21 < jesusabdullah> AAA_awright: bizarre coercion rules and confusing behavior of "this" come to mind
08:21 < AAA_awright> It's not so much that ECMAScript does things backwards, more so that other languages are teaching people to do backwards things
08:21 < jesusabdullah> AAA_awright: don't get me wrong, on some level the rules totally make sense
08:21 < AAA_awright> jesusabdullah: Well how else are you going to handle "this"
08:21 < AAA_awright> have this1, this2, etc?
08:21 < ningu> AAA_awright: https://www.destroyallsoftware.com/talks/wat
08:22 < AAA_awright> ningu: I'm familiar
08:22 < AAA_awright> How many times do you need to subtract an array from an object?
08:22 < AAA_awright> About, um
08:22 < ningu> hehe
08:22 < jesusabdullah> I'm just saying AAA_awright in python that shit would straight throw
08:22 < ningu> well the fact that you can do it at all is strange
08:23 < jesusabdullah> and python's classes are crazy explicit about what 'self' your self is
08:24 < jesusabdullah> and c bindings in python have less overhead than in v8 (not a property of the language per se, obvs, but still important in terms of which you would choose to use)
08:24 < ningu> so python is good if you want to know thyself?
08:25 < jesusabdullah> personally? I'd choose python over javascript for the ecosystem, not the language
08:25 < jesusabdullah> I hate more in python than I like
08:25 < jesusabdullah> these days
08:25 < jesusabdullah> oh, something else to consider
08:26 < jesusabdullah> iterators and generation of ranges and stuff
08:26 < jesusabdullah> is usually way more succinct in python
08:26 < chaobin> aren't those good stuff in python?
08:26 < jesusabdullah> yes
08:26 < chaobin> oh, yes they are
08:26 < jesusabdullah> that's what I'm saying
08:26 < ningu> also list comprehensions
08:26 < jesusabdullah> [ 2*x for x in range(5) ] vs, well
08:26 < ningu> yeah
08:26 < jesusabdullah> jesus
08:27 < chaobin> after 2.7, there will be dict comprehension and set comprehensions
08:27 < jesusabdullah> var xs = []; for (var x = 0; x < 5; x++) { xs.push(2 * x); }
08:27 < jesusabdullah> I guess
08:27 < jesusabdullah> no built-in range operator, no lcomps (yet)
08:27 < jesusabdullah> lcomps could be in es6 for all I know
08:27 < ningu> one thing I don't quite get is the tuple/set/array distinctions in python -- whether that really buys you anything
08:28 < chaobin> and it is loud and clear that developers now are adapting much in using js
08:28 < jesusabdullah> I feel that ningu
08:28 < chaobin> this adaptation is possible because js was made, at some point in a versatile way
08:28 < jesusabdullah> I think tuples buy you an extra implicit length check
08:28 < jesusabdullah> though it's been a while
08:28 < jesusabdullah> and sets can be useful sometimes
08:29 < ningu> since you just want to check if something is in or out... in js you'd have to use an object
08:29 < jesusabdullah> that said I'd prefer to conflate the 3
08:29 < jesusabdullah> ningu: also, objects --> dicts and objects
08:29 < ningu> yeah, that too
08:29 < jesusabdullah> personally I like conflating the two
08:30 < ningu> and since arrays in js are objects they can have attributes like anything else
08:30 < ningu> which is kind of weird, but cool
08:30 < jesusabdullah> yeah
08:30 < jesusabdullah> alright well this was an hour long tangent on my night I didn't expect
08:31 < jesusabdullah> I'd better get going towards bed
08:31 < jesusabdullah> good talkin' y'all
08:31 < ningu> night
08:32 < jesusabdullah> orite
08:32 < AAA_awright> As I was saying
08:32 < AAA_awright> >> Math.max()
08:32 < purr> AAA_awright: (number) -Infinity
08:32 < AAA_awright> ... come on
08:32 < AAA_awright> There we go
08:35 < zeromodulus> I just remembered why I was adding methods to my object's prototype in the first place.
08:36 < zeromodulus> Because I was adding event.EventEmitter capabilities to it in an attempt to solve my problem.
08:36 < ningu> but that wasn't your problem
08:36 < ningu> it was callbacks :P
08:36 < jesusabdullah> also, check this out:
08:36 < jesusabdullah> var object = new EventEmitter()
08:37 < jesusabdullah> object.myVeryOwnMethod = function () {}
08:37 < zeromodulus> yes, it was callbacks.
08:37 < [AD]Turbo> hola
08:37 < jesusabdullah> you don't need to touch the ctor or prototype(s) for that
08:37 < jesusabdullah> or even this, since you have direct access to the instance
08:37 < zeromodulus> sweet.
08:37 < zeromodulus> that's good to know.
08:38 < jesusabdullah> A lot of times just making the object and hacking it is quicker, easier, and more straightforward than a util.inherits or similar.
08:38 < jesusabdullah> in fact most of the time this is the case
08:39 < Havvy> Am I the only person who does inheritance manually instead of using util.inherits?
08:39 < zeromodulus> yay, my code still works.
08:40 < jesusabdullah> Havvy: lol maybe? XD
08:40 < zeromodulus> now I can sleep.
08:41 < jesusabdullah> Havvy: How do you do it ooc?
08:41 < zeromodulus> thanks everyone, until next time...
08:41 < jesusabdullah> Havvy: I mean, the thing with util.inherits is that it copies the properties over onto a new prototype
08:41 < jesusabdullah> Havvy: right?
08:42 < Havvy> If there's properties I need from the object, I do   SuperclassConstructor.call(this, other, arguments) in the constructor of the subclass. Though I've not needed to do that yet.
08:42 < Havvy> And after the constructor, I do Subclass.prototype = new SuperclassConstructor();  Subclass.prototype.constructor = Subclass;
08:43 < ningu> you shouldn't re-create the prototype every time you instantiate an object
08:44 < Havvy> ningu: I don't?
08:45 < Havvy> Ah. I was ambigous. After the constructor declaration**
08:45 < ningu> oh, ok
08:45 < ningu> that makes more sense then
08:45 < Havvy> var Under = function () { Over.call(this); } Under.prototype = new Over(); Under.prototype.constructor = Under;
08:46 < ningu> won't pull in static methods
08:47 < Havvy> Of course it won't. And I wouldn't expect it to.
08:47  * Havvy wonders if `Object.create(Over.prototype)` would be better than `new Over()`
08:51 < jesusabdullah> Havvy: word, I can dig it
08:52 < Havvy> ningu: Can you imagine any adverse affects of using Under.prototype = Object.create(Super.prototype)?
08:52 < ningu> Havvy: not really. 
08:53 < ningu> I think that does basically the same as what you did except for calling the constructor
08:54 < ningu> actually I'm kind of confused by Under.prototype = new Over(); should work
08:54 < ningu> s/by/why/
08:54 < ningu> because presumably new Over() returns something which has a prototype property... so that would be Under.prototype.prototype
08:54 < Havvy> It creates an object chain of   Under.prototype -> Over() -> Over.prototype
08:55 < Havvy> Err, prototype chain
08:55 < genazt> hi
08:55 < genazt> does someone of you use the aes 256 cbc crypt in nodejs ?
08:56 < genazt> I have a crypter: https://gist.github.com/geNAZt/5150353
08:57 < genazt> This is the decrypter: https://gist.github.com/geNAZt/5150357
08:57 < ningu> Havvy: ok, I guess that makes sense.
08:58 < genazt> and i get this error: http://hastebin.com/ludisafiso.txt
08:58 < genazt> with the same password in the crypter and in the decrypter
08:58 < ningu> Havvy: but it means that if Over sets any this.foo values, those will become part of Under's prototype
08:58 < ningu> even before the constructor is called I assume
08:59 < ningu> yep, I just tried it
08:59 < ningu> Havvy: http://pastebin.com/hNSZekUQ
08:59 < Havvy> ningu: Yep. Which is why you call Super in Under's constructor.
09:00 < _eddyb_> any idea what is going on when nprof reports 50% in libv8.so, but more than 40% isn't anywhere to be found? - the report being full with insignifiant LazyCompile's
09:01 < Havvy> ningu: See http://pastebin.com/imAUQTyV for example.
09:02 < bradleymeck> _eddyb_: is it trying to count when the process is sleeping?
09:04 < ningu> Havvy: right. I'm just saying it's a bit confusing to have those things already set even before you call the constructor, even if you do end up calling it and all is well in the end
09:04 < ningu> I expect to enter the constructor with a blank slate except for prototype 
09:04 < bradleymeck> _eddyb_: it could also be picking up the fact that code generated by the JIT is not going to have a location
09:04 < _eddyb_> bradleymeck: I run my node app with --prof, and I don't do anything fancy. nprof is just to annotate v8.log
09:05 < ningu> which... well, that's what's happening but you've made the child class inherit part of its prototype from an instance
09:05 < _eddyb_> bradleymeck: ugh, nprof has a JS section, which ammounts to 5-10% of total
09:07 < Havvy> ningu: If it helps, I usually only inherit from objects with no properties.
09:26 < faceleg> bah
09:27 < faceleg> if DRY would mean obfuscating things comparitively
09:27 < faceleg> is it better to just RY?
09:27 < faceleg> is an extra layer level of rabbit-hole worth the 2-4 lines saved?
09:29 < _eddyb_> faceleg: I write my code on two basis: I can read it and it's not painfully slow
09:29 < faceleg> _eddyb_: I like you.
09:29 < faceleg> I like this saying: "If debugging is twice as difficult as writing code, then your cleverest code is by definition impossible to debug"
09:30 < _eddyb_> if possible, it should make sense even if I don't look at it for months. and I comment to document my laziness to implement corner cases
09:33 < faceleg> _eddyb_: yeah I tend not to comment except for function / class headers giving overview of the purpoise
09:33 < faceleg> lol, purpose
09:33 < ningu> faceleg: do you follow the porpoise-driven life?
09:33 < faceleg> surprisingly, learning Cocoa (and reading Code Complete) learned me this. Objective C is quite readable once you grok
09:34 < faceleg> porpoise driven development (PDD)
09:34 < ningu> sounds like a winner
09:40  * kevindish is happy
09:42 < SAHarvey> I would like to submit a pull request for an existing npm package. Once I've checked out the git repo locally and made the changes how can I build and use the modified package?
09:43 < kevindish> You can use "npm link"
09:44 < kevindish> go to you modified package, console: "npm link", go to your app, console "npm link MODULENAME"
09:44 < kevindish> then you can use it as require('MODULENAME')
09:44 < genazt> what can i do against: wrong final block length
09:44 < genazt> when i use a aes-256-ecb decipher
10:08 < davidbanham> So I'm using Request.get and piping the data to the stdin of a child_process. That's working fine, but my listener for req.on('data') is never getting called. Is it something to do with the pipe?
10:10 < alchimis_> hi guys, I have a nodejs app, I use expressjs, mongoDB and socketio, now my app is running on 3 server, I have a server that play the role of load balancer to balance the requests among these 3 servers, I have also  a server that runs mongoDB
10:11 < alchimis_> my now that I have load balancer, when i test my app the socket io is not working
10:11 < alchimis_> so my question is, how to make run socket io in this scenario?
10:12 < mzelinka> anyone know of good color scheme for javascript for Sublime Text?
10:12 < faceleg> sunburst
10:13 < faceleg> for all the things
10:13 < davidbanham> alchimis_: What are you using to distribute the load? Does it support all the transports that socket.io expects to be able to use?
10:13 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:15 < alchimis_> I am using http-proxy
10:16 < alchimis_> davidbanham: this one https://github.com/nodejitsu/node-http-proxy
10:16 < faceleg> alchimis_: from it's name I guess it proxies http traffic only
10:17 < faceleg> socket.io prefers ws:// AFAIK
10:17 < faceleg> alchimis_: I'm wrong
10:17 < davidbanham> No, it supports websockets
10:17  * faceleg pleads for everyone to forget the last 2 minutes
10:17 < faceleg> alchimis_: have you reviewed this example: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/websocket/websocket-proxy.js
10:18 < davidbanham> alchimis_: It looks like that should handle socketio fine. How are you determining which server to route the traffic to? Simple round-robin or do you have some kind of stickiness?
10:19 < alchimis_> I use this example https://github.com/nodejitsu/node-http-proxy/blob/master/examples/balancer/simple-balancer.js
10:19 < davidbanham> Hmmm. Shelling out to system tar seems to be a lot more efficient than using the pure node tar implementation. Shame, because it's gross, but I need the cycles.
10:19 < davidbanham> alchimis_: So, // A simple round-robin load balancing strategy. 
10:20 < davidbanham> alchimis_: Socketio expects to handshake with one server, establish a session, then have all subsequent communication occur with that server.
10:20 < davidbanham> alchimis_: It sounds like what you probably have happening is client connects to load balancer and is sent to server A.
10:20 < asterokid> what is the best way to work on two node package that have dependency. By this I mean both package A and B are developed by myself, and package A needs B. If I had B to the dependencies in the package.json file, is is not going to mess up my work in package B on npm update etc...?
10:21 < alchimis_> yeah
10:21 < davidbanham> Server A sends back a response and all is fine, socketio then tries to establish a websocket connection, but this time the balancer sends it to server B.
10:21 < davidbanham> Server B has never heard of the client, hasn't shaken hands with them and has no idea what the hell is going on so it freaks out.
10:21 < alchimis_> yeah, u r right
10:21 < alchimis_> so, how can I solve this problem?
10:21 < davidbanham> You need to ensure that a subsequent request gets routed to the same server it established a session with originally.
10:22 < alchimis_> how is it possible? i mean any example or link
10:23 < davidbanham> alchimis_: There are many ways to solve the problem. The first one that comes to mind would be to set a cookie on the client that contains the server handling the request, that the load balancer then reads and routes the request appropriately.
10:25 < alchimis_> actually now i am using https://github.com/kcbanner/connect-mongo to save the sessions to db 
10:25 < asterokid> Maybe the devDependencies property of the package.json file is meant for what I am talking about... But not sure...
10:26 < davidbanham> asterokid: I don't see how it would interfere unless your directory structure is a bit weird.
10:26 < alchimis_> davidbanham: about ur solution to save cookie on the clinet that contains the server handaling the requests, how i can do it, any module that do it in this case
10:26 < davidbanham> alchimis_: Yeah you could leverage that, but making a call to the db every time you needed to decide which server to route to would be pretty slow.
10:27 < alchimis_> yeah u r right
10:27 < davidbanham> alchimis_: There may well be modules out there, but none that I am familiar with. If I was doing this I'd probably just use the cookie module to parse and serialise the cookies, then it's a pretty simple from that point.
10:28 < alchimis_> any example that load balancer read the cookie and decide to which server redirect
10:28 < davidbanham> alchimis_: Word of warning, you may get bitten by socketio later. It only sends cookies on its websocket requests if you tell it to. It's just a conf option in your client side code.
10:28 < davidbanham> alchimis_: No examples that I am aware of, but I'm sure they're out there.
10:29 < alchimis_> but instead if u run a server onle for socket, then what is the scenario?
10:29 < asterokid> davidbanham, ok so I imagine that package B is a git clone leaving in the ignored node_modules of package A right? I suppose I am worried that if I try to do npm update from package A, it will redownload  and overwrite my package B with the one available on NPM.
10:29 < alchimis_> so all the clients speak with the same socket server
10:30 < davidbanham> alchimis_: No, not necessarily. All the clients speak with either server A, B, or C, but if client James first speaks to server A, he always speaks to server A for the remainder of that session.
10:30 < asterokid> Moreover davidbanham it seems that if I do npm install somePackage in package B they go to the node_modules folder or package A.
10:30 < davidbanham> asterokid: Yep, it would get overwritten. The solution would be to not store package B there.
10:31 < davidbanham> asterokid: New folders are cheap. mkdir ../packageB
10:31 < asterokid> davidbanham, how can you not store it there if you need to dev both package at the same time?
10:31 < alchimis_> sorry, may be i couldnt manage to explain well, but consider the case that  I have one server that is run the socket io, but so many server that runs the app, so clients for real-time stuff, always speak with one server which is the socket io server
10:32 < shmoon> hey guys
10:32 < shmoon> a site tries to make a POST request to my expressjs app but my app yields this error http://pastie.org/6469876 why so?
10:32 < alchimis_> so u think seprating the socket io to another server is not a good idea
10:32 < davidbanham> asterokid: That might be a symptom of something else. If you really need to be modifying them both concurrently, I'd just require it explicitly from the separate directory. var packageB = require('../packageB') or '/home/asterokid/packageBdevdir' etc
10:33 < faceleg> socketio needs the http session for auth, doesn't it?
10:33 < davidbanham> alchimis_: Oh yeah, you could do it that way. No idea what your application does so IDK which would make more sense. If you don't need to horizontally scale the socketio server then yeah, that would work.
10:33 < davidbanham> faceleg: Yeah, it does the initial handshake and auth over http
10:34 < asterokid> davidbanham that make sense. Or you could only add it to the package.json depencies on release.
10:34 < davidbanham> asterokid: That's also an option, but you're way more likely to get forgetful and screw it up.
10:35 < Nopik> hi there.. is tehre any known problems with event emitters in v0.10.0? I'm using restler and it seems that either event emitter or just something more basic (like function prototypes) has gone weird in 0.10.0
10:35 < alchimis_> my application put some info on google map (in real time) and the possibility that users chat, one-by-one, it is not finished but yes this is what should do the app
10:35 < asterokid> davidbanham: would have to be an automatic baking otherwise yes its dangerous
10:36 < davidbanham> shmoon: Could be anything, really. console.log(req) would be a good starting point. Have a look through the data they're sending you and see if anything's broken.
10:36 < asterokid> davidbanham: thanks for making this clearer
10:36 < j3lte> I have a quick question, anyone that can help me?
10:36 < davidbanham> asterokid: No probs.
10:36 < shmoon> davidbanham: i did, but othing logs :(
10:37 < shmoon> nothing
10:38 < j3lte> i have require('https') in my code, but a npm install with https (in package.json) results in: 404 'https' is not in the npm registry <--- any ideas, what am I doing wrong?
10:38 < Nopik> here is description of my problem, can anyone spend 3 minutes trying to confirm or deny the problem, please? https://gist.github.com/Nopik/5150927
10:38 < davidbanham> shmoon: Having another look at the error, looks like there might be something seriously wrong with the request. What's happening on line 125 of proto.js ?
10:38 < j3lte> I use node v0.8.22 and npm v 1.2.14
10:39 < davidbanham> j3lte: https is part of core. You don't need to install it with npm because it's already bundled with node.
10:39 < shmoon> davidbanham: ok console.log(req) does dumps a big object
10:39 < shmoon> davidbanham: maybe this https://github.com/senchalabs/connect/blob/master/lib/proto.js#L125
10:40 < davidbanham> shmoon: Oh so it does get there? So have a look through the req object and see if there's anything wrong with the data you're being sent. Anything your code doesn't expect.
10:40 < Nopik> could anyone with node 0.10 please try running this https://gist.github.com/Nopik/5150927/raw/9ad645d9f9d0c7d8828856d4850cecd1873c2a8e/restler.js and paste me the output? I want to confirm whether i'm experiencing something weird, or it is a more common problem
10:41 < j3lte> davidbanham: ok, I get that. But how do I define the var https? (now it's https = require('https'))
10:42 < shmoon> davidbanham: huge object nothing seems wrong tho
10:45 < j3lte> oh never mind, I got it! Thanks davidbanham
10:45 < davidbanham> j3lte: Just like that. It's done.
10:45 < davidbanham> j3lte: no probs
10:45 < j3lte> :)
10:45 < j3lte> (had to remove it from package.json, figured it)
10:46 < douglaslassance> What is supposed to be the difference between a lib and a src folder. It seems they are used sort of arbitraly in the various packages I had the chance to look out. When to use on or the other?
10:48 < shmoon> davidbanham: oh man i am sorry npo nothing logs :(
10:49 < davidbanham> shmoon: That's cool, but it sounds like there's something really fundamentally wrong with the request. Not "I expected a string but got an int" but "The packets are malformed" or something. What's generating the request?
10:50 < shmoon> i am trying to add my details that requires this url in an API service, they try to verify by sending POST request to my express app. but express throws this error
10:52 < davidbanham> shmoon: Can you post your code?
10:53 < korilo> gmorning node!
10:53 < shmoon> davidbanham: this is my code http://pastie.org/6470047 that gets loaded in a server.coffee and the exp[ress app is passed to it
10:57 < davidbanham> shmoon: I dunno, man. Got any weird and wonderful middleware loaded elsewhere in the app?
10:58 < kevindish> what do people prefer? test driven development or behavior driven developemnt? :)
10:58 < vwoo> i just go with development
10:59 < kevindish> That is also what i am doing now, but i just find that i change code and it den crashes someplace else that i do not see before it is too late
11:00 < faceleg> when that jhappens
11:00 < vwoo> if you find that this happens often you might want to consider TDD
11:00 < faceleg> write a test proving it broke
11:00 < faceleg> before you fix it
11:00 < faceleg> to ease yourself into testing
11:01 < faceleg> attempting to test everyting in a project without any tests is impossibly slow
11:01 < vwoo> but honestly if you are changing code and breaking unrelated parts of your app, maybe consider if your design is sound?
11:03 < kevindish> vwoo: Yeah, your right. I am obivious not that good yet :P How do you structure your code? :)
11:04 < kevindish> faceleg: I think testing is big chunk to shallow, because there is a lot of things you have to know.
11:04 < vwoo> thats a hard question to answer right here. i would say that one thing i try to look for is "If someone had to read this code, what would surprise them?"
11:04 < faceleg> kevindish: ys
11:05 < Industrial> How come when I do this I get a `fatal: Authentication failed.`? `cd hub;fleet hub --port=9000 --secret=123`, `cd drone0;fleet drone --hub=localhost:9000 --secret=123`, `cd somegitrepo;fleet deploy --hub=localhost:9000 --secret=123`?
11:05 < Industrial> (with substack/fleet)
11:08 < faceleg> kevindish: at least testing in js is not the same as testing in php
11:09 < davidbanham> Industrial: That does seem strange. Best suggestion I can offer is to try a fleet.json file instead of specifying on the command line and see if that changes the behaviour.
11:09 < Nopik> yeah, apparently there is a bug in restler, using function prototypes in wrong way, which is exposed in node v0.10 ;(
11:10 < Industrial> I started out with that, getting this error. I specified it all as flags to make it as verbose a problem as possible.
11:11 < Industrial> Maybe I should write a ticket.
11:12 < davidbanham> Industrial: I replicated the behaviour with secret=123, but secret=sasasafsa worked.
11:12 < davidbanham> Maybe there's some password complexity checking built in?
11:13 < Industrial> Maybe it just needs a .toString() somewhere ..
11:13 < Industrial> and so the hunt began ..
11:26 < Industrial> https://github.com/substack/fleet/issues/43
11:31 < faceleg> if I have an array, and I native forEach it, is that OK?
11:32 < faceleg> Or must one async.each *everything*?
11:32 < faceleg> a.forEach(function(entry) { someasyncfunction(a, callback); }) <--- is that OK?
11:32 < faceleg> or is this considered blocking
11:35 < genazt> is someone here that knows the crypto module ?
11:35 < genazt> i have a error with it and i dont know how to solve it
11:44 < mzelinka> hello, I am starting with express, in my server.js file I have: "var express = require('express');", and when I run "node server.js" it says: "Error: Cannot find module 'express'", wtf (I installed it globaly)?
11:46 < bnoordhuis> mzelinka: globally meaning npm install -g? that's for binaries, really, not modules
11:46 < bnoordhuis> just `npm install express` in your application directory
11:47 < mzelinka> broordhis: ok thanks
11:50 < goose1> My deploy script gets the Git repo and starts executing steps, but sometime i also update the deploy.js iteself. What is the typical solution to this? Can i re-launch the script from inside node? ( i would prefer w\o recursive process forking)
11:58 < Industrial> Why does my package.json contain a gitHead entry after a git init? Do I need to maintain this field myself?
12:00 < goose1> @goose1 well, i guess since everything is already monitored by upstart. probably what i would do is to have a deploy.conf.txt where i push meta instructions if needed and clear it afterwards, then just restart the process.
12:07 < Industrial> Can I do this in a package.json: "dependencies": {"utils": "git:/../lib/utils"}
12:07 < Industrial> I'm still in a local development phase so I dont have a central git server set up ..
12:09 < context> industrial: then throw it in node_modules until then.
12:10 < Industrial> but what if its a library that I'm also writing and the clients/users of the library are many
12:12 < Industrial> would love for npm tto just take the master of the head of the library project when I call update :-).
12:12 < Industrial> or I could symlink it ..
12:12 < Industrial> no that would not work with fleet :(
12:12 < Industrial> fleet also does not check out submodules
12:16 < faceleg> bnoordhuis: are you there?
12:16 < korilo> yahiiiiii http://www.indiegogo.com/projects/tern-intelligent-javascript-editing?c=activity
12:16 < korilo> 15k raised!!!
12:17 < bnoordhuis> faceleg: yes
12:17 < korilo> can't wait for the ST2 plugin
12:17 < Industrial> context: oh I just git clone the lib insode the node_modules dir of each user/client you mean?
12:18 < faceleg> bnoordhuis: I want to bind the http://libgit2.github.com/libgit2/#HEAD/group/diff/git_diff_foreach function, but don't think I can do it with the uv_queue_work, work, after work idiom I'm now familiar with
12:18 < Industrial> korilo: I cant believe eclipse is before webstorm..
12:18 < faceleg> bnoordhuis: from this document: http://nikhilm.github.com/uvbook/threads.html#inter-thread-communication I infer that I should use uv_async_t & uv_async_init to allow my work method to send diff data back to JS
12:19 < Industrial> since it has a decent vim plugin :P actually the most decent outside of vim, imho.
12:19 < faceleg> bnoordhuis: am I travelling down the correct path in assumptionland here?
12:25 < korilo> Industrial, lol true but eclipse has a very largish community around, more than webstorm
12:25 < korilo> even for web releated stuff
12:32 < Industrial> Where can I read about local (i.e. on this host, not published on npm) libraries and how they are configured in package.json?
12:33 < Industrial> Or should I use git for this?
12:35 < faceleg> Industrial: you can point package json modules to a local directory
12:35 < faceleg> or to a private git repo
12:35 < faceleg> "modulename": "/some/path/to/module"
12:38 < Industrial> faceleg: I tried with an absolute path but that didn't work :S
12:38 < Industrial> "utils": "/home/tom/Documents/platform/lib/utils"
12:39 < faceleg> hmmm
12:39 < Industrial> it's already in git but just not in a bare repo anywhere, so I'm not sure how to construct the git:// value, if I were to use that
12:39 < wereHamster> is 'npm install "git://github.com/clutchski/coffeelint.git#master"
12:39 < wereHamster> the correct way to install something directly from the git repo?
12:40 < Industrial> yes, but I want to do a local git install :-)
12:40 < Industrial> does that mean I need a bare repo and a git server or something?
12:41 < faceleg> Industrial: have you tried npm install /home/tom/Documents/platform/lib/utils
12:41 < faceleg> ?
12:41 < Industrial> no, sec
12:43 < Industrial> ok, that works.
12:43 < Industrial> guess I need to update the gitHead hash myself then.
12:44 < Industrial> https://npmjs.org/doc/json.html doesn't mention it though
12:45 < wereHamster> I mean, that npm install command I pasted earlier doesn't work. And I want to know why..
12:46 < wereHamster> that project hasn't updated the npm package yet so I'm trying to install it from the git repo directly
12:49 < bnoordhuis> faceleg: re uv_async_t, yes, that's what you should use for inter-thread communications
12:50 < bnoordhuis> faceleg: though if you're invoking libgit2 functions with uv_queue_work, libuv takes care of that
12:51 < Industrial> How do I make the gitHead property in the package.json always point to the latest commit?
12:52 < faceleg> bnoordhuis: yeah, but in this case I have to iterate a diff list inside my work function, said list iterator invokes a callback on each diff
12:53 < faceleg> bnoordhuis: my thinking is that I can use uv_async_t to make calls to V8-JS functions which will tie the whole thing together with events
12:54 < bnoordhuis> faceleg: you mean wake up the event loop every time your iterator cb is called? that's probably horribly slow
12:54 < faceleg> is it? still pretty noob here
12:54 < faceleg> I'm aiming to make the JS work like: diffList.walk().on('diff', function(diff) {});
12:55 < SomeoneWeird> y
12:55 < bnoordhuis> faceleg: it's possible but that means cross-thread traffic for each diff object
12:55 < faceleg> because I don't know any better
12:56 < bnoordhuis> faceleg: as with all things performance, you should benchmark it - but gut feeling says it'll be slow
12:56 < faceleg> rather not make it slow
12:56 < faceleg> so you think I should gather the diff data all in my work method
12:56 < bnoordhuis> probably. how big are these diff objects?
12:56 < faceleg> and pass it to JS all together in afterwork
12:56 < bnoordhuis> if they're not that big, just batch them
12:56 < faceleg> when you diff a commit to another commit
12:56 < faceleg> (in git)
12:57 < faceleg> so not going to be *that* big generally
12:57 < bnoordhuis> i suspected as much. :) so anywhere from tiny to massive, i guess?
12:57 < faceleg> yeah
12:57 < faceleg> one reason I wanted to do event.on
12:57 < bnoordhuis> you could batch the diffs and when they exceed some threshold, you hand them off to the main thread
12:58 < faceleg> was that the diff iteration allows for callbacks on each diff, each diff's hunk of diff test, and individual diff lines
12:58 < faceleg> bnoordhuis: and would this call teh cb each time a batch was complete? or use the event paradigm I described earlier?
12:59 < bnoordhuis> faceleg: that's up to you
12:59 < faceleg> bnoordhuis: also, so you're saying interthread communication is slow?
12:59 < bnoordhuis> comparatively speaking, it is, yes
12:59 < faceleg> bnoordhuis: what I mean there is if I did the batch implementation, the event paradigm wouldn't be slow. what was slow was me wanting to send each diff off to the main thread with each iteration?
13:00 < bnoordhuis> faceleg: correct
13:00 < faceleg> so what I'm hearing is in work I can batch it
13:00 < faceleg> then in my after work function /whatever is called for each batch
13:00 < faceleg> I could make cb's for each item and thus have my event.on('diff', ...
13:00 < bnoordhuis> exactly
13:01 < faceleg> and this is using async_t as I described earlier?
13:01 < faceleg> I like you.
13:01 < bnoordhuis> no, not if you use uv_queue_work
13:01 < bnoordhuis> and thanks :)
13:01 < terietor> hello
13:01 < faceleg> so no async?
13:01 < bnoordhuis> well, you could combine uv_queue_work and uv_async_t, it's true
13:01 < faceleg> b/c/
13:01 < terietor> i just saw the node update his minor version from 8 to 10, are there any big differences that the changelog doesn't mention?
13:01 < faceleg> diffList.walk()
13:02 < faceleg> returns event right
13:02 < faceleg> and starts off the iterations
13:02 < faceleg> which occur in work
13:02 < bnoordhuis> yes, something like that
13:02 < faceleg> from work, I need to somehow send batches back to main thread
13:02 < faceleg> should I not use async fo that?
13:02 < faceleg> so when the iteration is complete, uv_queue_work goes naturally to after work?
13:03 < bnoordhuis> yep. that's where uv_async_t comes in. you'll also need e.g. a uv_mutex_t to synchronize your data structures
13:03 < bnoordhuis> the reason i initially said 'not with uv_queue_work' is that you'll tie up a thread in the thread pool
13:03 < faceleg> is taht described here: http://nikhilm.github.com/uvbook/threads.html#inter-thread-communication
13:03 < faceleg> oh ok
13:03 < faceleg> but if I combine work + async as just desc it should be ok?
13:04 < bnoordhuis> well, hogging a thread is not the worst thing in the world
13:04 < bnoordhuis> but it could affect performance of other thread pool operations negatively
13:04 < faceleg> I'd like this to scale well, a big part of me doing this is to learn how to do things the right way
13:04 < bnoordhuis> so you might want to opt for a thread you create yourself with uv_thread_create()
13:04 < faceleg> would iterating in work + sending batches with async hog a thread?
13:05 < bnoordhuis> if your work cb takes a long to complete, yes
13:05 < bnoordhuis> *long time
13:05 < faceleg> yeah well that's the thing
13:05 < faceleg> some repositories have stupidly big commits, e.g. those that commit built javascript libraries
13:05 < faceleg> diffs are huge
13:06 < faceleg> so If I were to create own thread, still use work + async right/
13:06 < faceleg> ?*
13:06 < bnoordhuis> faceleg: uv_async_t yes, uv_queue_work no (because that'd still use a thread pool thread)
13:06 < bnoordhuis> uv_thread_create() takes a callback that gets invoked in the new thread
13:06 < faceleg> but but 
13:06 < faceleg> ah right
13:06 < faceleg> so in this case
13:06 < bnoordhuis> that's where you do your work
13:07 < faceleg> my cb *would* be in another thread, as with uv_queue_work
13:07 < bnoordhuis> yep
13:07 < faceleg> man thanks, so helpful
13:07 < faceleg> hopefully my questions are gtting more clear and I don't get too annoying with them
13:07 < faceleg> I'm teetering on the brink of understanding this all much more deeply.
13:08 < faceleg> One more ting before I have to leave you all, it's 2AM here
13:08 < faceleg> how do I "Use a mutex or rwlock to ensure accesses are performed in the right order."
13:08 < bnoordhuis> uv_mutex_create() and uv_mutex_lock()
13:08 < bnoordhuis> oh, and unlock of course
13:09 < bnoordhuis> basically, you guard all read and write access to your data structure with that lock
13:09 < faceleg> is there some documentation on this that I can attempt to read with comprehension?
13:10 < faceleg> bnoordhuis: is this to guard against concurrent writing to async.data?
13:10 < bnoordhuis> faceleg: the uv book? i think it has a chapter on mutexes
13:10 < bnoordhuis> yes
13:10 < faceleg> ok I'll look into that
13:10 < bnoordhuis> i.e. to stop threads from stamping on each other
13:10 < faceleg> so before writing to async.data, I would lock
13:11 < faceleg> and in my asunc.data callbac
13:11 < faceleg> I would use the data, then unlock
13:11 < bnoordhuis> faceleg: no. you lock and unlock in the same thread
13:11 < faceleg> oh
13:11 < bnoordhuis> in the critical section, i.e. after locking but before unlocking, you mutate your data structure
13:12 < faceleg> lock, add data to async.data, unlock
13:12 < bnoordhuis> yep
13:12 < bnoordhuis> ditto in the other thread, only you pop off the data
13:12 < context> i dont know guys, it all sounds like rocket science tome
13:12 < iamdustan> is it possible to have multiple users have publishing access to an npm package?
13:12 < faceleg> sarcasm hurts my feelings
13:12 < faceleg> hmm
13:13 < faceleg> should uv_async_send be within the lock/unlock?
13:13 < context> faceleg: you have a whole life of hurt ahead of you, i hate to say
13:13 < faceleg> context: I think I took your earlier comment out of context
13:13 < bnoordhuis> faceleg: it doesn't really matter as long as you're doing proper locking
13:13 < faceleg> context: and actually I'm made of stone
13:13 < faceleg> bnoordhuis: ok
13:14 < faceleg> so in main thread lock/unlock while reading data huh
13:14 < bnoordhuis> yep
13:15 < faceleg> that's all very helpful thank you
13:15 < bnoordhuis> rule of thumb: only access shared data when you have the lock
13:15 < aandy> true for chastity belts
13:17 < faceleg|sleep> damn name-length limit
13:17 < faceleg|sleep> thanks bnoordhuis
13:17 < faceleg|sleep> night all
13:17 < aandy> night? australia?
13:17 < faceleg|sleep> nz
13:17 < aandy> ah
13:17 < aandy> night :)
13:17 < faceleg|sleep> :P
13:18 < aandy> saying morning in one chan, night in another. globalization ftw
13:18 < faceleg|sleep> really it is morning,. 2
13:18 < titanplate> anyone using swagger here?
13:20 < titanplate> i'm not sure how i'm supposed to make api-docs.json/something to work
13:28 < MI6> joyent/node: Fedor Indutny master * 26dae9a : net: handle 'finish' event only after 'connect' - http://git.io/JOCJ-w
13:41 < kevindish> Am i the only one who gets a headache trying to learn about async coding with setImmediate first time?
13:44 < genazt> i dont get :D
13:45 < korilo> kevindish, depends :P where are you learning from?
13:46 < hortinstein> does anyone here have experience with node-http-proxy?  I am debating on using it since it seems like nginx has some pretty robust load balancing features.  What does node-http-proxy do when a request times out?  Will it forward it to another server?
13:47 < genazt> no
13:47 < genazt> when a request times out the first node app gets the timeout
13:47 < teadict> who's on Vagrant?
13:47 < genazt> so no request object is generated
13:48 < hortinstein> roger, so there is no way to error check at the proxy level?
13:48 < genazt> at the proxy you can
13:48 < genazt> you can fetch the timeout events
13:48 < hortinstein> oh it has event emitters?
13:49 < hortinstein> i am concerned about if a server goes down, taking it outta the routing list
13:50 < hortinstein> ok i think i see how i could do it
13:55 < fusiongrokker> morning all... I have a question regarding the 0.10 release. I've created user accounts using crypto.pbkdf2 to encrypt passwords on node 0.8, and when I run my app on 0.10 (no code changes) the encryption results differ, so you can't log into any accounts... I'm new to node so I haven't got a clue where to go from here.
13:56 < alexwhitman> Is there a simple way of finding out what's swallowing my errors?  I'm not using domains or process.on('uncaughtException') in my code but errors aren't being dumped to the console.
13:56 < bnoordhuis> fusiongrokker: if you open a bug report with a test case, we can look at it
13:57 < teadict> ohhh that's cold
13:57 < alexwhitman> bnoordhuis, I'll see if I can narrow it down
13:57 < alexwhitman> oops, ignore
13:57 < alexwhitman> wasn't for me :)
13:57 < fusiongrokker> bnoordhuis: thanks. here? https://github.com/joyent/node
13:58 < bnoordhuis> fusiongrokker: yes
13:58 < fusiongrokker> will do
13:58 < bnoordhuis> teadict: cold is telling someone it's open source, fix it yourself
13:58 < pachet> bnoordhuis: im sorry because you probably get this question a lot -- any relation to pieter noordhuis?
13:59 < teadict> bnoordhuis: heh
13:59 < bnoordhuis> pachet: no but we're both from the netherlands and we look a bit alike. i have distant relatives in his part of the country so who knows
13:59 < pachet> gotcha
13:59 < pachet> was just curious
14:00 < freewil> publishing to npm is painfully slow
14:04 < genazt> does someone know the npm command to sort packages ? 
14:04 < [jasper]> hej guys, what would be the best way to store session_id's ?
14:04 < genazt> to clear out duplicates
14:04 < genazt> [jasper], redis
14:05 < genazt> or mongo capped collections with expire indexes (i am trying this right now)
14:05 < [jasper]> genazt...I would loose these on a server crash
14:05 < [jasper]> I'm thinking more like a datastorage maybe
14:05 < genazt> well sessions arent data that should be consistent
14:05 < genazt> :D
14:05 < [jasper]> hmm true
14:05 < genazt> (redis can be consitent)
14:06 < euoia> why shouldn't sessions be consistent?
14:06 < genazt> but it writes the data in a background thread every minute i think(dont know the exact interval)
14:06 < [jasper]> ok let me rephrase...I also want to store other stuff....like users can add messages...but these messages don't need to be saved forever...and loosing 1 or 2 every now and then doesn't really mattert
14:06 < [jasper]> should I go nosql then? :P
14:06 < genazt> well it depends on how the messages are built up
14:07 < genazt> are they with many string/binary data (long texts) ?
14:14 < shesek> [jasper], sessions aren't meant to store cross-users data
14:17 < [jasper]> genazt they can be yes
14:17 < [jasper]> they can be very different..
14:17 < [jasper]> I'm using mysql for all the other stuff...like user settings etc 
14:17 < [jasper]> all stuff that is vital for good system operation
14:17 < [jasper]> I was looking into using nosql for the messages
14:17 < [jasper]> for example a private message system between users
14:18 < [jasper]> I rather not store that in my main database
14:21 < tonylukasavage> is there a way to do a global install of a module and also have its devDependencies install as well?
14:21 < tonylukasavage> ex. npm install -g somemodule
14:21 < genazt> well i dont think installing two dbms would be good
14:21 < preyalone> Can Express use ejs for client-side scripts? I'd like to pass a few useful constants into the client-side scripts.
14:21 < tonylukasavage> i only get devDependencies installed on local installs
14:21 < genazt> since you need to write an application layer glue for this
14:21 < euoia> preyalone: yes
14:22 < euoia> preyalone: I think ejs is one of the default supported template engines
14:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:23 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:23 < inics> Maybe someone can help me a little bit with VBA(Visual Basic in excel) of course who understand it :))))
14:24  * euoia boggles at the concept of inics.
14:25 < MI6> joyent/node: bnoordhuis created branch issue4771-wip - http://git.io/S7N3Xg
14:26 < tonylukasavage> i noticed that --dev will install devDependencies with a global install, but i really don't want it to recursively install all of the dependencies dependecies
14:27 < [jasper]> true genazt...what would you suggest?
14:27 < [jasper]> do it all in 1 database?
14:27 < preyalone> euoia: How do I reference a public/javascripts/... .ejs from a view?
14:28 < euoia> I have this in my views/index.ejs
14:28 < euoia> 		<script data-main="javascripts/app" src="javascripts/require.js"></script>
14:28 < korilo> kevindish, i think the best way to learn setimmediate (and so nexttick, setitimeout etc) would be reading async.js source,at least that's how i doit
14:28 < euoia> so just javascripts/...
14:29 < korilo> but if someone has really good resource (haven't find any that is not outdated) fell free to link :P
14:29 < kevindish> korilo: Okay, i will do that, thanks
14:29 < korilo> https://github.com/caolan/async/blob/master/lib/async.js
14:30 < [jasper]> I guess my server would be the layer between those 2 dbms genazt
14:30 < titanplate> http://paste2.org/p/3140062
14:34 < fusiongrokker> bnoordhuis: https://github.com/joyent/node/issues/5003
14:35 < korilo> where is setImmediate also documented in node apis? 
14:35 < korilo> here there's nothing -> http://nodejs.org/api/globals.html
14:36 < preyalone> How can I prevent <%= from html-encoding quotes?
14:37 < bnoordhuis> korilo: timers.html
14:37 < bnoordhuis> fusiongrokker: thanks, i'll look at it
14:37 < fusiongrokker> bnoordhuis: much appreciated :)
14:37 < euoia> preyalone: you're playing some JS on the page?
14:38 < preyalone> euoia: Yeah, I can aaaalmost pass the data to the client side JS, using <%= data %>. But the data is being html-encoded, so " turns into quot, which is bad.
14:38 < Industrial> What if I clone a local/repo.git to node_modules/repo ? Should/Could I have an entry for that in the package.json ?
14:40 < preyalone> Aha! http://stackoverflow.com/a/13429152/350106
14:41 < SrPx> I don't get it - there is no instructions for installing node.js on CentOS. Should I just follow Debian instructions?
14:43 < bnoordhuis> SrPx: there are fedora packages that may work. else you just ./configure && make install
14:43 < SrPx> bnoordhuis: why fedora?
14:44 < bnoordhuis> SrPx: because someone from redhat packages them
14:44 < SrPx> Hmm I see
14:45 < SrPx> ty
14:45 < bnoordhuis> np
14:49 -!- mode/#Node.js [+o TooTallNate] by ChanServ
14:57 < Industrial> Say I have one TCP server that ditches out ports (seaport). What if it stops and then starts? Will the environment be refreshed? Do I need to re-register all my services?
14:59 < bradleymeck> Industrial: if you are talking about seaport opening them and closing them, that is up to seaport. if you in your app are doing that the only thing that would happen is current connections will be killed and will need to reconnect
15:02 < Industrial> bradleymeck: no I mean what if seaport craps out and I start it again
15:04 < bradleymeck> Industrial: not positive but looking at code, seaport does not seem to have persistence by default so yes, reregister
15:13 < Industrial> bradleymeck: I see a ports.on('disconnect') However I'm not sure what to do at this point. Say that happens when I kill the process running the seaport server; I just call register again? Does that mean I need to restart all the nodes when this happens, because the connections between the nodes are no longer valid if they all want/have new ports and need to restart. This would be a cascading problem.
15:14 < bradleymeck> no idea
15:26 < jonno11> Hi guys. I'm using EJS in Sublime Text 2 - the snippets directory tells me that an EJS opening tag is "<?" as opposed to "<%". Are these interchangeable? I've seen it in forums too!
15:27 < NiLL> Hi, I have a little question about 'require' statement. In my app much count of depended modules. And code doesn't looks great. Are you have some hacks for this?
15:29 < Jeffail> how are you declaring the modules?
15:31 < NiLL> Just 'var path = require('path);' 
15:31 < bradleymeck> NiLL: if you have many lines of require(…) you should probably split your big project into a set of modules, izs has a blog post on this kind of stuff http://blog.izs.me/page/4
15:32 < bradleymeck> not 1-1 but involves the topic
15:32 < NiLL> Bradley, thanks for advide
15:32 < NiLL> I'll check this
15:33 < sordina2> Hello Noderinos. I'm trying to use orm2 with postgres, and it doesn't seem to want to sync my models: http://pastebin.com/qPyg7yUJ - The sync calls don't seem to raise any errors, but the find call says that 'relation "person" does not exist'...
15:34 < sordina2> Anyone come across a similar issue before?
15:42 < iamtony> Hi, I have the following scenario: 1. Client sends request via socket.io -> 2. Some processing occurs on server, may take a minute or more, is blocking -> 3. Server sends result via socket.io  - what would you recommend for managing the heavy processing? Should I be looking at node-webworker, forever, or something different?
15:43 < naomi> iamtony: forever just restarts a process if it fails
15:44 < naomi> iamtony: node-webworker looks pretty stale, too; 2 years old
15:45 < iamtony> naomi - Yeah it hasn't had commits for 2 years - just wondering what people are using now
15:45 < naomi> iamtony: there's just not enough info in your question
15:46 < naomi> iamtony: i mean, without knowing more about the specific process, i feel like it would be hard to advise you
15:47 < iamtony> naomi: OK thanks, I'll do some more reading
15:47 < naomi> to me, it sounds like you could just use vanilla node; but that's what i use for almost everything
15:48 < naomi> you question basically sounds like this "a client sends a request to a server. the server will take 2 minutes to process the data. the server responds. how should the server work?"
15:48 < MI6> joyent/node: Ben Noordhuis v0.8 * 2c41a80 : crypto: check key type in GetPeerCertificate()  Works around the followin - http://git.io/5jCqjw
15:50 < naomi> iamtony: off the top of my head, it sounds like you could try to add more intermediate state to the server jobs. Try to return data where it might not already exist. For example, you could create a job queue, and each time a job begins processing, you could emit {queuePosition: n} where n is the new position in the queue
15:51 < naomi> iamtony: of if the process can hit some checkpoints along the way, emit some of those states to teh client
15:51 < naomi> iamtony: anything you can do to notify the client so that they're not just sitting there for 3 minutes is helpful
15:53 < iamtony> naomi: Yep, the bit i'm stuck on is giving the work to another process and getting status back to the node process to forward on the client.
15:54 < naomi> oh, the process isn't happening in node?
15:54 < naomi> iamtony: are you familiar with: http://nodejs.org/api/child_process.html
15:55 < iamtony> naomi: Ah, this might be what I'm looking for. Maybe why webworker stopped being updated. Thanks!
15:56  * naomi nods
15:56 < naomi> good luck
16:21 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:40 < tonylukasavage> Anyone know how to get npm to install my devDependencies when I'm doing a global module install? 
16:41 < tonylukasavage> "sudo npm install -g MODULE" is not installing the module's devDependencies in the globally installed module's node_modules folder
16:49 < zackiv31> if I have function test(){ } in my module, and I have a var a = 'test', how can I run that function by referencing a?  must I attach the test function to an object? or is there something equivalent to window[a]() ?
16:51 < Orion-> Hello there
16:52 < pachet> zackiv31: generally speaking, yes, you have to assign it as a property of an object in order to reference it with a variable
16:52 < asdf12> zackiv31: the easiest way is probably to attach test to 'exports'
16:53 < asdf12> it is a safer 'global' than window in the browser
16:53 < zackiv31> ok thanks, ill attach it to a variable.. i dont necessarily want to export it for external consumption, just want to be able to log the name of the function for debugging purposes
16:54 < asdf12> oh :P assumed you wanted it to be global in some way, since you mentioned window
16:55 < Orion-> Anyone knows how and if it's possible to overcome the binding.gyp to build a node module that depends on 3rd party lib for which the headers/lib maybe located at a custom path ?
16:56 < Orion-> In extensor a node-gyp kind of configure option for -I/path/to/includes
16:56 < asdf12> Orion-: include_dirs ?
16:57 < Orion-> asdf12: is it possible to specify it from the command line node-gyp rebuild ?
16:58 < strk> scoping issue: I'm passing an object to an async function, with a callback. I can see the object changed by the function when the callback is invoked, but only if the change happens in the same tick
16:58 < asdf12> i don't know, but why not just include it in binding.gyp?
16:58 < baudehlo> can someone with node v0.10.0 confirm this bug for me? require('fs').unlink('/tmp/file_that_does_not_exist');
16:59 < motaro> I'm reading this article about templating engines in nodejs and the author states that "Weld is a solution for templating solution that is limited to creating HTML output", is there any other thing that you can template?
16:59 < baudehlo> under 0.8 this continues fine. Under 0.10 it seems to throw an exception
16:59 < strk> are objects _copied_ when entering a closure ?
17:00 < asdf12> strk: no
17:00 < pachet> strk: the references to those objects are passed by value
17:01 < asdf12> strk: do you have a code example of what you mean?
17:01 < pachet> eg function foo(a){a.bar = 2;} var b = {bar:1}; foo(b); console.log(b); --> bar:2
17:01 < pachet> but function foo(a){a = {bar:2};} var b = {bar:1}; foo(b); console.log(b); ---> bar:1
17:02 < strk> adding more debugging lines to see what's going on, indeed I see the outermost callback being invoked before the innermost.. I could have some aliasing problem
17:02 < Orion-> asdf12: because sometimes people are not root on their server and thus may wish to install libraries in a sandbox. What I am looking for is an ENV variable that could be picket up by node-gyp so that anyone installing my module from the nom repo would just need to set the optional env var to successfully compile the module
17:02 < motaro> Is there another thing you can template besides HTML?
17:02 < genazt> motaro, a template engine could do emails, javascript, css templates
17:03 < genazt> or even pdf, excel, word, images
17:03 < Orion-> s/nom/npm
17:03 < motaro> genazt, thanks.
17:04 < asdf12> Orion-: i believe binding.gyp can be written to pick up shell env variables
17:05 < genazt> does someone know a little module that can create random strings ?
17:05 < motaro> genazt, tempting javascript how does that work. Kind like web Dependency injection.
17:05 < pachet> genazt: node-uuid
17:05 < genazt> motaro, like ejs
17:05 < Orion-> asdf12: Do you know where I could find a tutorial on that. I fear to dive again into node-gyp wiki doc which is really a bad experience
17:05 < genazt> its js in js for templating
17:05 < genazt> js inception :D
17:05 < pachet> hey dawg
17:07 < strk> doh, it was me expecting JSON.stringify(obj) to retain keys in 'obj' with undefined value
17:07 < strk> I'm actually surprised it doesn't, but that seems to be the case
17:07 < genazt> pachet, not uuids strings like 8-12 chars long
17:07 < genazt> and contain a charset that i can give
17:08 < pachet> might be better to just write one
17:08 < pachet> shouldnt be too hard
17:08 < genazt> well for that what i want its harder then i think 
17:09 < asdf12> Orion-: https://code.google.com/p/gyp/wiki/InputFormatReference#Command_Expansions_(<!,_<!@)
17:09 < asdf12> that's what you want i believe
17:09 < asdf12> make it echo the shell env
17:10 < asdf12> so you have the var within node-gyp
17:11 < Orion-> asdf12: ok I see. I was so looking the other way around that I missed it
17:11 < euoia> genazt: strgen                Generates random strings of a given length from a chosen or given alphabet. =drd0rk 2012-01-11 20:37  random string password string generator random pw
17:12 < Orion-> asdf12: thanks I'll try this
17:12 < Orion-> bye
17:13 < genazt> euoia, near but not that what i want
17:13 < genazt> i want a module that takes char groups and i can say from this 1, from that 2, from that 1 (in minimum), strlen must be x
17:14 < genazt> generatString({ "[a-z]" => 2, "[A-Z]" => 1, "[0-9]" => 2, "_:;.," => 2 }, 12) 
17:14 < genazt> which would give me a string with the length of 12
17:15 < euoia> genazt: I think that's actually a bit of a tricky problem
17:15 < asdf12> OH MY, what is => 
17:15 < asdf12> :P
17:15 < genazt> => is php :D
17:15 < genazt> sry
17:15 < euoia> genazt: parsing [a-z] properly would be annoying, you might be better enumerating the groups
17:15 < genazt> -_-
17:15 < purr> genazt: ಠ_ಠ is an IRC client/IRC client framework.
17:15 < genazt> purr is back :D
17:16 < Littlex> hey, can you somehow overrule dependencies of subpackages you use in our main project?
17:16 < genazt> yes but i think there is no module that has the thing that i need ? so i need to write my own for this ?
17:17 < euoia> genazt: I doubt there will be a module... you still haven't clearly described the problem
17:17 < euoia> genazt: How does the algorithm choose what to put in the string once it has met the minimum requirements?
17:17 < genazt> i want a code generator that generates me a string about 12 length with a requirement of some char groups
17:17 < fusiongrokker> bnoordhuis: RE: my ticket on github; is there anything in particular I should use to write the test case, or just something that prints PASS/FAIL with console.log?
17:18 < genazt> like numbers, big letters, little letters, special chars
17:18 < genazt> euoia, via random
17:18 < shesek> it seems like "Package redirection has been removed. Please update your publish scripts", but https://npmjs.org/doc/registry.html#I-published-something-elsewhere-and-want-to-tell-the-npm-registry-about-it still says its possible
17:18 < euoia> genazt: so you would need to specify the character set for the remainder of the string as well?
17:18 < euoia> genazt: it sounds like such a specific problem
17:19 < Virunga> >> '1'
17:19 < purr> Virunga: (string) '1'
17:20 < koirlo> hello
17:20 < genazt> no it can use the full set of all chars i gave
17:20 < MI6> joyent/node: isaacs v0.10 * 53f2381 : core: Unwrap without aborting in handle fd getter (+1 more commits) - http://git.io/inUJUg
17:20 < euoia> distributed evenly among the number of chars, or distributed evenly among the groups?
17:20 < genazt> number of chars
17:20 < Littlex> mhh is there a way to prevent redownloads of packages you specify in the package.json as zip downloads?
17:20 < euoia> genazt: the reason I'm asking these questions is to demonstrate that finding something that implements the exact rules you're after is unlikeluy
17:20 < euoia> *unlikely
17:21 < genazt> yes
17:21 < genazt> i know
17:21 < genazt> but under the 1506046 node modules it can be that there is a module that makes excalty that
17:21 < genazt> you know the 3 laws of github ?
17:21 < genazt> :D
17:22 < euoia> nope
17:23 < pachet> some day your prince will come
17:23 < genazt> https://github.com/felixge/faster-than-c
17:23 < bitfed> lol, pachet that should be a github rule
17:23 < genazt> When a first person pushes a library L1 into a remote repository, a second person simultaneously starts working on a second library L2 which will be equally awesome, but in a different way.
17:24 < Littlex> anyone :<
17:24 < niggler> Littlex whats the question
17:25 < niggler> genazt "equally awesome" is in theory
17:25 < Littlex> nigger: "is there a way to prevent redownloads of packages you specify in the package.json as tar.gz download when you execute npm install"?
17:25 < deoxxa> genazt: isn't the third law "if it can be written in javascript, it will be written in javascript"?
17:26 < guor> deoxxa, that sort of sounds like a threat, if intonated correctly :)
17:26 < niggler> javascript is turing complete
17:26 < daekano> lol @ spelling niggler's name wrong ^
17:26 < Littlex> yeah sorry about that
17:27 < niggler> oh lol Littlex
17:27 < genazt> well the whole talk is about his mysql lib, completly written in js, and compared to other c libs
17:27 < genazt> and he has made some awesome work
17:27 < niggler> Littlex define "redownload"
17:27 < genazt> and is faster then 98% of the nodejs c modules for mysql
17:27 < genazt> which is freaking awesome
17:27 < asdf12> Littlex: nothing is really re-downloaded, maybe you mean copied?
17:27 < Littlex> niggler: well npm gives me allways follwing output npm http GET https://github.com/chjj/pty.js/archive/v0.2.1.tar.gz
17:28 < niggler> there's a cache
17:28 < Littlex> but only for that package
17:28 < niggler> Littlex check ~/.npm
17:28 < Littlex> its there
17:28 < asdf12> genazt: that's because the trip to native from nodejs is expensive
17:29 < genazt> no thats cause he knows how v8 works
17:29 < niggler> hmm i just tried it Littlex and its only downloading once
17:29 < niggler> what os/node version ?
17:29 < genazt> and he build up parsers for mysql (in js!) that can handle data at 6 gb/s incoming speed on his macbook
17:29 < Littlex> niggler: https://gist.github.com/omares/5154292
17:29 < asdf12> genazt: well, maybe, but you have to realize the overhead is not marginal
17:29 < Littlex> niggler: CentOS release 5.8 (Final)
17:29 < asdf12> it's huge going from nodejs -> native
17:30 < genazt> yes thats why js (if you make it right) is faster than c (in nodejs land)
17:30 < asdf12> at least 100% decrease in op/sec 
17:30 < niggler> Littlex so make two directories foo and bar, then cd foo and npm install pty.js then cd ../bar and npm install pty.js
17:30 < asdf12> no you don't need to 'make it right' it's expensive period
17:30 < niggler> and you are saying you see the downloading line twice?
17:30 < asdf12> so whatever you do will always be faster
17:30 < genazt> well no
17:30 < niggler> write it in pure JS and you can even run it in browser!
17:30 < asdf12> yes
17:31 < MI6> joyent/node: Fedor Indutny v0.10 * 8135ac1 : net: handle 'finish' event only after 'connect' - http://git.io/eoqROg
17:31 < Littlex> niggler: i specified the dependency in my package.json of my project
17:31 < genazt> the v0.x was slower than the mariadb driver for mysql (both for nodejs)
17:31 < MI6> joyent/node: bnoordhuis created branch fix-path-join-docs - http://git.io/20TEPQ
17:31 < niggler> can you cat the package.json?
17:31 < Littlex> sure
17:31 < niggler> and are you running npm install?
17:31 < Littlex> yes, one moment please
17:32 < asdf12> i'm not talking about any specific code, i'm talking in general, you get 100% slow down going to native
17:32 < genazt> and i think the BSONNative part of the mongodb driver is faster in some cases
17:32 < Littlex> niggler: updated the gist to show you what i mean https://gist.github.com/omares/5154292
17:32 < asdf12> for the 'travel' time
17:32 < niggler> ERMAHGERD, 500.
17:32 < genazt> if you write a hello word in both (js and c) for nodejs maybe 
17:33 < bradleymeck> dat comment : http://www.youtube.com/watch?v=1e1zzna-dNw&lc=wSFOljSrsP4YLyH7pp1z8Bp0NtR3mG4ms5BMMzovfsE #needs evidence
17:33 < asdf12> so you better make sure when you enter native, you do A LOT of what you need there to avoid repeated trips
17:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:33 < genazt> yes ofc
17:33 < genazt> if you once are in c stay as long as you can :D
17:34 < genazt> but i do not build native modules because i hate compiling
17:35 < genazt> and the most things that node.js can do are enough for building most of the software
17:35 < asdf12> im just saying that by itself gives js a huge advantage
17:35 < genazt> yes
17:35 < asdf12> so in fact, it's not really so much knowing JS really well, but really knowing how to take advantage of things in c/c++ so you avoid repeated trips
17:35 < asdf12> to make a better native module
17:37 < genazt> well: js (v8 optimised) > c > js (non optimised)
17:37 < niggler> isaacs you awake?  why do pty.js and pty.js-dl both exist?
17:37 <@isaacs> niggler: no idea
17:37 <@isaacs> niggler: and sort of
17:38 < niggler> the great mystery is that searching for pty on the npm search points to pty.js-dl and not pty.js
17:38 < whap> on node 0.10.0 I'm seeing require('file.json') cause the node process to use up a lot of memory then eventually die due to a memory allocation error.  the json file is only 2.8MB in size.  has anyone else seen this?
17:38 < genazt> whap, no
17:40 < niggler> whap you have an example?
17:40 < whap> niggler: I guess I could send someone the json file
17:41 < whap> niggler: require('./zipcode')  that's it
17:41 < whap> niggler: loading the file into a var then calling JSON.parse gives the same result
17:41 < genazt> i could try it
17:42 < whap> genazt: https://dl.dropbox.com/u/10057662/zipcode.json
17:42 < whap> there's the file
17:43 < genazt> genazt@genazt-EasyNote-TS11SB:~/Downloads$ node
17:43 < genazt> > require('./zipcode');
17:43 < genazt> FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
17:44 < whap> genazt: yup
17:45 < genazt> is the json valid ?
17:45 < whap> genazt: I tried running it through jsonlint first
17:45 < whap> I might need to report this
17:45 < whap> could be used as a denial of service 
17:46 < niggler> error whap
17:46 < genazt> yes
17:46 < genazt> on json.parse its the same error
17:46 < MI6> joyent/node: Ben Noordhuis v0.10 * 9af0085 : doc: path.join() arguments must be strings  In v0.8, non-string arguments - http://git.io/ekECSg
17:46 < genazt> > JSON.parse(fs.readFileSync('./zipcode.json'));
17:46 < genazt> FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
17:46 < whap> genazt: even if it were invalid JSON I wouldn't want to give someone the ability to crash my node process
17:46 < genazt> right
17:46 < niggler> whap why not just read the file?
17:47 < genazt> because its leads to the same error
17:47 < whap> niggler: I did that also.  I then called JSON.parse
17:48 < whap> what's the best place to report issues w/ node?  github?
17:49 < genazt> yes
17:49 < genazt> joyent/node
17:49 < whap> genazt: k, thanks
17:49 < [jasper]> hej guys, if I use redis to keep track of sessions with node..
17:50 < genazt> [jasper], yes ?
17:50 < [jasper]> :) hej genazt
17:50 < genazt> :D
17:50 < [jasper]> I want to make sure someone gets logged out after like an hour...unless he's active on the site
17:50 < [jasper]> how would I do this? I mean..updating the key in redis everytime someone does something on the site is a bit like overkill I guess
17:52 < pachet> [jasper]: http://redis.io/commands/expire
17:52 < genazt> connect-redis sets a timeout for your session variables
17:52 < genazt> by default its one day
17:52 < genazt> options.ttl can change it
17:53 < [jasper]> yeah genazt I read about that...but I mean..someone logs in...the key gets set once...with for example 1 hour timeout
17:53 < [jasper]> and then the user is active on the site...logged in...for an hour....then the socket connection gets lost..
17:53 < genazt> no the key gets set everytime a session saves
17:54 < genazt> which in connect/express is on every request end
17:54 < [jasper]> hmm? I only set it once in my code
17:54 < deoxxa> "socket connection gets lost"
17:54 < deoxxa> lol what
17:55 < [jasper]> deoxxa socket.io. suppose the connection gets lost for like 30 seconds..
17:55 < genazt> you set req.session.foo = "bar"
17:55 < [jasper]> I don't want my user to have to automatically login again then
17:55 < genazt> and the express framework saves it once the response has ended
17:55 < genazt> so everytime a session gets opened, written to or not, it gets saved at the end of the response (express does it)
17:56 < [jasper]> ah genazt...the way I read it...the timeout got only reset on a set or getset
17:56 < [jasper]> not on a get
17:57 < genazt> no it gets set on a set
17:57 < genazt> https://github.com/visionmedia/connect-redis/blob/master/lib/connect-redis.js#L116-L135
17:57 < genazt> but the function in the store gets called every response (if there was a session loaded)
17:58 < genazt> so it gets set to a new ttl
17:58 < jsmonkey> Hi, I am fairly new to node (been doing rails mostly). Which is the simplest auth lib for an express app?
17:58 < majodev>  /reload style
17:58 < xdomox> hey guys, I a question regarding SQL
17:58 < genazt> jsmonkey, passport
17:58 < [jasper]> hmm genazt: The timeout is cleared only when the key is removed using the DEL command or overwritten using the SET or GETSET commands.
17:58 < jsmonkey> jsmonkey: I just found that when I googled, is it good you say?
17:58 < genazt> [jasper], it gets overwritten by a set
17:58 < xdomox> I have two fairly unrelated tables that i want to get data from at the same time for a global search type function
17:59 < genazt> xdomox, join the tables ?
17:59 < xdomox> anyway at the moment I'm doing a UNION, but this isn't good for me since i need to be able to tell which table the data came from
17:59 < genazt> or use a union :D
18:00 < xdomox> genazt: they don't have any common keys
18:00 < jeremy_c_> I wrote a script to process some EDI files, the reading and parsing of those files takes a little time. Once parsed, I then begin doing pgsql updates. To know when to shut down, I listen to the 'drain' even on the db connection and that works most of the time, but when parsing a large file, the commands to do the file parsing finish before any of them have issued a SQL statement so the app terminates right away. How do you handle these situations?
18:00 < xdomox> anyway
18:00 < [jasper]> exactly genazt...but what I meant was...the user goes to my site...he then gets checked against the redis store to see if he has a valid login still with the sessionid he sends from his cookie
18:00 < genazt> xdomox, you dont need any keys: SELECT * FROM table1, table2
18:00 < [jasper]> then the user browses the site...but the site never gets reloaded (it's all javascript)....so the session is never resent again
18:00 < genazt> try it :D
18:01 < genazt> a okay
18:01 < [jasper]> 8)
18:01 < xdomox> genazt: but then it joins the results with the primary key
18:01 < genazt> then you need something in socket.io that saves the session for you
18:01 < [jasper]> yeah...that's what I was thinking about...
18:01 < xdomox> like 1: table1.col1, table2.col1 etc..
18:01 < genazt> xdomox, it shouldnt cause you havent setup a relation between the tables
18:01 < [jasper]> like a ping : pong.....to renew the session
18:01 < genazt> [jasper], yes
18:03 < xdomox> genazt: just say i want to do SELECT table1.col1, table2.col1 FROM table1, table2
18:03 < genazt> yes it should work, try it out :D
18:03 < xdomox> genazt: really what i want to do
18:04 < xdomox> genazt: is return both tables seperately in the same request as in get both table results and then send them back
18:04 < xdomox> with different SQL queries
18:05 < genazt> hmmmm
18:05 < genazt> then maybe there is no solution for this
18:26 < lbdremy> hi
18:26 < exoon> Hi. I currently run "nide init" for the first time. On the console I see many error messages "{ [Error: EACCES, permission denied '/home/... " Why is nide looking around my home-dir?
18:29 < deoxxa> exoon: what exactly is "nide"?
18:29 < exoon> http://coreh.github.com/nide/
18:30 < deoxxa> exoon: it probably wants to store settings in ~/.nide or something
18:30 < MI6> joyent/node: isaacs v0.10 * 110cacd : core: Move UNWRAP_NO_ABORT to handle_wrap.h  Otherwise it cannot be used  - http://git.io/Bk8vIg
18:30 < deoxxa> (that's just a guess)
18:30 < exoon> deoxxa, it is looking around my .wine folder :)
18:30 < deoxxa> oh
18:30 < deoxxa> that's a bit weird!
18:31 < azylman> It looks like it has some sort of project display, it might be looking around to guess where node projects are
18:31 < exoon> yes, it opens a webpage for new project cration.
18:32 < exoon> And the access-denied come from mapped system-folder to .wine/dosdevices.
18:32 < exoon> /home/exoon/.wine/dosdevices/z:/proc/3098/root/proc/13057/exe for example
18:37 < mikolalysenko> Sparse matrices for node.js: https://github.com/mikolalysenko/csr-matrix
18:39 < Brad__> I have a question about node.js hosting are there any free services that allow websockets? I've tried cloudfoundry and appfrog but they don't support socket.io
18:39 < deoxxa> Brad__: nodejitsu
18:39 < deoxxa> Brad__: if your application is open-source and you're willing to wait for some more free slots to open up
18:40 < Brad__> deoxxa: this is only for 30 days right?
18:41 < deoxxa> Brad__: nope, if the application is open source it'll be free forever: http://opensource.nodejitsu.com/
18:41 < deoxxa> or at least, for an as-of-yet not limited time
18:42 < bradleymeck> modulus.io just started up as well but no free tier
18:53 < zackiv31> anyone here familiar with winston logging?  I'm having an issue where everything prints correctly to Console, but only the first couple lines get printed to File... no idea why
19:11 < zeromodulus> Heeheehee... I'm re-inventing the wheel.
19:12 < Ralt> Domenic_: how are the pr merged? it looks like it takes quite some time for them to be.
19:12 < Ralt> (in npm)
19:12 < Domenic_> Ralt: whenever isaacs feels like it
19:12 < Ralt> k :)
19:13 < Ralt> shouldn't there be more maintainers? there is almost 30 pr right now.
19:13 < Domenic_> we're doing our best. 30 pr is not too many for a projects of npm's size.
19:14 < Ralt> yeah, not criticizing your efforts, just wondering.
19:14 < Domenic_> luke and i were just added a week ago, so we're still ramping up :)
19:15 < Ralt> oh, k
19:15 < Ralt> I see what are your feelings :P
19:17 < bradleymeck> Domenic_: im going to see if I can pull out lifecycle in next week since we ended up making npm-script
19:19 < Domenic_> bradleymeck: very cool!
19:27 < deoxxa> bradleymeck: what's npm-script?
19:27  * deoxxa raises an eyebrow
19:27 < bradleymeck> deoxxa: just npm's run-script stuff pulled out to a module
19:28 < deoxxa> i use npm pretty extensively for deployment at work, so anything that makes it more flexible is always interesting to me
19:28 < deoxxa> oh cool
19:28 < bradleymeck> its almost 1-1, few tweeks with some recent changes / allow for defaults to be fns instead of strings and i can attempt to replace the evil crazy lifecycle in npm
19:29 < methodIST_> anybody has any experience with Mongoose?
19:29 < echo|> mscdex: Before I keep looking into your ssh2 module, I was wondering if you had any links to show an example of a c.shell() and accepting input from stdin. Any help would be appreciated <3
19:32 < daekano> methodIST_: Mongoose is pretty pervasive, just ask
19:33 < methodIST_> so im trying to write a method on the model
19:33 < methodIST_> myModelSchema.methods.saveAmount = function...
19:33 < methodIST_> and I'm passing the amount as a param for the function
19:33 < methodIST_> then doing 
19:34 < methodIST_> this.save(cb)
19:34 < methodIST_> when I run the code I get that this method is not defined
19:35 < methodIST_> sorry, myOder has no method 'saveAmount'
19:35 < methodIST_> *myOrder
19:41 < zeromodulus> is `new this();` a bad idea?
19:41 < korilo> zeromodulus, haven't seen many doing that so far 
19:42 < zeromodulus> if `new this();` is in a prototype, it should call the constructor function of the prototype, right?
19:42 < deoxxa> zeromodulus: ...holy shit, dude.
19:42 < zeromodulus> er, if it's in a prototype function.
19:42 < korilo> why you need to instatiate this in the same contex?
19:42 < pachet> what deoxxa said
19:42 < korilo> lol rudessss
19:42 < deoxxa> zeromodulus: i've seen people not get it before, but... that... that's on a whole new level.
19:43 < daekano> LOL
19:43 < zeromodulus> basically, I'm making a model kind of thing.
19:43 < deoxxa> zeromodulus: weren't you in here all yesterday asking about some weird prototype stuff as well when everyone was like "man, just use a closure"?
19:43 < zeromodulus> but, I'm not abusing it this time, at least, I think.
19:44 < daekano> zeromodulus: I think you're trying to force javascript to do things it's not meant to do
19:44 < daekano> http://javascript.crockford.com/prototypal.html
19:44 < zeromodulus> eh, nuh uh.
19:45 < zeromodulus> I think I just need to figure out which prototype to add this function to.
19:45 <@mbalho> zeromodulus is the person who said they wont buy a book on JS until they start making money with their app
19:45 < zeromodulus> There's a prototype for a constructor function, and a prototype for an instance...
19:46 < zeromodulus> Neither of which will work with this function.
19:46 < daekano> what
19:46 < daekano> yeah, go study prototypal inheritance.
19:46 < zeromodulus> Hmm... it probably need not be a prototype function then, but a property of my constructor.
19:47 < zeromodulus> Can a property of a constructor refer to its constructor?
19:47 < zeromodulus> A method, I mean.
19:47 < zeromodulus> Yeah, that's what I need to do.
19:47 < daekano> why?
19:47 < zeromodulus> You'll see. :)
19:48 < daekano> I think you're going to divide your application by zero.
19:48 < zeromodulus> heheh, I'll figure this out.
19:48 < zeromodulus> I already got an idea of what I need to do.
19:48 < daekano> maybe you need a factory?
19:49 < zeromodulus> Huzzah, I did it.
19:50 < daekano> please post it so we may marvel at your ingenuity
19:50 < zeromodulus> Oh yes, I see an npm package in this code's future.
19:51 < zeromodulus> Maybe, I have to test one more thing...
19:52 < zeromodulus> Yay, it worked!
19:58 < teadict> common closed system web app for administration of idioms institutes: mongo or redis ?
19:58 < deoxxa> teadict: lol
19:59 < teadict> deoxxa: what did I say wrong? I'm new to nosql
20:00 < mscdex> echo|: you just write to the provided stream
20:01 < mscdex> echo|: there's an example for shell() in the readme
20:02 < echo|> mscdex: Thank you! My apologies, I didn't see one. 
20:02 < mscdex> echo|: i'm sorry, i thought there was one. but it's pretty much the same as exec()
20:18 < mythril> I've now tried about 5 js beautifiers in the NPM repo, anyone know of a decent one that inserts braces on if and else blocks?
20:22 < OliverJAsh> if i'm using a message queue system, is it okay to have some jobs create more jobs (sub-jobs)?
20:23 < zeromodulus> Huzzah...
20:23 < zeromodulus> Huzzah!
20:24 < daekano> post proof to genius
20:24 < zeromodulus> Soon...
20:25 < zeromodulus> =_=
20:30 < zeromodulus> I probably re-invented the wheel, but, it's still cool.
20:30 < daekano> post
20:31 < deoxxa> zeromodulus: http://i.imgur.com/3mtvB2I.jpg
20:31 < zeromodulus> lmao
20:31 < zeromodulus> daekano: working on it.
20:31 < zeromodulus> it might be a while, debugging right meaw.
20:32 < FellowMD> zeromodulus have I missed what you're working on here, or is it a secret?
20:33 < daekano> he's finding ways to invoke prototype constructors within methods.
20:33 < OliverJAsh> if i'm using a message queue system, is it okay to have some jobs create more jobs (sub-jobs)?
20:33 < daekano> for some reason.
20:33 < pachet> :[
20:33 < jesusabdullah> dangit zeromodulus you're banned from using constructors and prototypes
20:33 < jesusabdullah> you will use functions and closures only
20:33 < zeromodulus> daekano: NO, NO I'M NOT.
20:33 < deoxxa> OliverJAsh: the most accurate answer is "probably. maybe. i don't know. more info?"
20:33 < daekano> u mad bro?
20:34 < zeromodulus> NO.
20:34 < jesusabdullah> remember how I ftfy'd your code yesterday zeromodulus ? Trust me you'll be happier if you completely ignore prototypes and ctors for a while
20:34 < zeromodulus> I forgot about the whole...
20:34 < zeromodulus> uh, what I was doing.
20:34 < zeromodulus> No, it's okay, I'm using them properly now.
20:34 < stantonwjones> do you mean the constructor function of a prototype?
20:34  * jesusabdullah skeptical
20:34 < zeromodulus> stantonwjones: no.
20:35 < OliverJAsh> deoxxa: i have a job which is made up of lots of little jobs. from my application it's much easier just to run the top level job and have it create all the necessary jobs.
20:35 < FellowMD> Not exactly nitty-gritty, but as an intermediate js coder, this helped a lot: http://joost.zeekat.nl/constructors-considered-mildly-confusing.html
20:35 < OliverJAsh> deoxxa: i was just concerned about having a job creating more jobs.
20:36 < deoxxa> OliverJAsh: well i guess the only real risk is of creating an endless loop of more jobs
20:36 < deoxxa> OliverJAsh: if you can avoid that, you should be good to go!
20:37 < zeromodulus> shplarg...
20:37 < zeromodulus> my plans are temporarily foiled.
20:50 < cjno> I'm on Fedora 17, which has openssl-devel 1.0.0. Installing node works, but running the resulting binary causes "can't find openssl.so.0.9.8" errors. how to fix?
20:51 < Christian87> Hello
20:55 < Christian87> I would like to store a socket object from ws in a database I tried JSON.stringify(JSON.decycle(socket)) but then a cant reuse the socket object
20:57 < deoxxa> uh
20:57 < deoxxa> isaacs:
20:57 < deoxxa> stream.Writable
20:57 < deoxxa> {objectMode: true} - what?
20:58 < deoxxa> no more objectMode for that?
21:00 < zeromodulus> Heehee, heehee...
21:00 < OliverJAsh> i have a kue clear that i want to clear. can anyone advise on how to quickly do that from the command line via redis?
21:00 < zeromodulus> I've done it.
21:01 < zeromodulus> I've written a model layer for node that works with Redis.
21:01 < zeromodulus> Does such a thing exist already?
21:02 < zeromodulus> probsgalys
21:02 < deoxxa> isaacs: never mind, i'm helmet-on-the-bus retarded. i figured it out.
21:02 < zeromodulus> mine's much cooler though.
21:02 <@isaacs> deoxxa: kind of an inappropriate metaphor there.
21:03 <@isaacs> deoxxa: but looks like you've figured it out
21:03 < deoxxa> \o/
21:04 < fusiongrokker> yay I'm off to PhillyJS
21:05 < deoxxa> isaacs: something cool is that the new stream stuff has allowed me to completely retire a module i was maintaining for work. anything that lets me pull out *and not replace* a large chunk of code is a win in my opinion.
21:05  * deoxxa happy
21:05 <@isaacs> deoxxa: yeeesss.
21:05 <@isaacs> deoxxa: that is indeed a huge win
21:05 <@isaacs> love that
21:07 < deoxxa> isaacs: is there a way to have a stream in like... half-duplex object mode? specifically where bytes go in one side and objects come out the other? within the current functionality?
21:13 < methodIST_> anybody knows of good Solr-like implementation in Node?
21:13 < euoia_> methodIST_: what is lunr?
21:14 < methodIST_> im looking for some way to index a DB
21:14 < methodIST_> for example
21:14 < methodIST_> imagine you have a google search box
21:15 < euoia_> you want full text search
21:15 < methodIST_> so if someone put "NY weather"
21:15 < methodIST_> I want it to also map to "weather ny"
21:15 < methodIST_> im working with mongo and node
21:15 < methodIST_> and it would be nice if I could work off of it
21:17 < euoia_> methodIST_: I'm not really familiar with the domain... I'd be interested if you find something though
21:17 < othiym23> methodIST_: your two most pragmatic options are probably elasticsearch and using SQLite FTS
21:18 < deoxxa> elasticsearch ftw
21:18 < deoxxa> i use that at work
21:18 < deoxxa> is great
21:18 < othiym23> elasticsearch is probably the easiest to get up and running with, SQLite FTS is the "Nodiest" because it just provides you with an index and doesn't try to do anything else
21:19 < methodIST_> so with elastic search I can just dump a document into it
21:19 < methodIST_> like 
21:20 < othiym23> sure, it's got a RESTful interface for all its operations
21:20 < othiym23> it's basically Solr with REST swapped out for XML
21:20 < methodIST_> {city : new york, restaurant : thai, price : high } (just as an example)
21:21 < methodIST_> and then I can magically query it for "price ny"
21:21 < othiym23> first example: http://www.elasticsearch.org/guide/reference/api/index_.html
21:21 < othiym23> the manual is friendly!
21:21 < methodIST_> or "thai new york"
21:21 < deoxxa> methodIST_: bingo - curl -X POST http://127.0.0.1:9200/some/index -d '{"city":"new york"}'
21:21 < methodIST_> and still get the same thing?
21:21 < methodIST_> yes, the issue is that I dont know what people are searching for
21:21 < methodIST_> meaning, I dont know that "new york" is a city
21:21 < methodIST_> I want to to just dump "new york thai"
21:21 < deoxxa> methodIST_: who cares? they probably don't
21:21 < othiym23> that's just a matter of tuning your queries
21:22 < othiym23> Elastic Search is itself a Java server
21:22 < othiym23> you can probably query Solr directly from Node without any external modules if you use its JSON API
21:22 < methodIST_> I mean, it's all free text, no dropdowns
21:22 < othiym23> yeah
21:22 < othiym23> methodIST_: read the docs, they're not tough to follow ;)
21:25 < methodIST_> i was thinking of just dumping all the fields into one large blob
21:25 < methodIST_> and searching on that
21:25 < methodIST_> using one of these solutions
21:26 < deoxxa> methodIST_: not necessary - you can shove the object into elasticsearch and it'll search all the fields for you
21:26 < methodIST_> automagically?
21:26 < methodIST_> I'm not familiar with Lucene or Solr
21:26 < methodIST_> and I dont see an example on their page (elasticsearch)
21:26 < methodIST_> they only mention "Lucene syntax"
21:28 < methodIST_> again, making up an example: if I wanted to search for rthai estaurants on the upper west side in ny
21:28 < othiym23> methodIST_: the fastest way to learn is to set it up and toss some example docs and queries at it
21:28 < methodIST_> i just want to put "upper west thai restaurant" or "thai restaurant upper west side" etc
21:28 < methodIST_> and get some results with some score to match
21:29 < methodIST_> while my stored restaurants' information is actually arranged nicely in a JSON document with "type: thai" etc
21:29 < methodIST_> othiym23: can elasticsearch do that?
21:30 < methodIST_> ie, should I spend the time with it, or can it not do it to begin with
21:30 < othiym23> you're only going to find out by trying, because I've already shown you the docs that clearly show it can do what you want and you keep asking questions
21:30 < deoxxa> methodIST_: yeah that'll work
21:30 < othiym23> read the docs
21:30 < othiym23> install the software
21:31 < methodIST_> deoxxa: thanks!
21:31 < deoxxa> methodIST_: but as othiym23 said, just install it and poke around. that's the easiest way to see what it does and whether it suits you.
21:31 < deoxxa> methodIST_: it's ridonculously simple to get running
21:32 < methodIST_> othiym23: no need to be inpatient. I'm not familiar with it and I just wanted to ask whether it will serve the purpose, not for you to write me code. Now that I got an answer, I will definitely play around with it
21:33 < othiym23> the fastest way to get familiar with it is to use it, not by asking the same question 3 different ways and outsourcing your research to the channel
21:38 < Kiran> Hi
21:39 < Kiran> Is anyone there to help please?
21:40 < korilo> ask Kiran 
21:40 < deoxxa> Kiran: mathematically speaking, if you preface every question with another question, it'll take you exactly twice as long to get answers as if you just asked your original question
21:40 < korilo> good point deoxxa 
21:41 < asdf12> hmm... how do i finish http response without closing the underlying socket? response.end() closes the socket
21:41 < addisonj> hi, anyone have a gist or module that does file uploads streamed to s3? I see connect-stream-s3 but that hits the disk first,I want to avoid it completely
21:41 < Kiran> ok i to setup a local node project.. use backbone to build a single page application?
21:41 < korilo> Kiran, that's up to you
21:41 < korilo> you can use backbone, angularjs
21:41 < korilo> just one you know
21:41 < Kiran> can you please point me to resources where i can start a project from scratch on my machine and get up and running?
21:42 < korilo> Kiran,  http://coenraets.org/blog/2012/10/nodecellar-sample-application-with-backbone-js-twitter-bootstrap-node-js-express-and-mongodb/
21:42 < korilo> that's just an example
21:42 < korilo> google is your friend though
21:42 < FellowMD> http://howtonode.org/hello-node
21:43 < stantonwjones> asdf: keep alive isn't implemented in node last time I checked
21:43 < FellowMD> https://www.google.com/search?q=node.js+hello+world
21:43 < tjmehta> http://www.runnable.com/nodejs
21:43 < tjmehta> http://www.runnable.com/express
21:43 < othiym23> stantonwjones: Keep-Alive support works in both 0.8 and 0.10, but you have to understand how the agents and client pooling work
21:44 < othiym23> it's much improved in 0.10, but it's still kind of confusing, which I think is one of isaacs's main projects for 0.12
21:44 < stantonwjones> woot, sounds good
21:44 < addisonj> heh, no, its pretty bad
21:44 < Kiran> ok guys i will go through those links.. i dont want to use express yet.. i want to build a sample app.. with node serving index.html
21:44 < addisonj> pro-tip for anyone running at scale: MAX_SOCKETS = 10000
21:44 < othiym23> addisonj: better than it was!
21:45 < asdf12> so
21:45 < othiym23> asdf12: you're gonna want to read up on http.Agent
21:45 < asdf12> ok
21:45 < Christian87> is it not possible to store socket objects in redis?
21:45 < addisonj> or more complet http.defaultAgent.MAX_SOCKETS = some large number
21:45 < MI6> joyent/node: bnoordhuis created branch issue5005 - http://git.io/e1TO7A
21:45 < othiym23> Christian87: what would that even mean?
21:46 < othiym23> asdf12: look at the examples under http://nodejs.org/api/http.html#http_class_http_agent
21:46 < asdf12> so
21:46 < asdf12> that's wild
21:46 < asdf12> i'm looking at express, they just close the socket it appears
21:47 < OliverJAsh> I'm using Kue for a message queue which uses redis. I want to clear the queue but I have no knowledge of redis. Any quick ideas as to how I can do this from the command line?
21:47 < asdf12> othiym23: this is actually in http response, not requests
21:48 < othiym23> asdf12: ah, check out setTimeout on Socket, then
21:49 < Christian87> othiym23: I have this 
21:49 < Christian87> rtc.sockets = [];
21:49 < Christian87> manager.on('connection', function(socket) {
21:49 < Christian87> ...
21:49 < Christian87> rtc.sockets.push(socket);
21:49 < Christian87> ....
21:49 < Christian87> }
21:49 < othiym23> Christian87: no paste! use pastebin / gist!
21:49 < azylman> Please don't paste several lines of code
21:49 < asdf12> othiym23: ahhh this makes more sense, i was getting worried there
21:49 < othiym23> Christian87: and my question is, what would it mean to store the socket in Redis?
21:49 < Christian87> sorry thought 6 lines are ok
21:49 < azylman> No
21:50 < azylman> Nothing more than one line is okay :)
21:50 < Christian87> ok
21:50 < othiym23> the data structure is not the socket, which is a thing in the kernel
21:50 < zeromodulus> Haha... I did it.
21:50 < othiym23> it's not a portable thing
21:50 < Christian87> it will never happen again ;)
21:50 < asdf12> othiym23: though, i'm quickly glancing at express and it appears they don't set a timeout they just close the underlying socket? :OO
21:50 < zeromodulus> I created an Object Key Value Store Mapper.
21:50 < asdf12> which is wild
21:50 < othiym23> asdf12: http://stackoverflow.com/questions/12651466/how-to-set-the-http-keep-alive-timeout-in-a-nodejs-server
21:51 < othiym23> asdf12: you can route around it by adding a handler to the 'connection' event on the underlying http listener
21:51 < Christian87> I tried this JSON.stringify(JSON.decycle(socket)) but i didnt work because i cant reuse it
21:51 < Christian87> i just want to start my application several times for load balancing so i need a central store for the sockets
21:51 < Industrial> Howcome I'm only getting the first of a series of requests in bouncy(fn) in fn? (github.com/substack/bouncy)
21:51 < othiym23> Christian87: exactly, you can't, because it's a concrete part of the network layer, it's not something that can be serialized
21:52 < Industrial> I'm not seeing any 203's in my browser, so bouncy isnt caching
21:52 < asdf12> othiym23: ok, but to side track, express doesn't use this! well i guess the user can add it, but i feel a server should not be closing sockets
21:52 < Industrial> all requests get handled fine but I only see one printed :S
21:52 < othiym23> asdf12: take it up with tjholowaychuk ;)
21:53 < othiym23> there's a lot of stuff that Express does that I would do differently, but it's visionmedia's framework to do with as he / they sees fit
21:54 < Christian87> othiym23: i can´t serialize? so i have to garantee that every user who interact with others goes on the same server? so my only option are cookies 
21:55 < othiym23> Christian87: no, you need a different mechanism to distribute users across multiple servers
21:55 < othiym23> like Redis pubsub + socked.io channels
21:55 < othiym23> s/socked/socket/
21:56 < asdf12> othiym23 or in general, is there a easy way to programmatically know when the OS's fds limit is being reach? so far in my testing it doesn't seem to be
21:56 < asdf12> seems like, the best way is to put a timer for when sockets are being 'ready'
21:56 < othiym23> asdf12: not without parsing /proc or /sys, no
21:56 < asdf12> if it's taking too long assume etc.
21:56 < asdf12> i see
21:57 < MI6> joyent/node: Ben Noordhuis issue5005 * 770c2f6 : doc: implicit fs callbacks don't throw in v0.10  But they will in v0.12.  - http://git.io/TMSFug
21:57 < othiym23> asdf12: but if you're hitting the FD limit, you've got something way fucked on any modern network server
21:57 < asdf12> on the some OSes the fd limit is low
21:57 < asdf12> like on OS X
21:57 < asdf12> (i think)
21:58 < othiym23> asdf12: yeah, but that still gives you a thousand FDs / sockets
21:58 < othiym23> the problem is that the ephemeral socket timeout is 30 seconds, so a lot of activity can exhaust the FD pool
21:58 < asdf12> right
21:58 < othiym23> but you can still crank that up with sysctl without too much difficulty
21:58 < othiym23> asdf12: http://tomkersten.com/articles/server-sent-events-with-node/ has a good example of using Keep-Alive for server-sent events with Express
21:59 < asdf12> i'm trying to find a smart way to thottle things without telling a user hey you need to raise limits etc.
21:59 < asdf12> ie: start aggressively timing out sockets if the fd limit is being reached
21:59 < othiym23> asdf12: that's always going to be somewhat heuristic, and it's probably smarter to let people know they need to jack up their limits for production use up front
22:00 < asdf12> if its not, then take as long as you like socket ;)
22:00 < othiym23> trying to outguess the OS is a recipe for indeterminacy and frustration (for everybody)
22:00 < asdf12> yea
22:02 < othiym23> asdf12: if you want something "smart" / reactive, you're going to want to interface with the networking code directly, and Node probably isn't the best tool for that
22:02 < othiym23> C (or maybe Go) is
22:02 < Industrial> Is it normal to only see one request event on a http server if its keepalive and I refresh 5 times? I am seeing a 200 for each ..
22:04 < asdf12> what
22:04 < asdf12> you should see 5 requests, if you refresh 5 times in the browser
22:06 < Industrial> hm weird.
22:06 < Industrial> I'm using bounchy which using using http-raw which creates a http.createServer() which, in my debugger, during the 5 refreshes only catches the first :|
22:08 < deoxxa> Industrial: take a look at https://github.com/deoxxa/httppp if you want - i'm going to reimplement it properly on the weekend, it's a bit of a hack job right now
22:09 < deoxxa> Industrial: oh, that's not actually helping your question. my bad. i thought you were saying bouncy was being weird.
22:10 < Industrial> no, it's not bouncy and not http-raw either, that's just the http server on that port.
22:10 < asdf12> regex http parserrrrr!
22:10 < asdf12> eww :P
22:11 < deoxxa> asdf12: i know right :P
22:12 < deoxxa> asdf12: gets the job done though! for a limited definition of "the job"
22:12 < Industrial> whats the most common/best reverse proxy in a nodejs environment?
22:14 < deoxxa> Industrial: up until recently, i was using a custom thing with bouncy
22:14 < deoxxa> http-proxy works too, but it's a bit crazy
22:15 < deoxxa> Industrial: things have gotten a whole ton simpler with node 0.10 though - you can do it with just the regular http module for the most part
22:15 < Industrial> since my environment now will have around 10 servers, and it uses seaport, I thought bouncy was a good fit. I guess, in essence, all it has to do is ports.query() at some point in a middleware chain and decode what to do based on that.
22:15 < Industrial> relly
22:15 < superjoe> Industrial, I like amazon ec2 load balancer
22:16 < Industrial> deoxxa: how is it changed, can I pass raw streams through now? or something?
22:17 < bruce_pom> Hi there, please let me know if this is the wrong place for this question or if it's too broad, I'm a Rails developer getting started with node js, with Rails I like to deploy to EC2 using capistrano. Would you guys recommend Capistrano for deploying/starting/stopping node apps?
22:17 < Industrial> (in the respect of having a nodejs proxy, not show me all the api changes :p)
22:17 < deoxxa> Industrial: because "data" events don't have to be manually buffered, you can just hold off on doing the local_request.pipe(remote_request); call until you have all the right information
22:17 < othiym23> bruce_pom: I've done it, and it's fine for simple setups, but Node is different enough from Rails that you start running into rough edges pretty quickly
22:18 < othiym23> bruce_pom: but if you're already comfortable with cap, go for it until you start hitting those limits yourself
22:18 < deoxxa> Industrial: however, that's in theory. i ended up abandoning the node http stuff for my proxy because doing headers and stuff correctly (especially byte-correctly) is a real pain
22:18 < DeathByDoubleDip> othiym23: would the other option be to use Forever?
22:18 < othiym23> DeathByDoubleDip: no, they do different things
22:18 < deoxxa> Industrial: sounds like we have a similar setup - i recently wrote my own service registry that i'll hopefully be releasing soon (pending authorisation from my boss, it was written on work time). it's designed a bit differently to seaport, but is *much* more stable for my use case. want me to keep you posted?
22:19 < Industrial> sure
22:19 < othiym23> DeathByDoubleDip: process monitoring and control is a mon / forever thing, deployment is a Capistrano / fleet thing
22:19 < othiym23> bruce_pom: you might want to take a look at fleet, it's kinda like capistrano and kinda like Zookeeper, but it's pure Node
22:20 < DeathByDoubleDip> will check out fleet as well. thanks!
22:20 < asdf12> substack: http://substack.net/images/seaport.png thats a beauty
22:22 < bruce_pom> thanks othiym23, I'll check out fleet. and se show I get on with Capistrano, I guess I'm curious which is the most popular for medium sized node apps, capistrano is quite dominant with rails but would you say with node that everyone has their ow preferences with deploying?
22:24 < othiym23> bruce_pom: yeah, I would
22:24 < MI6> joyent/node: Gil Pedersen v0.10 * 615d809 : stream: Never call decoder.end() multiple times  Fixes decoder.end() bein - http://git.io/NWHHOQ
22:24 < bruce_pom> othiym23: great, thanks!
22:24 < othiym23> np
22:26 < bruce_pom> Another question related to deployment, if you have a single instance of your node app running is it fine to just run on port 80 or would you usually put it behind nginx or apache in production?
22:26 < asdf12> deoxxa: your http proxy public?
22:26 < asdf12> othiym23: check privmsg :p
22:27 < deoxxa> asdf12: it's httppp and about 10 lines of support code
22:31 < MI6> joyent/node: Ben Noordhuis v0.10 * 7b7235a : doc: add note on process.title max length  Fixes #5006. - http://git.io/T5vlUw
22:33 < Industrial> Can the OS pick a port for me?
22:34 < context> industrial: try ?
22:35 < context> industrial: according to docs you HAVE to define a port. its not an optional param
22:38 < Industrial> So I was thinking about how to come up with a port number automatically, that is usable to listen on.
22:38 < MI6> joyent/node: isaacs v0.10 * 6bd8b7e : fs: Missing cb errors are deprecated, not a throw  Commit a804347 makes f (+1 more commits) - http://git.io/v5XxJQ
22:39 < bnoordhuis> Industrial: .listen(0)
22:44 < Industrial> bnoordhuis: ok
22:52 < substack> asdf12: http://50.17.202.46:9088/code
22:52 < MI6> joyent/node: isaacs v0.10 * 6399839 : Revert "stream: Never call decoder.end() multiple times"  This reverts co - http://git.io/K7vaAA
22:53 < zeromodulus> Is it silly to even think about relationships in key value stores? I mean, even though key value stores technically aren't relational in nature, sometimes the records need to be, right?
22:53 < ChrisPartridge> substack: new website? looks good
22:54 < zeromodulus> Like, it's not taboo to store a reference to another document, right?
22:54 < substack> chr	yep
22:55 < korilo> zeromodulus, no, it's another way of thinking when designing/planning a non relation db
22:56 < korilo> I mean really good data system designed almost perfectly..
22:56 <@Nexxy> othiym23
22:56 <@Nexxy> pin pon
22:57 < othiym23> Nexxy: DONG
22:57 <@Nexxy> KING
22:57 < othiym23> sup
22:57 < othiym23> I love weechat, but its pm notification system is worthless
22:57 <@Nexxy> I wanted to personally invite you to submit a pull request: https://github.com/nodepdx/nodepdx.github.com/tree/master/proposals
22:58 < othiym23> Nexxy: OK, will do!
22:58 <@Nexxy> hardware++
23:00 < othiym23> Nexxy: I take it jerrysv is going to be submitting a talk as well?
23:00 <@Nexxy> othiym23, I'd imagine!
23:00 < MI6> joyent/node: isaacs master * 5e140b3 : Revert "fs: Missing cb errors are deprecated, not a throw"  This reverts  (+29 more commits) - http://git.io/GOJegg
23:00 <@Nexxy> he's also organizing hardware things!
23:00 <@Nexxy> there are two tracks
23:01 <@Nexxy> basically; hands-on hardware hacking and talks
23:02 <@Nexxy> you can flip between the two (obviously), and should be able to keep an eye on talks even when in the hacking area
23:02 < othiym23> it would be a lot easier for me to talk about non-hardware stuff than hardware in that timeframe, mostly because I'm not going to have my pinocc.ios until June and also because I'm up to my eyeballs in Node guts
23:02 <@Nexxy> whatever you're comfortable with!
23:03 <@Nexxy> but if you know anyone else interested in a hardware talk, please encourage them to submit a PR
23:03 <@Nexxy> (either kind of talk; we just need moar hardware content)
23:06 <@mbalho> Nexxy: two confusing things: "We're looking for anything related to JavaScript, not limited to just Node.js" and waht are the speaker accomidations?
23:06 <@mbalho> Nexxy: (Asking in case i refer someone to submit)
23:09 < Industrial> Without putting it into a database, how do I recover scope (e.g. I want to create a server that matches a name to a port on a host) when my server stops? Can I prevent having to re-register all clients?
23:09 < korilo> Nexxy, i wish i could come to portland to attend nodepdx :3
23:10 < othiym23> mbalho: you should refer yourself!
23:10 < othiym23> you can't say you've gone to all the conferences unless you're there too!
23:10 < Industrial> if I save it to a file when changes are made, how do I know for sure that it happens in the right order if I have many concurrent requests?can I have overwriting errors?
23:14 < Industrial> I guess stuff like this can live in redis?
23:15 < othiym23> Industrial: you're gonna have to reregisters all the clients unless you want to get painfully fancy
23:18 < scritch> Does anyone know a way to preserve 64bit ints as strings within express bodyParser?
23:19 < scritch> I'm having issues with json posts to node containing bigints
23:23 < othiym23> scritch: is the data coming into bodyParser as JSON?
23:23 < othiym23> you probably need to make sure any bigints are being submitted as strings
23:24 < scritch> unfortunately i don't have control over the service making the posts... i'm building to their spec
23:25 < erobit> I'm trying to figure out how to have sub modules access an object in my main module… the issue is that I have three levels of requires app.js > routes.js > controllers/a.js, b.js, c.js > models/a.js, b.js, c.js (wanted to define my db connect in app.js) instead of having to include it in every one of my models. Is there a best practice for this?
23:28 < erobit> I'm guessing I create a method that I can set / pass down the include inheritance
23:29 < gblock> hello folks
23:29 < gblock> any npm experts hanging out?
23:29 < gblock> we got a problem with our azure modules and need some insight
23:30 <@mbalho> ask away
23:30 < gblock> ok
23:30 < gblock> so we have 2 node modules
23:30 < gblock> and they are both breaking with > 0.8.x
23:30 < gblock> really bad with 0.10
23:30 < gblock> so we revved both modules
23:30 < gblock> again….adding a node < 9 constraint and setting enginesstrict
23:31 < gblock> but that did not have the desired effect
23:31 < willwh> azure modules? :)
23:31 < gblock> you got it
23:31 < gblock> azure-cli and azure
23:32 < willwh> gblock: you work for ms?
23:32 < gblock> so the result didn't give us what we wanted
23:32 < gblock> yup..I own those modules
23:32 < gblock> :-)
23:32 < gblock> http://github.com/windowsazure/azure-sdk-for-node
23:32 < willwh> very nice
23:32 < gblock> http://github.com/azure-sdk-tools-xplat
23:32 < willwh> love azure for sure (but we are c# house mostly)
23:32 < willwh> I just mess with node for fun
23:32 < willwh> :D
23:32 < gblock> ah
23:32 < gblock> ok
23:32 < gblock> so....
23:32 < gblock> the issue is that now
23:32 < gblock> if one goes to install those modules
23:33 < gblock> and they have > 0.8.x
23:33 < gblock> they end up getting the previous version of the npm module
23:33 < gblock> rather  than getting the version error
23:33 <@mbalho> ahh
23:33 < gblock> which is NOT what we wanted
23:34 <@mbalho> you might go back in git to the previous module version, add the enginesStrict and npm publish -f?
23:34 <@mbalho> oh wait
23:34 <@mbalho> none of them work with > 0.8
23:34 < othiym23> I think "Can one of the admins verify this patch?" is my new catchphrase
23:36 <@mbalho> isaacs: do you know how to prevent a broken module from installing on 0.10.0?
23:37 < othiym23> Jenkins, you are a very chatty thing
--- Log closed Thu Mar 14 00:00:11 2013
