--- Log opened Sat May 25 00:00:02 2013
00:05 < d4rklit3> _6a68 https://npmjs.org/package/bundlr , https://npmjs.org/package/browserify-htmlr
00:05 < _6a68> cool mang
00:07 < d4rklit3> i feel like now that i put shitty code on npm, im legit
00:08 < _6a68> d4rklit3: <insert snide coffeescript joke here> ;-)
00:08 < ckknight> _6a68: harsh
00:08 < d4rklit3> i use coffee so that people have to try to read my code
00:08 < ckknight> :P
00:08 < d4rklit3> :P
00:08 < d4rklit3> its to discourage screwtiny 
00:08 < d4rklit3> scrutiny ?
00:08 < _6a68> ckknight: <insert borderline flamebait coffeescript comment here>
00:08 < _6a68> :-P
00:09 < ckknight> _6a68: oh, I have many issues with coffeescript
00:09 < Probeus> I have a problem with my node.js epxress webapplication keep "flashing" as i browse trough it. Could anyone here help me solve it?
00:09 < ckknight> don't get me wrong
00:10 < mscdex> Probeus: upgrade from internet explorer 1.0
00:10 < _6a68> ckknight: heh, don't get me wrong either—I think it's not for me, but I'm not working to convert the heathen masses to raw JS
00:10 < Probeus> mscdex: this occurs in the newest version of Chrome as well im afraid
00:10 < d4rklit3> i found an interesting issue yesterday, ckknight, in coffe you can't define functions like this:   function myFun() {}. no matter what you do it will always be myFun = function () {}
00:10 < ckknight> _6a68: I wrote my own compiler
00:10 < _6a68> freedom of religion
00:11 < d4rklit3> im going to share something with you guys
00:11 < d4rklit3> i used to be a flash developer
00:11  * d4rklit3 ducks
00:11 < mscdex> Probeus: what do you mean "flashing" ?
00:11 < _6a68> ckknight: nice! I'm…so happy that I don't need to ever worry about decoding errors in generated code.
00:11 < ckknight> d4rklit3: yeah, it's safer in some ways. My compiler makes top-level functions function declarations (rather than expressions) unless they're mutable.
00:11 < d4rklit3> so i like coffee script because of the inheretennce model
00:11 < Probeus> Take a look at this example: http://158.39.124.44:3000/
00:11 < _6a68> d4rklit3: well, hope you're enjoying the JS community :-)
00:11 < Probeus> If you rapidly click through the menu. you can se that the site is white in some seconds
00:11 < ckknight> d4rklit3: you mean its class syntax?
00:11 < Probeus> before it renders
00:11 < d4rklit3> yes
00:12 < d4rklit3> it fools me
00:12 < d4rklit3> into thinking im writing real OO
00:12 < d4rklit3> like as3 or C#
00:12 < _6a68> d4rklit3: I just prefer to use teh inheritance model I need for a given project…which is often none at all. also I understand lexical scope. so, for me it's a million lines of code I just don't need.
00:12 < _6a68> but, whatever helps you get the job done.
00:12 < substack> inheritance is really overused
00:12 < ckknight> well, if anyone has some time to check out http://ckknight.github.io/gorillascript/ and give me some feedback, I'd appreciate it.
00:13 < _6a68> substack: HUGE +1. it's kind of the mark of a junior developer IMO
00:13 < substack> prototypes are a nice way to organize code sometimes but I try not to extend anything that isn't an EventEmitter
00:13 < ckknight> substack: I tend to find that one level of inheritance can be handy at times, but generally not more than that.
00:13 < Havvy> substack: I've not seen a purpose to extend anything that isn't an EventEmitter or other similar thing.
00:13 < d4rklit3> what the hell do you guys work on
00:13 < d4rklit3> thats so l33t
00:14 < Havvy> Well actually, I take that back.
00:14 < ckknight> fun note: no one who is actually "l33t" says "l33t".
00:14 < Havvy> There are a couple tiny things.
00:14 < _6a68> substack: of course, this isn't exactly a new observation: http://en.wikipedia.org/wiki/Composition_over_inheritance
00:14 < d4rklit3> noted,
00:14 < d4rklit3> what makes you guys so l33t
00:14 < _6a68> ckknight: they say 1337 instead
00:14 < ckknight> sure they do
00:14 < chilts> heh
00:14 < ckknight> d4rklit3: practice
00:14 < ckknight> that's really what it comes down to. Tens of thousands of hours of practice.
00:15 < d4rklit3> well whatever, i enjoy doing things with inheretence 
00:15 < Havvy> Anyways... https://gist.github.com/Havvy/940b0fabab7b876090e2
00:15 < d4rklit3> there isn't really a valid argument against it
00:15 < substack> inheritance forces a taxonomy approach that just isn't appropriate most of the time
00:15 < Havvy> Inheritance can only be done once.
00:15 < d4rklit3> as the dude says: "thats just like your opinion man"
00:15 < ckknight> d4rklit3: yes there are. There are several good arguments against.
00:15 < Havvy> Unless you implement a traits framework.
00:16 < substack> say no to frameworks
00:16 < d4rklit3> i build front end apps mostly
00:16 < d4rklit3> i like backbone
00:16 < ckknight> And yes, things may be subjective, but code quality is often a subjective metric, but backed by experience.
00:16 < d4rklit3> and making things pretty
00:16 < durango> why no to frameworks? :/
00:16 < durango> they help prevent countless of re-writing
00:16 < Havvy> substack: s/framework/library then.
00:16 < _6a68> durango: oh no you di-int
00:16 < _6a68> ;-)
00:16 < durango> lol
00:16 < ckknight> durango: lots of tiny libraries that do one thing well > frameworks
00:16 < durango> ckknight: oh i kind of consider them the same thing :/
00:17 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:17 < durango> framework==library :P some libraries/"books" are bigger than others ;)
00:17 < ckknight> monolithism can be handy at times, but is often too opinionated.
00:17 < durango> but yeah agreed with the small stuff
00:17 < Havvy> Frameworks are a single unit. Tiny libraries are not.
00:17 < durango> ckknight: ideally everything should be interchangeable
00:18 < durango> does anyoen know of a really good wdsl library? O_o
00:18 < _6a68> durango: zomg, you must be a java refugee
00:18 < durango> _6a68: I am not :O its for fedex :/
00:18 < _6a68> hahaha
00:18 < durango> altohugh they *may* have XML, I know UPS does
00:18 < d4rklit3> wdsl?
00:18 < d4rklit3> or wsdl
00:18 < durango> wsdl w/e
00:18 < _6a68> I assume you meant wsdl
00:18 < durango> it's all crap to me ;x
00:18 < d4rklit3> yah
00:19 < _6a68> enterprise hacking is not fun
00:19 < durango> if it aint REST API it's crap :P
00:19 < durango> yer
00:19 < d4rklit3> i was like, "nah yo, get cable internet"
00:19 < durango> d4rklit3: im on a company fiber optic right now :P
00:19 < durango> speeds are good ;)
00:19 < _6a68> durango: https://npmjs.org/search?q=wsdl
00:19 < d4rklit3> time warner cable ftl
00:20 < _6a68> there is some stuff
00:20 < durango> oh wow, _6a68 thanks I literally jsut checked this like two weeks ago and had two O_o
00:20 < Havvy> Question: https://gist.github.com/Havvy/940b0fabab7b876090e2
00:20 < _6a68> durango: you using java stack at work? or c stack?
00:21 < durango> _6a68: im iusing nodejs to talk to fedex :p
00:21 < _6a68> because this all percolated out of java-land, you might be better off using java libraries via rhino
00:21 < _6a68> ah, cool
00:21 < durango> which requires me to use wsdl
00:21 < _6a68> wsdl. hilarious.
00:21 < durango> i know :/
00:21 < _6a68> nah, use node.
00:21 < d4rklit3> how do i do a push request or w/e on github
00:21 < _6a68> I'd only suggest java if your ops people were java types.
00:21 < durango> easysoap looks nice! thanks
00:21 < _6a68> good luck
00:21 < d4rklit3> i want to submit a change to coffeeify
00:21 < durango> _6a68: i technically alreayd have it, but I want otre-write my entire library :)
00:21 < _6a68> d4rklit3: google is your friend
00:21 < durango> and fully cover everything
00:22 < _6a68> ah
00:22 < d4rklit3> no its not _6a68,  it keeps giving me bad info :P
00:22 < _6a68> heh
00:23 < d4rklit3> well i have one more issue i need to resolve
00:28 < kspacecpp> foolin
00:29 < kspacecpp> can
00:30 < kspacecpp> Just
00:30 < kspacecpp> Just
00:31 < kspacecpp> Just
00:33 < mscdex> Probeus: to me that would be expected behavior. it's not like it's an SPA
00:38  * mscdex shakes a fist at npm spammers
00:38 < Havvy> npm spammers?
00:38 < mscdex> https://npmjs.org/~jf7
00:39 < mscdex> isaacs: ^
00:40 < ckknight> mscdex: there should be a way to penalize folks like that
00:41 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * b38c9c1 : unix: remove erroneous asserts - http://git.io/hOu5rQ
00:41 < mscdex> at the very least, some kind of trigger for people who publish x new modules in n time
00:44 < d4rklit3> substack, if i have a transform that enumerates all the files inside the bundle before the transform that compiles them, shouldn't i have that list of files before a potential syntax error strikes?
00:44 < Sxw1212> sometimes
00:44 < Sxw1212> ack
00:44 < Sxw1212> wrong channel, sorry
01:02 < deoxxa> mscdex: i'm only seeing a couple of modules on that guy's page - what did it look like bfore?
01:02 < deoxxa> *before
01:02 < ckknight> deoxxa: about 17 modules or so
01:02 < deoxxa> ah
01:02 < ckknight> no, wait
01:02 < ckknight> a full list plus 19 more
01:02 < deoxxa> oh lol
01:02 < deoxxa> what a jerk
01:03 < deoxxa> then again... https://npmjs.org/~deoxxa
01:03 < ckknight> words like "and", "room", "show"
01:03 < deoxxa> oh lol
01:03 < ckknight> deoxxa: those look like real packages, though
01:03 < ckknight> I'm not gonna fault you on that
01:03 < deoxxa> yeah they are :P
01:08 < nightfly> Does javascripts eval happen in the global, local, or some special context?
01:08 < ckknight> nightfly: depends.
01:08 < Havvy> !eval
01:08 < nightfly> ckknight: On what?
01:08 < ckknight> nightfly: if used directly, it executes in the local scope. If used indirectly, it executes in the global scope.
01:08 < ckknight> e.g. eval("blah") is different from (0,eval)("blah")
01:09 < ckknight> if I need to compile something dynamically, I wrap it in a Function, then call that as-needed.
01:09 < deoxxa> ckknight: that syntax is devious and impressive. my hat is off to you.
01:11 < ckknight> deoxxa: also, eval can be either a statement or an expression, based on how it's used.
01:11 < nightfly> Interesting, does the indirect form happen in the real global in a node module or does it behave how variables behave?
01:12 < ckknight> how variables behave?
01:12 < nightfly> yeah, poorly worded sentence
01:13 < nightfly> How packages seem to have their own 'global' score that is different from the global scope of the requiring script.
01:13 < nightfly> *score
01:13 < nightfly> *scope
01:13 < substack> modules have a local scope
01:13 < substack> like closure scope
01:13 < ckknight> modules are in a function
01:14 < ckknight> it's just one level lower than the global scope, nightfly
01:15 < d4rklit3> substack, do the transforms run async or in order?
01:15 < d4rklit3> i tried looking @ the source.... confusing
01:17 < ckknight> d4rklit3: transforms?
01:19 < standoo> natz
01:19 < standoo> hello
01:32 < d4rklit3> ckknight in browserify
01:32 < ckknight> ah.
01:32 < nightfly> Alright, direct form is probably what I'll want anyways. Planning on writing yet another Lisp-like language in javascript.
01:32 < d4rklit3> i got everything working except if the compiler throws an error I lose my watchlist. 
01:33 < ckknight> nightfly: I've done that before :P
01:35 < ningu> I have an express route I want to implement that will have paths like /foo/count, /bar/count, etc. it will be in the same in every controller. basically I want the count handler to call foo() and bar() in each controller, where each controller defines its own foo() and bar().
01:35 < ningu> any idea how I can do that?
01:35 < nmartin> I am trying to test one of my modules. I have created a node app and created the node_modules folder just as you would have if you had run npm install. There within I have symlink to the module under test. The module cannot be found by node. Can someone tell me how to do this?
01:36 < ningu> I know the name of the methods I want to call but I don't see how to make them acccessible form the closure where the count method will be defined.
01:36 < ningu> and putting them on req/res doesn't work because they are different in every controller.
01:36 < ningu> I'm thinking I might just export them from each controller module and require() it...
01:37 < ckknight> ningu: yeah, I find having a big routes file that requires other files that provide route implementation is a pretty nice way of doing things
01:38 < ningu> this is a bit more complicated though
01:38 < ningu> it's the same route across many controllers
01:38 < ningu> but with by-controller variations in detail
01:40 < ningu> I think I see how to do it though
01:51 < jesusabdullah> yo anyone here use engine.io? https://github.com/LearnBoost/engine.io-client/issues/160
01:55 < jesusabdullah> nobody? :(
01:55 < macbn> anybody knows a good image resize middleware that can automatically resize from url?
01:57 < jesusabdullah> image resize middleware?
01:57 < jesusabdullah> idk what you mean macbn 
01:57 < macbn> something like you can request http://localhost/image/someimage.jpg?size=200x200
01:58 < ningu> macbn: would be very easy to write your own using gm
01:58 < ningu> there is a gm module
01:58 < macbn> gn?
01:58 < macbn> graphics magic?
01:59 < ningu> yes
01:59 < macbn> how about imagemagick?
01:59 < ningu> same difference pretty much
01:59 < ningu> gm is a bit more flexible iirc
02:00 < jesusabdullah> there are modules for both
02:00 < ningu> yeah, I figured
02:00 < macbn> there are some npm like https://github.com/zivester/node-quickthumb
02:00 < macbn> but only 3 stars
02:00 < jesusabdullah> also that's really not the worst idea, that could be neat combined with a static fileserver
02:00 < ningu> who assigns stars?
02:00 < macbn> i couldnt find any npm with many stars
02:00 < ningu> just look at the code
02:00 < jesusabdullah> you do ningu 
02:00 < ningu> or how often it's been updated
02:00 < ningu> or whatever
02:01 < macbn> 7 months ago
02:01 < jesusabdullah> that's why stars are worthless, only like a dozen people actually star projects
02:01 < ningu> yeah, I never even noticed they existed
02:01 < jesusabdullah> also easy to game, you just tell all your employees to star all your open source projects
02:01 < macbn> this kind of functionality should have many people would want to use it
02:01 < macbn> i wonder why there is no populr npm for this
02:01 < ningu> number of downloads can be useful if you just want to know, what's the most commonly used redis client or whatever
02:01 < jesusabdullah> macbn: probably nobody wanted that particular set of functionality
02:02 < ningu> yeah, don't assume your needs are universal
02:02 < jesusabdullah> macbn: I'd write a middleware that saves the querystrings for a request and on the response modifies the body if the header is set to an image mime type, something like that
02:02 < jesusabdullah> macbn: I won't lie, to me that sounds a bit gnarly
02:02 < macbn> i can use css to resize image and crop image maybe
02:02 < macbn> maybe this is why
02:02 < macbn> people dont usually resize image on the fly
02:02 < jesusabdullah> well
02:03 < jesusabdullah> you can cache the results
02:03 < jesusabdullah> macbn: actually if you make your middleware mount a specific directory and you pass your own response handler to the static middleware it might not be so bad, take a look at ecstatic or use connect's static server mw, either way
02:03 < macbn> there should be a css library that can resize and crop images
02:04 < jesusabdullah> except that wouldn't decrease the amount of uploaded migs/megs
02:04 < ningu> migs?
02:04 < ningu> I wish I could upload a mig
02:04 < jesusabdullah> http://hrwiki.org/wiki/video_games ctrl-f migs and megs
02:04 < ningu> macbn: css is declarative
02:07 < AnalogJ> anyone know how to get the client requested hostname of a tcp socket server?
02:07 < AnalogJ> I created a question on Stackoverflow if you want more details http://stackoverflow.com/questions/16745745/nodejs-tcp-socket-does-not-show-client-hostname-information
02:08 < macbn> is there any good javascript syntax for vim
02:09 < macbn> i found several on github and not is close to perfect
02:19 < ningu> if I define function foo() at the top level of a module, can I access foo as the property of a global object?
02:19 < ningu> global.foo and module.foo don't work
02:20 < ckknight> ningu: node.js modules are not run in the global scope, they're run below the global scope
02:20 < ckknight> i.e. wrapped in a function
02:20 < ningu> hmm ok
02:20 < ckknight> please do not assign globals in node
02:20 < ckknight> there are better ways to expose your data
02:20 < ckknight> exports.func = func;
02:20 < ningu> actually what I want to do is module.exports = function() { ... } and add attributes
02:21 < ckknight> alright
02:21 < ckknight> so do that
02:21 < ningu> well, I need a bunch of likes like modules.exports.foo = foo; where I repeat module.exports each time
02:21 < ningu> which is slightly annoying
02:22 < Havvy> ningu: module.exports = { foo : foo, bar : bar }
02:22 < ningu> Havvy: then I lose the function
02:22 < ckknight> Havvy: module.exports = func; func.foo = foo;
02:22 < ningu> hmm
02:23 < ningu> I think I'll just do it a different way
02:23 < ckknight> or exports = module.exports = function() { }; exports.foo = foo;
02:23 < Havvy> for (var obj in exports = {foo : foo, bar : bar}) { module.exports[obj] = exports[obj] }
02:24 < ningu> I suppose
02:24 < ningu> seems a bit confusing for others to read
02:24 < ningu> I'm just going to make the module.exports function be an attribute
02:24 < ckknight> what's an attribute?
02:25 < Havvy> property
02:25 < ningu> module.exports = { init: init, foo: foo, bar: bar };
02:25 < ckknight> sure, that would work fine
02:25 < ningu> where init used to be directly in module.exports
02:25 < ckknight> ningu: or you could just set exports.blah = whatever throughout your code
02:25 < ningu> yeah, I know
02:26 < ningu> but that has its own annoyances
02:26 < ckknight> I use a compile-to-JS language, often my last line is exports <<< { alpha, bravo, charlie } or module.exports := func <<< { alpha, bravo, charlie }
02:28 < begizi> I am very new to node. Part of an app I want to build will require a process running while the user is not logged in to filter through tweets from twitter for that user and send out an email periodically. Is node going to be the right choice to handle this? The reason I want to use node is I know javascript (I come from front end javascript MVC frameworks) and I wanted to use sockets extensively
02:29 < Havvy> begizi: Yes.
02:31 < begizi> havvy: Even if I were to get hit with a lot of traffic and had thousands of processes? Hypothetically of cource
02:31 < Havvy> You wouldn't want to start thousands of processes.
02:31 < Havvy> You'd have one or two processes.
02:31 < Havvy> A process for sending out emails periodically and a process for the web server.
02:32 < accc> clusterhub
02:32 < begizi> How would to structure an app that needed to accomplish that
02:33 < ningu> begizi: you should just read about evented programming in node in general and with sockets in particular
02:33 < Havvy> ^^
02:34 < reuf> lets say i have my app deployed to multiple instances on VM's
02:35 < reuf> writing a load balancer for this?
02:35 < reuf> how complicated would it be
02:35 < reuf> ?
02:35 < ningu> probably not very hard, but why write your own?
02:35 < reuf> where to look for already written ones? 
02:35 < ningu> google
02:36 < reuf> ningu, thanks - that was an amazing disocvery
02:36 < reuf> what would i do if it wasnt for you
02:37 < Havvy> You would write a load balancer.
02:39 < begizi> Havvy: I have some code now. I am using ttezels twit api client from github and once a user authenticates it creates a new instance of the twit object and starts their steam. I feel like this is too resource intensive. What would be a better way to start parsing a users stream?
02:40 < Havvy> Stream != Process
02:40 < Havvy> And I'm not sure.
02:41 < Havvy> Last time I looked at the Twitter API, it kind of looked like they were trying to not allow things like that with their limits.
02:41 < ningu> begizi: what exactly are you saying is too resource intensive?
02:44 < begizi> ningu: I don't know if it is or not. It is only a gut feeling that the way I have it now wouldn't handle a lot of users very efficiently
02:45 < begizi> ningu: I'm probably just paranoid because this is my first real node project.
02:46 < ningu> I would just test it
02:47 < begizi> Any tips for testing? It needs the twitter oauth authentication before it will start that users stream
02:47 < accc> http://nodeguide.com/
02:47 < accc> maybe this will help to find out
02:50 < accc> btw with clusterhub u can use the full power of ur machine, by starting one worker process for every cpu
03:04 < flyinprogramer> so i'm on a mac, i've used the brew to install node, then removed it, and have used the node mac installer; i'm using a project that use grunt; i do what all the other people on my team do, which is 'npm install'  -- and it creates a node_modules folder; BUT unlike the rest of my team, i have to do ./node_modules/.bin/grunt  in order to run grunt; instead of just being able to do 'grunt' --- how do i fix this ?
03:05 < ningu> npm install -g grunt-cli
03:05 < ningu> it's in the grunt doc
03:05 < ningu> s
03:06 < flyinprogramer> ningu: but no one on my team has to do that
03:06 < flyinprogramer> it just works for them
03:06 < ningu> doubtful
03:06 < deoxxa> flyinprogramer: two different things you can do. 1) add ./node_modules/.bin to your $PATH, or 2) add a "script" entry to your package.json and use `npm run-script <whatever>' (see https://npmjs.org/doc/scripts.html)
03:07 < ningu> flyinprogramer: ./node_modules/.bin won't just magically be in the PATH
03:07 < flyinprogramer> ok - the installer doesn't set that up for me
03:07 < deoxxa> no - nor should it
03:07 < flyinprogramer> exporting that, obviously fixes it
03:07 < flyinprogramer> sorry for not using my brain
03:07 < ningu> you can globally install grunt, that's fine too
03:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:07 < deoxxa> doing that involves modifying other system files, which is a "no no"
03:07 < ningu> sorry, grunt-cli
03:08 < ningu> but keeping it all in one dir is more self-contained I suppose
03:08 < flyinprogramer> ok :) thanks guys 
03:08 < deoxxa> ningu: i have ./node_modules/.bin in my path so i can have different versions of "global" utilities installed (think uglify, mocha, etc)
03:09 < ningu> oh, yeah
03:09 < ningu> I forgot that you could put relative things in PATH but that makes sense
03:09 < deoxxa> ningu: i also have them installed globally, though, so if it's not installed in the project it gets whatever my global version is :>
03:09 < deoxxa> unix ftw
03:09 < ningu> :)
03:09 < flyinprogramer> :)
04:54 < reet_teer> fuckers
05:08 < macbn> i have function that do callback inside a loop
05:08 < macbn> how can i break the loop and the rest of the function after it reaches the callback
05:09 < macbn> it seems that the loop continues even after the callback
05:09 < macbn> and do multiple callbacks
05:09 < deoxxa> macbn: yes, that's how it works
05:09 < macbn> so how can i stop it
05:10 < deoxxa> macbn: easiest way would be to use one of the eleventy billion flow control libraries available from npm, the most popular probably being async (http://github.com/caolan/async), and use an asynchronous "forEach" thing to process your list of things
05:11 < macbn> ok
05:11 < macbn> so there is no way to break or exit the function
05:11 < jesusabdullah> macbn: return
05:11 < macbn> i like async, but im feeling kind of lazy to modify the codes
05:12 < macbn> im using forEach(function)
05:12 < deoxxa> well there is, but the problem is that it's (probably) running after your loop is finished
05:12 < macbn> it doesnt return
05:12 < jesusabdullah> hold on a sec
05:12 < deoxxa> i.e. if you do like
05:12 < deoxxa> urls.forEach(function(url) { request(url, function(err, res, data) { return; }); })
05:13 < deoxxa> the request callbacks are probably all running long after your urls.forEach loop finished
05:13 < macbn> ya
05:14 < deoxxa> so it's like asking "can i make my program go back in time and stop something from happening that already happened"
05:14 < macbn> lol
05:14 < deoxxa> the answer to that, until we figure out this quantum computing thing, is no
05:14 < macbn> it php i was just do return
05:14 < macbn> return value
05:14 < macbn> and everything stops on return
05:14 < deoxxa> php isn't asynchronous though (usually)
05:14 < jesusabdullah> macbn: https://gist.github.com/jesusabdullah/3742dcf6b83c9b5e93b3
05:14 < macbn> yes its blocking
05:15 < jesusabdullah> macbn: you probably want to keep count of how many of these you process and then hit your callback when you've done them all, something like this
05:15 < macbn> ya but at the end of the loop
05:15 < macbn> i also have a callback for other thing
05:16 < macbn> its like  search function
05:16 < macbn> the end returns false
05:16 < Wraithan> jshint is telling me http://dpaste.de/hVk0g/#L5 is a redefinition of Set, but there doesn't appear to be a global set object
05:16 < macbn> the callback in the loop is search found
05:16 < jesusabdullah> well macbn that's just a hint
05:16 < macbn> ya
05:16 < jesusabdullah> if I were you I'd just pull in async
05:16 < macbn> its a smart way of doing i think
05:16 < jesusabdullah> use the one that works for you
05:16 < macbn> ok ill se async
05:16 < jesusabdullah> and if you want to by-hand it later just read up on how the method you use works and, y'know, whatever
05:17 < macbn> but which async should i use
05:17 < macbn> i cant use doUntil
05:17 < macbn> i need the loop to stop on certain condition
05:17 < macbn> this condition may happen and may not happen until the loop ends
05:18 < macbn> detect?
05:18 < macbn> async.detect?
05:22 < jesusabdullah> macbn: https://gist.github.com/jesusabdullah/3742dcf6b83c9b5e93b3 more like this?
05:24 < macbn> ok ill try
05:24 < macbn> thanks
05:27 < macbn> i just found out theres array some
05:28 < macbn> maybe this would work
05:36 < owen1> anyone using some browser acceptance tests? what library do u use?
05:39 < substack> owen1: what is an "acceptance test"?
05:42 < owen1> substack: good question(: in the ruby world i used to test some happy paths using capybara - running my website and hitting a few webpages to validate some text on the screen.
05:43 < owen1> it's the closest tests for humen tests
05:43 < macbn> that Array.some works!
05:43 < macbn> nice
05:43 < owen1> but automated
05:43 < owen1> i heard about zombie but not sure if i really need it. so far for api i use  tape, but maybe for more complex websites it's not enough.
05:43 < substack> owen1: https://github.com/substack/browser-launcher https://github.com/substack/schoolbus
05:45 < substack> also `npm install -g testling` gives you a `testling` command that reads source from stdin such that `browserify test/*.js | testling` will output the TAP from real browsers on stdout and give you a proper process exit code based on the test output
05:47 < owen1> substack: thanks!
06:13 < ningu> I implemented my own rate throttling code for my api. now I've switched to restify and am using its plugin. restify rejects the request with status 429 when the user has exceeded their limit. what I did was delay the response i.e. force them to comply with the limit.
06:13 < ningu> is there a good reason to do it the way restify does it instead?
06:14 < ningu> I guess it makes them fix their code to respect the rate... but it also means more work for the user.
06:15 < yawnt> deoxxa: stop tweeting your gh
06:15 < yawnt> it's annoying
06:15 < yawnt> :P
06:16 < deoxxa> lol
06:16 < Havvy> ningu: I can't imagine a good reaosn.
06:16 < Havvy> *reason
06:17 < ningu> Havvy: a good reason for restify's way or my way?
06:17 < Havvy> A good reason for one over the other.
06:17 < ningu> oh.
06:18 < yawnt> deoxxa: i already follow you on github
06:21 < deoxxa> yawnt: yeah i think it might be a bit overactive
06:21 < ningu> yawnt: unlike in some countries, we give our citizens the right to decide who they follow on twitter ;)
06:22 < deoxxa> i think i might cut it down to creation events
06:22 < yawnt> wonderful
06:22 < yawnt> :D
06:22 < deoxxa> there we go
06:28 < macbn> hwo can i get a string inside [] with regex
06:28 < macbn> something like aa[bb];
06:28 < macbn> i want to get bb
06:29 < Havvy> >> "aa[bb]".match(/\[([a-zA-Z]+)\]/)
06:29 < purr> Havvy: (object) ['[bb]', 'bb']
06:29 < ningu> hrm, match() returns captures?
06:29 < ningu> didn't realize that
06:30 < Havvy> >> "aa[]".match(/\[([a-zA-Z]+)\]/)
06:30 < purr> Havvy: (object) null
06:31 < ningu> oh, I see. match's return value varies depending on the g flag.
06:42 < macbn> ok
06:43 < juboba> hey
06:44 < juboba> is it possible to establish a persistent connection using socket.io? I mean, when the user changes from page to page, instead of creating a new handshake reusing the one that had before?
06:44 < ningu> juboba: I don't think so
06:50 < juboba> ningu, I have a chat on my website. Any ideas?
06:50 < juboba> ningu, everytime you load a page a new handshake is created :(
06:50 < ningu> well, you can always send the previous chat context over on the new page
06:50 < ningu> or just make it a single page app
06:51 < macbn> is there any function to make unique array of object 
06:51 < macbn> like [Object, Object, Object, Object]
06:51 < ningu> macbn: you mean reduce an array to all of the unique elements in it?
06:51 < macbn> i want to make them unique according some certain key
06:52 < ningu> what are you trying to do? you need to be more specific
06:52 < macbn> ya remove the duplicates
06:52 < macbn> like for exampe [{id: 11}, { id: 12} , {id: 13}, {id: 11}]  
06:52 < ningu> you can use _.uniq in underscore
06:52 < macbn> i want to remove the 11
06:53 < macbn> i tried but it doesnt work
06:53 < ningu> remove both of them or just one?
06:53 < ningu> you need to use the iterator function
06:53 < macbn> leave one
06:53 < ningu> _.uniq(array, function(item) { return item.id });
06:53 < macbn> oh
06:53 < macbn> ok
06:53 < macbn> i will try
06:53 < macbn> nice
06:53 < macbn> what i did was
06:53 < macbn> var unique = _.uniq(array);
06:54 < ningu> yeah, that works for arrays of strings or numbers
06:54 < macbn> ok it works!
06:54 < macbn> thanks
06:54 < macbn> what do you think of lazyjs
06:54 < ningu> nothing, since I don't know what it is
06:55 < macbn> http://dtao.github.io/lazy.js/
06:55 < macbn> this one
06:56 < macbn> it says Like Underscore but lazier
06:56 < macbn> but it also says This library is experimental and still a work in progress.
06:57 < ningu> looks reasonable
06:58 < ningu> yeah, I have no idea about stability but it looks like a decent idea
07:00 < macbn> yes
07:00 < macbn> my array gets messed up cos of async each
07:00 < ningu> huh?
07:00 < macbn> i want to resort it as original
07:01 < macbn> like i iterate it using async each and push it to another array
07:01 < ningu> so what's the problem?
07:01 < macbn> the sorting gets messed up
07:01 < ningu> what sorting?
07:02 < Havvy> Yes....sorting gets messed up with async pushing.
07:02 < Havvy> If the sorting is based on a property of the results, sort on it afterwards.
07:02 < macbn> async.each([ 1, 2, 3, 4, 5], function(num, callback) {  otherArray.push(num) }
07:02 < Havvy> If not, add such a property.
07:02 < ningu> yeah, because async.each doesn't happen in a well defined order
07:02 < macbn> otherArray can be like [5, 2, 1,4, 3]
07:03 < ningu> you can do eachSeries but that is much worse than Havvy's idea
07:03 < macbn> the problem is its not based on anything
07:03 < ningu> so why does it matter?
07:03 < ningu> the order must have come from somewhere
07:03 < macbn> it comes from a sentence
07:04 < macbn> "something one two thre".split(' ');
07:04 < macbn> after async.each
07:04 < ningu> oh
07:04 < macbn> it can be "one something two thre"
07:04 < ningu> why not use async.map?
07:04 < ningu> since it sounds like that is what you are doing
07:04 < macbn> oh
07:04 < macbn> is it also non blocking?
07:04 < substack> https://github.com/substack/hyperspace <-- reuse the same rendering logic in node and the browser
07:05 < ningu> macbn: sure, all of the async methods are
07:05 < ningu> macbn: but I don't know what you are actually doing
07:05 < ningu> it sounds like you are transforming the results of foo.split(' ') into something else
07:05 < macbn> map seems to mess things up too
07:06 < macbn> the sort
07:06 < macbn> mess the sort
07:06 < macbn> ya
07:06 < macbn> into other array
07:06 < ningu> macbn: you will get the mapped results in the final callback
07:06 < ningu> don't use push
07:06 < ningu> and read the docs :P
07:07 < guest0> hi i! is there a hardcoded limit for the json parser in nodejs like in chromium ?...
07:07 < ningu> limit on the size of the string it will parse, you mean?
07:07 < hashset> any tricks to get pixel info server-side of images passed in a request?
07:08 < ningu> what do you mean by "images passed"?
07:08 < guest0> kinda ... i end up with "parser error"  in browsers when trying to parse more than 8 or 16k
07:08 < ningu> guest0: whatever the limit is, it's much larger than that
07:08 < ningu> probably just based on memory
07:08 < guest0> i hope so :-)
07:08 < guest0> i hate xml
07:08 < hashset> ningu: via req.files
07:08 < ningu> I think there is a heap limit of 1GB or so, I can't remember, but you can change it
07:09 < guest0> thanks
07:09 < ningu> hashset: oh. sure, just use whatever image manipulation tool you want
07:09 < macbn> i just read the docs
07:09 < macbn> i also ignore some entry
07:09 < macbn> and the result in the final callback has undefined
07:10 < ningu> macbn: hmm...
07:10 < macbn> i skip using callback(null, null);
07:10 < macbn> it becomes [Object, null, Object, Object, null]
07:10 < ningu> and you don't know if you want to skip until the async operation?
07:11 < macbn> how can i skip it
07:11 < macbn> i know what to skip
07:11 < macbn> when i want to skip i put callback(null, null)
07:11 < ningu> macbn: yes, but do you know *before* the async.map?
07:11 < hashset> ningu: like imagemagick?  any way to do it without installing software outside node_modules?
07:11 < macbn> no
07:12 < ningu> hashset: good question. I don't know, there might be some modules for it
07:12 < macbn> it checks inside the async.map
07:12 < macbn> install imagemagick is easy
07:12 < macbn> just use package manager
07:12 < ningu> macbn: you could use async.filter, but then you have to do it twice. so what I would do is something like this:
07:13 < guest0> for browsers theres a javascript parser for json called json2.js (maybe others too) to break the parser input size limit
07:14 < macbn> i can filter the final result for null
07:14 < macbn> filter null entry
07:14 < ningu> macbn: yes, you can do that too
07:14 < ningu> it's probably easier than what I was going to suggest
07:14 < macbn> what were you thinking
07:14 < ningu> I was going to suggest creating a new array of the form [['a',0],['b',1]] and using async.each
07:15 < ningu> and then replacing the elements in the new array
07:15 < ningu> you can do var newarray = oldarray.map(function(item, i) { return [item,i] });
07:15 < macbn> oh still involves two stages iteration
07:15 < ningu> yeah
07:15 < ningu> not really better
07:15 < macbn> so its the same cost 
07:15 < macbn> ill just filter the null at the end
07:15 < macbn> thank you
07:16 < ningu> yeah. just foo = foo.filter(funtion(item) { return item !== null });
07:18 < macbn> yes
07:18 < macbn> now i understand what the iterator in underscore means
07:18 < ningu> :)
07:18 < eddyb9> hi, I'm looking at this commit (which got reverted later) https://github.com/joyent/node/commit/b48e303af023dc60b6f6590694ba94d9b8108702
07:19 < eddyb9> why don't you just use Object.create(null)?
07:19 < eddyb9> that's devoid of anything harmful, even setting __proto__ on it
07:19 < Territoriojoven> how do I start using node ?
07:19 < ningu> Territoriojoven: there are install instructions on nodejs.org
07:19 < eddyb9> maybe I should put that observation in an issue, but I'm on my phone
07:20 < ningu> irc from a phone? I've never done that :)
07:20 < Territoriojoven> I already installed it
07:20 < Territoriojoven> but I don't know how to use it
07:20 < ningu> Territoriojoven: then read a tutorial :)
07:20 < substack> Territoriojoven: type `node`
07:20 < substack> now you're in the repl
07:20 < Territoriojoven> where's a good one?
07:20 < substack> play around
07:20 < eddyb9> ningu: n900, but xchat is kinda derpy
07:20 < Territoriojoven> substack: where
07:20 < ningu> from the terminal
07:21 < Territoriojoven> then wut
07:21 < ningu> but if he doesn't know js it will be a repl without a cause
07:21  * Territoriojoven is noob mad skilllzz
07:21 < deoxxa> ningu: i...
07:21  * deoxxa clutches chest
07:21 < eddyb9> deoxxa: oh hi
07:21 < ningu> Territoriojoven: then you'll be in node's repl and you can type in one line js expressions and it will give you the result
07:22 < eddyb9> or multiple line statements
07:22 < deoxxa> sup eddyb9
07:22 < eddyb9> if it's a syntax error, you get a new line rather than evaluation when pressing enter
07:23 < Territoriojoven> how do I open a file?
07:23 < ningu> Territoriojoven: ok, now you really do need a tutorial :P
07:23  * Territoriojoven facepalms himself embarrased
07:23 < eddyb9> deoxxa: not much. looking at EventEmitter, trying to figure out if it can be the reason my decompiler is so slow
07:23 < ningu> the standard library reference is at http://nodejs.org/docs/latest/api/index.html
07:23 < ningu> but you still need to know javascript
07:23 < eddyb9> deoxxa: verdict so far: "most likely"
07:23 < deoxxa> eddyb9: i think it's slow because it's unhappy
07:23 < deoxxa> eddyb9: try putting comments with smiley faces
07:24 < ningu> decompiler? what does that mean in the context of node?
07:24 < deoxxa> array.map(function(e) { /* :D */ return e; })
07:24 < eddyb9> I mostly have // HACK comments
07:25 < eddyb9> ningu: nothing node-specific other than being written in ES6
07:25 < ningu> so what are you decompiling?
07:25 < eddyb9> anything executable
07:25 < ningu> oh, it's an asm decompiler
07:25 < eddyb9> asm decompilers aren't decompilers
07:26 < Havvy> No. No. Use smilies as comments.
07:26 < macbn> my codes are so complex, it was slow in php, now its just fast
07:26 < Havvy> array.map(function (e) { :D Kill me now :D return e; });
07:26 < ningu> eddyb9: what I mean is you are decompiling asm into something else
07:26 < eddyb9> they're de-translate-to-asm-ers
07:26 < macbn> i have to cache many things in php in order to be fast, right now its real time processing
07:26 < eddyb9> and they suck big time
07:27 < Havvy> decompiled
07:27 < eddyb9> macbn: because PHP is dumb and has no JIT
07:27 < Havvy> PHP: Cache everything. ;)
07:27 < macbn> so as everything
07:27 < macbn> all blocking stuffs
07:27 < ningu> macbn: some time you should look at streams as well -- sometimes you can start returning the first results before the rest are ready
07:27 < ningu> depends on what you are doing
07:28 < macbn> this shows enough improvements already
07:28 < eddyb9> ningu: I have x86, arm, 8051 backends, and windows/linux platform "layers" (they provide C type info related to imports)
07:28 < macbn> and this improvements is on my localhost old macbook pro, not on the server
07:28 < ningu> once you understand node well enough you should also be able to clean up the code so it isn't so bad
07:29 < macbn> ya, right now lots of callback hell
07:29 < macbn> cos i was just translating from php directly
07:29 < ningu> my first node app was like that, but I've learned since then :)
07:30 < macbn> i use async, but my code itself is complex
07:30 < macbn> i dont know how can i improve it again
07:30 < macbn> but im sure theres a way to improve it
07:31 < ningu> macbn: give names to your functions, and don't insert them inline
07:31 < macbn> so there will be many function?
07:31 < macbn> even for single operation that is not going to be called again?
07:31 < ningu> you can put the functions inside a closure if they need to share context
07:31 < ningu> macbn: sure, sometimes
07:31 < macbn> like a function that will only be called in one location
07:31 < eddyb9> ningu: in traceur-compiler, I have Deferred-compatible wrappers for the fs module and timeouts/nextTick, but it's possible to add more support
07:32 < ningu> eddyb9: so it translates assembly in to C, or what?
07:32 < eddyb9> ningu: that allows someone to use linear async via the await keyword
07:32 < macbn> ok
07:32 < ningu> macbn: it's up to you, but a lot of us think it looks cleaner that way
07:32 < ningu> and it means you can reuse the code later if you want to
07:32 < macbn> ya i will do that later 
07:33 < eddyb9> await data = fs.readFile('foobar'); await fs.writeFile('output', data);
07:33 < ningu> eddyb9: oh, didn't realize you were responding to the callback stuff
07:33 < eddyb9> ningu: as I said, that's not a decompiler. I don't use asm, except when my backends fail and I need to debug :)
07:34 < eddyb9> ningu: to clear up some confusion, traceur-compiler is ES6-to-ES5
07:34 < ningu> so ES6 has await?
07:35 < ningu> my concern with implementations of that sort has always been the error handling... I haven't seen it done right yet, or at least, haven't seen anyone go into the details to convince me
07:35 < eddyb9> it cannot be done right, sadly
07:36 < ningu> really?
07:36 < ningu> you mean not in ES5 or not in JS?
07:36 < ningu> err what I meant was: not in traceur-compiler's ES5 output
07:36 < eddyb9> right now you have to use try/catch around ES6 await
07:37 < ningu> well, that works
07:37 < ningu> it's kind of ugly
07:37 < eddyb9> if you don't have a try around any await, it will just propagate into an event queue where nobody will find it
07:38 < ningu> yeah... the callback api has always had the advantage of making the error hard to ignore
07:38 < eddyb9> it's impossible to detect an uncaught async error, because it's design to allow later "catching"
07:38 < eddyb9> *designed
07:38 < eddyb9> you would need a weakref trickery to actually detect such a condition
07:39 < eddyb9> a brace-less try/catch would be useful
07:40 < eddyb9> and then I'd make semicolons mandatory, and something without semicolons becomes an expression and I'm thinking too much like rust :P
07:41 < eddyb9> one compromise would be something like this:
07:41 < ningu> well there is also this issue in node of uncaught exceptions escaping and then it isn't clear what they belong to
07:41 < ningu> so you have to use process.on('uncaughtException')
07:41 < ningu> or I guess domains
07:42 < eddyb9> await data = fs.readFile(file).error(e => this.emit('error', e));
07:42 < ningu> well that looks like an unholy union of await and promises :)
07:42 < ningu> but it would owrk
07:42 < ningu> work*
07:42 < eddyb9> await uses promises :P
07:43 < ningu> ok, but not the promise spec, there is no .then
07:43 < eddyb9> yeah, I thought I could just use something like error, because then handles both cases
07:44 < ningu> however it's implemented, await data = ... doesn't *look* like a promise
07:44 < macbn> what is the common pagination npm for node?
07:45 < eddyb9> I've written a fully traceur-compatible wrapper for await-using functions via generators, yield instead of await and the wrapper function would do the transformations
07:45 < eddyb9> ningu: the RHS (fs.readFile(...) in my example) is a promise
07:45 < ningu> eddyb9: I know. that's why I said it looked like a mixing of abstractions.
07:46 < ningu> the await data = ... does *not* look like a promise, and then you smuggle in promises for error handling.
07:46 < hashset> ningu: update-- https://github.com/gomfunkel/node-exif did the trick.
07:46 < ningu> hashset: cool. I figured there was something out there.
07:48 < eddyb9> isaacs: (sorry for the random ping) Object.create(null) has nothing special on it and setting __proto__ is harmless - better solution than https://github.com/joyent/node/commit/b48e303af023dc60b6f6590694ba94d9b8108702
07:52 < eddyb9> I was thinking about better ways of handling events when they're not polymorphic (I have a fixed set of event types, each with a fixed number of arguments)
07:54 < eddyb9> maybe I should have specialized onEvType, emitEvType and _eventsEvType
07:56 < eddyb9> but I'm just not sure if that's going to work out. right now in two seconds I add 15k event handlers and emit 50k events, on various EventEmitters
07:57 < Havvy> That's a lot of events.
07:57 < Havvy> Are they operating on anything that could be put into a tree system with bubbling?
08:01 < eddyb9> Havvy: not really... I have only one bubbling event, and it's getting emitted only a few hundred types
08:02 < Havvy> Alright.
08:02 < eddyb9> among other things, I'm curious if it can create a performance impact
08:02 < eddyb9> s/types/times/
08:04 < eddyb9> I've tried profiling my app, but the highest function had only 3% and it seemed to have recorded only a thousand ticks per second
08:04 < eddyb9> profiling that monster with just millisecond resolution is madness, crankshaft counters would be more useful
08:05 < Havvy> Perhaps trace.gl would be useful?
08:05 < eddyb9> I think I remember it, what could it do better?
08:06 < eddyb9> if it's anything like an annotated callgrind profile, it should be good
08:06 <@konobi> there's always dtrace
08:07 < eddyb9> Havvy: oh, it can connect to node.js?
08:08 < Havvy> eddyb9: It requires node to even run.
08:08 < Havvy> I got it running with a sample script. Everything worked, except the display of text. Even copy/paste and clicking on the text worked.
08:08 < eddyb9> I thought it was a client-side app using webGL :/
08:09 < Havvy> It does use WebGL.
08:09 < eddyb9> ah, it is. but I'm not seeing 3D
08:09 < Havvy> GL != 3D
08:09 < Havvy> It works with primitives of triangles.
08:09 < Havvy> And can do both 2d and 3d.
08:10 < eddyb9> unless it's using shaders as an optimized 2D canvas
08:10 < Havvy> Pretty much that I think.
08:11 < eddyb9> is it real-time, or what? even DOM would suffice for what it seems to be doing
08:12 <@konobi> too much latency with the DOM
08:12 < eddyb9> so it is real-time?
08:12 <@konobi> yup
08:12 < eddyb9> what for?
08:12 <@konobi> give it a try
08:13 < eddyb9> JS code can be almost as fast as native code in v8, I don't see how real-time visualization even makes sense
08:14 < eddyb9> konobi: https://trace.gl/getitnow.html
08:14 < eddyb9> not paying $15 for something that looks over-engineered :P
08:15 <@konobi> i know several people who swear by it
08:15 < eddyb9> how would you even watch millions of instructions per second?
08:15 <@konobi> watch the demo and then decide
08:16 < eddyb9> the boost webGL gives you is irrelevant unless you are doing 3D or particle simulations
08:17 <@konobi> worrying about the tech behind a useful tool is irrelevant as long as it does what it sets out to do
08:18 < eddyb9> but doing text in shaders is already a complicated task, which seems to me like pointless work for the dev(s)
08:19 < deoxxa> it'd be cool if i could try it out
08:21 < eddyb9> konobi: there's something wrong with their embed, didn't realize that was a video
08:21 < eddyb9> this works https://www.youtube.com/embed/4vtKRE9an_I?vq=hd720&autoplay=0&allowscriptaccess=never
08:29 < eddyb9> I'll try dtrace when I get the chance
08:30 < macbn> is there anybody who uses superagent to save files
08:30 < macbn> how can i save mp3 files
08:33 < eddyb9> konobi: wait, does dtrace even work on anything other than those solaris derivatives?
08:33 < deoxxa> eddyb9: runs on OS X as far as i can remember
08:34 < eddyb9> deoxxa: but... linux!
08:34 < deoxxa> there's a linux dtrace port, i think... not sure if node's dtrace bits work on linux though
08:34 < eddyb9> this is silly, makes me want to hack v8's profiler to have a better resolution
08:36 < deoxxa> ok, i just bought tracegl and it's actually kind of awesome
08:36 < deoxxa> about to try it on a complex app that does weird stuff
08:37 < eddyb9> deoxxa: would it need webGL for anything?
08:37 < deoxxa> yeah, there's a *ton* of text being rendered sometimes
08:37 < deoxxa> like, much more than a DOM could deal with happily
08:37 < eddyb9> for what?
08:38 < deoxxa> it prints out complete traces of everything that happens in the program
08:38 < deoxxa> like that can be thousands of lines per second
08:38 < deoxxa> (at certain points)
08:38 < eddyb9> millions :)
08:38 < deoxxa> or millions, yeah, exactly
08:39 < eddyb9> what's your memory usage?
08:39 < deoxxa> let's take a look
08:39 < deoxxa> memory usage of tracegl?
08:39 < eddyb9> yeah
08:40 < deoxxa> looks like about 20mb
08:40 < deoxxa> just eyeballing from the output of ps
08:41 < eddyb9> although I'm not sure if you can find out how much video memory those shaders are using
08:41 < deoxxa> oh, the chrome usage
08:41 < deoxxa> i'll look at that too
08:41 < eddyb9> lol
08:42 < deoxxa> about 2.5MB apparently
08:42 < deoxxa> there's not a lot in the buffer right now
08:42 < eddyb9> open the advanced process list
08:42 < deoxxa> would need to run a bigger program
08:43 < eddyb9> deoxxa: function f(){return f;} while(1) f = f();
08:43 < deoxxa> 68 resident, 62 shared, 43 private, 896 virtual
08:43 < deoxxa> (mb)
08:44 < eddyb9> yeah, not counting video ram :(
08:44 < deoxxa> hang on
08:44 < deoxxa> there's a gpu entry :>
08:44 < eddyb9> can you scroll all the way back in that trace output thing?
08:44 < deoxxa> http://d.pr/i/SIKC
08:44 < deoxxa> yeah you can
08:45 < eddyb9> so what happens with that memory usage if you start from scratch with my stress test?
08:46 < eddyb9> I have implemented such a tracer before, and at millions of calls per second, its real-time usefullness is quite limited
08:47 < eddyb9> I mean, once DOM starts being slow, it's already useless to the user
08:48 < nathan7> Hey humans
08:48 < nathan7> deoxxa: traceGL was so awesome when I was debugging my parser
08:48 < eddyb9> the user could watch some special 2D visualization, and there webGL would be useful, but it doesn't have that
08:49 < eddyb9> DOM can handle shittons of text, and you only get linear penalties when adding/removing lines
08:51 < eddyb9> and there's the RAM usage, but I doubt webGL fares much better
08:51 < eddyb9> (I'm bitching because, if it wasn't overengineered, maybe it would be free)
08:52 < nathan7> It's not even that fast
08:53 < nathan7> and yeah, I don't think being friends with the DOM is that much of a speed penalty
08:53 < nathan7> and it's a huge UX improvement
08:53 < nathan7> traceGL UI feels a bit clunky
08:55 < nathan7> deoxxa: we're all doing IRC, eh?
08:56 < nathan7> deoxxa: have you seen mmalecki/ircb?
08:56 < eddyb9> nathan7: thanks :)
08:57 < eddyb9> any idea what it uses for the backend? I would't mind writing my own solution, specialized on profiling
08:57 < eddyb9> and tracing only hot paths
09:00 < nathan7> eddyb9: there's a bunch of stuff around esprima/escodegen
09:00 < eddyb9> so it's rewriting code?
09:00 < eddyb9> totally stealing that :D
09:01 < eddyb9> traceur-compiler with built-in tracing, here I come :D
09:02 < eddyb9> although I was hoping for something lower-level, callgrind was nicer than my C++11 tracer
09:02 < nathan7> someone linked me to a trace-y esprima thing
09:03 < nathan7> trying to find it in my logs
09:41 < av9> what's the best way to do multiple levels of inheritence? Type -> subType -> subsubType.
09:42 < nathan7> av9: just the same way as usual..?
09:43 < av9> I'm not sure I follow, sorry. I've done a fair bit with js, but never anything with inheritance in js.
09:43 < nathan7> av9: are you doing this in browserland or node?
09:44 < av9> node
09:44 < nathan7> require('util').inherits
09:44 < av9> awesome. thank you.
09:44 < nathan7> Then you can do util.inherits(MyStream, events.EventEmitter)
09:44 < av9> this helps a lot.
09:44 < nathan7> and stuff like that
09:45 < deoxxa> what does util.inherits do that Object.create(super.prototype, {properties: {constructor: child}}) doesn't do?
09:45 < nathan7> deoxxa: let me be lazy
09:46 < deoxxa> lol
09:46 < nathan7> though I generally use https://github.com/nathan7/inherit
09:46 < nathan7> which is the make dummy constructor, assign prototype way
09:46 < nathan7> (it has a component.json and a package.json so I use it for my general JS stuff)
09:47 < deoxxa> ah yep
10:00 < Guest28071> Hi, I'm need help. When I tring to install yeoman package, this error interrupt whole installation https://gist.github.com/mbarinov/5648548
10:04 < kutchbhi> Guest28071:  just a guess, but I think you need to be root
10:04 < Guest28071> I've use sudo
10:05 < Guest28071> sudo npm install -g yo grunt-cli bower
10:06 < eddyb9> nathan7: but are those ES6-compatible? I use traceur-compiler to transpile ES6 into ES5
10:07 < nathan7> eddyb9: sure they are
10:07 < nathan7> I don't get how people use Traceur
10:07 < jesusabdullah> Guest28071: I bet it worked
10:07 < nathan7> It doesn't even seem to grasp ASI
10:08 < nathan7> I didn't ask for a pathetically whiny linter, I asked for a transpiler
10:08 < eddyb9> nathan7: is there anything else that does everything traceur does?
10:08 < nathan7> eddyb9: not really
10:08 < jesusabdullah> Guest28071: for some reason after npm does the whole thing it checks to see if everything's copasetic in your root modules dir and it seems like it's really really easy for peerDeps to explode/crash when it does that
10:08 < eddyb9> and I thought ASI was there, with a flag to disable it
10:08 < nathan7> oh, interesting
10:08 < jesusabdullah> Guest28071: it looks like an unrelated peerDeps issue with another library to me
10:09 < nathan7> I was interested in using it
10:09 < nathan7> but my code is low in semicolons
10:09 < eddyb9> you are lazy
10:09 < Guest28071> jesusabdullah: How I can check a npm's root dir?
10:09 < nathan7> eddyb9: No.
10:09 < eddyb9> there's a reason there's a flag to force semicolons
10:10 < nathan7> eddyb9: Read isaacs' article
10:10 < nathan7> eddyb9: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding
10:10 < nathan7> eddyb9: I find it increases the clarity of my code
10:11 < jesusabdullah> to each their own, I say
10:11 < eddyb9> anyway, it now integrates with node.js quite well (a little because of me), you can require ES6 modules from ES5 or ES6 code
10:11 < jesusabdullah> I use semis but like that's just how I roll
10:11 < nathan7> if I contribute to someone's code, I'll follow their style
10:12 < eddyb9> and I even added partial await support for node.js IO (the entire fs module has deferred wrappers)
10:12 < nathan7> Somehow people shout at you less if you use coffeescript than if you use a builtin JS feature
10:13 < nathan7> (and damn, CS's grammar is really bad, I hit numerous grammar bugs)
10:13 < eddyb9> nathan7: you can also throw this in a loop to "parallelize it": await process.nextTick();
10:13 < nathan7> eddyb9: coo'
10:13 < nathan7> I'm not too much a fan of the synchronous-ifying
10:14 < nathan7> I like promises, but I think using them for serialising work that could be parallel is silly
10:14 < eddyb9> nathan7: haha CS is just a pain now that ES6 cleans almost everything you could hate in JS
10:14 < nathan7> Coco is kinda cool
10:14 < nathan7> haven't hit any grammar bugs in it yet, the dude writing it actually cares to get shit right
10:15 < eddyb9> nathan7: I've written a fibonacci demo where there's 10 loops running interleaved
10:15 < eddyb9> really lazy scheduler :P
10:15 < nathan7> hehe
10:15 <@Nexxy> troll once demo everywhere!
10:16 < nathan7> Hey Nexxy 
10:16 < av9> hmm, inherits() isn't functioning like I thought it would. https://gist.github.com/avalanchenine/5648596
10:16 <@Nexxy> nathan7, :)
10:16 < av9> I wanted myMon.period to be 8000.
10:16 < nathan7> err
10:16 < nathan7> don't assign to prototype like that
10:16 < nathan7> firstly because inherits will overwrite it
10:17 < nathan7> and second because you overwrite the constructor property and such
10:17 < eddyb9> nathan7: I'm trying to add a compat flag to traceur, that would abuse/workaround native ES6 features, now that generators are in v8 (and for-of loops in trunk)
10:17 < av9> nathan7: kk
10:18 < av9> It was like that in an example I read.
10:18 < eddyb9> v8 has had block-bindings (let) for a while now, but they require strict mode and for loops needs a workaround transform to work right
10:18 < nathan7> I tend to put the inherits above the function declaration, you're using an anonymous function expression assigned to a variable though
10:18 < av9> it didn't start that way
10:18 < av9> I've been toyingwith this for a few hours now.
10:19 < av9> I'll rearrange it.
10:19 < eddyb9> nathan7: that's juat asking for trouble
10:19 < eddyb9> or we could all use ES6 classes and forget about these things :P
10:19 < nathan7> eddyb9: why is it?
10:20 < nathan7> eddyb9: You know how hoisting works, don't you?
10:20 < eddyb9> about that let thing, just passing --block-bindings=parse would work, but the code wouldn't run as expected
10:20 < macbn> how come i cannot request properly with unicode character in the url
10:20 < xecycle> mscdex: ping
10:20 < macbn> like request("http://abc.com?q=あああ").pipe(file);
10:21 < macbn> it returns incorrect result
10:22 < eddyb9> nathan7: it's not logical, and can lead to subtle bugs if you don't pay attention
10:23 < nathan7> eddyb9: subtle bugs such as?
10:23 < nathan7> eddyb9: and why is it not logical to put the inherits near the top of your constructor def?
10:24 < jesusabdullah> macbn: sounds like a question for request's issues
10:24 < nathan7> Would it be too much to ask people to read the ES5 spec?
10:24 < macbn> do i have to set utf charset?
10:25 < jesusabdullah> nathan7: yes it is quite big
10:25 < nathan7> jesusabdullah: es5.github.io
10:25 < nathan7> jesusabdullah: that on
10:25 < nathan7> e
10:25 < jesusabdullah> I mean, I'm okay learning things through example
10:25 < jesusabdullah> and admitting when I'm talking out of my ass
10:25 < nathan7> jesusabdullah: The full spec is full of uninteresting shit
10:25 < jesusabdullah> yeah see?
10:25 < jesusabdullah> that's why I don't wanna read the spec
10:26 < nathan7> jesusabdullah: http://es5.github.io/ is the nice version
10:26 < nathan7> jesusabdullah: I don't blame anyone for not reading the full one
10:26 < jesusabdullah> okay well if I have time I might read it
10:26 < jesusabdullah> NO GUARANTEES as I am a BUSY MAN
10:26 < eddyb9> nathan7: maybe it's fine when you stick them close together, but having functions after their usage is counter-inuitive if there's no technical reason to do so
10:26 < jesusabdullah> I have a LOT of STAR TREK MARATHONS to attend to
10:26 < nathan7> hehe
10:27 < nathan7> eddyb9: I don't believe so
10:27 < nathan7> eddyb9: named functions are extremely useful, also for callbacks
10:27 < jesusabdullah> eddyb9: it's nice to be able to keep the current train of thought going and then be like, "oh yeah so that function..."
10:27 < nathan7> inherits(blah, parent)
10:27 < nathan7> function blah() {
10:27 < nathan7>   /* long body */
10:27 < nathan7> }
10:28 < jesusabdullah> oh yeah nathan7 I've seen this before, read a small part of it
10:28 < nathan7> It's really nice
10:28 < jesusabdullah> I like assigning my ctors to vars
10:28 < jesusabdullah> but I don't blame someone for doing it that way, it does read nicely
10:28 < nathan7> hoisting and I are good friends
10:28 < eddyb9> that's the only nice use I've seen so far, that isn't required
10:29 < nathan7> of course I don't mind having class blah extends parent {}
10:29 < eddyb9> the rest are doFooBar(); then a hundred lines below there's the function
10:29 < nathan7> eddyb9: that's a candidate for an IIFE
10:30 < jesusabdullah> scroll buttons scroll buttons one two one two
10:30 < eddyb9> the function wrapper thingie?
10:30 < nathan7> also, like this https://gist.github.com/nathan7/5627134
10:30 < eddyb9> nathan7: we have block scopes now :)
10:30 < jesusabdullah> okay I need to try to sleep guys
10:30 < jesusabdullah> have a good one
10:30 < nathan7> that's coco, but the semantics of function declarations is the same
10:30 < nathan7> (value! means value())
10:30  * jesusabdullah writes in EC4
10:30  * jesusabdullah lies
10:30 < nathan7> EC4?
10:31 < jesusabdullah> THAT WAS A TYPO I MEANT ES4
10:31 < nathan7> so I return value()
10:31 < nathan7> and value is actually declared down there
10:31 < nathan7> instead of having all the function declarations that matter
10:31 < nathan7> and the return at the end where nobody sees it
10:31 < eddyb9> I disagree with isaacz on semis, f()\n;[a, b, c] is just fugly
10:32 < nathan7> It's one minor wart
10:32 < jesusabdullah> but it's a question of aesthetics at this point
10:32 < eddyb9> I want to be able to start statements without crap on them
10:32 < jesusabdullah> so who cares
10:32 < nathan7> I don't think that rare case is the reason to have semicolons everywhere
10:32 < jesusabdullah> right, outta here
10:32 < eddyb9> I can ignore trailing ; and , just fine
10:32 < nathan7> exactly
10:32 < nathan7> you learn to ignore the ends of lines
10:33 < nathan7> You teach your brain, the most amazing pattern-recognition system of all time, to ignore shit
10:33 < nathan7> to me it's visual overhead
10:34 < nathan7> I won't notice this in a large block of semicolon'd code: var blah = f()\n[a, b, c].forEach(function() {});
10:34 < nathan7> but now when I see a [ starting a line I think *HEY, SEMICOLON*
10:35 < nathan7> I have more non-whitespace on my screen representing something meaningful
10:35 < nathan7> Cozy up with a cup o' tea and the ES5 spec
10:37 < eddyb9> --strict-semicolons, and I just don't care
10:38 < eddyb9> statements need semicolons is so easy to grap than "certain things need semicolons before them"
10:39 < eddyb9> , at the start of a line is ugly, too
10:39 < eddyb9> the only one that makes sense is .foobar
10:40 < eddyb9> because it's a prefix for a method (most likely), but an arguments/array/object separator
10:43 < eddyb9> anyway, traceur-compiler can parse any ES5 code and it handles strict mode properly
10:43 < eddyb9> so feel free to throw silly syntax at it
10:47 < Abhi__> Hi 
10:47 < Abhi__> i am anoob and trying to install node on ubuntu
10:48 < eddyb9> sudo apt-get install nodejs
10:48 < Abhi__> all the blogs tell to ./confugure in the node directoryy
10:48 < Abhi__> but in new version snpm is not in there
10:48 < Abhi__> can anyone help me
10:49 < eddyb9> if that doesn't work or they don't have 0.10.*, you are free to take stakes to canonical
10:49 < eddyb9> nathan7: http://blog.izs.me/post/48281002063/free-as-in-hugs-licence
10:51 < Abhi__> what you mean by that
10:51 < Abhi__> @eddyb9
10:52 < Abhi__> whom should i adreess this to
10:52 < xecycle> Abhi__: Generally we recommend installing from the distribution repository.  If not provided you can try to find packages for your distro, instead of compiling yourself.
10:52 < eddyb9> maybe I watched too much Supernatural (@the stakes thing)
10:53 < eddyb9> Abhi__: did you try to install node.js from your repos? like with the apt-get command I gave you?
10:53 < worldhacker> Hi guys, I'm looking to update node and npm from 0.10.7 to 0.10.8. I found this http://davidwalsh.name/upgrade-nodejs, but that didn't changed my node version number. I figured that I need to restart node, but I can't find any documentation on stopping, starting or restart nodejs for ubuntu. Any help would be amazing.
10:53 < Abhi__> ookkk 
10:54 < eddyb9> worldhacker: lol? node isn't a server, every node process needs to be restarted if you want to use a newer version
10:55 < Abhi__> xecycle:   but what diffrence does it makes, im curios to knwo
10:55 < Abhi__> @eddy9  : i don't have root rights on teh systemm 
10:55 < eddyb9> oh, I didn't see his message
10:55 < Abhi__> so i chose to download tarboll
10:56 < eddyb9> oh, I see. btw, type e and press tab, instead of typing my nick wrong, makes it had to see :P
10:56 < xecycle> Abhi__: Prebuilt packages are checked for bugs.
10:56 < xecycle> (packaging bugs)
10:56 < eddyb9> they fix all distro-specific issues. and they are so much easier to install
10:57 < eddyb9> I'm trying to think how you could install the ubuntu .deb package locally
10:57 < eddyb9> I mean, you can always unpack the .deb and just copy the files to appropiate locations under your home dir
10:58 < Abhi__> eddyb9: yess plzz
10:58 < Abhi__> i creeated a local/src directory in my hoem dir
10:58 < worldhacker> eddyb9: That's not helpful eddyb. I just said that I can't find any documentation on restarting node, and your response is 'I need to restart it'?
10:59 < Abhi__> untared the package
10:59 < eddyb9> Abhi__: node and npm (or a link to the latter) should be in ~/bin
10:59 < eddyb9> you mean the node.js tar.gz or the ubuntu .deb?
10:59 < worldhacker> eddyb9: I don't have any background processes running. Unless you count forever, which isn't running any processes
10:59 < eddyb9> worldhacker: then starting node will give you the new version
10:59 < xecycle> eddyb9: Merely unpacking the .deb may not work.  PREFIX will be set to /usr in most cases, whereas relative paths may not be handled.
11:00 < eddyb9> but node has nothing prefix-dependent, AFAIK
11:00 < korilo> hello! :D
11:00 < eddyb9> IIRC suse patches npm for /usr/lib64
11:00 < Abhi__> eddyb9:  yes exactly link for npm is in bin..
11:01 < xecycle> eddyb9: Yup, if you're sure of it then it will work.  I'm not.
11:01 < Abhi__> so now should i forget all blog licteretaures, and head that way
11:01 < worldhacker> eddyb9: I have tried this, and it doesn't work. I'm guessing that  "sudo n stable" didn't work. If there is another, common way of updating node then I am all ears
11:01 < xecycle> Abhi__: I'd recommend contacting the system administrator and tell him/her that you want to install something.
11:02 < eddyb9> worldhacker: are you not using distro packages because they're outdated?
11:03 < worldhacker> eddyb9: I'm not using distro packages because I simply followed my VPS provider's node installation instructions https://www.digitalocean.com/community/articles/how-to-install-an-upstream-version-of-node-js-on-ubuntu-12-04
11:03 < Abhi__> eddyb9:  ok. i actually asked him, but its is in testign, so h recommended to try on Restricted login.
11:03 < worldhacker> eddyb9: In fact, I wouldn't know if I'm using distro packages or not. Not to sound stupid, but what are distro packages?
11:04 < Abhi__> eddyb9: actually in in doubt that, why is teh directory structure so diffrent in both packages
11:05 < eddyb9> worldhacker: they are packages installed via a distro-specific method, like apt-get on debian derivatives
11:05 < eddyb9> they are the way you manage software on linux
11:05 < Abhi__> worldhacker: its for distribution
11:06 < eddyb9> Abhi__: node.js can't do anything bad to the system, as long as you run it as a normal user
11:06 < worldhacker> Ah, in that case I'm using curl
11:06 < worldhacker> eddyb9: Ah, in that case I'm using curl
11:07 < xecycle> eddyb9: It may consume resources :)  If that's bad on a heavy-loaded server.
11:07 < eddyb9> installing as a normal user is harder and unnecesary work
11:07 < eddyb9> xecycle: but he wants to use node.js anyway
11:07 < xecycle> eddyb9: Yup.
11:07 < eddyb9> so there's no point in having a local install
11:07 < xecycle> +1 for unnecesary
11:08 < eddyb9> worldhacker: using curl for what? curl is a library and an utility
11:08 < worldhacker> eddyb9: "curl http://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1"
11:08 < worldhacker> "./configure --prefix=~/local"
11:08 < worldhacker> "make install"
11:09 < eddyb9> that's manual install
11:09 <@MI6> joyent/libuv: Sean Silva master * c396486 : unix: appease warning about non-standard `inline` - http://git.io/PeZtlw
11:09 < eddyb9> the n module is semi-automatic
11:09 < worldhacker> eddyb9: right. Should I simply delete all the files manually and reinstall manually?
11:10 < eddyb9> delete the installation from ~/local
11:10 < worldhacker> eddyb9: sure
11:10 < eddyb9> and then from /usr/local, if it installed anything there
11:11 < eddyb9> find /usr/local | grep 'npm|node'
11:12 < eddyb9> that will tell you if there are any noden/npm files in there
11:12 < eddyb9> then sudo apt-get install nodejs
11:13 < eddyb9> worldhacker: how were you using the version in ~/local?
11:13 < worldhacker> simply calling node in the command line "node app.js"
11:13 < eddyb9> since the node executable there wasn't in $PATH
11:14 < worldhacker> eddyb9: sudo apt-get install nodejs will install the latest version of node for me?
11:14 < worldhacker> eddyb9: very nice
11:14 < worldhacker> eddyb9: will it be this difficult to update in future?
11:15 < worldhacker> eddyb9: "find /usr/local | grep 'npm|node'" came up with nothing at all, so I'll take that as a good thing
11:15 < xecycle> worldhacker: It depends... on how you define "latest".
11:15 < eddyb9> worldhacker: just using node makes it look in /usr/bin, /bin (maybe /usr/local/bin and ~/bin) so it wouldn't find your local install
11:15 < worldhacker> 0.10.8 was released as stable today apparently, so I'm looking to install that one
11:15 < eddyb9> lol, today
11:15 < eddyb9> ubuntu will never be that quick
11:15 < worldhacker> eddyb9: I don't know specific dates
11:16 < worldhacker> just saw it mentioned as a 'new' thing
11:16 < worldhacker> right
11:16 < xecycle> Just upgrading node.js itself shall be trivial if installed from distro repo; more work may be needed to migrate your codes.
11:16 < eddyb9> nope
11:16 < eddyb9> he was using system node.js anyway
11:16 < worldhacker> I wouldn't have it any other way
11:17 < eddyb9> worldhacker: just sudo apt-get install nodejs whenever you need to update
11:17 < worldhacker> eddyb9: so because "find /usr/local | grep 'npm|node'" came back blank, I am safe to "sudo apt-get install nodejs" now, yes?
11:17 < Abhi__> eddyb9:   no i did'nt talked bout any harm,  i mean that i am testing it on my personal windows system by  downloading msi ,and installing
11:17 < Abhi__> eddyb9: and teh directory structure tehre is very diffrent form in ubunto
11:18 < xecycle> Abhi__: Windows and Linux distros are completely different creatures.
11:18 < bnoordhuis> they all vie for world domination though
11:19 < bnoordhuis> so they have at least something in common
11:19 < eddyb9> you wouldn't have shared code that uses different paths, though
11:19 < eddyb9> node and npm should work on both just like that
11:19 < worldhacker> eddyb9: I ran apt-get. running 'node' in the CM comes back with "No such file or directory", sadly
11:19 < eddyb9> worldhacker: nodejs
11:20 < eddyb9> and yeah, an empty find result is good
11:20 < worldhacker> eddyb9: huh, that's new
11:20 < worldhacker> eddyb9: is that new?
11:20 < worldhacker> eddyb9: it's always been node for me
11:20 < eddyb9> nodejs is the package name
11:20 < eddyb9> node is the executable
11:20 < worldhacker> ah, very good
11:20 < worldhacker> eddyb9: so nodejs references the exectutable through the package?
11:21 < eddyb9> huh?
11:21 < eddyb9> the package is a bunch of files that will be installed on your system
11:21 < worldhacker> eddyb9: never mind. Thank you for the help
11:21 < eddyb9> including /usr/bin/node
11:21 < eddyb9> wait, http://packages.ubuntu.com/search?keywords=nodejs
11:22 < eddyb9> you have to be kidding me, am I seeing 0.6 everywhere?
11:22 < worldhacker> what the hell
11:22 < worldhacker> eddyb9: actually, it installed 0.6.19 for me
11:22 < worldhacker> eddyb9: screw this
11:22 < eddyb9> ubuntu really sucks
11:22 < worldhacker> I was on 0.10.x
11:22 < worldhacker> eddyb9: yeap
11:22 < xecycle> worldhacker: Which version of Ubuntu?
11:22 < worldhacker> eddyb9: I'm just going to manually install it again
11:23 < worldhacker> 12.10 I think, 12.12. The latest
11:23 < eddyb9> worldhacker: you manual install didn't do anything
11:23 < xecycle> That's terrible.
11:23 < eddyb9> xecycle: look at my link, they're all 0.6
11:23 < bnoordhuis> try fedora, it ships v0.10 in its repos
11:23 < worldhacker> eddyb9: It was working perfectly, I just had to update it
11:23 < Abhi__> xecycle: okk,, i got it now..    but y have node changed the linux distro dir structure from version 0.1  to 0.10 so much 
11:24 < worldhacker> My VPS service (digitalocean) offers Ubuntu in a few different versions, CentOS in some versions, and that's it I think
11:24 < eddyb9> worldhacker: no, your install to ~/local was ignored
11:24 < eddyb9> you vps sucks btw :)
11:24 < worldhacker> How do you know? "node" was working on the system until I removed the node file in local/bin
11:24 < xecycle> eddyb9: I've long been counter-recommending Ubuntu.  Seems I'm right.
11:24 < worldhacker> eddyb9: my VPS is nice, thank you
11:24 < eddyb9> worldhacker: the blog post is not that bad, try and see if it works with your current 0.6
11:25 < worldhacker> eddyb9: it didn't
11:25 < worldhacker> eddyb9: I'm going back to manual install. It worked fine.
11:25 < eddyb9> then use /usr as prefix and make and sudo make install
11:25 < worldhacker> eddyb9: And will actually update, not downgrade me several years
11:26 < eddyb9> that way it will update
11:26 < Abhi__> eddyb9:  http://www.codediesel.com/linux/installing-node-js-on-ubuntu-10-04/   i followed this simple blog for node installation on my ubuntu version
11:26 < xecycle> eddyb9: I'd recommend /usr/local.
11:26 < worldhacker> eddyb9: I do all installs in root, so it's all sudo
11:26 < eddyb9> xecycle: nah that's prone to more fuckups
11:27 < Abhi__> eddyb9:   and "cd node ./configure make sudo make install
11:27 < eddyb9> worldhacker: I thought you used ~/local
11:27 < xecycle> eddyb9: Hmm, it's not so easy to cleanup if set to /usr.
11:27 < worldhacker> it's installed in ~/local, but installed by root user
11:28 < eddyb9> lol, even worse
11:28 < Abhi__> it dosnt works on my system, as i says "d node ./configure make sudo make install"
11:28 < eddyb9> I'm sorry I tried to help an ubuntu user and failed
11:28 < xecycle> -_- What's the point of having something not owned by you in your HOME directory?
11:28 < worldhacker> eddyb9: Why? It's how my VPS' documentation has it laid out and they know what they're talking about
11:29 < eddyb9> they don't
11:29 < eddyb9> xecycle: his user is root
11:29 < xecycle> eddyb9: That's too insane for me to imagine...
11:29 < eddyb9> and apparently the vps provides encourages bad security practices
11:30 < eddyb9> bad distro, installing from source
11:30 < worldhacker> eddyb9: My user isn't root
11:30 < worldhacker> eddyb9: I use root via Sudo -i because I dislike typing in my sudo password
11:30 <@MI6> joyent/node: Rafael Henrique Moreira v0.10 * ae22c62 : docs: add link to Brazilian Node community (+1 more commits) - http://git.io/mLA81A
11:31 < worldhacker> eddyb9: And not exactly bad distro when it appears to be the only way to get a recent version
11:31 <@MI6> joyent/node: Rafael Henrique Moreira v0.10 * 28f4c15 : doc: add link to Brazilian Node community (+1 more commits) - http://git.io/wkajtA
11:31 < xecycle> Installing something new on a system full of old packages is ... well, quite terrible in some cases.  And Ubuntu is full of outdated packages.
11:31 < eddyb9> I'll bail now, before I make some badly configured ubuntu server blow up
11:31 < xecycle> MI6: hello
11:31 < eddyb9> worldhacker: ubuntu is the distro, and it's a bad one
11:32 < xecycle> :(  Doesn't this bot reply to some simple questions?
11:32 < korilo> it's not github Hubot ^.^
11:32 < worldhacker> eddyb9: Alright, I'll be honest and say I've never been in the linux game and don't understand why exactly
11:32 < worldhacker> eddyb9: Anyway, thank you for your time
11:33 < eddyb9> it's also a bad distro for servers, even if it has the server version
11:33 < xecycle> korilo: Well.  Some popular channels have a bot to reply to some FAQs.
11:33 < eddyb9> and apt-get is just an unusable old thing
11:33 < korilo> xecycle: Hubot is a beast btw, you  tell him: "Hubot deploy" and it deploy (github)
11:33 < eddyb9> zypper is just so much more powerful
11:33 < korilo> or anything lol
11:34 < eddyb9> I should add git versions of nodejs and v8 to OBS, just so no distro other than openSUSE has newer versions
11:34 < eddyb9> well, just a git version of node.js using builtin v8, so it actually compiles
11:34 < nathan7> sorry, dear
11:34 < Abhi__> xecycle:  guys , can any one, clear my doubt or provide any link for same..  or at least say that there is no other choice tahn using apt get , so i can pass on this info to my system admin
11:35 < xecycle> korilo: looks interesting.
11:35 < nathan7> pretty sure the Arch User Repository has nodejs-git
11:35 < eddyb9> nathan7: dammit
11:35 < korilo> xecycle: yeah, i heard about hubot on the JSDay in italy
11:35 < korilo> and it's amazing
11:35 < eddyb9> I can't anything bad about arch, but I'm just not a user
11:36 < eddyb9> Abhi__: sorry, using apt-get will get you an old version
11:36 < eddyb9> ubuntu doesn't have updated packages
11:36 < xecycle> Abhi__: I haven't see the source package of nodejs, but I guess most software will have an "INSTALL" file at the root of the source package, containing manual installation directions.
11:37 < Abhi__> eddyb9:  no , i mean through distro,, i just want to conform , that installing it through root only is the recommended way, or i can do that on my user home too, without root permission
11:38 < Abhi__> xecycle:  ok then i will try source,, is using source package aover head in any wayy??
11:38 < eddyb9> the distro package is too old
11:38 < eddyb9> you can built nodejs manually then run sudo make install
11:38 < xecycle> Abhi__: Not necessarily.  Yet you will have to track down all distro-specific issues yourself, if any.
11:39 < eddyb9> be sure to give ./configure the option --prefix=/usr
11:39 < Abhi__> xecycle: okkkk.. let me first figure out what distro -specificic issue is !!
11:39 < Abhi__> :|
11:42 < eddyb9> Abhi__: the distro-specific issues are rare. it sucks that you can't use apt-get and get the ubuntu packages because they're too old
11:42 < eddyb9> http://blog.izs.me/page/11
11:43 < Willox> hah
11:43 < korilo> isaac FTW!
11:44 < xecycle> eddyb9: There do are some.  I, being an arch user, have an issue with almost every python software --- except those using python 3.
11:50 < arnorhs> eddyb9: lol
11:58 < gildean> eddyb9: you can use apt-get, just add the repo by chris lea
11:58 < gildean> with add-apt-repository
12:02 < eddyb9> gildean: thanks, but tell Abhi__, he's the one needing it :)
12:06 < squeakytoy> what kind of code documenation you guys use? jsdoc3?
12:29 < korilo> k
12:41 < television> Hello guys, everybody, pets, houses and persons, 
12:41 < television> i'm actually having a trouble with node-fibers
12:42 < television> node_modules/fibers/bin/linux-x64-v8-3.19/fibers.node` is missing
12:42 < television> fibers built are only up to linux-x64-v8-3.14
12:43 < television> do someone has an idea on how to get a correct build for linux-x64-v8-3.19
12:43 < television> ?
12:43 < television> :)
12:44 < angelazou> hi, I was wondering if I need to read a file for the connection request, which is the better way to do it? https://gist.github.com/angelazou/5648943
12:45 < television> join #meteor
12:45 < angelazou> I guess my main concern is if I use the second approach (which is of course better), will it be synchronous enough that it hops to the response.end() first?
13:17 < rk88> hello. node.js newbie here. I'd need some help with understanding projects structures / dependencies / includes, etc.
13:17 < rk88> anyone willing to help?
13:20 < macbn> i just realize php explode and javascript split is so different
13:20 < macbn> >>"(ateji) (n) (uk) club/fraternity/sorority/clubhouse".split(")", 2);
13:20 < purr> macbn: (object) ['(ateji', ' (n']
13:21 < macbn> ini php it will return ["(ateji", "(n) (uk) club/fraternity/sorority/clubhouse"]
13:21 < macbn> this took me hours to find out
13:21 < macbn> :(
13:21 < innociv> You can do regex in in, macbn
13:21 < macbn> how can i solve this
13:21 < innociv> .split( new regexp() )
13:21 < innociv> or split(/regexp/)
13:21 < elliottcable> he just wants it split on the first occurence.
13:21 < macbn> i suck at regex
13:21 < innociv> Oh
13:22 < innociv> On first occurance I use indexOf and slice myself
13:22 < macbn> in php it uses explode with limit of 2
13:22 < innociv> But you can also use non-greedy regex
13:22 < macbn> means two arrays
13:22 < macbn> i dont know what the split limit means in javascript
13:22 < macbn> two times split
13:23 < macbn> in js it means two times split with split("", 2)
13:23 < innociv> rk88, I don't know. require and include stuff works really similar to just including a script.
13:23 < innociv> I'd assume you know client side JS before getting into node
13:23 < macbn> i want it to be like php two arrays
13:23 < elliottcable> >> "(ateji) (n) (uk) club/fraternity/sorority/clubhouse".split(")").splice(1,0,"%%").join('').split("%%")
13:23 < purr> elliottcable: ['']
13:23 < macbn> yes
13:23 < elliottcable> fuckin' fuck
13:24 < macbn> lol
13:24 < elliottcable> >> "(ateji) (n) (uk) club/fraternity/sorority/clubhouse".split(")").splice(1,0,"%%")
13:24 < purr> elliottcable: []
13:24 < elliottcable> >> "(ateji) (n) (uk) club/fraternity/sorority/clubhouse".split(")")
13:24 < purr> elliottcable: ['(ateji', ' (n', ' (uk', ' club/fraternity/sorority/clubhouse']
13:24 < elliottcable> have I forgotten how splice works? ಠ_ಠ
13:25 < macbn> it just split into arrays
13:25 < elliottcable> whatever, my approach sucks. Non-greedy regex is the most succinct way to go; indexOf is the most performant.
13:25 < macbn> and remove the split needle
13:26 < rk88> innociv, I don't really agree with that.
13:26 < elliottcable> What the fuck.
13:27 < elliottcable> Seriously. Somebody slap me. I'm hallucinating here.
13:27 < rk88> suppose I require underscore in my main app.js file, then in the same file I do: _.each([1, 2, 3], function(obj) { console.log('.' + obj); });
13:27 < rk88> if I issue the same command on the routes/index.js file, it does not work. it would work if it was included in client side js
13:28 < innociv> Okay well
13:29 < innociv> var plugin = require('pluginname'); recreates an object named plugin that contains functions and properties from pluginname
13:29 < innociv> If you're asking how to use express or something, I don't know.
13:30 < rk88> this is why I'm here, innociv! I really need some help in understanding better this concept
13:30 < elliottcable> >> [0, 1, 2, 3, 4, 5].splice(2,0,"foo")
13:30 < purr> elliottcable: []
13:30 < elliottcable> ಠ_ಠ
13:30 < elliottcable> ಠ_ಠ ಠ_ಠ ಠ_ಠ
13:30 < rk88> I am trying to learn this by using mongoose and separating the files for the models
13:30 < macbn> i just php explode
13:30 < elliottcable> That should have resulted in [1, 1, "foo", 2, 3, 4, 5]
13:30 < macbn> http://phpjs.org/functions/explode/
13:30 < elliottcable> er, 0,*
13:30 < macbn> and it solved my problem
13:30 < elliottcable> What's wrong with me!?
13:30 < innociv> It's the same as require('plugin') var plugin = new plugin(); in php...
13:31 < elliottcable> rk88 ⑊ Sorry, what's your issue? Could you summarize it for me?
13:32 < rk88> elliottcable. I have generated an express project. so with all the directories like views, router, etc. I have added a directory called "models" - where I want to put for example "user.js" with all the mongoose functions
13:32 < rk88> like I am used to do with php. these functions (schemas / models, still can't figure out wtf they are) should be callable in the routes file
13:33 < rk88> i think its something really trivial for an expert but i can't cant figure it out
13:33 < elliottcable> I'm not sure what's confusing to you. If you require the file, the exports will be made available.
13:33 < elliottcable> All of the documentation *should* make this pretty clear.
13:33 < elliottcable> Show us the code you have now?
13:33 < elliottcable> http://gist.github.com/
13:34 < rk88> this is the models/user.js file http://pastie.org/7957524
13:35 < rk88> while this is routes/index.js file http://pastie.org/7957527
13:35 < korilo> you haven't exported User
13:36 < elliottcable> rk88 ⑊ The *value* of the `require()` statement, is the *value* of `module.exports = ...` in the other file.
13:36 < elliottcable> If that makes a little more sense for you.
13:36 < korilo> wait you haven't required index too
13:36 < elliottcable> rk88 ⑊ Meaning, in `index.js`, if you `require('./models/user')`, then it'll be the same as whatever you assigned to `module.exports` in the other file.
13:37 < elliottcable> rk88 ⑊ (By the way, the reason I linked you to gist.github, is so I could fork it and fix it for you.)
13:37 < rk88> elliottcable, dont want to sound rude or anything, im just plain stupid and this is me right now >  http://www.youtube.com/watch?v=zwc1Wi-mlCI
13:37 < vp_arth> hey guys, howto filter all 'has joined' && 'has quit' lines here?
13:37 < elliottcable> 'snot rude
13:38 < rk88> ah, lol... it's just so hard for me to understand.. .:(
13:38 < elliottcable> vp_arth ⑊ what client?
13:38 < vp_arth> google chrome)
13:38 < elliottcable> vp_arth ⑊ http://wiki.xkcd.com/irc/hide_join_part_messages#qwebirc
13:39 < elliottcable> if your VERSION response was correct, anyway, that's how.
13:39 < vp_arth> thanks
13:40 < Willox> elliottcable, what character is your client placing after peoples' names?
13:40 < elliottcable> sorry, rk88, you've got my *very divided* attention. Suicidal friend, but I'm trying to fix your code for you in a way that will demonstrate.
13:40 < zot> anybody know whether there's sth like 'step' for browserspace?
13:40 < macbn> lol
13:40 < elliottcable> Willox ⑊ http://ell.io/iHPDs
13:40 < rk88> thank you elliottcable
13:40 < Willox> elliottcable, http://puu.sh/30Ofq.png
13:40 < macbn> http://www.youtube.com/watch?v=zwc1Wi-mlCI lol
13:40  * elliottcable laughs
13:40 < Willox> You're evil
13:40 < elliottcable> Fix your UTF-8 pipeline! Not that you care. ;)
13:40 < Willox> I care too much
13:41 < elliottcable> What about “these” … work out?
13:41 < elliottcable> unimportant. Back to code.
13:41 < Willox> I'm using UTF-8 on this clients o I'm not sure what's up with it all, those appear
13:42 < elliottcable> Okay, rk88, this probably won't *work*, but if you look at *what* I've changed, it may demonstrate to you what I'm saying.
13:44 < rk88> ok
13:44 < elliottcable> rk88 ⑊ https://gist.github.com/elliottcable/5649078
13:45 < elliottcable> Notice that I *export* the User variable (i.e. your mongoose-model object, I suppose) from model.js
13:45 < elliottcable> that means, in index.js, that mongoose-model object is stored on the return-value from “require.”
13:45 < elliottcable> That explanation wasn't too complex, I trust? (=
13:46 < rk88> it's a bit more clear... i'll try it now
13:47  * elliottcable smiles
13:47 < elliottcable> don't copy the code I pasted; it's probably broken. Like I said, I have no idea who Mongoose or Express work. But at the very least, make sure you're exporting the data/objects you want from one file, and requiring them into the other file.
13:48 < rk88> elliottcable: I'm getting Cannot find module '/models' - 
13:48 < rk88> how can I put the right directory?
13:48 < elliottcable> Like I said: you'll have to adapt it to your codebase.
13:48 < rk88> i mean, to start from the root
13:49 < elliottcable> try `require('./models/user')` or whatever
13:49 < elliottcable> assuming MyLib/models/user.js exists
13:49 < elliottcable> and you're typing in MyLib/index.js
13:50 < rk88> the structure is like:
13:51 < rk88>  /app.js /models/user.js /routes/index.js
13:51 < xl0> Do I get it right that npm uses a built-in tar implementation?
13:52 < rk88> i fixed it by using ../models/user
13:52 < elliottcable> xl0 ⑊ https://github.com/isaacs/npm/blob/3769fe2f6ebcb4da00769033a8d371899511a4d2/node_modules/tar/README.md
13:53 < xl0> But... whyyy?
13:53 < nathan7> xl0: Yep, node-tar.
13:53 < nathan7> xl0: portability.
13:53 < nathan7> xl0: tar implementations vary widely
13:54 < xecycle> mscdex: ping
13:54 < xl0> Besides being 100 times slower then tar, it fucks up some files on big-endian mips...
13:54 < purr> pong.
13:55 < elliottcable> xl0 ⑊ https://github.com/isaacs/npm/issues
13:55 < xecycle> purr: I would not assume you to be mscdex :()
13:55 < xecycle> Ah...  the emacs electric pair...
13:55 < elliottcable> -purr
13:55  * purr 
13:55  * elliottcable snuggles purr
13:55 < elliottcable> He's a beauty. Be nice.
13:55 < elliottcable> He purrs, and sometimes pongs, and usually runs code when he feels like it.
13:56 < xecycle> Ah huh.
13:57 < mscdex> xecycle: pong
13:58 < xecycle> mscdex: Huh.  So I tried your mariasql, and I don't know if the 'row' event is emitted in the same order as the query would return.
13:58 < mscdex> ?
13:59 < xecycle> mscdex: Well, if I 'select * order by ID', will the 'row' events be processed in the same order?
14:00 < mscdex> xecycle: they're emitted in the order given by the server
14:00 < xecycle> mscdex: So I have been worrying too much, eh?
14:01 < mscdex> xecycle: why would they not be emitted in the expected order? :-)
14:01 < xecycle> mscdex: I'm not so familiar with our async model :(  Am unsure about whether the messes in threading will happen
14:02 < mscdex> xecycle: there is no threading
14:03 < mscdex> xecycle: mariasql does not use threads
14:03 < xecycle> mscdex: Yup, realized that just now.
14:03 < mscdex> xecycle: s/threads/additional threads/
14:03 < xecycle> lol
14:19 < angelazou> hi, I'm having trouble using mongo.js module
14:20 < angelazou> I'm trying to use it as so: var mongo 	= require('mongojs').connect("nurl", "nurl");
14:20 < angelazou> but node crashes because Error: Cannot find module 'mongojs'
14:21 < RLa> have you installed it locally for the project?
14:21 < angelazou> I have installed it globally using npm install -g mongojs
14:21 < RLa> that is not enough
14:21 < RLa> you must install it locally
14:21 < angelazou> i see
14:22 < angelazou> I also see these messages while installing
14:22 < angelazou> > bson@0.1.8 install /usr/local/lib/node_modules/mongojs/node_modules/mongodb/node_modules/bson
14:22 < angelazou> > (node-gyp rebuild 2> builderror.log) || (exit 0)
14:22 < RLa> i think this behavior was changed somewhere around version 0.6 but i could be wrong
14:22 < angelazou> do they mean anything? cuz the installation is stuck there and it won't end
14:23 < RLa> it should compile native bson module
14:23 < RLa> you install locally and it tries to install it into global location?
14:24 < angelazou> it's been 4 minutes and the installation hasn't finished yet
14:24 < angelazou> it's stuck at > (node-gyp rebuild 2> builderror.log) || (exit 0)
14:24 < angelazou> for the bson line
14:24 < RLa> terminate it then
14:24 < RLa> try install it locally
14:25 < angelazou> I have
14:25 < angelazou> I can see a node_module with mongojs in folder
14:26 < angelazou> great, the error message is different now
14:26 < angelazou> what does the two numbers mean after the file name like so server.js:4:33?
14:27 < RLa> line number and column number
14:27 < SomeoneWeird> line and column
14:27 < SomeoneWeird> lol
14:27 < angelazou> ha...
15:00 < draginx> whats the difference between engineio and socketio? :/
15:06 < werle> do you guys know where I can find documentation for the native api in c++
15:06 < JohnMcLear13> to answer draginxs' question, engineIO goes WS first, socketIO attempts upgrade to WS.  Ergo engineIO is *faster* for modern browsers but slower for older browsers.
15:06 < JohnMcLear13> WS = Websocket.
15:07 < JohnMcLear13> Various other differences exist but that is the core difference
15:20 < dmilith> isaacs: Hi, I have question about node build process. I'm working on FreeBSD, and I need to build node in custom PREFIX path, without libprocexec in /usr/lib nor /usr/local/lib
15:20 < dmilith> is there any way of dealing with such case? any option to specify to give it custom search path?
15:21 < dmilith> I tried with LD_LIBRARY_PATH, LDPATH and so on.. in many different ways.. but without result
15:21 < dmilith> after hack (putting libexecinfo to /usr/lib and /usr/include) it worked
15:21 < dmilith> um sorry s/libprocexec/libexecinfo
15:57 < minibn> is there any good javascript syntax highlight for vim
15:58 < minibn> mine sucks
15:58 < minibn> its like almost all of the codes are white
15:58 < minibn> Aaa.aa(aa,
15:58 < minibn> this whole part is white except for (
16:08 < elliottcable> http://www.oocities.org/shafitokhi/JavaScript.html
16:10 < elliottcable> http://www.oocities.org/wb7crk/
16:12 < elliottcable> “Attention JavaScript Coders”
16:12 < elliottcable> “Want some recognition for your scripts? Submit them to JavaScript Source!”
16:13 < elliottcable> http://www.javascriptsource.com
16:13  * elliottcable can't stop laughing
16:13 < Willox> I am not recognized enough :(
16:13 < elliottcable> Willox ⑊ I recognize you!
16:13 < Willox> I still can't see that char
16:13 < Willox> My client is forced to use UTF-8, I expected that to be a good thing
16:14 < Willox> "The JavaScript Source is an excellent JavaScript resource with tons of "cut and paste" JavaScript examples for your Web pages. All for free!"
16:14 < Willox> This doesn't actually sound very good
16:14 < Stumbler> reminds me of my angel fire days, before I knew javascript
16:15 < Willox> "built entirely with JavaScript controlled CSS, and does not make use of any of the newer JS frameworks."
16:15 < Willox> That isn't a selling point :(
16:15 < elliottcable> This page about XHTML on Geocities, and making JavaScript code validate as XHTML, takes me back.
16:15 < elliottcable> I was never into the Geocities thing, but, the fact that what *I* was doing with XHTML was around that same time ... really, really makes me feel old.
16:16 < elliottcable> Oh my god, everything on this page. http://www.oocities.org/siliconvalley/pines/5929/java.htm
16:17 < Willox> Most of these paegs are down, elliott
16:17 < elliottcable> Wayback Machine!
16:17 < Willox> the effort
16:17 < elliottcable> “Disabling JavaScript in Netscape 2.0 - JavaScript vulnerabilities in pre-2.01 version of Netscape.”
16:18 < Stumbler> lol
16:18 < elliottcable> I'm enjoying myself.
16:21 < elliottcable> Wow, this guy really hates JavaScript, for being somebody writing a tutorial about it.
16:21 < elliottcable> http://www.oocities.org/siliconvalley/2072/javascr.htm
16:21 < elliottcable> “This ease-of-use has made JS enormously popular with zillions of people who want to program but don't want to be programmers.”
16:24 < elliottcable> “That should be enough JavaScript for now. At least now when you're a grandparent you can tell your grandchildren about how you battled the horrific JavaScript monster, and won.”
16:26 < elliottcable> Oh. My god. DHTML. That was a thing!
16:29 < substack> <layer> tags
16:29 < substack> remember those?
16:29 < substack> <div> won
16:32 < JamesMGreene> Any common reasons for a folder rename to fail, other than (a) not existing or (b) not having permission?
16:33 < JamesMGreene> Having issues with a `npm install` hook failing to rename a dir
16:36 < JamesMGreene> { [Error: EPERM, operation not permitted 'd:\Development\Personal\node-flex-sdk\tmp']
16:36 < JamesMGreene>   errno: 50,
16:36 < JamesMGreene>   code: 'EPERM',
16:36 < JamesMGreene>   path: 'd:\\Development\\Personal\\node-flex-sdk\\tmp',
16:36 < JamesMGreene>   syscall: 'rename' }
16:37 < JamesMGreene> Maybe I should just use tmpdir instead, eh?
17:08 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:40 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:42 < NoFaTe> Hey folks, can anyone suggest a good tokenizer/parser for JS/nodejs?
17:52 < medice> no
18:14 < macbn> will res.json(data); continue to the next line?
18:16 < SomeoneWeird>  node: ../deps/uv/src/unix/stream.c:1319: uv_read_stop: Assertion `!uv__io_active(&stream->io_watcher, 4) || !(&stream->write_completed_queue == (&stream->write_completed_queue)->prev) || !(&stream->write_queue == (&stream->write_queue)->prev) || stream->shutdown_req != ((void *)0) || stream->connect_req != ((void *)0)' failed.
18:16 < SomeoneWeird> i think I broke something
18:21 < macbn> >> [1,2,3,4,5,6,7,8,9].slice(0,4)
18:21 < purr> macbn: (object) [1, 2, 3, 4]
18:48 < JamesMGreene> isaacs et al: Is there any option for minimatch/glob to ignore directories (i.e. not list directories themselves amongst the results... only files)?
18:48 < JamesMGreene> I'm not seeing any
18:50 < JamesMGreene> isaacs: Or do I just change my pattern so that it ensures it does not end with [\\|\/]?
18:50 < JamesMGreene> I suppose that works but a `ignoreDirs` option would be fantastic
18:50 < JamesMGreene> an*
19:09 <@isaacbw> JamesMGreene: globs usually end with a file extension
19:09 < tardie> new console secerts, i am a man of good will go here ---> http://173.230.166.110/index.html
19:17 < Nnubes256> tardie: That link just redirects me to a JSON file?
19:18 <@isaacbw> it's not json
19:18 <@isaacbw> it's some other nonsense
19:18 < Stumbler> rtf file?
19:19 < syskk> does anyone know where does the Cookie come from ? https://github.com/visionmedia/superagent/blob/master/lib/node/response.js#L140
19:19 < nathan7> it's advertising nonsense
19:19 < syskk> it doesnt seeem to be required anywhere
19:19 < Stumbler> yeah, but it looks like someone just uploaded an rtf file and renamed the extension as .html thinking it would display in a browser XD
19:19 < nathan7> syskk: ..wtf
19:20 < JamesMGreene> isaacbw: Not if the files don't have extensions :(
19:21 <@isaacbw> JamesMGreene: what are you globbing for?
19:21 < JamesMGreene> Everything (all files) under a certain dir (recursive)
19:21 <@isaacbw> (I'm just curious)
19:21 < JamesMGreene> 3rd party stuf
19:21 < JamesMGreene> f
19:22 < JamesMGreene> but all of their shell scripts doen't have extensions
19:22 < JamesMGreene> don't*   ack
19:22 <@isaacbw> ah, okay
19:22 < JamesMGreene> anyway, I just set `mark: true` and `filtered` them out... no worries
19:22 < JamesMGreene> `filter`ed
19:23 < JamesMGreene> g2g, later
19:23 < syskk> nathan7: it's second time i see a wtf like this today … https://github.com/senchalabs/connect/blob/master/lib/middleware/cookieSession.js#L86 here… where is the cookie variable declared?
19:23 < syskk> it is declared in another scope…. I dont understand this code
19:23 < Nnubes256> By the way, in that JSON I commented before file I can see some porn references
19:24 < Nnubes256> *Not JSON, is random stuff
19:25 < syskk> anyone mind taking a look at that code and explaining to me where the cookie variable comes from? I assume its not a bug in Connect code
19:25 <@isaacbw> Nnubes256: yea, there are porn spambots trolling freenode
19:25 < Iheartjs> syskk: https://github.com/senchalabs/connect/blob/master/lib/middleware/cookieSession.js#L60
19:25 < Nnubes256> isaacbw: Derp
19:26 < syskk> lheartjs: ah damn, i though the res.on was outside that function's scope
19:26 < syskk> i need new glasses
19:27 < Nnubes256> Also, the random text should be parsed as RTF, because it appears to be made with Msftedit
20:12 < pala22> Will I need to learn node.js when using derby.js?
20:13 < pala22> sure there will be special cases I will have to ..., but how far will derby.js take me without knowing node.js ?
20:14 < pala22> 2.) What's the best way to learn derby.js + node.js? Should I go top-down, beginning with derby.js, or the other way bottom-up?
20:16 < gluxon> pala22: Nah. Learn Node.js and then advance to derby.js
20:16 < gluxon> If you already know JavaScript, you just need to know how Node.js handles modules and how asynchonous execution works.
20:26 < pala22> hmm ok, I think I'll go over the relevant parts of node.js quickly before really starting with derbyJs. Thanks..
20:34 <@isaacbw> pala22: it's always better to understand the platform before deciding which packages to use
20:34 <@isaacbw> if you aren't familiar with node, you can't really make an educated decision about using derby
20:36 <@isaacbw> also, the bastards chose a name that was already being used
20:42 < HSL> morning!
20:42 < s5fs> hello
20:43 < HSL> I'm running into some nodejs & socketio issues
20:43 < HSL> i get this error "websocket parser error: reserved fields must be empty"
20:44 < HSL> anyone knows how to fix that?
20:44 < s5fs> HSL: HSL m
20:44 < s5fs> whoops!
20:45 < s5fs> HSL: haven't seen that error myself, can we see some code?
20:46 < HSL> s5fs, yeah, first I'm going to try if I can see what exact part is causing it.
20:46 < s5fs> HSL: understood. you getting this error client or server-side?
20:46 < HSL> s5fs: serverside
20:52 < zenetik> hi, i'm trying to make a test using spawn. Got a node : node output.js | wc --> give 255 lines
20:52 < HSL> s5fs: running an really basic socket.io app now and I have the same problems, so it looks like it's a socket.io bug
20:52 <@isaacs> JamesMGreeneAway: no, there is no way to do this with minimatch or glob.
20:52 <@isaacs> JamesMGreeneAway: i'd accept a ignoreDirs option, but it would have to imply mark:true, most likely
20:52 < zenetik> got another one, read.js which spawn output.js and count the number of line if output.js. It's random wtf ?!
20:53 <@isaacs> JamesMGreeneAway: but yeah, like you said, mark:true and results.filter(function(r) { return !/\/$/.test(r) }) would be just as fine.
20:54 < s5fs> HSL: interesting, what platform are you on?
20:55 < HSL> s5fs: ubunut
20:55 < zenetik> what's wrong with this code ? https://gist.github.com/franck34/5650739
20:55 < HSL> s5fs: ubuntu
20:55 < HSL> :)
20:56 < s5fs> HSL: same. i'm running 12.04 64bit, node 0.10.x and whatever the latest socket.io is w/o problems.
20:56 < HSL> mhmm
20:57 < s5fs> is the error on start-up or client connection?
20:57 < HSL> I just did an system update today, it also had a nodejs update :/
20:57 < HSL> s5fs: on client connection
20:58 < HSL> s5fs: I get this error on the clientside: WebSocket is closed before the connection is established.
20:58 < s5fs> you could try an npm rebuild, maybe a module doesn't like the new node version?
20:59 < s5fs> HSL: are you using http://localhost or http://127.0.0.1? I found the full ip works more reliably for me
21:00 < HSL> s5fs: it's running on a remote server, and it has been running fine for the past few months :/
21:00 < HSL> I'm going to show you some code in a few
21:02 < Willox> zenetik, what doesn't work?
21:05 < HSL> s5fs: https://gist.github.com/hsleewis/0136a62d693528a3849b 
21:05 < zenetik> Willox: forget, i've just google, i have to use readline to read line per line
21:05 < zenetik> was thinking that proc.stdout was already line per line
21:05 < zenetik> thanks
21:05 < Willox> Sounds like a better solution anyway :)
21:06 < zenetik> Willox: no comments, LOL
21:06 < zenetik> thanks
21:06 < zenetik> ++
21:09 < s5fs> HSL: looks good to me, nothing clearly wrong. what about changing 'start' to 'gogogo' or something?
21:11 < HSL> s5fs: unfortunately that gives me the same error :/
21:13 < s5fs> HSL: okay let me mock it up real quick
21:16 < HSL> s5fs: did you run all ubuntu updates?
21:16 < HSL> if not, how can we compare what nodejs we're running?
21:16 < s5fs> node -v
21:16 < s5fs> i'm on 0.10.4 apparently
21:17 < HSL> I'm on 0.10.8
21:17 < HSL> :/
21:17 < s5fs> HSL: i don't install node via packages, i've been doing it with source
21:17 < s5fs> okay lemme grab 0.10.8
21:17 < rhalff> weird, I use express.json() but also defined my own function, both set a req.on('data', ...), it seems I can only use one of them, not both. req will be a continues object? a fresh request modifies the current req and is not a new request object or something?
21:19  * rhalff probably false assumption *goes back to the code*
21:29 < s5fs> HSL: i cannot reproduce your error
21:30 < HSL> s5fs: mhmm that's strange
21:30 < s5fs> HSL: I used nave to switch to 0.10.8 and then I stood up a little project of mine that uses socket.io for messaging. it all works fine.
21:39 < HSL> s5fs: the problem isn't in the server, it's clientside.
21:39 < banzounet> Do you guys have specials books to recommend to get started with node?
21:39 < HSL> any idea where I can find a list of reserved fields for 0.10.8?
21:46 < s5fs> HSL: you could grep the source for your error message
21:48 < robdodson> is it possible to include 3rd party binaries in my npm package and have them be linked into the PATH? I've tried putting the binary in the bin folder and adding "bin": { "cwebp": "./bin/cwebp" } which does create the .bin folder with cwebp in it when I install the dependency. But when I run $ which cwebp it says it can't find it. am I going about this all wrong?
21:49 < mscdex> robdodson: another method is to install your module globally: `npm install foo -g`
21:49 <@isaacbw> banzounet: not really
21:49 < robdodson> mscdex: i'm writing a grunt task. it needs this 3rd party binary for image compression. don't think I want to install the grunt task globally
21:50 <@isaacbw> robdodson: then which wouldn't work anyway
21:50 < s5fs> HSL: i gotta take off, but good luck with your issue
21:50 <@isaacbw> it wouldn't make sense to add something to your path if it isn't installed globally
21:51 < robdodson> isaacbw: that makes sense...
21:51 < nihilista> i have a simple app which, when started, reads some configuration from config.js file outputs something to stdout… i'd like to have an option in config.js to run this app as a background process or not. if it should run as a bg process all stdout stuff should write to a file...
21:52 < robdodson> isaacbw: so should I create a global npm module just for this image compression binary and have my grunt task depend on that?
21:52 < nihilista> what module should i use for this purpose?
21:52 < nihilista> *which
21:52 <@isaacbw> robdodson: not if you want anyone else to install it
21:53 < robdodson> isaacbw: that also makes sense...
21:53 <@isaacbw> why not just compress the images before distribution?
21:53 < robdodson> isaacbw: it's a grunt task so people can do their own image compression
21:54 < Stumbler> lol, I just noticed node has built in support for rfc2324
21:54 <@isaacbw> robdodson: is the binary not open source?
21:54 < robdodson> isaacbw: it is. it's the google webp command line tool
21:54 <@isaacbw> Stumbler: know of any coffee pots that support it?
21:54 <@isaacbw> pacman -Ss
21:55 <@isaacbw> er
21:55 < Stumbler> no, Unfortunately… sounds like a fun project though XD
21:55 <@isaacbw> robdodson: okay, then it wouldn't be the worst thing to have the user install it themselves
21:55 <@isaacbw> it's probably in most repositories
21:56 <@isaacbw> it's not usually a good idea to distribute binaries
21:57 < robdodson> isaacbw: I guess that's the only option huh? I'm not super familiar with how binaries are handled in npm except when you're creating your own tool. But it makes sense that it has to be global and the user would need to install it themselves I guess
21:57 <@isaacbw> if someone wants an idea that will make them an instant fortune in kickstarter: a cheap easy to use robotic arm
21:57 <@isaacbw> assembled from a kit
21:58 <@isaacbw> and controllable with http :P
21:59 < robdodson> are there npm modules that depend on globally installed stuff? I'm thinking for like SASS or uglify
21:59 < progrock`> man, I am seriously surprised that I like the movie the last samurai... I mean... who would have thought 'Tom Crusie as the las tsamurai' would actually be a good story
21:59 < robdodson> or is the best practice to just tell the user to install it themselves?
22:03 <@isaacbw> robdodson: well, what does using the grunt task get you over executing webp in the shell
22:03 <@isaacbw> does grunt let you execute shell commands as tasks?
22:03 < robdodson> isaacbw: the grunt task lets you automate the process and make it part of your build
22:03 < HSL> Does anyone know why this code on the client side could interfere with Socket.io?
22:03 < HSL> http://bin.fuelphp.com/snippet/view/fn/lPfTXVw7PnzyGRhh00T2
22:04 < robdodson> isaacbw: so you can just say $ grunt release and it will build a version of your project, compressing the images, uglifying the js, etc
22:04 < robdodson> isaacbw: and grunt will let you do anything you can normally do in node. so you can spawn a process if you want
22:05 < robdodson> var child = grunt.util.spawn({ cmd: 'cwebp', args: args } is part of my grunt-task
22:05 <@isaacbw> robdodson: maybe you could write a native module which interfaces libwebp and then write a grunt task which uses that module
22:06 <@isaacbw> but to answer your original question, trying to distribute binaries is going to cause a lot of trouble
22:06 < robdodson> isaacbw: ok I'll just tell the user to install it themselves. thanks!
22:07 <@isaacbw> robdodson: the reason I suggest interfacing libwebp yourself is because it seems to be in repositories while cwebp is not
22:07 <@isaacbw> and I know if you asked me to install something that wasn't in my repos just to use your module, I probably wouldn't use it
22:09 <@isaacbw> but I also don't use grunt, so maybe I'm not your target audience :)
22:09 < robdodson> isaacbw: did you do a search to find out where libwebp is being used??
22:10 <@isaacbw> robdodson: well, I did a quick search to see if it was in my repos
22:11 < robdodson> isaacbw: do you know of public projects using it? maybe I could take a look at how they're interfacing with it
22:13 <@isaacbw> robdodson: I don't know. Most probably use libwebp
22:13 <@isaacbw> and simply list it as a dep for autoconf
22:14 < progrock`> Considering I'm using nginx as a proxy alredy on top of a node app, I should have it server the static files as well?... or does it make no difference whether node serves them or nginx? (I would imagine nginx does it quicker and with less resources, but I could be wrong)
22:16 < robdodson> isaacbw: I don't think anyone using this grunt task is going to be using libwebp directly. The task is primarily for folks building little projects and wordpress themes. I wonder if I could just make a global npm module that wraps cwebp and tell folks that if they want to install it they could just npm install -g webp or whatever I name it. Otherwise they can DIY install it. But my target audience is folks who just want to quickly optim
22:17 < robdodson> some pngs for their website. Nothing more involved thanthat
22:20 < robdodson> this project seems to be doing just that: https://github.com/yuanyan/node-webp-bin
22:20 <@isaacbw> robdodson: if you really wanted to make it easy as beans you could probably embed the libwebp source and have it compile
22:21 <@isaacbw> robdodson: yea, I guess you could do what yuanyan is doing, but it makes me cringe
22:21 < rynkan> burned my motherboard, fun
22:21 < robdodson> isaacbw: I think that's above my skill grade unfortunately. I'm not familiary with compiling C/C++ except the occasional openFrameworks project
22:21 <@isaacbw> lol, it doesn't look like it has ever actually passed on travis-ci
22:21 <@isaacbw> robdodson: oh, okay
22:21 < robdodson> isaacbw: yeah i noticed that
22:22 < robdodson> isaacbw: I totally get where you're coming from though
22:22 <@isaacbw> you could even use node-webp-bin for your task
22:23 < robdodson> yeah…except it's failing its tests.. :\
22:24 <@isaacbw> here's the logic for selecting the right binary https://github.com/yuanyan/node-webp-bin/blob/master/lib/webp-bin.js
22:24 < robdodson> yep, saw that
22:25 < robdodson> isaacbw: thanks for all your help
22:25 <@isaacbw> another reason to not want to distribute binaries is that there might be a performance tradeoff with 32/64bit
22:26 <@isaacbw> and you would have to distribute 32bit binaries to allow the most people to use it
22:26 < d4rklit3> is there a different how exec should be used in windows vs mac? I have this line (in cake file) child = exec "NODE_ENV=#{options.env} APP_DATA=#{options.data} node server.js"     will run on mac but not my windows
22:26 < robdodson> isaacbw: yeah I think I'm just going to point people to the project and tell them to install it themselves
22:26 <@isaacbw> hah, okay
22:27 < robdodson> isaacbw: just wanted to make sure there wasn't an easy way that I was overlooking but it sounds like any alternative would be pretty involved
22:27 <@isaacbw> yea, probably
22:27 <@isaacbw> d4rklit3: there's a pretty big difference between sh/bash/*sh and the windows command prompt
22:28 < d4rklit3> isaacbw is there a difference syntactically though? i still write node server on both platforms
22:28 <@isaacbw> lol yes, there is
22:29 < d4rklit3> so using a cakefile doesn't abstract the process? 
22:29 <@isaacbw> I have no idea how you would set environment variables in windows aside from all the gui nonsense
22:29 < d4rklit3> NODE_ENV=development always works
22:29 < d4rklit3> im using mingw that came msysgit
22:29 < robdodson> isaacbw: btw are you Isaac Schlueter or a different Isaac? just curiuos.
22:30 <@isaacbw> a different one
22:31 < robdodson> yeah i wasn't sure because I know he goes by isaacs but you seem super active on this channel. well either way, thanks again different isaac
22:31 <@isaacbw> d4rklit3: besides, setting environment variables from a program like that is a little odd
22:32 <@isaacbw> lol np
22:33 < M28> can "setTimeout" throw an error?
22:33 < M28> ops
22:33 < M28> I mean
22:33 < M28> "clearTimeout"
22:33 < Zolmeister> yes
22:33 < M28> in what circunstances?
22:34 < M28> clearTimeout(3321231321), clearTimeout({}), clearTimeout(null) do not throw any errors
22:35 < Stumbler> Is there a significant difference between net.connect, and net.createConnection ?
22:36 < Zolmeister> M28: obj = { valueOf: function(){throw new Error('d')} }
22:36 < Zolmeister> clearTimeout(obj)
22:36 < M28> oh, of course...
22:36 < Zolmeister> :)
22:36 < M28> but, assuming I don't care about clearing the same timeout twice
22:37 <@isaacbw> lol
22:37 < M28> will it ever throw an error?
22:37 < Zolmeister> M28: I don't think so
22:37 < M28> setTimeout and such aren't in the ECMAScript specification though
22:37 < M28> so it's not a safe guarantee
22:40 < banzounet> is it possible to do something like this : http://pastebin.com/0DMMAFRp ?
22:41 < Zolmeister> no, but maybe in coffeescript
22:41 < banzounet> not really node ralted
22:41 <@isaacbw> M28: you could find out for sure in the source
22:41 < banzounet> related*
22:41 < M28> yeah, but the source isn't guaranteed to never change
22:41 < M28> like, what if they decide to make it throw an error?
22:41 < Zolmeister> M28: right, so set up email alerts for a code change in that area
22:41 < M28> >_>
22:41 < M28> I'll just make sure I don't clearTimeout twice
22:41 <@isaacbw> M28: watch the blog?
22:42 <@isaacbw> read patch notes?
22:42 < M28> too much work :p
22:42 <@isaacbw> write a test that calls it twice
22:42 < ningu> you could get a dog to run after the error that's thrown and catch it
22:44 < mscdex> banzounet: no
22:44 < mscdex> banzounet: what are you trying to accomplish?
22:45 <@isaacbw> it could be done trivially with a loop, you just don't get the fancy syntax
22:47 < banzounet> mscdex: : I Just have an unknow number of request to send to an asyn function who take has first argument an array of function, but I nvm some time I've strange ideas :D
22:47 < progrock`> Is there anyway to have a backup server on a DNS so that if my load balancer goes done, it'll automaticlaly go to a backup load balancer... or do I have to change the DNS and wait for it to repropogate?
22:48 < Iheartjs_> banzounet: it looks like you want an array comprehension
22:48 < ningu> progrock`: hmm, good question...
22:53 < progrock`> ningu: seems to me, no matter what you do, there's a single poitn of failure... tho you cam obviously fix that failure as quick as you can identify it occurs... but you still have to repropogate.. which is by no means instantanious
22:53 < JamesMGreene> Will Node's `fs` copy functionality fail if I try to copy files/folders across partitions/devices/disks like the move functionality does?
22:58 < bnoordhuis> JamesMGreene: what copy functionality do you mean?
23:01 <@isaacbw> progrock`: you can have several A records pointing to multiple load balencers
23:01 <@isaacbw> *balancers
23:01 <@isaacbw> but load balancers tend to be pretty (necessarily) robust
23:02 < progrock`> interesting, so I just have A records on the same domain pointing to different IPs?
23:02 <@isaacbw> sure
23:02 < progrock`> sadly, don't link my current DNS provider allows that
23:02 <@isaacbw> hah, okay
23:02 < progrock`> oh well, not to oimportant right now, but good to know
23:03 < progrock`> Weird, I'm geting a 502 bad gateway when trying to use passport google... the address is /auth/google/return .. and I have this line in app.js:
23:03 < progrock`> app.get('/auth/google/return', passport.authenticate('google', { successRedirect: '/', failureRedirect: '/login' }));
23:04 < xanadu> can you do app.get like that to domains you don't control?
23:05 < progrock`> xanadu: umm, dont know how that could possibly work.. so I would assume no
23:05 < xanadu> yeah, I just came in late to the convo - That's what I thought
23:06 < xanadu> Yeah does passport do?
23:06 < xanadu> what*
23:07 < JamesMGreene> bnoordhuis: Oh, doh, I forgot there isn't a `copy` functionality :)
23:07 < JamesMGreene> `pipe` it is, eh?
23:07 < JamesMGreene> (since `rename` fails cross-device)
23:08 < progrock`> I just dont get how I'm getting a 502 on this one.. I mean theres a query string, but that shouldnt mean that the route is any different
23:08 < progrock`> oh, I'm an idiot
23:08 < progrock`> didnt see the error on my server logs
23:09 <@isaacbw> JamesMGreene: or use the system's cp
23:10 < JamesMGreene> isaacbw: I'm a cross-platform man (a.k.a. I use Windows), so I'm not gonna get into _that_ mess without using like fs-extras or shelljs
23:11 < JamesMGreene> isaacbw bnoordhuis: But, for sake of argument, would you anticipate the cmd-level copy functions being faster than piping?
23:12 <@isaacbw> yea
23:16 < JamesMGreene> What is up with people not linking to their repo in NPM publications? >=|
23:16 <@isaacbw> bastards
23:17 < banzounet> when the prototype of a function is fetch.fetchUrl(url [, options], callback) how should I add options? 
23:19 < nightfly> if(callback == undefined){callback = options; options = undefined;}
23:19  * nightfly is interested in the 'proper' answer
23:19 < nightfly> besides "don't do that", which makes the most sense
23:20 < JamesMGreene> banzounet: So are you USING that or IMPLEMENTING that?
23:20 < nightfly> options should really be the last argument
23:20 < banzounet> JamesMGreene: I want to use the function and I'm realy not used that synthax
23:20 < JamesMGreene> nightfly: I'd agrue that depends on if the function serves dual purposes for sync vs async behavior
23:20 < Zolmeister> if(arguments.length==3)
23:21 < JamesMGreene> Plus callbacks have to be last to follow the Node.js pattern, and enable easy Promise wrapping
23:23 < banzounet> JamesMGreene: I just don't get the "url [, options]"
23:23 <@isaacbw> and code looks better if callbacks are always the last option
23:23 <@isaacbw> since callbacks are generally anonymous functions
23:23 <@isaacbw> banzounet: inside the function there's logic that counts how many arguments there are
23:23 < progrock`> so I didnt get an answer before, is it best to have nginx serve my static, or is i fine to have node do it as express ahs it set by default?
23:24 < progrock`> I already have nginx proxying mydomain:80 to my local node server's port
23:24 <@isaacbw> nginx will do a better job, though you'll probably end up using a cdn anyway
23:24 < Zolmeister> unless your app get millions of hits, you probably wont notice the difference.
23:25 <@isaacbw> * if you outgrow express's static middleware
23:25 < banzounet> isaacbw: can you just give me an example? like if I want to set the timeout options and the url is "www.google.com" what should I write?
23:26 <@isaacbw> fetch.fetchUrl("www.google.com", { ... }, function() {...})
23:26 <@isaacbw> [ options ] is just a documentation norm. It isn't js syntax
23:27 < JamesMGreene> The brackets in this case just mean "optional" rather than "array"
23:28 < banzounet> Okay ! thanks ;)
23:29 < NoFaTe> isaacbw, excuse me for interrupting, but can I add something?
23:29 <@isaacbw> you can say whatever you want on iiiii arrreee seeeeeeeeeeeeeeeeeeee
23:30 < NoFaTe> 15 + 4
23:30 < Havvy> *facepalm* at both of you.
23:30 < HSL> What is the best way to get socket.io working with SSL?
23:30 < progrock`> Man, i am so proud... after 3 attempts of bingiton.com  google has won every single time (and in most cases bing won at best 1 of 5)
23:31 < progrock`> I suppose their advertising may still be right.. my searches werent the webs most popular... but they are my most popular.. in which case, bing sucked balls
23:31 < HSL> I used to do this to get SSL working: https://gist.github.com/hsleewis/0136a62d693528a3849b
23:31 < HSL> but with nodejs 0.10.8 it doesn't
23:34 < progrock`> Man, I'm getting rid of my routes folder for now (express default)... so much easier having it in app.js for now.  I suppose that may change if this project grows
23:36 <@isaacbw> woah woah woah
23:36 <@isaacbw> regex validation in html5 input tags
23:37 <@isaacbw> sweet beans
23:37 < JamesMGreene> HSL: Try adding the option `secure: true`
23:37 < progrock`> isaacbw: as in built into the html code?  or just JS? (which I would think  has always been available.. so I guess it within the html)
23:38 < progrock`> or maybe automatic? as in identifying its a legit email, etc?
23:38 < progrock`> and, sweet, got google validaiton working
23:38 < progrock`> Now, I need to get a database up and going
23:41 < progrock`> I think I'm going to limit my users to Google/Facebook/Twitter.... now, is it rude to force you to use one of the 3 and not have my own local user management? .... I personally would never make another account ona site I could use one of my major accounts on
23:41 < progrock`> I mean, this isnt a porn site or something, lol
23:42 < gluxon> progrock`: Why not OpenID?
23:42 < gluxon> And Mozilla Persona while you're at it :D
23:42 < gluxon> isaacs: I saw that on HN today. That blew my mind :D
23:42 < HSL> JamesMGreene: that's what I used to do, but it doesn't work anymore since nodejs 0.10.8
23:43 < JamesMGreene> HSL: It wasn't in your gist.
23:43 < progrock`> gluxon: maybe openID too.. but I jsut feel like everyone has one google, facebook, twitter account... THO, that may be my american thinking, maybe other countries this isnt true
23:44 < JamesMGreene> The old people in my life have Yahoo/MSN/Hotmail ;)
23:44 < HSL> JamesMGreene: damn,.. you're right,.. 
23:44 < JamesMGreene> (or custom ISP email, lol)
23:44 < gluxon> progrock`: I actually hate anything that tries to connect to my Google, Facebook, or Twitter.
23:44 < gluxon> They always force me to allow them to "post on my wall, tweet for me, etc"
23:45 < gluxon> That's given me a general phobia to avoid connecting accounts if at all possible.
23:45 < HSL> JamesMGreene: should I add it in the options or as extra var?
23:45 < gluxon> So, OpenID :)
23:45 < JamesMGreene> HSL: That's my understanding but I'm no socket.io expert
23:45 < progrock`> gluxon: lol.. well I dont have plans of that.. I mean, maybe in the future I may allow you to do somehting like that easily... but.. really I have no reason to
23:46 < progrock`> gluxon: but, I'll tkae your fear as reasonable... and I guess allow openid
23:46 < progrock`> tho, for the time being, I'm just allowing google (I mean, I got a ways to go before this is up and running)... and as long as something works, I can easily get the others added in later
23:46 < gluxon> There's a Node.js module that lets you use like, twenty different authentication methods. :P
23:46 < gluxon> Very easily.
23:46 < mscdex> passport
23:46 < progrock`> gluxon: thats what I'm using
23:47 < gluxon> Oh, ok.
23:47 < gluxon> :)
23:47 < progrock`> I just dont feel a need to do every single one of them
23:47 < progrock`> hell.. I dont even know if I'll reach a 100 users (tho whos knows, i may get surprised)
23:47 < HSL> JamesMGreene: unfortunately, same error :/
23:47 < progrock`> just making yet another jsfiddle clone.. .but making this one use sockets for realtime
23:47 < HSL> "   warn  - websocket parser error: reserved fields must be empty"
23:57 < progrock`> While my app is still in development, I've been runnign it on the server in a screen session  with: forever app.js
23:58 < progrock`> is there a more recommended way/
--- Log closed Sun May 26 00:00:08 2013
