--- Log opened Mon Dec 03 00:00:21 2012
--- Day changed Mon Dec 03 2012
00:00 < _numbers> well as with any automation, it makes good things better. coffeescript does that. but the second rule of automation is it makes bad things worse, and iced coffeescript definitely is doing that in this example.
00:04 < mscdex> npmjs.org doesn't show download counts anymore?
00:05 < DTrejo> _numbers: :(
00:06 < niggler> mscdex a bit late to the party
00:06 < DTrejo> _numbers: haha now i see the benefits of hellbacks; no need to compile stuff and die from the wierd alternative that is known as await
00:07 < DTrejo> hellbacks are at least written by humans, and possible to unravel
00:07 < mscdex> niggler: ?
00:07 < mscdex> niggler: i can't spend all day in here :-)
00:07 < niggler> lol mscdex i wasnt sure if you were responding to my comment or independently observed it
00:08 < mscdex> i just saw it just now
00:22 < chilts> mscdex: was fine yesterday and earlier today
00:23 < chilts> I wonder if npm-www just renders the page if the counts don't come back quick enough
00:23 < chilts> seems valid
00:46 < mscdex> chilts: i dunno, it's doing it consistently for me on any package
00:51 < chilts> sometimes I see it give the daily and weekly results back, but no monthly
00:51 < chilts> got these stats yesterday : https://twitter.com/andychilton/status/275166145416413184
00:58 < niggler> chilts you may haave broken the stats mechanism ...
01:04 < timeturner> is there a 404 or 500 status code equivalent for websockets?
01:04 < timeturner> or do we just send "Error" or something
01:20 < mscdex> timeturner: that's something you'd have to handle
01:20 < mscdex> timeturner: i mean, once the websocket connection is established
01:24 < MI6> joyent/node: Ben Noordhuis master * f8999da : build: avoid -Wno-old-style-declaration with gcc 4.2  Fixes the build on  - http://git.io/2Gh5jQ
01:28 < garbagecollectio> anyone make over 100k
01:31 < Exit> sup noderz
02:04 < _numbers> has anyone made a fork of npm that maintains node_modules/ more like bundler--with every module under a single directory, and only once-per-version?
02:06 < niggler> _numbers how do you handle versions?
02:09 < _numbers> i'm thinking like if `npm install` could take an argument that applied recursively, which defined the directory (e.g., i'd use the top-level ./node_modules/ directory) for which all modules got installed, and suffixed the version number to each directory... that'd work
02:11 < MI6> joyent/node: Ben Noordhuis master * 9d02bfb : test: fix simple/test-setproctitle on freebsd - http://git.io/POH7oQ
02:12 < davidbanham> Hey guys, I've got a node web server failing due to hitting ulimit. I've increased ulimit, but want to check that I'm not wallpapering over a problem in my code. Is it correct that node needs an open file descriptor for each concurrent open http connection?
02:12 < othiym23> davidbanham: that is correct
02:12 < davidbanham> othiym23: Thanks!
02:12 < _numbers> any love for this miniature async.js? http://codepen.io/mikesmullin/pen/yFAku
02:13 < othiym23> _numbers: you should check the docs on 'npm dedupe' for isaacs's ideas on flattening out the npm hierarchy
02:14 < othiym23> in general, I see the tree-like structure for node_modules as a feature not a bug, especially next to bundler's approach
02:14 < GreenDog> davidbanham, are you running socket.io or something similar?
02:14 < othiym23> right now I'm using nvm to manage my "main" node installation and using nave for everything else
02:15 < davidbanham> GreenDog: Nope, just a core nodejs http server serving static assets under reasonably significant load.
02:15 < GreenDog> lucky you to have such load :)
02:15 < davidbanham> It would be a much better job for nginx or something but I need really tight control over the headers I send due to some complete BS on the client I need to hack around.
02:15 < othiym23> it feels kind of clunky and I'd like to switch to just using nave for everything, but until the zsh support is improved for nave it's not really possible
02:16 < othiym23> how do people using homebrew to manage their node binary feel about it?
02:16 < _numbers> othiym23: its just hard to make changes. like towerjs has a healthy number of depdendencies and sub-dependencies; duplicate versions of stylus for example are installed in like 15+ subdirectories. if you want to change one thing about stylus, its painful to do locally, and even more painful to distribute (e.g. to a nodejs dev team, or to a staging/production server)
02:16 < othiym23> for whatever reason the idea of having my global modules under /usr/local bums me out
02:17 < othiym23> _numbers: you can get around some of that pain with npm link, but the deployment story there is indeed a pain to manage
02:17 < othiym23> and npm dedupe is a ways from being completely operational for that use case
02:18 < othiym23> _numbers: you might want to take a look at npm shrinkwrap, though
02:18 < _numbers> reading the man for both of those now. thx
02:18 < othiym23> you can custom install whatever crazy-ass versions of modules you want in your build tree and then ensure that npm install will mirror that configuration upon deployment
02:19 < othiym23> either that or just check the node_modules dir of the certified build into VCS and don't run npm install as part of deployment
02:27 < hatch> anyone have any preferences for a module to create a rest api? quite a few of them out there
02:53 < garthk> Nuts. Defining objects using functions as keys is harder than it looks. function x() { } console log({x:1}); // output object has string "x" as key, not function x.
02:53 < substack> keys can only be strings
02:54 < garthk> Nuts. Next best thing: is there an easy way to pull local variables from the current scope by name? In python that'd be locals()[variableName].
02:54 < gnarf> garthk: function f(){}; o={}; o[f] = 1;
02:54 < substack> garthk:  node --harmony_collections
02:54 < substack> then you get Map
02:54 < gnarf> not that it works
02:54 < substack> which can have arbitrary values as keys
02:58 < substack> garthk: https://github.com/Benvie/harmony-collections#map is how harmony collections work
02:58 < substack> > var m = new Map; function f () {}; m.set(f, '!!!'); m.get(f)
02:58 < substack> '!!!'
02:59 < substack> > m.get(String(f))
02:59 < substack> undefined
02:59 < substack> ^^^ not coerced to string to store as a key
03:02 < carlo5> What advantages and disadvantages of having all values in a language be objects?
03:09 < LoebeUbe> Hi all
03:09 < LoebeUbe> On OS X, would you recommend to install node.js with the official installer or by using homebrew?
03:10 < timeturner> just build it from the source
03:11 < LoebeUbe> timeturner: Isn't that what happens when I do use homebrew?
03:37 < Raynos> Can you make stdout non blocking
03:39 < garbagecollectio> what does node.js createclient do
03:40 < substack> garbagecollectio: just use net.connect()
03:45 < garbagecollectio> what did util.puts do?
03:46 < SomeoneWeird> http://nodejs.org/docs/latest/api/util.html#util_util_puts
03:47 < that4chanwolf> >Will block the process 0/10, wouldn't use.
03:48 < _numbers> is there any alternative to using bind() when snapshotting the value of a variable within an interation (e.g. for...loop) for later use within a function?
03:48 < garbagecollectio> can someone tell me http://stackoverflow.com/questions/9077261/node-js-help-intercepting-packets
03:48 < garbagecollectio> how that is actually intercepting packets and printing out the data
03:48 < garbagecollectio> or packet body
03:49 < garbagecollectio> its a proxy
03:50 < garbagecollectio> but it seems to printing out the response of the server it sends packet to
03:50 < misterhat> hi niggler
03:50 <@Nexxy> garbagecollectio, it's using util.puts(chunk)
03:50 < garbagecollectio> not sending out 
03:50 < niggler> WHERE'S MISTER TWIG?
03:50 < garbagecollectio> yeah but it looks like its printing out the response of the server it sends packets do
03:50 <@Nexxy> yes
03:50 < garbagecollectio> not printing out the packet stuff
03:50 < garbagecollectio> packet content
03:50 <@Nexxy> what are you expecting?
03:50 < niggler> lol garbagecollectio isn't expecting garbage
03:51 < garbagecollectio> indeed :)
03:51 <@Nexxy> I don't understand the question then
03:51 <@Nexxy> it's outputting the response of the server
03:51 < niggler> Nexxy are you well versed in the art of client-side guavascript?
03:52 < niggler> things are going pearshaped here :/
03:52 <@Nexxy> niggler, lol
03:53 <@Nexxy> I think?
03:53 < garbagecollectio> how would i intercept actual packets
03:53 <@Nexxy> garbagecollectio, with a packet sniffer
03:53 < garbagecollectio> in node dumb dumb
03:53 <@Nexxy> what are you attempting to accomplish?
03:53 < gkatsev> Nexxy: guavascript? lol
03:53 <@Nexxy> is there really a guavascript?
03:54 < gkatsev> I hope so
03:54 <@Nexxy> you're expecting "actual packets" from an http proxy, and I'm the dumb dumb
03:54 <@Nexxy> right.
03:55 < garbagecollectio> yes
03:56 < niggler> actually ive got a more pressing matter first
03:56 < niggler> i cant see download counts
03:56 <@Nexxy> garbagecollectio, what are you wanting to do?
03:56 < garbagecollectio> see the packets
03:56 < niggler> and want to decide if i should commandeer the npm package 'office' or just create something like 'freeoffice'
03:57 <@Nexxy> garbagecollectio, ok I guess what I was trying to get at is there is most likely an easier way to do whatever it is you're trying to do with packet sniffing
03:57 < garbagecollectio> i mean
03:57 < garbagecollectio> not in this case
03:57 <@Nexxy> use a packet capture library?
03:58 < Sly> Nexxy: I'm still waiting. :3
03:58 <@Nexxy> Sly, for what?!
03:58 < Sly> You know what.
03:58 <@Nexxy> refresh my memory
03:58 < Sly> It's black.
03:58 < niggler> lol
03:58 <@Nexxy> preorders are soon!
03:59 < Sly> Aw. y no now? :'(
04:00 <@Nexxy> because now is not then, yet
04:00 <@Nexxy> but soon, it will be
04:00 <@Nexxy> and then it will be now
04:00 <@Nexxy> but until then, it's soon
04:00 <@Nexxy> :P
04:00 < Sly> But soon should be now.
04:00 < niggler> ooh licensing question
04:00 < Sly> So we need to warp time and space..
04:00 <@Nexxy> I agree!
04:00 < Sly> And we need to make it happen.
04:00 < niggler> so if code X is MIT licensed
04:01 < niggler> and code X includes a file Y which is licensed under some other non-OSI license
04:01 < niggler> does the license to code X have to explicitly state that Y is under a different license?
04:02 < misterhat> is node going to be implementing ES6 module system?
04:02 < RLa> should be, since when you use X you must also use Y
04:02 < niggler> so here's a practical example
04:03 < gkatsev> misterhat: once ES6 modules are in v8, node will be getting them for free, more or less.
04:03 < misterhat> will people use them?
04:03 < RLa> if Y is GPL then using it in X is violation i think
04:03 < niggler> https://github.com/dominiklessel/xlsx
04:03 < niggler> this includes the file https://github.com/dominiklessel/xlsx/blob/master/lib/vendors/xlsx.js
04:04 < niggler> which is actually https://github.com/stephen-hardy/xlsx.js
04:04 < RLa> hm
04:04 < niggler> so the license is some microsoft pseudopen source
04:04 < niggler> https://github.com/stephen-hardy/xlsx.js/blob/master/LICENSE.txt
04:05 < niggler> the first repo includes the js file and, in the license, doesn't recognize that the particular file is under the microsoft trolling license
04:05 < niggler> now, a superficial reading of the license would imply that the file would be covered under MIT license
04:05 < RLa> that MS license seems quite free
04:05 < niggler> OSI doesnt recognize it iirc
04:06 < misterhat> what happens if you choose not to include a licence?
04:06 < _numbers> js riddle: what is the difference between these two for loops? why does a closure preserve the iteration values? http://bit.ly/SAoAVw
04:06 < niggler> i think you retain rights unless you include an open source license
04:06 < misterhat> rofl
04:06 < misterhat> that url
04:07 < niggler> so I would think that the license would have to say that the code block follows a different license
04:07 < niggler> and mention it somewhere
04:07 < niggler> kinda like what isaacs does
04:08 < RLa> hm, it's not so free
04:08 < RLa> "Platform Limitation- The licenses granted in sections 2(A) & 2(B) extend only to the software or derivative works that (1) are run on a Microsoft Windows operating system product, and (2) are not Excluded Products."
04:08 < RLa> OSI will never put blessing on it
04:08 < niggler> https://raw.github.com/isaacs/npm/master/LICENSE
04:08 < niggler> this is the npm license
04:08 < niggler> and at the bottom i see
04:08 < niggler> Except where noted, this license applies to any and all software
04:08 < niggler> programs and associated documentation files created by the
04:08 < niggler> Original Author, when distributed with the Software.
04:09 < niggler> ok i didnt mean to flood, but it should have said "Except where noted, this license applies to any and all software programs and associated documentation files created by the Original Author, when distributed with the Software."
04:09 < niggler> and then enumerates the external components
04:10 < RLa> so it seems this license grants rights only when you run code on windows
04:10 < RLa> otherwise you are in clear violation of copyright and patent rights
04:13 < fotoflo__> Hi all, quick question: why is it that sometimes i have to use the toObject() method or ._doc property in mongoose, and sometimes I don't?
04:15 < RLa> niggler, you should certanly file issue on it on both projects
04:15 < RLa> node-xlsx says MIT and without peeking into source files you never know how deep legal shit you might get
04:16 < niggler> yeah RLa ive written a cleanroom implementation of XLSX reading/writing
04:16 < niggler> mindnumbingly boring reading of the ISO specs
04:16 < niggler> and am doing the same right now for DOCX
04:17 < niggler> all of those projects using XLSX.js seem like ticking timebombs
04:18 < RLa> misterhat, the file header has link to the license file
04:19 < niggler> did you mean me RLa?
04:19 < niggler> or misterhat
04:19 < misterhat> RLa: what if it doesn't 
04:19 < RLa> and it also says "Released under the Microsoft Office Extensible File License"
04:20 < misterhat> i'm talking hypothetically 
04:21 < niggler> at the very least, license should show up in npm search
04:22 < niggler> hey mikeal
04:22 < niggler> mikeal: https://github.com/isaacs/npm/issues/555 states that you added license to package detail page, yet it doesnt show up
04:24 < mikeal> that project is dead anyway :)
04:24 < niggler> haha in any case, what would it take for you to add license as a field in npm?
04:24 < RLa> damn, i got disconnected
04:25 < RLa> niggler, you will file issues?
04:25 < mikeal> pull request :)
04:25 < niggler> yeah, after getting an idea as to who is using that code
04:25 < sosnon> i'm running nodemon in my app's roto directory like this 'nodemon -w ./** app.js' and it works for app.js (./**.js seems to work for all js files); however, it does not cause a new request/push if static files change (of coursed); is there such a tool yet? something that issues the client to refresh automtically (by requesting the static files, maybe?)?
04:26 < niggler> sosnon forever -w
04:26 < niggler> RLa: i think the first step is to file an issue with xlsx.js and get a clarification first
04:26 < niggler> it may be possible to get them to release it under MIT license
04:26 < RLa> i doubt
04:27 < RLa> i already see it as another ms conspiracy
04:27 < sosnon> niggler: let me check that
04:28 < paolooo> hi all, i'm new to nodejs. how do I update my nodejs and npm?
04:30 < Raynos> Can you make stdout non blocking?
04:30 < RLa> isn't it already
04:30 < Raynos> nope
04:30 < Raynos> process.stdout.write is blocking
04:30 < SomeoneWeird> Don't think so
04:31 < RLa> wow, that's news
04:31 < Raynos> as far as I know
04:31 < Raynos> maybe its non blocking for child processes
04:31 < gkatsev> I guess wrapping it in a process.nextTick/setTimeout would make it somewhat non-blocking
04:32 < niggler> RLa https://github.com/stephen-hardy/xlsx.js/issues/8 i'll give it two days and if there's no response I'll go through and flag the projects using it
04:32 < RLa> hm, manual says blocking only to tty descriptors and regular files
04:32 < SomeoneWeird> http://stackoverflow.com/questions/6471004/how-can-i-write-blocking-in-stdout-with-node-js
04:32 < Raynos> I see
04:32 < SomeoneWeird> try reversing that answer
04:32 < Raynos> Thats what I mean.
04:32 < SomeoneWeird> fs.write(1, "whatever")
04:32 < SomeoneWeird> seems to work
04:33 < RLa> given ms bullshit from past i doubt they will change the license and you have to use it on your own risk
04:33 < niggler> that's why i decided to write my own
04:34 < RLa> and of course, projects including code from this must certanly make it clear that such license is used for some of the files
04:34 < sosnon> well, with 'forever' the client still has to re-request the static files (.css, for instance) - which still requires reloading after changing a .css/.js/... file, for instance
04:34 < sosnon> niggler: ^
04:34 < niggler> by default forever will restart anytime those are changed
04:35 < sosnon> i probably have to issue such a push myself using socketIO/websockets/..., i assume?
04:35 < RLa> i doubt nodemon makes your browser refresh/reload automatically
04:35 < niggler> oh the browser wont refresh
04:35 < sosnon> RLa: as i said, it does not
04:35 < sosnon> sure, how would it refresh by just restartin the app/server
04:35 < niggler> nvm i thought you wanted a server refresh
04:35 < niggler> if you want a client refresh set the cache control
04:36 < RLa> that still does not trigger refresh
04:36 < sosnon> well, i could use a socket.io event, couldn't i? just pull anything, maybe...
04:36 < niggler> if you start with a cache expiry in the past, then XHR wont be cached
04:37 < niggler> then requesting the file a second time will give you the new one
04:37 <@Nexxy> https://github.com/nexxy/nice-package
04:45 < paolooo> Hi all, how do I update my Node.js to latest version?
04:46 < timeturner> npm install n -g && n stable
04:46 < timeturner> you can check with node -v after that
04:46 < paolooo> thank you timeturner 
04:47 < sosnon> how would not caching XHR/... cause the browser to automatically fetch all static files?
04:48 < niggler> sosnon if you cache the files and you try to get the files again using XHR some browsers serve the cached version rather than get the new file
04:49 < sosnon> sure, but the whole issue is trying to get the files again (additionally setting cache expire may be necessary, that's true)
04:53 < pablox> hi hi
04:59 < sosnon> <meta http-equiv="refresh" content="15" /> is way more comfortable than all the things described above (not euqivalently reliable, though); admitedly, modern times make web development a brise sometimes
04:59 < sosnon> just a hack, though
05:03 < sosnon> document.location.reload(true) may work, too
05:10 < astropirate> Anyone here use Fay?
05:13 < addisonj> does anyone know if the node http agent does DNS caching? I am seeing some weird issues where load is not getting balanced to an elastic load balancer
05:18 < astropirate> addisonj, my knowlage here is limited.. but is the OS DNS cache too slow?
05:27 < sosnon> ok, the perfect setup (total app restart, though): emit a one-time event from the server, then force a refresh on the server for this event; run the whole thing with forever; so even a singel CSS rule change will be pushed to the client; now that's what i call 'continuous deployment' ;)
05:33  * astropirate slaps sosnon 
05:33 < that4chanwolf> That sounds... oddly horrifying.
05:34 < niggler> that4chanwolf your nick sounds horrifying
05:35 < sosnon> it is; it is slow as heck, too
05:36 < sosnon> checking for changes, then issueing a push of a single resource to the client is way more efficient, probably
05:37 < sosnon> issueing several single changes in a row will cause multiple queued refreshes which will be slow again
05:45 < _numbers> today i learned how to use closures instead of bind() :)
05:46 <@Nexxy> _numbers, great job :D
05:46 < _numbers> thx
05:47 < misterhat>  hello!
05:49 < mistertwig> niggler: is node faster than python?
05:49 < niggler> lol what type of question is that?
05:49 < niggler> is an apple better than an orange?
05:49 < mistertwig> yes
05:49 < gkatsev> node can be faster
05:49 < gkatsev> same with python
05:49 < niggler> it depends on the task at hand mistertwig
05:50 < gkatsev> you can compare apples and oranges, you just need to use a spectrometer!
05:50 < misterhat> yes
05:50 < misterhat> oranges hurt when they're squeezed in my eyes
05:50 < gkatsev> but yes, 'it depends'
05:50 < misterhat> apples on the other hand...
05:50 < misterhat> i know V8 can be extremely fast
05:50 < misterhat> even mozilla's is fast
05:50 < niggler> misterhat the fact that you've experienced either of those is disturbing
05:50 < niggler> python is a language
05:50 < timeturner> a node a day keeps the downtime at bay
05:50 < niggler> node is a platform
05:50 < misterhat> well
05:51 < misterhat> cpython
05:51 < niggler> there's ironpython
05:51 < niggler> stackless python
05:51 < misterhat> pypy
05:51 < misterhat> jython
05:51 < timeturner> nono
05:51 < mscdex> don't leave the ironpython on
05:51 < misterhat> i've written in both languages
05:51 < misterhat> javascript and python that is
05:52 < mscdex> ironpyjython
05:52 < misterhat> no mscdex, impossible!
05:53 < niggler> ironpypy
05:53 < mscdex> ironada
05:53 < misterhat> oh my
05:53 < misterhat> what have i started
05:54 < mscdex> jobal
05:54 < mscdex> cobal in the JVM!
05:54 < mscdex> er cobol
05:54 < mscdex> jobol!
05:55 < niggler> nobol
05:59 < _numbers> the question is, would you ever use a pynode?
06:00 < misterhat> no
06:00 < misterhat> i wouldn't
06:00 < misterhat> ever
06:00 < _numbers> but a nodepy?
06:01 < niggler> hey RLa you still here?
06:01 < niggler> i got a response
06:01 < niggler> https://github.com/stephen-hardy/xlsx.js/issues/8
06:01 < niggler> time for the clarion call
06:03 < gkatsev> comment and ask whether that particular clause can be removed.
06:03 < niggler> that wouldnt be sufficient for other contexts that use the code and claim an MIT license
06:04 < fotoflo__> hmm, when I'm using async forEach, i get dropped into my run-when-done function on an error… how do i drop out of the forEach?
06:07 < ashnur> morning
06:08 < ashnur> damit, same ppl as on the other channel
06:08 < ashnur> =)
06:08 < ashnur> had to check twice
06:08 < ashnur> so, noob question: how can I pipe a post request's body out to stdout
06:08 < ashnur> ?
06:09 < gkatsev> create a stream, pipe it to process.stdout?
06:10 < ashnur> yeah, the basics i know, but apparently i am too stupid to do the exact syntax 
06:10 < lohkey> req.pipe(process.stdout);
06:10 < gkatsev> is req always a stream, though?
06:10 < lohkey> for the standard http module, yes
06:10 < ashnur> i thought that's gonna work, yes, but it seems that it does not. console.log at the same line spits out data
06:10 < gkatsev> ok, wasn't sure.
06:11 < gkatsev> perhaps stdout is paused?
06:11 < lohkey> no, only process.stdin is phased by default
06:11 < lohkey> *paused
06:11 < gkatsev> k, I haven't done a lot with stdout/in
06:12 < lohkey> ashnur: that should work, you could put an event listener on the "data" event to verify that you're receiving data though
06:12 < lohkey> req.on("data", function(data) { console.log(data); });
06:13 < ashnur> thanks, I wanted to be sure that I am poking it the right way, i will debug it now
06:13 < lohkey> ^^ if thats not firing, then you're not being sent any data
06:13 < ashnur> lohkey: i see the data if i put in a console.log
06:13 < fotoflo__> anyone know how to drop out of an async loop?
06:14 < ashnur> but it's not plain http, but an express, not even a default one, things might be there interfering
06:14 < lohkey> ashnur: are you using express?
06:14 < lohkey> yeah, thought so
06:15 < lohkey> that won't work with express
06:15 < lohkey> only with the native HTTP module
06:15 < ashnur> kewl. 
06:15 < lohkey> it's because express exhausts reading the request stream before handing off control to you
06:16 < ashnur> okay, so i have to do this some other way. 
06:31 < sosnon> i have a function 'getRandomData()' which does fs.reafFile(..., callback) where the data is only accessible from within the callback and i have io.socket.on(..., callback); how do i properly tretrieve the data and hand it over to another var in the io.socket.on callback; it looks like a callback standoff, but since i know there is no such thing, i assume there is a more rational solution, isn't there?
06:31 < sosnon> besides using var data = readFileSync(...); of course
06:34 < mscdex> sosnon: can you give example code of what you're trying to achieve?
06:38 < niggler> https://github.com/dominiklessel/xlsx/issues/1
06:49 < sosnon> solved; it was the usual 'problem' with callbacks; http://pastie.org/5470269
06:54 < sosnon> something like this http://pastie.org/5470281 is not possible of course since we' re dealing with async functions
07:11 < joe_> test
08:01 < meiwes> hello,where is nodejs installed on ubuntu
08:01 < niggler> meiwes did you try `which node` or `which nodejs`?
08:03 < meiwes> I see what you mean,niggler,thanks.
08:06 < meiwes> niggler:where do i find the index.html or index.js or can i do an .init anywhere?
08:10 < meiwes> never mind,i got it working.
08:25 < thealphanerd> Nexxy: https://secure.vimeo.com/54755658
08:28 <@Nexxy> thealphanerd, so good
08:28 <@Nexxy> I'll take two
08:28 < thealphanerd> we wil lsell it
08:28 < thealphanerd> $3500
08:28 < thealphanerd> :P
08:28 <@Nexxy> sold!
08:28 < thealphanerd> I actually can't sell it
08:28 < thealphanerd> but if you are geniunely interested I can ask all involved parties
08:28 < thealphanerd> hehe
08:29 < thealphanerd> it does crazy dsp stuff too
08:29 <@konobi> Nexxy: checked out any of the RC stuff on dx.com?
08:30 < meiwes> do i have to download fs plugin or is it already there in my node installation
08:30 <@konobi> meiwes: check the docs
08:31 < meiwes> what docs,i am already at the fs wiki page
08:31 <@konobi> meiwes: nodejs.org
08:33 < meiwes> konobi:are you seriously telling me anything?
08:35 < meiwes> npm ls
08:36 <@konobi> meiwes: read the bloody docs on the bloody nodejs.org page
08:36 < meiwes> easy jaws of life,i got it now
08:36 <@konobi> o.O
08:45 <@Nexxy> bloody fucking robots
08:45 <@Nexxy> cc mikeal 
08:45 < substack> beep boop
08:45 < mikeal> haha
08:46 < mikeal> hey
08:46 <@Nexxy> o hay
08:46 < SomeoneWeird> must kill humans
08:46 < mikeal> is there a new awesome scraping library for client side
08:46 < mikeal> i seem to remember a utitlity for doing selectors without jsdom
08:46 <@Nexxy> spatula.js
08:46 < substack> cheerio?
08:46 < SomeoneWeird> phantom?
08:46 <@Nexxy> but it's written in coffeescript
08:46 < substack> or trumpet if you don't want to buffer content
08:47 < mikeal> no
08:48 < mikeal> maybe it was cheerio
08:48 <@Nexxy> mikeal, regex is the answer
08:48 < thealphanerd> regex is always the answer is it not?
08:48 < substack> Nexxy: regex is strictly not powerful enough to parse html!
08:49 < substack> on account of hierarchies of automata
08:49 <@Nexxy> in truth I've only ever used it to hack together a SOAP client :D
08:49 <@Nexxy> but that's just like html only worse
08:49 <@Nexxy> cuz xml
08:51 < thealphanerd> substack: so cheerio lets you use jquery conventions to parse scraped data server side?
08:51 < substack> yes
08:51 < NodeX> correct-a-mundo
08:53 < SomeoneWeird> so does phantom
08:53 < trodrigues> mmm...this is relevant to my interests
08:54 < trodrigues> yeah, I ended up using phantom for some stuff because jsdom would puke on it
09:02 < mikeal> cheerio
09:02 < mikeal> was what i was looking for
09:02 < mikeal> thank you substack
09:02 < mikeal> totally worked great
09:03 < mikeal> i'm scraping this page and download all of this manga :)
09:03 < SomeoneWeird> lmao
09:03 < mikeal> haha, they do a cookie and a referrer check, to try and stop scraping
09:04 < mikeal> good thing request does cookies by default! :)
09:04 <@konobi> there's also apricot
09:04 < substack> mikeal: npm publish it when you're done
09:05 < thealphanerd> mikeal: DOWNLOAD ALL THE MANGAS
09:05 < thealphanerd> hehehe
09:05 < mikeal> most it sits on top of stuff this guy does https://github.com/fb55
09:05 < [AD]Turbo> hola
09:06 < mikeal> the cheerio stuff i mean
09:07 < SomeoneWeird> heh he doesn't look very old
09:08 < mmalecki> SomeoneWeird: he's ~19
09:08 < SomeoneWeird> ic
09:08 < mmalecki> he worked for nodejitsu as an intern for a little while
09:08 < mmalecki> very clever
09:08 < SomeoneWeird> i noticed
09:08 < mmalecki> also freaking awesome dude
09:09 < SomeoneWeird> wheres nodejitsu based?
09:09 < mmalecki> NY
09:09 < mmalecki> most of people are remote tho (like me, for example)
09:09 < SomeoneWeird> ah ic
09:09 <@konobi> i'm about as local as i can get to my company
09:10 < thealphanerd> I'm so jelly of kids who are 19 year old ninjas
09:11 < SomeoneWeird> lol
09:11 < thealphanerd> I didn't get wise about all the fun until I was 25
09:11 < SomeoneWeird> i'll be ninja before i'm 19
09:11 < SomeoneWeird> :P
09:11 < mmalecki> being young is overrated
09:12 <@Nexxy> ya, I can't wait for 13
09:12 < SomeoneWeird> yeah
09:12 < SomeoneWeird> i hate being underage
09:12 < SomeoneWeird> I can't do shit
09:12 < mmalecki> I'll be underage again soon :(
09:12 <@Nexxy> yes you can
09:13 < thealphanerd> SomeoneWeird: you can do ANYTHIGN
09:13 < mmalecki> it does feel shitty
09:13 < SomeoneWeird> i can't start a company
09:13 < SomeoneWeird> lol
09:13 < SomeoneWeird> i can't drunk
09:13 <@Nexxy> yes you can
09:13 < SomeoneWeird> go clubbing
09:13 < SomeoneWeird> fuu
09:13 < SomeoneWeird> -.-
09:14 <@Nexxy> SomeoneWeird, you're not missing out on much
09:14 < SomeoneWeird> Nexxy, you're going to be a good mother
09:14 < SomeoneWeird> :p
09:14 <@Nexxy> unless you're really into yelling as loud as you can and not being able to hear anyone all night long
09:14 < SomeoneWeird> eh maybe
09:14 <@Nexxy> SomeoneWeird, I already am!
09:14 < SomeoneWeird> Still, it really pisses me off I can't do anything business wise until i'm 18
09:15 < SomeoneWeird> Nexxy, when you're kids turn into teenagers we'll see :p
09:15 < thealphanerd> eww clubs
09:15 <@Nexxy> what will we see?
09:15 < SomeoneWeird> ._.
09:16 < SomeoneWeird> nevermind
09:16 < thealphanerd> SomeoneWeird: please don't make that a life goal hehehe
09:16 < SomeoneWeird> whats this?
09:18 < SomeoneWeird> ANYWAY
09:18 < thealphanerd> moving forward..
09:19  * SomeoneWeird hides
09:19 <@Nexxy> just
09:19 <@Nexxy> get a fake ID and then by the time you're old enough for clubs
09:19 <@Nexxy> you'll already have it out of your system
09:19 <@Nexxy> and you can do more productive things
09:19 < SomeoneWeird> heh
09:19 < thealphanerd> or just go to concerts!
09:20 < SomeoneWeird> or just code stuff!
09:20 < thealphanerd> that too
09:36 < jcrew> clubs are cool for a couple of years and then you end up wanting to become productive again
09:36 < jcrew> like nexxy said
09:43 < sara_> I am using elastical plugin to index and unindex documents in elasticsearch. I am trying to unindex documents asynchronously in a loop calling client.delete to unindex document. While doing so, I am getting the following error -> (node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit. What possible causes there might be?
09:45 < AAA_awright> sara_: Are you adding more than 10 listeners to an EventEmitter? Then the problem is you're not calling setMaxListeners() :p
09:46 < AAA_awright> But that error exists for a reason, that's probably not the best way to write the program
09:48 < sara_> @AAA_awright
09:48 < sara_> Thanks for your response. Is it because of the un indexing call inside an asynchronous loop? I tried setting maxListeners but it didnt work. 
09:49 < sara_> mongo.removeProfile(db, expireddoc, function(removed){
09:49 < sara_>                     client.delete('com.xyz', type, expiredDoc._id.toString(),function (err, res){
09:49 < sara_>                         if(err)log.error(JSON.stringify(err));
09:49 < sara_>                     });
09:49 < sara_>                     callback();
09:49 < sara_>                 });
09:49 < AAA_awright> sara_: Try AAA<Tab>, no "@"
09:49 < AAA_awright> sara_: I have no way of telling, pastebin some code NOT IN CHANNEL eeeeeee
09:50 < sara_> sure. sorry new to the channel
09:50 < SomeoneWeird> lmao @ topic
09:51 < AAA_awright> sara_: Why are you doing this in a loop, you should be able to run a query that removes all the matching documents at once
09:51 < AAA_awright> sara_: Also why isn't callback() inside the client.delete callback?
09:56 < sara_> Yea Good point,  i should look for options for deleting by query. I just went with the elastically api and didn"t think. My bad
09:58 < sara_> is the callback outside the delete part can cause errors?
09:58 < sara_> THanks a lot AAA_awright 
09:59 < AAA_awright> sara_: Well if you're calling the callback before the query is done, yeah, that would be a problem
09:59 < Thomas`-> Hey guys
10:00 < Thomas`-> socket.emit("some events") <- is there any way to know when this has been sent?
10:01 < gildean> Thomas`-: what do you mean?
10:01 < sara_> Thanks AAA_awright  will fix that
10:01 < gildean> Thomas`-: you need a timestamp on the emitted events?
10:01 < gildean> or what?
10:02 < Thomas`-> i want to know the recipient has recieved this event before i send another event
10:02 < AAA_awright> Thomas`-: socket.on("some events") ?
10:02 < Thomas`-> no
10:03 < Thomas`-> AAA_awright, well, what do you mean. that would mean id have to send an ack from the client
10:03 < Thomas`-> back to the server to tell him when its been recieved
10:04 < AAA_awright> Thomas`-: Technically it's impossible to prove that another client has received a message, it's called the Two Generals Problem
10:04 < AAA_awright> Thomas`-: But what is guarenteed is that the messages will be received in order
10:04 < AAA_awright> since they're encoded as a stream
10:06 < Thomas`-> so if i do emit("some event 1") then a short time after it i do emit("some event 2"), i can be assured socket.on("some event1") ,on the client side, will always be executed first?
10:07 < AAA_awright> Thomas`-: If it's on the same connection/stream yes
10:07 < Thomas`-> cool
10:07 < Thomas`-> ok i didnt relise that
10:07 < Thomas`-> thanks for explaing it
10:07 < AAA_awright> That's only for stream-based communications, UDP distinctly does not guarentee receiving packets in order
10:09 < Thomas`-> yep, its tcp stream based protocol
10:10 < pancake> how can i create apache-like logs with expressjs?
10:11 < jsilver> in socket data event, how long does socket read for? or is "data" just always going to be the entirety of the buffer sent?
10:21 < Rotevit> hello :)
10:21 < Rotevit> I'm having trouble running node.js on an EC2 instance. Can anyone help me with that?
10:22 < NodeX> define: trouble
10:22 < Rotevit> I managed to install node.js and I can run my application using a simple `node web.js` command
10:22 < deoxxa> NodeX: difficulty or problems
10:22 < NodeX> deoxxa :P
10:23 < Rotevit> now I have 2 problems: 1) when I curl to localhost I don't get the expected results.     2) When I try to curl from outside the server using the hostname received from amazon, I get nothing at all.
10:23 < NodeX> firewall issues?
10:23 < deoxxa> Rotevit: 1) paste code 2) ??? 3) profit
10:24 < Rotevit> deoxxa: I'll prepare a smaller demo that I can't paste here. Otherwise, it's just too much code.
10:24 < Rotevit> can't=can
10:25 < deoxxa> Rotevit: use gist.github.com or a similar pastebin, no matter the amount of code
10:25 < Rotevit> k, I'll try that
10:26 < jsilver> https://gist.github.com/79221e173a3c3bfc3d1e https://gist.github.com/8dfe10d11c1bd64bce5a whats my problem what am i doing wrong here
10:27 < deoxxa> coffeescript is so much more readable than javascript
10:28 < gildean> deoxxa: lol, yeah
10:28 < deoxxa> says the error is on line 172
10:28 < deoxxa> there's no line 172
10:28 < deoxxa> GG COFFEESCRIPT LOL
10:28 < jsilver> i made the early decision to go coffee, easy to port
10:29 < jsilver> from ruby
10:29 < deoxxa> hahahahahahahhahahahahahaaaaaa
10:29 < Rotevit> deoxxa: https://gist.github.com/f2c4c71fb16e0e683276 The first 3 files are inside the 'walkiedoggie' folder.
10:29 < deoxxa> jsilver: `this' in that context is not the `this' you want
10:29 < jsilver> i know, but why
10:29 < deoxxa> jsilver: that'd be nice and obvious if you were using javascript, but coffeescript makes it all to easy to forget you're creating a new function
10:30 < jsilver> i need to share those vars between all connected
10:30 < jsilver> yea
10:30 < deoxxa> parse_line = (line, io) ->
10:30 < jsilver> there is no globals is coffee, so i dont know what to do
10:30 < jsilver> lemme show u somethin
10:30 < deoxxa> well i can tell you how to fix it in javascript
10:30 < jsilver> ok
10:30 < jsilver> n/p
10:30 < jsilver> still interested
10:31 < deoxxa> my approach would be to make that whole thing into an object with methods on its prototype
10:31 < deoxxa> so like
10:31 < jsilver> getters/setters?
10:32 < deoxxa> function GlobalChatServer() { this.handles = []; } GlobalChatServer.prototype.parse_line = function(line, io) { parr = line.split("::!!::"); ... };
10:32 < deoxxa> var chat_server = new GlobalChatServer(); something.on("a_line_or_something", chat_server.parse_line.bind(chat_server));
10:33 < deoxxa> the .bind is the key part, it makes it so `this' inside the function returned from .bind() is what you tell it to be
10:33 < deoxxa> Rotevit: looking
10:33 < garthk> Yoik.
10:33 < Rotevit> deoxxa: thanks
10:33 <@Nexxy> it also makes a copy of the function bound to the context you provide
10:33 < garthk> Piping a ReadStream into zlib.createGunzip() was a lot faster than the OS-supplied gunzip. Woot!
10:34 < garthk> Running it through an XML parser, though? Oh, boy. CPU pegged; taking a very very long time…
10:34 < deoxxa> Nexxy: ah, yes, i should have been more clear about that. it doesn't modify the original function at all, jsilver.
10:35 < garthk> 7.5MB/s. Damn.
10:36 <@Nexxy> Rotevit, for example, if you do something like var wee = lol.bind(wat);
10:36 < deoxxa> Rotevit: what's the issue you're seeing? can't you contact the application on the port you're passing in via the _options object?
10:36 < deoxxa> Nexxy: it's jsilver that's wanting this
10:36 <@Nexxy> oh sorry lol
10:36 < deoxxa> so you should be! making a mistake with someone's name. tch.
10:36  * Nexxy is bad at this
10:36 < jsilver> https://gist.github.com/79221e173a3c3bfc3d1e https://gist.github.com/8dfe10d11c1bd64bce5a <<
10:36 <@Nexxy> anyway
10:36 < jsilver> i wannt an easy way to do this
10:36 < jsilver> lol
10:36 <@Nexxy> use ruby
10:36 < garthk> That said, wading through ~1GB of XML with <60MB resident is nice.
10:37 <@Nexxy> way easier
10:37 <@Nexxy> javascript is hard
10:37 < jsilver> ruby ver is done
10:37 <@Nexxy> oh
10:37 < jsilver> lemme show 
10:37 < jsilver> https://gist.github.com/26d90246227d20680c16
10:37 < jsilver> works fine
10:37 < jsilver> been using it for weeks and its stable
10:37 < jsilver> bad mem management
10:37 < jsilver> so i've come to node for answers
10:38 < Rotevit> deoxxa: I can access the application with curl using the defined port (5000), like this: `$ curl http://localhost:5000/socket.io/socket.io.js`; But I receive "Cannot GET /" instead of the socket.io.js file.
10:38 < deoxxa> Rotevit: ah, interesting
10:38 < deoxxa> Rotevit: sec, i'll take a look see
10:39 < Rotevit> deoxxa: Thanks, locally it's working, but I use an older version of node.js on my machine (8~ instead of 9~), plus I run ubuntu whereas the instance is running Amazon Lunix thing.
10:39 < Rotevit> Linux
10:39 < gildean> Rotevit: where are you running v.0.9.x?
10:40 < deoxxa> lunix is an illegal hacker operating system written by linyos torovoltos
10:40 < gildean> you do realize that's the unstable dev-branch
10:40 < Rotevit> gildean: On amazon ec2
10:40 <@Nexxy> where is everyone getting this 0.9.x
10:40 < Rotevit> :)
10:40 < deoxxa> > BSD, Lunix, Debian and Mandrake are all versions of an illegal hacker operation system, invented by a Soviet computer hacker named Linyos Torovoltos, before the Russians lost the Cold War.
10:40 < Rotevit> Nexxy: I think I got it from the github repository, if I remember correctly.
10:40 < gildean> Nexxy: on default?
10:41 < gildean> Nexxy: sorry i misread, i thought you meant everybody on ec2 gets 0.9.x :P
10:41 < deoxxa> Rotevit: the first problem here is that this code is way too complex :x
10:41 < wereHamster> how do I update my node modules? 'npm install foo' won't install the latest package
10:42 <@Nexxy> npm update
10:42 < wereHamster> it always takes the version from npm-shrinkwarp
10:42 < Rotevit> gildean: But it says 'release' in the branch name. Doesn't it mean it's stable? https://github.com/joyent/node/tree/v0.9.3-release
10:42 <@Nexxy> it means it's been released
10:42 <@Nexxy> set free upon the world
10:42 < wereHamster> Nexxy: that's not what https://npmjs.org/doc/shrinkwrap.html sais: Add or update dependencies. "npm install" each new or updated package individually and then update package.json. 
10:42 < Rotevit> deoxxa: I agree, I still need to refactor it. But I want it to work first...
10:42 < gildean> Rotevit: no, it only means that particular version is done, the development continues in the next version
10:43 <@Nexxy> https://npmjs.org/doc/update.html
10:43 <@Nexxy> wereHamster, maybe I'm misundersatnding your question
10:43 < Rotevit> I'll try the stable version then
10:43 < gildean> Rotevit: in node at least to this point, the even versions are the stable ones and the uneven are the dev-versions
10:43 < wereHamster> Nexxy: I have package.json and npm-shrinkwrap.json. In package.json the versions are unspecified (*). I have an old verison of a package installed, and the old version is fixed in npm-shrinkwrap.json.
10:44 < wereHamster> Nexxy: I'd like to update the package to its latest version.
10:44 < gildean> like many other projects as well
10:44 < deoxxa> Rotevit: it looks like you're trying to listen twice on the same port (?)
10:44 < deoxxa> but i might be just reading it completely wrong
10:44 <@Nexxy> wereHamster, `rm npm-shrinkwrap.json; npm update <module>`
10:44 < wereHamster> Nexxy: the doc page I linked before sais that I have to run 'npm install foo' for each package I want to update.
10:45 < wereHamster> Nexxy: it doesn't mention that I have to remove the shrinkwrap file.
10:45 < deoxxa> oh, dinner time
10:45  * deoxxa eating ->
10:45 < Rotevit> deoxxa: the 2 listen commands are there for running socket.io and express together. But, let me change the node.js version, set up a smaller test app, and then I'll ask for help again.
10:46 < gildean> Rotevit: also, try to divide the code into smaller modules, that are easier to handle and to read
10:47 < Rotevit> gildean: okay, thanks :)
10:47 <@Nexxy> wereHamster, good thing you asked :)
10:47 < wereHamster> Nexxy: does that mean you'll update the docs?
10:48 <@Nexxy> wereHamster, what would you like updated?
10:49 < wereHamster> Nexxy: the instructions. They don't work.
10:50 < wereHamster> oh well, not that I care..
10:50 <@Nexxy> wereHamster, what part didn't work for you?
10:50 < wereHamster> Nexxy: To add or update a dependency in a shrinkwrapped package: step 2.
10:51 < wereHamster> Add or update dependencies. "npm install" each new or updated package individually and then update package.json. 
10:51 < wereHamster> 'npm install foo' does not update the package, because it takes the version from npm-shrinkwrap.json
10:52 <@Nexxy> wereHamster, it's working on my machine
10:53 < wereHamster> Nexxy: alright, let me make a gist.
10:54 <@Nexxy> I will never get tired of seeing mkdirp install
10:54 <@Nexxy> I see this in my head every time http://i.imgur.com/Odk94.jpg
11:01 < wereHamster> Nexxy: https://gist.github.com/6ab4931c1ba766f27372. According to the docs, I should do: npm install; npm install nib; (no need to update package.json); npm shrinkwrap. But 'npm install nib' doesn't install the newest version.
11:06 <@Nexxy> wereHamster, `npm install nib@0.9` will
11:07 <@Nexxy> wereHamster, or you can use `npm update nib` to get the latest
11:08 < wereHamster> would be really handy if the doc mentioned that I have to use npm update or explicitly mention the version on the commandline. But then again, I couldn't care less about npm..
11:09 <@Nexxy> sounds like someone's grumpy
11:09 < substack> wah wah wah
11:09 <@Nexxy> almost makes me feel like you're ungrateful for the help I offered
11:09 <@Nexxy> lol
11:09 < wereHamster> well, I'm grateful, npm update worked.
11:09 <@Nexxy> you have an interesting way of showing it
11:10 < wereHamster> It's just that if I cared about npm I'd see that the docs get updated. But I don't.
11:11 <@Nexxy> if only everyone felt that way
11:11 < gildean> wereHamster: that's not a good attitude to carry around
11:11 <@Nexxy> gildean, it's okay, not everyone has to care for the tools they use
11:12 < gildean> Nexxy: yeah, but in that case imo you shouldn't be shouting about it
11:13 <@Nexxy> wereHamster is just grumpy
11:13 < gildean> hehe, it is monday after all, so i guess it's understandable
11:19 < garbagecollectio> oh man
11:21 < jsilver> is there any way to represent a null byte in node
11:23 <@Nexxy> jsilver, \0
11:23 <@Nexxy> '\0'
11:23 < jsilver> thanks
11:23 < jsilver> it shows up as ""
11:23 < jsilver> but i guess its really there?
11:23 <@Nexxy> yeah
11:24 < jsilver> trippy
11:24 < jsilver> lul
11:24 < jsilver> i need to read until null byte
11:24 < jsilver> but node just gives "data"
11:24 < jsilver> packets are taken-care-of for me?
11:24 <@Nexxy> yes most likely
11:24 <@Nexxy> in what context?
11:25 < jsilver> depending on how big the buffer sent is
11:25 <@Nexxy> oh
11:26 <@Nexxy> it's hard to say without a gist
11:27 < jsilver> https://gist.github.com/37691af0dab6bc17dc5b
11:27 < jsilver> this is close to working
11:27 < jsilver> it works, just needs more feature
11:28 <@Nexxy> ugh coffeescript is so hard to read
11:30 < deoxxa> Nexxy: blasphemer, there are no semicolons to get in your way
11:30 <@Nexxy> yes it's jsut a giant wall of text
11:30 < deoxxa> Nexxy: and clearly because of the forced indentation it's impossible to write messy code
11:30 <@Nexxy> with very little form
11:30 < deoxxa> you're just a hater
11:30 <@Nexxy> and extremely dense
11:30 <@Nexxy> I'm just spoiled by my own code!
11:31 < deoxxa> has anyone done a talk yet on why coffeescript is one of the crappiest ideas ever concieved?
11:31 < jsilver> wow i am so high off my ass in pixy falso coffee land.. pseudo python fo lyfe
11:31 <@Nexxy> lol
11:31 < jsilver> ..no srs
11:31 < jsilver> lol
11:31 <@Nexxy> jsilver, from what litle of that I can read
11:31 <@Nexxy> if you're just worried about packets from net
11:31 < deoxxa> no really has anyone done that talk
11:31 < deoxxa> because i would do that talk
11:31 <@Nexxy> you're fine w/o checking for null bytes
11:31 <@Nexxy> unles you're putting some funky protocol ontop
11:32 < jsilver> yeah. they seem to get munched off
11:32 <@Nexxy> but it looks like a basic chat app
11:32 < jsilver> no
11:32 < jsilver> yes pretty basic
11:32 <@Nexxy> pure JS would be much prettier
11:32 < jsilver> may add more commands later but its based on the idea of sending a UTF8 C String
11:32 < jsilver> i almost did that
11:32 < deoxxa> why are you looking for null bytes?
11:32 < jsilver> but friend convinced me to go coffee
11:32 < deoxxa> length-prefixed strings ftw
11:32 < jsilver> i use it in my protocol
11:32 <@Nexxy> jsilver, I am advocating violence against your friend
11:32 <@Nexxy> right now
11:32 < jsilver> lol
11:32 <@Nexxy> that's what I'm doing
11:32 < deoxxa> yeah
11:32 < deoxxa> i'm gonna have to agree with that
11:32 < jsilver> but i like coffee
11:32 <@Nexxy> just kidding :D
11:33 < jsilver> and it was easy to translate
11:33 < jsilver> this
11:33 <@Nexxy> no, seriously
11:33 < jsilver> https://gist.github.com/2d735481780fef44da55
11:33 <@Nexxy> kill them.
11:33 < deoxxa> no Nexxy that's too quick
11:33 <@Nexxy> but I'm totally joking
11:33 < deoxxa> should force them to maintain a large coffeeshit application
11:33 < jsilver> i practice ahimsa
11:33 < jsilver> issrealoutthere man 
11:33 < jsilver> &weactive
11:34 < jsilver> #YDD
11:34 <@Nexxy> omg language
11:34 < jsilver> lockahz
11:34 < deoxxa> ugh, wikipedia, stop telling me to donate. i already donated.
11:34 < deoxxa> and take bitcoin already jeez
11:35 <@Nexxy> deoxxa, you should really donate
11:35 < deoxxa> i'll donate your face
11:35 < deoxxa> to wikipedia
11:35 <@Nexxy> b-but
11:35 < deoxxa> then what
11:35 < deoxxa> huh
11:35 < deoxxa> what
11:35 < deoxxa> yeah
11:35 <@Nexxy> then you would probably owe them for damages
11:35 <@Nexxy> HAH
11:35 < deoxxa> faceopedia
11:35 < jsilver> but for real, if u dissed globalchat to my face, irl, i'd break yo legs
11:36 < jsilver> but yea i profess free love and tolerance and a vegan diet
11:36 < jsilver> and have tattoos
11:36 <@Nexxy> and quinoa?
11:36 < jsilver> love it
11:36 < jsilver> addicted to this stuff
11:36 < jsilver> known to eat it by the tonnage
11:36 <@Nexxy> of course
11:36 < jsilver> once arrested for quinoa thievery from a large quinoa corporation
11:36 < jsilver> down south
11:36 < deoxxa> lol
11:36 < jsilver> i had to be extradited
11:37 <@Nexxy> extrapolated?
11:37 < jsilver> interpolated
11:37 < deoxxa> extruded
11:37 < jsilver> they had us all crammed into a string
11:37 <@Nexxy> permuted?
11:37 < jsilver> all six of us
11:37 < jsilver> a, b, c, d, e and f
11:37 < jsilver> "abcdef" there we were
11:37 < jsilver> ... ??? Profit
11:37 < deoxxa> i'm so lost
11:38 < jsilver> i'm "stupid"
11:38 <@Nexxy> I'm calling the police
11:38 < jsilver> aww man
11:38 < deoxxa> WHOOP WHOOP
11:38 < jsilver> they live across the street
11:38 < deoxxa> that actually fit
11:38 <@Nexxy> the police don't live at the station silly
11:38 <@Nexxy> they're police, not firepeople
11:39 < jsilver> i however, am pure vamp
11:40 <@Nexxy> oh
11:40 < DaMorpheuS> question :  if I want to do a secondary index search with riak-js how do I embed this into my node app. because in the examples I only get the function db.search() but not how the data is comming back from this function
11:40 <@Nexxy> I think that makes it okay then
11:40 < Rotevit> deoxxa: I installed node 0.8.15, and now I get the contents of socket.io/socket.io.js when I curl - that's good. But when I curl from outside of the ec2 shell, it just waits with no response. This is the code: https://gist.github.com/4194391
11:41 < Rotevit> deoxxa: After waiting for a while, it finally says: "curl: (7) couldn't connect to host"
11:42 <@Nexxy> DaMorpheuS, maybe you should use nodiak
11:42 < DaMorpheuS> Nexxy: why?
11:43 < DaMorpheuS> is that better
11:43 <@Nexxy> it's actually maintaine
11:43 <@Nexxy> d
11:44 < DaMorpheuS> ill look into it
11:44 < DaMorpheuS> is it well documented :)
11:44 <@Nexxy> yes from what I've looked over
11:49 < garbagecollectio> what are event listeners
11:49 < garbagecollectio> eventemitters
11:49 < garbagecollectio> in node
11:49 < garbagecollectio> i dont get what htey do
11:52 < stagas> garbagecollectio: .on('foo', fn) adds functions in an array, .emit('foo', 'bar') calls all those functions with the argument 'bar'
11:53 < garbagecollectio> what is the .on or .emit attached to?
11:53 < stagas> any object
11:54 < NuZZ> basically, when something has an eventemitter attatched to it, it just called the .emit for the events it emits
11:55 < NuZZ> or er, the emit() function
11:55 < garbagecollectio> so how do u use object.on if object doesnt have a method
11:55 < garbagecollectio> oh i see
11:55 < garbagecollectio> the .on is the definition?
11:55 < NuZZ> you write a function
11:55 < NuZZ> its the listener
11:55 < NuZZ> on is an alias for addListener
11:56 < garbagecollectio> so i can use .on with any object
11:56 < NuZZ> so, in a function you can do say: emitter.emit('data', data)
11:56 < garbagecollectio> what is emitter though
11:56 < garbagecollectio> i dont get wht goes before .emit and .on
11:56 < NuZZ> then you would use emitter.on('data', DOSOMESTUFFWITHITSOMEWHEREELSE)
11:57 < garbagecollectio> wht is emitter though
11:57 < NuZZ> its an object or function you attatch the eventemitter to
11:57 < garbagecollectio> can it be any object
11:57 < NuZZ> via the module 'events'
11:57 < NuZZ> tbh, you can make your own
11:57 < garbagecollectio> can u just write
11:57 < garbagecollectio> this for me
11:57 < NuZZ> by just defining emit and on
11:58 < garbagecollectio> so say I have an object
11:58 < garbagecollectio> var blah = {}'
11:58 < garbagecollectio> blah.on('click', function() {  console.log('ddd'); });
11:59 < NuZZ> blah.connect = function() { blah.emit('number', 5) }
11:59 < garbagecollectio> then where would i use the emit
11:59 < garbagecollectio> i use blah.on AND blah.emit?
12:00 < NuZZ> blah.on('number', function(number) { console.log(number) })
12:00 < NuZZ> no
12:00 < NuZZ> you use on
12:00 < NuZZ> because for example
12:00 < TehShrike> substack: I like the look of that rolling reduce, what inspired that?
12:00 < NuZZ> a http server or net server emits stuff for you
12:00 < NuZZ> and all sorts of other shit emits events
12:01 < NuZZ> "emit" and "on" are just convension
12:01 < NuZZ> convention 
12:01 < TehShrike> convection!
12:01 < TehShrike> confection?
12:01 < NuZZ> do you understand yet?
12:01 < NuZZ> cus it's pretty simple
12:01 < garbagecollectio> i understand the on part with events
12:02 < garbagecollectio> but i dont get the emitting
12:02 < TehShrike> Events are the frosting on the oven!  No wait
12:02 < garbagecollectio> i dont get emitting 
12:02 < garbagecollectio> with the same object
12:02 < garbagecollectio> or do u use the same object
12:02 < TehShrike> garbagecollectio: emitting is how you trigger all the functions that are waiting "on" the event
12:02 < TehShrike> garbagecollectio: same object
12:02 < garbagecollectio> so in my node code if I do http.createClient
12:02 < garbagecollectio> and have http.on(something someth)
12:02 < NuZZ> createClient is depricated fyi
12:02 < garbagecollectio> I can force trigger that by doing http.emit
12:03 < garbagecollectio> i know i forgot the new one
12:03 < NuZZ> i dont think http exposes the emit function
12:03 < NuZZ> but if it does, yeah i guess
12:03 < garbagecollectio> ok
12:03 < garbagecollectio> and what is the point of it
12:03 < NuZZ> the events are stored in the object fyi
12:03 < NuZZ> blah = { _events: [ function() -> ]
12:04 < NuZZ> im used to coffeescript, god damn
12:04 < garbagecollectio> what object
12:04 < NuZZ> the point is calling stuff 
12:04 < NuZZ> the object you... bind the event emitter to
12:05 < NuZZ> ive been making an irc client 
12:05 < NuZZ> and event emitting is quite important
12:05 < NuZZ> and quite complicated when you're considering a web interface, a botnet and the normal irc events
12:05 < SomeoneWeird> you want to code a client or you need to?
12:05 < NuZZ> i already have actually
12:05 < NuZZ> but uh
12:05 < stagas> garbagecollectio: it's a control flow tool. instead of obj.onReady(function () { a(); b(); }) you do obj.on('ready', a).on('ready', b); ... obj.emit('ready')
12:06 < NuZZ> for example, i emit an event "#test5000" for when there is a PRIVMSG to channel #test5000
12:06 < SomeoneWeird> theres already irc client libs, if you didn't know
12:06 < TehShrike> garbagecollectio: https://github.com/bentomas/smokesignals/blob/master/smokesignals.js
12:06 < NuZZ> then in my bot script i type lirc.on '#test5000', () -> console.log 'got a message from test500 oh my lord'
12:06 < TehShrike> I like that implementation of an emitter
12:06 < TehShrike> Simple, well-commented
12:07 < NuZZ> SomeoneWeird, yeah, mine is better
12:07 < SomeoneWeird> if you say so :)
12:07 < NuZZ> node-irc is just amateur and basic as balls
12:09 < NuZZ> yeah i find the default event emitter to be lacking
12:09 < garbagecollectio> TehShrike 
12:10 < NuZZ> had to jimmy my own to allow for regexp matches
12:10 < garbagecollectio> so does .on and .emit
12:10 < garbagecollectio> is everything stored in an array?
12:11 < deoxxa> NuZZ: +1
12:11 < garbagecollectio> these things are all in some master array in node?
12:11 < TehShrike> garbagecollectio: something like that
12:11 < garbagecollectio> how do u get the name of the current object u are in
12:11 < garbagecollectio> say an object has a method
12:11 < deoxxa> NuZZ: i ended up doing my own irc library, which made me feel bad :<
12:11 < garbagecollectio> how do u get the current obj naem
12:11 < deoxxa> garbagecollectio: that makes no sense
12:11 < NuZZ> haha deoxxa 
12:11 < TehShrike> garbagecollectio: objects don't have names
12:11 < NuZZ> i know dat feel all too well
12:12 < garbagecollectio> they do have names
12:12 < NuZZ> but I am past the awkward phase
12:12 < TehShrike> garbagecollectio: variables have names
12:12 < TehShrike> garbagecollectio: but you can have many variables pointing to the same object
12:12 < garbagecollectio> true
12:12 < deoxxa> NuZZ: i did, however, manage to modularise it a lot better than the other things i saw. now i have a parser/producer that isn't tied to client logic: https://github.com/deoxxa/irc-protocol
12:12 < fotoflo> hey guys., when node / express crashes, how can i get it to output to STDERR? 
12:12 < garbagecollectio> so how do u get the current variable the object is instantiated in?
12:13 < deoxxa> garbagecollectio: that makes no sense
12:13 < garbagecollectio> var blah = new Class(); 
12:13 < garbagecollectio> how can a method in Class get either Class or blah
12:13 < deoxxa> well you can't get "blah"
12:13 < TehShrike> oh, the constructor
12:13 < NuZZ> deoxxa, interesting. I may have to steal some of this, haha. I find the parsing of the irc protocol to be the /killmenow moment
12:14 < deoxxa> NuZZ: it's pretty simple if you look at it as a "parse this data" problem, and not a "reply to this message with this message" problem
12:14 < garbagecollectio> u think there is no way to get blah
12:14 < garbagecollectio> what about Class
12:14 <@konobi> blah == this inside the method
12:14 < NuZZ> oh i know, it's just a lot, i even went through the irc RFC the other day and added the codes, and the data they return
12:15 < deoxxa> garbagecollectio: this.constructor.name
12:15 < TehShrike> garbagecollectio: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/constructor
12:15 < garbagecollectio> .name
12:15 < NuZZ> actually, it's almost identical to your "numerics.js", but I commented and grouped them
12:15 < deoxxa> ;; function X() {}; X.prototype.a = function() { console.log(this.constructor.name); }; var y = new X(); y.a();
12:16 < deoxxa> hm, no bot here
12:16 < deoxxa> w/e
12:16 < TehShrike> >> function X() {}; X.prototype.a = function() { console.log(this.constructor.name); }; var y = new X(); y.a();
12:16 < purr> TehShrike: undefined; Console: 'X'
12:16 < deoxxa> NuZZ: yeah i pulled them out of the RFC and added the welcome number
12:17 < NuZZ> ill upload my stuff to git, please hold :P
12:18 < deoxxa> i really need to do up a bunch of test data
12:20 < sha0coder> hi
12:22 < gmg85> hi guys?
12:22 < deoxxa> hi gmg85?
12:22 < NuZZ> deoxxa https://github.com/TurtlePie/lirc
12:22 < gmg85> i want to find out if a certain email exists or not
12:22 < gmg85> which is the quickest way of doing this
12:22 < NuZZ> you may be interested in https://github.com/TurtlePie/lirc/blob/master/lib/codes.coffee
12:22 < deoxxa> gmg85: send an email to it, ask the user to click a link in it
12:22 < deoxxa> gmg85: assuming you mean the quickest *accurate* way to do it
12:22 < gmg85> without retreiving the faliure notice email
12:23 < gmg85> deoxxa, its  a contact us form
12:23 < TehShrike> gmg85: ask the user if it exists, hope they don't lie
12:23 < deoxxa> gmg85: there's no other deterministic way to do it
12:23 < gmg85> deoxxa, hmm..ok
12:24 < deoxxa> gmg85: the best you can do is cross your fingers that there's a) an actual domain named what they say, b) a mailerserver running on the domain, c) a mailbox with the name they say and d) someone reading that mailbox
12:24 < deoxxa> gmg85: if you
12:24 < deoxxa> gmg85: if you're not sending them an email and asking for them to confirm, that is
12:24 < gildean> gmg85: the only thing you can do is validate the user input so it's a legit email-address format
12:25 < TehShrike> But even that is more complicated than you think
12:25 < TehShrike> I get angry at forms that do half-assed regexes that filter out valid email addresses
12:25 < deoxxa> obligatory: http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html
12:25 < gildean> yeah, most forget that the domain after @ can have multiple levels
12:25 < TehShrike> hah yes, I was about to go google for that
12:26 < TehShrike> A lot of people don't know how + works before the @, too
12:27 < deoxxa> sigh
12:27 < deoxxa> back to work tomorrow
12:27 < deoxxa> for *two whole weeks*
12:27 < Nasga> anyone know a ticketing web app in nodejs ?
12:30 < aandy> Nasga: ticketing app?
12:31 <@konobi> doubtful
12:31 < Nasga> andrehjr: to share ticket/issues with clients
12:32 < aandy> yeah but what's your definition of tickets? bug tracking? id issuing? selling concert places?
12:33 <@konobi> i don't get this whole "why isn't there $x application in nodejs" thing.
12:33 < aandy> usually it's because noone has made it yet, or because there's already a better solution for that
12:33 < DaMorpheus_2> Nexxy: why can't I install nodiak with npm install nodiak????
12:33 < aandy> ;)
12:34 < jsilver> got client talking to server
12:34 < jsilver> how can i read until i encounter a nullbyte?
12:34 <@konobi> aandy: yeah... but what i don't get is why some folks are so adamant that there should be a node version of $x
12:34 < jsilver> this is how my protocol works
12:34 < jsilver> UTF-8 string. nullbyte
12:34 < jsilver> right now it moves on too bad
12:34 <@konobi> jsilver: look for it in the buffer
12:35 < jsilver> so just keep building a line.. until i encounter it and then stop
12:35 < jsilver> correct?
12:35 < aandy> konobi: well, i agree. while node has come a long way i still think it's dangerous to set some things in stone, and for other projects node isn't really meant to be used like that (cms for instance, imo)
12:35 < jsilver> move on i mean
12:35 <@konobi> yes
12:35 < jsilver> ok cool thanks
12:36 <@konobi> aandy: what's the point if there's an alternative really
12:36 < jsilver> how to check Buffer for Null Byte then?
12:36 < jsilver> sry for help vamping
12:36 < aandy> konobi: exactly :)
12:37 <@konobi> jsilver: string.indexOf
12:37 < jsilver> conv to string and indexOf for '\0' ?
12:37 < jsilver> ok
12:38 < Rotevit> deoxxa: The problem is fixed. I had to open a port for the instance within the security port. That's all.
12:41 < jsilver> https://gist.github.com/987fc26b10e036febbda
12:42 < jsilver> would this be right for a global line = "" ?
12:42 < Nasga> aandy: a bug tracker would fit my needs
12:44 < jsilver> https://gist.github.com/c5c11156ff618c3ef9ad ?
12:48 < funkbox> Nasga: what are you looking for ?
12:48 < funkbox> as in, why a bug tracker
12:49 < Nasga> funkbox: i want a simple app to share open issue with my clients
12:50 < funkbox> Nasga: check out asana or trello
12:50 < funkbox> trello might be better for that
12:50 < Nasga> i use it :p
12:50 < funkbox> ah okay
12:50 < manuelbieh> is there a way to define a dependency in my package.json file where the version is greater than or equal but only concerning the minor version?
12:51 < manuelbieh> i want a dependency to be >= 0.3.10 (0.3.11, 0.3.12, 0.3.99) but not 0.4.0
12:51 < Nasga> but my boss want to keep control on the data, then i can't use saas :/
12:52 < TehShrike> manuelbieh: yeah, use ~
12:52 < TehShrike> manuelbieh: see the npm docs
12:53 < manuelbieh> TehShrike thank you. but where exactly
12:53 < manuelbieh> ?
12:53 < TehShrike> manuelbieh: where what?
12:53 < manuelbieh> to look in the docs ;)
12:54 < TehShrike> The part where it talks about version numbers :-)
12:54 < manuelbieh> ah, found it
12:54 < manuelbieh> thank you :)
13:11 < jsilver> just made it work with an evil regex
13:12 < alex88> hi guys, in npm, can I install a specific commit for a library?
13:12 < alex88> I've got only how to change the branch
13:22 < Youdaman> alex88: at a guess you could clone the library, set it to the specific commit, then install from that dir
13:23 < alex88> Youdaman, so, if I have the module checked out in /module/ and my code that needs the module in /code/, should I use npm install /module in the /code folder?
13:25 < fent> is there a JSON stringifier that works with functions?
13:25 < gmg85> am using nodemailer to send emails through my gmail account...
13:25 < gmg85> is there a way of changing the from field so that it doesn't use my gmail account
13:26 < RLa> fent, functions are not part of JSON
13:26 < gmg85> so that it says the email is from some other email that i supply to the sendMail funciton
13:26 < alex88> Youdaman, btw, npm install or update installs from package.json deps?
13:27 < fent> RLa: ok a Javascript stringifier
13:27 < gmg85> has anyone worked with nodemailer?
13:33 < manuelbieh> can i set a flag in a package.json so that a dependency will be installed with -g ?
13:45 < sirfilip> morning
13:46 < sirfilip> hey guys what is the best way to calculate expensive math operation  
13:46 < sirfilip> i was thinking about child_process and call python script with numpy 
13:46 < sirfilip> what is the best practice for this ?
13:48 < RLa> use c++?
13:55 < sirfilip> RLa: is that what you are doing ?
13:56 < RLa> no, i'm doing no heavy calculations
13:56 -!- mode/#node.js [+o piscisaureus_] by ChanServ
13:56 < RLa> if the algorithm is self-contained and can be implemented as c++ extension with thread and callback at the end, then why not
13:57 < RLa> if not, then separate process is probably the best solution
13:57 < RLa> and most flexible
13:57 < sirfilip> well i am calculating probability and i know python very well so i am using it as a separate process
13:57 < sirfilip> but the problem with this is that 
13:57 < sirfilip> i am loosing the scalability 
13:58 < sirfilip> cause in theory 
13:58 < sirfilip> i will still get the C10K problem 
13:59 < sirfilip> i can create separate process 
13:59 < sirfilip> that will spawn a thread but same 
14:00 < RLa> do you want to run that calculation in parallel with concurrency 10k?
14:01 < RLa> if you need to scale, use separate machines dedicated for calculating processes and communicate over json
14:01 < sirfilip> yes
14:01 < sirfilip> like a service dedicated 
14:01 < sirfilip> brb
14:01 < RLa> that is quite serious distributed computing
14:13 < flexd> Uh, is it possible to log all queries (for development) with node-mysql?
14:14 < flexd> I can only find the debug boolean, but that is a ridiculous amount of info :/
14:15 < AAA_awright> flexd: You can probably monkeypatch the query function
14:15 < flexd> That seems like a silly thing to do, shouldn't it be possible by default? It would make sense :/
14:15 < RLa> or wrap it
14:16 < RLa> function query() { console.log(arguments[0]); mysql.query.apply(mysql, arguments); }
14:17 < RLa> something like that
14:17 < RLa> wrapping is way better than monkeypatching
14:17 < flexd> I agree
14:17 < RLa> tho sometimes you can't wrap
14:18 < flexd> It's just odd that there is not just a single line of if (options.log) console.log(query); inside it :p
14:18 < AAA_awright> That's monkeypatching...
14:18 < AAA_awright> That's what I was talking about
14:18 < RLa> i see monkeypatching as modifying the original code
14:18 < AAA_awright> That is modifying the code
14:18 < AAA_awright> That's the only way you can do it at least
14:18 < RLa> it's not, it adds another function :)
14:19 < AAA_awright> It changes the function being called, to one that among other things, calls the original
14:19 < AAA_awright> (it doesn't have to call the original)
14:27 < flexd> Well, did that, works.
14:27 < flexd> Feels silly.
14:27 < flexd> :)
14:34 < joaojeronimo> Has anyone tried to use dnode (with shoe and sockjs) in an Angular project, instead of the traditional $resource ?
14:41 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:44 < Youdaman> any Aussies on?
14:47 < gildean> Youdaman: what kind of question is that?
14:47 < gildean> Youdaman: we all live on the internet
14:51 < Youdaman> gildean: i'm interested to know whether there are any other people upside down and in the future :)
14:52 < gildean> well, i know at least one that's here, but i'm not sure if it's proper to give that info in behalf of him
14:54 < Kottizen> Hi everyone. I'm trying to compile Node.js 0.8.15 under FreeBSD 9.0. Unfortunately it fails. What should I do? http://paste.ubuntu.com/1407898
14:54 < Youdaman> gildean: kindly suggest to this secret Aussie that he might like to join #polyhack because apparently that's where Aussies hang ouot
15:01 < Geekymole> morning all
15:03 < Geekymole> Hoping I can pick someones or the collectives brain.  We are planning a re-write of our internal business app which is currently solely developed in C# with a MSSQL backend.  Node is very intriguing to us due to the sheer amount of I/O our system performs.
15:04 < Denis__> Hi, guys!
15:04 < Geekymole> Right now, still in early planning and feasibility stages, I am trying to get a grasp on large scale app infrastructure utilizing Node
15:04 < Geekymole> err architecture rather than infrastructure, sorry
15:04 < Denis__> i'm kinda new, and have quick question. doesn't to create a forum post or smth else, so 'm asking here.
15:05 < Denis__> why such a code :setTimeout(function(){ console.log(1); }, 3000) ; setTimeout(function(){ throw""; }, 3000);  setTimeout(function(){ console.log(1); }, 3000);
15:05 < Denis__> runs in a chrome ok, but in node it put server down?
15:06 < Geekymole> I have seen multiple blog posts, stackoverflow questions, etc that provide conflicting information.  Some suggest build tiny modules that do "your thing" very well and then piece those all together to form the app.  Others suggest that a large single entity code base is perfect acceptable within Node
15:06 < RLa> Denis__, because node's default exception handler shuts node down
15:06 < Geekymole> I am curious as to what opinions may be here and possible architectural approaches you would suggest or have taken.
15:07 < exit2> Geekymole: from what I have gathered there really is no protocol for a large entity vs. being broken up into smaller apps
15:07 < RLa> "single entity code base" <- this needs some clarification
15:07 < exit2> Unlike other frameworks I have used in the past (Django and Rails) Node doesn't really care too much where or how you organize your stuffs
15:07 < RLa> well, if you consider a file a module, then that would be like putting whole code in single file
15:08 < RLa> some context is missing
15:08 < RLa> exit2, i think this is because commonjs modules and node's implementation of require is simple and flexible
15:08 < Youdaman> Geekymole: there seems to be a movement toward smaller moving parts that work together to solve a bigger problem, but how you write your code is up to you. The biggest paradigm shift will be callback-oriented asynchronous code I guess.
15:08 < exit2> RLa: agreed
15:10 < Geekymole> RLa: sorry, yes that is vague, sorry I am not at all fluent in the vernacular around Node as of yet.  Maybe I am thinking of modularity in the terms of Node incorrectly.
15:11 < Denis__> RLa, ok thanks, will google more on that.
15:12 < Geekymole> It seems in Node that modules are/should be isolated so there are no dependencies on one another so to rewrite a particular module it should be self contained meaning it handles all of its own I/O and doesn't hand off to something else to perform CRUD applications that is shared.
15:12 < RLa> Geekymole, maybe, there are packages (which are also called npm "modules"?) and simply files which are commonjs modules
15:13 < gildean> Geekymole: yeah, it's usually just better in the long run to make the modules more like black boxes
15:13 < gildean> so you only have to worry about what data you push in and get out
15:14 < Geekymole> would that not be in direct contrast to DRY principles for cross cutting concerns such as logging and possibly some CRUD ops?
15:14 < RLa> usual design principles apply, high cohesion and low coupling
15:14 < RLa> but not into extremes
15:15 < Youdaman> Geekymole: while many are "black boxes" that do one thing well, some modules do have many dependencies on other modules that do those particular things -- that's the converse. You are building a stack of modules with your app on top.
15:16 < gildean> Geekymole: passing things between modules, like loggers etc. is simple also, so yeah as RLa said, decoupling shouldn't go to extremes
15:17 < RLa> hm, btw, what you guys use for logging?
15:17 < gildean> i've used winston if it's a web-app
15:17 < RLa> hm, i'm still using console.log
15:18 < Youdaman> RLa: i use console.log :)
15:18 < gildean> i use console.log if developing
15:18 < Youdaman> ^
15:19 < Geekymole> so, given a modular style architecture as you suggest, are there repercussions or concerns I should have on the server side of things.  Which by that I mean do I need to organize node processes/instances a different way.  You'll have to forgive me here as I haven't fully grokked how clusters and such work with Node
15:20 < Denis__> Also , if Node calls itself non-blocking, async and so on. Then why all threads hangs waiting for one of the threads doing big work or runs an endless loop? Basically I understand why it happens, and I know that in order to avoid that I should create another process which will run external *.js file. But when having a lot of such files project can become messy. Is there any plans or is something being done for nodejs to become truly
15:20 < iksik2> hello
15:20 < Geekymole> Also, it is worth asking, do you guys even suggest node for large scale mission critical apps yet or is node still too much in its infancy to even consider it?
15:20 < gildean> Denis__: only one thread
15:21 < iksik2> is there any ready to use http client library which supports: post, ssl, follow redirect and cookies out of the box?
15:21 < Youdaman> Geekymole: go large!
15:22 < Denis__> gildean, so setTimeout\setInterval runs in same thread as nodejs itself?
15:22 < AAA_awright> Node.js doesn't use threads as such, it's misleading to say single-threaded
15:22 < AAA_awright> It's an event loop
15:22 < gildean> iksik2: request or superagent
15:22 < AAA_awright> dscape: setTimeout doesn't "run", it just schedules an event to be called at a certain time in the future
15:23 < Denis__> Ok, got it. 
15:23 < iksik2> gildean: thank You ;-)
15:24 < AAA_awright> bah
15:24 < AAA_awright> what is with me and tab completion this week
15:24 < exit2> I'm attempting to learn socket.io - would this be the correct way to do with express? Line 10, 11 and line 37 http://dpaste.com/840706/
15:25 < iksik2> exit2: http://socket.io - You can find working examples here... for express 2 and 3
15:25 < exit2> iksik2: that's what I was basing it off of primarly 
15:26 < gildean> exit2: there's quite a few problems there
15:26 < gildean> exit2: first you pass "app" to the http-server, but only declare "app" afterwards
15:28 < gildean> exit2: did you look at any of the blogs with more verbose tutorials?
15:28 < exit2> gildean: been trying to find them
15:31 < gildean> exit2: if you just google node.js socket.io chat or something in those lines, you should get a bunch of answers
15:32 < dscape> AAA_awright: did you get the wrong guy?
15:32 < dscape> probably meant Denis__ 
15:32 < href> irc.log("hello");
15:49 < boopathi> error: ‘SetPrototypeMethod’ was not declared in this scope, while compiling my c++ module for node.js on c9.io .. On my system and other systems it compiles successfully 
15:49 < boopathi> Why is the function 
15:50 < boopathi> Why is the function SetPrototypeMethod not available on c9.io ?
15:55 < bnoordhuis> boopathi: probably because c9 uses node 0.6 and SetPrototypeMethod was added in 0.8
15:56 < bnoordhuis> boopathi: where/when are you getting that error?
16:03 -!- mode/#node.js [+o piscisaureus_] by ChanServ
16:04 < niggler> is there any difference between console.warn and console.error?
16:06 < boopathi> when compiling my c++ module with node-gyp
16:06 < gildean> mscdex: your script is late
16:06 < boopathi> bnoordhuis: when compiling my c++ module with node-gyp
16:07 < boopathi> but i have specified in my package.json "engine" : "0.8.x"
16:07 < bnoordhuis> boopathi: use NODE_SET_METHOD instead of SetPrototypeMethod
16:07 < boopathi> bnoordhuis: 
16:07 < boopathi> bnoordhuis: can I set to the prototype chain, if I do that ?
16:07 < bnoordhuis> boopathi: yes, that's what NODE_SET_METHOD does
16:09 < boopathi> bnoordhuis: ok .. thanks .. 
16:10 < kevwil> does the tls module support UDP (DTLS) as well as TCP?
16:10 < kevwil> guessing the answer is 'no', but just checking
16:13 < bnoordhuis> kevwil: no
16:14 < kevwil> bnoordhuis: thanks
16:16 < MI6> joyent/libuv: piscisaureus created branch reviewme - http://git.io/Q-DWrQ
16:18 < mscdex> gildean: huh?
16:21 < gildean> mscdex: just joking, just that you've declared that nodejs rules around the same time on more than one day
16:21 < mscdex> gildean: purely coincidence
16:22 < gildean> mscdex: but now you're writing a script of it, eh?
16:32 < MI6> joyent/node: Fedor Indutny v0.8 * 276245d : crypto: fix leak in GetPeerCertificate - http://git.io/vnzM3g
16:33 < zonetti> suggestions on building a rss reader? (couldn't find a good module to do so)
16:33 < TehShrike1> zonetti: all you really need is an XML parser, I'd imagine
16:34 < AAA_awright> Except there's 3-4 different formats called "rss" or "atom"
16:34 < AAA_awright> Entirely incompatible with each other :-\
16:34 < TehShrike1> Good point.  Yeah, I don't know of something that parses the different variations and returns a standard object.
16:35 < zonetti> AAA_awright, I wasn't considering this --'
16:35 < TehShrike1> I'll bet a lot of feeds don't even properly identify the variation they use, either
16:36 < AAA_awright> It should be detectable
16:36 < marcosnils> Hi, does anyone know how to get the amount of bytes of either a String or a Buffer without asking the type of the variable?
16:36 < MI6> joyent/node: Fedor Indutny master * 51d5655 : crypto: fix leak in GetPeerCertificate - http://git.io/vv84ug
16:36 < CoverSlide> marcosnils: .length ?
16:36 < TehShrike1> Isn't that number of characters for a string, though?
16:37 < AAA_awright> The first one used RDF-XML which is such a horrible combination of otherwise good formats
16:37 < marcosnils> CoverSlide, for String length return the amount of characters, not the bytesize
16:37 < AAA_awright> syndication feeds really ought to be using RDF
16:37 < marcosnils> for instance "ñ".length returns 1
16:38 < CoverSlide> new Buffer(whatever).length ?
16:40 < marcosnils> It's quite expensive to make new Buffer(whatever) every time I want to check for the bytelength
16:41 < marcosnils> is there any efficient way of doing it?
16:41 < TehShrike1> marcosnils: not without paying attention to the type, I imagine
16:41 < marcosnils> k, I guess i'll have to ask for the type before doing it then
16:41 < marcosnils> thx
16:41 < CoverSlide> if statements are probably less expensive than doing that for everything
16:47 < voodootikigod> Nuno
16:47 < voodootikigod> you here?
16:51 < dscape> voodootikigod: hello
16:51 < dscape> :d
16:54 -!- mode/#node.js [+o piscisaureus__] by ChanServ
17:31 < yawnt> hey
17:31 < misterhat> hi
17:31 < yawnt> anyone wants help with a random library?
17:31 < yawnt> : D
17:45 < maffioso> Is it possible to instruct node js where to start writing to a file.I am using fs.writeFile() and i have no idea if that's possible.
17:47 < CoverSlide> maffioso: if you want precision file writing, your best bet is to open a fd using fs.open() and use then fs.write() using the position argument
17:47 < CoverSlide> http://nodejs.org/docs/latest/api/fs.html#fs_fs_open_path_flags_mode_callback AND http://nodejs.org/docs/latest/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback
17:48 < maffioso> what does position mean in fs.write(fd, buffer, offset, length, position, [callback])
17:48 < niggler> is there a tutorial for publishing npm modules?
17:48 < drudge> maffioso: position refers to the offset from the beginning of the file where this data should be written. If position is null, the data will be written at the current position. See pwrite(2).
17:49 < Leo__> Hello, guys when using a proxy. Who resolves the dns? My server or the dns?
17:49 < bnoordhuis> maffioso: fs.createWriteStream(filename, { start: 42 })
17:49 < Leo__> i mean my server or the proxy's server
17:49 < CoverSlide> niggler: http://howtonode.org/how-to-module
17:50 < maffioso> bnoordhuis:I have to what start: 42.Is it line 42
17:50 < niggler> this looks dated CoverSlide
17:51 < CoverSlide> hmm 
17:51 < CoverSlide> well some of it still rings true. main thing you have to do is write the package.json: https://npmjs.org/doc/json.html and npm publish
17:52 < CoverSlide> npm usually walks you through the rest if there's any problems
17:53 < maffioso> thanks guys.
17:54 -!- isaacs changed the topic of #Node.js to: Node.js - JavaScript the Machines - http://nodejs.org
17:55 <@isaacs> CoverSlide, niggler: Yeah, a bit dated, i guess
17:55 < niggler> http://package.json.nodejitsu.com/
17:55 < simong> Is there a good node module out there that can crop images? Preferrably without dependencies like imagemagick or cairo ?
17:59 < niggler> do i need to put a shebang in bins ?
17:59 < FunnyLookinHat> simong, I doubt you'll find something that can do it without imagemagick...
17:59 < CoverSlide> niggler: i always do
17:59 < FunnyLookinHat> It'd be like rewriting the wheel... etc.  :-P
17:59 < simong> That's what I thought, just verifying :(
17:59 < CoverSlide> although how does it get packaged for windows
17:59 < FunnyLookinHat> yeah
17:59 < FunnyLookinHat> simong, Any reason you don't want to use imagemagick ?
18:00 < simong> It adds an extra install burden for new devs
18:00 < niggler> im asking CoverSlide for a script that i put in "bin"
18:00 < FunnyLookinHat> simong, Ah... fwiw - this looks really solid: https://github.com/rsms/node-imagemagick
18:00 < FunnyLookinHat> npm available, of course.
18:00 < simong> Yea, that's the one I was gonna use :)
18:00 < FunnyLookinHat> right on
18:01 < CoverSlide> im asking isaacs about how bin executables get packaged for windows and about the shebang-a-bang
18:02 < niggler> oh isaacs i dont see any mention of license in https://npmjs.org/doc/json.html
18:02 < CoverSlide> I think some people have written js libraries to handle images natively, but usually that's just to get pixel data
18:02 < simong> Yea, I don't want to muck around with all the various formats myself, I think imagemagick is the way to go
18:03 < CoverSlide> there's a whole other can of worms when it comes to stuff like actually modifying those pixels
18:03 < CoverSlide> and whether you want that stuff to be handled on the interpreter level
18:05 < MI6> joyent/node: isaacs streams2 * 65dbf9e : doc: Crypto streaming interface (+47 more commits) - http://git.io/_eJZRA
18:11 < MI6> joyent/node: isaacs streams2 * 7b3f34f : fs: Default to higher water marks for fs streams - http://git.io/2NNtOQ
18:27 < niggler> how can i test an npm module before publishing?
18:28 < heathjs> ideas why this insall failed? https://gist.github.com/c7086db66890a5b20621
18:28 < tnorris> niggler: can't you `npm install <dir_to_module>`
18:29  * heathjs isn't sure how "npm install" will install nwm correctly on this machine...
18:29 < heathjs> there has to be more to it
18:29 < heathjs> like editing
18:29 < heathjs>  /usr/share/xsessions/
18:29 < niggler> testing npm install . -g works
18:30 < heathjs> but i'm not seeing a bin to point to for my custom xsession script
18:32 < __underscore> niggler: have you seen "npm link"?
18:32 < niggler> it works when i link to the directory
18:32 < niggler> is there any other case i need to test?
18:39 < acidjazz> so lets say i have a user object from my session i want to pass to all rendered jade files.. do i need to add something for each route res.render()?
18:41 < gildean> acidjazz: no, use res.locals for things that you want to persist only the one req-res-chain, app.locals for things you want to persist throughout the app
18:41 < acidjazz> also.. lets say about 10 routes needed to check the existnace of req.session.user.. otherwise redirect them..
18:42 < acidjazz> i see thanks gildean .. so i append app.locals.user ?? and where can i put something liek this?
18:42 < gildean> acidjazz: these are mainly express questions, you should join #express
18:42 < acidjazz> i asked in there. its dead
18:43 < gildean> acidjazz: for example if you need something from the session to appear in the template, use res.locals before calling res.render
18:43 < gildean> then for example res.locals.user will be #{user} in the template
18:43 < acidjazz> i can also res.redner('tempalte', {user: req.session.user});
18:44 < acidjazz> render*
18:44 < gildean> yes, but then you'd need to call that each time you need to render a template that uses it
18:44 < gildean> instead of just creating a middleware-function that does it
18:45 < gildean> which you can put in the routes
18:45 < gildean> also, checking users login-status is also easiest to do in a middleware
18:45 < acidjazz> oh i see gildean .. cool exactly what i want
18:45 < acidjazz> so how/where would htis middleware-function look?
18:46 < gildean> how?
18:47 < acidjazz> where should it be and how would it look sorry
18:48 < gildean> it's just a function like: var loadUser = function (req, res, next) { if (req.session.user) { res.locals.user = req.session.user;} else { res.locals.user = null; } next(); };
18:49 < gildean> then in for example: app.get('/someurl', loadUser, finalroute;);
18:50 < gildean> where finalroute would be the function at the end of the chain calling res.render or whatever
18:50 < acidjazz> gildean: and where would i cal that function?
18:50 < gildean> what function?
18:50 < gildean> the app.get?
18:51 < acidjazz> no loadUser
18:52 < acidjazz> i guess id need to call that in each route eh
18:52 < gildean> unless you want it to be called on all reqs, then you can use either app.use or app.all
18:53 < gildean> like app.all(loadUser); would use the middleware on all reqa
18:53 < gildean> *reqs
18:54 < niggler> is npmjs.org sluggish for everyone or is it just my connection
18:54 < acidjazz> ooo app.all
18:54 < acidjazz> awesome
18:55 < acidjazz> whats app.use
18:56 < acidjazz> let me be more specific .. lets say i have var checkUser = function(req, res, next) { if (!req.session.user()) { req.redirect('/'); } else { next(); } };
18:56 < acidjazz> where would i specify checkUser.. and where should this function live?
19:00 < niggler> did i break npmjs.org? :(
19:00 < gildean> acidjazz: i'd personally put that function in a module, and add it to exports.
19:00 < gildean> acidjazz: and then require the module in the main app
19:01 < CoverSlide> niggler: most likely yes
19:01 < rump> niggler: it's working here but crazy latency between responses
19:01 < CoverSlide> is it an iriscouch thing?
19:02 < CoverSlide> maybe they're lagging?
19:02 < rump> 5s latency
19:02 < gildean> CoverSlide: seems to be more than just npmjs, many services running on joyent seem to be lagging
19:02 < CoverSlide> hmmm
19:02 < alperkanat> hey everyone.. i installed deployd globally with npm, however i can't require('deployd').. any ideas? what am i doing wrong?
19:03 < niggler> alperkanat npm ls -g
19:04 < gildean> CoverSlide: https://help.joyent.com/entries/22556848-packet-loss-latency-in-east-1-datacenter
19:05 < CoverSlide> alperkanat: https://npmjs.org/doc/faq.html#I-installed-something-globally-but-I-can-t-require-it
19:05 < alperkanat> niggler: yes it outputs deployd
19:05 < acidjazz> gildean: interesting
19:06 < alperkanat> CoverSlide: thanks
19:06 < CoverSlide> ok do we have a bot here? that's like the 2nd most common question here
19:07 < CoverSlide> !commands
19:07 < CoverSlide> !help
19:07 < niggler> lol purr was neutered
19:07 < gildean> acidjazz: here's a fairly simple express 3 app i'm writing (not completely done yet), it has one possible use, but it's not the best implementation: https://github.com/gildean/Hachi
19:07 < gildean> acidjazz: server.js being the main app file
19:08 < gildean> i should finish that some day
19:08 < acidjazz> thanks
19:08 < acidjazz> hmm.. app.user i made isnt being executed
19:08 < acidjazz> app.use*
19:08 < acidjazz> does app.use get called upon each app.get? or only in hte begining?
19:09 < acidjazz> app.use(function(req, res, next) { console.log('%s %s', req.method, req.url); });
19:11 < Zariel> What is the best way to serialize an object between node.js (through redis) instances?
19:11 < FunnyLookinHat> JSON ?
19:11 < niggler> zariel json.stringify
19:11 < niggler> Zariel JSON.stringify *
19:11 < FunnyLookinHat> :)
19:11 < Zariel> niggler: the data is raw pixels and runs out of space :)
19:11 < niggler> anyone familiar with github here?
19:12 < Zariel> FunnyLookinHat: no support for buffers
19:12 < FunnyLookinHat> niggler, yeah I am
19:12 < niggler> so i see some people have github pages
19:12 < FunnyLookinHat> Zariel, raw pixels...  like - image data ?
19:12 < niggler> how do those work
19:12 < FunnyLookinHat> Zariel, Why not base64 encode it first ? 
19:13 < tnorris> niggler: http://pages.github.com/
19:13 < Zariel> FunnyLookinHat: i pretty much want to parse a file, store it in redis so I dont need to reparse it everytime its requested
19:13 < FunnyLookinHat> Or better: https://help.github.com/categories/20/articles
19:14 < FunnyLookinHat> Zariel, How big is the file ? what type? etc. ?
19:14 < CoverSlide> Zariel: you might want to look at msgPack, too
19:14 < Zariel> CoverSlide: im using msgpack buts its chewing up the buffers, i have a fair ammount of buffers
19:15 < CoverSlide> i see
19:15 < Zariel> FunnyLookinHat: dicom, varies
19:15 < FunnyLookinHat> Ah.
19:15 < FunnyLookinHat> So - BIG files.
19:15 < FunnyLookinHat> Hmm..
19:16 < FunnyLookinHat> Well - if it's too big to read into memory - I don't think there's a way to get it into REDIS easily
19:16 < FunnyLookinHat> Zariel, the only thing I could think of would be to create a "list" for a key for that file
19:17 < FunnyLookinHat> And then read the file in buffers of like...  1024 Bytes... and push them to the list
19:17 < acidjazz> no one know why my app.use isnt running?
19:17 < FunnyLookinHat> Zariel, Then you'd have to obviously re-piece the data together, but it's the only way I can thnk to do it unfortunately
19:18 < jhsto> a quick question guys, i have a value in object which has - mark in it and i have no idea how to read that data
19:18 < jhsto> its in headers object, and it seems to be surrounded by ' tags
19:19 < jhsto> { host: 'localhost', connection: 'Keep-Alive', 'accept-encoding': 'gzip'
19:20 < jhsto> how i read the value from accept-encoding?
19:20 < gildean> object['accept-encoding'] ?
19:20 < Fike_> jhsto: obj["accept-encoding"]
19:20 < Fike_> ^^
19:21 < jhsto> Fike_, thanks man
19:21 < Fike_> gildean beat me to it :P
19:21 < jhsto> And for gildean too
19:21 < gildean> np
19:21 < Fike_> Anyway, for some reason I'm not receiving the data I should be from the socket… rather, I have a console.log set up for new data and I'm not getting everything
19:21 < Fike_> someone told me to flush the socket
19:21 < Fike_> I don't know how to do this.
19:22 < Fike_> Could someone give me a hand?
19:22 < Fike_> :P
19:22 < niggler> wow im full of fail today -- how do i clobber github's commit history
19:24 < superjoe> don't do it
19:24 < superjoe> that's the rule of thumb
19:24 < superjoe> if you have to ask how to do it, you probably shouldn't do it
19:25 < gildean> niggler: just like you squash commits normally on git
19:25 < niggler> i thought gildean it would be as simple as git reset and then push -f
19:26 < niggler> but that didnt seem to work
19:26 < niggler> im tempted to nuke and restart the repo
19:27 < Fike_> superjoe: lol
19:27 < gildean> you can do it like normal, with rebase
19:28 < tnorris> niggler: if anyone at all is sharing/using your repo, and you change the commit history, they are fubar.
19:28 < gildean> niggler: check the interactive mode of git rebase
19:28 < tnorris> niggler: if you're fine with that, then it's not too hard.
19:28 < MI6> joyent/libuv: Bert Belder reviewme * 8e49be6 : windows: improve / fix uv_interface_addresses  * If GetAdaptersAddresses( - http://git.io/7JH3Kw
19:28 < superjoe> I wonder when node.js v10 is coming out
19:29 < niggler> having fast forward issues -- now that I know github disabled it ill avoid it in the future
19:29 < niggler> for now tnorris clobbering is fine -- i created it a few minutes ago anyway
19:29 < niggler> gildean if remote fast forwards are disabled will that still work?
19:29 < tnorris> niggler: ok, then just do `git reset --hard (commit|HEAD^)`
19:29 < tnorris> then `push -f origin master`
19:30 < niggler> ok now its back
19:31 < jrajav> superjoe: 10, eh? Probably a while ;)
19:32 < tnorris> niggler: if you've noticed w/ the node streams2 branch isaacs reabases it occasionally to master. while it changes the commit history, it's fine since everyone knows it's an experimental branch.
19:32 < tnorris> niggler: but resetting, rebasing, or whatever to master is something you usually want to avoid.
19:32 < superjoe> jrajav, it's the next stable
19:32 < niggler> for some reason tnorris i committed, pushed, then tried to amend
19:32 < niggler> with git commit --amend
19:33 < superjoe> #git
19:33 < tnorris> niggler: yeah. let's take it there. see you in #git
19:35 < tnorris> superjoe: imho, it will be at least another several months. check out all the features isaacs mentioned he'd like to work towards in http://blog.nodejs.org/2012/06/25/node-v0-8-0/
19:42 < superjoe> tnorris, sounds like streams is ready to rock and roll at least
19:42 < superjoe> looking forward to that
19:43 < tnorris> me too. i'm impressed w/ how they maintained backwards compatibility while implementing a radically new api.
19:43 < superjoe> yeah. and on top of that, the new api is killer
19:44 < superjoe> streams for everybody!
19:44 < superjoe> you get a stream
19:44 < superjoe> and you
19:44 < superjoe> and you
19:46 < ryanrolds_w> Should node-inspector reflect it's state with favicons? Like if it's a stopped, the favicon would reflect that? Think I found something to do tonight.
19:52 < Fike_> superjoe: streams?
20:23 < davidbowieslefte> Hi!  Anyone here use NVM?  Is there a way to install multiple versions of the same node version with different names?
20:25 < marcosnils> davidbowieslefte, I don't think so. Why would you want to do that?
20:26 < davidbowieslefte> so I could have different node installs with different npm packages, for instance
20:26 < gildean> davidbowieslefte: the same binary on multiple names? why not just ln -s
20:27 < davidbowieslefte> okay, I guess that idea is a bust.  thanks though :)
20:28 < gildean> davidbowieslefte: maybe if you explained your idea better, someone might have a better answer
20:28 < Fike_> gildean: could you help me out with the socket flush issue I was having earlier?
20:28 < Fike_> basically, I have a connection to an IRC server
20:29 < Fike_> but I'm not receiving all the data I should be
20:29 < Fike_> like the end of MOTD numeric
20:29 < gildean> Fike_: hmm, which irc-module are you using?
20:29 < Fike_> gildean: none
20:29 < Fike_> I'm creating my own
20:29 < Fike_> ;)
20:30 < gildean> Fike_: ok, well i looked at deoxxas irc-protocol module earlier, and it looked fine to me
20:30 < deoxxa> HELLO
20:30 < deoxxa> i'm alive
20:30 < deoxxa> i should upload my client implementation too
20:31 < gildean> deoxxa: are you sure you're alive and this is not just your private hell?
20:31 < Fike_> hey deoxxa 
20:31 < deoxxa> gildean: hell is asynchronous?!
20:31 < CoverSlide> help i'm alive my heart keeps beating like a hammer
20:31 < CoverSlide> ^ most annoying song ever
20:31 < deoxxa> hey Fike_
20:31 < gildean> deoxxa: i believe so, yes
20:32 < deoxxa> i can't find my local git repository for irc-protocol :/
20:32 < deoxxa> how did i even push it
20:32 < deoxxa> oh there we go
20:33  * Fike_ coded a pretty sweet parser
20:33 < vampi-the-frog> hi guys. How can I start a program and wait for output from it, preferably receiving a callback for each line of text (right afer LF or CRLF)
20:33 < Fike_> just need to write tests for it
20:33 < vampi-the-frog> s/a program/an external program from a node.js script/
20:34 < gildean> vampi-the-frog: the child_process module
20:34 < niggler> you want to spawn a child process
20:34 < vampi-the-frog> ty
20:34 < CoverSlide> and listen for 'data' on the stdout property of the returned child process
20:35 < gildean> on windows those 'data' events might not emit after a newline tho, they sometimes emit at strage intervals
20:36 < gildean> like you'd expect something to be a whole line at one event, but insted it's three events on one line
20:36 < gildean> so if you're planning to use it on windows, you either have to concat the lines until a newline is at the end of the line or something like that
20:37 < deoxxa> i love github so much
20:37 < vampi-the-frog> I see. That should be easy, though somehow I expected this to be implemented already
20:37 < vampi-the-frog> thanks
20:37 < CoverSlide> there are modules for reading lines from a stream
20:37 < deoxxa> vampi-the-frog: there are plenty of modules that will buffer stream data until a newline for you
20:37 < deoxxa> darn it CoverSlide
20:37 < vampi-the-frog> oh
20:37 < gildean> vampi-the-frog: i'm pretty sure there are modules for that yes
20:38 < vampi-the-frog> example?
20:38 < deoxxa> vampi-the-frog: `npm search line stream', find one that works well for you
20:38 < vampi-the-frog> ty
20:38 < deoxxa> Fike_: https://github.com/deoxxa/irc-client
20:38 < deoxxa> gildean: ^^
20:39 < deoxxa> sorry, no readme yet
20:39 < deoxxa> just did that repo up real quick
20:39 < Fike_> deoxxa: mine is 382 lines
20:39 < Fike_> so far
20:39 < Fike_> :3
20:39 < deoxxa> 128 there
20:39 < Fike_> mine's going to be pretty comprehensive
20:40 < Azra-el> hello.. can anybody direct me to an up to date guide for deploying nodejs on my own server? multi-processor, auto-restart on fail etc
20:40 < gildean> deoxxa: looks good
20:40 < Fike_> Azra-el: install node.js
20:40 < Fike_> cron job
20:40 < Fike_> lol
20:40 < gildean> deoxxa: i didn't even realize you could do: events.EventEmitter.call(this);
20:41 < Azra-el> Fike_.. thanks.. :rolleyes:
20:41 < deoxxa> gildean: yep, that runs the parent constructor thing
20:41 < tnorris> Azra-el: for install, that completely depends on your box. for auto-restart, look at forever.
20:41 < tnorris> Azra-el: for multi-process, look into using clusters.
20:41 < Fike_> hmm deoxxa interesting
20:41 < Fike_> serializer might be a good thing for me to write
20:41 < deoxxa> https://github.com/deoxxa/irc-protocol/blob/master/serialiser.js << it's already a thing :P
20:41 < Fike_> I just have a parser
20:41 < Azra-el> tnorris.... yup.... i heard about forever.. but i was looking for a definite guide if there is one i guess 
20:41 < Fike_> I know
20:41 < Fike_> deoxxa: I'm doing it for experience
20:41 < Fike_> ;p
20:42 < tnorris> Azra-el: not one that I've ever seen. Since there are no "official" apps for most of node, it depends on how you want to run your box.
20:42 < deoxxa> mine can technically produce invalid output if you feed it weird stuff
20:42 < deoxxa> but w/e
20:42 < Fike_> lol
20:42 < jcrew_> would you guys recommend i parse xml with regex?
20:43 < deoxxa> jcrew_: absolutely
20:43 < deoxxa> jcrew_: regex is actually the only known accurate method of parsing xml
20:43 < jcrew_> deoxxa: coo, i use it exclusively for doing everything
20:43 < deoxxa> good, good
20:43 < jcrew_> i didn't want xml or htmlparsing to be any different
20:44 < tnorris> Azra-el: here's one: http://clock.co.uk/tech-blogs/deploying-nodejs-apps
20:44 < niggler> sax etc make me shudder
20:44 < Fike_> jcrew_: when you need to parse something
20:44 < Fike_> don't immediately turn to rege
20:44 < Fike_> regex*
20:44 < jcrew_> Fike_: i'm kidding around :-)
20:44 < deoxxa> unless of course it's irc: https://github.com/deoxxa/irc-protocol/blob/master/parser.js#L41
20:44 < Fike_> oh, good
20:44 < Fike_> lol
20:44 < niggler> Fike_ did you write an xml parser?
20:44 < Fike_> deoxxa: 4 regexs
20:44 < Fike_> wat
20:44 < Fike_> I just have one
20:45 < Fike_> niggler: why would I reinvent the wheel?
20:45 < niggler> what did you write a parser for?
20:45 < deoxxa> wheels are fun to invent
20:45 < Fike_> well, I wrote a parser for IRC
20:46 < Fike_> deoxxa: http://d.pr/n/Ddkj
20:46 < niggler> aww i was hoping for something more exciting
20:46 < Fike_> naw
20:46 < niggler> parseInt(blah, 10)
20:47 < deoxxa> hokay, $WORK time
20:47  * deoxxa bbl
20:48 < Fike_> oh, I don't understand why some people format their json with the comma on the next line
20:48 < Fike_> it looks ugly
20:50 < tnorris> Fike_: it's for copy/paste convince. I hate it too, but it has a use.
20:51 < Fike_> I don't understand what you mean :P
20:51 < niggler> there are multiple ways to structure it
20:51 < niggler> if they allowed a trailing comma, like what javascript itself allows, then we wouldnt have a problem
20:55 < niggler> how do i update the readme on the NPM page for am odule?
20:55 < tnorris> niggler: if the package has already been published, then you'll have to update the version.
20:55 < tnorris> you can add a dash at the end for minor minor updates (e.g. 0.5.4-3)
20:56 < smith_> update the README file, update the version in package.json, and do `npm publish`
20:56 < niggler> hmm do i need to include the README somewhere in the package.json?
20:56 < smith_> nope
20:56 < smith_> npm looks for it automatically
20:56 < smith_> in the same folder
20:57 < niggler> so its a github based repo -- do i need to commit first before publishing?
20:57 < smith_> it's good to, but not technically required
20:57 < context> always commit then publish
20:57 < smith_> don't forget test!
20:58 < tnorris> niggler: also, it's generally nice to tag your repo as well.
20:58 < context> test ; commit ; ensure clean tree ; test ; publish
20:59 < niggler> how frequently is npm updated?
20:59 < context> npm itself or the site or what ?
21:00 < smith_> new version releases: https://github.com/isaacs/npm/tags
21:00 < niggler> how long does it take from "npm publish" to "website shows updates"
21:00 < smith_> as soon as NPM says `npm | ok`
21:00 < context> should be realtime
21:01 < niggler> so i think npm has the right version
21:01 < niggler> but for some reason the website still shows an older version
21:02 < niggler> https://npmjs.org/package/xlsx still says 0.0.2 even though i published 0.0.2-1, 0.0.2-2, and 0.0.3
21:04 < niggler> made even more strange by the fact that it shows up as recently updated
21:10 < acidjazz> hoe does one jade something like <span class="bold">first name</span> last name
21:11 < acidjazz> last name is outside of the span.. so its a new line and tabbed back.. but 'last' gets interpreted as html..?
21:12 < ProLoser> it looks like my node modules i installed are not accessible via the cli
21:12 < ProLoser> do i have to add a directory to my path?
21:12 < acidjazz> n/m figured it out
21:13 < acidjazz> how do i render a jae template into a variable instead of STDOUT?
21:15 < ProLoser> npm ls is empty
21:16 < smith_> ProLoser: do `npm install -g <module_name>` to access via CLI
21:17 < ProLoser> i did
21:17 < ProLoser> how do i list all modules that were installed that way?
21:17 < smith_> and it installed successfully, w/ no errors?
21:17 < ProLoser> yes
21:17 < context> npm ls -g works here
21:17 < smith_> npm ls -g
21:17 < ProLoser> okay a lot of stuff shows up
21:17 < ProLoser> so after i install if i do something like
21:17 < ProLoser> docco-husky -h
21:18 < ProLoser> it doesn't do anything
21:18 < ProLoser> says command not found
21:18 < ProLoser> do i have to add the folder to my path?
21:18 < context> zsh ?
21:18 < context> did you install it with -g or without
21:18 < ProLoser> iterm
21:18 < ProLoser> iterm2
21:18 < ProLoser> with
21:18 < ProLoser> it only shows up with -g
21:18 < jrajav> ProLoser: If you echo $PATH, does it have /usr/local/share/npm/lib in it?
21:18 < jrajav> Err, bin rather
21:18 < ProLoser>  /Users/Dean/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
21:18 < context> npm should install it into bin
21:18 < jrajav> ProLoser: Then you'll want to add that to your path
21:19 < ProLoser> when i installed npm, shouldn't it have changed my path automatically?
21:19 < jrajav>  /usr/local/share/npm/bin, that is
21:19 < jcrew_> are you trying to 'require' a module you installed with the -g flag on NPM ?
21:19 < jrajav> No
21:19 < ProLoser> what's the proper way to supplement path?
21:19 < ProLoser> export PATH=$PATH:/some/path ??
21:19 < MI6> joyent/libuv: Bert Belder reviewme * cfdc135 : windows: improve / fix uv_interface_addresses  * If GetAdaptersAddresses( - http://git.io/-Jq3QA
21:19 < jrajav> Depends; the simplest way is to add to it in your ~/.bashrc or .zshrc or .profile
21:20 < ProLoser> i have it in there
21:20 < ProLoser> but what's the line
21:20 < context> npm install -g will tell you where it installed the command
21:20 < jrajav> On OS X, you can also append it to /etc/paths
21:20 < ProLoser> did i do it correctly?
21:20 < jrajav> For instance, I have the line '/usr/local/share/npm/bin' in my /etc/paths
21:20 < jrajav> Then it will be added to any login shell you start up
21:21 < context> http://www.amazon.com/Synology-DiskStation-Network-Storage-Server/dp/B007ZBYA3K/
21:32 < alchimis_> hi guys
21:32 < alchimis_> I have a question
21:32 < niggler> you should just ask the question alchimis_ :)
21:32 < alchimis_> I am trying to use underscorejs in my nodejs app
21:33 < alchimis_> what i want to do with underscore is to extend my dust filter as this http://stackoverflow.com/questions/11037968/how-do-i-implement-custom-rendering-logic-in-dust-js/11201445#11201445
21:33 < alchimis_> what i dont understand is where shoud i _.extend(dust.filters, {zws: function(value){ your code here}}) 
21:33 < alchimis_> in my server files or in a view?
21:34 < alchimis_> here is my code https://gist.github.com/90dc59e1766a8987530b
21:35 < niggler> id think it would have to be done in the server file
21:35 < alchimis_> infact, thats why i recieve error
21:36 < alchimis_> so u think that in my template i can import underscorejs and and script that create filter, thats all?
21:36 < alchimis_> i have to say i never used underscorejs
21:37 < MI6> joyent/node: Bert Belder master * 03b00dc : os: throw when os.networkInterfaces() fails - http://git.io/Xvd7NA
21:38 < niggler> im not familiar with either, but im guessing you have to include underscorejs in the app
21:39 < alchimis_> so not in the view as  <script type="text/javascript" src="javascripts/underscore-min.js"></script> ,  but i have to do require it in my app.js (which is my server)
21:39 < niggler> yeah
21:41 < MI6> joyent/libuv: Bert Belder reviewme * 617cce7 : windows: improve / fix uv_interface_addresses  * If GetAdaptersAddresses( - http://git.io/KkUxFQ
21:41 < acidjazz> id like to add my user.js module but id like to keep it in modules/user.js not just in the root directory.. is that possible?
21:42 < alchimis_> actually i did it right now, but i dont get the result, it is what i have in app.js https://gist.github.com/abf8fe6493c5d06754ea
21:42 < alchimis_> and this is what i have in my view https://gist.github.com/f63509c6947d6b64202d
21:43 < alchimis_> but it seems it doesnt work
21:43 < alchimis_> i mean i recieve no error, but it doesnt do the filtering
21:43 < niggler> the view shouldnt have the underscore reference
21:45 < alchimis_> i think in view i dont have to write this, because in firebug console i have this error Uncaught ReferenceError: dust is not defined 
21:45 < alchimis_> but in server side i dont understand where to write
21:47 < thl0> what is a good nodejs module for image resizing, cropping etc.,?
21:47 < thl0> on the server side that is
21:51 < mscdex> anyone here use the heapdump module?
21:51 < lifeinchords> hi there
21:51 < kenperkins> does anyone have any knowledge of ways that tcp connections might compromise node's built in http connection handling behavior?
21:52 < jrajav> kenperkins: If the application sending data over the tcp connection doesn't conform to the http protocol, perhaps? :)
21:52 < lifeinchords> has anyone used Lingo before? https://github.com/visionmedia/lingo  
21:52 < kenperkins> i should have been more specific: the tcp connections are also originating from node
21:53 < lifeinchords> ive installed it via npm, and when trying to use it in my jade template, I'm getting 'en not defined' .. is there a need to require these libraries elsewhere?
21:53 < alchimis_> niggler: thanks for trying to help me, i found the solution, i had to do like this https://gist.github.com/968d99c73c113181bbb2
21:53 < jrajav> Well, it's still not clear what you mean exactly... I'm sure you know that http is a protocol over tcp
21:55 < kenperkins> of course
21:55 < kenperkins> I'll try to work out a more specific repro
22:02 < belak> Hi, I was wondering if there's an easy way to distribute a node.js program in binary form or even just a simple way of distributing the interpreter
22:08 < ben_alman> is npm broken?
22:09 < ben_alman> npm install grunt@devel is failing, and npm info grunt is showing all kinds of wacky stuff
22:09 < ben_alman> isaacs: ^^
22:09 < ben_alman> am i going insane?
22:10 < ben_alman> oh god
22:10 < ben_alman> i still had that symlink  node_modules -> gruntjs like you recommended a while back
22:10 < ben_alman> GOD
22:10 < ben_alman> nightmare
22:11 < niggler> lol ben_alman
22:11 < ben_alman> still, npm info grunt is showing me lots of stuff
22:11 < ben_alman> like "users"
22:19 < samholmes> Does anyone know how to uninstall node in cygwin?
22:20 < jrajav> How did you install it?
22:22 < samholmes> jrajav: I don't remember, because  it was a long time ago and it was version 0.4
22:22 < Ed_> socketio problems - thought here would be the best place to ask
22:23 < Ed_> is there a way to make sure that teh socketio client is fully loaded other than just watching for errors in the console
22:23 < Ed_> no error but I get 'io' not  recognised
22:23 < Ed_> seems to load the script from the server aiight
22:23 < jrajav> samholmes: Why do you need to install it?
22:23 < jrajav> *un
22:24 < Ed_> works fine on my pc but trying from tablet and I get io is not defined 
22:24 < samholmes> jrajav: I would like to use the native windows version within cygwin.
22:25 < Ed_> http://pastebin.com/NK6bEWk8
22:26 < Ed_> anyone? possibly a beginner problem. since I am a beginner
22:26 < Ed_> :)
22:28 < niggler> there needs to be a jsfiddle like thing for node
22:29 < fnguest> hi, i'm attempting to use parallel in async.js and i want to pass information to it somehow so i don't have to use "global" variables.  any ideas?
22:30 < jsilver> https://gist.github.com/5cd5a1a00ce7c8ad368a
22:30 < jsilver> any idea
22:30 < jsilver> https://gist.github.com/93f3f73db84e191b9656
22:30 < jsilver> pretty far and working
22:30 < jsilver> not very well
22:30 < Ed_> coolest fiddle i've seen
22:30 < Ed_> http://jsfiddle.net/uzMPU/
22:40 < samholmes> jrajav: understand what I mean?
22:45 < tnorris> mmalecki: you know when vowsjs.org will be back online?
22:46 < mmalecki> tnorris: I never noticed that it's down
22:46 < mmalecki> I do not control it
22:46 < tnorris> mmalecki: ah, ok. it says "down for maintenance"
22:46 < mmalecki> I see. I'll try and get that resolved
22:47 < tnorris> cool, thanks. just fyi it's been down since last thurs.
22:47 < samholmes> How do I list only the top level node_modules using npm?
22:48 < EyePulp> top level?
22:48 <@Nexxy> with awk
22:51 < samholmes> EyePulp: How do I explain what top level means? Do you know what top level directory means?
22:51 < jerrysv> mmalecki: wasn't someone supposed to get full control of that at some point? i thought indexzero had requested it a few times already :/
22:51 < EyePulp> you mean top level within your own node_modules directory?
22:51 < samholmes> It's kind of like that.
22:51 < samholmes> EyePulp: Yes
22:51 < mmalecki> jerrysv: I can push to it I think
22:51 <@Nexxy> samholmes, have you tried `ls node_modules` ?
22:51 < jerrysv> mmalecki: that's a plus at least!
22:51 < indexzero> jerrysv: Talking about vowsjs.org? I should ping cloudhead
22:51 < mmalecki> but I don't think I have admin access or anything
22:52 < jerrysv> indexzero: yup! how'd you guess?
22:52 < indexzero> b/c I noticed that last week
22:52 < EyePulp> samholmes: sorry - I thought you meant in the general npm online directory.
22:52 < indexzero> been rewriting the docsite to use blacksmith
22:52 < samholmes> Nexxy: That could work, but it doesn't give me the version information that npm does.
22:52 < jerrysv> indexzero: that would be nice :)
22:52 < jerrysv> i need to get back to vows, been so busy with everything else ...
22:52 < samholmes> EyePulp: Ah, no worries. I'm glad I was able to make sense of what I say. xP
22:53 < samholmes> npm list produces this verbose tree of all the modules installed in a specific project directory or globally with -g. I would like the nodes in the tree to be collapsed if it's possible.
22:53 < creationix> is there a way to use child_process.execFile and get stdout as a buffer instead of a string?
22:53 < garthk> Ok, back to XML parsing. For one of my streams, I'm most interested in raw speed. My lib-expat/node-expat tests hit 100% CPU at around 7.5MB/s. I'd like to do 5-10X that. Any ideas?
22:53 < creationix> I see the "encoding" option, but I can't seem to figure out what to pass in to make it a buffer
22:54 < EyePulp> samholmes: I see "npm ls" but it show sub-dependencies 
22:54  * EyePulp is too slow
22:54 < samholmes> EyePulp: I know. Read my previous messages.
22:55 < EyePulp> read mine - I'm too slow =P
22:59 < samholmes> EyePulp: "top level?" "you mean top level within your own node_modules directory?" "samholmes: sorry - I thought you meant in the general npm online directory." "I see 'npm ls' but it show sub-dependencies" "read min - I'm too slow =P"
23:00 < EyePulp> samholmes:  You missed "EyePulp is too slow" somewhere in there after you mentioned "npm list"  =P
23:00 < samholmes> oh
23:00 < samholmes> right lol
23:00 < EyePulp> Thus acknowledging my speed issues and error. =)
23:01 < garthk> Hmm. easy sax looks fast, but I don't speak Russian. https://github.com/vflash/easysax
23:03 < b4bofitos> is there a way to change the installation directory on the windows installer?
23:03 < samholmes> Damn. I wish npm's help was better.
23:04 < garthk> Heh. I could, perhaps, cheat. The XML I have to process by the gigabyte is simple and repetitive. I could write a parsing expression grammar using the XML tags as nouns. :)
23:04 < niggler> garthk just regex it
23:05 < samholmes> Good idea or bad idea: A node.js powered shell/terminal application using web tech?
23:05 < niggler> thats too abstract samholmes
23:05 < niggler> generalized abstract bean factory
23:06 < samholmes> niggler: Let me narrow it down. It'll be a web application that you load into Chrome (or other capable web browser) the application would use a node.js process to gain lower level access to your computer. It'll interpret commands for you and allow you to run processes and shizz.
23:07 -!- mbalho changed the topic of #Node.js to: Node.js - hey java smiths try the java scripts - http://nodejs.org p.s. jerks get kickbanned
23:07 < samholmes> It'll allow you to run node.js scripts, much like a typical terminal would.
23:07 <@mbalho> samholmes: what is the problem you are trying to solve
23:07 < samholmes> It'll allow you to run other things as well. It's basically a terminal. What more can I say?
23:08 < samholmes> mbalho: There's no really good bash terminal for windows and terminals generally could be better.
23:08 < samholmes> Also, I'd like most of my applications to live in the web and run on chrome OS.
23:09 <@isaacs> ben_alman: what were you pointing at?
23:09 <@mbalho> samholmes: ahh good point, didnt think about windows
23:09 < garthk> niggler: yeah, I could perhaps do that. Each self-contained file is ~50MB. It doesn't feel as aesthetically pure as a proper parser, but if I get the speed, I can refactor for purity later if I feel the urge. 
23:09 < samholmes> It'll be a little development platform for node.js developers to use.
23:09 < JohnnyL> where is the site for node.js consulting gigs? and does anyone here need a remoet consultant at $15 an hour?
23:09 < samholmes> It'll be very webby therefore work well with most operating systems.
23:09 < samholmes> *hopefully
23:10 < samholmes> Also, I'd like to implement some usuability features that terminals don't really have today (I don't see). Things like copy and paste and tabbing usability is a must (I want most things to be handled by the keyboard too)
23:11 < samholmes> That's front end talk though. But my main intention is to see more node.js applications built for the terminal.
23:12 < samholmes> *Carve a niche in the terminal scripting landscape.
23:13 < samholmes> Forever is an example of a terminal application, but what if you gave terminal appliations a little more UI to play with if it's presented to them.
23:13 < niggler> command line utilities dont just happen
23:14 < JohnnyL> hello , is this thing on?
23:14 < niggler> use case is needed first
23:14 < samholmes> screen is a application that I'd like to have on windows, but I can't figure out how to install it on my weird git/mingw/cygwin/bash setup that is scattered on my computer... Also, screen is not so intuitive when it comes to it's commands IMO and something like screen could be built that's better.
23:15 < samholmes> niggler: Neither does flatuence. What's your point?
23:16 < samholmes> Well, one could argue that flatuence does just happen, but one could also make the inverse argument. I've lost my point.. x__x
23:17 < niggler> security is a massive concern
23:18 < JohnnyL> With a name like niggler, i'd be concerned about security too.
23:18 < tnorris> freakin hydrogen. just having a `.apply()` call in my function, even though it's unreachable, still causes a loss of 30% performance...
23:18  * niggler niggles
23:20 < substack> > 'tacocat'.reverse()
23:20 < JohnMcLear> Spent all day with node/js.  Wish I could decide between function foo(){} vs var foo = function(){} and wether to export whilst declaring or at the end.  #firstWorldProblems.js
23:20 <@Nexxy> var foo = function foo() {}
23:20 <@mbalho> JohnMcLear: for seemingly equivalent choices such as those i defer to this https://github.com/felixge/node-style-guide
23:21 <@mbalho> how does that js eval bot in here work
23:21 < niggler> the latter seems wasteful
23:21 <@mbalho> => 'tacocat'.reverse()
23:21 <@mbalho> wat is robo syntax
23:21 < niggler> >> 'taocat'.reverse()
23:21 < purr> niggler: TypeError: Object taocat has no method 'reverse'
23:21 <@mbalho> ahha
23:21 < niggler> >> "taocat"
23:21 < purr> niggler: (string) 'taocat'
23:21 < substack> 'tacocat'.split('').reverse().join('')
23:21 < niggler> >> "taocat".split('').reverse().join('')
23:21 < purr> niggler: (string) 'tacoat'
23:22 < substack> >> 'tacocat'.split('').reverse().join('')
23:22 < purr> substack: (string) 'tacocat'
23:22 <@mbalho> OMG TACOCAT BACKWARDS IS TACOCAT
23:22 < JohnMcLear> ah felixge a true gentleman amongst swamprats
23:22 <@Nexxy> this. changes. everything.
23:23 < misterhat> no
23:23 < misterhat> impossible
23:23 < misterhat> 'tacocat'.reverse()
23:24 < misterhat> >>> 'tacocat'.reverse()
23:24 < purr> misterhat: TypeError: Object tacocat has no method 'reverse'
23:24 < misterhat> o
23:24 < misterhat> ok then
23:24 < misterhat> can only reverse arrays
23:25 < ako> >>> 'tacocat'.split('').reverse().join('')
23:25 < purr> ako: (string) 'tacocat'
23:25 < ako> >>> 'foobar'.split('').reverse().join('')
23:25 < purr> ako: (string) 'raboof'
23:26 < mmalecki> >>> String.prototype.reverse = function () { return this.split('').reverse().join(''); };
23:26 < purr> mmalecki: function () { return this.split('').reverse().join(''); }
23:26 < kenperkins> wi hate that new npm doesnt have link to github page
23:27 < mmalecki> >>> 'tacocat'.reverse()
23:27 < purr> mmalecki: TypeError: Object tacocat has no method 'reverse'
23:27 < kenperkins> -w
23:27 < mmalecki> too bad
23:27 < ako> would be horrible if you could do that :P
23:27 < kenperkins> or rather, that the repository link (.git) maps to the page
23:28 < tnorris> >> 'tacocat'.split('').reverse().join('')
23:28 < purr> tnorris: (string) 'tacocat'
23:28 < ako> oh...
23:28 < ako> >> 'foobar'.split().reverse().join()
23:28 < purr> ako: (string) 'foobar'
23:28 < ako> :<
23:29 < ako> >> 'foobar'.split('').reverse().join()
23:29 < purr> ako: (string) 'r,a,b,o,o,f'
23:29 < ako> mh :f
23:29 < tnorris> >> 'foobar'.split('').reverse().join('')
23:29 < purr> tnorris: (string) 'raboof'
23:29 < ako> so much for defaults
23:37 < niggler> ako what did yu expect?
23:37 < niggler> !mdn split @ ako
23:37 < niggler> mdn says "If separator is omitted, the array returned contains one element consisting of the entire string."
23:41 < jsilver> i am trying to store global variable for chat in node. this is wrong. i need to use redis. is redis best solution for fast shared memory to nodes?
23:43 < mscdex> jsilver: from what i've seen it's at least a popular solution
23:43 < jsilver> coo
23:43 < mscdex> or maybe memcached?
23:43 < mscdex> i've never used any of those though
23:44 < niggler> jsilver what are you storing
23:44 < jsilver> chat buffer arrays
23:44 < jsilver> e.g. [[handle, msg]...
23:44 < garthk> niggler: Using regexps for this particular XML format is as fast as it is ugly. Good call.
23:45  * niggler wonders if garthk is being sarcastic
23:46 < ako> <niggler> mdn says "If separator is omitted, the array returned contains one element consisting of the entire string." <- yes, we already saw that happening, didn't we? :P
23:46  * garthk is not being sarcastic. He's pulling 587898 compound elements out of 82MB of data in less than a second.
23:47 < niggler> ako i assumed you were well versed with the standard
23:47 < FunnyLookinHat> jsilver, yeah - it's a good solution... but I'd make sure to use lists
23:48 < jsilver> k
23:49 < ako> i haven't memorized every little detail of the default lib
23:49 < ako> that's even more true for things i never used
23:50 < MI6> joyent/libuv: Bert Belder reviewme * 5471b9e : windows: improve / fix uv_interface_addresses  * If GetAdaptersAddresses( - http://git.io/KNhYTw
23:50 < ako> that's why i simply checked what would happen if those parameters are omitted
23:52 < niggler> hmm what would happen if i ran rm -rf /
23:53 < FunnyLookinHat> niggler, TIAS
23:53 < FunnyLookinHat> :-P
23:53 < ako> yes, not passing any parameters to split might kill us all
23:54 < niggler> that's why i simply checked what would happen if i ran that command :P
23:54 < garthk> Hmm. If memory becomes a problem, I could always grab data chunks until I find the end-tag for one of the ~500KB data blocks, then cut it out properly and emit it. That'd make a decent through-stream. 
23:59 < ravster> hello everyone
23:59 < ravster> Does the mocha testing framework have to be run only in a directory, or can I feed it the names of test files in my system?
--- Log closed Tue Dec 04 00:00:01 2012
