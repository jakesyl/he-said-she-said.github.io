--- Log opened Fri Aug 24 00:00:14 2012
00:00 < ansdev1> is that what i'm missing?
00:00 <@Nexxy> you can still share access to the data from node
00:00 < ansdev1> ... must make magic cookies
00:00 <@Nexxy> yes!
00:00 < ansdev1> afaik, node will recieve the request from the client's javascript
00:01 < ansdev1> but the client can't access his own cookie from javascript with cookie_httponly
00:01 <@Nexxy> httponly means the client only gets a session/cookie ID
00:01 < timeturner> the moment you think something is actually messed up when it was a missing ',' all along
00:01 <@Nexxy> not the actual data
00:01 < timeturner> why is it that the bugs that take the longest to find are the easiest to fix... :/
00:01 < ansdev1> so my node server will always be able to access the cookies of the same host?
00:01 < Beryllium> would you need the PHP to send the session ID in the source so that the client JS could transmit the same session ID to node? 
00:02 < ansdev1> Beryllium: i was thinking that but it sounds insecure big time
00:02 <@Nexxy> lol
00:02 < Beryllium> (Sorry, I've never used node, I'm mostly just hanging out in here because of that huge meltdown last night :) )
00:02 <@Nexxy> so much hand waving
00:02 < ansdev1> Beryllium: and lets be honest you feel cool hanging in here
00:02 < Beryllium> that too, yes
00:02 < ansdev1> ;D
00:03 <@Nexxy> we are all cool
00:03 < ansdev1> Nexxy: do you have any advice for this situation?
00:04 <@Nexxy> sorry not at this time
00:04 <@Nexxy> I'm holding my baby
00:04 < Beryllium> nice
00:04 < ansdev1> awww
00:04 <@Nexxy> so typing one handed is not feasible for explanations
00:04 < Beryllium> certainly not
00:04 < ansdev1> appreciate you typing at all
00:05 <@Nexxy> lol surely]
00:05 < Beryllium> must teach baby to type (still working on this with my 2 year old. He can tweet, but they are somewhat incoherent.)
00:05 < ansdev1> shouldn't you be blowing raspberries or something?! :P
00:05 < timeturner> haha
00:05 < timeturner> :)
00:05 <@Nexxy> he's sleepimh!
00:05 <@Nexxy> ng*
00:05 < ansdev1> yawww
00:05 < joshwnj> lol Nexxy when I became a dad I learned to use 'sticky-keys' (in osx) for 1-handed typing :)
00:06 < timeturner> this warrants a topic change to: 'don't wake up the baby :)'
00:06 <@Nexxy> Beryllium, I am!
00:06 < joshwnj> 2 years on and the habit is stuck :)
00:06 < timeturner> we need this channel to be more cutesy
00:06 <@Nexxy> i just skimp on caps and punctuation
00:07 < joshwnj> yea that works too :)
00:07 <@Nexxy> (>^-^)>
00:07 < Beryllium> when my son was an infant, I'd watch movies while he rested in my lap on a nursing pillow (or whatever those hoopy ones are called). Then I had both hands free for iPhoning.  heheh.
00:07 <@Nexxy> <(^-^<)
00:07 < maxogden>  |\_/|     
00:07 < maxogden>  (. .)
00:07 < maxogden>   =w=
00:07 < timeturner> woohoo!
00:07 < maxogden> MEOW
00:07 <@Nexxy> kirby dance!
00:07 <@Nexxy> Beryllium, boppy~!
00:07 < timeturner> nyan!
00:08 <@Nexxy> we have one in the post on the way here
00:08 < maxogden>  \    /\
00:08 < maxogden>   )  ( ')
00:08 < maxogden>  (  /  )
00:08 < maxogden>   \(__)|
00:08 < maxogden> MEOW
00:08 <@Nexxy> aww
00:08 < Beryllium> indeed! very useful
00:08 < substack> =^_^=
00:08 <@Nexxy> I like that one
00:08 < Beryllium> although weirdly, whenever I used it as a neck pillow it made my neck ache
00:09 <@Nexxy> lol
00:09 < timeturner> [> ^ v ^ ]>
00:11 < Beryllium> but anyway, as for ansdev1's question â€¦ I'd imagine that browsers tie the cookie to host & port, so you'd need some way to reference the session out-of-band of the HTTP request - not sure the ideal solution to that. And like I said, I haven't used node, so I could  be way off base.
00:11 < Beryllium> here's a stackoverflow question relating to that - http://stackoverflow.com/questions/1612177/are-http-cookies-port-specific
00:12 < ansdev1> Beryllium: it's just tied to the host
00:12 < ansdev1> i've got it working on my local machine because my nodeserver can just access the cookies straight up
00:12 < ansdev1> but moving the client away from the nodeserver.. i'm sure it'll make it impossible unless i turn off session.cookies_httponly
00:12 < ansdev1> but i really don't wanna do that :S
00:14 <@Nexxy> it's hard to say w/o moar info on your topology
00:14 <@Nexxy> it's not impossible
00:14 < ansdev1> maybe i can make the cookie depending on the client's request somehow
00:14 < Beryllium> this might help: http://stackoverflow.com/questions/5879132/sharing-data-between-php-and-node-js-via-cookie-securely
00:14 <@Nexxy> you could use something like redis
00:15 < ansdev1> i'm using memcache for my sessions
00:15 < ansdev1> it's getting node to read the cookie.. thats the only limitation
00:15 < ansdev1> so it needs the client to send the cookie.. but it can't... lol
00:16 <@Nexxy> yeah if it is on a separate host it may be a different story
00:16 < ansdev1> well node and php are on the same host so no probs there
00:16 < lohkey> i've read php sessions from memache in node before
00:16 < lohkey> from different hosts
00:16 < lohkey> it didn't matter because of i was using memcache for session storage
00:16 <@Nexxy> lohkey, to the rescue!
00:16 < ansdev1> lohkey: how did node get the correct cookie?
00:17 < ansdev1> from the client
00:17 < lohkey> ansdev1: the tricky part is routing to the correct memcache instance when you have a cluster
00:17 < lohkey> with single memcache it's dead simple
00:17 <@Nexxy> vbuckets!
00:17 < ansdev1> hmmm?
00:18 < lohkey> right, but the problem is the consistent hashing algorithms used by the node memcache modules aren't the same as the ones used by the php modules
00:18 < lohkey> so you have different consistent hashing algorithms pointing to different instances between php/node implmentations
00:18 < ansdev1> i don't need node to read the session actually
00:18 < ansdev1> i just need it to send the cookie in the header
00:18 < ansdev1> ~_~
00:18 < Dragonblade> well. That was fun >_>
00:18 < ansdev1> php is dealing with the sessions 100%
00:19 <@Nexxy> lohkey, lol
00:19 <@Nexxy> that sucks
00:19 < lohkey> yeah, indeed
00:19 < lohkey> ansdev1: so you need node to return the phpsessionid?
00:20 <@Nexxy> clearly the answer is:
00:20 <@Nexxy> ditch PHP!
00:20 < lohkey> amen
00:20 < ansdev1> i wish!
00:20 <@Nexxy> Personal Home Page...
00:20 < ansdev1> lohkey: yes pretty much, just shove it in a header it sends to php
00:21 < lohkey> seems simple then
00:21 < lohkey> :P
00:21 < ansdev1> node is just dealing with async stuff
00:21 <@Nexxy> but it's not personal, home, or a page!
00:21 < ansdev1> lohkey: it is simple! but how does node get this value if the client can't even get it
00:21 < ansdev1> session.cookie_httponly
00:21 <@Nexxy> Public Web Application
00:21 <@Nexxy> PWA
00:22 < lohkey> ansdev1: i currently don't know enough about your setup to give you a reasonable answer
00:22 <@Nexxy> ansdev1, php<->node
00:22 < Init--WithStyle-> Is there any way I can perform a query with mongolian to get a JSON object as the result?
00:22 < ansdev1> the setup is pretty simple.. php makes a session and ties it to a cookie that's stored on the client machine.. but the cookie is locked out from javascript
00:22 <@Nexxy> rather than client<->node
00:23 <@Nexxy> then when your client gives its token
00:23 < Init--WithStyle-> if anyone uses mongolian (mongoDB driver)..
00:23 <@Nexxy> node already has it from memcache
00:23 < lohkey> i don't get why client side JS wouldn't be able to access the cookie
00:23 < ansdev1> session.cookie_httponly
00:23 < ansdev1> = 1
00:23 < ansdev1> stops javascript from accessing cookies
00:24 < ansdev1> for security reasons
00:24 <@Nexxy> omg
00:24 < lohkey> oh, i see
00:24 <@Nexxy> *the* mikeal ?!
00:24 < mikeal> haha
00:25 < lohkey> ansdev1: can't you do signed requests?
00:25 < Dragonblade> So I MAY or may not be on for 2 weeks to a month ._ .
00:25 < lohkey> well, i guess that defeats the purpose of http_only
00:25 < ansdev1> >_<
00:26 <@Nexxy> back in my day we passed session IDs around as get variables
00:26 < ansdev1> :D
00:26 <@Nexxy> and we *liked* it
00:26 < ansdev1> haha
00:27 <@Nexxy> it was upstream... both ways
00:27 <@Nexxy> with no ssl
00:27 < ansdev1> painted on the side of buildings
00:27 < Init--WithStyle-> Any ideas on how to convert a mongoDB query on a node.js server into an array?
00:28 <@Nexxy> Init--WithStyle-, a collection?
00:28 < Init--WithStyle-> could you link me to a tutorial/example?
00:29 <@Nexxy> I was asking if you meant a query result set
00:29 < Init--WithStyle-> oh
00:29 < Init--WithStyle-> yes
00:29 < Init--WithStyle-> like a "findall" query on a collection
00:30 < Init--WithStyle-> I can see what I get back is some sort of string/object.. I'm very new to this tbh...
00:30 < lohkey> read the docs for that module
00:30 < lohkey> we don't even know what module you're using
00:30 < lohkey> either way though, odds are theres some .toArray() method
00:32 < Init--WithStyle-> i'm using the mongolian node.js driver..
00:32 < ansdev1> lohkey: sorry for being a dumbass but your suggestion about a token.. is that to generate a token based on the clients request and build the sessionID based on that with some sort of salt etc... then the client can just keep sending that and hopefully xss wont be able to access it???
00:32 < ericelliott> What's your favorite JavaScript blog?
00:32 < Init--WithStyle-> I see there is a cursor.toArray() function but I don't see any example on how to actually use it..
00:33 < lohkey> Init--WithStyle-: yeah, theres a decent amount of source diving involved with some modules
00:34 < Init--WithStyle-> perhaps someone here has used mongolian before?
00:34 <@Nexxy> sorry no
00:34 <@Nexxy> I'm vegan
00:34 < lohkey> Init--WithStyle-: theres an example in the README
00:35 < lohkey> https://github.com/marcello3d/node-mongolian/blob/master/Readme.md#examples
00:35 <@Nexxy> rtfm'd
00:36 < lohkey> yeah boi!
00:36 < Init--WithStyle-> oh it's used with dot notation ok
00:36 <@Nexxy> you were expecting reverse polish?
00:36 <@Nexxy> THIS ISN'T LISP
00:37 <@Nexxy> kind of
00:37 < lohkey> yo dog, don't hate, i love calling functions to do addition
00:37 <@Nexxy> http://joeganley.com/code/jslisp.html
00:37 < holzp> thissh ish lisp
00:40 <@Nexxy> yeah ok mr. connery
00:45 < Init--WithStyle-> default mongoDB object keys are sooo long
00:46 < lohkey> ObjectIds are persisted as binary, so what you see is inflated twice in size
00:48 < bahamas10> is there a way to easily limit the max http requests / sockets node will make?
00:49 < bahamas10> i have an array of 500 urls i want to hit and save to files locally, but i'll hit EMFILE letting them all go at once
00:49 < bahamas10> is there an easy way to limit the max concurrency? bonus: i'm using the request module
00:50 < lohkey> bahamas10: if you're ok with taking on another module you could use async.queue to limit concurrency
00:50 < CoverSlide> you can use the async module and queues, but you'd have to restructure your code a little
00:51 < lohkey> https://github.com/caolan/async
00:51 < lohkey> https://github.com/caolan/async#queue << specifically
00:51 < Init--WithStyle-> lohkey: ok it seems that toArray basically wraps things up so that each individual document because one part of the array.. however.. I still don't understand how to get the data out of this..... string??? ... that each document is being displayed as and set to variables....
00:51 < Init--WithStyle-> EG: { loc: [ 800, 800 ],   elevation: 10,   _id: { bytes: <Buffer 50 35 ad 99 ff 48 56 6c f0 00 61 dc> }
00:51 < Init--WithStyle-> is this a JSON object or something?
00:52 < lohkey> Init--WithStyle-: yes
00:52 < bahamas10> lohkey: checking it out now
00:52 < lohkey> Init--WithStyle-: loc is an array for coordinates, elevation is an int and _id:bytes is a NodeBuffer
00:52 < Init--WithStyle-> right
00:53 < Init--WithStyle-> do i need to use Json_decode or something?
00:53 < lohkey> .toArray() should return the already parsed doc iirc
00:53 < lohkey> if you're just piping the doc array directly to console.log() console.log is doing JSON.stringify for you on the fly
00:53 < Init--WithStyle-> it just cuts each document into one part of the array
00:53 < Init--WithStyle-> oh?
00:54 < Init--WithStyle-> but when i access Array[0] it outputs the entire structure
00:54 < lohkey> Init--WithStyle-: paste code somewhere
00:54 < Init--WithStyle-> worldTiles.find({ loc: [800,800]}).toArray(function (err, array) {             console.log(array);             console.log(array[0]);             console.log(array[1]);         })
00:54 < lohkey> not here -_-
00:54 < lohkey> but sure
00:55 < lohkey> console.log(array); should print the entire array as a string
00:55 < Init--WithStyle-> it's pretty short..
00:55 < Init--WithStyle-> right
00:55 < lohkey> console.log(array[0]); and console.log(array[1]);  shouldn't though
00:56 < Init--WithStyle-> array[0] gives the same output on console as array
00:56 < Init--WithStyle-> almost the same
00:57 < Init--WithStyle-> just doesn't have the array brackets [ ]
00:57 < lohkey> well that means you only returned one document :p
00:57 < lohkey> console.log(array.length); << doit
00:57 < Init--WithStyle-> yes only 1
00:57 < Init--WithStyle-> i know
00:57 < Init--WithStyle-> :)
00:57 < Init--WithStyle-> i'll try with 2
00:58 < lohkey> Init--WithStyle-: console.log(array[0].elevation); << doit
00:58 < lohkey> when you console.log it's just stringifying whatever part of the array/document you're telling it to
00:58 < lohkey> but you are indeed acessing the elements/attributes
00:59 < Init--WithStyle-> they Array[0] somehow has 3 elements on it..
00:59 < Init--WithStyle-> how do I pull out each element individually?
00:59 < lohkey> Init--WithStyle-: hate to say it, but please go learn JS first
01:00 < Init--WithStyle-> If array[0] is a string I understand but array[0][0] gives undefined and I don't think there is any dot notation to access inside..
01:00 < lohkey> Init--WithStyle-: it's not a string in the context of earlier
01:00 < Init--WithStyle-> when console.logging array[0] it is
01:00 < lohkey> in JS there is no difference between dot notation and square brackets
01:00 < Init--WithStyle-> otherwise how can i access it's inside members??
01:01 < lohkey> other then square brackets can take varialbes
01:01 < lohkey> obj.attribute === obj["attribute"]; << in js
01:01 < lohkey> as one of my old translators would say
01:01 < lohkey> they're same same
01:03 < davv3_> brackets are old school..
01:04 < davv3_> use underscores container and iterators instead
01:04 < matthewborn> Hello!
01:05  * matthewborn thinks there are quite a few people following the yellow brick node
01:06 < Init--WithStyle-> lohkey: ok i just set up a for loop to extract keys and values from the objects
01:06 < Init--WithStyle-> really screwed up in my mind...
01:06 < Init--WithStyle-> set array[i] to a obj varaible
01:06 < Init--WithStyle-> they..... for (var key in obj)
01:06 < Init--WithStyle-> but... how does it know what var key is??
01:06 < Init--WithStyle-> doesn't make any sense >.<
01:07 < Init--WithStyle-> i need to go research the for .. in ..
01:23 < thomas_> I would like to speak with someone one-on-one regarding running "stuff" in the "background".
01:25 < ang3lfir3> define stuff and "background"
01:25 < davv3_> sounds shady
01:28 < ang3lfir3> .
01:29 < zivester> anyone seen "Error: ENOENT, stat" when doing res.sendfile() ? using 0.8.8
01:33 < thomas_> ang3lfir3 davv3_  I have questions regarding exec
01:34 < davv3_> just ask
01:37 < zivester> to clarify earlier... im creating an image on the fly, and then trying to send that image
01:39 < Stu> wondering if we should be using process.domain methods to intercept callbacks in our library code?
01:39 < Stu> so code participates in current domain
01:42 < thomas_> I am interested in getting large amounts of data from web API's into a servers database. I want to do this in the background not browser facing. I've done this using AJAX and it's not pretty but it gets the job done. With AJAX i've made it possible to include loading bars for large processes be show to the user.  I am wondering how I can do this on the server using exec, does one have a folder in their app that is meant for non-web
01:43 < thomas_> ... How would one show a loading bar for an exec operation to the user? How would a exec operation get initiated by the user? I am assuming I can create a file that would utilize a module like request insert all the responses into mongoDB. But I am curious about start, stopping, and displaying the action.
01:45 < Init--WithStyle-> I have some data that looks like this: [[[1,10],[1,22],[1,86],[1,86],[1,22],[1,22]],           [[1,10], [1,22],[1,86],[1,22],[1,22],[1,86]],
01:45 < Init--WithStyle-> This is a 3 dimensional array right?
01:46 < Init--WithStyle-> or a two dimensional array of... objects?
01:46 < maxogden> objects have {}
01:46 < Init--WithStyle-> so it's a 3 dimensional array then?
01:46 < thomas_> Init--WithStyle- I would say two-dimentional array of arrays
01:46 < Init--WithStyle-> I see
01:47 < Init--WithStyle-> I'm trying to figure out how to recreate this data format from some objects I have
01:47 < Init--WithStyle-> a for loop within a for loop creating arrays?
01:47 < Init--WithStyle-> maybe?
01:51 < thomas_> davv3_ I got nothing...
01:51 < thomas_> davv3_ no responses back
01:52 < deoxxa> Init--WithStyle-: gist!
01:53 < davv3_> thomas_: im not sure i understand the question
01:53 < deoxxa> Init--WithStyle-: my initial thought is that it'd be possible with some judicious use of map()
01:54 < davv3_> by exec do you mean a child process?
01:54 < Init--WithStyle-> deoxxa: i've never used map() before.. how does it work?
01:54 < thomas_> yes
01:54 < Init--WithStyle-> I will paste the data structure hold on
01:54 < davv3_> then that program would need to output, to stdout or a file maybe the current status
01:55 < davv3_> since you dont know before hand its going to take?
01:55 < Init--WithStyle-> http://pastebin.com/TUymQVfv
01:55 < thomas_> output its current status in a timed interval?
01:55 < Init--WithStyle-> deoxxa: the location in the data structure is the actual point's x,y
01:56 < davv3_> thomas_: sure. then read that to node and there you go.
01:56 < ctult> Would WebGL be an okay platform to make a game as complex as something like Minecraft or even Amnesia?
01:56 < deoxxa> Init--WithStyle-: source data too, plox
01:56 < Init--WithStyle-> for example, [4,2],[2,3]  <-- [2,3] is at position [0][1]
01:56 < thomas_> davv3_: nothing would happen if the user closed the browser window?
01:56 < Init--WithStyle-> there is no source data :)
01:56 < Init--WithStyle-> I just need to recreate this structure
01:56 < thomas_> davv3_: the process would keep going, right?
01:56 < deoxxa> i've got no idea what you're trying to do, Init--WithStyle-
01:57 < Init--WithStyle-> no worries, i'll figure it out :D
01:57 < Init--WithStyle-> i'll come back with the solution in a bit if you are interested
01:57 < davv3_> thomas_: it depends on how you implement it, i dont see why it should.
01:58 < deoxxa> Init--WithStyle-: heh, sure. sounds crazy though!
01:58 < davv3_> ctult: i'd like to think so. amnesia has a lot of assets so it would be a hefty download compared to minecraft
01:59 < thomas_> davv3_: thanks I think I get it now, and just for clarification it is perfectly fine to run exec on a node something.js file. this is normal?
01:59 < davv3_> it is the same API smartphones use and im fairly sure minecraft could be ported easily.. 
01:59 < ctult> davv3_: But would it run at a decent framerate?
02:00 < deoxxa> ctult: google "webgl minecraft"
02:00 < deoxxa> ctult: this has been done a couple of times now, with varying levels of success
02:00 < davv3_> ctult: things run just fine with webgl on my desktop..
02:01 < davv3_> thomas_: what do you mean?
02:01 < luckysmack_> does node have a way I can get the directory separator for whatever OS im running on? like '\' for windows and '/' for linux/mac
02:02 < ctult> deoxxa: Okay thanks.  I am trying to make a survival horror game, btw.
02:02 < davv3_> ctult: it is all relative to your hardware, ofcourse its not going to run compared to a native game.
02:02 < lohkey> luckysmack_: i typically let the path module handle that for me
02:02 < luckysmack_> ok
02:02 < davv3_> ctult: try some!
02:03 < davv3_> http://hexgl.bkcore.com/
02:03 < davv3_> ctult: dont be discouraged. i like the idea :)
02:04 < thomas_> davv3_ : the idea of running a background process that does a ton of data-mongering is that the exec function will run a unix / linux command like 'node monger.js'. my question is, is it fine to run node from with node,?
02:05 < ctult> davv3: Thanks!
02:05 < ctult> One last question: would Three.JS make for a much slower game than a native WebGL one?
02:05 < davv3_> thomas_: yes as long as its not the same program or it will end up in a recursive loop
02:09 < davv3_> ctult: according to http://granular.cs.umu.se/browserphysics/?p=7 it will
02:11 < davv3_> but dont let that stop you, try it and see if its ok for your needs. premature optimization is evil
02:12 < Init--WithStyle-> I'm trying to splice into a 2d array of arrays... is this correct?  -> var test = mapArray.splice([0][0][5],0,"wonka");
02:12 < Init--WithStyle-> array[0][0][5] is where I want to splice
02:15 < davv3_> Init--WithStyle-: maybe you should try #javascript
02:15 < Init--WithStyle-> right
02:18 < ansdev1> http://pastebin.com/iNJgjPCC  can someone see anything wrong with this?
02:19 < ansdev1> i'm responding to an post request and can't get a response :(
02:19 < ansdev1> the headers are being sent back but not the content!
02:21 < ctult> Isn't it just response.head?
02:22 < ansdev1> ctult: i'll give it a shot but writeHead seems to work in other cases
02:22 < ansdev1> no it's not
02:24 < ctult> hm.
02:28 < ansdev1> if i go to the page directly.. it works
02:31 < Franz__> somebody can help with this module? https://github.com/rday/trivia/
02:35 < reconbot> I think my npm doesn't like to log in https://gist.github.com/3444898 anyone know how I could debug this?
02:40 < heroic123> hi all
02:40 < heroic123> is there a tutorial or an example
02:40 < heroic123> where i can read about how to use diffie hellman algo
02:40 < heroic123> ?
02:43 < d4rklit3> hey anyone use stylus?
02:44 < ctult> I do
02:44 < d4rklit3> looks pretty good
02:44 < d4rklit3> is there any way to block the compiler?
02:44 < d4rklit3> with stylus
02:44 < d4rklit3> i want to set up a dev build where i refresh the page it will rebuild the styl 
02:45 < ctult> um...explain please.
02:46 < rhdoenges> you mean like watch files for changes
02:46 < rhdoenges> ?
02:47 < d4rklit3> i can use fs watch?
02:47 < d4rklit3> for that
02:47 < d4rklit3> but then it will build constantly yes?
02:47 < rhdoenges> or the --watch option of the stylus executable
02:47 < d4rklit3> can i use watch for the js api?
02:47 < rhdoenges> (disclaimer: I don't actually use stylus)
02:47 < rhdoenges> well, sure
02:47 < rhdoenges> then every time you save a change it'll refresh it
02:48 < d4rklit3> yeah
02:48 < d4rklit3> i mean i can conceptualize a way to watch the bootstrap .styl file then anytime it changes i tell the builder to rebuild
02:48 < d4rklit3> i don't reall want that though
02:48 < d4rklit3> i would ratehr have the render just block
02:48 < d4rklit3> not do it async
02:49 < d4rklit3> so the process waits for it to compile before moving on
02:49  * ctult is now totally confused.
02:49 < rhdoenges> um
02:49 < rhdoenges> well then you've got a flow control problem
02:49 < d4rklit3> how so
02:50 < rhdoenges> actually, wait.
02:50 < rhdoenges> hm.
02:50 < ctult> It should take less than a second to recompile; blocking is not a major concern.
02:50 < rhdoenges> ^^
02:50 < rhdoenges> you shouldn't halt your entire webserver while something recompiles
02:51 < d4rklit3> what if it takes longer to recompile than it does to make the request?
02:51 < d4rklit3> what if i have like 20kb of css?
02:51 < d4rklit3> just hypothetically speaking
02:51 < ctult> Then, if you do it right, it should just send the old version.
02:51 < rhdoenges> then just refresh the page.
02:51 < d4rklit3> this is under watch
02:52 < d4rklit3> not on request
02:52 < d4rklit3> oo
02:52 < d4rklit3> bam
02:52 < d4rklit3> thats the solution
02:52 < rhdoenges> uh
02:52 < d4rklit3> i'll have it build on request for the file :)
02:52 < d4rklit3> this is for dev purposes
02:52 < rhdoenges> whatever works fer you
02:52 < d4rklit3> i just want to be able to hit ctrl-r on my browse while i work on this project
02:52 < d4rklit3> and have changes show up
02:52 < ctult> Do you use Socket.IO?
02:52 < d4rklit3> no
02:52 < d4rklit3> what
02:53 < d4rklit3> why
02:53 < d4rklit3> lol
02:53 < ctult> 1) You should ALWAYS use Socket.IO, and 2) You could just send the updated CSS file and have it apply it.
02:53 < ctult> the browser apply*
02:54 < d4rklit3> socket.IO is for socket connections
02:54 < d4rklit3> persistent
02:54 < d4rklit3> I hadn't considered it for build tasks
02:54 < ctult> It is awesome for everything that you use AJAX for.
02:54 < rhdoenges> it's pretty nice yeah
02:55 < d4rklit3> heh well in the end im just going take package up the final css/js and be done with it
02:55 < d4rklit3> this project only is developed on node
02:55 < d4rklit3> not deployed
02:55 < ctult> Being able to communicate pub/sub socket style makes for very easy to write code.
02:55 < d4rklit3> thats seems like a lot of work to do for now
02:55 < d4rklit3> interesting concept though
02:55 < ctult> Yeah if you are not using Node entirely, it's kinda a pain.
02:59 < d4rklit3> i swear im so spoiled by coffeescript its sad
03:01 < reconbot> d4rklit3: node is great for build processes - don't worry too much about it - use whatever tech works
03:01 < reconbot> d4rklit3: mainly because it installs on every platform and dependencies are never an issue
03:04 < d4rklit3> woot
03:04  * d4rklit3 does a dance
03:07 < timeturner> is there a way to find out all the events present on the request and response objects inputted as parameters to the callback to node's http server
03:12 < reconbot> timeturner: totally
03:12 < reconbot> timeturner: I just had to play with the repel to see the _events property 
03:12 < reconbot> its an object with keys of event names and an array filled with callbacks
03:13 < timeturner> ah I think I found it
03:13 < timeturner> emitter.listners
03:13 < timeturner> the docs say
03:13 < timeturner> let's see...
03:13 < timeturner> listeners*
03:14 < sente> I've inherited a node.js project, I start the server process with `sudo forever start app_rn.js`
03:14 < reconbot> require('http').createServer()._events
03:14 < sente> I have a second copy of the codebase in a different directory, I'd like to start another server process which listens on a different port  
03:15 < sente> I can't get them to both run at once though
03:15 < sente> even though they use different ports after I stop the first one, and then start the other one
03:16 < reconbot> sente: what's the error?
03:16 < timeturner> reconbot: ah yes
03:16 < timeturner> you are correct
03:16 < timeturner> that's something that should be in the docs imo
03:16 < reconbot> repl ftw
03:17 < tuhoojabotti> no no
03:17 < reconbot> timeturner: the coolest part is you can make your own repl in your own running code
03:17 < tuhoojabotti> reconbot: http://vimeo.com/36579366 watch this
03:18 < reconbot> tuhoojabotti: I love mr worry dream (bret victor) the repo is the original instant feedback =)
03:18 < tuhoojabotti> yes
03:18 < sente> techthumb: there isn't one
03:18 < sente> info:    Forever processing file: app_rn_stu.js
03:19 < reconbot> sente: ditch forever while you debug - it only launches and keeps launched the scripts
03:19 < sente> http://c.sente.cc/426R/config_sample.js
03:19 < reconbot> node app_rn.js
03:19 < timeturner> wait how did you find the _events property in the repl?
03:19 < sente> this is the config.js file each project has
03:19 < timeturner> that's a pretty neat find I must say
03:19 < sente> I've changed the '3001' port references 
03:19 < reconbot> timeturner: that require('http') bit I pasted earlier 
03:20 < reconbot> timeturner: require('http').createServer()
03:20 < sente> http://c.sente.cc/nG12/index
03:20 < sente> that's the error when i try 'node app_rn_stu.js'
03:20 < reconbot> it shows the returned object and all the properties on it
03:20 < timeturner> ahh
03:21 < timeturner> yeah the repl shines for that purpose "D
03:21 < timeturner> :D*
03:21 < reconbot> sente: Error: listen EADDRINUSE means the port is already in use
03:21 < reconbot> timeturner: I
03:21 < reconbot> timeturner: I'm used to docs not being.. correct - most node modules are simple enough to just look at the source and/or objects
03:22 < timeturner> yep
03:22 < timeturner> the docs actually take longer to read for me
03:23 < timeturner> wastes too much time if the module is simple anyway
03:23 <@Nexxy> source code is the best documentation!
03:23 < sente> reconbot: thanks
03:23 < sente> now i get:
03:23 < sente> http://c.sente.cc/SfVe/index
03:23 < reconbot> timeturner: even in the node core =) https://github.com/joyent/node/blob/master/lib/http.js#L1614
03:25 < sente> ooh, the server's running now
03:25 < reconbot> httpServer extends net.Server which extends events.EventEmitter https://github.com/joyent/node/blob/master/lib/net.js#L790
03:25 < sente> my previous 'forever run' was hanging on the port error
03:25 < sente> i think
03:25 < sente> and then autoconnected
03:25 < sente> is there a way with forever to check statuses?
03:25 < sente> i'm used to /etc/init.d/service [status|stop|start|reload] type stuff
03:26 < reconbot> which has the addListener which adds the event listeners we're looking for https://github.com/joyent/node/blob/master/lib/events.js#L127
03:27 < reconbot> sente: `forever list`  https://github.com/nodejitsu/forever
03:28 < reconbot> sente: running node apps with init.d works well but won't restart your app when it crashes - forever is a useful userspace replacement - personally I'd use upstart on ubuntu if I could ever get it to work
03:29 < sente> thanks for the advice
03:30 < Raynos> What's a good method name for unbuffer?
03:30 < Raynos> bufferStream.buffer()
03:30 < Raynos> bufferStream.NO_MORE_BUFFERING_NOW()
03:31 < reconbot> Raynos.resume()?
03:32 < timeturner> best monitoring utility: https://github.com/visionmedia/mon
03:32 < Raynos> resume and pause are taken as stream methods
03:32 < Raynos> drain is also taken
03:32 < reconbot> raynos.drain()?
03:32 < jonmarkgo> Anyone here familiar with node.io?
03:32 < Raynos> I was thinking empty
03:33 < reconbot> Raynos: I like it
03:34 < sente> thanks reconbot 
03:34 < reconbot> sente: no problem, glad I could help =)
03:34 < reconbot> sente: I can't get simple upstart scripts to work with ubuntu, so take my advise with a grain of salt ;-)
03:35 < sente> reconbot: your advice solved my problem
03:35 < sente> I have like 10 other problems
03:35 < sente> but this is a start
03:35 < sente> muchly appreciately
03:35 < sente> *appreciated
03:38 < reconbot> sente: when you learn how to fix the other 9 come back here one night and pass the favor on to someone else 
03:38 < mscdex> node.js rules!
03:38 < reconbot> and/or blog about it 
03:42 < astropirate> would you guys use harmony features in production? Has anyone here have a problem with them?
03:43 < mscdex> i personally wouldn't use them until they're no longer hidden behind a flag
03:44 < astropirate> mscdex, I was thinking the same... but they are so nice :D
03:44 < mscdex> meh
03:44 < astropirate> specially let. no more variable jugling
03:48 < sente> reconbot: yep. i'm always more than more than happy to pass on these knowledge favors
03:48 < sente> I dont think it'll be happening in #node.js anytime soon
03:49 < sente> but hopefully I can prove myself wrong :)
03:49 < reconbot> anyone in here have any npm account experience? I'm not able to login for some reason via the cli
03:58 < zivester> is there documentation for app.use (express)? Dunno if it's documented in express or connect or.. ?
03:58 < Raynos> What is this pattern: https://gist.github.com/3445243 
03:58 < Raynos> And is there a module for it?
03:58 < rcvrgs_> hi ppl!
04:03 < reconbot> zivester: app.use is pretty much all connect does
04:03 < reconbot> zivester: http://www.senchalabs.org/connect/
04:05 < zivester> thanks reconbot, i found the documentation here: http://www.senchalabs.org/connect/proto.html which doesn't seem to be linked from that main page
04:05 < rcvrgs_> hey 
04:06 < reconbot> zivester: I love how he puts the source in with the docs
04:06 < rcvrgs_> i'm having troubles downloading files
04:06 < rcvrgs_> from a nodejs server
04:06 < rcvrgs_> could someone help me?
04:07 < reconbot> rcvrgs_: what's happening?
04:08 < rcvrgs_> i have a proxy architecture
04:08 < rcvrgs_> hence
04:08 < rcvrgs_> i have my browser client
04:08 < rcvrgs_> in which i upload files to a server
04:09 < rcvrgs_> but i have a proxy server, that only makes the transference of this file to another server
04:09 < rcvrgs_> bhot servers are nodejs
04:09 < rcvrgs_> both*
04:09 < rcvrgs_> when it arrives to the second server, the file is saved normally
04:09 < rcvrgs_> but when i need to download it
04:09 < rcvrgs_> the file arrives corrupted to the client
04:10 < rcvrgs_> when the petition arrives to the second server, i return it using res.download(filePath)
04:10 < rcvrgs_> and the proxy server returns this data using res.send(200, data)
04:10 < zivester> yes that is very handy.. especially in this case
04:11 < rcvrgs_> i mean, res.download(filePath)
04:11 < rcvrgs_> but when it arrives to the proxy, there's data in binary, so i use a writestream to make a temp file
04:11 < rcvrgs_> and then use res.download() to this file
04:11 < rcvrgs_> and it only works for .txt files
04:12 < rcvrgs_> :(
04:12 < rcvrgs_> don't know what to do
04:13 < reconbot> my npm issues were resolved by upgrading to the latest npm! whoo
04:14 < rcvrgs_> d
04:14 < reconbot> rcvrgs_: what's res.download()? is that from a package?
04:14 < rcvrgs_> im using express
04:14 < rcvrgs_> in every route, there's a req and res objects (i mean request and response)
04:15 < rcvrgs_> hence res.download is to send a file to the client that is requesting to the server
04:16 < gildean> rcvrgs_: are you sure the temp-file is saved correctly=
04:17 < gildean> ?
04:17 < rcvrgs_> no it isn't
04:17 < rcvrgs_> only for .txt files
04:17 < rcvrgs_> there's the problem
04:17 < gildean> are you catching all the chunks into one, or how are you saving the temp-file?
04:18 < reconbot> g'night folks
04:19 < rcvrgs_> i am using restler package
04:19 < rcvrgs_> that is a simpler api to use http
04:19 < rcvrgs_> so i make a get request to my second server
04:19 < rcvrgs_> and in my success function
04:19 < rcvrgs_> i receive this function(data, response)
04:20 < rcvrgs_> where data is the binary or raw data of the file
04:20 < rcvrgs_> when i write it i use fs.createWriteStream('tmp')
04:20 < rcvrgs_> well var stream = fs.creatWriteStream('tmp')
04:21 < rcvrgs_> then stream.once('open', function(){ stream.write(data); stream.end(); })
04:21 < rcvrgs_> a sorry
04:22 < rcvrgs_> stream.once('open', function(){ stream.write(data); res.download('tmp'); stream.end(); })
04:22 < rcvrgs_> thatis it
04:22 < rcvrgs_> and this works only with .txt files
04:23 < austinbv> can I talk to anyone about pull https://github.com/joyent/node/pull/3710
04:23 < austinbv> I was wondering why it hasn't gotten much attention :(
04:38 < vvgomes> anyone using sinon for testing? I cannot put notCalled to work properly
04:39 < vvgomes> my assertion is: expect(client.requestAccess.notCalled).to.be.ok();
04:40 < vvgomes> the error message says: Error: expected undefined to be truthy
04:40 < vvgomes> anyone?
04:49 < thealphanerd> vvgomes: are you putting your stuff through jslint or jshint?
04:49 < thealphanerd> are you using == instead of ===
04:50 < vvgomes> thealphanerd: fixed the problem with expect(client.requestAccess.called).to.not.be.ok();
04:51 < thealphanerd> word
04:51 < vvgomes> thealphanerd: thanks anyway...
04:51 < thealphanerd> :D
04:51 < thealphanerd> I missed the part where you mentioned sinon
04:51 < vvgomes> it's bad though, http://sinonjs.org is outdated
04:51 < thealphanerd> what about using jQunit?
04:52 < vvgomes> they mention a 'notCalled' property for spys that is not there
04:52 < vvgomes> thealphanerd: mocha
04:52 < vvgomes> http://visionmedia.github.com/mocha/
04:52 < thealphanerd> ahh
04:52 < thealphanerd> neato
04:52 < thealphanerd> is this the one that lets you use developer tools in browser to test node stuff?'
04:53 < vvgomes> and about the jslint stuff, it doesn't apply for server side code, right?
04:53 < thealphanerd> well it could be
04:53 < vvgomes> thealphanerd: I don't really know about this developer tools
04:54 < vvgomes> but mocha is cool anyway
04:54 < vvgomes> nice built in reports
04:54 < thealphanerd> I think this might be it 
04:54 < thealphanerd> https://github.com/dannycoates/node-inspector#readme
04:55 < vvgomes> hmm, pretty interesting
04:56 < joshwnj> vvgomes: jslint is still really useful for server side
04:57 < joshwnj> it's like having a crusty old veteran watching over your shoulder as you type and saying "hmmm are you sure you want to do that?..."
04:57 < thealphanerd> joshwnj: its mostly about making sure you have sane js and that you arn't cluttering the global object right/
04:57 < thealphanerd> ?
04:58 < joshwnj> thealphanerd: yeah the philosophy of it is enforcing some standards, so that errors stand out more visibily
04:58 < thealphanerd> vvgomes: I did a bit of node 4 - 5 months ago for my thesis at art school
04:58 < thealphanerd> then did summer of code
04:59 < thealphanerd> everything client side
04:59 < thealphanerd> http://automagicmusicmaker.com/
04:59 < vvgomes> joshwnj: one thing that annoys me about jslint are the mandatory curly braces 
04:59 < thealphanerd> just getting back in to the server side stuff and trying to apply all the crazy crockfordism's I learnt along the way
04:59 < joshwnj> that said, i disable some of the more finicky checks - but i can't count number of times jslint has saved me doing something stupid
04:59 < vvgomes> even for one-line ifs/fors
04:59 < joshwnj> maybe that says something about me ;)
04:59 < mscdex> crockford!
05:00 < thealphanerd> vvgomes: you can write if statements in one line without curlies
05:00 < joshwnj> vvgomes: what's so bad about curly braces?
05:00 < thealphanerd> just have to use a different syntax
05:00 < mscdex> http://i55.tinypic.com/30s9cgh.png
05:00 < vvgomes> I don't like them
05:00 < mscdex> :-D
05:00 < vvgomes> I prefer to avoid them when possible
05:00 < gkatsev> lol
05:01 < thealphanerd> http://yuiblog.com/crockford/
05:01 < vvgomes> .. but jslint complains about it
05:01 < joshwnj> vvgomes: omitting curlies can make code look "cleaner", but it's also a place where bugs can easily hide
05:01 < thealphanerd> I actually gound these videos AMAZING
05:01 < vvgomes> joshwnj: that's why I unit test things :)
05:01 < thealphanerd> vvgomes: js is loosely typedâ€¦ you could create wonky edge cases not doing it
05:01 < joshwnj> so if you put up with the way curly braces look, there's one less place for bugs to hide
05:01 < thealphanerd> global object edge cases could also not show up until later on down the road
05:01 < thealphanerd> when you scale up
05:02 < joshwnj> vvgomes: unit testing is good too :) but it's doing a different job to a linter
05:02 < vvgomes> joshwnj: http://vvgomes.wordpress.com/2010/10/06/one-line-if/
05:03 < thealphanerd> vvgomes: there is a different syntax to use
05:03 < thealphanerd> if you want your if statement on one line
05:03 < thealphanerd> I can't remember the proper way to do it
05:03 < vvgomes> well, I think I should use more coffee 
05:03 < thealphanerd> give me one second
05:03 < thealphanerd> yeahâ€¦ if you don't want curlies, use coffee script :D
05:03 < thealphanerd> variable = (condition) ? true-value : false-value;
05:03 < vvgomes> but the "class" thing is just wrong
05:03 < DTrejo> how would you get the gray component of a color using stylus?
05:03 < joshwnj> you can do `condition && function()`
05:04 < joshwnj> if you want to get all fancy
05:05 < vvgomes> joshwnj: I like that one, but is less readable than the coffee's  postfixed if
05:05 < thealphanerd> vvgomes: for me, I try not to be fancy with my syntax.  Leave the fancy thinking to the architecture.  Do things to spec and you know you will have minimal edge cases
05:05 < thealphanerd> imho
05:06 < DTrejo> anyone know how to mix colors in stylus?
05:06 < DTrejo> hmm, addition and subtraction maybe
05:07 < joshwnj> vvgomes: i read your blog post about one-line-if and it's a nice style, but i think i'd prefer to still be able to choose between a block-if and a one-line-if-with-function-call.
05:07 < vvgomes> thealphanerd: yeah, but as long as you are covered with tests you can be as fancy as you want :)
05:07 < joshwnj> depends vvgomes, are you being fancy in your tests too? if so you'll need tests for your tests ;)
05:07 < thealphanerd> testception
05:08 < thealphanerd> I think the solution is obvious
05:08 < thealphanerd> learn scheme
05:08 < thealphanerd> write everything in scheme
05:08 < thealphanerd> and code gen both your js and your tests
05:08 < thealphanerd> using the magic of lisp
05:08 < thealphanerd> :D
05:09 < joshwnj> thealphanerd: i already use lisp to write js (ie. emacs) :)
05:09 < thealphanerd> do you have a step pedal to act as your meta key?
05:10 < joshwnj> no, but that would be pretty sweet
05:10 < thealphanerd> really easy to do :P
05:10 < joshwnj> you have one?
05:10 < thealphanerd> nope
05:10 < thealphanerd> I use text mate
05:10 < thealphanerd> I'm a freaking noob'
05:10 < thealphanerd> but I read alot
05:10 < thealphanerd> so I know about these wizard traditions
05:11 < thealphanerd> use vim when I have toâ€¦ emacs makes my head hurt :(
05:11 < thealphanerd> and seriouslyâ€¦ lambda'sâ€¦ how do they work?
05:12 < joshwnj> no idea lol
05:15 < thealphanerd> ah well
05:16 < joshwnj> anybody coding anything fun today?
05:17 < Lorentz> nope, more boring and tedious forms in a boring financial program
05:18 < joshwnj> :(
05:18 < thealphanerd> joshwnj: I've been trying to figure out how to make a node module for doing i2c for a little while
05:18 < thealphanerd> didn't get any code done today
05:18 < thealphanerd> but did a bit more research
05:19 < othiym23> I'm doing some super-fun stuff that involves monkeying with Node internals and abusing the call stack
05:19 < Lorentz> i2c is the electrical connection thing for small devices on the same board thing?
05:19 < othiym23> also hanging out in my lil buddy node-inspector and trying to figure out why my stuff Doesn't Fucking Work
05:20 < joshwnj> thealphanerd: i2c?
05:20 < thealphanerd> Lorentz: you are right
05:20 < thealphanerd> joshwnj: i2c is a protocol also know as 2 wire
05:21 < thealphanerd> for communicating between embedded devices and slave modules
05:21 < joshwnj> cool
05:21 < thealphanerd> you can have up to 128 devices running off 2 wires
05:21 < thealphanerd> these devices can themselves be complelx embedded systems
05:21 < thealphanerd> but it is a master / slave architecture
05:21 < Lorentz> neato
05:21 < thealphanerd> each device has a hard coded address
05:22 < thealphanerd> so you can scan the bus and find out which modules are connected
05:22 < thealphanerd> I'm trying to make a node app to run on the raspberry pi
05:22 < thealphanerd> which will work with custom i2c sensors (that code also being developed)
05:22 < thealphanerd> plug in any number of sensors
05:22 < thealphanerd> and press a buttons
05:22 < thealphanerd> and it starts storing the data for everything in json
05:23 < thealphanerd> and will have a restfull api to get the collected data
05:23 < thealphanerd> that will in turn be grabbed by a more powerful computer that will do data vis wiht collected info
05:23 < thealphanerd> raspi will run off battery, and use sensors such as gps, heart rate, galvanic skin resonse, etc, to keep track of an individual on a walk
05:24 < thealphanerd> but before I can do any of the fun stuffâ€¦ I need to get stuff talking
05:25 < brianc> god damn it npm is so good
05:30 < DTrejo> any ideas why id be getting this error? http://sync.in/styluserror
05:38 < DTrejo> ^ still stumped ^ has to do with unquoting :|
05:39 < joshwnj> yeh it's a tricky one
05:43 < chapel> DTrejo: make a change, try that
05:43 < DTrejo> cool, trying
05:44 < chapel> DTrejo: also https://github.com/LearnBoost/stylus/issues/124#issuecomment-1112304
05:45 < DTrejo> thanks chapel
05:45 < DTrejo> will imitate his comment
05:45 < chapel> np
05:50 < DTrejo> chapel: actually there is still a problem now :| http://sync.in/styluserror
05:51 < DTrejo> oh, i need to use s()
05:52 < chapel> notice he doesn't use ""
05:52 < chapel> don't quote the values either
05:52 < chapel> and % is a helper for s()
05:53 < DTrejo> ugh wtf
05:53 < DTrejo> that wasnt even the problem
05:53 < DTrejo> it is the .greybutton:active
05:53 < chapel> oh?
05:53 < DTrejo> it doesn't let you do that apparently
05:53 < chapel> hmm
05:53 < chapel> it should, isn't :active valid css?
05:54 < DTrejo> yes
05:54 < DTrejo> going to go read the docs on how to do it the stylus way
05:54 < DTrejo> and then we will see if that fixes it
05:55 < chapel> btw you don't need {}
05:56 < chapel> and you can do &:whatever if under/indented
05:56 < chapel> so &:active under .greybtn will output .greybtn:active
05:57 < DTrejo> so active is the issue too
05:57 < DTrejo> can't call a variable active
05:57 < DTrejo> otherwise it messes stuff up
05:57 < DTrejo> i would make an issue on stylus, but i dont have the heard to
05:57 < DTrejo> *heart
05:58 < chapel> hmm
05:58 < chapel> you can use $
05:58 < chapel> so $active
06:00 < DTrejo> ah
06:00 < DTrejo> i will do that
06:00 < joshwnj> you should file it as an issue DTrejo - otherwise some other poor bugger will go through the same trouble :)
06:04 < AAA_awright> I may or may not be doing anything fun today!
06:05 < DTrejo> just filed, thanks for encouraging joshwnj https://github.com/LearnBoost/stylus/issues/808
06:07 < DTrejo> the stylus -w option should try and recompile whenever the file changes, even if there was an error before
06:07 < DTrejo> complain complaon
06:07 < DTrejo> *complain
06:08 < joshwnj> good on ya
06:40 < angarag> hi all
06:41 < angarag> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
07:34 < [AD]Turbo> hi there
07:34 < [MAN]> hi
08:14 < standoo> any node developers here interested in programming for a nodejs platform?
08:15 < standoo> (this is just market research for my startup)
08:16 < sk8ball> sure
08:16 < standoo> mind if i PM you?
09:15 < kettlecooked> Hi there. I have Ubuntu server. Is there a way to use the binary files (the "Linux Binaries (.tar.gz)") found on nodejs.org? I've managed to download them, but I can't call the node bin file, even when typing "./node" while in the bin folder. Any hints?
09:17 < kettlecooked> oh never mind, had the wrong version (32bit vs 64bit)
09:27 < lmg> hey there everyone! good afternoon, or whatever time it is where you're at ;)
09:28 < lmg> hope you don't mind my asking a quickie. been googling and testing, but still not quite sure..
09:29 < lmg> the proper way to raise an exception is throw( new Error('my errormessage') ) right?
09:29 < zomg> throw new Error('foo')
09:29 < zomg> throw is a keyword so you don't use () with it
09:29 < lmg> I don't quite get the difference (in handling) between catch(err) and on('error')
09:30 < lmg> aah! I've been using throw like a function. thank you kindly zomg.
09:30 < zomg> A try-catch block will only work in the current call stack, eg. not with callbacks
09:30 < lmg> yeah let me rephrase the zomg, was a little fuzzy.
09:30 < zomg> The on('error' ... ) adds an error event handler, which will get called
09:31 < lmg> if some_nested_require_extending_eventhandler does throw new Error()
09:31 < lmg> will that always be handleable as an error event in the parent?
09:31 < deoxxa> hey uh, has anyone else noticed that stdin and stdout are streams
09:32 < deoxxa> like... regular old streams
09:32 < deoxxa> so you can... stream... to them
09:32 < zomg> No, if an error is thrown outside the call stack, it will end up as an error event in the main nodejs event loop
09:32 < yawnt> deoxxa: so they said
09:32 < yawnt> there's a nice example on dailyjs
09:32 < yawnt> deoxxa: http://dailyjs.com/2012/03/08/unix-node-pipes/
09:33 < deoxxa> yawnt: i've only just now realised that i can literally connect two node processes via my shell like that
09:33 < lmg> now I'm confused back to square 1.
09:33 < deoxxa> and quite frankly, it's awesome
09:33 < yawnt> deoxxa: and you are like \(:3)/
09:33 < deoxxa> yes, exactly!
09:34 < lmg> zomg: so I'll have to wrap all the errors I wanna pass on to my parent (main) class like so: catch(err) { emit('error', err); } ?
09:35 < lmg> that is pretty much what I'm not sure about. what of this is being done for me and what not.
09:35 < yawnt> deoxxa: not sure what you mean with "connect node processes via shell" though
09:36 < zomg> lmg: no
09:36 < zomg> lmg: you should probably take the approach used by other nodejs code, and not throw exceptions. Instead, if you have a function which takes a callback, you would pass the error which occurred as the first parameter to it
09:36 < zomg> This way the callback will receive the error and can handle it appropriately
09:37 < deoxxa> yawnt: thinking about things like dnode
09:37 < deoxxa> i'm thinking of all these silly ways to use rpc
09:37 < yawnt> via shell?
09:37 < deoxxa> yeah
09:37 < yawnt> uhm
09:38 < deoxxa> dnode just needs a stream, so you could give it stdin
09:38 < yawnt> and use stdin and stdout to communicate
09:38 < deoxxa> yeah
09:38 < yawnt> i see
09:38 < deoxxa> i'm not sure how useful it would be, but it'd be fun :P
09:38 < deoxxa> think like
09:38 < lmg> zomg: that nested class has e.g. some async http or sql jobs to do. some of those emit 'error' events, some others throw exceptions. I'd like to wrap it all nicely and pass 'error' events to my main app. for logging and handling.
09:39 < deoxxa> $ ./master.js | ssh user@host '~/slave.js'
09:39 < yawnt> yeah yeah i get it
09:39 < deoxxa> instant distributed worker :3
09:39 < yawnt> i was just thinking i don't know why you'd do that :P
09:39 < deoxxa> as i said, probably not useful :P
09:39 < yawnt> i mean.. stdin and out doesn't seem the most optimized option
09:39 < deoxxa> but the fact that it's possible is awesome
09:39 < yawnt> but yeah could be a cool experimen
09:39 < yawnt> *t
09:41 < zomg> lmg: you probably should make it so that your class emits 'error' events and you just propagate the error events and catch any exceptions and send them there
09:41 < lmg> zomg: yeah. but anyways, thanks for clarifying the unhandled exceptions are NOT emitted as 'error' events magically.
09:42 < lmg> I'll take it from here and do more testing.
09:42 < lmg> thank you kindly and have a nice day! :)
09:42 < yawnt> i had an idea
09:42 < yawnt> for a nodejs library
09:42 < yawnt> but i totally forgot
09:42 < yawnt> :(
09:44 < radiodario> you need a notebook yawnt 
09:46 < trodrigues> dropbox on any device + markdown
09:47 < trodrigues> there's your notebook
09:47 < yawnt> radiodario: i know
09:48 < radiodario> yeah that also
09:48 < yawnt> oh i remembered!
09:48 < radiodario> markdown is getting quite popular innit?
09:48 < trodrigues> it is
09:48 < trodrigues> because it rocks
09:49  * trodrigues has probably dealt with every wiki text like syntax in existence
09:50 < trodrigues> and these days you can get a good Markdown editor just about anywhere :)
09:50 < Filnik> Hi. For my thesis, I have to explain why I used node.js instead of Java. Some hints? (the real reason is that I already knew Java and node.js seemed cool :D )
09:51 < zomg> It's kind of hard to give any reasonable explanations without knowing what your application does
09:51 < CatalinH> hello. Is there any way that a browser connects to a server, get some info, then connect to another browser and keep communicating browser to browser without the server?
09:51 < zomg> But if you know Java, you probably should be able to figure out in which ways nodejs was a better choice for your specific case
09:52 < zomg> CatalinH: I don't think so, possibly with Flash or something
09:52 < Filnik> zomg, it's a server for a gaming Android application. I have some good reasons, but I would like to know if there are any others :)
09:52 < Filnik> it answers to questions like "give me the quest", "log me in", "sign me in", "register this track" and something like that
09:53 < zomg> Filnik: well off the top of my head for something like that, pros of using node would probably be that async code is easy to do in node which is something you would need to deal with in a case like that
09:53 < zomg> node is also quite good performance-wise for something like that
09:53 < yawnt> Filnik: filippo?
09:54 < Filnik> yawnt hi :) Do I already know you? (wikipedia?)
09:54 < yawnt> Filnik: gianluca.. del pip
09:54 < Filnik> yawnt, ah gi? :D ciao :)
09:54 < CatalinH> zomg, i am thinking about somekind of webserver in javascript, that would be "hosted" on client. Each one that connects to the first server to become also a server.
09:54 < Filnik> zomg I haven't used so much async code actually, but that's true
09:55 < zomg> CatalinH: browser JS environments cannot listen for connections
09:55 < Filnik> yawnt, le persone che conosco su irc di solito sono di wikipedia, per questo non ti avevo riconosciuto subito :)
09:55 < yawnt> Filnik: english here :)
09:56 < yawnt> anyway don't worry
09:56 < CatalinH> zomg, thought so.. :(
09:56 < Filnik> yawnt, ok :)
09:56 < Filnik> yawnt, any suggestion, since we are here? :P
09:56 < yawnt> tell 'em cause java sucks
09:57 < CatalinH> big time
09:57 < CatalinH> :))
09:57 < yawnt> and because nodejs is good for web services i guess
09:57 < CatalinH> and it is newer
09:57 < Filnik> java sucks is not a reason unfortunately :D
09:58 < Filnik> CatalinH, althouth barney stinson says "new is always better", it isn't always so :) also because in this sense, java is a lot more tested and mature than node
09:58 < CatalinH> node.js is something new, made for fast connections/delivery, easy to use, less resource consumtion
10:10 < jim_> New is rarely better. The idea that new is better is part and parcel of the myth of modern progress.  That sure has its meathooks dug deeply in our collective conscious.
10:12 < Filnik> jim_, you can't say that always new is better than old (and viceversa). For every case there are pros and cons.
10:12 < jim_> Right, and I didn't say that.  I said rarely.
10:13 < jim_> Are there any other decent channels on here that are node related?
10:25 < framlin_> what would be the best choice to handle XML-DOMs with nodejs?
10:26 < deoxxa> framlin_: htmlparser2
10:26 < deoxxa> framlin_: even for plain xml
10:26 < framlin_> NOT Html
10:26 < framlin_> Xml ;)
10:26 < deoxxa> yes, htmlparser2 does xml
10:26 < framlin_> aor more precise XUL ....
10:26 < deoxxa> the name is a little misleading
10:26 < framlin_> ah, ok, then I will have a try
10:26 < framlin_> deoxxa: thanks!
10:27 < deoxxa> no problem :)
10:53 < RLa> what the heck is travis4all?
10:54 < thanpolas_> spambot
10:54 < thanpolas_> trolled my node repos
10:55 < diverdude> I need to do: if(thread[0].exists), however in some cases thread=[], which causes an error ofc. Im looking for an elegant way of handling this, so that i could basically just do if(x(thread[0].exists)), where x returns false in all cases except in the case where thread[0].exists actually is set and has the value true. Can that be done?
10:58 < deoxxa> diverdude: if (thread.length && thread[0].exists) - but there's got to be a better way to do that
10:58 < deoxxa> not knowing anything about your program except that it has an array-like variable called "threads", i can't make much of a guess at what that better way is though
10:59 < jim_> Is it heresy to mention coffeescript in here?  Will I be burned at the stake?
10:59 < framlin> deoxxa: you was right ;) It works for XUL, too
10:59 < deoxxa> jim_: that depends on how flammable you are - you might catch on fire from the seething rage long before you get near any kind of stake
11:00 < yawnt> he's made of pure gasoline
11:00 < jim_> Are there any other decent channels on here that are node related?
11:00 < yawnt> everybody run
11:00 < yawnt> jim_: just ask.. i'm sure there are plenty of people here who use CS
11:00 < deoxxa> ^^ haters gonna hate
11:01 < jim_> I have nothing to ask.  I was half joking.
11:01 < yawnt> unfortunately deoxxa wasn't
11:01 < yawnt> he lights up people by night, codes js by day
11:01 < yawnt> _(
11:01 < yawnt> :(
11:01 < deoxxa> it's true
11:01 < deoxxa> it's actually pretty useful when the power goes out
11:01 < deoxxa> i just start thinking about promises and threads
11:02 < yawnt> lol
11:02 < yawnt> i guess i chose the wrong term
11:02 < yawnt> i meant you burn people by night
11:02 < yawnt> :(
11:02 < yawnt> but ok human torch, whatever 
11:02 < deoxxa> lol
11:03 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:05 < jim_> I picked up on this theme that there is some sort of disdain for coffeescript in the node community, that it's heresy.  That sort of thing amuses me.
11:07 < radiodario> jim_:  i just find coffee a bit harder to read actually
11:07 < radiodario> and i know it's designed to be *easier* to read and write
11:07 < radiodario> but it just confuses me
11:10 < jim_> Ok.  I really don't care one way or the other.  I just want to get things done, not worry about how it gets done.
11:35 < broofa> question: I'd like to write an API that parses a stream of CSV data, emitting 'row' events for each row of data it finds.  Does it make sense to implement this as a writable stream?  If so, are there any examples for best practices on how to do something like this?
11:38 < diverdude> Is there a clever way to transform [ { id: 4 }, { id: 8 } ] into [4,8] in js?
11:38 < deoxxa> diverdude: arr.map(function(e) { return e.id; })
11:38 < deoxxa> diverdude: or using underscore, _.pluck(arr, "id")
11:40 < radiodario> i try to install sourcemint (sm) and it fails, anyone having the same problem? i'm using 0.6.17
11:40 < RLa> diverdude, note that property order is not guaranteed
11:40 < diverdude> deoxxa: ahh nice, i like  _.pluck(arr, "id"). What id the array structure is more complex?
11:40 < radiodario> npm http 502 https://github.com/LearnBoost/console-trace/tarball/8a54bf706d001f1eef166b99391e952e4be10982
11:40 < radiodario> npm ERR! Not a package /tmp/npm-1345808135674/1345808135674-0.7832470517605543/tmp.tgz
11:40 < RLa> oh, that's an array
11:41 < deoxxa> radiodario: apparently sourcemint is broken
11:41 < deoxxa> radiodario: i am 0% surprised
11:42 < radiodario> ouch
11:42 < radiodario> so no way to install cloud9
11:42  * radiodario facepalms
11:42 < deoxxa> radiodario: you can try fixing the package.json of sourcemint so it doesn't point to a non-existant commit
11:43 < deoxxa> that whole cloud9 install process has always been really really fragile though
11:43 < deoxxa> so don't hold your breath setting it up
11:44 < radiodario> no it's so long that i'd probably die
11:44 < radiodario> i'm no apnea diver
11:46 < deoxxa> that's probably for the best, radiodario. i hear those guys develop some pretty serious bone problems later in life.
12:02 < diverdude> deoxxa: is there then any way to easily transform 4,(5,6,7) to (4,5),(4,6),(4,7)?
12:04 < deoxxa> diverdude: arr[1].map(function(e) { return [arr[1], e]; }) would do it i guess
12:04 < deoxxa> or uh
12:04 < deoxxa> arr[1].map(function(e) { return [arr[0], e]; })
12:09 < diverdude> deoxxa: mmm yeah ok,,,,thats a nonblocking function right?
12:09 < deoxxa> well, no
12:09 < deoxxa> it's "blocking"
12:10 <@Nexxy> javascript 
12:10 < deoxxa> but so is every javascript action
12:10 <@Nexxy> is blocking
12:10 < jrajav> An asynchronous function, which is what you meant, must take in a callback or mutate external state
12:10 < jrajav> This one does neither
12:10 < jrajav> So it will block the calling function until it returns
12:11 < yawnt> http://goscale.com/servers
12:12 < jrajav> Actually, that's a pretty poor explanation of asynchronous functions.....
12:12 < jrajav> meh
12:13 < diverdude> deoxxa: mmm but function(e) { return [arr[1], e]; } will be executed while the script runs the next line right?
12:13 < deoxxa> no
12:13 < diverdude> hmm
12:14 < deoxxa> i'm not sure how you'd expect that to work
12:14 <@Nexxy> node doesn't change how JS works
12:14 <@Nexxy> only the IO calls are async
12:14 < deoxxa> the only thing that is "non blocking" is i/o
12:14 <@Nexxy> not reading/writing to/from a stream? it's not "non-blocking"
12:14 < deoxxa> Nexxy slow down you're making me look bad :<
12:14 <@Nexxy> lol
12:15 <@Nexxy> YOU DO THAT JUST FINE ON YOUR OWN DEAR
12:15 <@Nexxy> #trololol
12:15 < deoxxa> so mean
12:15 < jrajav> diverdude: You're a little confused by the fact that Node.js uses a lot of anonymous functions. Function values can be used for a lot of things, not just asynchronous callbacks
12:15 < jrajav> diverdude: In this case, .map is using the function to apply it to each index of the array
12:15 < yawnt> Nexxy: inappropriate :trollface:
12:16 < jrajav> diverdude: It still needs to return the end result back to the calling function, though, so it *has* to block
12:16 <@Nexxy> yawnt, zomg rageb&
12:16 <@Nexxy> zomg must get a lot of false hilights
12:16 < yawnt> i guess so
12:16 <@Nexxy> I usually forget zomg is even here
12:17 < yawnt> i used to get a lot too
12:17 < yawnt> when my nick was just yawn
12:17 < jrajav> He must get a lot of unwelcome jokes at barbeques
12:17 < deoxxa> can't say i understand that one
12:17 < diverdude> jrajav: ah yes ok
12:18 < substack> barbecues
12:18 < jrajav> diverdude: Do you understand what a function value is and how to assign it to a variable or pass it as an argument to another function?
12:18 < substack> WITH A C
12:18 < jrajav> substack: Nah
12:18 < jrajav> substack: s'not how I roll
12:19 <@Nexxy> substack, but you see... if it's blocking...
12:19 <@Nexxy> then it's totally a barbequeue
12:19 < jrajav> deoxxa: zomg wtf bbq?
12:19 < deoxxa> Nexxy: door is over there ->
12:19 < deoxxa> jrajav: oh, heh
12:20 < jrajav> thx for pity laugh
12:20 <@Nexxy> jrajav, I got the joke without explanation, fwiw
12:20 < jrajav> Nexxy++
12:20 < deoxxa> lol
12:29 < framlin> what is the best way to simulate a browser-environment within nodejs without using jsdom?
12:30 < framlin> I want to have such "symbols" like XMLHttpRequest
12:30 < framlin> available
12:31 < framlin> I have to eval javascript-code, that is normaly running in a Firefox and is not included into HTML-Files, but XUL-Fles
12:32 < framlin> Firefox works as a XUL-Runner in my environment
12:34 < astropirate> framlin, what is a browser environment but JS engine + dom :)
12:35 < framlin> astropirate: ?
12:35 < diverdude> hmm ok....so i got [ [ 2, 1 ], [ 2, 2 ] ]. i know i can do arr.join(',') for a 1D array. Is there any similar way i can render [ [ 2, 1 ], [ 2, 2 ] ] as '(2,1),(2,2)' in javascript?
12:35 < framlin> I want to run the XUL-Applications within node.js, thats my target
12:37 < diverdude> aha,,,i thought of a way: console.log(pid.map(function(e){return ('(2,'+e+')')}).join(','))
12:37 < diverdude> any better ideas?
12:37 < framlin> my first step is, that I have to include/eval a framework, thats composed of some javascript-files, that are included by <script>
12:39 < framlin> astropirate: some of the scripts use global symbols such as XMLHttpRequest, because they asume, that they are running in a firefox
12:40 < framlin> but they do NOT ;)
12:40 < astropirate> framlin, why not use jsdom?
12:40 < astropirate> performance?
12:43 < framlin> becaus jsdom does nor work with XUL-files
12:44 < framlin> it asumes an HTML-File
12:44 < framlin> such tags like <body> and so on
12:45 < framlin> I could tranform the DOM from XUL to HTML, but than I have to throw away the "widgets"
12:47 < framlin> btw. is there any module that takes a "JSON-representation" of an HTML-file and creates a (HTML-)DOM?
12:49 < astropirate> framlin, not that I know of.... I made one that does the opposite :p but thats of no use to you
12:50 < jim_> You mean, something other than one on of the dozens of templating engines out there -- server side and client side -- that an transform json into html?
12:50 < astropirate> jim_, he wants the opposite of that
12:51 < jim_> Did I misread this: is there any module that takes a "JSON-representation" of an HTML-file and creates a (HTML-)DOM?
12:51 < framlin> astropirate: no, I tink that would be an iadea
12:51 < jim_> I suppose I did.  Carry on.
12:52 < framlin> I currently have parsed the XUL-files with htmlparser2
12:52 < framlin> so I have a "JSON-representation" of the XML-DOM
12:53 < framlin> XUL is actually XML
12:54 < framlin> soit may work, to transform this DOM into a JSON-structure that could be pushed into an templateEngine
12:55 < framlin> the Problem with templates is, that the normaly only fill data into some placeholders, but I would have to create the HTML-results from scratch
12:55 < framlin> jim_: what template engine would you use for that?
12:56 < jim_> Off hand?  On the server jade.  On the client mustache.  There's are dozens of solutions.
12:57 < framlin> ok, I will have a look at jade
12:57 < jim_> I hope I am not misunderstanding your problem.
12:59 < framlin> ma problem is, that I have a (big) XUL-enterprise application with hundred-thousends of lines of JS code and I want to test it ;)
13:00 < framlin> there is a lot of businesslogic in the client
13:00 < framlin> and the code will be changed every day
13:01 < framlin> but all tools aroud are made for HTML ;)
13:05 < prettyrobots> Looking for benchmark.js authors.
13:05 < framlin> and much of the JS-businesscode uses methods of a framework, so the first step is to get that framework running witinn nodejs without changing it. So it is no option to insert moduules.export.FRAMEWOK_CLASS_1 or something like that, e.g. to get require runing. so I try to eval them ....
13:06 < prettyrobots> Mathias Bynens or John-David Dalton.
13:06 < prettyrobots> If you're around please say hello.
13:06 < framlin> and eval is evil .... it trys to evaluate XMLHttpRequest ;)
13:09 < Cool_> I'm sending the user id from the client to the server throw 'register' event when the user connects to open a socket with that ID and store it to an array of sockets. I use it connect with this user, But I noticed that when I refresh the page I lose the connection, so I need t oregister the user again, what's wrong with that?
13:10 < Cool_> I need to emit "register" event with the user ID within each page?
13:11 < zomg> Cool_: that is correct
13:11 < zomg> JavaScript code only lives for the duration of a singe page
13:11 < zomg> *single
13:12 < Cool_> Ah thanks zomg.
13:12 < Cool_> One more question, please.
13:12 <@Nexxy> Cool_, rule 0: just ask ;P
13:12 <@Nexxy> but being polite is cool too I guess!
13:14 < Cool_> Of course, being close much to a machine will make us feels like them..anyway
13:14 <@Nexxy> ERR: unrecognized command
13:14 < Cool_> =)
13:15 < ProblemEmitter> can i use regexp to discover legit <a> tags in a large html string?
13:15 <@Nexxy> you *can*
13:15 < ProblemEmitter> would that be fast?
13:16 <@Nexxy> fast is relative
13:16 <@Nexxy> a proper parser would be much easier and more maintainable in the long run
13:16 <@Nexxy> try https://github.com/substack/node-parsley
13:16 < ProblemEmitter> i will have a look at it now, brb
13:17 <@Nexxy> sorry not the right lib
13:17 <@Nexxy> jsdom is probably the best
13:18 <@Nexxy> HTML parsing isn't something I do much myself, so someone else may have a better recommendation
13:18 < ProblemEmitter> i cant get jsdom working without npm :(
13:18 <@Nexxy> why not use npm?
13:18 < ProblemEmitter> im on a shared hosting with node.js support
13:18 <@Nexxy> ohh
13:19 < ProblemEmitter> actually the whole machine is mine but i cant install npm there
13:19 <@Nexxy> what host?
13:19 < ProblemEmitter> zone.eu
13:19 <@Nexxy> ah
13:19 < Cool_> I'm using Win7, I run node through command prompt. Sometimes it gets slow, especially at the beginning or when registering a user (emit and on operations) is that relative to Windows maybe?
13:19 <@Nexxy> that sounds crippling ._.
13:19 <@Nexxy> I'm not sure why you would even use node w/o npm
13:19 < ProblemEmitter> i dont have root, thats it
13:19 <@Nexxy> (I mean from a hosting perspective)
13:19 <@Nexxy> it seems silly to offer node w/o npm
13:19 < ProblemEmitter> cant install anything there :P im lucky i have node 0.8.7
13:19 < substack> you don't need root to use npm
13:19 < zomg> It seems ridiculous to offer node without npm
13:19 < zomg> :P
13:20 <@Nexxy> ridiculous works too
13:20 < ProblemEmitter> ive put all the dependencies in ~/node_modules but it still says that node-htmlparser is missing
13:20 < ProblemEmitter> and 'cssom' dependency fails aswell
13:20 < substack> don't do that
13:20 < substack> just use `npm install`
13:20 < substack> puts it into node_modules
13:21 <@Nexxy> and a proper package.json
13:21 < substack> local nested node_modules directories instead of hacky ~ paths
13:21 <@Nexxy> http://package.json.jit.su/ for reference
13:22 < Cool_> @Nexxy, what explains slowness of node server? May that depend to the OS? 
13:22 < ProblemEmitter> is there a statically linked binary for npm?
13:22 <@Nexxy> Cool_, it could depend on a lot of things
13:22 <@Nexxy> Cool_, it's hard to tell without more information
13:23 < ProblemEmitter> i cant "install" or compile anything (npm in this case) on that box
13:23 < substack> you don't need root
13:23 < substack> oh waits had it scrolled up
13:23 < substack> ProblemEmitter: npm comes with node
13:23 < substack> ProblemEmitter: how are you even running node
13:24 < substack> first order of business, get a gnu toolchain installed
13:25 < Cool_> @Nexxy What matters for me is "whether Node, in the normal cases, is fast enough or not?"
13:25 < holzp> I guess the question is...can you move to a different host?
13:26 < ProblemEmitter> substack: im renting a machine from estoniast largest hosting provider, i have ssh but no write access outside my home directory ~
13:26 < ProblemEmitter> they have provided me with a node087 binary
13:26 < ProblemEmitter> virt15189sh1:dn44:~> which node087 /opt/zone/bin/node087 
13:26 < spionL> okay, I got it. I'm gonna separate my agents RPC thingy ( https://gist.github.com/3437767 ) into two parts. The first will be client-server stragents, which can attach to any read/write streams and send/receive messages as well as publish virtual multiplexed read/write streams.
13:26 <@Nexxy> Cool_, definitely fast enough in normal cases
13:27 < holzp> I think the consensus here is that they say the support node, but they dont
13:27 < holzp> if its important perhaps a dedicated nodey host
13:27 <@Nexxy> nodejitsu, nodester, heroku, etc
13:27 < spionL> The second will be stractory, a streaming factory binary with registry and workers, which allows you to produce streams on random workers and run a middleware function on the worker that attaches stuff to the streams.
13:28 <@Nexxy> spionL, is this for webrtc?
13:28 < Taneem> you should still be able to install node modules to your local directory where you're uploading your js code ProblemEmitter 
13:28 < spionL> then you can ask the registry to produce a new stream and give it by name, or "locate" a named stream
13:29 < spionL> Nexxy, its for node-to-node RPC and agents
13:29 < spionL> basically, having a worker pool of nodes and spawning named agents on that worker pool
13:29 <@Nexxy> interesting
13:29 < spionL> or asking to "get" a named agent and then communicate with it (send/receive messages and access the agent's virtual streams, therefore stragent)
13:29 < ProblemEmitter> Taneem: i can and have installed modules such as socket.io, node-mysql, etc.. without NPM but cant seem to install jsdom properly
13:30 < Taneem> ProblemEmitter: I think i've been using jsdom myself in my current project
13:30 < Taneem> what error do you get
13:31 < ProblemEmitter> i get dependency failures, require() fails on 'cssom', and also the thing warns me about no node-htmlparser installed
13:31 < ProblemEmitter> can you just give me a working set of node_modules subfolders? :)
13:31 < spionL> you would use it generally when you want to scale something over an unknown number of machines and you want to be able to just add new machines into the mix at any time, run a generic worker on them which will soon host new agents
13:31 < spionL> :)
13:31 < Taneem> oh sorry, I just doublechecked, I'm using nodeio which comes with a jsdom like utility built in
13:32 < ProblemEmitter> can anyone here please do a "npm install jsdom" and upload the related node_modules folders somewhere?
13:34 < skattyadz> Here you go: http://c.skatty.me/IygS
13:36 < deoxxa> https://twitter.com/bos31337/status/238856228451790848 << heh
13:36 < ProblemEmitter> sec
13:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:38 < ProblemEmitter> deoxxa, nice
13:38 < skattyadz> problememitter, did you get those files?
13:39 < spionL> great, I disconnected
13:39 < ProblemEmitter> skattyadz: yes i think i have the proper versions of every dependency now
13:39 < skattyadz> neat
13:39 < ProblemEmitter> thanks
13:40 < ProblemEmitter> havent tested yet tho, will report back soon
13:44 < jmar777> Quick poll / request for comment: been working on getting a developer blog going built (express + mongo). wanting to go the "release early, release often" approach, and I could probably justify releasing it right given that i can create/edit/display blog posts now
13:45 < jmar777> but i personally hate blog posts that don't allow comments, which aren't implemented yet. am i alone in that distaste, and should finish that feature first, or should i go ahead and push it?
13:45 <@Nexxy> just push it
13:45 <@Nexxy> someone might help you implement that feature
13:45 <@Nexxy> :)
13:46 < jmar777> Nexxy: cool - might have to do that then :)
13:47 < chrisjaure> jmar777: i assume you've seen the whole debate about the usefulness of comments? http://mattgemmell.com/2011/11/29/comments-off/
13:47 < Taneem> jmar777: commenting isn't in the MVP definition of a blog for me
13:48 < Taneem> my own hand rolled blog doesn't have comments
13:48 < ProblemEmitter> skattyadz: all working
13:48 < tprice> how do i merge two accounts on npmjs.org?
13:49 < skattyadz> @problememitter Nice one
13:49 < CIA-1> node: Brandon Wilson v0.8 * r5901144 / doc/pipe.css : doc: more uniform and sleek buttons - http://git.io/NGvXew
13:49 < jmar777> chrisjaure: i haven't actually seen that - i'll read it now
13:50 < jmar777> Taneem: cool, sounds like comments can wait then
13:51 < tprice> anyone?
13:55 < jmar777> tprice: not sure if that's a supported feature... never attempted it though
13:55 < mscdex> anyone know offhand how to convert a v8 Object to an Array?
13:55 < mscdex> in C++
13:57 < bnoordhuis_> mscdex: convert what exactly?
14:00 < tprice> jmar777 yeah i have no idea why i have two accounts
14:03 < ProblemEmitter> skattyadz: i seem to have it working now, but the example "Creating a browser-like BOM/DOM/Window" fails, .createWindow() gives me an empty object without any properties whatsoever
14:10 < ProblemEmitter> TypeError: Cannot read property 'implementation' of undefined when trying the very first jsdom example 
14:11 < mscdex> bnoordhuis_: well, the problem is i have a function that depending on a flag will create either an array or an object and i'm having a hard time trying to get something working for both cases
14:11 < mscdex> bnoordhuis_: i'd like to be able to use Array::New() for the array case because i can give it a length to help optimize things a bit, if i can
14:12 < mscdex> bnoordhuis_: but i haven't been able to do a simple typecast successfully either
14:12 < bnoordhuis_> mscdex: okay... but where does the Object come into play?
14:12 < bnoordhuis_> mscdex: you can assign Objects and Arrays to a Local<Value> if that is what you mean
14:13 < mscdex> bnoordhuis_: right, but i need to call ->Set() on the object, whether it's an array or object
14:13 < mscdex> and Value->Set() is not defined
14:13 < mscdex> :-\
14:14 < bnoordhuis_> mscdex: ah, like that. an Array is-a Object, i think Local<Object> = Array::New(42) should work
14:15 < mscdex> ahh, that seems to work. i don't know why i didn't think to try that. thanks!
14:16 < bnoordhuis_> my pleasure :)
14:20 < tprice> how do i over write the host header with bouncy?
14:28 < tprice> oh i take it you cant do it
14:28 < tprice> evil hack but says it works https://github.com/substack/bouncy/pull/17
14:35 < deoxxa> tprice: haha wow, that's extremely hacky
14:37 -!- mode/#Node.js [+b *!*@hsrp-bgp.4over.com] by ChanServ
14:37 -!- Thegrue was kicked from #Node.js by ChanServ [User is banned from this channel]
14:38 < tprice> deoxxa well the comment says its evil
14:40 < SomeoneWeird> how do you do all those images for your projects substack ahah
14:44 < rmill> substack, SomeoneWeird, this is a good question.
14:55 < H4ns> in express, what would be a concise do-nothing middleware?  i want to conditionally put a basicAuth onto a page.
14:55 < H4ns> that'd probably be function (req, res, next) { next() }, right?
14:57 < H4ns> nice.  thanks!
14:58 < H4ns> :)
15:02 < uipoet> Good morning. Anyone have knowledge of .npminclude?
15:02 < uipoet> I have a .gitignore that prevents a directory called dist from being committed.
15:03 < uipoet> I have a .npminclude that I thought would override and allow dist to be included when I publish.
15:03 < uipoet> No dice.
15:03 < diverdude> is there any way i can force a non-blocking call to block?
15:03 < superjoe> is there a better way to write this? http://pastie.org/4580935
15:04 < superjoe> that's a lot of boilerplate just to stream something and then call a callback.
15:04 < solidoodlesuppor> Dumb Question: What's the quickest / lightest way to implement a database with node? 
15:04 < bradleymeck> diverdude: nope, use callbacks, they are explicit about async nature unlike fibres etc.
15:04 < solidoodlesuppor> MySQL work?
15:04 < bradleymeck> node-mysql
15:04 < diverdude> bradleymeck: :/ callbacks are just sooooooooooooo messy
15:04 < superjoe> solidoodlesuppor, try mongo / monk
15:05 < solidoodlesuppor> I'm not sure I get Mongo
15:05 < bradleymeck> diverdude: they are explicit, you dont need to nest them~
15:05 < solidoodlesuppor> isn't it non relational? I don't get that
15:05 < mscdex> uipoet: you mean .npmignore?
15:05 < mscdex> oh wait nvm
15:05 < uipoet> No, the opposite.
15:05 < diverdude> bradleymeck: what do you mean i dont need to nest them? 
15:05 < bradleymeck> diverdude sec...
15:05 < diverdude> bradleymeck: if i dont nest them everything will get messed up
15:07 < diverdude> bradleymeck: like, im fetching/insert stuff from my db....and i need previous values in the next call, so i need to nest the new call in the callback function of the old call...when application gets just a bit complex i have a deep callback structure which gets extremely messy
15:07 < RLa> solidoodlesuppor, check out dirty
15:07 < RLa> or you surely want relational?
15:08 < diverdude> bradleymeck: i did look at some apis trying to make it look less messy...but honestly i dont really think they help much
15:08 < solidoodlesuppor> Rla: I don't care. Just don't get Mongo, guess I should try to grok it since it's so hot
15:08 < solidoodlesuppor> I've actually hung out at 10gen a couple of times, just never over Mongo
15:08 < [jmc]> hi everybody
15:09 < [jmc]> I'm having problems building nodejs 0.8.8
15:09 < [jmc]> the build itself goes smooth, but then a test fails
15:09 < RLa> solidoodlesuppor, then also check out mongoose
15:09 < RLa> it could help you
15:10 < bradleymeck> diverdude: pay attention to the last couple lines : https://gist.github.com/3451844 (also this is written base upon a piece of code that was 7 levels deep before refactoring)
15:10 < solidoodlesuppor> Rla: The web server? Seems I'd like to stick with node 
15:10 < uipoet> Found my own answer. ! will do the opposite in a .npmignore.
15:10 < bradleymeck> diverdude: if you need previous values async.waterfall == love
15:11 < RLa> solidoodlesuppor, it's odm for mongo
15:11 < RLa> not a web server
15:11 < RLa> solidoodlesuppor, http://mongoosejs.com/
15:12 < [jmc]> (the test is simple/test-http-dns-fail, btw)
15:12 < solidoodlesuppor> ah I see
15:13 < bradleymeck> diverdude: make sense?
15:14 < diverdude> bradleymeck: mmm not really
15:15 < bradleymeck> diverdude, async.waterfall executes all the functions in the first argument to it (an array of functions) it will grab the err from the callbacks those functions and if it is truthy bail out, otherwise continue to the next with the arguments sent to the callback (if you think of the next(..) style of function for next(a, b, c) b and c will propagate to the next function in the array)
15:16 < bradleymeck> and whenever it is done it will execute the final callback
15:16 < bradleymeck> this lets you separate out your logic and pass state using arguments rather than closures very easily
15:18 < diverdude> bradleymeck: is it a special llibrary called waterfall?
15:18 < bradleymeck> diverdude https://github.com/caolan/async#waterfalltasks-callback
15:18 < bradleymeck> async just includes a lot of asynchronous helpers
15:21 < CIA-1> node: koichik v0.8 * r752ac32 / (3 files in 3 dirs): https: make https.get() accept a URL - http://git.io/4ysFpA
15:23 < bradleymeck> can someone please readd http://callbackhell.com to the topic
15:24 < zomg> Random but anyone happen to have DirectX SDK installed? :P
15:25 < diverdude> bradleymeck: so all those arguments to async.waterfall in your examples are functions which are executed in chronological order?
15:26 < bradleymeck> diverdude: yes
15:26 < bradleymeck> diverdude: hence the async.parallel
15:27 < diverdude> so first self.perform.bind(self, 'awesomeThing.configure', null, description), then async.parallel.bind(async, [... etc ?
15:27 < bradleymeck> diverdude yes it will wait until self.perform finishes before moving on
15:28 < CIA-1> node: Brian White master * rc78678b / (lib/http.js test/simple/test-http-client-parse-error.js): http: bubble up parser errors to ClientRequest - http://git.io/QbdGhw
15:29 < diverdude> bradleymeck: and how do i then use values from one callback in following callbacks?
15:30 < Ards> Good morning all
15:30 < brianc> morning
15:30 < diverdude> bradleymeck: like if i need to do mysqlclient.query(sql2,[did,pid],function(err0, dirIds, fields) and i need to use a value in dirIds 5 levels below
15:32 < Ards> I'm having an error I can't really find the answer. 
15:32 < Ards>   app.get('/login', function(req, res) {
15:32 < Ards>   ^
15:32 < Ards> ReferenceError: app is not defined
15:32 < superjoe> is there a better way to write this? it seems like a lot of boilerplate just to stream something to disk: http://pastie.org/4581079
15:33 < Ards> My error stack is tat the following link : http://pastie.org/4581086
15:33 < Ards> A little help would be appreciated.
15:34 < cjblomqvist> Is there really no easier way to do this: (new Buffer(fs.readFileSync(file.path, 'binary').toString(), 'binary')).toString("base64")  --- is this the best to do it?
15:34 < superjoe> cjblomqvist, the best way to do it almost certainly does not use the *Sync api
15:35 < mmalecki> cjblomqvist: fs.readFileSync(file.path, 'base64')?
15:35 < cjblomqvist> Yeah, nevermind the sync part of it
15:35 < cjblomqvist> mmalecki: Will test
15:36 < bradleymeck> diverdude: see the "function" inside the waterfall, you just need to pass it along as arguments to the next callback
15:36 < bradleymeck> diverdude if you need to have multiple unrelated actions passing state look at async.map to map callback results to keys
15:36 < Ards> How can I pass a variable to a route? ex: require('./apps/authentication/routes')(app);
15:37 < Ards> app here isn't defined when it goes to the routes.coffee script console.log(app);
15:37 < cjblomqvist> mmalecki: Of course, something else was causing trouble in my app, big thanks anyway
15:38 < mmalecki> cjblomqvist: pleasure
15:38 < [jmc]> any clue about that failing test?
16:12 < [jmc]> bye
16:16 < prettyrobots> benchmark.js developers around?
16:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:17 < prettyrobots> Mathias Bynens ?
16:17 < prettyrobots> John-David Dalton?
16:17 < prettyrobots> Bummer.
16:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:23 < acak> hi
16:25 < acak> I am trying to recommend a Node version which can be used in production to my teammates. It's first use case is going to compilation of coffee script :-] but we'll add a couple of apps over the weekend. I really don't want it to any bad rap initially. Which version should I be using? Any ideas? (Based on my research, my options are 0.6.17 + or 0.8.8 + ) 
16:26 < gildean> acak: the latest imo
16:27 < acak> I see. Anything I should look out for? 
16:28 < acak> (Pitfalls, disclaimers) The person here says use 0.6 + (http://stackoverflow.com/a/10739858)
16:28 < acak> No reasoning though
16:28 < tprice> go with 0.8.x
16:32 < brianc> acak: v0.8.8 is the latest - definitely go with that one
16:33 < brianc> acak no known pitfalls or disclaimers with the v0.8.x line except the "domains" feature is still experimental
16:34 < acak> Thanks. I'll recommend 0.8.8 as that seems to be the consensus here and it's pretty much the main version they make accessible on the website.
16:35 < tprice> acak as i see it newer is always better than older
16:38 < brianc> acak the 0.8.x branch is stable and only receives bug fixes and updates to the included stable v8 engine
16:38 < brianc> acak don't use odd numbered branches for production - they're unstable development branches
16:38 < brianc> like v0.5.x v0.7.x v0.9.x those are unstable
16:39 < acak> Oh ok. Thanks for the tip. 
16:39 < tprice> v0.5.x? i thought it just jumped to 0.6.x
16:39 < brianc> v0.5.x was around a while before v0.6.x was released
16:40 < brianc> they usually do an even + odd brach at the same time
16:40 < tprice> lol i did not see that version
16:40 < brianc> when they release v0.4.0 they immediately branch off a v0.5.x line to begin work on the next release
16:40 < brianc> but they also keep adding fixes and patches to the v0.4.x line â€” the patches and fixes just don't break any APIs (or hopefully any functionaly) 
16:41 < brianc> so when v0.8.0 came out they branched for v0.9.x
16:42 < brianc> and it usually seems the first couple itterations on the unstable branch are spaced farther apart and a bit less stable, but as they go on they start coming out faster & eventually module authors are encouraged to be using the odd-numbered branches in development to start testing their modules against them
16:42 < tprice> good to know!
16:43 < Franz__> someboy can try testing a script?
16:44 < Franz__> i would like know if in linux function with success
16:56 < xybo> Hey Andre
17:08 < st_luke> Nexxy: happy birthday
17:27 < littlebear> ls
17:35 <@Nexxy> st_luke, thanks!
17:36 < AvianFlu> Nexxy: happy birthday n' stuff!
17:43  * mscdex shakes a fist at libuv
17:43 < othiym23> Nexxy: did you get all those emoji I sent you?
17:43 < livinded> mscdex: just threaten to force it to block, it'll do what you want
17:44 < mscdex> :S
17:47 <@Nexxy> AvianFlu, thanks :)
17:47 <@Nexxy> othiym23, lol they just show up as blocks for me ._.
17:50 < othiym23> Nexxy: aw, even on yr phone?
17:51 < othiym23> they were artisanally curated!
17:51 < qbit> wew
17:51 <@Nexxy> othiym23, o man let me check!
17:52 <@Nexxy> aww, yeah still boxes
17:52 <@Nexxy> but I mean... very nice boxes!
17:52 < othiym23> haha well shit
17:52 < othiym23> stupid custom Unicode ranges
17:53 < othiym23> I'll send you a screenshot, because it's too ridiculous not to share
17:53 < fearphage> i'm trying to pipe content from an ftp upload (i'm the server) to another server. I'd like to pipe the bits coming in to a remote stream. can someone point me in the right direction? i'm looking at fs.createReadStream but it wants a file from what I can tell
17:55 < othiym23> Nexxy: there you go. Everybody needs mochi on a stick for their birthday!
17:55 < dominictarr> fearphage, every sort of IO in nodejs gives you a stream
17:55 < dominictarr> req.pipe(request("http:/otherserver.com")) // should just work
18:00 <@Nexxy> othiym23, haha thanks!
18:02 < tlack> dominictarr: you know if any s3 libs for Node support streaming uploads?
18:04 < dribnet> <newbie alert>api-easy is pretty awesome, but i've having trouble testing a dynamic URL. </newbie alert>
18:04 < fearphage> dominictarr: hmmmm... i'm confused. i have a socket. how do i got from a socket to a stream is maybe the question I should have asked
18:05 < dribnet> if post #1 generates a userid, and post #2 is meant to test /User/{userid}/status - how to I add that to the suite?
18:21 < boutell> "npm link" is nice, but shouldn't node have a flag to install git-based dependencies as full checkouts? Wouldn't that be the simplest way to enable commits on the modules you're actively working on?
18:42 < bradleymeck> boutell: not really putting git repos inside of your module entirely could cause odd errors
18:44 < Raynos> There is a module for turning an object into an array of key value tuples
18:44 < Raynos> I can't find it and I feel bad for writing a new one
18:45 < bradleymeck> Object.keys(obj).map(function(k){return [k,obj[k]]}) // Raynos ?
18:45 < Raynos> bradleymeck: yes it's easy to write (and you need a reduce)
18:45 < Raynos> but that's not the point
18:45 < bradleymeck> well if you want it flat you reduce
18:46 < Raynos> Oh wait
18:46 < Raynos> your using map on an array
18:46 < Raynos> But that's not the point. There is a module that does this
18:48 < jmar777> Module to convert object into array is like television on honeymoon: unnecessary.
18:54 < blakmatrix> jmar777: depends on the honeymoon
18:56 < brianc> blakmatrix: hahaha
18:57 < CoverSlide> depends on the bride
18:57 -!- mode/#Node.js [+b *!*@gateway/web/freenode/ip.69.237.62.254] by ChanServ
18:57 -!- TheEmpath was kicked from #Node.js by ChanServ [User is banned from this channel]
18:57 < CoverSlide> I would empathize with that guy but... nah
19:26 < nlf> hooray for another library i'll likely be the only user of
19:27 < nlf> https://github.com/nathan-lafreniere/node-jschema
19:27 < bradleymeck> nlf: its that or revalidator lol
19:28 < bradleymeck> nlf: but yea $ref and extends are LOL hard and terrible to implement
19:28 < nlf> yeah, i didn't want to bother
19:31 -!- mode/#Node.js [-b *!*@gateway/web/freenode/ip.69.237.62.254] by Nexxy
19:34 < holzp> anybody try everyauth connect module?
19:37 < _discovery> Hi guys, Chrome console has this method of determining an objects type name, see  : http://i.minus.com/i5WQYVUm0u3k.png
19:37 < _discovery> I am curious if this is extrapolated from the code somehow or if it is internal tagging basically
19:37 < _discovery> As in, I would like that 'Test' name in v8 somehow
19:40 < fearphage> i have an interface that requires a readStream. i have a data socket. what do I need to do to convert/connect/manipulate the socket into a readStream?
20:07 < brianc> ferphage:	the socket is a readStream
20:07 < brianc> the files are _in_ the computer
20:08 < othiym23> _discovery: they're probably just pulling it off the constructor
20:08 < brianc> fearphage: sorry spelled your name wrong the first time
20:08 < othiym23> _discovery: if you look at the node / v8 source around stacktraces, you can see a couple ways to extract that information
20:09 < othiym23> AFAIK it doesn't use any internal magic
20:09 < bnoordhuis_> _discovery: what othiym23 said, probably t.constructor.name
20:10 < _discovery> Thanks guys, but that only ever works if it is a named function, note that i assigned it to a variable
20:11 < _discovery> var Test = function(){} var t = new Test(); t.constructor.name = "" 
20:11 < _discovery> function Test(){} var t = new Test(); t.constructor.name = "Test"
20:12 < othiym23> _discovery: ah, so it is, sorry for not reading more closely
20:13 < _discovery> Oddly enough, If you inherit more, like Test -> TestChild -> t , the constructor.name returns Test
20:13 < _discovery> not TestChild
20:13 < fearphage> brianc: :)
20:14 < fearphage> i think the problem is in the libray i'm using. the socket is readable when I pass it but something else is wrong. thank you
20:18 < bnoordhuis_> _discovery: v8 has a c++ api for getting the inferred function/object name but i don't know if that's exposed to js land
20:19 < _discovery> bnoordhuis_, I could expose it myself, but it is something that would be useful in other engines (like JSCore) 
20:21 < bnoordhuis_> _discovery: grep for inferredName / inferred_name in deps/v8 and you'll find it
20:21 < bnoordhuis_> _discovery: it's not part of the officially exported api btw
20:22 < _discovery> I know, thanks :) as I said, I am interested in something cross engine too
20:22 < bnoordhuis_> oh wait, it is
20:22 < bnoordhuis_> Function::GetInferredName()
20:22 < _discovery> (i knew which you meant, that is)
20:22 < bnoordhuis_> okay, cool :)
20:41 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:58 < CIA-1> node: Ben Noordhuis master * rc4fa77a / tools/js2c.py : tools: fix missing initializer warning in js2c.py - http://git.io/y0t92g
21:02 < ccowan> ugh!
21:19 < tomb> does anyone know why npm will ignore files which I have in .gitignore?
21:21 < AvianFlu> tomb: because you don't have an .npmignore
21:21 < tomb> I have a module written in coffee-script, I want to ignore the compiled .js from the git repo, but include in the npm package
21:23 < dominictarr> tomb use a seperate .npmignore and a .gitignore
21:23 < tomb> bit of a weird assumption by npm, but ok
21:24 < dominictarr> tomb, npm uses .gitignore if there is no .npmignore
21:24 < TooTallNate> it's a good defafult
21:25 < tomb> not really
21:25 < tomb> .gitignore is for my 'git' repo not my 'npm' package
21:25 < TooTallNate> it is because newer people don't even have to know about it
21:25 < TooTallNate> but more experienced people (i.e. tomb) can have more granularity when desired
21:26 < tomb> TooTallNate: maybe I had an .npmignore file when I've done it before, who knows!
21:26 < TooTallNate> wha?
21:32 < CIA-1> node: Nathan Rajlich master * r025f53c / (lib/console.js test/simple/test-console-instance.js): console: refactor the console module to be reusable - http://git.io/6UDsEQ
21:32 < CIA-1> node: Nathan Rajlich master * r0285dae / (lib/repl.js test/simple/test-repl-console.js): repl: create a new Console instance for the repl when "useGlobal" is off - http://git.io/oiwhTw
21:39 < ccowan> I'm thinking that CouchDB is the cat's meow.
21:40 < ccowan> (unfortunatly we are not using it :( )
21:41 < EyePulp> redis is pretty great too (depending on needs =)
21:41 < ccowan> yes
21:41 < ccowan> We use that... I love it
21:41 < ccowan> but mysql... yuk
21:42 < lohkey> i personallly like riak more then couch
21:43 < duko> hello i wanted to know which MVC-level pattern the experts here recommend most
21:43 < EyePulp> if you've got to use a traditional rdbms, postgres is the bomb
21:43 < duko> MVC, MVVC, something else?
21:44 < trb> ccowan: why couch? 
21:44 < trb> duko: theres an MVC level pattern other than MVC?
21:44 < ccowan> It's the rest interface that makes it really attractive
21:44 < trb> ccowan: sure, but couch sold out
21:44 < ccowan> did it?
21:44 < ccowan> how so?
21:44 < duko> yes, well MVVC would be one of those
21:45 < brianc> yeah postgres! woo!
21:45 < trb> ccowan: its not so 'free' anymore
21:45 < duko> and there are variations of MVC that are used
21:45 < trb> ccowan: its an unknown as to future 'free' support
21:45 < ccowan> yuk... didn't know that
21:45 < trb> ccowan: they were aquired
21:45 < trb> iirc
21:45 < duko> i'm using what might be considered 90's/struts-style MVC
21:46 < duko> but i want to change the pattern i'm using
21:46 < trb> duko: mvc is an ideal, no one does MVC
21:46 < duko> to one that uses an observer pattern on data
21:46 < trb> same to ccowan
21:46 < ccowan> trb: they?
21:46 < trb> they? I didn't say they
21:47 < trb> I said no one
21:47 < duko> trb do you have a favorite implementation of a pattern that you would recommend to me?
21:47 < trb> when I say that, I mean true MVC
21:47 < trb> duko: 'don\'t give a shit' pattern works well ;)
21:47 < trb> just kidding
21:48 < trb> I'm a sysadmin though, I rarely touch code
21:48 < trb> and don't start on bash coding
21:48 < ccowan> trb... How was couchdb aquired? It's an apache foundation project
21:48 < trb> it is?
21:48 < duko> ok well thanks unfortunately i need to write bash scripts almost every day
21:49 < Domenic_> I'm a big MVVM fan
21:49 < trb> thats news to me, couch was not that beforehand, my recollection is that couch was, then the company behind was aquired
21:49 < ccowan> trb: http://couchdb.apache.org/
21:49 < trb> I liked couch when I first hit the nosql ground, but I rather prefer mongo now
21:50 < brianc> redis! *fist pumps*
21:50 < brianc> postgres! *more fist pumps*
21:50 < trb> brianc: lol
21:50 < brianc> I ONLY HAVE A HAMMER AND AN OVEN SO ALL I SEE ARE NAILS AND FROZEN PIZZAS
21:50 < trb> redis, not used.  psql, yes I've used a lot
21:51 < brianc> trb redis is actually and truly exceptionally badass
21:51 < trb> badass, really? in what application?
21:51 < brianc> well it wears a leather jacket at all times, for one thing
21:51 < brianc> and has job killer tats
21:51 < brianc> so we're talkin' really badass
21:51 < trb> aha.... you mean you wish you wore a leather jacket
21:51 < brianc> seriously though
21:52 < brianc> it's like network accessable thread safe data structures
21:52 < trb> ok
21:52 < brianc> kinda like network attached storage
21:52 < brianc> but network attached ram
21:52 < brianc> kinda
21:52 < trb> kinda.... ok, can you elaborate as to how you'd use it?
21:52 < trb> i.e. for what purpose
21:52 < trb> in an application
21:52 < brianc> it's great for caching
21:52 < trb> web app
21:53 < brianc> web app
21:53 < trb> why redis over memcache then?
21:53 < brianc> it's more than just caching
21:53 < brianc> you can store more complex data types
21:53 < trb> what if all I wanted was cache?
21:53 < ccowan> trb: We use it for our feeds and leaderboards. 
21:53 < brianc> lists, sets, hashes, key->value pairs
21:53 < brianc> if all you wanted was a cacheâ€¦i don't know
21:53 < ccowan> it's fantastic at lists
21:53 < brianc> probably memcached or sumphin
21:54 < brianc> I think if you have a big amount of stuff you want to cache you might wanna go w/ multi level cache
21:54 < trb> is redis a distributed cache?
21:54 < trb> and the other stuff
21:54 < brianc> it's distributed in that it can run in a master/slave mode
21:54 < brianc> it's completely backed by ram so it's fast
21:54 < brianc> but not so good for unbounded datasets
21:54 < trb> ok
21:54 < brianc> since once you run out of ram on the redis machine it stops responding to new sets
21:54 < brianc> i dunno it's got pretty good docs
21:55 < brianc> i initially was skeptical
21:55 < brianc> but it's really nice
21:55 < brianc> and it's really stable
21:55 < trb> brianc: oh, thats not good
21:55 < brianc> and has no dependencies
21:55 < ccowan> I monitor my redis memory usage religiously
21:55 < brianc> and just compileds into a single executable and you start it and you start crying tears of joy
21:55 < brianc> ccowan: do you use monit or anything? I like monit. the only app i allow to text message me
21:56 < ccowan> nagios + statsd
21:56 < trb> how low can it go before it craps out?
21:56 < trb> monit sucks
21:56 < brianc> how deep is the ocean? how wide is space? redis is limitless. just like my love for redis.
21:56 < trb> heh
21:56 < brianc> i don't know how long it can go before it craps out
21:57 < brianc> it's really stable
21:57 < brianc> used in a lot of big companies
21:57 < ccowan> until you run out of ram
21:57 < brianc> i think the main issue is if you use it wrong (i.e. fill it with more data than you have ram) then you're in hot water
21:57 < trb> I mean, take my zfs setup, at <10GB free it really gets stuck, what are the lower limits of running a large dataset in redis before it craps out
21:57 < brianc> if you have 8 gigs of ram you can't put more than like 7.99 gigs into redis
21:58 < trb> brianc: if you have 8GB of ram, then you set aside a percentage to the OS anyway
21:58 < trb> I'm talking about when it really craps out
21:59 < trb> I always leave 10% for OS and misc on a system for ram anyway
22:01 < brianc> when it really craps out meaning it crashes?
22:01 < brianc> it can restore it's state when it's restarted
22:01 < brianc> though I'm not sure how long that takes â€” depends on dataset size
22:02 < brianc> it also has pub/sub so you can do interprocess message passign which is very useful for node apps â€” espesh ones that do real-timey stuff
22:02 < lohkey> dnode FTW
22:02 < brianc> yeah dnode is nice
22:02 < lohkey> dnode + zookeeper + hashring (consistent hashing) == message passing magic
22:02 < brianc> but like if you have a web app being served on 4 machines and there are web sockets
22:02 < brianc> and sockets on macine 1 need to say something to sockets on machine 4
22:03 < lohkey> yeah
22:03 < brianc> does dnode help with that?
22:03 < lohkey> thats what i use dnode, zookeeper and hashring for
22:03 < brianc> how does that work?
22:03 < lohkey> brianc: in combination with zookeeper and hashring yeah
22:03 < brianc> oh okay
22:03 < lohkey> so zookeeper is a lock service and name registry thats highly consistent
22:03 < lohkey> each node basically drops a file in ZK like /websocket/$ip:$port
22:04 < lohkey> and each node has watchers on the /websocket path
22:04 < lohkey> so everytime that path is updated zookeeper pushes those changes to each node instance
22:04 < lohkey> and each node instance updates it's local hashring
22:04 < brianc> ah
22:04 < lohkey> so it knows which node to route traffic too
22:04 < brianc> and then you just tell dnode where to say waht?
22:05 < lohkey> yup, you maintain persistent dnode connections to each instance
22:05 < lohkey> and then you just call functions and pass callbacks
22:05 < brianc> i just subscribe each socket to redis
22:05 < lohkey> and when the callbacks are invoked remotely the fire on the original remote instance that sent them
22:05 < brianc> and if i want to say something to a particular socket
22:05 < lohkey> it's basically remote callbacks
22:05 < nlf> crap
22:05 < brianc> i just do a redis publish w/ the socket ID as the subject
22:05 < nlf> i hate it when you write an entire library, then realize you did it wrong
22:06 < lohkey> brianc: the problem with pub/sub is each message gets sent to every node
22:06 < brianc> yeah true
22:06 < lohkey> the zookeeper/hashring approach only sends to the correct node
22:06 < lohkey> and with no middle man
22:07 < brianc> that is totally true
22:07 < lohkey> also, works well with auto-scaling
22:07 < brianc> i thought i'd have to go that way at some point
22:07 < brianc> but redis can push through quite a few messages a second and my sockets are pretty non-chatty
22:07 < lohkey> mhm
22:07 < lohkey> but in terms of latency, less network hops is always better
22:07 < brianc> true
22:17 < zmoog> hi, anyone has been able to build the latest (0.8.x) node on armv5 (sheeva plug)?
22:28 < TooTallNate> zmoog: what trouble are you experiencing?
22:28 < TooTallNate> i don't have a sheeva plug but I do arm compilation for my pi
22:28 < zmoog> raspberry pi?
22:28 < TooTallNate> yup
22:29 < zmoog> the pi has a armv7, isn't it?
22:29 < livinded> someone is selling quad core cortex a9 arm boards for like $130
22:29 < livinded> thinking about picking one up
22:29 < TooTallNate> zmoog: armv6 actually
22:30 < livinded> they're designed for android dev, but the hardware is MUCH better than the pi for not much more
22:30 < livinded> http://www.cnx-software.com/2012/07/11/hardkernel-odroid-x-low-cost-exynos-4412-quad-core-cortex-a9-development-board/
22:31 < d4rklit3> does browserify middleware not update properly?
22:31 < d4rklit3> seems that i have to restart the server everytime
22:32 < zmoog> https://gist.github.com/3456483
22:32 < livinded> too bad it's only 100mbit though
22:33 < TooTallNate> zmoog: you might wanna try the v0.8-HEAD
22:33 < TooTallNate> i put in a couple commits yesterday that help with the bundled openssl on arm
22:34 < TooTallNate> as you can see there, it's attempting to compile the x64 source files
22:34 < TooTallNate> which isn't right ;)
22:34 < zmoog> TooTallNate: I'm getting this https://gist.github.com/3456483 .. it seems that armv5 is not fully supported. The most current version built correctly is 0.4.10 :)
22:34 < zmoog> yep
22:34 < zmoog> bizarre ^^
22:35 < TooTallNate> zmoog: that doesn't look like you're on v0.8-HEAD
22:35 < zmoog> it's messing up something
22:35 < TooTallNate> zmoog: git fetch && git checkout origin/v0.8
22:36 < zmoog> yep, I'm currently building 0.6.x but I can checkout back to head
22:36 < TooTallNate> ya screw 0.6, you want 0.8 :)
22:38 < y3n> esmi.allalla.com
22:40 < zmoog> TooTallNate: now I'm building head.. ETA 40 min ^.^
22:54 < d4rklit3> cache = false seems to have done it
23:02 < zmoog> TooTallNate: unfortunately the same old story here.. https://gist.github.com/3456870
23:03 < TooTallNate> zmoog: it still looks like you're not on the right branch
23:03 < TooTallNate> you should see "config/android" instead of "config/k8" in one of those flags
23:04 < zmoog> ok, I'll check it
23:05 < TooTallNate> zmoog: you might even wanna try my "pi" branch: https://github.com/TooTallNate/node/compare/joyent:v0.8...TooTallNate:pi
23:06 < TooTallNate> which is called pi since that's what I test on, but it should help all arm targets
23:11 < zmoog> well, so I'll check out your pi branch
23:12 < CIA-1> node: Nathan Rajlich v0.8 * r2d0c1da / doc/api/https.markdown : docs: fix syntax error in "https" example - http://git.io/381dFg
23:15 < Orbitrix> anyone wana see my totally ghetto rigged node.js chess game project i'm workin on?
23:16 < Orbitrix> https://www.snakebyte.net/nodechess/
23:16 < Orbitrix> https://github.com/AlexanderHerlan/nodechess/tree/development
23:16 < Orbitrix> thats the source for it
23:16 < Orbitrix> very early stages of development, but at least i got something basic up
23:18 < Orbitrix> https://github.com/AlexanderHerlan/nodechess/blob/development/server/server.js
23:18 < Orbitrix> that will probably be of interest to most ppl here
23:19 < Orbitrix> https://github.com/AlexanderHerlan/nodechess/blob/development/js/main.js
23:19 < Orbitrix> and that would be the client
23:22 < Orbitrix> I supose the most "impressive" way i'm using node.js, is each player can see the other player drag their pieces around the board in real time
23:22 < Orbitrix> no real point to it, other than i thought it was cool, and helped me learn node.js :P
23:23 < Orbitrix> (also only really targetting Chrome right now, but it should work in Firefox.  No IE yet tho)
23:46 < douh> hello. I'm deplying node in a vps. i know the recommend way to do, is with nginx as a proxy, but i want to go step by step, as this is a low traffic site, and go without nginx for now. I have node installed and an express app running on www.mydomain.com:3000/ . how can i make the app show at www.domain.com and omit the port?
23:46 < livinded> douh: you need to bind it to port 80 rather than 3000
23:47 < douh> ahh, ok, 80
23:47 < douh> thanks :D
23:47 < livinded> that requires running it as root and then dropping privs to make it not run as root
23:47 < EhevuTov> douh, you can just admit the port call, IIRC
23:47 < livinded> once the socket is bound and listening you don't need to be root anymore but you can't bind to a port below 1025 without root privs
23:47 < jocafa> http://onteria.wordpress.com/2011/05/31/dropping-privileges-using-process-setuid-in-node-js/
23:49 < douh> livinded, i don't quite know the procedure to do that
23:49 < douh> could you elaborate?
23:49 < timeturner> follow jocafa's link
23:49 < AAA_awright> Or just setup iptables to route 80 -> 8080
23:49 < livinded> AAA_awright: lol, so hacky
23:50 < AAA_awright> :>
23:50 < jocafa> http://i.qkme.me/4lpl.jpg
23:50 < livinded> I need to look into node's setuid and setgid, cursious if it's done properly and sets the supplemental groups as well
23:56 < timeturner> I kind of actually don't understand how it is legal to "remain" bound to a port that can only be bound to with root privileges
23:56 < timeturner> why isn't there a system error when dropping privileges and staying bound to a root port
23:57 < livinded> timeturner: because it assumes that if it was bound as root it should be permitted
23:57 < deoxxa> timeturner: opening a socket descriptor and binding it to a port are two completely separate operations
23:57 < deoxxa> timeturner: you only need root privileges to do the latter part, so you still have the socket descriptor around
23:59 < timeturner> so when privileges are dropped, a socket descriptor is reopened to the port that is already bound from the time that the node process was running as root?
23:59 < deoxxa> nope, it still has the socket descriptor
23:59 < deoxxa> it doesn't go away
--- Log closed Sat Aug 25 00:00:08 2012
