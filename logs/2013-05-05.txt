--- Log opened Sun May 05 00:00:44 2013
00:17 < grobot> owen1 the Ubuntu docs on cron are well written for humans
00:18 < grobot> nothing wrong with man cron either, https://help.ubuntu.com/community/CronHowto is a good intro and covers usage simply incl /etc/cron.d and other such helpful stuff
00:22 < owen1> grobot: sweet. man cron was not enough (at least for me)
00:36 < LoGabr> Anyone familiar with express sessions: I am trying to pass information from redis to authenticate users connecting to via websockets. I have my cookie in the form of "s:fgkjsdfgkl...~140 characters...ssdfgsdfg" but it looks like redis has them in form of "sess:jsdfgkl...~20 characters...gfs". Is there middleware or a package on npmjs to go between these two forms?
00:37 < owen1> first problem with cron. how to test them? it's too slow to wait 1 minute. it will take me days..
00:38 < LoGabr> it looks like some people may have been using parseSignedCookie(cookie, secret) to get the value redis stores, but that no longer exists. I can't find it in the package cookie-signature, either.
00:38 < grobot> owen1, cron should execute the task identically to when you run it in console, so test your script in console, then move it to cron when working
00:39 < owen1> grobot: ok.
00:40 < grobot> there are subtle differences (eg some values may be set in interactive session only) but don't go looking for that sort of thing unless it actually affects you
00:41 <@isaacbw> you don't have to worry about cron not working owen1 
00:41 <@isaacbw> it's about as battleworn as it can get
00:46 < owen1> sweet. running it from console now
00:58 < owen1> isaacbw: in my case i want to kill the process that started a minute ago. i added pkill <process-name> && node path-to-index.js  but i don't think my process is running. i don't see it in 'ps'
01:01 < owen1> i can do the pkill command in a bash script, but it would be nice to have it in the cron and save me from the added file
01:06 < owen1> not working from the terminal either
01:07 < owen1> so maybe the second command doesn't wait for the pkill to finish. 
01:09 < owen1> trying with || 
01:12 < owen1> works
01:38 < bingomanatee> evening node!
01:38 < bingomanatee> I'm having some problem with jsdom on ubuntu
01:38 < bingomanatee> https://gist.github.com/bingomanatee/5519367
01:38 < bingomanatee> ring any bells?
01:40 < harrisonm> i/o errors accessing /usr/bin wish me luck
01:43 < zackiv31> anyone use fs.watch on a directory? for some reason its not working for me on Ubuntu... single file works fine
01:53 <@isaacbw> ubuntu ubuntu ubuntu
01:55 < essial> So, is there a simple way to defined signed 8/16 bit values besides creating 1-element Int8/Int16 arrays?
01:57 < bingomanatee> I am also having issues with contextify, on ubuntu
02:04 < demonii> anyone willing to help test something, in node.js, socket.io and ext.js?
02:06 < mscdex> essial: look at how the Buffer methods do signedness
02:08 < essial> mscdex: it appears that it handles it by representing it outside of javascript completely :p
02:09 < essial> but i could just be reading the source wrong.. i mean what i'm doing works.. it's just wordy
02:12 < mscdex> ?
02:12 < mscdex> essial: https://github.com/joyent/node/blob/v0.10/lib/buffer.js#L706
02:13 < mscdex> essial: ditto for readInt8 right above it
02:14 < mscdex> basically set 0x80 for 8-bit and set 0x8000 for 16-bit
02:31 < bingomanatee> arg - solved the unix thing, required install of make. (how can you have an OS and not bundle make with it? ) 
02:31 < bingomanatee> check out Tuftevision! http://wonderlandlabs.com/experiments/tuftevision/google_image_view
02:31 <@Nexxy> sometimes you don't want build tools on production environments
02:35 < niggler> isaacbw did you finally let go of arch?
02:35 <@isaacbw> of course not
02:36 <@isaacbw> arch 4 lyfe
02:36 < Havvy> Or Chakra, which is based on Arch.
02:37 <@isaacbw> kde is yucky
02:39 <@isaacbw> everyone is beautiful 
02:41 < harrisonm> I would probably use that if I had time for both grad school *and* fiddling with arch
02:43 < qq99> demonii, I'll have a look
02:44 < Technodrome> anything like ruby weekly / ruby inside for javascript?
02:44 < demonii> source code is here: https://github.com/fgheorghe/chatjs
02:44 < Technodrome> like little javascript content portals n stuff?
02:44 < demonii> demo is here: http://grosan.co.uk/chatjs/
02:44 < niggler> Technodrome time to create one
02:44 < demonii> channel is #chat
02:44 < Havvy> niggler: I think Owner is trolling in ##javascript
02:44 < niggler> probably Havvy 
02:45 < niggler> im surprised that name wasn't taken
02:45 < niggler> *by someone less impish many years ago
02:46 < Havvy> Yep, troll.
02:46 < demonii> qq99, it's an IRC implementation, with the above tools, in case you are wondering
02:47 < ningu> the T-roll is what you use way after you turn to the B-roll
03:08 < InezK> hello
03:09 < qq99> demonii, sounds great, I'd love to see it
03:09 < qq99> demonii, I'm working on something fairly similar actually
03:09 < demonii> it's on the link, above
03:10 < demonii> if you wouldn't like to see it in action, you can check out the code
03:10 < demonii> do you have a link to your stuff?
03:10 < qq99> demonii, I do, 1 sec
03:29 < Technodrome> niggler:  looks like there is a few out there already 
03:29 < niggler> Technodrome there are
03:30 < niggler> but the fact that you spent more than an hour searching means none of them are popular
03:30 < niggler> incidentally, jsallthethings.com isn't taken
03:30 < niggler> maybe you should use that as the name?
03:30 < Technodrome> maybe you should hop up off breh 
03:30 < Technodrome> i didn't spend an hour looking
03:31 < niggler> ah
03:36 < Technodrome> niggler: gotta be real with it! can't be having no fakes around here 
03:36 < niggler> seriously Technodrome a curated list of javascript and nodejs libraries would be awesoke
03:36 < niggler> *awesome
03:37 < Technodrome> http://www.echojs.com/ just read this every day! 
03:37 < Aria> Javascript Daily is good.
03:38 < niggler> how do you search?
03:39 < niggler> Aria do you mean dailyjs?
03:39 < niggler> wtf javascript daily's website is javascriptweekly.com
03:41 < Aria> Yes, DailyJS
03:41 < Aria> Derp.
03:49 < raphie> can someone recommend an "API framework"? I've used express a lot, but I don't need all that power. all I want is to define my models, write a bit of validation and auth code, and have it automatically serve a RESTful API
03:53 < Aria> hapi
03:53 < Aria> ?
03:57 < raphie_> Aria: hapi looks pretty neat. did a little research, and deployd looks even better
04:34 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:35 < rvagg> hope you all read and absorbed the latest dailyjs post!
04:36  * Bergle_2 goes and looks
04:37 < Havvy> No?
04:38 < rvagg> you should
04:41 < Havvy> Something about this thing called LevelDB?
04:41 < rvagg> yar
04:50 < Astraea> Hi. I'm using Express.static to serve files from  a resources directory, but they don't have the right mime types.
04:51 < Astraea> Specifically, I need videos (mp4, webm, and ogv) to serve with the proper mime types.
04:51 < Astraea> Any help?
04:53 < voidpirate> anyone make an irc bot in node?
04:53 < voidpirate> I am looking for a game to implement in mine
04:56 < gluxon> voidpirate: http://github.com/gluxon/wolf.js
04:56 < gluxon> Not complete, but it is a game bot.
04:56 < gluxon> node-irc is also a bit slower than I thought it would be.
04:56 < gluxon> There is a slight lag with interpreting lines.
04:56 < gluxon> Can't say if it's Node.js asynchronous not being tuned right or node-irc itself.
04:57 < gluxon> voidpirate: If you end up using a different IRC library, let me know.
04:58 < voidpirate> I am using this right now https://github.com/martynsmith/node-irc
04:58 < gluxon> So same one I used in wolf.js
04:58 < voidpirate> yep
04:58 < minibn> what does use function actually do in connect
04:58 < gluxon> minibn: The declarative?
04:59 < minibn> declare what
04:59 < voidpirate> gluxon: where is your bot running?
04:59 < gluxon> voidpirate: It's not at the moment. I can start it up in #wolf.js if you'd like.
04:59 < voidpirate> sure 
04:59 < minibn> why dont use require
04:59  * voidpirate has to take his dog to the bathroom and will be back in 2 minutes
05:01 < passcod> voidpirate: there's https://github.com/master5o1/jsBot too
05:07 < voidpirate> back
05:10 < Astraea> Does anyone know how to use the Mime module? I'm using mime.define({'video/ogv':['ogv']}) but express.static is still serving the file as text/html
05:13 < niggler> Astraea did you manually confirm it was there by running mime.lookup?
05:14 < Astraea> Yes. But I think that it may be using a different mime? I'm reading that express is (through connect) built on mime, but I don't know how to access that.
05:14 < niggler> according to mime.types it should be video/ogg by default
05:14 < Astraea> So I'm doing mime = require('mime'); mime.define(yada yada)
05:15 < Astraea> And my static server line just looks like this:             server.use('/rsc', express.static(__dirname + '/public/rsc'));
05:16 < niggler> where is mime required
05:17 < Astraea> After all other requires, but before the rest of the logic.
05:17 < niggler> no i meant by express
05:18 < Astraea> I don't know. I just know that express is built on connect, and connect has mime as a dependency.
05:18 < niggler> expresses appears to require send, which requires mime
05:18 < shesek> require('express/node_modules/send/node_modules/mime')
05:19 < niggler> im surprised there's no easy way to do this in express
05:20 < Astraea> Okay, that changed something, but I'm still having problems.
05:21 < Astraea> I have three files (<source src="blah.codec"></source)
05:21 < SiGe> Man Adium sucks, the default theme + the bundled one are unreadable :|.
05:21 < Astraea> Webm, ogv, and mp4. Now the mp4 and ogv are still being transferred with 'text/html',
05:22 < Astraea> but the webm now says "Media resource http://yadayada/video.webm' could not be decoded (in the web console)
05:22 < Astraea> (The firefox web console outputs that message when I load the page)
05:28 < SiGe> Hrmmm, Much  better.
05:29 < Astraea> So I wrote a simple brute for function: server.use('/rsc', function(req, res, next){      res.setHeader('Content-Type', mime.lookup(req.path)); next()        })
05:30 < Astraea> so I do: server.use('/rsc', express.static(__dirname + '/public/rsc'));
05:30 < Astraea> And then: server.use('/rsc', function(){ that other junk})
05:31 < Astraea> Now the net panel reports the proper mime type, but the file is never sent. It's like it's waiting, or perhaps sent an empty file.
05:42 < ashnur> i need advice about exiting from a node process. I want to send `not ok` for npm tests, but if I do a process.exit(1) it gives back an Unknown signal: 1, and a whole backtrace. I would like to not have that, as the backtrace I am interested in is shown before that already (but that is just normal output to stdout, because it comes from somewhere else)
05:45 < macbn> is it ok to use for( var in var ) in node
05:45 < macbn> i heard from google that its evil
05:45 < Havvy> >> for (var name in {a: 1, b: 2}) { console.log(name); }
05:45 < purr> Havvy: undefined; Console: 'a', 'b'
05:46 < runvnc> >> console.log('hello');
05:46 < purr> runvnc: undefined; Console: 'hello'
05:46 < runvnc> sweet
05:46 < mashlol> >> "hello";
05:46 < purr> mashlol: (string) 'hello'
05:46 < Havvy> macbn: It's perfectly fine.
05:47 < Havvy> Just note that the `var name` is being hoisted to the top of the function via the usual function hoisting rules.
05:48 < macbn> what is hoisting?
05:48 < Havvy> !hoisting
05:48 < Havvy> !hoist
05:48 < Havvy> :(
05:49 < runvnc> !scope
05:49 < Havvy> !function scope
05:49 < runvnc> !does this even do anything
05:49 < Havvy> runvnc: Yes.
05:49 < runvnc> !functions
05:49 < Havvy> For example, I know this works:
05:49 < Havvy> !alert
05:49 < Havvy> Oh, wait, I'm not in ##javascript
05:49 < Havvy> Nevermind.
05:50 < runvnc> lol
05:50 < Havvy> http://johnkpaul.com/blog/2013/02/11/what-is-hoisting-really/ https://developer.mozilla.org/en/JavaScript/Reference/Scope_Cheatsheet
05:52 < macbn> ok
05:52 < macbn> thank you
05:57 < macbn> is for in async or sync?
05:57 < SiGe> Havvy: Nice one, didn't know about hoisting, Not a JS developer though so no biggy :D
05:57 < SiGe> It's Sync ( I think )
05:58 < macbn> means that it is a blocking
05:58 < SiGe> For should be sync :| At least that's what my intuition tells me
05:58 < SiGe> Yeah it should block.
05:58 < Havvy> Everything in Javascript's spec is syncronous.
05:58 < macbn> i had experience where for (var i = 0 ... is async
05:59 < Havvy> And for loops are part of JavaScript.
05:59 < macbn> it goes to the next block before finishing my loop
05:59 < Havvy> Technically setTimeout, setImmediately, setInterval, and the event loops are not part of JavaScript.
06:03 < macbn> http://stackoverflow.com/questions/5050265/javascript-nodejs-is-array-foreach-asynchronous
06:03 < macbn> maybe i should just use forEach
06:04 < ashnur> :(
06:08 < macbn> div(style=(some[var].score || 0), class=some[var].color || '')
06:08 < macbn> can I do this in jade
06:08 < macbn> i want to say
06:09 < macbn> if (some[var].score is undefined put 0
06:20 < ningu> has anyone here tried trace.gl? other than ericelliott I suppose. just wondering if you found it to be worth the money.
06:21 < ningu> for the price I might just give it a try...
06:21 < Havvy> trace.gl?
06:22 < ningu> Havvy: that's the domain, you can go check it out.
06:54 < Havvy> ningu: Looks like a good buy to me.
06:54 < ningu> yeah, me too
06:54 < Havvy> Get it. And tell me how it works.
06:55 < ningu> I'm going to wait until I'm less tired :)
06:55 < Havvy> Kk.
07:19 < sinclair-work> yay, typescript 0.9 ftw
07:20 < Havvy> sinclair-work: Tell me when it hits 1.0
07:20 < sinclair-work> Havvy: generics are cool mate
07:21 < Havvy> sinclair-work: Very.
07:21 < sinclair-work> Havvy: have you tried out TS generics yet?
07:21 < Havvy> No.
07:21 < sinclair-work> any reason?
07:21 < Havvy> I'm waiting for Typescript to hit a stable release before using it.
07:21 < sinclair-work> Havvy: leaving things a bit late :P
07:21 < standoo> typescript
07:22 < sinclair-work> Havvy: i've been busy plugging this in https://npmjs.org/package/typescript.api
07:22 < sinclair-work> Havvy: working from the TS 0.9 alpha
07:22 < Havvy> So many good modules...
07:23 < sinclair-work> all the other TS projects on npm are rubbish mate, and no one is maintaining them, so i wrote my own
07:24 < Havvy> Do you have a `typescript some-file.ts` program?
07:24 < sinclair-work> Havvy: want to try it out?
07:24 < sinclair-work> just post javascript in there, its all good
07:24 < Havvy> Not until TS1.0
07:25 < sinclair-work> you can grab the source, compile and run that in node if you want
07:25 < sinclair-work> though the api
07:25 < sinclair-work> *through
07:25 < sinclair-work> Havvy: hangon mate
07:25 < sinclair-work> Havvy: let me show you something
07:29  * Havvy is hanging.
07:29 < sinclair-work> Havvy: http://pastebin.com/pLSdv9sE
07:30 < sinclair-work> Havvy: sorry, just had to quickly code it up 
07:31 < sinclair-work> quite nice to debug with over http, dynamically compile on the fly, no need to watch the directory for changes, i am working on better exception handling tho
07:32 < Havvy> Is that a public static Main?
07:32 < standoo> sinclair-work: you using supervisor?
07:32 < Havvy> Also, you send a string, not json. :P
07:32 < sinclair-work> i know
07:33 < sinclair-work> standoo: nope, supervisor isn't something i need
07:33 < sinclair-work> compile on the fly ftw
07:33 < Seventoes> anyone know the best tool for testing mongoose models?
07:34 < Seventoes> for stubbing mostly
07:34 < Havvy> sinclair-work: Did you see https://trace.gl ?
07:35 < sinclair-work> Havvy: might be nice for runtime debugging
07:36 < sinclair-work> let me show you something else
07:36 < Havvy> Yes, that's what it for.
07:36 < Havvy> *it's
07:39 < sinclair-work> Havvy: http://pastebin.com/HCrGPE2w
07:40 < sinclair-work> Havvy: have a guess what this does :)
07:41 < SomeoneWeird> While using ejs and express, is there a way to set render parameters without passing them when rendering?
07:41 < sinclair-work> Havvy: it outputs this.. http://pastebin.com/WET1MAH8
07:42 < Havvy> SomeoneWeird: I can't say I know of a way other than that.
07:42 < SomeoneWeird> mm yeah
07:42 < SomeoneWeird> it doesn't really matter
07:43 < Havvy> sinclair-work: So it tells you are the reflection data...
07:43 < SomeoneWeird> it's just I have to pass a variable every time i render a view, and if I could do it in middleware that'd make it a whole lot cleaner
07:43 < sinclair-work> Havvy: yeah
07:43 < Seventoes> SomeoneWeird: I know hbs uses req.locals for all local view variables
07:43 < sinclair-work> Havvy: I don't know a lib that does the same thing at the moment, plus, it works for javascript, because, javascript is typescript
07:44 < SomeoneWeird> Seventoes, will look, thx
07:44 < Seventoes> SomeoneWeird: dunno if ejs acts the same, but i just use middleware that sets req.locals.currentUser for example on all requests
07:44 < sinclair-work> but anyway
07:44 < SomeoneWeird> yeah, that's what i'll be doing
07:44 < SomeoneWeird> more or less
07:44 < Seventoes> then i get {{currentUser}} in all templtes
07:44 < Havvy> sinclair-work: Yeah, but I don't generally need to know what interfaces, classes, ect. exist.
07:44 < Seventoes> templates**
07:44 < sinclair-work> Havvy: ah ok
07:44 < Havvy> Still, nice to know you can get them programatically.
07:45 < Havvy> I guess it would help for auto-doc.
07:46 < sinclair-work> Havvy: among other things
07:47 < Havvy> I think that trace.gl is more useful than the typescript reflection. ;)
07:47 < SomeoneWeird> Seventoes, awesome, that works, thanks :)
07:47 < Seventoes> SomeoneWeird: woot!
07:47 < SomeoneWeird> *res.locals, though
07:48 < Seventoes> ah
07:49 < sinclair-work> Havvy: they serve two completely different purposes tho, one is debugging, the other is reflection
07:49 < Havvy> Yep.
07:50 < Havvy> Though there's a *lot* of reflection going on in trace.gl. ;)
07:50 < mh`> on a related note, can someone recommend a module that will let me call a function to trigger some sort of heap summary
07:51 < mh`> i have a memory leak in an unimportant app that is therefore run on heroku.. so any normal method (to me) of figuring out what is causing the leak is out
07:52 < sinclair-work> Havvy: ah ok
07:52 < snuggl> mh`: https://github.com/felixge/node-memory-leak-tutorial
07:53 < mh`> erm
07:53 < mh`> that's basically doing it ~manually
07:53 < mh`> and there's a lot of 3rd party modules included,
07:53 < mh`> i can't (won't) go edit all the constructors :)
07:53 < mh`> surely there are better ways to profile a running node vm?
07:54 < mh`> i can look further for better modules, was hoping someone had experience with one
07:54 < snuggl> ah i just read your second line
07:55 < mh`> :)
07:56 < mh`> it's a stupid problem; it's just a campfire bot, but we use it heavily and this smallish memory leak = it needing to be restarted every few hours
07:56 < mh`> i started logging out calls to process.memoryUsage() every minute
07:57 < mh`> can watch it grow enough that I know i'll be able to spot it if i had some sorted list of objects-by-size or something
07:57 < mh`> this looks promising: http://blog.nodetime.com/2013/02/memory-profiler-update.html
07:57 < mh`> was linked from the github project you linked me
07:57 < mh`> so ty :)
07:58 < mh`> this too https://github.com/lloyd/node-memwatch
08:00 < Torsten> is it possible to set NODE_ENV programmatically (e.g. depending on the path or on ip the app is running on)?
08:06 < paultman> Hello from Bangkok, Thailand :)  I wanted to reach out to other devs for the latest in DB usage by node.js devs.  I started with mongodb, but now that i'm using it more, specifically with nested documents, I'm having second thoughts, then I read about data integrity issues...  I'm wondering if there is a newer DB that devs are using or if the goto is still mongodb
08:06 < bnoordhuis> mh`: maybe try taking snapshots with node-heapdump and compare them in chrome
08:06 < mh`> yeah bnoordhuis, thx.. that's plan b, going to try this nodetime thing first
08:06 < mh`> i'm skeptical that it'll work well as easily as it appears :)
08:07 < Torsten> just for the protocol: process.env.NODE_ENV = 'development'; works ;)
08:08 < paultman> anyone... anyone.. bueller... bueller...
08:08 < mh`> paultman: too vague a question.. if you mean something that works like mongodb (document-oriented db)
08:08 < mh`> i'm not aware of anything else that isn't equally scary
08:09 < mh`> if you mean a relational sql db
08:09 < paultman> opps, yeah, sorry for being vague
08:09 < mh`> obviously mysql, postgres, etc
08:09 < paultman> i love using json docs
08:09 < paultman> so mongo was a nice fit
08:09 < paultman> and in most of the tuts people use mongo with node
08:10 < paultman> however recently i've been reading about lots of deficiencies of mongo
08:10 < paultman> and wanted to check with other devs is they've moved to some next gen document oriented db
08:11 < paultman> of if most are still with mongo (simply don't want to sink so much time/resources) into an out of vogue technology (or soon to be)
08:11 < paultman> *or
08:12 < mh`> well if the most important thing to you is being on whatever is en vogue or trendy, you might look into using like NuoDB with typescript on ms azure?
08:12 < mh`> ;/
08:12 < paultman> oh come on, u know what I mean
08:12 < mh`> if you want a json-oriented db, all of the alternatives to mongo will definitely be worse
08:12 < mh`> and mongo isn't fantastic to begin with
08:13 < mh`> so i wouldn't recommend straying
08:13 < paultman> ok
08:15 < paultman> thanks for your feedback mh`
08:15 < mh`> sure, not sure I helped :) there's just no good answer
08:15 < mh`> mongo is really convenient when you're already working with json
08:15 < mh`> but I agree with your concerns about the deficiencies
08:15 < mh`> but unfortunately that's a tradeoff
08:15 < paultman> i've got a growing nested data structure, and was recently thinking to split it up into separate docs rather then nested
08:16 < paultman> with references
08:16 < mh`> generally that's a good idea anyway, it lends better to sharding
08:16 < mh`> also there are hard limits on mongodb documents, although i don't know what that is nowadays
08:16 < mh`> in terms of how many bytes in a single doc
08:16 < paultman> 16meg
08:16 < paultman> i'm fine for that
08:16 < paultman> simply just a bit worried about efficiency
08:16 < mh`> ah it used to be less
08:17 < mh`> in any case, i think you're better off with more, smaller docs
08:17 < paultman> i've got a user object, and a bunch of data under that user
08:17 < mh`> for sharding and other reasons
08:17 < paultman> it's a time management app, so journals, todo list, calendar, all under user
08:17 < paultman> thinking to split up the data into components with foreign keys back to the user obj
08:17 < paultman> doc i mean
08:18 < paultman> yeah, rather then querying/selecting to a big nested object, probably better to make individual/ more specific queries
08:19 < paultman> i just don't know enough about how mongo works under the covers
08:22 < dypsilon> paultman, what do you actually want to know
08:22 < dypsilon> ?
08:23 < dypsilon> also if you want to learn mongodb there are free online courses by 10gen http://education.mongodb.org/
08:23 < dypsilon> you even get a 10gen sertificate if you pass the exams
08:25 < paultman> dypsilon: well I started with mongodb, and am putting all user data under a user object, now i'm getting a bit concerned about efficiency of putting all data components in a nested object and started looking for info on line regarding data modeling
08:25 < paultman> and i started reading lots about deficiencies of mongo
08:25 < paultman> and so I wanted to hop on here, and see if infact it's still the goto db for document oriented db storage by other node.js devs
08:26 < Havvy> paultman: AFAIK, it still is.
08:26 < paultman> i started with node.js a while ago, so the things that were current when i started, might not be current now
08:26 < Havvy> But yeah....Node is moving fast.
08:26 < dypsilon> paultman, as far as schema design goes, you can nest everything in one document, but it's actually not designed to be used like this. You might want to split your data in several documents, depending on how your application is accessing this data.
08:27 < Havvy> Probably because of how easy it is to trade libraries.
08:27 < paultman> dypsilon: i was thinking this.  I remember when i first looked at mongoose, it was not made for nested object
08:27 < paultman> I mean u can use it for nested, but it 
08:27 < paultman> 's a bit hacky
08:27 < paultman> i'm using native-mongo btw
08:29 < paultman> thanks dypsilon, yes, I am now splitting up my data.  Like I said, just want to get a pulse with the community that mongo is still very popular among devs (as my research was poking holes in mongo)
08:29 < dypsilon> paultman, let's put it this way. 1. Node.js has a good native driver supported by 10gen. 2. Most node.js tutorials are based on mongodb, one way or another. 3. Mongodb is very easy to use with node because everything is JSON. Just more intuitive.
08:29 < dypsilon> At the end of the day it depends on your task. No one would recommend using mongodb for session management or caching.
08:30 < sysx1000> yet another mongoose-trouble chat? :)
08:30 < dypsilon> But afaik there is no better alternative for your every day data storage needs.
08:30 < paultman> dypsilon : agreed, thanks for confirming that it's still popular
08:30 < dypsilon> paultman, you are welcome
08:30 < paultman> also that it makes sense to flatten out my data, linked with references
08:31 < paultman> lol, not a mongoose trouble chat, i ditched that I idea the first day i started using mongoose :p
08:31 < sysx1000> :)
08:33 < dypsilon> paultman, here is a secret hint for you concerning schema design
08:33 < dypsilon> 1. http://youtu.be/ZjwCzyqKVdY
08:33 < dypsilon> 2. http://youtu.be/6XE3wZCPiZ8
08:34 < paultman> dypsilon: awesome, that's really what i'm looking for (having decided to stick with mongo) is feedback/ideas on good schema design
08:35 < dypsilon> paultman, yeah, those videos are directly from mongodb devs so that's how they designed it.
08:35 < paultman> wonderful, thanks!
08:35 < dypsilon> you are welcome
08:40 < rclsilver> hi... i would like to install an node.js application (node-xpmm-bosh) in openshift, but when i use npm, it fails because with openshift we can't write in $HOME
08:40 < rclsilver> any way to specify an other storage directory?
08:49 < bahaaldi_> Hi guys, I'm looking for a XML to JSON converter lib
08:49 < bahaaldi_> I tried xml2js
08:50 < bahaaldi_> but it keeps grouping node of same name in a JSON array, and I can't disable it
08:50 < Seventoes> what did you want it to do?
08:51 < bahaaldi_> ex : let say I have <a><b/><c/><b/></a>
08:51 < bahaaldi_> I want 
08:51 < bahaaldi_> {a : { b:'', c:'', b:''} }
08:51 < bahaaldi_> and not
08:51 < Seventoes> that's not possible
08:51 < Seventoes> a.b canonly be one thing
08:52 < bahaaldi_> ok
08:52 < Seventoes> if there are multiple a.b's in the source XML, it either has to be an array in JSON or overwrite the old value
08:52 < agu10^> how do I know which version of express or other dependencies i have_
08:52 < agu10^> ?
08:52 < Seventoes> agu10^: npm list
08:53 < bahaaldi_> i was trying to transform it into JSON for convenience with javascript
08:53 < bahaaldi_> but maybe I should parse XML in javascript directly
08:53 < Seventoes> yep, you should :P
08:54 < agu10^> thanks! :D
08:54 < Seventoes> there's no reason to go to json if you're what's going to be consuming the XML anyways
08:54 < agu10^> XML is bad because it's a more complex structure
08:54 < agu10^> you can have children AND properties
08:55 < Seventoes> yeah, XML doesn't always translate directly to JSON
08:55 < agu10^> err attributes
08:55 < Seventoes> so if you're reciving XML, process the XML
08:55 < Seventoes> recieving**
08:55 < agu10^> JSON is a simpler structure at least
08:55 < bahaaldi_> do you know a good XML parser for client side javascript ?
08:55 < agu10^> no
08:55 < geNAZt> client side ?
08:55 < agu10^> any would do
08:55 < agu10^> maybe the DOM has one
08:56 < Seventoes> if you're in the browser anyways just made it into a DOM object and traverse it like you would the page itself
08:56 < geNAZt> http://www.w3schools.com/dom/dom_parser.asp
08:56 < bahaaldi_> I'm not a big fan of the old way, eg, new ActiveXObject("Microsoft.XMLDOM");....
08:56 < bahaaldi_> ok
08:56 < Seventoes> use DOMParser
08:56 < Seventoes> https://developer.mozilla.org/en-US/docs/DOM/DOMParser
08:57 < Seventoes> even IE supports XML
08:57 < bahaaldi_> thanks guys for your help :)
09:03 < agu10^> Hey! if I handle multiple vhosts in node.js and one of them crashes, will all others fall down also?
09:04 < geNAZt> agu10^: yes
09:04 < zomg> agu10^: if you use a single node process to do it, what do you think is going to happen when the only process that handles them crashes? =)
09:04 < agu10^> how do i avoid that? i want some separation so if one domain doesn't work fine, others will be unaffected
09:06 < geNAZt> well use forks
09:06 < geNAZt> each vhost => one child process
09:10 < dypsilon> agu10^, just put nginx infront of your node.js processes and be done with it
09:11 < agu10^> dypsilon, why not make a node.js reverse proxy?
09:11 < agu10^> is nginx better?
09:11 < FooBarWidget> nginx is not "better", it's a different tool
09:12 < FooBarWidget> it can be used as load balancer
09:12 < agu10^> oh i see
09:12 < dypsilon> agu10^, nginx is build exactly for what you want to do and it's done, stable and used effectively by the largest websites
09:12 < geNAZt> nginx doesnt save you from the vhost crash thing oO
09:13 < dypsilon> geNAZt, if you route vhosts to different processes it does
09:13 < agu10^> i see
09:13 < geNAZt> yes but he has an app which has multiple vhosts in it
09:13 < agu10^> can node make processes without taking different ports?
09:13 < geNAZt> and not 3 apps 
09:13 < dypsilon> geNAZt, you are right, i had to clarify this
09:13 < agu10^> geNAZt, no i don't
09:14 < geNAZt> Hey! if I handle multiple vhosts in node.js and one of them crashes, will all others fall down also?
09:14 < agu10^> i haven't created the websites yet
09:14 < geNAZt> its better to create an app for each vhost
09:14 < agu10^> yes
09:14 < geNAZt> and to manage them with nginx / haproxy or varnish
09:14 < agu10^> I will do that.
09:15 < dypsilon> +1
09:16 < FooBarWidget> geNAZt: if you worry about that, you should run multiple node processes
09:16 < FooBarWidget> one node per vhost
09:16 < FooBarWidget> process crashes are isolated from other processes
09:17 < FooBarWidget> the OS guarantees that
09:17 < geNAZt> i know
09:18 < dypsilon> :)
09:18 <@konobi> node-panic++
09:22  * dypsilon looks up node-panic++ on npm and finds a package
09:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
09:49 < panos> Hello everyone
09:49 < panos> I have a question
09:49 < panos> I need to read binary data from a socket
09:49 < geNAZt> yes
09:49 < panos> they send me data in this format:
09:50 < panos> number of bytes to follow, null byte, data
09:50 < geNAZt> yes
09:50 < geNAZt> you can do this with the buffer class
09:50 < panos> but the data comes in chunks
09:50 <@konobi> there are libraries that can help you manage binary streams
09:51 < panos> is there anything in npm that will reasemble messages for me?
09:51 < geNAZt> is there much binary data ?
09:51 < panos> it can be a lot
09:52 < panos> the content is xml
09:52 < geNAZt> do the api say how many bytes are given for the content length ?
09:52 < panos> but gziped
09:52 < panos> they say at the begining
09:53 < geNAZt> so its seperated through a null byte ?
09:53 < panos> yes
09:55 < geNAZt> buffer have a array interface so you can search for the null byte
09:55 < panos> yes this is what I plan to do
09:56 < panos> and then keep reading until I get as many bytes as they say they will be sending
09:56 < geNAZt> yes
09:56 < panos> I was just wondering if there is something like this already out there
09:59 <@konobi> panos: https://npmjs.org/search?q=binary+stream
10:00 < panos> konobi: Thanks mate, I will look into that
10:00 < geNAZt> panos but you already have a stream or ?
10:02 < panos> geNAZt: Let me give you an example
10:02 < panos> geNAZt: I get something like this
10:02 < panos> geNAZt: 32(null)blah blah blah
10:03 < panos> geNAZt: blah blah blah
10:03 < geNAZt> i know
10:03 < panos> geNAZt: and it goes on till I have 32
10:03 < geNAZt> but you get them via a net interface (nodejs) 
10:03 < panos> yes
10:03 < geNAZt> so you get buffers
10:03 < panos> yes
10:03 < geNAZt> and you want to search for the null byte which is 00 in the buffer
10:04 < geNAZt> and everything that is infront of the 00 is the length to read for the data
10:04 < geNAZt> so i do not get why binary streamers should help you oO
10:04 < panos> the thing is
10:05 < panos> the data will come in several chunks
10:05 < panos> meaning several data events
10:05 < geNAZt> y and ?
10:05 < panos> so I have to reassemble it back to one buffer before I attempt to gunzip it
10:06 < sysx1000> Huh, I am going crazy with these callback things - deeply nested, and code looks like Cthulhu-calling spell
10:06 < panos> I was just wondering if someone has already done it
10:06 < zomg> sysx1000: use async (a lib)
10:07 < sysx1000> zomg: thx, I use async. Pretty good thing
10:10 < zomg> sysx1000: and you still have deeply nested hard to follow callbacks somehow? :D
10:10 < sysx1000> complex mongoose update thing
10:11 < sysx1000> update inside callback then another update in callback %)
10:11 < sysx1000> I have tried to use async there, but haven't found comprehensive solution
10:12 < sysx1000> well, not quite bad, anyone, who involved in Node.JS development should read these callbacks easily ;)
10:12 < zomg> sysx1000: iirc there was some method in async to make a sequence of callbacks if the previous succeeded, maybe something like that
10:13 <@konobi> series
10:14 -!- mode/#Node.js [+o xyxne] by ChanServ
10:18 < geNAZt> panos: http://hastebin.com/jayemudagi.js 
10:22 < mkozjak> can i pass an incremented argument to a function? in example: arg = 1; someFunction(arg++); 
10:23 < geNAZt> >> arg = 1; function test(a) { console.log(a); }; test(arg++);
10:23 < geNAZt> no you cant
10:24 < mkozjak> maybe arg+=1
10:25 < geNAZt> ++args
10:25 < geNAZt> ++variabal <= increase first then make
10:25 < geNAZt> variable++ <= make first then increase
10:28 -!- ServerMode/#Node.js [+oo mbalho tjfontaine] by calvino.freenode.net
10:29 < mkozjak> geNAZt: how do i control the ETIMEDOUT error, can i reduce the default timeout time? is setTimeout enough to be used on the socket for that?
10:32 < geNAZt> net sockets ?
10:32 < mkozjak> yup
10:32 < geNAZt> then yes
10:32 < geNAZt> the setTimeout is enough
10:33 < mkozjak> ok!
10:33 < geNAZt> or do you have a connection that times out before getting initialized ?
10:33 < purr> geNAZt: undefined; Console: 1
10:33 < shesek> fun.
10:34 < geNAZt> wow purr :D calcutation time 10 minutes
10:34 < geNAZt> >> arg = 1; function test(a) { console.log(a); }; test(++arg);
10:34 < purr> geNAZt: undefined; Console: 2
10:34 < geNAZt> ah okay :D
10:34 < mkozjak> geNAZt: it's interesting, since sometimes after the box on which i'm connecting is rebooted i get a CLOSE event, and sometimes not, so that's why i'm also trying with 'timeout'
10:34 -!- ServerMode/#Node.js [+oo mbalho tjfontaine] by calvino.freenode.net
10:35 < geNAZt> well timeout is when the client disconnects but not sends a FIN or so package
10:35 < geNAZt> the server has a time which he waits till he says "sir this connection is dead"
10:36 < mkozjak> geNAZt: yeah, the client actually never sends FIN, so that's why it's strange that sometimes i get a close event
10:37 < geNAZt> it nevers sends FIN but you get Close events ? oO
10:38 < mkozjak> hmm...
10:39 < mkozjak> maybe i'm wrong, but seems like i'd need to check on a connection that's been idle for a few secs to manually close it
10:39 < mkozjak> that way i'm safe
10:39 < geNAZt> well do you have the close event attached in node ?
10:39 < mkozjak> yes
10:39 < geNAZt> okay close event fires in every case
10:40 < geNAZt> with FIN or without
10:40 < mkozjak> well, this one didn't send any FIN, so i still have ESTABLISHED (netstat)
10:40 < geNAZt> close gets fired if the underlying socket gets destroyed
10:40 < mkozjak> even though the client went completely down
10:40 < geNAZt> till the timeout comes
10:41 < mkozjak> i should remove the timeout, then? hmm...
10:41 -!- ServerMode/#Node.js [+o piscisaureus_] by calvino.freenode.net
10:41 -!- ServerMode/#Node.js [+o MI6] by calvino.freenode.net
10:41 -!- ServerMode/#Node.js [+o isaacbw] by calvino.freenode.net
10:41 < geNAZt> no
10:41 < geNAZt> if you disconnect a client and the server does the timeout thing
10:42 < geNAZt> its better to do so then to keep the connection opened forever
10:42 < mkozjak> that's exactly what i need :)
10:43 < geNAZt-laptop> why ?
10:43 < geNAZt-laptop> then you try to send data on a dead connection or ?
10:43 < mkozjak> so basically the first idea that comes to my mind right now is to handle a timeout event and check if the client is alive or not (inside that event) and act according to it (close the server side socket or leave it open (in cases where there's no action on the socket currently happening)
10:44 <@konobi> the OS controls TCP timeouts
10:44 < geNAZt-laptop> well the os decides that
10:44 < geNAZt-laptop> if you get a timeout from your os the connection is dead
10:44 < geNAZt-laptop> in most cases
10:45 < mkozjak> yeah, but for that client (who's log server accepts only one connection to it) i need to clear that 'dead' connection asap
10:45 < geNAZt-laptop> set the timeout lower
10:45 < geNAZt-laptop> so the connection gets kicked out sooner
10:45 < geNAZt-laptop> but it can lead to "timeouts" where no timeouts are
10:46 < mkozjak> ok, i'll set it to 5 secs for tests and use socket.end() inside the timeout event function
10:46 <@konobi> the ietf standard for tcp wait timeouts is 2 minutes
10:46 < mkozjak> yes..
10:46 < geNAZt-laptop> set it low
10:46 < geNAZt-laptop> and look whatz happens
10:47 < geNAZt-laptop> if it is to low you will see it disconnecting (timeout) even with a valid connection
10:47 <@konobi> your socket timeout isn't going to help recycle ports, for example
10:47 < mkozjak> but, before using socket.end() i need to find out if the client is really dead or not. can i check on that without using that external ping module?
10:47 < geNAZt-laptop> well timeout says the client hasnt ack the last package in x time
10:47 < jsmonkey> Hi, I want to scrape some data. Where I need to login etc, so it need to store cookies etc. Just like phantomjs BUT not as an external process but rather in Node. Like node-chimera. Anyone have any experience with this, is chimera good or is there better alternatives?
10:48 < jsmonkey> the node eco system is large...!
10:48 < geNAZt-laptop> so you know it doesnt answer
10:49 <@konobi> jsmonkey: chimera seems good
10:49 < mkozjak> hmm, even though i've set timeout to some low value, connect ETIMEDOUT arrived after 30 secs or something (??? ..)
10:50 < geNAZt-laptop> yes connect timeout
10:50 < geNAZt-laptop> its different
10:50 < geNAZt-laptop> i dont know if you can control the connect timeout in node
10:51 <@konobi> nope
10:51 < mkozjak> aaah :/
10:51 <@konobi> you can't control the actual tcp timeout
10:51 < mkozjak> what the...i'm confused. i get CLOSE after rebooting the client now...
10:51 <@konobi> you're still going to get the OS level timeouts
10:54 < geNAZt-laptop> i dont know if the ETIMEDOUT error is a killing error for a tcp socket
10:54 < geNAZt-laptop> it can be that the connection is still opened after ETIMEDOUT
10:57 < mkozjak> seems like it gets a CLOSE... i'll need to tcpdump the communication so i can be sure
10:57 <@konobi> mkozjak: http://www.loriotpro.com/Products/On-line_Documentation_V5/LoriotProDoc_EN/C3-Introduction_to_Network_Supervision/C3-F8_TCP_Overview_EN.htm
10:57 < mkozjak> so this is okay for now, :)
10:57 < mkozjak> konobi: ok
10:58 <@konobi> different states will fire different events, so you may need to adjust your listeners depending on the state the tcp connection is in
10:59 < geNAZt-laptop> how can i create functions on the fly (wrappers) and set a function name for the trace ?
11:01 < nb-ben> geNAZt-laptop: like so: callSomething(function myCallback() { .... });
11:01 < geNAZt-laptop> no 
11:01 < geNAZt-laptop> i have function test(){};
11:01 < geNAZt-laptop> and i want to wrap it
11:02 < nb-ben> like (function() { function test() {} })(); ?
11:02 < geNAZt-laptop> var fnTest = test; function $dynamicnamehere$() { fnTest.apply(null,[]); };
11:02 < geNAZt-laptop> not anonym
11:03 < nb-ben> you should see in your stacktrace that it was called from fnTest.apply
11:03 < geNAZt-laptop> well i want to see where the wrapper is in the stacktrace
11:03 <@konobi> var foo = function this_is_an_anonfunc (...) { ... };
11:03 < geNAZt-laptop> dynamicly ?
11:03 <@konobi> nope
11:04 < geNAZt-laptop> i have a module that wraps functions for me
11:04 < geNAZt-laptop> and i want to say "hey module give the new wrapper functions a name"
11:04 < geNAZt-laptop> and i dont know how to do it
11:04 <@konobi> not possible i'm afraid, without resorting to the nasty that is eval
11:04 < geNAZt-laptop> urgs eval :D
11:05 <@konobi> but at least with doing it the way i described, it's not anon... but something traceable
11:06 < geNAZt-laptop> but not dynamic
11:07 < geNAZt-laptop> https://gist.github.com/geNAZt/5520510
11:07 < geNAZt-laptop> on line 2 i want to set the function name to $oldfunctionname$Wrapper
11:08 <@konobi> not possible without eval
11:09 < geNAZt-laptop> ok
11:10 < nb-ben> many great things were built using eval
11:11 < geNAZt-laptop> but eval can be evil 
11:11 < geNAZt-laptop> and i dont know about performance issues when using eval
11:11 < nb-ben> children can also be evil
11:11 <@konobi> eval breaks the optimizer
11:11 < nb-ben> but we still use children
11:11 < nb-ben> :D
11:11 < geNAZt-laptop> u "use" children ?
11:11 < geNAZt-laptop> oO
11:11 <@konobi> hentai!
11:12 < nb-ben> I don't use children, but I'm not an eval user either
11:12 < geNAZt-laptop> so eval user = child user ?
11:12 < nb-ben> I am out of this topic
11:13 < nb-ben> jade uses eval tho
11:13 < nb-ben> wonder what that means for them
11:14 < geNAZt-laptop> http://marcosc.com/2012/03/dynamic-function-names-in-javascript/
11:15 < nb-ben> isn't this the same as eval
11:15 < geNAZt-laptop> yes it is
11:16 < geNAZt-laptop> but creating function like this is okay
11:16 < nb-ben> it's like using someone to use children for you
11:16 < geNAZt-laptop> i have seen that in the faster-than-c talk
11:16 < geNAZt-laptop> and i use it for my logger
11:16 < nb-ben> ah I see
11:16 < nb-ben> well hopefully this syntax is more legal than eval
11:16 < geNAZt-laptop> but i dont know the performance of this either
11:17 < nb-ben> it looks the same to me except that it requires more stuff around that string of evaluated text
11:17 < nb-ben> evaluated javascript *
11:17 < geNAZt-laptop> yes
11:17 < geNAZt-laptop> i think i will give the function a static name
11:17 < nb-ben> then why is it better than eval
11:18 < geNAZt-laptop> like Wrapper
11:18 < nb-ben> yes you should
11:18 < geNAZt-laptop> the next trace step should show the original function name
11:18 < nb-ben> because you are debugging your code
11:18 < nb-ben> not your objects
11:18 < nb-ben> if there's some error in any wrapper, it's an error in your code that's the same for all wrappers
11:19 < geNAZt-laptop> well i want a trace like this: test 1:1 testWrapper 5:12
11:19 < geNAZt-laptop> and so on
11:19 < geNAZt-laptop> but test 1:1 Wrapper 5:12 is okay
11:19 < geNAZt-laptop> so i can see that the function is wrapped
11:19 < geNAZt-laptop> thats the only goal
11:20 < nb-ben> see, we found a solution to the problem by accepting the problem to actually not be problematic
11:20 < geNAZt-laptop> no it wasnt problematic
11:20 < nb-ben> or maybe we did that because of the lack of accepted solutions
11:20 < geNAZt-laptop> but i would be nice to have :D
11:21 < geNAZt-laptop> eval in this case is no solution :D
11:21 < nb-ben> I won't be mad at you if you use eval
11:21 <@konobi> geNAZt-laptop: you could always write them out to a file and then require() them
11:21 <@konobi> evil though
11:22 < geNAZt-laptop> yes but then i have to touch the disc
11:22 <@konobi> and require is blocking
11:23 < geNAZt-laptop> yes on the first load
11:23 < geNAZt-laptop> on every other it should read from cache or ?
11:23 < nb-ben> yes
11:23 < nb-ben> I would just eval it instead of going this extra mile of weirdness
11:24 < geNAZt-laptop> well i gave the function a static name
11:24 < nb-ben> cluttering everything around your project to achieve this naming convenience
11:24 < geNAZt-laptop> its okay
11:24 < geNAZt-laptop> i only need it for seeing if it is wrapped or not
11:25 < geNAZt-laptop> did someone work with multiple interfaces and expressjs ? how can i bind expressjs to more than one interface / ip ?
11:29 < snuggl> geNAZt-laptop: never used it, but the common way to bind to all available adresses is to listen at 0.0.0.0
11:31 < geNAZt-laptop> yes to all
11:31 < geNAZt-laptop> but i want to bind to 2 public interfaces
11:31 < geNAZt-laptop> but the box has a internal ip too
11:34 <@konobi> call listen more than one?
11:34 <@konobi> *once
11:35 < geNAZt-laptop> it works ?
11:37 <@konobi> TIAS
11:38 < geNAZt-laptop> it only works for the first listen
11:39 < geNAZt-laptop> the second listen doesnt accept connections
11:42 <@konobi> geNAZt-laptop: ah... i see... look at the API reference for app.listen
11:43 <@konobi> so createserver and then call listen on it for each IP
11:45 < geNAZt-laptop> well i did and it doesnt work
11:45 < geNAZt-laptop> it accepts requests on the first ip
11:45 < geNAZt-laptop> but not on the second one
11:45 <@konobi> geNAZt-laptop: did you read that section of the docs?
11:46 < minibn> what is the best way to implement utilities helper
11:46 < minibn> like common utils function
11:46 < geNAZt-laptop> the docs from nodejs doesnt tell me it does work or it doesnt oO
11:46 <@konobi> geNAZt-laptop: the express docs
11:47 < geNAZt-laptop> yes they build a new http server for each ip
12:02 <@konobi> yes, so you want one http server for multiple ips
12:22 < rhalff> Hi, I have some code that serves a resized image, everything works fine except (in chrome) the connection seems to stay open. my script ends with res.end(data, 'binary') and the browser receives a 200 http code.
12:23 < rhalff> so the image is already there and I will send nothing more but that image (except for other request for different images from the same browser), should I somehow force close the connection ?
12:24 < rhalff> The image is there, but I keep seeing that waiting thingy (forgot what it is in english)
12:25 <@konobi> sent a correct content-length?
12:43 < squeakytoy> anyne can recommend a promise frameowkr?
12:43 < squeakytoy> framework
12:47 <@konobi> none
12:47 <@konobi> and never
12:48 < beg> hey guys, anyone here working with sockets.io? How would one keep track if someone is already logged in easily?
12:48 < squeakytoy> konobi, what do you mean?
12:48 < beg> the .get() is asynchronous and I don't like writing functions inline
12:48 <@konobi> squeakytoy: promises are very troublesome
12:48 < squeakytoy> wow, really?
12:49 < squeakytoy> first person who says something negative about them
12:49 < squeakytoy> konobi, can you elaborate why?
12:49 < Soarez> I can make second then
12:51 <@konobi> squeakytoy: we removed them node years ago... i think substack or max have an article about why they bad
12:52 < squeakytoy> " we removed them node years ago" <-- in node?
12:52 < squeakytoy> or "more"?
12:52 < rhalff> konobi, no I'm not, I'm sending the size of the original image, thanks :-)
12:53 <@konobi> in node itself
12:53 <@konobi> squeakytoy: http://www.futurealoof.com/posts/broken-promises.html
12:53  * dypsilon still thinks promisses should be in the core some day
12:53 < squeakytoy> dypsilon, why?
12:53 < dypsilon> squeakytoy, because they suck in userland
12:56 < squeakytoy> konobi, have you read the article?
12:57 < dypsilon> I understand the initial decision to push them out into userland, but the problem ist, that it's really hard to create good flow control api outside of the core
12:57 <@konobi> squeakytoy: yup... there was another with more technical detail
12:59 < geNAZt> so it was more a meta decision against promises ?
13:00 < geNAZt> because you now have a ecosystem that can better be plugged together ?
13:00 < squeakytoy> konobi, this article doesn't bash promises though
13:00 < squeakytoy> konobi, i think you misunderstood the article
13:01 < geNAZt> well its easy: the core doesnt provide any control flow, so its up to you how you flow your application
13:01 < geNAZt> via promises or async callback stacks or what so ever
13:01 < squeakytoy> exactly, thats why it got removed from node. Not because its bad
13:01 < geNAZt> no
13:01 < geNAZt> but they had no place in the core
13:01 < squeakytoy> but because they dont want to which developers hould have
13:01 <@konobi> no, they got removed because they were a PITA
13:02 < squeakytoy> konobi, where are you interpreting that?
13:02 <@konobi> i'm not, i was there
13:02 < squeakytoy> konobi, where is there?
13:03 <@konobi> when they were removed, by ryah, on the same engineering team
13:07 < geNAZt> its better :D
13:08 <@konobi> i'm sure isaacs or mbalho would have the links to the more technical aspects... it's left my brane buffer ^_^
13:20 < squeakytoy> konobi, regardless. They were removed because of it gave more freedom, not becuse they are ness. bad
13:20 < squeakytoy> konobi, the articles doesn't say that Promises are *bad*
13:21 < squeakytoy> more towards that node.. doesn't need to include. Have no reason to.
13:21 < geNAZt> the article is about why promises arent in node core
13:21 < squeakytoy> exactly
13:21 < geNAZt> or why they are removed from core
13:23 < squeakytoy> so my question still stands, anyone can recommend a promise framework for node, for my own solution? :)
13:24 < squeakytoy> because i think most people agree that promises are pretty cool
13:24 < geNAZt> well most of promise people use !
13:24 < geNAZt> Q
13:24 < geNAZt> *
13:24 < geNAZt> well i hate them :D
13:24 < squeakytoy> do you have any async flow control thingy?
13:25 < geNAZt> yes
13:25 < geNAZt> async
13:26 < squeakytoy> gonna read more about async
13:26 < squeakytoy> if thats an alternative to promise
13:28 < dypsilon> squeakytoy, async is not promises
13:28 < dypsilon> "q" is promises
13:28 < squeakytoy> when did i write that async is a promise?
13:28 < geNAZt> yes its not async = promises
13:28 < geNAZt> its async or promises
13:29 < squeakytoy> geNAZt, when you say "async" you mean.. plain old javascript?
13:29 < geNAZt> which control flow to use
13:29 < geNAZt> whats are pros and cons
13:29 < geNAZt> and so on
13:29 < geNAZt> no the async module
13:29 < squeakytoy> geNAZt, yea, i understood it wasnt promise pattern, hence i wrote: <squeakytoy> if thats an alternative to promise
13:30 < geNAZt> no its not about you
13:30 < geNAZt> it was the answer to dypsilon
13:30 < geNAZt> sorry
13:30 < doolinkr> I've set my static directory but when I navigate to localhost/somesubdirectory, assets don't load correctly..
13:30 < doolinkr> Well.
13:30 < doolinkr> They load for localhost/home...
13:30 < doolinkr> For some reason./
13:30 < doolinkr> Ah I think I know why.
13:30 < doolinkr> Nevermind.
13:31 < doolinkr> Forgot nginx is only proxying requests to 127.0.0.1 and the link I was following was directly to the node process.
13:35 < squeakytoy> hmm
13:37 < squeakytoy> geNAZt, as an async noob, where can i find the pros and cons comparing async with promise?
13:37 < leichtgewicht> I am trying to read my way through all npm commands and I am wondering: Why are there some many links?
13:37 < geNAZt> links ?
13:37 <@konobi> error handling, call stacks and general traceability
13:38 < leichtgewicht> links/aliases.
13:38 < squeakytoy> geNAZt, yea, for example :-)
13:38 < squeakytoy> geNAZt, i am only getting promise articles when googling
13:39 < leichtgewicht> I understand that a short form is sometimes useful, but 3 or 4 commands that refer all to the same command?
13:39 < leichtgewicht> Feels like overkill.
13:39 <@konobi> hysterical porpoises
13:39 < squeakytoy> before i add Q into my project, just curious to see if async might be more cool
13:40 < geNAZt> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/mWtqFE0spWk
13:40 < doolinkr> Ok actually that didn't fix the problem.
13:42 < geNAZt> async can also be used to get more and different control flow
13:42 < geNAZt> paralell or series, mapping, reduce
13:42 < geNAZt> i dont know if Q can do that
13:47 <@konobi> squeakytoy: just pick one and go with it... jfdi is more important than trying to make sure you make the absolute right choice
13:47 < squeakytoy> maybe, maybe not
13:47 < squeakytoy> maybe its worth spending extra time now, then a lot more time converting in the future
13:47 < squeakytoy> i could buy a car, or i could read up on the different cars frist
13:47 < squeakytoy> first
13:48 <@konobi> after a couple of hours of using either, you should know
13:49 < squeakytoy> geNAZt, async seems like a utility belt
13:49 < squeakytoy> geNAZt, a toolbox
13:49 < geNAZt> y and Q is not an utility ?
13:49 < squeakytoy> not in my head
13:50 < geNAZt> well i dont get the Q thing
13:50 < agu10^_> nginx: configuration file /etc/nginx/nginx.conf test failed
13:50 < squeakytoy> Q, or promise, is more like a pattern, imo
13:50 <@konobi> async is used heavily throughout npm
13:50 < geNAZt> for me they only are a bad control flow lib which only supprts one ctontrol flow
13:51 < squeakytoy> while async is just a toolbox and you can solve different kinds of problems, using different tools
13:51 < geNAZt> yes but i never had a problem which i say "i need promises now"
13:52 < squeakytoy> imo, the promise pattern is probably included in async
13:52 <@konobi> Q doesn't do anything I can't do with async... it's just sugar
13:53 < dypsilon> async provides map and foreach stuff, which is very nice compared to how awkward it is with promises
13:55 < squeakytoy> so, hm, to simulate a promise pattern with async, what function should you use?
13:55 < squeakytoy> serial/parallel?
13:56 < squeakytoy> series*
13:56 < geNAZt> series
13:57 < squeakytoy> a read an article though, that q/promises makes success and reject much more clear than async
13:57 < squeakytoy> i think i agree with that
13:57 < squeakytoy> but async seems just better, async sounds more like git :-) 
13:57 < geNAZt> clearer => split up into two callbacks
13:57 < geNAZt> sorry no :D
13:59 < squeakytoy> sorry no?
13:59 < geNAZt> what about Q is clearer as in async ?
13:59 < squeakytoy> i am very new to this
14:00 < SomeoneWeird> async is way better
14:00 < squeakytoy> but in promise, you can "specify" a function that should happend if a function returns a success or reject
14:00 < squeakytoy> in the async examples, i cant see that
14:00 < geNAZt> well in async it is the last callback
14:00 < geNAZt> which can given a error or the success values of all functions
14:00 < geNAZt> the same thing but not in two callbacks
14:00 < squeakytoy> geNAZt, for example, in "series", it seems like all the functinos are executed.. but what if i want to abort after.. the second, etc.
14:01 < geNAZt> give a error into the callback of the second function
14:01 < geNAZt> it skips all functions and executes the finished callback with that error
14:02 < squeakytoy> and it seems like async doesn't tell the developer how to write the functions
14:02 < squeakytoy> dictate what they should return, etc
14:03 < geNAZt> you get a callback in the last argument
14:03 < geNAZt> which you have to call
14:03 < geNAZt> first argument is an error object or null and the second is the data which should be given into the finished callback
14:05 < squeakytoy> so the question is, if async is a really great toolbox, why does it seem like everyone in the world uses promises?
14:06 < geNAZt> what ?
14:06 < geNAZt> no one uses promises
14:06 < squeakytoy> at work, we use angularjs, which has promise included
14:07 < geNAZt> https://npmjs.org/package/async - https://npmjs.org/package/q
14:07 < geNAZt> angularjs has promises right
14:07 < squeakytoy> a derpy question, but angular is google's
14:07 < geNAZt> and my frameworks based on async ? and now ?
14:07 < squeakytoy> so why does google push for having that
14:07 < SomeoneWeird> lol angular
14:08 <@konobi> squeakytoy: have a look at the npm downloads for async vs q
14:09 < geNAZt> well google builds what they want
14:09 < geNAZt> app engine for example
14:09 <@konobi> dart
14:09 < geNAZt> why do they support java and python but not php ?
14:10 < dypsilon> google also pushes dart, but we are not rushing to use it
14:12 < geNAZt-laptop> well its about personal oppinions
14:12 < leichtgewicht> Google has engineers. Engineers use what the know/can deal with. Angular fits q. Why do you think Google is pushing q?
14:12 < geNAZt-laptop> but most nodejs devs use async over promises
14:12 < squeakytoy> well, my basic question is. If async is far superior, why does google even include promise in angular, pretty much inviting everything to use the promise pattern
14:13 < geNAZt-laptop> because they can
14:13 < squeakytoy> but why..?
14:13 < squeakytoy> there must be a reason :-)
14:13 < geNAZt-laptop> because they use more features from promises
14:13 < squeakytoy> maybe its because the two developers who started the angular project, didnt know better
14:13 < geNAZt-laptop> like deffered objects and so on
14:13 <@konobi> because someone there thought it was the latest hotness
14:14 < geNAZt-laptop> but angularjs could also work with a more callback driven pattern
14:14 < geNAZt-laptop> but they did promises
14:15 <@konobi> and you're also assuming that everyone in the world is using angular... there are plenty of other frameworks out there in use
14:16 < geNAZt-laptop> with jquery you can also build such kind of apps
14:16 < squeakytoy> to be honest, i dont really like using promise :-) i dislike frameworks that enforces me to add boilerplate code
14:16 < leichtgewicht> squeakytoy: About assuming: You could also assume that when they started it wasn't clear which of the two frameworks would become more popular.
14:16 < leichtgewicht> How about asking them?
14:17 < geNAZt-laptop> they also write js code without promises
14:17 < geNAZt-laptop> look at grits, which is poorly written
14:17 <@konobi> squeakytoy: so you're just wasting everyone's time?
14:17 < beg> The pessimist says, It can't get any worse. the optimist replied, yes it can.
14:17 < icarot> I sincerely have not seen a single argument against promises that didn't seem to boil down to politics or strawmans or acknowledge the syntactic and semantic drawbacks of node's imperative emphasis.
14:17 < squeakytoy> wasting? a discussion is not wasting :-)
14:17 < squeakytoy> i learnt a lot of promise and the async modules here
14:18 < squeakytoy> im greatful
14:19 < geNAZt-laptop> well async can do more control flow as promises
14:19 < rclsilver> hi, i've deployed node.js 0.9.3 in openshift, i've added a depency (node-xpmp⁻bosh) in package.json, but now, i would like to know how to start the application? openshift seems to start a default nodejs instance, i just want how to add the module in the process
14:19 < geNAZt-laptop> and promises also have a ugly (my opinion) api
14:20 < dypsilon> rclsilver, I think it's more of an openshift question.
14:21 < minibn> should i use locals or create a helper
14:21 < geNAZt-laptop> minibn, this differs from the case
14:21 < minibn> i want to create set of helper collection
14:21 < minibn> one file of helpers
14:22 < geNAZt-laptop> for the template engine ?
14:22 < minibn> no
14:22 < minibn> for normal usage
14:22 < minibn> everywhere in my app
14:22 < geNAZt-laptop> some sort of a util ?
14:22 < minibn> also in template engine
14:22 < minibn> yes
14:22 < squeakytoy> geNAZt, i will install async now and have a go at it, thanks
14:22 < minibn> i love async
14:22 < geNAZt-laptop> squeakytoy, np
14:22 < geNAZt-laptop> minibn, i would create a file with the functions
14:23 < geNAZt-laptop> and tell the template engine to use it as helper functions
14:23 < minibn> just use normal module exports as usual?
14:24 < minibn> should i make seperate folder
14:24 < minibn> ./lib
14:24 < minibn> or ./util
14:24 < minibn> or ./helpers
14:24 < minibn> or just put it in ./models
14:24 < minibn> ill put it util model
14:24 < geNAZt-laptop> well ./util would be the best
14:25 < minibn> i dont think i would need anything else inside ./util
14:25 < minibn> other than this one 
14:25 < minibn> but i need some folder for several API libraries
14:25 < minibn> ill just put ./lib
14:27 < geNAZt-laptop> minibn, little tip, never append extensions to your require statements
14:27 < geNAZt-laptop> its easier to change the structur of your modules if you do so
14:27 < minibn> like require()()?
14:28 < geNAZt-laptop> no like require('./uitl.js');
14:28 < minibn> im putting this helper in lib/util
14:28 < geNAZt-laptop> require('./util') is better
14:28 < geNAZt-laptop> require('./lib/util');
14:28 < minibn> so i have to make another index.js?
14:28 < geNAZt-laptop> no
14:28 < minibn> to load the whole thing in util?
14:28 < geNAZt-laptop> no
14:28 < geNAZt-laptop> nodejs will try to append .js 
14:29 < minibn> ooh
14:29 < minibn> you mean that file extension
14:29 < minibn> ok
14:29 < minibn> yes
14:29 < minibn> thanks
14:29 < geNAZt-laptop> but if you do require('./lib/util.js'); everywhere in your code you never would be able to seperate the util module without touching every piece of code
14:29 < minibn> my ./models/index.js include the .js though
14:33 < geNAZt-laptop> i should make a blog :D geNAZt secret javascript tricks :D
14:33 < minibn> yes
14:34 < dypsilon> "geNAZt not so secret javascript tricks"
14:34 < geNAZt-laptop> "dypsilon the guy without humor"
14:35 < dypsilon> that would be the name of my blog
14:36 < icarot> I don't see how leaving the extension off makes much of a difference in refactoring.
14:37 < geNAZt-laptop> well lets think of the case you have a util.js in ./lib
14:37 < geNAZt-laptop> which currently has 150 lines
14:37 < geNAZt-laptop> and you want to add a function to it which has 80 lines
14:37 < geNAZt-laptop> and you dont want to fuck up this file even more
14:37 < geNAZt-laptop> what do you make ?
14:38 < geNAZt-laptop> create a folder named util create a index.js in it with exports.somefunc = require('./somefunc');
14:38 < geNAZt-laptop> right ?
14:40 < icarot> well, a bit ugly perhaps, but sure.
14:40 < icarot> can't think of a better way.
14:40 < geNAZt-laptop> if you require the util like this: require('./lib/util.js'); it would not work
14:40 < geNAZt-laptop> but if you wrote require('./lib/util'); it works in both cases
14:40 < geNAZt-laptop> the unrefactored and the refactored way
14:42 < dypsilon> A framework calls my function synchronously, but I want to do asynchronous stuff inside, like a database query. Is it somehow possible to return the result of this asynchronous function? In other words, is it possible to make the outside function wait until the database returns the results?
14:43 < geNAZt-laptop> dypsilon, no
14:43 < dypsilon> geNAZt-laptop, thank you
14:43 < leichtgewicht> not in a good way anyways ...
14:44 < icarot> require will search two levels up the directory tree for the folder 'util' ?
14:44 < geNAZt-laptop> well i tried and found no way for it
14:44 < geNAZt-laptop> icarot, yes
14:45 < dypsilon> could you explain what process.nextTick does? I'm reading the docs for the fifth time but could not understand when it's useful.
14:45 < leichtgewicht> icarot: you can use a native call
14:45 < geNAZt-laptop> but only for node_modules folders
14:45 < geNAZt-laptop> dypsilon, it takes the execution of the function out until the next event loop tick comes
14:45 < icarot> that's odd. okay. i have yet to read the API for require.
14:46 < geNAZt-laptop> and executes it before? anything else
14:46 < geNAZt-laptop> icarot, there is a little search flow diagram in the docs which explains it really nice
14:47 < dypsilon> why not execute it right away?
14:47 < geNAZt-laptop> because for some cases you want to be sure that the current tick does something before getting in the next tick
14:47 < dypsilon> feel free to point me to any tutorial
14:47 < geNAZt-laptop> like streams start in the next tick
14:47 < geNAZt-laptop> so you have the chance to append listeners
14:48 < dypsilon> hmmm
14:48 < geNAZt-laptop> http://howtonode.org/understanding-process-next-tick
14:48 < icarot> but only the names declared in file scope with exports in the index.js of a matching directory will get concatenated?
14:48 < dypsilon> geNAZt-laptop, that looks great, thank you
14:49 < icarot> as in your example
14:50 < agu10^_> How do i know if a certain file exists? not dir, file.
14:51 < slicky> require('fs').exists('./file', callback);
14:51 < icarot> I'll look at the docs, I was just curious.
14:51 < leichtgewicht> that will tell you if a object exists.
14:51 < ipetrovilya> I get error `npm ERR! fetch failed https://github.com/ciaranj/node-oauth/tarball/master` while installing calipso. It seems github's repo doesn't support legaci API any more. Would you suggest any way to circumvent this dependancy, please? Installin `npm install -g oauth` doesn't help.
14:52 < geNAZt-laptop> agu10^_, you could stat the thing and ask for isFile()
14:52 < geNAZt-laptop> if stat returns an error the file isnt there
14:53 < leichtgewicht> var fs = require("fs");
14:53 < geNAZt-laptop> or you dont have enough rights to stat it
14:53 < leichtgewicht> if(fs.existsSync("myPath")) {
14:53 < leichtgewicht>    fs.statsSync("myPath").isFile();
14:53 < leichtgewicht> }
14:53 < geNAZt-laptop> leichtgewicht, this would be bad if done in a request scope
14:53 < agu10^_> that sucks
14:53 < geNAZt-laptop> since it blocks the eventloop
14:53 < agu10^_> ooh
14:53 < agu10^_> isFile() ?
14:53 < geNAZt-laptop> y
14:54 < geNAZt-laptop> no not isFile() blocks
14:54 < leichtgewicht> geNAZt ... of course using the Sync version is not a good idea, but its easier to type here.
14:54 < geNAZt-laptop> the Sync fs calls do
14:54 < agu10^_> i don't care
14:54 < geNAZt-laptop> y true :D
14:54 < geNAZt-laptop> for initialisation of apps i also use Sync calls
14:54 < geNAZt-laptop> its easier
14:55 < geNAZt-laptop> :D
14:55 < icarot> is all seriousness, those geNAZt tips would help people like me who just started node and JS not too long ago.
14:58 < leichtgewicht> A geNAZt tip a day keeps the doctor away.
14:58 < geNAZt-laptop> lol :D
14:58 < geNAZt-laptop> more like "A geNAZt tip a day keeps the debugger away."
14:59 < leichtgewicht> Oh, how I would love to have a solid debugger for node...
14:59 <@konobi> but only a tip
15:00 <@konobi> leichtgewicht: they exist
15:00 < leichtgewicht> solid ?
15:00 <@konobi> yup
15:00 < geNAZt-laptop> which one ?
15:00  * leichtgewicht is sceptical but curious.
15:00 < geNAZt-laptop> i am searching for a good debugger for nodejs
15:00 < dypsilon> wasnt there a way to tie chrome dev tools to node.js debugger?
15:01 < geNAZt-laptop> yes node-inspector
15:01 < geNAZt-laptop> but they do not support profiling and stuff
15:01 <@konobi> komodo ide, commercial offering, trace.gl, another commercial offering... node-webkit-devtools... chrome panels
15:02 < geNAZt-laptop> node-inspector with profiling would be nice :D
15:02 < geNAZt-laptop> and trace.gl is really nice i looked some videos about it
15:02 <@konobi> sorry, make that webkit-devtools-agent
15:02 <@konobi> supports profiling and heap snapshots
15:02 < geNAZt-laptop> wooot
15:03 <@konobi> takes a little wrangling to get it to work, but it's solid once you've grokked it
15:04 < geNAZt-laptop> does it work with node 0.10 ?
15:04 < minibn> how can i export my utils to jade
15:04 < minibn> import it to local?
15:04 < geNAZt-laptop> since the description says 0.6 and 0.8
15:05 < leichtgewicht> yeah, no update in 2 months ...
15:05 < leichtgewicht> but that should contain 0.10 updates
15:06 < geNAZt-laptop> i will try it
15:06 <@konobi> geNAZt-laptop: ask c4milo 
15:06 < minibn> is this a good practice ? https://groups.google.com/forum/?fromgroups=#!topic/jadejs/ufsL-wd4E8w
15:07 <@konobi> minibn: check with the jade folks
15:07 < geNAZt-laptop> doesnt work 
15:12 < c4milo> geNAZt-laptop: it doesn't, something changed in the format of the serialized heap that v8 profiler sends to devtools frontend
15:12 < c4milo> in node 0.10.x 
15:13 < geNAZt-laptop> ah okay, i am able to spin up the debugger, but the inspector is empty
15:13 < c4milo> debugger where? 
15:13 < agu10^_> in node.js, i do res.send(readFileSync()) and chrome downloads an extension-less file. WTF? How do i show the index.html ?
15:13 < geNAZt-laptop> in my node app
15:13 <@konobi> agu10^_: content type
15:14 < c4milo> geNAZt-laptop: node-webkit-agent doesn't support debugging, for what you could use node-inspector 
15:14 < geNAZt-laptop> the webkit-devtools-agent ?
15:14 < agu10^_> konobi, but i don't know the content type before i read the file
15:14 < agu10^_> how am i supposed to know what to send, konobi ?
15:14 < c4milo> geNAZt-laptop: hehe, right, I need to change the github repo
15:14 < agu10^_> i just want to serve the files
15:15 < agu10^_> programatically
15:15 < agu10^_> based on the URL
15:15 < c4milo> geNAZt-laptop: as well 
15:15 <@konobi> agu10^_: the use an npm library to do it for you
15:16 <@konobi> c4milo: yeah, always wondered why there's inspector vs devtools-agent
15:16 < geNAZt-laptop> c4milo, do you plan to fix it ?
15:16 < c4milo> geNAZt-laptop: yes, I'm giving it another try right now
15:16 < agu10^_> konobi, if i use app.static, it serves files fine. but i want to serve those files in the URLs that I want
15:16 < c4milo> konobi: because profiling in node-inspector never worked for me in node 0.6.x and I had a nasty memory leak in a production app 
15:17 < agu10^_> i want to route the static files. any ideas_
15:17 < agu10^_> ?
15:17 < agu10^_> so domain1.com will serve files from sites/domain1.com/ and domain2.com will serve files from sites/domain2.com
15:17 < agu10^_> can i do that with app.static ?
15:18 < geNAZt-laptop> agu10^_, yes, expressjs has support for vhosts
15:18 <@konobi> c4milo: i got it to work once upon a time
15:18 < geNAZt-laptop> that is what you need
15:18 < c4milo> geNAZt-laptop: it's tricky though, because the devtools protocol for profiling is not documented and I have to do reverse engineering to know what the current messaging looks like in recent versions of v8 
15:18 <@konobi> but node-inspector is pretty out of date now, iirc
15:18 < agu10^_> geNAZt-laptop, that is not what i want
15:18 < geNAZt-laptop> c4milo, ok that sucks :D
15:19 < geNAZt-laptop> agu10^_, then what do you want ?
15:19 < agu10^_> geNAZt-laptop, i can have an infinite amount of domains. i want to route them dynamically, not manually create servers for each of them.
15:19 <@konobi> agu10^_: that's the definition of what a vhost is
15:19 < c4milo> geNAZt-laptop: sorry I meant in the recent versions of devtools
15:19 < agu10^_> konobi, not express's vhosts i guess
15:19 < geNAZt-laptop> agu10^_, you dont need
15:19 < agu10^_> geNAZt-laptop, need what?
15:19 < c4milo> konobi: v8-profiler was missing important bindings in order to stream the heap to devtools, I added it that 
15:19 < geNAZt-laptop> expressjs vhosts takes expressjs app and mount them into a server
15:20 < agu10^_> i want to serve all files for domainRand.com from sites/domainRand.com/
15:20 < agu10^_> where Rand is a random number
15:20 < c4milo> geNAZt-laptop: for memory profiling you could also use https://github.com/bnoordhuis/node-heapdump 
15:20 < geNAZt-laptop> well then inspect the host header 
15:20 < agu10^_> acutally domainRand.com = random domain. unknown
15:21 < agu10^_> geNAZt-laptop, i'm doing that
15:21 <@konobi> agu10^_: use nginx
15:21 < geNAZt-laptop> i this domain hits your server it isnt unknown
15:21 < agu10^_> geNAZt-laptop, but i don't know how to serve the files
15:21 < agu10^_> konobi, i'm replacing nginx with node.js because i want to serve other urls also, on top of the static files
15:21 <@konobi> you can do that with nginx + node
15:21 < agu10^_> geNAZt-laptop, i don't care. i want to treat it as unknown
15:21 < agu10^_> actually it could be unknown
15:22 < geNAZt-laptop> it is never unknown
15:22 < agu10^_> somebody creates /etc/hosts: myServerIP randomdomain.com
15:22 < agu10^_> so yes
15:22 < geNAZt-laptop> because a request everytime hits your server with a host header
15:22 < agu10^_> it's unknown until i get the request
15:22 < agu10^_> ...
15:22 < agu10^_> unknown at the time of writing the server.
15:23 < geNAZt-laptop> you can dynamicly spin up expressjs apps
15:23 < geNAZt-laptop> and attach them to the main expressjs app via vhosts
15:23 < agu10^_> ok
15:23 < agu10^_> is that the preferred method for this?
15:24 < geNAZt-laptop> there is no preferred method for this use case
15:24 < agu10^_> isn't there something like app.static(dynamically generated path based on domain) ?
15:24 < geNAZt-laptop> no
15:24 < geNAZt-laptop> except you write a middleware for it
15:24 < agu10^_> okay, i should do that
15:26 <@konobi> c4milo: yeah, would be nice to have them in one app, iykwim
15:26 < agu10^_> geNAZt-laptop, how do i get the code for express.static middleware?
15:27 < geNAZt-laptop> look into the github repo
15:27 < geNAZt-laptop> or in your node_modules folder
15:27 < agu10^_> yeah but how do i find the function i mean in so many files
15:29 <@isaacbw> grep -s 'static =' `find .`
15:29 < geNAZt-laptop> https://github.com/senchalabs/connect/blob/master/lib/middleware/static.js
15:29 <@isaacbw> and it's in connect
15:29 <@isaacbw> put some elbow grease into it agu10^_ instead of asking other people to do the work for you
15:29 < Venemo_N9> hey
15:30 <@konobi> isaacbw: heh
15:31 < Venemo_N9> anyone here familiar with writing native node modules?
15:31 < Venemo_N9> I have some questions about the stuff
15:31 <@konobi> Venemo_N9: ask away
15:33 < Venemo_N9> When do I need to use a HandleScope? some of the examples have one and return with scope.Close() and other examples just initialize a HandleScope but never do anything with it
15:33 < agu10^_> When i fix a bug in a node module, how do i make it so next time i install all modules with npm install, my correction is there?
15:33 < agu10^_> if i didn't create such module
15:33 < Venemo_N9> agu10^_, give your fix back to the original author
15:33 < agu10^_> what if they don't want to accept any?
15:33 < geNAZt-laptop> agu10^_, make a fork of the module repo, make a pull request and hope the maintainer updates his package
15:34 < agu10^_> ... i mean if they don't
15:34 < agu10^_> should i make a fork?
15:34 < agu10^_> and add a dependency to my fork instead of the original
15:34 < agu10^_> seems like a lot of work
15:35 < wangbus_> qui
15:35 < geNAZt-laptop>    well it depends on what you have changed 
15:35 <@isaacbw> work is boring
15:37 < Venemo_N9> konobi, my other question is, how can I read properties of an object literal passed from javascript to a native function?
15:39 <@isaacbw> Venemo_N9: http://izs.me/v8-docs/main.html
15:40 <@isaacbw> Venemo_N9: do you understand how c++ deals with stack memory
15:40 < Venemo_N9> isaacbw, I think I do, yes.
15:40 <@isaacbw> er, bad terminology
15:41 <@isaacbw> http://izs.me/v8-docs/classv8_1_1HandleScope.html
15:43 < Venemo_N9> isaacbw, ah, nice, thanks
15:45 < agu10^_> I need to create a new middleware for connect but i want my code near my main code, not inside the connect node module
15:45 < agu10^_> how am i supposed to do this?
15:46 < Venemo_N9> isaacbw, so, as much as I understand, I will need a HandleScope pretty much everywhere where I want my local handles to be cleaned up
15:47 < Venemo_N9> isaacbw, but then, why is it that HandleScope::Close is not always called?
15:51 <@konobi> Venemo_N9: https://developers.google.com/v8/embed#handles
15:53 <@isaacbw> Venemo_N9: because c++ will delete the HandleScope automatically at the end of the scope. You only need to Close if you want to return a Handle that ends up in the right scope in v8
15:54 < Venemo_N9> isaacbw, what does it mean, ends up in the right scope?
15:54 <@konobi> a newly created handle that is
15:55 <@konobi> Venemo_N9: { var b = {}; return undefined; } vs { var b = {}; return b }
15:56 <@konobi> Venemo_N9: if that makes sense
15:56 < brianng> Hi i have a question about express.io anyone farmiliar with it? Please help?
15:56 < Venemo_N9> konobi, so if I want to return something other than undefined, I need .Close() and otherwise not
15:57 < Venemo_N9> konobi, is that right?
15:57 <@konobi> Venemo_N9: not quite
15:57 < jergason> brianng: ask your question instead of asking to ask, and if anyone can help you they will
15:58 < Venemo_N9> konobi, if I want to return a local handle, then?
15:58 < brianng> socket.io provides an authorization method to prevent csrf
15:58 < brianng> i wonder if express.io does
15:58 <@konobi> Venemo_N9: if in your function, you create a new object and you want to return it, then you need to Close over it
15:58 < Venemo_N9> konobi, ah, I see :)
15:59 <@konobi> Close() copies the object to the higher scope then destroys the scope handle
16:00 < Venemo_N9> konobi, what happens if I don't want to create local handle at all? is it okay then if I don't create a HandleScope at all?
16:01 <@konobi> you still need to declare it iirc (or it's a good safety measure at least)... you just don't need to Close anything
16:01 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:02 < Venemo_N9> I see
16:02 < Venemo_N9> konobi, is it bad if I Close() it all the time, too?
16:02 <@konobi> not sure on that one
16:02 <@isaacbw> I don't think so
16:03 < Venemo_N9> allright :) thanks!
16:04 < doolinkr> Express' redirect should trigger a browser redirect...right?
16:08 < d2dchat> Howdy noders
16:08 < Venemo_N9> konobi,  other question is, must I make a constructor and prototype to be able to use ObjectWrap?
16:09 < newbjs> hey gang! I am trying to build form that dynamically adds fields on the client side in jade. Figured this would be a good place to start.
16:09 < Venemo_N9> konobi, can't I just make a standard object, wrap it, and add the methods to it?
16:10 < newbjs> if there is a better irc group I will go to that one
16:10 <@konobi> Venemo_N9: not sure, i haven't had to do an ObjectWrap before
16:11 < Venemo_N9> konobi, I'm creating a binding for a native C library and would like to make the JavaScript API look object-oriented
16:12 < d2dchat> newbjs: I like handlebars better :)
16:12 <@konobi> ah, shouldn't need object wrap... you can use internal fields instead
16:14 <@konobi> Venemo_N9: have a look at https://github.com/mscdex/node-pcre
16:14 < Venemo_N9> konobi, ah, thanks
16:14 < pluma> Does anybody here have any experience with arangoDB? I'm wondering whether I should use it for a new project.
16:14 <@konobi> oh... although he does do a wrap there
16:14 <@isaacbw> newbjs: once the page is rendered, it's html and not jade
16:14 <@isaacbw> and you can ask about that in ##javascript
16:15 < Venemo_N9> pluma, what's that?
16:15 < pluma> Venemo_N9: Multi-paradigm nosql database. Totally webscale I guess.
16:16 <@isaacbw> "multi-paradigm nosql database"
16:16 <@isaacbw> one for the books
16:16 < pluma> Venemo_N9: But seriously, I'm wondering whether it's worth a try.
16:16 <@isaacbw> you can always try it
16:16 < Venemo_N9> konobi, also, is there a way to tell what type an argument is? so far I've only seen examples that cast an argument to a type
16:16 <@isaacbw> Venemo_N9: seriously, read the docs
16:16 < pluma> isaacbw: Yeah, I'm being a bit sarcastic. It supports document storage as well as key value and graphs.
16:17 <@isaacbw> http://izs.me/v8-docs/classv8_1_1Value.html
16:17 <@isaacbw> you can dereference a handle and call the value's functions with ->
16:17 < pluma> isaacbw: It's probably fully buzzword compliant, but it seems promising.
16:17 < Venemo_N9> isaacbw, I read the docs about this on nodejs.org but they were not very detailed
16:17 <@isaacbw> Venemo_N9: no, the v8 do cs
16:18 <@konobi> isaacbw: IsDate...
16:18 < newbjs> so the recommendation is use handle bars on the client side and just pass it through the jade compiler as a "static" to jade set of scripts?
16:18 <@isaacbw> newbjs: lol no
16:18 < Venemo_N9> isaacbw, ok, reading it now :)
16:18 <@konobi> Venemo_N9: um... yes, the Value->IsDate() and there's also casting methods too
16:19 < pluma> Besides, apparently the arangoDB team hails from the same place I live. I guess I could just hunt them down and ask them in person.
16:19 < newbjs> @isaacbw: no? What is the right approach? Does handlebars make jade barf or somethign?
16:19 < Venemo_N9> konobi, okay, thanks :)
16:20 <@isaacbw> newbjs: jade has nothing to do with handlebars
16:20 <@konobi> node has nothing to do with the browser side
16:21 <@isaacbw> what was that promise library that someone was recommending a while ago? A lot more basic than q?
16:21 <@isaacbw> oh, found it. then/promise
16:21 < newbjs> @issacbw: Ok. But if you use jade markup in a serverside page, and you want that page to do the kind of dynamic client side stuff I am trying to do, you will have to add the client side js and its dependent includes to the jade server side page in a way that the server side parser will ignore, Correct?
16:22 <@isaacbw> newbjs: sure. You would almost certainly want your clientside javascript in its own file(s) though and then just link to them in the html
16:31 <@isaacbw> *jade
16:31 <@isaacbw> full disclosure, I think jade is weird
16:31 <@isaacbw> and I like html
16:32 <@isaacbw> markup 4 lyfe
16:33 < leichtgewicht> isaacbw: I wonder what your opinion is about code in template versus no-code. (handlebars vs EJS)
16:34 <@isaacbw> I don't do serverside rendering anyway
16:35 < leichtgewicht> and clientside?
16:35 < masaki_> hi
16:35 <@isaacbw> leichtgewicht: view shouldn't contain logic, so no-code
16:36 < masaki_> iwill stack of  specific operation will be goes off when there is aysnc IO operation?
16:36 < leichtgewicht> isaacbw: so handlebars over ejs ?
16:36 <@isaacbw> handlebars
16:36 < masaki_> Will stack of  specific operation will be goes off when there is aysnc IO operation?
16:37 < squeakytoy> okay, this makes little sense. the traditional node convention is to put the callback-function as the last argument, while async.series wants it as the first argument..
16:38 < geNAZt> squeakytoy, wrong
16:38 < geNAZt> :D
16:38 <@isaacbw> leichtgewicht: please don't think of me as any kind of authority though
16:39 < leichtgewicht> isaacbw: Though thing to request. I do my best.
16:40 < squeakytoy> geNAZt, look at this. It says "undefined is not a function, row 5 -- http://pastebin.com/jVps1CZS
16:40 < leichtgewicht> Is there something like browserify for whole template/css/javascript bundles?
16:41 < dominictarr> leichtgewicht: you can use bfyfs
16:41 < daniel1> I am having a problem with CompoundJS. I get a "TypeError: Cannot call method 'validatesPresenceOf' of undefined" when I start my app. this in addition to a "Generator crud not found" error when using 'compound generate' from the command line. Can anyone help?
16:41 < geNAZt> squeakytoy, yes because series doesnt take any arguments in his series functions
16:41 < geNAZt> so how do you think the argument name is getting there ?
16:42 < squeakytoy> that should be undefined, or something imo
16:42 <@isaacbw> leichtgewicht: have you looked at grunt?
16:42 < substack> leichtgewicht: browserify -t brfs main.js # now your main.js can do fs.readFileSync()
16:42 < leichtgewicht> isaacbw: grunt? How do I make modules that can be combined with grunt?
16:42 < geNAZt> squeakytoy, no
16:42 < squeakytoy> geNAZt, but my example makes sense though? last argument is callback
16:42 < geNAZt> in a series the callback is the first argument
16:42 < geNAZt> everytime
16:42 < geNAZt> and nothing other
16:43 < geNAZt> yes it is
16:43 < geNAZt> but the series functions only get the callback as parameter
16:43 < squeakytoy> so its the first argument when using series.. but node has it as last argument. So, apparently series is not following node convention? what else should a developer use?
16:43 < geNAZt> all series function only get ONE argument
16:44 < geNAZt> not more not less
16:44 < squeakytoy> yea, but i want to specify my function directly in the series array, not wrap it
16:45 < geNAZt> you dont need to
16:45 <@konobi> cb(null, args...)
16:45 < geNAZt> every series function looks the same
16:45 < leichtgewicht> dominictarr: substack: I was thinking more along the line of: I want css(less/sass/...) files in a npm module and i have some require() less/sass call to another module :)
16:45 < geNAZt> function(callback) {}
16:45 < geNAZt> everytime
16:45 < belfare> is there a function to convert an array into a json object?
16:45 < squeakytoy> geNAZt, but this basically means i cant put... fs.readDir directly as a "series-function"
16:46 < leichtgewicht> browserify for stylus stuff. 
16:46 < nathan7> squeakytoy: maybe you're after waterfall?
16:46 < geNAZt> squeakytoy, correct not directly
16:46 < squeakytoy> nathan7, oh, that sounds.. like what i am trying to do :D
16:46 < mashlol> belfare - JSON.stringify(ary)?
16:47 < squeakytoy> i will try waterfall! thanks for the support guys
16:47 < dominictarr> leichtgewicht: the alternative is to make a js dsl that generates css
16:47 < substack> leichtgewicht: don't use require for that
16:47 < dominictarr> like https://npm.im/hyperscript
16:47 < leichtgewicht> substack: why not?
16:48 < substack> it breaks the correspondence between node code and browser code
16:48 < belfare> mashlol:  yeah, that's what I'm using let me see if this checks out
16:48 < leichtgewicht> Depends on the definition of the result now, doesn't it?
16:48 < leichtgewicht> loading a require("text.json") file returns an object.
16:49 < substack> json is a subset of js
16:49 < substack> require() is for js
16:49 < leichtgewicht> if loading a require("text.css") file returns a CSS object (DOM) 
16:49 < leichtgewicht> by plugin then it wouldn't be too wrong, now would it?
16:50 < masaki_> Will stack be erased when there is IO operation?
16:50 < leichtgewicht> substack: and even though json is a subset of js, it does not have "module.exports" written anywhere, thus it is a special case already.
16:50 < belfare> I think I'm doing something wonky, it's actually returning the array and not an object.  I guess that's not technically wrong though
16:51  * belfare refactors this code
16:51 < belfare> not sure why i used an array in the first place
16:51 < mashlol> is it just printing the array?
16:51 < mashlol> [1, 2, 3]
16:51 < belfare> yep
16:51 < belfare> i wanted an object, so i'm refactoring for that
16:51 < mashlol> well JSON.stringify returns a string
16:52 < leichtgewicht> substack: By extension having a require("style.less") return a compiled less logic doesn't seem wrong either.
16:52 < belfare> I'm saving the string to a file
16:52 < substack> leichtgewicht: browserify works the way node works
16:52 < substack> if you require('style.less') in node it won't work
16:52 < substack> unless you do a bunch of hacky crap that is heavily discouraged
16:53 < leichtgewicht> Like Coffeescript?
16:53 < geNAZt> substack, unless you have a less plugin installed
16:53 < geNAZt> :D
16:53 < leichtgewicht> npm install coffee-script -g is heavily discouraged? 
16:56 < leichtgewicht> In my personal experience installing coffeescript globally was a bad idea because it has to be installed for stuff to work on other computers. But in all documentation at the time (and at the coffeescript homepage right now) this is encouraged.
16:58 < leichtgewicht> I am getting a bit off track here but I think that node could kick some more ass if it there were some logic that autoinstalls the parser/compiler for a file if the extension isn't found.
16:58 < geNAZt> using coffeescript in general is a bad idea
16:58 < leichtgewicht> geNAZt: ? Because you don't like it?
16:59 < geNAZt> its the approach to not write javascript in an javascript framework
16:59 < geNAZt> i also hate lua in php
16:59 < geNAZt> or typescript in nodejs
16:59 <@isaacbw> you can put it in your devDependencies
16:59 < geNAZt> or python in java or .net
17:00 < paulkon> c/c++?
17:00 < leichtgewicht> coffeescript is to javascript like scala to java if you ask me.
17:00 < leichtgewicht> But that is personal opinion.
17:01 < leichtgewicht> isaacbw: will require("myfile.coffee") work if coffeescript is just in the dev-dependencies?
17:01 < paulkon> I commend people who can read coffeescript
17:01 < geNAZt> well if i see a npm!JS! module written in coffe its a big minus for me
17:01 < paulkon> it increases cognitive load for me
17:02 < geNAZt> also who says that the compiler of coffee creates nice and bug free js ?
17:03 < agu10^_> Response:	550 Create directory operation failed.
17:03 < leichtgewicht> geNAZt experience.
17:03 < geNAZt> well i dont like it, i choose framework and write them in their language
17:03 < geNAZt> not in my
17:04 < geNAZt> im not here in nodeCoffee if you know what i mean
17:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:04 < leichtgewicht> geNAZt: Duly noted 
17:04 < leichtgewicht> But the core of my question was: require("*.<notjs>");
17:04 < leichtgewicht> is not illegal right now.
17:04 < leichtgewicht> (and doesn't feel discouraged)
17:06 < leichtgewicht> Thus: a require("*.css") or require("*.less") could be legal too.
17:06 < leichtgewicht> And opening the path to a browserify for css stuff.
17:06 < geNAZt> yes but its deprecated
17:07 < leichtgewicht> deprecated?
17:07 < leichtgewicht> So coffeescript will break soon?
17:07 < geNAZt> the usage of require.extensions is deprecated
17:07 < substack> abusing require() is a bad idea
17:08 < geNAZt> leichtgewicht, https://github.com/joyent/node/blob/master/doc/api/globals.markdown#requireextensions
17:08 < leichtgewicht> I am not sure i follow the "abusing" require notion. 
17:09 < leichtgewicht> I am also not sure why extensions was a bad idea (and is deprecated)
17:09 < leichtgewicht> The implementation seems shitty (I can agree to that) but the idea is solid.
17:10 < geNAZt> leichtgewicht, https://github.com/joyent/node/pull/5376
17:12 < leichtgewicht> geNAZt: thanks!
17:17 < atojs> controversial thought: grunt was adored by those who couldn't figure out how to use makefile and unix command line?
17:19 <@isaacbw> controversial thought: email was adored by those who couldn't figure out ftp
17:19 < atojs> haha
17:20 < atojs> why do people love grunt then?
17:20 <@isaacbw> because it simplifies things?
17:20 < atojs> by scattering them everywhere?
17:21 < atojs> i like its data-driven nature
17:21 <@isaacbw> I like data with numbers in it
17:21 < atojs> though it makes it difficult to maintain since most of it is used sequentially
17:23 < atojs> or is it the makeanapp mentality vs learn to use whats out there
17:23 <@isaacbw> it's probably the cool logo
17:27 < atojs> logo is nice indeed
17:27 < agu10^_> okay at /var/www i can create dirs. but at /var/www/wildcard i can't! Why is this? wildcard is 775.
17:30 < RobW_> atojs: Grunt isn't just a makefile, it's a testing/dev/build manager.
17:31 < RobW_> In fact, the makefile/ scaffolding is being pulled out and handed to Yeoman's Yo.
17:31 < atojs> i am not big on makefiles myself
17:32 < atojs> was just curious since i made a complex gruntfile lately
17:33 < atojs> e.g. i was able to accomplish most of the -contrib-copy with grunt.file.copy etc
17:33 < atojs> there seems to be many ways to do the same thing
17:33 < vampi-the-frog> hi guys. how do I make the http client reuse the same TCP connection (ie Keep-Alive)?
17:35 < AAA_awright> Makefiles are awesome
17:36 < atojs> makefiles will be even more awesome if there in mklint 
17:37 < atojs> it is difficult to find typo and have strange behavior run wild
17:37 < M2Ys4U> vampi-the-frog: A quick google found this: https://npmjs.org/package/agentkeepalive
17:38 < M2Ys4U> YMMV though, I've never used it
17:38 < vampi-the-frog> yeah I found the same thing in the meanwhile. thanks. I'll just give it a try
18:01 < brianng> hi
18:01 < vampi-the-frog> hi
18:01 < brianng> i need help in enabling socket.io to work with helmet's content security policy
18:01 < EvilPacket> brianng: what's the browser complaining about?
18:02 < brianng> nothing thats the problem
18:02 < brianng> socket.io isnt working
18:02 < EvilPacket> are you making the socket.io connection to the same domain / port?
18:03 < brianng> same domain yes
18:03 < brianng> port im not sure
18:04 < EvilPacket> how are you loading u pthe code to make the socket.io connection? js file on the same domain?
18:04 < brianng> im using express.io
18:04 < brianng> yes js file on same domain
18:04 < EvilPacket> and I'm assuming it works if you disable helmet
18:05 < brianng> yes if i disable helmet.csp()
18:05 < EvilPacket> fun… if you give me a min I'll try and setup a test and see if I can make it go. Never actually tested that with the lib … also what browser?
18:06 < brianng> firefox
18:06 < brianng> firefox
18:07 < EvilPacket> k
18:07 < EvilPacket> It should give you some complains in the console if it's csp that's blocking it…quite strange it doesn't
18:07 < brianng> unfortunately it doesnt
18:08 < EvilPacket> man, never used express.io figure out how the heck to set this up
18:08 < brianng> its the same like expressjs
18:08 < brianng> only with added stuff
18:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:09 < EvilPacket> yeah just taking me a bit...
18:13 < EvilPacket> brianng can you show me the app use statement for adding the helmet middleware? 
18:13 < brianng> sure
18:14 < brianng> http://pastebin.com/GMtcyt4K
18:15 < EvilPacket> also what node version are you running just so I can be consistent
18:19 < EvilPacket> brianng: got a basic example working…let me dink with helmet
18:20 < minibn> how to get value in node from command line function
18:20 < minibn> like exec or something
18:20 < minibn> https://npmjs.org/package/exec
18:20 < minibn> is this good?
18:20 < brianng> https://github.com/techpines/express.io/tree/master/examples#sessions
18:20 < brianng> EvilPacket: https://github.com/techpines/express.io/tree/master/examples#sessions
18:21 < EvilPacket> brianng yup I was fighting other things and a child.
18:22 < brianng> lol
18:22 < minibn> or is this better https://github.com/jeremyfa/node-exec-sync
18:23 < ashnur> i need a bit a of help. I want to exit with a non-zero code from node.js but I don't want the stack trace to be shown...
18:24 < ashnur> is this possible?
18:24 < Gottox> process.exit(nbr)
18:24 < Gottox> iirc
18:24 < ashnur> nbr? what is nbr?
18:25 < Gottox> the exitcode
18:25 < Gottox> node -e "process.exit(4)";echo $?
18:25 < ashnur> i tried with exitcode 1
18:25 < ashnur> i am not good with these exit codes
18:25 < Gottox> should work to
18:26 < Gottox> o
18:26 < ashnur> yeah, it works, as it exists but it gives a large traceback log
18:27 < EvilPacket> brianng: I'm seeing CSP: Directive "inline script base restriction" violated as the violation - looking into why this is.
18:27 < ashnur> Error: Unknown signal: 1 \n at ChildProcess.kill (child_process.js:998:11)\n .. and 9 other lines
18:27 < brianng> i enabled script-src to my domain too
18:28 < EvilPacket> k
18:28 < Gottox> ashnur: do you use cluster or fork child processes?
18:30 < ashnur> no, nothing like that. just `node index.js`
18:30 < ashnur> Gottox: actually. some of the modules I use might do that. i am not sure
18:31 < ashnur> i just had to think for a second at it is likely
18:31 < Gottox> I suspect so, without any module-loading, it works for me.
18:32 < ashnur> yeah, i just tried it too
18:32 < ashnur> ok. so the problem is not where I thought it to be
18:32 < ashnur> thanks Gottox 
18:32 < Gottox> your welcome :)
18:33 < ashnur> mine, mine
18:35 < reactormonk> anything sweet to read from stdin one json at a time?
18:36 <@isaacbw> butterscotch
18:36 < ashnur> what
18:37 <@isaacbw> yum
18:37 < ashnur> i actually had to see if there is a module named like that
18:38 < brianng> EvilPacket any luck?
18:38 < EvilPacket> brianng: no this is maddening lol
18:38 < EvilPacket> even if I just load up socket.io.js and not anything else it gives me the violation
18:39 < brianng> lol
18:39 < brianng> helmet's fault?
18:39 < EvilPacket> I hope not…. or I'll have to slap myself :-)
18:40 < brianng> lol
18:40 < EvilPacket> I had a similar violation with jquery and backbone (if I remember right) and I had to just update the lib and it was fine. I don't know what might be causing this..I'll keep digging.
18:41 < brianng> its for both chrome n firefox btw that it doesnt work
18:41 < brianng> i see
18:41 < EvilPacket> helmet really only sets the default policy which is very restrictive...
18:41 < brianng> thanks evilpacket
18:41 < brianng> yes...i added stuff like connect-src and script-src
18:41 < brianng> didnt work
18:41 < EvilPacket> yeah
18:41 < EvilPacket> same here.
18:42 < EvilPacket> it's not even complaining about that it's just loading the base js lib..which is strange imho.
18:44 < EvilPacket> brianng: this is the ticket in which jquery got fixed for something similar. I'm curious if it's just a similar issue. http://bugs.jquery.com/ticket/7371
18:45 < brianng> ok
18:45 < brianng> hmm so u reckon socket.io has a similar issue?
18:46 < brianng> EvilPacket so what can i do ? :(
18:47 < EvilPacket> brianng: that's all I have to go off of at the moment. I'm going to try and figure it out. For now disable csp for dev
18:48 < brianng> ok EvilPacket
18:48 < brianng> guess i gotta use other methods to prevent csrf
18:48 < sinclair-work> socket.io is very mature now right?
18:48 < brianng> like maybe expressjs' csrf token
18:48 < EvilPacket> brianng: trick there is just send a authorization value over the socket
18:49 < brianng> yea
18:49 < brianng> will do that
18:49 < brianng> or can i just check the xdomain whether its true or false?
18:49 < EvilPacket> or, set your origin header to be just your domain if no other site should be connecting via websocket to your app
18:49 < brianng> how do i set my origin header evilpacket?
18:50 < EvilPacket> https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO origins is by default *:* 
18:50 < EvilPacket> not sure with express.io....
18:54 < brianng> thanks very useful evilpacket
19:01 < EvilPacket> brianng: a policy defined as 'connect-src': ["ws://localhost:7076", "http://localhost:7076"], will work for chrome (At least in my test) I have no freak'n idea for firefox..have to run for a bit but will persist on figuring this out.
19:01 < brianng> awesome
19:01 < brianng> thanks!!
19:10  * squeakytoy scratches his head
19:10 < squeakytoy> neither promise or async decreases or makes the code readable, hm
19:10 < squeakytoy> nor, more readable*
19:27 < brianng> hi
19:27 < brianng> i need some help with socket.io origins
19:27 < brianng> origins defaults to *:*
19:28 < brianng> how do i restrict it to my domain?
19:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:33 < brianng>  app.io.set('origins','*.example.com:80');
19:33 < brianng> doesnt work
19:33 < brianng> it only accepts example.com
19:33 < brianng> not www.example.com
19:34 < brianng> help? anyone?
19:39 < harrisonm> brianng: #socket.io might be a better place for this question
19:39 < brianng> ok ty
19:45 < macbn> how to make a blocking function
19:45 < macbn> like returning something
19:45 < macbn> var a = function();
19:45 < Havvy> A function blocks by default.
19:46 < Havvy> You just return a value at the end.
19:46 < macbn> that function is requesting to database
19:46 < macbn> how to block function call
19:46 < macbn> var databaseResult = getSomething();
19:47 < macbn> getSomething = function (callback) {};
19:47 < macbn> i want to get rid of the callback that gets the result
19:47 < Havvy> Umm, not sure if you can there. Unless they give a synchronous function.
19:47 < macbn> i want to use return
19:47 < macbn> do you think this would help
19:47 < macbn> https://github.com/laverdet/node-fibers
19:47 < Havvy> I haven't looked at node-fibers.
19:48 < macbn> my problem is to get some returned data in jade using a function
19:48 < macbn> have you heard it before?
19:49 < ashnur> why the hate on callbacks :(
19:49 < macbn> because jade doesnt support callback
19:49 < macbn> im using this function in jade
19:49 < macbn> i like callback
19:49 < macbn> but in this case its kind of difficult
19:50 < macbn> like it has to return something
19:50 < macbn> so i can do this in jade
19:50 < macbn> var something = getValue();
19:50 < macbn> #{something}
19:50 < macbn> if i do
19:50 < macbn> getValue(function(something) {
19:50 < macbn> #{something}
19:50 < macbn> });
19:50 < macbn> i dont know how to do that in jade with callback
19:54 < bingomanatee> question - if you have an array whose element indexes start from "not zero" (say, 100… 200) are you wasting memory for the no used indexes? Are you better off using objets in this case?
19:54 <@isaacbw> use objects
20:01 < QRPIKE> Looking for someone with experience compiling a linux kernel - will pay $$
20:01 < Havvy> QRPIKE: ##linux ??
20:01 < dypsilon> on a node.js channel?
20:02 < dypsilon> looking for a maid - will pay $$
20:02 < QRPIKE> Im using NodeJS to do the scripting of it, but just need someone with Linux Kernel support ~ I'll check the linux channel
20:02 < Havvy> macbn: https://gist.github.com/Havvy/5522004 Might this help?
20:02 < QRPIKE> dypsilon lol
20:02 < macbn> how would i use this
20:04 < bingomanatee> two dollars?
20:04 < student-2013> Hello.Can i make chat server by node.js ?
20:04 < Havvy> Say you had a function `function divide (lhs, rhs) { return lhs / rhs; }`.
20:04 <@isaacbw> if you have to
20:04 < macbn> and lets say that function is async
20:04 < macbn> non blocking
20:05 < student-2013> Help me please.
20:05 < macbn> function divide (a, b) { setTimeout(function() { return a/b}, 1000); }
20:05 < macbn> something like this
20:05 < macbn> and then?
20:05 < Havvy> You normally call it `var res = divide(2, 3);`.  When you do `var asyncDivide = makeAsync(divide)`, then you can do `asyncDivide(2, 3, function (res, err) { ... });`
20:06 < bingomanatee> http://lmgtfy.com/?q=node+chat+server
20:06 < Havvy> Making something async is a one-way function, AFAIK.
20:06 < macbn> i want to make it sync
20:07 < bingomanatee> then use async.series
20:07 < macbn> like i want it to be able to do
20:07 <@isaacbw> you're out of luck
20:07 < macbn> var res = divide(2, 3);
20:07 < macbn> i dont want to use callback in this case, because I have to call this function in jade
20:08 < macbn> and jade seems to have no support for callbacks
20:08 < bingomanatee> the best thing to do is to do your async calculations, harvest the values, then call jade.
20:08 < Havvy> ^^
20:08 < devoidfury> macbn: not possible, you'll havet to do the function call in the route, before rendering
20:08 < bingomanatee> Templates are not async friendly -- it s a topographic issue. 
20:08 < macbn> i can do that but then I have to do double iterating
20:08 < devoidfury> jade, under the hood, is not async
20:08 < bingomanatee> you can't say "okay lets render the template except for this bit, which I'll render when I'm done polling my database."
20:08 < macbn> because this function call will be in the loop
20:08 <@isaacbw> it isn't possible macbn 
20:09 < macbn> how about using node-fibers
20:09 < macbn> https://github.com/laverdet/node-fibers
20:09 < Havvy> bingomanatee: Execute the async functions, and pass the final results of the async functions to Jade.
20:10 < sandfox> macbn: fibers have a lot of haters...
20:10 < bingomanatee> wow that guy really knows what he's talking about :D
20:10 < macbn> oh :(
20:11 < macbn> who?
20:11 < macbn> whos that guy
20:11 < bingomanatee> keep in mind - the problem of boiling down data via async composition and the problem of injecting variable values into templates 
20:11 < bingomanatee> just don't belong in the same loop. 
20:11 < sandfox> macbn: I'm personally am not a fan, but they work just fine. Just be aware that are definitely a contentious solution to callback hell, and some people will outright refuse to touch them, or anything that uses them
20:12 < dypsilon> like meteor
20:12 < devoidfury> it's a complex problem, so trying to rig it like you want will result in a comlex solution
20:12 < macbn> ya.. thats what im afraid
20:12 < sandfox> macbn: otherwise knock yourself out, just beware that they need compilation on target platform, and I don't think they work on nodejitsu (if thats your thing)
20:13 < sandfox> a lot really depends on your previous languages and what you find natural
20:13 < devoidfury> s/comlex/complex/
20:13 < macbn> i was using php
20:13 < macbn> and it was just ok
20:13 < macbn> cos blocking
20:14 < sandfox> fibres will probably seem more natural then
20:14 < macbn> ya but its risky?
20:14 < mh`> there's little chance they become alive and kill you in your sleep
20:14 < sandfox> if you're rewriting a library you want everyone else to use, maybe a little. if it's something for yourself, not at all
20:15 < devoidfury> macbn: you're probably better off grabbing the data beforehand and double iterating. it shouldn't hurt you much unless you plan to serve loads of traffic
20:15 < sandfox> s/rewriting/writing/
20:15 < macbn> devoidfury is it the best solution?
20:15 < sandfox> find the limits of what your prepaed to deal with, with callbacks first
20:15 < sandfox> don't solve a problem you don't have yet
20:16 < devoidfury> macbn I'd have to see the codebase and the spec to really tell
20:16 < macbn> im building an app not a library
20:16 < mh`> macbn: if you don't have experience with coroutines (say, gevent) i think you'll find fibers just as awkward as callbacks
20:16 < macbn> so fibers is not a good option?
20:17 < mh`> i didn't say that
20:17 < mh`> you're not going to get an absolute answer here… this will require some critical thinking on your part
20:17 < macbn> i havent tried fibers yet
20:17 < sandfox> it's very subjective
20:17 < macbn> but its kind of risky
20:17 < mh`> i was about to recommend the 'async' package but I see bingomanatee already did above
20:17 < mh`> https://github.com/caolan/async#series
20:17 < macbn> i think the safest solution is to do double iterating
20:18 < macbn> im using async
20:18 < sandfox> double iterating?
20:18 < mh`> pastebin some code
20:18 < mh`> you're doing something wrong
20:18 < macbn> but using async in this case wouldnt help my problem
20:18 < macbn> my jade code?
20:19 < devoidfury> macbn: if you're using exress and are concerned about the speed, check out https://github.com/devoidfury/express-debug -- it'll profile all your middleware, routes, and rendering
20:19 < bingomanatee> If you are on the client side, angular allows you to do things like 
20:19 < bingomanatee> (a) declare a place in your template to reflect a value in your controller
20:19 < macbn> can you use async series in jade?
20:19 < devoidfury> macbn: no
20:19 < bingomanatee> (b) call an async function to set the value of that variable
20:20 < macbn> ya so why mh' is saying im doing it wrong
20:20 < bingomanatee> (c ) update the view when the async function comes back with that value
20:20 < mh`> it was a safe guess
20:20 < devoidfury> there is no way to force an async function to return sync, AFAIK
20:21 < macbn> ok then i guess ill just make the iterating function
20:22 < macbn> to include the processed data in the list object
20:22 < mh`> you can force things to happen in a series
20:22 < mh`> chaining, etc
20:22 < macbn> instead of process the data in the loop inside jade
20:22 < mh`> https://github.com/medikoo/deferred
20:22 < mh`> https://github.com/kriskowal/q
20:23 < mh`> look at https://github.com/kriskowal/q#combination
20:23 < devoidfury> yes, but you can't do: x = someAsync();
20:23 < macbn> devoidfury yes to what?
20:23 < devoidfury> to mh`
20:24 < mh`> well, no, of course not
20:24 < mh`> doing so would block the whole vm
20:24 < macbn> if i cant then its not the solution
20:24 < mh`> if there was some way to force it to synchronize
20:25 < devoidfury> it's trying to fight against the nature of node
20:26 < macbn> a function with loop
20:26 < mh`> https://github.com/medikoo/deferred#limiting-concurrency
20:26 < macbn> is it safe to do var aa = functionWithLoop();
20:27 < mh`> try?
20:28 < macbn> functionWithLoop(object) { for(var object in objects) { include new prop to object } return objects; }
20:28 < macbn> is it safe to do like this?
20:29 < devoidfury> macbn: i'd avoid for ... in, use .forEach, traditional for loops, or Object.keys().forEach
20:30 < macbn> so make recursive function?
20:30 < macbn> after the objects are all iterated call the callback?
20:31 < Havvy> devoidfury: For just adding a property to a bunch of objects, I don't see why it can't be synchronous.
20:31 < Havvy> Unless getting the new property value is asyncronous.
20:31 < macbn> yes getting the new property value is async
20:31 < devoidfury> Havvy: I agree, just have seen some unintuitive behavior from `for ... in ...`
20:31 < macbn> using that problematic function i talked about before
20:32 < macbn> ill try to use foreach to see if it works
20:33 < devoidfury> obj.forEach if it's an Array, Object.keys(obj).forEach for an object
20:33 < Havvy> Then yeah, you'll want to use async.parellel
20:33 < macbn> how can i set new properties to each object of an array using parallel
20:34 < devoidfury> macbn: a code gist would help
20:35 < macbn> i normally use async parallel to call database functions with callbacks
20:35 < Havvy> (Having not used async myself, I don't exactly know the code to use. I just know the primitivies it gives.)
20:35 < macbn> oh
20:35 < macbn> anyway ill try forEach first
20:35 < macbn> this says http://stackoverflow.com/questions/5050265/javascript-nodejs-is-array-foreach-asynchronous
20:35 < macbn> foreach is sync
20:36 < devoidfury> correct -- for the most part, js core functions are sync, and node stdlib is async
20:39 < macbn> if i do objects.forEach(object) { object.aa = "new propertY" });
20:40 < macbn> will i actually make changes to the object in the objects?
20:40 < Havvy> devoidfury: It's not just for the most part.  There's nothing asyncronous in ECMAScript.
20:40 < devoidfury> Havvy: setTimeout?
20:40 < macbn> can i do return objects expecting the object inside objects has the new props?
20:41 < Havvy> setTimeout was originally a DOM extension.
20:42 < devoidfury> macbn: if you're iterating objects, it will modify the original objects so no need to return
20:42 < jooost> Hey there, I have a little question. Please see the following, but mind you that it's coffeescript: http://pastebin.com/j6EqASTn .
20:43 < jooost> Somehow, the function I pass to coffeeWatcher.on.stdout isn't regarded as function. Does anyone know what's going on?
20:43 < medice> objects are passed around as reference
20:43 < medice> and primitives by value
20:43 < macbn> oh this works!
20:43 < macbn> using foreach
20:43 < macbn> so maybe this should work if i use foreach in jade too?
20:44 < devoidfury> macbn: you can use it for iterating, but it still won't change any async functions to return synchronously, so be careful
20:47 < jooost> Oops, nevermind my question! Somehow I completely missed that spawn.stdout.on requires two arguments instead of one. Lol :)
20:47 < macbn> it would work perfectly 
20:47 < macbn> if i can do callback in jade
20:47 < macbn> like 
20:48 < macbn> - asyncFunc(function(data) {
20:48 < macbn> #{data}
20:48 < macbn> - })
20:48 < macbn> but at the moment it gives error
20:48 < macbn> is this actually possible?
20:48 < macbn> because it is possible with foreach
20:48 < geNAZt-laptop> why should it be ?
20:48 < macbn> - object.forEach(function(obj) {
20:49 < macbn> - })
20:49 < macbn> it works with foreach but why not async function
20:49 < geNAZt-laptop> object has no foreach
20:49 < macbn> then array
20:49 < macbn> array.forEach
20:49 < geNAZt-laptop> what does it say ?
20:50 < macbn> some weird error
20:50 < macbn> not in my code
20:51 < macbn> jade.debug.unshift({ lineno: 18, filename: jade.debug[0].filename });
20:51 < macbn>                                                         ^
20:51 < macbn> TypeError: Cannot read property 'filename' of undefined
20:51 < Havvy> Is jade.debug an array?
20:51 < geNAZt-laptop> can you comment that out ?
20:51 < Havvy> Oh, nevermind.
20:52 < macbn> that one is not in my code
20:52 < macbn> but jade actually calls my function
20:52 < geNAZt-laptop> well you cannot get the real error
20:52 < geNAZt-laptop> so you got a trace with that error
20:52 < macbn> i tried console log
20:52 < geNAZt-laptop> in that error there is a file and a line
20:54 < macbn> oh ok
20:54 < macbn> ill try to find out
20:54 < geNAZt-laptop> if you comment that line out you should see your real error 
20:56 < macbn> line 19 is the closing bracket of the function with callback
20:56 < macbn>               - }); 
20:57 < macbn> - asyncFunc(function(result) {
20:57 < macbn> #{result}
20:57 < macbn> - })
20:57 < macbn> and it seems like -}) causes error
20:57 < Havvy> You shouldn't have asyncFunctions in a Jade template.
20:57 < macbn> but will this actually work
20:58 < macbn> jade supports this syntax for forEach
20:58 < macbn> - array.forEach(function(value) {
20:58 < macbn> #{value}
20:58 < macbn> - })l
20:58 < macbn> - })
20:58 < macbn> but why not asyncFunc
20:59 < Havvy> Because at the end of the day, it's just string concatenation.
20:59 < devoidfury> anyone have a link to a tutorial about the difference between sync and async handy? that would be useful here
20:59 < Havvy> otherTemplateStuff + asyncFunc() + moreTemplateStuff
20:59 < Havvy> Chances are asyncFunc() is going to return either `underfined` or an Object (such as a Promise).
21:00 < macbn> that asyncFunc is actually called
21:00 < macbn> because i do console.log inside the asyncFunc
21:01 < Havvy> Also, having async code in templates is a failure of seperation of concerns.
21:02 < macbn> ok then ill just do the double iteration thing
21:02 < devoidfury> yes, but the inner bits aren't "returned" like usual. Under the hood, jade is doing: var rendered = ""; rendered += asyncFunc(function(result) {});. You can't do `x = someAsync()` and get the result in place
21:02 < macbn> iteration to set the new property and iteration to print in template
21:11 <@konobi> macbn: in future, please nopaste or gist your code please
21:11 < macbn> yes
21:11 < macbn> thank you
21:15 < mkozjak> Will|-: 3
21:15 < mkozjak> Will|-: oops, sorry
21:17 < Domenic_> What's an easy way to find the UTF-8 byte numbers for "ümläüt"
21:21 < macbn> i made mistake for the info
21:21 < macbn> the forEach loop
21:21 < macbn> didnt work properly
21:21 < macbn> async sync inside foreach
21:22 < macbn> asyncFunc inside foreach
21:22 < macbn> is not good
21:22 < macbn> for setting new prop
21:24 < macbn> i ll use async.each instead
21:46 <@konobi> isaacbw: http://thanpol.as/javascript/promises-a-performance-hits-you-should-be-aware-of/
21:51 < sandfox> konobi: Holy bat mobile, those promises implementations suck a lot of ass.. an order or magnitude more of slowness and memory consumption
21:53 < ningu> sandfox: link?
21:54 < sandfox> see konobi's link :: http://thanpol.as/javascript/promises-a-performance-hits-you-should-be-aware-of/
21:54 < ningu> yeah, I just got here so I didn't see it
21:56 < ningu> "In other words, Promises, per the specification, must be resolved Asynchronously! That comes with a cost, a heavy one apparently." -- well, duh. if you want sync code, don't use promises.
21:57 < ningu> it's silly to say: I wrote code that would do an async operation and stubbed it out with sync code, and discovered it was slower than writing the stubs as sync.
21:57 < AAA_awright> Why's everyone have to re-invent the wheel for callbacks
21:57 <@isaacbw> konobi: heh. Well, I really only use them clientside anyway
21:57 < AAA_awright> DOM has had a nice standard way of doing this for years
21:59 < Havvy> ningu: When people write things like this:
21:59 < ningu> the formatting of the code blocks on that site is dreadful.
22:00 < Havvy> getPromise(...).when(function (res) { return res + 1; }).when(function (res) { return res * 2; }), you start to see the performance penalties.
22:01 <@isaacbw> AAA_awright: because everyone is stupider than you
22:01 < ningu> Havvy: ok, but I still fail to see *why* you would use promises when your code is sync.
22:01 < ningu> what I want to know is how these things perform on actual async cases.
22:02 <@isaacbw> when you actually have deferred data, the promise logic isn't going to be your bottleneck
22:02 < ningu> so then he's basically saying, when you use promises for something they aren't meant to be used for, they suck.
22:02 < Havvy> ningu: In any case, async.js is clearly winning.
22:03 < ningu> Havvy: true, but again I'd like to see a comparison of a real use case
22:03 < ningu> I'm not even defending promises, I don't really care, just pointing out this is a stupid benchmark
22:03 <@isaacbw> if you use promises to benchmark basic arithmetic operations, they suck
22:03 < ningu> isaacbw: and if you are using promises to do basic arithmetic operations, you are probably confused.
22:04 <@isaacbw> hah
22:04 < Havvy> isaacbw: I'm using basic arithmetic operations to emulate synchronous functions that people might attach to promises.
22:04 < ningu> but what do I know. I don't even use promises.
22:06 <@isaacbw> I use them because they make me feel cool
22:09 <@isaacbw> can anyone recommend a good diagraming tool
22:09 <@isaacbw> something with boxes and labeled arrows and sitck people that I can label 'user'
22:11 < sandfox> isaacbw: Every diagramming tool sucks, pen/pencil + squared paper then photo FTW
22:12 <@isaacbw> I only write with pens
22:12 < ningu> whiteboard?
22:13 < sandfox> whiteboards good if they are around, but taking a photo of them can suck with office lighting and crappy/worn out pens (i really shouldn't know this)
22:14 < ningu> hehe
22:15 < ningu> so, there's a product that I would totally buy, but that afaik no one really sells: a portable, fold-out whiteboard
22:15 <@isaacbw> that's what walls are for
22:15 <@isaacbw> why do you think most walls are white?
22:15 < ningu> people sell small ones but not ones that fold out and are large
22:16 < ningu> they don't have walls like that where I want to use this.
22:16 <@isaacbw> they don't have walls?
22:16 < ningu> they don't have walls *like that* ... but yeah, sometimes I'd also want to use it places they don't have walls.
22:16 < ningu> this goes along with another thing I'd really, really like to have: a portable usb-powered printer, receipt-sized.
22:17 < asdffa43> nodejs is serving my index.html but not loading it's css file which is in the same directory 
22:17 < asdffa43> what's the problem with this line?  8  res.sendfile(__dirname + '/index.html'); 
22:18 < ningu> asdffa43: probably nothing. but why aren't you just using the static file server?
22:18 < asdffa43> ningu: testing locally
22:18 < asdffa43> ningu: node says its serving static content
22:18 < Zolmeister> just get rid of __dirname
22:18 < ningu> keep in mind __dirname is the directory where the .js file is so index.html will have to be in the same place
22:18 < Zolmeister> it should work
22:19 < ningu> asdffa43: what do you mean "node says"?
22:19 < asdffa43> ningu: terminal output
22:19 < ningu> asdffa43: yes, but what are you using to serve static files?
22:19 < asdffa43> Zolmeister: Error: ENOENT, stat '/index.html'
22:19 < ningu> you'll have to be more specific
22:19 < ningu> or pastebin some code
22:19 < asdffa43> ningu: have no idea what you're asking
22:20 < ningu> asdffa43: node is just a platform, you have to actually load some modules or write some code to serve static files.
22:20 < ningu> if I don't know *how* you're serving the static files I can't help you at all.
22:20 < asdffa43> ningu: yea those are there
22:20 < ningu> ok, but what are they?
22:20 < ningu> if you don't pastebin your code I won't have anything else to say
22:20 < asdffa43> __dirname is require, i think the problme is dirname includes a '/' at the end
22:21 < Zolmeister> asdffa43: remove the '/' in front
22:21 < asdffa43> Zolmeister: no it actually needs it, the path doesn't include a /
22:22 < thealphanerd> hey guys… anyone here ever publish a paper at a javascript centric conference?
22:22 < ningu> asdffa43: pastebin.com
22:22 < Zolmeister> - /index.html ~= index.html
22:22 < Zolmeister> !=*
22:22 < Zolmeister> asdffa43: like people said though, put the file in the same folder as app.js and you should be good
22:24 < asdffa43> Zolmeister: it is
22:24 < asdffa43> they both are
22:24 < Zolmeister> asdffa43: res.sendfile('index.html')
22:25 < asdffa43> i posted the error thta produces already
22:25 < ningu> asdffa43: pastebin your code or you're just wasting everyone's time.
22:25 < Zolmeister> ^
22:26 < asdffa43> http://pastebin.com/download.php?i=wY3cZCGA
22:26 < Zolmeister> a download link.... really....
22:26 < thealphanerd> de downloadified http://pastebin.com/wY3cZCGA
22:27 < Zolmeister> thnx
22:27 < thealphanerd> :P
22:27 < asdffa43> download link = direct link 
22:27 < thealphanerd> asdffa43: I know how to fix this for you
22:27 < Zolmeister> first comment: http://expressjs.com/api.html
22:28 < asdffa43> thealphanerd: no tnx
22:28 < thealphanerd> the problem you are having is that you only have a route for the html
22:28 < asdffa43> Zolmeister: it was a note to myself
22:28 < thealphanerd> no tnx???? do you not want help?
22:28 < asdffa43> thealphanerd: ah i think you're right
22:29 < thealphanerd> add something like http://pastebin.com/84ftqGSH
22:29 <@isaacbw> just use the static middleware
22:29 < ningu> also, you declare your routes after server.listen which is kind of strange
22:30 < thealphanerd> taken from https://github.com/TheAlphaNerd/interface.js/blob/master/server.js
22:30 < thealphanerd> ningu: I think that route declaration is straight out of the express documentation
22:30 < ningu> thealphanerd: not any docs I've ever seen, the listen always comes last
22:31 < thealphanerd> hmmm… interesting… swing that right now, perhaps from 2.x doc?
22:31 < thealphanerd> because I know the code I just pasted has listen up top and was hacked from boilerplate express code
22:31 < ningu> hmm, could be
22:31 < ningu> I haven't used 2.x in a long time
22:32 < thealphanerd> I never got around to 3.x
22:32 < asdffa43> thealphanerd: didn't do it
22:32 < asdffa43> can someone link me to a modern working chat app?
22:32 < thealphanerd> asdffa43: if you look at the syntax of my code everything is in a folder called "public" with a relative path from there
22:33 < thealphanerd> take a look at the github repo and the way the files have been organized
22:33 < thealphanerd> that being said… this is a super shitty way of using express (fwiw)
22:33 < asdffa43> thealphanerd: so ... the html and css can't be in the folder where app.js is and node is running from?
22:33 < ningu> asdffa43: they can be, but that isn't good practice
22:33 < thealphanerd> asdffa43: well it could be… but its ugly ^^^^
22:34 < thealphanerd> PLUS… if you made the main folder able to be resolved… including all .js files people could potentially resolve your server side js… which you might not want public
22:34 < asdffa43> thealphanerd: i'm doing that 
22:35 < asdffa43> i'm not*
22:35 < ningu> you're not doing much of anything as far as I can tell
22:35 < thealphanerd> well if all your css and html is in the same folder as the server script it is exactly what you are doing
22:35 < ningu> you seem to want us to write your code :P
22:36 <@isaacbw> yay irc
22:36 < ningu> hehe
22:36 < superjoe30> yay irc
22:36 < Zolmeister> yay irc;
22:36 < ningu> what type would yay be?
22:37 < Zolmeister> its coffeescript
22:37 < Zolmeister> yay(irc);
22:37 < superjoe30> haha
22:37 < ningu> ahh
22:37 < ningu> why the semicolon?
22:37 < Zolmeister> for fun
22:37 < superjoe30> because fuck the police
22:38 < ningu> sir, do you know why I pulled you over?
22:38 < superjoe> no officer
22:38 < gluxon> superjoe30: You're under arrest.
22:38 < asdffa43> what seems to be the officer, problem?
22:39 < superjoe> may I ask what I am being charged with, officer?
22:39 < thealphanerd> it appears your code doesn't minify
22:39 < thealphanerd> I am charging you with using too much sugar
22:40 < Zolmeister> but officer, we have to support ie6!
22:40 < superjoe> hahaha
22:40 < thealphanerd> but yeah… anyone know of any peer reviewed js focused conferences?
22:41 < superjoe> what does peer reviewed mean in the context of a conference?
22:41 < asdffa43> thealphanerd: if i put only 'index.html' ,where does it look for that file?
22:41 < ningu> I'm not sure what he means either -- maybe he means conferences where you submit an abstract and there is an abstract committee
22:42 < thealphanerd> ningu / superjoe: conferences where you paper needs to be peer-reviewed in order to be put in the proceedings, and where the proceedings are published and categorized within academic journal aggregators such as JSTOR
22:43 < ningu> conference proceedings are rarely in journals unless there is a special issue of the journal for the conference
22:43 < ningu> the normal way to do it is (1) present at conference and get feedback, (2) submit to journal
22:43 < thealphanerd> aahhh cool
22:43 < thealphanerd> I'm new to higher level achedemia
22:43 < ningu> keep in mind I'm not speaking as a computer scientist here
22:43 < thealphanerd> getting my first stuff published at NIME in a couple weeks
22:43 < ningu> but as a linguist
22:44 < ningu> however, I think this is pretty general advice
22:44 < thealphanerd> have a research project I'm working on right now… and trying to figure out where to submit it to
22:44 < ningu> yeah, that's something I wouldn't know the answer to
22:44 < ningu> but others here might
22:44 < xk_id> thealphanerd: how are you paying your bills?
22:44 < thealphanerd> muthafunkin fellowship bitch :D
22:44 < xk_id> ahem :p
22:44 < thealphanerd> sorry that was crude
22:44 < ningu> thealphanerd: are you in a masters/ph.d. program, or what?
22:45 < thealphanerd> masters in music science and technology
22:45 < thealphanerd> at ccrma 
22:45 < xk_id> I'd fancy a fellowship
22:45 < thealphanerd> It was a sweet gig this year
22:45 < thealphanerd> although next year is out of pocket for the two quarters I don't TA
22:45 < xk_id> but, after I'm done with my undergrad (in 2 days), I'll most likely end up in some euphemistic form of slavery :)
22:45 < ningu> thealphanerd: I see. well I'd think your professors would be the ones to ask about where to publish
22:45 < ningu> unless it's unrelated to your program
22:45 < thealphanerd> well I'm in this weird limbo
22:46 < thealphanerd> it is related… as it is digital signal processing related
22:46 < thealphanerd> and I'm thinking about putting something together for AES
22:46 < thealphanerd> or possibly some other audio based conference
22:46 < thealphanerd> but I think it would be a great paper for any conference that was related to browser technology
22:46 <@isaacbw> I bet your professor(s) would have a much better idea
22:46 < thealphanerd> I talked to him already
22:46 < ningu> thealphanerd: some conferences do have widely read proceedings, depends on the conference
22:47 < thealphanerd> and I have this list
22:47 < thealphanerd> http://www.music.mcgill.ca/~gary/conferences.html
22:47 < thealphanerd> so I have a big list
22:47 < ningu> for example I think the acoustical society of america publishes proceedings in their own journal
22:47 < thealphanerd> NIME has some of the papers go to the computer music journal I believe
22:48 < thealphanerd> still trying to figure out all this stuff… although if I don't go for a phd it might not matter in the end
22:48 < ningu> conference proceedings are not generally considered peer reviewed publications, though
22:48 < ningu> it's still good to put on your CV that you got into a conference, especially if it required you to get an abstract accepted
22:48 < xk_id> although there's peers there reviewing your shit :p
22:49 < ningu> xk_id: the question is whether they reviewed the manuscript and whether its acceptance was conditional on their reviews
22:49 < xk_id> yes, yes, I know :)
22:49 < ningu> an abstract isn't enough, since it's just a 500 word summary
22:50 <@isaacbw> thealphanerd: well, javascript itself doesn't have a very big academic following
22:50 < thealphanerd> ningu: manuscript was reviewed… was required for acceptance
22:51 < ningu> thealphanerd: oh, ok. but I assume the manuscript was a paper, not just a handout or something?
22:51 < thealphanerd> isaacbw: yeah… I was thinking maybe along the lines of multimedia web technologies....
22:51 < thealphanerd> ningu: indeed… there was a 4 page paper and a 2 page paper
22:51 < thealphanerd> nothing super fancy but it was something
22:51 < ningu> thealphanerd: that's getting closer to peer reviewed, then. so the only question is whether/how they publish proceedings
22:52 < ningu> thealphanerd: again, standards vary a lot by field and your professors should know what publications count for what
22:52 <@konobi> thealphanerd: have a look at the ACM 
22:53 <@isaacbw> acm is great
22:53 < thealphanerd> ahhh good call
22:53 < thealphanerd> and they have a bunch of paper deadlines that are possible
22:54 < ningu> hmm
22:54 < ningu> so ACM is just a very general computing conference?
22:54 < ningu> like the AAAS of computing or something
22:54 < ningu> or maybe not, looks like they have more focused conference
22:54 < ningu> s
22:55 < thealphanerd> was just peeking
22:55 < thealphanerd> doesn't seem like my paper makes great sense with them
22:55 < thealphanerd> (wow horrible sentence)
22:56 < xk_id> OTOH, I've seen quite a lot of seemingly offtopic papers published in various journals. So there might still be a point in sending it. 
22:56 < xk_id> I'm not sure how those offtopic papers get accepted. 
22:56 < ningu> especially if the paper is already written, it can't hurt to submit it -- although you aren't supposed to submit the same paper to multiple journals at once
22:57 < ningu> you should also find out what the turnaround time is for reviews as that varies a lot
23:01 < thealphanerd> yeah… lots of thinking to do
23:01 < thealphanerd> thanks for the help guys :D
23:05 < thealphanerd> http://www.cmmr2013.cnrs-mrs.fr/
23:05 < thealphanerd> this one looks neat
23:12 < asdffa43> how do i send text to the server with <textarea ...> ?
23:12 < SiGe> I ... just can't understand your question asdffa43
23:13 <@konobi> thealphanerd: acm have a whole bunch of different conferences
23:13 < peterschmidler> Is there anyone who has made some experiences deploying node.js apps to a fps using stagecoach?
23:13 < chilts> asdffa43: is your <textarea> in a <form> with a submit button and an action and all that good stuff?
23:13 < peterschmidler> ^vps
23:14 < asdffa43> chilts: no, should i use 'onkeypress' ?
23:14 <@konobi> thealphanerd: for example, siggraph is an acm conference
23:14 < chilts> asdffa43: step back a second, what are you trying to do? are you wanting a form or an Ajax request sending something from the textarea based on an action?
23:14 < chilts> give me the high level view! :)
23:15 < asdffa43> chilts: send text from a box
23:16 < ningu> asdffa43: how do you want it to be sent? when the user clicks "submit"?
23:17 < thealphanerd> konobi: was looking at the acm list. Not feeling like my research fits
23:18 <@konobi> thealphanerd: http://www.acm.org/sigs
23:25 < TheAceOfHearts> so… I have a laser tag game. I have lobbies and stuff using socket.io. But I'm not sure how I should go about handling the actual game logic. Like, multiple games can be going on at once — either Timed Deathmatch or Deathmatch. The devices send me some data when they get hit, and I have to keep track of who's winning and such, any suggestions?
23:26 < Bubo|2> TheAceOfHearts: is it open source? I would love to see the code
23:27 < TheAceOfHearts> it's open source, and horribly shameful; I've been hacking it together for a few days
23:27 < TheAceOfHearts> https://github.com/cesarandreu/laser_tag_nodejs server, https://github.com/cesarandreu/laser_tag_reloaded ARM Cortex-M3 application, https://github.com/cesarandreu/laser_tag_android phone app that handles all the communication 
23:28 < TheAceOfHearts> well, it should be: https://github.com/cesarandreu/laser_tag_android/tree/online_version
23:28 < TheAceOfHearts> https://github.com/cesarandreu/laser_tag_reloaded/tree/MergingMasterAndGabriel and this
23:28 < TheAceOfHearts> since I haven't merged it to the main branch yet
23:29 < TheAceOfHearts> as of right now, I'm really just trying to get this to run before our deadline; the MCU application works 100%, and it's tested 
23:29 < TheAceOfHearts> and now I'mhacking together the phone app and server
23:30 < TheAceOfHearts> I'm gonna include schematics and stuff in the repo when I finish my class too :p
23:30 < SomeoneWeird> nice!
23:31 < Bubo|2> awesome
23:31 < TheAceOfHearts> so, it's a gun + vest, and it has BT so it connects to an android phone, and then you track all the stats with that 
23:31 < SomeoneWeird> sweet
23:32 < SomeoneWeird> would love to see a demo when it's all done :)
23:32 < TheAceOfHearts> I'll probably take vids and stuff once it's finished :D, so far I've put in a LOT of hours into this
23:32 < TheAceOfHearts> too many...
23:32 < Bubo|2> nice
23:34 <@isaacbw> so one out of seven flex boxes in my dom is 0.1px off from the rest :/
23:34 < TheAceOfHearts> you should try looking at it very angrily, that might fix it
23:35 <@isaacbw> will report back
23:35 <@isaacbw> on results of angry looks
23:37 < asdffa43> ningu: when the user presses enter
23:37 < asdffa43> if my server is serving https, will it be encrypted?
23:40 < Havvy> asdffa43: Via TSL, yes.
23:41 <@konobi> o.O
23:42 <@konobi> TheAceOfHearts: if you want to get really crazy, there's always vector clocks
23:42 < wasd> Hi, I am trying to emit an event after a post request using node.js/express.js/socket.io but I'm having some issues. Would someone mind taking a quick look? http://pastebin.com/0uiSjG3W
23:42 < TheAceOfHearts> konobi: I have no idea what that is
23:42 < ningu> asdffa43: I suggest you do some basic reading about how form submission works
23:42 <@konobi> TheAceOfHearts: this is what wikipedia is for =0)
23:43 < TheAceOfHearts> I just googled it
23:43 < TheAceOfHearts> but
23:43 < TheAceOfHearts> this seems a bit complicated 
23:43 <@isaacbw> I think I found a webkit rendering bug :(
23:43 <@konobi> TheAceOfHearts: that's somewhat math-ey, but there should be practical examples around the place
23:43 < TheAceOfHearts> I was just thinking of having the server keep track of time, and having the phones be dumb clients
23:46 < whatasunnyday>  whoops
23:46 < whatasunnyday> i accidently dc'ed
23:46 < whatasunnyday> did anyone respond to wasd?
23:46 < Havvy> No.
23:47 < whatasunnyday> :( oh well
23:47 < niggler> lol isaacbw are you sure it isn't an arch bug?
23:47 <@isaacbw> niggler: lol
--- Log closed Mon May 06 00:00:51 2013
