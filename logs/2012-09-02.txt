--- Log opened Sun Sep 02 00:00:05 2012
00:01 < TehShrike> Well obviously he's winning!
00:03 < cleos_frey> TehShrike: hehe, makes me feel better about never being formally indoctrinated with OOP
00:04 < cleos_frey> enjoy my JavaScript and prototypes
00:08 < TehShrike> Objects can be awesome, but I think I'm over classes now
00:10 < cleos_frey> yeah, I try to read lots of python and JS code. Sometimes in Python I'll see really clean and clever uses of classes
00:11 < cleos_frey> then other times, I'll open a repo and be like "wow there's a lot of stuff going on and lots of code, this must be some serious business"
00:11 < cleos_frey> but it just turns out the problem isn't that difficult, and the solution is over engineered
00:13 <@konobi> cleos_frey: over-engineering is fine, as long as it's readable... but lots of folks just over engineer by adding more code rather than refactoring
00:14 < BronzeByte> konobi, I had a long thought today about node.js classes, protype;s vs object member defining vs json array vs function in function
00:15 < BronzeByte> function in function won, it is a real class in my opinion, because you can call other functions in the same class from it
00:15 < TehShrike> Why not just return an object with properties that are functions?
00:15 < BronzeByte> wait wut?
00:15 < TehShrike> For most of my simple objects, that works pretty dandily
00:16 < TehShrike> return { someFunction: function() { console.log("butts!") }, some_property: 69, somethingElse: aFunctionDeclaredAbove }
00:16 < BronzeByte> var my_class = function() {
00:16 < BronzeByte>   
00:16 < BronzeByte>   function some_func() {
00:16 < BronzeByte>     console.log('hello world');
00:16 < BronzeByte>   }
00:16 < BronzeByte>   
00:16 < BronzeByte> };
00:17 < BronzeByte> TehStrike, i mentioned your method too
00:17 <@konobi> BronzeByte: pastebin plz
00:18 < BronzeByte> sorry :3
00:18 <@konobi> np
00:18 < BronzeByte> Actually, konobi, can I paste one little snippet? Im getting rather annoyed of all those people joining and leaving
00:18 < BronzeByte> so why can some useful code be a problem? :P
00:18 <@konobi> oneliners are fine
00:19 < BronzeByte> nvm then xd
00:19 <@konobi> but beyond that, pastebin ^_^
00:19 <@konobi> or gist, or whatever
00:19 < BronzeByte> my favourite way of doing a class: http://pastebin.com/x8GtaZ01
00:19 < BronzeByte> well, my most productive way
00:20 < TehShrike> I've done that too, but now I tend to break things up a bit more
00:20 < TehShrike> That way causes a new version of that hello_world function to get created every time the constructor is called
00:20 <@konobi> i like the moose/joose idea... but not sure how to fit it to a prototype world
00:20 < AntelopeSalad> if you do it like that, wouldn't hello world be copied to every instance?
00:20 < TehShrike> So I generally only do that if I really need a new version of the function created for every single instantiation
00:20 < AntelopeSalad> it's like you're in my brain TehShrike
00:20 < TehShrike> *internet high-five*
00:21 < BronzeByte> hmm...
00:21 < BronzeByte> interesting
00:21 < BronzeByte> that makes sense
00:21 < BronzeByte> so you would use json?
00:21 <@konobi> you might get into interesting uses of "this" in that scenario too
00:21 < BronzeByte> or something like
00:21 < TehShrike> I would break it up into functions that take data and return other data, instead of modifying this
00:22 < BronzeByte> my_class = function() { /* constructor * } my_class.prototype.some_func = function() { ... }
00:22 < BronzeByte> TehStrike, is that how YOU would do it?
00:22 <@konobi> TehShrike: ie: pass "this" as an argument, similar to perl?
00:22 < cleos_frey> why not just use prototypes and add methods to the constructor's prototype
00:22 < BronzeByte> cleos_frey, i just mentioned that 2 lines above :P
00:22 < AntelopeSalad> that is how i would do it
00:23 < cleos_frey> BronzeByte: well now there's two votes for prototypes, haha
00:23 < BronzeByte> I am discussing... not having a fight
00:23 < AntelopeSalad> i don't think there is a black and white right or wrong answer tho
00:23 <@konobi> my most common JS writing... 'var self = this;'
00:23 <@konobi> =0)
00:23 < cleos_frey> AntelopeSalad: THERE MUST BE
00:24 <@konobi> THERE IS ONLY ZUUL
00:24 < BronzeByte> so, you guys would make the constructor set stuff as variables
00:24 < BronzeByte> var my_class = function(var1) { this.var1 = var; }
00:24 < BronzeByte> like that?
00:25 < chesles> BronzeByte: that's what i normally do
00:25 < BronzeByte> So do we all agree that is the best way of doing it performance/language wise? :-P
00:25 < chesles> then instead of this.method = function() { ... } in the constructor, I do my_class.prototype.method = function...
00:25 < BronzeByte> I assumed that
00:26 < AntelopeSalad> the node source is littered with prototype based classes too
00:26 < chesles> i don't know if that's the "best" performance-wise..anybody else know?
00:26 < BronzeByte> konobi, is it possible to do this: http://pastebin.com/mCSjF8NJ
00:27 < cleos_frey> how about singleton objects! you get a lot more nesting and commas, which is always a plus!
00:27 < TehShrike> Well, I use functions in the prototype when it makes sense
00:27 < TehShrike> But I try to write stuff a bit more functionally - functions that just take an input and return something new
00:27 < BronzeByte> What about local functions :/
00:28 < TehShrike> I only write functions that modify their object when I think it would be a lot clearer to do so
00:29 < BronzeByte> so many people use receonnecting IRC clients
00:29 < BronzeByte> 700 people in here are idle/away
00:29 < TehShrike> Have your client block the join/parts
00:30 <@konobi> if only i could
00:30 < BronzeByte> I have HexCha
00:30 < cleos_frey> can you scroll in irssi like you would in vim? anyone know offhand?
00:30 < BronzeByte> *HexChat
00:31 <@konobi> cleos_frey: pgup pgdn work for me
00:32 < cleos_frey> konobi: oh nice that works
00:32 < cleos_frey> konobi: thanks
00:32 < BronzeByte> I simply cant understand why people would use windows as node.js production environment ._.
00:33 < BronzeByte> I cant sum people up
00:33 < BronzeByte> but I am sure some people do
00:33 <@konobi> MS have done a fairly decent job of adding support... if i had a client who was doing win32 stuff, i could see it
00:33 < gkatsev> cleos_frey: there's a vim-mode plugin for irssi, fwiw.
00:34 < cleos_frey> gkatsev: cool Ill check that out
00:34 < gkatsev> -g irssi vim-mode
00:34 < purr> gkatsev: irssi-scripts/vim-mode at master · shabble/irssi-scripts · GitHub <https://github.com/shabble/irssi-scripts/tree/master/vim-mode>
00:34 < cleos_frey> purr: aww yeahhh
00:35 < BronzeByte> I´m going to get some sleep
00:36 < cleos_frey> BronzeByte: gn
00:36 < BronzeByte> so I can work on my node app tomorrow on full steam :-P
00:36 < cleos_frey> BronzeByte: sleep tight
00:36 < BronzeByte> Thanks
00:36 < BronzeByte> I wrote like 10 lines of node today 
00:36 < BronzeByte> while I have a big todo list
00:36 < cleos_frey> BronzeByte: what time is it for you? I'm on the EST and it's like 830
00:36 < BronzeByte> GMT +1
00:37 < BronzeByte> = 2:36AM
00:37 <@konobi> bloody europeans!
00:37 <@konobi> =0P
00:37 < BronzeByte> you;re uk
00:37 < BronzeByte> xD
00:37 <@konobi> nah
00:37 < cleos_frey> jeez! late night
00:37 < BronzeByte> konobi, are you masking your IP?
00:38 <@konobi> i'm on PST time, but from .ie
00:38 < BronzeByte> bloody european!
00:38 <@konobi> indeed
00:38 < BronzeByte> Good night all
00:38 <@konobi> bloody expat european
00:38 <@konobi> =0P
00:47 <@konobi> who was it the other day that I was talking to who wanted my opinion on jekyll like frameworks?
01:12 < wolfeidau> konobi: Would love to see something like it written in node, mainly to take advantage of some of the new templating methods/libraries
01:13 <@konobi> wolfeidau: you again!
01:13 <@konobi> wolfeidau: well, i'm working on one at the moment... https://github.com/konobi/scatter
01:13 <@konobi> we'll see how it pans out
01:13  * wolfeidau is everywhere node atm :)
01:14 < wolfeidau> konobi: Yeah there are a couple of issues with jekkyl I have run into 
01:19 < nkuttler> any thoughts on Templ8 vs swig?
01:39 < garrettwilkin> is it considered bad practice to switch on strings in javascript?
01:40 < garrettwilkin> java makes you create an enumerated type
01:40 < garrettwilkin> so that you're actually switching on an int
01:43 < astropirate> Converting my docs from Naturaldocs to YUI  WHAT A PAIN!!!
02:05 < samholmes> What's going on when I try to install shoe? http://pastie.org/4648682
02:08 < substack> samholmes: you don't have git installed
02:08 < samholmes> substack: but I do.
02:09 < samholmes> How can I only use the Git Bash shell?
02:09 < samholmes> I'm using PowerShell
02:09 <@konobi> is git in your path?
02:10 < astropirate> samholmes, its an application all by itself. search for it in your startmenu
02:11 < samholmes> I could use Git Shell from GitHub for windows or Git Bash.
02:11 < samholmes> Or, I can set my path with what git bash has
02:12 < garrettwilkin> anybody tried using apiary.io yet?
02:12 < garrettwilkin> i think i'm going to give them a try soon
02:12 < garrettwilkin> they are an all node.js API docs & testing site
02:15 <@konobi> samholmes: are you deploying on a windows env?
02:15 < samholmes> konobi: no
02:17 <@konobi> samholmes: time to get a VM
02:18 < samholmes> Oh a macbook.. Mofos wont give me a bestbuy credit card though. -.-
02:20 <@konobi> eh?
02:22 < samholmes> konobi: meh, banks wont issue me any credit because I don't have any credit..
02:22 < samholmes> no credit history*
02:23 <@konobi> samholmes: well... work somewhere for a while...
02:23 < samholmes> konobi: ?
02:24 <@konobi> samholmes: ?
02:25 < samholmes> konobi: You mean, like a non-self-employed/non-startup type of job?
02:27 <@konobi> i said nothing...
02:28 <@konobi> i asked if you were doing stuff on a certain env... i don't know anything otherwise
02:43 < samholmes> So can a browser be a server someone using dnode?
02:43 < samholmes> Or is the browser version of dnode somehow stripped down?
02:47 <@konobi> samholmes: no idea
02:47 <@konobi> what are you trying to achieve?
02:48 < samholmes> konobi: I'm just learning about dnode/shoe right now, and I was curious as to how dnode is able to be duplicated on the client when the client would appear to lack a lot of the native modules in Node.js. 
02:48 < samholmes> I know that browserlify has wrappers for these native modules, but I'm still baffled at how it does it.
02:49 < samholmes> How does browserify do the net wrappers for example?
02:49 <@konobi> samholmes: probably time to hit up substack 
02:49 < substack> samholmes: dnode is just a stream
02:49 < substack> streams don't depend on io
02:50 < samholmes> Oh, so all dnode depends on is the streams native modules
02:50 < substack> yes
02:50 < pringlescan> Is there an IRC channel for general advice?
02:51 <@konobi> pringlescan: eh?
02:51 <@konobi> other than this one?
02:53 < pringlescan> Unrelated to Node. My best friend was in a bind so I let him stay with me at my mom's house for a while, he offered to help with a home improvement project that ended up taking all summer (should have been 1-2 weeks)… my mom kicked him out because he's a slob and now I'm trying to finish up the room… he ruined tons of tools that were borrowed, got paint in things I can't sand and basically I'm realizing he drug out this project
02:53 < samholmes> substack: How complete are the wrappers, are they just an abstraction and will they leak?
02:53 < pringlescan> I'm usually very level headed, but I'm very tweaked right now, trying to get a tool ready to return to my mom's boyfriend's neighbor (paint sprayer, electric) and he left paint in it, on it, and ruined it. I'm livid.
02:54 < poorman> ^ this guy
02:54 < poorman> x|
02:55 < pringlescan> samholmes, if a kid named jason made them, they will leak like a faucet, and he will leave other people's tools out in a hurricane and not pay to replace them
02:55 < substack> json does have some tricky switches
02:55 < deoxxa> pringlescan: lol wow, sucked in man
02:55 < samholmes> I didn't know json lived in tampa
02:56 < garrettwilkin> pringlescan: I would give yourself sometime to think the situation over
02:56 < pringlescan> I have to use BSON now, JSON and I aren't on speaking terms.
02:56 < deoxxa> pringlescan: don't listen to garrettwilkin - find the jerk and fight him
02:56 < garrettwilkin> pringlescan: what do you really want the out come of the situation to be?
02:56 < deoxxa> pringlescan: bring a gun!
02:56 < garrettwilkin> deoxxa: lol
02:56 < pringlescan> me to not be upset, i don't expect anything of him, he can't even help himself, i don't want revenge or restitution, it's just you try to help a guy and i never realized how much I was being taken advantage of
02:57 < deoxxa> pringlescan: make sure you think about all the shitty things he's done on the way over
02:57 < deoxxa> get reaaaaally angry
02:57 < pringlescan> well, I anticipated the kind of advice I'd get on IRC, so I ordered some brass knuckles and several assault weapons
02:57 < deoxxa> good, good
02:58 < pringlescan> i'm just pissed, my mom is on vacation and I've been working around the clock to finish it, and i'm spending hours at a time fixing what he did, and everything was preventable
02:58 < deoxxa> pringlescan: on a more realistic note, maybe trying listening to some cool music: http://soundcloud.com/rei-wada/gotta-get-ova-the-undertaker
02:58 < garrettwilkin> pringlescan: i have done something like that before too.  I offered to let a friend with bad credit use an additional line on a cell plan.  He never paid, and after a few months i just had to cut him off and ask for the phone back.  it sucked, but it was a lesson learned.
02:59 < pringlescan> this guy cost me 3 jobs, my last semester from school, and a good relationship with my mom, and many monetary damages
03:00 < garrettwilkin> pringlescan: okay way worse in your situation
03:00 < deoxxa> eek
03:00 < pringlescan> it's just when I think about what my "best friend" did, it makes me want to be a hermit with a girl that I fuck
03:00 < deoxxa> i think everyone's been in that kind of situation before, but it sounds like you really got the short end of the stick on this one
03:00 < pringlescan> i'm way too monk like, anyone else would have kicked his ass out months ago, now I just feel retarded
03:01 < deoxxa> all you can do is try to move forward and take it as a lesson that will hopefully let you see this kind of stuff coming from further off in the future
03:01 < garrettwilkin> agreed
03:01 < pringlescan> it's easy to say that, but the reason I'm upset is that I know I have weeks of work ahead of me cleaning up after him
03:02 < pringlescan> that's hard to cope for when I want to be working on code samples and getting a job. i feel like i won't be able to calm myself down because everywhere I turn I see something he fucked up.
03:02 < garrettwilkin> at least he's not still around making it worse
03:02 < deoxxa> i had a friend who stayed with me for ages, we were best mates in my last year of high school. he ended up leaving out of the blue one night, stealing a bunch of money from my mum and taking my bike (that i needed to get to work). so i know how you feel, i guess... but yeah, it never really started to feel better until i just decided to go on with things.
03:03 < deoxxa> so yeah, not saying "get over it", but just "don't let it slow you down"
03:03 < skeptic> I think node.js will be mature enough for production when most of it's users are too
03:04 < pringlescan> I think Node.js is growing up fast, but the people most likely to want to use it aren't good at event driven programming or debugging V8.
03:04 < skeptic> woosh
03:04 < deoxxa> i think node.js should stay underground bcuz that's way kewler
03:04 < pringlescan> No, you know what would make Node better?
03:05 < pringlescan> If it had 20-30 poorly written modules for a given task, then we could use make a require-roullete() that would wrap them all in the same API so we could make sure they all work the same.
03:05 < pringlescan> and then… and then… we could play spin the bottle with modules
03:06 < deoxxa> extra points if they modify the filesystem
03:07 < pringlescan> Before you hook into a module, always ask her if she's thread safe and asynchronous.
03:08 < pringlescan> well, thanks for letting me rant, i guess I'll just try to make a game plan that involves working on the house and getting a job, it's just everything is so messy that i have to shower and change in between so I don't ruin the rugs, guhhhh
03:08 < deoxxa> wheee
03:09 < samholmes> Idk why this is very hard to get my head around dnode/shoe, maybe it's just because I'm new to it. How do I call the client's functions from the remote?
03:09 < pringlescan> after this summer, i know I won't take a local perl job maintaining an existing code base, i already know I don't like shooting myself in the foot repeatedly and saying "why the hell would you do it like this"
03:10 < garrettwilkin> so i just realized that i was storing all my data wrong in Mongo
03:10 < pringlescan> garrettwilkin, atleast you get to use javascript to correct it?
03:11 < garrettwilkin> i was building this object that would hold some meta data
03:11 < pringlescan> … also I don't know if anyone else noticed, my 700mb database in MySQL took like 8-10 gb in Mongo
03:11 < garrettwilkin> and then i would pass in the actual meaningful data into this meta data constuctor
03:11 < garrettwilkin> so i have something like this
03:12 < pringlescan> garrettwilkin, that's the problem, if the object is of node.js's affection and you pass it to mongo it'll be sabatoged in transit, you have to use local unix sockets, it'll get fux0red with in the TCP layer
03:13 < substack> samholmes: you just remote.someFunction()
03:13 < garrettwilkin> https://gist.github.com/3594469
03:13 < substack> and/or you pass callbacks to functions and the other side calls them
03:13 < pringlescan> garrettwilkin, what's happening and what do you want to happen?
03:13 < pringlescan> oh you fixed it already...
03:14 < garrettwilkin> not yet...
03:14 < samholmes> substack: remove on the server side?
03:14 < pringlescan> I feel like I'm the only JS programmer that hardly ever uses this.
03:14 < garrettwilkin> i think that i should just use flat objects
03:14 < samholmes> Like you'd need a on('remove') listener and then you can use remote.someFunction()?
03:14 < garrettwilkin> like only objects that go one level deep
03:14 < samholmes> How could I keep a tab on remote clients so that way I can push data down to them?
03:15 < garrettwilkin> the reason i feel like i should be putting flat objects into my collections
03:15 < pringlescan> garrettwilkin, I'm not advocating premature optimization, but read high performance javascript on o'reilly, once you see the way that javascript is executed, you may rethink how you want to do things once you see how things go in and out of scope
03:15 < garrettwilkin> is that i don't want to have to write extra logic on mongo's field filtering API
03:16 < garrettwilkin> pringlescan: uhhh, you lost me :)
03:16 < pringlescan> do you have a .edu e-mail address?
03:18 < substack> samholmes: s/remove/remote/g
03:18 < pringlescan> If so, go to dream spark, sign up, get a free plural sight trial, watch the asynchronous javascript video, read javascript the good and bad parts, bookmark MDN and read high performance javascript and I like having a copy of javascript the definitive guide in front of me.
03:18 < substack> samholmes: you just use programming
03:18 < pringlescan> samholmes, I don't know what you're doing, but kue is pretty cool if you're not doing queuing over 20,000 things
03:20 < samholmes> pringlescan: idk
03:20 < samholmes> I'd rather learn dnode just to get familiar with it.
03:20 < samholmes> substack: So place the remote objects in a cache?
03:22 < samholmes> pringlescan: I'm trying to create a two way RPC sort of thing
03:24 < pringlescan> samholmes, i'm not true what you're trying to accomplish, but if work is being shared between multiple entities, it's a good idea to use a common data store that's persistent, reliable and fast.
03:25 < samholmes> pringlescan: One side is the browser, the other is the server. What I'm trying to do is use dnode/shoe to connect the client (browser) to the server and allow for two way communication via RPCs.
03:25 < pringlescan> … why wouldn't use use socket.io?
03:26 < pringlescan> *you
03:26 < samholmes> pringlescan: because
03:26 < samholmes> dnode is awesome
03:26 < samholmes> I like the minimilism of dnode/shoe
03:26 < samholmes> just haven't gotten much experience from it yet.
03:26 < samholmes> with it*
03:27 < pringlescan> socket.io isn't non-minimalistic, two-way communication between a wide-range of browsers is non-trivial due to firewalls and a bunch of things you can't possibly consider
03:27 < pringlescan> so if this is for a wide audience, i'd suggest you use something battle tested, if it's for academic purposes, and you just want to learn, i'd cut the browser out of it and just make some doo dads that run in node
03:28 < pringlescan> I mispoke, I didn't realize dnode did all of that :-) If it does all that then what's the problem?
03:29 < substack> pringlescan: you can get cross-domain websockets with fallbacks in a much more minimal fashion with sockjs that shoe uses
03:29 < pringlescan> I wear shoes on my feet, I'll have to find out what they do in Node.
03:30 < pringlescan> i stopped naming my modules cute things and started trying to name them like cpan modules
03:30 < pringlescan> it's less fun talking about them, but makes more sense in the long run
03:30 < pringlescan> 10 years from now: I need to do xyz in Node.
03:30 < pringlescan> Oh did you try the fuzzy slippers module? How about magic wand? 
03:32 < garrettwilkin> general question:  I have a object, and i want to add all its variables to another object
03:33 < garrettwilkin> I got as far as Object.keys(obj).forEach(...)
03:34 < garrettwilkin> but i couldn't figure out how if i have an object with a property foo that have value bar, how do i copy that over into a property named foo on another object?
03:34 < substack> garrettwilkin: you want merge
03:35 < garrettwilkin> whoa
03:35 < substack> > var src = { a : 1, b : 2 }, dst = { c : 4 }; Object.keys(src).forEach(function (key) { dst[key] = src[key] }); dst
03:35 < substack> { c: 4, a: 1, b: 2 }
03:35 < substack> easy to write yourself or there are modules on npm to do merging
03:35 < pringlescan> substack, I'm sorry, I didn't realize shoe was your module, I wouldn't be a dick like that to your face. I'm just making a general statement about how much easier it is to find CPAN modules without finding product listings for shoes.
03:36 < substack> pringlescan: I don't care for cpan-style hierarchical naming myself
03:36 < pringlescan> substack, here's where I run into an issue, i try to prepend my modules with node- on github, and then everything I write runs in the browser too, and then I never know what to name anything so it's easy for people to find
03:37 < substack> because the categorization seems so arbitrary and tags do a better job
03:37 < garrettwilkin> sweet thanks substack!
03:37 < substack> WWW::Proxy or WWW::GoodProxy or HTTP::Proxy or Net::HTTP::Proxy or ...
03:38 < substack> pringlescan: just let that be isaacs's problem
03:39 < pringlescan> substack, I'm not defending Perl, because there's a shit ton wrong with it, but I will say this, when you go to CPAN there is ONE module to do the job and you can tell what it does from the title column
03:40 < pringlescan> now, I may be stupid, I use nipster to search for modules, becuase the npm site seems to have no real search anymore, but I may be missing something
03:40 < substack> pringlescan: well there's List::Util and List::MoreUtils and List::AllUtils...
03:40 < substack> or was it AllUtil?
03:40 < substack> I disagree with that sort of rampant feature lumping
03:41 < pringlescan> Okay, that makes sense, BUT… would you rather have 3 overlapping modules with sensible names, or 10-15 overlapping modules with random names?
03:42 < substack> pringlescan: I would rather that modules just do exactly one thing well
03:42 < pringlescan> if the npm site embedded the right micro data for authors and … i'm not sure if software packages have a schema, google may suffice for the site's search but right now it's not returning just modules
03:42 < substack> then it doesn't matter if there's duplication because if everything is restricted in scope it doesn't matter
03:43 < garrettwilkin> Merging rocks my world
03:43 < substack> just use `npm search`
03:43 < garrettwilkin> i definitely leveled up just now :) wee!
03:43 < pringlescan> I assumed if the npm search feature was useful that the site would wrap around it
03:44 < pringlescan> substack, thanks, i prefer this much better
03:44 < pringlescan> now all I need to do is program a bot that watches for new github repositories for a module that already exists and i'll warn programmers that an identical module already exists
03:45 < substack> garrettwilkin: another more functional way to do merging is function merge (src,dst) { return Object.keys(src).concat(Object.keys(dst)).reduce(function (acc, key) { acc[key] = dst[key] || src[key]; return acc }, {}) }
03:45 < garrettwilkin> okay whoa
03:45 < substack> which just immutably returns a new object that merges src and dst
03:46 < garrettwilkin> so i was rewriting multiple files, after attempting to figure out how to merge and failing
03:46 < pringlescan> Does anyone know why jslint bitches about multiple return statements in conditionals? Is it for readability?
03:46 < substack> garrettwilkin: there's also deep merging where the contents of nested objects are recursively merged between the src and the dst
03:46 < garrettwilkin> and now that i know how to do this, i don't want all the changes that I made to my files
03:46 < substack> http://npm.im/deepmerge is a good module for deep merges
03:46 < garrettwilkin> how do i ask git to give me back the version before i started messing with it?
03:47 < substack> garrettwilkin: you could git checkout -b  the old hash and then rename your master branch
03:47 < substack> or git revert but I don't like that command as much
03:47 < gildean> git reset --hard <shaofcommit>
03:47 < gildean> for example
03:48 < substack> garrettwilkin: oh actually you probably just want `git stash`
03:48 < substack> if you haven't committed your changes
03:48 < gildean> stash is good
03:48 < garrettwilkin> yea i haven't committe
03:48 < garrettwilkin> d
03:48 < pringlescan> men never commit until it's too late and she's gone
03:49 < garrettwilkin> but i deleted the file! doh!
03:49 < garrettwilkin> thinking i could just "refresh" it
03:49 < garrettwilkin> lol
03:50 < garrettwilkin> so what's this about renaming master?
03:50 < pringlescan> I just realized how much of a nerd I am that I just did "npm search | wc" to see if I wanted to read through all of the modules to familiarize myself with the ecosystem or not
03:51 < deoxxa> i was meant to do a bunch of work on thursday/friday that i didn't do... i should do it now.
03:52 < deoxxa> or i could go back to sleep
03:52  * deoxxa hmmm
03:52 < gildean> garrettwilkin: http://git-scm.com/book/en/Git-Basics-Undoing-Things
03:52 < garrettwilkin> thanks
03:53 < gildean> deoxxa: i just woke up, imo if you are already awake, might as well stay awake
03:53 < garrettwilkin> oh i think i need git checkout
04:15 < asdft123> new npm site is hard to search for packages
04:15 < asdft123> i throw in search term 'express' a bunch of packages with the BSD license in their readme pop up :(
04:18 < asdft123> but anyway, i'm looking to see if someone has written a express module for admin images, like upload images, re-ordering etc. 
04:25 < samholmes> Can you just pass express' `app` to sock.install using shoe?
04:25 < samholmes> That question was horribly put.
04:25 < mscdex> asdft123: you can search by keyword at least: https://npmjs.org/browse/keyword/express
04:26 < mscdex> there ought to be a `foot` module that `shoe` depends on
04:26 < samholmes> is it okay to do this in shoe: sock.install(app, '/') ?
04:26 < samholmes> mscdex: foot.kickass()
04:31 < samholmes> mscdex: wouldn't foot be underneath sockjs and shoe?
04:33 < mscdex> i'm not sure, sockjs might be considered middlewear
04:35 < deoxxa> zing
04:39 < asdft123> sheet
04:39 < asdft123> is calypso any good? anyone used it?
04:43 < samholmes> Why do I get this "Welcome to SockJs!" message instead of my express view?
04:45 < samholmes> wth?
04:46 < astropirate> samholmes, c0de
04:47 < samholmes> astropirate: How do I make shoe and express work together?
04:48 < asdft123> if i know an object will never be used again, is it better to call delete(obj) or just leave it for the GC ?
04:48 < astropirate> samholmes, how can i build an intergalactic spaceship?
04:48 < astropirate> asdft123, leave it for GC
04:49 < asdft123> why
04:49 < samholmes> astropirate: yeah why?
04:49 < astropirate> asdft123, thats its job
04:49 < samholmes> It wont be gc'd if a scope references it
04:50 < astropirate> wow YUI documentation generator is sexy!!
04:50 < asdft123> seems like if its all the same, why not speed it up and not wait on the gc
04:52 < samholmes> substack: I keep getting this 404 error when using shoe: "GET http://lol:8002/test/info 404 (Not Found)" Why is /test/info even being requested?
04:52 < astropirate> asdft123, delete isn't meant for that
04:52 < astropirate> its not like the C++ delete
04:52 < astropirate> its meant for deleting object properties
04:52 < asdft123> i see
04:53 < samholmes> astropirate: isn't everything a property of the global/window object?
04:54 < astropirate> samholmes, that is true. what i mean is that its not a method for optomization or freeing memory. its for getting rid of properties that are no longer required
04:54 < astropirate> GC is to free up memory
04:54 < samholmes> I see.
04:54 < astropirate> infact,  using delete for object  on non-properties with  'strict_mode' will throw error
04:55 < samholmes> However, if you don't remove a property it wont be GC'd
04:55 < astropirate> http://perfectionkills.com/understanding-delete/#delete_and_host_objects
04:55 < samholmes> unless it's no longer in scope
04:59 < samholmes> https://gist.github.com/a4620a1132eec0d2508c
04:59 < samholmes> There's my code.
04:59 < samholmes> The problem is that I keep getting this error on the client-side: "GET http://lol:8002/test/info 404 (Not Found)"
05:01 < substack> samholmes: you've started up 2 servers
05:01 < substack> and you're trying to request the service on port 9002 from port 8002
05:01 < samholmes> subtack: that's because I can't seem to figure out how to get sockjs to work with express.
05:01 < substack> there's no reason to do that
05:02 < substack> sock.install(app, '/test') doesn't work?
05:02 < substack> anyways in the browser just do shoe('http://localhost:9002/test')
05:03 < samholmes> These changes actually fixed it https://gist.github.com/a4620a1132eec0d2508c
05:03 < samholmes> Idk why that didn't work before I started doing the two server thing.
05:05 < samholmes> substack: is the /info initial request apart of shoe or sockjs?
05:05 < substack> sockjs
05:06 < substack> shoe doesn't do much
05:07 < samholmes> substack: Do you happen to know why it makes this request and what would happen if my app had a /info route defined?
05:07 < appinsanity-mike> substack: can I ask you a question?
05:08 < substack> appinsanity-mike: you just did
05:08 < substack> no more questions
05:08 < appinsanity-mike> fuc
05:08 < samholmes> Btw, this is awesome! Finally getting dnode and shoe to work is fucking amazing! :D
05:08 < appinsanity-mike> ur right
05:08 < deoxxa> question quota filled
05:08 < substack> samholmes: it's /test/info
05:09 < substack> everything goes through a prefix
05:09 < appinsanity-mike> substack: ===?
05:12 < appinsanity-mike> substack: seriously, why abuse the triple equals?
05:12 < samholmes> substack: So just make a special route prefix like /sock and I'll avoid collisions. I see. I thought the prefix was sort of like socket.io's "channels", which is why I got confused.
05:13 < substack> appinsanity-mike: I like to deal with non-coercive equality
05:14 < substack> samholmes: use mux-demux for channels
05:14 < freewil> so does sockjs differ from socket.io in that you can just use sock as a normal ws server
05:14 < freewil> im not that familiar with socket.io but i believe it adds it's own way of doing things on top of ws
05:16 < appinsanity-mike> substack: and I like this planet so I try not to waste clock cycles doing type comparisons on to of equality comparisons 
05:17 < freewil> yeah ok
05:20 < appinsanity-mike> substack: no disrespect dude, it's a legit question, when the types are known why do "non-coercive equality" i'm seriously curious
05:23 < itsmontoya> Whats up everyone?
05:23 < appinsanity-mike> substack: no disrespect dude, it's a legit question, when the types are known why do "non-coercive equality" i'm seriously curious
05:26 < poorman> this is weird. chrome just all of a sudden has started spitting out 'Starting alter-web' into my console with every request
05:26 < poorman> I can't figure out where the hell it's coming from
05:28 < poorman> hmm, it's gotta be an extension cause it's doing it on all my machines now
05:43 < k_89> http://nodejs.org/api/http.html#http_http_request_options_callback ... i have a few questions about the example given here ... whats the purpose req.write('data\n')
05:44 < k_89> why is req.end() necessarry
05:44 < maxogden> k_89: most people do npm install request
05:46 < k_89> yeah i have worked with that a bit ... just want to know node better
06:03 < NuZZ> hey guys
06:04 < NuZZ> i have a problem to solve. so, i'm interpreting the IRC protocol and the problem is that the response buffer is cutting off mid-line
06:04 < NuZZ> ie. in the message of the day
06:05 < NuZZ> so this is end of one multiline buffer
06:05 < NuZZ> \r\n:lindbohm.freenode.net 372 Botty5001
06:06 < NuZZ> and the other starts with
06:06 < NuZZ> :- freenode runs an open proxy scanner. Your use of the network\r\n
06:06 < NuZZ> finishing the line, I'm confused as to how I am supposed to deal with this
06:07 < NuZZ> :- freenode runs an open proxy scanner. Your use of the network\r\n as a line is kinda hard to interpret, as half is missing (and it's different each time)
06:07 < appinsanity-mike> substack: to quote "non-coercive equality"… The avoidance strategy bothers me because you can’t master a language until you know it inside out – and fear and evasion are the enemies of knowledge. Moreover pretending == does not exist will not let you off the hook when it comes to understanding coercion because in JavaScript coercion is everywhere!
06:08 < substack> appinsanity-mike: I don't exactly have a problem understanding javascript
06:08 < substack> I don't like how == works so I don't use it
06:09 < substack> if I want operators to coerce values then I'll coerce them manually
06:10 < appinsanity-mike> substack: what is the problem the equality operator?
06:10 < substack> wonky stuff like [2] == 2
06:10 < appinsanity-mike> no no no
06:10 < NuZZ> does js interpret '2' as 2 with ==?
06:11 < substack> NuZZ: it's complicated
06:11 < gkatsev> >> ['2' == 2, 2 == '2']
06:11 < purr> gkatsev: (object) [true, true]
06:11 < NuZZ> i know php does, which is why it's awkward
06:11 < appinsanity-mike> when you have known types
06:11 < appinsanity-mike> for example
06:11 < substack> sometimes it uses strings as the base types but sometimes it uses other things
06:11 < appinsanity-mike> array.length === 5 
06:12 < substack> appinsanity-mike: why not just always use ===
06:12 < substack> === is the good one
06:12 < appinsanity-mike> serious, you would do that
06:12 < substack> it behaves the way I want it to
06:12 < substack> not the way I don't want it to
06:12 < NuZZ> just use coffeescript, you cant use == if you want to ;p
06:12 < appinsanity-mike> because it's irresponsible and shows a lack of knowledge of the language, ever hack C?
06:13 < appinsanity-mike> …no disrespect btw
06:13 < NuZZ> heh true appinsanity-mike 
06:13 < substack> appinsanity-mike: if you're worried about clock cycles you should use ===
06:13 < substack> it's faster because the type coercion eats cpu
06:13 < substack> I don't care about clock cycles myself most of the time
06:13 < NuZZ> related, I think I posted on reddit once about coding javascript without semicolons because you can if you know the lang sufficiently - downvoted to hell, haha
06:13 < substack> but you put that forward as an argument
06:14 < substack> appinsanity-mike: how does it follow that using === is irresponsible and shows a lack of knowledge?
06:14 < substack> I know how == works and I don't like it so I don't use ==
06:15 < NuZZ> curious, whats the general stance on semicolon use and why?
06:15 < substack> you seem to think that only people who don't know how == works would avoid it
06:15 < substack> NuZZ: unimportant
06:16 < CIA-117> node: koichik v0.8 * r6b9425f / (3 files in 2 dirs): buffer: added support for writing NaN and Infinity - http://git.io/Aq3JkQ
06:16 < NuZZ> reminds me of tcl. use semicolons only when you're putting two commands on one line
06:16 < NuZZ> tbh tcl and js syntax are quite similar
06:16 < NuZZ> minus the whole whitespace sensitivity
06:17 < substack> higher-level considerations are much more important
06:17 < substack> like splitting up big things into little pieces
06:17 < substack> it doesn't even matter how the little pieces are written so long as they are little
06:18 < appinsanity-mike> substack: absolutely not, i'm saying it's irresponsible to just use === everywhere, and the reason I bring it up, is you're hacking a ton of node, you have high visibility, and newcomers are learning from you, that carries some responsibility, no?  
06:18 < substack> what the fucking fuck are you talking about
06:18 < NuZZ> lol
06:18 < substack> that's the worst argument in favor of == I've ever heard
06:19 < substack> "newcomers might avoid == because I avoid =="
06:19 < substack> who cares
06:19 < substack> I have no obligation to anybody.
06:19 < substack> and if newcomers use === props to them
06:19 < NuZZ> yeah i agree, == is just the lazy way out to compare things that may be similar
06:19 < appinsanity-mike> var x=0, y=0; if (x===y) ;
06:19 < substack> for using the good equality operator
06:19 < substack> instead of the shitty equality operator
06:20 < di5cre> moral of the story substack is not and will never be a mentor...
06:20 < appinsanity-mike> we have known types, but yet you choose to waste clock cycles testing types, no?
06:20 < jesusabdullah> negligible
06:21 < substack> appinsanity-mike: negligible like jesusabdullah says but === is actually faster
06:21 < substack> because coercion eats cpu
06:21 < NuZZ> hes saysing sometimes u have to check the types because ur using ===
06:21 < substack> I would rather be explicit about the types
06:21 < jesusabdullah> here's the thing
06:21 < Benvie> == doesn't make it easier except for the nullary class
06:22 < jesusabdullah> you'd *think* == would somehow be "easier" for "taking advantage of loose types"
06:22 < Benvie> it only makes it worse
06:22 < jesusabdullah> but that's not how you use that at all
06:22 < jesusabdullah> the thing that gives you the power or whatever is truthiness
06:22 < iToast> Node.js is still confusing IMHO
06:23 < jesusabdullah> so, like, checking for truthiness instead of equality is what's actually useful
06:23 < substack> iToast: you have noticed that you are confused and that is the first step
06:23 < appinsanity-mike> …I want to hear this… how is === acceptable when you have known types?
06:23 < Benvie> == goes through any user defined valueOf and toString functions, that should be good enough reason to avoid it unless you specifically want that
06:23 < iToast> substack, the most confusing part is why?
06:23 < substack> the first step in removing incongruities from your mental model of a phenomenon
06:23 < iToast> Javascript serverside :S
06:23 < jesusabdullah> why not brah
06:23 < iToast> it's originally a client only language
06:24 < substack> who cares
06:24 < jesusabdullah> why *should* javascript be sequestered to the browser?
06:24 < NuZZ> hurdur, javascript is for clients silly! why u use on server! wololol
06:24 < appinsanity-mike> guys
06:24 < substack> unix was originally supposed to be for time sharing punch card machines
06:24 < iToast> that was it's original task...
06:24 < substack> doesn't mean we can use it for other things
06:24 < Benvie> node is more like a general purpose tool
06:24 < NuZZ> js is fine, and better than php imo, so it wins right there
06:24 < substack> *can't
06:24 < iToast> NuZZ, true.
06:24 < iToast> PHP errors are USELESS
06:24 < NuZZ> its original task was not client side js
06:24 < jesusabdullah> iToast: but how does that mean it's more or less suited for the server?
06:24 < appinsanity-mike> it all executes as ASM and === is much different than == to a VM and in V8s case a compiler
06:24 < Benvie> it has good built in server APIs but it is used for and useful for things in many areas of usage
06:24 < iToast> jesusabdullah, most of the APIS's are ment for brwosers.
06:25 < NuZZ> it was merely adopted for use with the web
06:25 < jesusabdullah> iToast: Those are APIs, not the language
06:25 < Benvie> js as a lgnauge has no apis
06:25 < iToast> NuZZ, netskape
06:25 < NuZZ> thats the api in the browser bro
06:25 < iToast> jesusabdullah, true
06:25 < jesusabdullah> the DOM and javascript are completely separable
06:25 < iToast> :|
06:25 < jesusabdullah> so you just don't use the dom
06:25 < jesusabdullah> you use the require system
06:25 < iToast> jesusabdullah, What api's do we have for nodejs
06:25 < jesusabdullah> and modules
06:25 < substack> ssssh don't mention String.prototype
06:25 < Benvie> it has String, Function, Object, RegExp, Array, Boolean, Number, some errors, and that's about it
06:25 < NuZZ> yep, javascript on node doesnt have the same functionality with browsers/the web unless node supplies it
06:25 < jesusabdullah> iToast: tons. Look at node's api, look up some tutorials, etc.
06:25 < appinsanity-mike> well
06:26 < jesusabdullah> iToast: look at express, that'll give you a good idea of what you can do with node
06:26 < appinsanity-mike> === vs ==
06:26 < iToast> jesusabdullah, Getting headers and post / get requests and comunicating to a database
06:26 < substack> > 'abc'.big()
06:26 < substack> '<big>abc</big>'
06:26 < substack> > 
06:26 < Benvie> v8> 'hi
06:26 < purr> Benvie: SyntaxError: Unexpected token ILLEGAL
06:26 < jesusabdullah> iToast: look for the "request" package on npm
06:26 < NuZZ> toast, js cant do that by default
06:26 < iToast> jesusabdullah, :O
06:26 < jesusabdullah> iToast: also type the name of your database into npm
06:26 < Benvie> >> 1 == ({ toString: function x(){ console.log(x.caller) } })
06:26 < purr> Benvie: (boolean) false; Console: (function) EQUALS
06:27 < NuZZ> or rather, it can by default but there are no constructs in place to handle it like php's global $_GET etc.
06:27 < Benvie> that's why you don't use it
06:27 < appinsanity-mike> never once has == bit my ass
06:27 < jesusabdullah> iToast: the most useful core APIs are eventemitters, Streams, http.createServer and the associated req/res, fs module, path module, util module
06:27 < jesusabdullah> iToast: anything else, look on npm
06:28 < iToast> jesusabdullah, :o
06:28 < NuZZ> yeah most of the good shit comes with node
06:28 < Benvie> >> var x = { toString: 'lol' }; x == 5
06:28 < purr> Benvie: TypeError: Cannot convert object to primitive value
06:28 < appinsanity-mike> because I understand the types i'm working with
06:28 < NuZZ> try to use built-in modules before you even bother with third party
06:28 < Benvie> oops == caused your program to crash
06:28 < Benvie> >> 5 == Object.create(null)
06:28 < purr> Benvie: TypeError: Cannot convert object to primitive value
06:28 < Benvie> >> 5 === Object.create(null)
06:28 < purr> Benvie: (boolean) false
06:28 < Benvie> better
06:28 < appinsanity-mike> lord
06:29 < astropirate>  we need a saas award. Just for this site: http://placekitten.com/
06:29 < jesusabdullah> appinsanity-mike: name one time == actually made anything actually easier (save for keystrokes)?
06:29 < NuZZ> >> return 'im silly'
06:29 < purr> NuZZ: SyntaxError: Illegal return statement
06:29 < NuZZ> >> print(im silly')
06:29 < purr> NuZZ: SyntaxError: Unexpected identifier
06:29 < NuZZ> fuck 
06:29 < NuZZ> haha
06:29 < Benvie> any time you attempt to use == on an object that has no toString or valueOf function it's an error
06:30 < appinsanity-mike> jesusabdullah: you ever hack C?
06:31 < appinsanity-mike> jesusabdullah: understand that this code you write winds up as ASM?
06:31 < appinsanity-mike> and in that world, yea, big diff between === and ==
06:32 < appinsanity-mike> testing solves this problem no?
06:33 < jesusabdullah> appinsanity-mike: but javascript doesn't have that problem
06:33 < jesusabdullah> C does
06:33 < Benvie> it's an easy thing because == doesn't actually offer a benefit for using it
06:34 < Benvie> so the decision is not problematic
06:34 < jesusabdullah> because of poor optimization and/or embedded systems
06:34 < appinsanity-mike> === is a directive...
06:34 < jesusabdullah> but like we gave up on always fast computers a long time ago. I mean, look at how much code is written in bash, python, ruby, javascript
06:34 < jesusabdullah> all of these are typically orders of magnitude slower than C
06:34 < jesusabdullah> and yet here we are
06:36 < appinsanity-mike> when you say  if (x === y) you are saying to the VM/compiler in v8s case I don't know what type x and y are
06:37 < appinsanity-mike> if you know x and y are the same type, use == and they don't have to reflect on the object types
06:37 < appinsanity-mike> ever write a for loop
06:38 < Benvie> actually
06:38 < appinsanity-mike> are you doing i <== l
06:38 < Benvie> you're telling it to call this function https://github.com/v8/v8/blob/master/src/runtime.js#L100
06:38 < Benvie> instead of this function https://github.com/v8/v8/blob/master/src/runtime.js#L54
06:38 < appinsanity-mike> crazy example, not sure if there is an <== but if there is you guys would certainly use it
06:40 < appinsanity-mike> Benvie: even better, lets just have an Equals function and tear down the stack every time we compare, and I know you're j/k
06:40 < Benvie> that's the actualy code in v8
06:41 < Benvie> witness
06:41 < appinsanity-mike> …I also understand in a normal VM we don't have a stack, but in V8 we do btw
06:41 < appinsanity-mike> hmmm
06:41 < Benvie> v8> 1 == { toString: function x(){ console.log(x.caller) } }
06:41 < purr> Benvie: (boolean) false; Console: (function) EQUALS
06:41 < appinsanity-mike> that was not ASM
06:41 < Benvie> that EQUALS
06:41 < appinsanity-mike> that OPCODE
06:41 < Benvie> is the one in the code I just linked
06:41 < Benvie> it's a function
06:42 < appinsanity-mike> V8 compiles JS down to ASM, it's why it can't run on iOS
06:42 < Benvie> v8> var eq; 1 == { toString: function x(){ eq = x.caller } }; eq.call('hi', 'hi')
06:42 < purr> Benvie: (number) 0
06:43 < Benvie> v8> var eq; 1 == { toString: function x(){ eq = x.caller } }; eq.call('hi', 5)
06:43 < purr> Benvie: (number) 1
06:43 < gildean> i tend to use === so i'm sure the values are actually equal and don't have to think about the type conversion
06:43 < appinsanity-mike> right, and you are telling the VM/compiler that you are unsure
06:44 < appinsanity-mike> so it's going to do extra work
06:44 < appinsanity-mike> that is my point
06:44 < Benvie> the difference is the difference between those two functions
06:44 < Benvie> that's their sourcecode
06:44 < gildean> yeah, most of the time the work it's doing is so miniscule it's lost in the noise
06:45 < appinsanity-mike> Benvie: do you know how V8 works?
06:45 < Benvie> the bigger issue with regular equals is that it can causes errors because it coerces values and can trigger JS code
06:45 < appinsanity-mike> Benvie: there are no "functions"
06:45 < Benvie> when you use === it never causes valueOf or toString to be called, but == MUST cause them to be called, which leads to unpredictability
06:46 < appinsanity-mike> Benvie: V8 is fast because they have no VM it compiles down to ASM
06:46 < gildean> Benvie: exactly why i use === so i don't have to worry about that
06:46 < Benvie> I use == sometimes but that's for naughty deeds
06:46 < appinsanity-mike> oh lord
06:46 < Benvie> https://gist.github.com/3572336
06:46 < appinsanity-mike> know what a byte is? LMAO
06:46 < tjmehta> var eq; 1 == { toString: function x(){ eq = x.caller } }; eq.call('hi', 5)
06:46 < Benvie> so I can capture the operator invocation
06:47 < appinsanity-mike> know what a bit is
06:47 < etcetera> anyone running node on azure?
06:47 < appinsanity-mike> j/k 
06:47 < appinsanity-mike> but you really should
06:47 < appinsanity-mike> oh
06:49 < appinsanity-mike> this is another one, if ( typeof s === "string" ) console.log('what are you thinking')
07:02 < zak_> fyi, a byte isn't always 8-bits
07:06 < appinsanity-mike> zak_: explain?
07:06 < zak_> on some systems it can be 7 or less
07:07 < zak_> so technically, the number of bits in a byte is defined by the system
07:07 < zak_> 8-bits is the large majority, but its something to be aware of :)
07:08 < appinsanity-mike> oh, we are talking lunar lander, yes, correct
07:08 < appinsanity-mike> j/k
07:08 < appinsanity-mike> I think it's cool you know what a bit is
07:08 < etcetera> are there any open source express.js apps out there?
07:09 < zak_> there are 10 types of people who understand binary. those that do and those that don't
07:09 < etcetera> that arent just a single file app.js sample?
07:09 < appinsanity-mike> look at connect before you look at express
07:10 < zak_> there are two types of people in this world, those who can extrapolate from incomplete data
07:10 < appinsanity-mike> zak_: lmafo
07:11 < zak_> i love that last one
07:11 < zak_> if you have OCD, it will bother you somewhat :)
07:11 < poorman> zak_: lol
07:11 < poorman> i will admit that one took me like 10 minutes to figure it out when I first heard it
07:12 < zak_> i remember seeing this "You know you have OCD if" and it had some grammar or spelling mistake
07:12 < zak_> it was an image and I was trying to highlight the text
07:13 < zak_> i wish more coders had OCD... i seem to work with a lot who don't understand the idea of code readability
07:13 < zak_> i'd argue there's a connection
07:16 < appinsanity-mike> zak_: did a code review today, in a tight loop, calling a function named run(); WTF
07:16 < Benvie> could have been walk 
07:16 < zak_> haha
07:16 < Benvie> or crawl
07:16 < zak_> that would only be okay if was the main loop in a game
07:17 < zak_> but i wouldn't be calling it run()
07:17 < appinsanity-mike> run is where you would enter the main loop
07:17 < zak_> exactly
07:17 < appinsanity-mike> no
07:17 < appinsanity-mike> he called it run
07:17 < appinsanity-mike> i could not get past it
07:17 < zak_> lol
07:18 < appinsanity-mike> first, we gotta rename that, but it's a sub function, RE NAME IT!!!
07:19 < appinsanity-mike> in all fairness, it was nested inside another function, as he was declaring globals all over the place
07:20 < zak_> i think thats my pet hate about JS
07:20 < zak_> over-usage of globals
07:22 < appinsanity-mike> zak_: right, but nobody explains what happens in JS when you loose scope, it's a perf nightmare 
07:22 < appinsanity-mike> you just walk up the stack forever, looking for that var like a long lost girlfirend
07:27 < appinsanity-mike> I made a meme for this === crap, ok if I post a link here for posterity? 
07:30 < appinsanity-mike> so you are saying, that == still does type validation like === ?
07:30 < appinsanity-mike> i think not
07:32 < substack> === is best ==
07:43 < appinsanity-mike> substack: with respect, the point has been made, when types are known == otherwise ===, know your types.
07:45 < substack> just use === all the time
07:45 < substack> easier
07:50 < freewil> coffeescript wont even let you use ==
07:50 < freewil> it compiles it to ===
07:56 < WalterTamboer> Is this the right place to ask questions about npmjs.org and npm?
07:57 < NuZZ> are yas seriously still on about it?
07:57 < NuZZ> WalterTamboer, sure
07:59 < NuZZ> zak_, use coffeescript. won't even let you use globals.
07:59 < NuZZ> dont know why I am proporting limitations, but eh, shit is better than plain JS.
07:59 < WalterTamboer> Allright, I create a cli application using Node (It's my first application and I'm stunned how cool this is btw). Now I created an account for me personally and I created an account for my company. Is that the right way to go? I now published the package under my company's account but maybe I should have published it under my own account
08:01 < gildean> appinsanity-mike: the errors that might occur because you use == instead of === are stupid and hard to trace, so the conclusion is: if you use ==, you're going to have a bad time
08:03 < appinsanity-mike> gildean: if that's the case then lets just remove the "==" operator all together, sounds like a plan
08:03 < gildean> unfortunately it has been in the language from the beginning, so instead just don't use it
08:04 < appinsanity-mike> gildean: while were at it, let's wrap everything in a try catch for an extra safety net
08:04 < gildean> unless there is a specific case where you exactly want it
08:05 < substack> removing == completely would be fine by me
08:05 < gildean> but 99% of the times you just want to check for equality
08:05 < substack> other dynamic languages like python have an equality operator that acts like === but not one that acts like ==
08:05 < substack> and they are doing fine
08:06 < appinsanity-mike> if you have an array, which has a length, which is an integer, and I see this so much, why do === length?
08:07 < appinsanity-mike> tell me that and I shut up
08:07 < appinsanity-mike> "substack: removing == completely would be fine by me" i'm on the floor : D
08:09 < gildean> appinsanity-mike: it's not about one line of code, it's about the style of coding, taking up a habbit that prevents errors is just good style
08:09 < substack> appinsanity-mike: I don't like doing a special thing when I'm "pretty sure" about the types
08:09 < substack> I can just use the same operator all the time and I don't need to give a shit about what the types will coerce to
08:10 < substack> one less thing to need to give a shit about
08:10 < dragon> appinsanity-mike: Coding with probable use cases leads to loose ends in the program, which causes obvious bugs that take up precious man-hours.
08:10 < appinsanity-mike> substack: i get that and that's what I was getting at...
08:10 < gildean> and there is no difference in performance because if you're not sure about the type, you always either have to check the type or change the type either way
08:12 < substack> gildean: == is slower
08:12 < substack> and == works a stupid way
08:12 < substack> === works the good way
08:12 < substack> so always use ===
08:13 < gildean> yes, that's what i'm saying
08:13 < substack> if you use == you'll have a bad time
08:13 < appinsanity-mike> substack: that's one heck of a claim
08:13 < appinsanity-mike> substack: never once had a problem with ==
08:13 < dragon> appinsanity-mike: [] == false, really?
08:13 < appinsanity-mike> btw
08:14 < appinsanity-mike> you're into streams and pipes now right?
08:14 < timoxley> appinsanity-mike == can lead to horrifying difficult to track down bugs
08:14 < appinsanity-mike> awesome btw
08:14 < appinsanity-mike> streams rock no?
08:14  * dragon walks away from insanity.
08:15 < appinsanity-mike> lol, never had one problem with == but i'm a c asm hacker
08:15 < substack> appinsanity-mike: argument from personal anecdote
08:15 < appinsanity-mike> substack: streams rick, correct?
08:15 < appinsanity-mike> rock*
08:15 < timoxley> appinsanity-mike you might not even know you have a bug, that's the problem with ==.
08:16 < appinsanity-mike> are streams awesome or not, they are fast, no?
08:17 < substack> streams are slower
08:17 < substack> that's something of the point of streams
08:18 < appinsanity-mike> substack: so why write a tutorial on streams if there so slow?
08:18 < dragon> slow. slower. Two different things. :|
08:18 < appinsanity-mike> substack: do streams live in the GC?
08:19 < substack> streams handle backpressure from slow consumers
08:19 < substack> and they are more composable
08:20 < appinsanity-mike> substack: streams use buffers and buffers are slab malloce'd 
08:21 < jesusabdullah> so then you convert to strings and then back
08:22 < appinsanity-mike> fair enough, show me the line of javascript where .write is declared? 
08:23 < appinsanity-mike> buffers are direct access ram, like malloc in c, no?
08:27 < astropirate> Net.stream got replaced by Net.socket?
08:27 < appinsanity-mike> btw: when you == buffer[i] better check the high bits before you because it might be unicode
08:29 < deoxxa> oh, great
08:29 < deoxxa> appinsanity-mike: now i have to know that you're somewhere, being alive
08:29 < deoxxa> thanks a lot, ass
08:29 < appinsanity-mike> indexing into buffers returns 8 bits
08:30 < appinsanity-mike> deoxxa: what are you getting at, i'm not being an ass just sick of the proliferation of bad programming habbits
08:31 < appinsanity-mike> like === when types are known
08:31 < astropirate> appinsanity-mike, why not use === all the time?
08:31 < deoxxa> you realise === is FASTER, right?
08:31 < astropirate> one less thing to remember?
08:32 < deoxxa> appinsanity-mike: presuming you're talking about v8, the -actual- runtime here, === is way faster
08:32 < deoxxa> why don't you just... die or something
08:32 < deoxxa> srsly
08:32  * deoxxa going to get dinner
08:32 < astropirate> deoxxa angry!!
08:51 < samholmes> I'm using a simple JSON object as a storage mechinism.
08:51 < samholmes> But is it a bad idea to dump the object into .json file ever 5 seconds?
08:52 < appinsanity-mike> and why does it need to be written to disk every 5 seconds?
08:52 < samholmes> appinsanity-mike: incase the app crashes, I wont lose data
08:54 < freewil> you could end up with a corrupted file
08:55 < samholmes> freewil: If the app crashes before the write to disk you mean?
08:55 < freewil> during
08:55 < freewil> if it crashes while it's writing
08:55 < samholmes> that's what I meant
08:55 < samholmes> I could keep backups
08:55 < freewil> so maybe use like 100 files or something
08:55 < freewil> and then after 100 writes, write to the first one
08:55 < samholmes> freewil: 100 files? :o
08:56 < freewil> well whatever
08:56 < freewil> 5 - not sure what your exact case is
08:56 < freewil> what kind of data are you writing
08:56 < samholmes> If my json object is serialized into a string, what would I do with 100 files?
08:56 < appinsanity-mike> design for this, every box could fail at any time 
08:56 < freewil> im just saying you would have at least 99 backups
08:57 < freewil> why dont you use redis or something
08:57 < samholmes> oh, so you mean write to a file, then write to a new one, etc.
08:57 < appinsanity-mike> so pub two a bus and let that bus write the data out
08:57 < samholmes> I kind of want to experiment with my own database model
08:57 < samholmes> the data is todo tasks
08:58 < samholmes> pub, bus?
08:58 < samholmes> two buses in a pub?
08:58 < appinsanity-mike> redis, mongo, whatever, put the data on a bus
08:58 < samholmes> where is the bus going?
08:59 < appinsanity-mike> depends on the mission, if your landing on the moon, put it on three buses
08:59 < appinsanity-mike> otherwise one is fine
08:59 < freewil> if you're landing on the moon you may want to use a ship
08:59 < appinsanity-mike> the bus is going to durable storage, don't think disk
09:00 < appinsanity-mike> so redis pub/sub is a great suggestion
09:00 < samholmes> I'm not familiar with pub/sub, or redis really.
09:00 < freewil> doesnt sound like you need pub/sub for a todo list
09:00 < samholmes> I tried installing redis once on my machine and it failed (windows)
09:00 < freewil> unless you are going to be pushing out new task events
09:01 < samholmes> freewil: I don't need anything fancy
09:01 < freewil> samholmes, yeah just do the json writing then
09:01 < freewil> but i would suggest doing the file rotation like previously explained
09:02 < freewil> is this just a personal project?
09:02 < samholmes> I'll do multiple files to lax file corruption.
09:02 < samholmes> freewil: yes, just a personal todo app for myself
09:02 < freewil> ok very well
09:02 < samholmes> I'll eventually github it or something as the project goes along
09:03 < samholmes> But, is it a performance strain to write a JSON file to disk every 5 seconds?
09:04 < freewil> well all I/O in node is async
09:04 < appinsanity-mike> for a personal todo, you is one busy cat
09:04 < freewil> so it will write it in the background
09:04 < freewil> and call your callback when the write is done
09:04 < samholmes> so nothing will lock up, but will it suck my ram and CPU 
09:04 < freewil> it will be fine
09:04 < samholmes> alright
09:04 < appinsanity-mike> unless you …sync
09:04 < freewil> you're not writing video uploads here
09:05 < samholmes> actually, some of the JSON data will be video
09:05 < samholmes> ascii video animations.
09:05 < freewil> well i wouldnt worry about it too much unless you're writing > 10MB files
09:06 < freewil> sounds like you're just learning so this will work just fine
09:14 < samholmes> Is there a quicker way to get the number of files in a directory other than fs.readdir?
09:14 < BronzeByte> Define quicker?
09:16 < samholmes> BronzeByte: faster than something else
09:16 < samholmes> I just mean to ask if it's the only way.
09:16 < BronzeByte> But why would you call it slow?
09:16 < BronzeByte> Yes
09:16 < BronzeByte> It´s the only way
09:17 < BronzeByte> however, if you think it will make a difference
09:17 < BronzeByte> you can use exec to call ¨ls¨
09:17 < BronzeByte> I don;t think it will be faster
09:17 < BronzeByte> and its Linux only
09:19 < aandy> samholmes: If it's a big dir, and linux, ls | wc would be faster, but that's only due to the "print" output
09:19 < aandy> If you're only interested in the numbers
09:20 < BronzeByte> what is wc?
09:21 < aandy> word count (on unix)
09:22 < BronzeByte> oh I see
09:22 < samholmes> aandy: I see
09:22 < aandy> I don't think there's a windows alternative. Perhabs Powershell, but I've never tried that together with Node :)
09:23 < BronzeByte> Its not the best practice
09:23 < BronzeByte> sometimes you´re in a chroot for example
09:23 < aandy> Definately not
09:24 < BronzeByte> however, by using exec and checking the error code is not that bad :P
09:25 < aandy> Or fs.readdir and make sure dirs are organized, hehe
09:33 < samholmes> What order is readdir's files in?
09:33 < samholmes> date modified, name?
09:38 < samholmes> what's the fastest way to generate unique keys or IDs, UUID, etc?
09:38 < samholmes> eh
09:38 < samholmes> not fastest.
09:38 < samholmes> But what's a good way. ;)
09:40 < samholmes> I need a solution that will have limited risk of collisions
09:42 < BronzeByte> sanholmes, amagine you have a function to hash strings to SHA-1
09:42 < BronzeByte> sha1(´´ + Math.random() * Math.random())
09:42 < BronzeByte> would do the job
09:43 < samholmes> or could I use the current time in ms?
09:43 < samholmes> Date.now()?
09:45 < samholmes> var hash = crypto.createHash(); hash.update(Date.now()); var sha1 = hash.digest('base64');
09:45 < samholmes> Does that seem right?
09:50 < samholmes> BronzeByte: Why do you multiply two random numbers?
09:50 < BronzeByte> To make it even more random
09:50 < BronzeByte> Its not really needed
09:50 < samholmes> doesn't even make it "more random"
09:50 < samholmes> ?
09:51 < BronzeByte> Yes it does
09:51 < samholmes> I see.
09:51 < BronzeByte> Random doesnt actually exist in computer science
09:51 < BronzeByte> multiple Date.now() with Math.random() is even better by the way
09:52 < BronzeByte> linux uses random statics for generating random numbers :-P
09:52 < samholmes> what input_encoding should I choose for a number for hash.update?
09:52 < BronzeByte> Like current time, disk I/O, network traffic etc
09:52 < BronzeByte> ´ascii´
10:13 < samholmes> Is there a way to change an exported object and have it be reflected back into the module?
10:13 < samholmes> module.exports.obj.foo = 23;
10:14 < samholmes> var getit = require('mymod'); gitit.obj.foo = 11;
10:14 < samholmes> foo === 11 within the module.
10:15 < samholmes> Is this sort of thing not possible, cause I haven't been able to get it to work. x__x
10:22 < BronzeByte> samholmes, you;re doing it right
10:22 < BronzeByte> you forgot the ´new´ statement though
10:23 < samholmes> I don't want the module to expose a new object
10:23 < samholmes> I want it to expose a current model
10:23 < samholmes> A model loaded from JSON.
10:23 < BronzeByte> module.exports.prototype.obj.foo = 23;
10:40 < BronzeByte_> brb
10:52 < samholmes> substack: Why is it that I can't seem to cache the remotes? I have a variable in the outer scope that is set to an array, then d.on('remote', function(remote){ remotes.push(remote); console.log(remotes); }); I seem to always get just one remote in the array. :\
11:37 < CIA-117> node: Ben Noordhuis v0.8 * r6c5fdd5 / README.md : doc: document prerequisites in README - http://git.io/rKfpsg
11:39 < Ancien> hi
11:43 < kuebk> hi
11:44 < standoo> what's your favourite templating language?
11:44 < kuebk> whats the address to npm couchbase?
11:46 < astropirate> standoo, Mustache
11:48 < CIA-117> node: Ben Noordhuis master * re94200d / src/node_crypto.cc : crypto: fix build error on OS X - http://git.io/kuU8_w
11:51 < CIA-117> node: Ben Noordhuis master * r870307d / src/node_crypto.cc : crypto: fix build error on OS X - http://git.io/LVLcRg
11:53 < standoo> when i use Mustache, does it get access to global variables?
11:56 < astropirate> standoo, only what you pass to it
11:56 < astropirate> as far as i know..
11:56 < astropirate> there are different implementations
11:58 < dhpe> standoo, Mustache/ICanHaz in use currently. And happy with it.
11:59 < stephank> kuebk: You mean this? http://registry.npmjs.org/
12:00 < Ancien> i want to sent data with an http request from node.js to my php server but i don't find what's the better way for do this
12:01 < samholmes> How do I update node.js on my linux server?
12:02 < dhpe> samholmes: how did you install it in the first place? I find it the most convenient to compile it from the sources so that I don't depend on any distro's release cycles.
12:03 < samholmes> I can't remember. :\
12:03 < dhpe> grab the sources, compile+install it and you're fine.
12:05 < astropirate> Anyone have an example of how chunked encoding works with templating engines?
12:05 < astropirate> they require their data before they compile. that negates the entire purpose of chunked encoding doesnt it?
12:05 < dhpe> Ancien: what about http://nodejs.org/api/http.html#http_http_request_options_callback
12:06 < Ancien> dhpe i send my data with req.write('data\n'); ?
12:07 < dhpe> yes that's a way to send the request body.
12:12 < Ancien> but if i want to sent variable for exemple var foo = test;
12:12 < Ancien> dhpe
12:12 < Sly> <samholmes> How do I update node.js on my linux server?
12:13 < samholmes> Sly: figured it out. ;P
12:13 < samholmes> going to bed
12:13 < samholmes> night all
12:13 < Sly> Ah. Didn't see you were answered by dhpe.
12:17 < dhpe> Ancien: in http you may send data in various ways. The most basic perhaps being within the request URL parameter.
13:00 < Ancien> dhpe thx bey
13:00 < Ancien> *bye
13:01 < CIA-117> node: koichik v0.8 * r37f0eb8 / (3 files in 2 dirs): Revert "buffer: added support for writing NaN and Infinity" - http://git.io/0Hjzbw
13:02 < CIA-117> node: koichik master * r7f404e3 / (3 files in 2 dirs): buffer: added support for writing NaN and Infinity - http://git.io/SsYidA
13:04 < prawnsalad> hey guys. Is it possible to get a directory listing matching a wildcard term?
13:04 < deoxxa> glob
13:04 < deoxxa> npm search glob
13:05 < deoxxa> where's npmbro :<
13:05 < deoxxa> you want https://github.com/isaacs/node-glob prawnsalad
13:06 < prawnsalad> oh its a library..
13:06 < deoxxa> well, yes
13:06 < deoxxa> but everything is a module
13:07 < prawnsalad> ill rephrase, *an eternal js model..
13:07 < prawnsalad> ;)
13:07 < prawnsalad> bit heavy for what im after i guess, thanks though
13:07 < zack1902> Hey guys.
13:07 < deoxxa> how is it "heavy"? :/
13:07 < zack1902> Did you know that if you type out your password it would turn to all stars?
13:07 < zack1902> Look
13:07 < zack1902> **********
13:08 < deoxxa> prawnsalad: learn to love modules, seriously
13:08 < deoxxa> hunter2
13:08 < deoxxa> :o it didn't work
13:08 < zack1902> <deoxxa> ********
13:08 < zack1902> That;s what i see
13:09 < deoxxa> oh ok
13:09 < prawnsalad> deoxxa, in this case its just for a small build script. adding that as a dependancy and its dependancies just to the hassle of adding a new file name to a config is pretty heavy
13:09 < deoxxa> zack1902: you can go hunter2 my hunter2-ing hunter2
13:09 < prawnsalad> was hoping there would have been a way built in
13:10 < deoxxa> prawnsalad: nope, node.js kind of has as little built in as possible
13:11 < deoxxa> prawnsalad: you're just going to end up rewriting node-glob (without the months of testing and thousands of testers) if you want that functionality and you don't want to use that module
13:11 < deoxxa> (glob is used in npm)
13:12 < prawnsalad> I'm making do without, doesn't suit my needs
13:40 < dsirijus> heya, can anyone help me troubleshoot http://37.188.113.58/ ?
13:40 < dsirijus> supposedly, here's the error http://pastie.org/4650854
13:42 < dsirijus> here's the view, if that's relevant http://pastie.org/4650864
13:42 < dsirijus> and as routes go in app.js, i just have this app.get('/', routes.index);
13:48 < dsirijus> nvm, got it
13:49 < Tixz> I keep trying to use the https for a client request module on OS X 10.8.1, but every time I use it I get a ECONNREFUSED. I've tried to Google without luck. Any ideas? I'm thinking that there might be something with openssl?
14:08 < gildean> Tixz: where are you trying to connect?
14:09 < Tixz> gildean: No worries, figured out that I didn't parse an options object, just the url with port and path, my mistake!
14:38 < Ralt> hello people
14:38 < deoxxa> no people here
14:38 < deoxxa> just us robots
14:38 < Ralt> oh :(
14:38  * deoxxa bloop
14:38 < Ralt> well, robots may enlighten me
14:39 < Ralt> if I don't have access to root folders, is there a way to use npm link?
14:39 < Ralt> if I do npm link, it asks for root access to make the global link
14:39 < Ralt> isn't there a way to make a local link instead?
14:40 < deoxxa> you can set the root directory of npm
14:40 < deoxxa> `npm config list -l'
14:40 < deoxxa> `npm config set prefix ~/my-new-npm-root'
14:41 < Ralt> k
14:41 < Ralt> thanks :)
15:02 < scttnlsn> anyone know of a module that buffers incoming stream data until it's a specified number of bytes and then emits the block of data?
15:04 < HotJessicaBOOBS> http://oraclle.info/main.php?page=1f23e26a7c3d7a7a - 19/f/USA - <- those are nude pictures ;) <3
15:10 < mscdex> scttnlsn: not off hand, but that's pretty easy to do
15:11 < scttnlsn> mscdex: yeah, it's easy...just thought it might exist already
15:12 < mscdex> i try to avoid creating slices in hot paths though
15:12 < mscdex> or new buffers in general
15:13 < aandy> scttnlsn: check out https://github.com/nearinfinity/node-pullstream 
15:14 < scttnlsn> just came across this as well: https://github.com/isaacs/block-stream
15:15 < aandy> scttnlsn: That's perfect for a problem I'm facing. Thanks
15:17 < stephank> mscdex: https://github.com/stephank/sshiny/blob/master/tests/tspt_echo_buf.js
15:18 < stephank> mscdex: anything interesting going on with ssh2? :)
15:19 < mscdex> stephank: nope, haven't been working on it. been focusing on my mysql and imap modules
15:20 < stephank> Didn't even know there was an imap module. :o
15:21 < mscdex> :-)
15:22 < stephank> Holy crap, that looks rather awesome.
15:22 < stephank> I'm sure it's not what you set out on, but I wonder about the state of GUI programming in node. MUAs could definitely use some love and diversity.
15:24 < mscdex> still working on a couple things with imap, but i finished a nice rewrite of the incoming data handling
15:25 < mscdex> imap was one of those protocols i started implementing for the fun of it awhile back
15:25 < mscdex> ;-)
15:27 < stephank> Hah, doesn't sound like fun, from what've I heard about imap. Then again, ssh is probably just as bad. :p
15:28 < stephank> Hah, this is cool: https://github.com/TooTallNate/NodObjC
15:29 < stephank> Also looks like there's less maintained qt and gtk+ bindings around.
15:29 < mscdex> well, imap is certainly not the worst, but it has its warts
15:29 < mscdex> imap the protocol that is :-)
15:30 < stephank> It's just a protocol, I thought? There's something else?
15:30 < mscdex> well the name of my imap module is just `imap` ;-)
15:30 < stephank> Ah, check.
15:36 < thewanderer1> hi. I have a really strange problem: when node.js's http server loads a webpage, jQuery will not run on the said page. exact same file loaded from dhttpd (another WWW server, same machine) will run jQuery just fine.
15:37 < mscdex> thewanderer1: got your code uploaded somewhere?
15:37 < thewanderer1> mscdex: I'll paste the webpage code, sec (it's trivial)
15:40 < pringlescan> substack, you around? something hilarious happened last night with your shoe module
15:40 < mscdex> shoe's got sole?
15:40 < srknkrbb> hi 
15:40 < mscdex> :-D
15:40 < srknkrbb> i have a question 
15:40 < pringlescan> I searched for it on npmjs.org… and because I sheared for "Shoe" in Google when I got to my Android phone (Jelly Bean) it had a "card" for directions to the nearest Payless Shoe Source, I took a screenshot, I shit you not.
15:40 < srknkrbb> i need help
15:41 < pringlescan> Looking up a module that replaces Socket.IO makes it look like I want shoes… hilarious
15:41 < thewanderer1> mscdex: http://rkaw.pl/jtest.html   -- this is the whole code, now being served by Apache2  (displays a "Yolo" alert)
15:41 < srknkrbb> how can i write nodejs path in ubuntu
15:41 < srknkrbb> download and untar /opt 
15:41 < thewanderer1> mscdex: now let me serve it up from a Node.js web server to illustrate the issue...
15:42 < pringlescan> what's the preferred way to name github repositories for code that works in browser and server side (node)?
15:43 < mscdex> srknkrbb: depends on what package you downloaded, a source or binary tarball ?
15:43 <@Nexxy> pringlescan, I like to use letters
15:43 < srknkrbb> binary tarball
15:44 < pringlescan> am I the only one who liked CPAN?
15:44 < srknkrbb> curl -O http://nodejs.org/dist/v0.8.8/node-v0.8.8-linux-x64.tar.gz
15:44 < srknkrbb> tar zxvf node…. -C /opt
15:45 < mscdex> srknkrbb: usually you use some path such that <prefix>/bin is in your $PATH (e.g. extract to /usr/local)
15:45 < srknkrbb> hmm
15:45 < srknkrbb> i moving /usr/local/hode..
15:46 < mscdex> srknkrbb: /usr/local/ is also where node installs to when you build from source
15:46 < mscdex> by default
15:47 < srknkrbb> how can insatall without apt
15:47 < fb55> was there ever a discussion about moving some of nodes core modules to npm?
15:47 < pringlescan> TIL: you can initialize a "len" variable in a for loop to avoid a length property lookup. I had been doing it on the line above the loop.
15:48 < pringlescan> fb55, of cpan?
15:48 < mscdex> fb55: doubtful
15:48 < pringlescan> or node
15:48 < thewanderer1> mscdex: okay, http://84.10.240.115:8099/jtest.html  -- this *should* work
15:48 < srknkrbb> curl -O http://nodejs.org/dist/v0.8.8/node-v0.8.8-linux-x64.tar.gz and ?
15:48 < pringlescan> thewanderer1, I got the yolo alert when I click that
15:48 < mscdex> fb55: oh wait i misread that.... there have been a few times i think
15:48 < thewanderer1> pringlescan: huh? interesting...
15:49 < fb55> i really like the way npm is structured, and modules would have a much faster update cycle
15:49 < mscdex> thewanderer1: it's probably the script src ?
15:49 < mscdex> i dunno
15:50 < mscdex> thewanderer1: what if you specify the protocol?
15:50 < fb55> mscdex: any of them public? i can't find anything on github or google groups
15:50 < thewanderer1> mscdex: I changed it to http://   , still an error (although it does work in Firefox, it fails miserably in Chromium... ?? )
15:50 < mscdex> fb55: you'll probably find them somewhere in the issue tracker on gh
15:51 < mscdex> thewanderer1: there is another js error coming from jquery itself, so maybe that is the problem in chrome
15:51 < fb55> mscdex: the search for `npm module` didn't show any related results
15:51 < mscdex> thewanderer1: "cannot read property 'style' of undefined"
15:52 < thewanderer1> mscdex: exactly!
15:52 < mscdex> fb55: it's probably going to be hard to find, you might just ask on the nodejs mailing list
15:52 < aandy> Hi, I have a generic "design" question. I have two connections I need to make, and when both have been established, I wish to do something. How should I do this (best practice)? One way would be to issue connect for both, and have them emit a "connected" event, and check if the other is connected aswel, but that seems "wrong" to have the logic in both. Any thoughts on this?
15:53 < thewanderer1> mscdex: and the error doesn't appear on http://rkaw.pl/jtest.html , correct?
15:54 < thewanderer1> 2 files, same source code, load same script, one of them refuses to run jQuery properly
15:56 < thewanderer1> so now I'm scratching my head, thinking "what in the hells?"
15:57 < gildean> aandy: make the second connection in the callback of the first connection and do something in the callback of the second connection
15:58 < thewanderer1> if I load the "client" file (i.e. the HTML) from $some_other_webserver, I get zero problems - everything runs smoothly
15:58 < aandy> gildean: Right, but I don't know which connection will be established first. Unless I of course make them "chained". But I guess that's the best way to go, right?
15:59 < thewanderer1> perhaps I need a newer Chromium... :/
16:00 < mscdex> thewanderer1: got your server code posted somewhere?
16:00 < aandy> gildean: Or should I do a generic callback, where I have the connections as, for example, an array?
16:01 < gildean> aandy: that's your choice, depends on the type of connections
16:01 < gildean> i'd prolly just chain them so there's no chance of failure
16:02 < thewanderer1> mscdex: http://paste.debian.net/187224/ is the code that drives serving http
16:03 < thewanderer1> it's almost copy-pasted from some tutorial, I think
16:04 < mscdex> i wonder if it's an issue with content-type
16:04 < mscdex> since you're not setting a content-type header and there's an xml tag at the very beginning.... ?
16:04 < aandy> gildean: Thanks for your feedback
16:05 < mscdex> whereas the "good" url returns a content-type header of text/html
16:05 < thewanderer1> mscdex: could be... I'll check with netcat, sec
16:05 < mscdex> so then maybe the browser ignores the xml tag
16:05 < dhpe> aandy: chaining is perhaps a cleaner implementation. but if you need speed, then perhaps it is wiser to do the checking in both callbacks as you suggested.
16:06 < thewanderer1> mscdex: there's no content-type delivered with node's data, and content-type: text/html with dhttpd's
16:07 < mscdex> yup, that's what it was
16:07 < mscdex> missing content-type and that xml tag tripping things up
16:07 < thewanderer1> "was"?
16:07 < mscdex> yeah i just verified it on my end
16:07 < thewanderer1> so, I'm supposed to send a content-type in node?
16:07 < aandy> dhpe: That was one of the things I wanted to reduce. That, and making an arbiratry set of connections, the first connection might time out before the last is established, but I'll see if I can make a "sexy" common callback+emit solution, otherwise I'll go for chaining :) 
16:08 < mscdex> thewanderer1: you should if your html begins with an xml header :-)
16:08 < gildean> what are you using xml for anyways?
16:08 < thewanderer1> mscdex: and the "text/html" still works somehow... O.o
16:09 < mscdex> thewanderer1: but it general it's good to set those kinds of things anyway, because you don't know how the client UA is going to behave
16:09 < thewanderer1> gildean: XML? for XHTML conformity...
16:09 < mscdex> thewanderer1: change your writeHead line to: res.writeHead(200, {'Content-Type': 'text/html'});
16:09 < mscdex> and you're good to go
16:09 < gildean> why are you using xhtml then?
16:10 < mscdex> either that or use text/xhtml ?
16:10 < mscdex> i dunno heh
16:11 < mscdex> or maybe it's text/xhtml+xml, i forget
16:11 < gildean> why not just use html if the document is html?
16:11 < thewanderer1> mscdex: holy crap, that did it. thanks! (I'm including a more complex mimetype switch in the code, but hey, it still works!)
16:11 < thewanderer1> I think it's application/xhtml+xml
16:11 < gildean> don't use xhtml unless you have a specific reason
16:12 < gildean> if you have a specific reason for xhtml, your app prolly need redesign
16:12 < thewanderer1> I hate having unclosed tags?
16:13 < BennyLava> that's the worst reason ever
16:14 < deoxxa> i think "the guys down at the kkk, who i really respect, told me it was better" would be a worse reason
16:14 < BennyLava> nope
16:14 < BennyLava> not even close
16:14 < deoxxa> oh
16:14 < deoxxa> well ok then
16:14 < BennyLava> :)
16:14  * deoxxa disapproves strongly as well
16:15 < thewanderer1> what do I use, then? HTML 4.01?
16:15 < BennyLava> HTML5, <!doctype html>
16:15 < deoxxa> xhtml was an interesting experiment
16:17 < thewanderer1> HTML5 seems to work... but then, won't the browser enter a different processing mode?
16:17 < BennyLava> The sane one.
16:17 < thewanderer1> okay, the simpler doctype seems to be more fail-proof in browsers
16:18 < thewanderer1> thanks for the useful tip
16:18 < gildean> thewanderer1: no, even if you declare xhtml but then deliver html, it will use the html-parser
16:18 < BennyLava> It's the only logical choice today.
16:18 < BennyLava> Unless you have to weird reason you HAVE TO use XHTML, but that's not very likely.
16:19 < gildean> but actually when it falls back, it uses a "compliance"-mode on most browsers iirc
16:19 < thewanderer1> BennyLava: I was under the impression that XHTML was a successor to HTML... I don't think I've seen any major sites in HTML for years, and HTML5 was still, err, experimental when I last checked
16:19 < BennyLava> huh?
16:19 < gildean> using html5 will give you the best results anyways
16:19 < BennyLava> thewanderer1: no, that is incorrect. It may have been seen as such one day, far in the past, but that is certainly no longer the case.
16:20 < BennyLava> thewanderer1: XHTML was a failed experiment.
16:20 < BennyLava> It serves no useful purpose on the web.
16:20 < gildean> xhtml was supposed to be the shit like 5 years ago
16:20 < gildean> and a lot of devs are still using it without even knowing why
16:20 < BennyLava> and well, XML itself is a prety shitty format to begin with :p
16:20 < BennyLava> pretty*
16:20 < gildean> or more like 7 years, time flies by
16:21 < thewanderer1> er, XML is pretty decent. now, if only browsers understood that <img src=""></img> is perfectly valid... :/
16:21 < mscdex> jsonml!
16:22 < BennyLava> thewanderer1: erm, you don't seem to really get it. Browser *cannot* be changed to understand that, for legacy compatibility reasons.
16:22 < gildean> json is a lot easier when working with javascript
16:22 < BennyLava> Just like <script src/> can never work in practice.
16:22 < BennyLava> Or just <script src>
16:24 < thewanderer1> BennyLava: I know... and I blame the fact that HTML *looks like* XML, but does not comply
16:24 < BennyLava> XML came after HTML, you know that right?
16:25 < thewanderer1> that explains a lot
16:27 < artificialex> hey, is there a very simple issue/bug tracking javascript app, a stripped down equivalent of redmine or Trac?
16:27 < thewanderer1> I'd think browsers' parsers would be re-implemented for XHTML based on XML, looks like I was wrong :P
16:28 < artificialex> I want something my clients can basically look at the site I'm developing for them, and leave notes etc
16:28 < BennyLava> thewanderer1: no, of course you are right.
16:28 < BennyLava> XML is obviously not parsed with an HTML parser, heh.
16:28  * BennyLava facepalms
16:28 < BennyLava> but it requires you to deliver the document with an XML or XHTML media type: application/xml or application/xhtml+xml
16:29 < BennyLava> Which will immediately fail in IE<=8, of course.
16:32 < thewanderer1> okay, so to trigger XML processing, I need: content-type, xml declaration, doctype declaration...
16:32 < BennyLava> You don't need an XML declaration, no.
16:32 < BennyLava> (Or a doctype declaration.)
16:35 < thewanderer1> just tried it, it confirms what you've just said, at least for the browsers I have here...
16:35 < thewanderer1> I'll stick to HTML5 from now on. thanks for your time!
16:35 < BennyLava> yw, good luck
16:37 < pringlescan> if I have an object with integer properties but it's non-contogious, there's no performance benefit for using an array, right? or is that only if I'm looping over it,
16:37 < pringlescan> *contiguous 
16:40 < rovar> what do you want to do with it?
16:40 < rovar> do you want it to be a sparse array? 
16:40 < rovar> or is it an object?
16:49 < F17USER> Hello everybody
16:49 < astropirate> Anyone have an example of how chunked encoding works with templating engines? they require their data before they compile. that negates the entire purpose of chunked encoding doesnt it?
16:49 < astropirate> Greetings F17USER 
16:49 < F17USER> Howdy Astropirate.
16:56 < pringlescan> rovar, I wouldn't call it a spare array, it's more of a lookup table
16:58 < rovar> pringlescan, then why bother with iterating through it?
16:59 < pringlescan> rovar, I thought I had said, the only time an array would be slower, would be iterating through it… but object property lookups are they slower than array lookups
17:01 < rovar> pringlescan, nah, they are the same. AFAIK until the static arrays enhancement makes it into v8,  arrays are just objects, but with ints as keys
17:09  * SirFunk wants to write something cool in node but can't think of anything
17:10 < SirFunk> some kind of cool 'real-timey' webapp that is useful
17:10 < rovar> make a chat :)  
17:11 < garrettwilkin> you could make some D3 visualizations into 'web-appy' things
17:11 < garrettwilkin> with socket.io
17:11 < garrettwilkin> i did that
17:11 < garrettwilkin> http://hc1.goodnyou.me
17:12 < garrettwilkin> and it was fun
17:12 < pringlescan> I have tons of data for the united states, zipcode coordinates, the state for each area code, neighboring states, postal abbreviations… and I have a bunch of modules that work with that data.
17:12 < pringlescan> I'm thinking of just publishing a module that exposes the raw data and some optimized lookup and conversion functions then leaving the heavy duty lifting for postal, phone and geographic operations in separate modules.
17:13 < pringlescan> is this a poor way to separate things? i can see tons of people needing just the data, but I didn't want to make us-data-postal, us-data-phone… I guess I could but I
17:13 < pringlescan> 'd appreciate any info
17:14 < rovar> pringlescan, you could make each available as a $resource
17:14 < rovar> then you can bind them together in clever ways
17:14 < rovar> also, I'll take a copy of your database :) 
17:14 < pringlescan> rovar, link?
17:14 < dominictarr> pringlescan, I think that it's quite a good idea to have 'data modules'
17:14 < dominictarr> like you are describing.
17:14 < pringlescan> I just don't think that we need to use our databases for these, in my experience if I arrange everything correctly, things go VERY fast in V8.
17:15 < pringlescan> one time, I indexed things that started with in an object Lookup Table {A: [2: ['ny
17:15 < dominictarr> if the data set is relatively small, like only a few thousand or less, then it's fine to keep it in memory.
17:15 < dominictarr> also, if it's not gonna change.
17:15 < rovar> pringlescan,  I've not done it before, but something like this: http://stackoverflow.com/questions/9981090/resource-relations-in-angular-js
17:16 < pringlescan> ',nd'], B: [3: [and]} etc. 
17:16 < pringlescan> i forget why I had to do that instead of having them all in the same place
17:16 < pringlescan> but it worked pretty fast.
17:16 < pringlescan> oh, that's when I was searching and iterating rather than doing lookups
17:17 < rovar> pringlescan, the thing that's missing for your datasets is indexing.. you could load them all into hash tables.. 
17:17 < rovar> then iterate through to merge things..
17:17 < rovar> or you could have a database do it, which is kind of built for that purpose. 
17:17 < pringlescan> dominctarr, that applys to most things I'm working with.
17:18 < pringlescan> https://github.com/jmealo <— be on the lookout for the us data, I'm also porting over all the useful phone number and postal address utilities from perl
17:18 < pringlescan> my pride and joy is a postal address extractor that finds postal addresses (even on one line) in blobs of arbitrary text
17:18 < pringlescan> and second in line is a phone number extractor that finds phone numbers on webpages even in images (not for telemarketing, for finding a company's official website if you have a database of companies info)
17:19 < pringlescan> I'm working on doing fuzzy geolocation of phone numbers by looking at which cities are assosciated with certain area codes and exchanges and doing a center of mass based on population, that'll be in the nanp-utils module.
17:22 < pringlescan> so, should I just offer exports from a main us-data module or would you recommend breaking them up?
17:22 < pringlescan> I don't even want to include/require unused files because if they contain many validation regexps (as the postal one does) I don't want to waste time compiling that on launch
17:34 < stagas> pringlescan: you could have them in lib in splitted then export all of them in an index.js, this way one can do require('us-data') or require('us-data/lib/phones') if they only need that
17:35 < jnardiello> hi all
17:36 < pringlescan> stagas, I like that idea, but what I really need to get these modules out and public is an easier way to generate documentation, I tried groc but I couldn't find any good examples and I don't like adding that much non-code content to my source code files
17:36 < pringlescan> (Nor do I like that I can't put a one-line comment explaining something that's not intuitive without including it in my documentation)
17:39 < rovar> pringlescan, if you put that data out in module form with a simple syntax for fetching items from a hash table, I'd use it
17:39 < rovar> pringlescan, but the most useful form would be json files that I could just require directly
17:40 < pringlescan> rovar, that's fine for the smaller ones, but it's better to require native javascript files than to try to parse huge json files, from my experience
17:40 < pringlescan> I could always include those in the dist folder, but in some cases you may want to use my optimized lookup functions (limited cases, but I do know some things require non-trivial normalization)
17:41 < rovar> pringlescan, it either parses json or it parses js, either way it's parsing and building objects, there is no escaping it
17:42 < rovar> unless you load the js which then calls back to a server which hosts the data
17:42 < pringlescan> rovar, I think parsing native code is 30-50% faster depending on your json implementation
17:42 < pringlescan> I definitely will include json files and or a generator
17:42 < rovar> pringlescan, I think the 2nd part is the way to go.. provide the json then provide some accessor libraries with helper functions. 
17:43 < pringlescan> for example you may want area code -> state, or state->area code
17:43 < rovar> i've looked at the v8 code, parsing json and parsing js use the same parser, only when parsing json, the parser has to do far less work. 
17:43 < pringlescan> I guess I should let you guys flip the data, that's kind of stupid for me to include that
17:43 < rovar> i haven't looked at  node's  'require' function, so it might be doing something stupid there
17:44 < pringlescan> rovar, i just remembered I didn't use .json because the postal module has validation regexps you can't really put in json unless you do it as a string… but that'd be a pretty backwards way of doing things
17:44 < rovar> pringlescan, makes sense. 
17:44 < AntelopeSalad> is searching a js object really going to be faster than dropping it into redis?
17:45 < garrettwilkin> has anyone used mongojs to connect a databae which has authentication enabled?
17:45 < garrettwilkin> how does that work?
17:46 < pringlescan> AntelopeSalad, should require less memory, dependencies and I'm going to bet to overhead of calling redis versus doing it natively isn't worth it if you're talking to me
17:46 < garrettwilkin> Mongo Docs are not really helping me with an example
17:46 < pringlescan> I have considered making these native modules, but I don't think anyone needs that kind of speed, this was fine for bath jobs, redis kue was the only thing slowing it down ;-)
17:46 < AntelopeSalad> pringlescan: yeah i was
17:47 < AntelopeSalad> how up to date is your data btw?
17:47 < rovar> AntelopeSalad,  I think redis can offer more interesting ways to index and query the data. 
17:47 < pringlescan> AntelopeSalad, normally, I'd be down to benchmark, but I like my code to run in browser and on the server and have zero dependencies if avoidable.
17:48 < rovar> in js, you just get  key -> object.. so if you want multiple indices, you have to duplicate your data.. 
17:48 < rovar> that said, I'd still prefer JSON files :P
17:48 < rovar> + utility functions
17:48 < AntelopeSalad> sounds like you would use native js objects for almost everything
17:48 < AntelopeSalad> and if you needed more, then maybe put it into redis
17:49 < AntelopeSalad> (for this example)
17:49 < pringlescan> you'd be surprised how much you can do without the actual data just using ranges
17:50 < rovar> what do you mean by ranges?
17:50 < pringlescan> let's say I want to get the state of a zipcode
17:50 < pringlescan> I don't need a database of every zipcode for that, the region is encoded in the first few digits.
17:51 < rovar> so you'd do a double lookup?
17:51 < pringlescan> it may be marginally faster to do a lookup but the ram requirements and flexibility is greater for ranges, I can then do a metropolitan area lookup using the ranges or a number of other things
17:51 < rovar> I see your point, but I also don't think it would be possible to optimize your space unless your app was dedicated only to a single region
17:51 < pringlescan> you can get the state from the first few digits, so why include all the zipcodes for that purpose?
17:51 < rovar> when you said ranges, I thought you meant like range queries.. in Redis for this type of data, I think it would offer a significant utility via range queries
17:52 < pringlescan> … I guess… 
17:52 < rovar> pringlescan, that only matters if you only care about 1 state
17:52 < pringlescan> how so?
17:52 < rovar> but if you care about all of the states, then you're going to have to have it all loaded into memory anyways
17:52 < rovar> for a hash table, having 100 keys or 5000 won't change the speed of a lookup
17:53 < pringlescan> okay, so let's say there's 3 states for each leading digit, I get the first leading digit and enter a switch for those 3 states, and then by looking at the first two digits without doing a lookup or having the data, I've resolved zipcode -> state
17:53 < pringlescan> rovar, there's 48,000 zipcodes
17:53 < pringlescan> because they cover multiple areas
17:53 < pringlescan> 72,000 if you count ridiculous military and weird ones
17:53 < rovar> pringlescan, you could structure a tree of  region -> state and only then would you be faster than a hash lookup. 
17:53 < pringlescan> I know, you're thinking "there can only be 9,999 zipcodes" but… not so somehow
17:54 < rovar> 48,000 is the same speed as 1000 for a hash table
17:54 < AntelopeSalad> hmmm
17:54 < rovar> well.. depending on the size of the data.. you start to lose cache coherency with hash tables when they get too big
17:54 < AntelopeSalad> are they stores as 5 digits or the full length?
17:54 < AntelopeSalad> *stored
17:54 < rovar> for this case I'd say you're fine. 
17:55 < pringlescan> there are multiple cities per zipcode, the plus 4 is a delivery point, so for the purposes of zipcode lookups you only need #####-xxxx (xxxx refers to a specific location)
17:55 < rovar> if you built the tree, still to get any advantage, you'd have to have that tree in c++
17:55 < AntelopeSalad> 48,000x 5 digit zipcodes would be a huge amount of data to load in
17:55 < AntelopeSalad> that's half a gig :/
17:55 < rovar> building said tree in js probabl won't gain you any advantage over the native hash
17:55 < rovar> AntelopeSalad,  they're 4 or 8 byte ints
17:56 < pringlescan> rovar, sadly they get stored as strings due to leading zeros
17:56 < rovar> that's 382k
17:56 < rovar> pringlescan, fix that :) 
17:56 < AntelopeSalad> how is my math so off hah
17:57 < AntelopeSalad> i just did 48,000 * 11111
17:57 < pringlescan> that being said if you're doing client side zipcode -> state validation, why include any of the data when about 30 lines of code with a maximum of 3 conditions and one small lookup will do the same thing
17:57 < pringlescan> I'll tell you right now the data consumes more than that in V8.
17:58 < rovar> pringlescan,  i'm not sure its possible to start up v8 in under 382k :)
17:59 < rovar> at any rate,  yes, redis will probably store the data more compactly, because its a database :)   you also get range queries, which might be helpful for address lookups, IMO
17:59 < pringlescan> rovar, I may have mispoken about how small the data required would be to do the ranges
18:00 < pringlescan> rovar, the documentation for how to parse and validate addresses barely uses a database but rather a range of known values, remember they had to do this on very old hardware, so it had to be very efficient
18:00 < rovar> it's the same size, ultimately,  but if someone is worried about space, then they'll have to come up with some way to scan the file on disk
18:00 < pringlescan> it's not necessary to have the data set to do most of the operations if you understand how the data is encoded
18:02 < nkuttler> any recommendations for client-side template rendering? i'd rather send data, not markup
18:02 < pringlescan> nkuttler jsrender
18:03 < nkuttler> pringlescan: thanks
18:03 < freewil> i use browserijade to send jade views to the browser
18:03 < nkuttler> heh. "Next-generation jQuery Templates, optimized for high-performance pure string-based rendering, without DOM or jQuery dependency"
18:03 < nkuttler> jquery templates with no jquery dep? :P
18:04 < nkuttler> freewil: will look into it, thanks
18:04 < rovar> nkuttler, why not send json?
18:04 < nkuttler> rovar: send what as json?
18:04 < astropirate> What is this? :  new (winston.transports.Console)()    why is the object name wrapped?
18:04 < freewil> it soundsl ike thats what he wants to do... but then use the json data to render a view
18:04 < nkuttler> right now i'm really just exploring options
18:04 < ryanj> handlebarsjs.com
18:05 < rovar> handlebars is popular..  I am currently using angular.js   but that may be a bit overkill if you're just looking for a templating engine. 
18:06 < nkuttler> yeah, angular looks to big atm
18:06 < rovar> actually.. browserijade sounds pretty awesome
18:06 < nkuttler> i'll probably use express + mongoose + socket.io + x for template
18:07 < rovar> precompiled jade, if it can still let you populate the templates with your own objects dynamically... e.g.  compiledTemplate.render({'foo' : 'bar'}); 
18:08 < freewil> rovar, of course
18:08 < freewil> it wouldnt be useful otherwise ;)
18:08 < rovar> then you can send json to the client, and render it straight into the templates
18:08 < rovar> full of win :)
18:09 < rovar> I'm using angular because I'm building a  scheduling/sync app which re-uses a lot of calendaring components everywhere, so I wanted a framework that manages that easily.
18:09 < rovar> angular is great for that.. 
18:10 < nkuttler> oh, swig does client-side rendering as well
18:11 < rovar> swig should change its name
18:15 < aandy> dhpe: Just in case you're interested, this is what I came up with: https://gist.github.com/d835272fc097fa506742 , "sexy" enough for me :)
18:19 < rovar> aandy, seems good
18:23 < aandy> Thanks. Glad I'm not doing it completely wrong ;)
18:25 < photofroggy> helloooo
18:25 < photofroggy> Does anyone here have experience with expressjs?
18:26 < photofroggy> Cookies seem to be not working very well; I can set cookies just fine, but the cookie parser doesn't seem to create the req.cookies attribute. Using req.get('cookie') returns the expected results, though.
18:27 < photofroggy> testing a thing on LAN on OS X
18:28 < pringlescan> rovar, https://gist.github.com/3602657 this is with a small hash table, do you see what I meant about rarely having to include the whole data set
18:29 < pringlescan> that's 2.3kb gzipped over the wire
18:30 < pringlescan> I could make it smaller if I used conditionals, but it'd probably be magnitudes slower and not worth saving the 1kb.
18:30 < rovar> i agree
18:31 < rovar> I guess my point is that this will save you quite a bit of RAM, but won't save you any speed.. you will still lose speed over a complete zip -> state  object. 
18:31 < rovar> here you're sacrificing speed for RAM, but you don't know the use cases of your customers, so its hard to be sure you want to make that tradeoff
18:31 < pringlescan> we're talking a nanosecond if there's similar error handling included
18:32 < pringlescan> either way, we're talking ram and bandwidth if this is running client side
18:32 < rovar> true
18:32 < rovar> if you're sending this to the client then I definitely agree that you should optimize for space
18:32 < hortinstein> so what is the feasibility of writing a module that uses CORS headers combined with request and browserify?
18:33 < hortinstein> any huge hurdles I am not understanding before I embark on this journy
18:33 < rovar> hortinstein, i reckon you could provide CORS in connect middleware
18:34 < rovar> I'm not sure so it could apply to request.. i'm not sure what browserify is 
18:34 < rovar> ah.. I'm not sure if you need browserify
18:34 < hortinstein> @rover that was what I was going to do, well I basically want a client to hit an external api to pull json, so I was going to use request on the clientside to o that
18:35 < rovar> hortinstein, there are plenty of options for pulling json over http, you don't need browserify.. 
18:35 < pringlescan> http://jsperf.com/zipcode-to-state what do you guys get for this?
18:35 < hortinstein> @rovar yeah, i guess your right, 
18:36 < hortinstein> @rovar but request is so easy!
18:37 < rovar> pringlescan,  2,000,000 / second
18:39 < pringlescan> rovar, thanks, wow… I got 574,488 using Chrome on my Galaxy Nexus
18:39 < pringlescan> which is only 6x slower than on an i7 w/ 16gb of ram
18:39 < pringlescan> that's impressive for ARM
18:40 < pringlescan> I know this is just a tiny example, but, if you can squeeze the data in, I don't think making round trips to a database is needed.
18:40 < photofroggy> any ideas about the cookie thing?
18:41 < pringlescan> photofroggy, to keep your cookies moist and chewey always make a wookie noise when you put them in the oven and sprinkle a little V8 on them.
18:41 < AntelopeSalad> this covers every reasonable zip code right?
18:41 < photofroggy> pringlescan: Ok, but how do I make sure expressjs actually parses them?
18:41 < photofroggy> already have the middleware stuff loaded in
18:41 < pringlescan> AntelopeSalad that's right from the USPS, it's their up to date 3 digit prefixes.
18:41 < micheil> oh, hello photofroggy 
18:41 < micheil> long time no see :)
18:42 < pringlescan> photofroggy, I don't use frameworks, I'm not brave enough to commit
18:42 < photofroggy> oh, miksago
18:42 < photofroggy> sup?
18:42 < micheil> yep.
18:42 < micheil> not much
18:42 < micheil> you?
18:42 < poorman> photofroggy: make sure they are in the correct order
18:42 < AntelopeSalad> i think it's safe to say performance won't really be an issue with these #s
18:42 < photofroggy> trying to throw a live demo of an app together
18:42 < pringlescan> I think I'm more into being a data nerd and analytics than front end stuff even though I like usability
18:42 < photofroggy> proving a little troublesome using node
18:42 < photofroggy> poorman: ? what is the correct order?
18:43 < pringlescan> AntelopeSalad, not for zipcode -> state, but the full blown address parsing and normalization needs to happen on the server or through a web service
18:43 < photofroggy> poorman: session first?
18:43 < photofroggy> or should cookieparser be before everything?
18:43 < poorman> no
18:43 < photofroggy> ah, dinner, gtg
18:43 < pringlescan> although the minimized gzip code for something that can validate 100% of us addresses could probably be done in under 500kb
18:43 < AntelopeSalad> right, zip to state is still useful enough to sit by itself on the client though
18:44 < pringlescan> (We're talking making sure streets exist and that the house number matches what the postal service thinks is right for that street)
18:44 < pringlescan> that kind of validation is helpful when you mail things out or ship products
18:44 < pringlescan> however, it's needed to parse addresses that appear all on one line,  you basically need to know all the cities to find out where the parts of the line are
18:45 < poorman> photofroggy: cookieParser, bodyparser, methodOverride, session
18:45 < pringlescan> So 123 Easy Street, Apt 321, Your Town, NY 12345
18:45 < pringlescan> unless they use commas, that's going to be damn impossible to find out where the first and second line starts without knowing the first letter of the city name
18:46 < pringlescan> Then you run into addresses like 123 Route 40, Cape May, NJ
18:46 < pringlescan> which is often abbreviated 123 NJ-40, Cape May, NJ
18:46 < pringlescan> in other words, you can't look for street designators to find the end of the first line :-(
18:58 < pringlescan> I should make a native module for haversine and really basic geospatial functions and see if it's faster than querying mongo
18:59 < pringlescan> Too bad I suck at math and haven't coded anything non-trivial in C/C++
18:59 < pringlescan> I figure there should be relevant perl modules to port over.
19:18 < poorman> I've now spent the entire day on jsperf looking through all the tests
19:18 < poorman> somone should really compile a book on these results
19:19 < photofroggy> poorman: what order should the middleware things be loaded in for expressjs?
19:19 < photofroggy> to get the cookie stuff working
19:20 < photofroggy> whatever order I put things in, it doesn't work
19:20 < poorman> photofroggy: 1. cookieParser, 2. bodyparser, 3. methodOverride, 4. session
19:21 < photofroggy> poorman: where is the documentation on this? Or is there not any?
19:21 < photofroggy> expressjs' docs are helpful to a small extent
19:21 < photofroggy> and thanks
19:21 < poorman> I'm not sure, I just played around with it till it worked
19:21 < photofroggy> oh
19:22 < photofroggy> :\
19:22 < photofroggy> hm, still not working
19:22 < photofroggy> might resort to using sessions.
19:22 < AntelopeSalad> gist it
19:22 < photofroggy> but, cookieparser needs to work for that, surely?
19:23 < poorman> oh ur not using sessions?
19:23 < photofroggy> no
19:24 < poorman> yeah the old docs on express we're much better
19:24 < poorman> albeit outdated
19:25 < photofroggy> can't use sessions either, same problem
19:27 < poorman> create a gist and i'll take a look
19:33 < cjblomqvist> Is it possible to create an object A that you can call an arbitrary method on, despite there not being such a method? I.e. var A = {}; a.test();  (and then catch the call to test and not have it return an undefined error)
19:34 < photofroggy> poorman: this is the config bit so far https://gist.github.com/3603689
19:35 < freewil> cjblomqvist, i dont think so
19:35 < freewil> you could do it jquery plugin style and pass the method name as a string
19:36 < cjblomqvist> Like jQuery.A('method', otherArgs); you mean?
19:36 < freewil> yeah
19:36 < RLa> cjblomqvist, only in very few js implementations
19:37 < cjblomqvist> RLa: What do you mean?
19:37 < cjblomqvist> freewil: It's a good suggestion actually, but I'm not sure it's going to be good enough, but we'll see
19:37 < RLa> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/noSuchMethod
19:37 < AntelopeSalad> why wouldn't hasOwnProperty work?
19:38 < poorman> photofroggy: I normally put static at the end
19:39 < cjblomqvist> Erhm, "ill-thought" customer specification
19:39 < poorman> photofroggy: also what's this chat.configure in the middle of the app.configure function?
19:40 < cjblomqvist> RLa: Really interesting, do you know if it works in Node or should I try it?
19:40 < RLa> probably not
19:41 < cjm> http://mixlr.com/nodeup
19:44 < cjblomqvist> For anyone interested, __nosuchmethod__ is not implemented in Node (and I don't think in V8 at all)
19:48 < dominictarr> cjblomqvist, and that is a good thing.
19:48 < cjblomqvist> Yes, I guess so
19:49 < dominictarr> other wise we'd have to suffer through all the rubyesq DSLs in node
19:49 < jetienne> cjblomqvist: is that javascript ?
19:49 < cjblomqvist> jetienne: yes
19:49 < dominictarr> I think spidermonkey has that though.
19:49 < cjblomqvist> It does
19:49 < jetienne> cjblomqvist: ref ?
19:49 < cjblomqvist> According to an issue on V8, they are considering removing it though
19:50 < cjblomqvist> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/noSuchMethod
19:50 < dominictarr> does anyone know the typical datarate of a wifi network?
19:50 < jetienne> cjblomqvist: this is mozilla wiki, not js spec :)
19:50 < cjblomqvist> ( http://code.google.com/p/v8/issues/detail?id=264 the bottom for the comment about removal from SpiderMonkey )
19:50 < cjblomqvist> Oh, it's not a part of the official ECMA spec
19:50 < dominictarr> nothing with leading underscores is the the spec.
19:51 < cjblomqvist> I guess I have a loose definition of JavaScript
19:55 < poorman> photofroggy: before I forget, you should really check out the connect docs first
20:01 < Terumi> hello?
20:03 < Terumi> is it ok to ask questions here?
20:03 < BennyLava> Of course.
20:03 < BennyLava> Ask me anything about cheese.
20:03 < Terumi> do you like feta cheese?
20:05 < Terumi> how can you create game instances of a game using nodejs?
20:06 < Terumi> multiple instances of the same thing
20:09 < astropirate> Terumi, what do you mean
20:10 < Terumi> I;m making a game
20:10 < astropirate> myArray = []; my_for_loopo { myArray.push(new GameInstance) }  o_O
20:10 < Terumi> and the game runs on the clients
20:10 < Terumi> and I have a two players game
20:10 < photofroggy> poorman: sorry, had to dash out quickly, what did you say before mentioning the connect docs, if anything?
20:11 < Terumi> so I and I want tha game to run to the server
20:11 < Terumi> as many as the player pair are
20:11 < astropirate> Terumi, what kind of game are you working on?
20:11 < Terumi> checkers
20:12 < ryanj> Know someone with a pass to nodecamp that can't make it? Let me know! I'm interested in going
20:12 < photofroggy> BennyLava: you got a bun to bite?
20:12 < Terumi> I could be a tic tac toe as well
20:12 < BennyLava> photofroggy: always
20:12 < astropirate> Terumi, i see. What you should do is have only one instance of the game per lobby. You will do all o fyour logic simulation here. Don't trust anything the user says
20:13 < Terumi> yes
20:13 < Terumi> but how can i do it?
20:14 < astropirate> Terumi, how can you do what
20:14 < poorman> photofroggy: i'm a longshot from being any kind of authority on this, but I usually put my static last, so the router middleware has a chance to be called
20:15 < photofroggy> poorman: ok, thanks
20:15 < poorman> photofroggy: also you problably want to use cookieSession middleware if you dont want to have a session store
20:18 < photofroggy> poorman: can't really find anything relevent in the connect docs
20:19 < benatkin> ROFL https://twitter.com/nodenpm/status/242355235971010560
20:20 < poorman> lol
20:21 < benatkin> I was expecting it to say "bold ass claims"
20:21 < poorman> twitter char limit strikes again
20:22 < photofroggy> poorman: does connect have to be installed separately? Whenever I install express it seems to install connect as a sub thing.
20:22 < poorman> I believe express runs on top of connect
20:22 < poorman> most things in express are just exports of connect
20:33 < stisti> what am I missing? I have a dir "node_modules" in current dir. I have "npm install tweeter.js" and it succeeded. Now if I run node and type require("tweeter.js"), it says:
20:33 < stisti> > require("tweeter.js")
20:33 < stisti> Error: Cannot find module 'tweeter.js'
20:33 < stisti>     at Function.Module._resolveFilename (module.js:338:15)
20:34 < cjm> anyone want to call into nodeup about something? 
20:37 < dhpe> stisti: when you require modules you do not append ".js"
20:38 < stisti> > require("tweeter")
20:38 < stisti> Error: Cannot find module 'tweeter'
20:38 < stisti>     at Function.Module._resolveFilename (module.js:338:15)
20:38 < stisti> this npm module has ".js" in its name
20:45 < boutell> I'm having trouble with middleware for authentication. It's calling res.redirect() and NOT calling next(), but the regular homepage route gets called anyway. This is Express 3.0
20:45 < boutell> Here's the code:
20:45 < boutell> https://gist.github.com/3604375
20:46 < boutell> (I am trying to intercept homepage access and send the user to a login URL if they are not already logged in, otherwise continue.)
20:55 < boutell> oh! Whaaat... my route is called BEFORE the middleware
20:55 < boutell> that does not make sense
20:57 < AntelopeSalad> boutell: it would if you have the app.router middleware set before your custom middleware
21:00 < boutell> AntelopeSalad: yeah. Just found that. And if I called something that set up some routes for me, it's too late to change that. Crap.
21:00 < AntelopeSalad> it's never too late
21:00 < boutell> I should provide an option to pass middleware to my handy app bootstrapper
21:00 < boutell> although... actually... those routes *should* come first.
21:01 < boutell> So it sounds like I can't have routes that are covered by middleware and routes that aren't
21:01 < boutell> unless I namespace the URLs
21:01 < boutell> because the routes are implemented by one middleware function 
21:02 < AntelopeSalad> what's the problem in the end?
21:03 < AntelopeSalad> if you want the gist to work as planned, just put app.use(secure) before the app.use(app.router) line that express put in by default
21:09 < boutell> AntelopeSalad: there are routes that should not be protected, such as those that are critical to authentication itself
21:10 < AntelopeSalad> ok, so let's say you want it only applied to home (/)
21:10 < boutell> for that I can do app.get('/', myMiddleware, function(req, res) { ... })
21:10 < AntelopeSalad> then you would remove app.use(secure) and change your route to be: app.get('/', secure, fn...)
21:10 < boutell> yep
21:11 < AntelopeSalad> that allows you to cover some routes but not all
21:11 < boutell> if I have a bunch of stuff that requires login and a bunch of stuff that doesn't, I should probably make sure the stuff requiring login is at /user/* and have the middleware look for a prefix
21:11 < boutell> in that case I also need a way to register the middleware early
21:12 < AntelopeSalad> you could do: app.use('/user', secure);
21:12 < boutell> yeah
21:12 < boutell> I still have to do it before app.use(app.router) happens implicitly
21:12 < AntelopeSalad> yeah
21:16 < AntelopeSalad> boutell: i'd be a little careful going down that route though, you might end up forcing weird urls just to abstract something that doesn't really need to be abstracted that bad
21:19 < cjblomqvist> I'd have to say that AntelopeSalad's suggestion to do something like app.get('/', secure, fn...) is probably the most common way to do it (best practice?)
21:20 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:20 < AntelopeSalad> one example off the top of my head would be visiting your own settings page to change your e-mail or whatever
21:21 < AntelopeSalad> it would seem reasonable to have that as /settings or /profile , having /user/joeblow makes it seem like it's public
21:29 < boutell> AntelopeSalad: it would probably be /user/settings, which is a little verbose, but not confusing.
21:32 < boutell> ... but I can secure more than one prefix, registering the middleware multiple times.
21:32 < boutell> What does express use to match URL prefixes? That's a useful thing
21:34 < andrewdeandrade> Does anyone know of any large/mature projects on github using express.js 3.x and mongoose 3.x to study from? The example apps on expressjs.com are all closed source apps.
21:38 < boutell> ... the URL prefix matching is in the guts of connect. It's not separately available alas.
21:39 < AntelopeSalad> boutell: you might want to look at this too http://expressjs.com/api.html#app.all
21:43 < loglaunch> andrewdeandrade: I would also be interested in finding a mature project that uses the latest version of express
23:28 < hcab> any mac osx users?
23:28 < andrewdeandrade> hcab: yup
23:29 < hcab> where should I be installing my node modules? for instance I want to use restler
23:29 < deoxxa> mac users? in #node.js? infeasible!
23:29 < hcab> I ran npm install restler within the project directory and it created a node modules folder . is this correct?
23:29 < deoxxa> that's correct
23:29 < deoxxa> modules should pretty much always be installed locally to your project
23:29 < hcab> sorry deoxxa
23:30 < deoxxa> heh, i was just making a bad joke about mac users :P
23:30 < deoxxa> (disclaimer: i'm using a macbook right now)
23:30 < hcab> ok this particular module uses require('util') and require('./restler') per the example
23:31 < hcab> Im trying to talk to a couched instance
23:36 < hcab> node reports it cannot find './restler' any ideas?
23:36 < hcab> trying to use this example https://github.com/danwrong/restler
23:36 < rovar> did you npm install restler?
23:36 < hcab> yes I did
23:36 < rovar> if so.. require('restler') should be fine
23:37 < hcab> ok I will try that
23:38 < hcab> ok that worked. thanks. When would one want to use the './' notation?
23:39 < hcab> does anyone use couchdb? I installed it , it ran, but since rebooting it's not running. How do I restart the service?
23:44 < rovar> Z2=
23:44 < rovar> -snk  
23:48 < rovar> hcab,  you'd use ./  to require a js file in the current directory
23:57 < Sly> Anyone around?
23:57 < livinded> ya
23:57 < Sly> Just wondering. Seemed mighty quiet in here.
23:57 < Sly> Didn't know if my connection had dropped like it has the past few nights.
23:57 < livinded> trying to figure out my plans for summer camp
23:58 < Sly> Sounds like fun. I'm about to be working on my latest project, again. lol.
23:58 < codingstream> this isnt exactly the appropriate channel, but has anyone gotten xterm-256color to work on a joyent smartos machine?
23:59 < livinded> Anyone know if there's going to be free/cheap parking available at joyent if you are taking the bus?
23:59 < Sly> If you're taking the bus, why would you need to park? O_o
23:59 < livinded> I need to get from Los Angeles to San Francisco
--- Log closed Mon Sep 03 00:00:11 2012
