--- Log opened Sat Jan 19 00:00:49 2013
00:00 < CoverSlide> if you don't like the non-standard methods, don't use them
00:01 < CoverSlide> heck, if you don't like certain non-standard mathods you don't need to use those either
00:01 < CoverSlide> s/non-//
00:02 < Iszak> CoverSlide I'm aware, I was just bringing to light how removing these non-standard methods could make code more consistent, could make the memory footprint lighter, perhaps execution faster. I am just trying to learn more complex JS and this legacy non-standard BS is getting in my way.
00:04 < CoverSlide> it could, or full compliance could make it run slower, you never know, __defineGetter__ might be faster than Object.defineProperty
00:05 < Iszak> You're right.
00:05 < CoverSlide> also, being standard doesn't make it better
00:05 < CoverSlide> just a close enough adherence to the standard is enough. edge cases that noone cares about, well, who cares
00:05 < rfgarcia> anyone have experience working with https://github.com/dominictarr/event-stream or similar stream-composition/pipelining libs? event-stream looks nice but would be nice to know any alternatives
00:06 < CoverSlide> chrome runs all the code out there that anyone cares about, i am fine with that
00:06 < Raynos> isaacs: so I can't `npm i npm@latest -g` because that's what I did
00:06 <@TooTallNate> Raynos: when you get into inception like that, i usually resort to the npmjs.org/install.sh script
00:07 < Iszak> CoverSlide I am fine with that in chrome as well, but I think node.js can do better.
00:07 < CoverSlide> well, the node devs are busy working on more important things
00:07 <@TooTallNate> Iszak: people do use __proto__ and friends in node too, so disabling would break existing code as well
00:07 <@TooTallNate> Iszak: we're not in the business of breaking people's apps
00:07 < Iszak> TooTallNate well you are when it comes to new version numbers :D
00:08 < Iszak> TooTallNate and you're right, this is what spurred me into this discussion, why are people using __proto__ do they simply not know of the standard way? do they not care? do they want to type a few less characters ?
00:09 <@TooTallNate> Iszak: personally, i find it useful to replace the proto of existing objects
00:09 <@TooTallNate> Iszak: and there's no Object.setPrototypeOf()
00:09 <@TooTallNate> unfortunately
00:09 < Iszak> I know.
00:09 < Iszak> Do you think there should be?
00:09 < CoverSlide> well the standard's not gonna be reweitten anytime soon
00:10 <@TooTallNate> Iszak: not particularly… i think the only time it's polite to set the prototype is immediately when an object is created
00:10 <@TooTallNate> Iszak: see https://github.com/tootallnate/create
00:10 <@TooTallNate> Iszak: Object.create() is good enough… i just want it for the rest of the built-ins
00:12 < Iszak> Isn't Array prototyping Object? How come it doesn't have that method?
00:12 < CoverSlide> Iszak: Array is prototyping Object.prototype, not Object
00:12 < Iszak> Ah
00:13 < CoverSlide> >> Object.getPrototypeOf(Array) == Function
00:13 < purr> CoverSlide: (boolean) false
00:13 < CoverSlide> oops
00:13 < CoverSlide> whatever
00:13 < Scrat> Can someone with validator installed try this? require('validator').check('ghfdghdfghdfghdfghfdghfdghhjfghj').len(5, 4096).isUrl();
00:13 < Iszak> >> Object.getPrototypeOf(Array) == Function.prototype
00:13 < Scrat> uses 100% cpu for me
00:13 < purr> Iszak: (boolean) true
00:14 < Raynos> TooTallNate: that's how I got unstuck. But `npm i npm@latest` should just work :p
00:15 < Iszak> TooTallNate Not that I disagree with the idea of having the Array.create and Function.create methods, what use case can you give me for these as I can't think of any.
00:15 <@TooTallNate> Raynos: sure but sometimes npm breaks itself :)
00:16 <@TooTallNate> Raynos: and/or you upgrade node and that npm version is now incompatible
00:16 <@TooTallNate> Iszak: it's a small group of use-cases, but for example, NodObjC's objective-c objects are Function instances… and I needed a way to set the prototype of those
00:17 < Scrat> someone please confirm this, I'm going crazy over here
00:17 < CoverSlide> Scrat: let's just assume that noone here uses validator
00:17 < Iszak> TooTallNate that means nothing to me (don't know what  NodObjC's objective-c objects is) but it kind of makes sense.
00:17 < CoverSlide> Scrat: what do you do? just what do you do?
00:17 < Scrat> 872 followers on github, somehow I doubt it
00:18 < Scrat> run this
00:18 < Scrat> require('validator').check('ghfdghdfghdfghdfghfdghfdghhjfghj').len(5, 4096).isUrl();
00:18 <@TooTallNate> http://lmgtfy.com/?q=NodObjC
00:18 < Scrat> hangs node with 100% cpu used
00:20 < CoverSlide> sounds like a bug to me
00:20 < CoverSlide> you know what a bug is right and what to do with that?
00:20 < Scrat> I want someone else to confirm it to make sure I'm not doing anything stupid
00:20 < Scrat> dont be a condescending jerk
00:21 < min|dvir|us> Yeah, stupid jerk.
00:23 < Scrat> I can't really believe that an url check with the most popular validating library would hang on a random string
00:25 < CoverSlide> https://github.com/chriso/node-validator/blob/master/lib/validators.js#L31 << wow that is a terrible regex
00:27 < Scrat> that's like a what, 300 char regex?
00:27 < Scrat> great software design
00:30 < Scrat> what to use for url validation?
00:30 < Sicp> regex?
00:31 <@Nexxy> Scrat, look for some slashes, a colon and maybe a dot or two
00:31 < Scrat> oh you
00:31 < Sly> NEXXY
00:31 < Sly> ZOMG
00:31 <@Nexxy> SLY
00:31 <@Nexxy> OMFG
00:32 <@Nexxy> Scrat, srsly
00:32 < CoverSlide> https://gist.github.com/4569859 << the regex by itself lags 
00:32 < Sly> CoverSlide: that's nothing. One sec.
00:32 < Sly> https://gist.github.com/5bc85d800e9112c004f4
00:32 < Sly> That's a regex I wrote the other night.
00:32 < Sly> Gist hates it.
00:32 < Sly> 271 bytes, and it suppresses it
00:32 < Sly> :3
00:33 <@Nexxy> there's no need to regex urls
00:33 < xk_id> Guys, I need to code a crawler for scraping an Online Social Network consisting of ~1mil users. I plan to code the crawler in Node.js, and run it distributely over EC2. May I get some advice on this diagram, please? http://i.imgur.com/b75F9Hz.png
00:33 < Sly> Nexxy: that's not for URLs.
00:33 <@Nexxy> Sly, I was mostly talking to Scrat ;P
00:33 < Sly> Ah.
00:33 < Sly> :3
00:34 < Sly> And actually.. that regex I posted is the outdated one. :3
00:34 < Sly> I kinda split it up and made it reparse, cause it was getting too long. x_x;
00:37 < Sly> Er, maybe not..
00:37 < Sly> Didn't think I updated it, but apparently I did.
00:37 <@Nexxy> NOPE
00:37 < Sly> YES HUH
00:38 < Sly> DUN TRICK ME
00:38 < Scrat> Nexxy: I dont use regex at all. and I also dont want to reinvent the wheel
00:38 <@Nexxy> too. late.
00:38 < Scrat> it's more involved than checking for a few dots and slashes
00:38 <@Nexxy> how so?
00:39 < Scrat> there _should_ be bug-free code to do that out there. I mean it's a common thing
00:42 < CoverSlide> wow so the author copy/pasted something he found on a gist and didn't bother to test it
00:42 < CoverSlide> wtg!
00:42 < Sly> CoverSlide: ?
00:42 < Sly> O_O
00:43 < CoverSlide> i'm talking about chriso
00:44 < Sly> Ah.
00:45 <@Nexxy> it's like today is "be a grumpy asshole" day or something
00:46 < Sly> I IZ BE CONFUZZLED
00:47  * Sly scurries away.
00:47 <@Nexxy> no scurrying!
00:48 < Sly> Why not?!
00:48 < Sly> YOU DON'T LET ME DO ANYTHING! GOD! YOU'RE RUINING MY LIFE!
00:48  * Sly slams bedroom door.
00:48 < Sly> :3
00:48 < xk_id> Sly: you can give advice on my diagram, if you want
00:49 < CoverSlide> woot! I just found my microsd-to-usb converter, it's been stuck in my work machine these past 4 months
00:50 < Scrat> CoverSlide: cant even arse myself to report it on github. you can do it if you want and thanks for the help
00:50 < Scrat> npm uninstall validator
00:50 < Scrat> npm should have a shoot-author-in-the-head option
00:51 < Sly> CoverSlide: I'm not so much offended by the regex that you highlighted in that code..
00:51 < Sly> As I am.. /^(\d?\d?\d)\.(\d?\d?\d)\.(\d?\d?\d)\.(\d?\d?\d)$/ right below it..
00:51 < Sly> [\d]{1,3}
00:51 < Sly> HOW HARD IS THAT?!
00:51 < CoverSlide> oh wow
00:52 < Scrat> brb DoSing all node.js websites that accept urls
00:52 < Sly> /^(\d{1,3}\.){3}\d{1,3}$/
00:52  * Sly bashes head on desk.
00:52 < Scrat> Sly: you are quite the character. can I pet you?
00:53 < Sly> I might purr, or I might hump your leg. It depends on how you pet me.
00:53  * Scrat pets Sly furiously
00:53 < Sly> O_O
00:53 < Sly> I didn't say molest me!
00:53  * xk_id records
00:54 <@Nexxy> well that escalated quickly
00:54 < Sly> ^
00:54 < xk_id> it all started from my diagram. funnily, it still didn't receive any feedback. 
00:54 <@Nexxy> for future reference, #JIFASNIF is a little more yiff-friendly
00:57 < CoverSlide> #LIADASWAD Linus is a dick and so we are dicks
00:59 < Scrat> I want to be emperor of the universe and gather all furries and drop them in a volcano
00:59 < CoverSlide> if you use perl you can swap linux for larry
00:59 < CoverSlide> *linus
01:13 < shadej> hello
01:13 < shadej> <shadej>a
01:14 < shadej> I dont know how to chat
01:14 < chridal> type then hit enter
01:17 < shadej> nobody in this room
01:19 <@mbalho> shadej: do /leave and then /join #jquery
01:19 <@mbalho> that room is active
01:22 < chridal> mbalho: :D
01:23 < shadej> @mbalho is jquery another room
01:23 <@mbalho> yep
01:23 < chridal> it is, yes.
01:32 < shadej> mbalho: what kina of application can I built using nodejs
01:34 <@mbalho> shadej: big data, enterprise, cat photos
01:34 <@mbalho> etc
01:34 <@mbalho> shadej: are you aware of http://nodejs.org/
01:35 <@mbalho> shadej: the official internet website of node
01:42 <@Nexxy> mbalho, internet?
01:42 <@Nexxy> I know that word.
01:43 < swaj> internet website... as opposed to... ?
01:43 < swaj> some other type of website?
01:43 <@Nexxy> legal pad?
01:47 < mistertwig> website as in a breeding ground for spiders 
01:47 <@mbalho> internet website as in atm machine
01:56 < Asterokid> Is it OK to ask questions that I feel could be on the noob side?
01:57 <@mbalho> Asterokid: yea totally
02:01 < Asterokid> I have sort of a general question about good coding pratice with node. The asyncrhoneous nature of node make do stuff that I feel wrong. To give an example. Before I can respond to a request I need to load two files. For each of this file I need to check if they exist first. In Python I would check if the first file exist, capture the content, check if the second file exist, capture the content, 
02:01 < Asterokid> respond... In node I end up with 4 nested call backs... Obviously my code is hard to read and I don't is this really the way it should be done?
02:02 < templaedhel> Asterokid https://github.com/caolan/async
02:02 < ChrisPaterson> Asterokid: Deferred Objects
02:03 < Asterokid> Sorry ChrisPaterson I dont know what deffered objects are
02:03 < Asterokid> templaedhel is it going to save me from some of that boiler plate?
02:03 < templaedhel> All of it :p
02:04 < Asterokid> templaedhel thx... I'll look into it
02:05 < ChrisPaterson> Asterokid: Just google around.  It's used in jQuery and helps get rid of deep nesting with asynchronous code
02:06 < ChrisPaterson> Asterokid: there are a few libraries for Node as well: https://github.com/kriszyp/node-promise
02:06 < Asterokid> But asyncrhoneous does not make much sense in the case of response right...?
02:06 < Asterokid> cause ultimatly i need to process all that stuff to be able to respond
02:06 < Asterokid> but I suppose its the nature of node.
02:07 < templaedhel> Asterokid But processing 2 files at a time makes more sense than doing and then the other
02:07 < Asterokid> So if I am not happy I should go fuck around with some python
02:07 < templaedhel> one and then the other*
02:08 < Asterokid> templaedhel true... I suppose it will be fastee
02:08 < Asterokid> faster
02:08 < azylman> Asterokid: so do processing the files depend on each other?
02:08 < azylman> If not, it's faster to do it async
02:08 < azylman> Using async, you can process each file independently and then, once both are done processing, return your result.
02:08 < Asterokid> The file don't depend on eachother azylman.... but I can't send the response before they both exist and both loaded
02:09 < Asterokid> When u mean independently do you mean... multi threaded? or distributed to different cores at list?
02:09 < azylman> With async, you pass in some callback that runs when all your tasks are complete.
02:10 < draginx> with mocha .. is each describe sync or async?
02:10 < Asterokid> yeah well that is what happen...   first file exit > read the data > second file exist > read the data > respond...
02:10 < azylman> So basically you'd pass in an array of functions that read in your files and processed them, and your success function will respond
02:10 < azylman> Do first file exist > read the data happens concurrently with second file exist > read the data, and once those are both complete you respond
02:11 < azylman> The async documentation is pretty good
02:11 < azylman> I recommend checking out waterfall, series, and parallel to start off with
02:11 < azylman> They have a bunch of other functions that are really nice, as well, but those are the most common ones
02:11 < azylman> There's also forEach, auto, forEachSeries, forEachLimit, etc.
02:11 < Asterokid> are they patterns or modules?
02:12 < azylman> https://github.com/caolan/async
02:12 < azylman> It's a module
02:13 < Asterokid> what you say make sense... have a function that runs parallely all these files and then respond on success.
02:13 < Asterokid> cause right now... I sort of rebuilding a syncrhoneous process out of an asyncrhoneous framework
02:13 < Asterokid> which does not really make sense
02:13 < Asterokid> right
02:14 < Asterokid> I'll try to learn about async, that might open my eyes
02:14 < Asterokid> thx guys
02:28 < rfgarcia> draginx: no one really knows
02:42 < draginx> rfgarcia: story of a lot of things :P
02:44 < rfgarcia> in my experience mocha's describes and its are run consecutively
02:44 < rfgarcia> but each one can be an asynchronous function
02:45 < rfgarcia> so it's like they load everything in an async.forEachSeries if that makes sense
02:47 < draginx> yeah thats what it looks like to me
02:47 < draginx> but i just wanted to make sure :) and the actuals ource kind of confuses me, thanks! :)
03:20 < rodyhaddad> Hey guys, if in Socket.IO, I do mySocket.emit("event", {obj: myObject}), where myObject is an object I created with "new". Does Socket.IO JSON.stringifies the object I passed to him? So if myObject has a toJSON method, would it be used to serialize my object?
03:25 < jcrugzz> rodyhaddad: thats a pretty good question. I'd just give it a try and see what happens
03:30 < rodyhaddad> jcrugzz, Yeah, just setup-ed a socket.io project to test it. Seems to be working :D. I didn't know web sockets worked cross-domain, cool
03:57 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:00 < tjmehta> Anyone know of an quick/easy way to buffer stream data for a specific event until there a listener is attached, and then pass that data when a listener is attached (and stop buffering the data)?
05:03 < Jamiltz> Hey. Anyone around? I was using the twitter api and read this article about their streaming api https://dev.twitter.com/docs/streaming-apis?
05:03 < Jamiltz> Can we use the streaming of content with any public api?
05:04 < Jamiltz> using node
05:25 < drug_motor> http://tinysong.com/LD1b
05:34 < duko> i want to create a request handler using express. Is there a way to do this?
05:34 < duko> /path/to/*
05:34 < duko> something like that?
05:35 < sethetter> Has anyone here used CompoundJS, and if so is it a fairly solid framework?
05:42 < othiym23> duko: app.get('/path/to/:id', function (req, res, next) { /* do stuff */ return next() }) <- like that?
05:44 < duko> othiym23: I have tried that... I will give it a shot again.
05:45 < duko> express is not responding to that request after I've added it
05:45 -!- mode/#Node.js [+o TooTallNate] by ChanServ
05:45 < duko> if I remove the /:id portion, I see content from /path/to
05:46 < duko> but express is not responding if I add that last part of the path
05:47 < duko> does not respond to /.* or * either
05:52 < othiym23> you'll need to request /path/to/id / /path/to/18 or whatever
05:52 < othiym23> not just the bare /path/to
05:53 < duko> othiym23: :*(
05:54 < othiym23> well, if you just want /path/to, then you just want app.get('/path/to',...
05:56 < duko> i don't want '/path/to'
05:56 < duko> I want '/path/to/.*'
05:57 < duko> I see a stack overflow post that shows that only one char is matched with .*
05:57 < duko> so maybe there is not a good way to achieve what I want
05:59 < duko> and now wildcard seems to be working
05:59 < duko> how strange
06:10 < lvivier> duko: the route '/path/to/*' will match /path/to/ but not /path/to, maybe that's why it wasn't responding as you expected
06:17 < duko> lvivier: thanks
06:19 < domo> I have a script written in node where it's only job is to listen as an http server, taking incoming get requests containing a url and fetch the url's contents and return it back to the client as an http response
06:20 < domo> this script does a great job, but I notice if it's running for more than a few hours, it starts to slow down
06:20 < domo> I setup a cron script to restart it every hour and that's been a great bandaid so far. any ideas as to why this would happen? should i be doing something special with the handling of network connections?
06:22 < gildean> domo: i'd guess there's a leak somewhere
06:23 < domo> how can I go about debugging the script for mem leaks? (havent done this in node)
06:23 < jheusala> it sounds quite simple code, I would think its possible to just see the error in the code...
06:24 < SinnerNyx> ok I ran "npm install -g cookies". I'm on windows, and it installed it into my AppData\Roaming\npm\node_modules\ folder. however node apps still complain about "Cannot find module 'cookies'"
06:24 < SinnerNyx> ideas?
06:24 < jheusala> sometimes it helps to show the code to other people
06:25 < jheusala> SinnerNyx: you must go to your project folder and npm install it there as a library (or make a package.json and use npm install -d, or link it with npm link)
06:26 < SinnerNyx> jheusala: is there some way to make it available to all projects, not just one of them?
06:27 < jheusala> I guess it may be possible to change it from npmrc but I personally think the default way is much better
06:28 < gildean> domo: there are multiple modules that can help you with that, like node-inspector or node-heap-dump
06:31 < TehShrike> Whaaaaat is this I don't even https://github.com/creationix/brozula
06:53 < phonebook_> does a node.js app get compiled into a single file or is the program that i write a collection of my js files?
06:56 < TehShrike> phonebook_: good question!  There's no compiling, the file you run is interpreted by node.js/V8.
06:56 < TehShrike> phonebook_: when you require() other modules, they are also opened and interpreted
06:56 < TehShrike> phonebook_: before you go much farther, you well definitely want to read http://nodejs.org/api/modules.html
06:56 < phonebook_> okay nice. so how is an the (using phrase very loosely) application boundary defined? all files in a given directory? i need to write a package.js
06:57 < phonebook_> package.json, sry
06:57 < TehShrike> package.json?  Another good thing to read about.  That last link I posted will get you started.
06:58 < TehShrike> After you've read that, this might be a useful thing to bookmark http://package.json.nodejitsu.com/
07:00 < phonebook_> lol that's who im using. i'm struggling with how to define my program vs simply node c:\users\me\desktop\hellomarbles.js
07:01 < TehShrike> That "main" property in package.json is probably the thing you want to look at.
07:06 < phonebook_> allright. that first link actually had the answer. hopefuly will have it done soon. the exact answer for me was http://nodejs.org/api/modules.html#modules_folders_as_modules
07:08 < TehShrike> yarp!
07:14 < phonebook_> i think its working ship shape. concepts... dominated
07:14 < phonebook_> not going through yet cause just registered the domain
07:14 < phonebook_> thx man
07:14 < TehShrike> BRAIN EMBIGGENED!
07:14 < TehShrike> Happy hacking! :-)
07:24 < phonebook_> okay funny story
07:24 < phonebook_> it took like 60 minutes for the dns to update
07:26 < phonebook_> but i thought i bought buildersoftware.com. however it says buildersofware on the receipt. so APPARANTLY i just bought a domain name that makes no sense. and that missing t costs $5000
07:26 < brycebaril> doh!
07:28  * SomeoneWeird facepalms
07:28 < GreenDog> i wonder if you can cancel that
07:29 < ckknight> phonebook_: that's terrible.
07:30 < phonebook_> well its not that bad. just $20. you can use a domain for something... maybe
07:30 < GreenDog> oh i see, buildersofware is 20 but buildersoftware is 5000?
07:30 < phonebook_> right right. 
07:30 < GreenDog> phew ok
07:31 < phonebook_> ...do any of you need a domain?
07:36 < SomeoneWeird> lmao
08:14 < fayimora> what kind of ops do you really write with nodejs? I mean you are not just going to replace a whole rails app with node right?
08:14 <@mbalho> node is good for reading files and talking to networks
08:15 < fayimora> okkkkk 
08:16 < fayimora> so say you own twitter or facebook
08:16 < fayimora> how will you use node?
08:16 < fayimora> a separate app that simple returns files?
08:16 < fayimora> *simply
08:17 < timeturner> fyi, no one here will answer a question of that nature
08:17 < timeturner> too ambiguous
08:19 < SomeoneWeird> <fayimora> what kind of ops do you really write with nodejs? I mean you are not just going to replace a whole rails app with node right? < you might not, but you sure as hell could
08:23 < fayimora> SomeoneWeird: ok that clears a few things
08:24 < fayimora> timeturner: how about, is node(or just say express) like rails for js? a backend framework
08:25 < fayimora> I'm just trying to understand it's use cases
08:26 < SomeoneWeird> yes, express is
08:26 < SomeoneWeird> (is rails a mvc?)
08:28 < fayimora> SomeoneWeird: so generally, why will you use it as opposed to the straightforward rails?
08:28 < SomeoneWeird> IO intensive apps are amazing in node
08:28 < SomeoneWeird> and because it's JS
08:30 < st_luke> fayimora: node is a systems programming environment
08:31 < st_luke> so comparing it to rails is tricky since rails is a web framework 
08:31 < RigidWig> has anyone here set up nginx to route subdomains to different node ports?
08:31 < ckknight> fayimora: node can be used for a whole slew of use cases, including web but not necessarily. I've made a few command-line apps using it.
08:32 < ckknight> I'd say it's most popular for web primarily because that's where most of modern development takes place.
08:32 < fayimora> hmmm cool
08:33 < fayimora> think i'm getting the hang of it now
08:33 < ckknight> someone could build a top-to-bottom rails-style framework for node.js, but the general drive of the community has been (from what I've seen), lots of pluggable components
08:34 < ckknight> if you use something like rails, you have a lot of opinions forced upon you from the get-go.
08:34 < ckknight> especially during the older versions of rails, SQL was pretty much implied
08:34 < ckknight> for instance.
08:37 < ckknight> node.js does have some opinions forced on you (such as IO calls being async-by-default or the CommonJS module pattern), but that just provides an empowering framework to build upon.
08:38 < SomeoneWeird> (async-by-default is good)
08:39 < fayimora> Hmmmm
08:39 < ckknight> oh yeah, I totally agree, SomeoneWeird
08:40 < ckknight> the less assumptions a framework makes, the more developers can be empowered to be creative. The more assumptions it makes can help streamline development. It's a trade-off.
08:41 < SomeoneWeird> on the other hand I havn't used rails/ruby so I can't really compare
08:41 < SoulRaven> >> (.1 === .10)
08:41 < purr> SoulRaven: (boolean) true
08:41 < SoulRaven> ???
08:41 < ckknight> SoulRaven: what's wrong with that?
08:41 < ckknight> >> .1 + .2 === .3
08:41 < purr> ckknight: (boolean) false
08:41 < ckknight> ;-)
08:42 < SoulRaven> i know, i float, but sometimes......:))
08:43 < SomeoneWeird> i'm pretty sure the extra 0 would be dropped by v8 before running the expression
08:43 < SoulRaven> for any special reason?
08:43 < ckknight> even still, .1 is .10 as far as floating point is concerned.
08:44 < SomeoneWeird> because the 0 serves no use
08:44 < fayimora> thanks guys
08:44 < ckknight> now .1 is not .10000000000000000000, it's 0.10000000000000000555
08:44 < SomeoneWeird> lol
08:45 < SoulRaven> another problem for my self, is way bit wise operation are only in 32bit, even if the number are stored internaly in 64
08:45 < ckknight> SoulRaven: bitwise ops occurs in 32-bit integer realm only, JS's Number is 64-bit floating point
08:45 < ckknight> which are two very different realms
08:46 < SomeoneWeird> he knows, he's saying that a problem 
08:46 < SomeoneWeird> (if i'm reading correctly)
08:46 < SomeoneWeird> that's8
08:46 < SomeoneWeird> s/8/*/
08:46 < SomeoneWeird> gr
08:46 < SoulRaven> a, i undestand now, but will have webkit midi , we can't have bitwise in 64bit?
08:46 < ckknight> Javascript does not have 64-bit integers.
08:47 < ckknight> the max integer it has, through the 64-bit float is a 53-bit integer.
08:47 < SoulRaven> way 53, what is the reason?
08:47 < ckknight> that's how IEEE-576 is specced
08:48 < ckknight> the integer part of it is 53 bits, the mantissa is 11 bits
08:48 < ckknight> wait, the mantissa is 10 bits, the sign is 1 bit
08:48 < ckknight> so you can accurately describe integers up to 53 bits by having the mantissa be 0
08:49 < ckknight> also, it's IEEE-754, not 576
08:49 < SoulRaven> http://en.wikipedia.org/wiki/IEEE_floating_point
08:50 < SoulRaven> is it true, i have read that webmysql will be depreciated, is true?
08:50 < RLa> what is webmysql?
08:51 < SoulRaven> http://caniuse.com/#feat=sql-storage
09:15 < Industrial> Why does the order of vendor scripts matter with brunch.js ? doesnt require() solve that?
09:29 < Drex> Can anyone point me to an example site using express & passport? I'm going through the tuts but am missing how to string it all up
09:51 < jack150> in socket.io: is there a way to authenticate a user before a socket connection with handshake etc is established? right now anyone can connect to my websocket-server, initialize a handshake and only after that I check if the user is allowed and if not I disconnect the socket
09:52 < SomeoneWeird> afaik, the handshake is needed to start communicating
09:52 < SomeoneWeird> so they can't auth without doing that
09:52 < jack150> I'm just worried about wasting resources
09:53 < RLa> damn oracle, their newsletter unsubscribe link gives error 400
09:53 < RLa> bastards
09:53 < SomeoneWeird> lol'd
09:54 < RLa> "Bad name in the request: not a legal PLSQL identifer"
09:54 < RLa> someone is waiting for plsql injection
09:55 < SomeoneWeird> heh
09:55 < mboro> anyone with i18next/webtranslate experience? I've read the documentation over and over but I simply can't make my changes persistent. it doesn't update the files in my project. here's my code: http://pastie.org/private/a4uwgyydrd9aiew6jo0gg. can anyone see what I'm doing wrong?
09:56 < mboro> when changing/deleting translations it always returns 200 OK, which is the weird thing
09:58 < SomeoneWeird> why?
09:59 < WotWhere> beginner quest : howto change the directory where npm installs the packages?  I  have Node dir in PATH,   but when i do echo PATH ... i get   C:\...\Roaming\npm.. want to change that as i 
09:59 < WotWhere> think the packages will be installed there..  had a look at nodejsvars.bat.. %~dp0 .. i'm guessing must refer to the node dir itself
10:01 < SomeoneWeird> WotWhere, npm installs directories to ./node_modules
10:01 < SomeoneWeird> unless you're talking about global installs, try npm config
10:01 < WotWhere> yes i missed that will try, thanks
10:02 < listochkin> WotWhere: just a suggestion: add .\node_modules\.bin to your path. That way you won't need to install packages globally 
10:03 < listochkin> WotWhere: also you can install modules in the root directory of all your node projects. read more here: http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders
10:08 < StErMi> Hi guys, I'm new to nodejs and I'm a bit confused with all level of callbacks and async. Please look at this simple esample (iterating on a for and making web requests): https://gist.github.com/4ad8696984f83f447da3
10:08 < WotWhere>   I do want to install the pkgs in ...\nodejs\node_modules   easier to maintain? or is there a better way?
10:08 < StErMi> My actual problem is that I need the correct apod (podcast object) value in the request callbacks, how can I do it?
10:13 < Guest38469> Hi everybody
10:26 < yash> hello world
10:26 < yash> Im a beginner with node
10:26 < yash> i ran into a problem
10:27 < yash> i used fs to write a html file to browser
10:27 < yash> the browsers loads the css also.
10:27 < yash> surprisingly, the styles are not reflecting on the bbrowser
10:28 < yash> hi caffine
10:30 < yash> write to me at yashwanth34@gmail.com if u have a solution to it
10:30 < yash> thanks in advance
10:31 < SomeoneWeird> X_X
10:35 < chridal> I just thought; how awesome would it be to simply have a CLI type of thing to do EVERYTHING. E-mail, IRC, reading news etc.
10:36 < chridal> But that it would use at least some typography to distinguish between things. 
10:38 < WotWhere> SomeoneWeird: i do want to install it globally.. cant find the .npmrc  or  the global config file or the .configure ..  I used the msi Installer which installed node to the C:\program files\folder 
10:38 < chridal> Say, in this case he encouraged us to respond to his e-mail. So, now I am in IRSSI, I would just drop down to a shell by some keycombo, where I could do for instance: "email adress@isp.com subject text". I know there are programs for it, but like a suite of applications that work very well together.
10:38 < SomeoneWeird> oh windows, dunno, WotWhere 
10:39 < WotWhere> SomeoneWeird: so moved it by cutting n pasting  will have to change it one-by-one?
10:40 < SomeoneWeird> what are you trying to achieve?
10:42 < WotWhere> SomeoneWeird: want to install Express in the nodejs\node_module folder.. where it should go right? not in Appdata\Roaming\npm  which is my user dir
10:43 < SomeoneWeird> well cd to nodejs
10:43 < SomeoneWeird> then run npm install express
10:43 < SomeoneWeird> and it will install there
10:43 < SomeoneWeird> modules get installed locally to each project
10:43 < SomeoneWeird> so project1/node_modules might have ejs and express, while project2/node_modules might have async and jade or something
10:46 < WotWhere> SomeoneWeird: yes but express should be installed in the root \nodejs\node_modules\  so that its accessible globally.. or am i wrong
10:46 < SomeoneWeird> you are wrong
10:46 < SomeoneWeird> you need to install it again for each program you're using
10:48 < WotWhere> SomeoneWeird: so itll be downlded every time i want i use express.. or do i have to set the path to another projects folder to access
10:48 < SomeoneWeird> you only need to download it once for each project
10:48 < SomeoneWeird> it's like <1mb
10:49 < mboro> anyone with i18next/webtranslate experience? I've read the documentation over and over but I simply can't make my changes persistent. it doesn't update the files in my project. here's my code: http://pastie.org/private/a4uwgyydrd9aiew6jo0gg. can anyone see what I'm doing wrong?
10:53 < WotWhere> so giving it the path to another projects folder wont work ex :   ..\..\project1\express    
10:55 < SomeoneWeird> it will, but that code will look messy
10:59 < WotWhere> point taken..  i guess will have to set the key-value pars one-at-a-time as cant find .npmrc  or $PREFIX/etc/npmrc 
10:59 < WotWhere> actually cant find the etc dir either
11:00 < nafis> hey can anyone recommend an authentication module for express? I have tried everyauth and passport but I am not fully satisfied
11:01 < SomeoneWeird> what's wrong with passport?
11:01 < WotWhere> Big oops  found the npmrc :)
11:17 < beaky> hello
11:24 < chridal> Anyone knows about a way to turn off quit anouncements in irssi?
11:25 < chridal> googled it. thanks anyway.
11:31 < marlun> Can anyone recommend a server-side request router if I want the simplest one which look like: route.get('/user/:id', f(req, res))? :)
11:44 < bid> hi, i want to create a "class" module that will use events, i want it to be able to emit events. how can i do that? 
11:44 < gildean> bid: easiest way is to have the module to inherit from events.EventEmitter
11:45 < SomeoneWeird> var a = function() { }; require('util').inherits(a, require('events').EventEmitter);
11:45 < bid> yes, but i cant manage to do that, foo.prototype = new events.EvenEmitter 
11:45 < bid> ohh 
11:45 < gildean> do as SomeoneWeird said
11:45 < bid> thanks
11:46 < gildean> marlun: is express too much? imo it's not
11:48 < marlun> gildean: No, I actually like express, but this time I only want a router (that works just like the one in express).
11:49 < SomeoneWeird> then only app.use(express.router);
11:49 < SomeoneWeird> and don't use anything else
11:51 < gildean> marlun: also did you search npm for router, as there seems to be quite a few from which to pick from
11:51 < gildean> if you don't want to add express just to use one attribute of it
11:59 < bid> SomeoneWeird,gildean: doing this: util.inherits(foo, require('events').EventEmitter); destroy my object :( i mean i have this in another file: function foo(){}; foo.prototype.bar = function(){alert(111);}; after i do inherits to foo i have no bar.  
12:00 < SomeoneWeird> you have to add the inherit line before you add any prototypes
12:00 < Sunil_> Hi All
12:00 < bid> that will make my  code look bad :( 
12:01 < Sunil_> Any body Help to read node js
12:01 < SomeoneWeird> how?
12:01 < SomeoneWeird> it's 1 line
12:01 < SomeoneWeird> Sunil_, what's up?
12:01 < Sunil_> I want to know about node js
12:01 < SomeoneWeird> what do you want to know?
12:02 < Sunil_> learning this JS 
12:02 < Sunil_> how its work and what is the process to writing the code for the same???
12:03 < SomeoneWeird> huh
12:03 < bid> Sunil_: youtube, nodejs.org, google... 
12:03 < Sunil_> and also what is the difference between jquery and node js? 
12:04 < gildean> Sunil_: jquery is a client side lib, node.js is a platform
12:04 < bid> not every javascript lib is nodejs... 
12:04 < Sunil_> how?
12:05 < gildean> how what?
12:05 < SomeoneWeird> v8
12:05 < SomeoneWeird> and ryah
12:06 < Sunil_> gildren:  sorry wrong ping
12:06 < bid> where should i paste my code... pastebin ?
12:06 < gildean> bid: or gist.github.com that's what most people here use
12:07 < gildean> but that doesn't really matter
12:08 < bid> yes,
12:09 < Sunil_> SomeoneWeird: any update?
12:10 < SomeoneWeird> ?
12:10 < Sunil_> as you said earlier "[17:30] <SomeoneWeird> v8"
12:11 < SomeoneWeird> what about it?
12:14 < bid> damn ISP 
12:20 < bid> can you guys have a look here: https://gist.github.com/4572367  do i only need to move function maker(){} declaration from maker.js to main.js? 
12:20 < bid> forgot to put module.exports = maker at the end... 
12:25 < bid> no help? :\
12:25 < gildean> bid: yeah, in that case you're adding the EventEmitters prototype afterwards
12:26 < gildean> bid: just move the inherits to the module itself
12:28 < bid> gildean: in that case should i call it in the mosue constructor? 
12:35 < gildean> bid: you mean inside funcion maker() { util.inherits..... ?
12:35 < gildean> that won't work
12:37 < bid> yes, dosnt work, also inside maker.js right after decalrtion of maker(){} i did require('utils').inhirts(...) dosnt work either... 
12:37 < bid> very lmiting 
12:37 < bid> limiting*
12:39 < gildean> hmm?
12:39 < gildean> that should work
12:41 < bid> umm when i do var m = new maker; m.on('event',function(){}); i am getting node error. that on is not define. 
12:43 < bid> sorry my bad, it says that can;t call on on undifined. i have a different error checking, thanks for the help 
12:47 < SomeoneWeird> bid, var m = new maker();
12:57 < bid> SomeoneWeird, yes i had new maker() but i concat it with other method. i mean somthing like this: var m = new maker().make(); m.on(...); my make() function didnt; return this... so m was actualy an array..
12:57 < bid> all is good now. thanks guys 
12:58 < bid> or girls.. 
13:47 < paulbjensen> are there any Node devs here from Bangalore?
14:11 < jtomasrl> is it possible to response with a .json?
14:11 < nafis> exit
14:11 < SomeoneWeird> res.writeHead('content/type', 'application/json'); res.end(JSON.stringify(jsonstring));
14:11 < SomeoneWeird> iirc
14:12 < jtomasrl> yeah but that doesnt give me a www.example.com/response.json
14:14 < SomeoneWeird> ?
14:16 < jtomasrl> i was looking at twitter API and they response with .json files, something like this "http://search.twitter.com/search.json?q=blue%20angels&rpp=5&include_entities=true&result_type=mixed" so i was looking for something similar using node
14:17 < SomeoneWeird> that's just a route
14:20 < jtomasrl> so doing server.get ("/search.json" .... should be the same
14:21 < gildean> jtomasrl: yeah, but there's no need for the .json if the files aren't actually static
14:22 < gildean> unless you want to use that as a route parameter, but even then i'd prolly do app.get('/seach/:responsetype'.....
14:22 < jtomasrl> right
14:57 < tonylukasavage> if I force publish a version of a module, is there anyway to convey to developers already using that version that they need an upgrade? 
14:57 < tonylukasavage> Are there any flags to pass in an update/install call?
15:02 < tonylukasavage> or i guess a better way to phrase it would be, I just force published version x.y.z, how do i tell developers already using version x.y.z to update again?  
15:02 < tonylukasavage> is it even possible for them to update again
15:02 < tonylukasavage> ?
15:02 < tonylukasavage> or do they need to delete the module and reinstall
15:04 < SomeoneWeird> they just need to npm update, afaik
15:08 < tonylukasavage> ugh, sorry, been on a code bender and my mind is inexplicably looking for the complicated solution. Thanks for instilling common sense SomeoneWeird.
15:10 < beaky> I love node.js
15:18 < brettlangdon> hey, anyone here live in the bay area? I am taking a trip to santa clara in march for PyCon and am curious as to places to see/not see
15:35 < nanashiRei> I have returned! :D
15:35 < nanashiRei> and i have questions *innocent*
15:37 < geNAZt> then hi and ask :D
15:37 < nanashiRei> If i wanted to run functions/methods in a running instance of whatever node app, how would i acomplish that? My goal is, that a php backend should be able to send "messages" to node without using sockets and the like
15:38 < nanashiRei> been searching google for hours now but i think i'm just missing the right words for this ^^
15:38 < geNAZt> you mean something like IPC ?
15:38 < nanashiRei> IPC being what?
15:38 < geNAZt> Inter Process Communication
15:38 < nanashiRei> sounds right :)
15:39 < nanashiRei> just a wild guess, because of your nick, are you german, by any chance?
15:39 < nanashiRei> ^^
15:39 < geNAZt> the only thing you need is a shared memory block
15:39 < geNAZt> yes
15:39 < geNAZt> :D
15:39 < nanashiRei> Haha sehr cool
15:40 < nanashiRei> Wie wuerde ich da ran gehen in NodeJS? Gibts da bekannte libs/npm packs fuer?
15:40 < geNAZt> https://github.com/coderz/node-sysv-ipc
15:40 < nanashiRei> danke schau ich mir direkt mal an :)
15:40 < geNAZt> http://php.net/manual/de/ref.sem.php
15:40 < geNAZt> so würde ich das machen
15:41 < nanashiRei> ich lese mal schnell drueber
15:41 < nanashiRei> bisher nur webseiten gebaut ^^" keine ahnung von der tieferen materie 
15:42 < geNAZt> ist auch nicht der normalste fall, das man IPC für webseiten braucht
15:45 < nanashiRei> prob ist, kunde hat nen php backend mit cakephp und will jetzt ne high performance RESTful API ... und dann soll die auch noch steuerbar sein vom backend aus. Und weil ich echt keine lust hab, da jetzt jobs ueber mysql/mongo whatever zu implementieren und ich das child_process messaging kenne, dachte ich, ich frag mal obs da nicht was simples gibt ^^
15:45 < geNAZt> ja das cpm ist fast das selbe
15:45 < geNAZt> :D
15:45 < nanashiRei> im prinzip wollen die nur module aktivieren und deaktivieren koennen da waere ein job queue ja nun wirklich overkill
15:47 < nanashiRei> IPC sieht aber ganz nett aus, gibts da sicherheits bedenken? httpd rennt als www-data und nodejs als node-app, haut das so hin?
15:47 < geNAZt> das sollte klappen, das man wie auch auf dateien schreib und leserechte geben kann
15:48 < geNAZt> es könnte aber immer ein prozess der das handle kennst mitfunken
15:48 < nanashiRei> Super, dann danke viel mals, ich probiere das mal und schaue wie es so laeuft
15:49 < yawnt> dafuq
15:49 < nanashiRei> damn us layout ^^ zum coden aber viel cooler :D
15:49 < yawnt> ist es #node.de :D ?
15:49 < nanashiRei> Nein es ist NICHT no.de
15:49 < nanashiRei> ha!
15:49 < Engin> I'll learn the shit out of node.js, so brace yourself for mind mismatch questions (i.e. I don't get why somethnig is designed the way it is) :)
15:50 < yawnt> yay ich kann mein deutsch verbessern
15:51 < Engin> I started studying a minimal facebook application template which uses express -- which I'm not sure if it's the best way to start studying node.js
15:51 < yawnt> nanashiRei: geNAZt ahahah ich hab node-sys-v gemacht
15:51 < yawnt> ich und meine kollegen
15:52 < geNAZt> ja dann weiß nanashiRei ja wen er fragen kann
15:52 < nanashiRei> u serious?
15:52 < yawnt> such auf githu
15:53 < yawnt> *github
15:53 < nanashiRei> jithup?
15:53 < nanashiRei> :>
15:53 < yawnt> https://github.com/coderz/node-sysv-ipc/commit/0985fe9e2c4042e150eff9f4c8048142777bf30b
15:53 < yawnt> das bin ich :P
16:00 < Engin> hmm looks like .env isnot in effect when node is launched within cygwin
16:04 < Engin> thanks for the tremendous support, I would expect nothing less from 850 users!
16:04 < brycebaril> Heh -- I've not used it with Cygwin, Engin
16:05 < Engin> node executable takes .env into account ? or is it just for some other app host ? 
16:05 < SomeoneWeird> why are you using cygwin?
16:05 < brycebaril> Node should take the env into account, not sure about the details when running on windows, though.
16:06 < Engin> because I always use it on windows :/
16:06 < SomeoneWeird> and if you're using cygwin, why are you using the windows version of node
16:06 < Engin> let's try with cmd.exe
16:06 < Engin> no go
16:06 < Engin> there's cygwin version too ?
16:06 < Iszak> oh god everytime I use cygwin I feel severely limited.
16:07 < SomeoneWeird> why are you even using cygwin?
16:07 < brycebaril> What are you trying to set with your .env
16:07 < Engin> the content of .env is KEY=VALUE in seprate lines and trying to access them via  console.log(process.env.FACEBOOK_APP_ID+':'+process.env.FACEBOOK_SECRET);
16:07 < Engin> fails
16:07 < SomeoneWeird> why are you even using cygwin?
16:08 < Engin> note that I'm executing this command from the global scope (one of the top commands)
16:08 < SomeoneWeird> why are you even using cygwin?
16:08 < SomeoneWeird> plz respond
16:08 < Engin> I already did
16:08 < Engin> that's my dev environment for everything else, that's what I suse
16:08 < Iszak> SomeoneWeird probably because they're on windows.
16:08 < Iszak> I once tried to use ruby on windows, I nearly went insane.
16:08 < brycebaril> well for now you could try just at the command-line:
16:08 < brycebaril> FACEBOOK_APP_ID="..." FACEBOOK_SECRET="..." node app.js
16:08 < SomeoneWeird> but why
16:08 < SomeoneWeird> thats just insane
16:09 < SomeoneWeird> why use cygwin and not a proper OS?
16:09 < Engin> yeah we could see that if it env fails completely or just the e.vn
16:09 < Engin> yeah it works when I set the env var in the command line
16:09 < Engin> but node does not take .env into acocunt
16:09 < brycebaril> That's a start I guess
16:09 < Engin> neither in cmd.exe nor cygwin bash
16:10 < Iszak> Okay, lets not debate why windows is crap for development because it's lack of command line, lets just help this guy.
16:12 < SomeoneWeird> set FACEBOOK_APP_ID=<id>
16:12 < SomeoneWeird> set FACEBOOK_SECRET=<secret>
16:12 < SomeoneWeird> node app.js
16:12 < brycebaril> Engin -- you could try something like this maybe? https://github.com/nodefly/node-foreman 
16:12 < Engin> so I gave up on .env
16:12 < SomeoneWeird> that's how you use .env on windows^
16:13 < Engin> brycebaril: actually that's what heroku readme.md suggest me to use, but i looked it up only to find out it's a ruby thing... so there's node.js prot
16:14 < brycebaril> That one I linked is a node specific one
16:14 < Engin> yeah, installing it
16:14 < Engin> let's see how npm global installation works here
16:14 < jarek> Hi
16:14 < brycebaril> I've not used it
16:14 < jarek> is there a Node.js module that would allow me to implement JSON-based data store?
16:14 < jarek> I mean something simillar to database, but without all the cruft
16:14 < jarek> I would like to only query the JSON tree from client
16:15 < brycebaril> what sort of data? MongoDB does essentially that, but it might be a little heavier than what you're thinking.
16:15 < jsonified> jarek: https://github.com/dominictarr/kv maybe
16:16 < Engin> defientely heaver that what he expects :)
16:16 < dominictarr> jarek: I recommend checking out leveldb
16:16 < jarek> thanks, I haven't heard about those projects
16:16 < dominictarr> leveldb is awesome
16:17 < Engin> hmm ruby foreman has higher priority in the PATH, how do I see where npm -g installs stuff
16:17 < jarek> I'm looking for something really simple, databases such as MongoDB or CouchDB seem to have terrible APIs
16:18 < geNAZt> but they work good with json based documents / data
16:18 < Engin> maybe I should just launch a ubuntu instance in a virtual machine
16:19 < Engin> I'm getting crappy errors and wwarnings everywhere it's very discouring
16:19 < brycebaril> Engin do you have a production environment in mind?
16:19 < Engin> http://pastie.org/5726303
16:19 < jarek> leveldb doesn't support JSON, right?
16:19 < Engin> brycebaril: well, I'll go with heroku to learn that platform as well
16:19 < Engin> usually I just use very small VPS instances
16:21 < jsonified> jarek: I looked at https://github.com/rvagg/node-levelup recently but haven't actually used it yet. There seem to be a number of leveldb shim libraries, maybe somebody can recommend one.
16:21 < jarek> how about Redis?
16:21 < SomeoneWeird> ask rvagg
16:21 < SomeoneWeird> he's normally around
16:21 < SomeoneWeird> lol
16:21 < jarek> http://redis.io/commands
16:21 < jsonified> ho, levelup depends on leveldb. there you go.
16:21 < jarek> actually, I think I don't want to use Redis :)
16:22 < brycebaril> Redis "supports" JSON as in you can store whatever you want. You would have to pull back the whole JSON string to look into the individual values though
16:22 < SomeoneWeird> translate json into a hash
16:22 < SomeoneWeird> then you don't have to
16:22 < jsonified> Engin: you can `SET PATH=C:\Engin\mypath;%PATH%` to work around that, and finally override it in either system environment (for services) or user environment if you want it everywhere
16:22 < brycebaril> Well, until your hash isn't simple key-(number/string/bool) pairs
16:24 < Engin> jsonified: i know how to work around that, I want it to work as it is designed -- though I have a off start I guess as cygwin is not a primary platform
16:24 < jarek> which database will allow me to query it with websockets?
16:24 < jarek> do I need to implement custom wrapper for this?
16:25 < brycebaril> jarek I don't know of any, you'd probably need a wrapper
16:25 < Engin> jarek: exposing a database directly to clients is nt realyl desireable
16:26 < jarek> Engin: my plan is to write *everything* on the client side, except for the code for authentication and database
16:26 < Engin> I believe that the proper way t o do it is to code your interface for it
16:26 < jarek> Engin: I don't mean exposing it directly, there should be some bridge that denies requests if user does not have proper permissions
16:27 < Engin> yeah, that brdge is you :)
16:27 < brycebaril> jarek maybe S3? Let Amazon handle the permissions
16:28 < Engin> node executable itself is just meant for development ? because it is performing very badly
16:28 < jarek> brycebaril: are you sure they allow websockets?
16:29 < jarek> brycebaril: I would need to pass the data from Amazon to Node.js server and then to client which is IMHO too much overhead
16:29 < brycebaril> jarek I don't think they do, but they do have authenticated shared access controls from the client. It sounded like you were trying to do everything on the client
16:30 < Engin> http://gyazo.com/be6f370aeb73fe458688872832255ffa
16:31 < geNAZt> Engin: no that should not be that high
16:31 < jarek> how about not using database at all? I would keep the data in plain .json file which would be read by server on startup and saved in 2-3 hour intervals?
16:31 < Engin> on re-request it is like 800ms
16:32 < brycebaril> jarek I guess what are you trying to build? how much are you planning to store? How fast does it need to be queried? What granularity do you need to look into it? These questions and more are really what you'd need to know to select your backing store/db solution.
16:32 < jarek> I'm not planning to keep gigabytes of data on the server, loading everything upfront should just work fine
16:32 < geNAZt> Engin: then you should debug your application. it is too slow
16:33 < jarek> brycebaril: I building issue tracker for my app, it will store only text
16:33 < Engin> ok I'Ll write a minimal node.js thing myself, maybe it was a bad idea to start with this template heroku created for me (minimal fb app)
16:33 < geNAZt> you do request to external services ?
16:33 < geNAZt> if so maybe they are extremly slow
16:34 < jarek> if I load all data into memory (as plain JS objects), then it could accessed faster than with any database, right?
16:35 < brycebaril> yes, so long as you don't need shared accuracy or durability
16:35 < geNAZt> not if u have to sort or to search in it
16:35 < jarek> s/it could/it could be
16:35 < Engin> geNAZt: yeah, simplest node.js app is fast
16:35 < brycebaril> jarek what about SQLite?
16:35 < Engin> geNAZt: actually, it is supposed to external requests to fb servers... but since the login is not working at the moment, it shouldn't do any requets... so it's just static files being served
16:36 < dominictarr> jarek: github.com/rvagg/node-levelup
16:36 < dominictarr> https://github.com/rvagg/node-levelup/wiki/Modules
16:36 < jarek> brycebaril: I would like to work with JS objects and JSON, not with SQL queries and custom data types
16:37 < geNAZt> ndirty ? https://github.com/felixge/node-dirty
16:37 < Engin> jarek: what is your end-goal btw ?
16:38 < jarek> Engin: what do you mean by end-goal?
16:38 < Engin> the big picture
16:38 < Engin> maybe you are experiencing a xy-problem
16:38 < jarek> Engin: I want to build issue tracker that consists from fat client and minimal server
16:38 < Engin> ok, what sort of data you want to store ?
16:39 < jarek> server should be used only for data storage and authentication
16:39 < Engin> my point is, json won't scale well anyway, since there's no built i nway to index data
16:39 < jarek> Engin: JSON
16:39 < Engin> so, you might end up using mongo anyway
16:39 < Engin> or you can use mysql in a modern way, i.e. minimal columsn that you want to index and data as json in a blob column
16:39 < brycebaril> I.e. if you're making an issue tracker you may have a predefinted structure and something like SQL would probably work just fine. If it is only key-value access dominictarr's solution is probably great
16:40 < dominictarr> jarek: don't use kv, use leveldb
16:40 < dominictarr> from what you are saying, the thing you are looking for is leveldb
16:40 < jarek> dominictarr: neither of them works with JSON-based data structures
16:41 < Engin> why do you think json is the best choice ?
16:41 < dominictarr> jarek: https://github.com/rvagg/node-levelup#json
16:41 < jarek> "LevelUP will automatically stringify your objects and store them as utf8 and parse the strings back into objects before passing them back to you."
16:41 < jarek> does it stringify whole objects?
16:42 < Engin> i don't see how you gonna query on json later on
16:42 < Engin> unless you use a json aware database
16:42 < jarek> so each time when key from object is accessed, it has to de-stringify the whole object?
16:42 < Engin> you can destringify in the client
16:42 < Engin> anyway :)
16:42 < Engin> you can cope with key-value databases to, by creating keys for every index column you want to access
16:43 < Engin> but there'll be normlization issues and you'll need to sync your data ffor many keys I think
16:44 < Engin> quick question, does node support CORS ?
16:44 < Engin> or we use a thin layer on top of it to make it support that
16:44 < brycebaril> node doesn't care either way, you can make Restify or Express care though
16:44 < dominictarr> there is no perfect database
16:45 < Engin> ok
16:45 < dominictarr> if you want that… write your own database...
16:45 < dominictarr> or find a database you can customize
16:45 < jarek> I think I will write a wrapper for MongooseJS
16:45 < Engin> jarek: I think you are trying to tackle the problem in a wrong way
16:45 < brycebaril> jarek I think you may want to think more about your access patterns and general requirements
16:45 < jarek> as it has the most JSON-like structures
16:46 < gildean> jarek: i'd go with a lighter module like mongojs instead
16:46 < brycebaril> gildean I think he's considering mongoose without mongo behind it
16:46 < jarek> well, I'm frontend developer so I might be a bit biased towards client
16:46 < brycebaril> like just for the ORM
16:46 < Engin> eheh
16:47 < jarek> my ideal storage system would allow me to access it like regular JS object
16:47 < Engin> jarek: fat clients are the modern way to go, but your server side approach is not open minded
16:48 < gildean> jsdb - a flatfile db that uses native js objects
16:48 < gildean> now someone implement that
16:49 < gildean> if you use the name, give credits to me
16:49 < Engin> :)
16:49 < Engin> well, mongo db pretty much did that actually
16:49 < Engin> hehe
16:54 < jarek> too bad, it's already taken http://www.jsdb.org/
16:55 < jarek> I like the fact that schemas in MongoDB are JS objects
16:55 < jarek> I mean nogoosejs
16:56 < jarek> mongoosejs
16:56 < jarek> sorry for typos
16:57 < iksik> jarek: did You try jugglingdb? :)
16:57 < dominictarr> jarek: your ideal database is localStorage
16:58 < dominictarr> you should just make your server a proxy to a special browser, and use localStorage
16:58 < jarek> localStorage is flat and allows only strings
16:58 < iksik> it is (in my opinion), pretty nice wrapper for mongoose and few other modules
16:58 < jarek> but I like its minimalism
17:00 < jarek> iksik: isn't Mongoose already a wrapper for MongoDB?
17:00 < jarek> so it's like a wrapper for a wrapper
17:01 < jarek> and I would write another wrapper on top of that that supports WebSockets :)
17:01 < iksik> jarek: exactly, but using jugglingdb you are using pretty the same models syntax for all database types - mysql, redis (afair), etc.
17:02 < iksik> another pretty nice solution is livedata + mongolite(?) in meteor ;-D
17:03 < jarek> but I want to keep things simple...
17:04 < iksik> [17:58:31] <       jarek> | and I would write another wrapper on top of that that supports WebSockets :)
17:04 < iksik> no You don't ;P
17:05 < jarek> iksik: is it possible to query jugglingdb via WebSockets?
17:05 < iksik> nvm, any one is using express perhaps? i'm dealing with some kind of interlan redirect in it, where user will be redirected from /foo/bar to index.html (which is static file in public directory), but without changing url in browser
17:06 < iksik> jarek: there is demo on jugglingdb website which works in your browser - perhaps it is using websockets, humm unless it is using some kind of localstorage - wait -_-
17:07 < Engin> does V8 has reflection support ? 
17:07 < iksik> damn, i can't remember what was the address, lol ;-D
17:09 < pullonpoh> TL;DR. Are you talking about sockets saving to mongodb for example?
17:10 < iksik> ehhh it was on railwayjs website, but it seems that this framework is changing into compundjs and they removed it ;S
17:23 < jarek> pullonpoh: yeah, I'm talking about accessing server storage from client via WebSockets
17:24 < iksik> oh, jarek i was using websockets to get access to local mysql server (installed on clients machine) from my website 
17:25 < jarek> iksik: MySQL is plain ugly
17:25 < iksik> http://www.screencast.com/t/qex3PNzH
17:26 < iksik> ;-D
17:27 < jarek> iksik: are you sure this is secure solution? :P
17:28 < nanashiRei> geNAZt: Funktioniert super :) danke nochma'
17:28 < jarek> which Node.js module allows you to write database queries in client-side code?
17:28 < iksik> jarek: yup, it is ussing secure connection, and thata are encrypted on both sides
17:28 < pullonpoh> jarek: I just made a guestbook with node and mongodb. I used websockets, do you want the link?
17:28 < iksik> and still mysql (or other database) is installed on localhost of each client
17:28 < pullonpoh> I dont know how much it serves you
17:29 < jarek> pullonpoh: sure!
17:29 < nanashiRei> jarek: srsly? db-mysql and stuff lets you do that, but .. 
17:34 < graeme_f> hey guys, I'm trying to use Basic auth with request - has it changed from the sample in the readme? looking in the code i can't see the auth() function or where it uses auth from the options - looks like it only checks the uri! :S
17:36 < Engin> I liked it how node.js is a very thin layer
17:36 < Engin> the whole idea of having an app host as JS seemed very stupid at first though
17:37 < Engin> I still doN't get exactly how it is born
17:37 < Engin> I believe that it could be done in Java or C# too
17:37 < Engin> no ?
17:38 < graeme_f> ah - looks like this changed very recently…
17:38 < Engin> if V8 had reflection support, another thin layer could be written too actually, that'd make service implementation easier
17:40 < Engin> comments ?!
17:42 < jolleyjoe> hi... i am trying to install node.js from install.sh and it's trying to install a
17:42 < jolleyjoe> oops. install into /usr, can i specify prefix with this script? looking through it I couldn't find an easy place to change this.
17:42 < jolleyjoe> err... rather, i am actually installing npm... not node.js :)
17:45 < jarek> jolleyjoe: last time I installed node there was no install.sh
17:45 < jarek> jolleyjoe: I have just run ./configure --prefix=/usr/local
17:45 < jolleyjoe> sorry, i made a mistake, i am actually installing npm, not node.js :P
17:45 < jolleyjoe> i installed node.js from apt-get
17:46 < jarek> jolleyjoe: NPM is part of Node.js now
17:46 < nanashiRei> jarek, git clone .... then configure and make install...
17:46 < jolleyjoe> oh...? maybe I have an older version of node.js in repo
17:46 < jarek> jolleyjoe: most Linux distros ship with outdates versions of Node.js
17:46 < nanashiRei> in 90% of all cases that works.
17:46 < jarek> jolleyjoe: building Node from source is very easy and fast
17:47 < Engin> is there a packag of node that you could just extarct and use away when you added that to path -- i.e. that'd be your global npm repo
17:52 < AAA_awright> jarek: Technically it's a seperate project, like other libraries like zlib and openssl, npm ships with Node.js by default
17:57 < Engin> is is possible that expression doc is out of sync with the implementation
17:57 < Engin> because the example in the guide nor reference does not work
17:57 < Engin> as in `var app = express();
17:57 < Engin> `but express.createServer() works
17:58 < jolleyjoe> sweet, jarek i just build it from source
17:59 < jolleyjoe> I was running 0.6.12~dfsg1-1ubuntu1 before...
18:09 < xk_id> http://pastebin.com/XjCPW29K <-- Help! I get not "a"s, although there are <div class = "medk_gray layout gridViewDiv"> in 'body'.
18:14 < mscdex> xk_id: iirc your selector there will look for an element hierarchy instead of a div with 3 classes
18:16 < xk_id> mscdex: Thanks. I'll try to understand better what hierarchically means. 
18:17 < mscdex> well, in this case it's looking for 'gridViewDiv' elements that are children of 'layout' elements that are children of elements with the 'medk_gray' class that are children of 'div' elements
18:17 < xk_id> Oh, I understand! 
18:20 < xk_id> I think $('div .medk_gray, .layout, .gridViewDiv') will work :)
18:20 < xk_id> mscdex: Thanks!
18:23 < mscdex> xk_id: i'm not sure just how many jquery selectors that cheerio supports, but you might try something like 'div[class="medk_gray layout gridViewDiv"]' for divs with exactly those classes in that order
18:23 < skope> i returned back to jsdom because somehow cheerio killed my app
18:24 < xk_id> mscdex: I actually tried something similar, but forgot to add the double quotes (hence it didn't work). Thanks a bunch!
18:24 < mscdex> skope: how?
18:24 < skope> but i don't remember the error anymore. so pointless to discuss 
18:24 < mscdex> ok heh
18:25 < skope> it was way better tho. gotta figure it out some day
18:25 < k_89> i am a fan of node, but not a big fan of mongo, are there any best practices established around dealing with sql databases using node, and are there some orm-like packages
18:25 < mistertwig>  yes
18:26 < mistertwig> http://www.sequelizejs.com/
18:26 < mistertwig> k_89: http://www.sequelizejs.com/
18:26 < k_89> ok, thanks
18:26 < k_89> :D
18:27 < mistertwig> i am also not a fan of using mongo for relational data :P
18:27 < mistertwig> i like the idea of using hybrid solutions where they're fit
18:28 < TonkaTruck> I see mongo misused in that way so often…more misuse with embedded docs than with relational data.
18:28 < skope> yes. sequelize is what i want
18:28 < k_89> yeah, same here. sql databases really help me at least to nail down business requirements
18:28 < mistertwig> nothing wrong with embedding documents
18:28 < mistertwig> that's one of the huge benefits of it
18:28 < mistertwig> but lack of joins makes relational data a pain
18:28 < TonkaTruck> Mongo performs well as a relational db, too.  Also, for scaling purposes, you're joining at the app level anyway…even with postgres, mysql, etc.
18:29 < mistertwig> not a fault with mongo
18:29 < mistertwig> i can fit some data much better into a relational database
18:30 < TonkaTruck> mistertwig: The rule I go by with mongo I learned at a mongo talk… store data as it's usually presented.
18:30 < mistertwig> a problem i encountered was something like storing forum posts
18:30 < mistertwig> yeah embedding posts into topic makes sense
18:30 < mistertwig> even storing the username instead of id makes sense
18:30 < mistertwig> in those embedded docs
18:31 < mistertwig> but then grabbing user info (post count, online)
18:31 < mistertwig> i couldn't really find an elegant solution in mongo for that
18:32 < mistertwig> mongo's also missing a lot of random features i find useful like lack of min & max
18:32 < ins0mnia> mistertwig: take a look at http://orientdb.org
18:32 < mistertwig> like there are solutions for that but not as elegant 
18:33 < mistertwig> ins0mnia: i think rethinkdb looks pretty interesting :P
18:33 < ins0mnia> mistertwig: rethinkdb is super awesome, missing acid transactions though
18:33 < mistertwig> site you linked me to is down right now ins0mnia
18:33 < mistertwig> oh nvm
18:33 < mistertwig> just slow
18:33 < TonkaTruck> mistertwig: max = db.myCollection.find().sort({"DATE":-1}).limit(1) heh
18:33 < ins0mnia> mistertwig: oh that should be http://www.orientdb.org/
18:33 < mistertwig> TonkaTruck: yeah but that isn't very efficient 
18:34 < TonkaTruck> mistertwig: Is it less efficient than mysql?  I'm asking.
18:34 < mistertwig> i didn't say it was impossible, just not as elegant a solution 
18:34 < mistertwig> probably
18:34 < TonkaTruck> because it's more typing?
18:35 < mistertwig> no
18:35 < TonkaTruck> I have no idea how either of these stores work under the hood haha...
18:36 < mistertwig> i'm not a mongo hater though
18:36 < TonkaTruck> All I know about data stores is: Make sure the data you access frequently is in memory.
18:37 < TonkaTruck> I use it all the time…and redis, mysql, postgres, and sql server.  Working with it in node.js with mongoose is hard to beat heh.
18:37 < mistertwig> sequelize is pretty good
18:38 < mistertwig> but i can never remember how to spell it
18:38 < mistertwig> for some reason
18:38 < Engin> express looks like it is designed to serve static content too and templates and stuff which is I'm not interseted at all. Is there a web service framework ?
18:38 < TonkaTruck> You spelled it right!
18:38 < Engin> with authorization support
18:38 < mistertwig> TonkaTruck: i copied and pasted off the website
18:38 < mistertwig> Engin: you can still use express with some modules
18:38 < tjholowaychuk> Engin we use it for rest only
18:38 < tjholowaychuk> FWIW
18:38 < TonkaTruck> Engin: testify is awesome…not sure about auth but easy to implement.
18:38 < mistertwig> there are auth modules that work in express 
18:38 < TonkaTruck> "restify"
18:39 < mistertwig> or anything for that matter 
18:39 < Engin> let me see
18:39 < TonkaTruck> I meant Restify not Testify, sorry.  Restify + Mongoose is awesome if you just want a bad ass rest service.
18:39 < mistertwig> but yeah TonkaTruck how would you solve the forum post issue?
18:40 < Engin> I don't believe a strictly restfull interface is ideal but I'll check them
18:40 < Engin> (I don't think using PUT and DELETE is good)
18:41 < tjholowaychuk> why?
18:41 < tjholowaychuk> it's just a string
18:41 < tjholowaychuk> do whatever you want
18:41 < CrawfordComeaux> Can anyone see why the ntwitter stream isn't working here: https://github.com/crawfordcomeaux/superdash/blob/master/app.js#L116
18:41 < Engin> because requests with PUT and DELETE would require a preflight request
18:41 < tjholowaychuk> no
18:41 < TonkaTruck> Engin: I think what you're saying is for the purpose of cached fields, like "username" etc.  Frankly, I would cache that with an rdbms, too.  People don't realize how expensive joins are.  Just make sure your app updates them when required, like when a user changes their username, etc.  It's tedious but will run so much faster with such less resources.
18:42 < mistertwig> TonkaTruck: but it's not even that sort of stuff
18:42 < mistertwig> i mean just displaying post count, online status, signature 
18:42 < gildean> Engin: then just use post, it's not like rest actually means anything
18:42 < Engin> TonkaTruck: I don't know what you are talking about
18:42 < mistertwig> think he meant highlight me Engin
18:43 < Engin> gildean: yeah, I believe in post only interfaces :)
18:43 < TonkaTruck> Engin: PUT and DELETE are part of HTTP/1.1 since 1999.
18:44 < TonkaTruck> Engin: Sorry, I typed that to mistertwig.
18:44 < Engin> TonkaTruck: if you care you can see what I wrote about it: http://ea.tl/2012/12/11/design-approaches-to-web-applications-revisited/
18:44 < Engin> TonkaTruck: long story short, CORS specification dictates that any "non simple request" requires a pre-flight requets which is another roundtrip to the server
18:45 < tjholowaychuk> Engin sounds more like you want jsonrpc or something
18:45 < Engin> anything other than HEAD, GET, POST is autmatically non-simple
18:45 < tjholowaychuk> something more abstract
18:45 < TonkaTruck> Engin: I disagree.  I think they're incredibly simple.
18:45 < tjholowaychuk> plus you can cache those pre-flight requests
18:46 < tjholowaychuk> not a big deal
18:46 < tjholowaychuk> premature optimization!
18:46 < Engin> you can't cache them
18:46 < tjholowaychuk> yes you can
18:46 < Engin> you can only cache them per resource
18:46 < Engin> if resource is different i.e. foo.com/api/user/5
18:46 < Engin> if you operate on user/6 it is not in cache
18:47 < Engin> so ideal implementation is post only and single api entry point
18:47 < Engin> POST foo.com/api
18:47 < Engin> or you strictly stick with simple requests and use resources as you please, because it guarantees that no preflight will be made
18:48 < Engin> (though, some framework by default makes all the requests non-simple -- by introducing custom HTTP headers which is another clause for simple request -- you can only use a small subset of http headers in simple requests)
18:49 < Engin> my reference implementation on (what I think of an) ideal web service framework is here https://github.com/engina/zita
18:49 < Engin> I'm considering porting it to node.js atm actually, to learn node.js mostly
18:51 < TonkaTruck> Engin: https://github.com/engina/the-internet-book/blob/master/exports/clock.png did you make this?
18:51 < Engin> yes
18:52 < TonkaTruck> It's a really good illustration.
18:52 < Engin> it's kind of standard way of showing it actually
18:52 < TonkaTruck> Yeah, I've never seen it laid out like that…very simple and easy to understand.
18:53 < Engin> thank you, I appreciate it, because I wanted to make it in a way for laymen to understand
18:53 < TonkaTruck> I don't know anyone who wouldn't understand this.
18:53 < Engin> that's good to hear
18:58 < CrawfordComeaux> Engin: did you happen to see a slidedeck from Instagram on how they improved their app's usability?
18:58 < CrawfordComeaux> UX, not usability
18:59 < TonkaTruck> mistertwig: you can also just do a manual reference to your user and join them in your app.  So, don't embed the user in the post.   
18:59 < Engin> CrawfordComeaux: I have no idea ?
18:59 < TonkaTruck> You'll _still_ beat the leading open source forum software haha…which makes like 1 billion queries per thread page.
19:00 < TonkaTruck> I'm hyperbolizing…vBulletin makes 100 million queries per thread page.
19:01 < Engin> CrawfordComeaux: anything interseting ?
19:02 < mistertwig> TonkaTruck: but you'd need to do a query
19:02 < TonkaTruck> mistertwig: I guess my point is: if you want something that scales, you're not going to be using rdbms joins anyway…you're going to be joining at the app level.  Mongo still has performance benefits over mysql in this case, and you'll _still_ have the option to embed docs where appropriate/convenient.
19:02 < mistertwig> for each post
19:02 < mistertwig> to get the user
19:02 < mistertwig> meh i don't think JOINs ruin scale
19:03 < mistertwig> that's some major premature optimization :P
19:03 < CrawfordComeaux> Engin: trying to find it right now, but the big takeaway for me was that they started trying to anticipate uploads/downloads (which I've seen before, but old habits tend to pull me toward the strictly A->B->C way ) 
19:03 < isaacbw> if you're comparing mongo to mysql, the crux is that you are gaining a lot in speed and ease of use and sacrificing a bit of functionality
19:04  * qXs-web Diego "meh"
19:04 < qXs-web> ** digo
19:04 < isaacbw> there *are* situations where you want a relational database, but most web applications don't end up using those features anyway
19:04 < Engin> CrawfordComeaux: that does not make sense to me, care to elaborate ?
19:04 < mistertwig> isaacbw: i am not a mongo hater though, i see using them both in some cases would be a good solution
19:05 < isaacbw> mistertwig, the big thing for me is that mongo is just plain fun to use
19:05 < isaacbw> regardless of everything else
19:05 < TonkaTruck> http://stackoverflow.com/questions/1020847/mysql-joins-are-evil-cal-henderson
19:05 < mistertwig> i would agree :P
19:05 < CrawfordComeaux> Basically, take a pic & while you're modifying/tagging/commenting it, the app's already started uploading. They take a small hit on the backend when the have to scrap what's been received, but the outcome is typically that when you finally submit the rest of the metadata for the pic in the UI, you don't have to wait any further.
19:05 < TonkaTruck> I agree haha
19:06 < isaacbw> if you have huge amounts of complex data then joins are probably going to be better optimized than what you can do at the application level
19:06 < mistertwig> yeah
19:06 < mistertwig> i mean i'm just trying to see this certain situation where the solution is pretty easy if you're using a relational database
19:07 < Engin> CrawfordComeaux: well, that only makes sense :)
19:07 < mistertwig> but with non-relational databases, the solution would be pretty inelegant and unoptimized
19:07 < Engin> I'm getting crazy when people introduce plain stuff like rocket science
19:07 < CrawfordComeaux> Engin: interesting sidenote to that...CPUs do the same thing when "branching" (eg. processing if-else) and see a performance boost as long as they're right more than 50% of the time
19:08 < isaacbw> wait, what CrawfordComeaux 
19:08 < isaacbw> I want to read more about that
19:08 < CrawfordComeaux> isaacbw: about instagram or CPUs?
19:08 < Engin> yeah, CPUs nowadays do those stuff
19:08 < isaacbw> CPUs and guessing
19:08 < isaacbw> does it have a name I can search for?
19:08 < CrawfordComeaux> Engin: lol...sorry for my mundane convo contribution ;)
19:08 < Engin> prefetch maybe
19:08 < Exx2xxO> Hello ! I got a problem: I made a html-site, with external css and Jquery scripts etc...now I wanted to show the user when he/she is browsing to localhost:8124 this html I allready tried "fs.readFile" and then sending the data to the client...works pretty fine, but the html seems to be saved anywhere else when read and send so it can't find and use the .css and .js files which are linked in...
19:08 < Exx2xxO> ...the page...?
19:09 < CrawfordComeaux> isaacbw: http://en.wikipedia.org/wiki/Branch_predictor http://en.wikipedia.org/wiki/Branch_predication
19:09 < isaacbw> that's really neat CrawfordComeaux 
19:09 < Engin> http://en.wikipedia.org/wiki/Instruction_prefetch
19:09 < TonkaTruck> Mongo is also "so just cloud" http://itssojustcloud.com/
19:09 < phun-ky> isaacbw: got yer coffee on yet? :P
19:09 < isaacbw> two cups so far
19:10 < phun-ky>  I'm on the wine now
19:10 < isaacbw> hah
19:10 < isaacbw> I'm planning on starting to homebrew, which will probably mark the start of a very steep health decline
19:11 < phun-ky> isaacbw: ah, becoming a hop head, (yes, pun on dope)
19:11 < phun-ky> sound nice
19:11 < Engin> CrawfordComeaux: in the old days, programmers were adviced to put the higher possbility if clause to the top, so that you avoid branching most of the time :)
19:12 < Engin> 1) if X == 0 branch to A 2) B: do stuff that is more likely to happen 3) A: less likely to happen
19:12 < Engin> this is pseudo CPU instructions
19:12 < Engin> so you save the branch there bla bla bla
19:12 < CrawfordComeaux> Engin/isaacbw: slightly diff from prefetch. Prefetching is about taking instructions from memory and putting them in a cache (eg. L1 cache) because the cache can be accessed faster
19:12 < Engin> mciro optimizations
19:13 < Engin> CrawfordComeaux: prefetch is a subset of branch prediction I think... you predict, then prefetch :)
19:14 < CrawfordComeaux> Engin: you might be right...or backwards. Been too long since my architecture classes to remember the order of ops ;)
19:14 < jtomasrl> how can i check for routes after redirecting to actions depending on the method and other params?
19:14 < jtomasrl> before*
19:15 < CrawfordComeaux> Engin: I learned about little things like that long ago when I was trying to learn asm from old online tutorials. Virus writing & software cracking tutorials of old had all kinds of optimization gems in them :)
19:15 < Engin> you are a bad boy
19:16 < CrawfordComeaux> I didn't do either of those things. Just read up on them.
19:16 < Engin> want a classic article
19:16 < Engin> that is very fun to read ?
19:16 < Engin> smashing the stack for fun and profit
19:16 < CrawfordComeaux> Plus, that stuff was always more interesting than standard asm tutorials
19:16 < Engin> it does not apply in todays technologies though
19:16 < CrawfordComeaux> Engin: Been there, read that ;) Totally classic.
19:17 < Engin> yeah I was blown away when I read that one haha
19:17 < cainus> hey all.. does anyone have experience writing an auto-reconnecting network client?  I'm just wondering what is usually done with all new client requests while it reconnects...
19:17 < Engin> but today OSes and CPUs prevent that to a large degree
19:17 < CrawfordComeaux> wait...doesn't apply in today's technologies? stack overflows?
19:17 < CrawfordComeaux> to a large degree, sure
19:18 < asturel> hi, anyone knows a basic forum 'module' for nodejs?
19:18 < asturel> i havent found anything at all
19:18 < CrawfordComeaux> but I'd say it's not an outdated article, but the seminal article for learning about the new techniques
19:18 < isaacbw> what do you mean cainus 
19:18 < CrawfordComeaux> he wants a message board, I think
19:18 < Engin> CrawfordComeaux: yup, a must read.
19:19 < CrawfordComeaux> So...who wants to help build an app for the super bowl press room?
19:19 < asturel> yeah, like phpbb / punbb
19:19 < isaacbw> whaaat
19:19 < asturel> just for node :D
19:19 < cainus> isaacbw: say I'm writing a mysql driver, for example... I want it to auto-reconnect when it disconnects.  what do I do with all the SQL calls it gets while it's reconnecting.  I can imagine some possibilities, but is there a standard pattern?
19:20 < isaacbw> cainus, it sounds like you should just buffer the SQL calls and then send them once it reconnects
19:20 < geNAZt> cainus: queue them up till the new connetion is established ?
19:20 < isaacbw> assuming you want reconnects to be transparent
19:20 < cainus> meaning all the asynch SQL calls should wait until reconnect
19:20 < isaacbw> make sure to preserve order
19:21 < cainus> yeah... that's what I was thinking... do you think people are writing drivers like that though?
19:21 < isaacbw> why are you writing a mysql driver though
19:21 < CrawfordComeaux> dear github: please let me sort my search results!
19:21 < cainus> it's just an example... I'm writing a kafka driver
19:21 < isaacbw> cainus, if you're making something new, there's no reason to try to copy what's out there
19:21 < isaacbw> do something new
19:21 < isaacbw> !
19:21 < CrawfordComeaux> mysql? I thought that was deprecated :P
19:21 < Engin> cainus: I think it is a complicated issue. What if the connection is because the server is restarted. That might introduce horrible bugs.
19:21 < isaacbw> CrawfordComeaux, what do you mean about a superbowl press room app?
19:22 < cainus> Engin: I'd have to put a conenct timeout still of course.  what other horrible bugs are you imagining?
19:22 < Engin> cainus: i mean in the case of a statefull server, it is a dangerous concept.
19:22 < jtomasrl> what good connect url router is out there
19:22 < CrawfordComeaux> isaacbw: I mean a social media dashboard for approx 5k journalists to see on two 42" tv screens, as well as a personal dashboard with a few very simple/cool/powerful features
19:22 < cainus> Engin: got an example?
19:22 < Engin> cainus: imagine a transaction is started and halfo f the commands are sent... and you sent the rest to the server after reconnect
19:23 < isaacbw> CrawfordComeaux, and you're looking for help?
19:23 < CrawfordComeaux> isaacbw: and a mobile interface that consists of a login page that leads to one big ass button
19:23 < CrawfordComeaux> isaacbw: Yep. I need help finishing the prototype today so I can negotiate the budget for the next two weeks (goes live in 7 days)
19:23 < CrawfordComeaux> <----node n00b
19:24 < isaacbw> mind if I PM you?
19:24 < CrawfordComeaux> I can pay a little for help on the prototype and pay a lot once a budget's agreed upon
19:24 < CrawfordComeaux> be my guest
19:24 < cainus> Engin: usually the database knows to roll-back failed transactions.  In any case, I don't have transactions in this server (which is not really a database).
19:24 < Engin> cainus: it won't roll back the rest since there is no transaction
19:24 < Engin> cainus: it will execute them immediately
19:24 < Engin> but the commit as the last command will fail
19:25 < CrawfordComeaux> (why is it that unsolicited IRC PMs are so frowned upon these days? is it leftover from back when spambots rules the chat nets?)
19:25 < Engin> CrawfordComeaux: 1) it does not let you show off 2) it is less efficient, information is passed one-on-one
19:25 < Engin> those are the reasons in proper order :)
19:25 < cainus> Engin: ahhh yeah... I see what you mean... still not a problem I'll have
19:26 < Engin> cainus: that approach is dangerous if you do "statefull" communication, if each of them are atomic, it looks safe.
19:26 < cainus> yeah they're all atomic
19:28 < coderarity> hey, I'm trying to attach a node debugger to a running process to debug some hard to find issue. it looks like I can get it into debug mode by sending it SIGUSR1, but how do I attach the debugger after that?
19:29 < CrawfordComeaux> Engin: fair enough
19:29 < CrawfordComeaux> Well if anyone wants to take a look at the current state of the prototype, it's right here: https://github.com/crawfordcomeaux/superdash
19:30 < CrawfordComeaux> and if you figure out how to make this twitter stream work, I'll pay you $20: https://github.com/crawfordcomeaux/superdash/blob/master/app.js#L116
19:30 < eddyb> seriously
19:30 < eddyb> someone fix this already
19:30 < CrawfordComeaux> ...says the guy who has about $600 to his name
19:30 < Engin> haha
19:30 < Engin> that's a generous offer
19:30 < eddyb> 2012-12-21: Version 3.16.0
19:31 < eddyb> ^^ that v8 version broke node+npm+node-gyp+ffi
19:31 < Engin> unfortunetely I have nothing about this ecosystem :)
19:31 < CrawfordComeaux> Engin: not sure if serious about offer
19:31 < Engin> hahaha
19:32 < CrawfordComeaux> Correct me if I'm wrong, but you're just hanging out in here to troll us over our standard web frameworks?
19:32 < Engin> no, I'm planning to do a little toy project with node.js to see what it's all about
19:32 < eddyb> I'm thinking node-gyp doesn't use system v8 when the installed node.js does
19:33 < Engin> CrawfordComeaux: I don't call this trolling though, I'm asking questions that does not make perfect sense to me to understand design choices 
19:33 < Engin> CrawfordComeaux: this is a project with many eyes on it, so I suppose, everything has a reason
19:33 < CrawfordComeaux> Engin: fair enough, though I was just jabbing with the "trolling" part ;)
19:34 < Engin> good :)
19:34 < CrawfordComeaux> referring to the project you're working on? can you share it?
19:34 < Engin> there's no code worth of sharing yet
19:35 < CrawfordComeaux> what about the concept or why there are many eyes?
19:35 < Engin> many eyes on nodejs
19:35 < coderarity> CrawfordComeaux: he's being literal
19:35 < coderarity> O_o
19:37 < CrawfordComeaux> ooooh ok
19:38 < CrawfordComeaux> soooo...concept? :P
19:38 < Engin> I should avoid using pronouns on written communications :)
19:39 < Engin> it's a very simple idea which can be written in any technology with ease but I reather keep it to myself right now, telling things before you do it takes your motivation away :)
19:39 < Engin> (it's a scientific fact)
19:40 < eddyb> oh
19:40 < eddyb> THIS IS FUCKING GREAT
19:41 < jtomasrl> does this still work for connect? http://www.senchalabs.org/connect/middleware-router.html
19:41 < eddyb> I got node.js 0.8.12 built for v8 3.16
19:41 < eddyb> node-gyp fails because it doesn't know it needs to use system v8
19:42 < eddyb> if I downgrade system v8 to match node-gyp, then node doesn't work
19:42 < CrawfordComeaux> true, though good collaboration requires it...not an issue here, but I hate that those two things compete against each other
19:43 < Engin> :) Alright, gotta hit the roads to go home now, later!
19:46 < CrawfordComeaux> isaacbw: thx for pointing me to http://progrium.com/localtunnel/ !!
19:46 < isaacbw> I nerdgasmed when I discovered it
19:47 < phun-ky> Oo
19:48 < phun-ky> i see possibilities there
19:49 < phun-ky> for producing staging environments with node and localtunnel
19:49 < CrawfordComeaux> phun-ky: right?! stick THAT in your pipeline and jenkins it!
19:50 < phun-ky> I'm sticking it in my build environment project i'm working on
19:52 < CrawfordComeaux> phun-ky: anything you can share?
19:52 < phun-ky> CrawfordComeaux: beta is planned in february if all goes well
19:53 < TonkaTruck> that localtunnel site needs overflow: hidden; on the html tag.
19:53 < phun-ky> will add you to the list of people to notify
19:53 < phun-ky> TonkaTruck: details, details! :P
19:54 < TonkaTruck> haha I only bother pointing things like that out when the rest of it is so awesome.
19:54 < CrawfordComeaux> soooo....an app for the super bowl press room...who wants to work on it with me for the next 2 weeks (either remotely or possibly by flying you into new orleans & housing you w/a local dev)? the audition/interview: help me finish the prototype today. Work beyond prototype will be paid, but unsure how much cause the client is too busy to negotiate budget without a prototype.
19:55 < TonkaTruck> It's like when you meet a really cute girl…the first thing you say should be "omg you have the cutest little overbite"
19:57 < phun-ky> CrawfordComeaux: if you cover the flight from Norway and have a REALLY good reason to my wife and kid why I have to suddenly fly over to the US, yeah, I'm in :P
19:57 < isaacbw> so is kim dotcom no longer in trouble?
19:59 < CrawfordComeaux> phun-ky: out of OSL?
20:00 < phun-ky> CrawfordComeaux: hehe. yeah (you know that im kidding right?) :P
20:01 < CrawfordComeaux> lol I know
20:02 < CrawfordComeaux> I was just curious to see the price, cause I may need to fly some people in, depending on what the budget winds up being
20:02 < phun-ky> hm. i think i really need a vacation tbh
20:02 < CrawfordComeaux> $882 round trip
20:02 < phun-ky> going to the netherlands in the easter, that should work, cheep beer, cheep food
20:02 < CrawfordComeaux> I think that's really pushing it, but for a short-notice int'l flight, that's pretty damned amazing
20:03 < CrawfordComeaux> come to NOLA & it'll all be free
20:03 < phun-ky> nola?
20:03 < CrawfordComeaux> New Orleans, Louisiana
20:03 < phun-ky> ah, hurricane city
20:03 < isaacbw> gumbo city
20:03 < phun-ky> great food, but you might want to pick up the check before water levels get to yer wallet
20:04 < CrawfordComeaux> What? I thought NYC is the new hurricane city
20:04 < isaacbw> only the poor parts
20:04 < isaacbw> times square even kept power on through the damned thing
20:04 < CrawfordComeaux> phun-ky: if you cover the cost of flying wife/kid out, we'll house/feed you :)
20:04 < phun-ky> hehe, good to know
20:04 < CrawfordComeaux> and the two of them
20:05 < isaacbw> the only parts that were damaged were the parts where people couldn't afford to keep warm
20:05 < xk_id> I am coding a crawler using Node.js. Does anybody have any advice how I can monitor what my crawler does while I'm waiting for the scraped output?
20:05 < CrawfordComeaux> though you wouldn't have any time to spend with them :P
20:05 < phun-ky> isaacbw: the hurricane in new york is similar to daily wind gusts in norway..
20:05 < phun-ky> they say
20:05 < isaacbw> we just didn't have the infrastructure to survive it
20:05 < isaacbw> (I'm in NYC)
20:05 < CrawfordComeaux> xk_id: what do you want to monitor and how often would the events you're monitoring occur?
20:05 < isaacbw> lower manhattan had no power for a week. It was eerie
20:06 < isaacbw> and the rain and flooding shut down the subways
20:06 < xk_id> CrawfordComeaux: Just the HTTP conversations, really. My crawler gets stuck before outputting the scrapings, so I'm trying to figure out exactly what my code does. 
20:06 < CrawfordComeaux> xk_id: console.log?
20:07 < geNAZt> xk_id: debugger ?
20:08  * xk_id slaps forehead.
20:08 < xk_id> Well, of course. Cheers :)
20:08 < CrawfordComeaux> geNAZt: nodejs debugging?
20:09 < geNAZt> yes
20:09 < isaacbw> I sometimes want to move to the netherlands because I miss the snow
20:09 < isaacbw> global warming seems to be catching up to new england
20:09 < phun-ky> isaacbw: better snow in norway 
20:09 < isaacbw> norway then!
20:10 < xk_id> London, too.
20:10 < isaacbw> how would it be to only speak english in norway phun-ky?
20:10 < phun-ky> you can have 35 degrees celsius in the summer, and still travel to another place in norway to skii in + 4 celsiues ;)
20:11 < phun-ky> isaacbw: well, not hard, since english is mandatory from 3rd grade (8yo)
20:11 < isaacbw> does london usually get snow? I thought it wast just rainy and dreary in the winter
20:11 < isaacbw> or you mean it's not as snowy as it used to be
20:12 < jtomasrl> is there a significant difference here? https://gist.github.com/4574789
20:12 < isaacbw> phun-ky, but people usually speak norwegian in day to day life, right?
20:13 < xk_id> isaacbw: plenty, plenty of snow in London atm :) which is entirely unusual for London. 
20:13 < phun-ky> isaacbw: yes. but if you plan to work here, we offer a multitude of norwegian courses. we hired (at previous employer) a british dude and a tamil indian, sent them to the norwegian course, and that worked fine. but that really didnt matter, since we communicated in english every day none the less
20:13 < isaacbw> oh cool
20:14 < isaacbw> this is what central park is supposed to look like now :,( http://upload.wikimedia.org/wikipedia/commons/3/3a/Central_Park_walkway_under_snow%2C_NYC%2C_February_2010.jpg
20:15 < phun-ky> nah, no more coding for tonight, gonna hit the sofa. talks
20:16 < coderarity> isaacs: hey, i'm working on this st bug, and i'm trying to set a breakpoint in st.js, but it says it's ambiguous. check this out: https://gist.github.com/dcea5462020b0bcc7fa3
20:16 < coderarity> i had to attach a debugger with a signal, and i can't restart it or the bug will go away
20:18 < phun-ky> with the laptop of course ;)
20:18 < phun-ky> hitchhikers guide to the galaxy is on
20:18 < geNAZt> does someone know a good memory snapshot module ?
20:32 < Engin> geNAZt: cat /dev/mem > snapshot :)
20:33 < geNAZt> and on windows :D ?
20:33 < Engin> hibernate the system :)
20:33 < Engin> hahah
20:34 < geNAZt> no :D
20:41 < Engin> geNAZt: it indeed looks like overcomplicated
20:41 < Engin> I couldn't resist looking up myself :)
20:41 < Engin> http://www.forensicswiki.org/wiki/Tools:Memory_Imaging
20:42 < Engin> livekd looks like the best way
20:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:03 < jtomasrl> connecting to mongodb each time i need to perform a query is the only way to work with?
21:04 < isaacbw> jtomasrl, not at all
21:04 < isaacbw> why do you think that
21:05 < Virunga> jtomasrl: i think you can store a db  reference after the connection, and use the keepAlive option
21:05 < isaacbw> (I'm not trying to be condescending, I just want to know your thought process so I can explain you properly)
21:05 < isaacbw> *to
21:05 < jtomasrl> couse every blog i read they do that, but i dont think is the best way
21:06 < isaacbw> you just need to connect once when your server starts up, then use that connection with each request
21:06 < isaacbw> I don't know if that leads to issues with a high volume of requests
21:06 < isaacbw> but it works fine
21:06 < jtomasrl> so i can store the connection in the global variable like server.db and then use that var?
21:07 < isaacbw> yup
21:07 < isaacbw> the connection stays open and you can use it as many times as you want
21:07 < jtomasrl> i'll try
21:07 < isaacbw> why would you have it in server.db though? db is sufficient
21:07 < isaacbw> try not to mess with existing objects in case you screw with internals
21:08 < jtomasrl> how can i access to it from another file?
21:08 < phrearch> hi
21:08 < isaacbw> jtomasrl, you would put it in the exports object
21:08 < phrearch> does anyone know how to recreate an image from a Buffer when sending raw pixeldata from html5 canvas over the wire?
21:09 < isaacbw> if you want many modules to use the same db connection, you could have a db.js module which connects to mongo on initialization, then exports the db object
21:09 < isaacbw> and every modules which requiers db.js will be using the same connection
21:09 < jtomasrl> and requre ir everytime i want to use it?
21:09 < isaacbw> yup
21:09 < jtomasrl> ok
21:09 < isaacbw> it will reuse the same object every time you require
21:09 < isaacbw> that's explained in the docs under 'modules' I think
21:10 < jtomasrl> how can i ensure that it's the same connection and not a new one
21:10 < nanashiRei> Does anyone know a really good and helpful EventEmitter + Domain tutorial?
21:11 < isaacbw> jtomasrl, you don't have to ensure it. require("") will only execute the module once and every subsequent require() will use the same exports
21:16 < isaacbw> what's the equivalent of a <script src="myscript.js"></script> tag in jade?
21:16 < isaacbw> bafjdasfjdsaflhsa jade seems to make things harder
21:17 < isaacbw> jtomasrl, http://nodejs.org/api/modules.html
21:17 < xk_id> Can anybody tell why this jumps from line 12 to line 30 (i.e completely skips all instructions in between). http://pastebin.com/BNAtUqVD
21:17 < asturel> isaacbw script(src='/javascripts/application.js')
21:17 < isaacbw> thanks asturel 
21:17 < asturel> maybe + type='text/javascript'
21:17 < jtomasrl> isaacbw: thx im reading and trying to make things work :P
21:17 < isaacbw> jtomasrl, the docs are really good, so if you run into something new just read through them
21:18 < jtomasrl> btw, is there a diference between this ways of calling a function? https://gist.github.com/4574789
21:18 < isaacbw> bleh bleh, is there a way to get jade to spit out formatted markup instead of putting everything on one line
21:19 < asturel> pretty=true
21:19 < asturel> or something like that
21:19 < isaacbw> thanks
21:20 < asturel> http://stackoverflow.com/questions/5276892/expressjs-how-to-output-pretty-html
21:22 < niggler> has anyone played with silkjs
21:22 < eddyb> jtomasrl: well, the only visible difference is the fact that *this* will be routes.store in the first one and global in the second one
21:23 < eddyb> jtomasrl: also the first one allows you to customize the routing function by passing arguments to routes.store.index (which creates the routing function)
21:23 < jtomasrl> eddyb: ok
21:23 < jtomasrl> eddyb: so no performance difference
21:23 < jtomasrl> great
21:23 < eddyb> the first one would be a bit slower when called in a hot loop or something
21:24 < eddyb> but you're only calling it once
21:24 < jtomasrl> yes
21:24 < eddyb> the routing function it creates is as fast as the routing function in the second one
21:35 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:36 < asturel> anyone have idea how can i prevent ' Error: socket hang up' ?
21:37 < asturel> i use http.request but i dont want the keepalive thing
21:37 < isaacbw> why not
21:38 < asturel> i need only one result then i want to close it
21:38 < asturel> i did req.setSocketKeepAlive(false); but i still run into sockets hangup
21:38 < isaacbw> it will close as soon as you call end()
21:38 < isaacbw> keep alive just makes sure it doesn't close prematurely
21:38 < isaacbw> and it's the default
21:39 < asturel> http://pastebin.com/cgM5e2dg
21:41 < xk_id> Can anybody tell why this very simple code that contains an http request, doesn't produce any output? http://pastebin.com/aadfTn0c
21:41 < slaskis> can it be that the endianness of the typed arrays in node and chrome are different?
21:42 < asturel> xk_id check my pastebin above :D
21:43 < niggler> webgl endianness is different
21:43 < niggler> slaskis you should be using a dataview
21:44 < slaskis> niggler: i am actually
21:44 < xk_id> asturel: have you considered using the 'request' library? It's simpler. 
21:44 < slaskis> my DataView#getUint16() returns differently in chrome from node
21:44 < geNAZt> xk_id did you debug it ?
21:45 < slaskis> but setting the second argument to true fixes it in node but makes it fail in chrome. and vice versa
21:45 < niggler> do you have a code sample?
21:45 < slaskis> yeah, but let me see if i can make a smaller one
21:46 < xk_id> geNAZt: yes. it doesn't seem to start running the instructions in function (error, response, body) {. It keep looping between 'while (', and 'var req ='.
21:46 < asturel> xk_id didnt know about it :d
21:46 < asturel> anyway its an npm module or builtin?
21:46 < xk_id> asturel: I don't remember. try npm require -v
21:47 < xk_id> *npm request -v
21:47 < xk_id> sorry
21:47 < Tierney> Hello.
21:47 < geNAZt> yes that one is easy :D
21:48 < geNAZt> dont wrap async in functions if the only break is the ending of the async call
21:48 < Tierney> I know this sounds stupid, but how do I start my Node server? I just picked up learning Node again today, but I can't run the .js file I've got.
21:48 < geNAZt> in this case you end up using 100% in one event loop and start blocking the node process
21:48 < xk_id> geNAZt: may I request layman terms? :)
21:49 < gildean> Tierney: with node, as in "node somefile.js" or just "node somefile"
21:49 < geNAZt> ?
21:49 < asturel> wow
21:49 < Tierney> You start the server by running the file? I did that and got an error.
21:49 < xk_id> geNAZt: I don't understand how to fix the problem. Could you please explain it to me again?
21:50 < asturel> btw anyone knows a board/forum module for nodejs?
21:50 < gildean> Tierney: you started it with node, or just tried to run the script on it's own?
21:50 < Tierney> Ah, silly me. I wasn't using the right path.
21:50 < geNAZt> xk_id: you have a loop running, the only exit out of the loop is that the page variable is set to 2 or higher
21:50 < Tierney> Thanks gildean.
21:50 < geNAZt> right ?
21:50 < xk_id> geNAZt: that is correct
21:51 < gildean> np
21:51 < geNAZt> the increament of the variable page is done in the async callback of the request lib
21:51 < xk_id> I'm following. 
21:51 < geNAZt> but in this time where node usually waits for the callback, you are executing the loop
21:51 < geNAZt> cause page is 1
21:52 < xk_id> ooh
21:52 < xk_id> haha
21:52 < geNAZt> and node never has the chance to call the async callback in the next lopp
21:52 < xk_id> live by the sword, die by the sword, as it were.
21:52 < geNAZt> so you lock yourself
21:52 < xk_id> I understand now :)
21:52 < xk_id> wow, interesting.
21:53 < geNAZt> but why do u want to do this in a loop ?
21:53 < xk_id> I need to change something in the URL in each loop.
21:53 < xk_id> like, /p=1, /p=2 and /p=3
21:54 < geNAZt> a okay
21:56 < geNAZt> https://gist.github.com/4575430
21:57 < geNAZt> something like that
21:57 < gildean> i'd do it like this: https://gist.github.com/4575431
21:57 < gildean> but basically the same thing
21:57 < mistertwig> yes
21:57 < mistertwig> someone who doesn't show dogballs
21:57 < geNAZt> gildean: nice my next gist id :D
21:58 < gildean> haha
21:58 < mistertwig> i like this guy  ^
21:58 < geNAZt> which ?
21:58 < geNAZt> :D
21:58 < mistertwig> both
21:58 < gildean> mistertwig: i shove those balls so deep so they don't show
21:58 < mistertwig> yess
21:59 < xk_id> geNAZt: that's gorgeous. Thanks a bunch!
21:59 < geNAZt> does it work ? 
22:01 < xk_id> I think they both work :)
22:02 < xk_id> but I'm actually considering doing all pages at the same time, without iteration. 
22:02 < xk_id> I mean, at the same time, instead of sequentially. 
22:02 < geNAZt> use async then
22:02 < xk_id> yep.
22:04 < geNAZt> well you need to create dynamic functions for this than
22:06 < xk_id> I'm trying to figure out how :)
22:07 < xk_id> I've never done async before
22:07 < geNAZt> its easy
22:07 < xk_id> you basically return a function?
22:07 < xat-> ddd
22:09 < darklotus> xk_id, read nodemanual
22:09 < jtomasrl> how can i catch events emitted on "new Object()"?
22:09 < SinnerNyx> if i'm using cypto.createHash('sha1'), is there some way to reuse that object or should I create a new Hash object everytime I need to generate a hash?
22:10 < xk_id> darklotus: it's actually been offline for the past few days
22:11 < slaskis> niggler: ok, finally figured it out. it seems to be a regression in node 0.9
22:11 < slaskis> in 0.8 it works the same as chrome (although it lacks part of the api in 0.8)
22:11 < slaskis> here's a test: https://gist.github.com/0a1e7479ec9ddaaf2caf
22:11 < segomos> jtomasrl: object.on("eventyourlisteningfor", function(){});
22:12 < jtomasrl> im doing that but i get "{"code":"InternalError","message":"Uncaught, unspecified 'error' event."}"
22:12 < jtomasrl> even tho i have an "error" event
22:13 < segomos> jtomasrl: is it your object or from something you installed via npm?
22:13 < jtomasrl> mine
22:13 < segomos> do you have some code you can make a gist from?
22:14 < jtomasrl> segomos: https://gist.github.com/4575545
22:14 < darklotus> SinnerNyx, var hash = crypto.createHash('sha1')
22:15 < geNAZt> xk_id: https://gist.github.com/4575550 
22:15 < jtomasrl> the first is the one beeing emitted
22:15 < geNAZt> Now all load at the "same" time
22:15 < SinnerNyx> darklotus: ya ok, that's what I figured. Thanks :).
22:15 < darklotus> SinnerNyx, np
22:15 < segomos> jtomasrl: are you inheriting the EventEmitter from 'utils' somewhere?
22:16 < slaskis> niggler: i went ahead and posted an issue about this https://github.com/joyent/node/issues/4626
22:16 < jtomasrl> right after the module.exports
22:16 < jtomasrl> util.inherits(User, EventEmitter);
22:16 < segomos> i don't see that in your gist
22:17 < xk_id> geNAZt: Ok, so async is a module :) thanks, man. I'll get studying about async, and if I get stuck, I'll always have your code to save my ass :D
22:17 < geNAZt> https://github.com/caolan/async#parallel
22:17 < jtomasrl> segomos: reload
22:17 < geNAZt> you can ask whenever you fell you need to :D
22:17 < xk_id> I thought async was just a general characteristic, not an actual module.
22:18 < segomos> xk_id: it is both
22:18 < geNAZt> async is a module that helps you with control flows in javascript
22:18  * xk_id nods
22:19 < geNAZt> well you got me on an idea. Load benchmarking via node and asnyc 
22:20 < xk_id> what do you expect to find?
22:21 < slaskis> oh maybe it's related to this commit https://github.com/joyent/node/commit/9fe3734f15c822d6efc5d0e07d2a9dfd41632d7c
22:21 < slaskis> compiling older version of node 0.9 now
22:28 < MI6> joyent/node: Fedor Indutny master * 00abc24 : child_process: remove .track option  Since net.Server's `connection` prop - http://git.io/heK-MQ
22:42 < zip_> what's the safest way to test the validity of a string you are passing to the mongo.ObjectID() constructor?
22:46 < jtomasrl> why return is not getting out of the function
22:51 < timeturner> is there a way to use module.exports and exports at the same time
22:52 < recamilio> Is there some way of counting HTTPS packets via a Node.js proxy?! We offer a service that needs to count users data usage... 
22:53 < mistertwig> timeturner: for what case
22:53 < timeturner> to require a module and use it as a function
22:54 < timeturner> and to access other functions and objects by property access on the required module
22:54 < timeturner> var a = require('a'); a(); a.somethingElse()
22:54 < mistertwig> i don't think so
22:55 < mistertwig> i don't know for sure
22:55 < mistertwig> i think if you did var a = require('a');
22:55 < mistertwig> and you had a function on module.exports
22:55 < mistertwig> a will be the result of that function
22:55 < mistertwig> so i don't see how you'd call other things unless you returned it in the initialize function
22:56 < mistertwig> so if module.exports returned an object with somethingElse in it, then yes
22:56 < SinnerNyx> if I do http.createServer(function(){...}), how do I access the modules i've 'require'd in the base scope inside of the server function?
22:57 < Guest48828> SSinnerNyx: var foo = require('foo'); inside your function just use foo
22:57 < klaemo> timeturner: check this out https://gist.github.com/4248176
22:58 < SinnerNyx> Guest22529: I have to require the module on every request?
22:58 < mistertwig> yes
22:58 < SinnerNyx> erm Guest48828
22:58 < Guest48828> you require it once
22:59 < gildean> SinnerNyx: just require it at a higher scope and it will be usable within the deeper scope
22:59 < SinnerNyx> Guest48828: I see. oh, i misunderstood your response. I think there is a problem somewhere else in my program then. seems like the require call is returning undefined.
22:59 < gildean> if you require it within the global-level, then it'll be usable anywhere within that file (or module per se)
23:02 < SinnerNyx> if I require something and node doesn't give me an error, then it shouldn't be undefined right?
23:02 < bid> no syntax error
23:03 < klaemo>  SinnerNyx, well if the module that you require exports undefined, you'll get undefined
23:05 < SinnerNyx> klaemo: I've done npm install cookies, I'm using cookies. I'm trying require('cookies') and all I get is undefined... is this intended? Am I missing something?
23:07 < klaemo> if the files are in the right directories, it should work
23:08 < klaemo> i'm guessing your already doing this, but you have to assign the required module to a variable
23:09 < isaacbw> does anyone know why I would be getting a disconnect event from the twitter api through ntwitter upon connection and then receiving my stream like normal?
23:09 < gildean> SinnerNyx: the module itself might not export anything on the lowest level, but only export the methods
23:10 < isaacbw> AvianFlu, oh, you wrote it didn't you?
23:10 < isaacbw> haha
23:10 < isaacbw> "oh shit, someone's talking to me. better leave"
23:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:11 < gildean> isaacbw: not even a quit, but a panicy close of the window
23:11 < SinnerNyx> oh really? I didn't realize that would work. so I should try using the functions directly.. I know it should grant access to a function called Cookies. So typeof Cookies should give me function right? or do I have to specify something before Cookies? Like in a browser I might try window.Cookies
23:12 < gildean> SinnerNyx: did you check the docs on how to use the module?
23:14 < isaacbw> so are you supposed to use something like json-stream with ntwitter?
23:14 < klaemo> SinnerNyx: you do var Cookies = require('cookies') and then you can do cookies = new Cookies(...) afaik
23:15 < SinnerNyx> klaemo: that's what I'm trying to do :(
23:15 < SinnerNyx> gildean: I did, but their example doesn't have a require statement. I thought it was just assumed knowledge.
23:17 < klaemo> it's really not that hard. are you sure you understand the basics?
23:17 < isaacbw> okay, so that 'end' at the beginning of the stream is the previous connection being closed by the new one
23:17 < isaacbw> because I'm restarting my node process a lot
23:17 < isaacbw> i.e. harmless
23:17 < isaacbw> I think
23:17 < jsilver> no
23:17 < jsilver> it should not be crashing
23:18 < jsilver> fix the bug
23:18 < jsilver> instead
23:18 < isaacbw> who what
23:18 < isaacbw> me?
23:18 < jsilver> if it crashes, theres a bug
23:18 < jsilver> shouldnt have to restart
23:18 < jsilver> i never restart my node
23:18 < isaacbw> no, I'm doing that myself
23:18 < isaacbw> for development. 
23:18 < jsilver> oh, ok, nvm then
23:18 < jsilver> :)
23:18 < isaacbw> :P
23:18 < jsilver> hehe
23:18 < jsilver> gj then
23:19 < isaacbw> though it *does* seem like a bug in ntwitter, but I don't know if it can be avoided
23:19 < SinnerNyx> klaemo: ouch. :P. I thought I did. before I was doing var _cookies = require('cookies'); _cookies = new _cookies.Cookies(...), but I got it working now I think. I had to change _cookies.Cookies to Cookies. I'm still not sure why typeof _cookies would return undefined though. Shouldn't it be function?
23:19 < SinnerNyx> erm change _cookies.Cookies to _cookies
23:20 < gildean> SinnerNyx: you're not overwriting the same var are you?
23:20 < SinnerNyx> gildean nope. In the http function I do var cookie = new _cookie(...)
23:21 < SinnerNyx> I even stripped eveything else out and tride just the require followed immediately by a console.log
23:21 < SinnerNyx> are require calls done asynchronously as well?
23:22 < SinnerNyx> nvm
23:23 < SinnerNyx> I'm not sure what I was doing wrong before but now it says function. I'm sorry I've been bothering you guys unnecessarily.
23:24 < isaacbw> does anyone have experience with the twitter API? will a duplicate stream error go away if I wait a while?
23:25 < iksik> is there any (experimental even) imap server written in nodejs?
23:26 < klaemo> SinnerNyx: don't worry about it :) glad it's working now
23:26 < SinnerNyx> :)
23:27 < SinnerNyx> any ideas whats going on with nodemanual?
23:28 < mscdex> iksik: nope
23:28 < isaacbw> actually the disconnect message at the beginning was just me being stupid
23:28 < isaacbw> and had nothing to do with ntwitter
23:28 < mscdex> iksik: what's your use case?
23:32 < MI6> joyent/node: Ben Noordhuis master * 2dd3738 : typed arrays: fix DataView endianness regression  Fix an off-by-one error - http://git.io/hgMbxQ
23:32 < iksik> mscdex: it's just for fun actually.... i'm using haraka as smtp server, and i'm writing my emails into mongodb, now it would be nice to read them with thunderbird -_-
23:34 < Iszak> Does node.js have the harmony flag enabled by default?
23:37 < mscdex> iksik: writing a good imap server would be quite an undertaking
23:37 < isaacbw> is there a way to broadcast to every socket io connection without keeping track of the connections myself?
23:37 < mscdex> isaacbw: yeah
23:37 < isaacbw> I know there's socket.broadcast, but that's an 'all but this one' sort of thing
23:37 < isaacbw> mscdex, do you know the function call?
23:38 < mscdex> i think it's just `io.sockets.broadcast()` or something
23:38 < isaacbw> oh cool, thanks
23:38 < isaacbw> oh, looks like it's io.sockets.emit
23:40 < mscdex> there you go
23:40 < mscdex> :-)
23:46 < isaacbw> how do I get a timestamp?
23:46 < isaacbw> nvm
23:46 < isaacbw> fsalfjjhsdfkjsadfkdfs
23:46 < isaacbw> adshjdsafhjfadsadfskjadfs
23:46 < isaacbw> caffeine
23:47 < isaacbw> my blood is coffee
23:47 < isaacbw> sd;ljadfsadfsdfsadfskjdfsadfsdfsdfskjlsadfkdsafkjldsaf
23:47 < geNAZt> is there a pattern or module that allows me to handle something like half global objects ? i want to share ressources between config files like a socket.io configure or a express configure
23:47 < isaacbw> half global
23:48 < isaacbw> what
23:48 < geNAZt> not global.
23:48 < isaacbw> you could have a module that's just a container for properties
23:48 < isaacbw> and no functions
23:48 < geNAZt> i search something like a container that a range of modules can access to
23:48 < isaacbw> and then just have those other things require it
23:48 < isaacbw> like resources.js
23:48 < isaacbw> exports.myproperty1 = 'I am a butterfly';
23:49 < geNAZt> wait a moment i will show you what i want
23:49 < isaacbw> are there any twitter bots that tweet a lot
23:49 < isaacbw> for testing
23:49 < draginx> if i have a variable that has [{hello: 'world'},{yup: 'jello'}] typeof is "object" and .isArray gives me undefined.. any ideas why? (it should be an array...)
23:49 < isaacbw> typeof would be object
23:49 < isaacbw> not sure about isArray
23:50 < isaacbw> but arrays are just obejcts whose keys are "0" "1" "2" "3" etc
23:50 < draginx> ill try instanceof
23:51 < draginx> yup instance of works :) thanks
23:51 < isaacbw> or just https://github.com/substack/node-quack-array
23:51 < isaacbw> alright cool
23:52 < geNAZt> https://gist.github.com/4575866
23:53 < geNAZt> sry wrong gist: https://gist.github.com/4575869
23:54 < isaacbw> this is what happens with too much coffee and the need to test a twitter streaming API https://twitter.com/humongobot
23:55 < mscdex> draginx: you want `Array.isArray(someobj);`
23:55 < draginx> ahh i see
23:55 < draginx> is that faster than instanceof ?
23:55 < isaacbw> the difference would be minimal
23:56 < mscdex> i dunno, but i always use Array.isArray and assume it's safer
23:56 < isaacbw> unless you were doing it hundreds of thousands of times a second
23:56 < draginx> isaacbw: :) isnt that the point of node? ;)
23:56 < isaacbw> fdsjfaslfkhadsfhasdklfjshdklfjh
23:56 < isaacbw> COCOFFEFEEEE
23:56 < coderarity> man
23:56 < coderarity> you gotta cut back on the caffeine
23:57 < recamilio> Is there some way of counting HTTPS packets via a Node.js proxy?! We offer a service that needs to count users data usage... 
23:58 < coderarity> recamilio: count HTTPS data? just count the data with like res.on('data') or something, actual TCP frames seems like a lot to ask for
23:58 < geNAZt> draginx: instanceof is faster
23:59 < Leeol> In express, if an app was mounted via `app.use('/foo', other_app)`, is there a way for other_app to get the full address of requests? `req.url` only returns the relative path to the root of `other_app`. eg: if you request `/foo/bar/baz`, other_app gets `req.url === '/bar/baz'`. Thoughts?
23:59 < geNAZt> draginx: https://gist.github.com/4575884
--- Log closed Sun Jan 20 00:00:54 2013
