--- Log opened Fri Jun 29 00:00:54 2012
00:01 <@Nexxy> eldios, I was asked :P
00:01  * Nexxy is most certainly not vicious
00:02 < eldios> pfff.. you want trick me :>
00:03 < eldios> Nexxy :3
00:17 < theodore> Hey guys, would there be a way to access chrome and direct to URL's via the command line?
00:24 < CIA-93> node: Bert Belder master * rba0efd6 / (20 files in 10 dirs): Merge branch 'v0.8' (+15 more commits...) - http://git.io/3ok0Ew
00:27 < benatkin> theodore: if all you need is to go to an URL, there's https://github.com/jjrdn/node-open
00:34 < CIA-93> libuv: Ben Noordhuis v0.8 * rf6a02fb / src/unix/core.c : linux: don't use accept4() syscall after ENOSYS - http://git.io/BFNrzQ
00:34 < CIA-93> libuv: Ben Noordhuis v0.8 * r27cd5f0 / src/unix/linux/syscalls.c : linux: fix accept4() ENOSYS detection on i386 - http://git.io/xYW61Q
00:34 < CIA-93> libuv: Ben Noordhuis master * rf90d428 / test/test-spawn.c : test: fix unused function warning (+11 more commits...) - http://git.io/TuIJfA
00:34 < CIA-93> libuv: Ben Noordhuis v0.8 * r5b8a112 / common.gypi : darwin: compile at -O0 in debug builds - http://git.io/TbjuRQ
00:43 < othiym23> I'm really sad I missed that fascinating discussion on XML and Java history
00:43 < othiym23> it's rare that so many people are wrong about so many things simultaneously
00:43 < othiym23> it was a perfect storm of Internet
00:43 < ljharb> lol
00:44 < ljharb> what was i wrong about?
00:44 < othiym23> well, XML wasn't derived from SGML, for one thing
00:44 < othiym23> it was sort of like a remake / re-envisioning of it
00:44 < ljharb> oh i didn't say that
00:44 < ljharb> i said all the negative things about xml tho, im sure
00:44 < othiym23> sorta like the Gus van Sant version of Psycho
00:45 < othiym23> XML is a shitty serialization format, I'll give you that, but it's a pretty awesome document format
00:45 < ljharb> and data != documents. exactly
00:46 < othiym23> but documents are data!
00:46 < othiym23> so there's a non-transitive relationship, which is nice, because I like math
00:46 < ljharb> documents contain data
00:46 < ljharb> they are not data themselves however
00:47 < ljharb> or documents are derived from data
00:47 < ljharb> and definitely, XML/HTML/markup is a way to indicate which parts of a document is data - but that's not an efficient way to transport data anywhere
00:47 < othiym23> son, I've written me a ton of XSLT and XPath, so I feel pretty confident in sayin' that documents are data
00:47 < othiym23> they can be other things too
00:48 < ljharb> lol
00:48 < bradleymeck> the fact that every language i know uses a .attributes and .children when they are combined in the markup makes me sad
00:48 < othiym23> from a hypermedia perspective, documents are representations, and as long as you can present those representations to consumers in a usable way, they're valid transports
00:48 < ljharb> i'll agree you can write a whole shit ton of stuff that lets you treat your document as data. but that's all unnecessary if you just use a data serialization format like json or something in the first place
00:49 < othiym23> see, as long as I have a declarative and / or imperative, structured means of taking what comes over the wire and turning it into something pretty, I really couldn't give a shit less what it looks like on the wire
00:50 < othiym23> if I'm going to be hacking on it by hand, sure, I'd much rather deal with YAML or... well, just YAML, editing JSON by hand sucks
00:50 < ljharb> that's a problem tho. because over the wire it should be readable (for debugging) and compact (for speed)
00:50 < othiym23> but a vanishingly small fraction of my time is spent hand-hacking wire messages
00:50 < ljharb> i don't hand-write json, ew. i always use a library
00:51 < othiym23> ASN/1 FTW!
00:51 < ljharb> but i hand-read json multiple times a day, every day.
00:51 < othiym23> just use the wireshark plugin to decode it and yr set
00:51 < othiym23> I think JSON is a pretty shitty wire protocol if efficiency is a concern
00:51 < othiym23> but anyway, this is subjective stuff
00:52 < othiym23> I was mostly just amused to see people claiming that LiveScript influenced the design of Oak and hence Java was named after JavaScript
00:52 < bradleymeck> json is awesome with gzip
00:52 < othiym23> where the hell do people get these ideas?
00:52 < bradleymeck> not ideal but does well
00:52 < ljharb> lol yeah that was nutty
00:53 < othiym23> bradleymeck: I am definitely of the POV that "whatever floats your boat" is the best possible serialization protocol
00:54 < othiym23> streaming COBOL pictures would be fine too, if you're fast at reading and writing them
00:54 < othiym23> but I also have enough experience screwing around with web browsers to know that both JSON and XML are perfectly good representations to hand off to browsers, and there's no objective way to say that one rox and the other sux
00:56 < ljharb> except that working with xml in javascript sucks, and working with json is a breeze
00:57 < bradleymeck> working with xml in anything is painful, it is only xml libs that mitigate using DOM Level2 in Java
00:57 < ljharb> also true
00:57 < othiym23> working with XML on a DOM is a breeze
00:57 < othiym23> working with JSON in straight JS is a breeze
00:58 < othiym23> seriously, the first four or five single-page browser apps I wrote used XML / XHTML as the message format between the back end and the app, and it was really not that painful to deal with
00:58 < bradleymeck> DOM level 2 is not happy, level 3 is breeze, .querySelector = too easy
00:58 < othiym23> I wouldn't do that again today, largely because the tools for doing everything in JS + CSS are so much better, but I didn't find it to be that big a pain at the time
00:59 < bradleymeck> othiym23: my point is that the way to deal with xml is the need for xpath / external libraries the actual format put into a programming language is difficult compared to other formats
00:59 < othiym23> yeah, but that's because it's a document format, not a serialization mechanism
01:00 < othiym23> if you want simple marshaling and unmarshaling, JSON + JS is a rad combo
01:00 < othiym23> for semi-obvious reasons
01:00 < othiym23> anway, time to go watch people drink beerz
01:00 < othiym23> night all
01:00 < bradleymeck> have fun
01:16 < _elek> i'm trying to do something like var app = require('./app').getApp(), sockets = require('./sockets').configure(app.sessionStore);
01:16 < _elek> when i check app.sessionStore it's undefined
01:17 < _elek> i'm sure this is really basic, i'm just not much of a js pro.. and cant figure out how to pass objects around like this
01:18 < tilleps> anyone know of a tool/git-hook that will update package.json version number on each commit?
01:20 < CIA-93> libuv: Ben Noordhuis master * rc89df5b / (test/benchmark-list.h uv.gyp test/benchmark-async-pummel.c): bench: add another async handle benchmark - http://git.io/fEs_6A
01:20 < CIA-93> libuv: Ben Noordhuis master * r4c87666 / src/unix/async.c : unix: speed up uv_async_send() - http://git.io/Hzq_aA
01:23 < AlbireoX> Hi, I'm consistently getting errors like this. How do I fix them? https://gist.github.com/3015104 I believe they are related to the template rendering, but not sure
02:06 < joelsbeard> how do you return from a CLI? How do you exit?
02:08 < alejandr1mg> joelsbeard: ^D o ^C? 
02:08 < joelsbeard> I mean in code, I am showing the help so I don't want it to just sit there running
02:08 < CIA-93> node: isaacs v0.8 * rc721604 / (131 files in 14 dirs): npm: Upgrade to 1.1.33 - http://git.io/NvmO2A
02:09 < alejandr1mg> joelsbeard: you mean kill the process?
02:09 < joelsbeard> yeah, looks like process.exit() is what I need
02:09 < alejandr1mg> process.kill(process.pid, 'SIGINT')
02:11 < CIA-93> node: isaacs v0.8 * r3644b0b / (3 files in 3 dirs): uv: upgrade to 5b8a112 - http://git.io/imMavg
02:20 < joelsbeard> anyone know the npm command that bumps version and publishes?
02:28 < CIA-93> node: isaacs v0.8.1-release * r840456a / (ChangeLog src/node_version.h): 2012.06.29, Version 0.8.1 (stable) - http://git.io/d7aWrQ
02:30 < utu> how do you find out what data members net.Socket object has>
02:30 < utu> ?
02:30 < utu> docs don't mention much, unless I'm not seeing it
02:34 < cliffano> isaacs: can the new npmjs.org include a page with a list of modules which the owner doesn't have any activity for X period of time but the module has X amount of pull requests ? and perhaps add a button where other users can nominate themselves to become co-maintainer
02:34 <@isaacs> cliffano: sounds like a feature request :)
02:35 <@isaacs> cliffano: (honestly, i don't know.  sure, why not?  also, you may each have a pony.)
02:36 < cliffano> isaacs: lol :) nyan cat!
02:42 < shiftpgdn> Is it okay to run an node http server out of /home ?
02:43 -!- isaacs changed the topic of #Node.js to: test please http://nodejs.org/dist/v0.8.1/
02:43 <@isaacs> test please http://nodejs.org/dist/v0.8.1/
02:46 < Weems> w00t
03:04 < tokyodan> I have the previous version of NodeJs installed on my Mac. What's the best way to install 8.0? Just download the installer, exec it and overwrite everything?
03:04 < gkatsev> how did you install?
03:05 < gkatsev> also, isn't homebrew the recommended way to install it on mac os?
03:05 < mburst> tokyodan, I've been using n and it seems to work well
03:09 < tokyodan> thanks
03:10 < tokyodan> I justdownloaded the OSX installer from the nodejs.org website and used that.
03:10 < tokyodan> I heard homebrew has some problems.
03:11 < gkatsev> ok. I've not used it.
03:11 < tokyodan> now I wonder if I use the installer for v8.0 that it won't break anything.
03:11 < gkatsev> but yeah, you can just overwrite it, or use n
03:11 < tokyodan> I'll try that, but I heard n is good for using various versions of node...
03:12 < gkatsev> yeah
03:12 < tokyodan> Ok thanks.
03:19 <@isaacs> tokyodan: yep
03:19 <@isaacs> tokyodan: the pkg works
03:20 <@isaacs> tokyodan: or you can use the tarball, or check out from git, or whatever you like
03:21 < meelash> Hi all
03:22 < meelash> for some reason I cannot get worker processes to exit...
03:22 < meelash> I try cluster.disconnect and in the callback I have process.exit() for the master process
03:22 < meelash> but all the child processes will still be running
03:23 < meelash> I tried calling worker.destroy() and worker.process.exit() on each worker in the callback, same thing
03:24 < tokyodan> Thanks isaacs
03:25 < tokyodan> if I use mac ports to install node witll it install the latest version?
03:26 < CIA-93> libuv: Ben Noordhuis master * r05e4ca5 / (3 files): test: fix test-gethostbyname to not use a DNS server on localhost - http://git.io/LMkisQ
03:26 < CIA-93> libuv: Ben Noordhuis master * ra0722de / (30 files in 3 dirs): c-ares: upgrade to 1.9.0 - http://git.io/NNlSHA
03:26 < CIA-93> libuv: Ben Noordhuis master * rc2381bc / (5 files in 3 dirs): c-ares: libuv-ify c-ares - http://git.io/4FoAUA
03:26 < CIA-93> libuv: saghul master * rb68600d / src/ares/ares_init.c : c-ares: ignore rogue DNS servers reported by windows - http://git.io/OrdB7w
03:26 < CIA-93> libuv: Bert Belder master * r6e5f36a / test/test-fs-event.c : Revert "test: improve clean-up in test-fs-event" - http://git.io/x8-t_w
03:29 < CIA-93> libuv: Bert Belder master * r937d2c9 / (3 files): test: fix test-gethostbyname to not use a DNS server on localhost - http://git.io/IZpu-Q
03:29 < CIA-93> libuv: Saúl Ibarra Corretgé master * r3e425ab / (30 files in 3 dirs): c-ares: upgrade to 1.9.0 - http://git.io/kLcy8Q
03:29 < CIA-93> libuv: Ben Noordhuis master * r15cfcfd / (5 files in 3 dirs): c-ares: libuv-ify c-ares - http://git.io/_dShwA
03:29 < CIA-93> libuv: Saúl Ibarra Corretgé master * r5ee80f1 / src/ares/ares_init.c : c-ares: ignore rogue DNS servers reported by windows - http://git.io/JEdVIQ
03:29 < CIA-93> libuv: Bert Belder master * re9b17bc / test/test-fs-event.c : Revert "test: improve clean-up in test-fs-event" - http://git.io/FNo-ZA
03:37 < CIA-93> libuv: Bert Belder v0.8 * rc2f9b49 / (3 files): test: fix test-gethostbyname to not use a DNS server on localhost - http://git.io/dSTLZg
03:45 < CIA-93> libuv: Bert Belder v0.8 * r7628b65 / (test/test-gethostbyname.c test/test-list.h): test: fix test-gethostbyname to not use a DNS server on localhost - http://git.io/JGRElg
04:05 < CIA-93> libuv: Bert Belder master * r7628b65 / (test/test-gethostbyname.c test/test-list.h): test: fix test-gethostbyname to not use a DNS server on localhost - http://git.io/JGRElg
04:05 < CIA-93> libuv: Bert Belder master * r700f133 / : Merge branch 'v0.8' - http://git.io/O-G2rw
04:42 < coen-hyde> toolbox.no.de has been down for a while, anyone know what's going on with it?
04:42 < utu> what's a good way to control printing of debug messages (console.log)? e.g. in C you can use #define and a flag to toggle
04:43 < utu> i would like to flip some flag and suppress console.logs
04:43 < regality> utu: check out winston - https://github.com/flatiron/winston
04:44 < regality> or you could just say console._log = console.log; console.log = function() { if (log) console._log.apply(console, arguments) }
04:44 < regality> and set log to true or false
04:47 < ljharb> no you should not do that.
04:47 < ljharb> oh wait _log.
04:47 < ljharb> yeah thats ok
04:47 < utu> cool thanks :)
04:48 < regality> np
05:07 < CIA-93> node: isaacs v0.8 * r3e0757c / lib/fs.js : lint - http://git.io/Jlv9sg
05:24 < CIA-93> node: isaacs v0.8 * r1747eef / doc/index.html : homepage: Update Claudio's title/link - http://git.io/USEXLA
06:12 < Industrial> Hi. https://gist.github.com/6648af8855630dcaedba wondering if there's a cleaner way :\
06:48 < Shubuntu> hey guys i'm having trouble installing zombie, the problem is with contexify
06:48 < Shubuntu> http://pastebin.com/AFBnLqrx
06:48 < Shubuntu> any help is appreciated
06:52 < booyaa> lo chaps
06:56 < Shubuntu> nobody here?
06:56 < Shubuntu> hello?
06:56 < mattrobenolt> Shubuntu: Hi.
06:56 < Shubuntu> does anyone know how to fix the problem with installing contexify
06:57 < Shubuntu> hello mattrobenolt 
06:59 < regality> Shubuntu: have you tried running: npm install node-gyp -g
06:59 < Shubuntu> ty regality i'll give that a try, what's that -g for?
06:59 < regality> installs it globally
07:00 < Shubuntu> oh ok
07:03 < Shubuntu> regality: http://pastebin.com/dViFtC1N
07:03 < Shubuntu> didn't work
07:04 < regality> looks like the server is rebooting
07:04 < regality> wait a minute and try again
07:07 < Shubuntu> kk
07:32 < Shubuntu> regality: contextify still isn't installing
07:34 < zhaoji> is there a project management web app written in nodejs?
07:34 < zhaoji> is there a project management web app written in nodejs?
07:42 < booyaa> what you mean like red mine?
07:53 < lrvick> Hey all. So I have a project that is currently one big file, and works in either node or in the browser. I would like to split it up in to many modular files, like plugins.
07:53 < [AD]Turbo> hola
07:54 < lrvick> Then have a node tool that can search for and compile all files in a search path into a single file again
07:54 < lrvick> for browser use
07:54 < lrvick> but within node, it could just require a wildcard like plugins/*
07:54 < lrvick> does that make sense?
08:00 < radiodario> morning
08:09 < lrvick> OK so grunt does what i want for the browser
08:10 < lrvick> So! now all i need is a way for nodejs to support requiring with a wildcard
08:11 <@isaacs> lrvick: lolz
08:11 <@isaacs> lrvick: never gonna happen, sorry.
08:11 <@isaacs> lrvick: but, you could write a module that does this
08:11 < lrvick> Well, I could at least have the fs module do that, in node
08:11 <@isaacs> just require("glob"), and use that
08:11 < lrvick> which would be impossible in the browser
08:12 <@isaacs> with glob you could do glob("**/*.js", { cwd: __dirname }...
08:12 <@isaacs> that'd even travers child dirs
08:12 < radiodario> requiring with a wildcard?
08:12 < radiodario> u crazy
08:12 <@isaacs> yeah, usually, you don't want a *, though
08:12 <@isaacs> just fs.readdir is enough
08:13 < lrvick> I just ultimatly want to require('plugins/*')
08:13 < lrvick> whatever is my shortest path
08:13 < lrvick> I just need to require one directory, and all children.
08:13 < radiodario> for file in directory, require filename?
08:14 < booyaa> wouldn't it be more efficient to let your build tools uglify it? i.e. combine it into one big js?
08:14 <@isaacs> lrvick: module.exports = fs.readdirSync(path.resolve(__dirname, 'plugins')).reduce(function (ex, f) { ex[f] = require('./' + f); return ex }, {})
08:14 < lrvick> booyaa: im going to use grunt for that, but I would like to be able to have node do it during development
08:14 < booyaa> ah okay
08:15 <@isaacs> lrvick: probably wanna filter the readdir results by .match(/\.js$/) or some such
08:15 < lrvick> isaacs: thats... crazy looking... but it makes sense
08:15 < booyaa> isaacs: you weren't a perl hacker were you? ;)
08:15 <@isaacs> oh, my, no
08:16 < booyaa> i'm going to cry if i broke this site
08:16  * booyaa cries
08:17 < booyaa> same damn site works fine in the browser, publish it to iis and i get sadface
08:17 < booyaa> i wonder if lost a css?
08:18 < booyaa> so have we had anyone try using c9's collaborative coding?
08:18 < booyaa> i could see this being a cool offshoot from nodeup.
08:18 < booyaa> livestreaming a code pairing/surgery session
08:21 < milani> isaacs: is there a plan to support platform specific dependencies on npm?
08:21 < milani> isaacs, I mean something like conditions in gyp
08:22 <@isaacs> milani: we've sort of flirted with the idea a few times
08:23 <@isaacs> milani: there's platform/os requirements you can set.
08:23 <@isaacs> but people usually don't
08:24 < milani> isaacs, oh. really? what is it like? any documentation?
08:27 < lrvick> isaacs: that is still searching ./ instead of ./plugins for some reason.
08:28 < lrvick> the path.resolve is not getting passed to the reduce function somehow?
08:31 < lrvick> isaacs: http://pae.st/PTk2/
08:31  * lrvick trys to follow logic
08:37 < lrvick> well screw it. ill hardcode the dir :-P
08:40 < nXqd> can I discuss about mocha here ? 
09:10 < pecke01> nXqd: I believe you can
09:12 < radiodario> you probably wanna ad plugins to the require route
09:13 < radiodario> require('./plugins' + f)
09:13 < radiodario> require('./plugins/' + f)
09:13 < radiodario> or something like that lrvick 
09:14 < CIA-93> node: isaacs v0.8.1-release * r2134aa3 / (AUTHORS ChangeLog src/node_version.h): 2012.06.29, Version 0.8.1 (stable) - http://git.io/s_p9jg
09:16 < pi3r> hi guys
09:17 < pi3r> i'm new to node and i would to know what's the best templating engine for client-side rendering
09:17 < pi3r> i tried hogan but i need some logic in my templates
09:18 < pi3r> handlebars seems nice but i don't know how to precompile templates so they can be available from express
09:18 < regality> pi3r: jade is what the cool kids are using
09:19 < pi3r> regality: even for client-side rendering?
09:19 < ic3devil> hello guys. is there any option to increment in async.parallel? http://pastebin.com/fSLHVDHp
09:19 < regality> ya, we are using browserijade with browserify, it's working really nice
09:19 < ic3devil> somethimes i get same id in database
09:19 < pi3r> regality: it's strange to use a pre-processor when you're looking for perf :D
09:19 < ic3devil> for both functions
09:20 < regality> pi3r: it compiles it down to js before it packs it up for the browser, it turns out to be extremely fast
09:20 < regality> ic3devil: write.to.database(i++);
09:20 < pi3r> regality: but will i be able to dynamically render them ?
09:21 < regality> ya
09:21 < ic3devil> <regality> thanx, call me idiot
09:21 < ic3devil> regards
09:21 < ic3devil> bye
09:21 < regality> pi3r: ya, check out https://github.com/edmellum/browserijade
09:21 < pi3r> regality: yep i'm looking at it right now
09:22 < pi3r> regality: thanks :D
09:22 < regality> np
09:40 < pi3r> regality: i'm totally lost with browserijade
09:40 < pi3r> regality: i don't see how i can use it client side
09:42 < regality> it works with browserify: https://github.com/substack/node-browserify
09:42 < regality> once you get browserify working, browserijade hooks into it
09:43 < pi3r> regality: yep but i don't understand node-browserify
09:43 < pi3r> regality: i have to manually call browserify from the command line?
09:43 < regality> that's the easiest way to use it
09:44 < pi3r> regality: that's king of a pain in the ass in a dev env. no?
09:44 < pi3r> s/king/kind
09:44 < regality> but you'll want to use it programatically to get browserijade working
09:45 < regality> I've got a supervisor running on it, so it rebuilds everytime I change any of the client side code
09:45 < regality> It was a bit of a pain to get it all set up, but well worth it in the end
10:37 < jwulf> i am trying to get the cloud 9 local component to run on Fedora 16
10:37 < jwulf> When I run c9 I get an error message:
10:37 < jwulf> "ERROR: Could not determine your mac address! Make sure you are connected to the internet for the first run and login."
10:37 < jwulf> anyone seen that before or have an idea what causes it / how to get around it?
10:54 < booyaa> jwulf: #cloud9ide
10:54 < booyaa> might get support
10:54 < booyaa> there
10:57 < jwulf> thanks booya
10:57 < jwulf> i've asked in there too
11:01 < booyaa> ah :( they should be awake, maybe they're at lunch?
11:02 < booyaa> believe most of the engineers are based in amsteadm
11:02 < booyaa> amsterdam
11:26 < vdemedes> Hello everyone
11:27 < vdemedes> I'm having weird problem, I use this code https://gist.github.com/9811a7969e4411797c1b to send an email via SendGrid but nothing happens, callback does not get fired
11:27 < vdemedes> But when I put my credentials in the sample script here -> http://docs.sendgrid.com/documentation/get-started/integrate/examples/nodejs-example-using-smtp/
11:27 < vdemedes> Everything works
11:28 < vdemedes> no output, no errors at all
11:28 < vdemedes> ETIMEDOUT gets fired in like 10-15 seconds
11:28 < vdemedes> I mean, that error appears
11:31 < vdemedes> Who's got some ideas about that?
11:33 < justinTNT> n stable;  just fell over trying to install 0.8.1 ...
11:34  * justinTNT wishes the makefile targetted python 2.4, or at least gave a meaningful error msg for it.
11:43 < bcave> hello
11:43 < adamramadhan> hello!
11:44 < bcave> wondering if someone could give me some direction with http-proxy. I have a http-proxy i am using as a router for 2 node apps....
11:44 < bcave> i want to use it to do access logging now
11:44 < bcave> haven't been able to find anything on google
11:47 < bcave> http://pastie.org/4170966
11:47 < bcave> where in that would I add logging per request??
11:53 < nykac> i've installed a module with npm into /usr/lib64/node_modules, any reason why "require"ing it won't load the module, saying the module wasn't found?
11:56 < guy> https://gist.github.com/248c7ad24098dbd2a66b I trimmed the app to the essence. Which is 1) app connects to the database, 2) listens twitter stream, 3) records data to database
11:56 < guy> Though, after roughly two hours it stopped recording data to database
11:57 < guy> The script didn't die or report any errors
11:57 < guy> why could that happen?
12:02 < justinTNT> guy: it could be something inside your stream.on ...
12:02 < justinTNT> nykac: what version node?
12:02 < guy> could it be that database connection died?
12:02 < nykac> justinTNT: v0.7.8
12:03 < justinTNT> is that dir in NODE_PATH or require.paths ?
12:04 < justinTNT> guy: ypiu
12:04 < justinTNT> I guess you'd know if you handled that ...
12:04 < guy> yeah... forgot to throw an exciption..
12:06 < nykac> justinTNT: no, can I set module.paths globally?
12:07 < bcave> never mind, sorted it
12:08 < justinTNT> nykac: it looks like you expected your module to be installed in the global dir, which is lib/node_modules relative to your binary. 
12:09 < justinTNT> either move the module or set NODE_PATH to include that /usr/lib64 one.
12:09 < nykac> justinTNT: NODE_PATH is an environment variable right?
12:09 < justinTNT> srite.
12:09 < nykac> thanks
12:32 < erick2red> hi, I'm trying to build node.js 0.8.0 in FreeBSD 9.0, anyone knows any tricks involved ?
12:33 < ashb> erick2red: its pretty much ./configure && make install everywhere isn't it?
12:35 < erick2red> ashb, yeah I'm getting some errors doing that, so I came to ask, cause are building errors, not stuff missing errors
12:35 < ashb> erick2red: what errors?
12:37 < erick2red> ashb, gmake[1]: *** [/usr/home/erick/Personal/build/node-v0.8.0/out/Release/obj.target/uv/deps/uv/src/unix/eio/eio.o] Error 1
12:37 < erick2red> ashb, not that verbose, right
12:37 < erick2red> there's a bunch of warnings before, but just warnings, tough, there are some seems errors to me
12:38 < erick2red> ashb, it seems this is the error: ../deps/uv/src/unix/eio/config_linux.h:47:53: error: missing binary operator before token "("
12:39 < ashb> so either libuv isn't detecting that its on freebsd or the version of libuv is too old.
12:42 < erick2red> ashb, that libuv is distributed by nodejs ?
12:43 < ashb> erick2red: thats what  deps/uv is
12:46 < erick2red> ashb, hmm, so, that's internal to nodejs, will 0.8.1 improve my situation somehow ?
12:47 < ashb> erick2red: no idea. I don't acutally use 1) node, 2) FreeBSD
12:48 < erick2red> wait is this the wron channel ?
12:49 < ashb> no i just hang out here :)
12:49 < ashb> try asking on the mailing list
13:07 < erick2red> has anyone built nodejs on Mac here ?
13:07 < SomeoneWeird> isaacs, Nexxy maxogden someone wanna +b Progster
13:09 < ashb> erick2red: yeah i've got node installed using homebrew
13:11 < erick2red> ashb, nope, I wan't to know about someone who built it, by hand, afaik, homebrew install binaries, or setup the build environment which is the same
13:12 < ashb> erick2red: right give me 2 mins then
13:13 < klaemo> hey node folks :) does anybody know of a streaming gzip lib for the browser?
13:16 < klaemo> http://gildas-lormeau.github.com/zip.js/ looks good on the first glance
13:19 < ashb> klaemo: not very portable
13:20 < klaemo> ashb: yeah :/ depends on a lot of advanced html5 apis...hm
13:20 < ashb> what are you trying to do?
13:20 < ashb> erick2red: ./configure --prefix=x && make install && x/bin/node
13:20 < ashb> worked fine for me
13:21 < klaemo> ashb: in my app i handle the upload of csv files and i had the crazy idea to compress them on the fly in the browser to speed up the upload significantly
13:21 < erick2red> y compiló
13:21 < onre> afair you can't access the file data in browser-side js
13:22 < erick2red> ashb, built ? like that ?
13:22 < onre> it wouldn't be the first time i'd be mistaken, though :p
13:22 < ashb> erick2red: yes.
13:22 < ashb> onre: you can with the new html5 file apis
13:22 < erick2red> ashb, ok, no worries, then I'll handle it
13:23 < klaemo> onre: yep, html5 makes it possible
13:23 < onre> nice
14:04 < jfroma> when i do "npm link" in a folder that has a package.json with a binary
14:04 < jfroma> sorry a bin
14:04 < jfroma> where does npm create the link? .. I see a link in ~/bin/...,, is this right?
14:18 < Deathspike> If I have a NoSQL database (Redis, Couche, Mongo..) and want to model people with messages and friends, I would model it like this: http://pastebin.com/0aPKQPrM. Wouldn't this be terrible for performance when I want to get all messages of my friends in chronic order (because I first have to find each friend, then fetch their embedded messages and sort them according to dates..)? In a relational db, I would do a SELECT IN ORDER, ho
14:19 < NodeX> you have to weigh up what is going to get queried more
14:20 < Deathspike> IImagine I want to present messages of friends ala facebook/twitter style.
14:20 < Deathspike> So that's going to be OFTEN
14:21 < Deathspike> Note that I want to show relations to pages as well (so another query for every message that relates to a page..?). Think of "blabla liked this page"
14:21 < NodeX> you wil probably need a graphing database then
14:22 < Deathspike> graphing being a traditional sql db?
14:22 < NodeX> no, somehting like neo4j
14:22 < NodeX> I would personaly save all my friends in one array and (in mongo) do an $in [array] to get all message
14:22 < NodeX> s
14:23 < Deathspike> I come from SQL so that's new to me, can you elaborate a little on that solution, NodeX? (I'm considering using Mongo and Couche anyway)
14:24 < NodeX> SQL has IN() no ?
14:24 < Deathspike> It does, yes.
14:24 < NodeX> same as that then
14:24 < NodeX> users collection -> {...., friends : [1,2,3,4,5] } ...
14:25 < NodeX> query .... db.messages.find({friends: {$in : [1,2,3,4,5]}});
14:25 < NodeX> sorry that's confusing ..
14:26 < NodeX> db.messages.find({"user_id": {$in : [1,2,3,4,5]}});
14:26 < Deathspike> In that query, friends: should be author: or something?
14:26 < Deathspike> I see.. that is pretty elegant.
14:26 < NodeX> it's quick too
14:26 < Deathspike> That was my next question :D
14:26 < NodeX> check out #mongodb - this aint really the place to chat about this kinda thing
14:27 < NodeX> I'll help you in there ;)
14:27 < Deathspike> Thanks NodeX, also on freenode?
14:27 < NodeX> yeh
14:33 < natasha> looking to for a node.js programmer for a remote (located in the united states) freelance project. please PM me if interested
14:48 < MadonnaIsMyMommy> What would one call a node containing many DOM elements?
14:51 < NodeX> a node lol
14:51  * MadonnaIsMyMommy is trying to convince a company to pay money for an in-browser web framework and needs a more convincing name.
14:52 < MadonnaIsMyMommy> Something that will illicit the notion of "We be fuckin' PHDs in da lab kickin' down yo DOM"
14:52 < NodeX> ^^ NodeX <--- I was on the same level of thinking when I started my company
14:52 < MadonnaIsMyMommy> NodeX: How did it work out?
14:52 < tbranyen> MadonnaIsMyMommy: a container?
14:52 < tbranyen> a parent
14:52 < tbranyen> a parent container???
14:52 < MadonnaIsMyMommy> I like container.
14:52 < NodeX> very well thanks
14:53 < MadonnaIsMyMommy> NodeX: What are you doin'? :)
14:53 < NodeX> What am I not doing is more the question lol
14:53 < MadonnaIsMyMommy> (If you don't mind my curiocity ;)
14:53 < NodeX> Currently finishing an Adult dating siite
14:53 < NodeX> and working on my own projects
14:53 < tbranyen> opposed to a baby dating site?
14:54 < MadonnaIsMyMommy> Cool, make a hot section for Detroit. ;-)
14:54 < NodeX> as opposed to a normal match.com style dating site!
14:54 < NodeX> this one has rude pics!
14:55 < tbranyen> o
14:55  * MadonnaIsMyMommy wants the URL if it has Detroit.
14:56 < NodeX> it does.. it's just starting out so not sure how many people in Detriot
14:56 < MadonnaIsMyMommy> So, I'm thinking I'll call it "ActiveContainer"
14:57 < NodeX> sounds catchy
15:04 < CIA-93> node: Bert Belder master * r0581afe / (src/node.cc test/simple/test-process-env.js): Revert "Fix #3521 Use an object as the process.env proto" - http://git.io/56nXow
15:08 < MadonnaIsMyMommy> NodeX: So, how are you going to get crossdressing dominitrix ladies (but that are actually hot) on the site if there are no men on the site that want to be dressed up as horse-eys and whipped because they don't know that there are cross-dressing dominatrices?
15:10 < NodeX> the owner is scared of horses
15:11 < STRML> MadonnaIsMyMommy: wat
15:12 < NodeX> must be troll-o-clcok
15:12 < NodeX> clock*
15:12 < STRML> it's clearly friday
15:12 < MadonnaIsMyMommy> STRML: What? I want to be whipped and paddled by an Italian dominatrix from Detroit that will also sing Like A Prayer to me.
15:13 < NodeX> hahah
15:13 < NodeX> dont we all
15:13 < MadonnaIsMyMommy> =)
15:16 < Ded> hey, a very vague nginx+node.js question following...
15:16 < Ded> i need to setup plenty of node.js apps over the weekend, behind nginx
15:16 < Ded> (never did it though)
15:16 < Ded> ((or used node.js))
15:17 < Ded> now, this server doesn't have a domain, just an ip address, and i'd like to keep it that way
15:17 < Ded> so, before i start dishing configs for nginx, anyone else runs it like this?
15:18 < drudge\work> sure Ded
15:19 < MadonnaIsMyMommy> Ded: I prefer to to proxy_pass to UNIX domain sockets when I have many node.js apps running, rather than ports.
15:19 < Ded> drudge\work, so what? i'm to run them on different ports? or something?
15:19 < drudge\work> Ded: that is how i do it, but you could use domain sockets too
15:20 < Ded> drudge\work, care to provide nginx conf file example?
15:20 < Ded> i'd be much obliged
15:20 < MadonnaIsMyMommy> Ded: A UNIX domain socket can have a name associated with the node.js app, rather than a meaningless, arbitrary number.
15:21 < Ded> MadonnaIsMyMommy, drudge\work, FIGHT!
15:21 < Ded> what's better :)
15:21 < Ded> ?
15:21 < NodeX> sockets are considered faster because they dot have TCP overhead
15:21 < NodeX> but not as scalable
15:22 < MadonnaIsMyMommy> Ded: But the real question is, how do you want nginx to know which port or UNIX domain socket to proxy_pass to.
15:22 < MadonnaIsMyMommy> s/\./\?/
15:22 < MadonnaIsMyMommy> Ded: I usually match a certain path using a regular expression with location.
15:22 < Ded> MadonnaIsMyMommy, well, as long as i can get to app via some.ip.add.ress/something or some.ip.add.ress:something and the app thinks is on root, i'm fine
15:23 < MadonnaIsMyMommy> Ded: Right, you don't want /something to show up in the request path of the app
15:23 < Ded> yes
15:23 < drudge\work> Ded: https://gist.github.com/3018585
15:24 < Industrial> Thinking Seq is a good choice to simplify this function, I reimplemented it. I'm just not sure how it's easier to understand or that I implemented it wrong :\ https://gist.github.com/10de62889b422eea0940/f0e9d35df560b6129280288929bce432ab7058c0
15:24 < NodeX> you dont need /foo to show up anywhere
15:24 < NodeX> you can proxy based on $host
15:25 < Clex> What is the jade equivalent of !=partial('header', { foo: 42 }) with "include" ?
15:25 < MadonnaIsMyMommy> Ded: This is how I'm forwarding to a Twisted Python service (albeit using a port): location ^~ /materialgirl/model {   client_max_body_size 3M;   rewrite  ^/materialgirl/model/(.*)$  /$1 break;   proxy_pass http://127.0.0.1:517; }
15:25 < Ded> drudge\work, so, instead "something.domain.com" i can put "localhost/something"?
15:26 < Ded> or "localhost:something"?
15:26 < MadonnaIsMyMommy> Ded: I think you would put the IP address?
15:26 < Ded> just a sec, cell, please
15:27 < MadonnaIsMyMommy> drudge\work: Does that remove @some_site remove '/some_site' from the beginning of the request path so it isn't seen by Node.js?
15:28 < drudge\work> MadonnaIsMyMommy: no, this config attempts to serve static files from the root first, and only proxies the requests if they don't exist
15:28 < drudge\work> think it is a pretty common pattern for node apps
15:29 < MadonnaIsMyMommy> Right. So the Node.js service just knows to deal with paths starting with '/somesite' then?
15:30 < Ded> i'm still lost
15:30 < MadonnaIsMyMommy> I like the use of try_files. Maybe I'll integrate that into my config. :-)
15:30 < drudge\work> no, it knows how to deal with something.domain.com/* as long as it isn't a file that resides in /home/sites/something.domain.com/static
15:30 < NodeX> I would deal with it in a different way ... proxy_pass http://127.0.0.1:PORT/$host/; - then in your Node app manage the varing domains with routing
15:31 < drudge\work> i prefer to do that stuff with nginx
15:31 < MadonnaIsMyMommy> drudge\work: Including a path like something.domain/com/somesite
15:31 < MadonnaIsMyMommy> ?
15:31 < drudge\work> MadonnaIsMyMommy: sure
15:32 < NodeX> nginx requires a restart every time you add an app though !
15:32 < MadonnaIsMyMommy> NodeX: Can't you just do nginx reload config?
15:32 < drudge\work> you can just reload the config
15:33 < NodeX> same difference - some form of interaction is needed
15:33 < MadonnaIsMyMommy> drudge\work: Cool, I think I want to save your config somewhere. Looks like a less complicated approach than my own.
15:33 < NodeX> was my point *
15:33 < MadonnaIsMyMommy> drudge\work: Promise not to delete the gist ;p
15:33 < MadonnaIsMyMommy> NodeX: Right, but at least the site won't have any downtime.
15:33 < Ded> drudge\work, so, for this to work optimally, i'd need to carefully have my statics in that particular directory?
15:34 < MadonnaIsMyMommy> s/Promise/Please don't/ <-- My English is bad
15:34 < Ded> that's a world of hurt for deployment
15:34 < drudge\work> Ded: you can omit the static handling and just proxy everything
15:34 < drudge\work> and let your app serve the static files too
15:34 < drudge\work> or set it up a diff way, i'm just showing you a common pattern
15:34 < MadonnaIsMyMommy> Ded: You could change the root to a different directory right?
15:34 < NodeX> nginx is lightning fast at static files so it pays to let it do it's thing
15:35 < Ded> also, i just put localhost or what if i just want something.domain.com be my ip address?
15:35 < MadonnaIsMyMommy> Btw, anyone having success proxying node.js from Apache2 with good performance?
15:36 < drudge\work> Ded: if you omit the server_name it'll reply to anything
15:36 < NodeX> Apache2 and performance do not live in the same city let alone sentence!
15:37 < NodeX> drudge\work : not true if Nginx has a server_name _; (default)
15:37 < jameshowe> Hello, there appears to be a limit to the input to console.log that is much less that the available free memory
15:37 < jameshowe> ENOMEM in WriteStream._writeImpl
15:37 < drudge\work> NodeX: sure, but if this is the only active site then it would be fine. this is what i'm assuming :P
15:38 < jameshowe> does anyone know what this is so I can split stuff up and avoid crashes?
15:38 < Ded> drudge\work, so, this is valid? http://pastie.org/4172049
15:38 < MadonnaIsMyMommy> server_name _; makes me think Igov loves Scala.
15:38 < NodeX> Ded : locations live in server{} blocks
15:39 < drudge\work> yeah and you wouldn't need multiple servers
15:39 < drudge\work> you could specify multiple locations in the same server block
15:39 < NodeX> which I totaly just misread - my mistake
15:43  * MadonnaIsMyMommy is showing off the girl web developer with leetness: !context && function() { throw new Error("Context not defined!") }
15:43 < MadonnaIsMyMommy> Let's see how much code I can write this week without using if :p
15:44 < NodeX> 2 lines
15:44 < NodeX> new world record
15:45 < MadonnaIsMyMommy> That's one line. But I write really long lines. :)
15:45 < Karmaon> why is he doing that?
15:46 < MadonnaIsMyMommy> Actually, !context && (function() { throw new Error("Context not defined!") })();
15:47 < Ded> drudge\work, so, this server {
15:47 < Ded> 	location /someapp1 {
15:47 < Ded> 		try_files $uri @someapp1;
15:47 < Ded> 	}
15:47 < Ded>     	location @someapp1 {
15:47 < Ded> 		proxy_pass http://127.0.0.1:9090;
15:47 < Ded>         	proxy_redirect off;
15:47 < Ded>         	proxy_set_header Host $host;
15:47 < Ded>         	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
15:47 < Ded> 	}
15:47 < Ded>         location /someapp2 {
15:47 < Ded> 		try_files $uri @someapp2;
15:47 < NodeX> pastebin
15:47 < jocafa> ಠ_ಠ 
15:47 < Ded> i know
15:47 < Ded> sorry
15:47 < shiftpgdn> lol
15:47 < MadonnaIsMyMommy> Ded: We still love you.
15:47 < Ded> :*
15:47 < MadonnaIsMyMommy> Btw, Madonna is my mommy.
15:47 < Ded> that makes you jesus?
15:47 < jocafa> that's unfortunate
15:48 < MadonnaIsMyMommy> Jesus is jealous.
15:48 < Ded> so, this then http://pastie.org/4172049 ?
16:01 < Shubuntu> hi i'm having trouble installing zombie i have the latest version of nodejs and npm
16:02 < Shubuntu> http://pastebin.com/EEWw1g6w
16:03 < Shubuntu> anyone?
16:04 < jameshowe> anyone for mine either?
16:04 < upb> it succeeds Shubuntu 
16:05 < upb> npm WARN optional dep failed
16:12 < Shubuntu> upb: so just contextify didn't install?
16:14 < ben_alman> isaacs: is it ok, if i'm creating a package.json for the sole purpose of installing devDependencies that i create a package.json with just engines and devDependencies properties?
16:15 < ben_alman> isaacs: this isn't for a package that will ever be published as an npm module
16:16 < ben_alman> the idea is to effectively use it like a Gemfile, as a means to have npm install dependencies
16:19 <@isaacs> ben_alman: npm will whine without name and version
16:20 < ben_alman> is there any validity in accepting a package.json that excludes those fields? i can, of course, just use dummy values
16:20 < ben_alman> but i think the use case i'm presenting is valid
16:20 < ben_alman> nbd either way
16:20 <@isaacs> ben_alman: no theoretical problem with it.  just implementation.
16:20 < ben_alman> i'm just trying to understand
16:20 < ben_alman> ok
16:20 < ben_alman> i'll file an issue so it's there
16:20 <@isaacs> i'd accept a patch to make it optional
16:20 < ben_alman> and you can close it or whatever
16:20 < ben_alman> ok cool
16:20 <@isaacs> file on isaacs/read-package-json
16:20 < ben_alman> great
16:21 <@isaacs> it's just so easy to dummy it, no one ever bothered
16:21 < Deathspike> Question, I'm using Express and using compression middleware (I believe from Connect), it works, but doesn't on static files. Incompatibility on that? Misconfiguration? Bug?
16:22 < tjholowaychuk> Deathspike did you put .compress() under .static() ?
16:22 < tjholowaychuk> if so move it above
16:22 < Deathspike> tjholowaychuk: It is above it.
16:22 < tjholowaychuk> hmm should work
16:23 < Deathspike> tjholowaychuk: http://pastebin.com/aiHkfa5Q this is how it looks.
16:24 < tjholowaychuk> looks fine, ill double check our app in a minute and make sure it's working
16:24 < Deathspike> Thanks. Please let me know what the results are :)
16:33 < Raynos> sys is in "deprecated" / "should not be used state"
16:33 < Raynos> Are there any flags I can set that warn me that i am using things I should not be used
16:34 < Raynos> I like being told I'm using older APIs and should use the better / newer alternative instead
16:34 < lukeholder> anyone know how i can get node to run on my retina display?
16:34 < tjholowaychuk> it's annoying that the filename / lineno is not displayed by default
16:34 < tjholowaychuk> Raynos++
16:35 < Raynos> sys no longer logs or throws
16:35 < Raynos> I think there should be some way that node can tell me "hey, you new guy. dont use sys, use util"
16:36 < Raynos> maybe add sys back to the node docs and state it's deprecated and say "use util instead"
16:37 < tjholowaychuk> they did have that for quite a while
16:37 < tjholowaychuk> but even stuff like path.exists should output the filenames so we can track down modules easier
16:37 < Raynos> oh interesting
16:37 < Raynos> that would be sweet
16:37 < Raynos> "Warning: your using sys: file / line"
16:38 < tilleps> grep -r "path.exists" /path/to/node_modules/
16:39 < tilleps> worked pretty good to me, although most of the results were usually tests
16:43 < jameshowe> anyone shed any light on this console.log limit?
16:43 <@maxogden> use console.error
16:43 < jameshowe> it ENOMEMs at some point far, far, below how much free memory there is
16:44 < jameshowe> that's nice, but I want stdout, not stderr
16:44 <@maxogden> they are implement differently fyi
16:44 < jameshowe> i know
16:44 < jameshowe> console.error blocks for a start
16:44 <@maxogden> (i also dont know what you meant by 'this console.log limit' so im checking)
16:44 <@maxogden> s/checking/guessing
16:45 < jameshowe> i asked a while ago, to stony silence
16:45 <@maxogden> welcome to irc :)
16:45 <@maxogden> would you mind restating the question? irc is a temporally insensitive beast
16:45 < jameshowe> yes, i've been here before
16:46 < jameshowe> ENOMEM in WriteStream._writeImpl
16:46 <@maxogden> is your v8 heap fillin gup?
16:46 < jameshowe> console.log with a string that would be somewhere around 100k
16:47 < jameshowe> watching the memory usage, it was low and constant
16:47 <@maxogden> there is system memory and then there is the much smaller v8 heap
16:48 < jameshowe> setting to increase?
16:48 <@maxogden> try process.memoryUsage()
16:49 <@maxogden> i dont remember how to up the limit... i think its an env variable or something
16:50 < jameshowe> i'd be surprised if it were heap, as it's perfectly fine dealing with multiple chunks and strings that are that big all the time
16:50 < jameshowe> yet when i turned my debug logging on to diagnose a particular issue... boom
16:51 < tjholowaychuk> Deathspike: yeah works fine here
16:51 < tjholowaychuk> similar setup to yours
16:51 < tjholowaychuk> make sure you have Accept-Encoding: gzip etc
16:52 < Deathspike> tjholowaychuk: Thanks for looking into it. So it must be something I did, I'll look further into it..
17:01 < jameshowe> ah well, home time
17:18 < mafnnode> hi people
17:18 < mafnnode> ?
17:18 < mafnnode> anyone are here
17:18 < jesusrosso> hello
17:18 < mafnnode> oh shit
17:18 < mafnnode> hello
17:19 < alejandromg> So what does mean "pure virtual method called" when I'm compiling 0.8.0? Because after that the process die
17:19 < mafnnode> how are u?
17:20 < CIA-93> node: isaacs v0.8 * rbc71874 / doc/blog/release/v0.8.1.md : Blog post about 0.8.1 (+6 more commits...) - http://git.io/js_PhA
17:22 < dshap> hey all - for some reason NPM is telling me that i should run "npm install" as root/Administrator.  is there a way i can fix this so that it runs for my current user?
17:22 < mafnnode> hey dshap
17:22 < dshap> hi
17:22 < jesusrosso> I'm having a nodejs http server in production that exits with code 0 and no message. Any how can I debug this ? I run with strace and the last thing that I see before the exit is: https://gist.github.com/3019359 . any help?
17:23 < mafnnode> type right button and click run as administrator
17:23 < dshap> mafnnode: i don't want to run it as administrator
17:23 < mafnnode> and what u want?
17:23 < dshap> mafnnode: i just want to be able to do "npm install" and have it work.  i was setting up a new box and following some instructions but i must have made a mistake.  our deploy uses "npm install" and now it's broken
17:24 < dshap> mafnnode: if i do "sudo npm install" right now, it works, but that is bad
17:24 < dshap> mafnnode: any idea how i can diagnose this issue?
17:24 < mafnnode> you use linux so?
17:24 < mafnnode> no i don't have idea
17:25 < deedubs> dshap: do you have write permissions in the folder your trying to run 'npm i' in?
17:26 < dshap> deedubs: these are the permissions for that folder: drwxr-xr-x 10 ubuntu ubuntu
17:27 < deedubs> does it have a node_modules dir?
17:28 < dshap> deedubs: yes
17:29 < meelash> is there a log of this channel?
17:29 < dshap> deedubs: i actually ran "sudo npm install" when i initially set this up, so my stuff is installed
17:29 < dshap> deedubs: i just need it to work with plain old "npm install" now so that my deploy script doesn't bug out
17:30 < deedubs> ohhhh
17:30 < deedubs> sudo rm -fR node_modules && npm install
17:32 < dshap> what will that do
17:33 < dshap> delete all my modules
17:33 < dshap> and start over
17:34 < dshap> deedubs: just did it
17:34 < dshap> deedubs: so i no longer have a node_modules folder
17:34 < dshap> deedubs: but i still can't "npm install", it says i need to run as root/Admin
17:34 < meelash> Has anyone had success killing worker processes using cluster?
17:36 < RLa> meelash, using cluster here
17:37 < xeodox> Has anyone ever experienced this problem: { err: { [Error: socket hang up] code: 'ECONNRESET' }, …it's really random and it's crashing my server
17:40 < RLa> meelash, cluster.workers[uid].process.kill()
17:41 < rampr> xeodox:  happens to us too, but server doesn't crash for us
17:41 < xeodox> rampr: how' do you know what's causing it?
17:41 < rampr> I've noticed it happens when the client closes the connection
17:42 < rampr> xeodox:  I've noticed it happens when the client closes the connection
17:42 < xeodox> a lot of times I'm hitting my own server (using the request module), and this happens.
17:43 < xeodox> I hit my API server (which happens to be the same server), and this happens
17:46 < meelash> RLa: you mean .exit()?
17:46 < meelash> kill just sends signal to a process according to docs
17:47 < RLa> so what
17:47 < RLa> it's all about signals
17:48 < STRML> jesusrosso: Have you tried using node-inspector?
17:48 < RLa> i have no idea what happens if you call exit there
17:48 < RLa> meelash, i add signal handler in workers
17:49 < meelash> RLa: ok, and what do you have in the signal handler?
17:52 < meelash> I tried this- https://gist.github.com/3019600 didn't work
17:53 < meelash> I've also tried cluster.disconnect(), which would seem to do what I want, didn't work
17:53 < RLa> hm
17:53 < meelash> also tried worker.process.exit() and worker.destroy() which both would seem to be what I want
17:53 < meelash> didn't work either
17:54 < RLa> https://gist.github.com/3019602
17:54 < RLa> here is my helper module
17:56 < RLa> it works very well with node 0.7.9 and should work with 0.8.x too
17:57 < meelash> hmm...
17:57 < meelash> I wonder if the difference is calling process.exit() from outside the process, vs in the process itself...
18:01 < Raynos> npm  hates me :( (https://gist.github.com/ff44207d31698683f25a)
18:08 < meelash> RLa: yep, that appears to have been it… thanks for the assistance
18:08 < RLa> no problem
18:10 < brainss> urxvt
18:10 < brainss> oops
18:11 < akcontreras> Hi. How can I switch to a different version of python? "./configure" give me error. I Already do "export PYTHON = `which python2.7`" and "export PYTHONHOME = '/usr/local/bin'" I appreciate the help. The main python is 2.4.3.
18:17 < brainss> akcontreras: what version of python is /usr/bin/python ?
18:17 < brainss> ls -la /usr/bin/python
18:17 < akcontreras> 2.4.3
18:18 < brainss> what error does ./configure give you?
18:18 < akcontreras> File "./configure", line 266 o['default_configuration'] = 'Debug' if options.debug else 'Release' SyntaxError: invalid syntax
18:26 < brainss> akcontreras: if you have 2.7 then try to sym link /usr/bin/python -> python 2.7
18:27 < akcontreras> but, it will not break anything doing that? Is CentOS and have install parallels
18:28 < jerrysv> isaacs: you around and have time for a quick npm question?
18:28 < brainss> ahh, nevermind. my soluion is more of a quick fix
18:29 < akcontreras> I'll try anyway, I need Node.js
18:37 < akcontreras> brainss: It work, thanks.
18:38 < brainss> akcontreras: cool, remember sym link back to python 2.4 if you're worried
18:39 < akcontreras> brainss: Okay, thanks again :)
18:40 < meelash> I have a recursive function that is going to recurse 1000's of times- I can just break it up with setTimeout to prevent it from stack overflowing?
18:41 < Deathspike> You can, but recursive functionality is better without recursive calling, just make it a while loop or whatever.
18:42 < Deathspike> Note that it's bad design in node, since everything blocks when you do that.
19:01 -!- isaacs changed the topic of #Node.js to: Next Stop: NodeConf
19:14 <@maxogden> isaacs: woowoo
19:17 < tnorris> more of a js question, than node specific, but anyone know why the following happens: http://pastebin.com/UzrrjuzP
19:18 < jfroma> hi, does the https module supports 2 certificates for 2 different hostnames? or should i run two https servers and use a reverse proxy in this case? thanks
19:18 < RLa> jfroma, is that even supported by https?
19:19 < RLa> if those hostnames share ip
19:20 < tbranyen> tnorris: because its passing args to Math.random
19:20 < tbranyen> Math.random doesn't just make a random number, it makes one in between a range
19:20 < jfroma> i was planning to run something on the 443, when you navigate to that server if you do blabla.com it uses one certificate but if you go with fofobar.com it uses another cert
19:20 < jfroma> i thought it was possible
19:20 < jerrysv> tbranyen: are you hitting nodeconf?
19:20 < tbranyen> nope wish i could :(
19:20 < tbranyen> so busy with stuff
19:20 < jerrysv> tbranyen: was going to help on the beer front :(
19:21 < tbranyen> ha, thanks man =)
19:21 < tnorris> tbranyen: it does the same thing if I create a function that just returns 1.
19:21 < tnorris> the tests show that .map() and .forEach() just skip over uninitialized values in an array.
19:22 < tbranyen> tnorris: man i know i saw something that did this recently
19:23 < tnorris> tbranyen: here's a painfully dirty trick: Array(5).join(',').split(',').map(Math.random);
19:23 < tnorris> but like hell I'll ever put that into my script.
19:24 < davidmurdoch> Can anyone help me understand the crypto.pbkdf's derivedKey? I'm looking to convert it to Base64
19:28 < jfroma> RLa, more on this.... http://stackoverflow.com/questions/9594065/2-certificates-on-a-node-server I think is not technicall possible, I should open two https servers in two differents ips i think
19:29 <@isaacs> jerrysv: whassup?
19:29 < jerrysv> isaacs: just a quicky - are there plans to support other engines beyond node in package.json/npm?
19:30 <@isaacs> jerrysv: npm is a node program for making node programs.  (so, no)
19:30 <@isaacs> but other engines are ignored.
19:30 < RLa> jfroma, indeed
19:30 <@isaacs> so you can use package.json, and even use the registry
19:30 < jerrysv> isaacs: in essence, i built a module/require system for plv8, was trying to take a shortcut :)
19:47 < Qbix1> guys I have an old verison of node.js
19:47 < Qbix1> 0.4 or something
19:47 < Qbix1> I tried to upgrade node etc. but this is what I get now
19:47 < Qbix1> I tried doing it via sudo npm install n; sudo n install latest
19:48 < Qbix1> also I tried the macos installer
19:48 < jamescarr> what is a good mock framework for mocha?
19:48 < tjholowaychuk> dunno, i dont really mock
19:48 < insin> sinon
19:48 < tjholowaychuk> sinon maybe
19:48 < Qbix1> http://pastie.org/4173243
19:48 < Qbix1> PLEASE HELP
19:49 < Qbix1> the line is: var express = require('express');
19:50 < Qbix1> what is going on here
19:50 < Qbix1> what's this fs.exists error nonsense
19:53 < EhevuTov> Qbix1, I believe the name was changed in0.8
19:53 < Qbix1> okay but I upgraded
19:54 < Qbix1> npm -v and node -v shows the latest
19:54 < jamescarr> tjholowaychuk, yah, I have to in this case though as the scenario is hard to reproduce in a test without mocking
19:54 < Qbix1> but our scripts don't work!!
19:54 < EhevuTov> Qbix1, yeah, i'm guessing the module you're using is calling the old version
19:54 < jamescarr> Qbix1, I tend to keep node and npm locked in place until I verify all my stuff works on latest
19:54 < Qbix1> internally node throws an error
19:55 < Qbix1> it's EVERY module
19:55 < Qbix1> express is not an old module
19:55 < Qbix1> I did npm install express
19:57 < EhevuTov> Qbix1, it looks like you're not loading your express module to var express
19:58 < EhevuTov> Is the require() erring out?
19:59 < EhevuTov> Qbix1, I'm guessing you're having an issue with your express not properly installed. Like, maybe you're having a conflict with a global express install with a local install?
19:59 < EhevuTov> Qbix1, like, it seems your trace is saying that the module doesn't exist
20:00 < jt2190> EhevuTov: Should node be installed using 'sudo'?
20:00 < EhevuTov> jt2190, I don't think so
20:01 < jfroma> RLa, not sure if i can use  http://en.wikipedia.org/wiki/Server_Name_Indication with the https module. HTTPS seems to be implemented on top of tls and tls has this SNICallback: http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener
20:01 < Qbix1> you are saying it's express?
20:01 < EhevuTov> Qbix1, I'm saying it's your require() function?it seems it can't find Express
20:02 < RLa> jfroma, hm, no idea, haven't used such feature
20:02 < EhevuTov> Qbix1, I don't think this is your root cause, but have you done a 'npm i npm -g' recently?
20:02 < Qbix1> the line is: var express = require('express');
20:03 < EhevuTov> Qbix1, yeah, that looks correct?I'm thinking your express isn't installed properly, or for some reason require() is looking in the wrong place for Express
20:03 < Qbix1> but how do I fix it
20:03 < Qbix1> look here is what I had:
20:04 < Qbix1> node 0.4 and npm
20:04 < Qbix1> it was all working
20:04 < Qbix1> then I decided to do npm install node-inspector
20:04 < Qbix1> it said the node was out of date etc.
20:04 < Qbix1> so first I tried npm install n; sudo n install latest
20:04 < Qbix1> that compiled a lot of stuff and then I got these errors
20:04 < Qbix1> next on the node.js website I found a mac installer. "Simple," I thought
20:04 < EhevuTov> Qbix1, yeah, you were like 2 big versions behind
20:05 < Qbix1> it instaleld in usr/local/bin and I updated my $PATH
20:05 < Qbix1> node -v and npm -v says new versions
20:05 < EhevuTov> ah
20:05 < Qbix1> but still!
20:05 < Qbix1> I did npm install express
20:05 < Qbix1> and still same error
20:05 < Qbix1> on both computers now I can't use node :(
20:05 < EhevuTov> yeah, I'm guessing when you did that $PATH?you pointed it to one point, and you probably need a :./ in your path
20:05 < Qbix1> what do you mean
20:05 < EhevuTov> cause it sounds like you're having a $PATH issue
20:05 < Qbix1> I have this:
20:05 < Qbix1> Gregorys-MacBook-Air:Calendar greg$ which node
20:05 < Qbix1> /usr/local/bin/node
20:05 < Qbix1> Gregorys-MacBook-Air:Calendar greg$ which npm
20:05 < Qbix1> /usr/local/bin/npm
20:06 < Qbix1> Gregorys-MacBook-Air:Calendar greg$ echo $PATH
20:06 < Qbix1> /usr/local/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:/usr/local/mysql/bin
20:06 < Qbix1> you see I have /usr/local/bin twice because I prepended it now
20:06 < Qbix1> Gregorys-MacBook-Air:Calendar greg$ node -v && npm -v
20:06 < Qbix1> v0.8.1
20:06 < Qbix1> 1.1.33
20:06 < Qbix1> isn't this all good to go?
20:07 < EhevuTov> yeah
20:07 < Qbix1> ok. but when I run node Calendar.js, I get this:
20:07 < EhevuTov> but I don't think it's an install issue. I'm thinking your paths are wrong somehow
20:07 < EhevuTov> which is why require() is looking in the wrong place and not finding express
20:07 < Qbix1> http://pastie.org/private/boznb6a7nyhbi7myf2xug
20:07 < Qbix1> okay perhaps
20:07 < Qbix1> but look at the actual error
20:07 < Qbix1> in the pastie
20:07 < Qbix1> Function.Module._resolveFilename (module.js:338:15)
20:07 < Qbix1> that is internal to node
20:08 < Qbix1> okay I get it, it can't find express you are right
20:08 < Qbix1> and "path.exists is now called `fs.exists`." is just some warning I guess
20:08 < EhevuTov> yes
20:08 < Qbix1> but why is it giving me the "path.exists is now called `fs.exists`." warning
20:08 < Qbix1> I am not using paths.exists
20:08 < Qbix1> oh wait I am
20:08 < Qbix1> okay.
20:08 < Qbix1> so that solves the mystery of path.exists.
20:09 < EhevuTov> Qbix1, I'm guessing you changed where require() looks in node_modules
20:09 < EhevuTov> so, it doesn't look in ./node_modules
20:10 < Qbix1> oh sorry I did
20:10 < Qbix1> npm install -g express
20:10 < Qbix1> and it still doesn't work
20:11 < Qbix1> I forgot to say that
20:11 < Qbix1> how do I change where require() looks?
20:11 < chanced> i'm looking to build out html in a dom. Is jsdom still the best option for that? (it's been awhile since i worked in node.. just coming back)
20:11 < chanced> or has something "better" come along?
20:11 < Qbix1> woo hoo I fixed the path.exists warning at least
20:12 < Qbix1> now I am down to just not finding the express module :)
20:12 < Qbix1> sorry by the way for confusing the two into one
20:12 < EhevuTov> Qbix1, do an absolute path to your installed express module
20:13 < EhevuTov> like require('/node_modules/express/express.js') or whatever, not sure if that's correct, but you know what I mean
20:14 < jamescarr> tjholowaychuk, hey, mind if I ask you how you'd handle this situation I reached in a library I am writing?
20:15 < tjholowaychuk> jamescarr sure
20:15 < jamescarr> tjholowaychuk, how would you handle if you have a method that could be called tons of times and needs to call an external async resource, only processing the additional calls once the response from that resource is returned?
20:16 < jamescarr> I don't want to block to do it
20:16 < jamescarr> my best guess is drop the successive calls in an array and push them through when the response is returned
20:16 < Qbix1> I also wrote this :
20:16 < Qbix1> http://pastie.org/private/tfrgstghgjozvifijajjoq
20:16 < jamescarr> but I want to be careful not to exhaust memory too!
20:16 < Qbix1> EhevuTov ? I would rather fix my environment if it's possible
20:16 < Qbix1> do you guys think http://pastie.org/private/tfrgstghgjozvifijajjoq is wise
20:16 < tjholowaychuk> jamescarr so you have one initial call and then N after that one gets back?
20:16 < EhevuTov> Qbix1, of course, but just test the absolute path first
20:17 < tjholowaychuk> jamescarr how big is N?
20:17 < Qbix1> EhevuTov ? I don't know where the express module is in the first place
20:17 < Qbix1> Gregorys-MacBook-Air:Calendar greg$ npm list
20:17 < Qbix1> npm WARN unmet dependency express * in /projects/qbix/Calendar/website/scripts/Calendar
20:17 < Qbix1> ??? UNMET DEPENDENCY express *
20:17 < Qbix1> ??? n@0.7.2 
20:17 < tjholowaychuk> jamescarr: the only flow-control type of lib I have is github.com/visionmedia/batch but there's no throttling built in (yet at least)
20:17 < EhevuTov> Qbix1, if you did 'npm i express', it will be in your ./node_modules/
20:18 < tjholowaychuk> im sure async and some of the others have that covered
20:18 < Qbix1> ls
20:18 < Qbix1> oh ok
20:18 < jamescarr> tjholowaychuk, up to the user really. Basically a plugin to mongoose.
20:18 < Qbix1> yes they are there
20:18 < jamescarr> I add a new method called synchronize to Models that indexes all the models into elasticsearch
20:18 < jamescarr> I mean, indexes all instances of that model
20:18 < EhevuTov> Qbix1, ok, then do an absolute path in require() and make sure you don't get a trace error for a file not found
20:19 < Qbix1> http://pastie.org/private/unobxl4uebgphwukhvie3a
20:19 < Qbix1> like that?
20:19 < jamescarr> so basically it streams through them all using find() and indexes them, requiring a mapping to be created the first time
20:19 < Qbix1> it's in the global /usr/local/lib somewhere
20:19 < jamescarr> I guess the other option is to simply pause the stream until the first one is completed. Even then, users could call save in a loop, which triggers getting indexed into ES as well
20:20 < chapel> jamescarr: Id pause the stream
20:20 < EhevuTov> Qbix1, /usr/local/lib/node_modules/
20:20 < chapel> too complicated to try and queue them up unless you used a worker
20:20 < Qbix1> Gregorys-MacBook-Air:Calendar greg$ ls /usr/local/lib/node_modules/
20:20 < Qbix1> express	npm
20:20 < EhevuTov> Qbix1, so look in /usr/local/lib/node_modules/ for express/express.js or something
20:20 < jamescarr> how does Mongoose handle this? I noticed you can do all kinds of operations and they don't really happen until you connect
20:20 < Qbix1> it has index.js
20:20 < Qbix1> is that good enough?
20:20 < EhevuTov> I think
20:21 < Qbix1> okay so let's see I have the latest node, I have npm right
20:21 < EhevuTov> require() cycles through an array of possible default vals
20:21 < tjholowaychuk> jamescarr just buffers queries, nothing too fancy
20:21 < chapel> jamescarr: for streaming?
20:21 < Qbix1> and I have express with index.js but it can't find it
20:21 < Qbix1> we used to have require.paths
20:21 < Qbix1> what do we have now?
20:21 < EhevuTov> Qbix1 please just try the absolute path
20:22 < EhevuTov> Qbix1, if you can't even do an absolute path then you won't be able to use a relative path
20:22 < EhevuTov> so please, just try the absolute path first
20:22 < Qbix1> okay sec
20:22 < jamescarr> chapel, the problem can exist outside of streaming
20:22 < chapel> not sure what you mean?
20:23 < jamescarr> basically if they call save multiple times my plugin will make many un-needed GET requests :)
20:23 < jamescarr> I only need to get the mapping from ES once
20:23 < jamescarr> Fuck it. I'm going to just queue it myself for now :)
20:23 < chapel> oh
20:24 < chapel> well thats different I guess
20:24 < jamescarr> yeah. I could pause the stream, but if the user runs a loop and saves models they'll be in the same boat :)
20:24 < Qbix1> var express = require('/usr/local/lib/node_modules/express'); ?
20:24 < jamescarr> Qbix1, don't you dare do that
20:24 < EhevuTov> jamescarr, we're just testing right now
20:24 < jesusabdullah> ololo
20:24 < tjholowaychuk> jamescarr so it just needs to set up the schema or something?
20:24 < Qbix1> lol :P
20:24 < jamescarr> EhevuTov, ah okay
20:24 < Qbix1> EhevuTov thouht we could try it but honestly
20:25 < EhevuTov> jamescarr, he's having an issue with relative pathing
20:25 < Qbix1> I have no idea why node can't find the express module!!
20:25 < tjholowaychuk> jamescarr if that's the case doing it magically on .save() is probably not going to work too well
20:25 < chapel> jamescarr: is the get request unique per document, or per model/schema?
20:25 < tjholowaychuk> races with other processes etc
20:25 < Qbix1> jamescarr think you can help me resolve it? I installed a new node and npm
20:25 < jamescarr> tjholowaychuk, yep. I need to generate an ES mapping for the schema once before models are submitted for indexing
20:25 < Qbix1> I have the express module installed with npm install -g express
20:25 < EhevuTov> Qbix1, for the love of all things holy just try the absolute path first
20:25 < Qbix1> it's in there in the lib/node_modules
20:25 < Qbix1> I already did
20:25 < jamescarr> ...
20:25 < EhevuTov> did it work?
20:26 < Qbix1> nope. even tried var express = require('/usr/local/lib/node_modules/express/index.js');
20:26 < Qbix1> oh wait!
20:26 < Qbix1> now it's complaining it can't find express in ANOTHER place
20:26 < Qbix1> so yes it did work
20:26 < EhevuTov> o/\o
20:26 < Qbix1> :)
20:26 < Qbix1> But I still feel like this:
20:26 < Qbix1> ~~~~~~~o/~~~~
20:26 < Qbix1> lol
20:27 < Qbix1> because I want to fix my environment
20:27 < Qbix1> and not hack my framework to use absolute paths
20:27 < EhevuTov> right, you don't want that as a solution
20:27 < Qbix1> well I ran into this problem reliably on two computers
20:27 < EhevuTov> personally, I don't use express globally
20:27 < Qbix1> and node-inspector refuses to install even
20:27 < jamescarr> tjholowaychuk, any preferred ways?
20:27 < Qbix1> I installed it globally and locally - same problem.
20:27 < jamescarr> chapel, only per schema
20:27 < Qbix1> it's a node.js issue
20:27 < jamescarr> basically each schema gets indexed as an index/type in ES
20:28 < EhevuTov> Qbix1, are you having file perm issues?
20:28 < chapel> hmm
20:28 < Qbix1> no, I used sudo
20:28 < chapel> jamescarr: well you could do it on initialize
20:28 < Qbix1> oh, wait.
20:28 < chapel> when the server is spinning up
20:28 < tjholowaychuk> jamescarr i would almost just make it an api that can be wrapped in a script
20:28 < Qbix1> yes.
20:28 < tjholowaychuk> so it's not causing races
20:28 < tjholowaychuk> just $ node scripts/setup-es blah blah
20:28 < tjholowaychuk> some shit like that
20:28 < jamescarr> hmmm
20:29 < jamescarr> tjholowaychuk, it's for this: http://jamescarr.github.com/mongoosastic/
20:29 < Qbix1> http://pastie.org/private/qykbsqgruqawgxddyh5q
20:29 < jamescarr> I'm not sure if there is one right way to do this :(
20:29 < jamescarr> it feels like there will always be a race condition :(
20:29 < chapel> jamescarr
20:30 < Qbix1> looks like the node-inspector installer 
20:30 < Qbix1> does "node install.js"
20:30 < Qbix1> and somehow it's not enough
20:30 < chapel> it only has to be done once period, or once per process?
20:30  * Qbix1 brings out the "sudo bash"
20:30 < EhevuTov> Qbix1, looks like a permissions issue
20:30 < jamescarr> once period, but I want to make it transparent to the user
20:30 < tjholowaychuk> jamescarr i wouldnt bother trying to make it magical
20:30 < EhevuTov> jt2190, was giving us a clue Qbix1 
20:30 < jamescarr> being able to call BookSchema.plugin(mongoosastic)
20:30 < tjholowaychuk> personally
20:30 < chapel> hmm
20:30 < tjholowaychuk> sounds more like a one-time bootstrap thing or a migration thing
20:30 < chapel> jamescarr: yeah I agree with tjholowaychuk
20:31 < jamescarr> tjholowaychuk, this is true...
20:31 < Qbix1> yeah so how can I fix
20:31 < Qbix1> the sudo bash thing didn't work either
20:31 < jamescarr> it is a one time thing
20:31 < chapel> just make it mongoosastic index
20:31 < chapel> or whatever
20:31 < EhevuTov> Qbix1, I think that's an npm question. 
20:31 < Philip___> Hi, if I am new to NodeJS, which viewengine can you recommend? (used to Razor)
20:31 < jamescarr> can't do it...
20:31 < Qbix1> btw is there a chatroom for npm
20:31 < chapel> can't do what?
20:32 < jamescarr> chapel, ES indexes have mappings. Typically they're created dynamically if you don't define them, however...
20:32 < jamescarr> if you need special features, you have to define one yourself.
20:32 < jamescarr> maybe I should just shelve mapping customizations
20:32 < jamescarr> for now
20:32 < EhevuTov> Qbix1, nah, it would be in here. Permissions problems occur a lot. I think there's an option in npm to set perms a certain way, but not sure
20:32 < chapel> jamescarr: yeah, I was saying to make it like that as a cli command
20:32 < jamescarr> it's not as important
20:32 < Qbix1> well I narrowed it down to socket.io
20:32 < Qbix1> not installing
20:32 < jamescarr> in fact, the issue reported is caused by this side effect of creating the mapping
20:32 < chapel> as in ./mongoosastic index
20:33 < Qbix1> and now to "ws" whatever that is
20:33 < Qbix1> > node install.js
20:33 < Qbix1> shell-init: error retrieving current directory: getcwd: cannot access parent directories: Permission denied
20:33 < EhevuTov> Qbix1, how'd you go from having a perm issue, to finding out it was socket.io?
20:33 < Qbix1> because when I looked at the log, where the errors started,
20:33 < Qbix1> the line right before it said,
20:33 < EhevuTov> Qbix1, ah still having a perm issue
20:33 < jamescarr> chapel, ya
20:34 < Qbix1> > ws@0.4.20 install /usr/local/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/socket.io-client/node_modules/ws
20:34 < Qbix1> > node install.js
20:34 < EhevuTov> You might want to completely uninstall global modules and see if the latest npm sets your perms correctly?
20:34 < Qbix1> that's how I knew it must have been the ws module in the socket.io-client module
20:34 < Qbix1> but I am root1
20:34 < Qbix1> I am root!
20:34 < chapel> jamescarr: and you could have a command that handles going through the existing data
20:34 < jamescarr> hmmm... I think I figured it out.
20:34 < EhevuTov> Qbix1, I think 'ws' is the web socket client lib or something?I forget
20:34 < chapel> and indexing it
20:34 < Qbix1> probably yeah
20:34 < Qbix1> the big question is, how can "node install.js" fail
20:34 < Qbix1> I am already running npm as root
20:35 < Qbix1> even though I am not supposed to :P
20:35 < EhevuTov> Qbix1, if you're root, then that's interesting
20:35 < Qbix1> [root@Gregorys-MacBook-Air Calendar]$ npm -v
20:35 < Qbix1> 1.1.33
20:35 < chapel> cause thats what someone like me needs, being that we have a lot of data that would need to be indexed (not hard to write scripts, but if you want to do it I wouldn't complain)
20:35 < jamescarr> chapel, well, I wanted users to be able to decorate mongoose fields in their model to tweek the mapping
20:35 < Qbix1> this is soooo weird
20:35 < chapel> yeah
20:35 < Qbix1> is there any way to clean my system of node and npm
20:35 < Qbix1> and reinstall?
20:35 < chapel> jamescarr: I remember seeing the stuff in the docs
20:35 < jamescarr> like this: name: {type: String, es_boost: 3.0, es_null_value: "Not Provided"}
20:35 < Qbix1> I want to just delete the node dir
20:35 < Qbix1> but maybe there's an uninstaller?
20:35 < jamescarr> currently this works, unless I create a huge batch of models and save em :)
20:36 < chapel> ah
20:36 < chapel> I like that, its a great idea :)
20:36 < Qbix1> node is so userfriendly except for all this
20:36 < chapel> just make it a separate thing
20:36 < chapel> just easier
20:36 < jamescarr> ah
20:36 < chapel> I mean
20:36 < jamescarr> Just make them call a magic method like crateMapping()
20:37 < Qbix1> I installed it, non globally
20:37 < chapel> you could do something on process start
20:37 < Qbix1> as root
20:37 < chapel> that checks
20:37 < chapel> but again, race conditions
20:37 < Qbix1> okay I got it!
20:38 < Qbix1> sec
20:38 < EhevuTov> Qbix1, how'd you fix?
20:38 < Qbix1> woo hoo
20:39 < Qbix1> well, the framework was in another folder entirely from the app
20:39 < Qbix1> so I just installed with npm non-globally in framework folder as well as app folder
20:39 < Qbix1> since node probably didn't look in the folder from which the original script was LAUNCHED but apparently in the parents of the file which was require()ing the express module
20:40 < Qbix1> would be nice if you guys also looked in the parent dirs of the script that was being launched :)
20:40 < tjholowaychuk> localized deps are your friend
20:41 < Qbix1> what u mean
20:42 < EhevuTov> Qbix1, require() defaults to look for your modules in ./node_modules so you won't have to explicitly tell it somewhere else
20:42 < EhevuTov> so it's a good idea to keep track of your modules that way, and preferably with 'package.json'
20:43 < EhevuTov> Qbix1, you're from the 0.4 world, so there's something in npm that allows you to maintain modules with a package.json file that npm reads
20:43 < Qbix1> how can I make require( ) look where node_modules was installed globally though
20:43 < Qbix1> which is /usr/local/lib/node_modules/ ?
20:44 < substack> Qbix1: don't do that
20:45 < EhevuTov> Qbix1, can you load the Node core modules ok?
20:45 < substack> it's in NODE_PATH but pretty sure that's getting deprecated
20:45 < EhevuTov> Qbix1, like, can you do 'var http = require('http');' ok?
20:45 < substack> you should just not use globals
20:45 < tjholowaychuk> NODE_PATH is pretty handy, not when set globally or anything but
20:46 < tjholowaychuk> without that
20:46 < tjholowaychuk> our app would need our private shit in ./node_modules
20:46 < tjholowaychuk> which would kinda suck
20:46 < tjholowaychuk> since npm doesn't install them
20:46 < substack> removing NODE_PATH would be nice
20:46 < Qbix1> now I am able to use node with node-inspector
20:46 < substack> less moving parts to fuck things up
20:46 < Qbix1> so all is right with the internet yay
20:46 < Qbix1> the world is cool :)
20:46 < tjholowaychuk> yeah it's nice in a way but pretty restricting too, we would lose a lot of modularity
20:47 < Qbix1> EhevuTov - yes the core modules are ok
20:47 < substack> how would we lose modularity?
20:47 < Qbix1> only the npm installed modules can't be loaded for some reason, globally
20:47 < EhevuTov> Qbix1, check out: http://nodejs.org/docs/latest/api/modules.html#modules_loading_from_the_global_folders
20:47 < tjholowaychuk> our entire app is regular node modules now in ./lib to differenciate from regular ./node_module deps
20:48 < tjholowaychuk> especially important since npm doesn't really work with private modules
20:48 < tjholowaychuk> if it's a bundled dep it just skips it entirely
20:48 < tjholowaychuk> which is no good
20:48 < tjholowaychuk> plus i dont really want to namespace private stuff in ./node_modules so we can see what is what
20:48 < substack> just check them into git
20:48 < substack> check your node_modules in that are private I mean
20:48 < tjholowaychuk> we're out of private repos on github
20:49 < tjholowaychuk> we would need hundreds
20:49 < tjholowaychuk> not fun
20:49 < EhevuTov> yeah, I'm starting to see that prob with github
20:49 < EhevuTov> a little "gotcha"
20:49 < tjholowaychuk> plus that's just slow
20:50 < substack> then open source them
20:50 < tjholowaychuk> they're all business logic
20:50 < EhevuTov> :-P My company would fire me
20:50 < substack> pfft
20:50 < substack> browserling has like 3 private repos
20:50 < tjholowaychuk> browserling is also tiny
20:50 < substack> yes
20:50 < substack> that is by design
20:50 < Qbix1> aha!
20:50 < tjholowaychuk> our apps are not tiny
20:50 < Qbix1> Gregorys-MacBook-Air:logs greg$ echo $NODE_PATH
20:50 < Qbix1> that's why!
20:50 < Qbix1> thanks guys!
20:50 < substack> well there's your problem
20:51 < Qbix1> we figured everything out
20:51 < substack> tjholowaychuk: don't build big apps
20:51 < EhevuTov> Qbix1, so, it was a path issue? :-)
20:51 < tjholowaychuk> lol
20:51 < Qbix1> hey substack
20:51 < Qbix1> yep it was :)
20:51 < Qbix1> I am newbie :)
20:51 < substack> I even drew a comic about that
20:51 < tjholowaychuk> substack that kinda only works when your app does nothing
20:51 < EhevuTov> Qbix1, I'm a forever n00b
20:51 < Qbix1> woulda thought that installer would set it
20:51 < Qbix1> Gregorys-MacBook-Air:logs greg$ NODE_PATH=/usr/local/lib/node_modules/
20:51 < Qbix1> whee
20:51 < EhevuTov> Qbix1, you should totally check out npm's 'package.json'. You'd love it
20:52 < Qbix1> I will check it out
20:52 < Qbix1> link?
20:52 < substack> http://substack.net/images/do_not_write_big_apps/do_not_write_big_apps_0.png
20:52 < substack> http://substack.net/images/do_not_write_big_apps/do_not_write_big_apps_1.png
20:52 < tjholowaychuk> clueless
20:52 < Qbix1> substack showing off his artistic skillz again :)
20:52 < substack> your app shouldn't try to do too many things
20:53 < tjholowaychuk> that's how you make money my friend
20:53 < tjholowaychuk> doing things
20:53 < Qbix1> substack how big is browserstack ;)
20:53 < tjholowaychuk> stop being ignorant
20:53 < substack> tjholowaychuk: negatory
20:53 < Qbix1> would you consider 200,000 lines of code to be a big app? :D
20:53 < substack> there are lots of ways to make money
20:53 < substack> Qbix1: yes
20:53 < Qbix1> well then we have a big app :)
20:53 < Qbix1> but actually we have a big framework, and small apps
20:53 < tjholowaychuk> big apps can be modular, but we have a lot of logic, which cannot easily be public
20:53 < tjholowaychuk> thus our app is modular but big yes
20:54 < davidmurdoch> Anyone have better documentation on crypto.PBKDF2? http://nodejs.org/docs/v0.8.1/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_callback is a little lacking
20:54 < EhevuTov> Qbix1, http://npmjs.org/doc/json.html and here's an example: https://github.com/EhevuTov/netPeek/blob/master/package.json
20:54 < substack> tjholowaychuk: I've found splitting things up into seperable services can help a lot with that
20:54 < Qbix1> nice, thanks will look :)
20:55 < SuperSonicSound> Hello World!
20:55 < substack> Qbix1: browserling is about 2400 lines itself
20:55 < Qbix1> now I must fix Q to work with the latest node
20:55 < Qbix1> substack: that's a big app :D
20:55 < SuperSonicSound> Should I assume by the lack of topic description that this is a general chat room?
20:55 < substack> split up into about 11 completely seperate services
20:55 < Qbix1> if I were to rewrite our framework, it woudl be completely in Node.js
20:55 < Qbix1> the only thing I ph33r in node.js is out-of-memory exceptions
20:55 < Qbix1> and memory leaks
20:56 < Qbix1> I wouldn't make anything persistent in node.js whose durability I had to rely on
20:56 < Qbix1> neitehr would I in any web server, though
20:56 < substack> Qbix1: oh and plus the front-end code brings it up to about 4800 lines in total
20:57 < substack> and then testling is organized into seperate project spanning 2 services
20:57 < tjholowaychuk> too big lol
20:57 < tjholowaychuk> better make it 10 apps
20:57 < EhevuTov> substack, what software do you use for your drawings?
20:57 < substack> but it's only about 1500 lines
20:58 < substack> EhevuTov: inkscape
20:58 < EhevuTov> no joke?
20:59 < substack> tjholowaychuk: I think browserling has lots lines of code over the past year and gained features
20:59 < substack> s/lots/lost/
21:00 < substack> tens of thousands of lines of open source modules have been released of course
21:00 < substack> that's where all the lines end up
21:01 < tjholowaychuk> everything in our ./lib is specific to our app
21:01 < Qbix1> substack - that's cool
21:01 < Qbix1> we built a unix for the web
21:01 < Qbix1> that's why it's big
21:01 < Qbix1> we call it qbix :)
21:01 < tjholowaychuk> you can't escape the fact that many things are app-specific in "real" apps
21:01 < tjholowaychuk> not tiny things
21:01 < substack> Qbix1: but one of the best things about unix is how small the pieces are
21:02 < Qbix1> substack: but unix taken as a whole is big
21:02 < Qbix1> and the kernel is big
21:02 < tjholowaychuk> unix is a scattered mess
21:02 < substack> tjholowaychuk: services are the best way to encapsulate those kinds of pieces
21:02 < tjholowaychuk> substack: when we have modules why bother? there's no benefit separating auth into a stand-alone app
21:03 < tjholowaychuk> when it's just a module you have as a dep
21:03 < tjholowaychuk> tested stand-alone
21:03 < tjholowaychuk> but still part of the large app as a whole
21:03 < substack> because shared libs are hellish
21:03 < Qbix1> npm is a nice package manager
21:03 < Qbix1> modules are a nice way to distribute work
21:03 < substack> unless they're open source they tend to be really tightly integrated with the app
21:03 < tjholowaychuk> unless you're clustering for perf there's no benefit
21:03 < Qbix1> open source is great
21:03 < substack> there's a massive complexity benefit
21:03 < Qbix1> people should live lives, and groups should create products imho
21:03 < tjholowaychuk> well when you write bigger apps let me know how that goes
21:04 < Qbix1> each module should be maintained by a group
21:04 < substack> you don't have state sharing across massive pieces of the code base
21:04 < substack> tjholowaychuk: it's exactly my contention that you should never write big apps
21:04 < substack> writing big apps is not a thing that you set out to do
21:04 < EhevuTov> I'd think a big app in JS would be messy
21:05 < tjholowaychuk> modularity via an npm module and an http service is effectively the same thing
21:05 < EhevuTov> don't have to deal with namespace problems in an http service
21:05 < tjholowaychuk> namespace problems?
21:05 < substack> services are great and so are npm modules
21:06 < substack> but dumping a bunch of code into the same application is really inflexible
21:06 < tjholowaychuk> if it's written like a rails app yes
21:06 < EhevuTov> say I have a large app that includes similar modules with similar function names. I'd have a namespace problem in JS correct?
21:06 < tjholowaychuk> or structured like unix
21:07 < EhevuTov> for instance, Unix is mostly written in C, which lends to these small programs that pipe to other programs
21:11 < substack> tjholowaychuk: also rhetorical fallacy, had to look that up
21:11 < tjholowaychuk> look what up
21:11 < substack> 21:03:58 < tjholowaychuk> well when you write bigger apps let me know how that goes
21:12 < tjholowaychuk> bigger as in more features
21:12 < tjholowaychuk> not 3 pages and one feature
21:12 < substack> I think you don't understand what I'm arguing for
21:14 < tjholowaychuk> i dont see the difference between open-sourcing something useless that only your app will use, and just having a private module in ./lib
21:14 < EhevuTov> Sounds like substack is saying, create modules/libs when your app gets big and abstract some of that bigness 
21:14 < substack> the difference is that you don't have to keep it in your head and it doesn't end up really specific to how your app works
21:14 < tjholowaychuk> it doesn't have to be coupled if it's private, that's up to the devs to keep in mind of course
21:15 < substack> and it removes the temptation to introduce tight coupling
21:15 < substack> EhevuTov: yes! bigness is bad, I am saying
21:15 < substack> you should take counter-measures to kill the bigness
21:16 < EhevuTov> totally agree, especially with Javascript I'd think
21:16 < substack> code is spent
21:16 < substack> technical debt accumulates
21:17 < EhevuTov> ?and then guys like me can't read code modules substack makes on how to manipulate bits in Node
21:17 < tjholowaychuk> for example adding a dependency of a auth module is really no different than talking to an auth service
21:17 < tjholowaychuk> sure we could take a ~30 line auth module and make it into an http server
21:17 < substack> it's quite different
21:17 < tjholowaychuk> but then you're coupling with http vs a method call
21:17 < tjholowaychuk> who cares
21:17 < tjholowaychuk> and introducing more maintenance
21:18 < substack> when you build services, you only need to worry about what those services are doing
21:18 < tjholowaychuk> by your logic every method in your entire code base should be its own http server
21:19 < tjholowaychuk> why stop there? go even smaller
21:19 < substack> sufficiently big methods, there is some overhead to consider
21:19 < substack> when you build in services, it's much easier to plug in separate pieces
21:20 < substack> because there's not intermediate state that those separate pieces need to set up or api hoops for them to jump through
21:31 < Qbix1> any way to save breakpoints in node inspector across debugs?
21:33 < gkatsev> add debugger; statement in your code?
21:45 < magnusmafn> anyone here read the node guide?
21:46 < RLa> which one?
21:46 < mAritz> magnusmafn: yes. probably. although it might be that you're referring one noe one here has ever read. the chance for that is small though.
21:46 < magnusmafn> al
21:47 < magnusmafn> no, im talking about the node manual
21:47 < mAritz> damnit, i fixed the noe typo and then wrote the damn same mistake again :D
21:47 < mAritz> magnusmafn: i'd think most people here have read most of that, yes. (i assume you mean http://nodejs.org/docs/latest/api/index.html)
21:47 < Qbix1> oh thanks! great idea lol
21:48 < Qbix1> saved me a looooot of time
21:48 < Qbix1> :)
21:48 < Qbix1> I forgot about that
21:48 < Qbix1> debugger; yay
21:48 < gkatsev> Qbix1: np, lol
21:48 < Qbix1> this is really weird
21:48 < mAritz> Qbix1: just don't forget to take it out again before pushing to production :D
21:48 < magnusmafn> maritz
21:48 < Qbix1> express.createServer ( ) seems to just return a function
21:48 < mAritz> magnusmafn: 
21:49 < Qbix1> it used to be that server.address was set
21:49 < Qbix1> but now with latest versions it is not
21:49 < Qbix1> strange
21:49 < magnusmafn> im talkinh about nodemanual.org
21:49 < gkatsev> or just do 'debug && debugger'  and then debug will be true for dev and false for prod
21:49 < gkatsev> or something
21:49 < tjholowaychuk> Qbix1 it's a function you pass to http.createServer() etc
21:49 < tjholowaychuk> Qbix1 http.createServer(express()).listen(3000)
21:49 < Qbix1> oh is that how it works now?
21:50 < Qbix1> http://expressjs.com/guide.html says different
21:50 < tjholowaychuk> it's outdated
21:50 < Qbix1> how come their official guide is outdated? :(
21:50 < tjholowaychuk> i need time to finish up the new site
21:50 < Qbix1> where do I find the docs now
21:50 < Qbix1> oh you are behind express?
21:50 < tjholowaychuk> you can install 2.x
21:50 < tjholowaychuk> if you want that version
21:50 < gkatsev> Qbix1: yes, tj wrote it
21:50 < gkatsev> *created it
21:50 < tjholowaychuk> not sure why npm is installing 3x now i think i messed something up in package.json
21:51 < Qbix1> oh that's awesome
21:51 < Qbix1> your'e a good guy to know :)
21:51 < Qbix1> we use Express a lot
21:51 < Qbix1> well, until I just upgraded node :)
21:52 < Qbix1> what do you eman install 2.x ?
21:52 < Qbix1> ah I see ??? express@3.0.0beta4 
21:52 < tjholowaychuk> you can do { "express": "2.5.11" } in your deps to grab the one that expressjs.com has docs for
21:52 < Qbix1> well let's say I have 3.0 beta
21:52 < Qbix1> is it stable?
21:52 < Qbix1> or is the api going to change
21:52 < tjholowaychuk> yeah i just dont want to 3.0 it until i have the site up
21:52 < Qbix1> can you describe what the new function is supposed to do
21:53 < Qbix1> it's already in npm though for some reason :(
21:53 < Qbix1> I either need docs or a description
21:53 < Qbix1> is there a way to be backward compatible with old one?
21:53 < Qbix1> to me require('express').createServer(); made a lot of sense. It created an httpserver and extended it. Why not keep this?
21:53 < tjholowaychuk> because it was trouble for when you want to support both http and https
21:54 < Qbix1> at the same time with same server?
21:54 < othiym23> Qbix1: the Express docs are generated from the source, and the Express 3 source is pretty readable
21:55 < othiym23> and I think the new way of doing things makes a lot of sense
21:55 < Qbix1> yeah I am going to read it now
21:55 < tjholowaychuk> Qbix1 different servers but in the same process
21:55 < Qbix1> it probably does but I need to know the interface docs now
21:55 < othiym23> it feels a lot like how Go's HTTP library works
21:55 < Qbix1> othiym23: but it should feel more like how Node.js's HTTP library works :(
21:55 < Qbix1> lol
21:55 < Qbix1> I would think.
21:55 < tjholowaychuk> inheriting from node's http protos was a terrible idea
21:55 < EhevuTov> http is not the https thought right?
21:55 < othiym23> Go's "HTTP" library is really more of a full web stack
21:55 < Qbix1> I thought https servers were started with some extra options
21:56 < Qbix1> then again I'm not an expert, but Node.js philosophy seemed quite consistent
21:56 < Qbix1> options, callbacks, err as first parameter. 'error' event special. it was simple.
21:57 < Qbix1> and the ethos wound up in the library. I woudl be very interested to know what would necessitate a design decision that would break node.js conventions
21:57  * Qbix1 goes to read Express.js source code
21:57 < othiym23> Express is very in line with node conventions, still
21:58 < othiym23> it's just decoupled things a little now
21:58 < qubit[01]> npm down ?
21:59 < qubit[01]> weird, web interface works, local client just hagns
22:00 < Qbix1> okay so how do I make a server now
22:00 < Qbix1> and now I might have to make backward compatibility with express 2
22:01 < EhevuTov> Qbix1, it might be easier to work with Express 2 for now?
22:01 < tjholowaychuk> Qbix1 the "app" is just a function that you pass to a server
22:01 < Qbix1> tjholowaychuk - that's great but our apps are relying on .address.host etc
22:01 < tjholowaychuk> Qbix1 also if you jump in #express people may answer in there as well i've gotta get some stuff done
22:01 < tjholowaychuk> yeah
22:01 < Qbix1> they are trying to get at the httpserver
22:01 < tjholowaychuk> reference the server for that
22:01 < Qbix1> ah, #express
22:01 < tjholowaychuk> instead of the app function
22:01 < Qbix1> how do I reference the server for that
22:01 < tjholowaychuk> var server = http.createServer(app)
22:01 < tjholowaychuk> server.address()
22:02 < Qbix1> I did that
22:02 < Qbix1> but server is a function
22:02 < Qbix1> and .address is undefined
22:02 < leev> anyone used matador before?
22:02 < Qbix1> oh, http.createServer?
22:02 < tjholowaychuk> Qbix1 the thing express gives you is just a function
22:02 < tjholowaychuk> which you pass to createServer()
22:03 < Qbix1> I gotcha now
22:03 < Qbix1> yeah that sounds just fine :) thanks!
22:03 < qubit[01]> who is LearnBoost ?
22:04 < qubit[01]> god damnit this is too much crap for a fucking friday
22:04 < Qbix1> UNCAUGHT EXCEPTION: TypeError: Object #<Server> has no method 'use'
22:05 < Qbix1> you deprecated "use" also?
22:05 < Qbix1> basically how do I get at the app now?
22:05 < tjholowaychuk> Qbix1 all of that stuff is still on the "app"
22:06 < othiym23> tjholowaychuk: didn't you have a draft of the Express 3 docs up on your blog at one point?
22:06 < tjholowaychuk> othiym23: yeah they are just markdown though
22:06 < Qbix1> and how do I get at the app
22:06 < tjholowaychuk> generated from source
22:06 < Qbix1> how do I refernece it
22:06 < tjholowaychuk> Qbix1 the thing you just passed to http.createServer() is the app
22:06 < othiym23> I thought so, was just thinking Qbix1 could look at those for now ;)
22:07 < Karmaon> How do pg javascript vs native bindings perform?
22:09 < Qbix1> tjholoaychuk: if it's the app then where are all its methods like "use" ?
22:10 < tjholowaychuk> Qbix1 app.use, same as before
22:10 < tjholowaychuk> var app = express();
22:10 < tjholowaychuk> app.use(...)
22:10 < tjholowaychuk> var server = http.createServer(app)
22:10 < tjholowaychuk> var httpsserver = https.createServer(options, app)
22:10 < Qbix1> aha I gotcha ok
22:10 < Qbix1> sorry, was calling it on the server, got it now
22:10 < Qbix1> so to make it backward compatible what I will do is I will copy all the stuff from the app to the httpserver
22:11 < Qbix1> ok? :P
22:11 < Qbix1> or set its prototype?
22:11 < Qbix1> to be the app? 
22:11  * Qbix1 wonders if httpserver has a prototype
22:11 < Qbix1> I mean __proto__
22:12 < Qbix1> sigh, it does. Server.
22:12 < Qbix1> So I will just copy all the methods to the server douglas-crockford style
22:12 < tjholowaychuk> just pass around the "app" instead of "server"
22:12 < tjholowaychuk> in that case
22:13 < Qbix1> the thing is, in our framework we kinda relied on express 2
22:13 < Qbix1> so we are expecting an httpServer object that has both .use and .address
22:13 < Qbix1> so I would literally have to merge all the stuff into one httpServer object again
22:14 < Qbix1> to stay backwards compatible
22:14 < Qbix1> this is an example of someone who is using your library :P
22:14 < garann> is anyone using everyauth with node 0.8.0?
22:14 < tjholowaychuk> i dont see why you would need .address() everywhere
22:14 < Qbix1> we wouldn't, but the framework's Q.listen is promising to its clients to return something which extends httpServer
22:15 < Qbix1> something that at least acts like an httpServer
22:15 < Qbix1> but also as an express app
22:15 < Qbix1> we never thought you'd decouple it.
22:15 < tjholowaychuk> it's really annoying to have both http and https versions of your app otherwise
22:15 < tjholowaychuk> you can do it but it's not nice
22:16 < Qbix1> but what do you mean, you still need two servers
22:17 < Qbix1> I mean I get what you're saying, but I always thought of each app as a server.
22:17 < Qbix1> If I wanted https to proxy to http I would explictly write that.
22:17 < tjholowaychuk> you dont want to duplicate your express app to run both versions of it
22:18 < Qbix1> I woudn't, I would want to explicitly proxy https to http or vice versa
22:18 < tjholowaychuk> well now you dont have to you can do that in one line
22:18 < Qbix1> I mean, my https might rely on the security provided by https, and the http one wouldn't
22:18 < Qbix1> yes I agree, but a) I never needed it and b) it breaks a buncho f our expectations from express lol
22:18 < Qbix1> oh well...
22:19 < Qbix1> I think of express as middleware, that's the thing.
22:19 < tjholowaychuk> nothing wrong with staying on 2x if that was working for you
22:19 < Qbix1> true.
22:19 < garann> better question: has anyone been able to run the everyauth example app in 0.8.0?
22:19 < Qbix1> I guess what I'm saying is
22:19 < Qbix1> express is MIDDLEware
22:19 < Qbix1> it's not about inheritance
22:19 < Qbix1> it simply routes stuff between your server and your app
22:19 < tjholowaychuk> then why are you advocating inheritence :p
22:19 < Qbix1> the express "app" is really just a bunch of routing
22:19 < tjholowaychuk> that's what express did before
22:19 < tjholowaychuk> it inherited from node's stuf
22:19 < tjholowaychuk> which turned out to suck
22:20 < Qbix1> I'm saying that because the thing that's motivated you to change it, is inheritance
22:20 < Qbix1> now an express "App" is kind of like a base for "your app"
22:20 < Qbix1> before, it was just a bunch of routing and stuff, TO your app
22:20 < EhevuTov> garann, which example?
22:20 < garann> EhevuTov: far as i know there's only one
22:20 < Qbix1> I mean when would I ever want to "re-use" the same exact app object for both https and http?
22:21 < Qbix1> and if I ever did, why can't I write one line of code to do the proxying?
22:21 < Qbix1> that's like having one app for ftp and http.
22:21 < garann> EhevuTov: if you clone the repo, everyauth/example/server.js
22:21 < Qbix1> imho.
22:21 < tjholowaychuk> not really but sure
22:21 < Qbix1> or like having one app for IRC and HTTP
22:22 < Qbix1> well, anyway, whoever hasn't used express 2 won't have this problem.
22:22 < Qbix1> it's only those who do, so nevermind. it's just the backward compatibility that's the problem now :(
22:22 < Qbix1> and I will solve it by merging them in our framework.
22:22 < Qbix1> can you see any problems w/that?
22:22 < Qbix1> as the creator of express?
22:23 < tjholowaychuk> nope, do whatever works for you
22:23 < Qbix1> okay, just as long as it doesn't conflict with any expectations in express itself inside
22:23 < Qbix1> what does express expect the app to be? a function?
22:24 < Qbix1> one last question ? how come when I do for (k in app) it doesn't do anything
22:24 < Qbix1> "use" etc. are not enumerable properties ?
22:28 < Qbix1> woo hoo I could do Object.keys(server)
22:28 < Qbix1> DONE !
22:28 < Qbix1> Thanks :)
22:41 <@Nexxy> SomeoneWeird, just got your hilight... looks like everyone made it through :P
22:41 <@Nexxy> SomeoneWeird, I'm pretty sure it wasn't intentional anyway
22:45 < Qbix1> hey how do I install express 
22:45 < Qbix1> 2
22:45 < Qbix1> I give up with 3 for now
22:46 < othiym23> npm install express@2.5.4
22:46 < Qbix1> thanks
22:46 < othiym23> np
22:54 < s5fs> Nexxy: hai!
22:55 < xaq> Hey guys, I've got a question. Been looking at this a long time and I cant figure out why this is as it is. Can any smart folk explain: http://hastebin.com/hobuweyado.1c
22:55 < xaq> actually: http://hastebin.com/wogesusaxo.coffee  (had a missing ")
22:55 < xaq> same issue though
22:59 < othiym23> xaq: there's a hint if you look at Car.prototype vs Truck.prototype
22:59 < othiym23> the object initializer has more to do once the prototype has been specialized
23:01 < styol> Do EventEmitters need to be defined in a separate script/module and require'd by a script in order to work properly or can events be emitted from the same script trying to listen for those events?
23:02 < othiym23> styol: the latter
23:02 < othiym23> EventEmitter's a pretty simple class
23:02 < styol> othiym23: for some reason I could not get it working unless it was in a separate script, surely my bad.
23:09 < styol> othiym23: thank you for the confirmation btw
23:10 < dsirijus> so, how about these 'not found' modules
23:10 < othiym23> styol: np!
23:11 < dsirijus> should 'npm install http-proxy' work?
23:11 < dsirijus> since i'm getting cannot find module
23:12 < tjholowaychuk> dsirijus did you clear your npm cache?
23:12 < tjholowaychuk> maybe it got caught up on something
23:12 < dsirijus> tjholowaychuk how do i do that?
23:12 < othiym23> dsirijus: installed for me with no problem under 0.8.0
23:13 < tjholowaychuk> $ npm cache clear i think
23:13 < othiym23> yeah, 'npm cache clear'
23:14 < dsirijus> no, still same
23:14 < dsirijus> echo $NODE_PATH shows empty line though
23:14 < othiym23> dsirijus: for me as well
23:14 < othiym23> are you using nvm / nave / n?
23:14 < dsirijus> don't even know what is that
23:15 < dsirijus> it's a clean install, i just installed node, npm via apt-get and express and http-proxy and some winterwindsomething via npm
23:15 < styol> othiym23: any chance you know of a link to a basic example? im affraid the 6.0 documentation isn't helping me understand how to properly emit an event and the example i have been working with seems to require being in a separate module with module.exports http://pastie.org/4174122
23:16 < xaq> othiym23: I'm thinking now that it's because when you create a function, it's prototype property gets set to an object that has a constructor property
23:17 < othiym23> styol: I'd use util.extends instead of trying to do all that by hand
23:17 < xaq> however, when you override that object with a {}, it destroys the constructor property, meaning that future instances have to look further up the prototype chain
23:17 < xaq> (i.e. to Object.prototype)
23:17 < othiym23> also, where's your 'index_load' listener registered?
23:18 < othiym23> xaq: when you set the prototype, it uses the Object initializer, because it needs to make sure that the properties get copied from the prototype to new instances, on top of allocating the new object
23:18 < Raynos> Configuration
23:18 < xaq> and the object initializer doesn't include a property for constructor
23:18 < Raynos> what are strategies on configuring servers into dev / test / production environment
23:19 < xaq> othiym23: whereas the function initializer does include one when it sets the prototype property of the function (object)
23:19 < othiym23> xaq: yeah, there's a section of the ECMAScript standard that describes initializer behavior
23:20 < dsirijus> oh, so npm install something installs where you are, and npm install something -g installs globally
23:20 < dsirijus> check
23:20 < xaq> othiym23: gotcha, thanks for your help
23:21 < othiym23> xaq: http://es5.github.com/#x13.2
23:21 < othiym23> xaq: also http://es5.github.com/#x15.2 (13.2 is more background)
23:21 < styol> othiym23: ah, I did see an example with util.. will try that. Presently the listener is in a separate module where I'm able to .emit and receive the event. I should try the util approach first before asking further questions. Thanks again
23:22 < EhevuTov> dsirijus, you should have a dir return from 'echo $NODE_PATH'
23:23 < othiym23> styol: the only caveat to using util.extend is that you need to include EventEmitter.call(this) in the class you're creating to be an event emitter
23:23 < othiym23> JavaScript not having a super() and all
23:24 < dsirijus> what rights to give to my user to run node servers?
23:24 < dsirijus> EhevuTov, and where do i create that path?
23:25 < EhevuTov> dsirijus, ability to bind to ports
23:25 < EhevuTov> dsirijus, this is mine:
23:25 < EhevuTov> new-host-2:temp james$ echo $NODE_PATH
23:25 < EhevuTov> /usr/local/lib/node_modules
23:26 < styol> othiym23: ah ok, I almost understand but I remain mystified at the moment and won't continue to waste your time :) I may ping you when I'm less confused if that's ok
23:26 < dsirijus> EhevuTov, any way to get that variable global instead of pushing it to .bashrc?
23:26 < EhevuTov> dsirijus, permissions are usually based on what kernel and hardware resource calls you might be accessing
23:26 < othiym23> styol: if I'm around, I'm happy to help
23:27 < EhevuTov> dsirijus, that is an OS issue, but it's usually set when node or npm is installed I think
23:27 < styol> othiym23: very much appreciated
23:27 < EhevuTov> dsirijus, mine is set in my ~/.profile
23:28 < shiftpgdn> Is there a best practice for folder in linux to run node.js out of?
23:28 < shiftpgdn> I've got it running out of /home right now
23:29 < EhevuTov> shiftpgdn, best practice is usually to install it from the default package manager of your linux distro
23:30 < augustl> is there a sandboxed fs module out there? Identical API to the core "fs" module, but able to white list or black list paths.
23:30 < shiftpgdn> Sorry I mean the applications that get written
23:31 < augustl> obviously not useful on its own, but combined with a VM sandbox it would be very useful
23:31 < augustl> if it doesn't eixst I'll write one ;)
23:31 < dsirijus> why is here x-forwarded-port some gibberish? http://37.188.113.58/
23:33 < dsirijus> now it increased by one
23:34 < EhevuTov> dsirijus, looks like connection info from your proxy server in JSON format
23:36 < dsirijus> ok, final question for tonight...
23:36 < dsirijus> http://pastie.org/4174199
23:36 < dsirijus> 8000 here should be 80 and 8001 443, right?
23:39 <@Nexxy> s5fs, o hai
23:39 < s5fs> Nexxy: of course, just as i'm about to leave, haha! good seeing you the other night tho, good hang! i has kids this weekend, with luck you will too haha!
23:41 <@Nexxy> lol yeah :D sorry I had to leave so suddenly... we'll see!
23:46 < dmilith> anyone tried compiling node 0.8.1 on FreeBSD?
23:48 < dmilith> what version of python works for new gyp thing?
23:49 < TooTallNate> dmilith: ~2.6
23:49 < TooTallNate> dmilith: not compatible with 3
23:50 < xocel> dmilith, nope compiling on slack as we speak tho
23:50 < dmilith> I have 2.7.2 here
23:51 < bnoordhuis> dmilith: 2.7 is fine
23:51 < dmilith> https://gist.github.com/3021483
23:51 < bnoordhuis> dmilith: newer freebsds are kind of broken though :)
23:51 < dmilith> broken?
23:51 < bnoordhuis> well, the build script is
23:51 < dsirijus> whato to add to this so i get http requests also proxied to the same server? http://pastie.org/4174257
23:51 < bnoordhuis> it'll be fixed in 0.8.2
23:52 < bnoordhuis> dmilith: you're on freebsd 9 or 10, i presume?
23:52 < dmilith> 9
23:52 < dmilith> stable 9.0
23:52 < dsirijus> i.e. so that http://37.188.113.58/ returns the same thing as https://37.188.113.58/
23:52 < bnoordhuis> right. that's not detected correctly right now
23:52 < bnoordhuis> dmilith: but check out this pr -> https://github.com/joyent/node/pull/3589
23:53 < Qbix1> hey guys
23:53 < Qbix1> question - how do I quantize lat/long coordinates so there are no more than 10,000 possible?
23:54 < EhevuTov> dmilith, I have fBSD 9.0
23:54 < dmilith> EhevuTov: good for You!
23:54 < EhevuTov> dmilith, lol trying to get 0.8.1 to compile?
23:54 < dmilith> EhevuTov: yea
23:55 < dmilith> any bad experiences ;]?
23:57 < EhevuTov> dmilith, I wait until it's on the port system before I install. I haven't tried 0.8 manually, yet. I'm assuming if you're having an issue, that's why the port also isn't updated yet to 0.8
23:57 < dsirijus> oh, c'mon guys, last question, and i'm off to bed after 50+ wake hours
23:57 < dsirijus> i beg you :)
--- Log closed Sat Jun 30 00:00:01 2012
