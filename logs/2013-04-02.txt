--- Log opened Tue Apr 02 00:00:04 2013
00:30 < acidjazz> shesek: let me give you an example
00:32 < acidjazz> shesek: http://pastebin.com/Ys4werdH i only want the boolean to effect the .thumbnail line, not the img().. i wang there to be an img() no matter what
00:36 < ChrisPartridge> acidjazz: can't you just tab back the img so it's in line with the if/else blocks, and not "below" it?
00:39 < acidjazz> ChrisPartridge: that doesnt place hte img() inside the div
00:40 < Stephen> White space is a non-citizen in groups
00:41 < acidjazz> its like jade never thougth about if there was going to be code under an if else afterwords?
00:42 < Stephen> Well, does jade do anything funny with if/else braces?
00:42 < Stephen> I find some libraries assume else never uses braces
00:43 < ningu> acidjazz: .thumbnail(class=admin == true ? 'admin' : null)
00:44 < acidjazz> Stephen: there are no braces
00:44 < acidjazz> ningu: yea i tried that earlier and it worked.. but my question isnt just for a quick solution.. i run into this issue a lot and i want to learn the right way
00:45 < Stephen> that line reads "set class to 'admin' or null
00:45 < Stephen> shouldnt class be '' or undefined?
00:45 < ningu> Stephen: when it's null jade ignores it
00:45 < acidjazz> no cuz the class name is admin
00:45 < acidjazz> still it doenst adress the issue of jade and if statements
00:45 < ningu> acidjazz: anyway there is no way to do what you're talking about in jade to my knowledge
00:46 < Stephen> is this specifically with inline conditionals? ( ? : )
00:46 < ningu> Stephen: it has nothing to do with that
00:46 < Stephen> ok
00:46 < ningu> when you set an attribute value to null jade doesn't render it
00:48 < Stephen> Makes sense
00:48  * Stephen took a quick peek at jade's conditional  syntax
00:49 < Stephen> It appears it's fairly flexible
00:50 < acidjazz> ningu: interesting.. so when using an if/else in jade you have to prepare that everything then on inside that div is going to be included w/t he condition?
00:51 < Stephen> That would save performance on the engine
00:51 < ningu> yes
00:51 < Stephen> creating dynamic scopes when parsing a template could get crazy
00:51 < ningu> and in my experience if you properly design your html layout that's just fine
00:52 < Stephen> Yeah
00:54 < acidjazz> ningu: thats too broad of a scenario to write it off w/ 'proper design'
00:54 < Stephen> If you are doing logic inside those conditionals, I would encourage you to at /least/ write a class that holds the various functions so you trim down the text in the templates to a simple MyFuncs.GetName() or something
00:55 < Stephen> I would think it comes more from a place that the engine is very obviously using a type of eval() in those spots. One would prefer to keep the attack surface small
00:56 < acidjazz> its a trade off.. jade uses nesting to define children/parents.. where as in code nesting is used to seperate functionality
00:56 < acidjazz> when you mix the two you run into things like this
00:56 < Stephen> Yup
00:57 < Stephen> Templating systems cant be expected to completely re-implement javascript
00:57 < acidjazz> coincidentally i solved my problem w/ mixins
00:57 < Stephen> yup
00:57 < ljharb> or you could just write html
00:57 < ljharb> â€¦ just a thought
00:58 < faceleg|work> all I want to do is resize an iframe I don't control when its content changes
00:58 < Stephen> I suggest writing every dynamic value into current stylesheet as calc() properties
00:58 < acidjazz> https://gist.github.com/acidjazz/5289104
00:58 < faceleg|work> there is a robot on mars that humans put there
00:58 < faceleg|work> yet I cannot do this
00:58 < ljharb> faceleg: nope, you can't.
00:58 < Stephen> faceleg|work: Not cross domain
00:58 < Stephen> However, there is one way
00:59 < Stephen> But it depends on you being able to add a small piece of content to the framed content
00:59 < Stephen> do you have that access?
00:59 < acidjazz> faceleg|work: its a security issue 
00:59 < faceleg|work> no
01:00 < faceleg|work> acidjazz: yes I know
01:00 < faceleg|work> Stephen: no I have no access
01:00 < faceleg|work> I know why I can't do it
01:00 < faceleg|work> but resizing my iframe based on the content doesn't strike me as a dangerous thing 
01:00 < faceleg|work> :P
01:00 < acidjazz> think about it
01:00 < acidjazz> if i allow you a 100px by 100px iframe on my site for you to show your banner
01:01 < acidjazz> and then the shady mcshadyertown that you are is like no f you
01:01 < acidjazz> resize 100000px 100000px
01:01 < faceleg|work> pfff
01:01 < faceleg|work> as if I can't do that anyway
01:01 < faceleg|work> with css
01:01 < acidjazz> you cant
01:01 < faceleg|work> or even on the iframe embed
01:01 < acidjazz> you have no access to my dom
01:01 < faceleg|work> I can't resize the iframe element?
01:01 < faceleg|work> excuse me but I can
01:01 < Stephen> faceleg|work: you just can't get info about the contained document
01:01 < faceleg|work> <iframe style="height:one million miles" />
01:02 < faceleg|work> acidjazz: this is what I'm talking about
01:02 < faceleg|work> Stephen: yes I know I'm just moaning
01:02 < Stephen> faceleg|work: Checking on the state of the scrollbars /might/ be a vector that works
01:02 < Stephen> scrollbars are technically window level, right?
01:02 < faceleg|work> hmmm
01:02 < Stephen> checking if the frame is scrollable
01:02 < acidjazz> i thinkt thats an individual browser thing
01:02 < faceleg|work> HMMMM
01:03 < acidjazz> w/ overflow/etc
01:03 < acidjazz> look for offset
01:03 < Stephen> scrollX/scrollY are doubtful
01:03 < Stephen> if scrollable doesn't work
01:04 < Stephen> you might change the overflow property and check the innerWidth and innerHeight for changes between the two
01:05 < Stephen> Scrollbars tend to cause a slight shift in windows  size
01:05 < Stephen> It's possible the frame itself could grow slightly
01:05 < faceleg|work> scrolling = ''
01:05 < Stephen> Are there scrollbars right now?
01:05 < acidjazz> whats this about growing slightly
01:06 < faceleg|work> yes there are scrollbars
01:06 < Stephen> It's a behavior of shitty rendering engines
01:06 < Stephen> faceleg: What do you get for window.scrollHeight
01:06 < Stephen> er
01:06 < Stephen> iframeObject.scrollHeight
01:07 < faceleg|work> 150
01:07 < faceleg|work> which is the height of the iframe element
01:08 < Stephen> ok, and what is iframeObject.document.documentElement.height?
01:08 < Stephen> or
01:08 < Stephen> ok, and what is iframeObject.document.documentElement.style.height?
01:08 < ningu> does anyone know if JSON.parse() will be slightly more efficient with a Buffer that I haven't called .toString() on if it that's just pointless?
01:09 < faceleg|work> ir.doc = undef
01:09 < faceleg|work> ningu: do testing
01:09 < faceleg|work> ningu: report back :P
01:09 < ningu> hehe
01:09 < Stephen> iframeObject.documentElement
01:09 < Stephen> what is that?
01:09 < faceleg|work> undef
01:09 < Stephen> ningu: Most toString() methods aren't doing anything fancy enough to retain memory out of scoper
01:10 < Stephen> So I can't see why it would matter
01:10 < Stephen> ok, so
01:11 < Stephen> faceleg|work: do this
01:11 < Stephen> iframeObj.style.height = auto
01:11 < Stephen> er
01:11 < Stephen> iframeObj.style.height = 'auto'
01:11 < Stephen> then check scrollHeight
01:11 < faceleg|work> 150, same as before
01:12 < Stephen> iframeObj.body.scrollHeight
01:15 < Stephen> Hmm
01:15 < Stephen> Get in your JS console and poke around the iframe documentElement & contentWindow properties
01:15 < Stephen> might be something usefull there
01:17 < owen1> anyone know where to get a link to the live streaming event of the geeklist meetup
01:17 < owen1> ?
01:17 < owen1> "... will tweet out the link to watch via @GKLST twitter handle"
01:17 < owen1> what does it mean?
01:17 < Stephen> faceleg|work: http://www.webdeveloper.com/forum/showthread.php?244793-iframe-auto-height-resizer-based-on-its-content
01:17 < drojas_> I need a DOM implementation in node. I know about jsdom but it's not complete at this time. Does anybody knows if there is any node.js wrapper around WebCore's DOM (webkit/chrome's DOM implementation) out there?
01:18 < ljharb> i think phantomjs or jsdom are your only options
01:18 < ljharb> why do you need a dom implementation?
01:18 < faceleg|work> dammit!
01:19 < drojas_> ljharb: I need to traverse a lot of web pages
01:19 < faceleg|work> ljharb: so he can make a revolutionary new templating system based on jquery
01:19 < ljharb> ah, scraping. do you possibly have a legitimate use case? i'm betting not.
01:19 < Stephen> drojas_: are you scraping or parsing?
01:19 < aMoniker_> drojas_: use phantom - you'll run into fewer issues (w/ cookies, redirects, etc.), and site will think that phantom is just a normal browser
01:20 < Stephen> Hey, I've got a completely legit use for it every day
01:20 < aMoniker_> scraping is legitimate
01:20 < drojas_> Stephen: what's the difference between parsing and scraping?
01:20 < ljharb> lol
01:20 < ljharb> it's so rarely even legal.
01:20 < Stephen> parsing means converting the whole of the content to a different format
01:20 < Stephen> scraping is grabbing pieces
01:21 < drojas_> then scraping
01:21 < Stephen> ljharb: That is 100% inaccurate
01:21 < ljharb> if a site has a TOS, it probably says something about scraping, and you're violating the TOS.
01:21 < aMoniker_> ljharb: don't scrape the TOS
01:21 < Stephen> drojas_: Is your scraping based on the text content, or usually based on things like element ids?
01:21 < ljharb> it's automatic if you use the site.
01:21 < Stephen> ljharb: Ever bookmark a site?
01:21 < aMoniker_> ljharb: if a site offers html in response to a request, you can scrape it
01:22 < aMoniker_> ljharb: what matters is how you use the content
01:22 < ljharb> also, aaron swartz was being federally prosecuted for doing just that, scraping. not justifying that case, but, you can be prosecuted for it.
01:22 < aMoniker_> ljharb: incorrect
01:22 < Stephen> ljharb: Get a little summary, or have it pull the title?
01:22 < ljharb> aMoniker_: and also the speed, frequency, and volume.
01:22 < drojas_> I just need a dom implementation but jsdom does not have DOM level 2 Traversals, for instance
01:22 < aMoniker_> drojas_: phantom - it's webkit.
01:22 < Stephen> drojas_: You might be better off with a jquery implentation
01:23 < Stephen> their selector engine can do some amazing stuff
01:23 < tdignan> it's not illegal to scrape, necessarily. that depends 100% on where the client is located.
01:23 < aMoniker_> I scrape every site I visit with my eyes.
01:23 < Stephen> ljharb: Arron Swartz was being prosecuted for mass-copying documents freely available to guests while jacked into the network in a questionable manner
01:24 < drojas_> Stephen It's based on text and some media elements. But I need to avoid jquery, I need to use plain DOM
01:24 < Stephen> And because the federal prosecutor wanted to make an example of him
01:24 < Stephen> drojas_: fair enough
01:24 < Stephen> drojas_: And, never count out regex
01:25 < ljharb> Stephen: mass-copying, yes. ie, scraping quickly at volume
01:25 < drojas_> Stephen: and since I only need the DOM implementation, phantomjs sounds too much or not?
01:25 < owen1> what does that mean? "... will tweet out the link to watch via @GKLST twitter handle" do i need to hit refresh on the twitter page until the link shows up?
01:25 < Stephen> scraping is grabbing significant pieces of data out of a dataset classically meant for human eyes to read
01:26 < Stephen> phantom is awesome
01:26 < Stephen> go for it
01:26 < drojas_> that's why I was wondering how difficult is to wrap webcore (webkit c++ DOM implementation) as a node module
01:26 < Stephen> owen1: Or you can use a twitter client that notifies you
01:27 < Stephen> drojas_:  node is v8 at it's core
01:27 < Stephen> drojas_: You /might/ find a way to add it with a build argument
01:27 < owen1> Stephen: notifies me about what? i link to the video? 
01:27 < owen1> i/a
01:28 < Stephen> owen1: Twitter client give you real time updates when someone tweets. So, you simply follow your friend there, and as soon as he tweets it, you get notified
01:28 < owen1> what is the difference between # and @ on twitter? is @ means a location?
01:28 < Stephen> @ is a user
01:28 < Stephen> # is a tag
01:28 < Stephen> owen1: Are you trolling?
01:28 < owen1> so @gklst is the user. thanks
01:28 < owen1> no
01:28 < owen1> not using twitter
01:29 < Stephen> http://twitter.com/owen1
01:29 < Stephen> that should take care of you
01:29 < Stephen> http://twitter.com/gkist
01:29 < Stephen> http://twitter.com/gklst
01:30 < owen1> yeah. so there is a meetup that will be streamed live. and i need to wait until they tweeet the url. that's annoying
01:30 < owen1> Stephen: thanks
01:31 < Stephen> http://www.meetup.com/Geeklist-San-Francisco-Meetup-Series/events/110490112/
01:32 < drojas_> by the way... I think you were talking about some template engine based on jQuery earlier.. what's that?
01:33 < Stephen> we were talking about jade
01:33 < Stephen> no jquery involved
01:36 < combataircraft> hi all
01:36 < combataircraft> may I ask, what is the difference between promises (futures) and function composition?
01:37 < combataircraft> function composition; https://npmjs.org/package/comp
01:38 < Stephen> Function Composition in JS is all about reducing arguments
01:38 < ljharb> promises return a value in the future. composed functions just have some of their arguments pre-attached.
01:38 < owen1> anyone knows of a good text-based twitter client?
01:39 < ljharb> your cellphone
01:39 < drojas_> owen1 do you mean cli-based?
01:40 < owen1> drojas_: yes
01:40 < Stephen> where did combataircraft off to?
01:40 < shesek> combataircraft, a better question would be what they have in common
01:41 < drojas_> owen1 http://mike.verdone.ca/twitter/
01:41 < Stephen> combataircraft: promises also come with a feature that causes them to always return the same thing even when resolved multiple times
01:41 < owen1> drojas_: thanks!
01:41 < drojas_> owen1 just googled cli twitter ;)
01:59 < dorner> hi, anyone have any idea why node-gyp isn't applying my "linkflags" : [ "-lpcap" ] , in binding.gyp? im doing a node-gyp clean configure build.. everything builds but it's not applying the -lpcap link flags during the compile, so i'm getting unresolved symbol errors when i run my node prog
01:59 < owen1> Stephen: where is the link? i am really pissed
02:00 < owen1> help guys! dshaw is about to talk live about node and i don't know where to get the link to the live video. https://twitter.com/gklst
02:00 <@TooTallNate> dorner: it's "libraries", not "linkflags"
02:02 < dorner> TooTallNate: worked, thanks alot, btw your git is gr8
02:02 < dorner> 8|
02:02 <@TooTallNate> my git?
02:04 < mscdex> heh
02:04 < mscdex> he's in your git reading your commits!
02:05 < NodeNewb> I know this is a silly question, but must I always use callbacks in db queries? I just want to pass a bunch of table counts to a function, but with callbacks, I have to nest each query...
02:07 < NodeNewb> db.collection.count() does return an object, but I don't want to break any async rules
02:07 < ningu> NodeNewb: yes, because that is how node implements concurrency. if you block while waiting for the requests, your app will not be doing anything else in the meantime
02:07 < dorner> usually if you sit there and draw it out, you can reducse alot of those nested callbacks
02:07 < Zolmeister1> Thats what promises are for
02:07 < dorner> into something cleaner
02:07 < NodeNewb> ningu ok, just needed to validate what I was doing is correct...it just looks ugly to me
02:08 < wookiehangover> so is it an anti-pattern to set process.env.NODE_ENV to something specific when you're running tests?
02:08 < ningu> NodeNewb: use the async module if necessary
02:08 < ningu> wookiehangover: don't think so
02:08 < wookiehangover> ningu: I was actually kinda surprised when it let me
02:09 < Zolmeister1> wookiehangover: I wouldnt say its an anti-pattern, but why do it? just export the variable in your terminal
02:09 < Zolmeister1> thats also what the 'development' env is for
02:09 < wookiehangover> Zolmeister1: so I don't have to remember to do it every time I run my tests
02:10 < wookiehangover> Zolmeister1: but I don't want noisy logging in my tests
02:10 < wookiehangover> but I do in dev
02:10 < Zolmeister1> oh, I see, ok I thought you were doing something else
02:10 < wookiehangover> no, process.env.NODE_ENV = "test"
02:10 < wookiehangover> a la Rails
02:11 < wookiehangover> I guess I could just set it as part of `npm test`
02:14 < sshaginyan> Guys I just installed nginx. I'm comparing nginx vs not using nginx and there is a huge speed difference. With nginx I get almost 10 times slower results then without nginx. All I'm doing is fs.readFile a 2 mb json file. I'm using node.js. Here is my config http://hastebin.com/fobosafixi.nginx
02:14 < sshaginyan> I've been playing with limit_rate + limit_rate_after + client_body_buffer_size
02:14 < sshaginyan> But still can't get a decent speed
02:15 < sshaginyan> Here is the server.js code http://hastebin.com/kocoguxevi.coffee
02:15 < Aria> limit_rate sounds like the opposite of what you want.
02:17 < Zolmeister1> sshaginyan: why do you have root and index variables set?
02:17 < sshaginyan>  Zolmeister1 let me see
02:18 < sshaginyan> Zolmeister1: It was there by default
02:18 < sshaginyan> Zolmeister1: Do you want to to comment them out?
02:18 < Zolmeister1> yeah, try that
02:18 < Zolmeister1> also drop the 50x error page stuff (for now)
02:18 < sshaginyan> k
02:18 < sshaginyan> k
02:19 < ningu> sshaginyan: coincidentally I was just writing some rate limiting code for redis...
02:19 < sshaginyan> ningu: very hot
02:20 < ningu> you want to see?
02:20 < sshaginyan> oh, do I!
02:20 < sshaginyan> yes
02:21 < ningu> https://gist.github.com/kamholz/70d869368a13883a40a1
02:22 < ningu> some code stolen from node-rate-limiter
02:22 < sshaginyan> Zolmeister1: Any other suggestions? Does anyone else have this problem?
02:22 < Zolmeister1> how are you testing it?
02:23 < sshaginyan> Zolmeister1: A simple request from the server using NginX and then NginX off.
02:23 < sshaginyan> so purlly in node.js
02:23 < sshaginyan> Zolmeister1: It's a 2 mb json file
02:24 < Zolmeister1> use 'ab' (man ab - linux)
02:24 < sshaginyan> Zolmeister1: I've trust me it's slow
02:24 < ningu> A/B testing not to be confused with ab testing
02:24 < sshaginyan> it's like 50X slower
02:25 < Zolmeister1> hmm... try getting rid of the keepalive and max body size inside the server config
02:26 < johny_> hi there
02:27 < ningu> keepalive makes it slow?
02:27 < johny_> I'd love to get some help with a group chat development project
02:27 < johny_> is there anyone that can offer assistance?
02:27 < Zolmeister1> hes declaring it in http scope and also in the specific server scope (with less keepalive in the server scope)
02:28 < Zolmeister1> johny_: sure, whats the problem?
02:28 < ningu> Zolmeister1: ahh I see. I thought you meant in general keepalive would slow things down
02:28 < combataircraft> @Stephen @ljharb have you guys checked out the example on my link? 
02:29 < combataircraft> I think you guys confuse partial programming with function composition
02:29 < sshaginyan> Zolmeister1: It still takes 3 seconds vs 20 ms
02:30 < Zolmeister1> 3 seconds for a json file?
02:30 < johny_> sorry if this is a bit of a 'beginner' q..... we are developing a site in php Yii framework which is a membership site. Within the membership site we have 'member groups' and are looking to offer these member groups the ability to chat with each other in the specific groups. We're looking for an option that is light on resources and can tie into our existing database. Do you think that node.js would be a good option for us?
02:30 < sshaginyan> Zolmeister1: Yes
02:30 < ljharb> combataircraft: you're right, i did confuse it. but it's still very different than promises
02:31 < combataircraft> what is different?
02:31 < sshaginyan> In nginx + node.js it takes 3 seconds in just node.js it's like 20ms
02:31 < sshaginyan> I can't believe no one
02:31 < sshaginyan> 's encountered this problem
02:31 < johny_> I have looked at a number of 'off the shelf' options however they don't seem to meet our needs or offer FAR too many options...
02:31 < Zolmeister1> how big is the file?
02:31 < sshaginyan> 3 mbs
02:32 < sshaginyan> 3 mb
02:32 < Zolmeister1> something is horribly wrong, but I dont think its in your config
02:32 < sshaginyan> Zolmeister1: Do you want to see my server code?
02:33 < Zolmeister1> johny_: node.js is great for group chat, and with socket.io you could probably get it up and running (in prod) within a week
02:33 < Zolmeister1> sshaginyan: this code?: http://hastebin.com/kocoguxevi.coffee
02:33 < sshaginyan> yes
02:33 < sshaginyan> Zolmeister1: yes
02:34 < Zolmeister1> sshaginyan: let me run it locally and see if I can reproduce it (though I highly doubt it)
02:34 < johny_> Zolmeister1: can you recommend any good resources for developers to assist with our group chat needs with regards to node.js..?
02:34 < sshaginyan> Zolmeister1: k
02:34 < ningu> johny_: he already did!
02:34 < sshaginyan> Zolmeister1: Would you like me to give you an ip?
02:34 < Zolmeister1> sure
02:34 < sshaginyan> one sec
02:37 < lorddelta> Socket.IO is really a godsend, I remember working halfway through an independent implementation of websockets and then learning about Socket.IO... >_>
02:37 < lorddelta> s/websockets/websockets messaging layer/
02:38 < ningu> I recently have been experimenting with shoe and dnode
02:38 < johny_> ningu: well we will be looking for a developer to assist with development of the project.  ie: I am NOT a developer myself and my team doesn't have any experience with this.  So that's what I was asking....
02:39 < Zolmeister1> johny_: it sounds like you should either hire a node developer (contract work), or asak a dev to look into node.js and socket.io, if run into any specific issues we will be happy to help
02:41 < johny_> Zolmeister1: thank you for your assistance. Are there any specific places you would suggest I search for a Node developer? or just check the normal freelance sites?
02:43 < myndzi> hey, are there any best practices for tearing down an object?
02:43 < Zolmeister1> johny_: well, since you're here I guess I could go ahead and offer you my services (or ask if anyone would be interested in working on your project). Otherwise yes, check out the normal freelance sites.
02:44 < howdynihao> johny_ you know there are probably php websocket libraries?
02:44 < ChrisPartridge> myndzi: just make sure there are no references to it, and GC should take care of it
02:44 < myndzi> doesn't matter if it has references to everything else though right?
02:44 < myndzi> (just looking for confirmation ;)
02:44 < howdynihao> johny_ so your team could just implement what you want in php
02:47 < johny_> Zolmeister1: if you were interesting in assisting with developments, what would be the best way to contact you...? and is this also true...  'you know there are probably php websocket libraries?'  (as I mentioned before please note that I'm not a developer - I'm a marketer overseeing the development of our site)  thanks
02:47 < ningu> your php developers should certainly be able to determine whether there are satisfactory php libraries
02:48 < howdynihao> there are, i mean its php
02:48 < Zolmeister1> johny_: I don't know much about PHP, I agree with ningu that you should talk to your devs
02:49 < johny_> Zolmeister1: okay thanks again. 
02:50 < ningu> marketing overload: http://www.realtime.co/
02:51 < ningu> I cracked up at "The Live Webb"
02:55 < ningu> "Learn and understand how everything works on the background." that isn't even english. sigh.
02:55 < faceleg|work> howdynihao: wtf are you advocating PHP now?
02:55 < ningu> faceleg|work: I prefer to pronounce it fffffffpppppppppp
02:56 < faceleg|work> lolwt
02:56 < faceleg|work> I <3 their incrementing numbers
02:56 < faceleg|work> bring your companyâ€™s skill set to the world of Web 3.0.
02:57 < ChrisPartridge> ningu: i wonder if those counters are real :P
02:57 < faceleg|work> so they've businified socket.io?
02:57 < faceleg|work> *businessified
02:57 < ningu> it's kind of hard for me to figure out what they actually provide. it seems like they basically have a farm of servers that sync with each other and provide sockets for you
02:57 < faceleg|work> yeah that's what I think
02:57 -!- mode/#Node.js [+o ryah] by ChanServ
02:58 < faceleg|work> wow checkout the web 3.0 buttons (right-hand side of this page) http://www.realtime.co/developers/demos/demo/chart
02:59 < ningu> what, the hover effects?
02:59 < faceleg|work> yeah
02:59 < faceleg|work> WEB 3
02:59 < faceleg|work> POINT 
02:59 < faceleg|work> OH
02:59 < ChrisPartridge> its meant to be real time, but i see no socket data :(
03:00 < faceleg|work> because you're not loggen into the SSL (tm) protected portion of the site
03:00 < faceleg|work> what 
03:01 < faceleg|work> you think they'd let you see it for free?
03:01 < faceleg|work> This is Web 3.0
03:01 < faceleg|work> logged*
03:01 < ningu> awesome flow chart: http://www.realtime.co/developers/migrationapis
03:03 < Zolmeister1> I like their favicon
03:04 < ningu> their corporate pricing includes "guaranteed business continuity"
03:06 < faceleg|work> 4With this tier you are only limited by the number of visitors (30,000) and messages (1,000,000 â€” that's 1 million FREE messages!) per month.
03:06 < faceleg|work> I can't wait to start developing my own next-generation application
03:06 < faceleg|work> multi-cloud?
03:07 < ChrisPartridge> I only develop next-generation applications.. lucky I got this time machine from ebay on the cheap
03:07 < ningu> http://www.realtime.co/developers/ortc -- what does that websocket graphic represent?
03:08 < faceleg|work> it represents socket.io monified
03:15 < faceleg|work> their sockets don't even work
03:16 < ningu> I'd rather have websprockets anyway
03:17 < faceleg|work> I'd rather have Microsoft Sockets.NET
03:23 < deoxxa> lol ningu
03:23 < deoxxa> just saw your messages
03:23 < deoxxa> ur crazy
03:27 < ningu> deoxxa: I dunno you strike me as a bit of a schismatic
03:28 < deoxxa> aw, well thanks
03:31 < ningu> how did I never know about this before: https://github.com/substack/node-hashish
03:42 < SirFunk> Hey, lets say I want to execute some tiny cpu intensive task like a million times (like calculating a md5 sum) what is the fastest way to do this with node? threads?
03:45 < Oddman> anonymous functions
03:45 < Oddman> to get asynchronous load going
03:48 < mscdex> SirFunk: with the built-in crypto library
03:48 < ningu> SirFunk: you can either spawn a process or use setImmediate
03:48 < mscdex> ;-)
03:49 < SirFunk> i'm using setImmediate
03:49 < ningu> setImmediate is v0.10's version of process.nextTick
03:49 < SirFunk> yeah it's only using 100% of one cpu though. wondering if i should use threads to get it on the other cores
03:50 < ningu> oh, you can use cluster for that
03:50 < ningu> but if it's just one task then I dunno, the next thing to do would be to spawn a process
03:51 < SirFunk> yeah i'll just split up the workload and spawn seperate processes i guess
03:52 < deoxxa> SirFunk: kind of depends on *how* much you care about performance
03:53 < howdynihao> why you forking!
03:53 < deoxxa> SirFunk: if you care a lot about it, and you have all the information about the task before the task starts, and you can happily wait for the entire task to finish before getting a response about it, you could probably see some pretty huge performance gains by moving it to c++-land
03:54 < context> you can use multiple processes to hit each core, and maybe look at dnode for distributing work, depending on how the workflow is you are doing
03:54 < whiskers75> deoxxa: Thank you for creating deoxxa/jsmc, I'm using it for whiskers75/Miney!
03:54 < luckysmack> hello guys. 
03:54 < deoxxa> whiskers75: woot! i love it when people make something even more awesome out of stuff i've made. feel free to hit me up if you have questions!
03:55 < deoxxa> right now though, i'm going to the store
03:55 < luckysmack> its been almost a year since ive really been able to keep up on node. I was wondering what major things have changed lately.
03:55  * deoxxa bbl
03:55 < whiskers75> deoxxa: So far I've managed to get saving and loading of player files :)
03:56 < whiskers75> luckysmack, not much unless you're a big fan of streams and that stuff
03:57 < luckysmack> i am mostly into rest api stuff, but I do have an interest for doing real time stuff.
03:57 < SomeoneWeird> whiskers75, there's a pull request for the in jsmc btw
03:57 < SomeoneWeird> lol
03:57 < SomeoneWeird> for that*
03:58 < whiskers75> SomeoneWeird, so you're saying I spent about an hour on something already done...?
03:58 < SomeoneWeird> https://github.com/deoxxa/jsmc/pull/16
04:00 < whiskers75> SomeoneWeird, well describe exactly what that commit does
04:01 < SomeoneWeird> whiskers75, saves the players location when they quit and loads it when they join...?
04:02 < whiskers75> because my player save/load system saves an object (player.save) and loads it from a JSON file.
04:02 < SomeoneWeird> so does my one..
04:02 < SomeoneWeird> did you even look at it?
04:03 < whiskers75> no, not in detail. really? wow. oh well :)
04:03 < whiskers75> we still need redstone and chests
04:03 < SomeoneWeird> also instead of sending 0x03 to a player you should use player.message
04:03 < SomeoneWeird> and stay away from var self=this;
04:03 < whiskers75> SomeoneWeird, I do most of the time
04:04 < whiskers75> ok....
04:04 < SomeoneWeird> :)
04:05 < whiskers75> without all aspects of Minecraft like redstone, my players will hate the server :)
04:05 < whiskers75> we might need to look at Bukkit :)
04:05 < SomeoneWeird> why don't you code redstone then?
04:06 < whiskers75> SomeoneWeird, I'll try - I dont have an exact plan of how redstone works in vanilla
04:07 < whiskers75> chests may be easier
04:07 < monokrome> Am I missing something or does RESTify not expose anything like express's server.set() function? :(
04:08 < SomeoneWeird> whiskers75, you really should have branched some of those generic commits off and merged then back in with jsmc too
04:08 < whiskers75> SomeoneWeird, Also. remember WhiskbotMaster? That was my Bitcoin test in Node. (minecraft bitcoin!)
04:08 < SomeoneWeird> i know
04:09 < whiskers75> SomeoneWeird, I'll start cherrypicking
04:09 < whiskers75> Actually no, I'll just apply a diff
04:12 < whiskers75> there needs to be a node.js irc cloak
04:12 < jesusabdullah> cloak?
04:13 < whiskers75> Yes, cloak
04:13 < whiskers75> that unaffilliated/whiskers75 hostname of mine
04:13 < jesusabdullah> ah
04:14 < whiskers75> like nodejs/whiskers75
04:14 < whiskers75> :)
04:15 < Nuck> whiskers75: Cloaks are not bumper stickers, despite what Rizon and IRCHighway want you to think.
04:15 < Nuck> On Freenode at least, they signify membership in an organization ;)
04:16 < whiskers75> Nuck: aw :)
04:16 < ChrisPartridge> Nuck: you've dashed my hopes and dreams
04:16 < Nuck> haha
04:17 < whiskers75> when's deoxxa going to be back? i want to hit him up about jsmc
04:17 < whiskers75> Y U NO REDSTONE
04:17 < whiskers75> :)
04:18 < whiskers75> redstone crashes 
04:18 < whiskers75> my minecraft when I use it
04:18 < whiskers75> so do chests
04:18 < whiskers75> it's annoying :( 
04:21  * whiskers75 grabs a question and hits deoxxa with it
04:23 < dayom> V8 is so lonely compared to this channel
04:23 < whiskers75> dayom: V8 has a channel?
04:24 < dayom> I mean
04:24 < dayom> there is a channel
04:24 < dayom> but it says to see #chromium
04:24 < whiskers75> oh. I use Chromium
04:25 < elgringoguapo> I am looking for a good bunch of tutorials to try out... any sugestions where I should start?
04:25 < deoxxa> whiskers75: i'm back, but i'm cooking for the next 45 minutes or so probably
04:26 < deoxxa> whiskers75: feel free to leave me questions somewhere i can find them :>
04:51 < xerora> y
04:52 < Voting> https://github.com/caolan/async <- Anyone know how I install this in node?
04:52 < jden> Voting: npm install async
04:53 < Voting> jden: do I do that in the same directory that I start node out of?
04:53 < jden> in your project directory
04:54 < jden> then you can make a file and `var async = require('async')`
04:54 < elgringoguapo> I am looking for a good bunch of tutorials to try out... any sugestions where I should start?
04:54 < jden> elgringoguapo: howtonode.org has a good smattering of articles
04:56 < Voting> jden: ReferenceError: async is not defined - do I need to "require" it or something?
04:56 < ChrisPartridge> Voting: generally you need to require anything that isn't in core
04:56 < jden> Voting: yes, at the top of the file where you want to use it, you use `require` to assign to to a variable
04:57 < jden> eg `var async = require('async');`
04:57 < jden> I'm using markdown backticks here to indicate what you would literally type
04:58 < jden> Voting: nodejitsu has a good npm FAQ: http://blog.nodejitsu.com/npm-cheatsheet
04:58 < Voting> jaden :   ??  var async = require('async')
04:59 < jden> the `require` function is a module locator, which finds the 'async' module by name and returns it as a value. Typically you would assign it to a variable with the name name to then use in your program.
05:26 < whiskers75> deoxxa: Oh hi!
05:47 < dorner> hi, any resources with a wide variety of libuv+node.js examples? i'm looking in node-0.10.x/test/addons, one example.. and all of the test examples for libuv source itself are pure C without nodejs bindings
05:50 < elgringoguapo> whats the best IDE to use with node?
05:51 < ljharb> vim?
05:51 < dorner> i use vim with syntax highlighting but i'm a nutbag
05:51 < elgringoguapo> I use windows and Mac
05:51 < elgringoguapo> not linux
05:53 < Havvy> elgringoguapo: Sublime Text
05:55 < glosoli> Hello, is node_modules supposed to break after node.js updates ? 
05:57 < howdynihao> glosoli: some modules might break yea
05:58 < howdynihao> if thats what you mean
05:58 < glosoli> well I updated nodejs yesterday, today I turned on computer, went to develop my project, and see that all project specific node modules seem to be gone or not working properly
05:58 < glosoli> hmm
05:59 < howdynihao> idk about that
05:59 < howdynihao> thats not normal
06:00 < ningu> glosoli: dunno what's up but you can always just npm install
06:00 < glosoli> tried to, grunt tasks fail to work anymore
06:02 < elgringoguapo> i can not get nodemon to work in windows... I npm installed, and it looked ok...   but when I try to use it I get   'nodemon' is not recognized as an internal or external command.  This just means I have to add it to my path?
06:02 < dorner> u required it?
06:03 < elgringoguapo> nope...  ahh perhaps thats the issue
06:03 < ljharb> elgringoguapo: did you install it with -g? and yes, you'd have to add it to your path
06:03 < brycebaril> did you install -g ?
06:03 < ljharb> nodemon is a command line tool
06:53 < ningu> finally got nginx to successfully proxy and handle cgi scripts
06:53 < ningu> that was a production
06:54 < ningu> so anyone who needs to run nginx on a site that has server side includes and cgi... I'm your guy
06:55 < ningu> web 0.5
06:55 < whiskers75> deoxxa: Why no inventory and redstone in JSMC? :( How would I set something to 0xF, for example set this piece of redstone wire to 0xF (on)
07:00 < whiskers75> SomeoneWeird: Any idea how to set, say, a piece of redstone wire to 0xF?
07:00 < whiskers75> SomeoneWeird: In JSMC
07:11 < SomeoneWeird> whiskers75, it's probably metadata so just look at the building plugin and use the code there to find the block and set it with the data you need
07:11 < whiskers75> Thanks
07:11 < whiskers75> As you said that, I found it :)
07:13 < whiskers75> w00t! It worked
07:13 < ningu> I think someone should tally the number of people coming in here every day having trouble with async code and we can use it as a measure of node's popularity
07:14 < whiskers75> ningu: Yeah! I spent an hour yesterday. Guess the problem...
07:14 < ningu> whiskers75: you were helping?
07:14 < whiskers75> ningu: It was async
07:14 < whiskers75> No, an hour coding
07:14 < whiskers75> SomeoneWeird: Redstone support is on the way"
07:25 < turneralex> Hey all. Quick question with variable handling. I've got a HTML form posting data to my node script and I'm receiving it as 'chunk'. Chunk looks like key=value&key=value. How can i extract a value to use it as a variable?
07:27 < ningu> turneralex: connect has a middleware for that
07:27 < ningu> bodyParser
07:27 < SomeoneWeird> turneralex, connect.bodyParser()
07:27 < SomeoneWeird> then use request.body
07:27 < ningu> or you can just steal the code and do it yourself
07:27 < ningu> whatever
07:27 < SomeoneWeird> er, request.query
07:27 < ningu> no, request.body
07:27 < whiskers75> SomeoneWeird: Now, I've got to implement absolutely everything about redstone in Minecraft. Great. Here we go...
07:27 < SomeoneWeird> no, body is for post data
07:27 < ningu> SomeoneWeird: that's what he's dealing with :P
07:28 < SomeoneWeird> hm
07:28 < SomeoneWeird> right
07:28  * SomeoneWeird tired
07:28 < SomeoneWeird> whiskers75, implement it in a seperate branch
07:28 < dorner> if i wanted to create a bunch of pcap listeners for various interfaces, monitoring them using libuv... what kind of "select" routines would you use? I can't find what I need.. instead im using uv_queue_worker() threads
07:28 < dorner> i don't want to create threads
07:29 < whiskers75> SomeoneWeird: If I want to merge it, I'll create a patch and apply that to a separate branch.
07:29 < SomeoneWeird> then I can't help you
07:30 < turneralex> :)
07:30 < whiskers75> SomeoneWeird: OK Fine. How do I move my working directory to another branch? Stash and then re-apply?
07:31 < SomeoneWeird> whiskers75, git checkout -b <name>
07:31 < whiskers75> I'll just stash and re-apply, as I stashed already
07:31 < zeHorhe> I have a problem installing a package with npm, and while investigating, I found the issue is with the spawn function from the child_process module
07:33 < zeHorhe> I tested the function on it's own and it does not work any more
07:33 < zeHorhe> can anyone help?
07:35 < ningu> zeHorhe: what you're saying doesn't make much sense. you could try pastebin'ing your code
07:36 < zeHorhe> spawn = require("child_process").spawn;  ec = spawn("echo", ["merge"]);  ec.stdout.on('data', function (data) {   console.log('stdout: ' + data); });
07:36 < zeHorhe> this is the code I tried
07:37 < zeHorhe> events.js:72         throw er; // Unhandled 'error' event               ^ Error: spawn ENOENT     at errnoException (child_process.js:948:11)     at Process.ChildProcess._handle.onexit (child_process.js:739:34)
07:37 < zeHorhe> and this is the error I get
07:37 < ningu> zeHorhe: so, the process exited with an error and you didn't handle the error event
07:38 < ningu> and the error was that the "echo" binary doesn't exist
07:39 < [AD]Turbo> hi there
07:40 < deoxxa> whiskers75: like SomeoneWeird said, it should be a metadata value
07:40 < whiskers75> deoxxa: I figured
07:40 < zeHorhe> I can try with the code from the package, which tries to run a npm command
07:40 < whiskers75> I have to check around the redstone wire for power sources
07:41 < zeHorhe> I get the same error
07:41 < dorner> check your $PATH or try /bin/echo as the first arg
07:41 < dorner> dno
07:41 < whiskers75> deoxxa: any other easy way to get inputs to redstone?
07:41 < zeHorhe> and I have put the code in a try catch block
07:42 < deoxxa> whiskers75: you could store an additional set of information regarding redstone and use it
07:42 < whiskers75> deoxxa: clever
07:42 < deoxxa> whiskers75: pretty sure the official server just uses the most naiive/slow method though
07:42 < whiskers75> deoxxa: lol
07:42 < deoxxa> like, not even kidding, the official server is so so inefficient
07:42 < zeHorhe> this is the new code
07:42 < zeHorhe> spawn = require("child_process").spawn;  try { 	ec = spawn("npm", ["install", "log4js"]); } catch(ex) { 	console.log(ex); }  ec.stdout.on('data', function (data) {   console.log('stdout: ' + data); });  ec.stderr.on('data', function (data) {   console.log('stderr: ' + data); });
07:42 < ningu> zeHorhe: what is the result for 'which echo'?
07:42 < ningu> zeHorhe: use a paste site
07:43 < zeHorhe> ok, thank you
07:44 < deoxxa> wow, someone's spawning npm
07:44 < deoxxa> that's hacky
07:44 < deoxxa> i wonder if they realise npm can be require()ed
07:44 < whiskers75> deoxxa: they didn't :)
07:45 < whiskers75> deoxxa: With JSMC: No more *ARGH I need ANOTHER redstone repeater* - infinite redstone
07:45 < deoxxa> ha
07:45 < zeHorhe> so, I tried with code similar to the one from the package http://justpaste.it/2bbo
07:46 < zeHorhe> which just calls npm
07:46 < zeHorhe> to install a dependency
07:46 < whiskers75> deoxxa: Bukkit vs JSMC - JSMC wins
07:46 < deoxxa> yey
07:47 < ningu> substack: hey, you around?
07:47 < whiskers75> deoxxa: I'm lazy and can't be bothered to implement a chunk saving system for redstone. Solution: Make redstone user-centric.
07:48 < SomeoneWeird> ehh
07:48 < ningu> substack: I'm following one of your dnode tutorials and I'm a bit confused where the .id property is coming from since it isn't showing up on the same place in my code
07:50 < ningu> oh, I sort of get it now... huh
07:51 < whiskers75> SomeoneWeird: If I make redstone user centric, if you try and join your redstone onto mine, it won't work as you don't have my redstone outputs in your file :_
07:51 < whiskers75> :)
07:51 < SomeoneWeird> thats bad
07:51 < whiskers75> SomeoneWeird: why?
07:52 < SomeoneWeird> because me and my mates always build massive redstone contraptions
07:52 < SomeoneWeird> and we all focus on 1 part
07:52 < SomeoneWeird> if they didn't work together..
07:52 < whiskers75> SomeoneWeird: Well, I should add sharing then
07:54 < zeHorhe> thank you ningu, I think I will check the code for child_process on github to see what is going on
07:54 < SomeoneWeird> zeHorhe, require('npm')
07:55 < whiskers75> zeHorhe: : spawning npm is hacky and buggy
07:56 < zeHorhe> I should tell that to the ones who build the karma package
07:58 < zeHorhe> I will try to modify the package
08:00 < zeHorhe> thank you all
08:12 < whiskers75> SomeoneWeird and deoxxa: I've completed prototype 1 of redstone support in JSMC. (It's pushing now)
08:13 < whiskers75> pushed
08:14 < whiskers75> Oh wait, it has loads of bugs. Don't use that
08:14 < whiskers75> I'm gonna rebase
08:16 < whiskers75> *FORCE PUSH*
08:17 < ljharb> always be rebasing
08:17 < whiskers75> ljharb: I know it's against every git law in the book
08:17 < whiskers75> BUT I WAS DESPERATE
08:17 < ljharb> incorrect
08:17 < ljharb> rebase is how git is meant to be used.
08:18 < whiskers75> ljharb: No rebasing into an already-pushed repp
08:18 < ljharb> you can perform nearly every git command with rebase alone :-)
08:18 < whiskers75> repo*
08:18 < ljharb> whiskers75: well, that just depends.
08:18 < whiskers75> ljharb: Yeah, and noone pulled it
08:18 < dorner> ok so i cant call my callback from within the libuv worker thread
08:18 < whiskers75> so I can
08:18 < dorner> that's why it's segv'n
08:18 < ljharb> if everyone using the branch is using `pull --rebase`, ie the merge strategy of rebase, then it's always ok.
08:19 < ljharb> it's just that with shared branches on a remote, everyone must agree on the merge strategy, and people who don't know how to use git use the "merge" strategy by default.
08:19 < whiskers75> ljharb: Now I've read Pro Git by Scott Chacon
08:19 < whiskers75> so I know stuff
08:19 < whiskers75> deoxxa: The moment of truth *places redstone wire*
08:20 < whiskers75> Aaand, it crashed
08:20 < whiskers75> That is to be expected
08:22 < penzur> >> Array(16)
08:22 < purr> penzur: (object) [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined]
08:23 < whiskers75> >> ['a', 'b'].splice(1, 1)
08:23 < purr> whiskers75: (object) ['b']
08:23 < whiskers75> phew
08:23 < whiskers75> that works
08:25 < dorner> this is what i was missing => https://developers.google.com/v8/, nice
08:26 < whiskers75> I have an idea for JSMC - instead of minecarts, let's have adjustable-speed hoverboard
08:26 < whiskers75> s
08:29 < whiskers75> >> require('nonexistentpackage');
08:29 < purr> whiskers75: ReferenceError: require is not defined
08:29 < whiskers75> clever
08:30 < whiskers75> >> eval(eval(eval(console.log('hi'))))
08:30 < purr> whiskers75: undefined; Console: 'hi'
08:30 < whiskers75> lol
08:31 < ningu> >> 1 >> 2 >> 3 >> 4
08:31 < purr> ningu: (number) 0
08:31 < ningu> >> 1 << 2 >> 3 << 4
08:31 < purr> ningu: (number) 0
08:31 < ningu> >> 1 << 2 << 4
08:31 < purr> ningu: (number) 64
08:32 < faceleg> lolwtf
08:32 < whiskers75> >> for (true) do {console.log('spam')});
08:32 < purr> whiskers75: SyntaxError: Unexpected token )
08:32 < whiskers75> dammit
08:32 < ningu> faceleg: bit shift
08:33 < faceleg> yeah 
08:33 < faceleg> ignore the lol
08:33 < faceleg> I meant wtf are you doing
08:33 < faceleg> dancing is forbidden
08:33 < ningu> just making weird looking code
08:33 < faceleg> finally
08:33 < whiskers75> I want to see if this works]
08:33 < faceleg> finished my nightly tasks
08:33 < ningu> >> new Array(1000).join('.')
08:33 < purr> ningu: (string) '............................................................................................................................................................................................................................................................................................................................................................................â€¦
08:33 < faceleg> back to nodegit
08:34 < whiskers75> >> function test() {
08:34 < purr> whiskers75: SyntaxError: Unexpected end of input
08:34 < faceleg> >> console.log('@ningu stop it')
08:34 < purr> faceleg: undefined; Console: '@ningu stop it'
08:34 < whiskers75> >> funcr
08:34 < purr> whiskers75: ReferenceError: funcr is not defined
08:34 < whiskers75> arg
08:34 < whiskers75> wait
08:34 < ningu> >> faceleg
08:34 < purr> ningu: ReferenceError: faceleg is not defined
08:34 < faceleg> >> throw new Error('derp')
08:34 < purr> faceleg: Error: derp
08:34  * faceleg melts
08:35 < whiskers75> >> var test = function() {this.test()});
08:35 < purr> whiskers75: SyntaxError: Unexpected token )
08:35 < whiskers75> >> var test = function() {this.test()};
08:35 < purr> whiskers75: undefined
08:35 < whiskers75> can I call a function from a function?
08:35 < faceleg> while(true)
08:35 < faceleg> >> while(true)
08:35 < purr> faceleg: SyntaxError: Unexpected end of input
08:35 < faceleg> >> while(true) {}
08:35 < purr> faceleg: Timeout Error: Execution time exceeded 2 seconds
08:35 < whiskers75> or will that create some kind of giant abomination
08:36 < whiskers75> ah ha
08:36 < ljharb> whiskers75: of course you can.
08:36 < faceleg> shh everybody ljharb is here
08:36 < ningu> >> var test = function() { test() }; test()
08:36 < purr> ningu: RangeError: Maximum call stack size exceeded
08:36 < faceleg> stop the silliness
08:36 < faceleg> ok guys
08:36 < faceleg> one line fizzbuzz
08:36 < faceleg> and I mean guys as in the plural of you, not male only
08:37 < whiskers75> >> var x = 100; while (x > 0) {x = x - 1; console.log('ha ha');};
08:37 < purr> whiskers75: undefined; Console: 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha', 'ha ha'â€¦
08:37 < whiskers75> this has potential to spam
08:38 < ningu> >> (faceleg + '').replace(/d(?=.)/,'r')
08:38 < purr> ningu: ReferenceError: faceleg is not defined
08:38 < ningu> >> (global.faceleg + '').replace(/d(?=.)/,'r')
08:38 < purr> ningu: ReferenceError: global is not defined
08:38 < ningu> >> (module.faceleg + '').replace(/d(?=.)/,'r')
08:38 < purr> ningu: ReferenceError: module is not defined
08:38 < ningu> blah
08:39 < whiskers75> DIE FACELEG
08:39 < whiskers75> BY THE POWER OF JS
08:39 < ningu> >> (window.faceleg + '').replace(/d(?=.)/,'r')
08:39 < purr> ningu: ReferenceError: window is not defined
08:39 < faceleg> >> var spam = function() { console.log('blah'); };
08:39 < purr> faceleg: undefined
08:39 < faceleg> >> spam()
08:39 < purr> faceleg: ReferenceError: spam is not defined
08:39 < faceleg> lol
08:39 < whiskers75> dur
08:39 < whiskers75> no persistencw
08:39 < faceleg> herp; derp.
08:39 < whiskers75> otherwise you could crash it
08:39 < ningu> >> var faceleg; (faceleg + '').replace(/d(?=.)/,'r')
08:39 < purr> ningu: (string) 'unrefined'
08:39 < whiskers75> Ooh faceleg is unrefined
08:39 < faceleg> lol
08:40 < faceleg>  I could have told you that
08:41 < faceleg> >> while(true) { console.log('no! '); }
08:41 < purr> faceleg: Timeout Error: Execution time exceeded 2 seconds
08:41 < faceleg> aw
08:41 < ningu> >> process.env
08:41 < purr> ningu: ReferenceError: process is not defined
08:43 < ningu> >> parseInt.toString()
08:43 < purr> ningu: (string) 'function parseInt() { [native code] }'
08:43 < whiskers75> >>  var x = 1000000000  + Math.random() * 10000;  while (x > 0) {console.log('spam');}
08:43 < purr> whiskers75: Timeout Error: Execution time exceeded 2 seconds
08:43 < whiskers75> aw
08:43 < ningu> >> ~~~~~~~~~~~~~~~~~~~~~~~~10
08:43 < purr> ningu: (number) 10
08:44 < ningu> new Array(50).map(function () { return Math.random() * 10000 })
08:44 < ningu> >> new Array(50).map(function () { return Math.random() * 10000 })
08:44 < purr> ningu: (object) [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, uâ€¦
08:44 < ningu> hrm
08:44 < ningu> >> Math.random()
08:44 < purr> ningu: (number) 0.6756727206520736
08:46 < ningu> I have no idea why that map doesn't work, but it doesn't
08:47 < Gottox> ningu: arrays work in a strange way sometimes.
08:47 < Gottox> try this:  for(var i in Array(50)) { console.log(1); }
08:47 < ningu> well var .. in doesn't really work on arrays anyway
08:48 < Gottox> well... yes and no.
08:48 < ningu> if you assign them other properties
08:48 < ljharb> ningu: because map doesn't work on sparse arrays
08:48 < Gottox> it works, but not as expected.
08:48 < ljharb> ningu: i'd avoid using new Array(n).
08:48 < ningu> >> var foo = new Array(10); foo.bar = 20; for (var i in foo) console.log(i);
08:48 < purr> ningu: undefined; Console: 'bar'
08:48 < ljharb> and for..in shouldn't be ever used on arrays.
08:48 < whiskers75> deoxxa: Redstone wire support complete! Now to add torches, lamps...
08:49 < deoxxa> nice work!
08:49 < ningu> ljharb: why do sparse arrays even exist?
08:49 < ljharb> because back in the 90s people were really concerned about ram? i dunno
08:49 < ningu> is there no efficient way to, say, initialize an array of size 100 with 0? or you just do it manually?
08:49 < ningu> new Array(100) and init immediately
08:49 < Gottox> I'm still concerned about ram.
08:50 < ningu> manually in the sense of writing a for loop
08:50 < ningu> I'm concerns about rams... they head butt unexpectedly
08:50 < ljharb> lol
08:50 < ningu> concerned*
08:50 < ljharb> ningu: var arr = []; for (var i = 0; i < 100; ++i) { arr.push(0); }
08:51 < ljharb> ningu: but i'd seriously question why you need a prefilled array like that
08:51 < ningu> ljharb: and it won't be re-allocated each time?
08:51 < ningu> yeah, I know
08:51 < ljharb> reallocated? no
08:51 < deoxxa> damn there was another way to do that
08:51 < ningu> I was just wondering
08:51 < ljharb> also, it's JS, don't concern yourself with that.
08:51 < deoxxa> there's a tricky way to do what you want, ningu, lemme find it
08:51 < ningu> well, that's true, but v8 can't be smart enough to optimize everything
08:51 < deoxxa> it's probably not useful, but it's interesting
08:52 < ljharb> if it's not optimizing it, enough people aren't doing it :-p
08:52 < ningu> I'm not really advocating worrying about it
08:52 < ningu> ljharb: so if it won't be reallocated, what does v8 actually do in terms of allocation?
08:52 < ljharb> internally? i have no idea.
08:52 < ljharb> read the v8 source code?
08:53 < deoxxa> hrm, can't find it
08:53 < guor> it works essentially like Java's ArrayList
08:54 < guor> the array backing store has some spare
08:54 < guor> but if you go beyond that, a new backing store has to be allocated
08:54 < guor> so if you just do a lot of pushes, it will be re-allocated a few times, causing unnecessary GC
08:55 < guor> it would be smarter to just do var array = new Array(100); and then fill the elements
08:56 < ljharb> "works like java". please god no.
08:57 < ljharb> guor: also i don't think that's quite how it works.
08:57 < roel_> is it possible to do a xmlHttpRequest with nodejs?
08:57 < ljharb> roel_: yes, check out "request"
08:57 < andrew12> lol
08:58 < guor> check src/builtins.cc and look for BUILTIN(ArrayPush) if you want to see it yourself
08:58 < ningu> roel_: well, node isn't a browser but you can do an http request
08:58 < ningu> guor: hmm ok, cool
08:58 < deoxxa> wtf? node isn't a browser?
08:58 < deoxxa> no wonder it doesn't render anything properly
08:58 < guor> and I was talking about Java's ArrayList as an example of an expandable array
08:58 < roel_> and with what module can you do the http request?
08:59 < ningu> roel_: ljharb already told you, use "request"
08:59 < roel_> It must be very obvious module but I can't find it
08:59 < ljharb> roel_: https://npmjs.org/request
08:59 < roel_> ah k thnx ljharb 
09:02 < jden> roel_: see also https://npm.im/pr-request
09:02  * jden ducks
09:02 < roel_> k thnx will check i out!
09:03 < ljharb> jden: no dependents versus 1000 dependents?
09:04 < ljharb> lol wait, is that just request, wrapped in promises?
09:04 < ljharb> you should submit pull requests to all request's dependents to switch to using yours :-p
09:05 < jden> ljharb :)
09:08 < ningu> quick poll: if I refer to "request's dependent modules", does that mean the modules that depend on request or the modules that request depends on? or is it ambiguous?
09:09 < deoxxa> i guess technically it's talking about modules that depend on request
09:09 < deoxxa> but i think the word is abused
09:09 < ljharb> ningu: "dependencies" is what it needs. "dependents" is what needs it.
09:11 < ningu> ljharb: yeah, I think you're basically right in the strictest sense, but I have a feeling people use "dependent" in the other case too
09:11 < ljharb> i'm sure they do, but that's how it depends on npm
09:29 < ningu> was just reading the mongrel2 manual. the author sure is opinionated.
09:41 < deoxxa> ningu: lol, zed shaw?
09:41 < ningu> deoxxa: yeah
09:41 < deoxxa> hehe
09:41 < ningu> you know of him?
09:42 < deoxxa> he's a bit of a well-known name if you follow the HN/proggit circuit
09:42 < ningu> now I'm reading about ZeroMQ, but I don't quite "get it" yet...
09:42 < ningu> ah ok
09:45 < ningu> "In March 2012, due to "overly restrictive trademark policy" and too liberal development process, Ã˜MQ was forked by some of the original developers as Crossroads I/O. Crossroads I/O[4] is going to use the more common "benevolent dictator" model, with Martin Sustrik in that role."
09:45 < ningu> I have no idea what "too liberal development process" means
09:45 < ningu> given the context
09:46 < kam187-rMBP> hey guys, is there a patched v8-profiler that works with node 0.10?
09:47 < deoxxa> ningu: basically nobody could (or would) decide on whether or not to implement things or how to do it
09:48 < ningu> " The RabbitMQ server is written in Erlang and is built on the Open Telecom Platform framework for clustering and failover. Rabbit Technologies Ltd., a joint venture between LShift and Cohesive FT, acquired in April 2010 by SpringSource (now a division of VMware)" ahhh head exploding
09:48 < deoxxa> lol
09:49 < deoxxa> http://www.cb2.com/all-dining/dining/nova-dinnerware/f8455 this is all really nice :x
09:49 < deoxxa> i want to buy so much stuff from this site
09:49 < ningu> so RabbitMQ implements AMQP, which is a competitor of sorts for ZeroMQ
09:49 < ningu> do any of these things actually solve the right problem?
09:49 < deoxxa> depends what the problem is
09:50 < ningu> well, it seems like a lot of infrastructure
09:50 < ningu> maybe it isn't
09:50 < jtc-workstation-> I'm trying to load a stylesheet with node but it returns me an error where it can't find the stylesheet even tho i can see it =/ do i need to declare it on the server or on the client-side ?
09:50 < ningu> jtc-workstation-: do you have static file serving enabled?
09:51 < ningu> jtc-workstation-: what framework are you using?
09:51 < jtc-workstation-> I'm using express.js
09:51 < ningu> ok
09:51 < jtc-workstation-> dont think I'm using a static file serving
09:51 < ningu> and the stylesheet is in your public/ directory and you have the app.use for static?
09:51 < ningu> after app.router put,
09:51 < ningu>     app.use(express.static(__dirname + '/public'));
09:52 < jtc-workstation-> app.use(express.static(__dirname + '/public')); that I'm using
09:52 < ningu> ok
09:52 < ningu> and where is the stylesheet?
09:53 < jtc-workstation-> I'm getting ReferenceError: express is not defined
09:53 < hydrawat> var express = require('express');
09:53 < ningu> jtc-workstation-: well that's a much bigger problem than not seeing a stylesheet :P
09:54 < deoxxa> lol
09:55 < jtc-workstation-> got it to work now =) thanks guys
10:22 < whiskers75> Why am I getting a RangeError: Maximum call stack size exceeded with this code: https://github.com/whiskers75/jsmc/tree/redstone?
10:22 < ningu> which code?
10:22 < whiskers75> /home/whiskers75/jsmc/lib/chunk.js:180
10:23 < whiskers75>     if (this.get_block_type == 76) {
10:23 < whiskers75>                             ^
10:23 < whiskers75> RangeError: Maximum call stack size exceeded
10:23 < ningu> I dunno, that code isn't there
10:23 < whiskers75> it is
10:23 < ningu> it isn't
10:24 < whiskers75> it isn't.
10:24 < whiskers75> WTF?
10:24 < ningu> hehe
10:24 < whiskers75> oh i didn't push
10:24 < ningu> that's what she said
10:25 < whiskers75> >> console.log(':('):
10:25 < purr> whiskers75: SyntaxError: Unexpected token :
10:25 < whiskers75> >> console.log(':(')
10:25 < purr> whiskers75: undefined; Console: ':('
10:25 < whiskers75> Pushed. Now look
10:25 < SomeoneWeird> whiskers75, now would be a good time for you to debug
10:25 < SomeoneWeird> it's really not that hard.
10:26 < whiskers75> SomeoneWeird: Can you tell me why this error is happening?
10:26 < ningu> get_block_type is a function
10:26 < whiskers75> Is it because I call a function inside a function which calls a function...
10:26 < ningu> apparently
10:26 < whiskers75> it is
10:26 < ningu> so why are you comparing it to a number?
10:33 < whiskers75> ningu: oh
10:33 < faceleg> wow JSDoc 3 is a vast improvement
10:33 < whiskers75> DAMMIT
10:33 < whiskers75> that was a n00b error
10:34 < ningu> functions are things
10:34 < whiskers75> ningu: My mind wandered and I forgot to do this.get_block_type(x, z, y)
10:34 < whiskers75> that works
10:34 < whiskers75> hopefully
10:37 < whiskers75> Now I get this:
10:37 < whiskers75> /home/whiskers75/jsmc/lib/chunk.js:45
10:37 < whiskers75> Chunk.prototype.delRedstoneOutput = function delRedstoneOutput(x, z, y, player
10:37 < whiskers75>                                                               ^
10:37 < whiskers75> RangeError: Maximum call stack size exceeded
10:37 < whiskers75> WHY
10:38 < whiskers75> ningu: any ideas?
10:38 < ningu> you are calling it in an infinite loop
10:38 < whiskers75> No, I shouldn't be...
10:38 < ningu> well, it seems to think you are
10:38 < DaMorpheuS> what are you making whiskers75 sounds like minecraft :)
10:39 < SomeoneWeird> DaMorpheuS, it is lol
10:39 < whiskers75> is Minecraft :) JSMC, actually. I'm working on redstone
10:39 < whiskers75> it's a real pain
10:39 < DaMorpheuS> but is it a tool for minecraft or you own minecraft
10:39 < whiskers75> ningu: Well, I only placed one redstone wire (id 55(
10:39 < whiskers75> DaMorpheuS: A minecraft server
10:39 < DaMorpheuS> ah
10:39 < DaMorpheuS> nice
10:39 < whiskers75> built entirely in JS
10:39 < whiskers75> by deoxxa
10:40 < whiskers75> and improved by me, SomeoneWeird and superjoe30
10:40 < ningu> whiskers75: is delRedstoneOutput called outside of chunk.js?
10:40 < DaMorpheuS> now new with rangeErrors!!! ;)
10:40 < SomeoneWeird> lol
10:40 < SomeoneWeird> i did a lot of it, superjoe didn't do much
10:40 < whiskers75> ningu: Nope, not currently
10:41 < whiskers75> it's only called (atm) in updateRedstone()
10:41 < whiskers75> DaMorpheuS: >:(
10:41 < whiskers75> OK, whiskers75's debugging list:
10:41 < DaMorpheuS> sorry man just kidding
10:41 < ningu> player.save.redstone.outputs.splice(player.save.redstone.outputs.indexOf(new Object({x: x, z: z, y: y})), 1);
10:41 < whiskers75> I don't mind :)
10:41 < ningu> wtf is that doing
10:41 < whiskers75> ningu: It's splicing 
10:41 < ningu> yeah, but
10:42 < ningu> I mean indexOf
10:42 < whiskers75> Deleting a redstone output from a player's save
10:42 < whiskers75> using an object to get the reference
10:42 < ningu> outputs is an array?
10:42 < whiskers75> yes
10:42 < ningu> I don't think you can really do that
10:42 < ningu> maybe you can...
10:42 < Gottox> whiskers75: is this a minecraft+node.js thingy?
10:42 < SomeoneWeird> dont do that
10:42 < ningu> anyway the new Object seems unnecessary
10:43 < whiskers75> Gottox: Yes it is
10:43 < SomeoneWeird> Gottox, yes it's a mc server in node
10:43 < whiskers75> ningu: Well how do YOU propose I do it? :)
10:43 < ningu> I don't know if indexOf uses == or ===
10:43 < ningu> >> {a: 1} == {a: 1}
10:43 < purr> ningu: SyntaxError: Unexpected token ==
10:43 < Gottox> whiskers75: awesome, where to try it?
10:43 < ningu> >> if ({a: 1} == {a: 1}) console.log('true')
10:43 < purr> ningu: undefined
10:43 < ningu> >> if ({a: 1} === {a: 1}) console.log('true')
10:43 < purr> ningu: undefined
10:44 < SomeoneWeird> Gottox, fknsrs.biz
10:44 < ningu> so yeah it won't work
10:44 < SomeoneWeird> you can't compare objects
10:44 < whiskers75> You can get the latest deoxxa/jsmc vanilla code at github.com/deoxxa/jsmc
10:44 < Gottox> SomeoneWeird: thanks :D
10:44 < whiskers75> SomeoneWeird: Am I trying to?
10:44 < ningu> whiskers75: of course you are trying to, wht do you think indexOf does?
10:44 < whiskers75> ningu: good point. But what do I do to get the index then..?
10:45 < whiskers75> .forEach(if object.x = x
10:45 < whiskers75> hm
10:45 < whiskers75> that could work
10:45 < ningu> anyway you can use a deep comparison things like underscore has or write your own or whatever
10:45 < whiskers75> I'll just forEach over that array
10:45 < ningu> you don't really want forEach cause then you can't short circuit it
10:45 < whiskers75> short circuit?
10:45 < ningu> stop when you find it
10:46 < whiskers75> I can
10:46 < whiskers75> OK
10:46 < ningu> no, you can't
10:46 < whiskers75> i can't
10:46 < ningu> I tend to use underscore for this stuff just cause I'm lazy
10:46 < gildean> Object.keys(object).forEach(function (key) { if (object[key] === otherobject[key]) { console.log('true'); }); 
10:46 < SomeoneWeird> use for(var y in x)
10:47 < whiskers75> >> Object.keys(object).forEach(function (key) { if (object[key] === otherobject[key]) { console.log('true'); }); 
10:47 < purr> whiskers75: SyntaxError: Unexpected token )
10:47 < ningu> yeah that will work too
10:47 < gildean> missing one }
10:47 < whiskers75> SomeoneWeird: demonstrate on purr
10:47 < ningu> underscore doesn't have the right kind of method anyway it looks like. anyway this is too simple, just use the for loop
10:47 < SomeoneWeird> whiskers75, go read javascript docs
10:48 < whiskers75> what part of them?
10:48 < ningu> get all your docs in a row
10:48 < whiskers75> I'll just forEach() it
10:48 < whiskers75> I don't really need to stop when I find it
10:48 < whiskers75> it'll work for now
10:48 < SomeoneWeird> :/
10:48 < ningu> seems pointless but ok
10:48 < SomeoneWeird> how can you not know how to use for?
10:48 < ningu> hehe
10:49 < guor> I don't think you want forEach
10:49 < whiskers75> SomeoneWeird: Well....
10:49 < guor> you want Array.prototype.every
10:49 < gildean> >> var object = {'a': 1}, otherobject = {'a': 1}; Object.keys(object).forEach(function (key) { if (object[key] === otherobject[key]) { console.log('true'); } });
10:49 < purr> gildean: undefined; Console: 'true'
10:49 < ningu> guor: yes, that would work too
10:49 < whiskers75> guor: Really? That sounds promising
10:50 < guor> forEach runs a function on each element, but doesn't really do anything with the return value
10:50 < whiskers75> OK, so I just .every and return false when I find it
10:50 < guor> every returns true if every function call returns true, which is probably what you want
10:50 < ningu> foo.every(function (item) { if (item.x === obj.x && item.y === obj.y && item.z === obj.z) { /* do stuff */ return false; } else return true; });
10:50 < ningu> right
10:50  * SomeoneWeird links basic javascript docs into the channel
10:51  * whiskers75 is a bit of a javascript prodigy
10:51 < ningu> whiskers75: anyway the for loop would do exactly the same thing but whatever :P
10:51 < guor> yeah. it would.
10:51 < ningu> I suppose the every thing is cleaner
10:51 < gnarf> whiskers75: if you want to stop after finding one, try .some instead
10:52 < whiskers75> gnarf: OK
10:52 < ningu> I grew up on good old for (i = 0; i < length; i++) and I still use it now and then for less common cases
10:52 < ningu> like i += 2 or whatever
10:52 < gildean> the point in my example is that you can compare values of two objects by only traversing one of them, tho you'd need to add a check for ownproperty in real code
10:52 < gnarf> whats the actual use case btw?
10:53 < SomeoneWeird> * whiskers75 is a bit of a javascript prodigy < i find that quite hard to believe when you don't even know how to use a basic for loop
10:53 < guor> gildean, what if the second object is a superset of the first
10:53 < whiskers75> now i do: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for
10:53 < zot> any experts in 'step' lurking?
10:54 < gnarf> zot: its usually better to just ask a question, asking if people know something rarely gets a response
10:54 < gildean> guor: shoudln't matter because you're just grabbing the keys and checking values for keys of two objects, you just need to check the second object has that key
10:54 < guor> yeah sure, let's say you compare {a:1} and {a:1, b:2}
10:54 < whiskers75> So, after I've found the object, how do I delete it from the array?
10:55 < guor> then, traversing only the first object would tell you both are the same
10:55 < zot> gnarf: yeah, dumb habit
10:55 < gnarf> what exactly are you trying to determine with this loop?
10:55 < SomeoneWeird> whiskers75, delete.
10:55 < SomeoneWeird> whiskers75, i have 0 idea what you're trying todo, you seem to be doing things the hardest way..
10:55 < whiskers75> no MDN doc
10:55 < gildean> guor: ah, my code isn't meant to check if two objects are the same, just to check if two object have the same value for the same key
10:55 < RLa> SomeoneWeird, doen't that create an hole in array?
10:55 < zot> is there a way in Node to simply wait on the event loop to end and then exit with a predetermined return code?
10:55 < guor> if performance is not an issue, just do a JSON.stringify on both objects and compare the string
10:56 < whiskers75> guor: it kinda is
10:56 < zot> return function() from top level seems to work, but wasn't sure if there's a better way
10:56 < guor> I see.
10:56 < SomeoneWeird> RLa, if its an array, not if it's an object (which i thought it was), else you have to use splice
10:56 < guor> hm. JSON.stringify may not work since order is not defined
10:56 < guor> :/
10:56 < whiskers75> guys: see the whole code file https://github.com/whiskers75/jsmc/blob/redstone/lib/chunk.js
10:56 < RLa> well, i thought he wanted to delete object from an array
10:56 < SomeoneWeird> whiskers75, what the hell are you trying to achieve?
10:57 < ningu> guor: canonical-json would work
10:57 < SomeoneWeird> return ("You're stupid.", null) < wtf
10:57 < whiskers75> SomeoneWeird: Check if two objects are the same, and remove one object from an array if they are
10:57 < gnarf> zot: some combo of nextTick and process exit?
10:57 < whiskers75> SomeoneWeird: A little joke for stupid people who delete nonexistent stuff
10:57 < SomeoneWeird> that syntax makes on sense
10:58 < whiskers75> no sense
10:58 < SomeoneWeird> er, yes
10:58 < SomeoneWeird> whiskers75, move all the redstone stuff into a plugin, there's 0 reason it should be in chunk.js
10:58 < whiskers75> So, how do I check if two objects are the same, and remove one object from an array if they are
10:59 < whiskers75> ?
10:59 < SomeoneWeird> is it too hard to google?
11:00 < SomeoneWeird> i mean I don't mind helping you, but you've got to try help yourself..
11:00 < whiskers75> SomeoneWeird: I just googled
11:01 < gnarf> whiskers75: are they actually the same object, or are they just similar
11:01 < mVoid> Node.js in action, published by manning, is that a book worthb uying?
11:01 < whiskers75> they are EXACTLY the same object
11:01 < gnarf> obj1 === obj2 ?
11:01 < whiskers75> yes
11:01 < RLa> is there a node module to exec a command and print output to stdout?
11:01 < ningu> gnarf: no
11:01 < whiskers75> gnarf: Can't you not compare objects?
11:01 < SomeoneWeird> gnarf, you can't compare objects like that
11:02 < ningu> gnarf: he doesn't know what === means
11:02 < whiskers75> That is what I want to do
11:02 < SomeoneWeird> RLa, require('child_process').exec('command', function(err, stdout, stderr) { console.log(stdout) });
11:02 < ningu> >> var foo = []; var bar = foo; foo === bar
11:02 < purr> ningu: (boolean) true
11:02 < SomeoneWeird> ningu, you /cant/ compare objects like that
11:02 < gnarf> obj1 === obj2 is only true when obj1 = obj2 
11:02 < ningu> SomeoneWeird: yes, but === is well defined on objects
11:02 < SomeoneWeird> >> {} === {}
11:02 < purr> SomeoneWeird: SyntaxError: Unexpected token ===
11:02 < ningu> it just doesn't do what he wants it to do
11:02 < RLa> SomeoneWeird, that will output only after the command finishes
11:02 < whiskers75> >> {} == {}
11:02 < gnarf> >> ({} === {})
11:02 < purr> whiskers75: SyntaxError: Unexpected token ==
11:02 < purr> gnarf: (boolean) false
11:03 < RLa> mine is long-running
11:03 < whiskers75> gnarf: nope
11:03 < guor> >> NaN === NaN
11:03 < purr> guor: (boolean) false
11:03 < SomeoneWeird> RLa, then use spawn and hook stdout
11:03 < whiskers75> >> ({} == {})
11:03 < purr> whiskers75: (boolean) false
11:03 < gnarf> whiskers75: so they aren't the same object, they just look the same?
11:03 < ningu> right
11:03 < guor> NaN is always special :_
11:03 < guor> :)
11:03 < guor> >> (-0 === 0)
11:03 < purr> guor: (boolean) true
11:04 < whiskers75> gnarf: Well, they were both created like this: new Object({x: x, y: y, z: z});
11:04 < gnarf> whiskers75: that means they aren't the same object, they are two different objects, even if their values match
11:04 < ningu> whiskers75: why bother with the new Object anyway?
11:04 < SomeoneWeird> i give up
11:05 < ningu> you can just do { ... }
11:05 < whiskers75> >> var x = new Object({}); var y = x; var z = new Object({}); console.log(x === y); console.log (y === z)
11:05 < purr> whiskers75: undefined; Console: true, false
11:05 < whiskers75> hm
11:06 < whiskers75> I'll reinstate my problem.
11:06 < whiskers75> I have an array and an object. How do I remove the object from the array?
11:06 < whiskers75> The object === the object in the array.
11:06 < myhrlin> typeof wouldn't be a good solution  that rigt?
11:06 < ningu> whiskers75: you just proved that they won't be ===
11:07 < whiskers75> ningu: If I .some() it, I get the same object
11:07 < zaleb> indexOf then splice?
11:08 < ningu> zaleb: no, because he's dealing with objects so indexOf won't work
11:08 < whiskers75> ^^
11:08 < ningu> whiskers75: anyway I already put the code for you up there like 10 minutes ago
11:08 < ningu> as did a couple other people
11:08 < whiskers75> please repeat..?
11:08 < ningu> you can scroll back
11:09 < whiskers75> to when?
11:09 < whiskers75> noting at 11:05
11:10 < zaleb> array.indexOf(object) should work?
11:10 < whiskers75> what? foo.every(function (item) { if (item.x === obj.x && item.y === obj.y && item.z === obj.z) { /* do stuff */ return false; } else return true; });?
11:10 < gnarf> whiskers75: if the objects are === indexOf would work
11:10 < ningu> whiskers75: yes, that one
11:10 < gnarf> every/some aren't much use here
11:10 < whiskers75> gnarf: Thank you.
11:10 < whiskers75> gnarf: They are for getting a === object
11:11 < gnarf> in other words if o = a[10] 
11:11 < DaMorpheuS> hey guys question
11:11 < whiskers75> ningu: That doesn't remove anything!
11:11 < gnarf> a.indexOf(o) === 10
11:11 < DaMorpheuS> can I perform a async for loop
11:11 < ningu> whiskers75: it finds the index for you
11:11 < whiskers75> >> var o = a[10], a.indexOf(o) === 10
11:11 < purr> whiskers75: SyntaxError: Unexpected token .
11:11 < ningu> it passes the index as the second argument
11:11 < DaMorpheuS> because i have the idea that if i do a db.get (riak) in a for loop i have some sync issues
11:12 < whiskers75> ningu: Where?
11:12 < ningu> whiskers75: read the docs for every
11:12 < gnarf> >> var a=[{x:1}, {x:2}, {x:3}]; o = a[1]; a.splice(a.indexOf(o), 1); a;
11:12 < purr> gnarf: (object) [{x: 1}, {x: 3}]
11:12 < whiskers75> callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed. < dammit
11:12 < whiskers75> FINALLY
11:13 < whiskers75> DONE
11:14 < whiskers75> The moment of truth
11:14 < whiskers75> AW, come on!
11:14 < whiskers75> /home/whiskers75/jsmc/lib/chunk.js:50
11:14 < whiskers75>     player.save.redstone.outputs.some(function(obj, index) {
11:14 < whiskers75>                                  ^
11:14 < whiskers75> RangeError: Maximum call stack size exceeded
11:14 < whiskers75> What now??
11:15 < whiskers75> pushed latest code 
11:16 < whiskers75> ningu: your code doesn't work
11:16 < ningu> the issue isn't with my code
11:17 < ningu> it's the same error you were getting before
11:17 < whiskers75> I know
11:17 < whiskers75> Why am I getting it?
11:18 < gnarf> call stacks are pretty big, if you are overflowing it it's most likely you have a recursive function thats recursing too much
11:18 < whiskers75> will doing a setTimeout() with the recursing functions work?
11:18 < ningu> no, you're recursing too much
11:18 < ningu> as in: in a way you didn't intend
11:18 < whiskers75> ningu: Well, I need to
11:18 < whiskers75> oh wait
11:18 < whiskers75> well, why?
11:19 < whiskers75> i pushed the latest code
11:19 < ningu> whiskers75: simple way to debug it would be console.log('called blah') at the beginning of each function replacing blah with its name
11:19 < faceleg> because: reason
11:19 < gnarf> where's your recursion?
11:19 < ningu> that's a pretty crude method but it might help
11:20 < whiskers75> gnarf: updateRedstone()
11:20 < whiskers75> ningu: OK, trying
11:21 < gnarf> so updateRedstone is most likely calling updateRedstone which is calling updateRedstone forever
11:21 < gnarf> breaking your stack size
11:22 < faceleg> is Buffer::Data blocking?
11:22 < whiskers75> gnarf: No, it only does that when there is redstone
11:22 < gnarf> whiskers75: add a console.log at the top of that function
11:22 < gnarf> and i bet you discover a recursion bug
11:22 < whiskers75> I get through 8 recursions before the crash
11:23 < whiskers75> no bug..
11:24 < gnarf> try console.trace("Testing here")
11:24 < gnarf> drop that in in the function that is blowing up
11:24 < gnarf> so you can see how big the stack trace is
11:24 < whiskers75> well I got through 1 more by taking a break of 500ms
11:25 < ningu> if (output.x == x && output.y = y && output.z = z) {
11:25 < ningu> ahem
11:25 < gnarf> heh
11:25 < whiskers75> ningu: what?
11:25 < ningu> when you see it...
11:26 < gnarf> = assign, == similar, === same
11:26 < whiskers75> *bonk*
11:26 < whiskers75> hm.
11:27 < whiskers75> still explodes
11:27 < whiskers75> with no log
11:28 < gnarf> did you add console.trace("Testing") before the line it's crashing on?
11:28 < gnarf> you should see a bunch of stack traces
11:29 < whiskers75> woot
11:29 < whiskers75> I got through the delRedstoneOutputs by breaking
11:29 < whiskers75> but now updateRedstone() crashes
11:30 < whiskers75> oh wait
11:30 < whiskers75> no it doesnt
11:31 < whiskers75> ah
11:31 < whiskers75> YES
11:31 < whiskers75> but of course
11:31 < whiskers75> I can't call a function from within the same function
11:31 < ningu> of course you can
11:31 < whiskers75> because the function I'm calling
11:32 < ningu> as long as it doesn't lead to an infinite recursion
11:32 < whiskers75> isn't defined yet :)
11:32 < ningu> eh?
11:32 < ningu> I doubt that's it...
11:32 < whiskers75> TypeError: Object [object Object] has no method 'updateRedstone'
11:32 < whiskers75> it is
11:32 < ningu> >> var test = function() { test() }; test()
11:32 < purr> ningu: RangeError: Maximum call stack size exceeded
11:33 < ningu> no, the issue there is the object is probably undefined entirely whatever it is
11:33 < whiskers75> updateRedstone's a function
11:33 < ningu> it's a prototype method
11:33 < ningu> it will be there on the objects you create
11:33 < whiskers75> yes
11:33 < whiskers75> and
11:33 < whiskers75> it wont
11:33 < whiskers75> be there
11:34 < whiskers75> on th...AH
11:34 < whiskers75> >> var x = function(x); { if (!x) {x(1)}}; x();
11:34 < purr> whiskers75: SyntaxError: Unexpected token ;
11:34 < gnarf> whiskers75: might i suggest one or two read throughs of http://eloquentjavascript.net/ on the toilet
11:34 < ningu> whiskers75: so um
11:34 < ningu> if updateRedstone only ever calls itself and nothing else calls it
11:35 < ningu> why is it being called at all?
11:35 < whiskers75> ningu: It gets called in another function
11:35 < ningu> you said earlier that it didn't
11:35 < whiskers75> which is outside of chunk.js
11:35 < gnarf> whiskers75: the argument "x" is replacing the outside "var x" inside that scope in your quick example
11:35 < ningu> which function?
11:35 < whiskers75> plugins/building.js, a whole 'nother file
11:36 < whiskers75> >> var test = function(x) { if (!x) {test(1)}}; test()
11:36 < purr> whiskers75: undefined
11:36 < whiskers75> >> var test = function(x) { if (!x) {test(1)} console.log('ran');}; test()
11:36 < purr> whiskers75: undefined; Console: 'ran', 'ran'
11:36 < whiskers75> ok
11:36 < ningu> and what is this get_abs_chunk method?
11:37 < whiskers75> so updateRedstone can't be a prototype..?
11:37 < whiskers75> or I need to create a non-prototype version of updateRedstone
11:37 < ningu> well whatever get_abs_chunk is it looks like it must call new Chunk
11:39 < gnarf> ningu: ++
11:39 < gnarf> ningu: you need some bot karma for this ;)
11:39 < whiskers75> i think it does, so what?
11:39 < ningu> whiskers75: it would make sense if you knew what prototypes were :P
11:40 < gnarf> whiskers75: http://eloquentjavascript.net/
11:40 < gnarf> :)
11:40 < ningu> whiskers75: anyway umm... you might want to put a console.log(this) at the top of updateRedstone
11:40 < ningu> but it probably won't help that much to debug this ultimately
11:41 < sgallagh> Just a general request of any Node.js users who run Fedora: we have Node.js packages available in Fedora 18 updates-testing and we would appreciate some testing: https://admin.fedoraproject.org/updates/FEDORA-2012-20578
11:41 < ningu> there are too many moving parts for me to debug this without actually knowing the code
11:41 < whiskers75> ningu: or I just not call updateRedstone and do it later outside chunk.js
11:41 < ningu> whiskers75: nah, that isn't the issue
11:41 < whiskers75> ningu: then what is it?
11:42 < ningu> well, you keep not doing what i say would be helpful :P
11:42 < ningu> so I don't know
11:43 < whiskers75> COMPLETE CODE: github.com/whiskers75/jsmc/tree/redstone - clone it and do whatever you want to it to make it work
11:43 < whiskers75> let's not be in the dark
11:44 < whiskers75> COMPLETE ERROR:
11:44 < whiskers75> /home/whiskers75/jsmc/lib/chunk.js:180
11:44 < whiskers75> 		this.updateRedstone(x + 1, z, y, player);
11:44 < whiskers75> 		     ^
11:44 < whiskers75> TypeError: Object [object Object] has no method 'updateRedstone'
11:44 < whiskers75>     at null._onTimeout (/home/whiskers75/jsmc/lib/chunk.js:180:8)
11:44 < whiskers75>     at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
11:44 < whiskers75> now we all know what's wrong
11:46 < whiskers75> ningu: so can you fix it? or at least tell me where it's failing?
11:46 < ningu> hehe, um, well
11:46  * whiskers75 braces himself
11:47 < whiskers75> well?
11:47 < ningu> I don't even know how you're running the thing
11:47 < whiskers75> ./server.js
11:47 < whiskers75> in the project root
11:47 < whiskers75> and then I go into Minecraft and place a redstone dust
11:47 < ningu> well I don't have minecraft and I'm not going to install it
11:48 < whiskers75> which calls this: https://github.com/whiskers75/jsmc/blob/redstone/plugins/building.js
11:48 < whiskers75> specifically 			    if (packet.slot.block == 331) {
11:48 < whiskers75>                                 chunk.set_block_type(block_x, block_z, block_y, 55);
11:48 < whiskers75> 				chunk.updateRedstone(block_x, block_z, block_y, player);
11:48 < whiskers75>                             }
11:48 < whiskers75> that good enough?
11:49 < whiskers75> ningu: now can you fix it?
11:49 < ningu> maybe for an hourly rate and if i didn't have to get up at a normal time tomorrow
11:50 < whiskers75> I'll pay 0.01 Bitcoins
11:50 < whiskers75> SomeoneWeird: Can you have a shot at it for 0.01 BTC?
11:51 < whiskers75> Anyone? :(
11:52 < whiskers75> oh I give up
11:52 < whiskers75> scrap redstone
11:52 < whiskers75> i can't spend 5 hours on this
11:57 < pachet> 0.01 btc is what
11:57 < pachet> dollar and some cents
11:57 < pachet> compelling :[
12:02 < spion> hmm, the socket passed in httpServer.on('connection', function(socket) { }) isn't readable...
12:04 < spion> or rather, it is readable, but doesn't emit "readable" events.
12:11 < gildean> spion: net.Socket hasn't got such an event
12:11 < gildean> spion: see here: http://nodejs.org/api/net.html#net_class_net_socket
12:35 < spion> gildean, oh I see. it seems compatible with the old stream interface, I assumed it will also be compatible with the new one.
12:38 < spion> gildean, on the other hand it doesn't emit data events either.
12:43 < marcules> Can I use populate on findById?
12:43 < marcules> WIth mongoose
13:16 -!- isaacbw changed the topic of #Node.js to: Closures are everywhere, Chief. - http://blog.nodejs.org/ - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
13:16 <@isaacbw> Let's see how many people are bothered the '.  -' 
13:23 < medice> bothered by
13:24  * medice is bothered by that
13:24 < Havvy> isaacbw: I am not bothered by it, since it's a sentence.
13:25  * boffbowsh twitches
13:31 < fruitFly> what is the best node irc/chat server?
13:32 < fruitFly> best node irc/chat server code that is?
13:34 < Havvy> fruitFly: This one is the official one.
13:35 < fruitFly> Havvy: I want an irc server that i can change the background of etc... so I'm think about hosting my own. I just want to know which open source ones developed in node are the best?
13:35 < Havvy> "Change the background of"?
13:36 < Havvy> "IRC Server" + "background" = ???
13:36 < fruitFly> Havvy: background image etc. maybe have it's own dowain name
13:36 < Havvy> IRC Servers don't have background images.
13:36 < fruitFly> Havvy: just a chat server
13:36 < fruitFly> Havvy: customized
13:37 < fruitFly> i want to allow for users to be abe to private message other users etc.
13:37 < Havvy> Anyways, if you want an IRC server, go with Unrealircd. It's not Node.js, but it works well.
13:37 <@isaacbw> fruitFly: then you want something other than IRC
13:38 < fruitFly> isaacbw: I guess so
13:38 < fruitFly> isaacbw: what are the options like for free ircs? can I get access to the logs, delete them etc?
13:39 <@isaacbw> I think you should read more about what IRC is
13:39 <@isaacbw> you're saying a lot of really strange things
13:39 < Havvy> ^^
13:40 < Gottox> ...I think mauve has more RAM...
13:41 < fruitFly> isaacbw: ok so it's a protocol... but is this window not a gui for that protocol... couldn't freenode edit the aesthetics of this window?
13:41 < fruitFly> Havvy: ^^
13:41 < Havvy> There are hundreds of IRC clients.
13:41 < Havvy> Freenode cannot change the aestetics of the window.
13:42 < Havvy> All Freenode sends is text.
13:42 <@isaacbw> freenode coordinates clusters of servers
13:42 <@isaacbw> freenode does have a web client which it could change the background of, yes
13:42 <@isaacbw> but most users don't use that web client
13:43 < thanpolas> i think fruitfly just needs a node chat application with a nice web interface
13:43 < gkatsev> isaacbw: a surprisingly large amount of people use that client
13:44 < fruitFly> thanpolas: you're right, but I might want to go with a free solution instead of hsoting my own depending on the customizability
13:46 < fruitFly> isaacbw: Havvy thanpolas I want a functional chat application that shows who's in the room and allows private messaging. Where can I set that up for free with the most customizability? Could I bind my own domain to that service as well? It would also be nice if I could customize the interface a little... maybe add a background or something.
13:47 < thanpolas> fruitFly, try googling and check npmjs.org
13:47 < gkatsev> I believe webchat.freenode allows you to customize styling.
13:47 < Havvy> I'd suggest a Mibbit or Kiwiirc Widget
13:47 < Havvy> If the channel is on Freenode, Mibbit is out though.
13:47 < Havvy> And I'm not sure how far the customization options are for Kiwiirc
13:51 < fruitFly> Havvy: gkatsev HAHAHA... I mean to customize the background for clients lol sorry... Does this mean I'll just have to host my own?
13:52 < gkatsev> fruitFly: I'm still not certain what you want exactly but yes, probably.
13:52 < _jorge> Hi, when compiling my own addon (c++ static), I'm getting a "core.node: undefined symbol:" -- the addon works fine if I compile it shared and defining LD_LIBRARY_PATH on run... but I was to have the static one working
13:53 < fruitFly> gkatsev: create a chatroom and make it pretty for the connecting clients
13:54 < _jorge> So what does exactly mean "core.node: undefined symbol" / "node: symbol lookup error: "
13:56 < _jorge> there must be something wrong in the linking step.... any one with experience with nodejs addons c++?
14:01 <@isaacbw> fruitFly: you seem to be actively trying not to understand
14:01 <@isaacbw> you can't customize anything for every client that connects
14:01 <@isaacbw> you can have a customized web client on your site, but other clients will still be able to connect and you will have no control over them
14:02 <@isaacbw> (if you use IRC)
14:02 < fruitFly> isaacbw: not using irc, right? I don't necessarily want to use irc but a custom chat server
14:02 < fruitFly> isaacbw: ooooh right
14:02 <@isaacbw> just do a google search for "free chat hosting" then
14:02 < Gottox> Being that ignorant deserves definitly credit. :D
14:02 < crabtree> i totally recommend using irc
14:03 < fruitFly> isaacbw:  crabtree I agree thanks! :)
14:03 <@isaacbw> if you just want a support channel for a project, then use IRC and don't worry about backgrounds
14:04 <@isaacbw> no one cares about backgrounds
14:05 < crabtree> just use mibbit or something
14:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:07 < _jorge> Does anyone know how to put options AFTER "-o" flag in bindings.gyp? 
14:09 < pachet> you *could* make a pokemon background though
14:09 < pachet> it might be worth it
14:11 <@isaacbw> I hadn't thought of that
14:12 < fruitFly> any recommendations for free irc hosting
14:12 < robbanp> Hi y'all
14:13 <@isaacbw> fruitFly: no. There is no such thing
14:13 < robbanp> Noob question: Trying to install node on Ubuntu. I can nodejs but not "node"
14:13 < robbanp> forever is looking for "node"
14:14 < jameshowe> forever is wrong
14:14 <@isaacbw> there are plenty of networks with free access, however. Freenode, AfterNet, EsperNet, and EFNet come to mind immediately
14:15 < robbanp> How come that all examples are: node myscript.js but Ubuntu only has "nodejs"?
14:15 < jameshowe> "node" is 	Amateur Packet Radio Node program [universe] 
14:15 < jameshowe> the name of a package does not have to be the same as the executables it installs
14:15 <@isaacbw> robbanp: don't use ubuntu repositories for development
14:16 < robbanp> Ok, If I install from git, will that be better?
14:17 < jameshowe> `apt-get install nodejs` will correctly install "node" and "npm"
14:17 <@isaacbw> yes, though you should also be aware of what jameshowe is talking about
14:17 < jameshowe> but it will be version 0.6.19
14:17 < jameshowe> so if you want something up-to-date, get it from git
14:17 <@isaacbw> haha, gotta love ubuntu
14:18 < robbanp> `apt-get install nodejs` will get me "nodejs" and not "node" :)
14:18 < jameshowe> it will get you the package "nodejs", which includes the executable "node"
14:18 < robbanp> If i write "node" it says nothing... no error or anything
14:18 < jameshowe> write it where?
14:18 < robbanp> in the terminal prompt
14:19 < jameshowe> it would either work or say "node: command not found"
14:20 <@isaacbw> robbanp: does it show '>'?
14:21 < robbanp> root@sugarcube:~# node -v
14:21 < robbanp> does nothing
14:21 < robbanp> root@sugarcube:~# nodejs -v
14:21 < robbanp> v0.6.19
14:21 <@isaacbw> which ubuntu release are you on
14:21 < jameshowe> well something's gone wrong there
14:22 < robbanp>  Ubuntu 12.10 
14:22 <@isaacbw> oh wait, I think I know what you have to do
14:23 <@isaacbw> install Archlinux
14:23 < qle> hi
14:23 < robbanp> :D
14:23 < alexwhitman> Uninstall the nodejs package and install it from Chris Lea's PPA
14:24 < robbanp> thanks, any links to where  I can install from that repo?
14:24 <@isaacbw> relying on Ubuntu's repositories is going to keep giving you headaches
14:24 < alexwhitman> https://launchpad.net/~chris-lea/+archive/node.js/
14:24 < jameshowe> yep, they've done it quite wrong http://packages.ubuntu.com/quantal/amd64/nodejs/filelist
14:24 < alexwhitman> https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu
14:25 < alexwhitman> They've taken it from Debian where it was decided that the HAM radio 'node' would keep the name
14:26 < jameshowe> silly Debian
14:26 < robbanp> I'll try! Thanks a bunch !
14:26 < jameshowe> anyway, I'm actually here for some 0.8 socket hang-up help...
14:27 < jameshowe> i have 'error' listeners on both request and response, and agent:false
14:27 < RLa> alexwhitman, wasn't it that both had to change their binary name?
14:28 < RLa> not recommending it but i'm running the master branch from git and everything so far works
14:28 < jameshowe> if the server I'm talking to dies mid-request, the request.on('error') fires correctly, but then another uncaught hang-up is thrown
14:28 < alexwhitman> RLa, it's still called node in debian unstable: http://packages.debian.org/sid/all/node/filelist
14:29 < RLa> hm
14:29 < jameshowe> and I have no idea what's throwing it or why I can't catch it
14:30 <@isaacbw> I would at least pull 0.10 from git if you're going to use it so you can pull quickfixes without waiting for anyone else
14:31 < alexwhitman> RLa, actually, that is now just a transitional package for http://packages.debian.org/sid/ia64/ax25-node/filelist
14:31 <@isaacbw> which seems to be happening every few days
14:31 < stream7> Hi there! I'm looking for an exception notification package. Something similar to ruby's http://smartinez87.github.com/exception_notification/ Anyone have any suggestions for email notifications?
14:32 <@isaacbw> what's that monitoring service that we're supposed to plug because they hang around here?
14:33 <@isaacbw> New Relic
14:33 < boffbowsh> anythingbutairbrake.io
14:37 <@isaacbw> does anyone have a recommendation for a book about designing tests to fill education gaps?
14:40 < jameshowe> hmmmmmm
14:41 < jameshowe> I added the request to a domain and no Socket Hang-ups are raised at all
14:41 < jameshowe> but the domain's error handler isn't either
14:42 < jameshowe> ???
14:50 < spobat> any idea why I cant include this module here? http://ideone.com/ac5fKf
14:51 <@isaacbw> you don't need .js
14:52 < spobat> isaacbw, yeah, I think that doesn't matter, does it? (because it would print "blah" not found otherwise)
14:53 <@isaacbw> are parser.js and server.js in the same directory?
14:53 < spobat> server.js is in /bin parser.js in /node_modules/parser.js
14:53 < spobat> well again: I think the file is found, because otherwise it would print "file not found"
14:57 <@isaacbw> spobat: I just tested it and it works
14:57 <@isaacbw> you're not sharing something
14:57 < spobat> let me see
14:59 < spobat> me silly :S
14:59 < spobat> I had a version 1 from parser.js, which was in node_modules/
14:59 < spobat> but there was another parser.js in /bin (which was the one i modified all the time) t_t
14:59 <@isaacbw> ah
15:00 <@isaacbw> is there a reason you're using the node_modules folder for local modules?
15:00 <@isaacbw> it should really be reserved for npm-installed modules
15:00 <@isaacbw> and use a lib/ directory for local ones
15:01 < spobat> ah, no, there is no specific reason
15:01 < spobat> okay
15:01 < spobat> thanks for the info
15:01 < jameshowe> you (but not I) will be pleased to know my reproduction case stopped working instead
15:02 < jameshowe> sad face
15:06 < wizonesolutions> Writing my first EventEmitter stuff, and I'm a little confused. Does .on only respond to events fired off by the same EventEmitter instance?
15:06 < wizonesolutions> I mean that'd make sense, but just want to have it clear
15:07 < wizonesolutions> emitter.on, that is
15:07 < pachet> yes
15:07 < wizonesolutions> ah.
15:08 < wizonesolutions> So I need to at least set this.on = emitter.on basically and use the class's on. don't instantiate a separate emitter from the caller try its .on
15:08  * wizonesolutions trie
15:08 < wizonesolutions> thanks
15:08 < wizonesolutions> tries*
15:10 < jameshowe> right, a domain to which the request is added can catch the second hang-up, so why can't the error handler on the request itself?
15:10 < spobat>                ja
15:12 < wizonesolutions> sweet that fixed it
15:12 < aslant> Streams2 question: I've got a stream.Readable piped to a stream.Writable. The Readable stream doesn't yet have any data at the time that it is piped. When it does get some data, what should happen?
15:12 < pachet> :]
15:12 < pachet> pipish piping
15:18 < jameshowe> does nobody here have a clue, and i should file a bug?
15:18 < jameshowe> i'm unable to create a simple test case
15:22 < pachet> kids
15:22 < pachet> dont drink and ducktype
15:22 < pachet> thanks
15:24 < aslant> when a stream.Readable gets its first chunk of data, what am I supposed to do to it? Manually call its push event?
15:26 < guor> >> 29234652.90799883.toString(36).match(/[a-z]{5}/g).join(" ")
15:26 < purr> guor: (string) 'hello world'
15:31 < brianc> hi
15:32 < pachet> hi
15:34 < brianc> anyone looking for a full time, work remote node.js job?
15:34 < brianc> note: I am not a recruiter - I am a long time node.js developer (https://github.com/brianc)
15:37 < brianc> PM me if you wanna talk aboot it
15:41 < pachet> aboot?
15:41 < pachet> are you canadian?
15:42 < brianc> haha - no. I don't think they spell it that way either do they?
15:42 < brianc> I was just being silly
15:42 < pachet> lol
15:42 < pachet> so was i
15:42 <@isaacbw> haha
15:42 < Jamy> hehe
15:49 -!- mode/#Node.js [+o ryah] by ChanServ
15:52 < drago> !list
15:55 -!- mode/#Node.js [+o sblom] by ChanServ
16:05 < jtc-workstation-> taking a longshot in node.js (because socket.io couldn't answer), I'm getting a "connections property is deprecated. Use getConnections() method
16:05 < jtc-workstation-> " error when trying to socket.emit io.sockets.clients();
16:05 < jtc-workstation-> an1 know whats up
16:06 < jtc-workstation-> " error when trying to socket.emit io.sockets.clients();
16:06 < jtc-workstation-> yeahâ€¦ that didn't come out quite rightâ€¦.
16:07 <@isaacbw> it looks like the error message tells you what to do
16:07 < jtc-workstation-> can't really get any documentation on that function, fhought someone in node.js been through this before
16:08 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:08 < jtc-workstation-> and this is the next error inline TypeError: Converting circular structure to JSON
16:11 < webdesserts> Hi, I'm trying to build a Presentation to help convince my company to consider using Node.js in future projects
16:11 < webdesserts> Does anyone know some good presentations I can reference for inspiration?
16:12 < webdesserts> also, are there any good resources on the History of JavaScript?
16:13 < bmatusiak> webdesserts look at cloud9  its a compete javascript + html5  IDE for javascript
16:13 < TheEmpath> anyone with any SOA experience for node.js?  looking for the opinions of people who has been in the trenches on the topic.
16:15 < jameshowe> nobody cares about my problems :'(
16:15 < jameshowe> ;)
16:16 < bmatusiak> jameshowe no we don't :P
16:16 < webdesserts> bmatusiak: I'm not looking for examples, I have plenty of those. I'm looking for examples of people explaining it's usefulness
16:17 < bmatusiak> trust me look at http://c9.io/
16:17 < webdesserts> I've used it
16:17 < webdesserts> I know
16:17 < webdesserts> It doesn't help me build a presentation
16:18 < bmatusiak> i got ya,  
16:19 < bmatusiak> you can use that as a resource for collaboration :P
16:25 < whyme> bmatusiak: totally relevant: http://nodeguide.com/convincing_the_boss.html
16:26 < whyme> oops, should've mention webdesserts 
16:29 < webdesserts> whyme: thnx I'm reading it now
16:30 < brianc> jameshowe: what's your prob?
16:30 < jameshowe> socket hang-ups
16:31 < dorner> nice https://github.com/joyent/node/wiki/How-to-migrate-from-ev_io_*-to-uv_poll_*-for-IO-polling
16:31 < brianc> jameshowe: sorry I joined after you were talking about them - what issue in particular?
16:31 < jameshowe> some not catchable via request.on('error'), but are via a domain to which only that request had been added
16:32 < jameshowe> without the domain, I get one or two in the error handler, then an uncaught exception
16:32 < brianc> jameshowe: are you sure it's the request and not the response?
16:32 < jameshowe> yep
16:33 < jameshowe> I only added the request to the domain
16:33 < jameshowe> and I tried with an error handler on the response too
16:33 < brianc> jameshowe: strange - what version of node?
16:33 < jameshowe> (when server I'm talking to crashes mid-response)
16:33 < jameshowe> 0.8.22
16:34 < jameshowe> a) why can't I just have one hang-up error? b) why can't I catch it without a domain?
16:36 < brianc> can you gist like the smallest possible self contained code that reproduces the issue?
16:37 < jameshowe> no
16:37 < jameshowe> I tried, but no
16:38 < MI6> joyent/node: isaacs v0.10 * 234fb12 : http client: Ensure socket cleanup on response end  If an http response h - http://git.io/YR2Q-w
16:40 < brianc> if i can't have code to reproduce it's hard for me to help out
16:41 < jameshowe> i appreciate that
16:42 < jameshowe> but it's still possible to spot bugs in source code without a test case
16:42 < jameshowe> and very easy to write a test case once the bug has been identified
16:43 < pachet> :[
16:46 < MI6> joyent/node: mscdex v0.10 * 030b201 : src: remove unused variables - http://git.io/TEuVJw
16:48 < MI6> joyent/node: Brian White v0.10 * 38106da : src: remove unused variables - http://git.io/nNttjg
16:49 < bnoordhu1s> mscdex: do one thing for me, run `git config --global user.name` please
16:51 < draginx> Anyone here use momentjs? I keep getting a typeerror for a string :/ https://github.com/timrwood/moment/issues/705 for some reason it says object has no method isAfter
16:58 < mscdex> bnoordhu1s: 'mscdex'
17:11 < TheEmpath> any SOA projects of note going on in the Node.js world?
17:14 < Stephen> Streams2
17:35 < khismetix> Question about updating MX recordsâ€¦ brother's company DNS is purchased/renewed with godaddy
17:36 < khismetix> If he makes MX record changes to re-route his e-mail to google business mail....
17:36 < khismetix> Is it possible that people who contact him regularly may be using a stale local DNS cache which may only flush once every 24 hours
17:36 < khismetix> concern is about continuity of e-mail â€¦. 
17:38 < smearcampaign> Is there a good tutorial someone can point me at for using the new streams?
17:40 < khismetix> sorry.. wrong channel, re DNS
17:40 < unsafe> anybody here ever written a webapi wrapper around imap?
17:40 < mscdex> i have
17:40 < mscdex> but not a webapi
17:40 < webdesserts> smearcampaign: here's a short concise post http://dailyjs.com/2013/04/01/streams-streams-streams/
17:40 < mscdex> i've written a nodeapi
17:41 < unsafe> yeah, I'm doing it right now, and it's going fine except it's fairly slow
17:41 < unsafe> mostly because a GET request triggers the connect, mailbox open, search, and fetch
17:41 < bradleymeck> khismetix: yes, so his old email should be set to forward to his new email for a specified period
17:42 < mscdex> unsafe: yep
17:42 < monokrome> Does anyone know why files output by my npm prepublish aren't being added to mynpm package? https://github.com/rentlytics/json-brunch
17:42 < unsafe> mscdex: so you made a module?
17:42 < khismetix> bradleymeck .. hmm .. asking this on #dns now .. but his new e-mail address remains the same.. it is just the mail host that changes ?
17:42 < khismetix> so how would you do forwarding ?
17:42 < mscdex> unsafe: 'imap'
17:42 < unsafe> well then I'm familiar with your work
17:42 < khismetix> but I realise this isn't mail/DNS channel :)
17:43 < unsafe> thanks for writing that
17:43 < bradleymeck> khismetix: well if his email is the same you need to tell the smtp server that is running his old one the new one is where to send it. unsure how he has it set up. if there is a web interface that does forwarding automatically id just do that
17:44 < bradleymeck> may get duplicates for a day, but meh
17:44 < unsafe> I'm trying to give some nice restful endpoints for the thing
17:45 < unsafe> the mailbox identifiers are kind of a drag for URLs-- spaces, slashes, case sensitive...
17:45 < khismetix> bradleymeck : am I right that , even if some users see stale DNS entries that his mail should still be delivered to old inbox ?
17:45 < bradleymeck> yes
17:45 < smearcampaign> webdesserts: thanks!
17:45 < khismetix> i.e he is not closing down his hosting account on the original server.. he is only moving to google so that he can get benefit of IMAP, etc .. better for nomadic email
17:45 < unsafe> there's not another way to address them, is there? Numeric indices or something?
17:46 < khismetix> i.e mails would only bounce if he somehow screwed up the DNS config for the MX records
17:47 < dorner> in my node.js c++ binding, I have raw data in an unsigned char * data, what's the best way to provide this data to the callback? I'm thinking Buffer, but i'm not sure
17:48 < bradleymeck> if it is binary, give it as a buffer
17:49 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:49 < dorner> thanks.
17:50 < mscdex> unsafe: no, only way to identify a mailbox is by its (fully qualified) name
17:51 < unsafe_> under this nick now (conn drop)
17:52 < unsafe_> ok, I guess I can live with some uri encoding
17:53 < unsafe> as for the connection latency, I suppose the best option is to cache the inbox in the webapi storage and do explicit fetch-more
17:56 < unsafe> alright, well thanks again for the library
17:57 < JohnMcLear> Managed to get Etherpad working on Node 0.10, was due to dirtyDB needing an updaet
17:58 < JohnMcLear> One week for a fix that required one character in a package file to be updated :|
18:06 < CoverSlide> welcome to software development
18:06 <@isaacs> JohnMcLear: it's always funny to me when people talk about time.
18:07 <@isaacs> JohnMcLear: "It only took one week for that package to get updated!"
18:07  * isaacs feels like someone who grew up in the age of horses, hearing kids complain about the slowness of airplanes
18:09 < dlbannerman> hhws
18:10 < dlbannerman> New here.  And new to Node.js.  Can somebody help with a problem using npm to install express on a Mac?
18:11 < chapel> dlbannerman: whats the problem?
18:12 < dlbannerman> In terminal entered 'npm install -g express' and got 'error rolling back Error: EPERM, chmod '/usr/local/lib/node_modules/express'
18:13 < jlord> isaacs and all: Backend Dev Skill is now live on DIY.org! https://diy.org/skills/backenddev if you find gross errors, hit me up!
18:13 < chapel> sounds like you don't have permission to /usr/loca/lib/node_modules
18:14 < chapel> dlbannerman: also you shouldn't install express globally, unless you are using hits bootstrapping cli stuff (does it still have that)?
18:14 < StephenS> woh is running node.js?
18:14 < gildean> dlbannerman: global install requires root permissions
18:14 < d3vr> dlbannerman: if your are using -g are you using sudo?
18:14 < brianc> dlbannerman: instead of installing modules globally, install in the project directory and add this to your bashrc file: export PATH=$PATH:./node_modules/.bin
18:14 < dlbannerman> Not using sudo.  Should I?
18:14 < chapel> gildean: not always, depends on if you installed node with sudo, and where your node libs are
18:15 < gildean> chapel: true, but on average node is installed with root perms
18:15 < dlbannerman> Node was not installed using sudo, per instructions in book
18:15 < chapel> gildean: well I have node installed in ~/local
18:15 < chapel> so no sudo required
18:16 < chapel> also, he could chown the node dir in /usr/local/lib
18:16 < dlbannerman> So I just have to set write permission to the sub-directories ?  Or chown what ?
18:16 < chapel> dlbannerman: what brianc said is best case
18:16 < gildean> iirc npm docs recommend using root permissions for global installs so it can set the owner etc.
18:17 < gildean> actually, the docs recommend running npm always with sudo
18:17 < gildean> https://npmjs.org/doc/README.html#Permissions-when-Using-npm-to-Install-Other-Stuff
18:19 < dlbannerman> Use of sudo did complete the global install of express
18:20 < dlbannerman> Anybody want to comment on 'Sams Teach Yourself Node.js in 24 Hours'?
18:21 < chapel> dlbannerman: didn't know there was one
18:21 < chapel> lol
18:21 < dlbannerman> :)
18:22 < bradleymeck> dlbannerman: learning JS then reading the docs may be more useful. Node.js books are pretty hard to keep up to date
18:22 < dlbannerman> Agreed that most books are out of date as soon as they are printed.  Too many changes.
18:27 < asturel> hi which module do u suggest for creating wiki page?
18:30 < geoous> can someone help me with this issue ? http://pastebin.com/ppmnqTWC     - when i run the app it says is listening on port 3000 but when i open on the browser just receive that error and i dont anything else running on that port, already changed the port etc...
18:32 < mscdex> geoous: code?
18:52 < xk_id> Getting Apache reverse proxying & socket.io + express to work: http://stackoverflow.com/questions/12424707/socket-io-with-apache/15771734#15771734
18:57 < geoous> anyone there?
18:57 < xk_id> >1000
18:58 < geoous> xk_id: can you help me with this issue http://pastebin.com/ppmnqTWC
18:58 < geoous> when i run the app it says is listening on port 3000 but when i open on the browser just receive that error and i dont anything else running on that port, already changed the port etc...
18:58 < xk_id> geoous: your 3000 port is already taken by another application/service, so express cannot bind to it. 
18:59 < geoous> no it isn't, i already restarted the computer, already changed the port nothing workrs
18:59 <@Nexxy> geoous, are you sure you're only trying to listen once?
18:59 < geoous> Nexxy: yes, I am.
19:00 <@Nexxy> geoous, do you have a link to the code?
19:00 < webdesserts> ^
19:01 < xk_id> geoous: the code you gave me.. doesn't look like you're even using the express library
19:01 < xk_id> you're creating another server with the 'http' library that listens to port 3000. 
19:02 < xk_id> so if your express is also listening to 3000, there's a conflict. 
19:02 < xk_id> you shouldn't have to create a second server using http.createServer
19:04 -!- mode/#Node.js [+o sblom] by ChanServ
19:07 < TheEmpath> unrelated: robots using tools... node.js involved?  https://www.youtube.com/watch?feature=player_embedded&v=scOd9aILwPY
19:08 < Scrat> file transport in winston is broken on v0.10 due to changes in the stream API, anyone got a solution?
19:08 < gildean> imo it's better to create a http-server with the core http and hand it an express instance as the connectionhandler
19:09 < gildean> that way it's easier to reuse the same http-server for other things too, and for example abuse it's eventemitter
19:11 < fauntle> I'm looking to sandbox some user-supplied code, are there any reliable modules or patterns for this?
19:13 < samholmes> remysharp: Hey, are my jsbins private/encrypted? That would be awesome if they were. When I delete them, can you trace them, or are they gone forever?
19:13 < samholmes> sorry for asking on IRC, it's just that I had a quick question. :P
19:14 < gildean> fauntle: the core has the vm module, but you should read the description and understand it's pretty hard to run unknown code safely: http://nodejs.org/api/vm.html
19:14 < fauntle> gildean: I'm aware of that
19:15 < fauntle> gildean: I mostly just need to ensure that other developers can't supply code that'll cause catastrophe inadvertently
19:16 < gildean> fauntle: maybe spawn a new process and in it run the code in the vm-module?
19:16 < jocafa> you mean i shouldn't just eval() any string i have laying around?  :P
19:16 < gildean> overwrite things like require
19:17 < fauntle> yeah, I've got the basic ideas down
19:17 < gildean> jocafa: that sounds like a plan
19:17 < fauntle> just trying to make sure there isn't someone who's done it better
19:17 < gildean> fauntle: now that i think of it, there was some 3rd party vm module that did just that
19:18 < fauntle> https://github.com/bcoe/sandcastle, https://github.com/mdp/pitboss, https://github.com/hflw/node-sandbox ?
19:19 < gildean> fauntle: also: https://npmjs.org/package/sandbox
19:19  * jocafa evals all the things
19:19 < fauntle> yup
19:19 < gildean> jocafa: with a public web ui to input code too?
19:20 < jocafa> of course!
19:28 < harrisonm> >> eval('"jocafa that is terrible do not do that"')
19:28 < purr> harrisonm: (string) 'jocafa that is terrible do not do that'
19:28 < jocafa> (i know i'm being silly)
19:28 < harrisonm> (i know so am i)
19:29 < jocafa> (ok cool. what other bad advice can we give?)
19:29 < jocafa> hehe
19:29 < danheberden> invest in AOL
19:30 < jocafa> snap. i wasn't going to go THAT far.
19:31 < asturel> >> require('child_process').exec("pwd", function (error, stdout, stderr) { console.log(stdout); });
19:31 < purr> asturel: ReferenceError: require is not defined
19:35 < StephenS> does node.js supports mysql?
19:35 < StephenS> !mysql
19:35 < StephenS> !help
19:36 < pachet> look up the node-mysql library by felixge
19:36 < webdesserts> https://github.com/felixge/node-mysql
19:36 < StephenS> ok and is node.js express the same as node.js?
19:36 < pachet> no
19:36 < webdesserts> no
19:36 < pachet> its a routing framework
19:36 < StephenS> express is module?
19:36 < pachet> you use it w----yes
19:36 < webdesserts> StephenS: yes
19:36 < pachet> express is module
19:36 < pachet> module is good
19:36 < StephenS> I want to work with html real time events?
19:36 < webdesserts> it's not just routing though
19:37 < StephenS> which modules do I need except mysql?\
19:37 < pachet> what in blazes are html real time events
19:37 < StephenS> well like chat etc\
19:37 < pachet> jocafa: invest in aol, and whenever your pokemon start evolving, spam the b button
19:37 < pachet> it makes them a LOT stronger
19:37 < StephenS> live interactions without running ajax calls everytime
19:38 < StephenS> also can I use jquery inside node code?
19:38 < webdesserts> StephenS: you're probably wanting socket.io
19:38 < StephenS> Im already there but chan is dead
19:38 < StephenS> Can I ask in here about socket.io ?
19:38 < StephenS> since its module
19:38 < pachet> StephenS: you can theoretically use jquery in node, but why would you want to
19:38 < webdesserts> yes, you can use jquery, but you won't have access to the DOM
19:38 < pachet> i mean, you could use it to do headless testing but
19:38 < pachet> i doubt that's what you mean
19:39 < StephenS> ok and I can use node.js to interact with php?
19:39 < pachet> :[
19:39 < StephenS> I know node is server side, but I am used to php
19:39 < pachet> :{{{{{{{{{
19:39 < _marvin__> but its JS 
19:39 < _marvin__> why would you want to connect up with php
19:39 < _marvin__> doesnt make sens 
19:39 < _marvin__> benefits of node will be gone 
19:40 < webdesserts> if you want a php website with a node.js chat server
19:40 < webdesserts> I would suggest spinning up two different servers
19:40 < webdesserts> and possibly connecting them with a json api
19:40 < _marvin__> webdesserts: thats php with calling an node api but he asked conencting node with php thats the other way around ^
19:40 < _marvin__> :)
19:41 < Damn3d> if you are used php then use php not node.js
19:41 < StephenS> well I have website in php
19:41 < StephenS> sign up form use ajax, but I wonder, I want to use node only for chat apps
19:41 < _marvin__> then do so
19:41 < StephenS> so that is possible right? without rewriting whole web?
19:41 < Damn3d> if you wanna use node only then dont' use php
19:41 < _marvin__> yes
19:42 < StephenS> nice :)
19:42 < _marvin__> StephenS: yes but that has more todo with client side JS connecting to nodejs not directly with php 
19:44 < StephenS> _marvin__, yes i understand
20:03 < MI6> joyent/libuv: Ben Noordhuis master * 3a8c398 : sunos: fix syntax error introduced in 76d831e4  Moving around the code fo - http://git.io/ZC2IGQ
20:03 < brianc> hey anyone in here looking for a node.js job? PM me if you are - I have an opening.
20:04 < brianc> p.s. sorry to sound like a recruiter - promise not to bring it up again
20:07 < pachet> we're all secretly php devs
20:07 < pachet> we masquerade as node experts to feel cool
20:07 < webdesserts> we just use node for chat servers :)
20:08 < _marvin__> i use nodejs for system deployment, management and monitoring ^^
20:09 < brianc> pachet: we have some php work as well if you like YII
20:09 < brianc> yii
20:09 < brianc> whatever the casing may be
20:09 < rossk> i use node to write php for me
20:10 < brianc> hehe
20:11 < brianc> anyone know what's the major focus for v0.11 in node?
20:11 < deoxxa> well that'd be 0.12
20:11 < brianc> right right
20:12 < webdesserts> brianc: http rewrite from what I understand
20:12 < brianc> webdesserts: awesome thanks. 
20:12 < brianc> webdesserts: do you know if they're moving the http parsing into JavaScript?
20:12 < webdesserts> might also be fixing some issues with ssl
20:13 < webdesserts> can't remember off the top of my head
20:13 < webdesserts> there was a NodeUp where they discussed this
20:13 < tjfontaine> brianc: for starters just cleaning up lib/http.js so it's not a pain to maintain
20:14 < brianc> tjfontaine: lovely
20:14 < zenetik> do you know if "spawn" stdout is readed with a buffer having a random size or if it's line by line (\n delimiter) ?
20:15 < deoxxa> zenetik: it's neither
20:15 < tjfontaine> zenetik: var c = spawn('foo'); c.stdout.pipe(process.stdout);
20:16 < deoxxa> zenetik: it's not a "random size" - the number of bytes that stdout spits out depends on the buffering settings in the application that's doing the outputting
20:17 < zenetik> deoxxa: tjfontaine: i've tested a spawn of tail -f on a file which is in fact a fifi created by mkfifo, got another node js process or bash loop to write 100 000 lines. I didn't succeed to read line by line in stdout
20:17 < zenetik> i've tried to use stduf before tail -f without luck
20:17 < pachet> zenetik: take a look at the API doc for child_process
20:18 < pachet> spawn() in particular
20:18 < deoxxa> zenetik: correct, because it's not just magically going to split things up into lines for you
20:18 < pachet> note the stdio parameter
20:18 < deoxxa> zenetik: you'll have to do that yourself
20:18 < zenetik> pachet: already did that, and already test all possible parameter (pipe, stdio, ..)
20:18 < deoxxa> zenetik: basically a newline character isn't anything special as far as the stream is concerned
20:19 < yawnt> hai world
20:19 < deoxxa> zenetik: if you're using node 0.10 it's crazy easy to do what you want though
20:19 < zenetik> ha ?
20:19 < zenetik> i'm using 0.10
20:19 < zenetik> i'm listening to you :)
20:20 < zenetik> i've tried many things, settimeout to read concatenated buffer and the put result of spliting "\n" in an array, read by another settimeouted function ..
20:21 < zenetik> going crazy, i'm sure there is a simple and stupid way
20:21 < zenetik> but didn't find it
20:21 < zenetik> i can paste my actual code, but too many people will launch
20:21 < zenetik> will smile
20:21 < pachet> :[
20:21 < deoxxa> zenetik: https://gist.github.com/deoxxa/5295806
20:22 < zenetik> ouch
20:23 < zenetik> i'm far away from that ! :)
20:23 < deoxxa> zenetik: that's just off the top of my head, but then you do `var splitter = new LineSplitter(); something.stdout.pipe(splitter);' and splitter.read() will give you lines
20:23 < zenetik> sound's good
20:23 < zenetik> got a pizza to eat
20:23 < deoxxa> \o/
20:23 < deoxxa> pizza ftw
20:23 < zenetik> and test that immediatly :)
20:23 < chilts> I keep thinking packages names like stream-transform-line-splitter would be awesome (e.g. stream-transform-json2object, stream-transform-uppercase, stream-transform-whatever)
20:23 < pachet> ~~
20:23 < pachet> \\o
20:23 < zenetik> thanks a lot deoxxa !
20:23 < pachet> pizza flip
20:23 < chilts> stream-duplex-<whatever>
20:24 < chilts> ie. really small stream packages which do one thing well :)
20:24 < pachet> stream-pokemonize
20:24 < deoxxa> chilts: burro! https://github.com/naomik/burro :>
20:24 < deoxxa> but yeah, i get you
20:24 < chilts> I've seen burro ... I'm thinking of using it :)
20:24 < chilts> something consistent in package naming
20:25 < chilts> all the connect stuff is connect-*, grunt-*, awssum-* etc
20:25 < chilts> well, for plugin type stuff anyway
20:25 < zenetik> mscdex: hi man ;) when you'll have 2mn for this one https://github.com/mscdex/node-ncurses/issues/34 i didn't found any explanation :( thanks a lot !
20:32 < zenetik> challenge proposal
20:32 < zenetik> rewrite ngrep using node + node-pcap
20:33 < zenetik> second one, rewrite airodump-ng lol
20:42 < SandorKrasna> hello everyone im trying to use winston logger with express
20:42 < SandorKrasna> having trouble writing to a file
20:42 < SandorKrasna> has anyone done this before
20:46 < squeakytoy> anyone used mustache with node?
20:47 < squeakytoy> their API is messed up
20:47 < squeakytoy> -.-
20:47 < squeakytoy> they are telling us to use: https://github.com/raycmorgan/Mu <-- an on that site, there isn't any example on how to compile a template to a string
20:48 < sadtaco> With socket.io, the socket object gets garbage collected after disconenct, right?
20:48 < squeakytoy> its soo frustrating how bad it is
20:48 < sadtaco> So if I add things to the socket object, they'll get cleaned up?
20:50 < webdesserts> squeakytoy: have you tried hogan or handlebars? I've had a better experience with their libraries.
20:50 < webdesserts> I know that's not really helping
20:50 < squeakytoy> ill try and find, thanks
20:54 < faceleg|work> plates is pretty good too
20:55 < squeakytoy> i cant believe how hard it is to get a decent tempalte engine into node
20:56 < squeakytoy> you cant use handlebars in a live environment, it seems
20:56 < squeakytoy> like you can with mustache
20:56 < deoxxa> squeakytoy: there are so, so many good template libraries for node
20:56 < squeakytoy> could you name a very popular and easy one?
20:56 < deoxxa> jade is probably the most popular
20:56 < deoxxa> it's not exactly what you're looking for though
20:57 < deoxxa> i.e. it doesn't use double-grumpies to do variables
20:57 < squeakytoy> just simple template engine, template + data = html
20:57 < deoxxa> (double-grumpy: {{)
20:57 < rossk> swig is another template engine that we use
20:57 < deoxxa> squeakytoy: i wrote https://github.com/deoxxa/node-ginger and you might have luck with it, but it's basically a dead project now
20:58 < deoxxa> squeakytoy: but it's mostly dead because it has all the stuff i need it for and it doesn't crash
20:58 < squeakytoy> thas exacatly what i Dont want :-)
20:58 < squeakytoy> some rogue strange template engine, please
20:58 < deoxxa> so take that how you want
20:58 < webdesserts> if you're looking for mustache styled templating I preferÂ http://twitter.github.com/hogan.js/ over handlebars
20:58 < squeakytoy> i think thats 180 of what i asked :<
20:58 < rossk> squeakytoy: http://paularmstrong.github.com/swig/
20:59 < deoxxa> i thought hogan was abandoned
20:59 < deoxxa> good to see it's not!
20:59 <@piscisaureus_> mscdex: I'll pull most of your lint patch. Do you mind if I just make some changes myself?
20:59 <@piscisaureus_> mscdex: what linter are you using btw?
21:00 < squeakytoy> webdesserts, i need to learn about differences handlebars compared to hogan
21:00 < chilts> deoxxa: I like the idea that it is "Safe runtime, no direct variable access in compiled templates"
21:00 < chilts> I'm sure I've had Jade crash on me when I didn't pass a var into the template
21:00 < chilts> which I'm not a fan of
21:00 < chilts> in those cases, does ginger just output nothing (ie. '')
21:00 < chilts> ?
21:00 < deoxxa> yep
21:01 < chilts> sweet
21:01 < chilts> I might give it a try :)
21:01 < deoxxa> well, technically, it outputs "" + undefined which is ""
21:01 < deoxxa> lol
21:01 < deoxxa> there's a small gotcha there - if you do something like
21:01 < deoxxa> {{ a.b.c|some_filter }}
21:01 < deoxxa> and some_filter doesn't check for undefined
21:01 < deoxxa> it'll probably explode
21:01 < deoxxa> but you can do
21:02 < deoxxa> {{ a.b.c|default("")|some_filter }}
21:02 < chilts> right, but filters shoudl expect that I guess
21:02 < deoxxa> and it'll be all good again
21:02 < deoxxa> yeah
21:02 < squeakytoy> thanks all
21:02 < chilts> filters should be able to cope with anything thrown at it and not crash :)
21:02 < deoxxa> yeah exactly, heh
21:02 < chilts> in fact, as you said above, ginger doesn't crash - that's the thing I want _most_ from my template engine
21:02 < deoxxa> yeah, if it can compile the template, it can run it
21:03 < chilts> e.g. I've done allt he scary stuff with DBs, datastores, validations, Redis etc ... then when I hit the template I want to know it's just gonna work
21:03 < chilts> cool
21:03 < deoxxa> and it's kind of expected that you'd compile them ahead-of-time for production
21:03 < deoxxa> fun fact: "gari", the name of the tool for compiling templates, means "pickled ginger" in japanese :P
21:03 < wc-> hi all, i have hit a snag with requesting a url then iterating over the contents, i have a feeling this is a basic misunderstanding of how node or javascript works, my gist is here: https://gist.github.com/wescleveland/e9e03834ab400e5c4c86
21:04 < wc-> if i throw in a debugger, it seems like the for loop is jumped over, and the sports dictionary is empty when it is passed to the scrapeMLB function
21:04 < mscdex> piscisaureus_: that's fine with me. i'm just using cppcheck
21:04 < deoxxa> wc-: doesn't look like javascript to me :>
21:04 < wc-> sry its coffeescript 
21:05 < deoxxa> i note that you're not checking for errors
21:05 < wc-> i feel like im misinterpreting how the callbacks work or something
21:05 < wc-> i can throw a debugger in right befor ethe for loop and see that there are elements in that array i am iterating over
21:06 < chilts> deoxxa: cool! :) am definitely going to play with it now
21:06 < chilts> thanks
21:06 < deoxxa> :D
21:08 < wc-> oh i think i found my mistake
21:09 < wc-> isnt there some saying about looking for the hard problem when the solution is really easy?  that was me
21:09 < webdesserts> I thought "" + undefined was "undefined"?
21:09 < chilts> yeah, it is ...
21:10 < webdesserts> whoops I was scrolled up a bit, alittle bit behind in the convo >_<
21:10 < deoxxa> hrm
21:10 < deoxxa> um
21:10 < chilts> :)
21:10 < deoxxa> maybe i have my logic wrong there then
21:10 < deoxxa> but it does output ""
21:10 < deoxxa> >_>
21:10 < chilts> yeah, but your tempaltes are obviously right :)
21:10 < chilts> dang typing
21:11 < chilts> too hard basket
21:11 < deoxxa> yeah lol
21:20 < SandorKrasna> anyone use winston for loggin?
21:21 < faceleg|work> passport!
21:21 < deoxxa> loggin*g*
21:22 < zenetik> SandorKrasna: yes, but limited usage (stdout + color + date format)
21:23 < SandorKrasna> I need to write to a file instead of console
21:23 < SandorKrasna> Im trying app.use(express.logger({stream:winstonStream})); with no luck
21:23 < deoxxa> SandorKrasna: lucky you, your terminal has you covered! ./app.js > log
21:24 < SandorKrasna> that won't work
21:24 < deoxxa> yes it...what?
21:24 < SandorKrasna> in production we won't be starting the server like that
21:24 < deoxxa> it find it's usually better to leave that to your process monitoring system anyway
21:24 < SandorKrasna> we're using monit 
21:24 < deoxxa> i.e. just have the application write to stderr/stdout and let the supervisor log it to disk
21:24 < deoxxa> well
21:25 < deoxxa> do that
21:26 < SandorKrasna> you mean use monit to write the logs and not middleware
21:26 <@Nexxy> you would probably want to use >>
21:26 < deoxxa> SandorKrasna: bingo
21:26 < deoxxa> SandorKrasna: it means your application becomes less complex, which is always good
21:27 < deoxxa> Nexxy: i live life on the edge
21:27 <@Nexxy> lol
21:27 < SandorKrasna> true
21:27 < deoxxa> Nexxy: that's nothing though, i use mongodb with {safe: false}
21:27 < deoxxa> i'm just that hardcore
21:28 <@Nexxy> just keep telling yourself that
21:28 < deoxxa> i do
21:28 < deoxxa> almost constantly
21:28 <@Nexxy> you are so badass
21:28 <@Nexxy> a true webscale rebel
21:29 < deoxxa> all members of the "nick contains xx" club are badass
21:29 <@Nexxy> agreed.
21:29 < deoxxa> so that goes for you too, little buddy
21:29 < deoxxa> oh damn son
21:29 < deoxxa> got a new member
21:29 < facelegxx> w00t
21:29 <@Nexxy> lol
21:30 < deoxxa> xxblakefailxx is twice the man i am
21:31 <@Nexxy> actually
21:31 <@Nexxy> I believe there is a point of diminishing returns
21:31 < deoxxa> that might be true
21:31 < deoxxa> optimal x ratio and such
21:31 <@Nexxy> mhmm
21:31 < faceleg|work> optimal x ratio is 0
21:32 < deoxxa> lol
21:32 <@Nexxy> incorrect!
21:32 < SandorKrasna> anyone mining bitcoins today?
21:32 < faceleg|work> objection noted
21:42 < prettyrobots> Hello Nexxy!
21:50 < zenetik> deoxxa: ping ?
21:50 < prettyrobots> Node.js is doing that thing where it just wants to work.
21:51 < prettyrobots> Or JavaScript rather.
21:53 < zenetik> deoxxa: http://pastebin.com/trfBKqbK
21:53 < zenetik> deoxxa: LineSplitter doesn't work, but i probably made a bad code 
21:59 < prettyrobots> Is ES6 something I need to know now?
22:00 < ljharb> no
22:00 < ljharb> it's not even finalized yet.
22:00 < prettyrobots> Should I be designing for it now, because that's where the puck will be?
22:01 < ljharb> not imo. ES5 will work everywhere for the forseeable future.
22:01 < prettyrobots> I've been following a debate between the Mozillans and the noders on the Twitter.
22:02 < prettyrobots> Well, not really following. It's confusing.
22:02 < ljharb> what debate
22:07 < diminoten> how do you change the port of the debugger?
22:10 < nanashiRei> What would be a good exception tracking package? :)
22:10 < prettyrobots> Stuff like this...
22:10 < prettyrobots> https://twitter.com/mikeal/status/319134693087907840
22:10 < nanashiRei> Or in general health monitoring
22:11 < zenetik> deoxxa: ping
22:13 < evanmoran> Does anyone know how to get the destination of a symbolic link in node?
22:13 < evanmoran> fs.lstat lets you know if it is a link, but I'm not sure how to get where it points..
22:17 < evanmoran> Ah got it. The answer is fs.readlink
22:19 < reid> nanashiRei: I have not used it, but https://bugsnag.com/
22:21 < mikeal> prettyrobots: you build for what *can* work now
22:21 < mikeal> if and when something else happens, great
22:21 < mikeal> but here's the thing about Promises
22:21 < mikeal> they've been around, in JavaScript, for well over 8 years
22:21 < prettyrobots> mikeal: I wish I'd not worried about older browsers for as long as I did.
22:21 < mikeal> and nobody has agree on what the best API is
22:22 < mikeal> so now they want to standardize, basically to stop that debate about which API is better and to focus on compatibility
22:22 < mikeal> and they think that they can do that with a DOM API
22:22 < prettyrobots> Now reading: http://www.futurealoof.com/posts/broken-promises.html
22:22 < mikeal> which is absolutely insane
22:22 < mikeal> because there's not a single DOM API that developers love to use without a library
22:22 < deoxxa> zenetik: you're not actually using the line splitter thing at all
22:23 < st_luke> mikeal: websockets
22:23 < mikeal> huge portions of the frontend ecosystem are built on top of DOM abstractions for the simple reason that DOM apis are very poorly designed
22:23 < deoxxa> zenetik: you want to do something like `var line_splitter = new LineSplitter(); tail.stdout.pipe(line_splitter);' then read from line_splitter
22:23 < mikeal> websockets is TERRIBLE API
22:23 < mikeal> why do you think people use socketio :)
22:23 < st_luke> mikeal: fallback
22:23 < prettyrobots> mikeal: The whole ES6 thing makes me feel like they are shifting the ground under something that had finally become stable.
22:23 < mikeal> standards bodies are where vendors agree to eventually NOT disagree
22:24 < mikeal> that is their value, and i'm glad vendors do that *somewhere*
22:24 < st_luke> socket.io is also promoted really well
22:24 < mikeal> so, if something is impossible in the platform, we push standards bodies to fix it
22:24 < mikeal> and then push vendors to implement
22:24 < st_luke> and most people can't adopt regular websockets because their platform needs to support err'one
22:24 < mikeal> standards bodies are the absolute worst place to design an API layer developers will enjoy and build an ecosystem for
22:24 < prettyrobots> mikeal: I wish I was closer to where these conversations were taking place. There is a lot of intelligent discussion, I'm sure, that doesn't come through Twitter and I don't have time to read a listserv like ES6.
22:25 < st_luke> prettyrobots: unfortunately the promises stuff on twitter has been mostly garbage, it paints a really bad picture
22:25 < mikeal> my point of view is that you should look at what is successful now
22:25 < mikeal> and build on that success
22:26 < mikeal> and not use some kind of blessing like a standards body to advocate work people didn't care enough about to fix in the community
22:26 < mikeal> let standards bodies focus on making things possible that aren't possible yet
22:26 < prettyrobots> mikeal: Are you on a Podcast somewhere talking about this?
22:27 < mikeal> NodeUp sometimes
22:27 < mikeal> i also write about it quite a lot
22:27 < prettyrobots> Was there a NodeUp on standards.
22:27 < mikeal> and i speak a lot, and those are on video usually
22:27 < st_luke> mikeal: it keeps getting worse, because it feels like the point of view is turning into "the node community" is a weird fringe group
22:27 < mikeal> best talk i did on this was at JSConf.au which was not recorded tho
22:27 < prettyrobots> I'm interested in hearing people talk about the meta of this standards process.
22:27 < mikeal> a weird fringe group of far more developers, modules, and actual work happening
22:28 < mikeal> vs. people who like to talk on mailing lists
22:28 < prettyrobots> I feel I made a mistake starting out my Node.js develoment in CoffeeScript. 
22:28 < mikeal> that's a mistake, but a common one :)
22:28 < prettyrobots> I lost time. I don't want to lose time in same way.
22:28 < mikeal> it just limits how much of the ecosystem you can easily be involved with
22:28 < mikeal> it doesn't disconnect you entirely, but it is limiting
22:29 < chilts> and limits what people contribute to your own projects
22:29 < mikeal> standards bodies have absolutely no awareness of two things: momentum and productivity.
22:29 < chilts> (if in Coffeescript)
22:29 < prettyrobots> It's all gone now, but I was really put off of JavaScript by "The Good Parts".
22:29 < st_luke> i dont think the standards bodies care about communities of people that are getting things done if these people arent being nice about their opinions
22:29 < prettyrobots> Too many stupid little rules to follow. I thought CoffeeScript could follow them for me.
22:30 < mikeal> st_luke: we're nice about our opinions for the most part, the thing is: standards bodies only value input if you play by the rules of that body
22:30 < mikeal> they are pretty hostile to feedback that is not through their own process
22:30 < prettyrobots> I'm getting used to people not being nice on the Internet.
22:30 < st_luke> I got called out on a bunch of negative tweets about es6, i dont care anymore, they can ruin it
22:31 < prettyrobots> st_luke: Can they ruin it?
22:31 < mikeal> st_luke: like today: i responded fairly agressively for sure, but what they were suggesting was that where things were going is entirely incompatible with everything that is happening now
22:31 < st_luke> prettyrobots: they're the only ones that can ruin it
22:31 < mikeal> they're basically advocating that people invest in a future that is totally unproven and that we've already tried and left behind because it wasn't a good idea
22:32 < prettyrobots> I'm afraid that it's going to end up like Java, with a huge wierdo API that has an Apache Commons equiv for everything.
22:32 < mikeal> and because we won't send that feedback their committee in a format they approve they'll label the feedback as negative
22:32 < prettyrobots> mikeal: I looked at their modules thing, and it looks like COBOL to me.
22:33 < prettyrobots> And I don't understand why Node.js isn't the model for binary data in JavaScript.
22:33 < st_luke> mikeal: it just takes too much energy to discuss this stuff when there's clearly no impact on the people making the decisions. I can either use energy to argue about programming language or I can do what I know works, and build stuff.
22:33 < st_luke> and then the ad hominem starts and I give even less of a shit what happens
22:34 < st_luke> there's no solution
22:34 < st_luke> it's a people problem
22:34 < prettyrobots> Okay. I can see that there is a community problem.
22:34 < mikeal> the fundamental leap in logic you have to take in order to believe ES6 will take off in the ecosystem is that: 1) people will just compile down all their es6 code to es4/5 until es6 has 99% market penetration and that 2) ECMA will build such an amazing language that people will prefer to use it and compile down than anything else the community can produce over the next decade
22:34 < mikeal> that's a huge leap in logic
22:35 < st_luke> tc39 is an outsourced human resources department
22:35 < prettyrobots> Which is what I was asking, really. I'm feeling like I'm getting almost ot the point where I have some cool modules to share with the community, I want to make sure that they're not going be all wrong and unadoptable because ES6.
22:35 < mikeal> prettyrobots: like i said, they don't like to look at what has been successful in their own community, they would rather pull features from other languages the people on the committee have an affinity for
22:35 < st_luke> mikeal: it's not their own community
22:35 < mikeal> prettyrobots: that's not something you need to worry about
22:36 < mikeal> because for that to be the case ES6 has to succeed in adoption
22:36 < prettyrobots> mikeal: Ah! That's great. I want to hear that there is going to be an ongoing competition.
22:36 < mikeal> basically, it has to be adopted by developers at a greater rate than node.js has been
22:36 < st_luke> enjoy javascript while it lasts
22:36 < mikeal> which is the biggest success story in modern platforms
22:36 < prettyrobots> mikeal: I'd be happy to see people sticking with ES5 and making ES6 go the way of XHTML (or the like).
22:37 < mikeal> "the good parts" will be ES5 for quite a while
22:37 < prettyrobots> mikeal: Nice.
22:37 < mikeal> i mean, some things will make it in to node for performance optimizations, like WeakMaps or WeakRefs
22:37 < mikeal> but there's a lot of growth right now in node modules that work in the browser
22:38 < mikeal> so i wouldn't except it to gain heavy adoption in the ecosystem
22:38 < prettyrobots> But, yeah, once bitten. I don't want to find that a library that doesn't support ES6 loses out.
22:38 < mikeal> i mean, Firefox has an install base of 300M
22:38 < mikeal> and stuff like taskjs that only runs in Firefox has never gained enough adoption to be considered an option 
22:38 < st_luke> es6 makes me want to die.
22:39 < mikeal> all ES5 code runs in ES6
22:39 < prettyrobots> I was using CoffeeScript and Streamline, and Node.js people don't like compiled langauges. Now I'm doing callbacks religously, but there are these promises coming into vogue, maybe I need to rewrite my flow control to use generators, promises, something else.
22:39 < mikeal> if they think they can define a module system and gain adoption that isn't compatible with node's, which is the most successful module system of the last decade, i think they are high
22:39 < prettyrobots> WeakMaps would be really useful in a project of mine.
22:39 < shesek> "Node.js people don't like compiled langauges"? huh?
22:40 < mikeal> Promises aren't in vogue, they are a thing smart people like to yell about, but most modules don't use them
22:40 < mikeal> by some definition of node.js people
22:40 < mikeal> i will say that, this community values compatibility more than most
22:40 < mikeal> its probably the biggest community difference with Ruby
22:40 < prettyrobots> mikeal: Yes, that.
22:40 < mikeal> people don't congradulate you just for building something new and clever
22:41 < shesek> coffeescript being the 4th most popular package in npm doesn't seem to agree with that
22:41 < mikeal> if it's not compatible it's met with some hostility
22:41 < shesek> but I guess it does depend on your definition of "node people"
22:41 < mikeal> shesek: haha, that means that about 2% of modules in npm use coffeescript
22:41 < mikeal> so yeah, not much
22:42 < prettyrobots> shesek: I know. But, my experience is that when I used CoffeeScript and Streamline, there was pushback.
22:42 < prettyrobots> I don't want pushback. I want adoption.
22:42 < AAA_awright> If I wanted to write ECMAScript, I'd write ECMAScript
22:42 < AAA_awright> What's this compiled nonsense
22:42 < nanashiRei> reid thanks! it works great. Even supports asana tasks :D
22:43 < mikeal> Streamline is met with more hostility than CoffeeScript, to be honest
22:43  * nanashiRei is happy
22:43 < shesek> well, if you're trying to get help/feedback from people about non-coffeescript-specific issue, you should definitely ask with javascript code
22:43 < reid> nanashiRei: Hooray! Rock on.
22:43 < prettyrobots> AAA_awright: Yes, that's what they sounded like. You have big names in the Node.js community pushing back on compiled languages.
22:43 < AAA_awright> GOOD
22:43 < AAA_awright> There's nothing wrong with ES
22:43 < deoxxa> prettyrobots: specifically compile-to-javascript languages. i haven't seen anyone here hating on C lately :>
22:44 < AAA_awright> Compile human-readable to supposed-to-be-human-readable
22:44 < prettyrobots> deoxxa: I try to tell people that C is big with the new generation. They don't believe me.
22:45 < prettyrobots> In any case, I'm curious to learn about what's happening with the standards. What you're saying about the module system...
22:45 < mikeal> deoxxa: there is some resistance to compiled modules, but for practical technical reasons
22:45 < deoxxa> oh yeah
22:45 < deoxxa> but it's not outright hostility
22:45 < mikeal> for instance, nothing with a build step is allowed in to my product
22:45 < deoxxa> it's like "hrm, that's going to be hard to work into production"
22:45 < mikeal> so we can't take compiled modules, or anything that uses and npm build hook
22:45 < deoxxa> not "oh my god, are you serious? worst thing ever."
22:45 < mikeal> yeah
22:46 < deoxxa> i'm a big fan of pure javascript modules too
22:46 < prettyrobots> As someone who is investing in node, I want to hear that, that node's contributions won't, uh, tha they won't defer to these other strange APIs.
22:46 < mikeal> node has made a bigger commitments to compatibility than any platform i know of
22:46 < shesek> mikeal, people usually pre-compile coffeescript modules, so there shouldn't be any problems
22:47 < mikeal> shesek: i've seen people do them on install, which is the wrong way but it still happens
22:47 < prettyrobots> Very sorry for starting the compiled language debate.
22:47 < shesek> but yeah - even as a coffeescript user, I avoid modules that don't do that
22:47 < prettyrobots> Very, very sorry. I am not a troll. I swear.
22:48 < shesek> I wish npm didn't have an install hook at all
22:48 < prettyrobots> I'm heads down trying to write out all my modules and want to make sure that when I'm ready to publish, that there won't be a need for a rewrite. From the sound of it, I don't have to worry. Hearing people debate modules and control flow, that's a cause for concern becuase changing those things significantly changes the shape of the ecosystem.
22:48 < shesek> I haven't seen anything that can't be handled with prepublish and and gyp
22:49 < shesek> s/and and/and
22:49 < prettyrobots> So, thanks for the feedback mikeal.
22:51 < dorner> people i work with make fun of me for loving node.js
22:51 < prettyrobots> dorner: They're on the wrong side of history.
22:51 < dorner> yup
22:52 < dorner> well put
22:53 < diminoten> hey so is it possible to add a breakpoint to a c library
22:53 < diminoten> that gets called in node
22:54 < dorner> i've never tried, but what's wrong with 'b <symbol name>' ?
22:54 < dorner> in gdb
22:54 < dorner> or are you talking about a different kind of breakpoint, hah
22:54 < mikeal> diminoten: you can do something *like* that with dtrace, not a breakpoint but you can get out the info you might want
22:54 < dorner> stable dtrace for linux? is it here yet
22:54 < mikeal> nope :)
22:54 < diminoten> yeah I want var dumps
22:54 < dorner> :(
22:55 < mikeal> https://github.com/dtrace4linux/linux
22:55 < dorner> every time i hope dtrace4linux will be working/stable, it crashes my box within 24 hours
22:55 < diminoten> well I just need it for this one bug
22:55 < diminoten> it can feel free to crash tomorrow night :-P
22:55 < dorner> what about oracle linux? do they have their own dtrace implementation, or did that die out?
22:56 < dorner> dtrace is amazing, how linux doesn't have a stable port of it is beyond me
22:56 < dorner> that dtrace replacement for linux doesn't compare, forget the name off top
22:56 < dorner> i never ran it on my box because i had to literally recompile UTRACE into it or something
23:02 < prettyrobots> "If you write a module that returns Promises nobody's going to care."
23:02 < prettyrobots> Now I see how the feelings got hurt.
23:03 < prettyrobots> I'm looking over the promises material from James and watching the LXJS video.
23:03 <@Nexxy> simmer
23:03 <@Nexxy> prettyrobots, :)
23:04 < prettyrobots> Nexxy: You're tweet yesterday made me email biting mad.
23:04 < prettyrobots> Grr!
23:04 <@Nexxy> lol
23:04 < prettyrobots> FYI: I'm @bigeasy.
23:04 < mikeal> prettyrobots: there's a better version of that talk recorded in Dublin
23:05 <@Nexxy> yesh
23:05 <@Nexxy> I knew that!
23:05 < prettyrobots> Yup.
23:05 < prettyrobots> Can I ask you a question about that experience, or am I just bumming you out?
23:05 <@Nexxy> are you talking to mikeal or me? 
23:05 < prettyrobots> Nexxy: You.
23:05 <@Nexxy> sure, in PM though
23:06 < prettyrobots> Oh, sure.
23:06 <@Nexxy> thanks :)
23:06  * prettyrobots fiddles with all the shiney buttons on the control panel
23:06 <@Nexxy> I msg'd you haha
23:15 < CoverSlide> woo! robots! me and a coworker are building this beast: http://inmoov.blogspot.com/
23:15 <@Nexxy> CoverSlide, are you using ROS?
23:16 < CoverSlide> ROS? 
23:18 < CoverSlide> i dunno, we're starting simple with a few arduinos, we probably will stop once we get a working arm
23:18 < CoverSlide> but work is letting us use their 3d printer
23:21 < livinded> I wish I had a 3d printer...and knew how to use CAD
23:22 < ningu> I wish I was a cad
23:22 < CoverSlide> you can teach yourself
23:22 < willwh> zing
23:22 < willwh> who is to say you're not ningu ?
23:22 < willwh> :D
23:22 < CoverSlide> and send your designs to shapeways or ponoko
23:22 < ningu> willwh: it's a lifelong project
23:22 < willwh> it's a mindset
23:22 < willwh> ;]
23:23 < willwh> cad: A man who behaves dishonorably, esp. toward a woman.
23:23 < ningu> 3d printing will have arrived when people are actually 3d printing assault rifles like that guy proposed doing when obama proposed an assault weapons ban
23:23 < willwh> screw living in the US :)
23:24 < willwh> gun toting loonies :)
23:24 < willwh> (I lived there for 7 years, I speak from first hand experience)
23:24 < ningu> willwh: there was a segment on the daily show this week about a guy in arizona who wants to protect guns from people
23:24 < willwh> hahaha
23:24 < ningu> he wants to make it illegal to destroy guns
23:24 < willwh> well, I come from Scotland, and live in Canada.
23:24 < ningu> their runs must be protected
23:24 < ningu> rights*
23:25 < willwh> mental health support in N. America is awful
23:25 < ningu> willwh: I am not disputing anything you said about our craziness on this point
23:25 < willwh> you want to talk about a zmbie apocalypse?
23:25 < willwh> it's here :P
23:25 < ningu> oh, yeah, that too... it's getting better very slowly
23:25 < dorner> "why are you against universal background checks?" => "think of all the paperwork it'll create"
23:25 < dorner> -- usa
23:26 < ningu> what I want to know is why has no one proposed universal foreground checks
23:26 < willwh> ningu: it's a huge problem in canada too
23:26 < dorner> precrime? coming soon
23:26 < willwh> is this like FTL communications?
23:26 < deoxxa> ningu: i keep screwing that one up and tripping over cables
23:26 < willwh> I laughed my ass off @ the IETF april fools
23:26 < willwh> :D
23:26 < willwh> and did you guys see cisco made EIGRP an open standard?
23:26 < dorner> debian's april fools was great too
23:26 < willwh> DIE OSPF, DIE!
23:27 < willwh> ;]
23:28 < ningu> so on a semi-serious topic... I was reading about mongrel2 last night and I have to say my main conclusion was: why would someone use this? what problem does it solve?
23:28 < ningu> am I crazy or sane?
23:29 < context> ningu: but it works with tons of languages
23:30 < ningu> context: when your app is an http server ...
23:30 < ningu> although I can't quite tell if we're at the point now where everyone agrees that apps should be http servers
23:30 < ningu> but if they aren't... what are they?
23:31 < context> CGI > http
23:31 < context> ningu: i will say there is a lot more to http than you think ;)
23:31 < ningu> context: huh? I never said what I think there is to http
23:32 < ningu> it was a question about the current static of the web app world that I honestly don't know the answer to
23:33 < ningu> namely: if you aren't using php or some-such do people -- say, asp, django, rails, whatever framework -- assume your app your be an http server?
23:33 < ningu> should be*
23:34 < ningu> I can't type today
23:34 < context> ningu: i def. do see some overlap going on. i think the app server itself should be able to be a little more 'trustworthy' of the server you put in front of it. i dont see why nginx and mongrel need to 'double-process' a request
23:34 < ningu> context: yeah, I'm not arguing about whether you need front-end servers. but if your app is, say, fastcgi then you obviously *need* a web server on the front end.
23:35 < context> yeah
23:35 < ningu> but it does seem like nowadays most everyone has gone with the app = http server model unless I am mistaken
23:35 < ningu> mongrel advocates routing urls to zeromq apps
23:35 < asimovic> Hi all 
23:35 < context> zeromq is a lot less overhead.
23:35 < ningu> but all of this *mq stuff is really hard for me to wrap my head around
23:36 < context> a LOT less
23:36 < livinded> been meaning to start looking into zeromq and peer discovery for decentralized pubsub
23:36 < faceleg|work> decentralization is for communists
23:37 < ningu> faceleg|work: I think you have that backwards sorry to break it to you
23:37 < prettyrobots> faceleg|work: I would imagine that the opposite is true.
23:37 < prettyrobots> ningu: jinx.
23:37 < willwh> faceleg|work: I love your outlook 
23:37 < willwh> aqhahahaha
23:37 < faceleg|work> express
23:37 < faceleg|work> disagreeing with me is for communisits
23:37 < faceleg|work> dammit
23:37 < ningu> omg I love your outlook. what you've done with your inbox just makes the room
23:38 < faceleg|work> Margins? Who needs 'em
23:38 < willwh> as long as it ain't win8 mail
23:39 < willwh> or any win8 native app for that matter
23:39 < willwh> what a horrible pile of steaming shite!
23:39 < ningu> context: anyway I'm all for less overhead, my question is, does it make sense to go with zeromq for a "normal" web app that isn't using sockets etc.?
23:39  * willwh hugs xfce
23:39 < willwh> I'm out folks o/
23:39 < ningu> willwh: were you on fire?
23:40 < faceleg|work> ningu stop it
23:41 < faceleg|work> I thought we had this discussion
23:41 < faceleg|work> humour just isn't your thing
23:41 < ningu> haha
23:41 <@Nexxy> lol
23:42 < ningu> nom nom typos
23:43 < ningu> context: any thoughts? that was actually a real question :)
23:44 < context> ningu: eh? well every [web] app is using sockets. i guess define "normal"
23:44 < context> ningu: no for your general app running, its prolly def. not needed
23:44 < ningu> context: a page that renders html from templates at a particular url, with query/body parameters
23:45 < context> ningu: though if mongrel2 makes it that easier to get rid of that kind of overhead, why not spend some time getting it up and running. im sure it wasnt a 10 minute upgrade for github to change stuff over to zeromq
23:45 < ChrisPartridge> i heard it took them 9 minutes
23:45 < ningu> context: and my question isn't so much whether it's "needed" as... well, how straightforward the transition would be
23:46 < context> premature optimization is bad i will agree... but if its easy and there is a 90% it helps you and doesn't hurt its worth playing around with
23:46 < ningu> i.e. whether you could plausibly just route http requests to a zeromq server that receives some info about the request or whatever
23:46 < ningu> or if that would just be pointless
23:47 < ningu> anyway I am capable of using the google
23:49 < locoloco> hi all, quick question: is there an easy way to figure out the type of an object ?
23:49 < Sorella> locoloco, what would you consider the "type" of an object. And what kind of objects are we talking about?
23:50 < Sorella> (bear in mind that JS is not a typed language, so it has no types)
23:50 < jden> Sorella that's not strictly accurate. It is dynamically typed and without classicaly inheritance, but there are still types
23:50 < context> if you are writing code that needs to know 'the type' of an object, you should reconsider what you are doing
23:51 < Sorella> jden, JS has value tags. And there's what the spec calls a "type". And then there's what the spec calls a "brand".
23:52 < jden> locoloco for primitive value types there is typeof. beyond that, as others have hinted at, type-based pattern matching or dispatching is usually not the best approach in JavaScript
23:52 < Sorella> context, it's okay sometimes, if you're relying on a native behaviour that can not be emulated by any other thing. E.g.: functions.
23:53 < Sorella> For all other purposes, I'd consider structural typing checks.
23:53 < locoloco> for example, http.createServer accepts listener callback with request and response  
23:54 < locoloco> is tere something similar to console.log( req.constructor) which will tell me that request is instance of http.IncomingMessage 
23:57 < Sorella> locoloco, for logging purposes you can *try* to use x.constructor.name, on the off-chance that object was created through a constructor, which isn't guaranteed to be the case (or really unlikely in some libraries)
23:58 < Sorella> locoloco, but the thing is: type has little meaning in JS. The conflation of types and classes, that languages like Java mistakenly do, has even less meaning in JS. We only ever have objects, and those objects have no special branding that categorises them as A or B.
23:59 < Sorella> locoloco, if you give a more concrete usecase, there might be another way of doing what you're trying to do without going through all this XY problem.
--- Log closed Wed Apr 03 00:00:10 2013
