--- Log opened Wed Mar 27 00:00:10 2013
--- Day changed Wed Mar 27 2013
00:00 < monokrome> I throw it into ./node_modules and expect require('inform') to find it
00:00 < context> moonlite_: when you 'make' there is no './lib/inform'
00:01 < context> monokrome: *
00:01 < monokrome> Right. `make` creates that based on compiling the scripts in "src"
00:01 < context> monokrome: no. there is NO "./lib/inform" AFTER running `make`
00:02 < context> there is ./lib/notifier/index
00:02 < monokrome> oh it's putting it in notifier
00:02 < monokrome> rofl :(
00:02  * ChrisPartridge laughs
00:02 < monokrome> I renamed the package
00:02 < monokrome> Thanks, context 
00:02 < context> #firstworldproblems
00:02 < monokrome> rofl
00:02 < monokrome> That fixed it :(
00:02 < monokrome> thanks rofl
00:02 < context> isnt there a better way to do that than Makefile's 
00:03 < monokrome> Maybe, but the only way that I've seen is either Cakefile or this horrible setup.js mess
00:03 < monokrome> Both of which require more code for building
00:03 < monokrome> However, Cakefile probably supports Windows :/
00:06 < cramrod> Sorry Chris.  This is as close as I got http://pastebin.com/b3QAvEZh
00:07 < monokrome> Making a Cakefile that just uses coffeescript to compile a directory's contents out into another one is hard than you'd think :/
00:07 < monokrome> or I just don't know how
00:07 < ChrisPartridge> cramrod: are you using express, or just the http module? or something else?
00:09 < cramrod> Sorry.  Im using express
00:11 < howdynihao> i want to say, its because you requests in a loop
00:11 < cramrod> I feel like the solution has something to do with "cursor" but I cant quite figure it out.
00:11 < ChrisPartridge> cramrod: well, it looks like you are trying to send allResults, when there is nothing in allResults
00:12 < cramrod> Thats what ive concluded as well...but Im not sure why its empty
00:13 < ChrisPartridge> inside the callback, try do blah.toArray(function(err, items) { response.send(items); });
00:14 < ChrisPartridge> that's if you are using the mongo module I think you are using
00:22 < cramrod> I tried it.  It kills node with error "[object] [Object]"*2 has no method toArray
00:23 < ChrisPartridge> cramrod: what mongo module are you using?
00:23 < cramrod> require("mongojs")
00:26 < cramrod> but Im very much open to using another if it makes me more effecient
00:29 < LuckyBurger> what do you need help with cramrod ?
00:31 < cramrod> LuckyBurger!  Im trying to load the results of a MongoDB find() into an array then execute a response.send containing the array.  Whats the best way to do this? Is there a way to access all of the results inside of the find() callback function?  I feel like the solution has something to do with the cursor but I cant quite figure it out. http://pastebin.com/b3QAvEZh
00:31 < cramrod> ChrisPartridge is taking a look at it but you're welcome to as well if you'd like.
00:32 < LuckyBurger> cramrod what you will need is the async lib
00:32 < LuckyBurger> since the DB calls run async
00:32 < LuckyBurger> so you run them all in parallel
00:32 < LuckyBurger> then after they are finished send them
00:32 < LuckyBurger> ?
00:32 < cramrod> Ive never heard of the async lib.  Ill look that up.
00:36 < tbrock> anyone have other ideas regarding my client/server problem in the learning node book?
01:01 < ChrisPartridge> cramrod: btw, you should just be able to do db.collection.find(function(err, docs) { response.send(docs); }); using the "mongojs" module - as per the docs
01:26 < ozette> using express, i am trying to send over foo.js with app.get("/scripts/:filename"); var filename = response.params.filename and response.sendfile("/scripts/"+filename). but my foo.js in /scripts/ can't be found. now this is the same directory, and ./scripts/ also gives me a 404. request url was: http://127.0.0.1:1334/scripts/foo.js
01:26 < agu10^> Hello
01:27 < agu10^> I am trying to start making my WEBSITE using node.js. Should I use express? what templating system? anything else?
01:27 < Zolmeister_> ozette: its not a good idea to take user input and spit out a file
01:27 < Zolmeister_> that being siad, try removing the '/' in front of the file path
01:27 < ozette> agu10^, hi agu, yes nodejs is wonderful .. i'm using te nunjucks engine for my templates
01:28 < faceleg|work> the first example agu10^ I use express with no templating system
01:28 < ozette> Zolmeister_, ok i will try, thanks for the tip
01:28 < agu10^> faceleg|work, but is that for making websites?
01:28 < Zolmeister_> agu10^: use Dust.js templates
01:28 < agu10^> how do you make the html, faceleg|work ?
01:29 < Zolmeister_> http://linkedin.github.com/dustjs/
01:30 < Zolmeister_> agu10^: function(req, res){res.sendfile('index.html')}
01:30 < agu10^> ohh i see
01:30 < agu10^> i already have html files but i would like to modify their DOM
01:31 < agu10^> also I want to translate documents using i18n or gettext
01:32 < Zolmeister_> agu10^: put your static html in the /public directory (I think that should work), as for dom manipulation put your JS in /public also
01:33 < agu10^> ?
01:34 < Zolmeister_> ?
01:35 < agu10^> i have no idea what you're talking about
01:35 < agu10^> why does it matter how i organize my directories?
01:36 < agu10^> are we talking about using dustjs here? or without templates
01:36 < Zolmeister_> the /public directory in express is used to serve static files
01:36 < Zolmeister_> oh, I see, you want to translate your html to dust.js templates?
01:37 < ozette> dustjs looks pretty neat, too bad i am already using nunjucks, coming from a jinja2 background.
01:37 < agu10^> Zolmeister_, nope
01:37 < ozette> Zolmeister_, removing the preceding "/" did not work unfortunately
01:38 < Zolmeister_> well, then I guess the path is wrong. try logging the path its trying to access and make sure its correct relative to your app.js file
01:39 < agu10^> Looks like dust.js requires me to run many ugly commands
01:40 < Zolmeister_> agu10^: I guess i'm not clear on what your trying to accomplish exactly
01:41 < agu10^> I want to make a website, using the html pages i already have. I need to be able to use i18n on them. And modify their DOMs server side
01:41 < ChrisPartridge> agu10^: most template engines can handle that no worries, obviously you need to handle i18n through a separate module, but should be quite easy to pass this into your views on the server side
01:42 < agu10^> What is Express used for? It looks like it doesn't add much to node. Does it?
01:42 < ChrisPartridge> agu10^: Express is built on top of connect, it's essentially a sinatra style framework
01:42 < agu10^> i have no idea what that means.
01:43 < agu10^> don't know sinatra or connect
01:43 < agu10^> pretty much sounds like more abstraction layers but idk what they're useful for
01:43 < ChrisPartridge> well, it is an abstraction on top of http
01:44 < howdynihao> it adds a couple of useful components that you would have to write yourself otherwis
01:44 < agu10^> Ok. that's all it does?
01:44 < Zolmeister_> agu10^: I suggest you play around with express for a bit, you will quickly understand why its useful
01:44 < ChrisPartridge> agu10^: read the guide and api reference on expressjs.com
01:44 < agu10^> i did
01:45 < agu10^> there wasn't much except 'express introduces .send()'
01:45 < howdynihao> so you're going to write your own http request body parser?
01:46 < howdynihao> or if you need session support, you're going to write your own ?
01:46 < agu10^> nope. just use the built in functions
01:46 < agu10^> I don't need sessions. it's just a website
01:46 < howdynihao> there are no built in functions
01:46 < howdynihao> for those things
01:47 < agu10^> ohh okay
01:47 < agu10^> then what does http.createServer do?
01:47 < agu10^> just give you a plain text TCP socket?
01:47 < howdynihao> creates an http server
01:47 < ChrisPartridge> creates a basic http server
01:48 < agu10^> without request parsing???
01:48 < agu10^> why not use tcp sockets instead then
01:48 < Zolmeister_> are you trolling?
01:48 < gaf> ofc
01:48 < agu10^> ... it's called http but it does not add any http features? lol
01:48  * ChrisPartridge sighs
01:49 < ChrisPartridge> http://nodejs.org/api/http.html
01:49 < gaf> rtfm
01:51 < monokrome> So, if I have `"main": "lib/inform"` in my package.json - then shouldn't I be able to require 'inform/notification'
01:51 < monokrome> which is in lib/inform/notification.js
01:51 < agu10^> Okay so express provides the missing functions to create a webserver. 
01:52 < agu10^> But does not provide enough for server-side scripting inline with html
01:52 < monokrome> express wraps Node's webserver to be more easy to use
01:52 < agu10^> okay
01:52 < monokrome> and adds some functionality for common things like template rendering and configuration
01:53 < agu10^> cool
01:54 < howdynihao> you are very critical for someone who is not that experienced
01:55 < ChrisPartridge> agu10^: essentially - net (tcp socket) -> http (req,res handling) -> connect (middleware, body parsing, gzip, static, etc) -> express (application structure/helpers)
01:55 < niggler> howdynihao are you saying only the experienced can be critical?
01:55 < agu10^> I'm not critical, just couldn't understand 
01:55 <@mbalho> someone make an ungrateful  irc noob meme
01:55 < howdynihao> informed is probably a better word
01:56 < agu10^> Anyways, while i run node example.js, and i modify example.js, i still get the old page. Is there a way not to have to restart the server?
01:56 < niggler> !g ungrateful noob meme
01:57 < niggler> err
01:57 < niggler> https://forums.wildshadow.com/node/21014
01:57 < ChrisPartridge> we also need an "asking to ask" meme
01:57 < howdynihao> agu10^: i'm curious what other language do you know of that has a standard library that comes packed with all the stuff you're expecting?
01:57 < agu10^> php? asp.net? ruby on rails?
01:57 < monokrome> Does node not resolve all path in my module into the directory from "main"? If not, how do you make it so that I can require things from my lib/packagename directory?
01:57 < niggler>  monokrome ./
01:58 < niggler> require('./lib/foo/bar')
01:58 < howdynihao> rails isn't standard
01:58 < monokrome> I'm not talking about from inside the project itself
01:59 < monokrome> I'm talking about the interface provided frmo my project to third party libraries
01:59 < agu10^> howdynihao, it's pretty standard
01:59 < niggler> monokrome? 
02:00 < agu10^> there's almost no ruby without rails
02:00 < howdynihao> agu10^, its not part of ruby's standard library, it's 3rd party is what i meant
02:00 < monokrome> niggler: Not from inside MY project, from inside projects using my library
02:00 < monokrome> IE, if someone needs to require my library's notification object
02:01 < agu10^> howdynihao, techinicalities...
02:01 < niggler> you export it monokrome 
02:01 < TehShrike> isaacs: I don't think I've told you this before, but I really appreciate your commitment to node's Windows compatability.
02:01 < niggler> TehShrike compatibility
02:01 < howdynihao> agu10^: how so? it's the exact same thing, if you're ok with installing ruby then installing rails, why is it such a bother to install nodejs then install express?
02:01 < monokrome> niggler: I'm trying to ask how to reference it's file so that I can access it's export
02:01 < TehShrike> niggler: UGH I wondered why my dictionary didn't have that word >_<
02:02 < agu10^> howdynihao, it does not bother. what bothers is it's missing the rest of the stuff. templating system. etc.
02:02 < niggler> why not have a function in your module that can take required module?
02:02 < agu10^> I'm having issues deciding for so many templating systems
02:02 < monokrome> I have a file in my project `/lib/example/notification.js` and I want another project to install my project and do: `require('example/notification').Notification`
02:02 < ChrisPartridge> agu10^: http://garann.github.com/template-chooser/
02:02 < agu10^> I'm asking for a standard or most used framework
02:03 < monokrome> niggler: I know ways to solve it that way, but that's a suboptimal solution if I can get the function built into node to do it properly.
02:04 < ChrisPartridge> agu10^: then have a look at some of the other full stack frameworks, express uses a lean model so you can build a modular web application
02:04 < niggler> monokrome whats wrong with require('./example/notification')
02:05 < monokrome> niggler: I am literally asking how to get that to work.
02:05 < monokrome> The node convention is to put your stuff in lib
02:05 < agu10^> ChrisPartridge, oh i see
02:05 < monokrome> so you'd need to require 'example/lib/example/notification' - which is silly
02:05 < monokrome> so I'm asking if node has a way to say "Hey, node! example is in lib/example!"
02:05 < TehShrike> monokrome: oh, you want to read http://nodejs.org/api/modules.html
02:06 < agu10^> What is stylus? the fuck
02:06 < faceleg|work> agu10^: yeah that's why I like express, suits me
02:06 < niggler> you can symlink monokrome 
02:06 < niggler> or create a package.json 
02:06 < faceleg|work> agu10^: is there a standard most used? who knows
02:07 < monokrome> I have a package.json and am asking how to get node to look in lib/example
02:07 < monokrome> TehShrike: I don't see where that documentation is related
02:07 < ozette> Zolmeister_, the reason i got the 404, was because the "init" script i am using is in another diretory. the server on :1334 was invoked thereafter ..
02:07 < ozette> i hadn't expected this
02:08 < niggler> monokrome you create it in the target lib/example
02:08 < monokrome> right
02:08 < monokrome> https://github.com/LimpidTech/inform
02:08 < Zolmeister_> ozette: huh, well glad you figured it out
02:08 < ChrisPartridge> agu10^: stylus is like sass
02:09 < TehShrike> monokrome: so you're saying you understand the concept of modules completely, and you're just asking about specifying paths outside of the normal node_modules traversal?
02:09 < agu10^> ChrisPartridge, you mean saas?
02:09 < agu10^> oh nevermind
02:09 < agu10^> like css preprocessor
02:09 < ChrisPartridge> yeah pretty much
02:10 < ozette> Zolmeister_, yes, thanks. now i prefixed it with __dirname, ie. response.sendfile(__dirname+"/scripts/"+filename); and all works well .. :)
02:10 < monokrome> TehShrike: I understand how modules work (unless that has changed a lot since node 0.2.x) and the changes around 0.5.x for ./node_modules/ and such - what I don't undestand is how to property make my library files accessible to other projects properly. I can do require("example/lib/example/notification") but that seems crazy. Isn't there a way to say that my package (example) has all of it's files in
02:10 < monokrome> example/lib/example?
02:10 < monokrome> s/property/properly/
02:11 < niggler> monokrome you could cheat and make another module
02:11 < TehShrike> monokrome: ok, gotcha
02:11 < monokrome> niggler: No, I shouldn't.
02:11 < TehShrike> monokrome: I have your answer
02:11 < TehShrike> You use npm/listing dependencies in the package.json
02:11 < monokrome> I am using npm
02:11 < niggler> that requires a separate git repo
02:11 < TehShrike> monokrome: and during development, you use https://npmjs.org/doc/link.html
02:11 < monokrome> https://github.com/LimpidTech/inform
02:11 < monokrome> I did npm link
02:12 < monokrome> I can do require('example'_
02:12 < TehShrike> monokrome: you're asking how to do it from within the same repo?
02:12 < monokrome> I can do require('example')
02:12 < monokrome> but I can't do require('example/notifications')
02:12 < monokrome> TehShrike: No, from the repo of other people using my repository
02:13 < monokrome> In this case - we would need to do: require('example/lib/example/filename')
02:13 < TehShrike> Are their modules not in npm?
02:13 < monokrome> Is there a way to make it so that you can just do require('example/filename') without changing the conventional project file layout?
02:13 < idefine> monokrome: would you be fine with something like this: var notifications = require('example').notifications;
02:13 < monokrome> It's the module that I'm working on, and it's on npm
02:14 < monokrome> idefine: I would prefer to not require a bunch of stuff and simply export it
02:14 < linq`> Good evening fine gentlemen and ladies. I have a question. Is it possible to refer in an npm package.json to a local git repository, instead of a remote one?
02:14 < linq`> that is, I wish to be able to npm install all needed dependencies, including a few local repositories.
02:14 < monokrome> My original question is simply if I can have a project using the file structure of my scripts being in lib/example and letting projects using my library require files from lib/example with the syntax: require('example/filename')
02:15 < monokrome> Here's the file structure: https://github.com/LimpidTech/inform
02:15 < monokrome> Running `make` converts everything in src into lib/inform/
02:16 < TehShrike> Oh, no, I don't think there's anything to facilitate that.  The node community is a pretty big fan of the "one thing per module" concept at this point.
02:16 < monokrome> Thought so. Thanks :)
02:16 < TehShrike> But you could have the main point of your include return an object whose properties each corresponded to one of those files
02:16 < niggler> linq` you can directly link to repos
02:16 < TehShrike> Which is what idefine was alluding to I'm pretty sure
02:17 < monokrome> Yeah, I usually do it that way - but every time that I do it I feel horrible about it.
02:17 < linq`> niggler: can you help me figure out the incantation to allow that to take place? I've attempted using file:////home/foo/bar.git with no success
02:17 < ChrisPartridge> pretty sure he was, and it's essentially what most people do, if they need to
02:17 < niggler> linq` for example I needed a fix that was applied to `marked`: https://github.com/Niggler/voc/blob/master/package.json#L12
02:17 < niggler> oh linq` you need to use the git protocol
02:17 < monokrome> IE, why require all these files when they're probably not even being used by certain projects? :/
02:17 < idefine> TehShrike: yes
02:17 < niggler> you could also use a tarball
02:17 < TehShrike> monokrome: why not have them in separate modules?
02:17 < ChrisPartridge> monokrome: then yeah, that's when you should probably think about separate modules
02:17 < linq`> niggler: how can I indicate, using the git protocol, that the files reside locally? 
02:18 < TehShrike> monokrome: you're already making people download them when they don't need them if they're all in the same module
02:18 < monokrome> I will be
02:18 < linq`> niggler: or would I need to use something like gitolite to emulate a git daemon
02:18 < idefine> monokrome: what about it upsets you?
02:18 < niggler> you can run the git daemon directly linq` 
02:18 < monokrome> Yeah, that's true. The only weird thing is that they use a lot of the same code.
02:18 < linq`> Curses. I didn't want to have to do that niggler
02:18 < niggler> https://npmjs.org/doc/install.html linnea_ 
02:18 < niggler> damnit
02:18 < niggler> https://npmjs.org/doc/install.html linq`
02:18 < TehShrike> monokrome: I was tempted to do similar things, but once I found npm link, my life became awesome and module development was easy and water started tasting like honey
02:18 < niggler> you can put a tar ball up on your website
02:18 < niggler> and then link to it
02:19 < monokrome> Yeah, I already use npm link
02:19 < linq`> niggler: tarball is out as far as I'm concerned. I want zero packaging. This is purely for local development.
02:19 < monokrome> or just symlink manually
02:19 < niggler> oh you can do link
02:19 < TehShrike> monokrome: because then I could create 3 new baby modules that relied on each other and write them from the ground up without having to copy things around
02:19 < niggler> https://npmjs.org/doc/link.html @ linq` 
02:19 < monokrome> Yeah, I understand. I did that before npm had link :P
02:19 < TehShrike> monokrome: yeah, npm link is just an easy symlink plus a couple handy things
02:19 < monokrome> ln -s
02:19 < linq`> monokrome, niggler: the hope is to use the utility of npm install as a single step process. No bizzare steps that I"m going to forget about later
02:20 < TehShrike> monokrome: well, that makes you smarter than me :-)
02:20 < niggler> linq` this is a one-time process
02:20 < monokrome> Not really
02:20 < linq`> niggler, monokrome I know how to make a symbolic link. It's just an additional step. I may submit a feature request, because having the filesystem protocol for git is just too handy
02:21 < linq`> thanks for your suggestions anyway
02:21 < monokrome> linq`: I wasn't suggesting anyhting toward your issue
02:21 < monokrome> What is your issue?
02:21 < linq`> oh, monokrome sorry I misunderstood you
02:22 < TehShrike> linq`: yeah, monokrome and I were talking about npm link independently
02:22 < linq`> I'm working with a number of repos, and I want to be able to refer to local git repositories without the need to push it to github or tarball or running some daemon
02:22 < TehShrike> Refer to them to what purpose?
02:22 < linq`> single command npm install, and local repos are fetched and placed within the node_modules directory as normal packages from remote git repositories would be
02:22 < linq`> that's my goal
02:23 < TehShrike> linq`: you can set up a local npm instance
02:23 < TehShrike> That sounds like what you're looking for
02:23 < monokrome> Can you use file URLs in npm?
02:23 < linq`> TehShrike: That's actually an interesting idea. 
02:23 < niggler> that's a bit more intense TehShrike 
02:23 < TehShrike> It is, for sure
02:23 < linq`> monokrome: yeah, you can actually refer to git:// protocol urls
02:23 < linq`> monokrome: it's handy as hell
02:23 < TehShrike> But it's the next thing I can think of that would do all the npm things he's asking for after npm link
02:23 < monokrome> well in git you can do
02:23 < linq`> monokrome: I was just curious if I could use the file:////some/git/repo.git
02:23 < monokrome> file:///home/monokrome/Projects/something.git
02:24 < monokrome> you can clone that as a bare repository
02:24 < linq`> monokrome: yeah, tried that with no avail unfortunately
02:24 < monokrome> :(
02:24 < linq`> Unless I'm doing something wrong
02:24 < linq`> oh wait
02:24 < linq`> bare repo
02:24 < linq`> I think you're on to something
02:24 < linq`> I forgot to make it bare!
02:24 < monokrome> Yeah, or you can use the .git folder. If it's not a bare repo you can do
02:24 < monokrome> file:///home/monokrome/Projects/something/.git
02:24 < monokrome> the .git folder is just a bare repo sitting in a working directory
02:24 < linq`> Holy crap
02:24 < linq`> That's an awesome idea
02:24 < monokrome> but if you ever plan on this history working anywhere else, don't commit file:/// URLs
02:25 < linq`> Brilliant. I'm going to try that
02:25 < monokrome> also remember that you need the root after the two slashes, so there are three slashes
02:25 < linq`> monokrome: yes, of course. Purely for local development ease at this point
02:25 < linq`> right
02:25 < linq`> I always forget if its 3 or 4, but that makes sense
02:25 < monokrome> However, I don't know if npm is smart enough to know that file:// URLs are git. I don't know how it'd figure that out without looking at the files. So, who knows.
02:25 < niggler> its not configured to do file://
02:25 < linq`> monokrome: I'll try it anyway..
02:25 < agu10^> I have an html and a node server. How do i return the html to a get request?
02:25 < linq`> niggler: oh, :(
02:26 < agu10^> and how does the css and javascript files get retrieved too?
02:26 < agu10^> I have my website made in html, js, css. But how do i make those files available through express?
02:27 < ChrisPartridge> static
02:27 < niggler> line`: https://npmjs.org/doc/install.html The format of the git url is:
02:27 < niggler> <protocol>://[<user>@]<hostname><separator><path>[#<commit-ish>]
02:27 < niggler> <protocol> is one of git, git+ssh, git+http, or git+https
02:27 < s5fs> agu10^: http://expressjs.com/api.html search for express.static
02:28 < buzzedword> agu10^: here's a snippet of what it looks like configured: https://gist.github.com/buzzedword/5bfe94d244dea0ef4ef8-- read the docs for full usage
02:28 < faceleg|work> how does one document a native node module?
02:29 < TehShrike> faceleg|work: they're already documented!
02:29 < TehShrike> http://nodejs.org/api/
02:30 < agu10^> s5fs, i would put css and js in static?
02:30 < faceleg|work> TehShrike: lolwut
02:30 < faceleg|work> TehShrike: you know people can make their own native modules right?
02:31 < s5fs> agu10^: yeah, absolutely.
02:31 < TehShrike> faceleg|work: you mean compiled modules?
02:31 < faceleg|work> yes, modules that are written in C++/JS and compiled 
02:31 < faceleg|work> "native"
02:31 < TehShrike> faceleg|work: sorry, I read your statement incorrectly
02:31 < s5fs> agu10^: check out the link, its good stuff
02:31 < faceleg|work> np
02:31 < faceleg|work> TehShrike: do you know how people generally document them?
02:31 < faceleg|work> i.e. C++/JS separately? If so what tools?
02:31 < faceleg|work> If not waht tools, etc
02:32 < TehShrike> Well, the only standard documentation I'm really familiar with is the readme.md file in github/npm
02:32 < TehShrike> And that doesn't seem to be specific to non-native modules
02:32 < niggler> README.md
02:32 < faceleg|work> ugh
02:32 < TehShrike> readme.MD
02:32 < faceleg|work> yeah
02:32 < faceleg|work> I meant more like JSDoc
02:32 < s5fs> faceleg|work: i'd look at existing modules. i assume you mean javadoc type documentation?
02:32 < faceleg|work> yeah
02:32 < faceleg|work> s5fs: yeah
02:33 < TehShrike> Personally, I use descriptive (occasionally long) variable names
02:33 < faceleg|work> I don't know any of the existing modules, I'm onlhy a month old
02:33 < s5fs> faceleg|work: i honestly don't know. barring other options, find existing modules. i'm sure it'll be obvious fairly quickly if there is any standard (and probably what tools they're using too)
02:33 < faceleg|work> TehShrike: yes I do that too
02:33 < TehShrike> faceleg|work: so this documentation would be for other contributors, presumably?
02:34 < TehShrike> Since it sounds like you're talking about code annotations
02:34 < faceleg|work> TehShrike: for anyone who wants to use the module
02:34 < agu10^> I don't want to GET /static/css/style.css
02:34 < agu10^> i want to get /css/style.css
02:34 < TehShrike> Well, most modules export a single function of some sort
02:34 < faceleg|work> as it helps to see what funcitons are available on the objects the module makes available
02:34 < faceleg|work> TehShrike: I'm talking about this: 
02:34 < faceleg|work> https://github.com/tbranyen/nodegit
02:34 < TehShrike> faceleg|work: the node community favors small modules that do one thing, or a very small subset of things
02:34 < faceleg|work> TehShrike: yeah I know that
02:34 < TehShrike> To the point where the documentation of that one thing usually fits well in a single markdown file
02:34 < faceleg|work> this isn't possible with the project I'm referring to
02:35 < faceleg|work> TehShrike: see previous answer
02:35 < TehShrike> faceleg|work: fair enough.  Most of the projects that I've seen that were of that size rolled their own documentation by hand, in a Github wiki or somewhere else
02:35 < s5fs> faceleg|work: here's a list of modules that may be native: http://eirikb.github.com/nipster/#native
02:36 < faceleg|work> TehShrike: that was what I was afraid of :) I have exp with jsdoc
02:37 < faceleg|work> http://www.raptor-editor.com/docs/symbols/$.editor.plugin.clickButtonToEdit
02:37 < faceleg|work> so I might just stick with that for the JS side
02:37 < faceleg|work> and just make the C++ code as clear as possible
02:37 < faceleg|work> as users won't be working with that generally
02:37 < faceleg|work> TehShrike: s5fs niggler thanks for your advice
02:37 < Kaltiz> How can I get a client's hostname using socket.io ?
02:38 < TehShrike> faceleg|work: sounds reasonable.  Examples that come to mind are http://expressjs.com/api.html for https://github.com/visionmedia/express and http://visionmedia.github.com/superagent/ for https://github.com/visionmedia/superagent - though neither of them are native
02:38 < agu10^> How do I make a website using express if I already have my html, css and javascript_
02:38 < agu10^> ?
02:38  * niggler pets faceleg|work 
02:38 < niggler> lol https://www.youtube.com/watch?v=b2F-DItXtZs
02:39 < TehShrike> niggler: did you just find that :-P
02:39 < faceleg|work> superagent lookslike markdown
02:39 < niggler> heh impotence mismatch
02:39 < TehShrike> That's a pretty classic video
02:39 < niggler> yeah TehShrike i just discovered this
02:39 < TehShrike> It's pretty good.
02:39 < buzzedword> hey guys, im coming from an enthusiast background to a pro re: node, and im currently evaluating implementations for client visible labs and experiments; basically has to be a production quality app-- stable, testable, and secure.
02:40 < niggler> oh woah this guy did something about nodejs
02:40 < ningu> agu10^: so why do you need express? :)
02:41 < ningu> agu10^: you don't have to use jade, stylus etc... I don't really understand the question to be honest
02:41 < buzzedword> for the most part got all my grounds covered except for the nosql/mongo world-- i'm trying to figure out vulnerabilities in code that i may need to mitigate similar to how one might mitigate sql injection
02:41 < buzzedword> are there any security docs you guys can recommend for reading, or practices?
02:41 < TehShrike> weeell that's pretty general
02:41 < agu10^> ningu, yes i do, because i want to translate my pages server-side. but NOT YET.
02:42 < agu10^> i have to make the website work first.
02:42 < TehShrike> Best practice is to assume that all input from outside can be malicious or wrong
02:42 < ningu> buzzedword: not sure if it matters for you but my concern with nosql is ACID compliance -- but maybe that doesn't matter for you
02:42 < ningu> agu10^: you don't need express to have a web server that chooses different translations based on locate settings
02:42 < ningu> locale*
02:42 < hackedy> agu10^: app.use(express.static('directory_with_files_in_it'))
02:43 < hackedy> (put that in the app.configure section)
02:43 < buzzedword> ningu: definitely a flag i have in matrix. some things dont matter, other things def. need it
02:43 < hackedy> oh wait. app.use(express.static(path.join(__dirname, 'directory to use'))) is better.
02:44 < agu10^> ningu, why not? what do i need.
02:44 < agu10^> I need to use i18n or gettext
02:44 < ningu> agu10^: oh, ok. in that case express might work well
02:44 < ningu> static will just serve the files as they are
02:45 < buzzedword> TehShrike: definitely all input from outside is bad. you're right-- i'm being way too general. let me be specific-- are there common attack vectors re: string injection that middleware/drivers don't already mitigate, that i should be manually?
02:46 < agu10^> ningu, i don't need to serve the files as they are. i need to be able to translate and modify the DOM in them, server-side.
02:46 < ningu> agu10^: yes, but you said you just "need to get the site working" first
02:47 < TehShrike> Maybe someone else can answer that more usefully.  I generally just have custom code/functions to make sure that inputs fall within certain parameters before I integrate them into queries or lookups, and make sure my queries don't assume anything (like "a lookup based on a passed-in ID will necessarily correspond to the current user")
02:47 < monokrome> Anyone ever get `npm link` working on travis.ci?
02:47 < TehShrike> But you sound like you're already on top of that sort of thing
02:47 < faceleg|work> TehShrike: buzzedword does mongoose handle injection attempts properly?
02:47 < TehShrike> I haven't used mongo yet, I don't even know what injection would look like.
02:47 < agu10^> ningu, you mean i should show the files in a way, then completely redesign the website just because i need to change the dom?
02:47 < TehShrike> Probably some sort of... JSONesque... thing?
02:47 < monokrome> https://travis-ci.org/LimpidTech/Inform/jobs/5828979
02:47 < buzzedword> right... the most i have to go off of is this: http://docs.mongodb.org/manual/faq/developers/#how-does-mongodb-address-sql-or-query-injection
02:48 < agu10^> or are you saying using /static will allow me to dynamically change the DOM?
02:48 < agu10^> ningu, ^
02:48 < faceleg|work> TehShrike: in PHP it includes any content fromoutside containing '$' character
02:48 < faceleg|work> but I think JS is different here
02:48 < TehShrike> Look, this is what I assume about any database system: the API comes with an "escape" function, and you should call it on every string before using it in a query :-P
02:48 < faceleg|work> buzzedword: if you can find some example attack strings
02:48 < faceleg|work> make a simple node app and try to "hack" it with them
02:48 < faceleg|work> the please post your results in a blog post or better a git repo that we can contribute to
02:48 < TehShrike> faceleg|work: that's not true
02:49 < faceleg|work> TehShrike: isn't it?
02:49 < TehShrike> faceleg|work: it depends on how you're using that string
02:49 < faceleg|work> which part?
02:49 < TehShrike> faceleg|work: the part about strings containing the $ character
02:49 < faceleg|work> if you blindly throw $_POST into mongo you can get into troubles
02:49 < faceleg|work> ok keys more specifically
02:49 < agu10^> OK, i have my website working. It has an html file, css, and js. How can I now modify my html page?
02:49 < TehShrike> faceleg|work: ah, you were talking about using it in Mongo
02:49 < TehShrike> I believe you - presumably APIs come with escape functions to handle that?
02:49 < faceleg|work> yes sorry, might not have been clear
02:49 < agu10^> How can i modify my html server-side?
02:50 < faceleg|work> TehShrike: not in PHP (was using the core mongo classes)
02:50 < buzzedword> TehShrike: you know that's DAMN good advice, fairly common sense but i haven't actually had that said out loud. kinda a "duh a-ha" moment there.
02:50 < TehShrike> faceleg|work: well that is dumb and unfortunate
02:50 < faceleg|work> it's PHP
02:50 < TehShrike> >_<
02:50 < faceleg|work> Pretty horrible programming (language)
02:50 < faceleg|work> it basically means 99% of mongo-using PHP sites are open
02:50 < TehShrike> 5.4 is quite reasonable-looking
02:51 < TehShrike> If you're fine with using functions that were named without convention 15 years ago
02:51 < ningu> agu10^: using templates?
02:51 < faceleg|work> i'm not fine with it but I have no choice
02:51 < agu10^> ningu, I'm using html.
02:51 < agu10^> no templates
02:51 < TehShrike> To be clear: I do not have hate for PHP
02:52 < faceleg|work> i'll hate it for the both of us
02:52 < ningu> agu10^: right. so turn them into templates
02:52 < TehShrike> Its function naming is the one thing about modern PHP that still bugs me, and there's nothing to do about that
02:52 < agu10^> ningu, with a tool?
02:52 < ningu> agu10^: there is no way to "modify html server-side" without some sort of templating.
02:52 < ningu> agu10^: with a text editor.
02:52 < TehShrike> agu10^: you can build HTML that you return however you want
02:52 < ningu> and the tool will process them
02:52 < agu10^> i thought node-js could use the DOM to modify the htmls... using jquery
02:53 < TehShrike> Build it with JavaScript string manipulation if you want
02:53 < agu10^> ningu, no way! I already have the html!
02:53 < TehShrike> agu10^: something that smart, you're looking at a templating language.
02:53 < ningu> agu10^: yes. but that's a terrible way to serve web pages.
02:53 < agu10^> ningu, why is it terrible?
02:53 < TehShrike> agu10^: you *could* do it using a jquery-like syntax, but it would be horrifically inefficient
02:53 < TehShrike> Those tools exist
02:53 < TehShrike> And they are not nearly efficient enough to use for every page-view
02:54 < ningu> agu10^: also, how will you decide which strings to replace with gettext or whatever?
02:54 < agu10^> i can fix problems by hand though
02:54 < faceleg|work> agu10^: then you might as well just use apache or ngnx
02:54 < agu10^> ningu, they will be on .en-translate tags?
02:54 < agu10^> faceleg|work, oh why?
02:55 < agu10^> TehShrike, i don't need much efficiency
02:55 < faceleg|work> weeell if you're just going to fix problems by hand then what do you need node for?
02:55 < ningu> agu10^: I would just use some sort of simple templating system that requires few changes to the html
02:55 < agu10^> faceleg|work, the fuck?
02:55 < agu10^> ningu, great. what do you recommend?
02:56 < TehShrike> agu10^: It would be like contacting a Google API over HTTP to ask them to build every HTML page for you before you returned it to the user
02:56 < buzzedword> agu10^: you might want to take a look at EJS
02:56 < ningu> agu10^: handlebars would be fine, or yes, ejs would also work fine
02:56 < agu10^> TehShrike, so?
02:56 < s5fs> agu10^: go read the express documentation, it'll be a big help
02:56 < ningu> agu10^: do you really want your pages to load that slowly, when it's easy to do it more efficiently?
02:57 < agu10^> s5fs, unfortunately it's not big help
02:57 < agu10^> ningu, depends. if it will make me code slower, then no
02:57 < s5fs> agu10^: you gotta start somewhere. i mean no offense, but you're not asking very good questions.
02:57 < ningu> agu10^: you're basically saying, I know you can work across the street but I really prefer to go across the city and back, that's the way I know how to get there
02:57 < ningu> walk*
02:58 < agu10^> you're suggesting i translate all my html files into templating language ones by hand
02:58 < ningu> agu10^: do you even know what these templates will look like?
02:58 < TehShrike> agu10^: I very much understand the willingness to trade code simplicity for possible complexity of actions
02:58 < ningu> they are html with a few special directives
02:58 < gaf> no, by foot, use your foot sir
02:58 < agu10^> ningu, those are good then, yes.
02:58 < agu10^> and then i'll be able to do _('my text') ?
02:58 < TehShrike> agu10^: but I can assure you that when people are suggesting these templating options, they are suggesting it because they think it will also keep your code simple
02:59 < ningu> agu10^: it depends on the templating language exactly how you'll do it, but yes, it will be similar to that
02:59 < gaf> this lil troller is having fub for sure, i bet
02:59 < agu10^> i'm not against converting my html to jade or something, but not manually!
02:59 < s5fs> gaf: indeed
02:59 < gaf> fub/fun
02:59 < ningu> agu10^: don't use jade
02:59 < buzzedword> agu10^: check this out. this is an example express gives for ejs: https://github.com/visionmedia/express/blob/master/examples/ejs/views/users.html
02:59 < ningu> the first thing I said was you don't have to use jade
02:59 < faceleg|work> just use static html
02:59 < ningu> if it's html already there is no point
02:59 < faceleg|work> one version for each language
02:59 < ozette> template. inheritance.
02:59 < faceleg|work> what could be simpler?
03:00 < s5fs> i have an http/https static server i can give you, it's under 60 lines.
03:00 < agu10^> faceleg|work, that's the worst idea i heard today.
03:00 < faceleg|work> agu10^: no doubt!
03:00 < ningu> agu10^: pretty much all you will have to do is tie together your gettext with the templating system -- i.e. pass in a gettext function like the _ you mentioned
03:00 < agu10^> s5fs, problem is i don't need static
03:00 < ningu> and maintain the .po files obviously
03:01 < agu10^> ningu, good. is that with ejs?
03:01 < ningu> agu10^: it can be with any simple templating system like ejs or handlebars
03:01 < ningu> pick one you like, those two are well known, there are others
03:01 < agu10^> which one do you recommend
03:01 < ljharb> i like EJS or mustache
03:02 < ningu> honestly for what you're doing I can't think of a good reason to choose besides personal preference
03:02 < ningu> I mean to choose between those
03:02 < agu10^> why are they called client-side templating systems?
03:02 < ljharb> wait! there's a chooser site
03:02 < ljharb> http://garann.github.com/template-chooser/
03:02 < ningu> ljharb: really? hehe
03:02 < ljharb> use that ^
03:02 < ningu> agu10^: many templating systems written in js have server and client-side versions
03:02 < ningu> but we're talking about server side for your purposes
03:02 < ljharb> don't answer any questions that aren't really really really important
03:03 < ningu> why does underscore have templates, anyway? that's like a totally random feature given the other things it does
03:03 < ljharb> for me, i choose "client/server", partials, and "same language"
03:03 < ljharb> lol underscore is just random.
03:03 < TehShrike> ningu: ...it does?
03:04 < TehShrike> Wow, it does
03:04 < ningu> TehShrike: it's one of the options on that site, and yes, I've heard it mentioned before
03:04 < ningu> I always just ignored it
03:04 < TehShrike> Underscore is way too random
03:04 < agu10^> There is a problem
03:04 < howdynihao> its cause its a dependency to bb
03:04 < agu10^> I want to have the DOM structure
03:04 < agu10^> and dynamically change it
03:04 < howdynihao> so its the default templating for bb
03:04 < TehShrike> I wish there was a library that was even just some of the underscore utility functions, minus the issues addressed by es5-shim
03:04 < agu10^> but when i select DOM in the template chooser
03:05 < agu10^> I only get DOM templating system :(
03:05 < ljharb> agu10^: pick only "server" and "dom", and you'll get dom.js
03:05 < agu10^> I mean DOT.js
03:05 < agu10^> yes
03:05 < ljharb> agu10^: why would you want to manipulate it on the server?
03:05 < ljharb> that's what your templates are for.
03:05 < agu10^> because it's much better to manipulate the dom
03:05 < agu10^> why would i want to work with strings?
03:05 < ningu> agu10^: why do you need to do that for i18n?
03:05 < agu10^> it's not a text file. it's a website
03:05 < ljharb> agu10^ you don't work with anything
03:06 < ljharb> you use a template, and you pass that untouched down to the client
03:06 < agu10^> for performance reasons?
03:06 < ljharb> no, for "separation of concerns" reasons.
03:06 < ningu> agu10^: you don't need to manipulate the dom unless there is dynamic content, and then you'd do it client-side. otherwise you just generate what you need server-side
03:06 < ningu> what you generate server-side can have conditional logic
03:06 < ljharb> do what http does best - send HTML and JSON. and in the browser, manipulate DOM nodes, which is what it does best.
03:07 < faceleg|work> ljharb: daaaaaaamn I thought I was best at manipulating DOM ndoes
03:07 < agu10^> ningu, yes, generating using the DOM
03:07 < sinclair|work> ljharb: use backbone.js or knockout.js
03:07 < ningu> agu10^: what does that even mean?
03:07 < agu10^> it doesn't make much sense to generate content using strings... if it's an html site
03:07 < agu10^> you use the DOM. like in jquery.
03:08 < agu10^> $("#table").addChild() etc
03:08 < ningu> agu10^: that's not how anyone generates pages, and for good reason
03:08 < agu10^> not return "<table>" etc etc
03:08 < agu10^> ningu, which good reasons?
03:08 < agu10^> performance?
03:08 < ljharb> faceleg|work: put yourself on github then
03:08 < ningu> agu10^: performance and also maintainability of code
03:08 < faceleg|work> agu10^: people have said performance multiple times
03:08 < faceleg|work> ljharb: I'm no good at commitment
03:08 <@Nexxy> theory: agu10^ is actually Horse JS
03:08 < ljharb> agu10^: html sites send HTML to the browser. converting them to a DOM on the server is just wasteful
03:09 < faceleg|work> Nexxy: +1
03:09 < ljharb> agu10^: and yes, nobody makes pages that way.
03:09 < ljharb> lol Nexxy 
03:09 < ningu> agu10^: you will be doing neither $("#table").addchild() *nor* return "<table>"
03:10 < ningu> agu10^: you will have a text file that says something like, <table>{{each foo}}<tr><td>{{this}}</td></tr>{{/each}}</table>
03:10 < agu10^> nevermind. still coding low level...
03:10 < ljharb> agu10^: http://www.flickr.com/photos/scottandrew/3042460648/
03:10 < sinclair|work> ljharb: use knockout.js
03:10 < faceleg|work> yeah ningu can't you come up wtih a more suitable answer?
03:10 < faceleg|work> we're in node not C
03:10 < faceleg|work> gosh
03:10 < sinclair|work> ljharb: it means you can pass json around between your client and server, and have knockout.js observers take care up updating the DOM for you
03:11 < ningu> faceleg|work: personally I generate my web sites in lisp using one big S expression
03:11 < ljharb> sinclair|work: and if i turn off JS in the browser, nothing works, right? that means it's inherently broken imo.
03:11 < sinclair|work> ljharb: well, if JavaScript is off, then you can't do anything at all
03:11 < faceleg|work> ljharb: if a site doesn't work in lynx then it's dead to me
03:11 < ljharb> sinclair|work: that's entirely untrue. if JS is off, most sites will work perfectly.
03:12 < ljharb> they just won't have ajax and other fancy features. it's called progressive enhancement.
03:12 < sinclair|work> ljharb: won't be making and Single Page Applications tho
03:12 < faceleg|work> I think they actually call it 1999
03:12 < ljharb> SPAs are stupid. pushState or bust.
03:12 < sinclair|work> ljharb: i havent made up my mind on Single Page applications, part of me likes them
03:12 < ljharb> also, server-side rendering is faster.
03:13 < sinclair|work> ljharb: nope
03:13 < ljharb> sinclair|work: http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html yep
03:13 < agu10^> i don't understand how to use ejs
03:13 < penzur> ljharb: you
03:13 < faceleg|work> sinclair|work: I like them for sites that don't need SEO
03:13 < sinclair|work> ljharb: give rendering to your clients
03:13 < penzur> you're kidding right?
03:13 < faceleg|work> 1999
03:13 < ningu> agu10^: you should at least try to use it before you ask us for help with it
03:13 < ljharb> penzur: absolutely not. working sites work without JS.
03:13 < sinclair|work> faceleg: not all sites need SEO
03:13 < faceleg|work> no, that's what I like SPA for
03:13 < agu10^> ningu, sure.
03:14 < sinclair|work> faceleg: but i think its possible to have SEO with backbone.js
03:14 < faceleg|work> yeah with bb sure
03:14 < faceleg|work> angular? different story
03:14 < faceleg|work> imho bb is not really the best for SPA
03:14 < sinclair|work> faceleg: dont use angular
03:14 < ljharb> sinclair|work: nope, not with bb unless you support proper URLs
03:15 < sinclair|work> ljharb: i dont do any browser development, im a C# developer
03:15 < ljharb> sinclair|work: ie, it doesn't have to be server-side, but you either have to support google's awful hashbang hack, or you have to make your app load its state conditionally based on the URL (or you could just do server-side rendering)
03:15 < sinclair|work> i dont even do any nodejs
03:15 < ljharb> lol what are you doing in here then
03:15 < faceleg|work> or you could just not care about seo
03:16 < sinclair|work> however, i strongly believe in having the client handle rendering, as the server should not handle anything rendering in a perfect work
03:16 < sinclair|work> *world
03:16 < ljharb> faceleg|work: sure. but then you'd also have to not care about 1 javascript error breaking your entire site. or about blind users.
03:16 < ljharb> sinclair|work: browsers are dirty and untrusted. it'll never be a perfect world.
03:16 < buzzedword> sinclair|work: i actually like client rendering-- it works great with the history API
03:17 < sinclair|work> well, services exposes data services, CDN's handle assets, and everything else is the client doing the rendering/parsing of data/assets
03:17 < ljharb> buzzedword: the history API only works if i can reload any of your URLs and have your app load properly
03:17 < faceleg|work> ljharb: for the site I'm working on I don't care about either of those
03:17 < buzzedword> ljharb: right
03:17 < ljharb> buzzedword: and if you're doing that, either you've got server-side rendering, or you've made the best client-side JS app i've ever seen (and i've seen a lot)
03:17 < buzzedword> thats why its important to store the templates on the server, in a fashion that the client can consume, either compiled or shared language
03:17 < ljharb> buzzedword+++
03:17 < ljharb> i'm all for client-side JS if there's a server-side fallback.
03:17 < niggler> woah woah ljharb what's with the triple +?
03:17 < buzzedword> :D
03:18 < ljharb> niggler: i really agreed.
03:18 < sinclair|work> ljharb: i do a little nodejs, and got as far as playing around with node fibres and getting them working on Azure
03:18 < sinclair|work> ljharb: node is still a little too new and unstructured for my tastes, although, i kinda like what the meteor team are doing
03:18 < niggler> why not a +=2 ljharb ?
03:18 < ljharb> sinclair|work: lol, meteor's one of the worst offenders imo
03:18 < niggler> lol sinclair|work trolling
03:18 < ljharb> niggler: nice
03:19 < sinclair|work> niggler: totally not
03:19 < sinclair|work> niggler: did you get your spreadsheet working?
03:19 < faceleg|work> lol
03:19 < niggler> you know sinclair|work I'm staring at a google docs bug right now
03:19 < niggler> it doesn't know how to handle format codes properly
03:19 < niggler> it treats the AM/PM code as if its a verbatim 'a'
03:20 < sinclair|work> niggler: um
03:20 < niggler> i kinda wish there were a way to file a bug with them
03:20 < sinclair|work> ok
03:20 < sinclair|work> niggler: i have been doing a bit of google docs work recently
03:20 < sinclair|work> well, Google Drive
03:20 < niggler> have you looked at the spec yet?
03:20 < sinclair|work> for?
03:20 < niggler> the ECMA spec is an absolute mess
03:21 < niggler> for the office open xml file types
03:21 < ningu> I prefer google ducks
03:21 < niggler> i daresay that's a bigger troll than meteor
03:21 < sinclair|work> nope, not yet, tho i am not really interested in office document programming at this time
03:21 < Kaltiz> Does anyone know how I can get the clients hostname?
03:21 < niggler> on the logarithmic troll scale, meteor is probably a 7 while ECMA is a 9
03:21 < sinclair|work> rather, have taken an interest in online storage cloud things
03:22 < sinclair|work> niggler: on the outset, meteor seems like a nice idea
03:22 < agu10^> Error: Cannot find module 'ejs'
03:22 < agu10^> npm install ejs
03:22 < agu10^> 304
03:22 < faceleg|work> it sounds liek a massive crater waiting to happen
03:22 < sinclair|work> faceleg: some would say that about nodejs in general
03:22 < agu10^> npm http GET https://registry.npmjs.org/ejs
03:22 < agu10^> npm http 304 https://registry.npmjs.org/ejs
03:22 < agu10^> ejs@0.8.3 C:\Users\Lucas\AppData\Roaming\npm\node_modules\ejs
03:22 < niggler> agu10^ works fine
03:23 < ljharb> sinclair|work: it was a great concept. i think it's poorly executed
03:23 < agu10^> Error: Failed to lookup view "index"
03:23 < sinclair|work> ljharb: its the first of a kind
03:23 < ljharb> i don't think thats true. it's just the first that caught a lot of buzz.
03:23 < sinclair|work> ljharb: i expect it would get better in future revisions, or new libs that follow in it's footsteps
03:24 < niggler> sinclair|work they are trying to upend a community
03:24 < ljharb> its development has also slowed, a lot
03:24 < niggler> derbyjs is probably the better bet
03:24 < agu10^> Ok, i got it solved.
03:24 < agu10^> EJS only shows my html. The css and js files, and images, don't get shown
03:24 < agu10^> do i have to put them in /static or something like that?
03:25 < ningu> agu10^: in /public
03:25 < ljharb> derby does look promising, but i haven't built anything with it yet to try
03:25 < niggler> in fact if they didn't raise money I'm pretty sure meteor would have disappeared into obscurity
03:25 < ljharb> agreed
03:25 < agu10^> ningu, i don't want to change my html links or references.
03:25 < agu10^> how would i do this?
03:25 < agu10^> the html is shown, with EJS, but not the css or js
03:25 < ningu> agu10^: I don't see how those two issues relate to each other
03:25 < faceleg|work> agu10^: in the browser's net tab do you see errors?
03:26 < faceleg|work> i.e. 404 or whatever?
03:26 < agu10^> nope
03:26 < agu10^> it works now
03:26 < faceleg|work> when you view the page source
03:26 < faceleg|work> are they missing from the <head/>?
03:26 < agu10^> yes
03:26 < monokrome> Hmm... `node link` is broken in 0.10.1 on Linux? :(
03:26 < OliverJAsh> lijharb client-side rendering/SPAs stacks depend on the project. You can't just stigmatise one way of things things quite so simply. For some applications (think software but in the browser) SEO really does not matter. In a perfect world though all developer's would be building with 'the holy grail,' that is client and server side rendering — like you say.
03:26 < faceleg|work> which
03:26 < agu10^> resources are missing with 404
03:26 < agu10^> they are in the head though
03:26 < monokrome> I meant `npm link`
03:26 < faceleg|work> so they're in the wrong folder
03:26 < agu10^> 404 localhost:3000/css/style.css
03:27 < faceleg|work> what is the name of the folder you stuck your html?
03:27 < OliverJAsh> I just don't think you should be so fast to dismiss it.
03:27 < ningu> faceleg|work: your css files should be in public/css
03:27 < ningu> erm
03:27 < agu10^> they are in /public/css/style.css
03:27 < ningu> agu10^: 
03:27 < agu10^> however, i get 404 for localhost/css/style.css
03:27 < faceleg|work> is your static file serving thing still working?
03:27 < faceleg|work> then the static file server is not working anymore
03:27 < agu10^> nope. i'm using EJS now
03:27 < faceleg|work> assuming it worked at all
03:27 < ningu> agu10^: do you have,
03:27 < ningu>   app.use(express.static(path.join(__dirname, 'public')));
03:27 < faceleg|work> well...
03:28 < agu10^> also, the static file server is for "/", which i don't want
03:28 < ningu> agu10^: put that after the app.use(ejs)
03:28 < faceleg|work> you still need to server the static files, which means you need static file server AND your templatingin engine
03:28 < faceleg|work> why?
03:28 < agu10^> since i have my own pages for "/"
03:28 < ningu> agu10^: you just said you don't want to change your css links
03:28 < agu10^> exactly
03:28 < ningu> well if it's /css/styles.css then it has to go in /public/css/styles.css
03:29 < agu10^> ok so I have to make "/" both accessible through static files AND dyamic ones?
03:29 < ningu> agu10^: yes
03:29 < faceleg|work> the static server should let requests foer missing files through
03:29 < agu10^> cool. now i did it that way.
03:29 < faceleg|work> i.e. /something-else
03:29 < faceleg|work> should go through
03:29 < agu10^> ohh cool
03:29 < faceleg|work> if you're using express's static then this is how it works (I use it)
03:29 < agu10^> yes. good. Now i just have to use gettext
03:30 < faceleg|work> someone else will help you with that
03:30 < ningu> haha\
03:30 < monokrome> Looks like `npm link` has different behavior on Linux vs OS X?...
03:32 < faceleg|work> Nexxy: are you a node contributor?
03:32 < faceleg|work> ljharb: and are you?
03:32 < ljharb> i've contributed to node modules, but not node core
03:32 < niggler> not cool enough ljharb ? :/
03:33 < faceleg|work> niggler: too pedantic ;P
03:33 < ljharb> i'm not a c programmer, and haven't found a problem i needed to fix yet
03:33 < faceleg|work> but ljharb thanks, I will do what you suggested. 
03:33 < ljharb> i do have a job, so i don't just troll for things to work on :-p
03:33 < howdynihao> a lot of core is js
03:33 < ljharb> howdynihao: good to know. that encourages me to dive deeper.
03:33 < niggler> ljharb you may need a new job that involves nodejs
03:33 < faceleg|work> don't we all
03:34 <@Nexxy> faceleg|work, you mean node core?
03:34 < faceleg|work> yeah
03:34 <@Nexxy> not so far
03:34 < ljharb> niggler: believe me, i'm working on incorporating node into my job :-)
03:35 < gkatsev> I use nodejs for tooling at work, lol
03:35 < buzzedword> ljharb: dude. its so. so. hard.
03:35 < gkatsev> also, the two other functional groups on my team use node
03:35 < ljharb> yeah, internal tools are mostly in rails for me, but we're trying to make the tooling work better for node
03:36 < ljharb> kind of building like an internal nodejitsu
03:36 < niggler> yuck
03:36 < buzzedword> we're using it for labs at my agency now... its not nearly the same experience as using it as a hobbyist. i mean the hours, the security... oh god
03:37 < buzzedword> that's why i was asking what should be a really common sense question before-- we need to cover _EVERYTHING_ in a matrix
03:38 < buzzedword> kinda takes the fun out of it a bit :(
03:38 < gaf> what net.Server is?
03:38 < gaf> in javscript
03:39 < ljharb> um
03:39 < agu10^> How can i use gettext easily in node.js? I'm using EJS and express.
03:39 < agu10^> which module should i install
03:40 < ljharb> node-gettext probably, but that will work only with po and mo files, not with json
03:40 < ChrisPartridge> agu10^: I'm using https://github.com/mozilla/i18n-abide - works with express out of the box
03:40 < gaf> what net.Server is?
03:40 < ljharb> agu10^: try http://i18next.com
03:41 < agu10^> ugh so many choices
03:41 < ljharb> gaf: no idea. provide more context?
03:41 < ljharb> go with chris's suggestion
03:41 < agu10^> i was looking at https://github.com/DanielBaulig/node-gettext
03:42 < gaf> http://nodejs.org/api/events.html#events_events
03:43 < gaf> it says is an object, but why it has dot notation? 
03:43 < gaf> so it is a methid?
03:43 < gaf> method
03:43 < agu10^> what about jed?
03:43 < ChrisPartridge> gaf: net.Server is the basic TCP server implementation
03:43 < ChrisPartridge> e.g. http://nodejs.org/api/net.html
03:44 < ChrisPartridge> agu10^: there's nothing wrong with node-gettext, you'll just have to manually hook it up to express
03:44 < agu10^> i don't want to :(
03:44 < agu10^> i'm so lost
03:44 < agu10^> what does it mean to manually hook it up????
03:44 < ljharb> so use i18n-abide. "works with express" is good
03:45 < ChrisPartridge> agu10^: then use my original suggestion..
03:45 < agu10^> ohh, i should look for express compatible ones
03:45 < agu10^> not just node compatible
03:45 < ChrisPartridge> agu10^: presumably you want to detect the users language, which is provided by the browser
03:45 < agu10^> oh right
03:46 < ChrisPartridge> agu10^: read the docs here https://github.com/mozilla/i18n-abide
03:46 < ChrisPartridge> not to mention, its backed by mozilla, so you know its going to be half decent :P
03:46 < howdynihao> yea like rhino!
03:47 < ChrisPartridge> howdynihao: :P
03:47 < gaf> ChrisPartridge, thanks for the link, but i'm trying to understand it, from a plain javascript point of view. so net is an object, than Server is...? why the capital? is that a constructor?
03:47 < ChrisPartridge> gaf: net is a namespace, Server is a "class" to put it simply
03:48 < gaf> a class? you ean a constructor?
03:48 < gaf> mean*
03:48 < ChrisPartridge> yup
03:48 < gaf> what do you mean by namespace?
03:49 < ChrisPartridge> gaf: its just a module which contains all the base TCP stuff
03:50 < gaf> i'm just looking for the plain js info
03:50 < ChrisPartridge> plain js info?
03:50 < gaf> yeah, like, is an object or what
03:51 < gaf> Server is a constructor, that i got
03:51 < gaf> but i can't undernstand how is chainable with net.
03:51 < ChrisPartridge> chainable?
03:52 < gaf> yeah, like net.Server
03:52 < gaf> dot notation there
03:52 < ljharb> gaf: var net = { Server: … }; ?
03:52 < ljharb> you can put anything on an object. it's just a dictionary with properties.
03:52 < gaf> ahh, so it IS an object
03:53 < agu10^> wowow ChrisPartridge, my text is upside down
03:53 < gaf> that is what i wanted to know
03:53 < ljharb> functions are objects too, but yes, of course
03:53 < ljharb> gaf: do `typeof net` it will say "object" (and it's not === null, so it's an object)
03:53 < ChrisPartridge> agu10^: upside down? just turn your head :P
03:53 < agu10^> yeah. i guess this is an i18n-abide debug feature??
03:54 < gaf> i see, so Server constructor is a property of the net object
03:54 < ljharb> agu10^: fake langs are a great way to test i18n libs
03:54 < ljharb> gaf: yes
03:54 < ChrisPartridge> gaf: yes, and theres also a method called createServer to return a new instatiated net.Server object
03:54 < gaf> cool, i didn't know constructors could be properties
03:55 < ljharb> gaf: anything can be a property.
03:55 < agu10^> ChrisPartridge, how can i call _ instead of gettext?
03:55 < ljharb> agu10^: var _ = require('gettext')?
03:55 < agu10^> no. i'm using i18n-abide
03:56 < agu10^> unless
03:56 < ChrisPartridge> agu10^: change 'gettext_alias' in the options
03:56 < gaf> i see, so createSeerver is a method of the net object that instantiates a net.Server object..mm, cool
03:56 < agu10^> where are the options??
03:57 < agu10^> in abide() i guess
03:57 < ChrisPartridge> yep
03:57 < ChrisPartridge> i18n.abide({gettext_alias: '_'});
03:57 < agu10^> ohh it works!
03:57 < ChrisPartridge> simple, huh 
03:57 < agu10^> now i need to find out how to use spanish, or english instead of upside-down-english
03:58 < agu10^> shouldn't there be a way to make all TEXT in the html be translated automatically using gettext?
03:59 < agu10^> instead of having to do <%= _('my text') %>
03:59 < ningu> agu10^: maybe with something different from ejs, but it has to know how to find it somehow
03:59 < agu10^> i was planning on usin the DOM
03:59 < agu10^> but it seems it's too slow?
03:59 < ningu> agu10^: much too slow
04:00 <@Nexxy> sounds like you want plates
04:00 < ningu> oh, good idea
04:00 < agu10^> hmm
04:00 <@Nexxy> http://flatironjs.org/#templating
04:00 < agu10^> probably
04:00 <@Nexxy> https://github.com/flatiron/plates
04:01 < ningu> then he'll have to write his own code for the gettext binding though :)
04:01 <@Nexxy> you mean... actually be a programmer?
04:01  * Nexxy shock horror
04:01 < gaf> but how net.Server is written in the core files? var net = { Server: function Server(){...}; }
04:01 < agu10^> but... plates has to use the DOM?
04:02 < agu10^> how is it not slow too then?
04:02 < ningu> agu10^: not really
04:02 < niggler> this is 2013: coding was so 2012
04:02 < gaf> i mean, how can you define the constructor inside the object?
04:02 < ningu> it does an optimized regex I think
04:02 < TehShrike> Unrelated? http://blog.michellebu.com/2013/03/21-nested-callbacks/
04:02 < agu10^> ok nevermind
04:02 < agu10^> i'm going to keep it simple with gettext and ejs
04:03 < niggler> that sounds like a callback unrolling TehShrike 
04:03 < ningu> agu10^: I'm not actually sure how plates is implemented but it's fast afaik
04:03 < agu10^> using the DOM would be nice but i guess it's still 2013. too slow for this age
04:03 < TehShrike> niggler: just read it :-P
04:03 < niggler> Programming is hard.
04:03 < agu10^> i thought templates were cached and so using the DOM wouldn't be a problem
04:04 < niggler> coding is easy; programming is hard
04:04 < niggler> lol someone already penned "Programming is Easy, Software Development is Hard
04:05 < ningu> hmm... any suggestion how to easily generate a unique name for a temporary table in an sql database?
04:05 < ChrisPartridge> ningu: uuid 
04:05 < Lorentz> programming is easy; translating from requirements to software is hard
04:05 < ningu> ChrisPartridge: I suppose, yeah. that's all I could think of.
04:06 < ChrisPartridge> ningu: what db?
04:06 < ningu> ChrisPartridge: postgres
04:06 < agu10^> map.where('lang').is('en').insert(gettext(this)) or something like that
04:06 < agu10^> would be great :/
04:06 < ChrisPartridge> ningu: there's a contrib module for postgres
04:06 < agu10^> OK, i think i will use jquery... i hate templates.
04:07 < agu10^> jQuery on node.js
04:07 < ningu> ChrisPartridge: a uuid module or what?
04:07 < ChrisPartridge> ningu: Yes, uuid-ossp
04:08 < ningu> hmm ok
04:08 < ChrisPartridge> ningu: did you compile postgres or install it via package manager?
04:08 < ningu> both
04:08 < ningu> the package manager compiled it
04:09 < ningu> but on the production system it's a binary package
04:09 < ningu> ChrisPartridge: anyway this isn't for a uuid postgres type, just a table name...
04:09 < ningu> I don't quite see how the OSSP module helps
04:09 < howdynihao> what is the binary pkg business on a production system
04:09 < ChrisPartridge> ningu: it generates uuid's...
04:10 < ningu> ChrisPartridge: yes, but so does node-uuid :)
04:10 < ChrisPartridge> ningu: If that works then sure
04:11 < agu10^> How can I run a nodejs function for modifying every view?
04:11 < agu10^> like creating my own templating engine
04:11 < agu10^> ideas?
04:13 < ChrisPartridge> agu10^: look at howe other templating solutions work would be a good start
04:14 < agu10^> i bet there is an easier way to do it than templating solutions
04:14 < agu10^> cause i don't want to make a templating engine
04:15 < howdynihao> there is
04:15 < agu10^> just want to modify all html i send to the browser
04:15 < howdynihao> the answer is in the docs
04:15 < agu10^> i'm sure there are 1000s of ways. but i'm looking for the right one, to act as a proxy for the html
04:16 < howdynihao> and you'll figure out the right one if you look through the docs
04:18 < agu10^> howdynihao, yeah, i could also try all 50 templating systems
04:18 < agu10^> that's probably the fastest approach
04:19 < howdynihao> yea i guess we can ignore learning the basics
04:22 < ningu> agu10^: you can either hire someone to do this, use an existing solution, or learn enough js/node to create your own
04:22 < ningu> there aren't really any alternatives
04:23 < agu10^> using an existing solution sounds nice, and building my own is too.
04:23 < agu10^> just there shouldn't be much 'to learn' in order to do this
04:23 < howdynihao> there isn't
04:23 < agu10^> it's supposed to be a lean and small, simple platform
04:23 < howdynihao> its very basic
04:23 < tknz> hey is anyone familiar with ntwitter?
04:24 < ningu> agu10^: you still have to know how to program
04:24 < agu10^> I'm looking at jsdom now
04:24 < agu10^> it seems like jquery is not installing in my system
04:24 < monokrome> TehShrike: So, now that I've got multiple repositories over here - how do you go about having your continuous integration environments testing them against eachother?
04:24 < agu10^> npm install jquery
04:24 < agu10^> !ERROR no good
04:24 < agu10^> ningu, that's the easy part. programming is generic.
04:24 < sinclair|work> agu10^: why would use jquery in node?
04:25 < agu10^> because i want to parse the DOM
04:25 < sinclair|work> madness
04:25 < penzur> why install jquery?
04:25 < agu10^> i don't care for performance issues
04:25 < tknz> is there any more updated twitter module?
04:25 < agu10^> penzur, to parse the DOM
04:26 < ningu> penzur: because that's his idea of how to create a templating system
04:26 < penzur> why not do it on the client-side?
04:26 < TehShrike> monokrome: honestly, I just roll with npm link - whenever one of the modules seems in a save-able state, I do an npm publish, and then it updates the package.json dependencies in all the other modules appropriately
04:26 < monokrome> TehShrike: npm link doesn't seem to solve the problem that I'm trying to solve
04:28 < TehShrike> I'm not familiar with any good practices involving much complexity inside the space of a single module
04:28 < agu10^> penzur, for SEO reasons
04:28 < agu10^> penzur, i am going to translate my pages server side
04:28 < agu10^> so I'll find all text with jsdom and gettext it.
04:28 < agu10^> without using any templating system.
04:29 < garthk> Ok, style question. I want to throw metrics for nigh-everything using node-statsd. Passing it around to every function is a pain in the @!%*. Yet, I feel dirty using global variables. Suggestion? 
04:29 < faceleg> lol I come home from work and agu10^ is still on about the DOM
04:29 < TehShrike> :-P
04:30 < agu10^> faceleg, haven't been offered good solutions :(
04:30 < howdynihao> aka no one is willing to do the work for him
04:30 < MI6> joyent/node: Trevor Norris v0.10 * f0b6889 : domain: fix domain callback from MakeCallback  Since _tickCallback and _t - http://git.io/xvVohA
04:30 < faceleg> xloo
04:30 < faceleg> lol*
04:30 < zenetik> mscdex: ping
04:31 < ningu> agu10^: your pages may have high SEO rankings but when it takes 10 seconds to load they won't stay :P
04:31 < agu10^> why would it take 10 seconds?
04:31 < faceleg> because dom on the server is dumb
04:31 < faceleg> and slow
04:32 < faceleg> because nodejs isn't a browser
04:32 < faceleg> either render client side, use static html or use a templating engine
04:32 < TehShrike> agu10^: do you have Google+?  Want to talk face to face?
04:32 < agu10^> why TehShrike ?
04:32  * ningu knows why
04:32  * faceleg blushes
04:33 < agu10^> faceleg, poor excuses :P
04:33 < TehShrike> Because I'm just drunk enough to be willing to hash something like this out face to face - it seems like you have some misunderstandings about how most people think about web servers, and I'm willing to ask you questions about your assumptions until one of us gets mad and disconnects
04:33 < faceleg> taking bets now
04:33 < agu10^> I know most people do it the old way.
04:33 < agu10^> I'm looking to innovate in this.
04:33 < faceleg> TehShrike: agu10^ you cannot bet
04:33 < TehShrike> faceleg: if you want to video chat for other reasons, I'm down <3
04:34 < faceleg> need 3rd party to ensure fairness
04:34 < ningu> hehe
04:34 < faceleg> bet with me either on here or private messate
04:34 < faceleg> mesage*
04:34 < faceleg> bets will be held in escrow
04:34 < TehShrike> I'll bet that I can get faceleg off in less than I MEAN NO THIS IS SERIOUS BUSINESS
04:34 < agu10^> TehShrike, don't worry, i don't care how others see webservers. I care how I will use it.
04:34 < faceleg> hahahahahaha
04:34 < TehShrike> agu10^: understood
04:34 < ningu> agu10^: I thought you cared about SEO?
04:35 < agu10^> yes
04:35 < ningu> agu10^: then that isn't just you using it
04:35 < faceleg> nobody cares about seo
04:35 < agu10^> and translation should be server side
04:35 < TehShrike> Responsiveness is a big part of seo
04:35 < agu10^> ningu, yes it is.
04:35 < TehShrike> 50ms vs 500ms is a big difference to search engines
04:35 < faceleg> I don't think browwsers sit around resizing the website windows
04:35 < mscdex> zenetik: pong
04:35 < ningu> agu10^: you want SEO optimization so you find your own site and use it?
04:35 < agu10^> TehShrike, that's where caching comes in
04:36 < agu10^> not getting rid of the DOM, just caching it.
04:36 < ningu> faceleg: what do they sit around doing?
04:36 < ningu> I didn't know browsers could sit
04:36 < agu10^> what you're saying is: don't use high level stuff! that's going to slow it down.
04:36 < agu10^> that's always been stupid :P
04:36 < agu10^> even in the 80s
04:36 < jayk> ningu: drinking.  Mozilla's a  lush.
04:37 < zenetik> zenetik: started wiki, i'll not stop until i'll finish my application. Please take a look time to times because i can make huge mistake and it's bad for the wiki
04:37 < TehShrike> I wish I could pay my browser in beer
04:37 < agu10^> Premature optimization is evil. I will remove DOM usage IF it's the bottleneck.
04:37 < zenetik> mscdex: started wiki, i'll not stop until i'll finish my application. Please take a look time to times because i can make huge mistake and it's bad for the wiki
04:37 < agu10^> plus, caching should make it fast.
04:38 < TehShrike> "I'm sorry, I know that web site was hard for you. I'll try to make sure the next one has more standard-compliant HTML.  Have a shot on me"
04:38 < zenetik> mscdex: btw now i've started to play with node-ncurses, i have to thank you cause this binding is the only one and except mouse/resize it's seem's to work like a charm, i suppose you are using it for some stuff on your side
04:38 < jayk> TehShrike: hahaa
04:39 < mscdex> zenetik: to be honest, i don't use it
04:39 < howdynihao> so hipster
04:40 < howdynihao> like a musician who doesnt listen to his own music, even while playing
04:40 < mscdex> ?
04:40 < TehShrike> agu10^: what are you even doing here, everyone is giving you advice that you're dead-set to avoid :-x
04:40 < agu10^> TehShrike, i just want to translate my website without editing the html.
04:41 < agu10^> I plan to bind gettext to ALL text elements in the dom
04:41 < TehShrike> Translate from what to what?
04:41 < agu10^> from english to spanish
04:41 < TehShrike> Use sed
04:41 < jayk> TehShrike++ #sed
04:42 < zenetik> mscdex: LOL ! i understand more :)
04:42 <@isaacs> TehShrike: thanks <3
04:42 < sinclair|work> geez visual studio is a nice IDE
04:42 <@isaacs> TehShrike: it's self-serving :)
04:43  * isaacs doesn't use windows, i mean, but a lot of people do
04:43 < zenetik> mscdex: will you maintain a little it in the future ?
04:43 < TehShrike> isaacs: hah, I'm not complaining, it's most of the reason I'm here :-)
04:43 <@isaacs> yep.
04:43 < harrisonm> When I have to do .NET dev I like visual studio
04:43 < zenetik> mscdex: i've not C skill so i can't maintain that sorry :(
04:43 < TehShrike> Though against all odds, I'm developing on OSX nowadays
04:43 < harrisonm> esp. with Resharper
04:43 < agu10^> TehShrike, how would sed help? i don't want to duplicate my website files
04:43 < sinclair|work> i just foind an option to increase the size and change the formatting of intellisence popups, so i can read the font, this is great as i have terrible vision.
04:43 <@isaacs> i actually cautioned ryah *against* windows support early on.  don't tell anyone.
04:43 < harrisonm> but otherwise I avoid it, prefer straight text editors for most stuff
04:43 < harrisonm> sinclair|work: nice
04:43 <@isaacs> TehShrike: it's expensive, though.  and painful.
04:43 < sinclair|work> i love that
04:44 < TehShrike> Though I will say to sinclair|work: having used Eclipse for a few weeks now (and looking to use it for many years to follow) I still rate VS quite highly
04:44 < tjfontaine> it's painful
04:44 < harrisonm> I like the ADT.  I don't like Eclipse.
04:44 <@isaacs> visual studio is amazing wonderballs.
04:44 <@isaacs> that's the only thing i miss from windows
04:44 < sinclair|work> as i get older, the accessibility features Microsoft offers are just top notch, its surprising and nice to find it in their IDE. go Microsoft
04:44 < TehShrike> isaacs: I'm developing in OSX for 2 weeks now, and the biggest advantage is bash
04:44 <@isaacs> TehShrike: yeah, bash is what got me to switch over.
04:44 <@isaacs> TehShrike: many years ago
04:44 < tjfontaine> isaacs: vs is great up until you're trying to debug child processes :)
04:44 <@isaacs> i don't remember what cat it was.  the one before tiger, i think?
04:44 < TehShrike> For most of the environment, I really like Windows
04:44 <@isaacs> panther?
04:45 < harrisonm> Yeah if Windows had a better shell I'd spend more time in it; as it stands I generally run Linux Mint
04:45 <@isaacs> hydera?
04:45 <@isaacs> liono?
04:45 < sinclair|work> TehShrike: eclipse is ok in terms of functionality and customization, but it really doesn't come close to Visual Studio, nothing does really
04:45 < ChrisPartridge> harrisonm: powershell? ;)
04:45 < tjfontaine> aww what's wrong with powershell?
04:45 < TehShrike> tjfontaine: I spent about an hour yesterday reading through reported bugs about tracing through things in Eclipse in a multi-threaded environment >_<
04:45 < TehShrike> sinclair|work: yeah, agreed
04:45 < harrisonm> ChrisPartridge: Nice, but still greatly prefer bash
04:46 < TehShrike> sinclair|work: I've heard good things about IntelliJ, but haven't tried it yet myself.  I use SublimeText whenever I get the chance
04:46 < tjfontaine> TehShrike: must have been a fun hour
04:46 < niggler> one warning about osx coreutils: it pulls from BSD, whereas most variants of linux use GNU
04:46 < agu10^> adding <%= _() %> to EVERY text tag in my HTML doesn't look like a good solution for translation and localization. That's why.
04:46 < jayk> it's funny... it's mostly my dev tools that dictate my OS nowadays.  Not the other way around. OSX now.... though with sublimetext, linux is an easier option than it was
04:46 < faceleg> hahahaha
04:46 < RLa> eclipse has fixed NPE's during editing js files?
04:46 < sinclair|work> TehShrike: im still using Notepad++, tried Sublime on linux tho, it seemed nice and easy to use
04:46 < faceleg> st2 is like crack mixed with icecream
04:46 < ningu> agu10^: you have to indicate it somehow. so how will you do it?
04:46 < harrisonm> niggler: isn't a lot of OS X based on BSD?
04:46 < RLa> i recently switched to kate from webstorm
04:47 < ChrisPartridge> faceleg: i love crackcream
04:47 < jayk> niggler: Most of the time that doesn't matter so much - POSIX for the win.
04:47 < sinclair|work> TehShrike: im so used to NP++ now, i don't know if i can change so easily :D
04:47 < niggler> yes harrisonm :)
04:47 < jayk> faceleg: hahah ;-)
04:47 < agu10^> ningu, nope i don't. that's what computers are for. I just use the DOM to find text.
04:47 < niggler> jayk you say that until you find out that you are using certain features that are in gnu but not in posix
04:47 < harrisonm> sinclair|work: NP++ -> Sublime Text is a pretty easy transition
04:47 < TehShrike> sinclair|work: you should try
04:47 < ningu> agu10^: ok but how do you know what the translation will be?
04:47 < TehShrike> Check this out everyone http://sokolovstas.github.com/SublimeWebInspector/
04:47 < agu10^> ningu, gettext()
04:47 < ningu> agu10^: right but how do you know what gettext string to get?
04:48 < agu10^> ningu, there is a translation map afaik
04:48 < agu10^> a .po file
04:48 < agu10^> i have to edit
04:48 < ningu> yes, but those strings have keys
04:48 < agu10^> you mean this won't work? :(
04:48 < ningu> agu10^: I don't know, you tell me
04:48 < agu10^> the key is the english language string. it should work
04:49 < ningu> sure, if that's always the case
04:49 < TehShrike> The Sublime package manager is so effective, it always amazes me that it didn't even come with it out of the box http://wbond.net/sublime_packages/package_control
04:49 < agu10^> i traverse the dom and call gettext(text). so it should be added to the translation map
04:49 < jayk> niggler - yes but that's generally a sign you are in sketchy waters.  there's a lot more than linux out there.  
04:49 < agu10^> ningu, what is a different case?
04:49 < ningu> agu10^: well, say you want to change the english text -- if you never change it in the html file but always edit it in the po file that should be ok
04:50 < ningu> otherwise you have to change it in all the po files
04:50 < agu10^> yes, i know. that's the case in any system using gettext
04:50 < harrisonm> TehShrike: It's really easy to publish to as well
04:50 < agu10^> maybe they create a tool that will delete unused translations though
04:51 < TehShrike> harrisonm: it's an unusually accessible environment for a plugin system for an application
04:53 < agu10^> There is a bug. I can't install jsdom. Error code 0
04:55 < agu10^> npm ERR! not ok code 0 - 1906 error code ENOENT
04:58 < guidj0s> Does node have anything like Haskell's `interact`? http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:interact
04:58 < guidj0s> Searches for similar names and 'io'-ish queries have been fruitless.
05:03 < Havvy> guidj0s: I don't think there is.
05:07 < guidj0s> Havvy: All right; thanks.
05:08 < garthk> global.statsd && global.statsd.increment('launches');\
05:08 < garthk> Hmm.
05:11 < agu10^> why does jsdom not run???
05:15  * zeromodulus nerdrages.
05:23 < tknz> Can someone help me with this question.. http://stackoverflow.com/questions/15652361/can-not-use-follow-in-the-streaming-api-in-ntwitter-recieving-unspecified-er
05:23 < shmoon> hey
05:23 < shmoon> how casn i get the exact lat/long of user?
05:23 < brycebaril> shmoon: working on a drone project?
05:24 < shmoon> brycebaril: lol
05:24 < TehShrike> shmoon: you can use browser APIs to get their location, if the user approves, or you can use IP-based metrics to get what might be a good idea of their location
05:24 < shmoon> no people can create tasks and i everyone should be able to see tasks near them for which i need lat/long
05:24 < ChrisPartridge> shmoon: following them around with a hand held GPS
05:24 < SrPx> Two different things call callbacks when they're done loading. I want to do something when both are done. Is there a built-in or famous-lib that implements this? For example: wait(db_loaded,files_loaded,function(){}) 
05:24 < jesusabdullah> shmoon: html forms and directions ;)
05:24 < shmoon> TehShrike: html5 geolocation isnt working well with my android 4.2 :(
05:25 < shmoon> jesusabdullah: ?
05:25 < TehShrike> shmoon: root your phone and upgrade OS versions? >_<
05:25 < jesusabdullah> shmoon: Where are you? Latitude: [     ] Longitude: [     ] [SUBMIT]
05:25 < shmoon> 4.2.2 is the latest
05:25 < jesusabdullah> shmoon: a bad joke, I apologize
05:25 < shmoon> oh lol
05:25 < brycebaril> SrPx: https://npmjs.org/package/async
05:25 < jesusabdullah> shmoon: normally I'd say html5 geolocation is your best bet
05:26 < SrPx> brycebaril: thank you kind member of this great community :D
05:26 < jesusabdullah> shmoon: maybe run a server on the phone that accesses its GPS and exposes it over some kinda API?
05:26 < brycebaril> np :)
05:26 < jesusabdullah> shmoon: now trying to be clever here
05:26 < shmoon> how can that be done though ?
05:26 < shmoon> its just a webapp that the user visits via browser
05:27 < jesusabdullah> yeah, see, that's a problem
05:27 < jesusabdullah> you might just be hosed, I think TehShrike has the right ideas
05:27 < SrPx> yay yay great lib that async 
05:28 < jesusabdullah> dangit why does this look like such a pain in the ass http://n8.io/converting-a-c-library-to-gyp/
05:29 < faceleg> does one do var c = function() {}; c.prototype.funcname = function() {}
05:29 < faceleg> to make "classes" in node? Or is there some newfangled way to do it
05:30 < TehShrike> Same as it is in all JavaScript
05:30 < faceleg> just checking
05:30 < TehShrike> Which is to say, depends on who you ask, but I'd call that reasonable
05:31 < faceleg> better IMHO than var c = function() { self = {}; self.funcname = function() {}; return self; }
05:32 < guidj0s> Here you go -- https://github.com/guipn/reply.js
05:35 < jesusabdullah> classes?
05:35 < jesusabdullah> Where we're going we don't need any classes...
05:36 < faceleg> how prototypical of you
05:36 < ChrisPartridge> haha
05:42 < niggler> guidj0s i thought interact gave you the full data at once
05:43 < niggler> you'd have to drain stdin fully and then call interact on the mess
05:43 < niggler> that's why you use lines / unlines
05:44 < guidj0s> niggler: I'm not sure what you mean.
05:45 < guidj0s> niggler: Input is given to your argument function as it is made available to your program.
05:45 < niggler> if there's a lot of data on stdin
05:45 < niggler> won't data get called multiple times?
05:45 < guidj0s> Most likely.
05:46 < niggler> iirc interact gets called once even if you have a ton of data
05:46 < guidj0s> Haskell's?
05:46 < niggler> yeah
05:46 < guidj0s> No.
05:48 < guidj0s> Haskell doesn't know about the system's buffering.
05:48 < guidj0s> Even though the text says "The entire input is given (...)", the entire input might not be all of the content coming from a file.
05:49 < guidj0s> Systems might deliver it in chunks -- this is actually the only sane approach.
05:49 < hackedy> guidj0s: what about hSetBuffering
05:49 < jesusabdullah> good thing we're not using the haskles amirite
05:50 < hackedy> and hGetBuffering
05:50 < niggler> ok guidj0s how would you implement line count ("wc -l") using interact?
05:50 < guidj0s> hackedy: It can be used to modify the standard behavior, which is (likely, hopefully) buffered.
05:51 < hackedy> so saying "Haskell doesn't know about the system's buffering" is inaccurate
05:51 < hackedy> but i digress
05:51 < jesusabdullah> brohonestly I'd use fs.readFileSync and a .split('\n')
05:51 < niggler> guidj0s as a simpler example, explains what happens here: main = interact (show)
05:51 < guidj0s> hackedy: Within the context of `interact`, it doesn't. But sure.
05:51 < s3shs> How does one download the latest node from github?   Do we download and build, or is there an installer from regular builds ready to go?  I need something more recent than what's on nodejs.org.
05:51 < niggler> jesusabdullah that's the right way to do it
05:52 < niggler> fs.readFileSync('/dev/stdin')
05:52 < guidj0s> niggler: show is applied over whatever is available via stdin.
05:52 < jesusabdullah> alternately you could use the stream api and split each chunk on newlines, keep a running total, and spit out the sum on stream end
05:52 < jesusabdullah> THAT WOULD WORK TOO
05:53 < niggler> so explain guidj0s the difference between that and main = interact (show . lines)
05:53 < jesusabdullah> at least one of those is not javascript
05:53 < jesusabdullah> ಠ_ಠ
05:53 < niggler> jesusabdullah the point is that the semantics of interact require that the data be passed at once
05:54 < niggler> and you can visually verify it by running a haskell program interactively
05:54 < jesusabdullah> ಠ_ಠ
05:54 < niggler> even the simplest "main = interact (show)" proves my point
05:54 < jesusabdullah> **I** use **f#**
05:55 < hackedy> hello #node.js could you help me debug this homespring program?
05:55 < niggler> so hackedy function interact(foo) { return foo(fs.readFileSync('/dev/stdin','utf8')); } is probably close to what you want
05:55 < guidj0s> niggler: (show . lines) is applied over whatever is available via stdin.
05:55 < faceleg> it's like all I do now is refactor
05:55 < niggler> guidj0s try this
05:56 < niggler> main = interact (show)
05:56 < hackedy> niggler: I don't.. want anything?
05:56 < guidj0s> niggler: I understand the difference in behavior.
05:56 < niggler> compile that
05:56 < niggler> and run interactively
05:56 < agu10^> ChrisPartridge, are you there? How do i call i18n-abide gettext outside the templates? in my server.js file.
05:56 < niggler> now try the same thing with your JS code
05:56 < niggler> you will see they are different
05:57 < guidj0s> < guidj0s> niggler: I understand the difference in behavior.
05:57 < niggler> the semantics of 'interact' requires you to read the file at once
05:57 < niggler> so it should be like i said above
05:57 < hackedy> agu10^: looks like gettext() is a method on the `req` object so you can only use it inside your response handlers
05:57 < guidj0s> Are you suggesting that I rephrase the decription?
05:57 < niggler> yes 
05:57 < agu10^> hackedy, actually i found a way
05:57 < agu10^> i18n.format()
05:57 < hackedy> oh, good
05:57 < agu10^> but now i don't know how to create the translation maps. any ideas?
05:58 < niggler> what you've written is not "node.js' equivalent of Haskell's "interact" function"
05:58 < ningu> agu10^: po is a standard format
05:58 < agu10^> ningu, yes, but shouldn't .po files get created when i call the function?
05:58 < ningu> huh?
05:58 < agu10^> like, add the text automatically to the .po file
05:58 < ningu> oh
05:58 < agu10^> _('hello) should add the key if it doesn't exist, right?
05:58 < agu10^> it's not creating any file
05:59 < ningu> I don't know if any gettext libraries that work that way
05:59 < ningu> of*
05:59 < ningu> but it's just a text file
05:59 < agu10^> if they don't, it'd be really stupid to use it
05:59 < ningu> I could be wrong though since I don't use gettext
05:59 < agu10^> why would you use gettext if you have to do it manually anyways
05:59 < ningu> there are po editors
05:59 < agu10^> what do you use ningu ?
05:59 < agu10^> lol
06:00 < ningu> I've never done a big site with gettext, I've only tweaked it a little for things that already had i18n so I don't know how they generated it in the first place
06:00 < guidj0s> niggler: I will switch `equivalent` with `ugly cousin`.
06:00 < agu10^> okay
06:06 < guidj0s> Maybe I'll drop `ugly`.
06:07 < agu10^> Can anybody help me with gettext on node.js? I need to find one that creates the .po or json files
06:08 < niggler> what are you trying to do overall agu10^ 
06:08 < agu10^> translate my website from english to spanish
06:09 < niggler> do you have th text currently in JSON format?
06:09 < agu10^> no
06:09 < agu10^> html
06:09 < niggler> have you considered just doing it directly on the html?
06:09 < niggler> that is to say, go into the html files and edit directly
06:10 < niggler> if the content is generated server-side, just send the language table over or have the client send the preferred language
06:12 < monokrome> TehShrike: You around? I can explain my issue a bit better now
06:25 < ningu> damnit, why is there no Object.values()?
06:25 < astropirate> hello friends
06:26 < ningu> well at least there is _.values
06:29 < chondl> newbie question - how do I find the source for a particular function (child_process.fork to be precise).  I'm poking around the source tree and can't figure it out.  
06:32 < seismo> ohai
06:40 < agu10^> Cheerio is COMPLETE SHIT
06:40 < agu10^> it lacks .contents. one of the most basic core features of jquery
06:41 < Havvy> agu10^: I've never used .contents
06:41 < Havvy> So I'm gonna argue its a part of the 80/20 set.
06:41 < agu10^> i need it
06:41 < agu10^> need to find all text elements. 
06:41 < agu10^> any other idea?
06:42 < agu10^> <body><b>hi</b> bye</body. I need to get 'bye'
06:42 < ningu> agu10^: it's totally possible in cheerio
06:43 < agu10^> but how?
06:43 < agu10^> .contents doesn't work :(
06:43 < ningu> http://dev.panlex.org/tools/jquery-tabularization/
06:43 < ningu> you should be able to figure it out from there ;)
06:44 < sinclair|work> question: type safety, good or bad?
06:44 < monokrome> obviously goo
06:44 < monokrome> good*
06:44 < agu10^> that page is not helpful
06:44 < ningu> agu10^: but actually, text() just returns it... I'm trying to remember how you set it
06:44 < ChrisPartridge> sinclair|work: pro and con list :P
06:44 < agu10^> text() returns ALL element's texts
06:45 < agu10^> not only text elements
06:45 < agu10^> eg: it would return hi bye. not just bye
06:45 < ningu> agu10^: just do console.log(foo) where foo is some element returned by cheerio
06:45 < sinclair|work> monokrome: do you work with the Mono framework at all?
06:45 < ningu> agu10^: well yeah, you have to find the element you want first
06:45 < ningu> agu10^: anyway, it's a basic object property I just can't remember the name right now
06:45 < agu10^> actually
06:46 < agu10^> i could do this using javascript
06:46 < agu10^> instead of cheerio's APIs
06:46 < agu10^> i mean
06:46 < agu10^> using the object it returns
06:46 < ningu> um, you *are* using javascript
06:46 < monokrome> sinclair|work: no
06:46 < agu10^> instead of contents()
06:46 < agu10^> such as:
06:46 < agu10^> returnedObject[0] instead of returnedObject.children(0)
06:47 < ningu> agu10^: yes, but just remember cheerio is not DOM in the browser, it works a bit different -- anyway just console.log(obj) and you will see what the value is
06:47 < ningu> since I can't remember
06:47 < agu10^> how does it work?
06:48 < agu10^> it parses the html like it was static
06:48 < agu10^> right?
06:48 < agu10^> exactly what i want
06:48 < ningu> yes, my point is just that its API is not identical to jquery and the DOM in a browser
06:49 < harrisonm> is it reasonable to use !!stream.read to detect if if a stream is a 0.10 readable stream?
06:51 < agu10^> ningu, yeah that was my problem. but now i found a way to hack it
06:51 < agu10^> actually, it'd be hard to hack it
07:06 < sinclair|work> oh nice, looks like TypeScript gets Generics next week
07:06 < sinclair|work> for anyone who has been following TypeScript at all
07:06  * sinclair|work is not trolling by mentioning TypeScript
07:06 < astropirate> sinclair|work, king of the trolls
07:07 < harrisonm> the secret is that his job is trolling
07:07 < sinclair|work> mentioning TypeScript is not a troll
07:07 < sinclair|work> grow up
07:07 < harrisonm> I mean that actually sounds kind of cool?  I use generics a lot when I'm coding other stuff
07:08 < harrisonm>  /sarcasm
07:08 < zeromodulus> question in comments: https://gist.github.com/zeromodulus/5252323
07:08 < sinclair|work> harrisonm: i didn't think they were going to implement it
07:08 < sinclair|work> as it diverged too far from the ECMA6 spec
07:08 < sinclair|work> harrisonm: well, if they implement generics, maybe they will pull out all the stops, and implement lambda and linq
07:09 < NuZZ> coffeescript master race :D
07:09 < zeromodulus> I also added more comments, so, feel free to refresh.
07:09 < NuZZ> tbh though TS looks like it does some cooler stuff than CS
07:10 < sinclair|work> http://blogs.msdn.com/b/typescript/archive/2013/03/25/working-on-typescript-0-9-generics-overload-on-constants-and-compiler-performance.aspx
07:10 < harrisonm> sinclair|work: Seeing Microsoft's general direction I wouldn't be surprised
07:10 < Jamiltz> hey, any good library you know about for building awesome apis with node?
07:10 < harrisonm> that being said I'm generally adverse to languages that compile to Javascript.  Not for any rational reason, I just feel weird about it
07:11 < sinclair|work> harrisonm: you know, they were out there implementing nice language features to HLSL waaaay before GLSL
07:11 < sinclair|work> harrisonm: i figured they would do the same for TS
07:11 < sinclair|work> its a good thing, not a bad thing, if they can out do ECMA6, that is a really really good thing
07:12 < sinclair|work> especially if they are implementing language features now, that will no doubt work on ECMA6 anyway in future
07:12 < sinclair|work> harrisonm: i just wish it was easier to use TS on node
07:12 < agu10^> I want to trim a string from all whitespace on the left and right, including tabs and newlines. But I want to KEEP the left and right trimmed strings in 2 other variables. Any ideas?
07:15 < zeromodulus> nevermind, I think I figured out what to do. :P
07:15 < zeromodulus> I need to separate the code in set_foobars into two separate functions.
07:16 < substack> >> 'abc\t \r'.split(/(^\s+|\s+$)/).slice(1,-1)
07:16 < purr> substack: (object) ['\t \r']
07:16 < substack> odd, I get a different result on my repl
07:17 < substack> >> '  abc\t \r'.split(/(^\s+|\s+$)/)
07:17 < purr> substack: (object) ['', '  ', 'abc', '\t \r', '']
07:17 < substack> >> [].slice.call('  abc\t \r'.split(/(^\s+|\s+$)/), 1, -1_
07:17 < purr> substack: SyntaxError: Unexpected token ILLEGAL
07:17 < substack> >> [].slice.call('  abc\t \r'.split(/(^\s+|\s+$)/), 1, -1)
07:17 < purr> substack: (object) ['  ', 'abc', '\t \r']
07:17 < substack> agu10^: ^^^
07:17 < substack> old perl trick
07:17 < substack> amusingly works in js
07:18 < penzur> that's bitchin!
07:18 < substack> perl is so worth knowing
07:18 < substack> I take so much of it for granted
07:21 < agu10^> substack, it doesn't work here http://regexpal.com/
07:21 < substack> agu10^: the repl disagrees
07:21 < substack> the repl carries the day
07:21 < agu10^> what's the repl?
07:22 < substack> agu10^: if you type `node` then you go into the repl
07:22 < agu10^> node
07:22 < agu10^> ?
07:22 < penzur> omg is that the one with th e > ?
07:22 < agu10^> oh, running node.exe?
07:23 < substack> agu10^: it is the command that you type and it shows a '> '
07:23 < substack> and then you can type expressions
07:23 < agu10^> hmm
07:24 < agu10^> oh wait
07:25 < substack> if regexpal says one thing and the node repl says another thing then regexpal is wrong
07:25 < agu10^> There is something wrong!!!
07:26 < agu10^> "\t\t\t\n\t\t\t".trim() should return ''
07:26 < substack> >> '\t\t\t\n\t\t\t'.trim()
07:26 < purr> substack: (string) ''
07:26 < agu10^> and it does in repl
07:26 < substack> and it does
07:26 < agu10^> but not in my website. is that possible?
07:26 < substack> agu10^: regexpal is probably garbage
07:27 < substack> '\t\t\t\n\t\t\t'.trim() is '' in my browser console
07:27 < agu10^> hmm
07:27 < penzur> same here
07:27 < agu10^> mine too
07:27 < agu10^> but i mean on node.js it's not
07:40 < agu10^> substack, you want me to do  [].slice.call('  abc\t \r'.split(/(^\s+|\s+$)/), 1, -1) ?
07:41 < substack> agu10^: it seems you can just do .slice(1, -1)
07:41 < agu10^> ?
07:41 < substack> purr has a strange environment
07:41 < substack> just '  abc\t \r'.split(/(^\s+|\s+$)/).slice(1, -1)
07:42 < agu10^> i have no idea what that code does
07:43 < agu10^> ohhh i understand now
07:44 < ningu> agu10^: if anyone can write a template engine the way you're trying to it's probably substack :P
07:44 < agu10^> ningu, uh. what does htat mean?
07:44 < agu10^> hahah
07:44 < ningu> agu10^: it means that it would have to be done fairly cleverly to perform well but it might be possible
07:44 < agu10^> substack, i see, but now how do i know where my text is in the array? [0], [1] or [2] ???
07:45 < agu10^> ningu, it's working now, but i still have to improve a few things
07:45 < MI6> joyent/node: Fedor Indutny v0.10 * 28c6e42 : openssl: disable HEARTBEAT TLS extension  Microsoft's IIS doesn't support - http://git.io/pJ8b9Q
07:45 < agu10^> like removing the \t\n that i added to all texts
07:46 < agu10^> ningu, it's very slow though, for now.
07:47 < agu10^> substack, there is a problem with your code :(
07:47 < pats_Toms> someone uses styl?
07:47 < pats_Toms> someone uses styl?
07:47 < pats_Toms> ahh, sorry for doublepost
07:47 < agu10^> substack, if it splits in 2, i don't know where my text is anymore!
07:47 < pats_Toms> I mean this... http://learnboost.github.com/stylus/
07:48 < ningu> pats_Toms: just ask your question
07:48 < pats_Toms> someone know any way to send variables from nodejs code to style?
07:48 < ningu> hmmm
07:48 < ningu> why do you want to do that?
07:49 < ningu> I don't know how offhand -- it isn't really meant to do that, but it might be possible
07:49 < damarusama> hi there, I am looking for some sort of leaderboar but with a reddit/hn type of voting system to classify apps ~ I wondered if there was someting in node built like that
07:50 < damarusama> is there a name for that reddit/hn type of voting system
07:50 < substack> agu10^: \s* then
07:51 < pats_Toms> ningu, I have some vars like bg color and so on which is going to chage sometimes on the fly
07:51 < agu10^> substack, why?
07:51 < ningu> pats_Toms: ahh, I see. hmm.
07:51 < substack> agu10^: so that when there is no whitespace it still matches so the indexes are stable
07:52 < agu10^> ohh cool
07:52 < pats_Toms> ningu, first time I got idea about random templateing engine like hogan
07:53 < agu10^> substack, it doesn't work
07:53 < agu10^> returns []
07:55 < ningu> pats_Toms: well, I don't really know what to suggest -- one way would be to do an inline stylesheet on the page that's going to have the changed variables
07:55 < pats_Toms> yeah, nice idea
07:55 < ningu> that way (1) clients can still cache your .css, which is obviously desirable, and (2) you can generate the inline css with a template language
07:56 < ningu> this is assuming it's just a couple values to change... otherwise, I don't know
07:56 < ningu> there's always javascript
07:58 < agu10^> substack, your code doesn't work :(
08:36 < [AD]Turbo> hi there
08:37 < Kaltiz> Hey If I edit a locally installed library
08:37 < Kaltiz> Does it atuomatically reload it?
08:37 < Kaltiz> When I start the app next time?
08:41 < ningu> Kaltiz: not sure what you mean by "locally installed"
08:57 < faceleg> agu10^: did you get your dom templating working?
08:57 < guor> isaacs, there will be some fundamental changes to the V8 api wrt Persistent handles. If you haven't read it yet, please do: https://groups.google.com/forum/?hl=en&fromgroups=#!topic/v8-users/6kSAbnUb-rQ
08:57 < ningu> faceleg: now's your chance :P
08:57 < ningu> for V8 internals I mean
08:58 < faceleg> noooooooooo
08:58 < faceleg> just as I border on grokking it's changing!
08:59 < faceleg> agu10^: false. substack's code always works and is always optimal
09:00 < faceleg> guor: I did wonder why Handle<Value> functions had that return type
09:05 < caulagi> hi - any recommendations on a fast, lightweight message queue for node?
09:06 < sinclair|work> caulagi: what kind of message queue ?
09:07 < caulagi> asynchronous
09:07 < sinclair|work> in proc, or outside?
09:08 < caulagi> sinclair|work: for real production code.  But we are ok to experiment a bit
09:08 < caulagi> I think something that is lightweight so that we can learn quickly and change things, if required
09:08 < sinclair|work> caulagi: i heard some people use redis as queuing store, but im not all that familar with redis, i do however use MSMQ and Azure Service Bus on occation
09:09 < caulagi> sinclair|work: we were thinking something along redis lines as well. :)
09:09 < faceleg> do people prefer function() { }.bind(this) or using call/apply in node?
09:10 < Sven_vB> call/apply
09:10 < Sven_vB> also, wrap that function in ()
09:10 < stephank> caulagi: there's also this: https://github.com/JustinTulloss/zeromq.node
09:10 < sinclair|work> caulagi: in theory, any data store will work as a message bus, including a file system
09:10 < faceleg> Sven_vB: why
09:11 < Sven_vB> faceleg, the ()?
09:11 < faceleg> Sven_vB: this: http://hastebin.com/bavetupipi.js
09:12 < faceleg> and yes if you mean I should wrap function() {}.bind(context) in (), then why
09:13 < caulagi> stephank: That doesn't seem async, or am I wrong?
09:14 < Sven_vB> i meant (function ... {}).bind()
09:14 < faceleg> Sven_vB: yes, why?
09:15 < sinclair|work> caulagi: define async
09:15 < ningu> I implemented a redis cache while on the subway on the way to work
09:15 < Sven_vB> to show JSlint that it is not an accident
09:15 < ningu> it was glorious
09:15 < caulagi> sinclair|work: where we specify a callback to be called when a job is done?
09:15 < sinclair|work> caulagi: generally speaking, async is the process that picks up and processes the messages on the queue
09:15 < faceleg> lol, really?
09:15 < stephank> caulagi: It is, afaik. Ignore the bindSync in the example, there's also a regular bind().
09:15 < Sven_vB> however, that whole function seems to be so strange that JSLint fails to even try and understand it
09:15 < faceleg> I've got js linting on in st2, I suppose I've got whatever option that is turned off
09:16 < faceleg> Why does JSLint dislike it?
09:16 < faceleg> Or rather, what is the actual reason ?
09:16 < sinclair|work> caulagi: in a general system, the callback can be supplied in headers on the message itself
09:16 < Sven_vB> "Cannot read property 'arity' of undefined"
09:16 < ningu> crockford says you shouldn't do (function () { ... })() because the () just hang at the end like dog's testicles
09:17 < faceleg> it's not self exec in my case
09:17 < penzur> who's crockford?
09:17 < faceleg> it's a callback that I want to set the context for
09:17 < faceleg> penzur: some old dude
09:17 < penzur> ohh ic
09:17 < someprimetime_> crockford banned me from his google plus page
09:17 < Sven_vB> ningu, that is direct invocation, whereas here we're talking about calling a method directly on an anonymous function
09:17 < someprimetime_> not a fan
09:17 < someprimetime_> (anymore)
09:17 < penzur> sounds familliar
09:17 < ningu> he recommends (function () {... } ())
09:17 < someprimetime_> him and that haggard beard of his
09:17 < sinclair|work> caulagi: however, you may be interested in http://redis.io/topics/pubsub
09:17 < penzur> he invented javascript?
09:17 < ningu> Sven_vB: i know, it just reminded me
09:17 < someprimetime_> he "discovered" json
09:17 < someprimetime_> w
09:18 < someprimetime_> whatever that means
09:18 < faceleg> weeeeell I don't know what that even means
09:18 < faceleg> "Cannot read property 'arity' of undefined" 
09:18 < ningu> penzur: no, but he's been involves heavily in ECMA standards I believe
09:18 < penzur> no clue
09:18 < faceleg> and google is no help
09:18 < ningu> involved*
09:18 < Sven_vB> someprimetime_, it means JSON was there since forever but he was the one who gave it a name and showed people it is useful.
09:18 < ningu> faceleg: is this js or what?
09:18 < faceleg> js yes
09:18 < faceleg> ningu: http://hastebin.com/bavetupipi.js
09:18 < ningu> faceleg: so... something is undefined where it shouldn't be :)
09:19 < faceleg> ningu: Sven_vB http://hastebin.com/lagumovaqo.js
09:19 < faceleg> ningu:  there is no error
09:19 < ningu> faceleg: ok, but somewhere something's trying to read arity
09:19 < faceleg> ningu: Sven_vB is saying I should change it to be like it is in the second link's second block
09:19 < faceleg> no
09:19 < ningu> does it not tell you what line?
09:19 < faceleg> that is a jshint error that Sven_vB told me
09:19 < faceleg> I have no problems
09:19 < ningu> ahh
09:19 < ningu> nevermind
09:19 < faceleg> I'm just asking whether doing (first block) is node-y
09:20 < faceleg> for callbacks to which one wants to give context to
09:20 < caulagi> stephank:, sinclair|work: would zeromq score a redis solution or vice-versa?
09:20 < caulagi> s/score/score over/
09:20 < ningu> I don't really see a problem with it
09:20 < faceleg> no neither
09:20 < ningu> but I am not very opinionated about those particular things
09:20 < Sven_vB> .bind(this) just reeks like crockford would save some this to self and use self somewhere.
09:20 < faceleg> haha
09:20 < ningu> Sven_vB: yes, I probably would do the same
09:20 < sinclair|work> caulagi: no idea, im a .net developer afterall
09:20 < faceleg> or var _this = this
09:20 < ningu> but... why does it matter, really?
09:21 < faceleg> it doesn'yt
09:21 < ningu> I can imagine it might in some cases
09:21 < faceleg> I'm just interested in what people find "normal" in node compared to browser js
09:21 < ningu> not _this _one
09:21 < Sven_vB> oh, and i have to correct, it was a JS_L_int error. i don't use JSHint.
09:21 < faceleg> Sven_vB: still couldn't find an explanation on google
09:21 < faceleg> sometimes I would var self = this, but in this case I think bind is clear enough
09:22 < faceleg> if you don't like it use someone else's module :P
09:22 < Sven_vB> me neither. since there is no "arity" in the code, it suppose it's an internal bug in JSLint, the latter not being prepared to handle _that_ kind of code
09:22 < stephank> caulagi: You'll have to decide. They're fundamentally different. Redis is a memory store and pubsub server on top of which you implement a queuing system. ZeroMQ is a library that implements message queuing over the network directly between peers, without (necessarily) an intermediate server.
09:22 < faceleg> Sven_vB: yeah maybe, I did see an issue about it
09:23 < ningu> redis is a pubsub server?
09:23 < stephank> It's a memory store, but also does pubsub.
09:23 < SomeoneWeird> ningu, among other things
09:23 < ningu> hmm
09:23 < ningu> I didn't realize, but yeah
09:24 < ningu> sort of like not realizing underscore did templates
09:24 < Sven_vB> faceleg, i'd argue a later reader might be in the dark about which "this" you mean, until only after reading the function it becomes clear and maybe even overturns the reader's gues what it could have meant.
09:24 < ningu> I have to say redis is about the easiest to use thing ever
09:24 < ningu> of all time
09:24 < faceleg> Sven_vB: var self = this just seems like overkill for these cases
09:25 < caulagi> sinclair|work: what can I say ;)
09:25 < Sven_vB> faceleg, it is only overkill until some less experienced maintenance programmer extends your function in a hurry
09:26 < faceleg> wha? All js programmers know about bind, right?
09:26 < faceleg> http://hastebin.com/wirosejoxi.coffee
09:26 < stephank> The actual functionality Redis implements is super easy to use, definitely. But if you want to do message queuing with Redis, you still have to implement it yourself on top of Redis' primitives. (Or find a library that does it for you.)
09:26 < adrianlang1> faceleg: No, they don't
09:26 < sinclair|work> caulagi: .net is awesome
09:26 < ningu> but if we all write our code like it's for IOCCC then we make ourselves indispensible
09:26 < faceleg> adrianlang1: joking
09:26 < faceleg> IOCCC?
09:26 < faceleg> googled.
09:26 < Sven_vB> yes they should. i meant that then your function might become so huge that the .bind goes even further away from the first related use of "this"
09:27 < ningu> stephank: yes, I agree. I was just being a bit silly.
09:27 < SomeoneWeird> .bind is awesome
09:27 < faceleg> YES
09:27 < ningu> redis obviously isn't designed for a message queue and I imagine it might take a bit of work. I didn't know about the pubsub but that seems like it would make it possible.
09:27  * faceleg dances SomeoneWeird around the room
09:27 < ningu> faceleg: IOCCC is your worst nightmare I suppose
09:28 < ningu> whole screens full of & and *
09:28 < SomeoneWeird> SomeoneWeird.bind({this:room}).dance()
09:28 < faceleg> ningu: sounds like it
09:28 < ningu> some of their entries are really impressive, though
09:28 < ningu> sort of like solving a puzzle
09:29 < ningu> not a useful one, but...
09:29 < caulagi> stephank: we are thinking we will just implement RQueue for node.
09:29 < caulagi> there also seems to be a github repo for this
09:29 < Sven_vB> SomeoneWeird, Expected an identifier and instead saw 'this' (a reserved word).
09:29 < caulagi> sinclair|work: but it doesn't work on Unix :P
09:30 < ningu> I have this feeling that someone else came in here the other day looking for a messaging queue solution and were pointed to a module
09:30 < xk_id> 'kue'?
09:30 < ningu> xk_id: yes, that's the one
09:30 < sinclair|work> caulagi: Mono does
09:30 < SomeoneWeird> Sven_vB, lol, yeah
09:30 < xk_id> I've used it previously. can I help?
09:32 < caulagi> xk_id: is a priority job queue same as a message queue?
09:33 < faceleg> I'm using .bind(). If anyone hates it feel free to submit a PR
09:33 < xk_id> caulagi: the former uses the latter I think
09:33 < xk_id> or is based on the latter
09:33 < xk_id> at least in the case of kue
09:34 < xk_id> so perhaps if it's message queuing you're after you may be able to hack around kue?
09:35 < agu10^> location, location, locationA
09:36 < caulagi> xk_id: this looks interesting, thanks!
09:42  * SomeoneWeird shoots faceleg 
09:43 < faceleg> what a weirdo
09:53 < JornStian> I'm trying to install kiwirc on ubuntu, installed npm but it seems the ubuntu versjon is too new? npm ERR! Required: {"node":"0.8.x"} npm ERR! Actual:   {"npm":"1.1.4","node":"0.6.12"}
09:53 < zeromodulus> Ah... tonight was a success.
09:53 < JornStian> can I ignore this or do I have to downgrade?
09:54 < zaleb> to new?
09:54 < zaleb> you need to upgrade node
09:54 < zeromodulus> yeah, you need to upgrade, not downgrade. :P
09:54 < ningu> chrislea ppa
09:55 < ningu> https://launchpad.net/~chris-lea/+archive/node.js/
09:55 < zeromodulus> JornStian: It's saying you have 0.6.12, but need 0.8.x.
09:55 < JornStian> thanks guys!
09:55 < JornStian> :D
09:56 < JornStian> is kiwirc or subway more stable than the other?
09:56 < JornStian> :P
10:01 < JornStian> sooo after adding chris' ppa, this is the error message i get: npm WARN engine daemonize2@0.4.0-rc.5: wanted: {"node":"0.8.x"} (current: {"node":"v0.10.0","npm":"1.2.14"}) - now is it too new?
10:01 < JornStian> :P
10:07 < gildean> JornStian: yes, but you can change the engines entry on the package.json so it doesn't require 0.8, for example: >="0.8.x" or something along those lines
10:07 < JornStian> gildean: k, thanks
10:08 < JornStian> all new to running json stuff
10:10 < zaleb> you could also use n to manage your node binaries
10:10 < zaleb> https://github.com/visionmedia/n
10:12 < substack> or nave
10:22 < SrPx> Can I use https://github.com/substack/shoe without browserify?
10:22 < `3rdEden> why would you want to do that
10:25 < SrPx> `3rdEden: ... is everyone just using browserify?
10:25 < SomeoneWeird> SrPx, i think you have to
10:25 < SomeoneWeird> substack u r needed
10:25 < SrPx> SomeoneWeird: pardon?
10:26 < substack> SrPx: you can do browserify -r shoe --standalone shoe > bundle.js
10:26 < SomeoneWeird> SrPx, I think you have to use browserify?
10:26 < substack> then you will have a global called `shoe`
10:26 < substack> otherwise you can just browserify -r shoe > bundle.js to generate a bundle that will let you require('shoe')
10:27 < SrPx> substack: oh nice
10:27 < SrPx> thanks
10:27 < SrPx> but would you recommend using browserify then?
10:27 < faceleg> Sven_vB: I give in, self = this it is.
10:28 < substack> well yes
10:28 < substack> considering I wrote both shoe and browserify
10:28 < substack> you can expect that the 2 of those work well together
10:28 < faceleg> ol
10:29 < faceleg> lol*
10:29 < substack> shoe has dependencies like stream that need to be resolved with browser-specific versions
10:29 < substack> which browserify does
10:29 < substack> I can't actually think of any other commonjs bundlers that resolve browser-specific versions of libs
10:30 < substack> even though that is really easy to do because all the libs have been factored out into completely separate packages
10:30 < SrPx> substack: oh... well... but I don't know much about it. Can I just require("jquery") for example, and code like I was in the browser and that's it? Also can I automate the compiling of a client.js?
10:31 < floby> oh substack, while you're here. I was trying out exterminate yesterday and never got it to work.
10:32 < substack> SrPx: jquery is a horrible example
10:32 < substack> don't even use jquery and you'll be fine
10:33 < SrPx> substack: I knew you would say that, just wanted to know what you used instead? (:
10:33 < substack> document.querySelector()
10:33 < SrPx> I see
10:33 < substack> floby: which OS?
10:33 < substack> SrPx: and .appendChild()
10:33 < substack> pretty much all you need
10:34 < floby> substack: ubuntu 12.10. node 0.10.1. chromium-browser. no chrome
10:34 < SrPx> substack: but if I told you I depend on some jQuery plugins regardless of they sucking :/ is it possible to use jquery with browserify?
10:34 < substack> floby: it only tries to launch "google-chrome"
10:34 < floby> substack: started it with exterminate --app="chromium-browser"
10:34 < strk> it looks like my ReadableStream is leaking forever, shouldn't it be closed on .pipe() end ?
10:35 < floby> substack: I don't know, at the time I was looking at the source it took an app parameter
10:35 < floby> substack: for the browser to use
10:35 < strk> it actually didn't really reach .end() but the o ther end of the pipe interrupted (sigpipe?)
10:35 < substack> yes, odd
10:35 < substack> floby: try with --port
10:35 < substack> exterminate --port=5000; xdg-open http://localhost:5000
10:35 < substack> well separately both those commands
10:36 < floby> ok
10:38 < floby> substack: it yields an error from the cli and the window closes. That's the problem i was having when it was still checking for an -app parameter
10:38 < floby> substack: "Unsupported fd type: TTY"
10:38 < floby> substack: in shux/pty
10:39 < substack> o_O
10:39 < floby> i know...
10:44 < floby> substack: are there tests I can run on my machine for you ?
10:45 < substack> floby: I'm not sure
10:47 < floby> substack: you have a right not to care as well ^^ i won't mind
10:47 < substack> not sure what is wrong
10:47 < substack> the issue would be with pty.js
10:48 < substack> which does the forkpty syscall
10:48 < floby> lemme paste the full error stack somewhere
10:49 < floby> substack: http://pastebin.com/V9DLnzBQ
10:49 < floby> happens when I open my chromium at localhost:5000
10:49 < SrPx> substack Hmm so well, I got everything to work, thanks. Just is there a way to automate browserifying a file from browserify itself? Or do you type it everytime?
10:50 < substack> floby: unsure, seems like a pty.js bug
10:50 < substack> you can try running the shux unit tests but you'll probably get similar failures
10:54 < floby> yup I get the exact same error in shux tests
10:55 < floby> substack ^
10:55 < floby> I'll file an issue
10:56 < floby> no tests for pty.hs
10:56 < floby> pty.js
10:57 < Jamiltz> yo, any good lib you've used to build a streaming api?
10:58 < SrPx> well as he seems to be ignoring me, does anyone else know the answer?
10:59 < substack> Jamiltz: http://npmjs.org/package/through
11:00 < substack> SrPx: https://github.com/substack/node-browserify#third-party-tools
11:00 < substack> I personally tend to just run the command every time.
11:05 < strk> oh boy, this is a bad bad leak
11:05 < strk> not sure it's express's or http's or streams' fault
11:05 < strk> basically I .pipe() a stream to an express result
11:05 < strk> then I interrupt the download from the browser
11:06 < strk> and the stream never receive any 'end' nor 'close' event, thus never closes the file opened for sending it
11:06 < strk> leaking a filedescriptor forever
11:06 < strk> this is with v0.8.18
11:06 < floby> what browser ?
11:06 < strk> firefox
11:07 < floby> have you tried closing the browser ?
11:07 < strk> 19.0.2
11:07 < strk> let me try
11:07 < floby> because firefox doesn't cancel downloads
11:07 < floby> it pauses them
11:07 < floby> to a certain point
11:07 < strk> no help
11:08 < strk> will check again in 2 minutes (I know firefox takes some time to quit even after the window is gone)
11:09 < strk> nope, still leaking
11:09 < floby> try and see with curl or wget ? maybe ?
11:09 < strk> I don't think there's any socket still alive, let me check that
11:09 < Jamiltz> substack thanks
11:10 < strk> nope, no socket alive
11:10 < strk> floby: it's not a problem with the client, but with the server
11:10 < strk> something is failing to detect socket hangup
11:10 < strk> and to translate that to a Stream event
11:15 < strk> uhm, seems to be something that got fixed with 0.9.5 : http://nodejs.org/changelog.html
11:15 < strk> "stream: fix event handler leak in readstream pipe and unpipe (Andreas Madsen)
11:15 < strk> or 0.8.16: fs: fix WriteStream/ReadStream fd leaks (Ben Noordhuis)
11:15 < strk> but I'm running 0.8.18 :(
11:16 < strk> https://github.com/joyent/node/issues/5134
11:18 < floby> current stable release of node is 0.10
11:22  * samcat 
11:22 < zot> is there a channel hiding someplace where they talk mocha?  (#mocha is empty)
11:32 < alperkanat> hey there.. is there a good way of adding new method to Array.prototype as a module? I'd like to create Array.prototype.shuffle
11:33 < floby> yes
11:33 < alperkanat> please point me a doc or something as i can't find a proper doc about it
11:34 < floby> function ShufflableArray() {
11:34 < floby> Array.apply.(this, arguments)
11:34 < floby> }
11:34 < floby> util.inherits(ShufflableArray, Array);
11:34 < floby> ShuffleableArray.prototype.shuffle = function
11:35 < chilts> mscdex: what is it you usually say about Node.js? :)
11:35 < alperkanat> floby: thanks, looking at utils.inherits
11:35 < chilts> haven't seen you say it in a while
11:39 < mscdex> chilts: it can't be forced
11:42 < MI6> joyent/node: Benjamin Ruston v0.10 * 372911f : doc: addon: fix grammar - http://git.io/CGCt3Q
12:03 < SrPx> substack just letting you know, maybe I'm doing domething wrong but by just calling the command you sent me "shoe" doesn't go to global namespace. I have to require("shoe")
12:04 < SrPx> with the --standalone
12:04 < substack> with browserify 2.8.1?
12:06 < SrPx> substack: nope move on ... 
12:06 < SrPx> substack: also thank you very much (=
12:19 < theblackbox> hello all, I've got a bit of a problem when dealing with my db - I've just changed a few things so that my timestamps are generated by postgres, so I've updated my INSERT query to include a '… RETURNING timestamp' but I can't seem to access it once the query is run inside node (using the pg module)
12:19 < theblackbox> is there some event or something other than response where I should be expecting my returned value
12:20 < SrPx> Does anyone know how I can create multiple shoe instances? If I try to call sock.install two times, from 2 different objects, on express it gives an error.
12:30 < MI6> joyent/node: Fedor Indutny v0.10 * ae86fa8 : tls: handle errors before calling C++ methods  Calling `this.pair.encrypt - http://git.io/VTHyqA
12:45 < mscdex> woohoo! node-gyp working on Win8 x64 with VS2012 Express out of the box! \o/
13:38 < mscdex> chilts: i am not @mscdex on twitter ;-)
13:38 < pachet> you mean i've been tweeting at you about chili recipes all this time
13:39 < mscdex> probably
13:39 < mscdex> i'm not on twitter at all
13:39 < pachet> and you probably dont even like chili
13:40  * pachet sobs
13:40 < mscdex> chili-mac
13:44 < jackblack> it's a bit off topic but i hope anyone of this 960 user can gimme good tips. id like to start an iPad optimized website. which is the best library to handle touch AND drag and drop events
13:45 < jackblack> jqtouch? 
13:45 < theblackbox> Hello all, I'm still trying to track down an issue I'm having when sending a query to a postgres DB (the query works in psql) - my model is saved to the db and on INSERT the db provides a default timestamp of now() and I'm trying to return this value using '… RETURNING timestamp' in my query, however I get no difference in what is returned from the normal successful INSERT …. does anyone know if I'm using this correctly? i.e. is there 
13:45 < theblackbox> some return variable the timestamp is put in, or is it part of an event I need to register for? any help would be greatly appreciated 
13:45 < jackblack> better , similar libraries??
13:46 < theblackbox> jackblack: you looked into sencha? dev here raves about it but I'm not so well acquainted
13:47 < jackblack> theblackbox: thank you gonna evaluate this lib
13:47 < theblackbox> think it's more like an app framework though, but worth a look I guess
13:48 < jackblack> important is drag and drop on all devices…. our crazy designers want that
13:48 < pachet> jackblackbox
13:52 < theblackbox> anybody know how to correctly implement '…RETURNING column' for an INSERT query into postgres using node-postgres module? I can't find ANY documentation on it at all...
13:52  * ashnur loves better stack traces
13:52 < ashnur> although my screen is to small for them
13:57 < pachet> ashnur: http://s1.hubimg.com/u/232936_f248.jpg
14:01 < booyaa> anyone off to lnug meetup tonight?
14:02 < JohnMcLear> Hey guys, slightly off topic..  Does anyone know of a good document for the heuristic/expectation of feed URLS?
14:03 < JohnMcLear> IE /feed/userID/rss style, what is the expectation?
14:04 < ashnur> pachet: :))))
14:05 < ashnur> pachet: it's more like http://www.notebookcheck.net/uploads/tx_nbc2/Untitled_04_new.jpg
14:05 < ashnur> but yeah. not much larger
14:05 < TehShrike> JohnMcLear: you mean the RSS specs?
14:05 < JohnMcLear> I don't mean the specs, I just mean the expected path of endpoint URLS
14:06 < JohnMcLear> The specs are well documented, but the specs don't mention suggested or recommended paths
14:06 < TehShrike> ah, gotcha
14:06 < TehShrike> myblog.com/feed or myblog.com/rss seem fairly common
14:08 < booyaa> JohnMcLear: you're sniffing the index page for rel tags too right?
14:08 < TehShrike> Really, what matters is the <link rel="alternate" type="application/rss+xml" title="My awesome blog" href="http://myblog.com/feed" /> tag in the HTML
14:08 < theblackbox> I can't help but feel this is a ridiculously simple problem to solve… I mean it SHOULD just work as expected (it seems to in PHP, it does do in sql) so what's the beef… grumble, grumble
14:08 < booyaa> snap
14:08 < JohnMcLear> Yea, but let's say you want an RSS Feed for a specific document, say hello-world.  Would you expect "myblog.com/hello-world/feed" or ?
14:09 < JohnMcLear> Thanks, noted TehShrike / booyaa
14:09 < JohnMcLear> Just FYI I'm doign this to add RSS feeds to Etherpad pads..  To give context..
14:09 < booyaa> JohnMcLear: one more thing if the google reader bookmark let is still around I peek at that
14:11 < JohnMcLear> that seems to work from the .rss extension and/or <rss xmlns:media="http://search.yahoo.com/mrss/" version="2.0">
14:11 < JohnMcLear> So it might be worth rewriting /feed/ and /rss/ and to feed.rss :?
14:13 < JohnMcLear> well I guess the tldr is that the URL doesn't matter so I wonder squander any more time on that :) Thanks
14:17 < dominictarr> floby: hey did you have a play with pull-stream ?
14:19 < floby> dominictarr: no, not yet. I'm kind of busy writing doc at work. Believe me, I'd rather be playing with stream-pull
14:23 < floby> dominictarr: by the way, i've been working on my json-streams again (after a year or two, lol) and finally got to make the stringifier as well as the JSON Path thingy
14:23 < dominictarr> haha, no problem. just curious. been using it lots, it's saving be LOADS of lines of code
14:30 < floby> dominictarr: Yeah it looked like it. But I started trying things around with streams2. I don't want to mix everything together and end up doing stupid stuff
14:31 < dominictarr> fair enough. I will write a pull-stream -> streams2 adapter soon, probably.
14:33 < floby> that'd be nice
14:34 < floby> so I can wrap all my old streams to stream2 and then wrap those to pull-stream
14:34 < floby> you should make a pull-stream -> stream1 adapter
14:34 < floby> so I can do this indefinitely
14:35 < dominictarr> floby: I will do that too
14:36 < dominictarr> I already have a stream-> pull-stream adapter
14:36 < dominictarr> I think streams2 comes with a classic-stream -> streams2 adapter
14:36 < floby> yup
14:36 < floby> stream.wrap or something
14:36 < dominictarr> that is it
14:37 < dominictarr> floby: there is also a few other streaming like ideas, like reducables
14:37 < floby> I'll try and rewrite a stream-stream and  catstream with pull-stream
14:37 < floby> yeah i've been checking out your join and reduce streams
14:37 < dominictarr> we'll need adapters for those
14:37 < floby> but I don't think I understood everything
14:38 < floby> adapt ALL the things
14:38 < dominictarr> what is stread-stream - is it a stream of streams?
14:38 < floby> yup
14:39 < floby> https://github.com/floby/node-stream-stream
14:40 < floby> extremely easier to do with stream2
14:40 < floby> mostly because of trustable pause/resume
14:41 < floby> I want to use it to rewrite my blue template engine
14:41 < floby> whcih was like my first stream work ever
14:41 < floby> so it's ugly as hell
14:47 <@isaacs> guor: thanks for the heads up.  looking now.
14:54 < whiskers75> If I had a variable (var x = 'test') and I wanted to make an Object bla's child bla.test = 10 by saying bla.x = 10, could I do that?
14:54 < howdynihao> i wonder is it possible to see a socket's rwnd & cwnd?
14:55 < mmalecki> whiskers75: bla[x] = 10
14:55 < whiskers75> thanks
14:57 < theblackbox> so I'm getting nowhere trying to find out how to return a value from my PG DB on a successful INSERT, if anyone has any pointers I could sure use a bit of direction
14:58 < howdynihao> return what value?
14:59 < theblackbox> one of the column values (timestamp generated as a default now() inside PG)
15:00 < theblackbox> but speaking of which I think I've just found the section deep in the issues on node-postgres github which explains how to do it
15:00 < howdynihao> for an insertion, you get the data echoed back to you on success
15:02 < theblackbox> yeah - it's just not well documented that it's a 'row' event (I figured all 'row' events would be available in the 'end' event)
15:04 < theblackbox> hmmm… maybe not =
15:09 < seismo> Is there a native english speaker who'd wanna proofread a node.js tutorial? I'm german and my english isn't that perfect :P
15:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:16 < Urbanizator> Appears there aren't many native english speakers
15:18 < seismo> Urbanizator: yeh :D or nobody likes proofreading
15:18 < Urbanizator> Well if you got a link I'll proofread it
15:18 < seismo> :D sure
15:19 < seismo> http://arminboss.de/blog/2013/tutorial-how-to-create-a-basic-chat-with-node-js/
15:19 < seismo> i find proofreading easy in my language :) so if you ever a german proofreader ask me <3
15:20 < Urbanizator> I as in me is always capitilised
15:25 < pancake> where's node-waf in 0.10?
15:25 < floby> gone !
15:25 < floby> it's node-gyp now
15:26 < howdynihao> seismo: to nit pick, it'll be better to stream the file 
15:26 < seismo> stream what file?
15:27 < pancake> and... how to get node-gyp installed? because looks like it misses to do the symlink like it does for npm...
15:27 < SomeoneWeird> pancake, sudo npm install -g node-gyp
15:28 < pancake> SomeoneWeird:  ln -fs /usr/lib/node_modules/npm/node_modules/node-gyp /usr/bin/node-gyp
15:28 < pancake> node-gyp is already installed in my system.. but not accessible via /usr/bin
15:28 < pancake> is this ok?
15:30 < floby> node-gyp gets installed with node, me think
15:30 < floby> oh wait maybe not
15:30 < floby> but it's available in the ENV when you `npm build`
15:30 < pancake> there are still several modules using node-waf
15:30 < pancake> so i guess we should not use them :?
15:30 < floby> well isaacs must know better than me. I actually think they still work
15:31 < mscdex> pancake: create a new issue on their gh issue tracker!
15:31 < mscdex> or a pull request!
15:31 < pancake> i will just blame him on twitter
15:31 < mscdex> node-gyp is the way forward!
15:32 < RSA_> my node & npm are in usr/local/lib  /  usr/local/bin, but when installing e.g. express it all goes to Users/LE/local/bin/ -   am getting this in the npm-debuglog:  "verbose node symlink /usr/local/bin/node    verbose read json /Users/LE/package.json     error install Couldn't read dependencies.. am beginner and thankful for your answers.
15:34 < RSA_> it´s a $PATH problem I guess.. but could not find out the solution yet..
15:36 < kenperkins> what's the best streams->streams2 blog post?
15:37 < floby> http://blog.nodejs.org/2012/12/20/streams2/
15:37 < kenperkins> ty
15:37 < spion> also, there is a presentation by isaacs with notes which is pretty good.
15:37 < floby> and maybe http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/
15:37 < floby> spion I don't know that one. care to share the link ?
15:38 < spion> the talk is linked in the first blog post.
15:38 < spion> https://dl.dropbox.com/u/3685/presentations/streams2/streams2-ko.pdf but it might be a bit old
15:39 < spion> (November 2012)
15:43 < floby> oh ok, thanks
15:46 < draginx> does anyone know of any really good alternatives to superagent?
15:46 < mscdex> http.Client
15:46 < mscdex> :-D
15:47 < flippyhead> ;)
15:47 < mscdex> or request
15:49 < draginx> well
15:50 < draginx> i need it to integrate nicely into should as well hmm
15:51 < kenperkins> so if I'm sending streams over http, I want to use new stream.Readable ?
15:52 < floby> kenperkins: yes
15:52 < kenperkins> although only for v0.10 
15:52 < floby> kenperkins: most likely you well do something like myReadableStream.pipe(response)
15:52 < kenperkins> if you need to support v0.8 what do people recommend?
15:52 < floby> no
15:52 < floby> same thing
15:53 < kenperkins> sorry, I just haven't done a ton of streams yet (crazy as that may seem)
15:54 < houst0n> Hi folks, I'm trying to make a solaris package from 10.1, and gyp is trying to use /bin/sh instead of /bin/bash (which are different things, but linux treats /bin/sh as bash)
15:54 < floby> kenperkins: readable streams exist since a long time ago.
15:54 < kenperkins> yes I know this, but didn't the API change in 0.10
15:54 < houst0n> I've done a kind of horrible s/\/bin\/sh/\/bin\/bash/g on the entire src, but it seems to be pulling it from the python env somehow
15:54 < houst0n> Any ideas where I can fix that?
15:54 < floby> kenperkins: it's just the way that they are written that changes. but the pipe() method remains roughly the same.
15:55 < floby> kenperkins: in fact, pipe() is probably the only safe way to use streams regardless of yuor version of node
15:55 < kenperkins> good tip ty
15:55 < houst0n> Guess not :}
15:56 < floby> houst0n: sorry I'm not that much of a solaris dude but, doesn't he pull it from $SHELL ?
15:56 < tdignan> houst0n: maybe the $SHELL environment variable is where it's pulling it from (ofc, a bad idea)
15:56 < tdignan> if it needs bash it should invoke bash
15:59 < houst0n> Hmm, I'll try that 1 sec
15:59 < houst0n> Nah, my SHELL is exported as bash
16:00 < houst0n> I think I found it, seems to be coming from subprocess.py in the python lib
16:01 < houst0n> Oh nasty hax. That worked
16:02 < houst0n> Don't tell the children, but I just haxxored the python libs ;)
16:02 < NodeNewb> seismo read your tutorial, well done...I'm actually learning that now, wish I would have read yours first
16:02 < houst0n> Do you guys all use 64bit nodejs btw?
16:02 < houst0n> or is 32 preferred?
16:03 < seismo> NodeNewb: nice :) thanks
16:03 < kenperkins> sweet
16:03 < kenperkins> best part of node
16:03 < kenperkins> it's so easy to prototype and get your head around a new feature area
16:03 < kenperkins> floby: thanks again
16:05 < NodeNewb> seismo you should expand on the XSS vulnerability a bit more...I'm not sure how I'll "sanitize" mine
16:06 < NodeNewb> a couple part 2 / part 3 ideas: user creation and session state
16:07 < seismo> NodeNewb: right. well users could send html code or javascript code inside of script tags and it'd be executed by the clients
16:07 < seismo> i linked the validator module
16:08 < seismo> just install that and use it's escape() method to sanitize the data['message'] before you broadcast it to the clients
16:08 < NodeNewb> seismo ok thanks, what about validating the caller/referrer script to make the "socket.on" methods are being called only from my site?
16:09 < seismo> NodeNewb: don't think thats necessary. that won't save you from a DDOS attack either.
16:10 < seismo> and even if you get messages from other IPs, they can't do anything else than messages from your IP
16:10 < kenperkins> mikeal how would I hook progress into request (putting a stream) so I can get a sense of how quickly data is being uploaded
16:10 < jsmonkey> Hi, I am thinking of building a node app for searching trough a long list of files (namely a .net project) and search for text occurnces, like an editors "Find all in project". I will do probaly thousands of searches. It hasn't to be reponsive, it's okey if it takes some minutes as long as it is stable. This will then be a job that I run maybe once a month. Anyone aware of a great package or way of doing the searches and I don't think I should read in fi
16:11 < NodeNewb> seismo ok, good to know...I'm more worried about external access to a socket and reading "private" emits
16:11 < euoia> jsmonkey: what's wrong with grep?
16:12 < igl> .net project (he is probably on windows)
16:12 < NodeNewb> CSRF seems a bit overkill for what I'm doing, but I'm just trying to predict any malicious scenarios
16:13 < seismo> NodeNewb: sockets are hard to guess or to bruteforce.
16:13 < jsmonkey> euoia: you mean the npm nodegrep ?
16:13 < euoia> igl: jsmonkey what's wrong with cygwin and grep?
16:13 < seismo> as far as i know WebSockets have some security mechanisms built in
16:13 < jsmonkey> euoia: I don't want a cygwin script, I am a mac user :)
16:13 < euoia> jsmonkey: then what's wrong with grep
16:13 <@isaacbw> you guys see that yield was accepted by the v8 team
16:13 < jsmonkey> I want to build a simply webb app as I have more plans for it in the feature and want non techie people to be able to use it as well
16:13 < euoia> jsmonkey: not nodegrep, just grep
16:14 <@isaacbw> woo boy
16:14 < seismo> NodeNewb: see it that way, everybody can open connections from anywhere, but it's very hard to hijack an already existing connection
16:14 < kenperkins> wait what? yield really?
16:15 < NodeNewb> seismo good to know, thank you again :)
16:15 < seismo> np
16:15 < jsmonkey> euoia: you mean using 'native' grep from the node-app? then it will be problamatic on a windows box compared to a unix box I guess?
16:15 < jsmonkey> nodegrep might solve it, I don't know. that is why I am here to ask.
16:17 <@isaacbw> http://code.google.com/p/v8/issues/detail?id=2355&q=yield&colspec=ID%20Type%20Status%20Priority%20Owner%20Summary%20HW%20OS%20Area%20Stars
16:17 < kenperkins> isaacbw: yea found it :D
16:17 < kenperkins> too slow :P
16:17 <@isaacbw> heh
16:17 < kenperkins> was reading this actually
16:17 < kenperkins> https://code.google.com/p/v8/issues/detail?id=2355
16:17 < jsmonkey> euoia: you pointed me in the right direction, nodegrep seems nice. thanks
16:17 < kenperkins> oh, just querystring diff
16:18  * euoia chuckles politely.
16:19  * andrew12 chuckles hilariously
16:21 < kenperkins> guffaw
16:30 < crabdude> Rather than spam the email group, I thought I'd see if anyone here had an opinion on this (https://github.com/joyent/node/issues/5114) It's a comprehensive outline of errorhandling and it current shortcomings in node. Unfortunately I have had any responses yet on the core premise.
16:30 < crabdude> *haven't had
16:31 <@isaacbw> promises are one attempt to bring thrown errors and async errors together
16:32 <@isaacbw> Q does a pretty good job
16:32 < crabdude> the issue with bringing thrown errors and async togethers is telling errors from exceptions so the process can continue without a restart.
16:33 < crabdude> in that regard, promises make the situation worse
16:33 < crabdude> they take async errors, which are acceptable to allow process continuation, and combine them with thrown errors which (in theory) require a restart
16:34 <@isaacbw> full disclosure, I stopped reading your link at the title
16:34 < crabdude> of course promises do the opposite and just ignore them
16:34 < crabdude> why's that?
16:34 <@isaacbw> I haven't finished my coffee
16:35 < crabdude> I'm not picking up on your joke/sarcasm/point
16:35 < crabdude> sorry if I don't know you well enough to understand
16:36 <@isaacbw> (I'm not isaac/s by the way. I'm sure he took the time to read and understand your concerns)
16:36 < crabdude> ah, gotcha
16:36 < crabdude> sorry then, if you were isaac, then your comment sounded passive agressive
16:37 < ljharb> crabdude: have you read this? "The point of promises is to give us back functional composition and error bubbling in the async world." https://gist.github.com/3889970
16:37 <@isaacbw> I just mean that if my response regarding promises was irrelevant, it's because I only briefly glanced at the link
16:37 <@isaacbw> no sarcasm or disrespect meant there ;)
16:38 < crabdude> ljharb: Yes. I'm familiar with error bubbling and error coalescing, and how promises serve this purpose in the async realm
16:38 < ljharb> then i don't understand your complaint
16:38 < crabdude> the issues I raise in issue #5114 are about how to handle all the *other* errors, specifically the ones that are thrown
16:39 < crabdude> per isaacs, if an error is thrown and not caught, the process is in an undefined state and therefore requires a restart
16:39 < ljharb> can you link me to the issue?
16:39 < ljharb> right. don't throw errors
16:40 < ljharb> try/catch is a lame way to manage program flow anyways :-p
16:40 < crabdude> promises wrap everything in a try/catch, so they catch all application errors, but they also catch other errors, like if one was thrown internally in node that's not an invalid input error
16:40 < crabdude> https://github.com/joyent/node/issues/5114
16:41 < crabdude> at any rate, the primary point is that there are errors you want to catch and don't create an undefined state, and errors which even if you do catch, create an undefined state in core and require a restart
16:41 <@isaacbw> like ljharb said, the common route is to just forgo thrown errors
16:41 < crabdude> "forgo thrown errors"?
16:42 < ljharb> i don't catch errors cause i don't want them. errors are for when i have no idea what's going on.
16:42 <@isaacbw> they aren't really designed (in javascript) for async program flow
16:42 < ljharb> since i usually like to know how my program works, i don't use them
16:42 < crabdude> but node core throws them on invalid input
16:42 < crabdude> so that's part of the issue
16:42 < ljharb> then that might be the bug
16:42 < ljharb> since node core is supposed to call your callback with an error as the first arg.
16:43 < crabdude> I posted a TLDR; here in a separate issue: https://github.com/joyent/node/issues/5149
16:43 <@isaacbw> *forgo using
16:43 < crabdude> to separate it form the EventEmitter/http OP in 5114
16:43 < ljharb> "In the best case, it's a goto" <- why error handling is silly.
16:44 < ljharb> the performance hit is part of javascript. try/catch is incredibly slow. period.
16:44 < crabdude> isaacbw:  ah, yes, I agree, part of my solution is to *never throw errors* including in node core
16:44 < crabdude> or rather, not in invalid input
16:44 < crabdude> if core throws an error due to a bad state that would be fine b/c it will require a restart
16:44 <@isaacbw> did you submit a patch with your issue ;)
16:44 < crabdude> not yet, probably in the next couple days
16:45 < crabdude> I was more concerned with getting feedback on any flaws in my analysis
16:46 < ljharb> i'd never throw a string. that's silly. you won't get a proper backtrace
16:46 < ljharb> i always throw a new Error
16:46 < ljharb> (not that i throw often)
16:46 < crabdude> I would say you should never throw unless you think the process requires a restart
16:46 < ljharb> (sorry, this is a lot of reading, so i'm kind of replying with a stream of consciousness)
16:47 < ljharb> i think isaac's right that "error" and "exception" are utterly identical in javascript
16:47 < crabdude> ljharb: if you think error and exception are identical in javascript, then are you restarting your process if a node core api throws an invalid input error?
16:48 < ljharb> which node core api is throwing an error for you?
16:48 < ljharb> i've not run into this problem.
16:48 < crabdude> require('url').parse(undefined) should require a process restart?
16:49 < crabdude> ljharb:  read the source, most node core apis throw on invalid input
16:49 < SandorKrasna> hi
16:49 < ljharb> crabdude: if (foo) { url.parse(foo); } isn't that hard. you should be checking things.
16:49 < SandorKrasna> I noticed something unexplainable happen to my socket connect after the server dies
16:50 < crabdude> ljharb:  easier said than done. see https://github.com/joyent/node/issues/4583
16:50 < SandorKrasna> after a minute of taking the server offline if I restart the server the sockets will reconnect to the server or are automatically connected?
16:50 < SandorKrasna> an anyone explain this 
16:50 <@isaacbw> passing invalid input is the kind of thing that shouldn't make it to production
16:50 < ljharb> crabdude: maybe it's cause i never use sync methods. do you see this problem with async methods?
16:50 < ljharb> crabdude: i'd say the sync methods are an antipattern themselves
16:51 < crabdude> it's not a sync method issue
16:51 < crabdude> all async methods throw on invalid input
16:51 < ljharb> maybe i'm misreading, it's early
16:51 <@isaacbw> I see thrown errors as a debugging tool, and invalid input is the kind of thing that should be sorted out while debugging
16:51 < crabdude> ah, yes, sorry, I really appreciate the feedback
16:51 < MI6> joyent/node: isaacs v0.10 * 61935bc : test: Accept either kind of NaN  A llvm/clang bug on Darwin ia32 makes th - http://git.io/Xdq5-w
16:51 <@isaacbw> it does seem a bit inconsistent to me, but not entirely innapropriate
16:51 <@isaacbw> *inappropriate
16:52 <@isaacbw> if that makes sense
16:52 < kenperkins> isaacbw: just so i understand your statement, are you saying that you shouldn't throw for invalid inputs? or rather, you don't expect those codepaths to be excercised in production
16:52 < kenperkins> i.e. truly exceptional
16:52 < kenperkins> (but you should still throw)
16:52 < ljharb> crabdude: isaacs did reopen that last issue, saying indeed that all async methods should never throw
16:52 <@isaacbw> the latter
16:52 < ljharb> kenperkins: you shouldn't throw ever.
16:52 < crabdude> I'm saying invalid inputs should be passed to the callback
16:52 < kenperkins> ok good :D that's what I do as well
16:52 < ljharb> invalid inputs is an error. and you should call the callback with it.
16:52 < kenperkins> ljharb: not sure I agree
16:52 <@isaacbw> :D
16:53 < kenperkins> what about non-callback based constructors? :D
16:53 < SandorKrasna> where do client socket connections go when the server dies?
16:53 <@isaacbw> hmm
16:53 < ljharb> kenperkins: sync methods throw. async methods never throw. it's pretty simple
16:53 < ljharb> kenperkins: https://github.com/joyent/node/issues/4583#issuecomment-12229671
16:53 < kenperkins> ok, so now let me throw you a wrinkle, synchronous constructer that's called inside of a callback
16:54 < kenperkins> should the callback try/catch?
16:54 < ljharb> no. things shouldn't throw.
16:54 <@isaacbw> ljharb: the question is whether the error is thrown or passed in the callback
16:54 < ljharb> passed
16:54 < ljharb> the only time it should be thrown is if a bad callback is provided.
16:54 <@isaacbw> and kenperkins and I are saying that in rare cases such as invalid input, it should be thrown
16:55 < ljharb> right - i disagree. it should be passed to the callback as long as the callback is valid.
16:55 <@isaacbw> because that's not the kind of thing that should be handled
16:55 < ljharb> it's not being handled. it's being passed to the callback for the callback to handle.
16:55 < crabdude> so the issue breaks down into 3 parts: 1. don't throw "exceptions". pass them to callback. 2. EE if it can, should avoid application errors placing node core into an undefined state resulting in request timeouts. 3. assuming core is protecting itself from application errors putting it into an undefined state, application errors should be treated differently (possibly with a separate error event like uncaughtApplicationException)
16:55 < crabdude> it seems the first part is the least contentious, which is good
16:55 < ljharb> basically i should never have to use try/catch in my code.
16:56 <@isaacbw> I think it should end execution, give you a stack trace, and let the developer handle it :P
16:56 < crabdude> alright, unfortunately i have to go, unplanned meeting
16:56 < crabdude> i'll be back on later =(
16:56 < ljharb> it should end execution, because either it's a bug in the module, or the developer didn't pass a function as the callback
16:56 < ljharb> those are the only reasons imo.
16:57 < kenperkins> basically this is my personal dilemma
16:57 < kenperkins> https://gist.github.com/kenperkins/5255960
16:57 <@isaacbw> I suppose if you're insane, you might like to handle invalid input as a valid code path
16:57 <@isaacbw> it's not really invalid at that point though, is it
16:57 <@isaacbw> man, that sentence didn't make a lot of sense
16:57 <@isaacbw> time to go get some lunch
16:57 < kenperkins> wait. look at that gist pls :D
16:58 < ljharb> isaacbw: invalid input is something that the app needs to recover from. thrown exceptions aren't.
16:58 <@isaacbw> I like that kenperkins 
16:58 < kenperkins> but what are you supposed to do? :D
16:58 <@isaacbw> use throw as an exit for failed assertions
16:58 < ljharb> kenperkins: i'd only throw there if callback isn't a function.
16:59 < kenperkins> this is the kind of thing that causes me heartburn
16:59 <@isaacbw> i.e. a debugging tool 
16:59 < kenperkins> I try to have reusable classes that can be extended
16:59 < ljharb> and i'd put on line 7, "client = config ? new Client() : null"
16:59 < kenperkins> but they're also wrapped inside factory methods
16:59 < ljharb> javascript does not have classes :-p
16:59 < kenperkins> shush
16:59 < ljharb> you'll be better off if you don't try to force them into existence.
17:00 <@isaacbw> well, you could have some kind of overloadable handleConfig function
17:00 < kenperkins> right, externalizing the config validation from the constructor
17:00 < kenperkins> I've thought about htat
17:00 <@isaacbw> that seems like the most sane way of doing it
17:00 <@isaacbw> it could get a little messy in javascript though
17:00 < kenperkins> doesn't everything get a little messy in JS? :D
17:00 <@isaacbw> haha
17:01 <@isaacbw> that's why it's so much fun
17:01 < kenperkins> indeed
17:01  * kenperkins goes back to writing sdks
17:01 < ljharb> kenperkins: you could keep the throw in the constructor if you want
17:01 < ljharb> kenperkins: but that throw should only ever execute when you screw up and don't properly validate externally
17:01 < ljharb> and then, it should kill the whole program
17:01 < xk_id> Does anybody know whether it would be possible that, as I prepare the HTML (takes around 30 seconds), the webpage being served by express shows "loading..."?
17:01 <@isaacbw> I think we're all on the same page ljharb 
17:02 <@isaacbw> throws are okay, but never catch them
17:02 < ljharb> yay
17:02 < ljharb> throw's fast. try/catch is what's slow :-)
17:02 < kenperkins> except, in a global app handler for logging :D
17:02 < kenperkins> which still kills the ap
17:02 < kenperkins> app
17:02 < pachet> 30 seconds, good lord
17:02 < ljharb> xk_id: nope. the browser shows you that already anyways.
17:02 < ljharb> xk_id: and it should *never* take 30 seconds, jesus.
17:02 < diogogmt> I'm having an issue with node and forever while running the latest versions: https://github.com/nodejitsu/forever/issues/321
17:02 < ljharb> what on earth takes 30 seconds to generate html?
17:03 < ljharb> are you generating wikipedia?
17:03 < xk_id> ljharb: thanks, but it's a simplified example
17:03 < diogogmt> anybody else had the same problem?
17:03 <@isaacbw> woo, lunch time
17:03 < ljharb> it's not simplified if you just made up the number :-p
17:03 < xk_id> so there's no way to display something else inside the page being served, while the rest of the content is being prepared?
17:04 < ljharb> your goal should be to deliver content as quickly as possible.
17:04 < ljharb> it is far less work than what would be required to show a "loading" screen - which btw is the hallmark of bad code
17:04 < MI6> joyent/libuv: Bert Belder refs/tags/v0.10.2 * 83f40a4 : 2013.03.25, Version 0.10.2 (Stable)  This is the first officially version - http://git.io/cEjzYg
17:04 < gildean> xk_id: of course you can write a part of the answer first, but imo in that situation it would be better to load the layout first and then get the data later with ajax
17:05 < xk_id> gildean: interesting, so I should look at ajax?
17:05 < xk_id> ljharb: don't judge man if you don't have all the data. if you really must know, the content is an on-demand aggregation of several other websites
17:05 < gildean> xk_id: imo if your reqs for data will take that long it would be better than leaving the browser loading
17:05 < ljharb> that sounds like a horrible design
17:05 < ljharb> but ok
17:06 < kenperkins> ljharb has worst 1 character twitter doppleganger
17:06 < ljharb> ?
17:06 < kenperkins> twitter.com/ljhard :D
17:06 < kenperkins> i fat fingered it a moment ago
17:06 < ljharb> i don't know why so many people type that :-p
17:06 <@ryah> what's the best static blog generator for node?
17:06 < kenperkins> doesn't mscdex have one?
17:06 < tjfontaine> troll: vim
17:06 < ljharb> ryah: substack made https://github.com/substack/glog
17:07 < kenperkins> rather, that's it
17:07 < kenperkins> thanks ljharb 
17:09 < slindberg> does anyone know if node-static has a dedicated channel?
17:10 < ljharb> kenperkins: isaacbw isn't izs/isaacs fyi :-p
17:10 < kenperkins> my new MBP has wifi issues or something
17:10 < kenperkins> wat
17:11 < kenperkins> twitter fail
17:11  * kenperkins shames
17:11 < kenperkins> I hate the twitter autocomplete dialog right now
17:11 < xk_id> gildean: is sockets.io relevant to what I'm after?
17:14 < gildean> xk_id: you could use socket.io too, if you wanted, i see no problem there
17:32 < slicky> Is there ever a situation where fs.writeFile(path, contents, cb); will not overwrite all the data? I have an issue where I have a file that is, say, 1MB in size. I call fs.writeFile() on that file and write 0.5MB of data to the file. For some reason, some of the time, it only overwrites the 0.5mb I meant to write, but keeps all the extra data from 0.5+mb without wiping it. Anyone know anything about this?
17:34 < mmalecki> slicky: hmm, this sounds like a node bug to me. do you have a reproducible test case?
17:35 < slicky> It's happening sporatically on Windows with our production code on clients' computers. I've been trying to reproduce it, but so far I haven't been able to.
17:36 < slicky> I tried to set up a loop to simulate write/read/overwrite quickly on a file to see where it fails, but on my computer, everything succeeds and just works.
17:37 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:37 < mmalecki> slicky: from what I see, fs.writeFile opens file with 'w' mode
17:38 < slicky> Yeah, I'm looking at that, too.
17:39 < CookieNomster> Does any here have experience with require.cache? Any Bad Things I should know about?
17:39 < CookieNomster> I've written a module unloading module: https://npmjs.org/package/needless
17:39 < slicky> I might need to set up a fs.writeSync to fix the problem + keeping click happy clients from writing the file a dozen times while it's doing it's business
17:39 < CookieNomster> It seems to work fine with both node 0.8 and 0.10, but require behaviour is a bit hard to test. :)
17:41 < mmalecki> slicky: looks like here's how uv handles is: https://github.com/joyent/libuv/blob/master/src/win/fs.c#L431-L435 - but if there was a bug there it'd mess up all the times
17:41 < mmalecki> slicky: is this under high load?
17:41 < slicky> It can be. Some of these people still have commodor64's running windows 7
17:41 < spobat> hi
17:42 < spobat> which web hosters do support node.js?
17:42 < slicky> nodejitsu does
17:42 < spobat> I'm currently at strato.de and I can't find anything about "node.js"
17:43 < slicky> #nodejitsu || https://www.nodejitsu.com
17:43 < spobat> so about no webhoster does support it except nodejitsu, right?
17:43 < mmalecki> slicky: I'd try reproducing it on Windows, maybe under a VM to slow it down a bit
17:43 < deis> unless you get a VPS of some sort
17:43 < mmalecki> but other than that, no idea
17:44 < kenperkins> spobat: why can't you just run it on a VM
17:44 < mmalecki> report a bug on node too
17:44 < spobat> kenperkins, I just have a webserver there
17:44 < spobat> i'll try nodejitsu
17:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:49 < luhx> hi
17:50 < luhx> I'm developing an app with nodej + angularjs + express... When I click in a link that goes to http://localhost/detail works fine. The problem is when I try to pass some parameters (just an ID) to the details view.
17:50 < luhx> could someone help with this, please?
17:51 < momomomomo> luhx: Post your code to http://gist.github.com/ (all related code and errors), and then come back and explain: What you're trying to do, what the issue is, and what you think has gone wrong. This will help people be able to digest/understand your problem
17:51 < luhx> ok =)
17:56 < strk> is it guaranteed for 2 async fs. operations to be performed in the queued order ?
17:56 < MikeSalivin> Guys just a quick question.... I have an API server that parses large JSON structures to a format more presentable to the client-side developer. Should these parsings happen in a async callback?
17:57 < zot> any mocha experts here?  seeking help w/ async testing
17:57 < shesek> zot, just ask
17:58 < luhx> Here's my problem: I need to click in a link and go to another view and use the param that was sent in this new view
17:58 < spobat> does jitsu exist for windows?
17:59 < luhx> https://gist.github.com/anonymous/a82316277eb261f19770
17:59 < luhx> I'm developing with nodejs + express + angular + monogo
18:00 < luhx> momomomomo, https://gist.github.com/anonymous/a82316277eb261f19770
18:00 < slicky> spobat: join #nodejitsu They should be able to give you better (and quicker) answers.
18:00 <@isaacbw> why you shouldn't use archlinux as a production server: https://www.archlinux.org/news/mariadb-replaces-mysql-in-repositories/
18:01 < zot> how do i set a test/suite specific timeout, when using an async 'done' style callback, a la http://visionmedia.github.com/mocha/#asynchronous-code
18:01 < zot> the example for suite specific timeouts http://visionmedia.github.com/mocha/#suite-specific-timeouts doesn't work for me, as this.timeout doesn't exist :/
18:02 < momomomomo> luhx: Please explain what you're trying to do, what's not working, and where you think it went wrong. I don't actually have any node.js chops - just trying to help you get your issue resolved :) Someone else here may be able to help
18:02 < luhx> ok =)
18:03 < slicky> luhx: http://expressjs.com/api.html#req.params ?
18:03 < luhx> when I click in the link, it's redirected to localhost:8080/detail/5152ec40a0a103550b000002. The 5152ec40a0a103550b000002 is the ID that I need to use to search on my mongodb (but that's another issue). The problem is, when I click the link and goes to that url, nothing happens! My detail view isn't loaded
18:03 < zot> good golly gosh.  figured out why.  the setup i inherited was using mocha v1.0.
18:04 < zot> ignore the idiot in the corner.
18:06 < wao> w 32
18:11 <@isaacbw> damn, I have to either revert to pre 0.10 or pull HEAD :P
18:11 <@isaacbw> a bug fix I need was pushed 6 hours ago
18:12  * isaacbw raises fist DAMN YOOOUUUUUUU
18:13 < s5fs> isaacbw: i just found a bug with a module i'm using and have to either downgrade back to 0.8.x or fix the module, haha
18:13 < s5fs> and since i'm not solid with c++.. *shrug*
18:14 <@isaacbw> it's a perfect excuse to brush up on your c++! ;)
18:14 < spobat> does it run on ARM?
18:14 < spobat> I have DS109 here: http://forum.synology.com/wiki/index.php/What_kind_of_CPU_does_my_NAS_have
18:14 < monokrome> Does anyone know of an example of a NodeJS project that uses zmq to do asyncronous messaging?
18:14 <@isaacbw> ah well, it's probably about time I stopped using the arch package anyway
18:14 < spobat> is there an installer for that cpu?
18:14 <@isaacbw> an installer for that CPU?
18:15 < s5fs> isaacbw: true, totally wish I had the time :)
18:15 <@isaacbw> have you tried poking the author?
18:15 <@isaacbw> more than likely he/she is already updating it
18:15 < s5fs> isaacbw: nah, I see it's a known bug and they'll get to it in april
18:15 <@isaacbw> ah okay
18:15 < spobat> isaacbw, what the heck?
18:15 < spobat> yes/no? :P
18:16 <@isaacbw> the question doesn't make a huge amount of sense
18:16 <@isaacbw> can node run on ARM? yes
18:17 <@isaacbw> there are a wide variety of OSs for ARM processors, some of which may or may not have node packages available out of the box
18:17 < spobat> ok
18:17 <@isaacbw> I couldn't tell you which ones do have node packages. I suspect ARM archlinux does
18:18 < s5fs> in my experience the distro packages are always old
18:18 < s5fs> angstrom for instance was 0.4.x when i looked last haha
18:19 <@isaacbw> it looks like arm arch has 0.10 :P
18:19 <@isaacbw> Arch power!
18:19 < s5fs> indeed, they're a very forward thinking community. also using systemd!
18:20 < crabdude> monokrome: see Shuttle: https://github.com/Schoonology/shuttle My old teammate at RedRobot built it and it worked great.
18:21 <@isaacbw> as much as I love arch, fixing my broken system after every large update can get a little tiring
18:21 < crabdude> kenperkins: isaacbw ljharb I have difficulty understanding why you guys are content to restart the process (as a best practice) when it's entirely avoidable
18:21 < crabdude> wrt input validation, it breaks encapsulation
18:21 < ljharb> crabdude: i'm not content. throwing an exception is BAD. you should never do it unless you want the process to restart.
18:21 < strk> how can I check if a socket is bound ?
18:22 < strk> I'm having troubles avoiding fd leaks when piping a readablestream to an http response...
18:23 < strk> (no event on the stream will be received if the http response is not connected)
18:23 < crabdude> ljharb: maybe we disagree on when throwing is necessary then
18:23 < ljharb> i'd go with never
18:23 < crabdude> oh
18:23 < ljharb> ideally
18:23 < crabdude> I thought I read you were content with throwing in the ctor, etc...
18:25 < crabdude> so the other half of the discussion I was hoping to have was, if "exceptions" don't require a restart and could be passed to the callback to avoid the performance hit of try/catch, shouldn't we be returning errors from sync methods then instead of throwing for the same reason
18:25 < crabdude> ?
18:29 < crabdude> throw is the equivalent of tearing the fabric of spacetime, and node does it all over the place unnecessarily
18:33 < alex4nder> greetings
18:33 < bradleymeck> crabdude: domains attempt to help, but JS love to rip spacetime
18:33 <@isaacs> crabdude: hola
18:34 <@isaacs> crabdude: here's the problem:
18:34 < alex4nder> can anyone point me in the right direction for throwing a V8 exception from inside a uv callback?
18:34 < alex4nder> is there a node best practice?
18:34 < ljharb> crabdude: yes, i'd agree with that assessment, but screw sync methods anyways :-p
18:34 <@isaacs> crabdude: what yor'e suggesting is a rewrite of node.  i'm not being hyperbolic here.
18:34 < ljharb> alex4nder: the best practice is not to throw an exception, it's to pass it as the first arg to the callback
18:34 <@isaacs> crabdude: also, there's a lot of code that sort of assumes the current patterns.
18:35 < alex4nder> ljharb: my use case is if the callback they set isn't callable (i.e. I wanted a function, it's the number 6).
18:35 <@isaacs> crabdude: for errors that occur at run time, sync functions throw, async errors dno't.
18:35 < ljharb> alex4nder: then you just throw an exception i guess?
18:35 < alex4nder> ljharb: yah, that means I get silent errors on something that's an obvious typing problem.
18:35 < alex4nder> pretty weak
18:36 <@isaacs> crabdude: if var bytesRead = fs.readSync(fd, buf, ...) returned an Error object, then you'd have to check types much more tediously
18:36 < ljharb> alex4nder: throw new TypeError('callback must be a function')?
18:36 < niggler> anyone familiar with ECMA and the protocol for reporting errors in their spec?
18:37 < alex4nder> ljharb: I'm in C++
18:37 < alex4nder> inside a uv callback
18:37 < niggler> *in certain specs
18:37 <@isaacs> crabdude: of course, you probably should not be doing sync stuff in your server anyway, so that's kind of a red herring anyway.
18:38 < bradleymeck> alex4nder: you can v8::ThrowException, but passing an error to callback is very prefered
18:38 < bradleymeck> very
18:39 < alex4nder> bradleymeck: how do I return a v8::ThrowException from a uv callback with a void return type?
18:39 < bradleymeck> you don't
18:39 < jocafa> kenperkins:  new clipper is nice :)
18:39 < kenperkins> jocafa: Thanks! You know I left clipboard? :D
18:39 < alex4nder> bradleymeck: right, which is my question.
18:39 < bradleymeck> just throw it and watch v8 put it up on reentry to js
18:39 <@isaacs> crabdude: we DO throw for things that are clear violations of the contract.  ie, fs.readFile({not:"a path"}, 7, "not a function")
18:39 < jocafa> i didn't know apparently haha
18:40 < bradleymeck> either way you should really keep a ref to w/e your final callback in JS is and pass to that
18:40 < bradleymeck> use uv_handle_t.data like a boss
18:40 < jocafa> good terms i hope!
18:41 < alex4nder> bradleymeck: what?  I've got full state inside the callback, I'm trying to propagate an exception up into node.
18:41 <@isaacs> crabdude: the line is a bit debatable.  some on the core team believe that we ought to throw on fs.readFile("fo\0bar", cb)
18:41 <@isaacs> crabdude: because the \0 is invalid input.
18:41 <@isaacs> crabdude: in that case, we pass the error to the cb, though
18:41 < bradleymeck> alex4nder: if you have the JS function that is the callback to JS, call that, do not ThrowException
18:42 < draginx> https://gist.github.com/durango/e0aa31f312d26fea1e8a any idea why request() doesnt send content-length?
18:42 < alex4nder> bradleymeck: I don't have the callback, my specific error case is that they set the callback to something bogus, but I've got data to process from uv
18:42 < draginx> but the cURL works 110% :)
18:42 < ljharb> isaacs: +1 on passing it to the callback :-)
18:42 <@isaacs> ljharb: right.. however, there IS a tradeoff there!
18:43 < alex4nder> bradleymeck: so uv calls my C++, my C++ goes to call the callback, but the callback property they set is something uncallable (e.g. a number)
18:43 < ljharb> there's always a tradeoff. that doesn't make it not the best way to go :-)
18:43 <@isaacs> ljharb: i mean, in this specific case, i agree (i wrote the patch that does the current thing, at bnoordhuis's protest, fwiw)
18:43 < alex4nder> bradleymeck: of course I could validate what they set when they set the callback property to make sure it's callable
18:43 <@isaacs> ljharb: but you lose the specific call-site info
18:43 <@isaacs> ljharb: likewise if you return the error, and then re-throw it
18:43 < bradleymeck> alex4nder: validate and cache the callback function, dynamic lookups of your callback are going to be angry
18:43 <@isaacs> ljharb: the output them says "throw er;" as the line that failed.  like, ok, lot of help that is.
18:44 < alex4nder> bradleymeck: ok, so you don't know the answer to my question.
18:44 < alex4nder> which is fine, I can skin this cat many different ways
18:44 < ljharb> isaacs: you mean the backtrace? i think it's worth it to create an Error object in the method and pass it down to the callback :-)
18:44 < mscdex> poor cat
18:44 < alex4nder> yes
18:44 < ljharb> if that's not performant enough, we need to change v8 to make our use cases fast, not the other way around.
18:44 < alex4nder> it is a shame about the cat.
18:44 <@isaacs> ljharb: no, i mean the bit with the squiggly line underneath it
18:45 < ljharb> lol
18:45 < crabdude> isaacs: what do you mean you lose the callsite info? If no one is wrapping the calls in try/catch, and you generate the errors in the same place, what do you lose?
18:45 < bradleymeck> alex4nder: i can think of ways to just queue a new cb on node's event loop that throws, but thats still going to be angry
18:45 < bradleymeck> hard to catch at best
18:45 <@isaacs> crabdude, ljharb:
18:45 <@isaacs> $ ./node e.js
18:45 <@isaacs> /Users/isaacs/dev/js/node-v0.8/e.js:4
18:45 <@isaacs>   throw er
18:45 <@isaacs>         ^
18:45 <@isaacs> ReferenceError: foo is not defined
18:46 < crabdude> you still have the error message & type, and the call stack is correct
18:46 <@isaacs> vs:
18:46 <@isaacs> $ ./node e.js
18:46 <@isaacs> /Users/isaacs/dev/js/node-v0.8/e.js:2
18:46 <@isaacs> foo()
18:46 <@isaacs> ^
18:46 <@isaacs> ReferenceError: foo is not defined
18:46 < ljharb> the line on which it's thrown is useless, sure, but it's node. i'm doing async :-p
18:46 < crabdude> so you're not *losing* any info?
18:46 <@isaacs> you are losing info.
18:46 < ljharb> i don't want errors to be thrown, cause i don't want to catch any
18:46 < crabdude> i think the disagreement here is you're referring to a runtime error not a thrown exception
18:47 < crabdude> you don't lose what you're talking about when thrown exceptions
18:47 <@isaacs> crabdude: so, changing how sync functions throw is not really an option.
18:47 < crabdude> you get: "throw err" isntead of "throw new TypeError('asdf')"
18:47 < crabdude> but you still get the type and message in the line below
18:47 <@isaacs> crabdude: and i think we agree about 'error' events and async cb errors, right?
18:47 < crabdude> when I say "sync" I'm not usually talking about "syncio"
18:47 < ljharb> isaacs: ohhhh so you just meant, when the new error isn't literally created on the line. gotcha
18:48 < crabdude> I'm talking about any sync funcitons, like "url.parse"
18:48 <@isaacs> crabdude: right, so, we're talking about non-IO errors.
18:48 < crabdude> but that's the separate issue of whether node core should return errors or not
18:48 <@isaacs> crabdude: like, JavaScript stuff were you passed an invalid argument.
18:48 < crabdude> I'm content ATM to talk about passing invalid input errors to the callback isntead
18:49 <@isaacs> crabdude: returning error objects for invalid input to non-IO functions in JAvaScript is weird, at least.
18:49 <@isaacs> crabdude: you should validate your inputs first.  i mean, that's how it's done, usually
18:49 <@isaacs> and if the input is invalid, you get thrown
18:49 < draginx> https://gist.github.com/durango/e0aa31f312d26fea1e8a any idea why request() doesnt send content-length? the curl works 110%, also added the log/output for the response :/ it seems to try to send the content-length
18:49 < crabdude> isaacs: I'm talking about this: https://github.com/joyent/node/blob/master/lib/url.js#L118
18:49 < crabdude> node shouldn't do that
18:50 < crabdude> *especially* not in async functions where it could isntead by passed to the callback
18:50 < crabdude> I'd prefer it *never* happen
18:50 <@isaacs> crabdude: let's try to stay focused for the moment.
18:50 <@isaacs> crabdude: is that ok?
18:50 < crabdude> and that sync fns like url.parse return an error
18:50 <@isaacs> i'd like to differentiate between "sync IO functions" and "non-IO functions"
18:50 <@isaacs> both are not-async
18:50 < crabdude> I'm confused, I didn't realize I was going off topic, I take it you're talking about the "returning errors" issue?
18:51 < crabdude> ah, yes
18:51 <@isaacs> i'd like to focus for the moment on non-IO functions
18:51 < crabdude> alright, that's a good way of putting it, "non-io" and "sync-io"
18:51 <@isaacs> fs.openSync('not-a-file') probably ought to throw
18:51 <@isaacs> because, i mean, whatever, that's the pattern
18:51 <@isaacs> try/catch it
18:51 <@isaacs> don't do it in a server, etc.
18:51 < crabdude> That seems reasonable
18:51 <@isaacs> k, done :)
18:51 <@isaacs> next: non-IO functions
18:52 < crabdude> b/c if you're in an sync execution environment like startup, you're still in a single call stack
18:52 <@isaacs> the comon pattern in JavaScript IS actually to throw on invalid input.
18:52 < crabdude> I understand that completely, but the issue is along the lines of requiring a restart
18:52 < crabdude> browsers don't require a refresh on any thrown error
18:53 <@isaacs> no, they just silently become broken
18:53 < crabdude> I feel you're treating node more like application code than like engine/internal code
18:53 < crabdude> the internals don't
18:53 < crabdude> just the application code
18:53 <@isaacs> the JS does
18:53 < crabdude> the v8 internals don't enter into an undefined state b/c there was an invalid input error thrown
18:53 <@isaacs> i'm saying, for a JS application, yes it does require a refresh on thrown errors.
18:53 <@isaacs> and neither do our v8 internals.
18:54 < crabdude> yes, but equally, node should be a black box
18:54 <@isaacs> that's why you get an error on the domain, rather than a segfault.
18:54 < crabdude> it should be treated more akin to v8's relationship with application code
18:55 < crabdude> alright, to put it another way, imagine if all of node was implemented in c++
18:55 <@isaacs> so, i would like you to see that what you're actually saying is a lot less black-and-white than you probably realize.
18:56 < crabdude> and equally, I would like you to see that it is rather black and white and a lot less gray than you probably realize. ;)
18:56 <@isaacs> crabdude: or at least, less black and white than it seems from the outside.
18:56 <@isaacs> crabdude: you're asking for node-core to be more stable.  ok.  great.  maybe that could be my full time job for the next year or so :)
18:56 < crabdude> haha
18:56 <@isaacs> maybe we could have a bunch of other developers working on exactly that.
18:56 <@isaacs> we do.
18:56 <@isaacs> like, i mean, that's a process, etc.
18:57 < ljharb> :-p
18:57 < crabdude> just for clarification, it's not about node being more stable so much as it's about node not letting bad application code affect it's stability
18:57 < crabdude> there should be boundaries
18:57 <@isaacs> right
18:57 <@isaacs> but, it's still JavaScript.
18:57 <@isaacs> if we provide an API, then it's an API that can be abused.
18:58 < crabdude> I don't want core APIs to stop working b/c I forgot to pre-validate input, but right now that's what's happening
18:58 < bradleymeck> bad application code affects every envs stability 
18:58 <@isaacs> if we had more crisp boundaries, of the sort that C++ would have, then we wouldn't bother to throw, and we'd just abort() instead.
18:58 < bnoordhuis> i support that motion
18:58 < bnoordhuis> abort() is a great way for catching bugs
18:58 <@isaacs> crabdude: what you really want is for your mistakes to be made very visible, so that you can fix them, but not at the expense of your users' experience.
18:58 < bnoordhuis> and for having people report them
18:59 <@isaacs> it's a very gray area!
18:59 < crabdude> correct, I want to minimize error reach
18:59 <@isaacs> there's a lot of debate to be had there.
18:59 < bradleymeck> if i could separate stuff enough that aborts dont take down multiple independant control flows, sure, but not going to happen
18:59 <@isaacs> crabdude: the best way to do this reliably is to completely section off the application into parts, so that you can completely crash any part of it, without affecting the other parts.
19:00 < bradleymeck> ^
19:00 <@isaacs> haha, gmta :)
19:00 < crabdude> for instance, like with the original http/EE issue, if a single 'end' handler has an application error, it places the node into a state where it drops all existing requests
19:00 <@isaacs> where "great" = "has ever heard of erlang"
19:00 < crabdude> that's pretty severe
19:00 < bnoordhuis> bradleymeck: abort() has a way of focusing the mind. like torture
19:00 < crabdude> even if we restart gracefully, the requests will still timeout
19:00 < crabdude> all of them
19:00 < bradleymeck> bnoordhuis: like libgmp?
19:00 <@isaacs> crabdude: why do requests time out?  test please.
19:01 < bnoordhuis> bradleymeck: is libgmp that bad?
19:01 < crabdude> isaacs: SOA (many processes) in *one* aspect of fault tolerance
19:01 < crabdude> it's an external one
19:01 < crabdude> I'm talking about an internal one
19:01 < bradleymeck> bnoordhuis: aborts on any error, was a nofix 2 years ago when we talked to em about it
19:01 <@isaacs> crabdude: in erlang, each green thread can completely crash, and take its memory with it.
19:01 < bradleymeck> any error
19:01 <@isaacs> crabdude: actually, functional languages are great at this.
19:01 <@isaacs> crabdude: but javascript is hella stateful
19:02 <@isaacs> state is like delicious butter on hfcs-laden cornbread
19:02 < TehShrike> lol
19:02 <@isaacs> it's not good for you, but it's pretty damn awesome anyway.
19:02 < bradleymeck> only if we had completely shareless workers could i see it kinda working
19:02 < bradleymeck> but isolates are tough
19:02 < crabdude> isaacs: the original issue: https://github.com/joyent/node/issues/5107
19:02 < bnoordhuis> i like the libgmp developers already. sounds like my kind of people
19:02 <@isaacs> functional languages are the soy-free vegan paleo diet.  you get to look down on everyone, but you're probably also starving.
19:03 < samholmes> JavaScript parallel processing is pretty cool.
19:03 < samholmes> I wonder, would it be plausible to have multiple cores of CPU (like more than one i7, say) each connected to a networking chip/card/device, and using the incoming data coming through the interface, process the data and then emit the output through the networking interface. Then, you have a computer/laptop that parallels multiple large tasks to these CPU clusters. Adding more CPU power to your computer is as s
19:03 < samholmes> imple as connecting it to the cluster via software!
19:03 < crabdude> if your server acts as a proxy to another server, and in one of the response handlers you have a synchronous (non-io) error, it provents the internal socket's end handler from firing, preventing it from being collected, and thus blocking on all other requests, causing them to timeout *even if we attempt a graceful restart*
19:03 <@isaacs> crabdude: well ,yeah, i mean, the one that threw timed out.
19:03 <@isaacs> crabdude: back to "make node core more stable" ok, fine.
19:04 <@isaacs> crabdude: we should probably clean up the socket *before* emitting end.
19:04 <@isaacs> crabdude: http is scheduled to be rewritten in 0.12
19:04 < crabdude> alright, so that's one response
19:04 <@isaacs> crabdude: that wasn't made clear in the original issue, clearly.  i apologize for missing that aspect of it.
19:05 < crabdude> but this is only one symptom of what I see as a bug in EE
19:05 <@isaacs> crabdude: a cursory reading of it seems like you're saying, "I did process.on('uncaughtException') but when an error happened, it still caused bad things to happen"
19:05 <@isaacs> crabdude: which is kind of like, yeah... um... can't really do much about that.
19:05 < crabdude> what about nearly any other EE exposed to externally (to the application) that depends internally upon some event to avoid an undefined state
19:05 <@isaacs> because javascript
19:06 <@isaacs> but, specifically, we can fix this bug.
19:06 <@isaacs> not the general "EE.emit() throwing can prevent other handlers from firing"
19:06 <@isaacs> that's not a good tradeoff to even consider fixing.
19:06 <@isaacs> high complexity, high performance cost, low benefit.
19:07 <@isaacs> in fact, the ostensible "benefit" may even be a cost, in some cases, as it could obscure the error, making it harder to detect and/or fix.
19:07 <@isaacs> i've got to run and get some lunch
19:07 < crabdude> so that last point is mildly reasonable regarding obscuring the error due to rethrowing
19:08 < crabdude> I understand that is an unfortunate issue
19:08 < crabdude> stack traces can be altered however
19:08 <@isaacs> one potential that i've actually considered is to have an entirely separate code path or something for internal events
19:08 < crabdude> right, nm
19:08 < crabdude> it's not a stacktrace issue
19:09 <@isaacs> and never actually emit('foo').  always internalEmit('foo') which calls OUR handlers, and THEN yours.
19:09 < crabdude> isaacs: I was considering that as well
19:09 <@isaacs> or something like that
19:09 < crabdude> that would certainly solve the EE probably for future issues where this might manifest
19:09 <@isaacs> we could also be a bit more ghetto, and just only use foo.on('_end') instead fo foo.on('end')
19:10 < crabdude> haha
19:11 <@isaacs> there are some cases where we actually have done stuff like that
19:11 <@isaacs> x.emit('_end'); x.emit('end');
19:11 <@isaacs> so that we have a little pre-end step
19:12 <@Nexxy> x.emit('almost');
19:12 < crabdude> I think a separate event bus would be a reasonable tradeoff, as it would still address my concerns. it would not address my desire to avoid an undefined internal state in any way, and would still require an avoidable restart, but at least the error would not cascade across all concurrent requests.
19:14 < crabdude> my ultimate concern of course would be to avoid application errors from affecting internal state, with the primary purpose of 500s not requiring a process restart
19:15 < crabdude> is see process restarts an adolescent requirement brought on by the lack of a more mature strategy 
19:15 < crabdude> if by more mature that means "2.0" or something to that affect, well, I guess that is what it is
19:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:16 < crabdude> *I see process restarts as an
19:17 < samholmes> Is there a module like jquery-browserify only for html5shiv?
19:18 < ljharb> you'd have to browserify it yourself. but also, modernizr includes it.
19:22 < crabdude> isaacs: What concerns me most is that if you are restarting on applications errors, it's a lot easier to DOS your node server than it would be otherwise. It's not exactly like restarts are incredibly performant.
19:22 <@Nexxy> your processes should be fairly disposable anyway
19:23 <@Nexxy> IMHO
19:23 < crabdude> so if it turns out theres a code path that only 5% of your million users are hitting, it may be enough to take down your entire server due to the performance penalty of a restart
19:23 < crabdude> in other words, applications errors just got a hell of a lot more expensive
19:24 < crabdude> Nexxy: Yes, they should be, but if you're only able to serve 20 requests (5% hitting the failing code path) per restart, I think you may find they're less disposable than you want
19:26 < crabdude> one way to mitigate this of course is to make your processes as small as possible
19:26 <@Nexxy> and have several of them
19:26 < crabdude> and that does help, both with restart time and granularity of affected requests
19:26 < crabdude> yes, agreed, a process pool
19:27 < crabdude> that of course is *the* current "node way" to handle these situations
19:28 < crabdude> the frustration is that they can still become a major issue as at least for that service (process), you will be severely limited by the number of requests you can serve due to only being able to accept requests until the 20th (5% again) person hits the error path.
19:30 < crabdude> so you'd better hope you're luck that you don't have any erroring code paths in any hot services that are otherwise 100% stable as an unrelated code path for a portion of your users will DOS your site.
19:30 < penzur> >> alert("just kidding!")
19:30 < purr> penzur: undefined; Console: 'just kidding!'
19:31 < penzur> >> 1+"a"
19:31 < purr> penzur: (string) '1a'
19:31 < penzur> >> 1+"a"+true+false
19:31 < purr> penzur: (string) '1atruefalse'
19:35 < samholmes> ljharb: Is there a browserify mondernizer? :P
19:35 < samholmes> In stylus, what do I do if I want a fallback for rgba values?
19:35 < ljharb> samholmes: browserify is a module. browserify it yourself.
19:36 < samholmes> ljharb: How do I go about browserifying a lib?
19:36 < ljharb> i'm sure it's in the docs
19:36 < ljharb> i don't use it so i'm not sure
19:43 < ericelliott> Could somebody point me to a good example of testing a Node API with supertest?
19:45 < ericelliott> I'm looking at piping tap output into a stream to detect when the tap process is finished so I can shut down the API server for integration tests. Tried using tap-finished, but couldn't figure out how to make that work.
19:48 < mscdex> >> var node = { js: 'rules!' };
19:48 < purr> mscdex: undefined
19:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:57 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:02 <@isaacbw> is there a good reason that I should be getting an empty error (just an Error) out of CleartextStream.write
20:03 <@Nexxy> isaacbw, maybe the text is just clear?
20:04 <@isaacbw> hehe
20:04 <@Nexxy> I had to ;/
20:04 < tuhoojabotti> :)
20:05 <@isaacbw> it just seems to me like a generic error from the core api is bad news
20:07 < ningu> hrm... the name attribute of <a> is not supported in html5?
20:08 < ningu> oh. you use the id.
20:08 < ljharb> ningu: yes
20:08 < ljharb> hash values go to any element's id
20:08 < ningu> the finer points of html sometimes escape me
20:09 < ningu> I have a limited inventory of tags that I actually use :)
20:09 < ningu> form, input, a, ul, li, div, span ...
20:09 <@isaacbw> use angularjs and you can invent your own tags!
20:09 <@isaacbw> woo angular js power
20:09 < ningu> isaacbw: I do and I have
20:10 < ningu> on an entirely separate topic
20:11 < ningu> is there *any* good reason to choose double vs. single quotes in js? other than I suppose whether the string contains " or '
20:11 < ericelliott> I always prefer single quotes -- but that's probably just years of habit talking.
20:12 <@isaacbw> single quotes are prettier
20:12 < gildean> i use single quotes because it's only a single key, when double quotes requires two keys (shift + 2)
20:12 < ericelliott> what gildean said.
20:13 < ericelliott> back in the day, it was so you could more easily mix JavaScript and HTML, but that's ugly and somebody should really punch you in the jaw if you make a regular habit of that, anyway.
20:13 <@isaacbw> I also sort of think in my head "single quotes for js, double quotes for json"
20:13 < ningu> ericelliott: haha
20:14 < ningu> isaacbw: I can see arguments either way -- making js look more like json or less like json
20:14 < ningu> I probably would side with you
20:14 <@isaacbw> :D
20:14 < ningu> also I prefer unquoted keys like { foo: bar }
20:14 < ningu> where bar is a var obviously
20:15 < ningu> so that makes js different from json anyway
20:15 < daurnimator> is there a way I can access package.json from within my app?
20:15 < daurnimator> (e.g. I want to grab program description and print it out in --help
20:15 < ningu> daurnimator: var package = require('./package');
20:15 < AAA_awright> So glad to know that logic doesn't matter, so long as I went to school in the right place I'm correct *sigh*
20:15 < ljharb> unquoted keys are always preferred
20:16 < ningu> ljharb: except when they contain illegal characters, which you sometimes can't avoid
20:16 < ljharb> right
20:16 < ljharb> but that's very rare.
20:16 <@isaacbw> I usually prefer quoted keys stylistically
20:17 < ningu> say you have a key in foo and a value in bar... is there a one-liner to do: var obj = {}; obj[foo] = bar?
20:17 < ljharb> no
20:17 < ningu> yeah, I thought as much
20:17 < ningu> I kind of miss how perl does hashes
20:18 < ningu> you can do things like my %hash = map { $_->{id} => $_ } @array;
20:18 < ningu> which is like, var hash = {}; array.forEach(function (item) { hash[item.id] = item });
20:18 < s5fs> ningu: difference being, you can read it in js ;-)
20:19 < ningu> s5fs: debatable, both are fairly ugly
20:19 < s5fs> ningu: true, but both are loved by their mothers
20:19 < s5fs> with perl, you almost have to already know it to read it
20:20 < slicky> Readable code > *
20:22 < ningu> I'd be happy to find a more readable way to do what perl does
20:22 < ningu> I just like being able to automatically transform arrays into hashes
20:24 < daurnimator> ningu: thanks :D
20:24 < ningu> :)
20:24 < daurnimator> googling I saw that in the next version theres require.package()
20:25 < ningu> eh?
20:25 < daurnimator> https://github.com/joyent/node/pull/4752
20:25 < ningu> ah I see
20:27 < ningu> but isaacs did not accept it
20:27 < daurnimator> ningu: oh, I read it wrong
20:27 < daurnimator> I thought i saw merged
20:35 < michael-robinson> ljharb: I've half-implemented the mega async
20:35 < michael-robinson> ljharb: it makes me feel happy
20:35 < ljharb> ?
20:35 < michael-robinson> ljharb: seeing as it was such a big refactor I took the extra step to change the "class" implementation as well, to make it more better
20:36 < ljharb> refresh my memory?
20:36 < ningu> michael-robinson: the true measure is whether you've done it so that you don't have indents 5 levels deep
20:36 < faceleg|work> ningu: they are 100 levels deep
20:36 < faceleg|work> ljharb: forgot I was wearing the wrong clothes
20:36 < faceleg|work> ljharb: I was talking to you yesterday about some things
20:36 < faceleg|work> you said some stuff, I did too
20:36 < faceleg|work> then we parted ways
20:36 < ljharb> can you be more specific? :-p
20:36 < faceleg|work> not really
20:36 < ljharb> lol then i don't remember. i talk about lots of things.
20:36 < faceleg|work> it's who I am, deal with it
20:36 < faceleg|work> same
20:37 < faceleg|work> something something bad module design yadda yadda do it this way blah blah
20:38 < faceleg|work> ljharb: this: 
20:38 < faceleg|work> http://hastebin.com/sovonodupu.js
20:38 < ljharb> faceleg|work: ah yes, the git thing. awesome
20:39 < ningu> faceleg is the repo man
20:39 < faceleg|work> lol
20:39 < faceleg|work> ljharb: yes it feels better
20:40 < faceleg|work> refactored to make the "classes" use Class.proto.method as well, instead of waht they were which was a func returning a {} that had functions, which was pretty gross
20:40 < faceleg|work> basically refactoring the entire code base
20:40 < ljharb> eh, i prefer objects instead of instances, but ok
20:40 < faceleg|work> all 1000 tests fail
20:40 < faceleg|work> meh
20:40 < faceleg|work> if I did everything you said I'd be a robot right
20:41 < faceleg|work> maybe this is my way of asserting my individualism over your and ningu's advice (and bnoordhuis and the others)
20:41 < faceleg|work> instead of being simply an amalgamation of other people
20:41 < faceleg|work> I AM ALIVE
20:41 < faceleg|work> I FEEL
20:41 < jaha> any npms or suggestions on creating a resumable download module for node.js? I need to be able to download large partition images (2-4gb) and handle resuming on network drops, then doing checksums after complete
20:41 < ningu> if all 1000 tests fail maybe it's working, just on a different level?
20:41 < faceleg|work> ningu: it's working
20:42 < faceleg|work> just doesn't test.done() in one of them, which is causing the rest to not run
20:42 < faceleg|work> I'm not worried
20:42 < ningu> it might be a good april fool's joke to hack a test suite to invert all test results
20:42 < faceleg|work> heaps of it was wrong and untestable anyway
20:42 < faceleg|work> also a lot was VERY hard to understand
20:43 < faceleg|work> after I've done it it's going to be a lot easier for others to contribute to
20:43 < AAA_awright> daurnimator: I'd say that's bad for a number of reasons, though the least of which being that require is "locked down"
20:44 < dguttman> I'm a little confused with new writable streams, if you pipe a readable stream to a writable stream, and you want to pass objects, do you have to JSON.stringify / parse to do it?
20:44 < ericelliott> faceleg|work: http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/
20:44 < x05h> Quick question, does anyone know how to use authorization() when the connection is cross domain? cookies wont work because it's not allowed by Access-Control-Allow-Origin. :/
20:44 < daurnimator> AAA_awright: ??
20:44 < lpin> is this https://gist.github.com/lpinca/5257771 a valid alternative to Math.random()?  or just overkill/does not worth it?
20:45 < AAA_awright> daurnimator: require.package
20:45 < AAA_awright> Node.js does not and should not have any knowledge of what a "package" is
20:45 < jocafa> what are you doing with randomness?
20:45 < daurnimator> AAA_awright: it already knows. (name and version)
20:45 < AAA_awright> That's several levels of abstraction above
20:45 < AAA_awright> No it doesn't?
20:46 < lpin> jocafa say shuffle a deck
20:46 < lpin> or something like that
20:46 < jocafa> do you need it to be repeatable or something? what does Math.random() not give you that you need?
20:46 < AAA_awright> daurnimator: It has an alias, and it resolves it to a function, but as far as being a "name" that's semantically insignificant, and there's no knowledge of a version number whatsoever
20:46 < buzzedword> hey guys, trying to see if you can help me suss a weird prototype issue with one of my classes... source here: https://gist.github.com/buzzedword/e84adec1fdeb171a22e6
20:46 < lpin> i want a clean uniform distribution
20:47 < daurnimator> AAA_awright: require looks for and reads package.json. it would make sense to me if this was stored and accesible
20:47 < daurnimator> see http://nodejs.org/api/modules.html#modules_folders_as_modules
20:47 < AAA_awright> daurnimator: I don't think it should even do that, but it's not a huge problem since it's functionally the same as a symlink
20:47 < buzzedword> the "ViewHelper" class can be instanciated with the new keyword, has a constructor, and at the application level, we're even aware of it. however, the method that's attached to the ViewHelper's prototypal chain cannot get it's parent instance's prototypal chain-- it returns undefined
20:48 < AAA_awright> It's not reading it as a "package"
20:48 < AAA_awright> It's strictly a symlink
20:48 < daurnimator> but it still opened the file, parsed it, etc\
20:48 < daurnimator> would be nice to stow that object away
20:48 < jocafa> lpin:  there's this: https://npmjs.org/package/alea  and i use a similar implementation of Alea in my Nonsense module
20:48 < daurnimator> rather just me doing it all over again
20:48 < ericelliott> buzzedword: Sounds painful.
20:48 < AAA_awright> You can't guarentee that it'll always be there though
20:48 < AAA_awright> A module is just a function
20:49 < lpin> jocafa no i don't need to pass a seed or get the same sequence again
20:49 < AAA_awright> It might not even be found in a file at all
20:49 < daurnimator> AAA_awright: in which case require.package returns null/undefined
20:49 < jocafa> right but alea's distribution is better
20:49 < buzzedword> ericelliott: it is, i'm trying to figure out what's going on. i've swapped this clientside, and --sans res.format-- i can access the prototype from the appended function
20:50 < jocafa> but the crypto implementation is probably far better still
20:50 < buzzedword> also for context-- i'm using express, and this is brought in context of a response-- so the only other thing i can think of is that the response is applying a different context to the function
20:51 < buzzedword> how many times can i say context...
20:51 < lpin> crypto use /dev/random if i'm not wrong
20:51 < AAA_awright> daurnimator: You do get the concept that it's not functionality that belongs in that abstraction level... Node.js exclusively deals in modules, modules of which are set up by a package manager, and you can use any number of package managers. If you want to interface with a particular package file, then that's a task for your package manager library to do, not Node.js... require('mepackagemanager').resolve('modulename').version
20:52 < jocafa> if you're doing stuff just in node, i'd probably go the crypto route
20:52 < AAA_awright> ahhhh what are you doing with crypto
20:52 < lpin> jocafa yep that will be used server side
20:52 < jocafa> the only reason i went with alea is because it had great distribution *and* i needed repeatability
20:53 < lpin> also my the needed range is by far smaller than the random prng range used there
20:54 < lpin> so the distribution should be ok
20:54 < AAA_awright> Oh, browser side, carry on
20:54 < lpin> i think i'll keep that route
20:54 < jocafa> AAA_awright:  talking about using crypto server-side to generate good random numbers
20:54 < ericelliott> buzzedword: I don't know if the API design was your choice, but http://ericleads.com/2012/09/stop-using-constructor-functions-in-javascript/ and http://ericleads.com/2013/01/javascript-constructor-functions-vs-factory-functions/ and http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/
20:55 < buzzedword> good to know
20:55 < buzzedword> bookmarking for reading-- thank you
20:55 <@Nexxy> I don't think those URLs are long enough
20:56 < jocafa> ericelliott:  ooh, stuffs to read!
20:58 < AAA_awright> Bah where's the longify-url service when you need it
20:58 < ericelliott> buzzedword: So, I pointed you to those resources because you're trying to access a parent instances prototype chain. Martin Fowler considers that a code smell, and I agree with him.
20:59 < ericelliott> buzzedword: to me, it says your inheritance methods are a little more complex than they need to be.
20:59 < buzzedword> ericelliott: right, and i can see that the flywheel actually solves the problem that i'm using constructors to solve
20:59 < AAA_awright> buzzedword: The fact you're using require() *inside a function call* is a bit conserning
21:00 < ericelliott> ^^^ that too.
21:00 < buzzedword> AAA_awright: i might be a bit too green to understand the issue you're seeing, can you be more specific?
21:01 < AAA_awright> buzzedword: https://gist.github.com/buzzedword/e84adec1fdeb171a22e6#file-render-js-L36
21:01 < buzzedword> AAA_awright: OH yeah, no that's shim
21:01 < AAA_awright> I'm not sure what all these links about constructors are about though
21:02 < AAA_awright> Aside from that I don't see how that's relevant, there's nothing wrong with the 'new' keyword
21:02 < ericelliott> buzzedword: I like to keep all my require statements at the top of my modules - and they always assign to a variable that I actually use. Try to avoid using require() for side effects, in the same way that you should avoid instantiating an object just for its side-effects, or accessing a property for side-effects... brittle stuff.
21:02 < ljharb> you absolutely should ignore using require for side effects
21:03 < ningu> side-effects suck, nobody likes an erection lasting more than 2 hours
21:03 < ljharb> that defeats the purpose of modules
21:03 < buzzedword> ha! yeah, i can see your guys point when you put it like that. even for shim, it's particularly ugly.
21:03 < ericelliott> AAA_awright: I'm happy to debate you on exposing `new` requirements in the API. I'll be speaking on those issues at Fluent conf. Come hang out. =)
21:03 < buzzedword> I could probably find a better way to do that
21:03 < ningu> howevr, I do not object to things like: foo ? a() : b();
21:03 < buzzedword> ericelliott: post slides, plz. :)
21:04 < AAA_awright> ericelliott: What are you promoting exactly?
21:04 < buzzedword> be right back-- rewriting a few things
21:04 < AAA_awright> Someone writing those blog posts seems very confused that ECMAScript isn't an OO language
21:04 < ningu> AAA_awright: you're talking to that someone, aren't you?
21:04 < ericelliott> I wrote the blog post. And ECMAScript certainly is an OO language.
21:05 < ljharb> it's not classical inheritance tho.
21:05 < AAA_awright> It's a prototype-based language
21:05 < ljharb> i've almost never seen "new" used in a way that's prototypical.
21:05 < ericelliott> ^^ what ljharb said.
21:05 < ljharb> the vast majority of people use it like it's java.
21:05 < slicky> oh snap, here come the neckbeards
21:05 < ericelliott> prototype is an OO paradigm.
21:05 < ljharb> so i avoid it.
21:05 < ningu> classical inheritance... like, beethoven inherits form mozart?
21:05 < alex4nder> haha
21:05 < kofno_> I need to get cracking on trip prep. Tried to close the loop best I could on code review. 
21:05 < s5fs> ningu: i prefer your description
21:05 < ericelliott> ningu++
21:05 < kofno_> pfft
21:05 < alex4nder> objects are a poor man's closures.. closures are a poor man's objects.
21:06 < ningu> alex4nder: and what do people who can afford the luxury do?
21:06 < kofno_> wrong window there :)
21:06 < alex4nder> ningu: they hire underlings to write their code for them
21:06 < ericelliott> alex4nder: That's not even the debate. =)
21:06 < AAA_awright> ljharb: Other people don't use it correctly so you avoid it? That makes no sense whatsoever?
21:06 < alex4nder> ericelliott: it's the answer to all questions.
21:06 < ericelliott> alex4nder: I think objects and closures play really nicely together. =)
21:06 < alex4nder> ericelliott: everything else is a question about how you build up your vtable.
21:06 < ljharb> AAA_awright: well, i avoid it because a functional approach makes for better and simpler programs imo.
21:07 < AAA_awright> How do you make the distinction?
21:07 < ningu> honestly I always thought of prototypes and classes as alternative ways of solving the same problem
21:07 < ljharb> AAA_awright: but i also avoid it because it adds confusion. and things that add confusion for some people, should not be in programs.
21:07 < alex4nder> ningu: they are, that's why it's a stupid argument
21:07 < alex4nder> use what works best
21:07 < ningu> they may require slightly different coding styles but ultimately they do the same thing
21:07 < ljharb> "useful but sometimes confusing" is the same as "harmful"
21:07 < AAA_awright> ljharb: Avoid what, exactly?
21:07 < alex4nder> ningu: you can write class based inheritance in javascript in 30 minutes.
21:07 < s5fs> ljharb: agreed.
21:07 < ljharb> AAA_awright: inheritance in any form.
21:07 < ljharb> AAA_awright: except for mixins.
21:07 < ljharb> :-p
21:08 < AAA_awright> And how do you go about that
21:08 < ljharb> pass around data into functions? use verbs instead of nouns.
21:08 < ningu> someone should make a movie called v is for vtable
21:08 < ljharb> AAA_awright: http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html
21:08 < AAA_awright> I don't see a difference between going myFunc.prototype = Object.create(superFunction);
21:08 < AAA_awright> And just copying in the desired functions into your prototype, myFunc.prototype.add = require('superFunction').add
21:08 < s5fs> ningu: "we'll sell you the whole seat, but you'll only need THE EDGE'
21:09 < slicky> suck it netlink
21:09 < ljharb> AAA_awright: object.create isn't cross-browser yet. ie8 still matters.
21:09 < ningu> what's been up with freenode lately anyway
21:09 < ericelliott> ningu: they are -- alex4nder: it's not entirely a stupid debate. Say, for example, you can drive to another city. One route takes you straight there (for the most part). The other meanders through an urban jungle and loops back over itself a few times. Clearly you should select the appropriate route mindfully, and not simply because you know how to take one and not the other -- especially if...
21:09 < ericelliott> ...your time matters to you, and you have to get to that destination frequently. ;)
21:09 < ericelliott> the whole anti-dogma dogma in the JS community is silly. There are better ways to do things, and you should use the better ways if you know them.
21:10 < ningu> ericelliott: I used that analogy last night with agu^10
21:10 < ljharb> ericelliott: "anti-dogma dogma"? what does that mean
21:10 < ningu> he was using jquery to produce template output server-side because jquery was what he knew
21:10 < ljharb> is that like "here at tolerance camp, the only thing we don't tolerate is intolerance"?
21:10 <@Nexxy> marginal gains as a service
21:11 < s5fs> Nexxy: hai
21:11 < ningu> ericelliott: is there really an anti-dogma dogma in the js community? and here I thought js was different from perl (my former/sort-of-still community)
21:11 <@Nexxy> s5fs, ahoy hoy
21:11 <@Nexxy> s5fs, PUT A SENSOR ON IT!
21:11 < ningu> people in this channel tell you all the time what's good and bad in js practice
21:12 < faceleg|work> ericelliott: I don't "get" why functions as constructors are bad
21:12 <@Nexxy> ningu, people in this channel have a habit of speaking loudly about issues they may or may not be that well versed in
21:12 < ljharb> because there's plenty of good and bad things.
21:12 < jocafa> rub some bacon on it
21:12 < ljharb> lol Nexxy is also correct about that.
21:12 < ericelliott> ningu: yeah. There's a strong, "do whatever you feel comfortable with" and "there's no wrong way" sentiment that pervades the JS culture... and that's fine, to a degree, except when it's played as a trump card in every conversation about whether or not one way is better than another way.
21:12 <@Nexxy> ericelliott is completely and utterly correct. no one in the JS community has ever written or run a benchmark, ever.
21:12 < cracken> the elitists are everywhere, writing frameworks that no one uses
21:13 < AAA_awright> ljharb: But we're talking about ECMAScript in general
21:13 < s5fs> Nexxy: benchmark, no. but i did make some nice red oak end tables once.
21:13 <@Nexxy> ohhh
21:13 < slicky> heh
21:13 < AAA_awright> And I use myFunc.prototype = (new superFunc); anyways
21:13 < ljharb> AAA_awright: ok, fair enough. but it's worth noting that "ES in general" never exists in a vaccuum away from browsers.
21:14 < ljharb> AAA_awright: when Object.create can be used in browsers, perhaps people will be familiar enough with it not to need "new" to solve their problems
21:14 < ericelliott> Nexxy: I didn't say nobody cares about discovering and promoting best practices. =)
21:14 < AAA_awright> ljharb: That's not a replacement for new by any means, you still need constructors
21:14 < jocafa> how 'bout this:  i disagree with your view on the basis of personal opinion and practice, but your point remains valid and insightful! *ragequit*
21:14 < jocafa> hehe
21:14 < ljharb> AAA_awright: i challenge that statement
21:14 < faceleg|work> order, order 
21:15 < AAA_awright> What would you replace with constructors
21:15 < ericelliott> ljharb: Object.create() shims well enough in a handful of lines. I use it in browsers all the time.
21:15 < ljharb> ericelliott: that's entirely untrue. Object.create(null) is required for a shim.
21:15 < ericelliott> AAA_awright: What do you mean, "you still need constructors" -- for what?
21:16 < ljharb> if it doesn't work for that, it's an incomplete shim, which is a HUGE js sin.
21:16 < ningu> I demand a stimulus package for the constructor industry
21:16 < AAA_awright> ljharb: It is possible to shim Object.create
21:16 < faceleg|work> LOL
21:16 < ljharb> ericelliott: you can def cover most use cases with a method tho. webreflection has one called "inherits" that works well.
21:16 < ljharb> AAA_awright: only if you can shim Object.create(null). which you can't.
21:16 < ljharb> not in IE 8 and below.
21:16 < AAA_awright> ericelliott: Initialising data
21:16 < ericelliott> AAA_awright: It's not possible to completely shim Object.create in old browsers.
21:17 < ljharb> thus it shouldn't be shimmed at all.
21:17 < ningu> ljharb: however, it's fine to write code that's only meant to run server-side on node too -- there are situations where that is entirely reasonable.
21:17 < ningu> so it's reasonable to talk about what practice you should use for that.
21:17 < ljharb> ningu: true. i'm talking about general coding practices, since the percentage that doesn't use a browser at all i think is very small.
21:17 < faceleg|work> I still don't get why I can't 'new'
21:17 < faceleg|work> (in node)
21:17 < ningu> ljharb: ok, fair enough.
21:17 < ljharb> ningu: and "general practice" applies to what most coders will expect, regardless of what works in node.
21:18 < ericelliott> ljharb: I disagree. The fundamental benefit of Object.create() is to easily attach a prototype to a newly constructed object... and that bit of Object.create() shims works great.
21:18 < ningu> although I think talking about ideal practice is worthwhile even if you can't accomplish it in all browsers currently
21:18 < ljharb> ericelliott: shims should 100% conform to spec, or they are simply *wrong*. end of story.
21:18 < ljharb> ningu: fair enough
21:18 < ericelliott> ljharb: That's silly.
21:18 < ljharb> ericelliott: if you want to make a function that simulates 97% of Object.create, and call it something else, you go to town - that's awesome.
21:18 < ningu> if you know what your shim does and doesn't accomplish it should be OK
21:18 < ljharb> lol
21:19 < ljharb> except that other code, not yours, will check for the existence of the function
21:19 < ljharb> and assume if it's there, it conforms.
21:19 < ningu> well, yes, that's true too
21:19 < ljharb> so you're breaking other code by shimming improperly.
21:19 < ljharb> period.
21:19 < ningu> it depends how self-contained your code is or is intended to be
21:19 < ericelliott> ljharb: the ultra-minimal Object.create() shim off of which the realized implementation of Object.create() is based was widely used long before any browser implemented Object.create().
21:19 < faceleg|work> ericelliott: ljharb ningu AAA_awright this is what I'm doing: https://github.com/PANmedia/Raptor/blob/experimental/src/components/ui/dialog-button.js
21:19 < ljharb> but not called "Object.create". the name matters.
21:19 < ningu> anyway... this is a bit off topic but I really wonder why there is no Object.values()
21:20 < AAA_awright> In general it's provably bad but in specific instances you can test to ensure that an Object.create shim provides backward and forward compatability (by not needing to support a custom variant of Object.create for all time in the future, when eventually you don't need the shim anymore)
21:20 < faceleg|work> well that's not wahat I"m doing but it's like that 
21:20 < ljharb> ningu: Object.keys(foo).map(function (key) { return foo[key]; }) :-p
21:21 < ningu> ljharb: of course. it's possible, just ugly.
21:21 < AAA_awright> faceleg|work: Looks good
21:21 < ljharb> AAA_awright: if you don't need all the functionality, then use a different function that either approximates or uses native functionality as appropriate, but don't make a broken shim.
21:21 < ningu> ljharb: there is also _.values()
21:21 < faceleg|work> AAA_awright: haha, but are't you on the 'new' side?
21:21 < ericelliott> ljharb: http://javascript.crockford.com/prototypal.html -- Object.create() is backwards-compatible with Crockford's Object.create() utility that came long before the JS spec.
21:21 < ljharb> ningu: that's underscore. might as well suggest using jquery :-p. we're talking native here.
21:22 < ljharb> ericelliott: none of crockford's code samples have been updated in years. not a valid reference.
21:22 < faceleg|work> ljharb: ericelliott ningu what is the issue with the code style I posted just now?
21:22 < ericelliott> ljharb: so regardless of the merits of other "partial shims" -- you're just wrong about Object.create()
21:22 < ningu> ljharb: yeah, I was talking about a native method that would be optimized
21:22 < AAA_awright> faceleg|work: They do two different things, they both have uses. For creating instances of objects, use new. For creating a prototype chain, use Object.create
21:22 < ningu> which neither of our answers is
21:22 < AAA_awright> Is it really that hard to understand?
21:22 < ningu> faceleg|work: I didn't ever object to anything
21:22 < ningu> it's ericelliott who has a position :)
21:23 < ljharb> faceleg|work: there's nothing inherently wrong with that. but i'd bet you could do it without needing constructors at all
21:23 < faceleg|work> AAA_awright: no, I just was confused by the article that was linked to me by ericelliott: http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/ saying not to 'new' anymore
21:23 < AAA_awright> faceleg|work: To say 'new' must always be avoided is nonsense
21:23 < faceleg|work> ljharb: I'm sure you could, but if I wan't constructors is there an actual reason not to use them
21:23 < faceleg|work> AAA_awright: this is my opinion
21:23 < AAA_awright> There's a _need_ to create instances of objects with a call to a constructor
21:23 < faceleg|work> AAA_awright: but I learn more by claiming total ignorance and badgering until I get a straight answer
21:24 < AAA_awright> faceleg|work: Straight answer to waht?
21:24 < ljharb> faceleg|work: i'm arguing that there should be a reason TO use them, and the default should be not to. and "i want to" doesn't count.
21:24 < jocafa> (mushroom, mushroom)
21:24 < faceleg|work> ljharb: what is a valid reason TO use them?
21:24  * ningu goes back to writing up api specs
21:24 <@Nexxy> never write code.
21:24 <@Nexxy> ever.
21:24 < ljharb> faceleg|work: haven't found one yet :-p (other than "that's what the browser/node provides and you have no choice"
21:25 < jocafa> i just dislike factories.  dislike.  opinion.
21:25 <@Nexxy> it's *always* the wrong thing to do
21:25 < ericelliott> AAA_awright: "There's a _need_ to create instances of objects with a call to a constructor" -- that simply isn't true.
21:25 < ningu> Nexxy: yeah, just write english, it's easier to understand
21:25 < ningu> jocafa: well, no one really wants to live near them so I don't think it's just your opinion
21:25 < jocafa> Nexxy:  if you write code, you create bugs.  my wife, who is not a programmer, has written ZERO bugs in her life.
21:25 < faceleg|work> ljharb: ok, why SHOULDN'T one use them?
21:25 < AAA_awright> ericelliott: "new Date" doesn't spring to mind?
21:25 < faceleg|work> jocafa: same here, our wives are way better than us
21:26 < jocafa> faceleg|work:  truth.
21:26 < ljharb> AAA_awright: thats when you have no choice :-p
21:26 < faceleg|work> ljharb: shouldn't you write a factory wrapper around date?
21:26 < ljharb> faceleg|work: because "this" has 6 possible meanings, and soon 7. because maintaining shared state leads to less reliable, and harder to maintain code.
21:26 < AAA_awright> But if there's nothing wrong with that, then what's the problem?
21:26  * faceleg|work pats self on back
21:26 < ljharb> faceleg|work: :-p
21:26 < faceleg|work> but but
21:26 < ericelliott> AAA_awright: Ah, I see what you mean. =) Yeah, some code forces you to use `new` to instantiate objects, but IMO (in my strong opinion), it's bad practice to expose that requirement in YOUR OWN APIs.
21:26 <@Nexxy> ljharb, not when you .bind .call and .apply everything! :D
21:26 < ljharb> AAA_awright: of course there's something wrong with it. it's just the only option in some cases. that's not a reason to do it always.
21:26 < faceleg|work> inside a naem.proto.method = function() {} isn't this always going to be known?
21:27 < ljharb> faceleg|work: nope. bind, call, apply, strict mode - they can all change the meaning of "this".
21:27 < jocafa> not if it's an event handler
21:27 < faceleg|work> gah
21:27 < AAA_awright> ericelliott: Still no, if new Date works perfectly fine for Date, then why not in my API design?
21:27 < faceleg|work> dont' tell me I have to rewrite my classes AGAIN
21:28 < ericelliott> =)
21:28 < ljharb> AAA_awright: it's NOT perfectly fine for Date. it's just the only option.
21:28 < AAA_awright> ericelliott: For instance, I have a function/class that validates a JSON Instance against a schema. An instance of a validator contains a map of schemas. This map must be initialized at the beginning, the only good way to do this is with `new Validator`
21:28 < AAA_awright> ljharb: What's the problem?
21:28 < ljharb> AAA_awright: it'd be much nicer if you could just call Date() and have it work.
21:28 < AAA_awright> ljharb: What do you mean "have it work"
21:28 < ericelliott> AAA_awright: Why is that the only good way to do it?
21:28 < ningu> I would say that if you use bind, call, or apply and change the "this" value, you're responsible for the consequences
21:28 < faceleg|work> ningu: I agree
21:28 < ljharb> AAA_awright: have it return a valid date object
21:28 < AAA_awright> >> Date()
21:28 < purr> AAA_awright: (string) 'Wed Mar 27 2013 21:25:08 GMT+0000 (UTC)'
21:29 < ljharb> ningu: yes but we're talking about an API. where you can't control what the user does.
21:29 < ericelliott> AAA_awright: I have also written functions that validate a JSON instance against a schema -- I didn't use `new`.
21:29 < ningu> ljharb: API users can always use the API in a fucked up way that will fail
21:29 < ljharb> >> var a = Date(); a.getTime()
21:29 < purr> ljharb: TypeError: Object Wed Mar 27 2013 21:25:46 GMT+0000 (UTC) has no method 'getTime'
21:29 < ljharb> AAA_awright: ^
21:29 < AAA_awright> ericelliott: You need to maintain an environment that has the map of JSON Schemas, so one schema can refer to another
21:29 < ljharb> ningu: you're arguing that your code should be less robust, just cause users might do something bad. eh?
21:30 < ericelliott> AAA_awright: And?
21:30 < jocafa> see: D3.  solid, awesome library.  uses factories.  i still use it and love it, but you can always tell what's "d3 code" in our codebase
21:30 < ningu> ljharb: no, I'm saying that if the API says do X and users do Y it's their own fault
21:30 < ericelliott> AAA_awright: You think you can't have instance safety without `new`?
21:30 < ljharb> ningu: perhaps, but that's not a justification for letting users do Y and have something break.
21:30 < AAA_awright> ericelliott: So what's the point of a `this` if you can't use it
21:31 < AAA_awright> Where does validator.schemas = {} get initialized?
21:31 < ningu> ljharb: what *should* happen if users do something the API didn't intend?
21:31 < ljharb> AAA_awright: what's the point of eval if you can't use it :-p don't use a language's bad parts
21:31 < ljharb> ningu: it should probably explicitly fail, and fast. rebinding "this" won't do that.
21:31 < ningu> ljharb: I guess it depends what you mean by "break"
21:31 < ningu> ok
21:31 < ljharb> and if you're maintaining a separate ref to "this" then you don't really need it anyways :-p
21:32 < AAA_awright> ljharb: So you're saying object notation in any form is "bad" and we should just pass everything by argument
21:32 < ericelliott> AAA_awright: You can instantiate a new object and return it from any function.
21:32 < ljharb> AAA_awright: no, not at all. {} is just fine.
21:32 < AAA_awright> ericelliott: So basically, "new Validator"
21:32 < ljharb> AAA_awright: but yes, like a functional language, i much prefer passing everything by argument.
21:33 < ericelliott> instead of `new Validator()` you can simply do `myValidator = validator()` or `myValidator = validator.create()` or whatever your preference is.
21:33 < AAA_awright> ljharb: It's the exact same thing, slightly different syntax to cover very common use cases without repeating yourself
21:33 < AAA_awright> Instead of writing the same 4-5 line boilerplate to return a new instance of an object, just use "new functionname()"
21:33 < ljharb> with a factory method, it's just one line.
21:34 <@Nexxy> so http://nodepdx.org/ is a thing
21:34 < ericelliott> AAA_awright: It's equivalent to `new Validator` -- except that you don't expose the requirement to use `new` to the public API. I've already covered all of this ground here: http://ericleads.com/2013/01/javascript-constructor-functions-vs-factory-functions/ and here: http://ericleads.com/2012/09/stop-using-constructor-functions-in-javascript/
21:35 < ericelliott> AAA_awright: It's constructors that require more boilerplate, not the other way around.
21:35 < AAA_awright> Constructors require more redundant code?
21:35 < AAA_awright> Wince when?
21:35 < ericelliott> Yes.
21:35 < AAA_awright> Since when?
21:35 < AAA_awright> I go:
21:36 < AAA_awright> >> function myFunc(){ this.x = {}; } myFunc.prototype.x = {}; /* if I'm feeling generous enough to hint to the ES engine */ new myFunc().x
21:36 < purr> AAA_awright: (object) {}
21:37 < AAA_awright> That's three lines of code to declare a type of object, initialize its data, and create an instance of it
21:37 < AAA_awright> And that's an *extremely* common use case in my code
21:38 < ericelliott> var george = Object.create(yourProto);
21:38 < ericelliott> george.name = 'George';
21:39 < AAA_awright> Problem: I accidently modify the prototype
21:39 < ericelliott> use extend and mixins to make thinngs really awesome.
21:39 < ericelliott> AAA_awright: You have that same problem with new.
21:39 < AAA_awright> No, watch
21:39 <@Nexxy> you guys
21:39 <@Nexxy> ericelliott is right
21:40 <@Nexxy> everybody can go home now
21:40 < faceleg|work> thanks Nexxy 
21:40 < mscdex> node.js is the winner!
21:40 < ericelliott> =)
21:40 < AAA_awright> >> var proto = {schemas: {}}; var x = Object.create(proto); x.schemas.y = 1; var z = Object.create(proto); z.schemas
21:40 < purr> AAA_awright: (object) {y: 1}
21:40 < AAA_awright> Oops
21:40 < ericelliott> AAA_awright: Read the blog posts, come to my talk. =)
21:40 < AAA_awright> See?
21:40 < ningu> ericelliott: what about how coffeescript implements classes?
21:40 < ningu> ericelliott: isn't it more or less how you suggest?
21:40 < ericelliott> ningu: it's super awesome.
21:40 < AAA_awright> How do you make sure that different instances talk to different instances of objects?
21:41 < st_luke> Nexxy: your twitter is extra-entertaining lately
21:41 < st_luke> A+ would read again
21:41 <@Nexxy> and just like that, ericelliott became wrong
21:41 <@Nexxy> st_luke, lol thanks <3
21:41 < AAA_awright> >> function proto(){ this.schemas = {}; } proto.prototype.schemas = {}; var x = new proto(); x.schemas.y = 1; new proto();
21:41 < purr> AAA_awright: (object) {schemas: {}}
21:41 < AAA_awright> Ta-da, clean "schemas" property
21:41 < faceleg|work> what is Nexxy twitter handle
21:41 < AAA_awright> ericelliott: So how do you propose I generate this clean "schemas" property without constructors?
21:41 < ljharb> AAA_awright: require your schema from a module. then you can't accidentally change it :-p
21:42 < AAA_awright> ljharb: Uh, yeah you can change it?
21:42 < ljharb> hm, i guess you could
21:43 < ericelliott> AAA_awright: Why don't you try to figure that out? =)
21:44 < ericelliott> AAA_awright: I pointed you to the resources you need. I don't have time to hand-hold you through everything. there are lots of code samples in (or linked to from) the blog posts.
21:44 < faceleg|work> ericelliott: but we like you holding our hands. such big hands
21:44 < AAA_awright> When I use function proto(){ /* constructor */ } I get a free "prototype" property initialized for me, a "constructor" property for me to use, and if I don't want to call the constructor, then I just use Object.create(proto.prototype) which is all of 10 extra characters IF I need to do that
21:44 < ericelliott> faceleg|work: =)
21:45 < AAA_awright> ericelliott: If it's so simple you should be able to get purr to show it off, or at least link me to something coherent
21:45 < faceleg|work> and then the fight started
21:47 < ningu> ericelliott: so are you basically saying that the javascript object model is fundamentally flawed, at least based on what the standard language makes simple?
21:47 < ericelliott> AAA_awright: function foo() { var instance = Object.create(whateverProto); /* can be a new object, clone of an example object, whatever */ instance.someInstanceAttr = 'foo'; return instance; }
21:48 < ericelliott> but you're totally right.. you get a free prototype initialized for you when you use a constructor... but if you want to add anything to it, you have to make some assignments, which is no easier than passing a proto into Object.create()
21:48 < ericelliott> if you don't want to add anything to it, you might as well return {new: 'thing'};
21:48 < Advant_> TooTallNate: you here?
21:48 <@TooTallNate> Advant_: i am
21:49 < Advant_> TooTallNate: You ever get a chance to look at that issue I opened with telnet?
21:49 <@TooTallNate> Advant_: not yet really
21:49 <@TooTallNate> Advant_: but i'd like to give it a nice refactor when i get some time
21:50 < Advant_> TooTallNate: Just more curious why it sends extra bytes ;)
21:52 < AAA_awright> ericelliott: That's the exact same thing as just using new functionName(). Except with that, you now have two different symbols to keep track of
21:53 < AAA_awright> >> function F(){}; (new F() instanceof F)
21:53 < purr> AAA_awright: (boolean) true
21:53 < AAA_awright> >> new Date instanceof Date
21:53 < purr> AAA_awright: (boolean) true
21:53 < AAA_awright> But I use a factory function... um, how do I test the prototype chain now?
21:53 < ljharb> >> var Foo = {}; Object.create(Foo) instanceof Foo
21:53 < purr> ljharb: TypeError: Expecting a function in instanceof check, but got #<Object>
21:54 < ljharb> lol, hm
21:54 < AAA_awright>  > require('f').createObject() instanceof require('f').Object
21:54 < AAA_awright> Ick
21:54 < ljharb> >> var Foo = {}; var a = Object.create(Foo); f.prototype === Foo
21:54 < purr> ljharb: ReferenceError: f is not defined
21:54 < ljharb> >> var Foo = {}; var a = Object.create(Foo); a.prototype === Foo
21:54 < purr> ljharb: (boolean) false
21:54 < faceleg|work> hilarious
21:54 < ljharb> >> var Foo = {}; var a = Object.create(Foo); Object.getPrototypeOf(a) === Foo
21:54 < purr> ljharb: (boolean) true
21:54 < ljharb> there we go
21:54 < AAA_awright> Case closed
21:54 < ericelliott> AAA_awright: Go here, and jump to the Stampit code examples: http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/  -- as you can see if you look at the source, it does all this without exposing a `new` requirement on the API, and opens up a lot of cool inheritance possibilities.
21:54 < ljharb> boom.
21:55 < ljharb> case closed indeed :-p
21:55 < ljharb> just cause the tools are different doesn't mean it's not exactly as simple.
21:55 < ericelliott> AAA_awright: You can do all that and expose `new`, but it would be obnoxious. Case closed. ;)
21:56 < AAA_awright> ericelliott: My question is about prototype chain checking, instanceof
21:56 < AAA_awright> All you're doing is doing the same thing that `new` already does but with more code and more logic to keep track of
21:56 < ericelliott> AAA_awright: I never need to "test the prototype chain." IMO, that's an anti-pattern.
21:57 < ericelliott> did you look at the stampit examples? I'm certainly doing a bit more than `new` already does. =)
21:57 < AAA_awright> ericelliott: So you never do any bounds checking?
21:57 < ljharb> AAA_awright: instanceof -> Object.getPrototypeOf
21:58 < AAA_awright> ljharb: So I have to do Object.getPrototypeOf(createFoo())
21:58 < AAA_awright> That's an anti-pattern if I ever saw one
21:58 < ljharb> >> var Foo = {}; var a = Object.create(Foo); Foo.isPrototypeOf(a) @AAA_awright 
21:58 < purr> AAA_awright: (boolean) true
21:58 < ljharb> there's isPrototypeOf too. you assume too quickly :-)
21:58 < MikeSalivin> Can someone please explain to me an example for a sync and async callback
21:59 <@Nexxy> MikeSalivin, sync = no callback, async = callback
21:59 < ljharb> MikeSalivin: sync functions return values. async functions take a callback, and call it with the first argument being "error" and then, whatever else.
21:59 < faceleg|work> MikeSalivin: sync functions just return the value
21:59 < AAA_awright> ericelliott: There's literally no semantic difference between defining the prototypes for your use, and standard `new` usage, so your claim that you have bigger and better inheritance possibilities is bunk
21:59 < MikeSalivin> Wow guys sooo many people have been telling me different things. Thank
21:59 < faceleg|work> three way
21:59 < AAA_awright> In either case, you're defining what the prototype of the created object is going to be
21:59 < ljharb> AAA_awright: "new" has possible pitfalls that don't occur with Object.create
21:59 < faceleg|work> ah, a rare occasion where the node.js room offers consistent advice
21:59 < MikeSalivin> So there are no such things as sync callbacks :)
21:59 < AAA_awright> ljharb: Like?
22:00 < faceleg|work> well you could do it but it is pointless
22:00 < AAA_awright> Nothing to do with the prototype chain
22:00 < ljharb> AAA_awright: if you forget "new", bad things can happen with "this", for example.
22:00 < AAA_awright> And therefore inheritance
22:00 < howdynihao> there is such a thing as sync callbacks
22:00 < ningu> MikeSalivin: well, sometimes you have a metho that is sometimes sync and sometimes async, in which case it would take a callback
22:00 <@Nexxy> no you don't
22:00 < MikeSalivin> ningu: kkkkk
22:00 <@Nexxy> MikeSalivin, forget what ningu just said
22:00 < MikeSalivin> ?
22:01 < faceleg|work> +1
22:01 <@Nexxy> a function is either always sync or always async
22:01 < AAA_awright> ljharb: I've never seen a problem with that, if I actually try to break it then either a new instance is returned anyways, or an Error is thrown
22:01 <@Nexxy> if it's not, it's not really 1 function
22:01 < ljharb> lol, `callback(err, value); if (err) { throw err; } return value`
22:01 < ningu> Nexxy: ok, fair enough, but I am thinking of something like an  express route
22:01 < AAA_awright> >> Error() instanceof Error
22:01 < purr> AAA_awright: (boolean) true
22:01 < ljharb> AAA_awright: it doesn't throw an error if you forget "new"
22:01 < ningu> Nexxy: not an api function
22:01 < AAA_awright> What now
22:02 < ningu> Nexxy: the situation comes up sometimes where you don't know if you'll need to make a database query or not to retrieve something
22:02 < ningu> since you may or may not have cached it, for example, and the cache may not require an async call
22:02 < kenperkins> is there a way to restart apps on source change?
22:02 < faceleg|work> then it's an async function, to the user 
22:03 < AAA_awright> ljharb: And anyways, that's an avoidable problem with the definition of 'this' when outside of a context
22:03 < faceleg|work> kenperkins: I use supervisor
22:03 < MikeSalivin> SO guys I created an proxy server that connects to a service retrieves data parses it and then returns it to the client. The Json is huge and the parsing might take a while. should use a callback for the parsing?
22:03 < ningu> faceleg|work: right, but it still takes a callback, that's my point
22:03 < ericelliott> kenperkins: There's a grunt watch task. =)
22:03 < faceleg|work> yeah
22:03 < ningu> faceleg|work: but it doesn't actually do an async operation
22:03 < faceleg|work> no
22:03 <@Nexxy> ningu, you should still supply the expected value in a consistent manner
22:03 < faceleg|work> it's confusing to call it a sync callback though
22:03 < AAA_awright> That's like complaining we should avoid equality operators because someone might only use one =
22:03 < ningu> Nexxy: yes, I know, that was also my point :)
22:03 <@Nexxy> my point was just that you're being confusing ;P
22:03 < MikeSalivin> How does the event look know to stop the parsing continue with the iteration and then continue to parsing on the next iteration of the event loop?
22:04 < MikeSalivin> loop*
22:04 < faceleg|work> MikeSalivin: do you have some example code? you could use hastebin.com to share it with us
22:04 < ljharb> MikeSalivin: ? it just runs whenever there's no other code waiting
22:04 < AAA_awright> >> 'use strict'; function F(){ this.x = {}; } F(); @ljharb
22:04 < purr> ljharb: TypeError: Cannot set property 'x' of undefined
22:04 < ljharb> AAA_awright: well yeah, in strict mode. but you don't need to be in strict mode for Object.create to do what you expect.
22:04 < ningu> Nexxy: well, it's a callback and will be executed immediately... so it may be confusing to call it a sync callback but that's essentially what happens in that case
22:05 < ningu> you shouldn't count out it being sync obviously
22:05 < ningu> on it*
22:05 < othiym23> you know what would be awesome?
22:05 < ljharb> ningu: it won
22:05 < othiym23> if there were, like, documention on startup.processNextTick
22:05 < ljharb> ningu: it won't be executed immediately, it will run on the next tick.
22:05 < othiym23> there's a lot of magic in that function
22:06 < AAA_awright> ljharb: So what you're saying is in strict mode, all these problems go away and `new` is even more useful and less error-prone
22:06 < AAA_awright> Uh huh
22:06 < ljharb> AAA_awright: true. but i still think it encourages overly complex program design.
22:06 < harth> substack: are there any docs on how to use browserify programmatically?
22:06 < ningu> ljharb: function(cb) { cb("hello"); } -- that will be executed on the next tick?
22:07 < howdynihao> callbacks are callbacks yo
22:07 < ljharb> ningu: no, but a proper async function should do something like process.nextTick(function () { cb('hello'); }) - and i believe node core does that.
22:07 < howdynihao> just treat them as callbacks, whats with this sync and async businessz
22:07 < ningu> ljharb: hmm, ok
22:08 < ljharb> ningu: if one doesn't call nextTick, then the dev calling your API is expecting to get control back right away, and won't
22:08 < arii> Is it possible to give node-gyp an include path as an environmental variable? using gcc, you would usually use $C_INCLUDE_PATH, but node-gyp does not use anything set in that variable.
22:08 < ningu> ljharb: yeah, I see
22:08 < ningu> that makes sense
22:09 < AAA_awright> ljharb: I'm not sure how forcing people to use a factory instead of a keyword causes a "more complex design"
22:09 < ningu> is there a writeup somewhere about when it's sensible to call process.nextTick()?
22:09 < ningu> although I think I now understand :)
22:09 < arii> and I do not want to manually change the binding.gyp for an external project.
22:09 < AAA_awright> The prototype is setup the same...
22:09 < AAA_awright> The constructor is slightly more complex
22:09 < spikeb> anyone ever have issues with Express sessions being shared/mixed-up between users? using connect-memcached module
22:09 <@TooTallNate> arii: node-gyp calls gcc internally
22:09 <@TooTallNate> so if C_INCLUDE_PATH works in gcc then it should work with node-gyp
22:09 < arii> TooTallNate: that was my assumption, but it doesn't seem to be the case.
22:10 < arii> I have a test.c file that does an include
22:10 <@TooTallNate> arii: note that it spawns g++ so it's probably CXX_INCLUDE_PATH
22:10 < arii> and it listens to the variable.
22:10 < arii> ah
22:10 < arii> good point.
22:10 < ningu> I think this channel is distracting me a bit too much from my work :)
22:11 < substack> harth: there's https://github.com/substack/node-browserify#methods
22:11 < faceleg|work> ningu: I had found one, i'll ty to find it
22:11 < faceleg|work> ningu: http://howtonode.org/understanding-process-next-tick
22:11 < ningu> aha ok
22:11 < ningu> thanks
22:11 < faceleg|work> ningu: I don't know how accurate it is but I found it interesting
22:11 < harth> substack: whoa, thanks, don't know how I missed that whole section
22:12 < arii> I think I tried CPLUS, but double checking my environmental variable, it doesn't seem to be set. ;) 
22:12 < ljharb> AAA_awright: it's not forcing. it's recommending.
22:12 < arii> that did the trick tho!
22:12 < substack> harth: and then for some of the more obscure features you can look at the bin script starting at https://github.com/substack/node-browserify/blob/master/bin/cmd.js#L39
22:12 < arii> DAMNIT, my test was futile =(
22:12 < arii> thanks TooTallNate.
22:12 < harth> substack: great, thanks
22:12 < substack> I think not quite all of the more recent features are completely documented in the api yet
22:12 < MikeSalivin> faceleg|work: Here it is http://pastebin.com/CHcTyGj2
22:12 <@TooTallNate> arii: kewl, glad that worked
22:13 < substack> like standlone that just landed monday
22:13 < MikeSalivin> ljharb: Here it is http://pastebin.com/CHcTyGj2
22:13 < MikeSalivin> Can someone discuss callbacks within each other vs outside of one another
22:14 < ljharb> MikeSalivin: why not parse(data, callback)?
22:14 < MikeSalivin> what?
22:14 < MikeSalivin> ljharb: That's what I'm asking
22:14 < eaSy60> Hello guys. Async or Step ?
22:15 < ljharb> MikeSalivin: i'd say you can do whatever you want in that case. however, the more tasks you can make async, the faster your code will perform and the less it will block.
22:15 < ljharb> eaSy60: what is "step"?
22:15 < howdynihao> ningu: you dont want process nexttick unless you literally want it on the nexttick
22:15 < MikeSalivin> faceleg|work: Any suggestions?
22:15 < eaSy60> https://github.com/caolan/async OR https://github.com/creationix/step
22:15 < AAA_awright> ljharb: Sorry, I mean, I don't see how that even suggests
22:16 < eaSy60> or even https://github.com/gett/common ?
22:16 < howdynihao> ningu: basically too many people misuse process.nextTick
22:16 < ljharb> howdynihao: what's the recommended way to do it?
22:16 < howdynihao> setImmediate
22:16 < howdynihao> or before 0.10, setTimeout 0
22:17 < faceleg|work> MikeSalivin: it's hard to know without seeing your parse function
22:17 < ljharb> ah yes, setImmediate is what i'm thinking of.
22:18 < MikeSalivin> faceleg|work: it's some ugly ugly json parsing
22:18 < MikeSalivin> You still want to see it?
22:19 < faceleg|work> MikeSalivin: ask howdynihao, I'm not familiar enough with nextTick
22:19 < MikeSalivin> faceleg|work: creating objects looping though arrays in json. Doing permutation/combination
22:19 < faceleg|work> sorry!
22:19 < AAA_awright> And I'm one of the biggest pushers of using Object.create, the fact we have a mechanism that's essentially copy-on-write is amazing
22:19 < MikeSalivin> faceleg|work: Is he here?
22:19 < AAA_awright> I use it all the time for creating objects where I want to make modifications to an object, and preserve the original, and have changes to the original "show through"
22:20 < AAA_awright> (A very common case in my application)
22:20 < AAA_awright> Who here uses JSON Schema or has ever wanted a need to write a "JSON Stylesheet" for modifying JSON documents?
22:21 < faceleg|work> howdynihao: can you apply your awesome to MikeSalivin question?
22:21 < ljharb> json schema? O.o sounds very xml
22:21 < Bansku> If you need JSON schema, you probably want to use XML instead
22:22 < ljharb> and you don't ever want to use xml :-p
22:22 < AAA_awright> ljharb: You've never needed to validate a JSON instance to make sure it conforms to some expectations?
22:22 < ericelliott> Bansku: that's silly. It's handy for validating incoming requests on a JSON-based API endpoint.
22:22 < AAA_awright> There's nothing wrong with XML, it's very good at what it does: Markup languages
22:22 < AAA_awright> XML is <em>VERY</em> good at markup languages!
22:23 < AAA_awright> (Try doing that in JSON)
22:24 < MikeSalivin> ?
22:24 < ljharb> AAA_awright: sure. but i don't need a schema for that.
22:24 < AAA_awright> ljharb: To do what that I talked about?
22:25 < AAA_awright> ljharb: There's good reason to use JSON Schema anyways, you use it to define how a JSON document shall be constructed, and then you give that schema a URL. Now you can differentiate different types of JSON documents from each other, for instance, v1 of an API from v2
22:25 < AAA_awright> Content-Type: application/json;profile=http://example.com/v1/blog.json
22:25 < AAA_awright> etc
22:25 < ljharb> AAA_awright: it's interesting, but i've never ran into something where i wished i had a way to differentiate json objects
22:25 < AAA_awright> You never needed to revision your API?
22:26 < ljharb> of course i have. but that's what a version param is for - i've never needed to check the data structure to know what version i was working with.
22:26 < AAA_awright> That Content-Type header is also used by users uploading documents
22:26 < AAA_awright> They say "I'm uploading a blog post" versus "I'm updating the tag list on this blog post"
22:27 < ljharb> that's what RESTful URLs are for.
22:27 < ljharb> RPC is bad news bears
22:27 < AAA_awright> A URL is supposed to identiffy a single resource
22:27 < ljharb> a POST to /blog_posts versus one to /blog_post/1/tags.
22:28 < AAA_awright> The latter is what I'm talking about
22:28 < ljharb> the "1" in that url is an ID, not a version
22:28 < ljharb> a versioned API would be something like /1/blog_post/123/tags
22:28 < AAA_awright> If you want to update only the tags, you do PUT http://example.com/2012/01/01/post Content-Type: http://example.com/v1/blog-tags.json
22:28 < AAA_awright> (And that's idempotent of course)
22:29 < AAA_awright> ljharb: A versioned API uses a parameter in the media-type
22:29 < AAA_awright> A version in the URL implies a version on the resource
22:29 < AAA_awright> That would be the first revision uploaded of that blog post, of all the revisions of that post
22:29 < ljharb> O.o i'm not sure i agree with that. but that's a decision you can make.
22:29 < ljharb> then pass a "version" param in the post.
22:30 < AAA_awright> Or... pass it in the media type
22:30 < AAA_awright> That's exactly what it's there for
22:30 < ljharb> content-type isn't for versions. the content-type there is application/json, or http encoded params, etc
22:31 < ljharb> "v1" isn't a type of content
22:31 < AAA_awright> Yes it is
22:31 < AAA_awright> ES, HTML, they all have MIME/Media-type parameters that specify version
22:31 < faceleg|work> on this I agree with ljharb 
22:31 < ljharb> mime type is different.
22:31 < faceleg|work> your api should be scoped to versions
22:31 < AAA_awright> text/html;profile=1
22:31 < ljharb> and again, mime type does not have versions.
22:31 < faceleg|work> if you're still allowing access to both old / new versions
22:31 < faceleg|work> /api/vx/ACTION
22:31 < AAA_awright> Media types allow parameters, yes
22:32 < ljharb> it's how all the big companies with APIs do it at least.
22:32 < MikeSalivin> So guys what't stopping me in making every function into a callback?
22:32 < faceleg|work> MikeSalivin: nothing!
22:32 < faceleg|work> callback all the things!
22:32 < faceleg|work> but seriously, nothing. Whether it's a good idea or not depends on the situation
22:32 < MikeSalivin> Seriously?
22:32 < AAA_awright> application/json;profile="http://example.com/schema.json" is a perfectly valid MIME/Media-type
22:32 < arii> and use .bind to callback even more things!
22:32 < faceleg|work> lol
22:32 < MikeSalivin> faceleg|work: Are you serious?
22:33 < ljharb> AAA_awright: that seems far weirder to me than just putting a version in the URL. it's adding a ton of complexity to the clients of your API.
22:33 < faceleg|work> I can be wrong, I've been so many times :P
22:33 < AAA_awright> ljharb: All the big companies are too uninformed to do it properly. GItHub actually does it correctly, they use a parameter in their Content-Type
22:33 < ljharb> lol
22:33 < AAA_awright> URLs identify resources, not API versions
22:34 < AAA_awright> If you have /1/blog, that's a specific revision of a blog post
22:34 < AAA_awright> URIs are supposed to be opaque
22:34 < ljharb> it'd be /blog/1 if so
22:34 < ljharb> noun then property, not property then noun. that's like yoda.
22:34 < ljharb> "revision 1 the blog post is"
22:34 < faceleg|work> or chinese
22:34 < AAA_awright> It doesn't really matter, at least not to the client
22:34 < AAA_awright> The only entity that should be reading semantics into URLs is the server
22:37 < AAA_awright> Well, I'll admit, at some level, you can publish different versions of a resource at different resource URIs
22:37 < AAA_awright> you can do http://example.com/2012/01/01/blog.json for a JSON-formatted version, and http://example.com/2012/01/01/blog.v2.json for v2-formatted JSON
22:38 < AAA_awright> Both would be different encodings of an abstract resource called http://example.com/2012/01/01/blog
22:38 < faceleg|work> a blog post posted on 01/01/2012
22:38 < AAA_awright> Probably
22:38 < AAA_awright> (not necessarially)
22:38 < AAA_awright> (that should go without saying)
22:39 < AAA_awright> Also, ISO time: 2012-01-01
22:41 < AAA_awright> And actually I highly encourage this practice
22:41 < AAA_awright> There's an HTTP header called Content-Location
22:42 < AAA_awright> It basically means "I can't encode that resource as a series of bytes because it's a CAR, but you say you want JSON, so here is a JSON document that talks about that car, and here's the URL where you can get this particular encoding in the future"
22:45 < howdynihao> faceleg|work whats up
22:48 < faceleg|work> MikeSalivin: wants you to help with process.nextTick
22:51 < howdynihao> MikeSalivin: you probably don't want process.nextTick
22:52 < MikeSalivin> howdynihao: hi
22:52 < MikeSalivin> howdynihao: No I don't
22:53 < MikeSalivin> howdynihao: http://pastebin.com/CHcTyGj2
22:53 < MikeSalivin> howdynihao: I have a couple of questions.
22:54 < MikeSalivin> howdynihao: Is it better to do callbacks within one another, or should I finish one callback and go to the other?
22:55 < MikeSalivin> howdynihao: Why wouldn't I make all my functions async? Is it a memory issue? For example I have a commandLineArgumentHandeling function. Why wouldn't I make this async?
22:56 < howdynihao> so it really depends on how long parse takes
22:56 < MikeSalivin> howdynihao: I have a parsing function when I retrieve data from a server. The data is huge and the parsing is ugly. should I make my parsing async?
22:57 < MikeSalivin> howdynihao: long...... but does it matter why not make everything async?
22:57 < howdynihao> well in your example you didn't really make it async
22:57 < ericelliott> MikeSalivin: There are lots of ways to manage asynchronous behaviors. You might want to look into libraries such as async and q (async offers underscore-esque functional utilities for asynchronous actions, while q offers a promises implementation that lets you say foo().then(doSomething).then(doSomethingElse))
22:57 < howdynihao> just because you made it into a callback doesnt make it async
22:58 < ericelliott> MikeSalivin: If your parsing is time-intensive, you could split off a worker, and call a callback when you're finished parsing.
22:58 < MikeSalivin> ........... people tell me different things.......
22:59 < MikeSalivin> please oh god please give me an example of a async callback vs sync callback
22:59 < ericelliott> MikeSalivin: If it's just for your application, you might want to return a promise... if it's a lib that will be consumed by lots of different people, just call a callback when you're done. =)
22:59 < ljharb> MikeSalivin: "sync callback" - if it's sync, there's no callback
22:59 < ericelliott> that doesn't even make sense.
22:59 < spikeb> just use fibers
22:59 < spikeb> ..jk
23:00 < Bansku> I don't know a lot about node
23:00 < ningu> don't know much about nodery
23:00 < Bansku> but wouldn't running several node.js processes work
23:00 < howdynihao> MikeSalivin: maybe the thing that's tripping you up is async != parallel ?
23:00 < ningu> Bansku: to what end?
23:01 < ericelliott> delaying your parsing with process.nextTick() will just delay that blocking parse until the next iteration through the event loop. What you need to do to make your processing non-blocking is to fork a worker.
23:01 < MikeSalivin> ericelliott: Please know what you are talking about or at least be clear when you spawn a worker you have to do ipc.
23:01 < howdynihao> why would you fork a worker?
23:01 < howdynihao> that makes no sense to me
23:01 < ericelliott> please know what I'm talking about?
23:02 < ningu> howdynihao: if you are doing a cpu intensive operation
23:02 <@Nexxy> let's all get frustrated and start being mean to each other
23:02 <@Nexxy> ready... go!
23:02 <@Nexxy> oh, wait
23:02 < spikeb> have any of you run into problems with Express sessions being shared between users?  I'm using connect-memcached + node-memcached. my first guess is maybe some sort of shared global state between requests
23:02 < howdynihao> ningu: how does it make anything more efficient
23:02 <@Nexxy> by not blocking the main event loop of your application
23:03 < ningu> howdynihao: cpu intensive operations will block
23:03 < howdynihao> yea ok and if cpu starts to feel it
23:03 < ericelliott> MikeSalivin: to clarify - yes, when you spawn a worker, you will incur IPC. If your job isn't CPU intensive enough to justify IPC, go ahead and block.
23:03 < howdynihao> you think your application will do anything?
23:03 < MikeSalivin> howdynihao: Are you telling me my parsing isn't async in my example?
23:03 < ningu> howdynihao: you can always set a high nice value
23:03 < ningu> howdynihao: depends how soon you need it to finish
23:04 < Madwill> Hi can anybody point to a tutorial or a framework that could help with creating multi-user environements with shared data used in non blocking way
23:04 < MikeSalivin> howdynihao: This is my example http://pastebin.com/CHcTyGj2 look on line 12 is my parsing not async?
23:04 < ericelliott> MikeSalivin: Node runs in a single event loop... you can't avoid blocking unless you fork your job out of the event loop.
23:04 < howdynihao> well my point is if it wasa reallly intensive you'd have dedicated workers
23:05 < howdynihao> so randomly forking in your app makes little sense, its a waste of even the resources to fork a process
23:05 < ningu> oh, yes. perhaps.
23:05 < ningu> that depends on the situation I'd say
23:05 < ericelliott> You only want to fork for intensive stuff. If you don't know if it's intense enough to fork, do it both ways and run a perf.
23:06 < MikeSalivin> ericelliott: Please I know that. Good you are very smart. I just need to solve a problem
23:06 < MikeSalivin> ericelliott: I'm not talking about forking... I'm talking about callbacks
23:07 < MikeSalivin> I have 8 processes forked already I know when to fork thanks.
23:07 < howdynihao> we are talking like, micrseconds here, there's no point in forking
23:07 <@Nexxy> MikeSalivin, there's absolutely 0 need to be rude to someone who's trying to help you
23:07 < ericelliott> MikeSalivin: If you don't need to fork, you don't need to make a callback.
23:07 < MikeSalivin> I'm sure I don't need to fork for parsing
23:07 < ningu> ericelliott: afaik his main question is whether there is such a thing as a sync callback
23:07 < ericelliott> MikeSalivin: Using a callback doesn't make your job asynchronous.
23:08 < howdynihao> its better to have 8 app processes running on 8 cores which block for a few ms, than to randomly fork processes
23:08 < ningu> if it's async it has to be implemented as a callback, but the callback doesn't *make* it async
23:09 <@Nexxy> unless you're doing IO, it's synchronous
23:09 <@Nexxy> there are caveats to that as well
23:09 < Sly> NEXXY <3
23:09 <@Nexxy> but that seems to be what MikeSalivin is asking
23:09 <@Nexxy> SLY <3
23:09 < MikeSalivin> ericelliott: So far no one has been able to answer this question then... how can I make code async..... I've read libuv... I've read a bunch of documents and still no answer
23:09 < ericelliott> MikeSalivin: Even using process.nextTick or setTimeout won't make the parse faster.. it will get out of the way and let the current callstack continue, but then the parse will still block the event loop during the next tick.
23:09 < howdynihao> MikeSalivin: async != parallel
23:09 < howdynihao> thats whats tripping you up
23:10 < MikeSalivin> ericelliott: I think this is very very wrong If you don't need to fork, you don't need to make a callback.
23:10 < ericelliott> MikeSalivin: I have answered your question, but you have ideas already stuck in your head that are blocking you from understanding my answers.
23:10 < ningu> MikeSalivin: it is entirely correct
23:10 < MikeSalivin> I understand the freakin difference between parallel and async I've written applications in go
23:11 < ningu> MikeSalivin: it's kind of long but maybe you should read http://www.youtube.com/watch?v=L0pjVcIsU6A
23:11 < ningu> err, watch
23:11 < ericelliott> MikeSalivin: Read what I just wrote about it still blocking during the next tick.
23:11 < puckey> Don't you hate it when you try to ask a question, but come up with the answer while being tough on yourself on how to word it?
23:11 < howdynihao> MikeSalivin: then a call back is just a call back, when people say async, it just means the code doesn't run top to bottom doesn't run synchornously
23:13 < MikeSalivin> ericelliott: I understand it will block during the next tick. So what I'm saying is I don't have control of this.. right... I can't say okay stop my parsing function halfway do something else and then next tick come back to it..
23:13 < ningu> MikeSalivin: that's right
23:13 < ericelliott> MikeSalivin: You have a few choices: fork and have the (CPU-intensive) process run in parallel, incurring IPC overhead, run it sync and block immediately, or defer it until the next tick of the event loop (using process.nextTick() or setTimeout())
23:13 < howdynihao> MikeSalivin: how long does the parse function take?
23:13 < ljharb> MikeSalivin: you can if you split your function into 2 parts tho
23:14 < ericelliott> MikeSalivin: Oh, yeah, you can totally timeslice your processing.
23:14 < howdynihao> ericelliott: why do you keep saying that
23:14 < howdynihao> you know forking isn't free right?
23:14 <@Nexxy> I want my, I want my, I want my forks for free
23:14 < ningu> howdynihao: what is your forking problem
23:14 < ericelliott> howdynihao: Yes, I do, but for really intensive stuff, forking is totally the right way to go.
23:14 < howdynihao> if its that intensive, dedicated workers
23:14 < ningu> howdynihao: sorry I couldn't resist that one
23:15 < ericelliott> howdynihao: That's what I'm saying. We're totally on the same page.
23:15 < howdynihao> if it's microseconds , then you're just trading resources -_-
23:15 < ericelliott> ^^ yeah, what howdynihao said.
23:16 < MikeSalivin> So all a callback does is processes the function on the next tick?
23:16 < MikeSalivin> right?
23:16 < howdynihao> no
23:16 < ningu> MikeSalivin: no
23:16 < ericelliott> the callback doesn't do that automatically.
23:16 < howdynihao> a call back is just a call back
23:16 < spikeb> question about module/filename naming: always lowercase? cameCase vs under_score? PascalCase for constructors?
23:16 <@Nexxy> you're executing another function, there's nothing special about it
23:16 < MikeSalivin> I can split my parsing function and do a callback when the first function is done to be handled on the 2nd tick
23:16 < MikeSalivin> right?
23:16 < ericelliott> a callback will run sync unless you defer it to the next tick or set a timeout.
23:16 < ningu> MikeSalivin: it depends what the function that's calling the callback is actually doing. often it's native code that may have threads or do various other things
23:17 < MikeSalivin> ericelliott: So how do I make it happen?
23:17 <@Nexxy> use process.nextTick or setImmediate
23:17 < howdynihao> use setImmediate
23:17 < howdynihao> don't use process.nextTick
23:18 <@Nexxy> if yo're using >0.9.x
23:18 < ericelliott> MikeSalivin: Yeah, you can do that.. it's called timeslicing. What nexxy said.
23:18 < MikeSalivin> so callbacks have no special meaning? callbacks have nothing to do with async code
23:18 < howdynihao> setTimeout(fn, 0) to mimic setImmediate if you're running an older node
23:18 < MikeSalivin> callbacks != 2nd ticks
23:18 <@Nexxy> MikeSalivin, callbacks are just functions
23:19 <@Nexxy> that you call...
23:19 < nathan7> "Do this. Call me back when you're done."
23:19 < MikeSalivin> Nexxy: and javascript is a language that you code.....
23:19 < MikeSalivin> ericelliott: please answer me..... please what do callbacks have to do with async code then?
23:19 <@Nexxy> I really don't understand why you're being so facetious whilst seeking help from people
23:20 < nathan7> Because that clearly encourages civil discussion
23:20 < howdynihao> doesn't go do first class functions?
23:20 < howdynihao> so if you use go, then why don't you understanding passing functions as arguments?
23:20 < ericelliott> MikeSalivin: When you're done processing and you have your result ready, you call the callback and pass the result back to the calling function. It's how you get your output back into the main program.
23:20 < MikeSalivin> Nexxy: Sorry, but either you don't understand my questions or your just shooting out sentences.
23:21 < TehShrike> I shoot out sentences all the time
23:21 < TehShrike> Like that one.  Just slid right out.
23:21 < Sly> I do too.
23:21 < howdynihao> MikeSalivin: you don't understand Nexxy's answer
23:21 <@Nexxy> MikeSalivin, actually I'm pretty sure I understand your question 
23:21 <@Nexxy> you've only been asking it for half an hour
23:21 < howdynihao> a call back is just a function you're passing as an argument
23:21 < MikeSalivin> ericelliott:  Completely understand that. But I have no control over which part of my code I want to be async. Right?
23:22 <@Nexxy> MikeSalivin, it's javascript
23:22 <@Nexxy> it's nto going to *be* async
23:22 <@Nexxy> ever, regardless
23:22 < MikeSalivin> TehShrike: Good job Sly you too .... please more
23:22 < ericelliott> MikeSalivin: Your biggest problem is that you start from the position that you know what you're talking about and the rest of us are clueless idiots who can't help you. Then you get frustrated and demanding with us. The truth is, the people who have been trying to help you have been around this block before, and you clearly haven't. Leave your ego at the door.
23:22 <@mbalho> anyone have that ungrateful irc noob meme from yesterday handy?
23:22 < TehShrike> MikeSalivin: maybe you should clarify what you mean by "async"?
23:22 <@Nexxy> mbalho, lol
23:22 <@mbalho> Nexxy: comes up once a day lately
23:23 < ningu> mbalho: you mean agu^10?
23:23 <@Nexxy> mbalho, yeah I just wish there were more constructive ways to address the issue
23:23 <@mbalho> Nexxy: i tell people to stfu and link to https://github.com/maxogden/art-of-node :D
23:23 <@Nexxy> I'm noticing the trend myself and it's disappointing
23:23 < ningu> mbalho: oh you said meme, not name
23:23 <@mbalho> Nexxy: its also why i wrote callbackhell.com, jsforcats.com, etc
23:23 <@Nexxy> mbalho, yeah +9001 for that
23:23 <@Nexxy> now we need one for liek
23:23 < TehShrike> Indeed.
23:23 <@Nexxy> ASYNCORNOT.COM
23:24 <@mbalho> lol
23:24 <@Nexxy> 1) is it using one of node's fancy IO abstractions that work via libuv?
23:24 <@Nexxy> then the answer is: PROBABLY!
23:24 <@Nexxy> otherewise: NO
23:24 < MikeSalivin> ericelliott: I have no ego.... I truly do not know that's why I'm here.... but still haven't answered my question.
23:24 < drudge> tyrannically-asynchrono.us
23:24 < luhx> hi
23:24 < TehShrike> drudge: lol
23:25 <@Nexxy> MikeSalivin, your question
23:25 <@Nexxy> has been answered
23:25 <@Nexxy> in just about every possible way
23:25 <@Nexxy> if you're still not satisfied, I don't really think there's anything else anyone can do for oyu
23:25 < MikeSalivin> I have no control over which parts of my code I want to be async, right? Just say yes, or no.
23:25 < howdynihao> you do if you use process.nextTick, setImmediate, setTimeout
23:26 < ericelliott> You do have control over which parts of your code you want to be asynchronous.
23:26 < MikeSalivin> My definition of async is code executing at different iterations of the event loop
23:26 <@mbalho> MikeSalivin: you have control over everything, its open source http://bit.ly/YIGuWc
23:26 <@Nexxy> mbalho, ahahaha
23:27 < howdynihao> MikeSalivin: and process.nextTick, setImmediate, setTimeout do that for you
23:27 < howdynihao> i thought thats been told you :p
23:27 < howdynihao> WEIRD
23:27 < ericelliott> MikeSalivin: You can pass any function into process.nextTick(), setImmediate(), or setTimeout() and have it execute in a different loop iteration.
23:27 < ningu> MikeSalivin: also, you can choose whether to run a sync or aync method if both are available. like fs.statSync versus fs.stat. but generally, all IO bound operations are provided as async methods and it's the exception if there's a sync method available. because that's basically the whole point of node.
23:28 < ericelliott> yeah, avoid the sync versions of those ^^ unless you're just booting up your server and you're blocking on require()s anyway.
23:28 < howdynihao> whoa.
23:28 < ningu> ericelliott: I do it from shell script-like things too
23:29 < ningu> ericelliott: which I sometimes write in node
23:29 < ericelliott> ningu: Yeah, that's probably fine. ;)
23:29 < howdynihao> he's asking about the event loop, but its like.... almost.. like we're stuck in an event loop, answering the same question over and over
23:29 < howdynihao> MIND BLOWN
23:29 < ningu> howdynihao: http://imgur.com/gallery/yTWBW
23:29 < ericelliott> he's polling on the event loop, waiting for the answer he already has stuck in his head.
23:30 < ericelliott> asking the same question every iteration, waiting to get the answer he's expecting, instead of the right anwser.
23:30 < nathan7> it's a loop that isn't iterating
23:30 < nathan7> brilliant
23:30 <@mbalho> http://i.imgur.com/CH16689.png
23:31 < ericelliott> mbalho: too bad he's not a cat. You'd totally have him covered.
23:31 < MikeSalivin> ericelliott: So the only time I can make my code async is by using these functions right?  process.nextTick(), setImmediate(), or setTimeout()
23:32 <@mbalho> MikeSalivin: read this book http://nikhilm.github.com/uvbook/
23:32 < MI6> joyent/libuv: Ben Noordhuis v0.10 * 7514149 : darwin: don't select(&exceptfds) in fallback path  The exceptfds set is f (+1 more commits) - http://git.io/tMK7dw
23:32 < ericelliott> nah, there are other tricks, but they're for super advanced ninja warriors. Walk before you run. ;)
23:32 < ningu> MikeSalivin: if you're only using js code that *you* have written, then yes.
23:32 < ningu> MikeSalivin: if you're using one of the many standard library methods that have async callbacks, then no.
23:32 < MI6> joyent/node: Ben Noordhuis v0.10 * 982877e : deps: upgrade libuv to 7514149 - http://git.io/gvSLXQ
23:32 < MikeSalivin> ericelliott: the node api has some function that use one of these 3 functions to implement async code, right?
23:33 <@Nexxy> MikeSalivin, what else can we help you with?
23:33 < MikeSalivin> ericelliott: Are you talking about the V8 framework. The C++ libs?
23:35 < MikeSalivin> Well wow thanks so much guys. That was truly a great help.
23:35 < howdynihao> yea native
23:37 < ningu> I can't tell if that last comment was sincere or not
23:37 < ChrisPartridge> mbalho: I see you've been hard at work making meme's
23:37 < xananax> hello; How would I go about providing autocomplete on the command line in a node.js app? I don't mean using bash's autocomplete, I mean using a module such as commander or flatiron's prompt
23:37 <@mbalho> ChrisPartridge: :D
23:38 < puckey> a little off topic: is there a cursor design that is known to be Linux-y? I am working on a multiplayer thing with cursors.. I have windows & mac down.. but would love to add one for linux users
23:38 <@Nexxy> puckey, a big black X
23:38 < ChrisPartridge> xananax: generally you should listen to a key event (such as tab), and search in a list of items based on the current input
23:38 < xananax> Nexxy, for old school users, maybe, must most new people know ubuntu
23:39 < xananax> ChrisPartridge, yes, I know, but I mean, how to actually output that
23:39 < xananax> If I console.log, it is going to print a new line
23:39 <@Nexxy> process.stdout.write ?
23:39 < xananax> Nexx
23:39 < xananax> Nexxy, thanks
23:39 <@Nexxy> I'm not sure if that's what oyu want
23:39 <@Nexxy> but it might be!
23:40 < ChrisPartridge> i think it is
23:40 < xananax> Not sure either, but it looks like it
23:40 <@Nexxy> but it does forego the \n
23:40 < xananax> what do you mean
23:40 <@Nexxy> forgo*
23:40 <@Nexxy> process.stdout.write doesn't tack a newline @ the end
23:41 < xananax> Ok got it. Anyway it sounds more low-level which is probably what I need.
23:42 < trippeh> Hmmm. How to disable SSLv3 with tls.createServer
23:48 < test_> hi
23:48 < test_> whois
23:48 < test_> query
23:48 < test_> tss
23:48 < test_> hi
23:49 < ChrisPartridge> trippeh: I would assume you need to change the ciphers
23:49 < ericelliott> test_: <clippy>It looks like you're trying to run some irc commands. Would you like me to do that for you?</clippy>
23:49 < trippeh> ChrisPartridge: In other servers ciphers and protocol versions are separate things
23:49 < ericelliott> test_: /whois test_
23:50 < ChrisPartridge> trippeh: *why* do you want to disable it?
23:50 < trippeh> ChrisPartridge: Because I'm not doing HTTPS and control all the clients. So i'd like to avoid protocols with known issues.
23:51 < ChrisPartridge> trippeh: well just change the "ciphers" option in createServer
23:52 < ChrisPartridge> http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT
23:57 < trippeh> ChrisPartridge: That doesnt seem very optimal. Protocols and ciphers are independent things (other than some ciphers beeing deprecated in newer protocol versions)
23:58 < trippeh> I can force some TLSv1.2 only ciphers, but...
--- Log closed Thu Mar 28 00:00:35 2013
