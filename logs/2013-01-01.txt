--- Log opened Tue Jan 01 00:00:02 2013
00:01 < timeturner> express uses connect
00:01 < timeturner> it just re-exports connect's middleware
00:01 < timeturner> express is sugar on top of connect
00:04 < s5fs> express is worth it for 'static' and routing alone
00:04 < s5fs> imho, of course
00:07 < Sicp> well may be, but connect seemed primitive for the simple purpose I had
00:07 < Sicp> I wanted something easier 
00:11 < timeturner> connect is primitive
00:11 < timeturner> express is easier
00:11 < timeturner> that's the point
00:11 < Sicp> yep
00:12 <@konobi> they both do monkey-patching though, right?
00:18 < timeturner> monkey patching of what?
00:20 < Sicp> NYE is a scam
00:20 < Sicp> I just spent it all at home learning Node and...nothing happened, I'm still happy, still having fun!
00:21 <@konobi> timeturner: core modules
00:27 < Sembiance> finally ditched my old blog software (octopress) and wrote new blog code from scratch in node.js
00:27 < Sembiance> ahhhh... much better :)
00:29 <@konobi> not docpad?
00:29 < timeturner> is there a way to run node code in a bash statement
00:29 < timeturner> instead of running a script
00:30 < Sembiance> konobi: nope, never heard of docpad before. I basically wanted something super simple, just generate static files I can rsync up to the server. I replicated how octpress looks, as I liked that part, but wrote all new code, all in node. open sourced it too. http://cosmicrealms.com/blog/2012/12/31/new-blog-code/
00:31 < Aria> timeturner: As in the script specified inline?
00:31 < Sembiance> konobi: I was going to call it YASBC for 'yet another stupid blog code' but decided not too name it anything and just kinda hard code it for myself ;)
00:31 < timeturner> yeah
00:31 < timeturner> inline script
00:31 < Aria> timeturner: node -e "stuff"
00:31 < Aria> (or -p, if you want an implicit print)
00:32 < timeturner> awesome
00:32 < timeturner> thanks
00:32 <@konobi> Sembiance: http://docpad.org/
00:34 < Sembiance> konobi: woah, the "intro" video is 58 minutes long. I was hoping for a quick 2 or 3 minute "intro" video ;)
00:34 < Sembiance> konobi: thanks for the link though. not going to entertain it for my blog, but will check it out for potential future projects
00:39 < perezd> are there any k/v collections in javascript people recommend??
00:39 < Aria> MAny of them!
00:40 < perezd> links?
00:40 < Aria> What sort of constraints? Written in javascript, or just usable from?
00:40 < perezd> usable
00:40 < Aria> KV only?
00:40 < Aria> Durable?
00:40 < perezd> not picky..
00:40 < perezd> ideally something that supports mutations
00:41 < perezd> key replacements
00:41 < perezd> with new values
00:41 < Aria> Redis, mongodb, couchdb, memcache.
00:41 < perezd> oh sorry, i meant inside of javascript
00:41 < jcrew> any column store dbs?
00:41 < perezd> like a data structure
00:42 < Aria> How about {} ?
00:42 < perezd> well…yeah.
00:42 < perezd> wondering if there are alternatives with different optimization tradeoffs..
00:43 < geNAZt> https://github.com/felixge/node-dirty
00:43 < geNAZt> something like that ?
00:43 < Aria> Not really. V8 will eventually fall back to a hash-table based implementation, I believe. 
00:43 < Aria> (and hash tables are pretty reasonable way to deal with key-value data)
00:43 <@konobi> levelup?
00:44 < perezd> i'd like to see the actually backing implementation in v8…I believe its a hash table as well…
00:44 < rvagg> `npm install levelup` ftw
00:44 < perezd> thx
00:46 < mbalho> leveldb ftw
00:46 < perezd> i was hoping for more of an in-memory data structure
00:46 < perezd> something like a tree...
00:46 < perezd> or something of that nature
00:46 < perezd> perhaps I'm overthinking this for javascript.
00:47 < perezd> {} is fine for my string-based keys
00:47 < Aria> Start with the simplest thing that could work. Fix it when you discover its limits.
00:47 < perezd> yeah, so far its fine..
00:47 < Aria> (You can use harmony maps if you need non-string keys)
00:47 < perezd> we're talking so far <500 items
00:47 < perezd> so i think i'm fine ...
00:48 < perezd> I'd like to use web-workers (in chrome) to partition some O(n) comparator work ...
00:48 < perezd> again prob overkill for <500
00:49 <@konobi> map rejuice style?
00:51 < perezd> basically 500 values
00:51 < perezd> each value has a hash
00:51 < perezd> you knew it at time t
00:51 < perezd> you are now at time t+5
00:51 < perezd> and you want to compare new hashes to see if they are different
00:51 < perezd> you should be able to partition that
00:51 < perezd> if you maintain order
00:52 < perezd> then you hand out the values mod number of "workers"
00:52 < perezd> at least, I think so..
00:52 < perezd> seems like how one can parallelize dumb O(n) work
00:52 < perezd> divide by parallel constant work factor..
00:53 < perezd> but at 500 compares...
00:53 < perezd> its probably faster to not do that
00:53 < perezd> maybe its worth it >5000
00:53 <@konobi> perezd: maprejuice.com ?
00:54 < perezd> yeah, thats a bit more like a warhead 
00:54 < perezd> my problem isn't that complex
00:54 <@konobi> patterns are good there
00:55 < perezd> right but that pattern is a massive solution
00:55 < perezd> scale is completely different
00:55 < perezd> i'd be wasting time coordinating
00:55 < perezd> the actual work I am doing is literally a cmp
00:55 < perezd> I just want to be able to compare in parallel
00:55 < perezd> simple problem
00:57 < perezd> wow does chrome even support workers abymore?
00:58 < Aria> Yes it does.
00:58 < Aria> HEh. "simple problem" until you want mutation ;-)
00:58 < perezd> weird, think the demo must be broken
00:59 < perezd> I do not want parallel mutation.
00:59 < Aria> Also, you'd need to scale WAY higher to run into these sorts of problems.
00:59 < perezd> only parallel compare
00:59 < perezd> I'd like to be able to divide my n, since its linear.
01:00 < mscdex> node.js rules!
01:00 < Aria> Also, if this is your limiting factor, you're either doing something really wrong or really right.
01:00 < perezd> lol
01:00 < perezd> I'd assume really wrong.
01:00 < perezd> but, its a pretty simple algorithm.
01:00 < perezd> determine if an object has changed overtime.
01:00 < perezd> over time*
01:01 < perezd> hash object at time t
01:01 < perezd> compare object at time t+n1
01:01 < Aria> I'd imagine memory access is more of your bottleneck in computational system. And network in a networked one.
01:01 < perezd> yeah, could be.
01:01 < perezd> im not convinced parallelizing this makes it faster
01:02 < Aria> I'm quite sure not.
01:02 < perezd> liek i said, I think i'd waste more time copying state around
01:05 < perezd> biggest win my just to put the whole O(n) operation on a web worker on its own..
01:05 < perezd> at least I won't fuck with drawing
01:07 < chrisevans1001> i have a simple tcp server in node. when a connection joins, nodes ram usage goes up by 4K. however i have noticed that it sometimes goes up when closing a connection too. the ram usage never seems to return to what it started at. in my code, once the connection is closed there is nothing further running. is this standard behaviour? (i've admittedly only tried it with 20~ connections but i assumed memory usage would go back down?)
01:08 < mscdex> let's ring in the new year with a new control flow module! who's up for it?
01:09 < Sembiance> mscdex: rofl
01:10 < Sembiance> mscdex: I think I'll stick with step thanks ;)
01:14 < chrisevans1001> so essentially i guess im asking - does node.js allow ram usage to build up somewhat? i usage im referring to doesnt amount to anything significant. just seems odd it doesnt clear. doesnt increase either.
01:17 <@konobi> v8 uses and incremental GC
01:19 < Slade-> wish http-proxy was documented better :/
01:23 < TehShrike|Work> st_luke: what was the last language you were interested in writing before JS
01:23 < TehShrike|Work> Also, what kind of wine
01:26 < st_luke> TehShrike: js was the first language I was interested in, started when I was a kid and it was making its way into web browsers. then when I got a little older I started writing some php and ruby, which I never really cared for, for various reasons.
01:26 < st_luke> the wine is a 2010 francis coppola black
01:26 < TehShrike|Work> No kidding?
01:26 < TehShrike|Work> How long have you been writing code professionally?
01:27 < TehShrike|Work> I wasn't smart enough to think JS was cool until recently
01:27 < TehShrike|Work> I've worked on large C++ apps, and enjoyed it
01:27 < TehShrike|Work> But now I just keep making things with JS and enjoying it
01:29 < st_luke> professionally since I was ~20, cause I wasn't smart enough to find ways to make money off of it until then.
01:29 < TehShrike|Work> How long ago was that?
01:29 < TehShrike|Work> I remember about 6-7 years ago, good friend telling me that JS wasn't as bad as people were saying
01:29 < TehShrike|Work> But I wasn't ready to look past function scoping :-x
01:31 < st_luke> hmm that was like 2007
01:31 < st_luke> but I've worked all sorts of jobs since then
01:34 < st_luke> sometimes you don't want to work on computers for a while
01:35 < st_luke> and then you have to go back because it makes an unfair amount of money
01:38 < joe-node0> st_luke: you know I get to that "I hate software" stage fairly frequently, but I then fallback to electronics and embedded systems projects as a hobby
01:39 < joe-node0> that usually has the effect of sending me running back to "web application programming" in short order.
01:41 < st_luke> I don't really get to the I hate software stage, just the I hate the egos and politics around making a product stage
01:41 < st_luke> but it's different around the world
01:41 < TehShrike|Work> My job has been good to me
01:41 < TehShrike|Work> I like making software
01:43 < joe-node0> dude, I'm a non-engineer having to learn engineering, it's not that I hate software it's just a vertical cliff to scale when my background is (formal training) photography.
01:44 < joe-node0> but I mean I learned old-school photography, mixing acids and bases, darkroom film handling (totally in the dark pure tactile skill based), so maybe programming is attainable since so much of it is also 'invisible'
01:45 < st_luke> I'm not totally sure what engineering means anymore
01:45 < joe-node0> engineering is math intertwined with scientific method
01:45 < st_luke> I think it's the guy that pulls the whistle on the train + jesusabdullah
01:45 <@konobi> application of theory into something of tangible use
01:47 < st_luke> ok I'm def not an engineer then. I just write these lines sometimes on a computer that make other computers do certain things.
01:47 < st_luke> and then along the line somewhere it gets turned into currency and the owner of the software/product/etc puts a small fraction of that currency into my bank account on an interval
01:49 < astropirate> what commandline tool do you guys use to try out HTTP request?
01:49 < timeturner> curl
01:49 < st_luke> ^
01:49 < timeturner> visionmedia/burl kicks ass though
01:50 < timeturner> been trying that out for a few days
01:50 <@konobi> telnet
02:07 < ashnur> what is a good fs module do you use? i found a LOT with npm search, and it would take hours to check every one of them, so if you know any better, i would appreciate. one of the things I wish to have is mkdir -p
02:32 < timeturner> ashnur: node's fs
02:34 < ashnur> timeturner: can you please give me a link in the node.js api documentation where it explains how I can do mkdir -p with the fs module?
02:35 < ashnur> because i am under the impression that it is not directly possible, just by writing a lot of code. which i don't mind, but I thought that people are writing fs-extra and such modules to make our lives easier...
02:35 < mistertwig> mkdir by default doesn't do that?
02:36 < mistertwig> weird
02:37 < ashnur> mistertwig: if it does, i have not found it in the api docs. but I would really like if timeturner would show me what I missed.
02:38 < jamesd_> mistertwig, its the difference from calling a default library function and calling a binary that has been developed over the decades with lots of features
02:38 < mistertwig> jamesd_: ??
02:38 < timeturner> you can always just spawn a process and execute mkdir -p
02:38 < mistertwig> alright ashnur
02:38 < mistertwig> timeturner: don't think that's very portable
02:38 < ashnur> timeturner: you said fs module. now you say process.
02:38 < RLa> ashnur, why you hate us? :/
02:39 < timeturner> ashnur, have you taken a look at the docs yourself?
02:39 < timeturner> if it isn't there then it isn't there
02:39 < timeturner> we didn't write node
02:39 < ashnur> because the only people here who ever wrote me an answer was substack. 
02:39 < mistertwig> timeturner: he clearly said that
02:39 < timeturner> we just contribute there
02:39 < mistertwig> he's asking for a recommended module
02:39 < ashnur> timeturner: i've just told you that i did.
02:39 < mistertwig> to provide shortcuts
02:39 < jamesd_> node.js  mkdrir calls a library that creates a directory,  /usr/bin/mkdir -p  does a lot of work to make it all seem simple
02:39 < RLa> ashnur, for mkdir -p there is also mkdirp module
02:40 < ashnur> RLa: when I started this discussion here I asked if anyone knows a good fs module which would do this. then timeturner rtfmed me, and i got annoyed buy it. my fault i know, but i don't get it. 
02:41 < RLa> https://github.com/substack/node-mkdirp
02:41 < ashnur> RLa: i've search with npm search for fs modules, and there are a LOT, too many to check most of them
02:41 < RLa> yes, always read api docs first, if api does not do it, then search npm registry, if it's not in regisistry, ask in irc :)
02:41 < ashnur> i thought i might ask if people here have used some of it, and I expected that no one would answer
02:42 < RLa> ashnur, then first sort them by usage count
02:42 < ashnur> hmm. that is something I should've known
02:42 < RLa> if you asked today or yesterday then maybe lots of people are away
02:43 < RLa> i sometimes just hop through the registry to find interesting modules and then bookmark them :)
02:43 < ashnur> maybe. but not really/. not in this channel.
02:44 < ashnur> anyway. i am off to learn how to sort npm search results
02:44 < ashnur> thanks RLa 
02:44 < RLa> no problem :)
02:50 < Technodrome> I'm running out of ideas blah!!
03:04 < astropirate> Technodrome, o_O
03:05 < Technodrome> i just don't know what to do at this point astropirate 
03:06 < astropirate> Technodrome, whats the problem
03:33 < Sembiance> I just blogged about a C64 game magazine wallpaper generator I wrote. Thought I would share here: http://cosmicrealms.com/blog/2012/12/31/c64-magazine-game-wallpaper-generator/
03:33 < Sembiance> code is provided, written in node of course ;)
03:35 < TehShrike> haha, all right, that's pretty cool Sembiance
03:36 < mistertwig> "By the year 2000, the world may catch up with the way compuserve's new electronic mail lets you shop today"
03:36 < mistertwig> maybe
03:36 < TehShrike> Sembiance: have a copy of the full-sized ads anywhere?
03:36 < TehShrike> That seems like a torrent I should be seeding
03:37 < TehShrike> "Now the world of Wizardry comes to Commodore 64/128 ... PROVING GROUNDS OF THE MAD OVERLORD"
03:38 < TehShrike> aah, this is classic stuff
03:38 < Sembiance> TehShrikeL hehe
03:38 < TehShrike> Sembiance: you've got to release the full-sized versions of all these in a collection
03:39 < Sembiance> TehShrike: full sized versions of the montages? or the individual images?
03:39 < TehShrike> The individual images
03:39 < TehShrike> I want that Space Rogue ad on my wall :-D
03:40 < Sembiance> the tar.gz of the original final 627 images at original resolution is 2.1GB ;)
03:40 < TehShrike> Well sure
03:40 < TehShrike> That's why it would be a torrent that I would seed
03:41 < TehShrike> And not some static file on your server
03:41 < TehShrike> I have a phat pipe laying around somewhere
03:41 < TehShrike> Let's get this classic stuff on the internet
03:41 < Sembiance> TehShrike: If I throw it up on one of my dedicated servers, could you pull it down from there, create the torrent and seed?
03:42 < TehShrike> Sure
03:42 < TehShrike> I can give you an FTP account if that makes it easier
03:42 < Sembiance> TehShrike: sure, that would work.
03:45 < substack> ashnur: just look for exactly what you need, not utility grab bags that provide a whole bucket of ill-defined functionality poorly ala fs-extras or fs2 or whatever
03:47 < jcrew> Sembiance: that is really cool 
03:47 < Sembiance> jcrew: glad you liked it :)
03:48 < jcrew> i like this one the best 'Can Flying Feet and Fists Conquer the Evil Wizard's Fortress?'
03:48 < TehShrike> I FUCKING HOPE SO!!!
03:48 < jcrew> BRUCE LEE WITH THE WORLD SAVES FEET 
03:49 < jcrew> smash someone's face in the comfort of your home.
03:49 < substack> ashnur: for a great reductio-ad-absurdum about why grab-bags are a silly idea, check out jesusabdullah's hoarders module http://npmjs.org/package/hoarders
03:49 < jcrew> substack: you just like that one because it's dedicated to you
03:50 < substack> maybe so!
03:50 < TehShrike> lol
03:50 < TehShrike> It always makes me feel good
03:50 < TehShrike> "hey, at least *somebody* depends on my library!"
03:51 < jcrew> TehShrike: i always like seeing that too
03:52 < ashnur> substack: i thought that module was a joke
03:53 < TehShrike> ashnur: maybe it is.  And maybe all your modules should depend on it just to be safe.
03:53 < ashnur> anyway. i am off to learn how to sort npm search results I would write my own modules almost every time I do something, because apart from a few very good exceptions, most modules have too much in them
03:53 < ashnur> damn
03:53 < jcrew> mine all have very little 
03:53 < ashnur> too tired
03:54 < Aria> ashnur: Do what I just did. Take them and tear them apart.
03:54 < TehShrike> ashnur: nodezoo.com is excellent
03:54 < jcrew> Sembiance: there is an outrun advertisement in there - i remember that one 
03:54 < ashnur> thanks
03:54 < Aria> (see fastcgi vs chi-env and fcgi-handler)
03:54 < Sembiance> jcrew: it's a good trip down memory lane :)
03:56 < Aria> It's amazing how fast you can make a module smaller when it just does too much.
03:56 < Aria> And you didn't write it and aren't attached to any of it ;-)
04:09 < Sembiance> TehShrike++
04:09 < TehShrike> <3
04:10 < astropirate> </3
04:11 < TehShrike> NO
04:11 < TehShrike> FEEL THE LOVE
04:13  * astropirate mugs TehShrike and takes his wallet
04:14 < TehShrike> eek
04:14 < TehShrike> Can I at least have my drivers license back?
04:14  * astropirate slaps TehShrike and steals his car keys now
04:14 < TehShrike> daww
04:14 < TehShrike> Now how will I get home?
04:14 < ashnur> you don't
04:15 < astropirate> dun dun DOOON
04:15 < TehShrike> Wait, I'm in my home
04:15 < TehShrike> How did you get my keys?
04:15 < ashnur> they were on the fridge
04:15 < TehShrike> FUCK
04:15 < TehShrike> Why did I put them there
04:15 < TehShrike> And what are these keys in front of me
04:15 < TehShrike> On my desk
04:16 < ashnur> decoy
04:16 < TehShrike> aw man
04:20 < ashnur> i hate when some random module just throws randomly, and i have no clue how to debug it 
04:21 < ashnur> http://pastie.org/5604517
04:21 < ashnur> something like this
04:21 < Sembiance> modules are like 'off the hook'. soooo many of them. sadly a lot of them stopped being updated a long time ago. it can be hard to know which one to use. need like an npm-popular   nodetoolbox comes close....
04:21 < ashnur> if it would happen all the times, or at least I could reproduce it 
04:22 < TehShrike> A coworker of mine has been using a routing module, I don't remember which one
04:22 < TehShrike> And has complained about how it handles errors in his code
04:22 < TehShrike> He wants to see them thrown all the way back
04:22 < TehShrike> But the routing module is catching them
04:24 < ashnur> :D
04:24 < ashnur> this is thrown at least
04:38 < superjoe30> how can I assert that something is a buffer?
04:38 < superjoe30> rather, what is the idiomatic way to assert that something is a buffer?
04:39 <@konobi> instanceof
04:40 <@konobi> or, http://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj
04:40 < superjoe30> oh, didn't see that
04:40 < superjoe30> thanks.
04:43 < tnorris> why in the name of ... is a Buffer's length writable?
05:01 < mbalho> in the name if ellipsis!
05:01 < mbalho> of*
05:01  * mbalho fail
05:15  * TehShrike hands mbalho some extra punctuation
05:20  * astropirate slaps mbalho 
05:42 <@Nexxy> \o/
05:45 < mbalho> Nexxy: i lost op!
05:47 < superjoe30> I want to use the node crypto stuff
05:47 < superjoe30> but the api is kinda bad
05:47 < superjoe30> due to not using streams and buffers
05:48 < superjoe30> is there a module I should be using?
05:48 < superjoe30> until a newer node version comes out
05:49 < mistertwig> NO
05:50 < superjoe30> ...go on
05:51 < mbalho> node 0.10 will have streaming crypto
05:51 < superjoe30> right. I acknowledged that in my question.
05:54 <@konobi> mbalho: talk to chanserv
05:55 -!- mode/#Node.js [+o mbalho] by Nexxy
05:55 <@Nexxy> mbalho, your client isn't identified with nickserv!
06:29 < Slade-> hmm http-proxy  i guess you cant have 2 router rules in conflict with each other eh
06:44 < ree> Happy New Year!
06:44 < ree> I am looking for a tool that concats and minifies sets of js files on the filesystem, and that can detect changes and re-compile on demand. Something like lesswatcher but for js.
06:44 < ree> Can you suggest something for that?
06:51 < RLa> ree, browserify?
06:51 < andu> ree, nodemon && uglify
06:53 < ree> thank RLa and andu, both look very good
06:53 < superjoe30> ree, here's something too: https://github.com/superjoe30/jspackage
06:53 < superjoe30> also check out https://github.com/component/component/
06:54 < ree> superjoe30: thanks, they are nice tooI I will look at all of these
07:15 < substack> ree: `browserify main.js -o bundle.js --watch --debug --verbose` will give you bundles but not minified
07:15 < ree> that's ok to start with
07:15 < substack> and main.js can just load other files with node-style require()
07:49 <@mbalho> Nexxy: dang i swear i identified!
07:49 <@mbalho> Nexxy: must have been a net split or something
08:12 < joe-node0> Happy 2013 everyone!
08:13 < astropirate> Whats so happy about it?
08:14 < superjoe30> it's not so much a judgment as it is goodwill
08:15  * astropirate throws cats at superjoe30 
08:17 <@mbalho> i want some
08:17 < JohnnyL> anyone need a node.js programmer
08:17 < JohnnyL> ?
08:19 < superjoe30> JohnnyL, this is probably the wrong place to ask that question
08:27 < yaayaYAY> yo
08:27 < yaayaYAY> the node tutorial says this:
08:27 < yaayaYAY> "This also explains why our HTTP server needs a function it can call upon incoming requests - if Node.js would start the server and then just pause, waiting for the next request, continuing only when it arrives, that would be highly inefficent. If a second user requests the server while it is still serving the first request, that second request could only be answered after the first one is done - as soon as you have more than a ha
08:28 < yaayaYAY> I'm trying to conceptualize the event loop etc.
08:28 < substack> "the node tutorial"
08:28 < jcrew> that concept isn't immediately obvious to people trying to write http servers
08:30 < yaayaYAY> so a requeast comes in and and node starst serving the response? and then another request comes in and node can serve it up. So does this mean that that even while "node is serving" request one it is still checking for other requests... in an event loop orsomething?
08:30 < jcrew> yea
08:32 < yaayaYAY> I don't fully understand threads and how node really works yet but, how is node simultaneously serving request 1 and listening, or is an external service processing request 1 while node is listening?
08:34 < yaayaYAY> jcrew: 
08:35 < RLa> yaayaYAY, read about async io
08:36 < yaayaYAY> RLa: isn't that just non blocking, meaning "node" starts doing something and then moves onto the next thing, but what is doing that first something, an external service to node?
08:37 < RLa> yaayaYAY, if it's io then yes, it's something external
08:39 < RLa> yaayaYAY,  "node" starts doing something and then moves onto the next thing <- this is organized into the event loop
08:39 < RLa> you should read about that too
08:40 < yaayaYAY> so in the hello world example, external services are processing the write head, console.log etc. while node itself is listening for more requests
08:40 < yaayaYAY> i should say process the response.riteHead and response.write
08:40 < yaayaYAY> RLa: 
08:41 < RLa> those are just socket writes
08:42 < yaayaYAY> Can you look here and look at the paragraph with the word "continuing" in it, it's in refrence to the above heloo world app
08:42 < yaayaYAY> http://www.nodebeginner.org/#continuereading
08:42 < RLa> when your js code runs, no other piece of js code can run, but the os might be doing some data transfer in the background
08:43 < RLa> yaayaYAY, you mean about those further books?
08:44 < yaayaYAY> aorry I'm just reading the free thing
08:44 < yaayaYAY> http://www.nodebeginner.org
08:44 < mscdex> node.js rules! first one of 2013!
08:44 < yaayaYAY> RLa: 
08:44 < RLa> oh, i think i just got ad on that page
08:44 < yaayaYAY> RLa: skip to the free one and search "continuing"
08:44 < mscdex> ads.js
08:45 < RLa> yeah
08:46 < yaayaYAY> Rla: So node is listening while all the response.X stuff is happening?
08:46 < yaayaYAY> Then what is processing the response.X? RLa 
08:46 < yaayaYAY> Rla:
08:46 < astropirate> RLa, and here!
08:47 < RLa> yaayaYAY, yes, it's listening
08:48 < RLa> yaayaYAY, if request comes in while your code is running, it's put into the event queue
08:48 < yaayaYAY> RLa: What is processing the response.X stuff if node is listening?
08:49 < RLa> so when your current code finishes running, i.e after single .write(), code for the other request handling is ran
08:49 < RLa> there is no busy listening loop
08:51 < yaayaYAY> Rla: I think I get it, if node was processing the first request then subsequent requests would just go unanswered
08:51 < yaayaYAY> right?
08:52 < RLa> they get put into the queue and processed later
08:52 < RLa> i'm not so familiar with raw internals so i cannot give better description
08:53 < RLa> you might want to read the source of libuv
08:53 < yaayaYAY> alright I get it, so the even loop is the primary thing node cycles through and these functions (callbacks?) are ways to make node remember what it's doing?
08:53 < RLa> yes
08:53 < yaayaYAY> RLa: Thanks bro :)
09:00 < hemanth_> for polling a particular directory/path for changes, would grunt be a good option? 
09:01 < hemanth_> fs.watchFile?
09:02 < hemanth_> fs.lstat?
09:04 < RLa> btw, if you use raw watch then be warned that it can generate excess events
09:04 < hemanth_> :|
09:04 < RLa> i.e something writes 500 first bytes, then writes next 500 etc but you would like to have single event only
09:05 < hemanth_> so, grunt watch is better?
09:06 < RLa> i think it has some handling for such situations
09:06 < RLa> for example, you can add small setTimeout with flag so that multiple events "collapse" into one
09:06 < yaayaYAY> when I go to port 8888 it prints "Requet recieved" TWICE in the console?
09:07 < yaayaYAY> http://pastie.org/5605579
09:07 < yaayaYAY> why not just once?
09:07 < RLa> maybe your browser expects favicon :)
09:08 < RLa> put there console.log(request,url)
09:08 < RLa> or rather request.url
09:09 < yaayaYAY> RLa: It doesn't do it in mozilla
09:09 < yaayaYAY> but does it in chrome
09:09 < RLa> chrome will certanly try to get favicon
09:09  * hemanth_ tries both 
09:11 < yaayaYAY> RLa: wut does favicon got to do with this, there's no favicon?
09:11 < RLa> yeah but the browser does not know it
09:12 < RLa> but it still tries to get it
09:12 < RLa> of course this is stupid but ask ie team, they introduced it
09:13 < yaayaYAY> with ur request.url change it now outputs "/ /n /favicon.ico"
09:13 < yaayaYAY> meaning /
09:13 < yaayaYAY> then new line then /favicon.ico
09:13 < yaayaYAY> RLa: 
09:14 < RLa> that's expected output
09:15 < yaayaYAY> RLa: sy y wud it out put request... TWICE
09:15 < RLa> no aolbonics please
09:16 < RLa> / is front page, /favicon.ico is favicon
09:16 < yaayaYAY> RLa: aolbonics?I get it
09:17 < yaayaYAY> RLa: I get it thanks... I'm really undercarbed right now, I need to go eat some fruit
09:17 < yaayaYAY> get that sugar to ma brain u know brah ;)
09:17 < RLa> yeah
09:18 < yaayaYAY> RLa: u a humgle OG dawg... ne 1 eva tell u that?
09:19 < jcrew> ..
09:21 < yaayaYAY> jcrew: chill brah
14:28 < Knotix> HI all
14:29 < Knotix> I was wondering if someone could clarify an issue I'm having with exception handling
14:30 < Knotix> I've wrapped a require() in a try{}catch(){} and I'm writing the error to a file. However, if the module I'm requiring has a syntax error, This message gets logged
14:30 < Knotix> C:\index.js:9         return1 response.send('asdf');
14:30 < Knotix> But the exception object I get in the catch(){} does not contain that information
14:31 < Knotix> It instead contains a useless stack
14:31 < andu> return1 should be return
14:31 < andu> ;P
14:31 < Knotix> I know that
14:31 < Knotix> I intentionally put a syntax error in it
14:31 < Knotix> The problem is this gets logged to the console
14:31 < Knotix> C:\index.js:9         return1 response.send('asdf');
14:32 < Knotix> But the error object in the catch(){} has something totally different
14:32 < Knotix> Well, not TOTALLY different, but its stack is worthless
14:32 < andu> so do some if/else on the error object?
14:32 < andu> im not the right person for this issue btw
14:33 < Knotix> The issue I'm having is I want to write "C:\index.js:9         return1 response.send('asdf');" to my log file, but Node appears to only console.log it internally
14:33 < Knotix> So it seems the error is uncatchable
14:34 < Knotix> I'm hoping someone in here can help
14:36 < andu> process.on('uncaughtException', function(err) {
14:36 < andu>   console.log(err);
14:36 < andu> });
14:37 < Knotix> I tried that, but it doesn't work
14:37 < Knotix> Because the error is being caught
14:38 < Knotix> The caught error object just isn't that informative
14:38 < Knotix> Its stack references Module._compile and so forth. Nowhere does it have that original error of C:\index.js:9         return1 response.send('asdf');
14:48 < Slade-> does anyonw know how to configure http-proxy so that i can redirect domain.com  to one place and domain.com/foo  to somewhere else?
15:03 < pachet> Slade-: proxy.createServer accepts a function with the signature 'function ( request, response, proxy ) {'
15:03 < pachet> so you can suss out the target url via the request parameter
15:04 < pachet> then its just a matter of pointing to the correct proxied port for whatever service you want to target
15:04 < pachet> there's actually an example of just that on the github page for http-proxy
15:04 < pachet> https://github.com/nodejitsu/node-http-proxy#setup-a-stand-alone-proxy-server-with-custom-server-logic
15:05 < Slade-> pachet:  you can't just add the two routes to the router eh?
15:05 < pachet> i mean
15:05 < pachet> the whole point of http-proxy is to have sanitized services
15:05 < pachet> and you just fork to them via port differentiation
15:05 < pachet> so if you just want to have different routes in the same router, why use a proxy?
15:07 < Slade-> pachet: I'm not sure i get what you're saying. I was refering to this https://github.com/nodejitsu/node-http-proxy#proxy-requests-using-a-proxytable
15:08 < Slade-> i wanted to add domain.com and domain.com/foo to that.. just not sure if they need to be ordered a specific way, or what
15:10 < pachet> Slade-: oh my bad, yeah you can do that
15:11 < Slade-> pachet: do i have to put them in a specific order? because it doesnt seem to like it when i do it
15:12 < pachet> Slade- : from looking at the source, he loops over the object with for..in for routes that dont map directly to a hostname:
15:12 < pachet> https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy/proxy-table.js#L182
15:13 < pachet> so my guess is to just declare them in order of specificity
15:13 < pachet> can you post the code that's giving you trouble?
15:14 < Slade-> let me try that real quick :)
15:20 < Slade-> hmm that seems to be working.. wonder why it didnt before
15:21 < Slade-> it butchers the url tho :/
15:42 < fabookchat> Do you know of any facebook app to chat on IRC with other facebook users that aren't on your friends list? It would be great such an app with a lot of great popular #rooms
15:45 < average_1rifter> erm
15:46 < average_1rifter> fabookchat: bitlbee ?
15:48 < fabookchat> average_1rifter: that's different. I am looking for a facebook app
15:48 < fabookchat> thx anyway
15:48 < average_1rifter> fabookchat: FB sux
15:48 < average_1rifter> anyway
15:48 < fabookchat> yeah, I agree, but it has 1 billion users
15:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:05 < ElAngelo> hi, i'm trying to use Buffered-Reader in a for loop
16:05 < ElAngelo> but i don't understand how i can combine the async nature of it with the for loop
16:13 < mscdex> "Buffered-Reader"? sounds Java-y
16:14 < mrvisser> java…. bad...
16:14 < mrvisser> javascript… good…
16:14 < ElAngelo> https://github.com/Gagle/Node-BufferedReader
16:14 < ElAngelo> nevermind...
16:15 < ElAngelo> found it out already will use a recursive scheme instead of the for loop
16:40 < yeMan> http://pastie.org/5606832 I start that with my index.js but in the browser it says "processReply('result','0');"?
16:40 < yeMan> and it doesn't print the path name to the console
16:57 < yeMan> beginner app please help
16:57 < yeMan> http://pastie.org/5606832 I start that with my index.js but in the browser it says "processReply('result','0');"?
16:57 < yeMan> and it doesn't print the path name to the console
17:06 < Innocentus> hi
17:06 < Innocentus> So I use zombie js as headless browser
17:07 < Innocentus> now I want to see the innerText of a dom element I fetched with querySelectorAll
17:07 < Innocentus> what method / property can be used?
17:22 < cnd> is it possible to override the location of a dependency of a dependency?
17:27 < TehShrike> yeMan: that seems unlikely
17:27 < TehShrike> cnd: not without manual intervention
17:27 < yeMan> TehShrike: it is what's happening
17:28 < TehShrike> yeMan: where is that string coming from?
17:28 < yeMan> "postreply" I have no idea
17:28 < yeMan> my index.js is like 2 lines, server = and server.start()
17:29 < yeMan> it's directly from the nodebeginner.com tut
17:30 < yeMan> TehShrike: got to nodebeginner.org and search request.url
17:31 < yeMan> I have just that and the index.js above it and I am getting the post reply in the browser and nothing other than server started in the console
17:31 < yeMan> TehShrike: 
17:31 < TehShrike> You must be browsing to the wrong address
17:32 < TehShrike> Make sure you're browsing to port 8888
17:32 < yeMan> I'm not aaah
17:33 < yeMan> 127.0.0.1:888 happens in firefox too TehShrike 
17:33 < yeMan> aaaaaah
17:33 < TehShrike> >_<
17:33 < yeMan> :8888*
17:34 < TehShrike> I think you have to add some words to turn that into a complete sentence
17:36 < yeMan> TehShrike: localhost port 8888, I'm not going to the wrong address
17:36 < yeMan> it's happening in chrome and FF TehShrike 
17:36 < jcrew> is there a stacktrace in your console?
17:36 < yeMan> I don even know wut that is jcrew 
17:37 < TehShrike> What do you see when you browse there?
17:37 < yeMan> jcrew this is the code, I start it from my index.js
17:37 < yeMan> http://pastie.org/5606832
17:37 < TehShrike> :-|
17:38 < yeMan> TehShrike: I see just "processReply('result','0');"
17:38 < yeMan> when I go to it or refresh nothing pops up in the console
17:39 < TehShrike> Kill the node process, visit the same URL
17:39 < yeMan> TehShrike: here is my index.js http://pastie.org/5607022 jcrew 
17:39 < TehShrike> That should prove that the results you're seeing are not coming from the node server
17:40 < yeMan> TehShrike: you're righter than a motherfucker
17:40 < yeMan> what the fuck is on that port now?
17:40 < TehShrike> lol
17:40 < TehShrike> Debugging, wheee
17:40 < yeMan> I was using it just earlier for now, now some bs is on it? how do I figure out?
17:41 < TehShrike> You could see if you have another node process running
17:41 < jcrew> netstat
17:42 < yeMan> ne4 different instances of :8888 all in a state of "Time_Wait"?
17:42 < yeMan> wut?
17:42 < yeMan> 4*
17:45 < geNAZt> hiho
17:46 < yeMan> jcrew: TehShrike y would there be 4 diff instance of :8888 all in "Time Wait" what is time wait?
17:47 < jcrew> do you have pages open in firefox?
17:49 < yeMan> jcrew: yes
17:50 < jcrew> close firefox and re run the netstat
17:53 < yeMan> jcrew: but all my tabs
17:53 < yeMan> jcrew: jk lol
17:53 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:56 < yeMan> I'm in asia and a site is blocked, I used proxy servers but the java is disabled, I can't use tor because it the site uses flash and I'm using a vpn that I'm assuming is routing me out of the country but I am still reddericted from the website
17:57 < yeMan> but the javascript* is disabled
17:57 < elliottcable> So, I'm going to sound UNIX-noobish by asking this; but better to learn than sound intelligent:
17:57 < elliottcable> Can I receive multiple EOFs from a stream?
17:57 < yeMan> elliottcable: u can do anything u set your mind on
17:58 < elliottcable> I'd *like* to use EOF as an input-seperator (for multiple files passed in to a running interpreter instance via stdin), but receiving one EOF apparently closes the stream so it can no longer be written to by another process
17:59 < TehShrike> I don't think streams pay attention to what you're sending
17:59 < TehShrike> They just wait for the end() call
18:01 < jcrew> elliottcable: are you storing text?
18:02 < jcrew> or just unknown types of files?
18:02 < elliottcable> jcrew ⑊ storing?
18:02 < elliottcable> it's text, indeed.
18:02 < jcrew> null byte or 0xFF won't work/
18:02 < elliottcable> basically: can I re-open a stream for reading after it's received EOF?
18:03 < geNAZt> process.stdin.on( 'end', function() { process.stdin.resume(); } );
18:03 < geNAZt> ?
18:06 < elliottcable> doesn't seem to work, unsurprisingly
18:06 < elliottcable> geNAZt ↑
18:06 < geNAZt> maybe you could append a new readstream to stdin ?
18:08 < geNAZt> http://nodejs.org/api/stream.html#stream_stream_pipe_destination_options
18:08 < geNAZt> The note under the first code is very useful for your case
18:35 < hbeck> the api docs seem to have a mismatch between what is on http://nodejs.org/api/timers.html and what is in http://nodejs.org/api/globals.html#globals_settimeout_cb_ms
18:36 < hbeck> one says you can pass args to the callback, the other doesn't... and one says the return value is 'opaque representation of the timer' and the other is an id...
18:37 < zomg> well "opaque representation of the timer" and "id" are pretty much the same thing
18:37 < zomg> =)
18:37 < hbeck> not necessarily
18:41 < kjedamzik> 
18:43 < hbeck> zomg: util.inspect shows a crazy looking object that seems to recurse on itself indefinitely...  "_idleNext: [Circular]"
18:43 < hbeck> so I'd say that is not a simple id
18:45 < zomg> hbeck: oh, that's interesting
18:45 < hbeck> zomg: I think I'd prefer the version with the id, haha
18:45 < zomg> I've dumped those sometimes in browsers and they were always just numeric IDs
18:49 < geNAZt> someone knows a good node mail lib ?
18:52 < zomg> geNAZt: node-smtp or something was alright
18:52 < geNAZt> i found nodemailer
18:53 < geNAZt> i think its the best, cause it has built in transport for gmail
18:53 < zomg> oh right I think that was actually it :P
18:53 < zomg> I used gmail as well for the actual sending 
18:54 < pachet> emailjs is cute
18:54 < geNAZt> i have a question about nodemailer
18:54 < geNAZt> does the connection pool share across the requires ?
18:54 < pachet> yes
18:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:55 < geNAZt> how do it get a stmp connection i set up ? the readme doesnt tell this
18:59 < chovy> i like node-email-templates
19:00 < geNAZt> the thing i want is that i can setup this via a config file
19:01 < geNAZt> and use it if i require it again
19:03 < Sicp> say I have an application for Android, this app's purpose is to allow users to take pictures, tag them with a location and submit them (to my server)
19:03 < Sicp> on my server, do I write a Node webserver that also has the logic for saving these images into the database (or uploading them to imgur and fetching the link to the image then saving THAT to the database)?
19:03 < jcrew> geNAZt: even if you're passing in json config couldn't you just export that obj and use that like a config file
19:04 < Sicp> the question is not concerning the means of saving the image, it's questioning the necessity of writing a Node webserver. Do I do that or do I just have Node handle the saving to the DB and the serving upon request?
19:04 < Sicp> or do I use Node at all?
19:14 < pachet> geNAZt: oh my bad, i gave you bad information
19:14 < pachet> geNAZt: so no, any time you create a transport it creates a new pool for it
19:14 < pachet> then it's your responsibility to recycle that transport
19:17 < Iszak> Anyone recommend a service locator?
19:24 <@mbalho> a wat
19:31 < jcrew> what are folks using for load balancing?
19:31 <@mbalho> stud
19:33 < geNAZt> i use varnish
19:34 < jcrew> i wrote one to use persistent connections and handle downtime of workers gracefully but i wasn't sure just doing .pipe on the src and dest were proper - looking at stud, that's how mikael did it too
19:48 < Sicp> what is "page" referring to in this example? https://github.com/caolan/forms/blob/master/example/simple-express.js
19:48 < Sicp> ^ example for using forms with express
19:52 < geNAZt> what u mean with page ?
19:53 < Sicp> I just get an error when trying to hit localhost, "page" undefined
19:53 < timeturner> page is referring the the view or html file
19:53 < geNAZt> maybe you have no page view ?
19:53 < Sicp> I don't have a page view
19:54 < geNAZt> then thats the error
19:54 < timeturner> page.jade being an example
19:54 < timeturner> page.ejs, page.html, etc.
19:54 < geNAZt> https://github.com/caolan/forms/blob/master/example/page.jade
19:54 < geNAZt> this is the template you need
19:54 < Sicp> yes I am looking at it 
19:55 < geNAZt> what template engine do u use ?
19:55 < Sicp> I am trying to understand jade now
19:55 < Sicp> I don't do web dev usually
19:55 < geNAZt> maybe u should use something like swig or ejs
19:56 < geNAZt> its easier to learn and its pure html tags
19:56 < geNAZt> and as far as i benchmarked swig is the fastest template engine around for nodejs
19:59 < Sicp> I don't know why I'm dabbling with this to begin with. I just want to read the username password and store them, have a sign up/sign in thing for testing purposes
20:00 < Sicp> so it's basically just 2 fields, look where I am now :P
20:00 < geNAZt> y
20:00 < geNAZt> but this is the web :D
20:00 < geNAZt> form validation is one of the important things
20:01 < Sicp> I do mobile usually, and this is for a mobile app I posted about above
20:01 < Sicp> the user will have nothing to do with the backend, just still questioning whether to write a Node webserver to handle the user's requests or not
20:01 < Sicp> they just post location-tagged pictures and search for pictures based on location
20:02 < Sicp> so I've decided maybe I host the images on Imgur and store the links to them in my DB, serve them up upon request
20:02 < geNAZt> so why do you need password and user for this ?
20:02 < Sicp> just working more with Node
20:02 < Sicp> strayed off goal
20:02 < geNAZt> a okay
20:03 < Sicp> so do you think it's advisable what I want to do? can't I just serve the request-handling code through Apache or something?
20:03 < Sicp> I mean here you have a raw webserver written in Node.....ok. Why would I choose that over Apache or NGINX or etc..?
20:03 < geNAZt> u can
20:03 < geNAZt> but i dont like the "i put everything infront" stuff
20:04 < Sicp> I don't understand
20:04 < Sicp> put what infront of what?
20:04 < geNAZt> some people use haproxy => nginx => node
20:04 < geNAZt> i dont like that kind of thinking much
20:04 < Sicp> I do want the request-handling code to be in Node, but I thought I could just serve it through Apache
20:05 < geNAZt> then your apache only will pass through the requests
20:05 < geNAZt> so you dont really need it
20:05 < Sicp> so I don't really need Node?
20:05 < geNAZt> you need something that handles your request
20:05 < geNAZt> in this case node would do that
20:05 < Sicp> yea
20:05 < geNAZt> but why u need an apache in front of it
20:06 < Sicp> to sit there and listen for the requests
20:06 < geNAZt> node can do that
20:06 < creationix> what kind of requests?
20:06 < geNAZt> node is not like php
20:06 < Sicp> but it's 5 lines of Node to write a raw webserver, why would I prefer something so primitive over Apache?
20:06 < TehShrike> lol
20:06 < valterguy> those 5 lines only initiate the webserver.
20:06 < TehShrike> Is that a rhetorical question?
20:07 < TehShrike> You can have a server running in five lines, why would you use something as clunky as Apache? :-x
20:07 < valterguy> it will be listening to requests, but you will need to write the handling code yourself.
20:07 < Sicp> the patches, the security, everything that comes with the maturity of Apache and others
20:07 < valterguy> but then again, same applies to apache.
20:07 < creationix> forget the 'http' module, just use the 'net' module
20:08 < Sicp> I'm using express now
20:08 < TehShrike> creationix: 8-|
20:08 < Sicp> I've got it initiating and handling a form
20:08 < geNAZt> well the most security issues come from your handling code
20:08 < creationix> or better process.binding('tcp_wrap')
20:08 < geNAZt> not from the http server / library
20:09 < Sicp> hmmm
20:09 < Sicp> ok
20:09 < Sicp> I will try to work with Redis now, cause I need to save text-links of the images that I host on Imgur, later
20:09 < geNAZt> apache cant be aware of XSS, CRF
20:09 < geNAZt> or anything like that
20:10 < Sicp> I will show you the code!
20:10 < Sicp> where do you guys paste code here?
20:10 < geNAZt> pastebin
20:11 < geNAZt> or gist
20:11 < Sicp> ohhh, bad!
20:11 < TehShrike> hastebin, then :-P
20:11 < geNAZt> :P
20:12 < Sicp> http://hastebin.com/heyohuwudu.tex
20:12 < Sicp> there
20:13 < geNAZt> y
20:13 < geNAZt> this would work
20:13 < TehShrike> http://hastebin.com/heyohuwudu.js
20:13 < Sicp> yea I know, "for raw data only" as you said the other night
20:14 < geNAZt> y right
20:14 < Sicp> why do you always have a 'y' preceding whatever you say?
20:14 < geNAZt> y => yes
20:15 < TehShrike> Protip: not worth it. :-P
20:15 < Sicp> yea..
20:15 < geNAZt> Protip: well screw that :D
20:15 < Sicp> so, redis
20:15 < Sicp> now where's that tutorial that will spare me the reading
20:16 < geNAZt> Sicp: express can handle multipart formdata
20:16 < geNAZt> https://github.com/visionmedia/express/blob/master/examples/multipart/index.js
20:17 < geNAZt> the original redis lib github page has a goo readme for that
20:19 < Sicp> want you to listen to something cool :P https://dl.dropbox.com/u/19390574/Node-parody.3ga
20:20 < TehShrike> high-quality version here http://www.codeschool.com/jingles/
20:21 < Sicp> damn it
20:22 < geNAZt> :D nice
20:23 < Sicp> damn son, I thought Codeschool was paid
20:23 < Sicp> oh
20:23 < Sicp> ok
20:36 < TehShrike> fuck dominictarr has a sexy accent
20:38 < TehShrike> Also <3 mikeal
20:38 < TehShrike> How many such videos do you think you have the material to put out?
21:15 < Sicp> why do I get this error http://pastie.org/5607728 when I try to run this code http://pastie.org/5607724 ? 
21:15 < tjfontaine> because your redis instance isn't running?
21:16 < tjfontaine> or not bound to 127.0.0.1
21:16 < Sicp> the visual notification error that I get (by virtue of having ran the script with node-dev) gives "Redis connection to 127.0.0.1:6379 failed connect ECONNREFUSED
21:16 < Sicp> redis instance..I didn't know there had to be a redis instance, you just require it and go
21:16 < Sicp> I did not read any documentation; following a tutorial
21:16 < tjfontaine> http://redis.io/download
21:17 < Sicp> I have redis, I added it to the dependencies in my project's package.json and did nmp install
21:17 < pachet> that's just the node api to talk to the store
21:17 < Sicp> right
21:17 < Sicp> then  I refer to my distro to get redi
21:17 < Sicp> redis*
21:17 < Sicp> yea man, like mySQL works
21:18 < Sicp> installationally-speaking
21:18 < Sicp> and there's the package
21:18 < Sicp> what about the code? I am making a small sign up form, username and pass
21:19 < geNAZt> i dont know redis good but does it have some bad chars ?
21:20 < geNAZt> it should not run on ?
21:20 < geNAZt> you know some thing like injection
21:20 < Sicp> it's a key-value store
21:20 < geNAZt> and ?
21:20 < Sicp> and.....well there is no WHERE and SELECT
21:20 < Sicp> well yea there is
21:20 < Sicp> I don't know.
21:21 < geNAZt> function() { process.exit( 0 ); } ?
21:27 < pachet> no its binary safe
21:27 < pachet> the only possible vector is in flooding
21:27 < pachet> well, that's probably a generalization
21:27 < pachet> flooding is the broadest vector
21:28 < geNAZt> noSQL is injection save ?
21:30 < pachet> well, no
21:31 < pachet> mongodb you can put together some frankenstein BSON commands and *maybe* get them executed
21:31 < pachet> but it's not nearly as pervasive a threat as SQL injection
21:32 < pachet> mostly boils down to the server insecurely composing queries
21:32 < Kakera> should I fix an extremely rare bug (happened for the first time ever in about 4 months) that will fix itself in node.js 0.10?
21:32 < geNAZt> is it insecure ?
21:32 < Kakera> no, just crashy
21:34 < geNAZt> can u build a catch case for this bug ?
21:34 < Kakera> nope
21:34 < geNAZt> shit :D
21:34 < Kakera> can't reproduce except by waiting
21:34 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:47 < thl0> I need to combine two streams into one, so it looks like one stream
21:48 < thl0> specifically I'm trying to compine process.stdin with an arbitrary file read stream
21:49 < thl0> so far I found Max Ogden's https://github.com/maxogden/node-concat-stream, are there others?
21:54 < torvalamo> thl0: does that combine the streams or just concatenate them? it seems to me like it just concatenates whatever you stream to the concat object and returns the result in a callback?
21:55 < torvalamo> thl0: one way to do what you want is just to use the same 'data' event handler for both stdin and the file stream...
21:55 < torvalamo> then whatever data is read next (either stdin or file) will be passed on, without regards to ordering
21:55 < thl0> torvalamo: will look into that if concat-stream doesn't work out for me, for now it looks like it could
21:56 < mikeal> TehShrike: i have more than 20 unpublished
21:56 < mikeal> and about as many unedited
21:56 < thl0> torvalamo: I'll post a link to some code in case I get something working with concat-stream
21:57 < TehShrike> mikeal: awesome.
21:57 < torvalamo> thl0: concat won't stream OUT, though.. it will just accept a stream of data in, and then return the entire thing when you call end
21:58 < torvalamo> at least that's what it looks like it will do
21:58 < thl0> torvalamo: I should be able to pipe the resulting stream though
21:58 < thl0> torvalamo: concat-stream is a stream: 'util.inherits(ConcatStream, stream.Stream)'
21:59 < thl0> so it should be pipeable
21:59 < torvalamo> yeah it's a writeable stream
21:59 < torvalamo> as it says
21:59 < torvalamo> you can stream as much as you want INTO it.. and then when you call .end() it will callback with the entire thing you streamed... it callbacks only once
22:00 < thl0> torvalamo: well, so it's more like a buffer
22:00 < torvalamo> that's my impression
22:02 < thl0> naming it concat is confusing then, thanks - will have implement a stream that does what I need then
22:03 < thl0> i.e. read from both streams and write it out
22:03 < torvalamo> well concat means to join together in sequence, not merge
22:03 < torvalamo> so merge is probably the word you want
22:03 < torvalamo> :P
22:03 < thl0> substack: is there something like that already? i.e. a module that merges two readable streams into one readable stream?
22:04 < thl0> looks like this https://github.com/felixge/node-combined-stream will work, thanks torvalamo for correcting my search query ;)
22:07 < thl0> or dominic tarr's https://github.com/dominictarr/mux-demux should work as well
22:29 < thl0> torvalamo: https://github.com/fent/node-kat worked out great - in case you are interested: https://github.com/fent/node-kat
22:30 < thl0> torvalamo: here is some code where I'm using it: https://github.com/thlorenz/repl-pad/blob/master/stdin.js#L10-L16
22:32 < Sicp> alright, so
22:32 < Sicp> Node is not the easiest to work with
22:34 < Amfy> Need help with some variable type… the variable values "8.8.8.8", but I always get NaN when console.log
22:34 < valterguy> Sicp: what's the problem?
22:35 < smoo2> Hello, I'm new to node, just starting today and trying to cobble together a quick and simple wiki...I've got most of it working (database, markdown, templates) - but when it comes to style, should my CSS files be served by node? Do I need to create a route to get the css to the browser? 
22:35 < Sicp> been trying for some time to just have a username/password form that when you submit, the values go into Redis. What I'm confused with is....well, the response.end() function, I don't know much about how HTTP works so Node requires a strong knowledge of that it seems
22:37 < Sicp> look at how fucked up this is, http://pastie.org/5607970
22:37 < Sicp> this works, but what I don't get is those little functions that boil down so much work into them, it's difficult to understand what they really do 
22:38 < Sicp> like having the callback passed as a parameter, the callback is there to be called whenever the stuff I want is ready to be served, well what happens in the meantime?
22:39 < Sicp> do I fall through the rest of the code? or what..
22:39 < valterguy> Sicp: if you need, you can read the docs. or get the source if you are interested in all the internals.
22:39 < valterguy> it's async, meaning that it's going to continue running code and call the callback alongside when it can
22:40 < Sicp> but when I call something like response.end(do something), I only get one shot at it, the response only ends once
22:40 < Sicp> is this JSP all over again?
22:41 < test_> gfdg
23:11 < Slade-> i wonder why the basic node amqp client doesnt let you publish to an exchange other than the default one, without getting an exchange object.. sounds way hairy
23:12 < jcrew> Sicp: do you want to call res.end multiple times?
23:12 < Sicp> I want to know if it's the only way of ..printing to the page
23:13 < Sicp> I think
23:13 < Sicp> but yea you can say that
23:14 < AviMarcus> no Sicp 
23:14 < AviMarcus> e.g.: Express augments these objects providing you with higher level methods such as res.send(), which among other things adds the Content-Length for you.
23:14 < AviMarcus> you do res.send(myData);
23:14 < AviMarcus> then next();
23:15 < AviMarcus> and it passes to the next middleware
23:15 < AviMarcus> or whatever you call it
23:15 < AviMarcus> res.end() = send() + "finish"
23:16 < Sicp> hmm
23:16 < Sicp> ok, reasonable and logical
23:17 < AviMarcus> http://expressjs.com/guide.html should tell you some stuff. 'night
23:29 < snyp_> where does node.js install the libuv.a library?
23:29 < snyp_> on linux i mean.
23:31 < snyp_> Really need to know.. :( 
23:35 < snyp_> i think it's clashing with the libuv.a which i've downloaded manually in my home directory. 
--- Log closed Wed Jan 02 00:00:08 2013
