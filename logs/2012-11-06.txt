--- Log opened Tue Nov 06 00:00:05 2012
--- Day changed Tue Nov 06 2012
00:00 < mnaser> ill look into it, this will be intesrsting and fun
00:00 < gozala> isaacs: I just wanted to know if npm is supposed pick up new packages installed when used through API
00:03 < tnorris> building my first little cpp addon, and trying to pass an argument to a function that expects an unsigned long. how do I convert the value passed to the javascript function to an unsigned long?
00:04 < gozala> isaacs: https://gist.github.com/4021268
00:05 <@isaacs> gozala: you must pass in a [] for args
00:05 <@isaacs> gozala: not sure if that works otherwise
00:06 < gozala> isaacs: thnx I'll give it a try
00:06 < gozala> isaacs: but is it actually supposed to pick up installed packages ?
00:06 <@isaacs> gozala: is there anything in ~/.orchestrator/node_modules?
00:06 < gozala> yeap install put's it there
00:06 <@isaacs> gozala: is there any err returned by npm.commands.install?
00:07 <@isaacs> gozala: what outputs if you `npm ls --prefix=~/.orchestrator`?
00:07 < AvianFlu> tnorris: it would be args[0]->UInt32Value()
00:07 < AvianFlu> I believe
00:07 < gozala> isaacs: ok let my try with array if it doesn't works then we continue
00:07 < AvianFlu> where args[0] is whichever arg to your function you're trying to convert
00:08 < othiym23> TooTallNate: I'm trying to compile a list of all of the packages available to an app, with their versions, to report it back to New Relic for support / troubleshooting / product management purposes
00:09 < chovy> lol
00:09 < tnorris> AvianFlu: get "error: no member named 'UInt32Value' in 'v8::Value'".
00:09 < tnorris>  and I tried args[0]->toUint32(), but then I get the error: "no known conversion from 'Local<v8::Uint32>' to 'unsigned long'"
00:09 < chovy> i just got a call from apple staffing. they got a bounce back when they tried to email me.
00:09 < othiym23> TooTallNate: the New Relic agent is included into target apps via require and then automatically hooks itself into the app
00:10 < chovy> i have my email on my resume as:
00:10 < chovy> echo anthony.ettinger.name | perl -ne 's/\./@/; print'
00:10 < AvianFlu> tnorris: I haven't needed unsigned longs in any of my addons, I just looked at the docs real quick
00:10 < AvianFlu> http://izs.me/v8-docs/v8_8h_source.html may be helpful
00:10 < CoverSlide> chovy: whoa, i used to work at chegg
00:11 < chovy> CoverSlide: you did?
00:11 < CoverSlide> yeah, i was one of the pasadena layoffs
00:11 < chovy> oh, what's your name?
00:11 < CoverSlide> Richard Hoffman
00:12 < chovy> oh yeah. i've seen your name
00:12 < chovy> that sucks. you working with node now?
00:12 < chovy> I was surprised they closed that office actually. I think everyone here was.
00:12 < CoverSlide> only on the side
00:13 < chovy> me too, unfortunately
00:13 < CoverSlide> yeah im at a ruby shop now, but it beats working in php
00:13 < chovy> yeah
00:13 < chovy> i would rather do rails than php
00:14 < chovy> i'm more UI so i try to stay away from the PHP side to heavy
00:15 < chovy> i worked on Alex's team for about a month up here....man what a difference.
00:15 < gozala> isaacs: ok I'm back array did not helped
00:16 < gozala> also results are returned to quick 
00:16 < gozala> makes me feel they are cached
00:16 < gozala> and no io is performed at all
00:16 < CoverSlide> oh yeah alex is really chill
00:16 < chovy> yeah. i would says 2 days, and he'd say "is that enough?"
00:17 < chovy> on other team here you says 2 days and everyone attacks you.
00:17 < gozala> isaacs: btw I think I'm doing something wrong 
00:17 <@isaacs> gozala: aha, put "method" in an array
00:17 < gozala> npm ls --prefix=~/.orchestrator
00:17 < gozala> this returned nothing either
00:17 <@isaacs> gozala: you're not actually installing anythign
00:18 <@isaacs> gozala: TypeError: Object method has no method 'filter'
00:18 < gozala> no I do
00:18 < gozala> No my gist is wrong I fixed that
00:18 < gozala> isaacs:  ls ~/.orchestrator/node_modules 
00:18 < gozala> event     method    signalize
00:18 < gozala> but if I do 
00:19 < gozala> npm ls --prefix=~/.orchestrator
00:19 < gozala> I get 
00:19 <@isaacs> gozala: https://gist.github.com/4021416
00:19 < gozala> isaacs: I though prefix would execute commands for that directory
00:20 <@isaacs> oh, i had a node_modules in ~ but not in .orchestrator
00:21 < gozala> isaacs: in the gist it says
00:21 < gozala> path: '/Users/isaacs/node_modules/method
00:21 <@isaacs> removed that, and i get this: https://gist.github.com/4021416
00:21 <@isaacs> gozala: yeah, i had a node_modules in ~
00:22 <@isaacs> gozala: it walks up to try to find a node_modules or package.json
00:22 <@isaacs> gozala: like how git looks for a .git folder
00:22 < gozala> isaacs: thanks
00:27 < gozala> isaacs: ok so this is the case when it does not works
00:27 < gozala> https://gist.github.com/4021511
00:28 < gozala> the last one worked because it was first ls to run
00:30 <@isaacs> gozala: oh, yeah, probably some caching somewhere, i guess
00:31 < gozala> isaacs: is there any way to disable all kind of cacheing or some other workaround ?
00:31 < chovy> is there a node.js job site?
00:33 < chovy> i found jobs.nodejs.org but not much there
00:36 < epitron> at this stage, you're probably going to have to convince your clients to use nodejs
00:36 < epitron> instead of just having nodejs jobs fall into your lap :)
00:36 < chovy> epitron: yeah
00:37 < chovy> i hear about companies using node.js, but there isn't much job listings asking for it.
00:37 < epitron> are there any mainstream webapps that use it?
00:37 < chovy> i know linkedin mobile site does
00:37 < epitron> when there's a few of those, that's usually an easy way to convince people to use it
00:37 < epitron> yeah, that's the only one i can think of
00:37 < epitron> good blog post though :)
00:37 < chovy> yea
00:37 < epitron> that is good client-ammo
00:38 < chovy> they reviewed something like 18 templating languages
00:38 < epitron> lulz
00:38 < epitron> use haml ^_^
00:38 < epitron> coffeehaml
00:38 < epitron> \o/
00:39 < chovy> i like ejs
00:39 < chovy> except including partials is broken.
00:39 < chovy> if you nest them
00:39 < chovy> so far that's the only real problem i've seen. i get around it with a symlink.
00:39 < othiym23> haml -> jade
00:39 < chovy> naah, i don't like abstraction.
00:40 < chovy> i don't see the point
00:40 < chovy> (not to start a flame war).
00:40 < othiym23> it's a lot faster to write, even if it's largely illegible ;)
00:40 < othiym23> not that that's a huge issue if you use sparkup enough to remember how it works
00:56 < chovy> epitron: paypal is using node now too
00:57 < chovy> epitron: http://looksgoodworkswell.blogspot.com/2012/09/why-you-should-work-with-me-at-paypal.html
01:13 < chovy> i'm going to apply there.
01:13 < chovy> what the hell
01:19 < othiym23> isaacs: ultra-stupid question -- why is it called the node PACKAGE manager, but the packages are installed in node_MODULES?
01:19 < othiym23> isaacs: and do you have a preference as to whether they're called "modules" or "packages"?
01:22 < TooTallNate> othiym23: good observation :p
01:22 < nlf> othiym23: because nmm looks funny
01:22 < nlf> that's my vote anyway
01:22 < TooTallNate> othiym23: in my book though, "packages" could be a collection of one or more "modules"
01:23 < TooTallNate> othiym23: packages have a package.json file
01:23 < nlf> that makes sense to me
01:23 < nlf> and sounds way less made up than my reason
01:24 < othiym23> TooTallNate: I can go along with that
01:24 < othiym23> "Packages" it is!
01:24 < othiym23> since I'm only including things with a version / package.json in what I'm generating
01:25 < mscdex> modages
01:25 < mscdex> packules
01:25 < mscdex> !
01:26 <@isaacs> othiym23: a package is a module.  but a module might not be a package.
01:26 <@isaacs> othiym23: module = "a bit of code that can be require()
01:26 <@isaacs> 'd
01:26 <@isaacs> othiym23: package = a thing with a package.json that can be `npm install'`ed
01:30 < dominictarr> elliottcable, yo
01:31 < othiym23> mscdex: mackages!
01:32 < othiym23> isaacs: OK, sounds good to me, I will use nomenclature appropriately -- thansk
01:34 < MI6> joyent/node: isaacs created branch streams2-net - http://git.io/ltQ0Yg
01:37 < dominictarr> join #elliotcable
01:43 < dscape> isaacs: if i do recursion with a domain
01:43 < dscape> and each call is inside a new domain
01:44 < dscape> does explicit binding still works? what are the quirks?
01:44 < othiym23> dscape: what are you trying to do with the binding?
01:44 < othiym23> you should be able to nest the domains just fine
01:47 < dscape> othiym23: well the parent domain was catching the error of the child domain
01:48 < dscape> trying to prevent that from happening
01:52 < mdedetrich> bitches im back
02:00 < othiym23> dscape: since all the domains are just registering error listeners that get handled by the domain event-handling code, I don't think you can squelch one of them
02:01 < dscape> othiym23: in english, you dont think domains can do this?
02:01 < dscape> :P
02:05 < othiym23> dscape: lookit https://github.com/joyent/node/blob/v0.8/lib/domain.js#L61
02:05 < othiym23> dscape: that seems to indicate that *only* the active domain should get the error
02:06 < othiym23> I'm not exactly sure what uses the stack of domains, I guess you'd have to get that out of isaacs, sorry
02:10 <@isaacs> dscape: code sample, please.
02:10 <@isaacs> dscape: gist
02:11 <@isaacs> othiym23: the use is that you can do stuff like: d1.run(function() { in d1 here; d2.run(function(){ now in d2 }); back in d1 })
02:12 <@isaacs> othiym23: it's strictly just a way to make sure that domain.exit() is a return
02:12 < dscape> isaacs: https://github.com/dscape/specify/blob/master/specify.js#L98-#L115
02:13 < dscape> mikeal suggested a fix where i can return my asserts bound to a domain
02:13 < dscape> circumventing the recursion
02:13 <@isaacs> dscape: so the timeout happens in teh parent?
02:13 < othiym23> isaacs: I see -- I had something similar for my own quasi-domains setup, but got rid of it because I didn't need it
02:14 < dscape> isaacs: normally all tests have timeouts
02:14 < othiym23> dscape: https://gist.github.com/4022112 only calls the handler for the inner domain
02:15 < dscape> but when it does run_tests again, it going to create another domain and another timeout
02:15 < dscape> othiym23: it misses a asyn function on d1
02:16 <@isaacs> dscape: well, you should clear the timeout at some point
02:16 < othiym23> dscape: why not use current_domain.bind on the timeout (L99-102)?
02:16 < dscape> damn cats, one sec
02:17 <@isaacs> othiym23: you don't need to if the timer is added to the domain
02:17 < othiym23> isaacs: I'm a little unclear on when you'd use bind vs add
02:17 <@isaacs> othiym23: https://github.com/joyent/node/blob/master/lib/timers.js#L199
02:18 <@isaacs> othiym23: just being in the domain makes it implicitly bound.
02:18 <@isaacs> othiym23: .bind(function)
02:18 <@isaacs> othiym23: .add(eventEmitter or Timer)
02:18 < dscape> isaacs: i tried to dispose the parent domain when the callback from d1 is done
02:18 <@isaacs> othiym23: .add() puts it in an array of EE's that are killed forcibly when calling domain.dispose()
02:18 < othiym23> isaacs: got that part, but in Nuno's case you could do either a bind on the function in the setTimeout or add the timer to the domain
02:18 < dscape> but that made the program break
02:18 <@isaacs> othiym23: true
02:18 <@isaacs> othiym23: or just create the timer within the domain's scope
02:19 < othiym23> isaacs: I'm just saying it's not always clear to me when to use which one ;)
02:19 < othiym23> I'm giving a talk on this stuff this week, so I'm trying to figure it all out
02:19 < dscape> othiym23: current error im looking at is not related to the timeout, at this nodejitsu project we arent using timeouts cause its a crazy integration test that takes forever
02:20 < dscape> mikeal gave two suggestions that i think should work
02:20 <@isaacs> dscape: so, what's the actual problem?  can you reduce it to a test case that's ~20 lines long, instead of a 200 line module?
02:20 < dscape> isaacs: let me try
02:21 < dscape> othiym23: mikeal suggested two things you might consider. using enter and exit or binding the asserts to a domain before returning them to the user this way they cant explode.
02:22 < dscape> just fyi, since you are giving a talk on the subject
02:23 < othiym23> dscape: yeah, I ended up writing my own domains-lite thing for New Relic so I could support 0.6 users, and it's pretty much built arond enter / exit semantics instead of .run()
02:24 <@isaacs> othiym23: run is just enter, fn(), exit
02:25 <@isaacs> bind(fn) --> return function() { enter(), fn(), exit() }{
02:25 < othiym23> isaacs: I know, I've been over that code like a billion times ;)
02:25 <@isaacs> in process._makeCallback, if the context object has a domain, then it does enter, fn(), exit
02:25 <@isaacs> and in EE.emit()
02:26 < othiym23> the main difference between what I wrote and what's built into node is that I don't try to automagically preserve stuff across EEs and handler boundaries because I have explicit control over the context
02:26 < othiym23> I'm adding support for better error-handling to my stuff, and for that I am depending on 0.8 and real domains
02:30  * isaacs away
02:43 < dscape> isaacs: sorry, im still too far away from getting a reproducible test case
02:43 < dscape> code doesnt break in tests
02:43 < dscape> all the simple cases i could imagine work
02:45 < dscape> i can only reproduce right now running the nodejitsu testing code :\
02:47 < sinclair> how do you guys manage dependencies in node?
02:47 < niggler> package.json
02:48 < sinclair> if i have /node_modules/my_module/, would i need to put my_modules's dependencies in /node_modules/my_modules/node_modules ?
02:48 < sinclair> or outside
02:48 < Slade-> npm is sweet
02:49 < dscape> sinclair: http://package.json.jit.su/
02:49 < dscape> sinclair: yes
02:50 < dscape> but npm does that for you
02:50 < dscape> ( didnt get the outside comment )
02:50 < sinclair> dscape: but, doesn't that lead to code duplication?
02:50 < sinclair> dscape: i could have the same modules installed in several different locations
02:51 < dscape> sinclair: npm is smart
02:51 < dscape> plus same modules can have different versions
02:51 < dscape> and using version 2 for all of them, is probably not very smart
02:51 < dscape> also, if you are starting out with node
02:51 < dscape> just dont worry about it for now
02:51 < dscape> and come back to npm later
02:52 < sinclair> dscape: so, it is accepted practice to have the same dependencies installed in several different locations?
02:52 < dscape> google "jed schmidt npm man servant" for a good intro
02:52 < dscape> sinclair: its not a practice, npm does this for you
02:52 < dscape> people dont do this manually
02:52 < sinclair> dscape: im not interested in npm
02:52 < sinclair> dscape: i am writing the dependencies 
02:53 < niggler> dscape: that's a really disturbing phrase to google
02:53 < sinclair> dscape: how am i supposed to get any code reuse 
02:53 < niggler> plus its one word
02:53 < niggler> manservant
02:54 < sinclair> dscape: are you there?
02:54 < dscape> sinclair: yes, go watch the video :) npm is an awesome tool and the community uses it
02:55 < sinclair> for example, if its accepted practical to just install the same module in several different locations, how am i supposed to author anything if i have to keep copying and pasting the dependency around?
02:55 < sinclair> dscape: im not talking about npm, i understand npm
02:55 < Slade-> hmm speaking of which, is there a clever way to have npm look at a local directory or alternate web spot for personal packages?
02:55 < niggler> Slade-: npm link
02:55 < niggler> or just point it to a git repo
02:56 < dscape> Slade-: yeah there is
02:56 < sinclair> dscape: you were really no help, but thanks
02:56 < niggler> sinclair: what are you trying to do?
02:56 < dscape> Slade-: "publishConfig": { "registry":
02:56 < niggler> if you are concerned about dependencies, keep in mind that node modules can specify a version they require
02:56 < dscape> is your friend :)
02:57 < niggler> so it doesn't make sense to share by name if you have different dependencies requiring different versions of a given module
02:57 < dscape> Slade-: you can also define a npm you own as the point to get your npm packages
02:57 < sinclair> niggler: the question was....
02:57 < dscape> also irisnpm.com
02:57 < sinclair> if i have /node_modules/my_module/, would i need to put my_modules's dependencies in /node_modules/my_modules/node_modules ?
02:58 < sinclair> (to which dscape started on about npm worship)
02:58 < niggler> you can put it there or in /node_modules/.
02:58 < sinclair> niggler: as a sibling right?
02:58 < dscape> rofl
02:58 < niggler> as an example sinclair 
02:58 < niggler> lets say you are at /foo
02:58 < dscape> i forgot how funny irc can be
02:58 < niggler> and run npm install mime
02:59 < niggler> then mime shows up in /foo/node_modules/mime
02:59 < niggler> now if you go into node_modules and make a directory bar
02:59 < niggler> so mime is installed in /foo/node_modules/mime and we created the directory /foo/node_modules/bar
02:59 < sinclair> yes
02:59 < othiym23> dscape: if it's any consolation, I've run into some hard-to-reduce wiggliness with domains as well
02:59 < niggler> within that bar directory, 'require("mime")' will use the version in /foo/node_modules/mime
03:00 < othiym23> dscape: I've been trying to get support for them added to node-redis and have run into some weirdness with process.nextTick and throw with domains
03:00 < niggler> what's even cooler sinclair 
03:00 < sinclair> niggler: oh, that's a little reversed from what i expected
03:00 < niggler> is if you go into /foo/node_modules/bar
03:00 < niggler> basically sinclair go up the tree
03:00 < dscape> othiym23: in this specific test im creating a http server in process
03:00 < dscape> and then doing requests to it
03:00 < niggler> and look if there's a node_modules subdirectory at any level
03:00 < dscape> and it does requests to 2 localhost apis and some external
03:00 < dscape> it is messy
03:00 < dscape> but hey, integration testing
03:00 < niggler> so in general for /a/b/c/d/e/f it will look in
03:00 < dscape> lol
03:01 < sinclair> niggler: if that's the case, then all my dependencies need to live at the top right?
03:01 < othiym23> dscape: are you adding the server listeners to the domain?
03:01 < othiym23> dscape: cuz that can get messy
03:01 < othiym23> dscape: I have a bunch of test cases that look exactly like that, I feel your pain
03:01 < dscape> othiym23: nop, but if i was... well
03:01 < niggler> the /a/b/c/d/e/f/node_modules, then /a/b/c/d/e/node_modules, etc
03:01 < sinclair> niggler: quick pm?
03:01 < dscape> othiym23: thats why i built specify
03:01 < dscape> so i could write these kind of messy tests
03:01 < dscape> and the shit worked well with just uncaught exception
03:02 < dscape> cause tests are run in order
03:02 < othiym23> dscape: yeah, I know, we had this conversation already ;)
03:02 < dscape> nodestack right? :)
03:02 < dscape> anyway i think mikeals idea probably never breaks
03:02 < dscape> cause its very concise
03:02 < dscape> and doesnt involve recursion
03:02 < dscape> ( i mean the bind the domain to the asserts )
03:03 < dscape> but it does involve refactoring code that is not essential one week before Node KO when im trying to ship something
03:04 < othiym23> dscape: yeah, I think mikeal's way is probably cleanest, but when you have more time, it's worth figuring out what's going on there
03:04 < othiym23> domains are super useful, but nobody's going to start using them until more people are using them, if you know what I mean
03:05 < dscape> othiym23: yeah, wish i had the time to dig into it
03:05 < dscape> but as far as i see it its a small reporting bug in our tests
03:05 < dscape> i probably already wasted too much time on it
03:16 < TheAceOfHearts> so... this is a stupid question, you can't do normal for loops in node.js, so would this be the best approach: http://tech.richardrodger.com/2011/04/21/node-js-%E2%80%93-how-to-write-a-for-loop-with-callbacks/ ?
03:18 < elliottcable> So, since that's fallen through:
03:19 < elliottcable> Unless I'm misunderstanding something, there's no way to make an NPM module in *another repository* a dependency of a package in this repository?
03:19 < dscape> TheAceOfHearts: check this https://github.com/caolan/async
03:19 < elliottcable> i.e. all packages in a depndency chain have to come from the same repository?
03:20 < dscape> elliottcable: not that i know of, exception to git sources of course
03:20 < elliottcable> isaacs: is that a likely feature request? Is that within the design goals of NPM?
03:20 < TheAceOfHearts> thanks!
03:27 < elliottcable> isaacs: sorry, I didn't describe the issue within the hilight. Wanting to make an NPM package *depend* upon a package from another repository.
03:42 < niggler> needless to say: tomorrow is election day.  vote early and vote often!
03:42 < SomeoneWeird> vote often?
03:42 < SomeoneWeird> wat
03:43 < sinclair> Obama vs TypeScript?
03:43  * sinclair votes TypeScript
03:43 < niggler> barack-oli versus meatt
03:44 < niggler> SomeoneWeird: joke aside, remember to vote
03:44  * sinclair agrees with TypeScripts views on Typing, Arrow Functions and Dynamic Compilation
03:44 < niggler> todd akin needs every vote he can gert
03:44 < niggler> *get
03:45 < niggler> you know sinclair i think todd akin had typescript in mind when referring to legitimate rape
03:45 < sinclair> haha
03:46 < SomeoneWeird> niggler, i r not usa
03:46 < niggler> SomeoneWeird: you can come and vote in ohio
03:46 < SomeoneWeird> wat
03:46 < niggler> call yourself "a gift from god"
03:46 < SomeoneWeird> -.-
03:46 < niggler> lol SomeoneWeird you probably don't pay attention to us politics
03:47 < SomeoneWeird> obama > *
03:47 < niggler> richard mourdock so eloquently explained his position on abortion as follows: I believe that life begins at conception. The only exception I have to have an abortion is in that case of the life of the mother. I just struggled with it myself for a long time but I came to realize life is that gift from God that I think even if life begins in that horrible situation of rape, that it is something that God intended to happen
03:47 < niggler> sounds like what happened when the devs sobered up after putting together typescript
03:47 < niggler> lol sorry sinclair 
03:47 < jesusabdullah> nice
03:47 < niggler> rape is not something to joke about
03:48 < niggler> but I'm appalled at the discourse 
03:48 < jesusabdullah> that would mean god approves of rape >_<
03:48 < niggler> "legitimate rape" 
03:48 < jesusabdullah> with is honestly, yeah^^
03:48 < jesusabdullah> ugh
03:48 < sinclair> in all seriousness, todd akin insane 
03:48 < sinclair> *is
03:48 < niggler> richard mourdock -- very evil-sounding name
03:49 < niggler> jesusabdullah is uniquely positioned to speak on behalf of god lol
03:49 < Leo__> How can i close a created http server '-'? Should i just server.close()?
03:49 < mnaser> ok so i'm either tired or…… locked = (user in oom_users); console.log(user, oom_users, locked); -> outputs -> croopdi1 [ 'croopdi1' ] false
03:50 < mnaser> clearly its in the array! why false?!
03:50 < niggler> Leo__: yeah its just close
03:50 < mnaser> ah
03:50 < mnaser> i'm an idiot.
03:50 < mnaser> never mind, sorry for the noise
03:50 < niggler> mnaser: did you vote?
03:50 < mnaser> in works for indexes with arrays
03:51 < mnaser> niggler: irrelevant? i live in canada?
03:51 < niggler> american for a day :)
03:53 < niggler> ooh question: is there a way to read all files in a directory and get stat on all files?
04:09 < sayd> having trouble installing anything with npm. can i test the install somehow, like brew doctor does
04:11 < mikeal> i want to sleep until this election is over
04:12 < richardshaw> certainly does go on for a long time
04:12 < othiym23> mikeal: ++
04:12 < richardshaw> at least yours in the US is entertaining, we only just got TV debates in the UK and they all look like idiiots
04:12 < richardshaw> -i
04:14 < othiym23> I like politics, but American politics are dumb right now (where by "right now" I mean "my entire life")
04:14 < richardshaw> certainly does drag on for a long old time
04:14 < richardshaw> like, i'm thinking, couldn't the president actually be doing proper work?
04:15 < othiym23> richardshaw: yeah, and regardless of who wins the presidency tomorrow is just the beginning of the bullshit
04:20 < mikeal> oh man, fjear my stats!!!! http://www.gitbattle.com/
04:20 < mikeal> haha
04:20 < mikeal> something has to be broken, cause it says i beat isaacs :)
04:20 < sayd> this is an error i see trying to install jshint, it is the firstof many too: https://gist.github.com/ad34064c7be4c3c11226
04:21 < othiym23> all my git commits right now are on private repos :(
04:21 < sayd> maybe my packages didnt get upgraded through node?
04:21 < sayd> node upgrade = npm upgrade = packages ??
04:22 < othiym23> sayd: something's up for sure -- do you have a dangling link somewhere in your modules?
04:22 < othiym23> what does 'npm ls' / 'npm ls -g' say? any MISSING or otherwise b0rked entries?
04:22 < sayd> it seems to have gotten to mocha and horked
04:23 < sayd> checking
04:24 < sayd> no missing
04:24 < sayd> but one unmet, UNMET DEPENDENCY jshint *
04:24 < othiym23> what's the fastest way to tell whether node is running on Windows?
04:24 < othiym23> sayd: try running 'npm install jshint' again
04:24 < kennethkoontz> I'm setting a session then redirecting to twitter for oauth, on the oauth callback, the session is clobbered. Anyone have any ideas? FWIW this method with Facebook is working fine.
04:25 < sayd> im in the middle of that now, hopefuly further than middle. its been 5m
04:27 < sayd> othiym23: if you could refresh that gist i put a comment 
04:31 < sayd> isthere a command to update all my existing globally installed modules?
04:32 < mnaser> I have a task that runs every setInterval and throughout my application, i run into places where i make the same call inside that setInterval.  Is there some sort of locking to make sure that they both don't get called? if i call it manually, i wouldn't want it to run from the setInterval
04:32 < othiym23> sayd: what happens if you nuke your node_modules directory and start over?
04:33 < mnaser> unfortunately sometimes it happens so close to each other (me calling it and setInterval) that i end up with this function done twice
04:33 < othiym23> sayd: 'npm update -g' should update all of your globally installed modules
04:34 < sayd> trying the latter reccomendation first
04:34 < sayd> Error: EMFILE, too many open files
04:37 < othiym23> sayd: you've got something messed up with your build environment
04:45 < mnaser> https://github.com/fritzy/padlock - does anyone know a more recent/maintainer alternative?
04:48 < sayd> othiym23: that x
04:48 < sayd> *sux
04:48 < sayd> what do you have in .npmrc? i just realized i don't hae one.. 
04:55 < othiym23> sayd: all I have in my .npmrc is my credential information for publishing
04:56 < othiym23> mnaser: what the heck do you need padlock for?
04:57 < othiym23> mnaser: seems like if you want guaranteed ordering, you'd be better off looking at a promises library like Q, but you could also look at a flow control library like github.com/caolan/async and its waterfall method for something simpler
04:57 < mnaser> othiym23: i already used async
04:57 < bradleymeck-OMNO> substack: do you have a recording somewhere of stream or die?
04:57 < mnaser> othiym23: i have a task that runs inside setInterval, let's say that it loading a config file, connects to the servers that it's not connected to, that way, i can change the config file and it'll automatically see those changes and connect to it
04:57 < mnaser> now, in my code, i also have other places where i detect if those connections die and reconnect to them
04:58 < mnaser> sometimes, the connection dies right as my set interval loop runs, and i end up with 2 connections
04:58 < othiym23> mnaser: what about something like https://github.com/coopernurse/node-pool?
04:58 < sayd> othiym23: k, tried npm cache clean -g and npm update -g fails w/pm ERR! cb() never called!
04:59 < othiym23> sayd: have you tried rebooting your machine / instance?
04:59 < substack> bradleymeck-OMNO: I don't have anything
04:59 < othiym23> substack, bradleymeck-OMNO: somebody has to have at least a phone recording of stream || die()
04:59 < othiym23> there were too many people with their phones out during it to not have caught it
05:00 < othiym23> I was laughing too hard to record it myself
05:03 < mnaser> hm, othiym23, I'm going over my code, it looks like a fs.exists is not completing, or something, because the callback chain for the async.series is stopping there
05:03 < mnaser> it works most of the time, but when two events fire up at the same time, one gets locked (i have something to prevent loading twice) and the other one just gets stuck, because the callback is never called
05:05 < mnaser> put, the fs.exists callback is not responding *for some reason*
05:05 < othiym23> mnaser: I would look at your code carefully, because anytime you're encountering a race condition, there's probably a way to rewrite the code without it
05:05 < othiym23> take advantage of the fact that Node is single-threaded!
05:06 < othiym23> the reason I suggested node-pool is that it allows you to acquire a connection from a pool and do whatever with it without having the connection logic coupled to whatever's using the connection
05:06 < mnaser> maybe i should give this thought and get back to writing tomorrow then seeing as its 12pm
05:06 < othiym23> good plan!
05:07 < mnaser> othiym23: well, it wasn't exactly using connections.. that was just a example, my use case is a bit more complex to explain over irc heh
05:07 < mnaser> the idea was that i have a in-memory array of list of items that i maintain connectivity (or in this case an eventfd for)
05:08 < mnaser> if those eventfd's get closed (or i close them), i recreate them myself in my code, but then sometimes when i ask to recreate them, the call in set interval does it at the same time
05:11 < adlwalrus> how can I tell what version I'm running?
05:11 < aredridel> node --version
05:11 < gildean> mnaser: create a constant boolean that you can change and check in the setIntervals function
05:11 < mnaser> gildean: I have something like that called locked_users which are ones that are pending operations
05:12 < Slade-> is there a standard way to tie a timeout to a callback?
05:12 < mnaser> and if the set interval tries to do something, it won't let it continue
05:12 < mnaser> but as i'm debugging now it seems that when two calls happens for some reason the fs.exists call is never completing (callback is never executed)
05:13 < gildean> iirc there is also fs.existsSync
05:13 < adlwalrus> aredridel: thanks...
05:14 < ralphholzmann> is it possible to overwrite the "write" method on a fs.createReadStream ?
05:14 < ralphholzmann> it doesn't seem to be working for me…
05:15 < ralphholzmann> trying to create a through stream from a fs.createReadStream
05:16 < adlwalrus> on windows xp, writeFileSync should work with a relative path, right?
05:20 < adlwalrus> would anyone mind looking over my build script real quick, before I run it? it's my first script on node.js, and I don't want to write over any work or otherwise make my machine explode, so I'm a little nervous to run it without any review... :-/ It's only 65 lines, and fairly straight forward -- just meant to concatenate and minify my js files... http://dpaste.org/VyiMa/ thanks to anyone who has the spare minute.. :)
05:20 < elliottcable> adlwalrus: look into http://Gruntjs.com (incidental to your question)
05:21 < elliottcable> I just started using it yesterday for exactly that purpose.
05:21 < elliottcable> adlwalrus: https://github.com/elliottcable/from/blob/Rewrite-4/Gruntfile.coffee#L6-19
05:21 < adlwalrus> elliottcable: I did have a look over it, but it seemed way too complex for my needs.
05:21 < ralphholzmann> adlwalrus: its not, really
05:21 < ralphholzmann> you're just intimidated by it
05:22 < adlwalrus> ralphholzmann: too many features.
05:24 < adlwalrus> ralphholzmann: I spent like 25 minutes trying to figure it out yesterday, and I couldn't.
05:52 < sayd> othiym23: this is after removing all modules and trying npm install -g jshint
05:52 < sayd> https://gist.github.com/c8734d5d32fc305ba2a4
06:36 < adlwalrus> Hi all, I'm getting this error when I try to run my script: http://dpaste.org/UShWf/ (Here's the script again: http://dpaste.org/VyiMa/) Anyone know why it could be?
06:37 < Aria> adlwalrus: Something is doing something bogus in a process.nextTick callback.
06:37 < Aria> you're gonna have to hunt through the dependent modules to find it.
06:39 < adlwalrus> Aria: woah, what does that mean?
06:39 < adlwalrus> Aria: could updating my node.js version help?
06:39 < Aria> Possibly. How old are we talking here? 0.4?
06:40 < adlwalrus> Aria: 0.8.6...
06:40 < gluxon> adlwalrus: It's always a good idea to keep Node.js up to date.
06:41 < adlwalrus> come to think of it, how does one update node? just download the latest installer?
06:41 < Aria> Yes.
06:41 < Aria> 0.8.6 isn't terribly old though. Behavior of 0.8 is consistent across the board save specific bugs.
06:42 < Aria> I bet the error's inside of Uglify.
06:42 < Aria> But it's structured in a way to make it hard to find, sadly.
06:43 < adlwalrus> Aria: how could I do it, then?
06:43 < Aria> search for nextTick
06:43 < Aria> It might be in something there.
06:44 < Aria> Oh! I missed the key line in the backtrace.
06:44 < Aria> Windows paths threw me.
06:45 < Aria> Uh.
06:45 < Aria> It's line 30.
06:45 < adlwalrus> Aria: so what do you tihnk it is? (this is literally the first thing I've done with node.)
06:45 < Aria> That's not the API for writeFileSync ;-)
06:45 < Aria> http://nodejs.org/api/fs.html#fs_fs_writefilesync_filename_data_encoding
06:45 < adlwalrus> Aria: I thought that API was weird, too... what does 30:5 mean?
06:45 < Aria> line 30, character 5.
06:46 < adlwalrus> ahhhh
06:46  * adlwalrus runs off to the bathroom before reading that link..
06:46 < Aria> But you're using the synchronous API. It doesn't TAKE callbacks.
06:46 < Aria> (Here's a hint: don't.)
06:46 < Aria> (Learn to do asynchronous IO)
06:48 < adlwalrus> Aria: yeah, this doesn't surprise me. uglifyJS was written by the author of eloquent js, IIRC. there's a bug, and it's either in my first 65 lines of node code, or the Haverbeke's established and widely used minification module.  I would be pretty sure that it's in mine...
06:48 < gluxon> Aria: Don't do.. what?
06:48 < Aria> adlwalrus: Yeah, it's yours.
06:49 < Aria> gluxon: Avoid synchronous IO. (It makes your code hard to port into other contexts)
06:49 < adlwalrus> Aria: like what other contexts?
06:49 < Aria> adlwalrus: Like moving minification into middleware for live updates as you edit.
06:50 < adlwalrus> Aria: but so what? aren't js functions designed to be able to take variable number of arguments?
06:50 < Aria> adlwalrus: Sure, but you still have to give them the right ones.
06:50 < Aria> "encoding" and "callback" aren't exactly compatible.
06:50 < adlwalrus> less than are specified and the rest become undefined. more (superfluous) args can be accessed by the arguments array.
06:50 < gluxon> Aria: How would one make their code synchronous in the first place? I thought Node.js handled that?
06:50 < Aria> gluxon: You use writeFileSync and readFileSync.
06:51 < gluxon> Aria: Ah, those aren't asynchronous?
06:51 < Aria> gluxon: Node /has/ sync IO APIs. They're just ... special cases and kinda weird, and mostly just for convenience scripts that are really short, or for doing things inside require() replacements and the few other cases where you really need to do it synchronously.
06:51 < Aria> gluxon: No, that's why they're called Sync ;-)
06:51 < gluxon> Gotcha ;)
06:52 < adlwalrus> Aria: well, thanks.
06:52 < Aria> adlwalrus: Sure thing. 
06:54 < adlwalrus> Aria: does writeFileSync still throw errors and return status codes?
06:54 < Aria> "still"?
06:55 < adlwalrus> Aria: still, meaning that it's obvious from the api docs that writeFile does, but now I've added a sync to the end, so I'm wondering if it differs from the non-sync version.
06:55 < Aria> (Sync versions of the FS API throw errors rather than passing them to callbacks, and otherwise return return values)
06:55 < Aria> adlwalrus: Yes, it does -- the docs show the arguments for the sync version separately.
06:55 < Aria> sync = throw error, return result; async = error is first arg of callback, result is second.
06:55 < adlwalrus> Aria: so I'd want to wrap it int a try catch to achieve that effect, then, right?
06:56 < Aria> Yeah. *wince*
06:56 < adlwalrus> Aria: what do you mean, by "result"?
06:56 <@Nexxy> or just use the async function
06:56 < Aria> Yeah, learn to use the async functions is good ;-)
06:56 < adlwalrus> Aria: I will, the time will come.
06:57 < adlwalrus> just not now. I have to get back to my front end!
06:57 < Aria> writeFile doesn't really have a result -- just error or nothing. Reading does.
06:57 < adlwalrus> Aria: the api docs don't show whatever it is you're referring to as "result"
06:58 < Aria> Am I lagged or something here
06:58 < Aria> ?
06:58 < adlwalrus> Aria: if we were talking about fs *read*ing functions, result would mean the contents of the file that was read.
06:58 < adlwalrus> but what does result refer to in the context of *write*File()?
06:58 < Aria> 01:56 Aria: writeFile doesn't really have a result -- just error or nothing. Reading does. 
06:58 < adlwalrus> Aria: ah, ok. cool. thanks :)
07:05 < adlwalrus> what does it mean that readFileSync will, if no encoding is specified, "return a buffer"?
07:08 < topi`> anyone got experience from hosting node.js on RedHat's OpenShift PaaS?
07:08 < topi`> I think Red Hat is "enterprise friendly", whatever that means.
07:12 < Aria> adlwalrus: Buffer is more or less an array of bytes.
07:12 < Aria> More efficient than a JS string.
07:19 < topi`> JS strings always involve encoding and decoding
07:19 < topi`> ascii, utf8 or otherwise
07:41 < jtmitch> Anyone on who's used Node.js to controll robots?
07:41 <@Nexxy> jtmitch, rwaldron is teh robot master
07:42 <@Nexxy> voodootikigod as well but he's never online!
07:42 < jtmitch> oh... so he's on here?
07:42 < jtmitch> learning new chat client - haven't learned how to see room census just yet
07:43 <@Nexxy> yeah
07:46 < jtmitch> Nexxy: you might be able to help before I get to meaningful questions for rwaldron. I've never used Node.js before, much less javascript. What would be a good resource for someone familiar with programming (C/C++/Ruby) but not Javascript?
07:47 <@Nexxy> jtmitch, within the context of robotics?
07:47 <@Nexxy> or just in general?
07:48 < jtmitch> Nexxy: Ideally within that context - I don't really intent to build web pages
07:48 < jtmitch> but I'm fairly flexible - I can take concepts in one domain and apply them to another
07:48 < jtmitch> I cna also use the word 'domain' in a sentence
07:49 < jtmitch> although having robot sensors output data to a web page in a grapically sexy way would be pretty interesting
07:49 < jtmitch> compass - speedometer - accelerometer data would be pretty sweet
07:50 < jtmitch> I'm using a raspberry pi with an Arduino Mega as part of a project to compete at the region 5 IEEE robotics competition in April
07:51 < jtmitch> I have a 5 person team (me included) and I'm pretty much the only person interested in figuring out the best way to program this bad boy
07:51 < jtmitch> everyone else wants hardware jobs - which I can't blame
07:52 < jtmitch> Nexxy ? 
07:52 <@Nexxy> jtmitch, I'd definitely start with looking at stuff like node-firmata (and firmata in general)
07:52 <@Nexxy> and rwaldron's johnny-five library
07:52 < jtmitch> oh I'm all over that library
07:53 < jtmitch> thats' where I got in trouble - I don't understand node or javascript well enough to make complete sense of it
07:54 <@Nexxy> http://jsforcats.com/ !
07:54 <@Nexxy> jtmitch, if you have a cat
07:54 <@Nexxy> you can teach them JS with that website
07:54 < jtmitch> I hate cats
07:54 <@Nexxy> and in the process, learn yourself
07:54 <@Nexxy> oh.
07:54 <@Nexxy> then, I'm afraid...
07:54 < jtmitch> I c4n h4z dead cATZ
07:54 <@Nexxy> I'm afraid we're done here.
07:55 < jtmitch> lol
07:55 < jtmitch> to be fair - I'm highly allergic and they love me - so really I hate the god that created this situation
07:58 < SomeoneWeird> somebody clone it for jsfordogs
07:58 < jtmitch> so .... Nexxy .... thanks
08:03 <@konobi> jtmitch: it's just javascript... evented
08:06 < jtmitch> konobi: right - but I'm not at all familiar with js
08:07 <@konobi> jtmitch: https://github.com/jgautier/firmata/tree/master/examples
08:07 < jtmitch> so once javascript feels like something I can say "just" about . then the rest would be much simpler
08:08 <@konobi> jtmitch: sure, but that's not really a node issue... there's lots of books/documentation out there about JS... MDN being a good resource
08:08 < jtmitch> konobi: one of the reasons I was taking the johnny-five library under serious consideration is the event driven nature of robots and how well that seems to mesh with javascript mindset
08:09 < jtmitch> Microsoft developer network?
08:09 <@konobi> mozilla
08:10 < jtmitch> konobi: thanks
08:36 < [AD]Turbo> hola
08:41 < jtmitch> npm install is being PITA
08:42 < SomeoneWeird> jtmitch, ?
08:47 < Cheery> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/7jZMSY9PAVA
08:47 < jtmitch> yes?
08:47 < jtmitch> oh
08:48 < jtmitch> so I don't get what npm install does
08:48 < jtmitch> no arguments - just npm install
08:48 < chovy> it installs whatever is in package.json
08:48 <@Nexxy> jtmitch, `npm install` w/o args will run on your package.json
08:48 < jtmitch> and I keep getting hung on serialport / node-gyp
08:48 <@Nexxy> http://package.json.jit.su/
08:48 < jtmitch> ah.. I see
08:48 < jtmitch> (Still hate cats)
08:48 <@Nexxy> (still done here)
08:50 <@Nexxy> also jtmitch 
08:50 < jtmitch> ??
08:50 <@Nexxy> you're dead to me.
08:51 < jtmitch> ARe you like that Jennifer love hewitt and I'm some dead person?
08:51 <@Nexxy> omg yes let's go with that one
08:52 < jtmitch> I was just looking for a reason why you'd be chatting IRC with a dead person
08:52 < jtmitch> I guess... really the problem is why dead people use IRC - but the more I think on that one, the answer is self evident (though I would have guessed usenets)
08:56 <@konobi> BrANEsesS
09:09 < jtmitch> Brain Anus
09:09 < jtmitch> npm isn't installing serialport - error
09:10 < chrismatheson> serialport requires compilation on some systems
09:10 < chrismatheson> are you using windows or linux ?
09:14 < chrismatheson> jtmitch what OS are you trying to install serialport on ?
09:14 < jtmitch> linux chrismatheson 
09:14 < jtmitch> ARM
09:14 < jtmitch> Raspberry Pi no less
09:14 < chrismatheson> RasPi ?
09:14 < jtmitch> I'm hoping to play with johnny-five for some robot shtuff
09:15 < chrismatheson> i had some problems getting it to run on windows because serialport requires some C++ compilation & python for tests
09:15 < chrismatheson> havent tried it with Pi yet though, sorry, but i would def check if you ahve all the pre-reqs set up GCC, Python etc etc
09:15 < jtmitch> so if a package has serialport in its json file, does npm check to see if you compiled and installed first?
09:16 < jtmitch> I do have build dependencies installed chrismatheson 
09:17 < chrismatheson> my understanding is that npm should build - fresh for every project kinda thing, but im by no means an expert :P sorry
09:18 < chrismatheson> *build-a-fresh
09:18 < jtmitch> ah I see
09:18 < chrismatheson> with serial port being a cpp node module it might be better to install as global ?
09:19 < jtmitch> yah - tried that too.... banging my head here with a language I'm not familiar with
09:19 < jtmitch> on a system I'm only somewhat familiar with - Arch Linux ARM
09:19 < ljharb> chrismatheson: if it's used in your project why would it be better to install it as a global?
09:21 < chrismatheson> like i said, nto an expert but most npm modules are purely js but serial port is an actual compiled cpp and then 'loaded' into the node program itself. it might get you round your problem
09:21 < jtmitch> ljharb: he was just trying to help me
09:21 < ljharb> hm, interesting.
09:21 < chrismatheson> if im misstaken here pls let me know :)
09:21 < ljharb> afaik global vs local should never make a difference in how something works, but i could be wrong
09:23 < jtmitch> ljharb - I'm having trouble installing johnny-five on a raspberry pi with Arch Linux
09:23 < jtmitch> the npm install complains on serialport install
09:23 < jtmitch> it was complaining on node-gyp, but I installed that separately as a global and it seems to be okay now
09:24 < chrismatheson> ljharb do you know how cpp modules are loaded into the node program at runtime? i get hoe require works for js ( load the file into memory) but not realy been sure how a cpp module is 'loaded'
09:25 < jtmitch> I just keep gettign a syntax error on npm install print.platform.python_version()
09:28 < SomeoneWeird> jtmitch, what python version you using?
09:31 < jtmitch> SomeoneWeird: funny you should ask - I just realized I'm using 3.3
09:31 < jtmitch> is that bad?
09:33 < SomeoneWeird> try switching to 2.4
09:33 < jtmitch> I have python 2.7.3 as well, but you have to use python2 to use it
09:33 < jtmitch> 2.4?
09:33 < ljharb> chrismatheson: there's a JS component that calls a cpp binary, which is run as a shell command, i believe
09:34 < SomeoneWeird> actually im using 2.7 and it works so try it jtmitch 
09:35 < jtmitch> on Arch linux - python defaults to 3.3 and python2 points to 2.7
09:35 < jtmitch> hmm....
09:37 < SomeoneWeird> ln -s ./python /usr/bin/python2 && export PATH=`pwd`:$PATH
09:37 < SomeoneWeird> or something
09:37 < jtmitch> lol.... "or something"
09:38 < jtmitch> I dunno... rm -R / .... or something
09:38 < SomeoneWeird> -.-
09:38 < SomeoneWeird> just symlink python to python2 temp
09:41 < jtmitch> I know I know... just.. you never know the noobishness of the person accepting advice
09:41 < jtmitch> well... dont' always know the noobishness
09:42 < jtmitch> here goes... 
09:42 < jtmitch> python 2.7 this time round...
09:44 < jtmitch> well... it's different
09:44 < jtmitch> 400 status code on serialcode download
09:49 < jtmitch> wierd - I can download manually just fine
09:49 < jtmitch> wierd
09:53 < jtmitch> so SomeoneWeird the python idea fixed some thing...
09:54 < jtmitch> now I get a 400 error code as I get to serialport
11:07 < syskk> what's the best high level REST/http client out there 
11:08 < syskk> request right?
11:18 < _rheora_> syskk: no
11:18 < syskk> _rheora_: what do you recommend?
11:25 < AAA_awright> syskk: HTTP is RESTful...
11:26 < AAA_awright> So, perhaps, require('http')?
11:26 < jtmitch> ah that's awesome
11:26 < syskk> AAA_awright: I'm looking for a higher level package
11:26 < AAA_awright> What do you mean by higher level?
11:26 < AAA_awright> That's pretty high level
11:27 < AAA_awright> I'm sure you don't want to deal with Chunked encoding and all that nonsense
11:27 < syskk> ok I'll take a look
11:27 < syskk> I was just curious why request was one of the most depended on package
11:27 < syskk> thought it was because the native http client was too low level
11:27 < AAA_awright> I mean, if you tried going any higher, you'll end up forgoing HTTP headers which are required for any decent API
11:27 < _geo> hello i wrote a small "middleware" for expressjs and i call it with app.user(restrict()); in app.configure .. it uses res.redirect inside and falls into a loop around 15times
11:28 < AAA_awright> syskk: What request module?
11:28 < syskk> AAA_awright: https://github.com/mikeal/request
11:29 < _geo> why is that? here is a paste http://pastebin.com/ES2GEjjS
11:29 < syskk> _geo: should probably pastebin your code… does your browser make 15 requests?
11:30 < syskk> _geo: you should make sure that the middleware is not called for URL /users/login
11:30 < syskk> _geo: maybe add a check for req.url != '/users/login'
11:30 < AAA_awright> syskk: I think request deals with cookies, automatic redirect handling, removes the stream interface in favor of a single string, and such stuff
11:30 < AAA_awright> Personally I don't like such abstraction since it hides how stuff works
11:31 < syskk> well, that's pretty much the definition of an abstraction :)
11:31 < AAA_awright> Abstraction brings things down to simpler terms
11:32 < syskk> that's the point yes...
11:32 < AAA_awright> Or it's supposed to
11:32 < _geo> syskk: from browsers side i reload the page once and keeps loading and then just keeps loading.. the URL i'm requesting is the website root /
11:32 < Shadownest> Morning ! i would like to make a REST API in node.js using http... and i've got a question ! My API must be easily edited (adding/removing/modifying actions), that's why i would like to use the filesysteme as route (asking : /aaa/bbb/ccc should open the file ./aaa/bbb/ccc.js), is it better to use require() and catch the missing file error (is require() enough fast for an api?) or should i use something else ?
11:32 < syskk> _geo: make sure the middleware is not called on your redirected url.. /users/login it will fix your problem
11:33 < _geo> syskk: thanks will try it
11:34 < syskk> Shadownest: it will be fine if all your files are required at least once before you start getting requests
11:34 < AAA_awright> Shadownest: Oh dear no, don't map URIs to executable code, ever
11:34 < AAA_awright> Bad Things happen, and a cryptographer's kitten dies every time someone suggests it
11:35 < syskk> Shadownest: AAA_awright  is right.. it's not a very good practice to do that
11:35 < AAA_awright> Shadownest: In REST, a URI should name a resource that's being acted on, and never the action being performed on it
11:35 < syskk> that's the PHP/cgi-script way
11:36 < AAA_awright> The URI is the noun in question, the method and request-body collectively are the verb and adjectives
11:36 < Shadownest> because adding an action is easier this way, i just have to add a file, but i agree with you AAA_awright
11:36 < syskk> I'm guessing he doesn't care about REST AAA_awright 
11:36 < syskk> and that's fine too
11:37 < AAA_awright> Yeah, if you were really doing something RESTful you wouldn't have even considered it :)
11:37 < AAA_awright> Shadownest: You're aware what REST is, yes?
11:37 < syskk> it will just make your code messy to tie your URLs to the filesystem
11:37 < Shadownest> Yes, i am
11:37 < syskk> especially if you decide to change your URL structure and dont want to lose traffic or break links
11:38 < AAA_awright> Shadownest: What is it?
11:38 < Shadownest> it's my first time doing a node REST API, and i would like to split my files in order to make it readable, should i better put it all in the same file ?
11:39 < AAA_awright> Everyone designing something for HTTP should read http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm and RFC 2616, the HTTP specification
11:39 < AAA_awright> Cover to cover
11:39 < Shadownest> AAA_awright, a way to get/post/put/delete data through this api
11:39 < AAA_awright> Shadownest: I mean, what is REST?
11:40 < Shadownest> i know how to use it (even if i'm still learning)
11:40 < _rheora_> AAA_awright: all that is just boring
11:40 < AAA_awright> Describe it to someone who's never heard it before, and why you should use it
11:40 < AAA_awright> _rheora_: Nonsense
11:40 < syskk> Shadownest: it's possible to split your actions in different files without tying your filesystem to URLs using require()
11:41 < syskk> var action = require('./action/actioname.js')
11:41 < Shadownest> AAA_awright, ok you are right ;D "Representational state transfer", the URI should be intelligent
11:41 < syskk> I agree REST is overrated
11:41 < _rheora_> AAA_awright: REST is just few principles, Shadownest: adapt it for your app.
11:42 < syskk> my api is a websocket for current project
11:42 < AAA_awright> _rheora_: It's well designed for a certain class of applications that describe resources
11:42 < syskk> REST just doesn't cut it if your data is changing fast
11:42 < AAA_awright> HTTP doesn't cut it if your data is changing fast
11:42 < AAA_awright> Nothing against REST
11:43 < AAA_awright> REST is just one protocol design
11:43 < Shadownest> so i better should make one file per action and preload it
11:43 < _rheora_> Stop telling stupid things like that
11:44 < _rheora_> "a protocol"...
11:44 < AAA_awright> _rheora_: A protocol design
11:45 < syskk> Shadownest: yes. usually i have actions/index.js  and in index.js   : module.exports.action1 = require('./action1'); module.exports.action2 = require('./action2');   I can then do var actions = require('./actions'); and actions.action1 ...
11:45 < syskk> more like loose guidelines AAA_awright 
11:45 < AAA_awright> Shadownest: All your executable code should be loaded at start up, or like me, some similar setup where you know all the files that could possibly ever load at startup
11:46 < AAA_awright> syskk: Specifically, four very well defined constraints
11:46 < Shadownest> ok, and now, last question, if i use clusters, should i load it in the master or in all the children ?
11:47 < syskk> Shadownest: you load them in files  where you use them. it doesn't matter if you require them many times as modules are cached
11:47 < Shadownest> ah, ok, perfect then
11:48 < AAA_awright> Shadownest: You can define the action you want to take in the request-body, then in your application define which value for the request maps to which require() argument
11:49 < AAA_awright> Always do some sort of sanity checking of course. People could start doing nasty things if you let them pass arbritrary filenames.
11:49 < Shadownest> that's obvious
11:50 < Shadownest> and what if i have to edit a file, i must restart the server ?
11:50 < SomeoneWeird> yes
11:51 < syskk> Shadownest: honestly I suggest you use Express. and if you want some more structure you can try out those controllers: https://github.com/olalonde/chungking  if you want more fancy routes: https://github.com/1602/railway-routes
11:51 < Shadownest> i dont really like express, that's why i would like to do it myself from scratch (learning/understanding)
11:51 < syskk> Shadownest: sure then
11:52 < AAA_awright> I don't use express either (back to the abstraction thing, fancy wrappers around stuff for no particular reason)
11:52 < syskk> Shadownest: express has a fairly small code base, you could always read the code there and see how things work
11:52 < AAA_awright> Also Express may misead from the fact that URIs are opaque
11:52 < syskk> AAA_awright: the reason is to speed up development
11:53 < AAA_awright> But first you have to figure out what function maps to what functions, and then if you want to read the code, you have to do the same
11:53 < AAA_awright> It assumes everyone is familiar with Express
11:54 < syskk> the API is well documented and to be honest, express is a tiny abstraction
11:54 < Shadownest> if i create a new worker while the server is running will it take the new files ? (this way i will be able not to stop the server)
11:54 < syskk> I have to wonder why you are using Node.js at all if you are opposed to abstractions
11:55 < joshgillies> anyone in here know whether there is an IRC for Jade?
11:55 < AAA_awright> syskk: Ask ryah, he's said largely the same thing. More extreme, actually, I believe even for example database abstraction layers
11:55 < syskk> Shadownest: you have to reboot the server when your files change. I suggest you use node-monitor
11:55 < AAA_awright> joshgillies: This channel
11:56 < joshgillies> woot woot
11:56 < AAA_awright> I would suggest using database abstraction layers, and such
11:56 < AAA_awright> Libraries that do computation, and system libraries
11:56 < syskk> AAA_awright: didn't ryah leave Node.js too? :)
11:57 < AAA_awright> Um
11:57 < AAA_awright> syskk: I don't see that fundemental design philosphy changed much
11:57 < AAA_awright> Is the point
11:58 < syskk> yes.. I'm all for keeping the core low level too
11:58 < syskk> but I won't write a web app with the core api only
11:58 < syskk> it's just ridiculous imo
12:02 < jtmitch> when doing an npm install - I get a 400 status code downloading tarball..
12:02 < jtmitch> how do I fix that?
12:03 < ndrizza> sysk: have a look at this for your REST requirements: 
12:03 < ndrizza> http://pixelhandler.com/blog/2012/02/09/develop-a-restful-api-using-node-js-with-express-and-mongoose/
12:03 < ndrizza> exressJS offers great http abstractions .put(..) .post(...) .delete(...) .get(...)
12:04 < syskk> ndrizza: you meant to send that to Shadownest I guess
12:05 < syskk> jtmitch: what's the tarball URL?
12:05 < ndrizza> ah yes sorry
12:06 < AAA_awright> syskk: I've got a webapp with 4311 loc, only a dependency on Jade, mongolian, TJ's send, and other non-node-submodules, in addition to my own modules rdf, sparql, and such
12:07 < syskk> AAA_awright: well that seems like quite a bit of abstraction :) not sure why you are hating on Express :D
12:07 < AAA_awright> There's actually 14 git submodules but that's only because TJ loves adding unnecessary dependencies for some reason >:(
12:07 < jtmitch> syskk - apparently it's http://nodejs.org/dist/v0.8.14/node-v0.8.14.tar.gz
12:07 < AAA_awright> syskk: That's not abstraction
12:07 < jtmitch> but that link works fine when I manually enter it
12:07 < AAA_awright> Jade doesn't abstract anything, neither does send, rdf, etc
12:07 < jtmitch> and it's messing up on serialport
12:08 < AAA_awright> My own modules are computational libraries and APIs
12:08 < syskk> AAA_awright: yes it does. maybe you are confused about the meaning of abstraction
12:08 < syskk> AAA_awright: so is express
12:08 < AAA_awright> Express doesn't do computation
12:08 < AAA_awright> What, it routes URLs?
12:08 < ndrizza> if you have a wish for a nodeJS module, just post it here:
12:08 < ndrizza> https://docs.google.com/spreadsheet/viewform?formkey=dExRSXg4TjRtSUdNY0tmTGdZOGZGMmc6MQ#gid=0
12:09 < jtmitch> I mean - even C is an abstraction
12:09  * jtmitch peanut gallery
12:09 < AAA_awright> I specifically named abstraction that hides functionality
12:10 < AAA_awright> For instance, Express, cookie-jars for HTTP, the most popular async module is a nice offender
12:10 < syskk> AAA_awright: you can use it to route URLs yes. not sure how you define "hides functionality" but jade and send do hide functionality in the same way express does
12:10 < AAA_awright> Jade contains a syntax parser
12:11 < AAA_awright> It's not hiding anyone else's functionality
12:11 < syskk> yes… Express contains a URL parser
12:11 < AAA_awright> It does it's own unique computation
12:11 < syskk> not sure what your point is
12:11 < AAA_awright> I can write a URL router in, what, four lines?
12:11 < AAA_awright> It's not worth it
12:11 < jtmitch> syskk - would you have any insight why I'd get a 400 error for installing serialport@1.0.8 but the link in question seems to be node.js?
12:11 < AAA_awright> Now an asynchronous URL router
12:11 < syskk> ahh there we go
12:11 < AAA_awright> That's a module of mine
12:12 < syskk> jtmitch: npmjs.org is often down.. that might be the reason simply
12:12 < AAA_awright> Having to query a database, doing caching, performance optimizations, buffering input
12:12 <@Nexxy> syskk, define 'often'
12:12 < AAA_awright> Use https://github.com/Acubed/git-node
12:12 < syskk> AAA_awright: so you're using your own module. your own abstraction?
12:13 < syskk> Nexxy: a few times a week here
12:13 -!- mode/#node.js [+o piscisaureus_] by ChanServ
12:13 <@Nexxy> are you sure it's not just you?
12:13 < syskk> well, the registry
12:13 <@Nexxy> I've seen it go down twice in 2 years
12:13 < syskk> no, people have reported the same problem here
12:13 < AAA_awright> syskk: It's non-trivial logic, about 440 lines split across 5 files
12:14 < AAA_awright> Now THAT'S a URL router to be proud of
12:14 <@Nexxy> jtmitch, try `npm cache clean`
12:14 < syskk> AAA_awright: that's my point.. you have nothing against abstraction, you have something against Express
12:14 <@Nexxy> jtmitch, then try installing again
12:14 < AAA_awright> I didn't say abstraction in general
12:14 < _geo> does the order in app.configure({app.use(..),app.use(..)}) matters ? where do i place something that needs to check a session variable?
12:14 <@Nexxy> (serialport)
12:14 < jtmitch> Nexxy: thanks
12:14 < AAA_awright> I said abstraction that purposefully hides the functionality of stuff
12:14 < jtmitch> (still dead)
12:14 <@Nexxy> what is teh error?
12:14 < AAA_awright> Express does this. async does this.
12:15 < syskk> AAA_awright: what you mean really is libraries where you can not follow the control flow
12:16 < jtmitch> Nexxy serialport fails on install script
12:16 < AAA_awright> That's probably the large case of reasons, sure
12:16 < jtmitch> there is a 400 error before that
12:16 < syskk> that's a matter of taste I guess
12:16 <@Nexxy> jtmitch, can you gist iT?
12:16 < jtmitch> prolly :)
12:16 <@Nexxy> jtmitch, I'm able to install it on OSX in a fresh directory
12:16 < AAA_awright> If you're left wondering "What's the semantics of this function call" it's probably unnecessary
12:16 <@Nexxy> jtmitch, I bet you can!
12:16  * Nexxy believes in you
12:16 < jtmitch> well - this is an ARM install
12:16 <@Nexxy> ohh
12:17 < jtmitch> a;)
12:17 <@Nexxy> I haven't compiled serialport on ARM for a few versions
12:17 <@Nexxy> but it should work
12:17 < jtmitch> too busy petting catz I imagine....
12:17 <@Nexxy> no that's mbalho's job
12:18 <@Nexxy> but I have used serialport on ARM
12:18 <@Nexxy> so your chances are good
12:18 < jtmitch> currently redoing npm install in johnny-five directory
12:19 <@Nexxy> but still no gits
12:19 <@Nexxy> gist*
12:20 <@Nexxy> there is 0.7.5 on my ninjablock
12:20 <@Nexxy> which is a beaglebone
12:20 <@Nexxy> with fancy upgrades
12:21 < jtmitch> https://gist.github.com/4024319
12:21 <@Nexxy> you did it!!!
12:22 < chapel> no you didn't
12:22 < jtmitch> I didn't or I did?
12:22 <@Nexxy> you did the gist
12:22 < jtmitch> yay me!
12:23 <@Nexxy> how did you install node?
12:23 < chapel> lol
12:23 <@Nexxy> y u lollen tho
12:23 < jtmitch> pacman -S nodejs
12:23 < chapel> should say, "black sassy voice: no you didn't"
12:23 <@Nexxy> install from source
12:23 <@Nexxy> then we'll talk
12:23 < jtmitch> esplain?
12:23 < yawnt> pacman is pretty much up to date
12:23 < jtmitch> should I stick with the 0.8.14v?
12:23 <@Nexxy> I don't trust it!
12:23 < jtmitch> cause that's what pacman is packin;
12:24 <@Nexxy> o lol
12:24 < jtmitch> so.... still do that?
12:24 <@Nexxy> I mean it can't hurt
12:24 < jtmitch> I mean ... I can
12:24 < yawnt> Nexxy: https://gist.github.com/f134ee06df3fc81768fc
12:24 < yawnt> TAKE THAT
12:24 < jtmitch> I dunno - have you ever compiled on ARM before? it almost always hurts
12:25 <@Nexxy> yeah
12:25 <@Nexxy> but
12:25 <@Nexxy> I'm trying it on my ninjablock right now
12:25 <@Nexxy> and it's working
12:25 <@Nexxy> soooo
12:25 < yawnt> Nexxy: what's this ninjablock thing'
12:25 < jtmitch> serialport is ?
12:25 < yawnt> ?
12:25 < jtmitch> yawnt: excellent question.... 
12:25 <@Nexxy> only the most awesome thing ever
12:25 < jtmitch> I'm sure it blocks ninjas
12:25 < Sly> ninjablock is like..
12:25 <@Nexxy> http://ninjablocks.com/
12:25 < Sly> A little arduino board where you can hook sensors up to
12:25 < Sly> iirc
12:25 < yawnt> ok
12:26 <@Nexxy> yeah!
12:26 < yawnt> cool
12:26 < yawnt> Nexxy: give me a free one
12:26 <@Nexxy> and program/webhook
12:26 < yawnt> SINCE YOU WORK FOR THEM
12:26 < yawnt> don't you (??
12:26 <@Nexxy> LOL
12:26 <@Nexxy> yes
12:26 < yawnt> i remembered something about you and ninjas
12:26 < yawnt> i waz right
12:26 <@Nexxy> mhmm
12:26 < Sly> Oh wow.
12:26 < Sly> Those things have come a long way.
12:26 <@Nexxy> chyea
12:26 < Sly> I remember seeing the prototype with the 3D printer.
12:27 < Sly> That black one is pretty sweet.
12:27 <@Nexxy> I know, I'm pretty excited
12:27 < killfill> hi
12:27 <@Nexxy> jtmitch, anyway; yes
12:28 < jtmitch> yes compile from source?
12:28 <@Nexxy> yup
12:28 < jtmitch> good cause I was pretty sure you didn't mean to agree to a ninjablock blocking ninjas
12:28 <@Nexxy> jtmitch, https://gist.github.com/4024342
12:28 < killfill> my express and jade are using readFileSync to load the .jade files... im with NODE_ENV=production wasnt express suposted to cache the templates in memory?
12:29 < jtmitch> well why is mine trying for 1.0.8?
12:29 < killfill> ooh never mind.. :P
12:29 <@Nexxy> ¯\(°_o)/¯
12:29 < killfill> prodction.. :P
12:29 <@Nexxy> lol
12:30 < jtmitch> otay
12:30 < jtmitch> git cloning as we speak
12:30 < jtmitch> probably have to finish when I get home - almost off work
12:31 <@Nexxy> you lack dedication
12:31 < jtmitch> and compassion for cats
12:31 < jtmitch> I'm a mess
12:31 < ndrizza> https://docs.google.com/spreadsheet/viewform?formkey=dExRSXg4TjRtSUdNY0tmTGdZOGZGMmc6MQ#gid=0
12:31 <@Nexxy> jtmitch, seriously. get yourself together
12:32 < Sly> Nexxy, let me know when some of those black ones become available. I might get a couple of them.
12:32 <@Nexxy> Sly, oki :)
12:32 < yawnt> BUY A BAZILLION
12:32 < yawnt> conquer the world
12:32 < Sly> rofl
12:32 <@Nexxy> it's happening
12:32 <@Nexxy> hardware is teh future
12:33 < yawnt> then you can be all like
12:33 < yawnt> "i got an army of ninjas at my command"
12:33 < yawnt> and it'd be true
12:33 < jtmitch> I conquered the world with a bunch of black ninjas
12:33 < jtmitch> oh... you're phrasing is probably better
12:34 < jtmitch> .... still cloning....
12:34 <@Nexxy> patience is a virtue
12:35 <@Nexxy> node-serialport is not a path to a door, but a road leading forever towards the horizon
12:36 < Sly> yawnt, build a transformer out of ninjablocks.
12:36 < yawnt> Sly: TOO LATE
12:36  * yawnt dies
12:36 < Sly> LOL
12:37 < Sly> That's horrible. You would rather fake your own death than build me a transformer.
12:37 < Sly> :(
12:37 < Sly> I promise I won't destroy your house. :D
12:37 < yawnt> it was supposed to mean that i got smashed by my own transformer
12:37 < yawnt> but okay :_.
12:37 < yawnt> Sly: i can make a transformer which is 50 x 50 cm
12:38 < yawnt> i doubt you can smash anything with that
12:38 < yawnt> probably some ants
12:38 < Tobsn> hmm are there any node.js build systems to build a release of a JS lib?
12:38 < Sly> Why would it smash you? ROBOTS CAN'T HURT HUMANS REMEMBER?!
12:38 < Sly> :x
12:38 < jtmitch> making.... 
12:38 < Tobsn> concatting, version replace, minifying etc.
12:38 < Sly> iRobot
12:38 < yawnt> Sly: because i didn't teach him the 3 laws of robotics
12:38 < yawnt> as easy as that
12:38 < jtmitch> well robots can destroy you before the rules are loaded - so a robot during boot up is dangerous
12:38 < yawnt> I SAID 'GO MY CREATURE, YOU'RE FREE'
12:38 < Sly> ROFL
12:38 < yawnt> suddenly, i found my bones crashed
12:38 < jtmitch> and named him clu?
12:39 < AAA_awright> Tobsn: Makefile
12:39 < Tobsn> meh, i want something fancier :P
12:39 <@Nexxy> Tobsn, have you looked at grunt?
12:39 < jtmitch> make output makes me happy for some reason
12:39 < AAA_awright> What could possibly be better than that?
12:39 < Tobsn> Nexxy, i just want something very simple
12:39 < Tobsn> maybe just a single file
12:39 < AAA_awright> Tobsn: So you want something fancy, and simple. Use a Makefile
12:40 <@Nexxy> fancy + simple
12:40 < yawnt> or you can use a ninjablock
12:40 <@Nexxy> rofl
12:40 < Sly> LOL
12:40 < yawnt> which is the ultimate solution
12:40 < AAA_awright> cp, cat, sed, browserify, and any old js compressor
12:40 <@Nexxy> definitely
12:40 < AAA_awright> Throw those into a Makefile and you've got your build system
12:40 < yawnt> i'd pay everything i have
12:40 < yawnt> to see macgyver with a ninjablock
12:40 < Sly> LOLOLOL
12:40 < Tobsn> AAA_awright, thats pretty much how im doing it right now
12:40 < AAA_awright> Tobsn: Well stick with it then
12:40 < Tobsn> i just hate bash script
12:40 < Sly> Nexxy, you need to make this happen.
12:41 < voodootikigod> jtmitch: did Nexxy help you get settled with node?
12:41 < Tobsn> grunt looks okay
12:41 < AAA_awright> Tobsn: You shouldn't be doing any bash scripting, mind if you paste it?
12:41 <@Nexxy> oh my god he speaks
12:41 < Tobsn> too many internal references...
12:41 < jtmitch> voodootikigod: been helpful - I'm compiling nodejs from source and seeing if that helps with the serialport install
12:41 < yawnt> it'd turn it into some sort of perpetual motion machine
12:41 < Tobsn> what about grunt?
12:41 < Tobsn> looks neat
12:41 < voodootikigod> and you should not hate cats
12:41 < voodootikigod> just dont buy them
12:41 <@Nexxy> yeah!
12:41 < voodootikigod> :)
12:41 <@Nexxy> thank you.
12:41 < AAA_awright> Tobsn: Mind if I see?
12:41 < jtmitch> O ....... M......... G.......
12:42 < voodootikigod> i love dogs
12:42 < Tobsn> https://github.com/gruntjs/grunt-init-jquery-sample/blob/master/grunt.js
12:42 < voodootikigod> so there is that
12:42 < Tobsn> AAA_awright, too many references in the makefile, i dont want to replace all this shit
12:42 < voodootikigod> and llamas
12:42 < jtmitch> in reviewing the irc history - did you see why I hate cats?
12:42 < AAA_awright> Tobsn: Don't replace anything
12:42 < voodootikigod> allergy
12:42 < voodootikigod> have the same
12:42 < jtmitch> oh so llamas are totally cool
12:42 <@Nexxy> I love direct current
12:42 < AAA_awright> What's the Makefile as-is
12:42 < voodootikigod> Nexxy: AC
12:42 < voodootikigod> contrarian
12:42 < Tobsn> its full of characters, it literally says COMPANYNAME fucking everywhere
12:42 < jtmitch> well... snaps to your thoroughness voodootikigod 
12:42 < Tobsn> so thats a no go ;)
12:42 <@Nexxy> voodootikigod, it feels too fuzzy
12:43 < voodootikigod> what is teh issue with the SP install>
12:43 < Tobsn> i'll look into grunt, if thats not working i stick with the makefile
12:43 < jtmitch> DC is way deadlier to cats....
12:43 < AAA_awright> Tobsn: Well fix that first and maybe you'll like a Makefile better?
12:43 < Tobsn> yeah, youre right
12:43 < jtmitch> voodootikigod: I was trying to get johnny-five on a raspberry pi - the npm install failed on serialport
12:44 < jtmitch> where did that gist go?
12:44 < AAA_awright> Tobsn: make gives too many useful functions to play around with, $(addprefix), string replacement in variables $(VARIABLE:src=replacement) and whatnot
12:44 < voodootikigod> ahh
12:44 < Tobsn> yeah im looking righjt now how others do it
12:44 < AAA_awright> I've actually been replacing Node.js scripts with Makefiles
12:44 < voodootikigod> the ole armv7
12:44 < voodootikigod> gotta vote
12:44 < voodootikigod> will be back
12:44 < mscdex> is it just me or did the parsing mechanism on github change?
12:45 < AAA_awright> Now that I've been reading up on how to write them
12:45 < voodootikigod> i should have this down pat soon
12:45 < jtmitch> https://gist.github.com/4024319
12:45 < jtmitch> ah - and it's armv6 on pi
12:45 < mscdex> er the parsing mechanism for markdown
12:45 < voodootikigod> so
12:45 < voodootikigod> um
12:45 < voodootikigod> your core issue
12:45 < voodootikigod> is:400 status code downloading tarball
12:45 < voodootikigod> just retry
12:45 < voodootikigod> if that fails
12:45 < voodootikigod> do a wget http://nodejs.org/dist/v0.8.14/node-v0.8.14.tar.gz
12:45 < voodootikigod> why the frank npm loves to download that
12:45 < voodootikigod> i got no idea
12:46 < voodootikigod> out
12:46 < jtmitch> ah.. well that just answered my next question kinda
12:46 < jtmitch> thanks 
12:46 < jtmitch> do I need to wget that to somewhere specific?
12:46 < jtmitch> or just ... untar and compile on my lonesome?
12:46 < Tobsn> http://nefariousdesigns.co.uk/website-builds-using-make.html
12:46 < Tobsn> yeah turns out we're doing this completely wrong
12:46 < Tobsn> haha
12:47 < bigkevmcd> jtmitch: you're using Raspberry Pi?
12:47 < jtmitch> yep
12:47 < jtmitch> with Arch Linux ARM
12:48 < AAA_awright> Tobsn: Well I wouldn't suggest doing a different CSS file per webpage, the One Big FIle to Rule Them All is more cachable and efficent, but largely that has the right gist. Here, lemme post a Makefile I use
12:49 < bigkevmcd> jtmitch: make sure you update your Raspberry Pi with raspi-config, there's a firmware update (not sure which version) otherwise it will hang regularly
12:49 < voodootikigod> jtmitch: 
12:49 < voodootikigod> HAHAHAHH
12:49 < jtmitch> yep?
12:49 < voodootikigod> tell me that BEFORE I start helping
12:49 < voodootikigod> i assumed raspbian
12:49 < jtmitch> the Arch part?
12:49 < jtmitch> well... you don't come with a FAQ.. what can I say?
12:49 < voodootikigod> sure i do
12:49 < voodootikigod> npm install serialport
12:49 < bigkevmcd> oh...Arch, hmmm...all bets are off :-)
12:49 < voodootikigod> done
12:50 < voodootikigod> jtmitch: will be back later
12:50 < jtmitch> I'll try that
12:50 < jtmitch> I'll be off for awhile
12:50 < jtmitch> maybe back on around 8 amish
12:50 < jtmitch> am -ish
12:50 < jtmitch> not 8 amish people time
12:50 < AAA_awright> Tobsn: http://pastebin.com/9dYj3qMV
12:51 < jtmitch> I wish make had a loading bar....
12:51 < Slade-> i see a ton of libs do  'var self=this'   what is this used for?
12:51 < AAA_awright> And there's some more advanced ones that use Coffeescript and browserify, etc
12:52 < Tobsn> yeah im trying to find one right now that does coffee & minify/closure
12:52 < Sly> Slade-, it's usually when a function needs a reference to `this` in an async callback.
12:52 < darach> Slade- Sanity, if you're not a 100% JS guy or a polyglot.
12:52 < AAA_awright> I just wrote one that generates thumbnails from all the images in a directory, to a list of different sizes. Which was complex because you have to do recursive make
12:52 < Slade-> darach: thats it? hmm
12:52 < Tobsn> https://raw.github.com/SteveSanderson/knockout/master/build/build-linux
12:52 < Tobsn> knockout is using this here
12:52 < Tobsn> just a shell script
12:52 < jtmitch> I think recursive make is supposed to be bad
12:52  * jtmitch doesn't really know - just read a blog
12:53 < AAA_awright> Tobsn: You could use a shell script but that gets inefficent, really fast, and it's slightly harder to read...
12:53 < AAA_awright> If you wanted to build with coffee, you'd make a variable that specifies all the files you want to compile, and then do something like so:
12:54 < jtmitch> why are all bets off with ARch anyways?
12:55 < jtmitch> it's not like... made with unicorn horn dust or anything
12:55 < AAA_awright> $(COFFEE_SRC): %.js: %.coffee
12:55 < AAA_awright>     $(COFFEEC) $< $@
12:55 < darach> Slade- In JS 'this' is fuzzy - http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/
12:55 < AAA_awright> Or however you call coffeescript to compile a file
12:55 < Slade-> ah
12:55 < darach> I often var self=this; so I know which this I'm referring to
12:56 < AAA_awright> And in the file somewhere, you specify COFFEE_SRC = file2.js file3.js file4.js etc.js
12:56 < AAA_awright> I should say COFFEE_BUILD since you're listing the files you wish to generate
12:56 < Sly> AAA_awright, you could also do COFFEE_SRC=`find *.js -printf "%p "`
12:56 < jtmitch> I be back later....
12:57 < AAA_awright> Sly: Yep, I've done that. Actually I think a Makefile will do that for you in some cases, wildcard expansion
12:57 < AAA_awright> Sly: objects := $(wildcard *.o)
12:57 < AAA_awright> No need for backticks
12:57 < AAA_awright> So it would be like:
12:58 < AAA_awright> COFFEE_BUILD = $(patsubst %.coffee,%.js,$(wildcard *.coffee))
13:00 < AAA_awright> http://www.gnu.org/software/make/manual/make.html#Wildcard-Examples
13:02 <@konobi> just pipe the *.coffee to rm
13:02 < AAA_awright> s/rm/xargs rm/ :p
13:03 < Sly> AAA_awright, if you were going to go through all of that.. you'd be better off to do COFFEE_SRC=`find -iname *.js -printf "%p "`
13:03 < Sly> /late response
13:03 < AAA_awright> Tobsn: And then finally, once it's written, you can use the "watch" program to call make every two seconds or so, and it'll only re-build the files that have changed
13:03 < AAA_awright> Sly: Well if we're actively trying to avoid using bash, that's the "proper" way to do it
13:04 < AAA_awright> The cross-platform way of doing it
13:05 < AAA_awright> Makefiles work on Windows too, remember
13:05 < Sly> Makefiles don't work natively on Windows. They work on Cygwin or MinGW.
13:05 < Sly> Which isn't building natively on Windows.
13:05 < astropirate> o_O
13:06 < astropirate> 0_o
13:06 < Tobsn> hmm
13:06 < Tobsn> AAA_awright, thanks for all the info :)
13:06 < astropirate> <{O_O}>
13:06 < AAA_awright> Sly: Well you have to have a make program, that's no different than Linux or any other OS
13:09 < Sly> AAA_awright, Windows does have CMake, but that's not the same as the *NIX Makefile.
13:11 < AAA_awright> Sly: Right I'm not talking about that, I'm talking about actually running make on Windows. Makefiles are supposed to be cross-platform and allow for that.
13:11 < AAA_awright> That's why you have a crapton of different $(prefix_*) variables
13:13 < Sly> Yeah, and most people add a CMake file for that. Or, as in Node's case, they added vcbuild.bat.
13:13 < AAA_awright> Tobsn: https://github.com/dvicory/TvT/blob/master/Makefile
13:14 < AAA_awright> a_meteorite: You still haven't fixed the all target, it's pointing to every single file :p
13:14 < mscdex> astropirate: not your first cup of coffee this morning?
13:14 < a_meteorite> AAA_awright: that's not right?
13:15 < AAA_awright> a_meteorite: Well it's redundant I guess, it should point to just the final files that you want to build
13:15 < a_meteorite> ah I suppose
13:16 < AAA_awright> Likewise the "client" target should point to all the files necessary to run just a client, even if only "lib/client/public/js/Client.js"
13:16 < mscdex> planetnodejs.com still down :-(
13:17 < astropirate> mscdex, just spent an hour in line to v0te
13:17 < astropirate> :(
13:19 < richtera> Noticed something weird....
13:19 < richtera> andy-laptop-2:calipso andy$ node > var s = new String("sample") undefined > var s2 = "sample" undefined > s { '0': 's',   '1': 'a',   '2': 'm',   '3': 'p',   '4': 'l',   '5': 'e' } > s2 'sample' >  
13:19 < richtera> Shouldn't new String('sample') and 'sample' be the same?
13:24 < mscdex> vote node.js 2012!
13:24  * nkuttler votes .net
13:28 < tuhoojabotti> richtera: yes and no
13:28 < Tobsn> ah, thanks AAA_awright :)
13:29 < Tobsn> %.js:: %.coffee
13:29 < Tobsn> 	$(COFFEEC) $< >$@
13:29 < Tobsn> wheres the base for the % ?
13:29 < tuhoojabotti> richtera: see typeof s
13:29 < Tobsn> is it any path?
13:30 < tuhoojabotti> richtera: s instenceof String -> true; s2 instanceof String -> false
13:30 < tuhoojabotti> instance*
13:31 < tuhoojabotti> richtera: If you use a method of a string literal the engine actually turns it into a String object and then back.
13:39 < Shadownest> Morning again ! I've got a question about node-mysql (mysql for node). Is require('mysql').connect() useful ? without this action i still can query the server... ?
13:41 < richtera> tuhoojabotti: ok, seems kind of bad.
13:41 < tuhoojabotti> richtera: In javascript everything is practically an object.
13:44 < richtera> tuhoojabotti: The problem I am having is that when converting toJSON a String object turns to {'0':firstchar,'1':secondchar and so on... I'll figure it out. Thanks for the info.
13:45 < tuhoojabotti> richtera: ''+yourStringObject?
13:45 < tuhoojabotti> that should do the trick
13:46 < tuhoojabotti> richtera: or yourStringObject.toString()
13:51 < _geo> where can i find (if there are any) tutorials on how to write tests for expressjs applications?
13:51 < tuhoojabotti> _geo: There are examples for example for vows
13:52 < tuhoojabotti> _geo: http://vowsjs.org/#-macros
13:52 < tuhoojabotti> not exactly
13:54 < tuhoojabotti> Google found something about it. :P
13:54 < Pnkkito> someone is there ?
13:55 < Pnkkito> i have a problem  ! 
13:55 < tuhoojabotti> Pnkkito: No, you're all alone
13:56 < Pnkkito> T.T !
13:57 < somewhat> so, uh
13:58 < tuhoojabotti> Pnkkito: Well, no one is going to help, unless you tell us what the problem is.
13:58 < tuhoojabotti> No one is like "Oh I want to help! Pick me!"
13:58 < somewhat> what versionis right for os x 10.4.11 on a power pc?
13:58 < Pnkkito> someone knows how to remove node.js from my centos server ? 
13:59 < tuhoojabotti> Pnkkito: how did you install it (and why do you want to remove it)
13:59 < Pnkkito> i download the package , them extract and make install 
14:00 < somewhat> and i was verifying virtual neural efficacy as opposed to just virtual  heartbeat before speaking
14:00 < tuhoojabotti> Pnkkito: make uninstall?
14:00 < somewhat> so the latest is cool then
14:01 < Pnkkito> tuhoojabotti : and i want to remove because i wanto to install the last version ! 
14:01 < tuhoojabotti> ah
14:01 < tuhoojabotti> Pnkkito: Just download the new zip and make && make install again
14:02 < tuhoojabotti> There is no need to uninstall afaik
14:02 < somewhat> well tthx
14:02 < tuhoojabotti> somewhat: I didn't understand anything.
14:02 < Pnkkito> ah it will not have problem with the rpm modules ? 
14:03 < tuhoojabotti> Pnkkito: I don't think so. If you installed it via an rpm module then it might.
14:03 < somewhat> i thought the latest version would be ttoo advanced for an old ppc mac
14:03 < tuhoojabotti> somewhat: I would try the latest.
14:04 < tuhoojabotti> I mean, there is no point in using the old ones, they suck. ;-)
14:04 < somewhat> <-- figuring all this shit out on own
14:04 < somewhat> thank you so much for yr forebearance
14:04 < tuhoojabotti> somewhat: trial and error ftw. :P
14:04 < somewhat> &
14:04 < somewhat> be seeing you
14:11 < somewhat> fyi
14:12 < somewhat> package wouldnt install 
14:12 < somewhat> req 1.5
14:12 < somewhat> BUT
14:13 < Pnkkito> lalalalala ! node.js is nice ! 
14:13 < somewhat> i used pacifist (avoiding, irrationally, make &c)
14:13 < somewhat> and will only be back if it didnt work
14:13 < somewhat> not 2 complain either
14:14 < somewhat> thx again
14:14 < Pnkkito> node chat work well if im using and mv project ? 
14:27 < mnaser> gah
14:27 < mnaser> anyone ran into an issue where fs.exists never responds to it's call back for some reason
14:27 < mnaser> after it's called multiple times
14:27 < mnaser> it seems to be consistently on the 4th call that it stops responding
14:38 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:40 < mnaser> so i think the issue is i'm working with node-ffi to get an api for eventfd
14:40 < mnaser> and i think that's messing up things in node
14:51 < qballer> Hey guys I wonder how I can perform  call to a C++ dll which is exposed by an IDL using node.
14:56 < RLa> fucking webstorm is getting annoying
14:56 < niggler> fuck webstorm
14:56 < niggler> should be called webshitstorm
14:56 < qballer> No one ?
14:57 < ace> hi there
14:57 < qballer> Hi 
14:57 < niggler> qballer: that sounds like windows
14:57 < myme> Anybody know of any parser libs that generate ASTs preserving comments?
14:57 < ace> i see in the node lib that there are some debug() call to display some debug message, how to see them?
14:57 < qballer> It does sound like windows, noticed I didn't say .so
14:58 < RLa> niggler, it keeps popping up annoying "Configure Node.JS core modules" while they are configured
14:58 < niggler> sounds like you need a new IDE RLa 
14:58 < qballer> any ideas ace 
14:58 < niggler> as rush limbaugh would say, an IDE should be a piece of furniture
14:59 < ace> nop
14:59 < qballer> I think no one has done it besides node-ffi which is not exactly what I'm looking for
14:59 < niggler> qballer: with an SO you need to write some code to load it
14:59 < RLa> niggler, webstorm would be fine if there was way to globally disable intelligence shit which keeps producing these messages
15:00 < niggler> todd akin would be fine if only he didn't think there was such a thing as legitimate rape
15:00 < niggler> hitler would be fine if he didn't kill all so many jews
15:00 < niggler> qballer: have you looked into what dnode does?
15:01 < niggler> oh nvm they use pure JS
15:01 < qballer> niggler: amm we are talking about C++ dll (.SO in Linux land) which is exposed by an IDL. I see no reason to write bindings when it's already 'exposed' the thing is -- Do you know of a node package that supports that.
15:02 < qballer> dnode - nope but it sound familiar 
15:02 < qballer> lets see.
15:02 < niggler> qballer: if you define an RPC interface via IDL
15:02 < niggler> then you should be able to use that via something like dnode
15:02 < simong> We're performance testing some of our upload endpoints and one of them streams to S3
15:03 < simong> To upload a single-byte file we're seeing times around 8 seconds
15:03 < niggler> or you can directly take the server segment, build it and write wrapper bindings in node
15:03 < simong> Has anyone had this before?
15:05 < qballer> You mean 41 bytes. 
15:06 < qballer> and some more bytes of the protocol interfacing with the blob store.
15:06 < qballer> 20 IP 20 TCP
15:07 < simong> Sure, the file itself is tiny (only about 1 byte) is what I mean
15:07 < qballer> I know :)
15:07 < qballer> Just nitpicking.
15:07 < niggler> qballer appears to be a niggler
15:07 < simong> ^^
15:07 < qballer> a what ? 
15:07 < niggler> lol 
15:07 < niggler> a person who niggles
15:08 < niggler> http://www.merriam-webster.com/dictionary/niggle
15:08 < qballer> I see
15:08 < qballer> It makes us good programers no ?
15:08 < niggler> good programmers
15:08 < niggler> poor programers though
15:08 < qballer> Why?
15:08 < niggler> (misspelling)
15:10 < qballer> simong. I know S3 access can be slow at times. What does the code do, simply upload a file? Also it takes time between uploading and updating that the file exist.
15:10 < simong> I'm just timing awssum's S3.PutObject
15:10 < simong> So I'm assuming it performs everything that is required to safely store a file
15:10 < simong> This is under load though
15:10 < simong> the initial uploads take about 400ms which is good enough
15:11 < simong> but it goes fairly quickly to around 10 seconds (if I throw 50 new uploads at my endpoints each second)
15:12 < simong> I'm tempted to stream the uploads as they come in, but having messed around with that previously, I'd rather not as it's kind of a pain
15:13 < simong> I wonder if it has more to do with node's event loop than with the connection to S3
15:15 < qballer> You can check that out if put another node instance as a relay. Just for timing the amount of time it takes for the data to leave node. 
15:15 < qballer> I think you have limitation from the kernel buffer
15:15 < simong> If increased my ulimit settings to 9k
15:15 < simong> How would that work qballer?
15:16 < qballer> If you want to see how long it takes for a byte to leave the processes than send it a node script that will relay it to S3
15:17 < zcourts> I'm developing on windows and node changes the background of text to a slight grey, makes output almost unreadable. Is there a setting somewhere to force it not to do that?
15:17 < qballer> Log the file name when you read it. have the other script log the time.
15:18 < simong> I see, I'll give that a try
15:34  * niggler reminds everyone to vote today
15:44 < path[l]> hi, as my application grows, what's the best way for me to handle all the path strings in my require? Should I be continuing to make my require strings relative paths to where my other files are from the source file?
15:51 < MI6> joyent/node: Joshua Erickson master * fb6377e : net: More accurate IP address validation and IPv6 dotted notation.  * Add - http://git.io/kRaaMA
16:01 < qballer> niggler Could you please elaborate on the idea you mentioned earlier 
16:02 < niggler> vote early and vote often?
16:02 < niggler> well its fairly clear -- you go to the polls
16:02 < niggler> and you vote
16:02 < niggler> and then you go again and again
16:02 < qballer> ?
16:02 < niggler> oh wait nvm you were talking about RPC
16:02 < niggler> ok so when you use MIDL you get server and client bindings
16:02 < niggler> you should be able to write, in C++, a wrapper that uses those server bindings
16:02 < qballer> Yea, I don't care who wins as I'm not American. Shcocker right ?
16:03 < niggler> I'm sure there are better examples, but I learned from looking at and tinkering with https://github.com/mscdex/node-ncurses
16:03 < niggler> https://github.com/mscdex/node-ncurses/blob/master/src/binding.cc
16:06 < phrearch> hi
16:06 < phrearch> anyone knows if supervisor works with osx?
16:06 < phrearch> inotify wont work on osx. wondering if there is an alternative
16:09 < cactus> is there a convention for naming source files in node.js?
16:09 < bradleymeck> if anyone is doing something with PCM audio for node knockout please let me know
16:09 < bradleymeck> cactus: nope, just *.js , index.js files are usually referring to all the other modules in their dir or subdirs though, otherwise name it according to purpose/structure
16:10 < cactus> steamclient.js, steam_client.js, SteamClient.js or steam-client.js?
16:11 < path[l]> is there good way to deal with large numbers of files. All my files are referring to each other using relative paths with require
16:11 < bradleymeck> cactus: no real convention, if it has capitals in the require though, i tend to get annoyed since case insensitive filesystems can lead to other stuff becoming wonky
16:11 < path[l]> I was wondering if there is a better way to deal with this
16:11 < cactus> alright
16:12 < cactus> looks like node.js itself uses underscore
16:14 < Draggor> substack: around?
16:15 < niggler> this_is_far_better_thanThat
16:16 < cactus> I find undescores disgusting inside JS or C# code
16:17 < cactus> but camelCase in C++ or Python is even worse
16:17 < niggler> camelCasePissesMeOffToNoEnd
16:17 < niggler> PascalCaseIsSomewhatBetter
16:17 < niggler> but_underscore_is_the_best
16:18 < niggler> BUTOFCOURSECAPSISTERRIBLE
16:18 < niggler> maybeitsbesttojustuselowercaseletters
16:18 < Nasga> hum, when you talk about underscore here, we think about underscore.js :D
16:19 < qballer> noDon
16:19 < qballer> noDontDoThat StuffAren'tReadable thatWay
16:19 < RLa> you can use $ as separator too
16:19 < niggler> qballerPointsOutABrilliantVariableNamingSchemeInvolvingApostrophes
16:19 < qballer> LOL
16:19 < RLa> my$long$variable$name
16:20 < niggler> lets just use unicode variables
16:20 < cactus> how　about　fullwidth　spaces
16:20 < cactus> should work in PHP
16:20 < path[l]> has anyone built any large applications? I'd like some advice on file naming
16:20 < niggler> >> ✓=3;✓*✓
16:20 < purr> niggler: SyntaxError: Unexpected token ILLEGAL
16:20 < niggler> >> ☃=3; ☃* ☃
16:20 < purr> niggler: SyntaxError: Unexpected token ILLEGAL
16:20 < RLa> path[l], use directories then you have less name clashes
16:21 < path[l]> RLa: my directory structure is getting quite deep. Im wondering if it's ok that my requires are all relative paths
16:21 < cactus> btw what other languages support non-ASCII in variable names besides PHP?
16:21 < niggler> >> ಠ_ಠ=3;ಠ_ಠ*2
16:21 < purr> niggler: (number) 6
16:21 < niggler> yay!
16:21 < RLa> path[l], that is probably the only way
16:21 < path[l]> RLa: hmm ok thanks
16:22 < niggler> path[l]: that's fine
16:22 < cactus> http://rosettacode.org/wiki/Unicode_variable_names
16:22 < FunnyLookinHat> Ok - so I've written a simple socket.io chat app just to wrap my mind around things... but it's all just in app.js right now...  what sort of stuff should go into app.js and what should be in a module?  Socket listeners and events ?  Anyone have an example of how they've set this up in something else?
16:23 < cactus> my rule is use multiple files if it's a mess otherwise
16:24 < FunnyLookinHat> cactus, right I want to use multiple files... I just don't know what get's initialized where... i.e. do I pass a require('http').createServer(app) to the module or a require('socket.io').listen(server)
16:24 < FunnyLookinHat> etc. etc.
16:25 < niggler> wow there goes my day: http://mothereff.in/js-variables
16:26 < cactus> normally you'd have a class in each file I guess
16:34 < FunnyLookinHat> Felix needs to finish this http://nodeguide.com/object_oriented_programming.html
16:34 < FunnyLookinHat> lol
16:35 < superjoe> I don't like felix's object oriented code
16:35 < superjoe> it's too object oriented
16:35 < superjoe> ever looked at the source code for formidable?
16:40 < Tobsn> where can i find coffeescripts source files (osx), i kinda cant find them... ;)
16:41 < jrajav> Tobsn: http://coffeescript.org/?
16:42 < Tobsn> no i mean in the system
16:42 < jrajav> Uh..?
16:42 < jrajav> You mean where it's installed?
16:42 < Tobsn> ah i think i found them
16:42 < Tobsn> yep
16:42 < Tobsn> where the source files are on osx
16:43 < Tobsn> usr/local/lib/node_modules ;)
16:43 < FunnyLookinHat> superjoe, no I haven't - will now
16:46 < mnaser> ugh this is so annoying, i can replicate this issue with no fucking idea why it's happening.
16:46 < niggler> that's the first step mnaser 
16:46 < mnaser> my fs.writeFile call always get stuck when it happens for the fourth time.
16:47 < mnaser> consistently, the 4th time it happens, it just blocks there and the callback never gets called and nothing ever goes through after
16:47 < mnaser> WHYY
16:47 < FunnyLookinHat> superjoe, https://github.com/felixge/node-formidable this code is ...  confusing.  index.js requires lib/formidable - but that file doesn't even exist ?
16:47 < niggler> mnaser: you have ode?
16:47 < niggler> *code
16:48 < niggler> not ODEs of course :)
16:48 < mnaser> lol!
16:48 < bradleymeck> FunnyLookinHat: "main": "./lib/index", in the package.json
16:48 < superjoe> FunnyLookinHat, yeah it's pretty confusing
16:48 < mnaser> i'm trying to figure out how i can isolate it out of the big codebase
16:48 < FunnyLookinHat> bradleymeck, ah thx
16:48 < FunnyLookinHat> I didn't know you could define things that way - thanks!
16:48 < superjoe> error prone too
16:48 < mnaser> so maybe someone can look and say "you're an idiot, mnaser" and point me to this problem
16:49 < niggler> mnaser: you are saying g it involves a file -- have you just tried reading the file 4 times?
16:49 < jocafa> a little freestyle dubstep for you guys:   wub wub wub wub-wub wooooow wub
16:49 < niggler> *writing a file
16:49 < mnaser> niggler: i'm going to try to make a test case to replicate it outside the huge codebase
16:49 < mnaser> hopefully, it happens..
16:49 < CoverSlide> jocafa: that's not true dubstep, you must one of them "brostep" fuckers
16:50 < jocafa> snap
16:50  * jocafa = told
16:50 < jocafa> hehe
16:51 < CoverSlide> the game is to be sold, not to be told
16:52 < niggler> CoverSlide: you mean bro'ld
16:53 < jocafa> i lol'd
16:53 < jocafa> "kill −9" just feels so good sometimes
16:54 < richardshaw> killall > kill -9
16:54 < Glenjamin> Hi guys, is there a way to force a shutdown of a socket server within the process?
16:54 < Glenjamin> ie. disconnect all clients and stop listening
16:54 < niggler> killall is like napalm
16:54 < jocafa> Glenjamin:  killall
16:54 < jocafa> :3
16:55 < niggler> although, it should be said that killall -9 is by far the best
16:55 < shanse> killall -9
16:55 < niggler> that's like a thermonuclear weapon
16:55 < Glenjamin> i'm in a test suite, i want a fresh server for each test
16:55 < jocafa> alias bitchslap="kill −9"
16:55 < cactus> if my class exposes a lot of methods (think 20), should I split them up somehow?
16:55 < niggler> bitchslap is definitely SIGTSTP
16:56 < richardshaw> shutdown -h now, then goto the pub, done.
16:57 < jocafa> speaking of silly aliases:  https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/lol/lol.plugin.zsh
16:57 < CoverSlide> alias bitch, = sudo
16:57 < CoverSlide> bitch, bitchslap 103434
16:58 < jocafa> haha
16:59 < cactus> are there any examples of adding to the same prototype from multiple files?
16:59 < CoverSlide> I think express 2.x does that
17:00 < CoverSlide> It adds to the HTTP{Server,Request,Response} prototypes
17:00 < CoverSlide> iirc
17:00 < niggler> cactus: just do it yourself
17:00 < niggler> you can try it with String.prototype
17:01 < cactus> I know how to add to a prototype
17:02 < niggler> and you can do that from multiple files
17:02 < CoverSlide> module.exports = MyConstructor; var MyConstructor = require('mymodule'); MyConstructor.prototype.whatever = ....
17:02 < CoverSlide> first part is one file, last 2 parts are in another file
17:02 < CoverSlide> eazy breezy
17:03 < jocafa> beautiful, cover girl
17:04 < niggler> that's just fucked up 
17:04 < cactus> oh, additions to a prototype are global
17:04 < cactus> that makes things easier
17:04 < CoverSlide> you only have to do that once though. MyConstructor.prototype stays modified, so any call to require('mymodule') will be whatever's been changed
17:04 < mnaser> niggler: so i isolated the problematic code and it runs fine
17:04 < mnaser> :'(
17:04 < niggler> then add back the rest and see
17:04 < niggler> console.log is your friend
17:04 < niggler> afaict it doesn't bite
17:05 < mnaser> i have way too much console.log now and i guess i'll add even more
17:05 < mnaser> so STRANGE it's almost the same code copied over
17:05 < CoverSlide> mnaser: I've had issues like that. it may be possible it has nothing to do with fs.writeFile at all
17:05 < CoverSlide> maybe the 4th fs.writeFile doesn't go through at all
17:05 < mnaser> definitely nothing to do with it because now that i've taken out all the code that does the write on it's own (without the rest of the logic), works fine
17:06 < niggler> mnaser: one day i had a problem that was resolved merely by making a copy of the source lol
17:06 < mnaser> CoverSlide: it doesn't… so the callbacks never happen and I'm stuck, now i've isolated stuff out and it works so
17:06 < CoverSlide> it gets confusing sometimes with async + node
17:06  * jocafa makes out with vim
17:06 < niggler> jocafa: you should be fucking vim
17:06 < mnaser> i think i'll just slowly rewrite it
17:06 < niggler> passionately
17:06 < mnaser> until i either fuck it up again and know where or it'll just work
17:06 < mnaser> -_-
17:06 < purr> mnaser: ಠ_ಠ is an IRC client/IRC client framework.
17:06 < CoverSlide> More like:
17:06 < CoverSlide> < niggler> fuck vim
17:07 < niggler> vim is a gift from the gods
17:07 < leonardo> ^
17:07 < jocafa> wife'd get mad
17:07 < niggler> up there with .3 mm pencils
17:08 < niggler> fuck emacs
17:09 < CoverSlide> yeah one time I had my code branch out into 2 possible paths that were delegated by a switch statement, my problem was i didn't break the first case, so both got called, and so the async call finished before it was supposed to. it took me 2 days to find it
17:09 < CoverSlide> fuck nano
17:09 < mnaser> yeah i've been on this since last night
17:09 < CoverSlide> fuck textmate
17:09 < niggler> a linter usually picks that up CoverSlide 
17:09 < CoverSlide> fuck geany
17:09 < niggler> fuck textmate fuck nano
17:09 < CoverSlide> fuck gedit
17:10 < niggler> <3 ed, fuck gedit fuck submile
17:10 < jocafa> i edit my code directly on the hard drive platters using a tiny magnet
17:10 < jocafa> ¬¬
17:10 < niggler> actually CoverSlide jshint does pick it up, and it allows you to make a comment "fall-through" that instructs the linter not to warn you about it
17:11 < CoverSlide> yeah unfortunately, i like switch/case fallthrough, and use it all the time
17:11 < CoverSlide> so this one time it bit me in the ass, and at that point in my career i didn't use linters
17:11 < niggler> CoverSlide: same here, but the easiest way to handle it is to get in the habit of commenting where you want the cascade to happen
17:12 < niggler> it also stops others from asking why you didn't put a break somewhere
17:12 < mnaser> i feel like i've probably missed something somewhere in the chains of callbacks
17:12 < mnaser> async.series inside another async.series with callbacks everywhere
17:12 < CoverSlide> yikes, that sounds like a true horror story
17:12 < CoverSlide> i'm gonna sleep with the night light on for a while now
17:13 < jocafa> jshint also complains about:    foo || (omg = "wtf");
17:13 < tnorris> does anyone think the addon api will ever abstract all the libraries into a single cohesive api?
17:13 < mnaser> not sure if sarcasm
17:13 < mnaser> or i'm doing something wrong
17:13 < mnaser> if i am please enlighten
17:13 < niggler> jocafa: there's stuff like "boss mode"
17:13 < jocafa> current line of code i'm staring at:   'pointerTarget' in this || (this.pointerTarget = target);
17:14 < CoverSlide> http://rlv.zcache.com/like_a_boss_sticker-p217637912269514508envb3_400.jpg
17:15 < jocafa> i heart the default operator
17:16 < CoverSlide> mnaser: nothing wrong with it, just nested async stuff gets really confusing really easily, and you can miss calling the return callback very easily. That's been the cause of about 95% of my hair pulling with node
17:16 < mnaser> heh, but when it works it ends up cleaner and easier to process in my mind than gazillion nested callbacks
17:16 < mnaser> even if they're named
17:17 < jocafa> i prefer reactive programming instead of callbacks
17:17 < jocafa> </opinion>
17:18 < CoverSlide> don't we all?
17:18 < jocafa> still looking for a super sexy way to do the same in C
17:18 < CoverSlide> but callbacks are the secret sauce in node
17:20 < CoverSlide> that's what makes it http://www.changerus.com/images/SPIDER-WEB.jpg + http://www.shiftingstates.com/wp-content/uploads/2011/12/scale.png
17:20 < jocafa> CoverSlide:  i think someone spiked both of our breakfasts.
17:21 < joehoyle> CoverSlide: nide ;)
17:21 < joehoyle> nice*
17:21 < CoverSlide> i was hoping to find one image with both of them together, but failed
17:26 < CoverSlide> mein kopf ist ein brutaler
17:26 < niggler> mein kampf
17:26 < niggler> anyone familiar with mustache?
17:27 < CoverSlide> only foo manchoos
17:27 < CoverSlide> oh fuck, awesome library name
17:27  * jocafa creates a repo before CoverSlide
17:27 < niggler> is there a script to take a mustache template and tell you the expected hash?
17:27 < jocafa> no idea
17:28 < mnaser> oh yay guys
17:28 < mnaser> guess what i was able to do
17:28 < mnaser> kernel panic
17:28 < mnaser> woo
17:28 < CoverSlide> wtg!
17:30 < jocafa> i need to download more ramz
17:30 < jocafa> freakin' windows VM
17:30 < mnaser> i had this bug yesterday, i got around it by making some changes and yeah, guess it's either every 4th write or a kernel panic
17:30 < CoverSlide> seed when you're done, k?
17:30 < jocafa> will do
17:31 < CoverSlide> wow, that's insane
17:31 < CoverSlide> what OS?
17:31 < CoverSlide> maybe it's your file system?
17:31 < mnaser> CoverSlide: centos 6 fully updated
17:32 < jocafa> windows, your text rendering is bad and you should feel bad
17:32 < mnaser> basically what I'm doing is making an eventfd and listening for events
17:32 < mnaser> specifically, cgroups running out of memory, when I'm getting the message, i'm just closing the stream and the fd and restarting the stuff running in the cgroup
17:33 < sayd> morning, anyone here have a clue what this would be? https://github.com/jshint/jshint/issues/733
17:33 < mnaser> i get a notification both when it's out of memory OR the cgroup is being deleted
17:33  * CoverSlide always turns off font smoothing
17:36 < jetNull> join #elasticsearch
17:37 < pseudo> hi all
17:37 < pseudo> i have a question please
17:38 < jocafa> ask away
17:38 < pseudo> okay, flatiron or express
17:38 < pseudo> i should choose
17:38 < pseudo> which one?
17:38 < CoverSlide> pseudo: try them both
17:39 < CoverSlide> i think there's lots more people using express so you might start with that
17:39 < pseudo> i dont care about this
17:40 < pseudo> coverSlide: just tell me the result of ur experiences
17:40 < tnorris> anyone on that understands the deep workings of buffers?
17:41 < substack> Draggor: ahoy
17:41 < pseudo> heyyy somebody can help me here?
17:41 < HardFu> hi, I'm having a strange problem
17:42 < HardFu> my node.js is listening on VMware fusion host
17:42 < HardFu> and I can't access it from guest OS
17:42 < pseudo> i should use express or flatiron? please
17:42 < CoverSlide> pseudo: I used sinatra before express, so it was an easy transition
17:42 < HardFu> but, if I listen with some Rails app on the same port, I can access it fine
17:42 < CoverSlide> express is more similar to older frameworks from other languages
17:43 < pseudo> and flatiron is similar to?
17:44 < CoverSlide> flatiron is kind of its own thing, based on its own ideas. I think it tries to be a better fit with node instead of trying to be like other frameworks
17:45 < miauwmiauw> can someone explain me why this works in js? http://pastebin.com/6UzGN3fC ?
17:46 < miauwmiauw> i.e. how can it assign WTF to OK while it doesn't exist yet at that moment?
17:46 < CoverSlide> miauwmiauw: google hoisting
17:46 < pseudo> CoverSlide: and wat about maturity?
17:47 < pseudo> and stability
17:47 < CoverSlide> pseudo: I'd say they are both very mature. express is made by one buy, but it's older. flatiron is made by lots of guys
17:47 < CoverSlide> stability, i would say they're about as stable as anything else you'll find in node
17:47 < fsfsfs> miauwmiauw, it does exist, look up "hoisting"
17:47 < miauwmiauw> omg javascript u r hurting my brain
17:48 < fsfsfs> related to: javascript function statement vs. function expression
17:48 < miauwmiauw> not because its difficult but because its counter intuitive
17:48 < jocafa> pretend there's an analysis/compilation step before execution :)
17:49 < mnaser> i'm recompiling the kernel because i feel like there might be a kernel problem that's breaking my code
17:49 < mnaser> your js problems are nothing :'(
17:49 < fsfsfs> jocafa :)
17:49 < pseudo> CoverSlide: u use which actually?
17:49 < miauwmiauw> jocafa: Is there a benefit that this exists? 
17:49 < substack> pseudo: you should figure out what you need first and then hunt for tiny libraries that do what you need
17:50 < fsfsfs> miauwmiauw, "Javascript: The Good Parts" is a good read.
17:50 < CoverSlide> pseudo: personally, I use express
17:50 < fsfsfs> miauwmiauw, yes of course. look up hoisting.
17:50 < substack> relying on a framework to do all that for you makes you code tightly coupled to that framework
17:51 < CoverSlide> I'd say start by building with lib/http
17:51 < substack> and if the framework uses scaffolding, it's even worse since your code becomes very tightly coupled to a particular version of the framework in the code you didn't write but modified
17:51 < CoverSlide> and then see what you need from there
17:51 < tjholowaychuk> i hear node is a framework
17:51 < tjholowaychuk> that you're coupled to
17:51 < CoverSlide> computers are a framework
17:51 < CoverSlide> that you're coupled to
17:52 < substack> ideally node should have been split out into just the core tcp and fs bindings
17:52 < CoverSlide> i want to write my http server with a vacuum cleaner
17:52 < substack> and then everything else could happen in userland
17:52 < tjholowaychuk> yeah +1 to that http is getting super stale
17:52 < CoverSlide> yeah, http / crypto are things that are usually handled by external libraries
17:52 < CoverSlide> non-std
17:53 < CoverSlide> it's a bit bizarre
17:53 < substack> and cluster is in core which is such a leaky abstraction in the first place
17:53 < tjholowaychuk> plus http is an odd blend of higher-level concepts
17:53 < tjholowaychuk> half-baked
17:53 < substack> but also way too high-level to be in core
17:53 < pseudo> i think substack is just right on scaffolding
17:54 < superjoe> I agree cluster is pretty leaky
17:54 < substack> I wonder about masking core modules through node_modules/
17:54 < substack> well we can always just use a different name
17:55 < CoverSlide> I think it's doable
17:55 < jocafa> i really, really hate having to dumb down all my code for IE :(
17:55 < CoverSlide> npm install http
17:55 < fsfsfs> tjholowaychuk, which higher-level concepts would that be? is this going to be a ISO/OSI vs. tcp/ip debate? of course ppl do much to much over http. But who can blame them, it's pretty much the only thing that works after all these yrs.
17:55 < CoverSlide> but who gets the blessed http spot?
17:55 < pseudo> thus due to the "decomposed" and "isomorphic" things i just seen in the docs, i will choose flatiron :)
17:56 < fsfsfs> tjholowaychuk, ah sorry, you're speaking about the node package, not the protocol
17:56 < fsfsfs> duh
17:56 < CoverSlide> also, you lose the benefit of ryah's http parser, although parsely is pretty nice
17:56 < tjholowaychuk> fsfsfs: yeah haha
17:56 < fsfsfs> I'm out.
17:56 < substack> CoverSlide: parsely isn't written for raw speed though
17:56 < substack> felixge might take a stab at a fast pure js parser
17:57 < CoverSlide> I've tried using ryah's parser for my proxify library, it's really shitty to work with
17:57 < substack> c code is really terrible full stop
17:57 < CoverSlide> i remember first versions of bouncy used it too
17:57 < jocafa> but… i like C… :(
17:57 < tjholowaychuk>  <3 c
17:57 < tjholowaychuk> nice and flat
17:57 < substack> c is a terrible library to write reusable pieces in
17:57 < substack> needs a module system
17:57 < tjholowaychuk> yeah that part
17:57 < tjholowaychuk> is brutal
17:57 < tjholowaychuk> unix is not very unixy
17:58 < substack> perhaps implemented as a preprocessor
17:58 < Epeli> Is there a markdown to json conventer foir node.js?
17:58 < Epeli> for*
17:58 < jocafa> there needs to be a(n) npm/bundler/etc system for c libs
17:59 < tjholowaychuk> jocafa cpm :p haha, though it doesnt really work well
17:59 < tjholowaychuk> most "real" programs out there are massive
17:59 < tjholowaychuk> which also sucks
18:00 < CoverSlide> well Java's got it figured out with Maven2
18:00 < jocafa> you shut your face. java doesn't have anything figured out. </rage>
18:00 < jocafa> :)
18:00 < CoverSlide> and Java programs are just as massive
18:01 < jocafa> and have no notion of "unsigned byte" >.<
18:01 < CoverSlide> I'm not saying it's anywhere near as good as npm, but maven is ubiquitous with java now.
18:01 < CoverSlide> just like npm
18:03 < abrkn> what alternative to heroku has websockets? this heroku xhr polling is driving me insane
18:03 < CoverSlide> check engine yard, dotcloud, appfog
18:03 < CoverSlide> i know for a fact nodejitsu supports websockets
18:03 < blakmatrix_> appfog has websockets now?
18:03 < CoverSlide> i don't know
18:04 < CoverSlide> i said to check
18:04 < jocafa> i don't even know if my webserver is running right now heh
18:04 < jocafa> yeah, it's up. yay.
18:06 < jocafa> oh arch linux, you're so lightweight.
18:06 < CoverSlide> although beware stability issues
18:08 < CoverSlide> honestly though, issues haven't been that frequent. i love arch's lightweightedness, i even compared to a stripped-down debian or ubuntu 'minimal' install, arch smokes them both
18:09 < MerlinDMC> there was also a server branch that wanted to focus on stability ... but that was some time ago
18:10 < CoverSlide> just remember to read the frontpage every time an update fails or you can be really fucked
18:10 < CoverSlide> MerlinDMC: for which?
18:10 < jocafa> i'm very much not a sysadmin person
18:10 < MerlinDMC> CoverSlide, Arch http://www.archserver.org
18:12 < CoverSlide> one thing that bugs me about arch is if you need a specific version, there's no downgrading through pacman unless you have the version you want cached on your machine. otherwise you can only hope to use ABS to build the version you need, or try to find a mirror that hasn't upgraded in a while
18:12 < jocafa> solution: don't touch ANYTHING once it's up and running.  ¬¬
18:13  * jocafa is a font of good advice and sarcasm
18:18 < gavri> what's the equivalent of ruby's capistrano for javascript?
18:18 < CoverSlide> not sure if there is one .. 
18:18 < CoverSlide> capistrano is a git-based deployment tool right?
18:19 < cellvia> fleet by substack?
18:19 < CoverSlide> apparently you can use capistrano with node
18:20 < CoverSlide> hmm /me needs to look at fleet
18:20 < gavri> CoverSlide: I just don't want the team that maintains the code I'm writing to also have to know ruby :-/
18:21 < krebipeti> if we use webmatrix 2 to develop nodejs apps, then hit run button in the up left corner of the IDE, it will start the website in such random PORT. it is because we use process.env.PORT in the listen() method.
18:21 < krebipeti> my question is, can we custom that random port? to 8888 maybe..?
18:21 < CoverSlide> krebipeti: that's why you use a default port. like process.env.PORT || 8080
18:22 < CoverSlide> krebipeti: it's a simple problem with 5 kajillion ways to solve
18:22 < krebipeti> CoverSlide : yes, i've tried it. but i should manually type the address in browser
18:22 < othiym23> gavri: use Fabric instead -- Node sorta kinda includes Python?
18:22 < CoverSlide> usually i use a config.json file, which falls back to and env variable, which falls back to a default port, usually 80
18:23 < othiym23> for builds, at least
18:23 < chovy> howdy
18:23 < CoverSlide> krebipeti: ... what does that have to do with anything?
18:23 < othiym23> gavri: less flippantly, fabric is less tied to a specific framework than capistrano, and is easier to work with for Node
18:24 < CoverSlide> you type what the default port is into your browser
18:24 < othiym23> worked on a continuous deployment system based on Fabric (for a large-scale Node deployment) and found it pretty pleasant
18:24 < Draggor> substack: Nevermind, I was an idiot
18:24 < CoverSlide> yeah working in node doesn't mean 100% of your tools need to be in node
18:24 < CoverSlide> i mean lots of people use monit with node, i personally find that more stable than anything running on node itself
18:25 < gavri> why is it that I don't come across fabric or capistrano when I google and find blog posts about node.js deployment?
18:25 < othiym23> gavri: because everybody's doing a terrible job of documenting their experiences
18:25 < gavri> am I looking for a solution to a problem I don't have?
18:25 < gavri> how do I get a particular branch deployed to a particular machine, for example?
18:26 < othiym23> no, there was a talk at Fluent in May about continuous deployment with Node, and it was all about using upstart and fabric / capistrano and Puppet (which I've also used)
18:27 < othiym23> gavri: you'd need to write a specific fabric task -- parameterizing tasks isn't super easy, but it also isn't super hard
18:27 < gavri> I'm used to capistrano. do I just use that then? or is fabric simply better?
18:28 < othiym23> one of my colleagues rewrote the original CD system I wrote, which was in capistrano, which was pretty unwieldy and forced a lot of the work on puppet, in fabric and a command-line tool he wrote in Python, and that was a muuuuch better solution than my horrible puppet / capistrano hybrid
18:28 < krebipeti> CoverSlide : may be i can explain like, if i use app.listen(process.env.PORT || 8080), then hit run on the ide...the browser popup with URL localhost:65313 <-- such random port.  then i want to specify my oen port. i change my code into app.listen(8080). hit run on the ide still poped up with url localhost:65313. i suppose it should be localhost:8080. but it is work if i type it manually in the browser. i use web matrix 2 as the 
18:28 < othiym23> in my experience, capistrano gets hard when you try to get it to do non-Railsy things
18:28 < othiym23> especially if you're trying to manage more than one kind of server
18:29 < CoverSlide> krebipeti: you probably need to set something in webmatrix then
18:29 < othiym23> and if you have lots of branches / services to restart
18:29 < CoverSlide> krebipeti: honestly, though, you're complaining about typing in 4 characters?
18:29 < othiym23> you should at least take a look at fleet, but my experience was that fabric tries to be more declarative, and with Python's decorators and a little elbow grease you'll get much better logging than either cap or fleet provide
18:30 < othiym23> and the logs are super important when things go weird
18:30 < krebipeti> CoverSlide : hahaha...just wonder
18:30 < CoverSlide> krebipeti: 99% of the people using node right now don't have an environment that just launches their browser for them.
18:31 < krebipeti> CoverSlide : yes, yesterday i'm still using the console to run it, but as i tried this IDE...i got really excited. 
18:31 < krebipeti> CoverSlide : :D
18:33 < gavri> fleet looks like a deployment tool written in JS. not mature enough?
18:33 < othiym23> it's substack code, so it's probably mature enough to use in anger but is also fairly minimalist
18:34 < gavri> in anger?
18:34 < othiym23> "in production"
18:34 < othiym23> it's worth taking a look at seaport, too, which is substack's Node version of Zookeeper
18:34 < CoverSlide> substack code always is good for use in anger
18:35 < CoverSlide> especially chainsaw
18:35  * CoverSlide uses chainsaw in anger all the time
18:35 < krebipeti> CoverSlide : anyway...one more question....how should i know what port is process.env.PORT. because when i log it, it display a pipe, not a port. but when accessed via browser, we put a port in the URL. that's confuse me. do you know what it is?
18:35 < gavri> othiym23: thanks again. this has all been very helpful
18:35 < CoverSlide> krebipeti: it's probably webmatrix's default port
18:36 < othiym23> sure no problem, good luck
18:36 < CoverSlide> and webmatrix if forwarding to the pipe
18:36 < othiym23> this stuff is tricky
18:36 < miauwmiauw> does web matrix has debugging ?
18:36 < miauwmiauw> i.e. breakpoints and such in the ide?
18:37 < cellvia> chainsaw is the scariest node module on npm
18:39 < pseudo> duhhhhhhhhhhh im chocked
18:40 < othiym23> cellvia: pretty sure that throne is occupied by hoarders
18:40 < othiym23> I don't know of anyone who's successfully installed hoarders
18:41 < othiym23> maybe jesusabdullah has
18:41 < cellvia> you mean installed throne?
18:42 < cellvia> chainsaw scares me because of the image https://github.com/substack/node-chainsaw at the top lol
18:42 < CoverSlide> throne?
18:42 < CoverSlide> hoarders is awesome. i recommend to everyone
18:42 < CoverSlide> for whatever you want to do
18:43 < othiym23> if I wanted to run ruby, I'd just run ruby
18:43 < cellvia> oh im sorry i misunderstood you
18:46 < merpnderp> This is more of a software design question, but how much of a model object do you need if you are using mysql and accessing it with queries? For instance for a user object, would you have a login/new user controller that handled password encryption/decryption and user credential comparisons, or create a user model that the login controller calls?
18:46 < merpnderp> With Mongoose it makes sense to put all that logic in the model.
18:48 < cellvia> have you looked at passport
18:50 < krebipeti> CoverSlide : i think i get it now...IIS and the node apps that i create comunicate using the pipe. so that's why our apps is listening on it. And from browser we access specific port in IIS that already bound with our node apps via the pipe.
18:50 < merpnderp> cellvia: I didn't mean authentication in particular, just as an example of how code should be laid out. With Mongoose I tend to hang a lot of business logic in the actual model module. But I'm thinking that should probably change with mysql as most of that logic probably should be in a controller/router.
18:51 < krebipeti> CoverSlide : actually the webmatrix 2 use IIS Express 7.5...make sense...
18:52 < Cheery> I guess I'm about done soon.
18:53 < Cheery> I figured out how to get the .getContext work for many as possible
18:53 < Cheery> well. it could be improved still
18:54 < Cheery> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/7jZMSY9PAVA
18:54 < othiym23> Cheery: do the other renderers need to be dependencies?
18:55 < othiym23> it seems like it would make more sense to try to require them and raise an error if they're not installed
18:55 < othiym23> that decreases the coupling
18:55 < bradleymeck> TooTallNate: any easy way to xfer node-speaker into 32bit float array?
18:56 < Cheery> othiym23: I fear they need to be dependencies for the videocontext library, but that might not be required in extreme
18:56 < TooTallNate> bradleymeck: https://github.com/TooTallNate/node-speaker/blob/master/src/binding.cc#L55-56
18:56 < TooTallNate> :p
18:56 < TooTallNate> it should be pretty easy to add
18:56 < Cheery> othiym23: sure the programs just ask for '2d' or 'webgl', just like they do in web
18:57 < othiym23> Cheery: it's not enough to have the library throw a message saying that you need to install package <blah> if you want to use that context for yr app?
18:57 < TooTallNate> bradleymeck: api-wise, it should just be "float: true, bitDepth: 32" in the options, but that doesn't work yet
18:58 < Cheery> othiym23: it doesn't say such thing, because there's many choices for '2d' or 'webgl' in the end.
18:58 < othiym23> Cheery: OK, so it could return a list ;)
18:58 < Cheery> can't know the list. :)
18:59 < Cheery> because I think it's really system dependent on how to implement those
19:00 < othiym23> throw a link to a web page with a list of providers?
19:01 < othiym23> I see your difficulty, but that's going to be a bigass list of dependencies and make it harder to build / install
19:01 < othiym23> which seems especially relevant for deploying on something like the Raspberry Pi
19:06 < CoverSlide> i been thinking about using raspi's for a production system
19:06 < CoverSlide> maybe have a nice server farm of 100 for the price of one server
19:07 < CoverSlide> it would be killer
19:07 < TooTallNate> bradleymeck: what's your audio source btw (just out of curiosity)
19:09 < bradleymeck> TooTallNate: the browser audio api
19:10 < Industrial> Say I want to use EventEmitters to separate some code into parts that communicate with eachother through messaging (trying to learn this); I started out with a Website class which wraps an Express 3.0 server right now. I also made a Logger emitter and now I'd like to have a stab at Authentication and Authorization of requests. The thing is though, that I don't understand how the messages should move back
19:10 < Industrial> into a response. Say I want to send a message to the Auth system for certain URL's, how do I move a message back so that it eventually becomes a response? it would need the response object from Express from the Website instance, so should I pass the whole website or response object along with the request to the authentication system?
19:10 < TooTallNate> bradleymeck: so like a browser mic?
19:10 < bradleymeck> TooTallNate: yes
19:10 < Industrial> sorry, I went all enthousiastic on that one.
19:10 < Industrial> xD
19:10 < TooTallNate> bradleymeck: cool! :)
19:18 < CoverSlide> holy shit, nestle flipz in the office
19:18 < CoverSlide> these are like my kryptonite
19:25 < phrearch_> hi
19:25 < CoverSlide> hello
19:26 < phrearch_> i implemented a middleware pattern someone helped me with before, but i got some weird results where the result of one function is injected  in another function
19:27 < phrearch_> not really sure where to start looking where things get messed up
19:27 < phrearch_> shit hits the fan at line 97: http://paste.kde.org/598340/
19:27 < phrearch_> maybe someone can take a look. hopefully its something small, but im lost :*
19:30 < imwill> hi there
19:31 < niggler> if node can run a parrot AR drone why can't it run a diebold voting machine?
19:31 < niggler> http://www.youtube.com/watch?feature=player_embedded&v=QdpGd74DrBM
19:33 < phrearch_> somehow when the result of one function is returned earlier than another one, the result closure gets mixed up somehow
19:33 < bradleymeck> niggler: because government scale > web scale?
19:33 < chovy> are there any tools for resizing, cropping images in a node app?
19:34 < niggler> haha bradleymeck i guess it blurs the line between bugs and corruption
19:34 < mscdex> nkuttler: how dare you vote .net!
19:35 < chovy> niggler: crazy, that shit is still going on.
19:35 < niggler> fuck .NET
19:35 < niggler> chovy: its the american way
19:35 < niggler> vote early and vote often
19:36 < imwill> Does anyone have experience in connecting a node.js application to a Java backend?
19:36 < niggler> remember a certain president was elected president thanks to his brother
19:36 < larzconwell> chovy,  You can try this, not sure how well it'll work though not being native. https://github.com/rsms/node-imagemagick
19:38 < chovy> larzconwell: thanks
19:38 < larzconwell> Welcome
19:40 < Xeon06_> Hey guys
19:40 < Xeon06_> Should I be able to do this?
19:40 < Xeon06_> npm install git@github.com:Xeon06/globalize.git
19:41 < Xeon06_> I get a "No compatible version found" erro
19:45 < larzconwell> Xeon06_,  You can do npm install github.com/<user>/<repo>/tarball/<branch>
19:45 < CoverSlide> Xeon06_: I think if you give it an @ symbol, it thinks it's a npm module name instead of a git repo
19:45 < CoverSlide> the @ specifies a version number
19:46 < Xeon06_> Ahhh
19:46 < Xeon06_> Thanks
19:46 < Xeon06_> Oh I see, I can get it from Git, its the "Git Read Only Link"
19:47 < bradleymeck> Xeon06_: use git+ssh:// syntax
19:48 < Xeon06_> bradleymeck: As in, ssh+git://github.com/Xeon06/globalize.git ?
19:49 < CoverSlide> Xeon06_: you could do git://github.com/Xeon06/globalize
19:49 < CoverSlide> wfm
19:49 < Xeon06_> Yeah me too, I'll stick to that
19:50 < Xeon06_> I very rarely use this type of links, I usually take it from the npm registry anyways
19:50 < Xeon06_> This is temporary
19:50 < Xeon06_> Thanks for the help
19:50 < hadees> are there any good books for node.js or are the tutorials better?
19:52 < Xeon06_> hadees: My two cents: this is a very rapidly evolving subject, and any book will become deprecated very fast
19:52 < CoverSlide> hadees: have you looked at nodebeginner?
19:52 < gavri> linkedin apparently uses node.js for all their web and phone apps with mostly shared code. does anyone know how they manage this? details on their blog posts are sketchy. for example, they say that they have an embedded webserver on the client side for the phone apps, but I don't know how it's used and how it relates to the remote web server
19:52 < aandy> there are books on javascript, but tutorials are best for node
19:53 < CoverSlide> well their main site is using tomcat
19:54 < imwill> hadees: I just got "Smashing Node.js: JavaScript Everywhere"
19:54 < CoverSlide> maybe it's all services
19:54 < imwill> I agree on Xeon06_ but for someone who loves to have a real book I can recommend this book
19:56 < denom> is there a way to build and host my own set of chrome dev tools e.g. https://github.com/c4milo/node-webkit-agent#nodejs-v08x ?
19:58 < bradleymeck> gavri, as long as your library just uses Javascript and is not node specific it should just work
19:58 < bradleymeck> just load it in both and it should act the same
19:59 < gavri> bradleymeck: I'mn wondering what the embedded server is for. I think they also have offline functionality and I was wondering how that fits into the whole picture
20:02 < phrearch_> when providing the same callback to multiple functions, how could i distinguish between the function that calls the callback?
20:02 < phrearch_> i mean, if one function is earlier to return, i sometimes get the result of the other function as result of the other
20:04 < phrearch_> http://paste.kde.org/598388/
20:06 < phrearch_> something like this happens in order: http://paste.kde.org/598406/
20:34 < Cheery> I'd need to come up with a good name for videocontext library
20:35 < Cheery> node-video is rather too confusing
20:36 < jocafa> nodeo
20:36 < Cheery> jocafa: what's meaning of that?
20:36 < jocafa> node + video
20:37 < Cheery> well I could go spartan unix style
20:37 < Cheery> then there would be libo.so
20:40 < jocafa> what's it for exactly?
20:41 < Cheery> it's a library that opens videocontext for you. bit like EGL or GLX
20:41 < Cheery> but supposed to replace them
20:41 < jocafa> ah
20:41 < Cheery> it'll come with extra library that lets you open display and pass display layer handles around
20:42 < Cheery> and fully compliant systems will implement both of these features.
20:43 < niggler> why isn't jsperf.com run from a node server?
20:43 < jocafa> reel-something
20:43 < jocafa> heh
20:44 < jocafa> projectionist
20:44 < Cheery> if I want to go with a name that means nothing.. I guess I could pick 'ooh'
20:45 < FunnyLookinHat> why use "ooh" when you could use "oop".
20:45 < FunnyLookinHat> oop.. oop oop.
20:45 < niggler> oo poop
20:45 < niggler> = object oriented poop
20:45 < jocafa> "flip flip flip flip flip!" — Swedish Chef
20:46 < Cheery> or libwhee.so
20:46 < Cheery> could go as well.
20:46 < jocafa> vidya
20:46 < jocafa> must be said in Hank Hill's voice
20:47 < niggler> is vcontext taken?
20:47 < niggler> fuck cutesy, just call it what it is
20:47 < niggler> or go with bid en's "
20:47 < niggler> 'big fucking deal'
20:47 < jocafa> vctx
20:48 < niggler> vcxt
20:48 < niggler> iirc that's what microsoft uses as the 3-letter prefix for context
20:48 < Cheery> gah
20:48 < niggler> *they use cxt
20:48 < niggler> so vcxt is fine
20:48 < Cheery> they always mess up things
20:48 < Cheery> lets call it vctx :)
20:48 < jocafa> i've always used "ctx" when doing stuff with canvas
20:48 < niggler> cxt > ctx
20:49 < jocafa> sext
20:49 < jocafa> ¬¬
20:49 < niggler> actually
20:49 < niggler> i have a better answer for you
20:49 < Cheery> libvc.so might also go
20:49 < niggler> doesn't v8 use context?
20:50 < Cheery> yes
20:50 < niggler> holy shit they use both
20:50 < jocafa> are you going to buy a .so domain for it?
20:51 < Cheery> nah. just make a c-library of the same name
20:51 < jocafa> libmi.so
20:51 < Cheery> mi?
20:51 < niggler> just go with ctx -- its not microsoft :)
20:51 < jocafa> miso
20:52 < Cheery> node-vctx is probably best choice
20:52 < niggler> jocafa: you should be recommending libol.so
20:52 < niggler> then when you link you'd write -lol
20:52 < jocafa> haha
20:52 < Cheery> :D
20:52 < Cheery> but there's already -lol
20:52 < Cheery> ^^
20:52 < niggler> what is -lol?
20:53 < jocafa> see also: libuls, libawl...
20:53 < niggler> gnu took it to the extreme with libiberty
20:53 < jocafa> true
20:54 < niggler> -liborax
20:54 < niggler> err liborax.so --> -lorax
20:54 < jocafa> hehe
20:55 < jocafa> libutefisk
20:55 < Cheery> libibido.so
20:55 < jocafa> haha
20:55 < niggler> lol Cheery i think we have a winner
20:55 < jocafa> mhmm
20:56 < niggler> libame, libegit, libiquor
20:56 < niggler> yada yada yada
20:57 < Cheery> vctx is probably good and short. vctxd for display functions.
20:58 < Cheery> could also tease and go with libx.so ^^
20:59 < niggler> I'm sure that's taken
20:59 < niggler> like libm I'm sure there's some fairly standard thing
20:59 < jocafa> libThunderCougarFalconBird
21:00 < jocafa> its code is inlaid with the beaks of a thousand eagles
21:01 < TehShrike1> Hey, can anyone here with a Raspberry Pi speak to the difference between the soft-float image and the default Raspbian one, as far as running node.js? http://www.raspberrypi.org/downloads
21:01 < TehShrike1> Or either of the other images, I suppose
21:01 < Cheery> software implementation of floating points, hardware implementation of same thing
21:01 < jocafa> soft-float = slow floating point performance
21:03 < jocafa> i'm running ArchLinux|ARM on mine
21:03 < jocafa> http://archlinuxarm.org/platforms/armv6/raspberry-pi
21:03 < TooTallNate> TehShrike1: you most likely want the regular version
21:04 < TehShrike|Work> Cool, thanks
21:14 < larryapplegate> Has anyone been running the examples in the book "Smashing Node.js"?
21:19 < superjoe> larryapplegate, no, but I noticed multiple errors when I read it
21:20 < larryapplegate> yes, i figured out some early error, but am now trying to implement the MongoDB example, which is quite complex
21:22 < larryapplegate> I think everything is installed correctly, and I get the browser page up, but there is no form data below the head
21:24 < larryapplegate> I am unsure how to debug Jade, I'm a newbie of course
21:39 < niggler> fuck jade
21:39 < Pilate> jade is the shit
21:39 < niggler> s/the shit/shit/
21:39 < superjoe> fuck jade
21:39 < vicapow> niggler: yeah. i agree with Pilate. Jade is the shit
21:40 < vicapow> if you don't like it, you don't get it ;P
21:40 < niggler> its like saying rape is the shit
21:40 < TooTallNate> niggler: what don't you like about it?
21:40 < superjoe> what is there to get?
21:40 < larryapplegate> wow, that's intense
21:40 < Domenic> Yeah curious what people don't like about Jade. I like it.
21:40 < niggler> I'm glad that todd akin elevated discourse in america
21:41 < larryapplegate> i just want to run the example
21:41 < vicapow> larryapplegate: then it sounds like maybe you have an express issue
21:41 < jocafa> Did you see that ludicrous display last night?
21:41 < niggler> so take the example given on the page
21:41 < superjoe> larryapplegate, is there an error message somewhere ?
21:41 < larryapplegate> no
21:42 < vicapow> larryapplegate: post your code to gist
21:42 < niggler> they've saved open and close tags from html but lost so much more as a result
21:42 < larryapplegate> ok, i have a violin lesson now, but will do that when i return
21:42 < TooTallNate> niggler: like?
21:43 < larryapplegate> what should i use instead, or just CSS?
21:43 < vicapow> larryapplegate: LESS
21:43 < jocafa> stylus
21:43 < niggler> for example, the if statement
21:44 < vicapow> larryapplegate: I spent a lot of time writing stylus then switched to less. it's just better because it's not node/express pacific. you can pick up mixing from all around
21:44 < niggler> without looking in context you can't distinguish between an if from jade and an if from a script tag
21:44 < vicapow> specific*
21:45 < vicapow> niggler: that's cause they're the same. one just runs on the server instead of the client
21:47 < sinclair> niggler:  http://www.youtube.com/watch?v=uKfKtXYLG78
21:48 < sinclair> ^ real hipsters
21:48 < niggler> I'm disappointed that this is the first time I'm coming across this video
21:50 < niggler> fyi sinclair appears that this is the original: http://www.youtube.com/watch?v=xrIjfIjssLE&feature=gv
21:54 < chovy> in 40 years they'll be laughing at our youtube videos
21:54 < chovy> "Look at that guy discussing node from the turn of the centry"
21:54 < sinclair> people will laugh at hipster programmers like people laugh at 80's haircuts
21:56 < context> erlang is where its at
21:56 < context> i want to see these node videos you speak
21:58 < AAA_awright> sinclair: Brilliant! The compelling relationships will leave you in awe. 5/5 stars!
21:58 < CoverSlide> context: like http://www.youtube.com/user/nodejsdublin
21:58 < sinclair> AAA_awright: ?
21:59 < CoverSlide> http://www.youtube.com/user/lxjs2012
22:00 < CoverSlide> http://www.youtube.com/user/jsconfeu
22:00 < cellvia> this erland video is awesome
22:00 < cellvia> erlang
22:00 < cellvia> love the british dude
22:01 < cellvia> the intro i also give 5/5 thumb up
22:04 < CoverSlide> ok who voted for roseanne barr?
22:11 < someprimetime> how come a lot of sites that use node.js have the actual servers turned off>
22:11 < someprimetime> s/>/?
22:11 < someprimetime> is this a common thing for node?
22:11 < someprimetime> i'm trying to do some tutorials, but all the "demo" sites are offline
22:16 < bmoore> date
22:17 < bmoore> date
22:17 < samholmes> how do I set up SSL on an express server?
22:17 < vicapow> someprimetime: maybe they're old tutorials your coming across
22:18 < someprimetime> http://express_example.nodester.com/ from last year
22:18 < someprimetime> http://shapeshed.com/creating-a-basic-site-with-node-and-express/
22:18 < someprimetime> the thing is, i'm trying to find a good guide to get started with building an entire site with node, but these kind of articles are polluting the search results page
22:19 < vicapow> samholmes: express.createServer({key: privateKey, cert: certificate});
22:19 < othiym23> someprimetime: generally you just gotta go for it and start trying to build up a site to do a thing for yourself
22:20 < vicapow> someprimetime: all you should need is to foliow this: http://expressjs.com/guide.html
22:20 < othiym23> there's a lot of terrible or obsolete documentation out there for Node, I agree
22:20 < bmoore> date
22:20 < someprimetime> is express the holy grail of node frameworks?
22:20 < someprimetime> it keeps coming up but i know there is another one i'm forgetting
22:21 < tjholowaychuk> someprimetime no such thing as holy grail
22:21 < tjholowaychuk> of anything
22:21 < vicapow> someprimetime: idk if i'd say that but it's what i use for building web apps
22:21 < Leo__> Has anyone ever used the module GeoIP? Is it the best way to get ip's geolocation?
22:21 < someprimetime> i'm coming from a php/mysql background but i have quite a bit of js experience. all my former web apps are built with cakephp, but i use pylons @ work
22:21 < someprimetime> i'll check it out thx
22:21 < someprimetime> looking to just hop off the php nutsack
22:22 < someprimetime> are most people here using mongo to go with their node apps?
22:22 < othiym23> Express is a good place to start because it's easy to find folks who can help you out here
22:22 < someprimetime> nice
22:22 < samholmes> vicapow: Where would you recommend I get a certificate?
22:23 < vicapow> samholmes: you can create one yourself if you want to test it out on your own machine
22:23 < samholmes> vicapow: I want an official one.
22:23 < vicapow> samholmes: using a self signed certificate
22:23 < vicapow> samholmes: then you'll have to buy one. 
22:23 < samholmes> I want one for production
22:24 < samholmes> vicapow: Right. Where would you recommend I buy one?
22:24 < vicapow> samholmes: i think this company sells them verisign.com
22:24 < vicapow> samholmes: i've nevr bought one myself though
22:24 < bmoore> date
22:25 < samholmes> vicapow: why haven't you ever bought one?
22:25 < vicapow> vicapow: i never had a need to. someone else at my company always bought them
22:26 < bmoore> date
22:26 < TooTallNate> samholmes: startssl.com has free ones
22:26 < TooTallNate> that actually get validated unlike a self-signed
22:27 <@konobi> rapidssl
22:30 < context> i usually do rapidssl through namecheap
22:30 < context> wow. startssl class 1 is in the certs browsers ship with ?
22:30 < context> free is awesome
22:35 < cip_> hi
22:35 < vicapow> cip_: hello!
22:36 < Industrial> Say I create a HTTPServer EventEmitter that wraps a http.createServer() and emits 'request' events when a request happens; I want other parts (e.g. Template loader) to connect to this to eventually form the response to send to response.send(). What I don't understand is how to keep track of the reqquest/response objects.
22:37 < Industrial> Do I pass them with each 'request' event? I imagine that to be a whole lot of unneeded chatter
22:39 < TooTallNate> Industrial: events are cheap, there's no "chatter", just flow control
22:40 < cip_> there is something I don't get it about node.js, why using it?
22:40 < cip_> there are .net / php stacks already for exmple
22:40 < TooTallNate> cip_: cause it's fun
22:40 < itzmjauz_> php Q_Q
22:40 < Industrial> TooTallNate: oh, I find myself repeatedly overthinking things :(
22:41 < cip_> indeed - fun, but for serious apps?
22:41 < TooTallNate> cip_: sure why not?
22:41 < Industrial> I should maybe stop reading http://www.eaipatterns.com
22:41 < Industrial> :p
22:42 < Lorentz> hell, php wasn't even made for programmers
22:42 < Lorentz> it just evolved to that mess
22:42 < Industrial> I find it hard to find good practical information on how to chop up my application into reusable parts/emitters/etc
22:43 < Industrial> I took a look at noflo but found it too complex, dnode/airport allows for easy connection between hosts anyway
22:43 < itzmjauz_> http://webonastick.com/php.html
22:44 < mscdex> node.js rules!
22:44 < itzmjauz_> True that
22:45 < sinclair> mscdex: i have a love hate relationship with nodejs still
22:45 < syskk> roger that
22:45 < syskk> I have a love hate relationship with javascript
22:45 < syskk> node's probably the best JS api i've ever played with
22:48 < CoverSlide> JIFASNIF
22:48 < mscdex> sinclair: but typescript man, typescript!
22:48 < sinclair> mscdex: yeah, typescript is awesome
22:49 < mscdex> yeah!
22:49 < superjoe> CoverSlide, Javascript Is For Assholes, Shitfaces, Naggers, Ingrates, and Fucktards?
22:49 < mscdex> so you can't hate nodejs then
22:49 < superjoe> not sure I agree with that acronym
22:49 < sinclair> mscdex: getting TS working right on node is less than trivial 
22:50 < CoverSlide> superjoe: http://jifasnif.jit.su/
22:50 < mscdex> trivialscript
22:50 < samholmes> vicapow: privateKey and certificate are strings?
22:50 < txdv> is this ryan
22:51 < superjoe> CoverSlide, ha
22:51 < vicapow> samholmes: look up the documentation
22:51 < sinclair> mscdex: ive been at it for days trying to 1) structure my application  right, 2) get TS module includes to work with node_modules, 3) get my head around why it looks so weird
22:51 < samholmes> TooTallNate: What's the catch for startssl.com?
22:51 < vicapow> samholmes: (aka, idk off hand :P)
22:51 < CoverSlide> no catch, but you only get one browser certificate. if you lose it, you have to pay
22:51 < vicapow> samholmes: (but yeah. they probably just take strings)
22:51 < Lorentz> yep, I "lost" one before and they wanted money to revoke it
22:52 < TooTallNate> samholmes: not much, their login system sucks, but that only matters once a year
22:52 < Lorentz> (more like their system completely forgot what private key it was working with and cert became useless)
22:52 < sinclair> mscdex: its hard to settle on a approach i am comfortable with
22:52 < TooTallNate> samholmes: but i've ben renewing the free one for like 3 years now, they've never asked for money
22:53 < vicapow> samholmes: do you have your app built first? i would think that's the first step. use a self signed cert until then
22:53 < samholmes> TooTallNate: There has to be a reason it's free. Why would they give out free certificates?
22:53 < samholmes> vicapow: Yes I do.
22:53 < TooTallNate> samholmes: *shrug*
22:53 < Lorentz> samholmes: same as credit card companies
22:53 < Lorentz> hook suckers in
22:54 < CoverSlide> they sell other certificates
22:54 < Lorentz> and if someone wants a wildcard cert, maybe they'll go with them?
22:54 < vicapow> samholmes: google "freemium"
22:54 < Lorentz> and ev2 (?) certs etc
22:54 < CoverSlide> just basic certificates they give for free
22:54 < Lorentz> extended validation service etc
22:59 < LowValueTarget> ok programming question -- i have a simple node app for a ticketing system using node and websockets. On pageload, an event is sent to node and broadcasted to all other clients triggering client-side javascript to show who's viewing which ticket. Onbeforeunload an event is dispatched and broadcast to reflect that, that person is no longer vieweing the ticket. //// The problem is this. The web app has no hook or insight on 
22:59 < LowValueTarget> when the user logs out so I end up having stale views when the user is no longer logged in (expired session) or otherwise. What do you propose is the best way to handle timing out a user -- possibly from inactivity or just predicting staleness of a view. I currently have two datasets. Users with an array of tickets and tickets with arrays of users.
22:59 < LowValueTarget> ^ sorry for the book
23:02 < samholmes> TooTallNate: Would you consider startssl.com's free cert good enough for production level?
23:02 < CoverSlide> startssl cert is included in most modern browsers, should be good enough
23:03 < TooTallNate> samholmes: it encrypts the traffic, which is all that you normally care about, but more expensive certs give the user more info
23:03 < samholmes> Ah, so it doesn't verify the identity of the site.
23:03 < AviMarcus> I think you need to add more certificate chains with them
23:03 < AviMarcus> it kinda does
23:03 < AviMarcus> which is why startssl does some minimal sort of identity checking
23:04 < CoverSlide> well when I've used them, i can open up my site in chrome, firefox, opera, and IE without asking to make a security exception
23:06 < samholmes> TooTallNate: So the expensive certs provide a little extra information, which isn't really required? What benifit does this extra information have?
23:06 < othiym23> it makes the URL bar GREEN
23:06 < othiym23> ooooooo
23:07 < TooTallNate> samholmes: like a shiny green icon in the address bar
23:07 < TooTallNate> samholmes: i.e. paypal.com
23:07  * othiym23 will keep his cynicism about SSL to himself
23:07 < samholmes> I pay 50 bucks a year for a shiny green bary..
23:07 < samholmes> bar.
23:08 < jp232> look at the shiny shiny
23:08 < TooTallNate> expensive: http://cl.ly/image/432L30013G0T
23:08 < TooTallNate> not-so-expensive: http://cl.ly/image/2R0G072d3d1K
23:08 < Lorentz> samholmes: free cert from startssl checks the domain is owned by you
23:09 < CoverSlide> also peoples' browsers don't give a gigantic "ALERT, THIS SITE WILL DO SOMETHING VERY BAD IF YOU GO THERE!!!!"
23:09 < Lorentz> basically emails whoever's in whois etc
23:09 < Lorentz> but that's it
23:10 < CoverSlide> everyone should just get a verisign cert
23:10 < CoverSlide> it super-duper protects your site
23:11 < AviMarcus> Oh cute. I didn't notice the name in the bar on paypal e.g. compared to my free cert
23:12 < syskk> i didn't know those certs were more expensive
23:12 < CoverSlide> when buying a verisign cert, the difference between a green bar and no green bar is $600
23:12 < Lorentz> now you know what kind of "monopolpy" these cert signing companies rake in
23:13 < CoverSlide> for one year
23:13 < CoverSlide> on the other hand, how many people actually pay attention to the green bar / green lock symbol
23:13 < CoverSlide> i KNOW I should check for it, and I never do
23:13 < nlf> most people just pay attention to whether or not the site gives them a warning
23:14 < superjoe> CoverSlide, I typically check it before I enter CC info
23:14 < CoverSlide> that's why i send all their account info unencrypted
23:14 < CoverSlide> yay!
23:14 < syskk> is there any mobile SDK that is compatible with Node.js' API?
23:14 < AviMarcus> that.. doesn't sound like the right question.
23:14 < superjoe> ^
23:15 < AviMarcus> syskk, what is it that you're trying to do?
23:15 < syskk> AviMarcus: I'm stuck working on a Titanium SDK app and I miss Node.js :(
23:16 < AviMarcus> oh geez this .bz2 file that's 1gb is uncompressing to over 9 gb
23:16 < mscdex> good compression!
23:16 < CoverSlide> not necessarily
23:17 < AviMarcus> should be plain text of numbers with a LOT of duplication
23:17 < AviMarcus> I don't have 15gb of free space on that SSD :/
23:17 < mscdex> 101001010111
23:17 < mscdex> :-D
23:19 < CoverSlide> bz2 is pretty good though
23:20 < syskk> some chinese women dancing outside -_- what da hell
23:20 < aho> record it, put it on youtube, $$$
23:20 < AviMarcus> omg. the file is 3 columns... with number, number, then date.. and the date is the same for every single millions of records
23:21 < syskk> right
23:21 < AviMarcus> at least 340million records. That's.. quite a waste of space.
23:22 < CoverSlide> just pipe through bz2 and stream it
23:22 < AviMarcus> oh. cool. duh. CoverSlide thanks!
23:27 < kenperkins> anyone using mocha heavily
23:28 < othiym23> kenperkins: y
23:28 < kenperkins> do you use before() much?
23:29 < kenperkins> I'm seeing before run for all of my tests, even when I grep to a pattern
23:29 < othiym23> kenperkins: that's how it's supposed to work, no?
23:29 < nlf> i've never found a unit testing framework i was completely happy with
23:29 < othiym23> you mean before is running even for suites where no tests are running?
23:29 < othiym23> I use before / beforeEach all over the place
23:30 < othiym23> (and after / afterEach to match)
23:30 < tjholowaychuk> othiym23 they shouldn't be but for some reason in his case they are
23:30 < tjholowaychuk> i cant reproduce it
23:34 < chovy> nlf: i've never found a way to write unit tests.
23:34 < chovy> besides selenium
23:35 < chovy> how do you test node.js code that uses callbacks instead of returning.
23:35 < othiym23> chovy: you use a test framework that supports async tests and write async test cases
23:35 < othiym23> it's pretty easy in any of vows, mocha, specify or tap
23:40 < syskk> mmm weird. express's req.accepted returns an empty array with header Accept: application/json; charset=utf-8
23:40 < kenperkins> turns out I had an (unbeknownst to me) old global version
23:40 < kenperkins> problem solved
23:41 < tjholowaychuk> syskk: not sure if Accept can take a charset, maybe that's busting the parser
23:41 < syskk> tjholowaychuk: ok, that's probably the problem
23:45 < syskk> tjholowaychuk: yep, that fixed it
23:45 < tjholowaychuk> cool cool
23:45 < tjholowaychuk> there's Accept-Charset
23:45 < tjholowaychuk> if you do need that
23:45 < tjholowaychuk> though it would almost make more sense in Accept haha
23:57 -!- mode/#node.js [+o piscisaureus_] by ChanServ
23:59 < EhevuTov> In Proactor Design Pattern buffer space has to be committed during I/O operations. Not sure if this is a good or bad thing.
--- Log closed Wed Nov 07 00:00:26 2012
