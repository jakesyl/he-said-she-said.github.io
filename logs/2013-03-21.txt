--- Log opened Thu Mar 21 00:00:54 2013
00:14 < AAA_awright> spencera: Did you get around to checking that out?
00:25 < perlitch> any advice on setting up a testing environment with a browserify project? this is not for an open-source project and will not be hosted on github, so i think github hooks are out
00:25 < enjalot> hey all, if i'm making a module, whats the best practice name? ot-tune or ottune
00:28 < substack> perlitch: with testling you mean?
00:29 < perlitch> substack: that is what i was thinking. i suppose i assumed it was github-dependent
00:29 < substack> we have an api to directly push for private repos
00:31 < perlitch> this is probably a dumb question but do you think it would be overkill if we are restricting client browser usage to latest chrome/ff?
00:32 < EyePulp> perlitch: it only depends on who your target audience is
00:32 < dingdreher> does someone use kanso?
00:35 < enjalot> are there naming standards for npm modules?
00:39 < Havvy> enjalot: Nope.
00:39 < enjalot> so there would be no preference between ot-tune and ottune?
00:40 < Havvy> Nope.
00:40 < Havvy> Actually, yes.
00:40 < Havvy> Wait, no. Nvmd.
00:41 < Havvy> It's entirely possible to do require('name-has-dashes') without doing anything special.
00:41 < enjalot> Havvy: lol. Math.floor(Math.random() * 2) ?
00:41 < Havvy> 0 or 1?
00:42 < enjalot> well, flip of the coin the way i name it then
00:42 < Havvy> I'd say go with the non-dash personally.
00:42 < Havvy> But both would be acceptable.
00:44 < enjalot> Havvy: thanks
00:50 < bob1337> Hi! Can anyone tell me how do I install node modules from source code. My company have huge restrictions with ports and addresses
00:50 < tjfontaine> npm install /path/to/source
00:51 < bob1337> ok! Thanks for the confirmation!
00:53 < MI6> joyent/node: isaacs v0.10 * 3dd7938 : npm: upgrade to 1.2.15 - http://git.io/uEH-XQ
01:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:09 < AAA_awright> Is there an easy way to split a string only at the first character?
01:09 < AAA_awright> Or do I really need to do indexOf and substr
01:10 < korilo> AAA_awright, shift?
01:11 < AAA_awright> I mean, into two parts
01:11 < AAA_awright> >> '1234-5678-9012'.split('-',2)
01:11 < purr> AAA_awright: (object) ['1234', '5678']
01:11 < korilo> oh you want the two parts back
01:11 < AAA_awright> It leaves out the third segment
01:11 < korilo> in php there is explode lol
01:11 < AAA_awright> I'd like that to mean "stop splitting after the first dash"
01:12 < AAA_awright> php does it right (gasp)
01:12 < korilo> but split() should be the same
01:13 < AAA_awright> I just demonstated it's not
01:13 < AAA_awright> >> '1=2=3'.split('=',2)
01:13 < purr> AAA_awright: (object) ['1', '2']
01:13 < Virunga> AAA_awright: i think you can do that easily with regex
01:13 < korilo> >> '1234-5678-9012'.split('-')
01:13 < purr> korilo: (object) ['1234', '5678', '9012']
01:13 < AAA_awright> Which means it's continuing to parse the string until it hits the second = and terminating /there/
01:13 < Virunga> Hi korilo ;)
01:14 < korilo> hey :)
01:14 < korilo> split is the same as explode in php
01:14 < korilo> and join == implode
01:14 < AAA_awright> >> var s='1=2=3'; var param = s.split('=',1); [ param[0].trim() s.substr(param[0].length+1).trim() ]
01:14 < purr> AAA_awright: SyntaxError: Unexpected identifier
01:14 < AAA_awright> >> var s='1=2=3'; var param = s.split('=',1); [ param[0].trim(), s.substr(param[0].length+1).trim() ]
01:14 < purr> AAA_awright: (object) ['1', '2=3']
01:14 < AAA_awright> That works I guess
01:17 < dingdreher> is there a plugin for some text editor (syntax highlighting would be nice) do edit json objects in NOSQL DBs? with rest api...
01:18 < gaf> >>var verbs = {"use": 1, "read": 2, "open": 3};var args = "open door with hammer".split(" ");verbs[args[0]];
01:18 < purr> gaf: (number) 3
01:18 < MI6> joyent/node: isaacs created branch v0.10.1-release - http://git.io/gLMpgw
01:21 < gaf> should i use express@3.0.0rc5. or express@3.1.0 ?
01:24 < samholmes> Is markdown full backwards compatible with HTML?
01:25 < samholmes> Meaning, can a user inject HTML into markdown?
01:36 < inspiron> is there a document explaining npm versioning (semver) 
01:37 < Havvy> http://semver.org/
01:56 < niggler> mscdex you awake?
01:57 < mscdex> niggler: always!
01:57 < mscdex> samholmes: yes
01:58 < niggler> hey mscdex you familiar with any libraries that convert between codepages?
01:58 < Zak> lucky bastard... never need sleep
01:58 < mscdex> niggler: iconv?
01:58 < samholmes> mscdex: So, I'll have to parse the HTML securely?
01:59 < niggler> does iconv accept codepage codes (1252 for windows latin, 10000 for macintosh roman)?
01:59 < mscdex> niggler: yep. bnoordhuis has the 'iconv' npm module
02:00 < niggler> oh i meant the command line iconv tool doesn't seem to accept the numeric identifiers
02:02 < niggler> actually nvm the OSX icon tool doesn't accept CP10000 -- you have to say MACINTOSH
02:04 < mscdex> niggler: i think those numbers you're referring to originate from Windows
02:04 < mscdex> samholmes: i would hope so
02:05 < samholmes> mscdex: Are there any good modules for doing this? I'm not sure on all the different HTML specs that could be considered insecure, so is there a general rule?
02:05 < ljharb> "secure"?
02:05 < mscdex> niggler: FWIW there's a conversion table for Windows code page ids to iconv encoding names here: http://svn.r-project.org/R/trunk/src/extra/win_iconv/win_iconv.c
02:06 < mscdex> samholmes: why not use an existing markdown parser?
02:06 < EyePulp> if I'm handling a req/res in a function, res.end() ends output back to the browser, but I need to do a return to stop the function from further processing, right?
02:06 < samholmes> mscdex: like marked?
02:06 < mscdex> samholmes: yeah
02:07 < mscdex> EyePulp: if you have other code that comes after it that you don't want to execute, yes
02:07 < samholmes> mscdex: I am using that.
02:07 < samholmes> mscdex: but users will still be able to inject HTML right?
02:08 < mscdex> samholmes: marked has an option to sanitize html if that's what you're after?
02:09 < samholmes> mscdex: does that mean all HTML is not allowed?
02:11 < EyePulp> thx mscdex
02:12 < mscdex> samholmes: it means it replaces things like <, >, ', and " with their respective html entities
02:12 < samholmes> Ah
02:16 < Zak> whats the best practice for escaping strings for injection?
02:17 < Zak> when i did this about a year ago, we used a library that was associated with OWASP
02:17 < Zak> you would call a specific function for a specific usage
02:17 < Zak> but i always wondered what everybody else was doing
02:25 < ljharb> Zak: for injection where
02:26 < ljharb> Zak: if you mean as HTML, try https://github.com/twitter/hogan.js/blob/master/lib/template.js#L317-L327
02:26 < Aria> OWASP's is good. If you've got a certain case of injection, you can be more focused.
02:26 < Zak> ljharb: i was under the impression that you needed to do something specific for each case?
02:26 < ljharb> i don't know why you need a library for a 5 line function :-p
02:27 < b1lly> is there a way
02:27 < ljharb> nope
02:27 < b1lly> to avoid
02:27 < b1lly> node js from spitting out all the debug stuff
02:27 < b1lly> in terminal
02:27 < ljharb> no and you shouldn't want to
02:27 < b1lly> I am using a setInterval to send data
02:27 < b1lly> and it's hard to debug
02:27 < Zak> use a debugger
02:27 < ljharb> you shouldn't use setinterval anyways
02:27 < ljharb> but also use a debugger yes
02:27 < b1lly> dont use set interval?
02:27 < b1lly> you mean use setTimeout instead
02:28 < ljharb> Zak: there's only one case the hogan method won't cover, which is "/script" - but you can handle that separately
02:28 < ljharb> yes
02:28 < b1lly> regardless
02:28 < ljharb> what are you sending that it shouldn't go out as fast as possible?
02:28 < b1lly> it should go out
02:28 < b1lly> as fast as possible
02:28 < ljharb> then why would you use a time-based tool to send it out?
02:29 < b1lly> I feel like its less overhead
02:29 < b1lly> then having 3000 people sending in requests at once
02:29 < ljharb> can you elaborate on what you're doing?
02:29 < b1lly> I have a game
02:29 < b1lly> and im trying to stream the data to all the clients
02:29 < b1lly> aka positions and stuffs
02:32 < ljharb> and how does setInterval help you?
02:32 < b1lly> well
02:34 < b1lly> so if 3000 people moved at once
02:34 < b1lly> it would fire 3000 events
02:34 < b1lly> and emit the data 3000x 
02:34 < b1lly> I feel like setInterval prevents that
02:34 <@mbalho> b1lly: i dont know what you mean by 'spitting out all the debug stuff', can you post a screenshot?
02:35 < b1lly> just all the connection stuff
02:35 <@mbalho> b1lly: you arent describing the problem very well
02:36 <@mbalho> b1lly: are you referring to how the node repl prints return values?
02:37 < b1lly> ya it spits the data out
02:37 < b1lly> that its transmitting
02:37 < Zak> ljharb: just did some more reading into injection and I think there may be more to escaping than a few characters
02:37 < b1lly> into console
02:37 < Zak> ljharb: http://wonko.com/post/html-escaping
02:38 <@mbalho> b1lly: node doesnt print anything to stdout by default
02:38 < Zak> hogan.js's implementation seems to fall under one of those "not enough" cases
02:38 < b1lly> well mine does
02:38 <@mbalho> b1lly: you are probably running code that prints things out
02:38 < b1lly> no
02:39 <@mbalho> b1lly: is your code on github? i will find the line causing the output if so
02:39 < b1lly> you won't find any lines because there are none
02:39 < Zak> i think i might stick to the OWASP implementation for escaping
02:39 < Zak> but if anybody has a better implementation then i'm all ears
02:40 < ljharb> Zak: that's talking about attribute values
02:40 < Zak> which is valid in HTML
02:40 < ljharb> the article's really just saying "don't throw it into a function and forget about it"
02:40 < lovemuffin> what libraries are you using b1lly? or modules
02:41 < Zak> does hogan have another method for escaping attributes?
02:41 < ljharb> Zak: the escaped value from hogan, if not put into an attribute, is 100% safe
02:41 < b1lly> socket io
02:41 < lovemuffin> theres a option to tell it to be less verbose
02:41 <@mbalho> socket.io logs things out by default
02:41 <@mbalho> b1lly: "you are probably running code that prints things out" = socket.io FYI
02:42 < Zak> ljharb: ok sure. I was looking for a comprehensive library that would cater for any sort of injection in HTML
02:42 < ljharb> and obi you want all your pages to be utf8
02:42 < ljharb> Zak thats what that article is saying. there is NOTHING comprehensive. you always have to tailor it to your use case.
02:42 < b1lly> where is the socket io cfg
02:42 < Zak> a library could offer that
02:42 < b1lly> anyway, do you think using a loop is bad for what I wanna do
02:42 < Zak> which is what i said earlier about using offering different functions for different contexts
02:43 < dook> why does apt-get nodejs install version 0.4.something?  Is there any apt-get install for the latest ndoe?
02:43 < lovemuffin> b1lly: https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO "log level" io.set('log level'....)
02:43 <@mbalho> dook: linux package managers are slow to catch up to things
02:44 < dook> Oh, so it's up to the apt-get folks?
02:44 <@mbalho> dook: yea unfortunately. there are official binaries here http://nodejs.org/dist/
02:44 < dook> Ok, that should work for now.
02:45 < dook> mbalho: apt-get should work more like npm :)
02:45 < dook> Although there might be a namespace problem.
02:45 <@mbalho> hehe
02:45 < lovemuffin> b1lly: a loop for what? to not emit 3000 events really fast? no don't use a loop, buffer
03:08 < brianc> howdy
03:08 < brianc> anyone have a good or bad experience with sequelize?
03:08 < brianc> I'm thinking about trying it out in a project
03:08 < brianc> using it with postgres
03:37 < rvagg> brianc: have a look at 'orm' or 'downstairs', I haven't used any of them but I've heard a lot of criticism of sequelize
03:38 < brianc> rvagg: such as?
03:38 < rvagg> brianc: don't remember, I'm in a post-orm phase atm
03:38 < brianc> y the way....I appreciate the tips
03:38 < brianc> yeah I am too, but my team isn't as much
03:50 < mnutt> does anyone have any good examples of open source node apps that are intended to be customized? something along the lines of Hubot.  I'm looking for different patterns used in allowing people to fork the project, make their own custom changes, and contribute back the ones that make sense to contribute.
03:51 < b1lly> is there a way to send data with the initial .on('connection', ?
03:52 <@mbalho> mnutt: voxeljs.com is all managed through npm + github
03:54 < mnutt> mbalho: good one. hadn't considered splitting everything into small modules like that
03:54 < faceleg|work> mnutt: passportjs?
03:54 < faceleg|work> althought that is more a collection of modules
03:55 <@mbalho> mnutt: its how node core is organized :D
03:57 < mnutt> mbalho: The one thing I want to balance is ease of initial app deployment by a beginner vs ease of contributing back.  But I haven't re-evaluated since I started the project, so it's worth another look
03:59 < ningu> damn this sql generator
04:00 < ningu> there, I finally made it happy
04:09 < niggler> is there a way to test the .npmignore (see what files would be included in an npm publish)
04:10 < lovemuffin> npm pack
04:17 < droopy> does anyone know how to write node tests that can 1) create a client request and 2) check the state of that request before and after it passes through a middleware?
04:17 <@mbalho> mnutt: i dont think those are opposed, ideally setup should just be 'npm install && npm start' and contributing should be things like make sure the tests pass ('npm test'), etc
04:18 < lovemuffin> droopy: what kind of middleware? express middleware?
04:20 < droopy> yes express middleware
04:21 < ningu> what's the opposite of "array"... simplex?
04:21 < niggler> ningu yarra
04:21 < ljharb> single?
04:21 < ningu> "single values" sounds confusing to me.
04:22 < ningu> I just mean a word for something of which there is one and only one.
04:22 < niggler> ningu are you asking for the contravariant?
04:22 < niggler> ningu singleton
04:22 < niggler> you could also go with 'bra' if you interpret the vector as a 'ket'
04:22 < ningu> well, the context is documenting an api specification. so, for example /foo/<id> where you put it in the url because there is only ever one id.
04:23 < ningu> as opposed to something else which you might want to pass an array of in the request and find matches.
04:23 < niggler> is id a string?
04:23 < ningu> niggler: in this case no. in other cases of things passed in the url, yes.
04:23 < niggler> you could say "value"
04:23 < niggler> !mdn value
04:24 < b1lly> is there a way to do .on('connection',  --- send response back?
04:24 < ningu> I guess. I want to say something about how the api was designed and why certain things show up in the url. if I say "values are in the url, arrays are in the request body" that will be confusing :)
04:24 < niggler> ningu https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals
04:24 < lovemuffin> b1lly: .emit
04:24 < niggler> it looks like mdn uses 'value'
04:24 < ningu> hmm, ok
04:25 < b1lly> without emitting
04:25 < ningu> well, I'll think of something
04:25 < droopy> ningu: "singular values are in the url, arrays are in the request body"
04:25 < ningu> I think "simplex value" is close enough
04:25 < niggler> ningu do you know what a simplex is?
04:25 < lovemuffin> droopy: so you could either before,each 'proxy' your middleware, or figure out how to get the middleware chain from express and loop it in your test
04:26 < ljharb> ningu: wait, why would you do them in different places? if there's only one value, just make it be an array of 1
04:26 < ningu> niggler: I know it's not a noun, so it sounds like I have a better (linguistic) idea of what it is :P
04:26 < ljharb> ningu: treating 1 and 1+ differently will lead to lots of problems
04:26 < niggler> ningu simplex is like triangle, tetrahedron, etc
04:26 < lovemuffin> before,after*
04:26 < ningu> ljharb: I didn't explain clearly enough. certain requests are basically asking for detailed information that, by nature, can only be about one thing. or possibly it's constrained by two unique items.
04:26 < ningu> ljharb: so it's a different kind of operation.
04:26 < ljharb> it's still a "give me details" request.
04:27 < ljharb> it simplifies both your code, and client code, a lot if they can just always assume things are an array. whether there's 1 or N things in it shouldn't matter
04:27 < ningu> for example, "look up stuff for record foo"
04:27 < ningu> where stuff wouldn't make sense to look up in multiple records at once
04:27 < ljharb> "look up stuff for records: [foo]"
04:27 < ljharb> there's no need for a singular request type if you have a multiple one :-p
04:28 < droopy> lovemuffin: any idea where the middleware chain would be found?
04:29 < ningu> ljharb: so one use case is you have a dictionary -- as in, a real dictionary -- with ids and associated text strings for a particular language. so say you want the id# for the string "tree" in english. it would make sense to get ids for a whole bunch of strings at once and the api allows that.
04:29 < ljharb> sure, i get that
04:29 < lovemuffin> droopy: maybe express.route? no idea, would probably have to look at connect source
04:29 < ningu> ljharb: but it would be weird to say, give me the ids for "tree" in these 10 languages, I don't care which... what if it exists in 5 of them?
04:29 < b1lly> when a client connects, is there a way to send him back his socket.id from the server (without having to create a seperate emit)
04:30 < ljharb> then you give me 5 results?
04:30 < ningu> ljharb: I realize that's a possible query to do but it seems like an odd use case
04:30 < ljharb> 5 different trees, and then it's my (the client)'s job to pick one
04:30 < ljharb> and if i don't care, i can just pick the first one and assume you've sorted them
04:30 < ningu> I suppose, if you included the language's id# along with each record returned
04:31 < ningu> but the most common use case, by far, is to look up things for one language at a time
04:31 < ningu> possibly many things
04:31 < ningu> so that would result in returning a lot of redundant info
04:31 < ningu> maybe it doesn't matter though
04:32 < lovemuffin> droopy: the easiest approach is just to do the 'proxy' way, ie: wrap the middleware
04:33 < lovemuffin> droopy: var backup = middleware; middleware = function(req, res, next) { check before; backup(req, res, function() { ... check after...}) }
04:34 < droopy> lovemuffin: aha brilliant!
04:36 < Logicgate> Is there any way to trigger an event via a shell for socket.io?
04:42 < ljharb> ningu: then you can make a param like "max_trees" and if they set it to 1, they only get one back
04:44 < droopy> lovemuffin: hmm how would I get that hook to work when running the tests? I mean, the middleware get required, or a function is passed to a route, when the app is started... the only way I can think of getting that proxy in place is by editing the code, which is a no-no for tests
04:46 < s3shs> Is this the best pool to use?  https://github.com/coopernurse/node-pool
04:49 < b1lly> is there a way to listen for the socket.send() from the server
04:49 < b1lly> ?
04:49 < b1lly> on the clientside
04:51 < lovemuffin> droopy: you just need get a reference to it, again i dont know where express/connect stores it
04:51 < lovemuffin> s3shs: looks overly complex
04:52 < s3shs> I know.
04:55 < lovemuffin> droopy: http://hastebin.com/cosemumora.js
05:04 < droopy> lovemuffin: app.whereever.express.saves.the.middleware indeed :) I'm pretty sure it's buried in the routes logic somewhere, this is going to get ugly
05:05 < droopy> lovemuffin: thanks for the code sample too!!
05:06 < lovemuffin> droopy: it's probably an array
05:07 < lovemuffin> so you'd test it like var middleware = require('middleware') if (arr[idx] == middleware) to know which one it is
05:07 < lovemuffin> with a for loop
05:10 < lovemuffin> droopy: or you can do this https://github.com/senchalabs/connect/blob/master/test/csrf.js and setup express in your test
05:10 < droopy> lovemuffin: in order to test an anonymous function attached to a route, it would have to somehow be exported in that module (i.e. no so anonymous anymore) right?
05:10 < lovemuffin> i dont know if you want to do that
05:10 < droopy> lovemuffin: I'll check that out thx
05:11 < lovemuffin> droopy: it'll be ok actually if you were sure of the order
05:13 < droopy> lovemuffin: good point
06:01 < zeromodulus> If I export a function that returns an instance, will it be the instance that is cached as the exported object?
06:01 < ljharb> zeromodulus: yes. modules shouldn't be instances
06:02 < zeromodulus> what about in the case of database connections?
06:03 < ljharb> i use mongoose for that, so i don't know how they do it
06:09 < zeromodulus> :/
06:09 < zeromodulus> I had an instance exported before... and it worked fine...
06:09 < ljharb> maybe it does work :shrug:
06:09 < ljharb> you just have to be careful with state and module caching
06:10 < zeromodulus> Eh, I suppose.
06:10 < zeromodulus> hmm...
06:10 < zeromodulus> Now I see where this will become problematic.
06:12 < zeromodulus> -.-
06:12 < zeromodulus> I'm switching from Heroku to AppFog.
06:13 < zeromodulus> Thought I had to change the way I was loading configuration due to the documentation... but... looks like I don't have to after all.
06:13 < zeromodulus> Problem solved. :D
06:25 < b1lly> trubbles.com
06:25 < b1lly> a little html5 project im working on
06:26 < s3shs> What do y'all use for pools for SQL connections?
06:28 < s3shs> Nevermind, the node-mysql does it now.
06:43 < accrec> s3shs: use redis. its cooler for node
06:43 < accrec> than sql
06:44 < AAA_awright> Why?
06:44 < accrec> storage
06:44 < AAA_awright> Redis is a memory store
06:44 < AAA_awright> Not to be confused with a proper database, and a relational one at that
06:44 < accrec> for socket, if u want to use multi-processing
06:44 < s3shs> And when the plug gets kicked?
06:44 < Mahesh> Hi Can anyone help me out for AD/LDAP authentication using nodejs?
06:44 < accrec> or something
06:46 < accrec> yeah, i know, but redis can dump too for backup :)
06:48 < AAA_awright> accrec: That's IF you shut it down properly
06:48 < AAA_awright> And for replication, etc
06:48 < M2Ys4U> but is it webscale? that's the question :P
06:49 < AAA_awright> MongoDB is Web Scale
06:51 < accrec>  ok, my strange ways on my strange mind... :D
06:58 < chee_> New York City in the house
06:59 < Mahesh> Hi Can anyone help me out for AD/LDAP authentication using nodejs?
06:59 < accrec> hi ny, hows the waether? :D
07:00 < chee_> The weather is gorgeous.
07:00 < chee_> hey Mahesh
07:01 < chee_> I think it depends on how you tend to use ldap auth within your app... have you heard of http://ldapjs.org/ ?
07:02 < Mahesh> Thanks for ur reply
07:02 < chee_> No prob, bro.
07:02 < Mahesh> I want to authenticate & extact some parameters from AD/LDAP
07:03 < Mahesh> I have gone through thess Docs
07:05 < chee_> hey Mahesh, that's all I have, bro. Sorry to be a one-trick-pony ;^)
07:05 < Mahesh> thnks brother...
07:06 < chee_> I smell curry spices
07:07 < chee_> hey Mahesh, where are you broadcasting from? Pakistan?
07:07 < chee_> India?
07:07 < Mahesh> India
07:07 < chee_> I knew I smelled curry.
07:07 < Mahesh> hehe 
07:07 < chee_> How is it over there? is it hot today?
07:07 < Mahesh> whr are u from?
07:07 < accrec> mhmm curry <3
07:08 < chee_> I'm in NYC
07:08 < Mahesh> grt 
07:08  * accrec germany
07:08 < Mahesh> will send sm  ... :-)
07:08 < Mahesh> guys thnnks....I feel hungry now
07:08 < chee_> yep, we have pretty Indian girls here that also smell good ;-)
07:08 < Mahesh> ;-)
07:09 < accrec> hehe
07:09 < accrec> i like ny, because of multi cultural. but i was never over the ocen
07:09 < accrec> +a
07:10 < chee_> yeah, we have a lot of Desis
07:10 < chee_> They're mostly cool people, I think.
07:12 < accrec> good :)
07:12 < chee_> Hey... does anyone know of any node.js CMS type of platform?
07:12 < accrec> yes and no, i cant remember the name
07:12 < AAA_awright> chee_: You're in luck, I just started to package http://magnode.org/
07:16 < chee_> hey thanks AAA_awright
07:16 < AAA_awright> chee_: That work alright?
07:17 < chee_> well, I'd have to research it more thoroughly, but it doesn't look particularly helpful to me at the moment
07:17 < chee_> ...but I really appreciate you helping out, bro :)
07:18 < AAA_awright> chee_: What are you looking for?
07:19 < chee_> A friend recommended a framework a few weeks back. I forgot the name, but I remember it branded itself admantly as not a CMS, although it pretty much is a CMS
07:20 < chee_> ...the point is, the system actually works well for what I needed at the time, and I'm trying to see if I can find that again, or something similar.
07:21 < AAA_awright> chee_: What did it do that you're looking for though?
07:21 < AAA_awright> I know of some stuff similar to that but not anything you could use as an application
07:21 < AAA_awright> At least not under active development
07:30 < ajostergaard> AAA_awright: magnode looks interesting (and i'm in the 'market' for a cms) but there's something i think i've misunderstood … you say i should be able to choose my own DB but require MongoDB :-S
07:31 < AAA_awright> ajostergaard: It's simple enough to write a driver, I had one for a memory RDF database as a proof-of-concept
07:32 < AAA_awright> ajostergaard: But it nonetheless does require coding, which I'll tacke with time, I refer to the fact that the code is as unreliant upon a single database or data model as possible
07:33 < AAA_awright> It's localized to 3-4 files, out of 20-30 or so
07:33 < AAA_awright> What database do you want to use?
07:52 < AAA_awright> ajostergaard: Ping?
07:54 < chord> how do you guys do updates with nodejs apps that use websockets. Just blindly doing a rolling restart would lose all the websocket connections
07:54 < AAA_awright> chord: Good question
07:55 < chord> what you guys have never dealt with this problem?
07:56 < AAA_awright> I'm contemplating various ways of dealing with it
07:56 < AAA_awright> You leave the old instances running until the last person disconnects
07:56 < AAA_awright> (And only bring up new instances, don't shut them down)
07:56 < AAA_awright> Or you need the capability to re-negotiate the session after it's been cut
07:56 < AAA_awright> And do so transparent to the user
07:57 < AAA_awright> This latter solution is resistant to more types of failures
07:57 < chord> what if you need to leave the old instances up for a long long time because some guy is playing your game 24 hours a day
07:58 < AAA_awright> chord: What do you think kernels and irc servers do? They don't update.
07:58 < AAA_awright> Once you're up and have users, you don't shut down for years
07:58 < chord> I like the re-negotiate session idea
08:06 < ajostergaard> AAA_awright: sorry - didn't hear the beep saying you'd replied … my bad. personally i use mysql and/or redis for my data - in this case probably mysql. or would i gain a lot from learning mongodb?
08:08 < AAA_awright> ajostergaard: There's not much to learn in order to use my app, it tries to keep all that hidden away. I'd definitely like MySQL support
08:08 < chord> ajostergaard: postgres > mysql
08:08 < AAA_awright> Or relational DB support in general
08:08 < AAA_awright> And I know exactly how to do it, but since I have something that works it's low on priority
08:09 < AAA_awright> chord: Why so?
08:10 < AAA_awright> I'll support Redis for doing pub/sub between processes, but not for storing data... MongoDB really is better suited for that, since you need to be able to do proper indexing of values
08:11 < AAA_awright> I'd like to have an IndexedDB-like database for storing documents, MySQL or similar for relational data, and an RDF database for complex descriptions of resources
08:11 < AAA_awright> And the first case, IndexedDB, would be strictly file based, no server required
08:11 < AAA_awright> So great for blog posts and whatnot
08:12 < chord> AAA_awright: MongoDB is a horrible database
08:12 < AAA_awright> chord: For doing what and why?
08:12 < chaobin> yes, why? ^^^
08:13 < ajostergaard> AAA_awright: understood - thanks :)
08:15 < AAA_awright> ajostergaard: If you do have MongoDB installed, or would like to, I'd like to see what you think of my application
08:15 < AAA_awright> And what features you're looking for
08:16 < AAA_awright> chord: MongoDB works well because HTTP is atomic - but just for the resource identified in the request - and likewise, MongoDB is atomic per-document.
08:16 < AAA_awright> It's easy to implement the features of HTTP like Etags, If-Match, If-Modified-Since, etc
08:17 < chord> AAA_awright: MongoDB = throw away all the database theory of the last decades
08:18 < AAA_awright> chord: Not really, the concept of document databases has been around forever, heard of BerkleyDB?
08:18 < AAA_awright> chord: And that's all I need for most use cases. The ability to store documents and look them up by various values, and enforce certain constraints
08:18 < AAA_awright> *BerkeleyDB
08:24 < AAA_awright> Anyone want to help create an IndexedDB implementation?
08:37 < [AD]Turbo> ciao all
08:37 < accrec> cu
08:39 < AAA_awright> Um, ok
08:39 < accrec> aaa, sorry, no time. 
08:42 < accrec> have a lot to do on my app (accapp.net)
08:42 < ningu> I'm glad I wrote error checking functions cause I keep not following my own api
08:43 < AAA_awright> accrec: Eh?
08:43 < AAA_awright> I was referring to [AD]Turbo
08:44 < accrec> ah, ok
08:50 < accrec> i have a mysteryous bug. after running for hours (nothing happend, just the socket debugging) the app crashes
08:54 < accrec> events.js:71
08:54 < accrec>         throw arguments[1]; // Unhandled 'error' event
08:54 < accrec> but nothing happend before
08:55 < accrec> the app runs fine before i updated the modules :|
08:56 < accrec> was running*
09:07 < abraxas> if any event emitter emits "error" and nothing is listening for it, it will throw that error as an uncaught exception
09:07 < abraxas> that's part of eventemitter's built-in logic
09:07 < abraxas> so any module you may depend on, if that event got added and you're not listening for it.. that would happen
09:08 < ningu> moral of the story, listening is key to any good relationship?
09:08 < zaleb> thats what she said
09:09 < zaleb> accrec, you may try looking into domains: http://nodejs.org/api/domain.html for uncaught error events
09:09 < accrec> ok, thank you :)
09:23 < faceleg> My segfaulting issue is solved! Praise be!
09:24 < zaleb> congratz
09:25 < faceleg> I know!
09:25 < faceleg> and it wasn't even my code
09:25 < faceleg> it was code I didn't understand that worked on my machien (but not others') 
09:25 < faceleg> no understant = no touch in c++ land
09:25 < faceleg> ahh
09:25 < zaleb> :D
09:31 < faceleg> and I couldn't have done any of it without the help from this room 
09:31 < faceleg> very good community
09:33 < ningu> I think I should create a new web framework called ungular
09:33 < ningu> it would have goats and sheep
09:34 < faceleg> i'm agasint it
09:34 < faceleg> taking the piss out of me because I'm a nzer is not fair
09:34 < faceleg> we need so many sheep for the economy
09:34 < ningu> or you're projecting
09:34 < ningu> I never said anything about you
09:34 < faceleg> oh
09:34 < faceleg> we're sensitive about sheep
09:34 < ningu> hehe
09:35 < zaleb> but are sheep also sensitive about you?
09:35 < zaleb> think about it..
09:35 < freeside> say, is there an alternative to browsershots that doesn't suck?
09:35 < zaleb> imo they all suck
09:36 < zaleb> http://www.browserstack.com/ is rather nice tho
09:36 < zaleb> paid (but there is a free trial)
09:37 < freeside> i want to see if my webfonts are working, but i have those fonts installed locally, so i fear i'm really able to test
09:37 < freeside> er, i fear i'm not really able
09:38 < freeside> thanks, i'll try browserstack now
09:38 < substack> freeside: I run https://browserling.com
09:38 < substack> with pkrumins
09:39 < substack> it's free with paid options for a few extra browsers
09:39 < faceleg> ningu: I'm not being serous
09:40 < freeside> i remember seeing a really fancy one that gave snapshots of the page load at 1s, 5s, 10s, etc, as simulated from different places around the planet.
09:40 < faceleg> HAH! TravisCI build FIXED
09:40 < faceleg> was starting to think i'd never see the day
09:41 < ningu> I was starting to think I'd never be able to hack gesundheit to generate the sql I wanted
09:41 < ningu> but I eventually prevailed
09:42 < faceleg> ningu: 
09:42 < faceleg> please can you npm install nodegit?
09:42 < faceleg> see if it builds for you?
09:42 < faceleg> no probs if it doesn't, can't do anything about it now anyway
09:42 < ningu> yes, but I have 15 mins of battery left and no outlets
09:42 < faceleg> just elated and want to pop my own bubble
09:42 < faceleg> good
09:42 < faceleg> don't then
09:42 < faceleg> please
09:42 < ningu> hehe
09:43 < faceleg> allow me the illusion of success for longer
09:43 < ningu> version 0.0.74?
09:43 < faceleg> yeah
09:43 < faceleg> released minuts after 73 due to basllsup
09:44 < faceleg> hmm
09:44 < faceleg> npm install doesn't actually install it
09:46 < ningu> there, I found an outlet
09:47 < ningu> something we all need
09:48 < ningu> oh, I need cmake
09:48 < faceleg> yeah
09:48 < ningu> I don't understand people who get by without package managers
09:49 < faceleg> neither it is foolish
09:49 < ningu> well, it built
09:49 < ningu> I don't know if that means anything
09:49 < faceleg> did it?
09:50 < faceleg> is there a release folder in build?
09:50 < ningu> yes
09:50 < faceleg> is there  a nodegit.node file in there?
09:50 < ningu> yep
09:50 < ningu> is that the binary from gyp?
09:50 < faceleg> well I'll be damned
09:50 < faceleg> yeah 
09:50 < faceleg> I think so
09:51 < faceleg> on mine there is no release folder
09:53 < ningu> faceleg: it doesn't seem to work though
09:53 < ningu> http://hastebin.com/bubaceroba.pl
09:53 < faceleg> good, I needed something to do this weekend
09:53 < ningu> oh, wait
09:53 < ningu> that's cause I moved the folder
09:53 < faceleg> >:
09:53 < ningu> let me npm install it again
09:54 < faceleg> aha
09:56 < ningu> there's a typo in your example
09:56 < ningu> git.repo('.git', function(err, repo) {
09:56 < faceleg> oh yeah
09:56 < faceleg> they're so old
09:56 < ningu> but it's error in the function
09:56 < zot> struggling with an InternalFieldCount assertion failure.  my code: http://pastebin.com/kQtGVAe4 .  my failure: Assertion failed: (handle->InternalFieldCount() > 0), function Wrap, file ../src/node_object_wrap.h, line 71.
09:56 < faceleg> i've been more focused on refactoring and asyncrofying 
09:56 < faceleg> I know I have to go update the examples
09:56 < faceleg> they're for the "old" (> 3 weeks) code
09:56 < zot> so far gdb'ing it hasn't shown me anything, although that's difficult cuz it fucks up my terminal, and makes stack reading very difficult.
09:56 < faceleg> which has almost totally changed
09:58 < faceleg> for example errors used to be integers, now they're actual errors
09:58 < ningu> similarly     history.on('commit', function(commit) {
09:58 < ningu> first arg should be error
09:58 < faceleg> yeah
09:59 < faceleg> tbh I haven't ever looked at these
09:59 < ningu> anyway the git log emulation thingy seems to work
09:59 < faceleg> I just started on this project ~ 3 weeks ago
09:59 < faceleg> I'm glad :)
09:59 < faceleg> all tests pass, which was a mission
09:59 < faceleg> on travis, my ubuntu box & 10.8.2
10:00 < ningu> oh, and it shows up as GitError when I open a non-existent branch
10:00 < ningu> { name: 'GitError', message: undefined, code: undefined }
10:00 < faceleg> mmmm
10:00 < faceleg> you sir have found a bug
10:00 < ningu> hehe
10:00 < faceleg> open issue?
10:00 < ningu> what's the issue? no message?
10:01 < faceleg> should be a descriptive error
10:01 < faceleg> message & code should be defined
10:01 < faceleg> I'm going for "the ideal git lib that does what you expect in a node env"
10:01 < faceleg> so if it doesn't do that it's an issue
10:02 < ningu> does it export GitError?
10:02 < faceleg> nah
10:02 < faceleg> that's a bit of a hack 
10:02 < faceleg> as I couldn't find how to export an error
10:03 < ningu> oh, nevermind
10:03 < faceleg> the exported "raw" objects handle errors
10:03 < faceleg> and wrap them in GitError before passing them off to callbacks
10:03 < ningu> I was thinking of python where it matters more
10:03 < faceleg> yeah
10:03 < faceleg> the stacktrace, message & code all come from v8
10:03 < faceleg> just not as an "Error" object
10:04 < faceleg> IMHO the module should never have an error in v8, just errors caused by incorrect usage
10:04 < faceleg> in which case a trace showing the user where they went wrong is what is necessary
10:04 < faceleg> like tyring to get a nonexistent commit
10:04 < faceleg> bad repo etc
10:04 < ningu> ok, reported the issue
10:04 < faceleg> is this wrong?
10:04 < faceleg> hooray!
10:05 < faceleg> I'll do my best to ignore it for as long as possible like any good maintainer
10:05 < ningu> I'm not sure what you mean by "error in v8"
10:05 < ningu> oh, yes I am
10:05 < ningu> well this was not a thrown exception
10:06 < faceleg> yeah
10:06 < ningu> it's passed back as the error argument
10:06 < faceleg> it comes from the libgit2 lib
10:06 < faceleg> their error is a string and an integer
10:06 < ningu> ok, so it does send that info back
10:06 < ningu> it just never gets to javascript
10:06 < faceleg> I've done my best to convert it to something we can actually use 
10:06 < faceleg> yeah
10:06 < faceleg> I was working on that part recently
10:07 < ningu> you should check for memory leaks too, what with all of your mallocs :P
10:07 < faceleg> might have accidentally removed the error data passing while flailing about
10:07 < faceleg> hahaah ahahahahaha
10:07 < faceleg> I know
10:07 < faceleg> .
10:07 < faceleg> valgrind reports itself as untrustworthy of ML
10:07 < faceleg> on*
10:07 < faceleg> so I'm not sure what to do
10:07 < ningu> they can be pretty hard to trace even when you think you know what to do
10:08 < faceleg> trust me I don't
10:09 < ningu> anyway, it all goes away with the process so it isn't that big of a deal unless it's a persistent process
10:09 < faceleg> yeah
10:09 < faceleg> love to chat but I have to go, interview tomorrow
10:09 < ningu> ok
10:09 < ningu> good luck
10:09 < faceleg> niggler: there? any tips for bank dev interview?
10:10 < faceleg> just in case he knows
10:10 < faceleg> haha thanks
10:10 < ningu> don't mention the thing they did in office space
10:10 < faceleg> I have to get up @ 5:15 AM and leave by 5:30
10:10 < faceleg> to arrive @ 9AM
10:10 < faceleg> that is in 6 hours
10:11 < ningu> 5:15am is in 6 hours? it's really 11:15pm there?
10:11 < ningu> I thought it would be earlier
10:11 < ningu> oh, I see... you're a whole 6 hours ahead of jakarta
10:11 < ningu> well the pacific sure is big
10:12 < faceleg> 11:08 but yea
10:12 < M2Ys4U> ningu: Heh, that's anunderstatement
10:12 < faceleg> I prefer to think of myself as living on the bum of the world
10:12 < ningu> I'm used to the china/australia/japan/indonesia time zones
10:12 < ningu> which are all 2-3 hours apart I think
10:13 < faceleg> yeah I think so
10:13 < faceleg> preparing for interviews is lame
10:13 < faceleg> I always just end up coding
10:14 < ningu> in preparation or at the interviews?
10:14 < ningu> I've never had a coding interview
10:14 < faceleg> prep
10:14 < faceleg> neither
10:14 < faceleg> and I hope I neve rdo
10:17 < faceleg> this is for a bank
10:17 < faceleg> not even sure how I'd handle the env
10:17 < faceleg> but still
10:17 < faceleg> mortgage and kid etc
10:18 < faceleg> protip: be born into money
10:18 < zot> lol.  interview prep can matter, if you don't know what you're walking into.  but any good interview will include some code :)
10:19 < zot> single best piece of interview advice i ever got: (genuine) enthusiasm for what a company does can compensate for a lot of question marks.
10:20 < zaleb> yeah
10:20 < ningu> my sql queries now contain $1 and $2 instead of question marks
10:20 < zaleb> thats how I got into my current company :p
10:20 < tdignan> "Design an algorithm to calculate the CEO's bonus based on taxpayer funds"
10:22 < faceleg> zot: yeah I agree, I've only applied for those co's
10:23 < zaleb> gn
10:24 < zot> so.  anybody got some love for my InternalFieldCount?  ;)  That code used to work fine, when it was all in a single file.  Then I broke 1 .cc -> 2 .cc and 1 .h file, and it went to shit.  Can't figure out what I did.
10:24 < fotoflo_> hi all. is there a way to get node.js to output the date and time when crashing?
10:25 < zot> ls -l <core file> ?
10:25 < fotoflo_> no, that relies on the system to tell you when the file was last modified
10:25 < zot> i know.  but hoped it was enough :)
10:26 < fotoflo_> but i want my logs to say when my crash happened
10:26 < fotoflo_> and i am auto-restarting on crash
10:27 < zot> seems like a catch 22.  if it's crashing, logging subsystem may be unavailable.  thus if you truly want to know, you should have a logging wrapper that detects EOF and injects the desired lines
10:27 < zot> </pedantic>
10:27 < zaleb> if you are restarting automaticly you can log the start time
10:28 < zaleb> shouldnt be to far appart
10:28 < faceleg|sleep> gn
10:29 < zot> zaleb++
10:29 < zot> wise man
10:29 < zaleb> :d
10:34 < ningu> the command "jesus restart api" feels like I'm mixing metaphors
10:39 < accrec> haha :D
10:47 < zot> ok, different query: http://nodejs.org/api/addons.html  is there a version of this that corresponds to v0.8?   for example, v0.8 seems to require an 'init' func, and v0.10 seems to be dynamic.  ie, i can't make the 'wrapping c++ objects' example compile :)
10:47 < zot> (i'm now looking at /doc in v0.8.22, and it appears to the same.  so now confused.)
10:48 < bnoordhuis> zot: the docs probably haven't been updated
10:48 < bnoordhuis> patches welcome :)
10:48 < zot> hehe
10:49 < bnoordhuis> zot: what compile errors are you getting?
10:49 < zot> actually, may have just found my typo.  bindings.gyp had 'source', not 'sources'.  not sure what exactly it was building.  so addon now works at least.
10:50 < zot> i'm not getting compile errors.  runtime errors in node.  from earlier:
10:50 < zot> struggling with an InternalFieldCount assertion failure.  my code: http://pastebin.com/kQtGVAe4 .  my failure: Assertion failed: (handle->InternalFieldCount() > 0), function Wrap, file ../src/node_object_wrap.h, line 71.
10:50 < zot> so.  anybody got some love for my InternalFieldCount?  ;)  That code used to work fine, when it was all in a single file.  Then I broke 1 .cc -> 2 .cc and 1 .h file, and it went to shit.  Can't figure out what I did.
10:51 < bnoordhuis> zot: that usually means you're passing it an object that is not "your" object
10:51 < bnoordhuis> i.e. doesn't have a binding to a c++ object
10:52 < zot> sorry, i don't follow :/
10:52 < bnoordhuis> like this: var obj = new MyBindingsObject; obj.call({}); // invoke with plain JS object
10:52 < zot> ah
10:52 < zot> where might that disconnect come from?
10:53 < bnoordhuis> that's for you to find out :)
10:53 < zot> wizard jibber jabber!
10:53 < zot> :)
10:55 < zot> jeetje!  i'm gonna smash my head into a wall.  missing 'new'.  foo = Producer() vs. foo = new Producer().  unfortunately the head thing probably won't help remember it next time.
10:56 < zot> but thanks.  that was enough to see the light
10:56 < zot> is there a better way to wrap my class so that future similar mistakes would reveal a more enlightening error?
10:56 < zot> not wrap — safeguard
11:07 < AAA_awright> Who here has ever needed to parse the Accept or Content-Type line? https://github.com/Acubed/contenttype
11:11 < zaleb> AAA_awright, nice and simple :)
11:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:13 < AAA_awright> Thanks
11:17 < AAA_awright> Huh, that's cool
11:17 < AAA_awright> In ECMAScript, if you want to define a variable *only if not already defined*
11:17 < AAA_awright> You can go:
11:17 < AAA_awright> >> var x = x || {}; x
11:17 < purr> AAA_awright: (object) {}
11:18 < AAA_awright> >> var x=2; var x = x || {}; x
11:18 < purr> AAA_awright: (number) 2
11:18 < AAA_awright> Ta-da
11:18 < AAA_awright> No more worrying about console or module or exports not being defined
11:18 < AAA_awright> Why have I never seen this trick, does it not work in web browsers?
11:19 < bnoordhuis> zot: maybe check with HasInstance() if args.This() or args.Holder() is an instance of your class?
11:20 < bnoordhuis> and return ThrowException(...) if it's not?
11:21 < zot> i take it there's no standard for doing this?  (i'd still rather add it)
11:22 < AAA_awright> >> a=a
11:22 < purr> AAA_awright: ReferenceError: a is not defined
11:22 < zaleb> nah
11:22 < zaleb> AAA_awright, some frameworks use it
11:22 < zaleb> like CreateJS
11:23 < AAA_awright> zaleb: using if(typeof undefinedVariable=='...') seems more common
11:24 < zaleb> it is more common, dont really have some background info on it :p
11:39 < davve> herro, i apologize for this is'nt the right forum but. how do i deserialize bson with the native mongodb-client? (a SlowBuffer)
11:39 < davve> maybe it is possible with standard node library?
12:02 < ElectriMaxxx> hi @all
12:24 < Sven_vB> is there a clean version of the socket.io lib browser-side part that won't flood my JS console with 100 errors just for including it in my page?
12:25 < Sven_vB> s:error:warning:
12:40 < Sven_vB> just figured out my socket.io was a quite old build, so i'll try and find a newer one.
12:50 < AlanHoff> Hello there, could someone recommend an HTTP API constructor module that integrates with Express?
12:51 < marcules> Good afternoon :)
12:51 < AlanHoff> Hello :)
12:52 < AlanHoff> Anyone have a suggestion for a HTTP Rest API module?
12:53 < zaleb> Is use request to make call, but to make an API is just use bare express..
12:53 < zaleb> is = i
12:54 < AlanHoff> Cool, I used bare express too, but now I have lots of API and I need to organize it
12:55 < AlanHoff> My code it's a mess of frontend endpoints and API endpoints, something that could organize it would be cool
12:56 < zaleb> I dont know of any existing packages but you could create a router which translates http resources to actual folder/files/function
12:58 < AlanHoff> I was willing that we already have something like this, because now I will need to implement middlewares for each API route, like auth and roles... That will be a mess..
13:06 < AlanHoff> Any good role system that integrates group features and MongoDB? :)
13:25 < shmoon> trying to understand sockets, heres a code http://codepad.org/Qf3WvDT5 - the ip and port should my my server's ? on which i'll listen for datagrams from the main server?
13:25 < shmoon> *be my
13:28 < context> shmoon: is the main server sending you datagrams?
13:29 < context> shmoon: udp socket: you send stuff out, you might get stuff back
13:30 < shmoon> honestly i dont know. i'm not good with sockets so i'm trying to understand the concept and work that way. i'm working on someone else's codebase. i am trying to understand is the ip:port of the server on which the app runs or the main (multicast) server
13:33 < shmoon> context: ?
13:34 < zaleb> http://nodejs.org/api/dgram.html#dgram_dgram_bind_port_address_callback
13:34 < shmoon> i think it should be the server's ip:port but from the way its written in node.js documentation seems like will be that of the server running the app
13:35 < shmoon> am right there yeah
13:36 < context> shmoon: what
13:38 < context> shmoon: no. you give dgram.send() the ip/port of the server you are sending the data to.
13:40 < shmoon> context: and with bind it's own server ip/port?
13:42 < zaleb> dgram ayutomaticly binds to all interfaces if you only specify a port
13:42 < zaleb> so it'll listen to any incomming trafic
13:45 < zaleb> on the specified port
13:45 < AlanHoff> hey there, any good role system manager module to suggest?
13:47 < Sven_vB> just found the talk about how to make gcc compile your JS into native code. rocks. so if someone needs another reason why to write semicolons, that might be one.
13:51 < shmoon> zaleb: ah ok, so it listens to incoming trafic on the ip:port used in bind() while the ones in send() is for destination, makes sense.
13:58 < zaleb> for instance; if you use a something like nginx in front of your application
13:58 < zaleb> you'd like to bind to 127.0.0.1
13:58 < zaleb> instead of ::0
13:59 < shmoon> whats the differnecE?
14:00 < MI6> joyent/libuv: Ben Noordhuis v0.10 * 9b61939 : unix: make timers handle large timeouts  This commit fixes two closely re - http://git.io/MoGLVQ
14:01 < zaleb> well
14:02 < grikka> ahoy
14:02 < zaleb> ::0/0.0.0.0 is open to all (eternal), ::1/127.0.0.1 is only open to local (internal)
14:02 < zaleb> eternal == external
14:03 < MI6> joyent/node: Ben Noordhuis v0.10 * e47a3e3 : deps: upgrade libuv to 9b61939 - http://git.io/CHuJRQ
14:03 < shmoon> zaleb: in the code i try a random ip and the socket gets bind to that ip:port shows in `netstat -a` too, howcome?
14:10 < zaleb> im not sure if I understnad..
14:20 < zot> how did people get any work done before the invention of screen, and the improvements of tmux?!?
14:21 < niggler> hey faceleg|sleep 
14:21 < niggler> faceleg|work lol both of you are here
14:22 < TheBrayn> http://sackheads.org/~bnaylor/spew/away_msgs.html
14:22 < zot> when dev'ing plugins, is there a way to force reload of the dynamic lib, without exit/restarting the node process?
14:25 < Cornish_Pasty> TheBrayn: too true!
14:26 < shmoon> zaleb: what i mean is
14:28  * Cornish_Pasty is currently away: going to do something that's weird or something…
14:28 < shmoon> zaleb: http://codepad.org/y5N5tF0l works fine, listening event is trigger, when that IP is not mine.
14:28 < shmoon> i just put in some ranodm IP and port
14:31 < uint32> looking for opinions: is it an okay practice to put stuff in package.json that isn't in the spec? for example, i notice a lot of projects using the non-standard "title" property in their package.json for a human readable title to reference
14:32 < zaleb> shmoon, that is indeed funky...
14:33 < FellowMD> Well, if "title" is eventually included in the spec, and means something slightly different, then your package could stop working
14:33 < FellowMD> And all old versions of the package might be invalid moving forward
14:33 < shmoon> zaleb: sorry if i am missing something, really bad with such topics :) help would be appreciated
14:34 < uint32> FellowMD: yeah I was kind of thinking the same thing - but it's a trend that seems to be catching on
14:35 < FellowMD> well you could just bet on the horse, and assume that it'll eventually be part of the spec with that definition
14:40 < mscdex> so who here is going to write the ebay replacement that's powered by node.js?!
14:41 < grikka> indexzero holler
14:41 < indexzero> yoooo
14:41 < zaleb> shmoon, privmsg
14:46 < AlanHoff> Anyway to create a readstream from node-redis keys?
14:47 < hasse> I try to request a lot of urls using this script: http://git.io/JuJMOw but after about 200 urls it starts returning 400 statusCodes for most of the urls. Does it have anything to do with maxSockets?
14:50 < AlanHoff> hasse: It could be.. But I think that maxSockets would throw an error...
14:51 < AlanHoff> hasse: maybe the remote server is rejecting your request because of too many of them
14:51 < hasse> AlanHoff: But all the urls are on different hosts
14:52 < AlanHoff> hasse: Have you tryed to raise your socket's  limit?
14:53 < hasse> AlanHoff: If this "require('http').globalAgent.maxSockets = x" is how to raise the sockets limit, then yes
14:54 < grikka> ha sorry work got in the way indexzero 
14:54 < indexzero> s'cool
14:54 < indexzero> grikka: I'll brb actually
14:55 < grikka> np
14:55 < grikka> pm me wheneber
14:55 < grikka> ill be here
14:55 < AlanHoff> hasse: Just to make sure if it is something on your side, force the script to be sync, one request per time, then you will know if the problem is with your script :)
14:55 < hasse> AlanHoff: Good idea, how can I force that?
14:57 < AlanHoff> hasse: wrap the request inside a function and call itself everytime a resquest had finished, don't forget to destroy/end the resquest, otherside your socket might stay opened.
14:58 < AlanHoff> hasse: Oh, you will need to queue that lines too :)
14:59 < AlanHoff> If you wanna save some work, you could use the async module https://github.com/caolan/async#queueworker-concurrency
15:13 < hasse> AlanHoff: danke schön
15:13 < AlanHoff> hasse: Worked? :D
15:14 < hasse> AlanHoff: Haven't tried yet, had to do some laundry
15:14 < AlanHoff> hasse: hahaha lol, ok :D
15:15 < brianc1> anyone care to discuss which node-orm is best or your favorite?
15:16 < brianc1> I'm coming pretty close to settling on sequelize
15:17 < floby> Hello everyone
15:18 < floby> I'm looking for a module that I used to know
15:18 < floby> it's about generating random objects for debugging and testing purposes
15:19 < FellowMD> faker.js?
15:19  * moonlite_ got that gotye-song on repeat now. "Now you're just a module that i used to knoooow!"
15:19 < floby> FellowMD: nah that's what I looked up first. It seems Faker.js is aimed at imitating real data
15:20 < floby> FellowMD: I just want something to generate big JSON  objects, i don't care what's in it.
15:20 < woopwoop> i have multiple socket connections, I want to wait for all of them to close before sending a json result set back to the client. how would I do that?
15:20 < floby> woopwoop: async module ?
15:21 < matbee> Is there a bug about socket.io/websockets in node.js causing memory leaks?
15:21 < floby> woopwoop: or just a counter. Every time you open a socket you increment it. everytime a socket ends you decrement it, and when it reaches 0 you're done
15:23 < woopwoop> so like multiple .on('close' statements with counters and another function to check if the counter is 0 then do something?
15:25 < AlanHoff> Does anyone know a method to read a stream from redis keys?
15:26 < floby> var count = 0;
15:26 < floby> function checkEnd() {if(--count === 0) DOWHATEVER()}
15:26 < floby> for(...) {
15:26 < floby>  var s = createSocket();
15:26 < floby>  s.on('end', checkEnd());
15:26 < floby>  count++
15:26 < floby> }
15:26 < woopwoop> thanks
15:26 < lovemuffin> end is only if you have expected behavior
15:27 < floby> ^ what lovemuffin said
15:28 < iksik> hello
15:29 < iksik> what would be the best way to run xpath selectors against html document which is not necessary a valid (x)html? 
15:29 < floby> run it first through a XML normalizer ?
15:30 < iksik> floby: how can i do that?
15:31 < floby> something like this ? http://stackoverflow.com/questions/10473875/converting-html-to-xml
15:32 < floby> http://www.ibm.com/developerworks/web/library/x-tiptidy/index.html
15:32 < iksik> ok, thanks
15:33 < matbee> Ohhh there's a memory leak with socket.io and https ^_^
15:36 < mac_nibblet> Heya peeps
15:36 < grikka> sup
15:36 < floby> hai
15:37 < mac_nibblet> Anyone got any suggestions for implement a priority queue for the async modules queue ?
15:37 < mac_nibblet> i need a minium of three priorties (low, normal, high)
15:38 < floby> I had a go at a priority queue some time ago
15:38 < floby> let me find it
15:39 < mac_nibblet> floby: a priority queue for executing callbacks ?
15:39 < floby> oh no.
15:39 < floby> but still a priority queue
15:39 < mac_nibblet> yeah thats kinda easy to implement but i need somthing i can just push tasks into with a given priority
15:39 < floby> a priority queue is a queue all in all. what anyone should be doing whilst using a queue is merely queue.shift()
15:40 < mac_nibblet> floby: yeah i know but its the execution part im having some problems with...
15:40 < floby> are you using caolan/async ?
15:41 < mac_nibblet> floby: no im currently trying to write something myself
15:41 < mac_nibblet> but yes i use that async module in other places
15:41 < mac_nibblet> https://gist.github.com/macnibblet/5213998
15:42 < lovemuffin> why cant you just do if high is empty, do normal, if normal is empty, do low?
15:42 < lovemuffin> oh you are doing that
15:42 < lovemuffin> the return null is extraneous
15:42 < mac_nibblet> hmfp
15:43 < mac_nibblet> my but is actually working it's vows that was not outputing the console loges 
15:43 < floby> https://github.com/caolan/async/blob/master/lib/async.js#L662
15:43 < floby> This is the queue he's using. it's a simple array.
15:43 < floby> Get a simple priority queue working with pethods push(), shift() and unshift(). and affect it to queue.tasks.
15:43 < mac_nibblet> nice
15:43 < mac_nibblet> :D
15:44 < mac_nibblet> floby: it was line 86 i had done wrong
15:44 < mac_nibblet> it works now :)
15:44 < lovemuffin> to nit pick, i'd reverse the way you're using the array
15:44 < jaha> would there be some reason that handlebars is stripping a recaptcha script tag when trying to place it in a modal?
15:44 < floby> mac_nibblet: glad to hear
15:44 < lovemuffin> (unshift and pop instead )
15:45 < floby> lovemuffin: we're looking at async jobs that takes more that the difference between a pop and unshift. I say we keep the semantics right =)
15:46 < mac_nibblet> Hmm
15:46 < mac_nibblet> Why would you do that ?
15:46 < lovemuffin> for performance reasons
15:46 < mac_nibblet> o.0?
15:47 < lovemuffin> when youre ready to do tasks, it matters more to have the speed
15:47 < lovemuffin> rather than when youre saving tasks
15:47 < mac_nibblet> lovemuffin: k
15:48 < lovemuffin> basically pop is faster than shift by a lot
15:49 < lovemuffin> we're talking like 100% faster, but we're also talking nanoseconds haha but its just a matter of if the implementation doesn't matter, why not ?
15:51 < al3> Hi, I'm trying to compile hubot-hipchat with mongodb that in turn depends on bson, for heroku: http://pastebin.com/fxEKrwSh
15:51 < al3> Getting funny error messages that I'm having a hard time fixing.
15:52 < floby> lovemuffin: https://gist.github.com/Floby/5214089 ?
15:53 < CoverSlide> L.O.V.E.M.U.F.F.I.N. ?
15:54 < CoverSlide> The League Of Villainous Evildoers Maniacally United For Frightening Investments in Naughtiness ?
15:54 < lovemuffin> you remembered the entire thing?
15:55 < CoverSlide> nah googled that part
15:55 < al3> Any way to debug the above error message?
15:55 < al3> I have been trying for some tim
15:55 < al3> e
15:55 < lovemuffin> i actually know what you're talking about, haha 
15:55 < lovemuffin> phineas and ferb
15:55 < CoverSlide> yeah my daughter loves the show, but also so do i
16:00 < sinclair|work> anyone here have any thoughts on google drive?
16:01 < al3> Hi, I'm trying to compile hubot-hipchat with mongodb that in turn depends on bson, for heroku: http://pastebin.com/fxEKrwSh. Does anybody have any ideas on how to debug it?
16:01 < CoverSlide> what kind of thoughts? impure thoughts?
16:04 < sinclair|work> CoverSlide: any thoughts
16:04 < sinclair|work> see google released the realtime api of resent times
16:05 < sinclair|work> offereing the same functionality as sharejs
16:05 < sinclair|work> but with documents synced to google drive
16:06 < jocafa> operational transforms?
16:06 < jocafa> *perk*
16:06 < sinclair|work> yes OT
16:06 < jocafa> ♥ ot
16:07 < sinclair|work> so, the thing is, there is no need to have a server, google manages documents on the drive, everything is done client side, tho users need to auth with google first.
16:07 < sinclair|work> jocafa: yes, i like OT also, wish Microsoft would release a good "standard" OT lib for signal r
16:08 < sinclair|work> jocafa: i wrote my own (fairly half arsed tho), but you just know, as soon as i finish writing it MS will release one
16:08 < jocafa> i had started on one a couple of years ago, too
16:09 < jocafa> too many projects, no time *sigh*
16:09 < grikka> ha isn't that always the issue
16:10 < jocafa> mhmm
16:10 < sinclair|work> so anyway, was wondering if anyone here was doing anything interesting with google drive
16:11 < sinclair|work> its quite the investment to go and spend months and months on google technology, i did that in that past only to be burnt
16:14 < MI6> joyent/node: isaacs created tag v0.10.1 - http://git.io/elvgFw
16:17 < al3> Hello? Any ideas on how to debug the heroku/npm problem? Is it a heroku problem is a npm problem? http://pastebin.com/fxEKrwSh
16:18 < FellowMD> Well enoent means file/directory doesn't exist
16:18 < FellowMD> That's about all I've got for you
16:18 < MI6> joyent/node: isaacs v0.10 * 92cc187 : blog: Post for v0.10.1 (+3 more commits) - http://git.io/6A3xvA
16:22 < al3> @FellowMD is there any way to know *what* file or dir doesn't exist and why that is the case?
16:23 < sheldonh> with an object in hand, how can i make it extend EventEmitter?
16:23 < s3shs> So node-mysql does pools of connections.  But doesn't do transactions.  Is that right?
16:24 < FellowMD> @al3 It's been a while since I've seen it, so I don't remember very well. But I believe lat time I ran into it, it was the executable I was trying to run with spawn
16:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:25 < FellowMD> ie I was spawning 'node', but node wasn't on the PATH of the spawning process
16:25 < al3> FellowMD: except that I'm not trying to spawn anything, only fetch some mongodb packages
16:26 < cxreg> does it make sense to run smartos as a guest on a linux kvm host?
16:26 < cxreg> i'd like to try it out for my app, but the infrastructure here is all ubuntu kvm hosts
16:29 < shmoon> http://nodejs.org/api/dgram.html#dgram_dgram_addmembership_multicastaddress_multicastinterface - multicastAddress is the server that sends multicast data to the clients (me) ?
16:30 < diversario> no, that's address to which messages are sent
16:31 < diversario> like '239.255.255.250'
16:31 < shmoon> ah so that address has to be mine
16:32 < shmoon> where is the server's address specified in the whole bsiness?
16:32 < diversario> when you do server.send(message, 0, message.length, 1900, '224.0.0.1');
16:46 < timoxley> diversario also note message.length != byte length
16:51 < diversario> timoxley: my messages are regular ascii string, wouldn't byte length be same as msg length in that case?
16:57 < timoxley> diversario yep ascii is fine, though if that data is coming from user input, you may want to enforce that
16:57  * timoxley had horror debugging issue the other day due to forgetting this
17:03 < turova> I'm trying to convert a websockets connection to a TCP connection and can't seem to find any real information on how to do this... Anyone here familiar enough with websockets to help?
17:08 < diversario> timoxley: heh, i can imagine. thanks for the tip
17:11 < segomos> turova: what do you mean by convert the websockets connection to a TCP connection
17:19 < mscdex> segomos: transformers!
17:19 < MI6> joyent/node: Trevor Norris master * f150d56 : src: write ascii strings using WriteOneByte  WriteAscii will be deprecate - http://git.io/hPBC8w
17:23 < sshaginyan> Hey guys what's the equivalent of http.get in express?
17:24 < sshaginyan> app.get('IS this the external url I should set')?
17:24 < sshaginyan> and how do I set options
17:24 < sshaginyan> ?
17:26 < AlanHoff> sshaginyan: Express doesn't have external url fetch feature
17:30 < sshaginyan> Hey guys I'm writing an API server. Should I close https.get after every request?
17:38 < Borja> I have a server with 1000 tcp sockets. When a user has an unexpected error, the server goes down with all users. What is the correct way to fix this? Thanks.
17:41 < tuhoojabotti> Borja: Domains?
17:41 < Borja> tuhoojabotti: I dont understand
17:42 < tuhoojabotti>  Use domains to catch exceptions?
17:42 < adunkman> Borja: http://nodejs.org/api/domain.html
17:42 < Borja> thanks
17:42 < tuhoojabotti> Sending links on tablet is not so easy
17:43 < tuhoojabotti> So I waited for good guy adunkman to do it for me.
17:43 < adunkman> Though, I'd recommend just fixing your unexpected errors.  :p
17:43 < tuhoojabotti> adunkman: There is no such thing as bug free code.
17:44 < tuhoojabotti> Minimizing their impact is important.
17:49 < kenperkins> ok anyone an expert at exceptions with node
17:49 < nanashiRei> guys.. what could be wrong, beside the server clock, which is right... if node is -12hours
17:50 < azylman_> kenperkins: What exactly is your problem? Not that I'd call myself an expert, but you never know until you try :)
17:50 < mscdex> kenperkins: what is the problem?
17:51 < kenperkins> well, I have a class that is new'd up (i.e. foo = new Service({ ….. });
17:51 < kenperkins> if the inputs are invalid, was planning to throw
17:51 < kenperkins> the problem is of course, the new call is nested inside of some asyncs
17:51 < nanashiRei> when.js
17:51 < kenperkins> let me gist 1 sec
17:52 < nanashiRei> rescue yourself
17:52 < adunkman> I typically solve that kind of problem using event emitters, foo.on("error", ...);
17:52 < azylman_> I think supposedly domains or promises can solve that as well
17:52 < kenperkins> hm
17:53 < azylman_> You could also just wrap it in a try...catch where you instantiate it via new and if it catches call your error callback
17:53 < till_> has anyone thought about providing actual package downloads (vs cloning them)?
17:54 < kenperkins> https://gist.github.com/kenperkins/5215087
17:54 < adunkman> till_: npm provides actual package downloads...
17:54 < kenperkins> try's have problems, because any exception on that callstack gets caught
17:55 < kenperkins> which isn't necessarily what you want
17:55 < ccowan1> kenperkins: I would move the  new Service(body) to a var service = new Service(body); wrapped in a try/catch
17:56 < ccowan1> then if there is an error call the callback(e) from the catch
17:56 < ccowan1> I will add comments to your gist
17:56 < MI6> joyent/node: isaacs master * 2f88272 : Merge remote-tracking branch 'ry/v0.10' into master  Conflicts: 	src/node (+31 more commits) - http://git.io/m6MECw
17:56 < kenperkins> ccowan1: see my comment on the girst
17:57 < azylman_> kenperkins: What do you mean by catching all exceptions on the current stack? What exceptions is that catching that you do not want it to catch?
17:58 < kenperkins> azylman_: for example, if I'm executing that via mocha with should assertions, they get caught
17:58 < ccowan1> jinks
17:58 < MI6> joyent/node: Trevor Norris master * f7ebb4d : doc: update that ascii write doesn't convert null  Since WriteBuffer has  - http://git.io/wCvO7g
17:58 < ccowan1> you owe me a coke :D
17:58 < kenperkins> maybe I can write a demo 1 sec
17:58 < azylman_> kenperkins: That might be because the callback is also in the try, but I'm not sure - that's pretty weird behavior I haven't seen
17:59 < ccowan1> kenperkins: it will catch
18:00 < azylman_> kenperkins: Try something similar to the comment I made and see if that has the same behavior?
18:01 < ccowan1> azylman_: that would prevent catching something throw in the callback
18:01 < azylman_> I think that's the point, he only wants to catch things thrown by the `new Service` line
18:01 < azylman_> ccowan1
18:01 < ccowan1> but yes… it will catch anything that bubbles up from the callback too if you use our example
18:02 < till_> adunkman: how do i enable that?
18:03 < till_> it seems to clone all my "installs"
18:03 < turova> segomos: I want to direct websockets VNC data to a native vnc client.  I know there's a tool (websockify) to do the opposite - run VNC in the browser - but I can't find any easy way to convert websockets VNC data back to its TCP form..
18:03 < Collin_> Is there any known issue that would cause Node.JS performance to decrease over time?
18:03 < ccowan1> kenperkins: Are you throwing exceptions because you're testing values in the argument passed?
18:03 < Collin_> I'm finding that the longer I leave my server up, the lower it's throughput becomes
18:03 < kenperkins> 1 sec sorry in editor
18:05 < adunkman> till_: It usually installs from tarballs, unless you specificy otherwise.
18:05 < ccowan1> Collin_: which version of node?
18:06 < bradleymeck> Collin_: does the RSS or CPU increase?
18:06 < adrianF> hey guys, im looking for a logo for a web developer user-group, any ideas? :D
18:06 < Collin_> We're using Node 0.8.6
18:06 < Collin_> bradleymeck: Not sure what you mean by RSS, but CPU is fine
18:07 < bradleymeck> Collin_: reserved address space for memory
18:07 < ccowan1> I know there where a bunch of memory leaks fixed in 0.8.20
18:07 < ccowan1> Collin_: ^^^
18:07 < Collin_> I didn't check memory, maybe I'll suggest updating
18:08 < RainbowDash_> Hey guys anyone here?
18:08 < ccowan1> You will see more socket disconnect exceptions so you will need to handle those.
18:08 < andu> adrianF, got bitcoins?
18:09 < adrianF> huh? :)
18:09 < lovemuffin> he wants you to pay him
18:09 < andu> ;)
18:09 < adrianF> ah :D
18:09 < kenperkins> ccowan1: what's the standard operating procedure for invalid inputs in a synchronous constructor?
18:09 < adrianF> no sorry :p
18:09 < kenperkins> (yes, I'm validating and throwning on invalid inputs)
18:10 < Collin_> Also, just in case anyone has encountered this, I'm streaming a HTTP request to a spawned process's stdin. I'm sometimes getting cases where I either stream more data than the client sent or less data than the client sent (usually it seems to be +/- 1024 the Content-Length)
18:10 < RainbowDash_> how do i add a main method ?????
18:10 < Collin_> Has anyone else seen this?
18:10 < RainbowDash_> please tell???
18:10 < andu> RainbowDash_, while (1=1) { } ?
18:10 < RainbowDash_> i have been stuck for a while and none of these books tell me how to do it they all suck
18:11 < lovemuffin> why do you need a 'main method' ?
18:11 < RainbowDash_> the same reason you need a love muffin
18:11 < azylman_> wat
18:12 <@mbalho> RainbowDash_: it sounds like you are looking for the java channel, not javascript
18:12 < RainbowDash_> wut
18:12 < willwh> or trollin'\
18:12 < lovemuffin> yea, trolling
18:12 < RainbowDash_> What's the name of the java channel??
18:12 < willwh> that would be #java
18:13 < grikka> heh
18:13 < RainbowDash_> okie thanks guys!!!
18:13 < lovemuffin> i dont see how if he wanted java, he went into node.js
18:13 < willwh> nor me
18:13 < azylman_> I think he's actually just very confused
18:13 < ccowan1> kenperkins: I'm not sure there is a standard way. Most of the stuff I've been doing these days has been more functional the oop.
18:13 < grikka> he wanted the scripz
18:13 < azylman_> $20 says he's trying to learn #node.js and comes from a java background
18:13 <@mbalho> "never attribute to malice what can be attributed to ignorance"
18:14 <@mbalho> also treating trolls like children works pretty well in my experience
18:14 < willwh> mbalho++
18:14 < willwh> yes
18:14 < ccowan1> kenperkins: So something like createService(options, callback) then return and new Error() if any of the options are invalid.
18:15 < adunkman> mbalho++
18:15 < azylman_> kenperkins: In most of our code, we throw but don't ever worry about handling the errors - basically, if it's our code, we know the inputs are okay and if the inputs are user-generated we validate them outside of the constructor
18:16 < azylman_> Not sure if that fits your use case though
18:16 < ccowan1> kenperkins: +1 what azylman_ said. It just depends on what your doing.
18:21 < kenperkins> part of the problem in this case is one of the inputs can't be validated until after going over the wire :S
18:21 < kenperkins> I'll figure itout
18:23 < ccowan1> kenperkins: So doing the createService(options, callback) would solve that because you could make the request, validate it then call the callback with the new Service if everything checks out.
18:23 < kenperkins> right, but then new Service() … can't throw can it?
18:23 < kenperkins> (on invalid inputs)
18:23 < ccowan1> it wouldn't need to
18:23 < ccowan1> all the validation would happen inside the createService method
18:24 < ccowan1> before it initalizes the service
18:24 < kenperkins> aren't you just externalizing the validators then?
18:25 < ccowan1> outside the Service constructor, yes but inside the createService method
18:29 < ccowan1> think of it as createService as a factory method but instead of returning a value it calls a callback (the node way)
18:30 < azylman_> You can make it a method on the prototype to make it a bit cleaner
18:30 < azylman_> Service.create
18:30 < Sven_vB> can anyone see why my socket.io chat experiment stubbornly retries websocket instead of keeping with xhr? (i'm behind a proxy that cannot upgrade to websocket.) also, what properties of [object Event] should i log? http://paste.ohai.su/2140/88891913/
18:31 < ccowan1> kenperkins: again +1 azylman_
18:31 < kenperkins> yes, this is great discussion
18:31 < kenperkins> really appreciate it
18:31 < azylman_> Basically at that point you're making an asynchronous constructor
18:32 < ccowan1> kenperkins: np… if the service is a module then you could just module.exports = function(options, callback) { … };
18:32 < kenperkins> yep
18:34 < sadtaco> I thought npm comes with node.js now days?
18:34 < sadtaco> I got the latest, built from source, and npm isn't found
18:35 < ccowan1> sadtaco: Did you check your PATH 
18:35 <@mbalho> sadtaco: 0.10.0 and you did make install? if it put a node executable in your path it shoulda put a npm as well
18:35 < sadtaco> uh wait maybe
18:36 < sadtaco> Ah yeah I just did make, it took so long that I forgot I wasn't finished :D
18:37 <@mbalho> hehe
18:37 < azylman_> I can't remember the last time I had to build something from source
18:37 < azylman_> Probably like 2001, lol
18:37 < azylman_> I'm pretty sure I would not remember to make install
18:37 < sadtaco> last I tried the debian package of node, I didn't like it
18:37 < kuja> I tend to for my vagrant machines.
18:38 < sadtaco> Well make took 10-20 minutes
18:38 < ccowan1> sadtaco: What OS? The deb packages from Chris Lea are awesome
18:39 < ccowan1> sadtaco: https://launchpad.net/~chris-lea
18:39 < ccowan1> node.js is 0.10.0 and node.js-legacy is 0.8.21
18:40 < sadtaco> debian
18:41 < mollo> hi
18:48 < MI6> joyent/node: Fedor Indutny v0.10 * bfd16de : timers: handle signed int32 overflow in enroll()  Before this patch calli - http://git.io/RJC9uQ
18:59 < Astraea> Is anyone here familiar with using node and Twitter?
19:01 < Astraea> Or the OAuth module. I'm trying to figure out how it works and what it does,
19:01 < Astraea> but the material I've found assumes you already know how Open Auth works.
19:01 < ccowan> Astraea: Checkout passport.js
19:02 < ccowan> It's makes authenticating with Twitter (and other OAtuh providers) a piece of cake.
19:02 < ccowan> http://passportjs.org/
19:03 < Astraea> I'll give it a shot. It seems getting yet another layer of abstraction involved is just going to complicate things, though.
19:04 < bencevans> ccowan, Astraea: definitely, I switched from everyauth to Passport today, wish I did it way back now
19:05 < Astraea> I guess this is why I'm not sold on Passport:
19:06 < Astraea> I don't just need users to sign into my site via Twitter, I want my Twitter App to be able to access users' accounts and make changes on their behalf.
19:06 < ccowan> Astraea: I would think of it as a layer of simplification
19:07 < ccowan> Astraea: It will give you the access token you need to access the API via http.get or request
19:07 < ccowan> so you don't have to do all the oauth dancing
19:07 < Astraea> Hm...
19:09 < Astraea> So right now I'm doing: var tweeter = new OAuth(configuration_args);
19:09 < Astraea> And then: tweeter.post(url, tokens, etc);
19:09 < Astraea> To actually send the post request.
19:10 < Astraea> Once I have the token from Passport, how would I send an authenticated post request using that token? Is that something Passport handles?
19:11 < ccowan> You would need to check the twitter API docs… But it should just be a rest call
19:12 < Astraea> Okay, I'll get to reading.
19:13 < Astraea> In all my noding, I've only received requests, never sent them.
19:13 < Astraea> Thanks
19:14 < ccowan> Astraea: I would recommend using the request module over the core http.get (but that's just my preference)
19:14 < ccowan> later
19:15 < Astraea> Okay, I'll look into that, too.
19:16 < AlanHoff> Someone know a good module por roles and acp?
19:21 < mappum> where are npm global packages installed?
19:22 < adunkman> https://npmjs.org/doc/global.html
19:25 < mappum> adunkman: ty
19:45 < thomasreggi> I'm looking for a cron-like watch script unix not node-specific...
19:46 < thomasreggi> on update file execute script
19:50 < droopy> thomasreggi: well for a node-specific way  check out http://nodejs.org/docs/v0.4.3/api/fs.html#fs.watchFile
19:53 < lovemuffin> thomasreggi: watch & stat
19:53 < droopy> thomasreggi: or in general looking for something that uses inotify http://en.wikipedia.org/wiki/Inotify
19:56 < droopy> thomasreggi: like pyinotify for python
19:57 < lovemuffin> nah theres standard unix commands for it , watch & stat
19:59 < SandorKrasna> hello, i am using an async fs.readdir in a route to get a list of images. when i first go to the route /getimages i get a blank array but when i go the second time i see the list just fine, how do I make my route wait for the response of the fs call
20:01 <@mbalho> SandorKrasna: https://github.com/maxogden/art-of-node#callbacks
20:03 < SandorKrasna> i am using the callback already but my route /getimages is called the first time the callback has yet to fire
20:03 <@mbalho> SandorKrasna: it sounds like you dont understand callbacks yet, i linked to an explanation
20:04 < thomasreggi> droopy: I just made something using node.
20:04 < thomasreggi> droopy: i've had problems with inotify and osx
20:05 < SandorKrasna> here is the code to better understand my issue http://pastebin.com/u3ZR05v2
20:06 < droopy> thomasreggi: hah yeah no inotify on osx
20:06 <@mbalho> SandorKrasna: you would need to do something like require("./griddata", callback); it explains it in the link
20:07 < SandorKrasna> ok thanks, im reading now
20:07 < droopy> thomasreggi: just read about incron, too bad you can't use that either :(
20:07 < thomasreggi> droopy: I just feel like it's so simple
20:07 < thomasreggi> droopy: perhaps a .config file that goes inside your project directory
20:08 < willwh> mbalho: that is a very helpful link :)\
20:09 <@mbalho> willwh: thx im writing it as we speak
20:10 < s5fs> put a shout out to willwh in it!
20:11 < droopy_> lovemuffin: watch just polls preiodically right?
20:11 <@mbalho> i will merge pull requests with good content :D
20:11 < thomasreggi> I have an issue where __dirname has a space in it. How can I fix this??
20:12 < droopy_> thomasreggi: why is than an issue?
20:12 < thomasreggi> droopy_: I'm using that path to run a exec comand
20:13 < droopy_> thomasreggi: quote the path in the exec command
20:13 < s5fs> ^^
20:14 < thomasreggi> perfect!
20:15 < thomasreggi> droopy: can I follow you on github whats your username?
20:22 < izemize> hello from hungary
20:24 < izemize> I'd like to do chat app to my website. Can anyone have good and simple chat application? eg. node-chat?
20:24 < jocafa> izemize:  there are probably already a number of modules.  you should search through npm :)
20:26 < izemize> okay, thanks
20:29 < SandorKrasna> mbalho: require isn't async so i can't pass it a callback but the thing that it requires is using async 
20:29 < SandorKrasna> any suggestions?
20:30 < SandorKrasna> my code http://pastebin.com/u3ZR05v2
20:31 < beau-_> SandorKrasna: you'll want to export a function that takes a callback, then require your module and call that function and pass in the callback (if it's supposed to happen on every request) or just call it once and have your app.listen() in the callback (so that the app isn't listening until initialization has been done)
20:35 < SandorKrasna> thanks for the tip beau, should I still do my module.exports inside the fs callback?
20:36 < gotwig> Hello world
20:36 < gotwig> Does someone of you have heard of Pomelo JS?
20:37 < gotwig> "A Fast, Scalable, Distributed Game Server Framework For nodeJS"
20:37 < Collin_> So many red flags
20:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:40 < bradleymeck> gotwig: i have
20:40 < bradleymeck> it has some odd jittering when it came out, not sure about now
20:40 < beau-_> SandorKrasna: i would put the call to fs.whatever inside your exports.init function (or whatever you'd like to call it)
20:40 < gotwig> bradleymeck: jittering? please continue ;D
20:41 < bradleymeck> gotwig: data emulation on client side being reset from server events
20:41 < gotwig> meaning they dont synchronize very well
20:41 < gotwig> and overwrite each other
20:42 < gotwig> I am right now taking a look at roots (CSS)
20:42 < gotwig> IMHO it looks useless
20:44 < gotwig> what is the alternative on nodeJS for PHP's SESSION Array
20:45 < jesusabdullah> gotwig: connect session middleware?
20:45 < gotwig> what?
20:45 < gotwig> I just want to store some data for each user, serverside
20:45 < gotwig> like with $_SESSION
20:46 < gotwig> http://stackoverflow.com/questions/7420051/store-session-data-using-memorystore-in-node-similar-to-sessiondata-val
20:46 < gotwig> wow, that looks really confusing
20:50 < willwh> gotwig: adverse to something like express?
20:51 < gotwig> willwh: yeah, a friend recommended me that as well
20:51 < gotwig> so with express you can save serverside cookies for each connection?
20:51 < willwh> http://stackoverflow.com/questions/5522020/how-do-sessions-work-in-express-with-nodejs
20:53 < willwh> that is pretty much what you want, right?
20:53 < SandorKrasna> izemize: where in hungary are you from
20:53 < willwh> tjholowaychuck (the author of express) is often in #express
20:53 < willwh> doesn't look like he is atm though
20:53 < izemize> Vác!
20:53 < willwh> but other knowledgable people are
20:53 < SandorKrasna> En Debreceni vagyok
20:54 < izemize> :-)
20:54 < SandorKrasna> Are a lot of people using node in hungary?
21:01 < gotwig> what is a middleware in that case
21:02 < SandorKrasna> beau: thanks for your help i got it working
21:06 < beau-_> SandorKrasna: awesome! :)
21:08 < SandorKrasna> does it make any difference to use an async method for an api that just returns a json object
21:08 < inspiron> where do you put the domain name that a package is run on? I saw 'name'. But is there section for full domain name, i.e. http://this-app-runs-here.com
21:11 < lovemuffin> you could specify a home page
21:14 < droopy> I'm getting an error from Passport when the username doesn't exist
21:14 < droopy> Error: Can't set headers after they are sent.
21:15 < droopy> the LocalStrategy I'm using is here http://hastebin.com/wuqowakihe.coffee
21:15 < droopy> Error comes from the last return statement
21:16 < droopy> that LocalStrategy is almost verbatim from the Passport docs
21:19 < ljharb> why is that a .coffee? it looks like nice, normal JS
21:20 < droopy> no idea, that's the extension hastebin assigned it
21:20 < ljharb> ah
21:20 < ljharb> droopy: and it's probably cause you're doing the user middleware stuff in the wrong order
21:20 < droopy> it's in a .js file in real life
21:21 < ljharb> also have you set passport.serializeUser and passport.deserializeUser callbacks?
21:21 < droopy> yes passport.serializeUser and passport.deserializeUser both work
21:22 < ljharb> gist them? just in case
21:22 < ericelliott> How do I get node to exit when it encounters an error?
21:22 < ljharb> i'm comparing to my working passport impl, but i'm using a twitter auth strategy instead
21:22 < ericelliott> uncaught exception..
21:22 < ljharb> ericelliott: if you don't catch it, it always exits
21:22 < spion> https://news.ycombinator.com/item?id=5419030
21:22 < ericelliott> ljharb: that's what I was expecting, but that's not what's happening.
21:23 < ljharb> spion: it's not in the spec, they shouldn't implement it.
21:23 < spion> if you care about getting generators and yield into v8, lets put some pressure on..
21:23 < spion> its not in the specs?
21:23 < ljharb> spion: people should be bugging tc39 if they want features, not v8.
21:23 < ljharb> oh wait, i see the link
21:23 < ljharb> ok lol well then good, the spec's not finalized yet anyways tho
21:23 < ericelliott> ljharb: I'm using express and bunyan -- maybe one of those is catching unhandled exceptions?
21:23 < ljharb> ericelliott: no idea about bunyan. express doesn't afaik
21:24 < spion> but nothing can be finalized with just one implementation
21:24 < spion> :/
21:24 < droopy> ljharb: http://hastebin.com/yeroseqeri.js for passport.serializeUser and passport.deserializeUser
21:27 < ericelliott> ljharb: hmm.. it's not bunyan...
21:28 < lovemuffin> where is the error happening
21:28 < cesarstafe> hi people, I am a newbie using node.js to build my personal web app ( www.cesardiaz.com.ar )  and I have a doubt
21:28 < ericelliott> oh.. maybe it's the new relic beta...
21:29 < cesarstafe> how to enable this app as a service in my Ubuntu server
21:29 < ljharb> droopy: not sure why you'd ever have no user and also no error, but ok - those do look just fine
21:29 < ericelliott> cesarstafe: don't we all?
21:29 < cesarstafe> which package or script can you suggest to use for checking that my app is running or restart if not
21:29 < cesarstafe> ?
21:29 < ljharb> forever, or nodemon
21:29 < ljharb> probably forever is best
21:30 < cesarstafe> ah
21:30 < cesarstafe> forever
21:30 < cesarstafe> ok
21:30 < ericelliott> ok..
21:30 < ericelliott> it's not newrelic
21:30 < cesarstafe> I will take a look .. and many thanks for your help!
21:30 < lovemuffin> are you sure the error is throwing?
21:30 < lovemuffin> or are you just talking about a general error object
21:30 < ljharb> droopy: do you need cookie support for localstrategy?
21:30 < spion> I've been using forever for about 5-6 months and it seems to be extremely stable.
21:30 < cesarstafe> ericelliott: what? I don't understand you with your comments
21:31 < ericelliott> cesarstafe: Sorry.. talking about my own problem. Just ignore me. =)
21:31 < droopy> ljharb: username is not matching any users in the database intentionally, having a bad user is a non-error condition situation per the passport docs 
21:31 < cesarstafe> ahh
21:31 < cesarstafe> lol
21:31 < cesarstafe> sorry. I though that you were answer to me
21:31 < cesarstafe> ;-)
21:32 < cesarstafe> * answering
21:32 < droopy> ljharb: intentionally -> means I'm testing what happens when someone enters the wrong username. Currently node crashes, not good ;)
21:32 < ljharb> gotcha
21:33 < Astraea> Anyone familiar with using Twitter in node?
21:34 < ljharb> theres tons of ways to "use" twitter, what do you mean?
21:34 < droopy> ljharb: yes using cookies heres my app.configure so you can see the middleware load order, again totally by the book... http://hastebin.com/jijujoledo.coffee
21:34 < Astraea> I've got users signing in via Twitter, and I now have a token and secret associated with their account.
21:34 < ljharb> droopy: hm, that does seem correct to me
21:34 < Astraea> But I can't figure out how to use that token and secret to send tweets from their account.
21:35 < ljharb> droopy: node/passport latest?
21:35 < ljharb> Astraea: you can't
21:35 < ljharb> signing in via twitter doesn't automatically give you tweet privileges afaik
21:35 < ljharb> https://dev.twitter.com/docs/browser-sign-flow
21:35 < ljharb> you have to send them to a second oauth page to authorize that
21:36 < droopy> ljharb: node definitely is, just upgraded today, I'll check passport
21:36 < lovemuffin> yea it doesn't, you have to request the permission when the user authorizes your app
21:36 < ljharb> lovemuffin: which you can't do on the initial step if you're using "sign in with twitter"
21:36 < ljharb> Astraea: and, just fyi, be careful sending tweets as someone else. if they didn't explicitly ask for each one, you're probably violating the TOS and also being a dick
21:36 < hyperboloid> Make sure you've enabled read + write permissions for your Twitter app
21:36 < Astraea> Yes, the Twitter sign in page says on it "Authorize antlerpig_test to use your account?"
21:37 < ljharb> Astraea: and the permissions listed do not say "send tweets"
21:37 < Astraea> And then it says that the application will be able to Update my profile and send tweets.
21:37 < Astraea>  "Post Tweets for you."
21:37 < ljharb> ok, if you've done that then you should be able to just post to the api as that person
21:37 < droopy> ljharb: yeah totally up to date
21:38 < Astraea> Well, that's the problem, I don't understand how to do that. I've only been using the Twitter API for a day, and I've never sent http requests before, only received them.
21:39 < Astraea> From what I'm reading, it seems I'll need to use that token and secret in an Oauth request, but the Oauth module doesn't have any reference.
21:42 < droopy> Error is occurring on setting the "Location" header for a redirect
21:42 < inspiron> is there anyway to do this: http://pastebin.com/BhFywDEM  I'm trying to create my tasks dynamically
21:43 < inspiron> opps, wrong channel
21:43 < Astraea> Does anyone know where I can find a reference for the OAuth module? It would be a huge help to just know what the arguments are, instead of trying to infer from examples on stackoverflow.
21:52 < ningu> new node *and* new perl released today... the scripting world is overflowing
21:52 < Aikar> If I have an interactive app (with its own console) i want to proxy through node, what is wrong with this? var child = cp.spawn('mcrcon', args, {'stdio': [process.stdin,'pipe', 'pipe']});
21:53 < Aikar> sing stdio:inherit works, but not if i wanted to filter the output heh
21:53 < Aikar> but i guess i can live with full inheriting
21:54 < ningu> Aikar: if you want to filter the output you should use event listeners
21:54 < ningu> process.stdout.on('data', ...)
21:54 < ericelliott> OK
21:54 < ericelliott> so ...
21:55 < Aikar> ningu: yes i did that, but i couldnt get the stdin to proxy correctly w/o using stdio: inherit
21:55 < Aikar> which then listeners dont work
21:55 < ericelliott> I created a test app with only one dependency -- express. I throw an unhandled exception, and .. express catches it.
21:55 < ericelliott> apparently I need to listen for the exception on the express app and exit?
21:56 < ljharb> ericelliott: what kind of exception is it?
21:56 < ningu> Aikar: not sure what you mean by "proxy correctly" but presumably you can do process.stdin.on('data') and then do child.stdout.write(foo)
21:56 < ljharb> generally you *dont* want your app to exit on errors, you want an uncaught exception handler to throw up a 500 page or something
21:56 < ericelliott> ljharb: I'm just throwing a random eror.
21:56 < ningu> ericelliott: yes, app.use(function (err, req, res, next) { ... })
21:56 < ljharb> errors are for when you don't know what's going on. why throw one on purpose and not catch it?
21:57 < ningu> ljharb: because you're testing your exception handling?
21:57 < lovemuffin> ningu: good news it works! haha
21:57 < ericelliott> ljharb: I'm throwing on purpose to test exception handling.
21:57 < ericelliott> ^^
21:57 < ningu> ericelliott: middleware with that special 4-arg structure is an error handler
21:57 < ljharb> lol ok,  then yeah app.use
21:57 < ericelliott> thanks ningu
21:57 < ningu> ericelliott: and I believe all others are skipped once it throw
21:57 < ningu> *s
21:57 < Aikar> ninja literally execute process and type into stdinput... a console
21:57 < ningu> next(err) will do the same
21:58 < ningu> Aikar: listeners will work. you must be doing something wrong.
21:58 < ningu> listen on the parent's stdin, write to the child's stdin.
21:58 < ningu> or just pipe
21:58 < ningu> as in, process.stdin.pipe(child.stdin);
22:00 < ningu> Aikar: if that doesn't work I'll eat my hat and that would be unfortunate
22:00 < Aikar> https://gist.github.com/aikar/5217160  this works, i dont need the output filter for interactive mode anyways
22:01 < ningu> ah I see, inherit vs. pipe is important for interactive input
22:02 < Aikar> just writing a helper script so i can type 'command someshortalias' and itll auto execute the command with more args (host/port/pass) and optionally execute on multiple servers, so i filter the output to print what server its printing from, but for interactive mode... doesnt really need the server printer since can only do 1 at a time anyways
22:03 < Aikar> its an rcon script :P
22:03 < ningu> Aikar: ok, well I still think pipe should work.
22:04 < ningu> I've done similar things in the past and had no issue.
22:06 < ningu> hmm... maybe I'll start using the expression "put that in your pipe and buffer it"
22:07 < SomeoneWeird> lmao
22:08 -!- mode/#Node.js [+o isaacbw] by ChanServ
22:08 < ningu> that was weird, whatever just happened
22:09 < ningu> I got kicked off and signed back on in time to see myself say something
22:11 < SomeoneWeird> wat
22:11 < SomeoneWeird> lol
22:11 < dayom> has anyone fucked around with meteor extensively?
22:12 < ningu> dayom: I tend to stay away because of the heat and particulate matter
22:12 < dayom> zinger
22:12 < ningu> people here think meteor is a joke
22:12 < ningu> I haven't looked at it but going to their web site doesn't help dispell that impression
22:13 < dayom> I mean
22:13 < dayom> it does broadcasting across web browsers
22:13 < dayom> irt
22:13 < dayom> was wondering if anyone has done subset broadcasting
22:13 < pachet> ningu: that particulate matter is the shit though
22:13 < pachet> asteroid regolith bro
22:13 < pachet> keef from space
22:14 < substack> dayom: there are plenty of modules that individually do all the things that meteor does
22:14 < substack> meteor just bundles that functionality all together into a single project
22:14 < gotwig> why is nodeJS so primitive
22:14 < substack> I personally don't like that railsy approach but lots of devs do
22:14 < gotwig> you need stuff like express, to really start doing work
22:14 < gotwig> and there is no DOM in nodeJS
22:14 < gotwig> why
22:14 < SomeoneWeird> so..?
22:14 < dayom> yeah what?
22:15 < ljharb> gotwig: because it's not a browser?
22:15 < SomeoneWeird> because it's not a web page?
22:15 < azylman_> Why would there be a DOM in node?
22:15 < gotwig> but you can use a DOM with a library
22:15 < ljharb> gotwig: name a language that you don't need a framework of some kind to start doing work
22:15 < pachet> those sound an awful lot like
22:15 < pachet> excuses
22:15 < gotwig> ljharb: PHP
22:15 < SomeoneWeird> gotwig, hahahahahaha
22:15 < substack> gotwig: so that people can build modules on top of it that do what people need
22:15 < ljharb> gotwig: you need apache. that's a library.
22:15 < gotwig> ljharb: I install php, I install apache. Thats it
22:15  * ningu wonders if it's "go twig" or "got wig"
22:15 < ljharb> gotwig: yes but you install APACHE. that's like adding express to node, except not as easy and nice to use.
22:16 < substack> gotwig: if you have a towering abstraction stack like rails then you're stuck with the many choices that rails makes for you
22:16 < ningu> substack: you're confusing one troll for another
22:16 < ljharb> gotwig: `npm install express` is far simpler than installing and configuring apache.
22:16 < gotwig> ljharb: its not
22:16 < gotwig> apache is another process
22:16 < ljharb> what's processes got to do with it
22:16 < dayom> what is going on right now
22:16 < ljharb> it's another thing
22:16 < gotwig> PHP is a virtual machine, other process
22:16 < ljharb> lol
22:16 < ningu> dayom: sorry, that was mean, you aren't a troll. I was just being snarky.
22:17 < gotwig> whats wrong with DOM support at nodeJS
22:17 < gotwig> I mean, there are libraries which can do that for you
22:17 < ningu> gotwig: what does that even mean?
22:17 < ningu> gotwig: what do you consider "DOM support" to be?
22:17 < gotwig> handeling DOM elements
22:17 < dayom> node doesn't run in the browser
22:17 < ningu> DOM elements that come from where?
22:17 < dayom> bro
22:17 < gotwig> by selector... when you e.g print something out
22:17 < schofld> hi everyone :)
22:17 < dayom> or bra
22:17 < azylman_> You don't know what the difference between a client and a server is, do you :/
22:18 < gotwig> azylman_: seller and consumer :O
22:18 < schofld> what package could i use for registering users and authentication
22:18 < ningu> gotwig: and where would the page containing the html come from?
22:18 < gotwig> request response
22:18 < schofld> any tips 
22:18 < gotwig> ningu: gets created via nodeJS?
22:18 < ChrisPartridge> schofld: pretty broad question, web app?
22:18 < gotwig> ningu: or what if I want to parse a page into nodeJS
22:18 < gotwig> ningu: what then
22:18 < schofld> (can passportjs handle user registration via your own usename and password)
22:19 < schofld> jupp a web app
22:19 < ningu> gotwig: for that you can use jsdom or cheerio. but that's a very different use case than client-side js
22:19 < gotwig> how can I than navigate trought the parsed site
22:19 < ChrisPartridge> schofld: using a specific database? specific framework?
22:19 < gotwig> ningu: yeah.... see?
22:19 < ChrisPartridge> gotwig: there are a tonne of DOM modules in npm
22:19 < ningu> gotwig: see what? I'm not aware of any language that has something like cheerio built-in.
22:19 < ningu> and I don't see why it should.
22:20 < gotwig> I don't know how native that stuff is
22:20 < ningu> but either way, it's kind of silly. it doesn't matter very much whether it's built-in.
22:20 < gotwig> I guess its going to rip down your performance
22:20 < ningu> "how native"?
22:20 < gotwig> ningu: actually gotwig is my family name haha
22:20 < gotwig> ningu: like, the system methods from nodeJS and all the functions are also implemented via C++ right?
22:20 < gotwig> ningu: not only..
22:21 < ningu> it depends how it's written. there are modules with bindings to xml parsers written in C. but even pure-js for that stuff isn't very slow.
22:21 < gotwig> I guess, the performance may go down. Like jQuery for normal javascript
22:21 < ningu> the node standard modules are written in javascript with library bindings.
22:21 < gotwig> well, jQuery can bring your speed very much down
22:21 < ningu> gotwig: anyway, this is silly unless you do a benchmark and show that it matters
22:21 < SomeoneWeird> jquery has nothing todo with node
22:21 < ljharb> gotwig: it really doesn't slow you down very much at all.
22:22 < gotwig> >_<
22:22 < ljharb> gotwig: the other thing tho is, why do you need a dom on the server? if you're sending html to the client, that's what templates are for
22:22 < gotwig> so can you please tell me
22:22 < gotwig> how should I handle parsing
22:22 < gotwig> and getting data from the parsed data
22:22 < ningu> gotwig: we already told you
22:22 < gotwig> from XML/HTML
22:22 < ningu> there are modules for it
22:22 < gotwig> jsdom?
22:22 < ljharb> it should be submitted as normal HTTP parameters, and you don't need the DOM at all for that.
22:22 < ningu> cheerio is faster than jsdom. jsdom is closer to a browser environment.
22:23 < gotwig> I already did take a look at jsdom
22:23 < AAA_awright> gotwig: How are you receiving the request? You're receiving raw XML in the request body?
22:23 < ljharb> if so, gross
22:23 < AAA_awright> Like XForms?
22:23 < ljharb> why people fight the browser i'll never understand
22:23 < ChrisPartridge> sounds like he's trying to scrape data from sites
22:24 < gotwig> AAA_awright: raw XML/HTML yes
22:24 < AAA_awright> Well, use an XML parser
22:24 < AAA_awright> gotwig: XHTML or non-XML HTML?
22:24 < gotwig> AAA_awright: probably XHTML...
22:24 < ljharb> gotwig: why on earth are you posting xml or html to a server?
22:24 < gotwig> I know that its important ;D
22:24 < AAA_awright> I haven't used jsdom but it sounds like that fills your need
22:25 < gotwig> ljharb: I want to do a crawler or something like that
22:25 < AAA_awright> Why doesn't that work?
22:25 < gotwig> or wanted to do
22:25 < gotwig> and then offer a JSON API
22:25 < AAA_awright> ljharb: There's good reasons to do that, for instance, updating content
22:25 < ljharb> ugh. be aware that in many states and countries that could be illegal at certain volumes.
22:25 < AAA_awright> Then you don't have to serialize your request, just post the new HTML and have the server parse it
22:25 < AAA_awright> Less client-side code
22:25 < AAA_awright> Brilliant, no?
22:26 < gotwig> AAA_awright: so what do you parse
22:26 < ljharb> AAA_awright: you wouldn't need to parse if if it's a replacement
22:26 < gotwig> eh, how can you parse
22:26 < ljharb> but no, i wouldn't say brilliant, it's just a way to write more server code and less client code :-p
22:26 < gotwig> I dont know how to parse that stuff, so I can bring it into variables and such..
22:26 < AAA_awright> ljharb: Well you probably store seperate title/body/author/etc fields if it's a blog post
22:26 < AAA_awright> You'd need to parse them back into their respective fields
22:26 < ljharb> AAA_awright: and i'd post those as normal HTTP params.
22:27 < AAA_awright> HTML is just as valid a data format as any other
22:27 < AAA_awright> If not better
22:27 < ljharb> it's a markup language, so i disagree with that statement entirely
22:27 < AAA_awright> It's hypertext, a requirement of RESTful protocols
22:27 < AAA_awright> JSON can be hypertext too
22:27 < ljharb> O.o
22:27 < ljharb> especially if you're posting to a JS environment, json makes the most sense.
22:27 < gotwig> isnt cheerio too much candy?
22:28 < gotwig> it implements jQuery
22:28 < AAA_awright> JSON should be supported too
22:28 < lovemuffin> isaacs, penny for your thoughts on eventemitter.removeAllListeners removing some internal listeners for standard library objects? (socket for instance) currently, i have to cache the default listeners, and removeListener 1 by 1 to prevent it removing internal listeners 
22:28 < ningu> gotwig: so use a plain old html parser. cheerio has one as a dependency.
22:28 < AAA_awright> But my point is if you move that DOM-to-JSON serializing to the server side, you can reduce your total complexity
22:28 < gotwig> I fear that all these nodeJS NPM libraries slow my projects down
22:28 < ningu> gotwig: I mean, I have no idea what you need to do with it
22:28 < ningu> gotwig: then you need to chill out.
22:28 < ningu> get meds
22:28 < ningu> whatever
22:28 < AAA_awright> And HTML can be parsed and used as a data format
22:29 < styol> Any recommendations for dealing with post data that tends to be between 50-100kb? Perhaps I should be looking at streams or should I just accept that it may be hazardous to my scaling health
22:29 < AAA_awright> You have elements for sections, lists, tables, etc
22:29 < gotwig> niggler: which is that
22:29 < ningu> gotwig: instead of fearing why not gather information. like, see how fast or slow it actually is.
22:29 < niggler> hey gotwig which is what?
22:29 < ningu> niggler: he meant me I think
22:29 < gotwig> I dont want to do benchmarks for my own
22:29 < gotwig> :(
22:29 < ningu> gotwig: then you will never be able to know if it's slow anyway.
22:29 < gotwig> niggler: sry 
22:29 < niggler> i assume gotwig isn't mistertwig, right?
22:30 < gotwig> lo
22:30 < niggler> gotwig define "slow"
22:30 < gotwig> l
22:30 < gotwig> I dont really know... I only know about jQuery
22:30 < gotwig> and PHP
22:30 < ljharb> gotwig: first, never care about speed. build it, make sure it works. then measure it, and if it's slow, *then* you optimize it.
22:30 < ningu> if you care about it being fast and aren't willing to measure how fast it's running... well, you won't be able to make very intelligent choices
22:30 < gotwig> some requests/processes can hang the whole thing up
22:30 < ningu> ljharb: he doesn't want to measure it :P
22:31 < ljharb> lol then it will never be fast
22:31 < gotwig> actually, I first want to convert my PHP project to nodeJS..
22:31 < gotwig> I guess I can learn a lot with that
22:31 < gotwig> https://github.com/gotwig/draganddrool if you care
22:32 < gotwig> so with help of cheerio, I can access my parsed data like candy via a DOM?
22:32 < ningu> gotwig: you can access it via a jquery(-like) api
22:32 < lovemuffin> how can i access parsed data with candy?
22:33 < gotwig> .get-all-the-candy
22:33 < lovemuffin> what is candy
22:33 < gotwig> sweets...
22:33 < gotwig> yum yum...
22:33 < lovemuffin> it has the ability to give you access to parsed data?
22:33 < gotwig> I hope so
22:33 < ningu> lovemuffin: gotta hook it up to the net first but yet ;)
22:34 < gotwig> with a selecot
22:34 < ningu> but yeah*
22:34 < gotwig> *selector, on DOM elements
22:34 < gotwig> ningu: are you a native english speaker?
22:34 < gotwig> ningu: couse you feel me ashamed for knowing nothing about these slangs, gotwig.. what ever
22:35 < ningu> yes, you found me out
22:36 < zlatko> hmm.
22:36 < SandorKrasna> anyone use a twitter module to stream tweets to their site?
22:36 < gotwig> ningu: what does it mean to go twig
22:36 < lovemuffin> it doesn't mean anything
22:36 < zlatko> If I test a page with zombie.js and angular.js is included in it, it should work just like any other page, right?
22:37 < s3shs> Anybody else notice that the webkit nightly debugger just started crashing when debugging node?
22:37 < gotwig> lovemuffin: what?
22:37 < lovemuffin> well i guess it can literally mean go twig
22:37 < gotwig> >_>
22:37 < ericelliott> currently, I'm checking in my node_modules for deployable apps, but I hate the git noise. I'm aware that I could be using npm shrinkwrap, but I'm wondering if I can just get my diff reports to omit node_modules
22:37 < lovemuffin> what about got wig?
22:38 < gotwig> yeah I know about that one 
22:38 < gotwig> haha
22:38 < gotwig> no one dissed me with that until now.
22:38 < lovemuffin> that makes more sense than go twig
22:38 < ericelliott> What do you guys do to manage node_modules for deployable apps (not libraries)?
22:38 < gotwig> I read about paragraphs saying "find a girl now and you never go twig"
22:38 < gotwig> lol?
22:38 < cesarstafe> people, which package/howto/documentation do you recomend me to implement user login page with MongoDB or MySql?
22:39 < lovemuffin> you should stop reading dating ads
22:39 < gotwig> lovemuffin: what does it mean :(
22:39 < kuja> ericelliott: Generally I have node_modules in my .gitignore
22:39 < kuja> package.json has all the information I need to install dependency modules
22:39 < lovemuffin> idk, go google? i've never heard of that if it is a slang
22:40 < ericelliott> kuja: so you make the module install part of your deploy step?
22:40 < zlatko> crap
22:40 < ningu> "to twig" can mean to freak out, to get excited
22:40 < ningu> but it isn't very common
22:40 < zlatko> I need a suggestion for a relatively noob-friendly test framework.
22:40 < ericelliott> kuja: you're aware that dependencies that your dependencies depend on can shift around on you, right?
22:40 < ericelliott> kuja: doing it that way exposes you to risk that the code you deploy to production isn't the same code that you qualified in QA / Dev.
22:41 < cesarstafe> well, I am watching an interesting app sample for login at https://github.com/braitsch/node-login
22:41 < zlatko> I was doing something with zombie.js sometimes last year,but I can't repeat it any more.
22:41 < gotwig> what is meteorJS?
22:41 < zlatko> doesn't work :(
22:41 < mscdex> anyone have experience with engine.io and battery life (on mobile devices)?
22:41 < kuja> ericelliott: True, at least with direct dependencies you could lock the version but I see your point.
22:42 < kuja> ericelliott: If you truly want to keep it in the repository but prevent git from telling you about it, the .gitignore advice could still apply, and anytime you need to push something from node_modules you can specify -f
22:42 < ericelliott> kuja: it also introduces more moving parts into the deploy step, making your deploy dependent on the availability on the npm services.
22:43 < gotwig> so, you install MeteorJS on node?
22:43 < kuja> ericelliott: I prefer to rely on tests most of the time, but I understand there can be slips.
22:44 < zlatko> kuja what do you test with :)
22:44 < kuja> mocha
22:44 < zlatko> cause that's what I'm trying to learn now.
22:44 < ericelliott> kuja: A local .gitignore?
22:44 < mscdex> i wish google could do delivery verification for GCM :-\
22:44 < kuja> A .gitignore file sitting in your repository
22:44 < kuja> Which you commit and push
22:45 < ericelliott> I'm using supertest + tape for node service testing, and QUnit + saucelabs for browser tests.
22:45 < kuja> It is a newline separated list of files/globs that tells git what to ignore.
22:45 < zlatko> and what can I test clientside with?
22:45 < ericelliott> zlatko: QUnit. =)
22:45 < dayom> has anyone very pondered why a person would make their irc nick - so
22:45 < dayom> it has to be so annoying
22:46 < dayom> at least I think so
22:46 < ericelliott> zlatko: or, (if you're using browserify), you might try tape.
22:46 < ericelliott> which is like QUnit, but has a slightly better async api (IMO)
22:47 < kuja> ericelliott: Does the .gitignore thing make sense?
22:47 < Technodrome> why doesn't someone make a django clone in node.js 
22:48 < zlatko> I was going through http://ruby.railstutorial.org/ to learn TDD.
22:48 < zlatko> I wanted something similar for nod.e
22:48 < zlatko> So I bumped into zombie.js
22:48 < ericelliott> kuja: I'm not sure. You mean always .gitignore node_modules and then ... commit with -f? push with -f?
22:48 < zlatko> Which was really cool.
22:48 < kuja> This would prevent git from telling you about unstaged changes in node_modules while allowing you to forcibly commit/push when you do want to.
22:48 < kuja> ericelliott: Right.
22:48 < zlatko> browser.visit('/').then(function() { browser.click..... ;done()});
22:48 < kuja> This would also mean that `git add .` would not accidentally add node_modules either
22:49 < zlatko> And it worked.
22:49 < SomeoneWeird> never push with -f unless you /have/ to
22:49 < zlatko> Now I can't repeat it :(
22:49 < ericelliott> kuja: yeah, seems hacky.
22:49 < kuja> Yeah we are talking about commit -f I believe
22:49 < kuja> Or is it add -f
22:49 < kuja> I forget. Haven't done it for a bit :)
22:49 < dayom> push -f means you've given up
22:49 < kuja> Yeah push -f is dangerous, don't do it.
22:49 < kuja> Unless you know what you're doing
22:50 < SomeoneWeird> what does -f do when adding/committing then?
22:50 < ericelliott> the trouble with knowing what you're doing is you never know what you don't know.
22:50 < ericelliott> ;)
22:50 < kuja> SomeoneWeird: add -f lets you add a file that is in your .gitignore
22:50 < dayom> *ponders life*
22:50 < lovemuffin> so the 0.10.1 mac package isn't signed properly?
22:50 < willc> I know that I know nothing. That's something... that means nothing.
22:50 < lovemuffin> osx complains
22:51 < SomeoneWeird> kuja, then why have it in your gitignore?
22:51 < dayom> like
22:51 < dayom> if you wanted to add one log file
22:51 < dayom> but not *ALL* log files
22:52 < SomeoneWeird> then add an exemption for it in gitignore
22:52 < SomeoneWeird> you shouldn't force anything
22:54 < kuja> SomeoneWeird: Could be that you want that file to be there when you clone a repo, but don't necessarily want changes to it to be committed or pushed back.
22:55 < kuja> .gitignore allows you to do just that, in what I think is a simple and straightforward approach.
22:55 < kuja> on the rare occasion you do need to commit a modified version, there's always -f, that's why it's there.
22:56 < kuja> If there wasn't a use case for it, it probably wouldn't be a feature.
23:01 < Masih> hello everybody
23:01 < ChrisPartridge> hi
23:01 < ljharb> kuja: wait, is that a git feature?
23:03 < context> is what?
23:03 < context> forced files in ignored directory will show changes on index 
23:03 < Masih> I wrote a code that connects to yahoo servers and works with it's messenger
23:03 < Masih> I used node socket
23:03 < context> files you 'need' but dont want in repo, i ignore and make a .example file
23:04 < Masih> but my packets retransmit
23:04 < Masih> any idea why?
23:05 < ChrisPartridge> Masih: not without seeing any code
23:05 < ljharb> context: sorry i missed the earlier discussion. how can i include a file in a repo that's also gitignored?
23:05 < Masih> ChrisPartridge: https://github.com/masihyeganeh/yahoomessenger-js/
23:05 < context> ljharb: -f
23:05 < ljharb> git add -f?
23:05 < context> man git-add
23:06 < ljharb> lots of things take -f
23:06 < context> well you need to add it to the index to commit it.
23:06 < context> you cant push -f something not commited and thus not added.
23:06 < context> you cant commit whats not added so we arent gonna commit -f
23:06 < ljharb> lol ok, i'm sure i can reason it out, i was just asking for the context
23:07 < context> its a process of elimination
23:07 < context> or just dont gitignore it if it needs to be added....
23:08 < context> if its SUPPOSE to be ignore (ie: app-instance specific data) then do NOT add it. you WILL see the file changed when you change it
23:08 < Masih> I don't even know why it retransmits my packets! it should not be anything with connection speed
23:18 < ChrisPartridge> Masih: can't see anything obvious
23:27 < sadtaco> Am I missing something?  I don't see anything about getting the images width. https://github.com/devongovett/png.js
23:27 < sadtaco> ah well I found something else
23:52 < sadtaco> huh no still wrong..
23:52 < sadtaco> Yeah I don't get how to get a pngs width
23:53 < Technodrome> any framework like django for node.js?
23:54 < azylman_> Technodrome: depends what you mean by "like django". What specific features are you looking for?
23:54 < sadtaco> looks better https://github.com/niegowski/node-pngjs
23:57 < Technodrome> azylman_: a similar structure
23:58 < Technodrome> almost every node.js framework is a sinatra cone
23:58 < Technodrome> clone* 
23:58 < Technodrome> its like all node.js dev's make 
23:59 < m_a_madero> Technodrome: try geddyjs.org
--- Log closed Fri Mar 22 00:00:13 2013
