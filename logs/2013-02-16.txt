--- Log opened Sat Feb 16 00:00:41 2013
00:05 < asdf12> data sharing seems hard in flight, if anyone has any experience with that
00:08 < Havvy> I'm looking for an i18n library where changing the English strings doesn't break the translations for everybody else.
00:17 < banister_> hi, installed node and npm (version 0.9.10-pre for node) and i installed the "ultra-repl" repl (via npm install ultra-repl) however "ultra-repl" doesnt appear to be on the path
00:17 < banister_> how do i add executable packages installed via npm to my path?
00:18 < Havvy> banister_: Add a -g  (global) flag and make sure you do so as root (via sudo most likely)
00:18 < Havvy> sudo npm install ultra-repl -g
00:18 < banister_> thanks trying now
00:18 < banister_> Havvy: have you used ultra-repl? is it any good?
00:19 < Havvy> I've not.
00:24 < eighty4> Trying to understand package.json. I'm reading this: https://devcenter.heroku.com/articles/nodejs-versions I've added "node": "0.8.x", and http://heroku-buildpack-nodejs.s3.amazonaws.com/manifest.nodejs claims they should have multiple 0.8 versions. Yet I get this error: npm ERR! Error: No compatible version found: node@'>=0.8.0- <0.9.0-'
00:27 < eighty4> … those should of course be engines and not dependencies
00:33 < MI61> joyent/node: Shigeki Ohtsu master * 401cef7 : doc: add setImmediate execute timing description (+1 more commits) - http://git.io/nQOWAw
00:33 < othiym23> eighty4: try a specific version instead of 0.8.x
00:33 < othiym23> pretty sure Heroku had 0.8.9, at least
00:33 < othiym23> that latest but report from dpacheco is a true work of art
00:34 < othiym23> s/but/bug/
00:48 -!- mode/#Node.js [+o isaacbw] by ChanServ
01:18 < jayk> Hey all!
01:18 < jayk> so, is there a way to conditionally load a module? like 'if node-uuid is available, use it, if not do xyz' ?
01:19 < mikolalysenko> jayk: Use an if statement.  CommonJS modules are loaded dynamically
01:19 < kenperkins> do you mean, in lieu of doing disk traversal yourself? 
01:20 < jayk> I mean I want to use uuid if it's available, but I don't want to blow up my module if it's not, as it's optional.
01:20 < mikolalysenko> you could wrap it in a try-catch block
01:21 < owen1> i have a POST that will call multiple social networks and update the user status on those. the client should be notified when each of them got the update. can i return 202 right away and when each async job finished, use socket.io to push the success/fail status to the client?
01:21 < jayk> mikolalysenko: I was just in the middle of trying that… but It occurred to me there might be another 'more used' way.
01:21 < jayk> I will continue down that path.  Thanks.
01:23 < jayk> mikolalysenko: Looks like try catch will do what I need. Thanks!
01:24 < mikolalysenko> jayk: you're welcome!
01:24 < asdf12> owen1: sure why not
01:26 < AAA_awright> jayk: try-catch should do it but I'd suggest that you're doing something wrong if that's the case. Optional functionality should be exposed through a function, not auto-detected
01:44 < owen1> asdf12: cool. i wonder what are the alternatives. i guess if i need to retry failed requests to facebook/twitter, i can use redis in between each request, right?
01:45 < owen1> redis can also store the data in disk so even after crash i can retry the failed requestst
01:49 < asdf12> owen1: i guess it completely depends on what you're doing, is it a background job?
01:54 < ericelliott> if I'm logging uncaughtExceptions, do I need to pass `process.exit(1);` into setTimeout to make sure that syslog has time to do its thing?
01:54 < ericelliott> or does process.exit() handle that for me?
01:55 < asdf12> owen1: i'm guessing not becauase you eventually want to notify the user? so i wouldn't retry failed attempts, i mean idk how long the user is going to sit there waiting for that or whats going on that end
01:56 < eighty4> I'm getting a strange I'm getting a strange error when using socket.io on heroku (I'm guessing it's not actually related to heroku but I have no idea) WebSocket connection to 'ws://....herokuapp.com/socket.io/1/websocket/...' failed: Unexpected response code: 503 Any one happen to have an idea about this? Could it be using a wrong port or something like that to cause this?
01:56 < asdf12> heroku doesn't support websockets
01:57 < eighty4> oh
01:57 < asdf12> by default it should fall back to something else, unless you modified the transport setting
01:57 < eighty4> I'm getting the data so yeah, seems to work… something is broken but not the actuall stream.
01:58 < AAA_awright> SO guys, stop bragging how many LOC you save by using coffeescript. If I built a compiler that compiled ECMAScript into coffeescript I'd "save" 10%, too. </rant>
02:00 < Lorentz> people should brag about features, not loc
02:00 < Sorella> AAA_awright, shouldn't you tell that Stack Overflow?
02:00 < Sorella> LOC is sometimes associated with features, though.
02:00 < Sorella> As in, expressiveness on the latter leads to reduction of the former
02:03 < Havvy> How about just the fact that this. is replaced with an @ in Coffeescript?
02:03 < Havvy> I don't care how many LOC the code is, just how long the line is.
02:04 < RLa> imagine how many lines you saved if you used apl
02:04 < Havvy> RLa: Or J or K. ;)
02:04 < RLa> yeah
02:05 < Lorentz> imagine how many lines you saved if you quit coding and just did something else
02:05 < RLa> haha
02:05 < groundwater> ultimate hipster coder
02:06 < Havvy> Lorentz: Always try to solve your problems without code first.
02:07 < Lorentz> Havvy: that is such a silly thing to say
02:07 < Havvy> Lorentz: Code has to be maintained.
02:08 < Sorella> Imagine how many trees you'd save if everyone programmed in WhiteSpace.
02:08 < groundwater> i wish more people though of code that way… it's not about writing it, it's about maintaining it
02:08 < Havvy> Sorella: 0.
02:08 < RLa> you guys print out all code you write?
02:08 < Sorella> Havvy, you can print all the code you ever write in it in a single sheet of paper.
02:09 < Lorentz> Havvy: I'm of person who prefers using code itself to describe the problem, and solving it
02:09 < Havvy> Sorella: I could do the same thing with other languages by printing out a black square.
02:09 < Lorentz> rather than clumsily trying to explain it in english or another natural language, then translating it
02:09 < Sorella> Havvy, but then you wouldn't be able to use that paper again for anything else.
02:09 < Havvy> I still have the back side of it, and I have white crayons.
02:10 < RLa> Lorentz, imagine if all people communicated with programming languages not english
02:10 < Lorentz> you don't do maths by writing out the problem in english first, why do you do it for programming
02:10 < Lorentz> well, you do if you're starting out maths, but you don't when you've done it for years
02:10 < Sorella> Lorentz, I do, actually.
02:10 < groundwater> Lorentz: you do
02:10 < Havvy> Lorentz: I do start with English. "How much did I make on my tax return after paying off this bill?"
02:11 < Sorella> At any rate, I find trying to make programming languages look like English a terrible thing. English takes more time to parse and understand (for the programmer), and is not easily distinguishable. And I don't see what the benefits would be for non-programmers, since they can't code anyways
02:12 < groundwater> Sorella: agreed
02:12 < groundwater> Sorella: see AppleScript
02:12 < Lorentz> Havvy: I think you took it wrong, I meant writing out the problem as in how you're going to tackle the problem and layout of answer, rather than literally the problem
02:12 < Havvy> Sorella: That's different than writing out the problem in English.
02:12 < Havvy> Also, I describe interfaces using English.
02:12 < Sorella> groundwater, text replaceSomePartOfThisTextWithThisOtherPartWhichIAmAboutToHandOverToYouJustWriteALittleSecond: 'a'
02:13 < groundwater> Sorella: that's objective-c
02:13 < Sorella> I don't know AppleScript, but I'd say Objective-C suffers from the same problems if you take Apple's libraries.
02:14 < Sorella> Havvy, I think you meant Lorentz?
02:14 < Havvy> Maybe.
02:14 < Havvy> Yes.
02:14 < Lorentz> Notice how you guys suggesting different languages to solve different problems, is just a product of trying to fit a "natural logic" of answer that people usually answer in, say, English, into another language
02:14 < eighty4> asdf12: thanks for the help! Found the settings to get it working on heroku
02:14 < Lorentz> why not just start with that programming language
02:15 < Lorentz> if two people who codes can read it, why can't you just write code and share that idea
02:15 < Havvy> Lorentz: Because with code you have to be overly formal for most communication.
02:15 < Lorentz> that's basically what I consider my job; translate non-programmers' wants into code and vice versa
02:15 < sent_hil> How do I mimic a server that's still running, but not serving anything? In essence something that's crashed, but still running
02:16 < groundwater> sent_hil: what you trying to do?
02:16 < Aria> ObjC can lead to some delightful method names. But also to horrible ones.
02:17 < sent_hil> groundwater: essentially a small pinger service
02:18 < sent_hil> groundwater: need something to test it against
02:18 < groundwater> sent_hil: well when a process dies, it typically gives up its socket, and the OS closes the socket
02:18 < Lorentz> anyway, given it's my own mind's exercise, or if it's going to shared with another programmer, I just write the code first and let people read that, than try to sit and think about how to best translate my expression into the language from another language
02:18 < groundwater> sent_hil: so just try binding to the socket, if it fails, it's crashed
02:19 < groundwater> sent_hil: try binding to a local socket with no listening process
02:21 <@Nexxy> chapel, hey :) doing well! you? (sorry about the lag)
02:21 < sent_hil> how do i do that from node?
02:21 < sent_hil> groundwater: ^
02:22 < groundwater> sent_hil: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener
02:23 < mdedetrich> does anyone know if there is a wordpress style site that runs in node.js
02:23 < mdedetrich> (or basically a wordpress that runs in node.js instead of php)
02:24 < Sorella> mdedetrich, do you want a blog engine, or do you want wordpress?
02:24 < mdedetrich> a blog engine
02:25 < mdedetrich> something similar to wordpress that runs in node.js
02:25 < mdedetrich> A guy basically wants a blog, however he wants all the stuff hosted in the same place
02:25 < mdedetrich> and we are hosting on nodejitsu currently
02:26 < mdedetrich> Sorella: any ideas?
02:27 < Aria> Heh. Wordpress is an old and very large, monolithic application. "Like Wordpress" implies some unsavory things in addition to the nice parts.
02:28 < mdedetrich> Aria: he just wants a blog similar to wordpress
02:28 < mdedetrich> I know the codebase for wordpress is probably terrible
02:29 < sent_hil> groundwater: thanks!
02:29 < Sorella> mdedetrich, I don't know of any, but you should be able to find something on Github
02:29 < Lorentz> so basically a simple cms/blog thing you can quickly throw up and do a website in
02:30 < Aria> No, it's not that -- Wordpress has a large ecosystem, a huge base of plugins, and a complex codebase to support plugins developed over the span of years.
02:30 < Aria> It's BIG. Noders don't tend to make big. Lots of small modules, lots of things focused on one task, not something like Wordpress.
02:31 < Aria> It's a difference in aesthetic, and Wordpress /fills/ that niche neatly.
02:31 < mdedetrich> well yeah, the site would have to support stuff like facebook and twitter logins
02:32 < Lorentz> Aria: so basically, a working, production-ready system for making sites with hundreds/thousands of modules and themes ready to be used quickly etc
02:32 < Havvy> By the by, what do you guys use for i18n?
02:32 < RLa> Aria, i would argue that wordpress is monolithic
02:33 < Aria> ... so would I.
02:33 < mdedetrich> most things coded in php tend to be monolitchic
02:33 < Lorentz> I think I know what niche you're talking about, can't put it into words clearly, but yes
02:33 < RLa> Aria, i see it more like a small core (which is kinda ok) + shitloads of shitty plugins (which is not ok!)
02:34 < Lorentz> not everyone wants to fiddle around coding things, they just want to get things done now and quickly, and can easily write a plugin or two if there isn't one that fits yet
02:34 < mdedetrich> ^
02:34 < mdedetrich> I don't want to have to maintain this at all
02:35 < mdedetrich> I just want to put a site up, so he can add in plugins and make simple posts
02:35 < mdedetrich> he isn't code literate
02:35 < RLa> Lorentz, problems starts when newbies publish their low-quality insecure plugins
02:35 < Aria> RLa: Have you SEEN the core? It's HUGE.
02:35 < Aria> (That said, it's actually quite good at its job now.)
02:35 < mdedetrich> RLa: thats besides the point, you use the well known WP plugins
02:35 < Aria> mdedetrich: Sounds like ... you want wordpress. Just sayin'.
02:35 < mdedetrich> yeah
02:36 < Lorentz> wordpress written in nodejs, basically
02:36 < RLa> yes, i have had to debug it, code is procedural but well documented
02:36 < mdedetrich> I think what I want doesn't exist in node.js yet
02:36 < Lorentz> or drupal, or joomla, one of those things
02:36 < Sorella> mdedetrich, I'd say: go with Wordpress.
02:36 < mdedetrich> yeah ill just tell him to host a rackspace php server with wordpress
02:36 < mdedetrich> probably best way to go
02:36 < Aria> Yeah. You want the mostly polished blogging and CMS platform that comes from having tried several wrong ways to do it in the past, and now used as a widely adopted base.
02:36 < Aria> Node just ain't that old.
02:36 < Aria> (nor is it really its forte)
02:37 < Aria> (Though, that said, node might be an improvement over PHP. PHP is that bad.)
02:37 < RLa> mdedetrich, even well known ones are buggy, naming w3tc, super cache, nextgen, FB like photo
02:37 < AAA_awright> AHahahahahhhh please not Wordpress
02:37 < Lorentz> AAA_awright: frankly there isn't much of a choice in alternatives
02:37 < mdedetrich> RLa: its more that technically illiterate people need to manage the things themselves, not me
02:38 < mdedetrich> I don't really care if its "buggy" (which often to programmers means not completely perfect), I don't want to have to manage it
02:38 < RLa> mdedetrich, and not to mention bbpress which causes 30sec timeouts on the site i must maintain
02:38 < Aria> Well, there's MT, Radio, Bloxsom, Drupal, Joomla (gak)..
02:39 < mdedetrich> Eh ill just use wordpress
02:39 < mdedetrich> wordpress in node.js wouldn't actually be a bad idea, mainly cos the plugins would be in JS which everyone pretty much knows
02:39 < RLa> "which everyone pretty much knows" is bit overgeneralization
02:39  * Sorella argues the opposite.
02:40 < Sorella> A monolithic thing is not a good idea in any case.
02:40 < mdedetrich> its probably the most known language for the web, apart from possibly PHP, but lets not go there
02:40 < RLa> what we actually need is next gen wordpress.com or blogger
02:40 < Havvy> I'm okay with frameworks as long as they don't overcomplicate things.
02:40 < Sorella> I would also argue the opposite, JavaScript is probably one of the most wide-spread languages with few peoples who really know it
02:40 < Sorella> people*
02:40 < Lorentz> if you want nodejs to be seen as an actual major force by majority of people, not just filling high-io or other server-end-not-seen-by-users
02:40 < Lorentz> then yes
02:41 < Havvy> I know JS pretty well.
02:41 < Lorentz> we need our own wordpress.com or blogger etc
02:41 < RLa> Lorentz, i mean the service, something like tumblr, but not with focus on images
02:42 < RLa> something where people do not have to maintain their stuff on their own
02:42 < RLa> just write articles and be cool
02:42 < lejden> quick question for the room: what's the best way to determine if a node cli app has a file being piped in to stdin? is process.stdin.bufferSize > 0 a reliable way?
02:43 < RLa> lejden, is there a reason to make such distinction at all?
02:43 < RLa> you want interactive/non-interactive modes?
02:45 < Aria> Lorentz: That ship has sailed. That's perhaps PHP's killer app. We need our own. Perhaps we have several of our own now. 
02:46 < Sorella> Any application that could be written in JavaScript will eventually be written in JavaScript.
02:46 < MI61> joyent/node: isaacs master * 9299168 : test: Bump up debugger timeouts  200ms is still short enough for occasion (+3 more commits) - http://git.io/U80o2g
02:46 < Sorella> (and the ones that aren't are going to be compiled using Emscripten)
02:49 < Lorentz> Aria: I'm not foolish enough to think it'll be easy to hack one up one weekend either
02:49 < Lorentz> but gotta start somewhere
02:49 < holzpie> Funny you should say that Lorentz 
02:49 < holzpie> Posterous just announced its shutting down
02:50 < holzpie> that leaves a gap between wordpress and blogger
02:50 < asdf12> so with requirejs i made a bunch of modules/files, there's no way to put it all in one file for production now? since it uses a relative path to load each one?
02:51 < Havvy> asdf12: You could make a file:  module.exports = { obj1: require('./obj1'), obj2: require('./obj2), ... };
02:51 < mdedetrich> I really wish PHP would die
02:51 < Aria> asdf12: It is possible: r.js is the usual answer to this. I found that too complicated, so I whipped up my own asset pipeline using esprima (to rewrite defines to have static module names) and uglifyjs
02:52 < mdedetrich> I mean its helped in the sense it popularized the web
02:52 < Aria> Heh, yeah. PHP is awful.
02:52 < mdedetrich> but the amount of bugs/security flaws and general craziness it causes now is well past its time
02:52 < Havvy> PHP has its uses...sorta...
02:52 < MI61> joyent/node: isaacs master * 8476aef : fs: Change default WriteStream config, increase perf  This increases fs.W - http://git.io/yU-kxg
02:52 < mdedetrich> PHP's niche is that its easy to deploy and any non programmer can do shit in it
02:53 < Aria> Yep. Well, the first part.
02:53 < Aria> Non programmers can't operate PHP any more than non-drivers can operate cars.
02:53 < Lorentz> one attraction to php is how huge of everything + kitchen sink it is, I feel
02:53 < mdedetrich> well they can, its just the code isn't that great
02:53 < Aria> But yeah, starting with HTML and working from there is pleasant sometimes. And deployment really does work right. "Upload files. There is no step 2."
02:54 < Aria> mdedetrich: Then they're programmers.
02:54 < mdedetrich> well crappy programmers then?
02:54 < Lorentz> one place for all the documentation for majority of API calls from db calls, math libs, drawing graphics, etc
02:54 < Aria> Sure. But most programmers are mediocre!
02:55 < Aria> Lorentz: Yeah. But that also killed its addon culture. PHP has no npm.
02:55 < Aria> (and PEAR is a shallow excuse for a CPAN)
02:55 < Havvy> Every language needs an npm IMO.
02:55 < Lorentz> indeed, but it still did quite well considering
02:55 < mdedetrich> Aria: thanks for making me feel special =D
02:55 < mdedetrich> well PHP is god damn old
02:55 < Lorentz> it just had most everything already
02:55 < Aria> That too, but it was horrible from the start.
02:55 < groundwater> Havvy: NPM is amazing
02:55 < Aria> And it's a batteries-included mentality.
02:55 < groundwater> Havvy: esp. if anyone has used Maven
02:56 < mdedetrich> I don't think for the audience that it caters to, package and dependance management would go down well
02:56 < Lorentz> and if you see php code outside it, they're often not frameworks or such, but actual product-like projects doing x goal
02:56 < Aria> mdedetrich: Actually, packageist is helpign move it that way. and PEAR was supposed to be that, it just sucks.
02:57 < Havvy> I'm actually looking to switch a project from PHP to Node.js, but I need a better internationalization library than i18n (or as they call it in PHP, gettext)
02:57 < Aria> Havvy: What do you need it to do that i18n doesn't? What's your use case?
02:57 < mdedetrich> eh, Im not up to scratch with PHP tbh, I havn't used it in like 10 years
02:57 < mdedetrich> geez I sound old
02:57 < Havvy> I want to be able to change English strings without having to go back and change all the other translations.
02:58 < cloudbender> Who's sharp with setters and getters ?
02:58 < groundwater> cloudbender: what's your question?
02:58 < mdedetrich> cloudbender: im not sharp, I sway with the flow
02:58 < cloudbender> groundwater ; The actual propertyname is not used by accessing code, it is accessed via the setter/getter ?
02:59 < draginx> If I have a website where 50 people will upload their own image, and do some basic edits like cropping, manipulating saturation, rotation, etc. would doing an exec() be good enough or would I actually need a job/worker process in which I send the job off, and wait for a response?
02:59 < Aria> Havvy: Why would you need to do that with i18n?
02:59 < Havvy> Or maybe I'm thinking of localization.  Whichever one focuses on strings.
03:00 < groundwater> cloudbender: i think yes, but i'm not 100% what you'er asking. do you have an example?
03:00 < mdedetrich> draginx: probably using something like imagemagick would suite your needs
03:00 < mdedetrich> with command line tools
03:00 < draginx> mdedetrich: yeah thats what i would use
03:00 < draginx> but my primary concern is
03:01 < Havvy> All the solutions I've seen store the keys as English...
03:01 < Sorella> Aria, because some libraries will use `_('foo')` to mark translatable strings, then use `foo` as a key and default text for translations.
03:01 < draginx> should I not use nodejs? Would exec() be fine? In terms of not blocking up the process, etc.
03:01 < mdedetrich> node.js is single threaded, if the thread gets a lot of CPU it can lock up the website
03:01 < mdedetrich> for the actual image manipulation I wouldn't use node.js
03:01 < mdedetrich> but I would use node.js for the rest of the site, since thats what its designed for
03:01 < Havvy> I would rather that the key and the default text be seperate. So I can change the default text.
03:01 < Aria> draginx: Depends on what you exec!
03:01 < Lorentz> nodejs with gearman?
03:02 < Lorentz> with gearman handling image processing
03:02 < Sorella> No sane person would, JS isn't a language for that. Neither that, nor scientific computations.
03:02 < Aria> (I might use node.js for the work, but yes, I'd make a separate process. Gearman rocks!)
03:02 < draginx> Lorentz: well garman itsself cant do the image manipulation can it?
03:02 < draginx> i would need to deliver it to another language
03:02 < Havvy> You could just call imagemagick to do the work.
03:02 < Aria> draginx: Yeah, gearman is just a job server. (I might do the work using node-canvas in a gearman worker)
03:02 < draginx> wit gearman?
03:02 < Havvy> For the image processing.
03:03 < draginx> Aria: ok so u would use gearman but the worker is still in nodejs? :)
03:03 < mdedetrich> yeah just run imagemagick, I mean it would also depend on the server setup
03:03 < Aria> Sure. Or just subprocesses. Or lots of options.
03:03 < RLa> why not run mogrify etc though exec?
03:03 < mdedetrich> but if you have a multicore server, the imagemagick would probably work on the other cores (which the OS would automatically handle things)
03:03  * Sorella would use a better suited technology
03:03 < draginx> RLa: right thats my question really
03:03 < Havvy> Anyways, nobody knows a better localization/internationalization library than node-i18n?
03:03 < Aria> Indeed. OSes are reasonably good at scheduling.
03:03 < Lorentz> gearman would be nice because if you need to, you could easily set up additional servers to fend jobs off too
03:03 < RLa> why use complex arcitecture if simple command can do it :)
03:04 < draginx> Sorella: such as?
03:04 < Lorentz> you'd have to write the process code, but you'd write it anyway
03:04 < mdedetrich> alternately, you could just set up a different server that does the image processing
03:04 < draginx> RLa: the iamge oculd be huge, etc.
03:04 < draginx> it could bem ore than just one process, etc.
03:04 < mdedetrich> which your website would talk to
03:04 < cloudbender> groundwater ....
03:04 < cloudbender> itm1: 'defualt', get item1 () {return this.itm1}, set item1 (val) {this.itm1 = val}
03:04 < mdedetrich> in fact you could probably do a simple HTTP server (in node.js) that talks to imagemagick and run that as a seperate instance
03:04 < RLa> i would avoid complex arch before you know you really need it
03:04 < mdedetrich> and your website would talk to that
03:04 < Sorella> draginx, I don't know what you're trying to do. I just wouldn't do things that take too much processing power in Node. Or things that depend too much on parallelism.
03:05 < draginx> Sorella: why wouldnt I want parallelism in this case? O_o
03:05 < mdedetrich> draginx: look, this questions really depends on your server environment
03:05 < Aria> Sorella: I think that's silly and shortsighted. Node ROCKS at parallelism. You just have to use the right abstraction for it: Processes.
03:05 < mdedetrich> are you running node.js  on a single core machine?"
03:05 < Lorentz> I'd personally try to keep nodejs doing small single units of work
03:05 < groundwater> cloudbender: yah, then 'ob.item1' will basically _get_ itm1
03:05 < draginx> no its a multi core machine, 4gigs of ram
03:05 < Sorella> Aria, but then you don't have shared memory, do you?
03:05 < mdedetrich> draginx: in that case, just use exec with imagemagick
03:05 < Aria> You'd generally only want to process N images at a time, where N is the number of cores. Assuming you have enough RAM to do that.
03:05 < mdedetrich> heck there is a imagemagick library out there on npm which abstracts tthat
03:05 < groundwater> cloudbender: and ob.item1 = 'hi' will call the setter
03:06 < MI61> joyent/node: Gil Pedersen master * 0a9930a : stream: Pipe data in chunks matching read data  This creates better flow  - http://git.io/94c76A
03:06 < Aria> Sorella: Nope! Shared memory is a pain in the butt! Sockets make better IPC. 
03:06 < cloudbender> ok, so each itm needs a unique setter and getter name
03:06 < draginx> mdedetrich: the exec would automatically use another core/thread? :)
03:06 < Aria> (or files...)
03:06 < Sorella> If you're working on a pure functional language, for example, that would be a natural thing, rather than working with isolation + message passing.
03:06 < mdedetrich> draginx: yes, indirectly the OS would schedule it
03:06 < groundwater> cloudbender: yah, that wont' change until "harmony proxies" enter node core
03:06 < RLa> draginx, yeah, let os schedule processes
03:06 < draginx> ah ok, that was a majr concern :D thanks
03:06 < mdedetrich> running exec will cause the OS to create a new process
03:06 < Lorentz> draginx: if all this confuses you, just do the exec thing and if it's too slow, think about it then
03:06 < mdedetrich> and schedule it itself
03:06 < draginx> :P
03:06 < cloudbender> ok I will keep that in mind groundwater thank you
03:06 < RLa> today's os's can run multiple processes in parallel
03:06 < mdedetrich> that might be an issue if you just have a single core machine
03:06 < mdedetrich> RLa: oh really?
03:07 < Aria> RLa: Only one per core!
03:07 < mdedetrich> threading exactly is its own science, its become a lot more complicated than "one thread per core"
03:07 < mdedetrich> due to how CPU's have progressed
03:07 < cloudbender> If you are going to run parallel you will have to learn to work without loops
03:08 < mdedetrich> threading exactly*, threading actually
03:08 < RLa> yeah, but you do not have to wait till one process is completed, it will share time slots between processes
03:08 < cloudbender> i.e. (for ... ++whatever)
03:08 < Aria> Well, there's hyperthreading, but ... oy.
03:08 < Aria> RLa: Yes. But that actually slows it down -- more context switches = slower.
03:08 < Lorentz> cloudbender: more accurately, loops that doesn't depend on previous value from the loop execution
03:08 < cloudbender> Right
03:09 < cloudbender> that is the fundemental problem with the array.ForEach
03:09 < Sorella> Aria, again, I don't think choosing different technologies for different parts of a project is "silly or shortsighted". Node can do concurrency well, but sometimes you need things that are easier or better encoded/expressed in a different technology.
03:09 < mdedetrich> Aria: even with context switching its complicated
03:09 < cloudbender> It's an array operator, not a set operator
03:09 < cloudbender> I mean, it's great, but, we need set operators
03:09 < mdedetrich> I read this blog post on the java situation, and apparently java's threading mechanism ended up being more  effecient than using evented IO (in this case dealing with NIO)
03:10 < Aria> Heh. 
03:10 < mdedetrich> companies rewrote their code to use java's new evented io for files
03:10 < RLa> java also has nio2
03:10 < Aria> I wonder whose evented IO they were comparing to.
03:10 < mdedetrich> turned out using threads had better performance
03:10 < RLa> and for today, maybe even nio3
03:10 < Aria> Well, sure. This is the JVM.
03:10 < mdedetrich> Aria: well yeah, as I said it gets complicated
03:10 < mdedetrich> like really complicated
03:10 < Aria> It abstracts over OS differences, doesn't use the OSes well.
03:11 < cloudbender> yummy conversation tonight
03:11 < mdedetrich> actually JVM does use the OS
03:11 < mdedetrich> OS's libraries very well, if they exist it
03:11 < mdedetrich> NIO uses linux's native fast file lookup for example
03:11 < mdedetrich> threads use standard posix threads (for nix systems)
03:12 < mdedetrich> this isn't the 90's, JVM has moved quite a bit
03:12 < RLa> "more  effecient than using evente" <- more throughput, but how was latency?
03:12 < mdedetrich> they were saying that average latency was lower, I can't remember the exact post
03:12 < RLa> as already mentioned, it is more complex, and performance can be measured in many ways
03:13 < mdedetrich> the thing is, OS's do a lot of magic behind the scenes
03:13 < mdedetrich> much more so than the old days
03:13 < Lorentz> JVM, in RTOS situation?
03:13 < Aria> RLa: I find that evented code, I can control the latency.
03:13 < Aria> RLa: Whereas threading, it's up to the OS.
03:14 < mdedetrich> I mean in actuality, JVM's biggest issue is starting up and allocating resources first time things like classes are used
03:15 < mdedetrich> which are pretty much irrelevant in server scenarios
03:15 < RLa> also, with threading you get all problems of shared memory, like races etc
03:15 < mdedetrich> evented IO has its own issues, like managing stacks and whatnot
03:15 < mdedetrich> every solution has its own problems
03:16 < RLa> i wrote msc on threading and well, haven't used threads since then :)
03:16 < cloudbender> so the setter and getter are now included in the getOwnProperties, as well as the property itself.
03:16 < cloudbender> ... getOwnPropertyNames
03:17 < Sorella> RLa, only if you're in an impure language.
03:17 < RLa> the only threaded stuff i wrote was a game server that never saw day in production, my biggest concerns were long-running operations (like blocking io) that held global locks
03:18 < RLa> this was not for races but atomicity
03:18 < mdedetrich> also threading doesn't imply using shared memory, it can but doesn't have to
03:18 < RLa> atomicity is much harder problem
03:18 < mdedetrich> RLa: oh yes definitely
03:18 < RLa> mdedetrich, without shared memory i can just uses much more robust processes
03:18 < mdedetrich> but evented IO is always going to have issues scaling because its limited by vertical scaling
03:19 < mdedetrich> threading is not
03:19 < RLa> i can't even imagine app where i would use threads
03:19 < groundwater> mdedetrich: scaling on a single host is not a "scaling" problem
03:19 < mdedetrich> RLa: games
03:20 < mdedetrich> groundwater: im not talking about node.js app scenarios, im talking in general
03:20 < mdedetrich> RLa: super computers
03:20 < mdedetrich> etc etc
03:20 < groundwater> mdedetrich: in general, if you can solve the problem on a single host, it's not a scaling issue
03:20 < mdedetrich> cluster machines
03:20 < mdedetrich> groundwater: yes, but I was speaking generally
03:20 < mdedetrich> programs don't happen to be just websites
03:21 < groundwater> mdedetrich: i was also speaking generally
03:21 < mdedetrich> funnily enough
03:21 < RLa> mdedetrich, haha, for cluster you need multiple processes anyway
03:21 < Lorentz> not if you do weird magic where threads go over network!
03:21 < mdedetrich> Lorentz: yup
03:21 < mdedetrich> the beaty of threads is you can treat them abstractally
03:22 < mdedetrich> QNX takes this concept to heart for example
03:22 < Lorentz> that is dark dark magic I have not dabbled in
03:22 < Lorentz> (yet)
03:22 < Lorentz> I'm happy with processes being separate
03:22 < mdedetrich> QNX is basically all threaded/message based
03:22 < groundwater> so what's the difference between a "network thread" and a separate process?
03:22 < mdedetrich> groundwater: none, which is the point, you can treat them as the same
03:22 < Sorella> RLa, processing a large amount of data in parallel.
03:22 < mdedetrich> groundwater: at least in terms of code
03:23 < mdedetrich> which means scaling is more trivial, which goes back to my point about scaling vertically
03:23 < mdedetrich> you cant scale apps vertically forever, CPU gets really expensive above the 4ghz mark
03:23 < mdedetrich> so apps will end up using threads to take advantage of multiple cores, and now you have to deal with threading
03:24 < mdedetrich> depending on the application, you can do load balancing on threads, but that in no way works generally for everything
03:24 < mdedetrich> I mean games is a really obvious example
03:24 < Lorentz> it's kinda silly to argue about vertical and horizontal these days when even low-end systems are often dual or more cored and when you write code for that, you've already done large work for horizontal scaling
03:25 < mdedetrich> Lorentz: my point is that evented IO is not just flat out better than threading
03:25 < mdedetrich> they all have their pros and cons
03:25 < Lorentz> that I agree with
03:26 < mdedetrich> using evented IO in a game for everything can be silly for example because you can easily lock up a single thread
03:28 < RLa> mdedetrich, with multiple threads, a thread holding global locks and doing io also locks it all up
03:28 < mdedetrich> RLa: no it doesn't.....
03:28 < RLa> yes it does
03:28 < mdedetrich> don't use global locks
03:29 < cloudbender> queues
03:29 < RLa> then how you sync changes to the game world
03:29 < RLa> hm, i guess queue could work
03:29 < mdedetrich> how do you think graphics cards with things like CUDA work, lol
03:29 < mdedetrich> or do a message based system like based on actors
03:29 < mdedetrich> of course if you are going to use global locks you will lock your program, thats because you are using global locks
03:29 < mdedetrich> lol
03:30 < mdedetrich> your coding your program to lock up deliberately
03:30 < RLa> uh, with queues your code goes incredibly complex
03:30 < cloudbender> It does
03:31 < cloudbender> depending on your implementation
03:31 < mdedetrich> that depends on the language and implementation heavily
03:31 < mdedetrich> you were arguing (or it sure sounded like it) that to use multiple threads your program is forcefully locked, which is blatantly false
03:31 < mdedetrich> if what you were saying is true, no game would be multithreaded
03:32 <@Nexxy> GREEN
03:32 <@Nexxy> IT HAS TO BE GREEN
03:32 < mdedetrich> @Nexxy: incorrect, its 42
03:32 < RLa> green threads?
03:32 < Lorentz> Supergreen?
03:32 <@Nexxy> the shed
03:32 <@Nexxy> I want it to be green.
03:33 < danheberden> can it have a gable?
03:33 <@Nexxy> maybe
03:33 < danheberden> i love me some gables
03:33 <@Nexxy> clark gable?
03:33 < danheberden> Nexxy: i heard there's a new pdx node thingy
03:33 < danheberden> you privy to that?
03:33 <@Nexxy> danheberden, yus
03:33 <@Nexxy> nodepdx? or pdxnode?
03:33 < danheberden> i think pdxnode - cuz, omg what
03:33 < danheberden> i don't even…
03:34 <@Nexxy> one is yearlyish?
03:34 <@Nexxy> the other is more often than that
03:34 < danheberden> oh, i think i went to nodepdx
03:34 <@Nexxy> nodepdx = conference
03:34 <@Nexxy> pdxnode = user group?
03:34 < cloudbender> ProvideX ? Paradox ?
03:34 < danheberden> Nexxy: aye, pdxnode then
03:34 < danheberden> i thought maybe i would try my hand at being a local participant in things
03:34 <@Nexxy> you should
03:34 < danheberden> instead of a boston participant 
03:35 <@Nexxy> protip though
03:35 < danheberden> that... lives in portland
03:35  * cloudbender senses history is unfolding before his eyes
03:35 <@Nexxy> try using both hands
03:35 < danheberden> Nexxy: i've gotten very good compliments on just using one
03:35 <@Nexxy> danheberden, jerrysievert is quite connected with portlandia node stuff
03:35 <@Nexxy> Bailey's taproom 
03:35 <@Nexxy> has a meetup all teh time
03:35 < danheberden> Nexxy: this is sounding better and better
03:36 < danheberden> i tried pdx-js, but they didn't seem too thrilled with a newcomer
03:36 <@Nexxy> well I mean
03:36 <@Nexxy> you're from boston
03:36 < owen1> asdf12: right now it's written in ruby and it's done with background jobs. that't why i thought of using redis. the user will not wait forever, so i should be able to eventualy tell him (maybe on his next login) that it was posted on FB/twitter etc.
03:37 <@Nexxy> part of portland's hipster cred is how cliquish everyone is
03:37 < owen1> asdf12: that's why i think that if that's the case, reddis can be helpful.
03:39 < asdf12> that's weird to me
03:39 <@Nexxy> danheberden, are you on twitter?
03:40 < danheberden> Nexxy: i've been known to frequent the twitters
03:40 < danheberden> @nodepdx?
03:40 < danheberden> or @pdxnode?
03:40 <@Nexxy> b-both?
03:40 < danheberden> omg this is awful for a dyslexic person
03:40 <@Nexxy> I think?
03:40 < asdf12> owen1: i've never seen a site tell me on my next login that something was posted on fb/twitter
03:40 <@Nexxy> I hear this is worse;
03:40 <@Nexxy> pqdbpqdbpqdbpqdb
03:41 < danheberden> Nexxy: neither
03:41 <@Nexxy> it's hard for me and I don't have dyslexia that I'm aware of
03:41 < danheberden> @pdxnode or @nodepdx
03:41 <@Nexxy> I was mostly asking if you were on twitter so I could follow you
03:41 <@Nexxy> I'm @nexxylove
03:41 < asdf12> owen1: i mean how long does it take to post something on fb,twitter? when user initiates the action, put up a spinner, make it go away when its done, or tell the user it failed
03:42 <@Nexxy> oh
03:42 < SomeoneWeird> VERY HARD
03:42 <@Nexxy> I'm already following you
03:42 <@Nexxy> LOL
03:44 < danheberden> Nexxy: @danheberden - i follows you already
03:47 < danheberden> Nexxy: was this it? http://calagator.org/events/1250463484
04:15 < owen1> asdf12: make sense
04:15 <@Nexxy> danheberden, I do believe so yes
04:15 <@Nexxy> yeah that's the one, I remember Jerry talking about terraformer
04:16 <@Nexxy> I think I was supposed to go, but obviously I didn't
04:24 < owen1> i don't understand stdout in unix. i wrote i node library that emit udp packets. i use console.log if the udp was send of if there was some error - http://hastebin.com/liloloyeqi.js   . my friend wrote a mocha test for this library and told me i am polluting the output of his tests since i used stdout too much. so what is stdout/ stderr means and how to make sure i am a well-behaved unix citizen?
04:25 < asdf12> grrr
04:25 < owen1> oops
04:25 < asdf12> whats up with appfog, i can't deploy!
04:26 < owen1> asdf12: don't use them
04:26 < davidyeiser> hey, im new to IRC (and node!)
04:26 < davidyeiser> is it cool to jump right in and start asking questions?
04:26 < owen1> davidyeiser: awesome
04:26 < Lorentz> you already did
04:26 < Lorentz> but sure
04:26 < davidyeiser> haha, nice
04:27 < owen1> davidyeiser: we're here to serve you
04:27 < davidyeiser> you're too kind
04:27 < owen1> davidyeiser: no, you are
04:27 < owen1> your presence make us happy
04:27 < davidyeiser> i'm working on a personal blog as a way to get my feet wet, and i'm at the point of setting up a user/pass authentication system for the backend
04:27 < davidyeiser> to write articles, etc.
04:28 < davidyeiser> is this a good one to use?
04:28 < davidyeiser> https://github.com/visionmedia/express/tree/master/examples/auth
04:28 < davidyeiser> it came from the Express FAQ
04:28 < SomeoneWeird> davidyeiser, use passportjs
04:28 < davidyeiser> i tried, but couldn't get it working
04:28 < davidyeiser> and no one would answer my stack overflow question :( haha
04:29 < davidyeiser> passportjs seemed really straight-forward but i couldn't get all the right pieces connected
04:30 < davidyeiser> http://stackoverflow.com/questions/14858572/node-express-3-and-passport-login-form-not-working
04:30 < davidyeiser> i think maybe i had too much code pasted and couldn't really isolate the problem into a workable question
04:30 < davidyeiser> but good to know that passportjs is the way to go
04:35 < owen1> davidyeiser: why not accessing your db and if the user was found, store 'authenticated=true' in a cookie? http://stackoverflow.com/questions/3498005/user-authentication-libraries-for-node-js (second answer)
04:37 < davidyeiser> thanks for the link, ill look into it
04:37 < davidyeiser> though i admit you've inspired me to relook at trying to get passport to work
04:37 < owen1> davidyeiser: i think by 'session' they are talking about cookie
04:38 < owen1> davidyeiser: many times, i try to avoid using frameworks libraries if the solution is not very complex without them.
04:38 < owen1> davidyeiser: isn't authentication means verifying that the user is saved in your db?
04:39 < davidyeiser> yea, though right now it's just an dummy array with one user
04:39 < davidyeiser> i was going to do the database auth after getting it to work with a fake account
04:39 < cloudbender> ahhhh time for a fresh coffee.
04:39 < davidyeiser> eventually i may want to do Tw/Fb authentication, down the road
04:39 < davidyeiser> so passport was attractive for that reason, that's for another app though, not the blog
04:40 < davidyeiser> also, random question, how much effort needs to go into securing a node.js production app?
04:40 < davidyeiser> i know that's very vague
04:41 <@Nexxy> davidyeiser, I would imagine about as much as any other app
04:41 <@Nexxy> depending on your security needs
04:41 <@Nexxy> there's https://github.com/wearefractal/fusker if you want to get serious
04:41 <@Nexxy> super serious
04:42 < SomeoneWeird> fusker is awesome
04:42 <@Nexxy> and weaponize your app!
04:42 <@Nexxy> haha yeah
04:42 < SomeoneWeird> theres also another one
04:42 < SomeoneWeird> mmmm
04:42 < davidyeiser> ah, very good, starred
04:42 < davidyeiser> thanks!
04:42 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:43 < SomeoneWeird> helmet
04:43 < SomeoneWeird> https://github.com/evilpacket/helmet
04:44 < Lorentz> I like how fusker's test website is offline
04:44 < Lorentz> one nexxy linked
04:45 < SomeoneWeird> works here?
04:45 < emlyn> That's the most secure type of web site.
04:46 < superjoe> anyone else getting 500's on npm publish?
05:03  * Aria beats node into building as a shared library and rpmifies it.
05:41 < davidyeiser> @owen1 I figured it out! I just had a misconstructed test array for my usernames. doh! thanks for the responses all
05:46 < owen1> danheberden: awesome
05:46 < danheberden> owen1: YES! but not me
05:47 < owen1> oh
05:48 < asdf12> https://github.com/MatthewMueller/array heheh
05:48 < danheberden> whoa
05:49 < danheberden> these kids, what will they think of next
05:50 < asdf12> he shouldve called it something else imo
05:50 < asdf12> like super array or whatever
05:50 < danheberden> "arrays for dummies"
05:50 < danheberden> i feel like anything i would actually want those features on would demand performance that a magic lib would steal
05:50 < danheberden> but snazzy
05:51 < danheberden> quite snazzy
05:56 < asdf12> sprint sucks
05:56 < asdf12> have you guys seen https://github.com/peers/peerjs ?
05:57 < asdf12> i want to like this thing, but its so unusable
06:05 < asdf12> how come no one uses visual basic anymore
06:06 < redshadowhero> It's because we're all on visual basic++ .NET x86_64 edition.
06:12 < Stephen> asdf12: Because C# made VB developers look ancient
06:22 < sshaginyan> Guys lets say I have a function that return a reference not defined in that functions scope but defined in the calling functions scope. Would the variable still work?
06:22 < asdf12> how can you reference something that doesn't exist?
06:23 < sshaginyan> asdf12: That's the thing how would I go about doing this?
06:23 < asdf12> call it with the right context
06:25 < asdf12> lots of ways to do it probably, but show a snippet ?
06:25 < sshaginyan> So I have an object everyone is going to use. There are variables in the object that the calling method has but not the object how would I make the context object of the calling function the same as in the object?
06:25 < sshaginyan> can I see an example in jsfiddle
06:26 < asdf12> i dont understand how the object as variables that the calling method has but the object doesnt??
06:26 < asdf12> then how does it have it in the first place? heh
06:27 < Stephen> He said function, not object
06:27 < Stephen> This can be done
06:27 < asdf12> im referring to his last statement
06:27 < Stephen> using "this" and a closure
06:27 < Stephen> One sec, I'll write up an example
06:27 < sshaginyan> pwezzz
06:28 < sshaginyan> I like your name Stephan. It's very Stephany
06:28 < sshaginyan> I also like it cause it's my name
06:28 < Stephen> Stephen....
06:29 < Stephen> Ok, so, the last part "Would the variable still work?"
06:29 < sshaginyan> yes
06:29 < Stephen> Which final variable do you mean?
06:29 < Stephen> The one in the deepest function, or the outer function?
06:29 < sshaginyan> Let me give you an example
06:30 < sshaginyan> outer
06:31 < sshaginyan> Stephen: Something like this http://pastie.org/6192335
06:32 < sshaginyan> Well in this cause test is private 
06:32 < sshaginyan> what be pass the context object to x()?
06:32 < Stephen> Basically, what you are doing is called a closure
06:32 < sshaginyan> x(this)
06:32 < Stephen> are you familiar with them?
06:32 < sshaginyan> yes
06:32 < sshaginyan> yes
06:33 < sshaginyan> But this doesn't work
06:34 < Stephen> Ah, your example does not work because the "this" of x() is window the way you wrote it
06:38 < Stephen> sshaginyan: What exactly are you trying to accomplish?
06:39 < Stephen> sshaginyan: You can use the .apply() to assign context to a function
06:39 < asdf12> just do console.log( x.call(this) )
06:40 < dileep> how can i rename file without uusing fs.rename???
06:41 < sshaginyan> Stephen: Basically I have config.js file with var config = exports; config.url = "one" +x + "two"; I'm doing a var config = require('config') in another file that has the variable x set. WHen I do a config.url in this other file I want x to be set
06:41 < sshaginyan> dileep: Use exec
06:41 < Stephen> Ah
06:41 < sshaginyan> dileep: http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
06:42 < sshaginyan> dileep: Then use the move command
06:42 < sshaginyan> or in windows use the dahhhhhhhhhhh command
06:44 < Stephen> sshaginyan: You can pass your config module parameters
06:44 < asdf12> just use .call() if it is a function and not an assignment like you showed just now
06:44 < Stephen> var config = require('config')(params)
06:44 < sshaginyan> that's the thing I don't want to
06:45 < Stephen> Then in the module:
06:45 < Stephen> module.exports = function(options) {   var app = options.app;   var param2 = options.param2; };
06:45 < Stephen> That version avoid the whole "always adding commas" version
06:46 < sshaginyan> kk thanks
06:46 < Stephen> sshaginyan: Why don't you want to pass params?
06:46 < sshaginyan> Is there no way we can do the same thing without passing parameters though
06:46 < sshaginyan> it's just ugly
06:47 < asdf12> is it a function?
06:47 < sshaginyan> I won't be able to look myself in the mirror. UGLY!
06:47 < sshaginyan> yes
06:47 < sshaginyan> constructor
06:47 < asdf12> then do .call()
06:48 < sshaginyan> oh
06:48 < sshaginyan> asdf12: No it's not a function
06:48 < sshaginyan> it's a object
06:48 < asdf12> -_- originally you said it was a function and your example was a function
06:49 < Stephen> sshaginyan: Technically it /is/ a function
06:49 < Stephen> Maybe try this:
06:50 < sshaginyan> k
06:50 < Stephen> var config = require('config.js).apply(this)
06:50 < Stephen> That should send local scope
06:50 < Stephen> Though I'm not positive require allows for that
06:51 < sshaginyan> let's see
06:51 < asdf12> why do you use apply() 
06:51 < Havvy> Is there a difference between  'new F()' and 'F.call({})'?
06:51 < asdf12> instead of call()
06:51 < Havvy> asdf12: With apply, you pass in an array of the arguments as the second argument.
06:52 < asdf12> i know that
06:52 < asdf12> what arguments are being passed in this example?
06:52 < asdf12> so why are we using apply
06:52 < Havvy> I'm not sure.
06:52 < Havvy> apply is more general?
06:53 < Stephen> asherkin: I use it because of the parameter consolidation is all
06:53 < Stephen> habit
06:53 < Stephen> both work
06:54 < asdf12> yes but apply is slower
06:54 < asdf12> unless you need the array argument
06:54 < Stephen> But in cases where an undetermined number of params may need to be passed (as in module or library writing) I prefer to stick with apploy
06:54 < Stephen> apply
06:55 < Stephen> ??
06:55 < Stephen> They are the exact same thing
06:55 < asdf12> no
06:55 < Stephen> Except for the 2nd arg
06:55 < sshaginyan> Havvy: No difference
06:55 < asdf12> i mean if they are the exact same thing how do you expect your array to be handled??
06:55 < asdf12> thats extra overhead
06:55 < Stephen> Hmm
06:55 < jprichardson> Probably old news... but is anyone else having problems with NPM?
06:55 < Stephen> asdf12: Looks like you are right
06:55 < jprichardson> Specifically, publishing packages.
06:56 < Stephen> sshaginyan: Use .call(this)
06:56 < sshaginyan> k
06:57 < jprichardson> I'm not able to publish a package currently and the front page of the npm website shows that the last package was published 92 mins ago... kinda weird.
06:57 < asdf12> whats the error?
06:58 < jprichardson> Getting a 409 and then a 500.
07:00 < asdf12> maybe you didn't bump the version number?
07:00 < jprichardson> No, I did... I tried bumping and then removing previous attempted published versions.
07:01 < jprichardson> Doesn't it seem odd that the last package was pushed so long ago as seen on the NPM front page?
07:01 < jprichardson> The time isn't updating either... it's consistently "92m"
07:03 < Stephen> sshaginyan: It works!
07:03 < Stephen> I just tested it
07:04 < Stephen> Note: passing the entire scope into a module like that is possibly going to take a lot of memory
07:04 < Stephen> But, it works
07:05 < asdf12> i dont have access to node/npm so i can't try myself
07:05 < jprichardson> asdf12: look at npmjs.org doesn't that seem weird to you?
07:07 < asdf12> did you try the force flag?
07:07 < jprichardson> Last three issues with an hour: https://github.com/isaacs/npm/issues?state=open
07:09 < asdf12> oh
07:09 < asdf12> i need to get debian off my server
07:11 < dileep> http://stackoverflow.com/questions/8359902/how-to-rename-files-parsed-by-formidable   ...yy it shows me error like   .on('file', function(field, file) {
07:19 < xeodox> How do I "revisers" a sha1 hash in node.js?  data = crypto.createHmac('sha1',my_secret).update(data).digest('hex');
07:19 < xeodox> reverse*
07:19 <@Nexxy> reverse?
07:19 < xeodox> I created a hmac hash, and I want to reverse it, anyone know how?
07:19 < xeodox> yes
07:20 < xeodox> after generating the hash, I want to generate the data back again
07:20 <@Nexxy> what do you mean by reverse?
07:20 <@Nexxy> you can't
07:20 <@Nexxy> that's what hashes are for
07:20 < xeodox> but I supplied it with a secret
07:20 <@Nexxy> that's great
07:20 <@Nexxy> but the point of a hash is that you can't "reverse" them
07:20 < xeodox> oh I se
07:20 < xeodox> your'e right lol
07:21 <@Nexxy> if you want to be able to get the data back
07:21 <@Nexxy> encrypt it instead of hashing it
07:21 < asdf12> BUT he supplied it with a secret
07:22 < asdf12> im going to use that
07:22 < asdf12> best counter point ever
07:22 <@Nexxy> be kind friend
07:27 < asdf12> my apologies xedox, i meant that as in its just a funny way to accept something than it was poking fun of you
07:27 < substack> isaacs: I'm getting npm ERR! Error: case_clause {[]}: browserify/1.18.0/-tag/latest
07:27 < substack>  from npm on this terrible wifi
07:31 < xeodox> thanks guys :)
07:34 < substack> isaacs: https://gist.github.com/substack/01282d835e77ff643ca1
07:34 < Stephen> Nice going substack
07:35 < Stephen> Looks like your spiders got in NPM
07:36 < Stephen> Wierd
07:37 < Stephen> The npm website doesn't generate ending </body> or </html> tags
07:37 < ashnur> =)
07:51 < Stephen> Times seem to be updating again
07:58 < TheShaun> is socket.io any good for concurrent c# client connections?
08:02 < pyykkis> TheShaun: afak socket.io server only discuss with socket.io client. I'd guess you need raw web sockets to talk with c# web sockets.
08:03 < TheShaun> im kind of after something like net, but to be able to keep track of the connections/track them so other connections can cross talk
08:04 < TheShaun> dinners up, brb
08:04 < TheShaun> will keep searchin
08:27 < jiu-jitsjiu-jits> -FREE
08:44 < Bonuspunkt> happy 4th birthday node
09:02 < gildean> Bonuspunkt: node has it's birthday today?
09:03 < Bonuspunkt> gildean https://twitter.com/nodejs/status/288744877997559808 seems so
09:03 < gildean> awesome, it's my birthday today as well
09:05 < Bonuspunkt> congratulations
09:05 < gildean> thanks
10:41 <@Nexxy> where's stone philips?
10:41 <@Nexxy> wrong channel
10:49 < nb-ben> could I create a read stream from a buffer?
10:50 < geNAZt> nb-ben: yes you could
10:50 < nb-ben> I am caching a file (max size is 2mb), and would like to stream it instead of serving the entire thing all at once
10:51 < nb-ben> I see, how is that done?
10:51 < nb-ben> :D
10:51 < geNAZt> what version of node do you support ?
10:52 < nb-ben> 8.19
10:52 < geNAZt> okay a version without streams2 if i am right
10:52 < nb-ben> uh don't think so :P
10:53 < geNAZt> if streams2 a part of 0.8.19 ? oO
10:53 < geNAZt> no its not 
10:53 < nb-ben> idk, but I think my node version is up to date
10:53 < geNAZt> no 0.8.19 is not up to date
10:53 < nb-ben> ah I see
10:54 < nb-ben> there's 8.20
10:54 <@Nexxy> lol
10:54 < geNAZt> even that doesnt have streams2
10:54 <@Nexxy> nb-ben, just use .pipe
10:54 < geNAZt> since streams2 is "beta"
10:54 <@Nexxy> on your readable and writable stream
10:54 < geNAZt> he doesnt have a readable stream
10:54 < geNAZt> he wants to make one
10:54 < mscdex> 8.20! whoa, i missed 1.0!
10:54 < mscdex> :-D
10:54 <@Nexxy> rofl
10:55 < SomeoneWeird> lol
10:55 <@Nexxy> mscdex, nb-ben is from the future
10:55 < mscdex> that would explain the fancy boots and the silver outfit
10:56 < nb-ben> lol, 
10:56 < nb-ben> I suppose some people need that in their life
10:56 < geNAZt> nb-ben: you know the exact length of the buffer and have the full buffer ?
10:56 < nb-ben> yes geNAZt 
10:57 < geNAZt> well thenits easy 
10:58 < mscdex> someone ought to make an html5 multiplayer A Boy and His Blob with node
10:59 <@Nexxy> no
10:59 <@Nexxy> blaster master
10:59 < mscdex> :(
10:59 <@Nexxy> :P
11:00 < mscdex> doubledragon.js!
11:01 < mscdex> woohoo! tunnelling ssh over ssh!
11:02 < SomeoneWeird> that seems a bit
11:02 < SomeoneWeird> redundant
11:03 < mscdex> nah i'm trying to debug an ssh issue
11:03 < nb-ben> and not very funny too
11:03 < mscdex> :/
11:03 <@Nexxy> http://i.imgur.com/LvDSnuZ.png
11:03  * mscdex shakes a fist at blaster master!
11:03 <@Nexxy> don't hate
11:04 < mscdex> did you know that game can be beaten in under 5 minutes?
11:04 <@Nexxy> what
11:04 <@Nexxy> really?
11:04 < mscdex> http://www.youtube.com/watch?v=aRm_xkAaazk
11:04 <@Nexxy> no I don't want to see
11:04 < mscdex> :-D
11:05 <@Nexxy> I was like 6 when I played this game last
11:05 <@Nexxy> you're just trying to ruin the magic
11:05 < mscdex> there's another one that goes through all bosses in 30 minutes
11:05 < mscdex> http://www.youtube.com/watch?v=GffdXpMzSr8
11:06 < TheShaun> random q, how could i have a form of persistent command line/console to type commands into
11:06 <@Nexxy> TheShaun, type `node`
11:06 < TheShaun> huh
11:07 <@Nexxy> it's so simple!
11:07 < TheShaun> oh, gah, sorry, i meant in a running program
11:07 <@Nexxy> repl.start
11:07 <@Nexxy> dshaw made a cool thing for that
11:07 < geNAZt> nb-ben: a little example of a buffer streamer
11:07 < geNAZt> https://gist.github.com/geNAZt/4966446
11:07 <@Nexxy> https://github.com/dshaw/replify
11:08 < TheShaun> ah sweet
11:08 < TheShaun> ta :)
11:08 <@Nexxy> ^-^
11:10 < nb-ben> ty geNAZt 
11:17 < geNAZt> np
11:17 < geNAZt> but it does not emit end but this should be simple to solve
11:19 < geNAZt> now it also should emit an end if the buffer is completly streamed: https://gist.github.com/geNAZt/4966469
11:27 < sh4d0w28> hello, guys!
11:27 < sh4d0w28> does anybd use regular expression replace in nodejs?
11:27 < geNAZt> yes
11:28 < sh4d0w28> i have next string:     data = data.replace(/^\s*F\s*somekeyforyourservero\s*/,'');
11:28 < sh4d0w28> it works well in regEx tester
11:28 < sh4d0w28> but when i try to use it in NodeJS i have an TypeError: Object F
11:29 < geNAZt> whats the sting data ?
11:29 < geNAZt> do you have an example
11:29 < sh4d0w28> 5 sec/
11:29 < sh4d0w28>   F    somekeyforyourservo     {"Topic":"test","Text":"test","SenderUserId":3,"Addressers":[],"DateSent":"2013-02-16T11:10:26.953174Z","Id":0}
11:30 < geNAZt> well it doenst work in RegexBuddy either
11:31 < geNAZt> a i see the error, you example data has an error :D
11:32 < mscdex> sh4d0w28: what does `typeof data` give before you try to .replace()?
11:34 < geNAZt> in my node it runs
11:34 < sh4d0w28> its object....
11:34 < geNAZt> https://gist.github.com/geNAZt/4966488
11:34 < geNAZt> then its wrong :D
11:34 < sh4d0w28> fail?
11:34 < sh4d0w28> yes, now i see. Thanks for help.
11:34 < geNAZt> where does the data come from ?
11:35 < geNAZt> out of a net server or via http ?
11:35 < sh4d0w28> from socket
11:35 < geNAZt> then you get buffers in chunks not strings
11:35 < mscdex> sh4d0w28: strings are what have .replace(), if it's a Buffer, then you need to .toString() first
11:36 < geNAZt> yes call data = data.toString(); before you try to replace
11:36 < mscdex> or if all the socket data is non-binary, you can do something like this `socket.setEncoding('utf8');` to always get strings on 'data' events
11:38 < gildean> you can just also: data.toString().replace('something', 'else')
11:40 < sh4d0w28> \u0014 - is Unicode?
11:40 < geNAZt> yes
11:40 < gildean> sh4d0w28: should be
12:03 < nb-ben> If an entire file is loaded into memory as a Buffer (say it's around 40mb), is there a better way to write it to a WritableStream than stream.write(buf)
12:04 < geNAZt> why do you load an entire file into memory ?
12:05 < geNAZt> and yes it would be better if you stream the buffer into the writeable stream so it wont overflow
12:05 < nb-ben> it's a system with 128GB memory, I need to utilize it to reduce the bottleneck of my processor
12:06 < geNAZt> well nodejs / v8 has a memory limit of ~1.4 GB
12:06 < geNAZt> per process
12:06 < nb-ben> so I'm caching often accessed files
12:06 < nb-ben> geNAZt, I see, I just started reading the source code for WritableStream to understand how it works
12:07 < geNAZt> maybe it is better to make a cache proxy infront of your node application ?
12:07 < nb-ben> ah..
12:07 < nb-ben> maybe I should make ramfs then
12:07 < geNAZt> are all files that you serve statics ? or are they dynamicly generated ?
12:08 < SomeoneWeird> yes, use a ramfs and rw to that
12:08 < nb-ben> geNAZt, caching is only in regards to static files
12:08 < nb-ben> stylus/jade is always cached
12:09 < geNAZt> maybe you should make this infront of your nodejs application: https://www.varnish-cache.org/
12:09 < geNAZt> its a in memory caching server for static files
12:09 < nb-ben> thing is I'm intending to use glusterfs, which should work pretty nicely with my plans
12:09 < geNAZt> (with a loadbalancer built in)
12:09 < nb-ben> if it's a big file, glusterfs should work pretty nicely streaming it
12:09 < geNAZt> well gluster is nice if you have a good server network
12:10 < nb-ben> yeah it's only 3 servers now, but I plan on extending it
12:10 < geNAZt> well the problem about gluster is that it is limited to your serving server network card
12:11 < geNAZt> so if you stream a file out of a gluster and stream it to the client on the same network card you only reach half speed
12:11 < nb-ben> I'm doing this distributed, it's not a local cluster
12:11 < nb-ben> so clients will be using different servers
12:11 < geNAZt> ah okay
12:12 < nb-ben> although this introduces some new overheads because inter-network communication also has a big cost
12:12 < geNAZt> yes but its better then caching all up into a node process ( node isnt that good for caching big things )
12:13 < nb-ben> I suppose I should seek a way to split my application into different processes then
12:13 < geNAZt> or do not cache up files in node
12:14 < nb-ben> caching is crucial when I'm using glusterfs
12:14 < nb-ben> because otherwise I'll keep serving files off the network, and those files might not be local
12:14 < geNAZt> maybe you should load them of the glusterfs into a ramfs and stream it from there
12:14 < nb-ben> for big files that' aren't accessed as often that's fine because gluster handles it pretty well but for small ones, it'll be catastrophic
12:15 < nb-ben> yeah that looks like the most reasonable idea
12:15 < nb-ben> to cache into ramfs 
12:15 < nb-ben> and then I won't have to care about the V8 limits
12:17 < geNAZt> correct
12:20 < nb-ben> but then again, iirc the kernel already does this stuff implicitly anyway
12:21 < nb-ben> (caching often-accessed files into RAM)
12:24 < txdv> the kernel is so kewl
12:26 < Stephen> You see children, Kernel Angus understands where he's wanted, and where he's needed
12:26 < Stephen> He sticks around as long as he's requested.
12:27 < Stephen> And, surely, when there's an army vying for his attention, he'll make sure to handle everyone coming, and going.
12:28 < txdv> node.js is so hipster
12:28 < Stephen> And when it's idle, he'll sit back quietly
12:28 < Stephen> txdv: CoffeeScript is hipster
12:28 < Stephen> NodeJS has proven performance
12:28 < txdv> I use saltarelle
12:31 < Stephen> Ah, a fellow C# developer
12:32 < Stephen> TypeScript not suit your fancy?
12:32 < txdv> You just write simple c# stuff and you can run it on .net or js platforms
12:32 < txdv> how awesome is that
12:32 < txdv> but that argument has been around already
12:33 < SomeoneWeird> what argument..?
12:33 < txdv> similar technology i mean
12:33 < txdv> like gwt
12:33 < Stephen> .Net has had JS cross compilers for a long time
12:33 < txdv> with serious limitations
12:33 < Stephen> The problem, to those outside, is .Net, not JS
12:34 < Stephen> True
12:34 < txdv> 2.0 only, half of the mscorlib only
12:34 < Stephen> What was it... F# had the first one I think
12:34 < SomeoneWeird> j#?
12:34 < Stephen> "First" as in VS extension
12:34 < Stephen> No, F#
12:35 < txdv> WebSharper?
12:35 < Stephen> Functional
12:35 < Stephen> Might be, doesn't matter
12:35 < txdv> Pit?
12:35 < Stephen> I remember something similar that was supposed to allow PHP in .Net
12:35 < Stephen> It sucked balls
12:36 < txdv> phlanger doesnt suck balls
12:36 < txdv> phalanger
12:36 <@Nexxy> suddenly I feel like I'm in middle school again
12:37 < txdv> Are you currently being beaten?
12:37 < SomeoneWeird> Nexxy, go do your homework
12:38 <@Nexxy> txdv, that wasn't a problem for me
12:38 <@Nexxy> I was mostly referring to the infantile choices in adjectives
12:39 < txdv> Nexxy: yeah i can totally see that
12:40 <@Nexxy> thanks for noticing :)
12:40 < Stephen> I started it
12:40 < txdv> while someone is bullying you and calling you names, you interupt him and teach him a lesson on how infantile his adjectives are
12:40 < Stephen> Let's try this
12:40 <@Nexxy> worked every time
12:40 < txdv> I thought you refered to our 'what technology is the best' talk
12:40 < Stephen> "Phlanger caused Visual Studio to become completely unusable every time I installed it"
12:40 < gildean> Nexxy: except the adjective would be "ballsucking" or something like that
12:40 < txdv> Best review so far
12:41 < SomeoneWeird> Nexxy was just pulling all the guys
12:43 < Stephen> Saltarelle compiles directly to Node.JS syntax?
12:44 < Stephen> txdv: How reliable is it?
12:44 < txdv> it compiles to javascript
12:44 < txdv> it has nodejs bindings
12:45 < txdv> i just toyed around with it
12:45 < txdv> exposed some html5 apis
12:45 < txdv> and used them
12:46 < txdv> the awesome is that you have types and awaitable tasks instead of callback code
12:46 < Stephen> Being able to write unit/functional browser tests with this would be awesome
12:46 < Stephen> It would integrate with the test runner in VS
12:48 < rvagg> anyone having trouble with npm publish or it just me?
12:48 < naomi> rvagg: i've been  chatting with your buddie deoxxa
12:49 < Stephen> rvagg: It's been going on all night
12:49 < naomi> i'm kind of new to #node.js channel though
12:50 < rvagg> naomi: oh? how is deoxxa? haven't seen him around for ages
12:51 < rvagg> Stephen: so it's not just me? getting weird errors from an `npm publish`
12:51 < SomeoneWeird> yeah he's gone poof :(
12:51 < rvagg> I'm on a garbage connection so I wouldn't be surprised if it was that
12:51 < rvagg> SomeoneWeird: oh?
12:51 < Stephen> rvagg: Yeah, something with the clock I'm thinking
12:52 < rvagg> grf
12:52 < naomi> rvagg: he's well, according to my measurements
12:52 < Stephen> rvagg: Every time this happens go to http://npmjs.org and the times on the published updates will be off or stale
12:52 < naomi> can anyone demo how i'm supposed to implement the _read(size, callback) method in the new streams interface?
12:52 < rvagg> naomi: oh. you're a "special" friend?
12:53 < rvagg> good idea Stephen
12:53 < rvagg> yikes, 522m ago, that's a long time.... isaacs needs to delegate some responsibility across the world
12:53 < Stephen> rvagg: BTW, nice to meet you. I've been admiring your repository collection over on github today.
12:54 < rvagg> Stephen: cheers, just made a new repo and it's sadly in npm limbo now
12:54 < naomi> rvagg: i'm not sure what's special about /msg deoxxa
12:54 < naomi> :P
12:55 < rvagg> oh, heh, cool
12:55 < naomi> i.e., i don't know if he ever went away
12:55 < rvagg> well say hello when you /msg deoxxa next
12:55 < SomeoneWeird> lol
12:55 < naomi> rofl
12:55 <@Nexxy> YOU ARE SO LAZY
12:55 <@Nexxy> WOW
12:55 < rvagg> flarble
12:55 < rvagg> I don't /msg
12:55 < rvagg> I HAVE MORALS!
12:56 <@Nexxy> interesting
12:56 < asturel> rvagg privmsg deoxxa: next
12:56 < asturel> :D
12:56 < SomeoneWeird> lol
12:57 <@Nexxy> personally I think we should all msg deoxxa
12:57 < naomi> rvagg: "guys, thank you for finding me, oh god how did i get in here? i'm not good with irc" (deoxxa)
12:58 < SomeoneWeird> hahahahaah
12:58 < txdv> what js library adds functionality like select
12:58 < naomi> txdv: more specific?
12:58 < txdv> functional programming extensions to lists
12:59 < txdv> or extensions to lists which mimic FP
12:59 < Stephen> rvagg: https://github.com/isaacs/npm/issues/3165
12:59 < rvagg> lodash or underscore I guess
12:59 < naomi> underscore would've been my suggestion
13:00 < naomi> keke, deoxxa follows me wherever i go
13:00  * naomi pets deoxxa
13:00 < deoxxa> lel
13:00 < txdv> prototype.js
13:00 < naomi> can anyone demo how i'm supposed to implement the _read(size, callback) method in the new streams interface? how do i return data from it?
13:00 < gildean> deoxxa does look a bit like the stalker-type
13:01 < deoxxa> gildean: that's nothing, you should see me with my fur hat on
13:01 < gildean> deoxxa: and nothing else?
13:01 < deoxxa> gildean: http://i.imgur.com/EW98R.jpg stalker pro
13:02 < naomi> haha
13:02 < deoxxa> also known as the "there's got to be something wrong with that guy" hat
13:02 < mmalecki> deoxxa: sup
13:02 < deoxxa> not much
13:02 < gildean> deoxxa: i bet people speed up when you walk behind them with that hat on
13:03 < deoxxa> yeah but it's ok i have longer legs
13:03 < mmalecki> deoxxa: where you at these days?
13:03 < deoxxa> back in melbourne right now, mmalecki \o/
13:04 < mmalecki> deoxxa: sweet! I might consider coming over later on btw
13:04 < deoxxa> oh neat
13:04 < deoxxa> if you want a couch to crash on, hit me up
13:06 < naomi> mmalecki: are you in Australia too ?
13:06 < naomi> gah, i can't find a single example of what a readable._read(size, callback) function body would look like
13:06  * deoxxa cough "streams2 was a bad idea" cough
13:06 < rvagg> naomi: size = number of bytes that it wants returned
13:07 < rvagg> callback(err, buffer)
13:08 < mmalecki> naomi: nah, Poland
13:08 < mmalecki> deoxxa: sure, that'd be convenient if you had one free :)
13:08 < deoxxa> right now it's covered in clothes, but clothes are jerks so they can get screwed and go live in a basket for a while
13:08 < naomi> rvagg: am i supposed to access the internal buffer or something?
13:09 < rvagg> naomi: well, if you're implementing a readable stream then you should have something to read
13:09 < rvagg> return X bytes of whatever that is
13:09 < rvagg> if it's an Object stream... well....
13:09 < naomi> oh!
13:09 < rvagg> return an object
13:09 < deoxxa> x bytes of an object
13:10 < rvagg> currently playing this http://www.youtube.com/watch?v=LBObJhcy8Wg in a room full of Nerds at CampJS
13:10 < naomi> rvagg, well i'm having difficulty understanding the readable.push() method then 
13:10 < rvagg> there are some drunkards and I control the (very loud) sound system so they brought it upon themselves!
13:11 < naomi> rvagg: it's confusing me because `push` makes it seems like readable is inherently ... writable
13:11 < rvagg> naomi: I'm no expert, I've so far managed to avoid streams2
13:11 < rvagg> bother Raynos or dominictarr or isaacs about it when they are around
13:11 < deoxxa> rvagg: so unhappy i missed that - i'm going to be up in brisbane the week after next and i only just got back to .au so i couldn't spare the time to get up there for it :(
13:12 < rvagg> deoxxa: Tim's talking about a second one later this year in Melbourne
13:12 < deoxxa> oh
13:12 < deoxxa> that would be -sweet-
13:12 < deoxxa> i would 100% be down for that
13:12 <@Nexxy> naomi, just call .read() and oyu will get data if it's available
13:12 <@Nexxy> or null if there's nothing to read
13:13 < deoxxa> i'm still yet to get an explanation of how to have two consumers on a streams2 readable stream
13:13 < SomeoneWeird> <rvagg> deoxxa: Tim's talking about a second one later this year in Melbourne<?!
13:13 < SomeoneWeird> awesome
13:13 < deoxxa> i'm not holding my breath for one though
13:13 < rvagg> SomeoneWeird: yes! no need to ask your parents about that one!
13:14 < SomeoneWeird> :P
13:14 < rvagg> I'll have to ask my wife.. 2 in one year might be stretching it
13:14 < deoxxa> rvagg: business expense, yo
13:14 < rvagg> deoxxa: it's not about that
13:14 < deoxxa> rvagg: srsbiz needs srs commitment
13:14 < rvagg> deoxxa: she's going crazy with our little feral children
13:14 < deoxxa> oh lol
13:14 < deoxxa> should make the melbourne one kid-friendly
13:14 < deoxxa> get video games etc
13:14 < deoxxa> bring 'em down
13:15 < SomeoneWeird> >_____>
13:15 < SomeoneWeird> >__________________>
13:15 <@Nexxy> nodeconf is a family event
13:15 < deoxxa> lol SomeoneWeird, that means it'd be accessible to you too!
13:16 < rvagg> Nexxy: tickets to the US are NOT family friendly
13:16 <@Nexxy> :(
13:16 < SomeoneWeird> ha
13:16 < rvagg> yes, I'm very sad
13:17 < deoxxa> "my first cavity search"
13:17 < SomeoneWeird> deoxxa, yeah yeah yeah
13:17 < SomeoneWeird> lol
13:17 < rvagg> that's not family friendly either
13:18 < Drajwer> I can't publish my package via npm publish. the log says "PUT .../mypackage" and then "500 ../mypackage". what is the cause?
13:18 <@Nexxy> WELL THANKS FOR STOPPING BY
13:18 < deoxxa> depends on how you define friendly, really
13:23 < Stephen> How strange
13:25 < gildean> Drajwer: there are some issues with publishing to npm atm.
13:27 < Drajwer> gildean: thanks
14:03 < Stephen> Folks having trouble publishing, I've found your problem
14:03 < Stephen> You need to update npm-registry-client
14:03 < Stephen> isaacs seems to have updated it, but the latest version of npm doesn't require it
14:04 < Stephen> https://github.com/isaacs/npm/blob/v1.2.11/package.json
14:04 < Stephen> Here it still reads
14:05 < Stephen> "npm-registry-client": "~0.2.13",
14:05 < Stephen> That should read 0.2.17
14:05 < nb-ben> does this look fine for streaming data? http://pastebin.com/nNDvy6BN
14:06 < nb-ben> from a buffer
14:07 < nb-ben> forgot to declare curChunkSize
14:07 < geNAZt> well you set the offset if write does return false
14:07 < geNAZt> so it would be possible to "skip" chunks
14:08 < Stephen> Drajwer
14:08 < Stephen> rvagg
14:08 < nb-ben> geNAZt, if write returns false it means write has failed?
14:09 < geNAZt> yes
14:09 < Stephen> Anyone around have a package they'd like to publish?
14:09 < geNAZt> because the buffer of the writer is full
14:09 < rvagg> ?
14:09 < nb-ben> thanks for helping me geNAZt 
14:09 < nb-ben> but the basic concept of only writing when drained is fine?
14:09 < Stephen> Try updating your npm-registry-client to v0.2.17
14:09 < rvagg> Stephen: k, will try
14:09 < Stephen> isaac already checked in the fix
14:10 < Stephen> He just didn't update npm
14:10 < Stephen> the dependency is still set to 0.2.13
14:10 < geNAZt> nb-ben: then you probalby would never have full write speed but thats okay or not ?
14:12 < nb-ben> uh, suppose that's not ideal
14:12 < geNAZt> the best way to write into streams is to write the writer buffer full ( till write returns false ) and then pause the reader stream
14:13 < geNAZt> if there is place (drain) the readable stream writes data into the writer again
14:13 < nb-ben> oh, I see
14:13 < geNAZt> look for the pipe solution in nodejs for this
14:14 < nb-ben> I have it's kind of hard to understand that code when you're not sure what you're looking at :P
14:14 < geNAZt> https://github.com/joyent/node/blob/v0.8.19-release/lib/stream.js#L36-L42
14:14 < rvagg> Stephen: nope, upgraded to 0.2.17 and still the same error
14:14 < geNAZt> where source is the reader and dest is the writer
14:14 < geNAZt> so everytime you emit data out of the reader pipe tries to write data in the writer buffer
14:15 < geNAZt> if this fails the reader gets paused
14:15 < nb-ben> yeah I see
14:15 < geNAZt> https://github.com/joyent/node/blob/v0.8.19-release/lib/stream.js#L46-L50
14:15 < geNAZt> if the dest (writer) has drain the reader gets resumed
14:15 < Stephen> rvagg: Are you sure npm is using it, and not the old 0.2.13? If willing, do a search for that version number
14:16 < rvagg> Stephen: yerp, absolutely sure
14:16 < Stephen> Hrmph
14:16 < Stephen> rvagg: Well, the problem is that the new version being published isn't actually getting sent before the tagging takes place
14:17 < Stephen> rvagg: His last checkin states it fixes that problem.
14:17 < rvagg> btw, this is for a new package, not an upgrade
14:17 < Stephen> rvagg: Upgrades are getting the same error
14:18 < geNAZt> but you must be aware that the writer hasnt queued up the chunk that it fails on
14:18 < geNAZt> so if you get a pause the last read must be repeated on resume
14:18 < Stephen> rvagg: npm is trying to mark a package version as latest before the version exists in the registry
14:19 < rvagg> oh well, my eyes are feeling very heavy, must be time to head to bed pretty soon
14:20 < Industrial> Anyone care to take a look at https://github.com/Industrial/Observable ? (its tested)
14:21 < Industrial> Right now I'm applying methods and properties to instances, not prototypes, but if I would do it on the prototype (most notably the events member, holding all the events and their handlers) it would mess up / share handlers for all instances, which is ofcourse not what I want
14:21 < Stephen> rvagg; Were you getting "Error sending version data"?
14:22 < Industrial> but all the duplicate references on the instances don't make sense. I'd rather have them on the prototype.
14:23 < Stephen> Hmm...
14:24 < Stephen> v0.2.17 doesn't have the "Error sending version data" line anymore
14:32 < sh4d0w28> hello!
14:32 < amurdaca> is req an EventEmitter type in express?!?!
15:06 < Drajwer> Stephen: upgraded npm-registry-client to 0.2.17 and still getting 500's when publishing
15:07 < Stephen> Can you pastie the error?
15:07 < Drajwer> maybe I did wrong the upgrade: npm install -g npm-registry-client
15:08 < Drajwer> http://pastebin.com/TBmN0E4f
15:08 < Stephen> Drajwer: Look in npm/node_module/np-m-registry-client
15:09 < Stephen> What is the version number?
15:09 < Drajwer> Stephen: 2.1.17
15:10 < Drajwer> 0.2.17*
15:10 < SomeoneWeird> amurdaca, no?
15:15 < niggler> anyone here on a mac?
15:15 < deoxxa> mac users? in #node.js?
15:15 < deoxxa> haha
15:15 < deoxxa> must be dreaming
15:15 < niggler> thanks deoxxa
15:15 < niggler> have to deal with turbotax
15:15 < niggler> intuit of course is the bane of osx
15:16 < deoxxa> ah
15:16 < niggler> currently using bootcamp, wondering if anyone recommends parallels or vbox or fusion
15:16 < deoxxa> i use virtualbox when i have to, which is pretty seldom
15:16 < niggler> does it support bootcamp partition?
15:17 < deoxxa> i couldn't tell you, sorry
15:17 < deoxxa> i only use it for a little windows xp vm sometimes
15:20 < Industrial> Is there a simple assert function that I can use in both Node.JS and in the browser? NodeJS has an assert library but then I can't test in the browser (sure with browserify, but my goal is simple  and lightweight, not introducing another dep.)
15:22 < niggler> assertjs Industrial?
15:31 < jrajav> Industrial: I recommend Chai
15:32 < jrajav> Industrial: Well, actually.. is this for testing?
15:32 < Industrial> yes
15:32 < jrajav> Then yes Chai
15:32 < jrajav> :P
15:33 < DarkArgon> mocha
15:33 < jrajav> Mocha is a test runner
15:33 < jrajav> He's looking for assertion
15:33 < jrajav> I also highly recommend Mocha too, though.
15:34 < DarkArgon> oh ok
15:41 < terietor> hello
15:41 < shwaiil> hi
15:41 < terietor> I am trying to make some http request
15:41 < terietor> i use the same code for all of them (http://paste.kde.org/672896/)
15:41 < terietor> they all work except from one
15:42 < shwaiil> Q: anyone using LocomotiveJs or a similar MVC framework ? im trying to understand how to use the node-mysql with it. A github with a ongoing project or whatever would be awesome just to check some code to learn. Tks
15:42 < terietor> i was googling it, and I notice that in the one that it doesn't work that the 'end' or 'close' signals is never emited
15:42 < terietor> s/signal/event
15:43 < terietor> i also tried to use the finish event but its never being called either
15:44 < terietor> and my nodejs version is 0.8.20
15:45 < DarkArgon> requestjs
15:45 < Stephen> terietor: If there is an error on a stream like that, you won't necessarily get an end or close
15:46 < terietor> my request gets a json content, I can take the content from my browser
15:46 < terietor> i have used a json validator and its ok
15:47 < Stephen> terietor: finish calls cb()
15:47 < Stephen> terietor: cb() is undefined
15:48 < terietor> Stephen no its not, I just made a mistake in copy&paste and pasted fewer lines
15:49 < Stephen> Ok, so no error
15:49 < terietor> http://paste.kde.org/672902/
15:50 < Stephen> terietor: Then it might be either null bits or a timeout
15:50 < Stephen> terietor: Can you give any more context as to the time it doesn't work?
15:51 < Stephen> terietor: You might want to be sure that on("data") is enough to fill a string
15:53 < terietor> Stephen on("data") is enough to fill a string, what do you mean?
15:53 < terietor> also I don't think that the code goes there, I never see the output from the line 13
15:53 < terietor> the strange thing is that it works from the rest of them and not for the specific one
15:56 < naomi> where's the official streams1 griefing-the-loss channel?
15:56 < naomi> benchmarks for cipher performance of 0.9.9 from 0.8.20 is gross; like 40x slower
15:56 < deoxxa> but the .pipe implementation is slightly cleaner now!
15:56 < naomi> streams2 must have disgusting overhead
15:57 < deoxxa> so it's obviously totally worth it
15:57 < naomi> "cleaner" or just disgustingly and atrociously abstracted to cover up spaghettis of plumbing behind the scenes?
15:58 < Stephen> #node.js-streamsWon
15:58 < naomi> yay
15:58 < naomi> i'm there
15:59 < deoxxa> well actually the .pipe implementation hasn't changed for some reason
15:59 < geNAZt> well i hasnt changes
15:59 < geNAZt> cause stream2 streams can piped like stream1 streams
16:00 < geNAZt> and you can have code that use stream1 and stream2
16:00 < mmalecki> deoxxa++
16:01 < naomi> deoxxa: i'm pretty sure they .pipe() is just a macro from function pipe(dest) { this.pipe(hell).pipe(setTimeoutStream).pipe(dmvQueue).pipe(customerServicePhoneCall).pipe(indigestion).pipe(hellAgain); hellAgain.on("never", function(){ this.pipe(dest); }); }
16:01 < deoxxa> i remember the complexity of the .pipe() implementation being a major argument for new coke
16:01 < Voting> If I want to, like a chat program, be able to update user interfaces in a bunch of web browsers running Single Page Apps as things are updated on the server, for that something like http://en.wikipedia.org/wiki/JSON-RPC is not so good, right? Clients would need to poll to find out about updates in the server, right?    
16:01 < deoxxa> sorry. new streams
16:01 < Stephen> streams2 isn't about the pipe() implementation
16:01 < eighty4> surely we can all agree that clean code is the number one focus?
16:01 < Stephen> It's about pull instead of push
16:01 < Voting>    	 	 	 	 	 	   Is there anything better than http://en.wikipedia.org/wiki/Socket.io if I want to write Single Page Apps  that are all kept up-to-date with what is happening on a server, such as they would in the case of a chat program?    
16:01 < naomi> Stephen: it's also about 40x slower 
16:02 < Stephen> naomi: Why?
16:02 < naomi> don't ask me
16:02 < naomi> that's why i'm bitching
16:02 < Voting> What are good reasons to not simply standardize on having all my communication between my clients (Single Page Apps) and my servers (node.js servers) be using Socket.io? Performance? Scalability? Firewalls? Confusing code vs. using  JSON-RPC or simple HTTP posts and gets, etc.?    
16:02 < eighty4> Voting: I'm using socket.io for that
16:02 < Voting>    	 	 	 	 	 	   Seems like I have the most power with something like Socket.io, no?    
16:02 < onr> because there is Sock.js :)
16:03 < Voting> Does it make sense to use https://github.com/miksago/node-websocket-server ?   
16:03 < Stephen> Voting: Socket.io if you need to support older browsers. Otherwise, check out sock.js
16:03 < Voting> eighty4: what are the advantages of sock.js? 
16:03 < Stephen> Voting: dnode moved over to sock.js for performance reasons. You might want to see what substack is doing there
16:04 < onr> sock.js is almost identical to websockets
16:04 < Stephen> Socket.io is a really big library, very heavy
16:04 < Stephen> But worth it if you need the fallback qualities
16:05 < eighty4> Voting: I couldn't tell you. Listen to the more experianced guys
16:05 < Voting> very heavy means what?
16:05 < onr> what old browser you're talking about that is supported by Socket.io but Sockjs?
16:05 < Voting> when do I want to use dnode itself?
16:05 < geNAZt> it has more code in it
16:05 < geNAZt> more layers to solve different problems
16:05 < eighty4> I went with socket.io because it seemed to have best browser support
16:05 < geNAZt> like polling and falsh sockets
16:06 < Stephen> Voting: Socket.io is large in size. It includes Flash for certain fallbacks. It's heavy.
16:06 < naomi> geNAZt: yeah, let's add stream.halfPipe() and stream.quarterPipe() layers for the skaters and posers!
16:06 < naomi> more layers === more code === more ..... awesome?
16:06 < naomi> deoxxa: save our streams!
16:06 < context> voting: the site explains what it supports: http://socket.io/#browser-support
16:06 < Stephen> Voting: dnode is remote rpc. It's basically like being able to call server methods from client and vice versa, only safe
16:06 < eighty4> naomi: that or the other way around? Less is more?
16:07 < Stephen> Voting: In those respects, it's just a matter of taste
16:07 < onr> Sockjs supports polling for old browsers
16:08 < Stephen> Voting: In the end, nothing is stopping you. Just pick which of the libraries suits your coding style and needs best
16:08 < naomi> i'd like to point out the node community does not need a dhh dick like rubyonrails has
16:08 < naomi> so can we have our good streams back, please?
16:09 < context> sockjs looks similar to socket.io :-/
16:09 < eighty4> naomi: just use the old version?
16:09 < onr> naomi: use Shoe on top of Sockjs, it's streamy
16:09  * naomi smacks eighty4 with a wet trout
16:10 < eighty4> and socket.io wins on having the best looking page
16:10  * eighty4 give naomi another pepparkaka
16:10 < Voting> Stephen: dnode is going to give me more of a function call interface rather than a stream interface?
16:11 < Stephen> Voting: Yes
16:11 < terietor> should i open a bug for my issue?
16:12 < Stephen> Voting: beware though, the possibility of callback hell in Dnode is tremendous, since now you are doing it across 2 memory spaces
16:12 < naomi> https://github.com/joyent/node/blame/v0.9.9/lib/_stream_readable.js#L585
16:12 < naomi> shame on you, isaacs
16:12 < Stephen> terietor: I think your socket is just running out of data, which I believe is exactly what streams2 are here to solve
16:12 < naomi> shame shame shame
16:13 < naomi> console.log(fucks.given); // 0
16:13  * eighty4 gives naomi yet another pepparkaka
16:13 < terietor> Stephen should I try ti use node 0.9 or something?
16:13 < naomi> terietor: no
16:13 < naomi> terietor: stay away from 0.9 at all costs
16:13 < eighty4> naomi: chill, have a beer and take it like a man
16:14 < Stephen> naomi: Or submit a patch to make it better
16:14 < Voting> I'm supposed to be the new User Intrface god at a company that uses JSON-RPC for nearly everything. I'm thinking of standarzing the UI to node communcation on  Socket.io even though the rest of the company is into JSON-RPC. Could I be making a bad decision? 
16:14 < mscdex> node.js rules!
16:15 < deoxxa> stephen: "1852 lines removed, 0 lines added"
16:15 < Stephen> Voting: It's not the interface that matters, it's the underlying communication you really want to solve
16:16 < Voting> Stephen: Not sure I understand.
16:16 < terietor> Stephen actually I just found out that the server from which I request the url, it doesn't even try to open the url
16:16 < Stephen> Voting: Passing JSON text back and forth can be greatly improved upon. WebSockets, TypedArrays, it's basically like a binary stream
16:16 < terietor> the server is node.js with express
16:16 < naomi> yeah, i'm sure isaacs will accept a patch 
16:16 < naomi> you think Dr. Frankenstein cared about how ugly his creation was?
16:16 < Stephen> Voting: You could do JSON-RPC over Socket.io if you wanted
16:16 < Stephen> Voting: Socket.io is a transport.
16:17 < Voting> Stephen: Ah, so I don't need to use json w/ socket.io? 
16:17 < Stephen> Nope
16:17 < Voting> Stephen: so that makes my code simpler AND run faster?
16:17 < Stephen> Socket.io is just WebSockets.
16:17 < eighty4> naomi: mind linking to some of the changes? Would be interesting to read up on whats been broken.
16:18 < Voting> Stephen: Socket.io is just WebSockets but it also supplies fall back for old browsers?
16:18 < eighty4> naomi: is it only readable or both readable and writable that's messed up?
16:18 < Stephen> Voting: Yes, but it's a wrapper around all that, so all you see is an evented interface to WebSockets
16:19 < naomi> eighty4: somehow this: https://github.com/joyent/node/blob/v0.9.9/lib/_stream_readable.js#L356-L584 is cleaner than this: https://github.com/joyent/node/blob/v0.8.20/lib/stream.js#L33-L116
16:19 < Voting> Stephen: so, if I'm not needing to package stuff up in json like I were doing a http post... what DO I get to send accross the wire? 
16:20 < Voting> Stephen: Say I have the result of a mysql query to send, what are my options for what I send? 
16:20 < eighty4> naomi: 0.9.9 os it's not even a first attempt at 0.9 code.
16:21 < Stephen> Voting: You can encode it however you like. One sec
16:21 < geNAZt> well if the new streams are slower then the old ones
16:21 < geNAZt> why do they build them ?
16:22 < eighty4> naomi: it allows for multiple pipe destinations, that's not possible in 0.8 right?
16:22 < Voting> Stephen: I can't send arbitrary javascript objects, can I? I have to make it some sort of string, right?
16:23 < Stephen> Voting: Here's what you need to know
16:23 < Stephen> https://github.com/LearnBoost/socket.io-spec/blob/master/README.md
16:24 < systemfault> I just got bitten by event emitting in a loop… using process.nextTick and emitting from within it fixed the issue. Anyone has a page where I could find info on why it works with it?
16:24 < deoxxa> eighty4: it is possible
16:24 < deoxxa> eighty4: it's broken though in 0.8
16:24 < deoxxa> eighty4: but it's still broken in 0.9
16:24 < deoxxa> eighty4: sooo...
16:24 < eighty4> deoxxa: :)
16:24 < naomi> eighty4: readable.on("data", fn1); readable.on("data", fn2); ?
16:25 < Stephen> Voting: As I understand it, Socket.io will attempt to send your data across the wire with the most efficient transport it has implemented that is supported by the client
16:25 < deoxxa> eighty4: see https://github.com/deoxxa/steez#multi-target-pipe for my explanation of how it's broken
16:25 < Voting> Stephen: I'm "listening"!
16:25 < Stephen> Voting: Go read
16:27 < eighty4> naomi: Was more thinging of .pipe() but I guess you could do with that as well… 
16:27 < Stephen> systemfault: "Bitten", can you be more specific? Memory overload?
16:27 < Voting> Stephen: reading https://github.com/LearnBoost/socket.io-spec/blob/master/README.md ... brb... thanks!
16:27 < naomi> eighty4: .pipe() is just a macro for assigning listeners and such
16:28 < eighty4> naomi: yeah, I realize that. It was just me being stupid…
16:28 < naomi> eighty4: that's why i wish you'd understand what you were talking about before you started discrediting my complaints
16:28 < Stephen> systemfault: Or was it a race condition?
16:28 < systemfault> Stephen: I set an event listener on my object… then try to emit in a loop from another place in my code and the event listener never gets called
16:29 < eighty4> naomi: I'm sorry about that. It wasn't my intend to be a jerk. I realize it came of like that tho. Sorry for that.
16:29 < systemfault> Stephen: directly using myListener.call(myObject, arg); worked.. and also using process.tick
16:29 < naomi> eighty4: it's fine
16:29 < systemfault> *nextTick
16:29  * deoxxa pets naomi on the head and feeds her a biscuit
16:30 < naomi> f' yr high-carb snacks!
16:30 < Stephen> systemfault: As I understand it, .nextTick() may work like setTimeout() in it's scope change effect
16:30 < deoxxa> oh plz
16:30 < naomi> deoxxa: don't be gettin' me started, bru
16:30 < naomi> deoxxa: dems fighten wurdsz
16:31 < systemfault> Stephen: That's what I'm reading, I was wondering if there is a definitive source of information about it.
16:31 < deoxxa> naomi: technically they were fighting baked goods
16:31 < eighty4> deoxxa: "In this case, you would logically expect the src stream to be limited to the slower of the two dst streams." I agree with you there. But I'd think that that's not the best solution in all situations either. You might want to feed both the pipes as fast as they can handle it. But I guess that would be a lot more complex
16:31 < naomi> deoxxa: no surprise there, fattykins
16:32 < SomeoneWeird> deoxxa, br0
16:32 < deoxxa> eighty4: oh definitely, there are good cases for both behaviours
16:32 < naomi> <Buffer 64 65 6f 78 78 61>, br0
16:32 < groundwater> systemfault: do you have a code example?
16:32 < deoxxa> eighty4: but the "obvious" behaviour (in my opinion, perhaps not that of others) is that the source stream would behave nicely
16:32 < SomeoneWeird> naomi, lold
16:32 < naomi> SomeoneWeird:  <3
16:33 < deoxxa> SomeoneWeird: SUP YO
16:33 < eighty4> deoxxa: yeah I agree that having the slow stream controll it would be the best default behavior.
16:33 < eighty4> to bad it isn't working :/
16:34 < deoxxa> enter: steez!
16:34 < deoxxa> \o/
16:34 < Stephen> systemfault: Here's an article with examples: http://blog.mixu.net/2011/02/03/javascript-node-js-and-for-loops/
16:34 < deoxxa> i use streams a lot at work and it's made my life easeir
16:34 < deoxxa> *easier
16:34 < eighty4> deoxxa: right. But that doesn't handle my alternative does it?
16:35 < deoxxa> well, you could do it by shoving another stream in the middle which just always returns true for .write()
16:35 < naomi> .write() //false
16:35 < naomi> sorry
16:35 < naomi> never again
16:36 < deoxxa> function OpenThrottle() { Steez.call(this); } util.inherits(OpenThrottle, Stream); OpenThrottle.prototype.write = function write(data) { this.emit("data", data); return true; };
16:36 < deoxxa> then you can just src.pipe(new OpenThrottle()).pipe(slow_dst);
16:36 < eighty4> deoxxa: off-topic, but Germany is a really nice country. If you're able try to visit Berlin
16:36 < deoxxa> i'm a big fan of old streams, clearly
16:36 < naomi> because steez handles backpressure ***properly***
16:36 < systemfault> groundwater: Yeah.. http://jsbin.com/uteyiy/1/ 
16:37 < groundwater> systemfault: that whole article just doesn't understand sync vs async
16:37 < systemfault> groundwater: Look for the "My problem" comment
16:37 < systemfault> groundwater: With the process.nextTick, it works fine.. if you try to remove it, it fails
16:37 < deoxxa> eighty4: i was going to visit germany at the end of last year, but ended up having to cut it from my itinerary when i got sick :(
16:37 < naomi> deoxxa: never fear though, we have legacy converters that will detect your dummie streams and wrap them in a janky prototype at runtime !
16:37 < eighty4> deoxxa: er… that was from months and months back :)
16:38 < deoxxa> lol?
16:38 < systemfault> groundwater: I'm just having fun with es5 + q.js and node.js, I hope it's a bit readable
16:38 < deoxxa> naomi: yessssssss!
16:38 < eighty4> deoxxa: Berlin is a great city. If ever in German go there
16:38 < naomi> deoxxa: see our documented wrap() function that the source code says is not part of the api
16:39 < naomi> deoxxa: it's here to make your life <s>easy</s> go straight to abstraction hell in a slow kludgy stream implementation
16:39 < naomi> deoxxa: did i mention we've nicknamed them streams2? it means they're better
16:39 < deoxxa> lol
16:40 < deoxxa> i just keep thinking "new coke"
16:40 < naomi> step 1: streams 2, step 2: get paper
16:40 < eighty4> naomi: you benchmarked the changes?
16:40 < naomi> 40x slower, eighty4
16:40 < eighty4> :|
16:40 < naomi> for the new crypto.createCipher() stream shit
16:40 < naomi> it sucks
16:40 < superjoe> has isaacs seen the npm publish issue yet?
16:41 < eighty4> naomi: 40x is absurd
16:41 < geNAZt> can you post a test case ?
16:41 < naomi> it's a "dev" branch though, so who knows what will happen once they "stablise" it
16:41 < eighty4> given how important streams are...
16:41 < deoxxa> 100x!
16:41 < groundwater> systemfault: check the order things are happening
16:41 < naomi> geNAZt: i'd love to!
16:41 < eighty4> I'd love to see a test-case as well
16:42 < groundwater> systemfault: most likely, the event is being emitted before the listener is bound
16:42 < geNAZt> so how do you benchmarked it ?
16:42  * eighty4 loves benchmarking things
16:42 < geNAZt> with love ? oO
16:42  * deoxxa benchmarks loving things
16:42 < systemfault> groundwater: So using process.nextTick is the thing to do? It's not a hack?
16:42 < deoxxa> "this kitten is 5.5x more lovely than this puppy"
16:42 < eighty4> deoxxa: in that case slow is better?
16:42 < groundwater> systemfault: you can always check the order, put some console.log statements in to see what order things happen in
16:43 < eighty4> deoxxa: right… I took "loving" way to literal
16:43 < deoxxa> "i propose that we upgrade all puppies to kittens immediately"
16:43 < deoxxa> eighty4: lol
16:43 < owen1> i don't understand stdout in unix. i wrote i node library that emit udp packets. i use console.log if the udp was send of if there was some error - http://hastebin.com/liloloyeqi.js   . my friend wrote a mocha test for this library and told me i am polluting the output of his tests since i used stdout too much. so what is stdout/ stderr means and how to make sure i am a well-behaved unix citizen?
16:43 < systemfault> groundwater: Thanks for looking :)
16:43 < superjoe> owen1, libraries should never use stdout
16:43 < deoxxa> unless they're logging libraries
16:44 < deoxxa> even then, arguably, you should be able to pass in another target stream/filehandle instead
16:44 < superjoe> deoxxa, sure but in that case you're better off passing a file handle anyway
16:44 < superjoe> ;)
16:44 < deoxxa> heh
16:44 < deoxxa> +1
16:44 < deoxxa> great minds, buddy!
16:45 < superjoe> owen1, if your library encounters an error, it needs to communicate that error to the code that is using the library
16:46 < superjoe> writing about the error on stdout/stderr will not help the code that is using your library handle the error appropriately
16:46 < groundwater> systemfault: np
16:46 < deoxxa> superjoe: notable violator of this principle - socket.io
16:48 < superjoe> no kidding
16:48 < superjoe> :-/
16:48 < deoxxa> i do kind of understand their reasoning
16:48 < deoxxa> but it's still annoying as heck
16:49 < deoxxa> like, socket.io is used by so many... beginners... that it's probably really helpful to have it log everything by default
16:49 < deoxxa> still, derp
16:50 < zomg> Does socket.io still cause a crash in the long run if you don't disable logging? :p
16:50 < deoxxa> ha, maybe
16:51 < naomi> geNAZt: i'll have a link to post in a second
16:52 < geNAZt> okay
16:53 < Stephen> systemfault: Took me a bit, but here you are: https://github.com/joyent/node/blob/master/src/node.js
16:53 < Stephen> That's the source for process.nextTick
16:54 < systemfault> :P
16:59 < naomi> crytpo.createCipher() and crypto.createDecipher() are ~4x slower in 0.9.9 compared to 0.8.20: https://gist.github.com/naomik/4967659
17:00 < naomi> geNAZt: i was able to improve 0.9.9 results by simplifying the stream-based calls in the 0_9_9.js script
17:00 < Stephen> systemfault: I found the actual reason
17:01 < systemfault> Stephen: ? :)
17:02 < Stephen> systemfault: It appears that when events are emitted in a loop like that, they get added to a top level queue
17:02 < Drajwer> what is the difference between 'require('./')' vs 'require('./lib/mylib.js')' assuming package.json contains "main": "./lib/mylib.js" so the first one should work. mylib.js exports build/Release/mylib.node. I see difference in how my module works.
17:02 < naomi> isaacs: streams2 is weak https://gist.github.com/naomik/4967659
17:02 < Stephen> That queue is cleared in the finally()
17:02 < Stephen> So it's possible to loop indefinitely
17:03 < systemfault> Stephen: That's good to know :)
17:04 < harbhub> hey
17:04 < harbhub> what type of database would you use for a store inventory?
17:04 < harbhub> redis would not be a good option, correct?
17:05 < deoxxa> depends, is it a startup?
17:05 < harbhub> no
17:05 < deoxxa> it might be out of business before you have to reboot the redis box
17:05 < harbhub> a huge, global compan
17:05 < deoxxa> so it might be ok
17:05 < harbhub> company*
17:05 < harbhub> they use SQL
17:05 < harbhub> i'm wondering if there is a newer alternative
17:05 < harbhub> that can handle it
17:05 < deoxxa> i think you'll find that just about anything will handle it
17:05 < harbhub> what?
17:05 < Stephen> systemfault: Was you event handler issuing multiple callbacks?
17:05 < deoxxa> it really comes down to what's a good fit for your programming style and the application itself
17:06 < harbhub> deoxxa, i said "No" it is not a startup
17:06 < harbhub> deoxxa
17:06 < deoxxa> yes, i'm aware of that
17:06 < Stephen> systemfault: Throwing any other events with handlers?
17:06 < harbhub> i just told you, it is for a store inventory
17:06 < eighty4> naomi: nice example
17:06 < harbhub> so can redis handle that?
17:06 < deoxxa> well yeah, sure
17:06 < deoxxa> it might not be a good fit though
17:06 < harbhub> right
17:06 < deoxxa> might be hard to work with in the long run
17:06 < naomi> eighty4: thanks
17:06 < harbhub> what is a good fit
17:06 < harbhub> what wouldn't be hard to work with in the long run?
17:07 < harbhub> for a global company that sells furniture
17:07 < deoxxa> well, if they already have an sql database in place... i'd just use that probably
17:07 < harbhub> ok
17:07 < harbhub> otherwise?
17:07 < harbhub> if you could start fresh
17:07 < deoxxa> my personal go-to is mongodb these days
17:07 < harbhub> do you use redis for anything?
17:07 < deoxxa> caching mostly
17:07 < geNAZt> naomi: http://www10.pic-upload.de/16.02.13/hdwdz7yc13o1.png; Top => 0.8.19; Bottom => 0.9.9
17:07 < harbhub> have you tried couchDB?
17:07 < deoxxa> yep
17:07 < systemfault> Stephen: I added a ton of console.log on that code..and it was going like this: (Starting adding event handler)tons of events emitted(Ending adding event handler) instead of (Starting adding event handler)(Ending adding event handler)tons of events emitted
17:07 < Stephen> systemfault: That's crazy.... apparently if you feed nodejs a steady stream of handled events in a scope, it will allow other events only to bubble adjacent to it, and then node will just never process it
17:07 < harbhub> so redis is your temporary store?
17:08 < harbhub> what do you mean by caching
17:08 < deoxxa> harbhub: redis is where i keep stuff like binary blobs that i can afford to have disappear
17:08 < geNAZt> OS Windows 7 x64 on a AMD Phenom 2 X965 BE (4x3.41 Ghz)
17:08 < deoxxa> harbhub: also i use it as a pub/sub thing in some cases
17:09 < Stephen> systemfault: Exactly. If you feed node a steady stream of events in a scope, it will block all other events
17:10 < Stephen> Because the finally() runs before it bubbles up
17:10 < systemfault> Stephen: At least, there's a workaround for it… It can be a wtf for people like me beginning with node (I'm familiar with client-side JS though)
17:10 < naomi> geNAZt: yeah, about the same ratio on my end
17:10 < Stephen> systemfault: I'm just reading this myself
17:11 < naomi> geNAZt: pretty significant drop, yeah?
17:11 < geNAZt> yes
17:11 < geNAZt> i am surprised
17:11 < Industrial> So I created two npm style packages at https://github.com/Industrial/Observer and https://github.com/Industrial/Component
17:12 < Industrial> if I clone component and do an npm install it will try to (and succeed) somehow to install Observable instead of Observer. I recently renamed my Observable project to Observer. Do I need to clear a cache somewhere?
17:12 < Stephen> systemfault: That piece of source code is also where the javascript engine event loop timer hits the c++ timer, it looks like the limit in JS land is 1000 callbacks per tick
17:13 < systemfault> Stephen: Mine has less than 50 so that limit is far from reach… but again, it's good to know that limit exists
17:13 < Industrial> also, ack-grep Observable yields nothing, so I find it weird that npm is able to find an Observable package from somewhere.
17:15 < Industrial> see: https://gist.github.com/Industrial/d3256368daf89832730b I have no idea where this Observable is coming from.
17:15 < Stephen> Industrial: npm cache ls
17:16 < Stephen> Industrial: npm cache clean
17:16 < naomi> geNAZt: perhaps more interesting is the handshake process; it's nearly identical in performance between 0.8.20 and 0.9.9
17:16 < naomi> geNAZt: so it really is teh stream crap that is choking 0.9.9
17:16 < Industrial> Stephen, cheers
17:16 < Stephen> np-
17:16 < geNAZt> well are fs streams slower then in 0.8 ?
17:16 < naomi> than*
17:16 < naomi> i don't know
17:17 < Stephen> with all the work in libuv I doubt it
17:17 < Industrial> Stephen, I did a clean (and sudo -g), but it's still doing it :S
17:17 < naomi> stephen, i somehow doubt that libuv has anything to do with the new nastiness going on in slib/tream.js
17:17 < naomi> lib/stream.js*
17:17 < Stephen> Industrial: Have you tried running "locate Observable"
17:18 < Stephen> ?
17:18 < Stephen> Industrial: if not, before, you may want to go to your root directory and run "updatedb" first
17:18 < Industrial> oh, it's in my ~/.npm.
17:18 < Stephen> :-)
17:20 < Stephen> naomi: No, it's to say that so much work has been done on keeping IO fast that I'm really doubting fs streams will suffer
17:20 < Stephen> naomi: Especially seeing that the OS will already fill the thing as fast as it can
17:21 < naomi> stephen fs streams are not the only streams, br0
17:21 < Stephen> It's a model for how they are changing streams
17:21 < Stephen> I know they arent
17:22 < naomi> relevance ?
17:22 < owen1> superjoe: thanks for clarifying it. so how to communicate the errors to the code using my library? node event emitter?
17:22 < naomi> deoxxa: what percentage of your streams interact with the file system?
17:22 < superjoe> owen1, that's one way
17:22 < owen1> superjoe: what other ways are available?
17:23 < superjoe> there is a convention that if you have a callback, the first argument is an error, or null if it worked
17:23 < deoxxa> naomi: very few
17:23 < Stephen> relevance is that a lot of people have been busting their asses to get this right, and each piece has more than 1 factor. Making all streams behave the same is a worthy goal
17:23 < mikolalysenko> is npm still down?
17:23 < deoxxa> naomi: most of my streams are object streams - but the ones that aren't mostly talk to the network
17:23 < superjoe> mikolalysenko, yes, you still can't publish
17:23 < mikolalysenko> damn
17:23 < superjoe> owen1, if you look at the API docs for the modules that come with node, you'll see some good examples
17:23 < mikolalysenko> superjoe: any eta on a fix?
17:23 < owen1> superjoe: the callback convension was related to my question?
17:24 < Stephen> Yeah, it looks like a couchdb bug is what's actually holding up NPM
17:24 < superjoe> mikolalysenko, nope, I haven't even heard from isaacs yet and he's the only one with the power to fix it, I think
17:24 < mikolalysenko> probably asleep...
17:24 < superjoe> owen1, yes - see the node API docs for examples of the callback convention
17:24 < superjoe> owen1, http://nodejs.org/docs/latest/api/
17:24 < superjoe> mikolalysenko, the bug was reported 12 hours ago
17:24 < superjoe> that's a lot of sleep
17:25 -!- mode/#Node.js [+o isaacbw] by ChanServ
17:25 < naomi> deoxxa: fs is obsolete :D
17:25 < superjoe> wut
17:25 < AAA_awright> Heisenbugs are the worst
17:25 < deoxxa> whaaa?
17:25 < owen1> so let's say mocha is using my library, i can use callback or evet emiter as a way to communicate with it. never use stdout (console.log) or stderr (console.error). is that accurate?
17:25 < naomi> stephen, thankfully streams are optimizing usage for fs though
17:25 < AAA_awright> ugh]
17:26 < deoxxa> oh like actual filesystems are obsolete
17:26 < deoxxa> you know it
17:26 < mikolalysenko> can he just revert to the last working version or something?  how does this even happen...
17:26 < deoxxa> the cloud, man
17:26 < harbhub> deoxxa, why do you prefer mongodb over couchdb?
17:26 <@isaacbw> hey substack, what would be involved in adding floating point math to bigint?
17:26 < superjoe> owen1, correct
17:26 < deoxxa> harbhub: primarily the tailable cursor functionality - we use it *a lot* at work
17:26 < harbhub> isaacbw, you talking about bigint from python?
17:27 < harbhub> tailable cursor?
17:27 < harbhub> what is that?
17:27 < deoxxa> harbhub: so because of that, i've learnt a lot about mongodb. at this point it's just that i'm familiar with it.
17:27 <@isaacbw> harbhub, I'm talking about substack's bigint module
17:27 < owen1> superjoe: is this rule also apply for my stand-alone website?
17:27 <@isaacbw> it uses libgmp, which does have floating point math
17:27 < deoxxa> harbhub: you can open a query, then just keep it open forever and it'll return results as documents are inserted that match the query
17:27 < Stephen> naomi: whether or not streams optimize fs is strictly a consequence of the hardware speed
17:27 < AAA_awright> isaacbw: Generally you use bigint libraries for stuff like crypto which are discrete
17:27 < naomi> stephen ???
17:27 < harbhub> deoxxa, how?
17:27 <@isaacbw> you guys don't know what I'm talking about
17:27 < owen1> superjoe: i want to log to a file. isn't that using stdout / stderr?
17:27 < harbhub> i know bigint
17:27 < superjoe> owen1, there is a distinction between apps and modules. it is recommended that apps *do* log information and modules *do not*
17:27 < harbhub> just not the module you are talking about
17:28 < Industrial> Stephen, the issue is persisting. I've purged everything Observable from my system (according to locate), and did a rm -rf ~/.npm. Though the package points to Observer on github, it is still being named Observable. Not sure where I'm going wrong.
17:28 < harbhub> but it should be the same idea
17:28 < harbhub> just a math module, right?
17:28 < deoxxa> harbhub: see http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/
17:28 < owen1> superjoe: got it. thanks a lot
17:28 < harbhub> big-integer
17:28 <@isaacbw> I'm talking about a specific one which is built on libgmp
17:28 < harbhub> deoxxa, could you store a giant inventory in mongodb?
17:28 < superjoe> owen1, think about it this way - there is a dependency chain that describes your project. the root node - the one that has dependencies and no dependants - should be the only thing logging
17:28 < mikolalysenko> it would probably be good to have a native js bigint library eventually
17:28 < harbhub> i suppose yes, since it can be sharded, right?
17:29 < deoxxa> harbhub: sure, why not
17:29 < mikolalysenko> that way you could run it in the browser too
17:29 < harbhub> would you?
17:29 < Stephen> Industrial: check your package.json
17:29 < deoxxa> harbhub: it really depends on what kind of data. if there are a lot of relations, a relational database would probably work better.
17:29 < Industrial> Stephen, https://github.com/Industrial/Component/blob/master/package.json
17:29 < harbhub> what is an example of a relational database?
17:30 < superjoe> harbhub, postgresql
17:30 < naomi> mysql LOL
17:30 < naomi> well, mysql tries
17:30 < Stephen> Industrial: You are sure the local one is the same?
17:31 < Industrial> Stephen, yes. I just did a clone and it still does it
17:31 < harbhub> what type of db is mongo? redis?
17:31 < harbhub> postgre is relational
17:31 < harbhub> so what are the others
17:31 < Stephen> Industrial: Hah!
17:31 < Stephen> https://github.com/Industrial/Observer/blob/master/package.json
17:31 <@isaacbw> they are unique
17:31 < Industrial> harbhub, you can google these kinds of questions
17:31 <@isaacbw> redis is key-value
17:32 < Stephen> Industrial: Look at the name there
17:32 < harbhub> i can also ask them here
17:32 < Industrial> Stephen, oooops
17:32 < harbhub> redis is kvs
17:32 < Industrial> thanks
17:32 < harbhub> like isaac said
17:32 < Stephen> reddit https://github.com/Industrial/Observer/blob/master/package.json
17:32 < Stephen> Er
17:32 < Stephen> What?
17:32 < harbhub> i understand redis, it is simple, i use it a lot
17:32 < harbhub> just store the value
17:32 < harbhub> retrieve it
17:32 < harbhub> store a hash, retrieve the fields and the values
17:32 <@isaacbw> mongo can't be summed up in a few sentences on irc. Just read the docs
17:32 <@isaacbw> mongodb has a great website
17:33 <@isaacbw> if you want a buzzword: "document store"
17:33 < harbhub> document meaning?
17:33 <@isaacbw> meaning you have to read about it
17:33 < owen1> superjoe: got it. i am also confused with the usage of stdout and stderr by different unix tools. in node i can use child_process.spawn or .exec and i am not sure if i should display the stdout or the stderr that is emitted. 
17:33 < Stephen> document meaning a big ass JSON Store
17:33 < Industrial> Stephen, seems ack-grep is not dependable some times or I'm using it wrong :S
17:33 < superjoe> owen1, it depends. I would need more context to give advice
17:33 < harbhub> thanks stephen
17:34 < harbhub> i understand big ass json stores  :)
17:34 < harbhub> but... can't i just use redis for that?
17:34 < harbhub> stringify the object, store the big ass string in redis
17:34 < harbhub> retrive the string, json prase it
17:34 < Stephen> harbhub: No, it's a key-value pair
17:34 < harbhub> parse*
17:34 < Stephen> Big-Ass array store
17:34 < harbhub> what?
17:34 < harbhub> hmm
17:34 < Stephen> No Arrays inside arrays
17:35 < Stephen> Unless you stringify them
17:35 < harbhub> right
17:35 < Stephen> I believe
17:35 < owen1> superjoe: i build a little node service that you'll be able to POST /project-foo/test and it will kick the integration tests of this project by ssh to a remote host and running the tests while streaming back to the caller the test progress.
17:35 < harbhub> i would stringify everything
17:35 < harbhub> are node.js developers in demand?
17:35 < Stephen> harbhub: MongoDb if you need to do complex queries over the data of any sort.
17:35 < owen1> superjoe: should i use .exec or .spawn and should i listen to both stderr and stdout of the ssh commands?
17:36 < harbhub> stephen, can you give me one example of a complex query?
17:36 < Stephen> harbhub: If you live in San Francisco and made a iOS game once.
17:36 < superjoe> owen1, I would recommend spawn so that you can stream the results - exec waits until the process is ended before calling the callback
17:36 < Stephen> harbhub: Otherwise we're all working at it
17:36 < eighty4> ffs >< I really want named capture in match() :(
17:36 < owen1> superjoe: exactly! but spawn is not using shell, right? exec running in a shell
17:37 < superjoe> owen1, you can still run a shell with spawn. just start bash and send the correct bash parameters to run your tests
17:37 < harbhub> stephen, can you give me an example of the complex query?
17:37 < superjoe> owen1, look up bash -c
17:37 < harbhub> that you would use mongo instead of redis for?
17:37 < harbhub> i've been stringifying objects and storing then in hash sets with redis
17:37 < harbhub> but maybe that isn't the most efficient way lol
17:38 < Stephen> harbhub: Anything beyond a simple list of keys. Any query that would require SQL. The only exception here is queries that you can do with .map() and .reduce()
17:38 < eighty4> anyone worked with http://xregexp.com/ ?
17:39 < owen1> superjoe: interesting. so on the host (where project-foo lives) i should have a bash file?
17:39 < Stephen> MongoDB  can do .map and .reduce, but handling that in JS if fairly straight forward
17:39 < harbhub> stephen, what is a query example?
17:39 < superjoe> owen1, nope. did you look up what bash -c does?
17:39 < harbhub> like a specific case
17:39 < owen1> superjoe: i'll do that now. thanks!
17:39 < harbhub> i don't know when a SQL db is supposed to be used lol
17:40 < Stephen> harbhub: Lets say you have a db of People objects who have Address, City, State, and Children as their properties
17:40 < Stephen> Children is an array of People objects
17:40 < harbhub> ok
17:40 < harbhub> ok
17:41 < harbhub> so why can't i just use redis
17:41 < harbhub> make hash sets inside hash sets?
17:41 < harbhub> oh
17:41 < Stephen> You want All people who have all their children living in the same state as them
17:41 < Stephen> That's complex
17:41 < harbhub> hmm
17:41 < harbhub> let me think
17:41 < harbhub> all people have x,y,z
17:41 < harbhub> all children are people
17:41 < harbhub> but a special subset
17:41 < harbhub> hmm
17:41 < harbhub> good point
17:41 < harbhub> so
17:41 < harbhub> how do you handle that?
17:42 < deoxxa> pretty sure handling children is an illegal operation
17:42 < harbhub> ...
17:42 < harbhub> lol
17:42 < harbhub> context..!
17:42 < harbhub> so
17:42 < harbhub> in redis
17:42 < systemfault> deoxxa just won an internet!
17:42 < harbhub> what i would do is:
17:42 < harbhub> make a hash set called people
17:42 < harbhub> hmm
17:43 < harbhub> actually yeah that wouldn't be good
17:43 < harbhub> so stephen, what db would *you* use
17:43 < harbhub> to handle the people/children/properties scenario
17:44 < Stephen> You'd select every Person who has a Children.length > 1, and where reduce(State, Children, function(Child) { return State == Child.State; })
17:45 < harbhub> what does reduce do?
17:45 < Stephen> reduce runs a function on every member of an array to produce a single value
17:46 < Stephen> The easiest version of a reduce would be a sum of all numbers in an array
17:47 < harbhub> ya i don't know what you mean
17:48 < geNAZt> naomi: do you fill a issue for the stream2 ?
17:48 < naomi> i dunno, is it an "issue"
17:48 < Stephen> harbhub: Ok, reading time: http://docs.mongodb.org/manual/applications/map-reduce/
17:48 < Stephen> Enjoy
17:48 < Stephen> Think you sir, come again
17:48 < geNAZt> yes ofc
17:48 < naomi> they're probably going with "cpu is disposable; api is better so who cares?"
17:49 < geNAZt> why would some refactored code be slower
17:49 < harbhub> thanks stephen
17:49 < harbhub> i will read and come again
17:49 < geNAZt> i dont think it is the goal to produce slower code
17:51 < eighty4> geNAZt, naomi is it possible that they haven't noticed the performance hit?
17:52 < geNAZt> well its the question on how they test code
17:52 < geNAZt> do they only test if it works (like the tests in the node repo)
17:52 < geNAZt> or do they make performance test across versions ?
17:52 < context> test doesnt necessarily mean performance test
17:53 < context> but the 40% naomi is saying just sounds bad
17:53 < geNAZt> it is
17:53 < geNAZt> i runned the test on my machine and its really bad
17:53 < naomi> geNAZt: their tests are okay...
17:53 < naomi> not the best 
17:53 < naomi> but they're ok
17:53 < eighty4> context: not 40% 40x
17:54 < naomi> eighty4: i got it reduced to 4x
17:54 < eighty4> oh
17:54 < eighty4> so 10x?
17:54 < naomi> context: 4x slower is a pretty big hit
17:55 < eighty4> … "reduced TO 4x" ah well. it's still way slower
17:55 < geNAZt> 36 op/s (v0.8.19) to 14 op/s (v0.9.9) => v0.8.19 is 157 % faster then 0.9.9 in this case
17:56 < harbhub> stephen:  https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce
17:56 < harbhub> i found this useful in understanding reduce
17:56 < harbhub> just so ya know
17:56 < Stephen> Yeah, I write Firefox extensions
17:56 < Stephen> I'm on that site quite a bit
17:56 < naomi> geNAZt, eighty4, context: filed here: https://github.com/joyent/node/issues/4789
17:57 < tjfontaine> have you tried master?
17:57 < geNAZt> maybe a bit more infos :D
17:57 < geNAZt> no but i can try it
17:59 < naomi> tjfontaine: are you asking me?
17:59 <@isaacbw> guise guise guise look at this thing I did: https://github.com/isaacbwagner/node-cql3
17:59 < tjfontaine> naomi: yes
18:00 < naomi> isaacbw: lol @ node-nelly
18:00 < naomi> that really tickles my funnybones
18:01 <@isaacbw> :P
18:01 <@isaacbw> does anyone know this guy? https://github.com/kesla
18:04 <@isaacbw> how do most node db modules handle 64bit+ integers?
18:05 < geNAZt> casting them to strings i guess
18:05 < geNAZt> https://github.com/substack/node-bigint
18:05 <@isaacbw> yea, that's what I'll do if I have to
18:06 <@isaacbw> or maybe I'll just give a special object type which contains a buffer and let the user do what he/she wants
18:06 < naomi> deoxxa: chime in re 64-bit int? ^^^
18:06 < mscdex> owen1: there's also an ssh module so you don't have to do child processes for ssh or sftp
18:06 < mscdex> :-D
18:06 < mscdex> isaacbw: i use strings across the board (except for null of course) for my driver binding
18:07 <@isaacbw> hmm
18:07 < graeme_f> hey guys - any eta on npm publish working again?
18:07 < mscdex> imho trying to do type conversions (at least in JS) is a pain and too complicated
18:07 < mscdex> *automatic type conversions
18:07 < geNAZt> graeme_f: 3Days 14Hours 32Minutes and 36Seconds
18:08 <@isaacbw> well, most of the types behave well in js
18:08 < deoxxa> naomi: 64 bits is too many bits - stop being greedy
18:08 < graeme_f> geNAZt: perfect - many thanks
18:08 <@isaacbw> it's just a few, like bigint, varint, stuff like that
18:09 < naomi> deoxxa: where is our arbitrary precision in js ?
18:09 < naomi> gimme ?
18:09 <@isaacbw> does Buffer have special handling in node? Would it be crazy to do something like *.prototype = Buffer?
18:10 < naomi> isaacbw: Buffer is node/lib/buffer.js 
18:10 <@isaacbw> so you're saying no magic?
18:10 < naomi> isaacbw: "does Buffer have special handling in node?" it _is_ part of node
18:10 < tjfontaine> there's Buffer and SlowBuffer
18:10 <@isaacbw> I mean in the native components :)
18:10 < deoxxa> naomi: 53... bits?
18:10 < naomi> what do you mean "special handling"?
18:11 < naomi> isaacbw: you can pass around as big as a number as you want in a Buffer byte stream; the receiving object just has to know how to handle it
18:11 < tjfontaine> well only as big as the memory you have available anyway :)
18:11 <@isaacbw> what I mean is, can I use it like any other javascript, e.g. MyBuffer.prototype = Buffer
18:12 < naomi> you can use util.inherits(MyThing, Buffer);
18:12 <@isaacbw> cooleo
18:12 < mscdex> even Buffers have an upper bound
18:12 < mscdex> <= 32 bits
18:12 <@isaacbw> huh?
18:12 < naomi> ...
18:12 < naomi> mscdex what
18:13 < mscdex> for buffer length
18:13 < geNAZt> mscdex buffers arent bound to anything oO
18:13 < geNAZt> no
18:13 < naomi> Buffer is a stream of bytes as long as the all the corn cobs of the midwest USA laid out end-to-end
18:13 < tjfontaine> when pulling out of them, readUInt style
18:13 < mscdex> geNAZt: yeah
18:13 <@isaacbw> oh :D
18:13 < geNAZt> gangnam style :D
18:13 < naomi> because corn cobs
18:14 < naomi> 1 unit per kernel of corn divided by 0
18:14 < naomi> buffers ^
18:14 < mscdex> https://github.com/joyent/node/blob/v0.8/src/node_buffer.h#L69
18:16 < thanpolas> damn, my npm publish keeps crashing with "publish Error sending version data"
18:16 < geNAZt> which is a buffer of ~1GB
18:16 < thanpolas> what are "silly lockFile 3a52ce78- ." messages?
18:16 < mscdex> geNAZt: yep
18:17 < geNAZt> enought to carry the biggest number in the world
18:17 < mscdex> i was mainly replying to what tjfontaine said ;-)
18:20 < thanpolas> anyone?
18:20 < geNAZt> its a bug
18:20 < geNAZt> you cant fix
18:20 < owen1> what options do i have to communicate between 2 node servers? i believe dnode is one. are there more?
18:21 < geNAZt> owen1: tcp streams ?
18:21 < mscdex> thanpolas: lots of people are having publishing issues currently
18:21 < Stephen> Any of you up for helping me test something right quick?
18:21 < owen1> geNAZt: any kind of communication
18:21 < Stephen> http://nova-initia.com/rtmfp/demos/chat/?room=a200363f17b16b1d24e570affc878dac16ad49074aa1f5f70254cbed6344d9fd
18:21 < Stephen> Go there and choose a name, please
18:21 < geNAZt> no why using dnode instead of raw tcp connections ?
18:21 < thanpolas> mscdex, ok thankyou… is there a 'status' page i can look at?
18:22 < bradleymeck> geNAZt: probably due to reconnect logic etc if you arent stateless
18:22 < mscdex> thanpolas: not really. afaik isaacs is the only one that is able to fix whatever it is
18:22 < thanpolas> i see
18:23 < thanpolas> ….and i guess isaacs is aware of the issues
18:23 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:23 < djalmaaraujo> Do you know a better alternative to socket.io?
18:23 <@isaacbw> socket.io is the cream of the crop
18:24 < Stephen> Thamls Wursteimer
18:24 < mscdex> thanpolas: no idea, it's the weekend heh. he's @izs in case you want to monitor that for updates
18:24 < owen1> geNAZt: so dnode is the only option? or there are any alternatives?
18:25 < djalmaaraujo> @isaacbw this supose to good?
18:25 < djalmaaraujo> *to be
18:25 <@isaacbw> um, what
18:25 < bradleymeck> djalmaaraujo: sockshttps://npmjs.org/package/shoe maybe?
18:26 < bradleymeck> dont know your use case
18:26 < djalmaaraujo> @bradleymeck let me see, thanks
18:26 < geNAZt> tjfontaine: i compiled the current master branch and its slow
18:26 <@isaacbw> djalmaaraujo, you're saying you don't like socket.io?
18:26 < Stephen> sock.js is great djalmaaraujo
18:26 < Stephen> Socket.io runs on ANYTHING
18:27 < geNAZt> about 291% slower than 0.8.16
18:27 < djalmaaraujo> @isaacbw no, I'm just search for alternatives for my new project.
18:27 < Stephen> I tried to load Youtube the other day on my daughter's Nintendo DS. The damn videos would load, buck Socket.io had a channel open
18:27 < Stephen> (A small exageration)
18:27 < djalmaaraujo> @isaacbw And yes, I like a lot, it's very simple and very simple :P
18:27 <@isaacbw> good :)
18:28 < Stephen> hey isaacbw. I'm considering putting together the WebRTC version of Socket.io. Basically WebRTC with RTMFP fallback. Thoughts?
18:29 < djalmaaraujo> @isaacbw But, i've made a game for a lecture a few months ago and the server encountered quite slow on the lecture day. Socket.io is good for hight concurrence?
18:29 <@isaacbw> Stephen, I havn't heard of WebRTC before, I'll take a look
18:29 < djalmaaraujo> @isaacbw the game https://github.com/djalmaaraujo/socketrace
18:29 < bradleymeck> djalmaaraujo: how many clients are you trying to take on?
18:30 < bradleymeck> infrastructure and design > modules
18:30 <@isaacbw> socket.io is really just a wrapper for other technologies, so it depends
18:30 < djalmaaraujo> On the day we were 40 clients on the local networks using smatphones!
18:30 < naomi> NEO
18:30 < naomi> GET TO A PHONE
18:31 < djalmaaraujo> When I setup the game on my linode VM seems to be very fast. I guess was the local network
18:31 <@isaacbw> Stephen, is webrtc very widely supported?
18:31 < bradleymeck> not yet
18:31 < djalmaaraujo> webrtc is new yet
18:31 < Stephen> isaacs
18:31 < harbhub> how does webrtc work?
18:32 < Stephen> isaacbw: Chrome just landed it, Firefox is working on it. IE will have it
18:32 < naomi> what is the webrtc option to enable the working feature which config file do i edit?
18:32 <@isaacbw> very slick
18:32 < naomi> harbhub: any ideas? ^^^/??
18:32 < bradleymeck> webrtc: each client goes out to the network and gets an ICE/STUN broker to proxy connections as needed to a different peer
18:32 < systemfault> Mozilla got their webrtc implementation to communicate with the one in chrome :D
18:32 < harbhub> ICE/STUN broker?
18:33 < systemfault> Stephen: Are you sure about IE? From what I read, MS doesn't like it.
18:33 < Stephen> naomi: You do that line too well
18:33 < harbhub> oh, naomi tricked me heh
18:33 < naomi> harbhub.on("data", function(chunk){ return crypto.randomBytes(Math.random() * 100)); });
18:34 < djalmaaraujo> @bradleymeck show is good, maybe i'll play with it
18:34 < naomi> stephen it's a simple trick is when you illustrate something to make a point all you have to do is show how?
18:34 < djalmaaraujo> sorry, *shoe
18:35 < Stephen> systemfault: They're pushing for their own say on the standard, as always
18:35 < Stephen> Especially with Skype just happening
18:35 < systemfault> Heh..
18:35 < naomi> skype is so happening
18:35 < naomi> like so 2013
18:35 < naomi> so 2014 even
18:35 < systemfault> One skype to rule them all!
18:36 < naomi> trendsetters, they are, those skype guys
18:36 < naomi> sky(net)pe
18:36 < systemfault> haha
18:36 < deoxxa> naomi: in event with emitted data has properly sending cause exception to thrown?
18:37 < naomi> deoxxa: catching the event with addListneres according toe the specification it should be possible
18:38 < naomi> #streams2
18:38 < deoxxa> naomi: with documentation how can we read function definition to?
18:38 < naomi> deoxxa: .toSTring()
18:38 < Stephen> systemfault: Damn whores
18:38 < Stephen> http://www.i-programmer.info/news/87-web-development/5365-microsoft-goes-its-own-way-with-webrtc.html
18:39 < systemfault> Heh..
18:39 < naomi> deoxxa: nano /etc/hosts and change fe80::1%lo0           localhost to 127.0.01
18:40 < Stephen> Skype is actually pretty huge with businesses these days
18:40 < Stephen> And since MS bought them, it will eventually merge with Lync (Enterprise Messaging)
18:40 < naomi> especially with their simplex voice com now!
18:40 <@isaacbw> news organizations have gotten lazy and just use skype now
18:41 <@isaacbw> skype is the defacto lazy interview tool
18:41 < Stephen> If there's any market they made some smart moves in, it's Video chat
18:41 < harbhub> video chat seems simple
18:41 < harbhub> to make that is
18:41 < Stephen> Simplex voice?
18:41 < naomi> harbhub: yeah just new Stream(video).emit(bytes);
18:41 < deoxxa> lol
18:42 < nkohari> lol
18:42 < naomi> stephen, skype no longer supports duplex voice com
18:42 < Stephen> Video chat isn't about the data transport, it's all about the codecs
18:42 < nkohari> the trick is scaling the bandwidth
18:42 < naomi> i got you all covered
18:42 < naomi> var stream = new Stream(video, "x264"); webscale(stream).emit(bytes);
18:42 < Stephen> Yeah, voice & video gets expensive. So, if you have the best codec (quality & speed) you win
18:43 < naomi> just require("streams2") at the top and you're good to go ^
18:43 < Stephen> naomi: I do not believe x264 is a streaming codec
18:43 < Stephen> it's just a damn good codec
18:43 < naomi> stephen, it is in streams2
18:44 < harbhub> what's a codec?
18:44 < naomi> that's why streams2 requires 10,000% more source code in 0.9.9
18:44 < harbhub> also, are you guys are professional programmers?
18:44 < harbhub> like full time?
18:44 < naomi> .......
18:44 < naomi> pro(grammar); maybe
18:44 < Stephen> Yes
18:44 < Stephen> I am
18:44 < deoxxa> i'm a professional non-programmer
18:44 < harbhub> where do you work stephen?
18:44 < deoxxa> i spend as much of time time avoiding programming as possible
18:44 < deoxxa> *my time
18:45 < naomi> harbhub: i get paid to do it
18:45  * naomi winks and nods
18:45 < harbhub> deoxxa, does that mean you are a programmer for a living?
18:45 < deoxxa> harbhub: lol, yeah
18:45 < harbhub> so you guys all earn cash by programming!?
18:45 < deoxxa> best believe, yo
18:45 < harbhub> i'm going to be a software engineer
18:45 < Stephen> I work for an Insurance Company, and here: http://nova-initia.com
18:45 < naomi> all us guys all earn real ca$h money records
18:45 < harbhub> lol
18:45 < deoxxa> cream get the money, dolla dolla bill y'all
18:45 < harbhub> are you guys rich?
18:45 < deoxxa> rich is overrated
18:46 < deoxxa> i'm comfortable
18:46 < context> dolla dolla bill Y'ALL !!!
18:46 < context> what deoxxa said
18:46 < context> i dont drive a ferrari but im happy with where i am
18:46 < naomi> harbhub: you are effective i notice the effectiveness
18:46 < francois_> hi everyone
18:46 < naomi> no?
18:46 < deoxxa> context: damn straight
18:47 < eighty4> good evening francois_ 
18:47 < harbhub> naomi, how am i effective?
18:47 < nkohari> hey what do you guys do for log shipping (like rsyslog type services)
18:47 < Aria> x264 is indeed streaming. It has to be worked into an MPEG4 transport stream, though, not a program stream.
18:47 < naomi> harbhub: did install the printer in your household and then join #node.js?
18:47 < naomi> Aria: yeah see you know what i'm saying. streams2.
18:47 < francois_> i just made a simple code that convert form queries like user[name] to {user: {name: ...}}
18:48 < Aria> Hm? How's streams2 interface got anything to do with x264?
18:48 < eighty4> naomi: "did install the printer" is that correct english?
18:48 < nkohari> negatory
18:48 < harbhub> naomi, what about a printer?
18:48 < nkohari> he's making a little jokey joke
18:48 < francois_> is anyone think it's a good idea to put it in querystring.parse ?
18:48 < naomi> francois_: i dunno; i doubt it's as good as teh one here: http://stackoverflow.com/questions/1184624/convert-form-data-to-js-object-with-jquery/8407771#8407771
18:49 < gildean> forms to json, that's the easiest way imo
18:50 < francois_> mine is server side
18:50 < naomi> francois_: the principle is the same though
18:50 < francois_> yes but when 
18:51 < naomi> francois_: building a deeply nested result is not easy; this one uses jQuery in the browser to break apart the name=value pairs
18:51 < naomi> francois_: but if you have the name=value pairs in a different representation, building the js object is pretty eloquent here
18:53 < naomi> francois_: also, can i ask how you're getting user[name] style inputs on the server side in the first pace ?
18:53 < naomi> place*
18:55 < harbhub> naomi, i use formidable
18:55 < harbhub> to parse form posts
18:55 < harbhub> like a boss...
18:55 < francois_> naomi: Sorry I don't understand your question. I needed to parse fields named like ...[...][...] posted by a form.
18:56 < naomi> francois_: so why is it going to the server in a big gross query string?
18:56 < francois_> naomi: the only solution was to parse it server side with querystring.parse (which don't convert [])
18:57 < Stephen> francois_: .Net?
18:57 < francois_> Stephen: nop
18:58 < Stephen> francois_: In that case, hook your "onsubmit" on the form, and use jQuery to do a xhr post
18:58 < Stephen> Turning the form data to JSON is dirt simple
18:59 < soldair> so. i think this is "bad", but i want to check to see if my child process ipc channels is backed up and the only way i have available seems to be by accessing {child process}._channel.buffering && {child process}._channel.writeQueueSize
19:00 < naomi> harbhub: formidable looks pretty obese
19:00 < soldair> but if i cant determine back pressure on the ipc channel it really just cant be used for any kinda of data transfer.
19:00 < francois_> Stephen: Why? it is so ugly, unnatural, ...
19:01 < Stephen> francois_: Does your new method convert ?user[name]="Stephen"&user["pass"]="1234" into { "user" : { "name" : "Stephen", "pass" : "1234" } } ?
19:01 < francois_> yes
19:01 < francois_> It could be done by passing an option to querystring.parse
19:02 < naomi> francois_: did you publish the code anywhere?
19:02 < geNAZt> and ?user[name]="Stephen"&user["pass"]="12"34" ?
19:02 < francois_> not for now
19:02 < Stephen> francois_: A) The post body has more space than the querystring B) It's more secure. C) It could be compressed! D) It will save server load, and client machines can do it so easily
19:03 < naomi> stephen, if the point of for him to use the data members, he needs it in a workable format i'm guessing
19:03 < naomi> js objects are pretty ideal for that
19:03 < soldair> child process fun anyone? i guess i will just tweet.. how do you handle back pressure when sending messages to child processes. a) i dont b) i dont use send i pass a handle and stream like a sane person. b) i access _channel.buffering and channel.maxQueueSize to call pause on my message stream on top of ipc/send
19:04 < naomi> soldair: i love cp fun
19:04 < graeme_f> geNAZt: how long now?
19:04 < naomi> soldair: what do you mean "sending messages to child process" ?
19:05 < Stephen> I slap them
19:05 < Stephen> And they'd better not talk back
19:05 < soldair> @naomi reuqire('child_process').fork('./a.js').send('hi this is a child process message')
19:06 < naomi> oh i don't know about forking cp
19:06 < naomi> deoxxa: might
19:06  * naomi ducks
19:06 < deoxxa> errrrrrrrrrrrm
19:06 < soldair> =) thanks anyway.
19:07 < naomi> soldair: you picked the one cp operation i know nothing about
19:07 < naomi> sorry!
19:07 < naomi> that i'm not more sorry.
19:07 < deoxxa> yeah .fork() gives you an object you can send messages through
19:07 < francois_> code is here: http://pastebin.com/S346DssV
19:07 < francois_> it also parse keys formatted like "bla.pop.bouh"
19:07 < deoxxa> process.on("message") in the child will give you the message
19:08 < geNAZt> but what happens if the fork doesnt have a message listener ?
19:08 < Stephen> But in all truth: When spawning processes it's always been important that the messages passed between them be in a queue independent of the processes. These queues should be unlimited in size, and should support both push and pop in single and batch(transaction) .
19:08 < soldair> thats fine it just doesnt get messages
19:08 < deoxxa> yeah
19:08 < deoxxa> they just go nowhere
19:08 < francois_> it is just a suggestion, i think it would be easier to put it in querystring to not include, again, another module
19:08 < deoxxa> well, they go to the child process, but they're not handled, so they disappear
19:08 < geNAZt> even if i spam at it ? what happens with the data ? does it get dropped ? or queued up ?
19:08 < deoxxa> geNAZt: they get sent to the child process
19:09 < soldair> if you spam it your process leaks memory in the IPC layer till everthing dies
19:09 < geNAZt> ah okay so it gets dropped
19:09 < deoxxa> geNAZt: the child process then does nothing with them and they disappear once they hit js-land
19:09 < francois_> listening all of you it seems that even querystring module should not be in standard distrib, because we could directly use JSON...
19:09 < naomi> francois_: does this handle things like colors[]=blue&colors[]=red
19:09 < deoxxa> but yeah, like soldair just said, if you try really hard you can break things
19:09 < naomi> soldair: cross your fingers that streams2 will fix it all
19:10 < Stephen> geNAZt: In node, the key to having Events clog up things is not just spamming, but also having a handler
19:10 < geNAZt> no not hardly its only the case that ipc should not try to send data if the fork doesnt listen to
19:10 < Stephen> No handler, no worry
19:10 < deoxxa> geNAZt: it'd be pretty hard to know whether or not the process is actually listening for the events
19:10 < Stephen> Even WITH a handler, nextTick() can fix it
19:10 < deoxxa> geNAZt: from outside that process, i mean
19:11 < naomi> francois_: also, does it handle product[5][name]=hat&product[6][name]=shoes ??
19:11 < deoxxa> Stephen: you mean setImmediate!
19:11 < Drajwer> when to scope.Close(args.This()) and when not? 
19:11 < context> careful. nextTick changes in 1.0
19:11 < francois_> naomi: not now...
19:11 < context> or.. 0.9.9
19:11 < Stephen> deoxxa: Not quite. setImmediate on an Event still has to bubble.
19:12 < naomi> Draggor: the trick of scope.Close is not easy to do if you have simple understand how args.This func callbacks
19:12 < Stephen> deoxxa: It's the bubbling up to adjacent with the spamming events that becomes a problem
19:12 < deoxxa> oh, good point
19:12 < naomi> bubble(bath);
19:13 < deoxxa> i'm too tall for my bath
19:13 < deoxxa> it sucks
19:13 < deoxxa> also too tall for my shower
19:13 < deoxxa> but... it's at least usable
19:13 < mikolalysenko> npmjs is still down....
19:13 < Stephen> If you've been here long today, scroll back to the conversation I had with systemfault
19:13 < Stephen> We covered this in depth. Frankly  I just learned it today
19:14 < deoxxa> Stephen: do you have a solution for small baths
19:14 < naomi> what is the option for bubble error that isn't so violent? i feel that `throw error` kind of makes me feel like a child having tantrumss??????
19:14  * deoxxa hoping "yes"
19:14 < naomi> deoxxa: i hope you have `gentlyPlace error;`
19:16 < soldair> im going to try _channel.buffering/writeQueueSize  and see if i can handle this in my module. i have a node module forkfriend that creates workers and round robins messages to do cluster processing but in real life at work i have to implement message counting on top of sending messages to stop everything from breaking. this slows everything down because i have to send messages back from the child process to determine if the work is 
19:16 < Stephen> deoxxa: Yes, but I'm American, and risking offending both a religious sect and a protected class of little people isn't on my agenda today
19:16 < emattias> what can I use to have a string "foobar" be scrambled into jibberish and then be decodable back to "foobar"?
19:16 < deoxxa> Stephen: lel
19:16 < deoxxa> emattias: encryption, yo
19:16 < Aria> emattias: AES with a shared key?
19:16 < fwg> emattias: rot13? lol
19:17 < Aria> decodable by whom?
19:17 < bradleymeck> mikolalysenko: its not down here
19:17 < emattias> any node module recommendations?
19:17 < deoxxa> emattias: crypto - it's in core
19:17 < Aria> emattias: 'crypto', in core.
19:17 < deoxxa> Aria: jynx
19:17 < emattias> Aria: decodable by the the encoder
19:17 < naomi> fwg: var cipher = crytpo.createCipher("rot13", "password1");
19:18 < Aria> emattias: And nobody else?
19:18 < bradleymeck> lol rot13
19:18 < emattias> Aria: nope
19:18 < deoxxa> rot39 > rot13
19:18 < deoxxa> more secure
19:18  * emattias doesn't get the lol with rot13
19:18 < Aria> rot13 is trivial coding. Just useful for things like spoiler alerts, things you want to only be trivially obscured.
19:19 < emattias> Aria: k, tnx
19:19 < emattias> tnx guys. crypto it is
19:19 < Aria> What are you using this for?
19:19 < Aria> (Do you need the message to survive a repeat attack?)
19:20 < emattias> Aria: make a url not be recognaizable, no real security requirements
19:20 < mikolalysenko> I can't submit modules to npm though
19:20 < Aria> Ah, fun. You might also want base64, then.
19:20 < Aria> Something like the spoiler alert case.
19:20 < Aria> Or rot13.
19:21 < emattias> Aria: yeah, it would be nice if the scrambled string is the same size no matter the size of the original string, possible?
19:21 < Aria> Yeah, rot13 does that.
19:21 < emattias> Aria: nice
19:21 < Aria> rot13 just takes each alphabetic character and replaces it with one 13 characters ahead in the alphabet.
19:21 < Aria> a -> n, b -> o
19:22 < Aria> Reversing it is just another rot13.
19:22 < Aria> Easy to implement.
19:22 < emattias> Aria: haha, supersecure
19:22 < mikolalysenko> npmjs has not been accepting packages for the past 15 hours...
19:22 < Aria> Hehe. The opposite of secure. but if what you want is to obscure things, not encrypt, that's fiiine.
19:22 < Aria> Interesting, mikolalysenko
19:22 < Aria> I was getting some weird errors earlier oto
19:22 < Aria> er.. too
19:24 < francois_> naomi: colors[]=red&colors[]=blue creates an array, http://pastebin.com/spf31FLb
19:26 < naomi> francois_: slick
19:27 < zedro> hey all, is anyone interested in a verbosity option for the http-server package?
19:27 < zedro> or perhaps knows of something comparable that already offers it?
19:28 < geNAZt> node has a debug thing if you build it up as a debug build
19:29 < francois_> naomi: is "slick" positive or negative ?
19:30 < emattias> Aria: what am I doing wrong? -> crypto.createCipher('rot13','password')
19:31 < naomi> francois_: cool that it can handle it now
19:33 < naomi> rofl 
19:33 < naomi> emattias: are you actually trying that ?
19:33 < emattias> naomi: yup
19:33 < naomi> emattias: that was lolcode
19:34 < emattias> naomi: yeah, I want to just scramble a string.. no real security needed
19:34 < naomi> emattias: i actually posted a pretty decent crypto cipher example today: https://gist.github.com/naomik/4967659
19:34 < LouisT> emattias: 
19:34 < LouisT> String.prototype.rot13 = function (s) {
19:34 < LouisT>         return (s?s:this).replace(/[a-zA-Z]/g,function(c){return String.fromCharCode((c<="Z"?90:122)>=(c=c.charCodeAt(0)+13)?c:c-26);});
19:34 < LouisT> };
19:34 < naomi> emattias: don't use rot13
19:34 < naomi> emattias: it's SOOOO easy to just use a real encryption method
19:34 < emattias> naomi: this is not for security
19:34 < naomi> emattias: what is it for then?
19:34 < naomi> you need random data or something ?
19:35 < LouisT> emattias: what i just pasted does rot13
19:35 < naomi> >.<
19:35 < LouisT> naomi: what does it matter what he wants it for? why not just let him use it?
19:36 < LouisT> if it has nothing to do with security, then there is no point in changing his mind 
19:36 < francois_> naomi: ok, i will make a pull request to put it in querystring.parse will see if it is accepted
19:36 < naomi> LouisT: you're a horrible advisor 
19:36 < naomi> LouisT: when helping another person, you should always be helping to steer them in the correct direction
19:37 < LouisT> but that is a correct direction.. he wanted rot13, not for security, but just to mix stuff up.. if was for security then yes use crypto
19:37 < soldair> @francois_ querystring.parse already creates arrays
19:37 < naomi> LouisT: how do i kill my cat with a stapler? 
19:37 < LouisT> probably just hit it a few times
19:38 < soldair> @francois_ a=1&a=2&a=3 {a:[1,2,3]}
19:38 < naomi> LouisT: bad teacher is baddykins
19:39 < LouisT> that's not being a bad teacher, if you so choose to be a jackass and murder a helpless animal then that's just bad parenting
19:39 < naomi> rofl
19:41 < shwaiil> Q: anyone here uses LocomotiveJs ? I'm trying to understand how to use node-mysql with it. Im a beginner by the way
19:41 < naomi> emattias: specifically see: https://gist.github.com/naomik/4967659#file-0_8_20-js-L58-L59
19:42 < shwaiil> I don't even understand how I can use the debugger, there's a port specific for the debugger but I really don't know what to do 
19:42 <@isaacbw> man, cassandra is cool
19:45 < amurdaca> preparation for relational algebra, dbms and db planning exam is ruining my life
19:45 <@isaacbw> get off irc, man
19:45 <@isaacbw> STUDY
19:45 <@isaacbw> WOO
19:45 < amurdaca> just doing a break isaacbw
19:45 <@isaacbw> 3NF and all that?
19:45 < amurdaca> im so pissed
19:46 < amurdaca> nha
19:46 <@isaacbw> nha?
19:46 < amurdaca> i don't know how to translate what i do from italian lol
19:46 < amurdaca> is like
19:46 <@isaacbw> oh
19:47 <@isaacbw> arn't technical terms pretty homogenous across languages?
19:47 < aandy> ey, forgettaboutit
19:47 < amurdaca> relational algebra (selection projection join union etc) + datalog + sql and advanced sql + db planning and design (how to structure a db)
19:47 < aandy> amurdaca: with recursive?
19:47 < amurdaca> i know about 3nf things for self-studyng but i'm not really studing em now
19:47 < amurdaca> aandy yes too
19:47 <@isaacbw> oh okay
19:47 < aandy> sounds like a good course
19:48 < amurdaca> is the first part of DB course at polytecnique of Milan
19:48 <@isaacbw> milan
19:48 < amurdaca> yes italy
19:48 < amurdaca> Milano
19:49 < amurdaca> (btw yes isaacbw we do normalization too in my course, just not so in deep)
19:50 <@isaacbw> I just though 3nf was pretty standard
19:50 < amurdaca> yup with boyce and codd too
19:50 < amurdaca> but we don't do them in deep (it's the last part of the course)
19:51 <@isaacbw> oh okay
19:51 <@isaacbw> it's cool that you do stuff outside of class
19:51 <@isaacbw> a lot of engineering students don't touch anything outside of their textbooks until graduation
19:52 <@isaacbw> which I think is one of the biggest problems with science education, tbh
19:52 < Drajwer> still npm publish does not work for me. gives me 500's 
19:52 < pats_Toms> is it ok to use nodjs without nginx?
19:52 <@isaacbw> yes :P
19:52 < aandy> pats_Toms: sure
19:53 < amurdaca> isaacbw i just lost 2 years of university for having done things outside like working with a friend building website (not design mostly backend and db)
19:53 < dreamdust> It depends. Not if you're using node.js as a proxy.
19:53 < pats_Toms> I am really new to all this and don't know if there is any uber way to dos my page or something like that
19:53 < pats_Toms> I red that nginx will stop things like that
19:53 <@isaacbw> amurdaca, what do you mean you lost two years?
19:53 <@isaacbw> you failed classes, or you took time off?
19:53 < amurdaca> mmm let's say both
19:53 < pats_Toms> I am not so smart to resolve them by my self in code
19:53 < pats_Toms> or I am wrong?
19:53 <@isaacbw> ;) you're not alone
19:54 < amurdaca> i just didn't go to classes etc etc becouse i had to work
19:54 < amurdaca> oh lol
19:54 < aandy> lol
19:54 < amurdaca> but i really want to get the engineer degree lol
19:54 < amurdaca> then i can do the specialization (i think in american is the things above the normal bachelor)
19:55 < aandy> better than around here. i failed a class, but the course is only once a year, so my bachelor was delayed with 6 months. same thing happend in grad school and now government is bitching that we don't graduate fast
19:55 < aandy> ...well fix the courses then :( lol
19:55 < amurdaca> same in italy aandy
19:55 <@isaacbw> amurdaca, that's right. Masters is the first step of specialization, and then you can get a PhD if you love academia
19:55 < amurdaca> i lost 2 years for not had done exam about 4 classes
19:55 < aandy> :p
19:56 < amurdaca> isaacbw academia is not for me :D
19:56 < amurdaca> i don't like doing research
19:56 < amurdaca> i love doing somthing concrete
19:56 < cloudbender> do research on concrete
19:56 <@isaacbw> haha
19:56 < aandy> badum chi
19:56 < amurdaca> lol
19:56 < cloudbender> lol
19:57 < cloudbender> Actually, the portuguese are renowned for thier mastery of concreate and mortar construction.
19:57 < amurdaca> isaacbw are u an engineer btw?
19:58 < cloudbender> concrete I mean
19:58 < Drajwer> how long does it take to my package actually show on registry.npm.org?
19:58 <@isaacbw> amurdaca, I sometimes pretend to be
20:00 < cloudbender> Me too.  It's why I have to censor myself when I write code.
20:01 < cloudbender> Like this morning, on this database cache engine I'm writing.  I need someone near me to bust my chops when I start trying to design it for the federation starship enterprise.
20:02 < amurdaca> lmao
20:02 < Drajwer> well is this channel related to npmjs.org somhow?
20:02 < aandy> do they really need a cache?
20:02 < cloudbender> Well, the ship's computer is pretty quick-minded.  She must be cached.
20:03 < cloudbender> Anyway, I have a re-write for this afternoon/evening, fixing about an hour's worth of bad thinking this morning.
20:04 < cloudbender> but it's all good.
20:04 < aandy> Beam me up, Scotty
20:04 < aandy> at least the catchphrases are cached
20:05 < bradleymeck> sometimes i wish npm could add stuff to the LIBPATH
20:08 < rektide> hi node.js. a node-dbus library i've been using wont compile in 0.9.x: numerous "cannot convert 'ev_loop*' to '__ev_io*'" errors. https://gist.github.com/rektide/4968475 has a gist of the exact errors & the relevant source excerpt.
20:09 <@isaacbw> you should talk to the module author
20:09 < rektide> i have attempted once to ping out to him, and am writing another email now.
20:09 < Drajwer> is there any problem with npmjs ?
20:09 < deoxxa> Drajwer: yes
20:09 < deoxxa> Drajwer: short answer is "wait for the single point of failure to come online and fix it"
20:10 < deoxxa> hm, that sounded a lot less snarky in my head
20:10  * deoxxa stands by it
20:12 < bradleymeck> deoxxa: private replicas and mirrors need to be a service someday
20:13 < deoxxa> bradleymeck: i know it made my life easier, setting one up for my workplace
20:13 < bradleymeck> mine too
20:13 < deoxxa> also makes me feel less guilty about purging my npm cache regularly
20:13 < deoxxa> heh
20:15 < rektide> i thought node used libuv
20:15 < rektide> what is this libev stuff?
20:15 < rektide> rather, why is it still here?
20:16 < cloudbender> bbl
20:17 < Drajwer> libev is not part of libuv anymore
20:18 < bradleymeck> rektide: at one point in time libev was a backend for parts of libuv
20:18 < rektide> hrmm i guess that would explain the commit i just made 
20:18 < rektide> where i had to drop some ev_loop arguments
20:22 < crabtree> ]
20:47 < mikolalysenko> man... npmjs.org is still down :(
20:50 < DarkArgon> its up here
20:51 < Havvy> Does anybody else look at the Hoarders package on NPM and wonder WTF the guy was smoking?
20:52 < Aria> Nope.
20:52 < Aria> I KNOW. It's a joke.
20:52 < graeme_f> Havvy: the only time I look at that is shortly after thinking "ooh! somebody used my package!"
20:52 < Havvy> graeme_f: I was more like "WTF? Somebody used my package?"
20:53 < graeme_f> Havvy that too
20:54 < DarkArgon> https://npmjs.org/package/hoarders undefined undefined undefined?
20:54 < Havvy> Since the package in question was a port of some terrible code originally written for jslibs.
20:55 <@isaacbw> is hoarders just every package on npm
20:56 < Havvy> isaacbw: Yes.
20:56 <@isaacbw> lol
20:56 < gildean> DarkArgon: this is the reason you're getting undefined: http://jesusabdullah.github.com/2013/02/15/hoarders.html
20:56 < asdf12> he's my #1 fan
20:57 < DarkArgon> lol
21:03 < nanicoar> Is there a recommended way to serve client-side .js to browsers using node?
21:03 <@isaacbw> many people use nginx
21:03 <@isaacbw> or a cdn
21:03 < nanicoar> hm
21:03 < AAA_awright> Havvy: I thought it was a good idea
21:03 <@isaacbw> or you can just use node
21:04 < nanicoar> isaacbw: It makes sense. I just somehow expected npm to take care of that.
21:04 < AAA_awright> Also, if you can't handle a package with 1000 dependencies... You should'a used MongoDB. MongoDB is Web scale!
21:04 <@isaacbw> connect has a static server middleware
21:04 < Havvy> Or Postgres.
21:04 <@isaacbw> or be cool and use cassandra
21:04 <@isaacbw> cassandra 4 lyfe
21:05 < Havvy> nanicoar: Express (or Connect) plus the 'static' middleware.
21:05 < bradleymeck> anyone know a good way to have express's router forward a request to a different server AND use the body parser (inside a private network in this case).
21:06 <@isaacbw> 1) why, 2) look at http-proxy
21:06 <@isaacbw> or
21:06 <@isaacbw> vhost
21:06 <@isaacbw> but it doesn't make a huge amount of sense
21:07 < nanicoar> Okay, thanks. A process for serving static content sounds sensible too.
21:07 <@isaacbw> wutwut
21:07 < bradleymeck> isaacs: cause i am uploading a `npm pack` tarball and then rerouting based on the package.json, but I am lazy can do it myself but was hoping there wars a easy req module that simply forwards for express
21:07 < bradleymeck> asaacsbw*
21:07 < bradleymeck> darn tab
21:07 < bradleymeck> isaacbw: ^
21:08 <@isaacbw> I don't know. It sounds like a weird thing to do
21:08 < nanicoar> isaacbw: I'm not really sure who is replying to whom...
21:08 < bradleymeck> weird how? wanting to forward a req?
21:08 <@isaacbw> wanting to parse the body before forwarding it
21:09 <@isaacbw> are you trying to forward it through http?
21:09 < bradleymeck> yep
21:09 <@isaacbw> so you're going to parse the body and then replace the request's original body with the parsed one?
21:10 < bradleymeck> doubtful, just want to propagate to the proper server for the given body
21:10 < bradleymeck> server pool has a list of servers to match os and arch
21:10 <@isaacbw> well that would be the only way to do it
21:10 < bradleymeck> yep.. well off to write me a module
21:11 < jp232> can anyone suggest why this might be using 300MB+ mem when serving a 1.4GB zip? https://gist.github.com/anonymous/4968686 
21:12 < codershop> Does node have a limit on the number of simultaneous tcp connections it can make to a single ip address?
21:13 < bradleymeck> codershop: same as any other thing, ephemeral port limit, but http agent has a defaut max concurrent setting in docs
21:13 < bradleymeck> jp232: 300MB RSS or virtual?
21:14 < codershop> Thanks
21:14 < bradleymeck> RSS is the only one that really matters
21:15 <@isaacbw> I don't remember the native mongo client being this obtuse
21:16 < jp232> bradleymeck: resident mem. The v8 GC does seem to get more agressive and doing full GC sweeps though. I see this on startup https://gist.github.com/anonymous/4968765
21:16 < bradleymeck> jp232: what node version / cli args are you giving node
21:18 < jp232> v0.8.20, no additional args. I might try some better profiling methods instead.
21:25 < base698> isaacbw: yeah, that's an understatement.  I've never even gotten a straight answer on whether it needs a connection per request or to stay open.  It didn't help there was a bug that caused that made opening a new connection impossible, oh and don't even try to get binary data off a field.  
21:33 < hughfdjackson> anyone having 500s when attempting to npm publish?
21:33 <@isaacbw> npm is having trouble right now
21:34 < hughfdjackson> ^^ ah, okay
21:43 < kam187-rMBP> hi guys
21:44 <@isaacbw> ahoy
21:45 < asdf12> fine!
21:45 <@isaacbw> mm, I want pizza
21:47 < kam187-rMBP> any of you guys use node_redis?
21:48 < AAA_awright> kam187-rMBP: Which one?
21:49 < AAA_awright> I use https://github.com/mranney/node_redis
21:49 < kam187-rMBP> yeah that's the one
21:50 < kam187-rMBP> i was wondering about the multi command, eg  var multi = client.multi(); and then you queue commands with multi.sadd or whatever
21:50 < kam187-rMBP> should i be using a new var multi = client.multi(); every time, or do i reuse that somehow?
21:50 < AAA_awright> I'm afraid I haven't used that command
21:51 < kam187-rMBP> ahh ok
21:51 < AAA_awright> But it wouldn't hurt to look at the source and see what it does
21:51 < kam187-rMBP> yeah good idea
21:53 < kam187-rMBP> do u use hiredis at all?
21:56 < shwaiil> just quitted locomotivejs...back to compound
21:56 < shwaiil> is there a room for that ?
21:58 < asdf12> whats compound
21:58 < shwaiil> asdf12: looks like it was called RailWays before
21:58 < shwaiil> its a mvc framework for nodejs
22:01 <@isaacbw> does anyone else find it incredibly difficult to type 'parse' without adding an 'r'
22:09 < amurdaca> just watched how to setup cassandra on a 4 rack cluster (total time 2 mins lol)
22:15 < nkohari> from what i hear the devil is in the details with cassandra
22:16 <@isaacbw> that and designing schemas
22:17 < amurdaca> but it's somthing really good...(even if java things make me like awwwww)
22:19 < evbogue> What do you use to watch files for changes while you're working on a node project?
22:19 <@isaacbw> the filesystem module
22:24 < carpii> anyone know of websites with node based chatrooms in production ?
22:26 < AviMarcus> It sounds like seaport is only for TCP. It there a seaport for UDP?
22:28 < Hochmeister> anyone here using vows in deployment automation scenarios? This is a new subject for me so maybe my logic here will not make sense. Basically, I'm trying to setup my first real test batch in vows. In this batch, i have a topic which is supposed to assert that mongoose.connect will not throw an exception. here is the simplified test: http://pastebin.com/QGQdFJ1e However, vows reports 'Got unwanted exception
22:28 < Hochmeister> (Error)..' What is wrong here?
22:41 < istvanskeri> Hello everyone, I am looking for a solution to serve javascript ondemand with socket.io
22:42 <@isaacbw> why do you need socket.io for that
22:42 < istvanskeri> let's say the user clicks on something on the client it would send a message to the server to fetch a js library 
22:42 <@isaacbw> that's what http is for
22:42 < istvanskeri> and i want it to include that js on the fly
22:42 < nkohari> this ^
22:42 < carpii> isnt all javascript served on demandf?
22:42 < nkohari> why not just fetch it over http?
22:42 < nkohari> websockets is more for bidirectional persistent communication
22:43 < nkohari> s/is/are/
22:43 <@isaacbw> what you just described is the use case for http
22:43 < AAA_awright> Yo dawg, I heard you like HTTP, so I put HTTP in your HTTP so you can hypertext while you hypertext
22:44 < istvanskeri> but lets say i have two buttons on a page one says "load jquery" the other says "load duckhunt" i want to have the server to serve those js files to the client depending on what the user clicked on
22:44 < istvanskeri> before the user presses any button no js is loaded on the page
22:44 < Havvy> Use AJAX.
22:44 <@isaacbw> but don't call it ajax
22:45 < nkohari> yeah, jquery $.get would do what you want there more effectively than socket.io
22:45 < nkohari> and in about 1/100th of the time
22:45 < Havvy> isaacbw: What would you call it then?
22:46 < nkohari> now if you wanted to say, have 100 people on the same webpage automatically load the same javascript based on some event
22:46 < nkohari> then you might want socket.io
22:46 < DarkArgon> nope
22:46 < AAA_awright> You would use some sort of signaling for that, but you'd still want to serve resources over HTTP
22:46 < istvanskeri> i see 
22:46 < AAA_awright> istvanskeri: You can just inject a <script> tag at runtime
22:46 < AAA_awright> Use the DOM API
22:47 < AAA_awright> That's how people did (and still do) querying of data
22:47 < AAA_awright> JSONP it's called, but don't ever use it, it's very dangerous
22:48 < istvanskeri> Ill try that
22:48 < AAA_awright> But you can do something similar to decide which scripts you need at runtime
22:48 < nkohari> i don't mean to be pedantic but that isn't JSONP, it's running javascript
22:49 < AAA_awright> nkohari: I'm taking querying of data, and semantically yes, JSONP is full ECMAScript
22:49 < AAA_awright> You can use it to return anything you like, including logic
22:49 < Havvy> JSONP can be secure.
22:49 < AAA_awright> That's like saying "Writing your own cryprographic protocol can be secure"
22:49 < AAA_awright> No. Just no.
22:50 < nkohari> JSONP is about returning data wrapped in a callback to get around cross-origin policies ... he's talking about running code
22:50 < AAA_awright> Technically it's possible, but not without a million people reviewing it for weaknesses
22:50 < nkohari> and yes, JSONP can be secure
22:50 < Havvy> AAA_awright: As long as you know the person running the remote server.
22:50 < mikolalysenko> aaargh!  npmjs.org is still down :(
22:50 < AAA_awright> No
22:50 < nkohari> if you don't auth using cookies on the service returning the JSONP, it is secure
22:51 < AAA_awright> At which point you don't really need JSONP, do you
22:52 < nkohari> if the data is public, or you auth using headers of some kind, it's fine
22:55 < AAA_awright> As a rule your data transports should be securable, even if not secured
22:55 < AAA_awright> So no, I wouldn't use JSONP for anything
22:55 < nkohari> k
22:56 < AAA_awright> Security definitely isn't something to take lightly :>
22:56 < nkohari> i'm not, i just acknowledge that there is public data and private data
22:56 < nkohari> nowadays you barely need JSONP because of CORS, but it still has a function if used correctly
22:57 < nkohari> it's only "insecure" because of cookie-based authentication on private data
22:58 < AviMarcus> Upon further review, am I correct in thinking that seaport can server any type of server, even if I set up a UDP server?
23:01 -!- mode/#Node.js [+o isaacbw] by ChanServ
23:14 < carpii> i dont think seaport would support udp. It seems to rely on http.server which is tcp based.
23:15 < SrPx> Is there a way to make something when node.js closes (saving data)?
23:16 <@isaacbw> process.on('exit')
23:16 < SrPx> process.on('exit',callback) ? isaacbw 
23:16 <@isaacbw> yes
23:16 < SrPx> isaacbw: ty (=
23:16 <@isaacbw> np
23:16 < SrPx> Wow I love IRC
23:16 <@isaacbw> note that in some cases the process will be killed without giving it a chance to clean up
23:16 <@isaacbw> e.g. kill -9
23:17 < SrPx> Like killall node ?
23:17 <@isaacbw> I don't know
23:17 <@isaacbw> probably not
23:17 < SrPx> Hmm gotta test
23:21 < nkohari> killall is just like pgrep really -- it sends the same signal to multiple processes whose name match a string
23:21 < carpii> what sort of cost would you put on a node freelancing job? simple text-based chatrooms, multi-room, private messaging, with a web based api for authenticating users
23:21 < nkohari> pretty sure the default of killall is SIGTERM not SIGKILL
23:21 < nkohari> carpii: as much as your client is willing to pay :)
23:21 <@isaacbw> carpii, it depends entirely on the job and on your skills
23:22 < carpii> of course, but right now im the client ;)
23:22 < nkohari> it depends a lot on the location too
23:22 < Havvy> carpii: You just described IRC...
23:22 < carpii> yes, yes i did
23:22 < carpii> but irc is not suitable :)
23:22 < Havvy> How is IRC not suitable?
23:22 < nkohari> Havvy: s/he probably wants it integrated with an existing app, most likely?
23:23 < carpii> i love irc, but the sort of chatrooms i want to integrate into my site need pinning down quite a lot
23:23 < carpii> and later extended with much more user metadata etc
23:23 < AviMarcus> carpii, beware of who you hire.. it might work but be a nightmare to update.
23:24 < carpii> yeah, ive made a start of it myself, but its difficult to know how to structure it, and what packages are best
23:24 < carpii> im also not sure if node is eve the right choice, since I dont see that many chatrooms in production
23:24 < nkohari> i'd say a node.js consultant would make an equivalent rate to a ruby freelancer
23:24 < carpii> yet to me it seems like the perfect candidate for node
23:25 < carpii> nkohari, but as a ballpark figure, what sort of hours could be involved in this project?\
23:25 < nkohari> i haven't the faintest idea
23:25 <@isaacbw> that can't be estimated really
23:25 < carpii> obviously itd need speccing etc
23:25 <@isaacbw> and anyone who does estimate is probably making something up
23:25 < nkohari> from 1 to 1,000
23:25 < carpii> which aspect makes it difficult to estimate ?
23:25 < nkohari> the fact that it's software
23:26 < nkohari> :)
23:26 < carpii> sure, but im a software guy. I can usually give a rough idea of something
23:26 < AviMarcus> .. and if you want a web GUI with it..
23:26 < carpii> for tech im familiar with i mean
23:26 < nkohari> how often are you correct? :)
23:26 < carpii> maybe 70%
23:26 < nkohari> :X
23:27 < nkohari> i mean if you really want to hire a freelance developer the rate will likely be $80-$120/hour
23:27 < carpii> yeah i think the hourly rate is in line with what i expected
23:27 < nkohari> and let's say that takes... 200 hours of work
23:27 < nkohari> you ready to spend $20,000 on this?
23:27 < carpii> the reason i ask is
23:27 < AviMarcus> For what I'm thinking, I'm guesstimating 100-200 hours but add in a major fudge either way, especially if they have experience with websockets
23:27 < carpii> i sent a more fleshed out (but stil not formal spec) to a supposedly reputable freelancer
23:28 < carpii> and he quoted me $50k
23:28 < carpii> which suggests to me he either does not want the job, or some aspect of node makes development really difficult
23:28 < AviMarcus> cool, we both picked out 200 hrs
23:28 < nkohari> that's a reasonable quote
23:28 < AviMarcus> Hmm, 20k? Sounds tempting to me.
23:29 < nkohari> it's a little high maybe but people quote all over the place for lots of reasons
23:29 < carpii> but $80 for 200 hours would come to a mere 16k
23:29 < nkohari> if by reputable you mean well-known his rate won't be $80/hr
23:29 < AviMarcus> I don't think NODE makes it hard. In fact, it's probably easier in node.
23:29 < Havvy> It'd be easier in Node then in most languages.
23:29 <@isaacbw> for chat? I dunno
23:30 <@isaacbw> node is definitely sexier
23:30 < nkohari> the thing that makes it easy is websockets really
23:30 < carpii> yea
23:30 < nkohari> and node websocket support is solid, but other ecosystems have good support as well
23:30 < AviMarcus> At least the incoming part is also exactly what node is great at -- constant connections that have tiny payloads
23:30 < carpii> im attempting to write my own but its very unclear how best to structure the app
23:31 < Hochmeister> wow, you guys should read the history of this chatroom. It's pathetic, the subject of many of the descussions here. Its sad that the active types here have nothing really valuable to discuss. Instead vibrant discussions, rich with helpful details, all I read is pathetic, opinionated banter.
23:31 < nkohari> well, hiring a consultant isn't going to help you with that
23:31 < Havvy> carpii: You could try looking at the IRC spec maybe?
23:31 < aandy> Hochmeister: lol
23:31 < nkohari> Hochmeister: welcome to the internet, you must be new here :)
23:31 < carpii> but im a software engineer, im familiar with preparing formal specs and designing big systems
23:31 < carpii> although i dont consider this a big system 
23:32 < carpii> Hochmeister: youre helping how?
23:32 < aandy> he's not, and he's contradicting himself in his rant
23:32 < carpii> heh yup
23:33 < Hochmeister> actually i've a (mostly silent) lurker for over a decade. i used to help quite a bit, under a different alias, until I became too discusted...
23:33 < inZania> Hey all. My node.js app is apparently locked / pegged (100% cpu in top); I can't even open up the simple "healthcheck" endpoint in a browser (which just spits back "OK"). I really just want to know where it's stuck. It is a really rare problem (happened just twice in the last 2 weeks of dev), but unacceptable for prod. Is there ANY way to find out where the node app is at / what is causing this? I can't find anything :(
23:33 < aandy> i've a lurker? i call slavery
23:33 < nkohari> Hochmeister: you've lurked in #node.js for a decade?
23:33 < aandy> mind you that #node.js is not a decade old though
23:34 < amurdaca> lol
23:34 < hello_kitty> is there any trick to getting passport localstrategy to invoke? my code is basically the same as: https://github.com/aglover/eyeball/blob/master/App.coffee but a console.log 'LocalStrategy invoked" never appears
23:34 < aandy> sounds like the typical "yea i'll have a beer, it's saturday. lemme check irc WHOOOO"
23:34 < nkohari> inZania: if it just hung and didn't return i'd be saying "find your missing callback"
23:34 < nkohari> but if it's actually pegged that's another story
23:35 < nkohari> you could try profiling it, but that tends to be kind of difficult
23:35 < inZania> nkohari: I wish it were that easy. 100+ source files, each 200+ lines. Plus, that wouldn't explain the pegged CPU (missing callbacks will not respond, but they also won't peg the CPU...)
23:35 <@isaacbw> oy, why so many files
23:35 < nkohari> it's almost definitely something simpler than you expect
23:36 <@isaacbw> and so little code in each
23:36 < nkohari> isaacbw: hey, that's how i build things too :)
23:36 < inZania> @isaacbw: "200+" does not mean "200 exactly"
23:36 < nkohari> my oop background i guess
23:36 < AAA_awright> istvanskeri: Have you tried attaching a debugger?
23:36 <@isaacbw> you crazy bastards
23:36 < AAA_awright> er
23:36 < AAA_awright> inZania: Have you tried attaching a debugger/
23:36 < AAA_awright> *?
23:36 < inZania> nkohari: lol nice zen wisdom that gets me nowhere "simpler than I expect"
23:36 < asdf12> npm still down :S
23:36 < carpii> inZania, have you seen the profiling script on node blog?
23:37 < AAA_awright> Stop complaining and use Git
23:37 < Havvy> isaacbw: My files are generally around 250 lines at maximum too.
23:37 < carpii> it uses dtrace so I imagine you could trace it, then force Hup your app and youd still get results
23:37 < inZania> AAA_awright: I've tried, but largely failed, to get anything productive out of it.
23:37 < carpii> http://blog.nodejs.org/2012/04/25/profiling-node-js/
23:37 < AAA_awright> inZania: How far have you gotten?
23:37 < aandy> opened the browser
23:37 < AAA_awright> inZania: You'd be able to pause execution and see what it's doing
23:37 < AviMarcus> Heh, my last project was 24 files, nearly all have under 100 lines, many under 50.
23:37 < inZania> carpii: I've tried to do this but failed many times on my box (OSX :( )
23:37 < carpii> failed in what way?
23:37 < nkohari> inZania: sorry, i could have just said "LOL DUNNO GL"
23:37 -!- isaacs changed the topic of #Node.js to: Node.js - Happy Birthday! - git show 9d7895c5 - http://logs.nodejs.org/node.js/
23:38 <@isaacs> Node is 4 years old today
23:38 < aandy> \o/
23:38 < nkohari> woo
23:38 < asdf12> isaacs: npm!
23:38 < aandy> congrats
23:38 < gildean> isaacs: it has the same birthday as me
23:38 < aandy> gildean: happy 4th, bro
23:38 < nkohari> lol
23:38 < inZania> AAA_awright: hm yeah I always seemed to struggle with the Chrome debug tools, never seemed to work for me, I always had tabs missing and such IIRC
23:38  * isaacs &
23:39 < AAA_awright> inZania: Eh? This is a Node.js problem you're having right?
23:39 < nkohari> the newer versions of chrome don't support the old node profiler
23:39 < inZania> AAA_awright: yes, but the tutorials I've read recommend using the debugger in chrome to attach to the node process
23:40 < gildean> aandy: thanks, i don't feel a day older than two tho'
23:40 < nkohari> try this https://github.com/c4milo/node-webkit-agent
23:40 < inZania> eg, node-inspector
23:40 < nkohari> it works, but like most profilers it's sort of information overload
23:40 < AAA_awright> inZania: I'm not aware of an ability to do that, in any event, that's what you want to do then, signal the process to start the debugger and attach to it
23:40 < nkohari> i've been trying to use it to find a slow memory leak lately but to no avail
23:48 < francois_> \quit
23:48 < nkohari> then last night amazon thought it would be funny to start directing some of netflix's traffic at our ELBs every hour on the hour
23:48 < inZania> nkohari: I got https://github.com/c4milo/node-webkit-agent up and running and my app is pegged... but most of the buttons in the chrome inspector are not working
23:48 < nkohari> inZania: sorry, i don't know, i didn't write it
23:48 < nkohari> the app has to be able to respond to requests from chrome
23:48 < inZania> AAA_awright: do you know any good tutorials on your approach?
23:48 < nkohari> so i would imagine if it's pegged that would be a problem
23:49 < aandy> nkohari: can you see this from the control panel?
23:49 < nkohari> aandy: see what?
23:49 < aandy> that you got traffic from netflix
23:49 < nkohari> no, our monitoring system caught spikes every hour, so i went and looked at nginx error logs and found requests with host headers that were obviously netflix's
23:50 < aandy> lol
23:50 < nkohari> our ELB crashed earlier in the day (another fun problem) and when it rebooted i'm assuming we got an ip that netflix had cached somewhere
23:50 < AAA_awright> inZania: I just use https://github.com/dannycoates/node-inspector which works well
23:50 < nkohari> i do love AWS but when it breaks it breaks good
23:50 < aandy> yeah
23:51 < AAA_awright> Also, lololol at Netflix
23:51 < nkohari> our systems handle load well but not netflix load :)
23:51 < fg3> anyone using simon?
23:51 < istvanskeri> When i try to do a $.getScript("/javascripts/interactive.js", function(d from a client my script does nothing but when i change the path to something that doesn't exist it gives me an xhr error any ideas why my im unable todo a .getScript to my public javscripts folder in express
23:51 < fg3> sinon?
23:51 < nkohari> our cluster was doing about 1800r/s at that time of night but it just melted when the traffic came in
23:51 < AAA_awright> inZania: I forget which signal enables debugging on a process...
23:51 < inZania> AAA_awright: step 2 of debugging there is to open the debugger in your fav webkit (aka chrome)... didn't you say that you're not aware of that?
23:51 < nkohari> USR1
23:52 < nkohari> pkill -usr1 node will do it
23:52 < nkohari> well
23:52 < carpii> youre getting an XHR error because its a 404. Presumably your script is not a 404, but thats not the reason its 'doing nothing'
23:52 < AAA_awright> inZania: What oh, I meant the Chrome debugger can't attach to arbritrary v8 instances
23:52 < asdf12> i'm having trouble getting npm to ignore example/node_modules ???
23:52 < nkohari> assuming you only have one node process running :) if you have more use the pid
23:52 < AAA_awright> This is a generic v8 debugging UI
23:52 < istvanskeri> in the .getScript callback im doing a console.log of the data returned and im not seeing that
23:52 < carl_> Could someone, take a quick look at this and see if this structure would be blocking? Its an backend JSON API built on node/express and I want to make it send emails without blocking. http://jsfiddle.net/4fVmM/2/
23:53 < AAA_awright> inZania: The signal to start the debugger in a process that's already started is USR1
23:53 < amurdaca> would coding a torrent client as an excercise be so difficult? 
23:54 <@isaacbw> does nodeunit execute each test function in a new context?
23:54 < asdf12> i'm having trouble getting npm to ignore example/node_modules ? what am i doing wrong, it's ignoring everything else :((
23:54 <@Nexxy> carl_, json.stringify doesn't take callbacks
23:54 <@Nexxy> it's not an IO operation
23:54 < kylehill> is anyone still trying to npm publish and running into the 500 error (after issac's made a fix and folks are starting to publish again)
23:54 < aandy> amurdaca: http://wiki.theory.org/BitTorrentSpecification
23:54 < inZania> Weird, I just did a flamegraph, which came out empty on the pegged process...
23:54 < amccloud> Is there a library out there for doing the middleware pattern outside of http?
23:55 < Havvy> What amccloud asked. :P
23:55 < carl_> Nexxy, I haven't had any problem with that structure, it inserts everything as it should
23:55 < hello_kitty> my passport authenticate ignores LocalStrategy, same as it did for these guys: https://groups.google.com/forum/?fromgroups=#!topic/passportjs/Kv9ZAVO_dqg -- reordering the init stuff for passport doesn't work for me.. is there some simple problem here? the same code seems to work for others
23:56 < hello_kitty> specifically my auth codes lands me at the failure outcome of logging in... and i can put console.log "blah" throughouthe code and see that the localstrat is completely ignored
23:56 < carl_> but would stringifyed = JSON.stringify(req.body); not be blocking?
23:56 < carl_> Generally which functions are blocking when not having a callback?
23:57 <@Nexxy> everything
23:57 <@Nexxy> is blocking
23:57 < aandy> boo
23:57 < carl_> yes but if stringify doesnt take callbacks..? 
23:57 < amurdaca> ahah
23:58 <@Nexxy> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify
23:58 <@Nexxy> it accepts replacer functions
23:58 < AAA_awright> It's not a "Node.js callback" it's a function reference
23:58 < nkohari> does anyone know the memory impact of having lots of sockets open in TIME_WAIT?
23:59 < amccloud> Havvy: I guess not.
23:59 < aandy> AAA_awright: yeah, but function reference hell isn't sexy
23:59 <@Nexxy> carl_, if you put some time into understanding node's API
23:59 < Havvy> amccloud: You could try writing one.
23:59 < amccloud> I've already started ;)
23:59 < AAA_awright> aandy: What hell?
23:59 <@Nexxy> blocking will become less of a mystery
23:59 < aandy> i just meant callback hell ;) http://callbackhell.com/
--- Log closed Sun Feb 17 00:00:03 2013
