--- Log opened Sat Apr 27 00:00:02 2013
--- Day changed Sat Apr 27 2013
00:00 <@konobi> oh... i missed the generating part
00:00 <@konobi> no, don't generate
00:00 < routerpro> hi jdelgado hows it goin
00:01 < jdelgado> routerpro: I'm well, how are you?
00:01 < routerpro> good, just installed nodejs a few days ago and playing around with it
00:02 < dypsilon> konobi, oh, so you would create abstractions in the tests?
00:03 < othiym23>  man, if there's one thing I agree with Brendan Eich on, it's that it's a bad idea to model changes to JavaScript in terms of <other programming language>
00:03 < routerpro> I have me a little form submitting data to DB and a link to retrieve it
00:03 < routerpro> good times :)
00:03  * routerpro newb
00:03 < othiym23> reading es-discuss right now is just painful
00:04 < howdynihao> othiym23 i want to bug you for a moment
00:04 <@konobi> dypsilon: yeah... there's alsways stuff like FIT or the like
00:05 < othiym23> howdynihao: what's up?
00:06 < howdynihao> pm
00:06 < dypsilon> konobi, do you mean tests written by not-devs?
00:08 <@konobi> dypsilon: just table driven
00:09 < dypsilon> konobi, why would i want to bother with table driven tests if i can write them in js, using mocha or something
00:09 <@konobi> you can store them seperately from your test code... meaning you can rewrite your test code in whatever you want, but you still have the test cases still intact
00:10 < dypsilon> ah, it's just an abstraction
00:10 < OliverJAsh> i've just started using nave instead of nvm, but it doesn't seem to allow you to set a default node version? i have to type "nave use" every time i open a new shell. what's the recommended way of dealing with node installations for development purposes?
00:10 < dypsilon> konobi, i know what you mean, thanks
00:11 <@konobi> dypsilon: also see Test::Story
00:11 < dypsilon> the cpan module?
00:13 <@konobi> yup
00:14 < dypsilon> looking at it
00:14 < dypsilon> i like the idea of abstracting the tests this way
00:15 < dypsilon> isn't it what bdd was really about?
00:15 <@isaacbw> write a node port that produces tap
00:16 <@konobi> dypsilon: yup
00:16 <@konobi> isaacbw: too easy =0P
00:17 < dypsilon> hmm, so maybe i should look at cucumber more closely
00:17 < dypsilon> cucumber.js
00:24 < abraham> is there a linter for npm style?
00:28 <@konobi> abraham: https://github.com/joyent/node/wiki/Contributing
00:29 < jetienne> npm search is super slow or I'm allucinating
00:29 < jetienne> a string search is like 30second
00:29 < abraham> i guess i could write one. ive never really written any kind of parsers or anything like that
00:30 < OliverJAsh> i've just started using nave instead of nvm, but it doesn't seem to allow you to set a default node version? i have to type "nave use" every time i open a new shell. what's the recommended way of dealing with node installations for development purposes?
00:30 <@konobi> abraham: there's info on that page about linting
00:30 < dypsilon> jetienne, works fine for me
00:31 < jetienne> $ time npm search uglify
00:31 < jetienne> real	0m29.371s
00:31 < jetienne> I'm not kidding :) it is actually 30second
00:31 < dypsilon> oh wait, i thought you mean npmjs.org
00:31 < jdelgado> OliverJAsh: use nvm
00:32 < abraham> i meant npm style like https://npmjs.org/doc/coding-style.html
00:32 < dypsilon> jetienne, weird, i can't get my npm index built, probably there is a problem with the npm registry
00:33 < jetienne> dypsilon: yeah
00:34 < dypsilon> jetienne, ok, it's 3,6s for me now
00:34 < jetienne> dypsilon: i guess it just doesn't like me :)
00:35 < dypsilon> jetienne, tbh sometimes i think it only likes isaacs
00:37 < OliverJAsh> jdelgado: so where is nave appropriate?
00:42 <@isaacbw> abraham: I feel like isaacs is the only one who actually likes that style :P
00:43 < abraham> i converted my friends
00:51 < othiym23> aw darn, I wasn't paying attention and I coulda told OliverAsh about nave usemain
00:51 < othiym23> I am way happier now that I'm using nave in place of nvm, and my shell is happier too
00:51 < othiym23> poor shell
00:54 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:57 < dypsilon> jetienne, btw thank you for creating the ppa
00:58 < jetienne> dypsilon: my pleasure
00:58 < standoo> does anyone think "npm update" is slow?
01:02 < SebastianFlyte> Do people mostly mostly develop and debug JavaScript in command-line tools, or do they use IDEs like Eclipse/NetBeans?
01:03 < dypsilon> SebastianFlyte, from what i see "people" mostly use sublime text or vim
01:03 <@isaacbw> are those the only choices?
01:04 < SebastianFlyte> So far I'm using vi 
01:04 <@isaacbw> why would you use vi and not nim
01:04 <@isaacbw> *vim
01:05 < SebastianFlyte> I learned vi 25 years ago; what does vim add that I really need? :)
01:05 <@isaacbw> I don't know. Emacs 4 lyfe
01:05 < SebastianFlyte> I guess, on Linux, I'm technically using vim 
01:05 < dypsilon_> sry, i had a disconnect
01:05 <@isaacbw> but to answer your question, most people don't use IDEs
01:06 <@isaacbw> and those that do tend to use webstorm I think
01:06 < dypsilon_> btw is cloud9 any popular?
01:07 <@Nexxy> as a novelty perhaps
01:07 < acidjazz> The following packages have unmet dependencies:
01:07 < acidjazz>  nodejs : Conflicts: npm
01:07 < acidjazz> E: Unable to correct problems, you have held broken packages.
01:07 < syskk> I need to send about 70MB of JSON data from a browser to a server. any suggestion on how to speed things up? would gzipping the json string be a good idea before sending the request?
01:07 < acidjazz> first time ive had this.. always installs fine on ubuntu
01:07 <@Nexxy> acidjazz, install from source :D
01:07 < acidjazz> fuck that
01:07 <@Nexxy> lol
01:07 < SebastianFlyte> For Eclipse and NetBeans is great for Java, but they seem sort of klunky for other languages.
01:07 <@Nexxy> use nvm?
01:07 < acidjazz> this is a prod server
01:07 < SebastianFlyte> (For me)
01:08 < dypsilon_> SebastianFlyte, eclipse is a pain in the neck for javascript development
01:08 <@isaacbw> SebastianFlyte: I can second that sentiment
01:08 < dypsilon_> aptana was promising awesome javascript support, but well...
01:09 < dypsilon_> also i should try the new version, maybe it got better
01:10 < acidjazz> i fixed Nexxy 
01:10 <@Nexxy> Nexxy was never broken
01:10 < gluxon> Nexxy is broken.
01:10 <@Nexxy> ;_;
01:11 < gluxon> Hey, I just got here. I don't know the context of what's going on at all :(
01:11 < dypsilon_> has anyone really tried cloud9 for node.js development and sticked to it for real projects in the real life for real money?
01:11 <@Nexxy> just forgetting commas :D
01:11 <@Nexxy> dypsilon_, I would be surprised
01:11 < luckyjajj> dypsilon_: used cloud9 for other webdev. wasn't that good 
01:12 < dypsilon_> gluxon, here meaning on earth?
01:12 <@isaacbw> cloud9 is neat, but isn't much more than a gimmick
01:12 <@isaacbw> at least right now
01:13 <@isaacbw> "syntax highlighting in the browser!"
01:13 < gluxon> dypsilon_: Yes. I am 2 days old :(
01:13 <@isaacbw> cool, but not really something that we've been missing
01:14 < dypsilon_> Nexxy, luckyjajj, isaacbw thanks for sharing
01:14 <@isaacbw> maybe if you're doing a lot of moving around between machines it would be nice to have a centralized environment
01:15 < dypsilon_> i'm thinking more in terms of: "i don't need to setup dev environment for everyone in the company"
01:15 < kevinswiber> isaacbw: What c9 does do is open the door for innovation in cloud vs. local development environments.
01:15 < kevinswiber> Most cloud providers are still struggling to figure that out.
01:16 < kevinswiber> Example: Salesforce.
01:17 < dypsilon_> kevinswiber, do they have a product?
01:17 <@isaacbw> kevinswiber: I appreciate that it's moving things in a good direction, but right now it isn't useful enough to use over a local dev environment
01:17 <@isaacbw> it feels more like a proof of concept than a useful tool
01:18 < niggler> kevinswiber what are you peddling this time? 
01:18 < niggler> :P
01:18 < dypsilon_> isaacbw, is there something in paricular you don't like? not flexible enough? bad, slow ui?
01:18 < kevinswiber> dypsilon_: Salesforce.com is this big giant thing.  They have a "hosted relational data platform" with workflows on top and such.  They don't use Cloud9, but they do have to figure out cloud vs. local development.
01:18 <@isaacbw> dypsilon_: no, not really
01:19 < kevinswiber> niggler: No.  I have nothing to sell.  :P
01:19 <@isaacbw> I'm just comfortable with my local tools and it doesn't offer enough to justify a switch
01:19 < howdynihao> salesforce the o g of cloud
01:19 <@isaacbw> for me at least
01:19 < dypsilon_> kevinswiber, ah i see, i thought they are trying to launch a cloud9 competitor
01:20 < dypsilon_> isaacbw, hm, what is missing?
01:20 < kevinswiber> dypsilon_: Nope.  I only use them as an example of this weird cloud vs. local development debacle.
01:20 < howdynihao> dypsilon_: local development
01:20 < dypsilon_> kevinswiber, so you mean cloud9 is a possible solution for them?
01:21 < dypsilon_> howdynihao, like beeing able to code in the train?
01:21 <@isaacbw> dypsilon_: I didn't say anything was missing
01:21 < kevinswiber> dypsilon_: I mean Cloud9 is an example of moving the ball forward.  That's all.
01:21 < kevinswiber> I'd love to see more innovation in this area.
01:22 < howdynihao> you can build your own in like a day
01:22 < dypsilon_> yeah, mee tooo
01:23 < dypsilon_> maybe even offline support
01:23 < howdynihao> dypsilon_: http://www.kickstarter.com/projects/creationix/js-git
01:23 < howdynihao> coming soon
01:23 < niggler> lol howdynihao 
01:23 <@isaacbw> "A JavaScript library that allows browsers and other restricted JS environments to have working git clones for real offline development." I have no idea what that means
01:24 < niggler> "if it comes"
01:24 < niggler> "But in the case that I'm still wrong and it's way harder than I thought, I can promise that the project will have enough of a head start to survive on its own and be usable before the funds run out."
01:24 < niggler> actually howdynihao "It will be open sourced on GitHub as soon as the kickstarter succeeds."
01:24 < niggler> what does "succeeds" mean?
01:24 < kevinswiber> It's already on GitHub.
01:24 < kevinswiber> Succeeds means getting funded.
01:24 < kevinswiber> It did.
01:24 < kevinswiber> I paid.  :P
01:25 < kevinswiber> https://github.com/creationix/js-git
01:25 < niggler> impressive stuff
01:25 < howdynihao> niggler: the creator or the guy whos running the project is pretty experienced
01:25 < howdynihao> ive got no doubt he will finish
01:25 < kevinswiber> Lots of work already done, apparently https://github.com/creationix/js-git/issues/3
01:25 <@mbalho> protip https://github.com/creationix/js-git/issues/3
01:25 < kevinswiber> Bam.
01:25 < niggler> who's chris dickinson?  is he creationix?
01:25 < kevinswiber> No.
01:25 < kevinswiber> Creationix is Tim Caswell.
01:26 < kevinswiber> Chris Dickinson is... Chris Dickinson.
01:26 < niggler> so this is code written by someone who is not the kickstarter guy
01:26 < kevinswiber> Yep.
01:27 <@isaacbw> oohh, I get it. That was a hard description to parse
01:27 <@isaacbw> "what the fuck is a browser git clone"
01:28 < niggler> wasn't faceleg|work working on something similar?
01:28 < howdynihao> no not really
01:28 < kevinswiber> Clone from GitHub to IndexedDB in the browser.  Make changes.  Commit.  Push back to GitHub.  (or presumably any other Git server)
01:29 <@isaacbw> I'm not sure if I like this "make everything javascript" mindset
01:29 < dypsilon_> that's awesome and all, but i don't think it's the only part required for making cloud ides able to work offline
01:29 < howdynihao> i dont think its make everything javascript, it's that it can run in the browser
01:29 < dypsilon_> git != dev env
01:29 < kevinswiber> dypsilon_: Again, it's innovation work.  Experiments.  I'm happy to support that.
01:30 <@isaacbw> what would be awesome is if browsers didn't have javascript engines, but ran some sort of bytecode and developers could build languages on top of that
01:30 < dypsilon_> kevinswiber, i'm happy you are supporting that
01:30 < niggler> isaacbw like nacl?
01:30 < niggler> or pnacl or whatever
01:30 <@isaacbw> yea, something like that
01:31 <@isaacbw> it wouldn't have to be native code though
01:32 <@isaacbw> but that will never happen
01:34 < kevinswiber> I'll be much happier with "everything JavaScript" once ES6 is the everyday norm.
01:34 < niggler> :/
01:34 < kevinswiber> (Not that I don't do everything I can in JavaScript now... I would just be happier.)
01:35 < howdynihao> theres ruby capable webkit
01:35 < kevinswiber> Link?
01:35 <@konobi> isaacbw: you mean parrot?
01:36 < niggler> lol perl6
01:36 < howdynihao> https://github.com/timahoney/decaf
01:36 <@isaacbw> konobi: what?
01:36 <@konobi> parrotvm
01:36 < kevinswiber> howdynihao: That's kinda neat.  I bet it dies fast on Windows, though.  ;P
01:37 <@isaacbw> konobi: oh cool, yea, some sort of virtual machine
01:37 <@isaacbw> so that javascript could be one of many languages for the web
01:37 < niggler> you don't think javascript is a good foundation for other languages?
01:37 < howdynihao> JVM!
01:37 <@konobi> yeah, parrot is a VM for dynamic languages
01:39 <@konobi> isaacbw: http://trac.parrot.org/parrot/wiki/Languages
01:39 < niggler> will perl7 be closer to perl6 or perl5
01:40 < jdelgado> Do you guys run nodejs in a sandbox vm or apparmor in production?
01:41 < jdelgado> I never have, but someone recently recommended it to me
01:42 <@konobi> niggler: well latest perl5 was release just over a month ago... so...
01:42 < niggler> so its clear that py4 is going to be closer to py3 than py2
01:42 < niggler> granted they aren't that far apart
01:43 < niggler> but its not clear if perl5 or perl6 won the mindshare (still feels like perl5)
01:43 <@konobi> parrot and especially NQP are pretty awesome tools
01:43 <@isaacbw> py4
01:43 <@isaacbw> what
01:43 < niggler> the next python isaacbw 
01:44 <@isaacbw> no I know :P I just mean, people still don't support py3
01:44 < niggler> 3to2 was woefully underdeveloped compared to 2to3
01:46 < lilred> hey guys, I'd like to write code that works both in Node.js and the browser, however it's pretty complicated considering the JavaScript standard library isn't present on node.js
01:47 < lilred> is there a way to make a http request that works both on the server and the client?
01:47 < jdelgado> lilred: Better luck just writing them seperate, bro.
01:47 < niggler>  lilred wtf is the javascript standard library
01:48 < gluxon> lilred: That's most likely not going to happen.
01:48 < lilred> niggler: whatever's documented on MDN
01:48 <@mbalho> lilred: http://browserify.org/ + http://didact.us/beefy/ will let you require('http') in the browser
01:48 < gluxon> Node.js has all of JavaScript's standard libraries.
01:48 <@mbalho> lilred: there is also a package on npm called browser-request that works on both sides two but doesnt have streams
01:48 < gluxon> Standard JavaScript (in browser) doesn't have Node.js, that's the issue.
01:48 < gluxon> *Node.js API's
01:48 < lilred> gluxon: then why doesn't Node.js have XmlHTTPRequest?
01:49 < jdelgado> are you guys really starting a pissing match over js standards..? lol
01:49 <@isaacbw> because it doesn't have dom
01:49 <@isaacbw> ?
01:49 < niggler> lilred https://npmjs.org/package/xmlhttprequest
01:49 < lilred> I come from a functional programming background, and I loathe, LOATHE JavaScript
01:49 < lilred> you guys aren't helping
01:49 <@isaacbw> lol then why the hell are you using it
01:49 < niggler> https://npmjs.org/browse/keyword/xhr
01:50 < jdelgado> troll detected
01:50 < lilred> isaacbw: because it's the only thing that runs in a browser
01:50 < gluxon> lilred: Fair enough. There are some that may be missing because there are more suitable alternatives.
01:50 < lilred> isaacbw: I mean, I could use emscripten, websharper, dart2js or whatever but then no one could use my library
01:50 < gluxon> lilred: Generally, if you're trying to write portable code across Node.js and browser JS, something along your intentions may be misunderstood.
01:50 < niggler> what does your library do lilred 
01:51 <@isaacbw> lilred: okay, right are you using node.js
01:51 < lilred> niggler: a whole lot of http requests and not much else
01:51 < lilred> isaacbw: correct
01:51 < gluxon> Guys, let's not have 5 people tackle one question. Meaningful questions at least please.
01:51 <@isaacbw> *why
01:51 < jdelgado> lilred: sounds useful
01:51 < niggler> so lilred https://npmjs.org/package/xmlhttprequest
01:51 < niggler> try that
01:51 < syskk> i have a 240086 character string… that's about 240 KB of data right?
01:52 < syskk> something weird is happening to me :(
01:52 <@isaacbw> generally people use node.js because they like javascript. There are plenty of options for server development
01:52 < lilred> I saw ways to detect if a browser had a certain feature and loading an alternative implementation when it didn't
01:52 < lilred> couldn't that be used to check if I'm on Node and if so to load something worthwile?
01:52 < howdynihao> yes
01:52 < gluxon> lilred: Sure.
01:52 < howdynihao> YYYYYYYYYYYYYYYYYYYYYYYY
01:52 < lilred> isaacbw: I'd like to write a library that has a client and a server component, and I'd rather not write two versions in two different languages
01:52 < niggler> howdynihao not enough Y's
01:53 < niggler> actually what distro are you using?  isn't yes supposed to print lowercase y's by default
01:54 -!- mbalho changed the topic of #Node.js to: Node.js - Ask a question, get a random stranger's strong opinion! - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
01:55 <@isaacbw> lilred: well, there's the dom (http://www.w3.org/DOM/) and there's javascript (http://www.ecma-international.org/publications/standards/Ecma-262.htm)
01:55 < lilred> so what would be a good way to check if my code is running on node or on the server?
01:55 <@isaacbw> node.js provides its own set of standard libraries over the javascript http://nodejs.org/api/
01:55 < gluxon> lilred: Developing JavaScript in the browser and developing Node.js is like milking a cow and milking butter. You're still milking, just creating different things.
01:56 <@mbalho> lilred: if you use browserify you can do if (process.browser)
01:56 < gluxon> Sorry for my horrible analogy about milking, I had some desire for milk at the moment.
01:56 < deoxxa> i thought it was called churning butter, gluxon
01:56 < lilred> I'd like to do it lightweight and have as few dependencies as possible o.O
01:56 < niggler> gluxon has his mind in the right place: boobies
01:56 < gluxon> deoxxa: I would like butter too.
01:56 < lilred> in fact I don't think I should have any dependencies considering the only thing I'm doing is routing http requests
01:56 < gluxon> niggler: No, I just want milk.
01:57 < niggler> where do you think that milk comes from gluxon 
01:57 < gluxon> niggler: Cows.
01:57 < gluxon> Farms.
01:58 <@isaacbw> lilred: routing http requests through a browser?
01:58 < niggler> have you been to these farms?
01:58 < lilred> isaacbw: stop judging me
01:58 < niggler> lilred are you sure it makes sense to integrate the actual requests in the library itself? 
01:59 < lilred> well if all I'm doing is http requests, it might make sense to include the http requests in the library
01:59 < lilred> otherwise my library would be a whole lot of nothing
02:01 < gluxon> lilred: I would recommend using XmlHTTPRequest in npm if you want to stick to this.
02:01 < gluxon> That was linked to earlier.
02:01 < lilred> I don't want any dependencies
02:02 < niggler> lilred what's a dependency?
02:03 < niggler> lilred if you felt so compelled you could just include https://github.com/driverdan/node-XMLHttpRequest/blob/master/lib/XMLHttpRequest.js in your source file
02:03 < lilred> niggler: if library A has dependency B, then you can't install/run/use A without installing/running/using B
02:03 < niggler> so that source file has no dependencies
02:04 < niggler> *the dependencies are in the node api
02:04 <@isaacbw> node.js is a dependency
02:05 < lilred> isaacbw: not to my library obviously, since I want it to run cross-platform
02:07 < gluxon> lilred: Can I ask why this "cross-platform" is needed? Conveniency?
02:07 < gluxon> cross-platform wouldn't be the right word here too.
02:07 < lilred> gluxon: because I'm effectively writing two different programs that share something like 75% of each other's source code
02:07 < gluxon> lilred: Normally, the solution is to modularize it.
02:08 < deoxxa1> modules ftw
02:08 < niggler> make your library take a callback function
02:08 < niggler> and pass different callbacks in each case
02:08 < niggler> that callback should be responsible for making the request
02:08 < deoxxa1> callbacks ftw
02:09 < niggler> heh function pointer sounds too C-like
02:09 < lilred> niggler: except that I need to make GET, POST, PUT, COPY, MOVE, DELETE and PATCH requests
02:09 < lilred> so that would have to be one hell of a callback
02:09 < deoxxa1> that statement made no sense
02:10 < lilred> oh screw you
02:10 < deoxxa1> what, it didn't
02:10 < niggler> sometimes 
02:11 < niggler> i wish jscript survived
02:11 < niggler> powershell is certainly a step forward, but jscript felt more powerful
02:11 <@isaacbw> unityscript is basically jscript
02:12 < niggler> unity as in unity3d?
02:12 <@isaacbw> yea
02:12 < niggler> don't most engines use tcl?
02:13 < niggler> or lua
02:13 <@isaacbw> the big engines all have their own special scripting languages, but lua is pretty common and so is angelscript
02:14 <@isaacbw> lua is really fun to embed actually
02:14 < lilred> Lisp is master scripting language
02:14 < lilred> http://en.wikipedia.org/wiki/AutoLISP
02:15 <@isaacbw> you basically just get a stack and that's it
02:15 <@isaacbw> ((((()())())))))
02:16 <@isaacbw> ah well, time for bed
02:16 <@isaacbw> good luck lilred. I hope you find the answers you're looking for ;)
02:16 < lilred> isaacbw: I think I did, actually, thanks :D
02:17 < lilred> oh wow, xml http requests are limited to the same origin
02:17 < lilred> I have no words
02:18 < deoxxa1> lilred: plug "CORS" into google
02:18 < lilred> I think I'll just use SilverLight + ASP.NET, screw this
02:18 < standoo> do people use npm install or npm update much?
02:18 < niggler> lol standoo 
02:19 < gluxon> standoo: A lot.
02:19 < howdynihao> as opposed to what??????????????????????
02:19 < standoo> feels slow on for me
02:19 < jdelgado> what does npm do
02:19 < niggler> standoo i have a nightly cronjob
02:19 < standoo> i  mean everytime i use npm update
02:19 < howdynihao> how advanced
02:20 < howdynihao> i copy and paste my dependencies line by line
02:20 < standoo> howdynihao: in package.json?
02:20 < howdynihao> jk
02:20 < jdelgado> standoo: He's being sarcastic
02:21 < howdynihao> standoo: slow is relative
02:21 < howdynihao> what is slow to you?
02:22 < niggler> I've experienced some sluggishness
02:22 < standoo> more than 10 seconds
02:23 < standoo> niggler: with npm update?
02:23 < niggler> with both
02:23 < niggler> its actually not due to npm per se
02:23 < standoo> niggler: do you know why?
02:23 < niggler> in every case i could trace it to sluggishness with github
02:23 < standoo> oh
02:23 < standoo> so it's git hub thing?
02:24 < niggler> i don't know in your particular case
02:24 < standoo> no wonder the http get request takes so long
02:24 < niggler> but in my experience its due to some strange module which has a dependency specified as a github module (rather than npm)
02:25 < niggler> i'd look carefully at what it's doing (it gives you urls) and see if there's a git pull anywhere 
02:36 < syskk> is there any good compression library that works in the browser as well?
02:40 <@konobi> gzip?
02:45 < syskk> konobi: cant find gzip implementations in JS
02:50 <@konobi> syskk: it's built into the browser
02:51 < syskk> i want to compress, not decompress
02:51 < syskk> gzip, not gunzip
02:52 <@konobi> seems like there's plenty of js gzip implementations
02:52 < niggler> http://stackoverflow.com/questions/294297/javascript-implementation-of-gzip @ syskk 
02:53 < syskk> niggler: this is a LZW implementation and it is flawed. I have just tested it
02:53 < syskk> :(
02:53 < niggler> ah that's your cue to write one syskk 
02:54 < syskk> guess so :(
02:54 < niggler> this is an opportunity
02:54 < niggler> no need for a frowny face
02:54 < grep_awesome> "an opportunity"… somebody works in corporate
02:54 < niggler> i thought "challenge accepted" was too blase
02:55 < niggler> grep_awesome lol i work for myself
02:55 < syskk> might try that one
02:55 < syskk> https://github.com/nmrugg/LZMA-JS
02:56 < grep_awesome> lol I worked corporate for a while and that was one of management's favorite buzzwords
02:56 < grep_awesome> you learned to be gunshy
02:56 < niggler> ok I'm confused syskk
02:56 <@konobi> https://github.com/dankogai/js-deflate
02:56 < niggler> why is there no braindead demo
02:56 < niggler> click-drag and see stuff
02:57 < syskk> thanks konobi 
02:57 < syskk> sucks that its a pretty huge file though :(
02:57 < niggler> they aren't that large
02:57 <@konobi> minify and gzip that sucker
02:58 < niggler> if you gzip the deflator, how do you gunzip it konobi ?
03:04 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:36 < sinclair-work> niggler: hi
03:37  * niggler pets sinclair-work 
03:37 < niggler> how's node treating you?
03:40 < sinclair-work> niggler: just been tinkering around again actually
03:40 < nathanbl> anyone got toobusy to work with node .10.5 
03:40 < sinclair-work> still with TS
03:40 < niggler> how's azure's support for TS?
03:40 < sinclair-work> niggler: pretty good
03:41 < sinclair-work> they run node 0.6 tho
03:41 < sinclair-work> last time i looked
03:41 < niggler> you can control the engine
03:41 < niggler> you have to set engines in package.json 
03:41 < sinclair-work> ah right, never checked actualy
03:41 < niggler> i dunno about deploying typescript, but for plain JS projects
03:42 < sinclair-work> niggler: i still think the merit of having language reflection / typing etc is still worth the effort, but i have been trying to dig around with clustering and spawning child processes of late
03:42 < sinclair-work> niggler: and trying to emulate namespace 'using'
03:43 < niggler> what i meant, sinclair-work, was that I would hope windows azure had special (better) support for typescript
03:43 < sinclair-work> well, it has its own bunch of MS packages that connect to all the azure services, 
03:43 < sinclair-work> like the service bus, azure sql, and a few other things
03:44 < sinclair-work> niggler: it offers up two ways to run node, and a web worker, or straight from the azure website stuff (by way of issnode iirc)
03:45 < sinclair-work> in the former, you can fluff up node with fibers and other native components, afaik, the websites only offers up node only functionality
03:45 < nathanbl> so many updates when upgrading 0.o
03:48 < brianng> hi
03:48 < brianng> i need help
03:48 < brianng> anyone here?
03:49 < brianng> i need something like this https://github.com/ameba-proteus/proteus-cluster
03:49 < brianng> but i need the workers to each run slightly different tasks
03:49 < brianng> is that possible?
03:49 < jdelgado> anything is possibl
03:49 < niggler> cold fusion?
03:50 < jdelgado> I lol'd so hard
03:50 < brianng> can u point me in the right direction?
03:51 < jdelgado> brianng: Why not just code something that does what you want? I don't understand your question
03:51 < brianng> like one master tha monitors different workers running different tasks
03:51 < niggler> substack wrote something
03:51 < jdelgado> go code a module, use dnode and make it...
03:52 < jdelgado> it doesn't sound complex at all
03:52 < brianng> instead of just running off one worker.js
03:54 < brianng> i dont think donde is what i need
03:55 < jdelgado> it is
03:55 < niggler>  https://github.com/substack/seaport
03:56 < jdelgado> niggler: I never understood why developers feel the need to include some kind of illustration with their project.. lol
03:57 < niggler> I'd like to think of it as a pre-emptive logo
03:57 < jdelgado> lol
03:57 < niggler> before it becomes big enough to justify a logo
03:58 < niggler> actually, I'm convinced that projects that start with a logo go nowhere
03:58 < jdelgado> I would absolutely agree with that
03:58 < jdelgado> Usually, if a developer is more focused on a logo than the project, then it's bound to fail
04:01 < niggler> oh sinclair-work that reminds me -- i had a pretty pleasant experience with vs2012 and intellisense
04:01 <@Nexxy> 'usually'
04:01 <@Nexxy> e.g., 'this one time...'
04:01 < sinclair-work> niggler: yeah, its pretty good now, it used to be rubbish
04:01 <@Nexxy> implying the presence of a logo has any impact on failure is absurd at best
04:02 < jdelgado> Nexxy: Developers != Designers :)
04:02 <@Nexxy> which is part of why your statements are so confusing
04:02 < niggler> I wish support for _references.js was back ported to vs2010 sinclair-work 
04:02 < jdelgado> There are always exceptions
04:03 <@Nexxy> except!
04:03 <@Nexxy> they are the rule
04:03 <@Nexxy> my anecdotal evidence says so
04:03 < jdelgado> lol
04:03 < niggler> the logo should be treated like a mission accomplished banner
04:04 < niggler> sometimes it helps to wait until the mission is actually accomplished before grandstanding in front of a mission accomplished sign
04:05 < niggler> (and yes, the 10-year anniversary is in a few days)
04:06 < niggler> on the other hand, a project with a logo that is missing a license truly reflects a lack of priorities
04:08 < niggler> and it's pretty sad to see that many modules are missing licenses or do not comply with the licenses they allege to foliow
04:15 < ome> Hello people,
04:17 < niggler> sup ome
04:31 < ome> niggler: Not much really, I had a problem that I was going to ask about but managed to solve it. :)
04:33  * niggler pets ome
05:18 < sinclair-work> niggler: do you know of a way to start a node child process by passing it a function, rather an a entirely new file?
05:19 < niggler> sinclair-work i thought there was a child_process.fork
05:19 < sinclair-work> ok, let me have a look at that
05:19 < sinclair-work> niggler: child_process.fork(modulePath, [args], [options])
05:20 < sinclair-work> niggler: but no.. child_process.fork([Function])
05:20 < niggler> are you trying to do something like threads or something like an OS fork
05:24 < sinclair-work> niggler: i thought it might be nice to have.....
05:24 < niggler> what i meant sinclair-work is that the awkwardness stems from v8 limitations
05:24 < sinclair-work> worker.run(function(){ /* do heavy work here */ });
05:25 < sinclair-work> so, inside worker.run, i would spawn a child_process and pass the function to it
05:25 < niggler> aren't there web worker npm modules?
05:25 < sinclair-work> not sure, but even in the web worker instance, they would still require me to pass a reference to a file
05:25 < niggler> https://npmjs.org/package/webworker-threads
05:25 < sinclair-work> wouldn't they?
05:26 < niggler> i thought workers could also take a function
05:26 < softserve> hi
05:26 < sinclair-work> hmm
05:27 < sinclair-work> niggler: ok, cheers, ill keep on digging around
05:27 < niggler> actually i may be mistaken with that statement
05:27 < niggler> but it appears that webworker-threads can accept a function
05:27 < jdelgado> night guys
05:27 < niggler> want a lullaby jdelgado ?
05:27 < softserve> :)
05:27 < jdelgado> hell yeah niggler 
05:28 < niggler> rock-a-bye baby, on the treetop
05:29 < niggler> when d-dos blows, the server will rock
05:29 < niggler> when nginx breaks, the network will fall
05:29 < softserve> node can handle it
05:29 < niggler> and down will come service, business and all!
05:30 < jdelgado> bravo
05:30 < softserve> nice
05:30 < niggler> in retrospect, the original lullaby is somewhat disturbing
05:31 < niggler> isn't "cradle will fall" a bad thing?
05:31 < jdelgado> heh, ricky gervais did a hilarious stand up routine about how nusury rhymes are disturbing
05:31 < niggler> https://www.youtube.com/watch?v=muAcLkXSy4Q
05:32 < jdelgado> That is it!
05:32 < jdelgado> absolutely hilarious
05:32 < niggler> lol
05:36 < jdelgado> Good stuff, just watched the entire thing over again
05:36 < jdelgado> There was a special where he went over some more of them too
05:37 < jdelgado> anyway, thank you for the cheerful lullaby, night!
05:38 < parnaik> connect
06:19 <@Nexxy> mbalho, hahahaha
06:19 <@Nexxy> +1
06:20  * ningu must have missed something
06:20 <@Nexxy> the topic
06:20 <@Nexxy> A++++ on-point would read again
06:20 < ningu> oh, hehe. seems about right
06:21 < ningu> I do value random strangers' strong opinions, they have proved surprisingly helpful over the course of my life on irc
06:22 <@Nexxy> it's just that so much of it is pure conjecture
06:22 < ningu> isn't that what opinions are?
06:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:22 <@Nexxy> not necessarily
06:22 < ningu> well, ok, they could be based on experience
06:23 <@Nexxy> they should generally have a basis in reality 
06:23 <@Nexxy> unless the subject is also imaginary
06:23 < ningu> I don't see how conjecture and basis in reality are a contradiction
06:23 < ningu> you can speculate based on your real experience
06:24 <@Nexxy> I'm making a distinction between 'speculate' and 'pure conjecture'
06:24 <@Nexxy> not necessarily using it properly
06:24 < s5fs> Nexxy: hai
06:24 <@Nexxy> but I mean to say there is a lot of bullshit, in other words
06:24 < ningu> Nexxy: and how do you tell the difference?
06:24 <@Nexxy> s5fs, hey
06:24 < ningu> sure
06:25 < ningu> I'm just wondering what counts
06:25 <@Nexxy> IDUNNOLOL
06:25 <@Nexxy> let's pretend we know :D
06:25 <@Nexxy> then make random assertions
06:25 < ningu> because everyone has *some* level of experience, even if it's very small
06:25 < ningu> so it isn't quite "pure" conjecture in the sense that there is no knowledge whatsoever
06:26 < ningu> more like... unfounded conjecture, or something :)
06:26 <@Nexxy> s5fs, I'm making something special
06:26 < ningu> improperly generalizing or assuming 
06:26 < ningu> and we all know what happens when you assume
06:27 < s5fs> Nexxy: oh yeah?
06:27 < astropirate> Nexxy is working on a transpiler 
06:27 < astropirate> i know it
06:27 <@Nexxy> ya, other channel
06:28 < ningu> I prefer transpirers
06:28 < ningu> makes me feel like I'm in a spy thriller
06:59 < Batandwa> Someone please help. I'm getting the following error when using bower: "bower: symbol lookup error: bower: undefined symbol: SSL_CTX_set_next_proto_select_cb". I know others have had this problem in the past and  was fixed by running: npm config set registry http://registry.npmjs.org/. 
07:00 < Batandwa> I'm not having any luck. Please assist. I'm running opensuse 12.1.
07:09 < ningu> Batandwa: sounds like an issue with one of the native bindings used by bower or one of its modules. from that error I can't really tell what it might be. but you can look at what it compiled when you installed it
07:11 < ningu> Batandwa: actually, nevermind. it looks like it's an issue with node, not bower.
07:11 < ningu> how did you install node?
07:12 < ningu> and what version of node?
07:12 < abkn> When designing a REST API, what is the reason not to send credentials (username+password) in plain text with every request when https is enforced?
07:12 < Bergle_2> you can do it, but usually you want to associate a given request with some context.
07:12 < Havvy> abkn: Send a session token instead.
07:13 < Bergle_2> thast why often you have session token.
07:13 < Bergle_2> however there is no reason you cant use basic auth over ssl securely.
07:13 < ningu> what exactly is the purpose of API session tokens?
07:13 < geNAZt> wait REST and sessions ? oO
07:13 < abkn> geNAZt: i was just wondering the same thign
07:14 < geNAZt> REST is deigned to not have any sessions
07:14 < geNAZt> or dynamic server data
07:14 < abkn> I just don't understand why people are making these complicated request signing technologies when you are sending everything over HTTPS
07:14 < ningu> I don't mean for REST. I just mean for APIs in general, why do they use sessions?
07:14 < geNAZt> ningu: they use it to store tracks of user flows, user data or data for payment
07:14 < geNAZt> depends on the api
07:14 < ningu> ok
07:14 < astropirate> ningu, just so they have authentication and you dont have to pass a user/pass or secrete key or whatever with every requeet
07:15 < astropirate> instead you send cookiessss!!!
07:15 < ningu> so it doesn't add any features for the user, basically
07:15 < geNAZt> ningu: no 
07:15 < ningu> just for the API creators
07:15 < geNAZt> and for the most cases the api gets called from a server
07:15 < abkn> Anyway, I'm trying to decide on a security setup for my API and everything else seem to do this: http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/
07:15 < geNAZt> and for normal they dont care about cookies
07:16 < ningu> so if the API is public anyway would you still use cookies?
07:16 < Batandwa> ningu: I probably installed from opensuse's Yast interface or zypper command. Node.JS version nodejs-0.8.18-19.1.i586.
07:16 < ningu> Batandwa: you could try upgrading openssl if it's not up to date.
07:16 < geNAZt> ningu: no
07:16 < Bergle_2> https://news.ycombinator.com/item?id=5565880 the top response here from tptacek is useful.
07:16 < Bergle_2> its about secure rest API
07:17 < geNAZt> i would use client ids
07:17 < ningu> geNAZt: ok. well that suddenly makes a lot of sense. I recently designed a public API and I read all this stuff about sessions and was just like... why?
07:17 < abkn> "Contrary to the implications in this article, HTTP Basic Auth is not less secure than OAuth if your endpoints all require HTTPS. If you allow HTTP calls to an API, you have bigger problems than your auth token scheme." <-- THIS
07:17 < geNAZt> if i design an api(mostly REST), then i build the api without sessions or server side stored data
07:18 < abkn> I think I'm just moving to HTTP Basic Auth over HTTPS
07:18 < ningu> right now I don't assign any client ids, each request is independent, like REST, except it doesn't follow the REST standards of GET/PUT/DELETE because everything is a query for data with a JSON request object
07:18 < abkn> Fuck all that HMAC-ing
07:18 < geNAZt> well to secure a api against random usage you can register clientids
07:19 < ningu> so everything is a POST
07:19 < ningu> geNAZt: I implemented a generic rate limiter
07:19 < geNAZt> to be sure that application xyz is using it
07:19 < ningu> tracked by IP
07:19 < geNAZt> well if you have a public api no problem :D
07:19 < geNAZt> by most of my apis are private restricted
07:19 < geNAZt> and you need a key to use them
07:19 < ningu> and it isn't being used by particular applications, the point is basically for anyone who wants to use it to use it
07:19 < ningu> ah, ok
07:19 < abkn> geNAZt: My API is both public and private
07:19 < abkn> geNAZt: Some parts require you to authenciate
07:20 < abkn> *authenticate
07:20 < ningu> geNAZt: yeah, this is basically a public interface to a large research data set, the whole point is to make it accessible, it's not restricted to android app X
07:20 < geNAZt> well in a rest api you must authenticate all request that have to be private
07:21 < abkn> geNAZt: right, i'll just check the basic auth headers
07:21 < ningu> yeah, my API has no requests that modify anything so nothing is private :)
07:21 < geNAZt> since rest doesnt allow you to use server side stored sessions or sessions in all cases
07:21 < ningu> that will change at some point
07:21 < ningu> I was having a beer a few weeks ago and I wondered: in the future, will my IPA have an API?
07:22 < abkn> ningu: no, but in the future it will taste worse, be more expensive, and you will still dirnk it
07:22 < abkn> and your claim of chosing for price will have become false
07:22 < abkn> choosing*
07:22 < ningu> sounds like a dystopic future
07:23 < ningu> I have my dystopiary trimmed regularly
07:24 < abkn> ok, so i'm about to change my api so that: 1) enforces HTTPS 2) sends api key as basic auth. any objections?
07:24 < Batandwa> ningu: Just did. No success. I upgraded to openssl-1.0.0k-34.20.1.i586.
07:25 < geNAZt> abkn: well that should be enough
07:25 < abkn> geNAZt: it's simple and works, like the hn post says
07:26 < geNAZt> yes but the link you send, its bullshit
07:26 < geNAZt> adding timestamp in the request
07:26 < geNAZt> the most aweful thing you can to in a rest api -_-
07:26 < niggler> lol HN recommended it -> probably not a good idea
07:26 < Batandwa> ningu: I know 1.0.1 is available though. 
07:26 < abkn> geNAZt: yes, makes no sense. no replay on https unless you have installed corporate certs or your computer is compromised
07:27 < geNAZt> what some people write under REST apis :P
07:27 < geNAZt> timestamps and shit :D
07:41 < owen1> is there a way to run multiple files with tape or do i have to write a 'runner' file?
08:23 < cloudbender> hey peeps wazaaap
08:25 < cloudbender> I'm going to miss writing code, but I need to write something else.
08:25 < cloudbender> Node has been a blast.
08:25 < cloudbender> Good luck all.
08:26 < deoxxa> later, hater
08:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
08:55 < devongovett> seems like the combination of Node 0.10, forever, and ws has broken all of my websockets. Works fine when not running as a forever daemon though... strange
08:56 < devongovett> anyone seen anything like that before?
08:57 < myndzi> did you use node --dont-break-websockets??
08:58 < devongovett> that would be nice
08:58 < myndzi> actually i do have a thought... when you're not using forever are you running it with root privs? what about with?
08:58 < myndzi> binding the port seems the most likely culprit
08:58 < myndzi> do you get any errors? is the socket actually listening?
08:59 < devongovett> no errors. the socket connects but no data is transmitted
08:59 < myndzi> to or from the node script?
08:59 < devongovett> meaning browsers seem to actually connect to it, but cannot talk.
08:59 < myndzi> verify 'seem' ;)
08:59 < devongovett> the server never receives the browser's messages
08:59 < myndzi> use a packet sniffer
09:00 < myndzi> if the server isn't listening on the port, that would explain why it gets no messages :P
09:00 < myndzi> netstat and see if the socket is actually listening
09:00 < myndzi> try nc locally and see if you can connect
09:03 < devongovett> yeah I see the connections
09:04 < myndzi> listening connections or open connections?
09:06 < devongovett> hmm interesting, looks like it might have something to do with the reverse proxy... works fine if I connect directly to the actual port the server is running on, but not port 80
09:12 < bmatusiak_> what year of Visual Studio should i use to build node.js?
09:13 < myndzi> whichever one you legally own? ;)
09:13 < myndzi> in before install linux
09:13 < bmatusiak_> visual studio express is free
09:14 < myndzi> i was just teasing. i imagine they all work, or else in the build instructions it'll say "this doesn't work with X"
09:14  * myndzi shrugs
09:14 < myndzi> i've never actually built anything with VS
09:14 < bmatusiak_> i tested with 2008
09:14 < bmatusiak_> no work
09:14 < bmatusiak_> im install 2010 
09:14 < bmatusiak_> to see if that does it
09:15 < bmatusiak_> brb
09:17 < Dev__> Hello to all
09:17 < Dev__> can any one help me to find solution of http://stackoverflow.com/questions/16247768/how-to-generate-dynamic-asserts-in-nodejs-soda
09:17 < spion> here is a neat way to combine any-db with node-sql :) https://gist.github.com/spion/5468043
09:18 < bmatusiak_> mikeal vs2010 so far is the only one that is building correctly
09:19 < bmatusiak_> or whoever i talked to last
09:19 < bmatusiak_> :P
09:20 < devongovett> so the answer to my earlier problem seems to be that node-http-proxy isn't correctly proxying websocket traffic in node 0.10. hopefully that's fixed soon
09:20 < devongovett> a patch was already merged but apparently doesn't fix the problem https://github.com/nodejitsu/node-http-proxy/issues/387
09:21 < myndzi> why use a node proxy when you have nginx?
09:21 < bajtos> bmatusiak_ vs2012 works too, you need a small fix in vcbuild.bat - see https://github.com/joyent/node/commit/0602fbb49c159fe5eded343a0fbb447979d757ba
09:21 < myndzi> er, websockets. nginx probably doesn't eh?
09:21 < devongovett> make all the things node? idk, it's worked for me for several years now
09:21 < Dev__> can any one nodejs guru  help me to find solution of http://stackoverflow.com/questions/16247768/how-to-generate-dynamic-asserts-in-nodejs-soda
09:21 < Havvy> nginx has support for websockets
09:21 < myndzi> then iunno
09:22 < bmatusiak_> bajtos yea i always ran into the 2012 problem i gave up on trying last year
09:22 < Havvy> Course, it's newish.
09:22 < Havvy> Less than 3 months old.
09:22 < myndzi> two reverse proxies seems kind of like two antivirus or two f irewalls
09:22 < myndzi> i was curious if there was some particular reason
09:24 < Dev__> How can I gnerate below code for row testing dynamically..I am using nodejs with soda
09:24 < Dev__> function verifyData() {   return function(browser) {     browser     //Row 1 testing     .assertText('css=div.keyYears table tbody tr:nth-child(1) td:nth-child(3)','some text',function(){ console.log('looks good')})     .assertText('css=div.keyYears table tbody tr:nth-child(1) td:nth-child(5)','some text')     .assertText('css=div.keyYears table tbody tr:nth-child(1) td:nth-child(6)','some text')     .assertText('css=div.keyYears tab
09:24 < spion> Dev__, you can do a loop e.g. var browserAsserts = browser; for (var k = 0; k < numbers.length; ++k) { browserAsserts = browserAsserts.assert('... numbers[k] ... ', ...); }
09:25 < spion> that should have the same effect as chaining.
09:26 < Dev__> spion can you please write one complete line for me will be helpful
09:28 < spion> no because you need a matrix and you need a source for the values as well as the numbers of the columns to check, and I'm not going to do the whole thing.
09:28 < Dev__> no not whole thing just a example
09:29 < Dev__> or any website tutorial you can point me
09:29 < Dev__> to
09:29 < Dev__> have a look
09:29 < spion> my example will work in your particular case as much as the fake example will.
09:29 < spion> what part of it is unclear?
09:30 < spion> doing browserAsserts = browserAsserts.assertText(...); is the same like browserAsserts.assertText(...).assertText(...)... etc
09:30 < spion> doing it in a loop that is.
09:31 < Dev__> okies they are equal
09:31 < spion> i'm not sure i know of a tutorial that covers that.
09:31 < Dev__> got it so I can do  browserAsserts.assertText(...); in loop
09:31 < Dev__> browserAsserts.assertText(...).assertText(...) was confusing me
09:31 < spion> that is not certain, that depends on what it returns...
09:31 < Dev__> to think how to do this
09:32 < spion> but if you re-assign the result to browserAserts then its *exactly* the same. 
09:32 < Dev__> okies let me give it a try
09:33 < Dev__> one more thing when we do browserAsserts.assertText(...).assertText(...) kind of chain what this concept is called
09:33 < Dev__> ?
09:33 < spion> its called exactly that, chaining :)
09:33 < Dev__> :) i was asking so that can search more on nodejs
09:34 < spion> Dev__, also http://stackoverflow.com/questions/7557093/how-to-loop-chained-calls-elegantly-in-javascript-coffeescript
09:35 < spion> seems like there is a separate construct for that. but my reassignment version should also work...
09:35 < Dev__> thanks so much this is helpful, is this a coffeescript in nodejs also
09:35 < spion> (which is the bottom solution on that page)
09:35 < Dev__> yep
09:49 < Dev__> thanks  Spion, I tested this and working fine for me :)  this is gr8 community
09:50 < jonathanmh> spion: are you at it again? helping people? :D (still appreciating your help so much from half a year ago)
09:51 < spion> Dev__, np :) jonathanmh, I am glad. yeah I still try answer questions but not very often.
09:52 < Dev__> spion so i am lucky one :)
09:52 < spion> yes, unless I mess up the answer :D
09:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
09:52 < Dev__> hehehehe
10:10 < squeakytoy> lets say i have a for-loop that writes random data to different files, in an async way. How do i perform something once everything is done? How can i know everything async callback is completed?
10:11 < Havvy> squeakytoy: You can use promises for that.
10:12 < geNAZt> squeakytoy, you can use async module for that
10:13 < squeakytoy> async modules?
10:13 < geNAZt> or use a pattern from this blog: http://blog.mixu.net/2011/02/02/essential-node-js-patterns-and-snippets/
10:13 < squeakytoy> ill check it thanks
10:13 < geNAZt> point 3.1
10:14 < geNAZt> async: https://github.com/caolan/async
10:24 < Venemo> geNAZt, interesting article, although 1.3 is syntactically incorrect, and it doesn't mention promises at all, even though 3.1 can be best solved by promises
10:26 <@konobi> Havvy: you are dead to us... pppfffttt... promises...
10:27 < Havvy> konobi: Both would work.
10:29 <@konobi> nope... promises, bad
10:35 < Venemo> what's wrong with promises?
10:36 < Venemo> it's a nice pattern
10:38 < zapu> i'd rather have await
10:39 < Mushen> anyone provide a UI recommendation for me?
10:39 < Venemo> Mushen, what are you looking for?
10:40 < Mushen> html, css, js and some work in backbone is what i've been doing at work
10:41 < Venemo> okay, and what are you looking for?
10:41 < Venemo> a templating engine?
10:42 < Mushen> i wanted to see how the browser can be as an animation canvas using node, webgl, and some UI or simple DOM manipulation 
10:42 < Mushen> i suppose so, hah
10:42 < Mushen> underscore?
10:42 < Mushen> handlebars?
10:42 < Havvy> underscore is a convenience library for arrays.
10:43 < Havvy> handlebars is a template language.
10:43 < Mushen> i'm love handlebars
10:43 < Mushen> curious about ember.js as well
10:44 < Mushen> been in backbone for the past 6 weeks, but just finished up my contract :)
10:44 < Lucas_> i want to send an email on my website from random-email@random.com to my gmail address without it being sent to the spam folder. Ideas? using sendmail?
10:46 < Mushen> Venemo: I think node-webkit will be best
10:47 < Mushen> any experience?
10:48 < Venemo> Mushen, hm, never tried that but looks good to me
10:49 < Mushen> i think it's a nice start, even includes a webgl example
10:53 < MI6> joyent/node: Miroslav Bajtoš master * 5db936d : debugger: breakpoints in scripts not loaded yet - http://git.io/v81SYg
10:56 < standoo> hello
10:56 < Venemo> hi
10:57 < standoo> hi venemo
10:59 < Venemo> what's up standoo? :)
10:59 < standoo> nothing
10:59 < standoo> just wondering what's everyone upto
11:02 < standoo> i'm building a PaaS
11:02 < standoo> Venemo: how about you?
11:04 < Venemo> standoo, I'm quite new to node, just using it for experiments now :)
11:06 < standoo> cool
11:06 < standoo> might need you for my experiment as well :)
11:06 < standoo> pm me if you're interested :)
11:06 < geNAZt> :D
11:07 < standoo> how to make a big smile?
11:08 < geNAZt> on which hw you would build up your PaaS ?
11:09 < standoo> dedicated servers
11:09 < geNAZt> they should work like nodejitsu ?
11:09 < standoo> not quite
11:10 < standoo> i allow sftp support
11:10 < standoo> and filesystem access
11:10 < standoo> mainly for development purposes
11:10 < geNAZt> yes but one application => one server
11:10 < standoo> nope
11:10 < geNAZt> without access to other applications
11:10 < standoo> it's similar to shared hosting
11:10 < standoo> many applications one server
11:10 < geNAZt> so i cant connect 2 or 3 applications together
11:10 < geNAZt> yes like nodejitsu
11:11 < geNAZt> but can i have 3 applications sharing the same server ? if i need to
11:11 < standoo> yes
11:11 < standoo> you can
11:11 < standoo> but i don't see the point
11:11 < standoo> you can launch 3 apps in the same container
11:11 < geNAZt> well its a requirement of mine
11:11 < geNAZt> since i have a license service running in node
11:11 < geNAZt> and the client softwares running in a cloud
11:12 < standoo> geNAZt: how do you want them to connect?
11:12 < standoo> geNAZt: local tcp/ip?
11:12 < geNAZt> if they are on the same server via socket files
11:13 < geNAZt> and the license client controls the client application via ipc
11:13 < standoo> geNAZt: do they all have domains?
11:13 < geNAZt> but i search a cloud service which can handle that
11:14 < geNAZt> the license clients yes
11:14 < geNAZt> they bind the port for you
11:14 < geNAZt> and the client application binds to localhost
11:14 < standoo> geNAZt: PM?
11:15 < geNAZt> so application1 license client binds to port 801, the client application version 1 to port 8001, client application version 2 to port 8002
11:15 < geNAZt> and so on
11:15 < geNAZt> if you want :D
11:16 < zapu> i kinda want to fork coffeescript, name it zapuscript or whatever, change syntax to more 'classical' or 'c-like' one and use that
11:16 < zapu> am I a bad person?
11:17 < standoo> zapu: of course not :)
11:17 < deoxxa> zapu: someone already did that
11:17 < deoxxa> zapu: way back in the early 90s
11:17 < deoxxa> zapu: it's called javascript
11:18 < zapu> lol
11:30 < robertj> hey all, is there any good code out there for maintaining and culling backup sets?
11:31 < squeakytoy> i am thinking of creating an open source software quality platform, which is plugin friendly :<
11:32 < robertj> squeakytoy, bit generic no?
11:32 < squeakytoy> robertj, mmm, mm
11:32 < squeakytoy> robertj, maybe not
11:32 < squeakytoy> but we need it, i think
11:32 < robertj> is there a niche-specific use of quality that i'm not aware of?
11:33 < squeakytoy> robertj, what do you mean?
11:33 < robertj> squeakytoy, what are you trying to do?
11:33 < squeakytoy> robertj, i want sonar - but for javascript
11:33 < squeakytoy> robertj, know of sonar? http://en.wikipedia.org/wiki/Sonar_%28software_quality%29
11:34 < robertj> ah, ok, I thought you were just a terrible writer and using quality as a sprinkle-in adjective ;P
11:34 < squeakytoy> robertj, i have a dream dude
11:34 < robertj> fair enough, no foul there
11:35 < robertj> i'm up at 7:34 on a saturday thinking about writing a backup server so I think we have similar personality flaws
11:35 < squeakytoy> robertj, a simple node app that reads directories, files, file contents, etc. And it should be possible to have plugins that hooks into each "data layer", such as when a file is found, it can notify plugins that are interested, etc.
11:36 < squeakytoy> when a whole file is read, when a (each) row of a the file is read, etc.
11:36 < squeakytoy> its a good idea, i think
11:36 < robertj> i can see how it would be useful, especially for keeping track of newbie coders
11:37 < robertj> I bet it could have good uses in academia as well
11:37 < squeakytoy> robertj, but i need a name
11:37 < squeakytoy> robertj, "catgoesmeuw" is the best so far
11:38 < robertj> how about something soulless like uGrok
11:38 < robertj> (if not already taken of course)
11:38 < squeakytoy> soulless?
11:38 < robertj> dunno, it's kinda a formulaic name no?
11:38 < squeakytoy> hmmm
11:40  * robertj ponders the logistics of figuring out which blocks he needs to keep. BackutSets have rules that determine when a file comes/goes. Files have a set of blocks. Blocks go when no longer required by a file...
11:41 < robertj> BackupSets rather...
12:47 < aleksandar> I have a patch solution for reducing trafic between my server and clients, but as time passes by, the patch file becomes bigger than the source, how would you guys solve the problem i have?
12:47 < aleksandar> it is a http server
12:47 < zapu> fork
12:54 < Oddman> hey all
12:55 < Oddman> trying to install geddy and getting compatibility issues - anyone experienced similar?
12:55 < Oddman> No compatible version found: pg@'>=0.9.0- <0.10.0-'
13:04 < geNAZt> the version string looks not normal
13:15 < doolinkr> Do people usually just pass around the record
13:15 < doolinkr> 's ObjectID in Mongo...?...
13:16 < doolinkr> I'm coming from Rails and don't quite understand how to do references to other tables/collections like we do there.
13:16 < geNAZt> depends on what you want to do with the record
13:33 < doolinkr> Hm.
13:33 < doolinkr> Think  I kinda understand.
13:33 < ashnur> I think that
13:39 < standoo> clear
13:39 < sasos90> Hy! I have a problem. I need to write a Servlet in java and i need to use it someway with node.js. Do you have any clue where can i start? Even 1% of information will be a profit for me. Thank you
13:40 < Oddman> sasos90, ... what?
13:40 < geNAZt> well you have a big problem, you use java ......
13:41 < Havvy> sasos90: You *do* realize that Node.js is JavaScript and not Java, right?
13:41 < Oddman> elitism aside - sasos90 your request makes zero sense
13:41 < Oddman> are you needing to communicate between 2 separate services? What are you trying to do?
13:41 < Havvy> Using a Java Servlet with Node.js is one of the most arbitrary requests I've ever seen.
13:41 < Oddman> Havvy, some I feel either we misunderstand, or sasos90 misunderstands
13:42 < myndzi> but javascript is just a pared-down version of java anyway rite? :V
13:42 < geNAZt> well servlets are server apps ?
13:42 < geNAZt> or are servlets embbeded object in html like flash ?
13:42 < Havvy> geNAZt: The former.
13:42 < sasos90> I realize that yes. I am studying and we must have work just with HTML, PHP and so one.. from scratch. But i work in Node.js and now i need to add functionality with servlet. I am fu*ked right?
13:43 < Oddman> i still have nfi what you're trying to do
13:43 < Havvy> myndzi: Ha ha ha. No.
13:43 < geNAZt> why do you need to use a java servlet ?
13:43 < myndzi> havvy but they both have like, Math.stuff
13:43 < myndzi> i dont understand!!!!
13:43 < sasos90> I have some statistics to show on the page. And need to show them with servlets or something.
13:43 < Havvy> sasos90: Do you have a Node.js application, and you are working on a Java project that needs to communicate with the Node.js application?
13:43 < sasos90> Havvy yes
13:44 < sasos90> (sorry for my english) :D
13:44 < myndzi> oh, you should be okay then
13:44 < Havvy> Ah. Alright. Less arbitrary of a request.
13:44 < geNAZt> well java also have some sort of http request classes or ?
13:44 < Havvy> myndzi: You /are/ joking, right?
13:44 < myndzi> yes ;)
13:44 < sasos90> geNAZt right
13:44 < Havvy> Kk.
13:44 < geNAZt> why dont you use it ?
13:45 < myndzi> sasos, yeah, just build your back end thing in node if you want and make requests to it from the java project
13:45 < sasos90> Am.. actually i don't really understand how to access from node to servlet
13:45 < geNAZt> you dont
13:45 < sasos90> aha
13:46 < geNAZt> if you have a servlet that depends on data that comes out of nodejs
13:46 < Havvy> You communicate to the Node application like any other client of the application.
13:46 < geNAZt> you need to request out of the servlet into the nodejs server
13:46 < sasos90> so i must use tomcat for example, and node.js seperate.
13:46 < sasos90> oh
13:47 < Havvy> For example, if the application communicates via REST, you perform REST communications.
13:47 < geNAZt> oh you want to host a java servlet in a nodejs server
13:47 < geNAZt> something like tomcat for nodejs ?
13:48 < sasos90> doesn't matter if host or not. in that exercise for study i need to use servlets and node. that's all. so i for example install tomcat for servlet, and node.js and at the end they need to communicate
13:48 < sasos90> tomcat right.
13:49 < sasos90> so they need to be seperate right? i thought that it can be done something by merging that (servlet+node) ok i think that i have a clue now
13:49 < geNAZt> no that doesnt work
13:49 < sasos90> next time i will try to be more clear :)
13:49 < sasos90> yeah i understand now
13:49 < sasos90> thank you guys
13:49 < sasos90> you are great :)
13:49 < geNAZt> thanks :D
13:50 < sasos90> maybe i will be back in few days when i will start on this project... i am just grabbing informations to clear some things :)
13:50 < sasos90> thanks really. have a nice day all of you! bye
14:10 < doolinkr> Getting quite an odd error.
14:10 < doolinkr> "MongoError: E11000 duplicate key error index: seoulmix.users.$id_1  dup key: { : null } "
14:10 < doolinkr> I did search...
14:10 < doolinkr> but they seem to be unhelpful.
14:16 < jergason> you probably have a unique index and are trying to insert something with a duplicate value
14:16 < jergason> looks like it is null, and you already have something with a null value in that field
14:18 < OliverJAsh> has anyone got any tips for how i can validate a URL?
14:22 < doolinkr> jergason, the only unique index would be the Mongo default _id
14:22 < doolinkr> Which is why this seems strange.
14:27 < Leo__> Hello i have an idea, to code a reverse proxy + firewall in nodejs, using a round robin dns to distribute the load between the instances, the ideia would be to mitigate large ddos to tcp servers... is this  bad idea?
14:28 < geNAZt> well its a good idea
14:28 < geNAZt> but you cant handle firewall like things
14:29 < Leo__> i guess it would never handle the PPS of a tcp flood, not even with the computing power of a cloud, correct?
14:30 < jergason> doolinkr: how odd. maybe you are overwriting the mongo id? I have done that on accident before
14:31 < geNAZt> Leo__: well you can block out connections with nodejs
14:31 < geNAZt> and also you cant redirect on a lower layer
14:31 < geNAZt> so if you get ddosed you will ever have load on your event loop
14:32 < doolinkr> jergason, I thought I might have been, too. Earlier I was messing with unique indexes but reverted my changes and still getting an error.
14:32 < doolinkr> Interesting indeed.
14:34 < Leo__> yep, i would just let this instance go down and null route it, i would have some customers without a connection for a while, but as soon as the TLL expires they could get a new proxy server with the round robin dns... the bad side would be that some cusomters would be affected for a short period of time
14:34 < geNAZt> Leo__: which software should do the round robin ?
14:35 < geNAZt> DNS ?
14:35 < Leo__> I guess i would write a custom dns server with node,js...
14:35 < geNAZt> :D:D
14:35 < geNAZt> nice joke
14:35 < Leo__> yeah `-`..
14:36 < geNAZt> well node is not stable enough
14:36 < geNAZt> and what do you do when you DNS gets flooded ?
14:38 < Leo__> oh yeah, about that... forgot about that...
14:39 < doolinkr> Hm.
14:40 < geNAZt> i dont think its wise to build such network services with nodejs
14:40 < doolinkr> Interesting.
14:40 < Leo__> so probably the only real way to distribute a ddos would be with a anycast ip (something that i dont have the power to have)...
14:40 < doolinkr> I restarted my computer and now my collection is empty.
14:40 < geNAZt> Leo__: you can block the ip on a lower layer
14:40 < geNAZt> so the packages never reach your application
14:44 < doolinkr> Ah.
14:44 < doolinkr> Fixed it.
14:44 < doolinkr> Just dropped the collection.
14:44 < doolinkr> Strange error...
14:46 < Leo__> IPtables or router level? By the way cloudflare does round robin, but i wouldnt have much control over it, need to check the API's. And also ,I know this wouldnt be a enterprise solution, its more of a fun project to work on.
14:47 < geNAZt> well iptables do it in most cases
14:47 < geNAZt> but it will load your maschine
14:47 < geNAZt> to even disable that you need a ddos save router
14:47 < niggler> what's the best way to embed javascript in an iOS app?
14:49 < Leo__> By the way its more or less like AWS ELB, but in my control, 5 spare instances and boot more instances depending on the ddos size... Do you think Amazon would care if i bought spot instances only to be used as a cheap firewall?
14:50 < niggler> Leo__ I'm pretty sure amazon wouldn't care if you are paying them $$
14:50 < geNAZt> if you give them $$ they do anything for you
14:50 < geNAZt> :D
14:52 < aleksandar> zapu, this fork solution is working rather cool.
14:54 < Leo__> Thanks for the tips guys, coffee break is over...
15:21 < ashnur> anyone knows how I can cook up a custom script to run at `npm test` and tell if it's `not ok`? 
15:22 < deoxxa> ashnur: npm help scripts
15:23 < ashnur> thx deoxxa 
15:28 < ashnur> deoxxa: it's just that it is so ugly that message
15:28 < ashnur> Error: Unknown signal: 1\n at ChildProcess.kill (child_process.js:998:11)
15:28 < hallas> anyone has experience deploying node to a cluster of EC2 instances?
16:03 < caolanm> anyone here using weld templates? https://github.com/hij1nx/weld
16:03 < caolanm> just wondering how I'd get it to render an empty list. eg, $('#todos li').weld([]) => template li element still exists on page
16:20 < mikeal> didn't paolo kill that project in favor of a new one?
16:21 < mikeal> or is weld the new project?
16:21 < mikeal> plates i think it was called
16:32 < safani> hello
17:01 < MI6> joyent/libuv: Fedor Indutny v0.10 * ac4e7e7 : stream: fix small nit in select hack, add test - http://git.io/-IjSEA
17:13 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:43 < geNAZt> hi
17:43 < geNAZt> does someone know a good cloud hosting service for nodejs ?
18:26 < Bubo> Can someone help me with this -> https://pastee.org/t8d7t --> Whenever I press the button broadcasting  packet in the console but I don't know why it javascript doesn't append to the #messages div 
18:27 < Bubo> wherever I press the button it says broadcasting packet in the console*
18:28 < geNAZt> have you tried it with a second connection ?
18:28 < Bubo> No
18:28 < Bubo> Let me see
18:28 < Bubo> Ah, I see
18:29 < Bubo> geNAZt: the append works on the second connection. Isn't there a way to broadcast to everyone + the current user that is  pressing the button?
18:31 < geNAZt> io.sockets.emit
18:31 < geNAZt> boradcast only emits to everyone except you
18:33 < Bubo> thanks a lot
18:33 < GOMADWarrior> how do i remove debug messages?
18:34 < geNAZt> which debug messages ?
18:35 < GOMADWarrior> setting poll timeout, discarding transport
18:35 < geNAZt> from socket.io ?
18:35 < GOMADWarrior> yes
18:35 < geNAZt> there is a setting log level
18:35 < geNAZt> set it low
18:35 < geNAZt> to 2 or 1
18:36 < GOMADWarrior> it works!
18:58 < mkozjak> hi, guys
18:58 < geNAZt> ih
18:58 < geNAZt> hi*
18:59 < mkozjak> what do i need to use in order to get client's ip address which connects to my node.js tcp connection server?
18:59 < mkozjak> do i need socket.io?
18:59 < geNAZt> no
18:59 < mattmcclure> mkozjak: request.connection.remoteAddress
18:59 < geNAZt> its a tcp or a http connection ?
19:00 < mkozjak> tcp
19:00 < geNAZt> http://nodejs.org/api/net.html#net_socket_remoteaddress
19:01 < mkozjak> ok, confirmed, thanks :) gonna try
19:02 < mkozjak> wow, just beautiful :)
19:04 < hackedy> 5/leave
19:06 < mkozjak> geNAZt, mattmcclure: next question, if I may ask: i connect to the remote server with: clientSocket = net.createConnection(boxPort, ipaddr);
19:06 < geNAZt> yes
19:06 < mkozjak> if that server crashes and starts again, i receive no more data from it
19:07 < mkozjak> what should i catch here to handle that situation?
19:07 < geNAZt> yes because the connection is closed
19:07 < geNAZt> well in most cases a disconnect will lead to an error
19:07 < mkozjak> oh, so on close i should use a timeout function or something
19:07 < mkozjak> i got no errors, i guess some timeout is responsible for that..
19:07 < geNAZt> well the connection is gone so or so
19:08 < geNAZt> http://nodejs.org/api/net.html#net_event_close_1
19:08 < geNAZt> so i would listen on the close event
19:08 < geNAZt> if that happens reconnect
19:12 < mkozjak> right, thank yo!
19:12 < mkozjak> you*
19:20 < happyGilmorian> I'm writing a phone gap app and want to know is it possible using socket.io to have the client side socket.io.js stored on the phone and not served from the nodes server?
19:23 < ArchRogem> happyGilmorian: I can't see why not. 
19:24 < happyGilmorian> ArchRogem, i read somewhere that that socket.io.js for is rendered by the server. I mean generated by the server.
19:24 < ArchRogem> happyGilmorian: It's the same static file it serves everyone IIRC. You should be able to save it & store it locally.
19:25 < happyGilmorian> ArchRogem, awesome, thanks, I looked thru it. It seemed pretty generic. Just wanted to make sure thanks so much.
19:40 < RobW> Anyone here familiar with Yeoman?
19:45 < Bubo> What is the equivalent of Python's "return" in Node.js?
19:48 <@isaacbw> um
19:48 <@Nexxy> Bubo, what?
19:49 < sinclair-work> would anyone here be interested in reflection in nodejs?
19:51 < Bubo> Nexxy: example: you have an "if condition" in your app and if it is false stop executing the code
19:52 <@Nexxy> Bubo, that would be return
19:52 < Bubo> Oh. 
19:52 < Bubo> ok thanks, sorry for the dumb question
19:52 <@Nexxy> JS is the same in that regard
19:52 <@Nexxy> Bubo, don't apologise :P
19:52 <@Nexxy> you're allowed to learn lol
19:53 <@isaacbw> Bubo: virtually every procedural language has a return statement
19:53 <@Nexxy> and then there's ruby
19:53 < Bubo> yes but I wan't sure if it was "return" in js
19:53 <@isaacbw> oh ruby
19:53 <@isaacbw> ruby ruby
19:55 < TehShrike> isn't there a song about ruby?
19:55 < mscdex> i hope not
19:55 < dumbianca> kaiser chiefs - ruby
19:55 < TehShrike> that's the one
19:55 < Bubo> yeh
19:55 < mscdex> rancid - ruby soho
19:56 < TehShrike> http://youtu.be/qObzgUfCl28
19:57 < mscdex> meh kaiser chiefs
19:57 < RobW> I'm getting a "Failed to parse json Unexpected token }" error. Any suggestions? The package.json's brackets are all matched.
19:57 < mscdex> RobW: are you missing a key or value? e.g. { "foo" }
19:58 < RobW> I don't think so, but I'll check. Does the last item in an object require a trailing comma?
19:58 < mscdex> RobW: i don't think it matters for plain js, dunno about json
19:59 <@Nexxy> RobW, comma
19:59 <@Nexxy> perhaps?
19:59 < mscdex> comma chameleon
19:59 < mscdex> is hiding in your jsonz
20:00 <@isaacbw> I think a trailing comma will give an error
20:00 <@isaacbw> just paste your json
20:00 <@Nexxy> (into a paste service)
20:00 < mscdex> into a json linter!
20:00 <@Nexxy> ya, ST2 does that for me
20:01 < RobW> mscdex, Nexxy: It was commas, and they're not allowed.
20:02 < RobW> http://jsonformatter.curiousconcept.com/
20:02 < RobW> ^^ Awesome.
20:02 < RobW> Thanks for the help talking it through.
20:02 < RobW> isaacbw: Yep, thanks.
20:02 < JamesMGreene> If I have a large array of binary octets, is there any more efficient way to write it to a file than just using `fs.writeFile(filePath, new Buffer(octetArray), function(err) { ... });`?
20:03 < Bubo> so in this code http://puu.sh/2IgJw.png - if the "return" statement is triggered the code below it won't execute, right?
20:03 <@Nexxy> yep
20:03 <@Nexxy> oh, I see what you mean
20:03 < RobW> I would have thought that subl linter would lint json, but doesn't look like it does.
20:04 <@Nexxy> Bubo, the function in redisClient.smembers is a callback
20:04 < Bubo> Ah, I see my problem now Nexxy
20:04 < Bubo> But how would I fix this?
20:04 <@Nexxy> put the functionality into separate functions
20:04 <@Nexxy> and only call the continuation if the conditional is met within the callback
20:04 < Bubo> what do you mean?
20:05 <@isaacbw> Bubo: what's that color theme
20:05 < Bubo> I was thinking of wrapping my codei in "if-else" so if it's true do "client.emit('duplicatenick');" else the code below
20:05 <@Nexxy> but the code 'below' isn't actually below
20:06 < Bubo> isaacbw: it's the default sublime theme
20:07 < Bubo> Nexxy: http://puu.sh/2IgUS.png
20:07 <@isaacbw> oh
20:07 < JamesMGreene> isaacbw isaacs konobi mbalho Nexxy TooTallNate substack et al: If I have a large array of binary octets, is there any more efficient way to write it to a file than just using `fs.writeFile(filePath, new Buffer(octetArray), function(err) { ... });`?
20:08 <@TooTallNate> JamesMGreene: that seems like the most efficient way to me
20:08 < Bubo> Nexxy: should I leave the code like that or is that bad practises?
20:08 < Bubo> practices*
20:08 < JamesMGreene> e.g. is it better to loop through chunks of the array and make several buffers that get written via a WritableStream instead?
20:08 <@isaacbw> it depends on how big, but why not fs.open and then write each element directly
20:09 <@TooTallNate> JamesMGreene: i doubt it
20:09 < drewp> JamesMGreene: i'm working on a streaming write as we speak. And it's quite broken
20:09 <@Nexxy> Bubo, ah that makes sense
20:09 < JamesMGreene> isaacbw: Isn't that what fs.writeFile is going to do anyway?
20:09 < Bubo> great
20:09 < drewp> JamesMGreene: http://openetherpad.org/4Ors6alAPk
20:09 < JamesMGreene> The trouble is I can't write it out until I have all the data (have to verify the data integrity before overwriting its originating file)
20:09 < Bubo> btw, i'm falling in love with node's asynchronous philosophy
20:10 <@Nexxy> Bubo, also back to your original question, you can replace the else with a return inside the if
20:10 < JamesMGreene> basically it is a TransformStream that writes its output to the input file
20:10 < Bubo> Nexxy: what do you mean replace the else with return
20:10 < Bubo> ?
20:10 <@Nexxy> JamesMGreene, use a tmp file and then mv it to its original destination?
20:10 <@Nexxy> Bubo, can you paste the code to gisthub?
20:10 < Bubo> yes, sec
20:11 < JamesMGreene> Nexxy: Would that be more efficient? That would be fine
20:11 < Bubo> Nexxy: https://gist.github.com/Bubo1/398c5253293d7b515650
20:11 < JamesMGreene> I'd prefer to not keep this monster buffer around
20:13 <@Nexxy> Bubo, https://gist.github.com/nexxy/fb141e4af562a2a7a58d
20:14 < Bubo> Ah, put the whole code inside redisClient.smembers('chatters', function(err, names)
20:14 < Bubo> I see, Nexxy. thanks
20:14 < drewp> JamesMGreene: pipe to writable stream, right?
20:14 <@Nexxy> Bubo, either work :)
20:14 < JamesMGreene> drewp: Yeah
20:14 < drewp> (too bad it doesn't work)
20:15 < JamesMGreene> But there is a possibility that I won't need to write it out at all
20:15 < JamesMGreene> That's why I was hesitant to write to a tempfile before... extra file I/O can be mighty slow
20:16 < JamesMGreene> but keeping a big array/buffer in memory is also unpleasant
20:16 < drewp> why a tempfile? just stream it to the final place or don't process it at all
20:17 < JamesMGreene> output file = input file
20:17 < JamesMGreene> Can't reliably write out while reading, can I?
20:17 < drewp> possibly not, depending on what your transform is
20:18 <@Nexxy> just `npm install timemachine`
20:18 < JamesMGreene> Basically just chopping out particular character sequences
20:18 < Bubo> Ok so this means my simple chat app is finished. Any other "beginner" project that I can do to learn Node.js? give me some suggestions :)
20:19 <@Nexxy> Bubo, now you will have to write your own MVC framework
20:19 <@Nexxy> or promises api
20:19 < drewp> Bubo: my project, which already has an express server, needs to accept POST /print with contents that are svg, and those contents get piped into "inkscape --print=<svgfile>"
20:20 < JamesMGreene> TooTallNate: Any thoughts on the alternate approach of writing to a tempfile and then moving it?
20:20 < JamesMGreene> Will consume less memory, which is good
20:20 <@TooTallNate> JamesMGreene: only advice would be to try it and see :D
20:20 < Bubo> yeah, drewp, what? :D
20:20 <@TooTallNate> otherwise it's just guessing
20:20 < JamesMGreene> blargh :-P
20:20 < drewp> Bubo: https://github.com/drewp/gametag/blob/master/server/server.coffee
20:20 < Bubo> Nexxy: MVC framework? I am not that experienced
20:20 <@TooTallNate> :)
20:20 <@Nexxy> Bubo, oh good; I was being facetious anyway :P
20:21 < JamesMGreene> Well, I think I'll go for that approach... though in that case I maybe shouldn't gone with a real TransformStream after all
20:21 < drewp> Bubo: part of this: https://docs.google.com/file/d/0B4sWlxx7brBaZHZrM2RtbDQ3amc/edit?ups=drive_web
20:21 <@Nexxy> in node.js, everyone has their own pet MVC and control flow libraries
20:21 < JamesMGreene> Really don't plan on rewriting this yet again, though, so oh well
20:22 < Bubo> Nexxy: I know
20:22 < Bubo> Now suggest me something simple :P
20:22 <@Nexxy> Bubo, a chat bot?
20:23 <@Nexxy> for your new chat service?
20:23 <@Nexxy> it could keep you company
20:23 <@Nexxy> and sample #Node.js for funny & ironic things to say
20:23 < Bubo> Aww, no more loneliness!!
20:23 <@Nexxy> \o/
20:24 < howdynihao> thats the first step to building a femdroid
20:25 < Bubo> I have an irc bot in Python that I use a lot, so maybe I can port it to Node.js? I saw node-irc on github, it's really neat
20:26 < LouisT> Bubo: you should be able to
20:27 < Bubo> Or maybe expand my chat app to have "channels"? <<--- better idea
21:24 < gluxon> Bubo: Go for it.
21:38 < Bubo> Does anyone know a repo of a web based rpg game or something made in node? text-based not some html5 game
21:38 < niggler> lol Bubo 
21:40 < Bubo> niggler: no lol, I wanna read some code :D
21:40 < RLa> node mud?
21:41 < niggler> http://www.ranviermud.com/
21:41 < RLa> yeah, https://www.google.ee/search?q=node+mud
21:41 < RLa> "Did you mean: nude mud"
21:42 < niggler> wtf is ee
21:42 < RLa> Estonia
21:43 < RLa> hm, should have changed to .com
22:51 < sinclair-work> hey all
22:51 < sinclair-work> does anyone know the vm stuff well?
22:59 < hallas> best way to deploy my node apps?
22:59 < hallas> ec2?
22:59 < hallas> opinions please
23:11 < doug> okay, so my naive dir setup doesn't seem to please mocha out of the box
23:12 < doug> node_modules/mocha/bin/mocha app/test/server/account-manager-test.litcoffee
23:12 < doug> Error: Cannot find module '../app/server/modules/account-manager'
23:12 < doug> what's the Recommended Way to set up dirs for something like this?
23:24 < slakjfd> ..
23:27 < danneu1> hallas:  Heroku, Nodejitsu, and other similar paas hosts are easier than straight ec2
23:27 < hallas> im talking large scale cluster application
23:28 < hallas> I was a fan of jitsu early on, but i doubt it can handle my needs
23:28 < hallas> right now anyway
23:28 < juliangindi> hey
23:28 < hallas> just cant afford any issues with hosting at it is right now
23:28 < danneu1> gotcha
23:29 < deoxxa> hallas: if you're considering doing a large deployment, and you're asking questions like "where should i deploy node.js", perhaps your real question should be "where can i hire someone who knows how to manage a node.js deployment"
23:29 <@isaacbw> ;) 
23:30 < deoxxa> hallas: basically the actual infrastructure provider will be the least of your worries
23:30 < hallas> deoxxa i just want to make the right decisions early on, so that when the day comes that I have to hire that guy, its not a big issue moving to the right environment, but instead just setting up the right away
23:30 < korilo> helloo
23:31 < hallas> in reality, my biggest worries are probably solved by where I choose to host my mongodb (which I'm using mongohq for)
23:32 < hallas> I'm thinking ec2 instances with load balancing and then a replicate mongodb which ensures failover and scalability
23:32 < hallas> but it isnt a discussion ive had with anyone who knows more node than I do, and I'd like to be told what to do
23:34 <@isaacbw> it sounds like you're the perfect candidate for something like nodejitsu
23:35 < deoxxa> hallas: giving deployment advice is a bit like giving legal advice; it's a bad idea unless you're getting paid for it, because you're going to be held accountable for it if it's incorrect or if who you're talking to interprets it incorrectly. basically, if you want to do it right, you really should pay someone (even just part time) to do it for you. (and no, i'm not just trying to sell my own services here, i'm busy enough as is)
23:35 < hallas> alright gonna head over there and have a talk with them then
23:36 < hallas> deoxxa i see your point, however I'm not in a position where I can pin guilt on anyone other than myself if things do go wrong, nor am I interesting that ;)
23:36 < hallas> I wonna make my own decisions, I just need this discussion to make up my mind
23:37 < hallas> But I'm gonna follow isaacbw advice and talk with the professionals at jitsu
23:37 <@isaacbw> woo I win
23:37 < dresende> lol
23:37 < hallas> yay!
23:37  * TehShrike puts a tally-mark on the whiteboard next to isaacbw's nick
23:38 < TehShrike> you are now at -17 points!
23:38 <@isaacbw> ah well
23:38 < dresende> hallas: I agree with deoxxa, hiring a good deployment guy would probably be very important now
23:38 < dresende> you could switch provider very easily if you have a good deployment
23:39 < hallas> yeah, that is true
23:39 < dresende> no worries about if the current provider handles the future
23:39 < hallas> I'm in Copenhagen, Denmark, node professionals is a somewhat rarity
23:39 < deoxxa> yeah, hallas, the other side of the being held accountable coin is that if you pay someone to help out, you actually have a leg to stand on if you end up in a hole
23:39 < dresende> node professionals are rare everywhere :)
23:39 < hallas> hehe :D
23:40 < hallas> okay touché
23:41 < deoxxa> hallas: by all means, go experiment with deploying stuff - EC2 instances are really cheap to play around with - but if you're looking to make money out of whatever you're doing, you don't want to go cheap on the actual platform
23:41 <@isaacbw> ec2 can be dangerous if you don't know what you're doing
23:41 < dresende> yeah, it will bite
23:41 < dresende> :)
23:42 < hallas> right now it's just ec2 instances behind an nginx
23:42 < deoxxa> mmm
23:42 < deoxxa> ec2 is an interesting beast
23:42 <@isaacbw> er mah gerd joyent just got plugged on npr
23:43 < Itsahack> srs
23:45 < Itsahack> I'm trying to learn node js. I have knowledge of html, css, js,
23:45 < Itsahack> should I learn php, ruby, or node
23:46 < hallas> depends on what u want to do with your life
23:46 < Itsahack> make my life easy
23:47 < hallas> haha
23:48 < SrPx> Is it REALLY bad if I do something like: `global["_"] = require("underscore")`on my project (not a lib going to be released) so I don't have to re-include everything in every file ?
23:48 < Itsahack> need to get source code of website, replace a few tags, and 
23:48 < deoxxa> yes
23:48 < Itsahack> display changes in browser
23:48 < SrPx> It's becoming funny, 8 lines long files with 5 of just requires 
23:51 < Industrial> How do i test that this function hasnt been called? https://gist.github.com/Industrial/ba8fc9780ea92f198bc5#file-1-observer-test-js-L39
23:53 < OliverJAsh> i have an array of things i'm going to iterate over and do some work upon. i'm going to repeat this job every x minutes. rather than setting an interval and repeating the job, is there a better way to balance out the work load?
23:53 <@isaacbw> SrPx: then maybe you should stop making new files
23:53 < OliverJAsh> i'm using a message queue, but all i'm doing at the moment is, every 5 minutes add 100 jobs to the queue.
23:54 < kevireilly> SrPx: foo.js - module.exports = { fooModule: require('fooModule'), barModule: require('barModule') }; -- bar.js - foo = require('foo.js'); foo.fooModule.method(); foo.barModule.method();
23:57 < Industrial> Can I do this with mocha? beforeEach(function(done) {this.instance = new Observer();});
23:58 < Industrial> pass scope, but know it runs before each test asynchronously
23:58 < Industrial> that way, I wouldn't have to worry about repeating myself over and over, and tests become just branches of different input/objects to work with
23:59 < Industrial> if it'd pass scope, they could all run in parallel ..
--- Log closed Sun Apr 28 00:00:59 2013
