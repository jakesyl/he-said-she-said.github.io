--- Log opened Tue Dec 11 00:00:06 2012
--- Day changed Tue Dec 11 2012
00:00 < zomg> I doubt it unless it was installed without permission
00:00 < livinded> what's a telnet/ssh to irc proxy? They are different protocols?
00:01 < Hotroot> zomg: Installed without permission? 
00:01 < Hotroot> livinded: I mean so you could IRC through telnet or ssh
00:01 < zomg> Well I mean if you installed a proxy like that on some server where you don't have a permission to install such things it would probably be legally in a risky area =)
00:02 < Hotroot> You telnet to my server, select your irc server, then I'm the middleman that makes the commands simpler, auto PONG's, etc.
00:02 < Hotroot> zomg: Oh, no, I mean like making one that everybody could use
00:02 < Hotroot> Kind of pointless because of web clients, but I think it could be neat
00:03 < zomg> To be honest I think it would depend on your local laws
00:03 < zomg> It could be very different across the world
00:03 < zomg> Same as with this thing with open WLANs and piracy
00:03 < Hotroot> I mean I would obviously be willing to give up user info in case of an attack
00:03 < prawnsalad> hey guys. ive found myself in a less than ideal case here. i have a function that requires a return value, but this return value depends on an event callback first. is there some messy way to hold off returning from a function until something happens?
00:03 < Hotroot> This isn't like a VPN where I'm hiding pirates
00:04 < zomg> prawnsalad: not really no. you'd need to convert it into a callback based function as well
00:04 < othiym23> prawnsalad: have you looked at promises?
00:04 < othiym23> prawnsalad: https://github.com/kriskowal/q
00:04 < Hotroot> prawnsalad: Most of the time I've noticed with problems like that you're just working with a bad setup, and something could be written better
00:04 < zomg> Promises don't really fix it since in that case you'd need to change the consuming function into understanding the returned promise object =)
00:04 < prawnsalad> unfortunately i cant modify the fact that the fucntion requires a return value directly.. so this is looking impossible to do
00:05 < othiym23> it might require some reworking of your code (and yeah, running into this problem generally means you're not really thinking in async yet), but the result should be clean and easy to understand
00:09 < adz> Hello! I'm looking for a good ORM to use with Node.js that connects to MySQL and Mongo OR just MySQL 
00:11  * ehershey uncovers your pirates
00:14 -!- mode/#node.js [+o piscisaureus_] by ChanServ
00:33 < Industrial> Can I do Pub/Sub with EventEmitters? I have a list of EvemitEmitters (websites) and a router EventEmitter but I only need to pass each event from the router to one website, and I think it's fine if the message get's lost of no-ones listening. Can I do this without registering the website in the router?
00:59 < MI6> joyent/node: isaacs v0.8 * 92e92b0 : doc: Add nodejstr to community page - http://git.io/uD6-6A
01:03 < ravster> hello everyone
01:09 < Mikicacarica> http://fcasroma.blogspot.com/
01:12 < ravster> Is it fair to say that the connect.errorHandler should be called at the end?
01:13 < ravster> so 'app.use(connect.errorHandler);' (In Expressjs) should be at the end of all the other request handlers?
01:13 < _numbers> working on something i think is going to be pretty badass tonight
01:13 < ehershey> what's that?
01:14 < _numbers> a better alternative to async 
01:15 < _numbers> will link to github repo soon
01:15 < niggler> _numbers assync?
01:16 < _numbers> async.js
01:16 < niggler> aww gotta come up with a better name
01:17 < mscdex> badass.js
01:17 < that4chanwolf> Another vote for baddass.js
01:18 < mscdex> it sure beats asyncalternative.js
01:18 < mscdex> :-D
01:18 < drudge> .jssynca
01:19 < mscdex> asink.js
01:20 < _numbers> haha
01:20 < _numbers> i should have come here first when i was thinking of the name
01:21 < freewil> call it bathtub
01:21 < superjoe> how about sssss.js
01:21 < freewil> or nosync
01:21 < superjoe> damn that's actually clever
01:22 < superjoe> how about i_write_good_code_guys_trust_me.js
01:23 < mscdex> usyncbro.js
01:23 < niggler> what's going to be included in this library
01:23 < deoxxa> syncmethesongofyourpeople.js
01:25 < superjoe> nyas.js
01:25 < superjoe> get it?
01:25 < superjoe> as.jsync
01:25 < mscdex> it stands for new york async.js ?
01:25 < deoxxa> no, you are stupid
01:25 < superjoe> it's like a threading race condition
01:26 < niggler> where's the c
01:26 < superjoe> it's still processing
01:26 < superjoe> c
01:26 < mscdex> it's still buffered in memory
01:26 < superjoe> there it is!
01:31 < ppppaul> anyone here using capsela?
01:33 < deoxxa> ppppaul: omg are you talking about that awesome building toy?
01:34 < ppppaul> the webframework
01:34 < deoxxa> oh
01:34 < deoxxa> super lame
01:34 < ppppaul> built ontop of q
01:34 < deoxxa> http://en.wikipedia.org/wiki/Capsela this was amazing when i was a kid
01:35 < ppppaul> my impression of the nodejs community is pretty weak
01:35 < ppppaul> help make it better
01:35 < deoxxa> ppppaul: should i bring you something to eat?
01:35 < ppppaul> yes
01:35 < ppppaul> bring me some clojue
01:35 < ppppaul> clojure cp
01:35 < ppppaul> fuck
01:36 < ppppaul> typo hell
01:36  * deoxxa nods
01:36 < deoxxa> so far the nodejs community's impression of you is pretty weak
01:36 < deoxxa> help make it better
01:36 < ppppaul> awesome
01:36 < ppppaul> i'll grow 10 years younger, hold on a bit
01:37 < garbagecollectio> how do i invent a protocol
01:37  * ppppaul prepares alter to honour thy substack
01:37 < ppppaul> you invent a protocol via hard work
01:37 < niggler> garbagecollectio you just do it
01:37 < niggler> or wait for divine intervention
01:38 < niggler> or hold a seance and try to channel the spirit of ada lovelace
01:38 < garbagecollectio> i dont know anything about protocols
01:38 < ppppaul> a protocol is an interface
01:38 < ppppaul> you need to be more specific
01:38 < ppppaul> what is your use case?
01:39 < garbagecollectio> i dont kow
01:39 < garbagecollectio> get patents for the company
01:39 < ppppaul> then you are done
01:39 < garbagecollectio> whoi garbagecollectio
01:39 < garbagecollectio> whois garbagecollectio 
01:39 < garbagecollectio> i need some sort of malicious attack detection system
01:39 < ppppaul> great
01:39 < ppppaul> i do too
01:40 < niggler> trollocol
01:40 < ehershey> haha
01:40 < ehershey> assync the better alternative to async
01:41 < garbagecollectio> whats assync?
01:41 < ako> a bad joke
01:41 < niggler> the end of man's quest to find a better async library
01:41 < matbee> question, (i'm using nodejs Mongoose, maybe relevant) but I'm trying to get back a document where a specific value is found in the documents array.
01:41 < matbee> Any ideas?
01:42 < garbagecollectio> specific vallue is found in the documents array?
01:42 < garbagecollectio> what does that mean?
01:45 < garbagecollectio> do you think i can patent a method of detecting a
01:45 < garbagecollectio> packet's origin if it is using ssh tunnelling
01:45 <@Nexxy> why are you asking these questions?
01:47 < ppppaul> garbagecollectio, lets make a startup and burn some VC's money
01:47 < niggler> garbagecollectio's assignment is to win a pattent
01:47 < niggler> *patent
01:47 < niggler> the easiest way is to talk with someone at the PTO
01:47 < garbagecollectio> lol how do u think google works
01:47 < garbagecollectio> its up or out
01:47 < mscdex> parent-teacher organization!
01:47 < garbagecollectio> its not like sitting in ur pajamas all day on IRC
01:47 < garbagecollectio> "javascript"
01:48 < niggler> dont hate on pajamas
01:48 < ehershey> ++
01:53 < _numbers> how can i tell npm publish to refresh the readme file without bumping the version?
01:53 < othiym23> it might require some reworking of your code (and yeah, running into this problem generally means you're not really thinking in async yet), but the result should be clean and easy to understand~.
01:53 < niggler> _numbers npm publish --force
01:55 < _numbers> niggler: hm tried it twice but its not updating the readme.md. oh well
01:55 < niggler> sometimes it takes time
01:55 < chilts> _numbers: I'd just change the minor version number of your package. ie. x.y.z (the z in that)
01:56 < niggler> x.y.z-w
01:56 < _numbers> chilts: that worked
01:57 < MarkMSmith> Hey, are there any C++ / V8 experts around?  I could use some help with an Addon I'm working on
01:58 < chilts> heh, cool :)
01:59 < _numbers> lol then i tried to move verison back down, and `npm publish --force`, and it brought back the old readme 
01:59 < _numbers> guess i'll leave it bumped
02:03 < MarkMSmith> Anybody? :/
02:05 < dnnsmanace> i was wondering if someone could explain sessions in express for me :)
02:06 < qubit[01]> dnnsmanace, explain ?
02:06 < dnnsmanace> i am working with the tumblr api and am looking for advice for best practices for storing an oauth token, and how to refer to that token after a user does something in my app and i want to push it to tumblr
02:06 < _numbers> anyone using vert.x in here?
02:06 < qubit[01]> req.session.someVar = whateverYouWant;
02:07 < IzaakBloomberg> hi
02:07 < qubit[01]> mm oauth is  a PITA , but yeah, just store it in session
02:07 < IzaakBloomberg> can i ask to ask question?
02:08 < dnnsmanace> do i store the oauth token in a db, and then refer to it with session?
02:08 < IzaakBloomberg> can i ask to ask question?
02:08 < qubit[01]> IzaakBloomberg, no
02:08 < IzaakBloomberg> what can ask then
02:08 < dnnsmanace> qubit[01], what about if they leave the site and return, do i have to get a new oauth token or how do i know its them again? 
02:08 < samholmes> I expose an `on` remote method via dnode/shoe that attaches a client's method to server-side event emitter. This is fantastic, because no I can emit events on the server and have both the server and clients respond to those events. However, what potential memory leaks could this setup have?
02:09 < chilts> IzaakBloomberg: just ask your question
02:09 < chilts> :)
02:09 < dnnsmanace> oauth is a PITA :)
02:09 < IzaakBloomberg> chilts ok :)
02:09 < IzaakBloomberg> what is HOLOCAUST? and how to repeat it, fast ?
02:09 < IzaakBloomberg> need it asap
02:09 < chilts> hmm
02:10 < IzaakBloomberg> ?
02:10 < dnnsmanace> qubit[01], are sessions directly linked to the cookies in the browser? what http concept am i missing and should look up?
02:10 < IzaakBloomberg> anybody my question?
02:10 < qubit[01]> dnnsmanace, yeah, and I think they expire pretty rapidly - I think though, if the client allows your app access, and you go to prompt them again, then the oauth knows via some stored cookie and automatically grants access
02:10 < samholmes> If I don't manually remove listeners before the dnode/shoe connection ends, does this mean that the client's functions/callbacks remain in the emitter's array of listeners?
02:10 < IzaakBloomberg> How to became second Hitler?
02:11 < qubit[01]> dnnsmanace, I would just prompt them each time.  If its already granted, it will be pretty painless
02:11 < IzaakBloomberg> should i start with painting?
02:11 < IzaakBloomberg> what is good way to make meat from a jew?
02:11 < timeturner> !mod
02:11 < IzaakBloomberg> !ops timeturner
02:11 < timeturner> lol
02:11 < samholmes> IzaakBloomberg = troll
02:12 < qubit[01]> thats an assignment :P
02:12 < ako> lol
02:12 < timeturner> someone should make a bot troll
02:12 < samholmes> what's !ops
02:12 < timeturner> that would be cooler
02:12 < samholmes> and what's !mod
02:12 < pachet> #js triggers
02:13 < samholmes> Someone should make a bot troll that's an op, that would be _even_ cooler.
02:13 < dnnsmanace> qubit[01], do you think its possible to do oauth entirely on the client, as in return tokens to the client, and let the client POST data to api?
02:13 < samholmes> -op +mod
02:14 < qubit[01]> dnnsmanace, thats how I currently do it, storing the token is just too much of a PITA, what service in particular ?
02:14 < dnnsmanace> by client i mean the browser
02:14 < dnnsmanace> tumblr
02:14 < dnnsmanace> but isnt that poor security
02:16 < dnnsmanace> the rough app idea allows you to upload images to your tumblr through a form in your actual tumblr frontend, but only if you are authenticated
02:17 < samholmes> I keep forgetting that dnode depends on shoe (at least for browser clients), and I think this is why I have a hard time grasping what's going on with my code. What happens to a shoe connection when the browser load another page (leave, reloads, etc)?
02:17 < qubit[01]> dnnsmanace, yeah I would go entirely front end, I do the same for tweets and facebook posts
02:18 < samholmes> shoe provides a streaming interface to sockjs, but what happens to the stream if a connection is lost?
02:18 < dnnsmanace> do you use some kind of js oauth library for that? also does this cause XMLHttpRequest problems
02:18 < qubit[01]> samholmes, Im completely guessing - but maybe after a time of inactivity it gets flushed ?
02:19 < samholmes> qubit[01]: On the server you mean?
02:19 < qubit[01]> samholmes, yes but thats a complete guess so dont take my word for it
02:19 < samholmes> I would guess that too
02:20 < samholmes> but what does flushing mean exactly
02:20 < qubit[01]> dnnsmanace, yes in particular this thing https://developers.facebook.com/docs/reference/javascript/FB.init/
02:20 < samholmes> the remote object for the client held in memory on the server gets GC'd
02:20 < qubit[01]> samholmes, deleted, memory freed, removed from queue
02:20 < samholmes> qubit[01]: ^
02:20 < samholmes> Right
02:21 < samholmes> But, what if I were to use the client's object in other places on my server, it'll retain in memory.
02:21 < qubit[01]> samholmes, hmm yes, and I dont know of any good memory profilers for node just yet, someone else might though
02:22 < samholmes> For example, let's say the client gives the server's remote a callback function, the server hold that callback function indefinitely (it registers it to an event emitter), when the client's connection ends, the server will GC the client's object and all remote functions invovled, but because one of the functions are bound to an emitter, that function remains in memory
02:22 < pachet> v8-profiler is pretty good
02:22 < samholmes> holds*
02:24 < MarkMSmith> Does anyone here have experience with making C++ Addons for Node?
02:25 < deoxxa> samholmes: weakmaps are meant to fix that - though i'm not sure they'll ever be used for eventemitter
02:25 < niggler> MarkMSmith what are you trying to do
02:25 < samholmes> deoxxa: weakmaps, the wat?
02:25 < MarkMSmith> I'm creating an interface to expose the controller and it's callbacks for a Leap Motion (www.leapmotion.com)
02:25 < deoxxa> samholmes: the google can tell you better than i can
02:26 < qubit[01]> samholmes, http://en.wikipedia.org/wiki/Weak_reference
02:26 < samholmes> gO.Ogle?
02:26 < pachet> samholmes: it's a harmony feature
02:26 < MarkMSmith> I've setup the appropriate uv_async_send() etc
02:26 < MarkMSmith> but I think I'm doing something wrong with the memory management
02:26 < pachet> samholmes: you can play around with them by starting node with the --harmony flag
02:26 < MarkMSmith> since it either hangs or segfaults after a few seconds of events
02:26 < MarkMSmith> niggler: Here's my code: https://github.com/markmsmith/LeapNode
02:27 < MarkMSmith> niggler: most of the action is in this file: https://github.com/markmsmith/LeapNode/blob/master/NodeListener.cc
02:31 < pachet> MarkMSmith: give this a try yet? https://github.com/ddopson/node-segfault-handler
02:31 < MarkMSmith> pachet: No, I hadn't seen that before, thanks
02:32 < niggler> that looks far easier than digging through dmesg
02:36 < MarkMSmith> I've cloned that project and done node-waf configure && node-waf
02:36 < _numbers> ok here's my async alternative for anyone who's shopping https://github.com/mikesmullin/async2
02:36 < MarkMSmith> what's the easiest way to add it to my project?
02:36 < MarkMSmith> do I just need the .node file from the build folder?
02:38 < drudge> oh i see coffee, gave up _numbers
02:40 < niggler> coffee is as much a nonstarter as a facebook login
02:40 < _numbers> lol lame. its still as succinct in .js. in fact its backward-compatible with async.js
02:40 < _numbers> i havent benched yet but i bet my implementation is faster too 
02:42 < pachet> MarkMSmith: i haven't poked around in your code very much, but presumably you'd just require that module from your js entrypoint
02:42 < pachet> hello_leap.js, from the looks of it
02:43 < MarkMSmith> packet: yeah, that's what I'm trying
02:43 < pachet> also lower priority, but consider reading up on gyp instead of waf for builds
02:44 < pachet> </soapbox>
02:46 < deoxxa> > coffeescript
02:46 < deoxxa> lol
02:46 < MarkMSmith> my stuff is gyp
02:46 < MarkMSmith> the segfault one is waf
02:47 < MarkMSmith> looks like they don't play nicely
02:47 < MarkMSmith> packet: I added this to the top - var segvhandler = require('../node-segfault-handler/build/Release/segvhandler_native.node'); segvhandler.registerHandler();
02:47 < niggler> MarkMSmith i imagine the thing just attaches a signal handler
02:47 < MarkMSmith> but I get this error
02:47 < MarkMSmith> module.js:485   process.dlopen(filename, module.exports);           ^ Error: dlopen(/Users/msmith/projects/Leap/markmsmith/node-segfault-handler/build/Release/segvhandler_native.node, 1): no suitable image found.  Did find: 	/Users/msmith/projects/Leap/markmsmith/node-segfault-handler/build/Release/segvhandler_native.node: mach-o, but wrong architecture
02:47 < MarkMSmith> (I'm on Mac OS X 10.8.6)
02:47 < niggler> why not just write it yourself?  signal(SIGSEGV, handler) and have the handler run a stack trace
02:48 < niggler> oh MarkMSmith waf is broken
02:48 < niggler> problem is that it uses the binary to figure out what type is needed
02:48 < niggler> but the node binary from the distro is fat iirc
02:49 < samholmes> So a weak references is when an object gets GC'd if the original instance or pointer is deleted?
02:50 < MarkMSmith> niggler: I'm not sure how to do the stacktrace from the handler
02:50 < MarkMSmith> I'm very rusty on C++
02:50 < MarkMSmith> I use Java/Groovy in my day job
02:50 < deoxxa> my condolences
02:52 < niggler> backtrace is the function
02:54 < niggler> MarkMSmith you said you are on mac right?
02:54 < niggler> man 3 backtrace
02:55 < MarkMSmith> niggler: yup
02:56 < MarkMSmith> I got the other guy's thing working by writing a binding.gyp for it
02:57 < MarkMSmith> sadly, the stack trace isn't very helpful
02:57 < MarkMSmith> PID 6717 received SIGSEGV for address: 0xf 0   segvhandler.node                    0x00000001009f1c0b _ZL16segfault_handleriP9__siginfoPv + 193 1   libSystem.B.dylib                   0x00007fff864611ba _sigtramp + 26 2   ???                                 0x00007fff5fbfe878 0x0 + 140734799800440 3   node                                0x00000001000445ad uv_run + 20 4   node                                0x0000000100007969 _ZN
02:58 < qubit[01]> yeesh, good a good debugger asap
02:58 < MarkMSmith> I don't appear to have the objdump program installed
02:59 < pachet> samholmes: eh, kind of
02:59 < niggler> otool
02:59 < samholmes> pachet: Idk. :(
02:59 < samholmes> D;
02:59 < pachet> samholmes: imagining weak refs in javascript is kind of iffy
02:59 < pachet> but think of it like having an object
02:59 < niggler> objdump is linux, otool is osx
02:59 < pachet> where the object is your heap
02:59 < pachet> and you can assign a property on that object, and we'll call it a weak reference
03:00 < pachet> now you can do whatever you want to that property, but there's no guarantee that the runtime won't deallocate it between reads
03:01 < samholmes> heap?
03:02 < MarkMSmith> pachet: I'm not really sure what to point otool at, based on that stacktrace.  Any suggestions?
03:11 < pachet> MarkMSmith: oh im not sure, my mac debug foo isn't strong, not sure what flags to pass to otool to do section checks
03:12 < pachet> MarkMSmith: tangential question, have you tried building as debug with gyp?
03:12 < pachet> the stack traces should be a little saner to pick through
03:13 < MarkMSmith> I was actually trying to figure out how
03:13 < pachet> pass the --debug flag to node-gyp
03:16 < MarkMSmith> pachet: it seems to just hang instead of segfaulting with the debug version
03:18 < sayd> whats a good approach to creating a widget that will be client-only? something that would load the google reader api and show a few article headlines
03:20 < JohnnyL> do you guys usually use webworkers for multicore attribution?
03:20 < sayd> the scaffolding is what im mostly curious about
03:20 < atula> man I am having such a tough time understanding the concept of node.js and connecting to rabbitmq.
03:26 < rojuinex> In the documentation it says that there are 3 ways to pass a directory to require, but the documentation only explains 2.  I'm wondering if anyone knows what the thrid way? (the first being using a package.json and setting main = to the main module.  the second, node looking for index.js and index.node)
03:29 < sayd> rojuinex: i think the third is pointing directly to the file
03:29 < sayd> require('./lib/foo')
03:30 < samholmes> substack: I'm starting to understand dnode a little bit more every day (excuse me if it's taking longer than the average for me to understand). However, I have a question for you (I'd figure I'd direct it at you because you're the one that created dnode, if that's alright). Is it pointless to have a d.on('remote') or d.on('local') if you already have a callback provided to dnode()?
03:30 < sayd> where lib.foo uses exports (i haven't learned the intricies of that yet)
03:32 < substack> samholmes: dnode(fn) and dnode().on('remote', fn) do different things
03:32 < MarkMSmith> pachet: I got it to segfault again with the debug build, but it doesn't seem any different: PID 7432 received SIGSEGV for address: 0xd 0   segvhandler.node                    0x00000001009f1c0b _ZL16segfault_handleriP9__siginfoPv + 193 1   libSystem.B.dylib                   0x00007fff864611ba _sigtramp + 26 2   ???                                 0x00007fff5fbfe878 0x0 + 140734799800440 3   node                                0
03:41 < MarkMSmith> pachet: are you still around?
03:48 < samholmes> substack: dnode(fn) makes fn the constructor for the remote object. dnode().on('remote', fn) make fn the callback to the event 'remote' which fires when the remote has finished connecting. Right?
03:49 < rking> What are some nice tools for DRY'ing up server- and client-side form validation?
03:49 < substack> samholmes: yep
03:50 < samholmes> substack: but my question is, do you need both? Or will one or the other suffice?
03:51 < substack> samholmes: that depends on what you need to do
03:52 < substack> one creates a ref for the other side and the other consumes the remote's ref
03:53 < samholmes> substack: now that I think more about it, it seems like dnode().on('remote') isn't very useful when using shoe, because dnode() is called everytime a shoe connection (stream) is created, there's only one remote per dnode() call, therefore, only one firing of the 'remote' event.
03:53 < samholmes> Correct?
03:56 < Zak> hi, is there an in-built function to extract  a file extension from a file?
03:56 < samholmes> Oh I see. remote event is fired when dnode gets the remote's object. While, dnode(fn) calls fn before _anything_, it's like the first thing dnode does.
03:57 < petersed> Is it possible to get data from a PUT request the same way as from a POST request?
03:57 < Zak> ah, nevermind, i found it in the path module. thanks
04:00 < rking> petersed: Should all come in on the params hash
04:00 < rking> petersed: Just have the actions run common code.
04:00 < samholmes> substack: now my question is about dnode().on('local'); What's the point of having an event when the local object is ready? You already have dnode() which prepares the local object, why would you need dnode().on('local')?
04:00 < rking> Oh hi I'm on #node.js
04:00 < rking> Forgive me. Speaking Rails. ☺
04:04 < substack> samholmes: so you can modify the ref
04:04 < samholmes> But, can't you do that in the callback to dnode()?
04:11 < samholmes> substack: You can modify the local?
04:12  * samholmes is confused about all this dnode stuff again.
04:12 < samholmes> Can you modify the local ref on the server after the connection has been established?
04:15 < samholmes> Man this is kinda frustrating.
04:15 < samholmes> After the constructor triggers, I can't modify the server's reference?
04:26 < samholmes> my brain hurts.
04:29 < timeturner> why
04:29 < substack> samholmes: only on the same tick
04:31 < substack> >> var xs=[1,2,3,4,5,6]; xs.every(function (x) { return xs.every(function (p) { return (Math.pow(x,p) - x) % p === 0 }) })
04:31 < purr> substack: (boolean) false
04:31 < substack> hmmm
04:32 < niggler> lol substack 2^6 = 64
04:32 < niggler> fermat's theorem only works for primes
04:32 < substack> aha
04:32 < substack> silly internet video left that part out
04:32 < niggler> carmichael's theorem is really interesting btw
04:33 < niggler> its this really cool and annoying corner case
04:33 < substack> oh it did mention that part
04:33 < niggler> so you have numbers like 561
04:34 < niggler> for each number x relatively prime to 561, x^560 === 1 mod 561
04:34 < niggler> substack you learning number theory via video?
04:35 < substack> http://www.youtube.com/user/numberphile
04:35 < niggler> http://www.amazon.com/Proofs-that-Really-Count-Combinatorial/dp/0883853337
04:36 < garbagecollectio> how can people program so much
04:37 < garbagecollectio> its exhausting
04:37 < styol> it requires magic skills and sorcery, for the most part
04:37 < niggler> why would a length prefixed string need to be null terminated
04:49 < garbagecollectio> dart?
04:50 < garbagecollectio> http://news.dartlang.org/2012/12/dart-vm-improves-performance-by-50.html
04:52 < JohnnyL> anyone of you know if there is a node.js wanted ads site?
04:55 < niggler> which way JohnnyL you looking for people or work
04:56 < JohnnyL> work
04:57 < niggler> i thought nodejs.org had a job forum
04:58 < gkatsev> http://jobs.nodejs.org
04:59 < JohnnyL> oh right i have been on that.
04:59 < JohnnyL> no one for 50 miles.
05:01 < garbagecollectio> http://chadaustin.me/2012/12/javascript-new-operator-ecma-262/
05:03 < chovy> JohnnyL: you looking for node.js jobs?
05:04 < JohnnyL> chovy: well, one would be enough.
05:04 < TehShrike|Home> lol
05:04 < TehShrike|Home> I know of some jobs in Lincoln, NE :-)
05:04 < chovy> JohnnyL: http://pipes.yahoo.com/pipes/pipe.info?_id=57f7d43224a49f0108b3d08d3f33efb7
05:05 < chovy> just clone it and update the zip code
05:05 < chovy> in the feeds
05:05 < garbagecollectio> no one has a job
05:05 < garbagecollectio> in programming
05:05 < garbagecollectio> its difficult
05:05 < garbagecollectio> the whole boom is a lie
05:05 < niggler> that's a really clever site
05:06 < garbagecollectio> and all the new york startups are bullshit
05:06 < TehShrike|Home> Well, it's hard to find good programmers where I am
05:06 < jalcine> garbagecollectio: hey hey not true
05:06 < TehShrike|Home> If you were a good programmer I think you could get a job quickly here
05:06 < freewil> i live in detroit and programming jobs are abundant
05:06 < garbagecollectio> what does that mean "good"
05:06 < garbagecollectio> i think the other people ar ebad
05:06 < garbagecollectio> ar ebad
05:06 < TehShrike|Home> Their commits reduce technical debt rather than increase it
05:06 < garbagecollectio> the people judging me
05:06 < niggler> garbagecollectio do you have a code sample?
05:07 < garbagecollectio> yeah
05:07 < garbagecollectio> i will send to you
05:07 < TehShrike|Home> No gist?
05:07 < jalcine> NY startups aren't bad at all
05:07 < garbagecollectio> well
05:07 < garbagecollectio> ny startups are fake
05:07 < jalcine> name one
05:07 < JohnnyL> not a very well done reusable pipe.
05:07 < garbagecollectio> sailthru is a fake startup
05:07 < jalcine> is it because you couldn't get a job here?
05:08 < jalcine> How can a startup be fake?
05:08 < garbagecollectio> its because their interview is bullshit
05:08 < garbagecollectio> because they arnet like actually developers
05:08 < garbagecollectio> they are businessman
05:08 < garbagecollectio> who became dev
05:08 < garbagecollectio> devs
05:08 < garbagecollectio> and arent smart ones at all
05:08 < chovy> JohnnyL: yeah, building the feed urls w/ zip as an input is a pita.
05:08 < garbagecollectio> and they seem to be totally amateurish
05:08 < jalcine> Wow, so you had one bad experience and you generalize all of New York
05:08 < jalcine> all 8 million people
05:08 < JohnnyL> nope, not even that. just bozos with ideas that have no money.
05:08 < chovy> i just hacked it for myself anyway. But you can modify it w/ your zip
05:08 < JohnnyL> <--lievs in ny
05:08 < JohnnyL> lives
05:08 < jalcine> such a flexible open minded developer
05:08 < jalcine> JohnnyL: me too, in Brooklyn
05:08 < JohnnyL> jalcine, ah cool.
05:09 < JohnnyL> i used to work for morredit.com in brooklyn.
05:09 < JohnnyL> opps.
05:09 < jalcine> lol
05:09 < JohnnyL> python stuff
05:09 < niggler> lol
05:09 < garbagecollectio> that sounds like a fake startup
05:09 < JohnnyL> remote 
05:09 < niggler> all startups are fake
05:09 < niggler> you fake it till you make it
05:09 < gkatsev> all companies are fake.
05:09 <@Nexxy> stop trolling each other
05:09 < jalcine> Here we go
05:09 < TehShrike|Home> IT'S ALL IN YOUR HEAD NEXXY
05:09 < jalcine> lol
05:09 < gkatsev> nothing is real. The cake is a lie!
05:10 < garbagecollectio> im from new york and am a fucking brilliant visionary who cant get a job
05:10 < timeturner> irc is fake
05:10 < garbagecollectio> cause they are fucking retarded
05:10 < TehShrike|Home> lol
05:10 -!- garbagecollectio was kicked from #Node.js by Nexxy [garbagecollectio]
05:10 < timeturner> it's all an elaborate deception
05:10 < garbagecollectio> additionally, i live in philly now
05:10 < timeturner> or..... inception
05:10 < garbagecollectio> and im stuck here
05:10 < TehShrike|Home> Oh come on Nexxy
05:10 < gkatsev> JohnnyL: what's morredit?
05:10 < TehShrike|Home> A kick without even a tiny +b is just teasing!
05:10 < jalcine> garbagecollectio: what's your background?
05:10 < garbagecollectio> jalcine: what startup are you at?
05:11 < garbagecollectio> top 10 school
05:11 < TehShrike|Home> lol
05:11 < garbagecollectio> run fortune 50
05:11 < JohnnyL> gkatsev: it's a company that has been obfuscated from google.com
05:11 < jalcine> An educational technology startup.
05:11 < garbagecollectio> dev team
05:11 < jalcine> schools don't matter too much
05:11 < garbagecollectio> not run
05:11 < garbagecollectio> but lead js dev
05:11 < garbagecollectio> and node.js dev
05:11 < jalcine> just about how you go about things.
05:11 < garbagecollectio> on a customer base of 20 million
05:11 < garbagecollectio> and over 20 billion views a month
05:11 < gkatsev> JohnnyL: well, morredit.com doesn't exist :/
05:11 < jalcine> joyent?
05:11 < niggler> garbagecollectio my guess is that you are a B player who thinks he's an A player.  You are looking for the rockstar treatment that is afforded to the best and brightest
05:11 < timeturner> inception(inception(inception(inception(err, function(kick) { upOneLevel() }))))
05:11 < TehShrike|Home> Check the chat logs for questions from garbagecollectio
05:11 < JohnnyL> gkatsev: who are you, God?
05:11 < niggler> sometimes it helps to take a step back and do a self-appraisal
05:11 < jalcine> niggler: same here
05:11 < garbagecollectio> niggler: i am the best and brightest though according to everyone i come across
05:12 < niggler> eboy is god
05:12 < timeturner> upOneLevel(kick); *
05:12 < garbagecollectio> niggler: the only guy who is better is this guy at cloudera
05:12 < niggler> garbagecollectio lol that's a dangerous path
05:12 < gkatsev> JohnnyL: http://isup.me/morredit.com
05:12 < JohnnyL> i guess node.js is a young science.
05:12 < jalcine> garbagecollectio: moms are supposed to say that to their children
05:12 < jalcine> no offense
05:12 < jalcine> no one's pigheaded enough to gloat about something like that
05:12 < JohnnyL> "I think the students like it , when I get 'down' verbally" -Professor from Real Genius.
05:12 < jalcine> the smartest people I've met are humble
05:12 < niggler> nono its like this jalcine
05:12 < garbagecollectio> niggler: not according to them, but when i meet them
05:12 < garbagecollectio> im better
05:12 < niggler> i fully understand what garbagecollectio is going through
05:12 < garbagecollectio> more knowledable
05:13 < niggler> in college, especially at top schools
05:13 < garbagecollectio> if the basis is knowledge, i am significant higher
05:13 < niggler> most people there are at the top of their respective local schools
05:13 < jalcine> Like you know the content already?
05:13 < garbagecollectio> huh
05:13 < cjheath> Quick question from a node newbie. What file does line 6 here actually load? https://github.com/naltatis/jade/blob/master/examples/attributes.js
05:13 < niggler> everyone was the top of their high school
05:13 < garbagecollectio> jalcine, where do you work? General Assembly? Schoology, Skillshare?
05:13 < niggler> now you are in college with a bunch of other people who were at the top of theier high school
05:13 < jalcine> garbagecollectio: none of those
05:13 < garbagecollectio> im out of college
05:13 < jalcine> and I'm not going to disclose that.
05:14 < garbagecollectio> and in college i was top too
05:14 < garbagecollectio> in philosophy
05:14 < timeturner> cjheath: jade (in this case it is located at './../' on the dev's machine)
05:14 < timeturner> isn't great for examples imo
05:14 < cjheath> How does require know what filename to load?
05:14 < niggler> but you don't know what the rest of the world considers 'top' until you have more exposure
05:14 < timeturner> should probably just have require('jade')
05:14 < niggler> cjheath its specified in the node docs
05:14 < JohnnyL> i recall node.js when it didn't have sharks.
05:14 < jalcine> niggler: indeedy
05:14 < JohnnyL> #node.js
05:14 < garbagecollectio> niggler, i am the top dev in philadelphia i am just not open source
05:15 < garbagecollectio> thats the issue i think
05:15 < cjheath> niggler: is that the "package.json"?
05:15 < garbagecollectio> im in a corproate envornment/closed source
05:15 < niggler> no it has nothing to do with open source and closed source
05:15 < garbagecollectio> i think it does
05:15 < garbagecollectio> its a style
05:15 < garbagecollectio> i think its stylistic
05:15 < timeturner> cjheath: actually no, that's right. within the repo the location is correct
05:15 < niggler> cjheath http://nodejs.org/docs/latest/api/modules.html#modules_modules
05:15 < jalcine> It really isn't about the open or closed source nature of code.
05:15 < niggler> there's a thing that says 'All Together...'
05:15 < niggler> search for that
05:15 < jalcine> It isn't probably about the code.
05:15 < cjheath> Sorry, I'm trying to convert a js module into a node module
05:15 < garbagecollectio> jalcine: u have no idea, so stop speculating
05:16 < garbagecollectio> jalcine: what do you work on?
05:16 < jalcine> Of course not.
05:16 < jalcine> What would I know?
05:16 < jalcine> Why does it matter so much?
05:16 < garbagecollectio> jalcine: what are ur specialities?
05:16 < niggler> garbagecollectio do you understand x86 assembly?
05:16 < garbagecollectio> how long have u been devleoping
05:16 < garbagecollectio> no i dont, but thats hardly relevant niggler
05:16 < niggler> are you competent in C or C++ or javascript?
05:16 < cjheath> Wow, is this room always a pissing match?
05:16 < garbagecollectio> yes
05:16 < jalcine> cjheath: It wasn't supposed to be :(
05:16 < niggler> which one?
05:17 < garbagecollectio> javascript
05:17 < niggler> cjheath its an intervention of sorts
05:17 < garbagecollectio> jalcine: what do u do?
05:17 < jalcine> I'm an software artitechet and engineer.
05:17 < garbagecollectio> jalcine: i know what u do, you took "dev" classes somewhere in the last 2 years
05:17 < garbagecollectio> ur an architect who can not spell your job title
05:17 < jalcine> I worked at Google for a year when I was 16 as a backend engineer for Google Maps here in the city.
05:17 < jalcine> No, my frustation with your "ego" is killing my spell check
05:17 < garbagecollectio> and how long ago was that?
05:18 < jalcine> 3 years ago
05:18 < niggler> given that this is on a computer, there's no way to restrict google access, but try to answer from memory if possible
05:18 < garbagecollectio> in what building?
05:18 < TehShrike|Home> See, this is where a +b/kick from Nexxy would seem appropriate
05:18 < cjheath> So I still dont have an answer for my original question, which is that when you require a directory, what file does the module loader look at first, to see what to load?
05:18 < cjheath> is it the package.json?
05:18 < jalcine> Should I provide you with coordinates?
05:18 < niggler> garbagecollectio what are the >>>= and <<<= operator
05:18 < garbagecollectio> so your 19 but u work at a startup?
05:18 < niggler> cjheath depends on what you are requiring
05:18 < freewil> cjheath, index.js by default or what is specified in package.json
05:18 < jalcine> oi, I'm just going follow niggler and ignore
05:19 < TehShrike|Home> cjheath: http://nodejs.org/api/modules.html
05:19 < garbagecollectio> and worked at google in maps right when they came to the city, even though there are very few google software engineers in the city
05:19 < cjheath> ok, thx. I added an index.js but have no package.json, so presumably tat;s the problem
05:19 < JohnnyL> don't feed their energy.
05:19 < cjheath> I'm converting this to work as a node module: https://github.com/cjheath/semper
05:19 < garbagecollectio> niggler:  that is not valid
05:19 < cjheath> Thanks all
05:19 < niggler> what is not valid?
05:19 < JohnnyL> they are obviously children with keyboard and daddys kind networking skils.
05:20 < Guest48052> hello, i was wondering if there was some way (or resource) on how to configure a persistent/permanent connection between nodejs and my server?
05:20 < garbagecollectio> thats not an operator
05:20 < niggler> what's not an operator
05:20 < dnz-> the biotch on the phone
05:20 < dnz-> when you dial 0
05:20 < dnz-> shes like hello operator
05:20 < dnz-> im like
05:20 < niggler> >>> var x = 3; x >>>= 1; x
05:20 < purr> niggler: (number) 1
05:20 < garbagecollectio> >>>= is not an operator in javascript
05:20 < purr> garbagecollectio: SyntaxError: Unexpected token =
05:20 < niggler> >>> var x = 3; x >>>= 1; x @ garbagecollectio
05:20 < jalcine> lmfao dnz-
05:20 < purr> garbagecollectio: (number) 1
05:20 < niggler> lol
05:21 < niggler> garbagecollectio >>>= is an operator, <<<= is not
05:21 < freewil> this channel has really gone downhill since the bot war
05:21 < garbagecollectio> niggler:  yes thats what i meant
05:21 < niggler> see, different people have different definitions of competency
05:21 < garbagecollectio> that is not an actual 
05:21 < garbagecollectio> valid dev quesiton
05:21 < garbagecollectio> some random thing no one uses amongst the body of computing knowlege?
05:21 < niggler> and for me, knowledge of operators seems like something very basic
05:21 < garbagecollectio> that is not a valid operator
05:21 < garbagecollectio> no one uses >>>=
05:22 < garbagecollectio> point me to an example on the itnernet where this is used
05:22 < JohnnyL> may kharma reach this room with expediency.
05:22 < niggler> there are a lot of things that people don't use every day but are part of the language
05:23 < niggler> a lot of people don't ever see bit twiddling in their programming lives
05:23 < TehShrike|Home> Since I've learned about it, the || and && behavior has actually been quite useful to me :-x
05:23 < niggler> that isn't an excuse to not know about it
05:23 < niggler> || and && are boolean TehShrike|Home
05:23 < niggler> you mean | & and ^
05:23 < purr> niggler: SyntaxError: Unexpected identifier
05:23 < freewil> heys stop waving your operator dicks around and build something
05:23 < gkatsev> http://symbolhound.com/?q=>>>%3D
05:23 < garbagecollectio> niggler: show me an example
05:23 < TehShrike|Home> niggler: nope
05:24 < TehShrike|Home> niggler: || and && don't return booleans
05:24 < garbagecollectio> niggler: see this is what im talking about, that is some weird thing, its not anywhere on google 
05:24 < niggler> TehShrike|Home what i mean is
05:24 < TehShrike|Home> They return the first truthy/false (respectively) values
05:24 < garbagecollectio> niggler: u just lost a good hire
05:24 < niggler> >>> 3 | 5 @ TehShrike|Home
05:24 < purr> TehShrike|Home: (number) 7
05:24 < TehShrike|Home> >> 0 || 3 || 2 @ niggler
05:24 < purr> niggler: (number) 3
05:24 < niggler> yeah TehShrike|Home it has a different meaning
05:25 < garbagecollectio> niggler: u just got fired it looks like
05:25 < niggler> 3 | 5 is bit-OR
05:25 < TehShrike|Home> niggler: I'm talking about the return type of || and &&
05:25 < TehShrike|Home> Nothing to do with bitwise operations
05:25 < TehShrike|Home> In many other languages, || and && return booleans
05:25 < garbagecollectio> exactly TehShrike|Home 
05:25 < niggler> the statement "|| and && are boolean" doesnt mean that it returns boolean
05:25 < TehShrike|Home> I was surprised when I learned that this was not the case in JavaScript
05:25 < garbagecollectio> wow i guess niggler shouldnt be employd
05:25 < garbagecollectio> cause he didnt know that
05:25 < garbagecollectio> by his logic
05:25 < TehShrike|Home> But since learning that, it has actually been a useful feature to me
05:26 < TehShrike|Home> That is the only point I was making
05:26 < TehShrike|Home> Nothing to do with bitwise operations
05:26 < niggler> that's also something you can do in many languages like bash-shell
05:27 < niggler> garbagecollectio there's a subtlety in language as well as in coding, where carelessness leads to misinterpretation and problems
05:28 < livinded> is there a better way to run bins installed as local modules that addding ./node_modules/.bin to PATH or just running ./node_modules/.bin/<bin>?
05:29 < niggler> livinded any reason they are local?
05:29 < livinded> they don't need to be global
05:29 < niggler> there's a way using the package.json
05:30 < livinded> I'd let each project manage it's own modules and not tie certain things to a specific version globally installed
05:30 < livinded> rather let*
05:31 < niggler> if you stuck the command in package.json under scripts then you can run it
05:31 < niggler> npm run-script
05:31 < livinded> that seems like a lot of work to manage
05:32 < livinded> is there a reason why npm doesn't have a way to run bins installed from modules within the context of ./node_modules?
05:35 < garbagecollectio> do u think if i have had like 6 interviews and not getting anything theres a problem
05:36 < livinded> garbagecollectio: 6 interviews at different companies?
05:36 < garbagecollectio> ya
05:36 < livinded> have they told you anything?
05:36 < garbagecollectio> yeah
05:36 < livinded> what have they said?
05:36 < niggler> its possible that all 6 companies are sketchy, but most likely none of them wanted you
05:36 < garbagecollectio> either bad code, dont know enough about the stack, not the right fit, all sorts of shit
05:36 < garbagecollectio> but its bullshit
05:36 < TehShrike|Home> Youdaman: I'm going through my chat logs for things garbagecollectio has said
05:37 < TehShrike|Home> Youdaman: and I would just like to say, I appreciate you and respect your self-control
05:37 < livinded> garbagecollectio: what's bullshit about it?
05:37 < garbagecollectio> because the epoipe interviewing know less about these things than i do
05:37 < TehShrike|Home> I think you are a better man than myself
05:37 < garbagecollectio> i send a module pattern code sample in js
05:37 < garbagecollectio> they dont know what it is, to them its bad code
05:38 < livinded> garbagecollectio: what did they ask for?
05:38 < garbagecollectio> code samples
05:39 < niggler> garbagecollectio can you show us a code sample?
05:39 < garbagecollectio> one of the itnerviews asked me how to find stuff in linux
05:39 < garbagecollectio> lol
05:39 < garbagecollectio> yea sure
05:39 < garbagecollectio> one sec
05:39 < garbagecollectio> ill show one that i thought was good but they did not think was good
05:39 < livinded> either your code sucks, you're interviewing at the wrong companies, or not giving them what they want
05:39 < gkatsev> those three aren't necessarily mutually exclusive
05:39 < livinded> gkatsev: completely agree
05:40 < SomeoneWeird> ++
05:41 < garbagecollectio> https://gist.github.com/6afb215ccff744b9d936
05:41 < niggler> your indentation is atrocious
05:42 < livinded> also, what's with the random _ delimted functions?
05:42 < livinded> like do_subscription
05:42 < livinded> everything else it camelcase
05:42 < garbagecollectio> 1)gist messed up my indentation so ignore that
05:43 < garbagecollectio> um i dont think having a _ is a big deal
05:43 < garbagecollectio> if thats the best you can do then my point is proven
05:43 < garbagecollectio> your saying identation and fucking _
05:43 < garbagecollectio> where _ on the prefix is a private var usually
05:43 < garbagecollectio> and thats standard
05:43 < livinded> I'm not talking about that
05:44 < livinded> I'm talking about the random function names that use _ for spaced rather than camelcase when everthing else it camel
05:44 < niggler> not everything is camel
05:44 < livinded> it looks like you just copy/pasted code from other places
05:44 < niggler> some is pseudocamel
05:44 < niggler> some is all lowercase
05:44 < livinded> that too
05:44 < niggler> some_are_underscore_delimited
05:45 < garbagecollectio> copy and pasted? its all my code
05:45 < garbagecollectio> i wrote it al
05:45 < livinded> garbagecollectio: then stick to a convention
05:45 < garbagecollectio> lol ar you telling me im not getting the job cause of the identation on my code?
05:45 < niggler> have you worked on a team before garbagecollectio ?
05:45 < garbagecollectio> thats fucking absurd
05:45 < garbagecollectio> yes i work on a huge team
05:45 < garbagecollectio> i share code regularly
05:45 < livinded> then they must hate working on your code
05:46 < gkatsev> your code is inconsistent. That's definitely a minus. If they are not 100% sure, it would tip them the other way.
05:46 < garbagecollectio> how is it inconsistent?
05:46 < livinded> also, why are you using constructors rather than prototypes for those objects?
05:46 < niggler> its_ok_to_use_underscore butpleaseuseiteverywhere andPleaseForTheLoveOfGod TryNotToUseEveryStyleImaginable
05:46 < garbagecollectio> because i wanted encapsulation
05:46 < garbagecollectio> and to return public apis
05:46 < garbagecollectio> hence they return objects
05:47 < gkatsev> garbagecollectio: the naming for functions and variables are inconsistent.
05:47 < garbagecollectio> how so gkatsev?
05:47 < niggler>    var view = view(); is also displeasing
05:47 < garbagecollectio> lol
05:47 < gkatsev> garbagecollectio: what niggler just said.
05:47 < garbagecollectio> LOL at these 
05:47 < garbagecollectio> critiques
05:47 < garbagecollectio> omg
05:47 < garbagecollectio> this just proves my point
05:47 < gkatsev> it's the first thing that pops up.
05:47 < niggler> garbagecollectio you are giving a code sample
05:47 < livinded> no, it proves that you have inconsistent and poor style
05:47 < gkatsev> it's a terrible first impression.
05:47 < garbagecollectio> i unwderstand what you are saying
05:48 < garbagecollectio> but its a terrible reason
05:48 < TehShrike|Home> Things garbagecollectio has said in #node.js: http://pastebin.com/1UhLwjdK
05:48  * jalcine wonders when the kick happens.
05:48 < niggler> someone gave this jumbled mess to you, then what would you do?
05:48 < livinded> if you can't handle something as simple as that, it's probably not worth proceeding
05:48 < niggler> oh god TehShrike|Home not pastebin
05:48 < TehShrike|Home> niggler: we've talked about this :-P
05:48 < gkatsev> garbagecollectio: I'm not saying that I wouldn't hire a person because of it but i'd definitely be extra critical of him.
05:48 < TehShrike|Home> niggler: here's a link just for you http://hastebin.com/rehimexafe.txt
05:48  * niggler pets TehShrike|Home
05:49 < TehShrike|Home> :-)
05:49 < gkatsev> TehShrike|Home: just create a gist. Then you can update it :/
05:49 < gkatsev> TehShrike|Home: you could even write a node module that auto updates it since a gist is also a git repo.
05:49 < TehShrike|Home> I would, except this isn't something I wanted associated with my name
05:49 < garbagecollectio> ok
05:49 < niggler> garbagecollectio put yourself in the other shoes
05:49 < garbagecollectio> can you guys offer any other critiques?
05:49 < niggler> you are hiring someone
05:49 < gkatsev> TehShrike|Home: the internet, home of anonymous.
05:49 < niggler> you see a blob of code
05:50 < TehShrike|Home> gkatsev: I'm satisfied with this level of separation from the text, that's all :-P
05:50 < gkatsev> lol
05:50 < niggler> TehShrike|Home smile you're on candid ir-camera: http://logs.nodejs.org/node.js/
05:50 < garbagecollectio> fine
05:50 < garbagecollectio> so what should i be doing then
05:50 < garbagecollectio> how should i be indentating and variabling
05:50 < TehShrike|Home> niggler: I know
05:50 < SomeoneWeird> is it possible to catch ^C ?
05:50 < livinded> garbagecollectio: just fyi if you're building base classes like that you probably want to use prototypes instead of literals
05:50 < niggler> consistently is the key
05:51 < niggler> SomeoneWeird that's a signal
05:51 < TehShrike|Home> I am not anonymized from the text, I'm just several searches away from it, which is all I care about.
05:51 < niggler> are you on windows or mac or linux?
05:51  * samholmes likes numberphile
05:51 < TehShrike|Home> samholmes: me too!
05:51 < livinded> using those literals is going to have a larger memory footprint because it's copying methods for each instance
05:51 < TehShrike|Home> samholmes: no wait, I thought you were talking about numberwang
05:51 < livinded> and when you want to extend you can't use prototypal inheritance
05:51 < TehShrike|Home> That's a different show.
05:51 < samholmes> TehShrike|Home: Haha, I like numberwang too.
05:51 < garbagecollectio> livinded, why would i use prototypes when i want private vars?
05:51 < SomeoneWeird> niggler, well i'd like it to be universal lol, probably wishing too much
05:51 < TehShrike|Home> samholmes: well, cool then :-D
05:52 < livinded> garbagecollectio: I just explained it
05:52 < TehShrike|Home> "THAT'S NUMBERWANG!"
05:52 < SomeoneWeird> there's no such thing as private vars
05:52 < garbagecollectio> i know about the memory issue
05:52 < niggler> SomeoneWeird its SIGINT in linux/mac
05:52 < niggler> and i think control-Z sends the equivalent signal in windows
05:52 < samholmes> TehShrike|Home: omg! You're right, haha. Didn't notice it until you mentioned it.
05:52 < livinded> parasitic inheritance if full of fail
05:52 < garbagecollectio> how am i supposed to indent my code and name varibles?
05:53 < livinded> garbagecollectio: however you want, just be consistent
05:53 < niggler> you aren't e e cummings garbagecollectio -- just be consistent
05:53 < garbagecollectio> livinded, this isnt parasitic inheritance, these are encapsulated private vrars and was done in the style of the moduel pattern where you return public apis, its really basic stuff
05:53 < livinded> garbagecollectio: you're building models, controllers, etc. You'll likely want to subclass those for specific instances
05:54 < garbagecollectio> so your saying i should make them subclassable?
05:54 < TehShrike> garbagecollectio: giving you the benefit of the doubt, why would you name your functions so differently there?
05:54 < samholmes> Is using dnode for browser to server communication overkill?
05:54 < TehShrike> garbagecollectio: how much have you read about prototypal inheritance?
05:54 < garbagecollectio> i hear you on that livinded but decided against it for these purposes
05:54 < garbagecollectio> i know a lot about prototypal inheritance
05:54 < TehShrike> samholmes: I think it's cool as balls
05:54 < garbagecollectio> TehShrike: name what functions so different?
05:55 < TehShrike> samholmes: but it probably depends on the extent of the communication
05:55 < garbagecollectio> so its seems to be a style problem not anything else
05:55 < samholmes> TehShrike: I thought so too, but it's becoming increasingly difficult to do what I want it to do (authenticate the users and such)
05:55 < garbagecollectio> you can still subclass out the main function and call functions
05:55 < garbagecollectio> and the private vars are still private
05:55 < niggler> i think what you miss garbagecollectio is that the style problems prevent us from giving a more detailed substance analysis
05:55 < TehShrike> samholmes: I asked substack about that
05:55 < garbagecollectio> if it was prototyped everything is accessible
05:55 < garbagecollectio> ok, why do they prevent you from giving a more detailed substance analysis?
05:56 < samholmes> TehShrike: I feel substack has been too patient with me already, yet I still have a hard time understanding exactly what I'm doing. xP
05:56 < TehShrike> samholmes: he recommended server.authenticate(username, password, function(err, functionThatYouCallOnceYoureAuthenticated) { functionThatYouCallOnceYoureAuthenticated('thing to do') })
05:56 < TehShrike> As I think he said elsewhere, "callbacks all the way down"
05:56 < niggler> we've spent way too much time discussing this
05:57 < livinded> callbacks on callbacks on callbacks
05:57 < niggler> now think about spending that same amount of time
05:57 < gkatsev> niggler: giving a more detailed substack analysis.
05:57 < samholmes> TehShrike: Right, but I can't call that on every page load. :
05:57 < TehShrike> Why not?
05:57 < samholmes> I don't have the username and password on the client.
05:57 < garbagecollectio> niggler:  so your saying you cant give me an alysis cause u cant understand the code? can u please just try
05:57 < niggler> lets say half an hour, over 10 people
05:57 < garbagecollectio> niggler: i would be very grateful
05:57 < TehShrike> samholmes: Authentication seems like the first step in new-page-loaded handshaking
05:57 < TehShrike> samholmes: well sure
05:57 < TehShrike> samholmes: but you have session identifiers, right?
05:57 < niggler> garbagecollectio think about it from the other side
05:57 < TehShrike> samholmes: surely you allow authentication via those
05:57 < samholmes> TehShrike: I have express session cookie on the client.
05:57 < niggler> you have X minutes to look over it
05:58 < TehShrike> samholmes: there you go
05:58 < TehShrike> samholmes: if you consider that sufficient to have access to data that requires authentication, set up a dnode-accessible authentication function that takes those
05:58 < livinded> garbagecollectio: you look like someone who's main experience is writing frontend code with little experience and little understanding of javascript
05:58 < niggler> if it takes X minutes to figure out what you are doing then that leaves 0 minutes for a good critique
05:58 < livinded> you take criticism badly and don't have a real defense for anything brought up
05:59 < livinded> I wouldn't hire you either
05:59 < TehShrike> samholmes: you just have to decide what it is that you require to authenticate to a session
05:59 < samholmes> TehShrike: What I'm doing right now, is having the server check if the the new client connections have getSessionId method, and calling that to get the cookie from the client if they do.
05:59 < garbagecollectio> livinded:  but your wrong...
05:59 < TehShrike> samholmes: and then make sure that there is a dnode function that can "authenticate" a page to a given session
05:59 < garbagecollectio> livinded: your just saying that
05:59 < SomeoneWeird> you're*
05:59 < garbagecollectio> livinded: without any evidence other than indentation
05:59 < garbagecollectio> livinded: thats whats funny
06:00 < TehShrike> samholmes: that's not the server's business, I'd say
06:00 < garbagecollectio> livinded: there wasnt anything brought up except indentation and variable naming being inconsistent...
06:00 < TehShrike> samholmes: have the client look for the cookies, and attempt to authenticate with them over dnode
06:00 < livinded> garbagecollectio: I just explained that I thought your use of object literal constructers was a poor choice
06:00 < TehShrike> samholmes: no reason to contact the server outside of dnode
06:01 < sayd> is this the chan for express questions?
06:01 < samholmes> TehShrike: Well, the problem isn't getting at the session data.
06:01 < TehShrike> sayd: I think there might be a #express room
06:01 < TehShrike> sayd: but this isn't a bad room for those questions, either
06:01 < chovy> what are some good job sites?
06:01 < TehShrike> samholmes: how soes?
06:01 < livinded> chovy: github
06:01 < TehShrike> chovy: stack overflow careers
06:01 < niggler> there are no good job sites
06:01 < deoxxa> garbagecollectio: pfff what does this guy know, he doesn't work at a fortune 500 company
06:01 < garbagecollectio> livinded: but thats because of your lack of knowledge
06:01 < garbagecollectio> livinded: how else do you create encapsulation?
06:02 < deoxxa> garbagecollectio: you should tell him how important the company you work at is
06:02 < samholmes> TehShrike: Whether the client initiates the authentication process or if it's the server, the problem I'm having is being able to extend the server-side RPC methods.
06:02 < deoxxa> that'll shut him up
06:02 < garbagecollectio> livinded: also, you are not understanding the code because the main function only gets instantiated once
06:02 < garbagecollectio> like those objects wont be called multiple times because they are within  main class that is instantiated once
06:02 < garbagecollectio> but you dont undertand that
06:02 < TehShrike> samholmes: how do you mean?
06:02 < samholmes> TehShrike: Would it be alright if we talked in PM about my setup? :}
06:02 < dnnsmanace> hello, would would someone mind explaining what serializing and deserializing sessions means and how it works? :)
06:03 < livinded> garbagecollectio: I understand that. It just seems like a stupid example
06:03 < TehShrike> samholmes: I like chatting in public, I think our conversation is more worthwhile than the other chatter in the room, but whatever you prefer :-)
06:03 < garbagecollectio> a stupid example?
06:03 < garbagecollectio> please explain how you would change it around
06:03 < garbagecollectio> and create encapsulation
06:03 < garbagecollectio> using prototypes
06:04 < samholmes> TehShrike: Well, so long as I have your attention, and my efforts don't go to waste in explaining my configuration, then public chat if fine.
06:04 < samholmes> is fine*
06:04 < TehShrike> Also, it raises the chances of somebody smarter chiming in.
06:05 < gkatsev> just say substack's name thrice and he shall arise.
06:05 < deoxxa> no gkatsev he comes out of a mirror and kills you
06:05 < TehShrike> substack appears from the mirror and turns you into three more-useful modules.
06:05 < gkatsev> TehShrike: only three?
06:06 < garbagecollectio> livinded: ?
06:06 < deoxxa> TehShrike: nooooo
06:06 < TehShrike> gkatsev: Depends on how fat you are
06:06 < gkatsev> I think it depends on how much you weigh.
06:06 < niggler> ok garbagecollectio lets ask a different question
06:06 < gkatsev> TehShrike: lol
06:06 < TehShrike> lulz
06:06  * TehShrike high-fives gkatsev
06:06 < SomeoneWeird> lmao 
06:06 < niggler> how do i set the clipboard
06:07 < deoxxa> he assesses your worth as a person and reimplements you as an RPC service
06:07 < TehShrike> niggler: that sounds like something that would be depressingly OS-specific
06:07 < gkatsev> Mo = sqrt(Sc * m^2)*c  Mo = Module count, Sc = substack constant, m = mass, c = speed of light.
06:07 < niggler> unfortunately it is
06:07 < samholmes> TehShrike: Here's how it works. On the server I have a d.on('remote') listener that checks if the new remote has a getSessionId method, if it does, it calls it and gets a string back that is the express session ID (cookie) from the client. It then retrieves the session data using the sessionId and then sends this session data back to the client (just incase the client needs it, mainly for the userId stored in there, but 
06:07 < samholmes> thatnot important
06:07 < TehShrike> deoxxa: "You only do two things, and one of those is a module I've already written!"
06:07 < samholmes> that's not important*
06:07 < garbagecollectio> js cant set the clipboard from the browser
06:07 < niggler> gkatsev that's a retarded formula
06:08 < garbagecollectio> livinded: ?
06:08 < deoxxa> you're a retarded formula!
06:08 < deoxxa> haha burn
06:08 < niggler> Mo = sqrt(Sc * m^2)*c = m * sqrt(Sc) * c
06:08 < TehShrike> samholmes: why work outside of dnode?
06:08 < niggler> = m * Sc' * c
06:08 < samholmes> TehShrike: After this authentication process, the session data is added to the remote reference on the server, so that way I can access the userId and all that good stuff directly from the remote object.
06:08 < niggler> where Sc' is the modified Substack constant Sc' = sqrt(Sc)
06:08 < gkatsev> niggler: lol, yeah, I was just making shit up on the spot. Should've started with a real formula and modified that.
06:08 < samholmes> TehShrike: What do you mean, outside of dnode?
06:09 < niggler> gkatsev start with E^2 = m^2 c^4 + c^2 p ^2
06:09 < TehShrike> samholmes: What does the client know, that it sends to the server to authenticate to a session (not a user)?
06:09 < garbagecollectio> livinded: ?
06:10 < TehShrike> samholmes: is it just the express session id?  Is that all you're using so far?
06:10 < garbagecollectio> can u access private vars in parent function from its prototype?
06:10  * TehShrike bows his head
06:10  * TehShrike takes another drink
06:11 < garbagecollectio> exctly
06:11 < garbagecollectio> its not possible
06:11 < garbagecollectio> s
06:11 < samholmes> TehShrike: Right. All the client knows initially, is the express session ID, and it exposes it to the server via a local dnode method called getSessionId, which the server uses to retrieve it, and then authenticate the connection.
06:11 < garbagecollectio> so u return publci facing apis
06:11 < samholmes> TehShrike: make sense so far?
06:11 < gkatsev> niggler: E=mc^2; E = 1/2 k * x^2; k = substack constant. x the amount of alcohol consumed by substack as determined by http://xkcd.com/323/
06:11 < mscdex> has anyone here been notified that their node modules were added to softpedia.com?
06:11 < TehShrike> samholmes: do you know you can get cookie values locally, without messaging the server?
06:11 < mscdex> :S
06:11 < samholmes> TehShrike: PS: TehShrike|Work is bothersome to my IRC's tab to auto-complete a nick feature. XP
06:11 < TehShrike> samholmes: I know, I'm sorry >_<
06:12 < gkatsev> niggler: actually, that one doesn't work either. I don't have a variable for the number of modules.
06:12 < samholmes> TehShrike: Anyway to log out from the work one? :P
06:12 < TehShrike> I like all my machines to be logged in at all times, if only for logging purposes :-x
06:12 < dnnsmanace> samholmes, may i also ask you a session question
06:12 < niggler> go with ideal gas law gkatsev
06:12 < gkatsev> niggler: ah, I know. X is the number of modules. `k' the substack constant is set by that graph
06:12 < niggler> PV=nRT
06:12 < niggler> lol
06:12 < niggler> damnit gkatsev i spent years trying to erase this
06:13 < gkatsev> niggler: lol
06:13 < samholmes> TehShrike: And, yes, I do get the cookie locally. The server is the one that RPCs the getSessionId method (the method is on the _client_ not the server)
06:13 < samholmes> dnnsmanace: Shoot. :)
06:13 < gkatsev> niggler: hahaha, yw
06:13 < TehShrike> samholmes: ah, I think I see
06:13 < deoxxa> mscdex: ugh, softpedia
06:13 < dnz-> urgh
06:13 < deoxxa> mscdex: worst website ever
06:13 < chovy> livinded, TehShrike i have both those
06:13 < TehShrike> samholmes: why not call server.authenticate(session_id, cb)
06:13 < mscdex> apparently they're adding node modules to their site now
06:14 < deoxxa> great :/
06:14 < dnz-> s/dia/nis/
06:14 < samholmes> TehShrike: call that from the client?
06:14 < dnnsmanace> samholmes, i am using oauth with passport and am trying to figure out how to store the tumblr token i generate within the session so i can reference it later when the client wants to POST some changes
06:14 < TehShrike> samholmes: yeah
06:14 < dnz-> deoxxa: hates softpenis
06:14 < deoxxa> dnz-: i like how long it took you to come up with that
06:14 < niggler> im trying to become a javascript programmer so i can get hired by some nyc startup, gosh!
06:14 < samholmes> TehShrike: it's because I want to attach the session data to the remote object.
06:14 < niggler> :P
06:14 < dnz-> deoxxa: my terminal was lagging
06:14 < garbagecollectio> "become?"
06:14 < garbagecollectio> I am
06:14 < TehShrike> samholmes: I don't get it
06:14 < deoxxa> dnz-: "i don't suck at fighting i was just lagging... fuck the lag..."
06:14 < garbagecollectio> u say become
06:15 < chovy> http://pipes.yahoo.com/pipes/pipe.info?_id=b8650458dc73092471c292cde786e53a
06:15 < garbagecollectio> but the truth is niggler is that i seem to know more than u do about this language
06:15 < deoxxa> dnz-: do you say the same thing with counter strike
06:15 < garbagecollectio> and node.js
06:15 < garbagecollectio> your trying to do ntohing with your life
06:15 < garbagecollectio> lol
06:15 < niggler> you probably do, which is a reflection of the lack of knowledge on my part
06:15 < garbagecollectio> hang out in #node.js and 
06:15 < niggler> hence im here
06:15 < deoxxa> garbagecollectio: this dnz- guy said you were a retard in pm
06:15 < dnz-> deoxxa: nah bro we drop sync all the time here
06:15 < dnz-> i sort of miss md's 3g
06:15 < garbagecollectio> niggler: then stfu and respect your elders
06:15 < dnz-> well, not the terminal lag
06:16 < dnz-> but at least it was consistently shit
06:16 < TehShrike> samholmes: quick question, how well do you think your mind is acclimated to functional programming and function literals? Just want to know if things seem obvious to me because I'm dumb and thinking dumb things, or because I've started thinking more functionally in the last few months and you're still working it into your brain
06:16 < samholmes> TehShrike: Here's the snippet of my code (WIP): http://pastie.org/5509668
06:16 < garbagecollectio> deoxxa: copy and paste it
06:17 < samholmes> TehShrike: I'm feel pretty comfortable talking about functional programming, closures, and function literals.
06:17 < deoxxa> garbagecollectio: <dnz-> bro is garbagecollectio retarded lol
06:17 < TehShrike> samholmes: all right, cool
06:18 < dnz-> hahah
06:18 < dnz-> wot
06:18 < dnz-> yeah
06:18 < dnz-> i said that
06:18 < dnz-> (i didnt but ill claim it)
06:18 < deoxxa> lol
06:18 < samholmes> TehShrike: yeah, if there's something I don't understanding, I usually ask (I almost overly ask questions). :P
06:18 < niggler> i hope that when i've spent as many years with javascript as others, that my code might actually be somewhat structured
06:18 < TehShrike> samholmes: what's with the sessions array/map?  Wouldn't the client just be concerned with the one session?
06:18 < samholmes> TehShrike: looking at my snippet, you see why I have the server call the remote?
06:18 < TehShrike> samholmes: This is client-side code, right? :-x
06:18 < dnz-> garbagecollectio: i see why you picked your nick, but you never free it, you just store the garbage in your brain, you idiot
06:19 < samholmes> TehShrike: this is serverside code.
06:19 < dnnsmanace> too much trash in this channel, where is intelligent node discussion?
06:19 < gkatsev> dnnsmanace: here. Just other times :/
06:19 < TehShrike> samholmes: then yeah, it really seems like you should be passing the session id in to this function, right?
06:19 < TehShrike> Why pass an object that has a function that the server has to call to get the value?
06:19 < samholmes> TehShrike: Right, which is what I'm doing.
06:19 < gkatsev> dnnsmanace: still happening with between TehShrike and samholmes 
06:19 < dnnsmanace> :)
06:20 < dnz-> garbagecollectio: ur fkn mad like oscar the grouch
06:20 < garbagecollectio> im angry
06:20 < dnz-> playing with ur tiny worm in ur trash ppile
06:20 < dnnsmanace> sessions really have me stumped, maybe someone can point me to some literature?
06:20 < garbagecollectio> dnz-: your a harasser
06:20 < dnnsmanace> express documentation has nothing interesting
06:21 < garbagecollectio> dnz-: can the management please kick him? this is abuse
06:21 < dnz-> have a shower you smell like the tip
06:21 < gkatsev> dnz-: ok, enough
06:21 < dnz-> tahts cool he quit now
06:21 < dnz-> im done
06:21 < TehShrike> samholmes: where does the client object come from there?
06:21 < niggler> does oscar the grouch still have a job?
06:21 < niggler> oh wait obama won the election nvm
06:21 < dnz-> no, hes a bum, he lives in trash in NY city
06:21 < deoxxa> flawless victory
06:21 < TehShrike> niggler: *giant eyeroll*
06:21 < dnz-> a fatality
06:21 < mscdex> node.js rules!
06:22 < TehShrike> mscdex: JAVASCRIPT IS BETTER
06:22 < gkatsev> TehShrike: huge overlap there.
06:22 < samholmes> TehShrike: Oh, sorry. My code is very WIP. But the client method comes from dnode(function(remote) { client = remote; ....}); client is is closed over by the snippet I gave you.
06:22 < samholmes> dnnsmanace: Are you using express?
06:22 < TehShrike> samholmes: ah, ok, that was confusing to me
06:22 < dnnsmanace> samholmes: yes
06:23 < dnnsmanace> express + passport for oauth
06:23 < samholmes> TehShrike: I could have just as well, defined client to be a parameter for the d.on('remote', function(client){... callback
06:23 < samholmes> dnnsmanace: Do you have a session store set up, such as a MemoryStore or RedisStore?
06:24 < AAA_awright> TehShrike: ECMASCRIPT IS SUPERIOR
06:24 < AAA_awright> Also, <garbagecollectio> but the truth is niggler is that i seem to know more than u do about this language
06:24 < dnnsmanace> samholmes: no :)
06:24 < TehShrike> AAA_awright: PROGRAMMING IS BETTER
06:24 < dnnsmanace> samholmes: would you mind explaining the concepts in a few words?
06:25 < AAA_awright> TehShrike: CAPSLOCK SCRIPT IS THE ONLY WAY TO PROGRAM
06:25 < samholmes> TehShrike: I guess, now that I figured out that I could just close over the client like this, it's not necessary for me to do it the way I do. I could expose a server-side method called authenticate, and that method would close over the client reference and I'll be able to hook up the session data to the client ref from within dnode(function(){...})
06:25 < samholmes> dnnsmanace: app.use(express.session({...})); is what you're using to set up session handling, correct?
06:26 < TehShrike> samholmes: yeah, I think a lot of dnode gets easy when you assume knowledge from a higher scope within callbacks
06:26 < dnnsmanace> samholmes: yes, already have that running except without memstore, i assume var store = new express.session.MemoryStore;
06:26 < TehShrike> Based on my extremely limited knowledge
06:26 < gkatsev> AAA_awright: whatever happened to capslock script?
06:26 < dnnsmanace> samholmes: that would be unique for each session? and i can keep my oauth token there?
06:26 < TehShrike> numberscript is best language
06:26 < gkatsev> still there: https://github.com/rvagg/CAPSLOCKSCRIPT
06:26 < AAA_awright> IT'S CAPSLOCKSCRIPT YOU INSENSITIVE CLOD. IT'S STABLE AND FEATURE-COMPLETE... I PRESUME
06:27 < gkatsev> ;p;
06:27 < gkatsev> lol
06:27 < gkatsev> hand was shifted over one
06:27 < TehShrike> https://github.com/substack/number-script "Invalid number. This is the only error message necessary." I laughed for at least a full minute
06:27 < gkatsev> TehShrike: lol, didn't see that one.
06:27 < gkatsev> what about semicolon?
06:28 < gkatsev> http://pksunkara.github.com/semicolon/
06:28 < samholmes> dnnsmanace: wait...rather than me getting into all of that, can't you just do req.session.tumblrThing = tumblrToken?
06:29 < samholmes> TehShrike: But, the problem I'm encountering right now with dnode is not knowing when I can have other modules of code access my dnode module code to add more server-side methods.
06:29 < dnnsmanace> samholmes: i am not sure, is req.session globally shared after i do that between all the routes?
06:29 < samholmes> req.session isn't global.
06:30 < TehShrike> gkatsev: >_< hadn't seen that!
06:30 < samholmes> req is a parameter passed to the callbacks to each route
06:30 < gkatsev> TehShrike: now you have. For whatever good or bad it'll do.
06:30 < dnnsmanace> samholmes: right, so how would it be preserved for the entire session
06:30 < samholmes> dnnsmanace: For example, app.get('/mypage', function (req, res, next){ req.session; });
06:31 < dnnsmanace> right
06:31 < samholmes> dnnsmanace: req.session is an object stored in the express.session middleware, so it will be preserved for each HTTP request of the same session.
06:32 < dnnsmanace> samholmes: i see, i will try. seems i am missing some fundamentals of how middleware works
06:33 < samholmes> dnnsmanace: the whole point of the session middleware is to hold data for a specific client (browser) on the server between HTTP requests. ;)
06:33 < dnnsmanace> samholmes: i got it :)
06:34 < samholmes> cool :)
06:34 < samholmes> TehShrike: How do you add methods to your server-side object?
06:38 < dnnsmanace> samholmes: thank you
06:39 < samholmes> dnnsmanace: you're welcome
06:45 < dnnsmanace> samholmes: one more q, does putting something in req.session make it exposed to the client via cookies?
06:45 < ljharb> no
06:45 < samholmes> dnnsmanace: No. The client only has the cookie.
06:46 < samholmes> dnnsmanace: the cookie is just a string of numbers and letters (a hash) that is the unique identifier for the session (the express middleware uses this to look up the session data)
06:46 < gkatsev> samholmes: the client only has a cookie? http://www.youtube.com/watch?v=3wTWWjYTe1I
06:46 < dnnsmanace> i see. why is it bound to req and not res (this question probably makes no sense)
06:47 < garbagecollectio> dnz-: listen
06:47 < garbagecollectio> dnz-: u are a node.js troll
06:47 < samholmes> dnnsmanace: because cookies that are stored in the browser are sent with ever HTTP request.
06:48 < dnnsmanace> samholmes: so the middleware looks up the cookie, and if there is a match, it binds the corresponding variable i defined previously?
06:48 < dnz-> garbagecollectio: yeah but i can out trash talk you fuckwit
06:48 < gkatsev> dnz-: stop it.
06:48 < dnz-> you stop it
06:49 < garbagecollectio> dnz-: lets take this to pm
06:49 < dnz-> nah bitch, i drop you like a dumptruck in public
06:49 < samholmes> dnnsmanace: the middleware gets the cookie in the req object and then looks for the session data, and then puts that in req.session
06:49 < garbagecollectio> thats how i dropped my first child out of your momma's pussy
06:50 < garbagecollectio> it came right out
06:50 < garbagecollectio> and in public
06:50 < gkatsev> Nexxy: need some op here
06:50 < garbagecollectio> then i left your momma in the alley
06:50 < dnz-> [17:44] <garbagecollectio> im going to destroy you
06:50 < dnz-> [17:45] <dnz-> taht is potentially one of the coolest of stories i have ever brod
06:50 < dnnsmanace> samholmes: i get it :)
06:51 < hbeck> what would be the normal place/way to store a 'global' object?  I am reading in a config and doing some initialization of this object based on the config - then want said object available for all modules
06:51 < tasslehoff> I need to launch a subprocess, wait for something on stdout, feed something to stdin, and wait for some more stdout. Is there a node module I should use for this?
06:51 < hbeck> using express, so if I should go ask over in #express i can do that.
06:51 < dnz-> he thinks he won then parted, but when his mum dropped him she thought she had to shit, and it stank the same, tried to flush it and he started crying
06:52 < dnz-> tried to flush it anyway
07:02 -!- dnz- was kicked from #Node.js by Nexxy [dnz-]
07:07 -!- mode/#node.js [+b dnz-!*@*] by ChanServ
07:07 -!- dnz- was kicked from #Node.js by ChanServ [User is banned from this channel]
07:07 -!- mode/#node.js [+b *!*@c-68-81-255-153.hsd1.pa.comcast.net] by ChanServ
07:07 -!- garbagecollectio was kicked from #Node.js by ChanServ [User is banned from this channel]
07:10 < samholmes> Tehshrike: Would you happen to know if it's possible to add methods to either side of the dnode connection?
07:10 < samholmes> *after the connection has been established?
07:22 < Oscar^d^Grouch> yeh bitches
07:23 < Oscar^d^Grouch> how do u use jquery in node
07:23 < Oscar^d^Grouch> so you can do like
07:23 < Oscar^d^Grouch> $(['poop', 'backand', 'forth']).each(function(){})
07:24 < SomeoneWeird> Oscar^d^Grouch, [ 'lol1', 'lol2' ].forEach(function(item) { });
07:25 < ljharb> Oscar^d^Grouch: you should never use $.each on anything but a collection of DOM elements. use the native array methods.
07:25 < Oscar^d^Grouch> var back = '<>', forth = false; while(true) { if(!forth) { forth = back; back = false; } else { back = forth; forth = false} } 
07:25 < Oscar^d^Grouch> what about that
07:25 < Oscar^d^Grouch> so you can poop back and forth forever
07:26 < Oscar^d^Grouch> ))<>((
07:26 < SomeoneWeird> ._o
07:26 < ljharb> trolls be trollin
07:26 < Oscar^d^Grouch> deoxxa knows what im talkin bout
07:29 < Oscar^d^Grouch> how do i use window.things in node ?
07:29 < SomeoneWeird> you don't
07:29 < Oscar^d^Grouch> then how do i do like
07:29 < Oscar^d^Grouch> window::['eval']()
07:30 < SomeoneWeird> um
07:30 < SomeoneWeird> you don't
07:30 < Oscar^d^Grouch> wat
07:30 < Oscar^d^Grouch> surely you can
07:30 < Oscar^d^Grouch> what about
07:30 < Oscar^d^Grouch> function::['eval']()
07:30 < Oscar^d^Grouch> does that work ?
07:30 < ljharb> there's no window. '::' isn't anything, and don't use eval.
07:30 < ljharb> i don't know why i'm even replying.
07:30 < Oscar^d^Grouch> :: is something in browser js
07:30 < purr> Oscar^d^Grouch: you're a fucking retard.
07:31 < SomeoneWeird> yeah, ljharb 
07:31 < SomeoneWeird> lol
07:31 < Oscar^d^Grouch> purr: and you're mad
07:31 < ljharb> i don't know where you got the idea that making someone "mad bro" is a victory. lulz.
07:31 < Oscar^d^Grouch> i dont know where you get the idea that being pro at node is a victory. lulz
07:32 < Oscar^d^Grouch> what about
07:32 < Oscar^d^Grouch> ({}).__proto__
07:32 < Oscar^d^Grouch> in node
07:32 < Oscar^d^Grouch> whats that
07:32 < SomeoneWeird> omfg
07:33 < SomeoneWeird> nodebeginner.org
07:33 < Oscar^d^Grouch> SomeoneWeird: no, its not a beginner question
07:33 < Oscar^d^Grouch> i know what it does
07:33 < ljharb> Oscar^d^Grouch: it's where "where you came from" came from.
07:33 < Oscar^d^Grouch> why does it behave different in node ?
07:33 < Oscar^d^Grouch> ljharb: under a bridge ?
07:33 < ljharb> it doesn't. it behaves differently in v8 than in notn v8.
07:33 < ljharb> *not
07:33 < SomeoneWeird> lol.
07:34 < Oscar^d^Grouch> yeah but it doesnt
07:34 < Oscar^d^Grouch> in v8 it behaves differntly in a browser env
07:34 < Oscar^d^Grouch> than to a node env
07:34 < Oscar^d^Grouch> explain that cunt
07:34 < Oscar^d^Grouch> bet you cant
07:34 < ljharb> it's a different version of v8.
07:34 < Oscar^d^Grouch> thats not my answer
07:35 < Oscar^d^Grouch> i want to know about 'glboal scope' equivalency
07:35 < Oscar^d^Grouch> why is the proto of an empty object in each env
07:35 < samholmes> dnode creates a local object for every connection?
07:35 < Oscar^d^Grouch> + different
07:36 < Oscar^d^Grouch> SomeoneWeird: dont you live in kew or some shit
07:36 < ljharb> looks the same to me in v8, spidermonkey, and safari
07:36 < Oscar^d^Grouch> ljharb: whats the result
07:36 < Oscar^d^Grouch> pastebin me the output + profiles plz
07:36 < SomeoneWeird> lolwtf
07:36 < ljharb> an object, with a bunch of native functions?
07:36 < SomeoneWeird> kew?
07:37 < Oscar^d^Grouch> A BUNCH OF NATIVE FUNCTIONS
07:37 < Oscar^d^Grouch> IN WHICH SCOPE
07:37 < Oscar^d^Grouch> jesus
07:37 < Oscar^d^Grouch> or namespace
07:37 < Oscar^d^Grouch> at least
07:37 < Oscar^d^Grouch> come on man
07:37 < ljharb> what do you mean in which scope. in whatever scope i apply when i call them
07:37 < Oscar^d^Grouch> no its not
07:37 < Oscar^d^Grouch> its an empty object
07:37 < SomeoneWeird> yes, it is
07:37 < Oscar^d^Grouch> are you a retard? 
07:37 < ljharb> right, JSON.stringify(({}).__proto__) is "{}".
07:37 < ljharb> but the console prints out other methods.
07:38 < Oscar^d^Grouch> NO
07:38 < Oscar^d^Grouch> NOT JSON . STRING IFY
07:38 < Oscar^d^Grouch> wow
07:38 < Oscar^d^Grouch> you dont even know how this works do you
07:38 < SomeoneWeird> lmao
07:38 < SomeoneWeird> obviously you don't
07:38 < odin_> {} = make a new anonymous function
07:38 < Oscar^d^Grouch> SomeoneWeird: quiet kid
07:38 < Oscar^d^Grouch> no its no an anon function
07:38 < SomeoneWeird> excuse me?
07:38 < Oscar^d^Grouch> SomeoneWeird: ur like 17
07:38 < odin_> ({}) = execute new anonymous function
07:38 < Oscar^d^Grouch> shutup
07:38 < Oscar^d^Grouch> odin, its an object
07:38 < SomeoneWeird> your point?
07:38 < Oscar^d^Grouch> ur a kid
07:38 < Oscar^d^Grouch> with no expeirence and understanding
07:39 < SomeoneWeird> hahaha
07:39 < Oscar^d^Grouch> let the adults speak
07:39 < SomeoneWeird> okay then mate
07:39 -!- Oscar^d^Grouch was kicked from #Node.js by Nexxy [Oscar^d^Grouch]
07:39 < Oscar^d^Grouch> yep
07:39 < Oscar^d^Grouch> that doesnt work
07:41 < samholmes> substack: How can I add methods to dnode refs after the connection has taken place?
07:42 < Oscar^d^Grouch> del ur vars that hold it, it fres up memory so u can realloc before garbage collectiion
07:42 < Oscar^d^Grouch> then u can rewrite to that cunk
07:43 < gkatsev> Nexxy: I think a +b is needed perhaps. Or a +q.
07:43 < SomeoneWeird> yeah.
07:47 < Famic> hi
07:47 < Famic> anybody could tell me why the uglifyjs plugin doesn't respect the order of my files when minifying by any chance ?
07:48 -!- mode/#node.js [+o konobi] by ChanServ
07:48 < Oscar^d^Grouch> its because your placement of the final semi colons
07:48 -!- mode/#node.js [+b *!*currymunc@*.and.daddy.dont.appreci8.me] by konobi
07:48 -!- Oscar^d^Grouch was kicked from #Node.js by konobi [Oscar^d^Grouch]
07:49 < Famic> what just happened with oscar ?
07:50 <@Nexxy> Famic, trolls
07:50 < Famic> was he just trolling or something
07:50 < Famic> ok
07:50 <@Nexxy> yeah ;P
07:50 < Famic> thanks, I guess
07:51 < Famic> any idea where I could find help about uglifyjs ?
07:52 <@Nexxy> Famic, https://github.com/mishoo/UglifyJS#usage
07:52 <@konobi> surely there must be a #substack channel by now
07:52 <@mbalho> Famic: npm install -g uglifyjs; uglifyjs foo.js bar.js > min.js
07:52 <@mbalho> Famic: that respects order
07:53 < Famic> indeed
07:53 < Famic> but when used in node with the api, it doesn't
07:53 <@mbalho> if you post the code you are using we can help you find out why
07:54 < Famic> here it is : http://pastebin.com/zVwbBypN
07:54 < garbagecollector> hi guys
07:54 < garbagecollector> im really mad
07:54 < garbagecollector> and gay
07:54 < garbagecollector> any node.js bi guys wanna hookup/
07:54 -!- mode/#node.js [+b *!*nodeuser@*.and.you.cant.annihil8.us] by Nexxy
07:54 -!- garbagecollector was kicked from #Node.js by Nexxy [garbagecollector]
07:54 < Famic> oops, copy/paste fail. here goes : j
07:55 < Famic> http://pastebin.com/n37E1i1Q
07:56 < SomeoneWeird> Nexxy, <3
07:56 < dnz_> SomeoneWeird: lol
07:56 < dnz_> you will get nut hair one day
07:56 -!- mode/#node.js [+b *!*haha@*.and.you.cant.annihil8.us] by Nexxy
07:56 -!- dnz_ was kicked from #Node.js by Nexxy [dnz_]
07:56 < SomeoneWeird> Nexxy, <3
07:56 < SomeoneWeird> lol
07:56 <@mbalho> man what is wrong with people lately
07:57 <@mbalho> Famic: im lookin at the uglify source to see why
07:57 < Famic> nice
07:58 -!- mode/#node.js [+b *!*lel@*.and.you.cant.annihil8.us] by Nexxy
07:58 -!- dnz_ was kicked from #Node.js by Nexxy [dnz_]
07:58 < SomeoneWeird>  /mode +b *!*@*annihil8.us
07:58 -!- mode/#node.js [+b *!*@*.annihil8.us] by ChanServ
07:58 -!- garbagecollecto was kicked from #Node.js by ChanServ [Banned: trolling]
07:58 <@mbalho> Famic: i think you are using uglifyjs v1
07:58 <@Nexxy> SomeoneWeird, ;P
07:58 < SomeoneWeird> :D
07:58 <@Nexxy> that's for chanserv to do
07:59 < Famic> mbalho: nah, I have 2.2.2 (or 2.0.2, I'm not sure)
07:59 -!- mode/#node.js [+b *!*@*.appreci8.me] by ChanServ
07:59 -!- garbagecollecto was kicked from #Node.js by ChanServ [Banned: trolling]
08:01 <@mbalho> Famic: check out the readme on github https://github.com/mishoo/UglifyJS
08:01 <@mbalho> Famic: look up 'v2'
08:01 <@mbalho> Famic: i think the readme on npm is out of date?
08:02 < yxxeN> sup
08:02 < Famic> mbalho: https://github.com/mishoo/UglifyJS2
08:02 < yxxeN> Nexxy: whats going on gurlfran
08:03 < SomeoneWeird> omfg
08:03 < yxxeN> SomeoneWeird: comb your facepubes
08:03 -!- mode/#node.js [+b *!*wot@199.15.118.*] by mbalho
08:03 -!- yxxeN was kicked from #Node.js by mbalho [yxxeN]
08:04 < SomeoneWeird>  /mode +b *!*@199.15.118.* plz
08:04 < SomeoneWeird> else he'll keep coming bac
08:04 < SomeoneWeird> k
08:04 -!- mode/#node.js [+b *!*@199.15.118.*] by mbalho
08:04 <@mbalho> sweet
08:04 <@mbalho> im noob at irc
08:05 <@mbalho> i only know /kickban and /message
08:05 < SomeoneWeird> :)
08:05 < gkatsev> there's also chanserv's akick, which I just discovered
08:05 <@Nexxy> ;)
08:05 <@mbalho> gkatsev: how does that work
08:05 < gkatsev> mbalho: /msg chanserv help akick
08:05 < SomeoneWeird>  /msg chanserv help akick
08:05 < SomeoneWeird> lol
08:05 < gkatsev> SomeoneWeird: also, /say
08:06 < hello> what else
08:06 < hello> we can do this all day
08:06 < hello> btw
08:07 < hello> im about 0.5% thru my avail hosts
08:07 < ome> hello
08:07 < rojuinex> according to the documentation there are 3 ways to send a directory to require, but it only outlnes two.  Having a package.json and setting main = to the main module, and #2 node looking for index.js and index.node.  Anyone know what the third option is?
08:07 -!- mode/#node.js [+b *!*4dlulz@2604:6600:1062:0:216:3eff:fede:*] by Nexxy
08:07 -!- hello was kicked from #Node.js by Nexxy [hello]
08:07 < gkatsev> Nexxy: probably *!*@ even
08:07 <@Nexxy> lol
08:07 < SomeoneWeird> yeah
08:07 <@Nexxy> no
08:08 <@Nexxy> it's ok
08:08 < hello> =\
08:08 < hello> nexxy
08:08 < hello> come on mate
08:08 < gkatsev> it's almost like whack-a-mole. whack-a-troll.
08:08 < hello> yeah but this game never ends
08:09 -!- mode/#node.js [+b *!*notgoodat@2604:6600:1062:0:216:3eff:fede:*] by Nexxy
08:09 -!- hello was kicked from #Node.js by Nexxy [hello]
08:09 -!- mode/#node.js [+b $r:*heheh*] by Nexxy
08:10 < gkatsev> wholy shit, it's a thing: http://www.bigfishgames.com/online-games/4445/whackatroll/index.html
08:10 < SomeoneWeird> lmao
08:11  * rojuinex likes whackatroll
08:12 -!- mode/#node.js [+b *!*@*.masturb8.in] by ChanServ
08:12 -!- dnz2 was kicked from #Node.js by ChanServ [User is banned from this channel]
08:14 -!- mode/#node.js [+b *!*@2604:6600:1062:0:*] by Nexxy
08:15  * gkatsev stops playing whack-a-troll and goes to sleep
08:15 < gkatsev> good night and good luck
08:15 <@Nexxy> it's all done now
08:15 <@Nexxy> lol
08:15 < gkatsev> lol, I mean the flash game I linked above
08:15 <@Nexxy> oh
08:15 <@Nexxy> hah
08:16 < gildean> lots of trolls lately, i wonder where they all come from
08:16 < gkatsev> also, it's 3am for me and I have work in the morning >.<
08:16 < gkatsev> gildean: from under bridges, duh
08:16 < simius> and why they focus on node.js.. havent seen this kind of issues on other chanels.
08:17 < gkatsev> simius: issue in ##javascript as well. Though, lately #Node.js has been getting some "lovely" action as well.
08:17 < simius> yeah.. i might just be lucky to not idle at the right moment here, hehe
08:18 < thealphanerd> Nexxy: some bad apples in the chan?
08:18 < Youdaman> TehShrike|Home: thanks :)
08:18  * rojuinex wonders if Ryan Dahl ever is on this irc
08:18 <@konobi> lurks
08:18 < gildean> rojuinex: ryah is here even now, but he's just lurking
08:18 < gkatsev> rojuinex: ryah 
08:18 <@Nexxy> thealphanerd, just someone with way too much time on their hands lol
08:18 < thealphanerd> ohhh maybe they can do my homework for me
08:19 < thealphanerd> damn transfer functions
08:19  * Youdaman waves hai at all the cool people (that's you)
08:19  * gkatsev sleeps
08:19 < thealphanerd> Youdaman: I appreciate your positive candor
08:19 < thealphanerd> !
08:19 < gildean> good morning, btw
08:20 < Youdaman> thealphanerd: positive out, positive in :)
08:20 < thealphanerd> +++ >>>> +++ 
08:20 < medice> dont you start with brainf***
08:20 < thealphanerd> is it a linear system?
08:20 < rojuinex> Anyone know the 3rd way to load a directory using require?
08:20 < mbalho> its more like +++ >>>> ++++
08:21 < thealphanerd> ohhhh y(n) = H(z) * x(n)
08:21 < thealphanerd> !!!
08:21 < thealphanerd> filters
08:21 -!- mode/#node.js [+b $r:d-money] by Nexxy
08:22 < thealphanerd> Nexxy: would you be able to help me with a tiny usability issue?
08:23 <@Nexxy> possibly
08:23 <@konobi> rojuinex: not possible with the require function... you'd have to readdir
08:23 < thealphanerd> so I'm designing a node that will generate osc controllers
08:23 < thealphanerd> client side will have widgets for users to play with… sockets will transmit the data back to server
08:23 < thealphanerd> which will use node-osc to transmit over servers local host to a dsp server
08:24 < rojuinex> konobi: hmm... I guess i'm just a little confused by the documentation
08:24 <@konobi> rojuinex: you have to require individual files
08:24 < thealphanerd> is there a way when generating the client side code to have the local ip address of the server embedded in the instantiation of the socket?
08:25 < thealphanerd> (basically allowing the app to run on any computer on the network without needing to manually put in the computers IP
08:25 < rojuinex> konobi:  http://nodejs.org/api/modules.html#modules_folders_as_modules  I'm just wondering what the 3rd way spoke of here is referring to
08:27 < Nitrodist> so, is there an alternate rpm for node.js since tchol.org is down?
08:28 <@Nexxy> thealphanerd, I think so
08:29 < thealphanerd> Nexxy: !!!
08:29 <@Nexxy> thealphanerd, !!!
08:29 < thealphanerd> so ummm… how 
08:32 < SomeoneWeird> <Nitrodist> so, is there an alternate rpm for node.js since tchol.org is down? < just compile it
08:32 < SomeoneWeird> wget <file> && tar xvf <file> && cd <file> && ./configure && make -j && make install
08:33 < Nitrodist> SomeoneWeird: I have a vagrant cookbook that depends on that url :(
08:33 < Nitrodist> I suppose I can mess around and try the compile from source...
08:33 < SomeoneWeird> ah ic
08:35 < xiecc> http://pomelo.netease.com/lordofpomelo/       is this site accessible?
08:35 < lpin> xiecc yes
08:35 < xiecc> thank you 
08:36 <@konobi> rojuinex: well... that's more around npm... but it's still a single file
08:36 <@konobi> (somefolder/package.json -> main.js)
08:36 < ome> SomeoneWeird: why -j and not -jN ?
08:36 < SomeoneWeird> -j uses as many cores as it can
08:37 < ome> ah great.
08:38 < Kakera> I'm utterly confused here: https://gist.github.com/4256991
08:38 < Kakera> 1) why did the socket close without an error AND without an 'end' event 2) why did the trace come before the 'close' message
08:39 < rojuinex> oh, I get what the 3 are.  #1. package.json #2. index.js #3. index.node   I was thinking #2. was index.js and index.node.  Makes sensenow
08:40 < [AD]Turbo> hola
08:42 < abrkn> my socket.io app refuses to work in ie9. i'm forcing xhr-polling and it works in ff,chrome,wii-u,iphone,etc. in ie, every packet is sent as a POST with content length zero.  http://i.imgur.com/x8hAy.png - any ideas? quite frustrated...
08:49 < Nasga> abrkn: do you use a web proxy ?
08:49 < abrkn> Nasga: checking
08:50 < abrkn> no
08:50 < Nasga> then i have no idea, my issues are with ie8/9 + web proxy :/
08:50 < abrkn> interesting. if i set my "browser mode" in ie10 to ie9, then it works
08:51 < rojuinex> ooooo you can key map to exports :)
08:52 < abrkn> Nasga: i assume i'm the only developer in the world who has tried node.js + socket.io + ie10 then
08:52 < samholmes> I'm using dnode to check if users are online or offline. But, how do I track if their go offline?
08:53 < tanhongbin> Is node.js support arm in debug mode?
08:53 < gildean> abrkn: i really doubt that
08:53 < Nasga> abrkn: i have my own xhr polling in fact, socket.io cannot pass my nginx witch does not support http 1.1 :-(
08:53 < abrkn> i guess i'll be debugging socket.io for the day then
08:53 < abrkn> unsmileyface
08:54 < SomeoneWeird> wait wot
08:54 < SomeoneWeird> why doesn't your nginx support 1.1
08:54 < SomeoneWeird> thats like
08:54 < SomeoneWeird> crazy
08:54 < abrkn> wasnt 1.1 wide spread 15 years ago?
08:54 < SomeoneWeird> yes
08:54 < SomeoneWeird> lol
08:55 < Nasga> my version is quite old (debian stable)
08:55 < samholmes> Because connections are opened and closed during page loads.
08:56 < SomeoneWeird> Nasga, why?
08:56 < abrkn> <meta http-equiv="x-ua-compatible" content="IE=9"> <-- problem solved. ie10 can eat shit and die
08:57 < Nasga> SomeoneWeird: the only solution i seen was to switch to HAproxy instead of nginx
08:57 < SomeoneWeird> y u no update node
08:57 < Nasga> ?
08:58 < SomeoneWeird> update node?
08:58 < SomeoneWeird> lol
08:58 < SomeoneWeird> <Nasga> my version is quite old (debian stable)
08:58 < Nasga> lol, i mean my version of nginx
08:58 < SomeoneWeird> oh 
08:58 < SomeoneWeird> ic
08:58 < SomeoneWeird> update nginx then?
08:58 < SomeoneWeird> lol
08:59 < Nasga> witch does not support http 1.1, and i think new version still have issues
08:59 < SomeoneWeird> backports ftw
08:59 < SomeoneWeird> which*
08:59 < Nasga> but
08:59 < Nasga> why i would do this ?
08:59 < SomeoneWeird> because it's a solution
08:59 < Nasga> my socket / event stuff works since 2006
08:59 < Nasga> socket.io will be a nice replacement
09:00 < SomeoneWeird> mk
09:02 < Gottox> I'm considering switching back from nginx to lighttpd.
09:03 < Cronoh> dat feel when u go onto your site for the first time in IE...
09:03 < Gottox> Cronoh: know that feeling, bro :P
09:04 < Nasga> the only great thing they did was XHR
09:05 < Josh> Coming from C++ background.. When we write a handler with nameless function in node.js
09:05 < Josh> like
09:05 < Josh> io.sockets.on('connection',function(sock){ /* stuff */});
09:05 < Josh> Is it what we know was lambda in C++ ?
09:05 < ome> Josh: yup, pretty much.
09:06 < Josh> Aha
09:06 < Gottox> Nasga: the IE guys did great stuff back in IE4, IE5.
09:06 < Gottox> But nothing since then.
09:06 < ome> 'io.sockets.on('connection', [](type sock{});' something like that.
09:06 < Josh> ome, he he yea
09:06 < Josh> [] <== resource allocateor
09:06 < Josh> allocator*
09:06 < gildean> Gottox: ie6 was pretty good when it was released, but got old pretty quickly as then the second act of browserwars commenced
09:07 < ome> yuppies. but considering that JavaScript is based on global scope, you don't need that. :)
09:08 < Josh> Ye
09:08 < Josh> Thanks ome 
09:08 < Nasga> Gottox: they keep a classic release system, witch is a advantage for companies
09:09 < Josh> ome, I am not that used to Javascript as much I am to C++ :P I am creating a proxy server to connect to server that I created in C++
09:09 < Josh> Hehe struggling here and there a bit
09:09 < Josh> Btw, a bit irrelevant.. But is there any nice way to create tabbed text area ....
09:09 < ome> Josh: ah, why would you do that though?
09:09 < Josh> Well, I think JQuery is a way.
09:10 < ome> question was for Node.js based proxy for a C++ server.
09:10 < Josh> ome, I have programmed a cross platform (lets hope it really works efficiently well on most platforms)  chat server with multichannels and such...
09:10 < Gottox> Nasga: we'll see how long it lasts. Win8 isn't what companies want.
09:10 < Josh> Plus voice support
09:10 < Josh> ome, Now I am adding webclient.
09:11 < Josh> How else do you think a webclient will be able to communicate with C++ server
09:11 < Josh> Unless I have some proxy server in between
09:11 < Nasga> Gottox: +1 :)
09:12 < ome> Josh: You can implement the sockets.io in C++, I defs recommend looking into libuv for your server and have a look into node.native for talking with socket.io from a webclient.
09:13 < Gottox> I really, really do not recommend to implement socket.io :D
09:13 < dawra> how do i go about using this in express3 https://github.com/starfish-prime/express-pagination
09:13 < Josh> ome, In my thoughts that would unnecessarily complicate the C++ server
09:13 < Cronoh> gottox why you recommend against socket io
09:13 < Josh> Gottox, I am already using socket.io
09:13 < Josh> But on client side and on proxy server.
09:14 < Josh> Not on C++ server itself.
09:14 < Gottox> I do not recommend against socket.io, but I recommend not to implement it :)
09:14 < ome> Josh: how so? libuv should make pretty much a lot of X-platform and asynchrose things easy and simple.
09:14 < Gottox> I did the client library in Java.
09:15 < Gottox> -implement+implement the protocol.
09:15 < tasslehoff> any reason why p.stdin.write shouldn't work on a running process that I get stdout/stderr from just fine?
09:15 < SomeoneWeird> because you made it angry
09:15 < SomeoneWeird> >.>
09:15 < SomeoneWeird> did you spawn it?
09:15 < Gottox> tasslehoff: you have to resume stdin before using it.
09:16 < Gottox> see http://nodejs.org/api/process.html#process_process_stdin
09:16 < tasslehoff> SomeoneWeird: yes
09:16 < tasslehoff> Gottox: thanks.
09:16 < rojuinex> been searching the net for this for a while. Anyone know how to redirect all std.out and std.error (including console.log and console.error) to a file stream?
09:16 < SomeoneWeird> node lol > lol
09:16 < SomeoneWeird> node lol > lol.txt
09:17 < Gottox> Does process.stdin = process.stderr = fs.createWriteStream(...) work?
09:18 < Gottox> -stdin+stdout
09:19 < Gottox> rojuinex: http://stackoverflow.com/questions/8393636/node-log-in-a-file-instead-of-the-console does this help?
09:20 < rojuinex> I've done that but for some reason it doesn't seem to work :/
09:21 < rojuinex> "Not working by me on windows... – inf3rno Sep 30 at 5:59" I wonder if it's just a windows thing
09:22 < SomeoneWeird> > windows
09:24 < dila> hello, what is the point in being able to create multiple run loops with uv_loop_new() if calling uv_run() blocks the thread?
09:24 < dila> how do i get uv_run() to execute in a thread?
09:27 < q88lsd> is there a way to debug node/v8 extensions with gdb?
09:27 < q88lsd> the c++ side that is
09:28 < dila> i was debugging it yesterday just by launching node in gdb...
09:29 < tasslehoff> Gottox: does this seem correct: http://pastebin.com/cZjbfcqe ? 
09:29 < dila> gdb --args node <file.js>
09:37 < rk8888> I have a PHP website in which I'd like to implement a notification/chat system. I was thinking to add node (and maybe redis) to the stack to do it. This is how I I'd implement it: User A does something that triggers the notification; the PHP script calls, with curl, to a node.js server; node.s delivers the notification via socket.io. if this makes any sense to you, I'd need some clarifications on how to do it. Anyone who is w
09:37 < rk8888> illing to explain?
09:52 < Emmanuel`> rk8888: why bother sending a notificatio nto the php server, that sends to node
09:53 < Emmanuel`> with socket.io, you can send directly to node
09:53 < Emmanuel`> from the client
09:54 < sumeet> start with node js guide ?
09:56 < rk8888> Emmanuel`, you're right
09:56 < rk8888> sumeet, I already did, but this stuff *seems* a bit more complicated that basic guides.
09:56 < rk8888> than*
09:57 < SomeoneWeird> socket.io
09:57 < SomeoneWeird> socket.io/#how-to-use
09:59 < rk8888> I have read about it, especially the part that is regarding "sending private messages", but... suppose I am sending a message to an id "123", if somebody else can get holf of that id, wouldn't he be able to get his messages/notifications? also I thought that .emit is sort of public (streamed to everyone and then filtered out by events, defined on the client)
10:08 < Pitel_IPEX> what is the recommended library for using priomises? I have function which should be firred only when 2 other async functions finishes.
10:11 < rk8888> Pitel_IPEX yea, it's called PHP
10:12 < gildean> Pitel_IPEX: have you checked the asyc-module?
10:13 < gildean> disregard any advice that include using php as an option
10:13 < mpfundstein> yeah async is the way to go
10:14 < Pitel_IPEX> gildean: https://github.com/caolan/async this?
10:14 < gildean> Pitel_IPEX: yep
10:14 < mpfundstein> how do you guys comment your code
10:15 < mpfundstein> for documentation purpose
10:18 < astropirate> mpfundstein, I use YUI docs
10:19 < mpfundstein> thx ill check it out, does it parse src files directly?
10:26 < tasslehoff> is kill() the proper way to terminate a subprocess? when I do that on a subprocess I handle stdout/stderr from I get http://pastebin.com/Z4swBLWJ
10:27 < tasslehoff> oh, perhaps because I call kill() inside my process.stdout.on - function..
10:31 < tasslehoff> so new Q: how can I kill my subprocess when I read a certain something on stdout?
10:34 < sandfox> soo much killing, why can't their be peace...
10:35 < sandfox> there even...
10:35 < sandfox> tasslehoff: why do you want to kill them? can't you send them a signal so they terminate themselves?
10:37 < RLa> i think there is no other way to kill than using signals
10:37 < RLa> other than immediately powering off the computer :)
10:37 < mpfundstein> if you spawn your process you get a pid
10:38 < mpfundstein> on a linux based system you can shell out kill <pid>
10:38 < RLa> kill command still sends a signal
10:38 < sandfox> mpfundstein: Thats the same as sending it a signal
10:38 < mpfundstein> yes
10:38 < sandfox> much cleaner to do it node
10:38 < mpfundstein> i was just giving him an option
10:39 < mpfundstein> ;-)
10:39 < RLa> kill() function in node also accepts signal argument
10:39 < RLa> can't remember what was the default
10:40 < mpfundstein> @tasslehoff: are you passing the childs pid to kill ? 
10:41 < SomeoneWeird> RLa, sigint
10:41 < SomeoneWeird> or sigkill
10:41 < SomeoneWeird> probably the latter
10:41 < mpfundstein> its sigterm btw
10:41 < RLa> sigkill looks bit rough
10:41 < SomeoneWeird> heh
10:41 < mpfundstein> process.kill(pid, [signal])#
10:41 < mpfundstein> Send a signal to a process. pid is the process id and signal is the string describing the signal to send. Signal names are strings like 'SIGINT' or 'SIGUSR1'. If omitted, the signal will be 'SIGTERM'. See kill(2) for more 
10:42 < SomeoneWeird> heh, yeah
10:49 < sandfox> if only there was the sig550 
10:53 < chakrit> is there a good way to make function(){ } an EventEmitter without resorting to __proto__?
10:54 < fotoflo> hi all,is there a way to get a debugger in node.js?
10:54 < fotoflo> sorry
10:54 < fotoflo> in ejs
10:58 < tasslehoff> late reply coming. went to lunch...
10:58 < tasslehoff> sandfox: the kill() function sends a signal, SIGTERM by default
10:59 < tasslehoff> mpfundstein: it is a subprocess I have spawned, and I do mysubp.kill()
10:59 < gildean> isn't the signal sent to a spawned child-process a sigint?
11:00 < gildean> or do i remember incorrectly
11:00 < gildean> no, it's sigterm
11:01 -!- mode/#node.js [+o piscisaureus_] by ChanServ
11:02 < tasslehoff> could the problem be that I call mysubp.kill() inside mysubp.stdout.on, or should that be ok?
11:04 < gildean> chakrit: yeah, i think the normal way is to use the util-module to make the constructor inherit the prototype of the eventemitter
11:04 < Josh> Asking socket.io question legit here?
11:04 < fotoflo> in javascript i can do this:  for(key in object){ console.log(  key + " : "+ object[key]) } and get a string name for key..           async.forEach(object, function(object.property, callback){      // How do I get the key name?            ) }
11:04 < Josh> seems #socket.io is dead currently :P
11:04 < gildean> chakrit: so like util.inherits(SomeFunc, events.EventEmitter);
11:05 < gildean> fotoflo: you can use Object.keys(object).forEach(function (key) {});
11:06 < fotoflo> .forEach   ?  in async?
11:07 < gildean> sorry i missed the async part
11:07 < Josh> gildean, is it legit ?
11:07 < Josh> :P
11:07 < deoxxa> Josh: feel free to ask, it's not off topic, but it might get drowned out by more node-specific questions
11:08 < deoxxa> (though right now it doesn't look that way)
11:08 < Josh> Well, I have this... http://ideone.com/zYYXHr on client side and this... http://ideone.com/SMLvOA on server side
11:08 < Josh> (its just the relevant part)
11:08 < astropirate> Anyone here using LAEH2 for error handling?
11:08 < Josh> But it seems I am not entering io.sockets.on('connection'
11:08 < Josh> For some reasons...
11:08 < Josh> While it should enter there as soon as line 2 from client side has done its work
11:09 < deoxxa> are you sure that MakeAddress thing is correct?
11:09 < Josh> Yes.
11:09 < deoxxa> doesn't look standard is all
11:10 < gildean> does socket.io connect to a http:// url?
11:10 < deoxxa> yeah
11:10 < Josh> var socket = io.connect('http://localhost'); <== paste from socket.io How to use page
11:10 < Josh> so yes.
11:11 < Josh> gildean, How else do you presume to connect to an HTTP server?
11:11 < gildean> so it does
11:11 < Josh> :D
11:11 < gildean> Josh: well not a http-server, a websocket server
11:11 < gildean> with either ws:// or wss://
11:11 < Josh> Uhh... If I am not wrong, I am connecting to an HTTP server...
11:11 < Josh> Which I have done several times in past
11:11 < gildean> yeah, socket.io does that
11:12 < deoxxa> usually that's correct, gildean, but socket.io is pants-on-head crazy
11:12 < Josh> :P
11:12 < gildean> i've only used plain websockets so it's been with a websocket-url
11:12 < deoxxa> it does an http handshake, then chooses what transport to use
11:12 < Josh> Yea
11:12 < deoxxa> why is facebook in polish for me
11:12 < deoxxa> :/
11:13 < Josh> I don't have facebook account yay
11:13 < Josh> Btw, I solved problem
11:13 < deoxxa> (just looking at the comment box on ideone)
11:13 < Josh> Thanks for hint deoxxa 
11:13 < fotoflo> so is there no way to get an inspector running inside ejs execution?
11:13 < Josh> Oh ideone does a lot of funny things deoxxa :D
11:13 < Josh> It can somehow take you to https:// too !
11:13 < deoxxa> if the MakeAddress thing is right, everything else looks like it should work fine
11:13 < Josh> all of a sudden
11:13 < deoxxa> ha
11:14 < Josh> deoxxa, I had 192.168.1.8 in addressbox
11:14 < Josh> While I was hosting server on localhost 
11:14 < deoxxa> ahh
11:14 < deoxxa> that'll do it
11:14 < Josh> i.e. 127.0.0.1
11:14 < Josh> Ye
11:14 < Josh> Thanks again :)
11:14 < deoxxa> no problem :D
11:15 < Josh> I don't know why I changed server to localhost anyway :3
11:15 < Josh> Changing it back to 192.168.1.8
11:19 < Somatt_wrk> anyone familiar with uglifyjs ? I'd like to know why it feels it should change the order of my scripts when minifying
11:19 < Josh> deoxxa, A small question, when hearbeat fails... Where the error can be captured.
11:19 < Josh> As I want to remove the particular client from node.js server
11:19 < Somatt_wrk> this doesn't happen when using the cli, but it does when using the npm module from a node script
11:19 < Josh> and also inform my C++ server.
11:20 < Josh> about disconnection of a particular 'dude'
11:20 < Josh> :P
11:39 < astropirate> What strategies do you guys employ when dealing with errors and exceptions with node? Specifically with an HTTP server. Would having 1 domain per request be the way to go?
11:46 < floby> astropirate: list all requests made by your page with chrome dev tools network panel, then test them all out with curl
11:47 < astropirate> floby, I'm not talking about debugging, i'm talking about error handling
11:47 < floby> oh sorry
11:47 < astropirate> np
11:49 -!- mode/#node.js [+o piscisaureus_] by ChanServ
11:51 < Josh> Well, I am about to read size sent from C++ using boost asio 's buffer... But I have no clue its BE or LE
11:51 < Josh> i.e. BigEndian or LittleEndian
11:52 < Kakera> unless you have a funny processor, it's always LE unless specified otherwise
11:53 < Josh> Kakera, Thank you.
12:13 -!- mode/#node.js [+o piscisaureus_] by ChanServ
12:21 < dileep> hello,i am using npm version1.0.106...but when i update it by using sudo npm update -g then it still shows me the same.how can i update that,any idea
12:22 < SomeoneWeird> download the latest node version
12:24 < dileep> any command for update the node latest version
12:24 < Kakera> dileep, ubuntu?
12:24 < dileep> yeah ,
12:24 < Kakera> https://launchpad.net/~chris-lea/+archive/node.js/
12:26 < Somatt_wrk> anyone familiar with uglifyjs ? I'd like to know why it feels it should change the order of my scripts when minifying. this doesn't happen when using the cli, but it does when using the npm module from a node script
12:26 < dileep> i m trying with sudo  node update
12:26 < gildean> dileep: sudo add-apt-repository ppa:chris-lea/node.js
12:26 < gildean> dileep: then sudo apt-get update && sudo apt-get upgrade
12:27 < dileep> kk
12:31 < dileep> gildean,if i using the command sudo-apt-gett update then it updatte ma entire system even ma cloud in which i m working,so wat to do
12:31 < SomeoneWeird> well your system should be uptodate anyway lol
12:31 < deoxxa> "even ma cloud in which i m working"
12:31 < deoxxa> this makes -no- sense
12:32 < gildean> dileep: apt-get update only updates the package-lists from repos
12:32 < deoxxa> dileep: this is so not a node problem. you just need to learn how to maintain a linux system.
12:32 < dileep> m working in  cloud 9 and i installed it locally
12:32 < gildean> upgrade upgrades, but you should do that anyways
12:32 < dileep> okk 
12:32 < dileep> okkk
12:36 -!- mode/#node.js [+o piscisaureus_] by ChanServ
12:40 < appr> function test() { var a = {}; console.log(a); a.tratata = 1; } why test() being executed in chrome console outputs Object tratata: 1 to console?
12:40 < deoxxa> appr: console.log isn't technically synchronous
12:41 < SomeoneWeird> it doesn't for me
12:41 < deoxxa> appr: also chrome does fun stuff with objects so you can "inspect" them
12:41 < SomeoneWeird> > function test() { var a = {}; console.log(a); a.tratata = 1; } 
12:41 < SomeoneWeird> undefined
12:41 < SomeoneWeird> oh
12:41  * SomeoneWeird facedesks
12:41  * deoxxa slow clap
12:41 < SomeoneWeird> SHOOSH
12:42 < deoxxa> http://www.youtube.com/watch?v=CP6v4T3VT7I
12:45 < appr> hmm thanks deoxxa
12:46 < appr> actually i'm trying to debug that https://gist.github.com/4258294
12:48 < appr> summary obj somehow isn't being reset to {} each time this.socket.emit is called
12:49 < squeakytoy> hey all, i am going to have a tech-talk about node.js on friday. However, I want to have some bench-marks pictures included. I cant find any decent results on the internet, anyone got a decent site with node.js benchmaking compared to other services?
12:50 < deoxxa> i benchmarked node.js and compared it to beetles carrying small fragments of wood
12:50 < deoxxa> if that helps
12:50 < funkbox> just put up a slide that says "web scale" and talk about how you've heard of things
12:50 < Gottox> deoxxa: :D
12:50 < deoxxa> (what i'm saying is that benchmarking node.js with any kind of meaning is a little bit hard)
12:50 < funkbox> like this one company (you forget the name) but they were getting 100k req/day per beetle
12:51 < SomeoneWeird> hahahahahahah
12:51 < deoxxa> lol
12:51 < deoxxa> squeakytoy: most of what you find on the net will be microbenchmarks - how many rps with hello world, etc
12:51 < funkbox> which is useless
12:51 < deoxxa> squeakytoy: what you might want to talk about is how amazing v8 is, because that's really where you're going to be able to pull out some impressive numbers
12:51 < funkbox> there are things node is good at and things it's bad at
12:52 < funkbox> and anyone making a decision based on a benchmark is doing it wrong
12:52 < deoxxa> mmm
12:52 < deoxxa> lol @ 100k req/day per beetle
12:52 < squeakytoy> well, i am going to present the pros and cons
12:52 < guor_> i think he is more thinking about throughput of node.js compared to other webservers?
12:52 < deoxxa> node isn't a web server
12:52 < funkbox> that can mean so many things 
12:53 < gildean> squeakytoy: what kinds of benchmarks do you mean?
12:53 < squeakytoy> hm, something that tells the audience how powerful node.js can really be (when used in the right situation ofc)
12:54 < funkbox> but do also tell them about how javascript is the herpes of the internet
12:54 < deoxxa> you're never going to get rid of it!
12:54 < deoxxa> also sometimes it's there and you don't realise
12:55 < SomeoneWeird> goiz
12:55 < SomeoneWeird> stahp
12:55 < funkbox> yeah like this morning i was about to get on the train and there was a homeless man and BAM it turns out it's javascript
12:55 < squeakytoy> i found a website t hat has done 1 million requests, 20k concurrent, and node.js finishes them quicker than apache
12:55 < squeakytoy> hm
12:56 < deoxxa> cool?
12:56 < SomeoneWeird> lol
12:56 < deoxxa> squeakytoy: the speed is a cool point for node
12:56 < deoxxa> squeakytoy: but i think, after having spent 2 years writing production code with it, the real win is just how much fun it is
12:56 < tasslehoff> how does one kill off a spawned subprocess when done with it? mine seems destined not to go down without a fight, and no matter where I put kill() my app crashes :)
12:57 < SomeoneWeird> how are you killing it tasslehoff ?
12:57 < SomeoneWeird> got example code?
12:57 < jonaslund> someone running win8 ?
12:57 < deoxxa> squeakytoy: when i go to work on a new problem in node, i don't go "ughhhhhhh" like i would in some other languages (i'm looking at you, php) - it's just so much easier to crank out an idea and turn it into some sort of workable code with node.js
12:57 < deoxxa> squeakytoy: and i 100% believe that the "fun" factor directly affects my productivity in a rather drastic way
12:57 < SomeoneWeird> AND THEN YOU MAKE IT A PACKAGE!
12:58 < deoxxa> SomeoneWeird: plz, components r the futur
12:59 < squeakytoy> okay, this is strange. I read on a blog about scalability. For a traditional, lets say apache, you scale by increasing number of threads or processes. He said, by adding more threads/processes, you will increase the memory usage due to the blocking IO. But according to this image.. node.js has higher memory usage: http://www.flickr.com/photos/maciejzgadzaj/5892373854/
12:59 < SomeoneWeird> well thats vertical scaling
13:00 < tasslehoff> SomeoneWeird: http://pastebin.com/QELP5K8D, also tried starting a timer and to it later, but no joy
13:01 < squeakytoy> SomeoneWeird, hm?
13:01 < SomeoneWeird> adding more resources.
13:01 < deoxxa> > you will increase the memory usage due to the blocking IO
13:01 < deoxxa> that makes no sense
13:01 < deoxxa> like, 0
13:02 < SomeoneWeird> yeah, lol
13:02 < squeakytoy> deoxxa, if you have blocking IO, you need to store more in the memory, no?
13:02 < deoxxa> scalability is all a sham anyway
13:02 < SomeoneWeird> tasslehoff, you may need to add pdshell.stdin.end()
13:02 < SomeoneWeird> after write
13:02 < deoxxa> squeakytoy: nnnope
13:02 < tasslehoff> SomeoneWeird: so simple.... thanks.
13:02 < squeakytoy> "Unfortunately, continuing to add threads introduces context switching overhead and uses considerable memory to maintain execution stacks."
13:02 < SomeoneWeird> work?
13:03 < deoxxa> squeakytoy: yeah but that's not anything to do with blocking IO
13:03 < deoxxa> squeakytoy: that's like saying "if you have more rocks it's heavier, and that's because some of them are brown"
13:04 < squeakytoy> deoxxa, oh, ok. I understand. But still, why is the memory usage higher in the graph, if another blogger says using multiple threads increases memory usage. They contridict each other?
13:04 < deoxxa> well, no, they're not in comparison
13:04 < squeakytoy> which of the comparisons?
13:04 < deoxxa> the apache guy is saying "more threads -> more memory"
13:05 < deoxxa> i'm guessing his graphs/numbers reflect that
13:05 < deoxxa> the node guy is probably saying "no threads -> less overhead" or something
13:05 < squeakytoy> deoxxa, yea. More threads, more memory. And then on another blog, You can see that node.js uses more memory
13:05 < deoxxa> yes... but... what?
13:05 < deoxxa> so you're comparing numbers from two different blogs
13:06 < deoxxa> which are on completely separate subjects
13:06 < deoxxa> and expecting them to...
13:06 < deoxxa> what?
13:06 < mpfundstein> :D
13:06 < mpfundstein> this whole scalabilty shit is anyway way to superficial . especially when it comes to this stupid hello world benchmarks
13:06 < deoxxa> yeah
13:06 < deoxxa> that's the main point here
13:06 < deoxxa> microbenchmarks are nearly useless
13:06 < squeakytoy> no, i am comparing the statements. One blog says that memory consumption will be higher with multiple threads (apache+php setup) while another blog has image saying that the node.js uses more memory.
13:07 < deoxxa> squeakytoy: does this image that says node.js uses more memory actually contain any reference to apache at all?
13:07 < squeakytoy> what doyou mean, any reference to apache?
13:07 < deoxxa> i mean are you comparing numbers from two completely separate graphs
13:07 < deoxxa> and acting like that makes any sense
13:07 < squeakytoy> deoxxa, http://farm6.static.flickr.com/5263/5892373854_f29c6203de.jpg
13:07 < deoxxa> because if you are...
13:08 < squeakytoy> deoxxa, no. You are not listening to me.
13:08 < chiel> hi there, i was wondering if anyone here has any experience with http-proxy
13:08 < deoxxa> ok, squeakytoy, i'm with you now
13:08 < chiel> is there a way to debug incoming requests to the proxy?
13:08 < deoxxa> squeakytoy: synthetic benchmark, synthetic result
13:09 < deoxxa> squeakytoy: there's probably a hundred different ways you could do that benchmark and get 100 different performance characteristics highlighted in that chart
13:09 < squeakytoy> deoxxa, according to the image, the 1million request benchmarks, node.js uses a lot more memory than the apache+php setup. So... the argument that multiple apache threads consumes more memory is.. flawed?
13:09 < chiel> i'd like to add a 404 basically, if no map is found for the incoming request
13:09 < deoxxa> squeakytoy: it's very, very hard to actually compare two vastly different systems
13:09 < mpfundstein> thats the thing
13:09 < mpfundstein> it also doesnt matter in this case
13:09 < squeakytoy> deoxxa, i think including memory into any results is maybe a bad idea
13:10 < mpfundstein> when you write a big app then you have to check which of your scripts is using what amount of memory
13:10 < squeakytoy> deoxxa, number of served requests is maybe better
13:10 < mpfundstein> than you can check if its domain specific or not
13:10 < deoxxa> or
13:10 < deoxxa> uh
13:10 < deoxxa> not relying on microbenchmarks
13:10 < deoxxa> "hello world" is not useful
13:10 < squeakytoy> well, is node.js fast?
13:10 < mpfundstein> if you write good code
13:10 < mpfundstein> :-)
13:10 < squeakytoy> where is the proof?
13:11 < deoxxa> sigh
13:11 < SomeoneWeird> X.x
13:11 < mpfundstein> ;-)
13:11  * deoxxa going to bed ->
13:11 < Gottox> node.js is optimised for pushing data around.
13:11 < mpfundstein> the proof squeakytoy is
13:11 < mpfundstein> that i wrote several servers in C
13:11 < Gottox> there is no proof.
13:12 < mpfundstein> and my standard was around 8000 req per sec
13:12 < mpfundstein> if no high computation was involved but just plain sql access etc
13:12 < mpfundstein> with node i get now the same results
13:12 < mpfundstein> but write 1/100 of the code
13:12 < mpfundstein> important is also not node itself when it comes to speed but which libraries you use
13:13 < Gottox> a proof if node.js is fast is like proofing if a hammer is good for building.
13:13 < mpfundstein> true
13:13 < mpfundstein> :-)
13:13 < Gottox> it depends on the task you're doing.
13:13 < mpfundstein> i think ill remember that statement
13:13 < mpfundstein> it depends also on the person using the hammer
13:14 < Gottox> true
13:15 < Gottox> If I work in a team the expertise of the members is an important factor for choosing the right language.
13:15 < mpfundstein> yeah but to be really honest
13:15 < mpfundstein> if you know one language
13:15 < mpfundstein> than its not heavy to dive into another one
13:15 < Josh> Of course it isn't.
13:16 < Josh> But remember, Sometimes it becomes a disadvantage too 
13:16 < Josh> at some scale :D
13:16 < Josh> If you know what I mean.
13:16 < Gottox> it's easy to write hello world in another language.
13:16 < mpfundstein> lol
13:16 < Gottox> but it takes some time to know all pitfalls of a language.
13:17 < Josh> And internal language working takes more than that.
13:18 < Gottox> If the team is into Java, I would show them node. But in my experience the java guys hate dynamic typed languages.
13:21 < mpfundstein> yeah java is like germany
13:21 < mpfundstein> node is like holland. do what you want :-)
13:21 < chiel> if anyone has experience with httpproxy: is it possible to proxy based on path alone (omitting hostname entirely)? i have a few servers running which i'd like to be proxied to based on the path used. for example /module1 would proxy to localhost:3000, /module2 would proxy to localhost:3001
13:22 < jonaslund> oh if only ES5 would've been it from day 1
13:26 < sgallagh> I'm curious: does anyone know when plans are to release the 0.9.4 development version?
13:27 < chiel> nobody using http-proxy then? :(
13:27 < mpfundstein> sorry
13:28 < mpfundstein> i only know how to do that with ha proxy
13:29 < chiel> mpfundstein: fair enough :)
13:30 < astropirate> damn why can't javascript have partially applied functions :(
13:30 < chiel> i don't mind much what proxy i use, but would like it to be in node :)
13:30 < sk8ball> Hi anyone point me toward some good resources for learning node?
13:30 < chiel> astropirate: you could always write curry functions yourself? :D
13:30 < sk8ball> any good free ebooks out there that are current?
13:30 < SomeoneWeird> nodebeginner.com
13:31 < SomeoneWeird> .org
13:31 < SomeoneWeird> woops
13:31 < SomeoneWeird> http://nodebeginner.org
13:33 < astropirate> chiel, yah...
13:33 < astropirate> its...
13:33 < astropirate> its.. just not the same :(
13:35 < bnoordhuis> sgallagh: maybe tonight
13:35 < bnoordhuis> if not tonight, at least soon
13:35 < sgallagh> bnoordhuis: Ah, great. Thanks. 0.9.4 is going to be the first accepted release into Fedora Rawhide (what will eventually become Fedora 19)
13:55 < sk8ball> someoneweird, yeah i ran across that site last night
13:55 < sk8ball> Does his outline reflect best practices?
13:57 < sk8ball> a few other resources like that would be nice... something up-to-date maybe an example RESTful database-driven web service ?
14:08 < mpfundstein> well if you wat to read over RESTful in general than there exists an awesome book about it: http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/0596529260
14:09 < mpfundstein> and in Node itself, i can recommend to dive into express if doing REST work
14:09 < LEDfan> Pffff. The app.js code you give here works perfect, but I can't split it into modules. I'm working with sockets.io.
14:14 < chiel> man, http-proxy is driving me crazy :p it seems like it *requires* the hostname to be present in the map :/
14:16 < mpfundstein> why wouldnt you use ha proxy
14:16 < mpfundstein> it is very mature, well tested and used by a lot of people -> knowledge base
14:17 < chiel> i'm not looking for load balancing, i'm looking for dynamic proxying in node :)
14:17 < chiel> httpproxy does what i want, except it requires the hostname
14:18 < mpfundstein> what you mean with dynamic proxying?
14:18 < mpfundstein> in haproxy you can see.. route all /cutestuff.io to a node process and all /nicestuff to a ruby process for example
14:18 < mpfundstein> say*
14:21 < chiel> mpfundstein: i have several directories, each of those is loaded when the server is started, only then will i know what needs to be proxied :)
14:22 < mpfundstein> ok. sorry i don't know about that :-)
14:22 < mpfundstein> ok what you could do is
14:22 < chiel> :)
14:22 < mpfundstein> you start the server, load your stuff
14:22 < mpfundstein> dynamically change the haproxy.conf
14:22 < mpfundstein> restart/start haproxy
14:24 < chiel> i guess
14:24 < chiel> it's not as ideal as if http proxy worked though :p
14:24 < chiel> I will look into a bit more, but ty for the suggestion :)
14:26 < mpfundstein> no problem
14:26 < mpfundstein> but it sounds like a nice patch for http proxy
14:28 < chiel> yeah, i might look into actually modifying it myself if i have a moment to spare :)
14:40 < sandfox> chiel: http-proxy compiles stuff down to regex ulttimately
15:03 < exit2> http://books.slashdot.org/story/12/12/09/1849256/book-review-sams-teach-yourself-nodejs-in-24-hours
15:03 < exit2> interesting
15:11 < exit2> wow lots of node haters on that slashdot post :|
15:15 < grampajoe> exit2, it's probably not so much hate as ignorance
15:15 < sandfox> hates gonna hate
15:16 < exit2> I've been pretty happy thus far using Node.js as an alternative to other server side frameworks thus far
15:30 < wao> )
15:30 < wao> php or ruby?
15:30 < wao> :>
15:31 < misteroneill> exit2: well, one it's slashdot, so you can expect lots of curmudgeonly snark. two, there are many technical people who don't understand javascript as a language and think it's either a toy (for amateurs) or a bad language because they never took the time to learn just how good it is
15:32 < eykosioux> you're asking this in a node.js room? haha
15:32 < exit2> misteroneill: yeah one dude commented something like "Oh great now I can do animations on the server"
15:34 < exit2> wao: ruby
15:35 < eykosioux> +1 for ruby
15:35 < mpfundstein> yeah , people are crazy biased about javascript. 
15:35 < mpfundstein> ruby is awesome but so is scala, so is lisp and so is C
15:35 < mpfundstein> this whole language war is anyone full of bs
15:35 < SomeoneWeird> use the right lang for the job
15:35 < mpfundstein> word
15:36 -!- mode/#node.js [+o bnoordhuis] by ChanServ
15:36 < tomshreds> Hi guys, anyone has an example of how I could iterate through lines of a file using streams?
15:36 < exit2> or just use one you like
15:39 < wao> guys, java forever
15:39 < wao> :p
15:40 < floby> tomshreds: https://github.com/Floby/node-lines
15:40 < floby> a little old though
15:40 < joehoyle> Hey all, I am using auth_basic and rewrite rules (for wordpress), however I cant find a way to turn auth_basic off for a speific URL, as it seems "location" matches the routed file (index.php) got teh requested URL?
15:40 < joehoyle> ack, wrong channel!
15:41 < eykosioux> are you serious :P
15:43 < tomshreds> thanks floby
15:54 < sandfox> tomshreds: have a look in npm for carrier
15:55 < sandfox> tomshreds: https://npmjs.org/package/carrier
15:55 < Wes-> I'm looking at the node.js net module documentation; the sample echo server calls a method on socket named 'pipe', but there doesn't seem to be any documentation for it... anybody know what it does, or where it inherits from?
15:56 < brianc> Wes-: http://nodejs.org/api/stream.html#stream_stream_pipe_destination_options
15:57 < Wes-> brianc: AH! Thank you!
16:05 < jhsto> Does anybody have an idea why my CORS connection to websocket works fine only as long as I don't attempt to make a POST action?
16:16 < _ior> hi, i'm somewhat new to node and i'm sure this has been asked before but i cannot seem to find the answer: i'm trying to upload a file using a form and formidable package. of course, i have some intermediate steps between receiving the request and handling the form upload. so i buffer the data chunks, deal with other stuff, and when my handler finally gets called, i req.removeAllListeners('data'); and then form.parse(req, callbac
16:16 < _ior> yet i still get nothing. things like: Parse Error: 0 out of 63 bytes parsed.
16:16 < _ior> i'm kinda at a loss at what to try next, all tips appreciated
16:17 < warz> _ior, have you set the form's enctype property?
16:18 < _ior> enctype="multipart/form-data"
16:18 < warz> hm generally formidable has worked for me out of the box, as long as that is set
16:18 < _ior> well i certainly copy-pasted the example and that works fine
16:18 < warz> i dont use it often but i have used it before, anyway
16:19 < _ior> the problem, of course, is that i have other things i need to do with data events besides just formidable :)
16:19 < _ior> thus the buffering, and etc. took me a bit to gather that form.parse required actually listening to data events
16:19 < _ior> and if they were emitted before it got called, well, too bad! :)
16:26 < _ior> well, thanks anyway warz
16:27 < warz> _ior, sorry for not having the solution. it sounds like youre doing some custom stuff and without seeing a code paste or something its going to be tough to know what youre doing.
16:28 < warz> even then though, i dont use formidable frequently, so i probably wouldnt have the answer regardless, unless it was something obvious
16:29 < _ior> yeah hmm
16:29 < _ior> i suspect i'm doing something wrong with the buffering
16:29 < _ior> let me see if i can cut relevant parts
16:31 < _ior> here's a paste of what i think are the only relevant bits:
16:31 < _ior> http://pastebin.com/K1dbmMmc
16:31 < astropirate> soo.. friends..
16:31 < astropirate> Whos hiring?
16:31 < _ior> i know it's overcomplicated with the extra path variables in the url parsing, but that was just to make sure i really wasn't missing a trigger somewhere :)
16:50 < brianc> i second astropirate's question
16:52 < mscdex> i second brianc's question
16:53 < zomg> I'll hire you... I just won't pay you
16:53 < zomg> :D
16:53 < mscdex> zomg nowai
16:53 < mscdex> volunteer.js
16:53 < mscdex> today feels like a good day to release a module
16:57 < marlboroman> hi all.
16:57 < marlboroman> how can i access a variable from app.js in an express controller?
17:02 < mAritz> marlboroman: there's #express for expressjs centered questions. but even there you'll have to be a bit more specific. best practice would be to provide a pastebin/gist that demonstrataes the problem.
17:04 < marlboroman> thanks mAritz 
17:05 < mAritz> From your question I assume you want to access a variable from another file that was defined where you're requiring said other file. there are multiple ways to do this: registry, pass-in function, memcache/redis/othervariablecache and more. all depends on your usecase and needs.
17:08 < mAritz> Btw: I can hire someone. I pay about two fiddy a month.
17:08 < mAritz> oh, damnit... three fiddy
17:08 < mAritz> *tree
17:08 < mAritz> i fail hard
17:13 < invisib1> Node seems really fast compared to standard webapps. Is that true or am I stupid?
17:13 < zomg> invisib1: it depends what you're doing I suppose :)
17:13 < zomg> Node is pretty fast for sure
17:14 < mAritz> it's really slow when it comes to creating black holes. there have been none finished as far as i know.
17:15 < Steve^> I have made some local modifications to a module, that won't be in the npm repositories for some time. What can I do to allow me to use it via npm install?
17:15 < mAritz> Steve^: npm link might be for you
17:15 < Steve^> npm link requires root, which is something I won't have for this particular situation
17:15 < mAritz> or release it as a version like v0.1notactuallyarelease
17:16 < mAritz> but look at the version number help first
17:16 < mAritz> you can also npm install /some/dir/to/custom/module/
17:17 < mAritz> even npm install github.com/user/repo/downloadtarballurlnotsurewhatitiisrightnow.tar.gz
17:18 < mAritz> Steve^: or you can go balls to the wall and run your own npm registry server
17:18 < Steve^> Hmm, that doesn't sounds like the easiest option :)
17:19 < mAritz> it absolutely is not. but there are articles about how to do it somewhere if you want to do something crazy :D
17:19 < invisib1> zomg: There are things out there that run on Node like templating engines, etc. Would it make sense to set up a Rails webapp for the bulk of functionality, and create a Node worker to run a templating engine with data handed off by Rails, or should I just cut Node out of the loop completely?
17:19 < mAritz> Steve^: but one of those solutions surely must be right for you?! :)
17:19 < Steve^> mAritz, I think custom tars will suit what I need it for - I can see that `publish` will create a module (perhaps in a tar) based on an .npmignore.. can I do that without the actual publishing step?
17:20 < invisib1> I'm a pretty big newbie in case you can't tell. :)
17:21 < gildean> invisib1: i'd rather cut ror out of the equation
17:21 < zomg> invisib1: nah it wouldn't make any sense to do that I think, you'd be better off having the whole system either in rails or node as said by gildean 
17:21 < mAritz> invisib1: no, not really. that seems terrible actually, with the exception of slowly changing your codebase completly to node.
17:22 < invisib1> What are the pros and cons of each approach?
17:22 < zoned> is there any tool for node that can read your DB models and generate CRUD code?
17:22 < mAritz> pro of node: no ror, con of node: uh... wrong channel to ask that ;D
17:23 < invisib1> I'd really like to get into Node. It seems there are a lot of tools popping up by single programmers, so it must be the tool they're using to create these apps (Node)
17:23 < zomg> invisib1: node is pretty easy to use for things that involve any sort of real time messaging/processing or such
17:23 < zomg> that's in my opinion the biggest pro of node
17:23 < zomg> well, at least one of the biggest :)
17:24 < invisib1> Yeah seems that way
17:24 < invisib1> But that's a pretty big pro
17:24 < invisib1> Can it generate APIs? Can you use it as a mobile app pretty easily?
17:25 < mAritz> mobile has nothing to do with backend, does it?!
17:26 < zoned> if you need your phone to run a web server i guess
17:26 < Rolken> i think he's asking something along the lines of, can you drop in a schema and poof make a rest api
17:26 < edmellum> Node.js is an evented, non-blocking I/O library built on top of V8. It can do anything really but focuses on networked applications. Whatever you can do with Ruby, Node.js can do.
17:26 < alexhancock> What do you mean by "generate" APIs? If it's scaffolding and basic model/controller boilerplate generation you're looking for, you might be better off with rails
17:26 < zoned> alexhancock: is there anything like that for node yet?
17:26 < mAritz> there are modules for node that do scaffolding and such
17:26 < edmellum> If you want to know if certain libraries exist you should probably go to Google or npmjs.org and search for a bit.
17:27 < mAritz> zoned: plenty
17:27 < invisib1> Rolken: Yes :)
17:27 < Rolken> invisib1: if you want a mobile backend fast though, solutions like parse or stackmob might be more what you're looking for
17:27 < alexhancock> http://railwayjs.com/ is one that mimics rails
17:28 < invisib1> How cool :}
17:28 < Rolken> (with my most recent mobile app i started on stackmob and have been gradually transitioning to finer control as the product design narrows down and i have time to focus on all the details of the implementation)
17:28 < alexhancock> I don't have experience with using it, I just googled "nodejs scaffolding", so use at your own risk :P
17:29 < zoned> ahh ok
17:29 < Rolken> those kinds of resources are great if you wouldn't mind the strong possibilities that a) they will be completely different in six months, or b) they will be completely dead in six months
17:30 < invisib1> Ok, so Node is like a server-side language that runs via JS.
17:30 < Rolken> node makes JS a server-side language
17:30 < invisib1> Is it like a worker? Like Celery (if you've used Django)
17:30 < alexhancock> I think the biggest question with using node in a production setting at this point is... How much trouble will you get in if it falls over and you can't figure out why right away?
17:31 < matbee> alexhancock, than you were never a javascript dev
17:32 < invisib1> What do you mean?
17:32 < invisib1> Node's stable right?
17:32 < alexhancock> I love node, but the debugability is still somewhat in its infancy. It's possible that's changed recently though and I haven't been keeping up.
17:32 < matbee> don't use node if you suck at javascript
17:32 < edmellum> Have you tried Node inspector?
17:32 < matbee> what's so hard to understand?
17:32 < edmellum> It's existed for quite a while now.
17:33 < Steve^> Aha mAritz, "Git URLs as Dependencies" might be even better than a tar!
17:34 < invisib1> Is there a Node GUI Admin by chance? :}
17:34 < invisib1> Like Node CMS?
17:34 < matbee> what the fuck
17:34 < mAritz> Steve^: that's what i meant with npm install github.com/user/repo/tarballuriwhateveritis.tar.gz ;)
17:34 < mAritz> urls have to point to tarballs though, afaik
17:34 < matbee> Why would you want a node gui?!
17:34 < matbee> what exactly would it do
17:34 < mAritz> invisib1: i think you still don't quite understand what node is.
17:35 < matbee> frofl
17:35 < mAritz> have you checked the examples on nodejs.org?
17:35 < matbee> invisib1, go look at nodejs.org and then if you have questions, please think first ;)
17:35 < alexhancock> Oh, yeah I love node inspector, and love working in node personally, but I'm talking about large scale debugging of site event scale problems. "The service just died" kind of things. You can't get a core dump in Node.
17:35 < mAritz> matbee: be a little nicer please :/
17:35 < invisib1> mAritz: Yeah I think you're right. :(
17:35 < invisib1> Seems like a server-side language
17:35 < invisib1> Like PHP
17:35 < alexhancock> The guys at joyent are working on it, and it will come with time.
17:35 < zoned> a node CMS is a fair question
17:35 < mAritz> invisib1: yes
17:36 < matbee> CMS, yes, node gui-- no.
17:36 < mAritz> alexhancock: afaik smartos+dtrace is pretty great for that.
17:36 < matbee> but a node CMS is an application built on top of nodejs
17:36 < invisib1> matbee: I meant like an admin interface for working with models
17:36 < matbee> wordpress != php
17:36 < invisib1> ... I know...
17:36 < mAritz> what models?
17:37 < invisib1> You model stuff in Node?
17:37 < mAritz> models are something a framework on top of node might define
17:37 < invisib1> Node work on MVC?
17:37 < matbee> okay I can't look
17:37 < mAritz> that framework then may have an admin gui, or it may not
17:37 < invisib1> mat, ignore me, I hate you. :)
17:37 < invisib1> Ok, are there any out there like it?
17:38 < mAritz> for example i have a redis orm (yeah yeah, i know... works great for me :P) and i have an admin webinterface for that (very very small feature set so far though)
17:38 < edmellum> alexhancock: can't you do that with dtrace on Joyent?
17:38 < mAritz> invisib1: depends on what you want
17:39 < mAritz> invisib1: you can still use phpmyadmin and use some mysql models
17:39 < mAritz> that's the easiest version
17:39 < context> phpmyadmin? ew
17:39 < mAritz> or whatever mysql interface
17:39 < alexhancock> Yeah, so you probably can now. I saw a talk by David Pacheco a couple months ago and they were working on tools for people to be able to use. I just didn't know how robust they had gotten
17:39 < mAritz> mysql client for all i care :P
17:40 < mAritz> alexhancock: i think i saw an article about joyent+dtrace ~ a year ago
17:40 < mAritz> but it's not perfect, that's for sure
17:40 < mAritz> it's no emacs
17:40  * mAritz runs.
17:40 < _ior> hahaha
17:40 < darach_> Tervela tvanode (support for tervela's hardware accelerated messaging platform) within node http://www.tervela.com/a-node-js-module-for-parallelized-applications On Github https://github.com/Tervela/tvanode <- Tervela is seriously salacious hardware b.t.w...
17:41 < _ior> i avoided js for years because i didn't like what i saw in 97. i'm just getting into it now, mostly because of node, but i gotta say, having worked with elisp made learning js easier :)
17:41 < zomg> haha
17:41 < zomg> yeah JS was awful back in the day...
17:41 < zomg> especially if you had to make it work in more than one browser
17:41 < zomg> :P
17:41 < zoned> i avoided JS until jquery
17:41 < zoned> then fell in love
17:42 < _ior> there is something just a little beautiful about node+jquery. single language across entire tech stack...
17:44 < superjoe> uh
17:44 < superjoe> no there isn't
17:44 < superjoe> jquery, really?
17:45 < joemccann> dillinger.io getting ECONNREFUSED….again 
17:45 < joemccann> :/
17:45 < mAritz> it's beautiful because it isn't ext.js
17:45 < joemccann> whoops
17:45 < joemccann> wrong window
17:45 < mAritz> ;D
17:45 < _ior> so since there's fewer idle people than when i first asked, perhaps i may ask again: i'm pretty new to node and trying to get a file upload going with formidable. i have other things that need doing between server request and form handling, though, so for formidable i buffer chunks on data events, then in the handler, i removeAllListeners, declare my form.parse callback, and then pop data chunks and emit new data events
17:45 < _ior> like this: http://pastebin.com/ibmr73wc
17:45 < _ior> but all i get are things like: Error: Parser error: 0 out of 63 bytes parsed.
17:46 < _ior> all tips appreciated!
17:49 < invisib1> mAritz: Thanks for taking the time with my newb ass :)
17:49 < invisib1> So... the dreaded question.... What are some downsides to NodeJS when compared to things like Django or Rails?
17:49 < Youdaman> invisib1: lack of familiarity
17:50 < matbee> it's asynchronous
17:50 < Youdaman> invisib1: JavaScript vs Python or Ruby, Django and Rails are frameworks specifically for web/orm, Node is more low-level with libs on top for those things
17:50 < Youdaman> matbee: +1
17:51 < matbee> invisib1, honestly, getting out of the function () { return; } will be the biggest challenge (even for js devs)
17:51 < _ior> just hire lisp coders!
17:53 < invisib1> Not worried about the learning curve
17:53 < invisib1> Any good Node frameworks out there for web/orm?
17:53 < _ior> express seems to be dominant
17:53 < Youdaman> invisib1: typically Express for web but there are several
17:54 < _ior> also seems there's some rails-like frameworks built on express
17:54 < _ior> although why you would want to duplicate rails in node ... i'm not entirely sure
17:54 < Youdaman> invisib1: orm depends on your db -- per db there are several bindings/libs/orms
17:54 < matbee> geekenn, go to bed.
17:55 < mAritz> _ior: from the nodejs.org/api: Note that the data will be lost if there is no listener when a Readable Stream emits a 'data' event.
17:56 < mAritz> So, the problem is likely that by the time formidable listens for data events, there is no data left.
17:56 < mAritz> It'll go straight to the end event and that causes problems
17:57 < _ior> hmm
17:57 < mAritz> if you absolutely have to wait for something or do something before setting the formidable listener, you can give formidable a custom readable stream and pump the file in from what you read out yourself
17:57 < invisib1> Youdaman: Prefer MySQL but I'm open to learning new stuff. Is db user-preference or are there some that obviously work with Node much better? 
17:58 < mAritz> _ior: i'm not a 100% sure that that's what your problem is and if that's the best fix. but it's the best i can come up with right now ^^
17:58 < _ior> so my buffering solution isn't sufficient? where i manually emit new 'data' events?
17:59 < _ior> should i also capture the 'end' event and emit it on my last data emit? :)
17:59 < mAritz> as far as i know if you subscribe to a readable stream when it has already ended, it'll immediately end again
17:59 < mAritz> not sure though, test it ;)
17:59 < _ior> haha hm right
17:59 < _ior> maybe i'll just try buffering with a stream object instead, okay
17:59 < _ior> it's a good suggetion
18:00 < Orbitrix> u just got chode in the node
18:00 < Orbitrix> futher mucker
18:00 < Orbitrix> prepare for a futt bucking
18:01 < codingstream> all of my what
18:01 < Orbitrix> inside your who?
18:01 < Youdaman> invisb1: user preference. maybe stick with mysql to start with so that your Node-learning doesn't involve db-learning also
18:01 < Orbitrix> i learned Redis alongside Node and Socket.io
18:01 < Orbitrix> wasnt too bad
18:02 < Orbitrix> but thats probably a good suggestion
18:02 < Youdaman> invisib1: and if you want to branch out, have a look at some of the "nosql" (non-relational) dbs
18:02 < Orbitrix> god was my mind blown when i finally figured out how it all fit together tho
18:02 < Orbitrix> really inspired me to keep coding
18:02 < Youdaman> Orbitrix: it's a nice high :)
18:05 < Orbitrix> Youdaman whats your Non relational db of choice?
18:07 < Youdaman> at the moment it's CouchDB
18:07 < Orbitrix> thats cool, i've only read a few comparisons, and only actually used Redis
18:07 < Youdaman> everyone seems to be going for MongoDB
18:07 < Youdaman> ah ok
18:07 < Orbitrix> Yea i'd agree, most tutorials i see lean MongoDB
18:07 < Youdaman> Orbitrix: http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis
18:08 < Youdaman> that helped me
18:08 < Orbitrix> aaaaah ok, i can see why generally more ppl use MongoDB
18:08 < Orbitrix> Main point: Retains some friendly properties of SQL. (Query, index)
18:09 < Orbitrix> so its kind of a user friendly transitional DB, where u get a lil bit of both worlds
18:09 < Orbitrix> i like my choice in Redis as a hardcore Non-relational only db
18:09 < Orbitrix> if i need SQL i'll run Postgre
18:09 < Youdaman> ^
18:09 < matbee> Yeah, MongoDB is really awesome for that
18:10 < matbee> but it really is fast as fuck
18:10 < matbee> :)
18:11 < Youdaman> CouchDB and some others require some meditation on how map/reduce works, but once you realise it's just "return a list of results keyed by some property" for maps, and "perform some operation on that list to reduce it and get back one or more calculated values (like sum or average)" for reduce, you're dandy
18:11 < chomwitt> is req.on an abbrevation of http.ClientRequest.on ?
18:13 < Orbitrix> very interesting Youdaman, so much to learn still haha
18:13 < Orbitrix> chomwitt, are u using Express?
18:13 < mAritz> Youdaman: aren't map/reduce exactly the same as js map/reduce?!
18:13 < chomwitt> Orbitrix: no
18:14 < chomwitt> Orbitrix: i'm reading a book on node.js
18:14 < Youdaman> mAritz: pretty much -- i mean, map is map, and reduce is reduce
18:14 < mAritz> chomwitt: what exactly is req in your case?
18:15 < chomwitt> mAritz: it appears in a callback(closure?) given ti http.createServer
18:15 < chomwitt> given in
18:15 < Youdaman> brb catching Zs
18:16 < mAritz> chomwitt: http://nodejs.org/api/http.html#http_http_createserver_requestlistener and from there you go to http://nodejs.org/api/http.html#http_event_request
18:16 < mAritz> which is like 5 lines below
18:17 < Orbitrix> i think to answer your question chomwitt: no, its not 'just an abreviation'.   It might inherit its functionality from that object, but its not just a reference to it
18:18 < mAritz> in other words: you had it almost correct... kinda :D
18:18 < mAritz> Orbitrix: except it's http.ServerRequest, not http.ClientRequest
18:18 < Orbitrix> aaaaah i see
18:18 <@isaacs> mAritz: unless you'er a client :)
18:18 <@isaacs> mAritz: then it's http.ClientRequest
18:19 < mAritz> but he asked for the http.createServer functin (req)
18:19 <@isaacs> but the "on" function actually === EventEmitter.prototype.on in eihter case.
18:19 <@isaacs> mAritz: oh, ok
18:19 <@isaacs> then yes :)
18:19 < mAritz> :P
18:19  * Orbitrix swirls his thumb around the rim of your puckering nodehole
18:19 < Orbitrix> its getting hot n' nerdy in here
18:19 <@isaacs> EventEmitter -> IncomingMessage -> (ServerRequest, ClientResponse)
18:20 < mAritz> isaacs: how come http is marked as stable in the docs while stream is experimental? isn't http using stream? :D
18:20 < mAritz> err, stream is unstable
18:20 < niggler> what does stable mean mAritz
18:21 <@isaacs> mAritz: because the http API is going to be maintained, even if the underlying code changes.
18:21 < RLa> mAritz, i think it means API stability not implementation
18:21 <@isaacs> mAritz: the bits of the http api that are streams will change somewhat in 0.10
18:21 < mAritz> ohhh, okay. sorry
18:21 < mAritz> makes perfect sense :)
18:22 < mAritz> oh god, it's even exaplained in the docs at the start
18:22 < mAritz> *explained
18:22 < Gabriel403> lol
18:23 <@isaacs> RLa: implementation stability would be "locked"
18:23 <@isaacs> RLa: as in, "We are not changing it, don't bother sending a pull request."
18:24 <@isaacs> RLa: and actually, http might move to unstable in 0.10, since we may change the api somewhat in 0.12, but will still attempt to maintain backwards compatibility as much as possible.
18:26  * chomwitt thanks mAritz , isaacs , Orbitrix
18:26 < Orbitrix> joor welkomen
18:27 < Orbitrix> oooooo MaongoDB has "Sharding built-in"
18:28 < Orbitrix> i wonder how much harder/easier Redis is to scale without that bulletpoint
18:28 < Orbitrix> or if it has a comparable feature
18:29 < niggler> id like to try mangodb
18:29 < Orbitrix> does Mongo let u set key expirations, or "TTL" (time to live) like Redis?
18:30 < rendar> Orbitrix: good question
18:30 < Orbitrix> been really loving that abaility with NoSQL on redis
18:30 < mAritz> niggler: i'm afraid it's not the season for that.
18:30 < Orbitrix> been using it to setup rate-limitting for lots of stuff
18:37 < eskaki> I'm replicating npmjs registry, does any body know how big it is ? 
18:37 < niggler> check out hoarders
18:37 < eskaki> is the operation resumable ?
18:38 < st_luke> eskaki: 24 GB on my replicated npm
18:38 < eskaki> I'm following the github.com/isaacs/npmjs.org  instructions,   replication with curl -X POST
18:39 < eskaki> cool, thanks @st_luke,  if lose connection while replication, is possible to resume?
18:39 < st_luke> eskaki: so yeah, but that depends on the replication method you use
18:40 < st_luke> ok so it looks like the readme on isaacs's is using the older method which doesn't resume
18:40 < eskaki> I started with curl -X POST -H "Content-Type:application/json" \
18:40 < st_luke> what version of couch are you running? 1.0.0?
18:40 < eskaki>     http://localhost:5984/_replicate -d \
18:40 < eskaki>     '{"source":"http://isaacs.iriscouch.com/registry/", "target":"registry"}'
18:40 < st_luke> 1.2.0
18:40 < eskaki> 1.2
18:40 < st_luke> alright
18:40 < st_luke> https://gist.github.com/4165831
18:40 < eskaki> should I use futon instead? 
18:41 < st_luke> you don't have to
18:41 < st_luke> create a document like the one in that gist in the /_replicator db on your couch
18:41 < st_luke> you can put it via curl or put it in via futon
18:42 < st_luke> eskaki: if you use the /_replicator database on couch then your replication will resume
18:43 < eskaki> thanks
18:43 < eskaki>  where  should I save the replicated_db.json ?
18:45 < st_luke> eskaki: you're creating a document in the /_replicator database, so either PUT/POST it using something like curl or just create the doc using futon
18:45 < st_luke> use PUT if you want to use your own doc id
18:45 < st_luke> otherwise you can use POST and it will make you one
18:46 < eskaki> ok, interesting, thanks mate 
18:47 < st_luke> you might want to just replicate the couch first then install the couchapp parts, dunno if that's what the readme says or not, might be easier if you're new to some of the stuffs
18:52 < eskaki> yeah I'm really new to couch, I installed already couchapp module following the readme
18:52 < st_luke> no biggie
18:53 < st_luke> anyway have fun, couch is cool software
18:55 < eskaki> I'm trying 
18:56 < eskaki>  curl -X POST -H "Content-Type:application/json" http://localhost:5984/_replicator -d '{
18:56 < eskaki>    "_id": "npmjsRegistry",
18:56 < eskaki>    "source": "http://isaacs.iriscouch.com/registry/",
18:56 < eskaki>    "target": "localRegistry",
18:56 < eskaki>    "continuous": true,
18:56 < eskaki>    "user_ctx": {
18:56 < eskaki>        "name": "user",
18:56 < eskaki>        "roles": [
18:56 < eskaki>            "_admin"
18:56 < eskaki>        ]
18:56 < eskaki>    }
18:56 < eskaki> }'
18:56 < eskaki> I just got {"ok":true,"id":"npmjsRegistry","rev":"1-0bb00de595be9288b13b6db4e57bd3da"}
18:57 < eskaki> I think I have to read some docs to know what I'm doing
18:57 < st_luke> eskaki: are you substituting "user" with an admin user?
18:57 < eskaki> nop
18:57 < eskaki> shame 
18:59 < st_luke> eskaki: you can have curl read from a file also, might be easier if you're typing all that out on your cli
19:22 < PY1NB> folks, reading a socket, how can I delay it for N seconds? settimeout inside each message?
19:25 < mAritz> good question, i suppose setTimeout should do it, but will not be very good for performance if you have large amounts of traffic coming in
19:25 < mAritz> but as always: test and measure :)
19:27 < zoned> here's the delay function i always use http://pastebin.com/gYQaZUtD
19:29 < mAritz> zoned: that wouldn't work for a socket at all
19:30 < mAritz> if you get another packet before the timeout is over you overwrite your first packet?!
19:30 < mAritz> or chunk
19:33 < mclenithan> any freelancers doing a site for restaurants... https://github.com/mclenithan/restaurant  let me know what you think
19:34 < mbalho> as long as it doesnt have a flash intro you are doing good
19:34 < zoned> lol
19:34 < mmalecki> yes.
19:34 < niggler> node + flash?
19:35 < ehershey> argh
19:35 < mbalho> mclenithan: is there a demo page somewhere? you should add it to the project description as the url
19:35 < zoned> definitely needs a demo page
19:36 < serdem> mclenithan, you made restaurant site sith node :)
19:36 < serdem> witth* sith
19:36 < mAritz> haha, i like the naming:  public / javascripts / javascript.js
19:55 < PY1NB> thanks maritz and zoned
20:31 < nerph> anyone know if tedious is the most updated/best nom to use for connecting to MSSQL?
20:37 < drudge> nerph: from my experience, yes
20:37 < pyrotechnick> morning comrades
20:38 < pyrotechnick> anyone know a module for pulling an object out of another based on a schema?
20:39 < pyrotechnick> like extract({foo: 'bar', zip: {zig: 'zug', bleh: 'meh'}}, {foo: true, zip: {bleh: }})
20:39 < pyrotechnick> kinda thing
20:39 < pyrotechnick> and you don't get the zig: zug cuz it's not in the schema...
20:39 < pyrotechnick> i found a bunch to validate schemas and stuff but not extract them
20:45 < matbee> Sometimes I hate javascript-- not because there's somethign wrong with javascript-- but because people can abuse it so hard that it's impossible to work with :'(
20:46 < warz> it does remind me of php in that sense
20:46 < pyrotechnick> people can abuse anything
20:46 < pyrotechnick> what you'll find is you just have more noobs using JS because it's so accessible
20:47 < pyrotechnick> i think it's more the law of large numbers than anything intrinsic about JS itself other than its ubiquity
20:47 < freewil> people just like snow falling on their webpage
20:48 < pyrotechnick> yeah and JS is really the only thing that has been able to do that
20:48 < pyrotechnick> so all those types have been funnelled into using JS
20:48 < zoned> what i hate is that if you say "javascript developer" people assume you're an idiot or something. really, they're the idiots, but it's still annoying
20:49 < pyrotechnick> i don't really buy into large amounts of shitty code being a bad thing
20:49 < pyrotechnick> it's not really how the cosmos works
20:49 < pyrotechnick> usually that just means more "food" for those higher up in the food chain
20:49 < rudiX> i like trains
20:49 < pyrotechnick> i like turtles
20:49 < zoned> i like tits
20:50 < pyrotechnick> matbee: i share your sentiment though, if you do indeed have to come after they are finished desecrating a project and maintain it, you may as well run away
20:50 < rudiX> 3 Likes 
20:50 < rudiX> not bad
20:51 < pyrotechnick> matbee: rest assured they are punishing themselves for their shortsightedness
20:52 < pyrotechnick> matbee: working with bad JS is incredibly difficult, and while I'm not sure they can even recognise its badness not knowing anything better, i know they are struggling nonetheless
20:52 < pyrotechnick> you can see the countless hours of blind hacking and guessing and checking embedded in their code
20:52 < pyrotechnick> that's their punishment
20:56 < zoned> i thought that's how you're supposed to debug code
20:57 < pyrotechnick> no you're meant to use gdb
20:57 < TehShrike|Work> Huh, how come the querystring module is global instead of needing a require() like most of the other modules?
20:57 < pyrotechnick> although that seems to have changed in node it's like some JS repl now or something dodgy
20:58 < pyrotechnick> TehShrike|Work: where can i find it?
20:58 < TehShrike|Work> pyrotechnick: http://nodejs.org/api/querystring.html
20:58 < pyrotechnick> i mean where have you found it globally
20:58 < pyrotechnick> what should i look for in my repl
20:59 < TehShrike|Work> Just type querystring
20:59 < TehShrike|Work> No require() call needed
20:59 < pyrotechnick> its not there
20:59 < TehShrike|Work> What version are you on?
20:59 < pyrotechnick> what node?
20:59 < pyrotechnick> you first
20:59 < TehShrike|Work> node.js 0.8.x
20:59 < pyrotechnick> 15
20:59 < pyrotechnick> ?
20:59 < TehShrike|Work> Not certain.
20:59 < pyrotechnick> node -e 'console.log(process.versions)'   
20:59 < TehShrike|Work> .14 I think
21:00 < pyrotechnick> pm me that
21:00 < TehShrike|Work> It's 8.14
21:00 < pyrotechnick> then its something ur including
21:00 < pyrotechnick> is doing like
21:00 < TehShrike|Work> Nope
21:00 < pyrotechnick> global.querystring = require 'querystring'
21:00 < TehShrike|Work> I just run node at the command line
21:00 < TehShrike|Work> And type querystring, and I see the object with its functions
21:00 < pyrotechnick> oh it must be the repl
21:00 < pyrotechnick> coffee doesnt have it
21:01 < TehShrike|Work> I'm not using coffee :-P
21:01 < pyrotechnick> let me check the code
21:01 < mscdex> folgers.js
21:01 < TehShrike|Work> huh, maybe the repl just auto-includes all the core modules, and I didn't know about it until now
21:02 < pyrotechnick> i pm you the line from node/lib/repl.js
21:02 < TehShrike|Work> Very interesting, thanks
21:02 < TehShrike|Work> I didn't know about that
21:02 < pyrotechnick> https://github.com/joyent/node/blob/master/lib/repl.js#L71 for those of you playing at home
21:02 < pyrotechnick> me neither champ, this is why i answer q's in here
21:02 < mscdex> the repl does, but not until you type the module name first
21:02 < TehShrike|Work> :-D
21:02 < pyrotechnick> you get heaps pro like from all the random q's
21:03 < mscdex> there's an issue on the tracker for getting it to work from the get-go though
21:07 < TehShrike|Work> Yeah, it's too bad I can't just do querystring.parse(whatever) right away
21:08 < styol> Hrm… while iterating within a for loop that contains one or more async functions, how would one deal with the potential for errors and/or the need to not continue to the next iteration until all callbacks are reached? Is this possibly where the async module comes into play or does anyone have any other conceptual recommendations?
21:11 < rump> styol: a common way is to pass err to each callback
21:11 < rump> and then check for it at the beginning of each
21:11 < rump> if err throw err for example
21:12 < pyrotechnick> WOW
21:12 < pyrotechnick> gist.github.com
21:12 < pyrotechnick> wowowowowowowowowowowowow
21:12 < mmalecki> nice
21:12 < pyrotechnick> now that you can create files im srsly considering using github as an IDE aye
21:12 < styol> rump: an err is being passed to each callback, but it would appear that for continues to iterate regardless of whether the callback has been reached. In some scenarios it seems one might want to continue iterating regardless of issue, others it seems one might not want to continue until each iteration has completed
21:12 < pyrotechnick> its so crazy it might just work
21:14 < jrajav> pyrotechnick: Have fun working at Starbucks and losing net connection + all your work every five minutes
21:14 < rump> styol: see continuation passing syyle
21:14 < pyrotechnick> jrajav: have fun being a pessimist
21:14 < styol> rump: peeping now, thanks
21:15 < jrajav> Pointing out an obvious problem with using an online form field as a text editor is being a pessimist?
21:15 < jrajav> If I had said "That will never work lololol" I'd be a pessimist
21:15 < jrajav> But I hate being left out
21:15 < jrajav> That will never work lololol
21:16 < rump> jrajav++
21:17 < jrajav> There are several continuously syncing cloud IDE options right now, but as far as I know they're all subscription-based or too limited to work for even personal stuff, and none of them integrate with something like github
21:17 < jrajav> I could be wrong
21:17 < jrajav> Personally I'd like something like that, but they don't seem to be too mature just yet
21:18 < nitind> what about Orion?
21:18 < jrajav> I don't know, what about it?
21:19 < nitind> http://wiki.eclipse.org/Orion/How_Tos/Cloning_repository_from_github
21:20 < jrajav> Looks decent. I can't find anything about the pricing model, though
21:20 < nitind> There isn't one.
21:20 < jrajav> Yet? :P
21:20 < jrajav> Or is this just an Eclipse vehicle
21:21 < jrajav> That would be nice
21:21 < jrajav> Maybe I'll actually give it a try
21:21 < jrajav> I have a feeling I'll miss vim sooner rather than later
21:21 < brianc> anyone here going to the ATX web bash tonight?
21:23 < samholmes> What's hiredis?
21:23 < brianc> samholmes: hosted redis
21:24  * samholmes is going to setup a redis store for session data
21:24 < brianc> samholmes: nevermind, i was thinking of something else. ignore me
21:24 < styol> rump: hmm I think I'm already doing this, or I'm missing a subtle difference/point about how I'm not doing exactly this. Is it ok if I provide you with an example of what I was previously referring to?
21:24 < rump> linky
21:24 < samholmes> hiredis is a compiled driver for redis?
21:24 < styol> me makey
21:25 < samholmes> "If hiredis is installed, node_redis will use it by default. Otherwise, a pure JavaScript parser will be used." -- node_redis readme
21:25 < PY1NB> Is this client key set by node or socket.io? can I access it from my code? ¨set heartbeat interval for client cILo1_498UjK_JyO0hhh¨
21:25 < samholmes> Could someone confirm my conclusion?
21:26 < brianc> samholmes: confirmed 
21:26 < samholmes> Thanks you. :)
21:26 < samholmes> I don't need hiredis though, is node_redis' js parser fast enough for production?
21:27 < brianc> samholmes: yeah. 
21:27 < slaskis> samholmes: i think the js parser is even faster
21:27 < samholmes> awesome
21:27 < slaskis> or so i read somewhere
21:27 < samholmes> slaskis: no shit?
21:27 < samholmes> I'm reading the perf section on node_redis
21:28 < slaskis> let me see if i can find that
21:28 < samholmes> slaskis: Looks like JS is slightly slower
21:28 < slaskis> oh nvm 
21:28 < slaskis> yeah
21:28 < slaskis> i think it just was major improvements i read then
21:31 < samholmes> slaskis: I see
21:31 < samholmes> How do I install redis on Windows?
21:31 < samholmes> Is Windows supported well?
21:31 < samholmes> I have Git Bash, can I just run the commands off the redis download page?
21:35 < brianc> samholmes: afaik redis don't work on windows.  there's a fork maintained by some at microsoft that has worked for me in the past, but not for production, just for dev
21:35 < samholmes> brianc: that's all I  need reallly
21:38 < samholmes> brianc: which is better, microsoft's patch or dmajkic's module?
21:40 < brianc> samholmes: no idea
21:41 < nerph> i'm new to node.js and need to build backend services for a mobile application…  I'd like to use node, can someone recommend modules for building a REST server /w authentication?
21:41 < zoned> can microsoft and better be used together like that?
21:42 < bahaaldine> restify
21:43 < creatine> express
21:43 < matbee> ^--
21:43 < nerph> bahaaldine: does that contain API for authentication?
21:44 < indexzero> chjj: yt?
21:44 < nerph> so many packages in npm, it's hard to know which ones are still being updated and mature :)  especially for someone new to node (coming from Java/spring world).
21:45 < bahaaldine> nerph: not sure node-restify includes such api
21:46 < freewil> nerph, the npm package pages says when it was last updated
21:46 < freewil> on npmjs.org
21:47 < creatine> express does both
21:48 < matbee> im fairly sure restify supports auth as well...
21:49 < nerph> creatine: thanks, I had looked at using express /w bootstrap for the front end admin console  - i'll take a deeper look at using express for the restful services.
21:49 < nerph> some of the MBaaS are very $$$
21:49 < creatine> np mate
21:51 < DallonF> I'm trying to install dnode on Windows and it's failing at the node-gyp step, claiming it  can't find the Visual Studio 2010 build tools. But according to the node-gyp README, it should support Windows 8 and Visual Studio 2012, which I have installed
21:52 < TooTallNate> DallonF: pass --msvs_version=2012 to npm
21:52 < TooTallNate> DallonF: the current npm uses an older version of node-gyp, so you need to be explicit
21:52 < DallonF> TooTallNate, holy cow that worked
21:52 < DallonF> Thanks
21:52 < TooTallNate> :)
21:54 < creatine> anyone that could tell me why this query doesn't work? 'INSERT INTO users SET ?; CREATE DATABASE'+post.user+';', newUser, function(...
21:55 < creatine> it works in mysql
21:55 < creatine> but not node
21:55 < sha0coder> hi
21:57 < sha0coder> hi noders
21:59 < brianc> sha0coder: hai
21:59 < styol> rump: sorry for the delay, I think I was still trying to figure out more specifically what I was asking… http://pastie.org/private/ymv1fcvesnl9xjwlmqskba
22:00 < sha0coder> which is the best way to parse all entire mongodb catalog?
22:00 < sha0coder> should i use find() ?
22:01 < rump> styol: line 3 has redundancy btw
22:01 < rump> styol: you know that iteration complete fires before all your async functions complete right?
22:02 < styol> rump: line 3 is just to demonstrate the potential for an error
22:02 < styol> rump: I do realize that and I guess there in lies the question.. in some scenarios I've identified I'd like for iteration + callback completion to complete before deeming iteration complete
22:03 < rump> styol: i just mean (re line 3) that the comparison operator will return true or false without the need for ternary operator
22:04 < rump> styol: then you will need to check for that in the callback
22:04 < rump> you can never get back to the main program execution
22:05 -!- mode/#node.js [+o piscisaureus_] by ChanServ
22:05 < rump> like you i often times wish i could get back to main program execution or block flow after a callback completes but its gone forever
22:05 < rump> you can only continue passing it
22:07 < styol> rump: I see, yeah, there are some scenarios that there is potential for issue and it seems like in these scenarios that I've just got to ignore it (minus maybe a console.error()) less I return an error to the client's request before iteration completes.
22:08 < rump> get specific :)
22:08 < rump> on error you want to what
22:08 < nerph> IntelliJ looks like a pretty nice IDE for node...
22:10 < styol> rump: in some instances, stop this immediate iteration (i.e. using continue) and in other instances maybe save up a list of items that received errors to return to the client before sending a response.. perhaps it would be easier if I showed some literal code examples.. would PM be ok?
22:13 < rump> sec
22:17 < rump> styol: https://gist.github.com/4262811
22:17 < Leeol> Is there a builtin for subtracting one path from another? Eg: `/foo` from `/foo/bar/baz` returns `/bar/baz`
22:17 < Leeol> Actually tnhat should probably return "bar/baz", but yea.
22:19 < rump> styol: if err in done() could also shut a database down, close files, throw error messages and exit the program, whatever
22:23 < eskaki> wtf I just realize that while(i--) stops at 0  , but while(i --)  does not stop
22:23 < eskaki> how do you explain that
22:23 < eskaki> :o
22:24 < chilts> does for me
22:25 < chilts> does exactly the same thing
22:25 < chilts> so yours just carries on in the loop?
22:25 < eskaki> yes, to the negative
22:25 < eskaki> -1 , -2
22:25 < eskaki> … to -120398120393128
22:25 < eskaki> forever
22:26 < eskaki> v.0.8.8
22:26 < chilts> eskaki: http://paste.dollyfish.net.nz/fe6dcf
22:26 < chilts> (in the repl)
22:28 < eskaki> yes , in the repl, one sec, I'm reproducing it 
22:28 < eskaki> ok, is strange, because … 
22:30 < eskaki> … ok I found something
22:30 < astropirate> West coast folks: Know anyone hiring Node.js devs?
22:30 < eskaki> interesting
22:31 < sha0coder> i have a catalog with  40.000.000 entries
22:31 < sha0coder> and i need to parse one by one
22:32 < sha0coder> :/
22:32 < sha0coder> should i use a cursor?
22:32 < acidjazz> so in jade i have if this.exists (nl) .read (nl) .unread  ..then a blank linke then more jade markup.. how do i get jade to show the markup after the if no matter what??
22:33 < acidjazz> ^- forgot the else.. i have an else in there too
22:33 < astropirate> sha0coder, in this data is every line a new entry?
22:33 < sha0coder> yes
22:33 < sha0coder> small records
22:34 < sha0coder> a find().toArray() is too slow :/
22:34 < astropirate> sha0coder, i came across a really nifty package that lets you read line by line in a really nice way
22:34 < astropirate> if i cant find it :|
22:34 < sha0coder> astropirate, but is fast?
22:34 < eskaki> @chilts   var a = 0; while(a--){ console.log(a); }    //this works as expect
22:35 < astropirate> sha0coder,  I haven't gotten to test it yet :)
22:35 < astropirate> maybe you can tell me!
22:35 < eskaki> var a = 1; while(a--){ console.log(a); } while(a--){ console.log(a); }  // but this is infinite
22:35 < eskaki> doesn't make sense
22:36 < sha0coder> astropirate, i have tested a  find().toArray() -> console.log  but ...
22:36 < sha0coder> 89% cpu  and no output
22:36 < astropirate> wow you are reading the whole thing into memory?
22:36 < sha0coder> I should had used mysql :(
22:37 < sha0coder> astropirate, toArray load all
22:37 < sha0coder> i'm going to try a cursor
22:37 < sha0coder> like "it" from commandline
22:37 < astropirate> https://github.com/nickewing/line-reader
22:37 < astropirate> take a look at that too
22:38 < sha0coder> astropirate, this read lines from a file
22:38 < astropirate> sha0coder, what are you reading from?
22:39 < sha0coder> mongodb
22:39 < astropirate> details details details :p
22:39 < sha0coder> https://github.com/nickewing/line-reader/blob/master/lib/line_reader.js  <-- this is for reading a big text file?
22:40 < sha0coder> i need to read from a mongodb catalog
22:40 < astropirate> yes
22:40 < astropirate> I see
22:40 < sha0coder> does mongodb store the db on clreartext?
22:40 < astropirate> yes, you do need to use a cursor then
22:41 < astropirate> I don't think so
22:41 < sha0coder> :/
22:41 < sha0coder> ok, i try a cursor
22:44 < sha0coder> ok, cursor works ok
22:46 < astropirate> sha0coder, wonderful. I can take payment in the form of $USD$ or Gold Bricks 
22:54 < asterick> Question: anyone familiar with riak-js?
22:58 < CoverSlide> yeah it's crap. use nodiak
23:07 < asterick> CoverSlide: good to know.
23:11 < kristian_> anyone know if there is a way of having a know starting point for require statments?
23:11 < kristian_> as in replacing documents = require './../../lib/documents'  with require 'lib/documents'
23:11 < kristian_> Sort of get tired of counting directories
23:11 <@Nexxy> kristian_, path.resolve and __dirname
23:11 <@Nexxy> or similar global
23:11 < sayd> kristian_: requirejs.config({baseurl:'../..'})
23:11 < kristian_> Ahh sweet cheers I'll give it a go
23:12 <@Nexxy> there is also process.env vars
23:12 < sha0coder> wow
23:12 < sayd> the docs explain it. i have seen people say theybe had issues with node specifying baseUrl however
23:12 < sha0coder> the cursor: FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
23:13 < sha0coder> astropirate, 
23:13 < astropirate> LOL
23:13 < sha0coder> mongodb sucs :)
23:13 < sha0coder> prefer filesystem or sql
23:13 < yesdog_> sha0coder: you are slain
23:13 < astropirate> well actually, this is a Node problem
23:13 < niggler> mangodb
23:13 < astropirate> no a "problem"
23:13 < astropirate> its just running out of memory :)
23:14 < astropirate> I was surprised when you said you wanted to load all of that data into memory
23:14 < astropirate> do the math, and guestimate how much memory it might take up
23:14 < astropirate> at a minimum
23:14 < niggler> guesstimate
23:14 < sha0coder> astropirate, the cursor doesn't load all
23:15 < sha0coder> 88.9% of the mem
23:16 < mattsurabian> anyone have experience doing git pulls with any of the available node git modules?
23:16 < sha0coder> node doesn't flush the cursor parsed items?
23:17 < sha0coder> solution -> dump the mongo catalog to a file and uninstall mongo XD
23:18 < AAA_awright> mattsurabian: What do mean? What are you doing?
23:19 < mattsurabian> I'm just trying to pick a node package for working with a git repo
23:19 < mattsurabian> don't need a lot of functionality 
23:19 < mattsurabian> mostly pulling updated files
23:19 < ProLoser> where are npm packages installed?
23:19 < mattsurabian> at the moment nothing is installed, more looking for general experiences working with git and node
23:20 < mattsurabian> there are a few packages that provide a wrapper for the git command line
23:22 < ProLoser> where are node packages installed?
23:22 < sayd> mattsurabian: looks like there are quite a few. no idea how to pick
23:22 < mattsurabian> yeah sayd that's my issue heh
23:23 < mattsurabian> kid in a candy store problem
23:23 < sayd> mattsurabian: does the npm handle that kind of stuff?
23:23 < mscdex> oh no, there's a module called "nothing"
23:23 < mscdex> is that what you have installed? :P
23:23 < mattsurabian> :-p
23:23 < ProLoser> What is the path to the npm global install location?
23:24 < sayd> ProLoser: npm prefix -g 
23:25 < ProLoser> thanks
23:26 < mattsurabian> hah, I thought you were asking me
23:26 < mbalho> isaacs: the new github avatar is +1000
23:26 < mbalho> isaacs: i need to update mine now...
23:27 <@isaacs> mbalho: thanks
23:27 <@isaacs> mbalho: it's twitter also
23:27 <@isaacs> and https://npmjs.org/~isaacs
23:27 <@isaacs> THANKS TO THE MAGIC OF GRAVATAR!
23:30 < mattsurabian> love https://npmjs.org/package/willitmerge
23:32 < mattsurabian> seems like most of the git cli stop short of merge and pull, but fetch is supported
23:32 < mattsurabian> git cli wrapper node modules*
23:33 < mattsurabian> success! https://npmjs.org/package/gitty
23:33 < mattsurabian> thanks sayd
23:36 < deoxxa> mattsurabian: i had to do a double take at your nick
23:36 < mattsurabian> heh
23:36 <@isaacs> mattsurabian: "Matz isn't Arabian.  He's Japanese!"
23:40 < sayd> mattsurabian: np. i was looking at gitty as well. 
23:43 < mattsurabian> yeah it seems to provide a lot of support for the git cli
23:43 < prawnsalad> im using `require('http').get('http://localhost:8000/', ..);` which is always erroring out with ECONNREFUSED, but i can curl/browse to this URL without issue
23:44 < prawnsalad> how can i start to debug this? :/
23:47 < prawnsalad> seems to work for anything but localhost/127.0.0.1
23:48 < clever> prawnsalad: netstat -anp|grep 8000
23:49 < prawnsalad> clever: its windows, but this will do:
23:49 < prawnsalad> $ curl http://localhost:8000/
23:49 < prawnsalad> <!doctype html>
23:49 < prawnsalad> [..]
23:49 < clever> ah, netstat -ano | find "8000" then, i think thats the windows way
23:50 < clever> or just netstat -ano and manualy search for 8000
23:52 < prawnsalad> hmm thats helps. not listening on ipv4
23:52 < sha0coder> I need to flush memory from code, is it possible in node?
23:52 < deoxxa> sha0coder: wrong
23:52 < deoxxa> sha0coder: i mean, you don't need to do that
23:52 < clever> prawnsalad: ah, so node might be using v4 loopback, while curl used v6 loopback
23:52 < deoxxa> sha0coder: what makes you think you do?
23:52 < sha0coder> deoxxa, the memory usage rises, and the kernel oom kill the process
23:52 < prawnsalad> clever: nah the webserver is php, node is trying to access ipv4 most likely
23:53 < sha0coder> deoxxa, is a simple mongodb cursor with .each console.log
23:53 < deoxxa> sha0coder: ok, then no, you don't need to "flush memory"
23:53 < deoxxa> sha0coder: what you need to do is find your memory leak
23:53 < prawnsalad> ill change the php side to ipv4. thanks for the pointer :)
23:53 < deoxxa> (of which you have at least one)
23:53 < sha0coder> deoxxa, how¿
23:53 < deoxxa> sha0coder: well the lo-fi way is just to remove/comment chunks of code until the problem goes away
23:54 < deoxxa> sha0coder: or you could use a profiler (node-inspector, etc)
23:54 < prawnsalad> hunting memory leaks is black magic
23:54 < sha0coder> oks deoxxa, thnx
23:55 < deoxxa> sha0coder: maybe you could consider pausing the cursor or rate limiting it somehow
23:55 < deoxxa> sha0coder: streams are good at that
23:58 < sha0coder> deoxxa, oks,    a new without variable produces leaks?
23:58 < sha0coder> something(new Foo) ?
23:59 < sha0coder> something(new Foo()) 
23:59 < deoxxa> sha0coder: it shouldn't - unless you assign it to a variable that can never be cleaned up
23:59 < deoxxa> sha0coder: like if something() is `function something(thing) { global_array.push(thing); }'
--- Log closed Wed Dec 12 00:00:01 2012
