--- Log opened Thu Oct 04 00:00:09 2012
00:02 < Azra-el> Bryson... moving our just starting frontend admin interface for clients from flask/python to nodejs 
00:03 < Azra-el> auth/separate dashboards for separate clients... tables... charts etc
00:06 < samy_> got to go but thanks for your time anyway
00:07 < samy_> i'll look more deeply into it tomorrow
00:14 < Brandon_R> Hey guys i need some help
00:14 < Brandon_R> does anyone know of any libraries for scraping (request, jsdom etc) that works on windows 7?
00:14 < TehShrike> ...the version of node.js in the ubuntu package manager is 0.6.12? 8-|
00:17 < TehShrike> Brandon_R: you might have to elaborate on what all functionality you mean by "scraping"
00:17 < Brandon_R> http requesting and having the result be returned in a jquery apiesque api
00:17 < Brandon_R> basically request + jsdom
00:17 < Brandon_R> but it isn't compiling because i don't have a dev environment
00:17 < ChrisPartridge> Brandon_R: both those packages work on windows, well I know atleast request does
00:18 < Brandon_R> it is saying something about gyp etc
00:18 < TehShrike> Brandon_R: install the latest version of Python 2
00:18 < Brandon_R> can't
00:18 < Brandon_R> i;m on my moms laptop
00:18 < ChrisPartridge> :|
00:18 < Brandon_R> i just wanna test something real quick
00:21 < TehShrike> Brandon_R: have you looked at cheerio?
00:26 < PrabsUK> [NODESTER.com USERS] Hi, please can anyone help answer if its possible to access a node app over [HTTPS] on NODESTER.com? e.g https://[your-app-name].nodester.com
00:27 < kevin_> [mongoose users] I have a question about updating.  If I already have a user object, how to I save it?  I did a user.name = 'bob'; then user.save() but because email is unique, it error out.
00:28 < mmalecki> PrabsUK: I doubt it, but if I were you I'd start by trying to access that
00:28 < mmalecki> good news is, however, nodejitsu supports that just fine
00:31 < kevin_> LOl.. nevermind. it was trying to create a new document instead of updating it.. my bad..
00:39 < dpemmons> in a native module, is there a way to trigger a cleanup function on process.exit() ?
00:39 < jwulf_> failing to build nodejs 0.8.11-release using make 3.82
00:40 < jwulf_> getting an error: "*** mixed implicit and normal rules.  Stop."
00:41 < mmalecki> dpemmons: AtExit
00:45 < jwulf_> i opened an issue for it
00:45 < jwulf_> https://github.com/joyent/node/issues/4079
00:46 < dpemmons> mmalecki: that does the trick. Thanks!
00:48 < mmalecki> dpemmons: happy to help :)
01:17 < ang3lfir3> ne one working with neo4j in node ?
01:28 < ZacS1234> hey, anyone here have experience with node-zookeeper?
01:30 < AnonymousFunctio> WTF is zookeeper?
01:30 < AnonymousFunctio> Ha
01:31 < AnonymousFunctio> "Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination."
01:31 < ZacS1234> zookeeper.apache.org
01:38 < Slade-> is rabbitmq the mq of choice for nodejs?
01:41 < ZacS1234> Slade-, I know im using RabbitMQ, and so far haven't had any issues with it and node.js
01:41  * Slade- is thinking of embracing it
01:42 < monokrome> Anyone here familiar with brunch.io? I'm trying to figure out how to use it without a skeleton
01:42 < monokrome> Just the smallest base project it can create
01:42 < Slade-> ZacS1234: what lib are you using with it?
01:43 < ZacS1234> Slade-, amqp
01:43 < Slade-> ah no wrappers for it?
01:44 < ZacS1234> not that we are using currently
01:44 < Slade-> i'd been thinking of using qpid for all the snazzy management, but its not a compatible protocol :/
01:51 < davidban_> I need to generate some XML from node. There are heaps of things that will take XML and turn it into JSON for me, but is there an awesome one that goes the other way?
01:52 < ljharb> davidban_: why do you need xml? xml is the devil
01:52 < ljharb> and no, generally not, because json is schemaless and xml has a schema
01:52 < davidban_> ljharb: Because I'm dealing with telephony and it's all from 1981.
01:52 < rajan> hey Node.js community members... how hard or easy it is to implement group video chat using node.js?
01:52 < Slade-> davidban: just xml in the same layout?
01:53 < OTBS4Life> Yeah, XML supports quite a bit more stuff than JSON.  You're going to need something to build the DOM, essentially.
01:53 < rajan> or group text chat?
01:53 < ljharb> davidban_: so the telephony system is outputting xml?
01:53 < davidban_> Slade-: Yeah it's super basic XML that I need. I'd be happy to just write a nested object or something and have it spit that out.
01:53 < davidban_> ljharb: The telephony system wants to consume XML that I give it.
01:53 < ljharb> ah
01:53 < Slade-> davidban: it'd be quickest to roll your own. there are some json2xml scripts out there tho
01:53 < davidban_> rajan: Group text chat, super super easy. Group video chat, a bit harder.
01:54 < ljharb> https://npmjs.org/package/data2xml maybe?
01:54 < ChrisPartridge> davidban_: If it's just basic XML, it shouldn't be too difficult to iterate over the object and create the XML
01:54 < rajan> david: are there links that i can use to get started with them?
01:54 < davidban_> Slade-: ChrisPartridge: Yeah that's probably what I'll do. Right now I'm just mashing strings together and it's pretty fine, was just getting sick of it.
01:55 < davidban_> rajan: http://www.youtube.com/watch?v=jo_B4LTHi3I
01:55 < rajan> thanks David.
01:55 < davidban_> rajan: That video is Ryan running through the example of building a group chat server. It's so easy in node it's pretty much the second 'hello world' example after writing a web server.
01:56 < rajan> thanks david.
01:56 < rajan> can we programmatically start new groups?
01:56 < davidban_> rajan: No probs.
01:57 < rajan> i m sure we can
01:57 < rajan> but just foguring it out.
01:57 < davidban_> rajan: You sure can. That example won't cover it, but there are a bunch of ways you could tackle that. I would probably use something like socket.io (despite some of it's grossness) and just start a new channel.
01:58 < rajan> thanks david for the tip.
01:59 < davidban_> rajan: Once you've fully grokked the video, the socket.io channelling I'm talking about is what I use on lines 16 to 24 here: https://github.com/davidbanham/reveal.js/blob/master/plugin/multiplex/index.js
01:59 < sinclair> anyone doing anything with TypeScript?
02:00 < rajan> ok David
02:00 < timeturner> yes
02:00 < timeturner> not using it
02:00 < timeturner> :P
02:00 < rajan> just bookmarked it.
02:14 < sinclair> timeturner: rajan its got plugin's for Sublime and Vim
02:32 < niggler> wow obama sucks
02:32 < OTBS4Life> niggler: Take it to ##politics
02:32 < OTBS4Life> niggler: Oh, you're already there.  ha
02:32 < niggler> was kicked apparently OTBS4Life 
02:33 < niggler> wow it took all of 10 seconds to get banned
02:33 < OTBS4Life> niggler: Well, for good reason, in my opinion.  * kunwon1 has kicked niggler from ##politics (change your nick)
02:38 < ljharb> ha.
02:39 < niggler> unamerican
02:44 < bradleymeck> help i need an adult #gyp
02:44 < bradleymeck> err someone who knows gyp
03:08  * sinclair is liking VS2012, TS and iisnode
03:09 < niggler> fuck typescript
03:09 < sinclair> niggler: what's TS?
03:11 < niggler> you wouldnt be referring to team server 
03:12 < sinclair> niggler: oh, hell no :)
03:12 < niggler> the only thing worse than the visual studio team server is rational clearcase
03:14 < Zak> did irc turn into twitter?
03:14 < mscdex> ts always means teamspeak to me :-)
03:15 < sinclair> niggler: i disagree, there is nothing worse than team foundation server
03:15 < ChrisPartridge> mscdex: bit of a gamer huh
03:15 < mscdex> ChrisPartridge: not so much anymore, but occasionally
03:15 < niggler> fuck twitter
03:15 < sinclair> niggler: yay TypeScript makes JavaScript awesome
03:16 < Zak> I need to write a niggerbot, which says "fuck ___" and has specific hatred towards typescript
03:16 < mscdex> ...
03:16 < niggler> zak: what's a niggerbot ?
03:16 < Zak> TypeScript is for people who are too retarded to understand Javscript so they need to make it look like C#
03:16 < ChrisPartridge> sinclair: if you go 24hours without mentioning type script, i'll try it out (maybe)
03:16 < Zak> uh oh.. *niggler
03:16 < niggler> zak i believe you dropped an 'l'
03:16 < Zak> my bad
03:16 < niggler> hahaha sinclair did the same thing last month
03:17 < Zak> i need to change my name to arselhoe
03:17 < Zak> and see who slips up
03:17 < sinclair> Zak: by retard, do you mean "a higher class of professional developer"
03:17 < sinclair> ?
03:17 < Zak> professional can be achieved using Javascript as it is
03:17 < Zak> if you can't see that, then thats the problem, not Javascript
03:17 < totallymike> At least TS doesn't break JS
03:17 < sinclair> Zak: uh huh
03:18 < Zak> there are good reasons to use languages which compile into JS
03:18 < sinclair> Zak: you can have professional x86 ASM code too 
03:18 < Zak> but they're not reasons to stop using JS either
03:18 < sinclair> Zak: those lamers all code in C, C++ now
03:18 < niggler> javascript is like unix
03:19 < niggler> and these other things are like plan9
03:19 < Zak> sinclair: comparing Javascript/Typescript to ASM/C or C++ is a bad paradigm
03:19 < sinclair> Zak: not really
03:19 < gnarf> yes really
03:19 < Zak> yes really
03:20 < sinclair> Zak: ok then, why is it a bad paradigm / analogy 
03:20 < niggler> ASM has been greatly stigmatized
03:20 < niggler> lots of people still code directly in assembly
03:20 < niggler> (myself being one of them)
03:21 < niggler> but C and C++ had very specific advantages in terms of portability
03:21 < sinclair> niggler: fine, but there rest of the industry does not
03:21 < Zak> sinclair: because ASM is a low level programming language
03:21 < niggler> that could not be overcome directly in assembly
03:21 < gnarf> sinclair: um, there are plenty of embedded devs / game programmers still specializing in ASM
03:21 < niggler> for whatever you may say about javascript's incompatibility
03:21 < niggler> there's a fully javascript solution to it
03:22 < sinclair> Zak: the analogy im drawing is, JS becomes a temporary low level language, with higher level constructs offered by TS
03:22 < sinclair> C programmers rarely think in terms of ASM
03:22 < niggler> sinclair where it breaks down is that none of the other efforts (dart, typescript) provide something that can't be directly accomplished in javascript
03:22 < Nuck> For a module which loads files from the filesystem, how would I go about rooting my paths logically local to the loading script?
03:23 < dpemmons> How about everyone just use the tool that's right for the job?
03:23 < sinclair> niggler: i think Dart and TypeScript have different design goals
03:23 < niggler> fuck dart
03:23 < niggler> fuck typescript
03:23 < sinclair> niggler: yeah, im not fond of Dart either
03:23 < niggler> Zak: that nigglerbot would be useful :)
03:24 < Nuck> Like, if somebody says email('template/dicks'), I want it to load thatProject/template/dicks, not thatProject/node_modules/thingy/template/dicks
03:24 < Nuck> How do?
03:24 < Nuck> Fuck all compile-to-JS languages.
03:24 < Nuck> JS is not Assembly, stop treating it as such
03:24 < niggler> Nuck: you have some real problems if someone wants to email 'template/dicks'
03:24 < Zak> hahaha
03:24 < Nuck> niggler: Hey, I'm not judging what they send
03:24 < Nuck> If they want to email penises, it's their own choice
03:25 < Nuck> I guess a way of phrasing this is to make the filesystem things act like they were done from the requiring file instead of the requirED script
03:26 < niggler> nuck i assume direct paths are unacceptable?
03:26 < Zak> JavaScript isn't perfect, it has its problems
03:26 < Nuck> niggler: Nah, I want them to email('template/dicks')
03:26 < Zak> instead of writing a new language, contribute to better practices and look at improving it
03:26 < sinclair> Zak: what do you think about the ECMAScript 6 draft spec?
03:26 < niggler> then make a wrapper
03:26 < Zak> TypeScript is bad because it breaks the community up
03:26 < Nuck> As long as the absolute paths are abstracted then I'm fine
03:26 < Zak> sinclair: i didn't like a lot of things personally
03:26 < niggler> put a condom on it Nuck 
03:26 < sinclair> Zak: things like?
03:27 < Zak> i don't even know if Crockford has looked at it, or commented on it
03:27 < Zak> sinclair: ability to freeze objects
03:27 < Nuck> niggler: email(condom('template/dicks'))
03:27 < Nuck> Better?
03:27 < sinclair> Zak: to lock them?
03:27 < Zak> yes
03:27 < Nuck> ES6 can suck my cock.
03:27 < sinclair> Zak: what's wrong with that?
03:27 < Nuck> I *hate* ES6 in all but like 2 ways
03:27 < Zak> i don't think it's necessary
03:27 < Nuck> Teh bloat in ES6 is remarkable
03:28 < Zak> yeah, I feel like ES6 is very bloated
03:28 < sinclair> Zak: you have never run into concurrency issues before?
03:28 < Nuck> ES6 adds classes.  Reminds me of Java
03:28 < Zak> sinclair: not in Javascript
03:28 < niggler> niggler: that condom puts on __dirname
03:28 < niggler> *prepends __dirname
03:28 < Nuck> niggler: __dirname works?
03:28 < Nuck> Is that process-relative?
03:28 < niggler> i dont know how __dirname propagates with modules
03:29 < sinclair> Zak: maybe not such an issue in a browser, but on the server side, there going to be concurrency issues 
03:29 < sinclair> Zak: so, lock is a nice feature to have
03:29 < niggler> typescript is a server framework???
03:29 < niggler> fuck typescript
03:30 < niggler> fuck ES6, but that's a given
03:30 < Zak> maybe, i still don't like the way its being presented
03:31 < niggler> fuck lock
03:31 < Zak> they should just design a semaphore class
03:31 < Zak> etc
03:31 < sinclair> niggler: shut up already
03:31 < niggler> sinclair: not familiar with lock-free data structures?
03:32 < Zak> i know yesterday, we were saying there's no reason to be skeptical because M$ is running TypeScript
03:32 < sirvon> is inotify basically the most efficent way to filewatch on a nix system?
03:32 < Zak> but there really is
03:32 < Zak> their affliation with typescript is more a bad thing than a good thing
03:32 < niggler> Zak: now that's just FUD
03:32 < niggler> give microsoft a chance
03:32 < sinclair> Zak: i don't understand
03:33 < Zak> we should have given dart a chance then
03:33 < niggler> we did give dart a chance
03:33 < Zak> but nobody did, because it's clear that Google would steer it into a direction that would benefit them
03:33 < Zak> and the same would happen with TypeScript
03:33 < sinclair> Zak: Dart was too intrusive and shook too many things up
03:33 < sinclair> Zak: TypeScript is an optional extra
03:33 < Zak> if I have to compile stuff into Javascript, that's a big failure for me right there
03:34 < niggler> that's not fair Zak
03:34 < Zak> life isn't fair
03:34 < Zak> fuck life
03:34 < niggler> there are plenty of utilities that need compilation
03:34 < niggler> take jison
03:34 < Zak> i know
03:34 < Zak> there are times you do it
03:34 < niggler> which is a javascript version of YACC
03:34 < niggler> the advantages of using yacc style far exceed the cost
03:34 < Zak> for instance, if you really want to optimize the crap out of something and let it run in Javascript, i could see reason for doing so
03:35 < sinclair> Zak: i don't see an issue with compilation of JS (its a bit of a pain tho)
03:35 < Zak> but that's not reason to invent and use another language in replacement of JS
03:35 < Zak> its a huge pain
03:35 < niggler> i think the problem with a lot of the languages is that their advantages don't far outweigh the costs
03:35 < Zak> it would break my entire workflow
03:35 < sinclair> Zak: what's to add an additional single step to your build?
03:35 < Zak> not compiling shit is one of the biggest reasons why I liked Smalltalk, Javascript
03:36 < Zak> Smalltalk did compile, but it was per method
03:36 < niggler> sinclair: explain how the advantages outweigh the costs
03:36 < sinclair> niggler: advantages in what?
03:36 < niggler> typescript
03:36 < Zak> types, interfaces etc
03:36 < Zak> tbh, my main usage of nodejs is for prototyping
03:36 < Zak> so none of that really matters much to me
03:37 < Zak> prototyping and dev tool
03:37 < Zak> i have thought about using it in production a few times too
03:37 < Zak> but i haven't really had the opportunity to do so yet
03:37 < niggler> most of the advantages of typescript can be harnessed with jshint
03:38 < sinclair> niggler: what are the advantages of coding C over ASM?
03:38 < Zak> there's many advantages
03:38 < Zak> its cross-platform for starters
03:38 < niggler> portability sinclair 
03:38 < sinclair> no, i asked what the advantages were for coding C over ASM, not ASM over C
03:38 < Zak> there's also a whole lot of "errors" you can make, which you won't pick up
03:38 < niggler> you cant take x86_64 asm and run it on an arm platform
03:38 < niggler> i just said it sinclair
03:39 < niggler> the reason to code in C is portability
03:39 < Zak> i guess in that sense, if TS could catch those, that would be helpful.. still not a strong enough reason
03:39 < jmoyers> among many other things.
03:39 < niggler> jmoyers: terseness is predilection
03:39 < jmoyers> the highest form of which
03:39 < jmoyers> is not to engage in the endless looping through high level vs low level
03:39 < sinclair> niggler: TS is far more productive to code in than JS
03:39 < jmoyers> static typing vs dynamic
03:40 < niggler> wait wait wait explain that systement
03:40 < niggler> *statement
03:40 < niggler> how is TS far more productive than JS
03:40 < jmoyers> every single debate like this
03:40 < sinclair> niggler: that it's productive?
03:40 < jmoyers> is essentially worthless
03:40 < ljharb> it's been out less than a week. that's pretty bold to say.
03:40 < jmoyers> neither side changes their mind
03:40 < jmoyers> like, ever
03:40 < jmoyers> especially irc neckbeards.
03:40 < Zak> jmoyers: i'm not saying that TypeScript is useless, but its definitely not a replacement for Javascript
03:40 < Zak> if i had a reason to use TypeScript, i would use it
03:41 < jmoyers> typescript is fucking useless. my point is
03:41 < niggler> jmoyers: what would change my mind is a demonstration of something in typescript that is *dramatically* easier or better than javascript
03:41 < Zak> hahaha
03:41 < niggler> fuck typescript
03:41 < niggler> fuck dart
03:41  * Zak strokes his virtual neckbeard
03:41 < sinclair> niggler: when it comes to catching type errors, debugging, writing excessive amounts of code to achieve mundane things, yeah, TS is more productive 
03:41 < jmoyers> better is totally fucking subjective dude
03:41 < jmoyers> thats the point
03:41 < jmoyers> better is what, more syntactic sugar?
03:41 < jmoyers> classes?
03:42 < jmoyers> splats?
03:42 < jmoyers> decomposition?
03:42 < jmoyers> or is it, simplicity
03:42 < jmoyers> focus
03:42 < sinclair> what is wrong with classes ?
03:42 < niggler> woah waoh waoh where are these type errors that you have in your javascript?
03:42 < jmoyers> easy to reason about
03:42 < jmoyers> easy to maintain
03:42 < jmoyers> classes is are great, i like classes
03:42 < sinclair> niggler: the ones you introduce by not having a strict type system
03:42 < jmoyers> I'm even one of those who thinks calling Class.prototype.method a class is fine
03:42 < niggler> people were writing code without type errors when passing void pointers for decades
03:43 < jmoyers> and i like to harass the pedantic javascript prototype community
03:43 < Zak> jmoyers: i'm shocked. I didn't think you were THAT type of person
03:43 < niggler> fuck classes
03:43 < sinclair> niggler: sure, not they write that code faster, because the language helps them
03:43 < sinclair> *now
03:43 < niggler> classes are half-assed efforts to make you feel like you organized your code well
03:43 < Zak> (i was joking btw)
03:43 < jmoyers> i like classes.
03:43 < Zak> i like classes too
03:43 < jmoyers> i think event emitter is nice
03:44 < jmoyers> i like it
03:44 < jmoyers> i like stream
03:44 < jmoyers> i also like composition over inheritance most of the time
03:44 < sinclair> niggler: rationalizing the benefits/disadvantages of TS with you is pointless, 
03:44 < niggler> the statement "i like classes" refers to the general concept
03:44 < jmoyers> yes, yes it does
03:44 < jmoyers> i like it
03:44 < sinclair> so, why is TS bad?
03:44 < jmoyers> its aesthetically pleasing to me
03:45 < jmoyers> its not
03:45 < jmoyers> who gives a fuck, though?
03:45 < jmoyers> use it, move on
03:45 < sinclair> what's inherently wrong with TS?
03:45 < chilts> god, this conversation just goes around in circles
03:45 < chilts> use it if you like it, don't if you don't
03:45 < jmoyers> thats what I'm saying
03:45 < chilts> easy :)
03:45 < jmoyers> and also know, people will harass you
03:45 < sinclair> chilts: its fun to rationalize the tech
03:45 < Zak> what if i hate it
03:45 < niggler> basic stuff, when reduced to javascript, are far larger than necessary
03:45 < jmoyers> and they won't contribute, or that its a barrier to contribution
03:45 < niggler> the C++ equivalent of boost in terms of bloat
03:46 < sinclair> niggler: the compiled output from TS is larger than what it would have been had you written it in JS?
03:46 < niggler> yes, but by a very large amount
03:47 < sinclair> niggler: that's a fair criticism, anything else? 
03:47 < niggler> if you write code properly, you can generally obviate most concerns about typing
03:47 < jmoyers> how about the whole reason https://github.com/mranney/node_riak exists
03:47 < jmoyers> riakjs is…. written in coffeescript
03:48 < sinclair> niggler: that is the same with or without TS
03:48 < jmoyers> and neckbeards shit on cross compilation
03:48 < sinclair> niggler: you can write bad code in any language
03:48 < niggler> but that means sinclair you can't point to type safety as a significant advantage
03:48 < niggler> you don't get any performance boost from it
03:48 < Zak> sinclair: you can write good code in any language
03:48 < sinclair> Zak: sure
03:48 < niggler> you can write really good perl code
03:48 < niggler> and really shitty perl code
03:49 < sinclair> niggler: it is easier to write good code in TS than in JS
03:49 < niggler> that's far from true
03:49 < sinclair> niggler: that's a accessibility thing 
03:49 < sinclair> niggler: something else bad about TS?
03:49 < niggler> something else good about TS?
03:49 < sinclair> i think TS speaks for itself personally
03:50 < niggler> TS's advantages are far from clear
03:50 < niggler> and ive enumerated some disadvantages
03:50 < Zak> far from clear?
03:50 < niggler> yes far from clear
03:50 < niggler> which is why im asking sinclair to list the advantages
03:50 < sinclair> niggler: you enumerated one valid point, that it produces excessive JS
03:50 < jwulf_> i've put an xmlrpc method call in a closure function inside a loop, so that the xmlrpc callback method gets the right loop instance
03:50 < niggler> and nullified your point about type safety
03:51 < sinclair> niggler: which is similar to the ASM developers argument about C producing decent output
03:51 < niggler> so its your turn to introduce a new advantage
03:51 < jwulf_> but how do i tell when all the rpc calls are finished?
03:51 < sinclair> niggler: that was 30 years ago
03:51 < niggler> you can write asm by hand
03:51 < niggler> people still do
03:51 < niggler> lots of people do
03:51 < sinclair> niggler: not many tho
03:51 < niggler> C gave a real concrete advantage over asm in terms of portability
03:51 < chilts> jwulf_: you need to keep a count so that when the nth one comes back (where n is the same as the number of items) you know you're finished :)
03:51 < jmoyers> jwulf_ completion counter
03:51 < ljharb> sinclair: static or strict typing are not required to avoid typeerrors.
03:51 < chilts> does that make sense?
03:51 < niggler> TS doesnt do that in a new way
03:52 < niggler> the advantages of TS already exist in javascript frameworks
03:52 < jmoyers> jwulf_ other way is to use a queue of some sort with a flow control abstraction
03:52 < Zak> seriously, TS was written to help C# understand Javascript
03:52 < Zak> end of story
03:52 < sinclair> Zak: actually, i think so too
03:52 < niggler> i want to hear sinclair's penny-stock-pumping of typescript
03:53 < Zak> if you come from a C# background, you'll be loving TypeScript
03:53 < Zak> but if you come from a background which used closures, then Javascript makes sense
03:53 < sinclair> Zak: if you are from any OO background, then you should love type script
03:53 < niggler> you bring up an interesting philosophical question Zak
03:54 < Zak> there are breakdowns within OO
03:54 < Zak> Javascript is OO too
03:54 < niggler> is it more important for a language to do something properly or to accomodate all programming styles?
03:54 < sinclair> Zak: sure, but it's hardly as accessible as it is in TS
03:54 < sinclair> Zak: what breakdowns in OO?
03:55 < niggler> rubymotion is an interesting comparison
03:55 < jwulf_> i'm from an OO background, and closures are currently doing my head in
03:55 < jwulf_> on top of the async stuff
03:55 < sinclair> jwulf_: ^ 
03:55 < jwulf_> thanks chilts and jmoyers for the suggestions
03:56 < niggler> sinclair: i want you to prove me wrong.  I'm not intransigent, but to unseat javascript it needs to be significantly, not just trivially, better
03:56 < sinclair> niggler: its not unseating JavaScript at all
03:56 < jwulf_> is there a module that implements that sort of thing? Flow control?
03:56 < niggler> its not significantly better
03:56 < niggler> and hence this is relevant: xkcd.com/927/
03:57 < niggler> http://xkcd.com/927/   
03:57 < sinclair> niggler: im not suggesting ALL js developers should adopt TS for whatever they are doing, or have done. but in terms of professionally developing in JavaScript, for OO developers, TS makes a ton of sense. 
03:57  * sinclair assumes everyone here is coding professionally
03:58 < jmoyers> jwulf_ yes, definitely
03:58 < jmoyers> jwulf_ https://github.com/caolan/async#forEach
03:58 < niggler> you set a very low bar
03:58 < jmoyers> iterate over an array, kick off a set of async ops, have a callback when they complete
03:58 < niggler> are professional coders only expected to know OO?
03:58 < jmoyers> and all sorts of other nifty things, like waterfalls, auto, etc
03:58 < niggler> that would explain a lot actually
03:58 < Zak> async module is the bomb
03:58 < sinclair> yes, yes, they are
03:58 < sinclair> niggler: and the bar is very low, it always has been
03:59 < niggler> wow, that's sad
03:59 < astropirate> Hello friends!
03:59 < jmoyers> hey you guys
03:59 < jmoyers> have any node questions?
03:59 < sinclair> niggler: it's the reality tho
04:00 < niggler> now i feel like a troll -- ive been looking for a programmer and i've been assuming far more than I should have 
04:00 < Zak> sinclair: what i was saying about break-up of OO, is that there are different models 
04:00 < jwulf_> thmx jmoyers 
04:00 < Zak> some offer multiple inheritance, some are strongly typed, some are dynamic
04:00 < jmoyers> np
04:00 < Zak> TypeScript appeals to the same crowd of people who come from C#
04:00 < jwulf_> or delphi
04:00 < Zak> and that's obviously seen by the fact that M$ are behind TypeScript
04:00 < sinclair> Zak: this is true
04:01 < jwulf_> in my case
04:01 < niggler> just to reset my expectations, what should i assume with regards to a professional programmer
04:01 < Zak> the very strength that you claim TypeScript has, is its own weakness
04:01 < Zak> Javsacript has the ability to cater for that sort of OO structure and does more
04:01 < sinclair> niggler: the opposite of you?
04:02 < Zak> being a professional programmer means jackshit. It just means you get paid to code.
04:02 < niggler> that microsoft is behind TS is not necessarily a bad thing
04:02 < Zak> not necessarily, but its not reason to leave JS
04:02 < Zak> let me rephrase that
04:02 < Zak> M$ would love nothing more than for everybody to use TS instead of JS
04:02 < Zak> and that would end up being a very bad thing for Javascript
04:02 < niggler> so what does "paid to code" mean?
04:03 < Zak> it means you get it as a salary or through a contract
04:03 < Zak> even if the contract is verbal
04:03 < niggler> is it like outsourcing (i.e. you hand a formal spec and get code)
04:03 < Zak> no
04:03 < sinclair> Zak: it means more than being paid, the reason you get paid means you don't produce unmaintainable, hacks to get the job done. those a lot of that has to do with ethics 
04:03 < Zak> its simply about receiving money
04:03 < Zak> sinclair: good luck with that definition
04:03 < Zak> i know lots of programmers who do that and continue to get paid
04:03 < Zak> professional isn't the right word you're looking for
04:03 < sinclair> Zak: then they have questionable ethics?
04:04 < Zak> i don't think its unethical to write unmaintainable code
04:04 < sinclair> Zak: uh huh
04:04 < Zak> i wouldn't do it personally.. i'm very anal about that sort of shit
04:04 < Zak> but if it was so bad, heaps of people would get fired
04:05 < Zak> i work with a lot of people who just don't get it
04:05 < Zak> and i consider myself to be "old"
04:05 < Zak> TDD certainly wasn't taught to me at uni
04:05 < Zak> and yet i embrace it now
04:05 < ljharb> Zak: it's certainly unethical. it just doesn't have any relevance to the merits of JS versus any JS alternatives
04:05 < Zak> maybe that's more of a reflection of my uni however
04:05 < Zak> TDD was definitely AROUND, it just wasn't being taught
04:05 < ljharb> and ethics don't have any correlation to who keeps their job, either.
04:05 < niggler> ljharb: two separate issues
04:05 < niggler> im asking about professional coders
04:06 < Zak> ljharb: i think its only unethical if people know better
04:06 < ljharb> right, so ethics, and getting paid for code, isn't relevant to the discussion.
04:06 < sinclair> ljharb: it kinda does, as TS code is structured, typed and designed for (buzzword) appscale
04:06 < Zak> heaps of people i know here (at work), don't really know the difference
04:06 < ljharb> sinclair: it's designed for hiring scale, not app scale.
04:06 < Zak> i think the good thing with TypeScript is you can hire idiots
04:06 < Zak> and they're less likely to write crap code
04:06 < sinclair> that too i suppose
04:06 < ljharb> sinclair: ie, to make it easier to hire more, less-talented people, and make it harder for them to fuck up their code.
04:06 < ljharb> sinclair: and *that* is a good reason to avoid it.
04:06 < sinclair> Zak: most developers are idiots
04:07 < mscdex> ok Linus
04:07 < sinclair> Zak: most developers wouldn't deep dive into a language
04:07 < mscdex> :-P
04:07 < Zak> most developers only code for money
04:07 < sinclair> Zak: right
04:07 < Zak> thats hwy i said professional, is probably the worst term you could use to coin high quality
04:07 < sinclair> Zak: if you are a business, and you expect to be productive, better to lower the bar, 
04:07 < Zak> i've seen better quality in open-source projects
04:07 < Zak> because they have to be maintainable otherwise they die
04:07 < niggler> many developers code to solve a problem and not to 
04:07 < niggler> 
04:07 < ljharb> sinclair: that's the worst kind of attitude.
04:08 < jmoyers> yeah
04:08 < niggler> *and not to get paid
04:08 < Zak> that's not to say that people don't get paid to do open-source either
04:08 < sinclair> Zak: ive also seen the worst quality in open source, in fact, more bad than good
04:08 < Zak> well, there are a lot of noobs too
04:08 < Zak> who get excited and share their code
04:08 < Zak> that's fine too
04:08 < Zak> at least people can see it, criticize it
04:08 < Nuck> Grrrrr
04:08 < Zak> (if they can be bothered)
04:08 < Lorentz> that feel when someone forks your code
04:08 < Nuck> Just tried __dirname as a way to get the root directory of hte process
04:09 < Nuck> No success
04:09 < Nuck> I know there's a way to do this, I just wish I could remember it
04:09 < niggler> Nuck: how about process.cwdd
04:09 < niggler> *cwd
04:09 < niggler> or getcwd or whatever its called
04:09 < Zak> I have this debae at work all the time, between Javascript and Java developers
04:09 < Zak> we all agree that JAvascript often gets a bad rep, because it's so accessible
04:09 < niggler> yeah Nuck its process.cwd
04:10 < niggler> >>> process.cwd()
04:10 < purr> niggler: ReferenceError: process is not defined
04:10 < sinclair> Zak: what about PHP?
04:10 < Zak> people think they can code in Javascript because they can shove stuff in HTML and voila...
04:10 < Zak> (a script tag)
04:10 < Zak> sinclair: yeah, there's similiarities there with PHP
04:10 < Zak> but Javascript is even more accessible
04:10 < Nuck> niggler: Gives the launch directory, not the location of the requiring file
04:10 < Zak> anyway, it's often given Javascript a bad name
04:10 < sinclair> Zak: JavaScript does have a bad name
04:11 < Zak> i had to argue with some senior JAva developer the other day, that the concept of "private" methods are possible in Javascript
04:11 < niggler> hold on Nuck are you writing a module and using another module referencing it?
04:11 < Zak> he was convinced that "everything is global in Javascript"
04:11 < Nuck> JS > PHP.  At lwast we have closures properly implemented
04:11 < niggler> because cwd should give you the working directory where you run node
04:11 < Nuck> niggler: Huh?  No.
04:11 < sinclair> Zak: often for being an utter mess to read and debug tho (not helped by amateurs and lack of conventions) 
04:11 < Nuck> niggler: It gives me the directory I launched from
04:11 < Zak> but thats the point
04:11 < Zak> using another language isn't the solution
04:11 < niggler> right nuck -- where you run node
04:11 < Zak> improving and educating Javascript developers is the solution
04:11 < sinclair> Zak: what's the solution?
04:11 < niggler> and __dirname gives you the same thing?
04:11 < Nuck> But if I do $ node /tmp/test1.js
04:12 < Zak> if you know how to write in Javascript, using the right patterns
04:12 < Nuck> __dirname is the location of the current script
04:12 < sinclair> Zak: is there a PEP8 guideline for JS?
04:12 < Zak> its very nice
04:12 < niggler> oh Nuck 
04:12 < niggler> can you inspect argv?
04:12 < Nuck> I wan the location of the script which required the current one
04:12 < Nuck> Hmmm I don't think argv is set for modules
04:12 < Zak> sinclair: there's many articles by Crockford on conventions.. not to mention tools like JSHint, JSLint etc
04:12 < Nuck> Hrm
04:12 < Nuck> I could, theoretically
04:12 < Zak> and if you want to be a nazi with javascript, just use "use strict";
04:12 < niggler> ok you are going to have to explain your problem a bit further
04:13 < Nuck> But that's a nasty hack
04:13 < niggler> you have a script sitting somewhere
04:13 < niggler> that script runs node on a second script
04:13 < Nuck> Basically, I have a module which is required
04:13 < niggler> that second script requires a module
04:13 < sinclair> Zak: lets see how well TS goes in the wild
04:13 < niggler> so why not poke a hole in the module?
04:13 < sinclair> Zak: i think there will be wide adoption
04:13 < Nuck> And this module exposes a thing which wraps the filesystem, loading a file and doing shit and returning the result, etc. etc.
04:13 < niggler> let you set the root directory 
04:13 < Zak> perhaps
04:13 < Zak> it will be all the C# devs
04:13 < Zak> who eventually will pick up Javascript
04:14 < Zak> because they'll be sick of the limitations in typescript
04:14 < sinclair> Zak: C# developers looking into nodejs
04:14 < Nuck> But what I want is for the fs.* calls to act like they were done from the script which required my module
04:14 < Zak> i have this same argument with musicians
04:14 < Nuck> So that relative paths work elegantly
04:14 < Zak> and religion actually
04:14 < sinclair> Zak: i don't know what limitations there would be tho, TS supports JS
04:14 < niggler> can you change the working directory?
04:14 < niggler> like a chdir
04:14 < Zak> sinclair: its more about constantly fitting into those patterns
04:14 < Nuck> niggler: I can, with process.chdir
04:14 < Zak> so they would drop typescript entirely
04:14 < Nuck> But the problem is finding the path
04:15 < Nuck> What I want isn't __dirname or process.cwd()
04:15 < niggler> you want the path of the module?
04:15 < Nuck> The current working directory isn't always the launched script's path
04:15 < niggler> or of the script calling the module
04:15 < Nuck> niggler: I wand the path of the script calling the module
04:15 < Nuck> Though I guess that could be a problem with caching
04:15 < Zak> sinclair: TypeScript seems to be like the "trainer wheels" when you're learning how to ride a bike
04:15 < niggler> script A -> node scriptB, scriptB -> require("module")
04:15 < Zak> once you understand how to ride the bike properly (using Javascript alone), you'll get rid of it
04:15 < niggler> you want the path of scriptB
04:15 < niggler> y
04:15 < niggler> ou can get that from argv in scriptB
04:16 < sinclair> Zak: i don't think TS is training wheels at all
04:16 < Nuck> niggler: Wat no
04:16 < Nuck> niggler: Script A --> require('Script B')
04:16 < Nuck> And Script B wants to know the __dirname of Script A
04:16 < Zak> sinclair: TS is exactly that. It's a stricter environment than Javascript which stops you from "falling over"
04:16 < sinclair> Zak: its a good innovation on JS, that doesn't go too far down the propriety route
04:17 < Nuck> I have to agree that TS could be nice
04:17 < Zak> i don't think there's anything innovative about it
04:17 < Nuck> I'd like to see ES6 replaced almost entirely with the TS ideas, perhaps with less shitty syntax
04:17 < sinclair> Nuck: me also
04:17 < Zak> i don't want to see types
04:17 < Zak> i worked on a complicated project, with no types
04:17 < Zak> and we were fine
04:17 < Nuck> I think hij1nx mentioned this on Twitter, perhaps a function (Number n = 5) syntax
04:17  * sinclair thinks about to HLSL vs GLSL
04:17 < Nuck> Instead of n:Number = 5
04:17 < niggler> what if script A changes the current directory to the directory of the script?
04:18 < Zak> there are plenty of languages that support types...
04:18 < Zak> go write in them
04:18 < Zak> esp if you're doing server-side work
04:18 < Brandon_R> any node cmd line tool to run an app when it exits?
04:18 < Nuck> niggler: That's a terrible API and I'd sooner just use cwd :P
04:18 < Zak> i guess if you get desperate and you really need to run in "javascript", then yeah.. typescript
04:18 < niggler> what i mean is you can cd to the cwd
04:18 < Zak> but keep typescript the hell away from node
04:19 < niggler> in the scriptA
04:19 < niggler> or just poke a hole
04:19 < sinclair> in the graphics world, HLSL is MS's answer to a graphics card shading language, GLSL is the open standard. thing is, HLSL pwns GLSL, because MS didn't what they pleased with it. 
04:19 < sinclair> *did
04:19 < Nuck> niggler: chdir(process.cwd()); chdir(process.argv[1])?
04:19 < Nuck> Basically?
04:19 < Brandon_R> what it does it waits until the script exists then restarts it
04:19 < Brandon_R> does forever do that?
04:19 < Nuck> Or, I wonder if module provides this stuff
04:19 < niggler> ok is someone else writing ScriptA?
04:19 < niggler> or you?
04:20 < Nuck> niggler: I am, but I don't write things for myself.
04:21 < Nuck> I write them for anyone
04:21 < Nuck> :P
04:21 < Nuck> Good way to do API design
04:21 < niggler> i think, if you want users to be able to control the directory
04:21 < niggler> you might as well open that parameter OR have them change the working directory
04:22 < niggler> you'd do the second one except you need to get the path, not the script
04:22 < niggler> argv[1] will be the full script name (guessing, based on the name)
04:22 < niggler> fuck GLSL
04:22 < jmoyers> Nuck process.mainModule
04:23 < jmoyers> perhaps.
04:23 < niggler> is that in node?
04:23 < niggler> http://nodejs.org/api/process.html i dont see it
04:24 < jmoyers> shrug, perhaps a private api
04:24 < jmoyers> but its there in an included module
04:24 < niggler> because, of course, using private apis are good :/
04:25 < Zak> fuck private apis
04:25 < jmoyers> it could just be undocumented
04:25 < niggler> indeed zak
04:25 < jwulf_> hmmm... don't know if async is going to do this
04:25 < jwulf_> because i have an async callback inside my iteration loop
04:26 < jwulf_> and i need to put it inside a closure to get the right loop instance
04:26 < jmoyers> would need to see your code
04:26 < jwulf_> so even if i iterate using async, there is an async callback inside the async iteration
04:27 < ChrisPartridge> jwulf_: sounds like a common async pattern
04:27 < Nuck> jmoyers: require.main.filename appears like it could work
04:27 < jwulf_> http://pastebin.com/j1A6fBkV
04:27 < jmoyers> looking
04:28 < Nuck> Yep, works
04:28 < Nuck> Badass.
04:28 < jwulf_> thanks jmoyers 
04:28 < jmoyers> jwulf_ i see no closure
04:29 < jmoyers> in a loop
04:29 < niggler> lol "Because module provides a filename property (normally equivalent to __filename), the entry point of the current application can be obtained by checking require.main.filename."
04:29 < jwulf_> jmoyers - yes, and now it's not working
04:29 < jmoyers> so jwulf_, you actually want a callback
04:29 < jmoyers> in the first getLatestBuild call
04:29 < jwulf_> the methodCall callback needs to be in a closure
04:30 < jwulf_> jmoyers, it's the client.MethodCall callback that has issues
04:30 < jmoyers> right, thats the point
04:30 < jmoyers> you are kicking off an async call inside of a function
04:30 < jmoyers> you actually want this function to return when that internal async call is done
04:30 < jmoyers> so make the signature getLatestBuild(pkg, cb)
04:31 < jmoyers> then call cb() when methodCall returns with the data you need
04:31 < jmoyers> you are actually after async.map
04:31 < jwulf_> a callback inside a callback.....
04:31 < jwulf_> inception!
04:31 < jmoyers> and thusly, you have made your first nodeception joke
04:32 < jwulf_> lol
04:32 < jmoyers> instead of pushing onto that global array
04:32 < jmoyers> you should consider trying a map
04:32 < jwulf_> a map is an object?
04:32 < jmoyers> a map is a type of functional construct
04:32 < jmoyers> loop over an array and do a transform and return data, resulting in a new array
04:33 < jmoyers> in this case, its an async map. you are looping over a list of package names and returning the latest package for each
04:33 < jmoyers> jwulf_ https://github.com/caolan/async#map
04:33 < jmoyers> or perhaps the slightly easier to understand https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map
04:33 < jmoyers> if you are learning without the async component
04:34 < jmoyers> but hey, the global array is fine. just a suggestion.
04:34 < jwulf_> awesome
04:34 < jwulf_> thanks for the pointers jmoyers
04:34 < jwulf_> i'll go do some reading
04:37 < niallo> any mongoose peeps around?
04:38 < niggler> wtf is mongoose
04:39 < niallo> niggler: http://mongoosejs.com
04:39 < jmoyers> depends on what you mean by peeps.
04:39 < jmoyers> i've used it
04:39 < niallo> i am trying to access nested document properties via Schema.path()
04:40 < Nuck> Is there an up-to-date jquery module I can use with jsdom?
04:40 < niallo> doesn't seem to work as i'd expect (ie using dot operator for nested elements)
04:40 < niallo> and the source code isn't terrible revealing.
04:42 < jmoyers> seems like it handles dot notation
04:42 < jmoyers> but i have no direct experience with that particular issue
04:43 < niallo> ah well i'll keep digging
04:43 < jmoyers> you might try node-inspector
04:43 < jmoyers> set a breakpoint
04:44 < Daegalus> so who here drank the App.net koolaid?
04:45 < deoxxa> meeeeee
04:45 < harrisonm> I've been more interested in tent.io
04:46 < mdedetrich> I'm using process.env directly
04:46 < mdedetrich> is there any npm library for better handling configs?
04:46 < deoxxa> mdedetrich: nconf
04:47 < Daegalus> deoxxa: followed
04:47 < deoxxa> woooo
04:48 < mdedetrich> Daegalus: what the hell is app.net
04:48 < Daegalus> deoxxa: and you speak japanese, double woot
04:48 < Daegalus> at least your bio make it seem that ay
04:48 < deoxxa> sou desu
04:49 < Daegalus> deoxxa: nice, my 4 years in high school probably doesnt match up if you know more
04:49 < Daegalus> mdedetrich: Twitter alternative
04:49 < deoxxa> i've only been studying for about 2 years
04:49 < harrisonm> mdedetrich: pay-to-use ad-free status network
04:49 < mdedetrich> Daegalus: eh probably will not get anywhere
04:49 < Daegalus> deoxxa: i havent touched it in a while, i used to do manga scanlations for a group i ran, and fansubbed part of a group.
04:50 < deoxxa> yeah, i used to do fansubbing as well
04:50 < mdedetrich> deoxxa: the build status for nconf is failing
04:50 < deoxxa> back in the day, heh
04:50 < mdedetrich> deoxxa: is this really an issue?
04:50 < deoxxa> mdedetrich: not that i know of - i'm using it successfully in production if that helps allay any fears
04:50 < mdedetrich> build bot needs an update then
04:50 < Daegalus> mdedetrich: maybe, maybe not on the app.net not making it, but you are probably right. Tent.io or OStatus has a bigger chance of succeeding, unless App.net adds OStatus
04:51 < deoxxa> it could be genuinely broken, mdedetrich
04:51 < deoxxa> it might just be a not-so-often used part
04:51 < harrisonm> Now OStatus I haven't even heard of
04:51 < ljharb> lol app.net. it'll do as well as heello. and tent.io. and identi.ca.
04:51 < deoxxa> or it might be unpublished code
04:51 < Daegalus> deoxxa: i still somewhat run my scanlation group. havent done fansubbing in a few years. Did Asura Cryin mostly, a bit of Bleach a few years before that
04:51 < TehShrike> Daegalus: I bought in at app.net
04:51 < TehShrike> Hoping some more JS folks head over thataway
04:52 < Daegalus> ljharb: sounds about right, but if they all implement OStatus, it wont matter which you use
04:52 < deoxxa> Daegalus: i never had the patience for scanlating, haha
04:52 < ljharb> and then you'll have 3 unused services that can be used together?
04:52 < Daegalus> ljharb: ya
04:53 < Daegalus> deoxxa: eh, i mostly did it to keep my Japanese from fading. IT was good exercise, especially with Kanji+Furigana
04:53 < harrisonm> ostatus.org, last updated 2010 :/
04:53 < deoxxa> yeah
04:53 < harrisonm> tent.io's moved a lot in the past few weeks, though
04:53 < harrisonm> So my hopes are higher than normal
04:53 < Daegalus> we will see
04:53 < deoxxa> Daegalus: i just read 2ch etc - i suck at kanji though
04:54 < Daegalus> i just wish twitter would revert back and stop being morons
04:54 < Daegalus> deoxxa: i never read 2ch, tried, but my kanji is horrible so I would read 2-3 hiragana and go WTF IS THAT?! and give up
04:54 < deoxxa> ha yeah
04:55 < Daegalus> deoxxa: --> good resource for kanji/translation --> tangorin.com
04:55 < harrisonm> Daegalus: it'd be nice, but it's not going to happen :/
04:55 < harrisonm> sadly
04:55 < Daegalus> harrisonm: ya, because they know they can get away with it, since majority of users wont move
04:56 < harrisonm> Right, because their main audience is no longer developers, and developers aren't the ones they're going to make money off of
04:56 < harrisonm> You could argue that this is kind of an inevitable path for any free centralized service, which is a really pessimistic view of it
04:56 < Zak> tent.io looks good
04:56 < Zak> pity it will never go in that direction :(
04:56 < harrisonm> but it's something to be nervous about
04:57 < harrisonm> Zak: why not?
04:57 < mdedetrich> deoxxa: does nconf have a thing where you can export a set of config variables to a object file
04:57 < TehShrike> Oh excellent, isaacs has switched to app.net
04:57 < Zak> harrisonm: not anytime soon anyway
04:57 < deoxxa> mdedetrich: yep
04:57 < harrisonm> They have http://tent.is up now
04:57 < Daegalus> only hope we have is if Twitter implements OStatus or Tent.io which will never happen
04:57 < harrisonm> so yeah, gonna be hard to get a mass migration
04:57 < mdedetrich> deoxxa: is there some example code?
04:57 < Zak> tbh, i like the idea of anonymous socializing
04:57 < harrisonm> but it can start growing
04:57 < TehShrike> I don't mind paying for a decent social networking service
04:57 < TehShrike> I can handle being a customer
04:58 < mdedetrich> the problem with a social networking service
04:58 < mdedetrich> is that you need to get everyone else using it
04:58 < harrisonm> I don't either, though $100/yr for a developer account seems like a really hefty investment
04:58 < mdedetrich> for it to get anywhere
04:58 < Daegalus> ya, i would love to make some apps for App.net
04:58 < Zak> mdedetrich nailed it
04:58 < harrisonm> Esp. considering as a developer, you're investing both extra money and your time on the bet that it's going to take off
04:58 < Daegalus> but $100 to access the api is rough
04:58 < deoxxa> mdedetrich: i think it's like nconf.file("/path/to/file.json").save()
04:58 < harrisonm> They have some sort of prize now if you make something really cool
04:59 < harrisonm> prize/grant thing
04:59 < Zak> i didn't join google plus, because i'm already on facebook
04:59 < harrisonm> but there's still the entry fee
04:59 < mdedetrich> deoxxa: I don't want to save it to disk though
04:59 < Zak> one social networking site is enough for me
04:59 < mdedetrich> deoxxa: eh I suppose I can do it manually
04:59 < harrisonm> Zak: I think if you have a Google account, you're on G+ by definition now
04:59 < harrisonm> your profile is just empty
04:59 < Zak> harrisonm: yeah
04:59 < mdedetrich> harrisonm: true
04:59 < Zak> but you know what i mean
04:59 < Zak> i don't use it
04:59 < mdedetrich> I also have a G+ account
04:59 < mdedetrich> but I never use it
04:59 < mdedetrich> basically all my friends are on FB
04:59 < Zak> civilization is moving in the wrong direction
05:00 < mdedetrich> only my "engineering" or "comp sci" friends use G+
05:00 < mdedetrich> and even then, not that much
05:00 < Zak> we're too consumption heavy
05:00 < mdedetrich> bleh
05:00 < Zak> if people didn't give a shit about selling crap to you, we wouldn't have such an urge to build online profiles of people
05:00 < Zak> anonymous societies
05:00 < Zak> no login websites
05:00 < Zak> etc
05:00 < mdedetrich> such attitudes aren't really realistic because they lack perspective
05:00 < mdedetrich> just like doomsday theories and whatnot
05:00 < Zak> they're not
05:00 < Zak> services like this exist now
05:01 < Oddman> it's a result of individualism. People care about what I have to say, damnit!
05:01 < mdedetrich> I mean, I don't see what you are complaining about
05:01 < mdedetrich> as such an issue
05:01 < Oddman> and that's engrained in our culture
05:01 < ljharb> ingrained.
05:01 < Oddman> ty :)
05:01 < harrisonm> Well, you need some sort of medium.  Pseudonymity works really well in most cases
05:02 < harrisonm> And the state of communication today is neither inherently good nor evil
05:02 < harrisonm> it just is
05:03 < Oddman> agreed.
05:03 < harrisonm> and you make what you can of it and try to push it in a healthy direction
05:05 < harrisonm> I mean, the broadcast venues are open for both good people/groups and terrible people/groups to use
05:05 < harrisonm> and there's something beautiful about that
05:05 < mdedetrich> my opinion is, humans are very dynamic, and when something 'new' comes along, we just get used to it and move along
05:05 < mdedetrich> thats why we are the top of the evolution chain
05:06 < tedsuo_> What's the state of the DOM in node? Is anyone working on bringing webcore or something similar to node?
05:06 < harrisonm> I took a course last semester that compared the spread of the printing press to the spread of modern communication technology
05:07 < jmoyers> tedsuo_ jsdom
05:08 < tedsuo_> jsdom is nice, but it's pretty inefficient compared to the browser implementations
05:08 < jmoyers> yup.
05:08 < jmoyers> sure is
05:08 < jmoyers> some projects that honestly don't have much traction: https://github.com/rogerwang/node-webkit
05:08 < jmoyers> etc
05:08 < jmoyers> what use case do you have?
05:09 < jmoyers> generally i feel like when talking about dom in the server, there's usually a better way to handle the problem without the dom.
05:10 < tedsuo_> I write all of my code to be node compliant these days
05:10 < tedsuo_> just noticing the hit of using jsdom on the server
05:10 < ljharb> you could use phantomjs
05:11 < jmoyers> tedsuo_ yeah i mean, thats kind of the point
05:11 < jmoyers> its massive overhead
05:11 < jmoyers> for little gain imo
05:11 < jmoyers> ljharb have you used it successfully? i have nothing but trouble with phantomjs, even for just testing purposes.
05:12 < tedsuo_> yeah, I don't have a particular use case, I'm just trying to get back to "write once, run anywhere"
05:12 < ljharb> jmoyers: my team uses it at work hundreds of times a day to run jasmine tests on the command line
05:12 < jmoyers> for straight js tests?
05:12 < ljharb> yes
05:12 < jmoyers> thats a good use case imo
05:12 < jmoyers> get into the dom though
05:12 < jmoyers> and shit gets dicey.
05:12 < tedsuo_> so it's funny to me that some of my code is almost 10x more efficient in the browser than in node
05:13 < ljharb> jmoyers: to be fair, we have an internal node module that interfaces between phantom and our tests
05:13 < tedsuo_> but it requires the dom to work in the browser, so there's no escaping it
05:13 < jmoyers> sure there is.
05:13 < ljharb> jmoyers: i'll talk to the guy who made it and see if he can open source it tho
05:13 < jmoyers> separate your client side specific code
05:13 < jmoyers> better than node-phantom or whatever it is?
05:13 < tedsuo_> yeah, it's totally seperate, I currently don't run this code on the server
05:14 < tedsuo_> but I would like it to be possible to run all of my js on all of my vm's, and have it be saavy
05:14 < ljharb> separate
05:14 < tedsuo_> *savvy
05:15 < tedsuo_> on of the missing pieces appears to be a DOM for node that's as efficient as the dom in the browser
05:16 < tedsuo_> it's the same js engine, so it should be possible to bind natively to the same dom library
05:16 < tedsuo_> only in this case run multiple instances
05:16 < tedsuo_> I take it no one is currently working on this?
05:16 < jmoyers> ha
05:16 < jmoyers> its a lot of fucking work
05:17 < tedsuo_> but it;s work that's already been done? or at least in a similar fashion. v8 is already hooked up to it in chrome, so it's not like this is a crazy idea
05:17 < jmoyers> for.. what though?
05:17 < jmoyers> i just don't get it
05:18 < tedsuo_> the more I write my code to run in node, the more i find use cases for running it in node
05:18 < jmoyers> and like i said, check out https://github.com/rogerwang/node-webkit
05:18 < jmoyers> there are a few of these things
05:18 < jmoyers> that hook directly up to webkit
05:18 < harrisonm> tedsuo_: Right, but it also has webkit to hook into, a node dom implementation has to be separate
05:18 < jmoyers> fucking browsers are huge
05:18 < jmoyers> huge beasts
05:18 < Benvie> dom.js
05:18 < Nuck> Hmmm
05:18 < Nuck> Name this lib for me
05:18 < Benvie> https://github.com/andreasgal/dom.js
05:19 < tedsuo_> node-webkit looks aimed at something slightly different, one dom, exactly like the browser
05:19 < harrisonm> "Name That Lib" sounds like it should be a game show
05:19 < Nuck> harrisonm: totally
05:19 < tedsuo_> I wonder if there's a way to implement just the dom, not the layout engine or any of the other pieces
05:20 < Nuck> I've made an email template engine which combines handlebars with a system to put subject, HTML, and plaintext into one file
05:20 < tedsuo_> so you can still use jquery, but not have all the graphic rendering engine pieces taking up space
05:20 < Benvie> tedsuo
05:20 < Benvie> https://github.com/andreasgal/dom.js
05:20 < Nuck> jsdom
05:20 < harrisonm> tedduo_: so at that point you basically just have an HTML parser with some extra traversal features?
05:20 < Nuck> Use jsdom.
05:20 < Nuck> Fuck dom.js, use jsdom
05:21 < Nuck> https://github.com/tmpvar/jsdom
05:21 < timeturner> so much negativity...
05:21 < jmoyers> we already went over jsdom
05:21 < ChrisPartridge> Nuck: they've already discussed jsdom
05:21 < jmoyers> for some reason its magically not good enough
05:22 < Benvie> jsdom isn't quite the full dom implementation, although it's more completely integrated with node
05:22 < harrisonm> Not trying to shoot you down, tedsuo_, just not completely sure what your end goal is
05:22 < jmoyers> things bro
05:22 < Benvie> dom.js is an actual webidl compliant implementation with a full html5 spec compliant parser
05:22 < jmoyers> things and stuff
05:22 < LouisT> I realize this isn't strictly node.js or js related.. but i'm trying to match multiple youtube IDs from urls, /(?:(?:youtu\.?be(?:.com)?)\/(?:(?:watch.*?)v=)?([^\?#&\s\[\]\(\)]+))/gi anyone know a better way than that or how to fix it to match multiple?
05:22 < tedsuo_> harisonm: recreating what the jsdom-based jquery module currently does, yes
05:22 < jmoyers> jsdom uses an html5 parser.
05:23 < jmoyers> spider monkey is a brutal brutal dependency for a node app
05:23 < Benvie> it works in node
05:23 < jmoyers> its just fucking weird.
05:23 < jmoyers> choice is great, I'm just saying.
05:23 < Benvie> no I mean it doesn't require spidermonkey
05:23 < Benvie> it works in v8
05:23 < jmoyers> aaah
05:23 < jmoyers> didn't understand
05:23 < jmoyers> since it said
05:23 < tedsuo_> I agree that if I had to do it today, I would  create my html while avoiding the dom
05:24 < jmoyers> install spidermonkey
05:24 < Benvie> yeah compatibility was only added toward the end of the last development
05:24 < Benvie> it has a directory "nodeservo" for node
05:24 < tedsuo_> but it would simplify things if we could create html in node the same way we do it in our clients
05:24 < Nuck> LouisT: It should match multple
05:25 < jmoyers> phantom
05:25 < jmoyers> phantom simplicity
05:25 < tedsuo_> in the mean time, it's getting me to isolate my dom touching, which is probably a good thing anyways :)
05:25 < Benvie> although if you're willing to work with the full browser, https://raw.github.com/appjs/appjs/master/examples/chrome-in-node-repl.jpg
05:26 < LouisT> Nuck: i've tried, it doesn't seem to do it
05:26 < LouisT> Nuck: ["youtube.com/9bZkp7q19f0","9bZkp7q19f0"]
05:26 < LouisT> that's what i get back
05:26 < jmoyers> multiline
05:27 < LouisT> /(?:(?:youtu\.?be(?:.com)?)\/(?:(?:watch.*?)v=)?([^\?#&\s\[\]\(\)]+))/gi.exec('http://www.youtube.com/9bZkp7q19f0 test http://www.youtube.com/watch?v=u934fygh879g');
05:27 < LouisT> what i'm using to test it
05:27 < Nuck> LouisT: Well, it should match each one, you probably need to do some while loop shit or something, IDFK
05:27 < Nuck> I'd just use replace usually
05:33 < LouisT> Nuck: it's odd, i even tried /(?:(?:youtu\.?be(?:.com)?))/g.exec('http://youtu.be/ http://www.youtube.com/'); and it only catches the first domain but if i remove it, it does get the second..
05:33 < Nuck> LouisT: That's because exec doesn't work with the global flag, it only ever grabs the fidst one
05:33 < Nuck> IIRC
05:33 < LouisT> really!? wow if that's it i'm going to be mad.. heh
05:34 < LouisT> Nuck: wow.. that is it.. -.-
05:35 < ljharb> why would you use RegExp#exec? just use String#match
05:35 < LouisT> ljharb: i am now
05:35 < ljharb> kk
05:50 < very> erm.. yes, `exec` gives you one match at a time while `match` gives you all matches at once. but when you use capturing groups `exec` makes more sense.
05:57 < sinclair> import http = module("http");
06:02 < sinclair> declare var module: {
06:02 < sinclair>    exports: any;
06:02 < sinclair>    require(id: string): any;
06:02 < sinclair>    id: string;
06:02 < sinclair>    filename: string;
06:02 < sinclair>    loaded: bool;
06:02 < sinclair>    parent: any;
06:02 < sinclair>    children: any[];
06:02 < sinclair> }
06:02 < sinclair> that's kinda cool
06:03 < gnarf> sinclair: in other news, posting that many lines of text in IRC is not
06:03 < sinclair> gnarf: http://typescript.codeplex.com/SourceControl/changeset/view/fe3bc0bfce1f#samples%2fnode%2fnode.d.ts
06:03 < ljharb> how is that cool.
06:04 < ljharb> typing? extra "declare"? gross.
06:04 < sinclair> ljharb: was curious how it was rewriting module and outputting require 
06:05 < sinclair> ljharb: with modules declared declare module "http" {
06:05 < gnarf> I really wish people would stop seeing the loose typing in JS as a weakness...
06:05 < sinclair> gnarf: what practical benefit does it offer?
06:05 < sinclair> gnarf: other than leading to loose hacked up code?
06:06 < ljharb> it doesn't lead to that.
06:06 < gnarf> heh
06:06 < ljharb> any more than strict typing leads to unnecessarily tight, hard to refactor or modify code.
06:07 < niggler> fuck typescript
06:07 <@Nexxy> don't make me regrep the logs
06:08 < sinclair> ljharb: maybe its a style of code thing
06:08 < ljharb> lol, for a cussing frequency?
06:08 <@Nexxy> lol no
06:08 < ljharb> for what then?>
06:08 <@Nexxy> ljharb, https://gist.github.com/3829271
06:09 < ljharb> sinclair: it's absolutely a subjective thing , based on each dev, and the ways of thinking they're limited to (i'm no more immune than anyone else)
06:09 < ljharb> Nexxy: hahaha
06:09 <@Nexxy> lol :P
06:09 < ChrisPartridge> Gee, that's a long list
06:09 < ljharb> and you call me a whiner
06:09 < sinclair> ljharb: you know, you are right :)
06:09 < gnarf> I prefer writing my javascript in javascript
06:09 < gnarf> i guess
06:10  * gnarf shrugs
06:10 <@Nexxy> you're a whiner, niggler is just a curmudgeon
06:10 < ljharb> :-p
06:10 < harrisonm> Was going to spend tonight playing around with node-irc, I think I know what I'm going to do now
06:10 < ljharb> i'm a little curmudgeony too.
06:10 < ljharb> gnarf++
06:10 < sinclair> ljharb: let's see where TS goes, i think im done talking about it actually, im going to try code something with it
06:11 < ljharb> good luck with that
06:11 <@Nexxy> TS?
06:11 < niggler> blah Nexxy there are too many languages that represent mere incremental improvements
06:11 < sinclair> Nexxy: TypeScript
06:11 <@Nexxy> "IT'S NOT BETTER ENOUGH!"
06:11 < harrisonm> sinclair: more power to ya, looks unwieldy to me
06:11 < niggler> N+1 won't win
06:12 < niggler> kinda like why most facebook clones wont unseat facebook
06:12 < sinclair> harrisonm: looks like heaven to me :D 
06:13 <@Nexxy> as in a bunch of empty promises?
06:13 < niggler> no not like that
06:13 < niggler> bunch of empty promises is one thing
06:13 < gnarf> Nexxy++
06:13 < niggler> i personally think a new language is worth pursuing if it significantly raises the bar or does something other languages can't
06:13 < harrisonm> Actually heard someone say they had an idea that they thought was going to be bigger than Facebook passing in the hall today.  Cringed.
06:14 < niggler> there are ideas bigger than facebook out there, and even facebook admits it
06:14 < niggler> but everyone is working on those problems
06:14 < harrisonm> Maybe it wasn't that they said it
06:14 < harrisonm> but the *way* they said it
06:14 < niggler> overconfidence
06:15 < harrisonm> a particular, overconfident way that I've heard a thousand times before
06:15 < gnarf> harrisonm: with a smirk and $$ in the eyes?
06:15 < harrisonm> Precisely
06:15 < niggler> next year we'll see what's next in this whole social thing
06:15 < niggler> no one yet has figured out how to crack mobile
06:16 < mon> FB is for the masses
06:16 < harrisonm> My fingers are crossed on tent.io, but it's always a bit of a crapshoot
06:16 < harrisonm> Esp. with distributed systems
06:16 < niggler> tent.io is futile
06:16 < danheberden> gnarf, you mean http://doubledollarjs.com/ ?
06:16 < danheberden> :p
06:16 < gnarf> http://open.spotify.com/album/4tPRXghD4ago6NYyyfrtES
06:16 < niggler> so if tent.io is git, what's github?
06:17 < niggler> if tent.io is mercurial, what's bitbucket
06:17 < niggler> tent.is doesnt quite cut it
06:18 < ljharb> what? how is it related to git
06:18 < niggler> tent is the protocl
06:18 < harrisonm> github and bitbucket are federated central systems for git and mercurial
06:18 < harrisonm> tent.is is really rudimentary right now
06:18 < harrisonm> but it's also less than a week old
06:18 < harrisonm> and tentd is two or three weeks old
06:19 < harrisonm> So I think there's stuff to be seen before we can call succeed/fail
06:19 < niggler> that's true harrisonm 
06:20 < alucardX> hi
06:21 < harrisonm> Plus, git was around for years before github, though that's almost entirely thanks to the Linux codebase
06:23 < ljharb> by "almost entirely" you mean "entirely" i assume, since thats what git was invented for.
06:24 < danheberden> i'm sure it was around for the thought that someone else someday might want to use it, ya, ljharb?
06:24 < danheberden> like - in addition to
06:24 < ljharb> linus torvalds built it for linux, and released it because others might have use of it.
06:24 < ljharb> so if not for linux it wouldnt have existed.
06:24 < danheberden> totes
06:25 < danheberden> so "almost entirely" seems to fit that context is all i'm saying :)
06:26 < harrisonm> I knew a few people that used it for things other than Linux before github was a thing
06:26 < ljharb> before github, totally
06:26 < danheberden> fucking hipsters
06:26 < ljharb> but you said git was thanks to the linux codebase.
06:26 < ljharb> and that's entirely.
06:27 < harrisonm> fair enough
06:27 < danheberden> "around" and "existed because" are two different things
06:27 < danheberden> but this is a silly argument
06:29 < harrisonm> danheberden: Yeah, kind of
06:29 < ljharb> lol yes
06:29 < harrisonm> All I'm trying to say is we should all be using SharePoint
06:31 < danheberden> hahaha
06:31 < danheberden> h/t harrisonm
06:38 < harrisonm> thank ya
06:46 <@Nexxy> why is airport parking so expensive
06:47 < harrisonm> Because they can get away with charging that much.  Your next best options are public transit and having a friend drop you off/pick you up
06:47 < harrisonm> At least, that'd be my guess
06:48 < harrisonm> My airport experience as an adult is extremely limited
06:49 < danheberden> you could always park at a shopping mall or something for a few days and get a cab, but you risk getting your car towed :p
06:49 <@Nexxy> yeah :<
06:50 < danheberden> though ~$10 / day for parking doesn't seem to harsh
06:50 < danheberden> (here at least)
06:50 < danheberden> when parking downtown is like $5 for a few hours at ninght
06:50 < danheberden> *night
06:50 < harrisonm> It's that cheap at your airport?
06:50 <@Nexxy> it's $16/day @ PDX
06:50 <@Nexxy> so JSConfEU is going to be $80 just in parking!
06:50 < ChrisPartridge> gee, that's a bit steep
06:50 <@Nexxy> yeah
06:50 < harrisonm> I think that's about the minimum at DFW
06:51 < danheberden> Nexxy: i'm in pdx
06:51 <@Nexxy> or $50 if I want to leave my car by the highway and take a shuttle to the airport
06:51 < danheberden> it's $10 a day and one day free for each week
06:51 < danheberden> so one week is $60
06:51 < danheberden> you can just park your car at my place and i'll take you, lol
06:51 <@Nexxy> are you going too?
06:51 < danheberden> nah
06:51 <@Nexxy> oh ;<
06:51 < danheberden> too much travel this year already
06:51 < ChrisPartridge> Out of curiousity (I dont travel via plane much), I just checked my airport.. $25 a day
06:51 < danheberden> but i'm lke 3 miles away from pdx
06:51 <@Nexxy> well I'm leaving @ like 5:00 tomorrow
06:51 < danheberden> gateway area
06:51 < danheberden> oh wow
06:52 < danheberden> but yeah, it's been $10/day for a while
06:52 < danheberden> unless they just raised it :/
06:52 <@Nexxy> well I just checked their website
06:52 < danheberden> ChrisPartridge: oy vey
06:52 <@Nexxy> $10/day is economy
06:52 <@Nexxy> which is way out by the 205
06:52 < harrisonm> Oh, okay, I'm full of crap, remote parking at DFW is $8/day
06:52 < danheberden> Nexxy: yeah, but there is a shuttle
06:52 <@Nexxy> but, shuttle
06:52 <@Nexxy> I'll pay the extra $30
06:52 < danheberden> it's really quick.easy
06:53 < danheberden> s/\./\/
06:53 < danheberden> ugh
06:53 < danheberden> messed THAT up
06:53 <@Nexxy> but I feel like my car will be more vulnerable out there
06:53 < danheberden> park by station O, and you can get on at station W
06:53 < danheberden> And then drop off at station 
06:53 < danheberden> o
06:53 < terinjokes> i take BART from Berkeley straight to SFO, no parking fees
06:53 <@Nexxy> yeah you should just come pick me up
06:54 < danheberden> Nexxy: i've never had a problem and i've parked there many times
06:54 < ChrisPartridge> Surely someone could drop you off?
06:54 < danheberden> and the shuttle runs often, like, every 15 minutes
06:54 < harrisonm> We were parked in remote for 2 weeks for a family vacation and it was fine
06:54 <@Nexxy> ChrisPartridge, nop!
06:54 < harrisonm> shuttle was prompt too
06:54 < danheberden> yeah, i use economy like every month or so
06:54 < danheberden> for a week
06:54 <@Nexxy> ok
06:55 < danheberden> i mean, do what's comfrotable for ya
06:55 <@Nexxy> that's reassuring I suppose
06:55 < danheberden> but i've never had issues - and parking between the O and W station, you can pickup the shuttle on its way out
06:55 < harrisonm> dang that's a lot of travel
06:55 < danheberden> and drop off on it's way in
06:55 < danheberden> which is nice :)
06:55 < danheberden> (blue lot)
06:55 <@Nexxy> oki
06:55  * Nexxy writes that down
06:56 <@Nexxy> thanks :D
06:56 < danheberden> of course
06:56 < danheberden> though i should just take a cab, since i live close enough (gateway)
06:56 <@Nexxy> I'm in Beavertron
06:56 < danheberden> ah, i used to be out there
06:56 <@Nexxy> (I got that from s5fs)
06:56 < danheberden> that was fun driving 45 minutes to get to the airport
06:56 < chovy> how shold i push my node app to my server?
06:57 <@Nexxy> ChrisPartridge, git
06:57 < chovy> production serer
06:57 <@Nexxy> erm
06:57 <@Nexxy> chovy, git*
06:57 < harrisonm> ^
06:57 < chovy> i don't have a central repo anywhere
06:57 <@Nexxy> git push production master
06:57 <@Nexxy> chovy, gitolite is easy
06:57 < danheberden> setup git on your production server, setup a remote called "production"
06:57 < danheberden> pointing to your server via ssh
06:58 < danheberden> git remote add username@server:/dir/to/the/git/repo
06:58 < danheberden> sorry, git remote add production username@server:/dir/to/the/git/repo
06:58 < danheberden> and then you can push to that remote server
06:58 <@Nexxy> then you do some post-receive hook hackery
06:58 < chovy> danheberden: so run that command on my dev box?
06:58 < chovy> but server is the production hostname?
06:58 < danheberden> i made `gith` for post-receive stuff from github, too
06:59 < danheberden> chovy, it's like, you're pushing your git repo to the git repo on the server
06:59 < danheberden> so you control when that happens
06:59 <@Nexxy> I think you should also mention that there are some tweaks to working tree 
07:00 < danheberden> preferably
07:00 <@Nexxy> depending on the directories of your node user/app
07:01 < danheberden> chovy, we're talking about a post-receive hook in that remote repo
07:01 < danheberden> that sets the GIT_WORK_TREE environment variable to a folder on your server
07:01 < jmoyers> https://github.com/substack/fleet
07:01 < danheberden> where the actual site would live
07:01 < jmoyers> also nice
07:01 < jmoyers> for multi server deployment
07:02 < chovy> danheberden: what do i do on the production server to set this up?
07:02 < chovy> i have git, but nothing else has been done as far as code goes
07:02 < chovy> do i need to do git init on remote server first?
07:04 < harrisonm> jmoyers: realize that wasn't directed at me, but thanks
07:04 < chovy> danheberden: git push production master
07:04 < chovy> says not a git repo
07:04 < danheberden> chovy http://toroid.org/ams/git-website-howto
07:05 < danheberden> that *i hope* should explain it
07:06 < chovy> danheberden: thanks
07:08 < joshthecoder> can anyone explain this line in node's debugger? https://github.com/joyent/node/blob/master/lib/_debugger.js#L997
07:08 < joshthecoder> scratching my head wondering how this could never be undefined. I must be missing something here....
07:11 < chovy> danheberden: git push web +master:refs/heads/master
07:11 < Sven_vB> i'd tend to say there are parentheses missing
07:11 < chovy> what is that?
07:12 < chovy> danheberden: that doesn't put the code on my server. it puts a bunch of git related directories in my directory
07:13 < chovy> 8000 objects, what is this?
07:13 < danheberden> i... don't know if you followed the instructions fully
07:13 < danheberden> if you have a server remotely, you can add that server _locally_ as a remote
07:14 < danheberden> git remote add web username@serveryouhavesshaccessto.com:/dir/to/git/folder
07:14 < chovy> it's not pushing my code it's pushing a bunch of other files
07:14 < danheberden> and then git push web +master:refs/heads/master should setup master as a remote tracking branch
07:14 < Sven_vB> sshfs works great with git
07:14 < danheberden> you could also do git push web -u master
07:14 < chovy> i don't think i need this +master head thing
07:15 < danheberden> chovy - it's a bit old, so perhaps
07:15 < danheberden> git push web -u master might be easier
07:15 < danheberden> either way, pushing to that remote should work
07:15 < danheberden> git push web master
07:15 < danheberden> (or whatever you named that remote)
07:15 < danheberden> that article just explains the process
07:16 < danheberden> was hoping it'd flesh out some questions/methodologies for you
07:16 < chovy> i don't have 8000 files
07:16 < chovy> i have about 50
07:16 < chovy> so it is doing something else.
07:16 < chovy> i will probably just use rsync
07:17 < harrisonm> chovy: git push objects != # of files, if I'm not mistaken
07:18 < Sven_vB> someday you'll understand more about git and realize what you've been missing out on ;)
07:18 < Sven_vB> maybe your git directory just isn't cleaned up
07:19 < ljharb> http://gitimmersion.com/
07:20 < harrisonm> I've just recently started using branches and whatnot for organization
07:20 < harrisonm> it's wonderful
07:21 < harrisonm> It helps that the sublime text git plugin is really good
07:21 < Sven_vB> i'd use a local git repo, set the worktree to some sshfs mount of the server and pull it. that will "restore" the new and/or missing files onto the worktree -> sshfs -> server
07:22 < chovy> scp. done
07:23 < Sven_vB> however, if the connection is very slow, it will be better to have a copy of the repo on the server (in a not webserved directory), sync that (ideally with only one large file "pack" being transferred) and do the pull on the server without sshfs
07:24 < chovy> danheberden: branches  config  description  HEAD  hooks  info  objects  refs
07:24 < chovy> that is the file structure on production.
07:24 < chovy> that is not the code in my repository locally.
07:24 < harrisonm> Weird, looks like it just pulled your .git directory
07:25 < chovy> it was at 4% after about 10 minutes. so i just cancelled it.
07:25 < chovy> no idea what all that is, unless it's all git repos for my entire local machine.
07:26 < Sven_vB> chovy, git will first sync the .git, and only at the end will it sync the "normal" directory contents with that copy of .git
07:26 < Sven_vB> however, if your .git is huge, something went wrong with the repo altogether
07:26 < Sven_vB> you can try the sshfs (or curlftpfs for FTP) approach first
07:27 < Sven_vB> then most operations with your huge .git will be kept local
07:29 < chovy> i let it finish. still nothing but that HEAD stuff
07:29 < chovy> my code is not there.
07:29 < chovy> it seems this requires two different directories on the production server to actually get the code there
07:29 < chovy> one for the master/head and one to checkout from locally.
07:35 < chovy> git remote add web
07:35 < chovy> i screwed that path up, how do I reset it?
07:35 < Sven_vB> git remote rm web
07:36 < Sven_vB> also you can find the manpages by concatenating git, a hyphen and the main command, e.g. for help for git remote: man git-remote
07:36 < chovy> k
07:37 < chovy> i still don't get how 'git init .' results in 8000 files
07:37 < Sven_vB> yes that is strange. what did it say as its result?
07:37 < Sven_vB> maybe sth. like "re-initializing"? ;)
07:38 < Nuck> I'm trying to write a parser, any suggestions on what to/not to do
07:39 < harrisonm> Don't use regex to parse xml
07:39 < harrisonm> apart from that, not really
07:39 < Nuck> I'm parsing Handlebars, actually
07:40 < Nuck> ... Why don't I just modify THEIR parser.
07:40 < Nuck> That'd probably be a less stupid thing.
07:40 < harrisonm> woo forks
07:40 < chovy> ok, i am an idiot
07:40 < harrisonm> good for eating salad AND implementing software quickly
07:40 < chovy> i forgot i had mongo, node, redis src files in my repo too
07:41 < harrisonm> ahh, that'll do it
07:41 < txdv_> o you
07:41 < harrisonm> because I'm not the first person to make that joke
07:47 < Zak> forks are also good for stabing people in the face
07:48 < Zak> especially when they make terrible jokes
07:48 < harrisonm> It's 2:40 A.M. here, cut me some slack
07:48 < sinclair> niggler: i don't like express either
07:48 < Zak> harrisonm: you can't cut with a fork!
07:49 < Zak> :P
07:49 < harrisonm> ...
07:49 < sinclair> i don't like its author
07:49 < harrisonm> now we're even
07:49 < Zak> harrisonm: indeed
07:53 < harrisonm> There was one particular cafeteria where I used to go to school that had spoons that cut better than the knives
07:54 < harrisonm> but that's beside the point.  On that note, I'm going to bed.  G'night
07:54 < mdedetrich> sinclair: whats wrong with express's author
07:55 < sinclair> he's a hipster
07:55  * sinclair hates hipsters
07:55 < mdedetrich> I think like half of node.js are hipsters
07:56 < mdedetrich> thats a lotta hate man
07:56 < Zak> i heard hipsters use TypeScript
07:56 < Zak> its the latest fad
07:56 < txdv_> i hated js before it was cool to hate js
07:56 < sinclair> Zak: no self respecting hipster would use MS products
07:57 < sinclair> Zak: which explains a lot about this channel
07:57 < txdv_> ms has changed
07:57 < Zak> i definitely hated JS when I first encountered it.. because it fucking shit
07:57 < mdedetrich> sinclair: agreed
07:57 < mdedetrich> sinclair: hipsters would never use MS products
07:57 < mdedetrich> hipsters would use something like coffeescript
07:57 < Zak> i still remember messing up 1 semi colon somewhere and you would never get a reasonable syntax error
07:57  * Sven_vB uses MS products
07:57 < mdedetrich> which I also use
07:58 < Zak> not even vaguely helpful
07:58 < Zak> not sure if hipsters have much of a choice
07:58 < sinclair> do you identify with this guy ? https://secure.gravatar.com/avatar/f1e3ab214a976a39cfd713bc93deb10f?s=420&d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png
07:58 < Zak> heaps of people still use Windows
07:58 < sinclair> because i dont
07:59 < Zak> the poor guy looks lost. Must be a PHP dev...
07:59 < sinclair> Zak: that's the guy who wrote express
07:59 < Zak> ha, no way
07:59 < txdv_> java in the browser
07:59 < sinclair> Zak: im afraid so
08:00 < Zak> what, that's TJ?
08:00 < Zak> i always envisioned him as a huge nerd with a bell
08:00 < sinclair> google "TJ Holowaychuk"
08:00 < Zak> *belly
08:00 < Zak> yeah, I just did
08:00 < mdedetrich> wow
08:00 < mdedetrich> that guy is bloody hipster
08:00 < Zak> that is definitely a new look
08:00 < Zak> i remember this photo
08:00 < Sven_vB> are there currently known problems with the npm registry?
08:00 < Zak> http://northstudio.nstest.zenutech.com/files/tj.jpg
08:01 < Zak> shouldn't stereotype anyway
08:01 < mdedetrich> Sven_vB: not that I know of
08:01 < mdedetrich> Zak: well he either looks like a hipster or an emo
08:01 < sinclair> now, im not one to judge software based on who wrote it, but i'd be lying if i view express in a negative light due to that image, also, TJ was critical of TS, soooo
08:01 < Zak> yeah, i would have said emo actually.. the black hair
08:02 < Zak> haha sinclair 
08:02 < Zak> sinclair... protector of TS
08:02 < mdedetrich> sinclair: critical is putting it lately
08:02 < Zak> just imagine him in a shining set of knight's armor
08:02 < mdedetrich> sinclair: he like spewed on it
08:02 < ljharb> i think we've talked about typescript in #node.js long enough. take it to #typescript.
08:02 < ljharb> it's not node.ts.
08:02 < Sven_vB> in the meantime, npm even told me what's wrong: npm ERR! Error: connect EHOSTUNREACH ... well, local network debugging first.
08:02 < Zak> dw, it will disappear soon enough ljharb 
08:02 < Zak> (because typescript will)
08:02 < ljharb> lol of course it will.
08:02 < ljharb> but still.
08:02 < mdedetrich> i don't think typescript is that off topic
08:03 < sinclair> mdedetrich: good thing I don't care what TJ thinks
08:03 < mdedetrich> I'm not sure about ts dissapearing
08:03 < mdedetrich> it adds something that other js translators dont
08:03 < mdedetrich> static typing
08:03 < mdedetrich> while still working with common.js
08:03 < Zak> yeah, i guess we'll see
08:03 < Zak> i don't have a use for it anyway
08:03 < ljharb> mdedetrich: if it's not javascript, it's off topic.
08:04 < mdedetrich> its also more similar to javascript, than coffeescript
08:04 < mdedetrich> ljharb: I tought this is the node.js channel, not the javascript channel
08:04 < ljharb> similar : same :: == : ===
08:04 < ljharb> mdedetrich: node.JS. yes. node dot javascript.
08:04 < txdv_> tj is mor ejavascript than coffeescript is
08:04 < Zak> does that mean CoffeeScript is off-topic?
08:04 < ljharb> imo yes :-)
08:04 < Zak> where is niggler
08:04 < mdedetrich> that doesn't make any sense
08:04 < Zak> i seriously need to make that niggler bot
08:05 < mdedetrich> node.js is for running apps on javascript code
08:05 < mdedetrich> its a platform, not a language
08:05 < ljharb> it's both.
08:05 < ljharb> if you want to generate your JS with TS or CS or whatever, it's your funeral, but only the javascript is relevant to node.
08:05 < mdedetrich> which means that its not completely off topic to talk about TS or CS
08:06 < mdedetrich> like if you have issues with TS or CS running a node.js application
08:06 < ljharb> somewhat off topic is still not on topic :-p
08:06 < mdedetrich> thats a logical fallacy
08:06 < sinclair> ljharb: not at all, im using TS to code node
08:06 < mdedetrich> =D
08:06 < chovy> my node app does not appear to be using redis
08:06 < ljharb> specifically i'm not talking about debugging node issues when youve written CS or TS, i'm talking about the merits of the languages.
08:06 < chovy> i'm not getting sessions.
08:06 < sinclair> ljharb: im also running node on IIS7
08:06 < chovy> works fine locally.
08:06 < chovy> redis is running
08:06 < mdedetrich> ljharb: well to be fair, thats a very fine line
08:06 < ljharb> this room has had typescript arguments for days. it's not helpful.
08:07 < ljharb> mdedetrich: indeed it is. but people (the same people) keep trying to bring up the merits of TypeScript over and over again. and it's not worth talking about anymore, because the discussions are the same, every time.
08:07 < mdedetrich> ljharb: well ban/warn those people than, thats a separate issue
08:08 < txdv_> yeah, because it just happens to be that the features of TS do not change over night
08:08 < ljharb> i'm not an op - i'm not making a pronouncement nor threatening with bans
08:08 < sinclair> ljharb: the problem is, no one is interested in discussing the merits or disadvantages of it
08:08 < ljharb> sinclair: then why do you keep trying to?
08:09 < mdedetrich> nothing wrong with such a discussion
08:09 < sinclair> ljharb: im just as open to reasonable criticisms about it as i am to discussing its merits. sadly, this channel writes it off with "it sucks" without and good reason.
08:10 < ljharb> mdedetrich: nope, nothing wrong with such *a* discussion. but it's like the 12th time in the last few days :-)
08:10 < mdedetrich> ljharb: and?
08:10 < ljharb> it's just tiring, is all.
08:10 < mdedetrich> just ignore it then
08:10 < ljharb> sinclair: i've heard lots of good reasons, that you seem to disagree with.
08:10 < xico> Hello all. Anyone care to talk about global variables in Node.JS that keep their state all along the execution of the application and are accessible from every module of the application?
08:11 < sinclair> ljharb: i havent heard anything other than niggler's point about the amount of JS is outputs
08:11 < mdedetrich> xico: isn't there globals for that
08:11 < ljharb> mdedetrich: i'd prefer to just ask the room to tone it down, on the off chance i'm not the only one annoyed.
08:11 < ljharb> sinclair: that's the only point you've accepted as valid, but there's lots of others.
08:11 < xico> mdedetrich: That's what I want to talk about.
08:11 < sinclair> ljharb: like?
08:11 < ljharb> sinclair: for example, you are convinced that static typing is better. it's not automatically better, so any reasoning that doesn't assume it's better, you reject.
08:12 < sinclair> ljharb: it is optional tho
08:12 < xico> mdedetrich: I need to have an object with an imap connection
08:12 < mikeal> any node_redis contributors in here?
08:12 < xico> mdedetrich: for every user that connects to my server
08:12 < ljharb> sinclair: "optional" doesn't mean its flaws aren't still there.
08:12 < xico> I can keep adding these connections to the Global object
08:12 < ljharb> sinclair: what's the benefit if you're not using the static typing?
08:13 < mdedetrich> xico: http://nodejs.org/api/globals.html
08:13 < mdedetrich> just simply do global.something = somethin
08:13 < xico> mdedetrich: The problem is that global variables carry a lot of problems with them, like memory allocation, concurrency
08:13 < xico> etc
08:13 < mdedetrich> globals inherently imp lie issues with concurrency
08:13 < mdedetrich> if you don't want concurrency issues, don't use globals?
08:13 < Zak> its not just about concurrency
08:14 < mdedetrich> *imply
08:14 < Zak> its just "bad" (tm)
08:14 < xico> memory problems also
08:14 < mdedetrich> Zak: not always
08:14 < mdedetrich> Zak: globals do have their uses
08:14 < Zak> very often, more often than not
08:14 < Zak> sure
08:14 < sinclair> ljharb: you could use some of its other functionality
08:14 < Zak> i don't think anybody in here would encourage the use of them
08:14 < xico> Well, maybe if I just keep read only objects
08:14 < xico> in there
08:14 < Zak> we'll all say, "don't use them"
08:14 < xico> I wouldn't run into a lot of these problems
08:14 < Zak> and only if you struggled for a while, or knew a reason why, you would end up using a global
08:14 < ljharb> sinclair: such as?
08:15 < sinclair> arrow functions
08:15 < ljharb> so, syntactical sugar?
08:15 < sinclair> declaration files
08:15 < ljharb> you can already get that if you run v8 in harmony mode.
08:15 < ljharb> how are declaration files a benefit?
08:15 < mdedetrich> Zak: doing what 'all' people say
08:15 < sinclair> lol
08:15 < mdedetrich> Zak: isn't good advice
08:15 < ljharb> sinclair: more schema is a detriment imo.
08:15 < sinclair> ljharb: no, declaration files are helpful at all, my bad
08:16 < txdv_> type resolution magic!
08:16 < ljharb> sinclair: ok, so besides syntax sugar that's already in ES6 (real javascript), and static typing (which there's no need to use), what benefits?
08:16 < mdedetrich> your last point
08:16 < mdedetrich> about static typing
08:16 < mdedetrich> is highly arguable
08:16 < ljharb> mdedetrich: yeah, that's more opinionated i suppose
08:16 < mdedetrich> I would argue its actually incorrect
08:17 < mdedetrich> static typing has massive benefits when your application has a massive number of programmers on it
08:17 < ljharb> mdedetrich: just for now, i want to hear the other benefits
08:17 < ljharb> mdedetrich: i work on massive JS apps that don't have any static typing. no issues.
08:17 < topi`_> any experiences of moving your site from node-mysql 0.9.5 to one of these 2.0.0 alphas?
08:17 < sinclair> ljharb: how many developers on your team?
08:17 < mdedetrich> ljharb: thats twisting
08:17 < mdedetrich> my opint
08:17 < mdedetrich> *point
08:18 < mdedetrich> its not the SIZE of the project, its 'HOW MANY DEVELOPERS' are actively coding on it
08:18 < topi`_> it seems that the old Client class is gone, rplaced with a Connection class. but that's just the tip of the iceberg.
08:18 < ljharb> sinclair: around 30 on mine
08:18 < mdedetrich> its one of the reasons why companies like twitter moved from languages like ruby to scala
08:18 < ljharb> absolutely its not.
08:18 < mdedetrich> its one of the reasons they gave
08:18 < ljharb> mdedetrich: but either way, unit tests cover typing issues just fine.
08:18 < mdedetrich> unless you say their engineer is lying....
08:18 < ljharb> because of performance. not because of brittleness.
08:19 < mdedetrich> because of both
08:19 < mdedetrich> if you read what he said....
08:19 < ljharb> reading.
08:19 < mdedetrich> their ruby code had tests basically testing if a 'tree' was a 'tree'
08:19 < mdedetrich> using typeof
08:19 < mdedetrich> that sought of stuff is not required in static languages at all
08:19 < ljharb> i'll need a link
08:20 < txdv_> don't you badmouth ruby
08:20 < ljharb> also twitter is not abandoning ruby. they're using scala for most of their new services.
08:20 < ljharb> but there will always be ruby on rails at twitter, for some value of always.
08:20 < topi`_> static languages might be annoying, but i'd take haskell any day over js ;)
08:20 < mdedetrich> well basically everything thats not fronted templating
08:21 < txdv_> topi`_: ghcjs
08:21 < mdedetrich> ljharb: read this http://blog.obiefernandez.com/content/2009/04/my-reasoned-response-about-scala-at-twitter.html
08:21 < sinclair> https://sites.google.com/site/steveyegge2/is-weak-typing-strong-enough
08:21 < mdedetrich> basically twitter ended up having to put kind_of tests
08:21 < mdedetrich> all over the place
08:22 < topi`_> txdv_: now that must be a fun project.
08:22 < mdedetrich> because they had to make sure an object was of a certain class
08:22 < txdv_> topi`_: stop the talk and use it
08:22 < mdedetrich> you don't have to do that at all in static languages
08:22 < ljharb> mdedetrich: you don't have to do that in a ruby app either. that's just what some of the devs on the main rails app chose to do.
08:22 < mdedetrich> if your function/method takes a something of type 'tree', you know 100% its going to be a tree
08:23 < mdedetrich> ljharb: you do if you want to guarantee stuff won't break
08:23 < ljharb> also that article was written 3 years ago. the perspective there is slightly different now.
08:23 < ljharb> mdedetrich: i'm saying at twitter, they DONT, and stuff doesn't break because of it.
08:23 < mdedetrich> ljharb: the engineer says otherwise...
08:23 < ljharb> the engineer who hasn't worked at twitter in years?
08:23 < mdedetrich> ljharb: the engineer said they had to put kind_of tests all over the place
08:23 < ljharb> who said it 3 years ago?
08:24 < ljharb> that is not the case now.
08:24 < mdedetrich> well duh
08:24 < mdedetrich> because they replaced most of their backend with scala
08:24 < ljharb> no
08:24 < ljharb> that is not the case IN THEIR RUBY APP
08:24 < mdedetrich> what do you mean by Ruby App?
08:24 < mdedetrich> if we are talking about twitter
08:24 < ljharb> twitter.com is still primarily a ruby on rails app.
08:25 < mdedetrich> ruby is used for the fronted tempting (like html generation) and stuff like that
08:25 < mdedetrich> anything backbend heavy that doesn't fail was done to scala, like their message queue
08:25 < mdedetrich> sorry that they don't want to fail
08:25 < ljharb> mdedetrich: please don't make statements like that to me as if they're absolute. i work there. i have the codebase.
08:26 < mdedetrich> I just reading what their engineer said
08:26 < ljharb> 3 years ago. an engineer who has not worked there in 2+ years.
08:26 < mdedetrich> that doesn't nullify his point
08:27 < mdedetrich> or his argument
08:28 < sinclair> thanks mate
08:28 < txdv_> the amount of to javascript compilers is too damn high!
08:29 < mdedetrich> in any case, its the paragraph under Most damning: that I heavily agree with
08:29 < Sven_vB> so write a new one that replaces all of them ;)
08:29 < ljharb> mdedetrich: scala doesn't require static typing. it's optional.
08:29 < mdedetrich> ljharb: thats the dumbest thing
08:29 < mdedetrich> ljharb: I have heard
08:29 < mdedetrich> scala heavily enforces static typing everywhere
08:30 < ljharb> actually it uses inference most of the time. you only have to specify types occasionally.
08:30 < mdedetrich> their solution to duck typing is structured typing, which again is static
08:30 < mdedetrich> ljharb: have you done computer science
08:30 < mdedetrich> inference is NOTHING to do with static or dynamic typing
08:30 < ljharb> http://en.wikipedia.org/wiki/Scala_(programming_language)#Expressive_type_system
08:30 < ljharb> "Scala is able to infer types by usage. This makes most static type declarations optional."
08:30 < mdedetrich> that
08:31 < mdedetrich> doesn't disprove
08:31 < mdedetrich> what i said
08:31 < mdedetrich> at all
08:31 < mdedetrich> inference has nothing to do with dynamic or static types
08:31 < ljharb> i didn't say it did. but you called it the dumbest thing youve ever heard when in fact it's 100% true.
08:31 < mdedetrich> if you have a string in scala
08:31 < mdedetrich> you cannot god damn call a method
08:31 < mdedetrich> on the string
08:31 < Sven_vB> truth by wikipedia
08:31 < mdedetrich> if it doesn't exist
08:31 < mdedetrich> regardless
08:32 < mdedetrich> if you annoyed the variable with String or let the inference engine take care of that for you
08:32 < mdedetrich> type inference fills in blank, it doesn't make static types dynamic
08:32 < ljharb> sigh. i'm not having a discussion about scala right now.
08:32 < mdedetrich> you don't know what you are talking about in this case
08:32 < txdv_> we can wait 5 minutes
08:32 < ljharb> your original point is that on large teams, static typing has massive benefits.
08:32 < ljharb> what sort of benefits
08:32 < mdedetrich> in a dynamic language, you can call .wababdaedeesomeMethod()
08:32 < mdedetrich> on anything
08:32 < mdedetrich> it will only complain
08:32 < mdedetrich> at runtime
08:33 <@konobi> how about you guys just write some god damn code and stop stroking your egos
08:33 < ljharb> of course. but thats what tests are for. to run your code, so runtime happens before delpoying.
08:33 <@konobi> =0)
08:33 < dhpe> as mentioned static typing does not have anything to do whether a type is declared in the program text or not.
08:33 < mdedetrich> ljharb: you don't have to make a lot of trivial unit tests for properties which static typing takes care of
08:34 < ljharb> you don't have to test for those things. just test a method that happens to call them, and if it throws an error, there you go
08:34 < mdedetrich> yeah and you don't do that in static languages, in fact you don't even have to run your program
08:34 < mdedetrich> the compiler catches that
08:34 < mdedetrich> it saves a lot on time
08:34 < mdedetrich> the biggest benefit is probably refactoring though
08:35 < ljharb> perhaps if you naturally type a lot of code with typeerrors. i've not had that problem in JS in a long time.
08:35 < mdedetrich> its basically not possible to have true refactoring in a completely dynamic language
08:35 < mdedetrich> thats why all ruby programmers use text editors and not IDE's
08:35 < ljharb> by "refactoring" do you mean the eclipse "refactor" option? or do you mean actually rewriting implementations of functions
08:35 < mdedetrich> anything
08:35 < ljharb> most engineers who work with statically typed languages can't program their way out of a box in an interview without eclipse.
08:36 < shinaku_> so?
08:36 < mdedetrich> thats not relevant
08:36 < mdedetrich> to what Im talking about
08:36 < txdv_> i can sum this discussion up
08:36 < txdv_> IF YOU LIKE IT - USE IT
08:36 < ljharb> and i refactor JS, ruby, and php code all the time without static typing or problems.
08:36 < ljharb> lol
08:36 < dhpe> i would emphasize the removal of a class of program errors a benefit for static typing before the ability to edit program, although an important aspect.
08:36 < mdedetrich> in a static language its trivial and easy
08:36 < mdedetrich> and in dynamic languages you have to do it manually
08:36 < mdedetrich> else you can get things calling methods which don't exist anymore
08:37 < mdedetrich> (since you are refactoring)
08:37 < mdedetrich> the former saves a lot of time
08:37 < txdv_> while coding with ruby I developed a habit where I would test run every little piece of code to check if everything gets invoked correctly
08:37 < Sven_vB> i think it's an advantage if the language is so well-designed that a text editor is enough to be able to program with it. if you need more tools, then there seems to be more obstacles than just data transfer (using a text editor) on the way from idea to code file.
08:38 < mdedetrich> Sven_vB: you can actually program in scala
08:38 < mdedetrich> with a text editor fine
08:38 < nathan7> hmm
08:38 < mdedetrich> I did it, and still do
08:38 < ljharb> it may save a lot of time for some people. but for many, it is no difference in time spent.
08:38 < txdv_> i can imagine there are a lot of scenarios where typechecking obviates the need for these test runs, where small test runs are no option or impossible
08:38 < mdedetrich> a LOT of people use vim when coding in haskell
08:38 < nathan7> I avoid using tab completion and things
08:38 < mdedetrich> or emacs
08:38 < mdedetrich> in fact haskell doesn't even have a decent IDE
08:38 < nathan7> txdv_: if unit tests are impossible, your code is badly designed
08:38 < Zak> ^
08:39 < mdedetrich> not really
08:39 < mdedetrich> you could be using a framework
08:39 < nathan7> separation of concerns is a good thing
08:39 < mdedetrich> that can limit your unit testing
08:39 < nathan7> mdedetrich: Then your framework is badly designed!
08:39 < ljharb> i like that steve yegge link you posted.
08:39 < txdv_> nathan7: i have embedded node into a game engine
08:39 < Zak> thats the worst thing that i bang my head against the wall for
08:39 < ljharb> it has a very good list of pros and cons.
08:39 < Zak> separation of concern
08:39 < mdedetrich> in any case, I'm not sure why I am arguing with ljharb, you got inference and static/dynamic typing
08:39 < mdedetrich> completely
08:39 < mdedetrich> confused
08:39 < txdv_> i haven't found a way how to test certain ingame stuff
08:39 < Zak> some reason, heaps of people love to couple stuff together
08:39 < Sven_vB> i think many of the "large project with many programmers" trains of thought seem to be more about the number of _negligent_ programmers, and whether the codebase can defend itself against the management hiring them
08:39 < Zak> or put it in global
08:40 < txdv_> nathan7: maybe you can give me some advice, you seem to have a solution for every problem
08:40 < ljharb> mdedetrich: i did not confuse them. i simply interjected our static/dynamic typing discussion with a comment about inference.
08:40 < ljharb> Sven_vB++
08:40 < mdedetrich> ljharb: they are not related to eachother
08:40 < mdedetrich> ljharb: at all
08:40 < ljharb> mdedetrich: absolutely they are. they're both related to typing.
08:40 < mdedetrich> …….
08:40 < ljharb> they also both are part of programming languages.
08:40 < ljharb> you can't say they're not related at all :-)
08:41 < nathan7> txdv_: Possibly.
08:41 < mdedetrich> and I can say you didn't know what you were talking about
08:41 < mdedetrich> Sven_vB: thats the general train of though
08:41 < nathan7> Sven_vB: Yes
08:41 < mdedetrich> its not so much negligent programemrs
08:41 < txdv_> i doubt that
08:41 < ljharb> mdedetrich: not without knowing my thoughts. what did i say that's patently untrue?
08:41 < mdedetrich> its just an issue that comes up when you have THOUSANDS of people working on one thing
08:41 < nathan7> Sven_vB: Pure OO works with separated teams who are prevented from communicating meanginfully with each other
08:41 < nathan7> Sven_vB: pure OO means you can define a statically typed interface by committee
08:41 < ljharb> mdedetrich: wait, when do you need thousands of people working on one thing? that sounds like a poorly designed monolithic architecture, that SOA is designed to avoid.
08:41 < nathan7> and everyone loves committees
08:41 < txdv_> fucking flame war
08:42 < txdv_> im out of here
08:42 < ljharb> lol
08:42  * Zak gets out his flamer
08:42 < mdedetrich> ljharb: like operating systems
08:42  * nathan7 sets txdv_ on fire
08:42  * Zak hands out marshmellows
08:42 < mdedetrich> or massive applications like office
08:42 < nathan7> mdedetrich: an operating system needn't be monolithic
08:42 < nathan7> mdedetrich: Enter Unix-land
08:42 < mdedetrich> ……
08:42 < ljharb> i wouldn't hold up office as a paragon of how to design systems.
08:42 < txdv_> I loke blue parrots and fuck you
08:42 < mdedetrich> I wouldn't comment on it unless you understand how large it is
08:43 < Sven_vB> txdv_, maybe i can help you with testing ingame stuff? i've some exp with "enhancing the accessibility"[tm] of games
08:43 < sinclair> txdv_: can we keep the language down please
08:43 < nathan7> mdedetrich: There's, say, coreutils
08:43 < nathan7> mdedetrich: and there's the kernel
08:43 < txdv_> sinclair: hyperbolization
08:43 < mdedetrich> the linux kernel is monolithic by design
08:43 < mdedetrich> if thats what you are going on about
08:44 < nathan7> The kernel is monolithic
08:44 < nathan7> In the sense that it is loaded at one time as an entire thing
08:44 < nathan7> ie beyond compiletime it's monolithic
08:44 < sinclair> txdv_: http://en.wikipedia.org/wiki/E8_%28mathematics%29
08:44 < nathan7> But if you look at the code it's modular
08:44 < mdedetrich> yes and?
08:45 < nathan7> that's what's relevant
08:45 < nathan7> everyone can work on his own part of the kernel
08:45 < nathan7> there are people working on drivers, people working on filesystems, etc
08:45 < mdedetrich> ljharb: <ljharb> mdedetrich: scala doesn't require static typing. it's optional.
08:45 < mdedetrich> ljharb: that is what you said
08:45 < mdedetrich> ljharb: which is incorrect
08:45 < ljharb> mdedetrich: ok, what i meant is, it doesn't require declaring static types.
08:45 < mdedetrich> like literally incorrect
08:46 <@konobi> huh, didn't realize YAC was so big
08:46 < ljharb> mdedetrich: i'll agree i worded it wrong. that doesn't mean i don't know what i'm talking about, it means i assumed too much about my audience.
08:46 < nathan7> I like the way you word your insults
08:46 < mdedetrich> either way, declaring types has close to nothing to do with whether your type system is static or dynamic
08:47 < ljharb> if you inferred it as an insult, that says more about you than me :-)
08:47 < mdedetrich> I didn't find it insulting, I found it wrong
08:47 < ljharb> mdedetrich: i'm aware of that. i apologize that i forgot a single word, "declaring", and confused the issue.
08:47 < mdedetrich> anyways the point is, static languages have compilers that find a lot of errors which you would have to write test cases for when you get a lot of people working on a piece of code
08:48 < mdedetrich> and they have refactoring that far surpass's dynamic languages
08:48 < mdedetrich> (and no, static languages do not implicitly require IDE's, thats just java being verbose as hell with its paradigm of treating everything as a class)
08:48 < ljharb> agreed on that one
08:49 < ljharb> i totally recognize that static typing lets you find some kinds of errors far sooner, and generally, that's a good thing.
08:49 < mdedetrich> points 2 and 3 are basically true
08:49 < mdedetrich> point 1 is somewhat debatable and depends
08:49 < sinclair> anyone here running nodejs on iis?
08:49 < nathan7> Trading freedom for security q=
08:49 < mdedetrich> on the nature of the project
08:49 < ljharb> as far as "refactoring", i think that's debatable too, because i've never had trouble refactoring stuff in a dynamically typed language
08:49 < nathan7> sinclair: lolwat
08:49 < mdedetrich> ljharb: if you use a static language
08:49 < mdedetrich> refactoring is much more trivial
08:50 < sinclair> nathan7: ?
08:50 < mdedetrich> than dynamic langauges
08:50 < ljharb> perhaps it is
08:50 < mdedetrich> its not a case of 'possible versus not possible'
08:50 < nathan7> sinclair: IIS is a webserver
08:50 < nathan7> sinclair: your node app is a webserver itself
08:50 < mdedetrich> its that refactoring in a static language is basically completely trivial
08:50 < nathan7> sinclair: IIS isn't a fast caching proxy, which is what you want in front of your node app for caching and load balancing
08:50 < nathan7> sinclair: Nginx, lighttpd - those are your friends
08:50 < mdedetrich> you execute a command on a class (lets say rename) and it refactors everything automatically for you
08:50 < sinclair> nathan7: and nodejs lacks all the administrative/configuration aspects of IIS
08:51 < mdedetrich> and you have a 100% guarantee that none of your code will break
08:51 < nathan7> sinclair: it's not a static file server
08:51 < mdedetrich> same goes for moving modules arouhnd
08:51 < nathan7> sinclair: and you simply expose what you want in your code
08:51 < sinclair> nathan7: IIS is more than a web server
08:51 < mdedetrich> *around
08:51 < mdedetrich> and whatnot
08:51 < ljharb> mdedetrich: renaming things isn't what i'd call "refactoring", but i used to use visual basic, i appreciate the ease of that.
08:51 < nathan7> Your basic security model is 'nothing is available'
08:51 < sinclair> nathan7: running node in IIS is sensible 
08:51 < mdedetrich> ljharb: thats refactoring
08:51 < sinclair> nathan7: so, i will continue to run node in iis thanks
08:51 < nathan7> sinclair: I'd run it behind nginx or lighttpd.. but of all things, not IIS
08:52 < sinclair> nathan7: im not here to describe why running node as a iis process is a good idea on windows, google the benefits for yourself
08:52 < mdedetrich> also if you code in something about scala
08:52 < txdv_> darth vader approves typescript
08:53 < mdedetrich> the debate about 'freedom'
08:53 < mdedetrich> is highly debatable and contentious
08:53 < mdedetrich> same can be said for Haskell
08:53 < mdedetrich> such languages are incredibly expressive, even in their use of dsl's
08:56 < mdedetrich> although those languages do have a somewhat steep learning curve
09:04 < sinclair> nathan7: http://tomasz.janczuk.org/2011/08/hosting-nodejs-applications-in-iis-on.html
09:06 < sinclair> note sure about needing to install the iis url rewrite module
09:07 < sinclair> *not
09:07 < DaMorpheuS> .
09:08 < sinclair> http://msdn.microsoft.com/en-us/library/windowsazure/dd573358.aspx <-- not too much of an issue
09:08 < DaMorpheuS> is there someone here with some good knowedge of riak?
09:09 < DaMorpheuS> please pm me
09:28 < samy> hi
09:29 < samy> quick question I guess
09:29 < samy> if someone has time to help
09:30 < sinclairzx> samy: i can try
09:30 < samy> i'm having a slight issue
09:30 < samy> ok
09:30 < samy> so i have defined 2 routes
09:31 < samy>  /:provider/:email that gets to a getProfile function
09:31 < sinclairzx> samy: is this using express?
09:31 < samy> yup
09:31 < sinclairzx> samy: sorry, i don't use express
09:31 < samy> damn
09:31 < samy> too bad :)
09:31 < sinclairzx> samy: try #express
09:31 < samy> will do
09:31 < samy> thx
09:31 < sinclairzx> ;)
09:41 < sinclairzx> for anyone interested, when setting up nodejs on IIS7, you will want the iisnode module, as well as the URL Rewrite module
09:41 < sinclairzx> this should be enough for a reasonable azure like environment 
09:55 < JumpLink> I have more than one webservices on my server, at the moment I use nginx to manage my different domains to forward the domain-request to my nodejs apps which each has his own port.  Is it possible to configure my nodejs-service that it responds to a defined domain (not only to a separate port) without nginx or apache as an intermediate layer?
09:56 < caioketo> anyone use socket.io ? i got problem with recieving in the client
10:07 < nathan7> JumpLink: err, write an HTTP proxy
10:16 < Nuck> JumpLink: read the Host header with every request, and then either respond or don't
10:16 < Nuck> But you can't bind multiple servers to the same port
10:16 < Nuck> So it's basically pointless
10:17 < JumpLink> Nuck: XD What's your favorite way?
10:18 < JumpLink> Nuck: do you would  use an additional webserver, also?
10:22 < Sven_vB> JumpLink, if you have multiple IPs, you can bind that service to one specific IP and set that IP up for the domain
10:22 < Sven_vB> if you have to share one IP, a proxy seems best
10:23 < Sven_vB> you'll probably have to make the other services to not bind to that IP on the same port, or they might conflict
10:26 < JumpLink> Sven_vB: that sounds all not perfectly, to use an nodejs-proxy would not be so much different than using nginx, or?
10:29 < Sven_vB> by proxy i did mean nginx
10:29 < Sven_vB> so yes, i think that's the best setup if you have only one IP
10:31 < JumpLink> Sven_vB: A other possibility would be combine all separate nodejs-servers to one, but the question is what is more cumbersome..
10:32 < nathan7> JumpLink: that's silly
10:32 < nathan7> JumpLink: and awful
10:33 < JumpLink> nathan7: yes
10:34 < JumpLink> that looks useful: https://github.com/nodejitsu/node-http-proxy
10:35 < nathan7> JumpLink: yes
10:35 < nathan7> JumpLink: also check jesusabdullah's my-little-proxy
10:36 < nathan7> JumpLink: it's a simple lib for node-http-proxy
10:36 < nathan7> JumpLink: https://github.com/jesusabdullah/my-little-proxy
10:36 < Sven_vB> is there a canonical shallow object copy function in NodeJS?
10:37 < JumpLink> nathan7: funny name, thanks
10:40 < nathan7> JumpLink: my little proxy / my little proxy / I used to wonder what node could be / my little proxy / until you shared all its magic with me
10:43 < mikeal> pretty proud of this https://github.com/mikeal/vanilla
10:45 < nathan7> Hey mikeal 
10:45 < nathan7> mikeal: <3
10:48 < mikeal> hehe
10:48 < Sven_vB> i don't get the vanilla. does it compile ES5 to older versions of ES?
10:48 < nathan7> Sven_vB: use the source, like
10:48 < nathan7> *luke
10:48 <@mbalho> vanillajs has already been done http://vanilla-js.com/
10:49 < Sven_vB> oh ok
10:49 < MitchW> lol mbalho 
10:49 < Sven_vB> and it's even easy to drop it in the tool chain like anywhere
10:50 < nathan7> "read some books on Vanilla JS"
10:50 < nathan7> which links to http://www.amazon.com/s?field-keywords=javascript
10:50 < nathan7> where entertainingly enough
10:51 < nathan7> the top result is "JavaScript & jQuery: The Missing Manual"
10:51 < MitchW> lol
10:51 < Sven_vB> nice
10:51 < nathan7> I'm not sure if I should laugh or slit my wrists
10:52 < MitchW> both at the same time? :)
10:52 < nathan7> I was considering it.
10:52 < nathan7> I have math homework to do though, so I think I'll just laugh
11:26 < wockan> hello
11:42 < ZBZZN> should I use rimraf for rm -rf or is there a better solution?
12:01 < pixie79> hi all - i am attempting to write my first nodejs application, it will eventually parse /proc/drbd and output metrics for us in sensu hopefully, but i am a little stuck at the start as this is my first attempt at node
12:02 < pixie79> currently i am getting the following error: ReferenceError: METRIC is not defined at Object.<anonymous> (/home/staff/mpo/GIT/npm-drbd-metrics/lib/metricCommand:7:1)
12:02 < pixie79> https://github.com/pixie79/npm-drbd-metrics/blob/master/lib/metricCommand
12:02 < nathan7> maybe you haven't defined metric
12:02 < nathan7> pixie79: Maybe you want to make METRIC an empty object?
12:03 < nathan7> pixie79: and note that we don't have real classes in JS (which is awesome)
12:03 < pixie79> that is what i was guessing , i coppied a sample in the internet and did not see how
12:03 < nathan7> var METRIC={};
12:03 < pixie79> nathan7: ok thank i will try that
12:05 < pixie79> hm - nope that gives me the same error - are there any good guides to follow for learning this?
12:05 < BennyLava> IN THE INTERNET!!
12:06 < pixie79> i have seen many on the internet but know which are good and current is a different matter ?
12:08 < ZBZZN> pixie79: It worked for me
12:08 < ZBZZN> pixie79: did you add it right after var util = require...
12:10 < pixie79> um yep
12:10 < ZBZZN> pixie79: wait
12:10 < ZBZZN> pixie79:  you used it wrong
12:12 < pixie79> possibly
12:12 < ZBZZN> You need to create a module around it before you can require it
12:13 < pixie79> ok - i will do some more reading to workout how - thanks
12:16 < ZBZZN> pixie79: I will try to send you an example
12:18 < pixie79> ZBZZN: thanks
12:24 < frankblizzard> anybody knows what could be wrong when i install grunt via "sudo npm install -g grunt" and after i still get "grunt not found" ... ?
12:25 < deoxxa> frankblizzard: sudon't
12:26 < frankblizzard> npm ERR! Error: EPERM, chmod '/usr/local/share/npm/bin/grunt'
12:26 < frankblizzard> npm ERR!  { [Error: EPERM, chmod '/usr/local/share/npm/bin/grunt']
12:26 < frankblizzard> npm ERR!   errno: 50,
12:26 < frankblizzard> npm ERR!   code: 'EPERM',
12:26 < frankblizzard> npm ERR!   path: '/usr/local/share/npm/bin/grunt' }
12:26 < frankblizzard> npm ERR! 
12:26 < frankblizzard> npm ERR! Please try running this command again as root/Administrator.
12:26 < frankblizzard> ?
12:27 < deoxxa> mkdir ${HOME}/local; npm config set prefix ${HOME}/local; echo 'PATH="${HOME}/local/bin:${PATH}";' >> ${HOME}/.profile; . ${HOME}/.profile;
12:27 < deoxxa> or something to that effect
12:27 < deoxxa> that's what i do
12:28 < deoxxa> if you run stuff with sudo, you often end up with a completely different environment than if you run it without
12:28 < ZBZZN> I just install everything without -g
12:28 < deoxxa> so things like environment variables (which come from, you guessed it, the environment) are often different
12:29 < deoxxa> ZBZZN: that's not really a great idea for utilities (think forever, uglifyjs, etc) with command line applications bundled
12:29 < deoxxa> ZBZZN: i mean, it works, sure, but it's harder to use the installed utilities
12:30 < ZBZZN> deoxxa: I do it mainly to get better control on the versions
12:30 < deoxxa> of course, for regular libraries
12:30 < frankblizzard> deoxxa: so whatever i set in npm config prefix i should add to my path ?
12:30 < frankblizzard> now it is set to prefix = "/usr/local/share/npm"
12:31 < deoxxa> ZBZZN: you're right, it's ridiculous to install libraries (socket.io, connect, whatever) globally
12:31 < deoxxa> frankblizzard: that's how i do things - you can do it any number of ways and i'm not speaking for anyone else, but yeah
12:31 < frankblizzard> yes but things like coffee or grunt can be installed globally or not?
12:32 < deoxxa> frankblizzard: yes, you probably should install them globally if you plan to use them as a general purpose utility. if you're using them as a library, you should install them locally to your project.
12:32 < deoxxa> frankblizzard: likewise if your project requires them to function, they should be installed locally (perhaps additionally to globally)
12:33 < frankblizzard> ok, that makes sense
12:36 < frankblizzard> still having trouble with grunt
12:36 < frankblizzard> when i try to install locally i get : npm WARN prefer global grunt@0.3.16 should be installed with -g
12:36 < frankblizzard> when i install -g and run "which grunt" it is not found
12:37 < frankblizzard> but when i use e.g. yeoman or bbb which also use grunt it works fine
12:37 < frankblizzard> just i cannot run the grunt command
12:38 < deoxxa> they probably include it
12:38 < deoxxa> do `npm ls -g`
12:38 < deoxxa> that tells you waht you have installed globally
12:38 < deoxxa> it sounds like grunt doesn't think it's being installed globally
12:38 < deoxxa> oh you're installing locally
12:38 < deoxxa> that's ok, ignore the warning
12:38 < deoxxa> you'll be able to run ./node_modules/.bin/grunt or something
12:39 < deoxxa> and if you use the "grunt" command in your package.json (i.e. {scripts: {build: "grunt build"}}) you can do `npm run-script build` and it'll work
12:40 < deoxxa> that'd commonly be put in a postinstall script
12:40 < frankblizzard> thanks deoxxa, ./node_modules/.bin/grunt worked
12:40 < Nasga> does anyone know a nice/tiny bug|issue tracker in nodejs ?
12:40 < deoxxa> awesome :3
12:40 < frankblizzard> i am pretty new to node
12:42 < Sven_vB> in hope it was just overlooked ago, is there a canonical shallow object copy function in NodeJS?
12:44 < deoxxa> Sven_vB: var dst = Object.keys(src).reduce(function(i, v) { i[v] = src[v]; return i; }, {}) would do it
12:45 < deoxxa> Sven_vB: this ain't no php, son! :P
12:47 < Sven_vB> so is having several uses of shallow copy a sign i'm doing stuff not the node way?
12:47 < Sven_vB> because i think if it's a common case, it'd be somewhere near util.inherits()
12:48 < deoxxa> Sven_vB: not sure - what's the use case? there might be a better way to do it
12:50 < Sven_vB> Services.prototype.knownWatchers is an opject of { signalSourceName => constructor }. i'd like to make some instance of service able to learn new signal sources w/o affecting all others
12:50 < Sven_vB> so i'd think of shallow copying it in the constructor
12:52 < Sven_vB> like func Services() { ... self.knownWatchers = util.shallowCopy(self.knownWatchers); ... }
12:55 < Sven_vB> i'll also provide a wrapper method to enable transforming it to copy-on-write in the future in case someone would have so many services that the copys did matter
12:56 < deoxxa> Sven_vB: you can do that with underscore
12:56 < Sven_vB> even then, that wrapper method would look nicer with a copy call like above than with for and hasOwnProperty
12:57 < Sven_vB> wouldn't underscore be overkill for that simple function?
12:57 < therealkoopa> I'm building our next web app using node, and it's been great. However, I need to build a bunch of processes that fetch data from a bunch  of public restful services (e.g. github, quickbooks, etc.) Do  you think using node would be good for this type of thing?
12:58 < Sven_vB> my backup plan is to use node-clone or something, just seems too weird for me to require an extra module for, well, shallow copying
12:58 < deoxxa> Sven_vB: i usually end up using a bunch of underscore stuff anyway, so i have it in most of my projects like that
12:59 < deoxxa> Sven_vB: but you could just write your own function in their style
12:59 < deoxxa> therealkoopa: node would be great at that - it's good a i/o bound applications
12:59 < deoxxa> *good at
12:59 < Sven_vB> ok... then i'll go read more about underscore, and maybe i find more use for it so the require is more justified :) thanks
12:59 < deoxxa> (it's also good at other things, but i/o bound stuff is something it really makes easy)
13:00 < pixie79> is it better to use fs.readFile or fs.readFileSync to read data from /proc files ?
13:00 < therealkoopa> deoxxa: My thoughts exactly. I've been reading a lot about streams (substacks work and video). I haven't worked with them too much w/ the express app, but I'm betting that I can leverage their power for this stuff, right?
13:00 < Sven_vB> use readFile. so you don't give any young programmer an example of where one could use readFileSync.
13:01 < deoxxa> therealkoopa: likely yes
13:01 < pixie79> ok thanks
13:01 < pixie79> i thought that was the case
13:01 < deoxxa> therealkoopa: streams are good at, like, streams, though
13:02 < deoxxa> therealkoopa: sounds like you just want to consume a resource, do something, then spit it back out though - which could be done with streams, but sounds like it's more suited to a request/response model
13:02 < therealkoopa> deoxxa: Right so if I was taking the results of fetching and "streaming" to another resource
13:02 < deoxxa> therealkoopa: if you're literally returning the exact data verbatim, then yes, streams would be ideal
13:03 < deoxxa> therealkoopa: if, however, you want to mess with it in some way in the middle, you're going to need to parse the remote service's response before you can start on it so streams will quickly become awkward
13:03 < therealkoopa> deoxxa: Awesome. It's go time. Thanks
13:03 < pixie79> nope i plan to just read them then output, not reread - then end the node script
13:07 < therealkoopa> deoxxa: Do you think using the request module is the best thing to use for fetching from all these services?
13:08 < deoxxa> therealkoopa: i use request, and it does a pretty good job for me :D
13:30 < pixie79> ok - well i have got a bit further, it is now calling my function readproc but i dont think it is actually reading /proc/drbd as it is not printing data to console.log as asked - any ideas - no errors are generated
13:30 < pixie79> https://github.com/pixie79/npm-drbd-metrics/blob/master/lib/metricCommand
13:43 < pixie79> i switched the code around a bit and now i get data is undefined - which is what i think it was getting before probably, any ideas why fs can not read /proc/drbd? as a user I can cat /proc/drbd fine
13:50 <@Nexxy> OH, SUNRISE
13:52 < boutell> pixie79: this.debugOn is false? 
13:52 < boutell> pixie79: add a LOT of console.log statements. Find out where it is really getting to.
13:52 < pixie79> boutell: no this.debugOn is true 
13:53 < boutell> it does look like a reasonable call to fs.readFile, off the top of my head, so I would start adding more console.log calls to find out where the top of my head is insufficient (:
13:54 < pixie79> ok
13:57 < pixie79> boutell: if i change it to this, http://pastebin.com/4HZ83u8Z  i get: lines 4,undefined and 12 output but not 8 or 9
13:58 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:01 < pixie79> cc001322524814334342
14:04 < pixie79> i dont think we are doing the readFile, if i try it with a file that does not exist i dont get and error which i would expect
14:05 < luke_> hello
14:06 < luke_> I want to build a simple log viewer based on node.js, any suggestion?
14:08 < okcoker> we use this at vimeo https://github.com/vimeo/tailgate
14:09 < kranius> luke_: http://logio.org/
14:09 < luke_> thanks okcoker, it seems very cool!
14:10 < okcoker> theres that too :P 
14:10 < okcoker> you said simple though ;)
14:10 < luke_> hi kranius, the logio is open source/
14:10 < luke_> :)
14:11 < kranius> yeah maybe it's a bit overkill :)
14:11 < luke_> I will check it later:)
14:11 < luke_> thanks guys..
14:12 < kranius> there is fs.watch too
14:13 < luke_> people said when you have an idea, there mush have over 6 people have the same one:)
14:14 < kranius> at least yeah :)
14:16 < Sven_vB> i have a similarly strange case as frankblizzard, except my globally installed carrier did work some days ago and only today it is no longer found by require()
14:18 < pixie79> odd fw.writeFile seems to also fail - it creates me an empty file rather than one with contents
14:19 < pixie79> fs even not fw
14:19 < pixie79> are there any alternatives to fs ?
14:19 < pixie79> or other ways to debug it
14:26 < luke_> l
14:28 < iggyziggy_> hello x2 :)
14:29 < iggyziggy_> does anyone know how to structure a multiplayer game server? i have some troubles handling 800+ simultaneous connections
14:30 < iggyziggy_> also looked into hookio but it can't find some good starting examples
14:30 < iggyziggy_> i*
14:32 < iggyziggy_> some good article on structuring server to handle a lot of clients, working with shared memory, etc.?
14:32 < iggyziggy_> anyone? :)
14:33 < ZBZZN> build more farms
14:36 < iggyziggy_> that's not the only problem, it's porly structured, i would like to rewrite it and do it right this time, something like hookio looks good but can't seem to find more then 1 article and bunch of unavailible videos
14:37 < ZBZZN> Isn't that what node.js does in the first place
14:38 < ZBZZN> handle lots of clients
14:38 < Sven_vB> try to divide your game server into specialized services that only toghether make the game
14:39 < ZBZZN> pixie79: I think you don't understand entirely how async calls work
14:39 < pixie79> ZBZZN: possibly not, but it looks like i cant read or write a file?
14:39 < ZBZZN> no
14:39 < ZBZZN> I will explain
14:40 < ZBZZN> look at the pastebin code
14:40 < ZBZZN> try to understand which lines will be executed
14:40 < ZBZZN> first lines 2-5 will run
14:41 < ZBZZN> then an async call to readfile will be scheduled
14:41 < ZBZZN> then lines 11-14 will run
14:41 < ZBZZN> in theory after line 14 lines 6-9 would run
14:42 < ZBZZN> but in line 13 you kill the server
14:42 < pixie79> ok - so it returns later
14:42 < ZBZZN> yes, this is async
14:42 < pixie79> so i need to block and not do async
14:42 < ZBZZN> no
14:42 < ZBZZN> you don't need to exit the process
14:43 < iggyziggy_> sven_vb, can you explain a bit?
14:44 < pixie79> ok - so if i remove the exit i get a buffer of data, but not something that looks the same as if i do cat /proc/drbd
14:44 < pixie79> how do i change the stream into data i can then parse
14:44 < ZBZZN> this is true
14:44 < ZBZZN> you need to specify encoding
14:44 < ZBZZN> otherwise a Buffer is returned
14:45 < ZBZZN> use 'ascii' as the second parameter for example
14:45 < ZBZZN> it will encode the buffer to ascii for you
14:47 < Sven_vB> iggyziggy_, what should i explain? dividing your server?
14:47 < Sven_vB> ah ok, had some nicknames mixed up
14:48 < Sven_vB> are you already using a service-oriented architecture?
14:48 < iggyziggy_> nope
14:48 < Sven_vB> i think that could help you.
14:48 < iggyziggy_> got some good starting point?
14:48 < iggyziggy_> article, tutorial, anything?
14:49 < Sven_vB> yes, http://en.wikipedia.org/wiki/Service-oriented_architecture
14:49 < Sven_vB> what kind of game is it?
14:49 < ZBZZN> CCGs are popular again
14:50 < iggyziggy_> it's turn based board game
14:50 < Sven_vB> ccg = collectible card game?
14:50 < ZBZZN> yes
14:51 < ZBZZN> I am just making random comments here :)
14:51 < Sven_vB> iggyziggy_, how many players usually use the same board at once?
14:51 < iggyziggy_> ~4
14:52 < pixie79> ZBZZN: ok now i have the correct results being output - but how do i store that in a variable for use - my variable comes back undefined, do i have to call this as a sub function and have it return data to my variable?
14:53 < ZBZZN> no
14:53 < ZBZZN> you have "callbacks"
14:54 < ZBZZN> your function readproc should take two variables
14:54 < ZBZZN> first error and second callback
14:54 < ZBZZN> similar to readfile
14:54 < euoia> iggyziggy_: I'm interested in what you're doing - I am making a turn based board game too
14:54 < euoia> iggyziggy_: I'm not as far as testing with 800 connections though
14:55 < iggyziggy_> euoia: well. better start thinking of it right now :)
14:55 < ZBZZN> pixie79: once you calculated the value you need to call the callback with null as the error and the result as the value
14:55 < ZBZZN> pixie79: The same way readfile calls your function once it is done reading
14:56 < ZBZZN> pixie79: and then the execution can continue from there
14:56 < Sven_vB> iggyziggy_, are there other important things to manage than the board and probably user accounts?
14:56 < euoia> iggyziggy_: what happens at 800+ connections? Things just grind to a halt or you start getting exceptions, or what?
14:56 < Sven_vB> e.g., do you offer chat? across boards?
14:56 < russfrank> pixie79: the concurrency model here is called continuation passing. you don't block on io, you instead pass a function, which we can call a 'callback' or 'continuation', to be called when complete
14:57 < russfrank> pixie79: you passed a continuation to fs.readfile. lines 11-13 of your readproc method were executed before lines 6-9
14:57 < iggyziggy_> well the problem is every player when sending input to server uses the same function to parse the data
14:57 < iggyziggy_> someone here told me that's the way to do it, because only 1 function can be run at the time
14:57 < pixie79> ok - i think i get it now - so i should call a function from lines 6-9 to then parse my data and do with it what i need
14:58 < iggyziggy_> i had some errors when one player started the game, other one left the server, game crashed even after null check
14:58 < ZBZZN> pixie79: This is one approach
14:59 < iggyziggy_> for example loop where i set every player, i have if (player[p]!=null){//setup} it would crash when setting for example player[p].someVar = something
14:59 < Sven_vB> sounds like threads
15:00 < christkv> I guess threads a gogo just died
15:00 < iggyziggy_> and now on 800+ connections every player uses same game input function to avoid error like the i described before, but now it lags and has a few sec delay
15:01 < Sven_vB> what platform should your game server run in?
15:01 < euoia> iggyziggy_: there was a nodeup episode where they described using flame graphs to benchmark your app - perhaps that'd be useful here?
15:01 < ZBZZN> iggyziggy_: Is the code public?
15:02 < iggyziggy_> zbzzn: nope
15:02 < iggyziggy_> sven_vb: nodejs runs on debian, client is in flash
15:02 < iggyziggy_> euoia: i have no idea, i'm new to nodejs :)
15:03 < iggyziggy_> ok so now i have something like this
15:04 < Sven_vB> what hardware behind the debian? is it an option to use more bandwidth and cpu cycles in order to gain more stability?
15:04 < iggyziggy_> client sends data -> data gets parsed -> depending on data i run whatever function i need
15:05 < ZBZZN> iggyziggy_: I hope "->" means async call
15:05 < iggyziggy_> problem is every clients uses same parse/trigger function to avoid shared memory problems
15:06 < iggyziggy_> zbzzn: not sure about that, as i said, i'm pretty new to nodejs, ported my app from c and now i'm a bit lost :)
15:08 < ZBZZN> I think that this may be your problem
15:08 < iggyziggy_> :)
15:09 < euoia> iggyziggy_: what are you using as a data store?
15:09 < ZBZZN> the C port I mean
15:09 < iggyziggy_> euoia: mysql
15:09 < niggler> Zak: you here?
15:10 < niggler> i passed out sometime around 2:30 AM ET
15:10 < iggyziggy_> so how would i separate game room for example?
15:11 < ZBZZN> could you paste us at least the code the processes the requests
15:11 < ZBZZN> "data -> data gets parsed" this stage
15:11 < iggyziggy_> sure, give me few minutes to cut relevant parts and put it on pastebin
15:12 < ZBZZN> thanks
15:14 < SpammerBob> Hey guys
15:15 < SpammerBob> who wants to buy some viagra?
15:15 < SpammerBob> jk what do you think about meteor.js?
15:15 < thanpolas> can i get viagra?
15:15 < nathan7> Where do we send our credit card data and SSN?
15:15 < context> i prefer cialis
15:16 < gkatsev> one of each?
15:16 < ArxPoetica> SpammerBob meteor.js lasts longer than 4 hours
15:16 < ArxPoetica> so call your doctor
15:19 < nathan7> ah
15:19 < nathan7> meteor is that thing that caused me to smash stuff
15:20 < ArxPoetica> lol
15:20 < AvianFlu> METEOR KILLED THE DINOSAURS
15:20 < ArxPoetica> I'm gonna be looking for a potential node/socketstream programmer
15:20 < ArxPoetica> recommended place to advertise?
15:21 < yawnt> nodejs google group?
15:21 < yawnt> hackernews?
15:21 < nathan7> There's some freelance chan
15:21 < ArxPoetica> cool
15:21 < yawnt> r/hire/ ?
15:22 < ArxPoetica> reddit has a hire channel?
15:22 < gkatsev> metero killed the video star?
15:22 < yawnt> ArxPoetica: yep
15:22 < yawnt> the brother of /r/forhire
15:23 < ArxPoetica> ah
15:23 < yawnt> but you better use forhire directly
15:23 < yawnt> you can also post there marked [Hiring]
15:23 < yawnt> there are moar people
15:23 < ezeki> hello guys, i've question about net module
15:23 < s5fs> ArxPoetica: this contract or fte?
15:23 < ArxPoetica> contract
15:23 < s5fs> ArxPoetica: i'd also recommend craigslist in select cities (nyc, sf, etc)
15:24 < ArxPoetica> building out an interactive documentary, and potentially a media framework
15:24 < s5fs> ah that sounds really cool
15:24 < ArxPoetica> totes mcgoats
15:24 < ezeki> i'm using net module and streaming live radio, it never frees buffer, do u know how can i free buffer?
15:24 < shinaku_> buffer.free();
15:25 < shinaku_> I don't know, I made that up
15:25 < iggyziggy_> zbzzn: still here?
15:25 < ZBZZN> yes
15:25 < iggyziggy_> http://pastebin.com/npkWr546
15:27 < ezeki> clear
15:28 < ZBZZN> iggyziggy_: Ok, so I think that your main problem is that you are not using async calls at all and infact you are blocking the entire server for each user message
15:28 < SpammerBob> have you guys ever written a spammer in node.js?
15:28 < ezeki> no
15:29 < ezeki> i'm using net module and streaming live radio, it never frees buffer, do u know how can i free buffer?
15:29 < ZBZZN> iggyziggy_: this :  var result = gameEngine.userInput(msgs[m].substr(1), this.getParent()) definitely has to be an async call
15:29 < kranius> SpammerBob: use VB.Net it's better to send lots of email
15:29 < iggyziggy_> ok, so i should rewrite it to async, how does that work with shared memory?
15:29 < SpammerBob> lol
15:29 < ZBZZN> iggyziggy_: What shared memory?
15:30 < ZBZZN> also your for look is O(n^2) because you call length function each time
15:30 < ZBZZN> *loop
15:31 < ZBZZN> call length only once outside the loop
15:31 < iggyziggy_> well i had a problem before when i user started the game, initiated a function to setup 4 players, then one of them disconnects, the disconnect function nulls that player after if(player!=null) check and crashes
15:31 < iggyziggy_> yeah, forgot about that :)
15:31 < iggyziggy_> thnx
15:32 < iggyziggy_> even though that loop is almost never longer than 2 || 3
15:32 < ZBZZN> But there are no threads
15:32 < iggyziggy_> i thought i can't use threads in nodejs
15:33 < ZBZZN> if you don't have threads then where do you have shared memory?
15:34 < ZBZZN> each function runs from start to end
15:34 < iggyziggy_> ok, i explained it wrong
15:35 < iggyziggy_> how do i stop one function changing something that other function uses? as in that example when i check if player is not null, it passes, and after setting 2-3 vars it crashed due to error that player is null (disconnect nullifys player)
15:36 < ZBZZN> its another bug, not related to shared memory
15:36 < ZBZZN> maybe you had a variable with the same name
15:37 < iggyziggy_> same reference
15:37 < iggyziggy_> to player object
15:38 < ZBZZN> when you have : if (player !== null) { code code code code}
15:38 < ZBZZN> then in that code player !== null
15:38 < iggyziggy_> it crashed one 3. or 4. "code"
15:38 < ZBZZN> do you have the code snippet?
15:39 < ZBZZN> its hard to tell by your description
15:39 < iggyziggy_> yeah and i did rewrite it as you described now, i was just wondering if there is a better way :)
15:39 < ZBZZN> but unlike threads, other code can't be executed in the middle of your function
15:40 < iggyziggy_> checking every time if object is or is not null is such a pain
15:40 < ZBZZN> every time?
15:40 < ZBZZN> inside that if, player is not null
15:40 < iggyziggy_> but somehow it gets null
15:40 < iggyziggy_> like this, sec
15:40 < ZBZZN> unless there is explicit code that sets it to null
15:41 < addisonj> hrm... v8-profiler and nodetime are both just stalling while taking heap snapshots of an app I have... but it works elsewhere in other apps...
15:41 < iggyziggy_> if (player !== null) { player.var1 = a; player.var2 = b; player.var3 = c; player.var4 = d;}
15:42 < iggyziggy_> player.var3 throws error that player is null
15:42 < ZBZZN> I don't know how it is possible
15:42 < addisonj> anyone know if node-profiler will take heap snapshost?
15:42 < iggyziggy_> and yes, when player disconnects it gets nulled
15:42 < ZBZZN> do you have the actual code?
15:43 < iggyziggy_> yes, pastebin again? :)
15:43 < ZBZZN> ok
15:50 < plato> if player.var3 was a function, would it execute with iggyziggy_'s above code?
15:50 < plato> in the player.var3 = c line
15:50 < ZBZZN> I don't think so
15:51 < iggyziggy_> zbzzn: http://pastebin.com/SVZKkzdD
15:53 < ZBZZN> ok sec... I think I see the problem
15:53 < plato> what is this.players[p].write("startGame|"+p+"|"+this.gameMode+"\0");
15:54 < iggyziggy_> socket.send
15:55 < plato> you are instantiating that for every player?
15:55 < ZBZZN> but it might also cause disconnect
15:55 < iggyziggy_> player is client object, write is a function that writes to clients socket that msg
15:55 < ZBZZN> and if write causes disconnect
15:55 < TooTallNate> bradleymeck: did you have some gyp questions?
15:55 < ZBZZN> then the player becomes null
15:55 < iggyziggy_> yes, that is the problem, question is how to avoid it? :)
15:56 < plato> iggyziggy_: maybe pastebin the code from the write() function?
15:56 < iggyziggy_> or solve it
15:56 < ZBZZN> write needs to be async
15:56 < iggyziggy_> you have it on pastebin
15:56 < ZBZZN> you need to schedule the write
15:56 < plato> oic
15:56 < ZBZZN> leave the function
15:56 < ZBZZN> and then do the disconnect
15:57 < ZBZZN> just for a test
15:57 < ZBZZN> wrap it in SetTimeout(,1)
15:57 < ZBZZN> and see how it solves the problem
15:57 < ZBZZN> but this is not a real solution, you would have to rewrite it to async
15:57 < iggyziggy_> so i would need a separate function that handles players depending if they are connected or not?
15:58 < ZBZZN> no
15:58 < ZBZZN> you need to make your writes async
15:58 < iggyziggy_> how do i do that? :)
15:59 < ZBZZN> well
15:59 < bradleymeck> TooTallNate: get a hold of avianflu
15:59 < ZBZZN> socket.write is already async
16:00 < ZBZZN> (although you ignore this in your code)
16:00 < ZBZZN> so the problem is only in your write method
16:01 < ZBZZN> its hard to explain on IRC how to write the code.
16:02 < iggyziggy_> :)
16:02 < ZBZZN> I suggest you read some examples of others using socket.write
16:02 < iggyziggy_> already doing that: http://shinetech.com/thoughts/articles/139-asynchronous-code-design-with-nodejs-
16:03 < ZBZZN> great
16:03 < iggyziggy_> but i don't understand the difference for some examples
16:03 < iggyziggy_> looking at code reuse right now
16:04 < iggyziggy_> creating a callback for same function
16:04 < ZBZZN> I have to leave now
16:04 < ZBZZN> I hope it will work out for you
16:04 < iggyziggy_> thnx
16:05 < iggyziggy_> and now i have no idea what i'm doing :)
16:05 < ZBZZN> once you understand async calls I assure you that you will know what to do
16:05 < ZBZZN> bye now
16:05 < iggyziggy_> bye
16:11 < Sven_vB> maybe i can help you with the async
16:12 < Sven_vB> it's about how you tell your program to do this and then this and then that.
16:13 < pixie79> what is the best way to convert a string into json?
16:14 < Sven_vB> in blocking style, you just list them below each other. in callback style, you list them in separate functions and each time something external must be done (e.g. file or network access) you tell node to do that external action, and thell it what other function to run after that. then you end your function, so node gets back control and can do the thing you told it to.
16:14 < Sven_vB> pixie79, JSON.stringify
16:15 < niggler> stringify as a name is too cutesy
16:17 < s5fs> stringadoodle was taken
16:17 < Sven_vB> when node has finished with the network or file access and has a result (data or an error) it "calls you back" (or rather your code). it does this by calling your callback function (hence the name) and passing it the result or error as a parameter
16:17 < iggyziggy_> ok, so if i got this right...
16:18 < niggler> fuck typescript
16:18 < niggler> w
16:18 < s5fs> niggler: been playing with typescript lately?
16:18 < niggler> hen that clown sinclair comes back, ask him about the logic behind optional parameter syntax
16:18 < iggyziggy_> i would need to call function that handles client input data, and a callback that returns result to client?
16:18 < niggler> s5fs: sinclair wasnt happy with my high level enumeration with some test cases
16:18 < niggler> s
16:18 < niggler> o i
16:18 < niggler>  am going back and translating some code to typescript
16:18 < niggler> to give more poignant examples
16:19 < niggler> because apparently generating oodles of KB of boilerplate isnt an acceptable criticism
16:19 < s5fs> i read scott hanselman's blog re: typescript recently, kinda interesting. seems geared for the c# crowd and as an ex-dotnetter i'm okay with skipping that toolset.
16:20 < niggler> s5fs: take optional arguments
16:20 < niggler> it would be sweet if they actually did them properly (i.e. with default values etc)
16:20 < niggler> but the syntax is really quirky
16:20 < niggler> f(x:any, y?any) for example indicates a single optional parameter
16:20 < niggler> for two optional parameters its f(x:any, y?any, z:any)
16:20 < s5fs> i just hate the idea of a superset of javascript, seems to miss the whole point.
16:21 < niggler> and that second colon for some reason offends my sensibilities
16:21 < s5fs> stuff that compiles to js i can understand
16:21 < niggler> s5fs: how about objective C
16:21 < niggler> at the very least, objective C can compile C code
16:21 < s5fs> haven't written enough of it to have too much of an opinion. my knee-jerk reaction is that it's different and while i understand a bit about it's history, i'm still not crazy about it.
16:21 < niggler> C++ isnt a strict superset of C
16:22 < CoverSlide> C++ used to be a compile-to-c language
16:22 < niggler> typescript genuinely gets in the way
16:22 < niggler> cfront, that's true CoverSlide 
16:22 < s5fs> i dunno, typescript just feels like a normal microsoft ploy to sell their captive audience on another language that doesn't work anywhere outside of their tooling.
16:23 < niggler> although it did expose something
16:23 < s5fs> so i'm reading hanselman's blog and his posters were saying shit like "i'm glad this exists, i don't wanna learn the details of javascript, i'd rather let my tools manage that, i can't code w/o visual studio"
16:23 < niggler> javascript question: i have a procedure that has a few "optional" arguments
16:23 < s5fs> and that's fine, i'm okay with those dudes working however they feel is most effective, it just doesn't jive with me personally i guess. that philosophy rubs me wrong.
16:23 < niggler> and the way i do it now is by writing the function with all of the arguments and basically checking if shit's undefined
16:24 < niggler> is that the javascript way?  or should i be doing something different
16:24 < s5fs> niggler: i dunno, that's how i do it too
16:24 < bwinton> niggler: I've seen people do that.  I've also seen people use an "options" parameter.
16:24 < CoverSlide> usually at the top, you'll check which ones are undefined and reassign variables and defaults accordinglt
16:25 < CoverSlide> `options` is kind of a fix-all for people who like languages with named params
16:25 < bwinton> s5fs: I thought the typescript compiler was open source, and non-captive.  (But I could easily be wrong.)
16:25 < CoverSlide> it's in javascript
16:25 < CoverSlide> so therefore it is open source
16:25 < CoverSlide> it's also on github
16:25 < niggler> i wish the community could change the grammar
16:26 < niggler> as an example, multiple optional parameters should all be indicated with ? as opposed to just the first one
16:26 < niggler> and for some unknown reason, it assumes parseInt takes two parameters
16:27 < CoverSlide> it does
16:27 < niggler> when i explicitly want the 1-parameter behavior (inference)
16:27 < niggler> nono CoverSlide if you specify one parameter
16:27 < AAA_awright> CoverSlide: Javascript !-> open source
16:27 < CoverSlide> well 9 times out of 10 people want parseInt(x, 10)
16:27 < niggler> it does something that can't be replicated with 2
16:27 < s5fs> bwinton: oss is funny at microsoft, just because they release the code doesn't mean they will accept pull requests from the community. keeping an open version that's a release behind is nice, but not really in the oss spirit.
16:27 < niggler> right CoverSlide but i want "010" -> 8
16:27 < niggler> so id have to do two passes
16:28 < CoverSlide> if you know it's octal, put the , 8 explicitly
16:28 < s5fs> bwinton: but you're correct, they're touting as open source
16:28 < niggler> i dont know if it is though CoverSlide 
16:28 < niggler> s
16:28 < niggler> o
16:28 < bwinton> s5fs: That's very true.  See also: Android?  ;)
16:28 < niggler> id have to regex before hand
16:28 < niggler> corporate sponsored open source works like that
16:28 < niggler> t
16:28 < niggler> hey want bug fixes
16:28 < CoverSlide> i don't know how many cases i would prefer implicit rather than implicit behavior in parseInt
16:28 < niggler> they want people to find it
16:28 < CoverSlide> *explicit
16:28 < niggler> CoverSlide: that's not the point
16:29 < niggler> there exist circumstances where its useful
16:29 < niggler> and typescript fucked with it
16:29 < CoverSlide> well even compiled javascript can be de-obfuscated and read
16:29 < niggler> its like locking a side door because most people use the main door
16:30 < pancake> how can I ensure I got all the data from stdout of a childprocess? because sometimes exit event appears before the data one
16:31 < CoverSlide> i see your point. it is kind of a newbie mistake i've seen and experienced so i understand microsoft trying to pre-empt that
16:31 < AvianFlu> pancake: wait for 'close' instead of 'exit'
16:31 < CoverSlide> is close guaranteed?
16:32 < pancake> ok lets see
16:32 < niggler> i dont disagree with the overarching idea of preventing those mistakes, but it really should be a warning that I can somehow indicate that I know
16:32 < niggler> jshint has some of those
16:32 < niggler> like when you use a switch statement and want fall-through you can put a comment there
16:32 < niggler> and jshint will assume you know what you are doing
16:34 < niggler> and actually, coverslide, if they really cared about it
16:34 < niggler> they'd warn you about switch fallthrough (which it appears they do it)
16:35 < niggler> there should be a meme about this: "if you try to code in typescript … you're gonna have a bad time"
16:36 < niggler> the more i play with this, the more im convinced that jshint does a better job than typescript in catching issues
16:38 < AdamMagaluk> In a Node object wrap in C++ module, how do you return null? For cases where the constructor is not valid?
16:39 < niggler> shouldnt you throw something in that case?
16:40 < AdamMagaluk> Yes I could but, im looking for a way to just get a null obj in some cases.
16:41 < s5fs> niggler: are you writing typescript within visual studio? i assume the ide is where the real magic happens.
16:42 < CoverSlide> http://stackoverflow.com/questions/5386123/google-v8-javascript-engine-how-to-set-a-value-to-null
16:43 < AdamMagaluk> CoverSlide: Thats how I first tried it. In normal functions that works but the New() function still returns the object even if you return v8::Undefined() or Null
16:45 < CoverSlide> well when you do new, you can't return a non-object
16:45 < CoverSlide> >> var s = new (function(){return null});s
16:45 < purr> CoverSlide: (object) {}
16:46 < CoverSlide> >> var s = new (function(){this.x = 1;return null});s
16:46 < purr> CoverSlide: (object) {x: 1}
16:49 < AdamMagaluk> CoverSlide: Gotcha, but then I would expect all my c++ prototype to not be valid but they still are? 
16:50 < CoverSlide> if you use a constructor, always expect it to return an object
16:50 < CoverSlide> returning anything else makes it return this instead
16:51 < TooTallNate> Benvie: ping
16:51 < AdamMagaluk> CoverSide: I see, returning v8::Object::New(); makes it work.
17:08 < niggler> s5fs: no im using the node version
17:08 < niggler> w
17:08 < niggler> ith vim as the editor
17:08 < niggler> g
17:08 < niggler> they fucked up the line endings on the supplied vim file
17:08 < niggler> actually its kinda weird because not all line endings were bad, just 6 of them ...
17:09 < s5fs> niggler: interesting, i may poke you for assistance getting vim setup for node work in general
17:11 < niggler> s5fs: i could use some assistance later tonight writing the niggler bot :)
17:12 < boutell> sublime text FTW! Oh wait, this isn't the 'editorholywars' channel, sorry
17:13 < niggler> i havent given sublime its fair shake
17:13 < s5fs> niggler: haha, i meant 'gimmie a copy of your vimrc' but sure, i'll hack with ya if you need
17:13 < niggler> oh s5fs i have nothing really exotic
17:13 < s5fs> i mean, if you value code quality so little, why not!  ;-)
17:13 < pancake> how can I force a write() on a socket to happen inmediately? i need to send a single packet per write
17:14 < pancake> and node is packing several writes into a single packet
17:14 < niggler> pancake: in c you set tcp_nodelay
17:14 < harrisonm> Moved from vim to Sublime for code recently, it's really nice.  Not as speedy as vim, but the plugin system's really nice and easy to work with
17:14 < pancake> niggler: and in nodejs?
17:15 < s5fs> harrisonm: i'm cheap and trying to avoid the purchase, haha
17:15 < pancake> socket.setNoDelay()
17:15 < harrisonm> s5fs: I'm letting it nag me until I get money saved up
17:16 < niggler> ooh they have a method pancake 
17:16 < niggler> its called setNoDelay
17:16 < niggler> hehe should have guessed that
17:17 < niggler> actually there's an interesting question here: why isn't setsockopt exposed?
17:17 < niggler> and can you do udp multicast?
17:17 < s5fs> harrisonm: i never did buy winzip
17:18 < boutell> pancake: if you don't use setNoDelay(), does it send ever on a short write() or just wait and wait for you to send more?
17:18 < boutell> that sort of buffered behavior isn't what you get with sockets usually I think, even with TCP
17:18 < niggler> boutell: it shouldnt
17:18 < boutell> usually = c
17:18 < niggler> in C oyu do get buffering boutell 
17:18 < niggler> its controlled by a few parameters
17:18 < niggler> nagle's algorithm, which you disable by setting tcp_nodelay = 1
17:19 < boutell> nagle's doesn't mean it will wait forever to send anything
17:19 < niggler> and there are a few os-specific flags 
17:19 < niggler> boutell: but there is a waiting period
17:19 < niggler> it doesnt wait on the first packet but it will wait on subsequent ones
17:21 < boutell> OK, right, if the other end is acknowledging things normally, it'll still go ahead and send more when the acknowledgement of the previous packet shows up. Which is *usually* OK. Which is why a classic telnet session doesn't buffer forever if you type four letters in sequence. http://en.wikipedia.org/wiki/Nagle's_algorithm
17:21 < boutell> but if your goal is to send more NOW NOW NOW and not wait for acknowledgement of what's already sent, you need nodelay, yes.
17:22 < boutell> nagle's ought to result in pretty efficient communication over the long haul though.
17:22 < boutell> and if you sent a megabyte of stuff with nodelay I'm not sure what would really happen.
17:23 < boutell> megabyte, gigabyte, whatever's enough to pose a problem if not acknowledged. I'm guessing your OS would still force a pause on you when it reached the point where it was unwilling to hold on to any more of what you'd already sent in case a resend was needed.
17:24 < niggler> boutell: lol trading systems would buckle with nagle's algorithm
17:24 < boutell> niggler: I suppose that's an unusual case. It's really a reliable packet delivery situation, not a stream based situation.
17:25 < boutell> niggler: there's a shit-ton of communications going on, but you're pretty sure the individual messages won't be huge.
17:26 < boutell> I'd think they would use some sort of reliability mechanism layered on top of UDP, but I don't build trading networks
17:27 < niggler> yeah they put sequence numbers on the packets
17:27 < niggler> you have to pick them out
17:27 < niggler> t
17:27 < niggler> h
17:27 < niggler> en they fucked up
17:27 < niggler> so they wanted to do delta compression
17:27 < niggler> *AND THEY DID DELTA COMPRESSION ON THE SERIAL NUMBERS*
17:27 < niggler> so all of them became 1 lol
17:28 < boutell> that IS funny
17:30 < niggler> design by motherfucking committee
17:32 < s5fs> if you don't design by committee then ppl may be held accountable for their decisions. how else would you avoid that?
17:33 < rcaskey> is there a system I should lookat for doing plugins before I role-my-own that already has dependency resolution and hte other niceties thought out for me?
17:34 < niggler> you could design by committee with each member not suffering from oedipus complex
17:34 < niggler> or elektra complex, as i imagine there are ladies on that committee
17:35 < aandy> rcaskey: require, optionally call with your "main" object, like require('./plugins/somethingthatextendsmymodel')(my_model)?
17:37 < rcaskey> aandy, i'm gonna wanna use the same system client-side as well and fetch the modules over http
17:40 < aandy> rcaskey: then roll out your own. i did something similar on a small bot, which didn't require much other than some validation, wrapper for require (if you want to invalidate cache when you're debugging).
17:40 < aandy> if you need dependencies built aswel, i'm not sure
17:41 < rcaskey> requirejs looks like a possible
17:47 < timeturner> Gmail provides free email SMTP with domain aliasing?
17:47 < EyePulp> yes  - but it has rate limits
17:48 < baudehlo> ~1000 emails/day
17:48 < timeturner> why?
17:48 < timeturner> I mean why do they provide it for free
17:48 < EyePulp> I've also had them restrict sending without explanation, and under the limit.
17:49 < timeturner> is that why people use Mailchimp or other services instead?
17:49 < baudehlo> timeturner: everything google does is a loss leader to get you onto search and adsense.
17:49 < timeturner> ah
17:49 < timeturner> yeah
17:49 < EyePulp> timeturner:  why? why does google do anything for free other than to get you to use their other services that they do make money from.
17:49 < pickels> fucking bastards trying to make money on free email.
17:49 < EyePulp> heh
17:50 < baudehlo> if you want fully free, setup Haraka on a static IP somewhere :)
17:50 < EyePulp> You're not a user, you're their product!  Soylent Google is made of PEOPLE!!!
17:50 < EyePulp> baudehlo: how robust is haraka?
17:50 < timeturner> wow
17:51 < baudehlo> EyePulp: Craigslist uses it…
17:51 < timeturner> haraka looks cool
17:51 < EyePulp> baudehlo: or rather, have you put it through any stress testing?
17:51 < timeturner> "I have managed to scale it up to 5000 emails per second (with minimal plugins)." wtf
17:51 < timeturner> that works for me :)
17:51 < baudehlo> Actually 8000 emails/sec.
17:51 < baudehlo> on better hardware.
17:52 < timeturner> mailchimp looks cheaper though
17:52 < timeturner> wait
17:52 < timeturner> not
17:53 < timeturner> it all depends on how many emails you plan to send
17:53 < ansolas> i try to update a node module which use the depreciated util funtion:    util.pump(readableStream, writableStream, [callback])
17:54 < ansolas> how do i handle the callback with the suggested function : readableStream.pipe(writableStream)
17:54 < ansolas> ?
17:54 < EyePulp> baudehlo: We run postfix currently and it reads via tcp from a redis list to do redirects for some 20k different addresses - I think we're getting a couple million messages a day to relay, but I'd have to check.  I'm looking for a nice way to get some deeper inspection/logging functionality in line w/o having to do more work in postfix
17:55 < baudehlo> EyePulp: sounds ideal then.
17:55 < EyePulp> baudehlo: it really does - are you serious about CL using it?
17:56 < CoverSlide> ansolas: writableStream.on('error', cb)
17:56 < baudehlo> the logging was written by Craigslist so they could track a mail anywhere in the system.
17:56 < baudehlo> EyePulp: http://www.craigslist.org/about/thanks
17:57 < ansolas> onError ?
17:57 < ansolas> nah 
17:57 < timeturner> what are haraka's dependencies?
17:57 < ansolas> I want an event on finish 
17:57 < EyePulp> baudehlo: w00t - congrats.  And the SA plugin … very slick
17:57 < CoverSlide> ansolas: writableStream.on('end', cb)
17:58 < ansolas> http://jsfiddle.net/7FgHh/
17:58 < ansolas> tahts how i have it at the moment and i wonder if this is the correct approch ?
17:58 < baudehlo> EyePulp: well I did write a significant amount of SpamAssassin too :)
17:59 < CoverSlide> ansolas: seems ok to me
17:59 < ansolas> cool
17:59 < EyePulp> baudehlo: for better or worse we'll have to send through all the spam, but for logging purposes I want to identify what SA would consider spam so our logs/stats can be filtered a little more cleanly.
17:59 < ansolas> the next question is why is the file deleted only if i restart my server?
18:00 < ansolas> is that the correct behaviour of unklink ?
18:00 < baudehlo> EyePulp: talk to _smf_ on #haraka - he does that.
18:00 < ansolas> essentially i asuumed that i havent closed the strteam properly so that the file cant get unlinked 
18:01 < timeturner> craigslist looks so peaceful
18:01 < EyePulp> baudehlo:  ah, cool.  This has been a very enlightening discussion
18:01 < timeturner> I can actually read the html
18:08 < mattvv> anyone know a clever way to generate a unique api token
18:09 < CoverSlide> Math.random()
18:09 < niggler> fuck Math.random
18:09 < CoverSlide> :p
18:09 < CoverSlide> i'd say use crypto.randomBytes()
18:10 < niggler> lol CoverSlide spent an hour this morning implementing various random number generators in javascript
18:10 < kaoD> hi
18:10 < niggler> and it turns out the problem isnt as trivial as it sounds thanks to IE
18:10 < mattvv> thanks CoverSlide :D
18:10 < jocafa> how 'bout a UUID? https://gist.github.com/1308368
18:10 < niggler> jocafa: uses math.random :/
18:10 < ansolas> anyone please have a look on my fiddle, and tel me why unlink does remove the uploaded after my node server is restarted ?
18:11 < mattvv> i like the idea of UUID
18:12 < CoverSlide> how about GUID's
18:12 < kaoD> anyone familiar with RailwayJS/JugglingDB? a certain property of one of my Models is a dictionary so I guess an ORM is not suitable for my needs (or at least I can't see how to use JugglingDB with my use case without heavy hacking...)
18:12 < niggler> ansolas: did you try using absolute path?
18:12 < niggler> or ./Temp
18:12 < mattvv> yeah GUID will work also
18:12 < niggler> and does the node process have permissions to clobber the file
18:12 < ansolas> unlink is working ? but only after node is restarted
18:13 < ansolas> i assume that the file is somehowe still in use by pipe ?
18:13 < kaoD> what are my alternatives? I need a MVC framework with more relaxed models. or maybe I'm just missing how to do this with Railway?
18:13 < ansolas> if i use the depreciated util function pump its immediately unliked
18:14 < ansolas> so I doubt it has something to do with teh path , no ?
18:14 < niggler> why arent you moving the file?
18:14 < trypwire_> are there any benefits to building a node CLI tool that can be installed with npm versus building like a python or bash CLI tool?
18:14 < niggler> fs.rename
18:14 < trypwire_> i've seen npm-based tools that have already been implemented in other forms, and I wonder why
18:14 < ansolas> its an video uploader for big files thats why we used streams
18:14 < ansolas> is moving BIG files memory safe ?
18:15 < garciawebdev> trypwire_: yes, you already know JS
18:15 < CoverSlide> ansolas: https://gist.github.com/3835377 this works for me
18:15 < ansolas> and the file is immediately deleted ?
18:15 < CoverSlide> yeah
18:15 < ansolas> strange 
18:16 < ansolas> its essentially the same as i did no?
18:16 < CoverSlide> basically
18:16 < trypwire_> garciawebdev: i mean more like... there's a few CLI tools that i find useful, and i'd be interested to re-write them in node and package them with npm, but other than my interest, are there benefits to the end users?
18:16 < niggler> ansolas it doesnt load the entire file in memory, if thats what you think
18:16 < kaoD> or at least it shouldn't
18:17 < kaoD> :P
18:17 < niggler> i move 100GB files around all the time
18:17 < niggler> the rename should be fine, unless you want to do some sort of intermediate processing (e.g. transcoding)
18:17 < garciawebdev> trypwire_ well, i haven't so much experience with Node.js, but NPM is GREAT, much better than Ruby's Gems and Python PIP
18:17 < TehShrike|Work> npm is pretty awesome.
18:18 < txdv_> whats better compared to pythons pip
18:18 < niggler> how about php's pear garann 
18:18 < niggler> *garciawebdev 
18:18 < garciawebdev> trypwire_ i didn't packaged any app on any of those, though, but i've used them many times. that's a end user experience
18:18 < boutell> pear… oh no… make it go away the hurting
18:18 < boutell> please don't make me touch the pear
18:18 < garciawebdev> niggler LOL you serious??!1
18:18 < CoverSlide> leiningen would be good if it didn't depend on maven
18:18 < trypwire_> garciawebdev: yea i agree. i think that's one of the strong benefits of node/npm-based CLI tools
18:19 < CoverSlide> i like cabal
18:19 < mscdex> i like node.js
18:19 < niggler> cabal is ok
18:19 < txdv_> whats is cabal?
18:19 < niggler> haskell
18:19 < boutell> a gripe about npm: it supports installing things via git rather than as downloaded packages, but it does it pretty badly. npm update can't do anything with them because it doesn't really check them out, it exports them.
18:20 < txdv_> Computer Assisted Biologically Augmented Lifeform
18:21 < txdv_> node gitteh
18:23 < TehShrike|Work> So hey, for the people who haven't read this yet, ncz wrote an excellent post on TypeScript - best I've seen so far http://www.nczonline.net/blog/2012/10/04/thoughts-on-typescript/
18:23 < txdv_> is there an editor on linux 
18:23 < ansolas> @niggler: yeh there is a transcoding happening after the move :/
18:23 < txdv_> supporting the type crazyness?
18:24 < ansolas> arg i dont get that files unlinked 
18:24 < niggler> ansolas: you could do the transcoding *during* the move
18:24 < niggler> like process_file <old >new
18:24 < ansolas> i try to move 
18:24 < niggler> TehShrike: i dont get the impression this guy seriously tried typescript
18:24 < TehShrike|Work> txdv_: emacs, vim, Sublime Text 2
18:25 < TehShrike|Work> niggler: fair enough - I haven't either. What's your take (how much have you tried it)?
18:25 < txdv_> so vim has the type inference system demonstranted of typescript?
18:25 < niggler> there are a lot of strange constraints
18:26 < niggler> for example, "optional" arguments
18:26 < other_guy> https://github.com/Coradine/nodiak v0.0.7 is out and published to npm.  Updated stream interface, updated search interface, improved performance, completed documentation, and exp-backoff retry support added.
18:26 < TehShrike|Work> txdv_: I don't know exactly what you mean by that - you should probably read the post (and also the official stuff at http://www.typescriptlang.org/ )
18:27 < other_guy> Nexxy in particular might find that interesting.
18:27 < niggler> i tried converting a nascent prng library to typescript
18:27 < TehShrike|Work> txdv_: http://blogs.msdn.com/b/interoperability/archive/2012/10/01/sublime-text-vi-emacs-typescript-enabled.aspx
18:27 < ansolas> niggler: why is the factor transcoding important when moving files ?
18:27 < niggler> also the provided vim plugins have a few line ending issues
18:27 < niggler> ansolas: if all you wanted to do is move the file, the os features are fine
18:27 < niggler> you can just fs.rename
18:28 < niggler> if you want to do some processing, then piping input to output makes sense
18:28 < niggler> if you try to use node you have another thing touching the data
18:28 < niggler> lol it seems like a nonproblem for 1M file sbut when you get to 10GB that's a lot of time spent on a stupid thing
18:28 < txdv_> TehShrike|Work: it is simple highlighting
18:28 < txdv_> you are stupid
18:29 < TehShrike|Work> :-|
18:29 < txdv_> i told you 2 times specifically what i wanted
18:29 < TehShrike|Work> no you didn't - what did you mean by "supports the type craziness"?
18:30 < ansolas> niggler: rename works fine !, so transcoding should also work after the rename is done ?
18:30 < TehShrike|Work> It's like you're stringing random words together and hoping that something pops out that does what you want :-P
18:30 < ansolas> @niggle: thank you for the help !
18:30 < ansolas> niggler
18:30 < niggler> ok here's an example TehShrike|Work 
18:30 < niggler> try using parseInt
18:30 < niggler> the JS spec clearly says
18:30 < niggler> !parseInt
18:30 < niggler> !mdn parseInt
18:30 < niggler> blah ok w/e
18:30 < niggler> If string is not a string, then it is converted to one.
18:30 < s5fs> niggler: still want help with that bot?
18:30 < txdv_> TehShrike|Work: i want to kick your dog
18:31 < TehShrike|Work> niggler: right
18:31 < niggler> s5fs: yeah i really can't think straight during the trading day
18:32 < s5fs> niggler: that's totally understandable
18:32 < niggler> but TehShrike|Work but typescript interprets it as a compulsory string
18:32 < TehShrike|Work> niggler: I also have no idea how you would handle a variable number of arguments in TypeScript - I'm guessing you wouldn't be able to do any type checking in that case
18:32 < niggler> the type should be string:any
18:32 < niggler> not string:string
18:32 < niggler> TehShrike|Work: but they restricted the semantics of the function
18:32 < niggler> a
18:32 < niggler> n
18:32 < niggler> d t
18:32 < niggler> here are other examples of that
18:33 < niggler> so its not a pure superset of JS
18:33 < niggler> w
18:33 < niggler> which is why i thought the author of the blogpost didnt really try TS
18:33 < TehShrike|Work> That is a good point, I hadn't really thought about the impact of doing type checking on inputs to the built-in JS functions
18:34 < TehShrike|Work> You should write up a small post making those points!
18:34 < TehShrike|Work> ...am I following your blog-o-thing yet? You should link to it.
18:35 < CoverSlide> other_guy: what's the advantage over node_riak or riak-js?
18:36 < other_guy> CoverSlide, one sec 
18:36 < niggler> TehShrike|Work: im not a blogger type
18:37 < TehShrike|Work> Do you communicate with other devs anywhere else on the internet besides IRC?
18:37 < niggler> TehShrike|Work: so gcc supports type format checks
18:37 < niggler> err printf type checks
18:37 < niggler> (1,2, "%s %d", blah1, blah2)
18:38 < TehShrike|Work> It does? My C++ compiler doesn't!
18:38 < niggler> it will give you a warning if blah1 is not a char ptr and blah2 is not an integer
18:38  * TehShrike|Work grumbles
18:38 < niggler> its a gcc extension
18:38 < TehShrike|Work> Well that's cool
18:38 < TehShrike|Work> I wasn't aware of that feature actually
18:38 < niggler> __attribute__((format(printf,start)))
18:38 < niggler> err
18:39 < niggler> __attribute__((format(printf,index_of_fmt,start)))
18:39 < niggler> its useful for your own custom error stuff
18:40 < other_guy> CoverSlide… the benefits over node_riak are that it's actively maintained and more feature complete, and doesn't fit the very narrow usecase of Voxxer
18:40 < niggler> i had something where i wanted a peek at strerror every time, but doing this is far easier than variadic macros
18:40 < TehShrike|Work> I know I've passed in strings in at %d before :-|
18:41 < gbhatnag> hi y'all - looking for a testing module that can act as a browser and log in to make authenticated requests to our server. We're using cookie/session-based auth - any modules out there I should look into? Currently using mocha + superagent + should for testing. I've heard good things about phantomjs, but can't seem to find docs on its support for sessions...
18:41 < niggler> i suspect TehShrike|Work that you can get all of the benefits without the agony by tweaking jshint
18:41 < other_guy> the benefits over riak-js are that it's not in transition between maintainers, it's not in transition from coffeescript to pure js, and it's also modeled more closely after the other Riak clients
18:41 < CoverSlide> ok cool
18:41 < niggler> gbhatnag: phantomjs
18:41 < other_guy> That doesn't even cover the technical benefits :-)
18:41 < CoverSlide> been meaning to switch to riak, i'll probably check out your client if i get around to it
18:42 < gbhatnag> thanks niggler - know if it has support for sessions?
18:42 < gbhatnag> or jQuery?
18:42 < other_guy> riak-js relies heavily on regex's for parsing, which are blocking, which is bad… and since this is a client that should handle lots of transactions simultaneously, that adds up
18:42 < niggler> its a headless version of webkit
18:42 < niggler> so it supports both :)
18:43 < aandy> other_guy: what do you do instead?
18:43 < other_guy> I like riak-js, we used it here, but the circumstances of its maintenance and its codebase caused use to switch and make our own.
18:43 < niggler> there's an example iirc that manipulates google maps
18:43 < other_guy> aandy, a lot of more annoying logic using faster search calls for the specific things that matter in the specific places they'll be in whatever the content format is
18:44 < kaoD> I'm having a hard time finding a Node.JS MVC framework with hybrid client-server rendering (I want pushState and client-side rendering on all but the first request), is there any available?
18:44 < other_guy> It's a bigger pain in the ass for me to build in the client, but it's stable and faster and gets out of the way once its written.
18:45 < gbhatnag> awesome, thanks niggler
18:45 < jocafa> what's the status of libuv on ios?
18:45 < CoverSlide> kaoD: I doubt it, any hybrid rendering I had to write myself. this has been in PHP, Rails, and node
18:45 < bradleymeck> jocafa: it runs?
18:45 < other_guy> aandy, The client is designed to handle bulk operations for GET, PUT, DELETE… which the others don't, and we make heavy use of that fact, which forced me to reduce CPU time spent parsing as much as possible.
18:46 < kaoD> CoverSlide: what a pity
18:46 < kaoD> I'm not really a fan of server-side rendering to be honest
18:47 < CoverSlide> agreed, but usually it involves rendering a partial on the server side anyway and sending that over the wire
18:47 < kaoD> nope, I think in terms of just supporting CRUD over REST access to resources
18:48 < kaoD> IMHO, server-side should be leveraged of mostly all rendering
18:48 < draginx> is .map native to nodejs?
18:48 < CoverSlide> draginx: no, it's in ES5
18:48 < draginx> CoverSlide, I can use .map in nodejs somehow O_o
18:48 < CoverSlide> so browser support is IE9+ only
18:48 < draginx> unless sugarjs adds it :P
18:49 < CoverSlide> ... 
18:49 < boutell> kaoD: I like the REST-only approach for a lot of things, but if you're building something that has to be SEO friendly it's a lot of double work
18:49 < draginx> yup it does ok weird :D
18:49 < niggler> s5fs: heres what nigglerbot should do
18:49 < kaoD> that's why I go for a hybrid-based approach
18:49 < CoverSlide> what was your question exactly?
18:49 < niggler> there should be a file (could be github or w/e)
18:49 < kaoD> server-side rendering for first page loads/bots
18:49 < boutell> speaking of which, nunjucks is my favorite node/javascript template language ever
18:49 < niggler> with a list of criticisms of typescript
18:49 < niggler> a
18:49 < niggler> nd
18:49 < niggler>  w
18:49 < niggler> hen someone says something about typescript
18:50 < CoverSlide> not to mention backfills for IE
18:50 < niggler> it should reply by saying fuck typescript: _____ followed by that message
18:50 < jocafa> bradleymeck:  does it?
18:50 < kaoD> again: that's covered by server-side rendering when needed :P
18:50 < boutell> nunjucks is a faithful port of jinja2, has a good test suite, etc. It really fills the gaps for those of us who need to render complex pages server-side.
18:50 < bradleymeck> jocafa: rooted ios devices have seen node compile so i would presume so
18:51 < kaoD> proper browsers get the full AJAXified page, the rest get server-side rendering
18:51 < kaoD> that enables for Lynx navigation too :)
18:51 < CoverSlide> kaoD: you know what you should do when what you want doesn't exist?
18:51 < jocafa> fair enough…i haven't jailbroken my device in ages :T
18:51 < kaoD> yeah
18:51 < kaoD> pray for it
18:51 < CoverSlide> write it!
18:51 < kaoD> and ask again and again until someone else does it
18:51 < kaoD> :P
18:51 < kaoD> not a bad idea
18:52 < CoverSlide> open-source it
18:52 < CoverSlide> make it to the top of hacker news
18:52 < CoverSlide> then, profit!
18:52 < kaoD> and get friggin rich
18:52 < s5fs> niggler: what if the bot just randomly picks something from your "f-it list" and then says "fuck <item>"
18:52 < kaoD> unfortunately I'm currently trying to build something else and don't really care about building a framework
18:52 < kaoD> TOO much tome
18:52 < kaoD> been there
18:52 < kaoD> done that
18:52 < s5fs> niggler: if it wants to follow up with additional observations, that's fine too
18:52 < kaoD> *much time
18:53 < boutell> I haven't read enough about typescript to find anything about it I really hate. It is, in fact, a bear to do some simple things with inheritance in javascript as it is.
18:53 < boutell> I'm curious how people do the equivalent of calling the parent class version of a method. Things like: 
18:54 < boutell> jump: function() { parent::jump(); jumpEvenHigher(); }
18:54 < boutell> are very common and super annoying in js as far as I can tell (that's not a real example as there's no parent:: mechanism in js).
18:54 < boutell> I'm curious whether typescript's implementation of "classes" includes that case.
18:54 < CoverSlide> the source is pretty massive for what little it does. like it has its own AST parser
18:55 < CoverSlide> i wonder if people could compare TS's AST parser to esprima's or uglify's
18:56 < kaoD> boutell: why use pure JS anyways?
18:56 < kaoD> coffeescript and you're done :P
18:56 < jocafa> i ask because i'm considering using libuv for part of a crossplatform app that i also want to run on mobile devices
18:57 < CoverSlide> it's written in c
18:57  * jocafa pets C
18:57 < CoverSlide> it runs on osx / darwin
18:57 < CoverSlide> so no reason it shouldn't run on ios
19:04 < niggler> C works in ios
19:04 < niggler> objective C is a strict superset of C
19:05 < jocafa> *nod*
19:05 < boutell> kaoD: does coffee script cover the case I described?
19:06 < niggler> fuck coffeescript
19:06 < niggler> this is where nigglerbot would be useful
19:06 < jayne> would it just say "fuck <something recently mentioned>" at random?
19:06 < boutell> I don't like coffeescript but I wouldn't mind seeing what it generates for this.
19:06 < kaoD> boutell: yes it does (if I got what you meant)
19:07 < niggler> jayne: what it would do is parse the text
19:07 < niggler> like coffeescript
19:07 < kaoD> you don't like coffeescript?
19:07 < boutell> kaoD: it allows you to call the parent version of any method from its override in a subclass?
19:07 < kaoD> WHY!?
19:07 < niggler> there'll be a file of reasons to say fuck ____
19:07 < niggler> call it coffeescript.fuck
19:07 < kaoD> boutell: then yes it does, the nice "super"
19:07 < niggler> and every time itll choose a random entry from there
19:07 < boutell> hmm yes it look stat way
19:07 < boutell> that part is cool
19:07 < niggler> grievance of the moment kaoD: whitespace sensitivity
19:07 < boutell> http://coffeescript.org/#classes
19:08 < kaoD> it's all cool
19:08 < kaoD> brackets are for pussies who fear too much
19:08 < niggler> no not python
19:08 < niggler> this is a more subtle issue 
19:08 < niggler> inter-line whitespace
19:09 < boutell> let the record show the implementation of super in coffeescript is pretty solid.
19:09 < kaoD> niggler: what do you mean
19:10 < niggler> foo() -> 'bar' != foo () -> 'bar'
19:10 < CoverSlide> you can do parent easily enough
19:10 < niggler> err the statements "foo() -> 'bar'" and "foo () -> 'bar'" have different meanings in coffeescript
19:10 < CoverSlide> ParentClass.prototype.parentMethod.call(this)
19:10 < niggler> the only difference being the space between foo and (
19:11 < kaoD> nono
19:11 < kaoD> they compile to the same code
19:11 < kaoD> exactly
19:11 < niggler> the first generates foo()(function(){ return 'bar'; });
19:11 < kaoD> hmm nevermind
19:11 < kaoD> it doesn't
19:11 < niggler> the second generates
19:11 < boutell> CoverSlide: yeah, it's just gross as heck
19:11 < kaoD> :P
19:11 < niggler> foo(function() { return 'bar'; });
19:11 < CoverSlide> or you can do this.__proto__.parentMethod.call(this)
19:11 < niggler> so i stand by my fuck coffeescript
19:11 < generalissimo> http://i.imgur.com/nCAmY.jpg
19:11 < niggler> note that this isnt python or brace related :)
19:11 < CoverSlide> except for the fact that there really is no parent class when it comes to js
19:12 < kaoD> I'm not sure it's much of a problem, it never arised for me at least
19:12 < kaoD> it's a price to pay for compact sintax I guess
19:12 < CoverSlide> so you explicitly call the parent method
19:12 < kaoD> *syntax
19:12 < CoverSlide> nothing wrong with that
19:12 < niggler> im sure 80+% of developers won't encounter those issues
19:12  * jocafa nods knowingly at generalissimo
19:12 < niggler> actually make that at least 99.5%
19:13 < niggler> given that most can't pass fizzbuzz
19:13 <@Nexxy> other_guy find what interesting?
19:14 < substack> beep bopo
19:14 < substack> *boop
19:14  * substack berlining it up
19:15 < CoverSlide> what's going on in berlin?
19:15 < niggler> so kaoD id imagine nigglerbot would say fuck coffeescript: bringing back whitespace pains like it's (FORTRAN)77
19:16 < niggler> which is *really* sad given that most people here probably were born after 1977
19:16 < kaoD> good for nigglerbot
19:17 < kaoD> that's why we don't care about whitespace sensitivity... :P
19:17 < TehShrike|Work> generalissimo: lol, nice image macro
19:18 < niggler> typescript has other quirks too TehShrike|Work, but I havent stumbled upon whitespace issues yet
19:18 < TehShrike|Work> substack: enjoy not-America!
19:18 < TehShrike|Work> I hear they have good food in not-America
19:19 < s5fs> Nexxy: hiya!
19:19 < generalissimo> if you don't like coffeescript but you hate writting javascript OOP directly, just steal coffeescript's __hasProp and __extends methods
19:19 < niggler> that's not true TehShrike|Work 
19:20 < niggler> america has some pretty good food, depending on where you are
19:20 < TehShrike|Work> Well, sure
19:20 < TehShrike|Work> But so does not-America :-)
19:21 < TehShrike|Work> I live in Nebraska, I get to eat beef that tastes like real cows.  I'm not complaining.
19:23 < gnarula> Hi! I'm trying to make a game using node.js such that only 2 players can play at once. I'm a bit lost on how'd I 'isolate' the game for every two clients that connect... suggestions?
19:24 < boutell> gnarula: that doesn't seem like a node question per se. How are they connecting? HTTP? Web sockets? Plain old sockets?
19:24 < gnarula> WebSockets
19:24 < boutell> gnarula: actually, javascript is great for this. You have closures, use 'em. 
19:25 < TehShrike|Work> gnarula: probably have an object that represents a gamestate, and "new" one for every pair of players?
19:25 < boutell> yeah that works.
19:25 < TehShrike|Work> gnarula: I assume you'd want to have one module that could create gamestates
19:26 < boutell> I wonder if I can write a sublime text macro for parent() that figures out what the current method is called 
19:27 < boutell> (I understand that there's nothing "wrong" with calling the parent method explicitly and that there is no real notion of classes, but it's a popular pattern for a reason (: )
19:28 < gnarula> TehShrike|Work: awesome! better start working on it
19:28 < gnarula> thanks! boutell, TehShrike
19:29 < jocafa> i thiiiiink that libuv + sundog will give me what i need
19:29 < jocafa> or if not sundog directly, a custom lib based on it
19:32 < trypwire_> has anybody here used the github oauth api before?
19:32 < niggler> its not bad trypwire_ 
19:32 < niggler> you have to do the oauth dance
19:33 < trypwire_> niggler: i'm doing it programmatically for a command line tool.. but i'm getting a totally nondescriptive error message
19:33 < niggler> yeah you have to peek at the headers
19:33 < niggler> the documentation is sparse unfortunately
19:33 < niggler> what are you seeing?
19:33 < niggler> also this should be on #github or something
19:34 < trypwire_> oh there's an IRC for github too?
19:34 < trypwire_> i'm new to IRC
19:35 < niggler> but the documentation is sometimes broken / inconsistent
19:35 < wockan> hello
19:36 < trypwire_> i'm trying to hit api.github.com/authorizations, as the documentation suggests, but i get a 404
19:37 < gbhatnag> niggler: familiar with phantomjs? I'm trying to get it running within my existing mocha tests. I've installed it (downloaded from their site, placed /bin in my path as well as done an npm install phantomjs), but doing a require('webpage').create() fails b/c 'webpage' module can't be found -- am I missing something?
19:37 < niggler> did you install with -g?
19:37 < niggler> or just install?
19:38 < niggler> if you just did install, i think you need to do ./webpage
19:40 < gbhatnag> I did install with -g
19:40 < gbhatnag> looking in my node_modules dir now to see what's up
19:41 < gbhatnag> I also came across this thread in the phantomjs email list which makes me wonder if what I'm trying to do even makes sense: https://groups.google.com/forum/?fromgroups=#!searchin/phantomjs/running$20phantomjs$20within$20node/phantomjs/wrx_KGhpwxE/nI8EBhTQ6soJ 
19:41 < wockan> what neo4j nodejs module should i use and is there any examples?
19:44 < CoverSlide> there is more than 1?
19:45 < wockan> i've found two
19:45 < wockan> but one of them hasn't been updated for 9 months
19:45 < CoverSlide> then i'd try the updatier one
19:45 < CoverSlide> and try the other one and see the difference
19:46 < niggler> you arent running it with phantomjs?
19:46 < wockan> i guess
19:46 < CoverSlide> that's my rule of thumb
19:46 < CoverSlide> go with whichever one was updated most recently
19:46 < CoverSlide> if you don't like it, pick the next one
19:46 < wockan> new isn't always better. But i usually stick with that rule
19:47 < wockan> anyway neither has good docs :S
19:51 <@Nexxy> s5fs!
19:54 < Benvie> TooTallNate: hey
19:54 < TooTallNate> Benvie: hey have you done any bitfield stuff with ref yet?
19:54 < Benvie> yeah
19:55 < TooTallNate> nice
19:55 < Benvie> sec
19:55 < TooTallNate> you should create ref-bitfield :)
19:55 < s5fs> Nexxy: stuck in an airport?
19:55 < Benvie> yeah here it is, it can easily be adapted for that (or any usage)
19:56 < TooTallNate> Benvie: also, i figured you might be interested in https://github.com/TooTallNate/node-function-name :p
19:56 < Benvie> it basically takes a getter and setter function
19:56 < Benvie> and then spreads that into property accessors for a set of given named properties and their corresponding values
19:56 <@Nexxy> s5fs preboarding for Frankfurt in like 5mins
19:56 < Benvie> hahah you know it!
19:57 < Benvie> I seriously spend so much time on just that
19:57 < s5fs> Nexxy: have a safe flight and enjoy the beer! i had a good hang with you the other day, was fun!
19:57 < Benvie> hmm
19:57 < TooTallNate> Benvie: ya, and those eval() hacks make my eye twitch, haha
19:57 < Benvie> ref-bitfield, this sounds like a good idea
19:58 <@Nexxy> yeah for sure, thanks for letting me come by
19:58 < Benvie> yeah I don't particularly like doing it, just for aesthetics
19:58 < Benvie> I guess it's really not necessary to do for stuff particularly targeted at node
19:58 < Benvie> oh hey
19:58 < draginx> Does async.forEach give me back an index number? :/
19:59 < Benvie> I did a fork of node-weak that might interest you
19:59 < Benvie> https://github.com/Benvie/node-weak
19:59 < Benvie> replacing most of the c++ with Proxy that does a better job than the V8 interceptors at replicating the object
19:59 < superjoe> is this an idiom? is it in the native API anywhere? https://gist.github.com/3836023
20:00 < superjoe> *should* it be?
20:00 < TooTallNate> Benvie: hey that's pretty cool!
20:00 < harbhub_> hey
20:01 < Benvie> the objects are nearly indistinguishable in all ways from the real one (the ones v8 interceptors provide miss anything outside of get/set/has/delete) and it's nice to reduce the amount of code in c++ doing some sensitive reflection stuff
20:01 < CoverSlide> superjoe: something that could be done in userland. lots of flow control libraries do similar stuff
20:02 < niggler> is there a script to automatically generate bindings for ffi?
20:03 < Benvie> I have an incomplete one that I need to revamp
20:03 < TooTallNate> Benvie: i'd be down to merge on a transitionary basis. that is, use the new stuff when WeakMap and Proxy are detected, otherwise fallback to the old stuff
20:03 < niggler> Benvie: would be nice to see :)
20:03 < Benvie> oh cool, I will merge the two then
20:03 < CoverSlide> it's nifty though, although just because you're nextticking an expensive operation doesn't really improve performance much, it just frees up the event loop to allow some events to go through
20:03 < Benvie> so that it can be done optionally
20:04 < Benvie> it'll be easy to do that since I originally had them coexisting
20:04 < Benvie> and only took out the extra unusused C++ bits after
20:06 < superjoe> CoverSlide, yeah. I'm using it to save state to disk - I noticed that it was being called multiple times per event loop by independent plugins
20:06 < Benvie> for the codegen thing
20:06 < superjoe> so it prevents a bunch of unnecessary writes to disk
20:06 < Benvie> I don't have that currently in a repo, since it's ugly and I've been working on rebuilding it
20:07 < Benvie> the output from it lives here https://github.com/Benvie/node-Windows/tree/master/codegen
20:09 < Benvie> I'm going to try and transition back to stock ref and ffi and see what additions I have made can be merged back to the main repo
20:09 < Benvie> a bunch of the things I had basic versions, TooTallNate has added full awesome support for
20:10 < Benvie> like Arrays and Callbacks as types
20:11 < TooTallNate> Benvie: and ref-bitfield will *just work* once its written, so there another compatible type
20:11 < Benvie> I also have basic support for Enum types (basically integers that automatically translate to and from a key -> index table, and then Bitfield types for translating from an integer to a given set of bits
20:12 < TooTallNate> Benvie: ref-enum!!!
20:12 < TooTallNate> i love it
20:12 < Benvie> yeah =D just looking at them now and they're both simple
20:12 < Benvie> I'm going to work on this now! =D
20:13 < TooTallNate> Benvie: ref-enum would be sweet cause it can throw on invalid enum values, rather than just any 'ol int type
20:13 < TooTallNate> so that's awesome
20:14 < Benvie> yeah it's really useful to be able to spread all these different ostensibly "optional" types into more complete translations
20:15 < Benvie> given how twitchy ffi is if you do something wrong
20:15 < nathan7> The heck's ffi?
20:15 < nathan7> ah
20:16 < tadkle> Hi all, I want to split a large .mp4 file into small pieces, can you recommend where to start?
20:16 < niggler> or even a script that can generate the required bindings for a node module from some C/C++ code
20:16 < niggler> taking a makefile and generating the GYP, etc
20:16 < Benvie> that's a cool idea
20:17 < Benvie> I have near complete ffi clang bindings here https://github.com/Benvie/node-clang/blob/master/bindings.js
20:17 < Benvie> which is the best thing to do for analyzing headers
20:23 < Slade-> does sockjs/websockets guarantee messages are received exactly how they are sent? or do i need to treat it like a stream
20:23 < Slade-> maybe wrong channel to ask, not sure the right one
20:43 < tnorris> Slade-: since no one else has responded, I'll give a go. If you're using TCP, doesn't that imply the message stays intact?
20:43 < Slade-> tcp itself fragments messages
20:44 < Slade-> hello world  can come across as 2 packages  "hell" "o world" 
20:45 < tnorris> Slade-: yeah, but all the characters in the message will always be "hello world".
20:45 < RLa> be lucky they come in correct order at all
20:45 < tnorris> lol
20:45 < Slade-> i used a trivial example tnorris... i'm aware data isnt lost
20:46 < Slade-> think of it like this, if i send a json object, and then send another one.. when i 'recieve' the data, and i guaranteed that each recieve is a single json object
20:46 < Slade-> or do i need to come up with a better way to frame them myself
20:46 < tnorris> Slade-: ok, in node, net sockets inheret from the Stream class. Streams use packaged buffers to send/receive the data.
20:47 < tjholowaychuk> Slade- you have to frame individual messages
20:47 < Slade-> tjholowaychuk: bummer. ok
20:47 < therealkoopa> Does the JSONStream really parse json as it goes, or does it wait for all the json to be available and then pipe it where it needs to go?
20:47 < tjholowaychuk> Slade- there are existing projects to do this sort of thing for you though, dnode, http://github.com/visionmedia/axon, node's core does this in a few spots
20:48  * Slade- looks
20:48 < tjholowaychuk> zmq, hook.io, others
20:49 < Slade-> tjholowaychuk: : i'm using amqp on the backend, maybe i'll just pass it through
20:49 < Slade-> unfortunate that it isnt framed. oh well
20:59 < russfrank> hook.io is, like, gone
21:09 < mscdex> russfrank: time to fork!
21:09 < russfrank> its not even on github 
21:09 < russfrank> im sure theres a fork somewhere though
21:09 < mscdex> russfrank: create a repo from the npm package
21:10 < niggler> zynga new low
21:10 < niggler> 2.40
21:10 < niggler> 2.39
21:10 < russfrank> o_o
21:10 < niggler> 2.38
21:11 < mscdex> npm remove zynga.js
21:12 < niggler> 2.35
21:14 < niggler> 90M writedown for omgpop
21:20 < kaoD> CoverSlide: in case you're curious: Derby.js covers many of my needs
21:21 < CoverSlide> oh sweet
21:21 < niggler> lol meteor
21:21 < hevets> I'm writing a function that has a loop inside of it doing some heavy lifting type work and inside that loop adding to an array, i want to return that array filled after the loop is finished but its async so it returns too early. whats best practice in node to be notified when the loop is finished?
21:22 < mscdex> hevets: pass in a callback to the function that's doing the work and call that callback when the async operation is done?
21:23 < superjoe> niggler, do you have an opinion about meteor?
21:24 < superjoe> I tried it out recently
21:24 < kaoD> yeah, I'm curioous too
21:24 < kaoD> *curious
21:24 < superjoe> my conclusion was, "great ideas, all executed extremely poorly"
21:24 < AlessioMTX> Hi guys
21:24 < AlessioMTX> I' m starting with nodejs
21:24 < niggler> fuck meteor
21:25 < AlessioMTX> someone has a good nice simple idea for me?
21:25 < AlessioMTX> I' ll do that and I' ll put on github
21:25 < CoverSlide> do a blog engine
21:25 < kaoD> define "simple"
21:26 < niggler> I have something AlessioMTX: build a math library
21:26 < AlessioMTX> good ideas
21:26 < AlessioMTX> math library… interesting
21:26 < ArxPoetica> superjoe -- go look at derby.js or socketstream.js
21:26 < CoverSlide> make an irc bot
21:26 < ArxPoetica> they're better
21:26 < ArxPoetica> meteor wants to be something it isn't
21:26 < AlessioMTX> blog engine like WP ?
21:26 < niggler> superjoe: basically meteor tries too hard to do everything
21:26 < CoverSlide> chat server
21:27 < CoverSlide> twitter clone
21:27 < superjoe> ArxPoetica, why?
21:27 < ArxPoetica> or just socket.io
21:27 < niggler> AlessioMTX: do hthe niggler bot
21:27 < CoverSlide> all nice first project ideas
21:27 < ArxPoetica> Meteor is a pipe dream
21:27 < superjoe> ArxPoetica, I've seen all of those things
21:27 < niggler> when someone says "Typescript"
21:27 < ArxPoetica> It doesn't even package things the true node way
21:27 < ArxPoetica> and it has HUGE security problems
21:27 < superjoe> yeah
21:27 < niggler> say "fuck Typescript: ______"
21:27 < niggler> w
21:27 < niggler> h
21:27 < niggler> e
21:27 < niggler> re
21:27 < spookielayover> ArxPoetica: pipe dream or dream pipe?
21:27 < niggler> _____ is a reason why typescript sucks
21:27 < ArxPoetica> Also, if you need to do more complex pub/sub channeling, it doesn't lend very well
21:28 < CoverSlide> monkeys
21:28 < AlessioMTX> I' ve written the ideas
21:28 < niggler> meteor is like typescript
21:28 < AlessioMTX> tomorrow I' ll decide
21:28 < niggler> both slow you down and frustrate you to no end
21:28 < s5fs> niggler: as in "fuck it"?
21:28 < niggler> s5fs: i actually gave a few more examples of where typescript breaks javascript
21:28 < s5fs> niggler: srsly, bot would save us both time at this point ;-)
21:29 < niggler> i suspect most bloggers have not actually tried using typescript for something serious
21:29 < s5fs> i suspect you're correct
21:29 < superjoe> niggler, I had the same experience with meteor - it almost seems like they're developing for the sake of developing
21:29 < niggler> they accomplished their goal
21:29 < niggler> they got $$ from AH
21:29 < niggler> so they dont give a rat's ass
21:30 < niggler> others will use it, in particular other portfolio companies
21:30 < niggler> so the circlejerk continues
21:30 < AlessioMTX> I' ll come back tomorrow evening and I' ll tell you what I do
21:30 < AlessioMTX> ;)
21:31 < cdo> Hi, has anyone ever had issues using node zlib on SmartOS64?
21:33 < superjoe> I want to see a node.js port of mutagen
21:34 < mscdex> i want to see an amiga emulator in node.js
21:35 < stagas> mscdex++
21:35 < niggler> znga 2.30
21:35 < niggler> down nearly 20%
21:35 < CoverSlide> awesome
21:35 < harrisonm> I'd celebrate but I have friends that work there :(
21:36 < niggler> sad part is that
21:36 < niggler> depending on how you count short-term securities
21:36 < niggler> they have nearly $2/sh on hand
21:36 < niggler> so for it to be 2.30 means that there's a really heavy discount
21:38 < s5fs> niggler: time to release farmville 3
21:38 < CoverSlide> or steal another game
21:38 < mscdex> s5fs: only if it bundles vapor.js
21:38 < niggler> ive had a strange thought
21:38 < mscdex> more startups should get on board with vapor.js
21:39 < niggler> if we gave every farmville player a tenth of an acre of farmland and a hoe
21:39 < niggler> we might be able to solve the obesity and the unemployment problem
21:39 < CoverSlide> yeah except they wouldn't do it
21:41 < Xeoncross> niggler,  I support that idea
21:41 < s5fs> mscdex: hey this vapor.js thing looks pretty good, i'm thinking i'll use in my next project
21:41 < CoverSlide> i use it in every project
21:41 < CoverSlide> sometimes i have 6-7 versions in a single project
21:41 < CoverSlide> it's that good
21:42 < ArxPoetica> foobar
21:42 < s5fs> amazing!
21:42 < CoverSlide> it gets better each time you include it
21:42 < CoverSlide> makes it more vapoyer
21:42 < s5fs> moar vapoar
21:43 < Xeoncross> I don't know, seems like my app's just running on fumes...
21:43 < CoverSlide> holy shit, they've updated it for typescript
21:43 < mscdex> yeah
21:44 < s5fs> any thoughts on semicolon.js? doesn't ave a mobile version but it's the same author and he claims it's more secure and stable
21:45 < CoverSlide> well he needs to port it to more platforms before i can think of using it in production
21:45 < s5fs> without ios support it's a non-started for me
21:46 < sente> so i'm pretty confused about winston & logging -- http://stackoverflow.com/q/12736430/217652
21:46 < sente> any help would be greatly appreciated
21:50 < CoverSlide> sente: maybe ask in #nodejitsu
21:50 < sente> CoverSlide: I did
21:53 < niggler> >>> ;
21:53 < purr> niggler: undefined
21:55 < niggler> where's the code for the bot?
21:56 < CoverSlide> >> version
21:56 < purr> CoverSlide: (string) '3.6.6.11'
21:57 < niggler> >> help
21:57 < purr> niggler: ReferenceError: help is not defined
21:57 < CoverSlide> >> process
21:57 < purr> CoverSlide: ReferenceError: process is not defined
21:57 < CoverSlide> >> (function(){return this}())
21:57 < purr> CoverSlide: (object) {}
21:57 < CoverSlide> >> (function(){return Object.getOwnPropertyNames(this)}())
21:57 < purr> CoverSlide: (object) ['TypeError', 'decodeURI', 'numbers_that_add_and_multiply_to', 'print', 'parseFloat', 'Number', 'URIError', 'encodeURIComponent', 'RangeError', 'ReferenceError', 'RegExp', 'Array', 'isNaN', 'console', 'Sol', 'Date', 'Infinity', 'Boolean', 'constant_multiply', 'Error', 'NaN', 'alert', 'version', 'String', 'Function', 'Math', 'undefined', 'encodeURI', 'obfusca…
21:58 < CoverSlide> >> (function(){return Object.getOwnPropertyNames(this).slice(10)}())
21:58 < purr> CoverSlide: (object) ['RegExp', 'Array', 'isNaN', 'console', 'Sol', 'Date', 'Infinity', 'Boolean', 'constant_multiply', 'Error', 'NaN', 'alert', 'version', 'String', 'Function', 'Math', 'undefined', 'encodeURI', 'obfuscate', 'escape', 'unescape', 'decodeURIComponent', 'EvalError', 'numbers_that_add_and_subtract_to', 'SyntaxError', 'Object', 'eval', 'constant_divide', 'braille', …
21:58 < CoverSlide> >> (function(){return Object.getOwnPropertyNames(this).slice(20)}())
21:58 < purr> CoverSlide: (object) ['NaN', 'alert', 'version', 'String', 'Function', 'Math', 'undefined', 'encodeURI', 'obfuscate', 'escape', 'unescape', 'decodeURIComponent', 'EvalError', 'numbers_that_add_and_subtract_to', 'SyntaxError', 'Object', 'eval', 'constant_divide', 'braille', 'strip_color', 'parseInt', 'JSON', 'isFinite']
21:59 < sent-hil> what's a good terminal break point debugger?
21:59 < CoverSlide> >> braille("i am a bot")
21:59 < purr> CoverSlide: (string) '⠊ ⠁⠍ ⠁ ⠃⠕⠞'
21:59 < CoverSlide> sweet
21:59 < CoverSlide> >> Sol
21:59 < purr> CoverSlide: (function) Sol
21:59 < CoverSlide> >> Sol.toString()
21:59 < purr> CoverSlide: (string) 'function Sol(arg, absolute) {\n\tvar num;\n\tif (arguments.length === 0) {\n\t\tnum = (new Date().getTime() / 86400000);\n\t} else if (Object.prototype.toString.call(arg) === "[object Date]") {\n\t\tnum = (arg.getTime() / 86400000);\n\t} else if (typeof arg === "number") {\n\t\tnum = arg;\n\t} else if (typeof arg === "string") {\n\t\treturn Sol.parseSol(arg…
21:59 < superjoe> sent-hil, http://nodejs.org/api/debugger.html
22:00 < CoverSlide> >>> Sol.toString()
22:00 < purr> CoverSlide: (string) 'function Sol(arg, absolute) {\n\tvar num;\n\tif (arguments.length === 0) {\n\t\tnum = (new Date().getTime() / 86400000);\n\t} else if (Object.prototype.toString.call(arg) === "[object Date]") {\n\t\tnum = (arg.getTime() / 86400000);\n\t} else if (typeof arg === "number") {\n\t\tnum = arg;\n\t} else if (typeof arg === "string") {\n\t\treturn Sol.parseSol(arg…
22:00 < CoverSlide> ok i'll stop now
22:00 < superjoe> CoverSlide, can you take that to a privmsg pretty please
22:02 < frasnyc>  is node.js a good solution for an offline web application?  I need to store upwards of 30,000 records to make them available if searched offline via mobile device
22:03 < CoverSlide> an offline web applicatoin?
22:03 < CoverSlide> that makes ... sense
22:03 < Nuck> Is there an up-to-date jQuery in npm?
22:04 < frasnyc> really web app, but if internet isnt available.  I need the user to be able to continue to work, and push the records to web when its available
22:04 < niggler> lets see if this works
22:04 < sent-hil> superjoe: awesome, thx!
22:04 < gkatsev> Nuck: is jquery not up-to-date?
22:05 < niggler> jquery is as relevant in the node chatroom as typescript
22:05 < Nuck> gkatsev: The jquery module doesn't seem to have been updated in many months
22:05 < superjoe> frasnyc, yeah it's a good choice. you can emit events when data changes to the client, and the client can request updates for whatever it missed
22:05 < Nuck> emme check again
22:05 < gkatsev> Nuck: yeah, looks like it's still 1.7.3
22:05 < Nuck> Plus the jQuery wrapping is fucking awful
22:06 < gkatsev> there are a few other jquery modules
22:06 < niggler> wow the irc module is slow
22:06 < frasnyc> superjoe: thank you!  I'll crack open the node docs now.  thanks again!
22:06 < niggler> not nearly as slow as typescript
22:06 < NigglerBot> fuck typescript
22:06 < niggler> ok good
22:06 < niggler> wow that was easier than i expected
22:07 < gkatsev> Nuck: seems like that's the best one... why do you need jquery in node/npm?
22:08 < Nuck> gkatsev: I use jsdom and need a querySelector.  Sizzle alone would work, but w/e
22:08 < gkatsev> ah
22:08 < superjoe> Nuck, why jsdom?
22:08 < superjoe> wait lemme check the jsdom readme first.
22:08 < Nuck> superjoe: It's what I'm using.
22:09 < Nuck> jsdom's examples load off the jQuery website
22:09 < Nuck> And this seems stupid when I could npm that shit
22:09 < superjoe> ah, it executes external scripts
22:09 < Nuck> Yeah
22:09 < Nuck> Unwrapped jQuery works
22:10 < Nuck> I might build a simple-as-fuck wrapper for jQuery which just exposes the path to the jQuery file :P
22:10 < Nuck> module.exports = path.resolve(__dirname, 'lib/jQuery.js');
22:10 < Nuck> :D
22:10 < ArxPoetica> Anyone know of anything that does the same thing enunciate (for Java) does only in Node land?
22:11 < ArxPoetica> Or is that just nonsense? :P
22:13 < gkatsev> API docs?
22:13 < ArxPoetica> API rest handling
22:14 < ArxPoetica> To be honest not 100% sure what it does -- just heard some Java gurus here at work talking about it, and I wondered what the Node equivalent would be (if it even existed).
22:14 < Nuck> bahahaha
22:15 < Nuck> node-jquery does something similar.  But it is in coffeescript.  /5 lines/ of CoffeeScript.
22:15 < Nuck> And it's uncompiled, so it has coffeescript as a dep
22:15 < gkatsev> people really should stop doing that
22:15 < Nuck> For 5. Fucking. Lines.
22:15 < gkatsev> submit compiled cs to npm
22:15 < Nuck> Nto to mention
22:16 < gkatsev> or really, just stop using CS
22:16 < Nuck> their git repo is "github.com:username" instead of "github.com/username/"
22:16 < Nuck> That's not even a valid URL format
22:16 < Nuck> It's username@github.com, at least
22:16 < gkatsev> I refuse to use CS
22:16 < Nuck> gkatsev: ditto
22:16 < gkatsev> also, libs that require CS
22:16 < gkatsev> anyway, time to head home
22:17 < LouisT> gkatsev: same, i don't get the point in using CS just to have it recompile to js -.-
22:17 < niggler> i fully expected this to take long than it actually did
22:17 < niggler> i imagine people feel hipsterish by coding in coffeescript
22:17 < NigglerBot> fuck coffeescript: it breaks interstitial whitespace insensitivity
22:19 < LouisT> when ever i look at npm modules on the site and see something interesting, i get incredibly disappointed when it's in CS
22:19 < niggler> just translate
22:19 < LouisT> too lazy
22:19 < niggler> oh reminds me -- i need to put in a timer
22:19 < LouisT> i'd rather just not use it at that point
22:19 < Nuck> LouisT: Ditto
22:19 < niggler> i agree -- coffeescript sucks
22:19 < NigglerBot> fuck coffeescript: it breaks interstitial whitespace insensitivity
22:20 < Nuck> I'm not adding CS as a dep to my stuff
22:20 < CoverSlide> typescript
22:20 < Nuck> So I refuse to work with things in CS
22:20 < niggler> i shut it down
22:20 < CoverSlide> oh :p
22:20 < niggler> coverslide ill start it up
22:20 < niggler> ok try it
22:20 < CoverSlide> typescript
22:20 < NigglerBot> fuck typescript: it breaks javascript default behaviors like parseInt(0.3)
22:20 < pyrotechnick> maybe we need an OT channel
22:20 < niggler> like how java people stumble here and ask questions?
22:20 < NigglerBot> fuck java: it has the user friendliness of a swift kick to the balls, the brevity of a prattler, and the portability of a hole in the ground.
22:20 < pyrotechnick> #notnode
22:20 < chilts> or a #typescript channel for people to debate the merits/demerits
22:20 < NigglerBot> fuck typescript: it breaks javascript default behaviors like parseInt(0.3)
22:21 < niggler> ok cool now if only math.random wasnt failing, itd have printed something different :/
22:21 < Nuck> pyrotechnick: #Node.js is an off-topic chat :D
22:21 < LouisT> niggler: wtf is that lol
22:21 < pyrotechnick> Nuck: lulz
22:21 < Nuck> #Node.ts
22:21 < niggler> LouisT: a five-minute IRC client in node
22:21 < niggler> looks for typescript and says fuck typescript
22:21 < LouisT> did you use a lib or something?
22:22 < niggler> npm has irc
22:22 < niggler> npm install irc
22:22 < tnorris> seriously. I need to get some work done, but i'm just waiting for the next NigglerBot message.
22:22 < LouisT> ah yea, i made mine without an irc lib
22:22 < niggler> want to help out tnorris?
22:22 < pyrotechnick> how do you get an invite to channels that need invites?
22:22 < LouisT> i really need to improve the way my plugins get loaded however =/
22:22 < niggler> im wondering whether its easier to host the messages on github
22:22 < tnorris> niggler: sure.
22:23 < niggler> or send a signal to the process to reload a flat file?
22:23 < LouisT> niggler: use this awesome thing called gistdb on npm
22:23 < LouisT> >.>
22:23 < niggler> oh sweet
22:23 < CoverSlide> you have to know someon in the channel
22:23 < niggler> can this run on nodejitsu?
22:23 < LouisT> niggler: gistdb?
22:24 < niggler> no the entire thing
22:24 < LouisT> what?
22:24 < niggler> as opposed to on a server that i have
22:24 < LouisT> oh the bot?
22:24 < niggler> yeah
22:24 < LouisT> i don't think it would
22:24 < niggler> tnorris: lets enumerate the problems with the languages
22:24 < niggler> i
22:24 < LouisT> i've tried stuff like that on cloud hosts before, doesn't ever seem to work out as planned
22:24 < niggler>  played with typescript this morning on a semi-real problem
22:24 < niggler> and came across a slew of issues
22:25 < niggler> so the example it pointed out is that parseInt is *supposed* to convert to string
22:25 < niggler> !mdn parseInt
22:25 < nicholasf> morning
22:25 < niggler> wtf is the syntax to get the help
22:25 < CoverSlide> !mdn is in #javascript
22:25 < niggler> oh we dont have it here
22:25 < CoverSlide> afaik there's no analog here
22:26 < niggler> it says
22:26 < niggler> "The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.
22:26 < niggler> but typescript blows up if you dont pass a string
22:26 < CoverSlide> i only came here for the ladies and the drinks
22:26 < niggler> man where's the guy who wanted to learn node
22:27 < CoverSlide> haha they should support "argument overloading"
22:27 < niggler> Oh yeah the optional argument syntax is quirky
22:28 < niggler> a:int, b?int, c:int is different from a:int, b?int, c?int
22:28 < niggler> kinda like coffeescript's bitchy interstitial whitespace issue 
22:28 < niggler> foo() -> 'bar' != foo () -> 'bar'
22:30 < CoverSlide> i think that causes problems in ruby too, since coffeescript basically tries to emulate ruby
22:30 < tnorris> niggler: my biggest complaint with js is not js, but the DOM API. and it looks like typescript hasn't don't anything to simplify that.
22:30 < Nuck> tnorris: I agree, the DOM API is pretty terrible
22:30 < niggler> typescript cant
22:30 < Nuck> I'd like to see something closer to jQuery than this stupid shit we have now
22:31 < Nuck> document.querySelectorAll?
22:31 < Nuck> Are you joking?
22:31 < Nuck> I ain't typing that shit when I can include jQuery and just type %
22:31 < Nuck> Err, $
22:31 < CoverSlide> var $ = document.querySelectorAll.bind(document)
22:32 < CoverSlide> now here's something infuriating: cookies
22:32 < tnorris> CoverSlide: interesting. what's the advantage of that syntax.
22:32 < CoverSlide> document.cookie returns a string
22:32 < CoverSlide> and yet document.cookie = "cookie=blah";document.cookie does not equal what you put in it
22:33 < CoverSlide> really infuriating
22:33 < tjholowaychuk> document.cookie +=
22:33 < tjholowaychuk> hahaha
22:33 < tjholowaychuk> someone had a bug like that too
22:33 < tjholowaychuk> tons of fun
22:33 < tjholowaychuk> retarded browser apis ftw
22:33 < tjholowaychuk> this is what accessors get you
22:33 < tjholowaychuk> pure rage
22:33 < superjoe> +1
22:33 < Nuck> cookie += is a terrible system
22:33 < tnorris> heh, and how it force appends. but with the optional, and invisible, third parameter of expiration.
22:34 < Nuck> Accessors are something that should be used very sparingly.
22:34 < tjholowaychuk> aka
22:34 < tjholowaychuk> never
22:34 < Nuck> Well, there's occasionally (once every few years) a "good" use for it, which doesn't conflict with expected things
22:34 < Nuck> Generally just saving and loading persistence for it
22:34 < superjoe> I'm ok with the way process.env works
22:36 < tnorris> am I the only person that doesn't see the point of programming in constructors in js? isn't that why you create a new object from a function, as the function acts as the constructor?
22:37 < CoverSlide> no, the community is very split in this regard
22:37 < Nuck> tnorris: constructors are optimized better than object-creation in V8
22:37 < tjholowaychuk> tnorris yeah it's weird
22:37 < tjholowaychuk> you're not alone there
22:37 < CoverSlide> there's the Object.create people, then there's the constructor people
22:37 < Nuck> I generally use constructors with a wrapper for lack of new
22:37 < Nuck> Object.create has a place, though
22:37 < CoverSlide> then there's non-js people who only underrstand how to do classes and need class frameworks to do anything
22:38 < Nuck> CoverSlide: haha yeah
22:38 < Benvie> Objecr.create does the same thing as using new, it just more effectively namespaces it
22:38 < Benvie> except when you want to create something with a null prototype
22:38 < Nuck> Object.create is not the same as new, I thought?
22:39 < Benvie> it is the same and is in fact implemented using `new` in V8's code
22:39 < Nuck> I thought Object.create didn't call the constructor?
22:39 < Benvie> which essentially does
22:39 < CoverSlide> yeah, the thing is, the ES5 prototype chain is powerful, you don't get that with ES3 constructors
22:39 < Benvie> you get the same thing
22:39 < tnorris> Benvie: only time I'll use Object.create is if I want to create a read-only property.
22:39 < Benvie> ObjectNew in V8's source does
22:39 < Nuck> yes, but does the constructor get called?
22:39 < Benvie> var o = new Object; o.__proto__ = proto
22:39 < tnorris> but that's pretty much never.
22:40 < Nuck> tnorris: I don't think you understand Object.create
22:40 < Nuck> You might be mixing it up with the property-setting function
22:40 < Benvie> I use Object.create to bypass existing constructors, primarily when I'm creating inherited prototypes
22:40 < CoverSlide> yes, you CAN have access to .__proto__, but that's not really a feature of the language
22:40 < Nuck> Benvie: So it doesn't call the constructor?
22:40 < Benvie> Object.create is the language implementation of crockfords
22:40 < substack> haha http://nodestream.org/
22:41 < Benvie> function F(){} F.prototype = obj; return new F
22:41 < Benvie> with the added bonus of handling descriptors and adding the ability to inherit from null
22:41 < tnorris> Nuck: probably. have only used it little, and what I did learn came from the following line from mdn: `Object.create({}, { p: { value: 42, writable: true, enumerable: true, configurable: true } });`
22:41 < Benvie> that's all it is
22:41 < CoverSlide> the way to do inheritance in ES3 is either MyObject.prototype = new ParentObject() or for(var i in ParentObject.prototype) MyObject.prototype[i] = ParentObject.prototype[i]
22:41 < CoverSlide> but there's no hierarchy there
22:41 < CoverSlide> it will be facter though, since the lookup only goes through one layer
22:42 < CoverSlide> *faster
22:42 < Benvie> function create(obj, descs){ function F(){} F.prototype = obj; obj = new F; Object.defineProperties(obj, descs); return obj }
22:42  * Nuck shrugs
22:42 < Nuck> I just use new Thing() generally
22:42 < tnorris> yeah. easy and simple.
22:43 < Benvie> Object.create is when you want to create an instance without having standardized initialization, or to bypass the normal constructor's initialization
22:43 < superjoe> substack, wtf is this
22:43 < tnorris> though picked up a bad habit from Resig's book about forcing `new` if the developer didn't use it.
22:43 < Nuck> superjoe: Enterprise-level Node.js, I think
22:43 < superjoe> ...
22:43 < Nuck> tnorris: forcing new if they didn't use it?
22:44 < CoverSlide> drupal?
22:44 < Nuck> tnorris: Like, if they forgot to use var thing = new Thing(), and used var thing = Thing();, automatically new-ing it?
22:44 < CoverSlide> ha drupal started packaging with node a year ago
22:44 < tnorris> Nuck: yeah. like this: `if (!(this instanceof <function_name>)) return new <function_name>(arg0, arg1, ...)`
22:44 < Nuck> CoverSlide: Drupal.js ;D
22:44 < tjholowaychuk> CoverSlide really?
22:44 < Nuck> tnorris: I do that too, generally
22:44 < Benvie> forcing new is bad for when you want to allow initialization of objects that may not be instances of your constructor or inherited from it
22:44 < tjholowaychuk> they bundle node?
22:44 < TooTallNate> tnorris: why do you think it's a bad babit?
22:44 < TooTallNate> habit
22:45 < Nuck> I can't see the negative
22:45 < Nuck> tjholowaychuk: I think he means that they use Node as a build system
22:45 < tjholowaychuk> oh
22:45 < Benvie> it's only bad when you want to explicitly allow that usage
22:45 < tjholowaychuk> i dont recall drupal even having a build system
22:45 < tjholowaychuk> not when i used it atleast
22:45 < Nuck> Neither do I, but I never really liked Drupal much
22:46 < Nuck> I only used it because At Least It's Not Drupal™.
22:46 < Nuck> Err, s/Drupal/Joomla/
22:46 < tnorris> TooTallNate: bad habit, as in I forget I do that when I'm instruction a new developer in js. then they're all like "wft won't this work!"
22:46 < tjholowaychuk> it did modules a lot more right than anything else
22:46 < tjholowaychuk> that's about it
22:46 < Nuck> drupal is one great big mistake.
22:46 < Nuck> It is proof that there is no God.
22:47 < tjholowaychuk> caters to a different crowd
22:47 < Nuck> Because if God exists, he would smite Drupal.
22:47 < superjoe> he or she
22:47 < tnorris> damn you Nuck. I was taking a drink right then.
22:47 < Nuck> Drupal is the COBOL of CMSes.
22:47 < substack> you assume benevolence
22:47 < Nuck> tnorris: SINNER.
22:47 < Nuck> substack: Or he-she.
22:48 < Nuck> Err, superjoe ^
22:48 < Nuck> We cannot assume that God is not transgender, hermaphroditic, or anything else.
22:48 < substack> gender is such a silly thing to project onto deities
22:49 < tnorris> TooTallNate: there are also strange coercion cases. For example, duplicating Array's use/lack-of `new` took some effort.
22:49 < tnorris> since it can accept N arguments.
22:49 < tnorris> finally figured it out though.
22:49 < superjoe> it's a moot point though. whatever species, quantity, and/or gender the deit(y/ies) is/are, Drupal would be smitten.
22:50 < niggler> fuck drupal
22:50 < pyrotechnick> God's a zwitter
22:50 < Nuck> superjoe: I agree.  The deit(y/ies)' genitals have nothin to do with Drupal.
22:52 < Nuck> So I've been pondering on a 100% streaming template engine based on Handlebars
22:52 < superjoe> why?
22:52 < superjoe> handlebars is so hard to use, and it doesn't even solve the problem of clobbering user inputs
22:53 < tnorris> ok, so can anyone explain how js keeps track of inheritance? meaning, `instanceof` always seems to know if inheritance took place.
22:53 < tnorris> or point me to some article.
22:53 < Nuck> Handlebars is extremely easy to use, superjoe 
22:53 < Nuck> I don't know what the fuck you're on
22:53 < Nuck> But it's a damn simple engine
22:54 < Benvie> handlebars is a good song too
22:54 < Nuck> The goal is not to solve many problems
22:54 < superjoe> Nuck, I suppose it wasn't too hard once I resolved to write a bunch of helpers
22:54 < superjoe> https://github.com/superjoe30/groovebasin/tree/master/src/client/views
22:54 < Nuck> Handlebars is simple: You have blocks and you have variables/functions
22:55 < Nuck> superjoe: I'm adding a few APIs specific to Node.js, namely inherits and includes
22:55 < Nuck> And "blocks" like in twig
22:55 < superjoe> I had to fuck up my object model in order to get handlebars to iterate over it
22:55 < Benvie> cool thing is that es6 makes most templating engines obsolete
22:55 < Nuck> Benvie: Wat.
22:55 < purr> beep.
22:55 < Nuck> lolpurr
22:56 < Benvie> templates are built into the language at syntax level
22:56 < tnorris> jsonml with template function ftw!
22:56 < Nuck> Benvie: ... Wat.
22:56 < purr> beep.
22:56 < Nuck> purr: Oh fuck off
22:56 < Nuck> purr: Stop harvesting you bastard.
22:56 < CoverSlide> jspp ftw!!! https://github.com/mikeal/jspp
22:56 < Benvie> var x = `multiline string here {$ any javascript expression here } more multline string`
22:57 < Benvie> or
22:57 < Benvie> var x = callbackHere`the template goes here`
22:57 < Nuck> Benvie: That's... Rather shitty
22:57 < Nuck> Benvie: That won't replace templating engines AT ALL
22:57 < Nuck> Might as well just do 'things things ' + js expression + 'things things'
22:57 < Benvie> I kind of think it will. Or I would clarify and say it builds most of their functionality into the language and they will be built on top of it
22:58 < CoverSlide> wtf ... backticks?
22:59 < Benvie> caching is also built into it, or at least is trivial to do given how tagged templates work
22:59 < Benvie> that is, the ones with the callback`template`
23:01 < tnorris> CoverSlide: i can't stop looking at the jspp repo. don't know why. i'm amazed and so very confused all at once.
23:02 < CoverSlide> ah, he took down jspp.io
23:02 < CoverSlide> it had nice examples there
23:02 < CoverSlide> but basically you called and end() function in every template, so you could have asynchronous templates
23:02 < CoverSlide> *an
23:03 < tnorris> hm, interesting.
23:12 < Benvie> I started writing a js interpretor that uses continuation passing style to execute AST. Certain invariants must be upheld with regards to order of execution but I'm wondering what could be done with the ability to asynchronously fulfill any given expression
23:16 < pyrotechnick> CA's gas is being rationed?
23:16 < pyrotechnick> doom?
23:16 < niggler> they had the hydrocracker accident recently
23:16 < tnorris> pyrotechnick: what?
23:16 < pyrotechnick> iran's currency dropped 50% in the last few weeks too
23:17 < niggler> yeah pyrotechnick embargo
23:17 < pyrotechnick> bring in your tomato plants boys.
23:17 < niggler> no new dollars flowing into iran
23:17 < pyrotechnick> nah they're counterfeiting their currency
23:17 < pyrotechnick> soviet tactics
23:17 < niggler> they dont need to
23:17 < pyrotechnick> sure they do
23:17 < pyrotechnick> think of iran's allies
23:18 < niggler> we did that already many years ago
23:18 < pyrotechnick> they will save them in a heartbeat
23:18 < niggler> actually it might have been iraq
23:18 < pyrotechnick> so what's with the gas rations?
23:18 < pyrotechnick> 1 fracking incident and they need to ration gas?
23:18 < niggler> that's only in california
23:19 < niggler> its not a fracking accident
23:19 < pyrotechnick> what's hydrowateveryousaid
23:19 < niggler> the chevron hydrocracker had issues
23:19 < tnorris> pyrotechnick: I think it's just google putting the hurt on them for blocking gmail.
23:19 < niggler> hydrocracker is how you break down large hydrocarbons
23:19 < pyrotechnick> so 1 plant has a problem and they need to ration gas?
23:19 < niggler> you naturally have very long chains
23:19 < pyrotechnick> i call BS
23:19 < niggler> its not rationed on the east coast
23:20 < pyrotechnick> you're missing the point
23:20 < niggler> california is always fucked over in the energy space
23:20 < niggler> enron :)
23:20 < pyrotechnick> is it because CAs are rich and they'll pay anyway?
23:20 < pyrotechnick> is this some kind of robin hood thing?
23:21 < niggler> meh its all games anyway
23:21 < pyrotechnick> of course
23:21 < niggler> we have more reserves under the ground in the US than in the middle east
23:21 < pyrotechnick> but this is a new game inside the game game game game game
23:21 < pyrotechnick> haha
23:21 < niggler> its true
23:21 < txdv_> reserves of what?
23:21 < niggler> colorado and a slew of other states have untapped gas reserves
23:21 < niggler> and i mean oil, not natgas
23:22 < txdv_> maple syrup?
23:22 < pyrotechnick> you're delusional
23:22 < niggler> not including the SPR we have roughly 1.4 trillion barrels of oil under the ground
23:24 < tnorris> I think I'll just use this as an excuse to work from home for the next couple weeks.
23:24 < niggler> without using environmentally disastrous methods, EIA estimates 200B
23:25 < txdv_> lets pump all the black stuff out of the earth and burn it
23:25 < niggler> better to leave it there
23:26 < txdv_> we are living in an unsustainable system
23:26 < txdv_> this oil burning is stupid
23:30 < niggler> meh the economics of green energy dont make sense yet
23:30 < niggler> its going to take some time
23:30 < niggler> whats strange pyrotechnick is that the WTI/RBOB ratio is going awry
23:31 < txdv_> what doesn't make sense is burning a finite resource
23:31 < niggler> the sun has finite energy
23:31 < txdv_> not from the perspective our civilization
23:31 < niggler> znga 2.28
23:32 < txdv_> it is possible the in my or the next generation oil will go out
23:32 < txdv_> the sun on the other hand
23:32 < niggler> nah
23:32 < niggler> thats not true
23:33 < niggler> we'll see inflation, thats true
23:33 < pyrotechnick> you know the real reason your coorps hate iran right?
23:33 < niggler> but we have enough oil
23:34 < txdv_> they have oil and they don't want to sell it cheap
23:34 < txdv_> hussein did a mistake by selling that oil for euros
23:34 < pyrotechnick> no
23:34 < txdv_> o it pissed off the americans
23:34 < pyrotechnick> why would a country export all its oil
23:34 < pyrotechnick> ALL its oil
23:34 < pyrotechnick> think.
23:35 < txdv_> yeah
23:35 < txdv_> the americans want to make iran sell all its oil
23:35 < pyrotechnick> because
23:35 < pyrotechnick> because they don't NEED it.
23:36 < pyrotechnick> they're using tech your coorps don't want joe blow finding out about
23:37 < tommybergeron> Hey guys, little clientside JS question here. I know there's "webkitTransitionEnd" to see when a CSS3 transition has ended. But is there a start? I tried webkitTransitionStart but it didn't worked :-/
23:39 < niggler> hahaha tommybergeron there's a channel #javascript
23:39 < tnorris> tommybergeron: that sounds more like a SO question.
23:39 < tommybergeron> Just found out lol
23:39 < tommybergeron> I found one SO question that was old and told that there's one but it doesn't work haha
23:40 < xonecas> tommybergeron: #html5 might be a better place for an aswer
23:40 < tommybergeron> good idea, thx
23:48 < whomp> i am making a mobile app service, which the user must be authenticated to use. what would be the best way to manage user sessions?
23:53 < chilts> whomp: are you using connect or express or something else?
23:53 < whomp> i'm not using anything
23:53 < whomp> except http i guess
23:54 < niggler> are you even using node?
23:54 < chilts> whomp: I'd recommend using connect and looking at the connect.session() middleware
23:54 < chilts> in fact, use express (which sits on top of connect)
23:55 < chilts> you'll need the connect.cookieParser() middleware before that too
--- Log closed Fri Oct 05 00:00:13 2012
