--- Log opened Fri May 17 00:00:10 2013
00:03 < dev360> I'm trying to run the v8 profiler to see heap dumps but the 'profiles' tab is not showing up. Running mac os xâ€¦ ideas anyone?
00:03 < cococo> "npm ERR! install Couldn't read dependencies" does it look familiar to anyone??
00:04 < Havvy> cococo: Look at package.json
00:04 < Havvy> At your dependencies object.
00:04 < cococo> that what it say, some kind of mistake in json
00:04 < cococo> let me see
00:06 < Havvy> Pastebin your package.json
00:07 < vampi-the-frog> I just made my image resizer with gm, you can basically request /files/foo/jpg and get the full size image, /files/small/foo.jpg to get a smaller version, /files/thumb/foo.jpg to get a 50x50 thumbnail. They are cached for faster serving afterwards ^_^
00:07 < Havvy> Is gm just a wrapper for imagemagick?
00:07 < vampi-the-frog> yes
00:07 < vampi-the-frog> it's slightly buggy too, but I'm too lazy to fork it and fix it
00:08 < vampi-the-frog> where your pastebin at?
00:09 < vampi-the-frog> http://pastie.org/7918386
00:12 < ericelliott> Comments? Criticism? https://github.com/dilvie/qconf
00:14 < ericelliott> oops, broken. =)
00:16 < TheAceOfHearts> has anyone been using http://ternjs.net/ ? 
00:16 < ericelliott> yeah.. it's integrated in Brackets.
00:16 < ericelliott> The Brackets integration is a little buggy.
00:17 < TheAceOfHearts> I use Sublime Text 2
00:17 < ericelliott> Pretty sure there's a sublime package
00:18 < TheAceOfHearts> yeah, but like, is it worth trying out or is it still too early?
00:18 < ericelliott> Haven't tried the sublime package.
00:19 < ericelliott> https://github.com/emmetio/sublime-tern
00:20 < TheAceOfHearts> cool ty
00:21 < samholmes> browserify expects you to build your scripts with a command line. How do you develop at a fast pace as you usually could with a build step?
00:22 < Havvy> samholmes: With grunt.
00:22 < substack> samholmes: https://github.com/substack/node-browserify#third-party-tools
00:22 < substack> there's also beefy
00:22 < substack> but I just run the command manually
00:38 -!- ServerMode/#Node.js [+o piscisaureus_] by holmes.freenode.net
00:38 -!- ServerMode/#Node.js [+o Nexxy] by holmes.freenode.net
00:41 < samholmes> What's a good vanilla way to write a parallel async routine?
00:42 < Fusl> welcome back... who f***** it up? :D
00:42 < samholmes> Fusl: Do you write in vanilla js?
00:43 < vampi-the-frog> http://vanilla-js.com/
00:45 -!- mode/#Node.js [+o isaacbw] by ChanServ
00:46 < duko> hi I'm looking for the smallest possible piece of code that defines module.exports in node environment and does not define for browser environment
00:47 <@isaacbw> damn damn irssi not reconnecting after a netsplit
00:47 <@isaacbw> *-damn
00:50 < Fusl> samholmes: yes, why?
00:50 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:50 < samholmes> Fusl: How do you do parallel asynchronous routines?
00:50 < Fusl> there isn't anything great to do async :)
00:51 < ningu> in what language are we talking about?
00:52 -!- ServerMode/#Node.js [+o mbalho] by holmes.freenode.net
00:52  * luminous holds on
00:53 < samholmes> https://gist.github.com/samholmes/5596262
00:53 -!- ServerMode/#Node.js [+o trevnorris] by holmes.freenode.net
00:53 < timoxley> what is "_bytesDispatched" on a socket
00:53 < samholmes> Fusl: What are you talking about?
00:53 < duko> what is going on w/ #node.js?
00:53 < samholmes> ningu: JS of course
00:53 < Fusl> samholmes: nothing :D
00:53 < NotMyself> vampi-the-frog: that site is hilarious...
00:53 < ningu> samholmes: you can't do it that way.
00:54 < vampi-the-frog> NotMyself, the 'human readable' size is really useful
00:54 < samholmes> Fusl: you said there's nothing great to do with async? Async is what node.js is all about.
00:54 < samholmes> ningu: why not?
00:54 < ningu> samholmes: sorry, I misread what you were trying to do. :)
00:55 < Fusl> samholmes: async, sync... it confuses me every time :D
00:55 < Fusl> ah... i just wrote a dns scanner for openresolve.me
00:55 < Fusl> (sorry, shouldnt be ad)
00:55 < samholmes> ningu: any comments on it?
00:56 < ningu> samholmes: seems reasonable although it obviously isn't general like the async module since you have to inline the finish code and manually code the # of functions
00:57 < samholmes> ningu: Right. How could we overcome this without needing a lib?
00:57 < ningu> samholmes: same way async does it. pass in an array of functions and a finish callback.
00:57 < samholmes> ningu: maybe there's a pattern that could be written out, or multiple patterns for different situations, that would work with parallel async operations like this.
00:57 < ningu> it would be virtually the same as your code otherwise
00:58 < ningu> you can get your sync from home depot but for async you need node.js
00:58 < ningu> Fusl: that's the important difference ;)
00:58 < vampi-the-frog> in express, is there a way to process a form-data post request as it is posted, ie read a file chunk by chunk as it is uploaded?
00:58 < Fusl> ningu just don't use the words async and sync and all is good :D
00:58 < samholmes> How do you set syntax language for a code block in markdown?
00:59 < samholmes> Fusl: idk what's so tricky about the two definitions? :0
00:59 <@isaacbw> freenode is broken :(
00:59 < Fusl> isaacbw: yes it is...
01:00 < Fusl> samholmes: since i do not neet to use "async"/"sync" (the definition), i am always confused about them :D
01:01 < samholmes> Fusl: Do you write node.js apps?
01:02 < Fusl> samholmes: define "apps" :D
01:02 < Stumbler> Anyone have a favorite javascript or general programming blog or podcast I could check out?
01:04 < samholmes> Fusl: stuff
01:04 < Fusl> yes i do
01:04 < ningu> Stumbler: nodeup?
01:04 < Fusl> going to bed now... bye
01:05 < dev360> is there anybody in here that has done memory profiling on node.js? Nothing seems to work
01:05 < ningu> I thought profiling was politically incorrect
01:06 < Stumbler> ningu: thanks, that'll give me something to do for a while. :D
01:06 < myndzi> dev360: i remember attacking that some while back and getting the same result.. all the blog posts, packages, etc. seem outdated or nonfunctional
01:06 < myndzi> i didn't really find a solution, but it appears that remote debugging is the best you can do
01:07 < myndzi> so look for something along those lines and use what tools you can get i suppose
01:07 < dev360> myndzi -- ok so i read about some tools that supposedly only run on freebsd did you try any of those?
01:07 < dev360> I got node-inspector to show the profiles tab but as soon as i tried to take the snapshot it crashes.
01:07 < myndzi> nope, i'm working with linux
01:08 < myndzi> i just get really annoyed at never getting responses, so i figured i'd save you that pain :P
01:08 < myndzi> i don't have an answer, but it's not just you!
01:08 < ningu> I just say snarky things when I don't know
01:09 < samholmes> ningu: check out my edit?
01:12 < ningu> samholmes: sure. what's your aversion to having a library, anyway?
01:13 < samholmes> ningu: dependency.
01:13 < samholmes> I'd like to have at my disposal the ability to write raw JS code and accomplish the same task, even if it takes a little extra time.
01:13 < ningu> doesn't seem worth it to me, especially with how everything is just in the node_modules directory
01:13 < ningu> well sure, you can always do that 
01:14 < ningu> I just don't see the point for common things that have been solved
01:14 < samholmes> ningu: if you had to code something in the browser without browserify, or you had to hack in a different JS environement.
01:17 < samholmes> ningu: depending on async is like depending on jquery
01:18 < samholmes> I guess that's not a bad thing.. it's just that you're stuck with that pattern
01:18 < samholmes> But, then why choose another pattern..
01:18 < ningu> yeah, in the browser I can see that, although I'm not particularly against client-side dependencies either
01:20 < samholmes> ningu: just trying to think of ways to keep as close to JS as a language
01:21 < samholmes> the function I posted was so short that you could write ad-hoc and now you have a useful pattern to use.
01:26 < dev360> myndzi: yeah this is really annoying me. This is my 2nd attempt to fix this issue. I read a post on hacker news about node and memory profiling only to find out its referring back to the same old crap I looked at 4 months ago and it still doesn't work.
01:34 < ChrisPartridge> dev360: did you require the v8-profiler package in your code before trying to take the heap snapshot?
01:36 < dev360> ChrisPartridge -- yes its at the top. I could not get node-inspector to work. Is there a way to get the same output that node-inspector uses and just log it instead? I don't know how to read it
01:37 < dev360> I did var snapshot = profiler.takeSnapshot(name); as described here: http://docs.nodejitsu.com/articles/getting-started/how-to-debug-nodejs-applications
01:37 < dev360> it seemed to work but I don't know what to do next -- I can't find any info online
01:43 < ChrisPartridge> dev360: you can use the process-heap-prof script in the v8 tools to output a .hp file which you can pass into hp2ps to get a histogram
01:44 < dev360> ChrisPartridge: I just found this: snapshot = profiler.heap.takeSnapshot('snapshot-1')
01:44 < dev360> snapshot.serialize('/tmp/snapshot.json')
01:44 < dev360> do you know if that would that produce some meaningful output?
01:47 < Cainus> hey all... anyone have a good package suggestion for dynamic images?  particularly dynamic text on existing images?
01:49 < ChrisPartridge> dev360: possibly, give it a shot
01:50 < ChrisPartridge> dev360: otherwise try load the heap snapshot directly into chrome
01:50 < dev360> okay I will try that thank you so much for your help.
01:50 < dev360> where can i download the v8 tools. when i google for it i get a cheesy website instead
01:51 < ChrisPartridge> (right click on "Profiles" header and click "Load Heap Snapshot..."
01:51 < ChrisPartridge> dev360: you will most likely need to build them
01:51 < dev360> okay, so just look for it on github or something like that?
01:52 < ChrisPartridge> dev360: https://github.com/joyent/node/blob/master/deps/v8/tools/process-heap-prof.py
01:53 < ChrisPartridge> that's just a python script, so you might not need to build
01:53 < dev360> thanks again!
01:53 < ChrisPartridge> i'd suggest trying to load the heap snapshot to chromium first, might be easier
01:53 < dev360> okay will do
02:02 < samholmes> ningu: https://github.com/samholmes/finisher :)
02:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:24 < CharlesV> <3 them nodes
02:24 < ChrisPartridge> node.js rules!
02:25 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:25 < samholmes> ChrisPartridge: Yes it does. Where have you been?
02:35 -!- mode/#Node.js [+o isaacbw] by ChanServ
02:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:41 < Stumbler> Are there any good gui modules for node yet?
02:43 < LegCow> you mean the ability to create a gui with node?
02:43 < LegCow> but not web?
02:44 < LegCow> or a gui to interact with node in some way?
02:44 < Stumbler> write a gui in node, for client side interfaces
02:44 < LegCow> i'm not sure why you'd need either
02:44 < LegCow> you just create a webserver and your gui is your browser
02:44 <@isaacbw> that seems like a pretty crazy thing to do
02:45 < ningu> how would the gui get to the client?
02:45 < Stumbler> running node on the client machine?  (not web based, desktop application use case)
02:45 < ningu> it may be possible but it isn't what node is well suited for
02:46 < Stumbler> Given, but I would really like to see javascript used to develop native ui.   or, I would like to be able to at least, to keep my projects well organized and focused.
02:47 < Stumbler> I started writing a library sort of like phone-gap for desktop apps some time ago.  Just thought it would be nice if something were already out there in working order.
02:47 < njrD> I heard of node webkit which could run node.js apps on desktop, not sure if thats what you want
02:48 < Stumbler> http://readwrite.com/2011/04/26/build-desktop-apps-with-nodejs   this looks nifty, but its future is uncertain apparently.
02:49 <@isaacbw> that's over two years old
02:49 < njrD> https://github.com/rogerwang/node-webkit
02:50 < LegCow> i suppose that's an interesting idea, why wouldn't a webpage be enough though?
02:50 < Stumbler> eeee! That does look fun
02:50 < LegCow> is there a specific purpose you're looking at that can't use html as the ui?
02:50 < Stumbler> because sometimes I'd like to be able to have lower level system access
02:51 < Stumbler> direct network sockets, file i/o, that sort of thing
02:51 < LegCow> you can do that in node though
02:51 < Kennythehitman> Lol
02:51 < njrD> socket.io
02:51 < Stumbler> yea, but not in a web browser
02:51 < LegCow> just run the client and server on the same box
02:51 < Kennythehitman> You don't need a GUI for that
02:51 < Kennythehitman> Certain tools are better fits for certain jobs
02:51 < LegCow> and have the client send a command to the server to perform those functions
02:51 < LegCow> with the added benefit of being able to be controlled remotely, obviously, heh
02:52 < Kennythehitman> Why not look into C with Gtk+ or C++ with Qt
02:52 < Kennythehitman> Python with PySide...etc
02:52 < Kennythehitman> node.js just isn't suited to the use case you're looking for. imho the notion is absurd
02:52 < LegCow> yeah, i tend to agree
02:52 < Stumbler> -_-  I don't care.
02:52 <@isaacbw> fair warning: glib will drive you into madness
02:52 < Kennythehitman> It isn't meant to be a swiss army knife nor will it ever be
02:53 < njrD> lol
02:53 <@isaacbw> and you'll never fully heal
02:53 < ningu> I agree too but the idea of taking advice from a hit man seems problematic ;)
02:53 < Kennythehitman> Stumbler: Ok, be ignorant for all I care. I shall get on with actual work, lmao.
02:54 < Kennythehitman> I wonder what's going on in #meteor
02:54 < Stumbler> look, Its not like I was asking you get involved with anything, it was an idea that I had floating around in my head for a while.. I've got a dozen reasons why it would be an ideal approach to my system IF there were native gui support already implemented.  apparently there is not, so I'll do something else, it's that simple
02:55 < Kennythehitman> Stumbler: Lol, no worries man. I was just trying to help out, I didn't know you actually had reasons.
02:55 < LegCow> i just can't think of a purpose of having a strictly native gui, unless you wanted a game?
02:56 < LegCow> or didn't want to use a browser?
02:56 < samholmes> Just realized something. What happens if you have a bunch of async things happening in parallel and then one of them errors out? Do you let the others finish even though one has already failed?
02:56 < Kennythehitman> Why not write node.js bindings to Qt lol?
02:56 < ningu> samholmes: you can't stop them once they've started
02:56 < samholmes> ningu: right. 
02:57 < Stumbler> my number one reason is that it's dynamic and interpreted, which means pushing client updates would be as simple as pushing a string to a mysql database and having the client load the new code.   Sometimes I'm no where near my job site, and it could be nice to seamlessly fix problems that crop up without having the overhead of a compiled language
02:57 < Kennythehitman> Just use native extensions ;)
02:57 < ningu> samholmes: but you still have to decide whether to call their finish callbacks or not
02:58 < njrD> My company was considering using something like node webkit so they could phase out their old desktop app... but they got bought out so there goes that use case
02:58 < Kennythehitman> Hmm, I think I know where you're going with that
02:58 < Kennythehitman> Actually quite interesting
02:58 < samholmes> ningu: That would depend on how the system works.
02:59 < Kennythehitman> ^^ still stands too, it could be accomplished with utilizing native extensions and binding to qt or gtk+ or w/e gui toolkit you prefer
02:59 < Stumbler> Mine is pushing hard to go web tech only.   I don't want to force everyone in the office to run their work software in a client (web browser) that is always subject to changing either
02:59 < Stumbler> yeah, and that's something I'm looking at doing
02:59 < Kennythehitman> accomplished by*
02:59 < Stumbler> I just happen to really like javascript lol
03:00 < Kennythehitman> Understandable. It especially gets a lot better once one gets into node
03:10 < Stumbler> node-webkit looks like a pretty awesome option, thanks for that link Njrd.   Also, sorry about earlier, I'm pushing 36 hours right now, and I'm really grumpy :(
03:11 < ningu> Stumbler: btw, it's not that hard to make new node bindings with node-gyp
03:11 < ningu> at this point though there are bindings to a lot of libs already
03:12 < Stumbler> I see your point, it's something I have been overlooking.  I think I'll make a note of that and look into it a little more when I'm able to focus tomorrow. heh
03:32 < gluxon> .
03:42 < samholmes> try typing: "popup popout " three times fast
03:42 < samholmes> popup popout popup popout popup popout
03:42 < samholmes> Took me that long. lol
03:45 < ChrisPartridge> samholmes: go to sleep
03:45 < samholmes> lol
03:46 < samholmes> it's actually pretty challenging
03:46 < samholmes> MR ChrisPartridge
04:15 < marie1972> .
04:16 < addle_> Quick Q: I've been a developer full time for the last 3 years. Each job I have worked at, I have had lots(or of an adequate amount) of experience with the language. Is it worth applying at jobs that I don't have that much experience with but am passionate about the technology if I am a quick leaner?
04:17 < addle_> language(s)/tech
04:17 < addle_> learner*
04:18 < tankbusta> I also have a quick Q: I'm having a problem where the req data is getting stripped in some callbacks: http://pastebin.com/BLs56wyY <- comments explain the bug too
04:18 < tankbusta> if I should post it somewhere else, lmk 
04:19 < tankbusta> I've been bashing my head on wall | 
04:20 < leichtgewicht> addle_: if you are honest and the employer likes to take the risk, why not. But even fast learner will stumble from time to time ;)
04:23 < Atiov> Ty!
04:26 < brian_petersen> I am using nginx to proxy request to my node.js application. I am using socket.io and I am having problems with everything being really slow. I know that it is with my current configuration, but I don't know how to set up my proxy settings to speed things up. Anyone have a current config that has a node.js with socket.io?
04:54 < mossman11> Anyone here use forever w/ mongodb? 
05:10 < buggy> hey folks, anyone know why this is happening?
05:10 < buggy> http://stackoverflow.com/questions/16601778/require-js-jst-files
05:12 < ChrisPartridge> buggy: doesn't really relate to node.js
05:14 < ChrisPartridge> buggy: also, where are you loading the sample JST file? and why are you trying to set a global on window.. 
05:14 < buggy> True, was just wondering if any folks here knew whats up
05:14 < ChrisPartridge> just turn your JST code into a module, and be on your way
05:15 < buggy> that JST file was generated by the haml-coffee compiler
05:16 < buggy> chris , how do i do that?
05:16 < ChrisPartridge> buggy: how is it even getting loaded though? are you just adding a script tag for it?
05:17 < buggy> define ['backbone', 'marionette', 'text!javascripts/backbone/templates/test.jst']       The "text!"  plugin by requirejs loads it
05:17 < buggy> i have googled and lots of folks have done the same thing and it works for them, i am guessing its something to do with my JST file structure
05:18 < ChrisPartridge> buggy: I'd probably consult those others then, although I wouldn't have thought using the text plugin in requirejs would help with this case - considering the JST file is obviously JS
05:19 < buggy> exactly what i was thinking, you think i should just load it as a JS file, wrapped in a define block?
05:20 -!- mode/#Node.js [+o MI6] by ChanServ
05:25 < nodepdx-ircterm> 76y2354r]lakhsdf
05:28 < buggy> works! damn it that was the longest 6 hours i have spent on any problem in a long time! Thanks for the pointer chris.
05:28 < ChrisPartridge> buggy: glad it worked
05:51 < vramana> Can somebody help me with this issue http://stackoverflow.com/questions/16588706/heroku-created-a-facebook-app-with-node-js-which-gives-type-error 
06:05 < ChrisPartridge> ugh, i knew i shouldn't have used this package
06:06 < chilts> which one?
06:06 < ChrisPartridge> not node related, jSignature
06:06 < ChrisPartridge> for on-screen signing
06:06 < ChrisPartridge> i chose it, because it had (what i thought was) a good readme
06:07 < ChrisPartridge> but doesn't even cover "settings" can be passed to init
06:07 < ChrisPartridge> works though, i guess
06:07 < chilts> heh
06:08 < ChrisPartridge> i know what i'll be doing this weekend!
06:10 < ckknight> it's damn cool that putting Fixes #30 in my commit makes GitHub auto-close the ticket
06:14 < LegCow> if i wanted to run a node app on a hosted server already running a small iis based website, is there any way we could both use port 80?
06:16 < greelgorke> LegCow: reverse proxy
06:17 < LegCow> oh of course
06:17 < LegCow> i think you can host node under iis too? sounds messy
06:23 < greelgorke> LegCow: i don't really know what iis can do anyway
06:25 < aESS_> fwe
06:25 < aESS_> fewe
06:26 < aESS_> æœ‰å›½äººä¹ˆï¼Ÿ
06:40 < vramana> Can somebody help me with this issue http://stackoverflow.com/questions/16588706/heroku-created-a-facebook-app-with-node-js-which-gives-type-error 
06:43 < jesusabdullah> vramana: there's no variable in that scope named "app"
06:44 < jesusabdullah> vramana: you have to figure out what app is supposed to be and why it's not defined in that scope
06:44 < jesusabdullah> vramana: and then define it to be the right thing
06:44 < vramana> I am actually New to Node.js
06:44 < vramana> Very very new
06:44 < jesusabdullah> vramana: from here it looks like a template that expects access to an express "app"
06:45 < jesusabdullah> no matter vramana it's the same sort of problem you'd run into with any other programming
06:45 < jesusabdullah> Sam's answer is the correct one
06:45 < jesusabdullah> you need to find the template file
06:45 < vramana> https://github.com/heroku/facebook-template-nodejs
06:46 < jesusabdullah> vramana: https://github.com/heroku/facebook-template-nodejs/blob/master/views/index.ejs#L7 app isn't being passed into this template
06:46 < jesusabdullah> vramana: this app uses the "ejs" template library
06:47 < jesusabdullah> vramana: https://github.com/heroku/facebook-template-nodejs/blob/master/web.js#L52 is probably where it's being called, you can see that they're trying to pass in "app" but it's probably not defined here
06:49 < jesusabdullah> vramana: try adding some console.logs to see what "app" is defined as before that's called
06:49 < vramana> What should I do? Sorry if I am being a help vampire But This is my first time I am to need to learn a lot 
06:50 < vramana> Where should I add console logs??
06:50 < jesusabdullah> okay, first look up both ejs and express and read a little, get a feel for what they do and how they work
06:50 < jesusabdullah> no use trying to debug something you don't know the first thing about
06:51 < jesusabdullah> it could be that they're not using the ejs api correctly (I don't know I haven't used ejs in a while)
06:51 < jesusabdullah> second, add a console.log(app) just above this line https://github.com/heroku/facebook-template-nodejs/blob/master/web.js#L49 and see what it is
06:52 < jesusabdullah> vramana: got it
06:52 < jesusabdullah> vramana: https://github.com/heroku/facebook-template-nodejs/blob/master/web.js#L47 This line
06:52 < jesusabdullah> vramana: you can see that "app" in this scope refers to the *facebook* app and not the express app
06:52 < jesusabdullah> vramana: you can also see they are not checking to see if there is an error
06:53 < jesusabdullah> vramana: in node.js callback style, the first argument is usually an error, and if it's an error (not null, not undefined, in theory an instance of Error) there's a good chance the other parameters aren't defined
06:53 < Xehanort> Hi greelgorke, it's you who recommand me "Eloquent JavaScript" yesterday ?
06:53 < jesusabdullah> vramana: so what you need to do is add a console.log(err) right below that line, and figure out what you're doing wrong
06:53 < greelgorke> Xehanort: yes
06:54 < vramana> jesusabdullah: Let me do it and report back
06:54 < jesusabdullah> vramana: and then when you feel like you understand how the callback signatures in node work, make an issue on the project explaining how they need to do something sensible with the error (log it, throw it, *something*)
06:55 < jesusabdullah> vramana: in fact, it looks like https://github.com/heroku/facebook-template-nodejs/commit/521ff07a6596e18a54520f305406f5fc3407aca1 was half-assed
06:55 < jesusabdullah> no offense to the heroku guys, I accidentally half-ass stuff more than I'd like to admit
06:56 < greelgorke> Xehanort: yes, and?
06:57 < geNAZt> hiho
06:57 < greelgorke> Xehanort: functions are special objects, but if you introspect them with the typeof operator, you'll get 'function' and not object
06:57 < greelgorke> >> typeof function(){}
06:57 < purr> greelgorke: (string) 'function'
06:57 < geNAZt> function is not an object 
06:57 < geNAZt> :D
06:58 < greelgorke> Xehanort: yes, i think the types in the book named so because of the typeof
06:59 < ckknight> geNAZt: well, it inherits from Object
06:59 < ckknight> so yes, functions are objects.
06:59 < ckknight> they're just more than objects
06:59 < geNAZt> yes it does
07:00 < greelgorke> Xehanort: http://ecma-international.org/ecma-262/5.1/#sec-11.4.3
07:00 < geNAZt> but its not an object because you can do serialisation on it
07:00 < geNAZt> cant*
07:01 < greelgorke> >> var f = function(){}; f.fooo= 'fooo'; JSON.stringify(f)
07:01 < purr> greelgorke: undefined
07:01 < vramana> jesusabdullah: I added and git pushed the code The app is still giving the same error.
07:01 < geNAZt> >> var f = function(){}; f.fooo= 'fooo'; f.fooo; JSON.stringify(f)
07:01 < purr> geNAZt: undefined
07:02 < geNAZt> >> var f = function(){}; f.fooo= 'fooo'; f.fooo;
07:02 < purr> geNAZt: (string) 'fooo'
07:02 < geNAZt> see
07:02 < jesusabdullah> vramana: so look at the logs, what's the console-logged error?
07:02 < jesusabdullah> vramana: change that console.log to, if (err) throw err; and it'll throw that one instead of soldiering on
07:03 < aESS_> 8889
07:03 < greelgorke> Xehanort: typeof null is Object, but it should be actually null, because null is "not-an-object"-type :D confusing
07:04 < geNAZt> >> null.prototype.x = function(){}; null.x;
07:04 < purr> geNAZt: TypeError: Cannot read property 'prototype' of null
07:05 < vramana> jesusabdullah: Just a coneformation. Are you asking me to change the code and report you what appears on the website?? or is it something else.
07:05 < vramana> *conformation
07:05 < geNAZt> well typing in javascript is bad :D
07:05 < greelgorke> Xehanort: there are 5 primitive types: undefined, null, number, boolean, string. then there are basic-types: object and function. i separate function because they are callable. thats it
07:07 < jesusabdullah> vramana: I'm saying, either find the terminal output, or throw the error
07:07 < jesusabdullah> vramana: you can swap out the console.log with that if (err) throw err; if you like, it's roughly equivalent
07:07 < greelgorke> null to Object same as NaN to Number except that:
07:08 < greelgorke> >> null === null
07:08 < purr> greelgorke: (boolean) true
07:08 < jesusabdullah> vramana: but you need to either run it locally (not on heroku) or figure out how heroku expects you to see application logs
07:08 < greelgorke> >> NaN === NaN
07:08 < purr> greelgorke: (boolean) false
07:08 < greelgorke> yay
07:09 < geNAZt> but for normal you dont do that :D
07:09 < greelgorke> js is so cool because it one of the most anarchic language of all those langs which are not inted to be anarchic
07:09 < greelgorke> intent*
07:09 < vramana> jesusabdullah: https://github.com/heroku/facebook-template-nodejs#run-locally This is the way to run the app locally I guess
07:10  * greelgorke my english sucks...
07:10 < jesusabdullah> vramana: you should understand how to run apps locally, it's important for debugging
07:10 < vramana> jesusabdullah: When I do foreman start 
07:11 < vramana> 12:40:37 web.1  | started with pid 5424
07:11 < vramana> 12:40:37 web.1  | exited with code 1
07:11 < vramana> 12:40:37 system | sending SIGTERM to all processes
07:11 < vramana> SIGTERM received
07:11 < vramana> This is the output
07:12 < vramana> jesusabdullah: I don't know where to set the Website URL to be http://localhost:5000/
07:13 < jesusabdullah> vramana: better get to looking
07:13 < jesusabdullah> vramana: better get to reading up on foreman
07:13 < jesusabdullah> vramana: I don't have all the answers
07:13 < jesusabdullah> vramana: also heroku is weird cause most of us use npm start not foreman
07:17 < vramana> jesusabdullah: I have been trying to read to a lot of stuff. Almost everything is new to me. So I having problems with grasping things. 
07:17 < jesusabdullah> vramana: it takes work
07:17 < vramana> Is there good place to start with these stuff according to you
07:17 < jesusabdullah> uhhhh
07:18 < jesusabdullah> vramana: Look up some node tutorials, also look for some express-specific tutorials (or whatever stack appeals to you)
07:18 < jesusabdullah> vramana: find the node.js core documentation, and express's core documentation
07:18 < jesusabdullah> vramana: play with npm
07:19 < jesusabdullah> vramana: http://nodetuts.com/ This was good back in the day, it looks like pedro's kept up on it
07:19 < geNAZt> also go and learn what the "callbackhell" is and how to avoid that
07:19 < jesusabdullah> I actually have never used domains you guys :(
07:19 < geNAZt> it is one of the key elements to write good readable code
07:19 < jesusabdullah> http://callbackhell.com/
07:21 < [AD]Turbo> hola
07:22 < jesusabdullah> vramana: honestly my best advice is this: Write something tiny from scratch. Then write something similarly small using express. And every time you run into a problem search npm to see if you can find something that does what you want to do already.
07:23 < geNAZt> Also:
07:23 < geNAZt> Javascript Reference: https://developer.mozilla.org/en/docs/JavaScript
07:24 < vramana> All I wanted was to write a facebook App I thought since I know basic JS May be I would choose Node.js as my platform But Now it has become too complicated. 
07:24 < jesusabdullah> vramana, anything worth learning is complicated.
07:24 < jesusabdullah> vramana: and it's not that complicated really, you're just unfamiliar with it.
07:24 < geNAZt> well programming / coding is complicated
07:25 < geNAZt> and javascript is one of the easiest languages
07:25 < jesusabdullah> you'll run into the same shit on any server side platform vramana no matter the language or libraries
07:26 < jesusabdullah> that facebook app is really pretty simple, I can't imagine it would take you that long to read through it and figure out what/how it does what it does vramana 
07:26 < vramana> The problem is I have to work on some other Projects as well this summer as an intern so I want try to out idea and materialise it in the most easiest possible way
07:27 < jesusabdullah> what makes you think there's an easier way?
07:27 < jesusabdullah> you can read javascript
07:27 < jesusabdullah> the program's a few hundred lines long
07:27 < jesusabdullah> you have us
07:27 < geNAZt> you have npm :D
07:27 < geNAZt> 90% of work done :_D
07:27 < jesusabdullah> you can start with a 4 line "hello world" app and flesh it out into something interesting
07:28 < vramana> :D
07:28 < geNAZt> well coding a project isnt a 1 week into anything ready thing
07:28 < geNAZt> you need time and to think in some cases
07:29 < jesusabdullah> vramana: Try something less ambitious if you feel overwhelmed by the facebook app
07:29 < jesusabdullah> vramana: example, I write little irc bots, https://github.com/jesusabdullah/ddgbot/blob/master/bot.js is ~100 lines long
07:29 < geNAZt> or write a simple chat with expressjs / socket.io
07:30 < vramana> Okay
07:31 < geNAZt> well if you hang at something
07:31 < geNAZt> here in this channel there are many people helping you :D
07:32 < jesusabdullah> vramana: https://github.com/jesusabdullah/chip_from_marketing/blob/master/index.js this one is only 50 lines long
07:33 < cococo> The Heroku Cedar stack supports Node.js and Socket.IO; however, the following configuration settings are necessary to force long polling and prevent the use of WebSockets. The WebSockets protocol is not yet supported on the Cedar stack.
07:33 < cococo> https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku
07:33 < cococo> tell me if I am wrong
07:33 < cococo> heroku dont suport another webpage to use a socket.io in their sites?
07:34 < jesusabdullah> the cedar stack at least, cococo
07:34 < geNAZt> well they dont support websockets
07:34 < `3rdEden> You can use socket.io on heroku but without websockets.. So it doesn't make any sense to deploy realtime applications on heroku
07:34 < cococo> ckknight: hello my friend
07:34 < ckknight> hey cococo
07:34 < vramana> https://devcenter.heroku.com/articles/nodejs jesusabdullah Can use this to start writing node.js app and also know how to Heroku 
07:35 < vramana> Atleast by the looks of it I feel it as a good starting point.
07:35 < cococo> but I have see socket.io working in heroku
07:36 < cococo> but my point is, I want to make my html5 socket.io game hosted in my webpage.com and the node.js server in heroku.com... could I get connected from my webpage to the heroku.com socket.io server?
07:36 < geNAZt> yes
07:36 < cococo> looks like they are saying it is not posible
07:36 < geNAZt> but not via websockets
07:37 < cococo> websockets = socket.io?
07:37 < geNAZt> no
07:37 < geNAZt> socket.io has support for websockets
07:39 < cococo> geNAZt: why heroku will stop websockets conections from other websites, and no socket.io?
07:39 < cococo> isnt the same thing?
07:39 < geNAZt> no, socket.io bundles more transport layers beside websockets
07:40 < geNAZt> like flashsockets, xhr polling, jsonp, iframe, html longload
07:40 < geNAZt> and so on
07:45 < cococo> geNAZt: 
07:46 < cococo> http://stackoverflow.com/questions/6223867/can-i-set-up-socket-io-chat-on-heroku
07:46 < cococo> it is a simple example
07:46 < cococo> somehow I think, the client most connect to the server with....
07:46 < cococo> io.configure(function () {    io.set("transports", ["xhr-polling"]);    io.set("polling duration", 10);  }); socket = new io.Socket();
07:47 < cococo> do you think that coneccion mode, work for a chat project
07:47 < cococo> ...in example
07:48 < geNAZt> ofc it will work
07:49 < geNAZt> it will also work in standard configuration
07:49 < geNAZt> but it will not use websockets
07:49 < geNAZt> and so you dont have a "realtime" communication anymore
07:50 < cococo> lol
07:50 < cococo> its so funny
07:50 < cococo> how can I make a real time multiplayer game without realtime communication
07:51 < ChrisPartridge> fake it
07:51 < geNAZt> by not using cloud services that doesnt support websockets :D
07:51 < geNAZt> or fake it
07:51 < geNAZt> look at grits :D
07:51 < geNAZt> http://www.youtube.com/watch?v=Prkyd5n0P7k
07:51 < jesusabdullah> cococo there are other hosts y'know besides heroku
07:51 < cococo> where was you 4 days ago, when I start to readding all those tutorial
07:51 < cococo> :)
07:52 < jesusabdullah> have you considered a rackspace, joyent or aws server?
07:52 < `3rdEden> cococo: Nodejitsu has websockets support; http://nodejitsu.com ;)
07:52 < geNAZt> well full supported vserver arent that expensive
07:52 < geNAZt> :D
07:52 < cococo> jesusabdullah: english pls
07:52 < cococo> =D
07:53 < ChrisPartridge> i thought heroku supported web sockets? 
07:53 < geNAZt> https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku
07:53 < `3rdEden> nope, they still have everything behind anctient nginx load balancers
07:53 < ChrisPartridge> chumps
07:53 < cococo> I think they do, but in his own webhosting
07:54 < geNAZt> https://www.nodejitsu.com/paas/
07:54 < geNAZt> point 5
07:54 < jesusabdullah> nginx supports websockets now last I heard
07:54 < jesusabdullah> but theirs must be stale
07:54 < geNAZt> yes now
07:54 < geNAZt> now != current version on heroku
07:55 < geNAZt> its like debian: 1-2 year old versions, but they are rock solid 
07:55 < `3rdEden> yes, nginx support websockets now but it seems that Heroku isn't that interested in WebSockets or they would have fixed their shit years ago
07:55 < geNAZt> `3rdEden, maybe the version isnt tested enough and not meant for production
07:55 < geNAZt> or something
07:55 < `3rdEden> geNAZt: it's in the latest stable release
07:56 < geNAZt> latest
07:56 < geNAZt> stable of nginx maybe
07:56 < `3rdEden> and according to my testing: https://github.com/observing/balancerbattle it's more then stable enough for production
07:56 < cococo> dunno, I hate download those... "tool.exe" .... cloud9 let you make all your project in chrome....
07:56 < cococo> so from cloud9 you deploy it to heroku
07:57 < geNAZt> `3rdEden, your tests build on development releases oO
07:57 < jesusabdullah> dev releases are best releases
07:57 < `3rdEden> geNAZt: which was the release candidate
07:57 < geNAZt> not for production servers :D
07:57 < `3rdEden> geNAZt: see https://github.com/observing/balancerbattle/commit/7b4d008ed464e83b446e48a070287ecf29c1d3d0
07:57 < jesusabdullah> define "production"
07:57 < geNAZt> production == failsafe in any condition
07:58 < jesusabdullah> You'll never be failsafe in *any* condition
07:58 < geNAZt> yes ofc
07:58 < jesusabdullah> how "failsafe" is "failsafe enough" ?
07:58 < geNAZt> if i get into an undefined state i can reroll the application to a new state
07:58 < geNAZt> or roll it back to an older state
07:58 < jesusabdullah> so why not use an RC if it looks g2g?
07:58 < geNAZt> failsafe enough => i can access the service without downtime over 1%
07:58 < jesusabdullah> You know, some wouldn't consider node "production ready"
07:59 < jesusabdullah> What if you can get that from a release candidate?
07:59 < geNAZt> well it isnt
07:59 < jesusabdullah> you use centos don't you
07:59 < geNAZt> no
07:59 < geNAZt> i use debisn
07:59 < geNAZt> debian*
07:59 < jesusabdullah> "python 2.6 isn't production ready"
07:59 < jesusabdullah> "WE use python 2.4"
07:59 < geNAZt> well i dont use python in production applications
07:59 < geNAZt> only to support build chains
08:00 < jesusabdullah> you're missing my point
08:00 < jesusabdullah> which is that "production-ready" doesn't mean "old"
08:00 < geNAZt> no it doesnt
08:00 < geNAZt> but it means "tested"
08:00 < geNAZt> and this takes time
08:01 < jesusabdullah> you'll never know if you don't use it :)
08:01 < jesusabdullah> The way I see it
08:01 < jesusabdullah> different people simply have different comfort levels with new things
08:01 < jesusabdullah> and at the end of the day, if it doesn't explode all the time it's fine
08:01 < geNAZt> well if you work so you can calculate downtimes using new untested versions of software
08:01 < geNAZt> productions servers arent testing serevrs :D
08:02 < jesusabdullah> says someone that doesn't nearly have a heart attack every time they deploy to production ;)
08:03 < geNAZt> well thats okay
08:03 < geNAZt> but it can change something you dont have on screen
08:03 < geNAZt> and this can cause failure on your production env
08:03 < geNAZt> which i want to avoid
08:05 < Bubo> you have a spam bot named: splash
08:05 < aESS_> 665
08:05 < jesusabdullah> not I, sir
08:05 < aESS_> 777899445
08:05 < jesusabdullah> and/or ma'am
08:05 < aESS_> you are ?
08:06 < jesusabdullah> a triangle, please, amongst others in the grid.
08:06 < chakrit> mscdex_: what is the status of your beepjs package? is it like a done thing or abandoned?
08:06 < aESS_> what grid?
08:07 < aESS_> how to download this source?
08:08 < jesusabdullah> THE grid
08:09 < jesusabdullah> aESS_: http://alessonislearned.com/index.php?comic=11
08:10 < jesusabdullah> aESS_: You are now enlightened.
08:10 < vramana> jesusabdullah: I have completed till this step. Then How do I run the app locally??
08:10 < vramana> https://devcenter.heroku.com/articles/nodejs#declare-dependencies-with-npm
08:11 < vramana> I want to use npm start
08:11 < geNAZt> you hav web.js ?
08:11 < vramana> Yeah
08:11 < geNAZt> ndoe web.js
08:11 < geNAZt> node*
08:11 < geNAZt> What a package.json can do: http://package.json.nodejitsu.com/
08:13 < vramana> Some how on my system I have to use nodejs web.js .  `node web.js` doesn't work for
08:13 < geNAZt> you have ubuntu right ?
08:13 < geNAZt> :D
08:14 < vramana> Yeah
08:15 < jesusabdullah> install node from source, the packages are totally fucked
08:15 < geNAZt> no they arent
08:15 < geNAZt> they are repo conform
08:19 < vramana> geNAZt, jesusabdullah  When I am do nodejs web.js on my previously created Facebook app It is working http://imgur.com/2Bh6Vz6
08:20 < jesusabdullah> congrats
08:21 < vramana> but on heroku It's not working
08:24 < ChrisPartridge> ask in #heroku ?
08:25 < aandy> what's the current (safest) way to run an external binary (with [] params and stdout, stderr), child_process and spawn? or exec?
08:26 < geNAZt> spawn
08:26 < ningu> spawn and exec are different, but yes
08:26 < sinclair|node> ningu: thoughts on google io?
08:26 < vramana> ChrisPartridge: I tried yesterday waited for long time no Response
08:26 < ChrisPartridge> exec buffers output by default, afaik
08:26 < ningu> sinclair|node: the conference?
08:26 < aandy> ah, thanks
08:26 < chakrit> you can set uid and gid on spawn
08:26 < geNAZt> exec also doesnt escape your params
08:27 < geNAZt> spawn does escape your spawn args
08:27 < vramana> ChrisPartridge: Just now got a reply from them https://help.heroku.com/tickets/85473
08:27 < sinclair|node> ningu: yes
08:27 < ningu> sinclair|node: I've never been to a tech conference, can't afford it and don't have a company to send me
08:27 < ChrisPartridge> vramana: can't view the link, requires login
08:28 < vramana> This is what they wrote http://pastebin.com/NTUH5b3e
08:28 < sinclair|node> ningu: exactly, google io is a conference for privileged 20 somethings who are drinking the "we can change the world through code, and google services" kool aid
08:28 < ChrisPartridge> vramana: haha that's heroku for you
08:30 < sinclair|node> ningu: so many of them are wearing google glass
08:30 < ningu> sinclair|node: yes, there is a sort of silicon valley groupthink, although I've mostly encountered it from the outside
08:31 < sinclair|node> ningu: how so?
08:31 < ningu> that is, I'm in SF but not surrounded every day by those people
08:31 < sinclair|node> they all seem to revel in their position with their company X
08:31 < sinclair|node> and, they are say thinks like "cool, and awesome"
08:32 < sinclair|node> just watching one where a ex Microsoft developer got booed
08:34 < ningu> sinclair|node: I don't have anything particularly intelligent to say about any of this, I just have my perspective from academia and also from traveling a fair amount to culturally different places
08:35 < Siyfion> See now my perception is that SF is where it's 'at' for developers...
08:35 < sinclair|node> ningu: still at university?
08:35 < ningu> yes
08:35 < sinclair|node> ningu: never went to university, but been doing code professionally for 12 years now
08:36 < Siyfion> but then perhaps that's because I'm in the UK...
08:36 < sinclair|node> ningu: what do they teach you nowadays in uni?
08:36 < aESS_> 8888
08:36 < sinclair|node> ningu: im 33 btw
08:36 < aESS_> 1123
08:36 < ningu> I am 32
08:37 < ningu> and I'm not on compsci, I'm doing a ph.d.
08:37 < sinclair|node> ningu: what are you still doing in university?
08:37 < ningu> in linguistics
08:37 < sinclair|node> ningu: phd in?
08:37 < sinclair|node> i see
08:37 < ningu> s/on/in
08:37 < Siyfion> sinclair|node: in the UK it's all about learning the fundamentals of how programming languages work, compilers, interpreters, etc.
08:37 < aESS_> see what?
08:37 < sinclair|node> Siyfion: thats comp sci
08:38 < ningu> sinclair|node: well, I wasn't sure what you meant anyway by "what do they teach you"
08:38 < ningu> his answer seemed as good as any :)
08:38 < sinclair|node> Siyfion: none of that prepares you for anything in the industry tho, not unless you move into some niche thing out there
08:38 < Siyfion> sinclair|node: That's what I did ;)
08:38 < Siyfion> sinclair|node: I'd somewhat agree and disagree, I think it provides a strong base from which to learn from
08:39 < Siyfion> sinclair|node: But in itself, no.. First thing you do after you leave is pick a language and actually learn it..
08:39 < sinclair|node> Siyfion: i have had bad experiences with comp sci graduates 
08:39 < Siyfion> sinclair|node: From the UK?
08:39 < sinclair|node> NZ
08:39 < sinclair|node> Auckland University graduates 
08:39 < Siyfion> sinclair|node: Okay, might be a bit different over here..
08:39 < ningu> I'm sure compsci can provide a useful background, but what I personally would value is someone  who can apply themselves and learn on their owb
08:40 < ningu> own*
08:40 < Siyfion> sinclair|node: I'd say that I seem to struggle a hell of a lot less than my "Computer Programming" degree friends...
08:40 < ningu> there are plenty of projects I'm interested in where someone with a compsci background would be useful
08:40 < sinclair|node> ningu: well, compilers were something i learnt on my own, slowly
08:40 < Siyfion> sinclair|node: My CompSci degree was all about providing you with the tools to allow you to learn anything you like....
08:41 < ningu> Siyfion: the skill to learn things is pretty hard to teach though
08:41 < ningu> you can teach knowledge more easily
08:41 < Siyfion> ningu: agreed. Hence why my friends that did a programming degree now know VB *really* well.... LOL
08:41 < ningu> haha
08:41 < Siyfion> ningu: Downside is, they can't understand any other language
08:42 < Siyfion> ningu: And times change. :`
08:42 < sinclair|node> ningu: the one good thing i can say for education, is you will learn and be directed in the appropriate things to learn, where as otherwise, you spend more time floundering not knowing what you don't know you should know
08:42 < krnflake> Morning ;) Can you guys recommend me a ssl/tls proxy which I can use in front of my Node.js tcp server? Since Node's tls performance is kinda bad :)
08:42 < sinclair|node> ningu: i spent years learning things that should have taken me a fraction of the time if i had only known what was important
08:43 < Siyfion> Whereas I, have been a games programmer in C++, systems developer in C# and now doing some Node.js and Angular.js
08:43 < ningu> sinclair|node: my views are somewhat old fashioned in that I think a general, well-rounded education is valuable in and of itself
08:43 < Siyfion> sinclair|node: hindsight is always a wonderful thing ;)
08:43 < sinclair|node> ningu: i started out in computer graphics, i spent years learning linear algebra, 
08:43 < ningu> but I am not very ideological about it
08:43 < ningu> it's what I value myself, not what I think is ultimately necessary for the world at large
08:43 < Siyfion> I just have the "right tools for the right job" approach...
08:44 < ningu> ah, yeah, I've never done any graphics stuff, I know I could figure it out somehow or other but I don't have a strong enough desire to do it
08:44 < sinclair|node> ningu: i would know everything a comp sci graduate would know, however i was thinking about this other day
08:44 < ningu> sinclair|node: by well-rounded I meant not just compsci
08:45 < sinclair|node> ningu: in the time i have spent learning everything on my own, if you trade time for cost, learning on your own is inefficient, and costly
08:45 < donCams> so. any tips on how to do some background jobs using cron? i'm using it with async and lockfiles but when one of the jobs is long, the other jobs seem not to continue
08:45 < borislavsabev> @sinclair I can argue on that one at least a bit
08:45 < ningu> it's not about efficiency
08:45 < ningu> you learn different things
08:46 < sinclair|node> ningu: yes, on your own, you learn a lot of niche things
08:46 < sinclair|node> ningu: but you have no way to measure your skill against anything
08:46 < ningu> yeah, and you don't know what you don't know :)
08:46 < borislavsabev> of course you may need some help here and there but the basics is to have a good foundation of math :D
08:46 < Siyfion> I think the most important thing is that you should *always* be striving to learn new things...
08:47 < sinclair|node> ningu: yeah, i don't often stumble across things i never have heard of nowadays, but in the past, i often got tripped up
08:47 < Siyfion> in programming, life, whatever
08:47 < gildean> krnflake: lots of people use either nginx or haproxy for a proxy-server in front of their node-apps
08:48 < sinclair|node> ningu: anyway, i have months of experience professional or otherwise in most topics in comp sci, paths i don't spend time exploring nowadays, 
08:48 < sinclair|node> ningu: the only thing i never got into was audio processing (speaker beeps don't count)
08:48 < aandy> geNAZt: not to abuse you, but at a quick superficial glance, does this look ok? http://pastie.org/private/6jrsaucjko4vraxr3mw#3,7
08:49 < sinclair|node> ningu: nowadays, its all about web stuff
08:49 < geNAZt> aandy, for spawns it is better to listen to the exit event
08:49 < geNAZt> instead of the close one
08:50 < Siyfion> sinclair|node: Mostly... I think that native phone apps still have a place
08:50 < Siyfion> sinclair|node: So learning some iOS programming or Android development, probably isn't an awful idea.
08:50 < aandy> geNAZt: ah, due to the streams. gotcha. thanks! 
08:57 < sinclair|node> Siyfion: i disagree, Objective C is bad
08:58 < donCams> anybody here tried doing some cron background jobs?
08:58 < sinclair|node> donCams: quite a bit
08:58 < sinclair|node> ningu: you still there ? also, have you had much background in node sockets?
08:59 < ningu> yes, was just debugging something I'm working on
08:59 < ningu> not a ton of experience with sockets but some
08:59 < Siyfion> sinclair|node: Hey, I never said I liked iOS programming, just that it's still a valuable skill
08:59 < sinclair|node> Siyfion: iOS and apple products are a fad
08:59 < aandy> pretty long fad though
08:59 < aandy> :p
08:59 < sinclair|node> Siyfion: which is why i don't invest any time into them
08:59 < donCams> so basically, i am using cron, async, sequelize to query tables occasionally. but whenever i have a huge query for one of the jobs, the other jobs are stopped
09:00 < donCams> the other jobs shouldn't wait for that huge query and should continue
09:00 < Siyfion> sinclair|node: Well... I'm pretty certain a lot of people would disagree. But I agree that Apple isn't to everyones liking
09:00 < sinclair|node> ningu: i need your help, i have just started using node sockets
09:00 < donCams> any idea?
09:00 < aandy> donCams: which is blocking, your code or your db?
09:00 < ningu> sinclair|node: ok, well I dunno what you're trying to do but you could pastebin the code or whatever
09:00 < Siyfion> sinclair|node: Personally I think MS just committed suicide with W8, Apple is too restrictive, Linux / Unix is where it's at.. ;)
09:00 < ningu> otehrs here know sockets as well
09:01 < Siyfion> sinclair|node: Are you using Socket.io?
09:01 < ningu> Siyfion: what's wrong with windows 8? I haven't used it, so...
09:01 < sinclair|node> Siyfion: nope
09:01 < geNAZt> Siyfion: look at windows 8.1 :D
09:01 < aandy> some db's have specific background type queries, e.g. postgres, or mongo (and other's i'm sure)
09:01 < Siyfion> Windows 8 is fast... but my god I hate what they've done asthetically
09:02 < ningu> donCams: are you trying to run two simultaneous queries in one node process?
09:02 < ningu> donCams: if so, you need to use a connection pool
09:02 < sinclair|node> ningu: i am writing a FTP client, but i am having some problems understanding the behavior of node sockets
09:02 < Siyfion> and instead of fixing it in 8.1, they are spending 8 months to release a "button" that does nothing more than your windows key currently does.
09:02 < donCams> ningu, connection pool? [noob here]
09:02 < Siyfion> sinclair|node: So you're planning on doing it all low-level?
09:02 < geNAZt> Siyfion, true :D
09:02 < aandy> donCams: which database do you use?
09:02 < ningu> donCams: yes, i.e. you need to tell the postgres (or whatever) client to maintain multiple connections to the db so you can do multiple queries at once
09:02 < donCams> mysql
09:03 < Siyfion> geNAZt: If Linux had DirectX support, I'd wipe Windows off everything in a flash.
09:03 < sinclair|node> Siyfion: yeah, kinda, im not keen on the existing FTP projects as i don't want to keep state
09:03 < sinclair|node> Siyfion: PASV mode ftw
09:03 < Siyfion> sinclair|node: Okay... 
09:03 < ningu> donCams: see "pooling connections" on https://github.com/felixge/node-mysql
09:03 < aandy> donCams: in your new Sequilize(), add pool: { maxConnections: 5, maxIdleTime: 30 } to options
09:03 < sinclair|node> ok, so, i throw commands at the server, and i get responses back on the "data" event
09:04 < aandy> (or whichever values fit your setup)
09:04 < ningu> donCams: oh, right, sequelize does it for you, duh
09:04 < sinclair|node> the problem is, sometimes the NodeBuffer is null
09:04 < ningu> as aandy said
09:04 < sinclair|node> ningu: what i really want tho is to be able to read the entirety of a message (not chunked)
09:04 < aandy> but still, i don't know if mysql blocks. it shouldn't, but i haven't tested :)
09:04 < Siyfion> sinclair|node: I don't have any experience except with Socket.io...
09:04 < donCams> aandy, on the configuration? ok. will try that
09:05 < sinclair|node> Siyfion: im not using socket.io
09:05 < Siyfion> sinclair|node: I know! Hence I'm not much help ;P
09:05 < donCams> this is on define?
09:05 < ningu> sinclair|node: it's been forever since I did FTP, but iirc server/client don't send FIN when the command is done, right? it's all newline-delimited?
09:05 < Siyfion> sinclair|node: Effectively you want it to work *not* like a stream?
09:05 < aandy> donCams: yes, the options object (fourth parameter). see http://www.sequelizejs.com/documentation for an example under Options
09:06 < sinclair|node> ningu: something like that, but the problem isn't FTP related, its more, if i get a FTP response from the server, how do i ensure i get the entirety of the message, and not some buffered chunk
09:06 < donCams> ok let me try
09:06 < ningu> sinclair|node: the general node pattern is to listen on 'data' until the stream emits 'end'
09:06 < ningu> and you concat all of the data pieces together if you need the whole thing
09:06 < Siyfion> ningu: ie. A read stream
09:06 < ningu> there are filters for streams that will give you one line at a time
09:07 < sinclair|node> ningu: right, i have seen this mind you, however, how do i get this on a socket?
09:07 < sinclair|node> ningu: by default, the socket doesn't end() once its sent a message
09:07 < ningu> sockets emit 'end' when the other side sends a TCP FIN
09:07 < Siyfion> sinclair|node: Like the readStream: http://nodejs.org/api/stream.html#stream_event_end
09:08 < sinclair|node> Siyfion: right
09:08 < ningu> if FTP servers don't do that, then you need to answer the question of how, in general, you know when an FTP server's response is complete
09:08 < sinclair|node> ningu: i assume that the message would be terminated with a '\0'
09:08 < Siyfion> Which... I'm guessing would mean inspecting the stream for a termination string / char
09:09 < sinclair|node> ningu: i think i just need to play around a bit
09:09 < Siyfion> sinclair|node: first see if it does emit and end event
09:09 < Siyfion> *an
09:11 < sinclair|node> Siyfion: it doesn't
09:11 < sinclair|node> Siyfion: in the context of a net.Socket, the end() event only happens when the connection is terminated, not the message
09:11 < Siyfion> sinclair|node: Ah I see...
09:12 < Siyfion> sinclair|node: Yeah, it's just going to have to be through inspection then
09:12 < sinclair|node> Siyfion: i need a MemoryStream
09:12 < ningu> from rfc 959: "The FTP uses the Telnet protocol on the control connection."
09:12 < sinclair|node> var memorystream = new MemoryStream();
09:13 < sinclair|node> readstream.pipe(memorystream);
09:15 < romenov> hi, I'm doing the following: http://pastebin.com/uQjJMLej , is there any way that I can use async js to wait for every save to be completed so that I can then send a response.json? :/
09:15 < sinclair|node> ningu: on the outset, i just want to have ftp.command("PASV", function (response) {}); <--
09:15 < sinclair|node> ningu: i will have a play around, its how people roll on node
09:15 < ningu> well, I think you should look into something that takes treams and emits 'line' events
09:15 < ningu> streams
09:16 < ningu> romenov: async.each
09:16 < ningu> https://github.com/caolan/async/
09:16 < jesusabdullah> there's a module that splits streams
09:16 < jesusabdullah> sub uses it for something one sec
09:17 < jesusabdullah> https://github.com/dominictarr/split
09:17 < jesusabdullah> this guy
09:17 < jesusabdullah> sinclair|node: that might help ^^
09:17 < jesusabdullah> ningu: you too ^^^
09:18 < donCams> aandy, it's not working as expected. should i have each job a new connection instead of using a single connection?
09:18 < ningu> donCams: not entirely sure how your control flow works, but basically you can only have one query running at a time per connection
09:18 < sinclair|node> jesusabdullah: i will take a look
09:19 < donCams> i have a model file. that's where I initiate the connection (new Sequelize())
09:19 < ningu> if it's a separate node process it will make a separate connection
09:20 < ningu> within a single node process you specify the number of connections you want in the connection pool parameter
09:20 < donCams> it's one node process
09:26 < spots> hi
09:26 < spots> how can i 'execute' escape sequences in a string?
09:26 < ningu> eh?
09:26 < ningu> what do you mean?
09:27 < spots> i have a string from a website and its 'foo\nbar\nbaz'
09:27 < spots> and i need foo<newline>bar<newline>baz'
09:27 < ningu> I suppose you could do JSON.parse(str)
09:27 < donCams> thanks guys :)
09:28 < ningu> but if you want it to just be for newlines, not sure
09:28 < ningu> I would probably just do a regexp replace, there might be a module for it
09:28 < geNAZt> >> JSON.parse('foo\nbar\nbaz');
09:28 < purr> geNAZt: SyntaxError: Unexpected token o
09:28 < ningu> >> JSON.parse('"foo\nbar\nbaz"')
09:28 < purr> ningu: SyntaxError: Unexpected token 
09:28 < ningu> >> JSON.parse('"foo\\nbar\\nbaz"')
09:28 < purr> ningu: (string) 'foo\nbar\nbaz'
09:29 < ningu> >> JSON.parse('foo\\nbar\\nbaz')
09:29 < purr> ningu: SyntaxError: Unexpected token o
09:29 < ningu> so you need to quote it and you should be good
09:29 < ningu> JSON.parse('"' + str + '"')
09:29 < donCams> string.replace
09:30 < geNAZt> >> "foo\nbar\nbaz" === 'foo\nbar\nbaz'
09:30 < purr> geNAZt: (boolean) true
09:30 < geNAZt> looool
09:31 < donCams> >> "foo\nbar\nbaz".replace(/\r\n/g, "<newline>");
09:31 < purr> donCams: (string) 'foo\nbar\nbaz'
09:31 < spots> >> 1/0
09:31 < purr> spots: (number) Infinity
09:31 < donCams> wtf
09:31 < donCams> >> "foo\nbar\nbaz".replace(/\n/g, "<newline>");
09:31 < purr> donCams: (string) 'foo<newline>bar<newline>baz'
09:31 < donCams> lol what happened
09:31 < spots> \n|\r
09:31 < spots> >> "foo\nbar\nbaz".replace(/\r|\n/g, "<newline>");
09:31 < purr> spots: (string) 'foo<newline>bar<newline>baz'
09:31 < donCams> that's it
09:32 < spots> but i also have quotes and tabs
09:33 < donCams> >> "foo\nbar\nbaz'''".replace(/\r|\n|\t|^[a-zA-Z0-9]*/g, "<newline>");
09:33 < purr> donCams: (string) "<newline><newline>bar<newline>baz'''"
09:34 < donCams> >> "foo\nbar\nbaz'''".replace(/\r|\n|\t|[^a-zA-Z0-9]*/g, "<newline>");
09:34 < purr> donCams: (string) '<newline>f<newline>o<newline>o<newline><newline>b<newline>a<newline>r<newline><newline>b<newline>a<newline>z<newline><newline>'
09:34 < donCams> >> "foo\nbar\nbaz'''".replace(/\r|\n|\t|[^a-zA-Z0-9]+/g, "<newline>");
09:34 < purr> donCams: (string) 'foo<newline>bar<newline>baz<newline>'
09:35 < donCams> sorry guys. this is fun
09:35 < spots> hmm i could just remove \. (backslash and the following letter with a space
09:36 < donCams> sometimes a series of replace is needed. you can't do it in one regex. mostly
09:36 < spots> >> "foo\nbar\nbaz\"\r\t".replace(/\./g, "<newline>");
09:36 < purr> spots: (string) 'foo\nbar\nbaz"\r\t'
09:37 < spots> >> "foo\nbar\nbaz\"\r\t".replace(/\[nr"'t]/g, " ");
09:37 < purr> spots: (string) 'foo\nbar\nbaz"\r\t'
09:37 < geNAZt> >> "foo\nbar\nbaz\"\r\t".replace(/\\./g, "<newline>");
09:37 < purr> geNAZt: (string) 'foo\nbar\nbaz"\r\t'
09:38 < donCams> >> "foo\nbar\nbaz\"\r\t".replace(/[\r\n\t\"\']+/g, "<newline>");
09:38 < purr> donCams: (string) 'foo<newline>bar<newline>baz<newline>'
09:38 < donCams> >> "foo\nbar\nbaz\"\r\t".replace(/[\r\n\t\"\']+/g, " ");
09:38 < purr> donCams: (string) 'foo bar baz '
09:38 < donCams> >> "foo\nbar\nbaz\"\r\t".replace(/[\r\n\t\"\']+/g, " ").replace(/\s+/g, " ");
09:38 < purr> donCams: (string) 'foo bar baz '
09:39 < donCams> >> "foo\nbar\nbaz\"\r\t".replace(/[\r\n\t\"\']+/g, " ").replace(/\s+$/g, " ");
09:39 < purr> donCams: (string) 'foo bar baz '
09:39 < donCams> >> "foo\nbar\nbaz\"\r\t".replace(/[\r\n\t\"\']+/g, " ").replace(/\s+$/g, "");
09:39 < purr> donCams: (string) 'foo bar baz'
09:39 < donCams> ok. i'm out. i seem to be spamming
09:40 < donCams> one more
09:40 < donCams> >> "foo\nbar\nbaz\"\r\t".replace(/[\r\n\t\"\']+/g, " ").replace(/\s+$/g, "").split(" ");
09:40 < purr> donCams: (object) ['foo', 'bar', 'baz']
09:40 < donCams> oh cool.
09:41 < geNAZt> which has side effects
09:41 < geNAZt> each test gets split up :D
09:41 < geNAZt> text*
09:42 < donCams> >> /[^\r\n\t\"\']+/g.exec("foo\nbar\nbaz\"\r\t")
09:42 < purr> donCams: (object) ['foo']
09:42 < gdbz> donCams: debuggex.com 
09:42 < gdbz> :)
09:42 < donCams> thanks gdbz 
09:51 < px1> is express supposed to magically make main.less into main.css
09:51 < px1> i hate magic :(
09:51 < px1> never seems to work for me
09:52 < ningu> it is not magic
09:52 < ningu> you have to app.use() the less compiler
09:52 < px1> like this right app.use(require('less-middleware')({src: __dirname + '/public', compress: true, debug: true}));
09:52 < ningu> looks ok
09:53 < donCams> npm install less
09:54 < donCams> hehe
09:54 < px1> so how does less know where the main.less is
09:54 < ningu> because you passed the src directory to it
09:54 < px1> it looks in all public dirs?
09:55 < px1> it's in /public/styles/main.less
09:55 < ningu> it looks in public/ inside your app
09:55 < ningu> that should be ok
09:56 < px1> so now when I GET /css/main.css that is supposed to compile less to main.css on the fly?
09:56 < ningu> no, you have to GET /styles/main.css
09:56 < px1> aha
09:56 < px1> thx
10:05 < AAA_awright> Is there any way to enforce per-request RAM limits?
10:06 < AAA_awright> Any convienent way, at least, besides manually checking the length of variables/storage associated with a request
10:12 < luminous> AAA_awright: that sounds difficult to enforce
10:12 < luminous> easier to do per process
10:12 < luminous> AAA_awright: what are you REALLY trying to do?
10:12 < AAA_awright> luminous: But it's clear why a per-request memory limit is necessary, though?
10:12 < luminous> nope
10:13 < luminous> that's why i ask what you are really trying to do
10:13 < AAA_awright> luminous: What stops me from flooding your program with data until OOM-killer cleans it?
10:13 < ningu> who are "you"?
10:14 < AAA_awright> It's a disproportionately common attack on Node.js applications
10:14 < luminous> AAA_awright: why would a per-process limit not help?
10:14 < sinclair|node> ningu: hi
10:14 < ningu> hello
10:14 < AAA_awright> luminous: What would a per-process limit enforce? The entire process would have to die
10:15 < AAA_awright> That defeats the point
10:15 < luminous> AAA_awright: yep
10:15 < luminous> why?
10:15 < sinclair|node> ningu: i wish more people would try this out https://npmjs.org/package/typescript.api
10:15 < luminous> you run node with a process manager
10:15 < luminous> you make sure it comes back up
10:15 < AAA_awright> luminous: By design starting a process is the most expensive part of a Node.js application...
10:15 < sinclair|node> ningu: ive had 15 downloads in 2 weeks
10:15 < ningu> sinclair|node: well, I won't be using typescript any time soon
10:15 < AAA_awright> You don't want that to happen, it's a denial of service attack
10:15 < luminous> AAA_awright: so no one should use node then?
10:15  * luminous shrugs
10:15 < AAA_awright> luminous: Why do you think I'm asking how to mitigate the attack?
10:15 < AAA_awright> :P
10:16 < sinclair|node> luminous: how would you protect yourself against a DDoS attack otherwise?
10:16 < luminous> AAA_awright: node isn't going to help you solve that
10:16 < ningu> AAA_awright: I assume you are talking about a large http body?
10:16 < luminous> sinclair|node: I didn't ask these questions
10:16 < AAA_awright> ningu: Right, if an HTTP server
10:16 < luminous> but I use firewalls..
10:16 < luminous> good os limits
10:16 < sinclair|node> luminous: who was?
10:16 < luminous> AAA_awright
10:16 < ningu> AAA_awright: I would solve that either with a proxy in front of the app, or in the part of the app that parses the body, I suppose
10:16 < sinclair|node> every web stack is subject to DoS
10:17 < sinclair|node> not limited to node
10:17 < AAA_awright> sinclair|node: That's not a non-generic attack
10:17 < luminous> yea, nginx request limits would help
10:17 < AAA_awright> ningu: That's trivially circumvented, the only thing an attacker has to do is ensure a single process is filled with data in memory, to the point the system runs out
10:18 < luminous> also http://dpaste.de/X4aww/ <<< if anyone is interested. I'm trying to understand why this errors out with: WebSocket is closed before the connection is established. :1 Resource interpreted as Script but transferred with MIME type text/plain:"https://host/portal_registry/stream/socket.io/1/jsonp-polling/Welcome%20to%20socket.io.?t=1368732526939&i=0". socket.io.js:3242 Uncaught SyntaxError: Unexpected identifier Welcome%20to%20socket.io.:1
10:18 < AAA_awright> I could spawn 1000 requests each sending 10M, right, and all of a sudden your process dies because the memory limit doesn't go that high
10:19 < luminous> AAA_awright: you can use nginx to limnit what gets through, per-request. wouldn't this accomplish what you are looking for?
10:19 < ningu> AAA_awright: I guess so, but all of that is best solved with a front-end layer 
10:19 < ningu> firewall, nginx limiting, whatever
10:19 < luminous> as has been repeated several times..
10:20 < ningu> you aren't really supposed to do that job in your node app
10:20 < ningu> you can, I suppose, but it would get messy
10:20 < AAA_awright> But like I demonstrated, that doesn't actually solve any problems
10:20 < ningu> e.g. you could keep a global count of ongoing requests and impose a limit
10:20  * luminous would never put node out on the web without nginx..
10:21 < radiodario> have you guys tried twisted?
10:21 < luminous> AAA_awright: how does that not actually solve any problem?
10:21 < ningu> AAA_awright: you didn't demonstrate it at all, all you said was if the 1000 requests with 10MB get to node it will create a problem
10:21 < ningu> well, what if they never all get there at once?
10:21 < AAA_awright> It's a fully functional HTTP server so that shouldn't be necessarially true
10:21 < donCams> seems like i also need kue for my background processes
10:21 < luminous> you're not making sense AAA_awright 
10:21 < AAA_awright> ningu: Then that defeats the point of using Node.js and an ability to handle 6k concurrent connections
10:22 < luminous> AAA_awright: no it doesnt'
10:22 < luminous> AAA_awright: you are asking for protection
10:22 < luminous> do you want it or not?
10:22 < ningu> AAA_awright: no, it wouldn't limit the total number of connections, just the malevolent ones
10:22 < luminous> stop being silly
10:22 < AAA_awright> ningu: How does one determine the difference?
10:22 < luminous> PER REQUEST LIMITs in NGINX
10:22 < AAA_awright> luminous: The suggestion was to limit the concurrent connections, which defeats the point. The question is on making sure the Node.js process doesn't die.
10:22 < ningu> yeah, or flooding detection from a firewall
10:23 < luminous> or filtering, deep packet inspection/etc
10:23 < luminous> AAA_awright: no, the point was to BLOCK big / bad requests
10:23 < ningu> AAA_awright: well right, my point was you'd basically be re-implementing a firewall or nginx request limits in your node app, which you *could* do but seems a bit silly
10:23 < luminous> AAA_awright: the poitn is, you implement that protection in the frontend layer, NOT node.js
10:23 < AAA_awright> luminous: You can't pre-determine "big/bad" requests
10:24 < luminous> yes you can
10:24 < luminous> your app has limits
10:24 < luminous> should your app allow 10MB uploads?
10:24 < AAA_awright> A normal request looks identical to one that sends 1G of entity body
10:24 < luminous> probably not
10:24 < luminous> AAA_awright: no it doesnt'
10:24 < luminous> it's request body is huge
10:24 < ningu> haha
10:24 < AAA_awright> The difference is the large request keeps going... and going...
10:24 < luminous> and nginx should not let that pass
10:24 < AAA_awright> luminous: By that time it's already on your Node.js process!
10:24 < luminous> no the connetion can be dropped
10:25 < AAA_awright> luminous: Right, how is Nginx supposed to know how much data a request is going to send to Node.js? Future-telling?
10:25 < luminous> AAA_awright: please, go reasearch this stuff yourself
10:25 < luminous> you have been given what you need
10:25 < jamesdotnet_> Yes, an app should allow 10MB uploads
10:25 < AAA_awright> luminous: I'm kind of an expert in this thanks
10:25 < luminous> jamesdotnet_: only if it NEEDS uploads..
10:25 < jamesdotnet_> And if it does, yes, it should
10:25 < luminous> AAA_awright: great, then maybe you should look into nginx's capabilities
10:25 < luminous> and maybe you should do some real-world tests
10:26 < AAA_awright> jamesdotnet_: I can't assume no one will ever need more than 10M though
10:26 < jamesdotnet_> AAA_awright: agreed
10:26 < ningu> AAA_awright: there is a content-length header is there not?
10:26 < luminous> jamesdotnet_: right. my point was that every app has a unique environment, and if you think about it a little, you can come up with reasonable limits and reasonable protection for that which is vulnerable
10:27 < ningu> I would assume nginx could see that and reject it if it's too long, and if the body is longer than the header says it could just truncate it and discard the rest
10:27 < luminous> if you hve nginx proxying, and you set limits, it'll do that, it'll drop the request
10:27 < AAA_awright> ningu: I'm assuming that's already checked for validity, an entity-body that goes beyond the declared length is terminated, etc, nonetheless that's still attackable
10:27 < luminous> "request entity too large" type of thing
10:28 < AAA_awright> luminous: I can't assume everyone will use Nginx, though, and even then, I have to allow massive file uploads
10:28 < ningu> if you don't want to set file upload limits then you should do some sort of throttling
10:28 < ningu> by ip or whatever
10:28 < luminous> why would node/socket.io reply with "Resource interpreted as Script but transferred with MIME typetext/plain:"https://host/portal_registry/stream/socket.io/1/jsonp-polling/Welcome%20to%20socket.io.?t=1368732526939&i=0". socket.io.js:3242 Uncaught SyntaxError: Unexpected identifier Welcome%20to%20socket.io.:1"
10:28 < AAA_awright> Throttling just makes it take a longer period of time -- rather cheap to an attacker
10:29 < ningu> AAA_awright: there must be *some* upper limit though
10:29 < ningu> like, a file upload bigger than your disk
10:29 < luminous> AAA_awright: don't run your massive uploads through a vulnerable node setup? use a different webstack for that bit?
10:29 < px1> can't you just stop listening to data events on a very big POST ?
10:30 < ningu> so you could make it so that the upper limit + throttling will take care of it
10:30 < AAA_awright> luminous: Because of a <script type="application/ecmascript"/> or whatever tag that isn't being sent as the declared media-type, here, it's being sent as text/plain. Browsers are supposed to ignore the response entirely, but most just execute the response as script anyways.
10:31 < luminous> AAA_awright: http://dpaste.de/X4aww/
10:31 < simong> AAA_awright: FWIW, nginx buffers uploads to disk before proxying the entire thing upstream
10:31 < luminous> AAA_awright: I'm not sure I follow how I've got that screwed up somewhere
10:31 < simong> and it will check if the upload is larger then the predefined limit
10:31 < AAA_awright> ningu: I can't even assume that, I might not be storing the entity body on disk at all, it might be an ongoing calculation/summary, or it might be going back out to another server whose disk capacity is practically unlimited.
10:31 < luminous> simong: yes
10:31 < luminous> if it is that big
10:32 < AAA_awright> luminous: Also I'd see about turning off JSON-P which should be considered extremely dangerous
10:32 < luminous> AAA_awright: so if you want to get down and dirty, write some horrific js to do your memory management
10:32 < luminous> AAA_awright: eg, limit the transports?
10:32 < sinclair|node> in terms of npm modules, is 15 in downloads of a package in 2 weeks good to bad?
10:32 < luminous> I'm not sure why it is using jsonp here
10:33  * sinclair|node can't even give his source code away
10:33 < luminous> hah
10:33 < luminous> maybe no one knows about how useful it is?
10:33 < luminous> if you want it reviewed or looked at, post to a place like reddit/hn?
10:33 < sinclair|node> luminous: https://npmjs.org/package/typescript.api
10:34 < sinclair|node> i worked damn hard on that
10:34 < luminous> :)
10:34 < sinclair|node> luminous: its written professionally
10:34 < luminous> AAA_awright: https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO <<< why is jsonp recommended for production?
10:34 < luminous> sinclair|node: congrats :)
10:35 < luminous> maybe you are available to help this newb?
10:35 < luminous> :P
10:35 < sinclair|node> luminous: what newb?
10:35 < luminous> I'm in over my head with this error
10:35  * luminous raises hand
10:35 < luminous> this on
10:35 < luminous> *one
10:35 < sinclair|node> luminous: sorry, im new to nodejs
10:35 < AAA_awright> luminous: It is'nt?
10:35 < _amro_> hi all
10:35 < AAA_awright> It's almost impossible to implement safely, and there's far superior alternatives
10:35 < greelgorke_work> luminous: jsonp polling is the last in the list, so its least recomended 
10:36 < luminous> ok, so I can remove it
10:36 < AAA_awright> The fact it's available at all is the security risk, though
10:36 < sinclair|node> luminous: i am yet to use socket.io for anything, i find myself continuously writing low level modules as i am unhappy with those in npm
10:36 < luminous> I don't see how that will solve this problem?
10:36 < luminous> AAA_awright: right, which is why I ask why their docs recommend it
10:37 < AAA_awright> That problem no, but security conserns come first
10:37 < luminous> sinclair|node: understandable
10:37 < luminous> AAA_awright: agreed
10:37  * luminous setting transports explicitly
10:37 < sinclair|node> luminous: i have briefly used socket.io, but not using any of the backend message queue stuff
10:37 < _amro_> noob question; just installed nodejs on WinXP using the MSI installer. all works ok. But when i tried running the REPL from Cygwin bash shell i get an error: http://pastebin.com/WWRnKLyn
10:38 < AAA_awright> Actually it looks like it might get rid of the problem, if only because that's the only thing that used it
10:38 < ningu> _amro_: you are just doing "node"?
10:38 < _amro_> yes
10:38 < ningu> hmm
10:38 < _amro_> and the PATH contains the correct stuff
10:38 < ningu> I dunno if the windows version works in cygwin or not
10:39 < ningu> but I don't see why not
10:39 < ningu> if I were in cygwin I might just build it there
10:39 < greelgorke_work> _amro_: http://stackoverflow.com/questions/10043177/node-js-cygwin-not-supported
10:39 < luminous> AAA_awright: thanks for the confirmation.. I'm updating retesting now..
10:39 < luminous> will report back shortly
10:40 < ningu> aha, no cygwin support
10:40 < _amro_> I know they stopped supporting a native Cygwin install after 0.4.xx something, but I'm just invoking node.exe from bash shell
10:40 < ningu> yeah
10:40 < ningu> I'm not sure
10:40 < _amro_> so im not compiling from sources
10:40 < _amro_> just using the windows binaries
10:40 < _amro_> from a cygwin shell
10:41 < greelgorke_work> try cmd instead, see if it works there
10:41 < greelgorke_work> if it does, then kick sigwin
10:41 < _amro_> i know i works in cmd
10:41 < greelgorke_work> cygwin*
10:41 < ningu> I'm not really sure why it's creating a socket connection anyway
10:41 < timkuijsten> when writing data to a crypto.createHash object, does the size of the object grow significantly? i want to stream a lot of data to it..
10:41 < _amro_> it works in cmd.exe, I was just asking why the error in bash shell..
10:41 < luminous> do you need to set the transports on BOTH the client and server?
10:41 < luminous> or just define on the server as what is available?
10:42 < greelgorke_work> only on server i guess
10:42 < greelgorke_work> but i don't know for sure :D
10:42 < ningu> luminous: just on the server I think, but you can set it on the client too so it won't try transports that aren't available and fail
10:42 < ningu> which would just be a waste
10:43 < luminous> hrm, I still see jsonp-polling in the url, after updating and restarting node ><
10:43 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:44 < rynkan> visual studio is awesome fore developing nodejs apps :)
10:44 < luminous> but maybe uwsgi didn't kill node properly
10:44 < luminous> rynkan: I don't think I could ever use windows as a development host
10:46 < luminous> same problem with jsonp-polling still happening >.<
10:46 < _amro_> is there a way to tell node REPL to show verbose output when its starting? sorta like: python -v
10:47 < _amro_> an environment variable maybe?
10:48 < luminous> what's weird is that when my client connects, I immediately get a "WebSocket is closed before the connection is established." error, but then it takes a while to get the rest of the MIME type error
10:49 < luminous> theoretically.. this should limit the client to websockets only, no? io.set('transports', [ 'websocket', ]);
10:51 < luminous> I'm even setting this in the client, but still only see jsonp used in chromium: 				var socket = io.connect(stream_url, {'resource': 'portal_registry/stream/socket.io', 'transports': [ 'websocket', ] });
10:51 < luminous> why is socket.io ignoring the explicit transport
10:51 < greelgorke_work> open an issue then 
10:52 < greelgorke_work> you could also try engine.io :)
10:52 < luminous> I'm not yet convinced I'm not the problem
10:52 < greelgorke_work> or sockjs
10:52  * luminous ddg's
10:53 < luminous> hmmmm
10:55 < luminous> looks pretty easy to swap socket.io and engine.io
10:55 < sinclair|node> i gotta say, Visual Studio TS editing is stupid when it comes to typing arrow functions
10:57 < greelgorke> luminous: engine.io in fact socket.io with other strategies 
10:57 < greelgorke> lunch
10:57 < luminous> parsed = $.parseJSON(data); <<< I have this in my client.. would this trigger jsonp for the transport? doesn't really make sense to me to do so, but i don't understand why the explicit websocket transport is being ignored
11:01 < _amro_> ningu: ok i got something. when i run node.exe inside cygwin MinTTY shell it errors, but not when i run in the regular cygwin shell...
11:01 < _amro_> thats weird, why would it affect anything what shell im using?
11:02 < luminous> anything in cygwin is rough
11:03 < luminous> more trouble than it is worth, if you ask me
11:03 < _amro_> maybe
11:03 < _amro_> but you gotta admit it does come in handy
11:04 < luminous> no
11:04 < luminous> I don't ever use it
11:04 < luminous> I just boot usb live distro when I would have
11:04 < _amro_> anyway i dont think its a cygwin thing in this case.. its something to do with MinTTY
11:05 < Fuzzy> Any idea how to fix the issue, that every browser freeze for a certain time when you read to many files with file reader at once? I thought about reading them one after another but it seems to tricky to be a good solution 
11:07 < sinclair|node> http://pastebin.com/25SnmrRP <-- yay, callbacks
11:08 < sinclair|node> ningu: got it working as it should, by fluffing / chopping changing callback delegates behind the scenes, its quite tidy
11:09 < sinclair|node> ningu: just need to set up PASV mode
11:14 < Fusl> hey...
11:16 < Fusl> if i want to write a function into another file to have to require it, how must the file look?
11:17 < Fusl> for example i have function test(x) { return x+1; }; in my main script... should the file look like function test(x) { return x+1; }; ?
11:17 < _amro_> Fusl: module.exports = function() {...}
11:17 < Fusl> ah, thanks
11:19 < booyaa|foo> anyone else here using azure's websites to deploy node apps?
11:40 < Siyfion> booyaa|foo: I was a while ago..
11:41 < Siyfion> booyaa|foo: Had a few issues, most of which I managed to resolve okay after I'd already left.
11:46 < Fusl> dafuq?
11:46 < Fusl> Error: Cannot find module 'base64_encode'
11:46 < Fusl> but: root@resolver1:/opt/or# ls
11:46 < Fusl> base64_encode.js  cidrange.js  ip2long.js  long2ip.js  mt_rand.js  node.js  runp.js  shuffle.js
11:57 < leichtgewicht> Say I use AWS ElasticBeanstalk to deploy my ultra performant NodeJS application ... How do I persist these sessions best?
11:57 < leichtgewicht> I am thinking: AWS DynamoDB
12:00 < kaushal> Hi
12:00 < RLa> ultra performant means you should keep in session as little data as possible
12:01 < kaushal> is there a irc channel for statsd application or can i discuss it here?
12:01 < leichtgewicht> RLa: I will only need the autorization data.
12:02 < leichtgewicht> Yet: I need to persist this data at some point (and recreate that in case it didn't exist)
12:02 < RLa> encrypted uid in a cookie?
12:02 < RLa> for bigger data, maybe redis, amazon offers it, doesn't it?
12:03 < RLa> if you use express, it should already have redis-backed session storage support
12:03 < leichtgewicht> DynamoDB is somehow like Redis.
12:04 < leichtgewicht> If I get it right.
12:05 < leichtgewicht> But if I want a Redis server then I will need to set it up and maintain it myself.
12:05 < leichtgewicht> (and guarantee that I don't screw up :) )
12:11 < leichtgewicht> But I never used DynamoDB in Node.JS I wonder if someone has experience using it ...
12:12 < leichtgewicht> Or if I should better fallback on Amazon RDS
12:12 < leichtgewicht> (mysql basically)
12:19 < spion> anyone using https://github.com/google/traceur-compiler ?
12:19 < swaagie> isaacbw, yt? is it known that only 106/141 test run for https://github.com/isaacs/node-tar or am I failing here?
12:32 < vramana> I installed node from it's source on ubuntu If there is a new release how to update  my version node??
12:34 < bnoordhuis> vramana: just run `make install` again
12:34 < bnoordhuis> it copies over the old version, provided you ran configure with the same --prefix
12:35 < vramana> bnoordhuis: Thanks 
12:36 < vramana> I ran make test in the node-v0.10.6 folder It shows some errors Should I worry about them
12:37 < leichtgewicht> vramana depends on your level of paranoia
12:42 < leichtgewicht> Something is surely broken, but will you use that part?
12:56 < TRUTH69> who's inhere
12:56 < TRUTH69> rather who's awake
12:56 < dypsilon> TRUTH69, do you do a survey or something?
12:58 < TRUTH69> nah
12:58 < TRUTH69> any ladies inhere for a chat
12:59 < greelgorke> thats a ban cause
12:59 < dypsilon> TRUTH69, i have a question for you: what do you think this channel is about?
13:00 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
13:00 < TRUTH69> do I look like I care
13:00 -!- TRUTH69 was kicked from #Node.js by bnoordhuis [TRUTH69]
13:00 < dypsilon> not anymore
13:00 < sbarow> was waiting for that.
13:01 -!- mode/#Node.js [+b *!*TRUTH69@69.41.182.*] by bnoordhuis
13:01 -!- TRUTH69 was kicked from #Node.js by bnoordhuis [TRUTH69]
13:01 < adrianlang> Thanks bnoordhuis
13:01 <@bnoordhuis> sometimes they don't get it the first time around :/
13:03 < njrD> lmfao I just read that
13:03 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
13:06 < spion> is it possible to somehow get the user and group ids of a unix socket client?
13:07 < greelgorke> spion: does that help you http://nodejs.org/api/fs.html#fs_class_fs_stats ?
13:09 < spion> greelgorke, ah, so I would use fstatSync for that on the socket handle?
13:09 < spion> I'll try it
13:10 < greelgorke> on a file descriptor, yes
13:10 < bnoordhuis> spion: do you mean the client's credentials? if yes, the answer is no
13:11 < spion> yes, the client's credentials
13:11 < spion> it would be immensely useful for writing multi-user services and command line tools to interact with those services
13:12 < bnoordhuis> spion: you could do it through a native add-on but node core doesn't support it
13:12 < spion> I wonder how would I do it with a native addon? the file descriptor is not exposed
13:13 < bnoordhuis> spion: not officially but it's available through the conn._handle.fd property
13:13 < spion> okay, I'll look at that. thanks.
13:20 < geNAZt> hi
13:20 < geNAZt> little question, are events processed in order ? is this guaranteed ?
13:23 < bnoordhuis> geNAZt: define 'events' and 'order'?
13:25 < geNAZt> eventname 'line'
13:25 < geNAZt> and i push three events, 1,2,3
13:25 < geNAZt> is it safe to rely that 1 is the first, 2 the second and so on ?
13:25 < bnoordhuis> are you talking about instances of EventEmitter?
13:25 < geNAZt> yes
13:25 < bnoordhuis> EventEmitter is synchronous so yes
13:26 < geNAZt> thanks
13:29 < geNAZt> has someone used the bundledDependencies for npm ?
13:33 < leichtgewicht> no, what is it used for?
13:33 < geNAZt> well the docs says that you can bundle packages with it in your own package
13:34 < geNAZt> i have a change in a package x which i like to bundle into my package
13:34 < geNAZt> but i dont know how it works
13:35 < AvianFlu> O HEY EVERYBODY
13:35 < geNAZt> hi mr. caps
13:35 < jamieschena> hello!
13:35 < cmw244> hi
13:35 < booyaa|foo> OHAI AVIANFLU
13:36 < booyaa|foo> geNAZt: is it not working for you?
13:36 < geNAZt> well i dont know how to write the package json
13:36 < geNAZt> i have to write a normal dep entry
13:36 < geNAZt> and the bundle ?
13:37 < geNAZt> and i have to lay the package into the node_modules folder under its package name or what ?
13:37 < booyaa|foo> ah i wonder if bundleDep given it might be a fork should take git urls one sec
13:37 < booyaa|foo> geNAZt: Packages listed in bundledDependencies or bundleDependencies will now remain locked into the version contained in the node_modules/ folder.
13:37 < booyaa|foo> http://package.json.nodejitsu.com/
13:37 < geNAZt> yes i know
13:38 < geNAZt> but does it load the locked version from npm ?
13:38 < booyaa|foo> looks like they follow the same value format as deps
13:38 < geNAZt> or do i have to lay one version into the node_modules 
13:38 < booyaa|foo> i think if you point to a git url it negates versions
13:38 < booyaa|foo> ah oh okay
13:38 < Arsani> hello there
13:38 < geNAZt> so "passport-oauth": "2.5.1" in deps
13:38 < geNAZt> and in bundle "passport-oauth"
13:39 < geNAZt> will lead to the dep system to load my verion ?
13:39 < geNAZt> version*
13:39 < geNAZt> and not to install one from npm ?
13:40 < booyaa|foo> i think i see your problem, you can have that bundled dep in node_modules, but most repos have node_modules in .gitignore
13:40 < geNAZt> well thats okay
13:40 < geNAZt> its an private app located on a provate git
13:40 < geNAZt> currently we load all the node_modules onto the git
13:41 < Kmanc> hackademers, hey
13:42 < geNAZt> it would be nice if npm has an merge tool
13:42 < geNAZt> but you cant have anything :D
13:42 < booyaa|foo> geNAZt: there's  lot of talk about this on stackoverflow
13:42 < booyaa|foo> http://stackoverflow.com/questions/11207638/advantages-of-bundleddependencies-over-normal-dependencies-in-npm
13:42 < booyaa|foo> http://stackoverflow.com/questions/9395006/do-bundled-dependencies-pull-in-their-own-dependencies-from-their-package-json
13:43 < booyaa|foo> i'm gonna have to play with this tonight
13:43 < Dukecodes> where's the party at?
13:43 < geNAZt> well i gonna try it
13:43 < booyaa|foo> i see why you'd want it specially with rapidly changing modules, ut would've thought specifying the right semver filter would save most people.oh  well
13:44 < Kmanc> behind you duke
13:44 < sinclair|nz> would anyone be interested in a FTP client whose API looks like this ? http://pastebin.com/kneXygyY
13:44 < sinclair|nz> only node could make something look this way
13:44 < geNAZt> booyaa|foo, well i have a change to the oauth passport module, because the oauth endpoint is not fully oauth valid
13:44 < geNAZt> i have to change one line (add one line)
13:45 < geNAZt> into the module (a merge system would be nice here) :D
13:45 < Dukecodes> where's the party?
13:45 < bluntz> business in the front party in the back
13:45 < foofoobar> How can I code this better? https://gist.github.com/anonymous/420fca456eeda72c8348
13:45 < booyaa|foo> geNAZt: gotcha, can't you just specify your own fork of that module in deps?
13:46 < foofoobar> I have a load time of 56ms with this
13:46 < geNAZt> well i want to bundle it to have a minimum overhead due to this
13:46 < geNAZt> i dont want to open a git repo only for one line :D
13:46 < booyaa|foo> okay so sorry starting to sink in now :D
13:46 < sinclair|nz> foofoobar: don't use forEach
13:47 < sinclair|nz> parseInt is expensive
13:47 < geNAZt> but not so expensive that it should be 56ms :D
13:47 < foofoobar> sinclair|nz, so a for() is better than .forEach ?
13:48 < geNAZt> a for is faster as forEach
13:48 < geNAZt> but it doesnt have a scope in it
13:48 < foofoobar> geNAZt, I fuss the tempting also needs a few ms
13:48 < foofoobar> *guess
13:48 < foofoobar> *templating
13:48 < foofoobar> sorry, auto correct..
13:48 < geNAZt> what template engine do you use ?
13:48 < sinclair|nz> parseInt is slow
13:48 < foofoobar> EJS
13:48 < foofoobar> EJS with partials
13:48 < geNAZt> well you can messure it
13:48 < foofoobar> geNAZt, how ?
13:49 < geNAZt> var start = process.hrtime(); in top of line 2
13:49 < sinclair|nz> parseInt(req.query['categories']) <-- does that make sense, it looks crap tastic to me as i wonder why you have a integer hashed under a name called categories 
13:49 < booyaa|foo> sinclair|nz: if you shouldn't use parseInt what's the alternative to convert to int?
13:49 < geNAZt> and console.log(process.hrtime(start)[1] + " ns"); in top of line 16
13:49 < foofoobar> sinclair|nz, I pass a list of categories like "categories=1,5,6
13:49 < adrianlang> sinclair|nz: Number
13:50 < foofoobar> geNAZt, one moment
13:51 < foofoobar> 128537ns
13:51 < geNAZt> ok
13:51 < sinclair|nz> foofoobar: how can i code this better ? http://pastebin.com/Kyd4pjxZ
13:52 < foofoobar> sinclair|nz, ? I don't know c# :D
13:52 < sinclair|nz> foofoobar: its not C#
13:53 < foofoobar> And how should this help me?
13:53 < sinclair|nz> foofoobar: i was asking how i could code it better?
13:53 < foofoobar> sinclair|nz, i dont know
13:54 < foofoobar> geNAZt, so 0.128537ms for the search
13:54 < foofoobar> so I will measure the rendering now
13:54 < sinclair|nz> foofoobar: implementation looks like this http://pastebin.com/kneXygyY
13:54 < zomg> sinclair|nz: you could start by not having an empty line after each line
13:54 < zomg> =)
13:54 < sinclair|nz> zomg: yeah, maybe, but it helps me wade though the fluff
13:55 < foofoobar> geNAZt, 22ms for the rendering
13:55 < zomg> I would imagine it to be possible to increase line-height in sane editors
13:55 < geNAZt> this version with a for "could" be faster: http://hastebin.com/dofelixuve.js
13:55 < foofoobar> thats a lot, right?
13:55 < zomg> tbh hard to say otherwise since I don't know typescript that well
13:55  * sinclair|nz prefers to follow his own coding standards, which are gears towards people with bad vision, like himself
13:55 < geNAZt> foofoobar, depends on what the template does :D
13:55 < sinclair|nz> zomg: its basically just JS 
13:56 < foofoobar> geNAZt, a layout which includes two partials and displays a single list of 10 entries
13:56 < geNAZt> then yes :D
13:56 < applekor> hiya hackademy people, I'm over in #hackademy if you want to join so we don't bother all this nice people with our ineptitude
13:56 < foofoobar> thats bad.. Maybe the partial including is slow
13:56 < foofoobar> geNAZt, is it a better ideas to send JSON to the client and let the client render it?
13:56 < geNAZt> well you can try it out
13:56 < geNAZt> is it a open and searchable application ?
13:57 < geNAZt> or is it a private one ?
13:57 < sinclair|nz> foofoobar: yes, send json to the client, and have the client render it
13:57 < levilewis> I agree
13:57 < zomg> sinclair|nz: it looks reasonable as far as I can tell, however I think you're lacking error handling
13:57 < foofoobar> geNAZt, I'm still at the very beginning
13:57 < geNAZt> is your goal to release the app to the world wide web
13:58 < sinclair|nz> foofoobar: the only downside to this is SEO related things,
13:58 < foofoobar> yes
13:58 < geNAZt> or is the goal to install it inside a internal network ?
13:58 < foofoobar> www
13:58 < sinclair|nz> zomg: who needs error handling :P
13:58 < geNAZt> so you want things like google to find it ?
13:58 < foofoobar> I does not have to
13:58 < zomg> sinclair|nz: people with real programs ;)
13:58 < foofoobar> It's like .. ebay
13:58 < foofoobar> I do not need to reference all entries
13:58 < foofoobar> because after some days they are irrelevant
13:58 < geNAZt> well ebay doesnt have client side rendering :D
13:59 < geNAZt> because of this 
13:59 < foofoobar> The entries does not need to be indexed by a SE
13:59 < sinclair|nz> zomg: i have real programs, and i have no idea how to elegantly deal with errors in JS with its callback soup factor cranked up to 11 on the dial
13:59 < geNAZt> well: client side rendering doesnt get crawled by google or so
13:59 < geNAZt> so it never would appear on a searchengine
14:00 < foofoobar> I know. But is it faster for the whole displaying process?
14:00 < Havvy> sinclair|nz: You be joking, right?
14:00 < sinclair|nz> Havvy: not at all
14:00 < geNAZt> foofoobar, yes
14:00 < foofoobar> A page which is rendered by a server vs a more or less static page where parts of the page are retrieved by json
14:00 < zomg> sinclair|nz: in node apps I just follow the node-convention for callbacks, eg. error is first parameter on a callback
14:00 < geNAZt> but it depends on what you have to send to the browser
14:00 < sinclair|nz> Havvy: where should i put the error handling ? http://pastebin.com/kneXygyY
14:00 < geNAZt> if you have to send all partials to the browser you wouldnt benefit from it
14:00 < levilewis> no reason you can't do the initial page load and rendering on the server side, then have the client render subsequent requestsâ€¦ 
14:01 < foofoobar> geNAZt, so when do I benefit from it?
14:01 < Havvy> sinclair|nz: The callbacks don't have an error parameter?
14:01 < foofoobar> How should the browser render it without a template?
14:01 < geNAZt> if you have the layout in the browser
14:01 < geNAZt> and things like angularjs load the data into that layout
14:01 < geNAZt> or you have fast changing data
14:01 < sinclair|nz> Havvy: they are completely disconnected, its using a raw socket
14:02 < Bubo> Can anyone help me with my sequelize ECONNREFUSED problem..?
14:02 < Havvy> Don't raw sockets expose error events?
14:02 < sinclair|nz> i suppose i could put a error in there, but it would be very indicative of what went wrong, and there is no garentee the thing calling is calling the error
14:02 < geNAZt> Havvy, they do
14:02 < sinclair|nz> Havvy: yeah, they do
14:03 < foofoobar> thanks for help
14:03 < sinclair|nz> Havvy: i have a alternate route tho
14:03 < foofoobar> I think I loose my connection soon (umts)
14:03 < geNAZt> kk
14:03 < sinclair|nz> Havvy: that is to, write clean testable code that works under ideal conditions, and is short lived in the context of the application, and logs out to somewhere 
14:04 < levilewis> bubo, is the db running locally?
14:04 < Bubo> yes it is levilewis. geNAZt tried helping me yesterday and his thoughts were that it was a bug in the lib
14:04 < sinclair|nz> Havvy: basically, write stuff to be run at the end of a http handler, 
14:04 < geNAZt> levilewis, its an psotgres db running on localhost, using a native driver "node-postgres" does connect
14:04 < geNAZt> also the cli does connect
14:05 < sinclair|nz> Havvy: then, at least you could say if a request succeeded or failed
14:05 < geNAZt> Bubo, what is with jugglingdb ?
14:05 < sinclair|nz> Havvy: if stuff failed, look at the logs
14:05 < Bubo> geNAZt: not enough documentation.. I like how sequelize is organized and all of it's stuff
14:05 < sinclair|nz> ^ better than scraptastic error handling
14:06 < Havvy> sinclair|nz: Well, a good idea would be to break the callback pyramid with async.serial() or Promises/A+.
14:06 < sinclair|nz> Havvy: i wrote my own implementation
14:06 < geNAZt> Bubo, you can debug it
14:06 < geNAZt> but i think its an bug in the orm
14:06 < adrianlang> Havvy: async.series
14:06 < Bubo> how?
14:07 < sinclair|nz> Havvy: pretty close to the Promises/A+ stuff, as i like having tasks 
14:07 < Havvy> I can't think of anything that would be easy for error handling in that though. :/
14:07 < levilewis> bubo, You're just simply trying to connect? I use that library without issues, but haven't used it with postgres - only MySQL. Assuming you've already tried using 127.0.0.1 instead of localhost for the host? Def sounds like it could be library related though if you're able to connect without issue the other ways you described.
14:07 < sinclair|nz> Havvy: i could put a extra (if error) before calling each op on the client
14:08 < sinclair|nz> Havvy: but honestly, i don't really care all that much about it
14:08 < Havvy> Yes, you could.
14:08 < Bubo> levilewis: yes I tried both. The thing is, when I only "connect" it runs fine but when I try to sync a model -> it says ECONNREFUSED
14:09 < sinclair|nz> Havvy: using promises tho, it would by nice to execute that pyramid as a single unit, and treat it as a transaction, either it succeeds or fails
14:09 < rcs> Havvy: Look at https://github.com/caolan/async/ , and the "series" command. You can run them all, have a single error handler at the end.
14:09 < Bubo> levilewis: even when I run raw queries, it does the same thing
14:09 < sinclair|nz> rcs, yes, its good practical stuff
14:10 < levilewis> Ok, was just about to ask if that also refused the connection
14:10 < Bubo> levilewis: https://gist.github.com/Bubo1/5599266
14:10 < Bubo> my code
14:10 < Bubo> I don't think there is anything wrong with it
14:10 < geNAZt> can you query by using the node-postgres module ?
14:10 < Bubo> geNAZt: yes I can, it doesn't refuse the connection
14:10 < Bubo> only when I use sequelize, it does
14:11 < Bubo> I will mail the creator and will see if he can fix the bug
14:12 < geNAZt> well you can open a bug in the repo
14:12 < geNAZt> https://github.com/sequelize/sequelize/issues
14:12 < Bubo> Oh I didn't see that
14:12 < Bubo> thanks
14:12 < levilewis> Didn't they recently remove the "dialects" from sequelize? They require them to be installed separately nowâ€¦ I thought they also distributed builds with the specific dialects bundled as well though. Do you know which version of sequelize you are running?
14:13 < geNAZt> levilewis, in the current master they are bundled
14:13 < Bubo> levilewis: I guess the latest one since I installed with npm install sequelize. In the documentation it says you have to have "dialect" in the options
14:14 < geNAZt> well you have an error or ?
14:14 < Bubo> I tried installing sequelize and pg separately, I also tried going with sequelize-postgres -> nothign is working
14:14 < geNAZt> do you have a stacktrace from it ?
14:14 < Bubo> geNAZt: https://gist.github.com/Bubo1/5599266
14:14 < Bubo> the first comment
14:14 < werle> juliangruber: deferred-open is awesome man
14:15 < geNAZt> can you install this: https://github.com/mattinsler/longjohn
14:15 < geNAZt> and give us the complete stacktrace ?
14:15 < Bubo> sure
14:16 < Bubo> geNAZt: https://gist.github.com/Bubo1/5599266
14:16 < Bubo> 2nd comment
14:18 < Bubo> There is one weird thing
14:18 < geNAZt> you dont use pooling or ?
14:18 < Bubo> no I dont
14:18 < Bubo> when I try to run it with protocol: null in the options, it doesn't connect to the database with the error: wrong password for user "bubo" even though I specified to use the user "rss" in var sequelize = new Sequelize('rssdb', 'rss', 'rsspass',
14:19 < geNAZt> well can you add a console.log for me ?
14:19 < acuster> Hey all, I have a module that needs to copy a lot of files around at install time. i.e. I want to run a list of shell commands during 'npm install' Should I be using an 'install' in the package JSON or a .gyp file? I'm confused by the documents I find. Thanks for any pointers.
14:19 < geNAZt> (/home/bubo/node/rss/node_modules/sequelize/lib/dialects/postgres/connector-manager.js:88:19)
14:19 < geNAZt> one line 86 please add a console.log(uri);
14:19 < geNAZt> on*
14:20 < Bubo> yes
14:20 < Bubo> geNAZt: there is no line 86
14:20 < Bubo> there are only 24
14:21 < geNAZt> in the connection manager ?
14:21 < Bubo> yes
14:21 < Bubo> nevermind
14:21 < Bubo> wrong dir
14:21 < Bubo> sorry
14:22 < Bubo> geNAZt: tcp://rss:rsspass@127.0.0.1:3306/rssdb
14:22 < geNAZt> which is correct i think
14:22 < Bubo> yes it is
14:22 < Bubo> i use the same to connect with node-postgres
14:23 < geNAZt> can you try to execute SET TIME ZONE 'UTC'; in the node-postgres ?
14:23 < geNAZt> and see if an error comes back ?
14:24 < Bubo> just a sec
14:25 < dev360> how can i make sense of the v8.log output when i run node --prof? I tried using the v8 tools but they don't seem to be able to parse the file.
14:26 < Bubo> geNAZt: you mean just client.query("SET TIME ZONE 'UTC'"); ?
14:26 < Bubo> it works
14:26 < geNAZt> ok
14:28 < Bubo> Wow.
14:29 < Bubo> https://github.com/sequelize/sequelize/issues/571
14:29 < geNAZt> do you have something in the postgres log ?
14:29 < Bubo> "I am closing this issue. However, it would be nice if sequelize could use 5432 as a default port when dialect=postgres"
14:29 < Bubo> I just tried that port, it works.
14:29 < geNAZt> lol
14:29 < geNAZt> :D
14:29 < Bubo> wow..
14:29 < Bubo> haha
14:30 < geNAZt> i rofl hard :D
14:30 < Bubo> me too
14:30 < Bubo> :D
14:30 < Bubo> the port....
14:30 < Bubo> seems node-postgres uses the same port
14:30 < geNAZt> i tought it would be auto selected
14:30 < geNAZt> oO
14:30 < geNAZt> no the connect uri doesnt have a port in node-postgres
14:31 < geNAZt> and 3306 is a mysql port
14:31 < geNAZt> :P
14:31 < Bubo> it is 3306 in sequelize
14:31 < Bubo> and it tries to use 3306 with postgres too
14:31 < Bubo> should be fixed
14:31 < geNAZt> yes because it is the deafult config
14:31 < geNAZt> which is mysql based
14:31 < geNAZt> :D
14:31 < geNAZt> should, but they said no
14:31 < geNAZt> :D
14:31 < Bubo> well, when dialect = postgres --> port = 5432
14:31 < Bubo> lol
14:33 < geNAZt> but sequelize said: trolololol
14:33 < geNAZt> :D
14:35 < Bubo> haha
14:35 < Bubo> finally I can do something instead of debugging
14:39 < levilewis> ok, sorry I walked away.. so simple port issue??
14:40 < levilewis> so easy fix right on
15:02 < spion> yay, using ffi I wrote a getCredentials(unixSocket, function(err, credentials)) function that seems to work.
15:04 < brainproxy> it's Friday morning, and it's time to write some JavaScript, oooh yeah
15:04 < brainproxy> :)
15:04 < geNAZt> morning ? :O
15:07 < v-fpiris> it is evening :P
15:10 < Bubo> afternoon
15:10 < Bubo> :D
15:10 < kenperkins> morning
15:10 < kenperkins> i love that on IRC, it always keeps you grounded with regards to your locality
15:11 < kenperkins> always someone from the other side of the planet :D
15:11 < rossk> (early) morning
15:12 < echo|> Good morning :)
15:15 < ripper6640> k
15:15 < kenperkins> rossk: best coast west coast? :D
15:17 < gbit86> ok.. I am getting to the point where I just need to pay someone for support on how to get nodejs to work with digest authentication. Seriously the npm add ons I have tried fail, and writing the authentication in pure nodejs have proven to be frustrating even though I feel like the documentation on how to post and communicate to the server with json in the body was followed.
15:19 < gbit86> would anyone here off an hour of their time for a fee? I will gladly remote you into my mac and try and catch you up on speed with what it is I am doing (I will warn you now though, I have 2 screens, 2560x1440 & 1920x1200)
15:19 < gbit86> offer*
15:20 < pachet> that's going to hurt my dialup
15:21 < geNAZt> well what do you need ?
15:23 < levilewis> which module are you wanting to use?
15:23 < rossk> kenperkins, love it here
15:23 < kenperkins> san diego?
15:24 < rossk> Menlo Park
15:24 < kenperkins> oh, bay
15:24 < kenperkins> duh
15:24 < rossk> yup, rockin the bay
15:24 < kenperkins> how you guys afford that area is beyond me
15:24 < rossk> actually, I can throw a rock from here and hit Facebook's giant thumbs-up
15:25 < kenperkins> rossk: http://devops.rackspace.com/pkgcloud-update.html
15:25 < kenperkins> not much you haven't already seen
15:25 < rossk> this is just a satellite office in a little hole in the wall
15:25 < kenperkins> but now it's the company line
15:25 < rossk> that's great ken
15:26 < rossk> I'm secretly looking forward to Cloud Networking
15:26 < rossk> waiting to get off the wait list
15:26 < rossk> we can do some crazy shit with that
15:28 < rossk> I think its awesome that Rackspace is sponsoring this development
15:28 < kenperkins> it's what we do as a company: open source the world :D
15:29 < dypsilon> kenperkins, are you from rackspace?
15:29 < kenperkins> dypsilon: yep
15:30 < dypsilon> nice, great to see so much support for node.js by rackspace
15:31 < Stephen> Hmm... my servers are hosted there
15:31 < Stephen> What are they sponsoring?
15:31 < kenperkins> dypsilon: thanks! It's not just lip service either, we've build our entire monitoring platform using node as the central API/coordination piece
15:31 < rossk> Stephen development on nodejs bindings to tie to cloud infrastrucutre
15:31 < Stephen> kenperkins: You're with rackspace?
15:32 < rossk> https://github.com/nodejitsu/pkgcloud
15:32 < kenperkins> Stephen: yep, I'm our lead node.js dev advocate
15:32 < Stephen> Sweet
15:32 < Stephen> Heh, beating me to the punch here
15:32 < Stephen> I've been working on a similar project with a new cloud group
15:32 < Stephen> I'll admit though, I'm no C++ developer
15:32 < kenperkins> neither am I :D
15:33 < Stephen> Does your team do much in the way of Node extensions in the implementation?
15:33 < Zaxnyd> hey guys, I know this is probably the wrong forum but I have a CURL question: curl "http://localhost:7474/db/data/ext/CypherPlugin/graphdb/execute_query" -d "{'query': 'START node=node(0) RETURN node'}"
15:33 < Zaxnyd> this returns "Mandatory argument \"query\" not supplied."
15:33 < Stephen> Or is it more about supporting the dev of Node core?
15:33 < dypsilon> kenperkins, our (and by that I mean our customer's) major concern about hosting in the cloud is privacy. Most of your customers are coming from Germany and the laws about privacy are very strict here. One of them is: private customer data may not leave Germany.
15:34 < Zaxnyd> I'm guessing there's something obviously wrong about how I'm attempting this
15:34 < kenperkins> Stephen: we're hoping it goes that way, but that's a bit out on the roadmap
15:34 < Stephen> Zaxnyd: 3CURL
15:34 < rossk> dypsilon, I think Rackspace _has_ a datacenter in Germany
15:34 < Stephen> Zaxnyd: #curl
15:34 < rossk> http://www.rackspace-hosting.de/?CMP=US
15:34 < Zaxnyd> great, thanks Stephen
15:34 < kenperkins> rossk: I don't think that's rackspace proper
15:35 < rossk> oh?
15:35 < rossk> then n/m...
15:35 < dev360> does anybody know how to build d8?
15:35 < Stephen> Same logo
15:35 < dev360> I found a tutorial that said to use `scone d8` but its not working
15:35 < kenperkins> our official datacenters are DFW, ORD, IAD, London, Hong Kong and Sydney
15:35 < dev360> s/scone/scons/
15:35 < kenperkins> dypsilon: so, this is why openstack is so awesome
15:36 < rossk> kenperkins, FWIW we're now in ORD, IAD, London
15:36 < kenperkins> dypsilon: you could run your own openstack deployment on bare-metal in germany, and use the exact same tooling for your openstack cluster that you can use to manage the rackspace public cloud
15:36 < bnoordhuis> dev360: cd deps/v8 && make -j8 native
15:36 < kenperkins> that way having 100% certainty you're meeting the privacy laws
15:36 < bnoordhuis> dev360: d8 ends up in deps/v8/out/native/d8
15:36 < Stephen> Customer Data cannot leave germany, not even in the processing phase? Hmm
15:37 < dev360> its giving me build/gyp/gyp: No such file or director
15:37 < dev360> is this something i have to build first?
15:37 < Stephen> install gyp
15:37 < dypsilon> kenperkins, so in this case I'd have a private cloud...
15:37 < kenperkins> dypsilon: exactly
15:37 < bnoordhuis> dev360: cd build && ln -s ../../../tools/gyp
15:37 < pachet> Stephen yeah i had the same reaction
15:37 < dev360> great let me try that. thanks.
15:37 < bnoordhuis> or maybe gyp/gyp
15:37 < dypsilon> kenperkins, that's an interesting solution, thank you
15:37 < bnoordhuis> you'll figure it out :)
15:37 < pachet> of course i'm from the states, we atrophy private data from the minute we wake up in the morning
15:38 < Stephen> This is true
15:38 < kenperkins> dypsilon: obviously, it's non trivial to get bare-metal assets provisioned in a data-center, but if the laws are rigid, somethings got to give
15:39 < Stephen> In cloud env/load balancing, we're going to need to start thinking in terms of allowing meta data govern load balancing distribution
15:39 < Stephen> Like SLA's and legal requirements
15:39 < gildean> doesn't hetzner have their datacenters in germany?
15:39 < gildean> iirc they have cheap bare metals
15:40 < gbit86> If I offer to pay someone $100 for 1 hour of their time on answering any problems I may have and run into with my nodejs development would this be reasonable? I primarily just want to pay someone to resolve my digest authentication issues so I can move on with my development on my own
15:40 < Stephen> Callback functions are wonderful for the first part of that implementation, and load balancing those functions is doable, so now we need run-time or compiler-time metadata to help drive which nodes they get distributed to
15:40 < gbit86> if you are confident that you can resolve whatever digest authentications issues I am having and you have a paypal account then we can make this work
15:43 < gbit86> 1) nodejs app initiates client POST connection with json body -> server 2) Authentication fails as POST (but will succeed with GET, GET cannot carry the json body so it is useless)
15:43 < Stephen> MS Authentication schemes, always fun
15:44 < Stephen> What server is receiving the POST?
15:44 < dypsilon> gildean, hetzner is native german company yes, the problem is rather finding competent administrators who are able to set up a private cloud on top of hetzner
15:45 < dypsilon> and maintain it
15:45 < gbit86> The server is running Apache 2.2 (CentOS), technically it is a Switchvox asterisk server based on Fedora Core 6
15:45 < bnoordhuis> fedora 6?
15:45 < gbit86> the browsers I use can post to it just fine with json, I know the server is configured correctly
15:45 < Stephen> That's fine
15:46 < Stephen> So asterisk is the backing authentication server
15:46 < gbit86> I do believe so, as the terminal indicates fc6
15:46 < gbit86> yes
15:46 < bnoordhuis> shouldn't you be upgrading?
15:47 < bnoordhuis> fc6 is 5 years old now, i think?
15:47 < bnoordhuis> maybe 6
15:47 < gbit86> this switchvox is not old
15:47 < gbit86> it is recent, but yes the age of the underlying server surprised me too
15:49 < bnoordhuis> well... google says the first fc6 release was in 2006
15:49 < bnoordhuis> not trying to derail the conversation but fc18 is current
15:49 < bnoordhuis> you're a wee bit behind the curve
15:50 < gbit86> well talk to Digium.. the asterisk company about that one
15:50 < gbit86> I am not even supposed to know what is running their switchvox little on have root access to it the entire server
15:53 < Stephen> How is Apache linked to astrisk? PHP bridge, mod_auth_digest?
15:53 < derhasi> hi, i currently want to test appjs and therefore need a "nodejs in 32bit", how can i get that on mac os x? maybe with homebrew?
15:53 < gildean> derhasi: or just download the demo-package which should have a working version of node included
15:54 < gbit86> I don't have those details, but the header response from the server says this "Server: Apache/2.2.3 (CentOS)"
15:54 < Stephen> gbit86: I think I can solve your situation, but I'd need to see the failing POST req/resp, and some information on how your Digest Auth implementation is setup on the server
15:54 < Stephen> If you can, at least email me the full version of the request/response log
15:55 < Stephen> Knowing how it is failing will be critical to determining if the auth module can't handle posts, or if the format of the request is wrong
15:55 < gbit86> yes, I will email you the information and the code examples I am using as I have been able to decrypt the SSL communications
15:56 < derhasi> gildean: ah, that appjs  "zip" seems to work, thanks :D
15:56 < gildean> np
15:57 < gbit86> Doing that did get me a lot further along, but as soon as I switched from GET to POST I started having a lot of issues with my nodejs implementation so I switched to using mikael's request add-on, but it refused to work in the same manner, except I have been unable to enable the weaker SSL cipher so that I can get a definitive request/response header with the POST information
16:00 < gbit86> one reason why I prefer not to use add ons when they are not necessary. It can be much more troublesome to troubleshoot
16:01 < werle> Can anyone tell me some real perks to using grunt?
16:05 < geNAZt> werle, fixtures, directory creation
16:05 < geNAZt> database setups
16:05 < geNAZt> http server configurations
16:06 < werle> geNAZt: thanks
16:06 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:08 < syskk> anyone care explaining the room's topic? "don't slice unless necessary "
16:09 < adrianlang> https://github.com/joyent/node/commit/88333f7ace007dc0ef57803b954c55976f523ffa
16:09 < syskk> yeah google helped me out eheh
16:10 < syskk> is it the topic because its a funny commit message or is there some profound reason i am missing
16:10 < Stephen> It's just doing double work
16:10 < Stephen> Or too early
16:11 < syskk> I understand that
16:11 < Stephen> Don't break up data unless you need to
16:11 < Stephen> That's all
16:11 < syskk> I'm just wondering how it ended up being the topic here
16:11 < syskk> is it a common mistake or what
16:11 < syskk> haha
16:11 < Stephen> Yeah
16:11 < pachet> slice creates a copy of the array you call it on
16:11 < pachet> if you arent doing anything destructive, dont create a copy
16:11 < Stephen> And an especially common one for a core Node dev to fall into
16:12 < syskk> got it
16:12 < Stephen> Rather, too common of an error that a core Node dev /shouldnt/ be doing it
16:12 < Stephen> But we all make mistakes :-)
16:12 < syskk> javascript could really use some better method names -_-
16:12 < pachet> Stephen ive actually never ever made a mistake
16:12 < syskk> i never really got why they decided to call those slice and splice
16:13 < pachet> Stephen except for the decision to lie about mistakes i've made
16:13 < pachet> syskk: whats wrong with slice?
16:13 < bnoordhuis> nothing. it's the best thing since, er, sliced bread
16:13 < syskk> just the name seems a bit odd to me
16:13 < quilime> hi everyone
16:14 < pachet> syskk really the prevailing use of slice, to just copy an entire array, isnt the whole picture
16:14 < bnoordhuis> i think the topic refers to a buglet where lib/http.js was sometimes slicing the request when it didn't have to
16:14 < syskk> right
16:14 < bnoordhuis> not fatal in itself but responsible for heating up the earth by another micrograde or two
16:14 < quilime> bashing my head against this one: has anyone had issues connecting to heroku-postgres via localhost with juggledb-postgres? I'm having issues forcing it to use SSL â€” it seems to be off by default...
16:15 < syskk> whats the best way to get some commits into node.js? can i just work on an open issue?
16:16 < geNAZt> syskk, fork the repo, make the changes and pull request them
16:16 < quilime> *jugglingdb
16:16 < bnoordhuis> syskk: what geNAZt said. depends on what you want to get in though
16:16 < syskk> bnoordhuis: preferably javascript code rather than C++
16:16 < pachet> well :[
16:17 < syskk> I actually already have one commit but it was for a minor documentation change
16:17 < syskk> I just want to make sure what i work on has a chance of getting merged
16:17 < qubit01> hah , just watched  http://www.youtube.com/watch?v=82hJbjqbIt4 , I always thought isaac was czech or polish
16:17 < bnoordhuis> syskk: then tell me what it is :)
16:17 < qubit01> isaacbw, youre famous!
16:17 < pachet> if your goal is to just get commits in, learn c++ ;]
16:18 < syskk> I thought most of the core was in JS
16:18 < bnoordhuis> no, just bits
16:18 < bnoordhuis> also some bytes
16:18 < syskk> I know C++ but probably not well enough for Node project
16:18 < syskk> ok
16:18 < bnoordhuis> syskk: you still haven't told what you want to get in :)
16:18 < syskk> bnoordhuis: really? are you including V8?
16:19 < bnoordhuis> yeah, but also the stuff in src/
16:19 < syskk> bnoordhuis: work on Node's code, preferably JS stuff
16:19 < pachet> syskk no
16:19 < dev360> I'm trying to profile my memory and was finally able to run everything through the mac-tick-processor script but now the output says unknown code state: undefined all over the place.. Ideas?
16:19 < quilime> hi all â€” would this channel be an appropriate place to ask a question concerning JugglingDB ?
16:19 < dev360> Should I just rewrite this app in a language that won't leak as easily?
16:20 < dev360> snark snark snark
16:20 < bnoordhuis> dev360: it sounds like the v8.log was generated by a different version of v8
16:20 < pachet> syskk recommend lurking in #libuv, good way to keep your ear to the ground for what is on the core contribs' radar
16:20 < syskk> pachet: thanks
16:20 < bnoordhuis> dev360: d8's version and the main version need to be the same
16:20 < bnoordhuis> main==node
16:21 < syskk> was libuv written specifically for Node? I thought it was an unrelated project that Node happened to use
16:21 < bnoordhuis> syskk: no, that was libev. libuv was written from the ground up for node
16:21 < syskk> cool
16:21 < bnoordhuis> though other projects use it, like rust and julia
16:22 < dev360> bnoordhuis: Okay.. hmm okay. so I built it from source. where would node end up in those directories?
16:22 < bnoordhuis> dev360: source == v8 source or node source?
16:22 < dev360> node source, I'm using the joyent github repo
16:23 < dev360> i think i found what it was...
16:23 < dev360> weird. so it created a symlink to out/Release/node, but when I'm in the folder it still references my home-brew node.
16:23 < bnoordhuis> dev360: try a `git checkout origin/v0.10`, then build node and v8
16:23 < dev360> Okay thanks! I hope this works I've been hunting this memory leak for 4 days now.
16:24 < adrianlang> dev360: Thatâ€™s how your $PATH probably works
16:41 < dev360> bnoordhuis: now Im getting Error: npm doesn't work with node v0.11.3-pre .. i tried installing npm from source.
16:42 < dev360> would it be easier for me to check out an old version of node and try to build it?
16:42 < dev360> arrgg thats what Ill do.
16:42 < quilime> would anyone have any suggestions where to get help with jugglingdb/ssl/heroku-postgres ?
16:45 < bnoordhuis> dev360: just checkout a stable tag, e.g. `git checkout v0.10.6`
16:56 < _6a68> anybody know of a good, up-to-date, book on node?
16:58 < Havvy> _6a68: Pretty much any book on Node is up to date.
16:59 < Havvy> Except for the Streams2 change in 0.10.x, there hasn't been a massive change since 0.4.x.
17:02 < beeant-macbook> what hosting do you guys use? VPS cloud ?
17:02 < drudge> digitalocean.com
17:03 < _6a68> Havvy: yeah, but there have been lots of smaller API changes. I'm looking for a python coworker who is accustomed to having stable std libs and books with lots of current examples.
17:03 < sinclair|nz> filezilla is retarded
17:03 < beeant-macbook> do you think 16GB RAM 12core vCPU for USD$1500 cheap?
17:04 < sinclair|nz> why the hell does filezilla send me multiple 220's
17:04 < sinclair|nz> 220 means Service ready for new user.
17:04 < sinclair|nz> and it sends me 3 of them
17:04 < beeant-macbook> oh its close $160
17:04 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:05 < beeant-macbook> but it only has 8 cores
17:05 < Havvy> _6a68: Eh, the standard library is small and documented at http://nodejs.org/api/
17:06 < _6a68> Havvy: I know, that's part of the problem: for someone accustomed to a huge std lib, learning to use npm can be daunting
17:06 < Havvy> You've used pip, right/
17:07 < Havvy> Or easyinstall
17:13 < squeakytoy> i just started a new company
17:13 < squeakytoy> and today i found that someone has committed in node.exe
17:14 < squeakytoy> since.. yea, why not.
17:15 < thomblake> Is there a place where people post Bay area node jobs?  The 'official' site doesn't seem to be very active.
17:34 < brian_petersen> I am using forever to run a application, I am trying to run forever with an unpriviledged account with "sudo -u deploy forever start /home/deploy/videotherapy-signal/app.js", but I get this error: http://pastie.org/7921534. (its trying to create the needed dirs in the root home) How do I fix this?
17:37 < Fishrock123> Am having some difficulty locally testing npm install: https://gist.github.com/Fishrock123/5600625
17:41 < kenperkins> is node's versioning semver++ or something different?
17:42 < kenperkins> i.e. there's nothing about even stable odd unstable in semver.org
17:44 < Nika> Guys i am trying youtube api for  nodejs and when i use youtube.feeds.playlist('PL732E1FA39FBC80C0',console.log); everything is ok
17:45 < Nika> but when instead of console.log i write function(data){ console.log(data); );
17:45 < Nika> it says null
17:46 < Nnubes256> Nika: What module are you using as YouTube API?
17:46 < Nika> can anyone help?
17:46 < Nika> youtube-feeds
17:46 < Nika> https://github.com/fvdm/nodejs-youtube/blob/master/youtube-feeds.js
17:47 < thomblake> kenperkins: https://github.com/joyent/node/wiki/FAQ#what-is-the-versioning-scheme
17:47 < kenperkins> thomblakeO yea I read that
17:47 < kenperkins> so it's not really semver in the literal sense
17:47 < thomblake> kenperkins: Linux kernel versions used to work that way (until 2004 I think) and Ruby versions used to do that too.
17:48 < Nnubes256> Nika: function(err,data) {} is the correct function
17:48 < Nika> ok, thanks
17:48 < Nnubes256> https://github.com/fvdm/nodejs-youtube#callbacks
17:48 < Nika> sorry for my noob question, thanks
17:48 < Nnubes256> ;)
17:49 < thomblake> kenperkins: I don't think there's anything in the semver spec that says you can't do that.
17:49 < fauntle> quick question: is there any way to define a custom dependency group in package.json? ex: "specialDependencies": { "underscore": "latest" }
17:49 < thomblake> So it isa semver, so to speak.
17:49 < kenperkins> thomblake: semver says major versions only increment when you have a non-backwards compatible change
17:50 < kenperkins> i guess node isn't major version 1 yet, so maybe that ends up being true
17:50 < kenperkins> point taken
17:50 < thomblake> Right
17:51 < Nika> clear
17:51 < thomblake> Technically Node is more stable than semver major version zero suggests.  It should probably be at version 1 by now if it's going to be this stable.  There are parts that should never be expected to change at this point.
17:54 < thomblake> But not to worry, there are folks who are being paid to think hard about that sort of stuff.
17:55 < fauntle> paid hard to think hard
18:00 < Fishrock123> Anyone know what would be causing https://gist.github.com/Fishrock123/5600625 ?
18:08 < marshall> hey node
18:09 < marshall> why the funk does coffeescript load `.somefile.coffee.swp` before `somefile.coffee`? is there a way i can get it to behave?
18:14 < dypsilon> don't use coffee script
18:14 < marshall> i don't, i just joined a project that uses it D:
18:15 < dypsilon> don't :)
18:15 < marshall> I mean, my client's using it
18:15 < dypsilon> sorry
18:15 < marshall> i know, poor me
18:16 < Bubo> j #postgresql
18:23 < chiel> hi there, anybody here using flatiron.js? i'm trying to make a middleware function that will redirect to /login if no session user is found, however redirecting doesn't seem to be working for me
18:29 < sinclair|nz> does anyone here know the innards of fs.createReadStream() and fs.createWriteStream() ?
18:31 < Almindor> hey
18:31 < Almindor> I'm getting a Error: MultipartParser.end(): stream ended unexpectedly: state = PART_DATA on slightly bigger file uploads (POST)
18:32 < Almindor> any ideas what would cause it? the file is really only a few bytes ( 62 byte file wokrs, 70 fails)
18:34 < Almindor> it's using the <intput type="file"> in a form to upload the file
18:36 < brianng> hi
18:36 < brianng> while removing a mongo entry
18:36 < brianng> what does atomic mean
18:37 < sinclair|nz> does anyone here know the innards of fs.createReadStream() and fs.createWriteStream() ?
18:37 < sinclair|nz> node returns a ReadableStream
18:38 < sinclair|nz> i have a FTP client i have written, and i am entering Passive mode
18:39 < sinclair|nz> when i enter passive mode, i wish to stream content from the FTP server in the same fashion as i would stream data from disk
18:39 < sinclair|nz> as i am working from a raw net.Socket, im a bit lost as to what layer of abstractions i am throwing away
18:39 < sinclair|nz> anyone able to point me in the right direction?
18:44 < sinclair|nz> if i have a NodeBuffer, am i able to wrap this in a ReadableStream?
18:46 < zenetik> hi
18:46 < zenetik> using express, any idea why req.params is empty ?
18:46 < sinclair|nz> zenetik: hello
18:46 < zenetik> url /ws/folder/9238D923D/load
18:46 < zenetik> handler: app.all('/ws/folder/:workspaceId/load',Folder.ws.load);
18:46 < sinclair|nz> zenetik: pastebin it
18:47 < sinclair|nz> and i don't go near express
18:48 < marshall> brianng: 'atomic' in data-storage-talk means that it's an operation that either happened or didn't happen, and there is no way that it can be partially applied.
18:49 < brianng> marshall: The remove option mentions atomic, what will it mean in this context ? https://github.com/amark/mongous
18:49 < zenetik> sinclair|nz: first one https://gist.github.com/franck34/5601124
18:49 < sinclair|nz> zenetik: don't ask me, i hate express()
18:49 < werle> sinclair|nz: why?
18:50 < zenetik> sinclair|nz: lol, what are you using ?
18:50 < sinclair|nz> express is just another sinatra clone, nothing special, i have no interest and wont be able to help
18:50 < sinclair|nz> zenetik: my own stuff
18:50 < zenetik> sinclair|nz: that is clear. I'll look at sinatra. For you it's the "native" one it seems
18:51 < sinclair|nz> zenetik: there is very little express overs over http.createServer(...) that makes it worthwhile to me, other than perhaps routing 
18:51 < werle> anyone here use component?
18:51 < zenetik> does sinatra have /foo/bar/:id stuff ?
18:51 < sinclair|nz> but as routing is trivial, as is writing a middleware stack, i don't need it
18:52 < nathan7> werle: Ahoy
18:52 < werle> nathan7: sweet
18:53 < werle> nathan7: if I have a script in my scripts array like "ui/path/to/some/file.js" and I want to alias it as require("somefile") Is that possible?
18:53 < nathan7> werle: I'm not sure what the builder API lets you do
18:54 < zenetik> second try. Need help to understand why my req.params is empty (using express) https://gist.github.com/franck34/5601124 and https://gist.github.com/franck34/5601130 .Any help will unblock me and should be really appreciated :)
18:54 < sinclair|nz> isaacs: you around?
18:55 < werle> nathan7: hmm I'll do some reading into it
18:55 < hackygolucky_> meandavejustice: https://github.com/joyent/node/wiki/Modules#wiki-parsers-json
18:56 < meandavejustice> hackygolucky_ thanks!
18:58 < hackygolucky_> meandavejustice: I think json-streams is the one I've heard recommended, specifically
18:58 < sinclair|nz> has anyone done any wrapping of streams in node yet?
18:58 < sinclair|nz> i have a socket feeding me data, and i want to wrap it in a readable stream
18:58 < sinclair|nz> something i can pipe() to something else
18:58 < sinclair|nz> any advice? anyone?
19:00 < levilewis> zenetik, what version of express are you using?
19:02 < zenetik> levilewis: 3.1.1, node 0.10.5
19:02 < zenetik> levilewis: google don't want to help me
19:02 < zenetik> levilewis: wondering if it's not a story or order in "use"
19:03 < chiel> if i want to send email from node, what would be the best way to approach this?
19:04 < Havvy> chiel: Wrapper around sendmail
19:04 < levilewis> I dig, this https://github.com/eleith/emailjs would like to know what others are using.
19:05 < chiel> Havvy: https://github.com/guileen/node-sendmail ? was staring at that yea :)
19:05 < chiel> was just wondering what other people were using and such
19:05 < saintedlama> nodemailer https://github.com/andris9/Nodemailer
19:05 < chiel> what is the up/downside of having to use an smtp server? aside from the obvious "you need to set up an smtp server"
19:06 < keyosk> Downside is mail from smtp servers on 'rarely seen' IPs have a high potential for auto spam flagging
19:06 < chiel> keyosk: ah ok, and sendmail would not have this issue, or?
19:07 < Almindor> it seems it only happens if someone leaves the file choice and POSTS the same form again
19:07 <@isaacs> sinclair|nz: yo
19:07 < Almindor> if I re-select the file it works fine
19:07 < Almindor> (after a file change)
19:07 < keyosk> chiel: Same potential risk..
19:07 < sinclair|nz> isaacs: wow, you are there
19:07 < chiel> hmm, fair enough :)
19:07 < chiel> i will give node-sendmail a shot first, since it seems nice and basic
19:07 < keyosk> chiel: That's why there are services like emailvision, mail monkey, etc, (hell plug in your gmail credentials and you're fine)
19:08 < levilewis> zenetik, see if this helps you? http://stackoverflow.com/questions/8864626/using-routes-in-express-js
19:08 < keyosk> Like use nodemailer, use your gmail credentials, and you shouldn't be spam blocked
19:08 < sinclair|nz> isaacs: i have a question about streams, basically, i have a socket, and data being fired out of it, i want to wrap all this up in a stream.ReadableStream, and i saw you had written some stream libs
19:08 < chiel> yeah that's true, just making a prototype, so sendmail works I guess :D
19:08 < sinclair|nz> isaacs: was wondering if you could point me in the right direction 
19:09 < zenetik> levilewis: reading, thx
19:09 < sinclair|nz> isaacs: a ideal thing would be to be able to pass back a readable stream to a client, and allow them to pipe() that data around
19:09 < levilewis> you're welcome I'm fairly new to express myself.
19:09 < zenetik> levilewis: in fact, req.params should be at least {}, not []
19:11 < nathan7> sinclair|nz: readablestream is pretty simple in 0.10
19:11 < sinclair|nz> nathan7: what aspect of readablestream, not, i don't have a readablestream, i wish to create one 
19:12 < nathan7> sinclair|nz: it is
19:12 < nathan7> sinclair|nz: implement _read
19:12 < levilewis> Yeah, I think using the "exports" has something to do with it. Almost like the express params aren't being passed to your method right now?
19:13 < sinclair|nz> nathan7: by implementing _read, its going tow work with the rest of nodes stream infrastructure ?
19:13 < nathan7> sinclair|nz: Yep
19:13 < sinclair|nz> nathan7: nice, 
19:13 < nathan7> sinclair|nz: Implement _read and inherit from ReadableStream
19:13 < sinclair|nz> thanks, i will look into it
19:14 < sinclair|nz> nathan7: by inherit, you mean implement the interface ReadableStream
19:14 < sinclair|nz> ?
19:14 < nathan7> sinclair|nz: _read is the internal interface to ReadableStream
19:15 < sinclair|nz> nathan7: so, _read is called externally, but is private to the ReadableStream contract ?
19:15 < sinclair|nz> nathan7: its cool, i found some write ups on the _read stuff, thanks for your help
19:20 < Nika> I have a function that takes some time to run and in the end it produces global array
19:21 < Nika> what is the best way to display that array's content in the browser
19:22 < zenetik> my req.params problem is just related to winston log, when does not understand [ foo:'bar' ] (which is suposed to be { foo:'bar' }
19:22 < zenetik> wired
19:22 < zenetik> thanks all
19:23 < Nika> anyone?
19:24 < levilewis> why can't you just use console.log(array); instead of dumping to the browser...
19:25 < levilewis> that will show the contents in the terminal instead..
19:25 < Nika> I want to make an application that retrieves data like youtube playlist to spotify 
19:25 < Nika> Get youtube playlist videos -> search spotify -> update to page
19:25 < Nika> I have it working with console.log
19:26 < levilewis> If you're wanting to return data i'd look into returning it as JSON.
19:27 < Nika> Yeah but then i can't make it work fast because it requeres to first load all data into json
19:28 < keyosk> Nika: ....
19:28 < levilewis> req.write(JSON.stringify(array)); ?
19:29 < Nika> thanks i will try to work with that
19:32 < dominictarr> tmpvar_: npmsearch.com is down
19:36 <@isaacs> dominictarr: tmpvar_ wrote the new npmjs.org search
19:36 <@isaacs> dominictarr: you can maybe use that?
19:36 <@isaacs> sinclair|nz: you learned two valuable lessons i see!
19:36 <@isaacs> sinclair|nz: first, how to implement a Readable
19:37 <@isaacs> sinclair|nz: second, that there's probably someone other than me to answer your question ;)
19:37 < dominictarr> isaacs npmsearch had a nicer api with infinite scrolling
19:37 <@isaacs> dominictarr: yeah, that's true
19:37 <@isaacs> it'd be rad to have infiniscroll on npm.im search
19:37 < sinclair|nz> isaacs: i found one of your projects, figured you would know something about the topic
19:37 <@isaacs> sinclair|nz: i do, i also wrote the streams2 implementaiton in node 0.10
19:38 <@isaacs> sinclair|nz: with a lot of people helping, of course.
19:38 < sinclair|nz> isaacs: fair enough, 
19:38 <@isaacs> sinclair|nz: but yes, what nathan7 says is correct.
19:38  * isaacs was on a call, sorry for responding then abruptly disappearing
19:44 < ljharb> ugh, i hate infinite scroll :-(
19:44 < keyosk> I hate clicking page next and page previous.
19:44 < ljharb> if you do add it can you please make sure that if i refresh the page, i don't have to rescroll down N pages?
19:44 < pachet> ^
19:44 < ljharb> if my UI state isn't in the URL, something's broken.
19:44 < pachet> ^
19:45 < keyosk> Upon each 'scrolling pagination' adjust hash in the url, simple enough concept.
19:45 < Nika> how to do a synchronous task in nodejs?
19:45 < ljharb> except not hashes, cause hash URLs are effing awful.
19:45 < Nika> I want to execute something after function finishes
19:45 < ljharb> pushState or nothing
19:45 < pachet> Nika: callbacks?
19:45 < keyosk> IE6 still exists.
19:46 < pachet> not to me
19:46 < keyosk> That would be async pachet ;)
19:46 < levilewis> only because devs keep support IE6.
19:46 < ljharb> keyosk: right, and IE 6-8 can reload the page, or can just not have proper preserved scroll state.
19:46 < levilewis> supporting*
19:46 < ljharb> IE 6 doesn't really exist anymore.
19:46 < ljharb> even in china, the hacked windows XPs are upgrading.
19:46 < levilewis> Yeah, google doesn't even support IE7 anymore...
19:46 < keyosk> As long as IE6 users keep putting money into my websites. I give them features.
19:46 < ljharb> and it's been "only in china" that ie6 is a thing for a year or two anyways.
19:46 < pachet> keyosk Nika er then just write it in the line after your fn call? :[
19:46 < ljharb> keyosk: i SERIOUSLY doubt that any ie6 user puts money into your website.
19:46 < keyosk> lol okay.
19:47 < ljharb> if they won't put money into a computer that's newer than 12 years old, why would they give you any money
19:47 < ljharb> sorry, 11 years.
19:47 < pachet> ljharb old people do strange things
19:47 < pachet> with their pension checks
19:47 < ljharb> old people have grandkids that install chrome.
19:47 < keyosk> People that work for financial and government institutions use our product at work
19:47 < pachet> haha
19:47 < keyosk> Their work computers have locked application install privvies.
19:47 < ljharb> chrome frame.
19:47 < keyosk> IE6 is their only gateway to the internet.
19:47 < ljharb> firefox on a flash drive.
19:47 < keyosk> Are you being a moron on purpose?
19:48 < ljharb> and all those people have iphones or android, and a real computer at home. maybe they shouldn't be doing non-work stuff at work :-p
19:48 < gluxon> ljharb: Firefox on a flash drive is the thing -> #portableapps
19:48 < ljharb> no, i'm seriously skeptical that that many companies still have IE 6. microsoft doesn't even support it anymore.
19:48 < ljharb> and they support things for a DECADE even when everyone hates them for it.
19:48 < thomblake> keyosk: I think trolling?
19:48 < ljharb> i'm really not trolling.
19:48 < keyosk> My company supports IE6, because our userbase has a high percentage of sales coming from ie6
19:48 < ljharb> IE 6 users can't use most of hte internet.
19:48 < gluxon> ljharb: Because "if it words, don't change it"
19:48 < ljharb> lol
19:49 < keyosk> Either accept what i'm saying or argue with me because you want to troll, I really don't care
19:49 < gluxon> God, I hate people who say that so much.
19:49 < ljharb> i'd bet if you PAID them to upgrade, you'd save money on developmeny
19:49 < gluxon> Their mentality is so screwed up.
19:49 < ljharb> *development
19:49 < gluxon> ljharb: Are there code execution exploits in IE6?
19:49 < gluxon> If so, please link me to some.
19:49 < ljharb> tons
19:49 < gluxon> ljharb: Link me to one that I can put on my website.
19:49 < ljharb> they may all be fixed at this very moment, i'd have to look
19:49 < gluxon> I will execute code to download Firefox.
19:49 < ljharb> lol
19:50 < gluxon> Microsoft still patches IE6?
19:50 < ljharb> not anymore
19:50 < thomblake> Also, there are some businesses that make money from someone other than the one using the site.
19:50 < gluxon> ljharb: Do you know when they stopped?
19:50 < ljharb> 2012, when IE 6 was 10 years old
19:50 < pachet> when the last butterfly died
19:50 < thomblake> Like web surveys.  It's useful to let as many people as possible use the site, even if they're running an outdated version of lynx.
19:50 < ljharb> oh wait, maybe 2011
19:51 < ljharb> thomblake: i still 100% believe in progressive enhancement. i'm talking about all the awful hacks people put in to make features "work the same" in ie 6
19:51 < ljharb> thomblake: ie, as long as they can get to the info, you shouldn't care about any fancyness in IE 6. really IE 7 either.
19:51 < levilewis> It will be interesting to see where google takes webkit with their "blink" fork. I also wonder what will happen with Opera's presto rendering engine since they are going to adopt "blink". That leaves IE's trident engine and the gecko engine as the only two remaining major engines that are not based on webkit?
19:52 < ljharb> yep
19:54 < thomblake> It entirely depends on the application, and whether it's necessary is an empirical question.  Regardless of how important it *seems* that someone see fanciness in ie6, one should be able to imagine scenarios where something undesirable happens from leaving it out.
19:59 < keyosk> Look, if I had it my way, the amount of grief that is gone through to provide almost identical support through IE6 would be avoided. I would throw a message to the user telling them to upgrade, or apologizing if they are stuck in a situation where they cannot actually adjust the software on their machine. I don't have it my way. Our IE users are a significant enough of our company's income that is is a necessity to support them. Unfortunately, that's how
19:59 < keyosk>  the business world works. Some products can be launched without this kind of tedium.
19:59 < njrD> charge them IE tax
19:59 < keyosk> lol, we charge them enough for our services that they're paying for the extra work.
20:00 < levilewis> lol, I like the idea of an IE tax.
20:01 < keyosk> I've seen it on ecommerce websites before, it's a really interesting concept.
20:05 <@MI6> joyent/node: isaacs created branch v0.10-merge - http://git.io/YwyzCQ
20:13 < Nika_> I have a function like this http://pastebin.com/e7biLRhY  how do I call a callback in the main function only after the playlist stuff is finished?
20:15 < pachet> keyosk ^sync eh?
20:15 < keyosk> Eh?
20:15 < Sven_vB> Nika_, call it inside the inner callback function
20:15 < Sven_vB> right after the for loop finishes
20:15 < Nika_> it says undefined
20:16 < Sven_vB> well, maybe better after the if
20:16 < Nika_> TypeError: undefined is not a function
20:16 < Sven_vB> what says undefined?
20:16 < Nika_>       callback();       ^ TypeError: undefined is not a function
20:17 < keyosk> Because you called getSongs without passing it a callback..
20:17 < Sven_vB> then debug the value of the "callback" parameter before calling it
20:17 < pachet> keyosk nevermind. just being snippy -- my first comment @ Nika was to use a callback even though s/he said it should be synchronous
20:17 < keyosk> Right and I was being snippy back at you saying but using a callback isn't synchronus :P
20:18 < Sven_vB> also you might want to add a delay or youtube might ban you for flooding them with requests.
20:18 < pachet> heh
20:18 < Nika_> getSongs('PL732E1FA39FBC80C0',120,function(err, data) {   console.log('finished'); });
20:18 < pachet> misassumptions heaped on misunderstandings
20:18 < Sven_vB> Nika_, in line 5 there is a call w/o a callback
20:18 < keyosk> All based on people being people.
20:18 < pachet> <3
20:18 < Nika_> omg
20:18 < Nika_> i am bad
20:18 < Nika_> thanks
20:19 < keyosk> Sven_vB makes a really valid point, limit how fast you're hitting youtube or you'll be really frustrated
20:20 < keyosk> Google has daily api hit limits, but they also have minute by minute limits that you don't want to hit
20:20 < Nika_> somethign like settimeout?
20:21 < keyosk> That would be sufficient
20:21 < Nika_> ok, thanks
20:21 < keyosk> np
20:33 < levilewis> how do you guys feel about coffee script? I keep bouncing back and forth with interest. I enjoy using it for a bit, then decide I don't like it. Stop using it, then check it out again later. Not sure how I feel about the longer term maintainabilityâ€¦ and being locked into that syntax. Maintaining the generated coffee files seems like it would be more hellish than just rewriting should one ever decide to stop using itâ€¦
20:35 < nathan7> levilewis: I dislike CoffeeScript, I play with Coco a lot though
20:36 < Ritzton> hello
20:36 < levilewis> haven't heard of that one. checking it out
20:36 < bingomanatee> good afternoon
20:37 < Kennythehitman> CoffeeScript is fine for smaller projectsâ€¦one-file type shit
20:37 < Kennythehitman> I stick to vanilla JS for anything serious/large
20:37 < bingomanatee> Is there an elegant way to use chai to compare prototypical equality between two class instances?
20:39 < Fusl> is there a way to minimize the buffersize of readline?
20:39 < Fusl> so if i do a readline.pause() that readline doesn't accept data from stdin anymore?
20:44 < ljharb> bingomanatee: foo.prototype === bar.prototype?
20:45 < bingomanatee> yea thats what it takes. 
20:57 <@MI6> joyent/node: Brandon Frohs v0.10 * 49300a4 : doc: Fix link to open issues on GitHub. (+1 more commits) - http://git.io/FwmWEg
20:59 <@MI6> joyent/node: isaacs created branch v0.10.7-release - http://git.io/MD5B2Q
21:05 <@MI6> joyent/node: isaacs master * 61c9f78 : Merge remote-tracking branch 'ry/v0.10' into master (+29 more commits) - http://git.io/UIvWPg
21:30 < Ritzton> I would need some help please, I have the same problem and I am only using socket.io, not express.io => https://github.com/techpines/express.io/issues/24
21:36 <@MI6> joyent/node: isaacs created tag v0.10.7 - http://git.io/WcmaoA
21:38 <@MI6> joyent/node: isaacs v0.10 * 77de207 : blog: Release 0.10.7 (+3 more commits) - http://git.io/t7Rvxg
21:41 < Nika_> what is the patter to replace (text) including the brackets (regex)
21:41 < kessler> Lo folks, suppose one wants to go about and write a native extension that walks the heap and replace all the references of something to another, is that even possible using v8 apis ?
21:41 < Nika_> pattern*
21:42 < keyosk> 'String with [Stuff]'.replace(/\[Stuff\]/,'nada');
21:42 < Nika_> ok thanks
21:42 < keyosk> np
21:51 < cortexman> anyone know the nameof the module that transparently proxies objects removing the distinction between client and server?
21:52 < nathan7> cortexman: dnode?
21:53 < cortexman> not bad but it was more polished than that
21:57 < cortexman> twas meteor.com
22:08 < Nika_> how do i throw callback after for loop finishes?
22:09 < Zolmeister> callback()
22:09 < Nika_> it will throw callback doesn't matter if for finishes 
22:10 < Zolmeister> Nika_: sorry, I don't understand what your doing, maybe you could post your code?
22:10 < keyosk> The first line of code directly following the for loop is executed after the for loop finishes
22:10 < keyosk> Because for loops are synchronous
22:10 < Nika_> oh ok then
22:10 < Nika_> sorry Zolmeister
22:14 < asterick> Question, is there an easy way to turn on Object.observe in node.js?  I checked the --v8-options list and couldn't find anything.
22:19 < keyosk> You could always make your own version of that functionality if you really need it
22:19 -!- Nexxy changed the topic of #Node.js to: ship it - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
22:23 < asterick> keyosk: I can use harmony proxies instead, it would just be nice to use since it's default on in chrome
22:23 < keyosk> It's not..
22:23 < keyosk> It's still in experimental
22:23 < asterick> Hmm.. I might have a flag enabled then
22:24 < keyosk> Yeah I believe you heave your experimental js flag enabled right now
22:24 < asterick> Well darn.   I guess I can just poly fill it
22:25 < keyosk> Someone seemes to have made it
22:25 < keyosk> https://gist.github.com/jdarling/4173299
22:25 < asterick> Yep, looking at that now
22:26 < keyosk> "Limits so far
22:26 < keyosk> Built using polling in combination with getter&setters. This means that if you do something quick enough it won't get caught."
22:27 <@isaacbw> lol
22:28 < gluxon> isaacbw: Can I call you Izzy? :D
22:29 <@isaacbw> umm
22:29 < keyosk> I've never heard of isaac shortend to izzy o_O
22:30 < gluxon> keyosk: It was in this thing -> http://www.muppetlabs.com/~breadbox/txt/al.html
22:30 < gluxon> "Note: "Herb" actually refers to Hermann Minkowski. (And "Izzy" and "Ari" are, of course, Isaac Newton and Aristotle.)  "
22:31 < keyosk> Thanks, you've shown me my first example of someone referring to an isaac as izzy ^^
22:31 < gluxon> Izzy Newton :D
22:31 <@isaacbw> lol
22:31 < keyosk> One of my neighbours is a mexican named Israel, and his wife calls him Izzy :P...
22:35 < pachet> our kid's name is isobela, izzy for short
22:35 < pachet> my god dont you see whats happening
22:35 < niggler> dafuq?
22:38 < gluxon> I want to call isaacs Izzy.
22:39 < slicky> well that's interesting. In chrome, if I pipe a download (from another site) through our site in express, to the end user, chrome takes a ".docx" file and turns it into a *.zip file.
22:39 < gluxon> And isaacbw Izzy without the s.
22:39 < Nika_> http://pastebin.com/ACcx3N2n can anyone help me? I have wrtting the question at the end
22:39 < Nika_> written
22:40 < gluxon> Nika_: Did you ask this earlier?
22:40 < keyosk> Nah this code snippit is different
22:40 < Nika_> yeah, but someone said that for is asynchronous, but spotify isn't
22:41 < gluxon> Nika_: Putting callback() at the bottom of for doesn't work I assume?
22:41 < Nika_> nope
22:41 < keyosk> No it wouldn't work..
22:41 < gluxon> Nika_: This is one way to do it.
22:41 < keyosk> The for loop finishes running before all the searches finish
22:41 < gluxon> I'm not sure how clean it is.
22:41 < gluxon> Do 
22:41 < gluxon> if (i <= list.length - 1;) {
22:41 < gluxon>   callback();
22:41 < gluxon> }
22:41 < gluxon> Inside the for.
22:42 < gluxon> At the bottom of it.
22:42 < gluxon> Make sense..?
22:42 < keyosk> No, I do NOT agree.
22:42 < Nika_> i tried it
22:42 < Nika_> but
22:42 < keyosk> Put that at the bottom of the spotify search function
22:42 < Nika_> i can't find all the songs in spotify
22:42 < keyosk> Not the bottom of the for loop
22:42 < Nika_> so one list is smaller
22:42 < paulfryzel> Nika_: a simple solution would be to keep a count of processed tracks in the list, when you've exhausted that, you've processed the entire list and you can call the final callback
22:42 < gluxon> Yes, what keyosk.
22:42 < gluxon> Didn't look inside the for loop to see that a call is made.
22:42 < gluxon> *Yes, what keyosk said
22:42 < keyosk> ^^
22:42 <@isaacbw> gluxon: that's such a nonidomatic if conditional :(
22:43 < Nika_> ok, thanks again i will try it
22:43 < pachet> gah
22:43 < gluxon> isaacbw: I know :(
22:43 < gluxon> isaacbw: What's your solution?
22:43 < hipertracker> What's the best client for Sphinx searcher? I need library which understand new Sphinx connection syntax. node-sphinxapi module can't listen at 127.0.0.1:3202:mysql41 
22:43 < gluxon> That was just one that I belived would worked.
22:43 < pachet> you have no way of knowing whether the last spotify search in the for iterator is going to be the last one to have its request resolved
22:43 < keyosk> Exactly
22:43 < gluxon> Such a simple problem.
22:43 < keyosk> What you need to do is create an counter above the for loop
22:43 < keyosk> When each spotify search function finishes increment the counter
22:44 < gluxon> keyosk: Ehh? Why?
22:44 < keyosk> Check to see if that counter is = length
22:44 < pachet> ^
22:44 < keyosk> Then you'll know when EVERY ONE has finished
22:44 < keyosk> And when the last one is done
22:44 < pachet> thank you keyosk
22:44 <@isaacbw> gluxon: if(i < list.length) {
22:44 < keyosk> Welcome pachet
22:44 < keyosk> isaacbw in this context that's not good either...
22:44 <@isaacbw> I have no idea what the context is
22:44 < keyosk> You can't rely on 'i'
22:44 < gluxon> isaacbw: Oh, I see what you meant.
22:44 < gluxon> isaacbw: That wasn't my code though.
22:44 <@isaacbw> oh, okay :P
22:44 < gluxon> isaacbw: That is the conditional that will break the for loop.
22:45 < gluxon> In the original code.
22:45 < keyosk> 'i' will reach .length before all the searches potentially finish
22:45 < gluxon> My suggestion is to use that to tell when for has finished its job.
22:45 < keyosk> What I said about an alternate counter is the only way to know when it's truely finished
22:45 < gluxon> I concur with keyosk though.
22:45 < pachet> i mean, we're sitting here reinventing the wheel
22:45 < gluxon> I see your the issue with the if.
22:45 < pachet> there are modules for this :[
22:45 < gluxon> It took me a while.
22:45 < keyosk> Yes but this is a TRIVIAL task
22:45 < gluxon> pachet: What module?
22:45 < keyosk> You don't need async module to do this very easily
22:45 < pachet> async
22:45 < paulfryzel> pachet: i disagree... this is a trivial task... no reason for async or the rest
22:45 < keyosk> Thanks paul :D
22:46 < pachet> paulfryzel that's true, but this sounds like Nika_'s first exposure to this problem space
22:46 < gluxon> How would you make that code not async..?
22:46 < pachet> in which case a link to async or some similar module might not be out of hand :[
22:46 < gluxon> I try to avoid for's in general.
22:46 < Nika_> it's my first time working with asynchronous language
22:47 < pachet> welcome to the void
22:47 < paulfryzel> all the better reason to take a little extra time (and maybe even a little extra code) and understand what's happening :)
22:47 < gluxon> keyosk, paulfryzel: What do you to recommend as the real solution to this problem?
22:47 < gluxon> Use async.js?
22:47 < pachet> keyosk already typed it out
22:47 < pachet> increment a counter
22:47 < keyosk> var counter = 0; at the top of his spotifyList function
22:47 < keyosk> And the bottom of his search callback function :
22:47 < keyosk>     counter++;
22:47 < keyosk>     if (counter = list.length) {
22:47 < keyosk>       callback();
22:47 < keyosk>     }
22:47 < keyosk> Problem solved
22:48 < keyosk> == ^^
22:48 < gluxon> pachet: That feels so ugly though.
22:48 < keyosk> It's not ugly it's what you DO..
22:48 < paulfryzel> if there were a lot of things going on and this was an extremely tricky set of events that required order, i don't think async or Q are out of the question, but for now i agree with keyosk's solution
22:48 < gluxon> It's ugly because this is code that doesn't need to be async.
22:48 < pachet> wat
22:48 < keyosk> gluxon that doesn't make sense, this is a network call to google's api
22:48 < keyosk> It is ASYNC
22:49 < paulfryzel> gluxon: i don't have the context to tell if this needs to be async or not, what if spotifyList is being called inside of a req handler?
22:49 < gluxon> I am saying it's not async as in "do this, then do this, and finally, do this"
22:49 < keyosk> Nika do you need me to paste bin my explanation for you or do you get what i'm telling you to try?
22:50 < keyosk> http://pastebin.com/ArHvrY2Y
22:50 < keyosk> There you go
22:50 < Nika_> yeah i am trying to get it working but as i am using spotify module it will take some time
22:50 < Nika_> oh ok
22:50 < Nika_> i will try it
22:50 < paulfryzel> keyosk: i'm going to guess he wants to pass array to callback as well
22:50 < keyosk> I only added 4 lines of code, you should be able to see what has been done
22:51 < keyosk> paulfryzel: probably
22:51 < gluxon> Actually, you added 5 XD
22:51 < keyosk> One thing at a time :P
22:51 < paulfryzel> :)
22:51 < paulfryzel> fair enough
22:51 < keyosk> lol gluxon
22:51 < keyosk> As you can see I use ++ to count
22:51 < gluxon> But it's so ugly :(
22:51 < keyosk> My brain doesn't quite work that way
22:51 < keyosk> :P
22:51 < gluxon> What's wrong with that..?
22:52 < keyosk> Using async instead of adding 5 lines is ugly...
22:52 < gluxon> keyosk: I think I'm a bit confused. You say "using async" this isn't already async?
22:52 < Industrial> Why does Node.js use null as the first argument to the callback functions, if there is no error? If i call a function with no arguments (at whichever point in the arguments list) it's undefined, not null.
22:52 < keyosk> Oh yeah keep in mind if you reach err my idea will totally break
22:52 < gluxon> Are you talking about the Async.js module?
22:52 < keyosk> I'm talking about a library gluxon
22:52 < pachet> gluxon he means the m---yeagh
22:52 < gluxon> Ok, thank you :-/
22:52 < keyosk> Since err will return early you need to handle the counter increment there too..
22:52 < gluxon> Async is creating the issue.
22:53 < keyosk> Anyway, you'll get it eventually ;)
22:53 < gluxon> keyosk: No, I get your code.
22:53 < gluxon> It's what I would have done.
22:53 < keyosk> I know YOU do
22:53 < keyosk> I'm talking about Nika
22:53 < gluxon> It's just... argh.
22:53 < gluxon> keyosk: Oh, ok :(
22:54 < keyosk> Friday, the day of wondrous mis communications
22:54 < gluxon> I want to note that Nika_ hasn't spoken for a while and you didn't append her name :(
22:54 < Nika_> thanks keyosk it worked
22:54 < gluxon> *prepend
22:54 < pachet> keyosk :]
22:54 < keyosk> Np NIka_ keep in mind what I said about the if (err)
22:54 < paulfryzel> Nika_: make sure you handle the error case he mentioned there as well... you either need to call the callback or increment the counter
22:54 < keyosk> You need to do both actually
22:55 < keyosk> increment counter and check to see if the cb is to be called
22:55 < Nika_> yeah ok
23:02 <@MI6> joyent/libuv: Fedor Indutny v0.10 * d5fa633 : darwin: assume CFRunLoopStop() isn't thread-safe - http://git.io/P1P40Q
23:12 < Nika_> How do I make that when you come to url: /spotifyList.json?playlistId=$ID
23:12 < Nika_>  NodeJS would start executing that function, but it wouldn't load the website right away, keep it waiting.
23:12 < Nika_>  And it would only load after the function has been executed and callback function received from that function
23:13 < Nika_>  With the content from callback function?\
23:14 < keyosk> Nika_ I think for your sake we should stop coding this for you :(
23:14 < Nika_> ok, sorry
23:14 < keyosk> I just mean, you're not going to learn everything if we keep doing the hard work for you
23:15 < keyosk> I know it's easier to ask for help than it is to try something over and over and to understand how it's working
23:16 < Havvy> The secret is that you have to require('magic').doWhatIWant();
23:17 < keyosk> Now that's just mean -_-
23:23 < elliottcable> What's the â€˜bestâ€™ WebWorker implementation for Node.js?
23:24 < keyosk> Cluster?
23:24 < elliottcable> or is there another preferred methodology for true threading/concurrency tasks (besides cluster-style approach)
23:24 < elliottcable> (My code has to work across both Node.js and the browser, and I'd really prefer to use the worker API so that the same code operates identically on both client and server ... but I can implement two styles of threading if there's a good reason.)
23:25 < keyosk> The only good reason I can think of is that is the only native implementation that seems to be used by most people.
23:25 < keyosk> Then there is this though..
23:25 < keyosk> https://npmjs.org/package/webworker-threads
23:25 < keyosk> it's backed by C and shares the same api as browser webworkers
23:27 < mscdex> elliottcable: it probably wouldn't be that difficult to write a webworkers api on top of cluster
23:28 < elliottcable> mscdex â‘Š good reason to do that instead of try node-webworker-threads?
23:28 < keyosk> Because it's ghetto ;)
23:28 < keyosk> I mean. largely unused
23:29 < keyosk> I've never actually tried it. Nor have I tried the threads-a-go-go library it's built on (the c)
23:29 < mscdex> elliottcable: depends on what kind of implementation you want. with node-webworker-threads vs cluster it's threads vs processes
23:29  * elliottcable nods
23:29 < elliottcable> I've good reason to want threads; this is me implementing what is basically a massively-concurrent programming language *in* JavaScript.
23:29 < mscdex> and 'if my process dies all connections are gone' vs 'if my process dies only some connections are gone'
23:30 < elliottcable> and there's already seperate multi-process concurrency at a higher level ... this is me attempting to implement the low-level concurrency between parallel bits of functions.
23:30 < keyosk> Oh yeah I forgot
23:31 < keyosk> Before you use node webworker threads
23:31 < keyosk> It has a really shitty ability to share objects
23:31 < elliottcable> I was planning to avoid that entirely?
23:31 < elliottcable> aren't WebWorkers supposed to be string-only *anyway*?
23:31 < keyosk> I remember before I used it I stopped and went, what the fuck, I can't access my libraries from it
23:32 < keyosk> I really think you should stick with cluster
23:46 <@MI6> joyent/node: Robert Kowalski master * 8123560 : module: use path.sep instead of a custom solution - http://git.io/jgyP1g
23:58 <@MI6> joyent/node: isaacs v0.10 * f57ff78 : src: Remove superfluous static_cast - http://git.io/uvBtxA
--- Log closed Sat May 18 00:00:15 2013
