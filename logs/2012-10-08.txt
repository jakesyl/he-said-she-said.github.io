--- Log opened Mon Oct 08 00:00:32 2012
00:04 < Industrial> jmoyers: your eyes burned, show me an example of good server side form validation with NodeJS. one up me! (so I can learn :p). I know I should do proper i18n but hey, small scope.
00:05 < Tarq> hey guys
00:05 < Tarq> Anyone know what happened to the hook.io project?
00:05 < gkatsev> Tarq: dead :(
00:05 <@Nexxy> drama
00:06 <@Nexxy> Industrial, jmoyers: Alex Slexton was talking about jedtoolkit yesterday
00:08 < Industrial> Nexxy: awesome, I'll watch that :)
00:09 <@Nexxy> yeah! it looks really promising
00:10 < jmoyers> Industrial i cant remember what burned ;-)
00:10 < jmoyers> i think you were using a seq chain in coffeescript right?
00:11 < jmoyers> i like something like https://github.com/chriso/node-validator
00:11 < jmoyers> perhaps combined with models which self validate fields
00:11 < jmoyers> keeping things seperate on a per field/property basis
00:11 < Daegalus> Nexxy: if you are still bored, you can always write more JS :P
00:12 < jtomasrl> how can i use a function inside a js file as a object method?
00:13 <@Nexxy> object.method = require('your/file.js')
00:13 <@Nexxy> assuming uou are exporing the funcyion
00:13 <@Nexxy> err
00:14 <@Nexxy> you* exporting* function*
00:15 < jtomasrl> is it possible to export that "object.method" ?
00:15 < jmoyers> by exporting the object?
00:16 < jmoyers> or the method itself
00:16 < jmoyers> module.exports = object.method = require()
00:16 < jtomasrl> let me try
00:18 < niggler> mscdex: you here?
00:18 < harrydog> anyone know what might cause this error: io.sockets.on('connection', function (socket)
00:18 < harrydog> the console says sockets is undefined
00:19 < niggler> isnt socket in net?
00:20 < jtomasrl> how can i make this works? https://gist.github.com/eba60b96d6c599d9c26e
00:20 < pancake> how can i redraw the readline prompt?
00:21 < pancake> oh rl.prompt(true)
00:21 < harrydog> probably, i'm trying to use socket.io with express though
00:22 < s5fs> Nexxy: hai
00:28 <@Nexxy> s5fs ohai!
00:28 < s5fs> Nexxy: you missed a totally sweet hang yesterday, nbd ;-) it's it like 2a for you right now?
00:28 <@Nexxy> yeah lol
00:29 <@Nexxy> I heard!
00:36 < LouisT> evening
00:39 < s5fs> evening
00:51 < saudude_> hey guys
00:52 < saudude_> does anybody know if there's a way to wrap a built-in javascript object with your own object, but expose the interface of the built-in in the wrapper?
00:52 < saudude_> it's easier to explain with an example: http://codepen.io/anon/pen/qnBvf
00:54 < MI6> joyent/node: isaacs streams2 * 9539cf9 : streams2: Tests of new interfaces (+28 more commits) - http://git.io/Tb2TOA
00:59 < vicapow> anyone know of a file stream reader that emits an event on custom delimiters?
01:01 < jmoyers> saudude_ you're describing prototype inheritance. look at util.js in node core for inherits
01:01 < jmoyers> then check out something like stream.js vs events.js -- stream inherits eventemitter
01:02 < saudude_> jmoyers: did you check my code pen example? would prototype inheritance allow me to connect "y" to "q" like that?
01:02 < saudude_> jmoyers: currently "y.connect(q)" throws a type error because "q" is not an AudioNode, it's a function with a  property that is an AudioNode
01:03 < Aria> vicapow: It's easy to write. checkout https://github.com/aredridel/linebuffer for an example
01:03 < jmoyers> blech, so it uses instanceOf to check the type?
01:03 < jmoyers> you can fool that
01:03 < vicapow> aria: that link seems to be dead
01:04 < saudude_> jmoyers: i'm not sure, it's all native code
01:04 < vicapow> i'm actually working on my own right now, since i couldn't find one that seems to work exactly now i wanted. there's a few that new new lines but my use case requires 2 newline characters to match.
01:05 < Aria> Oh, bah. Did I not publish it? Grr. One sec, vicapow.
01:05 < vicapow> aria: awesome
01:05 < jmoyers> vicapow http://code.google.com/p/jslibs/wiki/JavascriptTips#Objects,_constructor_and_instanceof -- cant recall what the rules are exactly
01:05 < jmoyers> err, wrong person
01:05 < jmoyers> saudude_
01:06 < jmoyers> but, you can trick an instanceOf check pretty easily, if thats what its using
01:06 < Aria> Oh, doh. Wrong repo is all, vicapow. https://github.com/aredridel/node-linebuffer
01:06 < vicapow> aria: thanks. i'll give it a look
01:06 < saudude_> jmoyers: interesting! i'll stick that in my code example and try it, one sec
01:07  * Slade- wonders if he should use prototype more
01:08 < saudude_> jmoyers: http://codepen.io/anon/pen/qnBvf console says Invalid Invocation
01:08 < saudude_> jmoyers: :/
01:10 < jmoyers> let me take a look
01:16 < jmoyers> saudude_ yeah, im not familiar enough with the audio api
01:17 < saudude_> jmoyers: me neither apparently :P. it's frustrating because it's designed with a really nice graph structure underneath, but if you want to make your own plugins you have to wrap the whole structure
01:17 < saudude_> jmoyers: is it a bad idea to modify the prototype of the audio node itself?
01:18 < jmoyers> yes, yes it is
01:18 < jmoyers> like i said, you should be able to create a new 'child class' if you have access to the contstructor of the thing you are looking to mimic
01:18 < jmoyers> i just dont know enough about those factory methods to know whats what
01:19 < saudude_> what do you mean child class?
01:19 < saudude_> cause i do have access to the constructor i believe
01:21 < saudude_> jmoyers: http://codepen.io/anon/pen/qnBvf check it out now
01:21 < saudude_> jmoyers: i might be treading on dangerous waters with that
01:21 < nicholasf> what's the best way to stub out a service? (i.e. mocha is going to create a request post and send it to this stub?)
01:22 < nicholasf> nm just found https://github.com/flatiron/nock
01:28 < saudude_> jmoyers: just kidding :( don't have access to the constructor. it's not callable as it's native code
01:39 < Slade-> is there a way to synchronize after a number of asynchronous events in some clever way?
01:40 < Aria> Yes. Often, keep a count of outstanding callbacks, and when they've all returned, fire one of your own.
01:40 < jmoyers> Slade- or async/caolan
01:40 < jmoyers> or whatever flow control construct you want
01:40  * Slade- looks it up
01:41 < Slade-> nice :)
01:46 < Slade-> lots of couchdb on that list
01:46 < larryapplegate> jmoyers: the apple sample code works fine with node-formidable. I was apparently having some kind of unrelated issue, moved to a different mac. so i won't be using the framework you suggested, the apple frameworks are better-integrated.
01:47 < larryapplegate> now i must learn the basics of networking.
01:48 < Raynos> Slade-: after or async iterators
01:48 < Slade-> looking at caolans async and his nimble
01:49 < Raynos> Slade-: https://github.com/Raynos/after is the simplest construct for that
01:50 < larryapplegate> Raynos: thanks again for your help earlier
01:50 < Slade-> ah interesting
01:50 < Raynos> No problem!
02:04 < sinclairzx> Lorentz: y, hello thar
02:10 < niggler> question: with node-gyp is there a way to generate a makefile?
02:11 < niggler> i viscerally type "make" 
02:12 < jtomasrl> i making a iOS app that works with an external API, should I make a request for every information i request or should i send the whole JSON object with data?
02:13 < larryapplegate> what external API are you using?
02:14 < jtomasrl> done by myself
02:14 < niggler> many small requests are expensive
02:14 < larryapplegate> well, you will have control of both ends
02:14 < niggler> you are better off sending everything at once
02:15 < jtomasrl> but i will use more client memory
02:15 < niggler> you are going to send all of the data anyway, right?
02:16 < jtomasrl> not send, but show some status on the phone
02:27 < mscdex> niggler: yep
02:27 < niggler> hey mscdex i made a comment on github
02:28 < niggler> i put some hacks in but im not too happy with how they look -- figured you'd have some thoughts
02:29 < niggler> adding mouse support is straightforward: call mousemask and then handle the mouse event -- but i wasnt sure if it made more sense to keep the inputChar callback or do something differet.  I ended up making something called inputMouse and just passed the 5 variables (x,y,z,mouse id and state)
02:29 < niggler> not sure what you think is the right approach
02:41  * Slade- seems to need to learn about promises
02:43 <@Nexxy> not for Node
02:44 < Slade-> was that to me?
02:46 <@Nexxy> yeah
02:46 < niggler> Nexxy: familiar with node-gyp?
02:47 < Slade-> interesting ok. saw them in the amqp lib so
02:49 < jmoyers> promises are an optional abstraction
02:49 < jmoyers> aren't included in node core etc
02:49 < Slade-> is there a way to 'requeue' an event? a yield or something
02:49 < jmoyers> nooo
02:50 < Slade-> hm ok
02:50 < jmoyers> you are headed down the wrong road
02:50 < jmoyers> what are you trying to do?
02:50 < Slade-> hmm so i have 2 connections. sockjs, and amqp..  i'm going to start them both up, but if the amqp goes down for some reason, i want the rest to wait till it comes back up
02:51 < jmoyers> you can build a queue abstraction for that
02:51 < jmoyers> or a stream abstraction that can pause and deal with backpressure
02:52 < jmoyers> if your amqp destination queue is not up yet, tell the client to pause until it comes back up, then resume when its up
02:52 < jmoyers> or just queue up the messages
02:52 < Slade-> hm ok
02:53  * Slade- doesnt especially like the amqp module btw. :/
02:59 < harrydog> anyone familiar with joyent? can i run multiple node(express) apps, on one machine?
03:05 < mdedetrich> hi everybody!
03:08 < astropirate> Hello mdedetrich!!
03:08 < mdedetrich> hello!
03:09 < astropirate> Anyone looking for a freelance Node developer? PM me :)
03:11 < harrydog> is it possible to run multiple servers off the same app?
03:12 < astropirate> harrydog, sure
03:15 < harrydog> i wonder what's the best way to organize it
03:19 < jmoyers> harrydog vhosts
03:20 < harrydog> not sure what that is
03:20 < jmoyers> google express vhost
03:20 < jmoyers> its a way to do exactly what you just said.
03:21 < harrydog> is that like creating multiple "instances", or sandboxing each server
03:22 < jmoyers> harrydog https://github.com/visionmedia/express/blob/master/examples/vhost/index.js
03:23 < harrydog> cool, thanks!
03:47 < sinclairzx> hey guys, what to people here think about callbacks on constructors
03:47 < sinclairzx> for example...
03:48 < sinclairzx> var a = new A(10, function() {
03:48 < sinclairzx>    // a is fully constructed
03:48 < sinclairzx> ]);
03:48 < sinclairzx> this should be normal right?
03:50 < sinclairzx> lets say that A(..) is doing all sorts of things, and without the callback, there is no guarantee that A is fully constructed.
03:51 < SomeoneWeird> huh
03:52 < sinclairzx> SomeoneWeird: does the following .... 
03:52 < sinclairzx> var a = new A(10, function() { }); 
03:52 < sinclairzx> look strange?
03:53 < SomeoneWeird> why pass a blank function?
03:53 < sinclairzx> var a = new A(10, some_non_blank_function); 
03:53 < sinclairzx> ^ ?
03:54 < SomeoneWeird> that's how a lot of modules work
03:54 < SomeoneWeird> :))
03:55 < BraisonWu> test
03:56 < BraisonWu> hey people!
03:56 < sinclairzx> SomeoneWeird: the thing is, you cannot guarantee that A() has been constructed without the callback 
03:56 < sinclairzx> so, i suppose it's ok right?
03:56 < BraisonWu> hey dude! what's up?
03:56 < chilts> usually people make a function which will do the new for you (and have a callback in which A will be passed)
03:57 < SomeoneWeird> if it's blocking, it will be 
03:57 < BraisonWu> what the hell u are talking about!!
03:57 < SomeoneWeird> nothingmuch
03:57 < BraisonWu> hey chilts..who are u?
03:58 < BraisonWu> someoneweird : what's ur name
03:58 < SomeoneWeird> someoneweird
03:58 < chilts> sinclairzx: A(10, function(a) { ... }); // once all async stuff is done, the callback is called with your new 'a'
03:58 < chilts> does that make sense?
03:58 < chilts> so A() does the 'new' and gives you back 'a' when all the async stuff is done
03:59 < BraisonWu> someoneweird : I mean, your real name
03:59 < chilts> (of course, you'd probably name the function something other than 'A' since 'A' is what you're creating) :D
03:59 < SomeoneWeird> someon e weird
03:59 < SomeoneWeird> chilts, he's creating a not A :p
03:59 < chilts> so MakeMeANewA(function(a) { ... });
03:59 < chilts> SomeoneWeird: he's creating a new A, which he's assigning to a
04:00 < BraisonWu> someoneweird : whatever! where are u from anyway?
04:00 < SomeoneWeird> yeah... but but js is capital sensitive
04:00 < chilts> exactly
04:00 < SomeoneWeird> the function is called A, hes assigning it to a
04:00 < sinclairzx> chilts: but, isn't it nicer (and less verbose) to have the "new" keyword in there?
04:00 < chilts> SomeoneWeird: 03:58:45 < chilts> SomeoneWeird: he's creating a new A, which he's assigning to a
04:01 < SomeoneWeird> >> a = 1; A = 2;
04:01 < purr> SomeoneWeird: (number) 2
04:01 < SomeoneWeird> see
04:01 < chilts> sinclairzx: yes and no, depends on your preference
04:01 < sinclairzx> var foo = new Foo(function() { /* foo is initialized */ }
04:01 < SomeoneWeird> > a = 1;
04:01 < SomeoneWeird> 1
04:01 < SomeoneWeird> > A = 2;
04:01 < SomeoneWeird> 2
04:01 < SomeoneWeird> > a
04:01 < SomeoneWeird> 1
04:01 < sinclairzx> vs
04:01 < SomeoneWeird> > A
04:01 < SomeoneWeird> 2
04:01 < SomeoneWeird> spam
04:01 < sinclairzx>  createFoo(function() {});
04:01 < SomeoneWeird> preference
04:02 < chilts> yeah, preference
04:02 < sinclairzx> chilts: ok :)
04:02 < sinclairzx> chilts: what is your preference , create or "new" ?
04:02 < chilts> I'm just giving you an alternative which many people prefer
04:02 < BraisonWu> hey peanut!
04:02 < BraisonWu> feck you alllll!!!!!
04:02 < chilts> sinclairzx: in this case, where your constructor is doing async stuff, I prefer the create
04:02 < SomeoneWeird> australia, BraisonWu 
04:03 < chilts> MakeMeANewA(function(a) { ... async stuff has already happened, this is the calledback function ... });
04:03 < sinclairzx> chilts: yup, ok
04:03 < chilts> sinclairzx: but you could try both ways and see what you like the most
04:04 < sinclairzx> chilts: i kinda like the constructor approach
04:05 < sinclairzx> chilts: but i don't know if its appropriate
04:05 < chilts> try it and see :)
04:05 < chilts> I really don't mind, am just giving you options
04:05  * sinclairzx does some research
04:05 < chilts> it's _your_ code after all :D
04:06 < sinclairzx> chilts: if i wasn't in JavaScript, and in say, C#, a async constructor would lead to null references
04:07 < sinclairzx> which is why it isn't allowed in C#
04:07 < chilts> yeah, don't know or care about C# :)
04:08 < sinclairzx> chilts: well, it doesn't matter what language it is, a convention made in one language, should be applicable for another
04:09 < sinclairzx> chilts: based on this alone, the createFoo(cb);  approach seems to make the most sense
04:11 < chilts> I don't think you can apply conventions in one language to other completely different languages
04:11 < chilts> they work differently, therefore they should be different
04:11 < chilts> I don't do the same things in Perl as I do in JavaScript (for obvious reasons)
04:11 < chrisdickinson> my 2 cents: i like the "new Class" syntax, and if it needs something async to be performed, provide a "Class.prototype.init = function(ready) {}" method.
04:12 < chilts> and I certainly wouldn't do the same thing in Java as I would in Lisp
04:12 < sinclairzx> chilts: well, this is true to some degree
04:12 < chilts> chrisdickinson: so that's like my suggestion above, it makes a new one for you?
04:12 < chrisdickinson> plus, if you treat the class constructor function as a "dumb init" and assign all potential attributes in the same order, it tends to play nice with V8's JIT
04:12 < chrisdickinson> chilts: yep. lemme whip up a quick example...
04:13 < sinclairzx> chrisdickinson: are you for or against a constructor with a callback?
04:13 < chrisdickinson> against constructor with callback
04:14 < chilts> chrisdickinson: :)
04:14 < chilts> ok, better go, it's hometime!
04:15 < sinclairzx> chrisdickinson: thanks for the insight :)
04:15 < sinclairzx> chilts: you too
04:15 < chrisdickinson> i tend to write something like this: https://gist.github.com/8d7095883f740d4e8843
04:15 < chrisdickinson> (showing subclassing as well.)
04:15 < chrisdickinson> note that the property that's eventually set on the instance is defined as null in the function constructor
04:16 < chrisdickinson> (i forgot the "proto.constructor = cons" bit, but that's not super important unless you're relying on `instanceof`)
04:16 < chrisdickinson> if you're writing a module -- like "fs", for example, writing a function that delegates to something like that under the covers isn't bad, either
04:47 < Aria> Ah, sweet. Web chat based on a node-backed XMPP BOSH server.
04:48 < TehShrike> Where?
04:49 < TehShrike> Also, I really want to find a decent Node XMPP client library that supports MUC
04:53 < mdedetrich> this may sound stupid, but I haven't done this before
04:54 < mdedetrich> I am trying to make a module which doesn't actually export anything, but modifies an object imported from require
04:55 < mdedetrich> requiring that module doesn
04:55 < mdedetrich> *requiring that module doesn't actually execute the module
04:55 < mdedetrich> how do you do this?
05:02 < Eleanor_pe_pe> qwerty
05:03 < Eleanor_pe_pe> what is that?
05:03 < mdedetrich> your face in a keyboards
05:03 < mdedetrich> thats what it is
05:04 < sheenobu> mdedetrich, oh! I figured it out
05:05 < astropirate>  sheenobu good job
05:06 < sheenobu> astropirate, are you being sarcastic?
05:06 < astropirate> what mean?
05:06 < mdedetrich> im confused
05:06 < sheenobu> astropirate, Oh I thought you were making fun of me
05:07 < astropirate> sheenobu, that wouldn't be too hard
05:07 < astropirate> BAZINGA
05:07 < sheenobu> ooo that stung
05:07 < SomeoneWeird> lol.
05:08 < sheenobu> astropirate, it seems like something someone not familiar with node or javascript might not know how to visualize
05:08 < astropirate> sheenobu,  i dont th ink i was here when you were exploring your problem
05:08 < astropirate> so i have no idea what the problem was :p
05:09 < sheenobu> astropirate, oh it wasn't my problem. someone mentioned it and I was like 'what the heck does he mean'
05:09 < astropirate> ahh
05:11 < niggler> holy fuck who has a mac?
05:12 < ashnur> filthy rich kids
05:12 < SomeoneWeird> nobody with a brain
05:12 < niggler> haha im thinking of replacing osx on this
05:12 < ashnur> :)
05:12 < sheenobu> yeah i'm stuck on osx for work. thinking of throwing linux on the thing
05:12 < sheenobu> http://pastie.org/4931302
05:12 < niggler> trying to chase down some ncurses issues
05:13 < mdedetrich> I have a mac :(
05:13 < sheenobu> that is the 10 minutes of work without testing
05:13 < niggler> had to make some new terminfo stuff to get click-drag to work but still have issues with truncated printing
05:14 < sheenobu> maybe 5
05:15 < astropirate> This is interesting
05:15 < astropirate> i guess node.js isnt "hot" anymore
05:15 < astropirate> there were many consulting gigs this time last year
05:15 < astropirate> this year nada
05:16 < sheenobu> hrm
05:16 < astropirate> i guess we are out of the hype phase
05:16 < etcetera> what would prevent other projects from adopting npm as a package manager?
05:16 < TehShrike> mdedetrich: did you find the answer to your question?
05:16 < niggler> im glad consulting is the measure of whether a language or framework is hot
05:16 < etcetera> astropirate: conjecture or specific evidence?
05:16 < TehShrike> g'day niggler
05:16 < etcetera> niggler: ^ that.
05:16 < astropirate> pure conjecture
05:17  * etcetera has personally moved on to Go.
05:17 < astropirate> (i do freelance gigs however)
05:17 < astropirate> so it is based on reality
05:17 < sheenobu> anyone wanna C/C my first external node lib?
05:17 < niggler> wtf is c/c
05:17 < sheenobu> comments/critique
05:17 < TehShrike> Coddle/cup
05:17 < TehShrike> aw.
05:17 < sheenobu> clop/clop
05:17 < astropirate> hah
05:17 < astropirate> etcetera, how is it? i did the whole tutorial and made a simple web server
05:18 < etcetera> astropirate: the first week is horrible.
05:19 < etcetera> astropirate: now I just need to figure out what to build :-P
05:19 < SomeoneWeird> sheenobu, wat is it
05:19 < sheenobu> https://github.com/sheenobu/node-deface
05:19 < sheenobu> port of a ruby library
05:19 < astropirate> etcetera, you should come back and make node.js awesome with me :D
05:19 < astropirate> working on a couple of projects to make it more awesome
05:20 < etcetera> astropirate: if typescript gains traction, I may just come back.
05:20 < niggler> screw typescript
05:20 < astropirate> bahh i hate compile-to-js languages
05:20 < sheenobu> holy shit. it's a typed superset of js?
05:20 < sheenobu> I really don't like coffeescript
05:20 < sheenobu> but I'm not sure how i'd feel about typescript
05:20 < niggler> coffee script is also messed up
05:21 < niggler> i think there's enough community competency in javascript that its easier just to work in it
05:21 < ashnur> :D
05:21 < astropirate> I'm working on smart code completion for JavaScript. I've cracked the problem now I am implementing it :)
05:21 < sheenobu> hrm. typescript actually /looks/ like javascript and not ruby
05:21 < astropirate> I forone and i know others will kill for intelligent code completion the kind c++ and c# users so enjoy
05:22 < niggler> im thinking of using javascript as an extension language rather than tcl
05:22 < astropirate> and it is possible to do very good type guessing without using typescript
05:22 < niggler> astropirate: i wish ed had code completion :/
05:22 < astropirate> niggler, ed?
05:22 < TehShrike> One of the companies in my office is doing that
05:23 < sheenobu> oh whoa
05:23 < TehShrike> They're using V8
05:23 < sheenobu> typesafe raytracer demo
05:23 < niggler> editor
05:23 < astropirate> ohhhhh
05:23 < niggler> ed is the original editor
05:23 < niggler> i still use it quite a bit :)
05:23 < astropirate> XD
05:23 < TehShrike> They're writing JavaScript that gets interpreted by their other server-side code and also on the client, as I understand it
05:23 < niggler> by the time an ide loads, i can go in ed and make the changes i need
05:23 < astropirate> tehShrike they are workingon smart code completion?
05:24 < TehShrike> I don't know about code completion
05:24 < astropirate> ohh
05:24 < astropirate> sorry i thought thats wht you said
05:24 < TehShrike> At the moment, I'm just rolling with SublimeText's out of the box completion
05:24 < astropirate> I'm wondering if there would be a market for such a product
05:24 < astropirate> it might be my "thing"
05:25 < astropirate> for the next few months
05:25 < TehShrike> That would be cool - I think function scoping would make it tough, cross-file
05:25 < astropirate> tough
05:25 < astropirate> but i've cracked it!! :D :D
05:25 < astropirate> been thinking about this problem non-stop for past week
05:25 < astropirate> it will naturally be done in c++
05:26 < TehShrike> Naturally?
05:26 < astropirate> js is unfortuanately not fast enough :(
05:26 < TehShrike> hmm
05:26 < superjoe30> astropirate, visual studio has intellisense with typescript
05:26 < astropirate> superjoe30, yah, and that is pretty awesome
05:26 < astropirate> i want that for JS
05:26 < astropirate> without having to annotate types
05:27 < astropirate> it would ofcourse be a guess
05:27 < astropirate> but a very good guess
05:27 < superjoe30> interesting
05:27 < superjoe30> I challenge the fact that JS is too slow
05:27 < TehShrike> It would make me happy if you succeeded
05:27 < niggler> js is pretty fast for things
05:27 < TehShrike> It would make me even happier if it was a SublimeText 2 plugin
05:27 < superjoe30> I would venture to guess that if js is too slow, you're doing it wrong big-O style
05:28 < TehShrike> Related: https://github.com/felixge/faster-than-c
05:28 < astropirate> superjoe30, perhaps. I'm still planning and havent commited to any single approche
05:30 < astropirate> tehShrike ouch  sublime requires python
05:30 < astropirate> i would have to learn le pyton
05:30 < astropirate> its on the table 
05:30 < TehShrike> Yeah, it's true
05:31 < TehShrike> But as far as languages-to-have-to-learn goes, Python is more attractive than most (in my eyes)
05:31 < astropirate> my current goal is learning more haskell 
05:31 < astropirate> :D
05:32 < TehShrike> Haskell seems to be growing in popularity
05:32 < TehShrike> At least, among hipster programmers, I guess
05:32 < TehShrike> If that's even a term that makes sense
05:32 < astropirate> HAAHHA
05:32 < TehShrike> It's probably just the people I've been talking to, but I've been hearing "I've been spending more time playing around with Haskell" more often lately :-P
05:35 < niggler> its been going on for a while TehShrike 
05:35 < astropirate> since the 80s!
05:35 < niggler> but the leap from games to production hasn't happened
05:36 < TehShrike> I know, Haskell is one of the old languages
05:36 < niggler> granted that really hasnt happened with node yet
05:36 < TehShrike> And I also know that I've never heard of it getting close to production code
05:36 < TehShrike> But still, this last year or so, I feel like I heard it brought up more
05:37 < niggler> i suspect its relegated to those roles
05:38 < TehShrike> Well, I finally have a linux VM set up for node in my dev environment... it's probably time to start experimenting with dnode
05:40 < astropirate> i think its used in financial industry
05:42 < niggler> you are thinking ocaml
05:42 < niggler> and that's used by jane street
05:42 < hemanth> astropirate, need your views on https://github.com/joyent/node/issues/4091
05:44 < niggler> hemanth: you are forking one too many times
05:45 < niggler> also why arent you tasksetting?
05:46 < niggler> >>> require('os').cpus().length
05:46 < purr> niggler: ReferenceError: require is not defined
05:47 < hemanth> require('os').cpus().length.froEach() is what is been do, how too many times? niggler 
05:48 < Jesse__> hello
05:48 < niggler> nono in node run  require('os').cpus().length
05:49 < niggler> and make sure you have the right count
05:51 < TehShrike> Well huh http://bonsaijs.org/
05:53 < deoxxa> TehShrike: that looks very cool
05:53 < TehShrike> Indeed
05:53 < deoxxa> i wonder what the performance is like
05:53 < TehShrike> I don't know if I have any use for it at the moment, but it makes me happy anyway
05:53 < TehShrike> deoxxa: the demos look pretty smooth to me http://demos.bonsaijs.org/
05:53 < deoxxa> i actually have a bunch of things it would be awesome for at work
05:54 < hemanth> niggler, yes, my count is 4
05:54 < timeturner> TehShrike: have you tried paper.js before?
05:55 < timeturner> I tired it a while back but bonsai looks cooler
05:55 < timeturner> tried*
05:55 < hemanth> TehShrike nice one, r.fill(color('green').darker()); is fun
05:56 < TehShrike> timeturner: I have not
05:56 < TehShrike> I don't know what it is, but the home page make me giggle, in a good way
05:59 < astropirate> hemanth, you guys use node.js at dell? :o
06:00 < hemanth> astropirate, heh heh it's me only ;) 
06:00 < etcetera> astropirate: dell is a pretty MSFT focused shop. I imagine node.js is part of their toolbox.
06:00 < astropirate> ahh
06:01 < hemanth> etcetera, may be, not yet in our team :|
06:01 < astropirate> huuuu......
06:01 < astropirate> i just realized soemthign
06:01 < astropirate> i hope its just mebeing paranoid
06:01 < etcetera> hemanth: heh I imagine you're still on .NET 3.5 :-P
06:01 < astropirate> microsoft first embraced node.js
06:01 < astropirate> now they just extended it...
06:01 < astropirate> :(
06:01 < hemanth> etcetera, oh please, i don't like M$ stuff, i'm on ruby :D
06:01 < etcetera> hemanth: I mean for work...
06:01 < timeturner> why does microsoft use node when node uses v8 which is made by google
06:02 < hemanth> etcetera, yes! for work
06:02 < etcetera> hemanth: o rly? for what?
06:02 < hemanth> the team i'm in
06:02 < hemanth> n/w automation framework developement 
06:02 < Jesse__> I don't know much about node.js
06:02 < niggler> blah
06:02 < etcetera> hemanth: in english?
06:02 < Jesse__> I am a new-hand
06:02 < hemanth> astropirate, their typescript thinge ?
06:02 < astropirate> yes
06:03 < hemanth> hmm :\
06:03 < hemanth> etcetera, networking 
06:03 < Jesse__> Anyone can give me some lessons?
06:03 < astropirate> Jesse__, lessons?
06:03 < serdem>  timeturner, well, anders hejlsberg uses chrome himself  :)))  http://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript
06:03 < etcetera> hemanth: ah, stuff where you're IO bound, not CPU bound.
06:03 < etcetera> makes sense.
06:03 < hemanth> :)
06:03 < etcetera> the n/w threw me off
06:03 < niggler> Jesse__: there's a tutorial
06:04 < Jesse__> ah
06:04 < etcetera> hemanth: still...interesting to see a microsoft focused shop use ruby.
06:04 < Jesse__> tutorial, where? 
06:04 < niggler> look for "AN EXAMPLE: WEBSERVER" on the website
06:05 < Jesse__> I think node.js is interesting
06:05 < Jesse__> ok, thanks niggler
06:05 < hemanth> etcetera, why do you think D3LL is M$?
06:05 < niggler> Jesse__: and then http://nodejs.org/api/ for stuff as you need it
06:05 < niggler> dell is screwed
06:05 < hemanth> :(
06:05 < niggler> michael dell should just take it private
06:05 < niggler> actually there's a funny story
06:06 < etcetera> hemanth: heh, uhhh....they're a huge OEM. and their acquisition targets are mostly MSFT focused.
06:06 < niggler> dell bought back $30B of shares
06:06 < niggler> (over the past 15 years)
06:06 < niggler> its market cap right now?  $16B
06:07 < hemanth> hmm :{ 
06:07 < niggler> the problem with a statistic like that is that the long-term shareholders were screwed
06:07  * hemanth needs to code for food!
06:08 < etcetera> niggler: long-term share holders?
06:08 < niggler> heh yeah they exist
06:08 < niggler> if you held, you didnt benefit from share buybacks
06:08 < etcetera> information technology as a segment has really only been around for the last 25 years or so.
06:09 < etcetera> I'd like to see a retail investor who's bought dell when it went public and held.
06:09 < TehShrike> I wonder... as a JavaScript programmer with views of being an entrepreneur, what is the most practical route to go down, software sold as a product or a service?  Looking for customers among consumers, or businesses?
06:09 < hemanth> so most of the stuff in this worl boils down to $$
06:10 < LouisT> did you know if someone donates $0.01 to you using paypal, paypal keeps it? O.o
06:10 < TehShrike> Yes
06:10 < TehShrike> Also, don't use PayPal
06:11 < LouisT> TehShrike: some places just require paypal
06:11 < TehShrike> Sure, I use it in those cases, too
06:11 < TehShrike> But don't use them as a vendor
06:11 < TehShrike> Use Stripe or Dwolla (or both)
06:11 < TehShrike> Or, in meatspace, use Square!
06:12 < TehShrike> Taking digital money is in a much better place than it was last decade
06:12 < TehShrike> And PayPal has turned into the evil overlords
06:12 < LouisT> stripe "2.9% + 30 cents per successful charge. No setup fees, no monthly fees, no card storage fees, no hidden costs: you only get charged when you earn money."
06:12 < LouisT> would also take $0.01
06:12 < TehShrike> Yes
06:13 < ProLoser|Mac> yo
06:13 < TehShrike> The taking-one-cents thing is unrelated to why you shouldn't use PayPal
06:13 < ProLoser|Mac> i want a SUPA SIMPO app, 1 static document + 1 RESTful api
06:13 < ProLoser|Mac> what's the easiest way to do this?
06:13 < ProLoser|Mac> nothing relational
06:13 < TehShrike> I am familiar with one of those acronyms
06:13 < TehShrike> Wait, two
06:14 < LouisT> hm.. dwolla
06:14 < LouisT> Unlike traditional payment networks, it's actually pretty simple. Receiving payments under $10 is absolutely free. Anything above that costs the receiver $0.25. That's it.
06:14 < TehShrike> Yeah, Dwolla's pretty hot
06:14 < LouisT> but also everyone i know uses paypal
06:14 < LouisT> so not really useful
06:14 < TehShrike> LouisT: and that's why you support Stripe
06:14 < TehShrike> You just add Dwolla support if you want to support the really cool people (or, larger transactions)
06:25 < alucardX> hi
06:37 < aMoniker> I'm requiring a file twice that has this in it: "io.sockets.on('connection', function(socket) { console.log('events handler connected'); });"
06:37 < aMoniker> that console.log fires twice.
06:37 < aMoniker> I though modules in node were cached?
06:46 < mscdex> aMoniker: the contents are cached, in that they are not read from disk each time
06:47 < aMoniker> ah, but they're executed everytime, got it
06:47 < aMoniker> is that a good way to do things then? anytime something needs access to the events module, it calls io.sockets.on('connection')
06:48 < aMoniker> or should I have one module open a connection and store the socket as a global
06:49 < niggler> mscdex: finally fixed the OSX issue.  Had to apply a few patches from the apple site, rebuild the dylibs for ncurses globally, and then re-generate a custom terminfo that added the required codes
07:02 < TehShrike> aMoniker: as I recall, every require() call will return exactly the same object that was returned by any other require() call that happened against the same module
07:03 < TehShrike> So, whatever gets assigned to module.exports is going to be returned for every require() call against that library, no matter how many times that may be
07:03 < aMoniker> and the code in the module will be executed everytime
07:03 < TehShrike> No.
07:03 < aMoniker> it's not as if the results and exports are cached
07:04 < TehShrike> The code is executed once.
07:04 < aMoniker> executes twice for me
07:04 < TehShrike> Well, I could be misremembering the documentation, and lying to you
07:04 < TehShrike> But that doesn't sound right
07:05 < aMoniker> I require() it once in the file that I'm running 'node' against on the command line
07:05 < aMoniker> and then somewhere else in a file that gets required by that file
07:05 < aMoniker> and the console.log prints twice
07:05 < TehShrike> aMoniker: http://nodejs.org/api/modules.html#modules_caching
07:06 < aMoniker> "Multiple calls to require('foo') may not cause the module code to be executed multiple times."
07:06 < aMoniker> could that be written less clearly?
07:06 < TehShrike> Well... how is it unclear to you?
07:06 < TehShrike> It could cause the code to be executed multiple times
07:06 < aMoniker> "may not" can mean "will not" or "maybe won't"
07:06 < TehShrike> I think both are true
07:07 < aMoniker> they can't both be true
07:07 < TehShrike> If you have the same library in multiple spots
07:07 < TehShrike> Each time you load the library, if it is at a new path, the code will get run
07:07 < TehShrike> If it is from a path where it has been loaded from before, you'll get the same object as was created last time
07:07 < TehShrike> I believe.
07:07 < aMoniker> that's… odd
07:07 < aMoniker> it cares about where it's being called from?
07:07 < TehShrike> Now, due to how node_modules works, require('my_lib') could get you a different "library" depending on your path
07:08 < aMoniker> I wrote a function called include() that just requires against the base path
07:08 < aMoniker> because relative paths get tangled easily
07:08 < TehShrike> Personally, I like how node_modules works
07:09 < aMoniker> it means that if you want to move a file you have to update every require
07:09 < aMoniker> whereas if you use an absolute path you only have to update requires against that file
07:10 < aMoniker> so, even though my requires all use an 'absolute' path
07:11 < aMoniker> and therefore each submodule requires the same path for the one in question
07:11 < aMoniker> it gets executed twice because node keeps track of where the calls are coming from?
07:12 < TehShrike> I would avoid using paths in your require() calls
07:12 < aMoniker> why?
07:12 < aMoniker> wait, how else can you reference a module you've written?
07:12 < TehShrike> All right, at the risk of sounding like an idiot in front of the whole chat room, I'll tell you what I've gathered about modules so far
07:13 < aMoniker> everyone is going to point and laugh
07:13 < TehShrike> eh, I should be used to it
07:13 < TehShrike> So, in answer to your latest question, you should probably read over the whole of http://nodejs.org/api/modules.html
07:13 < TehShrike> Because it's actually fairly important
07:13 < mscdex> ircretary: tell niggler what changes did you make specifically?
07:13 < ircretary> mscdex: I'll be sure to tell niggler
07:14 < sorenso> Hi :) I'm looking for a process monitoring solution like Varnish has. Something that gives me the current state of all happening inside the http-server.
07:15 < aMoniker> right, so you need a path for custom modules
07:15 < aMoniker> whether it be relative or absolute
07:15 < TehShrike> Well, only if they're not in a node_modules folder
07:15 < TehShrike> Which, they probably should be
07:15 < aMoniker> that would mean my entire site would live in the node_modules folder..
07:15 < TehShrike> Most of it, probably
07:15 < aMoniker> why?
07:16 < TehShrike> Because it makes life better
07:16 < aMoniker> yes, why?
07:16 < TehShrike> So here's the thing
07:16 < aMoniker> what's the benefit?
07:16 < TehShrike> That I have gathered
07:16 < TehShrike> You will find many node.js programmers who are a big fan of breaking up their program's functionality across many, many modules
07:16 < TehShrike> This has benefits
07:16 < TehShrike> One of them is that you can reuse code pretty easily
07:17 < TehShrike> Another is that you can require() any bit of code whenever you like, in any module, and it will find the library you want pretty intelligently
07:17 < aMoniker> I can do that already with absolute paths
07:17 < TehShrike> Not if you want to roll out an arbitrary module onto some other system
07:17 < aMoniker> and if I have two files with the same name in different directories, keeping them in node_module would mean that I couldn't use a pathless require
07:18 < TehShrike> So, I don't know your system entirely
07:18 < TehShrike> But if you use npm for a little while, all of a sudden the world makes sense
07:18 < TehShrike> And also becomes much easier
07:18 < aMoniker> I'm using npm to get other modules
07:18 < aMoniker> but the site I'm writing isn't going to be published as an npm module
07:19 < TehShrike> And my company also recently created a private npm server
07:19 < TehShrike> But I think the principle is important
07:19 < TehShrike> Think of every module as a self-contained unit that can be included from anywhere
07:20 < TehShrike> And then... include it from anywhere
07:20 < aMoniker> ok, I'm doing something like that
07:20 < aMoniker> I'm just not keeping everything in node_modules
07:20 < TehShrike> And I have never created a node_modules directory myself, either
07:20 < TehShrike> npm does that for me
07:20 < TehShrike> Be it private or public
07:21 < syskk> what does everyone use to send emails with node.js? templating support would be nice as well
07:21 < TehShrike> Managing node_modules folders yourself may be reasonable, but I'm no expert on that
07:21 < aMoniker> ok, regardless of file structure… is it ok to have io.sockets.on('connection' … ) running everytime I require this module?
07:21 < TehShrike> syskk: I was just looking for such things the other day, let me find my github stars...
07:21 < aMoniker> or should I run that once, store the socket as a global, and have any module that needs sockets use it
07:21 < syskk> TehShrike: thanks :)
07:22 < TehShrike> syskk: I think this was about the best option I found https://github.com/andris9/Nodemailer
07:22 < TehShrike> Assuming you're not doing bulk emails
07:22 < aMoniker> syskk: emailjs is working for me
07:22 < syskk> ok cool, I was checking out https://github.com/Marak/node_mailer too
07:22 < syskk> ok, will check those out
07:29 < [AD]Turbo> hi there
07:30 < syskk> what's the easiest way to generate a 8 characters random string in node.js?
07:30 < syskk> ascii
07:30 < TehShrike> That sounds like a fun codegolf problem
07:32 < TehShrike> But the Real Programmer in me feels compelled to ask... why wouldn't you just use a guid?
07:34 < chilts> syskk: npm install passgen
07:34 < chilts> then require('passgen').create(8)
07:34 < chilts> done :)
07:35 < TehShrike> Ah, and here's chilts with the practical answer
07:35 < TehShrike> chilts++
07:36 < chilts> TehShrike: sorry :)
07:36 < syskk> chilts: thanks
07:36 < chilts> no worries
07:37 < chilts> there are lots of other ones like it but I tend to use passgen as a random string generator (not for passwords) :)
07:37 < TehShrike> chilts: don't apologize, my only purpose is to entertain people until somebody provides the optimal answer!
07:37 < chilts> and also node-uuid if I want them :D
07:37 < chilts> heh
07:37 < chilts> TehShrike: you can still play Node gold with it though :)
07:37 < chilts> *golf
07:37 < TehShrike> Wait, how do I play this game?
07:37 < TehShrike> Am I winning yet?
07:38 < aMoniker> does anyone have enough experience with socket.io to tell me if it's fine to have multiple calls to io.sockets.on('connection') ?
07:38 < chilts> yeah, you're winning :)
07:38 < TehShrike> Unrelated: if you want me to start winning at whatever your company does with JavaScript, please send me a PM :-)
07:41 < astropirate> aMoniker, you should be fine. unless they are doing something crazy or unexpected
07:41 < astropirate> :D
07:42 < aMoniker> so if I have a file that calls io.sockets.on('connection', function(socket) { … }) and the registers a socket.on('some_event') in that handler
07:43 < aMoniker> then requiring that file multiple times won't mean that the 'some_event' handler fires multiple times when that event is received?
07:44 < TehShrike> aMoniker: without knowing about that io library, I can't say :-x
07:52 < harrydog> so i set up multiple express apps, which are loaded to a main app.'s through vhost, but when i enter site1.localhost in the browser, nothing shows
07:52 < harrydog> but when i enter localhost:(port of site1 app), it does,
07:52 < harrydog> app.use(express.vhost('site1.localhost', require('./subdomains/site1/app').app1));
08:08 < harrydog> if node.js is suppose to be a http/socket server, why do people use nginx with node?
08:09 < SomeoneWeird> it's not supposed to be a http/socket server
08:09 < SomeoneWeird> you can use it as one, sure, but it's not it's main functionality
08:09 < SomeoneWeird> nginx is easier to loadbalance and stuff when sitting infront of node
08:11 < syskk> any interesting vim plugins for Node.js?
08:15 < substack> beep boop
08:15 < chilts> burp
08:16 <@Nexxy> o hai
08:19 < harrydog> what's the main function of node, just server side programming?
08:19 < harrydog> (in conjunction with nginx)
08:19 <@Nexxy> harrydog, no.
08:19 <@Nexxy> node's main function is now robots.
08:22 < chilts> harrydog: yeah, robots, and web servers, and any other kind of server, and sometimes things that sit on top of or behind servers, or commandline tools or infrastructure websites :)
08:22 < chilts> lots of stuff
08:22 < chilts> oh, and things on LinkedIn, Yahoo!, Voxer, Cloud9 and LearnBoost (amongst others)
08:23 < harrydog> ok
08:24 < harrydog> anyone know where i can get a good cheap or free node server, to run some simple stuff
08:24 <@Nexxy> harrydog, nodejitsu
08:24 < chilts> there is a free tier at Amazon, but you can also get free apps at Nodejitsu or Heroku
08:24 < chilts> (for the moment anyway)
08:25 <@Nexxy> node on free amazon instances?
08:25 <@Nexxy> doesn't it take liek forever to compile tho?
08:26 < chilts> Nexxy: yeah, takes me about 30 mins on the micro, but not long on the small
08:26 < chilts> Nexxy: though it is a one-off cost :)
08:26 < chilts> well, one-off time cost
08:27 < chilts> then again, using nvm or n you can install the precompiled binaries :D
08:27 <@Nexxy> chilts, that ain't representin'
08:28 <@Nexxy> that ain't keepin' it real
08:28 < chilts> sorry, what isn't?
08:28 <@Nexxy> you ruin it when I have to explain it, chilts 
08:28 < chilts> heh
08:28 < chilts> ok
09:17 < sorenso>  Hi :) I'm looking for a process monitoring solution like Varnish has. Something that gives me the current state of all happening inside the node process.
10:14 < Acionyx> hi all, i'm using express& elementtree for parsing xml file.
10:14 < Acionyx> i have a question, why this error appears? "500 TypeError: Object {xmlcontentoffile} has no method 'charAt'"
10:19 < SomeoneWeird> Acionyx, try obj.toString().charAt maybe?
10:20 < syskk> mmm how do i get a key/cert to test https on localhost?
10:21 < pixie79> hi all - i am having a problem i think with syncronisity, when reading from a file and passing its contents via a callback onto other functions -> https://github.com/pixie79/npm-drbd-metrics/blob/master/lib/drbdProc currently line 7 seems to be undefined and so passes that to line 9 - any ideas how to change that around to work ?
10:22 < SomeoneWeird> sign one yourself syskk 
10:22 < christkv1> http://www.openssl.org/docs/HOWTO/certificates.txt
10:22 < SomeoneWeird> http://www.sslshopper.com/article-how-to-create-a-self-signed-certificate.html
10:23 < syskk> cool
10:23 < syskk> it will give me scary warning in chrome though?
10:23 < christkv1> you can get a 30days trial certificate http://www.freessl.com/
10:24 < christkv1> but I don't know if there is any "real" free ones
10:24 < deoxxa> holy shit pixie79 what in the hell is that regex disaster
10:24 < deoxxa> syskk: you can create a certificate authority and import that to your system
10:24 < pixie79> deoxxa: lol - that is a pattern match to switch the output to json - it works but needs some tidying later :)
10:24 < strk> Error: libboost_filesystem.so.1.46.1: cannot open shared object file: No such file or directory at Object.Module._extensions..node (module.js:485:11)
10:24 < syskk> deoxxa: right, will do that
10:24 < pixie79> well it did work before i tried to put the read into its own function
10:25 < deoxxa> syskk: it's actually easy enough to do - it's only a few steps iirc
10:26 < deoxxa> pixie79: what's the point of readData?
10:26 < deoxxa> pixie79: also why are you doing encoding='utf8' as an argument
10:27 < pixie79> well i was trying to read in the contents of /proc/drbd and store it in the string for later processing
10:27 < pixie79> i like things in utf8, rather than ascii
10:27 < deoxxa> yes but why are you passing `encoding='utf8'`
10:27 < deoxxa> why not just "utf8"
10:28 < pixie79> deoxxa: oh - i didnt think that worked
10:28 < deoxxa> yyyes
10:28 < deoxxa> do you know what encoding="utf8" does?
10:29 < pixie79> tell it that the content of the stream is utf8 formated
10:29 < deoxxa> no
10:29 < pixie79> oh ok
10:29 < deoxxa> i mean literally, right there, with no context
10:29 < deoxxa> what does `encoding="utf8"` do?
10:30 < pixie79> i have no idea really - i know that before i put it there i just got a buffer stream rather than the data
10:30 < Sven_vB> probably creates a global variable by that name
10:30 < deoxxa> Sven_vB: ding le leaks
10:30 < deoxxa> erm
10:30 < deoxxa> thanks, irc client
10:31 < deoxxa> Sven_vB: correct
10:31 < Sven_vB> in case your client censors, i understand Bas64 :)
10:31 < deoxxa> pixie79: i highly recommend you don't just blindly copy&paste code in
10:31 < Sven_vB> +e
10:31 < Sven_vB> i highly recommend you use JSLint, i can also give you settings that i deem sane
10:32 < pixie79> ok
10:32 < deoxxa> also pixie79: `new String` is weird - just use ""
10:32 < deoxxa> same with array, just do []
10:32 < pixie79> ok
10:33 < jrajav> Every time you use `new String`, Douglas Crockford kills a kitten
10:33 < deoxxa> what does the output that you're parsing look like?
10:33 < deoxxa> jrajav: douglas crockford is a kitten killing machine
10:34 < pixie79> it is a long string of lines that in this case has six sections of data which all needs splitting into its component parts
10:34 < Sven_vB> i heard DC is perfectly fine with people doing dumb stuff. as long as they don't force _him_ to anything, he tends to just ignore them
10:34 < pixie79> effectivly a mess of poor formated data
10:34 < deoxxa> fair enough
10:34 < pixie79> (not mine) but with useful metrics and sats in it
10:34 < pixie79> stats even
10:35 < deoxxa> i'd recommend not trying to turn it to json - that's really really fragile and depending on how you parse it, potentially insecure
10:35 < pixie79> i am just trying to write a clean parser so that i can then work with the data
10:35 < deoxxa> it'd be easier to extract each piece as you go, i think
10:35 < deoxxa> you might be able to automate it a bit
10:35 < deoxxa> can you paste the output of it?
10:37 < pixie79> deoxxa: https://gist.github.com/3851883
10:37 < pixie79> it can have 2 extra lines some of the time per each set of output
10:37 < deoxxa> pixie79: original question though, it looks like you're confusing how callbacks work. you don't get the result as a return value from the function, but rather the callback you give to the callback-accepting function gets called (back) with the result when it's ready
10:38 < pixie79> deoxxa: i think that is my problem - i am just missing then how do i actually work the data
10:39 < pixie79> or do something with the result
10:39 < deoxxa> that's cool, it's a foriegn concept when you're getting started
10:39 < deoxxa> basically you know when you do fs.readFile("file.txt", function(err, res) { console.log(res); })
10:39 < pixie79> i did have it partially working when it was all one function but that stared to look a mess and seemed the wrong approach
10:40 < deoxxa> that's you passing a callback ( function(err, res) { console.log(res); } ) to the fs.readFile function as an argument
10:40 < pixie79> yep
10:40 < deoxxa> when fs.readFile is done, it'll call your callback with two parameters (err and res)
10:40 < deoxxa> the return value isn't meaningful
10:40 < deoxxa> so basically in your code you want to do something like
10:41 < deoxxa> function my_worker_thing(data, callback) { if (typeof data !== "string") { return callback(Error("invalid argument!")); } data = data.replace("hello", "goodbye"); cb(null, data); }
10:42 < deoxxa> (there's a convention in javascript that the first argument is an error, and any following arguments are results)
10:42 < deoxxa> then you'd use that like
10:42 < deoxxa> my_worker_thing("well hello there", function(err, res) { console.log(res); }); // "well goodbye there"
10:43 < pixie79> ok - i think i get that
10:44 < deoxxa> now - if all your work occurs in the same tick (basically without i/o), you might not need (or want) to use a callback pattern
10:45 < Sven_vB> do we already have a good tutorial that teaches callback style, reasons for callback, and waiting for multiple callbacks, with few confusion and wall of text?
10:45 < deoxxa> Sven_vB: i don't know of any off the top of my head... maybe someone should write one (hint hint)
10:45 < deoxxa> oh actually
10:46 < deoxxa> http://jsforcats.com/ maybe
10:46 < Sven_vB> i was actually thinking about that. because at least my fav search engine showed only tutorials unfriendly to newcomer
10:46  * Sven_vB will check that our
10:46 < Sven_vB> *out
10:46 < deoxxa> oh there's no callbacks there
10:46 < SomeoneWeird> http://callbackhell.com/
10:46 < Sven_vB> ok
10:47 < Sven_vB> also, do we have/ need/ want an FAQ? because not in the topic yet
10:47 < deoxxa> i'm sure maxogden would accept a pull request that covers that topic
10:47 < deoxxa> i'm not sure
10:47 < Dec_> There's a nice and simple introduction to callbacks located here: http://docs.nodejitsu.com/articles/getting-started/control-flow/what-are-callbacks
10:48 < Sven_vB> i saw callbackhell before and think it has too many job-specific details that distract from the callbacks themselves
10:49 < Sven_vB> in the nodejitsu example i miss an example of what benefit callback style brings
10:49 < pixie79> thanks guys - i will do some reading and have another go
10:53 < Dec_> Hmmm. I can't say much for tutorials, but there's pros and cons of callback style in regards to the benefit of anonymous functions located here: http://stackoverflow.com/questions/10273185/what-are-the-benefits-to-using-anonymous-functions-instead-of-named-functions-fo
10:54 < Dec_> It's quite obscure though
10:55 < Dec_> Take my words with a grain of salt, I'm only a newbie to Node.js, but research is something I excel at ;)
10:59 < Dec_> Speaking of being a newbie to Node.js, does anyone happen to know of any online quizzes I can use that test knowledge of Node.js (other than the codeschool course and regular JavaScript) - I find I learn better when I try to answer questions...My searches haven't returned anything yet 
10:59 < jrajav> Re: Dec_'s link, read *all* of the answers, and know that named functions definitely contribute to maintainability
11:00 < jrajav> Also, the answers usually address filesize, which is kind of silly. If you're writing for the web (and then you definitely should pay attention to filesize), you should be minifying and gzipping before you earn your license to gripe about filesize.
11:02 < syskk> anyone knows a library that would help me extract metadata from pictures? especially timestamp
11:04 < syskk> mmm this one I guess https://npmjs.org/package/node-imagemagick
11:04 < Dec_> Coming from a programming background in other languages I can agree with you there jrajav, I skimread the gist of the link I posted, and in hindsight it boggles my mind - surely they'd want to worry about the theory behind it before worrying about filesize...
11:05 < jrajav> Personally, I err on the side of naming all of my functions
11:05 < jrajav> Unless they're really just performing trivial logic or cleanup
11:05 < Acionyx> why does code "var parsed=XML.parse(raw); parsed.toString()" returns [object Object], and to string representation?
11:05 < Acionyx> **using elementtree
11:06 < Acionyx> mistake: "and NOT string representation:
11:06 < Dec_> I name all my functions too but I'll reiterate on the fact that I've literally just started with node, heh.
11:06 < jrajav> var statements return 'undefined'
11:06 < SomeoneWeird> personally I convert all my XML to JSON and then parse it Acionyx 
11:07 < Acionyx> SomeoneWeird, and how can i do this with elementtree?
11:07 < Acionyx> to json i mean
11:07 < SomeoneWeird> just use xml2json
11:07 < SomeoneWeird> var parsedjson = require('xml2json').toJson(xml);
11:07 < jrajav> In any other language, that would be a horrible idea, haha
11:08 < SomeoneWeird> heh
11:13 < Acionyx> Thanks, works perfect
11:30 <@Nexxy> mmalecki.
11:31 < mmalecki> Nexxy: yes?
11:31 <@Nexxy> nothing
11:31 < simong> Has there been any progress on the ustack helpers on OS X ?
11:31 < mmalecki> Nexxy: that indeed seems correct
11:32 <@Nexxy> I told hij1nx about your drunken hiring of me yes
11:33 < mmalecki> Nexxy: I don't think it was me to drunkenly hire you tho?
11:33 <@Nexxy> oh it was
11:34 < mmalecki> Nexxy: I always thought it was jesusabdullah!
11:34 <@Nexxy> you and jesus
11:34 < mmalecki> that makes more sense indeed
11:34 <@Nexxy> that's how drunj you were
11:34 <@Nexxy> drunj lol
11:35 < mmalecki> I do not drink alcohol.
11:35 <@Nexxy> hah.
11:35 < mmalecki> yeah, that sounds funny in my head
12:00 < Clex> Are dynamic includes with Jade still impossible like this ticket says: https://github.com/visionmedia/jade/issues/416 ?
12:01  * sinclairzx attended a Microsoft conference this afternoon
12:01  * SomeoneWeird slaps sinclairzx 
12:01 < sinclairzx> haha
12:02 < sinclairzx> i did tho :P
12:02 < shinaku_> sinclairzx: how was that?
12:02  * SomeoneWeird slaps sinclairzx again
12:02 < shinaku_> did you play the 'count the macbook' game?
12:02 < yawnt> lol
12:02 < sinclairzx> was at a talk where they discussed the async / await stuff in C#
12:02 < shinaku_> Whenever I was at an MS conference there were lots of glowing apples.
12:02 < sinclairzx> im not convinced 
12:02 < sinclairzx> some about async and await doesn't feel quite right
12:03 < sinclairzx> (probably the weird compiler tricks it does)
12:03 < shinaku_> My old lecturer and MVP Rob Miles got told off by MS because he used a macbook and was a big evangelist for XNA and WP7
12:03 < Aartsie> is it smart to use nodeJS with Nginx ?
12:03 < sinclairzx> i heard XNA is dead in the water 
12:03 < shinaku_> Meh, I was never a fan
12:04 < shinaku_> I once asked in before Wp7 was released if it supported opengl
12:04 < sinclairzx> shinaku_: i think Microsoft marketed it as a technology all wrong
12:04 < aMoniker> Aartsie: I like nginx + node so far
12:04 < shinaku_> he told me 'No, but its supports XNA, which is better'
12:04 < RLa> what's xna?
12:04 < shinaku_> and I couldn't help but laugh a little
12:04 < shinaku_> hardly comparable technologies for a start
12:04 < SomeoneWeird> RLa, game development libs for c#
12:04 < sinclairzx> shinaku_: remember MDX?
12:04 < shinaku_> well for .net
12:04 < RLa> SomeoneWeird, for xbox?
12:04 < shinaku_> RLa: for any .net device pretty much
12:04 < SomeoneWeird> and win and wp7
12:04 < milani> XNA runs on desktop too.
12:05 < Aartsie> aMoniker: is it difficult to do that ? maybe you have a good tutorial for me ? when i googled i found only nginx vs nodejs pages
12:05 < shinaku_> an XNA game will run on win, xbox, wp7/8, zune
12:05 < shinaku_> it's not a bad platform for smallish indie games
12:05 < aMoniker> Aartsie: I forget which material I used, but what I'm doing is using nginx as a reverse-proxy to certain ports, then having node apps listen on those ports
12:05 < txdv_> xna runs in the browser too
12:06 < shinaku_> txdv_: not officially
12:06 < shinaku_> it does with mono
12:06 < Ralt> Aartsie if you use socket.io, don't use nginx. otherwise it's fine
12:06 < txdv_> and with JSIL
12:06 < txdv_> shinaku_: not officially?
12:06 < shinaku_> JSIL sounds mad.
12:06 < aMoniker> socket.io is fine with nginx, just use a different port
12:06 < txdv_> madness?
12:07 < Ralt> aMoniker https://github.com/LearnBoost/socket.io/wiki/Nginx-and-socket.io
12:07 < sinclairzx> shinaku_: i remember MDX :(
12:07 < txdv_> couldn't try jsil, it was too hard to get it running on linux
12:07 < aMoniker> Ralt: I know, still works if you use a different port
12:08 < shinaku_> MDX?
12:08 < milani> aMoniker, Aartsie http://stackoverflow.com/questions/5009324/node-js-nginx-and-now
12:08 < Ralt> well you can serve static if you use socket.io on another port, yes, but you can't proxy websockets through nginx
12:08 < shinaku_> Managed Direct X
12:08 < shinaku_> I see
12:08 < shinaku_> a lot of XNA looks very similar to direct x
12:09 < aMoniker> milani: yeah, that looks like a good tutorial
12:09 < shinaku_> but my DX knowledge is limited, that was just the comment from a friend of mine who works at rockstar
12:14 < sinclairzx> in nodejs, how do i set the stream.setEncoding(...) to return a Buffer (not a string)
12:14 < sinclairzx> ?
12:15 < sinclairzx> do i set it to hex?
12:15 < sinclairzx> docs says it defaults to utf8
12:15  * sinclairzx is confused
12:19 < milani> sinclairzx, why not set encoding on received data not on the stream?
12:20 < sinclairzx> milani: thats, what i want to do
12:20 < sinclairzx> ...
12:21 < sinclairzx> serverRequest.on('data', (chunk: any) => {  /* chunk is a utf8 string */  });
12:21 < sinclairzx> i wish it to be a Buffer
12:21 < sinclairzx> or something
12:21 < sinclairzx> its cool, ill look it up
12:30 <@konobi> sinclairzx: don't set the encoding
12:33 <@mbalho> hey someone should port this to be about node.js and npm modules http://answers.honolulu.gov/ (it was made by a coworker of mine)
12:34 < sinclairzx> konobi: does it matter if i do?
12:34 <@konobi> sinclairzx: it defaults to a buffer
12:35 < sinclairzx> konobi: for example, i have the stream input (from the ServerRequest, if fetching the post data you see), and i wish to store that in a Buffer
12:35 < sinclairzx> konobi: by default, i wish to treat this buffer as binary data
12:35 <@konobi> it is binary data
12:35 < gildean> mbalho: https://npmjs.org and http://nodejs.org aren't enough?
12:36 < sinclairzx> konobi: its text encoded as utf8 by default ?
12:36 <@konobi> no... it's binary data
12:36 <@mbalho> gildean: did you try searching on that site? it is very user friendly
12:37 < sinclairzx> konobi: then what use is there in setting the encoding?
12:37 <@konobi> if you want to read it as something else
12:37 < sinclairzx> where is that interpreted tho, a flag on the buffer?
12:37 <@konobi> sinclairzx: either you get a Buffer, or a String
12:38 <@konobi> if you set encoding, you get a string
12:38 < gildean> mbalho: not bad, bit slow tho' might be just the location
12:38 < sinclairzx> konobi: the docs say otherwise
12:38 <@konobi> where
12:38 < sinclairzx> http://nodejs.org/api/stream.html#stream_stream_setencoding_encoding
12:38 < sinclairzx> konobi: Defaults to utf8
12:39 <@konobi> "Makes the 'data' event emit a string instead of a Buffer"
12:39 < gildean> sinclairzx: it defaults to utf8, but only if you use it
12:39 < sinclairzx> gildean: oh ok, its a bit misleading
12:40 <@konobi> not really... the first sentence explains it
12:40 < sinclairzx> hmmm
12:41 < gildean> konobi: i do agree with sinclair that the line in question could be in the main explanation as a note
12:42 < sinclairzx> anyway, thanks guys
12:42 <@konobi> default to console.dir rather than console.log... may help not trip you up
12:44 < Goran> Can someone recommend some open source project where is node-mysql is used? I have problem with too much connections with database
12:44 <@konobi> Goran: connect once during startup... done
12:44 <@konobi> =0P
12:45 < tornad1> Goran: I had same problem with redis, I just forgot to close connection inside callback of my calls. Maybe same pb with mysql
12:46 < RLa> konobi, that sucks without connection pool, mysql can't do more than one parallel request over single connection
12:46 < Goran> I have models, and every model is requiring mysql module and making new connection
12:47 < RLa> i think mariasql+suitable drivers can do that
12:49 < SomeoneWeird> ... don't do that Goran 
12:49 < SomeoneWeird> 1 connection for the entire app
12:50 < tornad1> I agree with goran, with one connection, you can't do simultaneous query
12:50 <@konobi> sqlrelay is also an option
12:51 < SomeoneWeird> mysql isn't awesome at multithreading though
12:51 < tornad1> Yes, but I had some prod server that handle 3 or 4 simultaneous select running 5 to 10 secondes while 10 update pass throw
12:52 < tornad1> (not in nodejs)
12:52 < tornad1> humm....
12:52 < RLa> one solution would be to use generic node-pool or just have fixed pool and selecting random connection
12:52 < tornad1> wait a min, yes, i saw, it depends how the mysql connection is handle by the driver
12:53 < SomeoneWeird> ofc it does :)
12:53 <@konobi> Goran: sqlrelay might be worth checking out
12:54 < RLa> tornad1, i think it does not, by its own design, mysql protocol can't have more than one query at a time on connection
12:55 < tornad1> that's what I wondered
12:55 <@konobi> of course... postgres ftw
12:55 < Goran> konobi can you give me the link?
12:55 <@konobi> http://sqlrelay.sourceforge.net/documentation.html
12:55 < tornad1> Goran, have you close you connection in callback ?
12:56 < tornad1> s/you/your
12:57 < Goran> yea I can make connection execute query and kill it
13:13 < pixie79> ok - well i now have my calling script being returned two callbacks from the required lib, is there a way i can pass those now to another lib so that they can be turned in to object that i can use ?
13:13 < pixie79> my script now outputs as follows :https://gist.github.com/3852450
13:31 < jcoglan> morning all
13:31 < analphabet> 'evening
13:31 < yawnt> 'afternoon
13:32 < jcoglan> can someone familiar with the crypto module tell me what mode of operation the AES cipher uses, if any?
13:32 < jcoglan> and whether you can change it
13:32 < mscdex> node.js rules!
13:33 < jcoglan> and whether there is a module for authenticated encryption, e.g. GCM
13:36 < Sven_vB> i have the first parts of my callback style tutorial ready. i'd appreciate you taking a look at my pseudo code and see if it conveys the spirit of callbacks well and concise, or how i could improve it. http://svb.no-ip.org:2843/~sven/callback-tut/
13:37 < pixie79> how can i join two callbacks into one ?
13:37 < RLa> callbacks have negative sides as well
13:37 < analphabet> pixie79: what do you mean?
13:37 < BrainOverflow> Hey guys
13:37 < SomeoneWeird> hai BrainOverflow 
13:38 < BrainOverflow> I'm having trouble in production
13:38 < BrainOverflow> Keep getting this : node.js
13:38 < BrainOverflow> Ahttp://pastie.org/private/rucqbplj1askzbjtwzt7g
13:38 < SomeoneWeird> wat
13:38 < SomeoneWeird> lol
13:38 < BrainOverflow> http://pastie.org/private/rucqbplj1askzbjtwzt7g
13:38 < BrainOverflow> Sorry :p
13:38 < pixie79> i have two different callbacks that return to the calling script, but i then need to join them so that i can modify their output
13:38 < SomeoneWeird> use async pixie79 
13:38 < BrainOverflow> And this : http://pastie.org/private/s1l3a9cqq1v786vjl49tpa
13:39 < SomeoneWeird> one of your sockets its trying to connect to something that doesn't wanna be connected to BrainOverflow 
13:39 < BrainOverflow> Yeah found that out. But don't know where in the app ... 
13:39 < analphabet> pixie79:https://github.com/caolan/async
13:39 < Sven_vB> pixie79, this might be an actual test case for my tutorial. ;D so could you try and see if http://svb.no-ip.org:2843/~sven/callback-tut/websearch.cb.pseudo helps you with joining your callbacks?
13:40 < analphabet> Sven_vB: no, it doesn't
13:40 < analphabet> Sven_vB: things are much cleaner using async
13:41 < Sven_vB> ok
13:42 < analphabet> jcoglan: I can't help you with that...
13:44 < pixie79> analphabet: there are ? i just looked at async and am now even more confused
13:49 < Sven_vB> i've also looked at async and think while it helps readabiity for people who already understand callbacks, by hiding how callbacks work in their basic form, it might confuse those unfamilliar with the style.
13:53 < analphabet> Sven_vB: Yeah, but it's hard to convince people to use callbacks, if you have to do the hard work by hand...
13:54 < Sven_vB> don't worry, my tutorial will include more sections on how to make the code easy and pretty.
13:55 < analphabet> Sven_vB: +1
13:55 < einaros> jcoglan: well if you're initializing it with a string such as 'aes-256-ctr' that's all up to you
13:57 < jcoglan> einaros: what do you mean? createCipher('aes-256-ctr') does not work
13:57 < jcoglan> if I try anything but 'aes256' I get an error
13:57 < jcoglan> an 'Unknown cipher' error
14:00 < einaros> jcoglan: ok, well node really just fronts openssl's EVP_get_cipherbyname
14:01 < k03chandra> \quit
14:02 < jcoglan> einaros: so is there a list of which cipher names it accepts
14:02 < jcoglan> all my reasonable guesses at getting AES-256-CTR mode have failed
14:03 < einaros> jcoglan: did you try aes-256-cbc for good measure?
14:04 < jcoglan> *facepalm*
14:04 < jcoglan> sorry
14:04 <@konobi> jcoglan: it's wrapping openssl, so you can always ask it
14:04 < jcoglan> I must have missed a dash somewhere -- aes256 vs aes-256 etc
14:04 < jaseemabid> Can anybody share some good references to learn about v8? Im looking for some in depth book or something rather than blog posts or tiny examples. I feel that i am missing a lot by just reading through examples 
14:05 < analphabet> jaseemabid: how it works or how javascript works?
14:05 < jcoglan> einaros: you know if there's a way to set the IV on the cipher object?
14:05 < jrajav> jaseemabid: http://code.google.com/p/v8/w/list
14:05 < jaseemabid> analphabet, I am writing a c++ module over node. I am getting stuck here and there very often. 
14:06 < jrajav> jaseemabid: And svn checkout http://v8.googlecode.com/svn/trunk/ v8
14:06 < jrajav> jaseemabid: ^ No better reference possible
14:06 < jaseemabid> jrajav, University c++ is too less to understand v8 source
14:06 < jcoglan> einaros: it also doesn't seem to know about aes-256-ctr
14:07 < jaseemabid> jrajav, I'm a JS guy, dynamic languages, and not very good at node addon stuff (or C or C++) but want to get better. 
14:09 < jrajav> So.. what's your goal, exactly?
14:09 < jrajav> To learn more about C++?
14:10 < jrajav> Because your instinct is correct, V8 source is probably not the best place to do that
14:10 <@konobi> jcoglan: `openssl enc --help`
14:10 < analphabet> Isn't it possible to disable enter/leave messages? That's really anoying.
14:10 < jaseemabid> jrajav, Im working on a git wrapper for node.js. *Academic Project*. https://github.com/jaseemabid/libnodegit/
14:11 < jrajav> I'd recommend starting with existing projects that do the same thing
14:11 < mscdex> jcoglan: `openssl list-cipher-algorithms`
14:11 < jrajav> gitteh for instance
14:12 < jrajav> And start from the other end - look for resources on node.js modules, not V8 source
14:12 < jaseemabid> jrajav, Its working now. I can call repo.head(), repo.isBare() etc and get stuff out of it, but I need a push on v8
14:12 < jcoglan> I don't seem to have 'openssl' in my shell -- which ubuntu package is it?
14:12 < einaros> jcoglan: iv = second param?
14:13 < einaros> or third, I forget
14:13 < mscdex> jcoglan: 'openssl' ?
14:13 < mscdex> jcoglan: that should be the package name
14:13 < mscdex> and the executable name :-)
14:15 < jmoyers> goddamn 7am meetings
14:15 < jmoyers> thats what i have to say
14:15 < mscdex> jmoyers: fill up on the coffee!
14:16  * jmoyers points at the coffee.
14:16 < jmoyers> the delicious delicious coffee
14:19 < jcoglan> ah, apparently rbenv was clobbering my ability to invoke /usr/bin/openssl :P
14:19 < jcoglan> it's fun like that
14:20 < SomeoneWeird> loltf
14:22 < jaseemabid> jrajav, So you know of any references other than the source? 
14:22 < jchannon> Hi! Has anyone got a link to using Sublime Text 2 and debuggin node? I have https://github.com/tanepiper/SublimeText-Nodejs installed that has debug option but I've not had luck with it
14:23 < jcoglan> so `openssl enc --help` lists -aes-256-ctr and -aes-256-gcm, but createCipher() chokes on either of those
14:23 < jcoglan> it allows aes-256-cbc though
14:24 < mscdex> did you try without the preceding - ?
14:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:24 < mscdex> and also try with all caps?
14:25 < SomeoneWeird> jchannon, how would you debug from it?
14:25 < jcoglan> passing an iv to crypto.createHash('aes-256-cbc', key, iv) makes no difference either
14:25 < jchannon> someoneweird, not sure, thats why i'm asking how you guys do it
14:25 < ArxPoetica> What's the best Node-based CMS out there?
14:25 < SomeoneWeird> well, you can't :)
14:26 < ArxPoetica> I'm waffling between Blacksmith and Calipso…is there another?
14:26 < jchannon> someoneweird, how/where do you set breakpoints etc
14:26 < SomeoneWeird> you can't
14:26 < SomeoneWeird> sublime is a text editor, not an ide
14:27 < jchannon> can you use terminal or something else
14:27 < SomeoneWeird> mhm
14:27 < SomeoneWeird> http://elegantcode.com/2011/01/14/taking-baby-steps-with-node-js-debugging-with-node-inspector/
14:27 < SomeoneWeird> try that
14:27 < serdem> <SomeoneWeird> sure you can!
14:27 < SomeoneWeird> ?
14:27 < jchannon> ive been using nodemon app.js but just thought i need to start walking through with the debugger
14:27 < ArxPoetica> best CMS?
14:28 < serdem> SomeoneWeird, http://www.sublimetext.com/forum/viewtopic.php?f=5&t=4819
14:28 < serdem> jchannon>
14:28 < SomeoneWeird> serdem, --debug doesn't use gdb does it?
14:28 < ArxPoetica> While we're at it, why do I sometimes see things like this:
14:28 < ArxPoetica> #!/usr/bin/env node <— that's the first line of a startup file
14:28 < jchannon> i've found this that lets you define a build but not a debug etc http://www.myrocode.com/post/2011/09/29/Nodejs-setup-your-IDE-with-Sublime-Text-Editor-2.aspx
14:29 < SomeoneWeird> ArxPoetica, its so you can run it as ./file.js and not have to run 'node file.js'
14:30 < ArxPoetica> hmm…I sort of gets it
14:30 < ArxPoetica> is it a bash command
14:30 < ArxPoetica> ?
14:30 < SomeoneWeird> yes
14:30 < ArxPoetica> i see
14:30 < jchannon> serdem, do you use that plugin for node?
14:30 < SomeoneWeird> it defined what environment the file should run under
14:30 < SomeoneWeird> in this case, node
14:30 < serdem> SomeoneWeird, yes you are right. But it can be done with dbgb.
14:31 < SomeoneWeird> heh
14:31 < ArxPoetica> gotcha
14:31 < serdem> jchannon, no i don't use sublime text
14:31 < SomeoneWeird> you should
14:31 < SomeoneWeird> :)
14:32 < jchannon> someoneweird, are you going to try this plugin
14:32 < SomeoneWeird> not really
14:32 < SomeoneWeird> bit busy atm
14:32 < jchannon> how do you debug
14:32 < SomeoneWeird> lots of console.logs
14:32 < SomeoneWeird> :p
14:33 < jchannon> ok
14:33 < jchannon> serdem, someoneweird, does that plugin look like it will debug node?
14:33 < ArxPoetica> SomeoneWeird, can one still use (for example) "nodemon bin/startup" if they want to?
14:34 < jchannon> I'm new to node so not sure what the GDB is
14:35 < SomeoneWeird> jchannon, gdb is gnu's debugger
14:35 < SomeoneWeird> ArxPoetica, i don't see why not
14:35 < jchannon> just read the wiki page :)
14:36 < jmoyers> jchannon node-inspector
14:36 < jmoyers> is what i use.
14:36 < SomeoneWeird> ya
14:36 < ArxPoetica> gotcha
14:36 < jmoyers> breakpoints, inspecting variables, the standard stuff
14:36 < jmoyers> its nice, since it uses web inspector/chrome
14:37 < jcoglan> ah, I should be using createCipheriv(), not createCipher() if I want to use an IV
14:37 < jchannon> jmoyers, thanks
14:39 < jchannon> can't seen anything on google about SublimeGDB and Node
14:40 < Ardivaba> Hola.
14:40 < Ardivaba> Anyone here using NodeJS as gameserver?
14:41 < Ardivaba> People don't use this channel to dalk, do they?
14:42 < shinaku_> dalking is verboten
14:42 <@mbalho> yea there is a strict no dalking policy because of some dalking abuse recently
14:43 < SomeoneWeird> lold
14:46 < jchannon> just installed sublimegdb and no luck so i assume its not setup out of the box
14:48 < Ardivaba> I dalk because talking is too mainsdream.
14:56 < jchannon> node inspector seems cool though
14:56 < jchannon> thanks fellas
15:10 <@konobi> are there really no belfast folks on channel?
15:10 <@mbalho> ill be in dublin next week
15:10 <@konobi> ditto
15:10 <@konobi> o/ * \o
15:11 <@mbalho> woowoo
15:11 <@mbalho> i programmed helicopters with matt smillie in berlin the other day
15:12 <@konobi> mbalho: but i'm in belfast till then
15:12 <@konobi> nice.. he was just there for .eu right?
15:12 <@mbalho> yea i think so
15:13 <@konobi> boo... would been fun to take him out in dublin... oh wells, it'll have to wait till i get back
15:25 < Clex> What's the best way to parse the Accept-Language HTTP header with node?
15:26 <@mbalho> Clex: node has an http server built in
15:26 <@konobi> ?
15:26 <@konobi> Clex: checked npm?
15:27 < Clex> konobi: there i18n but it seems way too big for me.
15:27 < Clex> I'd just like something doing like "en-US,en;q=0.8,fr;q=0.6" -> ['en', 'fr'].
15:29 <@konobi> Clex: it's a well documented RFC, why not jfdi?
15:31 < Clex> Yup, that's probably what I'll end up to do.
15:32 < Clex> Maybe not, this seems cool : https://github.com/federomero/negotiator
15:32 <@mbalho> Clex: oh sorry i misunderstood your question, https://github.com/adcloud/acc-lang-parser
15:34 < Clex> mbalho: thanks, I'll check out this one too.
15:35 < janmower> ryan or nathan or any build system gurus around?  i've got a node build question.
15:35 < janmower> i'm trying to add another two source files to the list of targets
15:35 < janmower> and it's blowing up in my face
15:35 < janmower> in a not-so-friendly way
15:36 < janmower> if anyone knows a set of docs for adding a targets i would happily read that and go away
15:37 < janmower> quicker than reading source
15:37 < janmower> something in circular_check is building
15:39 < hemanth> http://h3manth.com/content/cluster-computing-nodejs#comment-676210978 for that comment, io.connect() is what I can think of, need some suggestions 
15:39 < janmower> the weird part is that i've added some stanzas to node.gyp, and it's saying invalid syntax for the last line of that file
15:43 < Tobsn> is there some sort of template engine like handlebar that acts like angular and does in body replacement of tags?
15:51 < Sven_vB> janmower, sounds like unbalanced brackets
15:52 < janmower> Sven_vB: checked and double checked in vim
15:52 < janmower> but any tips are most welcome
15:53 < janmower> any other ideas?  i'm going through input.py to see what circular_check does
15:53 < janmower> and running this whole thing in the interactive shell
15:53 < janmower> if anyone has better ideas than poking at it manually, yell out
15:53 < Sven_vB> can you pastebin your gyp?
15:56 < flexd> Hm, slightly odd problem: I am spawning a child process (a python script), and reader.stdout/stderr.on('data', function (data) {...}); suddenly gives me nothing..
15:57 < flexd> Running the python script on its own gives me lots of output.. what am I doing wrong? :/
15:57 < flexd> I am thinking its buffered or something but not sure how to fix it
15:57 < Sly> Uhm.. Let me see if it is buffered. I don't remember it being buffered, but it could be.
15:59 < flexd> https://gist.github.com/59551b61c9eac6f3df68 basically just doing this.. it was working for another process
15:59 < flexd> albeit not a python one m
15:59 < flexd> hm
16:00 < aMoniker> does anyone have experience with socket.io rooms?
16:01 < pixie79> i seem to be getting a bit of a json issue, if output my script results as it, then i get all the records, https://gist.github.com/3853259 -> however if i do json.parse(data) then i can output console.log(data.drbd.drbdversion) however I can not call data.drbd.drbd0.state as it returns undefined - any ideas ?
16:02 < serdem> aMoniker, what do you want to know?
16:03 < aMoniker> I'm putting each client in their own rooms keyed on their session cookie
16:03 < aMoniker> but when I use io.sockets.in(session_id).emit('something');
16:03 < aMoniker> it goes to all clients
16:04 < aMoniker> looking at io.sockets.manager.rooms I can see that the first room contains all clients
16:04 < aMoniker> and then each room only contains one, keyed on session_id
16:05 < aMoniker> so I'm not sure what's going wrong
16:05 < serdem> aMoniker, you want to broadcast some information to spesific room, right?
16:05 < serdem> a*
16:05 < aMoniker> yes
16:06 < serdem> io.sockets.in broadcast globally. you should use  socket.broadcast.to('room1').emit(..
16:06 < aMoniker> that's not what the documentation says..
16:07 < aMoniker> "Emitting an event to all clients in a particular room
16:07 < aMoniker> io.sockets.in('room').emit('event_name', data)"
16:07 < mscdex> pixie79: in the json you gisted, the path data.drbd.drbd0 does not exist, did you meant data.drbd0.state ?
16:09 < pixie79> oh may be - and that might be part of my issue - let me check
16:09 < serdem> aMoniker, would you please changed your code to  socket.broadcast.to('room1').emit('function', 'data1', 'data2');
16:09 < serdem> change*
16:10 < serdem> <aMoniker> also send me the doc's link please
16:10 < mscdex> pixie79: you can use a site like jsbeautifier.org to see the data easier
16:10 < aMoniker> serdem: https://github.com/LearnBoost/socket.io/wiki/Rooms
16:11 < pixie79> mscdex: ok that fixes the first error, the second seems slightly trikier, when i do JSON.parse() on the data the data for drbd1 gets set to undefined
16:11 < mscdex> pixie79: data.drbd0.drbd1
16:12 < pixie79> oh - thats not what i wanted, i really wanted data.drbd.drbdversion, data.drbd.drbd0, data.drbd.drbd1
16:13 < pixie79> i guess i am missing something in my understanding of JSON levels
16:13 < mscdex> pixie79: your json output is not correct if that's what you're expecting
16:14 < aMoniker> serdem: socket.broadcast.to does not work
16:14 < mscdex> pixie79: if you're in control of the output, you might use an array instead of individual named properties?
16:14 < serdem> <aMoniker> :/ pastebin and let me look at it.
16:15 < serdem> also your question's room is #socket.io
16:16 < Sly> flexd, I'm not seeing any buffering.
16:16 < pixie79> mscdex: i am only partially in control
16:16 < flexd> Sly: Hm... odd
16:17 < flexd> It should be working though.. this is the python script, its just using normal print
16:17 < flexd> https://gist.github.com/1905d67ecbf23221f6fa
16:17 < Sven_vB> re
16:17 < Sly> https://gist.github.com/397730b91506502470ee
16:17 < flexd> I can't really see any reason why it wouldnt work
16:17 < Sly> That's the libuv code for spawning a process.
16:17 < Sly> I'm not seeing any buffering in there.
16:19 < flexd> Hm :/
16:19 < flexd> Then what else is wrong haha.
16:19 < Sly> Not sure. Is your Python script outputting somewhere other than STDOUT?
16:19 < flexd> I'm not entirely sure.. I would assume the print method outptus to stdout
16:20 < flexd> or stderr
16:20 < Sly> Yeah, I just saw that you're binding to STDERR too.
16:21 < flexd> I could try using sys.stdout.write()
16:21 < callumacrae> Fike`znc`znc`znc: ?
16:21 < flexd> but print is only a wrapper to call sys.stdout.write() hm
16:21 < aMoniker> serdem: sent pm
16:25 < flexd> Sly: Odd... sys.stdout.write() did nothing either.. what the..
16:25 < flexd> Works fine in the actual script, but still no output hm
16:27 < pixie79> thanks all for your help today - i now have valid output data from /proc/drbd into json
16:30 < durango> Can someone provide me some help with asynchronous and loading files?
16:31 < durango> https://gist.github.com/c80ae01c0bda0b5028da this is my following code.. I was wondering if this was the best way of doing what I wanted to achieve :D (fastest loading as possible)
16:31 < tnorris> durango: like, what the code should look like?
16:31 < durango> tnorris: more or less yeah
16:34 < durango> https://gist.github.com/c80ae01c0bda0b5028da if u refresh I've cleaned it up a bit :)
16:34 < Sly> flexd,
16:34 < Sly> <blakmatrix> Sly: looks liek it only has a message event
16:34 < Sly> <blakmatrix> Sly: http://nodejs.org/api/child_process.html
16:35 < Sly> I've got to leave for a little while, though.. but if you're still here when I get back, I'll see if I can't help you figure it out.
16:37 < tnorris> durango: your code looks fine. in the for loop just put something like `fs.open(dir + '/' + files[i], 'r+', function() {})`
16:37 < durango> wait why would I want to open it?
16:37 < durango> I'm requiring it later down the road :)
16:40 < tnorris> durango: hm, when you said "asynchronous and loading files" I thought that meant you needed to open them.
16:40 < durango> ah nah :) just reading the dir async, and requiring them async (ordering doesn't matter)
16:41 < tnorris> hm, ok. interesting. i'll have to think about that one.
16:42 <@konobi> requiring async?
16:43 < durango> konobi: nodejs runs left to right on everything right? O_o
16:43 < durango> like if I had two lines: console.log('hello'); and console.log('world');
16:44 < durango> there *is* a chance that world will execute before hello no?
16:44 <@konobi> require() is sync
16:44 <@konobi> no
16:44 < flexd> Sly: but
16:44 < flexd> hm
16:44 < flexd> Sly: https://gist.github.com/3853512
16:44 < flexd> That works
16:44 < flexd> But the other does not
16:44 < flexd> only difference is the non working one is a python script :/
16:51 < afo0l> hey, this is only semi on topic, but has anyone successfully installed node.js ios port by innoying on an ipod touch 1G?
16:52 < afo0l> neither the .deb nor manually compiling will work and i guess i'm out of luck
16:57 < janmower> for those who are interested, here's how node uses make to build a makefile:
16:57 < janmower> ['make', '-f', '/home/jan/git/node/node.gyp', '-I', '/home/jan/git/node/common.gypi', '-I', '/home/jan/git/node/config.gypi', '--depth=.', '--generator-output', '/home/jan/git/node/out', '-Goutput_dir=/home/jan/git/node/out', '-Dcomponent=static_library', '-Dlibrary=static_library']
16:58 < mnutt> does anyone know why I might get this error in production? node: ../src/tcp_wrap.cc:353: static void node::TCPWrap::AfterConnect(uv_connect_t*, int): Assertion `req_wrap->object_.IsEmpty() == false' failed.
17:14 < EyePulp> I need some design advice.  I have a clustered app that has to do a the same function in both a one-off, on demand fashion, and also at intervals of every X seconds.  I'd like my cluster workers to only handle the one-off requests to this func, and have the master set u the interval-based calls to it - does that make sense?
17:15 < EyePulp> s/set u/set up
17:15 < icebox> s
17:16 < AndreasMadsen> EyePulp: if the interval time is dynamic, then yes
17:16 < AndreasMadsen> EyePulp: what is the interval time?
17:17 < EyePulp> AndreasMadsen: it's fixed (static) from a setting imported when I launch the app
17:17 < AndreasMadsen> EyePulp: if its really low (20 ms) the interval should properly happen in a worker, dude to the sync nature of process.send
17:17 < EyePulp> AndreasMadsen: no - more like 30 seconds
17:17 < EyePulp> not ms
17:18 < AndreasMadsen> EyePulp: what is the reason that you want it in master and not in a worker?
17:18 < AndreasMadsen> EyePulp: how big is the message 
17:18 < AndreasMadsen> that you would send to each worker in when the interval handler executes
17:18 < EyePulp> AndreasMadsen: I don't want each worker making the identical interval based call - it's unnecessary redundancy.
17:19 < EyePulp> I might try an interval on the master process to pass a message to a single worker to make the call
17:19 < EyePulp> that would be cheap and easy, code wise
17:20 < EyePulp> then I don't have to maintain logic & state outside the worker code-base
17:21 < AndreasMadsen> EyePulp: I'm quite sure that process.send('execute-interval') would be more expensive than setInterval(execute-interval) in each worker.
17:21 < AndreasMadsen> EyePulp: its a general rule that the master should be as simple as possible
17:22 < AndreasMadsen> EyePulp: restarting workers in cluster 0.8 is extremely easy, however restarting the master is a lot more complicated.
17:22 < EyePulp> AndreasMadsen: the function is a database cleanup routine that it seems wasteful to have every worker running.  I guess I would rather manage the interval-based activity on the master.  
17:23 < EyePulp> each worker is using the same DB, so we really only need a single interval based cleanup
17:24 < EyePulp> I'm probably not explaining it very well.
17:24 < AndreasMadsen> EyePulp: If each worker is using a single DB, then you are absolutely right in doing the interval in the master. 
17:24 < AndreasMadsen> * If all workers are using the same single DB
17:24 < AndreasMadsen> However if you need to do worker.send then you are on a wrong track
17:27 < EyePulp> AndreasMadsen: why is worker.send so bad?
17:28 < EyePulp> (not doubting, just sort of ignorant in this area)
17:29 < AndreasMadsen> EyePulp: it is not soo! bad, but it is sync (in posix OS). This means that if you send a huge string or object, then you could block your worker/master for many ms.
17:29 < AndreasMadsen> EyePulp: This is an example of the problem https://gist.github.com/1663885
17:30 < AndreasMadsen> ^-- nodecore issue: https://github.com/joyent/node/issues/2598 
17:31 < EyePulp> AndreasMadsen: ah - no, I would send a simple message -e.g. worker.send({action:'db_cleanup'}); 
17:33 < EyePulp> AndreasMadsen: thanks for the gist - I think I see what you're saying
17:34 < AndreasMadsen> EyePulp: yeah, I got that and that is the general purpose of worker.send. However in a interval case where you know exactly when the event should be triggered, there is really no reason for using it. Keep in mind that the OS will count those ms anyway.
17:35 < AndreasMadsen> But if the case where a signal handler in the worker like process.on('SIGQUIT', gracefulShutdown) then that must be in the master, and you should use worker.send()
17:38 < saudude_> what does fs.unlink do?
17:39 < saudude_> oh, file deletion?
17:39 < AndreasMadsen> yep
17:39 < saudude_> how is it different than rm?
17:40 < AndreasMadsen> saudude_: there is no fs.rm
17:40 < saudude_> ah. is there a difference between the command line functions "unlink" and "rm"?
17:41 < AndreasMadsen> no it is a alias (man unlink === man rm)
17:43 < saudude_> oh! :D thanks. suppose i could have checked that myself
17:44 < AndreasMadsen> saudude_: well sometimes I forget how cool man <command> is too.
17:44 < saudude_> hahah
17:47 < AndreasMadsen> these tools from 197x never gets better :)
17:48 < AndreasMadsen> ^-- As an 199x that just feels super strange to write :p
17:50 < EyePulp> heh
17:51  * EyePulp is a 197x …. sigh
17:51 < clever> saudude_: i checked on my end, the 2 commands are very different
17:51 < clever> unlink can only delete one thing at a time
17:52 < saudude_> clever: oh interesting. thanks!
17:52 < AndreasMadsen> clever: perhaps it is OS specific, (I'm on MAC OS X)
17:52 < AndreasMadsen> https://gist.github.com/3853887
17:57 < tomshreds> Hey guys, I need a simple session library that can store its sessions in a database (mongodb preferably). Any good ones that wouldn't be a pain in the butt to use?
17:58 < jchannon> Hi!
17:59 < jchannon> I was on here earlier talking about SublimeGDB
17:59 < jchannon> https://github.com/quarnster/SublimeGDB
18:00 < jchannon> Wondered if anyone had got it to work with Node.js?
18:00 < EyePulp> tomshreds: I might point you towards redis as a more popular way to handle sessions - it's got tradeoffs with mongo, but it's very fast 
18:01 < tomshreds> EyePulp I know about Redis, I don't have any instance installed yet. MongoDB is hosted at MongoHQ right now. But you are right, I should use it instead of MongoDB
18:01 < serdem> tomshreds,https://github.com/masylum/connect-mongodb
18:01 < tomshreds> Any good libs for it?
18:02 < tomshreds> serdem oh thx
18:02 < EyePulp> tomshreds: I think express/connect have pre-built session handling options.  It's also pretty easy to roll your own.  I suppose it depends on specific needs.
18:03 < tomshreds> I guess I should use connect in my project then
18:03 < tomshreds> thanks for the help
18:03 < EyePulp> both redis or mongo will likely be up to the task, for what it's worth.
18:04 < jchannon> Any Sublime Text 2 users?
18:05 < serdem> <jchannon> :))
18:05 < s5fs> jchannon: brand new as of yesterday, i've prob got more questions than you haha
18:05 < jchannon> Hi hagain!
18:05 < r4m0n3> hey all.. anyone know if net.connect() does any check whatsoever on whether it can actually conenct before it fires its callback?  seems like it has no error handling if the server is not listening.  Do I have to write() to get the error event to fire?
18:06 < jchannon> serdem, just had an email from the SublimeGDB author
18:06 < jchannon> He's not used Node.js and is not sure you can debug node.js with GDB and he's not going to investigate so thats answered my question
18:07 < EyePulp> jchannon: I'm using st2
18:08 < jchannon> eyepulp, was looking at node debuggers, think i'll go with node-inspector, would have liked SublimeGDB to work though, looks cool
18:10 < bakadesu> RE: MongooseJS: anyone know how to skip validation on fields that are not required?
18:16 < runvnc> my cluster workers don't seem to receive messages if I send them immediately after the online event.  instead, I seem to have to wait some fraction of a second to send the messages
18:16 < runvnc> otherwise the workers dont receive them.. is this normal
18:17 < runvnc> on version 0.8.9
18:19 < runvnc> https://gist.github.com/3854021
18:23 < serdem> <jchannon>  oh ok.BUt. Most of debuggers work the sam way. Most of them use the same protocol. You stil can port easiliy to any node debugger i think... it's just an idea.
18:26 < jchannon> <serdem> you mean write a ST2 plugin that hooks into a node debugger?
18:27 < serdem> <jchannon> Yes. For example,  just replace  ndb debugger  with gdb in that guys plugin-project.
18:27 < serdem> https://github.com/smtlaissezfaire/ndb
18:28 < jchannon> <serdem> https://github.com/quarnster/SublimeGDB
18:28 < jchannon> interesting idea
18:30 < serdem> oppsi wrong link sorry, https://github.com/smtlaissezfaire/ndb
18:30 < jchannon> <serdem> that link you posted to the nab is not supported anymore, its recommends using built in node
18:31 < jchannon> wonder if that can be hooked into
18:33 < lyaunzbe1> hey guys, this is porbably more js related. But how come when I append to a json object and the log it, the new attribute doesnt show up.
18:33 < sdepold> hi :) i'm wondering if there are any users of node-sqlite3 ?
18:34 < mhr> hello, I was trying out sweet.js (sweetjs.org) and made this, just thought I would share: http://pastebin.com/0nPBg8LY.  How can I declare "scheme:" at the top of the file instead of having to do it at every line?
18:34 < sdepold> lyaunzbe1: code?
18:36 < lyaunzbe1> sdepold: http://pastebin.com/KdMxud5g
18:37 < sdepold> lyaunzbe1: interesting :D
18:40 < lyaunzbe1> sdepold: haha what does that mean? 
18:40 < sdepold> lyaunzbe1: that i have no clue :)
18:40 < sdepold> lyaunzbe1: looks ok to me
18:41 < ben_alman> isaacs: does npm proved any strategy for simplifying the use of "npm link" when you have many inter-dependent libs being developed concurrently?
18:45 < ben_alman> ok, npm install --link is awesome
18:48 < ben_alman> what can i use to see if the npm module the local package.json belongs to is actually a published npm module?
18:48 < ben_alman> vs an unpublished one
18:49 < ben_alman> i want to, for each thing that's actually a published npm module, do an npm link
18:50 < ben_alman> i don't want to do it for things that have a package.json but aren't published
18:50 < smoothiehangover> ben_alman: pretty sure you can do that programatically with npm
18:50 < smoothiehangover> most likely something similar to npm info
18:50 < smoothiehangover> and checking for an empty result
18:51 < ben_alman> yeah, npm info requires a name
18:51 < smoothiehangover> oic
18:51 < ben_alman> i was trying t oavoid getting the name from package.json first
18:52 < jchannon> @graeme_f hi!
18:52 < smoothiehangover> oavoid - verb. 1 - avoiding the use of oauth
18:52 < niggler> is there a way to generate a makefile from the gyp?
18:54 < TooTallNate> niggler: you mean using node-gyp?
18:54 < niggler> yeah
18:54 < niggler> i find myself typing "make" way too often
18:54 < niggler> and i just hacked a makefile that calls node-gyp
18:54 < niggler> but that seems suboptimal
18:55 < TooTallNate> niggler: `node-gyp rebuild` is too long for you?
18:55 < niggler> yes :/
18:55 < niggler> no its not that
18:55 < tomshreds> Hey guys, I'm trying to use connect's sessions. It almost works, except that when the page reloads, the sessoins are gone from req.session. Any ideas?
18:55 < txdv> makefile? pfff
18:55 < txdv> i am awesome, i type ninja
18:56 < niggler> i viscerally type make
18:56 < tomshreds> Here's how I implemented it: https://github.com/Brainpad/ThinAir/blob/master/libs/server.js
18:56 < niggler> but i imagine it shouldn't be too hard to generate a makefile from the gyp
18:56 < niggler> with 'configure', 'build', 'rebuild' targets
18:57 < txdv> em, isn't that exactly what gyp does?
18:57 < niggler> how do you capture the makefile?
18:58 < txdv> http://tinyurl.com/9r2kzy8
18:58 < txdv> this was generated by uv.gyp
18:58 < jdunck> question re. socket.io - does anyone know if there's a way, on the server, to tell that a reconnecting client (io.sockets.on('connection') is a client that's been seen before?
18:59 < jdunck> (transport upgrade is an example of where i'm seeing repeats)
18:59 < niggler> nvm txdv its there -- it just appeared in a subdirectory rather than in the root
19:00 < niggler> :/
19:00 < txdv> how can one live without makefiles
19:01 < niggler> one of life's great mysteries
19:01 < txdv> it is easy if you have a life
19:01 < niggler> along with "how can one live with ant"
19:01 < s5fs> distance is the secret with ant
19:02 < txdv> dafuq
19:02 < txdv> ant is java
19:02 < txdv> 100% pure java
19:02 < txdv> 100% pure bs
19:02 < s5fs> right, the closer you get to ant, the uglier it gets. keep it hidden behing your tooling and well, it's not so bad (until it doesn't work haha)
19:02 < txdv> s5fs: hiding the shit is not the best solution
19:02 < txdv> sometimes it starts to smell
19:02 < niggler> xcodebuild is on the same level of retardedness
19:03 < jrajav> "keep it hidden behind your tooling" == "rely on eclipse to a fault"
19:03 < s5fs> jrajav: haha, or netbeans!
19:03 < jrajav> Yup, you're already too far down the path of darkness to be helped
19:03 < jrajav> May Glob pity your soul
19:03 < s5fs> jrajav: you've got it all wrong, java is a step forward from where I've been
19:04 < disnet> mhr: really cool!
19:04 < disnet> mhr: a possible start at simplifying: https://gist.github.com/3854258
19:04 < jrajav> Java's not as bad as the flak it gets
19:04 < jrajav> Neither is Eclipse
19:04 < jrajav> But you should always understand the tools you use
19:05 < s5fs> jrajav: agreed, but that gets harder the larger your framework/toolset is. leaky abstraction issues usually fill in the gaps.
19:05 < mhr> whoa, disnet, that's awesome!  I was just in #javascript, and we were discussing how we thought it'd be impossible to just declare scheme once, but wow.
19:06 < mhr> disnet, is it possible to use sweet.js in the browser?  perhaps with browserify?
19:06 < tomshreds> Hey guys, I'm trying to use connect's sessions. It almost works, except that when the page reloads, the sessoins are gone from req.session. Any ideas? Here's how I implemented it: https://github.com/Brainpad/ThinAir/blob/master/libs/server.js
19:06 < disnet> mhr: yeah, you definitely can
19:06 < RLa> at least ant, unlike maven, does not download the whole internet every time you run it
19:07 < disnet> mhr: will be cleaning up so you don't have to use browserify at some point
19:07 < mhr> ah, awesome
19:07 < mhr> this is such a cool project
19:09 < Benvie> I just implemented call_cc weee
19:09 < gkatsev> Benvie: lol, you and your crazy projects
19:09 < mhr> call_cc?
19:09 < Benvie> call/cc
19:09 < Benvie> call with current continuation
19:10 < Benvie> more specifically I wrote a meta-circular js interpreter that uses continuation passing style to execute the code
19:10 < Benvie> which makes it possible to capture the state of the program at arbitrary points
19:10 < gkatsev> I wonder if it's possible to re-write lispyscript using sweetjs
19:11 < Benvie> so if you do
19:11 < mhr> gkatsev: I bet it is
19:12 < gkatsev> what lispyscript is doing is using templates and a tokenizer to convert from lispyscript to js
19:12 < gkatsev> that's pretty cool, actually
19:13 < txdv> i'm tired of those compile to js languages
19:13 < Benvie> I implemented runtime macros by setting global.__proto__ to be a proxy and then recorded every action done against it, worked it backwards, and generated a kind of AST from that
19:13 < Benvie> but that's kind of ridiculous
19:13 < Benvie> not performant
19:13 < gkatsev> heh
19:13 < mhr> Benvie: when do you have time to do all this?
19:13 < jrajav> txdv: Really? There's not that many https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS
19:14 < Benvie> I spend all my time doing this
19:14 < gkatsev> lispyscript creates a tree as it parses and then uses templates to convert the tree, that's pretty clever
19:14 < txdv> there is no brainfuck2javascript
19:14 < mhr> how does sweet.js work?
19:14 < mhr> HA
19:14 < txdv> I know what I am going to hack on
19:15 < Benvie> having a cps interpreter is really useful though
19:15 < jrajav> Wow, Typescript has already been added to that list
19:15 < jrajav> I didn't know it was kept up to date
19:15 < Benvie> like implementing sleep is trivial
19:15 < txdv> javascript extensions is intereszsting
19:15 < txdv> i would like to see async/await in js
19:15 < disnet> mhr: high level overview here: https://air.mozilla.org/sweetjs/
19:16 < gkatsev> mhr: looks like a scanning compiler
19:16 < mhr> disnet: I actually watched that last night, but I was playing a game on my phone simultaneously and zoned out, haha
19:17 < Benvie> bam callcc: https://github.com/Benvie/continuum/blob/master/continuum.js#L1549
19:17 < txdv> CPS compilers
19:17 < disnet> :)
19:17 < mhr> "savedΩ" that's legal benvie?
19:17 < Benvie> CPS interpeter
19:17 < Benvie> yeah it is
19:18 < gkatsev> >> savedΩ = 5; savedΩ
19:18 < purr> gkatsev: (number) 5
19:18 < gkatsev> -g matjas javascript variable names
19:18 < purr> gkatsev: How to detect data from multiple buttons in HTML/Javascript - Stack ... <http://stackoverflow.com/questions/10927061/how-to-detect-data-from-multiple-buttons-in-html-javascript>
19:18 < gkatsev> :( not that
19:18 < txdv>  the number of of languages compiled two javascript is toooo damn high
19:18 < Sly> gkatsev, do you know of somewhere that keeps an updated API for V8?
19:18 < gkatsev> let me find the link
19:18 < Sly> http://izs.me/v8-docs/hierarchy.html is apparently out of date. It doesn't list ThrowException that I know of, probably more missing.
19:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:19 < dogbone> anyone know how to save a video to a file with getUserMedia() in html5?
19:19 < gkatsev> http://mathiasbynens.be/notes/javascript-identifiers that's the one
19:19 < dogbone> or microphone input
19:22 < spion> dogbone, I use flash on one of my projects
19:22 < spion> (to be more specific, wami)
19:22 <@mbalho> dogbone: a) there is a channel for javascript and b) getUserMedia is very new and limited right now, the best you could do is buffer audio into a binary container format and use the also new saveAs API
19:22 < milani> spion, mbalho https://github.com/milani/microphone.js
19:22 < milani> :D
19:23 < milani> old way you can use as polyfill
19:23 <@mbalho> milani: you should update that to use the new getusermedia api
19:24 < milani> mbalho, why not. I'll do whenever I could.
19:24 < gandhijee_> hello, i am trying to use node-waf to cross-compile a node module, but i cant get it to work
19:25 < gandhijee_> i've tried CC=<my cross cc> CXX=<my cross cpp> node-waf configure
19:25 < gandhijee_> but when i try to do the build it fails....
19:25 < joeyjoe> Hello. I'm  trying to track down some performance issues in a production node app running on Linux (Ubuntu). Process is eating 100% CPU and the HTTP server is not responding. What tools can I look at to begin? Is DTrace the hotness?
19:29 < CoverSlide> joeyjoe: Can't really use DTrace on linux
19:29 < vicapow> joeyjoe: unit tests
19:29 < vicapow> :P
19:30 < niggler> is there a profiling node?
19:30 < niggler> or a version of node built with -pg
19:31 < rio{{> if you were to create an api wrapper. Do you prefer to simply export all methods. Or export a api "class" constructor?
19:32 < gandhijee_> anyone know how to use node-waf to cross-compile the C++ code????
19:33 < yawnt> gandhijee_: it's deprecated
19:33 < yawnt> use gyp
19:33 < milani> anyone here with ubuntu 10.04 x64?
19:35 < gandhijee_> yawnt: at the risk of sounding stupid, how do i use gyp with node?
19:36 < yawnt> https://github.com/TooTallNate/node-gyp
19:36 < yawnt> gandhijee_: ^
19:36 < gandhijee_> yep, just found it. thanks!
19:36 < milani> gandhijee_, it is now integrated in npm 
19:37 < milani> you can test without installing node-gyp using npm install :)
19:37 < gandhijee_> i'm trying to build a module for webOS, node-waf worked fine for the emulator
19:37 < gandhijee_> but now that i want to deploy on the actual device, its a pain in the but =/
19:41 < cody--> hi
19:45 < niggler> what is the fastest way to check if a character is in a list of characters?
19:46 < milani_> niggler, list of characters? arr.indexOf ?
19:46 < niggler> well it's a fixed list
19:46 < niggler> i could do a regex check or just do indexOf against a fixed string
19:47 < tomshreds> I'm having a problem with connect, sessions dissapear once a request is over. Any ideas?
19:49 < joeyjoe> CoverSlide: ok, that's good to know i can't run dtrace on linux. well not really good, but that explains why i've been struggling to get it working ;)
19:50 < joeyjoe> I got to the bottom of the performance issues. Turned out I had too many open file handles. Figured it out through strace. ulimit fixed it.
19:55 < tomshreds> Could someone help me please? I really just want to know: is there anything I must call after responding a request to save my sessions with connect? Because now after each my sessions never get saved.
20:00 < chilts> tomshreds: generally no, there is nothing you need to do. Which session plugin are you using?
20:00 < tomshreds> Just directly connect
20:00 < tomshreds> For the moment
20:00 < chilts> so that's the memory store then
20:01 < chilts> can you paste your code (how you set up express.session())
20:01 < chilts> to gist.github.com
20:01 < chilts> (not here)
20:01 < tomshreds> I'm trying to make it work properly, but I was guessing it's something about redirects. I have some in my apps
20:01 < tomshreds> chilts: https://github.com/Brainpad/ThinAir/blob/master/libs/server.js#L17
20:03 < tomshreds> It must be about something else in my framework, but I can't point the finger on what it could be damn it. Thanks for the help
20:03 < tomshreds> Just tried without redirect and it does the same thing :-S
20:04 < mhr> disnet: if you say "(lambda () (display "hello"))" in scheme { }, it doesn't work, yet (display "hello") does, why?
20:04 < tomshreds> chilts What happens is: I create a session and on the next page (request) it's nowhere to be found (it seems like the whole session object gets overwritten with the default stuff).
20:06 < mhr> disnet: if you say "(lambda () (display "hello"))" outside of scheme { }, it works on its own, so I suspect it has to do with the sexp macro
20:07 < Benvie> mhr to answer your earlier question
20:07 < Benvie> I do it by accepting that I am poor because i'd rather spend my time doing this than doing client work
20:08 < Benvie> and just hope that I come up with something good
20:08 < mhr> good luck on striking gold, benvie
20:09 < mhr> I like coding, but idk if I could support myself when I'm older by doing solely code.  I wish I could, though.
20:09 < Benvie> I don't need that, just enough so I can keep doing what I like =D. So hopefully I stumble onto a way to do that
20:09 < Benvie> I am paid well when it's work I don't want to do, so I minimize that to a small amount and spend a lot of time doing what I want and making no money
20:10 < mhr> brb
20:10 < s5fs> Benvie: i respect that
20:11 < janmower> i <3 make -j 8
20:11 < s5fs> Benvie: i work for a very small shop, but over time i'm wondering if it makes sense to tow the corporate line a bit more. all the deep pockets allows for easier access to more interesting gear, imagine having your own gigantor 3d printer
20:11 < Benvie> I really enjoy making the things I do but it's kind of a raw  passion that drives me and it's hard to get paid for that
20:12 < Benvie> well I am fortunate in that the thing that I am driven to do requires no resources beyond my capacity to imagine and learn and focus for days on end
20:12 < Benvie> so I have what I need as long as the necessities of life are paid for
20:15 < CoverSlide> the bear necessities of life will come to you!
20:17 < timeturner> what's the best way to test socket.io code in node and on the client?
20:17 < tomshreds> chilts: any idea? :)
20:20 < s5fs> timeturner: test how?
20:20 < chilts> tomshreds: sorry, yeah, your code looks fine
20:20 < chilts> really not sure what might be happening
20:20 < timeturner> test if it works with x number of sockets as expected
20:20 < tomshreds> chilts: oh that sucks, I'm so lost with this. Thanks for checking it out anyways
20:20 < chilts> are you sure you're writing to your session correctly?
20:20 < timeturner> I'm not sure how to simulate multiple sockets
20:21 < tomshreds> I guess so here's an example:
20:21 < chilts> can you link me to the other page you're referencing ... ?
20:21 < s5fs> timeturner: I'm just using two different browsers
20:21 < tomshreds> https://gist.github.com/3854726
20:21 < timeturner> but how would I check for 10 people
20:21 < timeturner> or some really big number
20:21 < tomshreds> the other page? what I linked you earlier?
20:21 < tomshreds> https://github.com/Brainpad/ThinAir/blob/master/libs/server.js#L17
20:22 < s5fs> timeturner: not sure, i guess it depends on what you're looking to test.
20:22 < s5fs> timeturner: i'm curious as well, i've done load simulation with soapui before, but that's not really the same problem
20:23 < tomshreds> chilts: and the part between the server.js and the gist is https://github.com/Brainpad/ThinAir/blob/master/libs/router.js#L31
20:24 < timeturner> actually, I'm not even sure how app devs that use video services to facilitate many to many video chat test that
20:24 < timeturner> I mean the easiest way to test any of this is to just open multiple browsers and then use multiple computers
20:24 < niggler> if i define a prototype method for String in a node module, can other modules requiring it also inherit the prototype?
20:24 < timeturner> but still
20:25 < timeturner> niggler, yes.
20:25 < timeturner> niggler: try it
20:25 < niggler> *is this a behavior that will extend to future versions or is it ephemeral
20:34 < guidocalvano> does anyone know what unit the heartbeat parameters of socket io are in?
20:40 < mhr> disnet: I think the reason it wasn't working was because the sexp was designed for only one param, no commas, I think that's it.
20:42 < mhr> no, I'm wrong
20:42 < mhr> it's because function is a keyword, not a function
20:42 < mhr> what to do...?
20:45 < zezikaro> hi does anyone know a good framework for soap/node ?
20:48 < WarheadsSE> Question on some ugly c code getting ported/c-bound to node. I have an ugly cipher engine (not by me but can't change it right now) that uses a variant of XOR base that relies on lovely bits of rounding/memory handling from C types. would anyone have an idea of which way to go ?
20:59 < paradoxquine> hey guys! it there a way to indicate that one dependency of my package should be installed globally? (this is a private package for some build stuff and i want grunt installed globally by default but nothing else)
21:00 < MI6> joyent/node: Andreas Madsen v0.8 * be5a8e2 : doc: consistent use of the callback argument - http://git.io/dLGJqg
21:08 < Sly> bnoordhuis, you around?
21:08 < bnoordhuis> Sly: i am
21:08 < Sly> https://gist.github.com/070f9b12391f841b9918
21:08 < Sly> How would I get `str` back to `const char*`?
21:09 <@isaacs> ben_alman: you can use `npm link ../foo` to link the folder over there into here
21:09 < bnoordhuis> Sly: String::Utf8Value c_str(str); const char* s = *c_str;
21:09 <@isaacs> ben_alman: and `npm ls` will show you what's linked from where
21:10 < Sly> Thanks, man.
21:10 < bnoordhuis> Sly: caveat emptor, the pointer is tied to the lifecycle of c_str
21:10 < bnoordhuis> Sly: i.e. when c_str goes out of scope, the pointer becomes invalid
21:10  * isaacs has been bitten by that before
21:10 < Sly> Where is c_str defined?
21:11 < Sly> I haven't seen that in any of the API docs.
21:11 < Sly> Then again, I think the docs I'm looking at are outdated.
21:11 <@isaacs> Sly: in the code bnoordhuis posted above
21:11 < Sly> isaacs, I know that.. I mean, within V8 or whatever.
21:11 < Sly> Where is `c_str`?
21:11 <@isaacs> String::Utf8Value c_str(str);
21:11 <@isaacs> Sly: c_str is what bnoordhuis called the var.
21:11 <@isaacs> Sly: it's just a variable name
21:11 < Sly> Ah.
21:11 < bnoordhuis> ^ that
21:12 <@isaacs> String::Utf8Value whateverYouCallTheUtf8ValueVariable_str(str);
21:12 < Sly> Got'cha.
21:15 < jesusabdullah> so I found a server the other day that uses boost xml serialization as the protocol :(
21:16 < jesusabdullah> have you guys heard of this? It's libboost's way of serializing c++ structures, and it's non-portable
21:17 < astropirate> :S
21:17 < astropirate> i've heard of it
21:17 < astropirate> but havent used it
21:17 < astropirate> looked at it but came up with my own scheme
21:18 < guidocalvano> hey bnoordhuis 
21:18 < bnoordhuis> guidocalvano: hey
21:18 < bnoordhuis> long time no see
21:18 < guidocalvano> yes
21:18 < guidocalvano> I've been mad busy
21:18 < bnoordhuis> mad, busy, or both?
21:19 < guidocalvano> yes (:
21:19 < guidocalvano> we have turned our wall into a display here
21:19 < guidocalvano> working on that
21:19 < guidocalvano> can't find the params for timing out the connection though
21:20 < guidocalvano> I really don't have time to work on the screen though
21:20 < guidocalvano> we use node for multiplayer game options
21:20 < mscdex> niggler: hey, can you provide details as to what you needed in order to get node-ncurses working on OSX?
21:21 < guidocalvano> bnoordhuis: what are you up to
21:21 < bnoordhuis> guidocalvano: the usual, fixing all the bugs
21:21 < guidocalvano> no building features?
21:22 < disnet> mhr: problem isn't that function keyword
21:22 < disnet> mhr: try this: https://gist.github.com/3854258
21:22 < mhr> thanks
21:22 < bnoordhuis> guidocalvano: not really, node is pretty much finished
21:23 < bnoordhuis> guidocalvano: i think that after 1.0 comes out we'll close up shop
21:23 < guidocalvano> bnoordhuis: (:
21:23 < bnoordhuis> :)
21:23 < guidocalvano> I expect fotos with wicked sunglasses and cool poses
21:24 < nathan7> Hi earthlings
21:24 < nathan7> Hi guidocalvano 
21:24 < CoverSlide> hi nathan how is uranus
21:25 < nathan7> Lovely, dear.
21:25 < guidocalvano> yo nathan7 
21:25 < nathan7> jesusabdullah: Does anything useful come out of Boost *at all*?
21:26 < nathan7> guidocalvano: Timing out what kind of connection?
21:26 < guidocalvano> nathan7: we should get bnoordhuis to visit the hackerspace
21:26 < nathan7> guidocalvano: You can start setting timers and stuff
21:26 < WarheadsSE> Any thoughts aon a clean way of porting this ugly XOR cipher into node? https://gist.github.com/f332d01f7ef59a9629ff
21:26 < guidocalvano> nathan7: when a player's socket disconnects he should be removed from the game
21:27 < nathan7> guidocalvano: I think TCP can handle timeouts just fine though
21:27 < nathan7> guidocalvano: yes, you can hook disconnection
21:27 < guidocalvano> nathan7: but timeout takes 80 secs now
21:27 < guidocalvano> nathan7: I know I can hook disconnection
21:27 < nathan7> guidocalvano: ping the user every once in a while
21:27 < nathan7> guidocalvano: setInterval is your friend
21:27 < guidocalvano> nathan7: but I want socket.io to do that for me
21:27 < ben_alman> isaacs: i'm running into really huge problems with scale when using npm link
21:28 < ben_alman> i can explain it in detail if you're interested
21:28 < ben_alman> and show you my bash script "solution"
21:29 < durango> How can I get the tmp dir in nodejs?
21:29 < durango> process.env.TMPDIR ?
21:29 < nathan7> guidocalvano: you and your socket.io
21:29 < bnoordhuis> durango: yes
21:30 < durango> ty
21:30 < nathan7> guidocalvano: I still prefer shoe to handle my socks
21:30 < ProblemEmitter> guidocalvano, you can set the socket.io sync disconnect configuration value to allow getting the 'disconnect' event as soon as it really happens
21:30 < samholmes> Does everyone here use Joyent mostly?
21:30 < ben_alman> isaacs: i have 35 npm modules, many of which are interlinked. basically, what i'm doing is iterating over all of them and for each) removing the node_modules; npm install; npm link. Then, once done, i go back into each on and remove all modules in each module's npm_modules that is a just-linked module. then i do npm install --link to link them all together
21:31 < nathan7> o.o
21:31 < samholmes> Or do some of you use AWS?
21:31 < ben_alman> isaacs: https://github.com/cowboy/dotfiles/blob/ff4bf27/source/50_devel.sh#L42-59 (eachdir just runs the specified commands in each dir)
21:31 < nathan7> samholmes: nodejitsu, random crap on my own server
21:31 < samholmes> nathan7: By random crap, you mean?
21:31 < nathan7> random bits of code
21:31 < samholmes> nathan7: Also, isn't nodejitsu just joyennt?
21:32 < nathan7> samholmes: Is it?
21:32 < samholmes> nathan7: VPS server = your own server?
21:32 < guidocalvano> ProblemEmitter: the use case is this: user closes closes browser, his avatar should be removed from the game
21:32 < mhr> disnet: because we have define and lambda, there's no need for a display macro, you can define it as a function
21:32 < nathan7> Last I checked they were an independent company
21:32 < nathan7> samholmes: I have a plurality of VPSes that my crap runs on, yes
21:33 < samholmes> nathan7: where do you host your db?
21:33 < ProblemEmitter> giannihangover, wait a sec
21:33 < nathan7> samholmes: iriscouch for CouchDB, redistogo for Redis
21:33 < guidocalvano> ProblemEmitter: and the server that keeps the game state should respond to the disconnect
21:33 < nathan7> samholmes: nodejitsu's jitsu tool has a database command
21:33 < mhr> wait, no, I'm wrong, you need display to transform into console.log, so nvm
21:33 < samholmes> nathan7: you use seperate companies/services for db?
21:33 < nathan7> samholmes: jitsu db create couchdb #or something like that
21:34 < ProblemEmitter> guidocalvano, set the 'sync disconnect on unload' value to true in socket.io-client
21:34 < nathan7> samholmes: Yes..?
21:34 < nathan7> samholmes: Welcome to the internet
21:34 < samholmes> haha
21:34 < nathan7> samholmes: or the cloud if that's what you want to call it
21:34 < nathan7> samholmes: I can mish-mash services from all over the internet together
21:34 < nathan7> samholmes: because they are connected to it. they connected to the internet.
21:34 < samholmes> nathan7: are u using nodejitsu's shared plans?
21:34 < guidocalvano> ProblemEmitter: but the server should decide to initiate disconnect
21:34 < nathan7> samholmes: Yep. Trying to move away from it but nodejitsu is too lovely
21:35 < ProblemEmitter> guidocalvano, you can call .disconnect() on any connection object...
21:35 < nathan7> samholmes: Can't really afford to throw money at nodejitsu
21:35 < ProblemEmitter> that's how you initiate a disconnection from the server side
21:35 < samholmes> nathan7: shared makes me feel limited. Do I have root access with nodejitsu's shared?
21:35 < nathan7> samholmes: of course not, you don't need that
21:35 < guidocalvano> ProblemEmitter: but how does the server know? I tried the heartbeat code stuff, I can't get it to work
21:36 < nathan7> samholmes: You deploy node apps to it
21:36 < nathan7> samholmes: that is all
21:36 < nathan7> samholmes: You aren't running a VPS
21:36 < nathan7> samholmes: You run a single node app.
21:36 < nathan7> samholmes: Your node app runs on a light VM with 256M of RAM
21:37 < guidocalvano> ProblemEmitter: user clicks close button on browser, no disconnect or anything is sent, server hears nothing from client and must decide to disconnect the socket but doesnt
21:37 < samholmes> nathan7: I see. I wonder if I'll need root though. I'm trying to build a high end service, one that I'm preparing for a high growth rate.
21:37 < nathan7> samholmes: I do jitsu deploy
21:37 < nathan7> samholmes: tahdah, my app is up
21:37 < ProblemEmitter> guidocalvano, thats because your sync disconnect on unload is false on the client side
21:37 < nathan7> samholmes: I can scale my app to multiple drones if I want
21:37 < ProblemEmitter> the 'sync disconnect on unload' configration option
21:37 < guidocalvano> k
21:37 < nathan7> samholmes: (one of those VMs is called a 'drone')
21:37 < guidocalvano> I'll try it
21:38 < nathan7> samholmes: Nodejitsu does application hosting, other places do DB hosting.
21:38 < ProblemEmitter> they defaulted it to false in socket.io 0.9.10 or 0.9.9
21:38 < samholmes> nathan7: Yeah, it's pretty cool from what I heard about nodejitsu. Very simple stuff. But, if I'm building something that will possibly be growing at a rate such as pinterest or instagram's growth rate, will nodejitsu be able to handle this scale?
21:38 < nathan7> samholmes: Yep.
21:39 < nathan7> samholmes: Scale to more drones. Write your app for multiple instances with a share-nothing model - like any node app that should scale to more than one process.
21:39 < samholmes> share-nothing?
21:39 < nathan7> samholmes: Talk to the nodejitsu folks
21:39 < nathan7> samholmes: share-nothing - don't keep some kind of global state in your process
21:39 < samholmes> what about session data?
21:40 < nathan7> samholmes: that's also in the DB
21:40 < samholmes> like a redis db?
21:40 < nathan7> Yeah.
21:40 < ProblemEmitter> guidocalvano, io.connect(uri, [options]); // make sure the options object has a property 'sync disconnect on unload' set to true
21:40 < nathan7> Don't share stuff across requests, basically.
21:40 < samholmes> but, how do the processes remain in synch with this db?
21:40 < nathan7> Because the next request might run on another machine.
21:40 < nathan7> And that machine only shares the DB with you, not your process memory.
21:41 < nathan7> samholmes: Read from it when you need to.
21:41 < nathan7> samholmes: Keep minimal local state.
21:42 < nathan7> samholmes: Every node needs to be able to die at any moment
21:42 < nathan7> samholmes: and your app needs to be able to keep going as normal
21:42 < guidocalvano> ProblemEmitter: var socket = io.connect( 'http://' + location.hostname + ':'+ '{{socketIoPort}}', { 'sync disconnect on unload' : true} ) ;
21:42 < guidocalvano> nothing
21:43 < samholmes> Right now, I haven't set up a session store for my app, it's still using MemoryStore. So, all my session data is local state. If I set up a redis store for my sessions, wouldn't the redis database data just be loaded into memory when the app loads up, then all reads are from local state?
21:43 < samholmes> nathan7: ^
21:43 < nathan7> samholmes: No
21:43 < windsurf_> which library can I use to connect to mysql over ssl? I've successfully tested from a desktop mysql client to my db over ssl. node-mysql doesn't seem to support it
21:43 < ProblemEmitter> guidocalvano, whats your io.version ?
21:43 < nathan7> samholmes: that'd defeat the point of a DB
21:43 < guidocalvano> ProblemEmitter: but is it also possible to have the server check whether the client is still there? I tried using heartbeats but it !@#$!@#$ refuses
21:43 < nathan7> samholmes: a DB isn't a purely a piece of storage
21:43 < nathan7> samholmes: it is abstracted storage
21:43 < nathan7> samholmes: which you can access really quickly
21:44 < ProblemEmitter> guidocalvano, you should probably ask in the #socket.io channel
21:44 < guidocalvano> I did
21:44 < windsurf_> any idea which is better, node-mysql or mysql-libmysqlclient?
21:45 < guidocalvano> my version is '0.9.10'
21:45 < ProblemEmitter> guidocalvano, whats your io.version ? im using 0.9.9 where that specific value defaults to true and everything is ok
21:45 < samholmes> nathan7: So, once I hook up the redis store in my express/connect app, all reads will be actual requests to the database?
21:45 < ProblemEmitter> i know for sure that it was changed in 0.9.10
21:46 < ProblemEmitter> https://github.com/LearnBoost/socket.io-client/commit/4479c9d9cd9846f819510d70b032a6ca6652966d
21:47 < nathan7> samholmes: Yep
21:47 < samholmes> nathan7: Just to be clear, is that what you're saying would happen? Cause if so, it's pretty obvious how all the processes would have the same data in real-time (shared state via an external db).
21:47 < samholmes> nathan7: ok, cool
21:47 < samholmes> redis is pretty quick, hopefully.
21:47 < nathan7> samholmes: Redis is basically a bloody fast remote key-value store
21:47 < samholmes> sweet!
21:47 < nathan7> samholmes: stick stuff in by name, ask for it by name. bloody quickly.
21:47 < nathan7> samholmes: You can also do useful things like increment things by name and stuff like that
21:48 < samholmes> nice. That's awesome. 
21:48 < samholmes> nathan7: you're british? :D
21:48 < nathan7> samholmes: Of course.
21:48 < nathan7> samholmes: Any redis command is atomic too, because it's built with a node-like concurrency model
21:48 < samholmes> nathan7: Of course? Haha.
21:49 < ProblemEmitter> how does redis store work anyway?
21:49 < samholmes> ProblemEmitter: Idk, but it looks pretty simple. I think redis' website has more info on it.
21:50 < samholmes> nathan7: So, nodejitsu, is all about hosting the application, not storing data?
21:50 < nathan7> samholmes: Yep.
21:50 < nathan7> samholmes: UNIX-land. One tool, one job. Now applied to services.
21:50 < nathan7> samholmes: If I want a CouchDB, I'll hit up iriscouch.
21:50 < nathan7> samholmes: If I want to host an app, nodejitsu's my friend.
21:50 < samholmes> nathan7: The only other thing that I need that my VPS does for me is content delivery, photos, videos, and whatnot.
21:50 < nathan7> samholmes: If I want to host craptonnes of data, I have Amazon AWS and things
21:51 < nathan7> err
21:51 < nathan7> not AWS
21:51 < nathan7> oh it is
21:51 < samholmes> Amazon?
21:51 < nathan7> AWS has storage and stuff
21:51 < samholmes> So does joyent.
21:52 < samholmes> So maybe either joyent, amazon or luna cloud.
21:52 < nathan7> S3 is what I mean
21:52 < samholmes> Ah.
21:52 < samholmes> So a CDN?
21:53 < nathan7> samholmes: Yeah
21:53 < nathan7> samholmes: Basically a CDN
21:53 < samholmes> I see.
21:53 < samholmes> This seems to make sense instead of having everything on a VPS, or multiple VPS
21:53 < nathan7> Yeah
21:53 < nathan7> Scales better
21:53 < samholmes> not to mention all the maintainance stuff you have to go through with managing your own VPS.
21:53 < nathan7> Scaling is a solved problem, I don't want to start building more VMs and things
21:54 < nathan7> My main issue with scaling is that I haven't managed to build anything awesome enough to require any thought about scaling
21:55 < samholmes> nathan7: What have you been building, if it's a public answer?
21:55 < ProblemEmitter> nathan7, :D
21:55 < nathan7> random little cool things
21:55 < nathan7> but nothing major
21:55 < nathan7> I am working on a better service to share objects for 3D printing
21:56 < nathan7> But I kind of have the requirement of staying outside the US with that as to not be subject to silly US IP law
21:56 < nathan7> Because I have no desire to hang out with lawyers
21:57 < nathan7> which unfortunately somewhat restricts my choices in hosting and things
21:57 < chilts> nathan7: AWS has data centres in Ireland, Signapore, Japan and Brazil too
21:58 < nathan7> chilts: Yes, but they're owned by Amazon.
21:58 < chilts> righto
21:58 < nathan7> chilts: Which means I am still susceptible to silly USthings
21:58 < chilts> there are some British hosting companies you could use
21:58 < chilts> or European
21:58 < chilts> where are you located?
21:58 < nathan7> .nl
21:58 < nathan7> The land of XS4ALL.
21:58 < samholmes> nathan7: What's there to be concerned about?
21:58 < nathan7> samholmes: IP law.
21:59 < samholmes> nathan7: you mean patents and shit?
21:59 < nathan7> samholmes: I want to do Github for things, basically
21:59 < nathan7> samholmes: Yep, patents and shit.
21:59 < s5fs> samholmes: guh, ran into my first patent concern at work recently, sucks
22:00 < samholmes> nathan7: you're concerned you might do something that someone has a patent on, and then get sued and thrown under a bridge with a troll?
22:00 < s5fs> sorry, was for nathan7 
22:00 < nathan7> People doing patent litigation have a lot more money than those slinging DMCA takedown requests at people.
22:00 < nathan7> samholmes: No
22:00 < nathan7> samholmes: I'm concerned that I might have to take down patented things.
22:00 < nathan7> samholmes: I want to host everything.
22:00 < nathan7> If anyone files a takedown request, I'm having a piratebay-style legal section.
22:00 < mhr> disnet: is it possible to make linked lists in sweetjs?  case [$x ...] => { [$x (,) [...]]; } gives a ellipsis level error...?
22:00 < nathan7> With retractable baton jokes and everything.
22:01 < nathan7> But I'd like to avoid it, even though that kind of thing is hilarious
22:01 < s5fs> nathan7: seems like having a takedown process is required for file lockers these days
22:01 < samholmes> nathan7: You're not afraid of building something that is patented by someone else?
22:01 < samholmes> nathan7: I'm not sure I understand what you mean exactly?
22:02 < samholmes> nathan7: Oh, I think you mean copyright laws, not patent laws, cause patents are usually for inventions.
22:03 < samholmes> So, like what happened to megaupload for example?
22:03 < samholmes> -? +.
22:03 < nathan7> samholmes: No, I am talking about patent laws.
22:03 < nathan7> samholmes: I am hosting designs for physical objects
22:04 < nathan7> samholmes: That can be turned into physical objects in minutes
22:04 < samholmes> nathan7: Oh, I see.
22:04 < samholmes> I see now, how this could be a patent issue.
22:04 < nathan7> samholmes: I am hosting things that may be covered by patents.
22:04 < nathan7> samholmes: Like the pirate bay hosts things that may be covered by copyright law.
22:04 < samholmes> Right on.
22:04 < samholmes> What's the domain to your site?
22:04 < s5fs> donotsue.me
22:05 < ProblemEmitter> correction: pirate bay does not host anything except .torrent files, which are not covered by copyright law
22:05 < nathan7> samholmes: We're still trying to sort out backend stuff
22:05 < EyePulp> heh
22:05 < nathan7> ProblemEmitter: Yes. So I'm doing something even more problematic here.
22:05 < nathan7> My plan is to ensure that git servers are in .nl
22:05 < samholmes> nathan7: 3D printing is a cool concept. What sort of materials can you print with though?
22:05 < EyePulp> sintered metal rules
22:05 < nathan7> samholmes: PLA. A lovely plastic.
22:06 < nathan7> EyePulp: Metal powders fine enough for sintering are unfortunately severe breathing hazards.
22:06 < nathan7> EyePulp: Not to mention the cost of the powders themselves and the cost of an SLS 3D printer in general.
22:06 < EyePulp> Do your printers have lots of lung problems?
22:07 < nathan7> No, standard modern RepRaps are FDM.
22:07 < tomshreds> Hey guys, I'm trying to use connect's sessions. It almost works, except that when the page reloads, the sessoins are gone from req.session. Any ideas? Here's how I implemented it: https://github.com/Brainpad/ThinAir/blob/master/libs/server.js
22:07 < samholmes> nathan7: How strong is the plastic?
22:07 < samholmes> Also, wouldn't it be cool to eventually see electronics built with 3D printers?
22:08 < nathan7> Yes, it would.
22:08 < nathan7> No, we can't yet.
22:08 < nathan7> samholmes: I recently broke a small screwdriver trying to break a failed print in boredom
22:08 < nathan7> The metal fractured, the print was surprisingly fine.
22:08 < s5fs> nathan7: I assume you're seen the Form 1 kickstarter?
22:09 < nathan7> s5fs: I probably have.
22:09 < nathan7> We have a factoid in #reprap's factoid bot that I wrote. A moment.
22:09 < EyePulp> nathan7: so you guys want to store a library of 3d design files people can download and print locally.  And your concern is that the designs will run afoul of patents and US IP restrictions
22:09 < nathan7> < kthx> kickstarter is "oh hey I'll build a completely new 3D printer from scratch without any knowledge and ignore all prior research" and http://i.imgur.com/YEsRy.jpg 
22:09 < s5fs> EyePulp: think 'lego bricks' haha
22:10 < nathan7> EyePulp: We're trying to kick Thingiverse's ass.
22:10 < nathan7> EyePulp: And yes, Thingiverse has already had some minor IP crap.
22:14 < mhr> disnet: when you posted the link "start of scheme in sweet.js", why did you give it the extension .sjs?  I tried that in node, and it didn't work, what is that?
22:15 < nathan7> mhr: it's to be run with sweet.js
22:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:15 < nathan7> mhr: have you actually looked at the code and/or sweet.js?
22:15 < mhr> but .js works just fine too...?
22:15 < mhr> yeah
22:15 < nathan7> $ sjs -o output.js my_sweet_code.js
22:16 < nathan7> (from the sweetJS homepage)
22:16 < nathan7> mhr: your .sjs is not valid JS
22:17 < mhr> if it's sjs -o output.js my_sweet_code.js, where does .sjs come in?
22:17 < nathan7> well, it makes sense to call it my_sweet_code.sjs
22:17 < nathan7> and compile it to my_sweet_code.js
22:17 < mhr> ah, I see
22:25 < MI6> joyent/node: Bert Belder homedir * f9a5a91 : windows: use USERPROFILE to get the user's home dir  Fixes GH-3461 Fixes  - http://git.io/KdUozw
22:39 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
22:46 < gandhijee_> any tips on how to use node-gyp to do a cross-compile?
22:47 < TooTallNate> gandhijee_: if you follow the steps here it should work: http://n8.io/cross-compiling-nodejs-v0.8/
22:48 < gandhijee_> thanks TooTallNate 
22:48 < gandhijee_> actually i don't need to cross-compile node.js, i need to cross-compile this c++ module i wrote for node.js
22:49 < MI6> joyent/node: Bert Belder master * 5288ed7 : windows: use USERPROFILE to get the user's home dir  Fixes #3461 Close #3 - http://git.io/LskQiw
22:49 < MI6> joyent/node: Ben Noordhuis v0.8 * eec8c2e : crypto: fix -Wtautological-compare warning - http://git.io/OOhKiQ
22:50 < gandhijee_> having a bit of trouble figuring out how to do that...
22:51 < disnet> mhr: if you name it .sjs you can require an sjs file from a normal js file and the macros get expanded
22:51 < disnet> mhr: https://github.com/mozilla/sweet.js/commit/c8d9d6fa8ed41230df56bd4c99f2cf75df5924d6
22:52 < mhr> makes sense.  did you see the linked list question from earlier?
22:52 < mhr> "is it possible to make linked lists in sweetjs?  case [$x ...] => { [$x (,) [...]]; } gives a ellipsis level error...?"
22:52 < disnet> yeah, looking into it
22:53 < disnet> mhr: humm…what are you wanting to do with that?
22:53 < gandhijee_> can i use node-gyp to build modules against node 0.4.12?
22:54 < TooTallNate> gandhijee_: negatory, node-gyp requires v0.6 or newer
22:55 < disnet> mhr: oh! I think you want case [$x ...] => { [$x (,) ...]; }
22:55 < mhr> disnet: that's only an associative array
22:55 < mhr> or whatever it's called, haha, idk the terminology
22:56 < mhr> in scheme, there's car and cdr.  it's hard to explain, but if you say (car '(1 2 3)), '(1 2 3) being a list of 1 2 and 3, then it returns 1, and if you say (cdr '(1 2 3)), then it returns '(2 3)
22:56 < CoverSlide> hashtable? dictionary?
22:57 < mhr> '(1 2 3) is syntactic sugar for (1 (2 (3)))
22:57 < CoverSlide> in lisp, you can combine them like caaaadr
22:57 < CoverSlide> although i don't exactly know how that works, and i can never remember the difference between cadr and cdar
22:58 < gandhijee_> TooTallNate: any directions on how to use node-waf to cross-compile any where?? i've been trying for a bit now
22:58 < gandhijee_> getting frustrated.....
22:58 < mhr> yeah, cdr and car can be combined to find exactly the datapoint you want, so (cadr '(1 2 3)) returns 2
22:58 < mhr> cadr is the car of the cdr
22:58 < CoverSlide> http://www.lispworks.com/documentation/HyperSpec/Body/f_car_c.htm << wheeeeee!
22:58 < mhr> cdar is the cdr of the car, I think
22:59 < TooTallNate> gandhijee_: not really… node-waf has been deprecated for a while now. you guys should upgrade from v0.4.x
22:59 < CoverSlide> mhr: it's the "i think" part that i say to myself every time
22:59 < mhr> haha
22:59 < disnet> mhr: so you're wanting to turn [1 2 3] into [1 [2 [3]]?
22:59 < mhr> yup
22:59 < mhr> or would it be [1, [2, [3]]]?
23:00 < disnet> ah, right the pesky comma
23:00 < gandhijee_> TooTallNate: i can't really tell HP to upgrade the node.js on the touchpad for me =/
23:00 < gandhijee_> wish i could though
23:00 < mhr> is it possible, disnet?
23:00 < disnet> mhr: yeah, think you need multiple cases
23:00 < TooTallNate> gandhijee_: i've heard of people upgrading node on their HP devices
23:01 < TooTallNate> gandhijee_: find creationix 
23:01 < disnet> mhr: and a recursive call
23:03 < mhr> would you mind making a gist/paste?  I can't figure out how it would be done.
23:03 < disnet> mhr: trying to figure it out :)
23:03 < mhr> thanks
23:04 < mhr> sorry if I came across as rude, I'm not a very proficient coder
23:04 < EhevuTov> anyone know of a Node SNMP Trap module?
23:05 < EhevuTov> if not, I think I may have found the beginnings of my first module :->>>
23:05 < disnet> mhr: no worries! macros are weird…I'm still figure them out too :)
23:06 < EhevuTov> macros in JS?
23:06 < mhr> sweetjs.org
23:06 < mhr> * http://sweetjs.org
23:06 < EhevuTov> omg
23:06 < mhr> thanks to disnet here
23:06 < mhr> et al
23:07 < EhevuTov> ha that's awesome. I wonder if CS won't be as popular because of that
23:07 < mscdex> EhevuTov: i think there is at least one npm module that does traps
23:07 < mscdex> never used it though
23:07 < EhevuTov> mscdex, hrm. I'll have to look harder then. I'm only finding SNMP agents at the moment...
23:08 < mhr> sweet.js is definitely going to change everything, I think.  maybe that's hyperbole, but it's really, really cool
23:08 < EhevuTov> in other words, SNMP gets/sets versus traps
23:08 < disnet> mhr: https://gist.github.com/3855533
23:08 < disnet> mhr: think that works
23:08 < mhr> I'll try it out, thanks so much
23:08 < mscdex> a few months ago i thought about writing a binding to one of the two more popular snmp libraries out there, but the snmp requirement fizzled thankfully :-)
23:10 < EhevuTov> mscdex, I've been working with SNMP on a slightly higher level(using libraries like Net-SNMP) for a couple years. I can understand :-) Although, I've grown to see the value of SMI syntax and SNMP
23:11 < EhevuTov> mscdex, I think Joyent was doing some SNMP work, but I have yet to see a big suite
23:11 < s5fs> eventualbuddha: SMI?
23:11 < s5fs> EhevuTov: SMI?
23:11 < mscdex> EhevuTov: never heard of that
23:12 < EhevuTov> which is surprising, since Node, but nature, lends itself to distributed computing and the need for automatic network monitoring
23:12 < s5fs> WMI maybe?
23:12 < EhevuTov> SMI
23:12 < EhevuTov> s5fs,  http://en.wikipedia.org/wiki/Management_information_base
23:12 < EhevuTov> it's a sub or super set, of ASN.1
23:13 < EhevuTov> an abstract data type notation
23:13 < s5fs> EhevuTov: many thanks, i've done lots of snmp monitoring and scripting, hadn't heard that one before
23:13 -!- isaacs changed the topic of #Node.js to: Node.js -- JavaScript all the things.
23:13 < CoverSlide> w00t! w00t!
23:13 < EhevuTov> no problem. ASN.1 get talked down about a lot because it's old, but really it's a nice datatype representation
23:14  * mscdex shakes a fist at snmp
23:14 < EhevuTov> LOL curse the gods mscdex!
23:14 < s5fs> "simple my ass"
23:14 < EhevuTov> ROTFL so true...
23:15 < EhevuTov> it IS simple?but with simplicity, comes complexity to build around :-)
23:15 < mhr> disnet: I should be able to do "(conspair [1 2 3])", right?  yet it doesn't work?  how can that be fixed without it being a case in sexp { } ?
23:15 < s5fs> agreed
23:15 < mscdex> there are standalone asn.1 parsers for node i think too...
23:15 < EhevuTov> RISC processors come to mind, where you have to do more on the top end sometimes(right more code)
23:15 < EhevuTov> mscdex, yes thank you! I saw that.
23:16 < ben_alman> isaacs: i
23:16 < ben_alman> isaacs: i'm still trying to figure out a good solution to this npm development model with npm link
23:16 < ben_alman> it's not good
23:16 < dragon> I'm using cluster module, relying on 'listening' event to get the worker's port number. In workers, I'm passing port 0 to listen() to obtain a random port. I'm expecting to see the actual assigned port in 'listening' event handler, but instead am seeing 0. Is this expected?
23:16 < EhevuTov> People want to change or "upgrade" SNMP to something like WMI, but really, a new later needs to be standardized(for things like alarm correlation) that just uses SNMP on the bottom end.
23:17 < dragon> On a side note, it was dead simple to get started with node.js on raspberry pi. Go node.js!
23:17 < Zak> go linux more like it :P
23:17 < mscdex> SNMPv4 should use something simpler like json or HTTP
23:17 < EhevuTov> dragon, that's awesome. I've been thinking of playing with a Pi. Do you know about computational speed? Like?how well does it fair when it comes to power?
23:18 < dragon> Zak: go arch. Debian was a pain.
23:18 < Zak> damn
23:18 < dragon> EhevuTov: It can be overclocked to 1GHz, and it's pretty responsive.
23:19 < dragon> Granted, you can run one thing well on it. Can't really multitask.
23:19 < EhevuTov> mscdex, I've thought about that, and I would have been with you about a year ago on that?but I'm starting to think that where it's at is good MIB translators/compilers, that will translate to JSON/C/etc. It's just "not fun"
23:20 < dragon> e.g. if you're running npm install, other terminal will become slightly unresponsive. It's still much more efficient than I expected, though.
23:20 < dragon> nodejs ran well on it. I plan to load-test it at some point.
23:20 < EhevuTov> mscdex, but having your model contained within an alarm, like in JSON, would definitely speed up alarm monitoring translation programming
23:21 < dragon> Anyways, any insights about the cluster module? I was expecting the actual port number, which is visible from the worker.
23:22 < dragon> oh no, maybe it's a race condition. Perhaps 'listening' is triggered too soon.
23:22  * EhevuTov starts to study Node.UDP
23:22 < EhevuTov> dragon, I do that a lot :-|
23:24 < gandhijee_> thanks again TooTallNate 
23:25 < TooTallNate> gandhijee_: sure np
23:26 < EhevuTov> dragon, asking from complete ignorance, do you think one could make a hashing cluster out of Raspberry Pi's and get the same or more computing power than your average stock server for the real estate and/or power consumption?
23:27 < nathan7> EhevuTov: relative to w well-equipped GPU cracking cluster?
23:27 < nathan7> *a well-equipped
23:27 < iaingrant> EhevuTov: unlikely
23:27 < iaingrant> well, unless you are talking real space that the cpu takes up, maybe then there is a competition
23:27 < EhevuTov> nathan7, well, actually that would be out of my price range. I wouldn't think it would be against a GPU since those CPU's are basically built for that. But I was thinking against a "normal" x86
23:27 < ben_alman> Pro tip: never ever EVER do "npm install --link" in a project with no node_modules folder already
23:28 < nathan7> ben_alman: how so?
23:28 < EhevuTov> nathan7, on a side note, I have been daydreaming about what it would be like to do CUDA or CL with Node
23:28 < nathan7> EhevuTov: heh
23:28 < disnet> mhr: macros expand "outside-in" so you actually do need to add it in some way to sexp
23:28 < iaingrant> EhevuTov: so what is your actual question..... if it is pure grunt, I'd be suprised, but get a group of them together and try it
23:28 < ben_alman> it will take EVERY dep and install it globally and then symlink it there
23:29 < nathan7> EhevuTov: that's C-land
23:29 < ben_alman> instead of just the ones you've done "npm link" on :/
23:29 < EhevuTov> nathan7, yes, but Node DOES have c/c++ addons
23:29 < dragon> EhevuTov: It's worth a try. In a cluster, say with 10 Pis, you get up to 10GHz CPU theoretically.
23:29 < nathan7> EhevuTov: mhm
23:29 < disnet> mhr: otherwise sexp thinks "conspair [1 2 3]" means "conspair([1 2 3])"
23:29 <@isaacs> ben_alman: um... i use npm link a lot.  it seems ok to me
23:30 < ben_alman> i'm finding it a bit confusing
23:30 < dragon> That's ~$350. A simple four core desktop would match that, and will have lesser maintenance overhead.
23:30 < ben_alman> i recently broke grunt up into 35 modules
23:30 < EhevuTov> dragon, yeah, I'm unfamiliar with the Pi CPU though, so I don't really know what 10GHZ means since I don't know the instruction set
23:30 < ben_alman> i'm doing development on maybe a dozen of them
23:30 < CoverSlide> you can get 10 Pi's for that!
23:30 < ben_alman> so i'm interlinking them
23:30 < dragon> It's ARM v6.
23:30 < EhevuTov> dragon, that's interesting. and I'd think it would save energy too?
23:30 < dragon> with hard float, so that's a plus.
23:30 < ben_alman> and am running into some issues
23:30 < EhevuTov> ben_alman, oh that's cool
23:31 < EhevuTov> what are your issues?
23:31 < dragon> It'll definitely save energy. That's one thing ARM processors are good at.
23:31 < mhr> disnet: actually, you don't, I figured it out!   http://pastebin.com/nV9e3yRa :)
23:31 < ben_alman> one issue: a "npm link" because it is global will clobber another global install or link with the same name. it really needs to be name + version
23:31 < CoverSlide> i'm thinking of getting a pi and switching off my broken laptop as my server
23:31 < EhevuTov> Ideally, what my company wants to do is a distributed hash crunching cluster and I'd like to use Node and Node Addons to do it
23:32 < dragon> isaacs: in cluster module, 'listening' event handler has port = 0 when workers do .listen(0). Is this expected or bug?
23:32 < CoverSlide> wait a minit ... *mind is blown* they should sell the PI's for $31.41
23:32 < mhr> dinnertime, goodbye
23:32 < EhevuTov> CoverSlide, haha
23:33 <@isaacs> dragon: listen(0) doesn't actually pick a new port in cluster workers
23:33 <@isaacs> dragon: it gives you the same random port the master got the first time
23:33 < EhevuTov> dragon, yeah, check the docs on that
23:33 <@isaacs> dragon: since clusters are for sharing fds
23:33 < ben_alman> isaacs: i've come up with a process of sorts to interlink a bunch of related in-development npm modules, but it feels super wonky
23:34 < dragon> isaacs: yes, that part is alright. I see the same random port assigned to each worker. But 'listening' event's callback doesn't see that number.
23:34 < dragon> docs don't make it look like I'll get 0 if workers do listen(0). http://nodejs.org/api/cluster.html#cluster_event_listening
23:36 < EhevuTov> dragon, http://nodejs.org/api/cluster.html#cluster_how_it_works just for reference
23:36 < EhevuTov> dunno if that applies or not
23:37 < dragon> I've been using clusters for a while. Read all the docs multiple times.
23:37 <@isaacs> dragon: it's giving you what the worker asked for and got
23:38 < dragon> isaacs: if I ask the port number in the worker, I get a random number, say 56789. Why won't it say 56789 in the master?
23:38 < dragon> I'll write a quick code snippet.
23:40 < EhevuTov> the port is random the first time, but predictable after
23:41 < niggler> is 'static' a javascript keyword?
23:41 <@isaacs> niggler: yes.
23:41 <@isaacs> niggler: it doesn't actually *do* anytihng
23:41 <@isaacs> but yes.
23:41 < ben_alman> isaacs: what does the npm link process look like if you're downloading the source of 10 inter-dependant modules, each in its own repo, all cloned into subdirectories of the same parent directory?
23:41 <@isaacs> niggler: JavaScript reserved a ton of keywords in teh first few drafts, which ended up not being used for anything.
23:42 <@isaacs> ben_alman: skip that noise.  just develop in a folder called 'node_modules'
23:42 <@isaacs> ben_alman: srsly, it's so much better.
23:42 < EhevuTov> static void function(){}
23:42 < ben_alman> what do you mean
23:42 < ben_alman> i don't understand
23:42 < niggler> so i assume express.static was poor naming
23:42 < niggler> isaacs: is there a list of those keywords
23:42 < EhevuTov> niggler, ah, yeah you'll get a pedantic alert on that
23:42 <@isaacs> ben_alman: mkdir node_modules; cd node_modules; git clone git://github.com/cowboy/node-flergeedoo flergeedoo
23:43 < ben_alman> niggler: in ecmascript 5, reserved words are valid as properties of objects like obj.static = 1; just not as free variables like var static = 1;
23:43 <@isaacs> ben_alman: git clone git://github.com/cowboy/boobaa.js boobaa
23:43 <@isaacs> ben_alman: etc.
23:43 <@isaacs> ben_alman: check out each module into its package name in a node_modules folder.
23:43 < dragon> https://gist.github.com/3855654
23:43 <@isaacs> ben_alman: require() will find the right hting, every time
23:43 < ben_alman> isaacs: ok let me try that
23:43 <@isaacs> ben_alman: the trick there is to make sure that you remember to actually add deps to your package.json
23:44 < ben_alman> which package.json are you talking about here
23:44 <@isaacs> ben_alman: and do `npm init` (or mkdir node_modules) so that npm knows not ot walk up a step to the top root when you install stuff.
23:44 < EhevuTov> a CS git dang it
23:44 < ben_alman> let me try this
23:44 <@isaacs> ben_alman: the one in ./projects/whatever/node_modules/flergeedoo
23:44 <@isaacs> ben_alman: you can even just make a symlink called "node_modules"
23:45 <@isaacs> $ pwd
23:45 <@isaacs> /Users/isaacs/dev
23:45 <@isaacs> $ ls -laF node_modules
23:45 <@isaacs> lrwxr-xr-x  1 isaacs  staff  4 Nov  3  2011 node_modules@ -> ./js
23:45 < ben_alman> yeah going to try it
23:45 < ben_alman> do i put a package.json in the parent of the main node_modules folder then?
23:45 < othiym23> if I'm trying to use DTrace with node 0.8.11 (Joyent package, pkg-build-defs show that it was compiled --with-dtrace), is there anything special I need to do to get jstack probes to return actual stack info and not EIPs in the dump?
23:46 < othiym23> isaacs: ^^
23:46 < dragon> Output is "http://0.0.0.0:34510/" followed by "Worker 1 is listening on port 0".
23:47 < othiym23> I'm using dpacheco's thinger for dumping data for use by the flame graph package, and all I'm getting for my pains is a big pile o' hex
23:47 < EhevuTov> dragon, should port 0 be randomly assigned instead?
23:48 < othiym23> uname -a returns "SunOS xxx.local 5.11 joyent_20121004T212912Z i86pc i386 i86pc Solaris"
23:48 < dragon> EhevuTov: that was my theory, but looking at source it appears that 'listening' is triggered when a child merely attempts to listen.
23:48 < niggler> also, technically speaking, can json have embedded comments?
23:48 < ben_alman> niggler: no
23:48 < ben_alman> the json spec is very limited and rigid
23:49 < othiym23> niggler: unused_comment_field : "this is a coment inside the package.json file. It is also a gross hack.",
23:50 < ben_alman> isaacs: this is what my dir looks like: https://gist.github.com/b87652f089e692356365 do i just rename the parent "gruntjs" folder to node_modules? do i need to add a "master" package.json anywhere?
23:50 < othiym23> dangit, #dtrace is pretty dead
23:50 < ben_alman> i don't want to try this haphazardly
23:50 < euoia> which flow control libraries are people using?
23:50 < ben_alman> euoia: caolan's async is pretty good
23:50 < dragon> ok, I take that back. It is called when 'listening' is called on the server. It should include the actual port number, yes.
23:50 < dragon> EhevuTov: ^
23:51 < ben_alman> as soon as v8 gets generators, i'm definitely switching to something like task.js though
23:51 < othiym23> I stopped using caolan/async to minimize the number of deps in my project, and I'm surprised by how much I don't miss it
23:51 < euoia> ben_alman: will have a look - thanks
23:51 < ben_alman> np
23:51 < EhevuTov> dragon, interesting. What happens when you manually set the port
23:53 < dragon> EhevuTov: I'm presuming the port will be visible to the master, as per the documentation.
23:53 < dragon> I'll test.
23:53 < EhevuTov> dragon, like, what happens if you use `process.pid` instead of `0`
23:53 < dragon> "Worker 1 is listening on port 1337"
23:54 < dragon> EhevuTov: Then each worker would get a different port. I want all workers to listen on the same port.
23:54 <@isaacs> ben_alman: cd ~/Dropbox/Projects/Repos/; ln -s node_modules gruntjs
23:54 < dragon> And I'm avoiding workarounds. Either I'm wrong, or I'll file a bug.
23:54 <@isaacs> ben_alman: then require('grunt-init') will resolve to ~/Dropbox/Projects/Repos/gruntjs/grunt-init
23:55 <@isaacs> ben_alman: and dont' bother `npm link`ing anything in there
23:55 < EhevuTov> dragon, oh now I understand. I didn't know you could bind child processes to the same port. (I'd think the OS wouldn't allow it)
23:56 < EhevuTov> I thought Clustering binded to a port, and then used some other IPC to dish off the req's or something
23:56 <@isaacs> EhevuTov: you can't bind them to the same port.  but you can accept() on the same fd
23:56 <@isaacs> EhevuTov: which is how the cluster module works.
23:56 <@isaacs> EhevuTov: the kernel does all the work
23:56 < EhevuTov> oh interesting, thank you
23:57 < EhevuTov> which is why that doesn't fully work on Windows?
23:57 <@isaacs> so, the .listen() call actually does an IPC to the master, where the .bind() happens, and then it sends the fd to the child to do the accept()
23:57 <@isaacs> EhevuTov: it works on Windows, just differently.
23:57 < EhevuTov> very interesting, thanks
23:58 < dragon> isaacs: I see why 'listening' event carries the port number passed to the worker's listen() instead of the actual port number assigned. The question now is: Is this the way it should be?
23:58 < dragon> If not, I'll be happy to create a pull request.
--- Log closed Tue Oct 09 00:00:05 2012
