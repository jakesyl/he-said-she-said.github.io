--- Log opened Fri Jan 18 00:00:42 2013
00:04 < chovy> i would start with express
00:04 < chovy> or socket.io
00:04 < min|dvir|us> Just pick one and go with it.
00:08 < MI6> joyent/node: Fedor Indutny v0.8 * 31583be : tls: follow RFC6125 more stricly  * Allow wildcards only in left-most par (+1 more commits) - http://git.io/PXo-Ww
00:24 < CrawfordComeaux> Ok...who wants to help me finish a quick and dirty app prototype for $200?
00:29 < CrawfordComeaux> it'll be used at the super bowl and if you're skilled enough, I may fly you down to New Orleans if you want to work on the project beyond the prototype (for more money, of course)
00:37 < MI6> joyent/node: Ben Noordhuis master * 8b0f3ce : v8: add %p option to --logfile, expands to pid  Useful when you are profi - http://git.io/OxieqQ
00:42 < chovy> min|dvir|us: much like politics
00:42 < min|dvir|us> ?
00:42 < chovy> < min|dvir|us> Just pick one and go with it.
00:43 < min|dvir|us> I know, I don't see how that's like politics.
00:43 < chovy> pick a side and stick with it, is what i always say
00:55 < TonkaTruck> What would cause mongoose to hang node.js with no error or timeout?  Just a simple model.save()…callback never runs…no response, request just hangs there forever.
00:55 < TonkaTruck> I've restarted mongo, tested at the command line.  Connection "on" event fires fine.
00:56 < TonkaTruck> "open" event I mean oh jesus.
00:57 < euoia> anyone using a JavaScript tidier vim plugin?
01:11 < draginx> Any idea why im getting an EONENT error? https://gist.github.com/a2a4932f69eb6abc2d1e
01:12 < hij1nx> chovy: um, this isn't really true.
01:12 < timeturner> what is the scope when I require in an object?
01:12 < kamoricks> draginx: ENOENT, you mean. Permission denied.
01:12 < hij1nx> chovy: there is a huge difference between these two things.
01:12 < draginx> but im running as root kamoricks (this is just testing)
01:12 < draginx> and its the same sxcript that *created* the file xD
01:12 < kamoricks> draginx: Then file not found. (The errors are indistinguishable.)
01:13 < draginx> but as my ls -al shows
01:13 < draginx> thats not true
01:14 < kamoricks> Then I guess we're back to permission denied. If you have an open file handle to a file, you can't delete it, like it looks like you're trying to do with that delete command.
01:14 < kamoricks> **rename command.
01:14 < draginx> hmm
01:15 < draginx> shouldnt be opened.. its literally just req.files
01:16 < draginx> kamoricks: my mistake! The rename *to* path didnt exist :)
01:55 < PierceMoore> Hello everyone
01:55 < PierceMoore> I'm a Windows guy with at least 99 problems :(
01:55 < iwalkbarefoot> Windows guy doing node.js development?
01:56 < xk_id> Can somebody here point me to a resource where I can learn conceptually about distributed applications, please?
01:56 < iwalkbarefoot> I'd used virtual pc + linux to host the node.js stuff if it were me
01:56 < PierceMoore> Well, no. I am a developer working on an  application that uses the Bcrypt library in node. My home machine is a windows 8 box. Which makes my life miserable :-/
01:57 < PierceMoore> My boss made the call to use bcrypt, lol
01:57 < PierceMoore> not my call!
01:57 < PierceMoore> I set up a Fedora VM and got everything set up on it but I'm trying to make this work on Windows so I don't have to run a VM just to install bcrypt
01:57 < iwalkbarefoot> gotchya
01:58 < PierceMoore> I've got node set up and running beautifully. But npm will *not* survive installing bcrypt
01:59 < PierceMoore> And I've had to install like 10gb of ridiculous awful Windows IDEs and SDKs to get the appropriate files for compilation. All to no avail
01:59 < PierceMoore> I'm just curious to see if someone else has gone through what I'm going through at the moment and if they have some sage advice :)
01:59 < iwalkbarefoot> I'm afraid I've never done any node.js development on windows.  I'm a big .net guy, but if I'm using node I either do it on the Mac or in debian.
01:59 < PierceMoore> Having recently joined the MacBook Pro club, I share your sentiment.
02:00 < PierceMoore> But I just can't justify not using my badass beast machine that runs windows
02:00 < Xonk> Is there more to setting up error handling in express than " app.use(function(err, req, res, next){ res.redirect("/"); }); "?  My errors are still crashing the app after adding that.
02:01 < mistertwig> must be fatal errors then
02:01 < PierceMoore> I'm not sure about that, I haven't found a solid way to prevent fatal crashes
02:01 < Xonk> Is there a way to catch those?
02:01 < PierceMoore> Try/catch in every function, but still some errors are beyond catching it seems
02:01 < Xonk> Ick.  I mean any way to catch them globally.
02:02 < PierceMoore> Oh I know what you mean. And I don't think there is. 
02:02 < PierceMoore> But I'm *definitely* not an experienced node guy
02:02 < Xonk> Hmm.  So what do you guys do?  Just set up supervisor and have it relaunch the site whenever it crashes?
02:02 < PierceMoore> Basically
02:02 < PierceMoore> There's a node module called "forever" I think
02:02 < Xonk> Wow, that really sucks.
02:02 < PierceMoore> I've used that and a few others
02:02 < PierceMoore> I know :-/
02:03 < PierceMoore> https://github.com/nodejitsu/forever
02:03 < Xonk> Thanks.  Looking at it.
02:03 < PierceMoore> no problem. I just want to scream for an hour or two about bcrypt.
02:04 < PierceMoore> And the horrors that installing it on Windows entails
02:04 < Xonk> Is forever just relaunching the app when it crashes?
02:04 < PierceMoore> Yep
02:05 < iwalkbarefoot> if you're using cluster can't you detect when the workers crash?
02:05 < Xonk> Oh.  Supervisor is already doing that for me.  But you loose all session state and have several seconds of down time.
02:06 < xk_id> can somebody here please point me to a resource where I can understand how to use clustering?
02:06 < Xonk> Yeah, detecting and restarting is no problem.  I want to catch the errors before they crash.
02:07 < Xonk> http://nodejs.org/api/cluster.html
02:07 < xk_id> thanks, Xonk. But I have found that that document already assumes some understanding, such as "forking", etc.
02:08 < samholmes> Is there a way to use EJS on the front-end with browserify?
02:09 < xk_id> help :(
02:09 < samholmes> I have a views directory in my project that's not public. But, would there be a way to expose a view through server-side module included from browserify?
02:10 < fruitFly> do you think this is the best node to buy http://www.manning.com/cantelon/?
02:10 < fruitFly> node book*
02:10 < Xonk> xk_id - For forking, https://help.github.com/articles/fork-a-repo
02:11 < CrawfordComeaux> Will pay someone $200 to help me finish a prototype for a social media dashboard to be used in the super bowl press room by up to 5k journalists. I want to finish tonight.
02:11 < xk_id> Xonk: I don't think it means the same thing as in child_process.fork
02:11 < xk_id> Does it?
02:11 < Xonk> Sorry.  I hadn't used it and made a bad assumption
02:11 < Xonk> Doesn't sound like it
02:12 < andrew12> how would one read data from a CD drive using node?
02:12 < PierceMoore> Guess there are no bcrypt on windows people in here
02:12 < PierceMoore> Y'all take it easy
02:12 < andrew12> wondering if anyone has ventured to try to write a ripper
02:13 < samholmes> Does anyone here use EJS or is Jade more common?
02:13 < Xonk> andrew - fs will give you basic filesystem access.  http://nodejs.org/api/fs.html
02:14 < Xonk> samholmes - I've been told jade, which is also the default.
02:14 < andrew12> right but how will that work for reading an audio cd
02:14 < Xonk> Andrew12 - If I'm not mistaken, there are .dat files on audio cds that are accessible from the file system.
02:14 < Xonk> What you do with those is beyond me.
02:15 < andrew12> I could write a wrapper of cdparanoia
02:16 < hasse> How can I convert a string to regexp?
02:19 < Xonk> new RegExp(mystring)
02:19 < mistertwig> new RegExp
02:19 < Xonk> new RegExp(mystring, options)
02:19 < mistertwig> >: (
02:22 < samholmes> Where's jade language IRC channel?
02:23 < andrew12> who's to say there is one
02:23 < iwalkbarefoot> that's the great thing about irc, anyone can start one :)
02:27 < styol> othiym23: not sure if you recall the prototype benchmark thingie, but I indeed was guilty of doing it wrong :) kinda happy about that actually haha
02:39 < mdedetrich> I am trying to simply download a file using the request library with streams
02:39 < mdedetrich> however I can't detect when the file has finished downloading a file, it doesn't seem to be emitting the 'end' event
02:45 < hasse> Xonk: Thanks
02:47 < fruitFly> i've heard  this is the best node intro, what do u think? http://www.manning.com/cantelon/
02:47 < fruitFly> i liked the first chapter
02:48 < mdedetrich> https://gist.github.com/f99b5d826d1012f23d80
02:48 < substack> I just read the api reference
02:48 < mdedetrich> note that the stream is actually writing the file
02:49 < mdedetrich> anyone have any idea why the fStream.on('end') event is not firing?
02:51 < mdedetrich> or what I am doing wrong?
03:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:06 < gildean> mdedetrich: are you listening on the end event on the response to the request?
03:06 < mdedetrich> gildean: yeah Im doing that now, and it seems to work
03:06 < mdedetrich> gildean: is there a reason why the fStream events never fire though
03:10 <@TooTallNate> mbalho: did you get that icecast stuff figured out?
03:19 < MitchW> is there anything like 'event local storage' (conceptually similar to thread local storage) in node?  All my googling has just found vague suggestions around using domains, except I don't see any way to get the current domain for an executing function, nor is there any supporting documentation on a safe way to add arbitary information into a domain for referencing later on
03:23 < MitchW> if i had control over all the event emitters i'd just pass my own context parameter down the chain, but unfortunately there's thirdparty middleware that I don't have the luxury of forking just for this purpose
03:27 < __yh> hey guys
03:28 < mdedetrich> uh oh
03:28 < mdedetrich> *runs*
03:28 < __yh> i have a script that loops a function a bunch of times, and im benching/timing it
03:29 < __yh> the last run is dramatically higher
03:29 < __yh> i'm guessing the GC 'stopped the world'
03:29 < __yh> right?
03:30 < MitchW> okay, simpler question - is there a way to get the current event emitter? (I assume all subsequently raised events are always raised by the same emitter that executed the code that spawned the child events?)
03:30 < __yh> go from like a 0.2ms per run to 25ms on the last run
03:49 < MitchW> ouch, looks like this has been an unanswered and unsupported basic feature in node for the past 2 years? :( https://groups.google.com/forum/?fromgroups=#!topic/nodejs/p-Y6Xk2nGbI / https://github.com/joyent/node/tree/eventsource
03:52 <@mbalho> TooTallNate: i need to get a usb mic input for the raspi first
03:52 <@mbalho> TooTallNate: it doesnt have a built in mic input
03:52 <@TooTallNate> oh damn
03:52 <@TooTallNate> ya, usb for sure
03:58 < CrawfordComeaux> Will pay someone $200 to help me finish a prototype for a social media dashboard to be used in the super bowl press room by up to 5k journalists. I want to finish tonight.
04:08 < mdedetrich> MitchW: well the thing is, node.js is single threaded
04:09 < mdedetrich> MitchW: I think what you are looking for is stack based locality
04:09 < mdedetrich> MitchW: which is a bitch in node.js
04:10 < MitchW> mdedetrich: single threaded sure, but I could have 200 requests - all of which then do a non-blocking call to some remote server, and come back in some unpredictable order - raised by some unknown event emitter (2-3 layers down in thirdparty middleware), there's no way to correlate the triggered events back up to my original request, and thus no way to correlate context/state from a triggered event up to it's root request/event-emitter
04:11 < mdedetrich> MitchW: I know what you are saying, I had a similar issue and resorted to using domains
04:11 < mdedetrich> however that was less than ideal solution
04:11 < Lorentz> http://www.techrepublic.com/blog/datacenter/how-to-protect-yourself-from-raid-related-unrecoverable-read-errors-ures/1752
04:11 < niggler> what was the tool used to make the bad ass rock star tech video?
04:11 < Lorentz> that article's made me use raidz2
04:12 < Lorentz> and drop idea of using raid5
04:12 < mdedetrich> I lot of these production type issues are out of the bounds of what javascript was originally designed for
04:12 < MitchW> mdedetrich: *nod* similar solutions had been proposed on mailing lists I've found, but I can't see how to get the domain for a triggered event - so how does that help me?
04:12 < Lorentz> hrm, wrong chan
04:12 < mdedetrich> MitchW: it doesn't
04:13 < mdedetrich> MitchW: I use the self healing paradigm personally, instead of the try and catch all errors and recover
04:13 <@konobi> Lorentz: heh, interesting crossover though
04:13 < Lorentz> konobi: might be relevant here anyway, seeing computer-peoples
04:13 < mdedetrich> messing with domains just turned into a nightmare
04:14 <@konobi> Lorentz: and good ol smartos fun
04:14 < MitchW> mdedetrich: yeah, i'm not worried about error handling - my use case is specifically me needing to pass user state (session, credentials, and permissions - for security enforcement) down to triggered events to control what actions can and cannot be taken :(
04:14 < zomg> haha, I've been using too much haskell lately
04:15 < MitchW> mdedetrich: thanks for the confirmation though :)
04:15 < zomg> I was reading that google groups post about thread local state and thought "Oh sounds like a reader monad..."
04:15 < mdedetrich> MitchW: you probably should pass parameters for that, even though its not ideal
04:15 < zomg> Which coincidentally could be something you could use to solve this even in javascript, although not really as conveniently as in haskell
04:16 < MitchW> mdedetrich: I know, which I would do in a heart beat - if I had control over the event chain.  but the end event is triggered by thirdparty middleware (2 layers of it infact).  to do that I'd have to fork 2 projects, and modify it just to pass state down the chain :\
04:16 < mdedetrich> MitchW: seems like the problem is that you are using crappy middleware
04:17 < MitchW> mongoose/mongodb :\
04:17 < Lee--> Lorentz, I went with raidz3. also you can specify how many copies ZFS stores ;)
04:17 < mdedetrich> those are libraries, not middleware
04:17 < Lorentz> didn't have enough drives to warrant raidz3, heh
04:18 < mdedetrich> MitchW: I still think you are approaching whatever it is you are doing in a completely incorrect way
04:20 < MitchW> mdedetrich: I have security permissions defined by my app, that are independent of my ODM - when i make a request, I need a way to correlate permissions to my ODM's schema, and filter out any data requested they're not supposed to have access to - the schema is defined on the DB, so it can only be accessed from a triggered event (requesting it from the DB), at which point I have no context to the original request and no way to compare it t
04:22 < mdedetrich> MitchW: have you tried using something like async?
04:22 < mdedetrich> it seems like you are dealing with callback hell
04:23 < garthk> MitchW: you need to curry the relevant detail from the original request into your callback.
04:24 < MitchW> yeah I use async.js everywhere - that doesn't help me correlate two completely independent event chains though (request -> DB request -> filtered response & DB response -> ODM -> (how to filter? there's no correlation besides the native event chain) -> filtered response trigger)
04:25 < mdedetrich> MitchW: async.parallel and then compare the result
04:25 < mdedetrich> ?
04:25 < garthk> Unfortunately, it's 95ºF in here and I can't concentrate enough to explain the technique . :)
04:25 < MitchW> garthk: indeed, except I have 0 control over the resulting trigger, the only correlation is the event chain - the trigger is raised by mongodb with no way to pass state between my app, to mongoose, to mongodb for it to curry back to me
04:26 < mdedetrich> you can control what happens in two event chains that run at the same time
04:26 < mdedetrich> using async.parallel
04:28 < MitchW> only if I have control over each event in the chain which I don't, there's a segment in the middle (between mongoose and mongodb) that I can't control
04:28 < mdedetrich> you just mix async.waterfall and async.parallel, I mean I do what you are saying and its impossible
04:28 < mdedetrich> well dont use mongoose then
04:28 < MitchW> seems I've found a way to do what I need anyway though, with some stack walking and EventEmitter magic
04:29 < mdedetrich> it seems like mongoose is hiding the data from you, thats an issue with the library
04:29 < mdedetrich> I mean your solution may work, it also will probably break when mongoose does any major update
04:30 < mdedetrich> MitchW: the minute mongodb changes its internals, your app will break
04:31 < MitchW> mdedetrich: sure, except a flaw in a library shouldn't limit the capability of the whole platform.  and it can't break unless they manage to create an event emitter outside my function stack, which is impossible as I invoke mongoose - not vice versa; or if they stop using event node emitters entirely
04:32 <@konobi> MitchW: domain.active ?
04:32 < MitchW> and if they do, well - i'll just stick to the releases that work until I find a new solution
04:32 < MitchW> konobi: where's that documented? (I don't see it http://nodejs.org/api/domain.html )
04:33 < MitchW> konobi: that'd save me from horribly hacking EventEmitter to pieces :\
04:33 <@konobi> it's in the course
04:33 <@konobi> *source
04:33 <@konobi> MitchW: https://github.com/joyent/node/blob/master/lib/domain.js#L46
04:34 < MitchW> konobi: <3
04:37 <@konobi> MitchW: if it's super handy... you should ask for it to be added as a stable interface
04:38 < MitchW> konobi: and the best way to do that would be via? (mailing list? github? other?)
04:39 <@konobi> MitchW: seems there's also process.domain
04:39 <@konobi> github issue
04:39 < MitchW> konobi: cheers :)
04:41 < vrlogrs> hey guys
04:42 < vrlogrs> any idea why  (nbr == 0.0) would return false but (nbr == 0) returns true?? 
04:42 < vrlogrs> its frustrating me for the past hour now
04:43 < mdedetrich> vrlogrs: welcome to javascripts retarded type coersion
04:43 < mistertwig> >>> 0.0 === 0
04:43 < purr> mistertwig: (boolean) true
04:43 < mdedetrich> vrlogrs: enjoy your stay
04:44 < mistertwig> vrlogrs: what is nbr?
04:44 < vrlogrs> nbr is a parseFloat(nbr) -- where nbr is a result from MYSQL DECIMAL ()
04:44 < mistertwig> use ===
04:45 < MitchW> unless nbr = 0.0, it could be 0.00000001 which != 0.0, but when coerced to an int will get rounded to 0
04:45 < zomg> >>> 0.1 === 0.1
04:45 < purr> zomg: (boolean) true
04:45 < zomg> oh neat, it actually works... I had a feeling that float comparison was futile
04:45 < zomg> at best.
04:45 < mistertwig> >>> 0.0 === 0
04:45 < purr> mistertwig: (boolean) true
04:45 < vrlogrs> >>> parseFloat(0.0) === 0.0
04:45 < purr> vrlogrs: (boolean) true
04:45 < vrlogrs> >>> parseFloat(0.0) === 0
04:45 < purr> vrlogrs: (boolean) true
04:46 < vrlogrs> wth
04:46 <@konobi> except that are you sure that's being parsed as a float/num, or as a string?
04:46 < vrlogrs> well, im parsing it explicitly
04:46 <@konobi> i mean the bot
04:46 < vrlogrs> with parseFloat(result[0]['col'])
04:47 < MitchW> >>> parseFloat(1e-200) == 0
04:47 < purr> MitchW: (boolean) false
04:47 < mistertwig> did you print out the value of it?
04:47 < MitchW> >>> parseFloat(1e-500) == 0
04:47 < purr> MitchW: (boolean) true
04:47 < mistertwig> and try typeof
04:47 < mistertwig> to double check
04:47 < vrlogrs> yah, when i print out the value .. it prints out '0'
04:47 < mistertwig> >>> parseFloat('0') === 0
04:47 < purr> mistertwig: (boolean) true
04:47 < mistertwig> so you're not telling us something
04:47 < mistertwig> :P
04:48 < vrlogrs> i wish i knew :(
04:48 < vrlogrs> >>> parseFloat('0') === 0.0
04:48 < purr> vrlogrs: (boolean) true
04:48 < vrlogrs> parseFloat('0') == 0.0
04:48 < mistertwig> don't use ==
04:48 < vrlogrs> >>> parseFloat('0') == 0.0
04:48 < purr> vrlogrs: (boolean) true
04:49 < vrlogrs> i swear theres nothing going on in-between
04:49 < vrlogrs> wait ..
04:49 < vrlogrs> oh dear ..
04:50 < vrlogrs> if i have nbr2 = nbr ..
04:50 < vrlogrs> will that be a problem? :S
04:52 < vrlogrs> could that be it?
04:52 < vrlogrs> maybe by default its assigning nbr2 as an int
04:57 < cxreg> isaacs: re-filed PR as https://github.com/joyent/node/pull/4621, with test, against master
05:09 < fruitFly> Yo!
05:09 < fruitFly> Would you recommend this node intro over others? http://www.manning.com/cantelon/
05:11 < groundup> I just started using Node.js. Got the ubiquitous chat app running with Express. Now, I am furthering my knowledge but I want to start using some frameworks. I found CompoundJS to be along the lines of what I was looking for. However, I also found that I prefer Mustache (and variants) over Jade. Does anyone know of a Compound Mustache view?
05:13 < garbagegod> Man, the early adopters of node must be the ultimate hipsters
05:13 < zomg> garbagegod: pretty much!
05:16 < cainus> hey all... anyone know how auto-reconnect is usually implemented in db drivers?  And what happens to code trying to use the driver while it reconnects?
05:16 < cainus> seems like I could catch errors and reconnect easily, but client code would be failing until then, rather than waiting
05:17  * mscdex shakes a fist at gitlab
05:17 < mscdex> this should not be an all-day affair!
05:19 < cainus> mscdex: I hear there's a closed source alternative too ;)
05:20 < mscdex> eh
05:20 < cainus> just a github joke
05:20 < mscdex> yeah, policy prohibits hosting this codebase externally
05:21 < cainus> ah
05:21 < cainus> you see github enterprise?
05:21 < mscdex> too expensive
05:21 < cainus> how bad is it?
05:22 < mscdex> i forget offhand, but too much for the small company this is for
05:22 < cainus> hmmm
05:22 < mscdex> if i had my way we'd all just use git clients, but i need something easier for the non-developers to interact with
05:23 < zomg> why do non-devs need to interact with your source control?
05:23 < zomg> :P
05:24 < Lee--> managmeent types want to open it up, see a bunch of stuff they don't understand, stare at it for a few minutes each day and them say yep looks good
05:24 < zomg> doesn't sound too good if it indeed is a small company...
05:24 < zomg> :D
05:24 < cainus> more commits == more work, right?
05:27 < Lee--> cainus, don't be silly, that's what diff + line counts are for
05:28 < cainus> heh
05:28 < mscdex> zomg: there are some that do some coding, but it's not their top priority, and they like to be able to just pull up a browser from anywhere and see what's happening
05:29 < mscdex> s/top priority/main job/
05:31 < iwalkbarefoot> mscdex: how many users do you need for your source control?
05:31 < cainus> anyone have a good recommendation on some source to read to see a nice implementation of client auto-reconnect?
05:31 < mscdex> iwalkbarefoot: not many
05:32 < zomg> mscdex: sounds like it would be easier for them to just have a clone of the repo and do a pull and a log when they wanna do that =)
05:32 < zomg> but hey if they pay you to set up a brwoser gui, why not
05:32 < zomg> :D
05:33 < iwalkbarefoot> are you a windows shop?  Fogbugz always looked interesting to me, runs about $2.9k for 10 users [self hosted]
05:33 < iwalkbarefoot> based on mercurial
05:33 < mscdex> again, they're not familiar enough with git, let alone scm
05:33 < mscdex> iwalkbarefoot: no Windows and can't host this externally :-)
05:34 < iwalkbarefoot> they sell self-hosted versions, but it is windows based so no bueno
05:34 < zomg> well if they actually work with the code then they oughta actually be capable of using scm because how else can they work with it in any meaningful fashion
05:35 < zomg> but yeah if they don't need to make any changes, I guess it'll be less tech support for you if you don't teach them to use git
05:35 < zomg> =)
05:36 < iwalkbarefoot> i'm guessing you use git?
05:36 < othiym23> MitchW: you still around?
05:41 <@konobi> mscdex: https://enterprise.github.com/pricing
05:41 <@konobi> they changed their pricing structure a while back to make it easier to chew
05:41 < iwalkbarefoot> mscdex: if you do use get, this looks interesting. http://viewgit.fealdia.org/demo
05:42 < timeturner> what's the recommended way to share state among modules?
05:42 < timeturner> or should that be done in an in-memory database?
05:42 < othiym23> timeturner: you can just use another module as your shared state module
05:43 < othiym23> that's what I do
05:43 < othiym23> for small stuff, at least
05:43 < othiym23> state.js: module.exports = {}
05:43 < MitchW> othiym23: sure am
05:43 < othiym23> require('./state')
05:43 < othiym23> or rather var state = require('./state')
05:43 < othiym23> state.foo = 'thinger'
05:43 < othiym23> all done!
05:43 < timeturner> but won't require()ing the state object from other modules just make a local copy of it in the required modules?
05:44 < othiym23> nope, thanks to the module cache they'll all get the same one
05:44 < timeturner> ah
05:44 < timeturner> sweet, thanks
05:44 < timeturner> will try this
05:44 < othiym23> MitchW: so how far did you get with your investigation of domains?
05:44 < MitchW> othiym23: i don't see how that lets me lookup the request associated with an event trigger I don't make myself though
05:44 < MitchW> othiym23: implemented and working :)
05:44 < othiym23> no, that was for timeturner ;)
05:45 < MitchW> ah lol :)
05:45 < MitchW> konobi: thanks again for the domain.active / process.domain pointer by the way - you saved my day :)
05:45 < othiym23> Mitchw: for you I was just going to ask if you'd played around with process.domain and domain.active
05:45 < othiym23> ah I see you did ;)
05:45 < othiym23> I read some of the backlog but not all of it ;)
05:45 < MitchW> othiym23: yeah konobi pointed me in the right direction
05:46 < othiym23> cool beans, he said archaically
05:46 <@konobi> MitchW: np... I accept coffee and booze =0)
05:46 < MitchW> hehe :)
06:39 < mel> Yay! Node.js installed!
06:41 < segomos> minix ?
07:22 < cloud_> hi guys
07:23 < Guest54943> hi guys
07:24 < segomos> hi guys
07:53 < topriddy> hello guys
07:54 < topriddy> i'm looking at Node.js to use for a pet project first....I dont understand how Node.js /javascript would be used to access database, files, other things needed to be done by server. or the exact role Node.js plays in a web app other than serving static html pages. I'm coming from Java EE. thanks
07:57 <@konobi> topriddy: try hitting up youtube for ryan's introduction to node
07:59 < topriddy> konobi: can you direct me to a written article instead? youtube kinda sucks here...slow internet and most times its blocked. except u have a download link
07:59 < Guest54943> I'm really new to node.js
07:59 < Guest54943> have you got any of the tutorial site
07:59 < Guest54943> ?
08:01 < foofoobar> Hi. I'm currently reading a bunch of threads about nodes on hacker news and always see this discussion about "spaghetti code" and "callback hell". Also they are talking of no good way to code async. Can someone tell me something about this facts?
08:01 < foofoobar> (I'm completely new to node)
08:02 <@konobi> fud
08:02 <@konobi> topriddy: http://www.nodebeginner.org/
08:03 < cxreg> MitchW: i've been pondering writing a library that does a lot of what you have been talking about
08:04 < SomeoneWeird> foofoobar, http://callbackhell.com/
08:04 < cxreg> both domains and lohnjohn prove that it can be done
08:04 < cxreg> it's a simple matter of wrapping callbacks to pass your context out of band
08:04 < topriddy> konobi: seen. thanks. :). But can you juust answer a yes/no if Node.js (which is a server by the way i think), can one write JS to access db etc?
08:04 < foofoobar> SomeoneWeird, lol funny that there is a page for this. I will have a look at this, thank you :)
08:05 < segomos> topriddy: yes. it can.
08:05 <@konobi> topriddy: yes... see npmjs.org
08:05 < topriddy> or js just hits another server REST service to do all these back end.
08:05 < topriddy> oh okay...let me get reading then
08:05 < topriddy> a respected friend tweeted this: I think Sammy.js (routes, events) + JQuery (DOM, HTTP,general purpose) + Handlebars.js (templating) is my trinity of JS frameworks for now.
08:06 < topriddy> i'm thinking all these are front end stuff for the node.js backend?
08:06 < segomos> looks to be
08:06 <@konobi> those are all frontend
08:06 < cxreg> MitchW: catch me tomorrow if you want to talk more about it
08:07 < SomeoneWeird> topriddy, node can do anything any other languages can do
08:07 < segomos> it doesn't compile perl yet
08:07 < SomeoneWeird> what other langs do that?
08:07 < segomos> not like scala
08:07 < zomg> Holy trinity: Yesod, Fay, Clay
08:07 < zomg> ;>
08:07 < SomeoneWeird> heh
08:08 < topriddy> zomg: sounds like spiritual stuff. are those techs
08:08 < segomos> SomeoneWeird: yea, a bunch of folks are writing the perl 5.5? interpreter in various languages
08:08 < topriddy> SomeoneWeird: thanks
08:08 < zomg> topriddy: haskell
08:08 < SomeoneWeird> segomos, oic
08:08 < zomg> libraries
08:08 <@konobi> yup, my mate stevan
08:09 < _ior> elisp probably compiles perl
08:09 < _ior> elisp does everything
08:09 < topriddy> zomg: what?
08:09 < _ior> (but only in the right environment ;)
08:09 < zomg> topriddy: those three are haskell libraries
08:10 < zomg> first one is a web app framework, second compiles haskell into javascript, third is a haskell library to generate CSS
08:10 < phun-ky> morning lads
08:10 < topriddy> zomg: sounds cool
08:10 < zomg> it is =)
08:11 < topriddy> zomg: why are you compiling haskell to js though?
08:11 <@konobi> ghc sucks?
08:11 < zomg> topriddy: so I can run it in a browser? :)
08:11 < zomg> konobi: sadly ghc does not have a JS target by default =) GHCJS is a bit "hardcore" solution for it at the moment
08:12 < zomg> imo anyway
08:15 < _ior> http://www.theonion.com/articles/internet-users-demand-less-interactivity,30920/
08:16 < TonkaTruck> Does anyone know of any modules similar to nssocket for higher level tcp servers?  This looks nice was just wondering if there were some others to check out.
08:17 <@konobi> TonkaTruck: ?
08:18 < TonkaTruck> konobi: What?
08:18 <@konobi> well, what do you mean by "higher level"
08:18 < TonkaTruck> konobi: I didn't mean higher level than nssocket, sorry.  Just alternatives.
08:20 <@konobi> nothing's popping to mind
08:20 < TonkaTruck> konobi: Thanks I will just use nssocket heh.
08:21 <@konobi> yeah, i know a few folks who've used it and liked it
08:23 < GreenDog> argh!
08:24 < GreenDog> i can't leave my comments on that onion article
08:25 < topriddy> zomg: alright i get....from the coolness of "haskell language" to the rest
08:25 < zomg> hehe
08:26 < TonkaTruck> topriddy: Wait, are you reading an anti-node rant on hn?
08:26 < topriddy> TonkaTruck: nope why?
08:27 < topriddy> TonkaTruck: whats just here trying to get what kind of role Node.js played exactly in the web app stack. wanted to know if it was a full fledged server side language
08:27 < zomg> Sure, it's about as fully fledged as any :)
08:28 < topriddy> _ior: the onion news isnt really valid news right? just sarcasm?
08:29 < _ior> topriddy, i think that's generally true of anything on theonoin :)
08:29 < topriddy> _ior: not sure of their culture exactly. what is the english word to describe their kind of news?
08:29 < GreenDog> the onion is satire
08:29 < _ior> satire
08:29 < _ior> yes
08:29 < TonkaTruck> Onion is pure satire yes hahahaha
08:30 < TonkaTruck> Been reading it for 10 years.
08:30 < GreenDog> their stories are all completely made up, like other news outlets, but the onion is funny
08:30 < TonkaTruck> Though, it never gets old seeing people take the articles seriously…never gets old even a little.
08:30 < _ior> i used to play a game called "cnn or the onion"
08:30 < _ior> where i gave you a headline and you had to guess if it came from cnn or the onion
08:30 < zomg> _ior: lol
08:30 < _ior> it was a fake game, because the answer was always "cnn"
08:30 < zomg> that's nice
08:30 < TonkaTruck> _ior: hahaha awesome.
08:30 < _ior> but sometimes it's really easy to confuse people!
08:31 < zomg> Hard mode: Fox or The Onion
08:31 < zomg> :P
08:31 < _ior> my favourite, i think, was "first chinese astronaut fails to see great wall from space"
08:31 < qcomm> exit
08:31 < qcomm> exit
08:31 < qcomm> exit
08:31 < zomg> qcomm: /fail
08:31 < TonkaTruck> I posted one on fb once about euthanizing the teenage girl who appeared to have "gone retarded" after staring only at her phone for two months...
08:31 < zomg> did he really think that repeating it two more times would magically make it work...
08:31 < zomg> =)
08:32 < _ior> which was cnn's *entire* reporting about the fact that the chinese successfully launched (and landed) a manned spacecraft
08:32 < zomg> db.close();
08:32 < zomg> db.close(); //ensure db is closed
08:32 < zomg> db.close(); //ensure db is really closed
08:32 < _ior> res.end();
08:32 < _ior> res.end('no more rhyming now, i mean it!');
08:32 < TonkaTruck> my idiot family members were outraged.
08:32 < jvanveen> morning
08:32 < _ior> res.end('does anyone want a peanut?');
08:33 < _ior> tonka haha i think i remember that article, yeah
08:33 < zomg> TonkaTruck: well the thing is, not many people outside the internets actually know of onion being satire.. :D
08:33 < GreenDog> setInterval(function() { db.close(); // Really make sure it's closed }, 500);
08:33 < mscdex> don't forget a callback to db.close() to make sure it's really really closed!
08:33 < zomg> GreenDog: lol
08:33 < _ior> haha, best solution yet
08:33 < TonkaTruck> zomg: Tell me more about outside!
08:33 < topriddy> i prefer the cartoon version...***trying to remember name
08:33 < zomg> TonkaTruck: the air is weird because it's so.. fresh
08:34 < zomg> TonkaTruck: and there's other people there!
08:34 <@konobi> oh, the taiwanese one
08:35 < TonkaTruck> zomg: Outside…can you choose to "play the computer" if you want?  Or is it all actual people?!
08:35  * topriddy theoatmeal >>>
08:35 < _ior> yay for theoatmeal.
08:35 < TonkaTruck> theoatmeal is awesome.
08:35 < _ior> i was very surprised when my 80 year old cousin gave me a theoatmeal book for xmas
08:36 < _ior> especially since every time i see her i have to "fix her email which is broken"
08:36 <@konobi> god, i hate doing up web content/design
08:36 < TonkaTruck> _ior: The greatest generation…there are way more cool people who are 80 than 20.
08:36 < _ior> agreed
08:36 < _ior> 20 year olds are all jackasses
08:36 < _ior> i should know! i was one once!
08:36 < _ior> (a jackass, that is)
08:36 <@konobi> what do you mean was?
08:36 <@konobi> =0P
08:37 < _ior> oh, i grew out of the 20yearold bit
08:37 < _ior> but not out of the rest of it
08:37 <@Nexxy> omg ageism
08:37 < TonkaTruck> Nexxy: hahaaa
08:38 <@Nexxy> no srsly
08:38 <@Nexxy> it's a real ism!
08:38 < _ior> it is
08:39 < TonkaTruck> It's like how there are way more cool people who are black than white…  still racism…but true.
08:40 < zomg> I don't know any black people IRL \o/
08:40 < _ior> that depends on who defines what is cool
08:40 < zomg> In fact, I don't know any non-caucasian IRL
08:40 < zomg> BAM.
08:40 < _ior> very few people of any ethnicity that are as cool as miles davis was
08:40 < TonkaTruck> And don't get me started on the mexicans…why are they always nice, respectful people?!
08:41 < GreenDog> makes ya wanna move to mexico
08:41 < zomg> mm beans
08:42 < [AD]Turbo> hi there
08:42 < TonkaTruck> I think mexicans might have the best food, too…and they never talk about it…they just make good shit and eat it.
08:42 < TonkaTruck> and offer it to you.
08:42 < _ior> best cuisine in the world, damn straight
08:43 < TonkaTruck> _ior: It really is…I agree.
08:45 < jvanveen> are there any known techniques to join two arraybuffers together, and split them again at the other end of the connection?
08:46 < jvanveen> im trying to add some meta-data to image-data from webrtc, like http://jsfiddle.net/AjVMa/1/
08:47 < jvanveen> im adding the json bytearray at the beginning of a new arraybuffer, but i cant be sure of the size at the other end 
08:48 <@konobi> have a byte at the front that tells you how long the first segment is
08:51 < jvanveen> konobi: thanks, ill give that a try
08:57 < drug_motor> http://rainbowstalin13.ytmnd.com/
09:07 < iksik> hello
09:08 < v_y> what deferreds library should i use on node?
09:08 < iksik> does expressjs has his own channel? or can i ask here?
09:08 < zomg> v_y: the one you like
09:08 < medikoo> v_y: try https://github.com/medikoo/deferred#example
09:08 < v_y> zomg: yeah i don't like one yet, so i'm wondering what's popular
09:09 < v_y> *sigh*, too many fucking options imo
09:09 < medikoo> v_y: Most popular is Q, but check also others, they may fit you better
09:09 < jvanveen> hm, any idea how to add a large integer to a Uint8Array ?
09:10 < v_y> medikoo: what inspired you to write your own after Q?
09:10 < medikoo> v_y:  Q didn't solve my problems, and didn't agree with some of it's design decision
09:10 < foofoobar> So I heard that nodejs is very scalable. While reading node beginner I read that node is single-threaded. How can nodejs be scaled when it only uses one process?
09:11 < medikoo> v_y: e.g. at the time it didn't provide anything like that: https://github.com/medikoo/deferred#promisify---working-with-asynchronous-functions-as-we-know-them-from-nodejs
09:11 < medikoo> v_y: first example in doc shows exactly what I was after, and you can't have it that clean way with Q
09:11 < jvanveen> foofoobar: you can use clustering for multi-processes
09:12 < foofoobar> jvanveen, clustering = running several nodejs server besides of each other?
09:12 < medikoo> v_y: other note, that Q is slow if you do too much of promises, it wouldn't work for some of my tools as they would be 10x slower
09:12 < jvanveen> foofoobar: http://nodejs.org/api/cluster.html
09:12 < iksik> ok, i need to implement some kind of 'internal redirect' in express... i mean, i want to redirect all requests to index.html (which is a static file in public directory), but without changing the request URL (so, not an 30x redirect), anyone know how can i do that?
09:13 < v_y> medikoo: cool, pretty convincing. thanks!
09:13 < jvanveen> foofoobar: if you ever need that. async/nonblocking is quite scalable on its own
09:13 < foofoobar> jvanveen, Scalable on its own? How do you mean that?
09:13 < medikoo> v_y: you're welcome
09:13 < stephank> v_y: I used an absolutely hated promises for a while, until I tried Q. Can't speak for medikoo's implementation, though.
09:13 < foofoobar> jvanveen, and what happens if one requests causes the process to crash?
09:14 < jvanveen> foofoobar: i suggest you setup a basic nodejs http server and a threaded one, and do some benchmarking
09:15 < TonkaTruck> nssocket is fantastic…  
09:15 < foofoobar> jvanveen, I already saw that nodejs is really hard to beat in case of benchmarking
09:15 < foofoobar> But I'm confused with this single-thread approach
09:16 < foofoobar> If Im right an one request causes a crash then the whole server is crashed, right?
09:16 < TonkaTruck> foofoobar: I'm not sure if this is of help to you but I believe you can run node apps via something like Supervisord
09:17 < TonkaTruck> Someone correct me if I'm wrong.  I've used supervisord to monitor/restart/report on all sorts of processes…I don't know why it wouldn't be a perfect fit for node.
09:21 < TonkaTruck> https://github.com/isaacs/node-supervisor I guess this is unrelated to the supervisor in python.
09:21 < iksik> TonkaTruck: i'm using python supervisor - it works fine i think -_-
09:23 < TonkaTruck> iksik: Good to know, thanks.
09:24 < iksik> eh, any help with express redirects?
09:32 < st_luke> iksik: res.writeHead(302, {'location': 'http://google.com'})
09:34 < iksik> st_luke: i don't need/want 30x redirects
09:35 < iksik> i want to redirect all requests to static index.html file which is placed in public directory (without changing url)
09:36 < st_luke> sorry for trying to be helpful, have fun googling it
09:36 < iksik> lol ;]
09:36 < v_y> medikoo: eh, i'm wondering what it is that makes your library 10x faster? is it that your deferreds don't necessarily fulfill asynchronously?
09:38 < medikoo> v_y: first thing for sure is that Q does Object.freeze, there rest I haven't checked, it might be just performance of internals
09:39 < medikoo> v_y: and sync then on fulfilled promise, doesn't matter as tests I've done are only on not fulfilled promises, so asynchrnous
09:39 < medikoo> v_y: see benchmarks folders, all tests are based on fs.lstat wrapper made with given library
09:40 < medikoo> v_y: I meant *on unfulfilled promises, so asynchronous
09:41 < v_y> medikoo: but if i do this --- promise(?).end(function(result) { console.log('got result!') }, function(error){ console.log('got error!'); }); console.log('invoked promise');
09:41 < v_y> medikoo: is 'invoked promise' guaranteed to be printed before 'got result!' or 'got error!'?
09:41 < v_y> medikoo: that's the case with Q and i'm not sure i like that
09:43 < medikoo> v_y: if promise is resolved then 'got result' will be before 'invoked promise', if unresolved then other way
09:43 < v_y> medikoo: okay, thanks
09:44 < medikoo> v_y: it's controversial, but I believe it's the right way: https://github.com/medikoo/deferred/issues/6#issuecomment-10188451 and it works for me very well
09:46 < v_y> medikoo: i agree with your approach.
09:46 < foofoobar> Someone used mongojs here? I'm trying this example: http://howtonode.org/node-js-and-mongodb-getting-started-with-mongojs
09:46 < foofoobar> I have a question for this line: db.users.find({sex: "female"}, function(err, users) {
09:46 < foofoobar> If there is no entry returned from the search, the callback is not called
09:47 < foofoobar> so how should I react to "no result found" ?
09:47 < TonkaTruck> foofoobar: I've only used http://mongoosejs.com/
09:50 < v_y> medikoo: the only thing i think i prefer about Q now is that it runs in many environments
09:50 < medikoo> v_y: what do you mean exactly?
09:50 < v_y> ah
09:50 < v_y> you have to use webmake
09:50 < v_y> mauybe that's not so bad
09:51 < medikoo> yeah, I prefer to keep boilerplate out of core logic
09:51 < medikoo> I use deferred in browsers a lot
09:51 < v_y> i didn't know about webmake, looks cool
09:55 < TonkaTruck> https://github.com/nodejitsu/nssocket/blob/master/examples/bla.js this is a 19 line socket server.  Regarding the sockets array…if I want to assign a unique id to each socket, would there be memory implications to sockets being an object literal keyed with those socket ids?  Versus [] ?
09:56 < TonkaTruck> Looking at socket.io's store/redisstore I can't quite determine how they're doing this.
10:15 < topriddy> Hi guys
10:16 < Gottox> http://www.youtube.com/watch?v=a8IQ1ewoWi4 - yesterdays hacking result.
10:16 < topriddy> What IDE/Environment/Editor do you guys prefer to write your codes in...I'm an absolute newbie and tourist...coming from java with not more than 48hrs in whole in dynamic langs like ruby/haskell/python, I still WANT Intellisense and other Java IDE stuffs
10:16 < substack> why on earth....
10:16 < substack> topriddy: I use the shell and vim
10:16 < substack> vim feels a little heavyweight honestly
10:17 < substack> I might start modding dominictarr's text editor
10:17 < zomg> topriddy: JS is ridiculously hard to get good intellisense stuff for because it's so highly dynamic
10:17 < zomg> WebStorm probably has the best implementation of that for the moment
10:17 < substack> oh and plus the repl
10:17 < zomg> but it's far from perfect
10:17 < substack> I don't really *get* what value IDEs are supposed to bring
10:18 <@konobi> built in debugging can be useful
10:18 < zomg> well at least in larger projects and in projects where I don't remember what everything does it's quite convenient when you can easily jump between files etc.
10:18 < substack> I just see the downsides
10:18 < zomg> and the debugging stuff yeah
10:18 <@konobi> topriddy: if you _really_ need to, try komodo with vim bindings
10:18 < zomg> in Java automatic imports is really nice because holy shit nobody can remember where all the hundred classes you need live
10:19 < substack> zomg: I would rather feel the pain so I have a good reason to fix the interfaces
10:19 < topriddy> substack: intellisense...duh.
10:19 < Gottox> substack: did you ever tried to develop java with vim?
10:20 < Gottox> it is a pain in the arse.
10:20 < zomg> Yeah Java without an IDE is awful
10:20 < zomg> well, even more awful than Java with an IDE
10:20 < zomg> :p
10:20 < SomeoneWeird> topriddy, intellisense sucks with JS, honestly
10:20 < zomg> yeah like I said, give WebStorm a shot
10:21 < zomg> it doesn't have perfect completion but probably the best available for JS
10:21 < topriddy> like i want to be sure i'm spelling something correctly or i'm invoking a method right. moving btw languages consistency remembering all those methods can be some getting used to
10:21 < topriddy> zomg: thanks
10:21 < Zak> does anybody use requirejs for node?
10:21 < SomeoneWeird> you have to read documentation for that..
10:22 < zomg> Compiled languages do have the nice side of not compiling when you misspell a name
10:22 < zomg> so it's very easy to catch those =)
10:22 < Zak> i have autocomplete with JS... and it's okay
10:23 < substack> Zak: it always looks really awkward when people try to use AMD with node code
10:23 < Zak> getting the occasional method/variable name still happens from time to time, but honestly, its not really a big deal
10:23 < Zak> substack: i think the way node modules are brought in normally looks awkward
10:24 < substack> require('modulename') ?
10:24 < Zak> then again, I'll admit AMD can be annoying too
10:24 <@konobi> topriddy: komodo has specific nodejs support, including debugging, etc.
10:24 < SomeoneWeird> yeah, how is require() annoying?
10:24 <@konobi> i know a reasonable amount about requirejs, but have never actually used it
10:25 < substack> amd is just about the ugliest and most awkward looking way I can think of to reuse code
10:25 < substack> especially modules with sub-dependencies
10:25 < substack> and the whole mapping shimfile noise
10:25 < substack> looks like one gigantic trainwreck
10:25 < Zak> the what?
10:25 < substack> how do people put up with that kind of complexity
10:26 < Zak> not sure what you mean by the shimfile. You can optionally shim stuff if a library gets put into the global scope
10:26 < Zak> but many libraries support AMD
10:26 < substack> I hate libraries that support AMD.
10:26 < substack> I go out of my way not to support it.
10:26 < substack> because it needs to die
10:27 < Zak> you hate jquery?
10:27 < substack> yes
10:27 <@konobi> who doesn't?
10:27 < substack> but that's beside the point
10:27 < Zak> i don't
10:27 <@konobi> even john hates it these days i bet
10:27 < Zak> but to be truthful, i haven't used jquery enough to hate or love it
10:27 < substack> browsers have querySelector() now
10:27 < substack> not really much need for it
10:27 < substack> they've had it fro a while
10:27 < substack> *for
10:28 < Zak> since IE8
10:28 < Zak> pity supporting IE7 is still important to a lot of people
10:28 <@konobi> modernizr and zepto/xui... sorted
10:29 < substack> in fact: https://github.com/substack/node-deep-equal/pull/1
10:29 < substack> just did that just now
10:29 < substack> AMD needs to leave me alone
10:29 < Zak> anyway, i think i'll lay off requirejs for nodejs. To be honest, i haven't seen a single project which uses it
10:30 < Zak> haha substack 
10:30 < Zak> careful. If you keep this up, you'll end up being more opinionated than Crockford
10:30 < Zak> ;)
10:31 < substack> I've had this opinion for a long time.
10:31 < Zak> well, you're behind browserify
10:31 < substack> I had already gotten used to how node does modules before I ever saw AMD
10:31 < Zak> so it makes sense that you wouldn't be a fan of AMD
10:31 < substack> and then I was like "what the fuck is this ugly thing"
10:31 < substack> get it away from me
10:31 < Zak> to be fair, there are some really annoying things about AMD too
10:31 <@konobi> james has tools to wrap node modules in requirejs... use those if you need to
10:32 < substack> yes use those
10:32 < substack> don't ever write code for amd by hand
10:32 < substack> if you must use amd, use tools to wrap it
10:32 < Zak> for example... if you remove or add module ids in AMD, you have to make sure you remove the appropriate parameters in the function
10:33 < Zak> its easy to fuck up
10:33 < Zak> i've seen people screw things up... like put them out of order
10:33 < Zak> or have 2 switched around the wrong way etc
10:33 < Zak> ok substack. amazingly, i think you've convinced me to move to browserify
10:34 < substack> Zak: damn I wasn't even trying to be pursuasive
10:34 < substack> I just don't like it.
10:34 < jvanveen> ehm, im trying to figure out how to add a Uint16Array to an existing array
10:34 < jvanveen> http://paste.kde.org/650276/
10:34 < Zak> substack: lucky you're not a cars sales person. I would have bought 2 by now.
10:34 < medikoo> Zak: there's no single advantage of AMD over CJS, really.. the only kind of valid point is that you can do AMD right in the browser without touching console, but that's lame to me, programmer shouldn't be afraid to run simple command in console
10:35 < jvanveen> any idea how i can read back the meta length at the start of an arraybuffer view?
10:35 < substack> Zak: I just like how node does modules so I just do that, even in browsers
10:35 < Zak> what do you mean AMD without touching consoole?
10:35 < substack> because fuck all, I am not learning 2 separate javascript module systems
10:35 < substack> I'm just going to use "the good one"
10:36 < medikoo> Zak: that you can just load scripts in browser and it works, for CJS you need to generate bundle
10:36 < Zak> Oh...... :(
10:36 < Zak> so you can't just run your code directly?
10:36 < substack> medikoo: I like how I can just load my browser modules in node on the repl
10:36 < Zak> Okay.. that's a big downside for me
10:36 < substack> Zak: sure you can run your code directly, just use node
10:37 < substack> and I'm not sure how using browserify would differ so much from using <script> tags or amd
10:37 < medikoo> substack: me too :) I just said that's the the only lame point about AMD, that you can make valid..  but it's nonsense to me. I hate AMD same as you do
10:37 < substack> just do browserify main.js -o static/bundle.js --watch
10:37 < Zak> substack: that wouldn't be a huge problem. I generally write big javascript programs, so I always break away DOM specific code from non-DOM specific code
10:38 < substack> yes, that's a good idea
10:38 < Zak> yeah, i've been doing it for a while now and it works like a treat
10:38 < medikoo> Zak: it's about running one simple command *once* which you don't need to repeat on every change, that's nothing, and advantages over AMD are huge
10:38 < substack> and you can publish the reusable bits to npm more easily that way
10:38 < Zak> every JS dev that comes onto my team loves it
10:38 < Zak> medikoo: what else an advantage?
10:38 < medikoo> Zak: No boilerplate in your code, just core logic
10:39 < substack> and you can use npm modules in your browser code
10:39 < medikoo> Zak: CJS when bundled is much faster, than AMD waterfall loading style
10:39 < substack> ^ biggest reason
10:39 < substack> npm has so many modules
10:39 < Zak> yeah
10:39 < medikoo> Zak: and as substack pointed, you write same way for browser and server, so you can easily reshare same code on both sides, it's big win
10:39 < Zak> lots of them are very node orientated though
10:40 < Zak> medikoo: yeah, sort of. AMD works on node too
10:40 < substack> plenty work both places
10:40 < Zak> you could argue that the same framework coudl be established both ways
10:40 < substack> Zak: also check out http://browserify.org/search
10:40 < substack> modules with testling tests bubble up to the top of the search results
10:40 < medikoo> Zak: no it doesn't, you need special tool to make it work, and that's another boilerplate and fuss in your project
10:40 < substack> so you know those ones work in browsers
10:40 < Zak> medikoo: ah what..
10:41 < Zak> medikoo: i would argue that browserify is a special tool to make node style require work in the browser
10:41 < medikoo> Zak: and there are growing number of packages in npm that are written with cross-env in mind, so they're not bound to Node.js specific stuff. I publish only that way
10:41 < Zak> and getting AMD to run in nodejs requires special tools too
10:41 < Zak> i don't think thats an actual pro or con for using one or the other
10:41 < Zak> they both have tools supporting them
10:42 < medikoo> Zak: but AMD forces you to write boilerplate in your code, with CJS there's 0 characters of boilerplate
10:42 < Zak> what do you define as boilerplate?
10:43 < medikoo> Zak: simple function wrapper for module is boilerplate
10:43 < Zak> i would say that writing "var x = require('x');" is boilerplate too
10:43 < medikoo> Zak: not to mention all those modules system negotiation that you see in many modules, it's ugly
10:43 < medikoo> Zak: it's not
10:43 < medikoo> Zak: it's module import.. like you do e.g. in Python
10:44 < medikoo> Zak: it's like variable definition, that's not boilerplate
10:44 < Zak> what about module export though?
10:44 < medikoo> Zak: it's export
10:45 < medikoo> Zak: boilerplate is code that you need to add to your module, that doesn't have to do anything with your module
10:45 < topriddy> the book i'm reading says Node.js can run on a single core since its a single process. It also somewhat implies that if poorly written that Node.js codes can be gotten wrong and then syncronous. here: http://www.nodebeginner.org/
10:45 < Zak> so how is that different to using define in AMD with a return statement?
10:45 <@konobi> amd has it's uses... in the browser... since you have all the async loading fun
10:45 < Zak> have you seen AMD? it's really simple
10:45 < medikoo> Zak: and what you import/export belongs to module logic and it's part of module
10:45 < Zak> i don't know what sort of boilerplate code you're referring to
10:46 < medikoo> Zak: it's ugly, you need to wrap each module with function, in CJS you write as if you were already in a wrapper
10:46 < Zak> define(["module/id1", "module/id2", function() { // foo });
10:46 < topriddy> like passing in-line functions is the secret to having asynchronous thing work
10:46 < medikoo> Zak: not too mention that you need to create extra configuration files, to provide modules path, that's just stupid
10:46 < Zak> medikoo: that's hardly saying that one has more boilerplate than another
10:46 < dileep> m trying to use this browser but when i put the run button it doesnt start any idead for that   http://edgytech.com/umongo/
10:47 < medikoo> Zak: just do what's best for you :) You asked I answered
10:47 < Zak> medikoo: i think that's a good feature
10:47 < Zak> and that configuration is very sparse
10:47 < Zak> once you understand it, it's really not a big deal
10:47 < medikoo> Zak: that's totally unnecessary.. why there's not need for that in CJS?
10:47 < medikoo> Zak: it's additional baggage you don't need
10:47 < jvanveen> hm bit stuck with this arraybuffer code to add additional data
10:47 < jvanveen> http://paste.kde.org/650288/
10:48 < jvanveen> anyone knows how to combine int16 and int8 in a single arraybuffer?
10:48 <@konobi> jvanveen: use byteLength
10:48 < Zak> medikoo: If you move an entire namespace, it may mean modifying a large amount of files, ies no?
10:48 < Zak> *yes/no?
10:48 < medikoo> Zak: Simplicity is much better than complexity, AMD creates problems and then provides solutions to solve them, that's added complexity that's not needed
10:49 < jvanveen> konobi: ah thanks!
10:49 < medikoo> Zak: what do you mean move an entire namespace? there are no namespaces in CJS
10:49 < Zak> paths then
10:49  * topriddy the advance guys are paying me no attention. lol
10:50 < listochkin> topriddy: are you still here?
10:50 < medikoo> Zak, yes if you change path of module, you need to change references to it, that's normal
10:51 < topriddy> listochkin: yeah
10:51 < dileep> m trying to use this browser but when i put the run button it doesnt start any idead for that   http://edgytech.com/umongo/
10:52 < Zak> is browserify considered to be CJS?
10:52 < topriddy> anyways newbie js question whats the difference between var sum = function (number1, number2) { return number1 + number2;}  || and just writing: function sum(number1, number2){ return number1 + number2;}
10:52 < substack> Zak: it's whatever version of commonjs node uses
10:52 < medikoo> Browserify bundles CJS modules for browser, so you can run them in browser env
10:52 < listochkin> topriddy: couple of suggestions for you: 1. WebStorm - best in class. 2. SublimeText - has some autocomplete plugins and can autocomplete every token you entered in a file so far - this alone fixes 95% of typos
10:52 < substack> 1.1 or whichever it is
10:52 < substack> the point of browserify isn't that it uses commonjs, it's that browserify uses whatever node uses
10:53 < listochkin> topriddy: if you're on windows, Visual Studio with some plugins might work well
10:53 < Zak> why is requirejs listed on commonjs's website
10:53 < Zak> so requirejs is a specific implementation of commonjs?
10:53 < Zak> http://www.commonjs.org/impl/
10:53 < medikoo> Zak: There's also other tool (I'm the author) that is more about porting CJS style to browser: https://github.com/medikoo/modules-webmake
10:53 < listochkin> topriddy: but in general since JS is a dynamic language one can't get 100% accuracy in intellisense
10:54 < listochkin> topriddy: so don't expect tooling at Java/C# level. That's compensated by theic nature of the language itself dynam
10:54 < topriddy> listochkin: i have sublime text2 the unregistered version...what do i need to do?
10:54 < listochkin> ouch)
10:55 < medikoo> Zak: requirejs has nothing to do with CJS style, they're doing async modules, and it's different story, in first place it's name shouldn't be requirejs but definejs
10:55 < listochkin> http://wbond.net/sublime_packages/package_control
10:55 < listochkin> and then watch this: http://www.youtube.com/watch?v=TZ-bgcJ6fQo
10:56 < Zak> medikoo: is your tool and browserify effectively the same thing?
10:56 < Zak> oh wait, i understand
10:56 < Zak> one is more towards nodejs the other is for CJS
10:57 < Zak> i guess one thing that is sort of good about your tool and browserify is
10:57 < Zak> that they force you to use the build process
10:57 < Zak> i don't know if thats always a good thing
10:58 < Zak> but yeah, very commonly, people think of building their app as an after-thought
10:58 < medikoo> Zak: in some sense similar, but different, as far as I understand Browserify tries to port code that's using Node.js API's for browser.. while Webmake is more low-level, it's NodeJS modules style for JavaScript, it doesn't try to port native Node stuff to browser
10:58 < Zak> and everything falls apart
10:58 < Zak> does browserify do special stuff for in-built node packages?
10:59 < Zak> oh it does
10:59 < medikoo> Zak: tries to make possible to use them in browser
10:59 < Zak> okay. I'm talking way too much. I need to give myself some quiet time.
10:59 < Zak> thanks guys. I'll go and play now
10:59 < substack> so you can use streams and such
10:59 < medikoo> Zak: you're welcome
10:59 < substack> and process.nextTick()
10:59 < topriddy> listochkin: thanks
11:00 < substack> wrappers for things that make sense in browsers so that modules from npm are much more likely to work
11:01 < topriddy> listochkin: i installed. and installed NodeJs package too. Now i tried this: var http = require("http"); then this: http.createServer(         at this point i tried invoking Intellisense....it doesnt tell me the valid args as in java
11:01 < listochkin> topriddy: you're welcome :) I switched from WebStorm to SublimeText recently and so far I'm pretty happy
11:01 < topriddy> listochkin: at least its better than just plain stuff...node.js is just going to be for pet projects and tourist appetite for now 
11:01 < listochkin> topriddy: yes, and that's something none of the IDEs/editors will tell you
11:02 < listochkin> topriddy: have you ever programmed in Python, Ruby or Perl before?
11:03 < Nasga> listochkin: i switched from ST2 to vim 7 :p 
11:04 < listochkin> topriddy: it's the same for all these languages - there are no IDEs that will give you such hints. Yet still people write large applications and complex systems with them
11:04 < geNAZt> how hardcore :D i programm with echo and cat :D
11:04 < topriddy> listochkin: ruby of recent...not yet deep enough. Also Haskell.
11:04 < topriddy> listochkin: hard core java programmer...sucks have been a static guy for too long
11:05 < listochkin> topriddy: try WebStorm
11:05 < topriddy> listochkin: free?
11:05 < listochkin> topriddy: it's about the same as RubyMine
11:07 < substack> listochkin: they probably shouldn't write large applications
11:07 < topriddy> listochkin: Jetbrains have a strong pedigree of dishing out awesome IDEs
11:08 < listochkin> topriddy: 1. Install evaluation copy. 2. Try EAPs. 3. On Linux/Mac restarting evaluation is trivial. 4. After evaluation it'll require you to restart the IDE every 30 minutes. 5. It's cheaper than ST2 anyway. 6. JatBrains have large sales evry so often
11:08 < listochkin> substack: I just wanted to mention him your Tiny Modules That Do One Awesome Thing Each principle
11:08 < topriddy> listochkin: did you see their Mayans end of the world price slash last year? awesome
11:09 < topriddy> listochkin:  their server was overloaded though...couldnt get the IntelliJ Java IDE.
11:09 < gorillatron> Is there a plugin that enables browserify to require text(html, css)?
11:10 < topriddy> substack: to agree with you i see how intellisense can get in the way of editing now :D. just after nstalling. some suggestions are bleh
11:10 < listochkin> topriddy: To keep your JS life easy and smooth: write small modules that do one thing each. That way your app won't be THAT complex :)
11:12 < topriddy> listochkin: yeah
11:13 < topriddy> listochkin: i want to create the classical one page web app...not sure of all the stacks yet. bookmarked Sammy + JQuery + HandleBar already. A friend did this using only KnockOut.js though infdot.com/estimator. 
11:15 < listochkin> topriddy: I use Knockout extensively for more than 2 years. Happy with it. But other MV* libs are pretty good, too. Just pick one and go with it.
11:16 < topriddy> listochkin: i dont know the line between routing, templating, and then binding yet. Is KnockOut js all that?
11:17 < listochkin> topriddy: no, only templating and binding. I use other libs to fill the rest
11:17 < MI6> joyent/node: Dan Milon v0.8 * 7295bb9 : dns: make error message match errno - http://git.io/0gzweg
11:17 < topriddy> listochkin: i wrote this ff the tutorial, http://pastebin.com/F8550X2s. For some reasons when i access the localhost:8888 from browser, i get "Request Received" logged twice. I dont know why though. Is it my browser problem, code issue, or NodeJs?
11:18 < topriddy> spoke too soon. this is reason http://localhost:8888/favicon.ico
11:18  * topriddy i'll be fine
11:18 < SomeoneWeird> topriddy, the browser is requesting a favicon.ico too
11:18 < SomeoneWeird> yeap
11:19 < listochkin> question for substack and probably others: should I use browser-request or browserify Mikeal's request?
11:21 < substack> listochkin: browser-request doesn't .pipe() last I checked and request() has issues with a mime-parser module
11:22 < substack> but if you use an old 1.9.x version of request it works
11:22 < topriddy> how do you guys deal with namespaces?
11:22 < substack> topriddy: I use modules.
11:23 < topriddy> substack: so you could just nest folders... and do something like var adv_math = require("./math_libs/adv_math);
11:23 < MI6> joyent/libuv: Andrius Bentkus master * 017e2d5 : unix, windows: make uv_*_bind() error codes consistent  Just like uv_tcp_ - http://git.io/vL2c7w
11:26 < topriddy> listochkin: i want to uninstall that intellisense module link you gave me. its been a nuiscance already **covers face
11:27 < listochkin> substack: .pipe implies streams. Does browserify support streams?
11:27 < listochkin> substack: say, over websockets
11:29 < listochkin> topriddy: I gave you link to package manager, not intellisense - google around for ST2 packages.
11:52 < MI6> joyent/node: bnoordhuis created branch issue4617 - http://git.io/JmbMvA
12:00 < MI6> joyent/node: Ben Noordhuis master * 6b713b5 : cluster: make --prof work for workers  Profiling in clustered environment - http://git.io/dkeTuw
13:07 < Kakera> is there a simple way to call the superclass's method when overriding?
13:09 < geNAZt> store the old method ?
13:09 < zomg> Kakera: SuperClass.prototype.whatever.call(this, arg1, arg2)
13:09 < zomg> though if you're using some kind of class abstraction as provided by some libraries then it entirely depends on the library in question
13:09 < Kakera> nah, I'm just using util.inherits
13:09 < Kakera> but thanks that should work
13:17 < Omega_Work> I'm sure this is a common question so if there's a popular resource, feel free to point me at it...
13:17 < Omega_Work> But if I'm writing a node.js app that could likely host multiple sites, what's the best way to structure things?
13:18 < Omega_Work> My main concerns would be preventing the sites from crashing each other, and having each one use it's own app directory.
13:18 < Kakera> but is there an easy way to override an event?
13:18 < zomg> Omega_Work: multiple sites like what? A blogging platform or some kind of a site builder platform? Or completely custom developed sites/apps?
13:18 < Kakera> say, I'm inheriting Socket to add encryption/decryption and I want the 'data' event to contain decrypted data
13:18 < Omega_Work> zomg: A combination of both I guess.
13:19 < Omega_Work> zomg: Some aspects of it will be strictly templates being filled out.  And then the other part might involve some MVC-style treats.
13:19 < zomg> Omega_Work: might be best to run them as entirely separate node processes tbh, and if you need them hosted from the same box, put them on separate ports and use a proxy to select correct port based on domain
13:20 < Omega_Work> zomg: I've heard of "copy on write" being able to facilitate this, eh?
13:20 < Omega_Work> zomg: To prevent memory from balooning out of control with # of sites?
13:20 < Omega_Work> *ballooning
13:20 < zomg> I don't know about that, first time I hear of it =)
13:20 < Omega_Work> zomg: I'm just wondering if that introduces scalability issues all it's own.
13:21 < Omega_Work> zomg: I wonder how many people are doing this :)
13:21 < zomg> Easier to solve than issues you could run into if you try to host everything under the same process and then need different versions of libraries or whatever
13:21 < zomg> or from one site crashing and causing everything else to crash with it..
13:21 < Omega_Work> zomg: Precisely.
13:22 < Omega_Work> zomg: I wonder how such an approach compares to putting node behind apache and just having it spun up with every request....
13:22 < Omega_Work> zomg: The comparison then would be "can it boot faster than PHP"?
13:22 < Omega_Work> Almost like an xinetd kind of setup.
13:23 < zomg> Sounds like a bad idea =)
13:23 < Omega_Work> Haha
13:23 < Omega_Work> How come?
13:23 < zomg> It doesn't play into any of node's strengths in being able to handle many requests etc.
13:23 < Omega_Work> That's right, the server would be up and down.
13:23 < Omega_Work> What about xinetd itself?
13:24 < Omega_Work> It would kill off the node process once the line goes silent for a bit.
13:24 < zomg> yeah and if you wanna do something like socket.io stuff it won't work at all
13:24 < zomg> I don't know about xinetd
13:24 < Omega_Work> If I'm understanding it correctly, it's primarily a way to run network services without the services having to be sitting listening all the time.
13:25 < Omega_Work> On a first request, it fires up the process, handles it and then leaves it running for a configurable amount of time.
13:25 < Omega_Work> Again, that's if I'm not totally mistaken.
13:25 < zomg> I currently have a setup on my VPS where I have Varnish proxy/cache sitting on port 80, which then forwards to either apache, a node app, or a haskell app depending on the domain used in the request
13:25 < zomg> works quite well
13:25 < Omega_Work> A cache is definitely a good idea no matter the setup :)
13:25 < Omega_Work> How many apps do you run concurrently with that?
13:26 < zomg> well it doesn't really cache that much right now, more just using it so that all of the domains can be served from port 80 for web stuff =)
13:26 < zomg> I have three right now but used to have two more node apps
13:26 < zomg> (three as in apache with some minor stuff, the node app and the haskell app)
13:27 < Omega_Work> I'd be curious to see if the xinetd approach is workable.
13:27 < Omega_Work> It almost sounds well suited even.
13:27 < zomg> Should be but I don't see the benefit tbh
13:28 < Omega_Work> The benefit from my perspective would be bring able to run hundreds of sites on a single server without all of them consuming resources while idle.
13:28 < Omega_Work> especially memory in this case
13:28 < Omega_Work> *being
13:30 < zomg> well if you get a request to each of them at the same time
13:30 < zomg> boom.
13:30 < Omega_Work> Howso?
13:30 < zomg> that would consume more memory than when they each would do when they're just idle
13:30 < zomg> so your server would need to be capable of handling that to begin with
13:30 < Omega_Work> Oh, just because of all the startup costs?
13:31 < zomg> nah I mean that when it's processing a request it naturally uses more memory than when it's not doing anything
13:31 < zomg> 'cause it's loading stuff from the DB, rendering templates or whatever
13:31 < Omega_Work> How would that be different to two requests coming in with two servers running constantly?
13:31 < topriddy> is Node.js/javascript also ripe for a financial kind of app? something that involves paying etc?
13:31 < zomg> Omega_Work: Not at all, so you wouldn't really be getting any benefit from that setup :)
13:32 < zomg> topriddy: sure, why not
13:32 < topriddy> am talking about from the angle of currency/precision to also the angle of managing security
13:32 < topriddy> And does one need something like apache or nginx to sit in front of node.js?
13:32 < guor> there's no arbitrary precision built into javascirpt, if you are talking about something like that
13:32 < Omega_Work> zomg: I guess the benefit would be not having dozens of servers running constantly, only when they're needed...
13:32 < zomg> topriddy: no, node itself can serve requests just fine 
13:33 < zomg> Omega_Work: well if your server has the memory to run them all then I fail to see the benefit
13:33 < Omega_Work> zomg: That's a good point.
13:34 < topriddy> thanks guys
13:35 < topriddy> guor: was talking about how numbers were treated....you dont want a number quietly rounded up...it should throw Exceptions when there is an error and not go set variable to some dumb value
13:36 < zomg> integer values are pretty safe to use even though there is no separate integer type in JavaScript
13:41 < ckknight> topriddy: just never use non-integers for dealing with cents and such, since 0.01 + 0.02 !== 0.03
13:41 < ckknight> topriddy: and integers are safe up until 2^53
13:41 < topriddy> ckknight: what shoule be used then?
13:41 < topriddy> ckknight: i'll have to handle myself? :S
13:41 < ckknight> topriddy: always use integers when dealing with financial stuff
13:42 < ckknight> multiply by 100 if you're dealing with cents
13:42 < ckknight> on the backend, that is
13:42 < topriddy> ckknight: then divide back??? thats trouble
13:42 < ckknight> when displaying, you'd divide by 100 and call .toFixed(2)
13:42 < ckknight> no, it's not trouble if you do it properly
13:42 < topriddy> ckknight: it is. NOT INTUITIVE....even when i know the maths
13:43 < ckknight> then define a Cash type or something that does it for you
13:43 < ckknight> it's the same idea as javascript dates always being in milliseconds instead of seconds
13:44 < ckknight> if we want seconds, we divide by 1000, simple as that
13:44 < topriddy> ckknight: a cash type that would have to take in numbers  in float and then do all computations as integers in the background...let me pray this already exists
13:44 < ckknight> you should always be dealing with integers except when interacting with the user.
13:45 < topriddy> ckknight: or database
13:46 < topriddy> ckknight: but i get the idea thank you. just that this is taking for granted in some platforms
13:46 < ckknight> if your database stores as floating point, then when you receive data from there, multiply by 100 (and round) before interacting with it in JS
13:46 < ckknight> I disagree.
13:46 < topriddy> ckknight: Java. :p
13:46 < ckknight> except in systems that have a proper Decimal type, this problem persists
13:47 < ckknight> and in a lot of cases, I've seen people mess up by treating things as floats regardless of the existence of said Decimal type.
13:47 < topriddy> ckknight: well...i see your point :) . i'll have to somewhat determine the power of 10s i'll raise it too. say i suck in maths...***grabs pen & paper
13:48 < ckknight> well, that'd depend on the currency you're working with.
13:48 < topriddy> ckknight: oh you still talking currency....scientific computation iin general
13:48 < ckknight> oh
13:49 < ckknight> for scientific computation, that becomes tricker. It's generally easiest to use 64-bit floats (JS's Number, for instance), and then round as-needed.
13:49 < ckknight> it all depends on the amount of accuracy you need in your computations.
13:50 < topriddy> okay
13:52 < foofoobar> In the peepcode screencast I saw using something like app.set('port', 3001); and later accessing it via app.settings.port
13:52 < foofoobar> I always get a "cannot get port of undefined"
13:53 < topriddy> Mind == Blown. Just saw Dependency Injection demonstrated in js/nodejs :D
13:54 < Omega_Work> topriddy: Where?
13:56 < topriddy> just the simple...server/index/router example in this tutorial. http://www.nodebeginner.org/. By knowlege of js has been much of bleh before now...so i'm easily amazed
13:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:58 < Omega_Work> topriddy: It's all kind of dependency-injecty by default, eh? :)
13:59 < topriddy> Omega_Work: No need for bogus Interfaces
13:59 < ckknight> topriddy: yeah, that's just kind of how JS is, it makes that paradigm extremely seamless.
13:59 < Omega_Work> Definitely a virtue.
13:59 < topriddy> Omega_Work: think because we cant pass "verbs" in Java is why we needed interfaces. lol. like here you just dig in and reach the verb...so as long as the verb remains constant, the interface isnt broken
14:00 < ckknight> well, it theoretically could be done in Java using callbacks, but the static nature of it makes it extremely verbose and complex very fast.
14:00 < Omega_Work> Definitely.
14:00 < Omega_Work> Yeah, it creates a lot of code.
14:00 < Omega_Work> Most of which many people find smelly.
14:01 < Omega_Work> I love Symfony2 (PHP framework), and the IoC/DIC is very sophisticated.
14:01 < ckknight> let's write a factory factory!
14:01 < Omega_Work> But also very complex.
14:01 < Omega_Work> Yeah.
14:01 < Omega_Work> It's like...to get anything done you're writing compiler passes
14:01 < Omega_Work> To parse the configs to set up your services.
14:01 < Omega_Work> And it just gets very discouraging after a bit.
14:01 < topriddy> a good thing i learnt Java first though. would have been very hard learning this and then dealing wth such kind of oop
14:02 < Omega_Work> Yeah, it helps.
14:02  * topriddy back to study
14:03 < vuanphuong> fdsafdsafffffffffffffffffffffffffffffffffff
14:03 < vuanphuong> http://webchat.freenode.net/?channels=node.js&uio=d4#
14:04 < vuanphuong> fdsafdsa
14:04 < vuanphuong> fdsafdsa
14:04 < vuanphuong> fdsfdsafdsa
14:04 < vuanphuong> fds
14:04 < vuanphuong> fdsafdsa
14:07 < xshifty> hello boys and girls....
14:07 < xshifty> i'm new here!
14:08 < bjartwol1> Anyone in here worked with ffmpeg and nodejs? Trying to hack the nodecopter a bit, I want the pure RGBA arrays to use with JSFeat, but all I get is a RGBA Buffer of some sort and Im sort of stuck...
14:25 < topriddy> the irony that WebStorm is built in java
14:25  * topriddy lol...guess its just use whatever works best for a situation
14:26 < geNAZt> bjartwol1: yes me
14:26 < geNAZt> i have built a cloud encoding service with ffmpeg and nodejs
14:29 < ckknight> topriddy: I'd argue that learning Java first isn't necessarily a virtue, since you would've had the perspective of JavaScript at that point.
14:30 < mscdex> geNAZt: don't tell felixge!
14:31 < mscdex> :-)
14:31 < topriddy> ckknight: talking about hacking? dont you think it'll be easier "hacking" in js? i can just pass in the wrong function.
14:31 < TehShrike2> So, the Asynchronous Model Definition.  Can someone give me the 5-mile view, with whatever commentary they feel like adding?
14:31 < ckknight> topriddy: no, I mean real development.
14:31 < topriddy> ckknight: nope...i was changing the topic
14:32 < topriddy> ckknight: thought process not yet complete....but say there is a method called doLogin(validateUser); but instead of passing it the legal: validateUser(user); that returns true/false...i pass in: true
14:32 < topriddy> see?
14:33 < ckknight> topriddy: sure, that's why you have testing.
14:33 < ckknight> you could do the same thing in Java or any other language.
14:33 < topriddy> ckknight: example please even if it is abstract
14:34 < topriddy> i cant pass in true to a method that expects a function.
14:34 < ckknight> oh
14:34 < ckknight> well, that'd just error on you
14:34 < ckknight> and it'd error as soon it's attempted to be called.
14:34 < topriddy> ckknight: guess am wrong. but js looks kind of more easier to hack and break
14:35 < ckknight> there isn't compile-time checking outside of parsing errors, if that's what you're wondering about.
14:35 < ckknight> and yeah, if you call things with improperly invalidated inputs, then yes, the system will break
14:36 < ckknight> the burden is on the consumer in JavaScript, not the producer
14:36 < ckknight> due to its dynamic nature
14:40 < zomg> topriddy: that's one of the reasons why you should have test suites =)
14:52 < exit2> hallo people
14:53 < randunel> hello exit2
14:53 < tsihonglau> hello everyone
14:54 < tsihonglau> hello randunel
14:55 < randunel> hi :)
14:56 < geNAZt> one question
14:56 < geNAZt> are big switches bad in javascript ?
14:57 < jareiko> geNAZt: http://jsperf.com/
14:58 < jareiko> geNAZt: in fact, here's one: http://jsperf.com/if-switch-lookup-table
14:58 < jareiko> looks like switch isn't that great
14:59 < Dropkick> Can somebody help me with drawImage() ? please? Ive been mwssing with it for hours on end.
14:59 < geNAZt> looks like the site doesnt load :D
14:59 < geNAZt> no chance, Internal Error 500
15:00 < matjas> geNAZt: loads fine here
15:00 < geNAZt> after the 5th try it finally loads
15:00 < ckknight> jareiko: switch is great if the checks are constant integers. Outside of that, no.
15:00 < matjas> (jsperf owner here)
15:00 < geNAZt> with hell of delay
15:00 < tsihonglau> One question! Is it possible to send or to receive zero length udp datagram with node?
15:00 < matjas> wtf, that shouldn’t happen
15:02 < geNAZt> you got a 3rd party request that holds the site up
15:02 < geNAZt> for so long
15:05 < exit2> So if a company contacts you and says "Hey we are interested in you, when are you available to chat?" and then I reply "I'm available whenever, just let me know when you would like to." and then receive no response back for a week.  How long should I wait before I open up another line of communication with the company about interviewing?
15:05 < patoseghe95> ciao 
15:05 < patoseghe95> !list
15:05 < exit2> This is relevant because it's a js/node job :P
15:05 < geNAZt> You had made a mistake
15:06 < geNAZt> Never! say whenever
15:06 < ckknight> exit2: a week seems about right.
15:06 < exit2> geNAZt: well I was paraphrasing it actually went like this 
15:06 < exit2> "If possible I'd like to schedule it sometime after 5:30pm EST (2:30pm PST) because I'm usually home by then."
15:07 < exit2> I, of course, sent them my application originally and received a reply the same day.  Now I've been chilling waiting for the 2nd reply :P
15:08 < exit2> ckknight: so maybe a week from the original date of contact?
15:09 < ckknight> exit2: yeah, I'd say so.
15:09 < exit2> word
15:11 < trungg> gesg
15:11 < trungg> dddddd
15:11 < trungg> hello
15:11 < gildean> hello
15:11 < trungg> I'm testing node js
15:12 < trungg> how are you ?
15:12 < exit2> hi
15:12 < gildean> i'm doing fine, just got out of the shower and feeling quite refreshed
15:13 < exit2> heh
15:14 < exit2> shower2irc.js
15:20 < daogurtsov> Hi their 
15:21 < tsihonglau> hello daogurtsov
15:29 < klaemo_> hey, in a chain of piped streams, the source is always the very first stream, right?
15:53 < geNAZt> how often do you guys use jslint ? and what is the benefit from it ?
15:55 < ckknight> geNAZt: I use JSHint, and it makes my code significantly better because it captures the stupid things I might otherwise do.
15:56 < geNAZt> on the other hand how much effort do you make in the code to pass these tests
15:56 < geNAZt> even if it runs fine without the tests
15:58 < gildean> geNAZt: the passes a linter if it has correct syntax etc. there's no effort beyonds that
15:59 < ckknight> geNAZt: I start everything using it, so I just code to the spec and it works. It is handy for finding potential bugs in existing code, but now that I use it all the time, it's a nonissue
16:02 < geNAZt> well the webstorm validator is a mess
16:04 < topriddy> anyone know of a db4o + Node.js binding?
16:07 < Industrial> Can brunch bundle npm packages?
16:08 < listochkin> Industrial: yes, but you'll need to use browserify if your packages touch Node API
16:09 < Industrial>  can use browserify with brunch?
16:09 < Industrial> +I
16:10 < listochkin> you can use nodemon to call `browserify bundle` and then `brunch build`
16:10 < listochkin> or node-supervisior
16:10 < listochkin> *node-supervisor
16:10 < Industrial> hm I guess so
16:11 < listochkin> that's something we do in our project
16:11 < listochkin> closed-source, sorry
16:12 < jvanveen> hey
16:12 < jvanveen> is there any reference how to write imagedata from html5 canvas from a Buffer to an actual image?
16:26 < Industrial> How do I convert https://gist.github.com/867f7ee2483b8df6b344 to jade, more specifically the last line?
16:29 < geNAZt> https://gist.github.com/1140425
16:30 < Industrial> ah right
16:30 < Industrial> thanks
16:42 < pringlescan> Hello all, if I spawn node.js from an upstart script, it takes up 99% CPU, if I start it by hand uses 0% CPU. It's not under any load, it immediately ramps up to full CPU usage. Any ideas?
16:44 < Industrial> listochkin: where do I join npm packages to vendor.js?
16:44 < Industrial> just 'javascripts/vendor.js': 'node_modules/my_module/my_js_file.js' ?
16:44 < charluck> pringlescan: my thought is that the upstart script is chain restarting due to a missing PATH etc.
16:45 < MI6> joyent/node: isaacs master * 0459a60 : npm: Upgrade to 1.2.2 - http://git.io/EGJqKQ
16:45 < euoia> this: https://github.com/substack/node-optimist or something else?
16:45 < MI6> joyent/node: isaacs created branch v0.9.7-release - http://git.io/c3qqIA
16:46 < Industrial> euoia: that
16:46 < euoia> Many thanks
16:50 < pringlescan> charluck, I can't figure it out for the life of me, what do you mean by paths? I use the full path for everything
16:52 < charluck> pringlescan: environmental variables
17:00 < kgee> I'm trying to get my foot in the websocket door. I see socket.io has high-level utilities for ease-of-use, but I'm more interested in understanding the underlying websocket protocol right now. In the intro example provided here: http://einaros.github.com/ws/ how does the client typically recieve the ws client code?
17:01 < kgee> do I need a web server to feed the client and boostrap the websocket connection>
17:01 < graeme_f> kgee: yeah, you send it some js to run in the browser
17:02 < kgee> graeme_f: good to know. Now the client code depends on the node.js ws module. How does the client automagically resolve that dependency in the (surprisingly minimal) client code
17:02 < kgee> or do all clients need node.js, breaking my belief in the ubiquity of it all
17:04 < geNAZt> no the client does not need node.js
17:04 < graeme_f> kgee: typically there's different code that runs in the browser (it's not node.js), and as i understand it the ws support is built in to the browser itself
17:04 < geNAZt> it only needs the websocket api built in their browser
17:06 < graeme_f> kgee: the higher-level libraries (like socket.io) can fall back to other methods if ws isn't supported in the browser
17:06 < kgee> graeme_f: That's good to know. geNAZt also good to know. when you say 'websocket API built into the browser', am I correct in assuming that often means chrome's V8 engine (or equivelent)? I'm still trying to put the scope of V8 into my mental map of tools
17:06 < geNAZt> no it is not part of the v8 engine
17:07 < kgee> graeme_f: I like how powerful socket.io is for things like that, but I'm working on a 'javascript networking project' for class, and need to provide an intermediate step that demonstrates basic websockets before moving on to a more robust framework like socket.io
17:07 < geNAZt> in browsers it is part of webkit or gecko
17:07 < graeme_f> kgee: that sounds cool :)
17:07 < kgee> webkit. I've heard plenty of praise for it, and now Im beginning to see why
17:08 < geNAZt> well let me explain how the chromw browser is built up
17:08 < geNAZt> you have sandboxes running, one v8 engine, webkit and some other stuff like flash
17:08 < geNAZt> they can communicate with each other
17:09 < geNAZt> so v8 only calculates pure javascript ( functions, obejcts, arrays, strings, numbers ), webkit does add an api for websockets, dom manipulation, xhr and so on
17:09 < kgee> graeme_f: It's really turning out to be a promising project. I've installed clustering software on some raspberry PI nodes I bought a few weeks back. Using adafruits new WebIDE, which supports everything from JS editing to remote R-PI bash terminal, to GPIO pin control on the PI, I can essentially make a robotic cluster controlled by socket.io and node
17:11 < kgee> geNAZt: bundling multiple protocols and fallbacks into a single tool is a good step; the next step would be to build a dynamic API capable of finding the most capable tool both client and server provide, and unifying the api ;)
17:11 < kgee> big job, I know, but we can think big here
17:11 < geNAZt> and thats the problem :D
17:12 < geNAZt> not every browser / engine can provide the same things. IE for example cant handle websockets
17:13 < kgee> geNAZt: with a little switching, the server can identify the IE users that cant use websockets, and provide a flashsockets (or alternate) protocol. The million dollar question is how to wrap the 6 or 8 socket libraries (all the way down to long polling, if I read correctly) into a single 'just_give_me_a_damn_communication_channel' API
17:14 < geNAZt> socket.io :O
17:14 < kgee> geNAZt: touche. I've read it does this, and then five minutes later still refuse to believe it exists.
17:14 < Coleoptera> fjadfjcad;jfvwrgijwigjzdvbpsfgr
17:14 < kgee> too good to be true
17:14 < Coleoptera> \
17:16 < geNAZt> ? it exists and it works
17:16 < kgee> geNAZt: I see that, I'm still 'catching up with the future' mentally
17:16 < geNAZt> ah ok :D
17:17 < Coleoptera> 9-0090
17:17 < kgee> Coleoptera: No cat, you cant type no matter how hard you try
17:18 < Coleoptera> im not a cat
17:18 < Coleoptera> sorry
17:18 < kgee> hehe
17:18 < Coleoptera> :(
17:18 < geNAZt> he is asuming that you cat runs over your keyboard
17:18 < geNAZt> ;D
17:19 < AAA_awright> I still can't find a decent message passing library
17:19 < Coleoptera> i hate cat
17:20 < AAA_awright> I just want a simple library that lets me do channel.emit(), channel.send(), or channel.write() for eventEmitter, message, or stream based APIs, respectively. None of this channel.toJson().setchannel().anotherChain().lololol() nonsense (seriously, abusing functions like that should be banned in ECMAScript)
17:20 < AAA_awright> (There ought to be a law...)
17:25 < geNAZt> i love chaining
17:25 < geNAZt> :D
17:26 < Coleoptera> ha? chaining?
17:27 < mainiak> hi. i am trying to work with udp sockets and I have local server and client. i print into console buffers before and after sending - and for sending everything seems ok - but when receiving, i see only first packet as many times as other were sended - has anyone experience with this? (and sorry for my bad english)
17:31 < segomos> mainiak: sounds like you might have a scoping problem
17:31 < mainiak> https://gist.github.com/4566334 - here is my app dump
17:33 < mainiak> segemos: how could I test it if this is the reason?
17:33 < mainiak> segomos: how could I test it if this is the reason? # sorry for misspeling your nickname
17:34 < segomos> can you post your code around the function that is spitting out incorrect values?
17:39 < mainiak> segomos: gist number is 4566410
17:40 < segomos> line 4 in that gist is what's printing out the same info multiple times?
17:40 < mainiak> yes
17:41 < segomos> whitespace in coffeescript is how you designate an if block or function ending?
17:41 < mainiak> segomos:  please refresh - i have added if, which I have in my real code
17:41 < mainiak> yes
17:41 < euoia> I am building a standalone app with some node_module dependencies, which I thought I could add as git submodules so that the user never has to run npm install - but this breaks down if those modules themselves have dependencies which are not either committed or submodules. Any neat solution other than just adding the whole dependency tree for that module to my repo?
17:42 < mainiak> segomos: I could tranlsate it into js if you want
17:42 < segomos> mainiak: please.  that looks like it should be ok
17:43 < brettlangdon> euoia, use a package.json file with your dependencies, the user will have to run npm install, but it will take care of your dependencies and their dependencies as well
17:43 < euoia> brettlangdon: I don't want the user to have to run npm install
17:43 < brettlangdon> then no
17:43 < euoia> brettlangdon: ok :)
17:43 < brettlangdon> why are you against npm install?
17:44 < segomos> you could parse their package.json files and recursively install everything
17:44 < mainiak> segomos: please refresh again - js file added
17:44 < brettlangdon> or, you can have your module run npm install for them, that way the first time they run it it will install everything
17:44 < euoia> brettlangdon: just because I want it to be as easy as possible to install this thing. I'll just commit the whole dependency tree to my repo
17:45 < euoia> brettlangdon: it's not the end of the world
17:45 < segomos> mainiak: no scoping problems in cb
17:49 < mainiak_cz> segomos: thank you - any other Ideas which could cause this issue? on sending part I print buffer before sending it by sock.send(buf, 0, buf.length, port, ip) - and I don't se issue here either - that's why I came here
17:56 < pullonpoh> I'm learning testing with node, and my current learning app is a guestbook. It writes to DOM and I would like to test that. Do I need any extra module for that?
17:57 < SinnerNyx> if I'm listening on a port for a certain hostname, I presume I can run another listen on the same port for a different hostname. My question is does the listen command have to happen in the same node instance? Is it even possible for two different instances to listen to the same port?
17:57 < airportyh> pullonpoh I recommend testing it in PhantomJS or a real browser
17:57 < sneakyness> http://www.therehasneverbeenanythinglikethis.com/
17:58 < pullonpoh> airportyh: I'm trying to do automated test that can be run every time i change something bigger. This is why I would like to write tests for that instead of just going through everything on my browser.
17:59 < airportyh> Check out https://github.com/airportyh/testem (shameless plug)
17:59 < airportyh> or testacular http://vojtajina.github.com/testacular/
17:59 < pullonpoh> Haha. I have stumbled accross one called zombie, but it is rather heavy.
18:00 < CoverSlide> if you want browser testing, use phantom/casper or chimera
18:00 < airportyh> testem/testacular are designed specifically for what your are doing, if I understand you correctly
18:00 < CoverSlide> if it's simple html testing, use cheerio
18:02 < mainiak> pullonpoh: you could use node-jasmine for server side and jasmine for client side - with testacular which is test runner afaik
18:03 < airportyh> pullonpoh: I would recommend phantomjs over zombie - much closer to a real browser, actual webkit-based (phantomjs is supported by testem)
18:03 < pullonpoh> I just watched the testacular youtube video. It seems it's what i wnat.
18:04 < pullonpoh> I will also check cheerio. Thanks!
18:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:07 < MI6> joyent/node: isaacs reviewme * cca4a16 : buffer: Define INFINITY for MSVC compiler - http://git.io/T03fkQ
18:07 < mainiak> segomos: I think i have scope issue on sending side, not receiving side (wireshark says this is true) - thank you for pointing it out
18:08 < airportyh> isaacs: what are you thoughts on bundling binary files (jar files) in a package?
18:08 <@isaacs> airportyh: depends.
18:08 <@isaacs> airportyh: probably not the end of the world.  but doing a bunch of random crap in the pre/post install script is stupid.
18:09 <@isaacs> airportyh: either bundle it in the package (if it's not monstrously huge, and will be required always) or download/build on first use (if it's only sometimes necessary, or very very large)
18:10 < airportyh> hmm, okay, I think download on first use is a good option for me
18:10 < SinnerNyx> if I'm listening on a port for a certain hostname, I presume I can run another listen on the same port for a different hostname. My question is does the listen command have to happen in the same node instance? Is it even possible for two different instances to listen to the same port?
18:10 < CoverSlide> or unless you write a jvm interpreter in javascript
18:10 < airportyh> CoverSlide :)
18:11 < CoverSlide> which would be awesome in a not-useful-to-anyone-ever sort of way
18:11 < airportyh> no it's for tunneling to BrowserStack and SauceLabs
18:11 < airportyh> you have to call out to their java program to do it
18:12 < segomos> mainiak: glad it worked out
18:12 < CoverSlide> are you bundling this in testem?
18:12 < CoverSlide> or making a plugin-type-thing?
18:12 < airportyh> they are going to be separate modules
18:13 < MI6> joyent/node: isaacs v0.9.7-release * ecf426a : 2013.01.18, Version 0.9.7 (Unstable)  * V8: Upgrade to 3.15.11.7  * npm:  (+1 more commits) - http://git.io/s_Ow3Q
18:13 < airportyh> one for browserstack and one for saucelabs
18:13 < CoverSlide> ok cool
18:13 < airportyh> testem will probably depend on these
18:13 < airportyh> but I didn't want testem users to have to download those jars on install
18:13 < airportyh> especially if they may not be using it
18:20 < MI6> joyent/node: isaacs v0.9.7-release * 4708b9d : 2013.01.18, Version 0.9.7 (Unstable)  * V8: Upgrade to 3.15.11.7  * npm:  (+1 more commits) - http://git.io/F0PuKQ
18:21 < mainiak_cz> is there any case when line like 'this.sock.send(rtp.packet, 0, rtp.packet.length, this.port, this.ip);' could cause that will somehow store rtp content and on any other it will just send previous value? 
18:22 < mainiak_cz> *on any other call
18:26 < mainiak_cz> need to say - rtp is given as argument [sendIt = function(rtp) {...}] but is declared in outer function and all calls of sendIt(rtp) are made few times immediatelly one after other each
18:28 < segomos> that will happen if you're sending in a callback and changing rtp.packet before the callback runs
18:28 < mainiak_cz> segomos: i think you hit the point
18:33 < mainiak_cz> segomos: thank you a lot your for time and help
18:33 < mainiak_cz> bye
18:46 < perlitch> happy friday fellas… can you guys help me understand why the http.Server created in this example stops responding when it reaches 5 _connections? https://github.com/andyperlitch/node-domain-module-examples/blob/master/program5-tunnel.js Does it have to do with the number of connections? Why are those connections staying open?
18:48 < Industrial> Is there a way to have a client side ORM sync with a server side ORM (both which I don't have atm), allowing you to still define authentication and authorization of requests/syncs on the server side?
18:52 < Industrial> I'm looking at https://github.com/flatiron/resourceful because it says it runs both in the server and client, I would be using shoe/sockjs as a transport ..
18:54 < merpnderp> Anyone familiar with webstorm know how to create an app that uses the built in templates, but I want to create a node project with twitter bootstrap project both in the same folder.
19:01 < draginx> why use "===" and "!==" over "==" ? (I mena I do it but how would I explain it to a person just starting out) besides a "to make sure it's a duck" response
19:06 < brettlangdon> draginx, triple equals is a strict comparison, http://stackoverflow.com/questions/523643/difference-between-and-in-javascript
19:07 < brettlangdon> triple equals checks type
19:11 < draginx> right but philoosphically *why*?
19:12 < ckknight> draginx: because "" == 0 and "hello,there" == ["hello", "there"] among other oddities
19:12 < draginx> i see
19:12 < draginx> thanks :)
19:13 < ckknight> also, it's slower, draginx
19:13 < dob_> If i execeute an async.forEach in a module the scope is lost. If i output this the application context is shown. Can I execute in the module scope? How?
19:13 < draginx> ah :D thats perfect reasibubg tgeb'
19:13 < draginx> then*
19:13 < ckknight> dob_: got an example?
19:14 < dob_> just a second ..
19:15 < MI6> joyent/node: isaacs v0.9.7-release * 9e7bebe : 2013.01.18, Version 0.9.7 (Unstable)  * V8: Upgrade to 3.15.11.7  * npm:  (+2 more commits) - http://git.io/ToUFgA
19:16 < dob_> ckknight: In parseFiles this is not the module, it's the application http://pastebin.com/PAATY6bH
19:16 < ckknight> dob_: so the problem is your "this" is wrong, right?
19:16 < dob_> yes
19:17 < ckknight> dob_: this.parseFiles.bind(this)
19:17 < ckknight> since in javascript, var f = this.something; f() is the same as f.call(void 0), i.e. no this
19:17 < ckknight> but if you bind it, then the this is passed in properly.
19:18 < dob_> ckknight: Thank u very very much! It works like a charm!
19:21 < euoia> hello everyone. Frustrated with vim-jsbeautify I have created: https://github.com/euoia/vim-jsbeautify-simple
19:38 < MI6> joyent/node: isaacs created tag v0.9.7 - http://git.io/iY50Lw
19:38 < MI6> joyent/libuv: isaacs created tag node-v0.9.5 - http://git.io/0XSTlQ
19:38 < MI6> joyent/libuv: isaacs created tag node-v0.9.6 - http://git.io/N73hCQ
19:38 < MI6> joyent/libuv: isaacs created tag node-v0.9.7 - http://git.io/smF6fA
19:39 < goodknight> I have CORS setup on my node/express app, works fine in webkit and firefox, but pin IE10 I am getting an error that @font-face is restricted. How do I remove this restriction on IE? http://pastebin.com/Yxce7GP5
19:41 < isaacbw> that's not really a node issue goodknight 
19:41 < isaacbw> oh
19:42 < goodknight> isaacbw: I've seen a few issues where this is mitigated by .htaccess on an Apache server - so I assumed there was a method to work around the header system in the same regards through node
19:43 < isaacbw> hmm
19:43 < goodknight> isaacbw: http://stackoverflow.com/a/5068006/399742 - something like this, but in node
19:45 < isaacbw> are you giving access-control-allow-origin with all resources or just the fonts?
19:46 < goodknight> isaacbw: http://pastebin.com/Yxce7GP5 -- this is what i'm currently using to allow access of everything to anyone
19:46 < isaacbw> so the html file request is getting that header with it?
19:46 < goodknight> isaacbw: I have a config set elsewhere that does some different tests to verify that the domain accessing the code is alloed
19:47 < isaacbw> does using google webfonts work?
19:47 < isaacbw> in ie10?
19:48 < SinnerNyx> how can I check where the global npm node_modules folder is on my system?
19:49 < isaacbw> 'npm folders'
19:50 < isaacbw> I would say try to use a google webfont to rule out an issue with ie10
19:51 < MI6> joyent/node: isaacs v0.8 * 1c35ee8 : blog: Post for v0.9.7 release - http://git.io/gPNXow
19:52 < MI6> joyent/node: isaacs master * fc3547b : Now working on 0.9.8 (+4 more commits) - http://git.io/U_aKKg
19:54 < goodknight> isaacbw: right on, i'll keep tinkering. It's Font Awesome - so google web font isn't a possibility at this time
19:54 < Industrial> Would it be a good idea to try and connect http://rivetsjs.com/ < - > https://github.com/flatiron/resourceful < - > https://github.com/substack/shoe < - > resourceful again < - > redis ?
19:54 < wltsmrz> CDNJS has font-awesome
19:54 < Industrial> I would have to provide adapters for redis to resourceful, shoe to resourcefil and resourceful to rivets
19:54 < goodknight> wltsmrz: I'll check that out
19:54 < isaacbw> goodknight, I just mean pick a font at random on webfonts and see if it works. If it does, then you know it's an issue with what you're doing and not with ie10
19:55 < goodknight> isaacbw: fair enough
19:55 < kenperkins> can you change the repl prompt on the fly?
19:55 < isaacbw> but if you're sure ie10 is fine, then I guess there would be no point
19:55 < isaacbw> kenperkins, yea
19:56 < isaacbw> you might have to fiddle though, but repl uses readline which lets you change the prompt as much as you want
19:58 < isaacbw> I just got a baratza coffee grinder and I've been overdosing on caffeine for three days
19:58 < goodknight> wltsmrz: looks like cdnjs has the css file but not the font files - still need to have those locally 
19:58 < goodknight> wltsmrz: never mind, my mistak
19:58 < goodknight> e
20:00 < wltsmrz> :)
20:00 < goodknight> isaacbw: using cdnjs' version of font awesome seems to work on IE10
20:00 < goodknight> so, it's a local node issue
20:00 < isaacbw> oh, cool
20:00 < isaacbw> I'm curious what the issue was
20:01 < goodknight> isaacbw: No clue.. but, I'm okay with using the CDN for now and maybe in the future I'll look into it again
20:01 < SinnerNyx> ok I ran "npm install -g cookies". I'm on windows, and it installed it into my AppData\Roaming\npm\node_modules\ folder. however node apps still complain about "Cannot find module 'cookies'"
20:01 < Industrial> Does anyone have an example of how to connect a client side with an ORM to a server side (maybe with an ORM) through a websocket?
20:01 < SinnerNyx> ideas?
20:01 < isaacbw> goodknight, you should write a blog post when you figure it out;_
20:01 < isaacbw> ;)
20:01 < goodknight> isaacbw: Oh, I will. Because searching for this has been impossible.
20:02 < goodknight> isaacbw: thanks for trying to help, regardless
20:02 < goodknight> wltsmrz: thanks for the cdnjs pointer - i always forget about them
20:02 < isaacbw> I wish I had something helpful to say
20:02 < isaacbw> :P
20:03 < goodknight> isaacbw: At least you said something, unlike the other 952 people in this channel ;)
20:03 < kenperkins> isaacbw: i didnt' realize repl.start returned a replServer object
20:03 < kenperkins> i can't find any documentation on that object
20:04 < kenperkins> isaacbw: i've gone the spectrum from kickass burr grinder, to nespresso machine, to k-cups, and back
20:04 < kenperkins> currently I'm on k-cups
20:04 < draginx> How do I always get a float to be two decimals over? Like 199.00 (parseFloat trims the .00 fat and if I did parseFoat(item.toFixed(2)) or something like that it convets it back to a string like '199.00'
20:04 < wltsmrz> https://github.com/joyent/node/blob/master/lib/repl.js#L77
20:04 < isaacbw> really? do you like the flavor or is it just a matter of convenience kenperkins?
20:04 < isaacbw> I haven't done much with them
20:05 < kenperkins> don't get me wrong, there's nothing like great beans with a burr grinder and press or other quality brew method
20:05 < kenperkins> but some of the k-cups are "good enough" for the fast morning coffee
20:05 < isaacbw> I can respect that
20:06 < kenperkins> one sec
20:06 < drdoe> exit
20:06 < drdoe> haha sorry
20:07 < kenperkins> isaacbw: it relates to "good is better than best"
20:07 < kenperkins> I can get a good cup of coffee with no effort in 60 seconds
20:07 < kenperkins> to get the best, first I have to make sure I have really good beans from stumptown (And they're fresh and sealed properly), then dial in my grinder, then get the press ready, percolate, etc
20:07 < kenperkins> it's just a pita sometimes
20:08 < isaacbw> it's kind of therapeutic though to take your time making a cup of coffee
20:08 < kenperkins> not to mention cleaning the press, storing the beans after, cleaning the grinder
20:08 < isaacbw> like cooking
20:08 < kenperkins> yea, so I do the "best" when I want a break from the comptuer
20:08 < isaacbw> :P
20:08 < kenperkins> wheras for my first morning cup, I just want something
20:08 < kenperkins> Coffee. stat.
20:08 < isaacbw> yea
20:09 < kenperkins> wltsmrz: I often fail to check the nodejs source, like an idiot
20:16 < kenperkins> anyone know of a package that does fixed column width formatting for strings with node?
20:19 < MI6> joyent/node: isaacs created branch v0.8.18-release - http://git.io/UiKPVw
20:20 < oldman> I have been unable to connect to nodemanual.org for over a week. It's the only site giving me a problem. Can anyone help me?
20:25 < CoverSlide> http://www.downforeveryoneorjustme.com/nodemanual.org
20:27 < oldman> CoverSlide: Thank you.
20:31 < Industrial> Can anyone recommend a client-side ORM / model layer that I can hook up to my view layer?
20:52 < c3l> I feel it is wrong to export like this: http://pastebin.com/tSBSbkeQ How should I do this properly?
20:53 < MI6> joyent/node: isaacs created tag v0.8.18 - http://git.io/36xJhg
20:53 < geNAZt> does returning over callbacks work ?
20:54 < MI6> joyent/node: isaacs v0.8 * 4598a4c : Now working on 0.8.19 (+3 more commits) - http://git.io/0vZoFg
20:54 < isaacbw> so the default python binary in arch is python3, but node-gyp is complaining that it needs python2. How can I tell it to use 'python2' instead of 'python'
20:54 < isaacbw> it says something about a --python switch but I'm not sure where it shuld be
20:55 < cellvia> do you have python 2 installed
20:55 < cellvia> i had to downgrade to get my node-gyp working
20:55 < geNAZt> symlink python3 to python2 ?
20:56 < isaacbw> no, what I mean is that 'python' on arch goes to python3, and you have to explicitly use 'python2' to use python2
20:56 < isaacbw> it seems like I can pass that info to node-gyp somehow, but I don't know how
20:56 < Virunga> isaacbw: use the update-alterntives if your os has it
20:56 < Virunga> the command
20:57 < MI6> joyent/node: isaacs v0.8 * 9c2c845 : blog: Post for v0.8.18 release - http://git.io/yxlFig
21:01 < MI6> joyent/node: isaacs master * 3d7818f : Merge remote-tracking branch 'ry/v0.8' into master  Conflicts: 	AUTHORS 	 (+17 more commits) - http://git.io/HHwR7w
21:01 <@TooTallNate> isaacbw: how are you invoking node-gyp?
21:01 < isaacbw> through npm install
21:02 <@TooTallNate> isaacbw: so do `npm install --python=python2`
21:02 <@TooTallNate> isaacbw: the flags get passed through to node-gyp
21:03 < cellvia> are you serious. damnit.
21:03 < isaacbw> oh! I was doing --python python2 by mistake
21:03 < isaacbw> and that wasn't working, of course
21:03 < isaacbw> thank you!
21:03 < isaacbw> everything works now
21:05 < isaacbw> I think I need a coffee break. I just put a tupperware container on a hot stove
21:05 < cellvia> or maybe less coffee
21:06 < cellvia> either too much or not enough
21:06 < isaacbw> maybe my problem is that my response to too much coffee is to drink more coffee
21:07 < cellvia> yes... the slippery coffee slope...
21:07 < phun-ky> isaacbw: i know the feeling.. i go through 4-7 cups a day, i practically live on it. all my nutrition comes from coffee
21:08 < cellvia> i dont drink coffee but i program Java-script.  is that wrong.
21:08 < TonkaTruck> phun-ky: Have you tried any really good coffees like Counter Culter, Verve, Intelligentsia, etc?  I find that high to be much better than when I drink tons of shitty coffee.
21:08 < niix> Java's Crypt
21:08 < TonkaTruck> Same with coke…the good stuff always feels the best.
21:09 < cellvia> I would be willing to try super high quality coffee if you are certain it is qualitativlly different experience than standard office coffee
21:09 < phun-ky> TonkaTruck: we've got a wonderfull supplier here in Norway called "Solberg & Hansen", they supply top of the line coffe. my favourites are the cup of excellence products and "Bourbon Jungle" real good coffee
21:09 < cellvia> TonkaTruck what is the smoothest best coffee to get me high
21:09 < isaacbw> it absolutely is cellvia 
21:10 < isaacbw> though if you drown the flavor with a bunch of cream and sugar you won't notice it
21:10 < cellvia> i dont care too much about taste
21:10 < phun-ky> once, my wife came back from guatemala with beans grown ecologically on the south side of a volcano.. bliss
21:10 < isaacbw> holy shit
21:10 < TonkaTruck> cellvia: If you want like primo "high as a kite" but without shaking…try Counter Culture's http://my.counterculturecoffee.com/coffee/espresso-la-forza.html
21:10 < TonkaTruck> This would be the equivalent of buying really good cocaine...
21:10 < isaacbw> I almost want to try roasting at home, but I've spent so much money lately I don't think I should shell out for a roaster
21:10 < cellvia> i am very sensitive i dont necessarily need to be blasted with caffeine.  the one awesome coffee experience i had was from organic coffee in hawaii it was decaf but i was still amped for days.  really
21:11 < isaacbw> except coffee doesn't destroy your brain like cocaine does
21:11 < cellvia> cocaine gets a bad rap.  coca leaves rule. lol
21:11 < phun-ky> isaacbw: don't roast, just get a fresh bathc of roasted beans from your supplier
21:11 < TonkaTruck> isaacbw: It's a common myth that roasting will gain you an advantage…roasting coffee is trivial.  Sourcing good beans is an art and requires lots of time, relationships, and money.
21:11 < cellvia> TonkaTruck  so if i want a smooth but blissful high instead of getting blasted, and no shakes, what should i gofor
21:11 < isaacbw> that's what I usually do phun-ky. I think I might save some money by roasting though
21:11 < phun-ky> isaacbw: and then grind them yourself
21:11 < isaacbw> I do!
21:12 < isaacbw> it's more a diy thing than looking for an actual advantage
21:12 < phun-ky> there's nothing like a fresh batch of coffee from self-grinded beans..
21:12 < isaacbw> absolutely
21:12 < isaacbw> I might invest in an espresso machine too when I'm done being poor
21:13 < isaacbw> I had a cheap krupps for a little while but I didn't bring it with me when I moved
21:13 < phun-ky> I have a work deal with a coffee company in oslo, they deliver each month 6kg of freshly roasted beans, we grind and use a press to make the coffee. cheaper than going to shitbucks (or similar) and the best coffee around still today
21:13 < TonkaTruck> Yeah, my espresso machine was $500 used on ebay and the same for my grinder.
21:14 < isaacbw> nice
21:14 < cellvia> heres a tip guys, shaking from coffee comes from magnesium depletion,  take some magnesium supplements to counteract it if that happens to you 
21:14 < phun-ky> isaacbw: if you do not want the hazzle with an espresso machine, you can consider the Jura machines from switzerland, top of the line machines that does the job fantasticly
21:14 < TonkaTruck> cellvia: Hey that's good to know!
21:14 < phun-ky> cellvia: magnesium is also good for restless legs ;)
21:14 < cellvia> magnesium is just amazing period
21:14 < isaacbw> I suffer from both of those things
21:14 < isaacbw> awesome
21:15 < segomos> doesn't the starbucks coffee machine do espresso?
21:15 < cellvia> magnesium malate / citrate i take EVERY day
21:15 < cellvia> dont take magnesium oxide its not absorbd
21:15 < segomos> cellvia: no joke, i take zinc magnesium aspartate - i'm able to sleep through the night now
21:15 < segomos> no leg pain
21:15 < wltsmrz> Is isaacbw isaacs?
21:16 < isaacbw> nope
21:16 < isaacbw> isaacs is isaacs
21:16 < phun-ky> dang, we've been sucking up to the wrong isaacs :P
21:16 < isaacbw> I'm a different derpy guy witht he same name
21:16 < isaacbw> :P
21:16 < wltsmrz> It's not helpful when you both communicate at basically the same rate.
21:17 < cellvia> ok for that magnesium tip please give me a tip, i need the most blissful (not amped) coffee there is.  what is it
21:17  * isaacs is isaacs.  isaacbw is isaacbw.  red is red.  the moon is the moon.  oceans are oceans.  now is already over.
21:17 < wltsmrz> I might have noticed that isaacs is/was in Korea. Or maybe my mind is playing tricks.
21:17  * tjfontaine is the man in the moon
21:18  * SomeoneWeird is the man in the ocean
21:18 < wltsmrz> In Korea, magnesium is "maga-neh-shoom"
21:18 < chridal> Hi everyone! I am having some difficulties. Currently writing an API server with Journey as a router. But when I am using PUT requests I am getting error: not allowed. Im on a ubuntu box. Anyone have a clue?
21:18 < TonkaTruck> cellvia: I would look for genetically "low caffeine" beans…not decaf.
21:19 < isaacbw> chridal, it does sound like an issue with journey and how you're using it
21:19 < cellvia> is there a name for that type or just called low caffeine
21:19 < cellvia> normal coffee is like arabica or rustica right
21:19 < euoia> having some npm weirdness, how can I tell where in the filesystem a module that I'm requiring is?
21:19 < wltsmrz> Robusto
21:19 < chridal> isaacbw: I can throw my server.js in a pastebin, if you could take a look, maybe?
21:19 < isaacbw> go ahead, just share it here
21:19 < isaacbw> the link
21:19 < wltsmrz> Robusta*
21:20 < isaacbw> I don't really know journey though, so I'll be of limited assistance
21:20 < chridal> isaacbw: http://jsfiddle.net/425Bf/
21:20 < isaacbw> so any put request gives you 'not allowed'?
21:21 < TonkaTruck> cellvia: Normally, a true "gourmet arabica" will be lower in caffeine.
21:21 < brettlangdon> euoia, you can take a look at the require cache, console.dir(require.cache)
21:21 < chridal> isaacbw: Exactly. I am doing fine with all requests but PUT, and when using httpie I am getting back: allowed: GET, POST, DELETE
21:21 < chridal> also, the response status is 405 Not Allowed
21:22 < cellvia> is it best to drink coffee on an empty stomach 
21:22 < MI6> joyent/node: Yi EungJun master * 33d2242 : doc: Add NODE_DEBUG env to the first example.  The first example in clust - http://git.io/Md7cMg
21:22 < chridal> cellvia: To get better effect you mean?
21:22 < euoia> brettlangdon: thanks, that works - useful tip
21:22 < isaacbw> chridal, what are the URLs you're sending it?
21:22 < brettlangdon> euoia, np
21:22 < chridal> right now I am using a form that is using method="put" with url localhost:8080/articles/a1b2c3
21:23 < chridal> oh wait, and ?author=jeje&text=jeje
21:23 < context> why not justp put action="/articles/a1b2c3"
21:23 < isaacbw> chridal, have you tested it with another way of sending http requests? it might be your browser not letting you 'put' from a form
21:24 < cellvia> chridal effect and health
21:24 < chridal> context: because the index.html is not really hoocked up to the installation, it is not running on localhost:8080 along ith it.
21:24 < context> gotcha
21:24 < cellvia> im pretty sensitive ive been honestly getting high as shit drinking fresh juiced vegetables turmeric and ginger every morning lol
21:24 < chridal> isaacbw: yea, I used httpie which is basically curl written in python
21:24 < isaacbw> hmm
21:25 < cellvia> im down to try a good coffee to up my coding game tho
21:25 < chridal> cellvia: haha. I know the feeling. But the effect has "diminishing returns", sadly. Really quickly. I get kind of nacious with too much coffee on an empty stomach, tbh.
21:25 < cellvia> i just want it to be realy smooth and not like make me want to run laps around the office
21:25 < chridal> cellvia: Well, with a cup of coffee I am sure that it will not be too much, and will increase your focus more than making you run around.
21:26 < chridal> isaacbw: I might be onto something now.
21:27 < isaacbw> your brain also adjusts to the caffeine after a while, so even if it makes you hyper now, eventually it will affect you differently
21:27 < isaacbw> for better or for worse
21:27 < chridal> isaacbw: Ok. It was a total rookie mistake. You were right about it not letting the form submit, and the problem in httpie was I was submitting it without the ID.
21:27 < isaacbw> oh, cool
21:27 < chridal> Thanks you, though!
21:27 < isaacbw> np. glad you got it working
21:28 < isaacbw> I was trying to look through the journey source to get an idea for how it works
21:28 < chridal> I must say I envying you cellvia. I used to do caffeine pills when studying for exams, and I got REALLY great focus from that. But I had to quit, got addicted. :)
21:28 < chridal> isaacbw: I should read the source as well. I think the api is thin, or rather, no existing.
21:29 < isaacbw> you can't really do any harm with cups of coffee, but overdose on caffeine pills is a real risk
21:29 < isaacbw> yea chridal, it looked really simple from what I saw
21:29 < chridal> isaacbw: yea, if you pop 10 of them it is within health risk
21:29 < cellvia> you guys are making me NOT want to drink coffee
21:30 < MI6> joyent/node: Dave Olszewski master * 14c911d : domain: empty stack on all exceptions  Due to the nature of asyncronous p - http://git.io/SbIxcA
21:30 < isaacbw> heh
21:30 < cellvia> i dont want to become a junky!!! just say no
21:30 < chridal> cellvia: Well, if I am to be totally honest, I would steer clear. 
21:30 < isaacbw> aw, why would you say that
21:30 < chridal> Because it is just like alchohol, or any drug really. You are getting a high, but you will create some sort of debt.
21:31 < isaacbw> https://www.youtube.com/watch?v=OTVE5iPMKLg
21:31 < chridal> Any substance that makes you feel well will in turn bring with it some debt. Every high has its low. Is my opinion at least, and is why I quit all caffeine
21:31 < chridal> I'll check it out
21:31 < chridal> isaacbw: I am loving the title so far. :)
21:32 < chridal> I hate how "dancefloor hits" has become the ad for me on youtube :(
21:32 < cellvia> chridal what about ginger and turmeric juice
21:32 < cellvia> thats what ive been getting high off of 
21:36 < chridal> isaacbw: that was really nice, neat and informative. But I still think that there is a debt to be paid, if you were ever to stop.
21:36 < chridal> cellvia: Well, I guess it depends. One of my reasons for not wanting to drink coffee is that it really stains your teeth.
21:36 <@Nexxy> kind of like everything in life
21:37 < isaacbw> I guess. Caffeine pills are definitely in a different ballpark though
21:37 < chridal> isaacbw: One pill is like one cup. So not really
21:37 < chridal> depends on the pills, of course.
21:38 < chridal> I love everything coffee and caffeine. I just abstain. But I usually don't tell other people to do that. I really see the benefits, I just don't want to depend on that drug every morning to get my wheels cranking.
21:38 < isaacbw> coffee is about more than the caffeine though
21:38 < cellvia> caffeine withdrawal is really difficult
21:38 < chridal> Indeed. The wonderful taste, smeel, everything.
21:39 < cellvia> come on.  its 98% about the caffeine
21:39 < cellvia> why else does everyone shit on decaf lol
21:39 < chridal> No not really. If it didn't stain my teeth I would totally go decaf.
21:39 < cellvia> yeah?
21:39 < chridal> because they are already addicted to caffeine
21:39 < chridal> totally. it tastes and smells awesome.
21:40 < isaacbw> the teeth staining is a real thing though
21:40 < aho> it's not as bad as smoking though
21:41 < chridal> yea, for real I could see my teeth get a brighter tone after a while off the coffee
21:41 < chridal> by the way, when you are using a put request are you putting all the data to be updated in the url then?
21:42 < cellvia> i think coffee tastes terrible until you get high off the caffeine or overwhelm it with sugar and milk, then by association you will forever enjoy it
21:43 <@Nexxy> I actually very much enjoyed a small cup of french press freshly roasted by mbalho 
21:43 <@Nexxy> I didn't even drink enough to get a caffeine buzz
21:43 < chridal> cellvia: Try starting with Latte Machiato (steamed lots of milk) with two shots of espresso. And you will amazed.
21:43 <@Nexxy> I don't drink coffee normally
21:43 < cellvia> not that you were consciously aware of anyway :)
21:43 < billy> I drink coffee because I love the taste
21:44 <@Nexxy> cellvia, you're kind of grasping at straws
21:44 <@Nexxy> lol
21:44 < cellvia> youre all addicted!!! addicts! taste schmaste
21:44 < chridal> haha.
21:44 < cellvia> this coffee cult is going to drive me nutty.  everyones part of it.
21:44 < chridal> you don't have to, though, cellvia ?
21:44 <@Nexxy> coffee/beer/pot/whatever
21:44 <@Nexxy> everyone likes something
21:44 < cellvia> the economy would come to a grinding halt without it
21:44 < chridal> Nexxy: indeed.
21:45  * Nexxy all of the above
21:45  * chridal nods.
21:46  * yawnt yawns *
21:48 < cellvia> i dont actually mind that everyone is addicted to coffee, i was just playing.
21:48 < chridal>  I am falling in love with node
21:49 < cellvia> i feel that
21:49 < cellvia> node loves you
21:49 < chridal> I just love how you write it all yourself. 
21:49 < chridal> Like when I was using RoR, I was kind of feeling that I had this fat slow stack bundled with loads of stuff I didn't need. If I don't need it here, I won't write it. Simple.
21:49 < preyalone> What's the state of Node support for Android, iOS, and/or Windows RT? I'd like to write my mobile apps all in one language, and Node.js would be ideal.
21:50 < chridal> preyalone: You could run node on the server, and use phonegap for your apps.
21:50 < chridal> Or do you mean an offline app?
21:51 < cellvia> i basically skipped ruby
21:51 < cellvia> went straight from php to node
21:51 < cellvia> i avoided ror for years and now im ok with that
21:51 < cellvia> not because i had anything against it, just procrastinated
21:51 < chridal> The only thing you missed was some beautiful syntax, basically.
21:51 < preyalone> chridal: Not a bad idea. But how could I get PhoneGap to work with NPM packages?
21:51 < cellvia> sometimes procrastination pays off.  sometimes.
21:52 < chridal> preyalone: What do you mean? I would use backbone.js on the client side of it all.
21:52 < chridal> And just have a REST API that you used to talk to node.js
21:52 < cellvia> browserify ?
21:52 < cellvia> preyalone do you know about browserify
21:52 < preyalone> chridal: Let's say I don't want to reinvent the wheel in the client app. How could I take advantage of NPM packages within a PhoneGap application?
21:52 < DiSecundo> hi
21:53 < DiSecundo> the question is
21:53 < cellvia> preyalone browserify.
21:53 < cellvia> i think
21:53 < DiSecundo> i was thinking of sexing woman but
21:53 < DiSecundo> in most times it forces me into relationship
21:53 < cellvia> i actually am not sure what version of ecmascript phonegap uses
21:53 < DiSecundo> i mean, girlfriend
21:53 < cellvia> wrong room
21:54 < cellvia> this is the wrong room
21:54 < DiSecundo> but having girlfriend is not that great
21:54 < chridal> preyalone: I guess that matter what you mean by reinventing the wheel? What npm packages is it that you want to use on the client and for what?
21:54 < cellvia> no one in here has had sex
21:54 < DiSecundo> cellvia really?
21:54 < DiSecundo> cellvia why is that
21:54 < DiSecundo> sex is normal, every healthy person needs it
21:54 < cellvia> because we have committed ourselves to a higher love:  node
21:54 < chridal> we're not healthy. we are addicted to coffee
21:54 < preyalone> chridal: Not any one particular package, I just know that I will want to use NPM packages in my mobile apps.
21:54 < DiSecundo> cellvia man, but its biological need and psychological
21:54 < DiSecundo> and its great
21:55 < DiSecundo> its much more fun than node
21:55 < cellvia> WRONG ROOM
21:55 < DiSecundo> you put penis into vagina
21:55 < DiSecundo> and its cool
21:55 -!- DiSecundo was kicked from #Node.js by Nexxy [DiSecundo]
21:55 < chridal> wow. thanks.
21:55 <@Nexxy> never appropriate for #node.js
21:55 <@Nexxy> lol
21:55 < chridal> preyalone: I am not sure, to be honest. Could probably check out browserify, which cellvia was talking about
21:56 < cellvia> what the hell was that, since when does sex need proselytization
21:57 < chridal> wow. I really needed to look up proselytization... and I was mindblown that you would actually come up with that word 
21:57 < preyalone> That's kinda cool. Does browserify cache the libraries, because it would suck for a mobile app to not work when offline.
21:57 < mansoor-s> @_@  now i've seen it all
21:57 < chridal> preyalone: well, you could just cache them locally yourself I guess. PhoneGap gives you access to the filesystem.
21:58 < cellvia> browserify bundles them and then you include the bundle as  a script in your js
21:59 < TonkaTruck> I knew what it meant haha.  It's an issue of selective prosecution and it's tyrannical.
21:59 < preyalone> Why not just drag and drop the .js files yourself at that point?
21:59 < cellvia> because you wont get access to native node methods
21:59 < cellvia> and they wont work
21:59 < cellvia> in most cases
22:00 < CoverSlide> trevnorris: was looking at the PNG spec, just noticed it uses big-endian, so i guess endianness isn't truly standard
22:01 < chridal> I guess I just wouldn't see why someone would be running node.js on a mobile client? I might have misunderstood, but I thought node was most useful for low level stuff like networking etc.?
22:01 < trevnorris> CoverSlide: really? strange. doesn't processing BE on LE architecture slow things down?
22:01 < cellvia> browserify isnt to run node its just to make it so you can use node packages
22:01 < cellvia> and they wont break
22:02 < cellvia> on the clientside
22:02 < chridal> ah, got it.
22:02 < CoverSlide> possibly, but noone's complained about the PNG spec so far
22:02 < cellvia> i assume then it would work for phonega
22:02 < CoverSlide> at least to warrant a change
22:02 < chridal> but if you don't want to be using node on a mobile client, why would you want to use npm?
22:02 < CoverSlide> i guess since the "n" means "network"
22:03 < cellvia> theres some node packages that are useful client side, like streaming for example
22:03 < cellvia> node packages / functions
22:04 < chridal> I see
22:04 < cellvia> you could stream touch events
22:04 < cellvia> to a websocket
22:04 < cellvia> or something
22:04 < cellvia> i dunno
22:05 < cellvia> the beauty of node :)
22:05 < cellvia> you write it yourself so you can get really creative!
22:05 < trevnorris> ah, ok. freakin endianness
22:05 < blazes816> ah, the beauty of ASM ;)
22:05 < CoverSlide> also, maybe if these were graphics people, they might have run on SGI machines, which are big-endian as well
22:06 < CoverSlide> on the PNG committee
22:08 < CoverSlide> or maybe the khronos guys were writing a PNG parser for testing out the DataView spec, like I'm doing right now :p
22:10 < TonkaTruck> Is it common for a tcp server to set timeouts during handshakes?  I've implemented something more like hot potato than a handshake.  In my protocol, I'm intending for the server to respond with a unique token for the socket session, the client then responds with their session id and a signed request via hmac-sha1.  How else would this work?  If you don't send your sid and signed request back within 10 seconds, you're disconnected.  Is 
22:11 < TonkaTruck> I should probably read SMTP spec or something.
22:21 < fruitFly> whar does response.end(withSomethingHere) do?
22:21 < fruitFly> what*
22:22 < isaacbw> http://nodejs.org/api/http.html#http_response_end_data_encoding
22:23 < fruitFly> isaacbw: Thanks!
22:29 < fruitFly> when declaring an anonymous function like function(exists) {........... what is exists?
22:29 < isaacbw> a parameter
22:31 < cellvia> is that a metaphysical question
22:31 < isaacbw> sounds like one
22:31 < fruitFly> it looks like this:
22:31 < fruitFly> fs.exists(absPath, function(exists) { if (exists) {
22:31 < isaacbw> do you understand the concept of callbacks
22:31 < cellvia> oh dear
22:32 < fruitFly> so fx.exists takes more than just the file path parameter?
22:32 < isaacbw> it takes a file path and a function as parameters
22:33 < isaacbw> and it calls the function, passing it a value for exists
22:34 < isaacbw> https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Functions
22:35 < isaacbw> functions in javascript are closures that are passed around like any other variable
22:35 < fruitFly> isaacbw: I understand that its an anon func and takes a parameter, but I dn't see where any anything is being passed in that parameter
22:35 < isaacbw> what do you mean
22:35 < cellvia> fs.exists the method passes a parameter
22:35 < isaacbw> read the link
22:35 < cellvia> into the anon function
22:35 < fruitFly> 1 sec... it is dark uncomfortab;e and I'm hungry :(
22:35 < isaacbw> I don't think you understand
22:35 < cellvia> lol
22:35 < segomos> that sounds like you need to read about callbacks
22:37 < cellvia> and turn a light on, get a better chair, and eat some food
22:37 < cellvia> you have some reading ahead of you
22:38 < segomos> i'm gonna go sit on the most uncomfortable seat, bicycles!!?!?!!!?!111one!?!!?!!
22:39 < isaacbw> I bet if you marketed it as good for your back, you could sell people bicycle seat desk 'chairs'
22:39 < isaacbw> go for the paleo crowd
22:39 < isaacbw> ooh, also make it so it's like a unipod so they have to balance
22:39 < isaacbw> "exercise your back and legs while you sit!"
22:42 < Raynos> isaacs: https://gist.github.com/8648028fa5226fc37860
22:42 < Raynos> isaacsbw: are you isaacs?
22:42 < Raynos> if npm is broken how do I unbreak it?
22:43 < isaacbw> nope
22:43 < fruitFly> isaacbw:  Actually the new craze is standing desks; I've read the put less strain on the back. Some even come equipped with a treadmill on the bottom
22:43 < isaacbw> I have weak knees. That would be too much for me
22:44 < isaacbw> those bouncy ball chairs are neat though
22:46 < isaacbw> http://g-ecx.images-amazon.com/images/G/01/g/stores/sport-goods/B0007VB4NE-sitting.jpg
22:46 < isaacbw> woah, I just got a crazy google images interface
22:46 < isaacbw> is anyone else getting it?
22:49 < oren_> anyone having trouble running ./configure for the latest version?
22:49 < `3rdEden> if node is designed for performance then why is every constructor using util.inherits instead of __proto__ ? 
22:53 < eydaimon> IN the following code, how can I make a function to access blah? What I've done here does not work: a = function() { var blah = 3;  this.foo = 9; }; a.prototype.f = function() { return blah; }  (http://pastie.org/5722239)
22:55 < wltsmrz> this.blah = 3 / return this.blah
22:59 < TonkaTruck> http://jsperf.com/object-literal-v-array Has anyone seen any variations on this?
23:00 < TonkaTruck> When an object has 100k keys, it beats searching through an array of equal size.  But at 1m keys, the array wins by a longshot?
23:04 < fruitFly> what exactly is characteristic of a callback function? Is it just a function within a function? What makes node know to return to the event loop instead of getting hung up on a task?
23:05 < isaacbw> a callback function isn't special
23:06 < isaacbw> it's just a function that will be 'called back' by something
23:06 < fruitFly> "called backed"?
23:07 < superjoe> is there an async library where you supply a dependency graph and it resolves it?
23:07 < superjoe> coalan/async doesn't do that, does it?
23:07 < isaacbw> as in sorts it topographically?
23:07 < superjoe> nvm, found it: https://github.com/caolan/async#auto
23:08 < owen1> i have both unit tests(mocked dependencies) and integration tests(hitting my db). is there a convension for running them? for example 'npm test' (to run all), 'make test-unit' and 'make test-integration' ?
23:09 < isaacbw> make is ugly
23:09 < isaacbw> >:(
23:09 < min|dvir|us> What's the modern replacement for make?
23:09 < isaacbw> I like scons
23:10 < dawolf> fruitFly: if you pass a function A to another function B as argument and B invokes A, it's known as "callback"
23:11 < fruitFly> dawolf: thank you. So will node call A, then B and then enter the event loop and eventually process B when it is done
23:12 < dawolf> it's up to B what and when to call A
23:12 < isaacbw> it's not that magic
23:12 < isaacbw> B is just a variable passed to A
23:12 < isaacbw> er, A is just a variable passed to B
23:12 < isaacbw> and B might choose to call A if it wants
23:13 < dawolf> yeah, i've got those two switched to cause confusion :)
23:13 < isaacbw> A doesn't get called by virtue of being defined
23:13 < fruitFly> alright, I'm just trying to get an idea when node is gonna stop the event loop versus when it's gonna call a function and then return to the event loop
23:14 < medice> couchdb feels quite a bit more restricted than mongo
23:14 < isaacbw> mongo 4 lyfe
23:15 < s5fs> mangos for lyfe
23:15 <@Nexxy> I prefer papaya
23:16 < fruitFly> papaya is veery good
23:16 <@Nexxy> you would say that
23:16 < fruitFly> it is a very good staple fruit, relatively high in calcium and 89% water
23:16 < medice> you're driving me nuts, i'm going banana
23:17 < s5fs> npm install banana
23:17 < fruitFly> banana is only 75% water
23:17 < CoverSlide> I prefer persimmon
23:17 < s5fs> is the remaining 25% banana?
23:17 < fruitFly> I loooove hychia persimmon.. soo good... get them looking almost rotten and then they're sooo sweeet
23:18 < fruitFly> remaining 25?... it's the fiber and sugar
23:18 < CoverSlide> What about watermelon?
23:18 < s5fs> oh wth, there's no banana in this banana? man i feel jipped
23:18 < medice> watermelon is 50% water
23:18 < fruitFly> watermelon is 91%.. good in iron
23:18 < TonkaTruck> http://jsperf.com/object-literal-v-array This is a quick read.  Is this test flawed?  The object and the array tie at about 500k keys.  After which the object becomes exponentially slower.  I don't know anything about js.  iterating through an array of 1m items and comparing a key value within is faster than object[key] in an object with 1m keys?
23:18 < fruitFly> medice... no... a lot more water than that.. 90%
23:18 < medice> water ... melon
23:18 < s5fs> fruitFly: i am impressed with your knowledge of fruit
23:19 < fruitFly> lol
23:19 < fruitFly> Thanks lol, I am a fruitarian. But now I want to learn node
23:19 <@Nexxy> fruitFly, what do you know about chinese gooseberries?
23:19 < CoverSlide> lemons have lots of water
23:19 < fruitFly> aka kiwi.. high in vit E
23:19 < CoverSlide> and tomatoes
23:20 < medice> what's your stance on the pineapple on pizza issue
23:20 < CoverSlide> if you cook a pineapple, it removes some water
23:20 < medice> we need an expert fruitarian's opinion
23:20 < s5fs> fruitFly: how many years of experience do you have with apples? pears? where do you see yourself in 5 years? tell us about a time when you had one piece of fruit, thought it was another, and somehow saved the day.
23:21 < medice> CoverSlide: that's not really an issue
23:21 < fruitFly> i think pineapple on pizza is fine, anything for the average person to up their fruit consumption, even though I find many conventional pineapples too acidic
23:21 < medice> that they can be
23:21 < medice> i once put a pineapple on my tongue and thought it was going to go straight through
23:22 < s5fs> medice: helps to cut the skin off first
23:22 < medice> it puts lotion on it first?
23:22 < fruitFly> I am not the biggest fan of cold fruit like apples pears etc. not as mineral dense and more tropical dense fruits like papaya, mangoes etc... and roportionally waaay more fiber too. Some pears are much better than apples though, much more juicy,  like prickly pears for example
23:23 < isaacbw> I love juicy pears
23:23 < isaacbw> drip down your chin and ruin your shirt for the day pears
23:23 < fruitFly> s5fs: Even after cutting the skin too much pineapple cans ting the tongue. However if one gets a good variety grown under good condition like in SEA for example... the pineapples can be uber sweet, almost no trace of acidity
23:23 < isaacbw> most pears are hard and gross though
23:24 < CoverSlide> i like asian pears
23:25 < s5fs> isaacbw: indeed, my grandparents had pear trees (bartlett maybe? was green) and they were always hard as rocks, but still fun to eat.
23:25 < fruitFly> apples not as mineral dense as staple tropical fruits.. I misspelled above
23:26 < CoverSlide> I do like durian too
23:26 <@Nexxy> wow
23:26 <@Nexxy> no
23:26 < medice> speaking of foods, cucumbers are so terrible for everything
23:26 < fruitFly> apples r like a snack for fruitarians, can be used culinarily
23:26 < fruitFly> I LOVE DURIAN
23:26 <@Nexxy> disgusting
23:26 < isaacbw> I love cucumbers :(
23:26 < fruitFly> got some at the place right now
23:26 < isaacbw> on salads :(
23:26 < CoverSlide> and carambola
23:26 < s5fs> fruitFly: i know nothing about fruititarianism, does that mean that you derive a substantial portion of your calories from fruit?
23:27 < isaacbw> the fructose isn't so good if you're trying to lose weight
23:27 < fruitFly> s5fs: Yes. I only eat fruit and vegetables; mostly fruit.
23:27 < fruitFly> But I also eat A LOT
23:27 < CoverSlide> my favorite things to eat have heartbeats
23:28 < medice> 'fast' sugars are pretty terrible to health in the long run
23:28 < s5fs> fruitFly: fascinating. how do you get other macros, like protein? i always understood that too much fruit was a bad thing (mainly the high amts of fruit sugar)
23:28 < isaacbw> I hate pigs and I think they're disgusting foul beasts and that's why I like to have them inside me
23:29 < medice> getting rid of pigs on pork leg at a time
23:29 < medice> one*
23:29 < CoverSlide> i like me some cow
23:29 <@isaacs> isaacbw: I feel like this is becoming a meme.
23:30 <@isaacs> isaacbw: are you isaacs?
23:30 -!- Topic for #Node.js: Node.js - free as in hugs - http://logs.nodejs.org/node.js/
23:30 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Tue Jan  8 04:56:21 2013]
23:30 < dminus> you took too much, too much
23:30 <@Nexxy> hahaha
23:30 -!- isaacs changed the topic of #Node.js to: Node.js - free as in hugs - http://logs.nodejs.org/node.js/ - isaacbw is not isaacs.  isaacbw is isaacbw.  isaacs is isaacs.
23:31 <@isaacs> isaacbw: btw, if i ever meet you in person and you look exactly like me, but in black and white, i'm gonna be really fucking freaked out.
23:31 < fruitFly> isaacbw: Fructose making one fat is the most common misconception out there. The body runs predominantly on glucose and fructose is the most efficiently metabolized substance to glucose. Excess carbohydrate are burnt off as body heat in the process of thermogenesis 
23:31 <@isaacs> fruitFly: what are you selling?
23:31 < fruitFly> isaacs: nothing
23:32 < CoverSlide> nuts are a good source of protein
23:32 < CoverSlide> and quinoa
23:32 < fruitFly> it's the low carb gurus that try to sell you their b12, protein and omega supplements. I just promote whole plant foods... no profits there mate
23:32 <@isaacs> fruitFly: oh, sorry, the random metabolism post looked a bit like diet-peddling bot
23:32 < medice> nuts dont tend to be too healthy imho
23:32 < medice> well, everything in moderation
23:33  * medice reminisces the huge bags of nuts he has eaten in one go
23:33 < CoverSlide> i like vegetables, but only the ones injected with hormones and steroidds
23:33 < s5fs> man, i used to eat boatloads of nuts, esp pistachio, love those guys
23:33 <@isaacs> Raynos: check out the npm src
23:34 <@isaacs> Raynos: and then `make install` in it
23:34 <@isaacs> Raynos: or just install node again
23:34 < fruitFly> We are growing the most brain, bone and muscle wise as infants, then we receive our protein from mothers milk which is about 5% protein. Fruits and vegetables on average have about 4-7% protein, so assuming you eat enough quantity of fruits and vegetables (no nuts required) you will meet your protein needs
23:34 < fruitFly> brain, bone and muscles wise proportional to our body mass*
23:37 < s5fs> fruitFly: well huh! i dunno, i'd be willing to give an all-fruit-some-nuts diet a whirl, sounds easy
23:37 < CoverSlide> MILK??
23:37 < CoverSlide> POISON!!!
23:37 < Iszak> If the __proto__ property is non-standard why does node.js support it? why not drop support for it.
23:37 < fruitFly> breast milk*
23:37 < CoverSlide> EVIL DAIRY!!!
23:38 < CoverSlide> Iszak: it's a v8 thing
23:38 < CoverSlide> Iszak: go ask v8
23:38 < Iszak> CoverSlide I imagine it's to keep interoperability for legacy JS but we can do better!
23:39 < CoverSlide> besides, I think all modern js implementations use __proto__
23:39 < Iszak> instead of getPrototypeOf?
23:39 < Iszak> They are using a non-standard method, we should abolish it.
23:39 < CoverSlide> It's implemented at a far lower level than node, and I'm sure it's not easy to take it out
23:39 < CoverSlide> for example, Object.create uses __proto__ in node
23:39 < CoverSlide> s/node/v8
23:40 < Iszak> Are you sure?
23:40 < samholmes> Anyone know about cache handling when I make updates to my site?
23:40 < CoverSlide> check the source yourself
23:40 < CoverSlide> Iszak: https://github.com/v8/v8/blob/master/src/v8natives.js#L1072
23:41 < CoverSlide> the best thing is to not have your code depend on __proto__
23:41 < Iszak> CoverSlide that's probably for interoperability. 
23:41 < CoverSlide> interoperability? that file is internal to the engine itself
23:42 < CoverSlide> it doesn't need to interoperate with anything
23:42 < CoverSlide> but they still choose to
23:42 < MI6> joyent/node: isaacs master * 539bf1d : console: Support formatting options in trace()  Fix #4589 - http://git.io/rgReDw
23:42 < Iszak> CoverSlide they need to work with legacy code, they're not just going to break shit by removing it.
23:42 < CoverSlide> hey, now look at you, we've seemed to switch sides on this
23:42 < s5fs> any recommendations for a simple unit testing framework?
23:43 < Iszak> CoverSlide I know why they keep __proto__ and for a browser perspective and legacy code it's fine. But node.js isn't burdened with that.
23:43 < CoverSlide> node.sj is burdened by v8
23:43 < Iszak> sure, but they could fork it.
23:43 < CoverSlide> just for the purpose of __proto__ ? like that's worth the effort
23:44 < CoverSlide> i think they do introduce some patches here and there,
23:44 <@TooTallNate> Iszak: node uses vanilla, untouched v8
23:44 < Iszak> TooTallNate I know, hence the /could/.
23:44 < CoverSlide> but i think it's probably a much better route to just go with the engine, let google improve it how they always have
23:45 < Iszak> unless it makes performance decisions for the worse, I heard it'll be forked if that's the case.
23:45 < CoverSlide> let their team of a bajillion developers work on maintaining it instead of the 6 node developers
23:46 < min|dvir|us> If only it was that easy.
23:46 <@TooTallNate> i don't think anyone on the core team has any desire to fork v8
23:46 < min|dvir|us> I wish Google would take over all of my projects.
23:46 <@TooTallNate> more trouble than it's worth
23:46 < CoverSlide> exactly
23:46 < Iszak> TooTallNate I was speaking to isaacs on an occasion where I asked about if v8 went down a performance route for the worse whether it would be forked and I was told it would.
23:46 < min|dvir|us> Plus, why fork V8?
23:47 <@TooTallNate> Iszak: but that's a big *if*, not much point in fantasizing about it
23:47 < Iszak> What if v8 put in a switch to disable all the non-standard stuff? would node.js enable it by default?
23:47 < Iszak> It just seems stupid to inherit all this legacy browser non-standard bullshit.
23:48 < CoverSlide> >> "probably not".blink()
23:48 < purr> CoverSlide: (string) '<blink>probably not</blink>'
23:48 < min|dvir|us> That's the best part of JS.
23:48 < Iszak> yeah, sure is.
23:48 < min|dvir|us> >> 'asdf'.marquee()
23:48 < purr> min|dvir|us: TypeError: Object asdf has no method 'marquee'
23:48 < Iszak> I think>> "test".bold()
23:48 < min|dvir|us> >> 'test'.bold()
23:48 < purr> min|dvir|us: (string) '<b>test</b>'
23:49 < Iszak> as much I love being able to make my text blink… rather useless in node.js, marginally increased memory footprint and I'm sure there's some level of performance degradation too.
23:50 < Iszak> On the other hand, I agree it's not really node.js responsibility to do that, would be nice if v8 had a switch to disable all non-standard stuff, but in much the same would probably incur performance penalty.
23:50 < CoverSlide> >> "Here's why that's there".link('https://github.com/v8/v8/blob/master/src/string.js#L854')
23:50 < purr> CoverSlide: (string) '<a href="https://github.com/v8/v8/blob/master/src/string.js#L854">Here\'s why that\'s there</a>'
23:51 < Iszak> >> "test".quote()
23:51 < purr> Iszak: TypeError: Object test has no method 'quote'
23:51 < Iszak> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/quote should be there hmm
23:51 < CoverSlide> unfortunately, v8 breaks standards where it's more performant to do so, so long as there aren't enough cases where it causes an issue
23:52 < CoverSlide> in fact, they have a "DeliberateSpecViolation" tag for spec violation issues, 
23:52 < Iszak> CoverSlide I wouldn't imagine they do it for performance reasons, surely.
23:52 < Iszak> If anything, it's for backwards compatibility.
23:53 < CoverSlide> they have done it for performance reasons
23:53 < Iszak> CoverSlide please elaborate.
23:53 < owen1> if i change the directory of my tests, i have to manualy change all my require('../foo.js') etc.. is there a smarter way to deal with that?
23:54 < CoverSlide> I'd have to find it
23:54 < Iszak> CoverSlide if you can and have the time can you please, because at the moment I see the opposite.
23:57 < Iszak> I tried running with the flags --harmony and --use-strict but it doesn't seem to care if I use non-standard methods
--- Log closed Sat Jan 19 00:00:49 2013
