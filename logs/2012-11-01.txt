--- Log opened Thu Nov 01 00:00:13 2012
--- Day changed Thu Nov 01 2012
00:00 -!- mode/#node.js [+o piscisaureus_] by ChanServ
00:01 <@isaacs> Nexxy: i just added the bug emoji
00:01 <@Nexxy> oh
00:01 <@isaacs> Nexxy: it was mbalho who set it originally
00:01 <@Nexxy> lol
00:01 <@Nexxy> go figure
00:01 < EhevuTov> ah, it resolves on my end in Hebrew characters
00:01 <@Nexxy> nodes js you so crazy
00:02 < mscdex> node.js rules!
00:02 < EhevuTov> haha
00:02 < EhevuTov> cray cray
00:02 <@Nexxy> another fun fact: the . in node.js is pronounced with an "s" sound
00:02 < EhevuTov> Nexxy protip
00:03 < EhevuTov> Nexxy, do you know why Max says node point javascript?
00:03 <@Nexxy> political correctness
00:03 <@isaacs> EhevuTov: because that's the correct pronunciation
00:03 <@isaacs> js stands for javascript, and anyone who's ever taken a math class knows that . is a point
00:03 <@Nexxy> or an "s"
00:03 < EhevuTov> points don't exist
00:04 < EhevuTov> node js
00:05 < Cheery> https://github.com/cheery/node-video
00:05 < Cheery> Now I think I could say YEAH!
00:06 < EhevuTov> Cheery, cool. Why do you use node-waf?
00:06 < EhevuTov> I ask because I'm currently playing around with cross-platform build systems
00:06 < Cheery> EhevuTov: because I haven't yet upgraded my toolchain or sanitized the build scripts
00:07 < Cheery> EhevuTov: I'm about to do that during this week.
00:07 < Cheery> EhevuTov: you may help me if you like. The structure is simple yet you might like to change it still.
00:08 < wltsmrz> "This software depends on node.js and can be compiled directly on the target machine due to it's small size."
00:08 < Cheery> We probably need to rename some things, and fix couple bugs I may have introduced.
00:08 < EhevuTov> Cheery, ok, thanks. I'm running your tests now
00:08 < wltsmrz> Should be "its"
00:08 < Cheery> wltsmrz: heh. yeah.
00:09 < EhevuTov> wltsmrz, oh man. My elementary teacher was wrong.
00:09 < willhig> EhevuTov, I don't think it's the database ‚Äì¬†I just tried a different one and it's still timing out.
00:09 < Benvie> vm> [...new String('test')]
00:09 < continuum> Benvie: ['t', 'e', 's', 't', length: 4]
00:09 < Cheery> EhevuTov: you have raspberry pi?
00:09 < willhig> So weirded out‚Ä¶
00:10 < wltsmrz> Indeed EhevuTov 
00:10 -!- Topic for #node.js: ·¥é·¥ë·¥Ö·¥á»∑ Ç - the official evented I/O abstraction of honey b·¥ë·¥ë b·¥ë·¥ë üêù  - http://logs.nodejs.org/node.js/latest
00:10 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Wed Oct 31 01:15:35 2012]
00:11 -!- isaacs changed the topic of #Node.js to: ·¥é·¥ë·¥Ö·¥á»∑ Ç - the official platform of node point javascript - http://logs.nodejs.org/node.js/latest
00:11 < Cheery> wltsmrz: I'll fix that typing error during the next update. getting to sleep soon.
00:11 < EhevuTov> Cheery, bah, that's why I'm getting errors :-)
00:12 < Cheery> EhevuTov: yeah. it should be portable. but I think it might be good to stay in raspi at least this week.
00:13 < Cheery> you'll need c library implementation of libvideo and libcontext, that fit your system
00:13 < MI6> joyent/node: isaacs master * a12c42c : test: Use setImmediate for recursive deferral  This should have been with (+1 more commits) - http://git.io/a4ykxw
00:14 < EhevuTov_> Cheery, yeah I don't have cross-compiles for those
00:14 < Cheery> also you'll possibly need to wrap the GLESv2 -library so you can put in GL instead.
00:14 < EhevuTov_> one day maybe. I'd like to get FreeBSD on a Raspberry pi if that's possible
00:15 < Cheery> k.
00:15 < Cheery> I'm happy if it'll get enough traction that people will port it properly to other platforms .)
00:16 < Cheery> the particular key feature will be the global image -things.
00:16 < Lorentz> EhevuTov_: afaik rpi source is entirely open now?
00:16 < Cheery> so you can do compositing managers.
00:16 < Lorentz> including graphics chip side of things
00:16 < Lorentz> not that long to go then
00:16 < EhevuTov_> Lorentz, I'm not sure. that's cool
00:17 <@Nexxy> inb4 wire wrapped rpis
00:17 < Cheery> I'll demo it at some point once I've tested out that most things work ^^
00:17 < qmx> howdy, what do you guys recommend for testing?
00:17 < Cheery> for the demo I'll probably provide other, rather cool libraries.
00:17 < qmx> not the fanciest, the more commonly used stuff
00:17 <@Nexxy> qmx, mocha or node-tap
00:18  * qmx is googling
00:18 < EhevuTov_> qmx, I use node-tap for testing my modules and I really like it
00:18 < qmx> ah, mocha is rspec-like
00:18 < wltsmrz> I use either mocha or vows.
00:19 <@konobi> tap or nodeunit here
00:20 < qmx> wltsmrz: vows is the cucumber-like one right?
00:21 < mscdex> node-astaire
00:21 < Cheery> could you propose demos you'd like to see on raspi?
00:21 <@konobi> Cheery: screen in screen
00:22 < Cheery> konobi: what is screen in screen exactly?
00:22 < Cheery> oh.
00:23 < raj> in doing `npm install -g testacular`, I get a series of errors, beginning with `error: not found: testacular@''`
00:23 < Cheery> but it can be done with hacks >:)
00:23 <@konobi> that would be pretty sweet for doing conference streaming
00:24 < Cheery> konobi: http://3.bp.blogspot.com/_cD4CWtRGL6U/TMreAxbP8DI/AAAAAAAABGs/gUn1A78FeAU/s1600/ScreenInScreen.jpg
00:24 < Cheery> this is what you mean?
00:24 <@konobi> Cheery: no... 2 secs
00:26 <@konobi> Cheery: 2 video feeds, with one of them as a small video in the corner
00:26 <@konobi> Cheery: http://img.youtube.com/vi/P05Q6HeoSek/0.jpg
00:26 < Cheery> I get it! :)
00:27 < Cheery> I can probably write an extension which lets you do stuff with videos.
00:27 < Cheery> raspi should support it any way
00:29 <@konobi> Cheery: yeah, would be interesting to see it all run on a tiny platform that you could strap to a video camera
00:29 < Cheery> it's something I didn't anticipate, so awesome idea!
00:30 < Cheery> I'll add it into feature requests straight away
00:30 <@konobi> of course, audio sync as always, will be fun =0)
00:31 < Cheery> yeah. might be tricky but challenge accepted
00:33 < Cheery> https://github.com/cheery/node-video/issues/1
00:34 <@konobi> sweet
00:35 < Cheery> there's some raspi stuff for that already. so it might end up there rather early.
00:35 < Cheery> but I wont concentrate on it yet this week.
00:36 <@konobi> not to worry, not as if i have a practical application as of yet
00:36 <@konobi> =0)
00:36  * Cheery wants to get existing stuff tested before it. ;)
00:37 <@konobi> Cheery: did you get your mpeg2 licence stuff all done?
00:37 < Cheery> can you give me a context now? :P I don't understand
00:38 <@konobi> Cheery: the raspi didn't have mpeg2 licence, so that part of the GPU was locked, but you can buy one now for $2 or so
00:39 < Cheery> ah. I didn't get that
00:39 < Cheery> there should be couple free formats there though.
00:40 < MI6> joyent/node: Ben Noordhuis master * 2f5fa08 : build: add --systemtap-includes configure switch (+2 more commits) - http://git.io/jSmsrA
00:40 <@konobi> Cheery: this is for hardware decoding
00:40 <@konobi> decoding/encoding
00:41 < Cheery> oh.
00:41 < Cheery> well it's not problem to get one any time
00:42 <@konobi> Cheery: http://www.raspberrypi.org/archives/1890
00:45 < janmower> thanks for all the help with that bnoordhuis :)
00:45 < bnoordhuis> janmower: and thank you for the patch, i'm really happy with it :)
00:46 < janmower> bnoordhuis: yea thanks i'm very happy as well
00:46 < christopherkette> I'm using redis as a session store from a node.js app. How can I query redid-server from redis-cli and verify session objects for different users?
00:47 < wltsmrz> Using connect-redis?
00:47 < wltsmrz> (As a session store)
00:49 < wltsmrz> By default connect-redis keys are prefixed with 'sess:'
00:49 < wltsmrz> https://github.com/visionmedia/connect-redis/blob/master/lib/connect-redis.js#L49-51
00:49 < wltsmrz> And the redis-cli command you are looking for is 'get'
00:49 < rauchg> wish redis had databases 
00:49 < rauchg> (again)
00:50 < christopherkette> thanks all!
00:50 < christopherkette> if I were using the command line redis-cli can I get to the seas items?
00:55 < sashman> is there anything where i can get docs for user registration and user models
00:56 <@konobi> bnoordhuis: why are there 2 different probe declarations?
00:56 < shanse> that seems like a rather vague request, sashman
00:56 < bnoordhuis> konobi: que?
00:57 <@konobi> bnoordhuis: #ifdef HAVE_SYSTEMTAP
00:58 <@konobi> surely the probes should be the same regardless of efw, dtrace or systemtap
00:58 < bnoordhuis> konobi: ideally yes, we'll probably iron it out in the future
00:58 < bnoordhuis> for now i'm happy we have systemtap support :)
00:58 < EhevuTov> Node.js on Chrome Apps: http://www.youtube.com/watch?v=gkb_x9ZN0Vo
01:00 <@konobi> bnoordhuis: mmm... i'd say the same, assuming it's not regressing the dtrace probes that are already existing
01:01 <@konobi> (since it doesn't look like a direct 1-1 mapping)
01:02 < bnoordhuis> konobi: dtrace support should be fine, that wasn't really changed. systemtap supports probes with args but it's a little finicky to get to work
01:04 <@konobi> bnoordhuis: might be worth pining brendang about
01:04 <@konobi> *pinging
01:04 < bnoordhuis> konobi: why?
01:05 <@konobi> bnoordhuis: he can probably wrangle that to work as wanted
01:05 <@konobi> janmower: nice work btw!
01:06 < bnoordhuis> konobi: brendan has experience with systemtap?
01:06 <@konobi> yup
01:06 < Jakey> so when will node.js ported to webkit
01:06 < Jakey> be ported
01:06 <@konobi> Jakey: browserify
01:06 < janmower> konobi: thanks!  ben and frank did the hard stuff
01:07 <@konobi> bnoordhuis: you can look at his blog for his experience with systemtap =0)
01:07 < sashman> whats all about with this mongodb y not pg
01:09 < EhevuTov> sashman, you need to discover how document oriented databases are different than relational databases
01:09 < sashman> mhh so the experience is nicer with mongodbs?
01:10 < Jakey> konobi: ?
01:10 < bnoordhuis> konobi: hah, now that you mention it - i remember the flame graphs post
01:10 < EhevuTov> sashman, that's relative. It's relative to your problem set. relational db's are good for some cases
01:10 < sashman> and whats the part of redis, can i use redis for the complete user data storages?
01:11 < sashman> sry its a little confusing at the beginning to get them play nice,... different auth, than two db's 
01:11 <@konobi> Jakey: check npm for "browserify"
01:11 < EhevuTov> sashman, it depends on your user data model. If you have to to joins, then use a relational database. If you're not joining tables to get a record, then use something like redis or mongo or couchdb
01:12 < sashman> ah ok 
01:12 <@konobi> or use both
01:13 < sashman> i like to use both 
01:13 < sashman> but where should user data model go, pg or redis?
01:13 < jwulf> what's a good solution for routing with conditions and workflows in a single-page app?
01:13 < EhevuTov> sashman, a lot of people use redis for session storing and then use another database for deeper/bigger data
01:13 < sashman> ok that made the answar thu
01:14 < EhevuTov> jwulf, are you finding limitations with what express provides with routes?
01:15 < jwulf> EhevuTov, i'm using meteor atm
01:15 < EhevuTov> jwulf, oh, I don't have any insight into that
01:15 <@Nexxy> jwulf, coding demos?
01:15 < jwulf> Nexxy, I've started with this:
01:15 < jwulf> https://github.com/bolora/multi-page-config
01:15 < jwulf> it uses an array of templates
01:16 <@Nexxy> I've been working on a single page app
01:16 < jwulf> and the url path as the index to the array
01:16 <@Nexxy> but I have no clue about meteor
01:16 < jwulf> i want to handle things like state-dependency
01:16 < jwulf> so if the app hasn't been configured, then another page is shown
01:16 < jwulf> a wizard
01:17 < shanse> -~`*magic*¬¥~-
01:18 < jwulf> lol
01:18 <@Nexxy> just use pushstate
01:18 < jwulf> pushstate?
01:19 <@Nexxy> https://developer.mozilla.org/en-US/docs/DOM/Manipulating_the_browser_history
01:19 <@Nexxy> you can just stack state objects
01:22 < jwulf> ok, i get that
01:22 < jwulf> i'm not sure where to put my workflow logic though
01:22 < jwulf> it's pretty straight forward if a user requests a url
01:23 < jwulf> and i use the url path as an index into an array
01:23 < jwulf> but how / where do i encode things like rules around workflow?
01:23 < jwulf> like - if not configured, start this wizard
01:23 < EhevuTov> jwulf, I've been tinkering with a single-page app using express, and I've been using the REST technique of the HTTP requests. So I have an app.get('/'), app.post('/') ...
01:24 < EhevuTov> ?and express let's me overload the routes with middleware, so that's where I'd put any flowchecks, I guess
01:25 < EhevuTov> I currently just do an authentication state check
01:25 < EhevuTov> but I'd imagine one could do other checks just as easily and I bet Meteor has something like that
01:26 <@konobi> also what you mean by "configured"
01:27 < jwulf> konobi, when the app first starts, it needs the user to do some configuration
01:28 <@konobi> jwulf: for client side or backend services or both?
01:28 < jwulf> so they see a screen "hey, we need to go through some configuration steps...."
01:28 < jwulf> user name, server url, that kind of thing
01:28 <@konobi> so client specific
01:28 < jwulf> whether they want expert or hand-held mode
01:28 < jwulf> yes
01:28 <@konobi> localstorage
01:31 < nlf> man i'm finding a lot of silly tricks to make buffers faster
01:33 < nlf> wrote a function to read a string from a buffer that's a bit over twice as fast as buf.slice(start, end).toString()
01:33 <@konobi> nlf: do share
01:34 < nlf> https://gist.github.com/3991059
01:35 <@konobi> not bad for ascii
01:35 < nlf> works for unicode too
01:35 < nlf> lines 8-16 are to handle unicode
01:36 <@konobi> oh huh... didn't realize fromCharCode dealt with unicode too
01:36 < nlf> yeah, it seems to be working just fine for me
01:36 < nlf> it's quick too
01:37 <@konobi> nlf: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode
01:37 <@konobi> there's a "Getting it to work with higher values" section to note
01:38 < nlf> nice, good to know
01:38 < nlf> thanks
01:40 <@konobi> nlf: might be a nice core patch
01:40 < nlf> stuff like reading/writing 32 bit integers is faster to bit shift and read/write the values directly with array style indexing than it is to use .read/writeUInt32 also
01:43 <@konobi> nlf: yeah, at that point i break out ctypes
01:46 < nlf> i only need a pretty small subset, so i'm just doing it manually for now
01:46 < nlf> 8 bit ints, 32 bit ints, strings, and varints from protobuf land
01:47 <@konobi> nlf: ctypes might be worth a look
01:49 < nlf> yeah, i'm reading it now
01:51 < daleharvey> anyone using node + qunit?
01:51 < jwulf> nexxy, thanks for the history.pushState tip
01:51 < jwulf> using that now
01:52 < jwulf> still looking for an architectural pattern for my app workflow
01:52 < nlf> huh, wouldn't have thought of >>> 0 to prevent wrapping to negatives
01:52 <@konobi> jwulf: look at localstorage?
01:52 < daleharvey> I want to receive the summary results from qunit as a string, not have them printed to stdio
01:52 < jwulf> meteor has transparent mongodb collection on the client
01:53 < jwulf> but it's the routing mechanism that i'm struggling with
01:53 < jwulf> at the moment the url the user requests is used as the index in an arrays of templates
01:54 < shanse> pretty sure meteor has a dedicated irc channel here on freenode
01:54 < jwulf> as soon as I introduce "but if the app.isNotConfigured, send them to this wizard url" i'm breaking that simple pattern
01:54 < jwulf> yeah, with no-one awake in it.....
01:55 <@konobi> window.onload?
01:57 < mprem> new to js/node, can't figure out how to handle errors, would apprecaite help...pseudo code at http://pastebin.com/zSpcJAfF
01:58 < mprem> Cant figure out how do I handle error at once place?
01:59 < wltsmrz> That module seems to disobey convention. Ordinarily the first argument to your callback function would be an Error or null. 
01:59 < wltsmrz> Have you seen 'request' module? I think that would make your life much easier.
02:00 < wltsmrz> https://github.com/mikeal/request
02:00 <@isaacs> mprem: domains can let you do that
02:00 <@isaacs> mprem: (handle all errors at once place)
02:00 < jwulf> mprem, http://pastebin.com/W4ytVW1U
02:00 < jwulf> that's how i'd do it
02:00 <@isaacs> mprem: http://nodejs.org/docs/latest/api/domain.html
02:01 < mprem> :-) thx everyone, going thru all that
02:01 < jwulf>  #node.js - do all the homework!
02:02 <@konobi> heh
02:04 < mprem> jwulf: in your code, how do I handle error happening in rest.get, wouldn't I need a outer try/catch?
02:05 < jesusabdullah> so I was reading a little bit about wsgi the other day
02:05 < jwulf> you'd assume that it has error handling inside it
02:05 < jesusabdullah> I just realized, wsgi middlewares and connect middlewares aren't all that similar despite the probably influence the former had on the latter
02:05 < jwulf> well, i would anyway
02:05 < jesusabdullah> really, shim streams are closer I think
02:06 < nlf> the only time i use try/catch is when i want to parse json and not crash if some yahoo gives me crap
02:06 < jesusabdullah> I use it for collecting sync errors to pass up a callback chain
02:06 < jesusabdullah> } catch (err) { return cb(err); }
02:07 < jesusabdullah> which is a good idea because you want all your errors to bubble up in exactly the same way (imo)
02:07 < jesusabdullah> errors need to be collected and passed "up the chain" until you find a good place to handle it, or until it's time to crash the machine
02:07 < jesusabdullah> otherwise debugging is pretty hellaceous
02:09 < mprem> ok, I am lost on this, am noob , so please go easy
02:09 < mprem> , 'IF' there is any error at rest.get level, I still need to show data from localdb, if I don't have that try/catch, I don;t know how to handle this case? this is how I would do in non-async programming, can't figure out how to do it node
02:10 < mprem> jwulf: so I am assume maybe rest ( or could be any other module also) does not handle all errors
02:10 < jwulf> it depends what you mean by errors
02:10 < jesusabdullah> for any sane function there are two ways of dealing with errors
02:11 < jwulf> they will report a failed operation due to a network error, for example
02:11 < jesusabdullah> jwulf: obviously objects which are instances of Error
02:11 < jwulf> could not reach host, 404 resource not found on server
02:11 < jesusabdullah> anyways, sync functions should throw
02:11 < jesusabdullah> and async functions should pass it to a callback as the first parameter
02:11 < mprem> yes something like that, and I would need that try/catch, but handling same error inside the callback and in try/catch, seems like bad smell
02:11 < jesusabdullah> that is, callbacks have the call signature function (err, every, thing, else, that, you, care, about, in, non, error, situations) {}
02:11 < jwulf> the kind of error that you catch in a try / catch is different from that 
02:12 < jesusabdullah> so there's 3 cases:
02:12 < jwulf> it's a code explosion error
02:12 < jesusabdullah> sync function, try/catch around it
02:12 < jesusabdullah> async function, check for if (err) { /* do something intelligent, probably return/abort */ }
02:12 < jesusabdullah> async function not written nicely, do both
02:12 < mprem> independent of the type of error, I still need to show data from localdb
02:13 < jwulf> mprem, so it's not error
02:13 < jwulf> it's "could not get data from server"
02:13 < jesusabdullah> because any errors that aren't actually handled by explicitly passing them to the callback will get thrown
02:13 < mprem> jesusabdullah: right, but that leads me to duplciate error handling, pls see http://pastebin.com/zSpcJAfF
02:13 < jesusabdullah> and sometimes you just don't have control over that because you're using someone else's shitty library
02:14 < jesusabdullah> mprem: I haven't looked yet, but if you're sending the error to the callback you **don't** throw the error afterwards; you simply **return**
02:14 < Jakey> so when will node.js be ported to android ios windows 8
02:14 < jwulf> lol
02:14 < jwulf> as soon as you submit the patch
02:14 < jesusabdullah> oh I can help you immediately
02:15 < jesusabdullah> what is restler?
02:15 < jesusabdullah> why aren't you using request?
02:15 < jesusabdullah> use request, it's actually maintained
02:15 < jwulf> restler is only the most bad-ass rest library out there
02:15 < jesusabdullah> this is almost certainly a case of "someone's shitty library"
02:15 < mprem> didnt know about request, looking at it
02:15 < jesusabdullah> use request.
02:15 < jwulf> jesusabdullah, is request cross-platform?
02:16 < jesusabdullah> It's fantastic. De-facto standard. Supports both streams and buffered responses. Has tons of delicious sugars
02:16 < mprem> jesusabdullah: if there is error in callback, i will be using data from localdb, andnot throwing error
02:16 < jesusabdullah> yes, why wouldn't it be?
02:16 < jwulf> i mean - works in the browser (fallback, environment detection, that sort of thing)
02:16 < jesusabdullah> in the browser?? no it's for node
02:16 < mprem> jesusabdullah: my problem is I am duplicating code or calls in callback and in catch
02:16 < jesusabdullah> you can fake it with iriscouch's browser-request module
02:17 < jesusabdullah> mprem: pass errors from both cases to the same callback
02:17 < jesusabdullah> mprem: and scope the callback properly
02:17 < jesusabdullah> mprem: but first use request instead of restler
02:17 < mprem> jesusabdullah: "pass errors from both cases to the same callback" how would I do that?
02:18 < mprem> jesusabdullah: I dont even understand that :-) , recently started with js/node, can you pls point me to a sample
02:19 < mprem> jesusabdullah: or pls look at http://pastebin.com/W4ytVW1U and make changes
02:20 < mprem> sorry wrong pastebin link
02:20 < syskk> why does npm install; keep install devDependencies even when I dont set the --dev flag?
02:20 < mprem> too many pastebin pages open, correct link http://pastebin.com/zSpcJAfF
02:23 < jesusabdullah> mprem: https://gist.github.com/3991237
02:23 < jesusabdullah> shittyFxn can either throw errors or call them back
02:24 < jesusabdullah> if the code is shitty enough to cb the error **then** throw, then you're in a whole nother situation
02:25 < mprem> jesusabdullah:  have been searching for over 6 hours now but could not find a solution,  .... thx, really appreciate it, looking at it...
02:28 < sashman_> is there anything more lightweight than backbone.js ?
02:29 <@konobi> sashman_: in what respect?
02:29 < jesusabdullah> oh I see what you did here mprem
02:30 < jesusabdullah> that approach won't work because the get is an asynchronous action, the stuff you write after your callback gets executed immediately
02:30 < jesusabdullah> then later, your cb code hits and that sets has_error to true
02:35 < jesusabdullah> mprem: http://pastebin.com/Fuqhpf3w
02:35 < sashman_> konobi: i dont know i probably have to work more on it but on the first view it seems like a giant 
02:36 < jesusabdullah> mprem: you centralize error handling like this
02:36 < jesusabdullah> mprem: all async code in node follows this general pattern of "callbacks all the way down"
02:36 < jesusabdullah> mprem: to avoid "callback hell", just name your callbacks in a sensible way and stick to obvious APIs
02:36 <@konobi> turtles!
02:41 < nlf> i was wrong, buf.toString is still faster
02:48 < sinclair_> geez, tj has written so many npm packages
02:52 < sinclair_> https://www.windowsazure.com/en-us/develop/nodejs/how-to-guides/service-bus-queues/
02:56 < nlf> that fixed it, it's faster again
02:56 < nlf> if i take 2 new Date() values and subtract one from the other, is the result in milliseconds?
02:58 < warz> yes
02:58 < nlf> cool, i think i had to convert them with .getTime() first then subtract
02:59 < nlf> s/think/thought
03:05 < Morranr> anyone know how I can get node.js to connect to a socket.io server as a client?  I can't seem to find anything on this...
03:06 < Morranr> or maybe I just had to ask to be able to figure out what to search for lol...  found something that looks promising now.
03:07 < pascalo> hello
03:07 < warz> any suggestions on how to pinpoint slow code? is there any way to see perhaps where code is spending the most time?
03:07 < pascalo> warz: can you console log out timestamps?
03:08 < warz> no, it's not going to be in my code. it's going to be in a module i use.
03:08 < warz> and it's like 200ms im talking about here, so not sure i'd have much success with timestamps.
03:09 < warz> i'd need like some heat maps or something that show which code eats up the most time
03:10 < pascalo> can dtrace do that?
03:11 < pascalo> http://mcavage.github.com/presentations/dtrace_conf_2012-04-03
03:11 < warz> hm, idk ive never used it
03:11 < pascalo> neither have I, but maybe it's time to look into it for you ;)
03:12 < pascalo> hey, is there anybody here that knows about couchDB replication and npm?
03:13 < mprem> jesusabdullah: sorry , I was away...thx again, :-)
03:13 < warz> i think to use dtrace, this module would have to support it
03:14 < pascalo> warz: I don't know how much the node-debugger can do in that respect ... it's been a while since I fired that up
03:16 < pascalo> have a look at https://github.com/dannycoates/node-inspector and see what you can get out of that maybe?
03:16 < pascalo> you can edit running code in that one, so maybe console logs would work that way
03:17 < pascalo> and there is some experimental V8 profiler
03:21 < heathjs> i started getting this error recently: npm ERR! Please try running this command again as root/Administrator.
03:22 < heathjs> installing stuff as root seems retarded
03:22 < OTBS4Life_> heathjs, Are you installing stuff globally, or for some project?
03:22 < heathjs> for giggles
03:22 < OTBS4Life_> heathjs, That could be either, which is it?
03:22 < heathjs> in my ~/Sandbox/ dir
03:22 < OTBS4Life_> ok
03:22 < OTBS4Life_> And you've got write permissions there I assume?
03:23 < heathjs> yep
03:23 < jesusabdullah> mprem: in case I forgot to show you http://pastebin.com/Fuqhpf3w
03:23 < OTBS4Life_> heathjs, What is the command you are running?
03:24 < heathjs> npm install hat
03:26 < OTBS4Life_> heathjs, Just for kicks, does it work with sudo?
03:26 < heathjs> yerp
03:26 < heathjs> i keep running into this and i've been using sudo, but it's annoying 
03:27 < OTBS4Life_> I don't know then.  Either it's installing globally when it shouldn't be, hat requires to be installed globally, your permissions are wrong, or there is a bug in NPM.
03:27 < heathjs> ruh-roh
03:27 < warz> permissions being most likely, i'd imagine
03:27 < mprem> jesusabdullah: yes saw that :-) thx specailly for taking time to write that
03:28 < heathjs> it's trying to to write to /home/heath/tmp 
03:28 < heathjs> not a thing...
03:28 < heathjs> maybe that's the issue
03:28 < heathjs> nope
03:29 < OTBS4Life_> Make a new directory, 777 the damn thing, and npm install in there and see what happens.
03:29 < heathjs> drwxrwxr-x
03:29 < jesusabdullah> mprem: sure, happy to help someone in need when I have the BW, especially when I'm talking shit about error handling ;)
03:30 < heathjs> for kicks, tried a new package
03:30 < heathjs> http://paste.ubuntu.com/1322510/
03:31 < heathjs> afk for a few mins while i run home to shower
03:31 < mscdex> so chmod /home/heath/tmp/ appropriately?
03:38 < pascalo> No CouchDB people here?
03:38 < pascalo> *sniff*
03:39 < daleharvey> pascalo: whats up
03:39 < OTBS4Life_> We prefer futonDB
03:39 < OTBS4Life_> :-D
03:39 < pascalo> I got some prob;ems with replication, and I just need to wrap my head around how it operates
03:39 < OTBS4Life_> Or maybe ArmchairDB
03:39 < pascalo> LOL
03:40  * daleharvey is writing PouchDB :P
03:40 < pascalo> well, I am trying to run a company-internal NPM mirror
03:40 < pascalo> and npm sadly doesn't use any of those
03:40 < pascalo> LOL
03:41 < pascalo> so anyways, I have replicated the whole of NPM
03:41 < pascalo> and then published some company-internal tools to our registry
03:41 < pascalo> and now the replication doesn't pick up new stuff from the public one
03:41 < pascalo> which is not what I would have expected to happen ... 
03:42 < pascalo> but hey! maybe I got the wrong idea about how the replication works
03:42 < daleharvey> you didnt get it wrong, that should definitely work fine
03:42 < pascalo> weird weird
03:42 < pascalo> I had so many problems with that stuff already
03:43 < pascalo> :/
03:43 < pascalo> replication hung up ...
03:43 < daleharvey> when you trigger a replication, check the logs / in wireshark what checkpoint you are looking for
03:43 < pascalo> hmm, I wish I had that much control over the box
03:44 < syskk> why doesn't npm install copy my "bin" in node_modules/.bin ?
03:44 < pascalo> which logs shall I look at?
03:44 < daleharvey> the couchdb logs, you can access them at host:5984/_logs
03:45 < pascalo> ahh, thanks
03:46 < pascalo> Replicator: couldn't write document `gaze`, revision `19-7b71f33a6506220944232b1cdd73215e`, to target database `registry`. Error: `unauthorized`, reason: `Please log in before writing to the db`.
03:48 < mdedetrich> hi everybody!
03:49 < harrisonm> Happy Halloween, mdedetrich 
03:49 < mdedetrich> its thursday here
03:49 < mdedetrich> but happy halloween regardless
03:49 < harrisonm> Happy November, mdedetrich 
03:49 < mdedetrich> thx!
03:58 < daleharvey> anyone have a preference for selenium web driver modules?
03:59 < daleharvey> looking at burnout, but its ... weird
04:03 < pascalo> what's burnout?
04:07 < pascalo> daleharvey: thanks for pointing out the obvious ... logfiles did show permission errors
04:07 < pascalo> so now it replicates fine
04:07 < pascalo> created an admin user and off I went
04:07 < daleharvey> pascalo: awesome, no            bother
04:08 < pascalo> :)
04:38 < heathjs> odd enough ~/tmp was owned by root
04:38 < heathjs> there's the problem
04:43 < mscdex> bad root!
04:43 < sinclair_> mscdex: hi
04:44 < SomeoneWeird> heard that a lot have we mscdex ?
04:44 < SomeoneWeird> >.>
04:45 < mscdex> sinclair_: hi
04:45 < mscdex> SomeoneWeird: hi
04:45 < SomeoneWeird> lol
04:45  * sinclair_ = startled
04:45 < sinclair_> :)
04:45 < mscdex> var sinclair_ = 'startled';
04:46 < sinclair_> yup, figured id have a play around writing a native module for node
04:46 < SomeoneWeird> you just killed him
04:46 < SomeoneWeird> dont overwrite him!
04:46 < SomeoneWeird> sinclair_['mood'] = "startled";
04:47 < sinclair_> :D
04:48 < mscdex> sinclair_.emit('mood', 'startled');
04:50 < Morranr> sinclair_.emit('moods', {last: 'unknown', current: 'startled', next: 'unknown'});
04:50 < mscdex> sinclair_.emit('typescript');
04:50 < Morranr> Morranr.emit('status', 'Late to the party.');
04:51 < sinclair_> everyone loves TypeScript
04:51 < sinclair_> no one loves Python 3.x
04:53 < jesusabdullah> >_<
04:53 < jesusabdullah> I'm honestly pretty happy with javascript
04:53 < jesusabdullah> some days I think lisp sounds like a good idea and then I see the community/ecosystem and lolnope
04:53 < jesusabdullah> smalltalk envs are kinda interesting
04:53 < sinclair_> im slowly adjusting to JS in node land, but i do prefer TS tho
04:54 < SomeoneWeird> sinclair_.suicide();
04:54 < SomeoneWeird> sinclair_.suicide('likes ts');
04:56 < someprimetime> what do most people use for a db? mongodb (mongoose)?
04:56 < mscdex> TS = teamspeak
04:56 < mscdex> i use mysql!
04:56 < Morranr> redis ftw
04:56 < sinclair_> redis + mongo + rdbms 
04:56 < sinclair_> = application
04:57 < mscdex> there's already a Windows 8 for dummies book out
04:57 < sinclair_> mscdex: lol, really?
04:57 < mscdex> i can imagine that'll be quite a popular book ;-)
04:57 < mscdex> yep
04:57 < sinclair_> mscdex: wouldn't surprise me if the entire thing is detailing using metro with a mouse
04:58 < mscdex> Chapter 1: FORGET EVERYTHING YOU KNEW ABOUT WINDOWS
04:58 < sinclair_> hah
04:58 < SomeoneWeird> redis ftw
04:59 < mscdex> they should make Choose Your Own Adventure books about technology
05:00 < harrisonm> If you take epictroll412's advice and type "rm -rf /" into your terminal, turn to page 45.  Otherwise, turn to page 61.
05:00 < mscdex> "Do you choose to search the registry for a way to disable Metro? If so, turn to page 68. Otherwise turn to page 43."
05:00 < mscdex> :-D
05:01 < mscdex> i'd buy books like that in a heartbeat
05:01 < sinclair_> mscdex: i expect to be highly frustrated developing on win8
05:01 < harrisonm> disclaimer, just in case: never turn to page 45
05:01  * Guest56996 turns to page 68  *you run regedit and instantly every windows computer in your network blue screens with the message unauthorized action protection and you can't reboot back into the OS"
05:02 < Morranr> sinclair_: then don't
05:02 < mscdex> sinclair_: we already have people out there compiling node addons with VS2012 on Windows 8
05:02 < sinclair_> mscdex: and i still cannot justify win8 on a dekstop
05:03 < sinclair_> mscdex: im trying to compile a node addon now
05:04 < sinclair_> mscdex: node on winRT might be nice
05:04 < ViruSkin> hi all
05:04 < ViruSkin> Can I make a script to run node.js handling URL?
05:04 < sinclair_> mscdex: but you'l have to install it from the Windows App Store
05:07 < ViruSkin> The browser accesses http://site/nodejs/script.js, then start node script.js responsible browsers and disabled. Many scripts. Sorry for the English, I sit with a translator
05:25 < thealphanerd> http://cl.ly/1B27212w3W21
05:25 < thealphanerd> made with node :D
05:30 < SomeoneWeird> thealphanerd, wtf did i just watch?
05:30 < thealphanerd> haha
05:30 < thealphanerd> https://github.com/TheAlphaNerd/tilty.js
05:31 < thealphanerd> node js app that talks to a patch built in pd to generate sound
05:34 < syskk> has anyone tried SWIG for Javascript?
05:43 < gildean> thealphanerd: cool stuff
05:51 < thealphanerd> thanks gildean 
05:52 < gildean> thealphanerd: are you using jqm to read the accelerometer data?
05:52 < thealphanerd> nope
05:53 < thealphanerd> not even jquery for that stuff
05:53 < thealphanerd> I don't think
05:53 < thealphanerd> I think just a call back on an event on the window object
05:53 < gildean> ok
05:57 < vd1991> Hey guys! I am trying to start a http server in node.js using connect. When i open multiple instances (multiple clients), sometimes the dependent files are not being sent (mainly the images). I have to refresh the page repeatedly to get all the dependencies. And there is no error message in the console when this happens. Have you faced this issue before? 
05:57 < EhevuTov> by the looks of it, I think TooTallNate was pulling my chain. node-gyp looks like the perfect cross-platform build tool for non add-on software. He probably just doesn't want to commit and say it :-P
06:06  * sinclair_ successfully gets node building on Visual Studio 11
06:07 < EhevuTov> sinclair_, congrats
06:08 < sinclair_> fun times!
06:08 < sinclair_> scripty scripty
06:31 < pascalo> cya everyone ... thanks for the help again daleharvey
06:55 < avip> i did :-)
06:55 < avip> Does anyone knows hoe can I build the js lib only, without all the c code ?
06:59 < jesusabdullah> avip: which js lib?
06:59 < avip> src/lib, where's all the .js modules are
06:59 < avip> sorry node/lib, where all the .js modules are
07:00 < chovy> can someone look at this callback issue I'm having in my items.forEach loop?
07:00 < chovy> http://stackoverflow.com/questions/13172376/how-to-populate-schemaref-in-mongoose-using-callbacks
07:00 < avip> I'm referring to the node.js source itself if it wasn't clear. 
07:04 < chapel> chovy: I'll take a look
07:05 < avip> OK that was poorly phrased. Restart: I'm building node.js from source, on linux, in debug. It takes ages. But I'm really only interested in playing with some .js modules. I wonder if I can alter the Makefile somehow in order to skip all the .c code, and only build the .js file in /lib folder.
07:05 < chovy> chapel: i could do it if items.forEach took a callback after loop is completed, but I don't see that in the spec
07:06 < chovy> avip: ages? it didn't take very long for me. maybe 10 minutes at most to install node?
07:07 < avip> @chovy yes the build takes ~10 mins.
07:09 < avip> But I'm changing some .js modules, so I rebuild after each change... Is there a better way to do it? 
07:09 < chovy> avip: are you having to rebuild a lot or something?
07:09 < chovy> oh, i see
07:10 < morton> anyone know why my ssl connections get a UNABLE_TO_VERIFY_LEAF_SIGNATURE ?
07:11 < syskk> anyone would be interested in writing a SWIG module for Node.js‚Ä¶ I'm considering writing one
07:11 < avip> I'm not much of a JS doode, but it seems I have to rebuild if I want to require(...) a module.
07:11 < chovy> avip: no, i don't think so
07:12 < syskk> avip: why don't you get node through a package manager? what's your OS?
07:12 < avip> I'm sure there is, just need to find the doode that wrote the Makefile and ask him.
07:12 < morton> i am able to get it to work on some sites but get the error in others
07:13 < syskk> avip: ah, you want to modify the standard library? I don't think you need to recompile at all
07:13 < avip> @syskk I was thinking the same, but it seems I was wrong.
07:15 < syskk> avip: weird
07:16 < syskk> isaacs: is there any way to modify the standard library (the part in Javascript) without recompiling the node?
07:17 < syskk> avip: probably the js files are compiled to native code so that they don't need to be JITted everytime you launch node?
07:18 < avip> syskk: I guess that's true, just don't see how is that evident in the Makefile. 
07:20 < syskk> avip: yea.. I tried searching for lib/ in the makefile but nothing interesting
07:20 < morton> here's the code: http://pastebin.com/p4Rb3SDF
07:20 < avip> syskk: bin there :-)
07:20 < morton> the code works for google and many sites (httpsnow.org, for example)
07:21 < chapel> chovy: http://stackoverflow.com/questions/13172376/how-to-populate-schemaref-in-mongoose-using-callbacks/13172636#13172636
07:21 < avip> syskk: Can I mail this question to someone in joyent maybe ?
07:22 < syskk> avip: try `make out/Makefile` .. it seems to generate another makefile haha
07:22 < morton> but doesn't work with some sites like build.phonegap.com
07:22 < syskk> avip: not sure they will answer ‚Ä¶ maybe try on github issues
07:23 < Youdaman> g'day
07:24 < chapel> chovy: that make sense to you?
07:25 < avip> syskk: Interesting, gonna dig there, thanks!
07:25 < someprimetime> how'd you all get started with node? docs? specific tutorials?
07:26 < chapel> someprimetime: I started by plugging away on a personal project, and learned as I went
07:26 < chapel> mostly the main docs, and here in irc
07:26 < someprimetime> cool i think i'm about to do the same actually
07:26 < syskk> lots of tutos on google :) 
07:26 < chapel> but at that time, the tutorials were few and far between and weren't that good or useful
07:26 < someprimetime> mongodb got me excited and now i want to explore node further as i'm an intermediate js developer with a history of php/mysql for the backend
07:27 < someprimetime> and i'm just tired of php tbh even after developing with cakephp for a couple years
07:27 < someprimetime> thanks for the ideas
07:27 < chapel> now there is such a plethora of information, I would think it was very easy to get started
07:28 < chapel> someprimetime: I only really used php before node.js
07:28 < chapel> it was a hard transition, but I would never turn back
07:28 < someprimetime> what's the worst part of it (there has to be a dark side!)
07:29 < syskk> avip: out/node_js2c.host.mk line 19‚Ä¶ we're getting closer haha
07:29 < chapel> it shouldn't be used for everything, but honestly I use it for almost everything :)
07:30 < chapel> someprimetime: if you aren't used to async i/o and js scope and function passing, it can be hard
07:30 < chapel> it was for me when I first started
07:32 < syskk> avip: https://github.com/joyent/node/commit/496be457b6a2bc5b01ec13644b9c9783976159b2
07:32 < avip> syskk: Yep you're faster than me... But damn it seems what I wanted is not possible at all.
07:32 < syskk> that's as far as I can go haha
07:32 < avip> syskk you did well! Have a good night.
07:32 < syskk> avip: haha thanks
07:32 < someprimetime> chapel: cool thanks for the heads up
07:33 < chapel> someprimetime: also, node itself is the server
07:33 < chapel> not apache or something else
07:33 < chovy> chapel: reading...
07:33 < someprimetime> ever have any issues with scaling?
07:33 < chapel> you can make a server that does http, tcp, jabber, anything
07:33 < avip> syskk how did you find this BTW? (the github link)
07:33 < chapel> someprimetime: scaling is an issue on everything
07:33 < syskk> avip: stackoverflow
07:34 < avip> link ?
07:34 < syskk> avip: now that I think about it, let's say you want to modify http.js, I think you could copy paste the file in a directory modify it, and require would load the local file
07:34 < chapel> with node, as long as you keep state out of the process, you can scale out in a predictable way
07:34 < syskk> avip: not 100% percent sure require will give priority to your local file though
07:34 < avip> true but I'm doing vertical changes... so I'll have to copy it all.
07:35 < avip> We'll soon find out.
07:35 < someprimetime> nice i'm stoked to dive in :D
07:35 < chapel> also, don't be afraid to ask questions here
07:36 < chapel> though, don't ask to ask, just ask your question
07:36 < chapel> if someone can help they will
07:36 < avip> syskk: cheers, you gave me all the hints I needed. 
07:36 < EhevuTov> anyone have an example of linking a library to your node add-on program?
07:36 < EhevuTov> using node-gyp
07:37 < EhevuTov> I'm trying to link a Boost C++ library to some C++ using node-gyp
07:37 < syskk> EhevuTov: I wrote a tutorial but it's a bit outdated.. http://syskall.com/how-to-write-your-own-native-nodejs-extension/  have you looked into node-ffi?
07:38 < EhevuTov> syskk, thank you, I'll check it out. I'm actually node writing a node add-on. I'm just using node-gyp to compile the build system for a C++ project.
07:39 < syskk> EhevuTov: ah ok.. I didn't know you could use node-gyp for that.. seems kind of weird
07:39 < EhevuTov> basically, I'm having issues with the binding.gyp file syntax I guess
07:39 < tmpvar> EhevuTov, https://gist.github.com/e17c8af697d108eb71f0
07:40 < syskk> EhevuTov: i didn't realize node-gyp was a general tool
07:40 < EhevuTov> tmpvar, thanks! I've tried a similar example but maybe I was missing something
07:40 < tmpvar> Cheery, does node-video actually render something, or just clear the screen?
07:40 < EhevuTov> syskk, I successfully did a "hello,world" just fine in C++
07:40 < EhevuTov> syskk, it uses the same gyp syntax and I think it's basically just a wrapper, but not sure.
07:41 < EhevuTov> I like the node-gyp clean configure build. That way I don't have to do it myself
07:41 < tmpvar> EhevuTov, np .. just went through this today myself with : https://github.com/tmpvar/node-webgl/blob/master/binding.gyp
07:42 < tmpvar> (sorta works on raspberrypi now)
07:42 < EhevuTov> so, basically I'll just need to create a bootstrap.sh and a bootstrap.bat
07:43 < EhevuTov> tmpvar, oh awesome. Yeah, this is probably just what I need
07:43 < EhevuTov> TooTallNate probably doesn't want people to know it works so well on non add-on programs :-)
07:44 < chapel> chovy: do my examples make sense?
07:44 < tmpvar> oh, node-gyp?
07:44 < EhevuTov> I tried Boost.build recently. It does not create the native 'make' system whatever it may be. It literally IS a make system
07:44 < tmpvar> haha
07:44 < EhevuTov> tmpvar, yeah, is this just for 'gyp'?
07:45 < tmpvar> EhevuTov, nah thats for a node addon ;) (node-webgl)
07:45 < EhevuTov> ok, cool. This should work though
07:45 < chovy> chapel: yeah, but it still doesn't work. i get item.list.user.username is undefined, i still only have a user id for .user
07:45 < tmpvar> yeah, we used to use waf for everything.. i like gyp but sometimes its _really_ hard to find docs
07:45 < EhevuTov> ^ totally
07:45 < chapel> chovy: it could be mongoose
07:45 < EhevuTov> or they're out of date, or missing things, like lib dir syntax
07:45 < chapel> on first or second, or both?
07:48 < chapel> chovy: updated the code to handle mongoose issues
07:48 < chapel> mongoose doesn't like changes that don't follow the spec
07:50 < chovy> chapel: i think there is problem because my items can have same list.user
07:50 < syskk> EhevuTov: ok cool
07:50 < chovy> the map only has the last i
07:51 < chovy> but at least some of them should work
07:51 < syskk> EhevuTov: is it suppose to replace a Makefile or does it achieve something else?
07:51 < EhevuTov> syskk, it uses the native or common build system for the OS/platform
07:51 < EhevuTov> so, for instance on MS Windows is creates a Visual Studio project (IIRC)
07:52 < syskk> EhevuTov: ah ok‚Ä¶ so it replaces the old waf thing right?
07:52 < EhevuTov> syskk, yes. The idea I'd assume is to automate the build so it will work from the CLI
07:53 < chapel> chovy: ah, good point, let me update for that
07:56 < chovy> doing this doesn't work
07:56 < standoo> hi
07:56 < chovy> item.list.user = user
07:56 < chovy> inside items.forEach
07:56 < standoo> i'm writing os in node
07:56 < chovy> i still just get a user id there
07:56 < tmpvar> standoo, nice
07:56 < chovy> even though user is a user object inside the items.forEach
07:57 < chovy> seems either item is not saved inside the foreach or it gets converted to a string.
07:58 < standoo> thank you
07:58 < standoo> tmpvar: and i have no idea what will turn out
08:01 < chovy> chapel: https://gist.github.com/423182d32d18221517ff
08:01 < chovy> item.list.user = user is not assigned a user object
08:01 < chapel> chovy: fixed for non unique users
08:01 < chovy> i was still having same problem with your exmple
08:02 < chapel> chovy: did you see the update with toObject?
08:03 < EhevuTov> tmpvar, yeah, I'm getting the same error still. Not sure what I'm doing. Thank you though for gist
08:03 < EhevuTov> helps me verify what should work
08:03 < chapel> chovy: I also updated the example to work with non-unique users
08:03 < chovy> i saw that, but the assignment still doesnt work
08:03 < chovy>         items[id].list.user = user;
08:04 < chapel> did you toObject?
08:04 < EhevuTov> if anyone is curious: https://gist.github.com/3992406
08:04 < chapel> if you don't do it like in the example, then the assignment wont work
08:04 < chapel> mongoose ignores sets that don't follow the schema
08:04 < chovy> why not?
08:04 < chapel> so if the schema says objectid
08:04 < chapel> and you set it to something else, in this case an object
08:04 < chapel> it will just ignore it
08:04 < tmpvar> EhevuTov, what's the error?
08:04 < chovy> how is it not following the schema? it's a user
08:05 < chapel> chovy: those are refs
08:05 < MimiEA> hello, I'm just starting with node and I'm trying to figure out if i should use mongoose or mongojs, any help ?
08:05 < chapel> it isn't cut and dry like that
08:05 < chapel> and you have to consider that you are going 2 levels in
08:05 < standoo> MimiEA: do you even need a database?
08:05 < chapel> it might even require the list being toObject
08:05 < chapel> though I haven't tested
08:06 < chovy> ok
08:06 < chapel> in any case, whenever an assignment doesn't work with a mongoose object, its because of that
08:06 < MimiEA> standoo it's for educative purpose really, 
08:06 < chovy> my guess is list needs to be object
08:06 < chovy> i will try
08:06 < EhevuTov> tmpvar, I'm actually getting a compile or link error(not sure which): https://gist.github.com/3992406
08:06 < EhevuTov> I think that's a linker error
08:07 < EhevuTov> actually, that's prob compiler error since it tells me what line
08:07 < chapel> chovy: not sure if you know why my 2nd example is the way it is, it is more efficient than doing two heavy nested forEach calls
08:07 < chapel> chovy: in your gist, you are iterating through users, and for each user, iterating through items
08:07 < standoo> MimiEA: i personally used mongoose
08:08 < chapel> so in essence you are doing X (the number of items) function calls for each user
08:08 < chapel> where as with my method, you are limiting it to one forEach loop over items, then one over users (I do have a 2nd internal forEach loop in users, but it is minor comparatively)
08:08 < tmpvar> EhevuTov, yeah that looks like a simple fix.. e is not defined :)
08:08 < chovy> chapel: can you look at my gist, and tell me where I need to use toObject?
08:09 < MimiEA> standoo, any reason why mongoose over mongojs ? (beside the cool name xD)
08:09 < chovy> i called it on item but i still get undefined
08:09 < standoo> MimiEA: objects
08:09 < chapel> chovy: I am going to fix your gist
08:09 < tmpvar> EhevuTov, s/defined/declared
08:09 < MimiEA> standoo: we can store object with it ?
08:10 < EhevuTov> tmpvar, right, but that's not my code. It's pointing to the Boost library itself, which is strange.
08:10 < standoo> MimiEA: yeah, look at the documentation
08:11 < tmpvar> EhevuTov, ah.. yeah. do you need to use boost? :P
08:11 < EhevuTov> tmpvar, it followed the include files and compiling the chain and it didn't like the actual C++ Boost libraries
08:11 < standoo> mongo was created to store JSON like objects
08:11 < MimiEA> standoo will do, thanks
08:11 < EhevuTov> tmpvar, well?.I'd like to use it so I don't have to write my own async stuff
08:13 < chapel> chovy: https://gist.github.com/c1d9854e21adedb21218
08:13 < chapel> I didn't keep your console.logs
08:13 < chovy> chapel: is it possible to simply call item.toObject in my foreach loop without using the map madness?
08:13 < chapel> so my thought is you have to toObject item.list instead of item, because item.list is a complete mongoose object as well
08:14 < chovy> it didn't work, but i was wondering if i did it wrong.
08:14 < chapel> well, Im telling you, the way you had it with multiple forEach loops is bad
08:14 < chapel> its horribly inefficient
08:15 < chovy> i got rid of the muiltple user.find()
08:15 < chovy> is that what you mean?
08:16 < chapel> that was just one part of the inefficiency
08:16 < chapel> the other part is doing a loop inside of a loop
08:16 < chapel> for each user that you loop through, you are looping through each item
08:17 < EhevuTov> tmpvar, made progress with straight 'gyp'. Finally to the linker. Just need to coerce gyp to use 64bit
08:19 < chovy> chapel: ok
08:20 < tmpvar> EhevuTov, this is what i've done: https://gist.github.com/3992453
08:21 < chapel> chovy: are you having trouble with my example?
08:21 < chovy> chapel: how is what you're doing any different, with looping?
08:21 < chovy> you're still looping over items for each user
08:22 < chapel> chovy: well not exactly
08:23 < chovy> chapel: also, youre example has no 'item'
08:23 < chapel> I am only looping over the indexes
08:23 < chovy>           item[id].list.user = user
08:23 < chovy> item is not defined
08:23 < chapel> thats a typo
08:23 < chapel> should be items
08:23 < chapel> so to explain
08:23 < chapel> I am looking through items once
08:24 < chapel> in that loop, I add the index in the original array of each item to an object with the key of the user
08:24 < chapel> in the users loop
08:24 < chapel> I am only looping through the indexes
08:25 < chapel> which could be 1 or many
08:25 < chapel> but not as many as items
08:25 < chovy> ok, your example worked to get item.list.user.username, but now item.list.name is undefined and probably ever other attribute of item.list
08:26 < chapel> what is item.list.name?
08:26 < chapel> is that a virtual?
08:27 < chovy> no
08:27 < chovy> it's the name of the list
08:27 < chapel> there isn't any reason it shouldn't exist if its in the schema
08:27 < EhevuTov> tmpvar, yeah, that didn't help me. It's still trying to compile for i386 and against the .dylib instead of the .a library as well. I appreciate the help. i can manually compile just fine
08:28 < chovy> i have no idea how this is working
08:29 < chovy> but item.list gives me an id
08:29 < chovy> item.list.user.username actually gives me the username
08:29 < chapel> well
08:29 < chapel> hmm
08:29 < chovy> it makes no sense
08:29 < chapel> heh, whats your code look like now
08:29 < chovy> im using your exampe
08:29 < chapel> as is?
08:30 < chovy> yeah
08:31 < chapel> chovy: updated, try that
08:31 < chapel> forgot, forEach scopes out the changes
08:31 < chovy> what's the diff
08:32 < chovy> just return item?
08:32 < chapel> well
08:32 < chapel> map returns the items into a new array
08:33 < chovy> oh, you're using map
08:33 < chapel> with forEach, any changes to the item aren't translated to the original items in the array
08:33 < chovy> till undefined
08:33 < chovy> still
08:33 < chapel> hmm
08:33 < chovy> for item.list.name
08:34 < chovy> i do not f--ing get this at all
08:34 < chapel> heh
08:34 < chovy> i log item.list and i get an id
08:34 < chapel> in the map?
08:34 < chovy> but in my view item.list.user.username gives me the username
08:34 < chovy> item.list.name is undfeined in view
08:34 < chapel> well, check it in the map
08:34 < chovy> how come i dont see { username: 'foo' } when I log item.list?
08:35 < chapel> mongoose does getters/setters
08:35 < chovy> list is always an id
08:35 < chovy> maybe that is how .populate works, it only gets the data when its output
08:35 < chapel> yes, but when you populate, it should be the object
08:36 < chapel> no, it populates it before it gives you the data back
08:36 < chovy> if TJ would just add populate('foo.bar') we souldn't have to mess with this .
08:36 < chapel> well tj doesn't work on mongoose
08:36 < chovy> oh, i thought he wrote it
08:37 < chapel> aheckman and raughg work on it
08:37 < chapel> mostly
08:37 < chovy> anywho, this method doesn't work. i loose my list
08:37 < chapel> there is an alternative that gets you the data, just not as nice
08:38 < chovy> what's that?
08:39 < EhevuTov> tmpvar, I think gyp or node-gyp is getting confused of the multiple versions of the lib. I have a boost-system.a and boost_system.dylib
08:40 < chapel> chovy: https://gist.github.com/c1d9854e21adedb21218
08:40 < chapel> try that
08:40 < chapel> its actually simpler conceptually
08:40 < chapel> you have to pass in userMap to your template
08:43 < elliottcable> I thought I saw a Rake replacement for Node the other day
08:43 < elliottcable> something pretty sexy, but I can't remember the name
08:43 < elliottcable> pretty sure it wasn't `jake`, though.
08:48 < chovy> chapel: booyah, you da man!
08:49 < chovy> that's much easier and i don't have to change mongoose object
08:49 < chapel> I prefer it my way
08:49 < chapel> but this works
08:50 < chapel> and is still cleaner than the way you had it
08:52 < chapel> chovy: you're on geeklist right?
08:56 < elliottcable> should npm packages include or exclude the documentation?
08:56 < elliottcable> (Forgive me, new to NPM 'n such)
09:05 < chovy> chapel: yeah
09:05 < chapel> chovy: seen you around there
09:05 < chovy> i just discovered geeklist the other day
09:06 < chovy> thanks for the help by the way
09:06 < chapel> no problem
09:06 < chovy> i owe ya  a beer if you're ever in bay area
09:06 < chapel> heh, was there in may, not sure when I'll be back
09:07 < chovy> nice, wehere you go?
09:07 < chovy> i actually like your userMap idea better, because i can grab a user object by id for other things on the page.
09:08 < chovy> i don't have to fiddle with all this fetching of deep objects. because most of the time it's a user i need.
09:10 < chapel> yeah
09:11 < chovy> i just need to be sure whatever other methods need user also populate userMap too.
09:11 < chapel> I interchange things depending on what I am doing
09:11 < chapel> ultimately, I try to minimize queries to the database, and make lookup effiicient
09:11 < chovy> yeah, that looping over db was a good catch
09:12 < chovy> i guess that's one nice thing about non-blocking i/o -- you can do things like that
09:12 < chovy> can't*
09:12 < chapel> there are cases where you'd have to loop over queries
09:12 < chapel> in those cases, I'd use a library like async to make it easier to use
09:14 < chovy> yeah. i was going to use async for .forEach callback before i asked in here
09:14 < chovy> don't know how i would have managed to make it this far in my career w/o freenode.
09:34 < Jakey> why don't abstract node.js from using a specific js engine
09:34 < Jakey> from a specific js engine
09:36 < jwulf> jakey, just as soon as you submit the patch
09:52 < dr_horse> hey hey everyone. i'm working on a big project and use nodejs under win7. i always having an error : Unknown system errno 31. after it the server crushes. and doesn't display any logs. i'm experiencing it for months. maybe it connected somehow to working with database. but maybe no, it's really bad. please if anyone knows how to deal with it or anything about it write me back 
09:57 < Ancien> hi 
10:00 < rsdrsd> Can someone give me some advice with respect to socket io. I have build a chat using socket.io. On wifi it works great, but on 3g it has a lot of timeouts.
10:00 < `3rdEden> rsdrsd: use polling on mobile
10:00 < rsdrsd> I use that one, but I think I have something to do with reconnect
10:01 < rsdrsd> It is not completely clear how the reconnecting feature works
10:01 < `3rdEden> it receives a disconnect event, and tries to connect again ;p
10:01 < `3rdEden> until it did to much attempts, and gives up
10:02 < rsdrsd> so on clinet side it first receives the disconnect event and then the reconnect event if it has reconnected
10:02 < Ancien> i need help, it's my code : http://pastebin.com/i4qx4FAE i want to make a function to search something in the array but everything i tried don't work like : indexOf...
10:03 < rsdrsd> at the moment if i receive the disconnect event it kills everything and quits the chat. I should modify that
10:03 < rsdrsd> anothe question
10:04 < `3rdEden> rsdrsd: the reconnect event is triggered by the client not the server
10:04 < `3rdEden> so yes, you first get a disconnnect event, and then the client decides if it want's to attempt a reconnection
10:05 < rsdrsd> if the reconnect is succesfull is the socket id changed?
10:05 < `3rdEden> rsdrsd: yes
10:05 < `3rdEden> you should see the socket.id as a connection id, not as a session id
10:06 < `3rdEden> poor naming ftl
10:07 < rsdrsd> ok many thanks
10:10 < rsdrsd> But if a client disconnects on serverside the disconnect event is also triggered
10:10 < Ancien> can someone help me ?
10:10 < rsdrsd> so i should build a state in which everything is frozen while disconnected
10:11 < `3rdEden> rsdrsd: yes that is true
10:12 < `3rdEden> rsdrsd: but if I remember correctly, you get a reason why the disconnect event was fired
10:12 < rsdrsd> and is there a best method to keep track of chatlogs?
10:12 < `3rdEden> so you could use that to figure out the difference between a forced disconnect and a unexpected disconnect
10:13 < rsdrsd> ok that would be great
10:19 < rsdrsd> I ahev anither question
10:19 < rsdrsd> if a client disconnects and reconnects, is the connect event also triggered?
10:19 < dr_horse> hey hey everyone. i'm working on a big project and use nodejs under win7. i always having an error : Unknown system errno 31. after it the server crushes. and doesn't display any logs. i'm experiencing it for months. maybe it connected somehow to working with database. but maybe no, it's really bad. need help
10:19 < `3rdEden> ye
10:19 < rsdrsd> after a reconnect
10:20 < `3rdEden> rsdrsd: I think it does
10:20 < `3rdEden> but you also get a reconnected event
10:20 < `3rdEden> to indicate that a reconnect has been done successfully
10:22 < rsdrsd> poe
10:22 < rsdrsd> pfew
10:24 < rsdrsd> i'd better redesign my whole chatbox :(
10:27 < niggler> anyone awake?
10:28 < simong> only us lousy Europeans
10:28 < niggler> lol NYC here
10:29 < niggler> unfortunately office has no power, so short lived
10:29 < simong> How is it over there?
10:29 < simong> oh still not?
10:29 < niggler> apartment out of power
10:29 < niggler> office out of power
10:29 < simong> Do they have an ETA for when it'll go back on?
10:29 < niggler> coned said monday
10:29 < simong> ugh that's still pretty far away
10:29 < niggler> its not all bad
10:30 < niggler> my parents live in nj and managed to be in the 11% still with power
10:30 < RLa> niggler, no power but you have internet?
10:30 < niggler> they actually didn't lose power :)
10:30 < niggler> RLa: so this machine I'm chatting from resides in carteret nj
10:30 < niggler> in the NASDAQ data facility
10:30 < niggler> they've had no loss of power thanks to the magic of generators
10:31 < niggler> which, unfortunately, i have to access via iphone
10:31 < niggler> but its rough all around
10:32 < niggler> getting into the city, for example
10:32 < niggler> bloomberg put in a mandatory carpool
10:32 < niggler> so starting 6 AM you need 3 people in the car
10:32 < niggler> (which is why I'm here early)
10:32 < RLa> uh
10:33 < niggler> (it's 6:30 now)
10:34 < niggler> anyway, node question: I'm looking at ry's node-chat code and he does something where he attaches simpleJSON and simpleText methods to the response object on each callback.  Is that more or less efficient than just adding a prototype function to http.ServerResponse?
10:35 < niggler> unfortunately ry took it down, but github search shows https://github.com/mohlendo/node_chat/blob/master/fu.js#L28
10:36 < niggler> so in the highlighted line, why is that (creating the simpleText function each time) preferable to defining http.ServerResponse.prototype.simpleText?  I'd imagine V8 can take advantage of it
10:43 < regality> rawr
10:44 < regality> hallo
10:44 < regality> hallo
10:44 < niggler> .
10:44 < regality> srry
10:44 < regality> wrong channel
10:44 < regality> testing some bots
10:49 < niggler> RLa: any thoughts?
10:49 < niggler> or were there changes in http.ServerResponse that allows for prototypes now
10:49 < jonno11> Hi - MongooseJS advice needed! In Express, what's the quickest/cleanest way to implement a GET REST query with MongooseJS? Can I pass the req.query param like this ".findOne(req.query" ? Or is that leaving myself wide open for attack?
10:51 < regality> jonno11: yes, that would create the equivalent of any sql injection flaw
10:53 < RLa> niggler, to be hones, i have no idea ...
10:54 < RLa> tho i have attached my stuff to response object too in express middleware
10:54 < niggler> is there a notable performance difference between using a prototype and using a separate function
10:54 < RLa> separate function could be a bit faster but prototype lookup is being said to be fast too
10:59 < niggler> based on how v8 works i imagine prototype is faster
10:59 < niggler> especially since you don't have to rebuild the function each time
11:22 -!- mode/#node.js [+o piscisaureus_] by ChanServ
11:34 < psk> hey for what purpose we need C and C++ knowllege in node.js
11:35 < RLaa> for writing native modules, or working on the core, or hacking internals of v8
11:38 < psk>  <RLaa> u mean native modules like which is showed on npm site
11:38 < RLaa> yeah
11:39 < psk>  <RLaa> please tell me an authentication module => like rails have devise gem
11:40 < RLaa> no idea, just search npm
11:40 < psk> i searched
11:40 < psk> i m new to it
11:40 < aandy> www.passportjs.org for instance
11:40 < aandy> anyauth
12:09 < syskk> can i change process.env at runtime?
12:10 < syskk> i would like to add node_modules/.bin to PATH
12:13 < syskk> if you have an infinite loop inside a required module, does it block the process?
12:25 < SomeoneWeird> <syskk> i would like to add node_modules/.bin to PATH < just require it from there manually then?
12:26 < SomeoneWeird> sudo PATH=node_modules/.bin:$PATH node script.js
12:26 < RLaa> you want it in the PATH of child proc?
12:26 < syskk> SomeoneWeird: yea but I'm using it in a library with exec()
12:26 < syskk> SomeoneWeird: decided to go with _dirname
12:27 < syskk> var cmd = __dirname + '/node_modules/.bin/tsc ' + filename;
12:28 < syskk> tsc is installed by the typescript dependency
12:31 < goku22> how do we close a file stream 
12:31 < goku22> i have bit=fs.createReadStream(fd)
12:31 < goku22> i need to close it before processing other
12:31 < gavri> can a connect middleware be a wrap around filter? I mean can it run code after the next middleware in the chain is complete? for example, if it has to set a response header based on the status code that could be set by middleware further down the chain, can it do it in code after the next() invocation? or is the only for it to do something like this is hook into other existing methods?
12:59 -!- mode/#node.js [+o piscisaureus_] by ChanServ
13:06 < syskk> whyn when I `npm install` does it install devDependencies?
13:08 < MI6> joyent/node: Scott Blomquist master * 66f64ae : windows: generate ETW events to track v8 compiled code positions  Patch b - http://git.io/O8uILw
13:09 < SomeoneWeird> npm install --dev syskk 
13:10 < MI6> joyent/libuv: Ben Noordhuis master * 0d5d650 : unix, windows: fix EAGAIN error message - http://git.io/DOurmQ
13:10 < syskk> SomeoneWeird: I mean that's the point‚Ä¶ it installs devDependencies even when I don't use that flag
13:13 < deoxxa[cookies]> syskk: if you `npm install' in a directory, yes, it will install devDependencies
13:13 < deoxxa[cookies]> syskk: if you haven't set your NODE_ENV, it's assumed to be "dev"
13:14 < syskk> deoxxa[cookies]: ah ok
13:14 < syskk> that sucks :(
13:14 < syskk> I'd like it better not to force all my devDependencies on mere users of my library
13:18 < deoxxa[cookies]> syskk: they're not
13:19 < deoxxa[cookies]> syskk: the devDependencies are only installed if you do `npm install' in that directory
13:19 < deoxxa[cookies]> syskk: if you have a library, "foo", with a bunch of devDependencies, and you do `npm install foo', it won't install the devDependencies for it
13:19 < deoxxa[cookies]> syskk: if, however, you do `cd foo && npm install', it will
13:20 < syskk> deoxxa[cookies]: ahh got it
13:20 < niggler> is http a pure js module or native
13:22 < deoxxa[cookies]> niggler: both
13:23 < niggler> trying to compare the performance of prototyping versus a standalone method
13:24 < niggler> and I'm finding that prototyping is orders of magnitude slower, which is consistent with a native module's performance
13:24 < syskk> pure js i bellieve
13:32 < simong> What's the recommended library to upload files into Amazon S3 ?
13:32 < simong> (If there is one that supports rackspace, google storage, etc.. as well that would be even better)
13:33 < litenull> I'm interested in that one too
13:34 < syskk> https://github.com/olalonde/better-require anyone interested in contributing?
13:34 < syskk> trying to add as many languages as possible .. eventually most languages on this list: https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS
13:35 < jrajav> syskk: IMO you should return the function rather than overwriting the global
13:36 < jrajav> Also half the items on that list are hopelessly outdated, rarely used, or just plain gimmicky.
13:37 < syskk> jrajav: not a bad idea
13:39 < syskk> jrajav: the problem is that i don't control some dependencies like coffeescript which do overwrite process.extensions
13:51 < MI6> joyent/libuv: Ben Noordhuis master * 225c6f1 : unix, windows: fix several error messages - http://git.io/ModBEw
13:53 < RushPL> anybody is into node-canvas? Can I load PDF files as images there? I am trying and it seems it cannot load theme, and it kind of fails without a good reason. :P
13:58 < syskk> RushPL: I don't think you can do that natively. You'll probably have to use a third party library
13:59 < drewwestrick> Anyone care to share their favorite programming font and/or eclipse theme?
14:00 < RushPL> syskk: I can't seem to find any Node.jS libraries that could load a PDF file and draw something over it - any ideas?
14:02 < syskk> RushPL: search for Javascript libraries instead. I'm fairly sure such thing exist. some Javascript libraries render pdf to the DOM.. and some libraries render DOM to canvas.. so you could maybe try it that way
14:02 < trodrigues> RushPL: maybe you can combiner pdf.js with something else?
14:03 < trodrigues> *combine
14:03 < trodrigues> https://github.com/mozilla/pdf.js
14:04 < RushPL> trodrigues: hm, cool
14:06 < RushPL> trodrigues: yes it may do the trick, thanks!
14:07 < RushPL> hm, although I am concerned if the output is vector - probably not ..
14:45 < MI6> joyent/libuv: Ben Noordhuis master * b8aa5b9 : test: don't assert on UV_EPIPE in echo-server.c  UV_EPIPE is not an error - http://git.io/vAjssg
14:53 < MI6> joyent/libuv: Ben Noordhuis master * b0bcbdf : unix: NULL pipe_fname in uv__pipe_close()  Pro-actively avoid use-after-f - http://git.io/tiF7IQ
15:01 < Cheery> tmpvar: node-video implements webgl mostly now. I'm about to do demos and test things today
15:02 < FunnyLookinHat> Is best practice in NodeJS to use camelCase for variables or split_names ?
15:02 < Cheery> FunnyLookinHat: "best practice"
15:02 < tuhoojabotti> In Node project camel
15:02 < tuhoojabotti> I think
15:02 < FunnyLookinHat> kk
15:02 < Cheery> FunnyLookinHat: they're both being used. but theySeemToDoThis
15:02 < Cheery> more often
15:03 < tuhoojabotti> SPLIT_NAMES work better for constants
15:03 < tuhoojabotti> imho
15:16 <@isaacs> syskk: no
15:17 <@isaacs> FunnyLookinHat: var CONSTANT_VALUE = 100; function ClassName(){}; ClassName.prototype.someMethod
15:17 <@isaacs> FunnyLookinHat: it's only error properties that get snake_case and only because of tradition
15:18 < MI6> joyent/node: Girish Ramakrishnan master * 2f03eaf : doc: tls: rejectUnauthorized defaults to true after 35607f3a - http://git.io/TWJ9GQ
15:18 <@isaacs> FunnyLookinHat: but you can use whatever cases you like
15:18 <@isaacs> FunnyLookinHat: even `npm install capslockscript`
15:19 < FunnyLookinHat> isaacs, oooh ok thanks!
15:20 <@isaacs> FunnyLookinHat: i prefer to do file names in all lower case, just for the benefit of case-insensitive fs's
15:20 <@isaacs> FunnyLookinHat: except README, AUTHORS, and Makefile
15:37 < path[l]> hi, is it a good idea for my node app to specify coffee-script as a dependency
15:37 < substack> path[l]: is it an application or a library?
15:38 < path[l]> it's an application
15:38 < syskk> isaacs: thanks
15:39 < substack> path[l]: probably not such a bad idea to specify coffee-script explicitly as a dependency then
15:39 < substack> also that way you can nail down what version of coffee-script you're using
15:39 < substack> in case upstream versions make backwards incompatible changes
15:40 < path[l]> cool, thanks :). I didnt see other apps using it, so I was checking
15:41 < path[l]> also, is there a nice way to re-require files in the repl. I find it useful while developing
15:44 < dylang_> my co-workers are getting "cannot start phantomjs" - anybody seen this and know what to do? we've googled around for it.
15:44 < bradleymeck> path[l] not a sanctioned one
15:44 < path[l]> ah ok
15:45 < bradleymeck> dylang_: check permissions
15:45 < dylang_> bradleymeck: on what? we're chowning everything back to their user account
15:45 < dylang_> \nick dylang
15:45 < dylang_> oops
15:47 < bradleymeck> dylang: w/e phantom is trying to spawn? the headless bits
15:56 < hevets> hey guys, i'm newer to nodejs. i have a large static html file i want to programatically parse through and collect information. Whats the best scraping library for a beginner/intermediate to pickup and start using ?
16:00 < sinclair_> hevets: just ask google http://stackoverflow.com/questions/5211486/scrape-web-pages-in-real-time-with-node-js
16:07 < rsdrsd> I have a small question about socket io
16:07 < rsdrsd> if I have two wondows open
16:08 < rsdrsd> and if i disconnect an other window by calling disconnect() server side
16:08 < rsdrsd> the on disconnetc event gets triggered
16:08 < rsdrsd> but it keeps on polling
16:09 < rsdrsd> why is that?
16:09 < rsdrsd> so the main question is
16:09 < rsdrsd> why does it keep on polling while I have disconnected it
16:17 < simong> Is there a node library that implements Amazon's S3 streaming uploads *without* going to disk?
16:19 < rsdrsd> no one?
16:33 < ppppaul> hey guys
16:34 < rmill> AND GALS
16:34 < rmill> (not me, just sayin'‚Ñ¢)
16:34 < ppppaul> i have a node program that i want to progress with in the repl. i want the repl to get all of this programs globals... i'm having trouble doing this :(
16:35 < ppppaul> i have to set .context.var for each thing i want to see in the repl
16:35 < mscdex> ppppaul: use eval
16:35 < ppppaul> example?
16:35 < senglish> Hi. How can I find out what default node_modules search paths by install of node uses? require.paths has disappeared.
16:35 < ppppaul> mscdex, 
16:36 < mscdex> ppppaul: here's what i use: https://gist.github.com/8848a96560f0c4bea24c
16:37 < chrstphrhrt> new to node stuff.. using angular on client side and want to use mongoose for the backend web service, plus some auth.. what would be the best package without getting into whole frameworks like express?
16:38 < ppppaul> thanks mscdex 
16:39 < ppppaul> though, i'm not exactly sure how to use this
16:40 < hevets> chrstphrhrt: I'd suggest using express + mongoosejs. You can use express for primarly route handling. Auth you could try something like everyauth or passport. Documentation on all of these projects is supurb, hope that helps.
16:40 < ppppaul> hmmm. your eval is magic mscdex 
16:40 < ppppaul> <3
16:40 < mscdex> heh
16:41 < ppppaul> mscdex,  have you tried ultra-repl?
16:41 < mscdex> no, i just needed something simple to inject into one of my larger scripts to check the state of things when things don't go the way i expect
16:41 < mscdex> :-)
16:42 < ppppaul> that's exactly what i need.
16:43 < ppppaul> this will let me develop in a more lisp-like way
16:43 < ppppaul> :D
16:55 < cafebabe> hi all
16:58 < context> anyone know of any 'wrapped up' simple oauth provider with interface to manage users and stuff, and thats all it does
16:59 < mscdex> cafebabe: seen deadbeef lately?
17:02 < dscape> Two questions: When/is spdy going to be added to core? When/is named going to be added to core? :)
17:05 < Sahallo> hi
17:06 < taterbase> hi
17:07 < cafebabe> mscdex: last words i heard from him was baadf00d
17:07  * CoverSlide had some baadf00d yesterday
17:07 < chrstphrhrt> hevets: yeah that's helpful, passport looks perfect thanks
17:07 < CoverSlide> it started when i was climbing up a ladder
17:07 < CoverSlide> and then I felt something splatter
17:07 < cafebabe> I'm fighting with buffers between js and c++
17:07 < cafebabe> like that https://gist.github.com/2732711
17:08 < cafebabe> and http://www.samcday.com.au/blog/2011/03/03/creating-a-proper-buffer-in-a-node-c-addon/
17:08 < cafebabe> I'm not sure how to make one buffer for whole application lifetime
17:09 < cafebabe> to be able fill some data from js, then manipulate it somehow in c++ and return it back into js
17:09 < cafebabe> without allocation new buffers again and again
17:10 < cafebabe> any idea ?
17:10 < CoverSlide> add to global scope?
17:12 < cafebabe> CoverSlide: I will try, but when I created slow and fast buffer at addon constructor, and later filled some data into slow buffer - the fast buffer did not changed its content
17:12 < cafebabe> I don't understand well the concept of slow/fast buffers yet
17:13 < mlebrun> anyone have any experience with node + gearman
17:15 < glasser`> let's say i create a stream with fs.createWriteStream("/tmp/foo"), write a bunch of data to it with s.write(), and call s.end().  Since those are async calls, I know that I can't immediately open the file and expect to be able to read all the data back from it. When can I do that?
17:15 < glasser`> Should I be doing a s.on('close')?
17:17 < airtanah_> hey guys, if I have a module installed globally, will it be available for packages that do not install it locally?
17:17 < glasser`> on a related note: if i want to pipe a stream into my the stream I opened with fs.createWriteStream, how can I specify the encoding param for write?
17:20 < cafebabe> airtanah_: yes, but..
17:20 < cafebabe> airtanah_: If you‚Äôre installing something that you want to use in your program, using require('whatever'), then install it locally, at the root of your project.
17:20 < cafebabe> airtanah_: http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/
17:20 < glasser`> (does the encoding option to fs.createWriteStream even do anything? looking at the sourced it seems to be entirely unread)
17:23 < harrisonm> Anyone know of any organized efforts for code projects to help with Sandy relief?  I'm following HurricaneHackers right now, dunno if there's anything else out there
17:23 < glasser`> hmm, i guess i can just pass a callback to stream.end, not that this is documented
17:24 < djazz> is there a database driver, similar to sqlite3, that works across platforms (not only linux)? It needs to be file-based
17:24 < RLaa> why not sqlite?
17:25 < RLaa> or you want no-sql?
17:25 < djazz> RLaa: it dont compile on windows
17:25 < djazz> npm install sqlite3 fails
17:25 < RLaa> it should be
17:25 < RLaa> try to find binaries
17:25 < RLaa> there is always dirty if you want simpler db
17:42 < sinclair_> hey all, if anyone is interested in using VC++ for developing node modules, there is a good reference here http://coderesearchlabs.com/articles/BNWCA.pdf
17:45 < zed_blade> hi guys! I'm trying to install node on a Cotton Candy Linux stick (running linaro/ubuntu) so is there any way I can get Node to run on a ARM computer?
17:46 < sinclair_> http://www.wigwag.com/devblog/cross-compile-node-js-for-arm/
17:47 < zed_blade> @sinclair_ I've cheked that page but didn't get too far to be honest...
17:48 < sinclair_> zed_blade: sorry mate, im not sure the state of nodejs on ARM
17:48 < zed_blade> @sinclair_ no problem :)
17:48 < sinclair_> zed_blade: would be keen to see it running on it tho
17:49 < zed_blade> sinclair_: I'm trying to get it to run... i'm trying to make some sort of this server
17:51 < sinclair_> geez, the Azure Dashboard is slick nowadays
17:52 < airtanah_> cafebabe: I don't think they are locally available
17:52 < airtanah_> at least not on all deployments
17:58 < zed_blade> @sinclair_ turns out, I just installed with apt-get and apparently, everything is working OK
17:59 < sinclair_> oh, nice
17:59 < bingomanatee> Does anyone have a library for formatting large numbers as in $1.25m for millions etc?
17:59  * sinclair_ grumbles at Azure not letting him run native addons for node
17:59 < zed_blade> sinclair_: guess it's enough to just use linux and install the same way it's always been
17:59 < drewwestrick> If you have issues. I just cross compiled Node for an ARMv5t running Digi embedded linux.
18:00 < zed_blade> drewwestrick: so far, I haven't noticed any problems... Any thought why I should cross compile for ARM?
18:01 < drewwestrick> Sorry I thought for some reason you were trying to run this on an ARM processor. Didn't read all the way to the top. Are you just interested in running this on a PC?
18:01 < sinclair_> hmm, Azure is running node 0.6.20 
18:01 < zed_blade> it's a cotton candy stick.. has a Samsung Exynos ARM processor
18:02 < zed_blade> drewwestrick: but i just used apt-get (since it's running linaro/ubuntu) and everything seems to be working just fine
18:02 < drewwestrick> Sounds like your good to go then. For instance the system I'm running is a Digi ARMv5 and it is very bare bones so there was no apt-get. I had to cross compile Node, npm, and V8 to run on an ARM chipset.
18:04 < Sahallo> how do i change the path env variable in the cmd prompt?
18:04 < Sahallo> i'm on mingw
18:04 < drewwestrick> Pretty cool to see the number of people these days running Node on small embedded hardware.
18:05 < zed_blade> drewwestrick: Why not use them? They're relatively cheap, very small and with good capabilities.. Right now I'm trying to build some sort of thin-server to have spred around some places
18:06 < zed_blade> drewwestrick: i'm not saying it's the future, but we'll start to see some really good projects on these things
18:15 < dscape> isaacs: if domains use uncaughtExceptions then it should be impossible to process.removeListener that is listening for domains no?
18:16 < bluesm> hi.
18:16 < sinclair_> does anyone else here deploy to Azure?
18:17 < bluesm> Is node.js could replace django ?
18:17 < FunnyLookinHat> with socketio - is there a way to do a broadcastEmit to everyone EXCEPT the active socket ?
18:17 < FunnyLookinHat> bluesm, node.js is a platform, django is a framework.  :)
18:17 < FunnyLookinHat> You could possibly replace something like django with a framework, such as Express or Geddy within Node.JS - but it's not quite that simple.
18:18 < sinclair_> mscdex: are you around mate?
18:20 < bluesm> FunnyLookinHat: I think I have little understanding what node.js reall is.
18:20 < sinclair_> does anyone know how compatible 0.6.x addons are with 0.8x
18:20 < bluesm> FunnyLookinHat: Could you link me reference. To understand it ?
18:20 < FunnyLookinHat> bluesm, http://nodejs.org/ ?
18:20 < sinclair_> i have built a addon with 0.8, but on deployment to Azure, i get shared lib load errors
18:21 < sinclair_> checking Azure, they are rolling with 0.6
18:21 < harrisonm> Come on Microsoft, you can do better than that
18:22 < bluesm> FunnyLookinHat: Ok.
18:22 < sinclair_> harrisonm: well, i would have thought that Node could do better
18:23 < sinclair_> harrisonm: not everyone has the luxury of opting for the latest versions and endless open npm modules
18:24  * sinclair_ wishes this channel would stop bashing microsoft
18:24 < bluesm>  FunnyLookinHat: Can I create push app. Without node.js
18:25 < bluesm>  FunnyLookinHat:  But with django ?
18:25 < bluesm> I mean, I know. 
18:25 < bluesm> Silly question.
18:25 < FunnyLookinHat> push app ?
18:25 < drewwestrick> @zed_blade I couldn't agree more. My company used to deploy full blown servers with our systems. We are now looking at a solution smaller than your typical wireless router.
18:26 < FunnyLookinHat> Uh - django = python.  If you want to use django, don't even complicate it with node
18:26 < sinclair_> drewwestrick: Nexxy was mentioning NinjaBlocks the other day
18:26 < harrisonm> sinclair_: fair enough.  Though I have some concerns there re: node not yet being a 1.0 project
18:26 < zed_blade> drewwestrick: these are my solutions.... I've tried using a uHost android stick, but didn't get very far.. this one is way overpriced and the support is, at best, crappy, but it manages
18:26 < harrisonm> and needing to keep on top of major updates as a result
18:27 < sinclair_> harrisonm: Azure are likely to provide node version options
18:27 < sinclair_> harrisonm: through iisnode
18:27 < bluesm> FunnyLookinHat: Ok. Put it in this way. When node.js is so helpful. 
18:27 < sinclair_> harrisonm: that do this .NET Application Pools, which is nice
18:27 < harrisonm> I'll look into that
18:28 < sinclair_> harrisonm: don't quote me on that tho
18:29 < sinclair_> harrisonm: do you know if Microsoft are actively contributing to core node dev?
18:29 < FunnyLookinHat> bluesm, read this: http://nodeguide.com/
18:29 < drewwestrick> NinjaBlocks seems like an interesting solution. Most of the stuff I'm working with is a little more custom but def a great idea.
18:29 < FunnyLookinHat> bluesm, particularly this page: http://nodeguide.com/convincing_the_boss.html
18:30 < FunnyLookinHat> Bad and good use cases.
18:30 < sinclair_> its not that i don't trust Joyent, but Microsoft do have a history of thinking about these sorts of things
18:30 < harrisonm> sinclair_: no clue
18:30 < FunnyLookinHat> If you're trying to come up with a reason to use Node.JS - as opposed to having a situation that is ideal for it - then you're most likely looking at the problem backwards.
18:30 < sinclair_> harrisonm: Microsoft are in the same boat as the rest of us 
18:31 < sinclair_> bluesm: word of advice from someone in your position a few months ago....stop trying to justify node, and just use it 
18:32 < TehShrike|Work> substack: is there any way that I can get an RSS feed of t-shirts you add to teespring?
18:33 < bluesm> FunnyLookinHat: so this is the best, when I have to interact with the user - real-time.
18:33 < sinclair_> bluesm: nodejs is amazing technology, with application applicable to many domains
18:33 < sinclair_> bluesm: if you using it for a web stack, fine, nodejs performs well
18:37  * sinclair_ grabs 0.0.2
18:37 < sinclair_> * 0.6.2
18:38 < jrowny> I'm in the midst of converting some code to Node (original AS3) and I'm stuck at the part where I'm making everything happy and async a la Calbacks.
18:39 < jrowny> I've read the various du examples
18:39 < jrowny> here's where I'm at: https://gist.github.com/aa57152f7b7020e8d111
18:40 < sinclair_> jrowny: are you manually porting?
18:40 < jrowny> it's recursive... and the elements have to stay in order, i.e. in series, so that's why I'm confusing myself.
18:40 < jrowny> yea more like re-writing
18:40 < jrowny> the old code is... old.
18:40 < DTrejo> jrowny: hey
18:41 < DTrejo> I recommend breaking it into two functions
18:41 < DTrejo> the recursive function
18:41 < sinclair_> jrowny: spend some time with TypeScript, especially if you are from a AS3 background
18:41 < DTrejo> which is also syncronous
18:41 < DTrejo> and also the one that calls the callback
18:42 < DTrejo> jrowny: live coding the solution: http://sync.in/as3convert
18:42 < jrowny> DT: wow.. this is like being in the matrix
18:42 < jrowny> sinclair: not really from AS3 background, but I have done a lot of it. typescript is Microsoft's thing?
18:43 < sinclair_> jrowny: go and fork the project if you wish, then it can by your thing
18:43 < Qbix1> hey everyone
18:43 < Qbix1> who here is in nyc?
18:43 < jrowny> it looks pretty cool
18:43 < DTrejo> jrowny: how is that?
18:44 < FunnyLookinHat> bluesm, that is one of the ideal use cases, yes.
18:45 < jrowny> it's not always sync
18:45 < gildean> sinclair_: let's face it: people here are never going to fully embrace microsoft
18:45 < gildean> even tho' they make some excellent stuff
18:46 < gildean> like this keyboard i'm typing on
18:46 < jrowny> I didn't even think of the negative context when I said it... ha
18:46 < sinclair_> gildean: like npm, i think its fair to pick and choose MS tech
18:46 < gildean> now that i think of it, microsoft makes great hardware
18:46 < sinclair_> gildean: oh?
18:46 < gildean> i have a ms mouse and keyboard, the game controllers i've had have been excellent also
18:47 < gildean> like the sidewinder joystick in the 90's
18:47 < gildean> i really liked that one
18:47 <@isaacs> dscape: ??
18:47 < sinclair_> gildean: and tablets (tho im waiting for surface pro)
18:47 < gildean> i had a ms sidewinder force feedback, it was one of the best joysticks i've ever had
18:47 < sinclair_> gildean: ironic that the surface tablet was graded better than the software running on it
18:48 < sinclair_> gildean: looks like OT is fast becoming the new web buzz
18:49 < gildean> sinclair_: ot?
18:49 < sinclair_> Operational Transformation
18:49 < sinclair_> gildean: see http://sync.in/as3convert
18:50 < Qbix1> who here is in nyc?
18:50 < gildean> sinclair_: ah, yeah
18:51 < sinclair_> gildean: node makes it easy
18:51 < gildean> yep
18:51 < sinclair_> so does SignalR (albeit there being any OT libs available) 
18:51 < sinclair_> * not
18:51 < gildean> i still found it funny that i don't have windows on my machines, but i have many microsoft branded devices
18:52 < sinclair_> node just feels like a better fit
18:53 < felixge> anybody interested in #nodecopter should listen on http://nodeup.com/ and join #nodeup - will go live in a few min
18:54 < substack> copters!
18:55 < thesteve0> would love to see some people attend - http://geojs.eventbrite.com/
18:55 < girishr> how can i test the latest node.js without installing ?
18:56 < thesteve0> girishr:  sign up for OpenShift
18:56  * thesteve0 now takes off his marketing hat
18:56 < thesteve0> girishr:  I work there so I think it is great
18:56 < thesteve0> girishr:  but you should look at a PaaS solution
18:57 < girishr> thesteve0: let me rephrase :-) i have node.js compiled from git. i want to make sure that i use the latest .js files and c++ that are part of the git build and not part of the system's node.js
18:58 < girishr> i wasn't actually asking about hosting and such
18:59 < girishr> openshift is interesting
18:59 < thesteve0> girishr:  ok now I understand
19:00 < girishr> i was debugging https://github.com/joyent/node/issues/4229 basically
19:00 < gildean> girishr: copy the binary somewhere and make sure you start it from that location
19:00 < girishr> gildean: would that ensure that the latest .js files get picked up by require ?
19:01 < girishr> so, require(tls.js) should pick up the latest and greatest from git and not from my system
19:01 < gildean> the required core modules are required from within the binary afaik
19:01 < gildean> please correct me if i'm wrong
19:01 < girishr> gildean: i don't know how it's supposed to work :) but it doesn't seem to work
19:02 < girishr> i have to do require("path/to/git/lib/tls.js") to get the right tls
19:02 < DTrejo> jrowny++ for learning stuff :)
19:03 < DTrejo> aw we have no beer bots in here
19:03 < jrowny> DTrejo++ for learning me stuff
19:03 < gildean> girishr: you could set up a chroot for testing
19:04 < DTrejo> :))
19:06 < girishr> gildean: i guess i could. i was wondering how people usually devleop
19:08 < gildean> girishr: i just install the latest from ppa:chris-lea/nodejs and roll with it
19:08 < gildean> most of the core is stable already so it shouldn't break too much even if just update everything
19:10 < AAA_awright> girishr: The internal Node.js libraries are compiled into the binary
19:10 < AAA_awright> `make install` and using the newly installed binary should be sufficent
19:13 < cjm> nodeup is live, http://nodeup.com (nodecopter special) 
19:17 < zonetti> why am I getting "make: Nothing to be done for `test'" after "make test"? (https://gist.github.com/3995794)
19:20 < rsdrsd_> I have some questions about socket io
19:21 < rsdrsd_> can someone help me>?
19:22 < sinclair_> felixge: nice
19:25 < rsdrsd_> Why does the client of socket io keep on polling after it is disconnected?
19:25 < rsdrsd_> can someone explain that?
19:25 < sinclair_> rsdrsd: checking for disconnect?
19:28 < rsdrsd_> well I force the client to disconnect
19:28 < rsdrsd_> on client side or on serverside
19:28 < rsdrsd_> it keeps on polling  every 10 seconds
19:29 < rsdrsd_> why doesn't it stop with polling on client side after a socket.disconnect)
19:29 < rsdrsd_> it also doesn't try to reconnect
19:30 < rsdrsd_> when i stop the server and starts it again it is reconnecting, but after a forced disconnect it isn't
19:31 < rsdrsd_> I have set polling duration to 10 seconds
19:33 < CoverSlide> fucking xcode takes for-fucking-ever. is there any good mirror / torrent for the latest xcode
19:36 < aandy> well, there's appstore and developer.apple.com
19:37 < dbugger> Hey guys. I tried to do "sudo npm install jQuery" and I got this error. Can someone tell me whats wrong? http://pastebin.com/hc6ufjfK
19:37 < CoverSlide> yeah that's where i'm getting it from. about 1/3 done and 2 hours to go
19:37 < aandy> seems like you don't have build-essentials, dbugger . which OS?
19:38 < dbugger> aandy, Im under ubuntu 12.04
19:38 < aandy> CoverSlide: i meant as two different places. one is a website where you download the image, the other is through appstore's system
19:38 < aandy> dbugger: okay, then try apt-get install build-essential (or build-essentials)
19:38 < dbugger> aandy, doing it right now
19:40 < dbugger> aandy, that di it. Thanks!
19:40 < aandy> np :p
19:40 < rsdrsd_> no one knows it?
19:42 < aandy> i can't explain it, but i can confirm that socket.io does that :P
19:44 < rsdrsd_> is it normal
19:44 < rsdrsd_> or is it a bug?
19:49 < jrowny> @DTrejo I had to make one small modification but it works perfectly
19:49 < DTrejo> nice :)
19:50 < DTrejo> question: i have a web page, and it has a number of computationally intensive divs that need rendering based on server-side HTTP requests to 3rd parties. is there a best way to render the initial page and then render the divs as soon as they finish?
19:51 < DTrejo> but then when I've computed the divs they can be cached
19:51 < DTrejo> so subsequent page loads are really fast because all served as one page
19:51 < DTrejo> erm nvm I think i know what to do, just need to write it
19:57 < hedel> hi
19:57 < hedel> I'm now to node
19:57 < hedel> alo?
19:58 < jrowny> hi
19:58 < hedel> hi jrowny
19:58 < hedel> can i ask
20:00 < jrowny> well I'm new too, but you can try
20:00 < hedel> i'm uploading a app.js to appfog. I have a html app in my hosting (classical shared hosting) but dont connect with the server
20:00 < hedel> in localhost is working perfect
20:01 < hedel> in appfog, if i visit the page of the app look ok, but my site can't connect with the service
20:01 < jrowny> probably cross-domain policy
20:01 < hedel> from appfog?
20:01 < hedel> somthing like this i was thinking
20:01 < jrowny> http://en.wikipedia.org/wiki/Same_origin_policy
20:02 < hedel> mm reading! thanks
20:05 < sinclair_> Error: Unable to load shared library :(
20:05 < sinclair_> awww
20:10 < TooTallNate> sinclair_: what are you trying to do?
20:10 < sinclair_> TooTallNate: get a node addon working on Azure
20:11 < TooTallNate> sinclair_: on windows that usually means a dll it's looking for is missing
20:11 < TooTallNate> sinclair_: are you linking to any?
20:12 < sinclair_> TooTallNate: running the addon locally, its fine, running on azure, not fine :(
20:12 < TooTallNate> sinclair_: what's the addon?
20:12 < sinclair_> TooTallNate: nothing at this stage
20:13 < sinclair_> TooTallNate: just a simple NODE_EXTERN
20:13 < sinclair_> TooTallNate: the goal is to see if i can get it working on Azure
20:13 < TooTallNate> sinclair_: do you have source up?
20:13 < sinclair_> nope, its not a source code issue
20:13 < TooTallNate> sinclair_: i've never used azure so idk
20:14  * _Kili_ wonders if anybody has ever been able to use Socket.io
20:14 < sinclair_> i cannot find any docs on the web about this, (specifically getting addons on Azure)
20:15 < sinclair_> TooTallNate: i would not be surprised if microsoft have a custom node build up there preventing native execution
20:15 < TooTallNate> sinclair_: well their mssql bindings are native, so i doubt that's the case
20:16 < sinclair_> TooTallNate: they could have catches in there for them
20:17 < sinclair_> TooTallNate: custom config added to the node build to ensure only microsoft native code is allowed to run
20:18 < sinclair_> with a checksum 
20:18 < TooTallNate> sinclair_: sounds like a stretch :p
20:18 < sinclair_> TooTallNate: hmmmm
20:21 < sinclair_> TooTallNate: i may need to run as a Web Worker
20:22 < sinclair_> TooTallNate: im not so keen on running a Azure Virtual Server for a native module
20:22 < sinclair_> VM for a custom addon is overkill
20:22 < sarajchipps> hey all, non-node question but figured this is a good a place as any
20:23 < sarajchipps> does anyone know of a Vim plugin that allows you to search for phrases at an application layer
20:23 < sarajchipps> when using nerdtree?
20:23  * sinclair_ hugs VS
20:24 < sarajchipps> will grep allow me to search nested files?
20:25 < sarajchipps> someone just sent me this: http://www.vim.org/scripts/script.php?script_id=311, answered!
20:25 < mscdex> sinclair_: yes?
20:26 < sinclair_> mscdex: i was reading around the web and i saw you had posted to a google group on native addons on Azure
20:26 < sinclair_> mscdex: wondered if you had any insights into it, as im having some problems
20:27 < mscdex> i don't have any experience with it
20:27 < mscdex> not even sure how it really works
20:28 < TooTallNate> sinclair_: do you basically just deploy a tar ball to azure or how does it work?
20:28 < sinclair_> mscdex: ok thanks, ill see if i can dig up some further docs on it
20:28 < sinclair_> TooTallNate: i have FTP access to a virtual directory
20:28 < mscdex> only thing i know is someone said that you're supposed to upload compiled addons to Azure to use them or something *shrug*
20:29 < sinclair_> TooTallNate: Azure has a IIS like web server running up there, with iisnode running on it
20:29 < sinclair_> mscdex: lol, its all good
20:30 < mscdex> doesn't iisnode run a node per thread per connection?
20:30 < sinclair_> TooTallNate: its quite nice, as i can run C#, node and .... PHP, from this directory, with configurations on the web.config
20:31 < sinclair_> mscdex: yeah, i believe so
20:31 < sinclair_> mscdex: hooks into the IIS Thread Pool
20:31 < mscdex> yikes
20:31 < TooTallNate> so it's like auto "cluster"?
20:31 < sinclair_> mscdex: its still 1 node process per thread
20:31 < sinclair_> mscdex: and you only need 1 thread :)
20:31 < mscdex> right, so it's like running node behind an apache proxy
20:32 < mscdex> :\
20:32 < sinclair_> mscdex: that is not necessarily a bad thing
20:32 < mscdex> you're limiting yourself quite a bit that way i'd say
20:32 < sinclair_> mscdex: besides, i kinda like the management options IIS / Azure provides
20:33 < sinclair_> mscdex: yeah, but im not planning on doing anything outside of web development up there
20:33 < sinclair_> so its really not a issue
20:34 < sinclair_> mscdex: you know, Azure does let me provision a nice Ubuntu Server on demand
20:35 < CoverSlide> how's the pricing on azure?
20:35 < sinclair_> $4 a month
20:36 < sinclair_> roughly, for a single web instance
20:36 < sinclair_> havent gone into pricing for VM's
20:36 < sinclair_> CoverSlide: also, i pay as i go, so $4 is just what i pay to host things up there
20:37 < sinclair_> CoverSlide: tbh, i wouldn't recommend Azure unless you are fond of .NET, you get more bang for buck
20:38 < CoverSlide> o rly?
20:38 < sinclair_> CoverSlide: and provisioning VM's, i would probably opt for something like Ec2 or Rackspace
20:39 < aandy> am i the only one dreading the "bw usage" question on all "price calculators" for ec2/azure/rackspace etc?
20:39 < sinclair_> CoverSlide: before Azure you had two options, Shared Hosted or Dedicated Hosting, both sucked, Web Instance are the PAAS middleground :)
20:41 < sinclair_> CoverSlide: Azure is still reasonable for other types of web stacks, (IIS and up), but you could find better alternatives out there.
20:42 < CoverSlide> hmm i think i'll just stick to my vps
20:42 < sinclair_> CoverSlide: where you host?
20:42 < CoverSlide> linode
20:43 < aandy> isn't that a .. very expensive option?
20:43 < CoverSlide> compared to PaaS yes
20:43 < aandy> also in terms of single point of failure
20:44 < CoverSlide> well i like having a machine i have root access to
20:44 < jrowny> my linode's been more reliable than most PaaS out there
20:44 < LouisT> jrowny: you got that right
20:45  * sinclair_ really likes the Azure Service Bus
20:45 < jrowny> and cheap too, I pay $25/month with full backups
20:45 < bradleymeck> jrowny: just depends if ppl want to pay attention to things themselves
20:46 < LouisT> jrowny: there are cheaper services than that tbh
20:46 < LouisT> any VPS is usually better than a PaaS
20:46 < jrowny> yea, everytime I try to price one out it ends up being more
20:46 < LouisT> well, i guess not ANY, but most
20:46 < sinclair_> LouisT: i have to disagree with you, PAAS is the better option, and by far the cheaper
20:47 < sinclair_> LouisT: especially when it comes to management costs
20:47 < jrowny> one thing I like about services, or managed hosting is that I can blame someone else when it goes down, ha.
20:47 < LouisT> sinclair_: not really
20:47 < bfrog> is there anyway to get node to behave more uniformly on http requests?
20:47 < LouisT> a lot of services cost more for things like bigger databases
20:48 < LouisT> if you buy a VPS with decent disk, you don't have to worry about that
20:48 < CoverSlide> well PaaS means you won't need a sysadmin
20:49 < jrowny> for me it depends what I'm doing. If i'm doing something for myself I go VPS, if it's for a client I look for something managed.
20:49 < sinclair_> LouisT: if you are dealing with a single server, its not such a big issue, when you shuffle out to database, load balanced web servers, exchanges and active directories, then it becomes a PITA
20:49 < jrowny> i.e., PaaS
20:51 < sinclair_> LouisT: with PAAS, you are typically limited in such a way for the infrastructure to handle a fair chunk of the hassle. 
20:51  * LouisT shrugs
20:51 < sinclair_> LouisT: in my experience that is
20:51 < LouisT> idk, i've had nothing but issues with PaaS, i prefer to just manage everything myself
20:52 < jrowny> I have what should be a simple JS question
20:53 < jrowny> let's say I have an object... RGB(red, green, blue)
20:53 < jrowny> RGB = function(red, green, blue){   this.red = red;   this.green = green;   this.blue = blue; };
20:53 < CoverSlide> kay
20:53 < jrowny> and I have an array of those RGB objects
20:53 < CoverSlide> kay
20:53 < jrowny> how can I get thatArray.indexOf(someRGBobject) to work
20:53 < jrowny> in java, I'd override the equals and/or hash
20:54 < CoverSlide> well you can only test object equality if they are the exact same instance
20:54 < jrowny> which they wouldn't be
20:54 < jrowny> but they'd have the same values
20:54 < TooTallNate> jrowny: you'd have to use .filter()
20:54 < CoverSlide> yeah, you'd have to iterate and test for them all
20:55 < jrowny> filter, like underscore's filter?
20:55 < CoverSlide> yeah
20:55 < TooTallNate> jrowny: JS, unfortunately, doesn't have a .equalTo() like Java does
20:55 < mscdex> or reduce ?
20:55 < TooTallNate> jrowny: not underscore's specifically, but Array#filter()
20:55 < jrowny> but that won't give me the position
20:55 < jrowny> or.. you're saying use filter to get the object, the instanceOf
20:55 < jrowny> indexOf*
20:56 < TooTallNate> jrowny: oh, well usually you want the object instead of the index
20:56 < jrowny> filter to get the ACTUAL instance of the object, than indexOf(actualObject)
20:56 < CoverSlide> you could also use .some, have it close around a count variable
20:56 < sinclair_> https://www.windowsazure.com/en-us/develop/nodejs/how-to-guides/service-bus-topics/
20:56 < jrowny> in this case, I need the index only
20:56 < CoverSlide> and return true
20:56 < sinclair_> way nicer than WCF
20:56 < TooTallNate> jrowny: the best bet is to write a for loop manually in this case
20:57 < jrowny> if that's the best way, then that's not so bad.
20:57 < jrowny> but I felt like I was missing something by doing it that way.
20:57 < TooTallNate> jrowny: *if* js had .equalTo(), then your .indexOf() idea would be the best way
20:58 < syskk> is there a good reason why module._compile is not documented in the API?
20:58 < TooTallNate> syskk: what do you need it for?
20:58 < jrowny> yea, oh well.
20:58 < CoverSlide> underscored properties are generally not part of the public API
20:59 < syskk> TooTallNate: I don't know, I saw it in Coffescript source and somewhere else. I use it to load compiled Typescript code in require.extensions[
20:59 < CoverSlide> and often not meant to be used except internally
21:00 < TooTallNate> syskk: the "right way" is to compile the JS up-front
21:00 < syskk> well I just copied what coffeescript does, maybe theres a better way‚Ä¶ it seemed better than eval
21:00 < tjholowaychuk> isaacs: is there an easier way to install npm from the tarballs?
21:00 < tjholowaychuk> it would be awesome if the tarballs had  $ make install
21:00 < tjholowaychuk> or something
21:00 < TooTallNate> tjholowaychuk: hahahah
21:00 < TooTallNate> isaacs wants that too
21:00 < tjholowaychuk> im looking at install.py
21:00 < tjholowaychuk> and thinking
21:00 < tjholowaychuk> this is madness
21:00 < syskk> TooTallNate: why is it better to compile the JS up-front?
21:00 < sinclair_> syskk: you plugged in the TS compiler too?
21:00 < TooTallNate> tjholowaychuk: why don't you use curl | tar?
21:01 < tjholowaychuk> ?
21:01 < tjholowaychuk> i am
21:01 < tjholowaychuk> the tarball is just like
21:01 < syskk> sinclair_: yea, well just spawning a process for now
21:01 < tjholowaychuk> here's some files
21:01 < tjholowaychuk> to splat all over your fs
21:01 < TooTallNate> tjholowaychuk: it's just 1 dir deep, so use --strip=1
21:01 < TooTallNate> and then you can extract the files anywhere
21:02 < sinclair_> syskk: you added something on require to do that? (sorry, not so familar with all the nodejs conventions)
21:02 < tjholowaychuk> TooTallNate good call ill try
21:02 < sinclair_> require.extensions 
21:03 < syskk> sinclair_: you can dig in the code, require-typescript is not very pretty though, more like a hack right now. https://github.com/olalonde/better-require
21:03 < FunnyLookinHat> Do most people writing NodeJS stuff write it in normal JS or use something like Coffeescript ?
21:03 < TooTallNate> i don't get why people don't wanna just compile to JS before running node...
21:04 < sinclair_> syskk: compiling is fairly trivial, i was going to fluff around with the TS AST stuff when i got around to it
21:04 < TooTallNate> require.extenstions sucks
21:04 < tjholowaychuk> FunnyLookinHat everyone uses coffeescript
21:04 < FunnyLookinHat> darn.
21:04 < FunnyLookinHat> I don't want to learn coffee.
21:04 < syskk> agreed
21:04 < LouisT> i don't use coffeescript
21:04 < syskk> FunnyLookinHat: I believe he is trolling
21:05 < FunnyLookinHat> oh thank god
21:05 < syskk> sinclair_: personally, I'm a fan of vanilla JS but wrote that lib just to experiment quickly with some other dialects
21:08 < FunnyLookinHat> Anyone here gotten socket.io to work on Cloud9 IDE ?  I'm pretty sure their proxying techniques are standing in the way...
21:08 < sinclair_> syskk: im a fan of the type checking, arrow function, refactoring goodness in VS, and AMD and commonjs compiler options, node doesn't necessarily warrant all of that tho (not by what ive seen with the billions of 50 line npm projs out there)
21:08 < sinclair_> syskk: but there is potential in the AST
21:08 < syskk> sinclair_: VS?
21:09 < sinclair_> Visual Studio
21:09 < syskk> right
21:10 < syskk> I do like type hinting as long as it doesn't get in the way
21:10 < rideh> Just getting started with node here. everyone seems to be using different modules to do the same thing. Specifically mongojs vs mongoose
21:10 < syskk> but static type checking.. not sure
21:11 < sinclair_> syskk: type checking is good
21:11 < jrowny> mongoose has a lot of functionality that perhaps not every project needs
21:11 < rideh> mongoose looks to try to be more of an orm?
21:11 < sinclair_> syskk: i can't understand why people wouldn't want it
21:11 < CoverSlide> mongoose is an odm
21:11 < sinclair_> syskk: TS doesn't exactly force you into it, it suppose ambient declarations which are exactly what you use in vanilla JS
21:11 < syskk> sinclair_: it depends‚Ä¶ it can also slow you down.
21:11 < CoverSlide> if you don't want orm-like functionality, use mongojs
21:12 < syskk> sinclair_: ah ok, that's what I meant
21:12 < sinclair_> syskk: slow you down?
21:12 < syskk> by type hinting
21:12 < sinclair_> syskk: type hinting is awesome
21:12 < syskk> sinclair_: development time -wise
21:12  * CoverSlide hugs AS3
21:12 < tjholowaychuk> isaacs nevermind nathan's solution worked good
21:13 < jrowny> refactoring is also a lot easier
21:13 < CoverSlide> and Flex Builder
21:13 < sinclair_> syskk: i would like to see async/await in TS, but this would be going against any specification 
21:13 < CoverSlide> tjholowaychuk: s/good/well/
21:13 < jrowny> refactoring is just about the easiest thing in the world in FlexBuilder
21:13 < mguillen> Testing this tool
21:13 < sinclair_> and people hate MS when they go out on a limb and do cool stuff like that
21:13 < CoverSlide> mguillen is a tool?
21:14 < syskk> I have kind of a love/hate relationship with JS
21:14 < syskk> any psy out there?
21:15 < syskk> at the same time I don't like the fragmentation javascript-like languages are causing
21:16 < CoverSlide> psy?
21:16 < sinclair_> syskk: you mean like TS and CS?
21:16 < CoverSlide> gangnam style?
21:17 < syskk> sinclair_: yea
21:17 < CoverSlide> and coco and livescript and tamejs and iced coffeee script and dar
21:17 < syskk> CoverSlide: lol
21:17 < sinclair_> syskk: me too actually
21:17 < CoverSlide> *dart
21:17 < jrowny> don't forget dart
21:17 < sinclair_> syskk: but lets be honest, JavaScript is a mess
21:17  * sinclair_ misses integers
21:18 < CoverSlide> and traceur
21:18 < syskk> sinclair_: yea‚Ä¶ but it has good parts as well. If only we could go back to 1997? and design it properly 
21:20 < gildean> like doug crockford says: just choose not to use the bad parts
21:20 < sinclair_> syskk: what node needs is a managed runtime, perhaps you do something fancy with V8 
21:20 < syskk> right
21:20 < syskk> sometimes you can't just avoid the bad parts
21:21 < niklasfi> hey, has someone tried to use fs.watch on /proc/?
21:21 < jrowny> like the fact that it's missing equalsTo
21:21 < syskk> like checking types of variables is a complete mess
21:21 < jrowny> although, so is AS3
21:21 < sinclair_> when thinking about node and vm's, dart makes a lot of sense
21:21 < sinclair_> even more, as multiple languages could target the vm
21:22 < CoverSlide> niklasfi: how about you do that and tell us how it works out?
21:22 < chovy> howdy
21:22 < CoverSlide> chovy: yo
21:22 < syskk> well I would still rather have javascript than learning a dozen of languages that compile to JS
21:22 < niklasfi> CoverSlide: well it does not really for me‚Ä¶ http://paste.ubuntu.com/1324895/
21:22 < syskk> maybe I'd consider switching if one of them became more prevalent than Javascript
21:23 < niklasfi> CoverSlide: it does not output anything even if i start processes (which should create directories for the pid in /proc)
21:23 < CoverSlide> oh well
21:23 < CoverSlide> probably for the best
21:25 < CoverSlide> Maybe has something to do with FSEvent binding
21:25 < syskk> http://www.linuxquestions.org/questions/programming-9/inotify-does-not-work-on-proc-660591/
21:25 < CoverSlide> and not working on things like procfs
21:25 < chovy> whats the easiest way to allow users to login with twitter?
21:25 < syskk> https://bugs.launchpad.net/ubuntu/+source/linux/+bug/454722
21:25 < CoverSlide> oauth?
21:25 < syskk> chovy: Passport is a nice library for that
21:26 < syskk> chovy: very easy to set up
21:26 < sinclair_> syskk: not to talk about MS too much, but the new compiler as a service stuff coming out (Eventually) will allow for language translation
21:26 < MI6> joyent/node: Shigeki Ohtsu master * 148f5e6 : build: fix default dtrace flag on Linux  DTrace on Linux should not be en - http://git.io/HEq5Yg
21:26 < sinclair_> meaning you could pick any language you want, and convert it to anything else
21:27 < syskk> sinclair_: what do you mean language translation?  transpiling from C++ to JS or what? :D
21:27 < syskk> like emscripten
21:27 < syskk> sinclair_: it's a tough problem
21:28 < sinclair_> syskk: yes, it is, microsoft have working translations between VB and C#, 
21:28 < chovy> syskk: thanks
21:28 < niklasfi> CoverSlide: thanks. just found it's a bug with ubuntu since '10
21:29 < syskk> I feel JS hits the sweet spot between functional programming and OOP ‚Ä¶ but some parts are really just a mess
21:29 < sinclair_> syskk: also, IL reflections tools have been able to translate between C#, VB, F#, IL and all over the place for years :)
21:29 < aandy> sinclair_: that's not really translations between VB and C#, it's IL, which VB, C#, F# etc. compiles to
21:29 < sinclair_> aandy: yup
21:30 < sinclair_> aandy: Roslyn opens all that up, (outside of having to compile first and reflect back) 
21:31 < syskk> sinclair_: by the way, if you're interested in that stuff there is a clang binding for Node.js , just played with it today https://github.com/tjfontaine/node-libclang
21:31 < syskk> sinclair_: I'm really not interested in MS languages at all unfortunately
21:31 < syskk> sinclair_: although C# does seem neat and has an open source implementation
21:31 < sinclair_> aandy: im pretty sure MS figured they needed it. have you seen all the crazy compilation hackery going on with things like dynamics and async/await in .net nowadays
21:31 < syskk> ok maybe I'd do an exception for C# 
21:31 < syskk> :D
21:32 < CoverSlide> except most libraries not made specifically for mono break on mono
21:32 < syskk> yea so have I heard
21:32 < dshaw_> I like tattoos too. http://dshaw.me/U1Iwme
21:33 < sinclair_> syskk: F# might gain some ground one of these days
21:33 < niklasfi> would someone else have an idea on how to watch for new processes to be created?
21:33 < syskk> sinclair_: yea, actually also heard good stuff about F#
21:33 < jrowny> I know some people who love F#
21:33 < syskk> sinclair_: but hate the idea of being locked in by one vendor
21:33 < CoverSlide> It's basically just OCaml + .NET
21:34 < sinclair_> once you go F#, you don't want to go back
21:34 < syskk> is it purely functional or is it a mix?
21:34 < sinclair_> its a mix
21:34 < syskk> cool
21:35 < CoverSlide> it's an `impure` functional language
21:35 < syskk> I'm learning Haskell at the moment, it's pretty rough at the beginning
21:35 < sinclair_> CoverSlide: haha, that's not a bad thing :D
21:36 < sinclair_> syskk: here is a awesome site for learning F# http://www.tryfsharp.org/ its all.... interactive 
21:36 < CoverSlide> oh ... silverlight
21:37 < syskk> sinclair_: but what's the point.. I haven't used windows in ages..
21:37 < CoverSlide> guess I can't use it on my linux box
21:37 < context> sinclair_: an
21:37 < context> sinclair_: an awesome
21:38 < syskk> if only MS put in more effort to make their developer tools and programming languages cross platform
21:38 < syskk> but I guess they don't have an incentive to do so
21:38 < CoverSlide> they have incentive to do the opposite
21:39 < sinclair_> that doesn't make them evil, it makes them...a business
21:39 < CoverSlide> just like all ios tools are mac-only
21:39 < CoverSlide> /lastlog evil
21:39 < context> coverslide: well you dont really interact with apple store etc etc etc without os x
21:39 < CoverSlide> ... noone mentioned evil here
21:40 < context> you just compared a programming language to an operating system
21:40 < syskk> sinclair_: yes it doesn't make them evil, that's not my point. but it does make me want to not use their programming languages 
21:40 < chovy> chapel: hey
21:40 < chapel> chovy: yeah?
21:41 < chovy> chapel: are you guys using passport for geeklist?
21:41 < chovy> to connect with twitter
21:41 < chapel> chovy: no
21:41 < chovy> roll-your-own?
21:41 < sinclair_> syskk: the languages are standardized, the frameworks just need porting over
21:42 < chapel> chovy: correc
21:42 < chapel> correct
21:43 < syskk> sinclair_: right
21:43 < syskk> let's say MS is hard to trust
21:43 < rideh> is there a site like djangopackages.com for node.js? I'm having a hard time with google pulling up stuff that's too old, keep findign dead projects
21:43 < CoverSlide> rideh: npmjs.org ??
21:43 < sinclair_> syskk: yeah, id go with that
21:43 < syskk> there could be some patents creeping in there
21:44 < nlf> or uh.. toolbox.no.de
21:44 < syskk> rideh: you mean like www.npmjs.org or something specifically for web apps?
21:44 < Rukan> should my module expose all its internals through 'this', or should I fake private members at the expense of using prototype?
21:44 < rideh> CoverSlide: , syskk  thanks i'll start with this
21:44 < Rukan> http://stackoverflow.com/questions/9270079/structuring-a-nodejs-module-variables-and-methods this question is relevant
21:44 < danheberden> define "expense"
21:44 < bfrog> is there an ordered map in node that doesn't suck?
21:44 < syskk> sinclair_: anyways, F# does seem pretty neat
21:45 < sinclair_> syskk: yeah, its pretty cool and expressive
21:45 < CoverSlide> ok what do people use with chrome for blocking ads? and what's the difference between adblock and adblock plus?
21:45 < Rukan> I can't access 'private' variables from the prototype, so I'd have to ditch it and define all the methods inside the constructor
21:45 < syskk> bfrog: what do you mean by ordered map?
21:45 < nlf> isaacs: care to weigh in on why the functions i just wrote are so significantly faster than core buffer functions? https://github.com/nathan-lafreniere/node-butils
21:45 < jrowny> wait, why can't you access private variables in prototype?
21:46 < Rukan> see the first block of code in the question I linked
21:46 < opus_> hey are people still meeting up in Portland for node.js?
21:46 < jrowny> Rukan, that's a closure problem
21:46 < CoverSlide> umm there are no private variables
21:46 < CoverSlide> just variables that aren't in scope
21:46 < Rukan> that's why I used scare quotes
21:47 < jrowny> I'm confused
21:47 < Rukan> basically, stuff I'm not exposing
21:48 < wltsmrz> You could do something like this for example Rukan https://gist.github.com/1c24379c35bd860ea711
21:48 < Rukan> how is this relevant
21:49 < wltsmrz> Or you could define a 'self' variable equal to 'this' outside of the db function, and just acess it.
21:49 < wltsmrz> Did I address the wrong person?
21:49 < wltsmrz> http://stackoverflow.com/questions/9270079/structuring-a-nodejs-module-variables-and-methods
21:49 < jrowny> what you're asking is if you should use prototype or not?
21:50 < Rukan> yes
21:50 < jrowny> I think it's a personal preference. I prefer attaching to prototype as the first answer
21:50 < jrowny> but others probably thinkg differently
21:50 < Rukan> but then you'd expose stuff you'd rather not
21:50 < Rukan> I'm asking if there's some kind of an accepted practice
21:51 < jrowny> yea, I come from an OO background too and one thing I've learned is that you juts have to let go a little
21:51 < jrowny> just*
21:51 < syskk> if you want private properties, just go with naming conventions
21:51 < jrowny> typically begin the variable with _
21:52 < syskk> but the runtime wont enforce anything 
21:52 < jrowny> and that's the "letting go" part I referred to, ha.
21:52 < syskk> you can also annotate with jsdoc /* @private ‚Ä¶ */  if i recall correctly
21:52 < syskk> right
21:52 < wltsmrz> You could also make the properties non-enumerable.
21:53 < Rukan> just to be clear, I'm asking which of the two is more 'standard': http://privatepaste.com/75e0ec57a9
21:53 < CoverSlide> Rukan: familiarize yourself with the pythonism "We're all consenting adults here"
21:53 < mscdex> Rukan: second, but if you want to "hide" db then prefix with an underscore
21:53 < context> haha
21:53 < jrowny> I don't think one is more standard
21:54 < syskk> Rukan: the second one is more common and the one I would recommend
21:54 < jrowny> pick the one you like
21:54 < jrowny> I prefer the second one as well
21:54 < mscdex> Rukan: clarification: use the second if you plan on having many instantiations of User
21:54 < jrowny> but there are a few blog posts on howtonode which argue against it
21:54 < context> id say neither
21:54 < syskk> the problem with the first one is that you declare your function over and over again if you instantiate your class many times, this will eat more memory
21:54 < context> err... yeah nm
21:54 < mscdex> Rukan: the first one makes copies of all the User functions every time you instantiate
21:54 < CoverSlide> often "private" methods are attached to the prototype and begin with an underscore to denote they are not public
21:55 < jrowny> one thing I've done... if I have a private method, I just don't put it on prototype and I don't put it in exports
21:55 < mscdex> Rukan: if User is a singleton, then the first way is fine
21:55 < jrowny> if it needs vars from the instance, I pass them
21:55 < syskk> in node.js you can simply keep variables outside your function and use them as "private variables"
21:56 < jrowny> but I'm very new to Node.js and haven't used javascript much since I was 12
21:56 < syskk> var priv = 'top secret';   function User() {console.log(priv);}   User.prototype.blblalblab = function() {} ‚Ä¶ 
21:57 < syskk> if im not mistaken
21:57 < jrowny> btw, I found this answer to be very helpful as a newbie: http://stackoverflow.com/questions/1595611/how-to-properly-create-a-custom-object-in-javascript
21:57 < Rukan> yeah, but that won't work if priv is different for each User object
21:57 < jrowny> coming from an OO background
21:57 < syskk> that being said it wont be an "instance" variable .. more akin to a class variable
21:58 < syskk> just use naming conventions for private instance variables.. that's the most common way to do it in node.js world
21:59 < dshaw_> Wow, 900. That's crazy.
21:59 < CoverSlide> 900 penises?
22:00 < syskk> after all, "private" variables were never designed for security
22:00 < syskk> they've always been there for documentation
22:00 < jrowny> and to keep yourself from doing silly things
22:00 < cesidio> Good evening everyone. 
22:00 < syskk> right
22:01 < cesidio> A quick question.  When trying to run 'make',  I keep getting this error:
22:01 < cesidio> dtrace: failed to compile script src/node_systemtap.d: Preprocessor not found
22:01 < cesidio> Was wondering if anyone else has experienced this?
22:02 < Rukan> thanks for the input everyone
22:02 < syskk> nop!
22:02 < syskk> cesidio: where did you get the source from?
22:03 < CoverSlide> the seventh layer of hell
22:03 < cesidio> clone from github
22:03 < cesidio> https://github.com/joyent/node.git
22:03 < CoverSlide> that's a good location
22:03 < TooTallNate> cesidio: try pulling again, i think it was fixed ~an hour ago
22:03 < syskk> maybe the repo is not stable at the moment
22:03 < syskk> ah, there you go
22:03 < cesidio> ok thanks..  will give that a try
22:04 < TooTallNate> cesidio: but syskk is right, you should use one of the stable tags like v0.8.14
22:04 < TooTallNate> unless of course you're on bleeding edge on purpose ;)
22:05 < cesidio> cool..I'll checkout the tag.   No bleeding edge for me as you can see.  Thanks for help guys.
22:05 < cesidio> appreciate immensely
22:07 < syskk> happy to help
22:07 < styol> When the wiki says at the beginning, "Current stable version is 0.8" does that mean literally 0.8 would be recommended for production versus 0.8.14 or quite the opposite as 0.8.14 might include bug fixes and such?
22:07 < syskk> well TooTallNate is happy to help
22:07 < syskk> l
22:07 < CoverSlide> styol: 0.8 is the current stable major version
22:07 < syskk> styol: I'm guessing the wiki is not up to date most of the time
22:07 < TooTallNate> styol: you want v0.8.14
22:08 < gildean> styol: the subversions are always fixes etc.
22:08 < styol> thanks guys, much appreciated
22:08 < CoverSlide> 0.8.14 is the latest bugfix version
22:08 < CoverSlide> although i guess technically 0.8 would be the minor version
22:08 < styol> I'm guessing that on Ubuntu it would be recommended to compile from source versus whatever might be available via apt-get?
22:08 < syskk> www.semver.com right
22:08 < CoverSlide> if you were to follow semver literally
22:08 < syskk> oops semver.org
22:08 < CoverSlide> styol: there's a good ppa
22:09 < CoverSlide> styol: https://launchpad.net/~chris-lea/+archive/node.js/
22:09 < CoverSlide> people have ben recommending that one
22:09 < syskk> yea I usually compile from source on Ubuntu
22:09 < gildean> styol: just do sudo add-apt-repository ppa:chris-lea/node.js
22:10 < styol> CoverSlide: nice, thanks.. I'm not familiar with PPA, perhaps I should start there
22:10 < gildean> then apt-get update && apt-get install nodejs
22:10 < mscdex> you can also use the pre-built binary tarballs from nodejs.org :-D
22:10 < styol> so many choices! better than none haha :)
22:10 < gildean> styol: mine is the easiest
22:10 < CoverSlide> prebuilt binaries for linux? what are they insane?
22:11 < gildean> and will get you stable updates with apt
22:11 < styol> I'm looking more for best rather than easiest, but I understand best might be relative
22:11 < CoverSlide> best is to always drink your ovaltine
22:12 < syskk> anyone has tried appcelerator's titanium?
22:13 < syskk> stylus: just compile, works like a charm
22:14 < CoverSlide> i started looking into it, but mostly switched to phonegap
22:14 < styol> <3 thanks again guys
22:14 < purr> Let it be known that styol hearts thanks again guys.
22:14 < mscdex> hehe
22:14 < cesidio> Thanks all.   You were right.  My checkout version was the problem. All good now. 
22:14 < cesidio> Beers on me‚Ä¶.:)
22:14 < styol> purr: whoops, sorry for confusing your logic ;)
22:15 < cesidio> And @syskk, tried both titanium and phonegap.  Prefer phonegap.  I find it easier to use.
22:16 < syskk> cesidio: interesting. and performance wise?
22:16 < CoverSlide> appcelerator has the benefit of compiling to native, so i think performance may be better, but that's just an assumption
22:16 < syskk> I just had someone tell me not to go with phonegap
22:17 < syskk> ah ok
22:17 < CoverSlide> i haven't heard any complaints of phonegap's performance
22:17 < TooTallNate> CoverSlide: mmmmm, ovaltine :)
22:17 < wltsmrz> Is there a reason to not use Object.freeze for protecting private variables?
22:17 < wltsmrz> I was experimenting for Rukan's question.
22:17 < wltsmrz> Maybe something like this would be fine? https://gist.github.com/22fcee35973c35444351
22:18 < syskk> yea i think performance is more important for us than developer friendliness as the app is pretty simple 
22:19 < CoverSlide> ok
22:20 < cesidio> syskk:  no performance issues on my end.
22:20 < syskk> cesidio: ok thanks for feedback
22:20 < CoverSlide> i guess it depends on the app
22:20 < syskk> wltsmrz: guess that could be a work around if you dont need to modify your private variables later..
22:20 < CoverSlide> if you're making a high-performance game, it might just be best to go full native
22:21 < cesidio> syskk:  np.  BTW, the apps I have written were simple list type apps. No fancy games or eye candy
22:21 < syskk> well the app will just allow people to take pics and send it to our server basically. maybe with a note
22:21 < syskk> and probably some kind of feed eventually
22:22 < syskk> guess performance wont be an issue anyway
22:22 < wltsmrz> I don't know what a work around is but it does sound like a solution.
22:23 < syskk> cesidio: do you know which platform has more momentum right now?
22:25 < syskk> wltsmrz: depending on your definition of private. the variable are still read accessible. and you can't modify them from within your object which is quite a restriction
22:25 < syskk> \
22:26 < cesidio> syskk: I think phonegap
22:26 < syskk> cesidio: ok, that's my feeling too
22:27 < cesidio> syskk:  You might this an interesting read.
22:27 < cesidio> http://www.universalmind.com/mindshare/entry/mobile-html5-phonegap-vs-appcelerator-titanium
22:27 < Lando_Calrissian> http://www.universalmind.com/mindshare/entry/mobile-html5-phonegap-vs-appcelerator-titanium
22:28 < CoverSlide> too slow, Lando!
22:29 < mscdex> Land'oh
22:30 < syskk> cesidio: excellent comparison, thanks for the link
22:30 < cesidio> @syskk:  anytime
22:33 < raj> how do I update my version of Node?
22:33 < raj> i'm currently at 0.5.5
22:33 < CoverSlide> download and compile
22:33 < CoverSlide> or download binaries
22:33 < CoverSlide> from the home page
22:40 < jrajav> raj: What OS are you on?
22:41 < rideh> any recommendations on templating engines to use with express?
22:41 < slajax> rideh: jade
22:41 < cellvia> lol
22:41 < jrajav> You generally shouldn't just download the binaries, and you certainly shouldn't compile from source; not unless you're developing
22:41 < cesidio> @rideh:  dot.js
22:42 < SulfaTueuR> hi
22:42 < cesidio> rideh:  https://github.com/cstigler/express-dot
22:42 < jrajav> syskk: Go with phonegap man. It's more open, more sane, more mature, and has a brighter future.
22:43 < rideh> i'm using cordova myself - its pretty slick
22:43 < cesidio> rideh: cordova is phonegap
22:44 < rideh> cesidio:  oh i'm aware, just not sure if we're supposed to call it by new name or old name 
22:44 < cesidio> rideh:  no worries
22:45 -!- mode/#node.js [+o piscisaureus_] by ChanServ
22:45 < rideh> cesidio: any docs for dot.js?
22:46 < cellvia> streams are tripping me out
22:46 < cesidio> rideh: http://olado.github.com/doT/
22:47 < wltsmrz> Good tripping, cellvia?
22:47 < cellvia> yeah... well im sitting here at work coding and contemplating reality so i geuss good for me, maybe not for my productivity ;)
22:47 < cellvia> everything is streams
22:48 < wltsmrz> Indeed, far out
22:48 < cellvia> I never thought I could include a sentence like this in an email as a consultant "So where do the streams end? The ocean ie The internet?  Or Our retina? Pipe through optic nerve, frontal cortex, interpretation , written as memories, piped to dreams, into a dream journal, subect to further analysis, our art, unconscious motivating factors, daily decisions, karma, etc ... ?"
22:49 < CoverSlide> cellvia: what have you been smiking?
22:49 < CoverSlide> *smoking
22:49 < cellvia> Ive been smoking nodejs man
22:49 < rideh> that shit's strong
22:50 < cellvia> i know man ive been mainlining it for the past 2 weeks like 10~12 hrs a day o_O
22:50 < cesidio> rideh:  here is a perf test as well.
22:50 < cesidio> http://jsperf.com/dom-vs-innerhtml-based-templating/570
22:51 < wltsmrz> Subterranean lizard-people, cellvia.
22:51 < wltsmrz> Notice that the 'js' is green? Think about it.
22:51 < cellvia> hahaha
22:52 < cellvia> they got nothing on me
22:52 < cellvia> money is green too, shit
22:53 < cellvia> who did all the nodejs design work anywys
22:53 < chovy> chapel: did you use node-oauth
22:54 < sinclair_> cellvia: you?
22:55 < chapel> chovy: for twitter, yeah, but you could easily use request from mikeal
22:55 < cellvia> I would have done it differently i think, not that i strongly dislike it but yeah
22:58 < flexd> uh, is npm built into node these days?
22:58 < TooTallNate> flexd: not "built-in", but "comes with"
22:58 < TooTallNate> in the installers and such
22:58 < flexd> I think my npm is old or something, its trying to reach registry.npmjs.org
22:58 < flexd> which does note xist
22:58 < flexd> I have npm 1.1.65
22:59 < TooTallNate> flexd: that's newer than mine :p
22:59 < flexd> Hm, odd.
22:59 < TooTallNate> registry.npmjs.org is the correct address
22:59 < flexd> well, its dead.
22:59 < wltsmrz> Seems dead for me too :<
23:00 < TooTallNate> flexd: http://www.downforeveryoneorjustme.com/http://registry.npmjs.org/
23:00 < flexd> Yeah, tried that..
23:00 < sinclair_> cellvia: shh now ok?
23:00 < flexd> curl: (6) Couldn't resolve host 'registry.npmjs.org'
23:01 < flexd> That
23:01 < flexd> That's slightly odd
23:01 < cellvia> sinclair_:  on second thought i mean, nodejs is a little nerdy so the design is all good...  it feels kind of modern stylishly nerdy ... perfect for us ;)
23:02 < wltsmrz> Who is us, cellvia?
23:03 < cellvia> i'll leave that up to the reader 
23:03 < sinclair_> does anyone know any good articles on node application architecture ?
23:03 < cellvia> peace.out(yall)
23:04 < sinclair_> cellvia: calm down
23:04 < TooTallNate> he's gone
23:04 < wltsmrz> Like the snowdens of yesteryear
23:05 < shesek> npm servers are down?
23:05 < wltsmrz> Seems down for me, shesek
23:05 < sinclair_> so, who here has thoughts on node application architecture ?
23:05 < flexd> Ha, I'm not alone !
23:06 < sinclair_> i have heard suggestions of spawning child processes and streaming data in and out of them
23:06 < sinclair_> which would lend itself well to SOA patterns
23:06 < flexd> sinclair_: Wouldn't it be better to have a load balancer in front of several node processes (and servers)
23:06 < tchopper_> sinclair_: I found some good examples onthe Express FAQ page: http://expressjs.com/faq.html
23:07 < tchopper_> Look at the "How should I structure my application?" question.
23:07 < sinclair_> tchopper: not file structure i hope
23:08 < sinclair_> flexd: there is more to applications than just the web server
23:08 < tchopper_> sinclair_: File structure is part of it, but it covers a few strategies for separating functionality; building loosely coupled software.
23:08 < flexd> You could load balance anything :p
23:09 < sinclair_> flexd: well, with the child_process  and streaming approach, it does sound nice in theory, but i don't often have the need to stream data between components, rather message pass
23:09 < sinclair_> so im more interesting in pub/sub queues and the like
23:09 < sinclair_> *interested 
23:14 < flexd> I've been playing with a child proccess running a python script to do some readings from a access card scanner at work lately
23:14 < flexd> It works fairly well but you would need some trickery to keep the process running in case of problems and so on
23:15 < sinclair_> flexd: hmmm
23:15 < flexd> and for an actual bigger system doing something important with more than 1 "client" per time I would rather have server processes either communicate via some kind of network instead of doing it like that
23:16 < flexd> The system I'm designing is just grabbing a value of RFID cards to automatically be able to queue up and create support tickets for a helpdesk
23:16 < flexd> a value from 
23:16 < flexd> *
23:16 < flexd> npm registry seems up again :)
23:16 < flexd> now if only I could remember what I was doing :p
23:17 < raj> jrajav, ubuntu
23:18 < jrajav> raj: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
23:18 < jrajav> Section on Ubuntu
23:20 < raj> jrajav, but I'm updating my currently downloaded one
23:20 < raj> not sure if I got it through the package manager or not
23:21 < raj> also, why do I need python software properties?
23:21 < rideh> readymade?
23:36 < raj> rideh, readymade?
23:36 < raj> what's that?
23:36 < rideh> http://poulejapon.github.com/readymade/
23:38 < jesusabdullah> cute
23:38 < jesusabdullah> though
23:38 < jesusabdullah> I dislike coffeescript
23:38 < jesusabdullah> could be cool for, like
23:38 < jesusabdullah> browserify stuff
23:38 < jesusabdullah> and less
23:39 < jesusabdullah> though
23:39 < jesusabdullah> I'm imagining this api where you can ftp content to the server and it serves up the built version of whatever you ftp'd over there
23:39 < jesusabdullah> or scp
23:39 < jesusabdullah> I like scp better
23:43 < rideh> I'm just looking for an example node project with express+jade+less, mongoose. even better with passport etc. but I'm having a lot of trouble finding anything that works
23:47 < cesidio> rideh:  http://clock.co.uk/tech-blogs/a-simple-website-in-nodejs-with-express-jade-and-stylus
23:48 < cesidio> rideh:  https://github.com/madhums/nodejs-express-mongoose-demo
23:48 < rideh> perfect, my googlefu has been failling me, i have about 82 tabs open all full of old stuff
23:48 < cesidio> rideh:  second link is the one you are looking for
23:49 < jrajav> rideh: You need to learn how to bookmark things mate :P
23:51 < rideh> jrajav: too many as it is somewhere in the neighborhood of 2500 last count
23:51 < jrajav> You need to learn how to organize your bookmarks mate?
23:51 < rideh> no time to clean em up, but development system admin and tech work on a plethora of platforms is‚Ä¶. rediculus
23:52 < rideh> jrajav:  more o a matter of whishing i could focus on one tech
23:52 < jrajav> I focus on tons of tools too, I probably bookmark two dozen things a day, but I manage to stay organized with just a single level of folders
23:53 < jrajav> I guess it's just a matter of making the organization a habit, and trusting your system
23:53 < rideh> jrajav: the problem isnt where i've been, its finding what i need
--- Log closed Fri Nov 02 00:00:41 2012
