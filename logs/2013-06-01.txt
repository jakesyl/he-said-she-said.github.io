--- Log opened Sat Jun 01 00:00:29 2013
--- Day changed Sat Jun 01 2013
00:00 < wathek> brycebaril, which is better Redis or Memcached ?
00:01 < brycebaril> wathek: They are designed serve different purposes, it depends on what you need
00:01 < wathek> brycebaril, caching with TTL
00:07 < NotMyself> I think i just threw up in my mouth a little bitâ€¦. http://www.wintellectnow.com/Videos/Watch/enterprise-javascript-best-practices
00:08 < owen1> when not using express, i always pass my dependencies into my routes, like this - https://github.com/oren/node-website-template/blob/master/routes/home.js     how do i pass my config object when using express?
00:09 <@isaacbw> NotMyself: it's behind a paywall
00:09 < NotMyself> isaacbw: just the phrase "enterprise javascript" is vomit inducing
00:10 < Zolmeister> owen1: maybe make config it own module, then require() it
00:11 < _6a68> owen1: just have a look on github at how some other express-driven projects do it. there's no one way :-)
00:12 < owen1> Zolmeister: https://github.com/visionmedia/express/blob/master/examples/mvc/controllers/pet/index.js    that's an example that TJ uses. a bit simplistic but he require his 'db' from the route / controller itself
00:12 < owen1> i don't think it's a good practice to require my dependencies at the route.
00:13 < Zolmeister> why not?
00:14 < owen1> what if i need to use the same db connection on more routes?
00:14 < owen1> that's why i like to pass it from the server.js into any function that needs it
00:14 < owen1> i guess if i have index.js as the central place for my routes, i can do that'
00:15 < owen1> i just find get('foo', function(req, res) limiting
00:20 < eob> Hi node.js folks -- quick question: "member variables" of a class instance are coming up undefined in an unexpected way. 
00:20 < eob> Here is a gist sketching the problem
00:20 < eob> https://gist.github.com/eob/5688792
00:20 < Zolmeister> owen1: node caches locally required modules
00:20 < eob> I'm new to node so wanted to just run what I'm trying to do by you in case I"m violating some assumptions it makes about statefulness...
00:21 < ljharb> eob: js has no classes.
00:21 < eob> ljharb: I'm well aware, which is why I put "member variables" in quotes :)
00:21 < ljharb> when you call the reference to rc.printA, you lose the context of "this"
00:21 < eob> ljharb: If there is a proper term for "the method of programming which simulates member variables" let me know
00:21 < ljharb> try rc.printA.bind(rc)
00:22 < ljharb> "prototypical inheritance", or "behavior delegation"
00:22 < eob> ljharb: thanks -- will try
00:22 < eob> right -- that is the term for the strategy
00:22 < eob> what is the term which references a property which has been set in the method which pretends to be a constructor
00:23 < ljharb> i suppose an "instance property" is the closest
00:23 < eob> ljharb: that solution worked like a charm. Thanks a lot! 
00:23 < ljharb> np
00:24 < samholmes> Is it ok to post Stack Overflow questions here?
00:26 < ashnur> damn. i am failing with this appcache thing. once i sent the files, i can't refresh them only if i manualy delete them from the appcache
00:26 < ashnur> not even when the manifest file updates will the files changed
00:27 < ljharb> samholmes: ask anything you like. ideally on topic.
00:27 < ljharb> appcache is awful.
00:27 < samholmes> http://stackoverflow.com/questions/16867001/how-to-schedule-a-job-once-every-thursday-using-kue
00:27 < samholmes> there you go then :D
00:27 < ljharb> it's incredibly difficult to test anything with that stuff
00:27 < ashnur> ljharb: you mean appcache? because i completely agree if you meant that
00:28 < ljharb> yes
00:28 < ljharb> html5 offline whatnot
00:28 < ljharb> samholmes: that's a question for the kue developers
00:28 < ljharb> not really node-specific
00:29 < ashnur> yeah. i can see now why people are not using it more often
00:29 < samholmes> ljharb: kue is a node module
00:29 < ljharb> ashnur: i built one of the very first apps that used it, back in 2010. and it was a NIGHTMARE.
00:29 < ljharb> samholmes: lol sure, but only kue people know how it works. hopefully someone in here can help you
00:29 < samholmes> ljharb: tj would know
00:30 < samholmes> but he's never around
00:30 < samholmes> he smokes pot
00:30 < ashnur> ljharb: i would have no problem if it would really refresh the files when the manifest file changes, but apparently it does not
00:30 < ashnur> :(
00:30 < ljharb> what people smoke is irrelevant and has no correlation to whether they're around anywhere.
00:30 < ashnur> :D
00:30 < ashnur> i think i saw him today
00:30 < samholmes> ljharb: great observation!
00:30 < ljharb> ashnur: it's supposed to. but it usually doesn't. you can manually update it with JS, but you've got to get that in there *before* things are cached :-)
00:31 < ashnur> ljharb: i think i just give up on this until it will be very very important
00:31 < ljharb> yep
00:31 < ljharb> offline caching is a huge pain
00:31 < ashnur> now, i would like to smoke something, but i dont have anything so i just will go to sleep
00:32 < ashnur> gnite
00:32 < ljharb> night
00:32 < jesusabdullah> fresh out of crack :(
00:33 <@isaacbw> welp
01:24 < xp_prg> hi all, I want to be able to use the variable window to access global variables like in a browser
01:24 < xp_prg> I know I need to do smoething like this: GLOBAL.window = window;
01:24 < xp_prg> but I am not clear how to define window
01:29 < ljharb> xp_prg: the global isn't called "window". why do you want to do that?
01:29 < ljharb> it's a bad practice everywhere.
01:29 < xp_prg> well because it is like the browser
01:29 < xp_prg> I am writing for a browser not node.js proper
01:29 < xp_prg> I think it is this right;  GLOBAL.window = GLOBAL;
01:30 < ljharb> right. but you shouldn't use globals in the browser either.
01:30 < xp_prg> I am a mere mortal, understanding closures etc... scoping is not something I am that good at :(
01:31 < xp_prg> if you want to tell me a more elgant way I am happy to share what I am doing
01:32 < samholmes> OMG! BEER!
01:33 < ljharb> xp_prg: i can try. any way would be more elegant.
01:33 < ljharb> xp_prg: that said, you should try to learn scoping and closures.
01:43 < owen1> why does 'npm install git+ssh://git@github.com:yp-engineering/quai-mongo.git#v1.0.0'  show me: fatal: ambiguous argument 'v1.0.0': unknown revision or path not in the working tree.  ?   but it works without the version.
01:44 < Guest906> anyone here uses node-orm2
01:44 < Guest906> ?
01:44 < ljharb> owen1: because that's not the syntax for installing a version?
01:46 < ljharb> owen1: to install from a git repo, you have to give it a tarball. see https://npmjs.org/doc/install.html
01:48 < owen1> samholmes: can u use a cronjob that wakes up every thursday and pop items from kue?
01:48 < samholmes> owen1: that's what I was thinking of doing, but was wondering if Kue has the functionality alright
01:48 < owen1> ljharb: look at the example - git+ssh://git@github.com:isaacs/npm.git#v1.0.27
01:48 < samholmes> already*
01:49 < owen1> samholmes: never used it except for hello world. if it's not in the readme, u probably need to do it yourself.
01:50 < ljharb> owen1: huh. and is v1.0.0 a reference in that repo?
01:50 < owen1> samholmes: also, is kue gurranty any kind of durabilty? what if redis is down?
01:50 < owen1> ljharb: v1.0.0 is a version
01:50 < owen1> in package.json
01:50 < ljharb> right, that's irrelevant
01:51 < ljharb> is it a tag in the git repo?
01:51 < owen1> no
01:51 < ljharb> the convention is to have a "v1.2.3" tag for every semantic package.json version
01:51 < owen1> let me add tag. thanks
01:51 < ljharb> np
01:53 < owen1> samholmes: also, what if a worker died before completing it's job. will the message get lost?
01:53 < owen1> these are features that my sysem need, so i use rabbitMQ
01:53 < owen1> just curious
01:55 < owen1> ljharb: adding a tag is relevant only for modules that are installed with a url?
01:55 < ningu> if a worker dies before completing its job, the company will probably be sued
01:56 < deoxxa> god damn it ningu
01:56 < deoxxa> i just spat milk on my desk
01:57 < ningu> haha
01:57 < ljharb> owen1: no, it's always a best practice. people should be able to look at the code for the version they're interested in.
01:58 < ljharb> owen1: `npm version` will do that for you, for example.
02:00 < skynetsys> ningu make a t-shirt
02:00 < owen1> oh. so i add some stuff to my lib, commit, push it and run 'npm version 1.2.3' and i am done?
02:01 < ningu> skynetsys: what would the t-shirt say?
02:01 < ljharb> owen1: or just `npm version`. but yeah
02:01 < ljharb> owen1: oh, you have to `git push --tags` after the tag is made
02:01 < deoxxa> ningu: nothing - it'd just have your face on it
02:01 < ljharb> you can also just manually make a tag
02:01 < ningu> I have one of the "now keep calm and carry on" t-shirts that says "now panic and freak out"... was thinking today there could be a version that said "now picnic and camp out"
02:01 < ljharb> owen1: you want the commit you `npm publish` to be the one that's tagged.
02:03 < skynetsys> need nodejs bot to publish to http://www.customink.com/
02:03 < owen1> ljharb: cool
02:05 < samholmes> owen1: what's rabbitMQ?
02:08 < owen1> samholmes: http://www.rabbitmq.com/  queueing server, written in erlang and can handle 10-100k messages per second (depends on how much durability u need)
02:09 <@Nexxy> erlang is bestlang
02:10 < owen1> lal
02:10 < owen1> lol
02:10 < xp_prg> I don't know much about erlang
02:10 < substack> erlang is the mullet of programming languages
02:10 < substack> it was so cool in the 80s you had to be there
02:10 <@mbalho> its the goddamn viking language
02:10 <@Nexxy> unless you plan on wearing cosby sweaters for the rest of your life
02:10 <@Nexxy> don't bother
02:11 < ningu> substack: but unlike mullets, not everyone now laughs at it, it seems
02:11 < xp_prg> I hate to say it, but I like interpreted languages and I also like simplicity for api usage by others so I go with python
02:11 < M2Ys4U> I think that's what people be saying about Haskell in 15-20 years
02:12 < xp_prg> I don't know what else I should learn/do, its like drinking from a fire hose
02:12 < xp_prg> all I know is I love expert systems
02:12 < M2Ys4U> obviously, replace mullet with whatever the sterotype for the 00's/10's :P
02:12 < xp_prg> I already feel like I know more than 90% of developers out there
02:12 < xp_prg> yet I can't stop myself from learning more
02:13 <@mbalho> classic knowledge vs wisdom
02:13 <@Nexxy> where's stone phillips?!
02:13 <@Nexxy> wait a minute, this isn't Dateline
02:13 < substack> "descriptive" apis will be the mullets of our age
02:13 < xp_prg> I want to help people get things done, that is really it for me, anything that does that easier I want to learn and use
02:13 < substack> and "declarative"
02:13 < xp_prg> c++ and c did not help me do that as fast as perl and python
02:13 <@Nexxy> xp_prg, is that why you're here?!
02:14 < substack> and "opinionated"
02:14 < ningu> substack: what are descriptive apis?
02:14 < substack> ningu: exactly
02:14 <@Nexxy> wen are descriptive apis?
02:14 <@Nexxy> when*
02:14 < ningu> sinclair was in here the other day saying wsdl was useful for people in highly typed languages so they can generate json
02:14 <@mbalho> muffins().bake().inTheOven(450.degrees())
02:14 < deoxxa> why is a mouse when it spins?
02:14 < ningu> I didn't really understand the point, I don't see why json is hard to generate
02:14 < xp_prg> what I wish was a language that I could literally do a kind of context switch to a different language to use its strength and then switch back to another syntax/language mid stream
02:14 < ningu> even in a highly typed language
02:15 <@mbalho> YEA I OVERLOADED THE NUMBER PROTOTYPE WITH A .DEGREES CAUSE ITS PRETTIER THAT WAY
02:15 <@Nexxy> I SEE WHAT YOU DID THERE
02:15 < xp_prg> isn't that possible?
02:15 < deoxxa> 450..degrees() you mean
02:15 <@Nexxy> xp_prg, in soome languages it's even considered normal
02:15  * Nexxy shudders
02:15 < ningu> what, like php?
02:15 <@Nexxy> s-sure
02:15 <@mbalho> deoxxa: nah it was more of a prototranspilationatory strawman
02:15 <@Nexxy> let's say PHP
02:15 < substack> muffins().bake().inTheOven(450.degrees('fahrenheit')).takeOutWhen().theTime().is('>12 minutes')
02:16 < gkatsev> xp_prg: doesn't bash let you do that? :P
02:16 < ningu> head.bash()
02:17 < xp_prg> well here is what I know, multi threaded apps are the hardest thing I am aware of to code
02:17 < gkatsev> head.bash('desk').repeat(Number.Infinity);
02:17 < xp_prg> only c and c++ can even begin to do this in a rational way
02:17 <@mbalho> while (peopleWriteTheseAPIS) head.bash('desk')
02:17 < xp_prg> every other attempt i have seen is lame
02:18 < ningu> xp_prg: I thought Java had come up with a cleaner way to code threads, but maybe it doesn't work...
02:18 < xp_prg> node.js just gave up and when the event driven cooperative multi-tasking approach which is the easy way out
02:18 <@Nexxy> 'gave up'
02:18 < xp_prg> java uses inference to try to know if a data is shared or not, I don't like that
02:18 < ningu> xp_prg: I am thinking of the 'synchronized' keyword. but all I know is that it exists.
02:18 < xp_prg> ya I don't like that
02:19 < ningu> xp_prg: ok, but why?
02:19 < xp_prg> I want to explicitly set my protection on the shared data structure
02:19 <@mbalho> youre too smart for node, go use go
02:19 < xp_prg> what is go?
02:19 <@mbalho> and make them a good package manager while youre at it
02:19 < ningu> the opposite of go is come
02:19 < gkatsev> go is a japanese board game
02:20 < xp_prg> ya, if I was smart, I would actually create real threads for js
02:20 <@Nexxy> LOL
02:20 < xp_prg> and allow sanity come back into js coding
02:20 <@Nexxy> > threads
02:20 < gkatsev> trololol
02:20 <@Nexxy> > sanity
02:20 <@Nexxy> you're dne
02:20 <@Nexxy> done*
02:20 <@mbalho> xp_prg: http://lmgtfy.com/?q=go
02:20 < ningu> xp_prg: why are you so sure that threads are better than how node does it?
02:21 < gkatsev> reactive programming is even better than call/cc
02:21 <@Nexxy> xp_prg, it's an interesting perspective you're sharing
02:21 < xp_prg> look, callbacks are how the oldest form of hardware works with an operating system
02:21 < xp_prg> it is an ancient technology
02:21 < xp_prg> threads is the proper way to interrupt and allow for multitasking
02:21 < deoxxa> so are rocks
02:21 < deoxxa> but they still kick ass
02:21 < ningu> variables and memory are also ancient
02:22 <@Nexxy> 'proper'
02:22 <@Nexxy> someone's having opinions without realizing it
02:22 < substack> threads are too hard
02:22  * mbalho goes into node.js irc, makes fun of callbacks
02:23 < kuja> hah-hah! you silly fools and your prototypes!
02:23 < kuja> :p
02:23 < ningu> node is so into callbacks they even use them after job interviews
02:23 < jasonkuhrt> I'm trying to understand how to read/write/work-with numbers in Buffers, can someone point me to a good uber-beginner resource?
02:23 < xp_prg> substack threads are hard for sur
02:23 < ningu> jasonkuhrt: what do you mean 'numbers' exactly?
02:24 < gkatsev> things that aren't letters.
02:24 < jasonkuhrt> ningu: Well for instance there is an offset param that I don't fully understand
02:24 <@mbalho> jasonkuhrt: you can also look up tutorials on typed arrays and arraybuffers and it will probably help you understand what is possible with Buffers
02:24 < jasonkuhrt> whereas with strings I don't need to know much, Buffer('foo') done, etc.
02:25 < gkatsev> offset is how many bytes into the buffer to go
02:25 < jasonkuhrt> mbalho: okay thanks
02:25 < ningu> jasonkuhrt: the offset param is of type Number. just specifies the number of bytes... yes, what mbalho said.
02:25 < ningu> I mean what gkatsev said
02:26 < ningu> jasonkuhrt: so you are encoding numbers in a buffer, or what?
02:26 < jasonkuhrt> I have a tcp server with incoming numbers terminated by newline
02:26 < jasonkuhrt> I'm parsing the incoming stream therefore
02:26 < ningu> ok
02:27 < jasonkuhrt> but after terminating on the newline I need to extract a number from the buffered contents to actually work with
02:27 < ningu> do you know how many bytes each number is?
02:27 < jasonkuhrt> no
02:27 < jasonkuhrt> it can be 1 or 2 or 3 digits
02:27 < jasonkuhrt> well
02:27 < jasonkuhrt> 0-1023
02:27 < jasonkuhrt> that's what I know
02:27 < ningu> wait, is it a string?
02:27 < jasonkuhrt> I guess that depends on what the client is sending?
02:28 < jasonkuhrt> I belive so
02:28 < ningu> i.e. using ascii codes for digits 0-9 in a sequence of 1-3 characters?
02:28 < gkatsev> can't you just toString() the buffer if it's just string data?
02:28 < jasonkuhrt> I need numbers to do some logical > <= etc operations on
02:28 < ningu> yep and toString has 'start' and 'end' parameters
02:29 < xp_prg> I want a language that will become an expert system to help me solve problems if I want then go back to letting me write syntax
02:29 < ningu> jasonkuhrt: you can use Number(str) or parseInt(str, 10)
02:29 < xp_prg> like almost a person helping me
02:29 < xp_prg> is that crazy?
02:29 < jasonkuhrt> ningu: is there a performance hit to doing that? rather than the readInt... methods
02:29 < ningu> jasonkuhrt: you can't use readInt, if the data is as you describe
02:30 < xp_prg> I don't know what I am excited about anymore in programming
02:30 < jasonkuhrt> ningu: as an example if I telnet to my local tcp instance and give it 540\r\n
02:30 < gkatsev> xp_prg: threads, clearly :P
02:30 < jasonkuhrt> ningu: what does that mean to you
02:30 < xp_prg> does anything really excite anyone anymore?
02:30 < xp_prg> I don't see anything extremely new and ground breaking
02:30 < jasonkuhrt> ningu: like I said I need to read a primer on this most of all.. heh
02:30 < ningu> jasonkuhrt: that means you have given it 5 bytes, ascii '5', ascii '4', ascii '0', '\r', and '\n'
02:30 < ningu> it's an ascii string in base 10
02:30 < ningu> not a binary number
02:30 < jasonkuhrt> okay I see
02:31 < jasonkuhrt> ningu: makes sense
02:31 < xp_prg> the only thing I have been excited about is hardware
02:31 < xp_prg> everything is getting so damned cheap
02:31 <@Nexxy> omg did someone say hardware?
02:31 < jasonkuhrt> ningu: i'm working with a hardware engineer to broker the data types we want to use, I could ask him to change the incoming data
02:31 < ningu> jasonkuhrt: I don't really know what you're doing, but I wouldn't worry very much about converting a string to a number
02:31 < jasonkuhrt> ningu: is there generally a big performance win to be had from using byte numebrs
02:32 < jasonkuhrt> ningu: okay...
02:32 < ningu> sure, it's faster, but I would measure whether it really matters
02:32 < jasonkuhrt> ningu: certainly, okay
02:32 < ningu> the network transmission is going to take orders of magnitude longer than the string to number conversion
02:32 < xp_prg> I feel like a wow junky sometimes, I can solve things fast and everyone goes wow
02:33 < xp_prg> and I like it, but I feel like that is not the right motivation
02:33 < jasonkuhrt> ningu: so just to be crystal clear this doesn't generally look retarded to you: Number(Buffer.concat(this._rawNumber).toString())
02:33 < jasonkuhrt> ningu: where the concat is collecting chunks since the last newline
02:33 < jasonkuhrt> I already had it as you suggested but figured I was doing it "wrong"
02:34 < xp_prg> I think I just want to start my own business
02:34 < xp_prg> that is the only real challenge left
02:34 < ningu> jasonkuhrt: this._rawNumber is an array of buffers?
02:34 < jasonkuhrt> ningu: yes
02:34 < ningu> as long as it has the right data in it, that looks fine
02:35 <@mbalho> why 
02:35 <@mbalho> oops
02:35 <@mbalho> why would you concat a bunch of buffers and then cast them to a number
02:35 < ningu> mbalho: because they contain a string representing a number, that he wants to treat as a number
02:36 < ningu> jasonkuhrt: btw there is an npm module to emit 'line' events on a stream for you
02:36 <@mbalho> i guess my real question is how do you end up with a big string number split across mutliple buffers
02:36 < ningu> mbalho: good question
02:36 < ningu> I was wondering as well
02:36 < jasonkuhrt> mbalho: well since I'm taking chunks from a socket, I have to parse the deliminators myself
02:36 < jasonkuhrt> mbalho: are you saying that I don't need to worry about the numbers coming in separate chunks?
02:37 < ningu> jasonkuhrt: https://github.com/bluesmoon/node-line-input-stream
02:37 < jasonkuhrt> ningu: thanks
02:37 < jasonkuhrt> but I'm curious now, you're making it sound like I don't need to concern myself with the deliminators of the incoming tcp connection
02:37 < jasonkuhrt> so lets say node-line-input-stream didn't exist, and I had to do it manually still
02:38 < jasonkuhrt> if I have some open socket connections that will send me data ever 80ms
02:38 < jasonkuhrt> every*
02:38 < jasonkuhrt> how can I be assured that the chunk is a "clean" <num> everytime?
02:38 < jasonkuhrt> isn't tcp just a continuous stream of data, with no concept of messages?
02:39 < ningu> jasonkuhrt: I'm not sure how net.Socket breaks the input up into chunks, but if it's transmitting a line every 80ms and pausing, it probably arrives in the same chunks as it's sent. in principle you are right though, you shouldn't assume that will be the case
02:39 <@mbalho> jasonkuhrt: correct, so you wanna put something like newlines in there, but would you wanna do Buffer.concat(this._rawNumber).toString().split('\n').map(function(n) { return +n })
02:40 < ningu> mbalho: yeah, but he also doesn't want to process something until he gets a newline cause it would be incomplete, need to buffer that until the next chunk comes in
02:40 < jasonkuhrt> ningu: exacto
02:40 <@mbalho> yea i mean youre writing your own streaming parser now
02:41 < ningu> it's not that hard to do but it's kind of annoying, hence hte module I suggested
02:41 <@mbalho> (you could also use npm install jsonstream if you want json)
02:41 < jasonkuhrt> mbalho: I might get a chunk that looks like: ...     45 ... 0\n34\n ... 430
02:41 < jasonkuhrt> etc
02:41 < ningu> btw how standard is newline-terminated json?
02:41 < jasonkuhrt> where ... I mean a different chunk
02:42 <@mbalho> ningu: look up event source + server sent events
02:42 < ningu> I'd like to be able to stream an api result with each array element separated by a newline, but that will result in json which is not actually valid as a whole string
02:42 < ningu> mbalho: ok
02:44 < ningu> mbalho: looks like that's for the browser though, this is a single http post request with a json body in the response
02:44 < jasonkuhrt> ningu: would https://github.com/bluesmoon/node-line-input-stream work with pipe though?
02:44 <@mbalho> server sent events are for the server, to send events, using new line delimited data, and its a standard
02:44 < jasonkuhrt> ningu: since its using the line event not the data event for its communication
02:44 < ningu> jasonkuhrt: you mean if you pipe to it, or from it?
02:44 < ningu> jasonkuhrt: it uses the data event too, but you don't have to listen to it
02:45 < mscdex> javascript all the things!
02:45 < jasonkuhrt> ningu: in my case I would have line-input-stream sitting in a pipe
02:46 < jasonkuhrt> ningu: so its getting piped TO and I want it to pipe TO in turn another thing
02:46 < ningu> jasonkuhrt: hmmm... but you want to transform the lines, in the middle?
02:46 < jasonkuhrt> foo.pipe(nodeLineInput).pipe(bar)
02:46 < jasonkuhrt> ningu: exacto
02:47 < jasonkuhrt> ningu: image I'm creating a protocol, except in this case its the simplest proto in the world... a newline proto
02:47 < jasonkuhrt> so I want this proto to be part of a pipe
02:47 < jasonkuhrt> except wait
02:47 < jasonkuhrt> maybe that doesn't make sense
02:47 < ningu> jasonkuhrt: https://github.com/jahewson/node-byline
02:48 < ningu> that one looks like it might be what you want instead
02:48 < jasonkuhrt> since I buffer to get new lines, but if I pipe it, aren't I just once again making those chunks possibly come apart?
02:48 < ningu> it doesn't let you set the linebreak char, but the regex uses /\n|\r\n/
02:49 < jasonkuhrt> ningu: thanks, this does seem closer to what I am trying to do, if not exactly it
02:49 < ningu> yeah, give it a try and see if it works
02:49 < ningu> the docs explicitly say it's meant to be general and work for all streams, so that's good
02:49 < jasonkuhrt> ningu: ha, funny footer under the "simple" section
02:50 < jasonkuhrt> ningu: woot, you've been super helpful, thanks so much
02:50 < ningu> good luck, hopefully it will work
02:50 < jasonkuhrt> mbalho: thanks too
02:51 < jasonkuhrt> ningu: 10 months ago last commit, probably doesn't work with the new 0.10 stream api
02:51 < jasonkuhrt> ningu: package.json states:   "engine": [ "node >=0.4.0" ],
02:51 < jasonkuhrt> that doesn't bode well
02:52 < ningu> jasonkuhrt: yeah, I'm not sure
02:53 < ningu> it's only 100 lines of code
02:53 < jasonkuhrt> ningu: ya looking now
02:54 < jasonkuhrt> ningu: I'll have to rewrite this for 0.10, but that's good learning for me right now anyway
02:54 < ningu> yeah, it looks like it won't be too bad
02:54 < xecycle> Are there any common pitfalls in node GC?  I'm afraid some callbacks with hold of some objects may be waiting for too long (that they actually timed out) and not properly collected.
03:27 < runvnc> hello
03:28 < runvnc> does anyone have any ideas for how to make https faster?  I am actually using the aws sdk and noticed that everything is really slow when i used sslenabled: true
03:28 < runvnc> so I complained to them in a ticket. but it looks like they are using mostly default node https stuff in their code
03:28 < deoxxa> runvnc: define "really slow"
03:28 < runvnc> I am wondering alos if maybe I can make things faster by improving my openssl config or something
03:28 < runvnc> like 10x slower, several seconds instead of less than a second
03:30 < runvnc> well not a ticket actually an issue on github https://github.com/aws/aws-sdk-js/issues/116
03:30 < runvnc> in the code it looks like they are creating an https Agent with requireAuthorization: true
03:30 < runvnc> does that maybe have something to do with it
03:31 < runvnc> maybe I can make the authoritzation thing faster somehow
03:32 < runvnc> oh sorry
03:32 < runvnc> rejectUnauthorized I meant
03:34 < epochwolf> Hi, I'm a ruby/rails dev looking to play around with node by writing an irc bot. Is there a get started tutorial or example project I can look at? Reading the api docs for node isn't helping much. :)
03:34 < runvnc> http://davidwalsh.name/nodejs-irc
03:34 < runvnc> https://www.google.com/search?q=node.js+irc+bot&oq=node.js+irc+bot&aqs=chrome.0.57j0l2j62l2.2144j0&sourceid=chrome&ie=UTF-8
03:36 < epochwolf> runvnc: that first link is awesome, the second is annoying :P
03:36 < deoxxa> http://npm.im/irc-client is a thing that i made :>
03:37 < runvnc> its annoying when you ask something that comes up with so much stuff on google that is exactly what you asked
03:37 < deoxxa> no, bad alt-tab
03:38 < epochwolf> runvnc: I just needed some instructions on how to run a node project. I've got npm installed from homebrew and I'm starting from there. I already know how to read javascript and read the node.js api docs. 
03:38 < runvnc> ok epoch
03:38 < runvnc> do you know how to use google
03:38 < epochwolf> runvnc: it's hard to search for that stuff without knowing what to search for.
03:38 < runvnc> wait a minute
03:38 < deoxxa> epochwolf: installing node from homebrew is going to cause you some pain in the long run - you might want to get the official mac distribution
03:39 < epochwolf> deoxxa: see, stuff liek that I wouldn't know :)
03:39 < deoxxa> epochwolf: http://nodejs.org/dist/v0.10.9/node-v0.10.9.pkg
03:39 < runvnc> all I'm saying is if you are looking to build a Node IRC bot, then its not hard to know to search google for 'node irc bot'
03:39 < JamesMGreene> If my `npm publish` fails, is the packed zip still around?
03:40 < runvnc> I mean sure you are learning stuff incidentally which is great its just that you didnt google it at all and then you said you didnt know what to google
03:40 < epochwolf> runvnc: I've got some of that information. I was looking at the irc package's source last night. :)
03:40 < runvnc> ok why didnt you say that then
03:40 < epochwolf> It's getting my environment up and running.
03:40 < runvnc> why did you say that you didnt know what to google
03:40 < epochwolf> I did.
03:40 < epochwolf> [20:37:55] <epochwolf>	 runvnc: it's hard to search for that stuff without knowing what to search for.
03:41 < JamesMGreene> isaacs mbalho et al: If my `npm publish` fails, is the packed zip still around?
03:41 < epochwolf> Sorry, it's been a long day.
03:41 < runvnc> what did the error message say when it failed jamesmgreene
03:43 < JamesMGreene> The good ole "ERR! cb() never called!" because my module is quite large and sometimes times out during publish (I guess?)
03:44 < JamesMGreene> I'm sitting here twiddlin' my thumbs waiting to see if the current publish will succeed or not... has been running for several minutes now
03:44 < epochwolf> deoxxa: thanks, I got the hello world script off the node.js home page working, anything else I need to know before slapping some stuff together?
03:44 < runvnc> how big is the module exactly
03:44 <@Nexxy> JamesMGreene, `nom pack`
03:44 < epochwolf> hehe nom
03:44 < deoxxa> epochwolf: nope! open up a repl (type `node') and start messing about
03:44 < epochwolf> deoxxa: okay,  where do I go for learning to organize code?
03:45 < epochwolf> or is that an experience thing? :)
03:45 < JamesMGreene> Nexxy: Yes, I'm aware of `npm pack` but my question is: if the `npm publish` fails (and I didn't start it with an `npm pack`), is the packed file still around somewhere (temp dir, etc.)?
03:45 <@Nexxy> oh, good question
03:45 < epochwolf> I'm used to ruby/python/java 
03:45 <@Nexxy> I'm not sure
03:45 < deoxxa> epochwolf: i think that's mostly just "do whatever makes you go 'ew' the least"
03:45 < deoxxa> epochwolf: but be prepared for your definition of "ew" to change over time
03:45 < JamesMGreene> (and yes, I should probably be packing this module first so I don't have to repeat the prepublish scripts if it fails... quite time consuming)
03:46 < epochwolf> deoxxa: well yes, idocatic code isn't something to do on the first try. :)
03:46 < runvnc> how big is the package jamesmgreene
03:46 < epochwolf> At least I learned lua last year and bungled that up pretty good trying to reimplement an object system. 
03:49 < JamesMGreene> runvnc: size doesn't matter. ;)  But this module varies by version, the current one I'm trying to publish is almost 400 MB before being packed/zipped
03:49 < runvnc> then
03:49 < runvnc> I think the size matters
03:49 < runvnc> if its 400mb
03:49 < runvnc> how big is it after being packed/zipped
03:50 <@Nexxy> uhh lol
03:50 <@Nexxy> there is no way that's actually 1 module
03:50 < JamesMGreene> runvnc: If you've read my previous statements, you would know that I'm not sure where the pack IS as I didn't explicitly pack it
03:50 <@Nexxy> 400mb?!
03:50 < JamesMGreene> Nexxy: It's a wrapper module for an SDK
03:50 <@Nexxy> and it's 400mb?
03:50 < runvnc> what is the name of the module so I can find out why its so big and help you make it smaller
03:50 < JamesMGreene> Well the SDK is :)
03:51 <@Nexxy> perhaps you could consider downloading the SDK in a post-install script or something?
03:51 < runvnc> good idea nexxy
03:51 < JamesMGreene> Nexxy: Used to but that is frowned upon
03:51 < runvnc> or preinstall
03:51 < runvnc> I frown upon 400mb modules
03:51 < runvnc> I mean packages
03:52 < JamesMGreene> Yeah but the install script is bad for many other reasons too
03:52 < JamesMGreene> For example
03:52 < runvnc> what is the name of the package
03:52 < runvnc> in npm please
03:52 < JamesMGreene> Let's say you use this module, great, the first time you use it you download a small module and it in turn downloads a 400 MB zip, extracts it, etc.
03:52 < JamesMGreene> OK, not so bad
03:52 < Zolmeister> you could maybe make it a git sub-module
03:52 < JamesMGreene> Now... let's say you decide to use that module again in another Node application
03:52 < runvnc> let's say you tell us the name of the module
03:53 < JamesMGreene> Guess what happens?  You install it, it goes and downloads that ZIP again, extracts again, dos2unix-s again, etc.
03:53 < JamesMGreene> Not a good approach
03:53 <@Nexxy> lol
03:53 < runvnc> let's say your preinstall checks to see if that crap is already installed
03:53 < JamesMGreene> Plus everything in the Node docs says "Use PREPUBLISH! Not install."
03:53 <@Nexxy> and packaging it inside the module saves you from that how?
03:53 < runvnc> ok prepublish then
03:54 < JamesMGreene> Nexxy: it will be loaded out of the npm local cache
03:54 <@Nexxy> prepublish will still add it to the pack, no?
03:54 < JamesMGreene> Nexxy: prepublish is a hit for ME, not a repeated hit for the consumers
03:54 < epochwolf> What's the standard for package names on npm: onetwo, one-two, one_two, or "one two"?
03:54 < JamesMGreene> runvnc: It's https://npmjs.org/package/flex-sdk, good luck trying to figure out how to reduce the size of the Adobe/Apache Flex SDK  ;)
03:55 <@Nexxy> JamesMGreene, yeah I see what you mean
03:55 <@Nexxy> you could also just drop a link to the SDK in your readme.md
03:55 <@Nexxy> and call it a day
03:55 < JamesMGreene> I started it as an install script but it later became apparent that prepublish is unfortunately better suited since I was always downloading the same file anyway (not OS-dependent)
03:56 < JamesMGreene> Nexxy: I hate modules with external dependencies, so that's not gonna happen unless someone from NPM core land dictates it  :-P
03:56 < runvnc> sudo apt-get install flex
03:56 < runvnc> on ubuntu
03:56 < JamesMGreene> That's the whole reason I wrote https://npmjs.org/package/dos2unix ...can't even rely on Mac/Linux users have the darn dos2unix util installed let alone Windows users
03:59 < JamesMGreene> runvnc: I know there are ways to do it, that's not at all the point
04:03 -!- Topic for #Node.js: node may be useful to you for programming computers - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
04:03 -!- Topic set by mbalho [~max@ve.5bpbxlsy.vesrv.com] [Wed May 29 23:28:22 2013]
04:03 [Users #Node.js]
04:03 [@isaacbw         ] [ creationix      ] [ gshipley        ] [ L_star_       ] [ Outsider_       ] [ Spudly          ] 
04:03 [@konobi          ] [ crescend1       ] [ Guest12352      ] [ lance|afk     ] [ over_           ] [ sriley          ] 
04:03 [@mbalho          ] [ crewmoss        ] [ Guest33678      ] [ langdon       ] [ owen1           ] [ ssafejava       ] 
04:03 [@MI6             ] [ cronopio        ] [ Guest42249      ] [ LanyonM_      ] [ owenb_          ] [ stalled         ] 
04:03 [@Nexxy           ] [ cTIDE_          ] [ Guest5012       ] [ lastrose      ] [ Pagan           ] [ stbuehler       ] 
04:03 [@tjfontaine      ] [ cucu            ] [ guiambros       ] [ Leeol2        ] [ pancake         ] [ stef            ] 
04:03 [@trevnorris      ] [ Cultofmetatron  ] [ guilleiguaran_  ] [ LeftWing__    ] [ pandark_        ] [ stephank        ] 
04:03 [ [[zz]]          ] [ culturelabs     ] [ guybrush_       ] [ lejonet       ] [ parasight       ] [ StephenS        ] 
04:03 [ \mSg            ] [ cxreg2          ] [ Gwl             ] [ LeoAtWork_    ] [ parx            ] [ Stew-a          ] 
04:03 [ __carlos        ] [ Cyberpew        ] [ gwoo            ] [ leonardo      ] [ passcod         ] [ strax           ] 
04:03 [ __main__        ] [ d4rklit3        ] [ hackygolucky    ] [ leptonix_     ] [ patrickod       ] [ stride_         ] 
04:03 [ _marvin         ] [ d_d_d           ] [ Hadaka_         ] [ lessthanzero  ] [ PaulCapestany   ] [ strmpnk         ] 
04:03 [ _sri            ] [ Daiz            ] [ hagbard_celine  ] [ levilewis     ] [ paulwe          ] [ Stuk            ] 
04:03 [ _Steve_         ] [ daleharvey      ] [ hakunin         ] [ Leximet33     ] [ PayPaul         ] [ stutter_        ] 
04:03 [ AAA_awright     ] [ Damn3d          ] [ halfhalo        ] [ liammcl       ] [ pcarrier        ] [ stylus_         ] 
04:03 [ aandy           ] [ DaMorpheuS      ] [ happyfac1       ] [ lifelike      ] [ percival        ] [ styol           ] 
04:03 [ aboudreault     ] [ dan_johnsin     ] [ hatch           ] [ liwen         ] [ peterbraden1    ] [ subsilico       ] 
04:03 [ abstractj       ] [ danheberden     ] [ Havvy           ] [ ljharb        ] [ peterfile       ] [ substack        ] 
04:03 [ abumirqaan      ] [ danmactough     ] [ heath           ] [ lmjabreu      ] [ petschm         ] [ sunbeam         ] 
04:03 [ AdamMagaluk     ] [ dawolf          ] [ HeN             ] [ LocalPCGuy    ] [ ph8             ] [ sveisvei        ] 
04:03 [ aeberlin        ] [ dazoe           ] [ heroux          ] [ lohkey        ] [ PhanLord_       ] [ Sven_vB         ] 
04:03 [ ag4ve           ] [ dch             ] [ herzi           ] [ Lorentz       ] [ PhilK           ] [ SvenDowideit    ] 
04:03 [ Agusanz         ] [ deadalus        ] [ hhuuggoo_       ] [ lostc_        ] [ philo23         ] [ svnlto          ] 
04:03 [ aidanie         ] [ dec_            ] [ hij1nx          ] [ lresende      ] [ phI||Ip         ] [ swaj            ] 
04:03 [ Aikar           ] [ defunctzombie_zz] [ hipsterslapfight] [ LuckyBurger   ] [ pinja           ] [ syntax          ] 
04:03 [ airtonix        ] [ denysonique     ] [ Hosh            ] [ luigy         ] [ Piotras         ] [ taaz            ] 
04:03 [ ajpiano         ] [ deoxxa          ] [ HSL             ] [ luminous      ] [ pksunkara       ] [ tahu            ] 
04:03 [ akshayms        ] [ Derander        ] [ hydrawat        ] [ Lunar_Lamp    ] [ PL_um           ] [ tanepiper       ] 
04:03 [ alanmeira       ] [ derchiller      ] [ iain__          ] [ luruke        ] [ plato           ] [ tankbusta       ] 
04:03 [ AlbireoX        ] [ DesiJat         ] [ iaincarsberg_   ] [ lyanchih      ] [ playjax         ] [ tarruda         ] 
04:03 [ aledbf          ] [ dested          ] [ ianjm           ] [ m0            ] [ polyrhythmic    ] [ tassmjau        ] 
04:03 [ alekibango      ] [ devdazed        ] [ iapain          ] [ M28           ] [ PotatoLatke     ] [ taternuts       ] 
04:03 [ alexwhitman     ] [ devongovett     ] [ ickyb0d         ] [ M2Ys4U        ] [ pquerna         ] [ tauren          ] 
04:03 [ AllStruck       ] [ dFfrench        ] [ igl             ] [ M4R7iNP       ] [ prawnsalad      ] [ teadict         ] 
04:03 [ Alz_            ] [ dhpe            ] [ iiie            ] [ maaarghk1     ] [ prismatictrail  ] [ tec27           ] 
04:03 [ amartens        ] [ DiegoMax        ] [ iksik           ] [ macgregor     ] [ Probeus         ] [ Techie-Micheal  ] 
04:03 [ andrew12        ] [ diffalot-away   ] [ im0b            ] [ Mack          ] [ Proditor_       ] [ TechnoCat       ] 
04:03 [ anildigital_work] [ digiwano_       ] [ ImBcmDth        ] [ madscientist_ ] [ prophile        ] [ tellnes         ] 
04:03 [ AntelopeSalad_  ] [ dilettante      ] [ inarru          ] [ madsleep1     ] [ przemoc         ] [ terietor        ] 
04:03 [ arduix          ] [ diminoten       ] [ Incip           ] [ majek         ] [ psino           ] [ tg              ] 
04:03 [ arielserafini   ] [ disnet          ] [ Industrial      ] [ manacit       ] [ purr            ] [ tgies           ] 
04:03 [ arnorhs         ] [ djoot           ] [ InezK_away      ] [ ManneW        ] [ pyykkis         ] [ thanpolas       ] 
04:03 [ asellus         ] [ dleonardi       ] [ inimino         ] [ manutter      ] [ qbit            ] [ TheAceOfHearts  ] 
04:03 [ asherkin        ] [ dmil            ] [ innociv         ] [ mape          ] [ qwerty|         ] [ thedaywillcome  ] 
04:03 [ ashnur          ] [ dmilith         ] [ Inoperable      ] [ mappum        ] [ r04r|away       ] [ TheDeveloper___ ] 
04:03 [ Ashoshi         ] [ dmwuw           ] [ instence        ] [ maqr_         ] [ r1card          ] [ theefer         ] 
04:03 [ asturel         ] [ dmz             ] [ Internet13      ] [ marienz       ] [ radiodario      ] [ TheFuzzball     ] 
04:03 [ aszeszo         ] [ dnyy            ] [ intripoon_      ] [ marlun        ] [ raj             ] [ thejefflarson__ ] 
04:03 [ atatsu          ] [ Domenic_        ] [ ioNull          ] [ Marsup        ] [ ralphholzmann   ] [ TheJH           ] 
04:03 [ Atlantic777     ] [ don_jones       ] [ irclogger_com   ] [ maru_cc______ ] [ Ralt            ] [ TheLink         ] 
04:03 [ atSetKey        ] [ doowb           ] [ ircretary       ] [ mashlol       ] [ ramitos         ] [ thelleo         ] 
04:03 [ augustl         ] [ doug            ] [ ironfroggy      ] [ master5o1|work] [ randallagordon  ] [ TheMoonMaster   ] 
04:03 [ av9             ] [ douglaslassance ] [ isaacs          ] [ matjas        ] [ Rantanen        ] [ thrcka          ] 
04:03 [ avital          ] [ dozn            ] [ Iszak           ] [ matt_c        ] [ rawtaz          ] [ thread          ] 
04:03 [ awc737          ] [ Draggor         ] [ itsrachelfish   ] [ mattdawson    ] [ rax0            ] [ thyb            ] 
04:03 [ azend           ] [ dRbiG           ] [ ivan\           ] [ max_well1r    ] [ Raynos          ] [ till__          ] 
04:03 [ azhwkd          ] [ dreamdust       ] [ ivan_the_monkey ] [ Maxani        ] [ rblackwe        ] [ tim_smart       ] 
04:03 [ b1eedr          ] [ drey_           ] [ ivan`           ] [ maz-dev_      ] [ rcombs          ] [ TimTim`         ] 
04:03 [ bahodir         ] [ drodger         ] [ j0ni_           ] [ mbecroft      ] [ rcs             ] [ tklun           ] 
04:03 [ balgarath_      ] [ DrPizza         ] [ jabberwo_       ] [ mbor          ] [ reid            ] [ tmpvar          ] 
04:03 [ balupton        ] [ DrShoggoth      ] [ jackyalcine     ] [ mbroadst      ] [ remysharp       ] [ tokuhirom_      ] 
04:03 [ banzounet       ] [ drspin          ] [ jackyyll        ] [ Mchl          ] [ retornam        ] [ tomaw           ] 
04:03 [ baranaby        ] [ drudge          ] [ jagoda          ] [ McMAGIC--Copy ] [ rgmarcha        ] [ tomb_           ] 
04:03 [ bastinat0r      ] [ dscape          ] [ jan____         ] [ mdevolving    ] [ rhalff          ] [ TomRone         ] 
04:03 [ bbloom          ] [ dtriley41       ] [ janne-          ] [ meckanis1     ] [ RichardBronosky_] [ tomshreds       ] 
04:03 [ bear            ] [ durnik          ] [ jaredrhine      ] [ med_          ] [ rickibalboa     ] [ toothrot        ] 
04:03 [ beatpanic       ] [ dwcook          ] [ jareiko         ] [ medice        ] [ riku            ] [ topaxi          ] 
04:03 [ beawesomeinstead] [ E_mE            ] [ jasonrm         ] [ mekwall       ] [ ripples         ] [ topek           ] 
04:03 [ beeant          ] [ eccloud         ] [ JasonSmith      ] [ melter        ] [ Ritzton         ] [ topi`           ] 
04:03 [ beg             ] [ ed209           ] [ Jaylee__        ] [ mephux        ] [ rmill           ] [ torgeir         ] 
04:03 [ ben_alman       ] [ edr             ] [ jayne           ] [ MerlinDMC     ] [ Robbilie        ] [ Torsten         ] 
04:03 [ bencevans       ] [ edude03         ] [ jb__            ] [ mertimor      ] [ robertkowalski  ] [ trepatudo       ] 
04:03 [ bengl_          ] [ edulix          ] [ jb____          ] [ meso          ] [ roger_rabbit    ] [ trodrigues      ] 
04:03 [ benjaminbenben  ] [ eighty4         ] [ jbueza          ] [ metadaddy__   ] [ roger_raymond   ] [ tuhoojabotti    ] 
04:03 [ Benvie_         ] [ eins78          ] [ jcastelli       ] [ metellus      ] [ Rolken          ] [ txdv            ] 
04:03 [ beuk            ] [ ejnahc          ] [ jdelgado        ] [ mferranti     ] [ rolleiflex      ] [ tylersmith      ] 
04:03 [ Bilge           ] [ elij            ] [ jden_           ] [ mfn           ] [ rom1504         ] [ TypoAway        ] 
04:03 [ billy           ] [ elijah-mbp      ] [ jeffean         ] [ mfrauenholtz  ] [ RORgasm_        ] [ ub|k            ] 
04:03 [ billybob_han    ] [ ELLIOTTCABLE    ] [ jefferai        ] [ mh`           ] [ rostam          ] [ varmais         ] 
04:03 [ bitfed_         ] [ emilsedgh       ] [ jesseproulx_    ] [ mickhansen    ] [ rounce          ] [ Vektur          ] 
04:03 [ blazzy          ] [ EnosFeedler     ] [ jesusabdullah   ] [ mikegerw1tz   ] [ rphillips       ] [ VesQ            ] 
04:03 [ blissdev        ] [ epa_            ] [ jez0990         ] [ mikejw        ] [ rtgibbons       ] [ vitoss          ] 
04:03 [ blobaum         ] [ Epeli           ] [ jgjeong         ] [ mikey_p|afk   ] [ Rubennn_        ] [ Wa              ] 
04:03 [ Blorb           ] [ epiloque        ] [ jgornick        ] [ mikolalysenko ] [ rud             ] [ wagtag          ] 
04:03 [ bngle           ] [ ePirat-         ] [ jimbot          ] [ minibn        ] [ rudolfrck       ] [ wang            ] 
04:03 [ boaz            ] [ epochwolf       ] [ jimmyff         ] [ mirkok        ] [ rump            ] [ wankdanker      ] 
04:03 [ boffbowsh       ] [ er1c_           ] [ jimt            ] [ MitchW        ] [ runvnc          ] [ wao             ] 
04:03 [ BombStrike      ] [ Erakso          ] [ jjore           ] [ MitchyNuts    ] [ rurufufuss      ] [ wathek          ] 
04:03 [ Bonemind        ] [ ereslibre       ] [ jkarsrud        ] [ mjr84         ] [ RushPL          ] [ weal            ] 
04:03 [ Bonuspunk       ] [ Erriond         ] [ jlord           ] [ mlocher       ] [ russfrank       ] [ wedgeV          ] 
04:03 [ boogyman        ] [ estebistec      ] [ jmanoto         ] [ mmalecki      ] [ rvagg           ] [ wedgeV_         ] 
04:03 [ booo            ] [ EToS            ] [ jmaugue         ] [ mnaser        ] [ rwaldron        ] [ wereHamster     ] 
04:03 [ booyaa          ] [ eventualbuddha  ] [ jmoney          ] [ monokrome     ] [ rworth          ] [ wesbos          ] 
04:03 [ booyaa|f1o      ] [ EvilJStoker     ] [ JmZ_            ] [ morficus      ] [ ryanaz          ] [ whirlibulf      ] 
04:03 [ borislavsabev   ] [ EvilPacket      ] [ jn              ] [ MoRn          ] [ rynkan          ] [ whyhankee       ] 
04:03 [ braincrash      ] [ ewag            ] [ jocafa          ] [ mp_           ] [ s00pcan         ] [ willvk          ] 
04:03 [ brainproxy      ] [ exos_           ] [ joe2            ] [ MrDHat|afk    ] [ s4muel          ] [ willwh          ] 
04:03 [ brettlangdon    ] [ EyePulp         ] [ Joefish]off     ] [ mreeder       ] [ s5fs            ] [ willwhite       ] 
04:03 [ brianloveswords ] [ Ezku            ] [ joeytwid1le_    ] [ mrkurt        ] [ s_e             ] [ Will|           ] 
04:03 [ brownbathrobe   ] [ fantasywind     ] [ jolo2           ] [ MrMaksimize   ] [ Sam-T           ] [ winni           ] 
04:03 [ brycebaril      ] [ fastman         ] [ Jonathan1cClare ] [ mrmoneyc      ] [ sambarino       ] [ wizonesolutions ] 
04:03 [ bthesorceror    ] [ fayimora        ] [ JonathanMcClare ] [ MrNibbles     ] [ Sander^home     ] [ wolfspraul      ] 
04:03 [ Bubo            ] [ fcoury__        ] [ Jonghwan_       ] [ mscdex        ] [ satyr           ] [ wookiehangover  ] 
04:03 [ buckstabu       ] [ felixge         ] [ joshfinnie      ] [ munro         ] [ savardc         ] [ WorkingClassDev ] 
04:03 [ bwall           ] [ filleokus       ] [ joshie          ] [ myf           ] [ sawjig          ] [ wpreul          ] 
04:03 [ Bwild           ] [ Fishrock123     ] [ joshthecoder_   ] [ myndzi        ] [ sawrubh         ] [ wting           ] 
04:03 [ bytemask_       ] [ fiws|meh        ] [ jpiche          ] [ n0c           ] [ sayd            ] [ wyan            ] 
04:03 [ Cainus          ] [ fix2fax         ] [ JPT             ] [ nackjicholson ] [ SBoudrias       ] [ wycats          ] 
04:03 [ calvinfo        ] [ flagg0204       ] [ jrdn            ] [ nail_         ] [ schredder       ] [ x1337807x       ] 
04:03 [ candlejackson   ] [ Fli-c           ] [ jschall         ] [ nanashiRei    ] [ scott_gonzalez  ] [ xAt             ] 
04:03 [ caolanm         ] [ flocca          ] [ jso             ] [ nathan7       ] [ scrollback      ] [ XBOCT           ] 
04:03 [ carif           ] [ flyth           ] [ jtwalters       ] [ ndngvr        ] [ sdboyer         ] [ xecycle         ] 
04:03 [ carolyns        ] [ Fofr_           ] [ juliangruber    ] [ neshmi        ] [ SDr             ] [ xerora          ] 
04:03 [ cburyta         ] [ FooBarWidget    ] [ justicefries    ] [ netj          ] [ SebastianFlyte  ] [ xonev           ] 
04:03 [ cce             ] [ frdmn           ] [ justinmb_       ] [ nhhagen       ] [ Secutor         ] [ xorox90         ] 
04:03 [ celogeek        ] [ freannrak       ] [ justinmburrous  ] [ nicholasf     ] [ segomos_        ] [ xp_prg          ] 
04:03 [ cha0s           ] [ FredC           ] [ jvolkman        ] [ niclone       ] [ Segrel          ] [ xSmurf          ] 
04:03 [ chapel          ] [ freeside        ] [ k1ng            ] [ niftylettuce  ] [ seich-          ] [ xxblakefailxx_  ] 
04:03 [ chayin          ] [ freethenation   ] [ ka2n            ] [ nightfly      ] [ Sembiance       ] [ yacks           ] 
04:03 [ Cheery          ] [ Furai           ] [ kai             ] [ nihi|ist      ] [ sente           ] [ yano            ] 
04:03 [ cheese1756      ] [ Fuu             ] [ Kai`            ] [ Nijiko        ] [ sevastos        ] [ yawnt           ] 
04:03 [ Chel_           ] [ fwg             ] [ kaichanvong     ] [ nikkimccavee  ] [ Seventoes       ] [ yhpark_talk__   ] 
04:03 [ chiel           ] [ FX80            ] [ kaimei_         ] [ NimeshNeema   ] [ sf              ] [ yogurt_truck    ] 
04:03 [ chilts          ] [ g0z             ] [ kain            ] [ ninegrid      ] [ sg              ] [ yourway_chu     ] 
04:03 [ chiper          ] [ Gabriel413      ] [ Kaltiz          ] [ ningu         ] [ Shadowized1     ] [ YoY             ] 
04:03 [ chjj            ] [ gabriel_        ] [ kanzure         ] [ nlf           ] [ shama           ] [ yuya_           ] 
04:03 [ chmac           ] [ Ganymede        ] [ katanaya        ] [ nnam          ] [ shanejonas      ] [ zadark          ] 
04:03 [ chridal         ] [ garann          ] [ kborchers       ] [ no9           ] [ shanlar         ] [ zaleb           ] 
04:03 [ ChrisAnn        ] [ garren          ] [ kc8qvp          ] [ NoFaTe        ] [ shlevy          ] [ zanea           ] 
04:03 [ chrisbuchholz   ] [ Garrick         ] [ keeto           ] [ nsm           ] [ shoky           ] [ zapu            ] 
04:03 [ chrisdickinson  ] [ gbit86          ] [ kenperkins      ] [ nuba          ] [ Shrink          ] [ Zauberfisch|idle] 
04:03 [ chrisdotcode    ] [ gdbz            ] [ kesshi_ketsugo  ] [ nuck          ] [ sideshowcoder   ] [ Zaxnyd          ] 
04:03 [ ChrisPartridge  ] [ generalissimo   ] [ Kester          ] [ nutcase       ] [ SiGe            ] [ zedas_          ] 
04:03 [ chxane          ] [ generic         ] [ kevinfagan      ] [ nym           ] [ simius          ] [ zeekay          ] 
04:03 [ ckknight        ] [ gf3             ] [ KevinT          ] [ nyuszika7h    ] [ simon^^         ] [ zemm            ] 
04:03 [ clarkk          ] [ ghost64         ] [ kevinykchan     ] [ nzjames       ] [ sinclair|net    ] [ zenazn          ] 
04:03 [ ClaudioAlbertin ] [ ghoti           ] [ kevireilly      ] [ oblio         ] [ sindresorhus    ] [ zenethian-      ] 
04:03 [ clone1018       ] [ gildean         ] [ kinabalu        ] [ odyniec_      ] [ sirecote        ] [ zeromodulus     ] 
04:03 [ codelahoma      ] [ gkatsev         ] [ Kingdutch       ] [ ofan          ] [ SirFunk         ] [ zeroz           ] 
04:03 [ codepal         ] [ GlitchMr        ] [ KiNgMaR         ] [ ohcibi        ] [ sivoais         ] [ zhware          ] 
04:03 [ codingkevin     ] [ gnarf           ] [ klobucar        ] [ olegp_        ] [ skebcio         ] [ zivester        ] 
04:03 [ Codynyx         ] [ gorillat2on     ] [ knksmith57      ] [ OliverJAsh    ] [ slajax_         ] [ zokeber         ] 
04:03 [ Connorhd        ] [ gorillatron     ] [ kppullin        ] [ OnlyMax       ] [ Slashbunny      ] [ Zolmeister      ] 
04:03 [ conradev        ] [ Gottox          ] [ kraft           ] [ oon_          ] [ slicky          ] [ zomg            ] 
04:03 [ context         ] [ gozala          ] [ krill           ] [ ootje         ] [ slurp1          ] [ zz_hacfi        ] 
04:03 [ CookieNinja     ] [ Gregor          ] [ krnflake        ] [ optixx_       ] [ Snow-           ] [ zz_romb         ] 
04:03 [ CookieNomster   ] [ grep_awesome    ] [ Kudos           ] [ Orbitrix      ] [ Soarez          ] [ zz_runningskull ] 
04:03 [ coolnalu        ] [ Grephix         ] [ kuja            ] [ oreth         ] [ SomeoneWeird    ] [ zz_silvers      ] 
04:03 [ Couto           ] [ groundwater     ] [ kumavis         ] [ orospakr      ] [ sordina3        ] [ |Gobo|          ] 
04:03 [ CoverSlide      ] [ Gruni           ] [ kuuranne        ] [ othiym23      ] [ Sorella         ] 
04:03 [ crashev_        ] [ gsf_            ] [ kzrl            ] [ oti8          ] [ sorensen        ] 
04:03 -!- Irssi: #Node.js: Total of 904 nicks [7 ops, 0 halfops, 0 voices, 897 normal]
04:03 -!- Home page for #node.js: http://nodejs.org/
04:03 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
04:04 -!- Irssi: Join to #Node.js was synced in 28 secs
04:34 < epochwolf> What's the best place to get documentation on the javascript language? 
04:35 < Havvy> epochwolf: Mozilla Developer Network
04:35 < Havvy> !mdn
04:35 < Havvy> Right...that command doesn't work in here.
04:35 < epochwolf> https://developer.mozilla.org/en-US/ ?
04:35 < Havvy> Second best is the ECMAScript 5 Specification.
04:35 < Havvy> Yes.
04:35 < adammw111> Hi all. Looking into using a transform stream for parsing a complex, retarded protocol - can a transform stream pipe to another transform stream? And how would I get to pipe the input to the transform stream rather than the output? Or is that a bad idea?
04:37 < epochwolf> Havvy: thanks
04:38 < internaut_jack> Anyone here familiar with registering a package in Bower?  Running into a problem I could use some help with.
04:47 < epochwolf> If anyone has a minute, can they look over my first attempt and see if there's anything I screwed up? It runs. :) https://github.com/epochwolf/pious-plum
04:53 < deoxxa> ugh, npm. why do you hurt me so?
04:53 < deoxxa> i can't provide dynamic packages because npm wants an sha for every version :<
05:00 < runvnc> well if anyone is using the aws node sdk or another module that uses https, trying hacking maxSockets on whatever agent they are using to be a big number instead of like 5 or something.  makes a huge performance difference
05:00 < runvnc> well that is what I found with their sslenabled setting on because they were making an https Agent and it was using maxSockets 5
05:00 < ChrisPartridge> runvnc: are you sure it just isn't returning agents to the pool?
05:00 < runvnc> at least I think that was it. unless it was the rejectauthorization thing
05:01 < runvnc> chrispartridge not sure about what you mean sorry but
05:01 < runvnc> the code creates an instance of Agent
05:01 < runvnc> and uses that one instance everywhere
05:01 < runvnc> I think
05:02 < runvnc> so how does the pool work sorry?
05:02 < runvnc> when I changed aws.NodeHttpClient.maxSockets = 500 all the sudden my requests were returning right away but without that some of them were taking several seconds
05:03 < runvnc> I also set rejectauthorization false but I dont think that was it
05:03 < runvnc> not sure though
05:03 < runvnc> no I mean rejectunauthorized sorry
05:03 < runvnc> keep writing the wrong thing there
05:31 < travm> What is the more recommended way to upgrade Node? n or nvm?
05:44 < mikolalysenko> Image processing libraries in JavaScript:  http://www.reddit.com/r/programming/comments/1fga0f/image_processing_libraries_for_javascript/
05:46 < travm> Very neat.
06:01 < ningu> substack: I'm trying to use your gutter module, with the following code: http://pastebin.com/bJ7akiDC
06:02 < ningu> substack: basically, I want to wait for the first event on qs before I decide whether to actually stream the data -- if there's an error, I want to respond differently.
06:02 < ningu> detecting the error works fine. but I lose the non-streamed part of the json object, and also the first streamed chunk.
06:03 < ningu> any idea how to prevent that from happening?
06:03 < ningu> maybe I'll just not call gutter() until I receive something on qs.
06:04 < ningu> aha. that seems to work. :)
06:22 < travm> How do you uninstall n?
06:37 < Doidel> Has someone worked with webworker-threads before and is getting along with it?
06:38 < Havvy> Doidel: Given web workers aren't in Node, I think you want ##javascript
06:38 < Havvy> At least, as far as I know, they aren't.
06:46 < Doidel> Havvy, https://github.com/audreyt/node-webworker-threads ^^
06:46 < Havvy> Oh.
06:59 < adammw111> Hi. I've got some stream problems with my code that I don't know how to fix. gist.github.com/5689522 Can anyone help?
07:01 < adammw111> I've got Transform streams inside a transform stream, but i've got problems passing along the data.
07:27 < standoo> Genatz>
07:35 < kumavis> the currect architecture of resolve prevents you from shimming native modules
07:35 < kumavis> TIL
07:38 < ljharb> ew, why would you want to do that
07:38 < ljharb> make another module instead
07:38 < deoxxa> kumavis: that's probably correct, but there might be a better way to do what you want. what are you wanting to do?
07:39 < yawnt> moin
07:39 < kumavis> i'm writing a virtual file system to complement browserify and enable modules that use fs to be bundled
07:39 < kumavis> : i'm trying to overwrite 'fs' to resolve to my package, using the "browser" field in package.json
07:40 < ljharb> sounds like something you'd need to patch in browserify
07:40 < deoxxa> yep
07:41 < deoxxa> doesn't browserify already do stuff like that for some of the core node api's?
07:45 < kumavis> so i think implementing the virtual file system in browserify would be bloat, so it should be a seperate module
07:45 < kumavis> you could debate that point (you're welcome to)
07:46 < kumavis> but if it were to be a seperate module, how would it set itself to resolve for 'fs' requested by other modules ?
07:47 < nightfly> make browserify depend upon it?
07:49 < deoxxa> kumavis: i think you'd want to make it a separate thing (like "vfs" or something), then as nightfly said, have browserify depend on it
07:49 < kumavis> at this time calling a require() in browserify resolves the name via 'browser-resolve' which prepares a pkg-filter from the "browser" overrides in package.json and passes that on to 'resolve' who then ignores the pkg-filter in the case of native modules
07:54 < kumavis> i'm neither for nor against browserify depending on it. i'll leave that up to substack. but to me its dependency bloat. many browserify use-cases dont need a filesystem, and since its likely that if you're using browserify you're going to be serving that content, you want to avoid bloat even more than you would on the backend
07:56 < kumavis> on a higher level, i'm curious how people feel about the architectural prevention of shimming native modules
07:56 < kumavis> i can obviously see use cases, but it might make developing/debugging a nightmare
07:57 < kumavis> if some module down the chain changed the system in an unexpected way
07:58 < kumavis> so i can see arguments for both sides
07:59 < kumavis> thoughts?
08:01 < nightfly> Does native modules mean like machine code in this case?
08:02 < kumavis> not immediately, wrappers, then eventually machine code
08:02 < kumavis> lemme find the list
08:02 < kumavis> nightfly https://github.com/substack/node-resolve/blob/master/lib/core.json
08:03 < kumavis> resolve looks at that list and then just returns as resolved if you're querying any of those
08:10 < kumavis> this is why i was refering to them as "native modules" https://github.com/joyent/node/blob/896b2aa7074fc886efd7dd0a397d694763cac7ce/lib/module.js#L134
08:10 < kumavis> man i learned a lot about node today : )
08:10 < kumavis> some deep debugging trying to figure out why it didnt work
08:12 < rakl> kumavis npm install sleep
08:13 < kumavis> rakl https://github.com/ErikDubbelboer/node-sleep/
08:13 < kumavis> : P
08:24 < kumavis> wait
08:24 < kumavis> it looks like its supposed to work but theres an error
08:29 < Konvicted> hello 
08:32 < substack> kumavis: modifications are always local for exactly the reasons you describe
08:33 < kumavis> hey substack i think i found a bug https://github.com/shtylman/node-browser-resolve/blob/master/index.js#L42-L44
08:33 < kumavis> on my machine (mac osx) pkg_path becomes "/package.json"
08:33 < kumavis> which is not found
08:34 < kumavis> "./package.json" or "package.json" works
08:34 < kumavis> but it cant read the file so it never shims at that level
08:42 < kumavis> so to correct myself, as it currently stands, 'browser-resolve' does allow you to shim native/core modules, (but it seems there is a bug preventing it), however 'resolve' does not let you shim over native/core modules
09:03 < Ritzton> I need help to configure express.io with apache, my idea was to setup the proxy in apache to make it work https://domain.com and in the client script to write "var socket = io.connect('https://domain.com:3000');", it is working with some browsers but with others I have session problems handshake errors.... so I am kind of lost to configure it
09:09 < ningu> Ritzton: err... wait, your express app is running on localhost and you're using apache as a reverse proxy, or what?
09:15 < Ritzton> ningu> no my app is in production...
09:15 < ningu> Ritzton: that's not what i meant.
09:16 < ningu> how is it setup on the production server?
09:16 < Ritzton> it has few php websites on it and apache
09:17 < ningu> Ritzton: what is the relation between apache and your node.js app?
09:18 < Ritzton> ningu> no relation, but my app is working on 3000 port and apache is listening 80 port
09:20 < Ritzton> but in fact I manage to figure out why I do have my problem with sessions
09:21 < ningu> Ritzton: why are you running your app on port 3000 instead of having apache proxy to it on port 3000?
09:22 < Ritzton> if the visitor is going to http://www.domain.com, the javascript client side is still var socket = io.connect('https://domain.com:3000'); and session dont work but if he is going to http://domain.com, it is working
09:23 < Ritzton> ningu> I am sorry I didnt get what you said, I am beginner, why I am running my app on 3000 ? because I cannot run it on 80 because apache is already listening the port
09:23 < ningu> Ritzton: there are plenty of guides for how to set this up, one sec
09:23 < Ritzton> thank you
09:24 < ningu> http://diogogmt.wordpress.com/2012/05/21/running-node-on-port-80-with-apache/
09:25 < Ritzton> ningu> yeah that is exactly what I did
09:25 < ningu> Ritzton: either your app is running through apache or it isn't
09:28 < Ritzton> ningu> in fact apache is not my problem, my problem is about how I am using io.connect
09:29 < Aartsie> Ritzton: When your app is running throught apache it can be blocking the streams
09:29 < Ritzton> I have to find out how to do $_SERVER["DOCUMENT_ROOT"] in javascript
09:30 < Aartsie> Ritzton: take a look at __dirname
09:30 < Ritzton> Aartsie> the problem is if someone is accessing http://www.domain.com and the io.connect is without "www", it is not working
09:31 < Aartsie> Ritzton: hmm i think thats a cross scripting problem
09:31 < Aartsie> Ritzton: http://nodejs.org/docs/latest/api/globals.html#globals_dirname
09:31 < Ritzton> Aartsie> yeah it is the idea but dirname doesnt fit because it is for client side
09:32 < Aartsie> So you need the domain name ? 
09:33 < Ritzton> I mean on the client side, I have to pick up if I am on www.domain.com or just domain.com or whatever.domain.com
09:33 < Aartsie> Ritzton: Maybe is this what you want http://css-tricks.com/snippets/javascript/get-url-and-url-parts-in-javascript/
09:33 < Aartsie> Then you can use window.location.host please look at the link
09:35 < Ritzton> yeah this is what I need :-) thank you Aartsie, I am going to try to find it with jquery
09:37 < Aartsie> Ritzton: I got that to wait a sec
09:39 < Aartsie> Never mind u can use it whit out jQuery 
09:47 < Ritzton> Aartsie> yeah apparently it is not advised to make it with jquery
09:52 < mauritslamers> question: is there a way to describe different dependencies for platforms in a package.json?
09:52 < mauritslamers> as in: linux will have different deps than mac osx
09:52 < mauritslamers> so npm will install a different package for linux than for osx?
09:54 < ningu> mauritslamers: not sure... although I suspect something may be wrong if you need to do that
09:55 < mauritslamers> ningu: not reallyâ€¦ I have to bundle compiled stuff on windows and mac osx, but under linux the users will need to compile
09:56 < ningu> are these your own packages?
09:56 < mauritslamers> yep
09:56 < mauritslamers> that is: sort of
09:56 < ningu> if it's your own package you can make just one version and have the install script do the right thing
09:56 < ningu> if not, I guess you could have a deploy script for your app that does it
09:57 < mauritslamers> the precompiled stuff is my own package, but for linux the normal npm package in the registry can be used
09:57 < mauritslamers> but it might be an option indeed to do it that way
11:24 < RLa> can you pass object containing values as strings into mongoose model constructor and it converts values automatically into types defined in the schema?
11:35 < ningu> RLa: hmm, I have no idea... try it :)
11:37 < RLa> ningu, yes, it works but that's not enough :)
11:37 < RLa> manual must also say so
11:51 < haiku_> Hi: can some one explain me: i want use socket.io and pg in express. where do i setup the pg? i use socket.io as mw in routes/sockets.js :  sockets <--> sql 
11:54 < ningu> haiku_: have you read the node-postgres docs?
11:55 < shredding> Hey all.
11:56 < haiku_> yes, but i dont know in which file i should setup the pg, in the app.js pg resp. to routes, i want pg respo. to sockets
11:56 < shredding> I have some trouble setting up npm modules - they are not accessible globally. I have installed node  on mac with brew
11:57 < substack> I need to get a new library card.
11:58 < ningu> haiku_: make a separate file pg.js and set module.exports to the pg connection
11:59 < ningu> shredding: you need to add /usr/local/share/npm/bin to $PATH
11:59 < shredding> ningu: Okay,.
11:59 < shredding> Is it recommended to add it to /etc/paths or to symlink it?
12:00 < shredding> ningu: However, adding to /etc/paths works fine.
12:01 < haiku_> ok, and then i can require it in my socket.js and use it?
12:01 < ningu> I've never edited /etc/paths
12:01 < ningu> I just set it in .bashrc
12:02 < ningu> haiku_: yes, require it in both app.js and socket.js
12:02 < haiku_> ok, super thank you
12:18 < mauritslamers> a question: why can't I load a binary extension when I rename the file of this extension?
12:19 < mauritslamers> this worked fine under nodejs 0.8
12:19 < Rick_> Hi All
12:19 < Rick_> i need quick  answers for two questions
12:20 < mauritslamers> so, I built this extension, rename the compiled [ext].node to [ext].osx.node and when trying to load it, it says "Symbol [ext].osx_module not found
12:20 < Rick_> how goles node handle control flow of callbacks in IO operations & alike
12:21 < Rick_>  if by using async module, what does it actually does
12:21 < ningu> Rick_: have you used node before?
12:25 < Rick_> no i have just started learning it..
12:26 < Rick_> hav developed nothing more than , what few tutorials taught
12:27 < ningu> Rick_: I would suggest you watch http://www.youtube.com/watch?v=L0pjVcIsU6A
12:27 < Rick_> ningu: i have those doubts, and i suspect that , thing is either handled by soem module , or its handled poorly by node.
12:28 < ningu> Rick_: if you have a specific question I can answer it, but otherwise, there are many overviews to how node's async i/o works and it would be best if you read one or watch the presentation I linked
12:28 < Rick_> ningu: thanks for the link.
12:29 < wereHamster> what is the "from" field in npm-shrinkwrap.json used for?
12:29 < Rick_> ningu: ok, just one straight question,, is node a single threaded server in case of Http module
12:29 < Rick_> ??
12:29 < ningu> Rick_: node is always single threaded
12:31 < Rick_> ningu:  i was asked this question in a interview, and i told the same,  but the guy said that , though it can handle multiple requests in a single thread, does'nt makes it a single treaded language.. 
12:32 < Rick_> but inreases it s capacity to handle requests
12:32 < Rick_> i was stuuned to hear that
12:32 < ningu> Rick_: node internally uses threads for some things, like file i/o, but as a user of the language you would not be aware of that
12:32 < deoxxa> Rick_: either you're misremembering what he said, or he was wrong
12:33 < ningu> yeah, it sounds to me like he was wrong as well -- the internal implementation of node's standard library is not part of the language
12:33 < deoxxa> Rick_: i have a feeling he probably said something along the lines of "it's not single-threaded like php" - i.e. he was probably making a comparison
12:34 < deoxxa> Rick_: and in that sense, he would have been, at least in spirit, correct
12:34 < Rick_> deoxxa: noo,,  i know what he said, it was a telephonic interview, and al that counts there is spoken words..
12:35 < deoxxa> well, he was plain wrong then
12:35 < deoxxa> heh
12:35 < Rick_> he even asked me that do i know , ,, multi threaded programming t,, so i can handle node porjects 
12:35 < ningu> Rick_: find a better employer
12:35 < deoxxa> ^ this
12:35 < deoxxa> no fun working for people who think they know more than they do
12:36 < ningu> it's true that you need to think a bit differently to code async in node, but it's not multi-threaded
12:36 < deoxxa> yeah, doing stuff in node is very very different to doing stuff with threads in other languages
12:37 < ningu> I'm not sure what I'd look for in someone's background if I were hiring someone who hadn't done node yet
12:37 < vampi-the-frog> ningu, maybe ajax
12:37 < ningu> I guess it's good if they dealt with concurrency in some way rather than never thinking about it at all
12:37 < ningu> yeah, true
12:37 < vampi-the-frog> ningu, and event loop experience
12:37 < vampi-the-frog> like libevent and glib
12:37 < deoxxa> ningu: i'd probably just look for the same thing i look for all the time - the ability to pick stuff up quickly
12:38 < Rick_> ningu: well,  it was a interview for employment.  not working with him still.  though  after all this screwing of my concepts he, said that some person will call me for another round ,as this round i have cleared.
12:38 < ningu> deoxxa: yeah, but how do you gauge that? doesn't everyone say they can do that? talk is cheap, I wish I could demonstrate to someone that I *can* do that :P
12:38 < ningu> Rick_: do they already have someone who programs in node.js?
12:38 < deoxxa> ningu: easy! hire them for a week if you can't decide straight up :>
12:38 < ningu> deoxxa: hmm good idea :)
12:39 < deoxxa> if they're terrible, they'll show it
12:39 < deoxxa> if they're not terrible, you can help them learn
12:39 < deoxxa> you might get lucky and stumble across someone amazing
12:39 < deoxxa> it's worked both ways for me
12:39 < vampi-the-frog> you can have them learn to use a node module that you wrote
12:39 < ningu> to me there are kind of two aspects to the skill actually -- the ability to pick things up quickly, *and* the ability to learn on your own
12:39 < ningu> maybe learning on your own is not crucial to all jobs
12:40 < vampi-the-frog> one that they have no way of knowing in advance
12:40 < ThiefMaster> after updating nodejs to 0.10.9 i'm getting this warning when using socket.io all the time: "websocket parser error: reserved fields must be empty"
12:40 < deoxxa> ningu: i'm yet to meet anyone who is good at learning but not good at learning on their own
12:40 < Rick_> deoxxa:   i was just choses for my understanding of javascript & backbone.  they asked for basic language of node, as they will provide traning.
12:40 < ningu> deoxxa: ok, fair enough
12:41 < ningu> deoxxa: I'm not convinced it's that simple but you may be right
12:41 < deoxxa> Rick_: neat! you'll probably do fine then
12:41 < deoxxa> ningu: oh yeah this is all just personal experience talking - pretty small, biassed sample set
12:43 < vampi-the-frog> I wonder if I could find a php or node.js job in other europe countries, that could be a good excuse to travel and stay for a few months in different countries
12:43 < ThiefMaster> ah nvm https://github.com/LearnBoost/socket.io/issues/1242
12:44 < Rick_> ningu: i guess yes they will be having a team for node...  its a big Japanese MNC
12:44 < mauritslamers> so, I built this extension, rename the compiled [ext].node to [ext].osx.node and when trying to load it, it says "Symbol [ext].osx_module not found, anyone a clue?
12:44 < deoxxa> Rick_: neat! you hoping to work over there?
12:45 < deoxxa> mauritslamers: looks like node is looking for a <filename>_module symbol in the file
12:45 < mauritslamers> deoxxa: yes, but why? it makes precompiled stuff for multiple platforms virtually impossible
12:45 < mauritslamers> moreover, under node 0.8 that still worked
12:46 < deoxxa> mauritslamers: i'm not sure why... it does seem like an odd change. is it documented? that behaviour, i mean?
12:47 < Rick_> no no!!!   teh development centre is domestic,,
12:47 < Rick_> deoxxa: no  i will be working in here only ..
12:48 < deoxxa> Rick_: come to think of it, you might have dodged a bullet there. japan is a pretty stressful place to work. see if you can get a business trip or two though :P
12:49 < ningu> Rick_: where are you?
12:49 < mauritslamers> deoxxa: it turns out this behaviour is documentedâ€¦ :( http://nodejs.org/api/addons.html
12:50 < deoxxa> mauritslamers: darncakes! you could get silly and rename/alias symbols... maybe?
12:50 < deoxxa> i seem to recall someone doing that, maybe for this exact reason
12:51 < deoxxa> couldn't tell you how though, i didn't take so much notice
12:51 < mauritslamers> of course they write that it is necessary, but not why
12:51 < mauritslamers> I hate this kind of unexplained, semi-documented behavior
12:52 < vampi-the-frog> any idea how I could shut down a http request in express/connect, right after I've read the headers and decided not to allow it? I'm trying to prevent large unauthorized multipart uploads
12:52 < Industrial> Is there any article/guide/tutorial/book/video/etc on the architecture of small communicating services? I wanna put seaport on action for me but I'm not sure I'm thining about this right; I'd have an authenticator, compiler, gazer(fs changes), logger, seaport and session-keeper server running along with a lot of website/http servers that would also consume these services e.g. recompile on fs changes
12:53 < Industrial> in action*
12:54 < mauritslamers> deoxxa: yes of course I can rewrite, but that is pretty annoying
12:55 < mauritslamers> problem in this case is that I am trying to make binary packages of canvas
12:55 < Industrial> What's the buzzword .. Distributed Web Architecture? :P
12:57 < mauritslamers> deoxxa: so, instead of just doing npm install canvas after compiling the necessary libraries, I have to clone the repo and do all kinds of editing, instead of simply copying the resulting binary out :(
12:57 < Industrial> Also if I implement all my services as RPC (dnode) and they are registered by name(/version) (seaport), instead of having to grab the handle/connection for dnode myself every time, could I have some scope (closure?) where I could call services by name and it would do the lookup and load balance in the background?
12:58 < Industrial> e.g. api(function() { this.someOtherServerByName.SomeRPCCall(function() {/*done*/}); });
12:59 < Rick_> deoxxa: sorry i was busy watching video you guys gave link for . Im  from india
12:59 < Rick_> did ningu left??
13:02 < flying_turtle> Is it possible to launch a python script from node and get callbacks when finishes/writes to stdout?
13:03 <@mbalho> flying_turtle: http://nodejs.org/api/child_process.html
13:04 < flying_turtle> mbalho: Nice, thanks :)
13:11 < wereHamster> does npm shrinkwrap not shrinkwrap devDepedencies?
13:18 < koldus> hi guys, i made something like that http://pastebin.com/dTNwGxM1 but i got the problem that i think manager.gets it's not a pointer to the object so if i tried to access it on a webrequest i see no change..
13:39 < hurben> hello
13:55 < rud> wondering, when using something like socket.io-clusterhub, assume you have two workers, from worker1 how can i manually access stored socket by worker2 ..? In single thread i was using io.sockets.sockets[socketId].. but this obviously skips the storage.. io.sockets.clients(); seems to do the trick .. how would you access it ?
13:56 < rud> (note i'm guessing this applies whatever the storage, socket.io-clusterhub, or redis-connect ...)
14:03 < mcheshkov> Hi guys!
14:05 < mcheshkov> why in stream_wrap.cc uv_write2 is used only for IPC? Performance issues?
14:06 < Industrial> How do people group servers in a network? e.g. I want each website to obviously have a http server, but maybe more, and also a dnode server to control the other servers (start, stop, whatever) etc
14:08 < Industrial> I'm close to creating a Service 1:n Server classes so i can refer to other services' servers by name :X
14:08 < Industrial> e.g. mywebsite/http
14:12 < mcheshkov> and what with native aio on linux? as i know it has such
14:14 < mscdex> vampi-the-frog: you can create a middleware function near the top of your middleware stack that just does `req.connection.destroy();`
14:15 < vampi-the-frog> mscdex, thanks, that's what I was looking for, the destroy() function. I already made my middleware function because I needed to stream the upload (passing directly over to graphicsmagick)
14:19 < AdamMagaluk2> Is there any good way of profiling the time spent waiting on io network in particular? Most blog posts I can find only deal with cpu profiling.
14:19 < ningu> "Vert.x is an event driven application framework that runs on the JVM - a run-time with *real* concurrency and unrivalled performance."
14:19 < ningu> I'm suspicious of anyone who uses the word "real" in that way ;)
14:21 < vampi-the-frog> any idea how I can emulate a multipart upload with curl?
14:21 < wereHamster> curl -F should do it automatically if you upload a file
14:22 < pplcf> we used vert.x in one project a year ago
14:22 < pplcf> it leaked back then
14:22 < deoxxa> yawnt: u jelly?
14:23 < yawnt> deoxxa: a lot
14:23 < yawnt> i'm hungry now
14:23 < ningu> pplcf: I don't know anything about it, just reading up
14:24 < mscdex> vampi-the-frog: yeah, just like `curl -F "somefile=@filename" example.org
14:24 < Industrial> crazy idea? http://images.gammatester.com/pics/ca653f220ee607875ee6b394cea2c636.png
14:25 < vampi-the-frog> ahaha yes it says connection reset by peer!
14:25 < mscdex> :-D
14:25 < wereHamster> Industrial: hi, what are you up to these days?
14:25 < deoxxa> yawnt: i've ended up making mine too firm and too small - make the patties a bit bigger than you think they need to be and make sure you cook them on a low setting. you want them to be nice and soft, not like a regular burger.
14:25 < Industrial> wereHamster: see shotty
14:25 < wereHamster> Industrial: shotty devs-on ?
14:26 < mscdex> Industrial: it is crazy to be using Windows
14:26 < mscdex> ;-)
14:26 < Industrial> wereHamster: I want easy control over lots of little servers, and preferrably call them by name locally
14:26 < Industrial> mscdex: :) all the dev work is going on in a vm in archlinux
14:26 < yawnt> deoxxa: :O red wien
14:26 < yawnt> *wine
14:26 < deoxxa> yep!
14:27 < mscdex> looking at that UML brings back haunting memories of college
14:27 < Industrial> so in a http server implementation I can call watcher.on('correctmoment', compiler.recompile)
14:27  * mscdex shakes a fist at UML
14:27 < Industrial> or something :)
14:28 < Industrial> mscdex: how would you map it out
14:28 < wereHamster> Industrial: why not use something like puppet?
14:28 < Industrial> wereHamster: thats for automating the os, not the software right?
14:29 < wereHamster> Industrial: can be also used for software
14:29 < wereHamster> I mean, OS is jsut software on top of the kernel after all
14:29 < Industrial> yeah but it wont let my http server connect to my authentication or session or cache server (all nodejs servers) :X
14:33 < deoxxa> yawnt: they're sitting in the sauce now while i wait for rice to cook
14:33  * deoxxa waits
14:33  * deoxxa drinks some juice
14:34 < deoxxa> yawnt: you probably want to get a nice wine for them - i just got a derpy one because i know nothing about wine, but your people are pretty good at that kind of thing
14:34 < yawnt> yes yes we are
14:34 < yawnt> deoxxa: you should see what i cooked today
14:34 < yawnt> :
14:34 < yawnt> :3
14:34 < deoxxa> pics or it didn't happen
14:35 < yawnt> deoxxa: yeah i ate it
14:35 < yawnt> i only seldom post stuff i cook on fb :D
14:35 < deoxxa> lol
14:35 < yawnt> deoxxa: so it was basically an omelette with cheese inside, made taco-like + green asparagus with balsamic vinegar
14:36 < deoxxa> that does sound pretty good
14:36 < yawnt> it was
14:36 < yawnt> especially the green asparagus
14:36 < deoxxa> ha
14:36 < deoxxa> i post stuff when it's something i've never made before
14:36 < yawnt> deoxxa: also weissbier 
14:36 < yawnt> from germany
14:36 < deoxxa> oh, i see
14:36 < yawnt> which reminds me i might have another one
14:36 < yawnt> it's in the fridge staring at me
14:37 < yawnt> STOP STARING
14:37 < yawnt> deoxxa: or i can honour your ancestors, it's 5 PM and i have english tea here
14:37 < yawnt> twining's
14:39 < deoxxa> lol
14:40 < yawnt> why would you laugh
14:40 < yawnt> it's serious tradition
14:40 < deoxxa> srs.trdshn
14:40 < yawnt> sure
14:40 < yawnt> i'll have two
14:40 < yawnt> of whatever you just said
14:42 < Industrial> redid it with plantuml so I can do it in source: http://goo.gl/f4WuE
14:42 -!- mode/#Node.js [+o TooTallNate] by ChanServ
14:54 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:05 < robertkowalski> hey
15:05 < alfonsodev> I'm doing my firsts tests with superagent module, I got a simple test working, when the  the res.send('something')
15:06 < alfonsodev> but when res.render('oneView')   it breaks  
15:06 < Uptownben> Hey all.
15:06 < alfonsodev> with "Property 'engine' of object #<View> is not a function"
15:06 < alfonsodev> code here http://pastebin.com/rwaUZEcP
15:07 < alfonsodev> any idea?
15:07 < robertkowalski> alfonsodev: i think there does not exist a template-engine named html for express
15:07 < robertkowalski> app.set('view engine', 'html');
15:07 < Uptownben> Running node and socket.io with SSL, just upgraded node to 0.10.9, and now socket connections immediately disconnect 
15:08 < alfonsodev> robertkowalski: it works with hbs module , view engine html , just allows to load views with extension .html   .., 
15:09 < alfonsodev> but I can try the same test with another engine ., :/ 
15:10 < Uptownben> Saw an issue posted about 0.10.8 and socket.io causing this issue, but looks like its still exists 
15:10 < robertkowalski> alfonsodev: hbs is handlebars?
15:10 < alfonsodev> yep
15:10 < Uptownben> Downgraded to 0.10.7 and everything works. 
15:11 < alfonsodev> hbs : 'Express.js template engine plugin for Handlebars'  https://npmjs.org/package/hbs
15:11 < Uptownben> Anyone know of a workaround (besides downgrading)?
15:11 < vampi-the-frog> mscdex, I am using dicer to parse multipart, is there an event for when the data starts? or maybe when the headers end?
15:12 < robertkowalski> alfonsodev: to use handlebars you would use app.set('view engine', 'hbs'); according the hbs readme/docs on github.
15:12 < vampi-the-frog> mscdex, or is 'header' invoked when the headers end?
15:12 < robertkowalski> alfonsodev: https://github.com/barc/express-hbs#usage
15:13 < mscdex> vampi-the-frog: 'header' is invoked when the headers are parsed, before the data events start
15:14 < mscdex> vampi-the-frog: you might also take a look at busboy if you need something higher level
15:15 < alfonsodev> robertkowalski: yep, I got the test working using ('view engine', 'bbs') , and renaming the template to hola.hbs of course
15:16 < vampi-the-frog> mscdex: thanks, and it's high enough :P
15:16 < alfonsodev> I was using 'view engine' html to have html extension, which it works, when launching the app, server, but not in the super test test
15:17 < alfonsodev> thanks @robertkowalski for the fix 
15:20 < Uptownben> Guess I should post an issue...
15:34 < alfonsodev> @robertkowalski :  Found the way to use bbs with html is, just simply adding this line, and it works on app, and tests
15:34 < alfonsodev>     app.set('view engine', 'html');
15:34 < alfonsodev>     app.engine('html', hbs.__express);
16:05 < RK> Hi there ! where launching a job offers service. Would appreciate a lot if you can help us answer a very short poll (6 points). Thanks a bunch. http://goo.gl/zLgfD
16:09 -!- mode/#Node.js [+o isaacs] by ChanServ
16:20 < NoFaTe> Hey folks, anyone around?
16:21 <@tjfontaine> it's easier to ask than to ask to ask
16:22 < NoFaTe> tjfontaine, I ask if anyone is around because if not my message will be lost in the join/part madness
16:22 < NoFaTe> anyway, I have a memleak in one of my node.js apps and I cannot figure out where it's at
16:22 < NoFaTe> I tried that one tool
16:22 < NoFaTe> uhm
16:23 < NoFaTe> node-memwatch or something
16:23 < NoFaTe> but it didn't provide me with any valuable information
16:23 <@tjfontaine> https://npmjs.org/package/heapdump
16:23 < NoFaTe> tjfontaine, do heapdumps contain info about what's allocating what?
16:24 <@tjfontaine> you'll have type information, so you'll know what is allocated and who owns it
16:24 < NoFaTe> that's good
16:24 < NoFaTe> thanks :)
16:25 <@tjfontaine> on smartos you can gcore the process and then use ::findjsobjects for similar types of inspection
16:25 < NoFaTe> I'm on ubuntu
16:39 < wathek> Hi everybody
16:39 < wathek> when you need to call a PHP script and passing to it params what's the best solution ?
16:39 < frk131> hi, if i look at tutorials about wrapping c++ objects, often people call the set method on the objectTemplate, but there is no set method.   http://bespin.cz/~ondras/html/classv8_1_1ObjectTemplate.html is this new?
16:41 < alexwhitman> wathek, http://www.nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
16:41 < wathek> alexwhitman, thank you
18:14 < Jester831> What do you guys think is the way to go for hosting large scale node apps?
18:15 < Jester831> I've traditionally used reserved EC2 instances, however I like a lot of the functionality of nodejitsu, I'm just concerned about price/performance
18:34 < diegoaguilar> hello
18:34 < diegoaguilar> hmm does anyone know wether linux mint 15
18:34 < diegoaguilar> comes with nodejs
18:34 < diegoaguilar> built in
18:34 < diegoaguilar> ?
18:35 < Jester831> nothing comes with nodejs built it
18:35 < Jester831> in
18:35 < diegoaguilar> i just dont know why
18:35 < diegoaguilar> i didnt updated path
18:36 < diegoaguilar> and I even deleted the extracted folder
18:36 < diegoaguilar> and wherever I type node to the shell
18:36 < diegoaguilar> it prompts me to the node console
18:36 < diegoaguilar> i downloaded, typed make, and make install
18:36 < diegoaguilar> the extracted folder WAS in /develop
18:36 < diegoaguilar> but I even deleted it
18:37 < diegoaguilar> :P
18:37 < diegoaguilar> and node is still working? :P
18:37 < diegoaguilar> how can this be even possible?
18:39 < epochwolf> How do I inject variables into a javascript file? I'm trying to built a plugin system for an irc bot and I need to inject a couple of objects to make writing plugins easier.
18:40 < gluxon> epochwolf: Generally, that's not the way you want to do things.
18:41 < gluxon> epochwolf: Pass an options file with the variables and instances that plugin will need.
18:41 < epochwolf> gluxon: the variables are socket connections.
18:42 < epochwolf> and file handles
18:42 < gluxon> epochwolf: That doesn't change anything.
18:42 < gluxon> Lookup dependency injection.
18:42 < gluxon> It's safe to pass socket and file handles, and it works fine too.
18:43 < epochwolf> gluxon: soâ€¦ I need to use exports to replace functions and call them via module.exports.<function_name>?
18:44 < gluxon> Eh..?
18:44 < epochwolf> http://stackoverflow.com/questions/9250851/do-i-need-dependency-injection-in-nodejs-or-how-to-deal-with I'm having trouble processing this.
18:45 < gluxon> epochwolf: Your plugins are in the form of function with prototypes, right?
18:45 < gluxon> (so a class)
18:45 < epochwolf> no
18:45 < gluxon> epochwolf: Then it's just a bunch of functions?
18:45 < epochwolf> https://gist.github.com/epochwolf/07b23a5e6091e0b77fb8
18:46 < vampi-the-frog> what happens to this when I'm two callbacks deep inside a class func? the callbacks are from fs and mysql. should I declare a pointer to this before the callbacks?
18:46 < vampi-the-frog> ie var self = this;?
18:46 < kumavis> how do people feel about having browser-resolve dep'ing a small virtual filesystem module. does that seem too out of band? i'm trying to find the least obtrusive way of inserting it in.
18:47 < vampi-the-frog> that's what she said
18:47 < __carlos> vampi-the-frog: hahahah
18:47 < kumavis> i think thats what he said
18:47 < gluxon> epochwolf: So, if you do module.exports.setup = setup, you will have access to setup when you require()
18:47 < __carlos> kumavis: O.o
18:47 < gluxon> vampi-the-frog: var self = this;
18:47 < vampi-the-frog> ty
18:47 < gluxon> vampi-the-frog: That's a common problem. var self = this is the common solution.
18:48 < vampi-the-frog> I see. I knew this, just wasn't 100% sure. Thanks
18:48 < gildean> gluxon: exports.setup = setup;
18:48 < epochwolf> gluxon: I could just stick bot into the global space of the app, couldn't I?
18:48 < epochwolf> gluxon: node is single threaded. :)
18:49 < gluxon> epochwolf: Actually, you can't. :(
18:49 < gluxon> Maybe you could if you declare variables, then "require", but I've never tried that.
18:49 < epochwolf> gluxon: interesting, so you can't just to process.bot = new irc()?
18:49 < epochwolf> just do*
18:50 < gluxon> Your plugins won't see it.
18:50 < gluxon> You will need to pass process.bot
18:50 < epochwolf> ahâ€¦ someone is trying to protect me from myself :D
18:50 < gluxon> Wait..
18:50 < gluxon> I apologize. You can do that.
18:50 < gluxon> But I highly recommend not! :)
18:51 < epochwolf> gluxon: I would agree. 
18:51 < gluxon> epochwolf: Have you written any npm modules before?
18:51 < epochwolf> gluxon: I'll redo this and come back to ask another question.
18:51 < epochwolf> no, first attempt at node.js
18:51 < gluxon> epochwolf: Ok.
18:51 < epochwolf> I've done javascript in the browser before but I'm new to server-side js.
18:51 < epochwolf> I've got 6 years of ruby/rails experience.
18:51 < gluxon> epochwolf: I recommend making your plugins into a class, then doing "exports.nameOfClass = nameOfClass"
18:51 < epochwolf> which ain't helping ;)
18:52 < epochwolf> gluxon: doing that
18:52 < gluxon> epochwolf: Ok.
18:52 < gluxon> Nice that you're jumping into server-side js :)
18:56 < epochwolf> gluxon: well, I wanted an async bot and it was node.js or go. (Ruby doesn't do async too well)
18:56 < epochwolf> I figured node.js would be faster to learn.
18:56 < gluxon> Since you know JS already, I assume?
18:56 < epochwolf> and lua
18:57 < epochwolf> I wrote an irc bot in lua and did the protocol stuff myself. :) Node.JS has a really nice irc library so that sealed the deal. 
18:57 < epochwolf> https://gist.github.com/epochwolf/07b23a5e6091e0b77fb8 okay, will this work?
18:58 < epochwolf> gluxon: my main problem is I don't know how to extract the function instances so I can attach them to events.
18:58 < epochwolf> I think that will work but I'm not sure.
18:59 < gluxon> epochwolf: I'm not an expert in CoffeeScript. Is @ this?
18:59 < epochwolf> gluxon: @ = this.
19:00 < epochwolf> gluxon: added the javascript output to the bottom
19:00 < gluxon> I don't see @bot = bot, but I do see @bot in the function parameters. If that works like I think it does, you should be fine now :)
19:00 < gluxon> :O
19:00 < gluxon> Ok, I looked at the vanilla js output.
19:00 < gluxon> That should do it.
19:01 < epochwolf> gluxon: sorry, I use coffeescript to save typing. I have RSI issues. :(
19:01 < gluxon> I have no issues with CoffeeScript. :)
19:01 < gluxon> It looks pretty.
19:01 < gluxon> I should at least learn it.
19:01 < epochwolf> it does but newbies need to know what js trickery it does
19:02 < vampi-the-frog> I'm looking for a sort of resizable buffer class that I can just append to
19:02 < vampi-the-frog> any hints?
19:02 < epochwolf> like wrapping the file in a function call to scope variables.
19:02 < gluxon> vampi-the-frog: bufferstreams?
19:03 < vampi-the-frog> I don't get it, why is this a separate package from node core?
19:03 < gluxon> vampi-the-frog: The philosophy with Node.js is to reduce core modules.
19:04 < gluxon> vampi-the-frog: That way, there is competition with third-party modules, and competition is good :)
19:04 < vampi-the-frog> I figured an appendable buffer should be in core
19:04 < gluxon> vampi-the-frog: Just do buffer.copy
19:05 < gluxon> vampi-the-frog: A dynamic buffer is used less often than you would think.
19:05 < epochwolf> gluxon: it's good until you need to sift though 30 incomplete database orms to find one that is useable and then discover it no longer works with the latest node.js and the maintainer vanished over a year ago :P
19:05 < vampi-the-frog> I'm trying to buffer a file upload in memory before writing it to disk, because I'm asynchronously waiting for mysql.query and fs.open
19:05 < gluxon> vampi-the-frog: Sorry, copy wasn't what you should look at. "Buffer.concat"
19:05 < gluxon> vampi-the-frog: That should do what you want.
19:05 < epochwolf> gluxon: so in the plugin loader I can just do plugins[filename] = new Plugin(bot, config); and then plugins[filename].__listeners for the event callbacks? 
19:06 < gluxon> epochwolf: After you require of course :)
19:06 < epochwolf> gluxon: well yes.
19:07 < epochwolf> gluxon: https://github.com/epochwolf/pious-plum I do have a working bot. :P
19:07 < epochwolf> I'm just adding plugins now.
19:07 < gluxon> epochwolf: :O
19:08 < epochwolf> I just had a scoping problem :)
19:08 < gluxon> epochwolf: By the way, have you had issues with node-irc being a little slow?
19:08 < epochwolf> gluxon: I've got a retina macbook pro running it, it would be hard to notice :/
19:08 < gluxon> Oh ok.
19:09  * gluxon is now jealous
19:09 < epochwolf> gluxon: oh, let me help with that. 
19:10 < epochwolf> gluxon: https://dl.dropboxusercontent.com/u/361483/screenshots/IMG_0832.JPG :)
19:11 < epochwolf> of course, I'm not at home right now. I'm out drinking coffee. 
19:11 < gluxon> epochwolf: Geez man. I have a friend with 3 monitors and I think that's insane.
19:11 < epochwolf> gluxon: it is insane.
19:11 < gluxon> Is that MacBook just being used as an extra screen? I don't see a dock on it.
19:12 < epochwolf> yes
19:12 < gluxon> Actually, I don't see a dock on any of the screens.
19:12 < epochwolf> it's driving 3 external monitors and it's internal.
19:13 < epochwolf> I normally keep the lid closed, having the retina screen on with the other 3 pushes the limits of the gpu.
19:14 < epochwolf> There's no dock. I just leave that computer there most of the time.
19:14 < epochwolf> I actually do most of my work on a 13" Air. ._.
19:15 < epochwolf> The retina is too large and expensive to be hauling around Seattle.
19:16 < epochwolf> I got a really sweet deal on my rent two years ago (I'm 30 minutes north of the city) and I've been able to put the extra money into computers. 
19:17 < Multiply> Is the "define" function removed?
19:17 <@mbalho> wat
19:18 < Multiply> I have a node module complaining about "define" not being defined.
19:18 < epochwolf> Multiply: what's "define"? JS and Node.JS docs show no define function.
19:18 < timeturner> define is not a node thing
19:18 < Multiply> It used to be, right?
19:19 < Multiply> http://nodejs.org/docs/v0.5.0/api/modules.html <- Older docs, show it used to be in there somewhere :P
19:19 < Multiply> I'm just curious as to when it was removed.
19:20 < epochwolf> Multiply: well, it's not in 0.6.0 :)
19:20 < random_> Hello when running ./cofigure on a arm system, I am getting a error saying it can't import input.py, any ideas why this is?
19:21 < epochwolf> gluxon: thank you very much for your help. :)
19:22 < Multiply> Seems like 0.5.3 removed it.
19:24 < random_> Any ideas on why input .py is having import problems?
19:27 < HSL> morning!
19:29 < dekiss> wtf this channel have more peopel then php?
19:30 < dekiss> is node.js so popular?
19:30 <@mbalho> i saw it on the news this mroing
19:35 < HSL> Does anyone understand why I get this error? https://gist.github.com/hsleewis/218a0649423d9b0afcd6
19:38 < HSL> I don't get the error when all clients connect, but it just happens sometimes
19:42 < gluxon> HSL: It'll happen when fn isn't passed.
19:44 < HSL> from the clientside you mean?
19:46 < HSL> gluxon: mhmm,.. maybe some clients cached an older version of the client js
19:47 < HSL> Is this the best way to send the id back to the client?
19:49 < wathek> is it possible with node.js to call multiple functions and the first one that return the answer I need will interrupt the other functions that didn't return a result yet
19:55 <@mbalho> wathek: https://github.com/maxogden/art-of-node#callbacks
19:56 < wathek> thank you mbalho 
20:04 < bobo> ciao
20:04 < Eigen> ciao
20:04 < bobo> !list
20:04 < Eigen> is there no way I can get an id from post
20:04 < bobo> ok
20:08 < kumavis> browser-resolve 1.0.1 fails to locate package.json https://gist.github.com/kumavis/5691536
20:08 < Eigen> i can get the  value of an option right?
20:08 < Eigen> from req.body?
20:17 < rhalff> hi, among many things, I'm also a loser in coding formats, can anyone recognize if I'm sending a screwed up image: http://pastebin.com/fkz3RSn2  amazon gives me md5 digest errors
20:17 < niix> Would building an mmo using socket.io be a good idea?
20:18 < rhalff> looks like weird utf-8 or something to me.
20:23 < demio> hi guys 
20:23 < demio> is there a way to see any other tags (other than latest) in npmjs.org?
20:24 < rhalff_> http://pastebin.com/XDiy7ad3   this is the code and reply from S3
20:25 < beg> rhalff, could this be the issue? 'content-type': 'application/xml',
20:25 < demio> i just published a package to the "beta" tag
20:25 < demio> but I cant find it here: https://npmjs.org/package/airbrake
20:27 < demio> i used npm publish --tag beta
20:28 < rhalff_> beg, no that is the dumped reply from amazon
20:33 < levilewis> is there a way to make an http OPTIONS method request with node? or handle them in express? https://github.com/mikeal/request this library doesn't seem to have a way to make http OPTIONS requests either
20:34 < levilewis> trying to self describe my api, but I want to be able to handle OPTIONS request method to do that
20:35 < levilewis> maybe  i need a middleware or to writeone
20:36 < niggler> you need a middleware for your middleware?
20:37 < levilewis> no I don't have any middleware, i just don't see a way in expess to handle http OPTIONS method.. only get, put, post and delete...
20:37 < rhalff> levilewis, http://www.nodejs.org/api/http.html#http_http_request_options_callback
20:37 < levilewis> here maybe this explains better http://zacstewart.com/2012/04/14/http-options-method.html
20:37 < rhalff> levilewis, the link is about options btw, not about OPTIONS, but I guess OPTIONS is just another option.
20:39 < levilewis> yeah, i saw. so does what I'm asking make sense?
20:40 < rhalff> levilewis, did you try? and the request failed?
20:40 < levilewis> basically I have JSON which describes each of my routes. So, I want to display that if a request for http OPTIONS is sent to the routeâ€¦
20:41 < rhalff> levilewis, ok, I thought you wanted to make a request from node to another server.
20:44 < levilewis> nah, really just interested in handling the incoming request right now
20:44 < Eigen> is there anyway i can get the selected option in jade
20:45 < Eigen> outside of the select tag
20:45 < levilewis> rhalff, that is why I was thinking maybe a middleware
20:47 < rhalff> levilewis, did you actually try doing app.options(bla bla... ?
20:48 < rhalff> levilewis, just watched the sourcecode of express and it seems it supports each and every method, I never tried though.
20:50 < gildean> Eigen: the jade template is compiled to html, if you mean get the selection on the clientside, you do that the same way as with any html
20:53  * rhalff googles for the app.BadDigest(fixYourself) method.
20:53 < mscdex> oh man... a browser library browserified...... mind blown.
20:55 < rhalff> mscdex, eloborate yourself
20:56 < mscdex> someone browserified angularjs
20:58 < mikolalysenko> mscdex: browserify everything!
20:58 < mikolalysenko> even browserify
20:59 < mscdex> browseriception
20:59 < rhalff> mscdex, I'm not sure I understand the impact, angularjs is client side, browserified is to make server side code become client side.
20:59 < mscdex> rhalff: yep, that's what i don't understand either :-)
21:00 < mikolalysenko> I think that distinction is a bit narrow
21:00 < mikolalysenko> basically you just use browserify whenever you want to use commonjs in a browser
21:00 < mscdex> true, but angular doesn't even deal with any of that stuff
21:01 < mikolalysenko> yeah, but packaging it as a commonjs module makes a lot of sense if you are going to use it
21:01 < mikolalysenko> especially with other code that uses commonjs
21:05 < rhalff> mscdex, I'm new to node, I don't quite understand, does browserify means there are also npm packages which will only run in the browser?
21:08 < mikolalysenko> rhalff: npm packages are just commonjs modules
21:08 < mikolalysenko> you can run them on the browser or on node
21:08 < mikolalysenko> part of the benefit of using node is that you can share code between server and client
21:08 < mikolalysenko> (otherwise, why else would you even bother writing a server in javascript? :P )
21:09 < rhalff> mikegerw1tz, ok so what does require('fs') do in the browser?
21:10 < mikolalysenko> rhalff: depends.  it may crash or if you have a shim it will emulate stuff
21:10 < rhalff> also I can just http.get what I want on the server, but within the browser you'll just get cross-domain errors.
21:10 < mikolalysenko> rhalff: example:  https://github.com/substack/brfs
21:10 < mikolalysenko> that uses static analysis to bundle your files into your main js
21:11 < mikolalysenko> rhalff: anyway, I have to go right now but you should check out this:  http://browserify.org/
21:11 < rhalff> mikolalysenko, ok, no problem(s?)
21:15  * rhalff needs a job, will poor coffee for money
21:20 < levilewis> rhalff, yeah it does just work. nice!
21:21 < mscdex> that's confusing... brfs is the name of a filesystem
21:22 < mscdex> er btrfs
21:22 < mscdex> :-)
21:23 < rhalff> levilewis, it seems it includes another module 'methods', which is a npm package, it includes all flavours of http requests. Just grep for it in the express sources.
21:25 < levilewis> thanks for the hint
21:27 < kumavis> is 'events' considered core ?
21:27 <@konobi> mscdex: got another library for ya... =0P
21:28 < javad> hi
21:28 <@konobi> mscdex: cdk
21:29 < gildean> kumavis: yes: http://nodejs.org/api/events.html
21:30 < kumavis> gildean ty
21:31 < kumavis> mikegerw1tz im trying to solve require('fs') in the browser by implementing a virtual file system
21:31 -!- mode/#Node.js [+o MI6] by ChanServ
21:33 < javad> ------------------------------------------------------------------
21:33 < javad> i have one error: Cannot find module 'uqlify-js'
21:33 < kumavis> mikegerw1tz by default it just returns {}
21:35 < kumavis> mikolalysenko im working on browserifying browserify
21:35 < kumavis> or at least npm
21:35 <@isaacbw> javad: why did you type out a line like that
21:36 < rhalff> javad, npm i
21:36 < rhalff> btw, I think npm is ancient
21:37 < javad> ahhhhhhhh
21:37 < javad> close open
21:37 < javad> close opne
21:42 < javad> @isacbw: http://jsbin.com/anolid/2/watch
21:42 <@konobi> kumavis: what doesn't work about npm under browserify?
21:42 < kumavis> to clarify im talking about browserifying npm
21:43 <@konobi> yes... so, what doesn't work?
21:43 < kumavis> npm requires the filesystem etc, which browserify does not provide atm
21:43 <@konobi> ah
21:43 < kumavis> im starting there
21:43 < kumavis> goal is full environment in the browser
21:43 < javad> this is my code
21:43 < javad> http://jsbin.com/anolid/2/watch
21:43 < kumavis> but im not too worried about reaching that goal just yet
21:44 < javad> i have error: Cannot find module 'uqlify-js'
21:44 < mscdex> konobi: already looked at it before
21:44 <@isaacbw> javad: what?
21:44 <@isaacbw> why did you link me that
21:45 < javad> u want
21:45 < javad> :D
21:45 <@isaacbw> what
21:45 <@isaacbw> I'm so confused
21:46 < javad> u see my code
21:46 < mscdex> konobi: cdk is missing some things yet like unicode support
21:46 < javad> see u*
21:46 < mscdex> konobi: i'm not even sure it's still being actively developed
21:46 <@konobi> oh? i can link it against ncursesw
21:47 <@konobi> mscdex: http://invisible-island.net/cdk/cdk.html # this version?
21:47 <@konobi> ah... i see
21:48 <@konobi> mscdex: i was mixing it up with his version of dialog which does support wide characters
21:48 < mscdex> konobi: yeap
21:49 < mscdex> last changelog date is 2012/03/23
21:49 <@konobi> though his dialog is available as a library as well as a program
21:50 < eighty4> javad: I don't think isaacbw actually said he'd help you. He wondered why you typed a long ----- line. I'm guessing it was to clearly mark your question?
21:51 < mscdex> konobi: yeah i had looked at that too awhile back, but there was something about it that kept me from pursuing it
21:52 <@konobi> license maybe?
21:53 < javad> :(
21:53 < javad> bye
21:54 <@konobi> o.O
21:55 < mscdex> konobi: well, it's lgpl which shouldn't be a problem
22:44 < dekiss> node.js php or what? which is best? node.js is faster than php?
22:44 < niggler> define "faster"
22:44 < dekiss> lets say for working with arrays
22:45 < niggler> php doesn't rly have arrays
22:46 < lohkey> all arrays in php are represented as zend HashTables
22:46 < Havvy> dekiss: For working with arrays, it really doesn't matter.
22:46 < Havvy> For the most point, that is noise.
22:46 < lohkey> even objects in the zend engine are structs that wrap zend HashTables
22:47 < Havvy> Node's environmental execution model makes it highly more likely to be faster than PHP for web servers.
22:47 < Havvy> The main aspect of that being non-blocking I/O and not creating a new thread for every request.
23:09 < Eigen_> what is the fastest pdf js viewer out there
23:09 < epochwolf> gluxon: still around?
23:09 < Havvy> Do you mean js pdf viewer?
23:09 <@isaacbw> js pdf viewer viewer
23:09 < Eigen_> like pdf.js
23:10 < jondelamotte> cool
23:12 < Havvy> Eigen_: AFAIK, pdf.js is the only JS PDF viewer.
23:12 < Eigen_> in htms
23:13 < niggler> where's the coffee script pdf viewer?
23:14 < mscdex> konobi: i think it was the input handling for dialog, it's all sync
23:14 <@isaacbw> cool people write c and compile it with emscripten
23:15 < Eigen_> whats the point of doing that isaacbw
23:15 < Eigen_> i would use it to port something but thats about it
23:15 < niggler> cool != practical
23:15 <@isaacbw> don't you want to be cool Eigen_ 
23:16 < Zolmeister> I write all my javascript in c
23:16 <@konobi> mscdex: i suppose that kinda makes sense though
23:16 < Eigen_> lol
23:16 < niggler> its intellectual masturbation Eigen_ 
23:16 < Eigen_> ok then
23:16 <@konobi> mscdex: though they do have some async functions
23:16 < Eigen_> C is nice but it is very verbose
23:17 < mscdex> konobi: well with the ncurses module, it's async because you have control of when to call potentially blocking functions like getch
23:17 <@isaacbw> it just requires a lot of boilerplate to do anything useful
23:17 < mscdex> konobi: where are the async functions?
23:17 <@konobi> utility funcs
23:18 < mscdex> oh
23:22 < tjmehta> hello can anyone help me with a quick jade question? -- how do i go about doing this:::
23:22 < tjmehta> if theme
23:22 < tjmehta>   script(type="text/javascript", src="//rawgithub.com/ajaxorg/ace-builds/master/src-min/theme-#{theme}.js")
23:22 < tjmehta> notice the them var in the jade "script tag"
23:22 < tjmehta> theme*
23:22 < ningu> tjmehta: that should work fine
23:22 < tjmehta> ningu i get an error src="//rawgithub.com/ajaxorg/ace-builds/master/src-min/theme-#{theme}.js") 140| 141| // Application script theme is not defined
23:23 < ningu> tjmehta: are you passing the theme var to the template?
23:23 < Zolmeister> ningu: but hes checking 'if theme'
23:24 < ningu> Zolmeister: I'm pretty sure you still have to have it be defined
23:24 < tjmehta> ningu, btw yes i am
23:24 < mscdex> konobi: using the utility functions to do all the work kind of defeats the purpose of creating a dialog binding though, may as well use plain ncurses :-)
23:24 < ningu> Zolmeister: or rather, passed in some way, so as in { theme: undefined } would be ok
23:24 < ningu> Zolmeister: but not passing it at all would not be
23:24 < tjmehta> i have an object with multiple keys defined on it
23:24 < tjmehta> including theme
23:24 < Zolmeister>  ningu: but then it would error at the 'if' no?
23:24 < tjmehta> which i have logged on teh backend
23:25 < tjmehta> so that i am sure it holds a vlue
23:25 < ningu> Zolmeister: looks like it does error on both lines
23:25 <@konobi> mscdex: yeah, just a shame there isn't a quick easy way to do the UI kinda stuff
23:25 < ningu> tjmehta: ok, and are you sure you're passing it to your template?
23:25 < DiegoMax> i have a question
23:25 < ningu> tjmehta: it's possible that 'theme' is somehow reserved by jade, try changing it to 'thm' or something just to be sure
23:26 < Zolmeister> DiegoMax: don't ask to ask
23:26 < ningu> tjmehta: I had that issue once but it was a more obvious conflict 
23:26 < DiegoMax> in JS, when you do var objA = objB, is that a reference or a copy ?
23:26 < DiegoMax> Zolmeister, give me time to write the question
23:26 < ckknight> DiegoMax: reference.
23:26 < ningu> DiegoMax: reference
23:26 < Havvy> A reference.
23:26 < ckknight> Does anyone know if mocha's html-cov reporter supports tracking branchData?
23:26 < tjmehta> oh strange it appears to be working now :-P
23:26 < DiegoMax> is there any way to make a copy ?
23:26 < Zolmeister> _.clone
23:26 < ckknight> DiegoMax: yeah, make a new object and copy the properties
23:26 < tjmehta> thanks ningu and Zolmeister
23:26 < ningu> tjmehta: you should file a bug
23:26 < ningu> tjmehta: ask them to document the predefined variables that you shouldn't use
23:26 < DiegoMax> Zolmeister, is that from the underscore lib right ?
23:26 < mscdex> konobi: well i suppose you could just use all of the helper threads in a thread instead of rewriting dialog heh
23:27 < Zolmeister> DiegoMax: yup
23:27 < DiegoMax> will it keep child objects too ?
23:27 < ningu> DiegoMax: there are shallow and deep copy methods
23:27 < DiegoMax> i really cant belive that the langauge does not support object copying
23:27 < ningu> I think _.clone is just a shallow copy
23:27 < DiegoMax> cool thanks
23:27 < Zolmeister> DiegoMax: you can cheat: JSON.parse(JSON.stringify(obj))
23:27 < ningu> hehe
23:27 < ningu> yeah
23:27 < DiegoMax> ohhh!
23:27 < DiegoMax> that sounds like a great idea
23:28 < ningu> DiegoMax: it's kind of ugly but yeah
23:28 < ckknight> DiegoMax: copying is a bit too complex to just have one way to do it
23:28 < Havvy> ningu: Minus the part where that doesn't work for functions.
23:28 < mscdex> Zolmeister: that won't copy some objects though
23:28 < DiegoMax> ckknight what is so complex about copying an object ?
23:28 < ningu> Havvy: can you even copy a function, rather than a reference to it?
23:28 < ningu> maybe using Function...
23:29 < Zolmeister> ningu: you can .toString() it
23:29 < niggler> toString
23:29 < ckknight> DiegoMax: do you want a shallow or deep copy? Do you want to have the same prototype or a different one? When cloning an array, do you want a new array or an object with the properties of the array? Also, if that array has non-indexed properties, how do you want to handle them?
23:29 < DiegoMax> i just want an exact replica of the object i had ?
23:29 < ckknight> DiegoMax: what does that mean?
23:29 < DiegoMax> it means that if there was an array, i want an array
23:29 < DiegoMax> etc
23:29 < ckknight> DiegoMax: how shallow or deep of a copy?
23:30 < Zolmeister> I think he wants all the way new stuff
23:30 < DiegoMax> in other languages, like obejctive-C for example, a copy is just that, a copy
23:30 < ckknight> so a shallow copy, then?
23:30 < ningu> DiegoMax: I suspect each class has to define its own copy method
23:30 < DiegoMax> then you can implement the isEqual method to test for equality if you so need
23:30 < ningu> like in C++ or Java
23:30 < ckknight> yeah, that's generally how it is, ningu
23:31 < ckknight> although .NET supports the protected .MemberwiseClone()
23:31 < ningu> ckknight: gesundheit (coffeescript sql library for node) lets you do q.copy() to clone a query
23:31 < ningu> but it doesn't seem to be a very common JS pattern
23:31 < ningu> it's very useful in that case though
23:31 < DiegoMax> i will try the underscore library and see how it works, my objects are kind of simple so i guess it will work
23:31 <@konobi> mscdex: bah... may need to fall back to perl for this one =0/
23:31 < ckknight> konobi: don't cave in!
23:32 < Zolmeister> DiegoMax: you could also use polish.js: https://github.com/Zolmeister/Polish.js (its only 1.45KB)
23:32  * DiegoMax looks
23:32 < Zolmeister> which uses the JSON.parse stuff
23:32 < ningu> Zolmeister: does that mean polish or Polish?
23:32 < Zolmeister> polish
23:32 < Havvy> ningu: Not with a 100% guarantee, but it is possible.
23:32 < Zolmeister> ik, its confusing
23:32 <@konobi> ckknight: sometimes you have to go for the tools with the libraries
23:32 < ckknight> I once saw a bottle of "Polish Remover" at a girlfriend's house, who was Polish. I was very disconcerted.
23:33 < DiegoMax> lol
23:33 < ningu> Zolmeister: I just came up with the concept of a "pole vault" which would be a secure location to keep poles (or Poles)
23:33 < Zolmeister> lol
23:34 < ckknight> DiegoMax: why do you even want a copy, anyway? Would a prototypical child not suffice in your case?
23:34 < niggler> what's the origin of the name Zolmeister 
23:35 < Zolmeister> niggler: idk, I was gonna name it sparkle but decided polish was better suited
23:35 < ningu> the prototypical child is rather hard to manage for many years
23:35 < jondelamotte> Another suggestion over underscore is lodash, it's faster and lighter in most cases: http://lodash.com/
23:36 < niggler> also, you seem to have license issues Zolmeister 
23:36 < niggler> package.json says BSD
23:36 < niggler> read me says BSD
23:36 < niggler> source says MIT
23:36 < ningu> that reminds me... any pointers on where I could go for a balanced discussion of MIT vs. BSD vs. Apache vs. whatever other open-source licenses?
23:36 < niggler> if you are using BSD, you have to specify which type (2 clause, 3 clause)
23:37 < niggler> if you are using MIT you need to include the actual license
23:37 < niggler> ningu: define "balanced"
23:37 < DiegoMax> ckknight, im having some circular reference issues with some object that im serializing from a memory storage
23:37 < ningu> I don't need to become an expert. I'm just trying to understand why you'd pick one over the other for code you basically want other people to use without (much) restriction.
23:37 < ningu> niggler: why you'd pick one over another
23:37 < DiegoMax> i want to just be able to copy it, remove the circular reference issue
23:37 < DiegoMax> and send it back to the client
23:37 < ckknight> DiegoMax: ah, okay.
23:37 < ningu> niggler: or why people insist one is better... I just want to understand how the debate is framed
23:38 < ningu> niggler: don't need an exhaustive "right" answer since there probably isn't one
23:38 < Zolmeister> err.. so it was going to be MIT, but then npm has bsd by default so I left it, like that. do I really need to specify the version?
23:38 < ningu> Zolmeister: there are several versions of MIT
23:38 < niggler> there are several versions of BSD
23:38 < ningu> MIT/X11 might be sufficient to not have to include hte license
23:38 < ckknight> ningu: http://en.wikipedia.org/wiki/MIT_License#Comparison_to_other_licenses
23:38 < niggler> no MIT definitely needs the license
23:39 < niggler> http://blog.nig.gl/post/4884876220/just-saying-something-is-gpl-mit-apache-doesnt
23:39 < ckknight> you should include the license in your project regardless
23:39 < niggler> the only one you can safely omit is GPL, because there is an explicit carveout
23:39 < ningu> ckknight: I've read that actually. it's helpful but I'm hoping to get a bit more info, maybe individual people who've chosen one over another and explaining why.
23:39 < ningu> I just don't really understand the stakes.
23:39 <@isaacbw> if you really don't want to include the full text, you can link to the full text
23:40 < Zolmeister> ningu: would you suggest BSD 2 clause or 3?
23:40 < ningu> niggler: that link is 404
23:40 <@isaacbw> but you have to be explicit about it
23:40 < ningu> Zolmeister: I wouldn't suggest anything
23:40 < niggler> you can only link to full text in the case of GPL isaacbw 
23:40 < ckknight> ningu: for me, I prefer MIT for libraries, I prefer it over BSD because it's a bit simpler and covers what I care about.
23:40 < ningu> since I don't understand as should be clear :)
23:40 <@isaacbw> niggler: I've seen high profile projects link to various licenses including apache
23:40 < ckknight> ningu: I'm not a fan of GPL for licenses due to its hazy viral nature.
23:40 < niggler> ningu: it should be the second post on blog.nig.gl
23:41 < ningu> ckknight: yes, I understand the arguments for and against GPL relatively well. it's the "smaller" (in length) licenses I'm kind of confused about. there's also creative commons and public domain.
23:41 < ckknight> granted, I wouldn't have a problem using or contributing to GPL'd code
23:41 < niggler> isaacbw: i had an email conversation with some OSI people a few weeks ago, and they made it clear that licenses need to be included unless the license says otherwise
23:41 < ckknight> ningu: creative commons is not good for software, it's great for art.
23:41 <@isaacbw> it's not just a random link stuck in, it still has copyright text and an explicit "This is released under the apache license available at http://..." etc
23:41 < ningu> ckknight: if attribution is the only question, public domain is perfectly valid. so what does BSD or MIT buy you?
23:41 < ningu> ckknight: ok, but why?
23:41 <@isaacbw> niggler: oh, interesting
23:41 < niggler> ultimately ningu the licensing isn't for you
23:41 < niggler> its for others using your code
23:42 < ckknight> ningu: I have a few more rights wrt attribution when it comes to PD vs MIT
23:42 < niggler> there was a coding horror post on this
23:42 < ningu> to make clear what they have permission to do without worrying?
23:42 < ningu> ckknight: such as what?
23:42 < niggler> to make it clear that you won't go after them for using the code
23:42 <@konobi> ckknight: PD actually increases your liability though
23:42 <@isaacbw> I suspect there's some legal fuzzy ground regarding linking
23:43 < ningu> niggler: and if it's PD you might...? that seems a bit... odd
23:43 < ckknight> konobi: because it doesn't include the warranty provision?
23:43 <@konobi> bingo
23:43 < ckknight> thought so
23:43 < ningu> the liability issue makes some sense
23:43 < niggler> ningu: just releasing code doesn't make it open source or public domain
23:43 < ningu> niggler: no, but you can explicitly say so
23:43 < niggler> http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html
23:44 < niggler> that's the best discussion I've seen on the matter
23:44 < ningu> cool, many thanks
23:44 <@konobi> it depends on the juristiction though... but really no reason why you shouldn't go for an OSI approved one
23:44 < ningu> +1 for the Russian license
23:44 < ningu> diploma, actually
23:44 < niggler> as a side note: http://dschep.github.io/license-checker/
23:45 < demio> woot just published a new versionf of node-airbrake
23:45 <@isaacbw> niggler: 
23:45 < ckknight> niggler: good links
23:45 < demio> time to go eat something
23:45 <@isaacbw> https://www.apache.org/licenses/LICENSE-2.0.html
23:45 < ckknight> I need to add a license to one of my repos.
23:45 <@konobi> though CDDL and MPL are pretty good as they also have decent patent clauses
23:46 < ningu> ckknight: I also don't know the law regarding that, like: does that mean the license only covers the revisions it's included in? :)
23:46 < ckknight> ningu: you are correct.
23:46 < ckknight> ningu: anything without an explicit license is All Rights Reserved (R)
23:46 < ningu> hmm, ok
23:46 < ningu> so actually more restricted, not less
23:46 < ckknight> correct
23:46 < ckknight> ningu: now you could hold people liable for using your (R) code, even after you slap on a license to newer versions
23:47 < niggler> technically you can't ckknight 
23:47 < ckknight> also, if you initially release under PD and then close it up, people can still take your old PD code and do what they want
23:47 < ckknight> niggler: explain
23:47 < ningu> ckknight: what if they only use the newer ones though?
23:47 < niggler> once the license is added, they can remove and then add the code under the new license
23:47 < ckknight> ningu: as long as you legally applied the license, they're in the clear.
23:47 <@isaacbw> II don't see a line about linking in the apache license, but the example shows linking
23:48 < niggler> *assuming they add the new code
23:48 < ckknight> niggler: that doesn't refute anything I said.
23:48 < niggler> isaacbw: that's why i said it was strange
23:48 < niggler> ckknight: if you slap a license onto the newer versions
23:48 <@isaacbw> have you talked to anyone else about it? There may be varying legal opinions
23:48 < ckknight> and they continue to use the old versions without license, they can be liable.
23:48 < niggler> users can elect to use the newer version of the code
23:48 < ckknight> right, which they should do
23:48 < niggler> even if the newer and older versions of the code are the same
23:49 < niggler> they can claim to use the newer version
23:49 < ckknight> also correct
23:49 < niggler> ckknight: you are saying that you can old people liable for using pre-licensed code
23:49 < ckknight> hold
23:49 < ckknight> but yes
23:49 < ckknight> you could
23:50 < ckknight> if you released code without a license, they used it (technically without the legal rights to)
23:50 < ckknight> you could then hold them liable
23:50 < niggler> the end user could claim to use the newer version with modifications
23:50 < ckknight> that's for the courts to decide.
23:50 < deoxxa> ckknight: i'd love to see that stand up in court
23:51 < niggler> i actually can't think of a court case trying this particular aspect, but I suspect that you would have to prove that the older version was explicitly used
23:51 < ningu> deoxxa: code doesn't have legs
23:51 < deoxxa> i just can't imagine any court siding with someone who says "yeah i put it on github/npm/the internet and made it available for download, but i didn't say you could actually *use* it"
23:51 < ckknight> deoxxa: given in this situation, the same code is re-released under a more permissive license, I doubt it would hold up, but if that didn't occur, it would hold up just fine in court.
23:52 < niggler> ckknight: i agree in the latter case, but you started this by saying if the code was re-released under a more permissive license
23:52 < ningu> does github have any statement about the terms your public repo will be under if you don't specify?
23:52 < niggler> no which is why github is dangerous ningu 
23:53 < niggler> isaacbw: i haven't seen anyone challenge the issue regarding apache linking
23:55 < Zolmeister> Is it ok to use my screen-name as the copyright holder?
23:55 < ningu> Zolmeister: I doubt it
23:56 < ckknight> Zolmeister: it's better to use your full name and include an email address
23:56 < ckknight> but I would bet money that you could use a pseudonym as long as it wasn't fraudulent
23:57 < AAA_awright> Your work is copyrighted regardless if you put your name on it or not, your name doesn't matter
23:57 < Zolmeister> AAA_awright: For public licensing is what I was referring to
23:57 < niggler> the only one that can challenge copyright violations is the copyright holder
23:58 < ningu> what does it mean to have multiple copyright holders? do they all have equals rights?
23:58 < niggler> so in using a pseudonym you relinquish that right
23:58 < ningu> and what if it's copyrighted by a company *and* a person?
23:58 < ckknight> niggler: that is not how it works under the law
23:58 < AAA_awright> A judge shouldn't have any problem enforcing a case against someone using a pesudonym, given you get that far with it
23:58 < Zolmeister> cool
23:58 < AAA_awright> ningu: Many OSS works will have hundreds or thousands of authors for the purpose of copyright
23:58 < Zolmeister> real names are for squares anyways
23:59 < niggler> If someone named "foo bar" wrote a module foobar.js
23:59 < ckknight> ningu: multiple copyright holders depends on the contract between the people, one could own a portion or they could own equally.
23:59 < ningu> ok
23:59 < niggler> and someone named "baz qux" used the module improperly
23:59 < ningu> and if corporations are people I guess they are equivalent
23:59 < AAA_awright> ningu: If written for a company, it's likely a work-for-hire and the company owns the copyright, not the programmer
23:59 < ckknight> ningu: yeah, corporations are legal persons under the law
23:59 < niggler> no one else can go after baz qux for violations
23:59 < ningu> AAA_awright: right, I assume that as well unless the contract says otherwise
--- Log closed Sun Jun 02 00:00:00 2013
