--- Log opened Tue Feb 26 00:00:38 2013
00:06 < sitapati> what's the lowdown on named arguments as function parameters? Good idea?
00:07 < bnoordhuis> sitapati: you mean fun(arg=42)?
00:07 < bnoordhuis> or fun({arg:42})
00:12 < samholmes> sitapati: I think so
00:12 < samholmes> I would have preferred JS to look like fun(a:b, c:d). But that's just me.
00:16 < sorensen> samholmes: like python?
00:16 < samholmes> sorensen: I wouldn't know. I'm only good with JS
00:16 < samholmes> sorensen: Does python allow you to order your parameters anyway you'd like?
00:16 < sorensen> if they are named params yes
00:16 < sorensen> kwargs they call em
00:17 < sorensen> so `foo(blah=2, asdf=4, 2, 1)
00:17 < sorensen> `def foo(asdf, blah, meow, bark)
00:18 < sorensen> named args can go in any order, unnamed need to be in order
00:18 < samholmes> kwarg?
00:18 < samholmes> wtf
00:18 < sorensen> key word argument
00:18 < digitalgravy> keyword args
00:19 < sorensen> i love how python does it
00:19 < samholmes> What about the arguments object?
00:20 < sorensen> `def foo(meow, bark, **kwargs, *args)
00:20 < sorensen> args is the normal arguments object
00:20 < sorensen> kwargs is the named arguments
00:20 < samholmes> weird
00:20 < samholmes> why the ** vs *
00:20 < samholmes> also what about
00:20 < sorensen> to denote args vs kwargs
00:20 < sorensen> or did i do that backwards
00:21 < sorensen> you could call it whatever, `def bark(**dogs, *cats)
00:21 < samholmes> def foo(a, b, c, d); ... foo(d=1, 2, a=3, 4); I'm guessing b and c are 2 and 4?
00:21 < sorensen> though i think its actually *args then **kwargs
00:22 < samholmes> I see
00:22 < sorensen> yes
00:22 < sorensen> you can also do stuff like... `def foo(a=1, b=2, c=3)`  foo(c=5)
00:22 < sorensen> get ya some defaults in there
00:23 < azylman> I loves me some default args in coffeescript
00:23 < samholmes> sorensen: I could I do, `def foo()` foo(whatever=2) ?
00:23 < sorensen> no
00:23 < sorensen> since you didnt define the function to take any args
00:23 < samholmes> how about
00:24 < samholmes> `def foo(**kwards)` and then `foo(whatever=2)`
00:24 < sorensen> kwargs would = {'whatever': 2}
00:24 < samholmes> That's kinda cool
00:24 < sorensen> heres a good little writeup: http://agiliq.com/blog/2012/06/understanding-args-and-kwargs/
00:24 < samholmes> but I would have skipped the **kwargs part
00:25 < samholmes> I would have like a single object like arguments for every function scope, like in JS
00:25 < samholmes> only not arguments.
00:25 < samholmes> maybe args
00:25 < sorensen> the kwargs i think is the best part
00:26 < sorensen> how else would you specify which arg you are actually sending
00:27 < sorensen> you could always just send a single argument as an object
00:27 < samholmes> sorensen: yeah, I like it. But I want to take it further. Check out my blog post I made last year when I was thinking about a language. http://scripterrific.tumblr.com/post/24055190155/scion-1
00:28 < sorensen> yep yep
00:29 < sorensen> it would be fun to write a lib to do that actually...
00:32 < sorensen> i think thats what im going to do next
00:32 < samholmes> sorensen: lib for what?
00:33 < sorensen> key word args
00:35 < samholmes> sorensen: for JS?
00:35 < MI6> joyent/node: bnoordhuis created branch unbreak-sunos - http://git.io/Jc3X8g
00:35 < sorensen> yes
00:40 < MI6> joyent/node: Ben Noordhuis master * f80f3c5 : sunos: unbreak build after v8 downgrade  Commit 3d67f89 ("fix generation  - http://git.io/5XLe2Q
00:41 < fusiongrokker> if I have one complaint about node it's that I write this too often: if (err){ console.log(err); console.trace('ERROR DOING THIS THING'); return callback(err, null); } ... wish there were some way to abstract out this boilerplate that goes into every callback.
00:41 < azylman> Why isn't there?
00:42 < substack> fusiongrokker: there are some handy abstractions such as event emitters and streams that can help with that
00:42 < fusiongrokker> link?
00:42 < substack> it's more a subtle api design thing
00:43 < fusiongrokker> but is there a blog post or something I can read?
00:48 < azylman> fusiongrokker: You could also do something a bit simpler like this: http://pastebin.com/DbmyX2vc
00:48 < azylman> Obvs that fails in some instances (i.e. where your function needs the "this" parameter) and is a lot cleaner looking in CoffeeScript instead of js, but c'est la vie
00:49 < azylman> I also forgot the return statement in a few places because I'm used to CoffeeScript
00:49 < fusiongrokker> azylman: i thought about that but the stack traces get more confusing then as all exceptions funnel through 1 line, and it's really line 2 or 3 of the stack trace that is most relevant...
00:50 < azylman> Nod
00:53 < fusiongrokker> so I'm using cradle for couchdb connections, and in development I'd like to be able to destroy the db and recreate it from scratch. Everything seems to go haywire after I destroy it... maybe there's a delete all documents method?
00:55 < fusiongrokker> hm, well there's db.all() and db.remove()... that should do.
01:08 < MI6> joyent/libuv: Timothy J Fontaine v0.8 * 23b9347 : test: don't rewind_cursor when using tap_output  This is a back-port of c (+1 more commits) - http://git.io/AZ3z7Q
01:09 < sorensen> samholmes: still around?
01:26 < substack> bradleymeck: this node-module-system stuff is intriguing
01:48 < antonio`> nick deoxys
01:48 < deoxys> hello finally lol
02:00 < zeromodulus> hey, I'm wondering, is there a way to like… make a whole directory and all of its contents importable as one module?
02:01 < zeromodulus> so like, I want to do… `var app.lib = require('./lib');`
02:01 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:01 < sorensen> zeromodulus: you can put an `index.js` file inside that directory to define the exports
02:02 < zeromodulus> ah, so like, that index.js file would get imported, and be responsible for importing all of the other things I want imported?
02:02 < sorensen> yes
02:02 < zeromodulus> cool, thanks.
02:03 < zeromodulus> what about like, referring to the name of the top level module?
02:03 < zeromodulus> within index.js
02:04 < zeromodulus> 'cause like, index.js doesn't seem to have any way of knowing what I'm naming its holding variable.
02:05 < zeromodulus> i.e. how will ./lib/index.js know that it's being stored as app.lib, or will it even need to?
02:05 < azylman_> It won't need to
02:05 < zeromodulus> I guess not.
02:05 < zeromodulus> haha, k
02:05 < azylman_> You'd do something like app.lib = require('lib/index.js')
02:05 < zeromodulus> oooh, right
02:06 < azylman_> lib/index.js would just export an object or whatever you want
02:06 < zeromodulus> 'cause the stuff I'm importing in index.js… it'll get bolted under app.lib
02:06 < zeromodulus> right?
02:06 < zeromodulus> ahhh
02:06 < azylman_> Well, index.js will control what it exports, and you need to put that in some sort of usable format
02:06 < azylman_> An object or something
02:06 < azylman_> Or a function
02:06 < zeromodulus> ah
02:06 < azylman_> But it doesn't need to know anything about where you're loading it via require
02:07 < zeromodulus> so it's just like, whatever objects are exported
02:07 < azylman_> Yeah
02:07 < zeromodulus> will be bolted under app.lib
02:07 < zeromodulus> sweet
02:07 < azylman_> So maybe your index.js looks like "module.exports = {file1: require('./file1.js'), file2: require('./file2.js')}
02:07 < Sembiance> well. I deployed Spades to my multi-player web game (node.js back end). Maybe some day people will play :)
02:08 < azylman_> Then if you do app.lib = requilre('./lib/index.js') app.lib will be {file1: <whatever file1 exports>, file2: <whatever file2 exports>}
02:08 < zeromodulus> Sembiance: lol, I'm making something like that too.
02:09 < zeromodulus> azylman_: hmm, okay.
02:09 < Sembiance> zeromodulus: regular card games like spades and hearts? or? something more creative :)
02:09 < zeromodulus> poker
02:09 < Sembiance> ahh, I have no desire to ever do poker. gonna stay away from any betting games and stick with just more social ones
02:10 < Sembiance> zeromodulus: url to check out yet?
02:10 < zeromodulus> eh, I have one, but it's just plumbing at this point, nothing much to see.
02:10 < zeromodulus> but you can poke around with a web inspector if you want.
02:10 < Sembiance> sure :)
02:12 < Sembiance> zeromodulus: did you delete your github? https://github.com/zeromodulus/
02:12 < zeromodulus> renamed it.
02:12 < zeromodulus> https://github.com/kkgg
02:13 < zeromodulus> not sure why, just felt like it, haha.
02:13 < Sembiance> hehe
02:13 < g8tor> is it possible to use node.js as an apache handler? I want to run a particular script when a file is downloaded directly via apache
02:13 < zeromodulus> but now that I think about it
02:14 < zeromodulus> I should change it back, lol
02:14 < Sembiance> is there a live URL? I can check out? always curious to see new HTML5 based card games :)
02:14 < zeromodulus> and I am zeromodulus again.
02:14 < zeromodulus> on github.
02:15 < zeromodulus> Sembiance: http://powerful-falls-7539.herokuapp.com
02:15 < Sembiance> zeromodulus: ahh, very early in the front end process I see :)
02:15 < zeromodulus> Sembiance: haha, yeah...
02:15 < zeromodulus> if you open up a web inspector and poke around, like...
02:16 < zeromodulus> issue `deck`, you can see it empty, then click start game, issue `deck` again and see a deck full of 52 cards.
02:16 < zeromodulus> gotta add stuff like `shuffle`
02:17 < zeromodulus> haha, compared to house building, this project is just a toilet that flushes.
02:17 < Sembiance> real life house building? :)
02:17 < zeromodulus> haha, yeah.
02:19 < Sembiance> zeromodulus: well, let me know if you need any tips or advice. I built a javascript Solitaire card game back in 2006 that now gets over 1 million monthly uniques, and I spent the past year or so making a new multiplayer card game site. So in terms of web-based card games with a node.js back end, I've been around that block a few timers ;)
02:19 < Sembiance> err timers===times
02:20 < zeromodulus> whoa… cool.
02:20 < zeromodulus> I'll definitely keep that in mind, thanks.
02:21 < zeromodulus> yay, dinner time.
02:22 < Sembiance> hope it's pizza!
02:34 < djMax> is there some reason why node's hmac-sha1 digest would be 29 bytes?
02:35 < djMax> new Buffer(crypto.createHmac('sha1', hashKey).update(buffer).digest('binary')).length is 29, seems like it should be 20
02:37 < s5fs> Can anyone recommend an audio library that works with IOS 6 and hopefully other platforms?
02:37 < s5fs> I just wanna play a sound, beep!
02:37 < djMax> ios can play sounds with a single call. what file format?
02:41 < fg3> where is the sublime channel?
02:47 < cpsubrian> I would like to see if one image contains (with some margin of error) another image and the location of said image.  Anyone know if this has been explored yet?
02:50 < Sembiance> s5fs: https://github.com/goldfire/howler.js    https://github.com/zohararad/audio5js    
02:50 < Sembiance> s5fs: both say they support mobile safari
02:50 < s5fs> Sembiance: thanks I'll take a look. i've just been hurt by lying libraries before
02:51 < cn28h> is it a reasonable model to call nodejs from C? I'm feeling out ways that I can wrap an old C codebase to add an http interface to it and the ability to extend it with js (or another language). I've found literature on writing C (C++?) extensions for nodejs, but I want to do kind of the reverse
02:53 < s5fs> cn28h: sure, why not. i'm wrapping standard unix utilities with node scripts.
02:53 < cn28h> hmm
02:53 < s5fs> cn28h: I guess the real question is how you wish to interact with the C program.
02:54 < pyrotechnick> substack: ping
02:54 < cn28h> s5fs, I had imagined some sort of direct callable API, so say the C code could hand an event to nodejs and it could encode it into an http request and send/process the results
02:55 < s5fs> cn28h: you're getting a bit beyond my experience, sorry. so far i've just wrapped userland apps and done some basic ipc via sockets, both of which worked well in my case.
02:56 < cn28h> np, it's a bit beyond mine as well heheh, but node.js seems pretty cool from what I've seen
02:57 < cn28h> I'm thinking either node.js, spidermonkey, or python at this point
02:57 < Sembiance> cn28h: node.js is really cool, if you like JavaScript :)
02:57 < s5fs> cn28h: no experience with spidermonkey, but the other two are viable options
02:57 < Sembiance> cn28h: if you don't like it I suppose you could use coffeescript ;)
02:58 < s5fs> Sembiance: watch your mouth!  ;-)
02:58 < cn28h> s5fs, thing about spidermonkey is it doesn't appear to provide (and intentionally so) much of a library ot use, and so it may not be quite what I want
02:58 < cn28h> Sembiance, ah yes, I've meant to check out coffeescript but can't say I have yet ;p
02:59 < cn28h> I guess using spidermonkey is more equivalent to using v8 directly
03:00 < jrajav> Never understood Coffeescript much.. why not just write JS without semicolons and without braces (where you can)? It's the same, except without the silliness.
03:00 < substack> pyrotechnick: pong
03:00 < cn28h> doens't coffeescript add other extensions like list comprehensions?
03:01 < s5fs> jrajav: it's purportedly safer to use, less javascript weirdities to worry about
03:01 < s5fs> jrajav: after dorking with js for a while and getting jabbed by a few barbs, i can see the attraction
03:02 < Havvy> jrajav: It's just a different syntax. ;)
03:02 < jrajav> Javascript is not a huge language. It's easy to master, and even easier to just find out what to avoid
03:02 < jrajav> Not much excuse not to - that goes for any language.
03:02 < pyrotechnick> hey subtack we write coffee here and have happily been using browserify for a while now but i see you've abandoned us
03:02 < pyrotechnick> like the plugin API is gone and stuff?
03:03 < jrajav> Havvy: That's actually false, it's a different language that compiles to Javascript
03:03 < pyrotechnick> just wondering what your advice is going forward like should i keep hacking coffee into browserify or should we move on
03:03 < jrajav> Havvy: But I'm not knocking it - I just don't see the point, myself. I personally don't find the syntax or the semantics appealing
03:03 < s5fs> jrajav: sure, in theory that's great and all but little problems during refactor can dork you w/o much help. jslint/jshint help but aren't guarantees of solid code.
03:04 < jrajav> That's a pretty mushy statement that doesn't sound very backed up
03:04 < jrajav> I've coded JS for years and I can tell you that I've been bitten a lot more by refactors and monkeypatching in, say, Java,
03:04 < s5fs> jrajav: i was hit with a semicolon insertion problem a couple weeks ago, during cleanup i had forgot to add a comma during a var statement, so a semi was inserted and the following variable brought into global.
03:05 < s5fs> jrajav: not a huge problem, but took longer than i enjoyed to find and resolve.
03:05 < pyrotechnick> substack: unless i'm mistaken now the only way to make it work with browserify would be to point it to the compiled js on disk?
03:05 < s5fs> jrajav: additionally, since it changed the scoping, no tests were failing, it was only when you had multiple components on the screen that the scope problem was noticeable.
03:06 < substack> pyrotechnick: the plugin toolchain isn't out yet but v2 will get one in a minor point release
03:06 < jrajav> I don't see how your problem would have been solved by using a different language
03:06 < pyrotechnick> ahh cool man, i'll use an old v until then, thanks bud
03:06 < substack> yep
03:07 < jrajav> In fact, those kind of problems are purportedly a lot WORSE in Coffeescript - a misplaced space here or there can be hell to debug
03:07 < substack> I want the plugin toolchain to make a plugin that will look for fs.readFileSync() calls and inline the contents
03:07 < jrajav> I'd rather look for a missing comma myself
03:07 < s5fs> jrajav: agreed, but that wasn't the point of my story. i was illustrating that there are sometimes problems with js, introduced by developers, that may be alleviated by other tooling or technology.
03:07 < s5fs> jrajav: i'm not a fan of coffeescript, haven't used it (not interested), but if safety is one of the sells behind it, i can see that as being attractive to some developers.
03:08 < jrajav> It isn't lol
03:08 < s5fs> jrajav: as for me, i found the comma, fixed the problem and went back to work :)
03:08 < substack> pyrotechnick: one thing that I would somehow like to support is generating source maps for source transforms
03:08 < jrajav> It increases readability and productivity. Some say safety - I think that's a dubious claim
03:08 < jrajav> It introduces problems as well as patching over them
03:09 < s5fs> jrajav: i don't normally hit a problem and go 'damn, i need more abstraction here'
03:21 < pyrotechnick> substack: yeahhh that would be awesome although its never really bothered me enough to use them
03:21 < pyrotechnick> maybe i dont fiddle enough bits
03:34 < OODavo> Hey, this is more a unit-testing-philosophy question than a Node one, but I'm writing the unit tests for Node code so…
03:34 < OODavo> If I have a function and wish to specify its behaviour using tests in the form "it returns X for input Y", is that a) a good way to write unit tests, and b) is it good to loop over an array of input/output examples to build the test cases instead of coding each one individually?
03:39 < OODavo> An example of what I'm doing: http://sprunge.us/gHPG?coffeescript
03:39 < OODavo> (Note that I wrote these tests before realising Buffers can just be created using the 'hex' encoding. :P )
03:40 < substack> OODavo: why wouldn't that be a good way of writing tests?
03:41 < substack> this describe/it/should stuff is weird
03:41 < substack> I never got what the point of all that indirection was
03:42 < OODavo> I'm pretty new to writing automated tests. I thought tests in the form "it returns X for Y" might be kind of low-level, rather than something like "it processes multiline input".
03:43 < OODavo> Entirely possible I'm mistaken in thinking that, of course.
03:43 < substack> OODavo: I mean I don't get why tests with "it" and "should" and whatever are so popular
03:44 < OODavo> Probably because they look prettier.
03:45 < substack> here's what my tests look like: https://github.com/substack/node-resolve/blob/master/test/resolver.js
03:45 < substack> or https://github.com/substack/dnode/blob/master/test/obj.js
03:45 < Sembiance> substack: thanks for creating optimist :)
03:49 < OODavo> substack: It seems like your tests are performing an awful lot of discrete assertions inside a single test case?
03:51 < substack> OODavo: what's wrong with that?
03:51 < OODavo> In general I've been getting the impression that a single test case really should only have one assertion so that it's testing exactly one thing.
03:51 < OODavo> Unless node-tap works differently somehow?
03:51 < substack> why should a test only have 1 assertion?
03:52 < substack> seems pretty useful to make sure a lot of things are correct all in one go
03:52 < substack> saves recreating all that state again in other tests
03:52 < OODavo> Apparently because if one fails the others aren't tested.
03:52 < substack> so?
03:52 < substack> if one fails your program is broken
03:52 < substack> so go and fix it
03:53 < OODavo> True.
03:53 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:54 < substack> if your tests are failing then worrying about the extent to which your program is broken doesn't seem very important
03:56 < OODavo> Tracking down exactly where the broken part of code is works better with more separate tests, though?
04:01 < substack> OODavo: just write some tests
04:01 < substack> tests are there to save you time and to prevent regressions
04:01 < substack> they are not there for some ideological reason
04:02 < substack> I really hate how people with ideological agendas have turned testing into something far harder than it needs to be
04:03 < OODavo> Huh.
04:03 < OODavo> Okay.
04:06 < zeromodulus> say I have a shared lib, this shared lib is a folder, and in it is a file index.js. I wanna be able to type `var lib = require('./lib/index');` and whatever index.js requires, will be bolted on underneath the variable `lib`, is that possible?
04:07 < zeromodulus> so if index.js requires a file foo.js to variable foo, then I should be able to do like, lib.foo.bar, right?
04:07 < OODavo> You'd need to stick index.js's requires onto module.exports.
04:07 < dstokes> require './lib' and make sure that it exposes all of it's required modules in module exports
04:07 < zeromodulus> oooh.
04:07 < dstokes> OODavo: +1
04:07 < OODavo> exports.foo = require("foo");
04:08 < OODavo> ^ maybe needs "./foo" instead.
04:08 < OODavo> But yeah.
04:08 < zeromodulus> so I'd do like… uh, foo.exports = require('./foo')
04:08 < zeromodulus> ?
04:08 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:08 < OODavo> exports.foo
04:08 < OODavo> Not foo.exports
04:08 < zeromodulus> O.o
04:08 < zeromodulus> looks weird, but, okay, haha
04:09 < OODavo> You can also do this instead:
04:09 < OODavo> module.exports = {
04:09 < OODavo>   foo: require('./foo')
04:09 < OODavo> }
04:09 < OODavo> May be shorter if you have to require a lot of sub-libraries.
04:09 < zeromodulus> yay, I think it worked.
04:09 < zeromodulus> sort of...
04:10 < dstokes> any reason why you're not just requiring your modules (in lib) explicitly where needed?
04:10 < zeromodulus> uh, not really, just thought it would be convenient to do like, app.lib.stuff
04:11 < dstokes> cool think about commonjs modules is you don't have to create so many namespaces like you would in the browser
04:11 < dstokes> works either way, but you might have less bootstrap code if you make use of module scope
04:11 < dstokes> cool thing*
04:13 < OODavo> CommonJS module structure is awesome that way.
04:14 < OODavo> One has to wonder why Google's Closure Library doesn't use it? :/
04:16 < dstokes> yeah, closure is more of a utility library. not really made for managing a modular application i guess
04:42 < we> does anyone know any free nodejs host?
04:45 < zivester> `npm install -g underscore; node; var _ = require('underscore');'  why am I getting "cannot find module 'underscore'" ?
04:46 < dstokes> we: dotcloud lets you deploy free sandbox apps
04:46 < SomeoneWeird> zivester, don't install it globally
04:46 < SomeoneWeird> it doesn't work like that
04:47 < zivester> SomeoneWeird, I want to test from the shell
04:48 < SomeoneWeird> npm install underscore; node -pe "require('underscore')"
04:49 < zivester> Error: Cannot find module 'underscore'
04:49 < groundwater> zivester: you can test it from the shell by installing locally
04:50 < shakefon> we: 1st app on heroku is free, if you're developing an app (rather than production scale, not sure how far up you can take the free one), appfog has a free tier that supports node, AWS has free tier for 1 year, you can install node on any of the linux images
04:51 < zivester> groundwater, fair enough... but it should work globally shouldn't it? I see it in /usr/local/lib/node_modules/underscore
04:51 < groundwater> zivester: no, global is only for linking binaries
04:51 < sorensen> huzzah: my most rediculous module yet - https://github.com/sorensen/kwargs.js
04:52 < we> thx!!
04:52 < zivester> groundwater, thanks.. now that makes sense
05:37 < MI6> joyent/node: isaacs master * 88befa6 : bench: Make http easier to profile  Do not run the http/simple.js server  - http://git.io/p7E29Q
05:54 < shanebo> hey guys, is there a way to ping a cloudfront url without downloading the file in order to check the status code?
05:54 < gkatsev> create a request and cancel as soon as you get the headers?
05:56 < shanebo> gkatsev I didn't know i'd get headers back until after everything was returned?
05:56 < SomeoneWeird> http.head
06:09 < jons> is it possible to use the Google Feeds API in a node server?
06:13 < shanebo> thanks gkatsev, SomeoneWeird
06:29 < TheAceOfHearts> does anyone have a suggestion on how to organize an Express app with Mongoose? I can just have it connect, and assign the schemas to the models, but it feels cluttered, does anyone have a good way to organize the files? 
06:31 < mikolalysenko> In JS is it better style to use a string for an enum or to declare a custom enum-like object
06:45 < geNAZt> hi i am searching a file based database with a pure js binding to node
06:45 < geNAZt> does someone know any good databases for this case ?
06:46 < vicapow> what's the "root" global variable? I can't find documentation for it
06:47 < geNAZt> global its is name
06:48 < vicapow> interesting...
06:48 < vicapow> root === root.global
06:48 < vicapow> / returns true
06:48 < geNAZt> can be
06:49 < vicapow> geNAZt: when can it not be?
06:49 < geNAZt> if you set the global object to another object
06:49 < geNAZt> or change the root context
06:50 < geNAZt> >> global
06:50 < purr> geNAZt: ReferenceError: global is not defined
06:50 < geNAZt> >> root
06:50 < purr> geNAZt: ReferenceError: root is not defined
07:02 < rocket> Any Node.js gurus here?
07:02 < AAA_awright> rocket: One or two
07:02 < rocket> lol great
07:02 < rocket> any of them available for freelance?
07:53 < supersym> depends :P
07:54 < supersym> although I wouldn't call myself a 'guru' I know a thing or two :)
07:54 -!- ServerMode/#Node.js [+o isaacbw] by wolfe.freenode.net
08:07 < Ivru> Hi there. If I want an embedded database, what are my option ? sqlite only ?
08:09 < geNAZt> firebird
08:13 < supersym> leveldb?
08:14 < Ivru> I'm asking, I just don't know the options :)
08:14 < Ivru> Gonna check all this. Thanks guys
08:17 < SomeoneWeird> pretty much only sqlite and leveldb
08:19 < Ivru> I've tried several ORM/wrapper for sqlite3 but they don't fit my needs... 
08:19 < Ivru> comming from a J2E world, writing all my sql statement is kind of a pain in the ass
08:20 < SomeoneWeird> sequelize?
08:20 < Ivru> squelize I didn't manage to integrate it with my model :(
08:21 < SomeoneWeird> well, it's the best wrapper for sqlite
08:21 < MI6> joyent/node: Fedor Indutny master * aa98539 : v8: fix postmortem and dtrace helper build  Regardless of previous @bnoor (+1 more commits) - http://git.io/C6lrmQ
08:22 < Ivru> SomeoneWeird, yeah, sounds really nice. But the example given are too simple. I already have a model and I did'nt find how to integrate sequelize with it... I'll give it another try
08:23 < SomeoneWeird> ah, it's really hard todo that
08:24 < SomeoneWeird> your best bet is recreating the schema and then letting sequelize save it
08:24 < SomeoneWeird> (and then reinsert all your data if you have stuff)
08:25 < supersym> well does it have to be a RDBMS aka table/rows or can it also be another storage format?
08:25 < Ivru> SomeoneWeird, do you don't, the query chainer allows serialization of queries ?
08:25 < Ivru> supersym, don't mind the format
08:25 < SomeoneWeird> not sure
08:25 < SomeoneWeird> i havn't used it in a while
08:26 < Ivru> ok, thanks anyway
08:26 < supersym> why map rows to objects when u can just store objects right away?
08:26 < supersym> ORM seems kinda useless imho
08:26 < Ivru> supersym, yeah, but how to store the object ? textfile  ? Doesn't sounds good
08:27 < SomeoneWeird> mongo
08:27 < supersym> JSON
08:27 < Ivru> yeah but mongo cannot be emebedded
08:27 < supersym> e.g. https://github.com/Softmotions/ejdb
08:27 < supersym> or mongo...there are quite a few
08:27 < supersym> right
08:27 < Ivru> ejdb sounds good
08:28 < Ivru> I just don't want another deamon running 
08:29 < supersym> I get it... these things can become a little tiresome if you like diversity :)
08:29 < Ivru> yeah, I agree :)
08:29 < Ivru> anyway, ejdb seems nice. Thanks again.
08:29 < supersym> its a good point tho... I actually hadnt gotten at that stage yet, building the cluster atm
08:30 < supersym> but I plan to host tons of (demo) stuff on my VPS
08:30 < supersym> so looking into embedded dbs could be worth my while as well
08:31 < Quebert> Internet shut off but I saw a message from someone asking about freelance work but I dont have the username, are you still here?
08:33 < supersym> @Quebert: rocket was the name but no response since then
08:34 < [AD]Turbo> hi there
08:37 < rocket> Hi [AD]Turbo
08:38 < rocket> Hi supersym
08:38 < supersym> hiya
08:38 < rocket> that was me I was inquiring if anyone was inteerested in freelance work
08:38 < supersym> I think both Turbo and myself were available/curious
08:38 < supersym> involving?
08:41 < rocket> Ok great. One thing is I'm not 100% sure if Node.js should be the technology of choice but I like it so I was hoping it could be done. I need to build an app that crawls a set of sites and finds different things on the pages for instance hidden text, etc
08:41 < supersym> Yeah you need to carefully consider aspects of node.js for production
08:41 < supersym> not everything is suitable for it imho
08:42 < supersym> but anything and everything is possible, definitely :)
08:42 < rocket> would node.js be good for spidering sites?
08:42 < supersym> fine
08:42 < rendar> supersym: why not everything is suitable?
08:42 < rocket> supersym are you saying that because node.js is new?
08:42 < supersym> nothing wrong with that...depending on the amount of sites, you may need to be smart on your crawling load
08:43 < SomeoneWeird> would be good, actually
08:43 < supersym> rendar: e.g. static asset hosting
08:43 < supersym> there are better solutions for pure TCP imho
08:43 < Havvy> Node.js works well when you don't need tight memory considerations.
08:43 < Havvy> And yeah, static asset hosting.
08:43 < Havvy> Use nginx for that. ;)
08:44 < supersym> rocket: well yes partially that could be a problem
08:44 < supersym> e.g. you want a full blown CMS with admin backend... node.js doesnt have one yet
08:44 < rocket> Ok...
08:44 < supersym> or atleast one that passes my quality checks personally
08:44 < rocket> no cms
08:44 < AAA_awright> Sure it does
08:45 < rendar> hmm, where i could learn more about static asset hosting?
08:45 < rocket> Im ok with that, I was thinking of building that with ExpressionEngine and the app to collect the data
08:46 < Havvy> rendar: For static asset hosting (like stylesheets, images, and web scripts), you want to use a lightweight process like lighttp or nginx.
08:46 < supersym> i currently use :80 with varnish as reverse proxy on :81 nginx
08:46 < Havvy> nginx can use Node as a fastcgi process.
08:47 < supersym> it caches my static stuff and passes any requests over websockets/regex/domains for node.js to a Systemd service/socket which executes a coffeescript cluster/http-proxy with autoquit
08:47 < rendar> Havvy: hmm, i see, basically like a http server that only servers those little files?!
08:47 < rendar> s/like/as/
08:47 < supersym> so like heroku etc (poor mans solution) i spawn node.js apps based on people requesting it
08:48 < Havvy> rendar: Yeah.
08:48 < rendar> i see
08:48 < supersym> http://blog.nodejitsu.com/ten-node-apps-that-need-to-exist
08:49 < supersym> although i must say, some stuff has been done since the writing of that blog
08:52 < AAA_awright> supersym: I think all of those exist
08:52 < AAA_awright> "One line of Javascript" is asking a bit too much, any system will need configuration, but it exists
08:52 < AAA_awright> Chat room application is a trivial derivative of the IM
08:52 < supersym> yeah its kinda dated
08:53 < supersym> its easy.. agreed
08:53 < AAA_awright> Sketchpad, I've seen dozens
08:53 < supersym> then again, i guess it depends on what you expect
08:53 < AAA_awright> File and media drop box, there was one really cool one...
08:53 < SomeoneWeird> you configure it via the url
08:53 < AAA_awright> https://github.com/Miserlou/DirtyShare iirc
08:53 < AAA_awright> supersym: http://magnode.org/ is my CMS
08:53 < supersym> I mean, compare a full-blown Wordpress like click-fire-and-forget installation with the amount of hacking you'll have to do on any node.js packages but for me thats actually the fun
08:54 < supersym> i seek out the best solutions of every field, throw them in a package.json (or .cson if I am lazy) and go with the banana
08:54 < AAA_awright> Social boomkarking I haven't seen, that's either a trivial derivative of the CMS, or just a service like you find on Google and I'm not sure why it needs to be a published, downloadable application
08:54 < supersym> but anyway node is pretty new
08:54 < AAA_awright> 3 years new >_>
08:55 < AAA_awright> supersym: That's what I'm aiming for, it requires some webserver configuration, but Wordpress also assumes that PHP is installed so it's not *actually* that bad
08:55 < supersym> so code base, libraries, documentation, people blogging about stuff; its all in infancy still pre-1.0 
08:55 < supersym> so you'll need to be able and work with half/broken examples sometimes and be able to make something from it
08:55 < AAA_awright> "A browser based hackable and family friendly massive multi-player game." That was my very first Node.js project, back in v0.2
08:56 < supersym> :D
08:56 < supersym> sorry to say but i find games such a waste of time :S
08:56 < AAA_awright> Maybe not massively multiplayer, but very large community
08:56 < supersym> fun coding projects i imagine tho
08:57 < AAA_awright> I consider myself a huge gamer and I play almost nothing, it's sad
08:57 < AAA_awright> My current console game is Majora's Mask and that's been idle for almost a year now
08:58 < supersym> I got a wish for a better D3 based static analyzer tho
08:58 < AAA_awright> Wanna see my chat service application I'm currently pounding out?
08:58 < supersym> something like http://hughsk.github.com/colony/
09:00 < AAA_awright> Anyone wanna help suggest improvements for some applications of mine? I'd really appreciate it
09:01 < supersym> AAA: sure
09:01 < AAA_awright> supersym: Check out http://chat.bzfx.net/beta/?network=irc.freenode.net;channel=#Node.js
09:02 < AAA_awright> Er, http://chat.bzfx.net/beta/?network=irc.freenode.net;channel=%23Node.js Chromium copied that URL wrong, huh
09:03 < supersym> nah it resolves ok here
09:04 < AAA_awright> It doesn't include the channel name
09:04 < supersym> well i cant login without an account anyway
09:05 < supersym> right?
09:05 < AAA_awright> supersym: Next form down
09:05 < supersym> nop... only text no controls at "register" for me
09:06 < AAA_awright> What do you mean? Which browser is this?
09:06 < supersym> Login: Username and Password assume (stupid me) that I need an account. I always miss a (register) link nearby... like below or next to the login button
09:06 < supersym> but double, even tripple link that shiznits :P
09:07 < AAA_awright> supersym: "Connect" button, form below
09:07 < AAA_awright> There's no register
09:07 < supersym> cos people are bound to miss your super awesome register buttons :P
09:07 < Zhivago> Hello. What is the state of the art in node sandboxing?
09:07 < supersym> nop
09:07 < AAA_awright> nop?
09:07 < supersym> [Socket.io]Socket error: {"0":"Authentication failed (username or password was incorrect)"}
09:07 < AAA_awright> Zhivago: Insecure, appearently
09:07 < supersym> [Socket.io]DISCONNECTED
09:07 < supersym> nothing since... this is chromium
09:07 < supersym> I can see under FF
09:08 < AAA_awright> supersym: You're looking for the "Nickname" field and the "Conenct" button...
09:08 < AAA_awright> That's for existing user accounts
09:08 < supersym> in ff it works
09:08 < supersym> in chrome it doesnt
09:08 < supersym> with me anyway
09:08 < AAA_awright> Eh?
09:08 < supersym> yup now Im in...
09:08 < supersym> let me try chrome after I close it
09:09 < supersym> aha
09:09 < Zhivago> aaa_awright: Can you elaborate on that?
09:09 < supersym> your login wont work anymore once you tried and failed login
09:09 < supersym> you cant use the chat anymore
09:10 < supersym> close and reopen and i fill in nickname, and now it works
09:10 < supersym> once d/c it wont fire up again
09:10 < Siyfion> Has anyone got any experience with running Node on MS Azure?
09:10 < AAA_awright> Huh
09:10 < Siyfion> (As a website, not a web service)
09:10 < AAA_awright> Zhivago: I'm not aware of any easy ways to limit CPU time to a function and sandbox it
09:10 < AAA_awright> And also be performant
09:11 < Zhivago> aaa_awright: Timers make the first fairly easy.
09:11 < AAA_awright> How so?
09:11 < AAA_awright> If the function gets caught in a while(1) loop...
09:11 < Zhivago> In the stupidest case, just kill the process after a certain time.
09:13 < RLa> there is no way to interrupt event loop?
09:13 < RLa> with signals for example?
09:13 < supersym> it works,... usually i guess
09:14 < AAA_awright> Yeah you can... beh left
09:14 < AAA_awright> ...try and do it within a process
09:14 < AAA_awright> That's cheating
09:14 < supersym> but i mean... just to illustrate (i think it's very nice/fine AAA)
09:15 < supersym> any program/software requires at least a 'certain amount of knowledge' how slightly even
09:15 < RLa> "Zhivago> In the stupidest case, just kill the process after a certain time" <- that sounds quite ok solution
09:15 < supersym> and I try to be as dumb and lazy as possible ;)
09:15 < RLa> but yeah, i guess you would need some sort of watchdog
09:15 < AAA_awright> RLa: Well like my use case, I'd like to call the function once a second or more
09:15 < supersym> RLa sure is... node-autoquit more or less does something similiar
09:15 < AAA_awright> How do you do that, and limit CPU usage?
09:16 < supersym> kills after 10m no activity on teh socket
09:16 < supersym> that shouldnt be a problem
09:16 < RLa> what about process priorities?
09:16 < supersym> once a minute
09:16 < RLa> i guess it depends on os scheduler
09:16 < supersym> yeah I got BFQ here :P
09:17 < supersym> so nothing really ever jams anyway :)
09:54 < Havvy> If `new` was a function instead of function modifier, would it look this?
09:54 < Havvy> function new (constructor, args) { var ret = Object.create(Object.getPrototypeOf(constructor)); var ret2 = constructor.apply(ret, args); return (typeof ret2 === 'function' ? ret2 : ret); }
09:55 < Havvy> Or am I missing part of the semantics of `new`?
09:59 < qubit01> anyone have any good recommendtions for raw socket programming ?
09:59 < Havvy> qubit01: Can you be more specific?'
10:01 < Stephen> Havvy: That's a fair implementation of new.
10:02 < Havvy> Actually, s/function/object/
10:02 < Stephen> Shoe.js
10:03 < Stephen> Or look up QUIC
10:33 < titanplate> i'm registering a user in nodejs and i need to validate user properties like firstname, lastname, adress etcetc
10:33 < titanplate> how would one do this in nodejs ?
10:33 < Stephen> ...
10:33 < titanplate> i mean the problem i have is that i want to like, check every single propety AND then output errors
10:33 < titanplate> but how can i wait when every check is finished
10:34 < asdf12> titanplate is this for a database?
10:34 < Stephen> Are you looking for an auth library?
10:34 < titanplate> yeah, database
10:34 < asdf12> which database?
10:34 < titanplate> i'm using sequelize 
10:34 < Stephen> node-auth
10:34 < titanplate> so mysql
10:34 < asdf12> does it come with a validator?
10:34 < asdf12> some orm do
10:35 < asdf12> if it doesn't you should write your own or there are some general purpose validator libs out there
10:35 < titanplate> no i got auth working fine...
10:35 < asdf12> yea you want to do object validation
10:36 < titanplate> ah, alright
10:36 < titanplate> yeah, sequelize has it built in
10:36 < Stephen> titanplate: Waiting for a group of async validators is usually called .when()
10:36 < titanplate> i'm looking at it's syntax right now
10:37 < Stephen> Promises/referrers are great in this situation
10:37 < Stephen> Deferreds
10:37 < titanplate> also this seems helpful: https://github.com/chriso/node-validator
10:38 < asdf12> that could work
10:38 < asdf12> but if sequelize has it, you should use that for validation
10:38 < asdf12> and use node-validator more for sanitizing
10:38 < asdf12> because i'm guessing sequelize actually uses the mysql db stuff to validate
10:39 < asdf12> wherever possible i mean
10:39 < titanplate> yeah, thank anyways guys
10:39 < titanplate> great help
10:39 < titanplate> : )
10:50 < titanplate> oh, sequelize is using node-validator
10:51 < dmcaodha> Excuse my poor programming skills, but I really need some guidance, I have been stuck on this problem for 3 days...
10:52 < Stephen> The answer is 42
10:52 < Stephen> Question?
10:53 < dmcaodha> I have an Express application separated in an MVC pattern, one of the model functions uploads a large file to a database and also generates data on the progress of the upload
10:53 < dmcaodha> I would like to send this data back to the user to update a progress bar
10:54 < Stephen> Sounds good
10:54 < Stephen> Websockets would be good for this
10:55 < dmcaodha> in the browser. Theehing is I have no idea how to get the data back from the model function to the app.js file, where I could broadcast it using socket.io
10:55 < dmcaodha> Theeing == the thing ;)
10:56 < Stephen> Hmm...
10:56 < dmcaodha> Any help or guidance would greatly appreciated.
10:56 < Stephen> Model function... Why there?
10:58 < dmcaodha> No other reason than because that is where the upload occurs. Probably bad practice.
10:58 < Stephen> Basically, your file upload becomes a Stream.
10:58 < dmcaodha> The file upload is a stream, yes.
10:59 < cyberboy> can one help me - http://stackoverflow.com/questions/15086551/express-3-multipart-data-form-status-pending-during-send
10:59 < Stephen> There needs to be a higher level object or array holding the active uploads
11:00 < Stephen> Model calls are separate from websocket calls, you'll notice by the server wrapper
11:00 < dmcaodha> How would I go about implementing that?
11:01 < dmcaodha> Yes they are separate.
11:01 < Stephen> Basically a global array with
11:01 < Stephen> Or a property accessible to both
11:02 < dmcaodha> Then I write to that from the model functionand read it from the app.js file?
11:02 < Stephen> Yup
11:02 < asdf12> cyberboy: try removing the uploadDir stuff, and console.log(req.files) to get a better idea
11:03 < Stephen> The trick will be determining the unique key
11:03 < cyberboy> it looks like it doesnt fire this function in app.post at all
11:04 < cyberboy> files shows up in my upload dir and after it nothing happens
11:04 < dmcaodha> I will be able to use an id that I have stored in the session, The client can emit their id on connection (I think?)
11:05 < asdf12> try removing the uploadDir argument and just trying that? if the route works then express probably just does that when you use uploadDir, never used it
11:05 < dmcaodha> And these two can be compared
11:06 < dmcaodha> @Stephen - Thanks
11:10 < cyberboy> still nothing
11:11 < asdf12> trying using using curl or something to send a post to /upload
11:11 < asdf12> if that works then something is wrong with the form
11:18 < cyberboy> i used postmen from chrome and send post to /upload - it responsed so it looks like express dont response after receiving file
11:46 < asdf12> to be honest i never seen the uploadDir thing before
11:46 < asdf12> http://expressjs.com/api.html#bodyParser
11:46 < asdf12> i dont see it in the api reference either
11:58 < titanplate> i have a custom validation like this: http://paste2.org/p/2990004
11:58 < titanplate> line 16 and 13 works fine... but line 9 terminates the app... 
11:58 < titanplate> how come?
11:58 < titanplate> it's a sequelize custom validation and that throw new Error should be handled by sequelize
11:59 < titanplate> but it terminates my app..
11:59 < titanplate> which i don't think it should
12:03 < mboro> hi guys! I have a private github repo I want to use as a dep in my node.js project. I tried something like git+https://git@github.com:my-user/my-private-repo.git#master but it says it couldn't find the repo. anything I'm doing wrong?
12:06 < supersym> git+https? I always use https://git@github.com/someuser/somerepo.git I think
12:06 < cloudbender> good morning
12:06 < supersym> branch shouldnt matter me thinks
12:06 < Ivru> in a conditional statement with JS, isn't it possible to stop the evaluation when the first statement is false ? (like in java: if (null == object && !object.isEmpty()) for example)
12:07 < mboro> supersym: when doing so I get Error: 404 Not Found
12:07 < mboro> prob because it's private
12:07 < supersym> try pointing it to the zipball then
12:07 < supersym> ah
12:07 < supersym> I guess yeah
12:07 < yawnt> hey ralphtheninja :D
12:08 < cloudbender> Ivru try if() if () {}
12:08 < supersym> You can only ssh to github from your own machine.
12:08 < supersym> Change the repo url from git+ssh://git@github.com... to https://github.com/...
12:08 < supersym> http://stackoverflow.com/questions/9770268/deploy-private-repository-as-dependency
12:08 < cloudbender> the entire contidional, in your example, is a single expression
12:08 < Ivru> cloudbender, that is what I want to avoid :) Thanks
12:09 < cloudbender> You and I both, but it works well.
12:09 < cloudbender> Pretty clean
12:11 < cloudbender> An expert might be able to say whether or not the interpreter performs partial evaluations on conditional expressions
12:12 < cloudbender> I doubt it since the expressions are paranthed.
12:12 < mac_nibblet> Hmm i have been looking at forever for running a deamonized process but whats wrong with supervisord ?
12:12 < cloudbender> *parenthed
12:13 < Kakera> Ivru, conditionals short-circuit
12:13 < Kakera> it's somewhere in the standard
12:14 < Ivru> Kakera, yeah that's what I'm looking for
12:14 < Kakera> https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Expressions_and_Operators#Short-Circuit_Evaluation
12:15 < cloudbender> Ivru you are aware that == may involve coercion ? Use === for comparisons
12:16 < Ivru> the problem was in fact my first condition... === 'undefined' without typeof...
12:16 < Ivru> My bad
12:16 < Ivru> :)
12:16 < mscdex> you can do === undefined too
12:18 < cloudbender> If you are trying to stub an object reference, I suggest {} rather than null;  I think null==0, I thought I read somewhere.
12:19 < cloudbender> and a function can be stubbed with function(){}
12:20 < Ivru> yeah you mean just if (myInstance) ?
12:22 < Kakera> https://github.com/joyent/libuv/pull/677 can anyone confirm/deny that Visual Studio 2010 also fails to build a shared library?
12:24 < Ivru> visual stidiot :(
12:27 < cloudbender> Kakera you mean a DLL ?
12:27 < Kakera> cloudbender, yes
12:27 < cloudbender> hmmm
12:28 < Kakera> you have vs2010?
12:28 < cloudbender> I was able to build dll's easily using the c# command line compiler; worked like a snap, 64bit, 32bit, perfect.
12:29 < Kakera> it fails when building tests
12:29 < cloudbender> Not sure why VS would block you, unless you did not pay for the 4000.00 version
12:29 < Kakera> with unresolved externals
12:30 < Kakera> try typing "vcbuild shared"
12:30 < cloudbender> maybe try working with a minimal model to see if you can peg the problem.
12:30 < Kakera> I'm not looking for the problem. I want to make sure it's not a regression in VS2012
12:31 < Kakera> can you try typing that command?
12:31 < cloudbender> I dumped visual studio, went to the command line, so I could be productive.  Sounds silly but it's true.
12:37 < mscdex> Kakera: here's what i did some time back to get 0.8 to compile as a lib fwiw: https://github.com/mscdex/node/commit/6ef19c53b25bd94eec019433683c742e74b5b3bf
12:47 < carpii> how can i send a signal from shell to my node server, telling it to flush logs, or rotate them etc
12:48 < deoxys> yoo
12:49 < supersym> carpii: probably easiest to either just use another command(line) app or use SIGUSR1 or 2 perhaps
12:50 < supersym> emitting an event would be the node way of doing things I guess
12:50 < carpii> how would I handle SIGUSR1 though? Does node provide a handler I can add a callback to?
12:51 < mscdex> carpii: `process.on('SIGUSR1', function() { });`
12:51 < carpii> oh awesome, thanks
12:51 < supersym> http://nodejs.org/api/process.html#process_signal_events
12:51 < mscdex> you can do that for any signal
12:51 < carpii> lovely :)
12:51 < mscdex> SIGINT, SIGTERM, etc
12:51 < Havvy> Oh, cool.
12:51 < mscdex> well, except SIGKILL :-)
12:52 < Havvy> Do you guys know what SIGHUP means?
12:52 < mscdex> hangup
12:52 < _ior> hang up
12:52 < Havvy> Ah.
12:57 < cloudbender> Is there login to the theory that a child process has a bit less overhead than the main process, and does a few things more quickly ?
12:58 < cloudbender> *any logic
12:59 < cloudbender> OK cloudbender have more coffee before you try to sound scxhmart.
12:59 < Kakera> well, I just uninstalled VS2010 and VS2012 and related stuff, rebooted, reinstalled VS2010 and the shared build still fails on tests
12:59 < Kakera> so it's definitely  not a vs2012 specific problem
13:00 < cloudbender> Kakera which language are you working in ?
13:00 < Kakera> C
13:01 < cloudbender> hmmm
13:01 < Kakera> I wanted to submit a pull request adding VS2012 build support
13:01 < Kakera> making sure there are no regressions
13:03 < cloudbender> Kakera I guess all I can say is when you crack it, you can sell it as a skillset.
13:03 < cloudbender> not helping much me sorry.
13:06 < _Fuse_> hi all
13:08 < Kakera> https://github.com/joyent/libuv/pull/722
13:08 < Kakera> gotta love github
13:09 < Kakera> I didn't even need to leave the browser to make the edits and submit the pull request
13:15 < ralphtheninja> yawnt: heya :)
13:42 < alchimis_> hi people, I need a nodejs module that scale up or down amazon ec2
13:42 < alchimis_> i mean, I have to be able to manually scale up or scale down ec2 by using that module
13:46 < cloudbender> I love being able to push an IPC message onto an array I can shift from at processing time.
13:46 < cloudbender> node rocks
13:47 < cloudbender> To remain as async as possible I'm limiting the child process to no more than 1000 message tasks per cycle.
13:49 < jrajav> "I love being able to push an IPC message onto an array I can shift from at processing time." <-- lol, this is older than the internet
13:49 < jrajav> It's called a message queue
13:53 < spots> hi, does anyone have experience with node-tap?
13:58 < cloudbender> I'm beginning to see the first consideration for my app should have been the IPC handling.
13:59 < cloudbender> But it's all good.
14:05 < basiliothecat> Hi all! Beginners question here - i have a config section in package.json, but it doesn't seem to propogate to process.env (checked under debugger) - any ideas?
14:05 < cloudbender> jrajav my point was that node handles it well.
14:06 < supersym> try nconf, it uses a seperate config.json file
14:06 < supersym> https://github.com/flatiron/nconf
14:07 < alchimis_> anyone read my question?!
14:08 < basiliothecat> supersym: guess i'll go that way shouln't i find a quick way to fix this - thanks!
14:09 < jrajav> alchimis_: If no one answers, unfortunately that means that no one knows
14:10 < jrajav> alchimis_: Your question is odd, though - I assume by "manually" you actually meant exactly the opposite, "programmatically", but why on earth would you want to do that? At the very most, have analytics and alerts in place so that you can effectively monitor your app's performance and scale it yourself when the need arises
14:11 < alchimis_> actually by manually i mean programmatically, i used this term to avoid confusion with amazon auto scaling 
14:12 < alchimis_> so what i am asked to do is to write a module to my app can use it to scale dow or scale up, but first i wanted to see if there is already such a module
14:15 < basiliothecat> supersym: jfyi - foolish me, had to run the app via 'npm start' and not just node app.js :)
14:19 < mscdex> if someone needs something to do, write a good IMAP protocol replacement
14:19 < mscdex> and get it to be mainstream
14:19 < mscdex> i beg of you!
14:20 < jrajav> mscdex: http://i214.photobucket.com/albums/cc57/major237/fun/robinh.gif
14:20 < wwicks> lol
14:22 < MI6> joyent/node: Ben Noordhuis master * d4a297c : http: fix case in 505 response status line  Fixes #4850. - http://git.io/ph-6bA
14:23 < wwicks> I wrote a c# IMAP client many years back- it was frustrating to say the least. Many providers decided to bastardize their impls… as I'm sure you know.
14:23 < mscdex> well it's not just that
14:23 < jrajav> Worse is better
14:23 < mscdex> it's that the spec is bad
14:23 < mscdex> in many places
14:24 < mscdex> like it allows IMAP servers like Yahoo's to send the same piece of information about a message twice... in different responses
14:24 < mscdex> like wtf
14:25 < wwicks> mscdex: as you know- I've been digging into IPP. IMAP was on my RFC hate list.. but IPP kicks its ass.
14:26 < wwicks> lol
14:26 < sothean> hi
14:26 < sothean> hello
14:26 < sothean> hi
14:27 < mscdex> at least from i remember with ipp it wasn't intentionally vague all over the place
14:27 < wwicks> mscdex: as with many protocols, I like the basic IMAP concepts… but when you dive deeper, I agree- it gets icky.
14:30 < wwicks> IPP says it intentionally leaves things open for flexibility…. but I have 12 spec documents open right now
14:30 < wwicks> …and there are more
14:31 < MI6> joyent/libuv: Saúl Ibarra Corretgé master * ae2b30a : windows: initialize stop_flag explicitly  The default loop lives in the b - http://git.io/yESmlw
14:32 < wwicks> mscdex: besides your frustrations with the spec and provider troubles- hows that IMAP lib going? I didn't take a chance to check it out
14:34 < mscdex> it's chugging along at a slower pace because of work
14:35 < peregrino> Hi everyone, I'm kind of new to node.js, and I just was looking for something like a sqlite3 module, but everything seems overcomplex
14:36 < mscdex> what do you mean overcomplex?
14:36 < jrajav> I hate to break it to you, but databases are fairly complex technology
14:36 < peregrino> what is the best option is I just want a file-based database for some prototype
14:36 < peregrino> heheh
14:36 < jrajav> A "file-based database," eh?
14:36 < supersym> I like to use cson files with coffee :)
14:36 < peregrino> yeah, I mean, in python is just importing a module, in nodejs seems to be a bit more complex than that
14:36 < jrajav> Perhaps it would support reading to and writing from arbitrary binary blobs stored in a directory-like structure?
14:36 < supersym> aka key:value
14:37 < jrajav> And maybe even interface directly with the host operating system?
14:37 < jrajav> And since they're pretty much just files, let's call it a "file system"!
14:37 < MI6> joyent/node: Timothy J Fontaine master * 8fe72a7 : build: automatically add tag for nightly builds - http://git.io/tChj8g
14:37 < mscdex> oh and something else that someone can do is to write a better socket.io
14:37 < bnoordhuis> mscdex: smith.io?
14:38 < mscdex> i think i saw that already
14:38 < peregrino> I'm used to sqlite3 when doing small prototypes that just need some database, tried to do the same with node, found out that sqlite3 is a bit complex to get talking to nodejs
14:38 < mscdex> it does websockets by default
14:38 < mscdex> :/
14:38 < peregrino> so, maybe, I'm having the wrong approach
14:39 < peregrino> and there's something that I don't know of that would suit my needs
14:40 < supersym> does it need to be embedded>
14:40 < supersym> ?
14:40 < peregrino> it has to be somehting that I don't have to compile from source on unix
14:40 < supersym> Flatiron is nice to quickly write-up isomorphic apps
14:40 < peregrino> ideally, `npm install <something>` and get on with it
14:41 < supersym> does that include native bindings in node?
14:41 < supersym> node-gyp ?
14:41 < mscdex> peregrino: `npm install` will automatically compile for you
14:41 < supersym> Tower.js is a full stack web framework with scaffolding
14:41 < supersym> so easy controllers, views etc
14:41 < mscdex> or link if it's using a shared library
14:41 < supersym> and redis/mongo databases i think
14:42 < supersym> backbone relational is nice for client relational entities
14:42 < cloudbender> peregrino maybe this can help
14:42 < supersym> but persistence examples/dbs/bindings etc scarse I think
14:42 < cloudbender> https://github.com/developmentseed/node-sqlite3
14:42 < cloudbender> It might be dated
14:43 < peregrino> "Make sure you have the sources for sqlite3 installed. Mac OS X ships with these by default. If you don't have them installed, install the -dev package with your package manager, e.g. apt-get install libsqlite3-dev for Debian/Ubuntu. Make sure that you have at least libsqlite3 >= 3.6."
14:43 < peregrino> that's the kind of thing that I don't want
14:44 < peregrino> but I repeat, I have no clue of the options I have!
14:44 < supersym> yeah
14:44 < peregrino> maybe that's the only way to go, just wanted to double check that :)
14:44 < supersym> simple = file based storage, as JSON/CSON or just CSV what do you need?
14:45 < supersym> you can have embedded, not sure if levelup needs compilation but I do not think so
14:45 < supersym> you would need a compiler or binary for mongo, redis etc etc
14:45 < peregrino> well, I tried to use JSON first, seemed OK at the beginning, but is getting quite a big file :P
14:45 < supersym> yeah
14:46 < supersym> pretty much any advanced db will have its own daemon running, in a sandbox/chroot
14:46 < peregrino> yeha
14:46 < supersym> you'll need to have permissions which I guess you don't have but I should check
14:46 < cloudbender> Maybe it's time to allow yourself an immersion into databse techologies.  It will pay off.
14:46 < T-Co> Hey folks. Need a hand with express3 and socket.io... my app.use(express.static(__dirname + '/application')); is stealing also the socket.io/socket.io.js file handle. Apparently socket.io doesn't properly install itself to express to route /socket.io/ to the correct plase. Any pointers? All google examples fail
14:46 < peregrino> I've been using python for quite a while now, and I thought node would be as easy to plug into sqlite as python
14:47 < peregrino> guess I have to work a bit more ;)
14:47 < cloudbender> Does not the NPM install the package without all the source build headaches ?
14:48 < peregrino> cloudbender: it's that I just don't want to have a fully fledged DB for a thing that will probably last a month and be refactored entirely after
14:48 < cloudbender> npm install sqlite3
14:49 < peregrino> the node-sqlite3 doc says you need to have de -dev package installed in your machine
14:49 < cloudbender> ok
14:49 < wwicks> are you apposed to using a hosted DB?
14:49 < peregrino> that's what turned me down, but I guess is that or install mongo or something
14:50 < peregrino> ok, let me rewind
14:51 < peregrino> Use Case: "Throw away db, don't need a full db for this (like postgreSQL or MongoDB), just something easy to install and configure."
14:51 < peregrino> there's no strict need for it to be sql or no-sql, just something that I can query
14:52 < peregrino> if I where in python, I would say "sqlite3", comes built in, just import a module, and you're done
14:52 < peregrino> but in nodejs, I don't know what's the best solution
14:53 < cloudbender> I'm writing my own database cache enigne for this very problem.
14:53 < supersym> yeah I also see the point
14:53 < supersym> leveldb bindings arent in tip top shape either
14:53 < peregrino> did I make myself more clear?
14:54 < wwicks> since Heroku offers free dev DBs (with limits)… I just use them now. But if you are not familiar with Heroku- you have the overhead of understanding how to get going there. (it is super easy once you know)
14:54 < cloudbender> The reference I cited lists R. Dahl as a contributor, it might be worth investigating.
14:55 < mscdex> peregrino: fwiw: https://github.com/mscdex/node-sqlite-fts
14:55 < mscdex> peregrino: doesn't need anything except a compiler
14:55 < supersym> that looks ok at first glance
14:55 < cloudbender> nice mscdex
14:56 < peregrino> mscdex: what's node-waf?
14:56 < supersym> but you do need node-gyp
14:56 < supersym> native bindings for node.js
14:56 < mscdex> peregrino: the old build system for node/node modules
14:56 < supersym> it can be a pain :)
14:56 < mscdex> s/modules/bindings/
14:57 < mscdex> peregrino: you can ignore the part about node-waf
14:57 < peregrino> mscdex: it's on npm?
14:58 < mscdex> peregrino: no, it was initially a fork to try to get cross-platform capabilities into the sqlite3 module(s)
14:58 < mscdex> peregrino: you can do something like: `npm install https://github.com/mscdex/node-sqlite-fts/tarball/master`
14:58 < cloudbender> lol meatwad
14:58 < mscdex> yeah, not my documentation or API :-)
14:59 < mscdex> i'm planning on rewriting the API to be a little less hideous
15:00 < mscdex> at some point
15:00 < cloudbender> I'm gonna mess with sqlite next month I think, just to say I did it.
15:00 < mscdex> heh
15:01 < cloudbender> I'm curious about the in-memory database performance, and the calistenics required to use it with node.
15:01 < cloudbender> Yeah, that needs to happen says me.
15:01 < supersym> sqlite is just sooo good for all devices, I see why someone would choose it
15:01 < supersym> worth some time invested in learning the ropes and perhaps work on some lib/pkgs
15:02 < mscdex> if nothing else, the nice thing about sqlite3 is that it's available in a few simple source files
15:02 < mscdex> no complex build system or anything
15:02 < mscdex> just compile and link
15:02 < cloudbender> I worry about it's lngevity, that's why I avoid it now.
15:02 < cloudbender> *longevity
15:03 < cloudbender> mysql went tango-uniform, and if that could happen, well, maybe sqlite could suffer the same fate.
15:04 < supersym> whats tango-uniform (and im a soldier even)
15:04 < supersym> :P
15:04 < mscdex> cloudbender: doubtful
15:04 < mscdex> cloudbender: but if it should for some reason, you could always fork it
15:04 < mscdex> like what mariadb did with mysql
15:05 < AlphaPinky> didnt like the name. MariaDB
15:05 < mscdex> i think they're named after his children or something
15:06 < AlphaPinky> Maria is the most common name in Brazil for females.
15:09 < cloudbender> will look at mariadb
15:10 < cloudbender> node is facilitating my little object database nicely.  persistence will be a challenge, but the engine itself is concept-proofed and in work.
15:12 < cloudbender> I'm designing it for 2-4 million objects, pratically speaking.
15:13 < cloudbender> accounting application
15:13 < cloudbender> a rewrite of a sturdy beast from a few years back.
15:14 < supersym> nice
15:14 < cloudbender> this time it won't be relational. it will use geospacial objects ( oooooo geospacial )
15:14 < mamacdon> anyone else having SSL certificate issues with registry.npmjs.org?
15:26 < jonaslundWORK> Q: is it common for modules to overrides the exports object? ie do something like module.exports = function() { /*myAweSomeConstructor*/ };
15:26 < pachet> A: its not uncommon
15:27 < jonaslundWORK> hmm :P
15:28 < JmZ> still can't get request/form-data working ._.
15:28 < JmZ> yet they closed the bug which is causing me issues and i have the latest version
15:28 < JmZ> why close a bug which is still a bug
15:28 < jonaslundWORK> trying to infer as much information possible with some code and it does complicate things :P
15:29 < jonaslundWORK> ohwell
15:30 < pachet> jonaslundWORK: great thing about node is you rarely ever have to rely solely on inference
15:30 < pachet> you can just open up the module and look under the hood :]
15:31 < jonaslundWORK> pachet: well in my case i'm working on a tool that works on JS files so
15:33 < JmZ> https://github.com/mikeal/request/issues/316#issuecomment-12618270
15:33 < JmZ> i tried this exact piece of code and get 411 status (no content length)
15:34 < willryder> Is node.js typically run as the primary web server?  Should it be?
15:34 < JmZ> willryder: no it is usually used as a backend behind a web server
15:35 < jonaslundWORK> pachet: I guess a quick hack would just be to make sure that i can alias the "type" of the "require" invocation results if i detect that the module writes to module.exports, the "longer" option (where i might have to go eventually anyhow) would be more extensive type inferencer
15:36 < pachet> if you feel dangerous you can use it as lb - dont try this at home!
15:36 < pachet> use nginx or something :[
15:36 < JohnMcLear> Anyone any ideas on how to get the correct string length of 0x1D11E ?
15:36 < JohnMcLear> node reports the .length as 2
15:37 < willryder> Would node be a good substitute for php?
15:39 < willryder> I'm having trouble seeing how it would be run as a backend.  Does your page typically communicate with it via jquery or does the webserver itself somehow make requests.
15:39 < willryder> Behind apache for instance
15:39 < pachet> willryder: it's a functional webserver, and acts more like apache than php
15:40 < pachet> insofar as templating isnt supported out of the box
15:40 < willryder> So you would use it as a primary webserver mostly?
15:40 < pachet> what do you mean primary
15:40 < willryder> or just have it there for jquery requests
15:40 < pachet> i use it as a webserver behind a lb :[
15:40 < pachet> so multiple instances
15:40 < willryder> For instance if you were hosting a site, you would not use apache.
15:41 < iksik> willryder: it does nothing to do with jquery
15:41 < willryder> so then no apache?
15:41 < phrearch> hello
15:42 < phrearch> is it considered bad practice to use a global namespace for browser-side code?
15:42 < bradleymeck> anyone know stephen vickers' irc?
15:42 < phrearch> i have an issue porting browser code to node, because it uses a global namespace
15:43 < jonaslundWORK> phrearch: good time to clean it up then?
15:43 < JohnMcLear> willryder: node is typically more powerful for lots of concurrent connections that need to share resources
15:43 < JohnMcLear> IE collaborative editors
15:43 < juanlas> I was wondering how I can programmatically determine my node_prefix, i.e. /usr/lib for CentOS, so I can determine where my node_modules are
15:43 < phrearch> jonaslundWORK: yea indeed. its using requirejs. i wonder if its good practice to add the global namespace thing as parameter for all parts
15:43 < jonaslundWORK> phrearch: avoiding the global namespace is a "good thing" (no point in overdoing it though)
15:43 < willryder> So if you're setting up a new website and you wanted to use just node for database requests, etc, you would not need apache
15:44 < phrearch> its modular code that refers to window.myapp in some places. that wont fly on nodejs though
15:44 < phrearch> i could add a global in nodejs i think, but...
15:44 < jonaslundWORK> if ("undefined"==typeof window) { // nonbrowser } else { //...
15:45 < bradleymeck> phreach wrap the browser code in vm.runInNewContext to keep globals separated
15:45 < bradleymeck> it sucks but browsers dont have decent sandboxing
15:45 < willryder> Are there companies that are running their websites on just node?  If they have a lot of communication between clients via the website?
15:45 < phrearch> bradleymeck: checking, thanks
15:46 < bradleymeck> willryder: mobile sites for a few fortune stuff, linkedin has the best write up but its a bit old
15:46 < phrearch> jonaslundWORK: yea i have something like that to check if its running in the browser. im more concerned of the requirejs structure i made so far
15:47 < willryder> Sorry for being so confused, it just appears to me that web servers and node are in competing spaces.
15:48 < bradleymeck> willryder: im not sure I understand thats kinda like saying web servers and python are in competing spaces, yes and no?
15:48 < willryder> apache never communicates with node
15:48 < willryder> correct
15:48 < willryder> so node handles all the http requests
15:48 < pachet> yes
15:48 < pachet> well
15:49 < willryder> i don't know about python
15:49 < willryder> but php doesn't do this
15:49 < pachet> ...for simplicity i'll stick with 'yes'
15:49 < willryder> so i'll use that as an example
15:49 < willryder> php is just code apache calls
15:49 < willryder> it's different with node
15:49 < willryder> so what i'm getting at is if you were going to start a new website with push capbabilities, why use apache at all?
15:49 < iksik> willryder: so think about it like of php -S ;-)
15:50 < willryder> It's NOTHING like php
15:50 < willryder> it doesn't work with apache
15:50 < bradleymeck> apache is using CGI based communication. apache does not call it, it used communication channels to do so (varies between cgi extensions) php and node could both talk over CGI it would just be a bad idea
15:50 < willryder> right?
15:50 < pachet> good lord
15:50 < pachet> it COULD
15:50 < pachet> that's the point
15:50 < willryder> still though...that's not the point
15:50 < willryder> it doesn't
15:50 < bradleymeck> willryder: node and php are in no manner different, just PHP comes with a CGI adapter by default
15:50 < willryder> so it's a standalone http server
15:50 < willryder> ok 
15:50 < willryder> so is it normal
15:51 < willryder> that
15:51 < willryder> to install a cgi adapter for apache to talk to node?
15:51 < iksik> no ;>
15:51 < willryder> there you have it
15:51 < pachet> no, it's not normal
15:51 < bradleymeck> there are http servers in PHP that do not need apache, only php. Almost everything outside of php is moving away from comm channel servers
15:51 < pachet> but it could be done
15:51 < bradleymeck> do not install a cgi adapter, you will lose almost all the advantages of node
15:52 < willryder> So if I'm going to build a website that uses push technology like node and jquery have together then should I use apache at all?
15:52 < bradleymeck> no
15:52 < iksik> willryder: did You ever saw react-php? ;>
15:52 < pachet> :[
15:52 < willryder> So build the entire site with just node
15:52 < willryder> and all will be good
15:52 < bradleymeck> if you want to use nginx for proxying and static asset routing thats fine
15:52 < willryder> because that's what it's meant for
15:52 < bradleymeck> yes
15:53 < pachet> nginx will save your ass
15:53 < willryder> so...that's an apache replacement
15:53 < pachet> in the future
15:53 < pachet> across all futures
15:53 < willryder> well i'm a small guy
15:53 < iksik> ;-D
15:53 < willryder> no need for nginx yet
15:54 < iksik> http://reactphp.org/ - heavly inspired with node ;-)
15:54 < willryder> I was just scared to start this thing on node alone
15:54 < willryder> I wasn't sure if I was missing something like security bugs, etc
15:54 < willryder> or just start it on node and see where it goes
15:55 < Nikentic> just try it out?
15:55 < phrearch> hm, is it possible to have an application object retrieved using a require?
15:55 < zomg> iksik: as someone with a php background, I can't imagine that being any good
15:55 < bradleymeck> willryder: there have been 2 securityish bugs to my knowledge but both are patched
15:56 < bradleymeck> phrearch: clarify
15:56 < phrearch> im not really sure how to pass the application object around properly without including it in my module definition
15:56 < zomg> Long running PHP scripts tend to leak memory and shit, so building a node-style long running PHP process -> bad idea
15:56 < jonaslundWORK> reactphp seems like the most stupid thing i've heard about in a long time
15:56 < phrearch> like require('mymod')(app)
15:56 < iksik> zomg: well as someone with a php background, i can see it, but oh well ;-)
15:56 < zomg> hehe
15:56 < jonaslundWORK> zomg: for a long time GC'ing with PHP was done when a script finished.. by dumping the heap
15:56 < bradleymeck> zomg: the wontfix on GC of anon functions is terrifying in the bug tracker for php
15:56 < jonaslundWORK> no idea how it's done now
15:57 < bradleymeck> jonaslundWORK lexical scope kinda like c
15:57 < iksik> jonaslundWORK: the same thing peopla said about server side javascript ;-)
15:57 < zomg> jonaslundWORK: I think they improved it in some 5.x releases but it still is far from perfect
15:57 < iksik> and look... node is awesome ;-)
15:57 < mac_nibblet> How do you document for a Callback ?
15:57 < bradleymeck> phrearch: passing by fn arg is typical
15:57 < jonaslundWORK> iksik: the difference is that the PHP runtime is buggy (see mine and bradlys comment about GC'ing)
15:57 < mac_nibblet> or a closure _
15:58 < mac_nibblet> @param {Function} callback ?
15:58 < phrearch> bradleymeck: how about: module.exports.getApp = function(){return myAppobject;} ?
15:58 < jonaslundWORK> iksik: node exists because google took the time to engineer a proper runtime
15:58 < iksik> jonaslundWORK: it's pointless discussion ;-)
15:59 < nerph> I'm looking for a proxy that will allow you to modify the outgoing URL/Header… any ideas where to begin?
15:59 < bradleymeck> phrearch: up to you, I have tons of code that looks like require('./routes')(app) rather than ./routes grabbing the app
15:59 < bradleymeck> nerph: you could use nginx rewrites or node-http-proxy
15:59 < phrearch> bradleymeck: ok thanks. ill try and see what works for this case
16:00 < willryder> Ahh ok...maybe this is what I was to dumb to understand.  A lot of people are using node behind an nginx or apache process since those two are stable and their security status is known--also for the static content
16:00 < willryder> proxy
16:00 < aiden> Hello everyone. I was wondering if someone could help me out with an problem I have with net.socket.
16:00 < willryder> not process
16:00 < bradleymeck> mostly just static content and SSL, not really security, node is using the same http parser so...
16:01 < willryder> ok...thanks guys...sorry for the stupidity.  I'm good at it though
16:01 < nerph> bradleymeck: thanks, I'll dig into the node-http-proxy more then… didn't want to head down a dead end, figured I'd ask first.
16:01 < MI6> joyent/libuv: Andrius Bentkus master * c5101ae : unix, windows: add common uv_udp_* error checking - http://git.io/Im1EbA
16:02 < aiden> I am sending data from one node process to another, using net.socket. I am trying to figure out how to send an error across the connection.
16:03 < bradleymeck> aiden: you will need to JSON.stringify it properly look at `errs` in npm
16:04 < aiden> I am sending data from files as bytes and I just want to be able to prematurely end the connection and have the server know that it failed, rather than the file completed sending
16:05 < bradleymeck> you will need to use a protocol, I am generally lazy and just default to http since I can double check in web or from curl easy
16:05 < cloudbender> ooo good answer bradley: aiden
16:06 < aiden> thanks bradleymeck: I was thinking that I need to send a control code of some sort to identify that a file has ended, but was hoping I could make the remote end of the socket essentially emit and 'error' event
16:06 < bradleymeck> aiden: thats outside of TCP which is a transport layer protocol, you want an Application layer protocol
16:07 < MI6> joyent/node: Andrei Sedoi master * 17c6fe2 : mips: fix openssl build - http://git.io/WYodlA
16:07 < cloudbender> You know what would be the cat's arse, is if I could pop(3) or shift (3), or 4, or 12 even ...
16:08 < bradleymeck> cloudbender: arr.slice(arr.length-3,3) arr.slice(0,3) 
16:08 < bradleymeck> splice*
16:10 < cloudbender> ty bradleymeck. trying to avoid iteration.
16:10 < cloudbender> that will do
16:11 < _pash> i am trying to make a button pass some data, with this script.. http://paste.pound-python.org/show/30788/ it doesnt work really
16:11 < MI6> joyent/node: Timothy J Fontaine master * 17a8126 : test: optionally set common.PORT via env variable - http://git.io/6FZuEQ
16:11 < _pash> wokrs without the .click()
16:11 < cloudbender> but someone should ask node-santa for my pop(3) and shift(3) things.
16:12 < cloudbender> and of course push([...]) and unshift([...]);
16:12 < cloudbender> just sayin
16:12 < bradleymeck> cloudbender: push(x,y,z) and unshift(x,y,z)
16:13 < cloudbender> ah ok
16:13 < sorensen> _pash: what does the markup look like?
16:13 < bradleymeck> cloudbender: even better push.apply(arr, items)
16:13 < cloudbender> shweet
16:13 < _pash> sorensen: app.post has an if statement that looks if req.param('logout') is 'true'
16:13 < _pash> sorensen: but it is undefined
16:14 < sorensen> inside of the /login route?
16:14 < sorensen> or is it a app.use method
16:15 < cloudbender> function rotateright(arr){arr.unshift(arr.pop(3))}
16:15 < _pash> sorensen: yes inside the login router
16:16 < sorensen> oh
16:16 < sorensen> yeah param is looking for get params or ones pulled from the route
16:16 < sorensen> you are sending post data in with that
16:17 < sorensen> which would be in `req.body.logout`
16:17 < _pash> sorensen: so not req.param('logout') but req.body('logout')?
16:17 < sorensen> req.body is not a function as far as i know
16:18 < sorensen> so `req.body.logout`
16:18 < sorensen> http://expressjs.com/api.html under 'req.body'
16:18 < _pash> sorensen: req.bosy.logout is also undefinet
16:19 < dan_johnsin> Anyone have any thoughts on how to hide/abstract api keys from your core codebase into another module so that they aren't committed into your code repository
16:19 < sorensen> are you using bodyParser() ?
16:20 < _pash> sorensen: i am using jquery .ajax()
16:20 < _pash> to POST it
16:20 < sorensen> look at the express api docs
16:20 < sorensen> about bodyparser
16:21 < darach> Skunk works http://finance.yahoo.com/news/17-of-the-most-mysterious-corporate-labs-190826629.html
16:22 < _pash> sorensen: thanks
16:22 < sorensen> did it work?
16:23 < cloudbender> Anyone tried this ? ... http://stringjs.com/
16:23 < _pash> sorensen: nope =(
16:25 < bradleymeck> dan_johnsin: use env vars or keep your darn configs outside of your repo (entirely, put em in a directory above pkg/../config or w/e)
16:26 < bradleymeck> sorry did not mean to sounds angry about that just i have done it as well, its touchy
16:28 < rodyhaddad> Hey, is there a way to increase the Number.MAX_VALUE in node?
16:29 < bradleymeck> rodyhaddad: if you want more than 53bits of precision, use a bignum lib in npm
16:30 < cloudbender> So node uses 11 bits of the float for the decimal fraction ?
16:30 < FnuGk> <cloudbender> do you know the difference between that and http://epeli.github.com/underscore.string/ ?
16:30 < juanlas> does anyone know if standard library modules, like http, get installed as uncompiled .js files on the machine
16:31 < bradleymeck> cloudbender: it varies IEEE floats are complex, but basically if set proper a 64bit float gives 53bits of precision and JS specifies 64bit floats
16:31 < bradleymeck> juanlas: no they are statically compiled into the node binary
16:31 < bradleymeck> source is still plaintext though
16:31 < cloudbender> FnuGk is that an extension of an extension ?
16:32 < juanlas> ah ok thanks bradleymeck
16:32 < rodyhaddad> bradleymeck, great, thx :D
16:32 < cloudbender> << votes bradleymeck as channel person-of-the-day
16:33 < FnuGk> cloudbender i havent used it my self but looking at the github page it looks like it can be used as stand alone or under the underscore.js name space if you want
16:34 < phrearch> ehm is it somehow possible to reference the app object from something like http://paste.kde.org/681980/ ?
16:35 < dan_johnsin> bradleymeck: thanks for your advice
16:35 < bradleymeck> phrearch: no, myApp was declared outside of your Browser fn, it is outside lexical scope, just set it as a property on Browser instead for simplicity especially if multiple Browsers can exist at one time
16:38 < phrearch> bradleymeck: ok thanks
16:38 < Nikentic> Any suggestions for interesting packages?
16:40 < bradleymeck> Nikentic: thats a broad question, we don't know your interests
16:40 < kevwil> exit
16:40 < FunnyLookinHat> Nikentic, just browse the repository ?
16:40 < FunnyLookinHat> i.e. https://npmjs.org/
16:47 < cloudbender> My two kitty-buddies have been using a new litter filler made from ground-up corn cobs.
16:47 < cloudbender> Two thumbs up.
16:48 < cloudbender> They are two big boys, and they really crank out the 'muffins', but the cat box is still ok after a week.
16:50 < meuserj> Ok.. I'm trying to make a restify server serve static content... but it keeps trying to JSON.stringify the content.. anyone have any hints?
16:52 < s3shs> Anybody here use NodeAsync?
16:55 < djazz> can I see what data is being sent on a socket?
16:55 < bnoordhuis> djazz: socket.on('data', console.log)
16:55 < djazz> I want to see the raw data that the http module sends
16:55 < djazz> SENDS not gets
16:56 < bnoordhuis> monkey-patch req.socket.write
16:56 < djazz> the headers and such
16:56 < bnoordhuis> or res.socket.write
16:56 < bnoordhuis> also, tcpdump
16:56 < bnoordhuis> or wireshark if you're a lesser man
16:56 < djazz> i dont get to the res, i get socket hang-up
16:56 < g0z> tcpdump fan here
16:56 < djazz> (trying to talk to icecast2)
16:57 < bnoordhuis> djazz: maybe server.on('clientError', cb) - it's possible you're getting a bad request
16:57 < bnoordhuis> oh, and icecast2 probably won't work
16:57 < djazz> bnoordhuis: im making a http.request
16:57 < bnoordhuis> ah, so much details that only come out after the fact
16:58 < bnoordhuis> tcpdump then
16:58 < djazz> i could just do a net.connect and send http stuff
16:58 < bnoordhuis> djazz: if you know that, then why do you ask here? :)
16:59 < djazz> bnoordhuis: i want to use the http module, as the protocol is http-based
17:00 < djazz> for making a shout/icecast client source
17:01 < bnoordhuis> djazz: iirc icecast uses non-standard request methods
17:01 < bnoordhuis> that won't work with either the http module or the http_parser c library
17:01 < djazz> bnoordhuis: cant i just set the method?
17:01 < djazz> "SOURCE"
17:02 < bnoordhuis> djazz: no
17:02 < bnoordhuis> well, it might work it - but then again, it might not
17:02 < bnoordhuis> minus one "it"
17:04 < bradleymeck> bnoordhuis: im liking the idea of the http_parser "working it"
17:06 < CoverSlide> why wouldn't http_parser accept non-standard request methods? Wouldn't WebDAV work on it too?
17:06 < bradleymeck> because its a giant switch loop in C
17:06 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:06 < bnoordhuis> ^ this
17:07 < bnoordhuis> it's a hand-written state machine
17:07 < CoverSlide> that's shitty
17:07 < bnoordhuis> think before you write
17:07 < bnoordhuis> it's a trade-off
17:08 < bnoordhuis> the percentage of people that need non-standard methods is a rounding error
17:08 < bnoordhuis> hence http_parser optimizes for speed here, not flexibility
17:08 < CoverSlide> ok so WebDAV methods are supported
17:08 < bnoordhuis> yes, just not icecast methods
17:09 < CoverSlide> icic
17:10 < s3shs> What sync libraries do y'all like?  Is 'step' the standard?
17:10 < s3shs> Rather, async libraries.
17:11 < CoverSlide> async is probably the most common
17:11 < CoverSlide> step is kind of old, not many use it anymore
17:12 < s3shs> I'm using async.parallel, but when I throw an error it doesn't end up in the completion handler.
17:12 < CoverSlide> then there's the people using promises
17:12 < CoverSlide> so either async or q
17:12 < s3shs> Step used to take the exception and call the next function with the error.
17:12 < s3shs> Hmm.  Promises.
17:13 < s3shs> Is throw supposed to work with async?
17:14 < xonev> s3shs: what do you mean?
17:14 < bradleymeck> s3shs: use domains if some ass throws an excpetion instead of passing it
17:14 < bradleymeck> async does not wrap due to some painful deopts when using try
17:15 < bradleymeck> s3shs: also throwing is unreliable in event loops since stack unwinds at each tick
17:15 < bradleymeck> useful for checking proper args but not for passing errors on
17:19 < s3shs> Hmm.
17:20 < s3shs> Thank you bradleymeck!
17:20 < s3shs> I will investigate.
17:20 < s3shs> I have code that throws and step catches it.  So replacing it with async will be tricky.
17:21 < bradleymeck> s3shs: just wrap it all in domain.run … this is an overly complex example, but reg.njitsu.net
17:21 < bradleymeck> https://github.com/nodejitsu/module-smith/blob/master/lib/builder.js#L64
17:23 < stephenvickers> @bradleymeck: hi bradley
17:23 < bradleymeck> yo
17:24 < stephenvickers> with regards to nexe i have found the nexe project on github at https://github.com/crcn/nexe
17:24 < stephenvickers> was this the one you were referring to?
17:25 < bradleymeck> stephenvickers: thats one of em ya
17:25 < stephenvickers> from what i can tell this is supported on linux/mac only at the moment, and doesn't support native modules
17:26 < bradleymeck> we have a build server we are working on to fix out some spec issues with bundled fs that works on windows with natives (only bcrypt tested so far) but thats probably going to be a paid service
17:26 < bradleymeck> bundled fs emulation is something we want badly before release
17:27 < stephenvickers> so this is not going to be open sourced?
17:28 < bradleymeck> doubtful for now, but nj is typically pretty good about opening once cost is recouped
17:29 < _pash> hello, i am trying to make a button, that would make a post request to one page, however another button would redirect to another pagn
17:29 < bradleymeck> stephenvickers: basically its what pays my bills so unless ppl start donating way more to projects… :/
17:30 < stephenvickers> sorry, what's "ppl"?
17:30 < CoverSlide> flattr
17:30 < bradleymeck> people
17:31 < MI6> joyent/node: Ben Noordhuis master * c80bde1 : v8: work around String::WriteAscii segfault  See http://code.google.com/p - http://git.io/F3Z6Zg
17:32 < stephenvickers> it seems that this is something i won't be able to use in the foreseeable future, do you have any other examples, reference implementations or projects doing this?
17:33 < bradleymeck> nexe is about it
17:33 < bradleymeck> stephenvickers: you cant use a paid service then?
17:33 < stephenvickers> ok, i may just run with my own ideas
17:34 < bradleymeck> let me know if you need any help with problems
17:35 < stephenvickers> no, i would like to open source what i produce too
17:36 < bradleymeck> stephenvickers: im just saying im happy to give advice just not implementation
17:36 < stephenvickers> are you implementing the self extracting part too?
17:37 < bradleymeck> stephenvickers: no need to extract, just keep it internal unless user wants it to extract
17:38 < bradleymeck> extracting can be nice to do some things, but keeping a single exec on windows in particular is fairly important
17:38 < stephenvickers> why is that important on windows?
17:39 < bradleymeck> extraction should go to User/Application Data/Local if they extract by default which does get you some nice things, but causes issues with multiple versions, keeping single exec is much cleaner but causes problems with nested shell scripts
17:39 < bradleymeck> stephenvickers: running multiple versions / users and extracting in proper windows manner so your sysadmin does not murder you
17:40 < bradleymeck> avoid Program Files except for the bootstrap
17:41 < stephenvickers> if you extract to a temporary directory under %temp% on windows wouldn't that avoid multiple user and version issues?
17:41 < bradleymeck> causes security issues in default windows settings
17:42 < stephenvickers> and what does "extracting in proper windows manner" mean?
17:42 < bradleymeck> you get an angry prompt writing to application data, but avoid stuff. means putting files where they belong according to windows conventions.
17:43 < stephenvickers> sorry for all the questions, i'm new to this, what security issues does it cause?
17:43 < bradleymeck> the everybody group can read from %temp% unless you move the Known Folder for a user to a secure location and change permissions on it
17:44 < bradleymeck> so basically anyone can read it by default if you are being run as a non-secure user which is often the case, or if you extract with minimal privileges
17:44 < stephenvickers> why is that an issue?
17:46 < bradleymeck> cause if the app is put on a machine multiple people can use or Guest can login you would be leaving files to be read which could contain private info
17:47 < bradleymeck> for John / Jane Doe it may not be an issue for twitter, but if you are bundling other peoples code you can't guarantee that it does not need security
17:47 < stephenvickers> ok, i can understand that, i would not embed private information myself, but i can understand some people would be required to do this, fair enough, i guess if you were able to select the output directory that would work around that
17:47 < MI6> joyent/node: yangguo@chromium.org master * cfacde3 : v8: Hardfloat does not imply VFPv3, only VFPv2.  Raspberry Pi is an examp - http://git.io/ME71SA
17:47 < bradleymeck> sure
17:47 < stephenvickers> with regards to the angry prompt, are you referring to User Access Control?
17:48 < bradleymeck> no, the little dialog that app X wants to write to disk
17:49 < stephenvickers> oh, what security feature is that, i thought that was UAC?
17:49 < inZania> I've been doing some profiling of my app and found that most of my CPU is being spent by Mongoose "cloning" the objects it finds from the database. I've heard tell that Mongoose can be slow before, and I believe it was said that for simple finds it can be better to just go straight to the MongoDB driver. Is this correct? How would I do it?
17:50 < bradleymeck> stephenvickers: its part of but not entirely UAC, its a security token
17:51 < bradleymeck> stephenvickers: https://docs.google.com/spreadsheet/ccc?key=0AlBisS2z_hWMdEc0NlRUVWZTVXJQQmZxa0wtSUE4U2c
17:51 < stephenvickers> ok, writes to that directory will fail if you don't have permissions, and UAC will kick in if enabled
17:52 < bradleymeck> to local app data yes
17:53 < stephenvickers> thanks for the chat, i have to go now, i may annoy you again sometime about this :)
17:54 < bradleymeck> sure
18:01 < hackygolucky> frodbot: help
18:06 < antonio`> hello
18:25 < chris__> anyone here have a reccomendation for an ORM plugin?
18:26 < Kakera> I want to have Debug and Release configurations in my solution, so I copied common.gypi from the libuv dir to its parent dir (my project dir). But now generating project files for my project fails with the following
18:26 < Kakera> gyp: name 'target_arch' is not defined while evaluating condition 'target_arch=="x64"' in libuv\uv.gyp
18:26 < Kakera> does anyone have any idea what's going on?
18:26 < Kakera> it compiles fine if common.gypi is only in the libuv directory
18:26 < Kakera> s/compiles/generates/
18:27 < Diranged> Is there a way to apply a regular regex exp to a string in NodeJS without using the .replace() syntax? Here's what I want to do… take var 'foo.bar.test.blah' and apply an arbitrary (user supplied) regex expression to manipulate it..
18:27 < Diranged> ie s/bar/yousuck/g … 
18:28 < bnoordhuis> Kakera: pass -Dtarget_arch=x where x is ia32 or x64 to gyp
18:29 < bnoordhuis> Kakera: common.gypi defaults target_arch to ia32 but it seems you're omitting that
18:29 < bnoordhuis> alternatively, add -I/path/to/common.gypi
18:30 < Kakera> bnoordhuis, then it works, but why is it only required when I include common.gypi for my project?
18:31 < PaulTMan> hello everyone :)  I wanted to run an idea by you.  Ok, so lets say you are using express and you hate jade, but you want to inject some json to your page and allow it to set itself up on the client side.  So, how can you get the json on your page quickly/easily w/o using a full featured layout engine like jade?
18:32 < PaulTMan> how about you split up your html file, so it's 99%, then ends with an opening script tag ( just before the closing body tag
18:32 < PaulTMan> then concat your json obj
18:32 < diogogmt> any suggestions which HTTP verbs to use when creating a RESTful API? I usually just go with POST and GET, however, I see that Backbone.js fires a GET, PUT, POST, DELETE depending on the action being performed on the model
18:32 < PaulTMan> then concat the closing script & body
18:33 < diogogmt> as far as nodejs and general best practices, what do you guys suggest?
18:33 < PaulTMan> that way you still have your server side processing (in the form of your json obj), and the benefits of a fast (non-parsed) html page
18:34 < PaulTMan> letting everything still happen on the client
18:34 < PaulTMan> basically before I had static html page, which I'd make an ajax call to get the data for
18:34 < Kakera> and why does the error say "in libuv\uv.gyp" when it's not used for libuv in my case
18:34 < PaulTMan> now I can skip that step, and concat the data into the initial page request
18:35 < PaulTMan> and still have all my js set everything up on the client side
18:35 < Kakera> if I comment out my project's dependencies, it says "in libuv\uv.gyp" instead
18:35 < Kakera> seems like a bug
18:35 < Kakera> *"in build.gyp" instead
18:36 < Kakera> so confusing
18:37 < spots> hi
18:37 < spots> is there a specific field in package.json to store a date?
18:38 < Kakera> bnoordhuis, where does common.gypi default to ia32?
18:39 < PaulTMan> Anyone free to talk about view layout strategies?
18:39 < Kakera> I tried generating project files for libuv directly, and it outputs the same error as for my project
18:39 < Kakera> unless I run gyp_uv, of course
18:39 < Kakera> gyp_uv sets target_arch for you, yes
18:40 < bnoordhuis> Kakera: right at the top, in the variables section
18:40 < bnoordhuis> 'target_arch%': 'ia32'
18:41 < Kakera> well, it doesn't work for me
18:41 < Kakera> E:\Dropbox\Documents\c-steam\libuv>gyp --depth=. -Dlibrary=static_library -Icommon.gypi
18:41 < herve> PaulTMan, just ask
18:41 < Kakera> gyp: name 'target_arch' is not defined while evaluating condition 'target_arch=="x64"' in uv.gyp
18:41 < Kakera> let me try on linux
18:42 < PaulTMan> herve: I did, basically a strategy for fast html return w/o the processing that goes into templating
18:42 < PaulTMan> any feedback on that idea?
18:42 < Kakera> hmm, no error on linux
18:44 < herve> PaulTMan, but returning plain html anyway ? If you want speed you can just return JSONs and do the render client-side with any js templating system
18:45 < Kakera> bnoordhuis, do you think it's a windows bug in gyp, or I'm missing something?
18:45 < PaulTMan> herve:  yeah, so basically I return the normal html file (minus a closing script and body tag at the end), concat my big json obj and a closing script and body tag
18:45 < PaulTMan> why you many wonder?
18:46 < MI6> joyent/node: Ben Noordhuis master * e505f91 : test: merge environment, don't overwrite  The CI system requires that som - http://git.io/P5peNw
18:46 < PaulTMan> because it is faster to just concat the file and strings then do a full processing with a templating language
18:46 < PaulTMan> and also, I still have my json parsing/dom updates happening on the cilent
18:46 < bnoordhuis> Kakera: oh, possibly. i never build on windows, that's piscisaureus' job
18:47 < PaulTMan> so, if I detect offline, I can try hitting up localstorage for the data
18:47 < PaulTMan> and I have my rendering code in one place (on the client js)
18:47 < PaulTMan> make sense?
18:48 < Musk> it does
18:48 < herve> I don't see the point
18:48 < Musk> but still it depends on the application your building and the logic behind it
18:48 < PaulTMan> ok, first it's fast, second keeps all my logic in one place (client side)
18:49 < PaulTMan> it's a time management app
18:49 < PaulTMan> lots of todos, notes, etc
18:49 < PaulTMan> and currently works fine offline
18:49 < PaulTMan> with localstorage
18:49 < Musk> cool :o
18:50 < herve> I assume you just fetch the full html file the first time ?
18:50 < PaulTMan> yes, fetch it all first time
18:50 < PaulTMan> and it's pretty much a single page app
18:50 < PaulTMan> (not including user admin stuff)
18:51 < herve> ok, yes, thats the way to do single-page apps
18:51 < PaulTMan> on the initial request I'm thinking to send the last mod date/time of the localstorage data
18:51 < PaulTMan> to tell me if I need to inject updated serverside data in the json obj
18:53 < PaulTMan> any devils advocate issues with that idea?
18:53 < PaulTMan> granted its hard w/o seeing the app
18:53 < herve> depending on how bigger is the full views stack. sometimes it will be better to just fetch the most important stuff and then load the rest on later requests
18:54 < MI6> joyent/node: Ben Noordhuis master * e505f91 : test: merge environment, don't overwrite  The CI system requires that som (+2 more commits) - http://git.io/JLm52A
18:54 < herve> btw that's why requireJS exists, but I don't know how well it integrates with rails assets pipeline
18:55 < MI6> joyent/node: Ben Noordhuis master * e505f91 : test: merge environment, don't overwrite  The CI system requires that som (+2 more commits) - http://git.io/JLm52A
18:56 < MI6> joyent/node: Ben Noordhuis master * e505f91 : test: merge environment, don't overwrite  The CI system requires that som (+2 more commits) - http://git.io/JLm52A
18:57 < MI6> joyent/libuv: Andrius Bentkus master * c5101ae : unix, windows: add common uv_udp_* error checking (+2 more commits) - http://git.io/9hWK5A
18:58 < trypwire> hey all. i'm trying to update grunt, but in trying to uninstall my previous install, npm checks /usr/local/share/npm and doens't find grunt. the reason is because grunt is installed (along with many other modules) in /usr/local/lib/node_modules
18:59 < trypwire> does anyone know why npm is doing things in two different places?
18:59 < trypwire> version differences?
19:01 < s3shs> bradleymeck, why would I want a domain?  This is a single thread in Node.js.
19:02 < s3shs> I just want to throw errors and have them end up in the drain of the async.parallel structure.
19:03 < s3shs> I guess i could wrap all my functions in a try/catch, but it seems better to do this in node.async.
19:09 < trypwire> did the npm prefix default setting get updated in a recent version of npm?
19:10 < trypwire> perhaps relating to homebrew?
19:13 < bnoordhuis> trypwire: npm prefix? you mean the `make install` location?
19:15 < trypwire> bnoordhuis:  no
19:15 < trypwire> bnoordhuis:  try `npm config list`
19:16 < trypwire> npm has a prefix property that defines where it installs things
19:16 < s3shs> So anybody else using Node.Async?  How do you handle libraries that throw errors?  Do you sprinkle your code with try/catch blocks?
19:16 < trypwire> and i have npm modules in two places on my system now which is causing some problems, so i'm wondering if the prefix has been changed in recent versions of npm
19:17 < bnoordhuis> trypwire: oh, i doubt it. maybe ask the homebrew people
19:21 < phrearch> hey
19:22 < phrearch> i wonder how i can expose app in a module definition like http://paste.kde.org/682202/
19:22 < phrearch> i would like to get the app object, by getting it like require('myfileincludingapp')
19:23 < phrearch> instead of passing it on to each file that needs it
19:23 < phrearch> as a module parameter
19:27 < jhsto> gosh
19:27 < jhsto> I'm so pissed that I spent the last three hours looking for a bug, which was because I had used some variable earlier in my project
19:32 < holzp> s3shs, you mean async?
19:33 < s3shs> Yes. async.
19:33 < holzp> try catch where needed, I dont recall if aync catches exceptions and aborts with an err
19:34 < holzp> i ened up using async a lot, but I think its just for flow control, like mental mapping rather than really needing it
19:34 < s3shs> Not in my testing.  Step just set the error to the next step.  But async seems to ignore the throw and... well, hilarity ensues.
19:34 < MI6> joyent/node: Ben Noordhuis master * 7bc449c : deps: upgrade libuv to a0c1d84 - http://git.io/nJoRiQ
19:34 < MI6> joyent/libuv: Ben Noordhuis master * a0c1d84 : linux, darwin: don't touch environ in uv_setup_args  Don't overwrite the  - http://git.io/ERYF1g
19:35 < holzp> wait, when you set the error it should abort depending on the pattern
19:35 < holzp> what pattern are you using?
19:35 < bradleymeck> s3shs: use domains, they are far more tested
19:36 < s3shs> bradleymeck, the ones that come with node?
19:36 < bradleymeck> domains will get hilariously hard to catch errors, yes
19:36 < bradleymeck> things inside of node core even
19:36 < s3shs> they're documented as "experimental" and "is expected to change significantly in future versions"
19:37 < s3shs> those are scary words.
19:37 < s3shs> :-)
19:37 < bradleymeck> s3shs node is not 1.0
19:37 < bradleymeck> you should not hedge your bets on anything 100%
19:37 < bradleymeck> except maybe EventEmitter
19:37 < CoverSlide> don't use node. use PHP
19:37 < s3shs> I'm still getting used to the "Use what you've got *now* thing" with web programming.
19:38 < s3shs> CodeSlide, heh.
19:38 < bradleymeck> s3shs: theres a reason i dont update python to v3 
19:38 < bradleymeck> one day i will… but not today
19:39 < s3shs> "Today is a good day for high blood pressure"
19:40 < s3shs> I'll look at my step code.  async looks really nice.  except for the 'throw' thing.
19:43 < bradleymeck> s3shs: domain.bind will wrap up all the throws either way
19:45 < s3shs> So domains are a way of making lambdas more linear?
19:46 < s3shs> Creating one object certainly seems more logical than passing functions in as arguments or in arrays.
19:46 < s3shs> Huh.
19:47 < bradleymeck> s3shs: they are taking lambdas and shared state and associating unexpected exit behaviors with all of them at once
19:47 < s3shs> It looks very complete.
19:48 < s3shs> So this is the next evolution after step, and async?
19:51 < bradleymeck> s3shs: it is different scope from async but it is intended to be used with flow control libs like async
19:54 < s3shs> I'm digesting it now.  The readme still scares me a bit.
19:55 < s3shs> I could just write my won function wrapper that catches the throw and returns an error instead.
19:55 < s3shs> won->own
19:55 < bradleymeck> s3shs: it wont catch throws when the stack unwinds though
19:55 < phrearch> with npm link, node modules should be accessable from node paths?
19:55 < CoverSlide> never throw. either emit('error') or cb(err)
19:55 < s3shs> But at the same time I'd love to get rid of the old "if (err) { throw err; } nonsense.
19:56 < bradleymeck> s3shs: domain.bind
19:57 < s3shs> I have one stack.  It'll unwind on throw.
19:57 < phrearch> ah, forgot one npm link 
19:57 < bradleymeck> s3shs: but if someones module uses nextTick its going to evade your catch
19:57 < bradleymeck> s'why domains went core
19:58 < s3shs> I see.
19:58 < s3shs> So Step won't work either.
19:58 < s3shs> My code is now fragile.
19:58 < WeezzZ> hello everybody
19:59 < s3shs> bradleyemck, you've given me good news and bad news. :-)
19:59 < WeezzZ> I have a very simple question about node / express and i18n....
20:03 < WeezzZ_> sry for deco, so I was saying, trying to access __('myKey') with i18n / node / express
20:03 < WeezzZ_> how could I do it ?
20:05 < WeezzZ_> (if I am in wrong channel, could someone tell me where to ask my question ?
20:05 < bnoordhuis> WeezzZ_: it might take some time for someone to answer, that's irc for you
20:05 < bnoordhuis> btw, there's also #express (or #expressjs)
20:06 < WeezzZ_> yes of course, I just want to be sure to not boring you with questions you can't answer :)
20:06 < WeezzZ_> I'll try the other chan thx
20:08 < innociv> http://nodejsdb.org/db-mysql/  I'm using db-mysql.  I have utf8mb4 encoding in my mysql db.  How do I read it?  It comes out as "?".
20:09 < innociv> I think I probably have to SET NAMES utf8mb4; ... but I'm not sure where I'd run that.
20:10 < innociv> hm nevermind i htink i foudn the option in their docs
20:10 < RLa> what's utf8mb4?
20:10 < innociv> 4 bits
20:13 < antonio`> newbe question
20:13 < antonio`> i can start using libuv in small c examples?
20:13 < antonio`> i have node latest stable installed
20:13 < antonio`> but i get uv.h no such file blabla
20:13 < antonio`> anyone?
20:14 < CoverSlide> -I/path/to/uv.h ?
20:15 < antonio`> isn't there a normal way not to do that?
20:16 < WeezzZ_> antonio`: this is noraml way, no ?
20:16 < antonio`> i run locate uv.h and get this -> /usr/src/linux-headers-3.5.0-23/arch/x86/include/asm/uv/uv.h
20:16 < WeezzZ_> (for things I remenber of the time I compiled...)
20:16 < bradleymeck> -I is the normal way to add something to compiler list of includes
20:16 < antonio`> then i do gcc -o test testuv.c -I/usr/src/linux-headers-3.5.0-23/arch/x86/include/asm/uv/
20:16 < antonio`> and many errors come 
20:17 < bradleymeck> its not a linux-header, where did you get libuv from
20:17 < antonio`> mmm i have just node installed (from source)
20:17 < bradleymeck> ls deps/uv/include for me 
20:17 < WeezzZ_> antonio`: silly question, why don't u use packaged version of node ?
20:18 < antonio`> love to compile i guess
20:18 < antonio`> lol
20:18 < WeezzZ_> Mmmm ok :)
20:18 < antonio`> coming from freebsd so..:D
20:18 < CoverSlide> mine is installed in /usr/include/node
20:18 < antonio`> i don't have that folder
20:18 < WeezzZ_> freebsd has a good package manager :)
20:18 < antonio`> i compile from /usr/local/src/node
20:19 < antonio`> i love FreeBSD ports :)
20:19 < WeezzZ_> so use it :)
20:20 < bradleymeck> antonio` wherever you got nodes source from it does not match git https://github.com/joyent/node/tree/master/deps/uv/include
20:20 < bradleymeck> use the official git
20:24 < rektide> isaacs: how can i get a syndication of what is changing in npm?
20:25 < rektide> i'm only just starting to research what i can about npm's backend, being utterly crushed by docs talking about the front end
20:26 < bradleymeck> rektide: replicate the npm registry locally, connect to db/_changes
20:30 < rektide> http://node-code.com/blog/?p=155
20:30 < rektide> suhweet. "Setting up a private NPM repository"
20:31 < bradleymeck> rektide all fancy stuff should be based on npm-www in github and done on a local replica
20:31 < bradleymeck> public db is going to be slow as hell / try to stop you
20:37 < draginx> https://gist.github.com/durango/629ae72f3f8d3c3b35e5 any idea why jade would be giving me this error? :/
20:37 -!- mode/#Node.js [+o sblom] by ChanServ
20:40 < antonio`>  gcc -o test testuv.c -I/usr/local/src/node/deps/uv/include/
20:40 < antonio`> this doesn't nothing..
20:40 < antonio`> *does
20:44 -!- mode/#Node.js [+o sblom] by ChanServ
20:51 < draginx> https://gist.github.com/durango/629ae72f3f8d3c3b35e5 any idea why jade would be giving me this error? :/ <-- im getting this for every page now
20:58 < phrearch> hm the ws websocket client probably doesnt support sending a fake cookie
21:02 < phrearch> hm, anyone knows if there is a library that mimicks html5 pushstate?
21:03 < CorbinDallas> hello, I'm trying to use node.js for the first time in win 8.  I'm trying to run "example.js" on the home page but all I get from the prompt is "..."  What am I doing wrong? (it's running as admin)
21:25 < rmitchell> exit
21:26 < euoia> There are stopped jobs.
21:28 < rmitchell> :-)
21:28 < CorbinDallas> anyone running node.js in windows 8?
21:28 < rmitchell> yes
21:28 < CorbinDallas> I'm trying to use node.js for the first time in win 8.  I'm trying to run "example.js" on the home page but all I get from the prompt is "..."  What am I doing wrong? (it's running as admin)
21:29 < bradleymeck> CorbinDallas: … means it thinks there was a parse error and is waiting on more input to correct the error
21:29 < bradleymeck> probably mistyped something
21:29 < CorbinDallas> "..." means that.... ok
21:29 < CorbinDallas> http://pastebin.com/cAFipvqT
21:29 < CorbinDallas> not very verbose with the errors
21:30 < bradleymeck> phrearch: in older implementations cookies were not supported in ws, they shouldbe in all impls now
21:30 < bradleymeck> CorbinDallas: it is unsure if it is an error
21:30 < CorbinDallas> can someone else take a look at my exmaple.js and maybe point out my error
21:30 < CorbinDallas> well... that's even more confusing
21:30 < phrearch> bradleymeck: you're sure that counts for the websocket client in ws as well? i couldnt find anything related in https://github.com/einaros/ws/blob/master/lib/WebSocket.js
21:31 < bradleymeck> not sure about ws phreach, you would need to add a cookiejar lib
21:31 < phrearch> im trying to rerun my browser code on the server. would be nice if i can fake a cookie
21:31 < phrearch> maybe i need to add the cookie manually. dunno
21:31 < bradleymeck> phreach when you get the request a cookiejar lib needs to be used to reapply or establish cookies
21:32 < bradleymeck> CorbinDallas: copy paste of that gist works fine in node here, try wrapping it in a try/catch, also use a file if you want non-wonky errors from repl waiting on more input (tis the case in all languages)
21:33 < CorbinDallas> I'm using a file, running it with the command "node example.js"
21:33 < bradleymeck> and it gives '…' ?
21:33 < CorbinDallas> does it expect the file to be in the same directory as the executable?
21:33 < CorbinDallas> it gives "..."
21:33 < bradleymeck> same as cwd
21:33 < bradleymeck> what are you running `node` in cmd.exe?
21:34 < CorbinDallas> no, directly from the program
21:34 < CorbinDallas> just dbl clicked on the icon
21:34 < CorbinDallas> actually tried running it as admin
21:34 < bradleymeck> typing `node` will open the repl which is not what you are trying to do
21:34 < bradleymeck> dbl clicking*
21:34 < CorbinDallas> just tried "node blah.js" and it gives the same error, maybe the path isn't clear
21:34 < bradleymeck> try dragging the file onto the node exe
21:34 < CorbinDallas> ok
21:35 < CorbinDallas> that works
21:35 < CorbinDallas> thanks!
21:35 < CorbinDallas> where should I put the .js file if I want to run using the "node file.js" method?
21:35 < CorbinDallas> where is the path it starts from?
21:36 < bradleymeck> when running `node myjs.js` doing so from cmd.exe, powershell or the node command prompt is the general best practice
21:36 < CorbinDallas> ok, thanks for that, I was just running node.exe
21:36 < bradleymeck> when double clicking node you are opening a repl not the cmd prompt you think you are
21:36 < CorbinDallas> OHHHHhhh
21:36 < CorbinDallas> I see
21:37 < CorbinDallas> that's not clear on the home page
21:37 < CorbinDallas> I assumed it was the node.exe's "command prompt" that I was typing at
21:37 < bradleymeck> thats how all the other languages do it so /meh
21:37 < bradleymeck> in the start menu there should be a `node command prompt` shortcut
21:38 < bradleymeck> but idk about win8
21:38 < CorbinDallas> there is, but I'm in win8, I uhh, try to avoid that "start menu" thing
21:38 < CorbinDallas> I never really liked the start menu in win95-7, now I just down right hate it
21:39 < CorbinDallas> well, thanks for the help.  It makes a lot of sense now
21:39 < bradleymeck> quicksilver is my goto on windows
21:39 < CorbinDallas> is that an IDE?
21:39 < bradleymeck> CorbinDallas: open up an issue on node's github pretty pls :)
21:40 < bradleymeck> no its like a better start menu (just the run command really souped up)
21:40 < CorbinDallas> to try and get the 'Help' on the home page fixed?
21:40 < bradleymeck> yes
21:40 < CorbinDallas> you got it
21:40 < bradleymeck> :D
21:41 < CorbinDallas> would this be under "doc"?
21:41 < CorbinDallas> or "website"
21:41 < Kakera> if I understand it correctly, streams in libuv are always unidirectional?
21:42  * mscdex shakes a fist at intentionally executing callbacks more than once
21:42 < CorbinDallas> what's a good IDE to use for debugging node.js in windwos?
21:43 < eydaimon> When using expressjs, when I run my mocha tests, I get express outputting the request path as an artifact. Anyone know how to disable this?
21:43 < mscdex> CorbinDallas: well, visual studio if you're debugging C++/addons
21:44 < CorbinDallas> I'm just writing .js to execute in node.exe
21:44 < mscdex> oh
21:44 < CorbinDallas> I have VS2012, is there a way to hook it up?
21:44 < mscdex> i just use a plain old text editor
21:44 < Kakera> CorbinDallas, try webmatrix
21:45 < mscdex> but then again i don't particularly care about stuff like autocompletion
21:45 < CorbinDallas> thanks Kakera, I'll check it out
21:45 < CorbinDallas> I dont like autocomplete either
21:45 < mscdex> because for me it usually gets in the way more than it helps
21:45 < CorbinDallas> oh wait...
21:45 < CorbinDallas> isn't webmatrix a light version of VS?
21:45 < mscdex> i use notepad++ on Windows
21:45 < euoia> CorbinDallas: WebStorm is supposed to be good, but I don't use it
21:46 < CorbinDallas> mscdex: notepad++ seems cool, but does it have the ability to debug scripts running in node.exe?
21:47 < mscdex> CorbinDallas: there is no integration probably in the way you're thinking, but you can set up a macro to run the script with node in debug mode, which allows you to set breakpoints in the code manually
21:47 < mscdex> and gives you a gdb-like interface
21:47 < CorbinDallas> mscdex: so no step into step over etc.?
21:48 < mscdex> no
21:48 < CorbinDallas> oh... that kinda sucks.  If I was in *nix enviorn is there?
21:48 < mscdex> if you want that without a full-blown IDE, you might try something like node-inspector or some such
21:48 < CorbinDallas> I'll take a full blown IDE
21:48 < mscdex> that uses the v8 debugger
21:48 < Kakera> apparently there are duplex streams too
21:49 < euoia> +1 for node-inspector
21:49 < mscdex> ok, then you're looking at cloud9 or something
21:49 < CorbinDallas> I have VS2012
21:49 < mscdex> vs might have some kind of node integration
21:49 < Kakera> then why does the example create a new stream...
21:49 < mscdex> from ms
21:49 < CorbinDallas> isn't cloud9 online?  I think it uses ace, right?
21:49 < Kakera> vs doesn't, webmatrix does
21:49 < CorbinDallas> now that's strange, vs doesn't but webmatrix does...
21:50 < Kakera> if you like vs, you'll like webmatrix
21:50 < Kakera> they aren't the same thing
21:50 < CorbinDallas> I don't like WYSIWYG
21:51 < mscdex> i think eclipse also has some kind of node debugging integration
21:51 < mscdex> if you're into eclipse
21:52 < CorbinDallas> I've used it to make android stuff in the past
21:53 < rektide> i'm holding my breath for the next next gen
21:53 < HankHendrix> anyone here conversant with Yeoman?
21:53 < rektide> Eclipse Orion as implemented in Node
21:54 < CorbinDallas> eclipse is cross platform too, is it not?
21:54 < rektide> Eclipse Orion is a web IDE. the original implementation is in Java, but it has a well defined API that the client uses, so the entire server side java project is being met by a second, duplicitive effort: a reproduction of the server side back end in Node.js
21:55 < Metal3d> BTW I'm seeking if a node-vim debug tool exists (as gdb and pdb)
21:55 < rektide> so, as cross platform as either node or java
21:56 < Metal3d> and BTW (again) if anyone here has used node-vim successfully
21:56 < rektide> i've actually used cloud9 a couple times, unlike Orion. t'was ok. there's another recent contendor we're missing here that's worthy of naming
21:56 < rektide> Metal3d: would love to know more about success in node-vim, but no personal experience with me, no
21:57 < Metal3d> rektide, ok... by my side: that won't work... 
21:57 < Metal3d> I'll take a look on source code, maybe I will fix ;)
21:58 < CorbinDallas> mscdex: https://github.com/joyent/node/issues/4854 .  Is there anyway I can catagorize it or will someone else do that?
21:58 < euoia> Metal3d: What are you referring to with node-vim ?
21:58 < mscdex> CorbinDallas: someone else will
21:59 < g0z> wait what is node-vim?
21:59 < Metal3d> euoia, C-X o => no completion about require, and no completion of class prototypes...
21:59 < rektide> wow what, the recent scripted editor - https://github.com/scripted-editor/scripted.git - is built around orion. had no idea.
21:59 < tybenz> hey all. can anyone tell me how i can get a node command-line script to run in the background? without needing to explicitly do something like ./script.js & ??
21:59 < Metal3d> I only have vim standard completion (dom, browser functions...)
22:00 < rektide> excuse my distractions.
22:00 < euoia> Metal3d: so you are looking for an omnicomplete plugin
22:00 < Metal3d> euoia, that's what node-vim should implement
22:01 < Metal3d> but that not works at all
22:01 < euoia> Metal3d: where is this elusive node-vim? vimscripts?
22:01 < euoia> Metal3d: did you try this? https://github.com/myhere/vim-nodejs-complete
22:01 < euoia> Metal3d: (I haven't)
22:01 < Metal3d> mmmh maybe not
22:01 < Metal3d> just a moment, I will tell you
22:01 < CorbinDallas> damn, which http://www.eclipse.org/downloads/ should I download to debug node?
22:02 < Metal3d> vim-nodejs-complete
22:02 < Metal3d> that's it
22:02 < tybenz> hey all. can anyone tell me how i can get a node command-line script to run in the background? without needing to explicitly do something like ./script.js & ??
22:02 < g0z> ok vim-nodejs makes more sense than node-vim
22:02 < NickTomlin> Hey tybenz, you can try forever: https://github.com/nodejitsu/forever
22:03 < Metal3d> euoia, this is the right plugin, and here that's not working. Maybe you can tell me why ?
22:03 < euoia> Metal3d: let me give it a go
22:03 < Metal3d> :)
22:03 < Metal3d> no problem
22:04 < tybenz> NickTomlin: Can forever be used to turn itself into a background process? as far as i can tell it's only used for turning some other script into a background job
22:04 < Metal3d> euoia, huh... that works now... 
22:04 < Metal3d> ...
22:04 < tybenz> i'm wanting to distribute my script via npm so i don't want my users to have to know to type 'forever start …' to begin running my script
22:05 < mscdex> CorbinDallas: probably the classic version
22:05 < tybenz> NickTomlin: ^ wanting to bake the start/stop into the script
22:05 < Metal3d> euoia, I don't know why... but now it works... that complete process.XXX mymodule.XXX etc...
22:06 < Metal3d> and the doc appears on top
22:06 < mscdex> CorbinDallas: here's the information you need to install the node support: http://www.nodeclipse.org/
22:07 < euoia> Metal3d: did you have to install jscomplete as well?
22:07 < Metal3d> AFAIK no
22:07 < CorbinDallas> mscdex: thanks for that
22:08 < Metal3d> euoia, that's not in my bundle dir, but maybe I've installed this with the dirty way
22:08 < euoia> Metal3d: you installed vim-nodejs-complete by putting it in your bundle dir?
22:09 < Metal3d> euoia, yes, I'm using pathogen
22:09 < euoia> Metal3d: weird, it's not working for me :) Did you add any config to your .vimrc?
22:09 < euoia> I am also using pathogen
22:10 < Metal3d> euoia, no, but I've got a ftplugin that jsslint my code at save
22:10 < Metal3d> euoia, I can give you my vimrc and my ftplugin on fpaste.org
22:10 < euoia> Metal3d: sure
22:10 < euoia> Metal3d: thanks
22:11 < Metal3d> http://paste.fedoraproject.org/3866 =>  ~/.vim/ftplugin/javascript.vim
22:11 < phrearch> hm, doing something like console.log = app.logger.info triggers a stack size error in node
22:11 < Metal3d> http://paste.fedoraproject.org/3867 => ~/.vimrc
22:11 < phrearch> is it possible to replace the default console.log behaviour?
22:11 < euoia> Metal3d: with the plugin in my bundle dir, opening a js file my omnifunc is set to omnifunc=javascriptcomplete#CompleteJS 
22:11 < euoia> Metal3d: do you get the same thing?
22:12 < Metal3d> euoia, not here, I'm using omnifunc#Complete
22:12 < Metal3d> check my vimrc
22:12 < Metal3d> set ofu=syntaxcomplete#Complete
22:12 < Metal3d> this way, that works for all filetype
22:14 < euoia> Metal3d: okay it works now, I was setting omnifunc in my .vimrc
22:14 < euoia> Metal3d: that's pretty awesome
22:14 < euoia> Metal3d: thanks
22:14 < Metal3d> no problem
22:14 < Metal3d> ;)
22:14 < mscdex> phrearch: it works for me
22:15 < mscdex> phrearch: you're not calling console.log in your console.log replacement function are you?
22:15 < Metal3d> just a little announce, if you're interessed, I'm developping knotter module
22:15 < phrearch> mscdex: hm, it's probably something like that, triggering some endless loop
22:16 < mscdex> phrearch: `var conlog = console.log; console.log = function(m) { conlog('DEBUG: ' + m); }; console.log('hello world!');`
22:16 < phrearch> mscdex: its exploding when i try something like:   console.group = console.groupEnd = console.time = console.timeEnd = app.logger.verbose;
22:16 < phrearch> thats probably pure evil
22:17 < mscdex> what is console.group?
22:17 < phrearch> ehm console.group = console.groupEnd = console.time = console.timeEnd = console.log = app.logger.verbose;
22:17 < mscdex> what does app.logger.verbose do?
22:17 < phrearch> i wanted to replace all chrome/browser based logging with one general one. app.logger is a winston instance
22:18 < phrearch> but i better remove all the console.group/time things, and do something like app.logger.info = console.log; for the browser 
22:18 < phrearch> and use that
22:19 < mscdex> yeah, timeEnd() uses console.log
22:20 < phrearch> hehe this is pretty crazy. running browser code both in the server and the client
22:21 < phrearch> does jquery work well on the server?
22:21 < phrearch> i figure it may be hard to do the same kinda actions as in the browser on something like jsdom
22:23 < euoia> Metal3d: does the autocomplete work for your modules in node_modules or just for core moduleS?
22:23 < Metal3d> euoia, that seems to work for all
22:24 < prolificcoder> I have a question about Faker module, can someone help?
22:25 < prolificcoder> I am using npm not in context of a node application but in UIAutomation provided by apple, I was able to use one npm module but having problems with Faker
22:25 < euoia> Metal3d: seems to be a bit hit and miss for me.
22:43 < killing-joke> i don't see a faq entry for "how to install & maintain libraries in a standalone project (without npm)"
22:43 < killing-joke> where should i look to learn more about how to do that? thanks.
22:43 < substack> killing-joke: because you should use npm
22:43 < substack> why would you not use npm? there is no good reason
22:44 < killing-joke> substack, no network. can you help me find a way to work without it?
22:44 < substack> no network ever?
22:45 < CorbinDallas> mscdex: My issue was closed https://github.com/joyent/node/issues/4854 :(
22:46 < killing-joke> standalone device.  code is loaded by USB cable onto flash.  no network, no.  not ever.
22:48 < euoia> CorbinDallas: FWIW I agree with you that the example should be as clear as possible
22:49 < aknagi> Can anyone recommend a node tutorial appropriate for a web-developer new to nodejs?
22:49 < CorbinDallas> right?  I got shut down becuase "I should know how to use the command prompt" - well, sir, I've been using "the command prompt" for over 25 years, I think I know how to use it.  The issue was, it doesn't say "use the comamnd prompt"
22:49 < euoia> CorbinDallas: It's a bit of a pet peeve of mine that often beginner tutorials and examples for things aren't as clear as they ought to be
22:50 < CorbinDallas> I'm hardly a noob to programming, node.js yes, but if I can't follow the example, there's 1000's of others that can't either.
22:50 < CorbinDallas> anyway, I tried, mission complete in my book
22:50 < euoia> CorbinDallas: :S
22:53 < CorbinDallas> thanks for the comment there euoia
22:54 < killing-joke> it looks like i can just hack in hard-coded paths everywhere, so require can find the files
22:54 < killing-joke> http://nodejs.org/api/modules.html#modules_file_modules
22:55 < killing-joke> seems fairly straightforward, except for the part where all of the dependencies get forked. :/
22:56 < Kakera> are there any examples of the usage of libuv as a TCP client besides the Bert Belder video?
22:56 < mscdex> killing-joke: why not bundle your dependencies using npm then load that onto the device?
22:56 < mscdex> Kakera: have you looked at the uv book?
22:57 < mscdex> Kakera: http://nikhilm.github.com/uvbook/networking.html#tcp
22:57 < Kakera> mscdex, it doesn't provide a complete example
22:57 < killing-joke> mscdex, ah!  i will read up on how to do that.  cool, thanks!
22:58 < mscdex> Kakera: also look at the tests and uv.h
22:59 < mscdex> Kakera: uv_tcp_* starts at https://github.com/joyent/libuv/blob/master/include/uv.h#L643
22:59 < Kakera> already looking at uv.h
22:59 < Kakera> the inline docs are very terse
23:00 < mscdex> Kakera: here's an example test: https://github.com/joyent/libuv/blob/master/test/test-tcp-writealot.c
23:01 < killing-joke> substack, i can see that you have spent a great deal of time thinking about dep mgmt.  thanks for all the public code.
23:01 < Kakera> mscdex, thanks, this might help
23:01 < mscdex> there's others in there too, just gotta look at them
23:02 < mscdex> that's generally what i do
23:02 < CorbinDallas> does node do JIT compiling?
23:03 < context> v8 does yes.
23:03 < CorbinDallas> that is to say, if I alter a .js file do I have to restart node.exe
23:03 < azylman> node uses v8 which does jit
23:04 < groundwater> CorbinDallas: in short, yes
23:04 < mscdex> CorbinDallas: well, for modules, those are cached. so you can definitely manually override the cache
23:04 < groundwater> CorbinDallas: but JIT has nothing to do with that
23:04 < CorbinDallas> yeah, just thining of the .js files
23:05 < mscdex> but trying to reload yourself within the same script, not really
23:05 < CorbinDallas> so I'm using http://www.nodeclipse.org/ and trying to get the debugger running
23:05 < groundwater> that would truly be a boostrap
23:05 < mscdex> i think v8 has some live edit thing, but there's gotchas
23:05 < CorbinDallas> I added "debugger;" to the first line of my example.js
23:05 < CorbinDallas> but it doesn't seem to stop
23:06 < CorbinDallas> has anyone used nodeclipse before?
23:07 < azylman> I am surprised that there is a node plugin to eclipse
23:09 < cloudbender> sooooo  JSON.stringify does not like {prop: undefined}
23:09 < cloudbender> {prop: null} is ok
23:10 < C0deMaver1ck> that's funny
23:10 < azylman> Undefined fields stringify as nonexistant
23:10 < C0deMaver1ck> what about {prop: NaN}
23:10 < lz> yea
23:10 < lz> undefined is nonexistent
23:10 < killing-joke> would it be reasonable to use 'browserify' to create a single .js file? this would be much easier to maintain.
23:10 < lz> null is an object
23:11 < cloudbender> I'll use null
23:15 < cloudbender> Is there an unfugly way to concatenate two flat objects ?  { } + { }
23:17 < CorbinDallas> cloudbender: not an unfugly way
23:17 < sorensen> i'm sure this has been done dozens of times over, but if anyone wants a simple config module: https://github.com/sorensen/configs
23:17 < sorensen> kablam
23:18 < CorbinDallas> cloudbender: there may be a node way to do it, but in browser JS this is what I use: http://api.jquery.com/jQuery.extend/
23:19 < sorensen> cloudbender: https://gist.github.com/sorensen/5043271
23:20 < sorensen> pretty much taken from underscore.js
23:21 < cjhanks> Is there a way to change the "npm --python" globally on the system?  Ie, an rc file?
23:23 < killing-joke> is there an faq somewhere describing how to use node in a project that is not a web server or app server?
23:24 < elliottcable> killing-joke ⑊ whatcha mean?
23:25 < killing-joke> elliottcable, e.g. on a non-public network, or embedded, or a constrained environment where bigfast network access is either irregular or nonexistant
23:25 < killing-joke> like monitoring instrumentation in the field, or lab tools
23:26 < cloudbender> Well, if you like cheese, this will work ...
23:26 < cloudbender> cuz it's cheesy ...
23:27 < cloudbender> >> JSON.parse((JSON.stringify({test1: null, test2: null})+JSON.stringify({test3: null})).replace('}{',','));
23:27 < purr> cloudbender: (object) {test1: null, test2: null, test3: null}
23:27 < elliottcable> -purr
23:27  * purr 
23:27 < cloudbender> purr gets me. it's great.
23:28 < purr> cloudbender: I love you, too.
23:28 < cjhanks> killing-joke: It does a fair job as a message bus for disparate systems.  Afaict, all I/O reactor's are strangely used for optimizing i/o ;)
23:28 < cloudbender> awe shucks
23:28 < elliottcable> killing-joke ⑊ What are you wanting to know?
23:29 < elliottcable> xForgive me if I'm missing something, but what is there that differentiates using node *there*, from using it somewhere else
23:29 < killing-joke> cjhanks, thanks. i was hoping to replace an existing Tcl codebase that is so hairy i call it sasquatch
23:30 < killing-joke> the device cannot be expected to have network access for maybe years at a time, but can be serviced in person
23:30 < cjhanks> killing-joke: I would say node.js does not have the maturity for such a project yet.  You will have a very difficult time finding someone to maintain deprecated node.js code (and it deprecates at a very fast rate).
23:31 < killing-joke> cjhanks, that's very good advice.  thanks.
23:34 < cloudbender> this works, for now, fdef is extended by pjson
23:35 < cloudbender> fdef = JSON.parse((JSON.stringify(fdef)+JSON.stringify(pjson)).replace('}{',','));
23:35 < cloudbender> fdef is passable intact
23:36 < cloudbender> or returnable I should say
23:37 < cloudbender> add ham and pineapple and call it a Hawaiian.
23:37 < elliottcable> wat
23:37 < cloudbender> lol ( a pizza, see, cuz it's cheezy, and cheese goes on pizza, and ...)
23:38 < elliottcable> fdef? what?
23:38 < cloudbender> It's just a way to concatenate two simple objects
23:42 < cjhanks> So I am still wondering if npm has a ~/.rc file of any sort, yes?  No?  Google is not much help here.
23:45 < shanse> no
23:48 < cloudbender> well, it's beginning to look like I need to write a library for node.
23:49 < cloudbender> Fortran, Pascal, Prism, or C;
23:49 < azylman> cloudbender: by concatenate do you mean like underscore's extend method?
23:50 < cloudbender> I'm not sure azylman, I do not use _underscore
23:50 < azylman> cloudbender: http://underscorejs.org/#extend
23:51 < cloudbender> hey thats pretty sweet.  wonder if his is as cheesy as mine.
23:51 < cloudbender> (hers ?)
23:51 < azylman> I don't believe so :p
23:51 < cloudbender> lol
23:51 < cloudbender> prolly not
23:51 < azylman> I think they iterate over all the key,vals of the sources and set them on destination
23:52 < sorensen> ....
23:52 < azylman> Anyway, there's a lot of super helpful methods in underscore that are worth looking at
23:52 < sorensen> cloudbender: i sent you a gist of that exact thing
23:52 < cloudbender> that would be the responsible thing to do, yes.
23:52 < sorensen> lol
23:52 < sorensen> cloudbender: https://gist.github.com/sorensen/5043271
23:52 < sorensen> if you dont want all of underscore
23:52 < cloudbender> ty both
23:53 < azylman> map, find, filter, pluck, flatten, without, union, intersection, difference, unique, keys, values, extend, pick, omit, defaults, clone are the methods we use most often
23:53 < cloudbender> What worries me about third party libs is of course the long-term dependencies.
23:53 < azylman> As well as all of their isArray, isObject, etc. methods
23:53 < sorensen> cloudbender: i wouldnt worry too much about underscore
23:53 < azylman> Undersdcore is the most dependended upon library on npm
23:53 < cloudbender> ok sounds like good advice
23:53 < sorensen> its a pretty stable utility belt
23:53 < azylman> So you're probably safe
23:53 < cloudbender> k
23:53 < azylman> By a large margin, as well
23:54 < sorensen> although, as with anything, i suggest avoiding using third party libs when possible
23:54 < cloudbender> that sounds like a solid bet
23:54 < cloudbender> I mean I'll try it.
23:54 < sorensen> if all you need is a single method from the lib, just write the method
23:55 < azylman> I think you'll find, though, that once you start using underscore you'll realize that there's a lot of places where you could have used it but didn't
23:55 < fruitFly> O M G.. how to install node on my linux mint box? I've been trying
23:55 < azylman> And one method is never enough ;)
23:55 < sorensen> azylman: been using underscore for a long time now, i still avoid it when possible
23:55 < sorensen> esp if you are using node and not the browser
23:56 < sorensen> quite a bit of the functionality in underscore is a bridge of browser support
23:56 < sorensen> node has things like isArray and isNaN by default
23:56 < cloudbender> sorensen that's a great: extend.js
23:57 < cloudbender> *piece of code
23:57 < sorensen> if your going to include underscore, use _.extend, if thats all you need though just copy paste
23:57 < sorensen> its almost directly ripped from underscore, from memory anyway
23:57 < cloudbender> Might as well just go ahead and use the lib
23:57 < sorensen> depends what you need from it
23:57 < azylman> sorensen: Out of the ones that I listed, I'm pretty sure only a few of them are built in to node
23:58 < sorensen> its one of those things, dont include jquery if all you need is a single DOM element by ID
23:58 < sorensen> i realize
23:58 < sorensen> its just not often i need most of that functionality
23:59 < sorensen> also depends on your requirements for speed i suppose
23:59 < sorensen> _.each -> .forEach -> for loop
23:59 < sorensen> then theres async which will make it non blocking to do some of that, but in the end take longer
23:59 < sorensen> async.js*
--- Log closed Wed Feb 27 00:00:04 2013
