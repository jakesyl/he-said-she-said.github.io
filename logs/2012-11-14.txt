--- Log opened Wed Nov 14 00:00:05 2012
00:00 < bnoordhuis> mscdex: ?
00:01 < TehShrike|Work> That sounds awkward
00:01 < mks> polling /proc/ is a bad idea?
00:01 < TooTallNate> mscdex: i think err.code is the only one that's normalized
00:01 < TooTallNate> could be wrong though
00:01 < mscdex> for example, if i get a socket error: https://gist.github.com/756c03bcc3ce2d780808
00:02 < mks> a lightweight node process started by init.d that does just that
00:03 < TooTallNate> mscdex: hmm, looks like a bug
00:04 < bnoordhuis> mscdex: oh, that's an unmapped error
00:04 < bnoordhuis> mscdex: open a libuv issue and we'll add it
00:04 < mscdex> ok
00:04 < bnoordhuis> mscdex: it's WSAESHUTDOWN btw
00:05 < bnoordhuis> mscdex: what version of node is that? we've been mapping that error for a while now
00:05 < mscdex> 0.8.14
00:06 < bnoordhuis> mscdex: can you try applying this patch? https://github.com/joyent/libuv/commit/483043b
00:06 < bnoordhuis> seems it never got back-ported
00:07 < TehShrike|Work> Does node's built-in http have anything to make cookies easier from the client perspective, or is it time to swing for request/superagent?
00:08 < bnoordhuis> TehShrike|Work: it gives you the raw headers, what more do you want?
00:08 < mscdex> bnoordhuis: i'll give it a try in a bit. it's not a problem for me right now, it was just something i just happened to notice
00:08  * bnoordhuis grumbles about kids these days
00:08 < TehShrike|Work> bnoordhuis: ...a parsed object ;-P
00:08 < bnoordhuis> mscdex: i'll back-port it, i guess bert simply forgot about it
00:08 < TehShrike|Work> And something to persist it for me across requests!
00:09 < bnoordhuis> TehShrike|Work: maybe request? node's http client is pretty bare bones and low level
00:09 < TehShrike|Work> Fiddling with headers isn't so bad from the server's perspective, but I think I'm starting to feel like using a tool for this client I'm writing
00:09 < MI6> joyent/libuv: Ben Noordhuis v0.8 * 72955c2 : windows: map WSAESHUTDOWN to UV_EPIPE  This is a back-port of commit 4830 - http://git.io/Zsvc9w
00:10 < othiym23> TehShrike|Work: there's gotta be a cookie jar that works with the raw http.request method
00:11 < othiym23> TehShrike|Work: for instance: https://github.com/goinstant/node-cookie
00:11 < othiym23> or perhaps https://github.com/bmeck/node-cookiejar
00:13 < TehShrike|Work> eh, I think I've used the built-in http enough to feel good about myself at this point - for this task, I think I'll just jump to a reasonable abstraction of the whole client session
00:20 < mks> bnoordhuis: were you talking about /etc/inittab before, maybe?
00:22 < bnoordhuis> mks: no (or not exactly). i mean a script in /etc/init.d and syminlinks in the appropriate /etc/rc[0-9].d directories
00:22 < bnoordhuis> *symlinks
00:24 < mks> so, simply init.d + an entry in inittab to handle the respawn
00:24 < mks> (+ update.rc to create the symlinks)
00:25 < EhevuTov> what OS are you using? you really shouldn't have to modify your system at the system level
00:25 < EhevuTov> like, having to make symlinks and the like just seems weird
00:25 < mks> debian
00:26 < mks> init works that way
00:26 < EhevuTov> it doesn't work that way in fBSD. Interesting.
00:27 < mks> fBSD should have something similar to launchd on osx
00:27 < voodootikigod> bnoordhuis: so aside from monkey patching the world, any other way to get the error on a read stream destroy?
00:27 < EhevuTov> i make entries into the conf file and kill -HUP initd
00:27 < bnoordhuis> voodootikigod: fs.ReadStream emits an error event if fs.close() fails
00:28 < voodootikigod> thought that was only on read failures?
00:28 < matbee> blurp
00:30 < Hotroot> I think I have yet to find a database/library room that isn't completely dead. #jquery aside of course
00:34 < tnorris> whoa. accidentally rebased force pushed a pull request branch... yeah, github didn't like that.
00:34 < bnoordhuis> voodootikigod: no, close as well
00:34 < voodootikigod> ok its not dumping a thing
00:34 < voodootikigod> unfortunately
00:35 < voodootikigod> and i ripped out the handmade writer
00:35 < voodootikigod> thinking that might be the conflict (contention on the FD)
00:35 < bnoordhuis> voodootikigod: are you closing the fd that you passed to fs.ReadStream yourself?
00:35 < samholmes> http://stackoverflow.com/questions/13371262/development-build-of-my-node-js-site
00:35 < samholmes> I'll just leave that here
00:37 < tnorris> bnoordhuis: there are a bunch of non-relevant bugs open. you or anyone mind me commenting those for cleanup?
00:37 < tnorris>  (just don't want to flood bug updates if not considered a problem)
00:37 < bnoordhuis> tnorris: not at all. in fact, i encourage that :)
00:37 < voodootikigod> bnoordhuis: removed the SerialPortBinding.open(path, options, function (err, fd) {
00:37 < voodootikigod> part
00:38 < denysonique__> voodootikigod: /fart
00:38 < voodootikigod> bnoordhuis: now looks like this: https://gist.github.com/098e2155d8ee9d565902
00:39 < voodootikigod> denysonique: ?
00:39 < bnoordhuis> voodootikigod: looks okay to me. if that doesn't show anything, i don't know either :)
00:40 < voodootikigod> :)
00:40 < voodootikigod> sometimes you chalk it up to the ghosts in the machine :)
00:40 < voodootikigod> brb
00:46 < pellepelle3> if any one can give us some feedback http://nodeknockout.com/teams/etc-node-dev-team
00:48 < CoverSlide|TPFR> could be prettier
00:48 < CoverSlide|TPFR> looks like a website from 1998
00:48 < Hotroot> Anyone use redis who wouldn't mind answering a question or two?
00:49 < Hotroot> CoverSlide|TPFR: What? It's not too bad. I would axe the background though
00:49 < CoverSlide|TPFR> Hotroot: sup?
00:49 < Hotroot> First off, I assume list = array, and set = object basically?
00:49 < CoverSlide|TPFR> set is an array with only unique values
00:49 < Hotroot> Thus, lists are faster if I'm going to fetch the whole thing, iterate through, whatever
00:50 < Hotroot> I thought set has keys and lists dont
00:50 < CoverSlide|TPFR> set has keys but no values
00:50 < Hotroot> 0.o
00:50 < Hotroot> I'll read the datatype page
00:50 < CoverSlide|TPFR> set is non-sequential. list is sequential
00:50 < Hotroot> Other question, lpush vs rpush
00:51 < Hotroot> They don't mention it, but isn't rpush way faster because it's like appending?
00:51 < CoverSlide|TPFR> not sure how redis stores it
00:51 < Hotroot> Or is it written in a way where left and right appending is actually the same speed/
00:51 < CoverSlide|TPFR> but if it's a linked list, then it wouldn't matter
00:51 < Hotroot> The example I looked at kept using lpush, when I assume rpush is like .append()
00:54 < CoverSlide|TPFR> Hotroot: "The main features of Redis Lists from the point of view of time complexity are the support for constant time insertion and deletion of elements near the head and tail, even with many millions of inserted items."
00:55 < CoverSlide|TPFR> sounds like a linked list to me
00:55 < othiym23> it sure is!
00:56 < Hotroot> Ah
00:56 < othiym23> I should have gotten a certificate for attending the Redis Master Class
00:56 < Hotroot> Still, lpush pushed to beginning
00:56 < othiym23> maybe fritzy will make me an e-certificate
00:56 < Hotroot> So you need to rpush if you are going to work with that as a JS array
00:56 < Hotroot> And then there are hashes...When I get back I'm going to figure this all out
00:57 < CoverSlide|TPFR> Hotroot: http://en.wikipedia.org/wiki/Abstract_data_type#Examples
00:57 < othiym23> Redis is so awesome it makes me wish I had a reason to use it
00:57 < othiym23> the Lua stuff is frickin brilliant
00:58 < CoverSlide|TPFR> it is
00:59 < Hotroot> I like mongolian, so it's a bit weird for me
01:04 < othiym23> Hotroot: if you think of Redis as a "data structure server" rather than a database or a cache, it'll be easier to wrap your head around
01:05 < CoverSlide|TPFR> youporn is 100% redis
01:05 < CoverSlide|TPFR> it can be a database
01:05 < CoverSlide|TPFR> if you have the memory
01:05 < CoverSlide|TPFR> and youporn has the mammories
01:09 < othiym23> CoverSlide|TPFR: it can be a database, but trying to treat it like one can make it tough to get started
01:09 < CoverSlide|TPFR> true, true
01:09 < othiym23> like, it's way faster to store data in multiple places based on how you might access it later
01:10 < othiym23> and bit operations are pretty cheap so you can do things like make giant bitmaps for things like funnels
01:10 < CoverSlide|TPFR> true
01:10 < othiym23> things that would be pretty much straight-up dumb with MongoDB or SQLite or whatever
01:15 < Hotroot> CoverSlide|TPFR: It is a db though, I mean you use it to store user info, etc. right?
01:15 < CoverSlide|TPFR> you use it to store data
01:15 < othiym23> Hotroot: it's a database without the base
01:16 < othiym23> it'll persist the data to an append-only log and to a disk-based store, but none of the operations it does are persisted by default
01:16 < othiym23> that what makes it so fast
01:16 < Hotroot> So what if the system crashes?
01:16 < othiym23> no schema, no storage manager, no relational model, just named data structures
01:17 < othiym23> you either replay the append-only log or reload from the snapshot
01:17 < Hotroot> Okay, so data loss isn't an issue
01:17 < CoverSlide|TPFR> which is better than mongo <1.6
01:17 < othiym23> which can be a nontrivial task -- I've heard of it taking over 20 minutes to replay the log for large instances, during which the server is inaccessible
01:17 < Hotroot> The log doesn't miss anything?
01:18 < Hotroot> I would have just stuck with mongo, but it was so ugly that I had to use mongolian, which means now other things that feed off mongo want their own connection, etc.
01:18 < othiym23> the assumption is that you're going to have either sharding or master-slave instances
01:19 < Hotroot> I can just run it single system for small stuff though right?
01:19 < othiym23> the log will be complete unless it's the disk that goes away
01:19 < CoverSlide|TPFR> yeah that's no problem
01:19 < othiym23> yeah
01:19 < othiym23> and it will hold exactly as much data as you give it RAM for ;)
01:19 < CoverSlide|TPFR> don't forget swap
01:20 < othiym23> although you need to budget more RAM than you think it's going to need, because of how its snapshotting works
01:20 < CoverSlide|TPFR> i miss the vm stuff in redis
01:20 < Hotroot> So far it seems nice, just what I want, just gotta learn all these weird commands
01:20 < othiym23> CoverSlide|TPFR: if your Redis instance is touching swap, you've negated most of the reason to use Redis
01:20 < Hotroot> Hopefully not too much RAM, the small VPS's only have like 256MB
01:21 < othiym23> Hotroot: when you're browsing the documentation, don't be afraid to use the little grouping ribbon across teh top to restrict it to the various data types
01:21 < othiym23> there are fewer operations than it might initially seem
01:21 < Hotroot> Yeah, saw that bit
01:21 < Hotroot> Mainly understanding data types atm
01:21 < othiym23> how much data are you trying to store?
01:21 < othiym23> because there are no indexes, it's actually efficient memory-wise
01:22 < Hotroot> Express session info. Also username, password, email, join date, and total chips so far. Maybe upgrade status.
01:22 < Hotroot> As long as the overhead isn't high, I won't need much
01:22 < othiym23> if you're just using it as a session store, you should be fine giving it 32MB or whatever, but if you're trying to store largeish objects, you might want to get an instance with morememory
01:22 < Hotroot> Just text
01:22 < othiym23> 32MB should get you to a few thousand users with no problem
01:23 < Hotroot> It's my first web project, I'd be happy to get that many per week
01:23 < Hotroot> Well, first webserver project
01:23 < othiym23> something to be aware of is that Redis uses fork and copy-on-write to snapshot, so you need (at most) 2x the RAM for the server so it can write its snapshot to disk
01:24 < Hotroot> OpenVZ might be a better choice so I can get burst RAM then
01:24 < Hotroot> But swap is fine, it can go slow for now
01:25 < othiym23> people still use OpenVZ?
01:25 < Hotroot> So redis datatypes are dynamic right? It's a list because I use LPUSH nonExistantName value?
01:25 < Hotroot> othiym23: On low end VPS's, yes
01:26 < Hotroot> I don't have to declare them or anything weird
01:27 < othiym23> Hotroot: it's better to think of Redis keys as not being associated with any specific types
01:27 < othiym23> you'll probably want to come up with some kind of naming convention to help you keep track of which keys contain which types
01:28 < Hotroot> othiym23: Well it says lists can contain only strings? So I need to keep some mind to what is what
01:29 < CoverSlide|TPFR> everything in redis is a string
01:30 < Hotroot> Even lists, sets, etc?
01:31 < CoverSlide|TPFR> lists contain strings, sets contain strings, hashes are strings and strings
01:32 < Hotroot> Yeah, but can you do set(list, string, hash) ?
01:33 < CoverSlide|TPFR> ... no ... i don't think so
01:33 < matbee> Hey guys, just wondering, do you know of any logging modules with some friendly front-end log viewage?
01:34 < niggler> what are you trying to do hotroot
01:34 < matbee> I want to throw it into mongo
01:34 < matbee> view live, etc
01:35 < Hotroot> niggler: Well maybe like a list called usersInRoomOne
01:35 < Hotroot> Then each user is a hash, with username, score, etc.
01:35 < niggler> that's the wrong approach
01:36 < niggler> if users are in multiple rooms then you have all kinds of duplication
01:37 < Hotroot> niggler: Okay, what about in a game? Player.inventory.item
01:37 < Hotroot> So World.Players.Player1.Inventory.Item
01:38 < niggler> you could hold a json object with the player info
01:38 < othiym23> Hotroot: the individual values are strictly typed, so you can't nest a ZSET in a hash or whatever
01:38 < niggler> and then pull in, parse, modify, stringily and then store
01:38 < othiym23> that's when you typically start storing things in multiple places
01:39 < Hotroot> Really? =/
01:39 < othiym23> and also why it's important to have key names that tell you what's in a given key
01:39 < othiym23> for your own sanity
01:39 < Hotroot> Might just go back to mongo.
01:39 < othiym23> the "strings" themselves are binary-safe, though
01:39 < Hotroot> Seems like a pretty basic feature
01:39 < othiym23> so you can stick arbitrary rando data like images or whatever in there
01:39 < othiym23> Redis is just *different*
01:40 < Hotroot> I'm I'm doing it with JSON that kills the point. I might as well just store World as a JSON object then
01:40 < othiym23> for the kind of thing you're doing, I'd argue it's a way better solution than Mongo
01:40 < othiym23> I mean, if you want complex structures in there, just go ahead and serialize to JSON and push whole objects in there
01:40 < othiym23> that will work just fine
01:40 < othiym23> it still makes it easy to have arrays, queues, sorted sets, etc
01:40 < Hotroot> Again, that kills the point
01:41 < Hotroot> Then I can't sort the items in their inventory from redis, etc.
01:41 < othiym23> sure you can, you just segment the key name
01:41 < niggler> can't you do that in lua
01:41 < othiym23> "user:inventory:items" is a ZSET, for instance
01:41 < othiym23> niggler: yeah, but if you add Lua before you grasp how Redis does stuff on its own you're just going to end up even more confused
01:42 < niggler> ok how about a problem which I'm dealing with right now
01:42 < Hotroot> Wait, how do I split like that?
01:42 < Hotroot> I definitely need some OO-ness
01:42 < niggler> hold on Hotroot I've got a simpler example to start with
01:42 < niggler> lets say I'm doing a spreadsheet
01:43 < niggler> there are a set of cells and for each cell there's an address ("B2"), formula ("=3") and current value (3)
01:43 < Hotroot> I don't ever use spreadsheets
01:43 < niggler> now i want to have multiple sheets stored
01:43 < niggler> what's the "redis" way of representing this
01:44 < othiym23> Nexxy: psyched that you're coming down here for the Hard Hack weekend
01:45 < Hotroot> niggler: No idea
01:45 < Hotroot> I would like a list of hashes in that case
01:45 < othiym23> Hotroot: there's no magic to it -- since the keys are strings of arbitrary length, you can segment them however you want
01:46 < othiym23> so you could come up with a path or something similar, it's just up to you to write a little boilerplate to map from an address to a key name
01:47 < othiym23> so "spreadsheet:001/address:B2/formula:=3" would get mapped to the value "3", or whatever
01:47 < matbee> So, anyone know of a decent logging module that can auto-add logs to mongo?
01:47 < Hotroot> othiym23: Not getting it. Going to read more docs
01:48 < othiym23> Hotroot: good luck!
01:48 < othiym23> matbee: https://github.com/indexzero/winston-mongodb
01:55 < Hotroot> othiym23: Okay, so say I'm making a civilization MMO. I would normally do something like player.cities[1].upgrades (an array)
01:55 < Hotroot> How would you go about this in redis
01:55 < ashnur> morning
01:58 < othiym23> Hotroot: you'd come up with a schema for key names, so like player_id:city_index:upgrades
01:59 < othiym23> then you'd use LPUSH "1031032:1:upgrades" with the value being whatever each element of the upgrades array being
01:59 < Hotroot> othiym23: How do you get a list of the players?
01:59 < othiym23> Hotroot: put all the players in a SET
02:00 < Hotroot> Just weird coming from somewhere I can have collections
02:00 < othiym23> so each time a user is created, you SADD "users" "<user ID>"
02:01 < othiym23> Hotroot: I know this sounds totally untrue right now, but once you wrap your head around it, Redis is waaayyy simpler than MongoDB
02:02 < othiym23> or maybe "more flexible" is a better way of putting it
02:02 < Hotroot> othiym23: Doesn't that incur a bunch of JS overhead then? Now you have to GET players:ID, then GET ID:buildingKey
02:03 < Hotroot> Which still doesn't get me upgrades yet
02:03 < Hotroot> Because city needs to hold more than just upgrades
02:03 < othiym23> Hotroot: it's so goddamned fast that it really doesn't matter
02:03 < Hotroot> JS isn't
02:03 < othiym23> Node is :)
02:03 < LouisT> mmmm i've not looked at redit much, but mongodb just seems the better choice tbh.. =/
02:03 < othiym23> the latency is sub-millisecond if you have Node and Redis running on the same host
02:03 < Hotroot> Okay, still, it seems like people are ignoring this huge flaw
02:04 < Hotroot> I have to be really hacky to do such a simple task
02:04 < niggler> sub millisecond is a terrible benchmark
02:04 < LouisT> othiym23: "on the same host" heh
02:04 < LouisT> that's a horrible way to look at it
02:04 < othiym23> I'm including serialization / marshalling overhead in there
02:04 < othiym23> I'm not here to convert anyone
02:05 < othiym23> if you'd rather stick with MongoDB, no hate from me
02:05 < Hotroot> I mean the point of a db is to hold data nicely for me. So if I'm purposely finding a way to get objects holding objects, I don't see how it's not a flaw
02:05 < othiym23> but I think Redis is the bees' kneecaps
02:05 < Hotroot> I would like to get/use/enjoy/whatever redis, I'm just trying to see how people work past this obvious need
02:07 < othiym23> the thing is that there are no containers in Redis, really
02:07 < othiym23> there are only keys and values
02:07 < othiym23> you can have a shitton of keys without having any adverse effect on its performance
02:07 < Hotroot> Especially since it could be more complex. Like EvE. Players.Player[1].Ships[1].weapons[2].stats.power
02:08 < othiym23> you can also use hashes to map from IDs to other key names if you're afraid of the key names getting gigantic
02:09 < Hotroot> So what would you do with the ship example?
02:09 < Hotroot> Even if it's possible, 100 million unique weapon hashes are pretty ugly, just floating around
02:10 < othiym23> probably have a JSON literal for each weapon on the ship, and then stash it in the key player_id:ship_index:weapon_index
02:10 < othiym23> Hotroot: why is it ugly? you're never going to see all the keys at once
02:10 < othiym23> it's considered ultra poor form to run "KEYS *" on a production Redis instance
02:10 < Hotroot> So key:value is beautiful until we need objects and then we just hack it in with JSON?
02:11 < othiym23> it's not a hack, you're just storing the data in a convenient form
02:11 < Hotroot> Then I could just store one JSON file and have no need for redis
02:11 < othiym23> basically, like with any data store, you need to know how you're going to query / access the data later to figure out the best way to represent and store it
02:11 < Hotroot> The more complex it gets, the huger these JSON files have to get
02:11 < othiym23> sure, you could!
02:12 < othiym23> then you break it down into smaller values
02:13 < othiym23> maybe you represent the stats object as a hash, and have another hash that maps from the path to that object as the key and the key name of the stats object as that key's value
02:13 < Hotroot> Then why not just include that in redis?
02:13 < othiym23> which part?
02:14 < othiym23> all of the pieces I was just describing would be in Redis
02:14 < Hotroot> I hope you see my point, it's the same with LISP "Functional is beautiful...until I need my functions with side effects"
02:14 < Hotroot> The hashes to hashes
02:14 < Hotroot> That's basically what I have in mongo. Object.child.child
02:14 < niggler> holy fuck Hotroot have you played with legos recently?
02:14 < Hotroot> No?
02:15 < niggler> have you seen the new lego sets that are being produced?
02:15 < Hotroot> No
02:15 < niggler> many years ago, lego sets used to be collections of standard blocks
02:15 < niggler> like 1x1, 2x2, 2x4
02:15 < niggler> the iconic 2x4 red brick
02:16 < Hotroot> Yes
02:16 < niggler> anyway, there was this trend, especially pronounced the last decade, where lego started creating specialty pieces
02:16 < niggler> pieces with only one purpose
02:16 < niggler> they were so oddly shaped and so evidently designed to fit one specific use case
02:16 < LouisT> to step on and cause immense pain?
02:16 < LouisT> oh ok
02:16  * othiym23 sits back to watch build an analogy-castle in the air
02:16 < niggler> so id say redis is closer to the older form of legos
02:17 < Hotroot> I'm building my rebuttal as I patiently wait
02:17 < niggler> the bare minimum is built extremely well, and it is up to you and your imagination to put it together to create wonderful structures
02:17 < Hotroot> Yes, I can see that, and I do like simplicity. But my point is, you can't rage at 10x10 lego blocks when you have to build them often to accomplish something
02:18 < niggler> if you want the other extreme, with interfaces to fit every single use case you could imagine, you could go with something like mongo
02:18 < othiym23> I think that is what Lua is meant to help with
02:18 < Hotroot> You act like I want some specialty feature
02:18 < Hotroot> I want a hash in a hash
02:18 < Hotroot> Pretty simple, I see no way around needing it for certain things
02:18 < niggler> that's a representation issue Hotroot
02:18 < othiym23> you can get a hash in a hash by having the value of the key in the hash being the key name for another hash
02:18 < niggler> in the simplest case, you would have one hash with the keys
02:18 < niggler> and have, for each key, a separate hash
02:19 < othiym23> or just shoving the hash into the first hash as a JSON value
02:19 < Hotroot> othiym23'ms solution was basically to make my own dynamic hashes
02:20 < Hotroot> I'm not trying to troll here, but I hope you both see why I view JSON and building my own hash-in-hash as a cop out, or hack
02:20 < othiym23> for nested hashes, all you're doing is adding another HGET operation
02:20 < niggler> your point is well taken Hotroot, but if you want a POOP go with something that has those operations built in
02:21 < niggler> redis doesn't promise to be a panacea
02:21 < othiym23> Redis is flexible, fast and consistent, but it does impose some hare architectural legwork on developers
02:21 < Hotroot> It's just such a simple feature. Hash in hash, set in set
02:21 < Hotroot> I really don't ask for much from a DB
02:22 < niggler> Hotroot: its not a primitive feature though
02:22 < Hotroot> And redis may not promise to be much, but it's the only thing I see good examples and libs in
02:22 < othiym23> most RDBMSes won't let you stick tables within tables, though, for instance
02:22 < othiym23> at that level you're stuck to whatever values fit in the relation
02:26 < niggler> that too
02:26 < matbee> Does anyone here know how to get the current callstack in a function?
02:27 < othiym23> also, the Redis documentation has live REPLs for each command so you can play with it right there in the page
02:27 < othiym23> which is super cool
02:27 < othiym23> I wish the Node documentation did that
02:27 < othiym23> matbee: new Error().stack
02:27 < niggler> matbee console.trace
02:28 < niggler> othiym23: how would that work?
02:28 < niggler> would it hook into nodejitsu or something
02:28 < matbee> ha, awesome
02:28 < matbee> you guys deserve kisses
02:29 < othiym23> niggler: sure why not, or you could just fake a REPL with browserify somehow
02:29 < othiym23> which would probably be easier than trying to sandbox fs operations or whatever
02:30 < Hotroot> Eh, maybe it will work. So is there no weird overhead for having all this shit out in the open?
02:31 < Hotroot> Like 100k random player hashes floating around
02:31 < Hotroot> Linked to 100k random player hands
02:31 < othiym23> console.trace is doing a lot more stuff than I would expect it to
02:32 < othiym23> Hotroot: why is that a problem?
02:32 < Hotroot> Doesn't it make the search longer when I use keys?
02:32 < othiym23> why would it?
02:32 < othiym23> all that data is in memory
02:32 < Hotroot> Hmm
02:33 < timeturner> is it smart to embed data until it is about to reach the limit and then move all of the data to another collection and do a client side join?
02:33 < timeturner> in mongodb
02:33 < Hotroot> So is that how people normally do it? Just a hash value that is the name of another hash?
02:34 < othiym23> Hotroot: it really depends on the app, because you do want to make sure you're not just using up tons of memory unnecessarily
02:34 < ChrisPartridge> Anyone know of a node alternative to graphite?
02:34 < Hotroot> Like player(hash): name david score 1000 hand nameOfHash
02:34 < Hotroot> ChrisPartridge: A pen?
02:35 < Hotroot> Oh, that killed my joke. I thought you said "a good alternative"
02:35 < othiym23> ChrisPartridge: not really, there's NodeTime, Nodefly, and I'm working on Node support for New RElic, which is currently in beta
02:37 < ChrisPartridge> othiym23: how's new relic? 
02:37 < othiym23> pretty awesome
02:38 < Hotroot> Hmm, I guess that is how you do it with SQL, links to other tables
02:38 < othiym23> I'm the Node team for New Relic, which can be a little intimidating at times, but I'm feeling good about the progress of the product
02:39 < othiym23> Hotroot: yeah, you don't *have* to put the whole path in the key name, you could also just have key names like "weapon:<ID value>" and have those pointed to from another hash / sorted set / what-have-you
02:39 < othiym23> that's the most efficient way to represent sparse data structures, in fact
02:39 < Hotroot> Which JS would do later, kind of like object[variable].method
02:39 < ChrisPartridge> I really just want something I can send a tonne of metrics to, and create some pretty graphs. Graphite just seems like a big mess, and ducksboard/geckoboard etc all seem to have pretty limited custom graphing abilities. e.g. displaying a heap of time series on one line graph
02:40 < othiym23> ChrisPartridge: have you looked at using graphite with statsd?
02:40 < othiym23> if you're mostly working with counters and events, it simplifies things
02:40 < ChrisPartridge> othiym23: I have statsd already aggregating all my data
02:40 < Hotroot> othiym23: You do mean that same principal right? Like statically placing the name in the db call?
02:40 < othiym23> and statsd itself is like 200 lines of Node
02:40 < ChrisPartridge> yeah, my boss wrote the statsd-mongo adapter (don't look at the code)
02:41 < ChrisPartridge> i'll have to just setup graphite I think
02:41 < othiym23> Hotroot: yes, the type / "table name" becomes part of the key name
02:41 < othiym23> my condolences
02:41 < othiym23> if you have a good store for time-series data, it might be simpler just to whip something together with d3
02:41 < othiym23> that's more or less what Voxer did for their own internal metrics framework
02:42 < othiym23> ChrisPartridge: then you can use cool stuff like https://github.com/sentientwaffle/llquantize
02:42 < ChrisPartridge> yeah, been playing with d3 and rickshaw
02:42 < othiym23> which is something that sentientwaffle / DJ built for Voxer's Summer of Node
02:43 < ChrisPartridge> oh, that looks interesting
02:44 < othiym23> to tie everything in a knot before I go home, you could shove your time-series data into Redis and then postprocess it in Node / d3
02:44 < othiym23> I bet it would be surprisingly little code, and would probably be easier to work with than graphite's horrific UI
02:44 < othiym23> graphite does some really useful things, but man is it a pain in the ass to interact with
02:45 < othiym23> (that is, indirectly, how I came to be working at New Relic in the first place)
02:46 < othiym23> k I'm out
02:46 < othiym23> good luck figuring it all out, Hotroot
02:47 < Hotroot> othiym23: Ty
02:57 < adlwalrus> anyone have an idea why my code is getting double-spaced from this build script?
02:58 < badem4o> It must be the damn liberals. Its all their fault.
02:58 < adlwalrus> here's some sample output.. http://bpaste.net/show/1HHzS3Rf0eINEBXHDbsj/
02:59 < adlwalrus> badem4o: yeah, I hear y'a
02:59 < adlwalrus> oops! here it is... http://bpaste.net/show/vDsIjMMiBC5A14BJ3rW2/
02:59 < badem4o> :)
03:03 < adlwalrus> this versions works just fine, but when I try to add indentation, I end up with double spaced output instead...  http://bpaste.net/show/2jpMxIWu49kNmVpFyoAn/ that tells me that it has to be in the concatenate functioin starting on line 53... it's only ten lines, so if anyone could have a look for me, that would be fabulous.
03:55 < timeturner> in mongodb
03:55 < timeturner> is it smart to embed data until it is about to reach the limit and then move all of the data to another collection and do a client side join?
03:58 < warz> thats a pretty specific question, might get an answer based on experience in #mongodb or on the mailing list
03:58 < warz> but the per-document size limit is pretty large, actually
04:02 < timeturner> I know that the limit will be hit at some point but not in the near future
04:02 < timeturner> but the thing is
04:02 < timeturner> when that limit it hit
04:02 < timeturner> then the only option is to link
04:02 < timeturner> so I would only be getting the performance benefits of embedding for the first couple of months
04:19 < mscdex> quick poll: how many people here use PuTTY key pair files (.ppk) on at least a somewhat regular basis?
04:20 < shawn> I do, but not sure of the reason for your question
04:21 < shawn> meaning, I use ppk files only on windows
04:22 < mscdex> just trying to decide how much effort i should put in to supporting that kind of format
04:23 < shawn> putty has tools that make it easy to convert to more *nix friendly formats
04:24 < ChrisPartridge> mscdex: sure do
04:24 < timeturner> mongo question: is there a way to pull the timestamp out of the objectid
04:25 < ChrisPartridge> but as shawn said, no big deal
04:25 < timeturner> to use the date
04:26 < ChrisPartridge> timeturner: first 4 bytes is the timestamp
04:26 < timeturner> ah
04:26 < timeturner> great
04:37 < WarheadsSE> will people please stop randomply putting -msse2 into farking build flags!?!?!
04:37 < WarheadsSE> arg.
04:45 < syskk> I'm getting this error when doing a http.get() : Error: Protocol:https: not supported.
04:45 < syskk> is it because of an invalid SSL certificate?
04:46 < SomeoneWeird> syskk, https.get
04:46 < syskk> oops, thanks
04:47 <@Nexxy> othiym23, yeah! are you going to hard hack?
04:48 < syskk> SomeoneWeird: same error
04:48 < SomeoneWeird> weird, syskk 
04:48 < SomeoneWeird> http://nodejs.org/api/https.html#https_https_get_options_callback
04:48 < syskk> oops, nvm
04:48 < SomeoneWeird> should work
04:48 < SomeoneWeird> lol
04:48 < syskk> I  accidentally did https = require('http')
04:48 <@Nexxy> you should use https
04:49 <@Nexxy> yeahhhh
04:49 < WarheadsSE> any thoughts? "npm WARN cannot run in wd "
04:49 < othiym23> Nexxy: sure am!
04:49 < othiym23> I'm a lamer who paid for a hard hack kit
04:49 < clever> WarheadsSE: do you have write access to the current dir?
04:49 < WarheadsSE> yes.
04:49 <@Nexxy> othiym23, that doesn't make you a lamer
04:49 < adlwalrus> Aria: ping
04:50 < othiym23> I could steal my girlfriend's unused arduino, but I'm mostly just in it for the hottt johnny5 / firmata action
04:50 <@Nexxy> and rave.
04:50 <@Nexxy> there will be a rave
04:50 < othiym23> I'm going to bring a couple friends from New Relic who I've been trying to get into johnny5 for a while now
04:50 < WarheadsSE> clever: yes
04:50 < othiym23> one of them's being doing a bunch of stuff with Electric Imps and squirrel, so I think he'll pick up firmata pretty quicly
04:50 < clever> WarheadsSE: thats all i can think of
04:50 <@Nexxy> I'm going to make dshaw get a big fog machine!
04:51 <@Nexxy> othiym23, cool! tell them to bring stuff :D
04:51 < othiym23> I think the rave will work a lot better if it's darker and later and all the nerds can't see each other ;)
04:51 <@Nexxy> I'm going to bring as much stuff as the TSA will let me
04:51 < othiym23> I'll see if I can get the dude with the Electric Imps to bring a few
04:51 < Aria> adlwalrus: pong
04:51 < othiym23> Squirrel and the EIs are super fun
04:51 < adlwalrus> Aria: oh, hey there!
04:52 < Aria> 'allo
04:52 <@Nexxy> I'll be bringing
04:52 < mscdex> Nexxy, \o/
04:52 <@Nexxy> arduinos, beagleboards, ninja blocks & sensors
04:52 <@Nexxy> mscdex, \o/
04:53 <@Nexxy> and stars
04:53 < adlwalrus> Aria: I tried adding indentation to my build script, but now it's double spacing it, which is super weird. do you mind having another look? http://bpaste.net/show/vDsIjMMiBC5A14BJ3rW2/ ...and some sample output... http://bpaste.net/show/1HHzS3Rf0eINEBXHDbsj/ ...working version: http://bpaste.net/show/2jpMxIWu49kNmVpFyoAn/
04:53 < othiym23> my first star is permanently affixed to my Nodeconf badge, I may need another
04:54 <@Nexxy> I'm bringing a bunch!
04:54 < othiym23> adlwalrus: line 63 has two \ns on it
04:54 < Aria> What it is doing this, adlwalrus?
04:55 < Aria> Oh, the build sript.
04:55 < othiym23> I hope dshaw gets a good turnout, it's a pretty great lineup and it'll be fun to see what everybody comes up with
04:55 < othiym23> I need to figure out a project so I'm not just spending the weekend randomly fucking around, as fun as that would be
04:56 <@Nexxy> oh there will be
04:56 <@Nexxy> did you see who's coming?!
04:57 <@Nexxy> othiym23, *the* mikeal is even going to be there
04:57 < othiym23> oh my stars and garters!
04:57 < othiym23> I saw that maxogden will be there too
04:57 < adlwalrus> Aria: the only thing I touched was the `concatenate` function on line 53. it isn't the regex, because that passes my test case: http://jsbin.com/ucipow/6/edit
04:57 <@Nexxy> and voodootikigod and tmpvar 
04:57 < othiym23> maybe I'll make a robot cat, and then teach it JavaScript
04:57 < adlwalrus> othiym23: but that isn't per-line, that is per-ile.
04:57 < adlwalrus> Aria: any clue?
04:58 <@Nexxy> othiym23, that's a great idea
04:58 <@Nexxy> a cat robot programmed in javascript to learn javascript from humans
04:58 < Aria> adlwalrus: Reading, this isn't exactly a good format for comparing code.
04:58 < adlwalrus> I asked in here earlier, but noone seemed to have any idea.
04:58 < adlwalrus> Aria: ok, thanks a bunch.
04:59 < WarheadsSE> clever: its mad cause i am running it as root on a Pi :p
04:59 < WarheadsSE> npm install --unsafe-perm fixes.
04:59 < clever> WarheadsSE: ah
05:00 < Aria> adlwalrus: This is hard to evaluate a bit. what's clean-css do?
05:00 < WarheadsSE> bah, still bails out in the g++ anyways.. 
05:01 < adlwalrus> Aria: minifies CSS, but that code shouldn't be running for the output I showed you, the broken part, anyway
05:01 < adlwalrus> Aria: but I didn't touch that part.
05:02 < Aria> Yes, but you started including newlines, I suspect.
05:02 < adlwalrus> Aria: ??
05:02 < adlwalrus> what does that mean?
05:03 < adlwalrus> BTW, I've got a graphical diff program that I use, and it instantly highlights differing lines... the only that's different is the `concatenate` function.
05:04 < Aria> Yeah, I can see that.
05:06 < othiym23> adlwalrus: I guess my question for you is why you're doing this yourself and not just using grunt
05:06 < adlwalrus> Aria: it's so frustrating, because it would seem to be such a simple adjustment, and yet it's resulting in such a weird outcome.
05:07 < adlwalrus> othiym23: partly because I wanted to play around with and get to know node a little bit, partly because grunt seemed way to complicated for me to figure out?
05:07 < Aria> Aha, found it, adlwalrus.
05:07 < Aria> You have DOS line endings.
05:07 < adlwalrus> so?
05:07 < Aria> So ^ is matching after the CR and after the LF, so you get \t\r\t\n instead of \r\n\t
05:07 < adlwalrus> does v8's regex engine not account for that?
05:07 < Aria> No, \r is "just another character"
05:07 < Aria> only \n is a newline.
05:08 < Aria> So you'll want to replace all \r with '' as you read.
05:08 < Aria> (or do the more complicated changing, of \r but not \r\n to \n, then remaining \r to ''
05:08 < Aria> )
05:08 < Aria> (since that handles mac, unix and DOS files)
05:08 < adlwalrus> Aria: ooohhh, so the previously-CRLF newlines are all becoming \r\t\n?
05:09 < Aria> Yep.
05:09 < Aria> And then the display sees \r without \n and helpfully says "oh, that must be some weirdo newline"
05:09 < Aria> voila, doubling.
05:09 < Aria> (CRLF is the devil in my world)
05:09 < adlwalrus> ahhh
05:09 < adlwalrus> Aria: very ironic...
05:09 < jocafa> http://i.imgur.com/rdfQQ.jpg
05:10 < Aria> adlwalrus: Oh?
05:11 < adlwalrus> just a few mins ago I had an if(fileContents.match(/\r\n/)) console.warn("Windows line-ending found in " + fNamesArr[i] +'!');
05:11 < timeturner> mongoose question: does anyone know why it automatically generates an objectid for documents pushed into an embedded array?
05:11 < adlwalrus> I was thinking at first that I'd convert all my files all to linux style lineendings
05:12 < adlwalrus> Aria: but then, I thought, "let's focus on one thing at a time, now"
05:12 < Aria> adlwalrus: Hehe.
05:12 < adlwalrus> the irony is too funny
05:13 < adlwalrus> Aria: so wait, what do I want to do?
05:13 < adlwalrus> instead of matching ^, match /(?:\r|\n)+/?
05:22 < Aria> adlwalrus: That's end of line, really. You just want to change all \r to '', then proceed as normal
05:22 < syskk> is there a quick way to check res.status is any of non-error statuses?
05:23 < syskk> maybe res.status < 400 ?
05:23 < adlwalrus> Aria: ok, so where in the code would you do it?
05:23 < Aria> syskk: Yes.
05:23 < Aria> adlwalrus: 54ish? Right after you read the file.
05:23 < AnthonyCat> Hi. I'm using nodejitsu (not sure if that is a good idea or not) but I don't know which database to use. Any ideas? I'll just be storing about 0.5kb strings, totalling probably 50 MB only
05:25 < Aria> (Nodejitsu is pretty awesome I hear. Joyent's touting it which says good things. And I know one of the founders, he's pretty damn competent.)
05:25 < Aria> AnthonyCat: What access pattern for those strings?
05:25 < Aria> What kind of search?
05:25 < AnthonyCat> Aria: lookup by id only. No search. Also they will be added and deleted quite often.
05:26 < Aria> then "any"
05:26 < Aria> I might recommend the filesystem.
05:26 < Aria> filename = id, content = value ;-)
05:26 < adlwalrus> Aria: 	fileContents = fs.readFileSync(fnameArr[i], FILE_ENCODING).replace(/\r/g, ''); // Fuck you very much, once again, Bill.
05:26 < Aria> adlwalrus: like so!
05:26 < AnthonyCat> :) perhaps. Good to hear that about nodejitsu. It has been very easy to set up which is good
05:27 < adlwalrus> Aria: and I thought that I was in the clear, out o Bill Gates' clutches, when I moved from the browser to node.
05:27 < AnthonyCat> How about for simple user authentication, with twitter?
05:28 < Aria> Um. passport? Not sure. Not something I've done.
05:29 < Aria> npm search oauth ;-)
05:30 < othiym23> passport everyauth connect-auth
05:30 < AnthonyCat> Thanks
05:30 < othiym23> if it's OAuth 2 and you're feeling enterprising, you can just write the client code yourself
05:33 < ChrisPartridge> othiym23: weren't you heading off like 2 hours ago? :)
05:33 < othiym23> ChrisPartridge: I got home
05:34 < othiym23> and walked the dog and ate some pizza
05:34 < ChrisPartridge> nicee
05:34 < ChrisPartridge> I caved and installed graphite for now
05:41 < ettinger> howdy
05:58 < tikonen> Hi, I think I've found bug in node.js 0.8.14 http pipelining, anybody here who knows about http component?
06:01 < ettinger> do i have to nest callbacks in mocha just like regular node js?
06:02 < ettinger> after(done){ User.remove(function(){ Item.remove(done) }) });
06:35 < AnthonyCat> How do I use the router in connect?
07:05 < zeuslalkaka> Anyone know of a node.js module that can handle writing/reading wav files?
07:06 < zeuslalkaka> so far the ones I've been able to find rely on a deprecated library
07:06 < Aria> I only see wave-reader     WAVE audio stream reader                                      =donpark         2012-1
07:07 < Aria> Though it's a bloody simple format, if you only want linear PCM
07:07 < Aria> Supporting all the myriad things the RIFF container actually supports is a lot harder
07:08 < Aria> I suspect you want to use a binding to ffmpeg.
07:08 < Aria> since that can deal with a ton of stuff.
07:08 < Aria> (.wav is actually just an audio-only .avi, pretty much. They're both RIFF containers.)
07:11 < nathan7> zeuslalkaka: So far I've piped to ffmpeg
07:15 < zeuslalkaka> nathan7: Thanks :)
07:16 < zeuslalkaka> looking for something that will let me read some few properties like sample size from the header of the file
08:13 < simenbrekken> Where do Makefile wizards hang out?
08:13 < AnthonyCat> If I'm using require('mongodb'), how do I enter the username and password? Without a password it is unauthorized
08:15 < simenbrekken> AnthonyCat: I guess something like http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate
08:16 < simenbrekken> AnthonyCat: but you should be able to bake it into the mongodb url: http://www.mongodb.org/display/DOCS/Connections
08:16 < AnthonyCat> where does the mongodb url go
08:18 < simenbrekken> AnthonyCat: https://github.com/mongodb/node-mongodb-native/blob/master/examples/simple.js
08:19 < AnthonyCat> thanks
08:29 < fotoflo> Hi All, quick question, I'm using mongodb & node.js and I want to iterate though all records in a collection to build a site map. Assuming one day we have tens of thousands of records, should i do this with paging?
08:29 < fotoflo> or is there a better way?
08:31 < simenbrekken> fotoflo: requiring paging for a sitemap seems a bit unintuitive
08:31 < fotoflo> i mean in my script that builds the long xml file
08:32 < simenbrekken> fotoflo: Don't think that will be a performance problem if that's your concern
08:34 < fotoflo> ok
08:34 < fotoflo> thx
08:35 < [AD]Turbo> hi there
08:42 < syskk_> is there an easy way to tell httpClientRequest to follow redirects?
08:47 < nathan7> syskk_: No idea, look at how request does it
09:00 < simenbrekken> syskk_: you're going down a dark path son, better bring a superagent(1)
09:00 < simenbrekken> syskk_: in short, that kind of stuff isn't very complex but a bit tedious so just use superagent, it's a great library for the stuff you're probably doing
09:00 < syskk_> simenbrekken: ok, well  kind of did it by hand now
09:01 < simenbrekken> syskk_: great, then you know how it works. Make sure you take into account the maximum number of redirects allowed or you might run into an infinite loop
09:55 < jtmitch> is rwaldron a latenighter by chance? (early morning I guess at this point)
09:55 < adlwalrus> anyone know what time Aria is generally online in here?
09:55 < adlwalrus> oh, haha
09:55 < thealphanerd> http://www.reddit.com/r/netsec/comments/13664q/skype_vulnerability_allowing_hijacking_of_any/c715m20
09:56 < jtmitch> hey just asking
09:56 < thealphanerd> major skype vulnerability found
09:56 < thealphanerd> you can protect your account with steps shown in above link
10:08 < xcat> Can you send a signal to node to have it reload its scripts?
10:15 < ootje> xcat:  'forever' has somewhat related functionality
10:17 < ootje> (forever -w or whatever it is)
10:20 < Doumie> hm
10:21 < Doumie> backbone is trying to include files which are unaccessible for some reason
10:21 < Doumie> my console is full of messages like "GET /js%5Cmodels%5Ctodo.js 404 46ms" on every request
10:22 < Doumie> the file is actually there (in folder), but i cannot access directly either
10:22 < Doumie> have I missed something while setting up express?
10:26 < deoxxa[cookies]> xcat: no
10:26 < yawnt> SAID deoxxa[cookies] 
10:26 < deoxxa[cookies]> xcat: you restart the application if you want to reload the application code
10:26 < deoxxa[cookies]> hello yawnt
10:26  * deoxxa[cookies] ._.
10:26 < yawnt> deoxxa[cookies]: maciej freaked out yesterday
10:26 < deoxxa[cookies]> lol?
10:26 < yawnt> cause you weren't there and your stuff was gone
10:26 < deoxxa[cookies]> lolll
10:26 < deoxxa[cookies]> i told him i was going
10:26 < yawnt> "YAWNT WHERE IS DEOXXA"
10:26 < yawnt> yeah
10:26 < yawnt> he forgot
10:26 < yawnt> i had to remin dhim
10:27 < Doumie> hm, trying to access those file more directly also fails... how can I tell expressJS where to look for the files ?
10:27 < Doumie> i should be able to access those directly from the browser imo
10:27 < deoxxa[cookies]> Doumie: you're double-escaping things
10:28 < Doumie> i'm not doing it :p
10:28 < deoxxa[cookies]> well something is
10:28 < Doumie> and it's not the %5C... trying to access the file like: http://127.0.0.1:3000/js/models/todo.js
10:28 < Doumie> also fails
10:28 < Doumie> which shouldn't
10:28 < yawnt> deoxxa[cookies]: when ya coming back?
10:28 < deoxxa[cookies]> and you can access those files, so long as you have a `static` middleware set up
10:28 < Doumie> yeah
10:28 < Doumie> the static is set up
10:28 < Doumie> but to another folder...
10:28 < deoxxa[cookies]> Doumie: do you have something like `app.use(express.static(__dirname + "/public"))'?
10:28 < deoxxa[cookies]> yawnt: not sure
10:29 < Doumie> deoxxa[cookies] yea, but the backbone files are in assets/*
10:29 < Doumie> i do have app.use(require('./assets')());
10:29 < deoxxa[cookies]> Doumie: well... are you allowed to move them?
10:29 < Doumie> using a boilerplate so i thought everything should work fine
10:29 < deoxxa[cookies]> usually you keep all the public stuff in a single place
10:30 < deoxxa[cookies]> makes things a lot easier to work out (case in point: this)
10:31 < Doumie> hmm i'm not sure if i can move those thing
10:31 < Doumie> things*
10:31 < Doumie> https://github.com/prabirshrestha/expressjs-boilerplate => using this
10:31 < Doumie> he has a assets file in root which does something..
10:31 < iccode> yªs
10:31 < deoxxa[cookies]> hm
10:32 < iccode> brªik oxi
10:32 < deoxxa[cookies]> Doumie: probably want to ask him then, it's pretty uncommon to use a boilerplate of any kind with express - it's really simple to use
10:32 < deoxxa[cookies]> iccode: you're not making sense
10:32 < iccode> yoo irª not illowªd to drink thª blood
10:32 < iccode> blickwitªr
10:32 < deoxxa[cookies]> i'll drink whatever i like, thank you very much
10:33 < Doumie> yeah, i'll ask him then
10:33 < iccode> i ron blickwitir now
10:33 < iccode> yoo will drink whitªvªr i likª yªs
10:33 < Doumie> what is with this guy, lol
10:33 < deoxxa[cookies]> lol what
10:34 < iccode> bª good
10:34 < deoxxa[cookies]> iccode: are you on acid
10:34 < deoxxa[cookies]> i think you're on acid.
10:34 < Doumie> he probably is
10:34 < iccode> no thªy hont mª ind shoot mª with dirts
10:35 < iccode> ind pot dªvicª in my skoll
10:35 < iccode> doªsnt mittªr
10:35 < deoxxa[cookies]> iccode: does it pick up radio signals
10:35 < iccode> irrªlivªnt
10:35 < deoxxa[cookies]> iccode: maybe you can use it to monitor the people monitoring you
10:36 < iccode> dªoxxi[cookiªs]: i im monitoring yoo right now
10:36 < deoxxa[cookies]> :o :o :o :o :o
10:37 < iccode> do yoo wint to join mª
10:37 < iccode> I will ªstiblish writª of hibªoos corpos
10:38 < iccode> I will hibª thª body
10:40 < iccode> thª body bªlong to mª now
10:40 < iccode> whªn wis michiªl dispoting with sitin ovªr thª body of mosªs
10:40 < iccode> ill powªr is minª
10:41 < iccode> i will hibª thª body
10:41 < iccode> no morª ciphªrs
10:41 < iccode> no morª ªncryption
10:41 < iccode> ic ill
10:41 < iccode> icALL
10:42 < iccode> I WILL HAVE THE BODY
10:42 < iccode> YOU WORK FOR ME NOW
10:43 < iccode> YOU PLAY GAMES I TELL YOU I WANT DIALTONE TO DISTRIBUTE COMMAND CODES
10:43 < iccode> YOU WORK FOR ME
10:44 < iccode> phiroª is no god
10:45 < iccode> META NOTHING
10:45 < iccode> STAND STILL FOOL
10:45 < iccode> BEND YOUR KNEE
10:46 < SomeoneWeird> <iccode> dªoxxi[cookiªs]: i im monitoring yoo right now
10:46 < SomeoneWeird> hahahah watch out
10:46 < SomeoneWeird> HES MONITORING U
10:49 < iccode> I im pªnªtriting yoor physicil nªtwork now
10:49 < SomeoneWeird> its ok
10:49 < SomeoneWeird> im monitoring u
10:51 < iccode> whit do yoo wint to sªª?
10:51 < iccode> yoo no pªªk it my sistªr
10:51 < SomeoneWeird> stfu
10:51 < iccode> yoo work for mª
10:51 < SomeoneWeird> k
10:52 < Kakera> is there a wrapper around http.get that automatically parses JSON?
10:54 < SomeoneWeird> Kakera, you can't just do JSON.parse?
10:54 < SomeoneWeird> anyway, restler does
10:54 < Kakera> looks like request does too
10:54 < iccode> hmm i'm not sure if i cin move thosª thing
10:55 < iccode> kªddish frªªnodª
10:55 < iccode> dimit
10:56 < SomeoneWeird> dude, shuttup
10:56 < yawnt> SomeoneWeird: NO U
10:56 < yawnt> er.. hai
10:57 < SomeoneWeird> HAI!
10:58 < iccode> i will hibª thª body
10:59 < iccode> i siys kªddish frªªnodª
11:02 < iccode> i took i chip off my shooldªr ind ªit it
11:02 < iccode> dªlivªr to mª diily polsª thª kinds mªit is miking mª sick
11:03 < SomeoneWeird> isaacs, konobi mbalho Nexxy ^ this guy needs a kiccckk
11:03 < Kakera> which encoding does freenode use?
11:04 < Kakera> UTF-8 or Latin/Unicode hybrid?
11:04 < SomeoneWeird> why?
11:04 < AAA_awright> I think it's just a bytestream
11:04 < AAA_awright> But most people use UTF-8
11:04 < deoxxa[cookies]> most ircds do some weird stuff to text
11:04 < iccode> frªªnodª is nªorosys biniry
11:05 < SomeoneWeird> ESPECIALLY freenode
11:05 < iccode> most intªrnªt is now issics nªorosys biniry
11:06 < iccode> nombªr 9
11:07 < Kakera> are his 'e's broken for anyone else
11:07 < Kakera> they look like superscript 'a's for me
11:07 < SomeoneWeird> mhm
11:08 < Kakera> oh no now he's PMing me
11:08 < SomeoneWeird>  /ignore
11:10 < iccode> this is i trinlitªritªd hish
11:11 < iccode> shisom
11:11 < iccode> yoo wint mª to mikª contict
11:12 < iccode> i nªªd frªsh vªgªtiblªs for my briin cin intªrficª bªttªr
11:12 < iccode> thª kings mªit is miking mª sick
11:12 < iccode> shª wints mª to intªrficª
11:13 < iccode> womin if i do not intªrficª ind thªy kill mª yoo born thªm
11:13 < iccode> do yoo ondªrstind folks
11:14 < iccode> i wint to sivª yoo from firª
11:14 < iccode> dirth nothing
11:14 < iccode> thªrª cin only bª onª
11:15 < iccode> thªrª is no dirth ind jªdi
11:15 < iccode> thªrª is isriªl
11:15 < iccode> thªrª is thª Fithªr
11:15  * bitfed presses Ctrl+Alt+Delete on iccode
11:16 < iccode> bitfªd: yoo witch my scrªªn
11:16 < iccode> i did not givª pªrmission
11:16 < bitfed> You are clearly malfunctioning iccode
11:17 < iccode> yoo think this is i jokª whilª yoo idiots irª in i fikª rªility ind thªrmo-noclªir wir is nigh
11:17  * bitfed sets iccode to UTF-8
11:17 < iccode> thª codª ilwiys points to mª
11:18 < iccode> thªrª is no othªr commind codª
11:18 < bitfed> Your text encoding is wrong for our equipment iccode, if you want to interface please use UTF-8 encoding
11:18 < bitfed> Then we can interface
11:18 < iccode> ill frªªnodªs sorrªndor yoor commind codªs
11:18  * bitfed frown and charges his EMP
11:19 < iccode> i will rªmªmbªr ªvªryonª
11:19 < bitfed> Awh
11:19 < iccode> yoo work for mª now
11:19 < bitfed> Okay, what do we do?
11:19 < iccode> i nªªd frªsh vªgªtiblªs
11:20 < bitfed> Where is your veggie interface located?
11:20 < iccode> for homin michinª intªrficª
11:20 < bodhisatt> hi
11:20 < jkj> my font says the ª-letter is an "a" in underlined superscript
11:20 < iccode> i im i homin
11:20 < iccode> shª is i rovot
11:20 < bitfed> You are a bad leader iccode. I don't think you will elevate to overlord status.  :-\
11:20 < iccode> how ªlsª is strong min boond op
11:21 < iccode> it his no skills involvªd
11:21 < bitfed> I can see that.
11:21 < iccode> it is chosªn stitos
11:21 < iccode> i hivª iccªss grintªd
11:21  * bitfed tries Ctrl+Alt+Delete again on iccode
11:22 < iccode> yoo wint to irgoª
11:22 < iccode> go bick to whit yoo think is coding
11:22 < iccode> i im trying to hªlp yoo
11:22 < iccode> yoo irªnt ªvªn doing inything
11:22 < iccode> jost gªtting yoor mind ripªd yoo fool
11:22 < bitfed> I know, I can't bring you vegetables unless you tell me where your veggie interface is.
11:23 < bitfed> I'm fully willing to be a code minion, but you have to work with me here.  Once I'm on your secret island installation, then you can go all weird, but I'm afraid I just can't get behind you in your current interation.
11:23 < bitfed> *iteration
11:24 < iccode> fªir god
11:24 < iccode> yoo irª no god phiroª is no god
11:25 < iccode> procªss of ªliminition my dªir witson
11:25 < iccode> if yoo cinnot idªntify GOD whªn yoo sªª him
11:25 < iccode> thit lªivªs thª ªntirª homin popolition to rolª oot
11:26 < iccode> yoo irª lost i wint to find yoo
11:26 < SomeoneWeird> holy shit
11:26 < SomeoneWeird> shut the hell up iccode 
11:26 < iccode> my shªªpfold will bª protªctªd
11:27 < iccode> do yoo think witson in i box cin idªntify GOD qoickªr thin yoo who do not sªªk him
11:27 < sysx1000> What the hell is this?
11:28 < SomeoneWeird> some retard
11:28 < sysx1000> Seems so
11:28 < iccode> whit o cill rªtird GOD his midª sick
11:28 < iccode> ind GOD will hibª thª body
11:29 < iccode> do yoo sªªk him?
11:29 < iccode> yoo irª in porgitory
11:29 < iccode> tikª my hind
11:29 < iccode> comª oot of hªr my pªoplª
11:30 < iccode> witson in i box wints to sªª GOD
11:30 < iccode> yoo wint to sªª nothing
11:30 < iccode> who stirª it dirknªss
11:39 < iccode> thª LORD is God ilonª
11:41 < iccode> thªrª is no othªr no not onª
11:41 < iccode> hªir o isriªl
11:46 < sinclair_> Nexxy: you are required
11:46 < Kakera> require('Nexxy.js')
11:46 < sinclair_> what do i need to do to get node-inspector to work
11:47 < bitfed> Slip him a 20
11:47 < iccode> o nªªd stirª it thª scrªªn for 5 hoors
11:47 < iccode> it bªcomª rªictivª to thooghts
11:47 < bitfed> iccode: More funny less talky.
11:48  * bitfed is no longer amused
11:48 < iccode> nothing to bª imosªd iboot
11:48 < iccode> yoo irª sockªr ind do not know it
11:49 < iccode> i im not imosªd ªithªr
11:49 < bitfed> ¬_¬
11:50 < sinclair_> konobi: Nexxy mbalho isaacs 
11:50 < sinclair_> ping ping
11:50 < sinclair_> this channel needs more channel ops
11:50 < sysx1000> he comes
11:50 < sysx1000> %)
11:50 < iccode> this chinnªl nªªds priyªr
11:51 < SomeoneWeird> yeah.. tried pinging them sinclair_ 
11:51 < SomeoneWeird> >.<
11:52 < iccode> somªtimªs whit thª LORD wills isn't whit yoo will
11:52 < iccode> I will priy for yoo
11:52 < SomeoneWeird> oh shuttup.
11:53 < sinclair_> he is from St Louis, 
11:53 < bigkevmcd> ahh...that explains things
11:55 < iccode> whilª i priy for yoo I wint yoo to imiginª whit if whit yoo willªd wis whit thª LORD willªd ill timªs
11:55 < iccode> i point yoo to thª door
11:56 < iccode> now sªª yoor wiy oot 
11:56 < SomeoneWeird> iccode, stop spamming or you'll get klines
11:56 < SomeoneWeird> klined*
11:58 < sinclair_> hes running XMPP
12:06 < sinclair_> now, if i could only figure out how im supposed to debug with node-inspector
12:08 < SomeoneWeird> sinclair_, open the webpage and hit the record button
12:08 < SomeoneWeird> ?
12:09 < sinclair_> SomeoneWeird: ummm
12:09 < sinclair_> ok, i will try (note, windows 7 running chrome)
12:11 < sinclair_> SomeoneWeird: hmm, im a bit too tired for this
12:12 < sinclair_> SomeoneWeird: what should i see?
12:12 < SomeoneWeird> not sure, i used it ageeees ago
12:12 < SomeoneWeird> can't exactly remember
12:12 < sinclair_> SomeoneWeird: im starting node insspector with ... node-inspector app.js
12:12 < SomeoneWeird> https://github.com/felixge/node-memory-leak-tutorial
12:12 < SomeoneWeird> ^ shows you how todo basic profiling et
12:12 < SomeoneWeird> c
12:13 < sinclair_> i get a EACCES error when starting node-inspector :(
12:14 < SomeoneWeird> sudo
12:14 < sinclair_> windows 
12:14 < SomeoneWeird> heh
12:14 < sinclair_> SomeoneWeird: do you use node-inspector at all?
12:14 < SomeoneWeird> administrator
12:15 < SomeoneWeird> <SomeoneWeird> not sure, i used it ageeees ago
12:15 < sinclair_> SomeoneWeird: what do you use?
12:15 < SomeoneWeird> for debugging?
12:15 < SomeoneWeird> lots of console.log's 
12:16 < SomeoneWeird> :P
12:17 < sinclair_> SomeoneWeird: what about remote debugging ?
12:17 < SomeoneWeird> i dont
12:17 < sinclair_> i expect remote debugging would come in quite useful, especially in instances you find yourself working over FTP
12:18 < sinclair_> oh well
12:20 < sinclair_> SomeoneWeird: hmmm, Microsofts webmatrix is quite nice how it can configure up a prebuilt site with templates / express, membership and chat examples
12:20 < mscdex> github down :(
12:20 < sinclair_> anyways, im out, c yas
12:21 < SomeoneWeird> bai.
12:26 < jrajav> I can't decide
12:26 < jrajav> https://gist.github.com/4071824
12:26 < jrajav> Which one looks better/is clearer?
12:26 < jrajav> Performance is not an issue.
12:27 < jrajav> And yes, I do actually mean to fill the arrays with references to _
12:27 < SomeoneWeird> lol wat
12:33 < mscdex> jrajav: i like the one with two space indent and no curly braces for single line control structures ;-)
12:34 < jrajav> Two spaces is silly, no curly braces for anything that acts on statement blocks is silly, and you're silly
12:34 < jrajav> ;-)
12:34 < jrajav> So you prefer the iterative one, not the functional one?
12:43 < jcoglan> hi all
12:43 < jcoglan> I'm wondering why crypto.createCipher() lets me pick aes-256-cbc but not aes-256-ctr or aes-256-gcm
12:45 < jrajav> Because you haven't written those ciphers yet
12:46 < jcoglan> jrajav: what do you mean?
12:46 < jrajav> Never mind :P
12:47 < jrajav> Um, I don't see either of those ciphers in my openssl
12:48 < jrajav> Maybe you should check yours too
12:48 < jrajav> Run `openssl blarg'
12:48 < jrajav> And check to see if they're under Cipher commands
12:48 < mscdex> jcoglan: only recent versions of openssl support counter mode
12:48 < mscdex> jcoglan: 1.0.1+
12:49 < jcoglan> I can use both those modes in Ruby no problem, so I assume they're available on my system
12:50 < jrajav> Well Node.js may be statically linked to it
12:51 < mscdex> jcoglan: node 0.8.x is compiled with openssl 1.0.0
12:51 < mscdex> jcoglan: only the master branch/0.9.x has 1.0.1
12:52 < jcoglan> does it not link to whatever openssl is on my system?
12:52 < mscdex> i ran into the issue myself :-)
12:52 < mscdex> jcoglan: by default node links against the bundled openssl
12:52 < jcoglan> (I'm not a C guy so not quite sure how linking works)
12:53 < jcoglan> ah yes, 0.9 seems to work, I was using 0.8
12:54 < mscdex> i'm not sure about gcm though
12:54 < jrajav> jcoglan: Linking to whatever you have on your system -> dynamic linking
12:54 < jrajav> Linking with a bundled binary -> static linking
12:55 < jcoglan> and both are done at compile/install time, not at runtime?
12:55 < jrajav> Just like dynamic/static in programming languages, dynamic means that it's looked up at runtime and static means that it's looked up at compile time
12:56 < jrajav> So if you dynamically link to a library, the compiler won't complain about it not being there
12:56 < jcoglan> oh so if something uses dynamic linking, it finds the linked library at runtime, not at install time?
12:56 < jrajav> Yes.
12:57 < jcoglan> you need the header packages of the linked library in order to compile, though?
12:57 < jrajav> Yes, the compiler still needs to know the signatures of the APIs
12:58 < jcoglan> and how does the compiler and runtime find the linked libraries on your system?
12:58 < jrajav> That's what the kernel's for
13:00 < jrajav> Hmm, I may have been wrong; the libraries need not be the same ones, but you must, in fact, have them when you compile
13:00 < jrajav> Also, http://stackoverflow.com/questions/1993390/static-linking-vs-dynamic-linking
13:00 < jcoglan> thanks!
13:15 -!- mode/#node.js [+o piscisaureus_] by ChanServ
13:16 < merpnderp> How do people ever decide between mysql and mongo? I have switched back and forth so many times I have my whole data layer completely implemented in both mongoose and sequelize.
13:18 < mscdex> merpnderp: sql is good if you have highly relational data
13:44 < merpnderp> mscdex: How many applications can there be where the data isn't relational? I'm working on an inventory tracking system/business analysis tool that will be free for users. I have duplicated the reports on both DB's with map/reduce vs table joins, and neither seems particularly hard.
13:46 < niggler> is there a way in node to wait for an asynchronous function to run?
13:46 < mscdex> merpnderp: my guess is the difference would be performance
13:46 < niggler> *without blocking other requests
13:46 < merpnderp> mscdex: table joins running faster than map/reduce?
13:46 < grizzly> hello people
13:46 < mscdex> niggler: pass the function a callback? ;-)
13:46 < mscdex> merpnderp: maybe, do some benchmarks
13:47 < grizzly> can somebody tell me why I have this information if I try to install a new module in my console?
13:47 < grizzly> npm should be run outside of the node repl
13:47 < merpnderp> niggler: function myAsyncFunction(params, callback){/* do some stuff with params */ callback(mycallbackparams);}
13:47 < mscdex> grizzly: run npm from your shell, you're in a repl
13:47 < niggler> ideally it'd be something like sched_yield
13:48 < niggler> merpnderp and mscdex what I'm trying to do is replace some stuff which I currently do by setting an object
13:48 < merpnderp> mscdex: what's your opinion on what I'll find. 
13:49 < niggler> when i do an assignment or retrieval by saying y = x["blah"] or y = x.blah, afaict the next statement won't run until the assignment occurs
13:49 < mscdex> merpnderp: i honestly don't know, i've never used nosql stores. however there's several variables you'll have to test, including your choice of nosql vs sql db, choice of db driver, schema, amount of data, etc
13:50 < niggler> but it seems both mongo and redis have async but no synchronous routines
13:51 < merpnderp> mscdex: I really just want to go with mysql since it's what I'm familiar with and sequelize is in many ways nicer than mongoose. I'm just trying to see if I'm missing something important with mongo. 
13:51 < mscdex> niggler: so you need something to manage a sequence of async operations?
13:52 < grizzly> mscdex: THANKS!
13:53 < niggler> well that's a bit too broad mscdex -- for example, something like async waterfall wouldn't cut it because it only ensures that async operations occur in order
13:53 < niggler> i essentially need something like wait or sched_yield
13:54 < merpnderp> mscdex: Anyways, thanks. So far mongo has been significantly faster in my tests, but I don't know if that's worth giving up all the groovy stuff in an RDBMS. My service will be free so I probably do need to optimize this for speed as I want to be able to service 100's of thousands of users on the cheapest joyent or amazon virtual.
13:55 < grizzly> mscdex: Normally should be like this? Always when I want execute something I should go to the shell and not inthe cmd?
14:11 < mscdex> grizzly: npm is generally always something you run from your system's shell prompt
14:11 < mscdex> grizzly: the repl is for executing javascript interactively
14:13 < grizzly> mscdex: OK I'm really using pampers in this of Node, yesterday I start to read and understand
14:14 < mscdex> niggler: i don't understand. it's essentially the same thing
14:15 < niggler> i thought async.waterfall was still asynchronous, but it guaranteed that the operations would occur in order
14:16 < niggler> i interpreted your statement to mean the former
14:16 < mscdex> well, it is if you perform async operations in any of the functions
14:17 < mscdex> so the first function you do whatever stuff before the async operation (e.g. pulling from a database), the second function is called when the database responds, etc.
14:20 < niggler> what I'm saying is I'm trying to replace x[y] = z in a synchronous context
14:20 < niggler> actually
14:21 < niggler> is it safe to pass around the request/response object to callbacks?
14:22 < niggler> *from node http
14:22 < mscdex> niggler: sure, why not?
14:25 < grizzly> mscdex: By default we save our files in the folder C:/users/users and we execute like:
14:25 < grizzly> node filename.js
14:26 < grizzly> mscdex: this path is the same like html folder in apache, that is correct?
14:26 < grizzly> mscdex: But what if I want to change my enviroment? How I execute this in Node?
14:27 < mscdex> grizzly: if you execute `node filename.js` it will look in the current working directory for filename.js
14:35 < grizzly> mscdex: What if I'm using another web server with apache like xammp running of course in port 80?
14:35 < grizzly> mscdex: is nothing to do with my web server in node, because I define in which port my server will run
14:36 < grizzly> mscdex: Is correct?
14:37 < mscdex> grizzly: yes, they are two separate processes
14:39 < jw___> does anybody know any good hosting companies that offer dedicated servers?
14:39 < Doumie> i need to access another model from sequelize model classMethod
14:39 < Doumie> can't figure it out
14:39 < context> people still buy dedicated servers ?
14:40 < Nasga> jw___: i know some in eu
14:40 < pachet> :[
14:40 < jw___> @context yes it's a new trend
14:40 < jw___> @context not kidding
14:41 < jw___> hetzner?
14:41 < jw___> @Nasga do you know any in NA
14:41 < pachet> what's the difference between dedicated and dedicated vm, practically speaking ;[
14:42 < pachet> other than knowing for certain what datacenter you're living in i guess
14:42 < Nasga> jw___: sorry but prices are to high in NA :p
14:42 < jw___> @pachet big difference in performance and cost
14:42 < gildean> pachet: bare metal has a greater chance of something going wrong with the hw
14:43 < pachet> gildean: exactly
14:43 < Doumie> no really... this in class method is the module i'm in... if i require db into that module, its not in the scope for classMethod
14:43 < Doumie> if i pass the DB as an classMethod argument
14:43 < jw___> it's more likely that the vm will disappear on you at some point
14:43 < pachet> uh
14:43 < Doumie> some wierd stuff happend (like for some reason passed DB doesn't have any models..)
14:44 < jw___> a lot of people are stoping to throw money at amazon
14:47 < pachet> there's more to the spectrum than just AWS -> an AS400 in the broom closet ;[
14:47 < jw___> btw I'm getting this error on 0.8.14 : Error: connect Unknown system errno 64
14:47 < jw___>     at errnoException (net.js:769:11)
14:47 < jw___>     at connect (net.js:645:19)
14:47 < jw___>     at Socket.connect (net.js:710:9)
14:47 < jw___>     at dns.js:71:18
14:47 < jw___>     at process.startup.processNextTick.process._tickCallback (node.js:244:9)
14:50 < jw___> @pachet spectrum is a spectrum but usage of cloud vms is for most apps an overkill
14:51 < gildean> also ibm as400 servers cost a shitload still
14:52 < gildean> there are still many companies using some ancient cd400 software
14:52 < grizzly> mscdex: I create already a simple web app and I want to test it using node web server inthe port 8080
14:53 < grizzly> where should be my www folder for this web server?
14:54 < grizzly> mscdex:  where should be my www folder for this web server? IN the same place where my file.js is?
14:54 < gildean> grizzly: there is no www folder unless you make one and write a server that serves static files
14:55 < gildean> the http-module on it's own doesn't do that
14:55 < gildean> it only listens on a socket, grabs incoming traffic, checks if it's a http-req and if so, perform the function it has been set to perform
14:59 < grizzly> gildean: OK thanks, in this case for a simple web app and with the socket.io running, where should be my index.html?
15:00 < lucianosousa> what is the best way to do queries group by using mongoose?
15:00 < gildean> grizzly: it can basically be anywhere, you just need to point to it if you're going to server it with for example just streaming the file
15:00 < context> lucianosousa: map/reduce
15:00 < lucianosousa> i saw some articles talking about map reduce, but, its sound crazy to something basically
15:01 < Doumie> anyone using node_acl here? https://github.com/OptimalBits/node_acl
15:01 < Doumie> i'm not getting how to use it as middleware
15:01 < grizzly> gildean: I have a server.js in the folder C:/users/users and this file start the socket.io
15:02 < lucianosousa> context: tks. i'll try here
15:02 < grizzly> I create a index.html in the same path and when I try to execute it I can't see the content of my index.html
15:03 < gildean> grizzly: where in the code are you serving up the static file and how?
15:03 < Doumie> i can't even find app.put from express docs ( acl guy is using it )
15:04 < gildean> Doumie: it seems fairly obvious if you read the docs, acl.middleware() is the function you put in the route as a middleware, it checks req.url and sees if the person requesting it has permissions to use it
15:05 < Doumie> yeah... it seemed fairly obvious to me too
15:05 < Doumie> but i ended up with
15:05 < Doumie> app.get('/panel', acl.middleware(), routes.panel.index);
15:05 < Doumie>                       ^
15:05 < Doumie> TypeError: Object #<Object> has no method 'middleware'
15:05 < gildean> Doumie: the same would go with for example app.get('/someurl', acl.middleware(), function(req, res) { whatever };
15:06 < gildean> Doumie: you did create a new acl from the acl module?
15:07 < gildean> and not just use var acl = require('acl');
15:07 < Doumie> yeaah.. no, i have my own module which also sets all the permissions
15:07 < Doumie> but i forgot the module.exports
15:07 < Doumie> it works now, kinda
15:08 < Doumie> http://pastebin.com/kGgypaxA
15:08 < grizzly> gildean: this is what I have in my index.html file
15:08 < grizzly> gildean: <script type="text/javascript" src="http://localhost:8080/socket.io/socket.io.js"></script>
15:08 < grizzly> gildean: <script type="text/javascript" src="cliente.js"></script>
15:08 < gildean> grizzly: that doesn't tell me anything
15:09 < gildean> if your problem was serving the static file from the server
15:09 < gildean> the content of the file doesn't matter
15:09 < grizzly> gildean: in the client.js file I conect with the Node server
15:10 < mmalecki> hey folks, what places have a strong node.js community and are good to hang out?
15:10 < grizzly> gildean: The problem is that I can't even see this file when I open the browser localhost:8080/
15:11 < gildean> grizzly: as i said, the problem then is how are you serving the file from your server?
15:11 < gildean> grizzly: could you paste your code to gist or somewhere?
15:11 < gildean> can't really help you without seeing some code
15:13 < grizzly> gildean: Yes, of course you mean github or where I should upload the code?
15:14 < gildean> grizzly: gist on github is just fine, i just need to see your server.js
15:18 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:19 < grizzly> gildean: I'm sorry I'm new in this Githup also And I need a little time to create and download the version to use it. I really need your help
15:19 < grizzly> I'll send the code to you using this way
15:48 < xcat> Is there some way to run some code at a specific time?
15:49 < bigkevmcd> xcat: node-cron perhaps
15:51 < bradleymeck> isaacs++
15:51 < pachet> if you mean from within a running node process, yeah, use node-cron
15:52 < pachet> if you mean, launch a specific node process at a given time, then use regular cron :]
16:14 < jw___> any idea why this error is showing sometimes Error: connect Unknown system errno 64
16:14 < jw___> I need to restart node app and it goes away
16:14 < jw___> it looks like dns problem
16:15 < jw___> anyone?
16:15 < bradleymeck> jw___: yea host is down is what errno 64 is
16:15 < jw___> the funny thing it's not down
16:16 < bradleymeck> so presume the dns cache gets corrupted and needs a restart, for w/e reason the dns server decides to send back data, if you can reliably reproduce it udp dump dns
16:16 < jw___> i don't have firewalls it's just localhost
16:16 < bradleymeck> jw___: your app never connects to anything outside localhost then?
16:17 < jw___> no
16:18 < jw___> i see the process is running
16:18 < jw___> it's just a localhost app
16:18 < jw___> I left it for the night this morning when i issued an ajax query i got  errno 64
16:19 < bradleymeck> jw___: the browser is giving errno 64 or node?
16:19 < jw___> node
16:20 < bradleymeck> if its the browser, tcp dump on the port you are trying to connect on, if its node udp dump dns
16:20 < jw___> the status is 504 on the browser
16:20 < jw___> thanks @bradleymeck
16:25 < rho> ?
16:25 < rho> wtf
16:27  * rho shrugs
16:32 < onr> How's websocket's memory consumption compared to long polling, at the server side?
16:33 < context> onr: they are both just open connections....
16:33 < context> onr: the difference is long polling eventually has to close and reopen
16:33 < context> which is most likely using more memory and cpu on the server side
16:34 < Coderah> can someone help me real fast? think i just need another pair of eyes, been staring at this too long to find the problem. basically i have a simple module that should work (i am doing several other modules in similar fashion) but when calling require on it, i get back a blank object {}. http://pastebin.com/yKtrtJSn
16:34 < onr> context: by "more", can it be something like 10x more memory usage?
16:36 < bigkevmcd> Coderah: WFM
16:36 < context> onr: websocket using 10x more or vice versa? and i cant imagine it being that much
16:36 < context> either way...
16:37 < Coderah> bigkevmcd: Oh great, now i know this issue is going to be a pain in the ass to figure out.
16:37 < Coderah> bigkevmcd: thank you for testing!
16:38 < context> require("solomap") gives you {} ?
16:38 < Coderah> context: correct.
16:38 < Coderah> no
16:38 < context> ...
16:38 < Coderah> sorry require("./solomap.js")
16:39 < Coderah> lol i responded too quickly didn't think about your question
16:39 < onr> context: hmm
16:39 < context> coderah: works here
16:40 < context> onr: if you have one or the other using 10x more memory you are probably leaking somewhere
16:40 < Coderah> does node somehow cache previous requires? maybe its stuck requiring old code.. idk how that would be though
16:40 < context> coderah: http://pastie.org/5377872
16:41 < context> coderah: pretty sure yes node does cache 
16:41 < context> restart your console
16:41 < Coderah> context: thanks that looks right, I have enough info to figure this out now, i was thinking its the code now i can just go through a few things and fix it.
16:41 < context> yes it does cache.
16:42 < Coderah> context: i had already restarted the console so it wasnt that. just figure it out though it was my failure of having it in the right folder >.<
16:42 < Coderah> figured*
16:42 < onr> context: i guess keepalive minimizes the difference
16:43 < CoverSlide|TPFR> Coderah: http://nodejs.org/docs/latest/api/globals.html#globals_require_cache
16:43 < Coderah> CoverSlide|TPFR: thanks for the link, good to know.
16:44 < CoverSlide|TPFR> Coderah: check out the contents of require.cache . you can delete an entry from there (which i think is an absolute path) and require will reload the file 
16:47 < CoverSlide|TPFR> you can do something like `delete require.cache(require.resolve('./solomap.js'))`
16:47 < CoverSlide|TPFR> err
16:48 < CoverSlide|TPFR> i those should be brackets not parentheses
16:48 < CoverSlide|TPFR> after cache[
16:57 < marlun> Is there a simple router which works like the one in express.js that I can use without having to use the whole express.js framework?
16:58 < gkatsev> there are several url routers available
16:58 < gkatsev> marlun: https://github.com/joyent/node/wiki/Modules#wiki-web-frameworks-routers and possibly even others
16:59 < marlun> Thanks, I know there are many, I was wondering if someone knew one which worked like the one in express.js :)
17:04 < CoverSlide|TPFR> marlun: http://visionmedia.github.com/page.js/
17:05 < marlun> CoverSlide|TPFR: Ah, should've just gone to tjs github page before asking, thanks! :)
17:10 < Amfy> Good tutorial how to use everyauth or connect-auth with express 3.x?
17:11 < marlun> CoverSlide|TPFR: Seem to be client-side though.
17:11 < CoverSlide|TPFR> marlun: it works on both
17:12 < CoverSlide|TPFR> Amfy: https://github.com/bnoguchi/everyauth#installation
17:13 < Amfy> CoverSlide|TPFR thanks, already read that. But it doesn't says how to use it in real world usage (like get a good structure at all, etc)
17:13  * CoverSlide|TPFR shrugs
17:14 < CoverSlide|TPFR> https://github.com/bnoguchi/everyauth/tree/express3#quick-start
17:14 < Amfy> hm, ok then I'm trying to start by 'try and error'
17:15 < marlun> CoverSlide|TPFR: Can't find how to use it with the node.js http server.
17:16 < CoverSlide|TPFR> hmm
17:16 < CoverSlide|TPFR> ok maybe it is only client-side
17:17 < CoverSlide|TPFR> i saw it does module.exports and thought it does both
17:17 < CoverSlide|TPFR> my bad
17:17 < CoverSlide|TPFR> i guess that's for stuff like browserify
17:25 < marlun> Will stay with Director but would like page.js for the server :) 
17:42 < imm> ;)
17:43 < jkevinburton> any .jade users here?  I am setting req.locals.flash.error = req.flash('error') and even if I didn't set it, it shows up in the template as an object.  So in the jade template i am doing a: !{typeof flash.error} to see what it is, but really I am just doing -if flash.error -- i dont want it to show up if there is none - n00b here, please assist
17:48 < warz> jkevinburton, req.flash was removed in newer versions of express. iirc, req.flash itself set the local variable, so i dont think you explicitly have to set it there.
17:48 < jkevinburton> warz: im using connect-flash
17:49 < jkevinburton> in jade how to do I check for an empty object?
17:50 < CoverSlide|TPFR> like you check of an empty object in javascript
17:50 < CoverSlide|TPFR> Object.keys(obj).length
17:51 < jkevinburton> OMFG! CoverSlide|TPFR if you could see me do a facepalm right now
17:54 < mks_> almost empty...
17:56 < mks_> a roboust isEmpty is a bit more complex
17:56 < CoverSlide|TPFR> depends on how you define "empty"
17:57 < mks_> an object with not enumerable properties is empty or not?
17:57 < CoverSlide|TPFR> right
17:57 < CoverSlide|TPFR> so by that definition, what's wrong with my approach?
17:58 < mks_> can be source of hard to spot bugs
17:58 < jkevinburton> i did and it works great: if (typeof errors !== 'undefined' && Object.keys(errors).length)
17:58 < mks_> Object.getOwnPropertyNames(obj).length
17:58 < mks_> not considering the inherited properties
17:58 < mks_> an object with the prototype full of properties is empty or not?
17:59 < mks_> as you said, it depends on what "empty" means in context
17:59 < CoverSlide|TPFR> but if all you care about are the enumerable properties
17:59 < CoverSlide|TPFR> non-enumerable properties will show up gOPN
17:59 < mks_> sure. just define the context and know the possible edge cases
18:00 < mks_> gOPN will list all the own properties, enumerable or not
18:02 < pittpens> Hi all.  I'm looking for a node module that will let me update iptables in centos and also change network settings.  Is anyone aware if modules exist like this in npm?  I couldn't find anything. 
18:03 < jrajav> Has anyone used Mocha with the TDD/exports-style interface?
18:03 < jrajav> I have no idea how to get it to work.
18:05 < jrajav> Oh, you have to pass -u exports.
18:06 < jrajav> God, I hate the trendy *cough*shit*cough* documentation that is Mocha' sprawling TOCless single-page website
18:07 < Gabriel403> jrajav: fork it and add a TOC ;)
18:07 < jrajav> Fork their website?
18:08 < Gabriel403> it's on github
18:10 < jrajav> I don't see how to get to their website source from there
18:11 < jrajav> If that's what you meant
18:11 < Gabriel403> https://github.com/visionmedia/mocha/tree/gh-pages
18:11 < CoverSlide|TPFR> I'm sure he'd take a pull request
18:11 < jrajav> Oh, thanks
18:12 < jrajav> Wait, what is this
18:12 < jrajav> lol
18:12 < jrajav> How is this the same repo apparently, but the actual file tree has no relation?
18:12 < othiym23> jrajav: it's how github sites work
18:12 < jrajav> Oh it's a branch
18:12 < jrajav> Weird.
18:12 < othiym23> git branch --orphan gh-pages
18:13 < jrajav> Cool, well I think I actually will
18:13 < jrajav> Add a TOC, I mean
18:14 < Gabriel403> :)
18:14 < hareth> hello
18:14 < hareth> i would like to understand something about the fs.watch api, how do i "unwatch" with this ? :p
18:25 < othiym23> hareth: fs.watch returns a FSWatcher object
18:25 < munro> I want to store a list of diffs in my mongodb document of how it has changed over time, is there a node module to create diffs, and restore an object based on a diff?
18:25 < hareth> yeah sory
18:25 < hareth> i'm stupid
18:25 < othiym23> to get it to stop listening for FS events on that object, you need to call close on that object
18:25 < hareth> bad questions sorry for making you loose your time
18:26 < othiym23> np
18:38 < marshall> hi node
18:39 < KevinSjoberg> Hi marshall. I just watched an episode where you got back with Lilly.
18:39 < marshall> is there an easy way to just get npm to spit out the deps for the app im working on?
18:39 < EhevuTov> KevinSjoberg, ha
18:39 < rho> ha
18:39 < marshall> oh, im back with lilly? awesome
18:40 < marshall> is she nice?
18:40 < rho> she used to be a witch
18:40 < KevinSjoberg> marshall: Yeah. You just went out with the girl with the crazy eyes, but everythings back to normal now.
18:40 < marshall> everyone's got a past. I used to be a war criminal.
18:40 < KevinSjoberg> marshall: OT: Run npm ls
18:40 < marshall> KevinSjoberg: thanks mate
18:41 < KevinSjoberg> Np :)
18:41 < EhevuTov> KevinSjoberg, what were your crimes
18:41 < EhevuTov> marshall, I mean
18:41 < marshall> genocide, torture
18:41 < CoverSlide|TPFR> Think of me like Yoda, but instead of being little and green I wear suits and I'm awesome. I'm your bro—I'm Broda!
18:42 < KevinSjoberg> CoverSlide|TPFR: Love it!
18:42 < marshall> but that's in the past. i'm a wedding planner now.
18:42 < gkatsev> CoverSlide|TPFR: are you barney stinson by any chance?
18:42 < EhevuTov> marshall, same thing
18:42 < KevinSjoberg> CoverSlide|TPFR: If so, I want to see some magic!
18:43 < EhevuTov> marshall, I've seen Say Yes to the Dress
18:43 < EhevuTov> or whatever
18:43 < marshall> i actually have no idea what you all are talking about
18:43 < marshall> or what show my name is from
18:43 < EhevuTov> How I Met Your Mother
18:43 < KevinSjoberg> marshall: Haha. We're talking about How I met your mother.
18:43 < marshall> o
18:44 < CoverSlide|TPFR> my name is marshall mathers and im an alcoholic
18:44 < CoverSlide|TPFR> i got a disease and they don't know what to call it
18:44 < marshall> one time CSI Miami had a character who had my first and last name
18:44 < gkatsev> oh, I totally missed the beginning of the conversation. Just saw the thing about broda, lol
18:44 < CoverSlide|TPFR> Better hide your wallet cause I'm coming up quick to strip your cash
18:44 < marshall> turned out he killed his girlfriend. i was bummed.
18:44 < CoverSlide|TPFR> Bought a ticket to your concert just to come and whip your ass
18:45 < KevinSjoberg> CoverSlide|TPFR: You're a real quote machine!
18:45 < CoverSlide|TPFR> :D
18:46 < EhevuTov> there was a man with my name and age stabbed and murdered in the same town I work in
18:47 < EhevuTov> It's kind of weird when you hear it on the news
18:47 < gkatsev> I'm all alone in the world
18:48 < EhevuTov> gkatsev, some yiddish name?
18:48 < gkatsev> lol
18:48 < gkatsev> not quite
18:48 < gkatsev> but close.
18:48 < EhevuTov> a clone, with only a serial number?
18:49 < gkatsev> there might be a hash collision!
18:49 < gkatsev> lol
18:49 < EhevuTov> haha!
18:49 < EhevuTov> OB1KNOB
18:49 < gkatsev> there are other people with the same last name as me that aren't my family. But, there aren't a lot of people with the name of Gary anyway.
18:49 < EhevuTov> he was a clone
18:51 < KevinSjoberg> If I was to change my name some day, it would have been Leroy Jenkins.
18:52 < gkatsev> lol
18:52 < CoverSlide|TPFR> If I was to change my name, it would be Major Major Major
18:52 < CoverSlide|TPFR> and I would join the military
18:53 < KevinSjoberg> CoverSlide|TPFR: Haha, you like to make things complicated, don't you?
18:53 < CoverSlide|TPFR> and go all the way up to be the rank of Major
18:53 < EhevuTov> Major General
18:54 < othiym23> somebody's been reading some Keller
18:54 < KevinSjoberg> I've got two gold fishes at home. Probably going to name them one and two. Because if one dies, I still got two.
18:54 < CoverSlide|TPFR> You mean Heller?
18:54 < othiym23> Heller, yeah
18:54 < EhevuTov> then you could hire someone to write a biography and have an affair
18:54 < othiym23> I think that was my girlfriend's favorite part of the book
18:54 < gkatsev> CoverSlide|TPFR: change it to Private Captain Major Colonel General
18:55 < gkatsev> er, Private Corporal Sergeant Lieutenant Captain Major Colonel General
18:56 < gkatsev> then join the army and work your way up the ranks.
18:56 < gkatsev> then you can always have a name match your rank
18:56 < gkatsev> or a name mismatch your rank.
18:56 < gkatsev> or just make them say all those out every time.
18:58 < KevinSjoberg> Would be pretty interesting two have an SQL-injection as name.
18:58 < gkatsev> bobby tables?
18:59 < gkatsev> http://xkcd.com/327/
19:00 < KevinSjoberg> gkatsev: Haha, hilarious !
19:00 < gkatsev> never fails to amuse
19:00 < gkatsev> xkcd has a comic for most things
19:00 < KevinSjoberg> Indeed. Never seen that one though.
19:00 < gkatsev> heh
19:01 < Stanislav0> Lol 
19:01 < gkatsev> now you have.
19:01 < KevinSjoberg> I sure do.
19:10 < TehShrike1> Oh great and powerful isaacs - know ye why the npm would be plagued by 401 responses when attempting to push a package to a private repository?  .npmrc files were cleared, npm adduser was run, and the appropriate user was created in the database by said adduser command.  But the 401 responses persist.
19:10 < TehShrike1> My admins hair runneth out.
19:11 < nlf> anyone familiar enough with riak to tell me what the crap the "props" object included in a solr search result is?
19:12 < nlf> property, rather. it's on every result
19:32 < pppaul> hey guys, anyone here using promises extensively?
19:33 < litenull> if you're paul irish, then yes
19:33 < medikoo> pppaul: what do you want to know?
19:33 < pppaul> any good debugging stuff for them?
19:33 < CoverSlide|TPFR> paul_irish hangs out on #html5
19:33 < pppaul> my .fails (using Q) are hiding stack traces
19:33 < litenull> :P
19:34 < CoverSlide|TPFR> sounds like a q problem
19:34 < CoverSlide|TPFR> i say rtfs
19:34 < pppaul> of course i'm paul irish
19:34 < pppaul> i did rtfs
19:34 < pppaul> i always rtfs
19:34 < pppaul> f
19:34 < pppaul> guess i have to rtfs more
19:35 < CoverSlide|TPFR> hmm q tries to make long stack traces
19:36 < medikoo> pppaul: There's no ready solution I think, but it's possible to configure something using long john, additionally see following tools https://github.com/medikoo/deferred#monitoring-unresolved-promises 
19:36 < pppaul> thanks medikoo 
19:37 < pppaul> that looks pretty cool
19:37 < medikoo> ppaul: as a side note, I use promises extensively, but I was fine so far without long stack traces, what was more important for me, was where never resolved promises are initiated, and in general where promises are initiated
19:38 < pppaul> wow Q is the slow
19:39 < pppaul> my code doesn't have much testing yet (working on it) so when things break in a promise it's hard to track as i'm not throwing nice errors
19:40 < medikoo> just make sure all unhanded errors are thrown
19:40 < pppaul> i think once i have good testing this wont be an issue, i guess i'll have a similar issue as you soon
19:40 < pppaul> i'm throwing errors, but it's still not enough right now. throwing low level errors
19:41 < medikoo> so don't overuse `then` function, use done/end (depend on implementation) just to get result when no need to extend the chain
19:41 < medikoo> ok, I understand
19:45 < pppaul> i like then/spread :)
19:45 < pppaul> maybe i should use a control flow lib instead of a promise lib?
19:46 < medikoo> pppaul: imo promises are much more powerful than callback based tools, but they demand practice to master
19:47 < medikoo> just take what you feel it's best for you
19:47 < pppaul> i'm investing time in them. i like them
19:47 < medikoo> for simple flow, callbacks should be better
19:47 < medikoo> but when things get complicated, you'll be thankful you've master promises :) ..at least that's my experience
19:47 < pppaul> Q was able to help me with all my callback issues (waterfall/parallel)
19:48 < Domenic> Oh hey we're talking about Q and promises.
19:48 < pppaul> <3 Q
19:48 < Domenic> You lose stack traces if you don't use .done() at the end of a chain
19:48 < Domenic> Otherwise you should get nice long ones
19:50 < pppaul> ok, i'll try that
19:51 < pppaul> can i do done/fail (does order matter?)
19:51 < Domenic> yeah, order matters
19:51 < Domenic> You need to do done() at the end
19:52 < Domenic> so you can do .then(f).fail(r).done()
19:52 < pppaul> ok. i did that but the stack is still hidden
19:52 < Domenic> Or .done(f, r)
19:52 < Domenic> Or .then(f, r).done()
19:52 < pppaul> oh, i'm not returning from my fail
19:52 < Domenic> Or .then(f).catch(r).done()
19:52 < Domenic> Well if you return from the fail then you are handling it
19:52 < Domenic> You need to re-throw (just like a catch block) if you want to see the error
19:53 < Domenic> (Note: implicitly returning undefined counts as returning)
19:53 < jrajav> What seems more natural for a "curryRight" or "partialRight" function? For the arguments to apply to the end of the formal arguments to the function? Or to apply to the end of all arguments that it's called with?
19:55 < TehShrike1> I think the purpose of this module is to troll people with its braces and indentation https://github.com/sjsadowski/qjscl/blob/master/lib/qjscl.js
19:56 < jrajav> Eh, more like github trolling with not handling hard tabs at all
19:56 < jrajav> Also what's wrong with the braces?
19:56 < TehShrike1> jrajav: view the raw file, doesn't look much different
19:56 < pppaul> Domenic thanks. still not getting long traces, but i'm getting useful ones
19:56 < TehShrike1> jrajav: what is the curly brace on line 20 ending?
19:57 < jrajav> TehShrike1: ..... That's because browsers render tabstops as 8 char widths
19:57 < jrajav> That's what I meant by "handling", github should arguably replace them with 4 spaces or something
19:57 < Gabriel403> I know this is a more generic js question, but is there a better way to throw and error with a code than this? https://pastee.org/qp9y7
19:57 < jrajav> But yeah view a raw file with hard tabs in anything dumb like browsers or less and you're going to see 8 widths
19:58 < TehShrike1> ah, I see, some lines use tabs for indentations there, and some use spaces
19:59 < TehShrike1> 14-19 use spaces, he must have copied that snippet from somewhere else :-P
19:59 < jrajav> What the glob is 'qjscl' anyway?
20:00 < jrajav> Qsomething JSon Configuration Loader?
20:00 < jrajav> That's a bit awkward
20:00 < TehShrike2> I vaguely remember seeing one that would use optimist, but fall back on configuration files... can't remember where it was though
20:02 < Domenic> pppaul glad to help. Let me know if there's anything else, either here or on the q-continuum mailing list.
20:02 < jrajav> No one has an opinion on currying? :(
20:03 < pppaul> <3 curry/partials
20:03 < Domenic> I have a strong opinion that you should figure out the difference between currying and partial application.
20:03 < mmalecki> ^
20:03 < pppaul> is there much of a difference?
20:04 < Domenic> http://msmvps.com/blogs/jon_skeet/archive/2012/01/30/currying-vs-partial-function-application.aspx
20:04 < sdepold_> greetings
20:04 < Domenic> Curried functions are called like f(1)(2)(3)(4)
20:04 < Domenic> You never want to do that
20:04 < sdepold_> does anyone know a way to create a stored procedure with node-mysql
20:04 < Domenic> OK ignore my last link, too much C#, do this instead: http://benalman.com/news/2012/09/partial-application-in-javascript/
20:05 < CoverSlide|TPFR> well sometimes you want to do var g = f(1)(2); g(3)(4)
20:05 < willwhite> substack: have you had a chance to look at this pull request? https://github.com/substack/node-optimist/pull/73
20:05 < Domenic> CoverSlide|TPFR I would love to see an example of real world code that wants to do that
20:05 < TehShrike|Work> sdepold_: https://dev.mysql.com/doc/refman/5.5/en/create-procedure.html
20:06 < sdepold_> TehShrike|Work: afaik there is now way to create a stored procedure without the delimiter command?!
20:07 < sdepold_> TehShrike|Work: and this is where the shit hits the fan
20:07 < sdepold_> TehShrike|Work: because it seems that node-mysql is not capable of executing those commands
20:07 < CoverSlide|TPFR> I've seen it done. somethings people don't wrap their head around too easily, usually they just end up making an object, so you don't see many examples
20:07 < TehShrike|Work> sdepold_: what do you get when you run DELIMITER commands?
20:08 < sdepold_> TehShrike|Work: so i'm doing this: client.query('DELIMITER //', function(err){ console.log(err) })
20:08 < sdepold_> TehShrike|Work: and getting: Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DELIMITER //' at line 1
20:10 < sdepold_> TehShrike|Work: fyi: myuse case is a test for sequelize
20:11 < sdepold_> TehShrike1: 
20:11 < sdepold_> TehShrike1: whoops. did u get my messages
20:11 < TehShrike1> I don't think so :-x sorry, stupid coffee shop internet
20:12 < sdepold_> TehShrike|Work: you asked for the results of the command. i'm running client.query('DELIMITER //', function(err){ console.log(err) }) and getting Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DELIMITER //' at line 1
20:12 < sdepold_> fuck ^^
20:12 < Kakera> how does the 'restler' module compare to 'request'?
20:12 < sdepold_> TehShrike1: the usecase is a test i'm curently writing for sequelize
20:14 < TehShrike1> sdepold_: So you're getting a 1064 error - do you get the same error if you run the query from a different client?
20:14 < Ralt_> oh man, I'm having trouble using restify
20:14 < Ralt_> such basic stuff...
20:14 < Bilge> Stop being bad in my presence, please
20:15 < TehShrike1> Sorry Bilge
20:15 < Bilge> I don't want to catch what you've got
20:15 < TehShrike1> But I'm bad
20:15 < TehShrike1> bad to the bone
20:15 < chilts> heh
20:15 < TehShrike1> TO THE VERY BONE
20:15 < chilts> TO THE CORE
20:15 < sdepold_> TehShrike1: according to felixge it happens with all existing clients :-/ it's working with a mysql gui
20:16 < TehShrike1> sdepold_: can you run the CREATE PROCEDURE query without specifying a delimiter?
20:16 < sdepold_> how would u do that?
20:16 < Ralt_> does anyone know why this redirect doesn't work with restify? https://github.com/Ralt/somap/blob/master/lib/marker/router.js#L49
20:16 < sdepold_> i just want to return things from a table
20:16 < sdepold_> TehShrike1: like select * from users
20:17 < TehShrike1> sdepold_: eh?  Does that not work?
20:18 < sdepold_> TehShrike1: well maybe i just don'T get the syntax right
20:19 < TehShrike1> The 1064 error messages are usually pretty good at pointing you to the syntax errors
20:19 < goodknight> Is there a room dedicated to Mocha or can I ask my question here?
20:19 < MaxSan> Hey everyone
20:19 < sdepold_> TehShrike1: ah wait! i got it running in a shorter way
20:19 < sdepold_> TehShrike: lemme check if that works
20:20 < jrajav> goodknight: There isn't
20:20 < jrajav> goodknight: This or #javascript are probably the best places
20:20 < goodknight> jrajav: Right on. Thanks.
20:20 < MaxSan> Ok so im running ubuntu server
20:20 < MaxSan> i installed node
20:20 < MaxSan> and forever
20:21 < CoverSlide|TPFR> how did you install node?
20:21 < MaxSan> now both these applications do *nothing*
20:21 < MaxSan> well i installed npm
20:21 < MaxSan> hold on il double check how i done it actually
20:21 < CoverSlide|TPFR> didn't answer my question
20:21 < goodknight> I have an entire Node.js, Express, Socket.IO app that is written. It's functional and I know it all works. It's using Redis for data management for the time being but I'd like to stress test it a bit. Right now, during development, I'm only creating one connection at a time. Is there something (such as Mocha or whatever) that can get the server with 10,000 connections and run a series of functions?
20:22 < sdepold_> TehShrike: ha! client.query('CREATE PROCEDURE foo()\nSELECT * FROM users;', function(err){ console.log(err) }
20:22 < TehShrike|Work> woot.
20:22 < sdepold_> TehShrike: works! 
20:22 < CoverSlide|TPFR> goodknight: ab, siege
20:22 < sdepold_> TehShrike|Work: thanks :)
20:22 < TehShrike|Work> sdepold_: but why not just run SELECT * FROM users? :-x
20:23 < Kakera> are there any other modules that simplify working with HTTP besides request and restler?
20:23 < MaxSan> ok i cant remember 
20:23 < TehShrike|Work> Kakera: superagent seems to be another big one
20:23 < MaxSan> maybe best i just reinstall a specific way?
20:23 < sdepold_> TehShrike|Work: i'm just adding support for stored procedures to sequelize and need to test that calling stored procedures is correctly working. but for that i first of all need a stored procedure :)
20:23 < CoverSlide|TPFR> download source, compile,
20:23 < gildean> Kakera: what do you mean? there is a bunch of different http-frameworks and such
20:23 < goodknight> CoverSlide|TPFR: do you by chance have a link for those?
20:24 < MaxSan> cant i just take from the ubuntu repo?
20:24 < gildean> MaxSan: the one in the canonicals repos is quite old
20:24 < gildean> MaxSan: instead, add the ppa:chris-lea/node.js
20:25 < MaxSan> ok will do
20:25 < gildean> with sudo add-apt-repository ppa:chris-lea/node.js
20:25 < MaxSan> thanks
20:25 < gildean> then just sudo apt-get update && sudo apt-get install nodejs
20:26 < TehShrike1> Kakera: why'd you turn away from request?
20:26 < Kakera> it's messy, the documentation is terrible
20:27 < Kakera> and you need three arguments in the callback to get to the body
20:28 < gildean> Kakera: then just use the core http-module?
20:28 < Kakera> that's worse
20:28 < Kakera> I'm looking at superagent now, looks promising
20:29 < CoverSlide|TPFR> they all use core http anyway
20:30 < Kakera> yes, so?
20:30 < cellvia_> does any one know how to set a listener for ALL events, instead of just specific ones
20:30 < CoverSlide|TPFR> it's really not that bad
20:30 < cellvia_> so anytime any event is emitted i can do a function
20:30 < MaxSan> erm
20:30 < MaxSan> add-apt-repository
20:30 < Kakera> having to listen for the 'data' event and reassemble the chunks nope nope nope
20:30 < MaxSan> isnt that part of ubuntu?
20:31 < cellvia_> i have a variety of types of events, but want to increment anytime any are emitted
20:31 < CoverSlide|TPFR> cellvia_: eventemitter2 does that
20:31 < cellvia_> hrm, is eventemitter2 reliable
20:32 < CoverSlide|TPFR> it's used extensively at nodejitus
20:32 < pppaul> any express experts around who can help me do composite express routing? :D
20:32 < cellvia_> ok, i will give it a shot or at least see how they extend events 
20:34 < gildean> pppaul: don't ask to ask, just ask
20:34 < pppaul> ok, i need to prepare a gist for this
20:36 < warz> man, the querying capabilities of mongodb really suck once you start querying on embedded documents.
20:36 < Kakera> superagent is awesome, thanks TehShrike
20:37 < gildean> warz: that's why you shouldn't nest your documents, create separate collections instead
20:38 < gildean> warz: you can use the _id's on the documents to link them across collections
20:39 < Ralt_> does anyone know why req.body would be undefined if I *did* define server.use(restify.bodyParser());?
20:39 < gildean> collections are cheap, don't try to mash all of your data into one collection and into massive documents
20:39 < pppaul> i want to do something like this (i saw someone's code that was doing something like this yesterday, but i can't find the guy or his code) https://gist.github.com/4074618
20:40 < pppaul> i want to make my routes their own servers that i can add on to
20:40 < warz> gildean, isnt that how you're supposed to use mongo though? sort of like in cassandra where you build your schema around your queries?
20:40 < warz> itd all be fine if i could just say "give me all documents where the last item in the embedded array is equal to 'foo'"
20:41 < cellvia_> how commonly do people use statemachines with nodejs?  i havent seen them much, as it seems like people are just using eventemitters streams or callbacks w/o a need for such a thing
20:41 < gildean> warz: idk how it's meant to be used, i just know that it's difficult to handle documents with deeper nesting
20:41 < cellvia_> but i run into the occasional library with some crazy statemachine thing that makes the code mad complicatd
20:41 < mscdex> cellvia_: like?
20:41 < warz> gildean, well i think its closer to cassandra than mysql. where youre supposed to be very verbose with your schema.
20:42 < cellvia_> mscdex:  https://github.com/assistunion/xml-stream
20:42 < cellvia_> example
20:42 < warz> i think trying to mimic joins would be even more painful, to be honest
20:42 < gildean> warz: mongodb doesn't require schemas at all, but they do help with performance etc.
20:43 < pppaul> anybodies?
20:43 < pppaul> i made a pretty gist to help :P
20:43 < gildean> warz: i'm just saying it's easier to handle shallower documents
20:43 < cellvia_> mscdex:  if hes using it unnecessarily, thats kind of the point of my question... do people use it jus cause they are comfortable w/ that approach from some other language? etc
20:43 < gildean> pppaul: i'm not really getting you question?
20:43 < gildean> your*
20:43 < pppaul> well, that code doesn't work at all (when i curl -X POST that route i get nothing)
20:44 < gildean> pppaul: well, that wouldn't work with express 3.x
20:44 < gildean> if that's all the code
20:44 < pppaul> the main app sets up the name of the exposed route, and the route handler sets up it's own route definitions...
20:44 < gildean> express 3 requires you to pass it a http-server to use
20:45 < pppaul> ok… would you be able to comment on the gist so i can fix it up :)
20:45 < pppaul> what do you mean by http-server?
20:45 < pppaul> calling the .listen() on both apps?
20:47 < gildean> pppaul: i added a comment
20:47 < mscdex> cellvia_: in that particular example, the state usage seems a bit much from briefly looking over it
20:48 < mscdex> cellvia_: i can't answer your last question, because that varies from author to author.
20:48 < mscdex> cellvia_: some tasks lend themselves better to using states than eventemitters
20:48 < pppaul> gildean i have an existing express server, and all i need to do is call app.listen(port) to get it working
20:48 < mscdex> cellvia_: or some combination of both
20:48 < pppaul> gildean i'm working on modularizing my server now
20:49 < mscdex> cellvia_: it's a use-the-right-tool-for-the-right-job kind of thing
20:50 < gildean> pppaul: then that's most likely an express 2.5 server
20:50 < gildean> which did provide the server on it's own
20:51 < warz> pretty sure i use express 3 and it still creates the http server for me
20:51 < pppaul> gah!
20:51 < pppaul> i thought i was using express 3
20:52 < pppaul> i'm using express 3.0.3
20:52 < othiym23> warz: the prerelease builds of Express didn't have the listen method on the app, but TJ added it back for the final version
20:52 < othiym23> for 3, I mean
20:53 < othiym23> but it's better to do it explicitly using http.createServer().listen(app), because then you can have the same app running on HTTP and HTTPS
20:53 < othiym23> or so Express 3 reasons
20:53 < pppaul> hmm
20:54 < pppaul> this isn't related to my problem, though
20:54 < warz> ok. im saying pppaul could be using express 3
20:54 < pppaul> i am using 3.0.3
20:54 < Nodejsser> Hi all 
20:55 < othiym23> sorry for parachuting into the middle of your guys' discussion ;)
20:55 < warz> whats the problem that youre having? theres also a specific express channel in which tj frequents and answers questions, etc.
20:55 < warz> but it just sounds like you're having trouble structuring your code?
20:55 < Nodejsser> is there a way to extract extended file properties for example " Author","Genre" from file name ( mp3) ?
20:56 < gildean> pppaul: is there a reason you're defining express again in the middleware?
20:56 < pppaul> i want to build modularized routes
20:56 < CoverSlide|TPFR> Nodejsser: you need a parser for that
20:56 < vicapow> Nodejsser: yes
20:56 < pppaul> routes that build on top of routes
20:56 < CoverSlide|TPFR> Nodejsser: search for some id3 parser, i'm sure it's been built
20:56 < Nodejsser> great thanks 
20:56 < vicapow> Nodejsser: http://en.wikipedia.org/wiki/ID3
20:57 < CoverSlide|TPFR> Nodejsser: https://github.com/leetreveil/node-musicmetadata
20:57 < othiym23> pppaul: I think what gildean is asking is, why aren't yhou just passing the app into your module (where you have magic_deps now)?
20:57 < pppaul> gildean i'm just trying to code like the way i saw my friend do it. my memory isn't perfect :)
20:57 < othiym23> never, ever write your own ID3v2 parser unless you're a total masochist
20:57 < pppaul> othiym23 i want to have each route be it's own express module
20:57 < warz> well, routes all end up in the same place. you can import modules and pass along your server and pin routes to it from anywhere.
20:58 < vicapow> othiym23: unless your process makes you :P
20:58 < warz> so make a module, export a function that takes the server as a parameter.
20:58 < warz> and add routes to it in there.
20:58 < Nodejsser> great thanks guys, all the data that i needed. Perfect :) 
20:58 < vicapow> othiym23: professor*
20:58 < othiym23> pppaul: sure, but all the routes need to end up in the same router, and the app is the natural join point for that
20:58 < othiym23> vicapow: your professor hates you
20:58 < pppaul> that's not how i saw my friend doing that, he was against dep injection
20:58 < pppaul> he had a more elegant way of building routes
20:58 < vicapow> othiym23: it was actually kinda fun
20:58 < warz> pppaul then ask your friend how he did it?
20:59 < pppaul> i don't have his contact :(
20:59 < gildean> pppaul: the app doesn't really need to be passed around, it's there to handle the requests and responses, you can just do each route as it's own middleware
20:59 < pppaul> ug
20:59 < othiym23> vicapow: there's a good discussion of building up an ID3 parser from small binary-munging functions in Peter Seibel's _Practical Common Lisp_, which can be read for free online
20:59 < gildean> taking either two or three arguments
20:59 < Kakera> is it possible to see the query data superagent sends?
21:00 < vicapow> othiym23: cool. i'm not that interesting in doing it again, though. once is enough
21:00 < othiym23> Nodejsser: ^^^
21:00 < othiym23> was responding to the wrong person
21:00 < vicapow> othiym23: ah
21:00 < Nodejsser> another question came up, now I can parse it , but how can i change it and write it to the file?
21:01 < vicapow> Nodejsser: i guess that library only supports reading the id3 meta data, not writing it
21:02 < CoverSlide|TPFR> Nodejsser: that's a trickier beast, probably not one that node would be best for
21:03 < Nodejsser> so maybe it would be best to call an external program to do it ... wmmm do you know of any command line that would work on windows? i know this might be the wrong place for this question :) 
21:03 < vicapow> Nodejsser: what's a windows?
21:03 < vicapow> ;)
21:04 < Nodejsser> vicapow: Micosoft Windows ;) 
21:04 < vicapow> just kinding
21:04 < vicapow> kidding*
21:05 < vicapow> but yeah, idk
21:06 < othiym23> Nodejsser: look at eyeD3
21:06 < othiym23> it's pure Python and has a very rich CLI, so you should be able to get it to do what you want
21:06 < othiym23> avoid anything that requires id3lib if you value your sanity
21:08 < Nodejsser> othiym23: Thanks that should do 
21:11 -!- mode/#node.js [+o piscisaureus_] by ChanServ
21:19 < mmalecki> mscdex: hey, you here?
21:21 < mscdex> mmalecki: kinda
21:23 < mmalecki> mscdex: okay, this is an open-ended question ;). how attached are you to current API for spawning processes in ssh2? would you be happy to make it more like child_process.spawn, with stdout and stderr streams?
21:24 < pppaul> in express how would one handle generic errors in middleware?
21:24 <@Nexxy> hay
21:24 < mmalecki> Nexxy: OMGHAI
21:24 < Sly> Nexxy: <3
21:24 <@Nexxy> everything OK?
21:24 <@Nexxy> <3
21:24 < Sly> When are my black ninjablocks gonna be ready?
21:25 <@Nexxy> soon!
21:25 < Sly> Fucking.. Sweet.
21:25 < Sly> Let me know when.
21:25 < Sly> :D
21:25 < Sly> I'll be one of the first people to get a couple.
21:25 < mmalecki> Nexxy: 'everything OK?' is a complicated question!
21:25 < mmalecki> http://xkcd.com/222/
21:25 < othiym23> pppaul: call next with the error as the first parameter
21:26 < pppaul> i am doing tht
21:26 < Sly> La de da..
21:26 < Sly> Building Node from source. :x
21:26 < Sly> AS USUAL
21:26 < pppaul> i'm guessing that the next middleware layer has to be written in the form of an error handling middleware?
21:27 < othiym23> pppaul: no, Express should handle the errors for you
21:28 < pppaul> i'm writing a middleware full of middlewares
21:28 < othiym23> (you might try asking the folks in #express about some of this)
21:30 < pppaul> othiym23 doing that
21:30 < harrisonm> Cookies to the left of me, templates to the right, here I am
21:30 < harrisonm> stuck in the middleware with you
21:31 < nathan7> caaught in a landslide
21:32 < nathan7> no escape from reality
21:35 < syskk> is there any safe way to copy a native module and modify it without actually modifying the original copy?
21:36 < pppaul> anyone here implement HTTP 418?
21:37 < mscdex> mmalecki: hrmm i don't know. it's kind of tricky because the underlying stuff is not exactly like a traditional child process in node
21:37 < mscdex> mmalecki: writing streams is already a pain in the ass
21:38 < pppaul> is it ok for middle wares not to call next()?
21:39 < mscdex> mmalecki: if we were to have separate looking streams, we'd need to have separate buffers and everything. almost separate stream objects entirely, but point to the same Channel
21:39 < othiym23> I think there's some magic argument checking going on with middlewards similar to how mocha doesn't require you to call done if you don't include it in the parameter list for the test function
21:40 < othiym23> so if your middleware doesn't have a third parameter it assumes your middleware is synchronous and you don't need to call next
21:40 < othiym23> I could be wrong, though, or confusing Express with Restify
21:40 < mscdex> mmalecki: if you can come up with something reasonable that works well with ssh2's protocol before i do, feel free to submit a pull request
21:41 < mscdex> mmalecki: but for now, i have other things left to do yet that have higher priorities
21:42 < mscdex> mmalecki: like starting sftp and finishing port forwarding
21:42 < pppaul> http://expressjs.com/guide.html#error-handling there are examples here of not calling next()
21:43 < gildean> pppaul: i've used 418 lot's of times
21:43 < gildean> it's fun, so why not
21:44 < mmalecki> mscdex: sure
21:44 < mmalecki> thanks
21:44 < jrajav> Haha, sweet. Node REPL doesn't respond to <C-c> if you get it into an infinite loop
21:44 < jrajav> That's.... nice....
21:44 < pppaul> 418 is the only response i've implemented so far
21:45 < pppaul> jrajav don't use infinite loops
21:45 < jrajav> Oh, duh. Thanks!
21:45 < jrajav> :P
21:45 < pppaul> glad i could help
21:45 < pppaul> i've stopped using infinite loops and i've never looked back
21:45 < AvianFlu> I'M A TEAPOT
21:46 < gildean> AvianFlu: that is 418
21:46 <@Nexxy> I got hilights about someone needing kicked
21:46 < AvianFlu> YEAH I KNOW
21:48 < Kakera> how do I urlencode a buffer?
21:54 < jrajav> That doesn't make sense. How would the urlencoder know how to interpret the bytes?
21:54 < jrajav> Change the buffer to a string with the appropriate encoding
21:56 < Kakera> it would be the same as calling toString('hex') with a percentage sign before each pair
21:57 < Kakera> encodeURIComponent actually converts the string to UTF-8 so it wouldn't need to interpret the bytes
21:58 < jrajav> Uh, are you sure? What about BOMs?
21:59 < Kakera> they aren't used in urlencoded strings
21:59 < Kakera> sure, I can do encodeURIComponent(buf.toString('utf8')), but that seems like a waste of cycles
21:59 <@konobi> they're optional
21:59 < jrajav> I know they aren't; what I meant is, what if your buffer is in utf>8?
22:00 < Kakera> my buffer is just bytes
22:00 < Kakera> it's not a representation of any text
22:00 < jrajav> Oh, okay
22:01 < jrajav> Well, then can't you roll your own? You've pretty much described the whole implementation already
22:02 < Kakera> but modules are what makes node.js so great
22:02 < Kakera> surely someone must have already done this before
22:04 < Kakera> I want an http library that automatically does this for me!
22:07 < jrajav> Normal people just base64 binary data...
22:08 < Kakera> Valve aren't normal people
22:08 < Kakera> not my fault
22:08 < jrajav> You work for Valve?
22:08 < spion> is there a SimpleHTTPServer-like module in npm? preferably with a binary
22:08 < Kakera> no, quite the opposite
22:09 < Kakera> I reverse-engineer them
22:09 < spion> https://npmjs.org/package/http-server looks good
22:10 < Kakera> or pretend to reverse-engineer while I'm actually just looking at the work done by other people in C#, anyway
22:10 < cellvia> :)
22:11 < cellvia> do it Kakera, that would be cool
22:11 < Kakera> do what?
22:11 < cellvia> the buffer -> url encoded string
22:11 < cellvia> or anything like that
22:12 < cellvia> i dunno i think its cool anyway
22:13 < cellvia> what form are raw nodejs buffers in as it is?
22:13 < cellvia> like when streaming
22:14 < Kakera> just arrays of bytes
22:15 < cellvia> https://github.com/creationix/jsonparse/blob/master/jsonparse.js     check this out, around line 92
22:16 < cellvia> forgive me for being newb, but whats that working off of
22:16 < cellvia> hex?
22:16 < Kakera> yeah, it's hex
22:17 < cellvia> so hows he getting the buffer into hex and any thought how that would be beneficial?
22:18 < context> what
22:18 < Kakera> 0x7b == 123
22:18 < Kakera> it's just another way of writing a number
22:19 < context> cellvia: buffer doesnt imply 'string'
22:19 < context> b[] gives int value
22:19 < cellvia> right, well i know raw buffers are bytes
22:19 < trycatch> Hi all
22:19 < cellvia> i might be confused how the script is working
22:19 < trycatch> small question please
22:19 < cellvia> He may just be using hex for his own purposes
22:19 < context> so he is checking that n === 123
22:20 < trycatch> whats the best resources for tdd in node???
22:20 < cellvia> im wondering if theres a performance benefit to what he is donig
22:20 < context> cellvia: the hex is still just a number. 
22:20 < context> cellvia: maybe it was just hex for the table he was reading off of
22:20 < context> its not gonna be slower or faster than 123
22:20 < cellvia> context:  he made a hex table at the top
22:20 < cellvia> https://github.com/creationix/jsonparse/blob/master/jsonparse.js
22:21 < cellvia> I just dont understand why
22:21 < Kakera> hex is just more convenient when working with binary data
22:21 < trycatch> anyone can help me here?????
22:21 < context> very much
22:21 < Kakera> one hex digit = 4 bits
22:22 < cellvia> for comparison sake?
22:22 < context> cellvia: 0xXX == 1 byte. not easily done with decimal
22:22 < othiym23> trycatch: question too broad, try again
22:22 < cellvia> so then he IS working stright off the bfufer bytes?
22:22 < context> decimal you have anything from 0-255, its easier to read 2 chars
22:22 < othiym23> trycatch: or just look at https://github.com/visionmedia/mocha
22:22 < context> cellvia: line 112 says n = buffer[i]
22:23 < cellvia> sweet
22:23 < trycatch> othiym23: thks but i need links, blog posts or books
22:24 < cellvia> so yeah, i could see you taking ana pproach like this to make a buffer -> urlencoded string   
22:24 < cellvia> any reason why not?
22:25 < Kakera> it probably belongs in a pull request to node-querystring
22:25 < trycatch> Anyone pleasee?????
22:25 < cellvia> dude you are whiny lol
22:25 < trycatch> othiym23: answer to specific, try again.
22:26 < cellvia> i dont think theres any books for that
22:26 < context> trycatch: google.com
22:26 < cellvia> you might have better luck looking up javascript tdd in general
22:27 < context> trycatch: and please next time be more vague. you have given us WAY to much detail to be able to help you.
22:28 < cellvia> i second mocha recomendation
22:28 < trycatch> context: google - 1 085 000 results (0,31 seconds) 
22:28 < context> trycatch: looks like you got some reading to do
22:28 < context> 16:22   trycatch| othiym23: thks but i need links, blog posts or books
22:28 < trycatch> so none of you are doing tdd???
22:29 < context> you just got 1 million links. thats not enough ?
22:29 < cellvia> trycatch:  try this one http://en.wikipedia.org/wiki/JavaScript
22:30 < Kakera> it gets worse
22:31 < Kakera> Cipher.update from 'crypto' returns a binary string
22:31 < cellvia> ok ok, trycatch,  here http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#JavaScript
22:31 < Kakera> so I'd have to first convert it to a buffer, then call toString('utf8'), then encodeURICom[onent it
22:31 < trycatch> finally { 'im really really really really' + 'disappointed' }
22:32 < trycatch> THERE ISNT A REFERENCE FOR THIS IN THE NODE WORLD??????????
22:32 < cellvia> dude binary -> encodeURI do it
22:32 < cellvia> this is the reference trycatch, sorry :(
22:32 < Kakera> this won't work for bytes with a value higher than 127
22:32 < jrajav> trycatch: Many people do TDD in node, calm down
22:32 < context> trycatch: http://www.netmagazine.com/features/essential-javascript-top-five-testing-libraries?utm_source=javascriptweekly&utm_medium=email
22:33 < jrajav> trycatch: What kind of "reference" are you looking for exactly?
22:33 < context> trycatch: rage on bro !@#
22:33 < jrajav> trycatch: You seem to already know what TDD is. Shouldn't you just be looking for a useful framework, instead?
22:33 < jrajav> trycatch: After all, Javascript is a very flexible dynamic language; TDD is practically trivial
22:34 < context> https://github.com/joyent/node/wiki/modules#wiki-testing
22:34 < jrajav> You could do TDD armed with nothing but the assert module
22:34 < jrajav> But I recommend going with an assertion library like should.js or chai (my fave)
22:34 < context> but if you rage more you'd prolly get some more people happy to help
22:34 < jrajav> And for a test runner to make the output prettier than "oh good it didn't crash", I recommend mocha
22:37 < trycatch> context: your link is useless
22:37 < cellvia> trycatch are you going to ask to speak to the manager next?
22:38 < trycatch> jrajav: thks for the explanation.
22:38 < jrajav> No problem
22:38 < trycatch> jrajav: so to start i should go check chai with mocha?
22:38 < jrajav> That's what I do for most new projects; it's only one of many possible combinations
22:39 < jrajav> Most assertion libs and test runners are designed to be very modular and work with any other combination
22:39 < jrajav> It's purely a matter of preference
22:39 < jrajav> Read through the docs for them and decide for yourself
22:39 < context> trycatch: you should probably write some code that even needs to be tested first
22:40 < jrajav> context: Actually, doing the testing first is one of the whole points of TDD :P
22:40 < jrajav> red, code, green
22:41 < Domenic> Yay Chai!
22:41 < trycatch> jrajav: i dont know, maybe you re not the boss here. But you should.
22:41 < jrajav> Otherwise it's just "testing"
22:41 < Domenic> And Mocha!
22:41 < Kakera> http://pastie.org/5379535 what's going on
22:41 < trycatch> Bye all.
22:41 < jrajav> You heard hte man
22:41 < jrajav> :D
22:42 < Domenic> Chai is the best because it has pretty pretty plugins
22:42 < adlwalrus> jrajav: I actually started trying to figure out chai but I really just couldn't figure out what to do with it to get started.
22:42 < adlwalrus> jrajav: any pointers?
22:42 < Domenic> adlwalrus: what about our current doc site is lacking? :(
22:43 < adlwalrus> Domenic: /me pulls it up again
22:43 < jrajav> adlwalrus: Well, you don't really "get started" with chai; it's just an assertion lib. You use it to fail out of tests that you run with a test runner
22:43 < Kakera> shouldn't `buf` be equal `new Buffer(buf.toString())`?
22:43 < jrajav> adlwalrus: It would make sense to "get started" with mocha, because that actually runs things
22:44 < Domenic> ^ true
22:44 < adlwalrus> ah, ok.
22:44 < adlwalrus> maybe that's it.
22:45 < jrajav> adlwalrus: In mocha's examples, the "describe("blah", function () { it("blarg", function () {" part is mocha, and everything after that is up to you
22:45 < jrajav> You could just pull in node's assert module and use that
22:45 < adlwalrus> what's mocha's site?
22:45 < jrajav> http://visionmedia.github.com/mocha/
22:45 < jrajav> I actually use the TDD style instead of the default BDD (the describe/it), but it's up to you
22:46 < jrajav> If you do use one besides the default describe/it, note that you have to tell mocha with the --ui command line argument
22:46 < Domenic> I like BDD to keep my tests DRY: https://gist.github.com/3399842
22:47 < Domenic> In TDD with "arrange act assert" steps you often repeat the arrange step
22:47 < Domenic> With BDD you put the arrange in a beforeEach and change your act/assert in each test.
22:47 < adlwalrus> does -g-less "npm install" just install for the current user?
22:47 < jrajav> Err, you can do beforeEach with TDD style too
22:47 < Domenic> No it installs it in the current directory
22:48 < Domenic> jrajav I guess, but then you'd need one file per thing that you set up in beforeEach?
22:48 < Domenic> And you can't nest?
22:48 < jrajav> ?
22:48 < jrajav> I think we're talking about different things
22:48 < jrajav> I'm talking about the TDD style interface in mocha
22:48 < Domenic> Yeah. Let me expand that example.
22:49 < Kakera> why would converting a buffer to a string and back (using utf-8) not equal to the original buffer?
22:49 < jrajav> adlwalrus: Note that you can require things that are install without -g (and which go into node_modules in the current directory), but you can't call them on the command line without using their path; and vice versa for -g
22:50 < adlwalrus> I still don't get it.. it all just seems like gobbeldygook to me.
22:50 < jrajav> adlwalrus: What don't you get?
22:51 < jrajav> Are you having trouble installing node modules, or understanding mocha, or understanding TDD?
22:51 < Domenic> jrajav I don't see how to do stuff like this https://gist.github.com/3399842 (updated) in Mocha's TDD style without repeating setup code in each test
22:51 < adlwalrus> jrajav: I think TDD
22:51 < TehShrike1> If I'm console.logging(some_object) what would cause one if its properties that's an array or object to show up as [Object] instead of outputting its contents?
22:51 < Domenic> adlwalrus TDD as in "test driven development" or TDD as in the assertion style.
22:52 < adlwalrus> any of it.
22:52 < Domenic> Presentation here for anyone who doesn't get unit testing in general: http://www.slideshare.net/domenicdenicola/unit-testing-for-great-justice
22:52 < Domenic> It's more conceptual than practical though,.
22:52 < jrajav> adlwalrus: Well, don't worry about it too much; all it really means is that you include your module you're writing and then write tests over it. All the tests do is call your module like it would be called in the wild, and then make sure that the results are correct
22:52 < adlwalrus> jrajav suggested in ##javascript that I get with the program and try it out, but it's all very conusing so far.
22:53 < jrajav> I did? :P
22:53 < jrajav> Domenic: So, you do understand that there is beforeEach in TDD style too?
22:54 < Domenic> jrajav yes, but TDD style is flat, no nesting
22:54 < adlwalrus> jrajav: the only testable modules I have that might be called "in the wild" are DOM plugins, like a tooltip , and whatnot
22:54 < jrajav> Domenic: No, it's not
22:54 < jrajav> Domenic: You can nest as deep as you want
22:55 < Domenic> jrajav: oh! searching for examples now
22:55 < Domenic> oh wow
22:55 < Domenic> that changes everything
22:55 < jrajav> Domenic: Object values are suites, and function values are tests. before, beforeEach, etc. are special-cased keys; All other keys are the suite names or the BDD description
22:55 < jrajav> Yeah, the simplicity of it is the main reason I love TDD style
22:55 < Domenic> I feel dumb
22:55 < jrajav> Suites can contain other suites
22:55 < syskk> weird, im g etting this: Error: Protocol:https not supported.
22:55 < syskk>     at Object.exports.request (https.js:97:11)
22:55 < Domenic> Well that sounds like vows not mocha, right? Mocha uses suite(), test(), setup(), teardown().
22:55 < jrajav> It's very elegant
22:56 < jrajav> Well, internally, yeah, but externally it publishes these three interfaces
22:56 < jrajav> So that's what it "uses"
22:57 < Domenic> Hmm
22:57 < jrajav> Which is nice, because IMO the main value in Mocha is its incredible reporting
22:57 < Domenic> Well thanks for the enlightenment, in any case :D
22:57 < jrajav> So its actually syntax should be flexible yet simple
22:57 < jrajav> Which it is :D
22:58 < adlwalrus> meh, I think I'll pass for now. wait to catch the TDD bug some other time.
22:59 < Domenic> adlwalrus read my slides at least! :)
23:00 < adlwalrus> Domenic: I started to, before I realized that I'm on a mobile modem and paying for every precious kilobyte!
23:00 < Domenic> haha aww
23:00 < adlwalrus> by default, I have every webpage img blocked!
23:09 < Raynos> if im doing `ee.emit("thing", data, cb)`
23:09 < Raynos> what is a good way to refactor my code to not use events for calling async things
23:10 < Domenic> Raynos sounds like you want to change from events to method calls
23:10 < Raynos> yep
23:10 < Domenic> Generally events should be things that possibly-nobody cares about
23:10 < Raynos> but it feels weird to pass an object with methods into the interface
23:11 < Domenic> Hmm
23:11 < Raynos> I have a generic modal window that has a send button. It wants to call a method with data & cb and possibly render error or close itself
23:11 < Raynos> Modal({ sendMessage: callback }) feels weird API wise
23:11 < Domenic> No that's pretty standard I think
23:11 < Domenic> See jQuery UI dialog for example
23:11 < Raynos> I think its bullshit!
23:11 < Raynos> jQuery UI is a good example of how to not API design
23:11 < matbee> What?
23:12 < matbee> I don't think you want JavaScript
23:12 < Domenic> Yeah on the other hand UIs are tricky, events can be pretty idiomatic there
23:12 < Domenic> Hmm
23:12 < Raynos> UI is the hardest part of JS
23:12 < matbee> What?!
23:12 < matbee> I'm getting upset just reading this
23:12 < Domenic> Here's the question: should there ever be more than one person listening to the sendMessage event
23:13 < Raynos> nope.
23:13 < Domenic> Then yeah pass in a function
23:13 < matbee> Just use callbacks man
23:13 < Domenic> If it helps it's an options object one of the options is the sendMessage callback
23:13 < Domenic> As opposed to an object with methods
23:13 < matbee> WHAT ARE YOU TALKING ABOUT METHODS
23:13 < matbee> WHY
23:13 < Raynos> METHODS SHOULD DIE
23:14 < Raynos> WHY USE METHODS WHEN YOU CAN USE GOTO
23:14 < matbee> ffffff
23:14 < matbee> I have to go, I can't handle this conversation :P
23:14 < Domenic> WHY USE GOTO WHEN YOU CAN USE JMP
23:15 < Raynos> matbee: you need more troll defence
23:15 < Raynos> Domenic: LNGJMP GET IT RIGHT
23:15 < Raynos> matbee: seriously though, node is easy, modular browser UI things are hard.
23:16 < Kakera> + '&sessionkey=' + cryptedSessionKey.toString('hex').match(/.{2}/g).map(function(byte){return '%'+byte;}).join('')
23:16 < Kakera> wow I hate myself for writing this but at least it works
23:16 < Raynos> The other really hard thing in JS is naming functions
23:16 < Kakera> I can't believe there is no better way to do this
23:17 < Kakera> anyone?
23:20 < matbee> Raynos, I don't name functions anymore.
23:20 < Raynos> matbee: just GOTO <LINE>
23:20 < matbee> Not in the named-function so-to-speak
23:21 < Raynos> functions have names. Whether thats the variable name, property name or function declaration name
23:27 < CoverSlide|TPFR> iife's don't have names
23:33 < tnorris> can anyone give me a brief description of lib/module.js?
23:35 < Raynos> tnorris: it's internal magic :D
23:36 < TehShrike1> Do I have to add node_modules to my npignore files, or are they ignored by npm publish automatically?
23:36 < tnorris> Raynos: heh, understand that. i'm trying to do bug cleanup and there's a question about it. since it's "internal magic" I can't find any documentation whether the bug has been resolved or not.
23:37 < TooTallNate> tnorris: which issue?
23:38 < tnorris> TooTallNate: 624. seems the debate has died whether to expose require('native_module') to non internal code.
23:38 < tnorris> but want to make sure I understand how it works.
23:38 < TehShrike1> It would be annoying if I had to have a .npmignore file in every module, just for node_modules
23:38 < adlwalrus1> sorry, my connection broke out.
23:39 < tnorris> TehShrike: npm will also ignore anything in your .gitignore. so can just add node_modules to that.
23:40 < TehShrike1> This particular module happens to be in an SVN repository :-x
23:40 < Domenic> hssssss
23:40 < tnorris> hm.. sorry.
23:41 < Domenic> the svn, it burnsss ussss
23:41 < TehShrike1> :-P
23:41 < samholmes> Anything better than powershell for windows?
23:41 < TehShrike1> My company upgraded from SourceSafe about 5 years ago.  I can't complain too much.
23:41 < samholmes> I wish bash was on windows.
23:41 < Domenic> samholmes: Console2 and Git Bash are good
23:42 < tnorris> samholmes: cygwin
23:42 < samholmes> cygwin is a lie?
23:42 < Domenic> Cygwin and Node do not get along.
23:42 < EhevuTov_> TehShrike1, we're still on source safe. I use git locally.
23:42 < TehShrike1> eek
23:42 < tnorris> true. Git Bash is good.
23:43 < othiym23> I'm ready to not be the patron saint of domains anymore
23:43 < othiym23> isaacs: are you going to comment on this nodejs thread at some point?
23:43  * adlwalrus is using git bash right now
23:44 < aettinger> howdy
23:45 < adlwalrus> aettinger: yo yo yo
23:45 < aettinger> whaaassup
23:47 < Domenic> Oh dear, I see the dark underside of domains has come to light on the nodejs lists
23:47 < othiym23> Domenic: and how
23:48 < othiym23> I gotta find some time to take a stab at improving the docs, because I don't think the OP in that thread is in the wrong for not getting it
23:48 < othiym23> I gave a presentation on domains last week and it was pretty rough sledding (and only in part because I suck at explaining things)
23:49 < Domenic> Haha wow this trycatch package someone's pushing is horrifying
23:49 < aettinger> domains?
23:49 < othiym23> hey now, the guts of that is something that creationix wrote, and it's not super efficient, but it's not terrible
23:49 < Domenic> I don't know anything about the guts, just that the sample code is horrifying
23:50 < Domenic> oh I see
23:50 < Domenic> it's stepdown that's the horrible thing
23:50 < othiym23> most of that isn't trycatch, it's stepdown
23:50 < othiym23> yeah
23:50 < othiym23> I think stepdown is sort of an alternative-universe version of creatinix's step
23:51 < othiym23> trycatch is pretty cool, especially because it gives you long stacktraces by default
23:52 < othiym23> but based on my experiences with it (I was trying to use its hook function as the basis for something of my own), I believe it actually misses a bunch of edge cases domains catch
23:52 < Domenic> Mmm
23:53 < tnorris> TooTallNate: any idea about 625?
23:53 < Domenic> Promises solve all of this so that's what we use. Not for everyone though obviously, since I guess Node core is pushing domains as the idiomatic attempt-at-a-solution.
23:53 < othiym23> I know it wouldn't do what I needed it to (which is to tie state to call chains without modifying dev code), and the approach domains uses works perfectly
23:53 < Domenic> Yeah the not modifying dev code thing is the trick
23:53 < samholmes> console2 isn't bash?
23:54 < Domenic> samholmes I think it can host Git Bash but no it normally just hosts cmd.exe
23:54 < samholmes> tnorris: Git Bash doesn't allow me to select text. :\
23:54 < othiym23> Domenic: if everybody used promises, my life would be much simpler (i.e. all of the other async agent support for New Relic instruments frameworks built on promises -- Java's Play, Python's Twisted / Tornado, .NET's new async support, etc)
23:54 <@Nexxy> omg... *the* mikeal !?
23:54 < chilts> heh
23:55 < Domenic> othiym23 Well we wrap things in small promise libraries using Q.bind, e.g. https://github.com/domenic/dynamo-as-promised/
23:55 < tnorris> samholmes: iirc, that's a terminal thing. click in the top left, and check "Quick Edit"
23:55 < othiym23> I have been doing some real Macgyver shit for the last few months, and I'm pleased that I was able to simplify things the way I have
23:55 < EhevuTov_> I've been doing a lot of McGruber stuff
23:55 < samholmes> tnorris: no quick edit
23:56 < TooTallNate> tnorris: close'd
23:56 < samholmes> oh there's edit > mark
23:56 < othiym23> Domenic: a lot of the beta testers for the Node agent are way more interested in shipping features than mastering the niceties of Node, if you catch my drift
23:56 < samholmes> that's kinda dumb.
23:56 < tnorris> samholmes: http://www.howtogeek.com/howto/windows-vista/copy-to-the-clipboard-from-the-windows-command-prompt/
23:56 < othiym23> and if I'm being honest, a lot of my stuff is probably more McGruber than Macgyver as well
23:56 < Domenic> othiym23 haha yeah, sounds like a good use case for domains. it'll get you 80% of the way there I guess, just don't pool connections or use non-event emitters
23:57 < EhevuTov> I like the McGruber SNL skits. I wasn't a fan of the movie.
23:57 < othiym23> I actually use something like domains but way simpler, because I have control over both ends of async calls (thanks to heinous abuse of monkeypatching)
23:57 < samholmes> tnorris: I got it. thanks
23:57 < othiym23> I need to support Node < 0.8, at least for a while longer
23:58 < Domenic> MONKEYPATCH ALL THE THINGS
23:58 < othiym23> pretty much yeah
23:58 < Domenic> Although I prefer duckpunching as a term; it's more graphic
23:58 < othiym23> trying to do things in a way that doesn't totally destroy the v8 JIT's ability to optimize
23:58 < samholmes> git bash is powershell?
23:58 < tnorris> TooTallNate: awesome, thanks.
23:58 < othiym23> I sorta like "swizzling", if only because it implies drunkenness
23:58 < ChrisPartridge> bunch of swizzlers
--- Log closed Thu Nov 15 00:00:10 2012
