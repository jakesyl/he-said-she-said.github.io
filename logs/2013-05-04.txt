--- Log opened Sat May 04 00:00:09 2013
--- Day changed Sat May 04 2013
00:00 < s3shs> I am having the strangest domains bug.
00:00 < s3shs> If I assign a var to domain.active inside of a function in another file, it doesn't stick.  If I assign it in the same file where I create the domain, it's fine.
00:02 < s3shs> The function is called through _.bind() and from async.series().  If I move the code back to the domain file, it works.
00:02 < s3shs> I think I'm going to file a bug.
00:04 < keyosk> other_guy : connection pooling?
00:04 < keyosk> Are you making so many requests that untried requests are being queued massively?
00:05 < other_guy> hmmm
00:05 < keyosk> I mean if what you say is correct, 4.5 million calls because of your setImediate loop
00:05 < keyosk> I'm fairly certain the request library can't handle that many at once
00:05 < keyosk> the 'http' library
00:05 < other_guy> maybe, but that'd be true even in the case where I don't recursively call dispatch_op
00:05 < keyosk> Hm...
00:05 < Havvy> Node in general cannot handle 4.5M setImmediate loops at once.
00:06 < Havvy> Unless you don't care about when you get results.
00:06 < ljharb> wait, why do you need even one million anythings?
00:06 < other_guy> I'm not doing that many setImmediates
00:06 < other_guy> I'm just using setImmediate to do a non-blocking while loop by faking TCO
00:06 < keyosk> I thought you were saying that loop iterated 4.5 million times in 1 second, if that's so, then setImmediate would be called that many times
00:07 < other_guy> it just happens that on my machine that's about 4.5mil iterations per second
00:07 < ljharb> faking tco?
00:07 < other_guy> https://gist.github.com/nathanaschbacher/26daef4a3ad84c2ff1a9#file-leaky-js-L22
00:10 < Praox> Hey, can anyone help me? I'm getting this error: "Resource interpreted as Image but transferred with MIME type text/html" when sending a socket
00:10 < \malex\> when using restify, is it possible to see what route the request is being answered for from inside a formatter? i want to implement a text/html formatter that selects a template based on the route
00:12 <@konobi> \malex\: req.params?
00:14 < \malex\> konobi: that just gives me the bound params. the only way i see right now is parsing req.url myself to strip out the bound params
00:14 < \malex\> konobi: there is a req.route, but it's always undefined here
00:15 <@konobi> treating it as an object or an array?
00:16 < \malex\> konobi: i tried to console.log(req.params). that gave me an object with the bound params only. i may be doing it wrong then
00:17 <@konobi> \malex\: try req.params[0], req.params[1]
00:17 < \malex\> konobi: i just did, and i get undefined for both
00:18 < jschall> I'm trying to do client and server side rendering with dust.js, and I'm composing pages on the server out of templates nested 3 deep or potentially more. I want to establish a pattern for including styles inside <head> and scripts before </body> that will work on both the client and server. I'm currently using inline partials, but I'm not seeing how they will work on the client.
00:20 < \malex\> konobi: i also tried console.log(req), but i can't really see anything that looks like the route
00:20 <@konobi> \malex\: maybe it's only available in the route
00:22 <@konobi> \malex\: in which case, send it as a variable and pick it up in the formatter
00:22 < keyosk> Every time I see someone type \malex\: i'm wondering if they started typing a regex..
00:22 < keyosk> :/
00:22 < \malex\> konobi: send it as a property in the body?
00:22 < Seventoes> anyone know a good SMS provider that would be good for a node app?
00:23 < \malex\> keyosk: it's worse than that. there used to be clients that would crash when messaging me :D
00:25 < keyosk> :/
00:25 < \malex\> konobi: i'm not sure where i can even pick up the route object, except in the 'after' event on the server object (which is after the client has already received the response)
00:26 < keyosk> There's some strange ocd part of me which wants to flip your back slashes into forward slashes >_>
00:26 < Havvy> keyosk: You want his nick to be a regex?
00:26 < keyosk> Yes.
00:27 < \malex\> keyosk: hey, they are just the uppercase versions of |!
00:27 < keyosk> They're lower case versions of | :P
00:27 < keyosk> An upper case version of a | is a bong.
00:28 < keyosk> ^^
00:28 < \malex\> keyosk: upper case, lower case, same thing :D
00:28 < keyosk> No body likes my pipe joke ? :(
00:28 < Havvy> |malex|: Nickname is already in use.
00:28 < Havvy> He's right.
00:28 < keyosk> Hmm
00:28 < \malex\> Havvy: yep, it's in the irc rfc, along with the reasoning
00:29 < \malex\> 1459, iirc
00:29 < Havvy> Yeah, I read the spec.
00:29 < keyosk> "/nick /malex/" -> "/malex/ :Erroneous Nickname"
00:29 < keyosk> sad :(
00:29 < Havvy> I even wikified it:  http://irc-wiki/IRC_Specification
00:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:29 < \malex\> ah well, i'll hack on req.url i guess. thanks for looking, konobi 
00:30 < keyosk> I really am disappointed though, a room full of programmers and no body thought my pipe joke was humorous
00:30 <@isaacbw> you're looking for a room full of stoners
00:30 < Havvy> keyosk: Welcome to IRC.
00:30 < keyosk> :D
00:31 < Havvy> You could have said the uppercase of pipe was bomb.
00:31 <@mbalho> too soon
00:31 < keyosk> Youch.
00:31 < Havvy> mbalho: I wasn't making a joke about that. >_>
00:32 < keyosk> I feel like an uppercase pipe would be an intimidating character...
00:33 <@konobi> oh noes... he just ASCII'd me!
00:33  * Havvy UTF-7's konobi.
00:33 <@konobi> hey... this is a family friendly chat room!
00:33 < keyosk> In all seriousness, an upper case pipe would probably span two lines
00:34 < keyosk> :D
00:34 <@isaacbw> in all seriousness there's no such thing as an upper case pipe
00:34 < keyosk> Really?
00:34 < Havvy> Yes, really.
00:35 < keyosk> You mean I can't press shift twice and get an even larger pipe? Shucks
00:35 < \malex\> keyosk: in all seriousness, an upper case pipe would have a piranha plant
00:35 < keyosk> Ooh a mario joke, I like.
00:36 <@isaacbw> I think it's about time for me to play through super mario world again
00:36 < pachet> its always about that time
00:37 < keyosk> If even the smallest part of your brain desires a play through of SMW, then you need to drop everything and go for it.
00:37 < pachet> i can't start thinking about snes games
00:37 < pachet> my productivity will plummet
00:38 < keyosk> The problem with this conversation is how quickly my brain went to Legend of Zelda a Link to the Past :/
00:38 < keyosk> I can't think about SNES without thinking about that game
00:38 < pachet> yeah me too
00:38 < pachet> and also super metroid
00:39 < keyosk> One of my favorite TAS to watch is of super metroid
00:40 < keyosk> Although super mario 3 TAS are always insane.
00:41 < pachet> watching a super metroid one will just make me sentimental and sad
00:41 < pachet> memories of trying to wall jump as an 8 year old
00:41 < keyosk> I do remember seeing an ocarina of time TAS in college where the player keeps the character facing backward the entire game
00:41 < pachet> lol
00:41 < keyosk> There are minor moments that cannot be progressed without facing forward, but it's something like less than 5% of the total game time
00:42 < keyosk> That's still one of the most... wtf... game viewing experiences
00:42 < keyosk> It's like watching a full lenght feature film, it's still 2 hours, and you're looking at link's face the whole time
00:42 < \malex\> keyosk: TAS?
00:42 < keyosk> Tool Assisted Speedrun
00:42 < \malex\> ah
00:42 < keyosk> Imagine beating a game with 'perfection'
00:43 < \malex\> right, i get that. didn't know the acronym
00:43 < keyosk> Also imagine spending a week making a 2 hour play through
00:43 < keyosk> It's so tedius :/
00:45 < keyosk> I can't find that backward ocarina of time speed run
00:45 < keyosk> :/
00:45 < mscdex> node.js rules!
00:46 < keyosk> True that.
00:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:51 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:55 < d2dchat> anyone know of a node library that queues up data by number of calls to data ?
00:55 < d2dchat> like I want to queue up 1000 lines from a file
00:55 < d2dchat> and run a callback
00:55 < Technodrome> how can i do multiple sql queries and then render a template( express) 
00:55 < Technodrome> i don't want to put callbacks inside of callbacks for this 
00:56 < keyosk> You could use async
00:56 < keyosk> Run a parallel of queries, then when they're all done render
00:56 < mscdex> TechnoCat: use 'async' module or name your functions
00:56 < keyosk> Use async AND name your functions.
00:56 < keyosk> ^^
00:58 < dhzr> techno, middleware and async and naming your functions =D
00:58 < dhzr> you could just it all as middle ware, pass it through next, build a big object, nomnom
01:01 < mscdex> or you could start a child process that executes a PHP script which opens a unix socket and then you pass in your queries through the unix socket to PHP to execute and send the results back
01:01 < mscdex> :-D
01:01 < zomg> Genius!
01:01 < keyosk> Nah nah, just CP the mysql-client and write the select inline
01:01 < keyosk> :D
01:01 < dhzr> whoa, that sounds like the least amount of sloc out of all options...
01:02 < st_luke> dscape_: happy birthday :)
01:02 < mscdex> happy birthday node.js!
01:25 < atojs> howdy
01:25 < arnorhs> yo
01:25 < atojs> how do i get npm to use an alternate package.json?
01:26 < atojs> hi arnorhs 
01:26 < Stew-a> my npm is being somewhat annoying. I wanted to add a module as a dependency through a git url, and it works ok with npm install, but npm update is fetching the newest version from git, noting the new version number then ignoring the rest of the git checkout and asking the npmjs registry for the package and getting a 404 for some strange reason
01:26 < Stew-a> (the 404 is expected, the asking the registry is not)
01:31 <@konobi> Stew-a: see if there's an issue on the npm repo for what you're seeing
01:38 < Stew-a> konobi: just noticed i'm a couple of versions behind, updating then i'll try again first
01:42 < Technodrome> mscdex:  is this an elegant solution?
01:48 < mscdex> Technodrome: what?
01:50 < Stew-a> konobi: Turns out there is an issue on github - https://github.com/isaacs/npm/issues/1727 though it looks like two issues mixed together (one of git modules not updating unless the version number changed, and one of git modules being looked for on the registry when they shouldnt) anyway, i guess i'll have to work around it, thanks
02:14 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:04 < wankdanker_> significant whitespace < beer
03:09 < jschall> is anyone here highly familiar with dust.js?
03:14 < Technodrome> mscdex: is doing async for that type of thing, the recommended way?
04:02 < Trex005> Hello Node folks.  I was wondering if Node allows you to user backticks for multiline yet as is specified in ECMA Script 6
04:02 < Havvy> Trex005: If it's ES6/Harmony, no.
04:03 < Trex005> thanks
04:16 <@Nexxy> significant whitespace?!
04:16 <@Nexxy> that mbalho
04:36 -!- mbalho changed the topic of #Node.js to: Node.js - Today's debate topic: Is New Zealand the greatest country on Earth?! - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
04:45 < s5fs> mbalho: New Zealand - Great Country or The Greatest Country?
04:46 < Omid> I'm getting error while installing net-ping: sh "-c" "node-gyp rebuild"` failed with 1
04:46 < Omid> why is that error?
04:46 -!- mbalho changed the topic of #Node.js to: Node.js - Today's debate topic: New Zealand: Great Country or Greatest Country? - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
04:46 <@mbalho> s5fs: cheers
04:47 < Omid> I had the same error while compiling nodejs itself, but I added LINK=g++ make and it solved
04:48 < runvnc> juliana a chain of callbacks. or take a look at async modules series. or instead of stacking your callbacks, and indenting more and more just use a function name
04:48 < runvnc> I like to use coffeescript. makes callbacks and stuff less of a hassle and easier to read and write
04:49 < runvnc> and since there are always lots of callbacks I just indent two spaces instead of four
04:52 < runvnc> lol I just answered someone's question from like a long ass time ago who isnt even here
04:53  * mbalho slowclap
04:53 < runvnc> I guess xchat is too advanced for me
05:07 < lessthanzero> I'm having a hard time passing "global" instances of certain codebases around.
05:08 < lessthanzero> I want to move code into a require('./module'); but it's always a pain to get app or other instances passed along, what is good practice here?
05:09 < lessthanzero> (currently I am module.exports = app and attaching instances to the app in module.js)
05:10 < lessthanzero> (and it sucks) any insight on what I should be googling, pretty sure I'm using the wrong language ;)
05:11 < mashlol> lessthanzero: what do you mean by '"global" instances of certain codebases'?
05:15 < lessthanzero> mashlol: well, I create an instance of some lib, specifically handlebars. I create my `hbs` instance of the library, and I want to access it within require('./hbsExtras');
05:15 < lessthanzero> vs. including all of hbsExtras.js in my main app file.
05:16 < lessthanzero> `hbs` instance object has caches, compilations, configurations etc.
05:16 < runvnc> requires are cached
05:16 < runvnc> it will stay the same
05:16 < runvnc> 'global' module
05:16 < lessthanzero> hrrm..
05:16 < runvnc> except in very unusual circumstances
05:16 < runvnc> related to how you reference the file
05:17 < runvnc> are you sure you need to cache a handlebars template though
05:17 < lessthanzero> exphbs  = require('handlebars'); hbs = exphbs.create({config});
05:17 < runvnc> you can always attached to process
05:17 < runvnc> process.hbs = exhbs.create(config)
05:17 < lessthanzero> and that's not entirely poor design?
05:18 < runvnc> lol
05:18 < runvnc> because its a global
05:18 < lessthanzero> I have no idea.
05:18 < runvnc> therefore your application will explode?
05:18 < runvnc> or
05:18 < runvnc> since the requires are cached
05:18 < runvnc> at the top of exhbs
05:18 < lessthanzero> what if I created a new file
05:18 < runvnc> exports.globalthing = function() { make the thing) }
05:19 < runvnc> I mean, exports.globalthing = { blah: 'thing' }
05:19 < runvnc> its not going to change
05:19 < runvnc> exhbs.globalthing
05:19 < runvnc> is gonna stay the same everywhere you reference it
05:19 < runvnc> its cached
05:19 < lessthanzero> noticing that.
05:20 < lessthanzero> could I create a separate hbs.js ? and require that when I need it.
05:20 < runvnc> yeah thats called a module
05:20 < lessthanzero> right, sorty.
05:20 < lessthanzero> so create a new module, it exports my "global" exports.hbs = myInstance;
05:20 < lessthanzero> and since require caches, I won't recreate myInstance.
05:21 < runvnc> right
05:21 < lessthanzero> still learning how to pass infos around nicely ;)
05:21 < runvnc> easy to verify that is the case
05:21 < lessthanzero> yeah, I can manage that at least (or well, my other middleware will freak the heck out)
05:21 < runvnc> http://nodejs.org/api/modules.html#modules_module_caching_caveats
05:23 < runvnc> if you require('blah') in one place and there is a node_modules folder there but you require('blah') in another file in a different directory that has no node_modules but 'blah' is in the node_modules for your user, then it will be a different object
05:23 < runvnc> otherwise the same
05:25 < lessthanzero> runvnc: Thanks a lot, I'm going to go read that stuff. node.js is so very permutable. It's hard to see how things are working when migrating from diff programming backgrounds ;)
05:25 < runvnc> how long have you been using it
05:26 < lessthanzero> hrrm..
05:26 < lessthanzero> started a year ago.
05:26 < lessthanzero> really just turned the corner 3 months ago.
05:26 < lessthanzero> taught myself, so it was a bit of a curve to even faintly grok async like node.js does.
05:26 < runvnc> well I am still learning also
05:26 < lessthanzero> truth? I'm using express.
05:26 < jdsharp> lessthanzero: What's your background are you coming from
05:27 < runvnc> async is very hard to get used
05:27 < runvnc> everyone uses express
05:27 < lessthanzero> lol
05:27 < chrisdickinson> not everyone :|
05:27 < lessthanzero> I don't know how much longer.
05:27 < runvnc> not everyone but a lot
05:27 < runvnc> is that something that is not cool anymore?
05:27 < chrisdickinson> no no, it's one of the major frameworks
05:27 < lessthanzero> jdsharp: well, I suppose, php+mysql. although I've dabbled ALL over the place. but PHP still pays the rent well, actually no. node.js does now. but did for first 15 years or so.
05:27 < lessthanzero> meteorjs
05:28 < runvnc> I know its a major framework but I think maybe its not actually cool
05:28 < lessthanzero> it's pretty cool.
05:28 < lessthanzero> c
05:28 < lessthanzero> connect is cool
05:28 < jdsharp> lessthanzero: Ah, same here with the PHP background
05:28 <@mbalho> web apps are boring, the future is in robots and 3D
05:28 < chrisdickinson> haha
05:28 < chrisdickinson> +1 ^^
05:28 < lessthanzero> jdsharp: really hated php for past 2 years, since RoR was just all in my face.
05:28 < lessthanzero> maybe more years tbh.
05:28 < runvnc> my new contract is converting a PHP API to node
05:28 < chrisdickinson> 3d robots sculpting web pages from voxels
05:28 < lessthanzero> runvnc: lol nice.
05:28 <@mbalho> over p2p 
05:28 < lessthanzero> robots.
05:29 < lessthanzero> lol
05:29 < lessthanzero> I wish
05:29 < runvnc> chris for real? 3d robots??
05:29 < lessthanzero> it's why I learned how to program
05:29 < chrisdickinson> mbalho: p2p via sneakernet assisted by nodecopters
05:29 < runvnc> lol
05:29 < lessthanzero> I was thinking about html5/canvas live video.
05:29 < lessthanzero> not a stream, but like..
05:29 < lessthanzero> think MTV
05:29 < runvnc> I gotta pay better attention lol
05:29 < lessthanzero> with the titles.
05:29 < lessthanzero> anyway.
05:29 < lessthanzero> I gotta go make that universal programming decision.
05:30 < jdsharp> runvnc: that sounds slick
05:30 < lessthanzero> to make my app monolithic or not.
05:30 <@mbalho> all built with node: http://nodecopter.com/ http://voxeljs.com http://2012.nodeconf.com/theatre/elijah_insua.html
05:30 < lessthanzero> runvnc: you should paste the basic..
05:30 < lessthanzero> nm.
05:30 < lessthanzero> you did
05:30 < runvnc> lol jd I was just repeating something someone said
05:30 < lessthanzero> there are a few more things in express/node.js I need to do.
05:30 < lessthanzero> and then I'll dive into meteorks
05:30 < lessthanzero> *meteorjs
05:31 < lessthanzero> it's 100% reactive
05:31 < lessthanzero> blows me mind.
05:31 < lessthanzero> server, client reactive, with baked in deployment.
05:33 < runvnc> meteor is awesome
05:36 < madprops> what's wrong with socket.io's fallback?
05:36 < madprops> I mean is there's much of a difference?
05:37 <@mbalho> wat
05:37 < runvnc> I hope theres a difference. otherwise why did everyone spend so much time implementing websocket servers
05:37 < runvnc> lol
05:38 < madprops> I mean, does it still uses long polling?
05:38 < madprops> use*
05:38 < runvnc> you dont want to use long polling if you can use websockets
05:38 < madprops> ah
05:38 < runvnc> by definition fall back means a different mechanism
05:38 < runvnc> so if you are using long polling
05:39 < runvnc> or then you cant use long polling
05:39 < runvnc> then you would fallback to something that is not long polling
05:39 < runvnc> right
05:39 < madprops> right
05:39 < madprops> It's just that i'm evaluation the option of using that fallback in case socket.io can't be configured 
05:40 < madprops> evaluating*
05:42 < madprops> I don't really know what i'm doing really
05:42 < madprops> node.js is a really strange thing to me
05:43 < madprops> I noticed it fallbacks after a timeout
05:43 < madprops> I was wondering if I could just do that from the beggining
05:43 < madprops> but I don't even know if I would need socket.io at all
05:46 < runvnc> there are options you can pass to socketio
05:46 < runvnc> including which types of mechanisms to use
05:46 < runvnc> google socketio options
05:46 < runvnc> https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO
05:46 < runvnc> transport
05:58 < madprops> I see they put htmlfile above xhr-polling and jsonp-polling
05:59 < madprops> from the output I get I see it is using xhr polling
05:59 < madprops> so I'm wondering if I should put that on top
06:00 < runvnc> what are you using socket.io for
06:00 < runvnc> I think maybe you dont care what transport it uses
06:00 < runvnc> unless you notice a specific reason its not working for you
06:00 < madprops> it's for a web based terminal emulator
06:00 < madprops> it is working but after a certain timeout
06:00 < runvnc> you dont want to send every single keystroke
06:01 < runvnc> wait at least like 10ms before sending what they have typed
06:01 < runvnc> I think
06:01 < madprops> as it is now it does send every key stroke
06:01 < runvnc> when you say timeout
06:01 < runvnc> you mean that you are echoing the characters 
06:02 < runvnc> exactly how many milliseconds pass between the time they hit the key and the time it comes back and you display it?
06:02 < madprops> I mean like at the beggining, the terminal doesn't start immediately as if it is waiting for something
06:02 < runvnc> how many milliseconds does it take to send a regular http get request and receive the response?
06:03 < runvnc> oh like maybe socket.io is starting up
06:03 < runvnc> maybe socket.io is trying to use one transport
06:03 < runvnc> giving up
06:03 < runvnc> and going to a fallback
06:03 < madprops> I'm not sure I didn't write it. This is it https://github.com/c3ks/node-webterminal
06:03 < runvnc> so maybe if you change the transport option to start with something else or remove a transport
06:03 < runvnc> it will start up faster
06:04 < runvnc> well
06:04 < madprops> that's what I thought
06:04 < runvnc> how do you know the startup time has anything to do with socket.io anyway?
06:04 < madprops> I'm not sure, but I'm going to change the transport list and test it out
06:04 < runvnc> are you sure its not just loading a bunch of javascript/other files into an iframe or something and that is just the load time
06:05 < runvnc> does it have to do something on the back end?
06:05 < madprops> doubtful, it's almost a 10 second wait
06:10 < madprops> now it won't start
06:11 < madprops> like if it depends on websockets
06:12 < echo|> Anyone ever used winston to send to logstash? I'm seeing this issue/commit, but I'm not finding where I can set the option at. 
06:12 < echo|> https://github.com/flatiron/winston/pull/201
06:13 < runvnc> madprops its spawning an xterm
06:13 < runvnc> maybe that is taking awhile
06:15 < runvnc> I think maybe its taking a long time to connect though
06:15 < runvnc> why not throw some console.logs in there
06:15 < runvnc> copy the folder
06:16 < runvnc> I mean nvm
06:16 < runvnc> you already cloned it its not a module
06:16 < runvnc> see when it gets the socketio connection in app.js
06:16 < madprops> what would be a good place to put some logs?
06:16 < runvnc> and when the pty is down spawning the xterm and when it gets data
06:16 < runvnc> in the node.js files
06:16 < runvnc> app.js
06:16 < runvnc> and pty.js
06:16 < runvnc> if you have to
06:16 < runvnc> copy the pty.js module to a local folder
06:17 < runvnc> require pty/index.js
06:17 < runvnc> put console.logs in that
06:17 < runvnc> also inside of the browser side javascripts
06:17 < runvnc> or
06:17 < runvnc> you can use an actual debugger to trace it
06:17 < runvnc> like breakpoints and stuff
06:17 < runvnc> heh
06:23 < madprops> where can I find the modules? I have a node_modules folder with pty.js but it's an empty file
06:23 < madprops> I installed it via npm install
06:23 < runvnc> did you use npm -g
06:23 < madprops> hmm nope
06:24 < runvnc> clone the repo to a local folder
06:24 < runvnc> then require('pty/index.js')
06:24 < runvnc> actually
06:24 < runvnc> maybe you dont need the index.js I think
06:31 < madprops> hmm I upload the pty folder where app.js is
06:31 < madprops> and added pty = require('pty') to app.js
06:31 < madprops> but it says it can't find it
06:33 < ningu> madprops: should be in node_modules/pty
06:33 < ningu> also, why not just use npm?
06:35 < madprops> I did use npm before but without the -g flag
06:35 < Torsten> morning
06:36 < ningu> madprops: ok. well that should install it for you
06:45 < Omid> why npm keeps returning flock error?!
06:47 < ningu> Omid: maybe it can't find the right sheep.
06:48 <@konobi> Omid: unsupported platform perhaps
06:51 <@konobi> runvnc: keep your responses more compact please, otherwise we may think it's flood behaviour
07:01 < Torsten> i would like to output the worker.id of the worker process of 'cluster' module. on windows (dev environment) it's working fine, but if i run this on linux, i just get "TypeError: Cannot read property 'id' of undefined". anyone had same experience already?
07:01 < geNAZt> Torsten, do you have a piece of code so i can test it on my linux ?
07:02 < Torsten> sure, sec please
07:03 < Torsten> http://piratepad.net/wCkWSWqGN7
07:04 < ljharb> substack: omg did you fix tape for node 0.10? <3
07:12 < ljharb> substack: i'm not sure it's 100% fixed, since all my modules' tests don't pass, but deepEqual isn't infinite anymore!
07:12 < madprops> how can I modify a module installed with npm?
07:12 < Havvy> ljharb: How deep is it now?
07:13 < Havvy> madprops: It's all in your-module-dir/node_modules/their-module-name/
07:14 < Technodrome> i really feel like node.js is sorta the future of modern server side scripting 
07:14 < madprops> Havvy: the project's node_modules contains empty files
07:14 < geNAZt> Technodrome: could be
07:14 < Havvy> Technodrome: Careful making statements like that. ;)
07:15 < geNAZt> but it also can be golang
07:15 < Havvy> It could also be Rust.
07:15 < Havvy> Or maybe we'll all move to Ruby one day...
07:15 < geNAZt> or maybe php or java comes back
07:15 < geNAZt> who knows
07:15 < geNAZt> :D
07:19 < Technodrome> i mean, having one language to use is what most people would consider ideal
07:19 < Technodrome> i still like c# as a language beetter
07:19 < Technodrome> i think .net ha a great web framework as well that is all defined
07:19 < Technodrome> well*
07:20 < geNAZt> well i dont use node.js because i can write things in one language
07:20 < geNAZt> i use it because it is fast and its async
07:20 < geNAZt> that it is written in js is a nice side effect
07:21 < Technodrome> well , many people like the whole one language thing
07:21 < geNAZt> yes but in most cases i dont build frontend and backend
07:27 < Technodrome> the low latency of node.js apps is really good to 
07:28 < geNAZt> well its not "low", node.js has a latency like other web language also have. It depends on how you structure your apps, not in which language you write them
07:29 < geNAZt> for example, facebook is written in php, compiled by a phptoc compiler and run on a huge cloud
07:29 < geNAZt> and its fast
07:30 < Omid> ningu: what do you mean by sheep?
07:30 < Omid> konobi: I had the same problem while compiling nodejs itself, but I solved it by adding LINK=g++ make
07:31 <@konobi> Omid: sounds like a f*cked env to me
07:33 <@konobi> i've done it on osx, linux, bsd and solaris an never had a flock issue
07:34 < geNAZt> well i did it on two armv7 an both had that flock issue
07:34 < geNAZt> with debian
07:36 < Omid> konobi: i'm on linux and i have this problem with both centos 6 and fedora 4
07:36 < Omid> konobi: make: Entering directory `/root/projectsrc/node_modules/net-ping/node_modules/raw-socket/build' make: Nothing to be done for `all'. make: Leaving directory `/root/projectsrc/node_modules/net-ping/node_modules/raw-socket/build'
07:36 < Omid> konobi: this is when I compile with old make-3.80
07:37 < geNAZt> why so old versions 
07:38 < Omid> geNAZt: centos 6 isn't old, is it?
07:39 < geNAZt> fedora4 ?
07:40 < geNAZt> make 3.8
07:40 < geNAZt> from 2002 rly ? :D
07:43 < Omid> konobi: /usr/bin/env: node: No such file or directory
07:43 < Omid> konobi: why is that? what's the solution?
08:07 < Omid> I got it! the nvm was making the problem
08:07 < Omid> konobi: ningu nvm's fault
08:08 <@konobi> Omid: error between keyboard and chair
08:09 < Omid> it changes the version for me, but didn't change it for other users and root
08:10 <@konobi> Omid: error between keyboard and chair
08:11 < Omid> konobi: what do u mean?!
08:11 <@konobi> take it down to the simpliest option, and then work up from there
08:11 < Omid> konobi: your keeyboard and chair?!!
08:13 <@konobi> Omid: otherwise, hire someone who has a clue... your indications for hosting suggest that could be lacking. =0(
08:16 < Omid> konobi: i am hired to do so, so i will
08:17 <@konobi> Omid: or dear help us all
08:19 < ningu> hehe
08:19 < ningu> Omid: it might help if you had read the documentation on nvm
08:19 <@konobi> actually, you know what... this isn't rocket science... if you're being paid to assist folks, you don't need use to help out... otherwise you're just making a sham of the folks who've been around for a long time
08:19 < Omid> ningu: i have done that
08:19 -!- Omid was kicked from #Node.js by konobi [buh-bye]
08:19 < ningu> hehe
08:20 < ningu> oh well
08:20 <@konobi> dropping in with a version of make an then saying... uh...
08:20 <@konobi> kinda pita
08:22 < Omid> the person who did this, has no idea what the open source culture is
08:28 <@konobi> Nexxy: ping
08:41 <@konobi> ningu: if it was something other than /usr/bin/env...
08:41 <@konobi> =0P
08:42 < ericelliott> Has this already been done? https://github.com/dilvie/ofilter
09:00 < minibn> hello
09:00 < geNAZt> hi
09:00 < minibn> i have a question regarding routing in express
09:00 < minibn> is there any npm for URI segment based routing
09:01 < minibn> like what i can do in CodeIgniter (PHP framework) http://ellislab.com/codeigniter/user-guide/general/urls.html
09:01 -!- Omid was kicked from #Node.js by konobi [unfortunately SEMA has me screwed... bye]
09:01 < minibn> or is there any work around to do it?
09:02 < geNAZt> well you can use url segments
09:02 < geNAZt> app.get("/:class/:function/:id", function(req, res, next) {});
09:02 < geNAZt> for example
09:03 < minibn> i want it to be autodetect
09:03 < minibn> like what if i have a lot of routes, i have to define all of them?
09:03 < geNAZt> no
09:03 < minibn> lets say i have ./routes/user 
09:03 < minibn> ./routes/something
09:04 < minibn> ./routes/something2
09:04 < minibn> i want if to be auto detect
09:04 < geNAZt> yes
09:04 < geNAZt> its :something
09:04 < minibn> like http://domain/something/exported something
09:05 < geNAZt> a expressjs route /:class/:function/:id would match /blog/read/1234
09:05 < geNAZt> or /cms/content/1235646
09:05 < minibn> oh ya
09:05 < minibn> what if i want :id to be opts
09:05 < minibn> like i might have more than one paramter at the end
09:05 < geNAZt> then you must declare a second route
09:06 < geNAZt> first this /:class/:function/:id and then /:class/:function
09:06 < minibn> so its not that auto
09:06 < minibn> is there any way to make it auto grow?
09:06 < geNAZt> its the same amount of auto as in cake
09:06 < geNAZt> oO
09:06 < minibn> like in codeigniter i can do
09:07 < minibn> function($param_one_id, $param2, $param3, $param4)
09:07 < minibn> and it can be
09:07 < minibn> http://domain/controller/functionName/param_one_id/param2/param3/param4
09:07 < geNAZt> first: javascript has no must have parameters
09:08 <@konobi> NB... that kick was unfortunately for legal reasons (.ca) as the user was under UN embargo in Iran
09:08 <@konobi> =0/
09:08 < geNAZt> second: you define the parts of your route with parameters, the syntax is different the approach the same
09:08 < geNAZt> you map arguments onto a route
09:08 < geNAZt> app.get(route, handler); or in codeigniter via handler(routeparts);
09:09 < geNAZt> you can also create regex in express if you want to have optional parameters in the same route
09:09 < minibn> so its a lot of work
09:09 < minibn> :(
09:09 < geNAZt> no its not
09:10 < minibn> is there any npm that does it
09:10 < geNAZt> creating routes for you ?
09:10 < geNAZt> i dont think so
09:11 < minibn> it's not just for me, i think there are many people who wants to use this
09:11 < geNAZt> well whats wrong with writing app.get / app.post and creating routes ?
09:12 < minibn> it's kind of trouble some to add new app.get app.post everytime i create new stuff
09:12 < minibn> and the code becomes longer
09:13 < geNAZt> then you dont write good code if the code becomes longer if you add routes
09:13 < geNAZt> nodejs has a good module system for that
09:13 < geNAZt> you also can use DI for that kind of tasks
09:15 < minibn> ok, i will try with app.get('/:controller/:action:/param')
09:16 < Technodrome> in node do we have something like dir() ? 
09:17 < geNAZt> Technodrome, for reading dirs ?
09:17 < Technodrome> like in the browser
09:18 < Technodrome> for an object
09:19 < geNAZt> so you want to dump a object ?
09:19 < geNAZt> http://nodejs.org/api/util.html#util_util_inspect_object_options
09:19 < doomlaptop> i got a jade template issue here
09:19 < doomlaptop> http://paste2.org/m8JZ7pIX
09:20 < doomlaptop> never 
09:20 < doomlaptop> MIND
09:20 < doomlaptop> thanks for help
09:20 < doomlaptop> ll
09:20 < doomlaptop> lol*
09:22 < minibn> i made it like this http://paste2.org/pwm0Ik9D
09:22 < minibn> it works fine
09:22 < minibn> do you think it's ok?
09:22 < geNAZt> no
09:22 < geNAZt> its easy to crash
09:22 < minibn> how can i improve it
09:23 < geNAZt> first you should load all routes on init not on request 
09:23 < geNAZt> then each route file appends its own route onto expressjs
09:23 <@konobi> =0(
09:24 < minibn> i dont understand the second one
09:24 < ningu> you really don't want users of your app to be able to require() arbitrary files
09:24 < minibn> each route file appends its own route onto expressjs
09:25 < minibn> oh
09:25 < minibn> ya that s true
09:25 < geNAZt> well i can go to your app and request /nonexistingmodule/test/1
09:25 < geNAZt> and it would crash
09:25 < ningu> minibn: require('./routes/foo')(app); and then in routes/foo.js, module.exports = function(app) { app.get(...) };
09:25 < ningu> geNAZt: you could wrap it in try/catch, but it's still a bad idea :)
09:26 < geNAZt> yes bad idea is a bad idea
09:26 < geNAZt> even with domains, try/catch, forever or other kinds of error handling :D
09:26 <@konobi> i tend to agree
09:27 < minibn> so i have to require each file in routes manually?
09:27 <@konobi> yes
09:27 < minibn> like require('./routes/aa') bb cc dd and so on
09:27 <@konobi> well, that or just do a loop up front
09:28 < ningu> yeah, like ['aa','bb'].forEach(function (file) { require('./routes/'+file) });
09:28 <@konobi> for dirlist.forEach...
09:28 < minibn> i think this one would be nice require('./routes/foo')(app); and then in routes/foo.js, module.exports = function(app) { app.get(...) };
09:28 < minibn> ningu
09:28 < ningu> you could do that too
09:28 < geNAZt> or use a module require-all
09:28 < minibn> i will try
09:28 < geNAZt> or use index files
09:28 < minibn> so
09:28 < minibn> my understanding in ningu solution is
09:29 < minibn> using app.get in ./routes/aa.js bb.js
09:29 < ningu> right
09:29 < geNAZt> correct
09:29 < minibn> thats nice
09:29 < ningu> you have to pass in the app object to do that
09:29 < minibn> instead of using exports.something = function(){}
09:29 < minibn> ok i will try
09:30 < minibn> hold on
09:30 < minibn> thanks
09:30 < ningu> also, as geNAZt said you can have directories inside routes/ so you would have route/foo/index.js and require('./routes/foo') or whatever
09:30 < ningu> you should be able to find a way to locate the dependency logic where it belongs
09:30 < geNAZt> well i can make an example
09:30 < minibn> so i put the require looping inside routes/index.js?
09:30 < ningu> minibn: oh, I guess you could do it that way, sure
09:30 < minibn> i can do require(./routes) in the app.js
09:31 < ningu> var fs = require('fs'); var files = fs.readdir(__dirname);
09:32 < ningu> you would still have to add './' to the front of the path name, readdir() will just return the filenames
09:32 < ningu> and that assumes a flat structure
09:32 < ningu> but it sounds like there are modules for this already
09:33 < minibn> it's difficult for me to understand somehow
09:33 < minibn> ill try to implement it 
09:33 < minibn> right now
09:33 < geNAZt> http://hastebin.com/nudebagiwo.js
09:33 <@konobi> ningu... man, feels kinda shitty now...
09:33 < geNAZt> i would structure it so
09:34 <@konobi> then again... he got himself into getting looked into
09:34 <@konobi> still... =0/
09:35 < ningu> konobi: huh?
09:35 < ningu> talking about Omid?
09:35 < minibn> the hastebin looks nice
09:35 <@konobi> ningu: indeed
09:35 < ningu> konobi: I must have missed something
09:35 <@konobi> ningu: see my tweet
09:35 < minibn> but still to make to loop require 
09:36 < ningu> oh... why did you have to kick/ban someone because they're from Iran? is that actually a rule?
09:36 <@konobi> yes, export controls
09:37 <@konobi> now that we ship openssl, it's under regulations
09:37 < ningu> oh, you mean a nodejs rule
09:37 < ningu> what is the regulation exactly?
09:37 <@konobi> nope, like a law of the land
09:38 < ningu> so what does openssl have to do with it then?
09:38 <@konobi> security stuff (openssl, etc) are not allowed to be exported to syria, iran, north korea
09:38 <@konobi> regardless of OSS status
09:38 < ningu> ok, but how is talking to someone on irc doing that?
09:39 <@konobi> .us and .ca law restrict you from providing technical advice to tech that has that as a feature
09:39 <@konobi> =0/
09:39 < ningu> I suppose if he was asking for help on installing node, which he was
09:39 < ningu> ah, ok
09:39 <@konobi> or allowing someone else to
09:40 <@konobi> =0(
09:40 < ningu> it's not like they can't get openssl regardless
09:40 < ningu> but crypto laws have always seemed pretty stupid to me
09:40 <@konobi> well, it's not impossible
09:41 < ningu> what, not impossible to prevent them from getting it?
09:41 < ningu> I would say that it is
09:41 <@konobi> just download it from somewhere else
09:41 < ningu> even if you restrict it entirely online, someone can take it on their flash drive when they visit family
09:42 < ningu> and restricting it from being downloaded in iran is probably impossible too
09:42 < ningu> and they aren't going to search everyone's hard drive for openssl who could conceivably be going to iran
09:45 < geNAZt> wait what
09:46 < geNAZt> you are not allowed using openssl in iran ? oO
09:46 < minibn> it works nicely now!
09:46 < minibn> thank you very much!
09:46 < ningu> geNAZt: it's a US law, not an Iranian law
09:46 < geNAZt> trolololol
09:46 < ningu> according to konobi anyway
09:46 <@konobi> UN actually
09:47 < geNAZt> well how do browsers work in iran without openssl ? 
09:48 <@konobi> *shrug*
09:48 <@konobi> never been there
09:49 < minibn> i have another question
09:49 < minibn> is there anybody using mysql with node?
09:49 < ericelliott> geNAZt: I'm sure they actually have SSL in Iran -- we're just not allowed to send it to them, talk to them about it, help them install it, etc...
09:49 < ningu> minibn: yes. next question? :P
09:49 < minibn> which ORM do you use?
09:50 < ningu> I don't use mysql with node. but there is someone using it.
09:50 < minibn> im thinking to use squelize
09:50 < ningu> sorry to be annoying :P
09:50 < minibn> ooh
09:50 < minibn> :(
09:50 < ningu> I use gesundheit with postgresql
09:50 < ningu> but that's just a query generator
09:50 < minibn> im trying to convert my PHP app to node
09:50 <@konobi> badly designed ORM is worse than no ORM, tbh
09:51 < geNAZt> minibn, which database ?
09:51 < minibn> i was using Laravel which has pretty good ORM
09:51 <@konobi> eeeekkkk
09:51 < minibn> so i want to have the same way in node
09:52 <@konobi> wait... this is a php orm?
09:52 < geNAZt> yes
09:52 <@konobi> eeeeekkkkk
09:52 < minibn> laravel is a php framework that has good orm
09:52 < ningu> I was able to solve most of the things I might want an ORM to do at the database level
09:52 < geNAZt> https://github.com/1602/jugglingdb
09:52 < ningu> enforcing constraints, triggers, etc.
09:53 < ningu> I also made some views for common complex queries to make my life easier
09:53 <@konobi> ningu: seen Sqitch?
09:53 < ningu> nope
09:53 < minibn> that jugglingdb looks good, same implementation like sequelize
09:53 <@konobi> looks pretty sweet
09:53 < ningu> the ORMs I've seen for node don't work for enough use cases for me
09:54 < geNAZt> well it supports more databases
09:54 <@konobi> minibn: learn your sql, then work out if an ORM will fit
09:54 < ningu> I'm always doing a few queries they just can't do
09:54 < minibn> i was using full SQL when i was working with codeigniter
09:54 < minibn> no ORM
09:54 < minibn> so i want to use ORM now
09:54 < ningu> so I decided gesundheit was a good compromise -- lets me general pretty much all SQL I want
09:54 < minibn> for just simple basic CRUD stuffs
09:54 <@konobi> don't, don't tie your hands
09:55 < geNAZt> who takes such a bad name for module
09:55 <@konobi> don't fall for the rails legacy
09:55 < minibn> so using ORM is not a good idea?
09:55 < ningu> geNAZt: who knows, but it's very well conceived
09:55 < ningu> and the author is also very responsive
09:55 <@konobi> minibn: _really_ depends on the ORM
09:55 < minibn> how about this jugglingdb
09:56 <@konobi> minibn: best way to judge is what is the lowest object type for a row of data
09:56 < ningu> gesundheit is not perfect but it's good enough that I'm happy to use it
09:56 <@konobi> (if it's not resultset, skip it)
09:57 < ningu> konobi: sqitch looks useful I suppose but I only rarely need to migrate
09:57 < minibn> this jugglingdb seems to be resultset, although im not sure whats resultset
09:57 < ningu> and I don't usually trust ORMs for that :)
09:58 < minibn> so its better to use mysql-node?
09:58 < minibn> i mean node-mysql?
09:58 < ningu> I'm not sure what konobi means either, I assume he means the ORM should be able to return objects of types other than for the schemas you have defined
09:59 < ningu> so you could do an aggregate or whatever and it would be able to handle it
09:59 <@konobi> minibn: i can get a row of data (or many) that doesn't correspond to any data in any table... how would you represent that in an orm?
09:59 <@konobi> or any combo inbetween
09:59 < minibn> oh ya its annoying to get the special kind of object and not be able to do anything with it
10:00 <@konobi> no no
10:00 < minibn> i got what you mean
10:00 <@konobi> =0)
10:00 < ningu> node-postgres represents each row as a js object where the keys are column names
10:00 < minibn> it was the same in Laravel
10:00 <@konobi> it's the same either way, it's just a resultset
10:00 < ningu> where column is whatever you want it to be, sum(foo) as bar or whatever
10:00 <@konobi> could be random SQL data, or could be data from a table... should be represented the same
10:01 < ningu> there is no abstraction over the object to give it methods, but so far it's been good enough for my purposes
10:01 < ningu> node-postgres can also auto-inflate arrays and hstores
10:01 <@konobi> or joins, unions, inherited tables, etc. etc.
10:01 < ningu> so you can get pretty elaborate result "rows"
10:02 < ningu> I don't know if the mysql drivers do the same but maybe they so
10:02 < minibn> what i find useful from ORM is the basic CRUD stuffs
10:02 < ningu> s/so/do/
10:02 < minibn> i hate writting something like SELECT * FROM aa where aa = bb
10:02 < minibn> and INSERT for all the stuffs
10:02 < ningu> minibn: well, that's why I use an SQL generator :)
10:03 < minibn> oh
10:03 < minibn> how can i use it
10:03 < ningu> I wonder what SQL generators run on... not diesel... 
10:03 <@konobi> ningu: what!? no pgTap!?
10:03 < ningu> eh? I don't know what that is
10:04 < minibn> is this good
10:04 < minibn> https://github.com/Shanon/node-sql-generator
10:05 < ningu> minibn: I already mentioned that the one I use is called gesundheit. about five times :P
10:05 < minibn> i thought it was something else
10:05 < minibn> cos when i google it
10:05 < geNAZt> https://github.com/BetSmartMedia/gesundheit
10:05 < minibn> i found this one http://en.wikipedia.org/wiki/Gesundheit
10:05 < geNAZt> yes its a german word
10:06 < geNAZt> its the baddest module name for a module i have ever seen :D
10:06 <@konobi> ningu: it's worth checking out
10:10 < minibn> ORm is pretty similar with sql generator
10:10 < minibn> why people are using ORM
10:10 < geNAZt> ORM != DBAL
10:11 < minibn> i like ORM cos it has non static function that i can use easily
10:11 < minibn> like instancemethod
10:11 < geNAZt> well i dont like ORM because they are limited and tend to do magic that is hard to debug
10:11 < minibn> so which one do you think is better? ORM or sql generator?
10:12 < geNAZt> well it depends on which database system you are using ?
10:12 < minibn> how about mysql
10:12 < ningu> often when I debug my code I end up rebugging it later
10:12 < geNAZt> do you have much complex queries ?
10:13 < minibn> yes
10:13 < geNAZt> then use node-mysql
10:13 < minibn> maybe medium complex
10:13 < geNAZt> not an orm
10:13 < geNAZt> well queries that cant be handled via a generator or via an orm ?
10:14 < minibn> ya quite lots of em
10:14 < minibn> maybe about 20
10:14 < minibn> 20+
10:14 < geNAZt> well use the "native" node-mysql module 
10:14 < geNAZt> its the best for you i think
10:14 < ericelliott> is there a simple grunt task or utility to convert node modules to amd?
10:14 < minibn> yes
10:15 < minibn> the reason why i want to use ORM is my code might look simpler
10:15 < minibn> cos i started to use in laravel, it looks much better than in codeigniter where i use raw queries all the time
10:15 < ningu> minibn: it can be more complicated if you mix ORM and direct SQL
10:15 < ericelliott> ideally, I'd like to author all my modules in node module format, and then use a build step to output other versions.
10:15 < geNAZt> well it doesnt look simpler if you need to qirte queries so or so
10:15 < ningu> minibn: however, you should really investigate whether your queries can be written cleanly in an ORM or SQL generator
10:16 < minibn> actually some are impossible
10:16 < ningu> why are you so sure of that?
10:16 < minibn> because i made my database like 4 years ago
10:16 < minibn> in ORM they set primary key as id
10:17 < minibn> some of my schema uses "no" for primary key
10:17 < minibn> so i have to convert my database from no to id
10:17 < minibn> and there are lots of joins
10:17 < ningu> minibn: you can choose the name of the primary key in most ORMs
10:17 < minibn> because my application is a game
10:17 < ningu> join support varies
10:17 < minibn> i do lots of data aggregation
10:17 < ningu> it's fine in gesundheit
10:18 < minibn> not in the laravel ORM
10:18 < minibn> and sequelize
10:20 < minibn> in jugglingdb, why is it necessary to define schema
10:20 < minibn> its so troublesome
10:20 < minibn> in most node ORM i guess
10:21 < minibn> need to define schema, even in mongoose
10:21 < ningu> well, that's another reason I do that at the db level
10:22 < minibn> ok then ill just use node-mysql
10:22 < minibn> how do i organize the file structure
10:22 < ningu> gesundheit doesn't require a schema at all because it just generates the sql
10:23 < ningu> what does file structure have to do with anything?
10:23 < ningu> that's a question of your code
10:23 < minibn> im so used to php frameworks
10:23 < minibn> where everything is decided
10:24 < minibn> sql stuffs is in models
10:24 < minibn> controller
10:24 < minibn> views
10:24 < minibn> so now i hesitate to follow my instinct when doing node
10:27 < lochlite> Hello. I've been trying to implement my own tcp protocol parser. I want to inherit from the net module (to use connect and so on), but I can not get the inheritance to work.
10:29 < minibn> this one looks good https://github.com/keyle/node-mysql-crud/blob/master/api.js
10:29 < ningu> maybe the net module is intestate
10:30 < lochlite> This won't work: http://pastebin.com/FfBGDTVS  , would be happy if anyone would bother too look and discuss.
10:33 < lochlite> If i do: var net = include("net").Stream; it works. But when I then try to extend the _read function I get no response...
10:42 < stagas> konobi: if your law stops you from talking about something you should /leave not /kick
10:47 < ericelliott> stagas: It's a little more complicated than that.
10:55 < minibn> im implementing node-mysql right now
10:55 < minibn> so i put all the stuffs in ./models
10:55 < minibn> like lesson table will be ./models/lesson.js
10:55 < minibn> how can i make it accessible via variable Lesson
10:55 < minibn> in all the app
10:56 < geNAZt> global.Lesson = require('./models/lesson.js');
10:56 < ericelliott> NO!
10:57 < ericelliott> geNAZt: Don't tell him that.
10:57 < geNAZt> what ?
10:57 < minibn> what if i want to use ./models/index.js
10:57 < minibn> why?
10:57 < ericelliott> minibn: The right thing to do is require() it in the rest of your app.
10:57 < geNAZt> is it the "globals are evil" thing ?
10:58 < ericelliott> geNAZt: Yes, and that goes 1000x in Node, because as your project accumulates dependencies, the chances of your globals getting clobbered climbs fast.
10:58 < minibn> so its impossible to make it global?
10:59 < ericelliott> minibn: Not impossible, just stupid.
10:59 < minibn> ok then ill just use models.TABLE.function
11:00 < minibn> the coding style in node is just like im going back to codeigniter
11:00 < ericelliott> you want to make a global called models?
11:00 < minibn> not laravel
11:00 < djcoin> Hi all
11:00 < ericelliott> minibn: module.exports = myModel;
11:00 < minibn> i want to make all my models.js autoload
11:01 < ericelliott> var myModel = require(./path/to/models/myModel.js);
11:01 < minibn> all models/*.js
11:01 < djcoin> Is there some nice module somewhere that wraps the Listener and clean up actions that happen during stream piping (the internal of node's stream module) ?
11:01 < ericelliott> minibn: it doesn't work like that.
11:01 < geNAZt> minibn: use an Injector
11:02 < minibn> injector?
11:02 < djcoin> (without the piping part in fact - what I want is just to "pipe" two streams my own way except for the data - but i want error etc. to be propagated
11:02 < ericelliott> geNAZt: that's also probably not wise, because singletons can behave in unexpected ways with Node.
11:03 < minibn> whats the difference between module.exports and exports in simple term
11:03 < ericelliott> minibn: the right answer is to create an index.js in ./models. In that file, require all your models and export them with module.exports... then in all your other stuff, just require ./models/index.js
11:04 < ericelliott> globals, singletons in Node http://contemporarymusings.files.wordpress.com/2012/10/wordpress-chainsaw.jpg
11:04 < geNAZt> well as long as you dont alter the require cache nothing happens
11:05 < minibn> now im wondering if i should really convert my app from php to node
11:05 < minibn> :(
11:05 < geNAZt> also globals arent bad to use, you only should them usw wisely
11:05 < minibn> problem with routes, ORM, and models
11:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:07 < ericelliott> geNAZt: except that changing directory levels changes whether or not you hit the require cache when you try to access it.
11:07 < ericelliott> geNAZt: which can throw a monkey wrench in your singleton plans. =)
11:08 < geNAZt> yes but how often do you change the dir level in your app
11:08 < geNAZt> and also Injector != singleton
11:08 < geNAZt> i never said use singletons
11:08 < ericelliott> geNAZt: lots of projects have modules more than one dependency level deep.
11:09 < ericelliott> geNAZt: the injector itself is a singleton (or has singleton data).
11:09 < geNAZt> yes true but this doesnt change the behavior of the require system
11:09 < geNAZt> no the injector is not a singleton
11:09 < geNAZt> the node system itself makes it to one
11:09 < geNAZt> like every instance in an export is an singleton
11:10 < ericelliott> geNAZt: yes, it does, because the cache key is based on the string that you pass into require()... so if you have stuff in ./models and require that from ./foo and then require it again from ./foo/bar -- the module in ./foo/bar gets a different instance than the module in ./foo
11:10 < geNAZt> well not in every case
11:11 < ericelliott> geNAZt: the point is, you can't trust it to be a singleton in Node.
11:11 < geNAZt> if you have a structure like ./foo ./foo/bar ./models/index.js
11:11 < geNAZt> and you require them from foo or foo/bar you get the same cache hit
11:11 < geNAZt> well i dont do it
11:11 < geNAZt> and again i never said singletons are good in nodejs
11:12 < ericelliott> I've tried to use them, and been bitten by it. Which is why I'm warning people against trying to use them in Node.
11:12 < ericelliott> There are a few cases where it's good to make an exception.
11:12 < geNAZt> well i use them in few cases and they work well
11:12 < geNAZt> so
11:13 < ericelliott> For instance, I store my app configuration as a singleton.
11:13 < geNAZt> well i store my logger as a singleton
11:13 < geNAZt> and never had any problems with that
11:13 < ericelliott> me too
11:14 < ericelliott> but look at your require strings first if you ever find that you're getting multiple instances of your logger, and that causes problems. =)
11:14 < ericelliott> if they're different in different modules, that might be your problem.
11:15 < geNAZt> well that can only occur if you have a module in your app twice
11:16 < ericelliott> minibn: Node is really cool once you get used to it. Many companies have found it well worth the investment. I have been at three different companies with users in the tens of millions that have all invested in porting existing functionality to Node.
11:17 < ericelliott> geNAZt: not if you're using relative paths to require.
11:20 < minibn> what are some of the benefits they got from node
11:20 < minibn> other than the speed from non blocking
11:20 < minibn> this is the benefit im aiming right now
11:21 < geNAZt> concurrent connections, connection pooling, in memory status of clients
11:21 < geNAZt> and so on
11:22 < minibn> in memory status of clients is just like session isnt it?
11:22 < minibn> i dont understand fully three of those
11:22 < minibn> concurrent connections can I do that in php?
11:22 < minibn> connection pooling is socket.io isnt it?
11:23 < geNAZt> no in memory state of clients is when you have websockets and want to store connection specific stuff to a connection
11:23 < geNAZt> connection pooling in most cases is used for databases, they create like 20 connections to a database and use them instead of creating new database connection on each reqeust
11:24 < geNAZt> concurrent connection is something that your system admin has to care of, it mostly cares about the webserver (nginx, apache) and the amount of php processes which can be started
11:24 < geNAZt> the amount of concurrent requests / connections in php is very low compared to nodejs
11:25 < minibn> oh ya in php the app needs to go to the mysql connect code all the time
11:25 < minibn> while in node js, once you run node app the connection still exists
11:25 < minibn> is this what you mean?
11:26 < geNAZt> well it doesnt have one connection
11:26 < minibn> like in php needs to create new connection for each request
11:26 < geNAZt> in most cases the driver builds up 5-20 (depends on your config) connections at application init
11:26 < geNAZt> and uses them if they idle
11:26 < geNAZt> and creates new ones if you need them (no free ones available)
11:27 < minibn> how about in node-mysql
11:27 < minibn> it creates one connection at init
11:27 < minibn> and never disconnect
11:27 < minibn> until i exit the app
11:27 < minibn> isnt it?
11:28 < geNAZt> it has two types of connection handling
11:28 < geNAZt> it has the single connection thing
11:28 < geNAZt> and the pooling
11:28 < geNAZt> https://github.com/felixge/node-mysql#pooling-connections
11:29 < minibn> which one is better
11:29 < minibn> pooling or single connection thing
11:30 < geNAZt> pooling
11:30 < minibn> having multiple connection?
11:31 < minibn> pooling is like auto destroy connection when idle?
11:31 < geNAZt> no
11:31 < geNAZt> pooling never destroys connections
11:31 < geNAZt> except they give errors
11:31 < minibn> and without pooling they will destroy connection when idle?
11:32 < geNAZt> no
11:32 < geNAZt> with pooling => multiple queries at "one" time
11:32 < geNAZt> without pooling => one query 
11:32 < minibn> multiple queries in parallel?
11:32 < minibn> without pooling is serial?
11:32 < geNAZt> yes
11:32 < geNAZt> yes
11:32 < minibn> oh
11:32 < minibn> and its impossible to be done in php?
11:33 < geNAZt> well php dies after each request
11:33 < geNAZt> :D
11:33 < minibn> ooh
11:33 < minibn> so php is slow
11:33 < geNAZt> yes
11:33 < geNAZt> compared to nodejs
11:33 < minibn> why the documentation in node-mysql put pool in the middle of the page
11:33 < geNAZt> but there are technics for php like fpm which do process pooling
11:33 < minibn> not in the first
11:33 < geNAZt> and dont spawn on each request
11:34 < geNAZt> but its only changing for the system admin not for the dev
11:34 < geNAZt> because its new
11:34 < geNAZt> the old version doesnt had pooling inside
11:34 < minibn> it told me to do createConnection instead of createPool
11:34 < geNAZt> who told you ?
11:34 < minibn> the documentation
11:35 < minibn> why would people use createConnection if createPool is faster
11:35 < minibn> ...
11:35 < geNAZt> its not faster
11:36 < geNAZt> well i dont find the documentation that says dont use pooling
11:36 < minibn> it put pooling in the middle
11:36 < minibn> not in the first
11:37 < geNAZt> yes but only because pooling came after single connections
11:37 < minibn> ill use createPool now
11:41 < minibn> there are so many boilerplate if i use pool
11:41 < minibn> in each function of my model will contain pool.getConnection
11:41 < geNAZt> yes and ?
11:41 < minibn> :(
11:41 < geNAZt> you can write helper functions for this
11:41 < RLa> yeah, just wrap query function
11:42 < RLa> so it takes from the pool and later puts it back
11:42 < minibn> ok ill do that
11:47 < geNAZt> has someone ever got a Error: UNKNOWN while creating a writestream on windows ?
12:20 < rudiX> anyone using forever ?
12:20 < rudiX> i did some updated and the output now is "   --spinSleepTime not set. Your script will exit if it does not stay up for at least 1000ms"
12:21 < rudiX> can somebody explain me what is that means ... and how it affects my scripts
12:21 < myke> ?
12:22 < myke> i haven't used it but isn't it self-explanatory?
12:22 < rudiX> myke: what you use
12:22 < myke> you run your script...if nothing happens for a second it exits
12:22 < rudiX> actually they work 
12:23 < rudiX> i am not having traffic 
12:24 < myke> oh sorry reading now
12:24 < RLa> rudiX, i think this prevents excessive restart spam when your app fails right at start
12:24 < myke> if nothing happens for a second it restarts script
12:24 < RLa> hm
12:24 < myke> --minUptime      Minimum uptime (millis) for a script to not be considered "spinning"
12:24 < myke>     --spinSleepTime  Time to wait (millis) between launches of a spinning script.
12:25 < rudiX> like "fail loop"
12:30 < Torsten> fn'rudiX: had the same problem some days ago but hadn't time to look into it :(
12:31 < rudiX> Torsten: it's actually not problem .. but it may affects performance or i don't know
12:37 < geNAZt> does someone know some windows binaries with debug symbols in it ?
12:41 < minibn> i have a problem
12:41 < minibn> please help me
12:41 < geNAZt> tell us
12:41 < minibn> im trying to create models/index.js
12:41 < minibn> but it doesnt export 
12:41 < minibn> http://paste2.org/6yxky2bf
12:41 < minibn> i want to be able to
12:41 < minibn> var models = require('./models'); 
12:41 < minibn> and then
12:42 < minibn> models.user.get();
12:42 < minibn> do something like this
12:42 < minibn> and that user.get() is in models/user.js
12:43 < minibn> i also need to receive the passed variable db
12:43 < minibn> which is the pool = createPool({});
12:43 < minibn> db is the pool
12:43 < geNAZt> ok
12:43 < geNAZt> do you call the first function ?
12:43 < minibn> the first function?
12:43 < geNAZt> try var models = require('./models')(db);
12:44 < geNAZt> but i am not sure if nodejs does support dynamic changing export objects
12:44 < geNAZt> but it should
12:45 < minibn> its getting more confusing now
12:45 < geNAZt> why ?
12:46 < minibn> because i want to require in the routes/*.js
12:46 < minibn> require the model in there
12:46 < geNAZt> ah you want a dynamic 
12:46 < geNAZt> ok
12:46 < minibn> but the connection pool is defined in app.js
12:46 < geNAZt> now i got it
12:47 < minibn> i can do var models('./models')(pool) in the app.js because pool = mysql.createPool is defined in app.js too
12:47 < minibn> but i cant require('./models)(pool) in the routes/*.js
12:47 < geNAZt> yes one moment :D
12:48 < minibn> i already passed app to the routes/*.js, for the routing we talked about before
12:48 < minibn> thank you
12:48 < geNAZt> can you try that: http://hastebin.com/xohutoduyo.js
12:51 < minibn> ok ill try
12:54 < minibn> no i still cant
12:54 < minibn> :(
12:54 < minibn> it says undefined
12:54 < geNAZt> undefined what ?
12:55 < geNAZt> can you make a console.log(models); ate line 13
12:55 < ktk> hi guys
12:56 < geNAZt> hi
12:56 < minibn> the model is undefined
12:56 < minibn> in there it is ok
12:56 < minibn> console.log(models) it is defined
12:56 < minibn> but 
12:56 < minibn> in app.js
12:56 < minibn> i do
12:56 < minibn> var models = require('./models')(pool);
12:56 < minibn> and console.log(models);
12:56 < minibn> it says undefined
12:57 < geNAZt> yes
12:57 < geNAZt> because it doesnt return the models
12:57 < geNAZt> it changes its export
12:57 < geNAZt> you may require it new 
12:57 < ktk> anoyne got some pointers to source/modules which help handling ip packets? I try to implement an udp based protocol in a c-struct like way but I'm a bit right now
12:57 < minibn> like how?
12:58 < geNAZt> w8 i will rewrite my code
12:59 < minibn> i passed pool to my model/something.js too
12:59 < minibn> so many passing :(
12:59 < geNAZt> http://hastebin.com/vumobefilu.js
12:59 < geNAZt> can you try that ?
13:01 < minibn> it seem to work on app.js
13:01 < minibn> thank you, but i havent tried in the routes/*.js
13:03 < minibn> my functions inside models/*.js is not defined
13:03 < geNAZt> ?
13:06 < minibn> ill try to play around a bit
13:14 < minibn> my pool connection has error
13:14 < minibn> ...
13:16 < minibn> ok it seems to work now
13:16 < minibn> next problem is to be able to use models in routes/.js
13:17 < geNAZt> well it should work
13:17 < ktk> minibn: like this http://wiki.slimdevices.com/index.php/SlimProtoTCPProtocol#Client_-.3E_Server_Communications
13:17 < minibn> what is this
13:17 < geNAZt> just do var models = require('../models');
13:18 < minibn> how about the pool?
13:18 < geNAZt> you dont need to give it further
13:18 < geNAZt> because it is stored
13:18 < minibn> oh it can be like that
13:18 < minibn> i just changed the way it worked
13:19 < minibn> by using models.something = function(param, param, pool, callback)
13:19 < geNAZt> why that oO
13:20 < minibn> because it didnt work before
13:20 < minibn> ill try again
13:21 < minibn> spent like 6 hours just to bootstrap this porting to node
13:21 < minibn> is this normal
13:21 < geNAZt> no
13:21 < geNAZt> its the "first time" thing
13:21 < geNAZt> if you found your js "flow" it goes much faster
13:22 < minibn> in my model/something.js
13:22 < minibn> can i do this
13:23 < minibn> module.exports = new Something(pool);
13:23 < minibn> it says pool is not defined
13:23 < geNAZt> yes right
13:23 < minibn> i have to do module.exports = function(pool) { var Something = {somefunction:function(){};} return Something; )} ;
13:23 < minibn> ?
13:24 < geNAZt> correct
13:26 < minibn> should i define var pool = mysql.createPool in app.js or models/index.js?
13:26 < minibn> i guess it would be easy if i put it in models.index.js
13:26 < geNAZt> in app.js
13:27 < geNAZt> and then inject it in your models
13:31 < minibn> in your code
13:31 < minibn> it says if (models === null)
13:31 < minibn> how can models be null if it is defined above
13:31 < minibn> var models = {};
13:31 < geNAZt> well null is a value in js
13:31 < minibn> if i put the if 
13:31 < geNAZt> undefined is also a value
13:31 < minibn> and the else 
13:32 < minibn> it wont work
13:32 < minibn> like type error
13:32 < geNAZt> yes because i made an error
13:32 < minibn> when requireing ./models(pool)
13:32 < geNAZt> var models = {}; => var models = null;
13:32 < geNAZt> and it should work even with the if
13:33 < geNAZt> and it should inject the pool properly
13:33 < minibn> ill try
13:34 < minibn> now it gives different error when 				models[name.slice(0, -3)] = require('./' + name)(db); 
13:34 < minibn> cannot set property of null
13:34 < minibn> i just put models = {};
13:34 < minibn> below the if
13:34 < geNAZt> oO
13:35 < geNAZt> maybe it is the best to write a little models loader helper
13:35 < geNAZt> but this will add a little bit of api to your models/index.js
13:39 < minibn> i just get it work in app.js
13:39 < minibn> but doesnt work in routes/*.js
13:39 < geNAZt> well i would write a helper class for this
13:40 < minibn> put the helper class in the app.js?
13:41 < geNAZt> http://hastebin.com/ropuvefade.js
13:41 < geNAZt> and if you require('./models') in app.js call initModels(pool)
13:41 < geNAZt> and in the routes call getModels()
13:41 < minibn> oh
13:42 < minibn> thats a smart thing to do
13:42 < minibn> so models index is a singleton
13:42 < geNAZt> yes
13:42 < minibn> someone said singleton is not good for node
13:42 < minibn> the guy just now
13:42 < minibn> i forgot his nick
13:43 < geNAZt> because if you require it from different places it can be that you get another version of the file
13:43 < geNAZt> but this case is so unlikley
13:44 < minibn> oh
13:44 < minibn> ok ill try
13:48 < minibn> oh it works!
13:48 < minibn> thank you very much
13:48 < minibn> but i still worry about this singleton
13:48 < minibn> for now i guess its ok
13:48 < geNAZt> well you should care about it if you hit a bug with it
13:49 < geNAZt> but i dont think you will ever hit a bug with it
13:49 < bet0x> Hello all
13:49 < geNAZt> hi
13:49 < minibn> my app is really data intesive app
13:49 < minibn> so i worry
13:49 < bet0x> need some advice, for some reason this example doesn't work (it start but when i browse i can't connect: https://raw.github.com/voronianski/realtime-geolocation-demo/master/server.js
13:50 < geNAZt> minibn, really there is nothing to worry about
13:51 < minibn> thank you!
13:54 < bet0x> Hello, need some advice, for some reason this example doesn't work (it start but when i browse i can't connect: https://raw.github.com/voronianski/realtime-geolocation-demo/master/server.js  !
13:54 < RLa> hm, mongolab has low cpu?
13:54 < RLa> or just slow io :)
13:55 < RLa> bet0x, you need to debug what exactly is not working
13:55 < bet0x> ok, how?
13:55 < bet0x> :D
13:56 < bmatusiak_> bet0x www.c9.io
13:57 < bet0x> or just debug
13:57 < bet0x> and next next? :D
13:58 < bet0x> i rly can't see the error
14:00 < bet0x> this is a mess
14:00  * bet0x *.*
14:01 < geNAZt> well remove the request.addListener
14:01 < geNAZt> and move the files.serve(request, response); in the first line of the handler function
14:03 < bet0x> geNAZt weird
14:03 < bet0x> geNAZt it didn't go KBOOM, so thank you! :D
14:03 < geNAZt> no it isnt :D
14:04 < geNAZt> because the request is ended if you get it into your handler
14:04 < minibn> now i have to convert my views
14:04 < minibn> from html to jade :(
14:04 < minibn> is there any tool to convert them
14:04 < geNAZt> why jade oO
14:04 < bmatusiak_> bet0x     http://gettest.bmatusiak.c9.io/index.html  this is the running example
14:04 < geNAZt> what template engine do you use now ?
14:04 < bmatusiak_> bet0x https://c9.io/bmatusiak/gettest this is the link
14:04 < minibn> because i think jade is better
14:04 < bmatusiak_> to code
14:05 < minibn> i use laravel blade
14:05 < minibn> in node i use jade
14:05 < minibn> because it has template inheritance
14:05 < minibn> i like it
14:05 < geNAZt> well i hate jade
14:05 < minibn> i like ejs, but jade seems to have most of the features i need
14:05 < minibn> but i hate writing jade
14:05 < geNAZt> maybe you should look into swig
14:05 < geNAZt> http://paularmstrong.github.io/swig/
14:06 < bet0x> bmatusiak i hate you
14:06 < minibn> wth
14:06 < bet0x> :>
14:06 < minibn> why you hate him?
14:06 < bmatusiak_> bet0x yea why :)
14:06 < bet0x> he's a show off
14:06 < bet0x> :P
14:06 < minibn> does swig has template inheritance?
14:07 < geNAZt> yes
14:07 < minibn> really
14:07 < geNAZt> yes
14:07 < bmatusiak_> bet0x lol not as much as i want to but i do like too..  show off :P
14:07 < geNAZt> do you know twig in php ?
14:07 < minibn> oh ya
14:07 < minibn> http://paularmstrong.github.io/swig/docs/#inheritance
14:07 < minibn> no
14:08 < geNAZt> swig = twig in nodejs
14:08 < minibn> oh
14:08 < bet0x> bmatusiak_ for some reason the "location" works for ya, but not on my server
14:08 < minibn> it only has hundreds of stars on github
14:08 < minibn> while jade has thousands
14:09 < minibn> which one should i trust
14:09 < geNAZt> well i hate jade
14:09 < bmatusiak_> bet0x what OS is your server... lol and did you do npm install 
14:09 < bet0x> the one who make your job easier and simple
14:09 < geNAZt> because html => jade => html
14:09 < geNAZt> wtf
14:09 < bet0x> no template engine will beat plain html NEVER! :P
14:10 < bmatusiak_> i like EJS
14:10 < bet0x> bmatusiak_ Linux CentOS
14:10 < geNAZt> swig is the best html template engine in nodejs
14:10 < minibn> EJS doenst have template inheritance
14:10 < minibn> sucks
14:10 < geNAZt> and it isnt limited on html
14:11 < minibn> i already did express --jade
14:11 < minibn> can i change the template engine i use
14:11 < SomeoneWeird> ejs does too have inheritance
14:11 < minibn> really?
14:11 < minibn> like this http://paularmstrong.github.io/swig/docs/#inheritance
14:11 < minibn> the block thingy
14:12 < SomeoneWeird> <% include file.ejs %> ?
14:12 < SomeoneWeird> https://github.com/gett/pejs
14:13 < minibn> its like another npm extension
14:13 < minibn> only 7 stars
14:14 < geNAZt> well dont search your npm modules via stars on github
14:14 < geNAZt> you should read the docs and look which fits the most
14:14 < minibn> its easier to see if it fits me or not
14:14 < minibn> but the stability
14:14 < minibn> trust
14:14 < minibn> and the project continuity
14:15 < minibn> i worry about those
14:15 < geNAZt> well if you want to see stability you should look at the issue browser
14:15 < geNAZt> what bugs are opened
14:15 < geNAZt> how many are closed
14:15 < geNAZt> last commit time 
14:15 < geNAZt> and so on
14:15 < minibn> i see that too
14:16 < minibn> but i cannot tell 
14:16 < minibn> swig has 31 issues
14:16 < minibn> and this pejs has 0 issues
14:17 < minibn> is there anybody who likes jade?
14:17 < standoo> minibn: me
14:17 < standoo> minibn: I like jade
14:17 < minibn> so there is someone who likes jade
14:17 < minibn> do you recommend me to use jade or swig?
14:17 < bet0x> bmatusiak_ maybe is because i run the app with a :8080 ?
14:18 < deoxxa1> "hi, do you like chocolate ice cream" "yes" "do you think i should have chocolate ice cream" "yes"
14:18 < standoo> deoxxa1: haha
14:18 < standoo> my advice try jade first
14:18 < standoo> if you don't like it go to swig
14:18 < minibn> i like the cleanness of jade
14:18 < standoo> minibn: also has good documentation
14:19 < minibn> ya jade has a lengthy documentation
14:19 < geNAZt> but its limited to html
14:19 < geNAZt> and you need to learn new syntax
14:19 < standoo> geNAZt: that's true
14:19 < minibn> what else can you use?
14:19 < minibn> with swig
14:19 < minibn> other than html
14:20 < geNAZt> xml, json, word, xslx
14:20 < standoo> ejs
14:20 < minibn> oh
14:20 < standoo> minibn: what's the templating language for?
14:20 < geNAZt> emails, csv, 
14:20 < geNAZt> and so on
14:20 < minibn> i thought it was only for HTML
14:21 < geNAZt> swig ?
14:21 < minibn> template language
14:21 < bmatusiak_> bet0x mabe
14:21 < geNAZt> well you can write "templates" for everything
14:21 < standoo> minibn: i am lost in the discussion
14:21 < standoo> minibn: let's start with a question
14:22 < minibn> ok
14:22 < standoo> minibn: a specific one
14:22 < minibn> developing with node is confusing
14:22 < standoo> minibn: so that the discussion is in the right context
14:22 < bmatusiak_> bet0x i also removed the addListener like geNAZt segusted
14:22 < minibn> i have to make so many choices which module should i use
14:23 < standoo> minibn: what are you making?
14:23 < minibn> an app
14:23 < minibn> porting from php to node
14:25 < bet0x> bmatusiak_ can you tell me what you did to get that working? was just the         files.serve(request, response); on the handler?
14:48 < bmatusiak_> yup
14:58 < Diable> How to have node-waf on Windows ?
15:00 < bmatusiak_> Diable use node version v0.6.x
15:00 < Diable> It isn't possible with last version ?
15:00 < geNAZt> Diable for what do you need node-waf ?
15:00 < pachet> lol
15:00 < geNAZt> no it isnt
15:00 < Diable> I want ot install db-mysql instead of mysql with Node.js
15:01 < geNAZt> and thats why ?
15:01 < geNAZt> the most modules that require node-waf are outdated
15:01 < minibn> oh mysql people
15:02 < minibn> why db-mysql?
15:02 < Diable> db-mysql is easier to use
15:02 < geNAZt> and db-mysql should work with node-gyp
15:03 < standoo> ah
15:03 < Diable> Otherwise, how to return something in a var with a query of mysql module ?
15:04 < geNAZt> Diable, and thats the bad thing about db-mysql
15:04 < geNAZt> you are able to get results into a variable
15:04 < geNAZt> via returning
15:04 < RLa> wtf, ejs has no conditionals?
15:05 < Diable> How ?
15:05 < geNAZt> RLa ofc it has oO
15:05 < minibn> it doesnt have connection pooling
15:05 < minibn> db-mysql
15:05 < geNAZt> wel you could build one
15:05 < geNAZt> but it does block on the execution of mysql
15:05 < RLa> geNAZt, but is that documented?
15:05 < geNAZt> which is the baddest thing you could do
15:06 < geNAZt> RLa, it doesnt need to
15:06 < geNAZt> ejs is normal js in js
15:06 < geNAZt> jsception if you want :D
15:06 < minibn> i guess node-mysql is better
15:06 < Diable> I want to return true or false with a query, how to dot that ?
15:06 < minibn> this db-mysql is old
15:07 < minibn> and its written in C
15:07 < geNAZt> well for example in node-mysql you get your result into a callback parameter
15:07 < minibn> in db-mysql too
15:08 < txdv> there is a pure js implementation of mysql
15:08 < Diable> The node-mysql doc isn't clear.
15:08 < minibn> it's clear for me
15:08 < minibn> and it supports connection pool
15:09 < Diable> I can't have a return into a var with it
15:09 < Diable> It doesn't works.
15:09 < minibn> its not good returning to var
15:09 < geNAZt> with db-mysql you cant do it either
15:09 < minibn> because it is aync
15:09 < minibn> async
15:09 < minibn> non blocking
15:10 < minibn> i think im sticking with node-mysql
15:10 < minibn> Diable
15:10 < minibn> which template engine do you use?
15:10 < Diable> I only want to return true if the query works and false if it has an error
15:10 < Diable> I use ejs template
15:10 < minibn> do you know swig?
15:11 < minibn> geNAZt said swig is really good
15:11 < Diable> Yes, I know it but I use express
15:11 < minibn> you can use swig with express
15:11 < minibn> now im deciding which one to use
15:11 < Diable> I prefer ejs
15:11 < minibn> jade or swig
15:12 < Diable> jade is good too but I prefer ejs
15:12 < minibn> ejs doesnt have template inheritance
15:13 < Diable> It has template inheritance with include
15:13 < minibn> not with block and stuffs
15:13 < Diable> It isn't so important
15:14 < minibn> its important when you know the good about it
15:15 < Diable> And I have already changed for ejs, it's complicated to change to another language
15:16 < Diable> And it can't solve my problem
15:17 < Diable> My problem is in js (server side) note client side
15:17 < minibn> ya i hate converting my html views from php to jade
15:17 < geNAZt> well use swig
15:17 < geNAZt> jade sucks balls
15:17 < minibn> but jade looks really clean
15:17 < nfour> ECT master race
15:17 < geNAZt> you have to learn jade syntax
15:18 < geNAZt> and if you want to write anything else than html lyou are screwed
15:18 < Diable> I don't want to change that, I just want to return a var form a mysql query
15:18 < minibn> it can learn it i just hate converting it
15:18 < nfour> ejs for embedded JS, ECT for embedded coffeescript. DONE.
15:18 < minibn> i can learn it *
15:18 < geNAZt> coffee in a template oO and i tought coffeescript in normal js is the hell on earth
15:18 < minibn> i can convert jade to html easily using jade command line
15:18 < Diable> I know how to use jade and I prefer ejs syntax
15:19 < geNAZt> yes but why ?
15:19 < nfour> geNAZt, thats just shallow thinking
15:19 < geNAZt> you need to compile from jade to html every request
15:19 < geNAZt> then why dont you write in html ?
15:19 < minibn> nfour do you like jade?
15:19 < geNAZt> these "oh its ugly i need another language" things are ugly as hell
15:20 < nfour> jade, not really. it redefines essentially a new language
15:20 < nfour> hence why "ebedded" templating engines make sense
15:20 < minibn> what template engine do you use?
15:20 < minibn> nfour
15:20 < nfour> ECT
15:20 < minibn> another 
15:20 < minibn> ...
15:20 < nfour> i wanted to use toffee, but it runs like horse shit
15:20 < minibn> confusing
15:20 < geNAZt> its coffeescript
15:20 < nfour> not confusing
15:20 < geNAZt> forget about it
15:20 < nfour> choose, and move on with life
15:21 < minibn> JS is sooooooo ...
15:21 < minibn> too many options
15:21 < nfour> its either that or make a html template and minipulate its DOM from node
15:21 < Diable> Why a callback with mysql module can't modify a var ?
15:21 < geNAZt> well use expressjs with node-mysql with a swig or ejs template engine and everything is fine
15:21 < nfour> minibn, you sound the dumb, stop  complaining about stupid shit
15:21 < geNAZt> Diable, what ?
15:21 < geNAZt> ofc it can
15:22 < Diable> How ?
15:22 < minibn> you can
15:22 < minibn> var someVar = {}
15:22 < geNAZt> Diable, How not ?
15:22 < nfour> yikes i must be on @ paki times. abandonship
15:22 < minibn> query(function(result) {
15:22 < geNAZt> what does db-mysql do that you cant do with node-mysql ?
15:22 < minibn> someVar = result
15:23 < minibn> something like that
15:23 < minibn> you cant do select().where()
15:23 < Diable> I tried that but it doesn't works with me
15:23 < minibn> in db-mysql you can do select.where thingy
15:23 < minibn> but db-mysql sucks for raw query
15:23 < geNAZt> which is only a query builder
15:24 < minibn> cos it doesnt support SELECT * FROM WHERE something = ?
15:24 < standoo> nfour: interesting comment
15:24 < minibn> you have to use SELECT FROM WHERE something = escape()
15:24 < Diable> I use node-mysql not db-mysql because of node-waf
15:24 < minibn> you said you were using db-mysql
15:25 < Diable> No, I wanted to use that but I can't with Windows because of node-waf
15:25 < minibn> Diablo
15:25 < minibn> maybe you want to use tht var
15:25 < minibn> right after the callback
15:25 < minibn> but not inside the callback
15:25 < minibn> remember async
15:25 < geNAZt> well what is the issue that you want to switch to db-mysql ?
15:25 < minibn> no im not switching
15:26 < minibn> im sticking with node-mysql
15:26 < geNAZt> @Diable
15:27 < minibn> Diable you need to use the var inside the callback
15:27 < minibn> var something = {}; \n
15:27 < Diable> Yes to edit it
15:27 < minibn> in that case you dont need the var
15:27 < Diable> But it doesn't work out of the callback
15:28 < Diable> It modify the variable only into the callback
15:28 < minibn> ill use swig
15:28 < geNAZt> what ?
15:28 < minibn> ffs
15:28 < minibn> move on with life
15:28 < geNAZt> Diable, do you have a pastie or a gist ?
15:28 < Diable> ?
15:28 < geNAZt> a piece of code
15:28 < geNAZt> what you expect it to do
15:28 < geNAZt> and what it doesnt do
15:29 < geNAZt> so we can help you with your problem
15:29 < geNAZt> because it dont understand the problem
15:29 < minibn> what editor do you use?
15:29 < minibn> i use vim
15:29 < geNAZt> i use webstorm
15:29 < Diable> https://gist.github.com/Guillaume11/6c95a93ab8b10cfecf5b
15:30 < geNAZt> on debian i use nano, under ubuntu i use webstorm, on windows webstorm, on web i use nide
15:31 < geNAZt> connection.query('INSERT INTO ...', function(err, result) { if(err) ret[0] = false; else ret[0] = true });
15:31 < Diable> I tried that but it doesn't work too
15:32 < minibn> is this on node-mysql
15:32 < Diable> yes
15:32 < minibn> what do you wanna do with ret?
15:32 < geNAZt> its the same as the example you posted
15:33 < minibn> if you wanna do something with the ret
15:33 < minibn> do it inside the on('result', function() { });
15:33 < Diable> I want to test this var to do something in the ejs file
15:34 < minibn> then compile it inside that function too
15:34 < minibn> compile the ejs inside that function too
15:34 < minibn> not outside after that
15:34 < minibn> it wont work
15:34 < minibn> unless that query is really really fast
15:34 < Diable> why ? I will do that 2 times
15:35 < minibn> because its async
15:35 < minibn> the ret variable wouldnt change after mysql finish with that query
15:35 < minibn> while javascript go to the next line
15:35 < minibn> next block of the code
15:36 < geNAZt-laptop> well you also could use a reduces object for this task
15:36 < minibn> swig works perfectly on IE?
15:37 < geNAZt-laptop> the async module has some nice feature for that
15:37 < geNAZt-laptop> minibn, why IE ?
15:37 < minibn> becos i wanna share the view
15:37 < minibn> with backbone.js
15:37 < geNAZt-laptop> ah okay
15:37 < standoo> geNAZt-laptop: you on laptop?
15:37 < geNAZt-laptop> yes
15:37 < geNAZt-laptop> on my ubuntu one :D
15:37 < minibn> im using mac
15:37 < standoo> geNAZt: what happened to the normal laptop?
15:38 < minibn> mac mini and macbook pro
15:38 < geNAZt-laptop> "normal" ?
15:38 < standoo> geNAZ: i mean the nomal PC
15:38 < geNAZt-laptop> i have a desktop pc a laptop a tablet and a netbook(which is my dev server)
15:38 < geNAZt-laptop> and currently i am out due to the great weather
15:38 < geNAZt-laptop> and moving a complete desktop pc is not the best to do :D
15:38 < standoo> geNAZt: nice
15:39 < standoo> geNAZt-laptop: i have made a bold decision to allow ssh
15:39 < geNAZt-laptop> you pmed me on geNAZt ?
15:39 < geNAZt-laptop> i cant see it from here :O
15:40 < standoo> geNAZt-laptop: nah, didn't
15:40 < geNAZt-laptop> ok
15:40 < minibn> swig works on IE?
15:40 < geNAZt-laptop> minibn, yes
15:40 < standoo> geNAZt: going to do some penetration test
15:40 < minibn> it says on the documentation
15:40 < minibn> the most bottom
15:40 < minibn> it has problem with IE
15:40 < geNAZt-laptop> yes with some features
15:40 < geNAZt-laptop> but the most things work
15:41 < geNAZt-laptop> standoo, when do you think you start closed ?
15:42 < standoo> geNAZt-laptop: don't understand the question??
15:42 < geNAZt-laptop> you said you would start the closed beta after you have done you basic testing
15:43 < standoo> geNAZt-laptop: PM?
15:43 < geNAZt-laptop> y
15:44 < standoo> geNAZt-laptop: i've changed the design a bit now
15:45 < lufo> Hi, I'm having problems extending Moment.js
15:45 < geNAZt-laptop> lufo, tell me more
15:46 < lufo> I'm adding 2 methods to moment, but only the first one seems to work. When I want to invoke the second one, I get a Object function (input, format, lang) has no method 'test2'
15:47 < lufo> I'm doingmoment.test1 = function() { ... } 
15:47 < lufo> and same for test2
15:47 < lufo> may I share the code here or in a private room with someone?
15:47 < geNAZt-laptop> you can make a gist or hastebin
15:47 < geNAZt-laptop> and share the link here
15:47 < lufo> oh ok, hold on a sec
15:48 < minibn> theres no swig syntax highlighting for vim
15:49 < geNAZt-laptop> use the html one
15:49 < minibn> but the one inside {% %}
15:49 < minibn> all same color
15:49 < minibn> i hate it
15:51 < geNAZt-laptop> well vim has a plugin system or ?
15:51 < minibn> ya
15:51 < minibn> but i cannot find the plugin for swig
15:51 < Stephen> So does your mom
15:51 < Stephen> Sorry, had to
15:52 < Stephen> Morning folks
15:52 < minibn> i found http://www.vim.org/scripts/script.php?script_id=1615
15:52 < geNAZt-laptop> Stephen, bad -_-
15:52 < minibn> but seems to be different swig
15:52 < minibn> so does your mom?
15:54 < marahin> Hello guys, I'll speak for my friend here, since he's English is poor (poor-er than mine, and mine is poor too, sorry in advance)
15:55 < marahin> With regex and a callback my friend is trying to achieve shortened URL through gimb.us's API (which works this way: you request http://gimb.us/?url=http://the_url_you_want_to_shorten.com/ and it gives you back the $part, that you put after the slash [http://gimb.us/$part] - try it with google), but the function returns null. It doesn't care about http request, though it's theoretically executing and receiving it. 
15:55 < marahin> The code: http://pastebin.com/fZwaPQWJ
15:55 < Stephen> hmm
15:55 < Stephen> Looking
15:55 < marahin> The function is returning null - and we have no idea why does it.
15:56 < marahin> (also, thelleo is the friend I mentioned)
15:57 < minibn> back to messy HTML from jade
15:57 < minibn> :(
15:58 < lufo> hey guys can anybody check this out? 
15:58 < lufo> when I test --> http://hastebin.com/madokedixo.coffee with --> http://hastebin.com/bikoyuyoye.coffee , I get a
15:58 < lufo> TypeError: Object function (input, format, lang) {
15:58 < lufo>         return makeMoment({
15:58 < lufo>             _i : input,
15:58 < lufo>             _f : format,
15:58 < lufo>             _l : lang,
15:58 < lufo>             _isUTC : false
15:58 < lufo>         });
15:58 < lufo>     } has no method 'toISO8601'
15:59 < lufo> why in hell the first method I extend works, but not the second one? I'm doing exactly the same for both:
15:59 < lufo>   moment.iso8601duration = function (text) {
15:59 < lufo>   moment.toISO8601 = function (duration) {
16:03 < Stephen> marahin: first off, you are using "while " wrong
16:03 < marahin> thelleo, ↑
16:04 < thelleo> ough... it was for, not while (i modified code before pushing to pastebin)
16:06 < mscdex> i wish streams2 allowed for additional arbitrary data to be "given" to the user when they read() somehow :-\
16:06 < geNAZt-laptop> mscdex, what you want to give ?
16:08 < mscdex> well, i'm specifically thinking about the ssh2 protocol. when you create a channel (e.g. when starting a remote process), the server can send both "data" and "extended data" packets
16:08 < mscdex> so for a ReadableStream, how do you indicate what type of data you're reading?
16:08 < geNAZt-laptop> maybe it is possible to write a module which extends the streams2 api to add metadata to the data
16:08 < Stephen> thelleo: http://pastebin.com/LVGySzrc
16:08 < Stephen> That runs for me, but infinitly
16:09 < mscdex> additionally, if you do say, read(1500) and the first 1200 bytes in the buffer were "data" but the other 300 were "extended data", how can you ensure that boundary is not crossed?
16:09 < minibn> Stephen: which template engine do you use?
16:10 < geNAZt-laptop> well i have a tcp multiplexer
16:10 < geNAZt-laptop> which has a little metadata support
16:10 < geNAZt-laptop> but it is based on old stream1 api
16:10 < Stephen> minibn: I don't bind like that
16:11 < Stephen> Though they are useful
16:11 < geNAZt-laptop> mscdex, you could "merge" two streams
16:11 < nfour> lol
16:11 < geNAZt-laptop> one which is a object stream which tells you the metadata
16:11 < mscdex> well i am using streams1 already and that works fine because i can just do something like: emit('data', data) or emit('data', data, 'stderr')
16:11 < macbn> ok im on laptop now
16:11 < geNAZt-laptop> and one which holds the current data
16:12 < mscdex> but i was hoping to use streams2
16:12 < mscdex> somehow
16:12 < geNAZt-laptop> and if you write a little module which adds an api to feed both streams you could merge them at reading
16:13 < mscdex> but they should not be merged
16:13 < geNAZt-laptop> no not the streams
16:13 < geNAZt-laptop> but the data which comes out of the streams
16:13 < mscdex> right, they should not be merged though
16:13 < mscdex> they are two kinds of data
16:13 < geNAZt-laptop> so you have an object like {type: data, length; 1234}
16:13 < mscdex> like stdout and stderr output for example
16:13 < geNAZt-laptop> and a object {type: exdata, length: 123}
16:14 < geNAZt-laptop> and you now which read on the second stream means which metadata
16:14 < geNAZt-laptop> yes you want stream multiplexing with streams2 ?
16:16 < Stephen> mscdex: Look into JsonStream
16:18 < geNAZt-laptop> jsonstream is stream1 or ?
16:19 < geNAZt-laptop> well it is not impossible to multiplex two stream2 into one stream2 and demultiplex them
16:20 < geNAZt-laptop> which would create two channels in one stream
16:21 < Stephen> Hmm.. actually, you could, but I don't think it'd be worth it
16:21 < Stephen> Why do you want to combine them?
16:21 < geNAZt-laptop> to minify connections
16:22 < Stephen> hmm
16:22 < geNAZt-laptop> and some protocols have channels in their protocols
16:22 < Stephen> Ok, so what kind of data are you sending over the wire?
16:22 < Stephen> Or are you trying to keep this generic?
16:22 < geNAZt-laptop> well in my multiplex case i am sending game data on channel 1
16:22 < geNAZt-laptop> and app control data on channel 2
16:22 < macbn> can i use for loop in swig?
16:23 < macbn> like {% for(var i = 0; i < 10; i++)
16:23 < geNAZt-laptop> and file update control on channel 3
16:23 < geNAZt-laptop> macbn, {% for x in y %}
16:23 < macbn> it has to be that format?
16:23 < macbn> because i want to use the i
16:23 < geNAZt-laptop> no you also can count
16:24 < macbn> i can use the normal for format?
16:24 < macbn> for(var i= 0 ...
16:24 < geNAZt-laptop> no
16:24 < macbn> :(
16:24 < marahin> Stephen, it's still not working for us. :g
16:24 < geNAZt-laptop> wait i am looking into the source to tell you more
16:24 < macbn> can i define variable within {% %}
16:25 < macbn> like {% var something = "aa" %}
16:25 < geNAZt-laptop> macbn, {% set x = 1 %}
16:25 < macbn> oh
16:27 < marahin> Stephen, the whole chat's source is http://pastebin.com/k7AtzVsb
16:27 < marahin> The code you gave us is not working. :x
16:28 < geNAZt-laptop> macbn, for which case you want to use "for" ?
16:28 < macbn> my code needs that
16:28 < macbn> some special case
16:29 < macbn> it seems like it can work like this
16:29 < macbn> https://code.djangoproject.com/ticket/5172
16:29 < macbn> maybe?
16:30 < macbn> i want to loop number
16:30 < macbn> like userLevel
16:30 < macbn> userLevel = 10
16:30 < macbn> does it work like
16:30 < macbn> for (level in userLevel )
16:30 < macbn> ?
16:30 < macbn> and level is the loop from 0 - 10?
16:31 < SomeoneWeird> for(var i = 0; i < 10; i++) { 
16:31 < geNAZt-laptop> macbn, you could write a custom tag for this
16:31 < macbn> ya but it doesnt work in swig
16:31 < macbn> custom tag?
16:31 < geNAZt-laptop> {% for level in userLevel %} would try to iterate over the array or object
16:32 < geNAZt-laptop> http://paularmstrong.github.io/swig/docs/#tags-custom
16:33 < macbn> it looks so troublesome
16:33 < macbn> im going back to converting html to jade
16:33 < macbn> ....
16:37 < macbn> theres this one http://html2jade.aaron-powell.com/
16:41 < gluxon> So, none of you have any idea my excitement when I discovered BoneScript today.
16:46 < macbn> bonerscript
16:46 < s5fs> gluxon: nice, what are you using beagles for? i'm working with beagleboard-xm gear and of course the rasppi.
16:47 < gluxon> s5fs: I plan on ordering the Black now. It will be used to replace the cRIO controller on my team's FRC bots.
16:47 < gluxon> I don't know if you've heard of FRC :P
16:47 < s5fs> gluxon: not off the top of my head
16:48 < s5fs> gluxon: I camped out waiting for the beaglebone black to drop, but fell asleep and when I woke up they were sold out.
16:49 < gluxon> s5fs: :(
16:49 < gluxon> s5fs: Any retailers you can suggest?
16:49 < gluxon> I can't believe this board is officially Node.js powered :D
16:49 < marahin> Hello guys, I'll speak for my friend here, since he's English is poor (poor-er than mine, and mine is poor too, sorry in advance)
16:49 < marahin> With regex and a callback my friend is trying to achieve shortened URL through gimb.us's API (which works this way: you request http://gimb.us/?url=http://the_url_you_want_to_shorten.com/ and it gives you back the $part, that you put after the slash [http://gimb.us/$part] - try it with google), but the function returns null. It doesn't care about http request, though it's theoretically executing and receiving it. 
16:49 < marahin> Whole chat code: http://pastebin.com/k7AtzVsb
16:49 < s5fs> gluxon: check out ninjablocks if you haven't already, they're also node on beaglebones
16:50 < s5fs> gluxon: looks like digi-key has some blacks in stock!  http://www.digikey.com/scripts/DkSearch/dksus.dll?lang=en&keywords=BB-BBLK-000-ND&WT.z_slp_buy=TI_BeagleBoard&cur=USD
16:50 < gluxon> I am grabbing it now :D
16:50 < gluxon> :D  :D :D
16:50 < gluxon> This thing makes me very happy.
16:51 < gluxon> marahin: Reading through your code atm :)
16:51 < gluxon> ..
16:51 < gluxon> marahin: http://callbackhell.com
16:51 < marahin> gluxon, haha :) not mine, my friend's
16:51 < marahin> thelleo, ↑
16:51 < gluxon> Please give him that link :)
16:52 < marahin> gluxon, i just highlighted him (thelleo)
16:52 < marahin> thanks :P
16:52 < gluxon> Oop. There's your issue.
16:53 < gluxon> marahin: While loops don't play nice in Node.js
16:53 < gluxon> thelleo, marahin: Use Timers instead of that while loop. -> http://nodejs.org/api/timers.html
16:53 < gluxon> The issue is that Node.js is asynchonous, and will call http.get 10000 times instantly.
16:54 < marahin> mhm, I see
16:54 < gluxon> Not waiting for completion of the callback.
16:54 < marahin> I think thelleo is AFK right now.
16:54 < marahin> So what's the solution/
16:54 < marahin> ?*
16:54 < marahin> just using timers instead of while loops? ;)
16:54 < marahin> (and I guess understooding callbackhell / reworking the code?)
16:55 < howdynihao> yea
16:55 < howdynihao> also i think http.get is deprecated
16:55 < gluxon> marahin: The callbackhell is less important. Replace the loop with a timer. That should be a quick fix.
16:55 < gluxon> marahin: Have thelleo ping me if that doesn't work. I may or may not be away though.
16:56 < marahin> I see. As soon as thelleo gets back, we'll do the changes and will let you know if that works ;-)
16:56 < howdynihao> no, never mind it isnt
16:56 < s5fs> howdynihao: 0.10 api still lists http.get with no mention of depreciation
16:56 < marahin> sure, cheers for help!
16:56 < s5fs> howdynihao: but i thank you for giving me a reason to rtfm :) seems like we both enjoy tiny research projects haha!
16:58 < squeakytoy> wow, supervisor seems so much better than nodev
16:58 < squeakytoy> hm
17:00 < thelleo> gluxon, which method of Times should I use to replace the while loop?
17:04 < ciree> Hey guys, how do you handle "join" operations in your restful URI's?
17:16 < s3shs> Does an sql connection pool always have one connection active?  The "allConnections" array appears to always have one object.  With logging I've confirmed that I'm calling end().
17:17 < macbn> my first view is working!
17:17 < macbn> nice
17:17 < macbn> after hardwork
17:17 < s3shs> macbn, welcome.
17:17 < macbn> converting html to jade
17:21 < aandy> hi, i'm trying to add throttling in a irc bot i built a while back. here's the core of what i had in mind, but i'm not sure what this "problem" is called, so unsure how to google. can someone tell me if this is the "wrong" way of doing it: http://pastie.org/private/tbjgel5fmw8mamtloyliha
17:22 < macbn> node is just so fast
17:23 < macbn> im using async.parallel
17:23 < macbn> to load mysql data 
17:25 < macbn> i have another question
17:25 < macbn> what is the best authentication module
17:25 < macbn> everyauth
17:25 < macbn> passport
17:25 < macbn> connect auth
17:32 < tellnes> macbn: I'm using passport
17:32 < macbn> is it good?
17:32 < tellnes> macbn: but everyauth is probably something to consider also
17:32 < tellnes> I do not know about connect auth
17:33 < macbn> ya they seem similar
17:33 < macbn> first
17:33 < tellnes> I'll like passport
17:33 < macbn> what template engine do you use?
17:33 < tellnes> jade
17:33 < macbn> yes me too
17:34 < macbn> everyauth seems to have lots of issues in github
17:35 < tellnes> yes, 2 months since last update
17:35 < macbn> i guess ill use passport
17:35 < macbn> what strategies do you use
17:35 < tellnes> does not nessecary mean it is dead, but thats a reason to use passport
17:36 < macbn> for using passport
17:36 < macbn> only local?
17:36 < tellnes> local, fb and twitter. But that depends on the site
17:37 < macbn> oh
17:37 < macbn> me too
17:37 < macbn> ill use them
17:37 < macbn> and google
17:43 < macbn> how do you setup passport
17:44 < macbn> do you require passport in your app.js
17:44 < macbn> or routes/user.js?
17:45 < tellnes> I'll have an `auth.js` file where I configure it, and require passport in the routes to use the `passpord.authentificate()` function
17:46 < macbn> where do you put your auth.js
17:47 < tellnes> same dir as app.js
17:47 < macbn> what is inside auth
17:47 < macbn> auth.js
17:48 < tellnes> this stuff: http://passportjs.org/guide/configure/
17:48 < macbn> the top one?
17:48 < tellnes> yes
17:48 < tellnes> and the stuff in the bottom about sessions
17:48 < macbn> then how do you use passport.autehnticate
17:49 < tellnes> have you read the guide?
17:49 < macbn> yes
17:49 < tellnes> you use it like the examples here: http://passportjs.org/guide/authenticate/
17:49 < tellnes> the redirects example is probalby the easiest one to get working
17:49 < macbn> but im still confused
17:50 < macbn> so i configure in auth.js
17:50 < macbn> i have my routes in ./routes/*.js
17:50 < macbn> how can i use passport.authenticate if the passport is configured in auth.js
17:51 < tellnes> just require passport in the route
17:51 < macbn> so i require passport twice?
17:51 < tellnes> yes
17:51 < macbn> it will be configured in both?
17:52 < macbn> ok
17:52 < macbn> ill try
17:52 < tellnes> the require call is cached by node
17:52 < tellnes> so you will always get the same object
17:52 < macbn> oh
17:52 < macbn> ok
17:52 < macbn> nice
17:52 < tellnes> here is a nice example: https://github.com/jaredhanson/passport-local/blob/master/examples/login/app.js
17:53 < macbn> oh thank you
17:53 < macbn> if i want to separate auth.js
17:53 < macbn> is just add require(auth.js)l in my app.js right?
17:53 < tellnes> yes
17:53 < macbn> ok
17:54 < macbn> ill put it in lib/auth.js
17:54 < macbn> or ./auth.js is better
17:54 < tellnes> it really has nothing to say
17:55 < tellnes> but I se no reason to put it in lib/ since you probably will not get that many files
17:55 < tellnes> if you need to create a lib/ dir, you probably should create a new module and put it in npm
17:56 < macbn> ill just put it in the same level as app.js like you
17:57 < qq99> I'm developing a multi-channel chat with socket.io and running into difficulties, anyone done something similar that might be available to chat a bit?
17:58 < tellnes> qq99: probably someone, try asking the question
17:59 < qq99> alright, well.  I've been avoiding using socket.io's namespaces for chat channels (as it doesn't seem to be the intended purpose).  After socket connection, I bind a bunch of different events.  My problem comes in when the client unsubscribes-- those events aren't removed, but they all have the same name-- I was filtering out which would fire on which socket based on an internal list of rooms the client wa
17:59 < qq99> s in
18:00 < qq99> I wanted to consider 1 client joining multiple rooms to be different clients (so you could have a different identity per room)
18:00 < qq99> but the problem comes when the guy rejoins the channel he just left -- it binds the same event again and now he's seeing two of everything 
18:01 < qq99> it also feels dirty to check "if !client.isIn(room) { return; } " in each event handler
18:02 < qq99> ideally I'd like to remove all the events that were bound inside "subscribe" of that one socket, should I just suffix the channel name to the event name?
18:03 < qq99> right now the socket has events like:  "chat" => [function <for room 1>, function <for room 2>, ...]
18:03 < qq99> is it smarter to just do "chat:room1" => [ one function], "chat:room2" => [ one function ]
18:04 < qq99> because I'm finding it difficult to manage removing specifically a certain event without keeping a ton of state
18:04 < tellnes> If I understand you correctly, it sounds like a good idea, yes.
18:04 < tellnes> adding event listeners is cheap
18:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:04 < qq99> is there a lot of overhead with having a ton of events bound?  I would've imagined, like inbrowser, it's better to have one deferred event
18:05 < howdynihao> sosososososo
18:05 < howdynihao> websockets isn't a chat protocol
18:05 < qq99> tellnes, thanks, it helps me that you think it sounds alright :)
18:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:06 < qq99> howdynihao, I know it isn't, but it's a good tech for a web-based chat app
18:06 < tellnes> qq99: the a event listener is just a property in a hash
18:06 < howdynihao> my point is, if you want to write a sophisticated chat system, do that
18:06 < howdynihao> dont try to make socket.io the chat system
18:07 < tellnes> howdynihao has a poing also
18:07 < qq99> I'm just using it for transport?
18:07 < howdynihao> no
18:07 < qq99> hmm
18:07 < howdynihao> you're using it to manage state
18:07 < howdynihao> of your chat
18:07 < qq99> that is a good point
18:07 < qq99> I guess it might be ok to use it to manage some state for a smaller app
18:07 < tellnes> yes
18:08 < qq99> well I've already abstracted the state of clients and their data
18:09 < TheAceOfHearts> http://geelen.github.io/web-directions-talk/#14 heh. strict mode. this talk is pretty cool.
18:22 < macbn> i cannot authorize
18:22 < macbn> when i login
18:22 < macbn> the browser keeps on loading
18:23 < geNAZt> macbn, what do you make to "login" ?
18:23 < macbn> im using passport
18:23 < geNAZt> with a database ?
18:23 < geNAZt> and which strategies ?
18:25 < macbn> local
18:25 < macbn> with mysql
18:25 < geNAZt> do you enter the strategy route ?
18:26 < macbn> strategy route?
18:26 < macbn> i put it in user route
18:26 < macbn> app.post
18:26 < macbn> app.post('/user/login', function
18:26 < geNAZt> well you have a route like app.get("....", passport.authenticate('local',....
18:26 < geNAZt> or not ?
18:26 < macbn> yes
18:26 < geNAZt> do you hit it ?
18:27 < macbn> yes i think so
18:27 < macbn> i consolelog
18:27 < macbn> beore passport.authenticate
18:27 < macbn> and its ok
18:27 < geNAZt> ok
18:27 < geNAZt> do you now if it cycles or if it loops ?
18:27 < macbn> i dont understand the serialize user
18:27 < geNAZt> loops => 100% cpu usage
18:27 < macbn> and deserialize user
18:28 < geNAZt> well these two functions do the loading of a user and the saving of the session
18:28 < tellnes> macbn: try adding more console.log statmets to see where something is not wat you expect
18:28 < geNAZt> serialize gets the complete user object and you choose which keys go into the user session
18:28 < tellnes> serialize and deserialize is just important to make the user logged in after the login process is finish
18:29 < geNAZt> deserialize is used to get the full user object back out of the data from the user
18:30 < macbn> it doesnt hit my model
18:30 < macbn> i dont know why
18:30 < geNAZt> but again is the app in an infinite loop (cpu usage 100%) or is it just cycling forever (low cpu usage)
18:30 < geNAZt> maybe you forgot to call a callback
18:30 < geNAZt> or so
18:30 < macbn> it uses done
18:31 < geNAZt> do you have high load on your cpu when hitting the bug ?
18:33 < tellnes> macbn: you have probably forgotten to call a callback like geNAZt said, you the app is not spilling at a infinite-loop
18:34 < macbn> i will check
18:35 < owen1> i am using https://github.com/ncb000gt/node-cron and it's fantastic. why would anyone want to use the unix cron anymore?
18:36 < macbn> i put all callbacks
18:36 < tellnes> owen1: if you do not have node installed 
18:38 < owen1> tellnes: yeah. it's also my fault. i didn't figure out all the error vs stdout related issues.
18:38 < owen1> (with unix cron)
18:38 < tellnes> owen1: unix cron can be a little tricky some times yes
18:39 < owen1> and it's nice to keep everything in javascript/node land.
18:39 < macbn> oh that loading
18:39 < macbn> is caused by app.post('login', function(req, res) { passport.auth
18:39 < macbn> it should be
18:40 < macbn> app.post('login', passport.auth, function(req,res
18:40 < macbn> ...
18:40 < macbn> but still error now
18:40 < geNAZt> well use more console.log
18:42 < macbn> it loads ok
18:42 < macbn> now
18:42 < macbn> but the console log in my model is not called
18:42 < geNAZt> well how do you call your model ?
18:43 < macbn> what does     process.nextTick(function () { do
18:43 < geNAZt> it sets the function into the next event loop tick
18:45 < macbn> i dont know 
18:45 < macbn> ..
18:49 < macbn> now it gives different error so its good
18:49 < macbn> it was because i defined routes in app.js on the top
18:49 < macbn> i dont know if this matters
18:52 < macbn> it says string is not a function...
18:52 -!- isaacbw changed the topic of #Node.js to: Do you even javascript? - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
18:54 < geNAZt> well do you code or a error trace ?
18:55 < macbn> i have callback(data)
18:55 < macbn> callback(data) after the database query callback(err, data);
18:55 < macbn> and on that callback(data)
18:55 < macbn> it says string is not a function
18:56 < mirkob> hi
18:56 < geNAZt> can you console.log(arguments) before that callback ?
18:56 < paulkon> macbn: pastebin your code
18:57 < DiegoMax> is there any way to get a copy of an object in node?
18:57 <@mbalho> JSON.parse(JSON.stringify(obj)) :D
18:58 < geNAZt> :D
18:58 < DiegoMax> but my object contains some methods inside
18:58 < DiegoMax> i want that cloned too
18:58 < DiegoMax> and i have defined those properties as non enumerable
18:58 <@mbalho> use object prototypes and new
18:58 <@mbalho> then you can make as many instances as you like
18:59 < DiegoMax> is there anything like object observing in node/js ?
18:59 < DiegoMax> the only reason why i want to copy the object is before im modifying the proprties of it
18:59 < macbn> http://paste2.org/7eM73LDK
18:59 < DiegoMax> and then i want to compare before/after values
18:59 < macbn> its kind of long
18:59 < mirkob> I am pretty new to node and I am looking for a good pattern to persist model objects to redis, looked at &yet's "Re-using Backbone.js Models" and other blog posts like "nodechat.js – Using node.js, backbone.js, socket.io, and redis" any pointers of the latest findings in that direction?
18:59 < macbn> i have auth.js
19:00 < macbn> model/user.js
19:00 < mirkob> or am I heading in the wrong direction
19:00 < macbn> app.js
19:00 < DiegoMax> **is because
19:00 < geNAZt> username, password,
19:00 < macbn> and routes/user.js
19:00 < geNAZt> your arguments of the functions differ
19:00 < geNAZt> you want a id in the model
19:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:00 < geNAZt> and you give in a user and a password in the strategy
19:01 < geNAZt> so callback is the password(string) and so string is not a function is the correct error
19:01 < macbn> in which line
19:01 < geNAZt> 3
19:01 < geNAZt> and 26
19:01 < macbn> ooh
19:01 < macbn> !!!!
19:02 < macbn> thank you
19:02 < macbn> i fixed that 
19:02 < macbn> but now
19:03 < macbn> another error
19:03 < macbn> Error: passport.initialize() middleware not in use
19:03 < geNAZt> in your app.js the passport middleware is not given
19:03 < macbn> i put it in auth.js
19:04 < geNAZt> line 87
19:04 < geNAZt> must move after the app.use things
19:05 < macbn> avter where
19:05 < macbn> after where
19:05 < geNAZt> 91
19:06 < macbn> var passport = require('./auth.js');
19:06 < macbn> app.use(flash());
19:06 < macbn> app.use(passport.initialize());
19:06 < macbn> app.use(passport.session());
19:06 < macbn> var passport in the bottom?
19:07 < geNAZt> yes
19:07 < DiegoMax> hmm
19:07 < DiegoMax> Object.observe() seems to be what im looking for
19:07 < DiegoMax> but doesnt seem to be supported in node
19:07 < macbn> i changed the order
19:07 < macbn> and now i got another error
19:08 < macbn> how can that app.use order matter
19:08 < geNAZt> well the middleware stack does get iterated in the order in which you give then into the stack
19:08 < macbn> i move that whole block before app.user(app.router);
19:08 < geNAZt> yes app.router should be the last app.use
19:09 < macbn> now i got rror: failed to serialize user into session
19:10 < geNAZt> does the user object in line 37 has a id property ?
19:11 < macbn> yes
19:12 < macbn> id : 1
19:12 < macbn> maybe because it is returned as array
19:12 < geNAZt> ah yes
19:12 < macbn> how can i not returned as array
19:12 < geNAZt> it is better to call the callback from the model 
19:12 < macbn> with node-mysql
19:12 < geNAZt> line 13
19:13 < geNAZt> chnage callback(data); to callback(data[0]);
19:13 < macbn> oh
19:13 < macbn> ok
19:13 < macbn> nice
19:13 < geNAZt> and now everything should work like you expect or ?
19:14 < macbn> no error now
19:14 < macbn> but
19:14 < macbn> 500
19:14 < macbn> 500 stays in user/login
19:14 < geNAZt> well dont you have and errorlogger in expressjs ?
19:15 < macbn> oh it works now actually
19:15 < macbn> because i have no router for /
19:16 < geNAZt> ah okay :D
19:16 < macbn> how can i check
19:16 < macbn> if i have logged in
19:16 < geNAZt> passport adds a user object into the request
19:16 < geNAZt> so if (typeof req.user !== "undefined") {} you are logged in
19:17 < macbn> and since deserialize done something to user object
19:17 < macbn> i have password in there
19:17 < macbn> i have user.password
19:17 < macbn> is it save?
19:17 < geNAZt> yes
19:17 < macbn> or should i delete user.password
19:17 < geNAZt> it is only in the object on your server
19:17 < geNAZt> not in the session on your client
19:17 < macbn> oh ok
19:18 < macbn> i have undefined log 
19:18 < macbn> i dont know where it comes from
19:19 < geNAZt> little nasty trick
19:19 < geNAZt> var oldLog = console.log; console.log = function() { console.trace(); oldLog.apply(console, arguments); };
19:20 < geNAZt> >> var oldLog = console.log; console.log = function() { console.trace(); oldLog.apply(console, arguments); }; console.log("a");
19:20 < purr> geNAZt: TypeError: Object [object Object] has no method 'trace'
19:20 < macbn> where should i put this
19:21 < geNAZt> first line of your app.js
19:21 < geNAZt> but delete it as fast as you found your bug
19:21 < geNAZt> its for development use only !!!
19:22 < macbn> oh nice
19:23 < macbn> after i logged it
19:23 < macbn> it gives me 500 everywhere
19:23 < geNAZt> oO
19:23 < geNAZt> but you found your console.log call ?
19:24 < amazony_> Hi guys.. I made script, it returns no errors, socket.io starts fine but when I try to load localhost:8080 nothing happens.. any ideas?
19:24 < macbn> not yet
19:24 < macbn> OST /user/login 302 23ms - 58b
19:24 < macbn> undefined
19:24 < macbn> GET / 500 7ms
19:24 < macbn> undefined
19:24 < macbn> GET /lessons 500 4ms
19:24 < macbn> i have route lessons defined
19:24 < macbn> but 500 after log in
19:25 < geNAZt> okay
19:25 < macbn> in the screen
19:25 < macbn> Express
19:25 < macbn> 500 [object Object]
19:25 < macbn> browser
19:25 < geNAZt> can you post your lessons route handler ?
19:27 < amazony_> ERROR 324 after trying to load page.. any ideas?
19:27 < macbn> http://paste2.org/2B2HFxxF
19:27 < macbn> i think it doesnt matter
19:27 < macbn> cos it works fine before login
19:27 < macbn> and if i login with wrong password
19:29 < geNAZt> so it only happens when you are logged in ?
19:29 < macbn> yes
19:29 < macbn> it must mess up the req?
19:30 < geNAZt> can you console.log the user in line 43 ?
19:30 < macbn> req.user?
19:31 < geNAZt> no
19:31 < geNAZt> console.log(user);
19:31 < geNAZt> in line 43 of http://paste2.org/7eM73LDK
19:32 < macbn> it says undefined
19:32 < geNAZt> if you havent logged in ?
19:32 < geNAZt> or if you have logged in ?
19:33 < macbn> both
19:33 < macbn> because it only fire up if i login
19:34 < geNAZt> no deserializeUser should fire up on every logged in request
19:34 < Stephen> Can you show the code that calls deserializeUser
19:35 < geNAZt> Stephen, he never calls it, the passport module does that
19:35 < Stephen> Ah
19:35 < macbn> ok
19:35 < macbn> it works now
19:35 < macbn> its because
19:35 < geNAZt> what was the error ?
19:35 < macbn> 	models.User.findById(id, function (err, user) { 
19:36 < macbn> i dont have err in my callback
19:36 < macbn> only data
19:36 < geNAZt> ah okay
19:36 < macbn> should i include error?
19:36 < geNAZt> so you dont give an error into passport
19:36 < geNAZt> you should handle the error if a error comes
19:36 < macbn> should i include error in database callback
19:36 < geNAZt> and say passport that you had a error
19:36 < macbn> i handle it in the model
19:36 < geNAZt> yes give passport the error
19:37 < macbn> i do if (err) return err; in all model functions
19:37 < Stephen> It's typically important to provide modules with all parameters they allow for
19:37 < Stephen> Especially in callback scenarios
19:39 < macbn> ok i have my req.user now
19:39 < macbn> nice
19:39 < macbn> thank you
19:39 < geNAZt> np, have fun :D
19:39 < macbn> i think its almost 12 hours now
19:39 < macbn> ...
19:39 < macbn> can you take a look at my model
19:40 < geNAZt> but you have a server running, mysql running, models up, routes up
19:40 < macbn> in http://paste2.org/7eM73LDK
19:40 < geNAZt> the basic strcture of your app is ready
19:40 < macbn> yes
19:40 < macbn> cos of your help
19:40 < macbn> thanks a lot!
19:40 < macbn> in my model
19:40 < macbn> i do callback(data);
19:40 < geNAZt> yes
19:40 < macbn> should i do callback(err,data);
19:40 < macbn> i thought it was useless
19:40 < macbn> because if theres error
19:41 < macbn> it will return err
19:41 < geNAZt> but return into what ?
19:41 < geNAZt> into nothing :D
19:41 < geNAZt> well if there is an error it should console.log it
19:41 < macbn> ya thats true
19:41 < macbn> so i better return the error in the routes?
19:41 < geNAZt> and call the callback with error and null
19:41 < macbn> not in the model?
19:42 < geNAZt> so the callback function every time is callback(error, data);
19:42 < geNAZt> and if you have an error you only call callback(err);
19:42 < mkozjak> v0.8.14 gives 'Object #<Object> has no method 'ftruncate'' when i try using fs.ftruncate. i have require fs. any ideas why?
19:42 < macbn> without if(err) return err;
19:42 < daniel1> hello all. I am having a problem with compound.js. I know that may be a bit off-topic but the folk in #compoundjs said I should ask here instead.
19:42 < daniel1> I get a "TypeError: Cannot call method 'validatesPresenceOf' of undefined" when I start my app. this in addition to a "Generator crud not found" error when using 'compound generate' from the command line
19:42 < geNAZt> if(err) { console.log(err); return callback(err); }
19:42 < geNAZt> and for the data callback: callback(null, data);
19:43 < macbn> oh ok
19:43 < mkozjak> seems like there's truncate, but no ftruncate in that version, nvm
19:44 < macbn> this is so many boiler plate
19:44 < macbn> my db.getConnection thingy
19:44 < geNAZt> well write a helper function for it
19:45 < macbn> i tried
19:45 < macbn> but couldnt get any good one
19:45 < macbn> because in connection.query
19:45 < macbn> it can be
19:46 < macbn> connection.query(query, array, callback); and connection.query(query, callback)
19:46 < macbn> i dont know how that works
19:47 < geNAZt> macbn, http://hastebin.com/suwilahobi.js
19:48 < geNAZt> and if you have this helper function you can inject this function
19:48 < geNAZt> instead of giving the pool around
19:49 < macbn> yes i was thinking of this too
19:49 < macbn> but sometimes
19:49 < macbn> i dont need the data
19:50 < macbn> directly go to callback
19:50 < macbn> like query (sql, callback)
19:50 < macbn> and sometimes theres also
19:50 < macbn> query(sql, data, callback)
19:50 < geNAZt> yes i can rewrite it :D
19:50 < macbn> there are a lot of js function like this
19:51 < macbn> i dont know how does it work
19:51 < macbn> do they put if?
19:51 < geNAZt> http://hastebin.com/qalocomiju.js
19:51 < geNAZt> now it works in both cases
19:52 < geNAZt> well in js arguments arent requireable
19:53 < macbn> so ya
19:53 < macbn> you put an if in there
19:53 < macbn> do people normally do this?
19:53 < geNAZt> yes
19:53 < geNAZt> because
19:53 < macbn> i thought it was automatic
19:54 <@isaacbw> http://handlebarsjs.com/
19:54 < geNAZt> >> function test(a,b,c) { console.log(a,b,c); }; test(); test("a"); test(12, "b"); test([], 12, {});
19:54 < purr> geNAZt: undefined; Console: undefined, undefined, undefined, 'a', undefined, undefined, 12, 'b', undefined, [], 12, {}
19:54 < geNAZt> all are possible
19:55 < macbn> ya i understnd that
19:55 < geNAZt> js doesnt check the arguments for you
19:55 < geNAZt> you must do that :D
19:55 < macbn> so where should i put this helper
19:55 <@isaacbw> yay javascript
19:55 < macbn> in models/index.js?
19:55 < geNAZt> yes
19:55 < macbn> and pass it
19:55 < macbn> in require
19:55 < geNAZt> and then pass it around instead of the pool
19:55 < geNAZt> yes
19:55 < geNAZt> and you have minified you boilerplate :D
19:55 < macbn> thank you
19:55 < macbn> im getting smarter
19:56 < geNAZt> no problem :D
19:56 <@isaacbw> but boilerplate is the best part
19:56 < geNAZt> yeah copy and paste coding (c) :D
19:57 < amazony_> :D
19:58 <@isaacbw> handlebarsjs.com is showing a squatter site for everyone else, right?
20:00 < geNAZt> should it ?
20:00 <@isaacbw> I don't think so?
20:01 < geNAZt> well i get a normal orange site with a mustache at the top
20:01 < geNAZt> saying handlebarsjs
20:01 <@isaacbw> weird
20:01 < geNAZt> cache issue ?
20:01 <@isaacbw> maybe on the dns level
20:02 < macbn> ok it works and looks much cleaner now
20:02 < macbn> thanks!
20:02 < geNAZt> macbn, its no problem ;D
20:03 < macbn> having a good mentor is good, not just copy paste, i also learn, http://mashable.com/2013/04/28/mentor-career/
20:04 < mkozjak> what scheduling (cron-like) module do you recommend?
20:04 <@isaacbw> cron?
20:04 <@isaacbw> cron
20:05 < macbn> i have to do res.render('', [user: req.user]) all the time
20:05 < geNAZt> crond (from your system)
20:05 < macbn> can i make this req.user always available in view
20:05 < geNAZt> yes by using locals
20:06 < geNAZt> http://expressjs.com/api.html#res.locals
20:06 < macbn> ok
20:06 < mkozjak> isaacbw, geNAZt, just cron from my system and my application listening for a certain message?
20:07 < geNAZt> well it depends on what you want to do in the cron ?
20:07 < geNAZt> is it a in node thing ?
20:07 < mkozjak> geNAZt: i want my program to start logrotating
20:07 < geNAZt> or just used to call an external script ?
20:07 < geNAZt> so its in app
20:07 < mkozjak> yes
20:07 < geNAZt> setTimeout ?
20:08 < mkozjak> hmm, i want it to start at exactly 0:00 every day. is setTimeout secure for that?
20:08 < isaacs_mobile> Mkozjak: use cron for that. 
20:09 < mkozjak> isaacs_mobile: by that i guess you mean that i should listen for some system event so i can handle it?
20:10 < geNAZt> well i would calculate the difference between now and the next 0:00
20:10 < geNAZt> and set a timeout
20:10 < isaacs_mobile> Yep. You can send a SIGUSR1 or make a special req or something
20:10 < mkozjak> ok, guys, thanks :)
20:10 < isaacs_mobile> That's what I'd do anyway. Simpler
20:13 <@isaacbw> I'm falling out of love with angularjs. This is terrible
20:13 < geNAZt> why ?
20:14 < amazony_> Guys please, I have no problem in my code but i can't load page, any ideas?
20:14 < geNAZt> amazony_: wrong port ?
20:14 <@isaacbw> I'm finding that many solutions with angularjs are very roundabout, at least for this sort of application
20:14 < macbn> the query helper doesnt work with data[0]
20:15 < geNAZt> macbn, for that your User.login model needs to do that
20:15 < amazony_> genazt port is ok... it's this app http://demo.tutorialzine.com/2012/08/nodejs-drawing-game/node-drawing-game.zip
20:16 < geNAZt> @isaacbw, is it the fact what angularjs tries to achieve or the way it does ?
20:16 < macbn> ok
20:16 < macbn> i got it
20:16 <@isaacbw> geNAZt: I think that angularjs is very clever for what it does
20:16 < macbn> thanks
20:20 < geNAZt> @isaacbw, i wish that someday angularjs like websites can be crawled via seo
20:20 < geNAZt> thats the only thing why i dont build that kind of applications
20:22 < amazony_> genaZt: is there any way to debug it? i want to see everything what's happening on the server
20:23 < geNAZt> no
20:23 < geNAZt> if the app doesnt have features like that
20:23 < geNAZt> its hard to debug
20:24 < geNAZt> but you can start node in debug-brk mode and append a node-inspector
20:24 < geNAZt> or another nodejs debugger client
20:26 <@isaacbw> geNAZt: the kinds of applications I develop don't really need seo. Think desktop-style single-page apps
20:26 <@isaacbw> so most if not all of the data is user-specific and very dynamic
20:26 < geNAZt> yes for data intensive apps they are nice
20:26 < geNAZt> but seo on a angularjs site would be the dream from me
20:27 <@isaacbw> the core premise of angularjs is two-way binding, but I haven't actually found that I need that often
20:27 <@isaacbw> geNAZt: a few people have managed to pull it off, at least experimentally, with things like phantomjs and node-webkit
20:27 < geNAZt> two-way binding ?
20:28 <@isaacbw> http://docs.angularjs.org/guide/compiler
20:28 <@isaacbw> scroll down a bit
20:28 < geNAZt> ah this two way
20:29 < geNAZt> for normal its model => view
20:29 < geNAZt> not view => model
20:29 <@isaacbw> ah, handlebarsjs.com just started working
20:29 <@isaacbw> geNAZt: yea
20:29 <@isaacbw> well the idea is that you might have a somewhat complex graph that data gets piped through
20:29 <@isaacbw> possibly cyclical 
20:30 <@isaacbw> and angularjs does some clever things to make that work, but I find that it's more overhead than I need
20:30 < geNAZt> yeah i like the approach tha if the model changes the view gets updated
20:31 < geNAZt> i also like the injector (i rebuild it for node)
20:31 < geNAZt> :D
20:32 < amazony_> i'm really messed up, why the heck it doesn't work
20:33 <@isaacbw> geNAZt: oh, you've used angular?
20:33 < geNAZt> yes once
20:34 < geNAZt> in combination with sailsjs
20:34 <@isaacbw> the injector is definitely cool :P
20:34 <@isaacbw> and I like what angular does with services
20:34 < geNAZt> yes i rewrote my application framework after i saw it
20:34 < geNAZt> and now my routes are plugins which run upon this injector patterns
20:34 < geNAZt> its really clean and nice
20:35 <@isaacbw> geNAZt: I've been curious how angular can see the argument names for a while. Can you point me to docs on how that works?
20:35 < geNAZt> i can tell you
20:35 <@isaacbw> sure :)
20:35 < geNAZt> >> function test($logger, $config) {}; test.toString();
20:35 < purr> geNAZt: (string) 'function test($logger, $config) {}'
20:35 < geNAZt> and some regex magic :D
20:36 <@isaacbw> oh man, that's so simple
20:36 <@isaacbw> awesome!
20:36 <@isaacbw> thanks :D
20:36 < geNAZt> https://github.com/angular/angular.js/blob/master/src/auto/injector.js#L41-L71
20:37 < geNAZt> its the full angularjs function
20:37 <@isaacbw> that's proper
20:43 < ericelliott> How is this not the #1 used module on npm? http://moutjs.com/
20:44 < Havvy> ericelliott: Because underscore is...pretty much.
20:44 < ericelliott> Haavy: I'm switching today.
20:45 < ericelliott> Mout is much more complete.
20:45 < ericelliott> and way more modular.
20:45 < ericelliott> You can require only the function you need, for example.
20:46 < ericelliott> and its modularity works with AMD, node, and browserify.
20:46 < ericelliott> And it's more consistent with native functional iterators.
20:47 < Havvy> Yeah, it looks nice.
20:47 < Havvy> I wish that object.get function took an array though.
20:47 < Havvy> Maybe I can add it...
20:47 < ericelliott> Basically, it kick's Underscore's butt on just about every point I can think of.
20:48 < Havvy> ericelliott: Chaining. It is missing chaining.
20:48 < Havvy> Not that Underscore has good chaining...
20:48 < ericelliott> Underscore's chaining is a joke.
20:49 < Havvy> very much so.
20:49 < ericelliott> I'd rather not have it than have a janky version of it.
20:50 < ericelliott> I discovered Mout because I made this: https://github.com/dilvie/ofilter
20:50 < ericelliott> and somebody pointed out that this work has already been done.
20:50 < ericelliott> Good they did, too, I was going to do the full set of Underscore / Array extras iterators for objects, sets, and maps.
20:51 < ericelliott> Now I don't have to reinvent the wheel just to feel like I have a good toolbelt.
20:51 < Havvy> Next time I'm in node.js, I'll be sure to use that.
20:53 < arnorhs> do you guys know if somebody's made a good module for doing distributed map reduce in node?
20:55 <@mbalho> arnorhs: check out https://github.com/rvagg/node-levelup/wiki/Modules
20:56 < macbn> hadoop
20:57 < ericelliott> Havvy: Mout is not just for node. Works with AMD and Browserify.
20:57 < Havvy> Yes, I can read the documentation.
20:58 < Havvy> The webpages I work on don't need complex JavaScript.
21:00 < ericelliott> Havvy: haha, I have to remind myself there's such a thing as a website that doesn't need complex JavaScript. There are lots of content-oriented sites around.
21:01 < ericelliott> Havvy: I just spend all my time building apps. =)
21:01 < arnorhs> mbalho: ah, nice, i suppose you're referring to this one? https://github.com/dominictarr/map-reduce
21:24 < aleale97> hey all :)
21:29 < ericelliott> hi
21:41 < msull92> Is anyone alive in here?
21:44 < Shayanjm> yup
21:45 <@isaacbw> I think so
21:59 < eltigre> hey, I'm interested in using karma(testacular) but I don't understand it
21:59 < eltigre> I have a file with jasmine tests, and it's sort of included in the browser and running, but the tests are not executed
22:01 < dhiw> are there any performance benchmarks showing static file serving of Node.JS versus nginx or varnish web cache? For certain relative urls you could serve it from the faster one but I'm wondering if Node.JS can be used as a front end for everything, and then use Node.JS as a proxy serve to reach the other daemons and the file store. Just an example
22:02 < Aria> node.js doesn't have a sendfile(), exactly, so some cases are limited by that; varnish doesn't serve static files, only from its own cache, so not really quite comparing apples to apples.
22:02 < Aria> A little comment about your use case might yield more interesting comparisons.
22:02 < Aria> Big files? Little files? All the same file, different files all the time? 
22:02 < eltigre> dhiw, nodejs should be slower than nginx, and since nginx supports SPDY, SSH and websockets, it normally makes no sense to use node.js as the frontend
22:02 < Aria> Purely static, or with some authentication or authorization of the request first?
22:03 <@isaacbw> dhiw: if you're only sending files, nginx will probably be better
22:03 < Aria> SSH, eltigre?
22:05 < eltigre> ssl, sorry
22:05 < dhiw> yeah there seems to be some mixed concencus i guess I don't need all the authentication I was just surprised serving a localhost file(static, at least with the code I used) was noticibyly sluggish. 
22:06 < dhiw> it might need a sendfile code path of some sort that is speedy, like mmap through some native C hooks or something
22:11 <@isaacbw> often people use nginx to serve static files and at the same time reverse proxy to a node app
22:27 < robinson_k> how do i run a single test on the node.js project? did not find any flag in the python script
22:28 < robinson_k> just using `node test-XY.js` also does not work
22:51 < robinson_k> ah nevermind
23:05 < echo|> Yuck, I don't want to setup graphite behind nginx :(
23:25 < owen1> why would someone use node-cron instead of unix cron? i wrote a blog post about it and the commenters seems to prefer unix cron - http://www.reddit.com/r/node/comments/1doz6u/cron_jobs_made_easy_with_node/
23:25 < beg> Whats the point of sockets.io get/set methods?
23:25 < owen1> the main reason for me is i am not confident with crons and good proctice of logging them
23:26 < owen1> so a solution in node makes it easy for me
23:26 < echo|> owen1: Sounds as though it would be easier to keep track of which crons have run. An issue with the unix crond is if one takes a long time, it can be ran again ontop of itself.
23:26 < echo|> Which I see all too often on dying boxes.
23:27 < owen1> echo|: why is this overlap easier to deal with in node-cron?
23:34 < beg> owen1, from what i read and what the issue is, it might be that nodejs is singlethreaded and that if something is blocking, it will not be able to create more instances?
23:35 < owen1> beg: not sure
23:36 < beg> I might be 100% wrong :D
23:36 < addisonj> the bigger question... why re-implement something when the OS has great support for and is a super well know? as far as logging, all cron does is run a shell command, so >> the file, or have your cron job itself post its logs to a server or write to 1 of 1000 logging libraries
23:37 < addisonj> yes, and if its in the same thread as your server process, if your cron job borks, you just killed your server for no reason
23:38 < beg> hey guys, how do you guys write to "check" if something has a value?
23:38 < beg> if I type if (str != undefined), it will show true on a empty string
23:39 < beg> so should i write if (str != undefined && str != "" && str != null) ?
23:39 < mscdex> beg: an empty string is a value
23:40 < mscdex> anything other than undefined has a value :-)
23:40 < beg> yes, mscdex, but i believe in php you could do if ($str <> "") and it would return false on an empty string aswell as undeclared string
23:41 < mscdex> beg: you can write your empty() function
23:41 < owen1> addisonj: got it. i'll try cron instead.
23:41 < beg> mscdex, alright
23:41 < mscdex> beg: because "empty" is going to mean something different from one application to the next
23:42 < addisonj> owen1: if you need help managing cron jobs for deploys, you can trying using this: github.com/idottv/gogogo
23:42 < addisonj> assuming you use debian/ubuntu, it will write out cron jobs to a default log directory and do log-rotate and things
23:42 < addisonj> (thats the deploy tool I help maintain where I work, its powered by JSON)
23:45 < owen1> addisonj: i use centos at work, but at home i have debian. i don't think debian uses upstart
23:45 < addisonj> you can make it use upstart
23:46 < addisonj> but anyways, you actually don't  need upstart for the cron section
23:46 < owen1> ok. looks interesting. thanks
23:49 < owen1> i am scared of crons since a) not sure what user will it run under and if i'll have the correct $PATH b) i need to make sure i cancel emails so i don't spam people
23:49 < owen1> c) it's not easy to test as a node script
23:51 < owen1> i guess i need to find a good resource to educate me about crons
23:54 <@isaacbw> 'man cron'
--- Log closed Sun May 05 00:00:44 2013
